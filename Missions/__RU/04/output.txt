// var ident , peopledef , un , whole_units ; export Burlak_saved , Gaydar_saved , Gaydar_wait , you , ally , arab , attack , selfdefend , sm_attack1 , sm_attack2 , sm_attack3 , other , alliance , Burlak , Gnyevko , Platonov , Belkov , Scholtze , Kuzmov , Kovalyuk , SoldierX , Soldier1 , Scientist1 , Engineer1 , Mechanic1 , Popov , Gaydar , Heike , new , player_units , saved_player_units , Convoy , Convoy_length , Convoy_delay , FirstCargo , trucks_diverted_count , trucks_diverted_list , number_of_trucks , number_of_guns , number_of_hv_guns , number_of_gatlings , number_of_hv_mchn_gun , konec , RecklessAttack , BelkovFreed , pocet , count , attack_offset , attack_count , ar_killed , was_combat , driver , lab_upgraded , workshop_upgraded , depot_build , workshop_build , armoury_build , bunker_build , turret_build , base_dismantled , player_building_captured , pocet_budov , waypointsEND , sm_pocet1_2 , sm_pocet3 , Disabled4 , Disabled8 , Disabled9 , Disabled13 ; function set_difficulty ; begin
   0: LD_INT 0
   2: PPUSH
// number_of_trucks := [ 20 , 17 , 14 ] [ difficulty ] ;
   3: LD_ADDR_EXP 38
   7: PUSH
   8: LD_INT 20
  10: PUSH
  11: LD_INT 17
  13: PUSH
  14: LD_INT 14
  16: PUSH
  17: EMPTY
  18: LIST
  19: LIST
  20: LIST
  21: PUSH
  22: LD_OWVAR 67
  26: ARRAY
  27: ST_TO_ADDR
// number_of_guns := [ 13 , 11 , 9 ] [ difficulty ] ;
  28: LD_ADDR_EXP 39
  32: PUSH
  33: LD_INT 13
  35: PUSH
  36: LD_INT 11
  38: PUSH
  39: LD_INT 9
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: LIST
  46: PUSH
  47: LD_OWVAR 67
  51: ARRAY
  52: ST_TO_ADDR
// number_of_hv_guns := [ 6 , 5 , 4 ] [ difficulty ] ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 6
  60: PUSH
  61: LD_INT 5
  63: PUSH
  64: LD_INT 4
  66: PUSH
  67: EMPTY
  68: LIST
  69: LIST
  70: LIST
  71: PUSH
  72: LD_OWVAR 67
  76: ARRAY
  77: ST_TO_ADDR
// number_of_gatlings := [ 8 , 6 , 4 ] [ difficulty ] ;
  78: LD_ADDR_EXP 41
  82: PUSH
  83: LD_INT 8
  85: PUSH
  86: LD_INT 6
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: EMPTY
  93: LIST
  94: LIST
  95: LIST
  96: PUSH
  97: LD_OWVAR 67
 101: ARRAY
 102: ST_TO_ADDR
// number_of_hv_mchn_gun := [ 3 , 2 , 1 ] [ difficulty ] ;
 103: LD_ADDR_EXP 42
 107: PUSH
 108: LD_INT 3
 110: PUSH
 111: LD_INT 2
 113: PUSH
 114: LD_INT 1
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: PUSH
 122: LD_OWVAR 67
 126: ARRAY
 127: ST_TO_ADDR
// convoy_delay := [ [ 60 , 120 ] , [ 45 , 105 ] , [ 30 , 90 ] ] [ difficulty ] ;
 128: LD_ADDR_EXP 34
 132: PUSH
 133: LD_INT 60
 135: PUSH
 136: LD_INT 120
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 45
 145: PUSH
 146: LD_INT 105
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PUSH
 153: LD_INT 30
 155: PUSH
 156: LD_INT 90
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: LIST
 167: PUSH
 168: LD_OWVAR 67
 172: ARRAY
 173: ST_TO_ADDR
// attack_offset := [ Rand ( 1 1$0 , 1 1$30 ) , Rand ( 0 0$30 , 1 1$0 ) , Rand ( 0 0$0 , 0 0$30 ) ] [ difficulty ] ;
 174: LD_ADDR_EXP 48
 178: PUSH
 179: LD_INT 2100
 181: PPUSH
 182: LD_INT 3150
 184: PPUSH
 185: CALL_OW 12
 189: PUSH
 190: LD_INT 1050
 192: PPUSH
 193: LD_INT 2100
 195: PPUSH
 196: CALL_OW 12
 200: PUSH
 201: LD_INT 0
 203: PPUSH
 204: LD_INT 1050
 206: PPUSH
 207: CALL_OW 12
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: LIST
 216: PUSH
 217: LD_OWVAR 67
 221: ARRAY
 222: ST_TO_ADDR
// attack_count := [ 3 , 5 , 7 ] [ difficulty ] ;
 223: LD_ADDR_EXP 49
 227: PUSH
 228: LD_INT 3
 230: PUSH
 231: LD_INT 5
 233: PUSH
 234: LD_INT 7
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_OWVAR 67
 246: ARRAY
 247: ST_TO_ADDR
// Gaydar_wait := [ 1 1$30 , 1 1$10 , 0 0$45 ] [ difficulty ] ;
 248: LD_ADDR_EXP 3
 252: PUSH
 253: LD_INT 3150
 255: PUSH
 256: LD_INT 2450
 258: PUSH
 259: LD_INT 1575
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: PUSH
 267: LD_OWVAR 67
 271: ARRAY
 272: ST_TO_ADDR
// waypointsEND := [ [ [ 103 , 105 ] , [ 76 , 36 ] , [ 111 , 105 ] , [ 79 , 94 ] , [ 118 , 104 ] , [ 71 , 85 ] , [ 122 , 98 ] , [ 62 , 75 ] , [ 99 , 48 ] , [ 54 , 52 ] , [ 107 , 55 ] , [ 59 , 38 ] ] , [ [ 91 , 102 ] , [ 103 , 105 ] , [ 111 , 105 ] , [ 79 , 94 ] , [ 118 , 104 ] , [ 71 , 85 ] , [ 122 , 98 ] , [ 62 , 75 ] , [ 120 , 76 ] , [ 54 , 52 ] , [ 107 , 55 ] , [ 59 , 38 ] , [ 99 , 48 ] , [ 66 , 35 ] , [ 88 , 42 ] , [ 76 , 36 ] ] , [ [ 91 , 102 ] , [ 103 , 105 ] , [ 111 , 105 ] , [ 79 , 94 ] , [ 118 , 104 ] , [ 71 , 85 ] , [ 122 , 98 ] , [ 62 , 75 ] , [ 122 , 89 ] , [ 56 , 62 ] , [ 120 , 76 ] , [ 54 , 52 ] , [ 113 , 62 ] , [ 55 , 44 ] , [ 107 , 55 ] , [ 59 , 38 ] , [ 99 , 48 ] , [ 66 , 35 ] , [ 88 , 42 ] , [ 76 , 36 ] ] ] [ difficulty ] ;
 273: LD_ADDR_EXP 63
 277: PUSH
 278: LD_INT 103
 280: PUSH
 281: LD_INT 105
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 76
 290: PUSH
 291: LD_INT 36
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: LD_INT 111
 300: PUSH
 301: LD_INT 105
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 79
 310: PUSH
 311: LD_INT 94
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 118
 320: PUSH
 321: LD_INT 104
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 71
 330: PUSH
 331: LD_INT 85
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 122
 340: PUSH
 341: LD_INT 98
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 62
 350: PUSH
 351: LD_INT 75
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: LD_INT 99
 360: PUSH
 361: LD_INT 48
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: LD_INT 54
 370: PUSH
 371: LD_INT 52
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 107
 380: PUSH
 381: LD_INT 55
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 59
 390: PUSH
 391: LD_INT 38
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 91
 414: PUSH
 415: LD_INT 102
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: LD_INT 103
 424: PUSH
 425: LD_INT 105
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PUSH
 432: LD_INT 111
 434: PUSH
 435: LD_INT 105
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 79
 444: PUSH
 445: LD_INT 94
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PUSH
 452: LD_INT 118
 454: PUSH
 455: LD_INT 104
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 71
 464: PUSH
 465: LD_INT 85
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: LD_INT 122
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 62
 484: PUSH
 485: LD_INT 75
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 120
 494: PUSH
 495: LD_INT 76
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 54
 504: PUSH
 505: LD_INT 52
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 107
 514: PUSH
 515: LD_INT 55
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 59
 524: PUSH
 525: LD_INT 38
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 99
 534: PUSH
 535: LD_INT 48
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 66
 544: PUSH
 545: LD_INT 35
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 88
 554: PUSH
 555: LD_INT 42
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 76
 564: PUSH
 565: LD_INT 36
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 91
 592: PUSH
 593: LD_INT 102
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 103
 602: PUSH
 603: LD_INT 105
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 111
 612: PUSH
 613: LD_INT 105
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 79
 622: PUSH
 623: LD_INT 94
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 118
 632: PUSH
 633: LD_INT 104
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 71
 642: PUSH
 643: LD_INT 85
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 122
 652: PUSH
 653: LD_INT 98
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 62
 662: PUSH
 663: LD_INT 75
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 122
 672: PUSH
 673: LD_INT 89
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 56
 682: PUSH
 683: LD_INT 62
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PUSH
 690: LD_INT 120
 692: PUSH
 693: LD_INT 76
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: PUSH
 700: LD_INT 54
 702: PUSH
 703: LD_INT 52
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 113
 712: PUSH
 713: LD_INT 62
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 55
 722: PUSH
 723: LD_INT 44
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 107
 732: PUSH
 733: LD_INT 55
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 59
 742: PUSH
 743: LD_INT 38
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 99
 752: PUSH
 753: LD_INT 48
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 66
 762: PUSH
 763: LD_INT 35
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: LD_INT 88
 772: PUSH
 773: LD_INT 42
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: LD_INT 76
 782: PUSH
 783: LD_INT 36
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_OWVAR 67
 821: ARRAY
 822: ST_TO_ADDR
// end ;
 823: LD_VAR 0 1
 827: RET
// function read_parameters ; var i ; begin
 828: LD_INT 0
 830: PPUSH
 831: PPUSH
// you := 3 ;
 832: LD_ADDR_EXP 4
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// ally := 6 ;
 840: LD_ADDR_EXP 5
 844: PUSH
 845: LD_INT 6
 847: ST_TO_ADDR
// arab := 2 ;
 848: LD_ADDR_EXP 6
 852: PUSH
 853: LD_INT 2
 855: ST_TO_ADDR
// ChangeSideFog ( you , ally ) ;
 856: LD_EXP 4
 860: PPUSH
 861: LD_EXP 5
 865: PPUSH
 866: CALL_OW 343
// SetAttitude ( ally , you , att_friend , true ) ;
 870: LD_EXP 5
 874: PPUSH
 875: LD_EXP 4
 879: PPUSH
 880: LD_INT 1
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: CALL_OW 80
// SetAttitude ( ally , arab , att_enemy , true ) ;
 890: LD_EXP 5
 894: PPUSH
 895: LD_EXP 6
 899: PPUSH
 900: LD_INT 2
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: CALL_OW 80
// SetAttitude ( you , arab , att_enemy , true ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_EXP 6
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: CALL_OW 80
// trucks_diverted_count := 0 ;
 930: LD_ADDR_EXP 36
 934: PUSH
 935: LD_INT 0
 937: ST_TO_ADDR
// trucks_diverted_list := [ ] ;
 938: LD_ADDR_EXP 37
 942: PUSH
 943: EMPTY
 944: ST_TO_ADDR
// Disabled4 := false ;
 945: LD_ADDR_EXP 66
 949: PUSH
 950: LD_INT 0
 952: ST_TO_ADDR
// Disabled8 := false ;
 953: LD_ADDR_EXP 67
 957: PUSH
 958: LD_INT 0
 960: ST_TO_ADDR
// Disabled9 := false ;
 961: LD_ADDR_EXP 68
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// sm_pocet1_2 := 0 ;
 969: LD_ADDR_EXP 64
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// sm_pocet3 := 0 ;
 977: LD_ADDR_EXP 65
 981: PUSH
 982: LD_INT 0
 984: ST_TO_ADDR
// pocet := 0 ;
 985: LD_ADDR_EXP 46
 989: PUSH
 990: LD_INT 0
 992: ST_TO_ADDR
// konec := false ;
 993: LD_ADDR_EXP 43
 997: PUSH
 998: LD_INT 0
1000: ST_TO_ADDR
// BelkovFreed := LoadVariable ( belkov_saved , false ) ;
1001: LD_ADDR_EXP 45
1005: PUSH
1006: LD_STRING belkov_saved
1008: PPUSH
1009: LD_INT 0
1011: PPUSH
1012: CALL_OW 30
1016: ST_TO_ADDR
// case BelkovFreed of 0 :
1017: LD_EXP 45
1021: PUSH
1022: LD_INT 0
1024: DOUBLE
1025: EQUAL
1026: IFTRUE 1030
1028: GO 1041
1030: POP
// BelkovFreed := true ; 1 :
1031: LD_ADDR_EXP 45
1035: PUSH
1036: LD_INT 1
1038: ST_TO_ADDR
1039: GO 1061
1041: LD_INT 1
1043: DOUBLE
1044: EQUAL
1045: IFTRUE 1049
1047: GO 1060
1049: POP
// BelkovFreed := false ; end ;
1050: LD_ADDR_EXP 45
1054: PUSH
1055: LD_INT 0
1057: ST_TO_ADDR
1058: GO 1061
1060: POP
// RecklessAttack := LoadVariable ( stav_utoku , true ) ;
1061: LD_ADDR_EXP 44
1065: PUSH
1066: LD_STRING stav_utoku
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 30
1076: ST_TO_ADDR
// case RecklessAttack of 1 :
1077: LD_EXP 44
1081: PUSH
1082: LD_INT 1
1084: DOUBLE
1085: EQUAL
1086: IFTRUE 1090
1088: GO 1101
1090: POP
// RecklessAttack := false ; 2 :
1091: LD_ADDR_EXP 44
1095: PUSH
1096: LD_INT 0
1098: ST_TO_ADDR
1099: GO 1140
1101: LD_INT 2
1103: DOUBLE
1104: EQUAL
1105: IFTRUE 1109
1107: GO 1120
1109: POP
// RecklessAttack := false ; 3 :
1110: LD_ADDR_EXP 44
1114: PUSH
1115: LD_INT 0
1117: ST_TO_ADDR
1118: GO 1140
1120: LD_INT 3
1122: DOUBLE
1123: EQUAL
1124: IFTRUE 1128
1126: GO 1139
1128: POP
// RecklessAttack := true ; end ;
1129: LD_ADDR_EXP 44
1133: PUSH
1134: LD_INT 1
1136: ST_TO_ADDR
1137: GO 1140
1139: POP
// lab_upgraded := false ;
1140: LD_ADDR_EXP 53
1144: PUSH
1145: LD_INT 0
1147: ST_TO_ADDR
// workshop_upgraded := false ;
1148: LD_ADDR_EXP 54
1152: PUSH
1153: LD_INT 0
1155: ST_TO_ADDR
// depot_build := false ;
1156: LD_ADDR_EXP 55
1160: PUSH
1161: LD_INT 0
1163: ST_TO_ADDR
// player_building_captured := false ;
1164: LD_ADDR_EXP 61
1168: PUSH
1169: LD_INT 0
1171: ST_TO_ADDR
// pocet_budov := 0 ;
1172: LD_ADDR_EXP 62
1176: PUSH
1177: LD_INT 0
1179: ST_TO_ADDR
// Burlak_saved := false ;
1180: LD_ADDR_EXP 1
1184: PUSH
1185: LD_INT 0
1187: ST_TO_ADDR
// Gaydar_saved := false ;
1188: LD_ADDR_EXP 2
1192: PUSH
1193: LD_INT 0
1195: ST_TO_ADDR
// end ;
1196: LD_VAR 0 1
1200: RET
// function nacti_osobu ( ident ) ; begin
1201: LD_INT 0
1203: PPUSH
// if TestCharacters ( ident ) then
1204: LD_VAR 0 1
1208: PPUSH
1209: CALL_OW 28
1213: IFFALSE 1264
// if CheckCharacterSet ( ident ) = 1 then
1215: LD_VAR 0 1
1219: PPUSH
1220: CALL_OW 29
1224: PUSH
1225: LD_INT 1
1227: EQUAL
1228: IFFALSE 1247
// result := CreateCharacter ( ident ) else
1230: LD_ADDR_VAR 0 2
1234: PUSH
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 34
1244: ST_TO_ADDR
1245: GO 1262
// result := CreateCharacterSet ( ident ) else
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: LD_VAR 0 1
1256: PPUSH
1257: CALL_OW 31
1261: ST_TO_ADDR
1262: GO 1272
// result := 0 ;
1264: LD_ADDR_VAR 0 2
1268: PUSH
1269: LD_INT 0
1271: ST_TO_ADDR
// end ;
1272: LD_VAR 0 2
1276: RET
// function create_people ; var def , i , x , y , fff ; begin
1277: LD_INT 0
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
// other := [ ] ;
1285: LD_ADDR_EXP 12
1289: PUSH
1290: EMPTY
1291: ST_TO_ADDR
// uc_side := arab ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_EXP 6
1301: ST_TO_ADDR
// uc_nation := nation_arabian ;
1302: LD_ADDR_OWVAR 21
1306: PUSH
1307: LD_INT 2
1309: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
1310: LD_ADDR_EXP 28
1314: PUSH
1315: LD_STRING Heike
1317: PPUSH
1318: CALL_OW 25
1322: ST_TO_ADDR
// uc_side := ally ;
1323: LD_ADDR_OWVAR 20
1327: PUSH
1328: LD_EXP 5
1332: ST_TO_ADDR
// uc_nation := nation_russian ;
1333: LD_ADDR_OWVAR 21
1337: PUSH
1338: LD_INT 3
1340: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
1341: LD_ADDR_EXP 27
1345: PUSH
1346: LD_STRING Gaydar
1348: PPUSH
1349: CALL_OW 25
1353: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
1354: LD_ADDR_EXP 19
1358: PUSH
1359: LD_STRING Kuzmov
1361: PPUSH
1362: CALL_OW 25
1366: ST_TO_ADDR
// uc_side := you ;
1367: LD_ADDR_OWVAR 20
1371: PUSH
1372: LD_EXP 4
1376: ST_TO_ADDR
// uc_nation := nation_russian ;
1377: LD_ADDR_OWVAR 21
1381: PUSH
1382: LD_INT 3
1384: ST_TO_ADDR
// Burlak := nacti_osobu ( Burlak ) ;
1385: LD_ADDR_EXP 14
1389: PUSH
1390: LD_STRING Burlak
1392: PPUSH
1393: CALL 1201 0 1
1397: ST_TO_ADDR
// Gnyevko := nacti_osobu ( Gnyevko ) ;
1398: LD_ADDR_EXP 15
1402: PUSH
1403: LD_STRING Gnyevko
1405: PPUSH
1406: CALL 1201 0 1
1410: ST_TO_ADDR
// Belkov := nacti_osobu ( Belkov ) ;
1411: LD_ADDR_EXP 17
1415: PUSH
1416: LD_STRING Belkov
1418: PPUSH
1419: CALL 1201 0 1
1423: ST_TO_ADDR
// Scholtze := nacti_osobu ( Scholtze ) ;
1424: LD_ADDR_EXP 18
1428: PUSH
1429: LD_STRING Scholtze
1431: PPUSH
1432: CALL 1201 0 1
1436: ST_TO_ADDR
// Kovalyuk := nacti_osobu ( Kovalyuk ) ;
1437: LD_ADDR_EXP 20
1441: PUSH
1442: LD_STRING Kovalyuk
1444: PPUSH
1445: CALL 1201 0 1
1449: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
1450: LD_ADDR_EXP 26
1454: PUSH
1455: LD_STRING Popov
1457: PPUSH
1458: CALL_OW 25
1462: ST_TO_ADDR
// Platonov := NewCharacter ( Platonov ) ;
1463: LD_ADDR_EXP 16
1467: PUSH
1468: LD_STRING Platonov
1470: PPUSH
1471: CALL_OW 25
1475: ST_TO_ADDR
// other := nacti_osobu ( survivors1 ) ;
1476: LD_ADDR_EXP 12
1480: PUSH
1481: LD_STRING survivors1
1483: PPUSH
1484: CALL 1201 0 1
1488: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 2 ) ;
1489: LD_INT 1
1491: PPUSH
1492: LD_INT 1
1494: PPUSH
1495: LD_INT 2
1497: PPUSH
1498: CALL_OW 380
// hc_name :=  ;
1502: LD_ADDR_OWVAR 26
1506: PUSH
1507: LD_STRING 
1509: ST_TO_ADDR
// Soldier1 := CreateHuman ;
1510: LD_ADDR_EXP 22
1514: PUSH
1515: CALL_OW 44
1519: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 3 ) ;
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 1
1525: PPUSH
1526: LD_INT 3
1528: PPUSH
1529: CALL_OW 380
// hc_name :=  ;
1533: LD_ADDR_OWVAR 26
1537: PUSH
1538: LD_STRING 
1540: ST_TO_ADDR
// SoldierX := CreateHuman ;
1541: LD_ADDR_EXP 21
1545: PUSH
1546: CALL_OW 44
1550: ST_TO_ADDR
// PrepareHuman ( sex_male , class_engineer , 3 ) ;
1551: LD_INT 1
1553: PPUSH
1554: LD_INT 2
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: CALL_OW 380
// hc_name :=  ;
1564: LD_ADDR_OWVAR 26
1568: PUSH
1569: LD_STRING 
1571: ST_TO_ADDR
// Scientist1 := CreateHuman ;
1572: LD_ADDR_EXP 23
1576: PUSH
1577: CALL_OW 44
1581: ST_TO_ADDR
// PrepareHuman ( sex_male , class_engineer , 2 ) ;
1582: LD_INT 1
1584: PPUSH
1585: LD_INT 2
1587: PPUSH
1588: LD_INT 2
1590: PPUSH
1591: CALL_OW 380
// hc_name :=  ;
1595: LD_ADDR_OWVAR 26
1599: PUSH
1600: LD_STRING 
1602: ST_TO_ADDR
// Engineer1 := CreateHuman ;
1603: LD_ADDR_EXP 24
1607: PUSH
1608: CALL_OW 44
1612: ST_TO_ADDR
// PrepareHuman ( sex_male , class_mechanic , 3 ) ;
1613: LD_INT 1
1615: PPUSH
1616: LD_INT 3
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: CALL_OW 380
// hc_name :=  ;
1626: LD_ADDR_OWVAR 26
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// Mechanic1 := CreateHuman ;
1634: LD_ADDR_EXP 25
1638: PUSH
1639: CALL_OW 44
1643: ST_TO_ADDR
// fff := ( [ Burlak , Gnyevko , Belkov , Scholtze , Kuzmov , Kovalyuk , Soldier1 , Scientist1 , Engineer1 , Mechanic1 ] union other ) diff [ 0 ] ;
1644: LD_ADDR_VAR 0 6
1648: PUSH
1649: LD_EXP 14
1653: PUSH
1654: LD_EXP 15
1658: PUSH
1659: LD_EXP 17
1663: PUSH
1664: LD_EXP 18
1668: PUSH
1669: LD_EXP 19
1673: PUSH
1674: LD_EXP 20
1678: PUSH
1679: LD_EXP 22
1683: PUSH
1684: LD_EXP 23
1688: PUSH
1689: LD_EXP 24
1693: PUSH
1694: LD_EXP 25
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_EXP 12
1715: UNION
1716: PUSH
1717: LD_INT 0
1719: PUSH
1720: EMPTY
1721: LIST
1722: DIFF
1723: ST_TO_ADDR
// if fff < 14 then
1724: LD_VAR 0 6
1728: PUSH
1729: LD_INT 14
1731: LESS
1732: IFFALSE 1868
// for i := 1 to 14 - fff do
1734: LD_ADDR_VAR 0 3
1738: PUSH
1739: DOUBLE
1740: LD_INT 1
1742: DEC
1743: ST_TO_ADDR
1744: LD_INT 14
1746: PUSH
1747: LD_VAR 0 6
1751: MINUS
1752: PUSH
1753: FOR_TO
1754: IFFALSE 1866
// begin case Rand ( 1 , 3 ) of 1 :
1756: LD_INT 1
1758: PPUSH
1759: LD_INT 3
1761: PPUSH
1762: CALL_OW 12
1766: PUSH
1767: LD_INT 1
1769: DOUBLE
1770: EQUAL
1771: IFTRUE 1775
1773: GO 1791
1775: POP
// PrepareHuman ( 0 , class_mechanic , 2 ) ; 2 :
1776: LD_INT 0
1778: PPUSH
1779: LD_INT 3
1781: PPUSH
1782: LD_INT 2
1784: PPUSH
1785: CALL_OW 380
1789: GO 1840
1791: LD_INT 2
1793: DOUBLE
1794: EQUAL
1795: IFTRUE 1799
1797: GO 1815
1799: POP
// PrepareHuman ( 0 , class_engineer , 2 ) ; 3 :
1800: LD_INT 0
1802: PPUSH
1803: LD_INT 2
1805: PPUSH
1806: LD_INT 2
1808: PPUSH
1809: CALL_OW 380
1813: GO 1840
1815: LD_INT 3
1817: DOUBLE
1818: EQUAL
1819: IFTRUE 1823
1821: GO 1839
1823: POP
// PrepareHuman ( 0 , class_soldier , 2 ) ; end ;
1824: LD_INT 0
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_INT 2
1832: PPUSH
1833: CALL_OW 380
1837: GO 1840
1839: POP
// hc_name :=  ;
1840: LD_ADDR_OWVAR 26
1844: PUSH
1845: LD_STRING 
1847: ST_TO_ADDR
// new := new ^ CreateHuman ;
1848: LD_ADDR_EXP 29
1852: PUSH
1853: LD_EXP 29
1857: PUSH
1858: CALL_OW 44
1862: ADD
1863: ST_TO_ADDR
// end ;
1864: GO 1753
1866: POP
1867: POP
// for un in ( ( [ Popov , Burlak , Gnyevko , Belkov , Scholtze , Kovalyuk , Soldier1 , Scientist1 , Engineer1 , Mechanic1 ] union other ) union new ) diff [ 0 ] do
1868: LD_ADDR_LOC 3
1872: PUSH
1873: LD_EXP 26
1877: PUSH
1878: LD_EXP 14
1882: PUSH
1883: LD_EXP 15
1887: PUSH
1888: LD_EXP 17
1892: PUSH
1893: LD_EXP 18
1897: PUSH
1898: LD_EXP 20
1902: PUSH
1903: LD_EXP 22
1907: PUSH
1908: LD_EXP 23
1912: PUSH
1913: LD_EXP 24
1917: PUSH
1918: LD_EXP 25
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_EXP 12
1939: UNION
1940: PUSH
1941: LD_EXP 29
1945: UNION
1946: PUSH
1947: LD_INT 0
1949: PUSH
1950: EMPTY
1951: LIST
1952: DIFF
1953: PUSH
1954: FOR_IN
1955: IFFALSE 1980
// PlaceUnitXYR ( un , 102 , 3 , 7 , false ) ;
1957: LD_LOC 3
1961: PPUSH
1962: LD_INT 102
1964: PPUSH
1965: LD_INT 3
1967: PPUSH
1968: LD_INT 7
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 50
1978: GO 1954
1980: POP
1981: POP
// PlaceUnitXYR ( Kuzmov , 92 , 75 , 10 , false ) ;
1982: LD_EXP 19
1986: PPUSH
1987: LD_INT 92
1989: PPUSH
1990: LD_INT 75
1992: PPUSH
1993: LD_INT 10
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 50
// end ;
2003: LD_VAR 0 1
2007: RET
// function make_alliance ; var i , pom ; begin
2008: LD_INT 0
2010: PPUSH
2011: PPUSH
2012: PPUSH
// whole_units := ( ( [ Popov , Burlak , Gnyevko , Belkov , Scholtze , Kovalyuk , Soldier1 , Scientist1 , Engineer1 , Mechanic1 ] union other ) union new ) diff [ 0 ] ;
2013: LD_ADDR_LOC 4
2017: PUSH
2018: LD_EXP 26
2022: PUSH
2023: LD_EXP 14
2027: PUSH
2028: LD_EXP 15
2032: PUSH
2033: LD_EXP 17
2037: PUSH
2038: LD_EXP 18
2042: PUSH
2043: LD_EXP 20
2047: PUSH
2048: LD_EXP 22
2052: PUSH
2053: LD_EXP 23
2057: PUSH
2058: LD_EXP 24
2062: PUSH
2063: LD_EXP 25
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 12
2084: UNION
2085: PUSH
2086: LD_EXP 29
2090: UNION
2091: PUSH
2092: LD_INT 0
2094: PUSH
2095: EMPTY
2096: LIST
2097: DIFF
2098: ST_TO_ADDR
// alliance := whole_units diff player_units ;
2099: LD_ADDR_EXP 13
2103: PUSH
2104: LD_LOC 4
2108: PUSH
2109: LD_EXP 30
2113: DIFF
2114: ST_TO_ADDR
// SetSide ( alliance , ally ) ;
2115: LD_EXP 13
2119: PPUSH
2120: LD_EXP 5
2124: PPUSH
2125: CALL_OW 235
// end ;
2129: LD_VAR 0 1
2133: RET
// function alliance_go_away ; var points , waypoints ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
2138: PPUSH
// waypoints := [ [ 98 , 6 ] , [ 94 , 9 ] , [ 90 , 14 ] , [ 87 , 17 ] , [ 81 , 18 ] , [ 80 , 23 ] , [ 86 , 34 ] , [ 96 , 45 ] , [ 108 , 56 ] , [ 113 , 62 ] , [ 119 , 73 ] , [ 121 , 79 ] , [ 122 , 89 ] , [ 123 , 98 ] , [ 122 , 108 ] , [ 115 , 113 ] , [ 91 , 114 ] , [ 73 , 113 ] , [ 71 , 115 ] , [ 71 , 129 ] , [ 73 , 138 ] ] ;
2139: LD_ADDR_VAR 0 3
2143: PUSH
2144: LD_INT 98
2146: PUSH
2147: LD_INT 6
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 94
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 90
2166: PUSH
2167: LD_INT 14
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 87
2176: PUSH
2177: LD_INT 17
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 81
2186: PUSH
2187: LD_INT 18
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 80
2196: PUSH
2197: LD_INT 23
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 86
2206: PUSH
2207: LD_INT 34
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 96
2216: PUSH
2217: LD_INT 45
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 108
2226: PUSH
2227: LD_INT 56
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: LD_INT 113
2236: PUSH
2237: LD_INT 62
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 119
2246: PUSH
2247: LD_INT 73
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 121
2256: PUSH
2257: LD_INT 79
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: LD_INT 122
2266: PUSH
2267: LD_INT 89
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PUSH
2274: LD_INT 123
2276: PUSH
2277: LD_INT 98
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 122
2286: PUSH
2287: LD_INT 108
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 115
2296: PUSH
2297: LD_INT 113
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 91
2306: PUSH
2307: LD_INT 114
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: LD_INT 73
2316: PUSH
2317: LD_INT 113
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 71
2326: PUSH
2327: LD_INT 115
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 71
2336: PUSH
2337: LD_INT 129
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 73
2346: PUSH
2347: LD_INT 138
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: ST_TO_ADDR
// for points in waypoints do
2377: LD_ADDR_VAR 0 2
2381: PUSH
2382: LD_VAR 0 3
2386: PUSH
2387: FOR_IN
2388: IFFALSE 2419
// AddComMoveXY ( alliance , points [ 1 ] , points [ 2 ] ) ;
2390: LD_EXP 13
2394: PPUSH
2395: LD_VAR 0 2
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_VAR 0 2
2408: PUSH
2409: LD_INT 2
2411: ARRAY
2412: PPUSH
2413: CALL_OW 171
2417: GO 2387
2419: POP
2420: POP
// end ;
2421: LD_VAR 0 1
2425: RET
// function select_people ; var units ; begin
2426: LD_INT 0
2428: PPUSH
2429: PPUSH
// units := [ sel_hired , sel_not_changeable , sel_change_class , Burlak ] ^ [ sel_not_hired , sel_not_changeable , sel_dont_change_class , Popov ] ^ [ sel_not_hired , sel_changeable , sel_change_class , Scholtze , Gnyevko , Belkov , Kovalyuk , Soldier1 , Scientist1 , Engineer1 , Mechanic1 ] ^ new ^ other ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_INT -1
2437: PUSH
2438: LD_INT -4
2440: PUSH
2441: LD_INT -5
2443: PUSH
2444: LD_EXP 14
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT -2
2457: PUSH
2458: LD_INT -4
2460: PUSH
2461: LD_INT -6
2463: PUSH
2464: LD_EXP 26
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: ADD
2475: PUSH
2476: LD_INT -2
2478: PUSH
2479: LD_INT -3
2481: PUSH
2482: LD_INT -5
2484: PUSH
2485: LD_EXP 18
2489: PUSH
2490: LD_EXP 15
2494: PUSH
2495: LD_EXP 17
2499: PUSH
2500: LD_EXP 20
2504: PUSH
2505: LD_EXP 22
2509: PUSH
2510: LD_EXP 23
2514: PUSH
2515: LD_EXP 24
2519: PUSH
2520: LD_EXP 25
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: ADD
2538: PUSH
2539: LD_EXP 29
2543: ADD
2544: PUSH
2545: LD_EXP 12
2549: ADD
2550: ST_TO_ADDR
// player_units := [ Burlak , Kuzmov ] union CharacterSelection ( Select 8 characters to go with you , 8 , 8 , units , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
2551: LD_ADDR_EXP 30
2555: PUSH
2556: LD_EXP 14
2560: PUSH
2561: LD_EXP 19
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: LD_STRING Select 8 characters to go with you
2572: PPUSH
2573: LD_INT 8
2575: PPUSH
2576: LD_INT 8
2578: PPUSH
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 1
2586: PUSH
2587: LD_INT 3
2589: PUSH
2590: LD_INT 2
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 4
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: PPUSH
2609: CALL_OW 42
2613: UNION
2614: ST_TO_ADDR
// end ;
2615: LD_VAR 0 1
2619: RET
// export function create_gaydar ; begin
2620: LD_INT 0
2622: PPUSH
// PlaceUnitXYR ( Gaydar , 17 , 1 , 3 , false ) ;
2623: LD_EXP 27
2627: PPUSH
2628: LD_INT 17
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: CALL_OW 50
// ComMoveXY ( Gaydar , 23 , 10 ) ;
2644: LD_EXP 27
2648: PPUSH
2649: LD_INT 23
2651: PPUSH
2652: LD_INT 10
2654: PPUSH
2655: CALL_OW 111
// enable ( 15 ) ;
2659: LD_INT 15
2661: ENABLE_MARKED
// Dialogue10 ;
2662: CALL 7870 0 0
// repeat Wait ( 0 0$1 ) ;
2666: LD_INT 35
2668: PPUSH
2669: CALL_OW 67
// if GetSide ( Gaydar ) = you then
2673: LD_EXP 27
2677: PPUSH
2678: CALL_OW 255
2682: PUSH
2683: LD_EXP 4
2687: EQUAL
2688: IFFALSE 2692
// exit ;
2690: GO 2848
// until Attacks ( Gaydar ) = 0 ;
2692: LD_EXP 27
2696: PPUSH
2697: CALL_OW 320
2701: PUSH
2702: LD_INT 0
2704: EQUAL
2705: IFFALSE 2666
// ComMoveXY ( Gaydar , 27 , 16 ) ;
2707: LD_EXP 27
2711: PPUSH
2712: LD_INT 27
2714: PPUSH
2715: LD_INT 16
2717: PPUSH
2718: CALL_OW 111
// Wait ( 0 0$30 ) ;
2722: LD_INT 1050
2724: PPUSH
2725: CALL_OW 67
// repeat Wait ( 0 0$1 ) ;
2729: LD_INT 35
2731: PPUSH
2732: CALL_OW 67
// if GetSide ( Gaydar ) = you then
2736: LD_EXP 27
2740: PPUSH
2741: CALL_OW 255
2745: PUSH
2746: LD_EXP 4
2750: EQUAL
2751: IFFALSE 2755
// exit ;
2753: GO 2848
// until Attacks ( Gaydar ) = 0 ;
2755: LD_EXP 27
2759: PPUSH
2760: CALL_OW 320
2764: PUSH
2765: LD_INT 0
2767: EQUAL
2768: IFFALSE 2729
// ComMoveXY ( Gaydar , 33 , 30 ) ;
2770: LD_EXP 27
2774: PPUSH
2775: LD_INT 33
2777: PPUSH
2778: LD_INT 30
2780: PPUSH
2781: CALL_OW 111
// Wait ( 0 0$30 ) ;
2785: LD_INT 1050
2787: PPUSH
2788: CALL_OW 67
// repeat Wait ( 0 0$1 ) ;
2792: LD_INT 35
2794: PPUSH
2795: CALL_OW 67
// if GetSide ( Gaydar ) = you then
2799: LD_EXP 27
2803: PPUSH
2804: CALL_OW 255
2808: PUSH
2809: LD_EXP 4
2813: EQUAL
2814: IFFALSE 2818
// exit ;
2816: GO 2848
// until Attacks ( Gaydar ) = 0 ;
2818: LD_EXP 27
2822: PPUSH
2823: CALL_OW 320
2827: PUSH
2828: LD_INT 0
2830: EQUAL
2831: IFFALSE 2792
// ComMoveXY ( Gaydar , 27 , 47 ) ;
2833: LD_EXP 27
2837: PPUSH
2838: LD_INT 27
2840: PPUSH
2841: LD_INT 47
2843: PPUSH
2844: CALL_OW 111
// end ;
2848: LD_VAR 0 1
2852: RET
// starting begin FogOff ( false ) ;
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 344
// InitBc ;
2860: CALL_OW 21
// InitHc ;
2864: CALL_OW 19
// InitUc ;
2868: CALL_OW 18
// InitVc ;
2872: CALL_OW 20
// IngameOn ;
2876: CALL_OW 8
// disable ( 2 ) ;
2880: LD_INT 2
2882: DISABLE_MARKED
// disable ( 3 ) ;
2883: LD_INT 3
2885: DISABLE_MARKED
// disable ( 4 ) ;
2886: LD_INT 4
2888: DISABLE_MARKED
// disable ( 5 ) ;
2889: LD_INT 5
2891: DISABLE_MARKED
// disable ( 6 ) ;
2892: LD_INT 6
2894: DISABLE_MARKED
// disable ( 7 ) ;
2895: LD_INT 7
2897: DISABLE_MARKED
// disable ( 8 ) ;
2898: LD_INT 8
2900: DISABLE_MARKED
// disable ( 9 ) ;
2901: LD_INT 9
2903: DISABLE_MARKED
// disable ( 10 ) ;
2904: LD_INT 10
2906: DISABLE_MARKED
// disable ( 11 ) ;
2907: LD_INT 11
2909: DISABLE_MARKED
// disable ( 12 ) ;
2910: LD_INT 12
2912: DISABLE_MARKED
// disable ( 13 ) ;
2913: LD_INT 13
2915: DISABLE_MARKED
// disable ( 14 ) ;
2916: LD_INT 14
2918: DISABLE_MARKED
// disable ( 15 ) ;
2919: LD_INT 15
2921: DISABLE_MARKED
// disable ( 16 ) ;
2922: LD_INT 16
2924: DISABLE_MARKED
// disable ( 17 ) ;
2925: LD_INT 17
2927: DISABLE_MARKED
// disable ( 18 ) ;
2928: LD_INT 18
2930: DISABLE_MARKED
// disable ( 19 ) ;
2931: LD_INT 19
2933: DISABLE_MARKED
// Randomize ;
2934: CALL_OW 10
// RandomizeAll ;
2938: CALL_OW 11
// set_difficulty ;
2942: CALL 0 0 0
// read_parameters ;
2946: CALL 828 0 0
// prepare_convoy ;
2950: CALL 8171 0 0
// prepare_arabian_attack ;
2954: CALL 12049 0 0
// prepare_small_arabian_attack ;
2958: CALL 14449 0 0
// create_people ;
2962: CALL 1277 0 0
// CenterNowOnXY ( 102 , 3 ) ;
2966: LD_INT 102
2968: PPUSH
2969: LD_INT 3
2971: PPUSH
2972: CALL_OW 86
// Wait ( 0 0$2 ) ;
2976: LD_INT 70
2978: PPUSH
2979: CALL_OW 67
// Dialogue1 ;
2983: CALL 5458 0 0
// select_people ;
2987: CALL 2426 0 0
// ChangeMissionObjectives ( M1 ) ;
2991: LD_STRING M1
2993: PPUSH
2994: CALL_OW 337
// make_alliance ;
2998: CALL 2008 0 0
// SaveForQuickRestart ;
3002: CALL_OW 22
// IngameOff ;
3006: CALL_OW 9
// alliance_go_away ;
3010: CALL 2134 0 0
// end ;
3014: END
// export function konec_mise ; var pom , pom1 , i , all_people , drv , filter ; begin
3015: LD_INT 0
3017: PPUSH
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
3023: PPUSH
// Wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// gained_medals := [ ] ;
3031: LD_ADDR_OWVAR 61
3035: PUSH
3036: EMPTY
3037: ST_TO_ADDR
// missing_medals := [ ] ;
3038: LD_ADDR_OWVAR 62
3042: PUSH
3043: EMPTY
3044: ST_TO_ADDR
// saved_player_units := UnitFilter ( saved_player_units , [ f_not , [ f_or , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) ;
3045: LD_ADDR_EXP 31
3049: PUSH
3050: LD_EXP 31
3054: PPUSH
3055: LD_INT 3
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: LD_INT 25
3063: PUSH
3064: LD_INT 16
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: LD_INT 25
3073: PUSH
3074: LD_INT 15
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: LIST
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 72
3094: ST_TO_ADDR
// if ( 0 + saved_player_units ) >= 9 then
3095: LD_INT 0
3097: PUSH
3098: LD_EXP 31
3102: PLUS
3103: PUSH
3104: LD_INT 9
3106: GREATEREQUAL
3107: IFFALSE 3121
// AddMedal ( LittleLosses , 1 ) else
3109: LD_STRING LittleLosses
3111: PPUSH
3112: LD_INT 1
3114: PPUSH
3115: CALL_OW 101
3119: GO 3132
// AddMedal ( LittleLosses , - 1 ) ;
3121: LD_STRING LittleLosses
3123: PPUSH
3124: LD_INT 1
3126: NEG
3127: PPUSH
3128: CALL_OW 101
// if ar_killed >= waypointsEND - 3 then
3132: LD_EXP 50
3136: PUSH
3137: LD_EXP 63
3141: PUSH
3142: LD_INT 3
3144: MINUS
3145: GREATEREQUAL
3146: IFFALSE 3160
// AddMedal ( EnemyLosses , 1 ) else
3148: LD_STRING EnemyLosses
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: CALL_OW 101
3158: GO 3171
// AddMedal ( EnemyLosses , - 1 ) ;
3160: LD_STRING EnemyLosses
3162: PPUSH
3163: LD_INT 1
3165: NEG
3166: PPUSH
3167: CALL_OW 101
// filter := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_oil_mine ] , [ f_btype , b_bunker ] ] ] ] ) ;
3171: LD_ADDR_VAR 0 7
3175: PUSH
3176: LD_INT 21
3178: PUSH
3179: LD_INT 3
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: LD_INT 3
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: LD_INT 30
3194: PUSH
3195: LD_INT 26
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 30
3204: PUSH
3205: LD_INT 29
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 30
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PPUSH
3236: CALL_OW 69
3240: ST_TO_ADDR
// if filter = 0 then
3241: LD_VAR 0 7
3245: PUSH
3246: LD_INT 0
3248: EQUAL
3249: IFFALSE 3263
// AddMedal ( Dismantle , 1 ) else
3251: LD_STRING Dismantle
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: CALL_OW 101
3261: GO 3274
// AddMedal ( Dismantle , - 1 ) ;
3263: LD_STRING Dismantle
3265: PPUSH
3266: LD_INT 1
3268: NEG
3269: PPUSH
3270: CALL_OW 101
// GiveMedals ( Main ) ;
3274: LD_STRING Main
3276: PPUSH
3277: CALL_OW 102
// RewardPeople ( saved_player_units ) ;
3281: LD_EXP 31
3285: PPUSH
3286: CALL_OW 43
// SaveCharacters ( Burlak , Burlak ) ;
3290: LD_EXP 14
3294: PPUSH
3295: LD_STRING Burlak
3297: PPUSH
3298: CALL_OW 38
// SaveCharacters ( Gnyevko , Gnyevko ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING Gnyevko
3309: PPUSH
3310: CALL_OW 38
// SaveCharacters ( Kovalyuk , Kovalyuk ) ;
3314: LD_EXP 20
3318: PPUSH
3319: LD_STRING Kovalyuk
3321: PPUSH
3322: CALL_OW 38
// SaveCharacters ( Belkov , Belkov ) ;
3326: LD_EXP 17
3330: PPUSH
3331: LD_STRING Belkov
3333: PPUSH
3334: CALL_OW 38
// SaveCharacters ( Scholtze , Scholtze ) ;
3338: LD_EXP 18
3342: PPUSH
3343: LD_STRING Scholtze
3345: PPUSH
3346: CALL_OW 38
// SaveCharacters ( Kuzmov , Kuzmov ) ;
3350: LD_EXP 19
3354: PPUSH
3355: LD_STRING Kuzmov
3357: PPUSH
3358: CALL_OW 38
// SaveCharacters ( Gaydar , Gaydar ) ;
3362: LD_EXP 27
3366: PPUSH
3367: LD_STRING Gaydar
3369: PPUSH
3370: CALL_OW 38
// SaveCharacters ( ( other union new ) diff [ Burlak , Belkov , Gnyevko , Platonov , Kovalyuk , Popov , Scholtze , Kuzmov , Gaydar ] , survivors1 ) ;
3374: LD_EXP 12
3378: PUSH
3379: LD_EXP 29
3383: UNION
3384: PUSH
3385: LD_EXP 14
3389: PUSH
3390: LD_EXP 17
3394: PUSH
3395: LD_EXP 15
3399: PUSH
3400: LD_EXP 16
3404: PUSH
3405: LD_EXP 20
3409: PUSH
3410: LD_EXP 26
3414: PUSH
3415: LD_EXP 18
3419: PUSH
3420: LD_EXP 19
3424: PUSH
3425: LD_EXP 27
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: DIFF
3441: PPUSH
3442: LD_STRING survivors1
3444: PPUSH
3445: CALL_OW 38
// YouWin ;
3449: CALL_OW 103
// exit ;
3453: GO 3455
// end ; end_of_file
3455: LD_VAR 0 1
3459: RET
// every 0 0$0.8 do var qqq , i , un , my_filter ;
3460: GO 3462
3462: DISABLE
3463: LD_INT 0
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
// begin if konec then
3469: LD_EXP 43
3473: IFFALSE 3561
// my_filter := FilterUnitsInArea ( ExitArea , [ [ f_or , [ f_side , you ] , [ f_side , ally ] ] , [ f_not , [ f_or , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ] ) else
3475: LD_ADDR_VAR 0 4
3479: PUSH
3480: LD_INT 1
3482: PPUSH
3483: LD_INT 2
3485: PUSH
3486: LD_INT 22
3488: PUSH
3489: LD_EXP 4
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: LD_EXP 5
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 3
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 25
3523: PUSH
3524: LD_INT 16
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 25
3533: PUSH
3534: LD_INT 15
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PPUSH
3554: CALL_OW 70
3558: ST_TO_ADDR
3559: GO 3586
// my_filter := FilterUnitsInArea ( ExitArea , [ f_side , ally ] ) ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 1
3568: PPUSH
3569: LD_INT 22
3571: PUSH
3572: LD_EXP 5
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PPUSH
3581: CALL_OW 70
3585: ST_TO_ADDR
// if my_filter + 0 > 0 then
3586: LD_VAR 0 4
3590: PUSH
3591: LD_INT 0
3593: PLUS
3594: PUSH
3595: LD_INT 0
3597: GREATER
3598: IFFALSE 3871
// for un in my_filter do
3600: LD_ADDR_VAR 0 3
3604: PUSH
3605: LD_VAR 0 4
3609: PUSH
3610: FOR_IN
3611: IFFALSE 3869
// begin if un = Platonov then
3613: LD_VAR 0 3
3617: PUSH
3618: LD_EXP 16
3622: EQUAL
3623: IFFALSE 3650
// begin my_filter := my_filter diff Platonov ;
3625: LD_ADDR_VAR 0 4
3629: PUSH
3630: LD_VAR 0 4
3634: PUSH
3635: LD_EXP 16
3639: DIFF
3640: ST_TO_ADDR
// RemoveUnit ( Platonov ) ;
3641: LD_EXP 16
3645: PPUSH
3646: CALL_OW 64
// end ; if un = Burlak or ( IsDrivenBy ( un ) = Burlak ) then
3650: LD_VAR 0 3
3654: PUSH
3655: LD_EXP 14
3659: EQUAL
3660: PUSH
3661: LD_VAR 0 3
3665: PPUSH
3666: CALL_OW 311
3670: PUSH
3671: LD_EXP 14
3675: EQUAL
3676: OR
3677: IFFALSE 3687
// begin Burlak_saved := true ;
3679: LD_ADDR_EXP 1
3683: PUSH
3684: LD_INT 1
3686: ST_TO_ADDR
// end ; if un = Gaydar or ( IsDrivenBy ( un ) = Gaydar ) then
3687: LD_VAR 0 3
3691: PUSH
3692: LD_EXP 27
3696: EQUAL
3697: PUSH
3698: LD_VAR 0 3
3702: PPUSH
3703: CALL_OW 311
3707: PUSH
3708: LD_EXP 27
3712: EQUAL
3713: OR
3714: IFFALSE 3731
// begin Gaydar_saved := true ;
3716: LD_ADDR_EXP 2
3720: PUSH
3721: LD_INT 1
3723: ST_TO_ADDR
// ChangeMissionObjectives ( MOutGaydar ) ;
3724: LD_STRING MOutGaydar
3726: PPUSH
3727: CALL_OW 337
// end ; if konec then
3731: LD_EXP 43
3735: IFFALSE 3867
// begin if GetType ( un ) = unit_vehicle and GetSide ( IsDrivenBy ( un ) ) = you and not GetNation ( IsDrivenBy ( un ) ) = nation_nature then
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL_OW 247
3746: PUSH
3747: LD_INT 2
3749: EQUAL
3750: PUSH
3751: LD_VAR 0 3
3755: PPUSH
3756: CALL_OW 311
3760: PPUSH
3761: CALL_OW 255
3765: PUSH
3766: LD_EXP 4
3770: EQUAL
3771: AND
3772: PUSH
3773: LD_VAR 0 3
3777: PPUSH
3778: CALL_OW 311
3782: PPUSH
3783: CALL_OW 248
3787: PUSH
3788: LD_INT 0
3790: EQUAL
3791: NOT
3792: AND
3793: IFFALSE 3818
// saved_player_units := saved_player_units union IsDrivenBy ( un ) else
3795: LD_ADDR_EXP 31
3799: PUSH
3800: LD_EXP 31
3804: PUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 311
3814: UNION
3815: ST_TO_ADDR
3816: GO 3867
// if GetSide ( un ) = you and not GetNation ( un ) = nation_nature then
3818: LD_VAR 0 3
3822: PPUSH
3823: CALL_OW 255
3827: PUSH
3828: LD_EXP 4
3832: EQUAL
3833: PUSH
3834: LD_VAR 0 3
3838: PPUSH
3839: CALL_OW 248
3843: PUSH
3844: LD_INT 0
3846: EQUAL
3847: NOT
3848: AND
3849: IFFALSE 3867
// saved_player_units := saved_player_units union un ;
3851: LD_ADDR_EXP 31
3855: PUSH
3856: LD_EXP 31
3860: PUSH
3861: LD_VAR 0 3
3865: UNION
3866: ST_TO_ADDR
// end ; end ;
3867: GO 3610
3869: POP
3870: POP
// for un in player_units do
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_EXP 30
3880: PUSH
3881: FOR_IN
3882: IFFALSE 3913
// if IsDead ( un ) then
3884: LD_VAR 0 3
3888: PPUSH
3889: CALL_OW 301
3893: IFFALSE 3911
// player_units := player_units diff un ;
3895: LD_ADDR_EXP 30
3899: PUSH
3900: LD_EXP 30
3904: PUSH
3905: LD_VAR 0 3
3909: DIFF
3910: ST_TO_ADDR
3911: GO 3881
3913: POP
3914: POP
// for un in my_filter do
3915: LD_ADDR_VAR 0 3
3919: PUSH
3920: LD_VAR 0 4
3924: PUSH
3925: FOR_IN
3926: IFFALSE 4016
// begin if GetType ( un ) = unit_vehicle then
3928: LD_VAR 0 3
3932: PPUSH
3933: CALL_OW 247
3937: PUSH
3938: LD_INT 2
3940: EQUAL
3941: IFFALSE 3989
// begin player_units := player_units diff ( IsDrivenBy ( un ) ) ;
3943: LD_ADDR_EXP 30
3947: PUSH
3948: LD_EXP 30
3952: PUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 311
3962: DIFF
3963: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( un ) ) ;
3964: LD_VAR 0 3
3968: PPUSH
3969: CALL_OW 311
3973: PPUSH
3974: CALL_OW 64
// RemoveUnit ( un ) ;
3978: LD_VAR 0 3
3982: PPUSH
3983: CALL_OW 64
// end else
3987: GO 4014
// begin player_units := player_units diff un ;
3989: LD_ADDR_EXP 30
3993: PUSH
3994: LD_EXP 30
3998: PUSH
3999: LD_VAR 0 3
4003: DIFF
4004: ST_TO_ADDR
// RemoveUnit ( un ) ;
4005: LD_VAR 0 3
4009: PPUSH
4010: CALL_OW 64
// end ; end ;
4014: GO 3925
4016: POP
4017: POP
// if Burlak_saved and Gaydar_saved and player_units = 0 then
4018: LD_EXP 1
4022: PUSH
4023: LD_EXP 2
4027: AND
4028: PUSH
4029: LD_EXP 30
4033: PUSH
4034: LD_INT 0
4036: EQUAL
4037: AND
4038: IFFALSE 4044
// konec_mise ;
4040: CALL 3015 0 0
// enable ;
4044: ENABLE
// end ;
4045: PPOPN 4
4047: END
// every 0 0$1 + 0 0$0.4 marked 5 do var un ;
4048: GO 4050
4050: DISABLE
4051: LD_INT 0
4053: PPUSH
// begin enable ;
4054: ENABLE
// for un in player_units do
4055: LD_ADDR_VAR 0 1
4059: PUSH
4060: LD_EXP 30
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4120
// if GetDistUnits ( un , Gaydar ) <= 5 then
4068: LD_VAR 0 1
4072: PPUSH
4073: LD_EXP 27
4077: PPUSH
4078: CALL_OW 296
4082: PUSH
4083: LD_INT 5
4085: LESSEQUAL
4086: IFFALSE 4118
// begin disable ( 5 ) ;
4088: LD_INT 5
4090: DISABLE_MARKED
// SetSide ( Gaydar , you ) ;
4091: LD_EXP 27
4095: PPUSH
4096: LD_EXP 4
4100: PPUSH
4101: CALL_OW 235
// Dialogue11a ( un ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: CALL 7941 0 1
// exit ;
4114: POP
4115: POP
4116: GO 4122
// end ;
4118: GO 4065
4120: POP
4121: POP
// end ;
4122: PPOPN 1
4124: END
// every 0 0$1 + 0 0$0.2 marked 6 do
4125: GO 4127
4127: DISABLE
// begin if GetDistUnits ( Burlak , Gaydar ) <= 3 or IsInArea ( Gaydar , KnollArea ) then
4128: LD_EXP 14
4132: PPUSH
4133: LD_EXP 27
4137: PPUSH
4138: CALL_OW 296
4142: PUSH
4143: LD_INT 3
4145: LESSEQUAL
4146: PUSH
4147: LD_EXP 27
4151: PPUSH
4152: LD_INT 2
4154: PPUSH
4155: CALL_OW 308
4159: OR
4160: IFFALSE 4187
// begin disable ( 6 ) ;
4162: LD_INT 6
4164: DISABLE_MARKED
// Dialogue11b ;
4165: CALL 7988 0 0
// player_units := player_units union Gaydar ;
4169: LD_ADDR_EXP 30
4173: PUSH
4174: LD_EXP 30
4178: PUSH
4179: LD_EXP 27
4183: UNION
4184: ST_TO_ADDR
// end else
4185: GO 4188
// enable ;
4187: ENABLE
// end ;
4188: END
// every 0 0$0.7 + 0 0$0.3 do var un ;
4189: GO 4191
4191: DISABLE
4192: LD_INT 0
4194: PPUSH
// begin for un in player_units do
4195: LD_ADDR_VAR 0 1
4199: PUSH
4200: LD_EXP 30
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4239
// if GetSide ( Attacks ( un ) ) = ally then
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 320
4217: PPUSH
4218: CALL_OW 255
4222: PUSH
4223: LD_EXP 5
4227: EQUAL
4228: IFFALSE 4237
// YouLost ( SelfAttack ) ;
4230: LD_STRING SelfAttack
4232: PPUSH
4233: CALL_OW 104
4237: GO 4205
4239: POP
4240: POP
// enable ;
4241: ENABLE
// end ;
4242: PPOPN 1
4244: END
// every 0 0$1.3 do var un , ape ;
4245: GO 4247
4247: DISABLE
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// begin for un in ( player_units diff Kuzmov ) do
4252: LD_ADDR_VAR 0 1
4256: PUSH
4257: LD_EXP 30
4261: PUSH
4262: LD_EXP 19
4266: DIFF
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4318
// begin if GetDistUnits ( un , Kuzmov ) < 10 then
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 19
4280: PPUSH
4281: CALL_OW 296
4285: PUSH
4286: LD_INT 10
4288: LESS
4289: IFFALSE 4309
// begin SetSide ( Kuzmov , you ) ;
4291: LD_EXP 19
4295: PPUSH
4296: LD_EXP 4
4300: PPUSH
4301: CALL_OW 235
// exit ;
4305: POP
4306: POP
4307: GO 4338
// end ; Wait ( 3 ) ;
4309: LD_INT 3
4311: PPUSH
4312: CALL_OW 67
// end ;
4316: GO 4268
4318: POP
4319: POP
// if GetSide ( Kuzmov ) = ally then
4320: LD_EXP 19
4324: PPUSH
4325: CALL_OW 255
4329: PUSH
4330: LD_EXP 5
4334: EQUAL
4335: IFFALSE 4338
// enable ;
4337: ENABLE
// end ;
4338: PPOPN 2
4340: END
// every 0 0$1 + 0 0$0.5 do var un ;
4341: GO 4343
4343: DISABLE
4344: LD_INT 0
4346: PPUSH
// begin for un in player_units do
4347: LD_ADDR_VAR 0 1
4351: PUSH
4352: LD_EXP 30
4356: PUSH
4357: FOR_IN
4358: IFFALSE 4440
// if getside ( Attacks ( un ) ) = arab and not was_combat then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 320
4369: PPUSH
4370: CALL_OW 255
4374: PUSH
4375: LD_EXP 6
4379: EQUAL
4380: PUSH
4381: LD_EXP 51
4385: NOT
4386: AND
4387: IFFALSE 4437
// begin disable ;
4389: DISABLE
// was_combat := true ;
4390: LD_ADDR_EXP 51
4394: PUSH
4395: LD_INT 1
4397: ST_TO_ADDR
// Wait ( 0 0$5 ) ;
4398: LD_INT 175
4400: PPUSH
4401: CALL_OW 67
// if holdfreemode = 0 then
4405: LD_OWVAR 73
4409: PUSH
4410: LD_INT 0
4412: EQUAL
4413: IFFALSE 4424
// Hint ( Combat ) else
4415: LD_STRING Combat
4417: PPUSH
4418: CALL_OW 339
4422: GO 4431
// Hint ( Combat2 ) ;
4424: LD_STRING Combat2
4426: PPUSH
4427: CALL_OW 339
// exit ;
4431: POP
4432: POP
4433: GO 4442
// end else
4435: GO 4438
// enable ;
4437: ENABLE
4438: GO 4357
4440: POP
4441: POP
// end ;
4442: PPOPN 1
4444: END
// every 0 0$1 + 0 0$0.8 marked 19 do var filter ;
4445: GO 4447
4447: DISABLE
4448: LD_INT 0
4450: PPUSH
// begin filter := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_oil_mine ] , [ f_btype , b_bunker ] ] ] ] ) ;
4451: LD_ADDR_VAR 0 1
4455: PUSH
4456: LD_INT 21
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 3
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 30
4474: PUSH
4475: LD_INT 26
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 30
4484: PUSH
4485: LD_INT 29
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 32
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: ST_TO_ADDR
// if filter = 0 and not base_dismantled then
4521: LD_VAR 0 1
4525: PUSH
4526: LD_INT 0
4528: EQUAL
4529: PUSH
4530: LD_EXP 60
4534: NOT
4535: AND
4536: IFFALSE 4553
// begin ChangeMissionObjectives ( MOutDestroy ) ;
4538: LD_STRING MOutDestroy
4540: PPUSH
4541: CALL_OW 337
// base_dismantled := true ;
4545: LD_ADDR_EXP 60
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// end ; if ( not filter = 0 ) and base_dismantled then
4553: LD_VAR 0 1
4557: PUSH
4558: LD_INT 0
4560: EQUAL
4561: NOT
4562: PUSH
4563: LD_EXP 60
4567: AND
4568: IFFALSE 4585
// begin ChangeMissionObjectives ( MAddDestroy ) ;
4570: LD_STRING MAddDestroy
4572: PPUSH
4573: CALL_OW 337
// base_dismantled := false ;
4577: LD_ADDR_EXP 60
4581: PUSH
4582: LD_INT 0
4584: ST_TO_ADDR
// end ; enable ;
4585: ENABLE
// end ;
4586: PPOPN 1
4588: END
// on BuildingComplete ( building ) do begin if depot_build = false then
4589: LD_EXP 55
4593: PUSH
4594: LD_INT 0
4596: EQUAL
4597: IFFALSE 4721
// begin if ( GetBType ( building ) = b_depot ) and ( GetSide ( building ) = you ) and ( IsInArea ( building , KnollArea ) ) then
4599: LD_VAR 0 1
4603: PPUSH
4604: CALL_OW 266
4608: PUSH
4609: LD_INT 0
4611: EQUAL
4612: PUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: CALL_OW 255
4622: PUSH
4623: LD_EXP 4
4627: EQUAL
4628: AND
4629: PUSH
4630: LD_VAR 0 1
4634: PPUSH
4635: LD_INT 2
4637: PPUSH
4638: CALL_OW 308
4642: AND
4643: IFFALSE 4670
// begin depot_build = true ;
4645: LD_ADDR_EXP 55
4649: PUSH
4650: LD_INT 1
4652: ST_TO_ADDR
// enable ( 2 ) ;
4653: LD_INT 2
4655: ENABLE_MARKED
// enable ( 8 ) ;
4656: LD_INT 8
4658: ENABLE_MARKED
// ChangeMissionObjectives ( MOutBuild ) ;
4659: LD_STRING MOutBuild
4661: PPUSH
4662: CALL_OW 337
// Dialogue2 ;
4666: CALL 5526 0 0
// end ; if ( GetBType ( building ) = b_depot ) and ( GetSide ( building ) = you ) and not ( IsInArea ( building , KnollArea ) ) then
4670: LD_VAR 0 1
4674: PPUSH
4675: CALL_OW 266
4679: PUSH
4680: LD_INT 0
4682: EQUAL
4683: PUSH
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 255
4693: PUSH
4694: LD_EXP 4
4698: EQUAL
4699: AND
4700: PUSH
4701: LD_VAR 0 1
4705: PPUSH
4706: LD_INT 2
4708: PPUSH
4709: CALL_OW 308
4713: NOT
4714: AND
4715: IFFALSE 4721
// Dialogue2x ;
4717: CALL 5558 0 0
// end ; if GetBType ( building ) = b_workshop and not workshop_build then
4721: LD_VAR 0 1
4725: PPUSH
4726: CALL_OW 266
4730: PUSH
4731: LD_INT 2
4733: EQUAL
4734: PUSH
4735: LD_EXP 56
4739: NOT
4740: AND
4741: IFFALSE 4758
// begin workshop_build := true ;
4743: LD_ADDR_EXP 56
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// Hint ( Extensions1 ) ;
4751: LD_STRING Extensions1
4753: PPUSH
4754: CALL_OW 339
// end ; if GetBType ( building ) = b_armoury and not armoury_build then
4758: LD_VAR 0 1
4762: PPUSH
4763: CALL_OW 266
4767: PUSH
4768: LD_INT 4
4770: EQUAL
4771: PUSH
4772: LD_EXP 57
4776: NOT
4777: AND
4778: IFFALSE 4795
// begin armoury_build := true ;
4780: LD_ADDR_EXP 57
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// Hint ( Armoury ) ;
4788: LD_STRING Armoury
4790: PPUSH
4791: CALL_OW 339
// end ; if GetBType ( building ) = b_breastwork and not bunker_build then
4795: LD_VAR 0 1
4799: PPUSH
4800: CALL_OW 266
4804: PUSH
4805: LD_INT 31
4807: EQUAL
4808: PUSH
4809: LD_EXP 58
4813: NOT
4814: AND
4815: IFFALSE 4832
// begin bunker_build := true ;
4817: LD_ADDR_EXP 58
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// Hint ( Bunkers ) ;
4825: LD_STRING Bunkers
4827: PPUSH
4828: CALL_OW 339
// end ; if GetBType ( building ) = b_bunker and not turret_build then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 266
4841: PUSH
4842: LD_INT 32
4844: EQUAL
4845: PUSH
4846: LD_EXP 59
4850: NOT
4851: AND
4852: IFFALSE 4869
// begin turret_build := true ;
4854: LD_ADDR_EXP 59
4858: PUSH
4859: LD_INT 1
4861: ST_TO_ADDR
// Hint ( Turrets ) ;
4862: LD_STRING Turrets
4864: PPUSH
4865: CALL_OW 339
// end ; end ;
4869: PPOPN 1
4871: END
// on UpgradeComplete ( upgraded_building ) do begin if ( GetBType ( upgraded_building ) = b_lab_half ) and not lab_upgraded then
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 266
4881: PUSH
4882: LD_INT 7
4884: EQUAL
4885: PUSH
4886: LD_EXP 53
4890: NOT
4891: AND
4892: IFFALSE 4906
// begin Dialogue5 ;
4894: CALL 6292 0 0
// lab_upgraded := true ;
4898: LD_ADDR_EXP 53
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// end ; if ( GetBType ( upgraded_building ) = b_factory ) and not workshop_upgraded then
4906: LD_VAR 0 1
4910: PPUSH
4911: CALL_OW 266
4915: PUSH
4916: LD_INT 3
4918: EQUAL
4919: PUSH
4920: LD_EXP 54
4924: NOT
4925: AND
4926: IFFALSE 4943
// begin Hint ( Extensions ) ;
4928: LD_STRING Extensions
4930: PPUSH
4931: CALL_OW 339
// workshop_upgraded := true ;
4935: LD_ADDR_EXP 54
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// end ; end ;
4943: PPOPN 1
4945: END
// on UnitDestroyed ( my_unit ) do var un ;
4946: LD_INT 0
4948: PPUSH
// begin if my_unit = Burlak then
4949: LD_VAR 0 1
4953: PUSH
4954: LD_EXP 14
4958: EQUAL
4959: IFFALSE 4968
// YouLost ( Burlak ) ;
4961: LD_STRING Burlak
4963: PPUSH
4964: CALL_OW 104
// if my_unit = Gaydar then
4968: LD_VAR 0 1
4972: PUSH
4973: LD_EXP 27
4977: EQUAL
4978: IFFALSE 4987
// YouLost ( Gaydar ) ;
4980: LD_STRING Gaydar
4982: PPUSH
4983: CALL_OW 104
// end ;
4987: PPOPN 2
4989: END
// on UnitGoesToRed ( red_unit ) do var un ;
4990: LD_INT 0
4992: PPUSH
// begin if red_unit in attack then
4993: LD_VAR 0 1
4997: PUSH
4998: LD_EXP 7
5002: IN
5003: IFFALSE 5019
// begin ar_killed := ar_killed + 1 ;
5005: LD_ADDR_EXP 50
5009: PUSH
5010: LD_EXP 50
5014: PUSH
5015: LD_INT 1
5017: PLUS
5018: ST_TO_ADDR
// end ; for un in sm_attack1 do
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_EXP 9
5028: PUSH
5029: FOR_IN
5030: IFFALSE 5076
// if un = red_unit then
5032: LD_VAR 0 2
5036: PUSH
5037: LD_VAR 0 1
5041: EQUAL
5042: IFFALSE 5074
// begin sm_attack1 := sm_attack1 diff red_unit ;
5044: LD_ADDR_EXP 9
5048: PUSH
5049: LD_EXP 9
5053: PUSH
5054: LD_VAR 0 1
5058: DIFF
5059: ST_TO_ADDR
// ar_killed := ar_killed + 1 ;
5060: LD_ADDR_EXP 50
5064: PUSH
5065: LD_EXP 50
5069: PUSH
5070: LD_INT 1
5072: PLUS
5073: ST_TO_ADDR
// end ;
5074: GO 5029
5076: POP
5077: POP
// for un in sm_attack2 do
5078: LD_ADDR_VAR 0 2
5082: PUSH
5083: LD_EXP 10
5087: PUSH
5088: FOR_IN
5089: IFFALSE 5135
// if un = red_unit then
5091: LD_VAR 0 2
5095: PUSH
5096: LD_VAR 0 1
5100: EQUAL
5101: IFFALSE 5133
// begin sm_attack2 := sm_attack2 diff red_unit ;
5103: LD_ADDR_EXP 10
5107: PUSH
5108: LD_EXP 10
5112: PUSH
5113: LD_VAR 0 1
5117: DIFF
5118: ST_TO_ADDR
// ar_killed := ar_killed + 1 ;
5119: LD_ADDR_EXP 50
5123: PUSH
5124: LD_EXP 50
5128: PUSH
5129: LD_INT 1
5131: PLUS
5132: ST_TO_ADDR
// end ;
5133: GO 5088
5135: POP
5136: POP
// if red_unit = driver then
5137: LD_VAR 0 1
5141: PUSH
5142: LD_EXP 52
5146: EQUAL
5147: IFFALSE 5160
// begin Wait ( 0 0$5 ) ;
5149: LD_INT 175
5151: PPUSH
5152: CALL_OW 67
// steal_player_buildings ;
5156: CALL 13704 0 0
// end ; end ;
5160: PPOPN 2
5162: END
// on Command ( com ) do var i , j , temp , x , y , typeTask ;
5163: LD_INT 0
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
5170: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
5171: LD_ADDR_VAR 0 2
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 21
5188: PUSH
5189: LD_INT 1
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PPUSH
5200: CALL_OW 69
5204: PUSH
5205: FOR_IN
5206: IFFALSE 5453
// if GetTaskList ( i ) > 0 then
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 437
5217: PUSH
5218: LD_INT 0
5220: GREATER
5221: IFFALSE 5451
// for j = 1 to GetTaskList ( i ) do
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_VAR 0 2
5237: PPUSH
5238: CALL_OW 437
5242: PUSH
5243: FOR_TO
5244: IFFALSE 5449
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 437
5260: PUSH
5261: LD_VAR 0 3
5265: ARRAY
5266: PUSH
5267: LD_INT 4
5269: ARRAY
5270: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
5271: LD_ADDR_VAR 0 5
5275: PUSH
5276: LD_VAR 0 2
5280: PPUSH
5281: CALL_OW 437
5285: PUSH
5286: LD_VAR 0 3
5290: ARRAY
5291: PUSH
5292: LD_INT 2
5294: ARRAY
5295: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
5296: LD_ADDR_VAR 0 6
5300: PUSH
5301: LD_VAR 0 2
5305: PPUSH
5306: CALL_OW 437
5310: PUSH
5311: LD_VAR 0 3
5315: ARRAY
5316: PUSH
5317: LD_INT 3
5319: ARRAY
5320: ST_TO_ADDR
// typeTask = GetTaskList ( i ) [ j ] [ 1 ] ;
5321: LD_ADDR_VAR 0 7
5325: PUSH
5326: LD_VAR 0 2
5330: PPUSH
5331: CALL_OW 437
5335: PUSH
5336: LD_VAR 0 3
5340: ARRAY
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: ST_TO_ADDR
// if GetSide ( temp ) = 6 and GetType ( temp ) = unit_vehicle then
5346: LD_VAR 0 4
5350: PPUSH
5351: CALL_OW 255
5355: PUSH
5356: LD_INT 6
5358: EQUAL
5359: PUSH
5360: LD_VAR 0 4
5364: PPUSH
5365: CALL_OW 247
5369: PUSH
5370: LD_INT 2
5372: EQUAL
5373: AND
5374: IFFALSE 5387
// SetTaskList ( i , [ ] ) ;
5376: LD_VAR 0 2
5380: PPUSH
5381: EMPTY
5382: PPUSH
5383: CALL_OW 446
// if x > 0 and y > 0 and typeTask = B and InArea ( x , y , BlockBuildArea ) then
5387: LD_VAR 0 5
5391: PUSH
5392: LD_INT 0
5394: GREATER
5395: PUSH
5396: LD_VAR 0 6
5400: PUSH
5401: LD_INT 0
5403: GREATER
5404: AND
5405: PUSH
5406: LD_VAR 0 7
5410: PUSH
5411: LD_STRING B
5413: EQUAL
5414: AND
5415: PUSH
5416: LD_VAR 0 5
5420: PPUSH
5421: LD_VAR 0 6
5425: PPUSH
5426: LD_INT 8
5428: PPUSH
5429: CALL_OW 309
5433: AND
5434: IFFALSE 5447
// SetTaskList ( i , [ ] ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: EMPTY
5442: PPUSH
5443: CALL_OW 446
// end ;
5447: GO 5243
5449: POP
5450: POP
5451: GO 5205
5453: POP
5454: POP
// end ; end_of_file
5455: PPOPN 7
5457: END
// export function Dialogue1 ; begin
5458: LD_INT 0
5460: PPUSH
// SayRadio ( SoldierX , D1-RSol1-1 ) ;
5461: LD_EXP 21
5465: PPUSH
5466: LD_STRING D1-RSol1-1
5468: PPUSH
5469: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
5473: LD_EXP 16
5477: PPUSH
5478: LD_STRING D1-Pla-1
5480: PPUSH
5481: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
5485: LD_EXP 14
5489: PPUSH
5490: LD_STRING D1-Bur-1
5492: PPUSH
5493: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
5497: LD_EXP 16
5501: PPUSH
5502: LD_STRING D1-Pla-2
5504: PPUSH
5505: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
5509: LD_EXP 14
5513: PPUSH
5514: LD_STRING D1-Bur-2
5516: PPUSH
5517: CALL_OW 88
// end ;
5521: LD_VAR 0 1
5525: RET
// export function Dialogue2 ; begin
5526: LD_INT 0
5528: PPUSH
// Say ( Burlak , D2-Bur-1 ) ;
5529: LD_EXP 14
5533: PPUSH
5534: LD_STRING D2-Bur-1
5536: PPUSH
5537: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
5541: LD_EXP 16
5545: PPUSH
5546: LD_STRING D2-Pla-1
5548: PPUSH
5549: CALL_OW 94
// end ;
5553: LD_VAR 0 1
5557: RET
// export function Dialogue2x ; begin
5558: LD_INT 0
5560: PPUSH
// SayRadio ( Platonov , D2a-Pla-1 ) ;
5561: LD_EXP 16
5565: PPUSH
5566: LD_STRING D2a-Pla-1
5568: PPUSH
5569: CALL_OW 94
// end ;
5573: LD_VAR 0 1
5577: RET
// export function Dialogue2a ; begin
5578: LD_INT 0
5580: PPUSH
// Say ( IsDrivenBy ( FirstCargo ) , D2a-RSol1-1 ) ;
5581: LD_EXP 35
5585: PPUSH
5586: CALL_OW 311
5590: PPUSH
5591: LD_STRING D2a-RSol1-1
5593: PPUSH
5594: CALL_OW 88
// end ;
5598: LD_VAR 0 1
5602: RET
// export function Dialogue2b ; begin
5603: LD_INT 0
5605: PPUSH
// DialogueOn ;
5606: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
5610: LD_EXP 19
5614: PPUSH
5615: LD_STRING D2b-Kuz-1
5617: PPUSH
5618: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
5622: LD_EXP 14
5626: PPUSH
5627: LD_STRING D2b-Bur-1
5629: PPUSH
5630: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
5634: LD_EXP 19
5638: PPUSH
5639: LD_STRING D2b-Kuz-2
5641: PPUSH
5642: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
5646: LD_EXP 14
5650: PPUSH
5651: LD_STRING D2b-Bur-2
5653: PPUSH
5654: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
5658: LD_EXP 19
5662: PPUSH
5663: LD_STRING D2b-Kuz-3
5665: PPUSH
5666: CALL_OW 88
// DialogueOff ;
5670: CALL_OW 7
// Query ( Q1 ) ;
5674: LD_STRING Q1
5676: PPUSH
5677: CALL_OW 97
// enable ( 4 ) ;
5681: LD_INT 4
5683: ENABLE_MARKED
// end ;
5684: LD_VAR 0 1
5688: RET
// export function Dialogue3a ; begin
5689: LD_INT 0
5691: PPUSH
// DialogueOn ;
5692: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
5696: LD_EXP 16
5700: PPUSH
5701: LD_STRING D3A-Pla-1
5703: PPUSH
5704: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
5708: LD_EXP 14
5712: PPUSH
5713: LD_STRING D3A-Bur-1
5715: PPUSH
5716: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
5720: LD_EXP 16
5724: PPUSH
5725: LD_STRING D3A-Pla-2
5727: PPUSH
5728: CALL_OW 94
// Say ( Kuzmov , D3A-Kuz-2 ) ;
5732: LD_EXP 19
5736: PPUSH
5737: LD_STRING D3A-Kuz-2
5739: PPUSH
5740: CALL_OW 88
// DialogueOff ;
5744: CALL_OW 7
// end ;
5748: LD_VAR 0 1
5752: RET
// export function Dialogue3b ; begin
5753: LD_INT 0
5755: PPUSH
// DialogueOn ;
5756: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
5760: LD_EXP 16
5764: PPUSH
5765: LD_STRING D3B-Pla-1
5767: PPUSH
5768: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
5772: LD_EXP 14
5776: PPUSH
5777: LD_STRING D3B-Bur-1
5779: PPUSH
5780: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
5784: LD_EXP 16
5788: PPUSH
5789: LD_STRING D3B-Pla-2
5791: PPUSH
5792: CALL_OW 94
// Say ( Kuzmov , D3B-Kuz-2 ) ;
5796: LD_EXP 19
5800: PPUSH
5801: LD_STRING D3B-Kuz-2
5803: PPUSH
5804: CALL_OW 88
// DialogueOff ;
5808: CALL_OW 7
// end ;
5812: LD_VAR 0 1
5816: RET
// export function Dialogue3c ; begin
5817: LD_INT 0
5819: PPUSH
// DialogueOn ;
5820: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
5824: LD_EXP 16
5828: PPUSH
5829: LD_STRING D3C-Pla-1
5831: PPUSH
5832: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
5836: LD_EXP 14
5840: PPUSH
5841: LD_STRING D3C-Bur-1
5843: PPUSH
5844: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
5848: LD_EXP 16
5852: PPUSH
5853: LD_STRING D3C-Pla-2
5855: PPUSH
5856: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
5860: LD_EXP 14
5864: PPUSH
5865: LD_STRING D3C-Bur-2
5867: PPUSH
5868: CALL_OW 88
// Say ( Kuzmov , D3C-Kuz-2 ) ;
5872: LD_EXP 19
5876: PPUSH
5877: LD_STRING D3C-Kuz-2
5879: PPUSH
5880: CALL_OW 88
// DialogueOff ;
5884: CALL_OW 7
// end ;
5888: LD_VAR 0 1
5892: RET
// export function Dialogue3d ; begin
5893: LD_INT 0
5895: PPUSH
// DialogueOn ;
5896: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
5900: LD_EXP 16
5904: PPUSH
5905: LD_STRING D3D-Pla-1
5907: PPUSH
5908: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
5912: LD_EXP 14
5916: PPUSH
5917: LD_STRING D3D-Bur-1
5919: PPUSH
5920: CALL_OW 88
// SayRadio ( Platonov , D3D-Pla-2 ) ;
5924: LD_EXP 16
5928: PPUSH
5929: LD_STRING D3D-Pla-2
5931: PPUSH
5932: CALL_OW 94
// Say ( Kuzmov , D3D-Kuz-2 ) ;
5936: LD_EXP 19
5940: PPUSH
5941: LD_STRING D3D-Kuz-2
5943: PPUSH
5944: CALL_OW 88
// DialogueOff ;
5948: CALL_OW 7
// end ;
5952: LD_VAR 0 1
5956: RET
// export function Dialogue3e ; begin
5957: LD_INT 0
5959: PPUSH
// DialogueOn ;
5960: CALL_OW 6
// if ( RecklessAttack = true ) and ( BelkovFreed = false ) then
5964: LD_EXP 44
5968: PUSH
5969: LD_INT 1
5971: EQUAL
5972: PUSH
5973: LD_EXP 45
5977: PUSH
5978: LD_INT 0
5980: EQUAL
5981: AND
5982: IFFALSE 5996
// SayRadio ( Platonov , D3E-Pla-1 ) ;
5984: LD_EXP 16
5988: PPUSH
5989: LD_STRING D3E-Pla-1
5991: PPUSH
5992: CALL_OW 94
// if ( RecklessAttack = false ) and ( BelkovFreed = false ) then
5996: LD_EXP 44
6000: PUSH
6001: LD_INT 0
6003: EQUAL
6004: PUSH
6005: LD_EXP 45
6009: PUSH
6010: LD_INT 0
6012: EQUAL
6013: AND
6014: IFFALSE 6028
// SayRadio ( Platonov , D3E-Pla-1a ) ;
6016: LD_EXP 16
6020: PPUSH
6021: LD_STRING D3E-Pla-1a
6023: PPUSH
6024: CALL_OW 94
// if ( RecklessAttack = true ) and ( BelkovFreed = true ) then
6028: LD_EXP 44
6032: PUSH
6033: LD_INT 1
6035: EQUAL
6036: PUSH
6037: LD_EXP 45
6041: PUSH
6042: LD_INT 1
6044: EQUAL
6045: AND
6046: IFFALSE 6060
// SayRadio ( Platonov , D3E-Pla-1b ) ;
6048: LD_EXP 16
6052: PPUSH
6053: LD_STRING D3E-Pla-1b
6055: PPUSH
6056: CALL_OW 94
// if ( RecklessAttack = false ) and ( BelkovFreed = true ) then
6060: LD_EXP 44
6064: PUSH
6065: LD_INT 0
6067: EQUAL
6068: PUSH
6069: LD_EXP 45
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: AND
6078: IFFALSE 6092
// SayRadio ( Platonov , D3E-Pla-1c ) ;
6080: LD_EXP 16
6084: PPUSH
6085: LD_STRING D3E-Pla-1c
6087: PPUSH
6088: CALL_OW 94
// DialogueOff ;
6092: CALL_OW 7
// YouLost ( Arrest ) ;
6096: LD_STRING Arrest
6098: PPUSH
6099: CALL_OW 104
// end ;
6103: LD_VAR 0 1
6107: RET
// export function Dialogue4 ; begin
6108: LD_INT 0
6110: PPUSH
// DialogueOn ;
6111: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
6115: LD_EXP 16
6119: PPUSH
6120: LD_STRING D4-Pla-1
6122: PPUSH
6123: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
6127: LD_EXP 14
6131: PPUSH
6132: LD_STRING D4-Bur-1
6134: PPUSH
6135: CALL_OW 88
// Say ( Kuzmov , D4-Kuz-1 ) ;
6139: LD_EXP 19
6143: PPUSH
6144: LD_STRING D4-Kuz-1
6146: PPUSH
6147: CALL_OW 88
// if IsOK ( Belkov ) then
6151: LD_EXP 17
6155: PPUSH
6156: CALL_OW 302
6160: IFFALSE 6176
// Say ( Belkov , D4-Bel-1 ) else
6162: LD_EXP 17
6166: PPUSH
6167: LD_STRING D4-Bel-1
6169: PPUSH
6170: CALL_OW 88
6174: GO 6188
// Say ( Burlak , D4-Bur-2 ) ;
6176: LD_EXP 14
6180: PPUSH
6181: LD_STRING D4-Bur-2
6183: PPUSH
6184: CALL_OW 88
// if IsOK ( Gnyevko ) then
6188: LD_EXP 15
6192: PPUSH
6193: CALL_OW 302
6197: IFFALSE 6223
// begin Say ( Gnyevko , D4-Gny-2 ) ;
6199: LD_EXP 15
6203: PPUSH
6204: LD_STRING D4-Gny-2
6206: PPUSH
6207: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
6211: LD_EXP 14
6215: PPUSH
6216: LD_STRING D4-Bur-3
6218: PPUSH
6219: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
6223: LD_EXP 14
6227: PPUSH
6228: LD_STRING D4-Bur-3a
6230: PPUSH
6231: CALL_OW 88
// if IsOK ( Belkov ) then
6235: LD_EXP 17
6239: PPUSH
6240: CALL_OW 302
6244: IFFALSE 6260
// Say ( Belkov , D4-Bel-3 ) else
6246: LD_EXP 17
6250: PPUSH
6251: LD_STRING D4-Bel-3
6253: PPUSH
6254: CALL_OW 88
6258: GO 6283
// if IsOK ( Kovalyuk ) then
6260: LD_EXP 20
6264: PPUSH
6265: CALL_OW 302
6269: IFFALSE 6283
// Say ( Kovalyuk , D4-Kov-3 ) ;
6271: LD_EXP 20
6275: PPUSH
6276: LD_STRING D4-Kov-3
6278: PPUSH
6279: CALL_OW 88
// DialogueOff ;
6283: CALL_OW 7
// end ;
6287: LD_VAR 0 1
6291: RET
// export function Dialogue5 ; var filter , filter_all , un ; begin
6292: LD_INT 0
6294: PPUSH
6295: PPUSH
6296: PPUSH
6297: PPUSH
// if IsOK ( Scholtze ) then
6298: LD_EXP 18
6302: PPUSH
6303: CALL_OW 302
6307: IFFALSE 6335
// begin Say ( Scholtze , D5-Sch-1 ) ;
6309: LD_EXP 18
6313: PPUSH
6314: LD_STRING D5-Sch-1
6316: PPUSH
6317: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
6321: LD_EXP 14
6325: PPUSH
6326: LD_STRING D5-Bur-1
6328: PPUSH
6329: CALL_OW 88
// end else
6333: GO 6787
// begin filter_all := FilterAllUnits ( [ [ f_side , you ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_not , [ f_nation , nation_nature ] ] ] ) ;
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_INT 22
6342: PUSH
6343: LD_EXP 4
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 26
6354: PUSH
6355: LD_INT 1
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 50
6364: PUSH
6365: EMPTY
6366: LIST
6367: PUSH
6368: LD_INT 3
6370: PUSH
6371: LD_INT 23
6373: PUSH
6374: LD_INT 0
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PPUSH
6391: CALL_OW 69
6395: ST_TO_ADDR
// filter_all := filter_all diff [ Burlak , Scholtze ] ;
6396: LD_ADDR_VAR 0 3
6400: PUSH
6401: LD_VAR 0 3
6405: PUSH
6406: LD_EXP 14
6410: PUSH
6411: LD_EXP 18
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: DIFF
6420: ST_TO_ADDR
// if 0 + filter_all > 0 then
6421: LD_INT 0
6423: PUSH
6424: LD_VAR 0 3
6428: PLUS
6429: PUSH
6430: LD_INT 0
6432: GREATER
6433: IFFALSE 6787
// begin filter := [ ] ;
6435: LD_ADDR_VAR 0 2
6439: PUSH
6440: EMPTY
6441: ST_TO_ADDR
// for un in filter_all do
6442: LD_ADDR_VAR 0 4
6446: PUSH
6447: LD_VAR 0 3
6451: PUSH
6452: FOR_IN
6453: IFFALSE 6522
// if not ( un in [ Gnyevko , Belkov , Kovalyuk , Kuzmov ] ) and GetClass ( un ) = class_scientistic then
6455: LD_VAR 0 4
6459: PUSH
6460: LD_EXP 15
6464: PUSH
6465: LD_EXP 17
6469: PUSH
6470: LD_EXP 20
6474: PUSH
6475: LD_EXP 19
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: IN
6486: NOT
6487: PUSH
6488: LD_VAR 0 4
6492: PPUSH
6493: CALL_OW 257
6497: PUSH
6498: LD_INT 4
6500: EQUAL
6501: AND
6502: IFFALSE 6520
// filter := filter union un ;
6504: LD_ADDR_VAR 0 2
6508: PUSH
6509: LD_VAR 0 2
6513: PUSH
6514: LD_VAR 0 4
6518: UNION
6519: ST_TO_ADDR
6520: GO 6452
6522: POP
6523: POP
// if filter > 0 then
6524: LD_VAR 0 2
6528: PUSH
6529: LD_INT 0
6531: GREATER
6532: IFFALSE 6564
// begin Say ( filter [ 1 ] , D5-RSci1-1 ) ;
6534: LD_VAR 0 2
6538: PUSH
6539: LD_INT 1
6541: ARRAY
6542: PPUSH
6543: LD_STRING D5-RSci1-1
6545: PPUSH
6546: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
6550: LD_EXP 14
6554: PPUSH
6555: LD_STRING D5-Bur-1
6557: PPUSH
6558: CALL_OW 88
// end else
6562: GO 6787
// begin for un in filter_all do
6564: LD_ADDR_VAR 0 4
6568: PUSH
6569: LD_VAR 0 3
6573: PUSH
6574: FOR_IN
6575: IFFALSE 6629
// if not ( un in [ Gnyevko , Belkov , Kovalyuk , Kuzmov ] ) then
6577: LD_VAR 0 4
6581: PUSH
6582: LD_EXP 15
6586: PUSH
6587: LD_EXP 17
6591: PUSH
6592: LD_EXP 20
6596: PUSH
6597: LD_EXP 19
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: IN
6608: NOT
6609: IFFALSE 6627
// filter := filter union un ;
6611: LD_ADDR_VAR 0 2
6615: PUSH
6616: LD_VAR 0 2
6620: PUSH
6621: LD_VAR 0 4
6625: UNION
6626: ST_TO_ADDR
6627: GO 6574
6629: POP
6630: POP
// if filter > 0 then
6631: LD_VAR 0 2
6635: PUSH
6636: LD_INT 0
6638: GREATER
6639: IFFALSE 6671
// begin Say ( filter [ 1 ] , D5-RSci1-1 ) ;
6641: LD_VAR 0 2
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: PPUSH
6650: LD_STRING D5-RSci1-1
6652: PPUSH
6653: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
6657: LD_EXP 14
6661: PPUSH
6662: LD_STRING D5-Bur-1
6664: PPUSH
6665: CALL_OW 88
// end else
6669: GO 6787
// begin for un in filter_all do
6671: LD_ADDR_VAR 0 4
6675: PUSH
6676: LD_VAR 0 3
6680: PUSH
6681: FOR_IN
6682: IFFALSE 6717
// if GetClass ( un ) = class_scientistic then
6684: LD_VAR 0 4
6688: PPUSH
6689: CALL_OW 257
6693: PUSH
6694: LD_INT 4
6696: EQUAL
6697: IFFALSE 6715
// filter := filter union un ;
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_VAR 0 2
6708: PUSH
6709: LD_VAR 0 4
6713: UNION
6714: ST_TO_ADDR
6715: GO 6681
6717: POP
6718: POP
// if filter > 0 then
6719: LD_VAR 0 2
6723: PUSH
6724: LD_INT 0
6726: GREATER
6727: IFFALSE 6759
// begin Say ( filter [ 1 ] , D5-RSci1-1 ) ;
6729: LD_VAR 0 2
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_STRING D5-RSci1-1
6740: PPUSH
6741: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
6745: LD_EXP 14
6749: PPUSH
6750: LD_STRING D5-Bur-1
6752: PPUSH
6753: CALL_OW 88
// end else
6757: GO 6787
// begin Say ( filter_all [ 1 ] , D5-RSci1-1 ) ;
6759: LD_VAR 0 3
6763: PUSH
6764: LD_INT 1
6766: ARRAY
6767: PPUSH
6768: LD_STRING D5-RSci1-1
6770: PPUSH
6771: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
6775: LD_EXP 14
6779: PPUSH
6780: LD_STRING D5-Bur-1
6782: PPUSH
6783: CALL_OW 88
// end ; end ; end ; end ; end ; end ;
6787: LD_VAR 0 1
6791: RET
// export function Dialogue7 ; var ss , bool , rand_sentence , pole , filter ; begin
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
// Randomize ;
6800: CALL_OW 10
// rand_sentence := Rand ( 1 , 3 ) ;
6804: LD_ADDR_VAR 0 4
6808: PUSH
6809: LD_INT 1
6811: PPUSH
6812: LD_INT 3
6814: PPUSH
6815: CALL_OW 12
6819: ST_TO_ADDR
// case rand_sentence of 1 :
6820: LD_VAR 0 4
6824: PUSH
6825: LD_INT 1
6827: DOUBLE
6828: EQUAL
6829: IFTRUE 6833
6831: GO 6848
6833: POP
// Say ( Burlak , D7-Bur-1 ) ; 2 :
6834: LD_EXP 14
6838: PPUSH
6839: LD_STRING D7-Bur-1
6841: PPUSH
6842: CALL_OW 88
6846: GO 6895
6848: LD_INT 2
6850: DOUBLE
6851: EQUAL
6852: IFTRUE 6856
6854: GO 6871
6856: POP
// Say ( Burlak , D7-Bur-1a ) ; 3 :
6857: LD_EXP 14
6861: PPUSH
6862: LD_STRING D7-Bur-1a
6864: PPUSH
6865: CALL_OW 88
6869: GO 6895
6871: LD_INT 3
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 6894
6879: POP
// Say ( Burlak , D7-Bur-1b ) ; end ;
6880: LD_EXP 14
6884: PPUSH
6885: LD_STRING D7-Bur-1b
6887: PPUSH
6888: CALL_OW 88
6892: GO 6895
6894: POP
// bool := false ;
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: LD_INT 0
6902: ST_TO_ADDR
// pole := [ ] ;
6903: LD_ADDR_VAR 0 5
6907: PUSH
6908: EMPTY
6909: ST_TO_ADDR
// repeat ss := ( [ 1 , 2 , 3 , 4 ] diff pole ) [ Rand ( 1 , 4 - pole ) ] ;
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_INT 1
6917: PUSH
6918: LD_INT 2
6920: PUSH
6921: LD_INT 3
6923: PUSH
6924: LD_INT 4
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: PUSH
6933: LD_VAR 0 5
6937: DIFF
6938: PUSH
6939: LD_INT 1
6941: PPUSH
6942: LD_INT 4
6944: PUSH
6945: LD_VAR 0 5
6949: MINUS
6950: PPUSH
6951: CALL_OW 12
6955: ARRAY
6956: ST_TO_ADDR
// case ss of 1 :
6957: LD_VAR 0 2
6961: PUSH
6962: LD_INT 1
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 7016
6970: POP
// begin if IsOK ( Belkov ) then
6971: LD_EXP 17
6975: PPUSH
6976: CALL_OW 302
6980: IFFALSE 7000
// bool := Say ( Belkov , D7-Bel-1 ) ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_EXP 17
6991: PPUSH
6992: LD_STRING D7-Bel-1
6994: PPUSH
6995: CALL_OW 88
6999: ST_TO_ADDR
// pole := pole union 1 ;
7000: LD_ADDR_VAR 0 5
7004: PUSH
7005: LD_VAR 0 5
7009: PUSH
7010: LD_INT 1
7012: UNION
7013: ST_TO_ADDR
// end ; 2 :
7014: GO 7179
7016: LD_INT 2
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7070
7024: POP
// begin if IsOK ( Kuzmov ) then
7025: LD_EXP 19
7029: PPUSH
7030: CALL_OW 302
7034: IFFALSE 7054
// bool := Say ( Kuzmov , D7-Kuz-1 ) ;
7036: LD_ADDR_VAR 0 3
7040: PUSH
7041: LD_EXP 19
7045: PPUSH
7046: LD_STRING D7-Kuz-1
7048: PPUSH
7049: CALL_OW 88
7053: ST_TO_ADDR
// pole := pole union 2 ;
7054: LD_ADDR_VAR 0 5
7058: PUSH
7059: LD_VAR 0 5
7063: PUSH
7064: LD_INT 2
7066: UNION
7067: ST_TO_ADDR
// end ; 3 :
7068: GO 7179
7070: LD_INT 3
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7124
7078: POP
// begin if IsOK ( Kovalyuk ) then
7079: LD_EXP 20
7083: PPUSH
7084: CALL_OW 302
7088: IFFALSE 7108
// bool := Say ( Kovalyuk , D7-Kov-1 ) ;
7090: LD_ADDR_VAR 0 3
7094: PUSH
7095: LD_EXP 20
7099: PPUSH
7100: LD_STRING D7-Kov-1
7102: PPUSH
7103: CALL_OW 88
7107: ST_TO_ADDR
// pole := pole union 3 ;
7108: LD_ADDR_VAR 0 5
7112: PUSH
7113: LD_VAR 0 5
7117: PUSH
7118: LD_INT 3
7120: UNION
7121: ST_TO_ADDR
// end ; 4 :
7122: GO 7179
7124: LD_INT 4
7126: DOUBLE
7127: EQUAL
7128: IFTRUE 7132
7130: GO 7178
7132: POP
// begin if IsOK ( Scholtze ) then
7133: LD_EXP 18
7137: PPUSH
7138: CALL_OW 302
7142: IFFALSE 7162
// bool := Say ( Scholtze , D7-Sch-1 ) ;
7144: LD_ADDR_VAR 0 3
7148: PUSH
7149: LD_EXP 18
7153: PPUSH
7154: LD_STRING D7-Sch-1
7156: PPUSH
7157: CALL_OW 88
7161: ST_TO_ADDR
// pole := pole union 4 ;
7162: LD_ADDR_VAR 0 5
7166: PUSH
7167: LD_VAR 0 5
7171: PUSH
7172: LD_INT 4
7174: UNION
7175: ST_TO_ADDR
// end ; end ;
7176: GO 7179
7178: POP
// Wait ( 1 ) ;
7179: LD_INT 1
7181: PPUSH
7182: CALL_OW 67
// until bool or ( pole > 3 ) ;
7186: LD_VAR 0 3
7190: PUSH
7191: LD_VAR 0 5
7195: PUSH
7196: LD_INT 3
7198: GREATER
7199: OR
7200: IFFALSE 6910
// if not bool then
7202: LD_VAR 0 3
7206: NOT
7207: IFFALSE 7270
// begin filter := FilterAllUnits ( [ [ f_side , you ] , [ f_sex , sex_male ] ] ) diff [ Burlak ] ;
7209: LD_ADDR_VAR 0 6
7213: PUSH
7214: LD_INT 22
7216: PUSH
7217: LD_EXP 4
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 26
7228: PUSH
7229: LD_INT 1
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: PUSH
7245: LD_EXP 14
7249: PUSH
7250: EMPTY
7251: LIST
7252: DIFF
7253: ST_TO_ADDR
// Say ( filter [ 1 ] , D7-RSol1-1 ) ;
7254: LD_VAR 0 6
7258: PUSH
7259: LD_INT 1
7261: ARRAY
7262: PPUSH
7263: LD_STRING D7-RSol1-1
7265: PPUSH
7266: CALL_OW 88
// end ; end ;
7270: LD_VAR 0 1
7274: RET
// export function Dialogue7a ; begin
7275: LD_INT 0
7277: PPUSH
// Say ( Heike , D7a-Hke-1 ) ;
7278: LD_EXP 28
7282: PPUSH
7283: LD_STRING D7a-Hke-1
7285: PPUSH
7286: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
7290: LD_EXP 14
7294: PPUSH
7295: LD_STRING D7a-Bur-1
7297: PPUSH
7298: CALL_OW 88
// end ;
7302: LD_VAR 0 1
7306: RET
// export function Dialogue8 ; var filter , filter_all , un ; begin
7307: LD_INT 0
7309: PPUSH
7310: PPUSH
7311: PPUSH
7312: PPUSH
// if IsOK ( Kuzmov ) then
7313: LD_EXP 19
7317: PPUSH
7318: CALL_OW 302
7322: IFFALSE 7350
// begin Say ( Kuzmov , D8-Kuz-1 ) ;
7324: LD_EXP 19
7328: PPUSH
7329: LD_STRING D8-Kuz-1
7331: PPUSH
7332: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_STRING D8-Bur-1
7343: PPUSH
7344: CALL_OW 88
// end else
7348: GO 7802
// begin filter_all := FilterAllUnits ( [ [ f_side , you ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_not , [ f_nation , nation_nature ] ] ] ) ;
7350: LD_ADDR_VAR 0 3
7354: PUSH
7355: LD_INT 22
7357: PUSH
7358: LD_EXP 4
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 26
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 50
7379: PUSH
7380: EMPTY
7381: LIST
7382: PUSH
7383: LD_INT 3
7385: PUSH
7386: LD_INT 23
7388: PUSH
7389: LD_INT 0
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: PPUSH
7406: CALL_OW 69
7410: ST_TO_ADDR
// filter_all := filter_all diff [ Burlak , Kuzmov ] ;
7411: LD_ADDR_VAR 0 3
7415: PUSH
7416: LD_VAR 0 3
7420: PUSH
7421: LD_EXP 14
7425: PUSH
7426: LD_EXP 19
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// if 0 + filter_all > 0 then
7436: LD_INT 0
7438: PUSH
7439: LD_VAR 0 3
7443: PLUS
7444: PUSH
7445: LD_INT 0
7447: GREATER
7448: IFFALSE 7802
// begin filter := [ ] ;
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: EMPTY
7456: ST_TO_ADDR
// for un in filter_all do
7457: LD_ADDR_VAR 0 4
7461: PUSH
7462: LD_VAR 0 3
7466: PUSH
7467: FOR_IN
7468: IFFALSE 7537
// if not ( un in [ Gnyevko , Belkov , Kovalyuk , Scholtze ] ) and GetClass ( un ) = class_soldier then
7470: LD_VAR 0 4
7474: PUSH
7475: LD_EXP 15
7479: PUSH
7480: LD_EXP 17
7484: PUSH
7485: LD_EXP 20
7489: PUSH
7490: LD_EXP 18
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: IN
7501: NOT
7502: PUSH
7503: LD_VAR 0 4
7507: PPUSH
7508: CALL_OW 257
7512: PUSH
7513: LD_INT 1
7515: EQUAL
7516: AND
7517: IFFALSE 7535
// filter := filter union un ;
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_VAR 0 2
7528: PUSH
7529: LD_VAR 0 4
7533: UNION
7534: ST_TO_ADDR
7535: GO 7467
7537: POP
7538: POP
// if filter > 0 then
7539: LD_VAR 0 2
7543: PUSH
7544: LD_INT 0
7546: GREATER
7547: IFFALSE 7579
// begin Say ( filter [ 1 ] , D8-RSol1-1 ) ;
7549: LD_VAR 0 2
7553: PUSH
7554: LD_INT 1
7556: ARRAY
7557: PPUSH
7558: LD_STRING D8-RSol1-1
7560: PPUSH
7561: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
7565: LD_EXP 14
7569: PPUSH
7570: LD_STRING D8-Bur-1
7572: PPUSH
7573: CALL_OW 88
// end else
7577: GO 7802
// begin for un in filter_all do
7579: LD_ADDR_VAR 0 4
7583: PUSH
7584: LD_VAR 0 3
7588: PUSH
7589: FOR_IN
7590: IFFALSE 7644
// if not ( un in [ Gnyevko , Belkov , Kovalyuk , Scholtze ] ) then
7592: LD_VAR 0 4
7596: PUSH
7597: LD_EXP 15
7601: PUSH
7602: LD_EXP 17
7606: PUSH
7607: LD_EXP 20
7611: PUSH
7612: LD_EXP 18
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: IN
7623: NOT
7624: IFFALSE 7642
// filter := filter union un ;
7626: LD_ADDR_VAR 0 2
7630: PUSH
7631: LD_VAR 0 2
7635: PUSH
7636: LD_VAR 0 4
7640: UNION
7641: ST_TO_ADDR
7642: GO 7589
7644: POP
7645: POP
// if filter > 0 then
7646: LD_VAR 0 2
7650: PUSH
7651: LD_INT 0
7653: GREATER
7654: IFFALSE 7686
// begin Say ( filter [ 1 ] , D8-RSol1-1 ) ;
7656: LD_VAR 0 2
7660: PUSH
7661: LD_INT 1
7663: ARRAY
7664: PPUSH
7665: LD_STRING D8-RSol1-1
7667: PPUSH
7668: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
7672: LD_EXP 14
7676: PPUSH
7677: LD_STRING D8-Bur-1
7679: PPUSH
7680: CALL_OW 88
// end else
7684: GO 7802
// begin for un in filter_all do
7686: LD_ADDR_VAR 0 4
7690: PUSH
7691: LD_VAR 0 3
7695: PUSH
7696: FOR_IN
7697: IFFALSE 7732
// if GetClass ( un ) = class_soldier then
7699: LD_VAR 0 4
7703: PPUSH
7704: CALL_OW 257
7708: PUSH
7709: LD_INT 1
7711: EQUAL
7712: IFFALSE 7730
// filter := filter union un ;
7714: LD_ADDR_VAR 0 2
7718: PUSH
7719: LD_VAR 0 2
7723: PUSH
7724: LD_VAR 0 4
7728: UNION
7729: ST_TO_ADDR
7730: GO 7696
7732: POP
7733: POP
// if filter > 0 then
7734: LD_VAR 0 2
7738: PUSH
7739: LD_INT 0
7741: GREATER
7742: IFFALSE 7774
// begin Say ( filter [ 1 ] , D8-RSol1-1 ) ;
7744: LD_VAR 0 2
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: LD_STRING D8-RSol1-1
7755: PPUSH
7756: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
7760: LD_EXP 14
7764: PPUSH
7765: LD_STRING D8-Bur-1
7767: PPUSH
7768: CALL_OW 88
// end else
7772: GO 7802
// begin Say ( filter_all [ 1 ] , D8-RSol1-1 ) ;
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: LD_STRING D8-RSol1-1
7785: PPUSH
7786: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
7790: LD_EXP 14
7794: PPUSH
7795: LD_STRING D8-Bur-1
7797: PPUSH
7798: CALL_OW 88
// end ; end ; end ; end ; end ; end ;
7802: LD_VAR 0 1
7806: RET
// export function Dialogue9 ; begin
7807: LD_INT 0
7809: PPUSH
// SayRadio ( Platonov , D9-Pla-1 ) ;
7810: LD_EXP 16
7814: PPUSH
7815: LD_STRING D9-Pla-1
7817: PPUSH
7818: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
7822: LD_EXP 14
7826: PPUSH
7827: LD_STRING D9-Bur-1
7829: PPUSH
7830: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
7834: LD_EXP 16
7838: PPUSH
7839: LD_STRING D9-Pla-2
7841: PPUSH
7842: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
7846: LD_EXP 14
7850: PPUSH
7851: LD_STRING D9-Bur-2
7853: PPUSH
7854: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
7858: LD_STRING M2
7860: PPUSH
7861: CALL_OW 337
// end ;
7865: LD_VAR 0 1
7869: RET
// export function Dialogue10 ; begin
7870: LD_INT 0
7872: PPUSH
// Say ( Gaydar , D10-Gay-1 ) ;
7873: LD_EXP 27
7877: PPUSH
7878: LD_STRING D10-Gay-1
7880: PPUSH
7881: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
7885: LD_EXP 14
7889: PPUSH
7890: LD_STRING D10-Bur-1
7892: PPUSH
7893: CALL_OW 88
// Say ( Gaydar , D10-Gay-2 ) ;
7897: LD_EXP 27
7901: PPUSH
7902: LD_STRING D10-Gay-2
7904: PPUSH
7905: CALL_OW 88
// SayRadio ( Popov , D10-Pop-2 ) ;
7909: LD_EXP 26
7913: PPUSH
7914: LD_STRING D10-Pop-2
7916: PPUSH
7917: CALL_OW 94
// Say ( Gaydar , D10-Gay-3 ) ;
7921: LD_EXP 27
7925: PPUSH
7926: LD_STRING D10-Gay-3
7928: PPUSH
7929: CALL_OW 88
// enable ( 5 ) ;
7933: LD_INT 5
7935: ENABLE_MARKED
// end ;
7936: LD_VAR 0 1
7940: RET
// export function Dialogue11a ( someone ) ; begin
7941: LD_INT 0
7943: PPUSH
// if someone <> Burlak then
7944: LD_VAR 0 1
7948: PUSH
7949: LD_EXP 14
7953: NONEQUAL
7954: IFFALSE 7980
// begin Say ( Gaydar , D11-Gay-1 ) ;
7956: LD_EXP 27
7960: PPUSH
7961: LD_STRING D11-Gay-1
7963: PPUSH
7964: CALL_OW 88
// Say ( someone , D11-RSol1-1 ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_STRING D11-RSol1-1
7975: PPUSH
7976: CALL_OW 88
// end ; enable ( 6 ) ;
7980: LD_INT 6
7982: ENABLE_MARKED
// end ;
7983: LD_VAR 0 2
7987: RET
// export function Dialogue11b ; begin
7988: LD_INT 0
7990: PPUSH
// Say ( Gaydar , D11-Gay-2 ) ;
7991: LD_EXP 27
7995: PPUSH
7996: LD_STRING D11-Gay-2
7998: PPUSH
7999: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
8003: LD_EXP 14
8007: PPUSH
8008: LD_STRING D11-Bur-2
8010: PPUSH
8011: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
8015: LD_EXP 27
8019: PPUSH
8020: LD_STRING D11-Gay-3
8022: PPUSH
8023: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
8027: LD_EXP 14
8031: PPUSH
8032: LD_STRING D11-Bur-3
8034: PPUSH
8035: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
8039: LD_EXP 27
8043: PPUSH
8044: LD_STRING D11-Gay-4
8046: PPUSH
8047: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
8051: LD_EXP 14
8055: PPUSH
8056: LD_STRING D11-Bur-4
8058: PPUSH
8059: CALL_OW 88
// Wait ( 0 0$5 ) ;
8063: LD_INT 175
8065: PPUSH
8066: CALL_OW 67
// Dialogue12 ;
8070: CALL 8086 0 0
// Hint ( Dismantle ) ;
8074: LD_STRING Dismantle
8076: PPUSH
8077: CALL_OW 339
// end ;
8081: LD_VAR 0 1
8085: RET
// export function Dialogue12 ; begin
8086: LD_INT 0
8088: PPUSH
// SayRadio ( Popov , D12-Pop-1 ) ;
8089: LD_EXP 26
8093: PPUSH
8094: LD_STRING D12-Pop-1
8096: PPUSH
8097: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
8101: LD_EXP 14
8105: PPUSH
8106: LD_STRING D12-Bur-1
8108: PPUSH
8109: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
8113: LD_EXP 16
8117: PPUSH
8118: LD_STRING D12-Pla-1
8120: PPUSH
8121: CALL_OW 94
// ChangeMissionObjectives ( MFinal ) ;
8125: LD_STRING MFinal
8127: PPUSH
8128: CALL_OW 337
// SetAreaMapShow ( ExitArea , true ) ;
8132: LD_INT 1
8134: PPUSH
8135: LD_INT 1
8137: PPUSH
8138: CALL_OW 424
// disable ( 13 ) ;
8142: LD_INT 13
8144: DISABLE_MARKED
// disable ( 12 ) ;
8145: LD_INT 12
8147: DISABLE_MARKED
// enable ( 19 ) ;
8148: LD_INT 19
8150: ENABLE_MARKED
// konec := true ;
8151: LD_ADDR_EXP 43
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// end ;
8159: LD_VAR 0 1
8163: RET
// on SailEvent ( num ) do Dialogue7 ; end_of_file
8164: CALL 6792 0 0
8168: PPOPN 1
8170: END
// export function prepare_convoy ; var a , i , rand_convoy , rand_vehicle ; begin
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
// Convoy := [ ] ;
8178: LD_ADDR_EXP 32
8182: PUSH
8183: EMPTY
8184: ST_TO_ADDR
// rand_convoy := [ ] ;
8185: LD_ADDR_VAR 0 4
8189: PUSH
8190: EMPTY
8191: ST_TO_ADDR
// for i := 1 to number_of_trucks do
8192: LD_ADDR_VAR 0 3
8196: PUSH
8197: DOUBLE
8198: LD_INT 1
8200: DEC
8201: ST_TO_ADDR
8202: LD_EXP 38
8206: PUSH
8207: FOR_TO
8208: IFFALSE 8444
// begin uc_side := ally ;
8210: LD_ADDR_OWVAR 20
8214: PUSH
8215: LD_EXP 5
8219: ST_TO_ADDR
// uc_nation := nation_russian ;
8220: LD_ADDR_OWVAR 21
8224: PUSH
8225: LD_INT 3
8227: ST_TO_ADDR
// uc_direction := 3 ;
8228: LD_ADDR_OWVAR 24
8232: PUSH
8233: LD_INT 3
8235: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
8236: LD_ADDR_OWVAR 37
8240: PUSH
8241: LD_INT 21
8243: ST_TO_ADDR
// vc_engine := engine_combustion ;
8244: LD_ADDR_OWVAR 39
8248: PUSH
8249: LD_INT 1
8251: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
8252: LD_ADDR_OWVAR 40
8256: PUSH
8257: LD_INT 51
8259: ST_TO_ADDR
// vc_control := control_manual ;
8260: LD_ADDR_OWVAR 38
8264: PUSH
8265: LD_INT 1
8267: ST_TO_ADDR
// hc_name :=  ;
8268: LD_ADDR_OWVAR 26
8272: PUSH
8273: LD_STRING 
8275: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 0 ) ;
8276: LD_INT 1
8278: PPUSH
8279: LD_INT 0
8281: PPUSH
8282: LD_INT 0
8284: PPUSH
8285: CALL_OW 380
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
8289: LD_ADDR_OWVAR 30
8293: PUSH
8294: LD_INT 0
8296: PUSH
8297: LD_INT 0
8299: PUSH
8300: LD_INT 0
8302: PUSH
8303: LD_INT 0
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , 1 , Rand ( 0 , 3 ) ] ;
8312: LD_ADDR_OWVAR 31
8316: PUSH
8317: LD_INT 0
8319: PPUSH
8320: LD_INT 3
8322: PPUSH
8323: CALL_OW 12
8327: PUSH
8328: LD_INT 0
8330: PPUSH
8331: LD_INT 3
8333: PPUSH
8334: CALL_OW 12
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: LD_INT 0
8344: PPUSH
8345: LD_INT 3
8347: PPUSH
8348: CALL_OW 12
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: ST_TO_ADDR
// Convoy := Convoy union CreateVehicle ;
8359: LD_ADDR_EXP 32
8363: PUSH
8364: LD_EXP 32
8368: PUSH
8369: CALL_OW 45
8373: UNION
8374: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , Convoy [ i ] ) ;
8375: CALL_OW 44
8379: PPUSH
8380: LD_EXP 32
8384: PUSH
8385: LD_VAR 0 3
8389: ARRAY
8390: PPUSH
8391: CALL_OW 52
// SetCargo ( Convoy [ i ] , mat_cans , 100 ) ;
8395: LD_EXP 32
8399: PUSH
8400: LD_VAR 0 3
8404: ARRAY
8405: PPUSH
8406: LD_INT 1
8408: PPUSH
8409: LD_INT 100
8411: PPUSH
8412: CALL_OW 290
// SetFuel ( Convoy [ i ] , Rand ( 70 , 95 ) ) ;
8416: LD_EXP 32
8420: PUSH
8421: LD_VAR 0 3
8425: ARRAY
8426: PPUSH
8427: LD_INT 70
8429: PPUSH
8430: LD_INT 95
8432: PPUSH
8433: CALL_OW 12
8437: PPUSH
8438: CALL_OW 240
// end ;
8442: GO 8207
8444: POP
8445: POP
// for i := number_of_trucks + 1 to number_of_trucks + number_of_guns do
8446: LD_ADDR_VAR 0 3
8450: PUSH
8451: DOUBLE
8452: LD_EXP 38
8456: PUSH
8457: LD_INT 1
8459: PLUS
8460: DEC
8461: ST_TO_ADDR
8462: LD_EXP 38
8466: PUSH
8467: LD_EXP 39
8471: PLUS
8472: PUSH
8473: FOR_TO
8474: IFFALSE 8689
// begin uc_side := ally ;
8476: LD_ADDR_OWVAR 20
8480: PUSH
8481: LD_EXP 5
8485: ST_TO_ADDR
// uc_nation := nation_russian ;
8486: LD_ADDR_OWVAR 21
8490: PUSH
8491: LD_INT 3
8493: ST_TO_ADDR
// uc_direction := 3 ;
8494: LD_ADDR_OWVAR 24
8498: PUSH
8499: LD_INT 3
8501: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
8502: LD_ADDR_OWVAR 37
8506: PUSH
8507: LD_INT 21
8509: ST_TO_ADDR
// vc_engine := engine_combustion ;
8510: LD_ADDR_OWVAR 39
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// vc_weapon := ru_gun ;
8518: LD_ADDR_OWVAR 40
8522: PUSH
8523: LD_INT 44
8525: ST_TO_ADDR
// vc_control := control_manual ;
8526: LD_ADDR_OWVAR 38
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// hc_name :=  ;
8534: LD_ADDR_OWVAR 26
8538: PUSH
8539: LD_STRING 
8541: ST_TO_ADDR
// PrepareHuman ( 0 , class_mechanic , 0 ) ;
8542: LD_INT 0
8544: PPUSH
8545: LD_INT 3
8547: PPUSH
8548: LD_INT 0
8550: PPUSH
8551: CALL_OW 380
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
8555: LD_ADDR_OWVAR 30
8559: PUSH
8560: LD_INT 0
8562: PUSH
8563: LD_INT 0
8565: PUSH
8566: LD_INT 0
8568: PUSH
8569: LD_INT 0
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , 1 , Rand ( 0 , 3 ) ] ;
8578: LD_ADDR_OWVAR 31
8582: PUSH
8583: LD_INT 0
8585: PPUSH
8586: LD_INT 3
8588: PPUSH
8589: CALL_OW 12
8593: PUSH
8594: LD_INT 0
8596: PPUSH
8597: LD_INT 3
8599: PPUSH
8600: CALL_OW 12
8604: PUSH
8605: LD_INT 1
8607: PUSH
8608: LD_INT 0
8610: PPUSH
8611: LD_INT 3
8613: PPUSH
8614: CALL_OW 12
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: ST_TO_ADDR
// Convoy := Convoy union CreateVehicle ;
8625: LD_ADDR_EXP 32
8629: PUSH
8630: LD_EXP 32
8634: PUSH
8635: CALL_OW 45
8639: UNION
8640: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , Convoy [ i ] ) ;
8641: CALL_OW 44
8645: PPUSH
8646: LD_EXP 32
8650: PUSH
8651: LD_VAR 0 3
8655: ARRAY
8656: PPUSH
8657: CALL_OW 52
// SetFuel ( Convoy [ i ] , Rand ( 70 , 95 ) ) ;
8661: LD_EXP 32
8665: PUSH
8666: LD_VAR 0 3
8670: ARRAY
8671: PPUSH
8672: LD_INT 70
8674: PPUSH
8675: LD_INT 95
8677: PPUSH
8678: CALL_OW 12
8682: PPUSH
8683: CALL_OW 240
// end ;
8687: GO 8473
8689: POP
8690: POP
// for i := number_of_trucks + number_of_guns + 1 to number_of_trucks + number_of_guns + number_of_gatlings do
8691: LD_ADDR_VAR 0 3
8695: PUSH
8696: DOUBLE
8697: LD_EXP 38
8701: PUSH
8702: LD_EXP 39
8706: PLUS
8707: PUSH
8708: LD_INT 1
8710: PLUS
8711: DEC
8712: ST_TO_ADDR
8713: LD_EXP 38
8717: PUSH
8718: LD_EXP 39
8722: PLUS
8723: PUSH
8724: LD_EXP 41
8728: PLUS
8729: PUSH
8730: FOR_TO
8731: IFFALSE 8946
// begin uc_side := ally ;
8733: LD_ADDR_OWVAR 20
8737: PUSH
8738: LD_EXP 5
8742: ST_TO_ADDR
// uc_nation := nation_russian ;
8743: LD_ADDR_OWVAR 21
8747: PUSH
8748: LD_INT 3
8750: ST_TO_ADDR
// uc_direction := 3 ;
8751: LD_ADDR_OWVAR 24
8755: PUSH
8756: LD_INT 3
8758: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
8759: LD_ADDR_OWVAR 37
8763: PUSH
8764: LD_INT 21
8766: ST_TO_ADDR
// vc_engine := engine_combustion ;
8767: LD_ADDR_OWVAR 39
8771: PUSH
8772: LD_INT 1
8774: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
8775: LD_ADDR_OWVAR 40
8779: PUSH
8780: LD_INT 43
8782: ST_TO_ADDR
// vc_control := control_manual ;
8783: LD_ADDR_OWVAR 38
8787: PUSH
8788: LD_INT 1
8790: ST_TO_ADDR
// hc_name :=  ;
8791: LD_ADDR_OWVAR 26
8795: PUSH
8796: LD_STRING 
8798: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 0 ) ;
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 0
8804: PPUSH
8805: LD_INT 0
8807: PPUSH
8808: CALL_OW 380
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
8812: LD_ADDR_OWVAR 30
8816: PUSH
8817: LD_INT 0
8819: PUSH
8820: LD_INT 0
8822: PUSH
8823: LD_INT 0
8825: PUSH
8826: LD_INT 0
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , 1 , Rand ( 0 , 3 ) ] ;
8835: LD_ADDR_OWVAR 31
8839: PUSH
8840: LD_INT 0
8842: PPUSH
8843: LD_INT 3
8845: PPUSH
8846: CALL_OW 12
8850: PUSH
8851: LD_INT 0
8853: PPUSH
8854: LD_INT 3
8856: PPUSH
8857: CALL_OW 12
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: LD_INT 0
8867: PPUSH
8868: LD_INT 3
8870: PPUSH
8871: CALL_OW 12
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: ST_TO_ADDR
// Convoy := Convoy union CreateVehicle ;
8882: LD_ADDR_EXP 32
8886: PUSH
8887: LD_EXP 32
8891: PUSH
8892: CALL_OW 45
8896: UNION
8897: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , Convoy [ i ] ) ;
8898: CALL_OW 44
8902: PPUSH
8903: LD_EXP 32
8907: PUSH
8908: LD_VAR 0 3
8912: ARRAY
8913: PPUSH
8914: CALL_OW 52
// SetFuel ( Convoy [ i ] , Rand ( 70 , 95 ) ) ;
8918: LD_EXP 32
8922: PUSH
8923: LD_VAR 0 3
8927: ARRAY
8928: PPUSH
8929: LD_INT 70
8931: PPUSH
8932: LD_INT 95
8934: PPUSH
8935: CALL_OW 12
8939: PPUSH
8940: CALL_OW 240
// end ;
8944: GO 8730
8946: POP
8947: POP
// for i := number_of_trucks + number_of_guns + number_of_gatlings + 1 to number_of_trucks + number_of_guns + number_of_gatlings + number_of_hv_guns do
8948: LD_ADDR_VAR 0 3
8952: PUSH
8953: DOUBLE
8954: LD_EXP 38
8958: PUSH
8959: LD_EXP 39
8963: PLUS
8964: PUSH
8965: LD_EXP 41
8969: PLUS
8970: PUSH
8971: LD_INT 1
8973: PLUS
8974: DEC
8975: ST_TO_ADDR
8976: LD_EXP 38
8980: PUSH
8981: LD_EXP 39
8985: PLUS
8986: PUSH
8987: LD_EXP 41
8991: PLUS
8992: PUSH
8993: LD_EXP 40
8997: PLUS
8998: PUSH
8999: FOR_TO
9000: IFFALSE 9241
// begin uc_side := ally ;
9002: LD_ADDR_OWVAR 20
9006: PUSH
9007: LD_EXP 5
9011: ST_TO_ADDR
// uc_nation := nation_russian ;
9012: LD_ADDR_OWVAR 21
9016: PUSH
9017: LD_INT 3
9019: ST_TO_ADDR
// uc_direction := 3 ;
9020: LD_ADDR_OWVAR 24
9024: PUSH
9025: LD_INT 3
9027: ST_TO_ADDR
// vc_chassis := ru_heavy_wheeled ;
9028: LD_ADDR_OWVAR 37
9032: PUSH
9033: LD_INT 23
9035: ST_TO_ADDR
// vc_engine := engine_combustion ;
9036: LD_ADDR_OWVAR 39
9040: PUSH
9041: LD_INT 1
9043: ST_TO_ADDR
// vc_weapon := ru_heavy_gun ;
9044: LD_ADDR_OWVAR 40
9048: PUSH
9049: LD_INT 46
9051: ST_TO_ADDR
// vc_control := control_manual ;
9052: LD_ADDR_OWVAR 38
9056: PUSH
9057: LD_INT 1
9059: ST_TO_ADDR
// hc_name :=  ;
9060: LD_ADDR_OWVAR 26
9064: PUSH
9065: LD_STRING 
9067: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 0 ) ;
9068: LD_INT 1
9070: PPUSH
9071: LD_INT 0
9073: PPUSH
9074: LD_INT 0
9076: PPUSH
9077: CALL_OW 380
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
9081: LD_ADDR_OWVAR 30
9085: PUSH
9086: LD_INT 0
9088: PUSH
9089: LD_INT 0
9091: PUSH
9092: LD_INT 0
9094: PUSH
9095: LD_INT 0
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , 1 , Rand ( 0 , 3 ) ] ;
9104: LD_ADDR_OWVAR 31
9108: PUSH
9109: LD_INT 0
9111: PPUSH
9112: LD_INT 3
9114: PPUSH
9115: CALL_OW 12
9119: PUSH
9120: LD_INT 0
9122: PPUSH
9123: LD_INT 3
9125: PPUSH
9126: CALL_OW 12
9130: PUSH
9131: LD_INT 1
9133: PUSH
9134: LD_INT 0
9136: PPUSH
9137: LD_INT 3
9139: PPUSH
9140: CALL_OW 12
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: ST_TO_ADDR
// Convoy := Convoy union CreateVehicle ;
9151: LD_ADDR_EXP 32
9155: PUSH
9156: LD_EXP 32
9160: PUSH
9161: CALL_OW 45
9165: UNION
9166: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , Convoy [ i ] ) ;
9167: CALL_OW 44
9171: PPUSH
9172: LD_EXP 32
9176: PUSH
9177: LD_VAR 0 3
9181: ARRAY
9182: PPUSH
9183: CALL_OW 52
// SetFuel ( Convoy [ i ] , Rand ( 70 , 95 ) ) ;
9187: LD_EXP 32
9191: PUSH
9192: LD_VAR 0 3
9196: ARRAY
9197: PPUSH
9198: LD_INT 70
9200: PPUSH
9201: LD_INT 95
9203: PPUSH
9204: CALL_OW 12
9208: PPUSH
9209: CALL_OW 240
// SetLives ( Convoy [ i ] , Rand ( 500 , 1000 ) ) ;
9213: LD_EXP 32
9217: PUSH
9218: LD_VAR 0 3
9222: ARRAY
9223: PPUSH
9224: LD_INT 500
9226: PPUSH
9227: LD_INT 1000
9229: PPUSH
9230: CALL_OW 12
9234: PPUSH
9235: CALL_OW 234
// end ;
9239: GO 8999
9241: POP
9242: POP
// for i := number_of_trucks + number_of_guns + number_of_gatlings + number_of_hv_guns + 1 to number_of_trucks + number_of_guns + number_of_gatlings + number_of_hv_guns + number_of_hv_mchn_gun do
9243: LD_ADDR_VAR 0 3
9247: PUSH
9248: DOUBLE
9249: LD_EXP 38
9253: PUSH
9254: LD_EXP 39
9258: PLUS
9259: PUSH
9260: LD_EXP 41
9264: PLUS
9265: PUSH
9266: LD_EXP 40
9270: PLUS
9271: PUSH
9272: LD_INT 1
9274: PLUS
9275: DEC
9276: ST_TO_ADDR
9277: LD_EXP 38
9281: PUSH
9282: LD_EXP 39
9286: PLUS
9287: PUSH
9288: LD_EXP 41
9292: PLUS
9293: PUSH
9294: LD_EXP 40
9298: PLUS
9299: PUSH
9300: LD_EXP 42
9304: PLUS
9305: PUSH
9306: FOR_TO
9307: IFFALSE 9548
// begin uc_side := ally ;
9309: LD_ADDR_OWVAR 20
9313: PUSH
9314: LD_EXP 5
9318: ST_TO_ADDR
// uc_nation := nation_russian ;
9319: LD_ADDR_OWVAR 21
9323: PUSH
9324: LD_INT 3
9326: ST_TO_ADDR
// uc_direction := 3 ;
9327: LD_ADDR_OWVAR 24
9331: PUSH
9332: LD_INT 3
9334: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
9335: LD_ADDR_OWVAR 37
9339: PUSH
9340: LD_INT 21
9342: ST_TO_ADDR
// vc_engine := engine_combustion ;
9343: LD_ADDR_OWVAR 39
9347: PUSH
9348: LD_INT 1
9350: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
9351: LD_ADDR_OWVAR 40
9355: PUSH
9356: LD_INT 42
9358: ST_TO_ADDR
// vc_control := control_manual ;
9359: LD_ADDR_OWVAR 38
9363: PUSH
9364: LD_INT 1
9366: ST_TO_ADDR
// hc_name :=  ;
9367: LD_ADDR_OWVAR 26
9371: PUSH
9372: LD_STRING 
9374: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 0 ) ;
9375: LD_INT 1
9377: PPUSH
9378: LD_INT 0
9380: PPUSH
9381: LD_INT 0
9383: PPUSH
9384: CALL_OW 380
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
9388: LD_ADDR_OWVAR 30
9392: PUSH
9393: LD_INT 0
9395: PUSH
9396: LD_INT 0
9398: PUSH
9399: LD_INT 0
9401: PUSH
9402: LD_INT 0
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , 1 , Rand ( 0 , 3 ) ] ;
9411: LD_ADDR_OWVAR 31
9415: PUSH
9416: LD_INT 0
9418: PPUSH
9419: LD_INT 3
9421: PPUSH
9422: CALL_OW 12
9426: PUSH
9427: LD_INT 0
9429: PPUSH
9430: LD_INT 3
9432: PPUSH
9433: CALL_OW 12
9437: PUSH
9438: LD_INT 1
9440: PUSH
9441: LD_INT 0
9443: PPUSH
9444: LD_INT 3
9446: PPUSH
9447: CALL_OW 12
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: ST_TO_ADDR
// Convoy := Convoy union CreateVehicle ;
9458: LD_ADDR_EXP 32
9462: PUSH
9463: LD_EXP 32
9467: PUSH
9468: CALL_OW 45
9472: UNION
9473: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , Convoy [ i ] ) ;
9474: CALL_OW 44
9478: PPUSH
9479: LD_EXP 32
9483: PUSH
9484: LD_VAR 0 3
9488: ARRAY
9489: PPUSH
9490: CALL_OW 52
// SetFuel ( Convoy [ i ] , Rand ( 70 , 95 ) ) ;
9494: LD_EXP 32
9498: PUSH
9499: LD_VAR 0 3
9503: ARRAY
9504: PPUSH
9505: LD_INT 70
9507: PPUSH
9508: LD_INT 95
9510: PPUSH
9511: CALL_OW 12
9515: PPUSH
9516: CALL_OW 240
// SetLives ( Convoy [ i ] , Rand ( 500 , 1000 ) ) ;
9520: LD_EXP 32
9524: PUSH
9525: LD_VAR 0 3
9529: ARRAY
9530: PPUSH
9531: LD_INT 500
9533: PPUSH
9534: LD_INT 1000
9536: PPUSH
9537: CALL_OW 12
9541: PPUSH
9542: CALL_OW 234
// end ;
9546: GO 9306
9548: POP
9549: POP
// rand_convoy := rand_convoy union Convoy [ 1 ] ;
9550: LD_ADDR_VAR 0 4
9554: PUSH
9555: LD_VAR 0 4
9559: PUSH
9560: LD_EXP 32
9564: PUSH
9565: LD_INT 1
9567: ARRAY
9568: UNION
9569: ST_TO_ADDR
// Convoy := Convoy diff Convoy [ 1 ] ;
9570: LD_ADDR_EXP 32
9574: PUSH
9575: LD_EXP 32
9579: PUSH
9580: LD_EXP 32
9584: PUSH
9585: LD_INT 1
9587: ARRAY
9588: DIFF
9589: ST_TO_ADDR
// Convoy_length := 0 + Convoy ;
9590: LD_ADDR_EXP 33
9594: PUSH
9595: LD_INT 0
9597: PUSH
9598: LD_EXP 32
9602: PLUS
9603: ST_TO_ADDR
// for i := 1 to Convoy_length do
9604: LD_ADDR_VAR 0 3
9608: PUSH
9609: DOUBLE
9610: LD_INT 1
9612: DEC
9613: ST_TO_ADDR
9614: LD_EXP 33
9618: PUSH
9619: FOR_TO
9620: IFFALSE 9690
// begin rand_vehicle := Rand ( 1 , 0 + Convoy ) ;
9622: LD_ADDR_VAR 0 5
9626: PUSH
9627: LD_INT 1
9629: PPUSH
9630: LD_INT 0
9632: PUSH
9633: LD_EXP 32
9637: PLUS
9638: PPUSH
9639: CALL_OW 12
9643: ST_TO_ADDR
// rand_convoy := rand_convoy union Convoy [ rand_vehicle ] ;
9644: LD_ADDR_VAR 0 4
9648: PUSH
9649: LD_VAR 0 4
9653: PUSH
9654: LD_EXP 32
9658: PUSH
9659: LD_VAR 0 5
9663: ARRAY
9664: UNION
9665: ST_TO_ADDR
// Convoy := Convoy diff Convoy [ rand_vehicle ] ;
9666: LD_ADDR_EXP 32
9670: PUSH
9671: LD_EXP 32
9675: PUSH
9676: LD_EXP 32
9680: PUSH
9681: LD_VAR 0 5
9685: ARRAY
9686: DIFF
9687: ST_TO_ADDR
// end ;
9688: GO 9619
9690: POP
9691: POP
// Convoy := rand_convoy ;
9692: LD_ADDR_EXP 32
9696: PUSH
9697: LD_VAR 0 4
9701: ST_TO_ADDR
// for i := 0 + Convoy downto 1 do
9702: LD_ADDR_VAR 0 3
9706: PUSH
9707: DOUBLE
9708: LD_INT 0
9710: PUSH
9711: LD_EXP 32
9715: PLUS
9716: INC
9717: ST_TO_ADDR
9718: LD_INT 1
9720: PUSH
9721: FOR_DOWNTO
9722: IFFALSE 9763
// if GetWeapon ( Convoy [ i ] ) = ru_cargo_bay then
9724: LD_EXP 32
9728: PUSH
9729: LD_VAR 0 3
9733: ARRAY
9734: PPUSH
9735: CALL_OW 264
9739: PUSH
9740: LD_INT 51
9742: EQUAL
9743: IFFALSE 9761
// FirstCargo := Convoy [ i ] ;
9745: LD_ADDR_EXP 35
9749: PUSH
9750: LD_EXP 32
9754: PUSH
9755: LD_VAR 0 3
9759: ARRAY
9760: ST_TO_ADDR
9761: GO 9721
9763: POP
9764: POP
// end ;
9765: LD_VAR 0 1
9769: RET
// var field_pocet , field_mezera , field_delay ; every 0 0$1 marked 2 do var g , h , delka ;
9770: GO 9772
9772: DISABLE
9773: LD_INT 0
9775: PPUSH
9776: PPUSH
9777: PPUSH
// begin enable ( 7 ) ;
9778: LD_INT 7
9780: ENABLE_MARKED
// enable ( 18 ) ;
9781: LD_INT 18
9783: ENABLE_MARKED
// delka := number_of_trucks + number_of_guns + number_of_gatlings + number_of_hv_guns + number_of_hv_mchn_gun ;
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_EXP 38
9793: PUSH
9794: LD_EXP 39
9798: PLUS
9799: PUSH
9800: LD_EXP 41
9804: PLUS
9805: PUSH
9806: LD_EXP 40
9810: PLUS
9811: PUSH
9812: LD_EXP 42
9816: PLUS
9817: ST_TO_ADDR
// field_pocet := [ ] ;
9818: LD_ADDR_LOC 5
9822: PUSH
9823: EMPTY
9824: ST_TO_ADDR
// field_mezera := [ ] ;
9825: LD_ADDR_LOC 6
9829: PUSH
9830: EMPTY
9831: ST_TO_ADDR
// field_delay := [ ] ;
9832: LD_ADDR_LOC 7
9836: PUSH
9837: EMPTY
9838: ST_TO_ADDR
// repeat h := Rand ( 3 , 6 ) ;
9839: LD_ADDR_VAR 0 2
9843: PUSH
9844: LD_INT 3
9846: PPUSH
9847: LD_INT 6
9849: PPUSH
9850: CALL_OW 12
9854: ST_TO_ADDR
// delka := delka - h ;
9855: LD_ADDR_VAR 0 3
9859: PUSH
9860: LD_VAR 0 3
9864: PUSH
9865: LD_VAR 0 2
9869: MINUS
9870: ST_TO_ADDR
// if delka > 0 then
9871: LD_VAR 0 3
9875: PUSH
9876: LD_INT 0
9878: GREATER
9879: IFFALSE 9899
// field_pocet := field_pocet ^ h else
9881: LD_ADDR_LOC 5
9885: PUSH
9886: LD_LOC 5
9890: PUSH
9891: LD_VAR 0 2
9895: ADD
9896: ST_TO_ADDR
9897: GO 9921
// field_pocet := field_pocet ^ ( delka + h ) ;
9899: LD_ADDR_LOC 5
9903: PUSH
9904: LD_LOC 5
9908: PUSH
9909: LD_VAR 0 3
9913: PUSH
9914: LD_VAR 0 2
9918: PLUS
9919: ADD
9920: ST_TO_ADDR
// until delka <= 0 ;
9921: LD_VAR 0 3
9925: PUSH
9926: LD_INT 0
9928: LESSEQUAL
9929: IFFALSE 9839
// for g := 1 to field_pocet do
9931: LD_ADDR_VAR 0 1
9935: PUSH
9936: DOUBLE
9937: LD_INT 1
9939: DEC
9940: ST_TO_ADDR
9941: LD_LOC 5
9945: PUSH
9946: FOR_TO
9947: IFFALSE 9983
// begin h := Rand ( 13 , 15 ) ;
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: LD_INT 13
9956: PPUSH
9957: LD_INT 15
9959: PPUSH
9960: CALL_OW 12
9964: ST_TO_ADDR
// field_mezera := field_mezera ^ h ;
9965: LD_ADDR_LOC 6
9969: PUSH
9970: LD_LOC 6
9974: PUSH
9975: LD_VAR 0 2
9979: ADD
9980: ST_TO_ADDR
// end ;
9981: GO 9946
9983: POP
9984: POP
// for g := 1 to field_pocet do
9985: LD_ADDR_VAR 0 1
9989: PUSH
9990: DOUBLE
9991: LD_INT 1
9993: DEC
9994: ST_TO_ADDR
9995: LD_LOC 5
9999: PUSH
10000: FOR_TO
10001: IFFALSE 10049
// begin h := Rand ( convoy_delay [ 1 ] , convoy_delay [ 2 ] ) ;
10003: LD_ADDR_VAR 0 2
10007: PUSH
10008: LD_EXP 34
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: LD_EXP 34
10021: PUSH
10022: LD_INT 2
10024: ARRAY
10025: PPUSH
10026: CALL_OW 12
10030: ST_TO_ADDR
// field_delay := field_delay ^ h ;
10031: LD_ADDR_LOC 7
10035: PUSH
10036: LD_LOC 7
10040: PUSH
10041: LD_VAR 0 2
10045: ADD
10046: ST_TO_ADDR
// end ;
10047: GO 10000
10049: POP
10050: POP
// for g := 1 to field_pocet do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_INT 1
10059: DEC
10060: ST_TO_ADDR
10061: LD_LOC 5
10065: PUSH
10066: FOR_TO
10067: IFFALSE 10165
// begin make_convoy ( field_pocet [ g ] , field_mezera [ g ] , field_delay [ g ] ) ;
10069: LD_LOC 5
10073: PUSH
10074: LD_VAR 0 1
10078: ARRAY
10079: PPUSH
10080: LD_LOC 6
10084: PUSH
10085: LD_VAR 0 1
10089: ARRAY
10090: PPUSH
10091: LD_LOC 7
10095: PUSH
10096: LD_VAR 0 1
10100: ARRAY
10101: PPUSH
10102: CALL 10207 0 3
// if g = 0 + field_pocet then
10106: LD_VAR 0 1
10110: PUSH
10111: LD_INT 0
10113: PUSH
10114: LD_LOC 5
10118: PLUS
10119: EQUAL
10120: IFFALSE 10163
// begin Wait ( 1 1$30 ) ;
10122: LD_INT 3150
10124: PPUSH
10125: CALL_OW 67
// disable ( 4 ) ;
10129: LD_INT 4
10131: DISABLE_MARKED
// Disabled4 := true ;
10132: LD_ADDR_EXP 66
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// Wait ( 0 0$1 ) ;
10140: LD_INT 35
10142: PPUSH
10143: CALL_OW 67
// Dialogue4 ;
10147: CALL 6108 0 0
// Wait ( attack_offset ) ;
10151: LD_EXP 48
10155: PPUSH
10156: CALL_OW 67
// enable ( 11 ) ;
10160: LD_INT 11
10162: ENABLE_MARKED
// end ; end ;
10163: GO 10066
10165: POP
10166: POP
// end ;
10167: PPOPN 3
10169: END
// every 0 0$1 + 0 0$0.1 marked 7 do
10170: GO 10172
10172: DISABLE
// begin enable ;
10173: ENABLE
// if IsInArea ( FirstCargo , KnollArea ) then
10174: LD_EXP 35
10178: PPUSH
10179: LD_INT 2
10181: PPUSH
10182: CALL_OW 308
10186: IFFALSE 10206
// begin disable ( 7 ) ;
10188: LD_INT 7
10190: DISABLE_MARKED
// Dialogue2a ;
10191: CALL 5578 0 0
// Wait ( 2 2$20 ) ;
10195: LD_INT 4900
10197: PPUSH
10198: CALL_OW 67
// Dialogue2b ;
10202: CALL 5603 0 0
// end ; end ;
10206: END
// export function make_convoy ( trucks , delay , after_delay ) ; var k , cargowaypoints1 , cargowaypoints2 , waypoints , points ; begin
10207: LD_INT 0
10209: PPUSH
10210: PPUSH
10211: PPUSH
10212: PPUSH
10213: PPUSH
10214: PPUSH
// delay := delay * 35 ;
10215: LD_ADDR_VAR 0 2
10219: PUSH
10220: LD_VAR 0 2
10224: PUSH
10225: LD_INT 35
10227: MUL
10228: ST_TO_ADDR
// for k := 1 to trucks do
10229: LD_ADDR_VAR 0 5
10233: PUSH
10234: DOUBLE
10235: LD_INT 1
10237: DEC
10238: ST_TO_ADDR
10239: LD_VAR 0 1
10243: PUSH
10244: FOR_TO
10245: IFFALSE 11269
// begin pocet := pocet + 1 ;
10247: LD_ADDR_EXP 46
10251: PUSH
10252: LD_EXP 46
10256: PUSH
10257: LD_INT 1
10259: PLUS
10260: ST_TO_ADDR
// waypoints := [ [ 102 , 4 ] , [ 98 , 6 ] , [ 95 , 8 ] , [ 92 , 11 ] , [ 90 , 14 ] , [ 87 , 17 ] , [ 82 , 19 ] , [ 80 , 23 ] , [ 77 , 25 ] , [ 74 , 27 ] , [ 70 , 29 ] , [ 67 , 31 ] , [ 63 , 33 ] , [ 59 , 35 ] , [ 56 , 37 ] , [ 53 , 39 ] , [ 51 , 41 ] , [ 50 , 45 ] , [ 50 , 49 ] , [ 51 , 55 ] , [ 52 , 60 ] , [ 56 , 66 ] , [ 59 , 71 ] , [ 62 , 77 ] , [ 65 , 83 ] , [ 68 , 89 ] , [ 70 , 94 ] , [ 72 , 100 ] , [ 73 , 105 ] , [ 73 , 111 ] , [ 71 , 115 ] , [ 71 , 122 ] , [ 72 , 129 ] , [ 72 , 134 ] , [ 72 , 137 ] ] ;
10261: LD_ADDR_VAR 0 8
10265: PUSH
10266: LD_INT 102
10268: PUSH
10269: LD_INT 4
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 98
10278: PUSH
10279: LD_INT 6
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 95
10288: PUSH
10289: LD_INT 8
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 92
10298: PUSH
10299: LD_INT 11
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 90
10308: PUSH
10309: LD_INT 14
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 87
10318: PUSH
10319: LD_INT 17
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 82
10328: PUSH
10329: LD_INT 19
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 80
10338: PUSH
10339: LD_INT 23
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 77
10348: PUSH
10349: LD_INT 25
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 74
10358: PUSH
10359: LD_INT 27
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 70
10368: PUSH
10369: LD_INT 29
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 67
10378: PUSH
10379: LD_INT 31
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 63
10388: PUSH
10389: LD_INT 33
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 59
10398: PUSH
10399: LD_INT 35
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 56
10408: PUSH
10409: LD_INT 37
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 53
10418: PUSH
10419: LD_INT 39
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 51
10428: PUSH
10429: LD_INT 41
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 50
10438: PUSH
10439: LD_INT 45
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 50
10448: PUSH
10449: LD_INT 49
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 51
10458: PUSH
10459: LD_INT 55
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 52
10468: PUSH
10469: LD_INT 60
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 56
10478: PUSH
10479: LD_INT 66
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 59
10488: PUSH
10489: LD_INT 71
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 62
10498: PUSH
10499: LD_INT 77
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 65
10508: PUSH
10509: LD_INT 83
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: LD_INT 68
10518: PUSH
10519: LD_INT 89
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 70
10528: PUSH
10529: LD_INT 94
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 72
10538: PUSH
10539: LD_INT 100
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 73
10548: PUSH
10549: LD_INT 105
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 73
10558: PUSH
10559: LD_INT 111
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 71
10568: PUSH
10569: LD_INT 115
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 71
10578: PUSH
10579: LD_INT 122
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 72
10588: PUSH
10589: LD_INT 129
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 72
10598: PUSH
10599: LD_INT 134
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 72
10608: PUSH
10609: LD_INT 137
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: ST_TO_ADDR
// cargowaypoints1 := [ [ 102 , 4 ] , [ 98 , 6 ] , [ 95 , 8 ] , [ 92 , 11 ] , [ 90 , 14 ] , [ 87 , 17 ] , [ 82 , 19 ] , [ 80 , 23 ] , [ 77 , 25 ] , [ 74 , 27 ] , [ 70 , 29 ] , [ 67 , 31 ] , [ 63 , 33 ] , [ 59 , 35 ] , [ 56 , 37 ] , [ 53 , 39 ] , [ 51 , 41 ] , [ 50 , 45 ] , [ 50 , 49 ] , [ 51 , 55 ] , [ 52 , 60 ] , [ 56 , 66 ] , [ 59 , 71 ] , [ 62 , 77 ] , [ 88 , 85 ] ] ;
10653: LD_ADDR_VAR 0 6
10657: PUSH
10658: LD_INT 102
10660: PUSH
10661: LD_INT 4
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 98
10670: PUSH
10671: LD_INT 6
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 95
10680: PUSH
10681: LD_INT 8
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 92
10690: PUSH
10691: LD_INT 11
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 90
10700: PUSH
10701: LD_INT 14
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 87
10710: PUSH
10711: LD_INT 17
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 82
10720: PUSH
10721: LD_INT 19
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 80
10730: PUSH
10731: LD_INT 23
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 77
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 74
10750: PUSH
10751: LD_INT 27
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 70
10760: PUSH
10761: LD_INT 29
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 67
10770: PUSH
10771: LD_INT 31
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 63
10780: PUSH
10781: LD_INT 33
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 59
10790: PUSH
10791: LD_INT 35
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 56
10800: PUSH
10801: LD_INT 37
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 53
10810: PUSH
10811: LD_INT 39
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 51
10820: PUSH
10821: LD_INT 41
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: LD_INT 50
10830: PUSH
10831: LD_INT 45
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 50
10840: PUSH
10841: LD_INT 49
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 51
10850: PUSH
10851: LD_INT 55
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 52
10860: PUSH
10861: LD_INT 60
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 56
10870: PUSH
10871: LD_INT 66
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 59
10880: PUSH
10881: LD_INT 71
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 62
10890: PUSH
10891: LD_INT 77
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 88
10900: PUSH
10901: LD_INT 85
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: ST_TO_ADDR
// cargowaypoints2 := [ [ 68 , 89 ] , [ 70 , 94 ] , [ 72 , 100 ] , [ 73 , 105 ] , [ 73 , 111 ] , [ 71 , 115 ] , [ 71 , 122 ] , [ 72 , 129 ] , [ 72 , 134 ] , [ 72 , 137 ] ] ;
10935: LD_ADDR_VAR 0 7
10939: PUSH
10940: LD_INT 68
10942: PUSH
10943: LD_INT 89
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 70
10952: PUSH
10953: LD_INT 94
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 72
10962: PUSH
10963: LD_INT 100
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 73
10972: PUSH
10973: LD_INT 105
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 73
10982: PUSH
10983: LD_INT 111
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 71
10992: PUSH
10993: LD_INT 115
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 71
11002: PUSH
11003: LD_INT 122
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 72
11012: PUSH
11013: LD_INT 129
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 72
11022: PUSH
11023: LD_INT 134
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 72
11032: PUSH
11033: LD_INT 137
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: ST_TO_ADDR
// PlaceUnitXY ( Convoy [ pocet ] , 103 , 2 , false ) ;
11052: LD_EXP 32
11056: PUSH
11057: LD_EXP 46
11061: ARRAY
11062: PPUSH
11063: LD_INT 103
11065: PPUSH
11066: LD_INT 2
11068: PPUSH
11069: LD_INT 0
11071: PPUSH
11072: CALL_OW 48
// if Convoy [ pocet ] = FirstCargo then
11076: LD_EXP 32
11080: PUSH
11081: LD_EXP 46
11085: ARRAY
11086: PUSH
11087: LD_EXP 35
11091: EQUAL
11092: IFFALSE 11208
// begin for points in cargowaypoints1 do
11094: LD_ADDR_VAR 0 9
11098: PUSH
11099: LD_VAR 0 6
11103: PUSH
11104: FOR_IN
11105: IFFALSE 11142
// AddComMoveXY ( Convoy [ pocet ] , points [ 1 ] , points [ 2 ] ) ;
11107: LD_EXP 32
11111: PUSH
11112: LD_EXP 46
11116: ARRAY
11117: PPUSH
11118: LD_VAR 0 9
11122: PUSH
11123: LD_INT 1
11125: ARRAY
11126: PPUSH
11127: LD_VAR 0 9
11131: PUSH
11132: LD_INT 2
11134: ARRAY
11135: PPUSH
11136: CALL_OW 171
11140: GO 11104
11142: POP
11143: POP
// AddComUnload ( FirstCargo ) ;
11144: LD_EXP 35
11148: PPUSH
11149: CALL_OW 219
// for points in cargowaypoints2 do
11153: LD_ADDR_VAR 0 9
11157: PUSH
11158: LD_VAR 0 7
11162: PUSH
11163: FOR_IN
11164: IFFALSE 11201
// AddComMoveXY ( Convoy [ pocet ] , points [ 1 ] , points [ 2 ] ) ;
11166: LD_EXP 32
11170: PUSH
11171: LD_EXP 46
11175: ARRAY
11176: PPUSH
11177: LD_VAR 0 9
11181: PUSH
11182: LD_INT 1
11184: ARRAY
11185: PPUSH
11186: LD_VAR 0 9
11190: PUSH
11191: LD_INT 2
11193: ARRAY
11194: PPUSH
11195: CALL_OW 171
11199: GO 11163
11201: POP
11202: POP
// enable ( 7 ) ;
11203: LD_INT 7
11205: ENABLE_MARKED
// end else
11206: GO 11258
// for points in waypoints do
11208: LD_ADDR_VAR 0 9
11212: PUSH
11213: LD_VAR 0 8
11217: PUSH
11218: FOR_IN
11219: IFFALSE 11256
// AddComMoveXY ( Convoy [ pocet ] , points [ 1 ] , points [ 2 ] ) ;
11221: LD_EXP 32
11225: PUSH
11226: LD_EXP 46
11230: ARRAY
11231: PPUSH
11232: LD_VAR 0 9
11236: PUSH
11237: LD_INT 1
11239: ARRAY
11240: PPUSH
11241: LD_VAR 0 9
11245: PUSH
11246: LD_INT 2
11248: ARRAY
11249: PPUSH
11250: CALL_OW 171
11254: GO 11218
11256: POP
11257: POP
// Wait ( delay ) ;
11258: LD_VAR 0 2
11262: PPUSH
11263: CALL_OW 67
// end ;
11267: GO 10244
11269: POP
11270: POP
// after_delay := after_delay * 35 ;
11271: LD_ADDR_VAR 0 3
11275: PUSH
11276: LD_VAR 0 3
11280: PUSH
11281: LD_INT 35
11283: MUL
11284: ST_TO_ADDR
// Wait ( after_delay ) ;
11285: LD_VAR 0 3
11289: PPUSH
11290: CALL_OW 67
// end ;
11294: LD_VAR 0 4
11298: RET
// every 0 0$1 marked 4 do var un , car , cargos ;
11299: GO 11301
11301: DISABLE
11302: LD_INT 0
11304: PPUSH
11305: PPUSH
11306: PPUSH
// begin cargos := FilterAllUnits ( [ [ f_weapon , ru_cargo_bay ] , [ f_side , ally ] ] ) ;
11307: LD_ADDR_VAR 0 3
11311: PUSH
11312: LD_INT 34
11314: PUSH
11315: LD_INT 51
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 22
11324: PUSH
11325: LD_EXP 5
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: ST_TO_ADDR
// for car in cargos do
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_VAR 0 3
11352: PUSH
11353: FOR_IN
11354: IFFALSE 11944
// begin Wait ( 1 ) ;
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 67
// if ( GetDistUnits ( car , NearestUnitToUnit ( player_units , car ) ) <= 5 ) and not ( car in trucks_diverted_list ) then
11363: LD_VAR 0 2
11367: PPUSH
11368: LD_EXP 30
11372: PPUSH
11373: LD_VAR 0 2
11377: PPUSH
11378: CALL_OW 74
11382: PPUSH
11383: CALL_OW 296
11387: PUSH
11388: LD_INT 5
11390: LESSEQUAL
11391: PUSH
11392: LD_VAR 0 2
11396: PUSH
11397: LD_EXP 37
11401: IN
11402: NOT
11403: AND
11404: IFFALSE 11942
// begin trucks_diverted_list := trucks_diverted_list union car ;
11406: LD_ADDR_EXP 37
11410: PUSH
11411: LD_EXP 37
11415: PUSH
11416: LD_VAR 0 2
11420: UNION
11421: ST_TO_ADDR
// if Query ( QQrSteal ) = 1 then
11422: LD_STRING QQrSteal
11424: PPUSH
11425: CALL_OW 97
11429: PUSH
11430: LD_INT 1
11432: EQUAL
11433: IFFALSE 11930
// begin trucks_diverted_count := trucks_diverted_count + 1 ;
11435: LD_ADDR_EXP 36
11439: PUSH
11440: LD_EXP 36
11444: PUSH
11445: LD_INT 1
11447: PLUS
11448: ST_TO_ADDR
// DialogueOn ;
11449: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
11453: LD_EXP 14
11457: PPUSH
11458: LD_STRING DQrSteal#1-Bur-1
11460: PPUSH
11461: CALL_OW 88
// DialogueOff ;
11465: CALL_OW 7
// ComMoveToArea ( car , CansArea ) ;
11469: LD_VAR 0 2
11473: PPUSH
11474: LD_INT 3
11476: PPUSH
11477: CALL_OW 113
// Wait ( 1 ) ;
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 67
// AddComUnload ( car ) ;
11488: LD_VAR 0 2
11492: PPUSH
11493: CALL_OW 219
// Wait ( 1 ) ;
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 67
// AddComMoveXY ( car , 73 , 111 ) ;
11504: LD_VAR 0 2
11508: PPUSH
11509: LD_INT 73
11511: PPUSH
11512: LD_INT 111
11514: PPUSH
11515: CALL_OW 171
// Wait ( 1 ) ;
11519: LD_INT 1
11521: PPUSH
11522: CALL_OW 67
// AddComMoveXY ( car , 71 , 115 ) ;
11526: LD_VAR 0 2
11530: PPUSH
11531: LD_INT 71
11533: PPUSH
11534: LD_INT 115
11536: PPUSH
11537: CALL_OW 171
// Wait ( 1 ) ;
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 67
// AddComMoveXY ( car , 71 , 122 ) ;
11548: LD_VAR 0 2
11552: PPUSH
11553: LD_INT 71
11555: PPUSH
11556: LD_INT 122
11558: PPUSH
11559: CALL_OW 171
// Wait ( 1 ) ;
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 67
// AddComMoveXY ( car , 72 , 129 ) ;
11570: LD_VAR 0 2
11574: PPUSH
11575: LD_INT 72
11577: PPUSH
11578: LD_INT 129
11580: PPUSH
11581: CALL_OW 171
// Wait ( 1 ) ;
11585: LD_INT 1
11587: PPUSH
11588: CALL_OW 67
// AddComMoveXY ( car , 72 , 134 ) ;
11592: LD_VAR 0 2
11596: PPUSH
11597: LD_INT 72
11599: PPUSH
11600: LD_INT 134
11602: PPUSH
11603: CALL_OW 171
// Wait ( 1 ) ;
11607: LD_INT 1
11609: PPUSH
11610: CALL_OW 67
// AddComMoveXY ( car , 72 , 138 ) ;
11614: LD_VAR 0 2
11618: PPUSH
11619: LD_INT 72
11621: PPUSH
11622: LD_INT 138
11624: PPUSH
11625: CALL_OW 171
// Wait ( 1 ) ;
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 67
// AddComMoveToArea ( car , ExitArea ) ;
11636: LD_VAR 0 2
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: CALL_OW 173
// Wait ( 0 0$8 ) ;
11648: LD_INT 280
11650: PPUSH
11651: CALL_OW 67
// if ( RecklessAttack and BelkovFreed ) then
11655: LD_EXP 44
11659: PUSH
11660: LD_EXP 45
11664: AND
11665: IFFALSE 11750
// begin case trucks_diverted_count of 2 :
11667: LD_EXP 36
11671: PUSH
11672: LD_INT 2
11674: DOUBLE
11675: EQUAL
11676: IFTRUE 11680
11678: GO 11687
11680: POP
// Dialogue3a ; 4 :
11681: CALL 5689 0 0
11685: GO 11748
11687: LD_INT 4
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11702
11695: POP
// Dialogue3b ; 6 :
11696: CALL 5753 0 0
11700: GO 11748
11702: LD_INT 6
11704: DOUBLE
11705: EQUAL
11706: IFTRUE 11710
11708: GO 11717
11710: POP
// Dialogue3c ; 7 :
11711: CALL 5817 0 0
11715: GO 11748
11717: LD_INT 7
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11732
11725: POP
// Dialogue3d ; 8 :
11726: CALL 5893 0 0
11730: GO 11748
11732: LD_INT 8
11734: DOUBLE
11735: EQUAL
11736: IFTRUE 11740
11738: GO 11747
11740: POP
// Dialogue3e ; end ;
11741: CALL 5957 0 0
11745: GO 11748
11747: POP
// end else
11748: GO 11928
// begin if ( not RecklessAttack ) and ( not BelkovFreed ) then
11750: LD_EXP 44
11754: NOT
11755: PUSH
11756: LD_EXP 45
11760: NOT
11761: AND
11762: IFFALSE 11847
// begin case trucks_diverted_count of 3 :
11764: LD_EXP 36
11768: PUSH
11769: LD_INT 3
11771: DOUBLE
11772: EQUAL
11773: IFTRUE 11777
11775: GO 11784
11777: POP
// Dialogue3a ; 6 :
11778: CALL 5689 0 0
11782: GO 11845
11784: LD_INT 6
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11799
11792: POP
// Dialogue3b ; 7 :
11793: CALL 5753 0 0
11797: GO 11845
11799: LD_INT 7
11801: DOUBLE
11802: EQUAL
11803: IFTRUE 11807
11805: GO 11814
11807: POP
// Dialogue3c ; 9 :
11808: CALL 5817 0 0
11812: GO 11845
11814: LD_INT 9
11816: DOUBLE
11817: EQUAL
11818: IFTRUE 11822
11820: GO 11829
11822: POP
// Dialogue3d ; 10 :
11823: CALL 5893 0 0
11827: GO 11845
11829: LD_INT 10
11831: DOUBLE
11832: EQUAL
11833: IFTRUE 11837
11835: GO 11844
11837: POP
// Dialogue3e ; end ;
11838: CALL 5957 0 0
11842: GO 11845
11844: POP
// end else
11845: GO 11928
// begin case trucks_diverted_count of 2 :
11847: LD_EXP 36
11851: PUSH
11852: LD_INT 2
11854: DOUBLE
11855: EQUAL
11856: IFTRUE 11860
11858: GO 11867
11860: POP
// Dialogue3a ; 5 :
11861: CALL 5689 0 0
11865: GO 11928
11867: LD_INT 5
11869: DOUBLE
11870: EQUAL
11871: IFTRUE 11875
11873: GO 11882
11875: POP
// Dialogue3b ; 7 :
11876: CALL 5753 0 0
11880: GO 11928
11882: LD_INT 7
11884: DOUBLE
11885: EQUAL
11886: IFTRUE 11890
11888: GO 11897
11890: POP
// Dialogue3c ; 8 :
11891: CALL 5817 0 0
11895: GO 11928
11897: LD_INT 8
11899: DOUBLE
11900: EQUAL
11901: IFTRUE 11905
11903: GO 11912
11905: POP
// Dialogue3d ; 9 :
11906: CALL 5893 0 0
11910: GO 11928
11912: LD_INT 9
11914: DOUBLE
11915: EQUAL
11916: IFTRUE 11920
11918: GO 11927
11920: POP
// Dialogue3e ; end ;
11921: CALL 5957 0 0
11925: GO 11928
11927: POP
// end ; end ; end else
11928: GO 11942
// begin Say ( Burlak , DQrSteal#2-Bur-1 ) ;
11930: LD_EXP 14
11934: PPUSH
11935: LD_STRING DQrSteal#2-Bur-1
11937: PPUSH
11938: CALL_OW 88
// end ; end ; end ;
11942: GO 11353
11944: POP
11945: POP
// if not Disabled4 then
11946: LD_EXP 66
11950: NOT
11951: IFFALSE 11954
// enable ;
11953: ENABLE
// end ;
11954: PPOPN 3
11956: END
// every 0 0$10 marked 18 do var un , filter_nottask ;
11957: GO 11959
11959: DISABLE
11960: LD_INT 0
11962: PPUSH
11963: PPUSH
// begin filter_nottask := FilterUnitsExceptArea ( EnterArea , [ [ f_side , ally ] , [ f_not , [ f_hastask ] ] ] ) ;
11964: LD_ADDR_VAR 0 2
11968: PUSH
11969: LD_INT 4
11971: PPUSH
11972: LD_INT 22
11974: PUSH
11975: LD_EXP 5
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 3
11986: PUSH
11987: LD_INT 60
11989: PUSH
11990: EMPTY
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PPUSH
12001: CALL_OW 71
12005: ST_TO_ADDR
// for un in filter_nottask do
12006: LD_ADDR_VAR 0 1
12010: PUSH
12011: LD_VAR 0 2
12015: PUSH
12016: FOR_IN
12017: IFFALSE 12043
// begin ComMoveXY ( un , 72 , 137 ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: LD_INT 72
12026: PPUSH
12027: LD_INT 137
12029: PPUSH
12030: CALL_OW 111
// Wait ( 5 ) ;
12034: LD_INT 5
12036: PPUSH
12037: CALL_OW 67
// end ;
12041: GO 12016
12043: POP
12044: POP
// enable ;
12045: ENABLE
// end ; end_of_file
12046: PPOPN 2
12048: END
// export function prepare_arabian_attack ; var vehicle_set , j , auto , abc ; begin
12049: LD_INT 0
12051: PPUSH
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
// attack := [ ] ;
12056: LD_ADDR_EXP 7
12060: PUSH
12061: EMPTY
12062: ST_TO_ADDR
// vehicle_set := [ [ ar_light_trike , engine_combustion , ar_light_gun , control_manual ] , [ ar_light_trike , engine_combustion , ar_double_machine_gun , control_manual ] , [ ar_medium_trike , engine_combustion , ar_gun , control_manual ] , [ ar_medium_trike , engine_combustion , ar_gatling_gun , control_manual ] , [ ar_medium_trike , engine_combustion , ar_flame_thrower , control_manual ] , [ ar_half_tracked , engine_combustion , ar_flame_thrower , control_manual ] , [ ar_half_tracked , engine_combustion , ar_rocket_launcher , control_manual ] , [ ar_half_tracked , engine_combustion , ar_gun , control_manual ] ] ;
12063: LD_ADDR_VAR 0 2
12067: PUSH
12068: LD_INT 12
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: LD_INT 23
12076: PUSH
12077: LD_INT 1
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 12
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: LD_INT 24
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 13
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: LD_INT 27
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 13
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: LD_INT 25
12130: PUSH
12131: LD_INT 1
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 13
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: LD_INT 26
12148: PUSH
12149: LD_INT 1
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 14
12160: PUSH
12161: LD_INT 1
12163: PUSH
12164: LD_INT 26
12166: PUSH
12167: LD_INT 1
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 14
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: LD_INT 28
12184: PUSH
12185: LD_INT 1
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 14
12196: PUSH
12197: LD_INT 1
12199: PUSH
12200: LD_INT 27
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: ST_TO_ADDR
// for j := 1 to ( 0 + waypointsEND ) do
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: DOUBLE
12228: LD_INT 1
12230: DEC
12231: ST_TO_ADDR
12232: LD_INT 0
12234: PUSH
12235: LD_EXP 63
12239: PLUS
12240: PUSH
12241: FOR_TO
12242: IFFALSE 12667
// begin uc_side := arab ;
12244: LD_ADDR_OWVAR 20
12248: PUSH
12249: LD_EXP 6
12253: ST_TO_ADDR
// uc_nation := nation_arabian ;
12254: LD_ADDR_OWVAR 21
12258: PUSH
12259: LD_INT 2
12261: ST_TO_ADDR
// uc_direction := 3 ;
12262: LD_ADDR_OWVAR 24
12266: PUSH
12267: LD_INT 3
12269: ST_TO_ADDR
// hc_name :=  ;
12270: LD_ADDR_OWVAR 26
12274: PUSH
12275: LD_STRING 
12277: ST_TO_ADDR
// case Rand ( 1 , 100 ) of 1 .. 10 :
12278: LD_INT 1
12280: PPUSH
12281: LD_INT 100
12283: PPUSH
12284: CALL_OW 12
12288: PUSH
12289: LD_INT 1
12291: DOUBLE
12292: GREATEREQUAL
12293: IFFALSE 12301
12295: LD_INT 10
12297: DOUBLE
12298: LESSEQUAL
12299: IFTRUE 12303
12301: GO 12327
12303: POP
// PrepareHuman ( 0 , class_soldier , Rand ( 3 , 6 ) ) ; 11 .. 60 :
12304: LD_INT 0
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: LD_INT 3
12312: PPUSH
12313: LD_INT 6
12315: PPUSH
12316: CALL_OW 12
12320: PPUSH
12321: CALL_OW 380
12325: GO 12442
12327: LD_INT 11
12329: DOUBLE
12330: GREATEREQUAL
12331: IFFALSE 12339
12333: LD_INT 60
12335: DOUBLE
12336: LESSEQUAL
12337: IFTRUE 12341
12339: GO 12365
12341: POP
// PrepareHuman ( 0 , class_mechanic , Rand ( 3 , 6 ) ) ; 61 .. 90 :
12342: LD_INT 0
12344: PPUSH
12345: LD_INT 3
12347: PPUSH
12348: LD_INT 3
12350: PPUSH
12351: LD_INT 6
12353: PPUSH
12354: CALL_OW 12
12358: PPUSH
12359: CALL_OW 380
12363: GO 12442
12365: LD_INT 61
12367: DOUBLE
12368: GREATEREQUAL
12369: IFFALSE 12377
12371: LD_INT 90
12373: DOUBLE
12374: LESSEQUAL
12375: IFTRUE 12379
12377: GO 12403
12379: POP
// PrepareHuman ( 0 , class_engineer , Rand ( 3 , 6 ) ) ; 91 .. 100 :
12380: LD_INT 0
12382: PPUSH
12383: LD_INT 2
12385: PPUSH
12386: LD_INT 3
12388: PPUSH
12389: LD_INT 6
12391: PPUSH
12392: CALL_OW 12
12396: PPUSH
12397: CALL_OW 380
12401: GO 12442
12403: LD_INT 91
12405: DOUBLE
12406: GREATEREQUAL
12407: IFFALSE 12415
12409: LD_INT 100
12411: DOUBLE
12412: LESSEQUAL
12413: IFTRUE 12417
12415: GO 12441
12417: POP
// PrepareHuman ( 0 , class_scientistic , Rand ( 3 , 6 ) ) ; end ;
12418: LD_INT 0
12420: PPUSH
12421: LD_INT 4
12423: PPUSH
12424: LD_INT 3
12426: PPUSH
12427: LD_INT 6
12429: PPUSH
12430: CALL_OW 12
12434: PPUSH
12435: CALL_OW 380
12439: GO 12442
12441: POP
// auto := Rand ( 1 , ( 0 + vehicle_set ) ) ;
12442: LD_ADDR_VAR 0 4
12446: PUSH
12447: LD_INT 1
12449: PPUSH
12450: LD_INT 0
12452: PUSH
12453: LD_VAR 0 2
12457: PLUS
12458: PPUSH
12459: CALL_OW 12
12463: ST_TO_ADDR
// vc_chassis := vehicle_set [ auto ] [ 1 ] ;
12464: LD_ADDR_OWVAR 37
12468: PUSH
12469: LD_VAR 0 2
12473: PUSH
12474: LD_VAR 0 4
12478: ARRAY
12479: PUSH
12480: LD_INT 1
12482: ARRAY
12483: ST_TO_ADDR
// vc_engine := vehicle_set [ auto ] [ 2 ] ;
12484: LD_ADDR_OWVAR 39
12488: PUSH
12489: LD_VAR 0 2
12493: PUSH
12494: LD_VAR 0 4
12498: ARRAY
12499: PUSH
12500: LD_INT 2
12502: ARRAY
12503: ST_TO_ADDR
// vc_weapon := vehicle_set [ auto ] [ 3 ] ;
12504: LD_ADDR_OWVAR 40
12508: PUSH
12509: LD_VAR 0 2
12513: PUSH
12514: LD_VAR 0 4
12518: ARRAY
12519: PUSH
12520: LD_INT 3
12522: ARRAY
12523: ST_TO_ADDR
// vc_control := vehicle_set [ auto ] [ 4 ] ;
12524: LD_ADDR_OWVAR 38
12528: PUSH
12529: LD_VAR 0 2
12533: PUSH
12534: LD_VAR 0 4
12538: ARRAY
12539: PUSH
12540: LD_INT 4
12542: ARRAY
12543: ST_TO_ADDR
// attack := attack union CreateVehicle ;
12544: LD_ADDR_EXP 7
12548: PUSH
12549: LD_EXP 7
12553: PUSH
12554: CALL_OW 45
12558: UNION
12559: ST_TO_ADDR
// abc := CreateHuman ;
12560: LD_ADDR_VAR 0 5
12564: PUSH
12565: CALL_OW 44
12569: ST_TO_ADDR
// PlaceHumanInUnit ( abc , attack [ j ] ) ;
12570: LD_VAR 0 5
12574: PPUSH
12575: LD_EXP 7
12579: PUSH
12580: LD_VAR 0 3
12584: ARRAY
12585: PPUSH
12586: CALL_OW 52
// SetSkill ( abc , skill_mechanical , Rand ( 3 , 7 ) ) ;
12590: LD_VAR 0 5
12594: PPUSH
12595: LD_INT 3
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: LD_INT 7
12603: PPUSH
12604: CALL_OW 12
12608: PPUSH
12609: CALL_OW 237
// SetFuel ( attack [ j ] , Rand ( 70 , 95 ) ) ;
12613: LD_EXP 7
12617: PUSH
12618: LD_VAR 0 3
12622: ARRAY
12623: PPUSH
12624: LD_INT 70
12626: PPUSH
12627: LD_INT 95
12629: PPUSH
12630: CALL_OW 12
12634: PPUSH
12635: CALL_OW 240
// SetLives ( attack [ j ] , Rand ( 900 , 1000 ) ) ;
12639: LD_EXP 7
12643: PUSH
12644: LD_VAR 0 3
12648: ARRAY
12649: PPUSH
12650: LD_INT 900
12652: PPUSH
12653: LD_INT 1000
12655: PPUSH
12656: CALL_OW 12
12660: PPUSH
12661: CALL_OW 234
// end ;
12665: GO 12241
12667: POP
12668: POP
// end ;
12669: LD_VAR 0 1
12673: RET
// every 0 0$1 marked 10 do var waypoints , points , filterex , filterin , rnd , j ;
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
12682: PPUSH
12683: PPUSH
12684: PPUSH
// begin waypoints := [ [ 98 , 6 ] , [ 94 , 9 ] , [ 90 , 14 ] , [ 87 , 17 ] , [ 81 , 18 ] , [ 80 , 23 ] ] ;
12685: LD_ADDR_VAR 0 1
12689: PUSH
12690: LD_INT 98
12692: PUSH
12693: LD_INT 6
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 94
12702: PUSH
12703: LD_INT 9
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 90
12712: PUSH
12713: LD_INT 14
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 87
12722: PUSH
12723: LD_INT 17
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 81
12732: PUSH
12733: LD_INT 18
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 80
12742: PUSH
12743: LD_INT 23
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: ST_TO_ADDR
// for j := 1 to ( 0 + waypointsEND ) do
12758: LD_ADDR_VAR 0 6
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_INT 0
12770: PUSH
12771: LD_EXP 63
12775: PLUS
12776: PUSH
12777: FOR_TO
12778: IFFALSE 13490
// begin Wait ( Rand ( 0 0$5 , 0 0$10 ) ) ;
12780: LD_INT 175
12782: PPUSH
12783: LD_INT 350
12785: PPUSH
12786: CALL_OW 12
12790: PPUSH
12791: CALL_OW 67
// PlaceUnitArea ( attack [ j ] , EnterArea , false ) ;
12795: LD_EXP 7
12799: PUSH
12800: LD_VAR 0 6
12804: ARRAY
12805: PPUSH
12806: LD_INT 4
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// if j = 1 then
12816: LD_VAR 0 6
12820: PUSH
12821: LD_INT 1
12823: EQUAL
12824: IFFALSE 12835
// begin disable ( 18 ) ;
12826: LD_INT 18
12828: DISABLE_MARKED
// enable ( 9 ) ;
12829: LD_INT 9
12831: ENABLE_MARKED
// enable ( 19 ) ;
12832: LD_INT 19
12834: ENABLE_MARKED
// end ; for points in waypoints do
12835: LD_ADDR_VAR 0 2
12839: PUSH
12840: LD_VAR 0 1
12844: PUSH
12845: FOR_IN
12846: IFFALSE 12984
// begin case Rand ( 1 , 2 ) of 1 :
12848: LD_INT 1
12850: PPUSH
12851: LD_INT 2
12853: PPUSH
12854: CALL_OW 12
12858: PUSH
12859: LD_INT 1
12861: DOUBLE
12862: EQUAL
12863: IFTRUE 12867
12865: GO 12920
12867: POP
// if IsOK ( attack [ j ] ) then
12868: LD_EXP 7
12872: PUSH
12873: LD_VAR 0 6
12877: ARRAY
12878: PPUSH
12879: CALL_OW 302
12883: IFFALSE 12918
// ComAgressiveMove ( attack [ j ] , points [ 1 ] , points [ 2 ] ) ; 2 :
12885: LD_EXP 7
12889: PUSH
12890: LD_VAR 0 6
12894: ARRAY
12895: PPUSH
12896: LD_VAR 0 2
12900: PUSH
12901: LD_INT 1
12903: ARRAY
12904: PPUSH
12905: LD_VAR 0 2
12909: PUSH
12910: LD_INT 2
12912: ARRAY
12913: PPUSH
12914: CALL_OW 114
12918: GO 12982
12920: LD_INT 2
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 12981
12928: POP
// if IsOK ( attack [ j ] ) then
12929: LD_EXP 7
12933: PUSH
12934: LD_VAR 0 6
12938: ARRAY
12939: PPUSH
12940: CALL_OW 302
12944: IFFALSE 12979
// AddComMoveXY ( attack [ j ] , points [ 1 ] , points [ 2 ] ) ; end ;
12946: LD_EXP 7
12950: PUSH
12951: LD_VAR 0 6
12955: ARRAY
12956: PPUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_INT 1
12964: ARRAY
12965: PPUSH
12966: LD_VAR 0 2
12970: PUSH
12971: LD_INT 2
12973: ARRAY
12974: PPUSH
12975: CALL_OW 171
12979: GO 12982
12981: POP
// end ;
12982: GO 12845
12984: POP
12985: POP
// filterex := FilterUnitsExceptArea ( KnollArea , [ f_type , unit_building ] ) ;
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 2
12993: PPUSH
12994: LD_INT 21
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PPUSH
13004: CALL_OW 71
13008: ST_TO_ADDR
// filterin := FilterUnitsInArea ( KnollArea , [ f_type , unit_building ] ) ;
13009: LD_ADDR_VAR 0 4
13013: PUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_INT 21
13019: PUSH
13020: LD_INT 3
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PPUSH
13027: CALL_OW 70
13031: ST_TO_ADDR
// if 0 + filterin >= 0 + filterex then
13032: LD_INT 0
13034: PUSH
13035: LD_VAR 0 4
13039: PLUS
13040: PUSH
13041: LD_INT 0
13043: PUSH
13044: LD_VAR 0 3
13048: PLUS
13049: GREATEREQUAL
13050: IFFALSE 13319
// begin case Rand ( 1 , 2 ) of 1 :
13052: LD_INT 1
13054: PPUSH
13055: LD_INT 2
13057: PPUSH
13058: CALL_OW 12
13062: PUSH
13063: LD_INT 1
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13136
13071: POP
// if IsOK ( attack [ j ] ) then
13072: LD_EXP 7
13076: PUSH
13077: LD_VAR 0 6
13081: ARRAY
13082: PPUSH
13083: CALL_OW 302
13087: IFFALSE 13134
// AddComAgressiveMove ( attack [ j ] , waypointsEND [ j ] [ 1 ] , waypointsEND [ j ] [ 2 ] ) ; 2 :
13089: LD_EXP 7
13093: PUSH
13094: LD_VAR 0 6
13098: ARRAY
13099: PPUSH
13100: LD_EXP 63
13104: PUSH
13105: LD_VAR 0 6
13109: ARRAY
13110: PUSH
13111: LD_INT 1
13113: ARRAY
13114: PPUSH
13115: LD_EXP 63
13119: PUSH
13120: LD_VAR 0 6
13124: ARRAY
13125: PUSH
13126: LD_INT 2
13128: ARRAY
13129: PPUSH
13130: CALL_OW 174
13134: GO 13210
13136: LD_INT 2
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13209
13144: POP
// if IsOK ( attack [ j ] ) then
13145: LD_EXP 7
13149: PUSH
13150: LD_VAR 0 6
13154: ARRAY
13155: PPUSH
13156: CALL_OW 302
13160: IFFALSE 13207
// AddComMoveXY ( attack [ j ] , waypointsEND [ j ] [ 1 ] , waypointsEND [ j ] [ 2 ] ) ; end ;
13162: LD_EXP 7
13166: PUSH
13167: LD_VAR 0 6
13171: ARRAY
13172: PPUSH
13173: LD_EXP 63
13177: PUSH
13178: LD_VAR 0 6
13182: ARRAY
13183: PUSH
13184: LD_INT 1
13186: ARRAY
13187: PPUSH
13188: LD_EXP 63
13192: PUSH
13193: LD_VAR 0 6
13197: ARRAY
13198: PUSH
13199: LD_INT 2
13201: ARRAY
13202: PPUSH
13203: CALL_OW 171
13207: GO 13210
13209: POP
// if 0 + filterex > 0 then
13210: LD_INT 0
13212: PUSH
13213: LD_VAR 0 3
13217: PLUS
13218: PUSH
13219: LD_INT 0
13221: GREATER
13222: IFFALSE 13317
// begin Wait ( 10 ) ;
13224: LD_INT 10
13226: PPUSH
13227: CALL_OW 67
// rnd := Rand ( 1 , 0 + filterex ) ;
13231: LD_ADDR_VAR 0 5
13235: PUSH
13236: LD_INT 1
13238: PPUSH
13239: LD_INT 0
13241: PUSH
13242: LD_VAR 0 3
13246: PLUS
13247: PPUSH
13248: CALL_OW 12
13252: ST_TO_ADDR
// if IsOK ( attack [ j ] ) then
13253: LD_EXP 7
13257: PUSH
13258: LD_VAR 0 6
13262: ARRAY
13263: PPUSH
13264: CALL_OW 302
13268: IFFALSE 13317
// AddComAgressiveMove ( attack [ j ] , GetX ( filterex [ rnd ] ) , GetY ( filterex [ rnd ] ) ) ;
13270: LD_EXP 7
13274: PUSH
13275: LD_VAR 0 6
13279: ARRAY
13280: PPUSH
13281: LD_VAR 0 3
13285: PUSH
13286: LD_VAR 0 5
13290: ARRAY
13291: PPUSH
13292: CALL_OW 250
13296: PPUSH
13297: LD_VAR 0 3
13301: PUSH
13302: LD_VAR 0 5
13306: ARRAY
13307: PPUSH
13308: CALL_OW 251
13312: PPUSH
13313: CALL_OW 174
// end ; end else
13317: GO 13488
// begin if 0 + filterex > 0 then
13319: LD_INT 0
13321: PUSH
13322: LD_VAR 0 3
13326: PLUS
13327: PUSH
13328: LD_INT 0
13330: GREATER
13331: IFFALSE 13426
// begin rnd := Rand ( 1 , 0 + filterex ) ;
13333: LD_ADDR_VAR 0 5
13337: PUSH
13338: LD_INT 1
13340: PPUSH
13341: LD_INT 0
13343: PUSH
13344: LD_VAR 0 3
13348: PLUS
13349: PPUSH
13350: CALL_OW 12
13354: ST_TO_ADDR
// if IsOK ( attack [ j ] ) then
13355: LD_EXP 7
13359: PUSH
13360: LD_VAR 0 6
13364: ARRAY
13365: PPUSH
13366: CALL_OW 302
13370: IFFALSE 13419
// AddComAgressiveMove ( attack [ j ] , GetX ( filterex [ rnd ] ) , GetY ( filterex [ rnd ] ) ) ;
13372: LD_EXP 7
13376: PUSH
13377: LD_VAR 0 6
13381: ARRAY
13382: PPUSH
13383: LD_VAR 0 3
13387: PUSH
13388: LD_VAR 0 5
13392: ARRAY
13393: PPUSH
13394: CALL_OW 250
13398: PPUSH
13399: LD_VAR 0 3
13403: PUSH
13404: LD_VAR 0 5
13408: ARRAY
13409: PPUSH
13410: CALL_OW 251
13414: PPUSH
13415: CALL_OW 174
// Wait ( 10 ) ;
13419: LD_INT 10
13421: PPUSH
13422: CALL_OW 67
// end ; if IsOK ( attack [ j ] ) then
13426: LD_EXP 7
13430: PUSH
13431: LD_VAR 0 6
13435: ARRAY
13436: PPUSH
13437: CALL_OW 302
13441: IFFALSE 13488
// AddComAgressiveMove ( attack [ j ] , waypointsEND [ j ] [ 1 ] , waypointsEND [ j ] [ 2 ] ) ;
13443: LD_EXP 7
13447: PUSH
13448: LD_VAR 0 6
13452: ARRAY
13453: PPUSH
13454: LD_EXP 63
13458: PUSH
13459: LD_VAR 0 6
13463: ARRAY
13464: PUSH
13465: LD_INT 1
13467: ARRAY
13468: PPUSH
13469: LD_EXP 63
13473: PUSH
13474: LD_VAR 0 6
13478: ARRAY
13479: PUSH
13480: LD_INT 2
13482: ARRAY
13483: PPUSH
13484: CALL_OW 174
// end ; end ;
13488: GO 12777
13490: POP
13491: POP
// Wait ( 0 0$20 ) ;
13492: LD_INT 700
13494: PPUSH
13495: CALL_OW 67
// Dialogue7a ;
13499: CALL 7275 0 0
// enable ( 16 ) ;
13503: LD_INT 16
13505: ENABLE_MARKED
// Wait ( 0 0$15 ) ;
13506: LD_INT 525
13508: PPUSH
13509: CALL_OW 67
// Dialogue8 ;
13513: CALL 7307 0 0
// Wait ( 0 0$15 ) ;
13517: LD_INT 525
13519: PPUSH
13520: CALL_OW 67
// Dialogue9 ;
13524: CALL 7807 0 0
// Wait ( 0 0$15 ) ;
13528: LD_INT 525
13530: PPUSH
13531: CALL_OW 67
// create_gaydar ;
13535: CALL 2620 0 0
// Wait ( 0 0$34 ) ;
13539: LD_INT 1190
13541: PPUSH
13542: CALL_OW 67
// enable ( 14 ) ;
13546: LD_INT 14
13548: ENABLE_MARKED
// end ;
13549: PPOPN 6
13551: END
// every 0 0$10 marked 14 do var i , un , live_attack ;
13552: GO 13554
13554: DISABLE
13555: LD_INT 0
13557: PPUSH
13558: PPUSH
13559: PPUSH
// begin live_attack := [ ] ;
13560: LD_ADDR_VAR 0 3
13564: PUSH
13565: EMPTY
13566: ST_TO_ADDR
// for un in attack do
13567: LD_ADDR_VAR 0 2
13571: PUSH
13572: LD_EXP 7
13576: PUSH
13577: FOR_IN
13578: IFFALSE 13642
// begin Wait ( 2 ) ;
13580: LD_INT 2
13582: PPUSH
13583: CALL_OW 67
// if ( IsOK ( un ) ) and ( not HasTask ( un ) ) then
13587: LD_VAR 0 2
13591: PPUSH
13592: CALL_OW 302
13596: PUSH
13597: LD_VAR 0 2
13601: PPUSH
13602: CALL_OW 314
13606: NOT
13607: AND
13608: IFFALSE 13640
// begin live_attack := live_attack union un ;
13610: LD_ADDR_VAR 0 3
13614: PUSH
13615: LD_VAR 0 3
13619: PUSH
13620: LD_VAR 0 2
13624: UNION
13625: ST_TO_ADDR
// i := i + 1 ;
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: LD_VAR 0 1
13635: PUSH
13636: LD_INT 1
13638: PLUS
13639: ST_TO_ADDR
// end ; end ;
13640: GO 13577
13642: POP
13643: POP
// if i > ( 0 + live_attack ) * 0.7 then
13644: LD_VAR 0 1
13648: PUSH
13649: LD_INT 0
13651: PUSH
13652: LD_VAR 0 3
13656: PLUS
13657: PUSH
13658: LD_REAL  7.00000000000000E-0001
13661: MUL
13662: GREATER
13663: IFFALSE 13669
// steal_player_buildings ;
13665: CALL 13704 0 0
// if i = ( 0 + live_attack ) then
13669: LD_VAR 0 1
13673: PUSH
13674: LD_INT 0
13676: PUSH
13677: LD_VAR 0 3
13681: PLUS
13682: EQUAL
13683: IFFALSE 13700
// ComAgressiveMove ( live_attack , 73 , 139 ) ;
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 73
13692: PPUSH
13693: LD_INT 139
13695: PPUSH
13696: CALL_OW 114
// enable ;
13700: ENABLE
// end ;
13701: PPOPN 3
13703: END
// export function steal_player_buildings ; var my_filter_depot , my_filter_other , i , veh ; begin
13704: LD_INT 0
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
// my_filter_depot := FilterUnitsInArea ( KnollArea , [ [ f_side , you ] , [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) ;
13711: LD_ADDR_VAR 0 2
13715: PUSH
13716: LD_INT 2
13718: PPUSH
13719: LD_INT 22
13721: PUSH
13722: LD_EXP 4
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: LD_INT 30
13736: PUSH
13737: LD_INT 0
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 30
13746: PUSH
13747: LD_INT 1
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 70
13770: ST_TO_ADDR
// my_filter_other := FilterUnitsInArea ( KnollArea , [ [ f_side , you ] , [ [ f_not , [ f_btype , b_depot ] ] , [ f_type , unit_building ] ] ] ) ;
13771: LD_ADDR_VAR 0 3
13775: PUSH
13776: LD_INT 2
13778: PPUSH
13779: LD_INT 22
13781: PUSH
13782: LD_EXP 4
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 3
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 0
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 21
13810: PUSH
13811: LD_INT 3
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 70
13830: ST_TO_ADDR
// if ( 0 + my_filter_depot ) > 0 or ( 0 + my_filter_other ) > 0 then
13831: LD_INT 0
13833: PUSH
13834: LD_VAR 0 2
13838: PLUS
13839: PUSH
13840: LD_INT 0
13842: GREATER
13843: PUSH
13844: LD_INT 0
13846: PUSH
13847: LD_VAR 0 3
13851: PLUS
13852: PUSH
13853: LD_INT 0
13855: GREATER
13856: OR
13857: IFFALSE 14071
// begin for veh in attack do
13859: LD_ADDR_VAR 0 5
13863: PUSH
13864: LD_EXP 7
13868: PUSH
13869: FOR_IN
13870: IFFALSE 13935
// begin if IsDrivenBy ( veh ) <> 0 and GetClass ( IsDrivenBy ( veh ) ) = classtype_engineer then
13872: LD_VAR 0 5
13876: PPUSH
13877: CALL_OW 311
13881: PUSH
13882: LD_INT 0
13884: NONEQUAL
13885: PUSH
13886: LD_VAR 0 5
13890: PPUSH
13891: CALL_OW 311
13895: PPUSH
13896: CALL_OW 257
13900: PUSH
13901: LD_INT 2
13903: EQUAL
13904: AND
13905: IFFALSE 13933
// begin driver := IsDrivenBy ( veh ) ;
13907: LD_ADDR_EXP 52
13911: PUSH
13912: LD_VAR 0 5
13916: PPUSH
13917: CALL_OW 311
13921: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13922: LD_EXP 52
13926: PPUSH
13927: CALL_OW 121
// break ;
13931: GO 13935
// end ; end ;
13933: GO 13869
13935: POP
13936: POP
// Wait ( 10 ) ;
13937: LD_INT 10
13939: PPUSH
13940: CALL_OW 67
// if ( 0 + my_filter_depot ) > 0 then
13944: LD_INT 0
13946: PUSH
13947: LD_VAR 0 2
13951: PLUS
13952: PUSH
13953: LD_INT 0
13955: GREATER
13956: IFFALSE 14004
// for i := 1 to ( my_filter_depot + 0 ) do
13958: LD_ADDR_VAR 0 4
13962: PUSH
13963: DOUBLE
13964: LD_INT 1
13966: DEC
13967: ST_TO_ADDR
13968: LD_VAR 0 2
13972: PUSH
13973: LD_INT 0
13975: PLUS
13976: PUSH
13977: FOR_TO
13978: IFFALSE 14002
// AddComEnterUnit ( driver , my_filter_depot [ i ] ) ;
13980: LD_EXP 52
13984: PPUSH
13985: LD_VAR 0 2
13989: PUSH
13990: LD_VAR 0 4
13994: ARRAY
13995: PPUSH
13996: CALL_OW 180
14000: GO 13977
14002: POP
14003: POP
// Wait ( 10 ) ;
14004: LD_INT 10
14006: PPUSH
14007: CALL_OW 67
// if ( 0 + my_filter_other ) > 0 then
14011: LD_INT 0
14013: PUSH
14014: LD_VAR 0 3
14018: PLUS
14019: PUSH
14020: LD_INT 0
14022: GREATER
14023: IFFALSE 14071
// for i := 1 to ( my_filter_other + 0 ) do
14025: LD_ADDR_VAR 0 4
14029: PUSH
14030: DOUBLE
14031: LD_INT 1
14033: DEC
14034: ST_TO_ADDR
14035: LD_VAR 0 3
14039: PUSH
14040: LD_INT 0
14042: PLUS
14043: PUSH
14044: FOR_TO
14045: IFFALSE 14069
// AddComEnterUnit ( driver , my_filter_other [ i ] ) ;
14047: LD_EXP 52
14051: PPUSH
14052: LD_VAR 0 3
14056: PUSH
14057: LD_VAR 0 4
14061: ARRAY
14062: PPUSH
14063: CALL_OW 180
14067: GO 14044
14069: POP
14070: POP
// end ; end ;
14071: LD_VAR 0 1
14075: RET
// every 0 0$1 + 0 0$0.6 marked 9 do
14076: GO 14078
14078: DISABLE
// begin if See ( you , attack [ 1 ] ) then
14079: LD_EXP 4
14083: PPUSH
14084: LD_EXP 7
14088: PUSH
14089: LD_INT 1
14091: ARRAY
14092: PPUSH
14093: CALL_OW 292
14097: IFFALSE 14112
// begin Dialogue7 ;
14099: CALL 6792 0 0
// disable ;
14103: DISABLE
// Disabled9 := true ;
14104: LD_ADDR_EXP 68
14108: PUSH
14109: LD_INT 1
14111: ST_TO_ADDR
// end ; if not disabled9 then
14112: LD_EXP 68
14116: NOT
14117: IFFALSE 14120
// enable ;
14119: ENABLE
// end ;
14120: END
// every 0 0$1 marked 16 do var un1 , un2 , un_mem , distance , my_filter ;
14121: GO 14123
14123: DISABLE
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
14128: PPUSH
14129: PPUSH
14130: PPUSH
// begin my_filter := FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
14131: LD_ADDR_VAR 0 5
14135: PUSH
14136: LD_INT 22
14138: PUSH
14139: LD_EXP 4
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: LD_INT 21
14153: PUSH
14154: LD_INT 1
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 21
14163: PUSH
14164: LD_INT 2
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 30
14173: PUSH
14174: LD_INT 32
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 30
14183: PUSH
14184: LD_INT 31
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 69
14206: ST_TO_ADDR
// if my_filter = 0 then
14207: LD_VAR 0 5
14211: PUSH
14212: LD_INT 0
14214: EQUAL
14215: IFFALSE 14239
// my_filter := FilterAllUnits ( [ f_side , you ] ) ;
14217: LD_ADDR_VAR 0 5
14221: PUSH
14222: LD_INT 22
14224: PUSH
14225: LD_EXP 4
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 69
14238: ST_TO_ADDR
// attack := UnitFilter ( attack , [ f_ok ] ) ;
14239: LD_ADDR_EXP 7
14243: PUSH
14244: LD_EXP 7
14248: PPUSH
14249: LD_INT 50
14251: PUSH
14252: EMPTY
14253: LIST
14254: PPUSH
14255: CALL_OW 72
14259: ST_TO_ADDR
// if my_filter > 0 and attack > 0 then
14260: LD_VAR 0 5
14264: PUSH
14265: LD_INT 0
14267: GREATER
14268: PUSH
14269: LD_EXP 7
14273: PUSH
14274: LD_INT 0
14276: GREATER
14277: AND
14278: IFFALSE 14435
// for un1 in attack do
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: LD_EXP 7
14289: PUSH
14290: FOR_IN
14291: IFFALSE 14433
// begin if IsOK ( un1 ) then
14293: LD_VAR 0 1
14297: PPUSH
14298: CALL_OW 302
14302: IFFALSE 14424
// begin distance := GetDistUnits ( un1 , Burlak ) ;
14304: LD_ADDR_VAR 0 4
14308: PUSH
14309: LD_VAR 0 1
14313: PPUSH
14314: LD_EXP 14
14318: PPUSH
14319: CALL_OW 296
14323: ST_TO_ADDR
// un_mem := Burlak ;
14324: LD_ADDR_VAR 0 3
14328: PUSH
14329: LD_EXP 14
14333: ST_TO_ADDR
// for un2 in my_filter do
14334: LD_ADDR_VAR 0 2
14338: PUSH
14339: LD_VAR 0 5
14343: PUSH
14344: FOR_IN
14345: IFFALSE 14408
// begin if distance > GetDistUnits ( un1 , un2 ) then
14347: LD_VAR 0 4
14351: PUSH
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_VAR 0 2
14361: PPUSH
14362: CALL_OW 296
14366: GREATER
14367: IFFALSE 14399
// begin distance := GetDistUnits ( un1 , un2 ) ;
14369: LD_ADDR_VAR 0 4
14373: PUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 2
14383: PPUSH
14384: CALL_OW 296
14388: ST_TO_ADDR
// un_mem := un2 ;
14389: LD_ADDR_VAR 0 3
14393: PUSH
14394: LD_VAR 0 2
14398: ST_TO_ADDR
// end ; Wait ( 3 ) ;
14399: LD_INT 3
14401: PPUSH
14402: CALL_OW 67
// end ;
14406: GO 14344
14408: POP
14409: POP
// ComAttackUnit ( un1 , un_mem ) ;
14410: LD_VAR 0 1
14414: PPUSH
14415: LD_VAR 0 3
14419: PPUSH
14420: CALL_OW 115
// end ; Wait ( 3 ) ;
14424: LD_INT 3
14426: PPUSH
14427: CALL_OW 67
// end ;
14431: GO 14290
14433: POP
14434: POP
// if attack > 0 then
14435: LD_EXP 7
14439: PUSH
14440: LD_INT 0
14442: GREATER
14443: IFFALSE 14446
// enable ;
14445: ENABLE
// end ; end_of_file
14446: PPOPN 5
14448: END
// export function prepare_small_arabian_attack ; var j ; begin
14449: LD_INT 0
14451: PPUSH
14452: PPUSH
// sm_attack1 := [ ] ;
14453: LD_ADDR_EXP 9
14457: PUSH
14458: EMPTY
14459: ST_TO_ADDR
// sm_attack2 := [ ] ;
14460: LD_ADDR_EXP 10
14464: PUSH
14465: EMPTY
14466: ST_TO_ADDR
// sm_attack3 := [ ] ;
14467: LD_ADDR_EXP 11
14471: PUSH
14472: EMPTY
14473: ST_TO_ADDR
// for j := 1 to ( 0 + attack_count ) do
14474: LD_ADDR_VAR 0 2
14478: PUSH
14479: DOUBLE
14480: LD_INT 1
14482: DEC
14483: ST_TO_ADDR
14484: LD_INT 0
14486: PUSH
14487: LD_EXP 49
14491: PLUS
14492: PUSH
14493: FOR_TO
14494: IFFALSE 14744
// begin uc_side := arab ;
14496: LD_ADDR_OWVAR 20
14500: PUSH
14501: LD_EXP 6
14505: ST_TO_ADDR
// uc_nation := nation_arabian ;
14506: LD_ADDR_OWVAR 21
14510: PUSH
14511: LD_INT 2
14513: ST_TO_ADDR
// uc_direction := 2 ;
14514: LD_ADDR_OWVAR 24
14518: PUSH
14519: LD_INT 2
14521: ST_TO_ADDR
// hc_name :=  ;
14522: LD_ADDR_OWVAR 26
14526: PUSH
14527: LD_STRING 
14529: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , Rand ( 2 , 5 ) ) ;
14530: LD_INT 0
14532: PPUSH
14533: LD_INT 1
14535: PPUSH
14536: LD_INT 2
14538: PPUSH
14539: LD_INT 5
14541: PPUSH
14542: CALL_OW 12
14546: PPUSH
14547: CALL_OW 380
// sm_attack1 := sm_attack1 union CreateHuman ;
14551: LD_ADDR_EXP 9
14555: PUSH
14556: LD_EXP 9
14560: PUSH
14561: CALL_OW 44
14565: UNION
14566: ST_TO_ADDR
// uc_side := arab ;
14567: LD_ADDR_OWVAR 20
14571: PUSH
14572: LD_EXP 6
14576: ST_TO_ADDR
// uc_nation := nation_arabian ;
14577: LD_ADDR_OWVAR 21
14581: PUSH
14582: LD_INT 2
14584: ST_TO_ADDR
// uc_direction := 3 ;
14585: LD_ADDR_OWVAR 24
14589: PUSH
14590: LD_INT 3
14592: ST_TO_ADDR
// hc_name :=  ;
14593: LD_ADDR_OWVAR 26
14597: PUSH
14598: LD_STRING 
14600: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , Rand ( 2 , 5 ) ) ;
14601: LD_INT 0
14603: PPUSH
14604: LD_INT 1
14606: PPUSH
14607: LD_INT 2
14609: PPUSH
14610: LD_INT 5
14612: PPUSH
14613: CALL_OW 12
14617: PPUSH
14618: CALL_OW 380
// sm_attack2 := sm_attack2 union CreateHuman ;
14622: LD_ADDR_EXP 10
14626: PUSH
14627: LD_EXP 10
14631: PUSH
14632: CALL_OW 44
14636: UNION
14637: ST_TO_ADDR
// uc_side := arab ;
14638: LD_ADDR_OWVAR 20
14642: PUSH
14643: LD_EXP 6
14647: ST_TO_ADDR
// uc_nation := nation_arabian ;
14648: LD_ADDR_OWVAR 21
14652: PUSH
14653: LD_INT 2
14655: ST_TO_ADDR
// uc_direction := 3 ;
14656: LD_ADDR_OWVAR 24
14660: PUSH
14661: LD_INT 3
14663: ST_TO_ADDR
// hc_name :=  ;
14664: LD_ADDR_OWVAR 26
14668: PUSH
14669: LD_STRING 
14671: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
14672: LD_ADDR_OWVAR 30
14676: PUSH
14677: LD_INT 0
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
14695: LD_ADDR_OWVAR 31
14699: PUSH
14700: LD_INT 0
14702: PUSH
14703: LD_INT 0
14705: PUSH
14706: LD_INT 0
14708: PUSH
14709: LD_INT 0
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: ST_TO_ADDR
// hc_class := class_soldier ;
14718: LD_ADDR_OWVAR 28
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// sm_attack3 := sm_attack3 union CreateHuman ;
14726: LD_ADDR_EXP 11
14730: PUSH
14731: LD_EXP 11
14735: PUSH
14736: CALL_OW 44
14740: UNION
14741: ST_TO_ADDR
// end ;
14742: GO 14493
14744: POP
14745: POP
// end ;
14746: LD_VAR 0 1
14750: RET
// every 0 0$2 marked 11 do
14751: GO 14753
14753: DISABLE
// begin sm_pocet1_2 := sm_pocet1_2 + 1 ;
14754: LD_ADDR_EXP 64
14758: PUSH
14759: LD_EXP 64
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// PlaceUnitXY ( sm_attack1 [ sm_pocet1_2 ] , 19 , 2 , false ) ;
14768: LD_EXP 9
14772: PUSH
14773: LD_EXP 64
14777: ARRAY
14778: PPUSH
14779: LD_INT 19
14781: PPUSH
14782: LD_INT 2
14784: PPUSH
14785: LD_INT 0
14787: PPUSH
14788: CALL_OW 48
// ComMoveToArea ( sm_attack1 [ sm_pocet1_2 ] , PaloukArea ) ;
14792: LD_EXP 9
14796: PUSH
14797: LD_EXP 64
14801: ARRAY
14802: PPUSH
14803: LD_INT 6
14805: PPUSH
14806: CALL_OW 113
// PlaceUnitXY ( sm_attack2 [ sm_pocet1_2 ] , 103 , 1 , false ) ;
14810: LD_EXP 10
14814: PUSH
14815: LD_EXP 64
14819: ARRAY
14820: PPUSH
14821: LD_INT 103
14823: PPUSH
14824: LD_INT 1
14826: PPUSH
14827: LD_INT 0
14829: PPUSH
14830: CALL_OW 48
// ComMoveToArea ( sm_attack2 [ sm_pocet1_2 ] , EnterArea ) ;
14834: LD_EXP 10
14838: PUSH
14839: LD_EXP 64
14843: ARRAY
14844: PPUSH
14845: LD_INT 4
14847: PPUSH
14848: CALL_OW 113
// if sm_pocet1_2 < attack_count then
14852: LD_EXP 64
14856: PUSH
14857: LD_EXP 49
14861: LESS
14862: IFFALSE 14867
// enable else
14864: ENABLE
14865: GO 14872
// begin disable ;
14867: DISABLE
// make_small_attack ;
14868: CALL 14873 0 0
// end ; end ;
14872: END
// function make_small_attack ; var my_filter , i , at1 , at2 , distance , un , un_mem ; begin
14873: LD_INT 0
14875: PPUSH
14876: PPUSH
14877: PPUSH
14878: PPUSH
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
// ComAgressiveMove ( sm_attack1 , 33 , 28 ) ;
14883: LD_EXP 9
14887: PPUSH
14888: LD_INT 33
14890: PPUSH
14891: LD_INT 28
14893: PPUSH
14894: CALL_OW 114
// ComAgressiveMove ( sm_attack2 , 98 , 7 ) ;
14898: LD_EXP 10
14902: PPUSH
14903: LD_INT 98
14905: PPUSH
14906: LD_INT 7
14908: PPUSH
14909: CALL_OW 114
// Wait ( 0 0$20 ) ;
14913: LD_INT 700
14915: PPUSH
14916: CALL_OW 67
// AddComAgressiveMove ( sm_attack1 , 31 , 57 ) ;
14920: LD_EXP 9
14924: PPUSH
14925: LD_INT 31
14927: PPUSH
14928: LD_INT 57
14930: PPUSH
14931: CALL_OW 174
// AddComAgressiveMove ( sm_attack2 , 80 , 24 ) ;
14935: LD_EXP 10
14939: PPUSH
14940: LD_INT 80
14942: PPUSH
14943: LD_INT 24
14945: PPUSH
14946: CALL_OW 174
// Wait ( 0 0$20 ) ;
14950: LD_INT 700
14952: PPUSH
14953: CALL_OW 67
// AddComAgressiveMove ( sm_attack1 , 40 , 71 ) ;
14957: LD_EXP 9
14961: PPUSH
14962: LD_INT 40
14964: PPUSH
14965: LD_INT 71
14967: PPUSH
14968: CALL_OW 174
// AddComAgressiveMove ( sm_attack2 , 90 , 39 ) ;
14972: LD_EXP 10
14976: PPUSH
14977: LD_INT 90
14979: PPUSH
14980: LD_INT 39
14982: PPUSH
14983: CALL_OW 174
// Wait ( 0 0$20 ) ;
14987: LD_INT 700
14989: PPUSH
14990: CALL_OW 67
// AddComAgressiveMove ( sm_attack1 , 79 , 81 ) ;
14994: LD_EXP 9
14998: PPUSH
14999: LD_INT 79
15001: PPUSH
15002: LD_INT 81
15004: PPUSH
15005: CALL_OW 174
// AddComAgressiveMove ( sm_attack2 , 101 , 62 ) ;
15009: LD_EXP 10
15013: PPUSH
15014: LD_INT 101
15016: PPUSH
15017: LD_INT 62
15019: PPUSH
15020: CALL_OW 174
// Wait ( 0 0$20 ) ;
15024: LD_INT 700
15026: PPUSH
15027: CALL_OW 67
// my_filter := FilterUnitsInArea ( KnollArea , [ f_side , you ] ) ;
15031: LD_ADDR_VAR 0 2
15035: PUSH
15036: LD_INT 2
15038: PPUSH
15039: LD_INT 22
15041: PUSH
15042: LD_EXP 4
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 70
15055: ST_TO_ADDR
// if my_filter = 0 then
15056: LD_VAR 0 2
15060: PUSH
15061: LD_INT 0
15063: EQUAL
15064: IFFALSE 15101
// begin AddComAgressiveMove ( sm_attack1 , 73 , 138 ) ;
15066: LD_EXP 9
15070: PPUSH
15071: LD_INT 73
15073: PPUSH
15074: LD_INT 138
15076: PPUSH
15077: CALL_OW 174
// AddComAgressiveMove ( sm_attack2 , 73 , 138 ) ;
15081: LD_EXP 10
15085: PPUSH
15086: LD_INT 73
15088: PPUSH
15089: LD_INT 138
15091: PPUSH
15092: CALL_OW 174
// enable ( 12 ) ;
15096: LD_INT 12
15098: ENABLE_MARKED
// end else
15099: GO 15107
// begin enable ( 17 ) ;
15101: LD_INT 17
15103: ENABLE_MARKED
// enable ( 13 ) ;
15104: LD_INT 13
15106: ENABLE_MARKED
// end ; Wait ( 0 0$20 + attack_offset ) ;
15107: LD_INT 700
15109: PUSH
15110: LD_EXP 48
15114: PLUS
15115: PPUSH
15116: CALL_OW 67
// enable ( 10 ) ;
15120: LD_INT 10
15122: ENABLE_MARKED
// end ;
15123: LD_VAR 0 1
15127: RET
// every 0 0$0.9 marked 12 do var my_filter ;
15128: GO 15130
15130: DISABLE
15131: LD_INT 0
15133: PPUSH
// begin my_filter := FilterUnitsInArea ( BreakThruArea , [ f_side , arab ] ) ;
15134: LD_ADDR_VAR 0 1
15138: PUSH
15139: LD_INT 7
15141: PPUSH
15142: LD_INT 22
15144: PUSH
15145: LD_EXP 6
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PPUSH
15154: CALL_OW 70
15158: ST_TO_ADDR
// if my_filter + 0 > 0 then
15159: LD_VAR 0 1
15163: PUSH
15164: LD_INT 0
15166: PLUS
15167: PUSH
15168: LD_INT 0
15170: GREATER
15171: IFFALSE 15180
// YouLost ( ArabBreakthrough ) ;
15173: LD_STRING ArabBreakthrough
15175: PPUSH
15176: CALL_OW 104
// enable ;
15180: ENABLE
// end ;
15181: PPOPN 1
15183: END
// every 0 0$0.9 marked 13 do var my_filter , un ;
15184: GO 15186
15186: DISABLE
15187: LD_INT 0
15189: PPUSH
15190: PPUSH
// begin my_filter := FilterUnitsInArea ( KnollArea , [ f_side , you ] ) ;
15191: LD_ADDR_VAR 0 1
15195: PUSH
15196: LD_INT 2
15198: PPUSH
15199: LD_INT 22
15201: PUSH
15202: LD_EXP 4
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 70
15215: ST_TO_ADDR
// if ( 0 + my_filter ) = 0 then
15216: LD_INT 0
15218: PUSH
15219: LD_VAR 0 1
15223: PLUS
15224: PUSH
15225: LD_INT 0
15227: EQUAL
15228: IFFALSE 15327
// begin for un in sm_attack1 do
15230: LD_ADDR_VAR 0 2
15234: PUSH
15235: LD_EXP 9
15239: PUSH
15240: FOR_IN
15241: IFFALSE 15271
// if isok ( un ) then
15243: LD_VAR 0 2
15247: PPUSH
15248: CALL_OW 302
15252: IFFALSE 15269
// AddComAgressiveMove ( un , 73 , 138 ) ;
15254: LD_VAR 0 2
15258: PPUSH
15259: LD_INT 73
15261: PPUSH
15262: LD_INT 138
15264: PPUSH
15265: CALL_OW 174
15269: GO 15240
15271: POP
15272: POP
// for un in sm_attack2 do
15273: LD_ADDR_VAR 0 2
15277: PUSH
15278: LD_EXP 10
15282: PUSH
15283: FOR_IN
15284: IFFALSE 15314
// if isok ( un ) then
15286: LD_VAR 0 2
15290: PPUSH
15291: CALL_OW 302
15295: IFFALSE 15312
// AddComAgressiveMove ( un , 73 , 138 ) ;
15297: LD_VAR 0 2
15301: PPUSH
15302: LD_INT 73
15304: PPUSH
15305: LD_INT 138
15307: PPUSH
15308: CALL_OW 174
15312: GO 15283
15314: POP
15315: POP
// enable ( 12 ) ;
15316: LD_INT 12
15318: ENABLE_MARKED
// Disabled13 := true ;
15319: LD_ADDR_EXP 69
15323: PUSH
15324: LD_INT 1
15326: ST_TO_ADDR
// end ; if not Disabled13 then
15327: LD_EXP 69
15331: NOT
15332: IFFALSE 15335
// enable ;
15334: ENABLE
// end ;
15335: PPOPN 2
15337: END
// every 0 0$1 marked 15 do
15338: GO 15340
15340: DISABLE
// begin Wait ( Gaydar_wait ) ;
15341: LD_EXP 3
15345: PPUSH
15346: CALL_OW 67
// if not IsDead ( Gaydar ) and sm_pocet3 < attack_count then
15350: LD_EXP 27
15354: PPUSH
15355: CALL_OW 301
15359: NOT
15360: PUSH
15361: LD_EXP 65
15365: PUSH
15366: LD_EXP 49
15370: LESS
15371: AND
15372: IFFALSE 15460
// begin sm_pocet3 := sm_pocet3 + 1 ;
15374: LD_ADDR_EXP 65
15378: PUSH
15379: LD_EXP 65
15383: PUSH
15384: LD_INT 1
15386: PLUS
15387: ST_TO_ADDR
// PlaceUnitXY ( sm_attack3 [ sm_pocet3 ] , 19 , 2 , false ) ;
15388: LD_EXP 11
15392: PUSH
15393: LD_EXP 65
15397: ARRAY
15398: PPUSH
15399: LD_INT 19
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: LD_INT 0
15407: PPUSH
15408: CALL_OW 48
// ComMoveToArea ( sm_attack3 [ sm_pocet3 ] , PaloukArea ) ;
15412: LD_EXP 11
15416: PUSH
15417: LD_EXP 65
15421: ARRAY
15422: PPUSH
15423: LD_INT 6
15425: PPUSH
15426: CALL_OW 113
// Wait ( 10 ) ;
15430: LD_INT 10
15432: PPUSH
15433: CALL_OW 67
// AddComAttackUnit ( sm_attack3 [ sm_pocet3 ] , Gaydar ) ;
15437: LD_EXP 11
15441: PUSH
15442: LD_EXP 65
15446: ARRAY
15447: PPUSH
15448: LD_EXP 27
15452: PPUSH
15453: CALL_OW 175
// enable ;
15457: ENABLE
// end else
15458: GO 15461
// disable ;
15460: DISABLE
// end ;
15461: END
// every 0 0$1 marked 17 do var my_filter , un1 , un2 , distance , un_mem ;
15462: GO 15464
15464: DISABLE
15465: LD_INT 0
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
// begin my_filter := FilterUnitsInArea ( KnollArea , [ f_side , you ] ) ;
15472: LD_ADDR_VAR 0 1
15476: PUSH
15477: LD_INT 2
15479: PPUSH
15480: LD_INT 22
15482: PUSH
15483: LD_EXP 4
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 70
15496: ST_TO_ADDR
// if my_filter <> [ ] then
15497: LD_VAR 0 1
15501: PUSH
15502: EMPTY
15503: NONEQUAL
15504: IFFALSE 15854
// begin for un1 in sm_attack1 do
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_EXP 9
15515: PUSH
15516: FOR_IN
15517: IFFALSE 15678
// begin if IsOK ( un1 ) then
15519: LD_VAR 0 2
15523: PPUSH
15524: CALL_OW 302
15528: IFFALSE 15660
// begin distance := GetDistUnits ( un1 , my_filter [ 1 ] ) ;
15530: LD_ADDR_VAR 0 4
15534: PUSH
15535: LD_VAR 0 2
15539: PPUSH
15540: LD_VAR 0 1
15544: PUSH
15545: LD_INT 1
15547: ARRAY
15548: PPUSH
15549: CALL_OW 296
15553: ST_TO_ADDR
// un_mem := my_filter [ 1 ] ;
15554: LD_ADDR_VAR 0 5
15558: PUSH
15559: LD_VAR 0 1
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: ST_TO_ADDR
// for un2 in my_filter do
15568: LD_ADDR_VAR 0 3
15572: PUSH
15573: LD_VAR 0 1
15577: PUSH
15578: FOR_IN
15579: IFFALSE 15642
// begin if distance > GetDistUnits ( un1 , un2 ) then
15581: LD_VAR 0 4
15585: PUSH
15586: LD_VAR 0 2
15590: PPUSH
15591: LD_VAR 0 3
15595: PPUSH
15596: CALL_OW 296
15600: GREATER
15601: IFFALSE 15633
// begin distance := GetDistUnits ( un1 , un2 ) ;
15603: LD_ADDR_VAR 0 4
15607: PUSH
15608: LD_VAR 0 2
15612: PPUSH
15613: LD_VAR 0 3
15617: PPUSH
15618: CALL_OW 296
15622: ST_TO_ADDR
// un_mem := un2 ;
15623: LD_ADDR_VAR 0 5
15627: PUSH
15628: LD_VAR 0 3
15632: ST_TO_ADDR
// end ; Wait ( 3 ) ;
15633: LD_INT 3
15635: PPUSH
15636: CALL_OW 67
// end ;
15640: GO 15578
15642: POP
15643: POP
// ComAttackUnit ( un1 , un2 ) ;
15644: LD_VAR 0 2
15648: PPUSH
15649: LD_VAR 0 3
15653: PPUSH
15654: CALL_OW 115
// end else
15658: GO 15676
// sm_attack1 := sm_attack1 diff un1 ;
15660: LD_ADDR_EXP 9
15664: PUSH
15665: LD_EXP 9
15669: PUSH
15670: LD_VAR 0 2
15674: DIFF
15675: ST_TO_ADDR
// end ;
15676: GO 15516
15678: POP
15679: POP
// for un1 in sm_attack2 do
15680: LD_ADDR_VAR 0 2
15684: PUSH
15685: LD_EXP 10
15689: PUSH
15690: FOR_IN
15691: IFFALSE 15852
// begin if IsOK ( un1 ) then
15693: LD_VAR 0 2
15697: PPUSH
15698: CALL_OW 302
15702: IFFALSE 15834
// begin distance := GetDistUnits ( un1 , my_filter [ 1 ] ) ;
15704: LD_ADDR_VAR 0 4
15708: PUSH
15709: LD_VAR 0 2
15713: PPUSH
15714: LD_VAR 0 1
15718: PUSH
15719: LD_INT 1
15721: ARRAY
15722: PPUSH
15723: CALL_OW 296
15727: ST_TO_ADDR
// un_mem := my_filter [ 1 ] ;
15728: LD_ADDR_VAR 0 5
15732: PUSH
15733: LD_VAR 0 1
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: ST_TO_ADDR
// for un2 in my_filter do
15742: LD_ADDR_VAR 0 3
15746: PUSH
15747: LD_VAR 0 1
15751: PUSH
15752: FOR_IN
15753: IFFALSE 15816
// begin if distance > GetDistUnits ( un1 , un2 ) then
15755: LD_VAR 0 4
15759: PUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: LD_VAR 0 3
15769: PPUSH
15770: CALL_OW 296
15774: GREATER
15775: IFFALSE 15807
// begin distance := GetDistUnits ( un1 , un2 ) ;
15777: LD_ADDR_VAR 0 4
15781: PUSH
15782: LD_VAR 0 2
15786: PPUSH
15787: LD_VAR 0 3
15791: PPUSH
15792: CALL_OW 296
15796: ST_TO_ADDR
// un_mem := un2 ;
15797: LD_ADDR_VAR 0 5
15801: PUSH
15802: LD_VAR 0 3
15806: ST_TO_ADDR
// end ; Wait ( 3 ) ;
15807: LD_INT 3
15809: PPUSH
15810: CALL_OW 67
// end ;
15814: GO 15752
15816: POP
15817: POP
// ComAttackUnit ( un1 , un2 ) ;
15818: LD_VAR 0 2
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: CALL_OW 115
// end else
15832: GO 15850
// sm_attack2 := sm_attack2 diff un1 ;
15834: LD_ADDR_EXP 10
15838: PUSH
15839: LD_EXP 10
15843: PUSH
15844: LD_VAR 0 2
15848: DIFF
15849: ST_TO_ADDR
// end ;
15850: GO 15690
15852: POP
15853: POP
// end ; if sm_attack1 = [ ] and sm_attack2 = [ ] then
15854: LD_EXP 9
15858: PUSH
15859: EMPTY
15860: EQUAL
15861: PUSH
15862: LD_EXP 10
15866: PUSH
15867: EMPTY
15868: EQUAL
15869: AND
15870: IFFALSE 15875
// disable else
15872: DISABLE
15873: GO 15876
// enable ;
15875: ENABLE
// end ;
15876: PPOPN 5
15878: END
