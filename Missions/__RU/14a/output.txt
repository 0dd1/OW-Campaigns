// export you ; export MacMillan , Burlak ; export Masha ; function prepare_units ; var veh ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// MacMillan := CreateCharacter ( MacMillan ) ;
   4: LD_ADDR_EXP 2
   8: PUSH
   9: LD_STRING MacMillan
  11: PPUSH
  12: CALL_OW 34
  16: ST_TO_ADDR
// Burlak := CreateCharacter ( Burlak ) ;
  17: LD_ADDR_EXP 3
  21: PUSH
  22: LD_STRING Burlak
  24: PPUSH
  25: CALL_OW 34
  29: ST_TO_ADDR
// SetClass ( MacMillan , class_engineer ) ;
  30: LD_EXP 2
  34: PPUSH
  35: LD_INT 2
  37: PPUSH
  38: CALL_OW 336
// SetClass ( Burlak , class_mechanic ) ;
  42: LD_EXP 3
  46: PPUSH
  47: LD_INT 3
  49: PPUSH
  50: CALL_OW 336
// SetSide ( [ MacMillan , Burlak ] , you ) ;
  54: LD_EXP 2
  58: PUSH
  59: LD_EXP 3
  63: PUSH
  64: EMPTY
  65: LIST
  66: LIST
  67: PPUSH
  68: LD_EXP 1
  72: PPUSH
  73: CALL_OW 235
// veh := LoadVariable ( Masha , [ ] ) ;
  77: LD_ADDR_VAR 0 2
  81: PUSH
  82: LD_STRING Masha
  84: PPUSH
  85: EMPTY
  86: PPUSH
  87: CALL_OW 30
  91: ST_TO_ADDR
// if veh then
  92: LD_VAR 0 2
  96: IFFALSE 178
// begin vc_chassis := veh [ 1 ] ;
  98: LD_ADDR_OWVAR 37
 102: PUSH
 103: LD_VAR 0 2
 107: PUSH
 108: LD_INT 1
 110: ARRAY
 111: ST_TO_ADDR
// vc_engine := veh [ 2 ] ;
 112: LD_ADDR_OWVAR 39
 116: PUSH
 117: LD_VAR 0 2
 121: PUSH
 122: LD_INT 2
 124: ARRAY
 125: ST_TO_ADDR
// vc_control := veh [ 3 ] ;
 126: LD_ADDR_OWVAR 38
 130: PUSH
 131: LD_VAR 0 2
 135: PUSH
 136: LD_INT 3
 138: ARRAY
 139: ST_TO_ADDR
// vc_weapon := veh [ 4 ] ;
 140: LD_ADDR_OWVAR 40
 144: PUSH
 145: LD_VAR 0 2
 149: PUSH
 150: LD_INT 4
 152: ARRAY
 153: ST_TO_ADDR
// Masha := CreateVehicle ;
 154: LD_ADDR_EXP 4
 158: PUSH
 159: CALL_OW 45
 163: ST_TO_ADDR
// SetMark ( Masha , 1 ) ;
 164: LD_EXP 4
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: CALL_OW 242
// end else
 176: GO 186
// Masha := false ;
 178: LD_ADDR_EXP 4
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// PlaceUnitArea ( MacMillan , central , false ) ;
 186: LD_EXP 2
 190: PPUSH
 191: LD_INT 1
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 49
// PlaceUnitArea ( Burlak , central , false ) ;
 201: LD_EXP 3
 205: PPUSH
 206: LD_INT 1
 208: PPUSH
 209: LD_INT 0
 211: PPUSH
 212: CALL_OW 49
// end ;
 216: LD_VAR 0 1
 220: RET
// function prepare_freedom ; var building , un , x , y , dir , weap , Freedom ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
// uc_side := 7 ;
 231: LD_ADDR_OWVAR 20
 235: PUSH
 236: LD_INT 7
 238: ST_TO_ADDR
// Freedom := LoadVariable ( Freedom , [ ] ) ;
 239: LD_ADDR_VAR 0 8
 243: PUSH
 244: LD_STRING Freedom
 246: PPUSH
 247: EMPTY
 248: PPUSH
 249: CALL_OW 30
 253: ST_TO_ADDR
// for building in freedom do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: LD_VAR 0 8
 263: PUSH
 264: FOR_IN
 265: IFFALSE 508
// begin weap := false ;
 267: LD_ADDR_VAR 0 7
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// x := building [ 1 ] ;
 275: LD_ADDR_VAR 0 4
 279: PUSH
 280: LD_VAR 0 2
 284: PUSH
 285: LD_INT 1
 287: ARRAY
 288: ST_TO_ADDR
// y := building [ 2 ] ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_VAR 0 2
 298: PUSH
 299: LD_INT 2
 301: ARRAY
 302: ST_TO_ADDR
// dir := building [ 3 ] ;
 303: LD_ADDR_VAR 0 6
 307: PUSH
 308: LD_VAR 0 2
 312: PUSH
 313: LD_INT 3
 315: ARRAY
 316: ST_TO_ADDR
// bc_type := building [ 4 ] ;
 317: LD_ADDR_OWVAR 42
 321: PUSH
 322: LD_VAR 0 2
 326: PUSH
 327: LD_INT 4
 329: ARRAY
 330: ST_TO_ADDR
// bc_level := building [ 5 ] ;
 331: LD_ADDR_OWVAR 43
 335: PUSH
 336: LD_VAR 0 2
 340: PUSH
 341: LD_INT 5
 343: ARRAY
 344: ST_TO_ADDR
// uc_nation := building [ 6 ] ;
 345: LD_ADDR_OWVAR 21
 349: PUSH
 350: LD_VAR 0 2
 354: PUSH
 355: LD_INT 6
 357: ARRAY
 358: ST_TO_ADDR
// if building > 7 then
 359: LD_VAR 0 2
 363: PUSH
 364: LD_INT 7
 366: GREATER
 367: IFFALSE 397
// begin bc_kind1 := building [ 7 ] ;
 369: LD_ADDR_OWVAR 44
 373: PUSH
 374: LD_VAR 0 2
 378: PUSH
 379: LD_INT 7
 381: ARRAY
 382: ST_TO_ADDR
// bc_kind2 := building [ 8 ] ;
 383: LD_ADDR_OWVAR 45
 387: PUSH
 388: LD_VAR 0 2
 392: PUSH
 393: LD_INT 8
 395: ARRAY
 396: ST_TO_ADDR
// end ; if ( building + 0 ) = 7 then
 397: LD_VAR 0 2
 401: PUSH
 402: LD_INT 0
 404: PLUS
 405: PUSH
 406: LD_INT 7
 408: EQUAL
 409: IFFALSE 425
// weap := building [ 7 ] ;
 411: LD_ADDR_VAR 0 7
 415: PUSH
 416: LD_VAR 0 2
 420: PUSH
 421: LD_INT 7
 423: ARRAY
 424: ST_TO_ADDR
// if bc_type in [ b_oil_mine , b_siberite_mine ] then
 425: LD_OWVAR 42
 429: PUSH
 430: LD_INT 29
 432: PUSH
 433: LD_INT 30
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: IN
 440: IFFALSE 461
// SetResourceVisibility ( x , y , you ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 5
 451: PPUSH
 452: LD_EXP 1
 456: PPUSH
 457: CALL_OW 441
// un := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
 461: LD_ADDR_VAR 0 3
 465: PUSH
 466: LD_VAR 0 4
 470: PPUSH
 471: LD_VAR 0 5
 475: PPUSH
 476: LD_VAR 0 6
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// if weap then
 486: LD_VAR 0 7
 490: IFFALSE 506
// PlaceWeaponTurret ( un , weap ) ;
 492: LD_VAR 0 3
 496: PPUSH
 497: LD_VAR 0 7
 501: PPUSH
 502: CALL_OW 431
// end ;
 506: GO 264
 508: POP
 509: POP
// building := FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 510: LD_ADDR_VAR 0 2
 514: PUSH
 515: LD_INT 22
 517: PUSH
 518: LD_EXP 1
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 30
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PPUSH
 559: CALL_OW 69
 563: ST_TO_ADDR
// for un in building do
 564: LD_ADDR_VAR 0 3
 568: PUSH
 569: LD_VAR 0 2
 573: PUSH
 574: FOR_IN
 575: IFFALSE 639
// begin SetResourceType ( GetBase ( un ) , mat_cans , 125 ) ;
 577: LD_VAR 0 3
 581: PPUSH
 582: CALL_OW 274
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: LD_INT 125
 592: PPUSH
 593: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_oil , 38 ) ;
 597: LD_VAR 0 3
 601: PPUSH
 602: CALL_OW 274
 606: PPUSH
 607: LD_INT 2
 609: PPUSH
 610: LD_INT 38
 612: PPUSH
 613: CALL_OW 277
// SetResourceType ( GetBase ( un ) , mat_siberit , 12 ) ;
 617: LD_VAR 0 3
 621: PPUSH
 622: CALL_OW 274
 626: PPUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 12
 632: PPUSH
 633: CALL_OW 277
// end ;
 637: GO 574
 639: POP
 640: POP
// end ;
 641: LD_VAR 0 1
 645: RET
// function prepare_sides ; begin
 646: LD_INT 0
 648: PPUSH
// you := 7 ;
 649: LD_ADDR_EXP 1
 653: PUSH
 654: LD_INT 7
 656: ST_TO_ADDR
// disable ( 1 ) ;
 657: LD_INT 1
 659: DISABLE_MARKED
// end ;
 660: LD_VAR 0 1
 664: RET
// starting begin prepare_sides ;
 665: CALL 646 0 0
// prepare_freedom ;
 669: CALL 221 0 0
// prepare_units ;
 673: CALL 0 0 0
// add_new_vehicles ;
 677: CALL 1724 0 0
// starting_scene ;
 681: CALL 686 0 0
// end ; end_of_file
 685: END
// var JMM_car , Bur_car ; var JMM_load , Bur_load ; var truck_selected , masha_on ; export function starting_scene ; begin
 686: LD_INT 0
 688: PPUSH
// interface_hidden := true ;
 689: LD_ADDR_OWVAR 54
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// RevealFogArea ( you , all_fog ) ;
 697: LD_EXP 1
 701: PPUSH
 702: LD_INT 2
 704: PPUSH
 705: CALL_OW 332
// ComTurnUnit ( MacMillan , Burlak ) ;
 709: LD_EXP 2
 713: PPUSH
 714: LD_EXP 3
 718: PPUSH
 719: CALL_OW 119
// ComTurnUnit ( Burlak , MacMillan ) ;
 723: LD_EXP 3
 727: PPUSH
 728: LD_EXP 2
 732: PPUSH
 733: CALL_OW 119
// wait ( 10 ) ;
 737: LD_INT 10
 739: PPUSH
 740: CALL_OW 67
// DialogueOn ;
 744: CALL_OW 6
// interface_hidden := true ;
 748: LD_ADDR_OWVAR 54
 752: PUSH
 753: LD_INT 1
 755: ST_TO_ADDR
// Say ( MacMillan , D1-JMM-1 ) ;
 756: LD_EXP 2
 760: PPUSH
 761: LD_STRING D1-JMM-1
 763: PPUSH
 764: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
 768: LD_EXP 3
 772: PPUSH
 773: LD_STRING D1-Bur-1
 775: PPUSH
 776: CALL_OW 88
// Say ( MacMillan , D1-JMM-2 ) ;
 780: LD_EXP 2
 784: PPUSH
 785: LD_STRING D1-JMM-2
 787: PPUSH
 788: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
 792: LD_EXP 3
 796: PPUSH
 797: LD_STRING D1-Bur-2
 799: PPUSH
 800: CALL_OW 88
// Say ( MacMillan , D1-JMM-3 ) ;
 804: LD_EXP 2
 808: PPUSH
 809: LD_STRING D1-JMM-3
 811: PPUSH
 812: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
 816: LD_EXP 3
 820: PPUSH
 821: LD_STRING D1-Bur-3
 823: PPUSH
 824: CALL_OW 88
// Say ( MacMillan , D1-JMM-4 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_STRING D1-JMM-4
 835: PPUSH
 836: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
 840: LD_EXP 3
 844: PPUSH
 845: LD_STRING D1-Bur-4
 847: PPUSH
 848: CALL_OW 88
// Say ( MacMillan , D1-JMM-5 ) ;
 852: LD_EXP 2
 856: PPUSH
 857: LD_STRING D1-JMM-5
 859: PPUSH
 860: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_STRING D1-Bur-5
 871: PPUSH
 872: CALL_OW 88
// Say ( MacMillan , D1-JMM-6 ) ;
 876: LD_EXP 2
 880: PPUSH
 881: LD_STRING D1-JMM-6
 883: PPUSH
 884: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
 888: LD_EXP 3
 892: PPUSH
 893: LD_STRING D1-Bur-6
 895: PPUSH
 896: CALL_OW 88
// wait ( 20 ) ;
 900: LD_INT 20
 902: PPUSH
 903: CALL_OW 67
// Query ( QTruck ) ;
 907: LD_STRING QTruck
 909: PPUSH
 910: CALL_OW 97
// interface_hidden := false ;
 914: LD_ADDR_OWVAR 54
 918: PUSH
 919: LD_INT 0
 921: ST_TO_ADDR
// DialogueOff ;
 922: CALL_OW 7
// JMM_car := [ ] ;
 926: LD_ADDR_LOC 1
 930: PUSH
 931: EMPTY
 932: ST_TO_ADDR
// Bur_car := [ ] ;
 933: LD_ADDR_LOC 2
 937: PUSH
 938: EMPTY
 939: ST_TO_ADDR
// JMM_load := 0 ;
 940: LD_ADDR_LOC 3
 944: PUSH
 945: LD_INT 0
 947: ST_TO_ADDR
// Bur_load := 0 ;
 948: LD_ADDR_LOC 4
 952: PUSH
 953: LD_INT 0
 955: ST_TO_ADDR
// truck_selected := false ;
 956: LD_ADDR_LOC 5
 960: PUSH
 961: LD_INT 0
 963: ST_TO_ADDR
// masha_on := false ;
 964: LD_ADDR_LOC 6
 968: PUSH
 969: LD_INT 0
 971: ST_TO_ADDR
// ChangeMissionObjectives ( MPickup ) ;
 972: LD_STRING MPickup
 974: PPUSH
 975: CALL_OW 337
// enable ( 1 ) ;
 979: LD_INT 1
 981: ENABLE_MARKED
// SetAreaMapShow ( leaving_border , 1 ) ;
 982: LD_INT 5
 984: PPUSH
 985: LD_INT 1
 987: PPUSH
 988: CALL_OW 424
// end ;
 992: LD_VAR 0 1
 996: RET
// every 0 0$1 trigger IsInArea ( MacMillan , leaving ) marked 1 do var un , go ;
 997: LD_EXP 2
1001: PPUSH
1002: LD_INT 4
1004: PPUSH
1005: CALL_OW 308
1009: IFFALSE 1293
1011: GO 1013
1013: DISABLE
1014: LD_INT 0
1016: PPUSH
1017: PPUSH
// begin go := true ;
1018: LD_ADDR_VAR 0 2
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// un := IsInUnit ( MacMillan ) ;
1026: LD_ADDR_VAR 0 1
1030: PUSH
1031: LD_EXP 2
1035: PPUSH
1036: CALL_OW 310
1040: ST_TO_ADDR
// if un and not IsOK ( Burlak ) and not truck_selected and not ( GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay ] ) then
1041: LD_VAR 0 1
1045: PUSH
1046: LD_EXP 3
1050: PPUSH
1051: CALL_OW 302
1055: NOT
1056: AND
1057: PUSH
1058: LD_LOC 5
1062: NOT
1063: AND
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 264
1074: PUSH
1075: LD_INT 12
1077: PUSH
1078: LD_INT 51
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: IN
1085: NOT
1086: AND
1087: IFFALSE 1097
// go := false ;
1089: LD_ADDR_VAR 0 2
1093: PUSH
1094: LD_INT 0
1096: ST_TO_ADDR
// if un and go then
1097: LD_VAR 0 1
1101: PUSH
1102: LD_VAR 0 2
1106: AND
1107: IFFALSE 1263
// begin RemoveUnit ( MacMillan ) ;
1109: LD_EXP 2
1113: PPUSH
1114: CALL_OW 64
// JMM_car := [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
1118: LD_ADDR_LOC 1
1122: PUSH
1123: LD_VAR 0 1
1127: PPUSH
1128: CALL_OW 265
1132: PUSH
1133: LD_VAR 0 1
1137: PPUSH
1138: CALL_OW 262
1142: PUSH
1143: LD_VAR 0 1
1147: PPUSH
1148: CALL_OW 263
1152: PUSH
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 264
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// if ( GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay ] ) then
1169: LD_VAR 0 1
1173: PPUSH
1174: CALL_OW 264
1178: PUSH
1179: LD_INT 12
1181: PUSH
1182: LD_INT 51
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: IN
1189: IFFALSE 1232
// begin if ( GetCargoType ( un ) = mat_oil ) then
1191: LD_VAR 0 1
1195: PPUSH
1196: CALL_OW 288
1200: PUSH
1201: LD_INT 2
1203: EQUAL
1204: IFFALSE 1224
// JMM_load := GetCargo ( un , mat_oil ) ;
1206: LD_ADDR_LOC 3
1210: PUSH
1211: LD_VAR 0 1
1215: PPUSH
1216: LD_INT 2
1218: PPUSH
1219: CALL_OW 289
1223: ST_TO_ADDR
// truck_selected := true ;
1224: LD_ADDR_LOC 5
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// end ; if un = Masha then
1232: LD_VAR 0 1
1236: PUSH
1237: LD_EXP 4
1241: EQUAL
1242: IFFALSE 1252
// masha_on := true ;
1244: LD_ADDR_LOC 6
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// RemoveUnit ( un ) ;
1252: LD_VAR 0 1
1256: PPUSH
1257: CALL_OW 64
// end else
1261: GO 1292
// begin Query ( QTruck ) ;
1263: LD_STRING QTruck
1265: PPUSH
1266: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
1270: LD_INT 35
1272: PPUSH
1273: CALL_OW 67
// until not IsInArea ( MacMillan , leaving ) ;
1277: LD_EXP 2
1281: PPUSH
1282: LD_INT 4
1284: PPUSH
1285: CALL_OW 308
1289: NOT
1290: IFFALSE 1270
// end ; enable ;
1292: ENABLE
// end ;
1293: PPOPN 2
1295: END
// every 0 0$1 trigger IsInArea ( Burlak , leaving ) marked 1 do var un , go ;
1296: LD_EXP 3
1300: PPUSH
1301: LD_INT 4
1303: PPUSH
1304: CALL_OW 308
1308: IFFALSE 1592
1310: GO 1312
1312: DISABLE
1313: LD_INT 0
1315: PPUSH
1316: PPUSH
// begin go := true ;
1317: LD_ADDR_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ST_TO_ADDR
// un := IsInUnit ( Burlak ) ;
1325: LD_ADDR_VAR 0 1
1329: PUSH
1330: LD_EXP 3
1334: PPUSH
1335: CALL_OW 310
1339: ST_TO_ADDR
// if un and not IsOK ( MacMillan ) and not truck_selected and not ( GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay ] ) then
1340: LD_VAR 0 1
1344: PUSH
1345: LD_EXP 2
1349: PPUSH
1350: CALL_OW 302
1354: NOT
1355: AND
1356: PUSH
1357: LD_LOC 5
1361: NOT
1362: AND
1363: PUSH
1364: LD_VAR 0 1
1368: PPUSH
1369: CALL_OW 264
1373: PUSH
1374: LD_INT 12
1376: PUSH
1377: LD_INT 51
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: IN
1384: NOT
1385: AND
1386: IFFALSE 1396
// go := false ;
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_INT 0
1395: ST_TO_ADDR
// if un and go then
1396: LD_VAR 0 1
1400: PUSH
1401: LD_VAR 0 2
1405: AND
1406: IFFALSE 1562
// begin RemoveUnit ( Burlak ) ;
1408: LD_EXP 3
1412: PPUSH
1413: CALL_OW 64
// Bur_car := [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
1417: LD_ADDR_LOC 2
1421: PUSH
1422: LD_VAR 0 1
1426: PPUSH
1427: CALL_OW 265
1431: PUSH
1432: LD_VAR 0 1
1436: PPUSH
1437: CALL_OW 262
1441: PUSH
1442: LD_VAR 0 1
1446: PPUSH
1447: CALL_OW 263
1451: PUSH
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 264
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: ST_TO_ADDR
// if ( GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay ] ) then
1468: LD_VAR 0 1
1472: PPUSH
1473: CALL_OW 264
1477: PUSH
1478: LD_INT 12
1480: PUSH
1481: LD_INT 51
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: IN
1488: IFFALSE 1531
// begin if ( GetCargoType ( un ) = mat_oil ) then
1490: LD_VAR 0 1
1494: PPUSH
1495: CALL_OW 288
1499: PUSH
1500: LD_INT 2
1502: EQUAL
1503: IFFALSE 1523
// Bur_load := GetCargo ( un , mat_oil ) ;
1505: LD_ADDR_LOC 4
1509: PUSH
1510: LD_VAR 0 1
1514: PPUSH
1515: LD_INT 2
1517: PPUSH
1518: CALL_OW 289
1522: ST_TO_ADDR
// truck_selected := true ;
1523: LD_ADDR_LOC 5
1527: PUSH
1528: LD_INT 1
1530: ST_TO_ADDR
// end ; if un = Masha then
1531: LD_VAR 0 1
1535: PUSH
1536: LD_EXP 4
1540: EQUAL
1541: IFFALSE 1551
// masha_on := true ;
1543: LD_ADDR_LOC 6
1547: PUSH
1548: LD_INT 1
1550: ST_TO_ADDR
// RemoveUnit ( un ) ;
1551: LD_VAR 0 1
1555: PPUSH
1556: CALL_OW 64
// end else
1560: GO 1591
// begin Query ( QTruck ) ;
1562: LD_STRING QTruck
1564: PPUSH
1565: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
1569: LD_INT 35
1571: PPUSH
1572: CALL_OW 67
// until not IsInArea ( Burlak , leaving ) ;
1576: LD_EXP 3
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: CALL_OW 308
1588: NOT
1589: IFFALSE 1569
// end ; enable ;
1591: ENABLE
// end ;
1592: PPOPN 2
1594: END
// every 0 0$1 trigger not ( IsOK ( MacMillan ) or IsOK ( Burlak ) ) do
1595: LD_EXP 2
1599: PPUSH
1600: CALL_OW 302
1604: PUSH
1605: LD_EXP 3
1609: PPUSH
1610: CALL_OW 302
1614: OR
1615: NOT
1616: IFFALSE 1723
1618: GO 1620
1620: DISABLE
// begin SaveCharacters ( MacMillan , JMM ) ;
1621: LD_EXP 2
1625: PPUSH
1626: LD_STRING JMM
1628: PPUSH
1629: CALL_OW 38
// SaveCharacters ( Burlak , Burlak ) ;
1633: LD_EXP 3
1637: PPUSH
1638: LD_STRING Burlak
1640: PPUSH
1641: CALL_OW 38
// SaveVariable ( JMM_car , JMM_car ) ;
1645: LD_LOC 1
1649: PPUSH
1650: LD_STRING JMM_car
1652: PPUSH
1653: CALL_OW 39
// SaveVariable ( Bur_car , Bur_car ) ;
1657: LD_LOC 2
1661: PPUSH
1662: LD_STRING Bur_car
1664: PPUSH
1665: CALL_OW 39
// SaveVariable ( JMM_load , JMM_car_load ) ;
1669: LD_LOC 3
1673: PPUSH
1674: LD_STRING JMM_car_load
1676: PPUSH
1677: CALL_OW 39
// SaveVariable ( Bur_load , Bur_car_load ) ;
1681: LD_LOC 4
1685: PPUSH
1686: LD_STRING Bur_car_load
1688: PPUSH
1689: CALL_OW 39
// if ( not masha_on ) and Masha then
1693: LD_LOC 6
1697: NOT
1698: PUSH
1699: LD_EXP 4
1703: AND
1704: IFFALSE 1713
// DeleteVariable ( Masha ) ;
1706: LD_STRING Masha
1708: PPUSH
1709: CALL_OW 41
// ChangeMap ( %_cont , %_cont ) ;
1713: LD_STRING %_cont
1715: PPUSH
1716: LD_STRING %_cont
1718: PPUSH
1719: CALL_OW 340
// end ; end_of_file
1723: END
// var vehicle_list ; export function add_new_vehicles ; var vehicle , un ; begin
1724: LD_INT 0
1726: PPUSH
1727: PPUSH
1728: PPUSH
// vehicle_list := [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun ] , [ us_medium_tracked , engine_siberite , control_manual , us_cargo_bay ] , [ ru_medium_tracked , engine_siberite , control_manual , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_siberite , control_manual , ru_rocket_launcher ] , [ us_heavy_tracked , engine_siberite , control_manual , us_bulldozer ] , [ ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun ] , ] ;
1729: LD_ADDR_LOC 7
1733: PUSH
1734: LD_INT 21
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: LD_INT 1
1742: PUSH
1743: LD_INT 51
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 21
1754: PUSH
1755: LD_INT 1
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: LD_INT 44
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 3
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: LD_INT 1
1778: PUSH
1779: LD_INT 12
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 22
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_INT 43
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 22
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: LD_INT 45
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 23
1826: PUSH
1827: LD_INT 3
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 45
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 4
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: LD_INT 14
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 24
1862: PUSH
1863: LD_INT 1
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 46
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
// uc_side := you ;
1888: LD_ADDR_OWVAR 20
1892: PUSH
1893: LD_EXP 1
1897: ST_TO_ADDR
// for vehicle in vehicle_list do
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_LOC 7
1907: PUSH
1908: FOR_IN
1909: IFFALSE 2070
// begin if vehicle [ 1 ] in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] then
1911: LD_VAR 0 2
1915: PUSH
1916: LD_INT 1
1918: ARRAY
1919: PUSH
1920: LD_INT 21
1922: PUSH
1923: LD_INT 22
1925: PUSH
1926: LD_INT 23
1928: PUSH
1929: LD_INT 24
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: IN
1938: IFFALSE 1950
// uc_nation := nation_russian else
1940: LD_ADDR_OWVAR 21
1944: PUSH
1945: LD_INT 3
1947: ST_TO_ADDR
1948: GO 1958
// uc_nation := nation_american ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 1
1957: ST_TO_ADDR
// uc_direction := Rand ( 0 , 5 ) ;
1958: LD_ADDR_OWVAR 24
1962: PUSH
1963: LD_INT 0
1965: PPUSH
1966: LD_INT 5
1968: PPUSH
1969: CALL_OW 12
1973: ST_TO_ADDR
// vc_chassis := vehicle [ 1 ] ;
1974: LD_ADDR_OWVAR 37
1978: PUSH
1979: LD_VAR 0 2
1983: PUSH
1984: LD_INT 1
1986: ARRAY
1987: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_siberite ] [ Rand ( 1 , 2 ) ] ;
1988: LD_ADDR_OWVAR 39
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: CALL_OW 12
2013: ARRAY
2014: ST_TO_ADDR
// vc_control := vehicle [ 3 ] ;
2015: LD_ADDR_OWVAR 38
2019: PUSH
2020: LD_VAR 0 2
2024: PUSH
2025: LD_INT 3
2027: ARRAY
2028: ST_TO_ADDR
// vc_weapon := vehicle [ 4 ] ;
2029: LD_ADDR_OWVAR 40
2033: PUSH
2034: LD_VAR 0 2
2038: PUSH
2039: LD_INT 4
2041: ARRAY
2042: ST_TO_ADDR
// un := CreateVehicle ;
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: CALL_OW 45
2052: ST_TO_ADDR
// PlaceUnitArea ( un , base , false ) ;
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_INT 3
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL_OW 49
// end ;
2068: GO 1908
2070: POP
2071: POP
// end ; end_of_file
2072: LD_VAR 0 1
2076: RET
// on UnitDestroyed ( un ) do begin if un = MacMillan then
2077: LD_VAR 0 1
2081: PUSH
2082: LD_EXP 2
2086: EQUAL
2087: IFFALSE 2096
// Mission_Failed ( 1 ) ;
2089: LD_INT 1
2091: PPUSH
2092: CALL 2118 0 1
// if un = Burlak then
2096: LD_VAR 0 1
2100: PUSH
2101: LD_EXP 3
2105: EQUAL
2106: IFFALSE 2115
// Mission_Failed ( 2 ) end ;
2108: LD_INT 2
2110: PPUSH
2111: CALL 2118 0 1
2115: PPOPN 1
2117: END
// function Mission_Failed ( un ) ; begin
2118: LD_INT 0
2120: PPUSH
// case un of 1 :
2121: LD_VAR 0 1
2125: PUSH
2126: LD_INT 1
2128: DOUBLE
2129: EQUAL
2130: IFTRUE 2134
2132: GO 2144
2134: POP
// YouLost ( JMM ) ; 2 :
2135: LD_STRING JMM
2137: PPUSH
2138: CALL_OW 104
2142: GO 2163
2144: LD_INT 2
2146: DOUBLE
2147: EQUAL
2148: IFTRUE 2152
2150: GO 2162
2152: POP
// YouLost ( Burlak ) ; end ;
2153: LD_STRING Burlak
2155: PPUSH
2156: CALL_OW 104
2160: GO 2163
2162: POP
// end ; end_of_file
2163: LD_VAR 0 2
2167: RET
// every 0 0$2 trigger GetClass ( MacMillan ) <> class_engineer do
2168: LD_EXP 2
2172: PPUSH
2173: CALL_OW 257
2177: PUSH
2178: LD_INT 2
2180: NONEQUAL
2181: IFFALSE 2191
2183: GO 2185
2185: DISABLE
// begin MacMillan_To_Engineer ;
2186: CALL 2192 0 0
// enable ;
2190: ENABLE
// end ;
2191: END
// function MacMillan_To_Engineer ; var depot ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
// depot := FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
2196: LD_ADDR_VAR 0 2
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: LD_INT 30
2206: PUSH
2207: LD_INT 0
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 30
2216: PUSH
2217: LD_INT 1
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 69
2233: ST_TO_ADDR
// if depot then
2234: LD_VAR 0 2
2238: IFFALSE 2367
// begin depot := depot [ 1 ] ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: LD_VAR 0 2
2249: PUSH
2250: LD_INT 1
2252: ARRAY
2253: ST_TO_ADDR
// InGameOn ;
2254: CALL_OW 8
// if IsInUnit ( MacMillan ) then
2258: LD_EXP 2
2262: PPUSH
2263: CALL_OW 310
2267: IFFALSE 2278
// ComExitBuilding ( MacMillan ) ;
2269: LD_EXP 2
2273: PPUSH
2274: CALL_OW 122
// while GetClass ( MacMillan ) <> class_engineer do
2278: LD_EXP 2
2282: PPUSH
2283: CALL_OW 257
2287: PUSH
2288: LD_INT 2
2290: NONEQUAL
2291: IFFALSE 2363
// begin CenterOnUnits ( MacMillan ) ;
2293: LD_EXP 2
2297: PPUSH
2298: CALL_OW 85
// ComEnterUnit ( MacMillan , depot ) ;
2302: LD_EXP 2
2306: PPUSH
2307: LD_VAR 0 2
2311: PPUSH
2312: CALL_OW 120
// if IsInUnit ( MacMillan ) = depot then
2316: LD_EXP 2
2320: PPUSH
2321: CALL_OW 310
2325: PUSH
2326: LD_VAR 0 2
2330: EQUAL
2331: IFFALSE 2354
// begin ComChangeProfession ( MacMillan , class_engineer ) ;
2333: LD_EXP 2
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL_OW 123
// AddComExitBuilding ( MacMillan ) ;
2345: LD_EXP 2
2349: PPUSH
2350: CALL_OW 182
// end ; wait ( 0 0$1 ) ;
2354: LD_INT 35
2356: PPUSH
2357: CALL_OW 67
// end ;
2361: GO 2278
// InGameOff ;
2363: CALL_OW 9
// end ; enable ;
2367: ENABLE
// end ;
2368: LD_VAR 0 1
2372: RET
// every 0 0$2 trigger GetClass ( Burlak ) <> class_mechanic do var factory ;
2373: LD_EXP 3
2377: PPUSH
2378: CALL_OW 257
2382: PUSH
2383: LD_INT 3
2385: NONEQUAL
2386: IFFALSE 2566
2388: GO 2390
2390: DISABLE
2391: LD_INT 0
2393: PPUSH
// begin factory := FilterAllUnits ( [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ;
2394: LD_ADDR_VAR 0 1
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: LD_INT 30
2404: PUSH
2405: LD_INT 2
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 30
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: ST_TO_ADDR
// if factory then
2432: LD_VAR 0 1
2436: IFFALSE 2565
// begin factory := factory [ 1 ] ;
2438: LD_ADDR_VAR 0 1
2442: PUSH
2443: LD_VAR 0 1
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: ST_TO_ADDR
// InGameOn ;
2452: CALL_OW 8
// if IsInUnit ( Burlak ) then
2456: LD_EXP 3
2460: PPUSH
2461: CALL_OW 310
2465: IFFALSE 2476
// ComExitBuilding ( Burlak ) ;
2467: LD_EXP 3
2471: PPUSH
2472: CALL_OW 122
// while GetClass ( Burlak ) <> class_mechanic do
2476: LD_EXP 3
2480: PPUSH
2481: CALL_OW 257
2485: PUSH
2486: LD_INT 3
2488: NONEQUAL
2489: IFFALSE 2561
// begin CenterOnUnits ( Burlak ) ;
2491: LD_EXP 3
2495: PPUSH
2496: CALL_OW 85
// ComEnterUnit ( Burlak , factory ) ;
2500: LD_EXP 3
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: CALL_OW 120
// if IsInUnit ( Burlak ) = factory then
2514: LD_EXP 3
2518: PPUSH
2519: CALL_OW 310
2523: PUSH
2524: LD_VAR 0 1
2528: EQUAL
2529: IFFALSE 2552
// begin ComChangeProfession ( Burlak , class_mechanic ) ;
2531: LD_EXP 3
2535: PPUSH
2536: LD_INT 3
2538: PPUSH
2539: CALL_OW 123
// AddComExitBuilding ( Burlak ) ;
2543: LD_EXP 3
2547: PPUSH
2548: CALL_OW 182
// end ; wait ( 0 0$1 ) ;
2552: LD_INT 35
2554: PPUSH
2555: CALL_OW 67
// end ;
2559: GO 2476
// InGameOff ;
2561: CALL_OW 9
// end ; enable ;
2565: ENABLE
// end ;
2566: PPOPN 1
2568: END
// every 0 0$2 do var build ;
2569: GO 2571
2571: DISABLE
2572: LD_INT 0
2574: PPUSH
// begin build := FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
2575: LD_ADDR_VAR 0 1
2579: PUSH
2580: LD_INT 2
2582: PUSH
2583: LD_INT 30
2585: PUSH
2586: LD_INT 0
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 30
2595: PUSH
2596: LD_INT 1
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: ST_TO_ADDR
// if build then
2613: LD_VAR 0 1
2617: IFFALSE 2747
// begin build := build [ 1 ] ;
2619: LD_ADDR_VAR 0 1
2623: PUSH
2624: LD_VAR 0 1
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: ST_TO_ADDR
// if GetLives ( build ) < 800 then
2633: LD_VAR 0 1
2637: PPUSH
2638: CALL_OW 256
2642: PUSH
2643: LD_INT 800
2645: LESS
2646: IFFALSE 2747
// begin ComExitVehicle ( [ Burlak , MacMillan ] ) ;
2648: LD_EXP 3
2652: PUSH
2653: LD_EXP 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PPUSH
2662: CALL_OW 121
// interface_hidden := true ;
2666: LD_ADDR_OWVAR 54
2670: PUSH
2671: LD_INT 1
2673: ST_TO_ADDR
// if GetClass ( MacMillan ) <> class_engineer then
2674: LD_EXP 2
2678: PPUSH
2679: CALL_OW 257
2683: PUSH
2684: LD_INT 2
2686: NONEQUAL
2687: IFFALSE 2693
// MacMillan_To_Engineer ;
2689: CALL 2192 0 0
// InGameOn ;
2693: CALL_OW 8
// while GetLives ( build ) < 1000 do
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL_OW 256
2706: PUSH
2707: LD_INT 1000
2709: LESS
2710: IFFALSE 2735
// begin ComRepairBuilding ( MacMillan , build ) ;
2712: LD_EXP 2
2716: PPUSH
2717: LD_VAR 0 1
2721: PPUSH
2722: CALL_OW 130
// wait ( 0 0$1 ) ;
2726: LD_INT 35
2728: PPUSH
2729: CALL_OW 67
// end ;
2733: GO 2697
// InGameOff ;
2735: CALL_OW 9
// interface_hidden := false ;
2739: LD_ADDR_OWVAR 54
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// end ; end ; build := FilterAllUnits ( [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ;
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: LD_INT 30
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 30
2767: PUSH
2768: LD_INT 3
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: LIST
2779: PPUSH
2780: CALL_OW 69
2784: ST_TO_ADDR
// if build then
2785: LD_VAR 0 1
2789: IFFALSE 2919
// begin build := build [ 1 ] ;
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 1
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: ST_TO_ADDR
// if GetLives ( build ) < 800 then
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL_OW 256
2814: PUSH
2815: LD_INT 800
2817: LESS
2818: IFFALSE 2919
// begin ComExitVehicle ( [ Burlak , MacMillan ] ) ;
2820: LD_EXP 3
2824: PUSH
2825: LD_EXP 2
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 121
// interface_hidden := true ;
2838: LD_ADDR_OWVAR 54
2842: PUSH
2843: LD_INT 1
2845: ST_TO_ADDR
// if GetClass ( MacMillan ) <> class_engineer then
2846: LD_EXP 2
2850: PPUSH
2851: CALL_OW 257
2855: PUSH
2856: LD_INT 2
2858: NONEQUAL
2859: IFFALSE 2865
// MacMillan_To_Engineer ;
2861: CALL 2192 0 0
// InGameOn ;
2865: CALL_OW 8
// while GetLives ( build ) < 1000 do
2869: LD_VAR 0 1
2873: PPUSH
2874: CALL_OW 256
2878: PUSH
2879: LD_INT 1000
2881: LESS
2882: IFFALSE 2907
// begin ComRepairBuilding ( MacMillan , build ) ;
2884: LD_EXP 2
2888: PPUSH
2889: LD_VAR 0 1
2893: PPUSH
2894: CALL_OW 130
// wait ( 0 0$1 ) ;
2898: LD_INT 35
2900: PPUSH
2901: CALL_OW 67
// end ;
2905: GO 2869
// InGameOff ;
2907: CALL_OW 9
// interface_hidden := false ;
2911: LD_ADDR_OWVAR 54
2915: PUSH
2916: LD_INT 0
2918: ST_TO_ADDR
// end ; end ; enable ;
2919: ENABLE
// end ;
2920: PPOPN 1
2922: END
