// export you , you2 , americans , arabians , neutral ; export ai , ai_nation ; export apemans , rulive ; export cargo_am ; export Vsevolod_vstoupil ; export Vsevolod_uderna_group ; export belkovfreed ; export OvsyenkoTaken ; export OvsyenkoCaptured ; export mcdef_difficulty ; export mcatt_difficulty ; export na_kopci_mcdef_difficulty ; export b1_levels , b2_levels , b3_levels , b4_levels , b5_levels ; export normal1_utok , normal2_utok , normal3_utok , normal4_utok , vsevolod_attack , vsevolod_final_attack ; export mine_obj_completed ; export cas_mezi_utoky ; export cas_prvniho_utoku ; export kolik_ma_vsevolod_casu ; export kolik_ma_vsevolod_mezi_utoky ; export kolik_je_v_depotu ; export kolik_je_sib_v_hornim ; export zivoty_armoury , zivoty_armoury2 ; export utoci_max ; export all_labs ; export function Vyhra ; begin
   0: LD_INT 0
   2: PPUSH
// end ;
   3: LD_VAR 0 1
   7: RET
// function set_sides ; begin
   8: LD_INT 0
  10: PPUSH
// you := 3 ;
  11: LD_ADDR_EXP 1
  15: PUSH
  16: LD_INT 3
  18: ST_TO_ADDR
// you2 := 6 ;
  19: LD_ADDR_EXP 2
  23: PUSH
  24: LD_INT 6
  26: ST_TO_ADDR
// americans := 1 ;
  27: LD_ADDR_EXP 3
  31: PUSH
  32: LD_INT 1
  34: ST_TO_ADDR
// arabians := 2 ;
  35: LD_ADDR_EXP 4
  39: PUSH
  40: LD_INT 2
  42: ST_TO_ADDR
// neutral := 0 ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// OvsyenkoTaken = 0 ;
  51: LD_ADDR_EXP 14
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ai := americans ;
  59: LD_ADDR_EXP 6
  63: PUSH
  64: LD_EXP 3
  68: ST_TO_ADDR
// ai_nation := nation_american ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// var gleb_lives ; every 0 0$1 trigger gleb_lives <> GetLives ( gleb ) do var i ;
  82: LD_LOC 1
  86: PUSH
  87: LD_EXP 65
  91: PPUSH
  92: CALL_OW 256
  96: NONEQUAL
  97: IFFALSE 173
  99: GO 101
 101: DISABLE
 102: LD_INT 0
 104: PPUSH
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
 105: LD_ADDR_VAR 0 1
 109: PUSH
 110: LD_INT 22
 112: PUSH
 113: LD_EXP 1
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 69
 126: PUSH
 127: FOR_IN
 128: IFFALSE 156
// if WantsToAttack ( i ) = Gleb then
 130: LD_VAR 0 1
 134: PPUSH
 135: CALL_OW 319
 139: PUSH
 140: LD_EXP 65
 144: EQUAL
 145: IFFALSE 154
// YouLost ( Gleb ) ;
 147: LD_STRING Gleb
 149: PPUSH
 150: CALL_OW 104
 154: GO 127
 156: POP
 157: POP
// gleb_lives := GetLives ( gleb ) ;
 158: LD_ADDR_LOC 1
 162: PUSH
 163: LD_EXP 65
 167: PPUSH
 168: CALL_OW 256
 172: ST_TO_ADDR
// end ;
 173: PPOPN 1
 175: END
// every 0 0$5 trigger not FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
 176: LD_INT 22
 178: PUSH
 179: LD_EXP 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PUSH
 191: LD_INT 25
 193: PUSH
 194: LD_INT 2
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 30
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 30
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: LD_INT 30
 223: PUSH
 224: LD_INT 6
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 7
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 8
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: NOT
 269: IFFALSE 281
 271: GO 273
 273: DISABLE
// begin YouLost ( NoDepotNoEngineerNoLab ) ;
 274: LD_STRING NoDepotNoEngineerNoLab
 276: PPUSH
 277: CALL_OW 104
// end ;
 281: END
// every 1 trigger OvsyenkoTaken = 0 do
 282: LD_EXP 14
 286: PUSH
 287: LD_INT 0
 289: EQUAL
 290: IFFALSE 300
 292: GO 294
 294: DISABLE
// begin BlockMarchNorth ;
 295: CALL 11791 0 0
// enable ;
 299: ENABLE
// end ;
 300: END
// export function VyhraResearch ; begin
 301: LD_INT 0
 303: PPUSH
// set_medals ;
 304: CALL 447 0 0
// GiveMedals ( Research ) ;
 308: LD_STRING Research
 310: PPUSH
 311: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 315: LD_INT 22
 317: PUSH
 318: LD_EXP 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 23
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PPUSH
 357: CALL_OW 43
// Save ;
 361: CALL 8485 0 0
// YouWin ;
 365: CALL_OW 103
// end ;
 369: LD_VAR 0 1
 373: RET
// export function VyhraExit ; begin
 374: LD_INT 0
 376: PPUSH
// set_medals ;
 377: CALL 447 0 0
// GiveMedals ( Exit ) ;
 381: LD_STRING Exit
 383: PPUSH
 384: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 388: LD_INT 22
 390: PUSH
 391: LD_EXP 1
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 21
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 23
 412: PUSH
 413: LD_INT 3
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: PPUSH
 430: CALL_OW 43
// Save ;
 434: CALL 8485 0 0
// YouWin ;
 438: CALL_OW 103
// end ;
 442: LD_VAR 0 1
 446: RET
// export function set_medals ; begin
 447: LD_INT 0
 449: PPUSH
// AddMedal ( Vsevolod , VsevolodSaved ) ;
 450: LD_STRING Vsevolod
 452: PPUSH
 453: LD_EXP 56
 457: PPUSH
 458: CALL_OW 101
// AddMedal ( Ovsyenko , OvsyenkoTaken and not OvsyenkoCaptured ) ;
 462: LD_STRING Ovsyenko
 464: PPUSH
 465: LD_EXP 14
 469: PUSH
 470: LD_EXP 15
 474: NOT
 475: AND
 476: PPUSH
 477: CALL_OW 101
// AddMedal ( Prediction , GetTech ( tech_MatPred , you ) = state_researched ) ;
 481: LD_STRING Prediction
 483: PPUSH
 484: LD_INT 9
 486: PPUSH
 487: LD_EXP 1
 491: PPUSH
 492: CALL_OW 321
 496: PUSH
 497: LD_INT 2
 499: EQUAL
 500: PPUSH
 501: CALL_OW 101
// end ;
 505: LD_VAR 0 1
 509: RET
// export function set_difficulty ; var d ; begin
 510: LD_INT 0
 512: PPUSH
 513: PPUSH
// d := difficulty ;
 514: LD_ADDR_VAR 0 2
 518: PUSH
 519: LD_OWVAR 67
 523: ST_TO_ADDR
// b1_levels := [ [ 1 , 3 , 5 ] [ d ] , [ 2 , 3 , 5 ] [ d ] ] ;
 524: LD_ADDR_EXP 19
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: LD_INT 3
 534: PUSH
 535: LD_INT 5
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: LIST
 542: PUSH
 543: LD_VAR 0 2
 547: ARRAY
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: LD_INT 3
 554: PUSH
 555: LD_INT 5
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: PUSH
 563: LD_VAR 0 2
 567: ARRAY
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: ST_TO_ADDR
// b2_levels := [ [ 2 , 3 , 5 ] [ d ] , [ 3 , 4 , 6 ] [ d ] ] ;
 573: LD_ADDR_EXP 20
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 3
 583: PUSH
 584: LD_INT 5
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: PUSH
 592: LD_VAR 0 2
 596: ARRAY
 597: PUSH
 598: LD_INT 3
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: LD_INT 6
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: LIST
 611: PUSH
 612: LD_VAR 0 2
 616: ARRAY
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: ST_TO_ADDR
// b3_levels := [ [ 2 , 5 , 8 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 622: LD_ADDR_EXP 21
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: LD_INT 5
 632: PUSH
 633: LD_INT 8
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PUSH
 641: LD_VAR 0 2
 645: ARRAY
 646: PUSH
 647: LD_INT 7
 649: PUSH
 650: LD_INT 8
 652: PUSH
 653: LD_INT 10
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: PUSH
 661: LD_VAR 0 2
 665: ARRAY
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// b4_levels := [ [ 5 , 7 , 10 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 671: LD_ADDR_EXP 22
 675: PUSH
 676: LD_INT 5
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 10
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: PUSH
 690: LD_VAR 0 2
 694: ARRAY
 695: PUSH
 696: LD_INT 7
 698: PUSH
 699: LD_INT 8
 701: PUSH
 702: LD_INT 10
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_VAR 0 2
 714: ARRAY
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: ST_TO_ADDR
// b5_levels := [ [ 3 , 6 , 9 ] [ d ] , [ 3 , 6 , 9 ] [ d ] ] ;
 720: LD_ADDR_EXP 23
 724: PUSH
 725: LD_INT 3
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: LD_INT 9
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PUSH
 739: LD_VAR 0 2
 743: ARRAY
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: LD_INT 9
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: LD_VAR 0 2
 763: ARRAY
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mcatt_difficulty := [ 200 , 250 , 300 ] [ d ] ;
 769: LD_ADDR_EXP 17
 773: PUSH
 774: LD_INT 200
 776: PUSH
 777: LD_INT 250
 779: PUSH
 780: LD_INT 300
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_VAR 0 2
 792: ARRAY
 793: ST_TO_ADDR
// mcdef_difficulty := [ 270 , 350 , 450 ] [ d ] ;
 794: LD_ADDR_EXP 16
 798: PUSH
 799: LD_INT 270
 801: PUSH
 802: LD_INT 350
 804: PUSH
 805: LD_INT 450
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: ST_TO_ADDR
// na_kopci_mcdef_difficulty := [ 200 , 230 , 260 ] [ d ] ;
 819: LD_ADDR_EXP 18
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: LD_INT 230
 829: PUSH
 830: LD_INT 260
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_VAR 0 2
 842: ARRAY
 843: ST_TO_ADDR
// kolik_ma_vsevolod_casu := [ 46 46$0 , 39 39$0 , 32 32$0 ] [ d ] ;
 844: LD_ADDR_EXP 33
 848: PUSH
 849: LD_INT 96600
 851: PUSH
 852: LD_INT 81900
 854: PUSH
 855: LD_INT 67200
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: ST_TO_ADDR
// kolik_ma_vsevolod_mezi_utoky := [ 10 10$0 , 8 8$0 , 5 5$0 ] [ d ] ;
 869: LD_ADDR_EXP 34
 873: PUSH
 874: LD_INT 21000
 876: PUSH
 877: LD_INT 16800
 879: PUSH
 880: LD_INT 10500
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: LIST
 887: PUSH
 888: LD_VAR 0 2
 892: ARRAY
 893: ST_TO_ADDR
// kolik_je_v_depotu := [ 220 , 180 , 120 ] [ d ] ;
 894: LD_ADDR_EXP 35
 898: PUSH
 899: LD_INT 220
 901: PUSH
 902: LD_INT 180
 904: PUSH
 905: LD_INT 120
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_VAR 0 2
 917: ARRAY
 918: ST_TO_ADDR
// kolik_je_sib_v_hornim := [ 130 , 90 , 65 ] [ d ] ;
 919: LD_ADDR_EXP 36
 923: PUSH
 924: LD_INT 130
 926: PUSH
 927: LD_INT 90
 929: PUSH
 930: LD_INT 65
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_VAR 0 2
 942: ARRAY
 943: ST_TO_ADDR
// zivoty_armoury := [ hranice_umirani + 50 , hranice_umirani + 150 , hranice_umirani + 350 ] [ d ] ;
 944: LD_ADDR_EXP 37
 948: PUSH
 949: LD_INT 250
 951: PUSH
 952: LD_INT 50
 954: PLUS
 955: PUSH
 956: LD_INT 250
 958: PUSH
 959: LD_INT 150
 961: PLUS
 962: PUSH
 963: LD_INT 250
 965: PUSH
 966: LD_INT 350
 968: PLUS
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_VAR 0 2
 979: ARRAY
 980: ST_TO_ADDR
// zivoty_armoury2 := [ hranice_umirani + 150 , hranice_umirani + 350 , hranice_umirani + 550 ] [ d ] ;
 981: LD_ADDR_EXP 38
 985: PUSH
 986: LD_INT 250
 988: PUSH
 989: LD_INT 150
 991: PLUS
 992: PUSH
 993: LD_INT 250
 995: PUSH
 996: LD_INT 350
 998: PLUS
 999: PUSH
1000: LD_INT 250
1002: PUSH
1003: LD_INT 550
1005: PLUS
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_VAR 0 2
1016: ARRAY
1017: ST_TO_ADDR
// cas_mezi_utoky := [ 6 6$0 , 3 3$0 , 0 0$30 ] [ d ] ;
1018: LD_ADDR_EXP 31
1022: PUSH
1023: LD_INT 12600
1025: PUSH
1026: LD_INT 6300
1028: PUSH
1029: LD_INT 1050
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: ST_TO_ADDR
// utoci_max := [ 3 , 6 , 9 ] [ d ] ;
1043: LD_ADDR_EXP 39
1047: PUSH
1048: LD_INT 3
1050: PUSH
1051: LD_INT 6
1053: PUSH
1054: LD_INT 9
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: ST_TO_ADDR
// cas_prvniho_utoku := [ 5 5$0 , 3 3$30 , 1 1$0 ] [ d ] ;
1068: LD_ADDR_EXP 32
1072: PUSH
1073: LD_INT 10500
1075: PUSH
1076: LD_INT 7350
1078: PUSH
1079: LD_INT 2100
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: PUSH
1087: LD_VAR 0 2
1091: ARRAY
1092: ST_TO_ADDR
// end ;
1093: LD_VAR 0 1
1097: RET
// export mrtvi_vsevolodaci ; every 0 0$1 do
1098: GO 1100
1100: DISABLE
// begin debug_strings := [ mrtvi_vsevolodaci , [ ( tick div 0 0$1 ) div 60 , ( tick div 0 0$1 ) mod 60 ] ] ;
1101: LD_ADDR_OWVAR 48
1105: PUSH
1106: LD_EXP 41
1110: PUSH
1111: LD_OWVAR 1
1115: PUSH
1116: LD_INT 35
1118: DIV
1119: PUSH
1120: LD_INT 60
1122: DIV
1123: PUSH
1124: LD_OWVAR 1
1128: PUSH
1129: LD_INT 35
1131: DIV
1132: PUSH
1133: LD_INT 60
1135: MOD
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: ST_TO_ADDR
// enable ;
1145: ENABLE
// end ;
1146: END
// starting begin all_labs := [ b_lab , b_lab_half , b_lab_full ] ;
1147: LD_ADDR_EXP 40
1151: PUSH
1152: LD_INT 6
1154: PUSH
1155: LD_INT 7
1157: PUSH
1158: LD_INT 8
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: ST_TO_ADDR
// normal1_utok := 7001 ;
1166: LD_ADDR_EXP 24
1170: PUSH
1171: LD_INT 7001
1173: ST_TO_ADDR
// normal2_utok := 7002 ;
1174: LD_ADDR_EXP 25
1178: PUSH
1179: LD_INT 7002
1181: ST_TO_ADDR
// normal3_utok := 7003 ;
1182: LD_ADDR_EXP 26
1186: PUSH
1187: LD_INT 7003
1189: ST_TO_ADDR
// normal4_utok := 7004 ;
1190: LD_ADDR_EXP 27
1194: PUSH
1195: LD_INT 7004
1197: ST_TO_ADDR
// vsevolod_attack := 7005 ;
1198: LD_ADDR_EXP 28
1202: PUSH
1203: LD_INT 7005
1205: ST_TO_ADDR
// vsevolod_final_attack := 7006 ;
1206: LD_ADDR_EXP 29
1210: PUSH
1211: LD_INT 7006
1213: ST_TO_ADDR
// SetBName ( RuDepot , ovsyenko ) ;
1214: LD_INT 58
1216: PPUSH
1217: LD_STRING ovsyenko
1219: PPUSH
1220: CALL_OW 500
// set_difficulty ;
1224: CALL 510 0 0
// set_sides ;
1228: CALL 8 0 0
// load ;
1232: CALL 6997 0 0
// place_b ;
1236: CALL 18938 0 0
// place_in_ru_cars ;
1240: CALL 7912 0 0
// place_ru_cars ;
1244: CALL 8262 0 0
// apemans := FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_type , unit_human ] ] ) ;
1248: LD_ADDR_EXP 8
1252: PUSH
1253: LD_INT 23
1255: PUSH
1256: LD_INT 0
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 21
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 69
1281: ST_TO_ADDR
// set_shorts ;
1282: CALL 1291 0 0
// DStart ;
1286: CALL 1399 0 0
// end ; end_of_file
1290: END
// export Kar , Lip , Bur , Pla , Ptr , Pty , Glb , Tit , Dol , Vse ; export donttalk ; export function set_shorts ; begin
1291: LD_INT 0
1293: PPUSH
// Kar := Karamazov ;
1294: LD_ADDR_EXP 42
1298: PUSH
1299: LD_EXP 63
1303: ST_TO_ADDR
// Lip := Lipshchin ;
1304: LD_ADDR_EXP 43
1308: PUSH
1309: LD_EXP 69
1313: ST_TO_ADDR
// Bur := Burlak ;
1314: LD_ADDR_EXP 44
1318: PUSH
1319: LD_EXP 61
1323: ST_TO_ADDR
// Pla := Platonov ;
1324: LD_ADDR_EXP 45
1328: PUSH
1329: LD_EXP 62
1333: ST_TO_ADDR
// Ptr := Petrovova ;
1334: LD_ADDR_EXP 46
1338: PUSH
1339: LD_EXP 64
1343: ST_TO_ADDR
// Pty := Petrosyan ;
1344: LD_ADDR_EXP 47
1348: PUSH
1349: LD_EXP 66
1353: ST_TO_ADDR
// Glb := Gleb ;
1354: LD_ADDR_EXP 48
1358: PUSH
1359: LD_EXP 65
1363: ST_TO_ADDR
// Tit := Titov ;
1364: LD_ADDR_EXP 49
1368: PUSH
1369: LD_EXP 67
1373: ST_TO_ADDR
// Dol := Dolgov ;
1374: LD_ADDR_EXP 50
1378: PUSH
1379: LD_EXP 68
1383: ST_TO_ADDR
// Vse := Vsevolod ;
1384: LD_ADDR_EXP 51
1388: PUSH
1389: LD_EXP 70
1393: ST_TO_ADDR
// end ;
1394: LD_VAR 0 1
1398: RET
// export function DStart ; begin
1399: LD_INT 0
1401: PPUSH
// CenterNowOnXY ( 120 , 140 ) ;
1402: LD_INT 120
1404: PPUSH
1405: LD_INT 140
1407: PPUSH
1408: CALL_OW 86
// CenterNowOnXY ( 120 , 140 ) ;
1412: LD_INT 120
1414: PPUSH
1415: LD_INT 140
1417: PPUSH
1418: CALL_OW 86
// DialogueOn ;
1422: CALL_OW 6
// if not Say ( Kar , DStart-Kar-1 ) then
1426: LD_EXP 42
1430: PPUSH
1431: LD_STRING DStart-Kar-1
1433: PPUSH
1434: CALL_OW 88
1438: NOT
1439: IFFALSE 1453
// Say ( Lip , DStart-Lip-1 ) ;
1441: LD_EXP 43
1445: PPUSH
1446: LD_STRING DStart-Lip-1
1448: PPUSH
1449: CALL_OW 88
// Say ( Bur , DStart-Bur-1 ) ;
1453: LD_EXP 44
1457: PPUSH
1458: LD_STRING DStart-Bur-1
1460: PPUSH
1461: CALL_OW 88
// Dwait ( 0 0$3 ) ;
1465: LD_INT 105
1467: PPUSH
1468: CALL_OW 68
// SayRadio ( Pla , DStart-Pla-1 ) ;
1472: LD_EXP 45
1476: PPUSH
1477: LD_STRING DStart-Pla-1
1479: PPUSH
1480: CALL_OW 94
// Say ( Bur , DStart-Bur-2 ) ;
1484: LD_EXP 44
1488: PPUSH
1489: LD_STRING DStart-Bur-2
1491: PPUSH
1492: CALL_OW 88
// Say ( Ptr , DStart-Ptr-2 ) ;
1496: LD_EXP 46
1500: PPUSH
1501: LD_STRING DStart-Ptr-2
1503: PPUSH
1504: CALL_OW 88
// SaveForQuickRestart ;
1508: CALL_OW 22
// ChangeMissionObjectives ( MStart ) ;
1512: LD_STRING MStart
1514: PPUSH
1515: CALL_OW 337
// DialogueOff ;
1519: CALL_OW 7
// end ;
1523: LD_VAR 0 1
1527: RET
// every 0 0$2 trigger GetSide ( RuDepot ) = you or not FilterHumansInArea ( ovsyenko_base , [ [ f_side , ai ] ] ) do
1528: LD_INT 58
1530: PPUSH
1531: CALL_OW 255
1535: PUSH
1536: LD_EXP 1
1540: EQUAL
1541: PUSH
1542: LD_INT 14
1544: PPUSH
1545: LD_INT 22
1547: PUSH
1548: LD_EXP 6
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: EMPTY
1558: LIST
1559: PPUSH
1560: CALL 10708 0 2
1564: NOT
1565: OR
1566: IFFALSE 1583
1568: GO 1570
1570: DISABLE
// begin DOvsyenkoTaken ;
1571: CALL 1584 0 0
// OvsyenkoTaken := 1 ;
1575: LD_ADDR_EXP 14
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// end ;
1583: END
// export function DOvsyenkoTaken ; begin
1584: LD_INT 0
1586: PPUSH
// DialogueOn ;
1587: CALL_OW 6
// Say ( Bur , DOvsyenkoTaken-Bur-1 ) ;
1591: LD_EXP 44
1595: PPUSH
1596: LD_STRING DOvsyenkoTaken-Bur-1
1598: PPUSH
1599: CALL_OW 88
// SayRadio ( Pla , DOvsyenkoTaken-Pla-1 ) ;
1603: LD_EXP 45
1607: PPUSH
1608: LD_STRING DOvsyenkoTaken-Pla-1
1610: PPUSH
1611: CALL_OW 94
// Say ( Kar , DOvsyenkoTaken-Kar-1 ) ;
1615: LD_EXP 42
1619: PPUSH
1620: LD_STRING DOvsyenkoTaken-Kar-1
1622: PPUSH
1623: CALL_OW 88
// Say ( Tit , DOvsyenkoTaken-Tit-1 ) ;
1627: LD_EXP 49
1631: PPUSH
1632: LD_STRING DOvsyenkoTaken-Tit-1
1634: PPUSH
1635: CALL_OW 88
// if Say ( Lip , DOvsyenkoTaken-Lip-1 ) then
1639: LD_EXP 43
1643: PPUSH
1644: LD_STRING DOvsyenkoTaken-Lip-1
1646: PPUSH
1647: CALL_OW 88
1651: IFFALSE 1665
// Say ( Glb , DOvsyenkoTaken-Glb-1 ) ;
1653: LD_EXP 48
1657: PPUSH
1658: LD_STRING DOvsyenkoTaken-Glb-1
1660: PPUSH
1661: CALL_OW 88
// ChangeMissionObjectives ( MOutCapture ) ;
1665: LD_STRING MOutCapture
1667: PPUSH
1668: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
1672: LD_STRING MAddMine
1674: PPUSH
1675: CALL_OW 337
// DialogueOff ;
1679: CALL_OW 7
// MyHint ( Capturing ) ;
1683: LD_STRING Capturing
1685: PPUSH
1686: CALL 11731 0 1
// MyHint ( SibDet ) ;
1690: LD_STRING SibDet
1692: PPUSH
1693: CALL 11731 0 1
// end ;
1697: LD_VAR 0 1
1701: RET
// export function DMatPrediction ; begin
1702: LD_INT 0
1704: PPUSH
// DialogueOn ;
1705: CALL_OW 6
// if IsOK ( Pty ) or IsOk ( Dol ) then
1709: LD_EXP 47
1713: PPUSH
1714: CALL_OW 302
1718: PUSH
1719: LD_EXP 50
1723: PPUSH
1724: CALL_OW 302
1728: OR
1729: IFFALSE 1836
// begin if not Say ( Pty , DMatPrediction-Pty-1 ) then
1731: LD_EXP 47
1735: PPUSH
1736: LD_STRING DMatPrediction-Pty-1
1738: PPUSH
1739: CALL_OW 88
1743: NOT
1744: IFFALSE 1758
// Say ( Dol , DMatPrediction-Dol-1 ) ;
1746: LD_EXP 50
1750: PPUSH
1751: LD_STRING DMatPrediction-Dol-1
1753: PPUSH
1754: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-1 ) ;
1758: LD_EXP 44
1762: PPUSH
1763: LD_STRING DMatPrediction-Bur-1
1765: PPUSH
1766: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-2 ) then
1770: LD_EXP 47
1774: PPUSH
1775: LD_STRING DMatPrediction-Pty-2
1777: PPUSH
1778: CALL_OW 88
1782: NOT
1783: IFFALSE 1797
// Say ( Dol , DMatPrediction-Dol-2 ) ;
1785: LD_EXP 50
1789: PPUSH
1790: LD_STRING DMatPrediction-Dol-2
1792: PPUSH
1793: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-2 ) ;
1797: LD_EXP 44
1801: PPUSH
1802: LD_STRING DMatPrediction-Bur-2
1804: PPUSH
1805: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-3 ) then
1809: LD_EXP 47
1813: PPUSH
1814: LD_STRING DMatPrediction-Pty-3
1816: PPUSH
1817: CALL_OW 88
1821: NOT
1822: IFFALSE 1836
// Say ( Dol , DMatPrediction-Dol-3 ) ;
1824: LD_EXP 50
1828: PPUSH
1829: LD_STRING DMatPrediction-Dol-3
1831: PPUSH
1832: CALL_OW 88
// end ; ChangeMissionObjectives ( MPred ) ;
1836: LD_STRING MPred
1838: PPUSH
1839: CALL_OW 337
// DialogueOff ;
1843: CALL_OW 7
// end ;
1847: LD_VAR 0 1
1851: RET
// export function DNoMaterial ; begin
1852: LD_INT 0
1854: PPUSH
// DialogueOn ;
1855: CALL_OW 6
// if not Say ( Pty , DNoMaterial-Pty-1 ) then
1859: LD_EXP 47
1863: PPUSH
1864: LD_STRING DNoMaterial-Pty-1
1866: PPUSH
1867: CALL_OW 88
1871: NOT
1872: IFFALSE 1886
// Say ( Dol , DNoMaterial-Dol-1 ) ;
1874: LD_EXP 50
1878: PPUSH
1879: LD_STRING DNoMaterial-Dol-1
1881: PPUSH
1882: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-1 ) ;
1886: LD_EXP 44
1890: PPUSH
1891: LD_STRING DNoMaterial-Bur-1
1893: PPUSH
1894: CALL_OW 88
// if not Say ( Pty , DNoMaterial-Pty-2 ) then
1898: LD_EXP 47
1902: PPUSH
1903: LD_STRING DNoMaterial-Pty-2
1905: PPUSH
1906: CALL_OW 88
1910: NOT
1911: IFFALSE 1925
// Say ( Dol , DNoMaterial-Dol-2 ) ;
1913: LD_EXP 50
1917: PPUSH
1918: LD_STRING DNoMaterial-Dol-2
1920: PPUSH
1921: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-2 ) ;
1925: LD_EXP 44
1929: PPUSH
1930: LD_STRING DNoMaterial-Bur-2
1932: PPUSH
1933: CALL_OW 88
// ChangeMissionObjectives ( MOutPred ) ;
1937: LD_STRING MOutPred
1939: PPUSH
1940: CALL_OW 337
// DialogueOff ;
1944: CALL_OW 7
// MyHint ( Prediction ) ;
1948: LD_STRING Prediction
1950: PPUSH
1951: CALL 11731 0 1
// end ;
1955: LD_VAR 0 1
1959: RET
// export byl_sib_research ; every 0 0$2 trigger GetResourceVisibility ( 101 , 93 , you ) or GetResourceVisibility ( 53 , 55 , you ) or GetResourceVisibility ( 29 , 30 , you ) or FilterAllUnits ( [ [ f_side , you ] , [ f_btype , b_siberite_mine ] ] ) > 0 or DepotWithSiberite marked 66 do
1960: LD_INT 101
1962: PPUSH
1963: LD_INT 93
1965: PPUSH
1966: LD_EXP 1
1970: PPUSH
1971: CALL_OW 440
1975: PUSH
1976: LD_INT 53
1978: PPUSH
1979: LD_INT 55
1981: PPUSH
1982: LD_EXP 1
1986: PPUSH
1987: CALL_OW 440
1991: OR
1992: PUSH
1993: LD_INT 29
1995: PPUSH
1996: LD_INT 30
1998: PPUSH
1999: LD_EXP 1
2003: PPUSH
2004: CALL_OW 440
2008: OR
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_EXP 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 30
2024: PUSH
2025: LD_INT 30
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 69
2040: PUSH
2041: LD_INT 0
2043: GREATER
2044: OR
2045: PUSH
2046: CALL 11891 0 0
2050: OR
2051: IFFALSE 2060
2053: GO 2055
2055: DISABLE
// begin DSibResearch ;
2056: CALL 2061 0 0
// end ;
2060: END
// export function DSibResearch ; begin
2061: LD_INT 0
2063: PPUSH
// byl_sib_research := true ;
2064: LD_ADDR_EXP 53
2068: PUSH
2069: LD_INT 1
2071: ST_TO_ADDR
// DialogueOn ;
2072: CALL_OW 6
// if not Say ( Pty , DSibResearch-Pty-1 ) then
2076: LD_EXP 47
2080: PPUSH
2081: LD_STRING DSibResearch-Pty-1
2083: PPUSH
2084: CALL_OW 88
2088: NOT
2089: IFFALSE 2103
// Say ( Dol , DSibResearch-Dol-1 ) ;
2091: LD_EXP 50
2095: PPUSH
2096: LD_STRING DSibResearch-Dol-1
2098: PPUSH
2099: CALL_OW 88
// Say ( Bur , DSibResearch-Bur-1 ) ;
2103: LD_EXP 44
2107: PPUSH
2108: LD_STRING DSibResearch-Bur-1
2110: PPUSH
2111: CALL_OW 88
// SayRadio ( Pla , DSibResearch-Pla-1 ) ;
2115: LD_EXP 45
2119: PPUSH
2120: LD_STRING DSibResearch-Pla-1
2122: PPUSH
2123: CALL_OW 94
// ChangeMissionObjectives ( MResearch ) ;
2127: LD_STRING MResearch
2129: PPUSH
2130: CALL_OW 337
// DialogueOff ;
2134: CALL_OW 7
// end ;
2138: LD_VAR 0 1
2142: RET
// function AnyUnitOver ( y ) ; var res , i ; begin
2143: LD_INT 0
2145: PPUSH
2146: PPUSH
2147: PPUSH
// res := false ;
2148: LD_ADDR_VAR 0 3
2152: PUSH
2153: LD_INT 0
2155: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_not , [ f_type , unit_building ] ] ] ) do
2156: LD_ADDR_VAR 0 4
2160: PUSH
2161: LD_INT 22
2163: PUSH
2164: LD_EXP 1
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 3
2175: PUSH
2176: LD_INT 21
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 69
2198: PUSH
2199: FOR_IN
2200: IFFALSE 2231
// if GetY ( i ) < y then
2202: LD_VAR 0 4
2206: PPUSH
2207: CALL_OW 251
2211: PUSH
2212: LD_VAR 0 1
2216: LESS
2217: IFFALSE 2229
// begin res := true ;
2219: LD_ADDR_VAR 0 3
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// break ;
2227: GO 2231
// end ;
2229: GO 2199
2231: POP
2232: POP
// result := res ;
2233: LD_ADDR_VAR 0 2
2237: PUSH
2238: LD_VAR 0 3
2242: ST_TO_ADDR
// end ;
2243: LD_VAR 0 2
2247: RET
// every 0 0$4 trigger ( OvsyenkoTaken and GetTechProgress ( tech_SibDet , you ) > 50 ) or AnyUnitOver ( 30 ) do var i ;
2248: LD_EXP 14
2252: PUSH
2253: LD_INT 20
2255: PPUSH
2256: LD_EXP 1
2260: PPUSH
2261: CALL_OW 326
2265: PUSH
2266: LD_INT 50
2268: GREATER
2269: AND
2270: PUSH
2271: LD_INT 30
2273: PPUSH
2274: CALL 2143 0 1
2278: OR
2279: IFFALSE 2680
2281: GO 2283
2283: DISABLE
2284: LD_INT 0
2286: PPUSH
// begin PlaceUnitArea ( Vsevolod , vsevolod_in , false ) ;
2287: LD_EXP 70
2291: PPUSH
2292: LD_INT 16
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: CALL_OW 49
// for i in Vsevolod_uderna_group do
2302: LD_ADDR_VAR 0 1
2306: PUSH
2307: LD_EXP 12
2311: PUSH
2312: FOR_IN
2313: IFFALSE 2332
// PlaceUnitArea ( i , vsevolod_in , false ) ;
2315: LD_VAR 0 1
2319: PPUSH
2320: LD_INT 16
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 49
2330: GO 2312
2332: POP
2333: POP
// ComAgressiveMove ( Vsevolod_uderna_group ^ [ vsevolod ] , 51 , 11 ) ;
2334: LD_EXP 12
2338: PUSH
2339: LD_EXP 70
2343: PUSH
2344: EMPTY
2345: LIST
2346: ADD
2347: PPUSH
2348: LD_INT 51
2350: PPUSH
2351: LD_INT 11
2353: PPUSH
2354: CALL_OW 114
// DoNotAttack ( ai , Vsevolod ) ;
2358: LD_EXP 6
2362: PPUSH
2363: LD_EXP 70
2367: PPUSH
2368: CALL_OW 471
// for i in UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) do
2372: LD_ADDR_VAR 0 1
2376: PUSH
2377: LD_EXP 12
2381: PPUSH
2382: LD_INT 25
2384: PUSH
2385: LD_INT 2
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: EMPTY
2393: LIST
2394: PPUSH
2395: CALL_OW 72
2399: PUSH
2400: FOR_IN
2401: IFFALSE 2419
// DoNotAttack ( ai , i ) ;
2403: LD_EXP 6
2407: PPUSH
2408: LD_VAR 0 1
2412: PPUSH
2413: CALL_OW 471
2417: GO 2400
2419: POP
2420: POP
// wait ( 0 0$5 ) ;
2421: LD_INT 175
2423: PPUSH
2424: CALL_OW 67
// ComAgressiveMove ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 51 , 11 ) ;
2428: LD_INT 3
2430: PPUSH
2431: LD_INT 22
2433: PUSH
2434: LD_EXP 6
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: EMPTY
2444: LIST
2445: PPUSH
2446: CALL 10708 0 2
2450: PPUSH
2451: LD_INT 51
2453: PPUSH
2454: LD_INT 11
2456: PPUSH
2457: CALL_OW 114
// wait ( 0 0$10 ) ;
2461: LD_INT 350
2463: PPUSH
2464: CALL_OW 67
// ComMoveXY ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 23 , 28 ) ;
2468: LD_INT 3
2470: PPUSH
2471: LD_INT 22
2473: PUSH
2474: LD_EXP 6
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: EMPTY
2484: LIST
2485: PPUSH
2486: CALL 10708 0 2
2490: PPUSH
2491: LD_INT 23
2493: PPUSH
2494: LD_INT 28
2496: PPUSH
2497: CALL_OW 111
// SetSideBase ( GetBase ( vsevd1 ) , you2 ) ;
2501: LD_INT 182
2503: PPUSH
2504: CALL_OW 274
2508: PPUSH
2509: LD_EXP 2
2513: PPUSH
2514: CALL_OW 236
// SetBName ( vsevd1 , gorkij ) ;
2518: LD_INT 182
2520: PPUSH
2521: LD_STRING gorkij
2523: PPUSH
2524: CALL_OW 500
// ComEnterUnit ( Vsevolod , vseva1 ) ;
2528: LD_EXP 70
2532: PPUSH
2533: LD_INT 190
2535: PPUSH
2536: CALL_OW 120
// ComEnterUnit ( vsevolod_uderna_group , vseva1 ) ;
2540: LD_EXP 12
2544: PPUSH
2545: LD_INT 190
2547: PPUSH
2548: CALL_OW 120
// ComEnterUnit ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , vseva1 ) ;
2552: LD_EXP 12
2556: PPUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 2
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: PPUSH
2570: CALL_OW 72
2574: PPUSH
2575: LD_INT 190
2577: PPUSH
2578: CALL_OW 120
// for i in vsevolod_uderna_group do
2582: LD_ADDR_VAR 0 1
2586: PUSH
2587: LD_EXP 12
2591: PUSH
2592: FOR_IN
2593: IFFALSE 2611
// NormalAttack ( ai , i ) ;
2595: LD_EXP 6
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 472
2609: GO 2592
2611: POP
2612: POP
// AddComChangeProfession ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , class_soldier ) ;
2613: LD_EXP 12
2617: PPUSH
2618: LD_INT 25
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: PPUSH
2631: CALL_OW 72
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 183
// ComEnterUnit ( vsevolod_uderna_group [ 2 ] , vsevb1 ) ;
2643: LD_EXP 12
2647: PUSH
2648: LD_INT 2
2650: ARRAY
2651: PPUSH
2652: LD_INT 193
2654: PPUSH
2655: CALL_OW 120
// wait ( 0 0$5 ) ;
2659: LD_INT 175
2661: PPUSH
2662: CALL_OW 67
// Vsevolod_vstoupil := tick ;
2666: LD_ADDR_EXP 11
2670: PUSH
2671: LD_OWVAR 1
2675: ST_TO_ADDR
// DVsevolod ;
2676: CALL 2683 0 0
// end ;
2680: PPOPN 1
2682: END
// export function DVsevolod ; var who ; begin
2683: LD_INT 0
2685: PPUSH
2686: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: LD_EXP 52
2696: PPUSH
2697: LD_EXP 1
2701: PPUSH
2702: LD_INT 1
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL 10417 0 5
2715: ST_TO_ADDR
// DialogueOn ;
2716: CALL_OW 6
// Say ( Dol , DVsevolod-Dol-1 ) ;
2720: LD_EXP 50
2724: PPUSH
2725: LD_STRING DVsevolod-Dol-1
2727: PPUSH
2728: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-1 ) ;
2732: LD_EXP 51
2736: PPUSH
2737: LD_STRING DVsevolod-Vse-1
2739: PPUSH
2740: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-1 ) ;
2744: LD_EXP 44
2748: PPUSH
2749: LD_STRING DVsevolod-Bur-1
2751: PPUSH
2752: CALL_OW 88
// Say ( Glb , DVsevolod-Glb-1 ) ;
2756: LD_EXP 48
2760: PPUSH
2761: LD_STRING DVsevolod-Glb-1
2763: PPUSH
2764: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-2 ) ;
2768: LD_EXP 51
2772: PPUSH
2773: LD_STRING DVsevolod-Vse-2
2775: PPUSH
2776: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-2 ) ;
2780: LD_EXP 44
2784: PPUSH
2785: LD_STRING DVsevolod-Bur-2
2787: PPUSH
2788: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-3 ) ;
2792: LD_EXP 51
2796: PPUSH
2797: LD_STRING DVsevolod-Vse-3
2799: PPUSH
2800: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-3 ) ;
2804: LD_EXP 44
2808: PPUSH
2809: LD_STRING DVsevolod-Bur-3
2811: PPUSH
2812: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-4 ) ;
2816: LD_EXP 51
2820: PPUSH
2821: LD_STRING DVsevolod-Vse-4
2823: PPUSH
2824: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-4 ) ;
2828: LD_EXP 44
2832: PPUSH
2833: LD_STRING DVsevolod-Bur-4
2835: PPUSH
2836: CALL_OW 88
// if Say ( Glb , DVsevolod-Glb-4 ) then
2840: LD_EXP 48
2844: PPUSH
2845: LD_STRING DVsevolod-Glb-4
2847: PPUSH
2848: CALL_OW 88
2852: IFFALSE 2866
// Say ( Bur , DVsevolod-Bur-5 ) ;
2854: LD_EXP 44
2858: PPUSH
2859: LD_STRING DVsevolod-Bur-5
2861: PPUSH
2862: CALL_OW 88
// if not IsOk ( Glb ) then
2866: LD_EXP 48
2870: PPUSH
2871: CALL_OW 302
2875: NOT
2876: IFFALSE 2890
// Say ( who , DVsevolod-RSol1-5 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_STRING DVsevolod-RSol1-5
2885: PPUSH
2886: CALL_OW 88
// Say ( Bur , DVsevolod-Bur-6 ) ;
2890: LD_EXP 44
2894: PPUSH
2895: LD_STRING DVsevolod-Bur-6
2897: PPUSH
2898: CALL_OW 88
// Say ( Dol , DVsevolod-Dol-6 ) ;
2902: LD_EXP 50
2906: PPUSH
2907: LD_STRING DVsevolod-Dol-6
2909: PPUSH
2910: CALL_OW 88
// RevealFogArea ( you , near_base2 ) ;
2914: LD_EXP 1
2918: PPUSH
2919: LD_INT 3
2921: PPUSH
2922: CALL_OW 332
// CenterNowOnXY ( 51 , 13 ) ;
2926: LD_INT 51
2928: PPUSH
2929: LD_INT 13
2931: PPUSH
2932: CALL_OW 86
// dwait ( 0 0$1 ) ;
2936: LD_INT 35
2938: PPUSH
2939: CALL_OW 68
// Say ( Bur , DVsevolod-Bur-7 ) ;
2943: LD_EXP 44
2947: PPUSH
2948: LD_STRING DVsevolod-Bur-7
2950: PPUSH
2951: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-7 ) ;
2955: LD_EXP 51
2959: PPUSH
2960: LD_STRING DVsevolod-Vse-7
2962: PPUSH
2963: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-8 ) ;
2967: LD_EXP 44
2971: PPUSH
2972: LD_STRING DVsevolod-Bur-8
2974: PPUSH
2975: CALL_OW 88
// DialogueOff ;
2979: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
2983: LD_STRING MVsevolod
2985: PPUSH
2986: CALL_OW 337
// end ;
2990: LD_VAR 0 1
2994: RET
// every 0 0$2 trigger vsevolod_vstoupil and tick > ( vsevolod_vstoupil + 0 0$6 ) do
2995: LD_EXP 11
2999: PUSH
3000: LD_OWVAR 1
3004: PUSH
3005: LD_EXP 11
3009: PUSH
3010: LD_INT 210
3012: PLUS
3013: GREATER
3014: AND
3015: IFFALSE 3040
3017: GO 3019
3019: DISABLE
// begin if belkovfreed then
3020: LD_EXP 13
3024: IFFALSE 3032
// DHelp1 else
3026: CALL 3041 0 0
3030: GO 3036
// DHelp2 ;
3032: CALL 3153 0 0
// DHelp3 ;
3036: CALL 3295 0 0
// end ;
3040: END
// export function DHelp1 ; var who ; begin
3041: LD_INT 0
3043: PPUSH
3044: PPUSH
// DialogueOn ;
3045: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_EXP 52
3058: PPUSH
3059: LD_EXP 1
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: LD_INT 0
3072: PPUSH
3073: CALL 10417 0 5
3077: ST_TO_ADDR
// if ( not Say ( Glb , DHelp1-Glb-1 ) ) and ( not Say ( Dol , DHelp1-Dol-1 ) ) then
3078: LD_EXP 48
3082: PPUSH
3083: LD_STRING DHelp1-Glb-1
3085: PPUSH
3086: CALL_OW 88
3090: NOT
3091: PUSH
3092: LD_EXP 50
3096: PPUSH
3097: LD_STRING DHelp1-Dol-1
3099: PPUSH
3100: CALL_OW 88
3104: NOT
3105: AND
3106: IFFALSE 3120
// Say ( who , DHelp1-RSol1-1 ) ;
3108: LD_VAR 0 2
3112: PPUSH
3113: LD_STRING DHelp1-RSol1-1
3115: PPUSH
3116: CALL_OW 88
// Say ( Tit , DHelp1-Tit-1 ) ;
3120: LD_EXP 49
3124: PPUSH
3125: LD_STRING DHelp1-Tit-1
3127: PPUSH
3128: CALL_OW 88
// Say ( Glb , DHelp1-Glb-2 ) ;
3132: LD_EXP 48
3136: PPUSH
3137: LD_STRING DHelp1-Glb-2
3139: PPUSH
3140: CALL_OW 88
// DialogueOff ;
3144: CALL_OW 7
// end ;
3148: LD_VAR 0 1
3152: RET
// export function DHelp2 ; var who , who2 ; begin
3153: LD_INT 0
3155: PPUSH
3156: PPUSH
3157: PPUSH
// DialogueOn ;
3158: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 1 ) ;
3162: LD_ADDR_VAR 0 2
3166: PUSH
3167: LD_EXP 52
3171: PPUSH
3172: LD_EXP 1
3176: PPUSH
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: CALL 10417 0 5
3190: ST_TO_ADDR
// who2 := WhoSayAny ( donttalk , you , sex_male , 0 , 2 ) ;
3191: LD_ADDR_VAR 0 3
3195: PUSH
3196: LD_EXP 52
3200: PPUSH
3201: LD_EXP 1
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL 10417 0 5
3219: ST_TO_ADDR
// if not Say ( Tit , DHelp2-Tit-1 ) then
3220: LD_EXP 49
3224: PPUSH
3225: LD_STRING DHelp2-Tit-1
3227: PPUSH
3228: CALL_OW 88
3232: NOT
3233: IFFALSE 3247
// Say ( who , DHelp2-RSol1-1 ) ;
3235: LD_VAR 0 2
3239: PPUSH
3240: LD_STRING DHelp2-RSol1-1
3242: PPUSH
3243: CALL_OW 88
// if not Say ( Glb , DHelp2-Glb-1 ) then
3247: LD_EXP 48
3251: PPUSH
3252: LD_STRING DHelp2-Glb-1
3254: PPUSH
3255: CALL_OW 88
3259: NOT
3260: IFFALSE 3274
// Say ( who2 , DHelp2-RSol2-1 ) ;
3262: LD_VAR 0 3
3266: PPUSH
3267: LD_STRING DHelp2-RSol2-1
3269: PPUSH
3270: CALL_OW 88
// Say ( Tit , DHelp2-Tit-2 ) ;
3274: LD_EXP 49
3278: PPUSH
3279: LD_STRING DHelp2-Tit-2
3281: PPUSH
3282: CALL_OW 88
// DialogueOff ;
3286: CALL_OW 7
// end ;
3290: LD_VAR 0 1
3294: RET
// export function DHelp3 ; var who ; begin
3295: LD_INT 0
3297: PPUSH
3298: PPUSH
// DialogueOn ;
3299: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3303: LD_ADDR_VAR 0 2
3307: PUSH
3308: LD_EXP 52
3312: PPUSH
3313: LD_EXP 1
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: LD_INT 0
3323: PPUSH
3324: LD_INT 0
3326: PPUSH
3327: CALL 10417 0 5
3331: ST_TO_ADDR
// Say ( Bur , DHelp3-Bur-1 ) ;
3332: LD_EXP 44
3336: PPUSH
3337: LD_STRING DHelp3-Bur-1
3339: PPUSH
3340: CALL_OW 88
// if not Say ( Lip , DHelp3-Lip-1 ) then
3344: LD_EXP 43
3348: PPUSH
3349: LD_STRING DHelp3-Lip-1
3351: PPUSH
3352: CALL_OW 88
3356: NOT
3357: IFFALSE 3371
// Say ( who , DHelp3-RSol1-1 ) ;
3359: LD_VAR 0 2
3363: PPUSH
3364: LD_STRING DHelp3-RSol1-1
3366: PPUSH
3367: CALL_OW 88
// Say ( Bur , DHelp3-Bur-2 ) ;
3371: LD_EXP 44
3375: PPUSH
3376: LD_STRING DHelp3-Bur-2
3378: PPUSH
3379: CALL_OW 88
// DialogueOff ;
3383: CALL_OW 7
// end ;
3387: LD_VAR 0 1
3391: RET
// every 0 0$5 trigger vsevolod_vstoupil and not FilterHumansInArea ( ovsyenko_base , [ [ f_side , you ] ] ) do var b , i ;
3392: LD_EXP 11
3396: PUSH
3397: LD_INT 14
3399: PPUSH
3400: LD_INT 22
3402: PUSH
3403: LD_EXP 1
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: PPUSH
3415: CALL 10708 0 2
3419: NOT
3420: AND
3421: IFFALSE 3559
3423: GO 3425
3425: DISABLE
3426: LD_INT 0
3428: PPUSH
3429: PPUSH
// begin if FilterUnitsInArea ( ovsyenko_base , [ [ f_side , ai ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) >= 1 then
3430: LD_INT 14
3432: PPUSH
3433: LD_INT 22
3435: PUSH
3436: LD_EXP 6
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 2
3447: PUSH
3448: LD_INT 21
3450: PUSH
3451: LD_INT 1
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 21
3460: PUSH
3461: LD_INT 2
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 70
3481: PUSH
3482: LD_INT 1
3484: GREATEREQUAL
3485: IFFALSE 3558
// begin DOvsyenkoCaptured ;
3487: CALL 3562 0 0
// OvsyenkoCaptured := true ;
3491: LD_ADDR_EXP 15
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// b := FilterUnitsInArea ( ovsyenko_base , [ [ f_type , unit_building ] ] ) ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: LD_INT 14
3506: PPUSH
3507: LD_INT 21
3509: PUSH
3510: LD_INT 3
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: ST_TO_ADDR
// for i in b do
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 1
3534: PUSH
3535: FOR_IN
3536: IFFALSE 3554
// begin SetSide ( i , ai ) ;
3538: LD_VAR 0 2
3542: PPUSH
3543: LD_EXP 6
3547: PPUSH
3548: CALL_OW 235
// end ;
3552: GO 3535
3554: POP
3555: POP
// end else
3556: GO 3559
// enable ;
3558: ENABLE
// end ;
3559: PPOPN 2
3561: END
// export function DOvsyenkoCaptured ; var who ; begin
3562: LD_INT 0
3564: PPUSH
3565: PPUSH
// DialogueOn ;
3566: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3570: LD_ADDR_VAR 0 2
3574: PUSH
3575: LD_EXP 52
3579: PPUSH
3580: LD_EXP 1
3584: PPUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: LD_INT 0
3593: PPUSH
3594: CALL 10417 0 5
3598: ST_TO_ADDR
// if Say ( Glb , DOvsyenkoCaptured-Glb-1 ) then
3599: LD_EXP 48
3603: PPUSH
3604: LD_STRING DOvsyenkoCaptured-Glb-1
3606: PPUSH
3607: CALL_OW 88
3611: IFFALSE 3627
// Say ( Bur , DOvsyenkoCaptured-Bur-1 ) else
3613: LD_EXP 44
3617: PPUSH
3618: LD_STRING DOvsyenkoCaptured-Bur-1
3620: PPUSH
3621: CALL_OW 88
3625: GO 3639
// Say ( who , DOvsyenkoCaptured-RSol1-1 ) ;
3627: LD_VAR 0 2
3631: PPUSH
3632: LD_STRING DOvsyenkoCaptured-RSol1-1
3634: PPUSH
3635: CALL_OW 88
// DialogueOff ;
3639: CALL_OW 7
// end ;
3643: LD_VAR 0 1
3647: RET
// every 0 0$2 trigger false do var a ;
3648: LD_INT 0
3650: IFFALSE 3745
3652: GO 3654
3654: DISABLE
3655: LD_INT 0
3657: PPUSH
// begin a := FilterHumansInArea ( to_north , [ f_side , you ] ) ;
3658: LD_ADDR_VAR 0 1
3662: PUSH
3663: LD_INT 15
3665: PPUSH
3666: LD_INT 22
3668: PUSH
3669: LD_EXP 1
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PPUSH
3678: CALL 10708 0 2
3682: ST_TO_ADDR
// if UnitFilter ( a , [ f_or , [ f_distxy , 67 , 37 , 10 ] , [ f_distxy , 83 , 38 , 10 ] ] ) then
3683: LD_VAR 0 1
3687: PPUSH
3688: LD_INT 2
3690: PUSH
3691: LD_INT 92
3693: PUSH
3694: LD_INT 67
3696: PUSH
3697: LD_INT 37
3699: PUSH
3700: LD_INT 10
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 92
3711: PUSH
3712: LD_INT 83
3714: PUSH
3715: LD_INT 38
3717: PUSH
3718: LD_INT 10
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 72
3736: IFFALSE 3744
// DPartyAttacked else
3738: CALL 3748 0 0
3742: GO 3745
// enable ;
3744: ENABLE
// end ;
3745: PPOPN 1
3747: END
// export function DPartyAttacked ; var who , who2 ; begin
3748: LD_INT 0
3750: PPUSH
3751: PPUSH
3752: PPUSH
// DialogueOn ;
3753: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 1 ) ;
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_EXP 52
3766: PPUSH
3767: LD_EXP 1
3771: PPUSH
3772: LD_INT 1
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: LD_INT 1
3780: PPUSH
3781: CALL 10417 0 5
3785: ST_TO_ADDR
// who2 := WhoSayAny ( donttalk , you , sex_male , 0 , 2 ) ;
3786: LD_ADDR_VAR 0 3
3790: PUSH
3791: LD_EXP 52
3795: PPUSH
3796: LD_EXP 1
3800: PPUSH
3801: LD_INT 1
3803: PPUSH
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 2
3809: PPUSH
3810: CALL 10417 0 5
3814: ST_TO_ADDR
// Say ( who , DPartyAttacked-RSol1-1 ) ;
3815: LD_VAR 0 2
3819: PPUSH
3820: LD_STRING DPartyAttacked-RSol1-1
3822: PPUSH
3823: CALL_OW 88
// if not Say ( Glb , DPartyAttacked-Glb-1 ) then
3827: LD_EXP 48
3831: PPUSH
3832: LD_STRING DPartyAttacked-Glb-1
3834: PPUSH
3835: CALL_OW 88
3839: NOT
3840: IFFALSE 3854
// Say ( who2 , DPartyAttacked-RSol2-1 ) ;
3842: LD_VAR 0 3
3846: PPUSH
3847: LD_STRING DPartyAttacked-RSol2-1
3849: PPUSH
3850: CALL_OW 88
// DialogueOff ;
3854: CALL_OW 7
// end ;
3858: LD_VAR 0 1
3862: RET
// export kecali ; export otherkecali ; export VsevolodSaved ; every 0 0$3 trigger FilterAllUnits ( [ [ f_side , you ] , [ f_dist , Vsevolod , 10 ] ] ) do var mt , i ;
3863: LD_INT 22
3865: PUSH
3866: LD_EXP 1
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 91
3877: PUSH
3878: LD_EXP 70
3882: PUSH
3883: LD_INT 10
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PPUSH
3895: CALL_OW 69
3899: IFFALSE 4335
3901: GO 3903
3903: DISABLE
3904: LD_INT 0
3906: PPUSH
3907: PPUSH
// begin if IsLive ( vsevolod ) and GetDistUnits ( Vsevolod , Burlak ) <= 10 and not kecali then
3908: LD_EXP 70
3912: PPUSH
3913: CALL_OW 300
3917: PUSH
3918: LD_EXP 70
3922: PPUSH
3923: LD_EXP 61
3927: PPUSH
3928: CALL_OW 296
3932: PUSH
3933: LD_INT 10
3935: LESSEQUAL
3936: AND
3937: PUSH
3938: LD_EXP 54
3942: NOT
3943: AND
3944: IFFALSE 4183
// begin mt := tick + 0 0$20 ;
3946: LD_ADDR_VAR 0 1
3950: PUSH
3951: LD_OWVAR 1
3955: PUSH
3956: LD_INT 700
3958: PLUS
3959: ST_TO_ADDR
// while IsInUnit ( Vsevolod ) = vseva1 and mt < tick do
3960: LD_EXP 70
3964: PPUSH
3965: CALL_OW 310
3969: PUSH
3970: LD_INT 190
3972: EQUAL
3973: PUSH
3974: LD_VAR 0 1
3978: PUSH
3979: LD_OWVAR 1
3983: LESS
3984: AND
3985: IFFALSE 4008
// begin ComExitBuilding ( UnitsInside ( vseva1 ) ) ;
3987: LD_INT 190
3989: PPUSH
3990: CALL_OW 313
3994: PPUSH
3995: CALL_OW 122
// wait ( 0 0$1 ) ;
3999: LD_INT 35
4001: PPUSH
4002: CALL_OW 67
// end ;
4006: GO 3960
// wait ( 0 0$2 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4015: LD_INT 22
4017: PUSH
4018: LD_EXP 2
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PUSH
4027: EMPTY
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PPUSH
4035: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4039: LD_INT 22
4041: PUSH
4042: LD_EXP 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: PPUSH
4054: CALL_OW 69
4058: PPUSH
4059: LD_EXP 1
4063: PPUSH
4064: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4068: LD_ADDR_VAR 0 2
4072: PUSH
4073: LD_INT 22
4075: PUSH
4076: LD_EXP 1
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PUSH
4085: EMPTY
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4112
// NormalAttack ( ai , i ) ;
4096: LD_EXP 6
4100: PPUSH
4101: LD_VAR 0 2
4105: PPUSH
4106: CALL_OW 472
4110: GO 4093
4112: POP
4113: POP
// DMeetVsev ;
4114: CALL 4410 0 0
// if OvsyenkoCaptured then
4118: LD_EXP 15
4122: IFFALSE 4130
// DMeetVsev2 else
4124: CALL 4452 0 0
4128: GO 4134
// DMeetVsev2a ;
4130: CALL 4508 0 0
// DMeetVsev3 ;
4134: CALL 4564 0 0
// if stevens_Killed then
4138: LD_EXP 76
4142: IFFALSE 4150
// DMeetVsev4 else
4144: CALL 4648 0 0
4148: GO 4154
// DMeetVsev5 ;
4150: CALL 4676 0 0
// DMeetVsev6 ;
4154: CALL 4732 0 0
// kecali := true ;
4158: LD_ADDR_EXP 54
4162: PUSH
4163: LD_INT 1
4165: ST_TO_ADDR
// VsevolodSaved := true ;
4166: LD_ADDR_EXP 56
4170: PUSH
4171: LD_INT 1
4173: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
4174: LD_STRING MVsevolodOut
4176: PPUSH
4177: CALL_OW 337
// end else
4181: GO 4335
// begin if IsLive ( vsevolod ) and not otherkecali then
4183: LD_EXP 70
4187: PPUSH
4188: CALL_OW 300
4192: PUSH
4193: LD_EXP 55
4197: NOT
4198: AND
4199: IFFALSE 4334
// begin ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4201: LD_INT 22
4203: PUSH
4204: LD_EXP 2
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: PPUSH
4216: CALL_OW 69
4220: PPUSH
4221: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4225: LD_INT 22
4227: PUSH
4228: LD_EXP 2
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: PPUSH
4240: CALL_OW 69
4244: PPUSH
4245: LD_EXP 1
4249: PPUSH
4250: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4254: LD_ADDR_VAR 0 2
4258: PUSH
4259: LD_INT 22
4261: PUSH
4262: LD_EXP 1
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: EMPTY
4272: LIST
4273: PPUSH
4274: CALL_OW 69
4278: PUSH
4279: FOR_IN
4280: IFFALSE 4298
// NormalAttack ( ai , i ) ;
4282: LD_EXP 6
4286: PPUSH
4287: LD_VAR 0 2
4291: PPUSH
4292: CALL_OW 472
4296: GO 4279
4298: POP
4299: POP
// DOtherMeetVsev ;
4300: CALL 4338 0 0
// ComExitBuilding ( vseva1 ) ;
4304: LD_INT 190
4306: PPUSH
4307: CALL_OW 122
// VsevolodSaved := true ;
4311: LD_ADDR_EXP 56
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// otherkecali := true ;
4319: LD_ADDR_EXP 55
4323: PUSH
4324: LD_INT 1
4326: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
4327: LD_STRING MVsevolodOut
4329: PPUSH
4330: CALL_OW 337
// end ; enable ;
4334: ENABLE
// end ; end ;
4335: PPOPN 2
4337: END
// export function DOtherMeetVsev ; var who ; begin
4338: LD_INT 0
4340: PPUSH
4341: PPUSH
// DialogueOn ;
4342: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
4346: LD_ADDR_VAR 0 2
4350: PUSH
4351: LD_EXP 52
4355: PPUSH
4356: LD_EXP 1
4360: PPUSH
4361: LD_INT 1
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: LD_INT 0
4369: PPUSH
4370: CALL 10417 0 5
4374: ST_TO_ADDR
// if Say ( Vse , DOtherMeetVsev-Vse-1 ) then
4375: LD_EXP 51
4379: PPUSH
4380: LD_STRING DOtherMeetVsev-Vse-1
4382: PPUSH
4383: CALL_OW 88
4387: IFFALSE 4401
// Say ( who , DOtherMeetVsev-RSol1-1 ) ;
4389: LD_VAR 0 2
4393: PPUSH
4394: LD_STRING DOtherMeetVsev-RSol1-1
4396: PPUSH
4397: CALL_OW 88
// DialogueOff ;
4401: CALL_OW 7
// end ;
4405: LD_VAR 0 1
4409: RET
// export function DMeetVsev ; begin
4410: LD_INT 0
4412: PPUSH
// DialogueOn ;
4413: CALL_OW 6
// if Say ( Vse , DMeetVsev-Vse-1 ) then
4417: LD_EXP 51
4421: PPUSH
4422: LD_STRING DMeetVsev-Vse-1
4424: PPUSH
4425: CALL_OW 88
4429: IFFALSE 4443
// Say ( Bur , DMeetVsev-Bur-1 ) ;
4431: LD_EXP 44
4435: PPUSH
4436: LD_STRING DMeetVsev-Bur-1
4438: PPUSH
4439: CALL_OW 88
// DialogueOff ;
4443: CALL_OW 7
// end ;
4447: LD_VAR 0 1
4451: RET
// export function DMeetVsev2 ; begin
4452: LD_INT 0
4454: PPUSH
// DialogueOn ;
4455: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-1 ) then
4459: LD_EXP 51
4463: PPUSH
4464: LD_STRING DMeetVsev2-Vse-1
4466: PPUSH
4467: CALL_OW 88
4471: IFFALSE 4499
// if Say ( Bur , DMeetVsev2-Bur-1 ) then
4473: LD_EXP 44
4477: PPUSH
4478: LD_STRING DMeetVsev2-Bur-1
4480: PPUSH
4481: CALL_OW 88
4485: IFFALSE 4499
// Say ( Vse , DMeetVsev2-Vse-2 ) ;
4487: LD_EXP 51
4491: PPUSH
4492: LD_STRING DMeetVsev2-Vse-2
4494: PPUSH
4495: CALL_OW 88
// DialogueOff ;
4499: CALL_OW 7
// end ;
4503: LD_VAR 0 1
4507: RET
// export function DMeetVsev2a ; begin
4508: LD_INT 0
4510: PPUSH
// DialogueOn ;
4511: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-2a ) then
4515: LD_EXP 51
4519: PPUSH
4520: LD_STRING DMeetVsev2-Vse-2a
4522: PPUSH
4523: CALL_OW 88
4527: IFFALSE 4555
// if Say ( Bur , DMeetVsev2-Bur-2 ) then
4529: LD_EXP 44
4533: PPUSH
4534: LD_STRING DMeetVsev2-Bur-2
4536: PPUSH
4537: CALL_OW 88
4541: IFFALSE 4555
// Say ( Vse , DMeetVsev2-Vse-3 ) ;
4543: LD_EXP 51
4547: PPUSH
4548: LD_STRING DMeetVsev2-Vse-3
4550: PPUSH
4551: CALL_OW 88
// DialogueOff ;
4555: CALL_OW 7
// end ;
4559: LD_VAR 0 1
4563: RET
// export function DMeetVsev3 ; begin
4564: LD_INT 0
4566: PPUSH
// DialogueOn ;
4567: CALL_OW 6
// if Say ( Bur , DMeetVsev3-Bur-1 ) then
4571: LD_EXP 44
4575: PPUSH
4576: LD_STRING DMeetVsev3-Bur-1
4578: PPUSH
4579: CALL_OW 88
4583: IFFALSE 4639
// if Say ( Vse , DMeetVsev3-Vse-1 ) then
4585: LD_EXP 51
4589: PPUSH
4590: LD_STRING DMeetVsev3-Vse-1
4592: PPUSH
4593: CALL_OW 88
4597: IFFALSE 4639
// if Say ( Bur , DMeetVsev3-Bur-2 ) then
4599: LD_EXP 44
4603: PPUSH
4604: LD_STRING DMeetVsev3-Bur-2
4606: PPUSH
4607: CALL_OW 88
4611: IFFALSE 4639
// if Say ( Vse , DMeetVsev3-Vse-2 ) then
4613: LD_EXP 51
4617: PPUSH
4618: LD_STRING DMeetVsev3-Vse-2
4620: PPUSH
4621: CALL_OW 88
4625: IFFALSE 4639
// Say ( Bur , DMeetVsev3-Bur-3 ) ;
4627: LD_EXP 44
4631: PPUSH
4632: LD_STRING DMeetVsev3-Bur-3
4634: PPUSH
4635: CALL_OW 88
// DialogueOff ;
4639: CALL_OW 7
// end ;
4643: LD_VAR 0 1
4647: RET
// export function DMeetVsev4 ; begin
4648: LD_INT 0
4650: PPUSH
// DialogueOn ;
4651: CALL_OW 6
// Say ( Bur , DMeetVsev4-Bur-1 ) ;
4655: LD_EXP 44
4659: PPUSH
4660: LD_STRING DMeetVsev4-Bur-1
4662: PPUSH
4663: CALL_OW 88
// DialogueOff ;
4667: CALL_OW 7
// end ;
4671: LD_VAR 0 1
4675: RET
// export function DMeetVsev5 ; begin
4676: LD_INT 0
4678: PPUSH
// DialogueOn ;
4679: CALL_OW 6
// if Say ( Bur , DMeetVsev5-Bur-1 ) then
4683: LD_EXP 44
4687: PPUSH
4688: LD_STRING DMeetVsev5-Bur-1
4690: PPUSH
4691: CALL_OW 88
4695: IFFALSE 4723
// if Say ( Vse , DMeetVsev5-Vse-1 ) then
4697: LD_EXP 51
4701: PPUSH
4702: LD_STRING DMeetVsev5-Vse-1
4704: PPUSH
4705: CALL_OW 88
4709: IFFALSE 4723
// Say ( Bur , DMeetVsev5-Bur-2 ) ;
4711: LD_EXP 44
4715: PPUSH
4716: LD_STRING DMeetVsev5-Bur-2
4718: PPUSH
4719: CALL_OW 88
// DialogueOff ;
4723: CALL_OW 7
// end ;
4727: LD_VAR 0 1
4731: RET
// export function DMeetVsev6 ; begin
4732: LD_INT 0
4734: PPUSH
// DialogueOn ;
4735: CALL_OW 6
// if Say ( Vse , DMeetVsev6-Vse-1 ) then
4739: LD_EXP 51
4743: PPUSH
4744: LD_STRING DMeetVsev6-Vse-1
4746: PPUSH
4747: CALL_OW 88
4751: IFFALSE 4765
// Say ( Bur , DMeetVsev6-Bur-1 ) ;
4753: LD_EXP 44
4757: PPUSH
4758: LD_STRING DMeetVsev6-Bur-1
4760: PPUSH
4761: CALL_OW 88
// DialogueOff ;
4765: CALL_OW 7
// end ;
4769: LD_VAR 0 1
4773: RET
// every 0 0$5 trigger kecali and FilterUnitsInArea ( north_base , [ [ f_side , you ] ] ) do
4774: LD_EXP 54
4778: PUSH
4779: LD_INT 22
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_EXP 1
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: PPUSH
4797: CALL_OW 70
4801: AND
4802: IFFALSE 5028
4804: GO 4806
4806: DISABLE
// begin wait ( 0 0$10 ) ;
4807: LD_INT 350
4809: PPUSH
4810: CALL_OW 67
// nakladaky ;
4814: CALL 9571 0 0
// ComMoveXY ( [ accar1 , accar2 ] , 53 , 8 ) ;
4818: LD_EXP 80
4822: PUSH
4823: LD_EXP 81
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: LD_INT 53
4834: PPUSH
4835: LD_INT 8
4837: PPUSH
4838: CALL_OW 111
// DTruck ;
4842: CALL 5029 0 0
// AddComMoveXY ( [ accar1 , accar2 ] , 45 , 14 ) ;
4846: LD_EXP 80
4850: PUSH
4851: LD_EXP 81
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: LD_INT 45
4862: PPUSH
4863: LD_INT 14
4865: PPUSH
4866: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 33 , 14 ) ;
4870: LD_EXP 80
4874: PUSH
4875: LD_EXP 81
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PPUSH
4884: LD_INT 33
4886: PPUSH
4887: LD_INT 14
4889: PPUSH
4890: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 27 , 32 ) ;
4894: LD_EXP 80
4898: PUSH
4899: LD_EXP 81
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PPUSH
4908: LD_INT 27
4910: PPUSH
4911: LD_INT 32
4913: PPUSH
4914: CALL_OW 171
// AddComUnload ( [ accar1 , accar2 ] ) ;
4918: LD_EXP 80
4922: PUSH
4923: LD_EXP 81
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PPUSH
4932: CALL_OW 219
// AddComMoveXY ( [ accar1 , accar2 ] , 42 , 79 ) ;
4936: LD_EXP 80
4940: PUSH
4941: LD_EXP 81
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PPUSH
4950: LD_INT 42
4952: PPUSH
4953: LD_INT 79
4955: PPUSH
4956: CALL_OW 171
// AddComExitVehicle ( [ acman1 , acman2 ] ) ;
4960: LD_EXP 82
4964: PUSH
4965: LD_EXP 83
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 181
// sol := sol union [ acman1 , acman2 ] ;
4978: LD_ADDR_EXP 121
4982: PUSH
4983: LD_EXP 121
4987: PUSH
4988: LD_EXP 82
4992: PUSH
4993: LD_EXP 83
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: UNION
5002: ST_TO_ADDR
// a3 := a3 union [ acman1 , acman2 ] ;
5003: LD_ADDR_EXP 135
5007: PUSH
5008: LD_EXP 135
5012: PUSH
5013: LD_EXP 82
5017: PUSH
5018: LD_EXP 83
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: UNION
5027: ST_TO_ADDR
// end ;
5028: END
// export function DTruck ; var who ; begin
5029: LD_INT 0
5031: PPUSH
5032: PPUSH
// who := acman1 ;
5033: LD_ADDR_VAR 0 2
5037: PUSH
5038: LD_EXP 82
5042: ST_TO_ADDR
// DialogueOn ;
5043: CALL_OW 6
// if Say ( who , DTruck-Sol1-1 ) then
5047: LD_VAR 0 2
5051: PPUSH
5052: LD_STRING DTruck-Sol1-1
5054: PPUSH
5055: CALL_OW 88
5059: IFFALSE 5073
// Say ( Bur , DTruck-Bur-1 ) ;
5061: LD_EXP 44
5065: PPUSH
5066: LD_STRING DTruck-Bur-1
5068: PPUSH
5069: CALL_OW 88
// DialogueOff ;
5073: CALL_OW 7
// end ;
5077: LD_VAR 0 1
5081: RET
// export function DDieVsev1 ; begin
5082: LD_INT 0
5084: PPUSH
// SetLives ( vsevd1 , 0 ) ;
5085: LD_INT 182
5087: PPUSH
5088: LD_INT 0
5090: PPUSH
5091: CALL_OW 234
// ChangeMissionObjectives ( MVsevolodDel ) ;
5095: LD_STRING MVsevolodDel
5097: PPUSH
5098: CALL_OW 337
// DialogueOn ;
5102: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev1-Vse-1 ) ;
5106: LD_EXP 71
5110: PPUSH
5111: LD_STRING DDieVsev1-Vse-1
5113: PPUSH
5114: CALL_OW 88
// DialogueOff ;
5118: CALL_OW 7
// end ;
5122: LD_VAR 0 1
5126: RET
// export function DDieVsev2 ; begin
5127: LD_INT 0
5129: PPUSH
// DialogueOn ;
5130: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev2-Vse-1 ) ;
5134: LD_EXP 71
5138: PPUSH
5139: LD_STRING DDieVsev2-Vse-1
5141: PPUSH
5142: CALL_OW 88
// DialogueOff ;
5146: CALL_OW 7
// end ;
5150: LD_VAR 0 1
5154: RET
// export function DStasis ; var who ; begin
5155: LD_INT 0
5157: PPUSH
5158: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
5159: LD_ADDR_VAR 0 2
5163: PUSH
5164: LD_EXP 52
5168: PPUSH
5169: LD_EXP 1
5173: PPUSH
5174: LD_INT 1
5176: PPUSH
5177: LD_INT 0
5179: PPUSH
5180: LD_INT 0
5182: PPUSH
5183: CALL 10417 0 5
5187: ST_TO_ADDR
// DialogueOn ;
5188: CALL_OW 6
// if not Say ( Pty , DStasis-Pty-1 ) then
5192: LD_EXP 47
5196: PPUSH
5197: LD_STRING DStasis-Pty-1
5199: PPUSH
5200: CALL_OW 88
5204: NOT
5205: IFFALSE 5234
// if not Say ( Dol , DStasis-Dol-1 ) then
5207: LD_EXP 50
5211: PPUSH
5212: LD_STRING DStasis-Dol-1
5214: PPUSH
5215: CALL_OW 88
5219: NOT
5220: IFFALSE 5234
// Say ( who , DStasis-RSol1-1 ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_STRING DStasis-RSol1-1
5229: PPUSH
5230: CALL_OW 88
// Say ( Bur , DStasis-Bur-1 ) ;
5234: LD_EXP 44
5238: PPUSH
5239: LD_STRING DStasis-Bur-1
5241: PPUSH
5242: CALL_OW 88
// if not Say ( Pty , DStasis-Pty-2 ) then
5246: LD_EXP 47
5250: PPUSH
5251: LD_STRING DStasis-Pty-2
5253: PPUSH
5254: CALL_OW 88
5258: NOT
5259: IFFALSE 5288
// if not Say ( Dol , DStasis-Dol-2 ) then
5261: LD_EXP 50
5265: PPUSH
5266: LD_STRING DStasis-Dol-2
5268: PPUSH
5269: CALL_OW 88
5273: NOT
5274: IFFALSE 5288
// Say ( who , DStasis-RSol1-2 ) ;
5276: LD_VAR 0 2
5280: PPUSH
5281: LD_STRING DStasis-RSol1-2
5283: PPUSH
5284: CALL_OW 88
// Say ( Bur , DStasis-Bur-2 ) ;
5288: LD_EXP 44
5292: PPUSH
5293: LD_STRING DStasis-Bur-2
5295: PPUSH
5296: CALL_OW 88
// DialogueOff ;
5300: CALL_OW 7
// MyHint ( Stasis ) ;
5304: LD_STRING Stasis
5306: PPUSH
5307: CALL 11731 0 1
// end ;
5311: LD_VAR 0 1
5315: RET
// every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched do
5316: LD_INT 30
5318: PPUSH
5319: LD_EXP 1
5323: PPUSH
5324: CALL_OW 321
5328: PUSH
5329: LD_INT 2
5331: EQUAL
5332: PUSH
5333: LD_INT 20
5335: PPUSH
5336: LD_EXP 1
5340: PPUSH
5341: CALL_OW 321
5345: PUSH
5346: LD_INT 2
5348: EQUAL
5349: AND
5350: PUSH
5351: LD_INT 21
5353: PPUSH
5354: LD_EXP 1
5358: PPUSH
5359: CALL_OW 321
5363: PUSH
5364: LD_INT 2
5366: EQUAL
5367: AND
5368: PUSH
5369: LD_INT 22
5371: PPUSH
5372: LD_EXP 1
5376: PPUSH
5377: CALL_OW 321
5381: PUSH
5382: LD_INT 2
5384: EQUAL
5385: AND
5386: IFFALSE 5398
5388: GO 5390
5390: DISABLE
// begin ChangeMissionObjectives ( MOutResearch ) ;
5391: LD_STRING MOutResearch
5393: PPUSH
5394: CALL_OW 337
// end ;
5398: END
// export exit_enabled ; every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched and mine_obj_completed do var plidi , lidi , min , max , i , go_pryc , go_pryc_tmp , zustavaj , utek , povol_povol , mt ;
5399: LD_INT 30
5401: PPUSH
5402: LD_EXP 1
5406: PPUSH
5407: CALL_OW 321
5411: PUSH
5412: LD_INT 2
5414: EQUAL
5415: PUSH
5416: LD_INT 20
5418: PPUSH
5419: LD_EXP 1
5423: PPUSH
5424: CALL_OW 321
5428: PUSH
5429: LD_INT 2
5431: EQUAL
5432: AND
5433: PUSH
5434: LD_INT 21
5436: PPUSH
5437: LD_EXP 1
5441: PPUSH
5442: CALL_OW 321
5446: PUSH
5447: LD_INT 2
5449: EQUAL
5450: AND
5451: PUSH
5452: LD_INT 22
5454: PPUSH
5455: LD_EXP 1
5459: PPUSH
5460: CALL_OW 321
5464: PUSH
5465: LD_INT 2
5467: EQUAL
5468: AND
5469: PUSH
5470: LD_EXP 30
5474: AND
5475: IFFALSE 6360
5477: GO 5479
5479: DISABLE
5480: LD_INT 0
5482: PPUSH
5483: PPUSH
5484: PPUSH
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
// begin if IsLive ( Vsevolod ) and GetSide ( Vsevolod ) = you2 then
5493: LD_EXP 70
5497: PPUSH
5498: CALL_OW 300
5502: PUSH
5503: LD_EXP 70
5507: PPUSH
5508: CALL_OW 255
5512: PUSH
5513: LD_EXP 2
5517: EQUAL
5518: AND
5519: IFFALSE 5795
// begin kolik_ma_vsevolod_casu := 0 ;
5521: LD_ADDR_EXP 33
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// utek := [ Vsevolod ] union vsevolod_uderna_group ;
5529: LD_ADDR_VAR 0 9
5533: PUSH
5534: LD_EXP 70
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: LD_EXP 12
5546: UNION
5547: ST_TO_ADDR
// utek := UnitFilter ( utek , [ [ f_placed ] , [ f_side , you2 ] ] ) ;
5548: LD_ADDR_VAR 0 9
5552: PUSH
5553: LD_VAR 0 9
5557: PPUSH
5558: LD_INT 52
5560: PUSH
5561: EMPTY
5562: LIST
5563: PUSH
5564: LD_INT 22
5566: PUSH
5567: LD_EXP 2
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PPUSH
5580: CALL_OW 72
5584: ST_TO_ADDR
// mt := tick + 0 0$20 ;
5585: LD_ADDR_VAR 0 11
5589: PUSH
5590: LD_OWVAR 1
5594: PUSH
5595: LD_INT 700
5597: PLUS
5598: ST_TO_ADDR
// while utek and tick < mt do
5599: LD_VAR 0 9
5603: PUSH
5604: LD_OWVAR 1
5608: PUSH
5609: LD_VAR 0 11
5613: LESS
5614: AND
5615: IFFALSE 5754
// begin for i in utek do
5617: LD_ADDR_VAR 0 5
5621: PUSH
5622: LD_VAR 0 9
5626: PUSH
5627: FOR_IN
5628: IFFALSE 5683
// if IsInArea ( i , vsevolod_in ) or not IsPlaced ( i ) then
5630: LD_VAR 0 5
5634: PPUSH
5635: LD_INT 16
5637: PPUSH
5638: CALL_OW 308
5642: PUSH
5643: LD_VAR 0 5
5647: PPUSH
5648: CALL_OW 305
5652: NOT
5653: OR
5654: IFFALSE 5681
// begin RemoveUnit ( i ) ;
5656: LD_VAR 0 5
5660: PPUSH
5661: CALL_OW 64
// utek := utek diff i ;
5665: LD_ADDR_VAR 0 9
5669: PUSH
5670: LD_VAR 0 9
5674: PUSH
5675: LD_VAR 0 5
5679: DIFF
5680: ST_TO_ADDR
// end ;
5681: GO 5627
5683: POP
5684: POP
// utek := UnitFilter ( utek , [ [ f_placed ] ] ) ;
5685: LD_ADDR_VAR 0 9
5689: PUSH
5690: LD_VAR 0 9
5694: PPUSH
5695: LD_INT 52
5697: PUSH
5698: EMPTY
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: PPUSH
5704: CALL_OW 72
5708: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5709: LD_INT 35
5711: PPUSH
5712: CALL_OW 67
// ComExitVehicle ( utek ) ;
5716: LD_VAR 0 9
5720: PPUSH
5721: CALL_OW 121
// AddComMoveToArea ( utek , vsevolod_in ) ;
5725: LD_VAR 0 9
5729: PPUSH
5730: LD_INT 16
5732: PPUSH
5733: CALL_OW 173
// AddComMoveXY ( utek , 53 , 1 ) ;
5737: LD_VAR 0 9
5741: PPUSH
5742: LD_INT 53
5744: PPUSH
5745: LD_INT 1
5747: PPUSH
5748: CALL_OW 171
// end ;
5752: GO 5599
// SetLives ( Vsevolod , 0 ) ;
5754: LD_EXP 70
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 234
// for i in vsevolod_uderna_group do
5766: LD_ADDR_VAR 0 5
5770: PUSH
5771: LD_EXP 12
5775: PUSH
5776: FOR_IN
5777: IFFALSE 5793
// SetLives ( i , 0 ) ;
5779: LD_VAR 0 5
5783: PPUSH
5784: LD_INT 0
5786: PPUSH
5787: CALL_OW 234
5791: GO 5776
5793: POP
5794: POP
// end ; wait ( 0 0$15 ) ;
5795: LD_INT 525
5797: PPUSH
5798: CALL_OW 67
// DNextMiss1 ;
5802: CALL 6384 0 0
// if IsLive ( Vsevolod ) and kecali then
5806: LD_EXP 70
5810: PPUSH
5811: CALL_OW 300
5815: PUSH
5816: LD_EXP 54
5820: AND
5821: IFFALSE 5829
// DNextMiss3 else
5823: CALL 6440 0 0
5827: GO 5837
// begin DNextMiss2 ;
5829: CALL 6412 0 0
// VyhraResearch ;
5833: CALL 301 0 0
// end ; DNextMiss4 ;
5837: CALL 6480 0 0
// ChangeMissionObjectives ( MCars ) ;
5841: LD_STRING MCars
5843: PPUSH
5844: CALL_OW 337
// SetAreaMapShow ( ru_exit , 1 ) ;
5848: LD_INT 21
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: CALL_OW 424
// exit_enabled := true ;
5858: LD_ADDR_EXP 57
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// convoy_can_go := true ;
5866: LD_ADDR_EXP 58
5870: PUSH
5871: LD_INT 1
5873: ST_TO_ADDR
// if IsLive ( Vsevolod ) then
5874: LD_EXP 70
5878: PPUSH
5879: CALL_OW 300
5883: IFFALSE 6360
// begin lidi := FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Vsevolod , Burlak ] ;
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: LD_INT 22
5892: PUSH
5893: LD_EXP 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 23
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: LD_EXP 70
5936: PUSH
5937: LD_EXP 61
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: DIFF
5946: ST_TO_ADDR
// max := lidi div 2 + lidi mod 2 ;
5947: LD_ADDR_VAR 0 4
5951: PUSH
5952: LD_VAR 0 2
5956: PUSH
5957: LD_INT 2
5959: DIV
5960: PUSH
5961: LD_VAR 0 2
5965: PUSH
5966: LD_INT 2
5968: MOD
5969: PLUS
5970: ST_TO_ADDR
// min := 0 ;
5971: LD_ADDR_VAR 0 3
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// povol_povol := [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ;
5979: LD_ADDR_VAR 0 10
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: LD_INT 2
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: LD_INT 4
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: ST_TO_ADDR
// if max > 1 then
6002: LD_VAR 0 4
6006: PUSH
6007: LD_INT 1
6009: GREATER
6010: IFFALSE 6130
// begin zustavaj := [ Burlak ] ^ CharacterSelection ( 1 , min , max , [ Burlak , sel_changeable , sel_change_class ] ^ ( lidi diff vsevolod_uderna_group ) ^ [ sel_not_hired ] ^ vsevolod_uderna_group ^ [ sel_not_changeable , Vsevolod ] , povol_povol ) ;
6012: LD_ADDR_VAR 0 8
6016: PUSH
6017: LD_EXP 61
6021: PUSH
6022: EMPTY
6023: LIST
6024: PUSH
6025: LD_STRING 1
6027: PPUSH
6028: LD_VAR 0 3
6032: PPUSH
6033: LD_VAR 0 4
6037: PPUSH
6038: LD_EXP 61
6042: PUSH
6043: LD_INT -3
6045: PUSH
6046: LD_INT -5
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: LD_VAR 0 2
6058: PUSH
6059: LD_EXP 12
6063: DIFF
6064: ADD
6065: PUSH
6066: LD_INT -2
6068: PUSH
6069: EMPTY
6070: LIST
6071: ADD
6072: PUSH
6073: LD_EXP 12
6077: ADD
6078: PUSH
6079: LD_INT -4
6081: PUSH
6082: LD_EXP 70
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: ADD
6091: PPUSH
6092: LD_VAR 0 10
6096: PPUSH
6097: CALL_OW 42
6101: ADD
6102: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ ( lidi diff zustavaj ) ;
6103: LD_ADDR_VAR 0 6
6107: PUSH
6108: LD_EXP 70
6112: PUSH
6113: EMPTY
6114: LIST
6115: PUSH
6116: LD_VAR 0 2
6120: PUSH
6121: LD_VAR 0 8
6125: DIFF
6126: ADD
6127: ST_TO_ADDR
// end else
6128: GO 6162
// begin zustavaj := [ Burlak ] ;
6130: LD_ADDR_VAR 0 8
6134: PUSH
6135: LD_EXP 61
6139: PUSH
6140: EMPTY
6141: LIST
6142: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ lidi ;
6143: LD_ADDR_VAR 0 6
6147: PUSH
6148: LD_EXP 70
6152: PUSH
6153: EMPTY
6154: LIST
6155: PUSH
6156: LD_VAR 0 2
6160: ADD
6161: ST_TO_ADDR
// end ; SetSide ( go_pryc , you2 ) ;
6162: LD_VAR 0 6
6166: PPUSH
6167: LD_EXP 2
6171: PPUSH
6172: CALL_OW 235
// for i in go_pryc do
6176: LD_ADDR_VAR 0 5
6180: PUSH
6181: LD_VAR 0 6
6185: PUSH
6186: FOR_IN
6187: IFFALSE 6205
// DoNotAttack ( ai , i ) ;
6189: LD_EXP 6
6193: PPUSH
6194: LD_VAR 0 5
6198: PPUSH
6199: CALL_OW 471
6203: GO 6186
6205: POP
6206: POP
// sli_pryc := [ ] ;
6207: LD_ADDR_EXP 77
6211: PUSH
6212: EMPTY
6213: ST_TO_ADDR
// go_pryc_tmp := go_pryc ;
6214: LD_ADDR_VAR 0 7
6218: PUSH
6219: LD_VAR 0 6
6223: ST_TO_ADDR
// while go_pryc_tmp do
6224: LD_VAR 0 7
6228: IFFALSE 6353
// begin for i in go_pryc_tmp do
6230: LD_ADDR_VAR 0 5
6234: PUSH
6235: LD_VAR 0 7
6239: PUSH
6240: FOR_IN
6241: IFFALSE 6306
// if IsInArea ( i , exit_a ) then
6243: LD_VAR 0 5
6247: PPUSH
6248: LD_INT 20
6250: PPUSH
6251: CALL_OW 308
6255: IFFALSE 6304
// begin RemoveUnit ( i ) ;
6257: LD_VAR 0 5
6261: PPUSH
6262: CALL_OW 64
// go_pryc_tmp := go_pryc_tmp diff [ i ] ;
6266: LD_ADDR_VAR 0 7
6270: PUSH
6271: LD_VAR 0 7
6275: PUSH
6276: LD_VAR 0 5
6280: PUSH
6281: EMPTY
6282: LIST
6283: DIFF
6284: ST_TO_ADDR
// sli_pryc := sli_pryc union [ i ] ;
6285: LD_ADDR_EXP 77
6289: PUSH
6290: LD_EXP 77
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: EMPTY
6301: LIST
6302: UNION
6303: ST_TO_ADDR
// end ;
6304: GO 6240
6306: POP
6307: POP
// wait ( 0 0$1 ) ;
6308: LD_INT 35
6310: PPUSH
6311: CALL_OW 67
// ComExitVehicle ( go_pryc_tmp ) ;
6315: LD_VAR 0 7
6319: PPUSH
6320: CALL_OW 121
// AddComMoveToArea ( go_pryc_tmp , exit_a ) ;
6324: LD_VAR 0 7
6328: PPUSH
6329: LD_INT 20
6331: PPUSH
6332: CALL_OW 173
// AddComMoveXY ( go_pryc_tmp , 104 , 71 ) ;
6336: LD_VAR 0 7
6340: PPUSH
6341: LD_INT 104
6343: PPUSH
6344: LD_INT 71
6346: PPUSH
6347: CALL_OW 171
// end ;
6351: GO 6224
// wait ( 0 0$3 ) ;
6353: LD_INT 105
6355: PPUSH
6356: CALL_OW 67
// end ; end ;
6360: PPOPN 11
6362: END
// export convoy_can_go ; every 0 0$10 trigger convoy_can_go do
6363: LD_EXP 58
6367: IFFALSE 6383
6369: GO 6371
6371: DISABLE
// begin wait ( 0 0$25 ) ;
6372: LD_INT 875
6374: PPUSH
6375: CALL_OW 67
// convoy ;
6379: CALL 9789 0 0
// end ;
6383: END
// export function DNextMiss1 ; begin
6384: LD_INT 0
6386: PPUSH
// DialogueOn ;
6387: CALL_OW 6
// SayRadio ( Pla , DNextMiss1-Pla-1 ) ;
6391: LD_EXP 45
6395: PPUSH
6396: LD_STRING DNextMiss1-Pla-1
6398: PPUSH
6399: CALL_OW 94
// DialogueOff ;
6403: CALL_OW 7
// end ;
6407: LD_VAR 0 1
6411: RET
// export function DNextMiss2 ; begin
6412: LD_INT 0
6414: PPUSH
// DialogueOn ;
6415: CALL_OW 6
// SayRadio ( Pla , DNextMiss2-Pla-1 ) ;
6419: LD_EXP 45
6423: PPUSH
6424: LD_STRING DNextMiss2-Pla-1
6426: PPUSH
6427: CALL_OW 94
// DialogueOff ;
6431: CALL_OW 7
// end ;
6435: LD_VAR 0 1
6439: RET
// export function DNextMiss3 ; begin
6440: LD_INT 0
6442: PPUSH
// DialogueOn ;
6443: CALL_OW 6
// SayRadio ( Pla , DNextMiss3-Pla-1 ) ;
6447: LD_EXP 45
6451: PPUSH
6452: LD_STRING DNextMiss3-Pla-1
6454: PPUSH
6455: CALL_OW 94
// SayRadio ( Pla , DNextMiss3-Pla-1a ) ;
6459: LD_EXP 45
6463: PPUSH
6464: LD_STRING DNextMiss3-Pla-1a
6466: PPUSH
6467: CALL_OW 94
// DialogueOff ;
6471: CALL_OW 7
// end ;
6475: LD_VAR 0 1
6479: RET
// export function DNextMiss4 ; begin
6480: LD_INT 0
6482: PPUSH
// DialogueOn ;
6483: CALL_OW 6
// Say ( Bur , DNextMiss4-Bur-1 ) ;
6487: LD_EXP 44
6491: PPUSH
6492: LD_STRING DNextMiss4-Bur-1
6494: PPUSH
6495: CALL_OW 88
// DialogueOff ;
6499: CALL_OW 7
// end ;
6503: LD_VAR 0 1
6507: RET
// var was_end_query ; every 0 0$5 trigger exit_enabled do var a , qr ;
6508: LD_EXP 57
6512: IFFALSE 6630
6514: GO 6516
6516: DISABLE
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
// begin a := FilterHumansInArea ( ru_exit , [ [ f_side , you ] ] ) ;
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_INT 21
6528: PPUSH
6529: LD_INT 22
6531: PUSH
6532: LD_EXP 1
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: PPUSH
6544: CALL 10708 0 2
6548: ST_TO_ADDR
// if ( Burlak in a ) then
6549: LD_EXP 61
6553: PUSH
6554: LD_VAR 0 1
6558: IN
6559: IFFALSE 6613
// begin end_the_mission_allowed := true ;
6561: LD_ADDR_OWVAR 57
6565: PUSH
6566: LD_INT 1
6568: ST_TO_ADDR
// if not was_end_query then
6569: LD_LOC 2
6573: NOT
6574: IFFALSE 6611
// begin qr := Query ( QEndGame ) ;
6576: LD_ADDR_VAR 0 2
6580: PUSH
6581: LD_STRING QEndGame
6583: PPUSH
6584: CALL_OW 97
6588: ST_TO_ADDR
// was_end_query := true ;
6589: LD_ADDR_LOC 2
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// if qr = 1 then
6597: LD_VAR 0 2
6601: PUSH
6602: LD_INT 1
6604: EQUAL
6605: IFFALSE 6611
// VyhraExit ;
6607: CALL 374 0 0
// end ; end else
6611: GO 6629
// begin end_the_mission_allowed := false ;
6613: LD_ADDR_OWVAR 57
6617: PUSH
6618: LD_INT 0
6620: ST_TO_ADDR
// was_end_query := false ;
6621: LD_ADDR_LOC 2
6625: PUSH
6626: LD_INT 0
6628: ST_TO_ADDR
// end ; enable ;
6629: ENABLE
// end ;
6630: PPOPN 2
6632: END
// export gleb_lives , utok_na_gleba ; every 0 0$1 trigger gleb and gleb_lives <> GetLives ( gleb ) do var i ;
6633: LD_EXP 65
6637: PUSH
6638: LD_EXP 59
6642: PUSH
6643: LD_EXP 65
6647: PPUSH
6648: CALL_OW 256
6652: NONEQUAL
6653: AND
6654: IFFALSE 6720
6656: GO 6658
6658: DISABLE
6659: LD_INT 0
6661: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
6662: LD_ADDR_VAR 0 1
6666: PUSH
6667: LD_INT 22
6669: PUSH
6670: LD_EXP 1
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: EMPTY
6680: LIST
6681: PPUSH
6682: CALL_OW 69
6686: PUSH
6687: FOR_IN
6688: IFFALSE 6717
// if WantsToAttack ( i ) = Gleb then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 319
6699: PUSH
6700: LD_EXP 65
6704: EQUAL
6705: IFFALSE 6715
// utok_na_gleba := true ;
6707: LD_ADDR_EXP 60
6711: PUSH
6712: LD_INT 1
6714: ST_TO_ADDR
6715: GO 6687
6717: POP
6718: POP
// enable ;
6719: ENABLE
// end ;
6720: PPOPN 1
6722: END
// export function DKillGleb ; begin
6723: LD_INT 0
6725: PPUSH
// DialogueOn ;
6726: CALL_OW 6
// SayRadio ( Pla , DKillGleb-Pla-1 ) ;
6730: LD_EXP 45
6734: PPUSH
6735: LD_STRING DKillGleb-Pla-1
6737: PPUSH
6738: CALL_OW 94
// DialogueOff ;
6742: CALL_OW 7
// end ;
6746: LD_VAR 0 1
6750: RET
// every 0 0$5 do var i , a ;
6751: GO 6753
6753: DISABLE
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
// begin a := 0 ;
6758: LD_ADDR_VAR 0 2
6762: PUSH
6763: LD_INT 0
6765: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_side , you ] ] ) do
6766: LD_ADDR_VAR 0 1
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 30
6776: PUSH
6777: LD_INT 0
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 30
6786: PUSH
6787: LD_INT 1
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 22
6801: PUSH
6802: LD_EXP 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: PPUSH
6815: CALL_OW 69
6819: PUSH
6820: FOR_IN
6821: IFFALSE 6854
// a := a + GetResourceType ( Getbase ( i ) , mat_siberit ) ;
6823: LD_ADDR_VAR 0 2
6827: PUSH
6828: LD_VAR 0 2
6832: PUSH
6833: LD_VAR 0 1
6837: PPUSH
6838: CALL_OW 274
6842: PPUSH
6843: LD_INT 3
6845: PPUSH
6846: CALL_OW 275
6850: PLUS
6851: ST_TO_ADDR
6852: GO 6820
6854: POP
6855: POP
// if a >= 100 then
6856: LD_VAR 0 2
6860: PUSH
6861: LD_INT 100
6863: GREATEREQUAL
6864: IFFALSE 6883
// begin ChangeMissionObjectives ( MOutMine ) ;
6866: LD_STRING MOutMine
6868: PPUSH
6869: CALL_OW 337
// mine_obj_completed := true ;
6873: LD_ADDR_EXP 30
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// end else
6881: GO 6884
// enable ;
6883: ENABLE
// end ;
6884: PPOPN 2
6886: END
// every 0 0$5 trigger GetResourceType ( GetBase ( RuDepot ) , mat_siberit ) > 15 do
6887: LD_INT 58
6889: PPUSH
6890: CALL_OW 274
6894: PPUSH
6895: LD_INT 3
6897: PPUSH
6898: CALL_OW 275
6902: PUSH
6903: LD_INT 15
6905: GREATER
6906: IFFALSE 6952
6908: GO 6910
6910: DISABLE
// begin if not Ovsyenkotaken then
6911: LD_EXP 14
6915: NOT
6916: IFFALSE 6952
// begin if GetSide ( RuDepot ) <> you then
6918: LD_INT 58
6920: PPUSH
6921: CALL_OW 255
6925: PUSH
6926: LD_EXP 1
6930: NONEQUAL
6931: IFFALSE 6951
// SetResourceType ( GetBase ( RuDepot ) , mat_siberit , 5 ) ;
6933: LD_INT 58
6935: PPUSH
6936: CALL_OW 274
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: LD_INT 5
6946: PPUSH
6947: CALL_OW 277
// enable ;
6951: ENABLE
// end ; end ;
6952: END
// every 0 0$10 trigger UnitFilter ( zbytek , [ [ f_see , you ] ] ) do
6953: LD_EXP 91
6957: PPUSH
6958: LD_INT 101
6960: PUSH
6961: LD_EXP 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: PPUSH
6973: CALL_OW 72
6977: IFFALSE 6996
6979: GO 6981
6981: DISABLE
// begin wait ( 0 0$10 ) ;
6982: LD_INT 350
6984: PPUSH
6985: CALL_OW 67
// MyHint ( RemoteControl ) ;
6989: LD_STRING RemoteControl
6991: PPUSH
6992: CALL 11731 0 1
// end ; end_of_file
6996: END
// export Burlak , Platonov , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Vsevolod , Vsevolod2 ; export used , ru_cars , cars , other_ru_5_6 , stevens_killed , sli_pryc ; export fast_braketrough ; export function Load ; var i , k1 , k2 ; begin
6997: LD_INT 0
6999: PPUSH
7000: PPUSH
7001: PPUSH
7002: PPUSH
// belkovfreed := LoadVariable ( belkovfreed , true ) ;
7003: LD_ADDR_EXP 13
7007: PUSH
7008: LD_STRING belkovfreed
7010: PPUSH
7011: LD_INT 1
7013: PPUSH
7014: CALL_OW 30
7018: ST_TO_ADDR
// cars := LoadVariable ( cars_ru_6 , [ [ ru_heavy_wheeled , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] ] ) ;
7019: LD_ADDR_EXP 74
7023: PUSH
7024: LD_STRING cars_ru_6
7026: PPUSH
7027: LD_INT 23
7029: PUSH
7030: LD_INT 43
7032: PUSH
7033: LD_INT 3
7035: PUSH
7036: LD_INT 0
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 23
7051: PUSH
7052: LD_INT 46
7054: PUSH
7055: LD_INT 3
7057: PUSH
7058: LD_INT 0
7060: PUSH
7061: LD_INT 0
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 23
7073: PUSH
7074: LD_INT 46
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 0
7082: PUSH
7083: LD_INT 0
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: LD_INT 46
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: LD_INT 0
7104: PUSH
7105: LD_INT 0
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 24
7117: PUSH
7118: LD_INT 43
7120: PUSH
7121: LD_INT 3
7123: PUSH
7124: LD_INT 0
7126: PUSH
7127: LD_INT 0
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 24
7139: PUSH
7140: LD_INT 43
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: LD_INT 0
7148: PUSH
7149: LD_INT 0
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 24
7161: PUSH
7162: LD_INT 43
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 0
7170: PUSH
7171: LD_INT 0
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 24
7183: PUSH
7184: LD_INT 43
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: LD_INT 0
7192: PUSH
7193: LD_INT 0
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 30
7217: ST_TO_ADDR
// stevens_killed := LoadVariable ( stevens_killed , false ) ;
7218: LD_ADDR_EXP 76
7222: PUSH
7223: LD_STRING stevens_killed
7225: PPUSH
7226: LD_INT 0
7228: PPUSH
7229: CALL_OW 30
7233: ST_TO_ADDR
// fast_braketrough := LoadVariable ( OvesyenkoTime , false ) ;
7234: LD_ADDR_EXP 78
7238: PUSH
7239: LD_STRING OvesyenkoTime
7241: PPUSH
7242: LD_INT 0
7244: PPUSH
7245: CALL_OW 30
7249: ST_TO_ADDR
// InitUc ;
7250: CALL_OW 18
// InitHc ;
7254: CALL_OW 19
// uc_side := you ;
7258: LD_ADDR_OWVAR 20
7262: PUSH
7263: LD_EXP 1
7267: ST_TO_ADDR
// uc_nation := nation_russian ;
7268: LD_ADDR_OWVAR 21
7272: PUSH
7273: LD_INT 3
7275: ST_TO_ADDR
// Platonov := MyCreateCharacter ( Platonov , 0 , class_soldier , true ) ;
7276: LD_ADDR_EXP 62
7280: PUSH
7281: LD_STRING Platonov
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: LD_INT 1
7289: PPUSH
7290: LD_INT 1
7292: PPUSH
7293: CALL 8303 0 4
7297: ST_TO_ADDR
// if difficulty = 3 then
7298: LD_OWVAR 67
7302: PUSH
7303: LD_INT 3
7305: EQUAL
7306: IFFALSE 7330
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7308: LD_ADDR_EXP 61
7312: PUSH
7313: LD_STRING Burlak
7315: PPUSH
7316: LD_INT 0
7318: PPUSH
7319: LD_INT 3
7321: PPUSH
7322: LD_INT 0
7324: PPUSH
7325: CALL 8303 0 4
7329: ST_TO_ADDR
// Titov := MyCreateCharacter ( Titov , 0 , class_soldier , false ) ;
7330: LD_ADDR_EXP 67
7334: PUSH
7335: LD_STRING Titov
7337: PPUSH
7338: LD_INT 0
7340: PPUSH
7341: LD_INT 1
7343: PPUSH
7344: LD_INT 0
7346: PPUSH
7347: CALL 8303 0 4
7351: ST_TO_ADDR
// Dolgov := MyCreateCharacter ( Dolgov , 0 , class_scientistic , false ) ;
7352: LD_ADDR_EXP 68
7356: PUSH
7357: LD_STRING Dolgov
7359: PPUSH
7360: LD_INT 0
7362: PPUSH
7363: LD_INT 4
7365: PPUSH
7366: LD_INT 0
7368: PPUSH
7369: CALL 8303 0 4
7373: ST_TO_ADDR
// Lipshchin := MyCreateCharacter ( Lipshchin , 0 , class_soldier , false ) ;
7374: LD_ADDR_EXP 69
7378: PUSH
7379: LD_STRING Lipshchin
7381: PPUSH
7382: LD_INT 0
7384: PPUSH
7385: LD_INT 1
7387: PPUSH
7388: LD_INT 0
7390: PPUSH
7391: CALL 8303 0 4
7395: ST_TO_ADDR
// Karamazov := MyCreateCharacter ( Karamazov , 0 , class_engineer , false ) ;
7396: LD_ADDR_EXP 63
7400: PUSH
7401: LD_STRING Karamazov
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: LD_INT 2
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL 8303 0 4
7417: ST_TO_ADDR
// Petrovova := MyCreateCharacter ( Petrovova , 0 , class_soldier , false ) ;
7418: LD_ADDR_EXP 64
7422: PUSH
7423: LD_STRING Petrovova
7425: PPUSH
7426: LD_INT 0
7428: PPUSH
7429: LD_INT 1
7431: PPUSH
7432: LD_INT 0
7434: PPUSH
7435: CALL 8303 0 4
7439: ST_TO_ADDR
// Gleb := MyCreateCharacter ( Gleb , 0 , class_soldier , false ) ;
7440: LD_ADDR_EXP 65
7444: PUSH
7445: LD_STRING Gleb
7447: PPUSH
7448: LD_INT 0
7450: PPUSH
7451: LD_INT 1
7453: PPUSH
7454: LD_INT 0
7456: PPUSH
7457: CALL 8303 0 4
7461: ST_TO_ADDR
// Petrosyan := MyCreateCharacter ( Petrosyan , 0 , class_scientistic , false ) ;
7462: LD_ADDR_EXP 66
7466: PUSH
7467: LD_STRING Petrosyan
7469: PPUSH
7470: LD_INT 0
7472: PPUSH
7473: LD_INT 4
7475: PPUSH
7476: LD_INT 0
7478: PPUSH
7479: CALL 8303 0 4
7483: ST_TO_ADDR
// if difficulty < 3 then
7484: LD_OWVAR 67
7488: PUSH
7489: LD_INT 3
7491: LESS
7492: IFFALSE 7516
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7494: LD_ADDR_EXP 61
7498: PUSH
7499: LD_STRING Burlak
7501: PPUSH
7502: LD_INT 0
7504: PPUSH
7505: LD_INT 3
7507: PPUSH
7508: LD_INT 0
7510: PPUSH
7511: CALL 8303 0 4
7515: ST_TO_ADDR
// used := [ Burlak , Lipshchin , Titov , Dolgov , Karamazov , Petrovova , Gleb , Petrosyan ] diff 0 ;
7516: LD_ADDR_EXP 72
7520: PUSH
7521: LD_EXP 61
7525: PUSH
7526: LD_EXP 69
7530: PUSH
7531: LD_EXP 67
7535: PUSH
7536: LD_EXP 68
7540: PUSH
7541: LD_EXP 63
7545: PUSH
7546: LD_EXP 64
7550: PUSH
7551: LD_EXP 65
7555: PUSH
7556: LD_EXP 66
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 0
7573: DIFF
7574: ST_TO_ADDR
// other_ru_5_6 := CreateCharacterSet ( other_ru_5_6 ) ;
7575: LD_ADDR_EXP 75
7579: PUSH
7580: LD_STRING other_ru_5_6
7582: PPUSH
7583: CALL_OW 31
7587: ST_TO_ADDR
// used := used ^ other_ru_5_6 ;
7588: LD_ADDR_EXP 72
7592: PUSH
7593: LD_EXP 72
7597: PUSH
7598: LD_EXP 75
7602: ADD
7603: ST_TO_ADDR
// rulive := used ;
7604: LD_ADDR_EXP 9
7608: PUSH
7609: LD_EXP 72
7613: ST_TO_ADDR
// k1 := Rand ( 1 , used ) ;
7614: LD_ADDR_VAR 0 3
7618: PUSH
7619: LD_INT 1
7621: PPUSH
7622: LD_EXP 72
7626: PPUSH
7627: CALL_OW 12
7631: ST_TO_ADDR
// if not UnitFilter ( used , [ [ f_class , class_engineer ] ] ) then
7632: LD_EXP 72
7636: PPUSH
7637: LD_INT 25
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: PPUSH
7650: CALL_OW 72
7654: NOT
7655: IFFALSE 7675
// SetClass ( used [ k1 ] , class_engineer ) ;
7657: LD_EXP 72
7661: PUSH
7662: LD_VAR 0 3
7666: ARRAY
7667: PPUSH
7668: LD_INT 2
7670: PPUSH
7671: CALL_OW 336
// k2 := Rand ( 1 , used ) ;
7675: LD_ADDR_VAR 0 4
7679: PUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_EXP 72
7687: PPUSH
7688: CALL_OW 12
7692: ST_TO_ADDR
// while k1 = k2 do
7693: LD_VAR 0 3
7697: PUSH
7698: LD_VAR 0 4
7702: EQUAL
7703: IFFALSE 7725
// k2 := Rand ( 1 , used ) ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_INT 1
7712: PPUSH
7713: LD_EXP 72
7717: PPUSH
7718: CALL_OW 12
7722: ST_TO_ADDR
7723: GO 7693
// if difficulty = 1 and not UnitFilter ( used , [ [ f_class , class_scientistic ] ] ) then
7725: LD_OWVAR 67
7729: PUSH
7730: LD_INT 1
7732: EQUAL
7733: PUSH
7734: LD_EXP 72
7738: PPUSH
7739: LD_INT 25
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: EMPTY
7750: LIST
7751: PPUSH
7752: CALL_OW 72
7756: NOT
7757: AND
7758: IFFALSE 7778
// SetClass ( used [ k2 ] , class_scientistic ) ;
7760: LD_EXP 72
7764: PUSH
7765: LD_VAR 0 4
7769: ARRAY
7770: PPUSH
7771: LD_INT 4
7773: PPUSH
7774: CALL_OW 336
// uc_side := you2 ;
7778: LD_ADDR_OWVAR 20
7782: PUSH
7783: LD_EXP 2
7787: ST_TO_ADDR
// Vsevolod := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
7788: LD_ADDR_EXP 70
7792: PUSH
7793: LD_STRING Vsevolod
7795: PPUSH
7796: LD_INT 0
7798: PPUSH
7799: LD_INT 1
7801: PPUSH
7802: LD_INT 1
7804: PPUSH
7805: CALL 8303 0 4
7809: ST_TO_ADDR
// Vsevolod2 := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
7810: LD_ADDR_EXP 71
7814: PUSH
7815: LD_STRING Vsevolod
7817: PPUSH
7818: LD_INT 0
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: CALL 8303 0 4
7831: ST_TO_ADDR
// for i := 1 to 3 do
7832: LD_ADDR_VAR 0 2
7836: PUSH
7837: DOUBLE
7838: LD_INT 1
7840: DEC
7841: ST_TO_ADDR
7842: LD_INT 3
7844: PUSH
7845: FOR_TO
7846: IFFALSE 7879
// begin PrepareSoldier ( sex_male , 3 ) ;
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 3
7853: PPUSH
7854: CALL_OW 381
// vsevolod_uderna_group := vsevolod_uderna_group ^ [ CreateHuman ] ;
7858: LD_ADDR_EXP 12
7862: PUSH
7863: LD_EXP 12
7867: PUSH
7868: CALL_OW 44
7872: PUSH
7873: EMPTY
7874: LIST
7875: ADD
7876: ST_TO_ADDR
// end ;
7877: GO 7845
7879: POP
7880: POP
// SetClass ( vsevolod_uderna_group [ 1 ] , class_engineer ) ;
7881: LD_EXP 12
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: PPUSH
7890: LD_INT 2
7892: PPUSH
7893: CALL_OW 336
// vsevolod_uderna_group := vsevolod_uderna_group ;
7897: LD_ADDR_EXP 12
7901: PUSH
7902: LD_EXP 12
7906: ST_TO_ADDR
// end ;
7907: LD_VAR 0 1
7911: RET
// export function place_in_ru_cars ; var car , i ; begin
7912: LD_INT 0
7914: PPUSH
7915: PPUSH
7916: PPUSH
// InitUc ;
7917: CALL_OW 18
// InitVc ;
7921: CALL_OW 20
// vc_control := control_manual ;
7925: LD_ADDR_OWVAR 38
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// vc_engine := engine_combustion ;
7933: LD_ADDR_OWVAR 39
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// uc_side := you ;
7941: LD_ADDR_OWVAR 20
7945: PUSH
7946: LD_EXP 1
7950: ST_TO_ADDR
// ru_cars := [ ] ;
7951: LD_ADDR_EXP 73
7955: PUSH
7956: EMPTY
7957: ST_TO_ADDR
// if ( ( cars + 0 ) < ( used + 0 ) ) or ( ( used + 0 ) < 6 ) then
7958: LD_EXP 74
7962: PUSH
7963: LD_INT 0
7965: PLUS
7966: PUSH
7967: LD_EXP 72
7971: PUSH
7972: LD_INT 0
7974: PLUS
7975: LESS
7976: PUSH
7977: LD_EXP 72
7981: PUSH
7982: LD_INT 0
7984: PLUS
7985: PUSH
7986: LD_INT 6
7988: LESS
7989: OR
7990: IFFALSE 7999
// begin Msg ( spatny save ) ;
7992: LD_STRING spatny save
7994: PPUSH
7995: CALL_OW 100
// end ; for i := 1 to used do
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: DOUBLE
8005: LD_INT 1
8007: DEC
8008: ST_TO_ADDR
8009: LD_EXP 72
8013: PUSH
8014: FOR_TO
8015: IFFALSE 8255
// begin uc_nation := cars [ i ] [ 3 ] ;
8017: LD_ADDR_OWVAR 21
8021: PUSH
8022: LD_EXP 74
8026: PUSH
8027: LD_VAR 0 3
8031: ARRAY
8032: PUSH
8033: LD_INT 3
8035: ARRAY
8036: ST_TO_ADDR
// vc_chassis := cars [ i ] [ 1 ] ;
8037: LD_ADDR_OWVAR 37
8041: PUSH
8042: LD_EXP 74
8046: PUSH
8047: LD_VAR 0 3
8051: ARRAY
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: ST_TO_ADDR
// vc_weapon := cars [ i ] [ 2 ] ;
8057: LD_ADDR_OWVAR 40
8061: PUSH
8062: LD_EXP 74
8066: PUSH
8067: LD_VAR 0 3
8071: ARRAY
8072: PUSH
8073: LD_INT 2
8075: ARRAY
8076: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
8077: LD_ADDR_OWVAR 24
8081: PUSH
8082: LD_INT 3
8084: PPUSH
8085: LD_INT 4
8087: PPUSH
8088: CALL_OW 12
8092: ST_TO_ADDR
// vc_fuel_battery := Rand ( 3 , 6 ) ;
8093: LD_ADDR_OWVAR 41
8097: PUSH
8098: LD_INT 3
8100: PPUSH
8101: LD_INT 6
8103: PPUSH
8104: CALL_OW 12
8108: ST_TO_ADDR
// uc_direction := 5 ;
8109: LD_ADDR_OWVAR 24
8113: PUSH
8114: LD_INT 5
8116: ST_TO_ADDR
// car := CreateVehicle ;
8117: LD_ADDR_VAR 0 2
8121: PUSH
8122: CALL_OW 45
8126: ST_TO_ADDR
// if ( cars [ i ] [ 2 ] in [ ar_cargo_bay , ru_cargo_bay , us_cargo_bay ] ) then
8127: LD_EXP 74
8131: PUSH
8132: LD_VAR 0 3
8136: ARRAY
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_INT 32
8144: PUSH
8145: LD_INT 51
8147: PUSH
8148: LD_INT 12
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: LIST
8155: IN
8156: IFFALSE 8217
// if ( cars [ i ] [ 4 ] <> 0 ) then
8158: LD_EXP 74
8162: PUSH
8163: LD_VAR 0 3
8167: ARRAY
8168: PUSH
8169: LD_INT 4
8171: ARRAY
8172: PUSH
8173: LD_INT 0
8175: NONEQUAL
8176: IFFALSE 8217
// SetCargo ( car , cars [ i ] [ 4 ] , cars [ i ] [ 5 ] ) ;
8178: LD_VAR 0 2
8182: PPUSH
8183: LD_EXP 74
8187: PUSH
8188: LD_VAR 0 3
8192: ARRAY
8193: PUSH
8194: LD_INT 4
8196: ARRAY
8197: PPUSH
8198: LD_EXP 74
8202: PUSH
8203: LD_VAR 0 3
8207: ARRAY
8208: PUSH
8209: LD_INT 5
8211: ARRAY
8212: PPUSH
8213: CALL_OW 290
// ru_cars := ru_cars ^ car ;
8217: LD_ADDR_EXP 73
8221: PUSH
8222: LD_EXP 73
8226: PUSH
8227: LD_VAR 0 2
8231: ADD
8232: ST_TO_ADDR
// PlaceHumanInUnit ( used [ i ] , car ) ;
8233: LD_EXP 72
8237: PUSH
8238: LD_VAR 0 3
8242: ARRAY
8243: PPUSH
8244: LD_VAR 0 2
8248: PPUSH
8249: CALL_OW 52
// end ;
8253: GO 8014
8255: POP
8256: POP
// end ;
8257: LD_VAR 0 1
8261: RET
// export function place_ru_cars ; var i ; begin
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// for i in ru_cars do
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_EXP 73
8275: PUSH
8276: FOR_IN
8277: IFFALSE 8296
// PlaceUnitArea ( i , ru_place , false ) ;
8279: LD_VAR 0 2
8283: PPUSH
8284: LD_INT 5
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 49
8294: GO 8276
8296: POP
8297: POP
// end ;
8298: LD_VAR 0 1
8302: RET
// function MyCreateCharacter ( name , unclass , unclass_gen , new ) ; begin
8303: LD_INT 0
8305: PPUSH
// if new or TestCharacters ( name ) then
8306: LD_VAR 0 4
8310: PUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 28
8320: OR
8321: IFFALSE 8404
// begin if new then
8323: LD_VAR 0 4
8327: IFFALSE 8346
// result := NewCharacter ( name ) else
8329: LD_ADDR_VAR 0 5
8333: PUSH
8334: LD_VAR 0 1
8338: PPUSH
8339: CALL_OW 25
8343: ST_TO_ADDR
8344: GO 8382
// begin if CheckCharacterSet ( name ) then
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 29
8355: IFFALSE 8374
// result := CreateCharacter ( name ) else
8357: LD_ADDR_VAR 0 5
8361: PUSH
8362: LD_VAR 0 1
8366: PPUSH
8367: CALL_OW 34
8371: ST_TO_ADDR
8372: GO 8382
// result := 0 ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 0
8381: ST_TO_ADDR
// end ; if unclass then
8382: LD_VAR 0 2
8386: IFFALSE 8402
// SetClass ( result , unclass ) ;
8388: LD_VAR 0 5
8392: PPUSH
8393: LD_VAR 0 2
8397: PPUSH
8398: CALL_OW 336
// end else
8402: GO 8480
// begin Msg ( Chybi  & name & ! ) ;
8404: LD_STRING Chybi 
8406: PUSH
8407: LD_VAR 0 1
8411: STR
8412: PUSH
8413: LD_STRING !
8415: STR
8416: PPUSH
8417: CALL_OW 100
// hc_name := name ;
8421: LD_ADDR_OWVAR 26
8425: PUSH
8426: LD_VAR 0 1
8430: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 3 ) ;
8431: LD_INT 1
8433: PPUSH
8434: LD_INT 0
8436: PPUSH
8437: LD_INT 3
8439: PPUSH
8440: CALL_OW 380
// if unclass_gen then
8444: LD_VAR 0 3
8448: IFFALSE 8462
// hc_class := unclass_gen else
8450: LD_ADDR_OWVAR 28
8454: PUSH
8455: LD_VAR 0 3
8459: ST_TO_ADDR
8460: GO 8470
// hc_class := class_soldier ;
8462: LD_ADDR_OWVAR 28
8466: PUSH
8467: LD_INT 1
8469: ST_TO_ADDR
// result := CreateHuman ;
8470: LD_ADDR_VAR 0 5
8474: PUSH
8475: CALL_OW 44
8479: ST_TO_ADDR
// end ; end ;
8480: LD_VAR 0 5
8484: RET
// export convoy_06 ; export function Save ; var i , zustali , tmp_conv ; begin
8485: LD_INT 0
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
// DeleteVariable ( cars_ru_6 ) ;
8491: LD_STRING cars_ru_6
8493: PPUSH
8494: CALL_OW 41
// DeleteVariable ( other_ru_5_6 ) ;
8498: LD_STRING other_ru_5_6
8500: PPUSH
8501: CALL_OW 41
// SaveCharacters ( Burlak , Burlak ) ;
8505: LD_EXP 61
8509: PPUSH
8510: LD_STRING Burlak
8512: PPUSH
8513: CALL_OW 38
// if Titov then
8517: LD_EXP 67
8521: IFFALSE 8581
// if IsDead ( titov ) then
8523: LD_EXP 67
8527: PPUSH
8528: CALL_OW 301
8532: IFFALSE 8546
// SaveVariable ( 0 , TitovLoc ) else
8534: LD_INT 0
8536: PPUSH
8537: LD_STRING TitovLoc
8539: PPUSH
8540: CALL_OW 39
8544: GO 8581
// if titov in sli_pryc then
8546: LD_EXP 67
8550: PUSH
8551: LD_EXP 77
8555: IN
8556: IFFALSE 8571
// SaveVariable ( - 7 , TitovLoc ) else
8558: LD_INT 7
8560: NEG
8561: PPUSH
8562: LD_STRING TitovLoc
8564: PPUSH
8565: CALL_OW 39
8569: GO 8581
// SaveVariable ( 7 , TitovLoc ) ;
8571: LD_INT 7
8573: PPUSH
8574: LD_STRING TitovLoc
8576: PPUSH
8577: CALL_OW 39
// SaveCharacters ( Titov , Titov ) ;
8581: LD_EXP 67
8585: PPUSH
8586: LD_STRING Titov
8588: PPUSH
8589: CALL_OW 38
// if Dolgov then
8593: LD_EXP 68
8597: IFFALSE 8657
// if IsDead ( Dolgov ) then
8599: LD_EXP 68
8603: PPUSH
8604: CALL_OW 301
8608: IFFALSE 8622
// SaveVariable ( 0 , DolgovLoc ) else
8610: LD_INT 0
8612: PPUSH
8613: LD_STRING DolgovLoc
8615: PPUSH
8616: CALL_OW 39
8620: GO 8657
// if Dolgov in sli_pryc then
8622: LD_EXP 68
8626: PUSH
8627: LD_EXP 77
8631: IN
8632: IFFALSE 8647
// SaveVariable ( - 7 , DolgovLoc ) else
8634: LD_INT 7
8636: NEG
8637: PPUSH
8638: LD_STRING DolgovLoc
8640: PPUSH
8641: CALL_OW 39
8645: GO 8657
// SaveVariable ( 7 , DolgovLoc ) ;
8647: LD_INT 7
8649: PPUSH
8650: LD_STRING DolgovLoc
8652: PPUSH
8653: CALL_OW 39
// if Dolgov then
8657: LD_EXP 68
8661: IFFALSE 8675
// SaveCharacters ( Dolgov , Dolgov ) ;
8663: LD_EXP 68
8667: PPUSH
8668: LD_STRING Dolgov
8670: PPUSH
8671: CALL_OW 38
// if Lipshchin then
8675: LD_EXP 69
8679: IFFALSE 8739
// if IsDead ( Lipshchin ) then
8681: LD_EXP 69
8685: PPUSH
8686: CALL_OW 301
8690: IFFALSE 8704
// SaveVariable ( 0 , LipshchinLoc ) else
8692: LD_INT 0
8694: PPUSH
8695: LD_STRING LipshchinLoc
8697: PPUSH
8698: CALL_OW 39
8702: GO 8739
// if Lipshchin in sli_pryc then
8704: LD_EXP 69
8708: PUSH
8709: LD_EXP 77
8713: IN
8714: IFFALSE 8729
// SaveVariable ( - 7 , LipshchinLoc ) else
8716: LD_INT 7
8718: NEG
8719: PPUSH
8720: LD_STRING LipshchinLoc
8722: PPUSH
8723: CALL_OW 39
8727: GO 8739
// SaveVariable ( 7 , LipshchinLoc ) ;
8729: LD_INT 7
8731: PPUSH
8732: LD_STRING LipshchinLoc
8734: PPUSH
8735: CALL_OW 39
// if Lipshchin then
8739: LD_EXP 69
8743: IFFALSE 8757
// SaveCharacters ( Lipshchin , Lipshchin ) ;
8745: LD_EXP 69
8749: PPUSH
8750: LD_STRING Lipshchin
8752: PPUSH
8753: CALL_OW 38
// if Karamazov then
8757: LD_EXP 63
8761: IFFALSE 8821
// if IsDead ( Karamazov ) then
8763: LD_EXP 63
8767: PPUSH
8768: CALL_OW 301
8772: IFFALSE 8786
// SaveVariable ( 0 , KaramazovLoc ) else
8774: LD_INT 0
8776: PPUSH
8777: LD_STRING KaramazovLoc
8779: PPUSH
8780: CALL_OW 39
8784: GO 8821
// if Karamazov in sli_pryc then
8786: LD_EXP 63
8790: PUSH
8791: LD_EXP 77
8795: IN
8796: IFFALSE 8811
// SaveVariable ( - 7 , KaramazovLoc ) else
8798: LD_INT 7
8800: NEG
8801: PPUSH
8802: LD_STRING KaramazovLoc
8804: PPUSH
8805: CALL_OW 39
8809: GO 8821
// SaveVariable ( 7 , KaramazovLoc ) ;
8811: LD_INT 7
8813: PPUSH
8814: LD_STRING KaramazovLoc
8816: PPUSH
8817: CALL_OW 39
// if Karamazov then
8821: LD_EXP 63
8825: IFFALSE 8839
// SaveCharacters ( Karamazov , Karamazov ) ;
8827: LD_EXP 63
8831: PPUSH
8832: LD_STRING Karamazov
8834: PPUSH
8835: CALL_OW 38
// if Petrovova then
8839: LD_EXP 64
8843: IFFALSE 8903
// if IsDead ( Petrovova ) then
8845: LD_EXP 64
8849: PPUSH
8850: CALL_OW 301
8854: IFFALSE 8868
// SaveVariable ( 0 , PetrovovaLoc ) else
8856: LD_INT 0
8858: PPUSH
8859: LD_STRING PetrovovaLoc
8861: PPUSH
8862: CALL_OW 39
8866: GO 8903
// if Petrovova in sli_pryc then
8868: LD_EXP 64
8872: PUSH
8873: LD_EXP 77
8877: IN
8878: IFFALSE 8893
// SaveVariable ( - 7 , PetrovovaLoc ) else
8880: LD_INT 7
8882: NEG
8883: PPUSH
8884: LD_STRING PetrovovaLoc
8886: PPUSH
8887: CALL_OW 39
8891: GO 8903
// SaveVariable ( 7 , PetrovovaLoc ) ;
8893: LD_INT 7
8895: PPUSH
8896: LD_STRING PetrovovaLoc
8898: PPUSH
8899: CALL_OW 39
// if Petrovova then
8903: LD_EXP 64
8907: IFFALSE 8921
// SaveCharacters ( Petrovova , Petrovova ) ;
8909: LD_EXP 64
8913: PPUSH
8914: LD_STRING Petrovova
8916: PPUSH
8917: CALL_OW 38
// if Gleb then
8921: LD_EXP 65
8925: IFFALSE 8985
// if IsDead ( Gleb ) then
8927: LD_EXP 65
8931: PPUSH
8932: CALL_OW 301
8936: IFFALSE 8950
// SaveVariable ( 0 , GlebLoc ) else
8938: LD_INT 0
8940: PPUSH
8941: LD_STRING GlebLoc
8943: PPUSH
8944: CALL_OW 39
8948: GO 8985
// if Gleb in sli_pryc then
8950: LD_EXP 65
8954: PUSH
8955: LD_EXP 77
8959: IN
8960: IFFALSE 8975
// SaveVariable ( - 7 , GlebLoc ) else
8962: LD_INT 7
8964: NEG
8965: PPUSH
8966: LD_STRING GlebLoc
8968: PPUSH
8969: CALL_OW 39
8973: GO 8985
// SaveVariable ( 7 , GlebLoc ) ;
8975: LD_INT 7
8977: PPUSH
8978: LD_STRING GlebLoc
8980: PPUSH
8981: CALL_OW 39
// if Gleb then
8985: LD_EXP 65
8989: IFFALSE 9003
// SaveCharacters ( Gleb , Gleb ) ;
8991: LD_EXP 65
8995: PPUSH
8996: LD_STRING Gleb
8998: PPUSH
8999: CALL_OW 38
// if Petrosyan then
9003: LD_EXP 66
9007: IFFALSE 9067
// if IsDead ( Petrosyan ) then
9009: LD_EXP 66
9013: PPUSH
9014: CALL_OW 301
9018: IFFALSE 9032
// SaveVariable ( 0 , PetrosyanLoc ) else
9020: LD_INT 0
9022: PPUSH
9023: LD_STRING PetrosyanLoc
9025: PPUSH
9026: CALL_OW 39
9030: GO 9067
// if Petrosyan in sli_pryc then
9032: LD_EXP 66
9036: PUSH
9037: LD_EXP 77
9041: IN
9042: IFFALSE 9057
// SaveVariable ( - 7 , PetrosyanLoc ) else
9044: LD_INT 7
9046: NEG
9047: PPUSH
9048: LD_STRING PetrosyanLoc
9050: PPUSH
9051: CALL_OW 39
9055: GO 9067
// SaveVariable ( 7 , PetrosyanLoc ) ;
9057: LD_INT 7
9059: PPUSH
9060: LD_STRING PetrosyanLoc
9062: PPUSH
9063: CALL_OW 39
// if Petrosyan then
9067: LD_EXP 66
9071: IFFALSE 9085
// SaveCharacters ( Petrosyan , Petrosyan ) ;
9073: LD_EXP 66
9077: PPUSH
9078: LD_STRING Petrosyan
9080: PPUSH
9081: CALL_OW 38
// SaveCharacters ( Vsevolod , Vsevolod ) ;
9085: LD_EXP 70
9089: PPUSH
9090: LD_STRING Vsevolod
9092: PPUSH
9093: CALL_OW 38
// SaveVariable ( not IsDead ( vsevolod ) , VsevSaved ) ;
9097: LD_EXP 70
9101: PPUSH
9102: CALL_OW 301
9106: NOT
9107: PPUSH
9108: LD_STRING VsevSaved
9110: PPUSH
9111: CALL_OW 39
// zustali := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , you ] , [ f_nation , nation_russian ] ] ) ;
9115: LD_ADDR_VAR 0 3
9119: PUSH
9120: LD_INT 21
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_EXP 1
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 23
9144: PUSH
9145: LD_INT 3
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 69
9161: ST_TO_ADDR
// SaveCharacters ( zustali diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , survivors2 ) ;
9162: LD_VAR 0 3
9166: PUSH
9167: LD_EXP 61
9171: PUSH
9172: LD_EXP 67
9176: PUSH
9177: LD_EXP 68
9181: PUSH
9182: LD_EXP 69
9186: PUSH
9187: LD_EXP 63
9191: PUSH
9192: LD_EXP 64
9196: PUSH
9197: LD_EXP 65
9201: PUSH
9202: LD_EXP 66
9206: PUSH
9207: LD_EXP 70
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: DIFF
9223: PPUSH
9224: LD_STRING survivors2
9226: PPUSH
9227: CALL_OW 38
// SaveCharacters ( sli_pryc diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , WithVsevolod ) ;
9231: LD_EXP 77
9235: PUSH
9236: LD_EXP 61
9240: PUSH
9241: LD_EXP 67
9245: PUSH
9246: LD_EXP 68
9250: PUSH
9251: LD_EXP 69
9255: PUSH
9256: LD_EXP 63
9260: PUSH
9261: LD_EXP 64
9265: PUSH
9266: LD_EXP 65
9270: PUSH
9271: LD_EXP 66
9275: PUSH
9276: LD_EXP 70
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: DIFF
9292: PPUSH
9293: LD_STRING WithVsevolod
9295: PPUSH
9296: CALL_OW 38
// convoy_06 := [ ] ;
9300: LD_ADDR_EXP 79
9304: PUSH
9305: EMPTY
9306: ST_TO_ADDR
// tmp_conv := FilterUnitsInArea ( ru_exit , [ [ f_occupied ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ^ FilterUnitsInArea ( ru_exit , [ [ f_not , [ f_occupied ] ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ;
9307: LD_ADDR_VAR 0 4
9311: PUSH
9312: LD_INT 21
9314: PPUSH
9315: LD_INT 59
9317: PUSH
9318: EMPTY
9319: LIST
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 2
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: LD_INT 22
9333: PUSH
9334: LD_EXP 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 70
9352: PUSH
9353: LD_INT 21
9355: PPUSH
9356: LD_INT 3
9358: PUSH
9359: LD_INT 59
9361: PUSH
9362: EMPTY
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 21
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 22
9381: PUSH
9382: LD_EXP 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: PPUSH
9396: CALL_OW 70
9400: ADD
9401: ST_TO_ADDR
// for i in tmp_conv do
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: LD_VAR 0 4
9411: PUSH
9412: FOR_IN
9413: IFFALSE 9552
// begin convoy_06 := convoy_06 ^ [ [ GetNation ( i ) , GetWeapon ( i ) , GetControl ( i ) , GetEngine ( i ) , GetChassis ( i ) , GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) , GetCargo ( i , mat_siberit ) ] ] ;
9415: LD_ADDR_EXP 79
9419: PUSH
9420: LD_EXP 79
9424: PUSH
9425: LD_VAR 0 2
9429: PPUSH
9430: CALL_OW 248
9434: PUSH
9435: LD_VAR 0 2
9439: PPUSH
9440: CALL_OW 264
9444: PUSH
9445: LD_VAR 0 2
9449: PPUSH
9450: CALL_OW 263
9454: PUSH
9455: LD_VAR 0 2
9459: PPUSH
9460: CALL_OW 262
9464: PUSH
9465: LD_VAR 0 2
9469: PPUSH
9470: CALL_OW 265
9474: PUSH
9475: LD_VAR 0 2
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: CALL_OW 289
9487: PUSH
9488: LD_VAR 0 2
9492: PPUSH
9493: LD_INT 2
9495: PPUSH
9496: CALL_OW 289
9500: PUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: LD_INT 3
9508: PPUSH
9509: CALL_OW 289
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: ADD
9527: ST_TO_ADDR
// if ( convoy_06 + 0 ) = ( zustali + 0 ) then
9528: LD_EXP 79
9532: PUSH
9533: LD_INT 0
9535: PLUS
9536: PUSH
9537: LD_VAR 0 3
9541: PUSH
9542: LD_INT 0
9544: PLUS
9545: EQUAL
9546: IFFALSE 9550
// break ;
9548: GO 9552
// end ;
9550: GO 9412
9552: POP
9553: POP
// SaveVariable ( convoy_06 , Convoy_06 ) ;
9554: LD_EXP 79
9558: PPUSH
9559: LD_STRING Convoy_06
9561: PPUSH
9562: CALL_OW 39
// end ;
9566: LD_VAR 0 1
9570: RET
// export accar1 , accar2 , acman1 , acman2 ; export function nakladaky ; begin
9571: LD_INT 0
9573: PPUSH
// InitUc ;
9574: CALL_OW 18
// InitHc ;
9578: CALL_OW 19
// InitVc ;
9582: CALL_OW 20
// uc_side := ai ;
9586: LD_ADDR_OWVAR 20
9590: PUSH
9591: LD_EXP 6
9595: ST_TO_ADDR
// uc_nation := nation_american ;
9596: LD_ADDR_OWVAR 21
9600: PUSH
9601: LD_INT 1
9603: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
9604: LD_ADDR_OWVAR 37
9608: PUSH
9609: LD_INT 3
9611: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
9612: LD_ADDR_OWVAR 40
9616: PUSH
9617: LD_INT 12
9619: ST_TO_ADDR
// vc_control := control_manual ;
9620: LD_ADDR_OWVAR 38
9624: PUSH
9625: LD_INT 1
9627: ST_TO_ADDR
// vc_engine := engine_solar ;
9628: LD_ADDR_OWVAR 39
9632: PUSH
9633: LD_INT 2
9635: ST_TO_ADDR
// uc_direction := 3 ;
9636: LD_ADDR_OWVAR 24
9640: PUSH
9641: LD_INT 3
9643: ST_TO_ADDR
// vc_fuel_battery := 80 ;
9644: LD_ADDR_OWVAR 41
9648: PUSH
9649: LD_INT 80
9651: ST_TO_ADDR
// accar1 := CreateVehicle ;
9652: LD_ADDR_EXP 80
9656: PUSH
9657: CALL_OW 45
9661: ST_TO_ADDR
// accar2 := CreateVehicle ;
9662: LD_ADDR_EXP 81
9666: PUSH
9667: CALL_OW 45
9671: ST_TO_ADDR
// PrepareSoldier ( sex_male , 2 ) ;
9672: LD_INT 1
9674: PPUSH
9675: LD_INT 2
9677: PPUSH
9678: CALL_OW 381
// acman1 := CreateHuman ;
9682: LD_ADDR_EXP 82
9686: PUSH
9687: CALL_OW 44
9691: ST_TO_ADDR
// acman2 := CreateHuman ;
9692: LD_ADDR_EXP 83
9696: PUSH
9697: CALL_OW 44
9701: ST_TO_ADDR
// PlaceHumanInUnit ( acman1 , accar1 ) ;
9702: LD_EXP 82
9706: PPUSH
9707: LD_EXP 80
9711: PPUSH
9712: CALL_OW 52
// PlaceHumanInUnit ( acman2 , accar2 ) ;
9716: LD_EXP 83
9720: PPUSH
9721: LD_EXP 81
9725: PPUSH
9726: CALL_OW 52
// SetCargo ( [ accar1 , accar2 ] , mat_cans , 100 ) ;
9730: LD_EXP 80
9734: PUSH
9735: LD_EXP 81
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: LD_INT 100
9749: PPUSH
9750: CALL_OW 290
// PlaceUnitArea ( accar1 , vsevolod_in , false ) ;
9754: LD_EXP 80
9758: PPUSH
9759: LD_INT 16
9761: PPUSH
9762: LD_INT 0
9764: PPUSH
9765: CALL_OW 49
// PlaceUnitArea ( accar2 , vsevolod_in , false ) ;
9769: LD_EXP 81
9773: PPUSH
9774: LD_INT 16
9776: PPUSH
9777: LD_INT 0
9779: PPUSH
9780: CALL_OW 49
// end ;
9784: LD_VAR 0 1
9788: RET
// export rccar1 , rccar2 , rccar3 , rcman1 , rcman2 , rcman3 ; export function convoy ; begin
9789: LD_INT 0
9791: PPUSH
// InitUc ;
9792: CALL_OW 18
// InitHc ;
9796: CALL_OW 19
// InitVc ;
9800: CALL_OW 20
// uc_side := you ;
9804: LD_ADDR_OWVAR 20
9808: PUSH
9809: LD_EXP 1
9813: ST_TO_ADDR
// uc_nation := nation_russian ;
9814: LD_ADDR_OWVAR 21
9818: PUSH
9819: LD_INT 3
9821: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
9822: LD_ADDR_OWVAR 37
9826: PUSH
9827: LD_INT 22
9829: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
9830: LD_ADDR_OWVAR 40
9834: PUSH
9835: LD_INT 51
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// vc_engine := engine_combustion ;
9846: LD_ADDR_OWVAR 39
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// uc_direction := 3 ;
9854: LD_ADDR_OWVAR 24
9858: PUSH
9859: LD_INT 3
9861: ST_TO_ADDR
// vc_fuel_battery := 60 ;
9862: LD_ADDR_OWVAR 41
9866: PUSH
9867: LD_INT 60
9869: ST_TO_ADDR
// rccar1 := CreateVehicle ;
9870: LD_ADDR_EXP 84
9874: PUSH
9875: CALL_OW 45
9879: ST_TO_ADDR
// rccar2 := CreateVehicle ;
9880: LD_ADDR_EXP 85
9884: PUSH
9885: CALL_OW 45
9889: ST_TO_ADDR
// rccar2 := CreateVehicle ;
9890: LD_ADDR_EXP 85
9894: PUSH
9895: CALL_OW 45
9899: ST_TO_ADDR
// PrepareSoldier ( sex_male , 3 ) ;
9900: LD_INT 1
9902: PPUSH
9903: LD_INT 3
9905: PPUSH
9906: CALL_OW 381
// rcman1 := CreateHuman ;
9910: LD_ADDR_EXP 87
9914: PUSH
9915: CALL_OW 44
9919: ST_TO_ADDR
// rcman2 := CreateHuman ;
9920: LD_ADDR_EXP 88
9924: PUSH
9925: CALL_OW 44
9929: ST_TO_ADDR
// rcman2 := CreateHuman ;
9930: LD_ADDR_EXP 88
9934: PUSH
9935: CALL_OW 44
9939: ST_TO_ADDR
// PlaceHumanInUnit ( rcman1 , rccar1 ) ;
9940: LD_EXP 87
9944: PPUSH
9945: LD_EXP 84
9949: PPUSH
9950: CALL_OW 52
// PlaceHumanInUnit ( rcman2 , rccar2 ) ;
9954: LD_EXP 88
9958: PPUSH
9959: LD_EXP 85
9963: PPUSH
9964: CALL_OW 52
// PlaceHumanInUnit ( rcman3 , rccar3 ) ;
9968: LD_EXP 89
9972: PPUSH
9973: LD_EXP 86
9977: PPUSH
9978: CALL_OW 52
// SetCargo ( [ rccar1 , rccar2 , rccar3 ] , mat_cans , 90 ) ;
9982: LD_EXP 84
9986: PUSH
9987: LD_EXP 85
9991: PUSH
9992: LD_EXP 86
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: LD_INT 1
10004: PPUSH
10005: LD_INT 90
10007: PPUSH
10008: CALL_OW 290
// PlaceUnitArea ( rccar1 , exit_a , false ) ;
10012: LD_EXP 84
10016: PPUSH
10017: LD_INT 20
10019: PPUSH
10020: LD_INT 0
10022: PPUSH
10023: CALL_OW 49
// PlaceUnitArea ( rccar2 , exit_a , false ) ;
10027: LD_EXP 85
10031: PPUSH
10032: LD_INT 20
10034: PPUSH
10035: LD_INT 0
10037: PPUSH
10038: CALL_OW 49
// PlaceUnitArea ( rccar3 , exit_a , false ) ;
10042: LD_EXP 86
10046: PPUSH
10047: LD_INT 20
10049: PPUSH
10050: LD_INT 0
10052: PPUSH
10053: CALL_OW 49
// end ; end_of_file
10057: LD_VAR 0 1
10061: RET
// export function get_x_best ( lidi , num , skill , mclass , idle ) ; var i , skills ; begin
10062: LD_INT 0
10064: PPUSH
10065: PPUSH
10066: PPUSH
// if mclass then
10067: LD_VAR 0 4
10071: IFFALSE 10103
// lidi := UnitFilter ( lidi , [ [ f_class , mclass ] ] ) ;
10073: LD_ADDR_VAR 0 1
10077: PUSH
10078: LD_VAR 0 1
10082: PPUSH
10083: LD_INT 25
10085: PUSH
10086: LD_VAR 0 4
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: PPUSH
10098: CALL_OW 72
10102: ST_TO_ADDR
// skills := [ ] ;
10103: LD_ADDR_VAR 0 8
10107: PUSH
10108: EMPTY
10109: ST_TO_ADDR
// for i in lidi do
10110: LD_ADDR_VAR 0 7
10114: PUSH
10115: LD_VAR 0 1
10119: PUSH
10120: FOR_IN
10121: IFFALSE 10154
// skills := skills ^ [ GetSkill ( i , skill ) ] ;
10123: LD_ADDR_VAR 0 8
10127: PUSH
10128: LD_VAR 0 8
10132: PUSH
10133: LD_VAR 0 7
10137: PPUSH
10138: LD_VAR 0 3
10142: PPUSH
10143: CALL_OW 259
10147: PUSH
10148: EMPTY
10149: LIST
10150: ADD
10151: ST_TO_ADDR
10152: GO 10120
10154: POP
10155: POP
// lidi := SortListByListDesc ( lidi , skills ) ;
10156: LD_ADDR_VAR 0 1
10160: PUSH
10161: LD_VAR 0 1
10165: PPUSH
10166: LD_VAR 0 8
10170: PPUSH
10171: CALL_OW 77
10175: ST_TO_ADDR
// if num > lidi then
10176: LD_VAR 0 2
10180: PUSH
10181: LD_VAR 0 1
10185: GREATER
10186: IFFALSE 10202
// num := lidi + 0 ;
10188: LD_ADDR_VAR 0 2
10192: PUSH
10193: LD_VAR 0 1
10197: PUSH
10198: LD_INT 0
10200: PLUS
10201: ST_TO_ADDR
// i := 1 ;
10202: LD_ADDR_VAR 0 7
10206: PUSH
10207: LD_INT 1
10209: ST_TO_ADDR
// result := [ ] ;
10210: LD_ADDR_VAR 0 6
10214: PUSH
10215: EMPTY
10216: ST_TO_ADDR
// while i <= lidi and result < num do
10217: LD_VAR 0 7
10221: PUSH
10222: LD_VAR 0 1
10226: LESSEQUAL
10227: PUSH
10228: LD_VAR 0 6
10232: PUSH
10233: LD_VAR 0 2
10237: LESS
10238: AND
10239: IFFALSE 10332
// begin if idle then
10241: LD_VAR 0 5
10245: IFFALSE 10291
// begin if IsIdle ( lidi [ i ] ) then
10247: LD_VAR 0 1
10251: PUSH
10252: LD_VAR 0 7
10256: ARRAY
10257: PPUSH
10258: CALL_OW 316
10262: IFFALSE 10289
// result := result ^ [ lidi [ i ] ] ;
10264: LD_ADDR_VAR 0 6
10268: PUSH
10269: LD_VAR 0 6
10273: PUSH
10274: LD_VAR 0 1
10278: PUSH
10279: LD_VAR 0 7
10283: ARRAY
10284: PUSH
10285: EMPTY
10286: LIST
10287: ADD
10288: ST_TO_ADDR
// end else
10289: GO 10316
// result := result ^ [ lidi [ i ] ] ;
10291: LD_ADDR_VAR 0 6
10295: PUSH
10296: LD_VAR 0 6
10300: PUSH
10301: LD_VAR 0 1
10305: PUSH
10306: LD_VAR 0 7
10310: ARRAY
10311: PUSH
10312: EMPTY
10313: LIST
10314: ADD
10315: ST_TO_ADDR
// i := i + 1 ;
10316: LD_ADDR_VAR 0 7
10320: PUSH
10321: LD_VAR 0 7
10325: PUSH
10326: LD_INT 1
10328: PLUS
10329: ST_TO_ADDR
// end ;
10330: GO 10217
// end ;
10332: LD_VAR 0 6
10336: RET
// export function SayAny ( lidi , ident , side , sex , Hclass , index ) ; var kdo ; begin
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
// kdo := WhoSayAny ( lidi , side , sex , Hclass , index ) ;
10341: LD_ADDR_VAR 0 8
10345: PUSH
10346: LD_VAR 0 1
10350: PPUSH
10351: LD_VAR 0 3
10355: PPUSH
10356: LD_VAR 0 4
10360: PPUSH
10361: LD_VAR 0 5
10365: PPUSH
10366: LD_VAR 0 6
10370: PPUSH
10371: CALL 10417 0 5
10375: ST_TO_ADDR
// if kdo then
10376: LD_VAR 0 8
10380: IFFALSE 10404
// result := Say ( kdo , ident ) else
10382: LD_ADDR_VAR 0 7
10386: PUSH
10387: LD_VAR 0 8
10391: PPUSH
10392: LD_VAR 0 2
10396: PPUSH
10397: CALL_OW 88
10401: ST_TO_ADDR
10402: GO 10412
// result := false ;
10404: LD_ADDR_VAR 0 7
10408: PUSH
10409: LD_INT 0
10411: ST_TO_ADDR
// end ;
10412: LD_VAR 0 7
10416: RET
// export function WhoSayAny ( lidi , side , sex , Hclass , index ) ; begin
10417: LD_INT 0
10419: PPUSH
// lidi := UnitFilter ( lidi , [ [ f_type , unit_human ] , [ f_side , side ] , f_not , [ f_nation , nation_nature ] ] ) ;
10420: LD_ADDR_VAR 0 1
10424: PUSH
10425: LD_VAR 0 1
10429: PPUSH
10430: LD_INT 21
10432: PUSH
10433: LD_INT 1
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 22
10442: PUSH
10443: LD_VAR 0 2
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 3
10454: PUSH
10455: LD_INT 23
10457: PUSH
10458: LD_INT 0
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 72
10475: ST_TO_ADDR
// if sex <> 0 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 0
10483: NONEQUAL
10484: IFFALSE 10513
// lidi := UnitFilter ( lidi , [ f_sex , sex ] ) ;
10486: LD_ADDR_VAR 0 1
10490: PUSH
10491: LD_VAR 0 1
10495: PPUSH
10496: LD_INT 26
10498: PUSH
10499: LD_VAR 0 3
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 72
10512: ST_TO_ADDR
// if Hclass <> 0 then
10513: LD_VAR 0 4
10517: PUSH
10518: LD_INT 0
10520: NONEQUAL
10521: IFFALSE 10550
// lidi := UnitFilter ( lidi , [ f_class , Hclass ] ) ;
10523: LD_ADDR_VAR 0 1
10527: PUSH
10528: LD_VAR 0 1
10532: PPUSH
10533: LD_INT 25
10535: PUSH
10536: LD_VAR 0 4
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 72
10549: ST_TO_ADDR
// if index <= 0 then
10550: LD_VAR 0 5
10554: PUSH
10555: LD_INT 0
10557: LESSEQUAL
10558: IFFALSE 10568
// index := 1 ;
10560: LD_ADDR_VAR 0 5
10564: PUSH
10565: LD_INT 1
10567: ST_TO_ADDR
// if lidi >= index then
10568: LD_VAR 0 1
10572: PUSH
10573: LD_VAR 0 5
10577: GREATEREQUAL
10578: IFFALSE 10598
// result := lidi [ index ] else
10580: LD_ADDR_VAR 0 6
10584: PUSH
10585: LD_VAR 0 1
10589: PUSH
10590: LD_VAR 0 5
10594: ARRAY
10595: ST_TO_ADDR
10596: GO 10606
// result := 0 ;
10598: LD_ADDR_VAR 0 6
10602: PUSH
10603: LD_INT 0
10605: ST_TO_ADDR
// end ;
10606: LD_VAR 0 6
10610: RET
// export function see_any ( strana , sez ) ; var i ; begin
10611: LD_INT 0
10613: PPUSH
10614: PPUSH
// result := [ ] ;
10615: LD_ADDR_VAR 0 3
10619: PUSH
10620: EMPTY
10621: ST_TO_ADDR
// for i in sez do
10622: LD_ADDR_VAR 0 4
10626: PUSH
10627: LD_VAR 0 2
10631: PUSH
10632: FOR_IN
10633: IFFALSE 10669
// if See ( strana , i ) then
10635: LD_VAR 0 1
10639: PPUSH
10640: LD_VAR 0 4
10644: PPUSH
10645: CALL_OW 292
10649: IFFALSE 10667
// begin result := result ^ i ;
10651: LD_ADDR_VAR 0 3
10655: PUSH
10656: LD_VAR 0 3
10660: PUSH
10661: LD_VAR 0 4
10665: ADD
10666: ST_TO_ADDR
// end ;
10667: GO 10632
10669: POP
10670: POP
// ; end ;
10671: LD_VAR 0 3
10675: RET
// export function TalkOn ; begin
10676: LD_INT 0
10678: PPUSH
// stop_talking := true ;
10679: LD_ADDR_OWVAR 56
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// end ;
10687: LD_VAR 0 1
10691: RET
// export function TalkOff ; begin
10692: LD_INT 0
10694: PPUSH
// stop_talking := false ;
10695: LD_ADDR_OWVAR 56
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
// end ;
10703: LD_VAR 0 1
10707: RET
// export function FilterHumansInArea ( area , filter ) ; var inbase , i ; begin
10708: LD_INT 0
10710: PPUSH
10711: PPUSH
10712: PPUSH
// result := [ ] ;
10713: LD_ADDR_VAR 0 3
10717: PUSH
10718: EMPTY
10719: ST_TO_ADDR
// inbase := FilterUnitsInArea ( area , [ ] ) ;
10720: LD_ADDR_VAR 0 4
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: EMPTY
10731: PPUSH
10732: CALL_OW 70
10736: ST_TO_ADDR
// for i in inbase do
10737: LD_ADDR_VAR 0 5
10741: PUSH
10742: LD_VAR 0 4
10746: PUSH
10747: FOR_IN
10748: IFFALSE 10824
// begin if GetType ( i ) = unit_building or GetType ( i ) = unit_vehicle then
10750: LD_VAR 0 5
10754: PPUSH
10755: CALL_OW 247
10759: PUSH
10760: LD_INT 3
10762: EQUAL
10763: PUSH
10764: LD_VAR 0 5
10768: PPUSH
10769: CALL_OW 247
10773: PUSH
10774: LD_INT 2
10776: EQUAL
10777: OR
10778: IFFALSE 10803
// begin result := result ^ UnitsInside ( i ) ;
10780: LD_ADDR_VAR 0 3
10784: PUSH
10785: LD_VAR 0 3
10789: PUSH
10790: LD_VAR 0 5
10794: PPUSH
10795: CALL_OW 313
10799: ADD
10800: ST_TO_ADDR
// end else
10801: GO 10822
// begin result := result ^ [ i ] ;
10803: LD_ADDR_VAR 0 3
10807: PUSH
10808: LD_VAR 0 3
10812: PUSH
10813: LD_VAR 0 5
10817: PUSH
10818: EMPTY
10819: LIST
10820: ADD
10821: ST_TO_ADDR
// end ; end ;
10822: GO 10747
10824: POP
10825: POP
// result := UnitFilter ( result , filter ) ;
10826: LD_ADDR_VAR 0 3
10830: PUSH
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_VAR 0 2
10840: PPUSH
10841: CALL_OW 72
10845: ST_TO_ADDR
// end ;
10846: LD_VAR 0 3
10850: RET
// export function inside_units ( uns ) ; var i ; begin
10851: LD_INT 0
10853: PPUSH
10854: PPUSH
// result := [ ] ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: EMPTY
10861: ST_TO_ADDR
// for i in uns do
10862: LD_ADDR_VAR 0 3
10866: PUSH
10867: LD_VAR 0 1
10871: PUSH
10872: FOR_IN
10873: IFFALSE 10898
// result := result ^ UnitsInside ( i ) ;
10875: LD_ADDR_VAR 0 2
10879: PUSH
10880: LD_VAR 0 2
10884: PUSH
10885: LD_VAR 0 3
10889: PPUSH
10890: CALL_OW 313
10894: ADD
10895: ST_TO_ADDR
10896: GO 10872
10898: POP
10899: POP
// end ;
10900: LD_VAR 0 2
10904: RET
// export function find_drivers ( cars , drivers , take_out ) ; var empty , free , i , konec ; begin
10905: LD_INT 0
10907: PPUSH
10908: PPUSH
10909: PPUSH
10910: PPUSH
10911: PPUSH
// cars := UnitFilter ( cars , [ f_alive ] ) union [ ] ;
10912: LD_ADDR_VAR 0 1
10916: PUSH
10917: LD_VAR 0 1
10921: PPUSH
10922: LD_INT 51
10924: PUSH
10925: EMPTY
10926: LIST
10927: PPUSH
10928: CALL_OW 72
10932: PUSH
10933: EMPTY
10934: UNION
10935: ST_TO_ADDR
// drivers := UnitFilter ( drivers , [ f_alive ] ) union [ ] ;
10936: LD_ADDR_VAR 0 2
10940: PUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: LD_INT 51
10948: PUSH
10949: EMPTY
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: PUSH
10957: EMPTY
10958: UNION
10959: ST_TO_ADDR
// for i in cars do
10960: LD_ADDR_VAR 0 7
10964: PUSH
10965: LD_VAR 0 1
10969: PUSH
10970: FOR_IN
10971: IFFALSE 11007
// if not IsDrivenBy ( i ) then
10973: LD_VAR 0 7
10977: PPUSH
10978: CALL_OW 311
10982: NOT
10983: IFFALSE 11005
// empty := add ( empty , i ) ;
10985: LD_ADDR_VAR 0 5
10989: PUSH
10990: LD_VAR 0 5
10994: PPUSH
10995: LD_VAR 0 7
10999: PPUSH
11000: CALL 11599 0 2
11004: ST_TO_ADDR
11005: GO 10970
11007: POP
11008: POP
// if take_out then
11009: LD_VAR 0 3
11013: IFFALSE 11072
// begin for i in drivers do
11015: LD_ADDR_VAR 0 7
11019: PUSH
11020: LD_VAR 0 2
11024: PUSH
11025: FOR_IN
11026: IFFALSE 11068
// if not ( IsInUnit ( i ) in cars ) then
11028: LD_VAR 0 7
11032: PPUSH
11033: CALL_OW 310
11037: PUSH
11038: LD_VAR 0 1
11042: IN
11043: NOT
11044: IFFALSE 11066
// free := add ( free , i ) ;
11046: LD_ADDR_VAR 0 6
11050: PUSH
11051: LD_VAR 0 6
11055: PPUSH
11056: LD_VAR 0 7
11060: PPUSH
11061: CALL 11599 0 2
11065: ST_TO_ADDR
11066: GO 11025
11068: POP
11069: POP
// end else
11070: GO 11121
// begin for i in drivers do
11072: LD_ADDR_VAR 0 7
11076: PUSH
11077: LD_VAR 0 2
11081: PUSH
11082: FOR_IN
11083: IFFALSE 11119
// if not IsInUnit ( i ) then
11085: LD_VAR 0 7
11089: PPUSH
11090: CALL_OW 310
11094: NOT
11095: IFFALSE 11117
// free := add ( free , i ) ;
11097: LD_ADDR_VAR 0 6
11101: PUSH
11102: LD_VAR 0 6
11106: PPUSH
11107: LD_VAR 0 7
11111: PPUSH
11112: CALL 11599 0 2
11116: ST_TO_ADDR
11117: GO 11082
11119: POP
11120: POP
// end ; result := cars diff empty ;
11121: LD_ADDR_VAR 0 4
11125: PUSH
11126: LD_VAR 0 1
11130: PUSH
11131: LD_VAR 0 5
11135: DIFF
11136: ST_TO_ADDR
// if empty <= free then
11137: LD_VAR 0 5
11141: PUSH
11142: LD_VAR 0 6
11146: LESSEQUAL
11147: IFFALSE 11161
// konec := empty else
11149: LD_ADDR_VAR 0 8
11153: PUSH
11154: LD_VAR 0 5
11158: ST_TO_ADDR
11159: GO 11171
// konec := free ;
11161: LD_ADDR_VAR 0 8
11165: PUSH
11166: LD_VAR 0 6
11170: ST_TO_ADDR
// for i := 1 to konec do
11171: LD_ADDR_VAR 0 7
11175: PUSH
11176: DOUBLE
11177: LD_INT 1
11179: DEC
11180: ST_TO_ADDR
11181: LD_VAR 0 8
11185: PUSH
11186: FOR_TO
11187: IFFALSE 11243
// begin ComEnterUnit ( free [ i ] , empty [ i ] ) ;
11189: LD_VAR 0 6
11193: PUSH
11194: LD_VAR 0 7
11198: ARRAY
11199: PPUSH
11200: LD_VAR 0 5
11204: PUSH
11205: LD_VAR 0 7
11209: ARRAY
11210: PPUSH
11211: CALL_OW 120
// result := add ( result , empty [ i ] ) ;
11215: LD_ADDR_VAR 0 4
11219: PUSH
11220: LD_VAR 0 4
11224: PPUSH
11225: LD_VAR 0 5
11229: PUSH
11230: LD_VAR 0 7
11234: ARRAY
11235: PPUSH
11236: CALL 11599 0 2
11240: ST_TO_ADDR
// end ;
11241: GO 11186
11243: POP
11244: POP
// end ;
11245: LD_VAR 0 4
11249: RET
// export function find_remotes ( cars , mechs , remotes ) ; var cas , i ; begin
11250: LD_INT 0
11252: PPUSH
11253: PPUSH
11254: PPUSH
// while remotes > mechs do
11255: LD_VAR 0 3
11259: PUSH
11260: LD_VAR 0 2
11264: GREATER
11265: IFFALSE 11281
// delete ( remotes , 1 ) ;
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 1
11274: PPUSH
11275: CALL_OW 3
11279: GO 11255
// for i := 1 to remotes do
11281: LD_ADDR_VAR 0 6
11285: PUSH
11286: DOUBLE
11287: LD_INT 1
11289: DEC
11290: ST_TO_ADDR
11291: LD_VAR 0 3
11295: PUSH
11296: FOR_TO
11297: IFFALSE 11327
// ComEnterUnit ( mechs [ i ] , remotes [ i ] ) ;
11299: LD_VAR 0 2
11303: PUSH
11304: LD_VAR 0 6
11308: ARRAY
11309: PPUSH
11310: LD_VAR 0 3
11314: PUSH
11315: LD_VAR 0 6
11319: ARRAY
11320: PPUSH
11321: CALL_OW 120
11325: GO 11296
11327: POP
11328: POP
// end ;
11329: LD_VAR 0 4
11333: RET
// export function wait_for_remotes ( cars , remotes , cas ) ; var c , unlinked , i ; begin
11334: LD_INT 0
11336: PPUSH
11337: PPUSH
11338: PPUSH
11339: PPUSH
// c := tick + cas ;
11340: LD_ADDR_VAR 0 5
11344: PUSH
11345: LD_OWVAR 1
11349: PUSH
11350: LD_VAR 0 3
11354: PLUS
11355: ST_TO_ADDR
// while tick < c and ( not ( inside_units ( remotes ) + 0 ) = remotes ) do
11356: LD_OWVAR 1
11360: PUSH
11361: LD_VAR 0 5
11365: LESS
11366: PUSH
11367: LD_VAR 0 2
11371: PPUSH
11372: CALL 10851 0 1
11376: PUSH
11377: LD_INT 0
11379: PLUS
11380: PUSH
11381: LD_VAR 0 2
11385: EQUAL
11386: NOT
11387: AND
11388: IFFALSE 11399
// wait ( 0 0$1 ) ;
11390: LD_INT 35
11392: PPUSH
11393: CALL_OW 67
11397: GO 11356
// unlinked := cars ;
11399: LD_ADDR_VAR 0 6
11403: PUSH
11404: LD_VAR 0 1
11408: ST_TO_ADDR
// for i in remotes do
11409: LD_ADDR_VAR 0 7
11413: PUSH
11414: LD_VAR 0 2
11418: PUSH
11419: FOR_IN
11420: IFFALSE 11469
// begin ComLinkTo ( unlinked , UnitsInside ( i ) ) ;
11422: LD_VAR 0 6
11426: PPUSH
11427: LD_VAR 0 7
11431: PPUSH
11432: CALL_OW 313
11436: PPUSH
11437: CALL_OW 135
// unlinked := unlinked diff UnitsLinked ( UnitsInside ( i ) ) ;
11441: LD_ADDR_VAR 0 6
11445: PUSH
11446: LD_VAR 0 6
11450: PUSH
11451: LD_VAR 0 7
11455: PPUSH
11456: CALL_OW 313
11460: PPUSH
11461: CALL_OW 432
11465: DIFF
11466: ST_TO_ADDR
// end ;
11467: GO 11419
11469: POP
11470: POP
// end ;
11471: LD_VAR 0 4
11475: RET
// export function wait_for_drivers ( cars , cas ) ; var i , vsichni_ready , k , pockat ; begin
11476: LD_INT 0
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
// k := 0 ;
11483: LD_ADDR_VAR 0 6
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// pockat := tick + cas ;
11491: LD_ADDR_VAR 0 7
11495: PUSH
11496: LD_OWVAR 1
11500: PUSH
11501: LD_VAR 0 2
11505: PLUS
11506: ST_TO_ADDR
// while not vsichni_ready and tick < pockat do
11507: LD_VAR 0 5
11511: NOT
11512: PUSH
11513: LD_OWVAR 1
11517: PUSH
11518: LD_VAR 0 7
11522: LESS
11523: AND
11524: IFFALSE 11594
// begin vsichni_ready := true ;
11526: LD_ADDR_VAR 0 5
11530: PUSH
11531: LD_INT 1
11533: ST_TO_ADDR
// k := k + 1 ;
11534: LD_ADDR_VAR 0 6
11538: PUSH
11539: LD_VAR 0 6
11543: PUSH
11544: LD_INT 1
11546: PLUS
11547: ST_TO_ADDR
// for i in cars do
11548: LD_ADDR_VAR 0 4
11552: PUSH
11553: LD_VAR 0 1
11557: PUSH
11558: FOR_IN
11559: IFFALSE 11583
// if not IsDrivenBy ( i ) then
11561: LD_VAR 0 4
11565: PPUSH
11566: CALL_OW 311
11570: NOT
11571: IFFALSE 11581
// vsichni_ready := false ;
11573: LD_ADDR_VAR 0 5
11577: PUSH
11578: LD_INT 0
11580: ST_TO_ADDR
11581: GO 11558
11583: POP
11584: POP
// wait ( 0 0$1.0 ) ;
11585: LD_INT 35
11587: PPUSH
11588: CALL_OW 67
// end ;
11592: GO 11507
// end ;
11594: LD_VAR 0 3
11598: RET
// export function add ( list , list1 ) ; begin
11599: LD_INT 0
11601: PPUSH
// if list = 0 then
11602: LD_VAR 0 1
11606: PUSH
11607: LD_INT 0
11609: EQUAL
11610: IFFALSE 11619
// list := [ ] ;
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: EMPTY
11618: ST_TO_ADDR
// if list1 = 0 then
11619: LD_VAR 0 2
11623: PUSH
11624: LD_INT 0
11626: EQUAL
11627: IFFALSE 11636
// list1 := [ ] ;
11629: LD_ADDR_VAR 0 2
11633: PUSH
11634: EMPTY
11635: ST_TO_ADDR
// result := list ^ list1 ;
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_VAR 0 1
11645: PUSH
11646: LD_VAR 0 2
11650: ADD
11651: ST_TO_ADDR
// end ;
11652: LD_VAR 0 3
11656: RET
// export function take_x ( list , x ) ; var i , r ; begin
11657: LD_INT 0
11659: PPUSH
11660: PPUSH
11661: PPUSH
// r := [ ] ;
11662: LD_ADDR_VAR 0 5
11666: PUSH
11667: EMPTY
11668: ST_TO_ADDR
// for i := 1 to x do
11669: LD_ADDR_VAR 0 4
11673: PUSH
11674: DOUBLE
11675: LD_INT 1
11677: DEC
11678: ST_TO_ADDR
11679: LD_VAR 0 2
11683: PUSH
11684: FOR_TO
11685: IFFALSE 11714
// r := r ^ [ list [ i ] ] ;
11687: LD_ADDR_VAR 0 5
11691: PUSH
11692: LD_VAR 0 5
11696: PUSH
11697: LD_VAR 0 1
11701: PUSH
11702: LD_VAR 0 4
11706: ARRAY
11707: PUSH
11708: EMPTY
11709: LIST
11710: ADD
11711: ST_TO_ADDR
11712: GO 11684
11714: POP
11715: POP
// result := r ;
11716: LD_ADDR_VAR 0 3
11720: PUSH
11721: LD_VAR 0 5
11725: ST_TO_ADDR
// end ;
11726: LD_VAR 0 3
11730: RET
// export hinty_co_byli ; export function MyHint ( ident ) ; begin
11731: LD_INT 0
11733: PPUSH
// if not hinty_co_byli then
11734: LD_EXP 90
11738: NOT
11739: IFFALSE 11748
// hinty_co_byli := [ ] ;
11741: LD_ADDR_EXP 90
11745: PUSH
11746: EMPTY
11747: ST_TO_ADDR
// if not ( ident in hinty_co_byli ) then
11748: LD_VAR 0 1
11752: PUSH
11753: LD_EXP 90
11757: IN
11758: NOT
11759: IFFALSE 11786
// begin hinty_co_byli := hinty_co_byli ^ ident ;
11761: LD_ADDR_EXP 90
11765: PUSH
11766: LD_EXP 90
11770: PUSH
11771: LD_VAR 0 1
11775: ADD
11776: ST_TO_ADDR
// Hint ( ident ) ;
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 339
// end ; end ;
11786: LD_VAR 0 2
11790: RET
// export function BlockMarchNorth ; var i , x , y ; begin
11791: LD_INT 0
11793: PPUSH
11794: PPUSH
11795: PPUSH
11796: PPUSH
// for i in FilterUnitsInArea ( block_march , [ f_side , you ] ) do
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: LD_INT 30
11804: PPUSH
11805: LD_INT 22
11807: PUSH
11808: LD_EXP 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 70
11821: PUSH
11822: FOR_IN
11823: IFFALSE 11884
// begin x = GetX ( i ) ;
11825: LD_ADDR_VAR 0 3
11829: PUSH
11830: LD_VAR 0 2
11834: PPUSH
11835: CALL_OW 250
11839: ST_TO_ADDR
// y = GetY ( i ) ;
11840: LD_ADDR_VAR 0 4
11844: PUSH
11845: LD_VAR 0 2
11849: PPUSH
11850: CALL_OW 251
11854: ST_TO_ADDR
// ComMoveXY ( i , x + 3 , y + 5 ) ;
11855: LD_VAR 0 2
11859: PPUSH
11860: LD_VAR 0 3
11864: PUSH
11865: LD_INT 3
11867: PLUS
11868: PPUSH
11869: LD_VAR 0 4
11873: PUSH
11874: LD_INT 5
11876: PLUS
11877: PPUSH
11878: CALL_OW 111
// end ;
11882: GO 11822
11884: POP
11885: POP
// end ;
11886: LD_VAR 0 1
11890: RET
// export function DepotWithSiberite ; var i , your_depots ; begin
11891: LD_INT 0
11893: PPUSH
11894: PPUSH
11895: PPUSH
// your_depots = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11896: LD_ADDR_VAR 0 3
11900: PUSH
11901: LD_INT 22
11903: PUSH
11904: LD_EXP 1
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 2
11915: PUSH
11916: LD_INT 30
11918: PUSH
11919: LD_INT 0
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 30
11928: PUSH
11929: LD_INT 1
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 69
11949: ST_TO_ADDR
// for i in your_depots do
11950: LD_ADDR_VAR 0 2
11954: PUSH
11955: LD_VAR 0 3
11959: PUSH
11960: FOR_IN
11961: IFFALSE 11996
// begin if GetResourceType ( GetBase ( i ) , mat_siberit ) > 0 then
11963: LD_VAR 0 2
11967: PPUSH
11968: CALL_OW 274
11972: PPUSH
11973: LD_INT 3
11975: PPUSH
11976: CALL_OW 275
11980: PUSH
11981: LD_INT 0
11983: GREATER
11984: IFFALSE 11994
// begin result = true ;
11986: LD_ADDR_VAR 0 1
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// end ; end ;
11994: GO 11960
11996: POP
11997: POP
// end ;
11998: LD_VAR 0 1
12002: RET
// export function AttackVehicles ( side , vehicles ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
12003: LD_INT 0
12005: PPUSH
12006: PPUSH
12007: PPUSH
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
// if vehicles > 0 then
12012: LD_VAR 0 2
12016: PUSH
12017: LD_INT 0
12019: GREATER
12020: IFFALSE 12256
// repeat wait ( 0 0$1 ) ;
12022: LD_INT 35
12024: PPUSH
12025: CALL_OW 67
// vehiclesOK = UnitFilter ( vehicles , [ f_lives , 600 ] ) ;
12029: LD_ADDR_VAR 0 6
12033: PUSH
12034: LD_VAR 0 2
12038: PPUSH
12039: LD_INT 24
12041: PUSH
12042: LD_INT 600
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 72
12053: ST_TO_ADDR
// for j in vehiclesOK do
12054: LD_ADDR_VAR 0 5
12058: PUSH
12059: LD_VAR 0 6
12063: PUSH
12064: FOR_IN
12065: IFFALSE 12244
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , side ] ] ) , j ) ;
12067: LD_ADDR_VAR 0 7
12071: PUSH
12072: LD_INT 22
12074: PUSH
12075: LD_VAR 0 1
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: PPUSH
12087: CALL_OW 69
12091: PPUSH
12092: LD_VAR 0 5
12096: PPUSH
12097: CALL_OW 74
12101: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
12102: LD_ADDR_VAR 0 8
12106: PUSH
12107: LD_INT 22
12109: PUSH
12110: LD_VAR 0 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 2
12121: PUSH
12122: LD_INT 59
12124: PUSH
12125: EMPTY
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 1
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 21
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: PPUSH
12161: CALL_OW 69
12165: PPUSH
12166: LD_VAR 0 5
12170: PPUSH
12171: CALL_OW 74
12175: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12176: LD_VAR 0 5
12180: PPUSH
12181: LD_VAR 0 7
12185: PPUSH
12186: CALL_OW 296
12190: PUSH
12191: LD_INT 8
12193: PLUS
12194: PUSH
12195: LD_VAR 0 5
12199: PPUSH
12200: LD_VAR 0 8
12204: PPUSH
12205: CALL_OW 296
12209: LESS
12210: IFFALSE 12228
// ComAttackUnit ( j , target1 ) else
12212: LD_VAR 0 5
12216: PPUSH
12217: LD_VAR 0 7
12221: PPUSH
12222: CALL_OW 115
12226: GO 12242
// ComAttackUnit ( j , target2 ) ;
12228: LD_VAR 0 5
12232: PPUSH
12233: LD_VAR 0 8
12237: PPUSH
12238: CALL_OW 115
// end ;
12242: GO 12064
12244: POP
12245: POP
// until vehiclesOK = 0 ;
12246: LD_VAR 0 6
12250: PUSH
12251: LD_INT 0
12253: EQUAL
12254: IFFALSE 12022
// end ; end_of_file
12256: LD_VAR 0 3
12260: RET
// every 0 0$55 trigger vsevolod_vstoupil and not VsevolodSaved do var tmp ;
12261: LD_EXP 11
12265: PUSH
12266: LD_EXP 56
12270: NOT
12271: AND
12272: IFFALSE 12484
12274: GO 12276
12276: DISABLE
12277: LD_INT 0
12279: PPUSH
// begin while tmp <= 2 do
12280: LD_VAR 0 1
12284: PUSH
12285: LD_INT 2
12287: LESSEQUAL
12288: IFFALSE 12351
// begin tmp := UnitFilter ( attack , [ [ f_inarea , top_attack ] , [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
12290: LD_ADDR_VAR 0 1
12294: PUSH
12295: LD_EXP 138
12299: PPUSH
12300: LD_INT 95
12302: PUSH
12303: LD_INT 23
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_EXP 6
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 33
12324: PUSH
12325: LD_INT 2
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL_OW 72
12341: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12342: LD_INT 35
12344: PPUSH
12345: CALL_OW 67
// end ;
12349: GO 12280
// if tmp > 1 then
12351: LD_VAR 0 1
12355: PUSH
12356: LD_INT 1
12358: GREATER
12359: IFFALSE 12413
// if difficulty > 1 then
12361: LD_OWVAR 67
12365: PUSH
12366: LD_INT 1
12368: GREATER
12369: IFFALSE 12397
// zbytek := tmp [ 1 ] ^ tmp [ 2 ] else
12371: LD_ADDR_EXP 91
12375: PUSH
12376: LD_VAR 0 1
12380: PUSH
12381: LD_INT 1
12383: ARRAY
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: LD_INT 2
12392: ARRAY
12393: ADD
12394: ST_TO_ADDR
12395: GO 12411
// zbytek := tmp [ 1 ] else
12397: LD_ADDR_EXP 91
12401: PUSH
12402: LD_VAR 0 1
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: ST_TO_ADDR
12411: GO 12423
// zbytek := tmp ;
12413: LD_ADDR_EXP 91
12417: PUSH
12418: LD_VAR 0 1
12422: ST_TO_ADDR
// if tick > ( ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) - ( 2 2$0 * Vsevolod_uderna_group ) ) then
12423: LD_OWVAR 1
12427: PUSH
12428: LD_EXP 11
12432: PUSH
12433: LD_EXP 33
12437: PLUS
12438: PUSH
12439: LD_INT 4200
12441: PUSH
12442: LD_EXP 12
12446: MUL
12447: MINUS
12448: GREATER
12449: IFFALSE 12474
// ComExitBuilding ( Vsevolod_uderna_group [ Rand ( 1 , Vsevolod_uderna_group ) ] ) ;
12451: LD_EXP 12
12455: PUSH
12456: LD_INT 1
12458: PPUSH
12459: LD_EXP 12
12463: PPUSH
12464: CALL_OW 12
12468: ARRAY
12469: PPUSH
12470: CALL_OW 122
// RaiseSailEvent ( f_vsevolod_utok ) ;
12474: CALL 14446 0 0
12478: PPUSH
12479: CALL_OW 427
// enable ;
12483: ENABLE
// end ;
12484: PPOPN 1
12486: END
// every 0 0$2 trigger ( vsevolod_vstoupil and tick > ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) ) do var i ;
12487: LD_EXP 11
12491: PUSH
12492: LD_OWVAR 1
12496: PUSH
12497: LD_EXP 11
12501: PUSH
12502: LD_EXP 33
12506: PLUS
12507: GREATER
12508: AND
12509: IFFALSE 12656
12511: GO 12513
12513: DISABLE
12514: LD_INT 0
12516: PPUSH
// begin while IsLive ( Vsevolod ) and not VsevolodSaved do
12517: LD_EXP 70
12521: PPUSH
12522: CALL_OW 300
12526: PUSH
12527: LD_EXP 56
12531: NOT
12532: AND
12533: IFFALSE 12656
// begin ComExitBuilding ( Vsevolod_uderna_group ^ [ Vsevolod ] ) ;
12535: LD_EXP 12
12539: PUSH
12540: LD_EXP 70
12544: PUSH
12545: EMPTY
12546: LIST
12547: ADD
12548: PPUSH
12549: CALL_OW 122
// for i in Vsevolod_uderna_group ^ [ Vsevolod ] do
12553: LD_ADDR_VAR 0 1
12557: PUSH
12558: LD_EXP 12
12562: PUSH
12563: LD_EXP 70
12567: PUSH
12568: EMPTY
12569: LIST
12570: ADD
12571: PUSH
12572: FOR_IN
12573: IFFALSE 12591
// PriorityAttack ( ai , i ) ;
12575: LD_EXP 6
12579: PPUSH
12580: LD_VAR 0 1
12584: PPUSH
12585: CALL_OW 470
12589: GO 12572
12591: POP
12592: POP
// zbytek := FilterUnitsInArea ( top_attack , [ [ f_side , ai ] , [ f_control , control_remote ] ] ) isect attack ;
12593: LD_ADDR_EXP 91
12597: PUSH
12598: LD_INT 23
12600: PPUSH
12601: LD_INT 22
12603: PUSH
12604: LD_EXP 6
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 33
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 70
12631: PUSH
12632: LD_EXP 138
12636: ISECT
12637: ST_TO_ADDR
// RaiseSailEvent ( f_vsevolod_final_utok ) ;
12638: CALL 14782 0 0
12642: PPUSH
12643: CALL_OW 427
// wait ( 0 0$30 ) ;
12647: LD_INT 1050
12649: PPUSH
12650: CALL_OW 67
// end ;
12654: GO 12517
// end ;
12656: PPOPN 1
12658: END
// export zbytek ; every 0 0$10 trigger ovsyenkotaken and tick > ( ovsyenkotaken + cas_prvniho_utoku ) and ( ( tick > 20 20$0 and attack >= 3 ) or attack >= 4 ) do var i , max ;
12659: LD_EXP 14
12663: PUSH
12664: LD_OWVAR 1
12668: PUSH
12669: LD_EXP 14
12673: PUSH
12674: LD_EXP 32
12678: PLUS
12679: GREATER
12680: AND
12681: PUSH
12682: LD_OWVAR 1
12686: PUSH
12687: LD_INT 42000
12689: GREATER
12690: PUSH
12691: LD_EXP 138
12695: PUSH
12696: LD_INT 3
12698: GREATEREQUAL
12699: AND
12700: PUSH
12701: LD_EXP 138
12705: PUSH
12706: LD_INT 4
12708: GREATEREQUAL
12709: OR
12710: AND
12711: IFFALSE 12918
12713: GO 12715
12715: DISABLE
12716: LD_INT 0
12718: PPUSH
12719: PPUSH
// begin zbytek := [ ] ;
12720: LD_ADDR_EXP 91
12724: PUSH
12725: EMPTY
12726: ST_TO_ADDR
// max := utoci_max ;
12727: LD_ADDR_VAR 0 2
12731: PUSH
12732: LD_EXP 39
12736: ST_TO_ADDR
// if max > attack then
12737: LD_VAR 0 2
12741: PUSH
12742: LD_EXP 138
12746: GREATER
12747: IFFALSE 12763
// max := attack + 0 ;
12749: LD_ADDR_VAR 0 2
12753: PUSH
12754: LD_EXP 138
12758: PUSH
12759: LD_INT 0
12761: PLUS
12762: ST_TO_ADDR
// for i := 1 to max do
12763: LD_ADDR_VAR 0 1
12767: PUSH
12768: DOUBLE
12769: LD_INT 1
12771: DEC
12772: ST_TO_ADDR
12773: LD_VAR 0 2
12777: PUSH
12778: FOR_TO
12779: IFFALSE 12805
// zbytek := zbytek ^ attack [ i ] ;
12781: LD_ADDR_EXP 91
12785: PUSH
12786: LD_EXP 91
12790: PUSH
12791: LD_EXP 138
12795: PUSH
12796: LD_VAR 0 1
12800: ARRAY
12801: ADD
12802: ST_TO_ADDR
12803: GO 12778
12805: POP
12806: POP
// ComReturn ( mec ) ;
12807: LD_EXP 125
12811: PPUSH
12812: CALL_OW 144
// case Rand ( 1 , 4 ) of 1 :
12816: LD_INT 1
12818: PPUSH
12819: LD_INT 4
12821: PPUSH
12822: CALL_OW 12
12826: PUSH
12827: LD_INT 1
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12847
12835: POP
// RaiseSailEvent ( normal1_utok ) ; 2 :
12836: LD_EXP 24
12840: PPUSH
12841: CALL_OW 427
12845: GO 12908
12847: LD_INT 2
12849: DOUBLE
12850: EQUAL
12851: IFTRUE 12855
12853: GO 12867
12855: POP
// RaiseSailEvent ( normal2_utok ) ; 3 :
12856: LD_EXP 25
12860: PPUSH
12861: CALL_OW 427
12865: GO 12908
12867: LD_INT 3
12869: DOUBLE
12870: EQUAL
12871: IFTRUE 12875
12873: GO 12887
12875: POP
// RaiseSailEvent ( normal3_utok ) ; 4 :
12876: LD_EXP 26
12880: PPUSH
12881: CALL_OW 427
12885: GO 12908
12887: LD_INT 4
12889: DOUBLE
12890: EQUAL
12891: IFTRUE 12895
12893: GO 12907
12895: POP
// RaiseSailEvent ( normal4_utok ) ; end ;
12896: LD_EXP 27
12900: PPUSH
12901: CALL_OW 427
12905: GO 12908
12907: POP
// wait ( cas_mezi_utoky ) ;
12908: LD_EXP 31
12912: PPUSH
12913: CALL_OW 67
// enable ;
12917: ENABLE
// end ;
12918: PPOPN 2
12920: END
// export rAtt1 , idAtt1 , toAtt1 ; every 0 0$1 do var i , a ;
12921: GO 12923
12923: DISABLE
12924: LD_INT 0
12926: PPUSH
12927: PPUSH
// begin rAtt1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , mc_attack ] , [ mc_reg_area_to_protect , def_base3 ] , mc_reg_only_important ] ) ;
12928: LD_ADDR_EXP 92
12932: PUSH
12933: LD_EXP 6
12937: PPUSH
12938: LD_INT 1
12940: PUSH
12941: LD_INT 70
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 2
12950: PUSH
12951: LD_INT 26
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 3
12960: PUSH
12961: LD_INT 18
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 8
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 399
12981: ST_TO_ADDR
// idAtt1 := McAttack ( 5 , rAtt1 , toAtt1 , [ mc_def_advantage , mcatt_difficulty ] ) ;
12982: LD_ADDR_EXP 93
12986: PUSH
12987: LD_INT 5
12989: PPUSH
12990: LD_EXP 92
12994: PPUSH
12995: LD_EXP 94
12999: PPUSH
13000: LD_INT 1
13002: PUSH
13003: LD_EXP 17
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PPUSH
13012: CALL_OW 402
13016: ST_TO_ADDR
// end ;
13017: PPOPN 2
13019: END
// every 0 0$2 do
13020: GO 13022
13022: DISABLE
// begin toAtt1 := UnitFilter ( attack , [ [ f_inarea , mc_attack ] , [ f_side , ai ] ] ) ;
13023: LD_ADDR_EXP 94
13027: PUSH
13028: LD_EXP 138
13032: PPUSH
13033: LD_INT 95
13035: PUSH
13036: LD_INT 26
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 22
13045: PUSH
13046: LD_EXP 6
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PPUSH
13059: CALL_OW 72
13063: ST_TO_ADDR
// if OvsyenkoTaken then
13064: LD_EXP 14
13068: IFFALSE 13084
// AddMcUnits ( idAtt1 , toAtt1 ) ;
13070: LD_EXP 93
13074: PPUSH
13075: LD_EXP 94
13079: PPUSH
13080: CALL_OW 390
// enable ;
13084: ENABLE
// end ;
13085: END
// export function f_normal1_utok ; var path , i ; begin
13086: LD_INT 0
13088: PPUSH
13089: PPUSH
13090: PPUSH
// path := [ [ 66 , 86 ] , [ 91 , 95 ] ] ;
13091: LD_ADDR_VAR 0 2
13095: PUSH
13096: LD_INT 66
13098: PUSH
13099: LD_INT 86
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 91
13108: PUSH
13109: LD_INT 95
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13120: LD_EXP 91
13124: PPUSH
13125: LD_INT 3
13127: PUSH
13128: LD_INT 33
13130: PUSH
13131: LD_INT 2
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 72
13146: PPUSH
13147: LD_INT 22
13149: PUSH
13150: LD_EXP 6
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: PPUSH
13178: LD_INT 0
13180: PPUSH
13181: CALL 10905 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13185: LD_EXP 91
13189: PPUSH
13190: LD_INT 33
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: PPUSH
13203: CALL_OW 72
13207: PPUSH
13208: LD_INT 22
13210: PUSH
13211: LD_EXP 6
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: LD_INT 25
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PPUSH
13234: CALL_OW 69
13238: PPUSH
13239: LD_INT 34
13241: PUSH
13242: LD_INT 30
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: PPUSH
13252: CALL_OW 69
13256: PPUSH
13257: CALL 11250 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13261: LD_EXP 91
13265: PPUSH
13266: LD_INT 3
13268: PUSH
13269: LD_INT 33
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PPUSH
13283: CALL_OW 72
13287: PPUSH
13288: LD_INT 1050
13290: PPUSH
13291: CALL 11476 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13295: LD_EXP 91
13299: PPUSH
13300: LD_INT 33
13302: PUSH
13303: LD_INT 2
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: PPUSH
13313: CALL_OW 72
13317: PPUSH
13318: LD_INT 34
13320: PUSH
13321: LD_INT 30
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: PPUSH
13331: CALL_OW 69
13335: PPUSH
13336: LD_INT 1050
13338: PPUSH
13339: CALL 11334 0 3
// ComStop ( zbytek ) ;
13343: LD_EXP 91
13347: PPUSH
13348: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
13352: LD_INT 3
13354: PPUSH
13355: LD_EXP 91
13359: PPUSH
13360: CALL 12003 0 2
// if not byl_hint_PA then
13364: LD_EXP 95
13368: NOT
13369: IFFALSE 13410
// begin while not ContactTime ( [ ai ] ) do
13371: LD_EXP 6
13375: PUSH
13376: EMPTY
13377: LIST
13378: PPUSH
13379: CALL_OW 462
13383: NOT
13384: IFFALSE 13395
// wait ( 0 0$1 ) ;
13386: LD_INT 35
13388: PPUSH
13389: CALL_OW 67
13393: GO 13371
// MyHint ( PriorityAttacks ) ;
13395: LD_STRING PriorityAttacks
13397: PPUSH
13398: CALL 11731 0 1
// byl_hint_PA := true ;
13402: LD_ADDR_EXP 95
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// end ; end ;
13410: LD_VAR 0 1
13414: RET
// export byl_hint_PA ; export function f_normal2_utok ; var path , i ; begin
13415: LD_INT 0
13417: PPUSH
13418: PPUSH
13419: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 91 , 95 ] ] ;
13420: LD_ADDR_VAR 0 2
13424: PUSH
13425: LD_INT 66
13427: PUSH
13428: LD_INT 86
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 109
13437: PUSH
13438: LD_INT 128
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 91
13447: PUSH
13448: LD_INT 95
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13460: LD_EXP 91
13464: PPUSH
13465: LD_INT 3
13467: PUSH
13468: LD_INT 33
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 72
13486: PPUSH
13487: LD_INT 22
13489: PUSH
13490: LD_EXP 6
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 25
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PPUSH
13513: CALL_OW 69
13517: PPUSH
13518: LD_INT 0
13520: PPUSH
13521: CALL 10905 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13525: LD_EXP 91
13529: PPUSH
13530: LD_INT 33
13532: PUSH
13533: LD_INT 2
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: PPUSH
13543: CALL_OW 72
13547: PPUSH
13548: LD_INT 22
13550: PUSH
13551: LD_EXP 6
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PPUSH
13574: CALL_OW 69
13578: PPUSH
13579: LD_INT 34
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: EMPTY
13590: LIST
13591: PPUSH
13592: CALL_OW 69
13596: PPUSH
13597: CALL 11250 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13601: LD_EXP 91
13605: PPUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 33
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PPUSH
13623: CALL_OW 72
13627: PPUSH
13628: LD_INT 1050
13630: PPUSH
13631: CALL 11476 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13635: LD_EXP 91
13639: PPUSH
13640: LD_INT 33
13642: PUSH
13643: LD_INT 2
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: PPUSH
13653: CALL_OW 72
13657: PPUSH
13658: LD_INT 34
13660: PUSH
13661: LD_INT 30
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: PPUSH
13671: CALL_OW 69
13675: PPUSH
13676: LD_INT 1050
13678: PPUSH
13679: CALL 11334 0 3
// ComStop ( zbytek ) ;
13683: LD_EXP 91
13687: PPUSH
13688: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
13692: LD_INT 3
13694: PPUSH
13695: LD_EXP 91
13699: PPUSH
13700: CALL 12003 0 2
// if not byl_hint_PA then
13704: LD_EXP 95
13708: NOT
13709: IFFALSE 13750
// begin while not ContactTime ( [ ai ] ) do
13711: LD_EXP 6
13715: PUSH
13716: EMPTY
13717: LIST
13718: PPUSH
13719: CALL_OW 462
13723: NOT
13724: IFFALSE 13735
// wait ( 0 0$1 ) ;
13726: LD_INT 35
13728: PPUSH
13729: CALL_OW 67
13733: GO 13711
// MyHint ( PriorityAttacks ) ;
13735: LD_STRING PriorityAttacks
13737: PPUSH
13738: CALL 11731 0 1
// byl_hint_PA := true ;
13742: LD_ADDR_EXP 95
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// end ; end ;
13750: LD_VAR 0 1
13754: RET
// export function f_normal3_utok ; var path , i ; begin
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 110 , 88 ] , [ 91 , 95 ] ] ;
13760: LD_ADDR_VAR 0 2
13764: PUSH
13765: LD_INT 66
13767: PUSH
13768: LD_INT 86
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 109
13777: PUSH
13778: LD_INT 128
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 110
13787: PUSH
13788: LD_INT 88
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 91
13797: PUSH
13798: LD_INT 95
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13811: LD_EXP 91
13815: PPUSH
13816: LD_INT 3
13818: PUSH
13819: LD_INT 33
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 72
13837: PPUSH
13838: LD_INT 22
13840: PUSH
13841: LD_EXP 6
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 25
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: PPUSH
13869: LD_INT 0
13871: PPUSH
13872: CALL 10905 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13876: LD_EXP 91
13880: PPUSH
13881: LD_INT 33
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: PPUSH
13894: CALL_OW 72
13898: PPUSH
13899: LD_INT 22
13901: PUSH
13902: LD_EXP 6
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 69
13929: PPUSH
13930: LD_INT 34
13932: PUSH
13933: LD_INT 30
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: PPUSH
13943: CALL_OW 69
13947: PPUSH
13948: CALL 11250 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13952: LD_EXP 91
13956: PPUSH
13957: LD_INT 3
13959: PUSH
13960: LD_INT 33
13962: PUSH
13963: LD_INT 2
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 72
13978: PPUSH
13979: LD_INT 1050
13981: PPUSH
13982: CALL 11476 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13986: LD_EXP 91
13990: PPUSH
13991: LD_INT 33
13993: PUSH
13994: LD_INT 2
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: PPUSH
14004: CALL_OW 72
14008: PPUSH
14009: LD_INT 34
14011: PUSH
14012: LD_INT 30
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: PPUSH
14027: LD_INT 1050
14029: PPUSH
14030: CALL 11334 0 3
// ComStop ( zbytek ) ;
14034: LD_EXP 91
14038: PPUSH
14039: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
14043: LD_INT 3
14045: PPUSH
14046: LD_EXP 91
14050: PPUSH
14051: CALL 12003 0 2
// if not byl_hint_PA then
14055: LD_EXP 95
14059: NOT
14060: IFFALSE 14101
// begin while not ContactTime ( [ ai ] ) do
14062: LD_EXP 6
14066: PUSH
14067: EMPTY
14068: LIST
14069: PPUSH
14070: CALL_OW 462
14074: NOT
14075: IFFALSE 14086
// wait ( 0 0$1 ) ;
14077: LD_INT 35
14079: PPUSH
14080: CALL_OW 67
14084: GO 14062
// MyHint ( PriorityAttacks ) ;
14086: LD_STRING PriorityAttacks
14088: PPUSH
14089: CALL 11731 0 1
// byl_hint_PA := true ;
14093: LD_ADDR_EXP 95
14097: PUSH
14098: LD_INT 1
14100: ST_TO_ADDR
// end ; end ;
14101: LD_VAR 0 1
14105: RET
// export function f_normal4_utok ; var path , i ; begin
14106: LD_INT 0
14108: PPUSH
14109: PPUSH
14110: PPUSH
// path := [ [ 38 , 16 ] , [ 75 , 36 ] , [ 91 , 95 ] ] ;
14111: LD_ADDR_VAR 0 2
14115: PUSH
14116: LD_INT 38
14118: PUSH
14119: LD_INT 16
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 75
14128: PUSH
14129: LD_INT 36
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 91
14138: PUSH
14139: LD_INT 95
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14151: LD_EXP 91
14155: PPUSH
14156: LD_INT 3
14158: PUSH
14159: LD_INT 33
14161: PUSH
14162: LD_INT 2
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 72
14177: PPUSH
14178: LD_INT 22
14180: PUSH
14181: LD_EXP 6
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 25
14192: PUSH
14193: LD_INT 1
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: PPUSH
14209: LD_INT 0
14211: PPUSH
14212: CALL 10905 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14216: LD_EXP 91
14220: PPUSH
14221: LD_INT 33
14223: PUSH
14224: LD_INT 2
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: PPUSH
14234: CALL_OW 72
14238: PPUSH
14239: LD_INT 22
14241: PUSH
14242: LD_EXP 6
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 25
14253: PUSH
14254: LD_INT 3
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PPUSH
14265: CALL_OW 69
14269: PPUSH
14270: LD_INT 34
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: EMPTY
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: PPUSH
14288: CALL 11250 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14292: LD_EXP 91
14296: PPUSH
14297: LD_INT 3
14299: PUSH
14300: LD_INT 33
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 72
14318: PPUSH
14319: LD_INT 1050
14321: PPUSH
14322: CALL 11476 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14326: LD_EXP 91
14330: PPUSH
14331: LD_INT 33
14333: PUSH
14334: LD_INT 2
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: PPUSH
14344: CALL_OW 72
14348: PPUSH
14349: LD_INT 34
14351: PUSH
14352: LD_INT 30
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: PPUSH
14367: LD_INT 1050
14369: PPUSH
14370: CALL 11334 0 3
// ComStop ( zbytek ) ;
14374: LD_EXP 91
14378: PPUSH
14379: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
14383: LD_INT 3
14385: PPUSH
14386: LD_EXP 91
14390: PPUSH
14391: CALL 12003 0 2
// if not byl_hint_PA then
14395: LD_EXP 95
14399: NOT
14400: IFFALSE 14441
// begin while not ContactTime ( [ ai ] ) do
14402: LD_EXP 6
14406: PUSH
14407: EMPTY
14408: LIST
14409: PPUSH
14410: CALL_OW 462
14414: NOT
14415: IFFALSE 14426
// wait ( 0 0$1 ) ;
14417: LD_INT 35
14419: PPUSH
14420: CALL_OW 67
14424: GO 14402
// MyHint ( PriorityAttacks ) ;
14426: LD_STRING PriorityAttacks
14428: PPUSH
14429: CALL 11731 0 1
// byl_hint_PA := true ;
14433: LD_ADDR_EXP 95
14437: PUSH
14438: LD_INT 1
14440: ST_TO_ADDR
// end ; end ;
14441: LD_VAR 0 1
14445: RET
// export function f_vsevolod_utok ; var path , i ; begin
14446: LD_INT 0
14448: PPUSH
14449: PPUSH
14450: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] ] ;
14451: LD_ADDR_VAR 0 2
14455: PUSH
14456: LD_INT 43
14458: PUSH
14459: LD_INT 17
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 41
14468: PUSH
14469: LD_INT 7
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14480: LD_EXP 91
14484: PPUSH
14485: LD_INT 3
14487: PUSH
14488: LD_INT 33
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 72
14506: PPUSH
14507: LD_INT 22
14509: PUSH
14510: LD_EXP 6
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 25
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: PPUSH
14538: LD_INT 0
14540: PPUSH
14541: CALL 10905 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14545: LD_EXP 91
14549: PPUSH
14550: LD_INT 33
14552: PUSH
14553: LD_INT 2
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: PPUSH
14563: CALL_OW 72
14567: PPUSH
14568: LD_INT 22
14570: PUSH
14571: LD_EXP 6
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 25
14582: PUSH
14583: LD_INT 3
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: PPUSH
14599: LD_INT 34
14601: PUSH
14602: LD_INT 30
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: PPUSH
14612: CALL_OW 69
14616: PPUSH
14617: CALL 11250 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14621: LD_EXP 91
14625: PPUSH
14626: LD_INT 3
14628: PUSH
14629: LD_INT 33
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 72
14647: PPUSH
14648: LD_INT 1050
14650: PPUSH
14651: CALL 11476 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14655: LD_EXP 91
14659: PPUSH
14660: LD_INT 33
14662: PUSH
14663: LD_INT 2
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: PPUSH
14673: CALL_OW 72
14677: PPUSH
14678: LD_INT 34
14680: PUSH
14681: LD_INT 30
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: PPUSH
14696: LD_INT 1050
14698: PPUSH
14699: CALL 11334 0 3
// ComStop ( zbytek ) ;
14703: LD_EXP 91
14707: PPUSH
14708: CALL_OW 141
// for i in path do
14712: LD_ADDR_VAR 0 3
14716: PUSH
14717: LD_VAR 0 2
14721: PUSH
14722: FOR_IN
14723: IFFALSE 14754
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
14725: LD_EXP 91
14729: PPUSH
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 2
14746: ARRAY
14747: PPUSH
14748: CALL_OW 174
14752: GO 14722
14754: POP
14755: POP
// AddComWait ( zbytek , 0 0$5 ) ;
14756: LD_EXP 91
14760: PPUSH
14761: LD_INT 175
14763: PPUSH
14764: CALL_OW 202
// AddComReturn ( zbytek ) ;
14768: LD_EXP 91
14772: PPUSH
14773: CALL_OW 204
// end ;
14777: LD_VAR 0 1
14781: RET
// export function f_vsevolod_final_utok ; var path , i ; begin
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
14786: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] , [ 52 , 7 ] ] ;
14787: LD_ADDR_VAR 0 2
14791: PUSH
14792: LD_INT 43
14794: PUSH
14795: LD_INT 17
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 41
14804: PUSH
14805: LD_INT 7
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 52
14814: PUSH
14815: LD_INT 7
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14827: LD_EXP 91
14831: PPUSH
14832: LD_INT 3
14834: PUSH
14835: LD_INT 33
14837: PUSH
14838: LD_INT 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PPUSH
14849: CALL_OW 72
14853: PPUSH
14854: LD_INT 22
14856: PUSH
14857: LD_EXP 6
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PPUSH
14880: CALL_OW 69
14884: PPUSH
14885: LD_INT 0
14887: PPUSH
14888: CALL 10905 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14892: LD_EXP 91
14896: PPUSH
14897: LD_INT 33
14899: PUSH
14900: LD_INT 2
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: PPUSH
14910: CALL_OW 72
14914: PPUSH
14915: LD_INT 22
14917: PUSH
14918: LD_EXP 6
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 25
14929: PUSH
14930: LD_INT 3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 69
14945: PPUSH
14946: LD_INT 34
14948: PUSH
14949: LD_INT 30
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: PPUSH
14964: CALL 11250 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14968: LD_EXP 91
14972: PPUSH
14973: LD_INT 3
14975: PUSH
14976: LD_INT 33
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 72
14994: PPUSH
14995: LD_INT 1050
14997: PPUSH
14998: CALL 11476 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
15002: LD_EXP 91
15006: PPUSH
15007: LD_INT 33
15009: PUSH
15010: LD_INT 2
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: PPUSH
15020: CALL_OW 72
15024: PPUSH
15025: LD_INT 34
15027: PUSH
15028: LD_INT 30
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: PPUSH
15038: CALL_OW 69
15042: PPUSH
15043: LD_INT 1050
15045: PPUSH
15046: CALL 11334 0 3
// ComRemember ( zbytek ) ;
15050: LD_EXP 91
15054: PPUSH
15055: CALL_OW 143
// for i in path do
15059: LD_ADDR_VAR 0 3
15063: PUSH
15064: LD_VAR 0 2
15068: PUSH
15069: FOR_IN
15070: IFFALSE 15101
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
15072: LD_EXP 91
15076: PPUSH
15077: LD_VAR 0 3
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PPUSH
15086: LD_VAR 0 3
15090: PUSH
15091: LD_INT 2
15093: ARRAY
15094: PPUSH
15095: CALL_OW 174
15099: GO 15069
15101: POP
15102: POP
// AddComAttackUnit ( zbytek , Vsevolod ) ;
15103: LD_EXP 91
15107: PPUSH
15108: LD_EXP 70
15112: PPUSH
15113: CALL_OW 175
// end ; end_of_file
15117: LD_VAR 0 1
15121: RET
// var rDef1 , rDef2 ; export idDef1 , idDef2 ; export toDef1 , toDef2 ; every 0 0$1 do
15122: GO 15124
15124: DISABLE
// begin rDef1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base ] , [ mc_reg_area_to_protect , def_base ] ] ) ;
15125: LD_ADDR_LOC 3
15129: PUSH
15130: LD_EXP 6
15134: PPUSH
15135: LD_INT 1
15137: PUSH
15138: LD_INT 70
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: LD_INT 19
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 3
15157: PUSH
15158: LD_INT 19
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: PPUSH
15170: CALL_OW 399
15174: ST_TO_ADDR
// rDef2 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base3 ] , [ mc_reg_area_to_protect , def_base3 ] ] ) ;
15175: LD_ADDR_LOC 4
15179: PUSH
15180: LD_EXP 6
15184: PPUSH
15185: LD_INT 1
15187: PUSH
15188: LD_INT 70
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: LD_INT 18
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 3
15207: PUSH
15208: LD_INT 18
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 399
15224: ST_TO_ADDR
// idDef1 := McDefend ( 10 , rDef1 , toDef1 , [ mc_def_advantage , mcdef_difficulty ] ) ;
15225: LD_ADDR_EXP 96
15229: PUSH
15230: LD_INT 10
15232: PPUSH
15233: LD_LOC 3
15237: PPUSH
15238: LD_EXP 98
15242: PPUSH
15243: LD_INT 1
15245: PUSH
15246: LD_EXP 16
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PPUSH
15255: CALL_OW 401
15259: ST_TO_ADDR
// idDef2 := McDefend ( 10 , rDef2 , toDef2 , [ mc_def_advantage , na_kopci_mcdef_difficulty ] ) ;
15260: LD_ADDR_EXP 97
15264: PUSH
15265: LD_INT 10
15267: PPUSH
15268: LD_LOC 4
15272: PPUSH
15273: LD_EXP 99
15277: PPUSH
15278: LD_INT 1
15280: PUSH
15281: LD_EXP 18
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PPUSH
15290: CALL_OW 401
15294: ST_TO_ADDR
// end ;
15295: END
// every 0 0$2 do var r1 , r2 ;
15296: GO 15298
15298: DISABLE
15299: LD_INT 0
15301: PPUSH
15302: PPUSH
// begin todef1 := UnitFilter ( ( fort isect ( b3 ^ b4 ) ) ^ ( ( a3 ^ a4 ) isect sol ) ^ attack ^ defence , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15303: LD_ADDR_EXP 98
15307: PUSH
15308: LD_EXP 119
15312: PUSH
15313: LD_EXP 130
15317: PUSH
15318: LD_EXP 131
15322: ADD
15323: ISECT
15324: PUSH
15325: LD_EXP 135
15329: PUSH
15330: LD_EXP 136
15334: ADD
15335: PUSH
15336: LD_EXP 121
15340: ISECT
15341: ADD
15342: PUSH
15343: LD_EXP 138
15347: ADD
15348: PUSH
15349: LD_EXP 139
15353: ADD
15354: PPUSH
15355: LD_INT 22
15357: PUSH
15358: LD_EXP 6
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 50
15369: PUSH
15370: EMPTY
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PPUSH
15377: CALL_OW 72
15381: ST_TO_ADDR
// todef2 := UnitFilter ( ( fort isect b1 ) ^ ( a1 isect sol ) , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15382: LD_ADDR_EXP 99
15386: PUSH
15387: LD_EXP 119
15391: PUSH
15392: LD_EXP 128
15396: ISECT
15397: PUSH
15398: LD_EXP 133
15402: PUSH
15403: LD_EXP 121
15407: ISECT
15408: ADD
15409: PPUSH
15410: LD_INT 22
15412: PUSH
15413: LD_EXP 6
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 50
15424: PUSH
15425: EMPTY
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 72
15436: ST_TO_ADDR
// r1 := GetMcUnits ( idDef1 ) diff todef1 ;
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_EXP 96
15446: PPUSH
15447: CALL_OW 389
15451: PUSH
15452: LD_EXP 98
15456: DIFF
15457: ST_TO_ADDR
// add_to ( r1 ) ;
15458: LD_VAR 0 1
15462: PPUSH
15463: CALL 30370 0 1
// AddMcUnits ( idDef1 , todef1 ) ;
15467: LD_EXP 96
15471: PPUSH
15472: LD_EXP 98
15476: PPUSH
15477: CALL_OW 390
// r2 := GetMcUnits ( idDef2 ) diff todef2 ;
15481: LD_ADDR_VAR 0 2
15485: PUSH
15486: LD_EXP 97
15490: PPUSH
15491: CALL_OW 389
15495: PUSH
15496: LD_EXP 99
15500: DIFF
15501: ST_TO_ADDR
// add_to ( r2 ) ;
15502: LD_VAR 0 2
15506: PPUSH
15507: CALL 30370 0 1
// if not ovsyenkotaken or ovsyenkocaptured then
15511: LD_EXP 14
15515: NOT
15516: PUSH
15517: LD_EXP 15
15521: OR
15522: IFFALSE 15538
// AddMcUnits ( idDef2 , todef2 ) ;
15524: LD_EXP 97
15528: PPUSH
15529: LD_EXP 99
15533: PPUSH
15534: CALL_OW 390
// enable ;
15538: ENABLE
// end ; end_of_file
15539: PPOPN 2
15541: END
// export opravovat ; every 0 0$1.0 do var set_fuel , fuel ;
15542: GO 15544
15544: DISABLE
15545: LD_INT 0
15547: PPUSH
15548: PPUSH
// begin for set_fuel in FilterUnitsInArea ( near_base , [ [ f_type , unit_vehicle ] , [ f_side , ai ] ] ) do
15549: LD_ADDR_VAR 0 1
15553: PUSH
15554: LD_INT 2
15556: PPUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 22
15569: PUSH
15570: LD_EXP 6
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PPUSH
15583: CALL_OW 70
15587: PUSH
15588: FOR_IN
15589: IFFALSE 15636
// begin fuel := GetFuel ( set_fuel ) ;
15591: LD_ADDR_VAR 0 2
15595: PUSH
15596: LD_VAR 0 1
15600: PPUSH
15601: CALL_OW 261
15605: ST_TO_ADDR
// if fuel <= 80 then
15606: LD_VAR 0 2
15610: PUSH
15611: LD_INT 80
15613: LESSEQUAL
15614: IFFALSE 15634
// SetFuel ( set_fuel , fuel + 20 ) ;
15616: LD_VAR 0 1
15620: PPUSH
15621: LD_VAR 0 2
15625: PUSH
15626: LD_INT 20
15628: PLUS
15629: PPUSH
15630: CALL_OW 240
// end ;
15634: GO 15588
15636: POP
15637: POP
// enable ;
15638: ENABLE
// end ;
15639: PPOPN 2
15641: END
// export rep_cars ; export brk_cars ; every 0 0$5 do var i ;
15642: GO 15644
15644: DISABLE
15645: LD_INT 0
15647: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
15648: LD_ADDR_VAR 0 1
15652: PUSH
15653: LD_INT 22
15655: PUSH
15656: LD_EXP 6
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 21
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: PUSH
15684: FOR_IN
15685: IFFALSE 15768
// begin if GetLives ( i ) < 600 then
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 256
15696: PUSH
15697: LD_INT 600
15699: LESS
15700: IFFALSE 15735
// begin ComMoveXY ( i , 37 , 59 ) ;
15702: LD_VAR 0 1
15706: PPUSH
15707: LD_INT 37
15709: PPUSH
15710: LD_INT 59
15712: PPUSH
15713: CALL_OW 111
// brk_cars := brk_cars union i ;
15717: LD_ADDR_EXP 102
15721: PUSH
15722: LD_EXP 102
15726: PUSH
15727: LD_VAR 0 1
15731: UNION
15732: ST_TO_ADDR
// end else
15733: GO 15766
// if GetLives ( i ) > 950 then
15735: LD_VAR 0 1
15739: PPUSH
15740: CALL_OW 256
15744: PUSH
15745: LD_INT 950
15747: GREATER
15748: IFFALSE 15766
// begin brk_cars := brk_cars diff i ;
15750: LD_ADDR_EXP 102
15754: PUSH
15755: LD_EXP 102
15759: PUSH
15760: LD_VAR 0 1
15764: DIFF
15765: ST_TO_ADDR
// end ; end ;
15766: GO 15684
15768: POP
15769: POP
// enable ;
15770: ENABLE
// end ;
15771: PPOPN 1
15773: END
// every 0 0$5 + 0 0$2 do var zivoty , i ;
15774: GO 15776
15776: DISABLE
15777: LD_INT 0
15779: PPUSH
15780: PPUSH
// begin rep_cars := [ ] ;
15781: LD_ADDR_EXP 101
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i in FilterUnitsInArea ( repair_bay1 , [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: LD_INT 27
15795: PPUSH
15796: LD_INT 22
15798: PUSH
15799: LD_EXP 6
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 21
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 70
15826: PUSH
15827: FOR_IN
15828: IFFALSE 15884
// begin if GetLives ( i ) < 1000 then
15830: LD_VAR 0 2
15834: PPUSH
15835: CALL_OW 256
15839: PUSH
15840: LD_INT 1000
15842: LESS
15843: IFFALSE 15882
// begin rep_cars := rep_cars ^ i ;
15845: LD_ADDR_EXP 101
15849: PUSH
15850: LD_EXP 101
15854: PUSH
15855: LD_VAR 0 2
15859: ADD
15860: ST_TO_ADDR
// zivoty := zivoty ^ GetLives ( i ) ;
15861: LD_ADDR_VAR 0 1
15865: PUSH
15866: LD_VAR 0 1
15870: PUSH
15871: LD_VAR 0 2
15875: PPUSH
15876: CALL_OW 256
15880: ADD
15881: ST_TO_ADDR
// end ; end ;
15882: GO 15827
15884: POP
15885: POP
// SortListByListAsc ( rep_cars , zivoty ) ;
15886: LD_EXP 101
15890: PPUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 76
// enable ;
15900: ENABLE
// end ;
15901: PPOPN 2
15903: END
// export opr_mec ; every 0 0$5 + 0 0$4 trigger opravovat do var a ;
15904: LD_EXP 100
15908: IFFALSE 16083
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
// begin a := UnitFilter ( mec , [ f_not , [ f_hastask ] ] ) ;
15916: LD_ADDR_VAR 0 1
15920: PUSH
15921: LD_EXP 125
15925: PPUSH
15926: LD_INT 3
15928: PUSH
15929: LD_INT 60
15931: PUSH
15932: EMPTY
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 72
15943: ST_TO_ADDR
// ComStop ( a ) ;
15944: LD_VAR 0 1
15948: PPUSH
15949: CALL_OW 141
// ComReturn ( a ) ;
15953: LD_VAR 0 1
15957: PPUSH
15958: CALL_OW 144
// opr_mec := opr_mec diff a ;
15962: LD_ADDR_EXP 103
15966: PUSH
15967: LD_EXP 103
15971: PUSH
15972: LD_VAR 0 1
15976: DIFF
15977: ST_TO_ADDR
// if rep_cars then
15978: LD_EXP 101
15982: IFFALSE 16082
// begin a := get_x_best ( UnitFilter ( mec , [ [ f_dist , rep_cars [ 1 ] , 20 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
15984: LD_ADDR_VAR 0 1
15988: PUSH
15989: LD_EXP 125
15993: PPUSH
15994: LD_INT 91
15996: PUSH
15997: LD_EXP 101
16001: PUSH
16002: LD_INT 1
16004: ARRAY
16005: PUSH
16006: LD_INT 20
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: LIST
16013: PUSH
16014: EMPTY
16015: LIST
16016: PPUSH
16017: CALL_OW 72
16021: PPUSH
16022: LD_INT 2
16024: PPUSH
16025: LD_INT 3
16027: PPUSH
16028: LD_INT 0
16030: PPUSH
16031: LD_INT 0
16033: PPUSH
16034: CALL 10062 0 5
16038: ST_TO_ADDR
// opr_mec := opr_mec union a ;
16039: LD_ADDR_EXP 103
16043: PUSH
16044: LD_EXP 103
16048: PUSH
16049: LD_VAR 0 1
16053: UNION
16054: ST_TO_ADDR
// ComExitBuilding ( a ) ;
16055: LD_VAR 0 1
16059: PPUSH
16060: CALL_OW 122
// AddComRepairVehicle ( a , rep_cars [ 1 ] ) ;
16064: LD_VAR 0 1
16068: PPUSH
16069: LD_EXP 101
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 189
// end ; enable ;
16082: ENABLE
// end ; end_of_file
16083: PPOPN 1
16085: END
// var d1 , d2 , d3 , d4 , d5 , d6 , d7 , d8 , d9 , d10 ; every 0 0$2 do
16086: GO 16088
16088: DISABLE
// begin d1 := [ us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
16089: LD_ADDR_LOC 5
16093: PUSH
16094: LD_INT 4
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: LD_INT 4
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: ST_TO_ADDR
// d2 := [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] ;
16112: LD_ADDR_LOC 6
16116: PUSH
16117: LD_INT 4
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: LD_INT 5
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: ST_TO_ADDR
// d3 := [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ;
16135: LD_ADDR_LOC 7
16139: PUSH
16140: LD_INT 4
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: LD_INT 6
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: ST_TO_ADDR
// d5 := [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] ;
16158: LD_ADDR_LOC 9
16162: PUSH
16163: LD_INT 4
16165: PUSH
16166: LD_INT 1
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: LD_INT 4
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: ST_TO_ADDR
// d6 := [ us_heavy_tracked , engine_combustion , control_remote , us_double_gun ] ;
16181: LD_ADDR_LOC 10
16185: PUSH
16186: LD_INT 4
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: LD_INT 5
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: ST_TO_ADDR
// d7 := [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] ;
16204: LD_ADDR_LOC 11
16208: PUSH
16209: LD_INT 4
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: LD_INT 6
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: ST_TO_ADDR
// end ;
16227: END
// every 0 0$10 do
16228: GO 16230
16230: DISABLE
// begin defence := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_manual ] ] ) ;
16231: LD_ADDR_EXP 139
16235: PUSH
16236: LD_INT 22
16238: PUSH
16239: LD_EXP 6
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 33
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: ST_TO_ADDR
// attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
16267: LD_ADDR_EXP 138
16271: PUSH
16272: LD_INT 22
16274: PUSH
16275: LD_EXP 6
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 33
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PPUSH
16298: CALL_OW 69
16302: ST_TO_ADDR
// end ;
16303: END
// var fact1 , fact2 ; every 0 0$1 do
16304: GO 16306
16306: DISABLE
// begin fact1 := fact isect b3 ;
16307: LD_ADDR_LOC 15
16311: PUSH
16312: LD_EXP 124
16316: PUSH
16317: LD_EXP 130
16321: ISECT
16322: ST_TO_ADDR
// if fact1 then
16323: LD_LOC 15
16327: IFFALSE 16343
// fact1 := fact1 [ 1 ] ;
16329: LD_ADDR_LOC 15
16333: PUSH
16334: LD_LOC 15
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: ST_TO_ADDR
// fact2 := fact isect b4 ;
16343: LD_ADDR_LOC 16
16347: PUSH
16348: LD_EXP 124
16352: PUSH
16353: LD_EXP 131
16357: ISECT
16358: ST_TO_ADDR
// if fact2 then
16359: LD_LOC 16
16363: IFFALSE 16379
// fact2 := fact2 [ 1 ] ;
16365: LD_ADDR_LOC 16
16369: PUSH
16370: LD_LOC 16
16374: PUSH
16375: LD_INT 1
16377: ARRAY
16378: ST_TO_ADDR
// enable ;
16379: ENABLE
// end ;
16380: END
// every 0 0$5 trigger IsOk ( fact1 ) and fact1 in fact and IsIdle ( fact1 ) do var a , fact_attack ;
16381: LD_LOC 15
16385: PPUSH
16386: CALL_OW 302
16390: PUSH
16391: LD_LOC 15
16395: PUSH
16396: LD_EXP 124
16400: IN
16401: AND
16402: PUSH
16403: LD_LOC 15
16407: PPUSH
16408: CALL_OW 316
16412: AND
16413: IFFALSE 17435
16415: GO 16417
16417: DISABLE
16418: LD_INT 0
16420: PPUSH
16421: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
16422: LD_ADDR_VAR 0 2
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_EXP 6
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 33
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PPUSH
16453: CALL_OW 69
16457: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
16458: LD_INT 1
16460: PUSH
16461: LD_OWVAR 1
16465: PUSH
16466: LD_INT 31500
16468: LESS
16469: PUSH
16470: LD_EXP 139
16474: PUSH
16475: LD_INT 3
16477: LESS
16478: AND
16479: PUSH
16480: LD_LOC 15
16484: PPUSH
16485: LD_LOC 5
16489: PUSH
16490: LD_INT 1
16492: ARRAY
16493: PPUSH
16494: LD_LOC 5
16498: PUSH
16499: LD_INT 2
16501: ARRAY
16502: PPUSH
16503: LD_LOC 5
16507: PUSH
16508: LD_INT 3
16510: ARRAY
16511: PPUSH
16512: LD_LOC 5
16516: PUSH
16517: LD_INT 4
16519: ARRAY
16520: PPUSH
16521: CALL_OW 448
16525: AND
16526: DOUBLE
16527: EQUAL
16528: IFTRUE 16532
16530: GO 16580
16532: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
16533: LD_LOC 15
16537: PPUSH
16538: LD_LOC 5
16542: PUSH
16543: LD_INT 1
16545: ARRAY
16546: PPUSH
16547: LD_LOC 5
16551: PUSH
16552: LD_INT 2
16554: ARRAY
16555: PPUSH
16556: LD_LOC 5
16560: PUSH
16561: LD_INT 3
16563: ARRAY
16564: PPUSH
16565: LD_LOC 5
16569: PUSH
16570: LD_INT 4
16572: ARRAY
16573: PPUSH
16574: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
16578: GO 17434
16580: LD_OWVAR 1
16584: PUSH
16585: LD_INT 31500
16587: GREATER
16588: PUSH
16589: LD_OWVAR 1
16593: PUSH
16594: LD_INT 63000
16596: LESS
16597: AND
16598: PUSH
16599: LD_EXP 139
16603: PUSH
16604: LD_INT 3
16606: LESS
16607: AND
16608: PUSH
16609: LD_LOC 15
16613: PPUSH
16614: LD_LOC 6
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PPUSH
16623: LD_LOC 6
16627: PUSH
16628: LD_INT 2
16630: ARRAY
16631: PPUSH
16632: LD_LOC 6
16636: PUSH
16637: LD_INT 3
16639: ARRAY
16640: PPUSH
16641: LD_LOC 6
16645: PUSH
16646: LD_INT 4
16648: ARRAY
16649: PPUSH
16650: CALL_OW 448
16654: AND
16655: DOUBLE
16656: EQUAL
16657: IFTRUE 16661
16659: GO 16709
16661: POP
// begin ComConstruct ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
16662: LD_LOC 15
16666: PPUSH
16667: LD_LOC 6
16671: PUSH
16672: LD_INT 1
16674: ARRAY
16675: PPUSH
16676: LD_LOC 6
16680: PUSH
16681: LD_INT 2
16683: ARRAY
16684: PPUSH
16685: LD_LOC 6
16689: PUSH
16690: LD_INT 3
16692: ARRAY
16693: PPUSH
16694: LD_LOC 6
16698: PUSH
16699: LD_INT 4
16701: ARRAY
16702: PPUSH
16703: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
16707: GO 17434
16709: LD_OWVAR 1
16713: PUSH
16714: LD_INT 63000
16716: GREATER
16717: PUSH
16718: LD_EXP 139
16722: PUSH
16723: LD_INT 2
16725: LESS
16726: AND
16727: PUSH
16728: LD_LOC 15
16732: PPUSH
16733: LD_LOC 5
16737: PUSH
16738: LD_INT 1
16740: ARRAY
16741: PPUSH
16742: LD_LOC 5
16746: PUSH
16747: LD_INT 2
16749: ARRAY
16750: PPUSH
16751: LD_LOC 5
16755: PUSH
16756: LD_INT 3
16758: ARRAY
16759: PPUSH
16760: LD_LOC 5
16764: PUSH
16765: LD_INT 4
16767: ARRAY
16768: PPUSH
16769: CALL_OW 448
16773: AND
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16828
16780: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
16781: LD_LOC 15
16785: PPUSH
16786: LD_LOC 5
16790: PUSH
16791: LD_INT 1
16793: ARRAY
16794: PPUSH
16795: LD_LOC 5
16799: PUSH
16800: LD_INT 2
16802: ARRAY
16803: PPUSH
16804: LD_LOC 5
16808: PUSH
16809: LD_INT 3
16811: ARRAY
16812: PPUSH
16813: LD_LOC 5
16817: PUSH
16818: LD_INT 4
16820: ARRAY
16821: PPUSH
16822: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
16826: GO 17434
16828: LD_OWVAR 1
16832: PUSH
16833: LD_INT 63000
16835: GREATER
16836: PUSH
16837: LD_EXP 139
16841: PUSH
16842: LD_INT 4
16844: LESS
16845: AND
16846: PUSH
16847: LD_LOC 15
16851: PPUSH
16852: LD_LOC 7
16856: PUSH
16857: LD_INT 1
16859: ARRAY
16860: PPUSH
16861: LD_LOC 7
16865: PUSH
16866: LD_INT 2
16868: ARRAY
16869: PPUSH
16870: LD_LOC 7
16874: PUSH
16875: LD_INT 3
16877: ARRAY
16878: PPUSH
16879: LD_LOC 7
16883: PUSH
16884: LD_INT 4
16886: ARRAY
16887: PPUSH
16888: CALL_OW 448
16892: AND
16893: DOUBLE
16894: EQUAL
16895: IFTRUE 16899
16897: GO 16947
16899: POP
// begin ComConstruct ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
16900: LD_LOC 15
16904: PPUSH
16905: LD_LOC 7
16909: PUSH
16910: LD_INT 1
16912: ARRAY
16913: PPUSH
16914: LD_LOC 7
16918: PUSH
16919: LD_INT 2
16921: ARRAY
16922: PPUSH
16923: LD_LOC 7
16927: PUSH
16928: LD_INT 3
16930: ARRAY
16931: PPUSH
16932: LD_LOC 7
16936: PUSH
16937: LD_INT 4
16939: ARRAY
16940: PPUSH
16941: CALL_OW 125
// end ; ( tick < 20 20$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
16945: GO 17434
16947: LD_OWVAR 1
16951: PUSH
16952: LD_INT 42000
16954: LESS
16955: PUSH
16956: LD_VAR 0 2
16960: PUSH
16961: LD_INT 4
16963: LESS
16964: AND
16965: PUSH
16966: LD_LOC 15
16970: PPUSH
16971: LD_LOC 10
16975: PUSH
16976: LD_INT 1
16978: ARRAY
16979: PPUSH
16980: LD_LOC 10
16984: PUSH
16985: LD_INT 2
16987: ARRAY
16988: PPUSH
16989: LD_LOC 10
16993: PUSH
16994: LD_INT 3
16996: ARRAY
16997: PPUSH
16998: LD_LOC 10
17002: PUSH
17003: LD_INT 4
17005: ARRAY
17006: PPUSH
17007: CALL_OW 448
17011: AND
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17066
17018: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17019: LD_LOC 15
17023: PPUSH
17024: LD_LOC 10
17028: PUSH
17029: LD_INT 1
17031: ARRAY
17032: PPUSH
17033: LD_LOC 10
17037: PUSH
17038: LD_INT 2
17040: ARRAY
17041: PPUSH
17042: LD_LOC 10
17046: PUSH
17047: LD_INT 3
17049: ARRAY
17050: PPUSH
17051: LD_LOC 10
17055: PUSH
17056: LD_INT 4
17058: ARRAY
17059: PPUSH
17060: CALL_OW 125
// end ; ( tick > 20 20$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
17064: GO 17434
17066: LD_OWVAR 1
17070: PUSH
17071: LD_INT 42000
17073: GREATER
17074: PUSH
17075: LD_OWVAR 1
17079: PUSH
17080: LD_INT 63000
17082: LESS
17083: AND
17084: PUSH
17085: LD_VAR 0 2
17089: PUSH
17090: LD_INT 3
17092: LESS
17093: AND
17094: PUSH
17095: LD_LOC 15
17099: PPUSH
17100: LD_LOC 10
17104: PUSH
17105: LD_INT 1
17107: ARRAY
17108: PPUSH
17109: LD_LOC 10
17113: PUSH
17114: LD_INT 2
17116: ARRAY
17117: PPUSH
17118: LD_LOC 10
17122: PUSH
17123: LD_INT 3
17125: ARRAY
17126: PPUSH
17127: LD_LOC 10
17131: PUSH
17132: LD_INT 4
17134: ARRAY
17135: PPUSH
17136: CALL_OW 448
17140: AND
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17195
17147: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17148: LD_LOC 15
17152: PPUSH
17153: LD_LOC 10
17157: PUSH
17158: LD_INT 1
17160: ARRAY
17161: PPUSH
17162: LD_LOC 10
17166: PUSH
17167: LD_INT 2
17169: ARRAY
17170: PPUSH
17171: LD_LOC 10
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_LOC 10
17184: PUSH
17185: LD_INT 4
17187: ARRAY
17188: PPUSH
17189: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
17193: GO 17434
17195: LD_OWVAR 1
17199: PUSH
17200: LD_INT 63000
17202: GREATER
17203: PUSH
17204: LD_VAR 0 2
17208: PUSH
17209: LD_INT 4
17211: LESS
17212: AND
17213: PUSH
17214: LD_LOC 15
17218: PPUSH
17219: LD_LOC 11
17223: PUSH
17224: LD_INT 1
17226: ARRAY
17227: PPUSH
17228: LD_LOC 11
17232: PUSH
17233: LD_INT 2
17235: ARRAY
17236: PPUSH
17237: LD_LOC 11
17241: PUSH
17242: LD_INT 3
17244: ARRAY
17245: PPUSH
17246: LD_LOC 11
17250: PUSH
17251: LD_INT 4
17253: ARRAY
17254: PPUSH
17255: CALL_OW 448
17259: AND
17260: DOUBLE
17261: EQUAL
17262: IFTRUE 17266
17264: GO 17314
17266: POP
// begin ComConstruct ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
17267: LD_LOC 15
17271: PPUSH
17272: LD_LOC 11
17276: PUSH
17277: LD_INT 1
17279: ARRAY
17280: PPUSH
17281: LD_LOC 11
17285: PUSH
17286: LD_INT 2
17288: ARRAY
17289: PPUSH
17290: LD_LOC 11
17294: PUSH
17295: LD_INT 3
17297: ARRAY
17298: PPUSH
17299: LD_LOC 11
17303: PUSH
17304: LD_INT 4
17306: ARRAY
17307: PPUSH
17308: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 5 and CanBeConstructed ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
17312: GO 17434
17314: LD_OWVAR 1
17318: PUSH
17319: LD_INT 63000
17321: GREATER
17322: PUSH
17323: LD_VAR 0 2
17327: PUSH
17328: LD_INT 5
17330: LESS
17331: AND
17332: PUSH
17333: LD_LOC 15
17337: PPUSH
17338: LD_LOC 9
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PPUSH
17347: LD_LOC 9
17351: PUSH
17352: LD_INT 2
17354: ARRAY
17355: PPUSH
17356: LD_LOC 9
17360: PUSH
17361: LD_INT 3
17363: ARRAY
17364: PPUSH
17365: LD_LOC 9
17369: PUSH
17370: LD_INT 4
17372: ARRAY
17373: PPUSH
17374: CALL_OW 448
17378: AND
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17433
17385: POP
// begin ComConstruct ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
17386: LD_LOC 15
17390: PPUSH
17391: LD_LOC 9
17395: PUSH
17396: LD_INT 1
17398: ARRAY
17399: PPUSH
17400: LD_LOC 9
17404: PUSH
17405: LD_INT 2
17407: ARRAY
17408: PPUSH
17409: LD_LOC 9
17413: PUSH
17414: LD_INT 3
17416: ARRAY
17417: PPUSH
17418: LD_LOC 9
17422: PUSH
17423: LD_INT 4
17425: ARRAY
17426: PPUSH
17427: CALL_OW 125
// end ; end ;
17431: GO 17434
17433: POP
// enable ;
17434: ENABLE
// end ;
17435: PPOPN 2
17437: END
// every 0 0$5 trigger IsOk ( fact2 ) and fact2 in fact and IsIdle ( fact2 ) do var a , fact_attack ;
17438: LD_LOC 16
17442: PPUSH
17443: CALL_OW 302
17447: PUSH
17448: LD_LOC 16
17452: PUSH
17453: LD_EXP 124
17457: IN
17458: AND
17459: PUSH
17460: LD_LOC 16
17464: PPUSH
17465: CALL_OW 316
17469: AND
17470: IFFALSE 18492
17472: GO 17474
17474: DISABLE
17475: LD_INT 0
17477: PPUSH
17478: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
17479: LD_ADDR_VAR 0 2
17483: PUSH
17484: LD_INT 22
17486: PUSH
17487: LD_EXP 6
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 33
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PPUSH
17510: CALL_OW 69
17514: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17515: LD_INT 1
17517: PUSH
17518: LD_OWVAR 1
17522: PUSH
17523: LD_INT 31500
17525: LESS
17526: PUSH
17527: LD_EXP 139
17531: PUSH
17532: LD_INT 3
17534: LESS
17535: AND
17536: PUSH
17537: LD_LOC 16
17541: PPUSH
17542: LD_LOC 5
17546: PUSH
17547: LD_INT 1
17549: ARRAY
17550: PPUSH
17551: LD_LOC 5
17555: PUSH
17556: LD_INT 2
17558: ARRAY
17559: PPUSH
17560: LD_LOC 5
17564: PUSH
17565: LD_INT 3
17567: ARRAY
17568: PPUSH
17569: LD_LOC 5
17573: PUSH
17574: LD_INT 4
17576: ARRAY
17577: PPUSH
17578: CALL_OW 448
17582: AND
17583: DOUBLE
17584: EQUAL
17585: IFTRUE 17589
17587: GO 17637
17589: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17590: LD_LOC 16
17594: PPUSH
17595: LD_LOC 5
17599: PUSH
17600: LD_INT 1
17602: ARRAY
17603: PPUSH
17604: LD_LOC 5
17608: PUSH
17609: LD_INT 2
17611: ARRAY
17612: PPUSH
17613: LD_LOC 5
17617: PUSH
17618: LD_INT 3
17620: ARRAY
17621: PPUSH
17622: LD_LOC 5
17626: PUSH
17627: LD_INT 4
17629: ARRAY
17630: PPUSH
17631: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
17635: GO 18491
17637: LD_OWVAR 1
17641: PUSH
17642: LD_INT 31500
17644: GREATER
17645: PUSH
17646: LD_OWVAR 1
17650: PUSH
17651: LD_INT 63000
17653: LESS
17654: AND
17655: PUSH
17656: LD_EXP 139
17660: PUSH
17661: LD_INT 3
17663: LESS
17664: AND
17665: PUSH
17666: LD_LOC 16
17670: PPUSH
17671: LD_LOC 6
17675: PUSH
17676: LD_INT 1
17678: ARRAY
17679: PPUSH
17680: LD_LOC 6
17684: PUSH
17685: LD_INT 2
17687: ARRAY
17688: PPUSH
17689: LD_LOC 6
17693: PUSH
17694: LD_INT 3
17696: ARRAY
17697: PPUSH
17698: LD_LOC 6
17702: PUSH
17703: LD_INT 4
17705: ARRAY
17706: PPUSH
17707: CALL_OW 448
17711: AND
17712: DOUBLE
17713: EQUAL
17714: IFTRUE 17718
17716: GO 17766
17718: POP
// begin ComConstruct ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
17719: LD_LOC 16
17723: PPUSH
17724: LD_LOC 6
17728: PUSH
17729: LD_INT 1
17731: ARRAY
17732: PPUSH
17733: LD_LOC 6
17737: PUSH
17738: LD_INT 2
17740: ARRAY
17741: PPUSH
17742: LD_LOC 6
17746: PUSH
17747: LD_INT 3
17749: ARRAY
17750: PPUSH
17751: LD_LOC 6
17755: PUSH
17756: LD_INT 4
17758: ARRAY
17759: PPUSH
17760: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17764: GO 18491
17766: LD_OWVAR 1
17770: PUSH
17771: LD_INT 63000
17773: GREATER
17774: PUSH
17775: LD_EXP 139
17779: PUSH
17780: LD_INT 2
17782: LESS
17783: AND
17784: PUSH
17785: LD_LOC 16
17789: PPUSH
17790: LD_LOC 5
17794: PUSH
17795: LD_INT 1
17797: ARRAY
17798: PPUSH
17799: LD_LOC 5
17803: PUSH
17804: LD_INT 2
17806: ARRAY
17807: PPUSH
17808: LD_LOC 5
17812: PUSH
17813: LD_INT 3
17815: ARRAY
17816: PPUSH
17817: LD_LOC 5
17821: PUSH
17822: LD_INT 4
17824: ARRAY
17825: PPUSH
17826: CALL_OW 448
17830: AND
17831: DOUBLE
17832: EQUAL
17833: IFTRUE 17837
17835: GO 17885
17837: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17838: LD_LOC 16
17842: PPUSH
17843: LD_LOC 5
17847: PUSH
17848: LD_INT 1
17850: ARRAY
17851: PPUSH
17852: LD_LOC 5
17856: PUSH
17857: LD_INT 2
17859: ARRAY
17860: PPUSH
17861: LD_LOC 5
17865: PUSH
17866: LD_INT 3
17868: ARRAY
17869: PPUSH
17870: LD_LOC 5
17874: PUSH
17875: LD_INT 4
17877: ARRAY
17878: PPUSH
17879: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
17883: GO 18491
17885: LD_OWVAR 1
17889: PUSH
17890: LD_INT 63000
17892: GREATER
17893: PUSH
17894: LD_EXP 139
17898: PUSH
17899: LD_INT 4
17901: LESS
17902: AND
17903: PUSH
17904: LD_LOC 16
17908: PPUSH
17909: LD_LOC 7
17913: PUSH
17914: LD_INT 1
17916: ARRAY
17917: PPUSH
17918: LD_LOC 7
17922: PUSH
17923: LD_INT 2
17925: ARRAY
17926: PPUSH
17927: LD_LOC 7
17931: PUSH
17932: LD_INT 3
17934: ARRAY
17935: PPUSH
17936: LD_LOC 7
17940: PUSH
17941: LD_INT 4
17943: ARRAY
17944: PPUSH
17945: CALL_OW 448
17949: AND
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 18004
17956: POP
// begin ComConstruct ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
17957: LD_LOC 16
17961: PPUSH
17962: LD_LOC 7
17966: PUSH
17967: LD_INT 1
17969: ARRAY
17970: PPUSH
17971: LD_LOC 7
17975: PUSH
17976: LD_INT 2
17978: ARRAY
17979: PPUSH
17980: LD_LOC 7
17984: PUSH
17985: LD_INT 3
17987: ARRAY
17988: PPUSH
17989: LD_LOC 7
17993: PUSH
17994: LD_INT 4
17996: ARRAY
17997: PPUSH
17998: CALL_OW 125
// end ; ( tick < 15 15$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
18002: GO 18491
18004: LD_OWVAR 1
18008: PUSH
18009: LD_INT 31500
18011: LESS
18012: PUSH
18013: LD_VAR 0 2
18017: PUSH
18018: LD_INT 4
18020: LESS
18021: AND
18022: PUSH
18023: LD_LOC 16
18027: PPUSH
18028: LD_LOC 9
18032: PUSH
18033: LD_INT 1
18035: ARRAY
18036: PPUSH
18037: LD_LOC 9
18041: PUSH
18042: LD_INT 2
18044: ARRAY
18045: PPUSH
18046: LD_LOC 9
18050: PUSH
18051: LD_INT 3
18053: ARRAY
18054: PPUSH
18055: LD_LOC 9
18059: PUSH
18060: LD_INT 4
18062: ARRAY
18063: PPUSH
18064: CALL_OW 448
18068: AND
18069: DOUBLE
18070: EQUAL
18071: IFTRUE 18075
18073: GO 18123
18075: POP
// begin ComConstruct ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
18076: LD_LOC 16
18080: PPUSH
18081: LD_LOC 9
18085: PUSH
18086: LD_INT 1
18088: ARRAY
18089: PPUSH
18090: LD_LOC 9
18094: PUSH
18095: LD_INT 2
18097: ARRAY
18098: PPUSH
18099: LD_LOC 9
18103: PUSH
18104: LD_INT 3
18106: ARRAY
18107: PPUSH
18108: LD_LOC 9
18112: PUSH
18113: LD_INT 4
18115: ARRAY
18116: PPUSH
18117: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18121: GO 18491
18123: LD_OWVAR 1
18127: PUSH
18128: LD_INT 31500
18130: GREATER
18131: PUSH
18132: LD_OWVAR 1
18136: PUSH
18137: LD_INT 63000
18139: LESS
18140: AND
18141: PUSH
18142: LD_VAR 0 2
18146: PUSH
18147: LD_INT 3
18149: LESS
18150: AND
18151: PUSH
18152: LD_LOC 16
18156: PPUSH
18157: LD_LOC 10
18161: PUSH
18162: LD_INT 1
18164: ARRAY
18165: PPUSH
18166: LD_LOC 10
18170: PUSH
18171: LD_INT 2
18173: ARRAY
18174: PPUSH
18175: LD_LOC 10
18179: PUSH
18180: LD_INT 3
18182: ARRAY
18183: PPUSH
18184: LD_LOC 10
18188: PUSH
18189: LD_INT 4
18191: ARRAY
18192: PPUSH
18193: CALL_OW 448
18197: AND
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18252
18204: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18205: LD_LOC 16
18209: PPUSH
18210: LD_LOC 10
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PPUSH
18219: LD_LOC 10
18223: PUSH
18224: LD_INT 2
18226: ARRAY
18227: PPUSH
18228: LD_LOC 10
18232: PUSH
18233: LD_INT 3
18235: ARRAY
18236: PPUSH
18237: LD_LOC 10
18241: PUSH
18242: LD_INT 4
18244: ARRAY
18245: PPUSH
18246: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 2 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18250: GO 18491
18252: LD_OWVAR 1
18256: PUSH
18257: LD_INT 63000
18259: GREATER
18260: PUSH
18261: LD_VAR 0 2
18265: PUSH
18266: LD_INT 2
18268: LESS
18269: AND
18270: PUSH
18271: LD_LOC 16
18275: PPUSH
18276: LD_LOC 10
18280: PUSH
18281: LD_INT 1
18283: ARRAY
18284: PPUSH
18285: LD_LOC 10
18289: PUSH
18290: LD_INT 2
18292: ARRAY
18293: PPUSH
18294: LD_LOC 10
18298: PUSH
18299: LD_INT 3
18301: ARRAY
18302: PPUSH
18303: LD_LOC 10
18307: PUSH
18308: LD_INT 4
18310: ARRAY
18311: PPUSH
18312: CALL_OW 448
18316: AND
18317: DOUBLE
18318: EQUAL
18319: IFTRUE 18323
18321: GO 18371
18323: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18324: LD_LOC 16
18328: PPUSH
18329: LD_LOC 10
18333: PUSH
18334: LD_INT 1
18336: ARRAY
18337: PPUSH
18338: LD_LOC 10
18342: PUSH
18343: LD_INT 2
18345: ARRAY
18346: PPUSH
18347: LD_LOC 10
18351: PUSH
18352: LD_INT 3
18354: ARRAY
18355: PPUSH
18356: LD_LOC 10
18360: PUSH
18361: LD_INT 4
18363: ARRAY
18364: PPUSH
18365: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
18369: GO 18491
18371: LD_OWVAR 1
18375: PUSH
18376: LD_INT 63000
18378: GREATER
18379: PUSH
18380: LD_VAR 0 2
18384: PUSH
18385: LD_INT 4
18387: LESS
18388: AND
18389: PUSH
18390: LD_LOC 16
18394: PPUSH
18395: LD_LOC 11
18399: PUSH
18400: LD_INT 1
18402: ARRAY
18403: PPUSH
18404: LD_LOC 11
18408: PUSH
18409: LD_INT 2
18411: ARRAY
18412: PPUSH
18413: LD_LOC 11
18417: PUSH
18418: LD_INT 3
18420: ARRAY
18421: PPUSH
18422: LD_LOC 11
18426: PUSH
18427: LD_INT 4
18429: ARRAY
18430: PPUSH
18431: CALL_OW 448
18435: AND
18436: DOUBLE
18437: EQUAL
18438: IFTRUE 18442
18440: GO 18490
18442: POP
// begin ComConstruct ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
18443: LD_LOC 16
18447: PPUSH
18448: LD_LOC 11
18452: PUSH
18453: LD_INT 1
18455: ARRAY
18456: PPUSH
18457: LD_LOC 11
18461: PUSH
18462: LD_INT 2
18464: ARRAY
18465: PPUSH
18466: LD_LOC 11
18470: PUSH
18471: LD_INT 3
18473: ARRAY
18474: PPUSH
18475: LD_LOC 11
18479: PUSH
18480: LD_INT 4
18482: ARRAY
18483: PPUSH
18484: CALL_OW 125
// end ; end ;
18488: GO 18491
18490: POP
// enable ;
18491: ENABLE
// end ; end_of_file
18492: PPOPN 2
18494: END
// export builds1 , builds2 , builds3 , builds4 , builds5 ; export aici1 , aici2 , aici3 , aici4 , aici5 ; export a1eng ; export can_rebuild ; export can_repair ; export aici ; export stavi ; var upgradeable ; var trough_upgrade ; function UpgradeableTo ( b , up ) ; var i ; begin
18495: LD_INT 0
18497: PPUSH
18498: PPUSH
// result := 0 ;
18499: LD_ADDR_VAR 0 3
18503: PUSH
18504: LD_INT 0
18506: ST_TO_ADDR
// for i := 1 to upgradeable do
18507: LD_ADDR_VAR 0 4
18511: PUSH
18512: DOUBLE
18513: LD_INT 1
18515: DEC
18516: ST_TO_ADDR
18517: LD_LOC 17
18521: PUSH
18522: FOR_TO
18523: IFFALSE 18575
// if b = upgradeable [ i ] and up = trough_upgrade [ i ] then
18525: LD_VAR 0 1
18529: PUSH
18530: LD_LOC 17
18534: PUSH
18535: LD_VAR 0 4
18539: ARRAY
18540: EQUAL
18541: PUSH
18542: LD_VAR 0 2
18546: PUSH
18547: LD_LOC 18
18551: PUSH
18552: LD_VAR 0 4
18556: ARRAY
18557: EQUAL
18558: AND
18559: IFFALSE 18573
// begin result := up ;
18561: LD_ADDR_VAR 0 3
18565: PUSH
18566: LD_VAR 0 2
18570: ST_TO_ADDR
// break ;
18571: GO 18575
// end ;
18573: GO 18522
18575: POP
18576: POP
// end ;
18577: LD_VAR 0 3
18581: RET
// function IsUpgraded ( b ) ; begin
18582: LD_INT 0
18584: PPUSH
// result := 0 ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
18593: LD_VAR 0 1
18597: PUSH
18598: LD_LOC 18
18602: PUSH
18603: LD_INT 1
18605: ARRAY
18606: DOUBLE
18607: EQUAL
18608: IFTRUE 18612
18610: GO 18629
18612: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
18613: LD_ADDR_VAR 0 2
18617: PUSH
18618: LD_LOC 17
18622: PUSH
18623: LD_INT 1
18625: ARRAY
18626: ST_TO_ADDR
18627: GO 18754
18629: LD_LOC 18
18633: PUSH
18634: LD_INT 2
18636: ARRAY
18637: DOUBLE
18638: EQUAL
18639: IFTRUE 18643
18641: GO 18660
18643: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: LD_LOC 17
18653: PUSH
18654: LD_INT 2
18656: ARRAY
18657: ST_TO_ADDR
18658: GO 18754
18660: LD_LOC 18
18664: PUSH
18665: LD_INT 3
18667: ARRAY
18668: DOUBLE
18669: EQUAL
18670: IFTRUE 18674
18672: GO 18691
18674: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
18675: LD_ADDR_VAR 0 2
18679: PUSH
18680: LD_LOC 17
18684: PUSH
18685: LD_INT 3
18687: ARRAY
18688: ST_TO_ADDR
18689: GO 18754
18691: LD_LOC 18
18695: PUSH
18696: LD_INT 4
18698: ARRAY
18699: DOUBLE
18700: EQUAL
18701: IFTRUE 18705
18703: GO 18722
18705: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 5 ] :
18706: LD_ADDR_VAR 0 2
18710: PUSH
18711: LD_LOC 17
18715: PUSH
18716: LD_INT 4
18718: ARRAY
18719: ST_TO_ADDR
18720: GO 18754
18722: LD_LOC 18
18726: PUSH
18727: LD_INT 5
18729: ARRAY
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18753
18736: POP
// result := upgradeable [ 5 ] ; end ;
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_LOC 17
18746: PUSH
18747: LD_INT 5
18749: ARRAY
18750: ST_TO_ADDR
18751: GO 18754
18753: POP
// end ;
18754: LD_VAR 0 2
18758: RET
// function BasicFrom ( b ) ; begin
18759: LD_INT 0
18761: PPUSH
// result := b ;
18762: LD_ADDR_VAR 0 2
18766: PUSH
18767: LD_VAR 0 1
18771: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
18772: LD_VAR 0 1
18776: PUSH
18777: LD_LOC 18
18781: PUSH
18782: LD_INT 1
18784: ARRAY
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18808
18791: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
18792: LD_ADDR_VAR 0 2
18796: PUSH
18797: LD_LOC 17
18801: PUSH
18802: LD_INT 1
18804: ARRAY
18805: ST_TO_ADDR
18806: GO 18933
18808: LD_LOC 18
18812: PUSH
18813: LD_INT 2
18815: ARRAY
18816: DOUBLE
18817: EQUAL
18818: IFTRUE 18822
18820: GO 18839
18822: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
18823: LD_ADDR_VAR 0 2
18827: PUSH
18828: LD_LOC 17
18832: PUSH
18833: LD_INT 2
18835: ARRAY
18836: ST_TO_ADDR
18837: GO 18933
18839: LD_LOC 18
18843: PUSH
18844: LD_INT 3
18846: ARRAY
18847: DOUBLE
18848: EQUAL
18849: IFTRUE 18853
18851: GO 18870
18853: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
18854: LD_ADDR_VAR 0 2
18858: PUSH
18859: LD_LOC 17
18863: PUSH
18864: LD_INT 3
18866: ARRAY
18867: ST_TO_ADDR
18868: GO 18933
18870: LD_LOC 18
18874: PUSH
18875: LD_INT 4
18877: ARRAY
18878: DOUBLE
18879: EQUAL
18880: IFTRUE 18884
18882: GO 18901
18884: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 6 ] :
18885: LD_ADDR_VAR 0 2
18889: PUSH
18890: LD_LOC 17
18894: PUSH
18895: LD_INT 4
18897: ARRAY
18898: ST_TO_ADDR
18899: GO 18933
18901: LD_LOC 18
18905: PUSH
18906: LD_INT 6
18908: ARRAY
18909: DOUBLE
18910: EQUAL
18911: IFTRUE 18915
18913: GO 18932
18915: POP
// result := upgradeable [ 6 ] ; end ;
18916: LD_ADDR_VAR 0 2
18920: PUSH
18921: LD_LOC 17
18925: PUSH
18926: LD_INT 6
18928: ARRAY
18929: ST_TO_ADDR
18930: GO 18933
18932: POP
// end ;
18933: LD_VAR 0 2
18937: RET
// export function place_b ; var i ; begin
18938: LD_INT 0
18940: PPUSH
18941: PPUSH
// upgradeable := [ b_depot , b_workshop , b_armoury , b_lab , b_lab_half , b_lab ] ;
18942: LD_ADDR_LOC 17
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 4
18955: PUSH
18956: LD_INT 6
18958: PUSH
18959: LD_INT 7
18961: PUSH
18962: LD_INT 6
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: ST_TO_ADDR
// trough_upgrade := [ b_warehouse , b_factory , b_barracks , b_lab_half , b_lab_full , b_lab_full ] ;
18973: LD_ADDR_LOC 18
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: LD_INT 3
18983: PUSH
18984: LD_INT 5
18986: PUSH
18987: LD_INT 7
18989: PUSH
18990: LD_INT 8
18992: PUSH
18993: LD_INT 8
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: ST_TO_ADDR
// aici1 := [ [ [ 0 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 2 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 4 ] , [ 1 , class_scientistic , 3 ] , [ 3 , class_soldier , 5 ] , [ 0 , class_mechanic , 0 ] ] ] [ difficulty ] ;
19004: LD_ADDR_EXP 109
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: LD_INT 2
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: LD_INT 4
19028: PUSH
19029: LD_INT 3
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 0
19053: PUSH
19054: LD_INT 3
19056: PUSH
19057: LD_INT 0
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: LD_INT 4
19090: PUSH
19091: LD_INT 3
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: LD_INT 3
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 3
19118: PUSH
19119: LD_INT 0
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 4
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: LD_INT 4
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 3
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: LD_INT 5
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 3
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: PUSH
19200: LD_OWVAR 67
19204: ARRAY
19205: ST_TO_ADDR
// aici2 := [ [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 7 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] ] [ difficulty ] ;
19206: LD_ADDR_EXP 110
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: LD_INT 6
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 4
19230: PUSH
19231: LD_INT 4
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 3
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 0
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: LD_INT 3
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: LD_INT 6
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 0
19289: PUSH
19290: LD_INT 4
19292: PUSH
19293: LD_INT 5
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 3
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: LD_INT 3
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 7
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: LD_INT 4
19354: PUSH
19355: LD_INT 5
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 2
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: LD_INT 3
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: LD_INT 3
19382: PUSH
19383: LD_INT 3
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_OWVAR 67
19406: ARRAY
19407: ST_TO_ADDR
// aici3 := [ [ [ 2 , class_engineer , 5 ] , [ 3 , class_scientistic , 3 ] , [ 6 , class_soldier , 4 ] , [ 5 , class_mechanic , 5 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 5 ] , [ 5 , class_mechanic , 6 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 6 ] , [ 5 , class_mechanic , 7 ] ] ] [ difficulty ] ;
19408: LD_ADDR_EXP 111
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: LD_INT 5
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 3
19429: PUSH
19430: LD_INT 4
19432: PUSH
19433: LD_INT 3
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 6
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: LD_INT 4
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 5
19457: PUSH
19458: LD_INT 3
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: LD_INT 6
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 4
19494: PUSH
19495: LD_INT 4
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 6
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: LD_INT 5
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 5
19519: PUSH
19520: LD_INT 3
19522: PUSH
19523: LD_INT 6
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: LD_INT 2
19542: PUSH
19543: LD_INT 6
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 3
19553: PUSH
19554: LD_INT 4
19556: PUSH
19557: LD_INT 4
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 6
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: LD_INT 6
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 5
19581: PUSH
19582: LD_INT 3
19584: PUSH
19585: LD_INT 7
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: LD_OWVAR 67
19608: ARRAY
19609: ST_TO_ADDR
// aici4 := [ [ [ 0 , class_engineer , 5 ] , [ 0 , class_scientistic , 3 ] , [ 8 , class_soldier , 3 ] , [ 3 , class_mechanic , 3 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 8 , class_soldier , 4 ] , [ 3 , class_mechanic , 4 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 8 , class_soldier , 5 ] , [ 3 , class_mechanic , 5 ] ] ] [ difficulty ] ;
19610: LD_ADDR_EXP 112
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 5
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: LD_INT 4
19634: PUSH
19635: LD_INT 3
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 8
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: LD_INT 3
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 3
19659: PUSH
19660: LD_INT 3
19662: PUSH
19663: LD_INT 3
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: LIST
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: LD_INT 6
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: LD_INT 4
19696: PUSH
19697: LD_INT 4
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 8
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 4
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 3
19721: PUSH
19722: LD_INT 3
19724: PUSH
19725: LD_INT 4
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: LD_INT 6
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: LD_INT 4
19758: PUSH
19759: LD_INT 5
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 8
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 5
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 3
19783: PUSH
19784: LD_INT 3
19786: PUSH
19787: LD_INT 5
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: LD_OWVAR 67
19810: ARRAY
19811: ST_TO_ADDR
// aici5 := [ [ [ 2 , class_soldier , 5 ] ] , [ [ 2 , class_soldier , 6 ] ] , [ [ 2 , class_soldier , 7 ] ] ] [ difficulty ] ;
19812: LD_ADDR_EXP 113
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: LD_INT 5
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: LIST
19830: PUSH
19831: EMPTY
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: LD_INT 6
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: PUSH
19851: LD_INT 2
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: LD_INT 7
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: PUSH
19873: LD_OWVAR 67
19877: ARRAY
19878: ST_TO_ADDR
// builds1 := [ [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 0 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 0 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_light_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ] [ difficulty ] ;
19879: LD_ADDR_EXP 104
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: LD_INT 85
19889: PUSH
19890: LD_INT 86
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: EMPTY
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: LD_INT 0
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 31
19927: PUSH
19928: LD_INT 100
19930: PUSH
19931: LD_INT 104
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: EMPTY
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 31
19968: PUSH
19969: LD_INT 85
19971: PUSH
19972: LD_INT 91
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: PUSH
19980: LD_INT 0
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 32
20009: PUSH
20010: LD_INT 91
20012: PUSH
20013: LD_INT 101
20015: PUSH
20016: LD_INT 0
20018: PUSH
20019: LD_INT 5
20021: PUSH
20022: EMPTY
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 4
20054: PUSH
20055: LD_INT 91
20057: PUSH
20058: LD_INT 86
20060: PUSH
20061: LD_INT 3
20063: PUSH
20064: EMPTY
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 30
20095: PUSH
20096: LD_INT 101
20098: PUSH
20099: LD_INT 93
20101: PUSH
20102: LD_INT 3
20104: PUSH
20105: EMPTY
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: LD_INT 0
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 29
20136: PUSH
20137: LD_INT 87
20139: PUSH
20140: LD_INT 84
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 26
20177: PUSH
20178: LD_INT 101
20180: PUSH
20181: LD_INT 96
20183: PUSH
20184: LD_INT 3
20186: PUSH
20187: EMPTY
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: LD_INT 85
20231: PUSH
20232: LD_INT 86
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: EMPTY
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 31
20269: PUSH
20270: LD_INT 100
20272: PUSH
20273: LD_INT 104
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 31
20310: PUSH
20311: LD_INT 85
20313: PUSH
20314: LD_INT 91
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: EMPTY
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 32
20351: PUSH
20352: LD_INT 91
20354: PUSH
20355: LD_INT 101
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: EMPTY
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 1
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 4
20396: PUSH
20397: LD_INT 91
20399: PUSH
20400: LD_INT 86
20402: PUSH
20403: LD_INT 3
20405: PUSH
20406: EMPTY
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 30
20437: PUSH
20438: LD_INT 101
20440: PUSH
20441: LD_INT 93
20443: PUSH
20444: LD_INT 3
20446: PUSH
20447: EMPTY
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 29
20478: PUSH
20479: LD_INT 87
20481: PUSH
20482: LD_INT 84
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: EMPTY
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 26
20519: PUSH
20520: LD_INT 101
20522: PUSH
20523: LD_INT 96
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: EMPTY
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 85
20573: PUSH
20574: LD_INT 86
20576: PUSH
20577: LD_INT 2
20579: PUSH
20580: EMPTY
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 31
20611: PUSH
20612: LD_INT 100
20614: PUSH
20615: LD_INT 104
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 31
20652: PUSH
20653: LD_INT 85
20655: PUSH
20656: LD_INT 91
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 32
20693: PUSH
20694: LD_INT 91
20696: PUSH
20697: LD_INT 101
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: LD_INT 4
20705: PUSH
20706: EMPTY
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 1
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 4
20738: PUSH
20739: LD_INT 91
20741: PUSH
20742: LD_INT 86
20744: PUSH
20745: LD_INT 3
20747: PUSH
20748: EMPTY
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 30
20779: PUSH
20780: LD_INT 101
20782: PUSH
20783: LD_INT 93
20785: PUSH
20786: LD_INT 3
20788: PUSH
20789: EMPTY
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 29
20820: PUSH
20821: LD_INT 87
20823: PUSH
20824: LD_INT 84
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: LD_INT 0
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 26
20861: PUSH
20862: LD_INT 101
20864: PUSH
20865: LD_INT 96
20867: PUSH
20868: LD_INT 3
20870: PUSH
20871: EMPTY
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: PUSH
20915: LD_OWVAR 67
20919: ARRAY
20920: ST_TO_ADDR
// builds2 := [ [ b_workshop , 60 , 9 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 53 , 13 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_power , 50 , 3 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_depot , 46 , 5 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_armoury , 59 , 9 , 4 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 50 , 14 , 0 , [ ] , 1 , 0 , 0 , 1 , 1 ] ] ;
20921: LD_ADDR_EXP 105
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 60
20931: PUSH
20932: LD_INT 9
20934: PUSH
20935: LD_INT 4
20937: PUSH
20938: EMPTY
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: LD_INT 0
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 29
20969: PUSH
20970: LD_INT 53
20972: PUSH
20973: LD_INT 13
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: EMPTY
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 26
21010: PUSH
21011: LD_INT 50
21013: PUSH
21014: LD_INT 3
21016: PUSH
21017: LD_INT 4
21019: PUSH
21020: EMPTY
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 46
21054: PUSH
21055: LD_INT 5
21057: PUSH
21058: LD_INT 2
21060: PUSH
21061: EMPTY
21062: PUSH
21063: LD_INT 1
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 4
21092: PUSH
21093: LD_INT 59
21095: PUSH
21096: LD_INT 9
21098: PUSH
21099: LD_INT 4
21101: PUSH
21102: EMPTY
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 31
21133: PUSH
21134: LD_INT 50
21136: PUSH
21137: LD_INT 14
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: LD_INT 0
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: ST_TO_ADDR
// if difficulty = 1 then
21180: LD_OWVAR 67
21184: PUSH
21185: LD_INT 1
21187: EQUAL
21188: IFFALSE 21987
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] else
21190: LD_ADDR_EXP 106
21194: PUSH
21195: LD_INT 31
21197: PUSH
21198: LD_INT 41
21200: PUSH
21201: LD_INT 23
21203: PUSH
21204: LD_INT 5
21206: PUSH
21207: EMPTY
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: LD_INT 0
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 32
21238: PUSH
21239: LD_INT 18
21241: PUSH
21242: LD_INT 8
21244: PUSH
21245: LD_INT 4
21247: PUSH
21248: LD_INT 4
21250: PUSH
21251: EMPTY
21252: LIST
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 32
21283: PUSH
21284: LD_INT 25
21286: PUSH
21287: LD_INT 13
21289: PUSH
21290: LD_INT 4
21292: PUSH
21293: LD_INT 5
21295: PUSH
21296: EMPTY
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 32
21328: PUSH
21329: LD_INT 17
21331: PUSH
21332: LD_INT 18
21334: PUSH
21335: LD_INT 4
21337: PUSH
21338: LD_INT 4
21340: PUSH
21341: EMPTY
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 32
21373: PUSH
21374: LD_INT 31
21376: PUSH
21377: LD_INT 49
21379: PUSH
21380: LD_INT 5
21382: PUSH
21383: LD_INT 4
21385: PUSH
21386: EMPTY
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 32
21418: PUSH
21419: LD_INT 35
21421: PUSH
21422: LD_INT 44
21424: PUSH
21425: LD_INT 5
21427: PUSH
21428: LD_INT 5
21430: PUSH
21431: EMPTY
21432: LIST
21433: PUSH
21434: LD_INT 1
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 32
21463: PUSH
21464: LD_INT 34
21466: PUSH
21467: LD_INT 26
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: LD_INT 11
21475: PUSH
21476: EMPTY
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 30
21508: PUSH
21509: LD_INT 29
21511: PUSH
21512: LD_INT 30
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: EMPTY
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 29
21549: PUSH
21550: LD_INT 39
21552: PUSH
21553: LD_INT 37
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: EMPTY
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 0
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 28
21590: PUSH
21591: LD_INT 24
21593: PUSH
21594: LD_INT 44
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: EMPTY
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 28
21631: PUSH
21632: LD_INT 27
21634: PUSH
21635: LD_INT 26
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: EMPTY
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 32
21675: PUSH
21676: LD_INT 35
21678: PUSH
21679: LD_INT 4
21681: PUSH
21682: EMPTY
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 8
21713: PUSH
21714: LD_INT 21
21716: PUSH
21717: LD_INT 35
21719: PUSH
21720: LD_INT 1
21722: PUSH
21723: LD_INT 15
21725: PUSH
21726: LD_INT 10
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: LD_INT 0
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: LD_INT 18
21765: PUSH
21766: LD_INT 25
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: EMPTY
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 36
21803: PUSH
21804: LD_INT 22
21806: PUSH
21807: LD_INT 40
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: EMPTY
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: LD_INT 0
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 16
21844: PUSH
21845: LD_INT 14
21847: PUSH
21848: LD_INT 21
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: EMPTY
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 17
21885: PUSH
21886: LD_INT 15
21888: PUSH
21889: LD_INT 25
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: LD_INT 0
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 20
21926: PUSH
21927: LD_INT 18
21929: PUSH
21930: LD_INT 29
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: EMPTY
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: ST_TO_ADDR
21985: GO 22782
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ;
21987: LD_ADDR_EXP 106
21991: PUSH
21992: LD_INT 31
21994: PUSH
21995: LD_INT 41
21997: PUSH
21998: LD_INT 23
22000: PUSH
22001: LD_INT 5
22003: PUSH
22004: EMPTY
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 32
22035: PUSH
22036: LD_INT 18
22038: PUSH
22039: LD_INT 8
22041: PUSH
22042: LD_INT 4
22044: PUSH
22045: LD_INT 4
22047: PUSH
22048: EMPTY
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 32
22080: PUSH
22081: LD_INT 25
22083: PUSH
22084: LD_INT 13
22086: PUSH
22087: LD_INT 4
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: EMPTY
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 32
22125: PUSH
22126: LD_INT 17
22128: PUSH
22129: LD_INT 18
22131: PUSH
22132: LD_INT 4
22134: PUSH
22135: LD_INT 4
22137: PUSH
22138: EMPTY
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 32
22170: PUSH
22171: LD_INT 31
22173: PUSH
22174: LD_INT 49
22176: PUSH
22177: LD_INT 5
22179: PUSH
22180: LD_INT 4
22182: PUSH
22183: EMPTY
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 32
22215: PUSH
22216: LD_INT 35
22218: PUSH
22219: LD_INT 44
22221: PUSH
22222: LD_INT 5
22224: PUSH
22225: LD_INT 5
22227: PUSH
22228: EMPTY
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 32
22260: PUSH
22261: LD_INT 34
22263: PUSH
22264: LD_INT 26
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: LD_INT 11
22272: PUSH
22273: EMPTY
22274: LIST
22275: PUSH
22276: LD_INT 1
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 30
22305: PUSH
22306: LD_INT 29
22308: PUSH
22309: LD_INT 30
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: EMPTY
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 29
22346: PUSH
22347: LD_INT 39
22349: PUSH
22350: LD_INT 37
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: EMPTY
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 28
22387: PUSH
22388: LD_INT 24
22390: PUSH
22391: LD_INT 44
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: EMPTY
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 28
22428: PUSH
22429: LD_INT 27
22431: PUSH
22432: LD_INT 26
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: EMPTY
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: LD_INT 32
22472: PUSH
22473: LD_INT 35
22475: PUSH
22476: LD_INT 4
22478: PUSH
22479: EMPTY
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 8
22510: PUSH
22511: LD_INT 21
22513: PUSH
22514: LD_INT 35
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 15
22522: PUSH
22523: LD_INT 10
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: LD_INT 18
22562: PUSH
22563: LD_INT 25
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: EMPTY
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 36
22600: PUSH
22601: LD_INT 22
22603: PUSH
22604: LD_INT 40
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 16
22641: PUSH
22642: LD_INT 14
22644: PUSH
22645: LD_INT 21
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: EMPTY
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 17
22682: PUSH
22683: LD_INT 15
22685: PUSH
22686: LD_INT 25
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: EMPTY
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 20
22723: PUSH
22724: LD_INT 18
22726: PUSH
22727: LD_INT 29
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: ST_TO_ADDR
// builds4 := [ [ b_factory , 45 , 57 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 42 , 54 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 45 , 53 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_noncombat , 48 , 57 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 49 , 61 , 5 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 39 , 50 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_barracks , 53 , 67 , 5 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 65 , 5 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 68 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 52 , 47 , 3 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 60 , 59 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] ] ;
22782: LD_ADDR_EXP 107
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: LD_INT 45
22792: PUSH
22793: LD_INT 57
22795: PUSH
22796: LD_INT 3
22798: PUSH
22799: EMPTY
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 16
22830: PUSH
22831: LD_INT 42
22833: PUSH
22834: LD_INT 54
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 0
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 17
22871: PUSH
22872: LD_INT 45
22874: PUSH
22875: LD_INT 53
22877: PUSH
22878: LD_INT 3
22880: PUSH
22881: EMPTY
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 19
22912: PUSH
22913: LD_INT 48
22915: PUSH
22916: LD_INT 57
22918: PUSH
22919: LD_INT 4
22921: PUSH
22922: EMPTY
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 20
22953: PUSH
22954: LD_INT 49
22956: PUSH
22957: LD_INT 61
22959: PUSH
22960: LD_INT 5
22962: PUSH
22963: EMPTY
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 26
22994: PUSH
22995: LD_INT 39
22997: PUSH
22998: LD_INT 50
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: EMPTY
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 5
23035: PUSH
23036: LD_INT 53
23038: PUSH
23039: LD_INT 67
23041: PUSH
23042: LD_INT 5
23044: PUSH
23045: EMPTY
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 32
23076: PUSH
23077: LD_INT 57
23079: PUSH
23080: LD_INT 65
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: LD_INT 11
23088: PUSH
23089: EMPTY
23090: LIST
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 32
23121: PUSH
23122: LD_INT 57
23124: PUSH
23125: LD_INT 68
23127: PUSH
23128: LD_INT 5
23130: PUSH
23131: LD_INT 5
23133: PUSH
23134: EMPTY
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 32
23166: PUSH
23167: LD_INT 52
23169: PUSH
23170: LD_INT 47
23172: PUSH
23173: LD_INT 3
23175: PUSH
23176: LD_INT 4
23178: PUSH
23179: EMPTY
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 32
23211: PUSH
23212: LD_INT 60
23214: PUSH
23215: LD_INT 59
23217: PUSH
23218: LD_INT 4
23220: PUSH
23221: LD_INT 4
23223: PUSH
23224: EMPTY
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: ST_TO_ADDR
// builds5 := [ [ b_breastwork , 67 , 34 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 83 , 38 , 1 , [ ] , 1 , 0 , 0 , 1 , 0 ] ] ;
23267: LD_ADDR_EXP 108
23271: PUSH
23272: LD_INT 31
23274: PUSH
23275: LD_INT 67
23277: PUSH
23278: LD_INT 34
23280: PUSH
23281: LD_INT 5
23283: PUSH
23284: EMPTY
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 31
23315: PUSH
23316: LD_INT 83
23318: PUSH
23319: LD_INT 38
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: EMPTY
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 0
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: ST_TO_ADDR
// can_repair := [ ] ;
23358: LD_ADDR_EXP 116
23362: PUSH
23363: EMPTY
23364: ST_TO_ADDR
// can_rebuild := [ ] ;
23365: LD_ADDR_EXP 115
23369: PUSH
23370: EMPTY
23371: ST_TO_ADDR
// fort := [ ] ;
23372: LD_ADDR_EXP 119
23376: PUSH
23377: EMPTY
23378: ST_TO_ADDR
// SetResourceVisibility ( 101 , 93 , ai ) ;
23379: LD_INT 101
23381: PPUSH
23382: LD_INT 93
23384: PPUSH
23385: LD_EXP 6
23389: PPUSH
23390: CALL_OW 441
// b1 := place_base ( builds1 , kolik_je_v_depotu , 11 , 0 , b1_levels ) ;
23394: LD_ADDR_EXP 128
23398: PUSH
23399: LD_EXP 104
23403: PPUSH
23404: LD_EXP 35
23408: PPUSH
23409: LD_INT 11
23411: PPUSH
23412: LD_INT 0
23414: PPUSH
23415: LD_EXP 19
23419: PPUSH
23420: CALL 23935 0 5
23424: ST_TO_ADDR
// b2 := place_base ( builds2 , 250 , 94 , kolik_je_sib_v_hornim , b2_levels ) ;
23425: LD_ADDR_EXP 129
23429: PUSH
23430: LD_EXP 105
23434: PPUSH
23435: LD_INT 250
23437: PPUSH
23438: LD_INT 94
23440: PPUSH
23441: LD_EXP 36
23445: PPUSH
23446: LD_EXP 20
23450: PPUSH
23451: CALL 23935 0 5
23455: ST_TO_ADDR
// b3 := place_base ( builds3 , 4180 , 6400 , 500 , b3_levels ) ;
23456: LD_ADDR_EXP 130
23460: PUSH
23461: LD_EXP 106
23465: PPUSH
23466: LD_INT 4180
23468: PPUSH
23469: LD_INT 6400
23471: PPUSH
23472: LD_INT 500
23474: PPUSH
23475: LD_EXP 21
23479: PPUSH
23480: CALL 23935 0 5
23484: ST_TO_ADDR
// b4 := place_base ( builds4 , 0 , 0 , 0 , b4_levels ) ;
23485: LD_ADDR_EXP 131
23489: PUSH
23490: LD_EXP 107
23494: PPUSH
23495: LD_INT 0
23497: PPUSH
23498: LD_INT 0
23500: PPUSH
23501: LD_INT 0
23503: PPUSH
23504: LD_EXP 22
23508: PPUSH
23509: CALL 23935 0 5
23513: ST_TO_ADDR
// b5 := place_base ( builds5 , 0 , 0 , 0 , b5_levels ) ;
23514: LD_ADDR_EXP 132
23518: PUSH
23519: LD_EXP 108
23523: PPUSH
23524: LD_INT 0
23526: PPUSH
23527: LD_INT 0
23529: PPUSH
23530: LD_INT 0
23532: PPUSH
23533: LD_EXP 23
23537: PPUSH
23538: CALL 23935 0 5
23542: ST_TO_ADDR
// if fast_braketrough then
23543: LD_EXP 78
23547: IFFALSE 23580
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury ) else
23549: LD_EXP 128
23553: PPUSH
23554: LD_INT 30
23556: PUSH
23557: LD_INT 4
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PPUSH
23564: CALL_OW 72
23568: PPUSH
23569: LD_EXP 37
23573: PPUSH
23574: CALL_OW 234
23578: GO 23609
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury2 ) ;
23580: LD_EXP 128
23584: PPUSH
23585: LD_INT 30
23587: PUSH
23588: LD_INT 4
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PPUSH
23595: CALL_OW 72
23599: PPUSH
23600: LD_EXP 38
23604: PPUSH
23605: CALL_OW 234
// a1 := place_amici ( aici1 , abase1 ) ;
23609: LD_ADDR_EXP 133
23613: PUSH
23614: LD_EXP 109
23618: PPUSH
23619: LD_INT 9
23621: PPUSH
23622: CALL 24524 0 2
23626: ST_TO_ADDR
// for i in a1 do
23627: LD_ADDR_VAR 0 2
23631: PUSH
23632: LD_EXP 133
23636: PUSH
23637: FOR_IN
23638: IFFALSE 23654
// SetTag ( i , 1 ) ;
23640: LD_VAR 0 2
23644: PPUSH
23645: LD_INT 1
23647: PPUSH
23648: CALL_OW 109
23652: GO 23637
23654: POP
23655: POP
// a2 := place_amici ( aici2 , abase2 ) ;
23656: LD_ADDR_EXP 134
23660: PUSH
23661: LD_EXP 110
23665: PPUSH
23666: LD_INT 8
23668: PPUSH
23669: CALL 24524 0 2
23673: ST_TO_ADDR
// for i in a2 do
23674: LD_ADDR_VAR 0 2
23678: PUSH
23679: LD_EXP 134
23683: PUSH
23684: FOR_IN
23685: IFFALSE 23701
// SetTag ( i , 2 ) ;
23687: LD_VAR 0 2
23691: PPUSH
23692: LD_INT 2
23694: PPUSH
23695: CALL_OW 109
23699: GO 23684
23701: POP
23702: POP
// a3 := place_amici ( aici3 , abase3 ) ;
23703: LD_ADDR_EXP 135
23707: PUSH
23708: LD_EXP 111
23712: PPUSH
23713: LD_INT 6
23715: PPUSH
23716: CALL 24524 0 2
23720: ST_TO_ADDR
// for i in a3 do
23721: LD_ADDR_VAR 0 2
23725: PUSH
23726: LD_EXP 135
23730: PUSH
23731: FOR_IN
23732: IFFALSE 23748
// SetTag ( i , 3 ) ;
23734: LD_VAR 0 2
23738: PPUSH
23739: LD_INT 3
23741: PPUSH
23742: CALL_OW 109
23746: GO 23731
23748: POP
23749: POP
// a4 := place_amici ( aici4 , abase4 ) ;
23750: LD_ADDR_EXP 136
23754: PUSH
23755: LD_EXP 112
23759: PPUSH
23760: LD_INT 7
23762: PPUSH
23763: CALL 24524 0 2
23767: ST_TO_ADDR
// for i in a4 do
23768: LD_ADDR_VAR 0 2
23772: PUSH
23773: LD_EXP 136
23777: PUSH
23778: FOR_IN
23779: IFFALSE 23795
// SetTag ( i , 4 ) ;
23781: LD_VAR 0 2
23785: PPUSH
23786: LD_INT 4
23788: PPUSH
23789: CALL_OW 109
23793: GO 23778
23795: POP
23796: POP
// a5 := place_amici ( aici5 , abase5 ) ;
23797: LD_ADDR_EXP 137
23801: PUSH
23802: LD_EXP 113
23806: PPUSH
23807: LD_INT 10
23809: PPUSH
23810: CALL 24524 0 2
23814: ST_TO_ADDR
// for i in a5 do
23815: LD_ADDR_VAR 0 2
23819: PUSH
23820: LD_EXP 137
23824: PUSH
23825: FOR_IN
23826: IFFALSE 23842
// SetTag ( i , 5 ) ;
23828: LD_VAR 0 2
23832: PPUSH
23833: LD_INT 5
23835: PPUSH
23836: CALL_OW 109
23840: GO 23825
23842: POP
23843: POP
// a1eng := UnitFilter ( a1 , [ [ f_class , class_engineer ] ] ) ;
23844: LD_ADDR_EXP 114
23848: PUSH
23849: LD_EXP 133
23853: PPUSH
23854: LD_INT 25
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: PPUSH
23867: CALL_OW 72
23871: ST_TO_ADDR
// if a1eng then
23872: LD_EXP 114
23876: IFFALSE 23892
// a1eng := a1eng [ 1 ] ;
23878: LD_ADDR_EXP 114
23882: PUSH
23883: LD_EXP 114
23887: PUSH
23888: LD_INT 1
23890: ARRAY
23891: ST_TO_ADDR
// InitUc ;
23892: CALL_OW 18
// InitHc ;
23896: CALL_OW 19
// uc_side := ai ;
23900: LD_ADDR_OWVAR 20
23904: PUSH
23905: LD_EXP 6
23909: ST_TO_ADDR
// uc_nation := americans ;
23910: LD_ADDR_OWVAR 21
23914: PUSH
23915: LD_EXP 3
23919: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
23920: LD_INT 1
23922: PPUSH
23923: LD_INT 10
23925: PPUSH
23926: CALL_OW 381
// end ;
23930: LD_VAR 0 1
23934: RET
// function place_base ( builds , cans , oil , sib , levels ) ; var i , base , b , tb , bb ; begin
23935: LD_INT 0
23937: PPUSH
23938: PPUSH
23939: PPUSH
23940: PPUSH
23941: PPUSH
23942: PPUSH
// InitUc ;
23943: CALL_OW 18
// InitBc ;
23947: CALL_OW 21
// uc_side := americans ;
23951: LD_ADDR_OWVAR 20
23955: PUSH
23956: LD_EXP 3
23960: ST_TO_ADDR
// uc_nation := nation_american ;
23961: LD_ADDR_OWVAR 21
23965: PUSH
23966: LD_INT 1
23968: ST_TO_ADDR
// b := [ ] ;
23969: LD_ADDR_VAR 0 9
23973: PUSH
23974: EMPTY
23975: ST_TO_ADDR
// for i in builds do
23976: LD_ADDR_VAR 0 7
23980: PUSH
23981: LD_VAR 0 1
23985: PUSH
23986: FOR_IN
23987: IFFALSE 24388
// begin tb := get_build ( i [ 2 ] , i [ 3 ] , 0 ) ;
23989: LD_ADDR_VAR 0 10
23993: PUSH
23994: LD_VAR 0 7
23998: PUSH
23999: LD_INT 2
24001: ARRAY
24002: PPUSH
24003: LD_VAR 0 7
24007: PUSH
24008: LD_INT 3
24010: ARRAY
24011: PPUSH
24012: LD_INT 0
24014: PPUSH
24015: CALL 25870 0 3
24019: ST_TO_ADDR
// if tb and not i [ 6 ] then
24020: LD_VAR 0 10
24024: PUSH
24025: LD_VAR 0 7
24029: PUSH
24030: LD_INT 6
24032: ARRAY
24033: NOT
24034: AND
24035: IFFALSE 24046
// RemoveUnit ( tb ) ;
24037: LD_VAR 0 10
24041: PPUSH
24042: CALL_OW 64
// if not tb and i [ 6 ] then
24046: LD_VAR 0 10
24050: NOT
24051: PUSH
24052: LD_VAR 0 7
24056: PUSH
24057: LD_INT 6
24059: ARRAY
24060: AND
24061: IFFALSE 24222
// begin bc_type := i [ 1 ] ;
24063: LD_ADDR_OWVAR 42
24067: PUSH
24068: LD_VAR 0 7
24072: PUSH
24073: LD_INT 1
24075: ARRAY
24076: ST_TO_ADDR
// if bc_type = b_lab or bc_type = b_lab_half or bc_type = b_lab_full then
24077: LD_OWVAR 42
24081: PUSH
24082: LD_INT 6
24084: EQUAL
24085: PUSH
24086: LD_OWVAR 42
24090: PUSH
24091: LD_INT 7
24093: EQUAL
24094: OR
24095: PUSH
24096: LD_OWVAR 42
24100: PUSH
24101: LD_INT 8
24103: EQUAL
24104: OR
24105: IFFALSE 24143
// begin bc_kind1 := i [ 5 ] [ 1 ] ;
24107: LD_ADDR_OWVAR 44
24111: PUSH
24112: LD_VAR 0 7
24116: PUSH
24117: LD_INT 5
24119: ARRAY
24120: PUSH
24121: LD_INT 1
24123: ARRAY
24124: ST_TO_ADDR
// bc_kind2 := i [ 5 ] [ 2 ] ;
24125: LD_ADDR_OWVAR 45
24129: PUSH
24130: LD_VAR 0 7
24134: PUSH
24135: LD_INT 5
24137: ARRAY
24138: PUSH
24139: LD_INT 2
24141: ARRAY
24142: ST_TO_ADDR
// end ; tb := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
24143: LD_ADDR_VAR 0 10
24147: PUSH
24148: LD_VAR 0 7
24152: PUSH
24153: LD_INT 2
24155: ARRAY
24156: PPUSH
24157: LD_VAR 0 7
24161: PUSH
24162: LD_INT 3
24164: ARRAY
24165: PPUSH
24166: LD_VAR 0 7
24170: PUSH
24171: LD_INT 4
24173: ARRAY
24174: PPUSH
24175: CALL_OW 47
24179: ST_TO_ADDR
// if bc_type = b_bunker or bc_type = b_turret then
24180: LD_OWVAR 42
24184: PUSH
24185: LD_INT 32
24187: EQUAL
24188: PUSH
24189: LD_OWVAR 42
24193: PUSH
24194: LD_INT 33
24196: EQUAL
24197: OR
24198: IFFALSE 24222
// PlaceWeaponTurret ( tb , i [ 5 ] [ 1 ] ) ;
24200: LD_VAR 0 10
24204: PPUSH
24205: LD_VAR 0 7
24209: PUSH
24210: LD_INT 5
24212: ARRAY
24213: PUSH
24214: LD_INT 1
24216: ARRAY
24217: PPUSH
24218: CALL_OW 431
// end ; if i [ 6 ] then
24222: LD_VAR 0 7
24226: PUSH
24227: LD_INT 6
24229: ARRAY
24230: IFFALSE 24251
// b := b ^ [ tb ] ;
24232: LD_ADDR_VAR 0 9
24236: PUSH
24237: LD_VAR 0 9
24241: PUSH
24242: LD_VAR 0 10
24246: PUSH
24247: EMPTY
24248: LIST
24249: ADD
24250: ST_TO_ADDR
// if i [ 7 ] then
24251: LD_VAR 0 7
24255: PUSH
24256: LD_INT 7
24258: ARRAY
24259: IFFALSE 24280
// can_rebuild := can_rebuild ^ [ tb ] ;
24261: LD_ADDR_EXP 115
24265: PUSH
24266: LD_EXP 115
24270: PUSH
24271: LD_VAR 0 10
24275: PUSH
24276: EMPTY
24277: LIST
24278: ADD
24279: ST_TO_ADDR
// if i [ 8 ] then
24280: LD_VAR 0 7
24284: PUSH
24285: LD_INT 8
24287: ARRAY
24288: IFFALSE 24309
// can_repair := can_rebuild ^ [ tb ] ;
24290: LD_ADDR_EXP 116
24294: PUSH
24295: LD_EXP 115
24299: PUSH
24300: LD_VAR 0 10
24304: PUSH
24305: EMPTY
24306: LIST
24307: ADD
24308: ST_TO_ADDR
// if i [ 9 ] then
24309: LD_VAR 0 7
24313: PUSH
24314: LD_INT 9
24316: ARRAY
24317: IFFALSE 24338
// fort := fort ^ [ tb ] ;
24319: LD_ADDR_EXP 119
24323: PUSH
24324: LD_EXP 119
24328: PUSH
24329: LD_VAR 0 10
24333: PUSH
24334: EMPTY
24335: LIST
24336: ADD
24337: ST_TO_ADDR
// if i [ 10 ] then
24338: LD_VAR 0 7
24342: PUSH
24343: LD_INT 10
24345: ARRAY
24346: IFFALSE 24368
// SetBLevel ( tb , levels [ 1 ] ) else
24348: LD_VAR 0 10
24352: PPUSH
24353: LD_VAR 0 5
24357: PUSH
24358: LD_INT 1
24360: ARRAY
24361: PPUSH
24362: CALL_OW 241
24366: GO 24386
// SetBLevel ( tb , levels [ 2 ] ) ;
24368: LD_VAR 0 10
24372: PPUSH
24373: LD_VAR 0 5
24377: PUSH
24378: LD_INT 2
24380: ARRAY
24381: PPUSH
24382: CALL_OW 241
// end ;
24386: GO 23986
24388: POP
24389: POP
// bb := UnitFilter ( b , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24390: LD_ADDR_VAR 0 11
24394: PUSH
24395: LD_VAR 0 9
24399: PPUSH
24400: LD_INT 2
24402: PUSH
24403: LD_INT 30
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 30
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: LIST
24427: PPUSH
24428: CALL_OW 72
24432: ST_TO_ADDR
// if bb then
24433: LD_VAR 0 11
24437: IFFALSE 24509
// begin base := GetBase ( bb [ 1 ] ) ;
24439: LD_ADDR_VAR 0 8
24443: PUSH
24444: LD_VAR 0 11
24448: PUSH
24449: LD_INT 1
24451: ARRAY
24452: PPUSH
24453: CALL_OW 274
24457: ST_TO_ADDR
// SetResourceType ( base , mat_cans , cans ) ;
24458: LD_VAR 0 8
24462: PPUSH
24463: LD_INT 1
24465: PPUSH
24466: LD_VAR 0 2
24470: PPUSH
24471: CALL_OW 277
// SetResourceType ( base , mat_oil , oil ) ;
24475: LD_VAR 0 8
24479: PPUSH
24480: LD_INT 2
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: CALL_OW 277
// SetResourceType ( base , mat_siberit , sib ) ;
24492: LD_VAR 0 8
24496: PPUSH
24497: LD_INT 3
24499: PPUSH
24500: LD_VAR 0 4
24504: PPUSH
24505: CALL_OW 277
// end ; result := b ;
24509: LD_ADDR_VAR 0 6
24513: PUSH
24514: LD_VAR 0 9
24518: ST_TO_ADDR
// end ;
24519: LD_VAR 0 6
24523: RET
// function place_amici ( amici , area ) ; var i , j , a ; begin
24524: LD_INT 0
24526: PPUSH
24527: PPUSH
24528: PPUSH
24529: PPUSH
// InitUc ;
24530: CALL_OW 18
// InitHc ;
24534: CALL_OW 19
// uc_side := americans ;
24538: LD_ADDR_OWVAR 20
24542: PUSH
24543: LD_EXP 3
24547: ST_TO_ADDR
// uc_nation := nation_american ;
24548: LD_ADDR_OWVAR 21
24552: PUSH
24553: LD_INT 1
24555: ST_TO_ADDR
// a := [ ] ;
24556: LD_ADDR_VAR 0 6
24560: PUSH
24561: EMPTY
24562: ST_TO_ADDR
// for i in amici do
24563: LD_ADDR_VAR 0 4
24567: PUSH
24568: LD_VAR 0 1
24572: PUSH
24573: FOR_IN
24574: IFFALSE 24648
// begin PrepareHuman ( 0 , i [ 2 ] , i [ 3 ] ) ;
24576: LD_INT 0
24578: PPUSH
24579: LD_VAR 0 4
24583: PUSH
24584: LD_INT 2
24586: ARRAY
24587: PPUSH
24588: LD_VAR 0 4
24592: PUSH
24593: LD_INT 3
24595: ARRAY
24596: PPUSH
24597: CALL_OW 380
// for j := 1 to i [ 1 ] do
24601: LD_ADDR_VAR 0 5
24605: PUSH
24606: DOUBLE
24607: LD_INT 1
24609: DEC
24610: ST_TO_ADDR
24611: LD_VAR 0 4
24615: PUSH
24616: LD_INT 1
24618: ARRAY
24619: PUSH
24620: FOR_TO
24621: IFFALSE 24644
// begin a := a ^ [ CreateHuman ] ;
24623: LD_ADDR_VAR 0 6
24627: PUSH
24628: LD_VAR 0 6
24632: PUSH
24633: CALL_OW 44
24637: PUSH
24638: EMPTY
24639: LIST
24640: ADD
24641: ST_TO_ADDR
// end ;
24642: GO 24620
24644: POP
24645: POP
// end ;
24646: GO 24573
24648: POP
24649: POP
// for i in a do
24650: LD_ADDR_VAR 0 4
24654: PUSH
24655: LD_VAR 0 6
24659: PUSH
24660: FOR_IN
24661: IFFALSE 24682
// PlaceUnitArea ( i , area , false ) ;
24663: LD_VAR 0 4
24667: PPUSH
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_INT 0
24675: PPUSH
24676: CALL_OW 49
24680: GO 24660
24682: POP
24683: POP
// result := a ;
24684: LD_ADDR_VAR 0 3
24688: PUSH
24689: LD_VAR 0 6
24693: ST_TO_ADDR
// end ;
24694: LD_VAR 0 3
24698: RET
// every 0 0$4 + 0 0$3.5 do var i , j , weap , builds ;
24699: GO 24701
24701: DISABLE
24702: LD_INT 0
24704: PPUSH
24705: PPUSH
24706: PPUSH
24707: PPUSH
// begin for i in UnitFilter ( can_rebuild , [ [ f_side , ai ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
24708: LD_ADDR_VAR 0 1
24712: PUSH
24713: LD_EXP 115
24717: PPUSH
24718: LD_INT 22
24720: PUSH
24721: LD_EXP 6
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: LD_INT 30
24735: PUSH
24736: LD_INT 33
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 30
24745: PUSH
24746: LD_INT 32
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PPUSH
24762: CALL_OW 72
24766: PUSH
24767: FOR_IN
24768: IFFALSE 24912
// if not GetBWeapon ( i ) then
24770: LD_VAR 0 1
24774: PPUSH
24775: CALL_OW 269
24779: NOT
24780: IFFALSE 24910
// begin weap := 0 ;
24782: LD_ADDR_VAR 0 3
24786: PUSH
24787: LD_INT 0
24789: ST_TO_ADDR
// for j in builds do
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_VAR 0 4
24799: PUSH
24800: FOR_IN
24801: IFFALSE 24888
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] and GetBType ( i ) = j [ 1 ] then
24803: LD_VAR 0 1
24807: PPUSH
24808: CALL_OW 250
24812: PUSH
24813: LD_VAR 0 2
24817: PUSH
24818: LD_INT 2
24820: ARRAY
24821: EQUAL
24822: PUSH
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL_OW 251
24832: PUSH
24833: LD_VAR 0 2
24837: PUSH
24838: LD_INT 3
24840: ARRAY
24841: EQUAL
24842: AND
24843: PUSH
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 266
24853: PUSH
24854: LD_VAR 0 2
24858: PUSH
24859: LD_INT 1
24861: ARRAY
24862: EQUAL
24863: AND
24864: IFFALSE 24886
// begin weap := j [ 5 ] [ 1 ] ;
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_VAR 0 2
24875: PUSH
24876: LD_INT 5
24878: ARRAY
24879: PUSH
24880: LD_INT 1
24882: ARRAY
24883: ST_TO_ADDR
// break ;
24884: GO 24888
// end ;
24886: GO 24800
24888: POP
24889: POP
// if weap then
24890: LD_VAR 0 3
24894: IFFALSE 24910
// ComPlaceWeapon ( j , weap ) ;
24896: LD_VAR 0 2
24900: PPUSH
24901: LD_VAR 0 3
24905: PPUSH
24906: CALL_OW 148
// end ;
24910: GO 24767
24912: POP
24913: POP
// enable ;
24914: ENABLE
// end ;
24915: PPOPN 4
24917: END
// every 0 0$4 + 0 0$0.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
24918: GO 24920
24920: DISABLE
24921: LD_INT 0
24923: PPUSH
24924: PPUSH
24925: PPUSH
24926: PPUSH
24927: PPUSH
24928: PPUSH
24929: PPUSH
// begin for i in builds3 do
24930: LD_ADDR_VAR 0 1
24934: PUSH
24935: LD_EXP 106
24939: PUSH
24940: FOR_IN
24941: IFFALSE 25113
// begin if i [ 7 ] then
24943: LD_VAR 0 1
24947: PUSH
24948: LD_INT 7
24950: ARRAY
24951: IFFALSE 25111
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
24953: LD_ADDR_VAR 0 7
24957: PUSH
24958: LD_VAR 0 1
24962: PUSH
24963: LD_INT 2
24965: ARRAY
24966: PPUSH
24967: LD_VAR 0 1
24971: PUSH
24972: LD_INT 3
24974: ARRAY
24975: PPUSH
24976: LD_INT 0
24978: PPUSH
24979: CALL 25870 0 3
24983: PPUSH
24984: CALL_OW 266
24988: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
24989: LD_VAR 0 7
24993: PPUSH
24994: CALL_OW 255
24998: PUSH
24999: LD_EXP 6
25003: EQUAL
25004: IFFALSE 25111
// if co_tam_stoji = - 1 then
25006: LD_VAR 0 7
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: EQUAL
25015: IFFALSE 25081
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25017: LD_ADDR_VAR 0 4
25021: PUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_INT 1
25029: ARRAY
25030: PPUSH
25031: CALL 18759 0 1
25035: PUSH
25036: LD_VAR 0 1
25040: PUSH
25041: LD_INT 2
25043: ARRAY
25044: PUSH
25045: LD_VAR 0 1
25049: PUSH
25050: LD_INT 3
25052: ARRAY
25053: PUSH
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 4
25061: ARRAY
25062: PUSH
25063: LD_VAR 0 1
25067: PUSH
25068: LD_INT 5
25070: ARRAY
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: ST_TO_ADDR
// end else
25079: GO 25111
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25081: LD_VAR 0 7
25085: PPUSH
25086: LD_VAR 0 1
25090: PUSH
25091: LD_INT 1
25093: ARRAY
25094: PPUSH
25095: CALL 18495 0 2
25099: IFFALSE 25111
// begin to_up := i ;
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_VAR 0 1
25110: ST_TO_ADDR
// end ; end ; end ;
25111: GO 24940
25113: POP
25114: POP
// if to_b then
25115: LD_VAR 0 4
25119: IFFALSE 25191
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25121: LD_EXP 123
25125: PPUSH
25126: LD_VAR 0 4
25130: PUSH
25131: LD_INT 2
25133: ARRAY
25134: PPUSH
25135: LD_VAR 0 4
25139: PUSH
25140: LD_INT 3
25142: ARRAY
25143: PPUSH
25144: CALL_OW 73
25148: PPUSH
25149: LD_VAR 0 4
25153: PUSH
25154: LD_INT 1
25156: ARRAY
25157: PPUSH
25158: LD_VAR 0 4
25162: PUSH
25163: LD_INT 2
25165: ARRAY
25166: PPUSH
25167: LD_VAR 0 4
25171: PUSH
25172: LD_INT 3
25174: ARRAY
25175: PPUSH
25176: LD_VAR 0 4
25180: PUSH
25181: LD_INT 4
25183: ARRAY
25184: PPUSH
25185: CALL_OW 145
25189: GO 25227
// if to_up then
25191: LD_VAR 0 3
25195: IFFALSE 25227
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25197: LD_VAR 0 1
25201: PUSH
25202: LD_INT 2
25204: ARRAY
25205: PPUSH
25206: LD_VAR 0 1
25210: PUSH
25211: LD_INT 3
25213: ARRAY
25214: PPUSH
25215: LD_INT 0
25217: PPUSH
25218: CALL 25870 0 3
25222: PPUSH
25223: CALL_OW 146
// enable ;
25227: ENABLE
// end ;
25228: PPOPN 7
25230: END
// every 0 0$4 + 0 0$1.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25231: GO 25233
25233: DISABLE
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
// begin for i in builds4 do
25243: LD_ADDR_VAR 0 1
25247: PUSH
25248: LD_EXP 107
25252: PUSH
25253: FOR_IN
25254: IFFALSE 25426
// begin if i [ 7 ] then
25256: LD_VAR 0 1
25260: PUSH
25261: LD_INT 7
25263: ARRAY
25264: IFFALSE 25424
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25266: LD_ADDR_VAR 0 7
25270: PUSH
25271: LD_VAR 0 1
25275: PUSH
25276: LD_INT 2
25278: ARRAY
25279: PPUSH
25280: LD_VAR 0 1
25284: PUSH
25285: LD_INT 3
25287: ARRAY
25288: PPUSH
25289: LD_INT 0
25291: PPUSH
25292: CALL 25870 0 3
25296: PPUSH
25297: CALL_OW 266
25301: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25302: LD_VAR 0 7
25306: PPUSH
25307: CALL_OW 255
25311: PUSH
25312: LD_EXP 6
25316: EQUAL
25317: IFFALSE 25424
// if co_tam_stoji = - 1 then
25319: LD_VAR 0 7
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: EQUAL
25328: IFFALSE 25394
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25330: LD_ADDR_VAR 0 4
25334: PUSH
25335: LD_VAR 0 1
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: PPUSH
25344: CALL 18759 0 1
25348: PUSH
25349: LD_VAR 0 1
25353: PUSH
25354: LD_INT 2
25356: ARRAY
25357: PUSH
25358: LD_VAR 0 1
25362: PUSH
25363: LD_INT 3
25365: ARRAY
25366: PUSH
25367: LD_VAR 0 1
25371: PUSH
25372: LD_INT 4
25374: ARRAY
25375: PUSH
25376: LD_VAR 0 1
25380: PUSH
25381: LD_INT 5
25383: ARRAY
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: ST_TO_ADDR
// end else
25392: GO 25424
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25394: LD_VAR 0 7
25398: PPUSH
25399: LD_VAR 0 1
25403: PUSH
25404: LD_INT 1
25406: ARRAY
25407: PPUSH
25408: CALL 18495 0 2
25412: IFFALSE 25424
// begin to_up := i ;
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_VAR 0 1
25423: ST_TO_ADDR
// end ; end ; end ;
25424: GO 25253
25426: POP
25427: POP
// if to_b then
25428: LD_VAR 0 4
25432: IFFALSE 25504
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25434: LD_EXP 123
25438: PPUSH
25439: LD_VAR 0 4
25443: PUSH
25444: LD_INT 2
25446: ARRAY
25447: PPUSH
25448: LD_VAR 0 4
25452: PUSH
25453: LD_INT 3
25455: ARRAY
25456: PPUSH
25457: CALL_OW 73
25461: PPUSH
25462: LD_VAR 0 4
25466: PUSH
25467: LD_INT 1
25469: ARRAY
25470: PPUSH
25471: LD_VAR 0 4
25475: PUSH
25476: LD_INT 2
25478: ARRAY
25479: PPUSH
25480: LD_VAR 0 4
25484: PUSH
25485: LD_INT 3
25487: ARRAY
25488: PPUSH
25489: LD_VAR 0 4
25493: PUSH
25494: LD_INT 4
25496: ARRAY
25497: PPUSH
25498: CALL_OW 145
25502: GO 25540
// if to_up then
25504: LD_VAR 0 3
25508: IFFALSE 25540
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25510: LD_VAR 0 1
25514: PUSH
25515: LD_INT 2
25517: ARRAY
25518: PPUSH
25519: LD_VAR 0 1
25523: PUSH
25524: LD_INT 3
25526: ARRAY
25527: PPUSH
25528: LD_INT 0
25530: PPUSH
25531: CALL 25870 0 3
25535: PPUSH
25536: CALL_OW 146
// enable ;
25540: ENABLE
// end ;
25541: PPOPN 7
25543: END
// every 0 0$4 + 0 0$2.5 trigger ( not OvsyenkoTaken ) or ( OvsyenkoCaptured ) do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25544: LD_EXP 14
25548: NOT
25549: PUSH
25550: LD_EXP 15
25554: OR
25555: IFFALSE 25867
25557: GO 25559
25559: DISABLE
25560: LD_INT 0
25562: PPUSH
25563: PPUSH
25564: PPUSH
25565: PPUSH
25566: PPUSH
25567: PPUSH
25568: PPUSH
// begin for i in builds1 do
25569: LD_ADDR_VAR 0 1
25573: PUSH
25574: LD_EXP 104
25578: PUSH
25579: FOR_IN
25580: IFFALSE 25752
// begin if i [ 7 ] then
25582: LD_VAR 0 1
25586: PUSH
25587: LD_INT 7
25589: ARRAY
25590: IFFALSE 25750
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25592: LD_ADDR_VAR 0 7
25596: PUSH
25597: LD_VAR 0 1
25601: PUSH
25602: LD_INT 2
25604: ARRAY
25605: PPUSH
25606: LD_VAR 0 1
25610: PUSH
25611: LD_INT 3
25613: ARRAY
25614: PPUSH
25615: LD_INT 0
25617: PPUSH
25618: CALL 25870 0 3
25622: PPUSH
25623: CALL_OW 266
25627: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25628: LD_VAR 0 7
25632: PPUSH
25633: CALL_OW 255
25637: PUSH
25638: LD_EXP 6
25642: EQUAL
25643: IFFALSE 25750
// if co_tam_stoji = - 1 then
25645: LD_VAR 0 7
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: EQUAL
25654: IFFALSE 25720
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25656: LD_ADDR_VAR 0 4
25660: PUSH
25661: LD_VAR 0 1
25665: PUSH
25666: LD_INT 1
25668: ARRAY
25669: PPUSH
25670: CALL 18759 0 1
25674: PUSH
25675: LD_VAR 0 1
25679: PUSH
25680: LD_INT 2
25682: ARRAY
25683: PUSH
25684: LD_VAR 0 1
25688: PUSH
25689: LD_INT 3
25691: ARRAY
25692: PUSH
25693: LD_VAR 0 1
25697: PUSH
25698: LD_INT 4
25700: ARRAY
25701: PUSH
25702: LD_VAR 0 1
25706: PUSH
25707: LD_INT 5
25709: ARRAY
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: ST_TO_ADDR
// end else
25718: GO 25750
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25720: LD_VAR 0 7
25724: PPUSH
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: CALL 18495 0 2
25738: IFFALSE 25750
// begin to_up := i ;
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_VAR 0 1
25749: ST_TO_ADDR
// end ; end ; end ;
25750: GO 25579
25752: POP
25753: POP
// if to_b then
25754: LD_VAR 0 4
25758: IFFALSE 25830
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25760: LD_EXP 123
25764: PPUSH
25765: LD_VAR 0 4
25769: PUSH
25770: LD_INT 2
25772: ARRAY
25773: PPUSH
25774: LD_VAR 0 4
25778: PUSH
25779: LD_INT 3
25781: ARRAY
25782: PPUSH
25783: CALL_OW 73
25787: PPUSH
25788: LD_VAR 0 4
25792: PUSH
25793: LD_INT 1
25795: ARRAY
25796: PPUSH
25797: LD_VAR 0 4
25801: PUSH
25802: LD_INT 2
25804: ARRAY
25805: PPUSH
25806: LD_VAR 0 4
25810: PUSH
25811: LD_INT 3
25813: ARRAY
25814: PPUSH
25815: LD_VAR 0 4
25819: PUSH
25820: LD_INT 4
25822: ARRAY
25823: PPUSH
25824: CALL_OW 145
25828: GO 25866
// if to_up then
25830: LD_VAR 0 3
25834: IFFALSE 25866
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25836: LD_VAR 0 1
25840: PUSH
25841: LD_INT 2
25843: ARRAY
25844: PPUSH
25845: LD_VAR 0 1
25849: PUSH
25850: LD_INT 3
25852: ARRAY
25853: PPUSH
25854: LD_INT 0
25856: PPUSH
25857: CALL 25870 0 3
25861: PPUSH
25862: CALL_OW 146
// enable ;
25866: ENABLE
// end ;
25867: PPOPN 7
25869: END
// function get_build ( x , y , btype ) ; begin
25870: LD_INT 0
25872: PPUSH
// result := HexInfo ( x , y ) ;
25873: LD_ADDR_VAR 0 4
25877: PUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 428
25892: ST_TO_ADDR
// if result < 1 then
25893: LD_VAR 0 4
25897: PUSH
25898: LD_INT 1
25900: LESS
25901: IFFALSE 25911
// result := 0 ;
25903: LD_ADDR_VAR 0 4
25907: PUSH
25908: LD_INT 0
25910: ST_TO_ADDR
// if btype then
25911: LD_VAR 0 3
25915: IFFALSE 25967
// if btype <> GetBType ( result ) then
25917: LD_VAR 0 3
25921: PUSH
25922: LD_VAR 0 4
25926: PPUSH
25927: CALL_OW 266
25931: NONEQUAL
25932: IFFALSE 25944
// result := 0 else
25934: LD_ADDR_VAR 0 4
25938: PUSH
25939: LD_INT 0
25941: ST_TO_ADDR
25942: GO 25967
// if unit_building <> GetType ( result ) then
25944: LD_INT 3
25946: PUSH
25947: LD_VAR 0 4
25951: PPUSH
25952: CALL_OW 247
25956: NONEQUAL
25957: IFFALSE 25967
// result := 0 ;
25959: LD_ADDR_VAR 0 4
25963: PUSH
25964: LD_INT 0
25966: ST_TO_ADDR
// end ; end_of_file
25967: LD_VAR 0 4
25971: RET
// var opravit ; var opravari ; every 0 0$3 trigger not under_attack do var zivoty , i , bb ;
25972: LD_EXP 140
25976: NOT
25977: IFFALSE 26160
25979: GO 25981
25981: DISABLE
25982: LD_INT 0
25984: PPUSH
25985: PPUSH
25986: PPUSH
// begin opravit := [ ] ;
25987: LD_ADDR_LOC 19
25991: PUSH
25992: EMPTY
25993: ST_TO_ADDR
// zivoty := [ ] ;
25994: LD_ADDR_VAR 0 1
25998: PUSH
25999: EMPTY
26000: ST_TO_ADDR
// for i in UnitFilter ( can_repair , [ f_side , ai ] ) do
26001: LD_ADDR_VAR 0 2
26005: PUSH
26006: LD_EXP 116
26010: PPUSH
26011: LD_INT 22
26013: PUSH
26014: LD_EXP 6
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PPUSH
26023: CALL_OW 72
26027: PUSH
26028: FOR_IN
26029: IFFALSE 26131
// begin if GetLives ( i ) < 1000 and ( difficulty > 2 and GetX ( i ) = 41 and GetX ( i ) = 23 ) then
26031: LD_VAR 0 2
26035: PPUSH
26036: CALL_OW 256
26040: PUSH
26041: LD_INT 1000
26043: LESS
26044: PUSH
26045: LD_OWVAR 67
26049: PUSH
26050: LD_INT 2
26052: GREATER
26053: PUSH
26054: LD_VAR 0 2
26058: PPUSH
26059: CALL_OW 250
26063: PUSH
26064: LD_INT 41
26066: EQUAL
26067: AND
26068: PUSH
26069: LD_VAR 0 2
26073: PPUSH
26074: CALL_OW 250
26078: PUSH
26079: LD_INT 23
26081: EQUAL
26082: AND
26083: AND
26084: IFFALSE 26129
// begin opravit := opravit ^ [ i ] ;
26086: LD_ADDR_LOC 19
26090: PUSH
26091: LD_LOC 19
26095: PUSH
26096: LD_VAR 0 2
26100: PUSH
26101: EMPTY
26102: LIST
26103: ADD
26104: ST_TO_ADDR
// zivoty := zivoty ^ [ GetLives ( i ) ] ;
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_VAR 0 1
26114: PUSH
26115: LD_VAR 0 2
26119: PPUSH
26120: CALL_OW 256
26124: PUSH
26125: EMPTY
26126: LIST
26127: ADD
26128: ST_TO_ADDR
// end ; end ;
26129: GO 26028
26131: POP
26132: POP
// if opravit then
26133: LD_LOC 19
26137: IFFALSE 26159
// begin opravit := SortListByListAsc ( opravit , zivoty ) ;
26139: LD_ADDR_LOC 19
26143: PUSH
26144: LD_LOC 19
26148: PPUSH
26149: LD_VAR 0 1
26153: PPUSH
26154: CALL_OW 76
26158: ST_TO_ADDR
// end ; enable ;
26159: ENABLE
// end ;
26160: PPOPN 3
26162: END
// every 0 0$3 trigger not under_attack do
26163: LD_EXP 140
26167: NOT
26168: IFFALSE 26262
26170: GO 26172
26172: DISABLE
// begin if opravit then
26173: LD_LOC 19
26177: IFFALSE 26261
// begin if opravit [ 1 ] in can_repair then
26179: LD_LOC 19
26183: PUSH
26184: LD_INT 1
26186: ARRAY
26187: PUSH
26188: LD_EXP 116
26192: IN
26193: IFFALSE 26261
// ComRepairBuilding ( UnitFilter ( eng , [ f_dist , opravit [ 1 ] , ( 5 - GetLives ( opravit [ 1 ] ) div 200 ) * 7 ] ) , opravit [ 1 ] ) ;
26195: LD_EXP 123
26199: PPUSH
26200: LD_INT 91
26202: PUSH
26203: LD_LOC 19
26207: PUSH
26208: LD_INT 1
26210: ARRAY
26211: PUSH
26212: LD_INT 5
26214: PUSH
26215: LD_LOC 19
26219: PUSH
26220: LD_INT 1
26222: ARRAY
26223: PPUSH
26224: CALL_OW 256
26228: PUSH
26229: LD_INT 200
26231: DIV
26232: MINUS
26233: PUSH
26234: LD_INT 7
26236: MUL
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 72
26247: PPUSH
26248: LD_LOC 19
26252: PUSH
26253: LD_INT 1
26255: ARRAY
26256: PPUSH
26257: CALL_OW 130
// end ; enable ;
26261: ENABLE
// end ; end_of_file
26262: END
// export fort , ctrl , sol , dep , eng , fact , mec , lab , sci ; export b1 , b2 , b3 , b4 , b5 ; export a1 , a2 , a3 , a4 , a5 ; export attack , defence ; export under_attack ; export mcdef ; export ct ; export sib_dul ; every 3 do
26263: GO 26265
26265: DISABLE
// begin sol := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) ;
26266: LD_ADDR_EXP 121
26270: PUSH
26271: LD_INT 22
26273: PUSH
26274: LD_EXP 6
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 25
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PPUSH
26297: CALL_OW 69
26301: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26302: LD_ADDR_EXP 122
26306: PUSH
26307: LD_INT 22
26309: PUSH
26310: LD_EXP 6
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 2
26321: PUSH
26322: LD_INT 30
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 30
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PPUSH
26351: CALL_OW 69
26355: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_engineer ] ] ) ;
26356: LD_ADDR_EXP 123
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_EXP 6
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 25
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PPUSH
26387: CALL_OW 69
26391: ST_TO_ADDR
// fact := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ] ) ;
26392: LD_ADDR_EXP 124
26396: PUSH
26397: LD_INT 22
26399: PUSH
26400: LD_EXP 6
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: LD_INT 30
26414: PUSH
26415: LD_INT 3
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 30
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: LIST
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PPUSH
26441: CALL_OW 69
26445: ST_TO_ADDR
// ctrl := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_control_tower ] ] ) ;
26446: LD_ADDR_EXP 120
26450: PUSH
26451: LD_INT 22
26453: PUSH
26454: LD_EXP 6
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 30
26465: PUSH
26466: LD_INT 36
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: ST_TO_ADDR
// mec := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) ;
26482: LD_ADDR_EXP 125
26486: PUSH
26487: LD_INT 22
26489: PUSH
26490: LD_EXP 6
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 25
26501: PUSH
26502: LD_INT 3
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PPUSH
26513: CALL_OW 69
26517: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
26518: LD_ADDR_EXP 126
26522: PUSH
26523: LD_INT 22
26525: PUSH
26526: LD_EXP 6
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 30
26540: PUSH
26541: LD_INT 6
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 30
26550: PUSH
26551: LD_INT 7
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 30
26560: PUSH
26561: LD_INT 8
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PPUSH
26578: CALL_OW 69
26582: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_scientistic ] ] ) ;
26583: LD_ADDR_EXP 127
26587: PUSH
26588: LD_INT 22
26590: PUSH
26591: LD_EXP 6
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 25
26602: PUSH
26603: LD_INT 4
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: ST_TO_ADDR
// sib_dul := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_siberite_mine ] , [ f_distxy , 101 , 93 , 5 ] ] ) ;
26619: LD_ADDR_EXP 143
26623: PUSH
26624: LD_INT 22
26626: PUSH
26627: LD_EXP 6
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 30
26638: PUSH
26639: LD_INT 30
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 92
26648: PUSH
26649: LD_INT 101
26651: PUSH
26652: LD_INT 93
26654: PUSH
26655: LD_INT 5
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: PPUSH
26669: CALL_OW 69
26673: ST_TO_ADDR
// if sib_dul then
26674: LD_EXP 143
26678: IFFALSE 26694
// sib_dul := sib_dul [ 1 ] ;
26680: LD_ADDR_EXP 143
26684: PUSH
26685: LD_EXP 143
26689: PUSH
26690: LD_INT 1
26692: ARRAY
26693: ST_TO_ADDR
// end ;
26694: END
// every 20 20$0 do var a , i ;
26695: GO 26697
26697: DISABLE
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
// begin InitUc ;
26702: CALL_OW 18
// InitHc ;
26706: CALL_OW 19
// uc_nation := nation_american ;
26710: LD_ADDR_OWVAR 21
26714: PUSH
26715: LD_INT 1
26717: ST_TO_ADDR
// uc_side := americans ;
26718: LD_ADDR_OWVAR 20
26722: PUSH
26723: LD_EXP 3
26727: ST_TO_ADDR
// for i := 1 to 5 do
26728: LD_ADDR_VAR 0 2
26732: PUSH
26733: DOUBLE
26734: LD_INT 1
26736: DEC
26737: ST_TO_ADDR
26738: LD_INT 5
26740: PUSH
26741: FOR_TO
26742: IFFALSE 26826
// begin PrepareMechanic ( 0 , 5 ) ;
26744: LD_INT 0
26746: PPUSH
26747: LD_INT 5
26749: PPUSH
26750: CALL_OW 383
// hc_class := class_soldier ;
26754: LD_ADDR_OWVAR 28
26758: PUSH
26759: LD_INT 1
26761: ST_TO_ADDR
// a := CreateHuman ;
26762: LD_ADDR_VAR 0 1
26766: PUSH
26767: CALL_OW 44
26771: ST_TO_ADDR
// PlaceUnitXYR ( a , 21 , 2 , 5 , false ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_INT 21
26779: PPUSH
26780: LD_INT 2
26782: PPUSH
26783: LD_INT 5
26785: PPUSH
26786: LD_INT 0
26788: PPUSH
26789: CALL_OW 50
// ComMoveXY ( a , 25 , 32 ) ;
26793: LD_VAR 0 1
26797: PPUSH
26798: LD_INT 25
26800: PPUSH
26801: LD_INT 32
26803: PPUSH
26804: CALL_OW 111
// sol := sol ^ a ;
26808: LD_ADDR_EXP 121
26812: PUSH
26813: LD_EXP 121
26817: PUSH
26818: LD_VAR 0 1
26822: ADD
26823: ST_TO_ADDR
// end ;
26824: GO 26741
26826: POP
26827: POP
// end ;
26828: PPOPN 2
26830: END
// every 0 0$3 do var i , cm ;
26831: GO 26833
26833: DISABLE
26834: LD_INT 0
26836: PPUSH
26837: PPUSH
// begin if ctrl then
26838: LD_EXP 120
26842: IFFALSE 27261
// begin cm := UnitFilter ( UnitsInside ( ctrl [ 1 ] ) , [ [ f_class , class_mechanic ] ] ) ;
26844: LD_ADDR_VAR 0 2
26848: PUSH
26849: LD_EXP 120
26853: PUSH
26854: LD_INT 1
26856: ARRAY
26857: PPUSH
26858: CALL_OW 313
26862: PPUSH
26863: LD_INT 25
26865: PUSH
26866: LD_INT 3
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: PPUSH
26876: CALL_OW 72
26880: ST_TO_ADDR
// for i in cm do
26881: LD_ADDR_VAR 0 1
26885: PUSH
26886: LD_VAR 0 2
26890: PUSH
26891: FOR_IN
26892: IFFALSE 26937
// if UnitsLinked ( i ) >= GetSkill ( i , skill_mechanical ) then
26894: LD_VAR 0 1
26898: PPUSH
26899: CALL_OW 432
26903: PUSH
26904: LD_VAR 0 1
26908: PPUSH
26909: LD_INT 3
26911: PPUSH
26912: CALL_OW 259
26916: GREATEREQUAL
26917: IFFALSE 26935
// cm := cm diff i ;
26919: LD_ADDR_VAR 0 2
26923: PUSH
26924: LD_VAR 0 2
26928: PUSH
26929: LD_VAR 0 1
26933: DIFF
26934: ST_TO_ADDR
26935: GO 26891
26937: POP
26938: POP
// for i in attack do
26939: LD_ADDR_VAR 0 1
26943: PUSH
26944: LD_EXP 138
26948: PUSH
26949: FOR_IN
26950: IFFALSE 27259
// begin if not IsControledBy ( i ) then
26952: LD_VAR 0 1
26956: PPUSH
26957: CALL_OW 312
26961: NOT
26962: IFFALSE 27257
// case cm of 1 :
26964: LD_VAR 0 2
26968: PUSH
26969: LD_INT 1
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 26998
26977: POP
// ComLinkTo ( i , cm [ 1 ] ) ; 2 :
26978: LD_VAR 0 1
26982: PPUSH
26983: LD_VAR 0 2
26987: PUSH
26988: LD_INT 1
26990: ARRAY
26991: PPUSH
26992: CALL_OW 135
26996: GO 27257
26998: LD_INT 2
27000: DOUBLE
27001: EQUAL
27002: IFTRUE 27006
27004: GO 27077
27006: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27007: LD_VAR 0 2
27011: PUSH
27012: LD_INT 1
27014: ARRAY
27015: PPUSH
27016: CALL_OW 432
27020: PUSH
27021: LD_VAR 0 2
27025: PUSH
27026: LD_INT 2
27028: ARRAY
27029: PPUSH
27030: CALL_OW 432
27034: LESSEQUAL
27035: IFFALSE 27057
// ComLinkTo ( i , cm [ 1 ] ) else
27037: LD_VAR 0 1
27041: PPUSH
27042: LD_VAR 0 2
27046: PUSH
27047: LD_INT 1
27049: ARRAY
27050: PPUSH
27051: CALL_OW 135
27055: GO 27075
// ComLinkTo ( i , cm [ 2 ] ) ; 3 :
27057: LD_VAR 0 1
27061: PPUSH
27062: LD_VAR 0 2
27066: PUSH
27067: LD_INT 2
27069: ARRAY
27070: PPUSH
27071: CALL_OW 135
27075: GO 27257
27077: LD_INT 3
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27256
27085: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27086: LD_VAR 0 2
27090: PUSH
27091: LD_INT 1
27093: ARRAY
27094: PPUSH
27095: CALL_OW 432
27099: PUSH
27100: LD_VAR 0 2
27104: PUSH
27105: LD_INT 2
27107: ARRAY
27108: PPUSH
27109: CALL_OW 432
27113: LESSEQUAL
27114: IFFALSE 27186
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27116: LD_VAR 0 2
27120: PUSH
27121: LD_INT 1
27123: ARRAY
27124: PPUSH
27125: CALL_OW 432
27129: PUSH
27130: LD_VAR 0 2
27134: PUSH
27135: LD_INT 3
27137: ARRAY
27138: PPUSH
27139: CALL_OW 432
27143: LESSEQUAL
27144: IFFALSE 27166
// ComLinkTo ( i , cm [ 1 ] ) else
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_VAR 0 2
27155: PUSH
27156: LD_INT 1
27158: ARRAY
27159: PPUSH
27160: CALL_OW 135
27164: GO 27184
// ComLinkTo ( i , cm [ 3 ] ) else
27166: LD_VAR 0 1
27170: PPUSH
27171: LD_VAR 0 2
27175: PUSH
27176: LD_INT 3
27178: ARRAY
27179: PPUSH
27180: CALL_OW 135
27184: GO 27254
// if UnitsLinked ( cm [ 2 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27186: LD_VAR 0 2
27190: PUSH
27191: LD_INT 2
27193: ARRAY
27194: PPUSH
27195: CALL_OW 432
27199: PUSH
27200: LD_VAR 0 2
27204: PUSH
27205: LD_INT 3
27207: ARRAY
27208: PPUSH
27209: CALL_OW 432
27213: LESSEQUAL
27214: IFFALSE 27236
// ComLinkTo ( i , cm [ 2 ] ) else
27216: LD_VAR 0 1
27220: PPUSH
27221: LD_VAR 0 2
27225: PUSH
27226: LD_INT 2
27228: ARRAY
27229: PPUSH
27230: CALL_OW 135
27234: GO 27254
// ComLinkTo ( i , cm [ 3 ] ) ; end ;
27236: LD_VAR 0 1
27240: PPUSH
27241: LD_VAR 0 2
27245: PUSH
27246: LD_INT 3
27248: ARRAY
27249: PPUSH
27250: CALL_OW 135
27254: GO 27257
27256: POP
// end ;
27257: GO 26949
27259: POP
27260: POP
// end ; enable ;
27261: ENABLE
// end ;
27262: PPOPN 2
27264: END
// every 0 0$2 + 0 0$0.1 do var i , j , blds , hums , cars ;
27265: GO 27267
27267: DISABLE
27268: LD_INT 0
27270: PPUSH
27271: PPUSH
27272: PPUSH
27273: PPUSH
27274: PPUSH
// begin blds := UnitFilter ( fort , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_not , [ f_occupied ] ] ] ) ;
27275: LD_ADDR_VAR 0 3
27279: PUSH
27280: LD_EXP 119
27284: PPUSH
27285: LD_INT 2
27287: PUSH
27288: LD_INT 30
27290: PUSH
27291: LD_INT 32
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 30
27300: PUSH
27301: LD_INT 31
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 3
27315: PUSH
27316: LD_INT 59
27318: PUSH
27319: EMPTY
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 72
27334: ST_TO_ADDR
// hums := [ ] ;
27335: LD_ADDR_VAR 0 4
27339: PUSH
27340: EMPTY
27341: ST_TO_ADDR
// for i in sol do
27342: LD_ADDR_VAR 0 1
27346: PUSH
27347: LD_EXP 121
27351: PUSH
27352: FOR_IN
27353: IFFALSE 27467
// if ( IsIdle ( i ) and GetBType ( IsInUnit ( i ) ) <> b_bunker and GetBType ( IsInUnit ( i ) ) <> b_breastwork ) or GetBType ( IsInUnit ( i ) ) = b_barracks or GetBType ( IsInUnit ( i ) ) = b_armoury then
27355: LD_VAR 0 1
27359: PPUSH
27360: CALL_OW 316
27364: PUSH
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL_OW 310
27374: PPUSH
27375: CALL_OW 266
27379: PUSH
27380: LD_INT 32
27382: NONEQUAL
27383: AND
27384: PUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 310
27394: PPUSH
27395: CALL_OW 266
27399: PUSH
27400: LD_INT 31
27402: NONEQUAL
27403: AND
27404: PUSH
27405: LD_VAR 0 1
27409: PPUSH
27410: CALL_OW 310
27414: PPUSH
27415: CALL_OW 266
27419: PUSH
27420: LD_INT 5
27422: EQUAL
27423: OR
27424: PUSH
27425: LD_VAR 0 1
27429: PPUSH
27430: CALL_OW 310
27434: PPUSH
27435: CALL_OW 266
27439: PUSH
27440: LD_INT 4
27442: EQUAL
27443: OR
27444: IFFALSE 27465
// hums := hums ^ [ i ] ;
27446: LD_ADDR_VAR 0 4
27450: PUSH
27451: LD_VAR 0 4
27455: PUSH
27456: LD_VAR 0 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: ADD
27464: ST_TO_ADDR
27465: GO 27352
27467: POP
27468: POP
// for i in blds do
27469: LD_ADDR_VAR 0 1
27473: PUSH
27474: LD_VAR 0 3
27478: PUSH
27479: FOR_IN
27480: IFFALSE 27585
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
27482: LD_ADDR_VAR 0 2
27486: PUSH
27487: LD_VAR 0 4
27491: PPUSH
27492: LD_INT 22
27494: PUSH
27495: LD_VAR 0 1
27499: PPUSH
27500: CALL_OW 255
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 91
27511: PUSH
27512: LD_VAR 0 1
27516: PUSH
27517: LD_INT 30
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PPUSH
27529: CALL_OW 72
27533: PPUSH
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 74
27543: ST_TO_ADDR
// ComExitBuilding ( j ) ;
27544: LD_VAR 0 2
27548: PPUSH
27549: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
27553: LD_VAR 0 2
27557: PPUSH
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 180
// hums := hums diff j ;
27567: LD_ADDR_VAR 0 4
27571: PUSH
27572: LD_VAR 0 4
27576: PUSH
27577: LD_VAR 0 2
27581: DIFF
27582: ST_TO_ADDR
// end ;
27583: GO 27479
27585: POP
27586: POP
// cars := UnitFilter ( defence , [ f_not , [ f_occupied ] ] ) ;
27587: LD_ADDR_VAR 0 5
27591: PUSH
27592: LD_EXP 139
27596: PPUSH
27597: LD_INT 3
27599: PUSH
27600: LD_INT 59
27602: PUSH
27603: EMPTY
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PPUSH
27610: CALL_OW 72
27614: ST_TO_ADDR
// for i in cars do
27615: LD_ADDR_VAR 0 1
27619: PUSH
27620: LD_VAR 0 5
27624: PUSH
27625: FOR_IN
27626: IFFALSE 27731
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 20 ] ] ) , i ) ;
27628: LD_ADDR_VAR 0 2
27632: PUSH
27633: LD_VAR 0 4
27637: PPUSH
27638: LD_INT 22
27640: PUSH
27641: LD_VAR 0 1
27645: PPUSH
27646: CALL_OW 255
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 91
27657: PUSH
27658: LD_VAR 0 1
27662: PUSH
27663: LD_INT 20
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PPUSH
27675: CALL_OW 72
27679: PPUSH
27680: LD_VAR 0 1
27684: PPUSH
27685: CALL_OW 74
27689: ST_TO_ADDR
// ComExitBuilding ( j ) ;
27690: LD_VAR 0 2
27694: PPUSH
27695: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
27699: LD_VAR 0 2
27703: PPUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: CALL_OW 180
// hums := hums diff j ;
27713: LD_ADDR_VAR 0 4
27717: PUSH
27718: LD_VAR 0 4
27722: PUSH
27723: LD_VAR 0 2
27727: DIFF
27728: ST_TO_ADDR
// end ;
27729: GO 27625
27731: POP
27732: POP
// blds := UnitFilter ( fort diff blds , [ f_not , [ f_occupied ] ] ) ;
27733: LD_ADDR_VAR 0 3
27737: PUSH
27738: LD_EXP 119
27742: PUSH
27743: LD_VAR 0 3
27747: DIFF
27748: PPUSH
27749: LD_INT 3
27751: PUSH
27752: LD_INT 59
27754: PUSH
27755: EMPTY
27756: LIST
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PPUSH
27762: CALL_OW 72
27766: ST_TO_ADDR
// for i in blds do
27767: LD_ADDR_VAR 0 1
27771: PUSH
27772: LD_VAR 0 3
27776: PUSH
27777: FOR_IN
27778: IFFALSE 27838
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
27780: LD_VAR 0 4
27784: PPUSH
27785: LD_INT 22
27787: PUSH
27788: LD_VAR 0 1
27792: PPUSH
27793: CALL_OW 255
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 91
27804: PUSH
27805: LD_VAR 0 1
27809: PUSH
27810: LD_INT 30
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PPUSH
27822: CALL_OW 72
27826: PPUSH
27827: LD_VAR 0 1
27831: PPUSH
27832: CALL_OW 120
27836: GO 27777
27838: POP
27839: POP
// enable ;
27840: ENABLE
// end ;
27841: PPOPN 5
27843: END
// every 0 0$2 + 0 0$0.5 do var i , j , blds , hums ;
27844: GO 27846
27846: DISABLE
27847: LD_INT 0
27849: PPUSH
27850: PPUSH
27851: PPUSH
27852: PPUSH
// begin blds := dep ;
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_EXP 122
27862: ST_TO_ADDR
// hums := [ ] ;
27863: LD_ADDR_VAR 0 4
27867: PUSH
27868: EMPTY
27869: ST_TO_ADDR
// for i in eng do
27870: LD_ADDR_VAR 0 1
27874: PUSH
27875: LD_EXP 123
27879: PUSH
27880: FOR_IN
27881: IFFALSE 27927
// if IsIdle ( i ) and not IsInUnit ( i ) then
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 316
27892: PUSH
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL_OW 310
27902: NOT
27903: AND
27904: IFFALSE 27925
// hums := hums ^ [ i ] ;
27906: LD_ADDR_VAR 0 4
27910: PUSH
27911: LD_VAR 0 4
27915: PUSH
27916: LD_VAR 0 1
27920: PUSH
27921: EMPTY
27922: LIST
27923: ADD
27924: ST_TO_ADDR
27925: GO 27880
27927: POP
27928: POP
// for i in blds do
27929: LD_ADDR_VAR 0 1
27933: PUSH
27934: LD_VAR 0 3
27938: PUSH
27939: FOR_IN
27940: IFFALSE 28000
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
27942: LD_VAR 0 4
27946: PPUSH
27947: LD_INT 22
27949: PUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 255
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 91
27966: PUSH
27967: LD_VAR 0 1
27971: PUSH
27972: LD_INT 30
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 72
27988: PPUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 120
27998: GO 27939
28000: POP
28001: POP
// enable ;
28002: ENABLE
// end ;
28003: PPOPN 4
28005: END
// every 0 0$2 + 0 0$0.7 do var i , j , blds , hums ;
28006: GO 28008
28008: DISABLE
28009: LD_INT 0
28011: PPUSH
28012: PPUSH
28013: PPUSH
28014: PPUSH
// begin blds := fact ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: LD_EXP 124
28024: ST_TO_ADDR
// hums := [ ] ;
28025: LD_ADDR_VAR 0 4
28029: PUSH
28030: EMPTY
28031: ST_TO_ADDR
// for i in mec do
28032: LD_ADDR_VAR 0 1
28036: PUSH
28037: LD_EXP 125
28041: PUSH
28042: FOR_IN
28043: IFFALSE 28104
// if ( IsIdle ( i ) and not IsInUnit ( i ) ) or not IsInArea ( i , def_base ) then
28045: LD_VAR 0 1
28049: PPUSH
28050: CALL_OW 316
28054: PUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: CALL_OW 310
28064: NOT
28065: AND
28066: PUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: LD_INT 19
28074: PPUSH
28075: CALL_OW 308
28079: NOT
28080: OR
28081: IFFALSE 28102
// hums := hums ^ [ i ] ;
28083: LD_ADDR_VAR 0 4
28087: PUSH
28088: LD_VAR 0 4
28092: PUSH
28093: LD_VAR 0 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: ADD
28101: ST_TO_ADDR
28102: GO 28042
28104: POP
28105: POP
// for i in blds do
28106: LD_ADDR_VAR 0 1
28110: PUSH
28111: LD_VAR 0 3
28115: PUSH
28116: FOR_IN
28117: IFFALSE 28177
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28119: LD_VAR 0 4
28123: PPUSH
28124: LD_INT 22
28126: PUSH
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 255
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 91
28143: PUSH
28144: LD_VAR 0 1
28148: PUSH
28149: LD_INT 30
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PPUSH
28161: CALL_OW 72
28165: PPUSH
28166: LD_VAR 0 1
28170: PPUSH
28171: CALL_OW 120
28175: GO 28116
28177: POP
28178: POP
// enable ;
28179: ENABLE
// end ;
28180: PPOPN 4
28182: END
// every 0 0$2 + 0 0$0.35 do var i , j , bld , hums ;
28183: GO 28185
28185: DISABLE
28186: LD_INT 0
28188: PPUSH
28189: PPUSH
28190: PPUSH
28191: PPUSH
// begin if ct < 2 then
28192: LD_EXP 142
28196: PUSH
28197: LD_INT 2
28199: LESS
28200: IFFALSE 28404
// if ctrl then
28202: LD_EXP 120
28206: IFFALSE 28404
// begin bld := ctrl [ 1 ] ;
28208: LD_ADDR_VAR 0 3
28212: PUSH
28213: LD_EXP 120
28217: PUSH
28218: LD_INT 1
28220: ARRAY
28221: ST_TO_ADDR
// hums := [ ] ;
28222: LD_ADDR_VAR 0 4
28226: PUSH
28227: EMPTY
28228: ST_TO_ADDR
// for i in get_x_best ( mec , mec , skill_mechanical , 0 , false ) do
28229: LD_ADDR_VAR 0 1
28233: PUSH
28234: LD_EXP 125
28238: PPUSH
28239: LD_EXP 125
28243: PPUSH
28244: LD_INT 3
28246: PPUSH
28247: LD_INT 0
28249: PPUSH
28250: LD_INT 0
28252: PPUSH
28253: CALL 10062 0 5
28257: PUSH
28258: FOR_IN
28259: IFFALSE 28322
// if GetBType ( IsInUnit ( i ) ) <> b_control_tower and GetType ( IsInUnit ( i ) ) <> unit_vehicle then
28261: LD_VAR 0 1
28265: PPUSH
28266: CALL_OW 310
28270: PPUSH
28271: CALL_OW 266
28275: PUSH
28276: LD_INT 36
28278: NONEQUAL
28279: PUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: CALL_OW 310
28289: PPUSH
28290: CALL_OW 247
28294: PUSH
28295: LD_INT 2
28297: NONEQUAL
28298: AND
28299: IFFALSE 28320
// hums := hums ^ [ i ] ;
28301: LD_ADDR_VAR 0 4
28305: PUSH
28306: LD_VAR 0 4
28310: PUSH
28311: LD_VAR 0 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: ADD
28319: ST_TO_ADDR
28320: GO 28258
28322: POP
28323: POP
// ct := ct union get_x_best ( UnitFilter ( mec , [ [ f_dist , bld , 50 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
28324: LD_ADDR_EXP 142
28328: PUSH
28329: LD_EXP 142
28333: PUSH
28334: LD_EXP 125
28338: PPUSH
28339: LD_INT 91
28341: PUSH
28342: LD_VAR 0 3
28346: PUSH
28347: LD_INT 50
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: PPUSH
28358: CALL_OW 72
28362: PPUSH
28363: LD_INT 2
28365: PPUSH
28366: LD_INT 3
28368: PPUSH
28369: LD_INT 0
28371: PPUSH
28372: LD_INT 0
28374: PPUSH
28375: CALL 10062 0 5
28379: UNION
28380: ST_TO_ADDR
// remove_from_humans ( ct ) ;
28381: LD_EXP 142
28385: PPUSH
28386: CALL 31787 0 1
// ComEnterUnit ( ct , bld ) ;
28390: LD_EXP 142
28394: PPUSH
28395: LD_VAR 0 3
28399: PPUSH
28400: CALL_OW 120
// end ; enable ;
28404: ENABLE
// end ;
28405: PPOPN 4
28407: END
// every 0 0$2 + 0 0$0.9 do var i , j , blds , hums ;
28408: GO 28410
28410: DISABLE
28411: LD_INT 0
28413: PPUSH
28414: PPUSH
28415: PPUSH
28416: PPUSH
// begin blds := lab ;
28417: LD_ADDR_VAR 0 3
28421: PUSH
28422: LD_EXP 126
28426: ST_TO_ADDR
// hums := [ ] ;
28427: LD_ADDR_VAR 0 4
28431: PUSH
28432: EMPTY
28433: ST_TO_ADDR
// for i in sci do
28434: LD_ADDR_VAR 0 1
28438: PUSH
28439: LD_EXP 127
28443: PUSH
28444: FOR_IN
28445: IFFALSE 28491
// if IsIdle ( i ) and not IsInUnit ( i ) then
28447: LD_VAR 0 1
28451: PPUSH
28452: CALL_OW 316
28456: PUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL_OW 310
28466: NOT
28467: AND
28468: IFFALSE 28489
// hums := hums ^ [ i ] ;
28470: LD_ADDR_VAR 0 4
28474: PUSH
28475: LD_VAR 0 4
28479: PUSH
28480: LD_VAR 0 1
28484: PUSH
28485: EMPTY
28486: LIST
28487: ADD
28488: ST_TO_ADDR
28489: GO 28444
28491: POP
28492: POP
// for i in blds do
28493: LD_ADDR_VAR 0 1
28497: PUSH
28498: LD_VAR 0 3
28502: PUSH
28503: FOR_IN
28504: IFFALSE 28564
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28506: LD_VAR 0 4
28510: PPUSH
28511: LD_INT 22
28513: PUSH
28514: LD_VAR 0 1
28518: PPUSH
28519: CALL_OW 255
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 91
28530: PUSH
28531: LD_VAR 0 1
28535: PUSH
28536: LD_INT 30
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PPUSH
28548: CALL_OW 72
28552: PPUSH
28553: LD_VAR 0 1
28557: PPUSH
28558: CALL_OW 120
28562: GO 28503
28564: POP
28565: POP
// enable ;
28566: ENABLE
// end ;
28567: PPOPN 4
28569: END
// every 0 0$2 + 0 0$0.8 do var i , j , blds , hums ;
28570: GO 28572
28572: DISABLE
28573: LD_INT 0
28575: PPUSH
28576: PPUSH
28577: PPUSH
28578: PPUSH
// begin for i in a3 ^ a4 do
28579: LD_ADDR_VAR 0 1
28583: PUSH
28584: LD_EXP 135
28588: PUSH
28589: LD_EXP 136
28593: ADD
28594: PUSH
28595: FOR_IN
28596: IFFALSE 28813
// begin if IsIdle ( i ) and not IsInArea ( i , def_base ) and not IsInUnit ( i ) then
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 316
28607: PUSH
28608: LD_VAR 0 1
28612: PPUSH
28613: LD_INT 19
28615: PPUSH
28616: CALL_OW 308
28620: NOT
28621: AND
28622: PUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 310
28632: NOT
28633: AND
28634: IFFALSE 28690
// if GetDistUnitArea ( i , abase3 ) < GetDistUnitArea ( i , abase4 ) then
28636: LD_VAR 0 1
28640: PPUSH
28641: LD_INT 6
28643: PPUSH
28644: CALL_OW 299
28648: PUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: LD_INT 7
28656: PPUSH
28657: CALL_OW 299
28661: LESS
28662: IFFALSE 28678
// ComMoveToArea ( i , abase3 ) else
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_INT 6
28671: PPUSH
28672: CALL_OW 113
28676: GO 28690
// ComMoveToArea ( i , abase4 ) ;
28678: LD_VAR 0 1
28682: PPUSH
28683: LD_INT 7
28685: PPUSH
28686: CALL_OW 113
// if IsIdle ( IsInUnit ( i ) ) and not IsInArea ( IsInUnit ( i ) , def_base ) and IsInUnit ( i ) then
28690: LD_VAR 0 1
28694: PPUSH
28695: CALL_OW 310
28699: PPUSH
28700: CALL_OW 316
28704: PUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: CALL_OW 310
28714: PPUSH
28715: LD_INT 19
28717: PPUSH
28718: CALL_OW 308
28722: NOT
28723: AND
28724: PUSH
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 310
28734: AND
28735: IFFALSE 28811
// if GetDistUnitArea ( IsInUnit ( i ) , abase3 ) < GetDistUnitArea ( IsInUnit ( i ) , abase4 ) then
28737: LD_VAR 0 1
28741: PPUSH
28742: CALL_OW 310
28746: PPUSH
28747: LD_INT 6
28749: PPUSH
28750: CALL_OW 299
28754: PUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 310
28764: PPUSH
28765: LD_INT 7
28767: PPUSH
28768: CALL_OW 299
28772: LESS
28773: IFFALSE 28794
// ComMoveToArea ( IsInUnit ( i ) , abase3 ) else
28775: LD_VAR 0 1
28779: PPUSH
28780: CALL_OW 310
28784: PPUSH
28785: LD_INT 6
28787: PPUSH
28788: CALL_OW 113
28792: GO 28811
// ComMoveToArea ( IsInUnit ( i ) , abase4 ) ;
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 310
28803: PPUSH
28804: LD_INT 7
28806: PPUSH
28807: CALL_OW 113
// end ;
28811: GO 28595
28813: POP
28814: POP
// enable ;
28815: ENABLE
// end ; end_of_file
28816: PPOPN 4
28818: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = you then
28819: LD_VAR 0 2
28823: PPUSH
28824: CALL_OW 255
28828: PUSH
28829: LD_EXP 1
28833: EQUAL
28834: IFFALSE 28872
// case tech of tech_MatPred :
28836: LD_VAR 0 1
28840: PUSH
28841: LD_INT 9
28843: DOUBLE
28844: EQUAL
28845: IFTRUE 28849
28847: GO 28856
28849: POP
// DNoMaterial ; tech_TauField :
28850: CALL 1852 0 0
28854: GO 28872
28856: LD_INT 30
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28864
28862: GO 28871
28864: POP
// DStasis ; end ;
28865: CALL 5155 0 0
28869: GO 28872
28871: POP
// end ;
28872: PPOPN 2
28874: END
// on EndTheMissionRaised ( aa ) do begin end_the_mission_allowed := false ;
28875: LD_ADDR_OWVAR 57
28879: PUSH
28880: LD_INT 0
28882: ST_TO_ADDR
// VyhraExit ;
28883: CALL 374 0 0
// end ;
28887: PPOPN 1
28889: END
// on UnitDestroyed ( un ) do begin remove_from_vehicles ( un ) ;
28890: LD_VAR 0 1
28894: PPUSH
28895: CALL 31957 0 1
// remove_from_humans ( un ) ;
28899: LD_VAR 0 1
28903: PPUSH
28904: CALL 31787 0 1
// remove_from_builds ( un ) ;
28908: LD_VAR 0 1
28912: PPUSH
28913: CALL 31601 0 1
// if un = Burlak then
28917: LD_VAR 0 1
28921: PUSH
28922: LD_EXP 61
28926: EQUAL
28927: IFFALSE 28936
// YouLost ( Burlak ) ;
28929: LD_STRING Burlak
28931: PPUSH
28932: CALL_OW 104
// if un = Gleb and utok_na_gleba then
28936: LD_VAR 0 1
28940: PUSH
28941: LD_EXP 65
28945: EQUAL
28946: PUSH
28947: LD_EXP 60
28951: AND
28952: IFFALSE 28961
// YouLost ( Gleb ) ;
28954: LD_STRING Gleb
28956: PPUSH
28957: CALL_OW 104
// if un = Vsevolod then
28961: LD_VAR 0 1
28965: PUSH
28966: LD_EXP 70
28970: EQUAL
28971: IFFALSE 29025
// begin mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ Vsevolod ] ;
28973: LD_ADDR_EXP 41
28977: PUSH
28978: LD_EXP 41
28982: PUSH
28983: LD_STRING Vsevolod
28985: PUSH
28986: EMPTY
28987: LIST
28988: ADD
28989: ST_TO_ADDR
// SetSide ( Vsevolod2 , GetSide ( Vsevolod ) ) ;
28990: LD_EXP 71
28994: PPUSH
28995: LD_EXP 70
28999: PPUSH
29000: CALL_OW 255
29004: PPUSH
29005: CALL_OW 235
// if kecali then
29009: LD_EXP 54
29013: IFFALSE 29021
// DDieVsev2 else
29015: CALL 5127 0 0
29019: GO 29025
// DDieVsev1 ;
29021: CALL 5082 0 0
// end ; if un in Vsevolod_uderna_group then
29025: LD_VAR 0 1
29029: PUSH
29030: LD_EXP 12
29034: IN
29035: IFFALSE 29080
// begin Vsevolod_uderna_group := Vsevolod_uderna_group diff un ;
29037: LD_ADDR_EXP 12
29041: PUSH
29042: LD_EXP 12
29046: PUSH
29047: LD_VAR 0 1
29051: DIFF
29052: ST_TO_ADDR
// mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ vsev_g_ & ( mrtvi_vsevolodaci + 1 ) ] ;
29053: LD_ADDR_EXP 41
29057: PUSH
29058: LD_EXP 41
29062: PUSH
29063: LD_STRING vsev_g_
29065: PUSH
29066: LD_EXP 41
29070: PUSH
29071: LD_INT 1
29073: PLUS
29074: STR
29075: PUSH
29076: EMPTY
29077: LIST
29078: ADD
29079: ST_TO_ADDR
// end ; end ;
29080: PPOPN 1
29082: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = ai then
29083: LD_VAR 0 1
29087: PPUSH
29088: CALL_OW 255
29092: PUSH
29093: LD_EXP 6
29097: EQUAL
29098: IFFALSE 29153
// begin case GetType ( un ) of unit_vehicle :
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 247
29109: PUSH
29110: LD_INT 2
29112: DOUBLE
29113: EQUAL
29114: IFTRUE 29118
29116: GO 29121
29118: POP
// ; unit_human :
29119: GO 29153
29121: LD_INT 1
29123: DOUBLE
29124: EQUAL
29125: IFTRUE 29129
29127: GO 29141
29129: POP
// begin zachranka ( un ) ;
29130: LD_VAR 0 1
29134: PPUSH
29135: CALL 32015 0 1
// end ; unit_building :
29139: GO 29153
29141: LD_INT 3
29143: DOUBLE
29144: EQUAL
29145: IFTRUE 29149
29147: GO 29152
29149: POP
// begin end ; end ;
29150: GO 29153
29152: POP
// end ; if MyGodMode and GetSide ( un ) = you then
29153: LD_EXP 144
29157: PUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: CALL_OW 255
29167: PUSH
29168: LD_EXP 1
29172: EQUAL
29173: AND
29174: IFFALSE 29188
// SetLives ( un , 1000 ) ;
29176: LD_VAR 0 1
29180: PPUSH
29181: LD_INT 1000
29183: PPUSH
29184: CALL_OW 234
// end ;
29188: PPOPN 1
29190: END
// export MyGodMode ; on VehicleCaptured ( vehnew , vehold , origside , hum ) do begin if origside = ai then
29191: LD_VAR 0 3
29195: PUSH
29196: LD_EXP 6
29200: EQUAL
29201: IFFALSE 29212
// begin remove_from_vehicles ( vehold ) ;
29203: LD_VAR 0 2
29207: PPUSH
29208: CALL 31957 0 1
// end ; end ;
29212: PPOPN 4
29214: END
// on BuildingCaptured ( build , origside , eng ) do begin if origside = ai then
29215: LD_VAR 0 2
29219: PUSH
29220: LD_EXP 6
29224: EQUAL
29225: IFFALSE 29280
// begin remove_from_builds ( build ) ;
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL 31601 0 1
// if GetBType ( build ) = b_siberite_mine then
29236: LD_VAR 0 1
29240: PPUSH
29241: CALL_OW 266
29245: PUSH
29246: LD_INT 30
29248: EQUAL
29249: IFFALSE 29280
// SetResourceVisibility ( GetX ( build ) , GetY ( build ) , you ) ;
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 250
29260: PPUSH
29261: LD_VAR 0 1
29265: PPUSH
29266: CALL_OW 251
29270: PPUSH
29271: LD_EXP 1
29275: PPUSH
29276: CALL_OW 441
// end ; if origside = you then
29280: LD_VAR 0 2
29284: PUSH
29285: LD_EXP 1
29289: EQUAL
29290: IFFALSE 29301
// begin add_to_builds ( build ) ;
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL 30895 0 1
// end ; end ;
29301: PPOPN 3
29303: END
// export was_DMatPrediction ; on BuildingComplete ( build ) do begin if GetSide ( build ) = ai then
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL_OW 255
29313: PUSH
29314: LD_EXP 6
29318: EQUAL
29319: IFFALSE 29330
// begin add_to_builds ( build ) ;
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL 30895 0 1
// end ; if GetSide ( build ) = you then
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 255
29339: PUSH
29340: LD_EXP 1
29344: EQUAL
29345: IFFALSE 29381
// begin if not was_DMatPrediction and GetBType ( build ) = b_lab then
29347: LD_EXP 145
29351: NOT
29352: PUSH
29353: LD_VAR 0 1
29357: PPUSH
29358: CALL_OW 266
29362: PUSH
29363: LD_INT 6
29365: EQUAL
29366: AND
29367: IFFALSE 29381
// begin was_DMatPrediction := true ;
29369: LD_ADDR_EXP 145
29373: PUSH
29374: LD_INT 1
29376: ST_TO_ADDR
// DMatPrediction ;
29377: CALL 1702 0 0
// end ; end ; end ;
29381: PPOPN 1
29383: END
// on UpgradeComplete ( build ) do begin if GetSide ( build ) = you and GetBType ( build ) in all_labs then
29384: LD_VAR 0 1
29388: PPUSH
29389: CALL_OW 255
29393: PUSH
29394: LD_EXP 1
29398: EQUAL
29399: PUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 266
29409: PUSH
29410: LD_EXP 40
29414: IN
29415: AND
29416: IFFALSE 29468
// if not byl_sib_research and ( ( GetLabKind ( build , 1 ) = b_lab_spacetime or GetLabKind ( build , 2 ) = b_lab_spacetime ) ) then
29418: LD_EXP 53
29422: NOT
29423: PUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: LD_INT 1
29431: PPUSH
29432: CALL_OW 268
29436: PUSH
29437: LD_INT 14
29439: EQUAL
29440: PUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: LD_INT 2
29448: PPUSH
29449: CALL_OW 268
29453: PUSH
29454: LD_INT 14
29456: EQUAL
29457: OR
29458: AND
29459: IFFALSE 29468
// begin DSibResearch ;
29461: CALL 2061 0 0
// disable ( 66 ) ;
29465: LD_INT 66
29467: DISABLE_MARKED
// end ; end ;
29468: PPOPN 1
29470: END
// on VehicleConstructed ( veh , fact ) do begin if GetSide ( veh ) = ai then
29471: LD_VAR 0 1
29475: PPUSH
29476: CALL_OW 255
29480: PUSH
29481: LD_EXP 6
29485: EQUAL
29486: IFFALSE 29544
// begin if veh in attack then
29488: LD_VAR 0 1
29492: PUSH
29493: LD_EXP 138
29497: IN
29498: IFFALSE 29514
// ComMoveToArea ( veh , pro_att ) else
29500: LD_VAR 0 1
29504: PPUSH
29505: LD_INT 13
29507: PPUSH
29508: CALL_OW 113
29512: GO 29526
// ComMoveToArea ( veh , pro_def ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_INT 12
29521: PPUSH
29522: CALL_OW 113
// AddComExitVehicle ( veh ) ;
29526: LD_VAR 0 1
29530: PPUSH
29531: CALL_OW 181
// add_to_vehicles ( veh ) ;
29535: LD_VAR 0 1
29539: PPUSH
29540: CALL 30803 0 1
// end ; end ;
29544: PPOPN 2
29546: END
// on LeaveBuilding ( b , un ) do begin if GetSide ( un ) = you and GetBType ( b ) = b_control_tower then
29547: LD_VAR 0 2
29551: PPUSH
29552: CALL_OW 255
29556: PUSH
29557: LD_EXP 1
29561: EQUAL
29562: PUSH
29563: LD_VAR 0 1
29567: PPUSH
29568: CALL_OW 266
29572: PUSH
29573: LD_INT 36
29575: EQUAL
29576: AND
29577: IFFALSE 29588
// add_to_humans ( un ) ;
29579: LD_VAR 0 2
29583: PPUSH
29584: CALL 30467 0 1
// end ;
29588: PPOPN 2
29590: END
// on SailEvent ( num ) do begin case num of 0 :
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 0
29598: DOUBLE
29599: EQUAL
29600: IFTRUE 29604
29602: GO 29607
29604: POP
// begin end ; normal1_utok :
29605: GO 29710
29607: LD_EXP 24
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29624
29617: POP
// begin f_normal1_utok ;
29618: CALL 13086 0 0
// end ; normal2_utok :
29622: GO 29710
29624: LD_EXP 25
29628: DOUBLE
29629: EQUAL
29630: IFTRUE 29634
29632: GO 29641
29634: POP
// begin f_normal2_utok ;
29635: CALL 13415 0 0
// end ; normal3_utok :
29639: GO 29710
29641: LD_EXP 26
29645: DOUBLE
29646: EQUAL
29647: IFTRUE 29651
29649: GO 29658
29651: POP
// begin f_normal3_utok ;
29652: CALL 13755 0 0
// end ; normal4_utok :
29656: GO 29710
29658: LD_EXP 27
29662: DOUBLE
29663: EQUAL
29664: IFTRUE 29668
29666: GO 29675
29668: POP
// begin f_normal4_utok ;
29669: CALL 14106 0 0
// end ; vsevolod_attack :
29673: GO 29710
29675: LD_EXP 28
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29692
29685: POP
// begin f_vsevolod_utok ;
29686: CALL 14446 0 0
// end ; vsevolod_final_attack :
29690: GO 29710
29692: LD_EXP 29
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29709
29702: POP
// begin f_vsevolod_final_utok ;
29703: CALL 14782 0 0
// end ; end ;
29707: GO 29710
29709: POP
// end ;
29710: PPOPN 1
29712: END
// on Contact ( side1 , side2 ) do var a ;
29713: LD_INT 0
29715: PPUSH
// begin if IsLive ( a1eng ) then
29716: LD_EXP 114
29720: PPUSH
29721: CALL_OW 300
29725: IFFALSE 29945
// if ( side1 = you and side2 = ai ) or ( side2 = you and side1 = ai ) then
29727: LD_VAR 0 1
29731: PUSH
29732: LD_EXP 1
29736: EQUAL
29737: PUSH
29738: LD_VAR 0 2
29742: PUSH
29743: LD_EXP 6
29747: EQUAL
29748: AND
29749: PUSH
29750: LD_VAR 0 2
29754: PUSH
29755: LD_EXP 1
29759: EQUAL
29760: PUSH
29761: LD_VAR 0 1
29765: PUSH
29766: LD_EXP 6
29770: EQUAL
29771: AND
29772: OR
29773: IFFALSE 29945
// begin if a1eng then
29775: LD_EXP 114
29779: IFFALSE 29945
// begin remove_from_humans ( a1eng ) ;
29781: LD_EXP 114
29785: PPUSH
29786: CALL 31787 0 1
// while IsInUnit ( a1eng ) and IsLive ( a1eng ) do
29790: LD_EXP 114
29794: PPUSH
29795: CALL_OW 310
29799: PUSH
29800: LD_EXP 114
29804: PPUSH
29805: CALL_OW 300
29809: AND
29810: IFFALSE 29830
// begin ComExitBuilding ( a1eng ) ;
29812: LD_EXP 114
29816: PPUSH
29817: CALL_OW 122
// wait ( 0 0$1 ) ;
29821: LD_INT 35
29823: PPUSH
29824: CALL_OW 67
// end ;
29828: GO 29790
// while IsLive ( sib_dul ) and IsLive ( a1eng ) do
29830: LD_EXP 143
29834: PPUSH
29835: CALL_OW 300
29839: PUSH
29840: LD_EXP 114
29844: PPUSH
29845: CALL_OW 300
29849: AND
29850: IFFALSE 29924
// begin a := GetLives ( sib_dul ) - 25 * difficulty ;
29852: LD_ADDR_VAR 0 3
29856: PUSH
29857: LD_EXP 143
29861: PPUSH
29862: CALL_OW 256
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_OWVAR 67
29874: MUL
29875: MINUS
29876: ST_TO_ADDR
// if a > 1 then
29877: LD_VAR 0 3
29881: PUSH
29882: LD_INT 1
29884: GREATER
29885: IFFALSE 29901
// SetLives ( sib_dul , a ) ;
29887: LD_EXP 143
29891: PPUSH
29892: LD_VAR 0 3
29896: PPUSH
29897: CALL_OW 234
// ComDismantle ( a1eng , sib_dul ) ;
29901: LD_EXP 114
29905: PPUSH
29906: LD_EXP 143
29910: PPUSH
29911: CALL_OW 167
// wait ( 0 0$1 ) ;
29915: LD_INT 35
29917: PPUSH
29918: CALL_OW 67
// end ;
29922: GO 29830
// AddComEnterUnit ( a1eng , Rudepot ) ;
29924: LD_EXP 114
29928: PPUSH
29929: LD_INT 58
29931: PPUSH
29932: CALL_OW 180
// add_to_humans ( a1eng ) ;
29936: LD_EXP 114
29940: PPUSH
29941: CALL 30467 0 1
// end ; end ; end ;
29945: PPOPN 3
29947: END
// var mcdef1 , mcdef2 , mcatt1 ; on McDefendTakesUnit ( mcid , un ) do begin if mcid = idDef1 then
29948: LD_VAR 0 1
29952: PUSH
29953: LD_EXP 96
29957: EQUAL
29958: IFFALSE 29976
// mcdef1 := mcdef1 union un ;
29960: LD_ADDR_LOC 21
29964: PUSH
29965: LD_LOC 21
29969: PUSH
29970: LD_VAR 0 2
29974: UNION
29975: ST_TO_ADDR
// if mcid = idDef2 then
29976: LD_VAR 0 1
29980: PUSH
29981: LD_EXP 97
29985: EQUAL
29986: IFFALSE 30004
// mcdef2 := mcdef2 union un ;
29988: LD_ADDR_LOC 22
29992: PUSH
29993: LD_LOC 22
29997: PUSH
29998: LD_VAR 0 2
30002: UNION
30003: ST_TO_ADDR
// if mcid = idAtt1 then
30004: LD_VAR 0 1
30008: PUSH
30009: LD_EXP 93
30013: EQUAL
30014: IFFALSE 30032
// mcatt1 := mcatt1 union un ;
30016: LD_ADDR_LOC 23
30020: PUSH
30021: LD_LOC 23
30025: PUSH
30026: LD_VAR 0 2
30030: UNION
30031: ST_TO_ADDR
// Remove_From_Humans ( un ) ;
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL 31787 0 1
// Remove_From_Vehicles ( un ) ;
30041: LD_VAR 0 2
30045: PPUSH
30046: CALL 31957 0 1
// Remove_From_Builds ( un ) ;
30050: LD_VAR 0 2
30054: PPUSH
30055: CALL 31601 0 1
// end ;
30059: PPOPN 2
30061: END
// on McDefendReturnsUnit ( mcid , un ) do begin if mcid = idDef1 then
30062: LD_VAR 0 1
30066: PUSH
30067: LD_EXP 96
30071: EQUAL
30072: IFFALSE 30090
// mcdef1 := mcdef1 diff un ;
30074: LD_ADDR_LOC 21
30078: PUSH
30079: LD_LOC 21
30083: PUSH
30084: LD_VAR 0 2
30088: DIFF
30089: ST_TO_ADDR
// if mcid = idDef2 then
30090: LD_VAR 0 1
30094: PUSH
30095: LD_EXP 97
30099: EQUAL
30100: IFFALSE 30118
// mcdef2 := mcdef2 diff un ;
30102: LD_ADDR_LOC 22
30106: PUSH
30107: LD_LOC 22
30111: PUSH
30112: LD_VAR 0 2
30116: DIFF
30117: ST_TO_ADDR
// if mcid = idAtt1 then
30118: LD_VAR 0 1
30122: PUSH
30123: LD_EXP 93
30127: EQUAL
30128: IFFALSE 30146
// mcatt1 := mcatt1 diff un ;
30130: LD_ADDR_LOC 23
30134: PUSH
30135: LD_LOC 23
30139: PUSH
30140: LD_VAR 0 2
30144: DIFF
30145: ST_TO_ADDR
// add_to_Humans ( un ) ;
30146: LD_VAR 0 2
30150: PPUSH
30151: CALL 30467 0 1
// add_to_Vehicles ( un ) ;
30155: LD_VAR 0 2
30159: PPUSH
30160: CALL 30803 0 1
// add_to_Builds ( un ) ;
30164: LD_VAR 0 2
30168: PPUSH
30169: CALL 30895 0 1
// end ;
30173: PPOPN 2
30175: END
// on McRegistryResultChanges ( mcid , count , strength ) do var i ;
30176: LD_INT 0
30178: PPUSH
// begin if mcid = idAtt1 then
30179: LD_VAR 0 1
30183: PUSH
30184: LD_EXP 93
30188: EQUAL
30189: IFFALSE 30301
// begin if count = 0 then
30191: LD_VAR 0 2
30195: PUSH
30196: LD_INT 0
30198: EQUAL
30199: IFFALSE 30252
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30201: LD_ADDR_VAR 0 4
30205: PUSH
30206: LD_INT 26
30208: PPUSH
30209: LD_INT 22
30211: PUSH
30212: LD_EXP 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: EMPTY
30222: LIST
30223: PPUSH
30224: CALL_OW 70
30228: PUSH
30229: FOR_IN
30230: IFFALSE 30248
// PriorityAttack ( ai , i ) ;
30232: LD_EXP 6
30236: PPUSH
30237: LD_VAR 0 4
30241: PPUSH
30242: CALL_OW 470
30246: GO 30229
30248: POP
30249: POP
// end else
30250: GO 30301
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30252: LD_ADDR_VAR 0 4
30256: PUSH
30257: LD_INT 26
30259: PPUSH
30260: LD_INT 22
30262: PUSH
30263: LD_EXP 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: EMPTY
30273: LIST
30274: PPUSH
30275: CALL_OW 70
30279: PUSH
30280: FOR_IN
30281: IFFALSE 30299
// NormalAttack ( ai , i ) ;
30283: LD_EXP 6
30287: PPUSH
30288: LD_VAR 0 4
30292: PPUSH
30293: CALL_OW 472
30297: GO 30280
30299: POP
30300: POP
// end ; end ; end ;
30301: PPOPN 4
30303: END
// on McAttackOutOfFuel ( mcid , un ) do begin Attack := Attack diff un ;
30304: LD_ADDR_EXP 138
30308: PUSH
30309: LD_EXP 138
30313: PUSH
30314: LD_VAR 0 2
30318: DIFF
30319: ST_TO_ADDR
// while IsLive ( un ) and not IsInArea ( un , near_base ) do
30320: LD_VAR 0 2
30324: PPUSH
30325: CALL_OW 300
30329: PUSH
30330: LD_VAR 0 2
30334: PPUSH
30335: LD_INT 2
30337: PPUSH
30338: CALL_OW 308
30342: NOT
30343: AND
30344: IFFALSE 30367
// begin ComMoveToArea ( un , near_base ) ;
30346: LD_VAR 0 2
30350: PPUSH
30351: LD_INT 2
30353: PPUSH
30354: CALL_OW 113
// wait ( 0 0$2 ) ;
30358: LD_INT 70
30360: PPUSH
30361: CALL_OW 67
// end ;
30365: GO 30320
// end ;
30367: PPOPN 2
30369: END
// export function add_to ( un ) ; var i ; begin
30370: LD_INT 0
30372: PPUSH
30373: PPUSH
// for i in un do
30374: LD_ADDR_VAR 0 3
30378: PUSH
30379: LD_VAR 0 1
30383: PUSH
30384: FOR_IN
30385: IFFALSE 30460
// case GetType ( i ) of unit_human :
30387: LD_VAR 0 3
30391: PPUSH
30392: CALL_OW 247
30396: PUSH
30397: LD_INT 1
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30417
30405: POP
// add_to_humans ( i ) ; unit_vehicle :
30406: LD_VAR 0 3
30410: PPUSH
30411: CALL 30467 0 1
30415: GO 30458
30417: LD_INT 2
30419: DOUBLE
30420: EQUAL
30421: IFTRUE 30425
30423: GO 30437
30425: POP
// add_to_vehicles ( i ) ; unit_building :
30426: LD_VAR 0 3
30430: PPUSH
30431: CALL 30803 0 1
30435: GO 30458
30437: LD_INT 3
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30457
30445: POP
// add_to_builds ( i ) ; end ;
30446: LD_VAR 0 3
30450: PPUSH
30451: CALL 30895 0 1
30455: GO 30458
30457: POP
30458: GO 30384
30460: POP
30461: POP
// end ;
30462: LD_VAR 0 2
30466: RET
// export function add_to_humans ( un ) ; var i ; begin
30467: LD_INT 0
30469: PPUSH
30470: PPUSH
// if GetSide ( un ) = ai then
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 255
30480: PUSH
30481: LD_EXP 6
30485: EQUAL
30486: IFFALSE 30798
// for i in un do
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: LD_VAR 0 1
30497: PUSH
30498: FOR_IN
30499: IFFALSE 30796
// begin case Getclass ( i ) of class_soldier :
30501: LD_VAR 0 3
30505: PPUSH
30506: CALL_OW 257
30510: PUSH
30511: LD_INT 1
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 30538
30519: POP
// sol := sol union i ; class_engineer :
30520: LD_ADDR_EXP 121
30524: PUSH
30525: LD_EXP 121
30529: PUSH
30530: LD_VAR 0 3
30534: UNION
30535: ST_TO_ADDR
30536: GO 30620
30538: LD_INT 2
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30565
30546: POP
// eng := eng union i ; class_mechanic :
30547: LD_ADDR_EXP 123
30551: PUSH
30552: LD_EXP 123
30556: PUSH
30557: LD_VAR 0 3
30561: UNION
30562: ST_TO_ADDR
30563: GO 30620
30565: LD_INT 3
30567: DOUBLE
30568: EQUAL
30569: IFTRUE 30573
30571: GO 30592
30573: POP
// mec := mec union i ; class_scientistic :
30574: LD_ADDR_EXP 125
30578: PUSH
30579: LD_EXP 125
30583: PUSH
30584: LD_VAR 0 3
30588: UNION
30589: ST_TO_ADDR
30590: GO 30620
30592: LD_INT 4
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30619
30600: POP
// sci := sci union i ; end ;
30601: LD_ADDR_EXP 127
30605: PUSH
30606: LD_EXP 127
30610: PUSH
30611: LD_VAR 0 3
30615: UNION
30616: ST_TO_ADDR
30617: GO 30620
30619: POP
// case GetTag ( i ) of 1 :
30620: LD_VAR 0 3
30624: PPUSH
30625: CALL_OW 110
30629: PUSH
30630: LD_INT 1
30632: DOUBLE
30633: EQUAL
30634: IFTRUE 30638
30636: GO 30657
30638: POP
// a1 := a1 union i ; 2 :
30639: LD_ADDR_EXP 133
30643: PUSH
30644: LD_EXP 133
30648: PUSH
30649: LD_VAR 0 3
30653: UNION
30654: ST_TO_ADDR
30655: GO 30794
30657: LD_INT 2
30659: DOUBLE
30660: EQUAL
30661: IFTRUE 30665
30663: GO 30684
30665: POP
// a2 := a2 union i ; 3 :
30666: LD_ADDR_EXP 134
30670: PUSH
30671: LD_EXP 134
30675: PUSH
30676: LD_VAR 0 3
30680: UNION
30681: ST_TO_ADDR
30682: GO 30794
30684: LD_INT 3
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30711
30692: POP
// a3 := a3 union i ; 4 :
30693: LD_ADDR_EXP 135
30697: PUSH
30698: LD_EXP 135
30702: PUSH
30703: LD_VAR 0 3
30707: UNION
30708: ST_TO_ADDR
30709: GO 30794
30711: LD_INT 4
30713: DOUBLE
30714: EQUAL
30715: IFTRUE 30719
30717: GO 30738
30719: POP
// a4 := a4 union i ; 5 :
30720: LD_ADDR_EXP 136
30724: PUSH
30725: LD_EXP 136
30729: PUSH
30730: LD_VAR 0 3
30734: UNION
30735: ST_TO_ADDR
30736: GO 30794
30738: LD_INT 5
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30765
30746: POP
// a5 := a5 union i ; else
30747: LD_ADDR_EXP 137
30751: PUSH
30752: LD_EXP 137
30756: PUSH
30757: LD_VAR 0 3
30761: UNION
30762: ST_TO_ADDR
30763: GO 30794
30765: POP
// begin a3 := a3 union i ;
30766: LD_ADDR_EXP 135
30770: PUSH
30771: LD_EXP 135
30775: PUSH
30776: LD_VAR 0 3
30780: UNION
30781: ST_TO_ADDR
// SetTag ( i , 3 ) ;
30782: LD_VAR 0 3
30786: PPUSH
30787: LD_INT 3
30789: PPUSH
30790: CALL_OW 109
// end ; end ; end ;
30794: GO 30498
30796: POP
30797: POP
// end ;
30798: LD_VAR 0 2
30802: RET
// export function add_to_vehicles ( un ) ; var i ; begin
30803: LD_INT 0
30805: PPUSH
30806: PPUSH
// for i in un do
30807: LD_ADDR_VAR 0 3
30811: PUSH
30812: LD_VAR 0 1
30816: PUSH
30817: FOR_IN
30818: IFFALSE 30888
// begin if GetSide ( un ) = ai then
30820: LD_VAR 0 1
30824: PPUSH
30825: CALL_OW 255
30829: PUSH
30830: LD_EXP 6
30834: EQUAL
30835: IFFALSE 30886
// if GetControl ( i ) = control_remote then
30837: LD_VAR 0 3
30841: PPUSH
30842: CALL_OW 263
30846: PUSH
30847: LD_INT 2
30849: EQUAL
30850: IFFALSE 30870
// begin attack := attack union i ;
30852: LD_ADDR_EXP 138
30856: PUSH
30857: LD_EXP 138
30861: PUSH
30862: LD_VAR 0 3
30866: UNION
30867: ST_TO_ADDR
// end else
30868: GO 30886
// begin defence := defence union i ;
30870: LD_ADDR_EXP 139
30874: PUSH
30875: LD_EXP 139
30879: PUSH
30880: LD_VAR 0 3
30884: UNION
30885: ST_TO_ADDR
// end ; end ;
30886: GO 30817
30888: POP
30889: POP
// end ;
30890: LD_VAR 0 2
30894: RET
// export function add_to_builds ( un ) ; var i , j , bt ; begin
30895: LD_INT 0
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
// for i in un do
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: LD_VAR 0 1
30910: PUSH
30911: FOR_IN
30912: IFFALSE 31497
// begin if GetSide ( un ) = ai then
30914: LD_VAR 0 1
30918: PPUSH
30919: CALL_OW 255
30923: PUSH
30924: LD_EXP 6
30928: EQUAL
30929: IFFALSE 31006
// for j in builds1 do
30931: LD_ADDR_VAR 0 4
30935: PUSH
30936: LD_EXP 104
30940: PUSH
30941: FOR_IN
30942: IFFALSE 31004
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
30944: LD_VAR 0 3
30948: PPUSH
30949: CALL_OW 250
30953: PUSH
30954: LD_VAR 0 4
30958: PUSH
30959: LD_INT 2
30961: ARRAY
30962: EQUAL
30963: PUSH
30964: LD_VAR 0 3
30968: PPUSH
30969: CALL_OW 251
30973: PUSH
30974: LD_VAR 0 4
30978: PUSH
30979: LD_INT 3
30981: ARRAY
30982: EQUAL
30983: AND
30984: IFFALSE 31002
// b1 := b1 union i ;
30986: LD_ADDR_EXP 128
30990: PUSH
30991: LD_EXP 128
30995: PUSH
30996: LD_VAR 0 3
31000: UNION
31001: ST_TO_ADDR
31002: GO 30941
31004: POP
31005: POP
// for j in builds2 do
31006: LD_ADDR_VAR 0 4
31010: PUSH
31011: LD_EXP 105
31015: PUSH
31016: FOR_IN
31017: IFFALSE 31079
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31019: LD_VAR 0 3
31023: PPUSH
31024: CALL_OW 250
31028: PUSH
31029: LD_VAR 0 4
31033: PUSH
31034: LD_INT 2
31036: ARRAY
31037: EQUAL
31038: PUSH
31039: LD_VAR 0 3
31043: PPUSH
31044: CALL_OW 251
31048: PUSH
31049: LD_VAR 0 4
31053: PUSH
31054: LD_INT 3
31056: ARRAY
31057: EQUAL
31058: AND
31059: IFFALSE 31077
// b2 := b2 union i ;
31061: LD_ADDR_EXP 129
31065: PUSH
31066: LD_EXP 129
31070: PUSH
31071: LD_VAR 0 3
31075: UNION
31076: ST_TO_ADDR
31077: GO 31016
31079: POP
31080: POP
// for j in builds3 do
31081: LD_ADDR_VAR 0 4
31085: PUSH
31086: LD_EXP 106
31090: PUSH
31091: FOR_IN
31092: IFFALSE 31154
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31094: LD_VAR 0 3
31098: PPUSH
31099: CALL_OW 250
31103: PUSH
31104: LD_VAR 0 4
31108: PUSH
31109: LD_INT 2
31111: ARRAY
31112: EQUAL
31113: PUSH
31114: LD_VAR 0 3
31118: PPUSH
31119: CALL_OW 251
31123: PUSH
31124: LD_VAR 0 4
31128: PUSH
31129: LD_INT 3
31131: ARRAY
31132: EQUAL
31133: AND
31134: IFFALSE 31152
// b3 := b3 union i ;
31136: LD_ADDR_EXP 130
31140: PUSH
31141: LD_EXP 130
31145: PUSH
31146: LD_VAR 0 3
31150: UNION
31151: ST_TO_ADDR
31152: GO 31091
31154: POP
31155: POP
// for j in builds4 do
31156: LD_ADDR_VAR 0 4
31160: PUSH
31161: LD_EXP 107
31165: PUSH
31166: FOR_IN
31167: IFFALSE 31229
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31169: LD_VAR 0 3
31173: PPUSH
31174: CALL_OW 250
31178: PUSH
31179: LD_VAR 0 4
31183: PUSH
31184: LD_INT 2
31186: ARRAY
31187: EQUAL
31188: PUSH
31189: LD_VAR 0 3
31193: PPUSH
31194: CALL_OW 251
31198: PUSH
31199: LD_VAR 0 4
31203: PUSH
31204: LD_INT 3
31206: ARRAY
31207: EQUAL
31208: AND
31209: IFFALSE 31227
// b4 := b4 union i ;
31211: LD_ADDR_EXP 131
31215: PUSH
31216: LD_EXP 131
31220: PUSH
31221: LD_VAR 0 3
31225: UNION
31226: ST_TO_ADDR
31227: GO 31166
31229: POP
31230: POP
// for j in builds5 do
31231: LD_ADDR_VAR 0 4
31235: PUSH
31236: LD_EXP 108
31240: PUSH
31241: FOR_IN
31242: IFFALSE 31304
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31244: LD_VAR 0 3
31248: PPUSH
31249: CALL_OW 250
31253: PUSH
31254: LD_VAR 0 4
31258: PUSH
31259: LD_INT 2
31261: ARRAY
31262: EQUAL
31263: PUSH
31264: LD_VAR 0 3
31268: PPUSH
31269: CALL_OW 251
31273: PUSH
31274: LD_VAR 0 4
31278: PUSH
31279: LD_INT 3
31281: ARRAY
31282: EQUAL
31283: AND
31284: IFFALSE 31302
// b5 := b5 union i ;
31286: LD_ADDR_EXP 132
31290: PUSH
31291: LD_EXP 132
31295: PUSH
31296: LD_VAR 0 3
31300: UNION
31301: ST_TO_ADDR
31302: GO 31241
31304: POP
31305: POP
// bt := GetBType ( i ) ;
31306: LD_ADDR_VAR 0 5
31310: PUSH
31311: LD_VAR 0 3
31315: PPUSH
31316: CALL_OW 266
31320: ST_TO_ADDR
// if bt = b_barracks or bt = b_armoury or bt = b_bunker or bt = b_breastwork then
31321: LD_VAR 0 5
31325: PUSH
31326: LD_INT 5
31328: EQUAL
31329: PUSH
31330: LD_VAR 0 5
31334: PUSH
31335: LD_INT 4
31337: EQUAL
31338: OR
31339: PUSH
31340: LD_VAR 0 5
31344: PUSH
31345: LD_INT 32
31347: EQUAL
31348: OR
31349: PUSH
31350: LD_VAR 0 5
31354: PUSH
31355: LD_INT 31
31357: EQUAL
31358: OR
31359: IFFALSE 31377
// fort := fort union i ;
31361: LD_ADDR_EXP 119
31365: PUSH
31366: LD_EXP 119
31370: PUSH
31371: LD_VAR 0 3
31375: UNION
31376: ST_TO_ADDR
// if bt = b_lab or bt = b_lab_full or bt = b_lab_half then
31377: LD_VAR 0 5
31381: PUSH
31382: LD_INT 6
31384: EQUAL
31385: PUSH
31386: LD_VAR 0 5
31390: PUSH
31391: LD_INT 8
31393: EQUAL
31394: OR
31395: PUSH
31396: LD_VAR 0 5
31400: PUSH
31401: LD_INT 7
31403: EQUAL
31404: OR
31405: IFFALSE 31423
// lab := lab union i ;
31407: LD_ADDR_EXP 126
31411: PUSH
31412: LD_EXP 126
31416: PUSH
31417: LD_VAR 0 3
31421: UNION
31422: ST_TO_ADDR
// if bt = b_workshop or bt = b_factory then
31423: LD_VAR 0 5
31427: PUSH
31428: LD_INT 2
31430: EQUAL
31431: PUSH
31432: LD_VAR 0 5
31436: PUSH
31437: LD_INT 3
31439: EQUAL
31440: OR
31441: IFFALSE 31459
// fact := fact union i ;
31443: LD_ADDR_EXP 124
31447: PUSH
31448: LD_EXP 124
31452: PUSH
31453: LD_VAR 0 3
31457: UNION
31458: ST_TO_ADDR
// if bt = b_depot or bt = b_warehouse then
31459: LD_VAR 0 5
31463: PUSH
31464: LD_INT 0
31466: EQUAL
31467: PUSH
31468: LD_VAR 0 5
31472: PUSH
31473: LD_INT 1
31475: EQUAL
31476: OR
31477: IFFALSE 31495
// dep := dep union i ;
31479: LD_ADDR_EXP 122
31483: PUSH
31484: LD_EXP 122
31488: PUSH
31489: LD_VAR 0 3
31493: UNION
31494: ST_TO_ADDR
// end ;
31495: GO 30911
31497: POP
31498: POP
// end ;
31499: LD_VAR 0 2
31503: RET
// export function remove_from ( un ) ; var i ; begin
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
// for i in un do
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: LD_VAR 0 1
31517: PUSH
31518: FOR_IN
31519: IFFALSE 31594
// case GetType ( i ) of unit_human :
31521: LD_VAR 0 3
31525: PPUSH
31526: CALL_OW 247
31530: PUSH
31531: LD_INT 1
31533: DOUBLE
31534: EQUAL
31535: IFTRUE 31539
31537: GO 31551
31539: POP
// remove_from_humans ( i ) ; unit_vehicle :
31540: LD_VAR 0 3
31544: PPUSH
31545: CALL 31787 0 1
31549: GO 31592
31551: LD_INT 2
31553: DOUBLE
31554: EQUAL
31555: IFTRUE 31559
31557: GO 31571
31559: POP
// remove_from_vehicles ( i ) ; unit_building :
31560: LD_VAR 0 3
31564: PPUSH
31565: CALL 31957 0 1
31569: GO 31592
31571: LD_INT 3
31573: DOUBLE
31574: EQUAL
31575: IFTRUE 31579
31577: GO 31591
31579: POP
// remove_from_builds ( i ) ; end ;
31580: LD_VAR 0 3
31584: PPUSH
31585: CALL 31601 0 1
31589: GO 31592
31591: POP
31592: GO 31518
31594: POP
31595: POP
// end ;
31596: LD_VAR 0 2
31600: RET
// export function remove_from_builds ( un ) ; var i ; begin
31601: LD_INT 0
31603: PPUSH
31604: PPUSH
// for i in un do
31605: LD_ADDR_VAR 0 3
31609: PUSH
31610: LD_VAR 0 1
31614: PUSH
31615: FOR_IN
31616: IFFALSE 31780
// begin fact := fact diff i ;
31618: LD_ADDR_EXP 124
31622: PUSH
31623: LD_EXP 124
31627: PUSH
31628: LD_VAR 0 3
31632: DIFF
31633: ST_TO_ADDR
// fort := fort diff i ;
31634: LD_ADDR_EXP 119
31638: PUSH
31639: LD_EXP 119
31643: PUSH
31644: LD_VAR 0 3
31648: DIFF
31649: ST_TO_ADDR
// lab := lab diff i ;
31650: LD_ADDR_EXP 126
31654: PUSH
31655: LD_EXP 126
31659: PUSH
31660: LD_VAR 0 3
31664: DIFF
31665: ST_TO_ADDR
// dep := dep diff i ;
31666: LD_ADDR_EXP 122
31670: PUSH
31671: LD_EXP 122
31675: PUSH
31676: LD_VAR 0 3
31680: DIFF
31681: ST_TO_ADDR
// ctrl := ctrl diff i ;
31682: LD_ADDR_EXP 120
31686: PUSH
31687: LD_EXP 120
31691: PUSH
31692: LD_VAR 0 3
31696: DIFF
31697: ST_TO_ADDR
// b1 := b1 diff i ;
31698: LD_ADDR_EXP 128
31702: PUSH
31703: LD_EXP 128
31707: PUSH
31708: LD_VAR 0 3
31712: DIFF
31713: ST_TO_ADDR
// b2 := b2 diff i ;
31714: LD_ADDR_EXP 129
31718: PUSH
31719: LD_EXP 129
31723: PUSH
31724: LD_VAR 0 3
31728: DIFF
31729: ST_TO_ADDR
// b3 := b3 diff i ;
31730: LD_ADDR_EXP 130
31734: PUSH
31735: LD_EXP 130
31739: PUSH
31740: LD_VAR 0 3
31744: DIFF
31745: ST_TO_ADDR
// b4 := b4 diff i ;
31746: LD_ADDR_EXP 131
31750: PUSH
31751: LD_EXP 131
31755: PUSH
31756: LD_VAR 0 3
31760: DIFF
31761: ST_TO_ADDR
// b5 := b5 diff i ;
31762: LD_ADDR_EXP 132
31766: PUSH
31767: LD_EXP 132
31771: PUSH
31772: LD_VAR 0 3
31776: DIFF
31777: ST_TO_ADDR
// end ;
31778: GO 31615
31780: POP
31781: POP
// end ;
31782: LD_VAR 0 2
31786: RET
// export function remove_from_humans ( un ) ; var i ; begin
31787: LD_INT 0
31789: PPUSH
31790: PPUSH
// for i in un do
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_VAR 0 1
31800: PUSH
31801: FOR_IN
31802: IFFALSE 31950
// begin sol := sol diff i ;
31804: LD_ADDR_EXP 121
31808: PUSH
31809: LD_EXP 121
31813: PUSH
31814: LD_VAR 0 3
31818: DIFF
31819: ST_TO_ADDR
// eng := eng diff i ;
31820: LD_ADDR_EXP 123
31824: PUSH
31825: LD_EXP 123
31829: PUSH
31830: LD_VAR 0 3
31834: DIFF
31835: ST_TO_ADDR
// mec := mec diff i ;
31836: LD_ADDR_EXP 125
31840: PUSH
31841: LD_EXP 125
31845: PUSH
31846: LD_VAR 0 3
31850: DIFF
31851: ST_TO_ADDR
// sci := sci diff i ;
31852: LD_ADDR_EXP 127
31856: PUSH
31857: LD_EXP 127
31861: PUSH
31862: LD_VAR 0 3
31866: DIFF
31867: ST_TO_ADDR
// a1 := a1 diff i ;
31868: LD_ADDR_EXP 133
31872: PUSH
31873: LD_EXP 133
31877: PUSH
31878: LD_VAR 0 3
31882: DIFF
31883: ST_TO_ADDR
// a2 := a2 diff i ;
31884: LD_ADDR_EXP 134
31888: PUSH
31889: LD_EXP 134
31893: PUSH
31894: LD_VAR 0 3
31898: DIFF
31899: ST_TO_ADDR
// a3 := a3 diff i ;
31900: LD_ADDR_EXP 135
31904: PUSH
31905: LD_EXP 135
31909: PUSH
31910: LD_VAR 0 3
31914: DIFF
31915: ST_TO_ADDR
// a4 := a4 diff i ;
31916: LD_ADDR_EXP 136
31920: PUSH
31921: LD_EXP 136
31925: PUSH
31926: LD_VAR 0 3
31930: DIFF
31931: ST_TO_ADDR
// a5 := a5 diff i ;
31932: LD_ADDR_EXP 137
31936: PUSH
31937: LD_EXP 137
31941: PUSH
31942: LD_VAR 0 3
31946: DIFF
31947: ST_TO_ADDR
// end ;
31948: GO 31801
31950: POP
31951: POP
// end ;
31952: LD_VAR 0 2
31956: RET
// export function remove_from_vehicles ( un ) ; var i ; begin
31957: LD_INT 0
31959: PPUSH
31960: PPUSH
// for i in un do
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_VAR 0 1
31970: PUSH
31971: FOR_IN
31972: IFFALSE 32008
// begin attack := attack diff i ;
31974: LD_ADDR_EXP 138
31978: PUSH
31979: LD_EXP 138
31983: PUSH
31984: LD_VAR 0 3
31988: DIFF
31989: ST_TO_ADDR
// defence := defence diff i ;
31990: LD_ADDR_EXP 139
31994: PUSH
31995: LD_EXP 139
31999: PUSH
32000: LD_VAR 0 3
32004: DIFF
32005: ST_TO_ADDR
// end ;
32006: GO 31971
32008: POP
32009: POP
// end ; end_of_file
32010: LD_VAR 0 2
32014: RET
// export function zachranka ( un ) ; begin
32015: LD_INT 0
32017: PPUSH
// if not FilterAllUnits ( [ [ f_not , [ f_side , ai ] ] , [ f_dist , un , 24 ] ] ) then
32018: LD_INT 3
32020: PUSH
32021: LD_INT 22
32023: PUSH
32024: LD_EXP 6
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 91
32039: PUSH
32040: LD_VAR 0 1
32044: PUSH
32045: LD_INT 24
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PPUSH
32057: CALL_OW 69
32061: NOT
32062: IFFALSE 32135
// begin ComHeal ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) , un ) ;
32064: LD_EXP 127
32068: PPUSH
32069: LD_INT 91
32071: PUSH
32072: LD_VAR 0 1
32076: PUSH
32077: LD_INT 30
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: PUSH
32085: EMPTY
32086: LIST
32087: PPUSH
32088: CALL_OW 72
32092: PPUSH
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 128
// AddComReturn ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) ) ;
32102: LD_EXP 127
32106: PPUSH
32107: LD_INT 91
32109: PUSH
32110: LD_VAR 0 1
32114: PUSH
32115: LD_INT 30
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: PPUSH
32126: CALL_OW 72
32130: PPUSH
32131: CALL_OW 204
// end ; end ; end_of_file
32135: LD_VAR 0 2
32139: RET
// var padlo ; function buch_crate ; var a , h , c ; begin
32140: LD_INT 0
32142: PPUSH
32143: PPUSH
32144: PPUSH
32145: PPUSH
// a := IsInUnit ( Burlak ) ;
32146: LD_ADDR_VAR 0 2
32150: PUSH
32151: LD_EXP 61
32155: PPUSH
32156: CALL_OW 310
32160: ST_TO_ADDR
// if not a then
32161: LD_VAR 0 2
32165: NOT
32166: IFFALSE 32178
// a := Burlak ;
32168: LD_ADDR_VAR 0 2
32172: PUSH
32173: LD_EXP 61
32177: ST_TO_ADDR
// repeat c := c + 1 ;
32178: LD_ADDR_VAR 0 4
32182: PUSH
32183: LD_VAR 0 4
32187: PUSH
32188: LD_INT 1
32190: PLUS
32191: ST_TO_ADDR
// h := RandHexArea ( bedny , false ) ;
32192: LD_ADDR_VAR 0 3
32196: PUSH
32197: LD_INT 29
32199: PPUSH
32200: LD_INT 0
32202: PPUSH
32203: CALL_OW 16
32207: ST_TO_ADDR
// until c > 100 or GetDistUnitXY ( Burlak , h [ 1 ] , h [ 2 ] ) < 25 or GetDistUnitArea ( Burlak , bedny ) > 15 ;
32208: LD_VAR 0 4
32212: PUSH
32213: LD_INT 100
32215: GREATER
32216: PUSH
32217: LD_EXP 61
32221: PPUSH
32222: LD_VAR 0 3
32226: PUSH
32227: LD_INT 1
32229: ARRAY
32230: PPUSH
32231: LD_VAR 0 3
32235: PUSH
32236: LD_INT 2
32238: ARRAY
32239: PPUSH
32240: CALL_OW 297
32244: PUSH
32245: LD_INT 25
32247: LESS
32248: OR
32249: PUSH
32250: LD_EXP 61
32254: PPUSH
32255: LD_INT 29
32257: PPUSH
32258: CALL_OW 299
32262: PUSH
32263: LD_INT 15
32265: GREATER
32266: OR
32267: IFFALSE 32178
// CreateCratesXY ( 5 , h [ 1 ] , h [ 2 ] , true ) ;
32269: LD_INT 5
32271: PPUSH
32272: LD_VAR 0 3
32276: PUSH
32277: LD_INT 1
32279: ARRAY
32280: PPUSH
32281: LD_VAR 0 3
32285: PUSH
32286: LD_INT 2
32288: ARRAY
32289: PPUSH
32290: LD_INT 1
32292: PPUSH
32293: CALL_OW 54
// padlo := padlo + 1 ;
32297: LD_ADDR_LOC 24
32301: PUSH
32302: LD_LOC 24
32306: PUSH
32307: LD_INT 1
32309: PLUS
32310: ST_TO_ADDR
// end ;
32311: LD_VAR 0 1
32315: RET
// every 0 0$53 do
32316: GO 32318
32318: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32319: LD_LOC 24
32323: PUSH
32324: LD_INT 4
32326: LESS
32327: PUSH
32328: LD_LOC 24
32332: PUSH
32333: LD_INT 4
32335: LESS
32336: PUSH
32337: LD_LOC 24
32341: PUSH
32342: LD_INT 3
32344: LESS
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: PUSH
32351: LD_OWVAR 67
32355: ARRAY
32356: IFFALSE 32428
// case ( tick div 1 1$0 ) of 0 :
32358: LD_OWVAR 1
32362: PUSH
32363: LD_INT 2100
32365: DIV
32366: PUSH
32367: LD_INT 0
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32382
32375: POP
// buch_crate ; 3 :
32376: CALL 32140 0 0
32380: GO 32428
32382: LD_INT 3
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32397
32390: POP
// buch_crate ; 7 :
32391: CALL 32140 0 0
32395: GO 32428
32397: LD_INT 7
32399: DOUBLE
32400: EQUAL
32401: IFTRUE 32405
32403: GO 32412
32405: POP
// buch_crate ; 12 :
32406: CALL 32140 0 0
32410: GO 32428
32412: LD_INT 12
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32427
32420: POP
// buch_crate ; end ;
32421: CALL 32140 0 0
32425: GO 32428
32427: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32428: LD_LOC 24
32432: PUSH
32433: LD_INT 4
32435: LESS
32436: PUSH
32437: LD_LOC 24
32441: PUSH
32442: LD_INT 4
32444: LESS
32445: PUSH
32446: LD_LOC 24
32450: PUSH
32451: LD_INT 3
32453: LESS
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: LIST
32459: PUSH
32460: LD_OWVAR 67
32464: ARRAY
32465: IFFALSE 32468
// enable ;
32467: ENABLE
// end ;
32468: END
// every 0 0$5 do
32469: GO 32471
32471: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32472: LD_LOC 24
32476: PUSH
32477: LD_INT 4
32479: LESS
32480: PUSH
32481: LD_LOC 24
32485: PUSH
32486: LD_INT 4
32488: LESS
32489: PUSH
32490: LD_LOC 24
32494: PUSH
32495: LD_INT 3
32497: LESS
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: PUSH
32504: LD_OWVAR 67
32508: ARRAY
32509: IFFALSE 32631
// case true of GetTechProgress ( tech_MatPred , you ) > 95 :
32511: LD_INT 1
32513: PUSH
32514: LD_INT 9
32516: PPUSH
32517: LD_EXP 1
32521: PPUSH
32522: CALL_OW 326
32526: PUSH
32527: LD_INT 95
32529: GREATER
32530: DOUBLE
32531: EQUAL
32532: IFTRUE 32536
32534: GO 32543
32536: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 70 :
32537: CALL 32140 0 0
32541: GO 32631
32543: LD_INT 9
32545: PPUSH
32546: LD_EXP 1
32550: PPUSH
32551: CALL_OW 326
32555: PUSH
32556: LD_INT 70
32558: GREATER
32559: DOUBLE
32560: EQUAL
32561: IFTRUE 32565
32563: GO 32572
32565: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 40 :
32566: CALL 32140 0 0
32570: GO 32631
32572: LD_INT 9
32574: PPUSH
32575: LD_EXP 1
32579: PPUSH
32580: CALL_OW 326
32584: PUSH
32585: LD_INT 40
32587: GREATER
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32601
32594: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 1 :
32595: CALL 32140 0 0
32599: GO 32631
32601: LD_INT 9
32603: PPUSH
32604: LD_EXP 1
32608: PPUSH
32609: CALL_OW 326
32613: PUSH
32614: LD_INT 1
32616: GREATER
32617: DOUBLE
32618: EQUAL
32619: IFTRUE 32623
32621: GO 32630
32623: POP
// buch_crate ; end ;
32624: CALL 32140 0 0
32628: GO 32631
32630: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32631: LD_LOC 24
32635: PUSH
32636: LD_INT 4
32638: LESS
32639: PUSH
32640: LD_LOC 24
32644: PUSH
32645: LD_INT 4
32647: LESS
32648: PUSH
32649: LD_LOC 24
32653: PUSH
32654: LD_INT 3
32656: LESS
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: PUSH
32663: LD_OWVAR 67
32667: ARRAY
32668: IFFALSE 32671
// enable ;
32670: ENABLE
// end ; end_of_file
32671: END
// every 0 0$2 + 0 0$0.1 do
32672: GO 32674
32674: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
32675: LD_INT 22
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 25
32690: PUSH
32691: LD_INT 12
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 25
32700: PUSH
32701: LD_INT 16
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 25
32710: PUSH
32711: LD_INT 15
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 25
32720: PUSH
32721: LD_INT 17
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PPUSH
32739: CALL_OW 69
32743: PUSH
32744: LD_INT 22
32746: PUSH
32747: LD_INT 3
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 21
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 25
32772: PUSH
32773: LD_INT 12
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 25
32782: PUSH
32783: LD_INT 16
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 25
32792: PUSH
32793: LD_INT 15
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 25
32802: PUSH
32803: LD_INT 17
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: PPUSH
32826: CALL_OW 69
32830: GREATER
32831: IFFALSE 32842
// begin SetAchievement ( ACH_POTA ) ;
32833: LD_STRING ACH_POTA
32835: PPUSH
32836: CALL_OW 543
// exit ;
32840: GO 32843
// end ; enable ;
32842: ENABLE
// end ;
32843: END
