// export You , Amici , Amici2 , Arabi ; export everybody ; starting begin You = 3 ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 3
   7: ST_TO_ADDR
// Amici = 1 ;
   8: LD_ADDR_EXP 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// Arabi = 2 ;
  16: LD_ADDR_EXP 4
  20: PUSH
  21: LD_INT 2
  23: ST_TO_ADDR
// Amici2 = 4 ;
  24: LD_ADDR_EXP 3
  28: PUSH
  29: LD_INT 4
  31: ST_TO_ADDR
// RandomizeAll ;
  32: CALL_OW 11
// debug_strings = [ ] ;
  36: LD_ADDR_OWVAR 48
  40: PUSH
  41: EMPTY
  42: ST_TO_ADDR
// InitBc ;
  43: CALL_OW 21
// InitHc ;
  47: CALL_OW 19
// InitUc ;
  51: CALL_OW 18
// InitVc ;
  55: CALL_OW 20
// SET_DIFFICULTY ;
  59: CALL 10980 0 0
// load_postav ;
  63: CALL 1183 0 0
// load_promenne ;
  67: CALL 1452 0 0
// vytvor_araby ;
  71: CALL 7587 0 0
// vytvor_amiky ;
  75: CALL 7846 0 0
// cislo_baze = vyber_misto_pro_zakladnu ;
  79: LD_ADDR_EXP 8
  83: PUSH
  84: CALL 1592 0 0
  88: ST_TO_ADDR
// place_resource ;
  89: CALL 4328 0 0
// Ru_enter = vyber_lidi_pro_misi ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: CALL 5440 0 0
 102: ST_TO_ADDR
// create_first_utok ;
 103: CALL 8786 0 0
// create_second_utok ;
 107: CALL 9046 0 0
// create_third_utok ;
 111: CALL 9462 0 0
// create_rusky_konvoj ( Ru_enter ) ;
 115: LD_EXP 9
 119: PPUSH
 120: CALL 6851 0 1
// placni_rusy_na_zacatek ;
 124: CALL 4414 0 0
// InGameOff ;
 128: CALL_OW 9
// end ;
 132: END
// on UnitDestroyed ( un ) do begin if un = bur then
 133: LD_VAR 0 1
 137: PUSH
 138: LD_EXP 11
 142: EQUAL
 143: IFFALSE 152
// YouLost ( Burlak ) ;
 145: LD_STRING Burlak
 147: PPUSH
 148: CALL_OW 104
// enable ;
 152: ENABLE
// end ;
 153: PPOPN 1
 155: END
// export function prohra_vedci ; begin
 156: LD_INT 0
 158: PPUSH
// YouLost ( Scientists ) ;
 159: LD_STRING Scientists
 161: PPUSH
 162: CALL_OW 104
// end ;
 166: LD_VAR 0 1
 170: RET
// on EndTheMissionRaised ( void ) do begin end_the_mission_allowed := false ;
 171: LD_ADDR_OWVAR 57
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// konec_mise ;
 179: CALL 186 0 0
// end ;
 183: PPOPN 1
 185: END
// export function konec_mise ; var i , pom , pom1 ; var drv ; var all_people ; var plab ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
// DisableExclamations ;
 195: CALL_OW 474
// gained_medals := [ ] ;
 199: LD_ADDR_OWVAR 61
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// missing_medals := [ ] ;
 206: LD_ADDR_OWVAR 62
 210: PUSH
 211: EMPTY
 212: ST_TO_ADDR
// if IsOK ( masha ) and GetSide ( masha ) = You then
 213: LD_EXP 10
 217: PPUSH
 218: CALL_OW 302
 222: PUSH
 223: LD_EXP 10
 227: PPUSH
 228: CALL_OW 255
 232: PUSH
 233: LD_EXP 1
 237: EQUAL
 238: AND
 239: IFFALSE 253
// AddMedal ( Masha , 1 ) else
 241: LD_STRING Masha
 243: PPUSH
 244: LD_INT 1
 246: PPUSH
 247: CALL_OW 101
 251: GO 264
// AddMedal ( Masha , - 1 ) ;
 253: LD_STRING Masha
 255: PPUSH
 256: LD_INT 1
 258: NEG
 259: PPUSH
 260: CALL_OW 101
// plab = 0 ;
 264: LD_ADDR_VAR 0 7
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
 272: LD_ADDR_VAR 0 2
 276: PUSH
 277: LD_INT 48
 279: PUSH
 280: LD_INT 55
 282: PUSH
 283: LD_INT 56
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: FOR_IN
 292: IFFALSE 327
// if GetSide ( i ) = You then
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 255
 303: PUSH
 304: LD_EXP 1
 308: EQUAL
 309: IFFALSE 325
// plab = plab + 1 ;
 311: LD_ADDR_VAR 0 7
 315: PUSH
 316: LD_VAR 0 7
 320: PUSH
 321: LD_INT 1
 323: PLUS
 324: ST_TO_ADDR
 325: GO 291
 327: POP
 328: POP
// if plab >= 3 then
 329: LD_VAR 0 7
 333: PUSH
 334: LD_INT 3
 336: GREATEREQUAL
 337: IFFALSE 351
// AddMedal ( Capture , 1 ) else
 339: LD_STRING Capture
 341: PPUSH
 342: LD_INT 1
 344: PPUSH
 345: CALL_OW 101
 349: GO 362
// AddMedal ( Capture , - 1 ) ;
 351: LD_STRING Capture
 353: PPUSH
 354: LD_INT 1
 356: NEG
 357: PPUSH
 358: CALL_OW 101
// if GetTech ( tech_TauRad , You ) = state_researched or GetTech ( tech_SpacAnom , You ) = state_researched then
 362: LD_INT 28
 364: PPUSH
 365: LD_EXP 1
 369: PPUSH
 370: CALL_OW 321
 374: PUSH
 375: LD_INT 2
 377: EQUAL
 378: PUSH
 379: LD_INT 29
 381: PPUSH
 382: LD_EXP 1
 386: PPUSH
 387: CALL_OW 321
 391: PUSH
 392: LD_INT 2
 394: EQUAL
 395: OR
 396: IFFALSE 410
// AddMedal ( Invention , 1 ) else
 398: LD_STRING Invention
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 101
 408: GO 421
// AddMedal ( Invention , - 1 ) ;
 410: LD_STRING Invention
 412: PPUSH
 413: LD_INT 1
 415: NEG
 416: PPUSH
 417: CALL_OW 101
// GiveMedals ( Main ) ;
 421: LD_STRING Main
 423: PPUSH
 424: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 22
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: LD_INT 21
 447: PUSH
 448: LD_INT 1
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PPUSH
 459: CALL_OW 69
 463: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
 464: LD_ADDR_VAR 0 4
 468: PUSH
 469: LD_INT 22
 471: PUSH
 472: LD_EXP 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 21
 483: PUSH
 484: LD_INT 2
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: ST_TO_ADDR
// for i in pom1 do
 500: LD_ADDR_VAR 0 2
 504: PUSH
 505: LD_VAR 0 4
 509: PUSH
 510: FOR_IN
 511: IFFALSE 570
// if IsDrivenBy ( i ) then
 513: LD_VAR 0 2
 517: PPUSH
 518: CALL_OW 311
 522: IFFALSE 568
// begin drv = IsDrivenBy ( i ) ;
 524: LD_ADDR_VAR 0 5
 528: PUSH
 529: LD_VAR 0 2
 533: PPUSH
 534: CALL_OW 311
 538: ST_TO_ADDR
// if not ( drv in pom ) then
 539: LD_VAR 0 5
 543: PUSH
 544: LD_VAR 0 3
 548: IN
 549: NOT
 550: IFFALSE 568
// pom = pom ^ drv ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_VAR 0 5
 566: ADD
 567: ST_TO_ADDR
// end ;
 568: GO 510
 570: POP
 571: POP
// all_people = pom ;
 572: LD_ADDR_VAR 0 6
 576: PUSH
 577: LD_VAR 0 3
 581: ST_TO_ADDR
// all_people = all_people diff UnitFilter ( all_people , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ) ;
 582: LD_ADDR_VAR 0 6
 586: PUSH
 587: LD_VAR 0 6
 591: PUSH
 592: LD_VAR 0 6
 596: PPUSH
 597: LD_INT 2
 599: PUSH
 600: LD_INT 25
 602: PUSH
 603: LD_INT 12
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 25
 612: PUSH
 613: LD_INT 16
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 25
 622: PUSH
 623: LD_INT 15
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PPUSH
 636: CALL_OW 72
 640: DIFF
 641: ST_TO_ADDR
// RewardPeople ( all_people ) ;
 642: LD_VAR 0 6
 646: PPUSH
 647: CALL_OW 43
// SaveCharacters ( bur , Burlak ) ;
 651: LD_EXP 11
 655: PPUSH
 656: LD_STRING Burlak
 658: PPUSH
 659: CALL_OW 38
// SaveCharacters ( dol , Dolgov ) ;
 663: LD_EXP 12
 667: PPUSH
 668: LD_STRING Dolgov
 670: PPUSH
 671: CALL_OW 38
// SaveCharacters ( kapisto , Kapitsova ) ;
 675: LD_EXP 13
 679: PPUSH
 680: LD_STRING Kapitsova
 682: PPUSH
 683: CALL_OW 38
// SaveCharacters ( petro , Petrosyan ) ;
 687: LD_EXP 14
 691: PPUSH
 692: LD_STRING Petrosyan
 694: PPUSH
 695: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
 699: LD_EXP 15
 703: PPUSH
 704: LD_STRING Popov
 706: PPUSH
 707: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
 711: LD_EXP 16
 715: PPUSH
 716: LD_STRING Belkov
 718: PPUSH
 719: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
 723: LD_EXP 17
 727: PPUSH
 728: LD_STRING Gnyevko
 730: PPUSH
 731: CALL_OW 38
// SaveCharacters ( kiri , Kirilenkova ) ;
 735: LD_EXP 18
 739: PPUSH
 740: LD_STRING Kirilenkova
 742: PPUSH
 743: CALL_OW 38
// SaveCharacters ( koval , Kovalyuk ) ;
 747: LD_EXP 19
 751: PPUSH
 752: LD_STRING Kovalyuk
 754: PPUSH
 755: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
 759: LD_EXP 20
 763: PPUSH
 764: LD_STRING Scholtze
 766: PPUSH
 767: CALL_OW 38
// SaveCharacters ( kuzmov , Kuzmov ) ;
 771: LD_EXP 21
 775: PPUSH
 776: LD_STRING Kuzmov
 778: PPUSH
 779: CALL_OW 38
// SaveCharacters ( karam , Karamazov ) ;
 783: LD_EXP 22
 787: PPUSH
 788: LD_STRING Karamazov
 790: PPUSH
 791: CALL_OW 38
// SaveCharacters ( petrov , Petrovova ) ;
 795: LD_EXP 23
 799: PPUSH
 800: LD_STRING Petrovova
 802: PPUSH
 803: CALL_OW 38
// SaveCharacters ( gleb , Gleb ) ;
 807: LD_EXP 24
 811: PPUSH
 812: LD_STRING Gleb
 814: PPUSH
 815: CALL_OW 38
// SaveCharacters ( lipsch , Lipschin ) ;
 819: LD_EXP 25
 823: PPUSH
 824: LD_STRING Lipschin
 826: PPUSH
 827: CALL_OW 38
// SaveCharacters ( tito , Titov ) ;
 831: LD_EXP 26
 835: PPUSH
 836: LD_STRING Titov
 838: PPUSH
 839: CALL_OW 38
// SaveCharacters ( xavier , Xavier ) ;
 843: LD_EXP 27
 847: PPUSH
 848: LD_STRING Xavier
 850: PPUSH
 851: CALL_OW 38
// SaveCharacters ( obluk , Oblukov ) ;
 855: LD_EXP 28
 859: PPUSH
 860: LD_STRING Oblukov
 862: PPUSH
 863: CALL_OW 38
// SaveCharacters ( kozlov , Kozlov ) ;
 867: LD_EXP 29
 871: PPUSH
 872: LD_STRING Kozlov
 874: PPUSH
 875: CALL_OW 38
// if plab >= 2 then
 879: LD_VAR 0 7
 883: PUSH
 884: LD_INT 2
 886: GREATEREQUAL
 887: IFFALSE 901
// SaveVariable ( true , LabCaptured ) else
 889: LD_INT 1
 891: PPUSH
 892: LD_STRING LabCaptured
 894: PPUSH
 895: CALL_OW 39
 899: GO 911
// SaveVariable ( false , LabCaptured ) ;
 901: LD_INT 0
 903: PPUSH
 904: LD_STRING LabCaptured
 906: PPUSH
 907: CALL_OW 39
// if not IsOK ( masha ) then
 911: LD_EXP 10
 915: PPUSH
 916: CALL_OW 302
 920: NOT
 921: IFFALSE 930
// DeleteVariable ( Masha ) ;
 923: LD_STRING Masha
 925: PPUSH
 926: CALL_OW 41
// SaveVariable ( GetTech ( tech_TauRad , You ) , shifting ) ;
 930: LD_INT 28
 932: PPUSH
 933: LD_EXP 1
 937: PPUSH
 938: CALL_OW 321
 942: PPUSH
 943: LD_STRING shifting
 945: PPUSH
 946: CALL_OW 39
// SaveVariable ( GetTech ( tech_SpacAnom , You ) , slowing ) ;
 950: LD_INT 29
 952: PPUSH
 953: LD_EXP 1
 957: PPUSH
 958: CALL_OW 321
 962: PPUSH
 963: LD_STRING slowing
 965: PPUSH
 966: CALL_OW 39
// pom := [ ] ;
 970: LD_ADDR_VAR 0 3
 974: PUSH
 975: EMPTY
 976: ST_TO_ADDR
// for i in everybody do
 977: LD_ADDR_VAR 0 2
 981: PUSH
 982: LD_EXP 5
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1023
// if GetLives ( i ) > 0 then
 990: LD_VAR 0 2
 994: PPUSH
 995: CALL_OW 256
 999: PUSH
1000: LD_INT 0
1002: GREATER
1003: IFFALSE 1021
// pom := pom ^ i ;
1005: LD_ADDR_VAR 0 3
1009: PUSH
1010: LD_VAR 0 3
1014: PUSH
1015: LD_VAR 0 2
1019: ADD
1020: ST_TO_ADDR
1021: GO 987
1023: POP
1024: POP
// pom := pom diff [ bur , dol , kapisto , petro , pop , bel , gny , kiri , koval , schol , kuzmov , karam , petrov , gleb , lipsch , tito , xavier , obluk , kozlov , 0 ] ;
1025: LD_ADDR_VAR 0 3
1029: PUSH
1030: LD_VAR 0 3
1034: PUSH
1035: LD_EXP 11
1039: PUSH
1040: LD_EXP 12
1044: PUSH
1045: LD_EXP 13
1049: PUSH
1050: LD_EXP 14
1054: PUSH
1055: LD_EXP 15
1059: PUSH
1060: LD_EXP 16
1064: PUSH
1065: LD_EXP 17
1069: PUSH
1070: LD_EXP 18
1074: PUSH
1075: LD_EXP 19
1079: PUSH
1080: LD_EXP 20
1084: PUSH
1085: LD_EXP 21
1089: PUSH
1090: LD_EXP 22
1094: PUSH
1095: LD_EXP 23
1099: PUSH
1100: LD_EXP 24
1104: PUSH
1105: LD_EXP 25
1109: PUSH
1110: LD_EXP 26
1114: PUSH
1115: LD_EXP 27
1119: PUSH
1120: LD_EXP 28
1124: PUSH
1125: LD_EXP 29
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: DIFF
1155: ST_TO_ADDR
// SaveCharacters ( pom , survivors3 ) ;
1156: LD_VAR 0 3
1160: PPUSH
1161: LD_STRING survivors3
1163: PPUSH
1164: CALL_OW 38
// YouWin ( ) ;
1168: CALL_OW 103
// EnableExclamations ;
1172: CALL_OW 473
// exit ;
1176: GO 1178
// end ;
1178: LD_VAR 0 1
1182: RET
// function load_postav ; begin
1183: LD_INT 0
1185: PPUSH
// pop = nacti_osobu ( Popov ) ;
1186: LD_ADDR_EXP 15
1190: PUSH
1191: LD_STRING Popov
1193: PPUSH
1194: CALL 7802 0 1
1198: ST_TO_ADDR
// SetSide ( pop , You ) ;
1199: LD_EXP 15
1203: PPUSH
1204: LD_EXP 1
1208: PPUSH
1209: CALL_OW 235
// dol = nacti_osobu ( Dolgov ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_STRING Dolgov
1220: PPUSH
1221: CALL 7802 0 1
1225: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
1226: LD_ADDR_EXP 11
1230: PUSH
1231: LD_STRING Burlak
1233: PPUSH
1234: CALL 7802 0 1
1238: ST_TO_ADDR
// kapisto = nacti_osobu ( Kapitsova ) ;
1239: LD_ADDR_EXP 13
1243: PUSH
1244: LD_STRING Kapitsova
1246: PPUSH
1247: CALL 7802 0 1
1251: ST_TO_ADDR
// petro = nacti_osobu ( Petrosyan ) ;
1252: LD_ADDR_EXP 14
1256: PUSH
1257: LD_STRING Petrosyan
1259: PPUSH
1260: CALL 7802 0 1
1264: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
1265: LD_ADDR_EXP 16
1269: PUSH
1270: LD_STRING Belkov
1272: PPUSH
1273: CALL 7802 0 1
1277: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_STRING Gnyevko
1285: PPUSH
1286: CALL 7802 0 1
1290: ST_TO_ADDR
// kiri = nacti_osobu ( Kirilenkova ) ;
1291: LD_ADDR_EXP 18
1295: PUSH
1296: LD_STRING Kirilenkova
1298: PPUSH
1299: CALL 7802 0 1
1303: ST_TO_ADDR
// koval = nacti_osobu ( Kovalyuk ) ;
1304: LD_ADDR_EXP 19
1308: PUSH
1309: LD_STRING Kovalyuk
1311: PPUSH
1312: CALL 7802 0 1
1316: ST_TO_ADDR
// schol = nacti_osobu ( Scholtze ) ;
1317: LD_ADDR_EXP 20
1321: PUSH
1322: LD_STRING Scholtze
1324: PPUSH
1325: CALL 7802 0 1
1329: ST_TO_ADDR
// kuzmov = nacti_osobu ( Kuzmov ) ;
1330: LD_ADDR_EXP 21
1334: PUSH
1335: LD_STRING Kuzmov
1337: PPUSH
1338: CALL 7802 0 1
1342: ST_TO_ADDR
// karam = nacti_osobu ( Karamazov ) ;
1343: LD_ADDR_EXP 22
1347: PUSH
1348: LD_STRING Karamazov
1350: PPUSH
1351: CALL 7802 0 1
1355: ST_TO_ADDR
// petrov = nacti_osobu ( Petrovova ) ;
1356: LD_ADDR_EXP 23
1360: PUSH
1361: LD_STRING Petrovova
1363: PPUSH
1364: CALL 7802 0 1
1368: ST_TO_ADDR
// gleb = nacti_osobu ( Gleb ) ;
1369: LD_ADDR_EXP 24
1373: PUSH
1374: LD_STRING Gleb
1376: PPUSH
1377: CALL 7802 0 1
1381: ST_TO_ADDR
// lipsch = nacti_osobu ( Lipschin ) ;
1382: LD_ADDR_EXP 25
1386: PUSH
1387: LD_STRING Lipschin
1389: PPUSH
1390: CALL 7802 0 1
1394: ST_TO_ADDR
// tito = nacti_osobu ( Titov ) ;
1395: LD_ADDR_EXP 26
1399: PUSH
1400: LD_STRING Titov
1402: PPUSH
1403: CALL 7802 0 1
1407: ST_TO_ADDR
// xavier = nacti_osobu ( Xavier ) ;
1408: LD_ADDR_EXP 27
1412: PUSH
1413: LD_STRING Xavier
1415: PPUSH
1416: CALL 7802 0 1
1420: ST_TO_ADDR
// obluk = nacti_osobu ( Oblukov ) ;
1421: LD_ADDR_EXP 28
1425: PUSH
1426: LD_STRING Oblukov
1428: PPUSH
1429: CALL 7802 0 1
1433: ST_TO_ADDR
// kozlov = nacti_osobu ( Kozlov ) ;
1434: LD_ADDR_EXP 29
1438: PUSH
1439: LD_STRING Kozlov
1441: PPUSH
1442: CALL 7802 0 1
1446: ST_TO_ADDR
// end ;
1447: LD_VAR 0 1
1451: RET
// function load_promenne ; begin
1452: LD_INT 0
1454: PPUSH
// masha_l = LoadVariable ( Masha , [ ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun ] ) ;
1455: LD_ADDR_EXP 52
1459: PUSH
1460: LD_STRING Masha
1462: PPUSH
1463: LD_INT 24
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 46
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PPUSH
1481: CALL_OW 30
1485: ST_TO_ADDR
// maccepted = LoadVariable ( MercHandedover , true ) ;
1486: LD_ADDR_EXP 53
1490: PUSH
1491: LD_STRING MercHandedover
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: CALL_OW 30
1501: ST_TO_ADDR
// mhandedover = not LoadVariable ( GenscherBetrayed , false ) ;
1502: LD_ADDR_EXP 54
1506: PUSH
1507: LD_STRING GenscherBetrayed
1509: PPUSH
1510: LD_INT 0
1512: PPUSH
1513: CALL_OW 30
1517: NOT
1518: ST_TO_ADDR
// end ; end_of_file
1519: LD_VAR 0 1
1523: RET
// var kecy ; export KECY_s_arabama ; var taurad ; var uz_byly_kecy_o_mashe ; every 0 0$0.1 do var i ;
1524: GO 1526
1526: DISABLE
1527: LD_INT 0
1529: PPUSH
// begin KECY_s_arabama = false ;
1530: LD_ADDR_EXP 6
1534: PUSH
1535: LD_INT 0
1537: ST_TO_ADDR
// taurad = false ;
1538: LD_ADDR_LOC 2
1542: PUSH
1543: LD_INT 0
1545: ST_TO_ADDR
// uz_byly_kecy_o_mashe = false ;
1546: LD_ADDR_LOC 3
1550: PUSH
1551: LD_INT 0
1553: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 4 ] do
1554: LD_ADDR_VAR 0 1
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 2
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 4
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: FOR_IN
1578: IFFALSE 1587
// disable ( i ) ;
1580: LD_VAR 0 1
1584: DISABLE_MARKED
1585: GO 1577
1587: POP
1588: POP
// end ;
1589: PPOPN 1
1591: END
// export function vyber_misto_pro_zakladnu ; var pom ; begin
1592: LD_INT 0
1594: PPUSH
1595: PPUSH
// pom = Query ( QStarting ) ;
1596: LD_ADDR_VAR 0 2
1600: PUSH
1601: LD_STRING QStarting
1603: PPUSH
1604: CALL_OW 97
1608: ST_TO_ADDR
// case pom of 1 :
1609: LD_VAR 0 2
1613: PUSH
1614: LD_INT 1
1616: DOUBLE
1617: EQUAL
1618: IFTRUE 1622
1620: GO 1633
1622: POP
// Ru_base = base1 ; 2 :
1623: LD_ADDR_EXP 7
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
1631: GO 1672
1633: LD_INT 2
1635: DOUBLE
1636: EQUAL
1637: IFTRUE 1641
1639: GO 1652
1641: POP
// Ru_base = base2 ; 3 :
1642: LD_ADDR_EXP 7
1646: PUSH
1647: LD_INT 2
1649: ST_TO_ADDR
1650: GO 1672
1652: LD_INT 3
1654: DOUBLE
1655: EQUAL
1656: IFTRUE 1660
1658: GO 1671
1660: POP
// Ru_base = base3 ; end ;
1661: LD_ADDR_EXP 7
1665: PUSH
1666: LD_INT 3
1668: ST_TO_ADDR
1669: GO 1672
1671: POP
// result = pom ;
1672: LD_ADDR_VAR 0 1
1676: PUSH
1677: LD_VAR 0 2
1681: ST_TO_ADDR
// end ;
1682: LD_VAR 0 1
1686: RET
// export function chmo1 ; begin
1687: LD_INT 0
1689: PPUSH
// wait ( 0 0$0.5 ) ;
1690: LD_INT 18
1692: PPUSH
1693: CALL_OW 67
// SaveForQuickRestart ;
1697: CALL_OW 22
// ChangeMissionObjectives ( MStart ) ;
1701: LD_STRING MStart
1703: PPUSH
1704: CALL_OW 337
// end ;
1708: LD_VAR 0 1
1712: RET
// on Contact ( s1 , s2 ) do begin if s1 = Amici and s2 = You then
1713: LD_VAR 0 1
1717: PUSH
1718: LD_EXP 2
1722: EQUAL
1723: PUSH
1724: LD_VAR 0 2
1728: PUSH
1729: LD_EXP 1
1733: EQUAL
1734: AND
1735: IFFALSE 1924
// begin while kecy do
1737: LD_LOC 1
1741: IFFALSE 1752
// wait ( 0 0$1 ) ;
1743: LD_INT 35
1745: PPUSH
1746: CALL_OW 67
1750: GO 1737
// kecy = true ;
1752: LD_ADDR_LOC 1
1756: PUSH
1757: LD_INT 1
1759: ST_TO_ADDR
// DialogueOn ;
1760: CALL_OW 6
// Say ( Joan , DJoan-Joan-1 ) ;
1764: LD_EXP 61
1768: PPUSH
1769: LD_STRING DJoan-Joan-1
1771: PPUSH
1772: CALL_OW 88
// Say ( bur , DJoan-Bur-1 ) ;
1776: LD_EXP 11
1780: PPUSH
1781: LD_STRING DJoan-Bur-1
1783: PPUSH
1784: CALL_OW 88
// Say ( Joan , DJoan-Joan-2 ) ;
1788: LD_EXP 61
1792: PPUSH
1793: LD_STRING DJoan-Joan-2
1795: PPUSH
1796: CALL_OW 88
// Say ( bur , DJoan-Bur-2 ) ;
1800: LD_EXP 11
1804: PPUSH
1805: LD_STRING DJoan-Bur-2
1807: PPUSH
1808: CALL_OW 88
// SayRadio ( JMM , DJoan-JMM-2 ) ;
1812: LD_EXP 60
1816: PPUSH
1817: LD_STRING DJoan-JMM-2
1819: PPUSH
1820: CALL_OW 94
// Say ( bur , DJoan-Bur-3 ) ;
1824: LD_EXP 11
1828: PPUSH
1829: LD_STRING DJoan-Bur-3
1831: PPUSH
1832: CALL_OW 88
// SayRadio ( JMM , DJoan-JMM-3 ) ;
1836: LD_EXP 60
1840: PPUSH
1841: LD_STRING DJoan-JMM-3
1843: PPUSH
1844: CALL_OW 94
// DialogueOff ;
1848: CALL_OW 7
// if not KECY_s_arabama then
1852: LD_EXP 6
1856: NOT
1857: IFFALSE 1893
// begin if not maccepted then
1859: LD_EXP 53
1863: NOT
1864: IFFALSE 1871
// enable ( 1 ) else
1866: LD_INT 1
1868: ENABLE_MARKED
1869: GO 1885
// if mhandedover then
1871: LD_EXP 54
1875: IFFALSE 1882
// enable ( 2 ) else
1877: LD_INT 2
1879: ENABLE_MARKED
1880: GO 1885
// enable ( 3 ) ;
1882: LD_INT 3
1884: ENABLE_MARKED
// KECY_s_arabama = true ;
1885: LD_ADDR_EXP 6
1889: PUSH
1890: LD_INT 1
1892: ST_TO_ADDR
// end ; enable ( 4 ) ;
1893: LD_INT 4
1895: ENABLE_MARKED
// kecy = false ;
1896: LD_ADDR_LOC 1
1900: PUSH
1901: LD_INT 0
1903: ST_TO_ADDR
// Am_utoky = 1 ;
1904: LD_ADDR_EXP 70
1908: PUSH
1909: LD_INT 1
1911: ST_TO_ADDR
// ComExitBuilding ( Joan ) ;
1912: LD_EXP 61
1916: PPUSH
1917: CALL_OW 122
// disable ;
1921: DISABLE
// end else
1922: GO 1925
// enable ;
1924: ENABLE
// end ;
1925: PPOPN 2
1927: END
// every 0 0$1 marked 1 do
1928: GO 1930
1930: DISABLE
// begin wait ( 0 0$5 ) ;
1931: LD_INT 175
1933: PPUSH
1934: CALL_OW 67
// while kecy do
1938: LD_LOC 1
1942: IFFALSE 1953
// wait ( 0 0$1 ) ;
1944: LD_INT 35
1946: PPUSH
1947: CALL_OW 67
1951: GO 1938
// kecy = true ;
1953: LD_ADDR_LOC 1
1957: PUSH
1958: LD_INT 1
1960: ST_TO_ADDR
// DialogueOn ;
1961: CALL_OW 6
// Say ( diet , DArNeutral-Diet-1 ) ;
1965: LD_EXP 55
1969: PPUSH
1970: LD_STRING DArNeutral-Diet-1
1972: PPUSH
1973: CALL_OW 88
// DialogueOff ;
1977: CALL_OW 7
// kecy = false ;
1981: LD_ADDR_LOC 1
1985: PUSH
1986: LD_INT 0
1988: ST_TO_ADDR
// Arabi_vztah = 2 ;
1989: LD_ADDR_EXP 59
1993: PUSH
1994: LD_INT 2
1996: ST_TO_ADDR
// ar_leave_north ;
1997: CALL 11696 0 0
// end ;
2001: END
// every 0 0$1 marked 2 do var pom ;
2002: GO 2004
2004: DISABLE
2005: LD_INT 0
2007: PPUSH
// begin wait ( 0 0$5 ) ;
2008: LD_INT 175
2010: PPUSH
2011: CALL_OW 67
// while kecy do
2015: LD_LOC 1
2019: IFFALSE 2030
// wait ( 0 0$1 ) ;
2021: LD_INT 35
2023: PPUSH
2024: CALL_OW 67
2028: GO 2015
// kecy = true ;
2030: LD_ADDR_LOC 1
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// DialogueOn ;
2038: CALL_OW 6
// SayRadio ( diet , DArHelp-Diet-1 ) ;
2042: LD_EXP 55
2046: PPUSH
2047: LD_STRING DArHelp-Diet-1
2049: PPUSH
2050: CALL_OW 94
// pom = Query ( QArHelp ) ;
2054: LD_ADDR_VAR 0 1
2058: PUSH
2059: LD_STRING QArHelp
2061: PPUSH
2062: CALL_OW 97
2066: ST_TO_ADDR
// case pom of 1 :
2067: LD_VAR 0 1
2071: PUSH
2072: LD_INT 1
2074: DOUBLE
2075: EQUAL
2076: IFTRUE 2080
2078: GO 2131
2080: POP
// begin SayRadio ( bur , DQrArHelp#1-Bur-1 ) ;
2081: LD_EXP 11
2085: PPUSH
2086: LD_STRING DQrArHelp#1-Bur-1
2088: PPUSH
2089: CALL_OW 94
// SayRadio ( diet , DQrArHelp#1-Diet-1 ) ;
2093: LD_EXP 55
2097: PPUSH
2098: LD_STRING DQrArHelp#1-Diet-1
2100: PPUSH
2101: CALL_OW 94
// SayRadio ( bur , DQrArHelp#1-Bur-2 ) ;
2105: LD_EXP 11
2109: PPUSH
2110: LD_STRING DQrArHelp#1-Bur-2
2112: PPUSH
2113: CALL_OW 94
// SayRadio ( diet , DQrArHelp#1-Diet-2 ) ;
2117: LD_EXP 55
2121: PPUSH
2122: LD_STRING DQrArHelp#1-Diet-2
2124: PPUSH
2125: CALL_OW 94
// end ; 2 :
2129: GO 2167
2131: LD_INT 2
2133: DOUBLE
2134: EQUAL
2135: IFTRUE 2139
2137: GO 2166
2139: POP
// begin SayRadio ( bur , DQrArHelp#2-Bur-1 ) ;
2140: LD_EXP 11
2144: PPUSH
2145: LD_STRING DQrArHelp#2-Bur-1
2147: PPUSH
2148: CALL_OW 94
// SayRadio ( diet , DQrArHelp#2-Diet-1 ) ;
2152: LD_EXP 55
2156: PPUSH
2157: LD_STRING DQrArHelp#2-Diet-1
2159: PPUSH
2160: CALL_OW 94
// end ; end ;
2164: GO 2167
2166: POP
// DialogueOff ;
2167: CALL_OW 7
// kecy = false ;
2171: LD_ADDR_LOC 1
2175: PUSH
2176: LD_INT 0
2178: ST_TO_ADDR
// case pom of 1 :
2179: LD_VAR 0 1
2183: PUSH
2184: LD_INT 1
2186: DOUBLE
2187: EQUAL
2188: IFTRUE 2192
2190: GO 2207
2192: POP
// begin Arabi_vztah = 20 ;
2193: LD_ADDR_EXP 59
2197: PUSH
2198: LD_INT 20
2200: ST_TO_ADDR
// arabi_spojenci ;
2201: CALL 11898 0 0
// end ; 2 :
2205: GO 2231
2207: LD_INT 2
2209: DOUBLE
2210: EQUAL
2211: IFTRUE 2215
2213: GO 2230
2215: POP
// begin Arabi_vztah = 3 ;
2216: LD_ADDR_EXP 59
2220: PUSH
2221: LD_INT 3
2223: ST_TO_ADDR
// arabi_north_okamzite ;
2224: CALL 11423 0 0
// end ; end ;
2228: GO 2231
2230: POP
// end ;
2231: PPOPN 1
2233: END
// every 0 0$1 marked 3 do
2234: GO 2236
2236: DISABLE
// begin wait ( 0 0$5 ) ;
2237: LD_INT 175
2239: PPUSH
2240: CALL_OW 67
// while kecy do
2244: LD_LOC 1
2248: IFFALSE 2259
// wait ( 0 0$1 ) ;
2250: LD_INT 35
2252: PPUSH
2253: CALL_OW 67
2257: GO 2244
// kecy = true ;
2259: LD_ADDR_LOC 1
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// DialogueOn ;
2267: CALL_OW 6
// SayRadio ( diet , DArHostile-Diet-1 ) ;
2271: LD_EXP 55
2275: PPUSH
2276: LD_STRING DArHostile-Diet-1
2278: PPUSH
2279: CALL_OW 94
// Arabi_vztah = 0 ;
2283: LD_ADDR_EXP 59
2287: PUSH
2288: LD_INT 0
2290: ST_TO_ADDR
// arabi_ally_amici ;
2291: CALL 11940 0 0
// DialogueOff ;
2295: CALL_OW 7
// kecy = false ;
2299: LD_ADDR_LOC 1
2303: PUSH
2304: LD_INT 0
2306: ST_TO_ADDR
// end ;
2307: END
// every 0 0$15 marked 4 do
2308: GO 2310
2310: DISABLE
// begin wait ( 0 0$20 ) ;
2311: LD_INT 700
2313: PPUSH
2314: CALL_OW 67
// while kecy do
2318: LD_LOC 1
2322: IFFALSE 2333
// wait ( 0 0$1 ) ;
2324: LD_INT 35
2326: PPUSH
2327: CALL_OW 67
2331: GO 2318
// kecy = true ;
2333: LD_ADDR_LOC 1
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// DialogueOn ;
2341: CALL_OW 6
// SayRadio ( pop , DCapture-Pop-1 ) ;
2345: LD_EXP 15
2349: PPUSH
2350: LD_STRING DCapture-Pop-1
2352: PPUSH
2353: CALL_OW 94
// ChangeMissionObjectives ( MCapture ) ;
2357: LD_STRING MCapture
2359: PPUSH
2360: CALL_OW 337
// DialogueOff ;
2364: CALL_OW 7
// kecy = false ;
2368: LD_ADDR_LOC 1
2372: PUSH
2373: LD_INT 0
2375: ST_TO_ADDR
// end ;
2376: END
// on UnitGoesToRed ( un ) do begin if un = Joan then
2377: LD_VAR 0 1
2381: PUSH
2382: LD_EXP 61
2386: EQUAL
2387: IFFALSE 2481
// begin DialogueOn ;
2389: CALL_OW 6
// CenterNowOnUnits ( Joan ) ;
2393: LD_EXP 61
2397: PPUSH
2398: CALL_OW 87
// ForceSay ( Joan , DJoanDies-Joan-1 ) ;
2402: LD_EXP 61
2406: PPUSH
2407: LD_STRING DJoanDies-Joan-1
2409: PPUSH
2410: CALL_OW 91
// SayRadio ( JMM , DJoanDies-JMM-1 ) ;
2414: LD_EXP 60
2418: PPUSH
2419: LD_STRING DJoanDies-JMM-1
2421: PPUSH
2422: CALL_OW 94
// wait ( 0 0$1 ) ;
2426: LD_INT 35
2428: PPUSH
2429: CALL_OW 67
// SetLives ( Joan , 0 ) ;
2433: LD_EXP 61
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 234
// KillUnit ( Joan ) ;
2445: LD_EXP 61
2449: PPUSH
2450: CALL_OW 66
// DialogueOff ;
2454: CALL_OW 7
// wait ( wait_mcmillanova_pomsta [ difficulty ] ) ;
2458: LD_EXP 48
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: PPUSH
2469: CALL_OW 67
// mcmillanova_pomsta = true ;
2473: LD_ADDR_EXP 71
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// end ; enable ;
2481: ENABLE
// end ;
2482: PPOPN 1
2484: END
// export function dialog_masha_kaput ; begin
2485: LD_INT 0
2487: PPUSH
// if uz_byly_kecy_o_mashe then
2488: LD_LOC 3
2492: IFFALSE 2496
// exit ;
2494: GO 2555
// while kecy do
2496: LD_LOC 1
2500: IFFALSE 2511
// wait ( 0 0$1 ) ;
2502: LD_INT 35
2504: PPUSH
2505: CALL_OW 67
2509: GO 2496
// kecy = true ;
2511: LD_ADDR_LOC 1
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// DialogueOn ;
2519: CALL_OW 6
// Say ( bur , DMashaDies-Bur-1 ) ;
2523: LD_EXP 11
2527: PPUSH
2528: LD_STRING DMashaDies-Bur-1
2530: PPUSH
2531: CALL_OW 88
// uz_byly_kecy_o_mashe = true ;
2535: LD_ADDR_LOC 3
2539: PUSH
2540: LD_INT 1
2542: ST_TO_ADDR
// DialogueOff ;
2543: CALL_OW 7
// kecy = false ;
2547: LD_ADDR_LOC 1
2551: PUSH
2552: LD_INT 0
2554: ST_TO_ADDR
// end ;
2555: LD_VAR 0 1
2559: RET
// on VehicleCaptured ( new , auto , strana , hum ) do begin if auto = masha then
2560: LD_VAR 0 2
2564: PUSH
2565: LD_EXP 10
2569: EQUAL
2570: IFFALSE 2576
// dialog_masha_kaput ;
2572: CALL 2485 0 0
// enable ;
2576: ENABLE
// end ;
2577: PPOPN 4
2579: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 do var pom , i ; var je_space ; var labc ;
2580: LD_INT 22
2582: PUSH
2583: LD_EXP 1
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: LD_INT 30
2597: PUSH
2598: LD_INT 7
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 8
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 0
2631: GREATER
2632: IFFALSE 2985
2634: GO 2636
2636: DISABLE
2637: LD_INT 0
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// begin je_space = false ;
2643: LD_ADDR_VAR 0 3
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2651: LD_ADDR_VAR 0 1
2655: PUSH
2656: LD_INT 22
2658: PUSH
2659: LD_EXP 1
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: LD_INT 2
2670: PUSH
2671: LD_INT 30
2673: PUSH
2674: LD_INT 7
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 30
2683: PUSH
2684: LD_INT 8
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PPUSH
2700: CALL_OW 69
2704: ST_TO_ADDR
// for i in pom do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: LD_VAR 0 1
2714: PUSH
2715: FOR_IN
2716: IFFALSE 2774
// if GetLabKind ( i , 1 ) = b_lab_spacetime or GetLabKind ( i , 2 ) = b_lab_spacetime then
2718: LD_VAR 0 2
2722: PPUSH
2723: LD_INT 1
2725: PPUSH
2726: CALL_OW 268
2730: PUSH
2731: LD_INT 14
2733: EQUAL
2734: PUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 268
2747: PUSH
2748: LD_INT 14
2750: EQUAL
2751: OR
2752: IFFALSE 2772
// begin je_space = true ;
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_INT 1
2761: ST_TO_ADDR
// labc = i ;
2762: LD_ADDR_VAR 0 4
2766: PUSH
2767: LD_VAR 0 2
2771: ST_TO_ADDR
// end ;
2772: GO 2715
2774: POP
2775: POP
// if je_space then
2776: LD_VAR 0 3
2780: IFFALSE 2984
// begin while IsConstructed ( i ) <> 0 do
2782: LD_VAR 0 2
2786: PPUSH
2787: CALL_OW 304
2791: PUSH
2792: LD_INT 0
2794: NONEQUAL
2795: IFFALSE 2806
// wait ( 0 0$1 ) ;
2797: LD_INT 35
2799: PPUSH
2800: CALL_OW 67
2804: GO 2782
// while kecy do
2806: LD_LOC 1
2810: IFFALSE 2821
// wait ( 0 0$5 ) ;
2812: LD_INT 175
2814: PPUSH
2815: CALL_OW 67
2819: GO 2806
// kecy = true ;
2821: LD_ADDR_LOC 1
2825: PUSH
2826: LD_INT 1
2828: ST_TO_ADDR
// DialogueOn ;
2829: CALL_OW 6
// Say ( bur , DResearch-Bur-1 ) ;
2833: LD_EXP 11
2837: PPUSH
2838: LD_STRING DResearch-Bur-1
2840: PPUSH
2841: CALL_OW 88
// if IsOK ( kapisto ) then
2845: LD_EXP 13
2849: PPUSH
2850: CALL_OW 302
2854: IFFALSE 2870
// Say ( kapisto , DResearch-Kap-1 ) else
2856: LD_EXP 13
2860: PPUSH
2861: LD_STRING DResearch-Kap-1
2863: PPUSH
2864: CALL_OW 88
2868: GO 2970
// if IsOK ( petro ) then
2870: LD_EXP 14
2874: PPUSH
2875: CALL_OW 302
2879: IFFALSE 2895
// Say ( petro , DResearch-Pty-1 ) else
2881: LD_EXP 14
2885: PPUSH
2886: LD_STRING DResearch-Pty-1
2888: PPUSH
2889: CALL_OW 88
2893: GO 2970
// if IsOK ( dol ) then
2895: LD_EXP 12
2899: PPUSH
2900: CALL_OW 302
2904: IFFALSE 2920
// Say ( dol , DResearch-Dol-1 ) else
2906: LD_EXP 12
2910: PPUSH
2911: LD_STRING DResearch-Dol-1
2913: PPUSH
2914: CALL_OW 88
2918: GO 2970
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
2920: LD_ADDR_VAR 0 1
2924: PUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: LD_EXP 11
2935: PUSH
2936: EMPTY
2937: LIST
2938: PPUSH
2939: CALL 2988 0 3
2943: ST_TO_ADDR
// if pom <> 0 then
2944: LD_VAR 0 1
2948: PUSH
2949: LD_INT 0
2951: NONEQUAL
2952: IFFALSE 2970
// Say ( pom [ 1 ] , DResearch-RSol1-1 ) ;
2954: LD_VAR 0 1
2958: PUSH
2959: LD_INT 1
2961: ARRAY
2962: PPUSH
2963: LD_STRING DResearch-RSol1-1
2965: PPUSH
2966: CALL_OW 88
// end ; DialogueOff ;
2970: CALL_OW 7
// kecy = false ;
2974: LD_ADDR_LOC 1
2978: PUSH
2979: LD_INT 0
2981: ST_TO_ADDR
// end else
2982: GO 2985
// enable ;
2984: ENABLE
// end ;
2985: PPOPN 4
2987: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
2988: LD_INT 0
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
2994: PPUSH
2995: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
2996: LD_ADDR_VAR 0 6
3000: PUSH
3001: LD_INT 22
3003: PUSH
3004: LD_EXP 1
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_VAR 0 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
3045: LD_ADDR_VAR 0 7
3049: PUSH
3050: LD_INT 22
3052: PUSH
3053: LD_EXP 1
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 25
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 26
3074: PUSH
3075: LD_VAR 0 1
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: PPUSH
3089: CALL_OW 69
3093: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
3094: LD_ADDR_VAR 0 8
3098: PUSH
3099: LD_INT 22
3101: PUSH
3102: LD_EXP 1
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: LD_INT 25
3113: PUSH
3114: LD_INT 2
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 26
3123: PUSH
3124: LD_VAR 0 1
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
3143: LD_ADDR_VAR 0 9
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_EXP 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 25
3162: PUSH
3163: LD_INT 1
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 26
3172: PUSH
3173: LD_VAR 0 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: PPUSH
3187: CALL_OW 69
3191: ST_TO_ADDR
// case povolani of class_scientistic :
3192: LD_VAR 0 2
3196: PUSH
3197: LD_INT 4
3199: DOUBLE
3200: EQUAL
3201: IFTRUE 3205
3203: GO 3218
3205: POP
// pom = pom1 ; class_mechanic :
3206: LD_ADDR_VAR 0 5
3210: PUSH
3211: LD_VAR 0 6
3215: ST_TO_ADDR
3216: GO 3282
3218: LD_INT 3
3220: DOUBLE
3221: EQUAL
3222: IFTRUE 3226
3224: GO 3239
3226: POP
// pom = pom2 ; class_engineer :
3227: LD_ADDR_VAR 0 5
3231: PUSH
3232: LD_VAR 0 7
3236: ST_TO_ADDR
3237: GO 3282
3239: LD_INT 2
3241: DOUBLE
3242: EQUAL
3243: IFTRUE 3247
3245: GO 3260
3247: POP
// pom = pom3 ; class_soldier :
3248: LD_ADDR_VAR 0 5
3252: PUSH
3253: LD_VAR 0 8
3257: ST_TO_ADDR
3258: GO 3282
3260: LD_INT 1
3262: DOUBLE
3263: EQUAL
3264: IFTRUE 3268
3266: GO 3281
3268: POP
// pom = pom4 ; end ;
3269: LD_ADDR_VAR 0 5
3273: PUSH
3274: LD_VAR 0 9
3278: ST_TO_ADDR
3279: GO 3282
3281: POP
// if povolani <> class_scientistic then
3282: LD_VAR 0 2
3286: PUSH
3287: LD_INT 4
3289: NONEQUAL
3290: IFFALSE 3308
// pom = pom ^ pom1 ;
3292: LD_ADDR_VAR 0 5
3296: PUSH
3297: LD_VAR 0 5
3301: PUSH
3302: LD_VAR 0 6
3306: ADD
3307: ST_TO_ADDR
// if povolani <> class_mechanic then
3308: LD_VAR 0 2
3312: PUSH
3313: LD_INT 3
3315: NONEQUAL
3316: IFFALSE 3334
// pom = pom ^ pom2 ;
3318: LD_ADDR_VAR 0 5
3322: PUSH
3323: LD_VAR 0 5
3327: PUSH
3328: LD_VAR 0 7
3332: ADD
3333: ST_TO_ADDR
// if povolani <> class_engineer then
3334: LD_VAR 0 2
3338: PUSH
3339: LD_INT 2
3341: NONEQUAL
3342: IFFALSE 3360
// pom = pom ^ pom3 ;
3344: LD_ADDR_VAR 0 5
3348: PUSH
3349: LD_VAR 0 5
3353: PUSH
3354: LD_VAR 0 8
3358: ADD
3359: ST_TO_ADDR
// if povolani <> class_soldier then
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: NONEQUAL
3368: IFFALSE 3386
// pom = pom ^ pom4 ;
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 5
3379: PUSH
3380: LD_VAR 0 9
3384: ADD
3385: ST_TO_ADDR
// result := pom diff diffseznam ;
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: LD_VAR 0 5
3395: PUSH
3396: LD_VAR 0 3
3400: DIFF
3401: ST_TO_ADDR
// end ;
3402: LD_VAR 0 4
3406: RET
// on VehicleDestroyed ( un , side , nation , x , y , dir , chas , contr , eng , weap ) do begin if un = masha and side = You then
3407: LD_VAR 0 1
3411: PUSH
3412: LD_EXP 10
3416: EQUAL
3417: PUSH
3418: LD_VAR 0 2
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: AND
3429: IFFALSE 3435
// dialog_masha_kaput ;
3431: CALL 2485 0 0
// end ;
3435: PPOPN 10
3437: END
// every 0 0$1 trigger GetTech ( tech_TauRad , You ) = state_researched or GetTech ( tech_SpacAnom , You ) = state_researched do var pom ;
3438: LD_INT 28
3440: PPUSH
3441: LD_EXP 1
3445: PPUSH
3446: CALL_OW 321
3450: PUSH
3451: LD_INT 2
3453: EQUAL
3454: PUSH
3455: LD_INT 29
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 321
3467: PUSH
3468: LD_INT 2
3470: EQUAL
3471: OR
3472: IFFALSE 3866
3474: GO 3476
3476: DISABLE
3477: LD_INT 0
3479: PPUSH
// begin DialogueOn ;
3480: CALL_OW 6
// if IsOK ( kapisto ) then
3484: LD_EXP 13
3488: PPUSH
3489: CALL_OW 302
3493: IFFALSE 3561
// begin Say ( kapisto , DSpecBaz-Kap-1 ) ;
3495: LD_EXP 13
3499: PPUSH
3500: LD_STRING DSpecBaz-Kap-1
3502: PPUSH
3503: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3507: LD_INT 28
3509: PPUSH
3510: LD_EXP 1
3514: PPUSH
3515: CALL_OW 321
3519: PUSH
3520: LD_INT 2
3522: EQUAL
3523: IFFALSE 3547
// begin Say ( kapisto , DSpecBaz-Kap-1b ) ;
3525: LD_EXP 13
3529: PPUSH
3530: LD_STRING DSpecBaz-Kap-1b
3532: PPUSH
3533: CALL_OW 88
// taurad = true ;
3537: LD_ADDR_LOC 2
3541: PUSH
3542: LD_INT 1
3544: ST_TO_ADDR
// end else
3545: GO 3559
// Say ( kapisto , DSpecBaz-Kap-1c ) ;
3547: LD_EXP 13
3551: PPUSH
3552: LD_STRING DSpecBaz-Kap-1c
3554: PPUSH
3555: CALL_OW 88
// end else
3559: GO 3843
// if IsOK ( petro ) then
3561: LD_EXP 14
3565: PPUSH
3566: CALL_OW 302
3570: IFFALSE 3638
// begin Say ( petro , DSpecBaz-Pty-1 ) ;
3572: LD_EXP 14
3576: PPUSH
3577: LD_STRING DSpecBaz-Pty-1
3579: PPUSH
3580: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3584: LD_INT 28
3586: PPUSH
3587: LD_EXP 1
3591: PPUSH
3592: CALL_OW 321
3596: PUSH
3597: LD_INT 2
3599: EQUAL
3600: IFFALSE 3624
// begin Say ( petro , DSpecBaz-Pty-1b ) ;
3602: LD_EXP 14
3606: PPUSH
3607: LD_STRING DSpecBaz-Pty-1b
3609: PPUSH
3610: CALL_OW 88
// taurad = true ;
3614: LD_ADDR_LOC 2
3618: PUSH
3619: LD_INT 1
3621: ST_TO_ADDR
// end else
3622: GO 3636
// Say ( petro , DSpecBaz-Pty-1c ) ;
3624: LD_EXP 14
3628: PPUSH
3629: LD_STRING DSpecBaz-Pty-1c
3631: PPUSH
3632: CALL_OW 88
// end else
3636: GO 3843
// if IsOK ( dol ) then
3638: LD_EXP 12
3642: PPUSH
3643: CALL_OW 302
3647: IFFALSE 3715
// begin Say ( dol , DSpecBaz-Dol-1 ) ;
3649: LD_EXP 12
3653: PPUSH
3654: LD_STRING DSpecBaz-Dol-1
3656: PPUSH
3657: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3661: LD_INT 28
3663: PPUSH
3664: LD_EXP 1
3668: PPUSH
3669: CALL_OW 321
3673: PUSH
3674: LD_INT 2
3676: EQUAL
3677: IFFALSE 3701
// begin Say ( dol , DSpecBaz-Dol-1b ) ;
3679: LD_EXP 12
3683: PPUSH
3684: LD_STRING DSpecBaz-Dol-1b
3686: PPUSH
3687: CALL_OW 88
// taurad = true ;
3691: LD_ADDR_LOC 2
3695: PUSH
3696: LD_INT 1
3698: ST_TO_ADDR
// end else
3699: GO 3713
// Say ( dol , DSpecBaz-Dol-1c ) ;
3701: LD_EXP 12
3705: PPUSH
3706: LD_STRING DSpecBaz-Dol-1c
3708: PPUSH
3709: CALL_OW 88
// end else
3713: GO 3843
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur , petro , kapisto , dol ] ) ;
3715: LD_ADDR_VAR 0 1
3719: PUSH
3720: LD_INT 1
3722: PPUSH
3723: LD_INT 4
3725: PPUSH
3726: LD_EXP 11
3730: PUSH
3731: LD_EXP 14
3735: PUSH
3736: LD_EXP 13
3740: PUSH
3741: LD_EXP 12
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PPUSH
3752: CALL 2988 0 3
3756: ST_TO_ADDR
// if pom > 0 then
3757: LD_VAR 0 1
3761: PUSH
3762: LD_INT 0
3764: GREATER
3765: IFFALSE 3843
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1 ) ;
3767: LD_VAR 0 1
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_STRING DSpecBaz-RSci1-1
3778: PPUSH
3779: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3783: LD_INT 28
3785: PPUSH
3786: LD_EXP 1
3790: PPUSH
3791: CALL_OW 321
3795: PUSH
3796: LD_INT 2
3798: EQUAL
3799: IFFALSE 3827
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1b ) ;
3801: LD_VAR 0 1
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: PPUSH
3810: LD_STRING DSpecBaz-RSci1-1b
3812: PPUSH
3813: CALL_OW 88
// taurad = true ;
3817: LD_ADDR_LOC 2
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// end else
3825: GO 3843
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1c ) ;
3827: LD_VAR 0 1
3831: PUSH
3832: LD_INT 1
3834: ARRAY
3835: PPUSH
3836: LD_STRING DSpecBaz-RSci1-1c
3838: PPUSH
3839: CALL_OW 88
// end ; end ; Say ( bur , DSpecBaz-Bur-1 ) ;
3843: LD_EXP 11
3847: PPUSH
3848: LD_STRING DSpecBaz-Bur-1
3850: PPUSH
3851: CALL_OW 88
// Hint ( SpecBaz ) ;
3855: LD_STRING SpecBaz
3857: PPUSH
3858: CALL_OW 339
// DialogueOff ;
3862: CALL_OW 7
// end ;
3866: PPOPN 1
3868: END
// every 0 0$1 trigger GetTech ( tech_TauRad , You ) = state_researched and GetTech ( tech_SpacAnom , You ) = state_researched do var pom ;
3869: LD_INT 28
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 321
3881: PUSH
3882: LD_INT 2
3884: EQUAL
3885: PUSH
3886: LD_INT 29
3888: PPUSH
3889: LD_EXP 1
3893: PPUSH
3894: CALL_OW 321
3898: PUSH
3899: LD_INT 2
3901: EQUAL
3902: AND
3903: IFFALSE 4210
3905: GO 3907
3907: DISABLE
3908: LD_INT 0
3910: PPUSH
// begin DialogueOn ;
3911: CALL_OW 6
// if IsOK ( kapisto ) then
3915: LD_EXP 13
3919: PPUSH
3920: CALL_OW 302
3924: IFFALSE 3972
// begin Say ( kapisto , DSpecBaz-Kap-1a ) ;
3926: LD_EXP 13
3930: PPUSH
3931: LD_STRING DSpecBaz-Kap-1a
3933: PPUSH
3934: CALL_OW 88
// if taurad then
3938: LD_LOC 2
3942: IFFALSE 3958
// Say ( kapisto , DSpecBaz-Kap-1c ) else
3944: LD_EXP 13
3948: PPUSH
3949: LD_STRING DSpecBaz-Kap-1c
3951: PPUSH
3952: CALL_OW 88
3956: GO 3970
// Say ( kapisto , DSpecBaz-Kap-1b ) ;
3958: LD_EXP 13
3962: PPUSH
3963: LD_STRING DSpecBaz-Kap-1b
3965: PPUSH
3966: CALL_OW 88
// end else
3970: GO 4194
// if IsOK ( petro ) then
3972: LD_EXP 14
3976: PPUSH
3977: CALL_OW 302
3981: IFFALSE 4029
// begin Say ( petro , DSpecBaz-Pty-1a ) ;
3983: LD_EXP 14
3987: PPUSH
3988: LD_STRING DSpecBaz-Pty-1a
3990: PPUSH
3991: CALL_OW 88
// if taurad then
3995: LD_LOC 2
3999: IFFALSE 4015
// Say ( petro , DSpecBaz-Pty-1c ) else
4001: LD_EXP 14
4005: PPUSH
4006: LD_STRING DSpecBaz-Pty-1c
4008: PPUSH
4009: CALL_OW 88
4013: GO 4027
// Say ( petro , DSpecBaz-Pty-1b ) ;
4015: LD_EXP 14
4019: PPUSH
4020: LD_STRING DSpecBaz-Pty-1b
4022: PPUSH
4023: CALL_OW 88
// end else
4027: GO 4194
// if IsOK ( dol ) then
4029: LD_EXP 12
4033: PPUSH
4034: CALL_OW 302
4038: IFFALSE 4086
// begin Say ( dol , DSpecBaz-Dol-1a ) ;
4040: LD_EXP 12
4044: PPUSH
4045: LD_STRING DSpecBaz-Dol-1a
4047: PPUSH
4048: CALL_OW 88
// if taurad then
4052: LD_LOC 2
4056: IFFALSE 4072
// Say ( dol , DSpecBaz-Dol-1c ) else
4058: LD_EXP 12
4062: PPUSH
4063: LD_STRING DSpecBaz-Dol-1c
4065: PPUSH
4066: CALL_OW 88
4070: GO 4084
// Say ( dol , DSpecBaz-Dol-1b ) ;
4072: LD_EXP 12
4076: PPUSH
4077: LD_STRING DSpecBaz-Dol-1b
4079: PPUSH
4080: CALL_OW 88
// end else
4084: GO 4194
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur , petro , kapisto , dol ] ) ;
4086: LD_ADDR_VAR 0 1
4090: PUSH
4091: LD_INT 1
4093: PPUSH
4094: LD_INT 4
4096: PPUSH
4097: LD_EXP 11
4101: PUSH
4102: LD_EXP 14
4106: PUSH
4107: LD_EXP 13
4111: PUSH
4112: LD_EXP 12
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PPUSH
4123: CALL 2988 0 3
4127: ST_TO_ADDR
// if pom > 0 then
4128: LD_VAR 0 1
4132: PUSH
4133: LD_INT 0
4135: GREATER
4136: IFFALSE 4194
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1a ) ;
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PPUSH
4147: LD_STRING DSpecBaz-RSci1-1a
4149: PPUSH
4150: CALL_OW 88
// if taurad then
4154: LD_LOC 2
4158: IFFALSE 4178
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1c ) else
4160: LD_VAR 0 1
4164: PUSH
4165: LD_INT 1
4167: ARRAY
4168: PPUSH
4169: LD_STRING DSpecBaz-RSci1-1c
4171: PPUSH
4172: CALL_OW 88
4176: GO 4194
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1b ) ;
4178: LD_VAR 0 1
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: LD_STRING DSpecBaz-RSci1-1b
4189: PPUSH
4190: CALL_OW 88
// end ; end ; Say ( bur , DSpecBaz-Bur-1a ) ;
4194: LD_EXP 11
4198: PPUSH
4199: LD_STRING DSpecBaz-Bur-1a
4201: PPUSH
4202: CALL_OW 88
// DialogueOff ;
4206: CALL_OW 7
// end ;
4210: PPOPN 1
4212: END
// every 0 0$1 trigger SeeArea ( You , Arabi_see ) > 2 do
4213: LD_EXP 1
4217: PPUSH
4218: LD_INT 28
4220: PPUSH
4221: CALL_OW 294
4225: PUSH
4226: LD_INT 2
4228: GREATER
4229: IFFALSE 4275
4231: GO 4233
4233: DISABLE
// begin if not KECY_s_arabama then
4234: LD_EXP 6
4238: NOT
4239: IFFALSE 4275
// begin if not maccepted then
4241: LD_EXP 53
4245: NOT
4246: IFFALSE 4253
// enable ( 1 ) else
4248: LD_INT 1
4250: ENABLE_MARKED
4251: GO 4267
// if mhandedover then
4253: LD_EXP 54
4257: IFFALSE 4264
// enable ( 2 ) else
4259: LD_INT 2
4261: ENABLE_MARKED
4262: GO 4267
// enable ( 3 ) ;
4264: LD_INT 3
4266: ENABLE_MARKED
// KECY_s_arabama = true ;
4267: LD_ADDR_EXP 6
4271: PUSH
4272: LD_INT 1
4274: ST_TO_ADDR
// end ; end ;
4275: END
// export function query_konec ; var pom ; begin
4276: LD_INT 0
4278: PPUSH
4279: PPUSH
// pom = Query ( QEndMission ) ;
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: LD_STRING QEndMission
4287: PPUSH
4288: CALL_OW 97
4292: ST_TO_ADDR
// result := pom ;
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: LD_VAR 0 2
4302: ST_TO_ADDR
// end ; end_of_file
4303: LD_VAR 0 1
4307: RET
// export Ru_base ; export cislo_baze ; export Ru_enter ; export masha ; export bur ; export dol ; export kapisto ; export petro ; export pop ; export bel ; export gny ; export kiri ; export koval ; export schol ; export kuzmov ; export karam ; export petrov ; export gleb ; export lipsch ; export tito ; export xavier ; export obluk ; export kozlov ; var bedny ; export test_ukonceni_allowed ; every 0 0$0.1 do
4308: GO 4310
4310: DISABLE
// begin bedny = 0 ;
4311: LD_ADDR_LOC 4
4315: PUSH
4316: LD_INT 0
4318: ST_TO_ADDR
// test_ukonceni_allowed = false ;
4319: LD_ADDR_EXP 30
4323: PUSH
4324: LD_INT 0
4326: ST_TO_ADDR
// end ;
4327: END
// export function place_resource ; begin
4328: LD_INT 0
4330: PPUSH
// CreateDepositXY ( 45 , 72 , mat_oil ) ;
4331: LD_INT 45
4333: PPUSH
4334: LD_INT 72
4336: PPUSH
4337: LD_INT 2
4339: PPUSH
4340: CALL_OW 62
// CreateDepositXY ( 51 , 86 , mat_siberit ) ;
4344: LD_INT 51
4346: PPUSH
4347: LD_INT 86
4349: PPUSH
4350: LD_INT 3
4352: PPUSH
4353: CALL_OW 62
// CreateDepositXY ( 92 , 110 , mat_oil ) ;
4357: LD_INT 92
4359: PPUSH
4360: LD_INT 110
4362: PPUSH
4363: LD_INT 2
4365: PPUSH
4366: CALL_OW 62
// CreateDepositXY ( 103 , 103 , mat_siberit ) ;
4370: LD_INT 103
4372: PPUSH
4373: LD_INT 103
4375: PPUSH
4376: LD_INT 3
4378: PPUSH
4379: CALL_OW 62
// CreateDepositXY ( 151 , 84 , mat_oil ) ;
4383: LD_INT 151
4385: PPUSH
4386: LD_INT 84
4388: PPUSH
4389: LD_INT 2
4391: PPUSH
4392: CALL_OW 62
// CreateDepositXY ( 139 , 60 , mat_siberit ) ;
4396: LD_INT 139
4398: PPUSH
4399: LD_INT 60
4401: PPUSH
4402: LD_INT 3
4404: PPUSH
4405: CALL_OW 62
// end ;
4409: LD_VAR 0 1
4413: RET
// export function placni_rusy_na_zacatek ; var ezone ; var i ; begin
4414: LD_INT 0
4416: PPUSH
4417: PPUSH
4418: PPUSH
// case cislo_baze of 1 :
4419: LD_EXP 8
4423: PUSH
4424: LD_INT 1
4426: DOUBLE
4427: EQUAL
4428: IFTRUE 4432
4430: GO 4455
4432: POP
// begin ezone = ezone1 ;
4433: LD_ADDR_VAR 0 2
4437: PUSH
4438: LD_INT 4
4440: ST_TO_ADDR
// RevealFogArea ( You , Renter1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 332
// end ; 2 :
4453: GO 4518
4455: LD_INT 2
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4486
4463: POP
// begin ezone = ezone2 ;
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: LD_INT 5
4471: ST_TO_ADDR
// RevealFogArea ( You , Renter2 ) ;
4472: LD_EXP 1
4476: PPUSH
4477: LD_INT 15
4479: PPUSH
4480: CALL_OW 332
// end ; 3 :
4484: GO 4518
4486: LD_INT 3
4488: DOUBLE
4489: EQUAL
4490: IFTRUE 4494
4492: GO 4517
4494: POP
// begin ezone = ezone3 ;
4495: LD_ADDR_VAR 0 2
4499: PUSH
4500: LD_INT 6
4502: ST_TO_ADDR
// RevealFogArea ( You , Renter3 ) ;
4503: LD_EXP 1
4507: PPUSH
4508: LD_INT 16
4510: PPUSH
4511: CALL_OW 332
// end ; end ;
4515: GO 4518
4517: POP
// for i in RUSI_ENTER_LIST do
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: LD_EXP 31
4527: PUSH
4528: FOR_IN
4529: IFFALSE 4550
// PlaceUnitArea ( i , ezone , false ) ;
4531: LD_VAR 0 3
4535: PPUSH
4536: LD_VAR 0 2
4540: PPUSH
4541: LD_INT 0
4543: PPUSH
4544: CALL_OW 49
4548: GO 4528
4550: POP
4551: POP
// CenterNowOnUnits ( RUSI_ENTER_LIST ) ;
4552: LD_EXP 31
4556: PPUSH
4557: CALL_OW 87
// chmo1 ;
4561: CALL 1687 0 0
// InGameOff ;
4565: CALL_OW 9
// end ;
4569: LD_VAR 0 1
4573: RET
// every 0 0$1 do
4574: GO 4576
4576: DISABLE
// begin wait ( delay_beden [ difficulty ] ) ;
4577: LD_EXP 44
4581: PUSH
4582: LD_OWVAR 67
4586: ARRAY
4587: PPUSH
4588: CALL_OW 67
// wait ( Rand ( 1 , bedny * 0 0$20 ) ) ;
4592: LD_INT 1
4594: PPUSH
4595: LD_LOC 4
4599: PUSH
4600: LD_INT 700
4602: MUL
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: CALL_OW 67
// bedny = bedny + 1 ;
4613: LD_ADDR_LOC 4
4617: PUSH
4618: LD_LOC 4
4622: PUSH
4623: LD_INT 1
4625: PLUS
4626: ST_TO_ADDR
// case cislo_baze of 1 :
4627: LD_EXP 8
4631: PUSH
4632: LD_INT 1
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4640
4638: GO 4664
4640: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base3 , true ) ; 2 :
4641: LD_INT 3
4643: PPUSH
4644: LD_INT 5
4646: PPUSH
4647: CALL_OW 12
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 55
4662: GO 4736
4664: LD_INT 2
4666: DOUBLE
4667: EQUAL
4668: IFTRUE 4672
4670: GO 4696
4672: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base2 , true ) ; 3 :
4673: LD_INT 3
4675: PPUSH
4676: LD_INT 5
4678: PPUSH
4679: CALL_OW 12
4683: PPUSH
4684: LD_INT 2
4686: PPUSH
4687: LD_INT 1
4689: PPUSH
4690: CALL_OW 55
4694: GO 4736
4696: LD_INT 3
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4728
4704: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base1 , true ) ; else
4705: LD_INT 3
4707: PPUSH
4708: LD_INT 5
4710: PPUSH
4711: CALL_OW 12
4715: PPUSH
4716: LD_INT 1
4718: PPUSH
4719: LD_INT 1
4721: PPUSH
4722: CALL_OW 55
4726: GO 4736
4728: POP
// begin msg ( ERROR: pri padani beden doslo k chybe ) ;
4729: LD_STRING ERROR: pri padani beden doslo k chybe
4731: PPUSH
4732: CALL_OW 100
// end ; end ; enable ;
4736: ENABLE
// end ;
4737: END
// every 1 1$30 do
4738: GO 4740
4740: DISABLE
// begin wait ( Rand ( 1 , 1 1$0 ) ) ;
4741: LD_INT 1
4743: PPUSH
4744: LD_INT 2100
4746: PPUSH
4747: CALL_OW 12
4751: PPUSH
4752: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , Bedny_Ar , true ) ;
4756: LD_INT 1
4758: PPUSH
4759: LD_INT 5
4761: PPUSH
4762: CALL_OW 12
4766: PPUSH
4767: LD_INT 24
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 55
// enable ;
4777: ENABLE
// end ;
4778: END
// every 0 0$1 do var okay ; var plab ; var i ; var pom ;
4779: GO 4781
4781: DISABLE
4782: LD_INT 0
4784: PPUSH
4785: PPUSH
4786: PPUSH
4787: PPUSH
// begin okay = true ;
4788: LD_ADDR_VAR 0 1
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// if IsOK ( Am_lab1 ) then
4796: LD_INT 48
4798: PPUSH
4799: CALL_OW 302
4803: IFFALSE 4828
// if GetSide ( Am_lab1 ) = Amici then
4805: LD_INT 48
4807: PPUSH
4808: CALL_OW 255
4812: PUSH
4813: LD_EXP 2
4817: EQUAL
4818: IFFALSE 4828
// okay = false ;
4820: LD_ADDR_VAR 0 1
4824: PUSH
4825: LD_INT 0
4827: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
4828: LD_INT 55
4830: PPUSH
4831: CALL_OW 302
4835: IFFALSE 4860
// if GetSide ( Am_lab2 ) = Amici then
4837: LD_INT 55
4839: PPUSH
4840: CALL_OW 255
4844: PUSH
4845: LD_EXP 2
4849: EQUAL
4850: IFFALSE 4860
// okay = false ;
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// if IsOK ( Am_lab3 ) then
4860: LD_INT 56
4862: PPUSH
4863: CALL_OW 302
4867: IFFALSE 4892
// if GetSide ( Am_lab3 ) = Amici then
4869: LD_INT 56
4871: PPUSH
4872: CALL_OW 255
4876: PUSH
4877: LD_EXP 2
4881: EQUAL
4882: IFFALSE 4892
// okay = false ;
4884: LD_ADDR_VAR 0 1
4888: PUSH
4889: LD_INT 0
4891: ST_TO_ADDR
// if IsOK ( Joan ) then
4892: LD_EXP 61
4896: PPUSH
4897: CALL_OW 302
4901: IFFALSE 4911
// okay = false ;
4903: LD_ADDR_VAR 0 1
4907: PUSH
4908: LD_INT 0
4910: ST_TO_ADDR
// if okay and test_na_vedce then
4911: LD_VAR 0 1
4915: PUSH
4916: CALL 20769 0 0
4920: AND
4921: IFFALSE 5101
// begin plab = 0 ;
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 0
4930: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: LD_INT 48
4938: PUSH
4939: LD_INT 55
4941: PUSH
4942: LD_INT 56
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: FOR_IN
4951: IFFALSE 4997
// if GetSide ( i ) = You or IsDead ( i ) then
4953: LD_VAR 0 3
4957: PPUSH
4958: CALL_OW 255
4962: PUSH
4963: LD_EXP 1
4967: EQUAL
4968: PUSH
4969: LD_VAR 0 3
4973: PPUSH
4974: CALL_OW 301
4978: OR
4979: IFFALSE 4995
// plab = plab + 1 ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 2
4990: PUSH
4991: LD_INT 1
4993: PLUS
4994: ST_TO_ADDR
4995: GO 4950
4997: POP
4998: POP
// if GetTech ( tech_TauRad , You ) and GetTech ( tech_SpacAnom , You ) then
4999: LD_INT 28
5001: PPUSH
5002: LD_EXP 1
5006: PPUSH
5007: CALL_OW 321
5011: PUSH
5012: LD_INT 29
5014: PPUSH
5015: LD_EXP 1
5019: PPUSH
5020: CALL_OW 321
5024: AND
5025: IFFALSE 5041
// plab = plab + 1 ;
5027: LD_ADDR_VAR 0 2
5031: PUSH
5032: LD_VAR 0 2
5036: PUSH
5037: LD_INT 1
5039: PLUS
5040: ST_TO_ADDR
// if plab >= 4 then
5041: LD_VAR 0 2
5045: PUSH
5046: LD_INT 4
5048: GREATEREQUAL
5049: IFFALSE 5057
// konec_mise else
5051: CALL 186 0 0
5055: GO 5099
// begin pom = query_konec ;
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: CALL 4276 0 0
5066: ST_TO_ADDR
// if pom = 2 then
5067: LD_VAR 0 4
5071: PUSH
5072: LD_INT 2
5074: EQUAL
5075: IFFALSE 5083
// konec_mise else
5077: CALL 186 0 0
5081: GO 5099
// begin end_the_mission_allowed = true ;
5083: LD_ADDR_OWVAR 57
5087: PUSH
5088: LD_INT 1
5090: ST_TO_ADDR
// test_ukonceni_allowed = true ;
5091: LD_ADDR_EXP 30
5095: PUSH
5096: LD_INT 1
5098: ST_TO_ADDR
// end ; end ; end else
5099: GO 5102
// enable ;
5101: ENABLE
// end ;
5102: PPOPN 4
5104: END
// every 0 0$1 do
5105: GO 5107
5107: DISABLE
// begin SetMark ( Masha , 1 ) ;
5108: LD_EXP 10
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: CALL_OW 242
// end ;
5120: END
// every 0 0$5 trigger test_ukonceni_allowed do var okay ; var i ; var plab ;
5121: LD_EXP 30
5125: IFFALSE 5403
5127: GO 5129
5129: DISABLE
5130: LD_INT 0
5132: PPUSH
5133: PPUSH
5134: PPUSH
// begin okay = true ;
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_INT 1
5142: ST_TO_ADDR
// if IsOK ( Am_lab1 ) then
5143: LD_INT 48
5145: PPUSH
5146: CALL_OW 302
5150: IFFALSE 5175
// if GetSide ( Am_lab1 ) = Amici then
5152: LD_INT 48
5154: PPUSH
5155: CALL_OW 255
5159: PUSH
5160: LD_EXP 2
5164: EQUAL
5165: IFFALSE 5175
// okay = false ;
5167: LD_ADDR_VAR 0 1
5171: PUSH
5172: LD_INT 0
5174: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
5175: LD_INT 55
5177: PPUSH
5178: CALL_OW 302
5182: IFFALSE 5207
// if GetSide ( Am_lab2 ) = Amici then
5184: LD_INT 55
5186: PPUSH
5187: CALL_OW 255
5191: PUSH
5192: LD_EXP 2
5196: EQUAL
5197: IFFALSE 5207
// okay = false ;
5199: LD_ADDR_VAR 0 1
5203: PUSH
5204: LD_INT 0
5206: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
5207: LD_INT 55
5209: PPUSH
5210: CALL_OW 302
5214: IFFALSE 5239
// if GetSide ( Am_lab2 ) = Amici then
5216: LD_INT 55
5218: PPUSH
5219: CALL_OW 255
5223: PUSH
5224: LD_EXP 2
5228: EQUAL
5229: IFFALSE 5239
// okay = false ;
5231: LD_ADDR_VAR 0 1
5235: PUSH
5236: LD_INT 0
5238: ST_TO_ADDR
// if IsOK ( Joan ) then
5239: LD_EXP 61
5243: PPUSH
5244: CALL_OW 302
5248: IFFALSE 5258
// okay = false ;
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: LD_INT 0
5257: ST_TO_ADDR
// if okay and test_na_vedce then
5258: LD_VAR 0 1
5262: PUSH
5263: CALL 20769 0 0
5267: AND
5268: IFFALSE 5402
// begin plab = 0 ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_INT 0
5277: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
5278: LD_ADDR_VAR 0 2
5282: PUSH
5283: LD_INT 48
5285: PUSH
5286: LD_INT 55
5288: PUSH
5289: LD_INT 56
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: FOR_IN
5298: IFFALSE 5344
// if GetSide ( i ) = You or IsDead ( i ) then
5300: LD_VAR 0 2
5304: PPUSH
5305: CALL_OW 255
5309: PUSH
5310: LD_EXP 1
5314: EQUAL
5315: PUSH
5316: LD_VAR 0 2
5320: PPUSH
5321: CALL_OW 301
5325: OR
5326: IFFALSE 5342
// plab = plab + 1 ;
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_VAR 0 3
5337: PUSH
5338: LD_INT 1
5340: PLUS
5341: ST_TO_ADDR
5342: GO 5297
5344: POP
5345: POP
// if GetTech ( tech_TauRad , You ) and GetTech ( tech_SpacAnom , You ) then
5346: LD_INT 28
5348: PPUSH
5349: LD_EXP 1
5353: PPUSH
5354: CALL_OW 321
5358: PUSH
5359: LD_INT 29
5361: PPUSH
5362: LD_EXP 1
5366: PPUSH
5367: CALL_OW 321
5371: AND
5372: IFFALSE 5388
// plab = plab + 1 ;
5374: LD_ADDR_VAR 0 3
5378: PUSH
5379: LD_VAR 0 3
5383: PUSH
5384: LD_INT 1
5386: PLUS
5387: ST_TO_ADDR
// if plab >= 4 then
5388: LD_VAR 0 3
5392: PUSH
5393: LD_INT 4
5395: GREATEREQUAL
5396: IFFALSE 5402
// konec_mise ;
5398: CALL 186 0 0
// end ; enable ;
5402: ENABLE
// end ;
5403: PPOPN 3
5405: END
// every 1 1$0 trigger GetSide ( Ar_bar ) = You do
5406: LD_INT 61
5408: PPUSH
5409: CALL_OW 255
5413: PUSH
5414: LD_EXP 1
5418: EQUAL
5419: IFFALSE 5439
5421: GO 5423
5423: DISABLE
// begin SetTech ( tech_Mortar , You , state_researched ) ;
5424: LD_INT 41
5426: PPUSH
5427: LD_EXP 1
5431: PPUSH
5432: LD_INT 2
5434: PPUSH
5435: CALL_OW 322
// end ; end_of_file
5439: END
// export RUSI_ENTER_LIST ; export AM_UTOK_1_LIST ; export AM_UTOK_2_LIST ; export AM_UTOK_3_LIST ; var av , ah ; export function vyber_lidi_pro_misi ; var lvyber ; var i , j , pom ; var vyber ; begin
5440: LD_INT 0
5442: PPUSH
5443: PPUSH
5444: PPUSH
5445: PPUSH
5446: PPUSH
5447: PPUSH
// uc_nation = nation_russian ;
5448: LD_ADDR_OWVAR 21
5452: PUSH
5453: LD_INT 3
5455: ST_TO_ADDR
// uc_side = You ;
5456: LD_ADDR_OWVAR 20
5460: PUSH
5461: LD_EXP 1
5465: ST_TO_ADDR
// pom = [ ] ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: EMPTY
5472: ST_TO_ADDR
// SetSide ( bur , You ) ;
5473: LD_EXP 11
5477: PPUSH
5478: LD_EXP 1
5482: PPUSH
5483: CALL_OW 235
// SetClass ( bur , class_mechanic ) ;
5487: LD_EXP 11
5491: PPUSH
5492: LD_INT 3
5494: PPUSH
5495: CALL_OW 336
// if dol > 0 then
5499: LD_EXP 12
5503: PUSH
5504: LD_INT 0
5506: GREATER
5507: IFFALSE 5535
// begin SetClass ( dol , class_scientistic ) ;
5509: LD_EXP 12
5513: PPUSH
5514: LD_INT 4
5516: PPUSH
5517: CALL_OW 336
// SetSide ( dol , You ) ;
5521: LD_EXP 12
5525: PPUSH
5526: LD_EXP 1
5530: PPUSH
5531: CALL_OW 235
// end ; if kapisto > 0 then
5535: LD_EXP 13
5539: PUSH
5540: LD_INT 0
5542: GREATER
5543: IFFALSE 5571
// begin SetClass ( kapisto , class_scientistic ) ;
5545: LD_EXP 13
5549: PPUSH
5550: LD_INT 4
5552: PPUSH
5553: CALL_OW 336
// SetSide ( kapisto , You ) ;
5557: LD_EXP 13
5561: PPUSH
5562: LD_EXP 1
5566: PPUSH
5567: CALL_OW 235
// end ; if petro > 0 then
5571: LD_EXP 14
5575: PUSH
5576: LD_INT 0
5578: GREATER
5579: IFFALSE 5607
// begin SetClass ( petro , class_scientistic ) ;
5581: LD_EXP 14
5585: PPUSH
5586: LD_INT 4
5588: PPUSH
5589: CALL_OW 336
// SetSide ( petro , You ) ;
5593: LD_EXP 14
5597: PPUSH
5598: LD_EXP 1
5602: PPUSH
5603: CALL_OW 235
// end ; lvyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
5607: LD_ADDR_VAR 0 2
5611: PUSH
5612: LD_INT -4
5614: PUSH
5615: LD_INT -1
5617: PUSH
5618: LD_INT -6
5620: PUSH
5621: LD_EXP 11
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: ST_TO_ADDR
// lvyber = lvyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
5632: LD_ADDR_VAR 0 2
5636: PUSH
5637: LD_VAR 0 2
5641: PUSH
5642: LD_INT -2
5644: PUSH
5645: LD_INT -3
5647: PUSH
5648: LD_INT -5
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: ADD
5656: ST_TO_ADDR
// if dol > 0 then
5657: LD_EXP 12
5661: PUSH
5662: LD_INT 0
5664: GREATER
5665: IFFALSE 5709
// begin SetSide ( dol , You ) ;
5667: LD_EXP 12
5671: PPUSH
5672: LD_EXP 1
5676: PPUSH
5677: CALL_OW 235
// SetClass ( dol , class_scientistic ) ;
5681: LD_EXP 12
5685: PPUSH
5686: LD_INT 4
5688: PPUSH
5689: CALL_OW 336
// lvyber = lvyber ^ dol ;
5693: LD_ADDR_VAR 0 2
5697: PUSH
5698: LD_VAR 0 2
5702: PUSH
5703: LD_EXP 12
5707: ADD
5708: ST_TO_ADDR
// end ; if kapisto > 0 then
5709: LD_EXP 13
5713: PUSH
5714: LD_INT 0
5716: GREATER
5717: IFFALSE 5761
// begin SetSide ( kapisto , You ) ;
5719: LD_EXP 13
5723: PPUSH
5724: LD_EXP 1
5728: PPUSH
5729: CALL_OW 235
// SetClass ( kapisto , class_scientistic ) ;
5733: LD_EXP 13
5737: PPUSH
5738: LD_INT 4
5740: PPUSH
5741: CALL_OW 336
// lvyber = lvyber ^ kapisto ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_VAR 0 2
5754: PUSH
5755: LD_EXP 13
5759: ADD
5760: ST_TO_ADDR
// end ; if petro > 0 then
5761: LD_EXP 14
5765: PUSH
5766: LD_INT 0
5768: GREATER
5769: IFFALSE 5813
// begin SetSide ( petro , You ) ;
5771: LD_EXP 14
5775: PPUSH
5776: LD_EXP 1
5780: PPUSH
5781: CALL_OW 235
// SetClass ( petro , class_scientistic ) ;
5785: LD_EXP 14
5789: PPUSH
5790: LD_INT 4
5792: PPUSH
5793: CALL_OW 336
// lvyber = lvyber ^ petro ;
5797: LD_ADDR_VAR 0 2
5801: PUSH
5802: LD_VAR 0 2
5806: PUSH
5807: LD_EXP 14
5811: ADD
5812: ST_TO_ADDR
// end ; if bel > 0 then
5813: LD_EXP 16
5817: PUSH
5818: LD_INT 0
5820: GREATER
5821: IFFALSE 5865
// begin SetSide ( bel , You ) ;
5823: LD_EXP 16
5827: PPUSH
5828: LD_EXP 1
5832: PPUSH
5833: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
5837: LD_EXP 16
5841: PPUSH
5842: LD_INT 1
5844: PPUSH
5845: CALL_OW 336
// lvyber = lvyber ^ bel ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_VAR 0 2
5858: PUSH
5859: LD_EXP 16
5863: ADD
5864: ST_TO_ADDR
// end ; if gny > 0 then
5865: LD_EXP 17
5869: PUSH
5870: LD_INT 0
5872: GREATER
5873: IFFALSE 5917
// begin SetSide ( gny , You ) ;
5875: LD_EXP 17
5879: PPUSH
5880: LD_EXP 1
5884: PPUSH
5885: CALL_OW 235
// SetClass ( gny , class_soldier ) ;
5889: LD_EXP 17
5893: PPUSH
5894: LD_INT 1
5896: PPUSH
5897: CALL_OW 336
// lvyber = lvyber ^ gny ;
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_VAR 0 2
5910: PUSH
5911: LD_EXP 17
5915: ADD
5916: ST_TO_ADDR
// end ; if kiri > 0 then
5917: LD_EXP 18
5921: PUSH
5922: LD_INT 0
5924: GREATER
5925: IFFALSE 5969
// begin SetSide ( kiri , You ) ;
5927: LD_EXP 18
5931: PPUSH
5932: LD_EXP 1
5936: PPUSH
5937: CALL_OW 235
// SetClass ( kiri , class_scientistic ) ;
5941: LD_EXP 18
5945: PPUSH
5946: LD_INT 4
5948: PPUSH
5949: CALL_OW 336
// lvyber = lvyber ^ kiri ;
5953: LD_ADDR_VAR 0 2
5957: PUSH
5958: LD_VAR 0 2
5962: PUSH
5963: LD_EXP 18
5967: ADD
5968: ST_TO_ADDR
// end ; if koval > 0 then
5969: LD_EXP 19
5973: PUSH
5974: LD_INT 0
5976: GREATER
5977: IFFALSE 6021
// begin SetSide ( koval , You ) ;
5979: LD_EXP 19
5983: PPUSH
5984: LD_EXP 1
5988: PPUSH
5989: CALL_OW 235
// SetClass ( koval , class_soldier ) ;
5993: LD_EXP 19
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: CALL_OW 336
// lvyber = lvyber ^ koval ;
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: LD_VAR 0 2
6014: PUSH
6015: LD_EXP 19
6019: ADD
6020: ST_TO_ADDR
// end ; if schol > 0 then
6021: LD_EXP 20
6025: PUSH
6026: LD_INT 0
6028: GREATER
6029: IFFALSE 6073
// begin SetSide ( schol , You ) ;
6031: LD_EXP 20
6035: PPUSH
6036: LD_EXP 1
6040: PPUSH
6041: CALL_OW 235
// SetClass ( schol , class_scientistic ) ;
6045: LD_EXP 20
6049: PPUSH
6050: LD_INT 4
6052: PPUSH
6053: CALL_OW 336
// lvyber = lvyber ^ schol ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_VAR 0 2
6066: PUSH
6067: LD_EXP 20
6071: ADD
6072: ST_TO_ADDR
// end ; if kuzmov > 0 then
6073: LD_EXP 21
6077: PUSH
6078: LD_INT 0
6080: GREATER
6081: IFFALSE 6125
// begin SetSide ( kuzmov , You ) ;
6083: LD_EXP 21
6087: PPUSH
6088: LD_EXP 1
6092: PPUSH
6093: CALL_OW 235
// SetClass ( kuzmov , class_soldier ) ;
6097: LD_EXP 21
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 336
// lvyber = lvyber ^ kuzmov ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_VAR 0 2
6118: PUSH
6119: LD_EXP 21
6123: ADD
6124: ST_TO_ADDR
// end ; if karam > 0 then
6125: LD_EXP 22
6129: PUSH
6130: LD_INT 0
6132: GREATER
6133: IFFALSE 6177
// begin SetSide ( karam , You ) ;
6135: LD_EXP 22
6139: PPUSH
6140: LD_EXP 1
6144: PPUSH
6145: CALL_OW 235
// SetClass ( karam , class_soldier ) ;
6149: LD_EXP 22
6153: PPUSH
6154: LD_INT 1
6156: PPUSH
6157: CALL_OW 336
// lvyber = lvyber ^ karam ;
6161: LD_ADDR_VAR 0 2
6165: PUSH
6166: LD_VAR 0 2
6170: PUSH
6171: LD_EXP 22
6175: ADD
6176: ST_TO_ADDR
// end ; if petrov > 0 then
6177: LD_EXP 23
6181: PUSH
6182: LD_INT 0
6184: GREATER
6185: IFFALSE 6229
// begin SetSide ( petrov , You ) ;
6187: LD_EXP 23
6191: PPUSH
6192: LD_EXP 1
6196: PPUSH
6197: CALL_OW 235
// SetClass ( petrov , class_mechanic ) ;
6201: LD_EXP 23
6205: PPUSH
6206: LD_INT 3
6208: PPUSH
6209: CALL_OW 336
// lvyber = lvyber ^ petrov ;
6213: LD_ADDR_VAR 0 2
6217: PUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_EXP 23
6227: ADD
6228: ST_TO_ADDR
// end ; if gleb > 0 then
6229: LD_EXP 24
6233: PUSH
6234: LD_INT 0
6236: GREATER
6237: IFFALSE 6281
// begin SetSide ( gleb , You ) ;
6239: LD_EXP 24
6243: PPUSH
6244: LD_EXP 1
6248: PPUSH
6249: CALL_OW 235
// SetClass ( gleb , class_mechanic ) ;
6253: LD_EXP 24
6257: PPUSH
6258: LD_INT 3
6260: PPUSH
6261: CALL_OW 336
// lvyber = lvyber ^ gleb ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: LD_EXP 24
6279: ADD
6280: ST_TO_ADDR
// end ; if lipsch > 0 then
6281: LD_EXP 25
6285: PUSH
6286: LD_INT 0
6288: GREATER
6289: IFFALSE 6333
// begin SetSide ( lipsch , You ) ;
6291: LD_EXP 25
6295: PPUSH
6296: LD_EXP 1
6300: PPUSH
6301: CALL_OW 235
// SetClass ( lipsch , class_engineer ) ;
6305: LD_EXP 25
6309: PPUSH
6310: LD_INT 2
6312: PPUSH
6313: CALL_OW 336
// lvyber = lvyber ^ lipsch ;
6317: LD_ADDR_VAR 0 2
6321: PUSH
6322: LD_VAR 0 2
6326: PUSH
6327: LD_EXP 25
6331: ADD
6332: ST_TO_ADDR
// end ; if tito > 0 then
6333: LD_EXP 26
6337: PUSH
6338: LD_INT 0
6340: GREATER
6341: IFFALSE 6385
// begin SetSide ( tito , You ) ;
6343: LD_EXP 26
6347: PPUSH
6348: LD_EXP 1
6352: PPUSH
6353: CALL_OW 235
// SetClass ( tito , class_soldier ) ;
6357: LD_EXP 26
6361: PPUSH
6362: LD_INT 1
6364: PPUSH
6365: CALL_OW 336
// lvyber = lvyber ^ tito ;
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_VAR 0 2
6378: PUSH
6379: LD_EXP 26
6383: ADD
6384: ST_TO_ADDR
// end ; if xavier > 0 then
6385: LD_EXP 27
6389: PUSH
6390: LD_INT 0
6392: GREATER
6393: IFFALSE 6437
// begin SetSide ( xavier , You ) ;
6395: LD_EXP 27
6399: PPUSH
6400: LD_EXP 1
6404: PPUSH
6405: CALL_OW 235
// SetClass ( xavier , class_soldier ) ;
6409: LD_EXP 27
6413: PPUSH
6414: LD_INT 1
6416: PPUSH
6417: CALL_OW 336
// lvyber = lvyber ^ xavier ;
6421: LD_ADDR_VAR 0 2
6425: PUSH
6426: LD_VAR 0 2
6430: PUSH
6431: LD_EXP 27
6435: ADD
6436: ST_TO_ADDR
// end ; if obluk > 0 then
6437: LD_EXP 28
6441: PUSH
6442: LD_INT 0
6444: GREATER
6445: IFFALSE 6489
// begin SetSide ( obluk , You ) ;
6447: LD_EXP 28
6451: PPUSH
6452: LD_EXP 1
6456: PPUSH
6457: CALL_OW 235
// SetClass ( obluk , class_soldier ) ;
6461: LD_EXP 28
6465: PPUSH
6466: LD_INT 1
6468: PPUSH
6469: CALL_OW 336
// lvyber = lvyber ^ obluk ;
6473: LD_ADDR_VAR 0 2
6477: PUSH
6478: LD_VAR 0 2
6482: PUSH
6483: LD_EXP 28
6487: ADD
6488: ST_TO_ADDR
// end ; if kozlov > 0 then
6489: LD_EXP 29
6493: PUSH
6494: LD_INT 0
6496: GREATER
6497: IFFALSE 6541
// begin SetSide ( kozlov , You ) ;
6499: LD_EXP 29
6503: PPUSH
6504: LD_EXP 1
6508: PPUSH
6509: CALL_OW 235
// SetClass ( kozlov , class_soldier ) ;
6513: LD_EXP 29
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: CALL_OW 336
// lvyber = lvyber ^ kozlov ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_VAR 0 2
6534: PUSH
6535: LD_EXP 29
6539: ADD
6540: ST_TO_ADDR
// end ; if TestCharacters ( survivors3 ) then
6541: LD_STRING survivors3
6543: PPUSH
6544: CALL_OW 28
6548: IFFALSE 6563
// pom := CreateCharacterSet ( survivors3 ) ;
6550: LD_ADDR_VAR 0 5
6554: PUSH
6555: LD_STRING survivors3
6557: PPUSH
6558: CALL_OW 31
6562: ST_TO_ADDR
// everybody := pom ;
6563: LD_ADDR_EXP 5
6567: PUSH
6568: LD_VAR 0 5
6572: ST_TO_ADDR
// for i in pom do
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_VAR 0 5
6582: PUSH
6583: FOR_IN
6584: IFFALSE 6597
// nastav_povolani_podle_skilu ( i ) ;
6586: LD_VAR 0 3
6590: PPUSH
6591: CALL 10689 0 1
6595: GO 6583
6597: POP
6598: POP
// if pom < pocet_lidi_na_zacatku [ difficulty ] then
6599: LD_VAR 0 5
6603: PUSH
6604: LD_EXP 37
6608: PUSH
6609: LD_OWVAR 67
6613: ARRAY
6614: LESS
6615: IFFALSE 6689
// for i := 1 to ( pocet_lidi_na_zacatku [ difficulty ] - pom ) do
6617: LD_ADDR_VAR 0 3
6621: PUSH
6622: DOUBLE
6623: LD_INT 1
6625: DEC
6626: ST_TO_ADDR
6627: LD_EXP 37
6631: PUSH
6632: LD_OWVAR 67
6636: ARRAY
6637: PUSH
6638: LD_VAR 0 5
6642: MINUS
6643: PUSH
6644: FOR_TO
6645: IFFALSE 6687
// pom = pom ^ get_human ( get_sex , Rand ( 1 , 4 ) , 6 ,  ) ;
6647: LD_ADDR_VAR 0 5
6651: PUSH
6652: LD_VAR 0 5
6656: PUSH
6657: CALL 7494 0 0
6661: PPUSH
6662: LD_INT 1
6664: PPUSH
6665: LD_INT 4
6667: PPUSH
6668: CALL_OW 12
6672: PPUSH
6673: LD_INT 6
6675: PPUSH
6676: LD_STRING 
6678: PPUSH
6679: CALL 7529 0 4
6683: ADD
6684: ST_TO_ADDR
6685: GO 6644
6687: POP
6688: POP
// lvyber = lvyber ^ pom ;
6689: LD_ADDR_VAR 0 2
6693: PUSH
6694: LD_VAR 0 2
6698: PUSH
6699: LD_VAR 0 5
6703: ADD
6704: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet_lidi_na_zacatku [ difficulty ] , pocet_lidi_na_zacatku [ difficulty ] , lvyber , [ [ class_engineer , 1 ] , [ class_scientistic , 0 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
6705: LD_ADDR_VAR 0 5
6709: PUSH
6710: LD_STRING Vyber si peopliky
6712: PPUSH
6713: LD_EXP 37
6717: PUSH
6718: LD_OWVAR 67
6722: ARRAY
6723: PPUSH
6724: LD_EXP 37
6728: PUSH
6729: LD_OWVAR 67
6733: ARRAY
6734: PPUSH
6735: LD_VAR 0 2
6739: PPUSH
6740: LD_INT 2
6742: PUSH
6743: LD_INT 1
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 4
6752: PUSH
6753: LD_INT 0
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: LD_INT 0
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 1
6772: PUSH
6773: LD_INT 0
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: PPUSH
6786: CALL_OW 42
6790: ST_TO_ADDR
// everybody := everybody union pom ;
6791: LD_ADDR_EXP 5
6795: PUSH
6796: LD_EXP 5
6800: PUSH
6801: LD_VAR 0 5
6805: UNION
6806: ST_TO_ADDR
// vyber = [ bur ] ;
6807: LD_ADDR_VAR 0 6
6811: PUSH
6812: LD_EXP 11
6816: PUSH
6817: EMPTY
6818: LIST
6819: ST_TO_ADDR
// vyber = vyber ^ pom ;
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_VAR 0 6
6829: PUSH
6830: LD_VAR 0 5
6834: ADD
6835: ST_TO_ADDR
// result := vyber ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_VAR 0 6
6845: ST_TO_ADDR
// end ;
6846: LD_VAR 0 1
6850: RET
// export function create_rusky_konvoj ( lidicci ) ; var pom ; var lpom ; begin
6851: LD_INT 0
6853: PPUSH
6854: PPUSH
6855: PPUSH
// pom = [ ] ;
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: EMPTY
6862: ST_TO_ADDR
// lpom = lidicci ;
6863: LD_ADDR_VAR 0 4
6867: PUSH
6868: LD_VAR 0 1
6872: ST_TO_ADDR
// uc_nation = nation_russian ;
6873: LD_ADDR_OWVAR 21
6877: PUSH
6878: LD_INT 3
6880: ST_TO_ADDR
// uc_side = You ;
6881: LD_ADDR_OWVAR 20
6885: PUSH
6886: LD_EXP 1
6890: ST_TO_ADDR
// vc_chassis = masha_l [ 1 ] ;
6891: LD_ADDR_OWVAR 37
6895: PUSH
6896: LD_EXP 52
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: ST_TO_ADDR
// vc_engine = masha_l [ 2 ] ;
6905: LD_ADDR_OWVAR 39
6909: PUSH
6910: LD_EXP 52
6914: PUSH
6915: LD_INT 2
6917: ARRAY
6918: ST_TO_ADDR
// vc_control = masha_l [ 3 ] ;
6919: LD_ADDR_OWVAR 38
6923: PUSH
6924: LD_EXP 52
6928: PUSH
6929: LD_INT 3
6931: ARRAY
6932: ST_TO_ADDR
// vc_weapon = masha_l [ 4 ] ;
6933: LD_ADDR_OWVAR 40
6937: PUSH
6938: LD_EXP 52
6942: PUSH
6943: LD_INT 4
6945: ARRAY
6946: ST_TO_ADDR
// av = CreateVehicle ;
6947: LD_ADDR_LOC 5
6951: PUSH
6952: CALL_OW 45
6956: ST_TO_ADDR
// masha = av ;
6957: LD_ADDR_EXP 10
6961: PUSH
6962: LD_LOC 5
6966: ST_TO_ADDR
// SetMark ( masha , 1 ) ;
6967: LD_EXP 10
6971: PPUSH
6972: LD_INT 1
6974: PPUSH
6975: CALL_OW 242
// PlaceHumanInUnit ( bur , masha ) ;
6979: LD_EXP 11
6983: PPUSH
6984: LD_EXP 10
6988: PPUSH
6989: CALL_OW 52
// lpom = lpom diff bur ;
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_VAR 0 4
7002: PUSH
7003: LD_EXP 11
7007: DIFF
7008: ST_TO_ADDR
// pom = pom ^ masha ;
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: LD_VAR 0 3
7018: PUSH
7019: LD_EXP 10
7023: ADD
7024: ST_TO_ADDR
// vc_control = control_manual ;
7025: LD_ADDR_OWVAR 38
7029: PUSH
7030: LD_INT 1
7032: ST_TO_ADDR
// vc_engine = engine_combustion ;
7033: LD_ADDR_OWVAR 39
7037: PUSH
7038: LD_INT 1
7040: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
7041: LD_ADDR_OWVAR 37
7045: PUSH
7046: LD_INT 22
7048: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
7049: LD_ADDR_OWVAR 40
7053: PUSH
7054: LD_INT 51
7056: ST_TO_ADDR
// av = CreateVehicle ;
7057: LD_ADDR_LOC 5
7061: PUSH
7062: CALL_OW 45
7066: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 1 ] , av ) ;
7067: LD_VAR 0 4
7071: PUSH
7072: LD_INT 1
7074: ARRAY
7075: PPUSH
7076: LD_LOC 5
7080: PPUSH
7081: CALL_OW 52
// AddCargo ( av , mat_cans , 100 ) ;
7085: LD_LOC 5
7089: PPUSH
7090: LD_INT 1
7092: PPUSH
7093: LD_INT 100
7095: PPUSH
7096: CALL_OW 291
// pom = pom ^ av ;
7100: LD_ADDR_VAR 0 3
7104: PUSH
7105: LD_VAR 0 3
7109: PUSH
7110: LD_LOC 5
7114: ADD
7115: ST_TO_ADDR
// av = CreateVehicle ;
7116: LD_ADDR_LOC 5
7120: PUSH
7121: CALL_OW 45
7125: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 2 ] , av ) ;
7126: LD_VAR 0 4
7130: PUSH
7131: LD_INT 2
7133: ARRAY
7134: PPUSH
7135: LD_LOC 5
7139: PPUSH
7140: CALL_OW 52
// AddCargo ( av , mat_cans , 50 ) ;
7144: LD_LOC 5
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: LD_INT 50
7154: PPUSH
7155: CALL_OW 291
// AddCargo ( av , mat_oil , 50 ) ;
7159: LD_LOC 5
7163: PPUSH
7164: LD_INT 2
7166: PPUSH
7167: LD_INT 50
7169: PPUSH
7170: CALL_OW 291
// pom = pom ^ av ;
7174: LD_ADDR_VAR 0 3
7178: PUSH
7179: LD_VAR 0 3
7183: PUSH
7184: LD_LOC 5
7188: ADD
7189: ST_TO_ADDR
// av = CreateVehicle ;
7190: LD_ADDR_LOC 5
7194: PUSH
7195: CALL_OW 45
7199: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 3 ] , av ) ;
7200: LD_VAR 0 4
7204: PUSH
7205: LD_INT 3
7207: ARRAY
7208: PPUSH
7209: LD_LOC 5
7213: PPUSH
7214: CALL_OW 52
// AddCargo ( av , mat_cans , 20 ) ;
7218: LD_LOC 5
7222: PPUSH
7223: LD_INT 1
7225: PPUSH
7226: LD_INT 20
7228: PPUSH
7229: CALL_OW 291
// AddCargo ( av , mat_oil , 40 ) ;
7233: LD_LOC 5
7237: PPUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 40
7243: PPUSH
7244: CALL_OW 291
// AddCargo ( av , mat_siberit , 20 ) ;
7248: LD_LOC 5
7252: PPUSH
7253: LD_INT 3
7255: PPUSH
7256: LD_INT 20
7258: PPUSH
7259: CALL_OW 291
// pom = pom ^ av ;
7263: LD_ADDR_VAR 0 3
7267: PUSH
7268: LD_VAR 0 3
7272: PUSH
7273: LD_LOC 5
7277: ADD
7278: ST_TO_ADDR
// vc_weapon = ru_crane ;
7279: LD_ADDR_OWVAR 40
7283: PUSH
7284: LD_INT 52
7286: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
7287: LD_ADDR_OWVAR 37
7291: PUSH
7292: LD_INT 22
7294: ST_TO_ADDR
// av = CreateVehicle ;
7295: LD_ADDR_LOC 5
7299: PUSH
7300: CALL_OW 45
7304: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 4 ] , av ) ;
7305: LD_VAR 0 4
7309: PUSH
7310: LD_INT 4
7312: ARRAY
7313: PPUSH
7314: LD_LOC 5
7318: PPUSH
7319: CALL_OW 52
// pom = pom ^ av ;
7323: LD_ADDR_VAR 0 3
7327: PUSH
7328: LD_VAR 0 3
7332: PUSH
7333: LD_LOC 5
7337: ADD
7338: ST_TO_ADDR
// vc_weapon = zbran_na_uvod [ difficulty ] ;
7339: LD_ADDR_OWVAR 40
7343: PUSH
7344: LD_EXP 49
7348: PUSH
7349: LD_OWVAR 67
7353: ARRAY
7354: ST_TO_ADDR
// vc_chassis = chassis_na_uvod [ difficulty ] ;
7355: LD_ADDR_OWVAR 37
7359: PUSH
7360: LD_EXP 50
7364: PUSH
7365: LD_OWVAR 67
7369: ARRAY
7370: ST_TO_ADDR
// if difficulty < 3 then
7371: LD_OWVAR 67
7375: PUSH
7376: LD_INT 3
7378: LESS
7379: IFFALSE 7425
// begin av = CreateVehicle ;
7381: LD_ADDR_LOC 5
7385: PUSH
7386: CALL_OW 45
7390: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 5 ] , av ) ;
7391: LD_VAR 0 4
7395: PUSH
7396: LD_INT 5
7398: ARRAY
7399: PPUSH
7400: LD_LOC 5
7404: PPUSH
7405: CALL_OW 52
// pom = pom ^ av ;
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_VAR 0 3
7418: PUSH
7419: LD_LOC 5
7423: ADD
7424: ST_TO_ADDR
// end ; if difficulty < 2 then
7425: LD_OWVAR 67
7429: PUSH
7430: LD_INT 2
7432: LESS
7433: IFFALSE 7479
// begin av = CreateVehicle ;
7435: LD_ADDR_LOC 5
7439: PUSH
7440: CALL_OW 45
7444: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 6 ] , av ) ;
7445: LD_VAR 0 4
7449: PUSH
7450: LD_INT 6
7452: ARRAY
7453: PPUSH
7454: LD_LOC 5
7458: PPUSH
7459: CALL_OW 52
// pom = pom ^ av ;
7463: LD_ADDR_VAR 0 3
7467: PUSH
7468: LD_VAR 0 3
7472: PUSH
7473: LD_LOC 5
7477: ADD
7478: ST_TO_ADDR
// end ; RUSI_ENTER_LIST = pom ;
7479: LD_ADDR_EXP 31
7483: PUSH
7484: LD_VAR 0 3
7488: ST_TO_ADDR
// end ;
7489: LD_VAR 0 2
7493: RET
// function get_sex ; begin
7494: LD_INT 0
7496: PPUSH
// if Prob ( 20 ) then
7497: LD_INT 20
7499: PPUSH
7500: CALL_OW 13
7504: IFFALSE 7516
// result = sex_female else
7506: LD_ADDR_VAR 0 1
7510: PUSH
7511: LD_INT 2
7513: ST_TO_ADDR
7514: GO 7524
// result = sex_male ;
7516: LD_ADDR_VAR 0 1
7520: PUSH
7521: LD_INT 1
7523: ST_TO_ADDR
// end ;
7524: LD_VAR 0 1
7528: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
7529: LD_INT 0
7531: PPUSH
7532: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7533: LD_VAR 0 1
7537: PPUSH
7538: LD_VAR 0 2
7542: PPUSH
7543: LD_VAR 0 3
7547: PPUSH
7548: CALL_OW 380
// hc_name := name ;
7552: LD_ADDR_OWVAR 26
7556: PUSH
7557: LD_VAR 0 4
7561: ST_TO_ADDR
// pom = CreateHuman ;
7562: LD_ADDR_VAR 0 6
7566: PUSH
7567: CALL_OW 44
7571: ST_TO_ADDR
// result := pom ;
7572: LD_ADDR_VAR 0 5
7576: PUSH
7577: LD_VAR 0 6
7581: ST_TO_ADDR
// end ;
7582: LD_VAR 0 5
7586: RET
// export function vytvor_araby ; begin
7587: LD_INT 0
7589: PPUSH
// uc_nation = nation_arabian ;
7590: LD_ADDR_OWVAR 21
7594: PUSH
7595: LD_INT 2
7597: ST_TO_ADDR
// uc_side = Arabi ;
7598: LD_ADDR_OWVAR 20
7602: PUSH
7603: LD_EXP 4
7607: ST_TO_ADDR
// diet = nacti_osobu ( Dietrich ) ;
7608: LD_ADDR_EXP 55
7612: PUSH
7613: LD_STRING Dietrich
7615: PPUSH
7616: CALL 7802 0 1
7620: ST_TO_ADDR
// SetSide ( diet , Arabi ) ;
7621: LD_EXP 55
7625: PPUSH
7626: LD_EXP 4
7630: PPUSH
7631: CALL_OW 235
// PlaceUnitXY ( diet , 76 , 19 , false ) ;
7635: LD_EXP 55
7639: PPUSH
7640: LD_INT 76
7642: PPUSH
7643: LD_INT 19
7645: PPUSH
7646: LD_INT 0
7648: PPUSH
7649: CALL_OW 48
// A2 = get_human ( sex_male , class_soldier , levely_arabi [ difficulty ] ,  ) ;
7653: LD_ADDR_EXP 56
7657: PUSH
7658: LD_INT 1
7660: PPUSH
7661: LD_INT 1
7663: PPUSH
7664: LD_EXP 38
7668: PUSH
7669: LD_OWVAR 67
7673: ARRAY
7674: PPUSH
7675: LD_STRING 
7677: PPUSH
7678: CALL 7529 0 4
7682: ST_TO_ADDR
// PlaceUnitXY ( A2 , 74 , 22 , false ) ;
7683: LD_EXP 56
7687: PPUSH
7688: LD_INT 74
7690: PPUSH
7691: LD_INT 22
7693: PPUSH
7694: LD_INT 0
7696: PPUSH
7697: CALL_OW 48
// A3 = get_human ( sex_male , class_engineer , levely_arabi [ difficulty ] ,  ) ;
7701: LD_ADDR_EXP 57
7705: PUSH
7706: LD_INT 1
7708: PPUSH
7709: LD_INT 2
7711: PPUSH
7712: LD_EXP 38
7716: PUSH
7717: LD_OWVAR 67
7721: ARRAY
7722: PPUSH
7723: LD_STRING 
7725: PPUSH
7726: CALL 7529 0 4
7730: ST_TO_ADDR
// PlaceUnitXY ( A3 , 74 , 21 , false ) ;
7731: LD_EXP 57
7735: PPUSH
7736: LD_INT 74
7738: PPUSH
7739: LD_INT 21
7741: PPUSH
7742: LD_INT 0
7744: PPUSH
7745: CALL_OW 48
// A4 = get_human ( sex_male , class_soldier , levely_arabi [ difficulty ] ,  ) ;
7749: LD_ADDR_EXP 58
7753: PUSH
7754: LD_INT 1
7756: PPUSH
7757: LD_INT 1
7759: PPUSH
7760: LD_EXP 38
7764: PUSH
7765: LD_OWVAR 67
7769: ARRAY
7770: PPUSH
7771: LD_STRING 
7773: PPUSH
7774: CALL 7529 0 4
7778: ST_TO_ADDR
// PlaceUnitXY ( A4 , 75 , 22 , false ) ;
7779: LD_EXP 58
7783: PPUSH
7784: LD_INT 75
7786: PPUSH
7787: LD_INT 22
7789: PPUSH
7790: LD_INT 0
7792: PPUSH
7793: CALL_OW 48
// end ;
7797: LD_VAR 0 1
7801: RET
// export function nacti_osobu ( ident ) ; begin
7802: LD_INT 0
7804: PPUSH
// if CheckCharacterSet ( ident ) then
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 29
7814: IFFALSE 7833
// result := CreateCharacter ( ident ) else
7816: LD_ADDR_VAR 0 2
7820: PUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 34
7830: ST_TO_ADDR
7831: GO 7841
// result := 0 ;
7833: LD_ADDR_VAR 0 2
7837: PUSH
7838: LD_INT 0
7840: ST_TO_ADDR
// end ;
7841: LD_VAR 0 2
7845: RET
// export function vytvor_amiky ; begin
7846: LD_INT 0
7848: PPUSH
// uc_nation = nation_american ;
7849: LD_ADDR_OWVAR 21
7853: PUSH
7854: LD_INT 1
7856: ST_TO_ADDR
// uc_side = Amici ;
7857: LD_ADDR_OWVAR 20
7861: PUSH
7862: LD_EXP 2
7866: ST_TO_ADDR
// Joan = nacti_osobu ( Joan ) ;
7867: LD_ADDR_EXP 61
7871: PUSH
7872: LD_STRING Joan
7874: PPUSH
7875: CALL 7802 0 1
7879: ST_TO_ADDR
// SetClass ( Joan , class_scientistic ) ;
7880: LD_EXP 61
7884: PPUSH
7885: LD_INT 4
7887: PPUSH
7888: CALL_OW 336
// SetSide ( Joan , Amici ) ;
7892: LD_EXP 61
7896: PPUSH
7897: LD_EXP 2
7901: PPUSH
7902: CALL_OW 235
// JMM = nacti_osobu ( MacMillan ) ;
7906: LD_ADDR_EXP 60
7910: PUSH
7911: LD_STRING MacMillan
7913: PPUSH
7914: CALL 7802 0 1
7918: ST_TO_ADDR
// SetSide ( JMM , Amici ) ;
7919: LD_EXP 60
7923: PPUSH
7924: LD_EXP 2
7928: PPUSH
7929: CALL_OW 235
// SetClass ( JMM , class_soldier ) ;
7933: LD_EXP 60
7937: PPUSH
7938: LD_INT 1
7940: PPUSH
7941: CALL_OW 336
// PlaceUnitXY ( Joan , 111 , 41 , false ) ;
7945: LD_EXP 61
7949: PPUSH
7950: LD_INT 111
7952: PPUSH
7953: LD_INT 41
7955: PPUSH
7956: LD_INT 0
7958: PPUSH
7959: CALL_OW 48
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] , Karin Horak ) ;
7963: LD_ADDR_LOC 6
7967: PUSH
7968: LD_INT 2
7970: PPUSH
7971: LD_INT 4
7973: PPUSH
7974: LD_EXP 41
7978: PUSH
7979: LD_OWVAR 67
7983: ARRAY
7984: PPUSH
7985: LD_STRING Karin Horak
7987: PPUSH
7988: CALL 7529 0 4
7992: ST_TO_ADDR
// PlaceUnitXY ( ah , 107 , 30 , false ) ;
7993: LD_LOC 6
7997: PPUSH
7998: LD_INT 107
8000: PPUSH
8001: LD_INT 30
8003: PPUSH
8004: LD_INT 0
8006: PPUSH
8007: CALL_OW 48
// VEDCI1 = [ ah ] ;
8011: LD_ADDR_EXP 62
8015: PUSH
8016: LD_LOC 6
8020: PUSH
8021: EMPTY
8022: LIST
8023: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8024: LD_ADDR_LOC 6
8028: PUSH
8029: CALL 7494 0 0
8033: PPUSH
8034: LD_INT 4
8036: PPUSH
8037: LD_EXP 41
8041: PUSH
8042: LD_OWVAR 67
8046: ARRAY
8047: PPUSH
8048: LD_STRING 
8050: PPUSH
8051: CALL 7529 0 4
8055: ST_TO_ADDR
// PlaceUnitXY ( ah , 110 , 32 , false ) ;
8056: LD_LOC 6
8060: PPUSH
8061: LD_INT 110
8063: PPUSH
8064: LD_INT 32
8066: PPUSH
8067: LD_INT 0
8069: PPUSH
8070: CALL_OW 48
// VEDCI1 = VEDCI1 ^ ah ;
8074: LD_ADDR_EXP 62
8078: PUSH
8079: LD_EXP 62
8083: PUSH
8084: LD_LOC 6
8088: ADD
8089: ST_TO_ADDR
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8090: LD_ADDR_LOC 6
8094: PUSH
8095: LD_INT 2
8097: PPUSH
8098: LD_INT 4
8100: PPUSH
8101: LD_EXP 41
8105: PUSH
8106: LD_OWVAR 67
8110: ARRAY
8111: PPUSH
8112: LD_STRING 
8114: PPUSH
8115: CALL 7529 0 4
8119: ST_TO_ADDR
// PlaceUnitXY ( ah , 113 , 40 , false ) ;
8120: LD_LOC 6
8124: PPUSH
8125: LD_INT 113
8127: PPUSH
8128: LD_INT 40
8130: PPUSH
8131: LD_INT 0
8133: PPUSH
8134: CALL_OW 48
// VEDCI2 = [ ah ] ;
8138: LD_ADDR_EXP 63
8142: PUSH
8143: LD_LOC 6
8147: PUSH
8148: EMPTY
8149: LIST
8150: ST_TO_ADDR
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8151: LD_ADDR_LOC 6
8155: PUSH
8156: LD_INT 2
8158: PPUSH
8159: LD_INT 4
8161: PPUSH
8162: LD_EXP 41
8166: PUSH
8167: LD_OWVAR 67
8171: ARRAY
8172: PPUSH
8173: LD_STRING 
8175: PPUSH
8176: CALL 7529 0 4
8180: ST_TO_ADDR
// PlaceUnitXY ( ah , 112 , 40 , false ) ;
8181: LD_LOC 6
8185: PPUSH
8186: LD_INT 112
8188: PPUSH
8189: LD_INT 40
8191: PPUSH
8192: LD_INT 0
8194: PPUSH
8195: CALL_OW 48
// VEDCI2 = VEDCI2 ^ ah ;
8199: LD_ADDR_EXP 63
8203: PUSH
8204: LD_EXP 63
8208: PUSH
8209: LD_LOC 6
8213: ADD
8214: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8215: LD_ADDR_LOC 6
8219: PUSH
8220: CALL 7494 0 0
8224: PPUSH
8225: LD_INT 4
8227: PPUSH
8228: LD_EXP 41
8232: PUSH
8233: LD_OWVAR 67
8237: ARRAY
8238: PPUSH
8239: LD_STRING 
8241: PPUSH
8242: CALL 7529 0 4
8246: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 43 , false ) ;
8247: LD_LOC 6
8251: PPUSH
8252: LD_INT 106
8254: PPUSH
8255: LD_INT 43
8257: PPUSH
8258: LD_INT 0
8260: PPUSH
8261: CALL_OW 48
// VEDCI3 = [ ah ] ;
8265: LD_ADDR_EXP 64
8269: PUSH
8270: LD_LOC 6
8274: PUSH
8275: EMPTY
8276: LIST
8277: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8278: LD_ADDR_LOC 6
8282: PUSH
8283: CALL 7494 0 0
8287: PPUSH
8288: LD_INT 4
8290: PPUSH
8291: LD_EXP 41
8295: PUSH
8296: LD_OWVAR 67
8300: ARRAY
8301: PPUSH
8302: LD_STRING 
8304: PPUSH
8305: CALL 7529 0 4
8309: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 44 , false ) ;
8310: LD_LOC 6
8314: PPUSH
8315: LD_INT 106
8317: PPUSH
8318: LD_INT 44
8320: PPUSH
8321: LD_INT 0
8323: PPUSH
8324: CALL_OW 48
// VEDCI3 = VEDCI3 ^ ah ;
8328: LD_ADDR_EXP 64
8332: PUSH
8333: LD_EXP 64
8337: PUSH
8338: LD_LOC 6
8342: ADD
8343: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] + 1 , David Love ) ;
8344: LD_ADDR_LOC 6
8348: PUSH
8349: CALL 7494 0 0
8353: PPUSH
8354: LD_INT 3
8356: PPUSH
8357: LD_EXP 41
8361: PUSH
8362: LD_OWVAR 67
8366: ARRAY
8367: PUSH
8368: LD_INT 1
8370: PLUS
8371: PPUSH
8372: LD_STRING David Love
8374: PPUSH
8375: CALL 7529 0 4
8379: ST_TO_ADDR
// PlaceUnitXY ( ah , 105 , 29 , false ) ;
8380: LD_LOC 6
8384: PPUSH
8385: LD_INT 105
8387: PPUSH
8388: LD_INT 29
8390: PPUSH
8391: LD_INT 0
8393: PPUSH
8394: CALL_OW 48
// Am_mech = ah ;
8398: LD_ADDR_EXP 67
8402: PUSH
8403: LD_LOC 6
8407: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] + 1 ,  ) ;
8408: LD_ADDR_LOC 6
8412: PUSH
8413: CALL 7494 0 0
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_EXP 41
8425: PUSH
8426: LD_OWVAR 67
8430: ARRAY
8431: PUSH
8432: LD_INT 1
8434: PLUS
8435: PPUSH
8436: LD_STRING 
8438: PPUSH
8439: CALL 7529 0 4
8443: ST_TO_ADDR
// PlaceUnitXY ( ah , 105 , 30 , false ) ;
8444: LD_LOC 6
8448: PPUSH
8449: LD_INT 105
8451: PPUSH
8452: LD_INT 30
8454: PPUSH
8455: LD_INT 0
8457: PPUSH
8458: CALL_OW 48
// Am_mech = Am_mech ^ ah ;
8462: LD_ADDR_EXP 67
8466: PUSH
8467: LD_EXP 67
8471: PUSH
8472: LD_LOC 6
8476: ADD
8477: ST_TO_ADDR
// prepare_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
8478: CALL 7494 0 0
8482: PPUSH
8483: LD_INT 3
8485: PPUSH
8486: LD_EXP 41
8490: PUSH
8491: LD_OWVAR 67
8495: ARRAY
8496: PPUSH
8497: LD_STRING 
8499: PPUSH
8500: CALL 8749 0 4
// SetSkill ( ah , skill_combat , 6 ) ;
8504: LD_LOC 6
8508: PPUSH
8509: LD_INT 1
8511: PPUSH
8512: LD_INT 6
8514: PPUSH
8515: CALL_OW 237
// ah = CreateHuman ;
8519: LD_ADDR_LOC 6
8523: PUSH
8524: CALL_OW 44
8528: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 39 , false ) ;
8529: LD_LOC 6
8533: PPUSH
8534: LD_INT 106
8536: PPUSH
8537: LD_INT 39
8539: PPUSH
8540: LD_INT 0
8542: PPUSH
8543: CALL_OW 48
// Am_vyr = ah ;
8547: LD_ADDR_EXP 68
8551: PUSH
8552: LD_LOC 6
8556: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , levely_amici [ difficulty ] ,  ) ;
8557: LD_ADDR_LOC 6
8561: PUSH
8562: LD_INT 1
8564: PPUSH
8565: LD_INT 1
8567: PPUSH
8568: LD_EXP 41
8572: PUSH
8573: LD_OWVAR 67
8577: ARRAY
8578: PPUSH
8579: LD_STRING 
8581: PPUSH
8582: CALL 7529 0 4
8586: ST_TO_ADDR
// PlaceUnitXY ( ah , 104 , 39 , false ) ;
8587: LD_LOC 6
8591: PPUSH
8592: LD_INT 104
8594: PPUSH
8595: LD_INT 39
8597: PPUSH
8598: LD_INT 0
8600: PPUSH
8601: CALL_OW 48
// Am_sol = [ ah ] ;
8605: LD_ADDR_EXP 66
8609: PUSH
8610: LD_LOC 6
8614: PUSH
8615: EMPTY
8616: LIST
8617: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , levely_amici [ difficulty ] ,  ) ;
8618: LD_ADDR_LOC 6
8622: PUSH
8623: LD_INT 1
8625: PPUSH
8626: LD_INT 1
8628: PPUSH
8629: LD_EXP 41
8633: PUSH
8634: LD_OWVAR 67
8638: ARRAY
8639: PPUSH
8640: LD_STRING 
8642: PPUSH
8643: CALL 7529 0 4
8647: ST_TO_ADDR
// PlaceUnitXY ( ah , 102 , 44 , false ) ;
8648: LD_LOC 6
8652: PPUSH
8653: LD_INT 102
8655: PPUSH
8656: LD_INT 44
8658: PPUSH
8659: LD_INT 0
8661: PPUSH
8662: CALL_OW 48
// Am_sol = Am_sol ^ ah ;
8666: LD_ADDR_EXP 66
8670: PUSH
8671: LD_EXP 66
8675: PUSH
8676: LD_LOC 6
8680: ADD
8681: ST_TO_ADDR
// ah = get_human ( sex_male , class_sniper , levely_amici [ difficulty ] - 2 ,  ) ;
8682: LD_ADDR_LOC 6
8686: PUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 5
8692: PPUSH
8693: LD_EXP 41
8697: PUSH
8698: LD_OWVAR 67
8702: ARRAY
8703: PUSH
8704: LD_INT 2
8706: MINUS
8707: PPUSH
8708: LD_STRING 
8710: PPUSH
8711: CALL 7529 0 4
8715: ST_TO_ADDR
// PlaceUnitXY ( ah , 98 , 43 , false ) ;
8716: LD_LOC 6
8720: PPUSH
8721: LD_INT 98
8723: PPUSH
8724: LD_INT 43
8726: PPUSH
8727: LD_INT 0
8729: PPUSH
8730: CALL_OW 48
// Am_snipe = ah ;
8734: LD_ADDR_EXP 69
8738: PUSH
8739: LD_LOC 6
8743: ST_TO_ADDR
// end ;
8744: LD_VAR 0 1
8748: RET
// function prepare_human ( sex , clas , level , name ) ; begin
8749: LD_INT 0
8751: PPUSH
// PrepareHuman ( sex , clas , level ) ;
8752: LD_VAR 0 1
8756: PPUSH
8757: LD_VAR 0 2
8761: PPUSH
8762: LD_VAR 0 3
8766: PPUSH
8767: CALL_OW 380
// hc_name := name ;
8771: LD_ADDR_OWVAR 26
8775: PUSH
8776: LD_VAR 0 4
8780: ST_TO_ADDR
// end ;
8781: LD_VAR 0 5
8785: RET
// export function create_first_utok ; var pom ; begin
8786: LD_INT 0
8788: PPUSH
8789: PPUSH
// pom = [ ] ;
8790: LD_ADDR_VAR 0 2
8794: PUSH
8795: EMPTY
8796: ST_TO_ADDR
// uc_nation = nation_american ;
8797: LD_ADDR_OWVAR 21
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// uc_side = Amici2 ;
8805: LD_ADDR_OWVAR 20
8809: PUSH
8810: LD_EXP 3
8814: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: CALL 7494 0 0
8824: PPUSH
8825: LD_INT 1
8827: PPUSH
8828: LD_EXP 41
8832: PUSH
8833: LD_OWVAR 67
8837: ARRAY
8838: PPUSH
8839: LD_STRING 
8841: PPUSH
8842: CALL 7529 0 4
8846: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_VAR 0 2
8856: PUSH
8857: CALL 7494 0 0
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: LD_EXP 41
8869: PUSH
8870: LD_OWVAR 67
8874: ARRAY
8875: PPUSH
8876: LD_STRING 
8878: PPUSH
8879: CALL 7529 0 4
8883: ADD
8884: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8885: LD_ADDR_VAR 0 2
8889: PUSH
8890: LD_VAR 0 2
8894: PUSH
8895: CALL 7494 0 0
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: LD_EXP 41
8907: PUSH
8908: LD_OWVAR 67
8912: ARRAY
8913: PPUSH
8914: LD_STRING 
8916: PPUSH
8917: CALL 7529 0 4
8921: ADD
8922: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
8923: LD_ADDR_LOC 6
8927: PUSH
8928: CALL 7494 0 0
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: LD_EXP 41
8940: PUSH
8941: LD_OWVAR 67
8945: ARRAY
8946: PUSH
8947: LD_INT 3
8949: MINUS
8950: PPUSH
8951: LD_STRING 
8953: PPUSH
8954: CALL 7529 0 4
8958: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
8959: LD_ADDR_OWVAR 37
8963: PUSH
8964: LD_INT 3
8966: ST_TO_ADDR
// vc_control = control_manual ;
8967: LD_ADDR_OWVAR 38
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// vc_engine = engine_combustion ;
8975: LD_ADDR_OWVAR 39
8979: PUSH
8980: LD_INT 1
8982: ST_TO_ADDR
// vc_weapon = us_double_gun ;
8983: LD_ADDR_OWVAR 40
8987: PUSH
8988: LD_INT 5
8990: ST_TO_ADDR
// av = CreateVehicle ;
8991: LD_ADDR_LOC 5
8995: PUSH
8996: CALL_OW 45
9000: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9001: LD_LOC 6
9005: PPUSH
9006: LD_LOC 5
9010: PPUSH
9011: CALL_OW 52
// pom = pom ^ av ;
9015: LD_ADDR_VAR 0 2
9019: PUSH
9020: LD_VAR 0 2
9024: PUSH
9025: LD_LOC 5
9029: ADD
9030: ST_TO_ADDR
// AM_UTOK_1_LIST = pom ;
9031: LD_ADDR_EXP 32
9035: PUSH
9036: LD_VAR 0 2
9040: ST_TO_ADDR
// end ;
9041: LD_VAR 0 1
9045: RET
// export function create_second_utok ; var pom ; begin
9046: LD_INT 0
9048: PPUSH
9049: PPUSH
// pom = [ ] ;
9050: LD_ADDR_VAR 0 2
9054: PUSH
9055: EMPTY
9056: ST_TO_ADDR
// uc_nation = nation_american ;
9057: LD_ADDR_OWVAR 21
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// uc_side = Amici2 ;
9065: LD_ADDR_OWVAR 20
9069: PUSH
9070: LD_EXP 3
9074: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: CALL 7494 0 0
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: LD_EXP 41
9092: PUSH
9093: LD_OWVAR 67
9097: ARRAY
9098: PPUSH
9099: LD_STRING 
9101: PPUSH
9102: CALL 7529 0 4
9106: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9107: LD_ADDR_VAR 0 2
9111: PUSH
9112: LD_VAR 0 2
9116: PUSH
9117: CALL 7494 0 0
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: LD_EXP 41
9129: PUSH
9130: LD_OWVAR 67
9134: ARRAY
9135: PPUSH
9136: LD_STRING 
9138: PPUSH
9139: CALL 7529 0 4
9143: ADD
9144: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9145: LD_ADDR_LOC 6
9149: PUSH
9150: CALL 7494 0 0
9154: PPUSH
9155: LD_INT 3
9157: PPUSH
9158: LD_EXP 41
9162: PUSH
9163: LD_OWVAR 67
9167: ARRAY
9168: PUSH
9169: LD_INT 3
9171: MINUS
9172: PPUSH
9173: LD_STRING 
9175: PPUSH
9176: CALL 7529 0 4
9180: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9181: LD_ADDR_OWVAR 37
9185: PUSH
9186: LD_INT 3
9188: ST_TO_ADDR
// vc_control = control_manual ;
9189: LD_ADDR_OWVAR 38
9193: PUSH
9194: LD_INT 1
9196: ST_TO_ADDR
// vc_engine = engine_combustion ;
9197: LD_ADDR_OWVAR 39
9201: PUSH
9202: LD_INT 1
9204: ST_TO_ADDR
// vc_weapon = us_double_gun ;
9205: LD_ADDR_OWVAR 40
9209: PUSH
9210: LD_INT 5
9212: ST_TO_ADDR
// av = CreateVehicle ;
9213: LD_ADDR_LOC 5
9217: PUSH
9218: CALL_OW 45
9222: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9223: LD_LOC 6
9227: PPUSH
9228: LD_LOC 5
9232: PPUSH
9233: CALL_OW 52
// pom = pom ^ av ;
9237: LD_ADDR_VAR 0 2
9241: PUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_LOC 5
9251: ADD
9252: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9253: LD_ADDR_LOC 6
9257: PUSH
9258: CALL 7494 0 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_EXP 41
9270: PUSH
9271: LD_OWVAR 67
9275: ARRAY
9276: PUSH
9277: LD_INT 3
9279: MINUS
9280: PPUSH
9281: LD_STRING 
9283: PPUSH
9284: CALL 7529 0 4
9288: ST_TO_ADDR
// av = CreateVehicle ;
9289: LD_ADDR_LOC 5
9293: PUSH
9294: CALL_OW 45
9298: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9299: LD_LOC 6
9303: PPUSH
9304: LD_LOC 5
9308: PPUSH
9309: CALL_OW 52
// pom = pom ^ av ;
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_VAR 0 2
9322: PUSH
9323: LD_LOC 5
9327: ADD
9328: ST_TO_ADDR
// if difficulty > 2 then
9329: LD_OWVAR 67
9333: PUSH
9334: LD_INT 2
9336: GREATER
9337: IFFALSE 9447
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9339: LD_ADDR_LOC 6
9343: PUSH
9344: CALL 7494 0 0
9348: PPUSH
9349: LD_INT 3
9351: PPUSH
9352: LD_EXP 41
9356: PUSH
9357: LD_OWVAR 67
9361: ARRAY
9362: PUSH
9363: LD_INT 3
9365: MINUS
9366: PPUSH
9367: LD_STRING 
9369: PPUSH
9370: CALL 7529 0 4
9374: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9375: LD_ADDR_OWVAR 37
9379: PUSH
9380: LD_INT 3
9382: ST_TO_ADDR
// vc_control = control_manual ;
9383: LD_ADDR_OWVAR 38
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// vc_engine = engine_solar ;
9391: LD_ADDR_OWVAR 39
9395: PUSH
9396: LD_INT 2
9398: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
9399: LD_ADDR_OWVAR 40
9403: PUSH
9404: LD_INT 4
9406: ST_TO_ADDR
// av = CreateVehicle ;
9407: LD_ADDR_LOC 5
9411: PUSH
9412: CALL_OW 45
9416: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9417: LD_LOC 6
9421: PPUSH
9422: LD_LOC 5
9426: PPUSH
9427: CALL_OW 52
// pom = pom ^ av ;
9431: LD_ADDR_VAR 0 2
9435: PUSH
9436: LD_VAR 0 2
9440: PUSH
9441: LD_LOC 5
9445: ADD
9446: ST_TO_ADDR
// end ; AM_UTOK_2_LIST = pom ;
9447: LD_ADDR_EXP 33
9451: PUSH
9452: LD_VAR 0 2
9456: ST_TO_ADDR
// end ;
9457: LD_VAR 0 1
9461: RET
// export function create_third_utok ; var pom ; begin
9462: LD_INT 0
9464: PPUSH
9465: PPUSH
// pom = [ ] ;
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: EMPTY
9472: ST_TO_ADDR
// uc_nation = nation_american ;
9473: LD_ADDR_OWVAR 21
9477: PUSH
9478: LD_INT 1
9480: ST_TO_ADDR
// uc_side = Amici2 ;
9481: LD_ADDR_OWVAR 20
9485: PUSH
9486: LD_EXP 3
9490: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: CALL 7494 0 0
9500: PPUSH
9501: LD_INT 1
9503: PPUSH
9504: LD_EXP 41
9508: PUSH
9509: LD_OWVAR 67
9513: ARRAY
9514: PPUSH
9515: LD_STRING 
9517: PPUSH
9518: CALL 7529 0 4
9522: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_sniper , levely_amici [ difficulty ] ,  ) ;
9523: LD_ADDR_VAR 0 2
9527: PUSH
9528: LD_VAR 0 2
9532: PUSH
9533: CALL 7494 0 0
9537: PPUSH
9538: LD_INT 5
9540: PPUSH
9541: LD_EXP 41
9545: PUSH
9546: LD_OWVAR 67
9550: ARRAY
9551: PPUSH
9552: LD_STRING 
9554: PPUSH
9555: CALL 7529 0 4
9559: ADD
9560: ST_TO_ADDR
// if difficulty > 2 then
9561: LD_OWVAR 67
9565: PUSH
9566: LD_INT 2
9568: GREATER
9569: IFFALSE 9609
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9571: LD_ADDR_VAR 0 2
9575: PUSH
9576: LD_VAR 0 2
9580: PUSH
9581: CALL 7494 0 0
9585: PPUSH
9586: LD_INT 1
9588: PPUSH
9589: LD_EXP 41
9593: PUSH
9594: LD_OWVAR 67
9598: ARRAY
9599: PPUSH
9600: LD_STRING 
9602: PPUSH
9603: CALL 7529 0 4
9607: ADD
9608: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9609: LD_ADDR_LOC 6
9613: PUSH
9614: CALL 7494 0 0
9618: PPUSH
9619: LD_INT 3
9621: PPUSH
9622: LD_EXP 41
9626: PUSH
9627: LD_OWVAR 67
9631: ARRAY
9632: PUSH
9633: LD_INT 2
9635: MINUS
9636: PPUSH
9637: LD_STRING 
9639: PPUSH
9640: CALL 7529 0 4
9644: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9645: LD_ADDR_OWVAR 37
9649: PUSH
9650: LD_INT 3
9652: ST_TO_ADDR
// vc_control = control_manual ;
9653: LD_ADDR_OWVAR 38
9657: PUSH
9658: LD_INT 1
9660: ST_TO_ADDR
// vc_engine = engine_combustion ;
9661: LD_ADDR_OWVAR 39
9665: PUSH
9666: LD_INT 1
9668: ST_TO_ADDR
// vc_weapon = us_double_gun ;
9669: LD_ADDR_OWVAR 40
9673: PUSH
9674: LD_INT 5
9676: ST_TO_ADDR
// av = CreateVehicle ;
9677: LD_ADDR_LOC 5
9681: PUSH
9682: CALL_OW 45
9686: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9687: LD_LOC 6
9691: PPUSH
9692: LD_LOC 5
9696: PPUSH
9697: CALL_OW 52
// pom = pom ^ av ;
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: LD_VAR 0 2
9710: PUSH
9711: LD_LOC 5
9715: ADD
9716: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9717: LD_ADDR_LOC 6
9721: PUSH
9722: CALL 7494 0 0
9726: PPUSH
9727: LD_INT 3
9729: PPUSH
9730: LD_EXP 41
9734: PUSH
9735: LD_OWVAR 67
9739: ARRAY
9740: PUSH
9741: LD_INT 2
9743: MINUS
9744: PPUSH
9745: LD_STRING 
9747: PPUSH
9748: CALL 7529 0 4
9752: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
9753: LD_ADDR_OWVAR 37
9757: PUSH
9758: LD_INT 4
9760: ST_TO_ADDR
// vc_weapon = us_heavy_gun ;
9761: LD_ADDR_OWVAR 40
9765: PUSH
9766: LD_INT 6
9768: ST_TO_ADDR
// av = CreateVehicle ;
9769: LD_ADDR_LOC 5
9773: PUSH
9774: CALL_OW 45
9778: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9779: LD_LOC 6
9783: PPUSH
9784: LD_LOC 5
9788: PPUSH
9789: CALL_OW 52
// pom = pom ^ av ;
9793: LD_ADDR_VAR 0 2
9797: PUSH
9798: LD_VAR 0 2
9802: PUSH
9803: LD_LOC 5
9807: ADD
9808: ST_TO_ADDR
// AM_UTOK_3_LIST = pom ;
9809: LD_ADDR_EXP 34
9813: PUSH
9814: LD_VAR 0 2
9818: ST_TO_ADDR
// end ;
9819: LD_VAR 0 1
9823: RET
// export function create_JMM_revange ; var pom , i ; begin
9824: LD_INT 0
9826: PPUSH
9827: PPUSH
9828: PPUSH
// pom = [ ] ;
9829: LD_ADDR_VAR 0 2
9833: PUSH
9834: EMPTY
9835: ST_TO_ADDR
// uc_nation = nation_american ;
9836: LD_ADDR_OWVAR 21
9840: PUSH
9841: LD_INT 1
9843: ST_TO_ADDR
// uc_side = Amici2 ;
9844: LD_ADDR_OWVAR 20
9848: PUSH
9849: LD_EXP 3
9853: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: CALL 7494 0 0
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: LD_EXP 41
9871: PUSH
9872: LD_OWVAR 67
9876: ARRAY
9877: PPUSH
9878: LD_STRING 
9880: PPUSH
9881: CALL 7529 0 4
9885: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_sniper , levely_amici [ difficulty ] ,  ) ;
9886: LD_ADDR_VAR 0 2
9890: PUSH
9891: LD_VAR 0 2
9895: PUSH
9896: CALL 7494 0 0
9900: PPUSH
9901: LD_INT 5
9903: PPUSH
9904: LD_EXP 41
9908: PUSH
9909: LD_OWVAR 67
9913: ARRAY
9914: PPUSH
9915: LD_STRING 
9917: PPUSH
9918: CALL 7529 0 4
9922: ADD
9923: ST_TO_ADDR
// if difficulty > 2 then
9924: LD_OWVAR 67
9928: PUSH
9929: LD_INT 2
9931: GREATER
9932: IFFALSE 9972
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: LD_VAR 0 2
9943: PUSH
9944: CALL 7494 0 0
9948: PPUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_EXP 41
9956: PUSH
9957: LD_OWVAR 67
9961: ARRAY
9962: PPUSH
9963: LD_STRING 
9965: PPUSH
9966: CALL 7529 0 4
9970: ADD
9971: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9972: LD_ADDR_LOC 6
9976: PUSH
9977: CALL 7494 0 0
9981: PPUSH
9982: LD_INT 3
9984: PPUSH
9985: LD_EXP 41
9989: PUSH
9990: LD_OWVAR 67
9994: ARRAY
9995: PUSH
9996: LD_INT 2
9998: MINUS
9999: PPUSH
10000: LD_STRING 
10002: PPUSH
10003: CALL 7529 0 4
10007: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
10008: LD_ADDR_OWVAR 37
10012: PUSH
10013: LD_INT 4
10015: ST_TO_ADDR
// vc_weapon = us_heavy_gun ;
10016: LD_ADDR_OWVAR 40
10020: PUSH
10021: LD_INT 6
10023: ST_TO_ADDR
// av = CreateVehicle ;
10024: LD_ADDR_LOC 5
10028: PUSH
10029: CALL_OW 45
10033: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10034: LD_LOC 6
10038: PPUSH
10039: LD_LOC 5
10043: PPUSH
10044: CALL_OW 52
// pom = pom ^ av ;
10048: LD_ADDR_VAR 0 2
10052: PUSH
10053: LD_VAR 0 2
10057: PUSH
10058: LD_LOC 5
10062: ADD
10063: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 4 ,  ) ;
10064: LD_ADDR_LOC 6
10068: PUSH
10069: CALL 7494 0 0
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: LD_EXP 41
10081: PUSH
10082: LD_OWVAR 67
10086: ARRAY
10087: PUSH
10088: LD_INT 4
10090: MINUS
10091: PPUSH
10092: LD_STRING 
10094: PPUSH
10095: CALL 7529 0 4
10099: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
10100: LD_ADDR_OWVAR 37
10104: PUSH
10105: LD_INT 3
10107: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10108: LD_ADDR_OWVAR 40
10112: PUSH
10113: LD_INT 4
10115: ST_TO_ADDR
// av = CreateVehicle ;
10116: LD_ADDR_LOC 5
10120: PUSH
10121: CALL_OW 45
10125: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10126: LD_LOC 6
10130: PPUSH
10131: LD_LOC 5
10135: PPUSH
10136: CALL_OW 52
// pom = pom ^ av ;
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: LD_VAR 0 2
10149: PUSH
10150: LD_LOC 5
10154: ADD
10155: ST_TO_ADDR
// if prob ( 50 ) then
10156: LD_INT 50
10158: PPUSH
10159: CALL_OW 13
10163: IFFALSE 10191
// begin av = CreateVehicle ;
10165: LD_ADDR_LOC 5
10169: PUSH
10170: CALL_OW 45
10174: ST_TO_ADDR
// pom = pom ^ av ;
10175: LD_ADDR_VAR 0 2
10179: PUSH
10180: LD_VAR 0 2
10184: PUSH
10185: LD_LOC 5
10189: ADD
10190: ST_TO_ADDR
// end ; if difficulty > 1 then
10191: LD_OWVAR 67
10195: PUSH
10196: LD_INT 1
10198: GREATER
10199: IFFALSE 10239
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
10201: LD_ADDR_VAR 0 2
10205: PUSH
10206: LD_VAR 0 2
10210: PUSH
10211: CALL 7494 0 0
10215: PPUSH
10216: LD_INT 1
10218: PPUSH
10219: LD_EXP 41
10223: PUSH
10224: LD_OWVAR 67
10228: ARRAY
10229: PPUSH
10230: LD_STRING 
10232: PPUSH
10233: CALL 7529 0 4
10237: ADD
10238: ST_TO_ADDR
// if prob ( 50 ) and difficulty > 1 then
10239: LD_INT 50
10241: PPUSH
10242: CALL_OW 13
10246: PUSH
10247: LD_OWVAR 67
10251: PUSH
10252: LD_INT 1
10254: GREATER
10255: AND
10256: IFFALSE 10326
// for i = 1 to Rand ( 1 , difficulty ) do
10258: LD_ADDR_VAR 0 3
10262: PUSH
10263: DOUBLE
10264: LD_INT 1
10266: DEC
10267: ST_TO_ADDR
10268: LD_INT 1
10270: PPUSH
10271: LD_OWVAR 67
10275: PPUSH
10276: CALL_OW 12
10280: PUSH
10281: FOR_TO
10282: IFFALSE 10324
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
10284: LD_ADDR_VAR 0 2
10288: PUSH
10289: LD_VAR 0 2
10293: PUSH
10294: CALL 7494 0 0
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_EXP 41
10306: PUSH
10307: LD_OWVAR 67
10311: ARRAY
10312: PPUSH
10313: LD_STRING 
10315: PPUSH
10316: CALL 7529 0 4
10320: ADD
10321: ST_TO_ADDR
10322: GO 10281
10324: POP
10325: POP
// result := pom ;
10326: LD_ADDR_VAR 0 1
10330: PUSH
10331: LD_VAR 0 2
10335: ST_TO_ADDR
// end ;
10336: LD_VAR 0 1
10340: RET
// export function create_pre_attack ; var i , pom ; var PC ; begin
10341: LD_INT 0
10343: PPUSH
10344: PPUSH
10345: PPUSH
10346: PPUSH
// pom = [ ] ;
10347: LD_ADDR_VAR 0 3
10351: PUSH
10352: EMPTY
10353: ST_TO_ADDR
// uc_nation = nation_american ;
10354: LD_ADDR_OWVAR 21
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// uc_side = Amici2 ;
10362: LD_ADDR_OWVAR 20
10366: PUSH
10367: LD_EXP 3
10371: ST_TO_ADDR
// PC = counter_utoku ;
10372: LD_ADDR_VAR 0 4
10376: PUSH
10377: LD_EXP 72
10381: ST_TO_ADDR
// for i in Rand ( 1 , 3 ) + difficulty do
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_INT 1
10389: PPUSH
10390: LD_INT 3
10392: PPUSH
10393: CALL_OW 12
10397: PUSH
10398: LD_OWVAR 67
10402: PLUS
10403: PUSH
10404: FOR_IN
10405: IFFALSE 10465
// begin pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 2 ,  ) ;
10407: LD_ADDR_VAR 0 3
10411: PUSH
10412: LD_VAR 0 3
10416: PUSH
10417: CALL 7494 0 0
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: LD_EXP 41
10429: PUSH
10430: LD_OWVAR 67
10434: ARRAY
10435: PUSH
10436: LD_INT 2
10438: MINUS
10439: PPUSH
10440: LD_STRING 
10442: PPUSH
10443: CALL 7529 0 4
10447: ADD
10448: ST_TO_ADDR
// counter_utoku = counter_utoku + 1 ;
10449: LD_ADDR_EXP 72
10453: PUSH
10454: LD_EXP 72
10458: PUSH
10459: LD_INT 1
10461: PLUS
10462: ST_TO_ADDR
// end ;
10463: GO 10404
10465: POP
10466: POP
// PC = PC - 1 ;
10467: LD_ADDR_VAR 0 4
10471: PUSH
10472: LD_VAR 0 4
10476: PUSH
10477: LD_INT 1
10479: MINUS
10480: ST_TO_ADDR
// if counter_utoku > 10 then
10481: LD_EXP 72
10485: PUSH
10486: LD_INT 10
10488: GREATER
10489: IFFALSE 10594
// begin vc_chassis = us_medium_tracked ;
10491: LD_ADDR_OWVAR 37
10495: PUSH
10496: LD_INT 3
10498: ST_TO_ADDR
// vc_engine = engine_combustion ;
10499: LD_ADDR_OWVAR 39
10503: PUSH
10504: LD_INT 1
10506: ST_TO_ADDR
// vc_control = control_computer ;
10507: LD_ADDR_OWVAR 38
10511: PUSH
10512: LD_INT 3
10514: ST_TO_ADDR
// vc_weapon = [ us_light_gun , us_gatling_gun , us_double_gun , us_machine_gun ] [ Rand ( 1 , 4 ) ] ;
10515: LD_ADDR_OWVAR 40
10519: PUSH
10520: LD_INT 3
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_INT 4
10543: PPUSH
10544: CALL_OW 12
10548: ARRAY
10549: ST_TO_ADDR
// pom = pom ^ av ;
10550: LD_ADDR_VAR 0 3
10554: PUSH
10555: LD_VAR 0 3
10559: PUSH
10560: LD_LOC 5
10564: ADD
10565: ST_TO_ADDR
// counter_utoku = counter_utoku - 5 ;
10566: LD_ADDR_EXP 72
10570: PUSH
10571: LD_EXP 72
10575: PUSH
10576: LD_INT 5
10578: MINUS
10579: ST_TO_ADDR
// PC = PC - 10 ;
10580: LD_ADDR_VAR 0 4
10584: PUSH
10585: LD_VAR 0 4
10589: PUSH
10590: LD_INT 10
10592: MINUS
10593: ST_TO_ADDR
// end ; if counter_utoku > 5 then
10594: LD_EXP 72
10598: PUSH
10599: LD_INT 5
10601: GREATER
10602: IFFALSE 10674
// begin pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] + 1 ,  ) ;
10604: LD_ADDR_VAR 0 3
10608: PUSH
10609: LD_VAR 0 3
10613: PUSH
10614: CALL 7494 0 0
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: LD_EXP 41
10626: PUSH
10627: LD_OWVAR 67
10631: ARRAY
10632: PUSH
10633: LD_INT 1
10635: PLUS
10636: PPUSH
10637: LD_STRING 
10639: PPUSH
10640: CALL 7529 0 4
10644: ADD
10645: ST_TO_ADDR
// counter_utoku = counter_utoku - 1 ;
10646: LD_ADDR_EXP 72
10650: PUSH
10651: LD_EXP 72
10655: PUSH
10656: LD_INT 1
10658: MINUS
10659: ST_TO_ADDR
// PC = PC - 3 ;
10660: LD_ADDR_VAR 0 4
10664: PUSH
10665: LD_VAR 0 4
10669: PUSH
10670: LD_INT 3
10672: MINUS
10673: ST_TO_ADDR
// end ; result := pom ;
10674: LD_ADDR_VAR 0 1
10678: PUSH
10679: LD_VAR 0 3
10683: ST_TO_ADDR
// end ;
10684: LD_VAR 0 1
10688: RET
// function nastav_povolani_podle_skilu ( voj ) ; var comb , eng , sci , mech ; var classa ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
10696: PPUSH
// mech = GetSkill ( voj , skill_mechanical ) ;
10697: LD_ADDR_VAR 0 6
10701: PUSH
10702: LD_VAR 0 1
10706: PPUSH
10707: LD_INT 3
10709: PPUSH
10710: CALL_OW 259
10714: ST_TO_ADDR
// eng = GetSkill ( voj , skill_engineering ) ;
10715: LD_ADDR_VAR 0 4
10719: PUSH
10720: LD_VAR 0 1
10724: PPUSH
10725: LD_INT 2
10727: PPUSH
10728: CALL_OW 259
10732: ST_TO_ADDR
// sci = GetSkill ( voj , skill_scientistic ) ;
10733: LD_ADDR_VAR 0 5
10737: PUSH
10738: LD_VAR 0 1
10742: PPUSH
10743: LD_INT 4
10745: PPUSH
10746: CALL_OW 259
10750: ST_TO_ADDR
// comb = GetSkill ( voj , skill_combat ) ;
10751: LD_ADDR_VAR 0 3
10755: PUSH
10756: LD_VAR 0 1
10760: PPUSH
10761: LD_INT 1
10763: PPUSH
10764: CALL_OW 259
10768: ST_TO_ADDR
// if comb >= eng and comb >= sci and comb >= mech then
10769: LD_VAR 0 3
10773: PUSH
10774: LD_VAR 0 4
10778: GREATEREQUAL
10779: PUSH
10780: LD_VAR 0 3
10784: PUSH
10785: LD_VAR 0 5
10789: GREATEREQUAL
10790: AND
10791: PUSH
10792: LD_VAR 0 3
10796: PUSH
10797: LD_VAR 0 6
10801: GREATEREQUAL
10802: AND
10803: IFFALSE 10815
// classa = class_soldier else
10805: LD_ADDR_VAR 0 7
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
10813: GO 10961
// if eng >= comb and eng >= mech and eng >= sci then
10815: LD_VAR 0 4
10819: PUSH
10820: LD_VAR 0 3
10824: GREATEREQUAL
10825: PUSH
10826: LD_VAR 0 4
10830: PUSH
10831: LD_VAR 0 6
10835: GREATEREQUAL
10836: AND
10837: PUSH
10838: LD_VAR 0 4
10842: PUSH
10843: LD_VAR 0 5
10847: GREATEREQUAL
10848: AND
10849: IFFALSE 10861
// classa = class_engineer else
10851: LD_ADDR_VAR 0 7
10855: PUSH
10856: LD_INT 2
10858: ST_TO_ADDR
10859: GO 10961
// if sci >= eng and sci >= mech and sci >= comb then
10861: LD_VAR 0 5
10865: PUSH
10866: LD_VAR 0 4
10870: GREATEREQUAL
10871: PUSH
10872: LD_VAR 0 5
10876: PUSH
10877: LD_VAR 0 6
10881: GREATEREQUAL
10882: AND
10883: PUSH
10884: LD_VAR 0 5
10888: PUSH
10889: LD_VAR 0 3
10893: GREATEREQUAL
10894: AND
10895: IFFALSE 10907
// classa = class_scientistic else
10897: LD_ADDR_VAR 0 7
10901: PUSH
10902: LD_INT 4
10904: ST_TO_ADDR
10905: GO 10961
// if mech >= comb and mech >= eng and mech >= sci then
10907: LD_VAR 0 6
10911: PUSH
10912: LD_VAR 0 3
10916: GREATEREQUAL
10917: PUSH
10918: LD_VAR 0 6
10922: PUSH
10923: LD_VAR 0 4
10927: GREATEREQUAL
10928: AND
10929: PUSH
10930: LD_VAR 0 6
10934: PUSH
10935: LD_VAR 0 5
10939: GREATEREQUAL
10940: AND
10941: IFFALSE 10953
// classa = class_mechanic else
10943: LD_ADDR_VAR 0 7
10947: PUSH
10948: LD_INT 3
10950: ST_TO_ADDR
10951: GO 10961
// classa = class_soldier ;
10953: LD_ADDR_VAR 0 7
10957: PUSH
10958: LD_INT 1
10960: ST_TO_ADDR
// SetClass ( voj , classa ) ;
10961: LD_VAR 0 1
10965: PPUSH
10966: LD_VAR 0 7
10970: PPUSH
10971: CALL_OW 336
// end ; end_of_file
10975: LD_VAR 0 2
10979: RET
// export CHASSIS_FOR_VEHICLE ; export GUN_FOR_VEHICLE ; export pocet_lidi_na_zacatku ; export levely_arabi ; export levely_budovy_arabi ; export levely_budovy_amici ; export levely_amici ; export cas_utoku_amiku ; export max_pocet_aut ; export delay_beden ; export cas_prvniho_utoku ; export cas_na_odchod_vedcu ; export doba_od_utoku_k_uteku_vedcu ; export wait_mcmillanova_pomsta ; export zbran_na_uvod ; export chassis_na_uvod ; export cas_na_opakovani_preattacku ; export masha_l ; export maccepted ; export mhandedover ; export function SET_DIFFICULTY ; begin
10980: LD_INT 0
10982: PPUSH
// GUN_FOR_VEHICLE = [ ru_heavy_gun , ru_gun , ru_gatling_gun ] ;
10983: LD_ADDR_EXP 36
10987: PUSH
10988: LD_INT 46
10990: PUSH
10991: LD_INT 44
10993: PUSH
10994: LD_INT 43
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: ST_TO_ADDR
// CHASSIS_FOR_VEHICLE = [ ru_heavy_tracked , ru_medium_tracked , ru_heavy_wheeled ] ;
11002: LD_ADDR_EXP 35
11006: PUSH
11007: LD_INT 24
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: ST_TO_ADDR
// pocet_lidi_na_zacatku = [ 6 , 5 , 4 ] ;
11021: LD_ADDR_EXP 37
11025: PUSH
11026: LD_INT 6
11028: PUSH
11029: LD_INT 5
11031: PUSH
11032: LD_INT 4
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: ST_TO_ADDR
// levely_arabi = [ 6 , 7 , 8 ] ;
11040: LD_ADDR_EXP 38
11044: PUSH
11045: LD_INT 6
11047: PUSH
11048: LD_INT 7
11050: PUSH
11051: LD_INT 8
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: ST_TO_ADDR
// levely_budovy_arabi = [ 7 , 8 , 9 ] ;
11059: LD_ADDR_EXP 39
11063: PUSH
11064: LD_INT 7
11066: PUSH
11067: LD_INT 8
11069: PUSH
11070: LD_INT 9
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: ST_TO_ADDR
// levely_budovy_amici = [ 3 , 5 , 7 ] ;
11078: LD_ADDR_EXP 40
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: LD_INT 5
11088: PUSH
11089: LD_INT 7
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: LIST
11096: ST_TO_ADDR
// levely_amici = [ 7 , 8 , 9 ] ;
11097: LD_ADDR_EXP 41
11101: PUSH
11102: LD_INT 7
11104: PUSH
11105: LD_INT 8
11107: PUSH
11108: LD_INT 9
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: ST_TO_ADDR
// cas_utoku_amiku = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
11116: LD_ADDR_EXP 42
11120: PUSH
11121: LD_INT 10500
11123: PUSH
11124: LD_INT 8400
11126: PUSH
11127: LD_INT 6300
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: ST_TO_ADDR
// max_pocet_aut = [ 3 , 4 , 5 ] ;
11135: LD_ADDR_EXP 43
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: LD_INT 4
11145: PUSH
11146: LD_INT 5
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: ST_TO_ADDR
// delay_beden = [ 0 0$30 , 0 0$50 , 1 1$10 ] ;
11154: LD_ADDR_EXP 44
11158: PUSH
11159: LD_INT 1050
11161: PUSH
11162: LD_INT 1750
11164: PUSH
11165: LD_INT 2450
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: ST_TO_ADDR
// cas_prvniho_utoku = [ 7 7$0 , 6 6$0 , 5 5$0 ] ;
11173: LD_ADDR_EXP 45
11177: PUSH
11178: LD_INT 14700
11180: PUSH
11181: LD_INT 12600
11183: PUSH
11184: LD_INT 10500
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: ST_TO_ADDR
// cas_na_odchod_vedcu = [ 40 40$0 , 28 28$0 , 18 18$0 ] ;
11192: LD_ADDR_EXP 46
11196: PUSH
11197: LD_INT 84000
11199: PUSH
11200: LD_INT 58800
11202: PUSH
11203: LD_INT 37800
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: ST_TO_ADDR
// doba_od_utoku_k_uteku_vedcu = [ 8 8$0 , 6 6$0 , 4 4$0 ] ;
11211: LD_ADDR_EXP 47
11215: PUSH
11216: LD_INT 16800
11218: PUSH
11219: LD_INT 12600
11221: PUSH
11222: LD_INT 8400
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: ST_TO_ADDR
// wait_mcmillanova_pomsta = [ 12 12$0 , 9 9$0 , 6 6$0 ] ;
11230: LD_ADDR_EXP 48
11234: PUSH
11235: LD_INT 25200
11237: PUSH
11238: LD_INT 18900
11240: PUSH
11241: LD_INT 12600
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: ST_TO_ADDR
// zbran_na_uvod = [ ru_heavy_gun , ru_gun , ru_gatling_gun ] ;
11249: LD_ADDR_EXP 49
11253: PUSH
11254: LD_INT 46
11256: PUSH
11257: LD_INT 44
11259: PUSH
11260: LD_INT 43
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: ST_TO_ADDR
// chassis_na_uvod = [ ru_heavy_tracked , ru_medium_tracked , ru_medium_wheeled ] ;
11268: LD_ADDR_EXP 50
11272: PUSH
11273: LD_INT 24
11275: PUSH
11276: LD_INT 22
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: ST_TO_ADDR
// cas_na_opakovani_preattacku = [ 5 5$0 , 3 3$0 , 2 2$0 ] ;
11287: LD_ADDR_EXP 51
11291: PUSH
11292: LD_INT 10500
11294: PUSH
11295: LD_INT 6300
11297: PUSH
11298: LD_INT 4200
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// end ; end_of_file
11306: LD_VAR 0 1
11310: RET
// export diet ; export A2 ; export A3 ; export A4 ; var Arabi_enter ; var Arabi_opoce ; export Arabi_vztah ; every 0 0$0.1 do var i ;
11311: GO 11313
11313: DISABLE
11314: LD_INT 0
11316: PPUSH
// begin Arabi_enter = [ A1 , A2 , A3 , A4 , diet ] ;
11317: LD_ADDR_LOC 7
11321: PUSH
11322: LD_INT 134
11324: PUSH
11325: LD_EXP 56
11329: PUSH
11330: LD_EXP 57
11334: PUSH
11335: LD_EXP 58
11339: PUSH
11340: LD_EXP 55
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: ST_TO_ADDR
// Arabi_opoce = [ Op1 , Op2 , Op3 , OP_dep ] ;
11352: LD_ADDR_LOC 8
11356: PUSH
11357: LD_INT 139
11359: PUSH
11360: LD_INT 138
11362: PUSH
11363: LD_INT 135
11365: PUSH
11366: LD_INT 184
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: ST_TO_ADDR
// Arabi_vztah = 1 ;
11375: LD_ADDR_EXP 59
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// for i in [ 101 , 102 ] do
11383: LD_ADDR_VAR 0 1
11387: PUSH
11388: LD_INT 101
11390: PUSH
11391: LD_INT 102
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11408
// disable ( i ) ;
11401: LD_VAR 0 1
11405: DISABLE_MARKED
11406: GO 11398
11408: POP
11409: POP
// ComEnterUnit ( OP_dep , Ar_dep ) ;
11410: LD_INT 184
11412: PPUSH
11413: LD_INT 58
11415: PPUSH
11416: CALL_OW 120
// end ;
11420: PPOPN 1
11422: END
// export function arabi_north_okamzite ; var i ; begin
11423: LD_INT 0
11425: PPUSH
11426: PPUSH
// wait ( 0 0$5 ) ;
11427: LD_INT 175
11429: PPUSH
11430: CALL_OW 67
// for i in Arabi_enter do
11434: LD_ADDR_VAR 0 2
11438: PUSH
11439: LD_LOC 7
11443: PUSH
11444: FOR_IN
11445: IFFALSE 11469
// if IsInUnit ( i ) then
11447: LD_VAR 0 2
11451: PPUSH
11452: CALL_OW 310
11456: IFFALSE 11467
// ComExitBuilding ( i ) ;
11458: LD_VAR 0 2
11462: PPUSH
11463: CALL_OW 122
11467: GO 11444
11469: POP
11470: POP
// AddComMoveXY ( Arabi_enter , 59 , 1 ) ;
11471: LD_LOC 7
11475: PPUSH
11476: LD_INT 59
11478: PPUSH
11479: LD_INT 1
11481: PPUSH
11482: CALL_OW 171
// enable ( 101 ) ;
11486: LD_INT 101
11488: ENABLE_MARKED
// for i in Arabi_opoce do
11489: LD_ADDR_VAR 0 2
11493: PUSH
11494: LD_LOC 8
11498: PUSH
11499: FOR_IN
11500: IFFALSE 11524
// if IsInUnit ( i ) then
11502: LD_VAR 0 2
11506: PPUSH
11507: CALL_OW 310
11511: IFFALSE 11522
// ComExitBuilding ( i ) ;
11513: LD_VAR 0 2
11517: PPUSH
11518: CALL_OW 122
11522: GO 11499
11524: POP
11525: POP
// AddComMoveXY ( Arabi_opoce , 59 , 1 ) ;
11526: LD_LOC 8
11530: PPUSH
11531: LD_INT 59
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: CALL_OW 171
// wait ( 0 0$10 ) ;
11541: LD_INT 350
11543: PPUSH
11544: CALL_OW 67
// while Arabi_enter <> 0 do
11548: LD_LOC 7
11552: PUSH
11553: LD_INT 0
11555: NONEQUAL
11556: IFFALSE 11597
// begin ComMoveXY ( Arabi_enter , 62 , 2 ) ;
11558: LD_LOC 7
11562: PPUSH
11563: LD_INT 62
11565: PPUSH
11566: LD_INT 2
11568: PPUSH
11569: CALL_OW 111
// ComMoveXY ( Arabi_opoce , 62 , 2 ) ;
11573: LD_LOC 8
11577: PPUSH
11578: LD_INT 62
11580: PPUSH
11581: LD_INT 2
11583: PPUSH
11584: CALL_OW 111
// wait ( 0 0$2 ) ;
11588: LD_INT 70
11590: PPUSH
11591: CALL_OW 67
// end ;
11595: GO 11548
// disable ( 101 ) ;
11597: LD_INT 101
11599: DISABLE_MARKED
// end ;
11600: LD_VAR 0 1
11604: RET
// every 0 0$1 marked 101 do var pom , i ;
11605: GO 11607
11607: DISABLE
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
// begin pom = FilterUnitsInArea ( Exarabi , [ [ f_side , Arabi ] ] ) ;
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: LD_INT 7
11619: PPUSH
11620: LD_INT 22
11622: PUSH
11623: LD_EXP 4
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: PPUSH
11635: CALL_OW 70
11639: ST_TO_ADDR
// if pom <> 0 then
11640: LD_VAR 0 1
11644: PUSH
11645: LD_INT 0
11647: NONEQUAL
11648: IFFALSE 11692
// for i in pom do
11650: LD_ADDR_VAR 0 2
11654: PUSH
11655: LD_VAR 0 1
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11690
// begin RemoveUnit ( i ) ;
11663: LD_VAR 0 2
11667: PPUSH
11668: CALL_OW 64
// Arabi_enter = Arabi_enter diff i ;
11672: LD_ADDR_LOC 7
11676: PUSH
11677: LD_LOC 7
11681: PUSH
11682: LD_VAR 0 2
11686: DIFF
11687: ST_TO_ADDR
// end ;
11688: GO 11660
11690: POP
11691: POP
// enable ;
11692: ENABLE
// end ;
11693: PPOPN 2
11695: END
// export function ar_leave_north ; var i ; begin
11696: LD_INT 0
11698: PPUSH
11699: PPUSH
// SetAttitude ( Arabi , You , att_neutral , true ) ;
11700: LD_EXP 4
11704: PPUSH
11705: LD_EXP 1
11709: PPUSH
11710: LD_INT 0
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 80
// wait ( 0 0$30 ) ;
11720: LD_INT 1050
11722: PPUSH
11723: CALL_OW 67
// for i in Arabi_enter do
11727: LD_ADDR_VAR 0 2
11731: PUSH
11732: LD_LOC 7
11736: PUSH
11737: FOR_IN
11738: IFFALSE 11762
// if IsInUnit ( i ) then
11740: LD_VAR 0 2
11744: PPUSH
11745: CALL_OW 310
11749: IFFALSE 11760
// ComExitBuilding ( i ) ;
11751: LD_VAR 0 2
11755: PPUSH
11756: CALL_OW 122
11760: GO 11737
11762: POP
11763: POP
// AddComMoveXY ( Arabi_enter , 59 , 1 ) ;
11764: LD_LOC 7
11768: PPUSH
11769: LD_INT 59
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: CALL_OW 171
// for i in Arabi_opoce do
11779: LD_ADDR_VAR 0 2
11783: PUSH
11784: LD_LOC 8
11788: PUSH
11789: FOR_IN
11790: IFFALSE 11814
// if IsInUnit ( i ) then
11792: LD_VAR 0 2
11796: PPUSH
11797: CALL_OW 310
11801: IFFALSE 11812
// ComExitBuilding ( i ) ;
11803: LD_VAR 0 2
11807: PPUSH
11808: CALL_OW 122
11812: GO 11789
11814: POP
11815: POP
// AddComMoveXY ( Arabi_opoce , 59 , 1 ) ;
11816: LD_LOC 8
11820: PPUSH
11821: LD_INT 59
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 171
// enable ( 101 ) ;
11831: LD_INT 101
11833: ENABLE_MARKED
// wait ( 0 0$10 ) ;
11834: LD_INT 350
11836: PPUSH
11837: CALL_OW 67
// while Arabi_enter <> 0 do
11841: LD_LOC 7
11845: PUSH
11846: LD_INT 0
11848: NONEQUAL
11849: IFFALSE 11890
// begin ComMoveXY ( Arabi_enter , 62 , 2 ) ;
11851: LD_LOC 7
11855: PPUSH
11856: LD_INT 62
11858: PPUSH
11859: LD_INT 2
11861: PPUSH
11862: CALL_OW 111
// ComMoveXY ( Arabi_opoce , 62 , 2 ) ;
11866: LD_LOC 8
11870: PPUSH
11871: LD_INT 62
11873: PPUSH
11874: LD_INT 2
11876: PPUSH
11877: CALL_OW 111
// wait ( 0 0$2 ) ;
11881: LD_INT 70
11883: PPUSH
11884: CALL_OW 67
// end ;
11888: GO 11841
// disable ( 101 ) ;
11890: LD_INT 101
11892: DISABLE_MARKED
// end ;
11893: LD_VAR 0 1
11897: RET
// export function arabi_spojenci ; begin
11898: LD_INT 0
11900: PPUSH
// SetAttitude ( Arabi , You , att_neutral , true ) ;
11901: LD_EXP 4
11905: PPUSH
11906: LD_EXP 1
11910: PPUSH
11911: LD_INT 0
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 80
// ChangeSideFog ( Arabi , You ) ;
11921: LD_EXP 4
11925: PPUSH
11926: LD_EXP 1
11930: PPUSH
11931: CALL_OW 343
// end ;
11935: LD_VAR 0 1
11939: RET
// export function arabi_ally_amici ; begin
11940: LD_INT 0
11942: PPUSH
// SetAttitude ( Arabi , You , att_enemy , false ) ;
11943: LD_EXP 4
11947: PPUSH
11948: LD_EXP 1
11952: PPUSH
11953: LD_INT 2
11955: PPUSH
11956: LD_INT 0
11958: PPUSH
11959: CALL_OW 80
// end ;
11963: LD_VAR 0 1
11967: RET
// every 0 0$1 do
11968: GO 11970
11970: DISABLE
// begin ComEnterUnit ( Arabi_enter [ 1 ] , Ar_lab ) ;
11971: LD_LOC 7
11975: PUSH
11976: LD_INT 1
11978: ARRAY
11979: PPUSH
11980: LD_INT 59
11982: PPUSH
11983: CALL_OW 120
// ComPlaceRemoteCharge ( diet , 78 , 47 , 0 ) ;
11987: LD_EXP 55
11991: PPUSH
11992: LD_INT 78
11994: PPUSH
11995: LD_INT 47
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: CALL_OW 133
// AddComEnterUnit ( diet , Ar_bar ) ;
12005: LD_EXP 55
12009: PPUSH
12010: LD_INT 61
12012: PPUSH
12013: CALL_OW 180
// ComPlaceRemoteCharge ( Arabi_enter [ 2 ] , 78 , 43 , 0 ) ;
12017: LD_LOC 7
12021: PUSH
12022: LD_INT 2
12024: ARRAY
12025: PPUSH
12026: LD_INT 78
12028: PPUSH
12029: LD_INT 43
12031: PPUSH
12032: LD_INT 0
12034: PPUSH
12035: CALL_OW 133
// AddComEnterUnit ( Arabi_enter [ 2 ] , Ar_bu1 ) ;
12039: LD_LOC 7
12043: PUSH
12044: LD_INT 2
12046: ARRAY
12047: PPUSH
12048: LD_INT 73
12050: PPUSH
12051: CALL_OW 180
// ComHiddenCamera ( Arabi_enter [ 3 ] , 64 , 38 ) ;
12055: LD_LOC 7
12059: PUSH
12060: LD_INT 3
12062: ARRAY
12063: PPUSH
12064: LD_INT 64
12066: PPUSH
12067: LD_INT 38
12069: PPUSH
12070: CALL_OW 157
// AddComHiddenCamera ( Arabi_enter [ 3 ] , 85 , 52 ) ;
12074: LD_LOC 7
12078: PUSH
12079: LD_INT 3
12081: ARRAY
12082: PPUSH
12083: LD_INT 85
12085: PPUSH
12086: LD_INT 52
12088: PPUSH
12089: CALL_OW 217
// AddComHiddenCamera ( Arabi_enter [ 3 ] , 101 , 51 ) ;
12093: LD_LOC 7
12097: PUSH
12098: LD_INT 3
12100: ARRAY
12101: PPUSH
12102: LD_INT 101
12104: PPUSH
12105: LD_INT 51
12107: PPUSH
12108: CALL_OW 217
// AddComEnterUnit ( Arabi_enter [ 3 ] , Ar_dep ) ;
12112: LD_LOC 7
12116: PUSH
12117: LD_INT 3
12119: ARRAY
12120: PPUSH
12121: LD_INT 58
12123: PPUSH
12124: CALL_OW 180
// ComPlaceRemoteCharge ( Arabi_enter [ 4 ] , 82 , 46 , 0 ) ;
12128: LD_LOC 7
12132: PUSH
12133: LD_INT 4
12135: ARRAY
12136: PPUSH
12137: LD_INT 82
12139: PPUSH
12140: LD_INT 46
12142: PPUSH
12143: LD_INT 0
12145: PPUSH
12146: CALL_OW 133
// AddComEnterUnit ( Arabi_enter [ 4 ] , Ar_bu2 ) ;
12150: LD_LOC 7
12154: PUSH
12155: LD_INT 4
12157: ARRAY
12158: PPUSH
12159: LD_INT 78
12161: PPUSH
12162: CALL_OW 180
// ComEnterUnit ( Op1 , Ar_dep ) ;
12166: LD_INT 139
12168: PPUSH
12169: LD_INT 58
12171: PPUSH
12172: CALL_OW 120
// ComEnterUnit ( Op2 , Ar_bar ) ;
12176: LD_INT 138
12178: PPUSH
12179: LD_INT 61
12181: PPUSH
12182: CALL_OW 120
// ComMoveXY ( Op3 , 49 , 3 ) ;
12186: LD_INT 135
12188: PPUSH
12189: LD_INT 49
12191: PPUSH
12192: LD_INT 3
12194: PPUSH
12195: CALL_OW 111
// AddComMoveXY ( Op3 , 45 , 5 ) ;
12199: LD_INT 135
12201: PPUSH
12202: LD_INT 45
12204: PPUSH
12205: LD_INT 5
12207: PPUSH
12208: CALL_OW 171
// AddComMoveXY ( Op3 , 45 , 15 ) ;
12212: LD_INT 135
12214: PPUSH
12215: LD_INT 45
12217: PPUSH
12218: LD_INT 15
12220: PPUSH
12221: CALL_OW 171
// AddComMoveXY ( Op3 , 62 , 29 ) ;
12225: LD_INT 135
12227: PPUSH
12228: LD_INT 62
12230: PPUSH
12231: LD_INT 29
12233: PPUSH
12234: CALL_OW 171
// HiddenCamera ( 40 , 7 , Arabi ) ;
12238: LD_INT 40
12240: PPUSH
12241: LD_INT 7
12243: PPUSH
12244: LD_EXP 4
12248: PPUSH
12249: CALL_OW 244
// end ;
12253: END
// every 1 1$7 do
12254: GO 12256
12256: DISABLE
// begin if Researched ( Arabi , tech_Sib1 ) then
12257: LD_EXP 4
12261: PPUSH
12262: LD_INT 54
12264: PPUSH
12265: CALL_OW 325
12269: IFFALSE 12296
// begin SetTech ( tech_Sib1 , Arabi , state_enabled ) ;
12271: LD_INT 54
12273: PPUSH
12274: LD_EXP 4
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 322
// ComResearch ( Ar_lab , tech_Sib1 ) ;
12286: LD_INT 59
12288: PPUSH
12289: LD_INT 54
12291: PPUSH
12292: CALL_OW 124
// end ; enable ;
12296: ENABLE
// end ;
12297: END
// every 0 0$19 do
12298: GO 12300
12300: DISABLE
// begin SetTech ( tech_Sib1 , Arabi , state_enabled ) ;
12301: LD_INT 54
12303: PPUSH
12304: LD_EXP 4
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: CALL_OW 322
// ComResearch ( Ar_lab , tech_Sib1 ) ;
12316: LD_INT 59
12318: PPUSH
12319: LD_INT 54
12321: PPUSH
12322: CALL_OW 124
// end ;
12326: END
// every 0 0$1 trigger Arabi_vztah = 0 and bojeschopnych_rusu > 0 do var pom ;
12327: LD_EXP 59
12331: PUSH
12332: LD_INT 0
12334: EQUAL
12335: PUSH
12336: CALL 13663 0 0
12340: PUSH
12341: LD_INT 0
12343: GREATER
12344: AND
12345: IFFALSE 13070
12347: GO 12349
12349: DISABLE
12350: LD_INT 0
12352: PPUSH
// begin if GetClass ( A1 ) = class_scientistic then
12353: LD_INT 134
12355: PPUSH
12356: CALL_OW 257
12360: PUSH
12361: LD_INT 4
12363: EQUAL
12364: IFFALSE 12393
// begin ComExitBuilding ( A1 ) ;
12366: LD_INT 134
12368: PPUSH
12369: CALL_OW 122
// AddComEnterUnit ( A1 , Ar_bar ) ;
12373: LD_INT 134
12375: PPUSH
12376: LD_INT 61
12378: PPUSH
12379: CALL_OW 180
// AddComChangeProfession ( A1 , class_mortar ) ;
12383: LD_INT 134
12385: PPUSH
12386: LD_INT 8
12388: PPUSH
12389: CALL_OW 183
// end ; if GetClass ( A3 ) = class_engineer then
12393: LD_EXP 57
12397: PPUSH
12398: CALL_OW 257
12402: PUSH
12403: LD_INT 2
12405: EQUAL
12406: IFFALSE 12441
// begin ComExitBuilding ( A3 ) ;
12408: LD_EXP 57
12412: PPUSH
12413: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_bar ) ;
12417: LD_EXP 57
12421: PPUSH
12422: LD_INT 61
12424: PPUSH
12425: CALL_OW 180
// AddComChangeProfession ( A3 , class_soldier ) ;
12429: LD_EXP 57
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 183
// end ; if not IsInUnit ( diet ) = Ar_bar then
12441: LD_EXP 55
12445: PPUSH
12446: CALL_OW 310
12450: PUSH
12451: LD_INT 61
12453: EQUAL
12454: NOT
12455: IFFALSE 12483
// begin ComEnterUnit ( diet , Ar_bar ) ;
12457: LD_EXP 55
12461: PPUSH
12462: LD_INT 61
12464: PPUSH
12465: CALL_OW 120
// AddComChangeProfession ( diet , class_mortar ) ;
12469: LD_EXP 55
12473: PPUSH
12474: LD_INT 8
12476: PPUSH
12477: CALL_OW 183
// end else
12481: GO 12510
// if GetClass ( diet ) = class_soldier then
12483: LD_EXP 55
12487: PPUSH
12488: CALL_OW 257
12492: PUSH
12493: LD_INT 1
12495: EQUAL
12496: IFFALSE 12510
// ComChangeProfession ( diet , class_mortar ) ;
12498: LD_EXP 55
12502: PPUSH
12503: LD_INT 8
12505: PPUSH
12506: CALL_OW 123
// if IsInUnit ( A2 ) = 0 or IsInUnit ( A2 ) = Ar_bar then
12510: LD_EXP 56
12514: PPUSH
12515: CALL_OW 310
12519: PUSH
12520: LD_INT 0
12522: EQUAL
12523: PUSH
12524: LD_EXP 56
12528: PPUSH
12529: CALL_OW 310
12533: PUSH
12534: LD_INT 61
12536: EQUAL
12537: OR
12538: IFFALSE 12786
// begin if IsOK ( Ar_bu1 ) then
12540: LD_INT 73
12542: PPUSH
12543: CALL_OW 302
12547: IFFALSE 12572
// begin ComExitBuilding ( A2 ) ;
12549: LD_EXP 56
12553: PPUSH
12554: CALL_OW 122
// AddComEnterUnit ( A2 , Ar_bu1 ) ;
12558: LD_EXP 56
12562: PPUSH
12563: LD_INT 73
12565: PPUSH
12566: CALL_OW 180
// end else
12570: GO 12786
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_btype , b_breastwork ] ] ) ;
12572: LD_ADDR_VAR 0 1
12576: PUSH
12577: LD_INT 8
12579: PPUSH
12580: LD_INT 22
12582: PUSH
12583: LD_EXP 4
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 30
12594: PUSH
12595: LD_INT 31
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PPUSH
12606: CALL_OW 70
12610: ST_TO_ADDR
// case pom of 1 :
12611: LD_VAR 0 1
12615: PUSH
12616: LD_INT 1
12618: DOUBLE
12619: EQUAL
12620: IFTRUE 12624
12622: GO 12699
12624: POP
// if GetX ( pom [ 1 ] ) = 78 then
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 1
12632: ARRAY
12633: PPUSH
12634: CALL_OW 250
12638: PUSH
12639: LD_INT 78
12641: EQUAL
12642: IFFALSE 12673
// begin ComExitBuilding ( A2 ) ;
12644: LD_EXP 56
12648: PPUSH
12649: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 1 ] ) ;
12653: LD_EXP 56
12657: PPUSH
12658: LD_VAR 0 1
12662: PUSH
12663: LD_INT 1
12665: ARRAY
12666: PPUSH
12667: CALL_OW 180
// end else
12671: GO 12697
// begin ComEnterUnit ( A2 , Ar_bar ) ;
12673: LD_EXP 56
12677: PPUSH
12678: LD_INT 61
12680: PPUSH
12681: CALL_OW 120
// AddComChangeProfession ( A2 , class_mortar ) ;
12685: LD_EXP 56
12689: PPUSH
12690: LD_INT 8
12692: PPUSH
12693: CALL_OW 183
// end ; 2 :
12697: GO 12786
12699: LD_INT 2
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12785
12707: POP
// if GetX ( pom [ 1 ] ) = 78 then
12708: LD_VAR 0 1
12712: PUSH
12713: LD_INT 1
12715: ARRAY
12716: PPUSH
12717: CALL_OW 250
12721: PUSH
12722: LD_INT 78
12724: EQUAL
12725: IFFALSE 12756
// begin ComExitBuilding ( A2 ) ;
12727: LD_EXP 56
12731: PPUSH
12732: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 1 ] ) ;
12736: LD_EXP 56
12740: PPUSH
12741: LD_VAR 0 1
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: CALL_OW 180
// end else
12754: GO 12783
// begin ComExitBuilding ( A2 ) ;
12756: LD_EXP 56
12760: PPUSH
12761: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 2 ] ) ;
12765: LD_EXP 56
12769: PPUSH
12770: LD_VAR 0 1
12774: PUSH
12775: LD_INT 2
12777: ARRAY
12778: PPUSH
12779: CALL_OW 180
// end ; end ;
12783: GO 12786
12785: POP
// end ; end ; if IsInUnit ( A4 ) = 0 or IsInUnit ( A4 ) = Ar_bar then
12786: LD_EXP 58
12790: PPUSH
12791: CALL_OW 310
12795: PUSH
12796: LD_INT 0
12798: EQUAL
12799: PUSH
12800: LD_EXP 58
12804: PPUSH
12805: CALL_OW 310
12809: PUSH
12810: LD_INT 61
12812: EQUAL
12813: OR
12814: IFFALSE 13062
// begin if IsOK ( Ar_bu2 ) then
12816: LD_INT 78
12818: PPUSH
12819: CALL_OW 302
12823: IFFALSE 12848
// begin ComExitBuilding ( A4 ) ;
12825: LD_EXP 58
12829: PPUSH
12830: CALL_OW 122
// AddComEnterUnit ( A4 , Ar_bu2 ) ;
12834: LD_EXP 58
12838: PPUSH
12839: LD_INT 78
12841: PPUSH
12842: CALL_OW 180
// end else
12846: GO 13062
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_btype , b_breastwork ] ] ) ;
12848: LD_ADDR_VAR 0 1
12852: PUSH
12853: LD_INT 8
12855: PPUSH
12856: LD_INT 22
12858: PUSH
12859: LD_EXP 4
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 30
12870: PUSH
12871: LD_INT 31
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PPUSH
12882: CALL_OW 70
12886: ST_TO_ADDR
// case pom of 1 :
12887: LD_VAR 0 1
12891: PUSH
12892: LD_INT 1
12894: DOUBLE
12895: EQUAL
12896: IFTRUE 12900
12898: GO 12975
12900: POP
// if GetX ( pom [ 1 ] ) = 78 then
12901: LD_VAR 0 1
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: PPUSH
12910: CALL_OW 250
12914: PUSH
12915: LD_INT 78
12917: EQUAL
12918: IFFALSE 12949
// begin ComExitBuilding ( A4 ) ;
12920: LD_EXP 58
12924: PPUSH
12925: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 1 ] ) ;
12929: LD_EXP 58
12933: PPUSH
12934: LD_VAR 0 1
12938: PUSH
12939: LD_INT 1
12941: ARRAY
12942: PPUSH
12943: CALL_OW 180
// end else
12947: GO 12973
// begin ComEnterUnit ( A2 , Ar_bar ) ;
12949: LD_EXP 56
12953: PPUSH
12954: LD_INT 61
12956: PPUSH
12957: CALL_OW 120
// AddComChangeProfession ( A2 , class_mortar ) ;
12961: LD_EXP 56
12965: PPUSH
12966: LD_INT 8
12968: PPUSH
12969: CALL_OW 183
// end ; 2 :
12973: GO 13062
12975: LD_INT 2
12977: DOUBLE
12978: EQUAL
12979: IFTRUE 12983
12981: GO 13061
12983: POP
// if GetX ( pom [ 1 ] ) = 78 then
12984: LD_VAR 0 1
12988: PUSH
12989: LD_INT 1
12991: ARRAY
12992: PPUSH
12993: CALL_OW 250
12997: PUSH
12998: LD_INT 78
13000: EQUAL
13001: IFFALSE 13032
// begin ComExitBuilding ( A4 ) ;
13003: LD_EXP 58
13007: PPUSH
13008: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 1 ] ) ;
13012: LD_EXP 58
13016: PPUSH
13017: LD_VAR 0 1
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: CALL_OW 180
// end else
13030: GO 13059
// begin ComExitBuilding ( A4 ) ;
13032: LD_EXP 58
13036: PPUSH
13037: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 2 ] ) ;
13041: LD_EXP 58
13045: PPUSH
13046: LD_VAR 0 1
13050: PUSH
13051: LD_INT 2
13053: ARRAY
13054: PPUSH
13055: CALL_OW 180
// end ; end ;
13059: GO 13062
13061: POP
// end ; end ; wait ( 0 0$10 ) ;
13062: LD_INT 350
13064: PPUSH
13065: CALL_OW 67
// enable ;
13069: ENABLE
// end ;
13070: PPOPN 1
13072: END
// every 0 0$10 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom , i , pom1 ;
13073: LD_EXP 59
13077: PUSH
13078: LD_INT 0
13080: EQUAL
13081: PUSH
13082: CALL 13663 0 0
13086: PUSH
13087: LD_INT 0
13089: EQUAL
13090: AND
13091: IFFALSE 13427
13093: GO 13095
13095: DISABLE
13096: LD_INT 0
13098: PPUSH
13099: PPUSH
13100: PPUSH
// begin pom1 = [ ] ;
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: EMPTY
13107: ST_TO_ADDR
// pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_INT 8
13115: PPUSH
13116: LD_INT 22
13118: PUSH
13119: LD_EXP 4
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 21
13130: PUSH
13131: LD_INT 3
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 70
13146: ST_TO_ADDR
// for i in pom do
13147: LD_ADDR_VAR 0 2
13151: PUSH
13152: LD_VAR 0 1
13156: PUSH
13157: FOR_IN
13158: IFFALSE 13193
// if GetLives ( i ) < 1000 then
13160: LD_VAR 0 2
13164: PPUSH
13165: CALL_OW 256
13169: PUSH
13170: LD_INT 1000
13172: LESS
13173: IFFALSE 13191
// pom1 = pom1 ^ i ;
13175: LD_ADDR_VAR 0 3
13179: PUSH
13180: LD_VAR 0 3
13184: PUSH
13185: LD_VAR 0 2
13189: ADD
13190: ST_TO_ADDR
13191: GO 13157
13193: POP
13194: POP
// if pom1 > 0 then
13195: LD_VAR 0 3
13199: PUSH
13200: LD_INT 0
13202: GREATER
13203: IFFALSE 13307
// begin if IsInUnit ( A3 ) = Ar_bar then
13205: LD_EXP 57
13209: PPUSH
13210: CALL_OW 310
13214: PUSH
13215: LD_INT 61
13217: EQUAL
13218: IFFALSE 13305
// begin ComExitBuilding ( A3 ) ;
13220: LD_EXP 57
13224: PPUSH
13225: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_dep ) ;
13229: LD_EXP 57
13233: PPUSH
13234: LD_INT 58
13236: PPUSH
13237: CALL_OW 180
// AddComChangeProfession ( A3 , class_engineer ) ;
13241: LD_EXP 57
13245: PPUSH
13246: LD_INT 2
13248: PPUSH
13249: CALL_OW 183
// AddComExitBuilding ( A3 ) ;
13253: LD_EXP 57
13257: PPUSH
13258: CALL_OW 182
// for i in pom1 do
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: LD_VAR 0 3
13271: PUSH
13272: FOR_IN
13273: IFFALSE 13291
// AddComRepairBuilding ( A3 , i ) ;
13275: LD_EXP 57
13279: PPUSH
13280: LD_VAR 0 2
13284: PPUSH
13285: CALL_OW 190
13289: GO 13272
13291: POP
13292: POP
// AddComEnterUnit ( A3 , Ar_dep ) ;
13293: LD_EXP 57
13297: PPUSH
13298: LD_INT 58
13300: PPUSH
13301: CALL_OW 180
// end ; end else
13305: GO 13340
// begin ComExitBuilding ( A3 ) ;
13307: LD_EXP 57
13311: PPUSH
13312: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_dep ) ;
13316: LD_EXP 57
13320: PPUSH
13321: LD_INT 58
13323: PPUSH
13324: CALL_OW 180
// AddComChangeProfession ( A3 , class_engineer ) ;
13328: LD_EXP 57
13332: PPUSH
13333: LD_INT 2
13335: PPUSH
13336: CALL_OW 183
// end ; if pom < 7 then
13340: LD_VAR 0 1
13344: PUSH
13345: LD_INT 7
13347: LESS
13348: IFFALSE 13359
// staveni_budov_arabi ( pom ) ;
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL 13430 0 1
// if GetClass ( diet ) <> class_soldier then
13359: LD_EXP 55
13363: PPUSH
13364: CALL_OW 257
13368: PUSH
13369: LD_INT 1
13371: NONEQUAL
13372: IFFALSE 13386
// ComChangeProfession ( diet , class_soldier ) ;
13374: LD_EXP 55
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 123
// if IsInUnit ( A1 ) <> Ar_lab then
13386: LD_INT 134
13388: PPUSH
13389: CALL_OW 310
13393: PUSH
13394: LD_INT 59
13396: NONEQUAL
13397: IFFALSE 13426
// begin ComExitBuilding ( A1 ) ;
13399: LD_INT 134
13401: PPUSH
13402: CALL_OW 122
// AddComEnterUnit ( A1 , Ar_lab ) ;
13406: LD_INT 134
13408: PPUSH
13409: LD_INT 59
13411: PPUSH
13412: CALL_OW 180
// AddComChangeProfession ( A1 , class_scientistic ) ;
13416: LD_INT 134
13418: PPUSH
13419: LD_INT 4
13421: PPUSH
13422: CALL_OW 183
// end ; enable ;
13426: ENABLE
// end ;
13427: PPOPN 3
13429: END
// function staveni_budov_arabi ( list_budov ) ; var pom ; begin
13430: LD_INT 0
13432: PPUSH
13433: PPUSH
// pom = FilterUnitsInArea ( Ar_base , [ [ f_side , You ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_INT 8
13441: PPUSH
13442: LD_INT 22
13444: PUSH
13445: LD_EXP 1
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 2
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: LD_INT 32
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 30
13469: PUSH
13470: LD_INT 31
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PPUSH
13486: CALL_OW 70
13490: ST_TO_ADDR
// if pom <> 2 then
13491: LD_VAR 0 3
13495: PUSH
13496: LD_INT 2
13498: NONEQUAL
13499: IFFALSE 13658
// begin if IsInUnit ( A3 ) = Ar_dep then
13501: LD_EXP 57
13505: PPUSH
13506: CALL_OW 310
13510: PUSH
13511: LD_INT 58
13513: EQUAL
13514: IFFALSE 13525
// ComExitBuilding ( A3 ) ;
13516: LD_EXP 57
13520: PPUSH
13521: CALL_OW 122
// case pom of 0 :
13525: LD_VAR 0 3
13529: PUSH
13530: LD_INT 0
13532: DOUBLE
13533: EQUAL
13534: IFTRUE 13538
13536: GO 13583
13538: POP
// begin AddComBuild ( A3 , b_breastwork , 78 , 32 , 3 ) ;
13539: LD_EXP 57
13543: PPUSH
13544: LD_INT 31
13546: PPUSH
13547: LD_INT 78
13549: PPUSH
13550: LD_INT 32
13552: PPUSH
13553: LD_INT 3
13555: PPUSH
13556: CALL_OW 205
// AddComBuild ( A3 , b_breastwork , 73 , 30 , 3 ) ;
13560: LD_EXP 57
13564: PPUSH
13565: LD_INT 31
13567: PPUSH
13568: LD_INT 73
13570: PPUSH
13571: LD_INT 30
13573: PPUSH
13574: LD_INT 3
13576: PPUSH
13577: CALL_OW 205
// end ; 1 :
13581: GO 13658
13583: LD_INT 1
13585: DOUBLE
13586: EQUAL
13587: IFTRUE 13591
13589: GO 13657
13591: POP
// if GetX ( pom [ 1 ] ) = 78 then
13592: LD_VAR 0 3
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: CALL_OW 250
13605: PUSH
13606: LD_INT 78
13608: EQUAL
13609: IFFALSE 13634
// AddComBuild ( A3 , b_breastwork , 73 , 30 , 3 ) else
13611: LD_EXP 57
13615: PPUSH
13616: LD_INT 31
13618: PPUSH
13619: LD_INT 73
13621: PPUSH
13622: LD_INT 30
13624: PPUSH
13625: LD_INT 3
13627: PPUSH
13628: CALL_OW 205
13632: GO 13655
// AddComBuild ( A3 , b_breastwork , 78 , 32 , 3 ) ; end ;
13634: LD_EXP 57
13638: PPUSH
13639: LD_INT 31
13641: PPUSH
13642: LD_INT 78
13644: PPUSH
13645: LD_INT 32
13647: PPUSH
13648: LD_INT 3
13650: PPUSH
13651: CALL_OW 205
13655: GO 13658
13657: POP
// end ; end ;
13658: LD_VAR 0 2
13662: RET
// function bojeschopnych_rusu ; var pom , i , pom1 ; begin
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
13668: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_see , Arabi ] ] ) ;
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: LD_INT 22
13676: PUSH
13677: LD_EXP 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 101
13688: PUSH
13689: LD_EXP 4
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: ST_TO_ADDR
// pom1 = pom ;
13707: LD_ADDR_VAR 0 4
13711: PUSH
13712: LD_VAR 0 2
13716: ST_TO_ADDR
// for i in pom do
13717: LD_ADDR_VAR 0 3
13721: PUSH
13722: LD_VAR 0 2
13726: PUSH
13727: FOR_IN
13728: IFFALSE 13778
// if GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) = 0 then
13730: LD_VAR 0 3
13734: PPUSH
13735: CALL_OW 247
13739: PUSH
13740: LD_INT 2
13742: EQUAL
13743: PUSH
13744: LD_VAR 0 3
13748: PPUSH
13749: CALL_OW 311
13753: PUSH
13754: LD_INT 0
13756: EQUAL
13757: AND
13758: IFFALSE 13776
// pom1 = pom1 diff i ;
13760: LD_ADDR_VAR 0 4
13764: PUSH
13765: LD_VAR 0 4
13769: PUSH
13770: LD_VAR 0 3
13774: DIFF
13775: ST_TO_ADDR
13776: GO 13727
13778: POP
13779: POP
// debug_strings = [ pom1 ] ;
13780: LD_ADDR_OWVAR 48
13784: PUSH
13785: LD_VAR 0 4
13789: PUSH
13790: EMPTY
13791: LIST
13792: ST_TO_ADDR
// result := pom1 + 0 ;
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: LD_VAR 0 4
13802: PUSH
13803: LD_INT 0
13805: PLUS
13806: ST_TO_ADDR
// end ;
13807: LD_VAR 0 1
13811: RET
// every 0 0$0.5 trigger Arabi_vztah = 0 do var pom ;
13812: LD_EXP 59
13816: PUSH
13817: LD_INT 0
13819: EQUAL
13820: IFFALSE 13969
13822: GO 13824
13824: DISABLE
13825: LD_INT 0
13827: PPUSH
// begin pom = FilterUnitsInArea ( Armina1 , [ [ f_side , You ] ] ) ;
13828: LD_ADDR_VAR 0 1
13832: PUSH
13833: LD_INT 9
13835: PPUSH
13836: LD_INT 22
13838: PUSH
13839: LD_EXP 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: EMPTY
13849: LIST
13850: PPUSH
13851: CALL_OW 70
13855: ST_TO_ADDR
// if pom > 0 then
13856: LD_VAR 0 1
13860: PUSH
13861: LD_INT 0
13863: GREATER
13864: IFFALSE 13875
// ComFireExplosives ( diet ) ;
13866: LD_EXP 55
13870: PPUSH
13871: CALL_OW 134
// pom = FilterUnitsInArea ( Armina2 , [ [ f_side , You ] ] ) ;
13875: LD_ADDR_VAR 0 1
13879: PUSH
13880: LD_INT 10
13882: PPUSH
13883: LD_INT 22
13885: PUSH
13886: LD_EXP 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: EMPTY
13896: LIST
13897: PPUSH
13898: CALL_OW 70
13902: ST_TO_ADDR
// if pom > 0 then
13903: LD_VAR 0 1
13907: PUSH
13908: LD_INT 0
13910: GREATER
13911: IFFALSE 13922
// ComFireExplosives ( A2 ) ;
13913: LD_EXP 56
13917: PPUSH
13918: CALL_OW 134
// pom = FilterUnitsInArea ( Armina3 , [ [ f_side , You ] ] ) ;
13922: LD_ADDR_VAR 0 1
13926: PUSH
13927: LD_INT 11
13929: PPUSH
13930: LD_INT 22
13932: PUSH
13933: LD_EXP 1
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: PPUSH
13945: CALL_OW 70
13949: ST_TO_ADDR
// if pom > 0 then
13950: LD_VAR 0 1
13954: PUSH
13955: LD_INT 0
13957: GREATER
13958: IFFALSE 13969
// ComFireExplosives ( A4 ) ;
13960: LD_EXP 58
13964: PPUSH
13965: CALL_OW 134
// end ;
13969: PPOPN 1
13971: END
// every 0 0$20 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var i , pom , pom1 ;
13972: LD_EXP 59
13976: PUSH
13977: LD_INT 0
13979: EQUAL
13980: PUSH
13981: CALL 13663 0 0
13985: PUSH
13986: LD_INT 0
13988: EQUAL
13989: AND
13990: IFFALSE 14239
13992: GO 13994
13994: DISABLE
13995: LD_INT 0
13997: PPUSH
13998: PPUSH
13999: PPUSH
// begin pom1 = [ ] ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: EMPTY
14006: ST_TO_ADDR
// for i in Arabi_enter do
14007: LD_ADDR_VAR 0 1
14011: PUSH
14012: LD_LOC 7
14016: PUSH
14017: FOR_IN
14018: IFFALSE 14073
// if GetLives ( i ) < 1000 and i <> A1 and IsIdle ( i ) then
14020: LD_VAR 0 1
14024: PPUSH
14025: CALL_OW 256
14029: PUSH
14030: LD_INT 1000
14032: LESS
14033: PUSH
14034: LD_VAR 0 1
14038: PUSH
14039: LD_INT 134
14041: NONEQUAL
14042: AND
14043: PUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 316
14053: AND
14054: IFFALSE 14071
// ComMoveXY ( i , 77 , 20 ) ;
14056: LD_VAR 0 1
14060: PPUSH
14061: LD_INT 77
14063: PPUSH
14064: LD_INT 20
14066: PPUSH
14067: CALL_OW 111
14071: GO 14017
14073: POP
14074: POP
// pom = FilterUnitsInArea ( HealArea , [ [ f_side , Arabi ] ] ) ;
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: LD_INT 12
14082: PPUSH
14083: LD_INT 22
14085: PUSH
14086: LD_EXP 4
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: PPUSH
14098: CALL_OW 70
14102: ST_TO_ADDR
// for i in pom do
14103: LD_ADDR_VAR 0 1
14107: PUSH
14108: LD_VAR 0 2
14112: PUSH
14113: FOR_IN
14114: IFFALSE 14149
// if GetLives ( i ) < 1000 then
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 256
14125: PUSH
14126: LD_INT 1000
14128: LESS
14129: IFFALSE 14147
// pom1 = pom1 ^ i ;
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_VAR 0 3
14140: PUSH
14141: LD_VAR 0 1
14145: ADD
14146: ST_TO_ADDR
14147: GO 14113
14149: POP
14150: POP
// if IsOK ( A1 ) then
14151: LD_INT 134
14153: PPUSH
14154: CALL_OW 302
14158: IFFALSE 14239
// begin if pom1 > 0 then
14160: LD_VAR 0 3
14164: PUSH
14165: LD_INT 0
14167: GREATER
14168: IFFALSE 14238
// begin while IsInUnit ( A1 ) <> Ar_lab do
14170: LD_INT 134
14172: PPUSH
14173: CALL_OW 310
14177: PUSH
14178: LD_INT 59
14180: NONEQUAL
14181: IFFALSE 14192
// wait ( 0 0$3 ) ;
14183: LD_INT 105
14185: PPUSH
14186: CALL_OW 67
14190: GO 14170
// ComExitBuilding ( A1 ) ;
14192: LD_INT 134
14194: PPUSH
14195: CALL_OW 122
// for i in pom1 do
14199: LD_ADDR_VAR 0 1
14203: PUSH
14204: LD_VAR 0 3
14208: PUSH
14209: FOR_IN
14210: IFFALSE 14226
// AddComHeal ( A1 , i ) ;
14212: LD_INT 134
14214: PPUSH
14215: LD_VAR 0 1
14219: PPUSH
14220: CALL_OW 188
14224: GO 14209
14226: POP
14227: POP
// AddComEnterUnit ( A1 , ar_lab ) ;
14228: LD_INT 134
14230: PPUSH
14231: LD_INT 59
14233: PPUSH
14234: CALL_OW 180
// end ; enable ;
14238: ENABLE
// end ; end ;
14239: PPOPN 3
14241: END
// every 0 0$30 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom ;
14242: LD_EXP 59
14246: PUSH
14247: LD_INT 0
14249: EQUAL
14250: PUSH
14251: CALL 13663 0 0
14255: PUSH
14256: LD_INT 0
14258: EQUAL
14259: AND
14260: IFFALSE 14743
14262: GO 14264
14264: DISABLE
14265: LD_INT 0
14267: PPUSH
// begin if ( not MineAtPos ( 78 , 47 ) ) and IsOK ( diet ) then
14268: LD_INT 78
14270: PPUSH
14271: LD_INT 47
14273: PPUSH
14274: CALL_OW 458
14278: NOT
14279: PUSH
14280: LD_EXP 55
14284: PPUSH
14285: CALL_OW 302
14289: AND
14290: IFFALSE 14423
// begin while HasTask ( diet ) do
14292: LD_EXP 55
14296: PPUSH
14297: CALL_OW 314
14301: IFFALSE 14312
// wait ( 0 0$1 ) ;
14303: LD_INT 35
14305: PPUSH
14306: CALL_OW 67
14310: GO 14292
// if not MineAtPos ( 78 , 47 ) then
14312: LD_INT 78
14314: PPUSH
14315: LD_INT 47
14317: PPUSH
14318: CALL_OW 458
14322: NOT
14323: IFFALSE 14423
// begin pom = IsInUnit ( diet ) ;
14325: LD_ADDR_VAR 0 1
14329: PUSH
14330: LD_EXP 55
14334: PPUSH
14335: CALL_OW 310
14339: ST_TO_ADDR
// if pom = 0 then
14340: LD_VAR 0 1
14344: PUSH
14345: LD_INT 0
14347: EQUAL
14348: IFFALSE 14361
// ComRemember ( diet ) else
14350: LD_EXP 55
14354: PPUSH
14355: CALL_OW 143
14359: GO 14370
// ComExitBuilding ( diet ) ;
14361: LD_EXP 55
14365: PPUSH
14366: CALL_OW 122
// AddComPlaceRemoteCharge ( diet , 78 , 47 , 0 ) ;
14370: LD_EXP 55
14374: PPUSH
14375: LD_INT 78
14377: PPUSH
14378: LD_INT 47
14380: PPUSH
14381: LD_INT 0
14383: PPUSH
14384: CALL_OW 193
// if pom > 0 then
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 0
14395: GREATER
14396: IFFALSE 14414
// AddComEnterUnit ( diet , pom ) else
14398: LD_EXP 55
14402: PPUSH
14403: LD_VAR 0 1
14407: PPUSH
14408: CALL_OW 180
14412: GO 14423
// AddComReturn ( diet ) ;
14414: LD_EXP 55
14418: PPUSH
14419: CALL_OW 204
// end ; end ; if ( not MineAtPos ( 78 , 43 ) ) and IsOK ( A2 ) then
14423: LD_INT 78
14425: PPUSH
14426: LD_INT 43
14428: PPUSH
14429: CALL_OW 458
14433: NOT
14434: PUSH
14435: LD_EXP 56
14439: PPUSH
14440: CALL_OW 302
14444: AND
14445: IFFALSE 14578
// begin while HasTask ( A2 ) do
14447: LD_EXP 56
14451: PPUSH
14452: CALL_OW 314
14456: IFFALSE 14467
// wait ( 0 0$1 ) ;
14458: LD_INT 35
14460: PPUSH
14461: CALL_OW 67
14465: GO 14447
// if not MineAtPos ( 78 , 43 ) then
14467: LD_INT 78
14469: PPUSH
14470: LD_INT 43
14472: PPUSH
14473: CALL_OW 458
14477: NOT
14478: IFFALSE 14578
// begin pom = IsInUnit ( A2 ) ;
14480: LD_ADDR_VAR 0 1
14484: PUSH
14485: LD_EXP 56
14489: PPUSH
14490: CALL_OW 310
14494: ST_TO_ADDR
// if pom = 0 then
14495: LD_VAR 0 1
14499: PUSH
14500: LD_INT 0
14502: EQUAL
14503: IFFALSE 14516
// ComRemember ( A2 ) else
14505: LD_EXP 56
14509: PPUSH
14510: CALL_OW 143
14514: GO 14525
// ComExitBuilding ( A2 ) ;
14516: LD_EXP 56
14520: PPUSH
14521: CALL_OW 122
// AddComPlaceRemoteCharge ( A2 , 78 , 43 , 0 ) ;
14525: LD_EXP 56
14529: PPUSH
14530: LD_INT 78
14532: PPUSH
14533: LD_INT 43
14535: PPUSH
14536: LD_INT 0
14538: PPUSH
14539: CALL_OW 193
// if pom > 0 then
14543: LD_VAR 0 1
14547: PUSH
14548: LD_INT 0
14550: GREATER
14551: IFFALSE 14569
// AddComEnterUnit ( A2 , pom ) else
14553: LD_EXP 56
14557: PPUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 180
14567: GO 14578
// AddComReturn ( A2 ) ;
14569: LD_EXP 56
14573: PPUSH
14574: CALL_OW 204
// end ; end ; if ( not MineAtPos ( 82 , 46 ) ) and IsOK ( A4 ) then
14578: LD_INT 82
14580: PPUSH
14581: LD_INT 46
14583: PPUSH
14584: CALL_OW 458
14588: NOT
14589: PUSH
14590: LD_EXP 58
14594: PPUSH
14595: CALL_OW 302
14599: AND
14600: IFFALSE 14742
// begin while HasTask ( A4 ) do
14602: LD_EXP 58
14606: PPUSH
14607: CALL_OW 314
14611: IFFALSE 14622
// wait ( 0 0$1 ) ;
14613: LD_INT 35
14615: PPUSH
14616: CALL_OW 67
14620: GO 14602
// if not MineAtPos ( 82 , 46 ) then
14622: LD_INT 82
14624: PPUSH
14625: LD_INT 46
14627: PPUSH
14628: CALL_OW 458
14632: NOT
14633: IFFALSE 14742
// begin pom = IsInUnit ( A4 ) ;
14635: LD_ADDR_VAR 0 1
14639: PUSH
14640: LD_EXP 58
14644: PPUSH
14645: CALL_OW 310
14649: ST_TO_ADDR
// if pom = 0 then
14650: LD_VAR 0 1
14654: PUSH
14655: LD_INT 0
14657: EQUAL
14658: IFFALSE 14671
// ComRemember ( A4 ) else
14660: LD_EXP 58
14664: PPUSH
14665: CALL_OW 143
14669: GO 14680
// ComExitBuilding ( A4 ) ;
14671: LD_EXP 58
14675: PPUSH
14676: CALL_OW 122
// AddComExitBuilding ( A4 ) ;
14680: LD_EXP 58
14684: PPUSH
14685: CALL_OW 182
// AddComPlaceRemoteCharge ( A4 , 82 , 76 , 0 ) ;
14689: LD_EXP 58
14693: PPUSH
14694: LD_INT 82
14696: PPUSH
14697: LD_INT 76
14699: PPUSH
14700: LD_INT 0
14702: PPUSH
14703: CALL_OW 193
// if pom > 0 then
14707: LD_VAR 0 1
14711: PUSH
14712: LD_INT 0
14714: GREATER
14715: IFFALSE 14733
// AddComEnterUnit ( A4 , pom ) else
14717: LD_EXP 58
14721: PPUSH
14722: LD_VAR 0 1
14726: PPUSH
14727: CALL_OW 180
14731: GO 14742
// AddComReturn ( A4 ) ;
14733: LD_EXP 58
14737: PPUSH
14738: CALL_OW 204
// end ; end ; enable ;
14742: ENABLE
// end ;
14743: PPOPN 1
14745: END
// every 0 0$5 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var i , pom ;
14746: LD_EXP 59
14750: PUSH
14751: LD_INT 0
14753: EQUAL
14754: PUSH
14755: CALL 13663 0 0
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: AND
14764: IFFALSE 14898
14766: GO 14768
14768: DISABLE
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
// begin pom = FIlterAllUnits ( [ [ f_side , You ] , [ f_see , Arabi ] ] ) ;
14773: LD_ADDR_VAR 0 2
14777: PUSH
14778: LD_INT 22
14780: PUSH
14781: LD_EXP 1
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 101
14792: PUSH
14793: LD_EXP 4
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: ST_TO_ADDR
// if pom > 0 then
14811: LD_VAR 0 2
14815: PUSH
14816: LD_INT 0
14818: GREATER
14819: IFFALSE 14897
// begin ComChangeProfession ( diet , class_mortar ) ;
14821: LD_EXP 55
14825: PPUSH
14826: LD_INT 8
14828: PPUSH
14829: CALL_OW 123
// AddComExitBuilding ( diet ) ;
14833: LD_EXP 55
14837: PPUSH
14838: CALL_OW 182
// for i in pom do
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: LD_VAR 0 2
14851: PUSH
14852: FOR_IN
14853: IFFALSE 14871
// AddComAttackUnit ( diet , i ) ;
14855: LD_EXP 55
14859: PPUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 175
14869: GO 14852
14871: POP
14872: POP
// AddComEnterUnit ( diet , Ar_bar ) ;
14873: LD_EXP 55
14877: PPUSH
14878: LD_INT 61
14880: PPUSH
14881: CALL_OW 180
// AddComChangeProfession ( diet , class_soldier ) ;
14885: LD_EXP 55
14889: PPUSH
14890: LD_INT 1
14892: PPUSH
14893: CALL_OW 183
// end ; enable ;
14897: ENABLE
// end ;
14898: PPOPN 2
14900: END
// every 0 0$0.1 do var pom , i ;
14901: GO 14903
14903: DISABLE
14904: LD_INT 0
14906: PPUSH
14907: PPUSH
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
14908: LD_ADDR_VAR 0 1
14912: PUSH
14913: LD_INT 8
14915: PPUSH
14916: LD_INT 22
14918: PUSH
14919: LD_EXP 4
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 21
14930: PUSH
14931: LD_INT 3
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PPUSH
14942: CALL_OW 70
14946: ST_TO_ADDR
// for i in pom do
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_VAR 0 1
14956: PUSH
14957: FOR_IN
14958: IFFALSE 14982
// SetBLevel ( i , levely_budovy_arabi [ difficulty ] ) ;
14960: LD_VAR 0 2
14964: PPUSH
14965: LD_EXP 39
14969: PUSH
14970: LD_OWVAR 67
14974: ARRAY
14975: PPUSH
14976: CALL_OW 241
14980: GO 14957
14982: POP
14983: POP
// end ;
14984: PPOPN 2
14986: END
// every 0 0$5 trigger Arabi_vztah = 20 do var pom ; var poc ;
14987: LD_EXP 59
14991: PUSH
14992: LD_INT 20
14994: EQUAL
14995: IFFALSE 15365
14997: GO 14999
14999: DISABLE
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
// begin wait ( 0 0$30 ) ;
15004: LD_INT 1050
15006: PPUSH
15007: CALL_OW 67
// ComExitBuilding ( Arabi_enter ) ;
15011: LD_LOC 7
15015: PPUSH
15016: CALL_OW 122
// AddComEnterUnit ( Arabi_enter , Ar_bar ) ;
15020: LD_LOC 7
15024: PPUSH
15025: LD_INT 61
15027: PPUSH
15028: CALL_OW 180
// AddComChangeProfession ( Arabi_enter , class_mortar ) ;
15032: LD_LOC 7
15036: PPUSH
15037: LD_INT 8
15039: PPUSH
15040: CALL_OW 183
// RemoveMineOfUnit ( diet ) ;
15044: LD_EXP 55
15048: PPUSH
15049: CALL_OW 460
// RemoveMineOfUnit ( A2 ) ;
15053: LD_EXP 56
15057: PPUSH
15058: CALL_OW 460
// RemoveMineOfUnit ( A4 ) ;
15062: LD_EXP 58
15066: PPUSH
15067: CALL_OW 460
// AddComPlaceRemoteCharge ( diet , 0 , 0 , Am_at6 ) ;
15071: LD_EXP 55
15075: PPUSH
15076: LD_INT 0
15078: PPUSH
15079: LD_INT 0
15081: PPUSH
15082: LD_INT 180
15084: PPUSH
15085: CALL_OW 193
// AddComPlaceRemoteCharge ( A2 , 0 , 0 , Am_at7 ) ;
15089: LD_EXP 56
15093: PPUSH
15094: LD_INT 0
15096: PPUSH
15097: LD_INT 0
15099: PPUSH
15100: LD_INT 70
15102: PPUSH
15103: CALL_OW 193
// AddComPlaceRemoteCharge ( A3 , 0 , 0 , Am_bar ) ;
15107: LD_EXP 57
15111: PPUSH
15112: LD_INT 0
15114: PPUSH
15115: LD_INT 0
15117: PPUSH
15118: LD_INT 85
15120: PPUSH
15121: CALL_OW 193
// AddComPlaceRemoteCharge ( A4 , 0 , 0 , Am_at4 ) ;
15125: LD_EXP 58
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: LD_INT 0
15135: PPUSH
15136: LD_INT 69
15138: PPUSH
15139: CALL_OW 193
// AddComMoveXY ( Arabi_enter , 88 , 9 ) ;
15143: LD_LOC 7
15147: PPUSH
15148: LD_INT 88
15150: PPUSH
15151: LD_INT 9
15153: PPUSH
15154: CALL_OW 171
// ComExitBuilding ( Arabi_opoce ) ;
15158: LD_LOC 8
15162: PPUSH
15163: CALL_OW 122
// AddComEnterUnit ( Arabi_opoce , Ar_bar ) ;
15167: LD_LOC 8
15171: PPUSH
15172: LD_INT 61
15174: PPUSH
15175: CALL_OW 180
// AddComChangeProfession ( Arabi_opoce , class_apeman_kamikaze ) ;
15179: LD_LOC 8
15183: PPUSH
15184: LD_INT 17
15186: PPUSH
15187: CALL_OW 183
// AddComExitBuilding ( Arabi_opoce ) ;
15191: LD_LOC 8
15195: PPUSH
15196: CALL_OW 182
// wait ( 1 1$0 ) ;
15200: LD_INT 2100
15202: PPUSH
15203: CALL_OW 67
// while FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) = 0 do
15207: LD_INT 22
15209: PUSH
15210: LD_EXP 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 101
15221: PUSH
15222: LD_EXP 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PPUSH
15235: CALL_OW 69
15239: PUSH
15240: LD_INT 0
15242: EQUAL
15243: IFFALSE 15254
// wait ( 0 0$5 ) ;
15245: LD_INT 175
15247: PPUSH
15248: CALL_OW 67
15252: GO 15207
// ComFireExplosives ( [ diet , A2 , A3 , A4 ] ) ;
15254: LD_EXP 55
15258: PUSH
15259: LD_EXP 56
15263: PUSH
15264: LD_EXP 57
15268: PUSH
15269: LD_EXP 58
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 134
// AddComAttackUnit ( Arabi_enter , Am_el2 ) ;
15284: LD_LOC 7
15288: PPUSH
15289: LD_INT 81
15291: PPUSH
15292: CALL_OW 175
// AddComAttackUnit ( Arabi_opoce , Am_tov ) ;
15296: LD_LOC 8
15300: PPUSH
15301: LD_INT 175
15303: PPUSH
15304: CALL_OW 175
// wait ( 0 0$3 ) ;
15308: LD_INT 105
15310: PPUSH
15311: CALL_OW 67
// SetAttitude ( Arabi , Amici , att_enemy , true ) ;
15315: LD_EXP 4
15319: PPUSH
15320: LD_EXP 2
15324: PPUSH
15325: LD_INT 2
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 80
// SetAttitude ( Amici , Arabi , att_enemy , true ) ;
15335: LD_EXP 2
15339: PPUSH
15340: LD_EXP 4
15344: PPUSH
15345: LD_INT 2
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 80
// wait ( 0 0$30 ) ;
15355: LD_INT 1050
15357: PPUSH
15358: CALL_OW 67
// enable ( 102 ) ;
15362: LD_INT 102
15364: ENABLE_MARKED
// end ;
15365: PPOPN 2
15367: END
// every 0 0$1 trigger GetLives ( Am_el2 ) < 200 marked 102 do
15368: LD_INT 81
15370: PPUSH
15371: CALL_OW 256
15375: PUSH
15376: LD_INT 200
15378: LESS
15379: IFFALSE 15461
15381: GO 15383
15383: DISABLE
// begin ComMoveXY ( Arabi_enter , 61 , 1 ) ;
15384: LD_LOC 7
15388: PPUSH
15389: LD_INT 61
15391: PPUSH
15392: LD_INT 1
15394: PPUSH
15395: CALL_OW 111
// enable ( 101 ) ;
15399: LD_INT 101
15401: ENABLE_MARKED
// while FilterAllUnits ( [ [ f_side , Arabi ] , [ f_class , class_mortar ] ] ) do
15402: LD_INT 22
15404: PUSH
15405: LD_EXP 4
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 25
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 69
15432: IFFALSE 15458
// begin ComMoveXY ( Arabi_enter , 61 , 1 ) ;
15434: LD_LOC 7
15438: PPUSH
15439: LD_INT 61
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 111
// wait ( 0 0$1 ) ;
15449: LD_INT 35
15451: PPUSH
15452: CALL_OW 67
// end ;
15456: GO 15402
// disable ( 101 ) ;
15458: LD_INT 101
15460: DISABLE_MARKED
// end ;
15461: END
// every 0 0$11 do var pom ;
15462: GO 15464
15464: DISABLE
15465: LD_INT 0
15467: PPUSH
// begin pom = UnitsInside ( Ar_lab ) ;
15468: LD_ADDR_VAR 0 1
15472: PUSH
15473: LD_INT 59
15475: PPUSH
15476: CALL_OW 313
15480: ST_TO_ADDR
// ComChangeProfession ( pom , class_scientistic ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_INT 4
15488: PPUSH
15489: CALL_OW 123
// enable ;
15493: ENABLE
// end ;
15494: PPOPN 1
15496: END
// every 0 0$1 trigger not KECY_s_arabama do var pom , i ; var vysl ;
15497: LD_EXP 6
15501: NOT
15502: IFFALSE 15684
15504: GO 15506
15506: DISABLE
15507: LD_INT 0
15509: PPUSH
15510: PPUSH
15511: PPUSH
// begin vysl = false ;
15512: LD_ADDR_VAR 0 3
15516: PUSH
15517: LD_INT 0
15519: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
15520: LD_ADDR_VAR 0 1
15524: PUSH
15525: LD_INT 22
15527: PUSH
15528: LD_EXP 1
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: LD_INT 2
15539: PUSH
15540: LD_INT 21
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 1
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PPUSH
15569: CALL_OW 69
15573: ST_TO_ADDR
// for i in pom do
15574: LD_ADDR_VAR 0 2
15578: PUSH
15579: LD_VAR 0 1
15583: PUSH
15584: FOR_IN
15585: IFFALSE 15619
// if GetSide ( Attacks ( i ) ) = Arabi then
15587: LD_VAR 0 2
15591: PPUSH
15592: CALL_OW 320
15596: PPUSH
15597: CALL_OW 255
15601: PUSH
15602: LD_EXP 4
15606: EQUAL
15607: IFFALSE 15617
// vysl = true ;
15609: LD_ADDR_VAR 0 3
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
15617: GO 15584
15619: POP
15620: POP
// if vysl then
15621: LD_VAR 0 3
15625: IFFALSE 15683
// begin KECY_s_arabama = true ;
15627: LD_ADDR_EXP 6
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// SetAttitude ( You , Arabi , att_enemy , true ) ;
15635: LD_EXP 1
15639: PPUSH
15640: LD_EXP 4
15644: PPUSH
15645: LD_INT 2
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
15655: LD_EXP 4
15659: PPUSH
15660: LD_EXP 1
15664: PPUSH
15665: LD_INT 2
15667: PPUSH
15668: LD_INT 1
15670: PPUSH
15671: CALL_OW 80
// Arabi_vztah = 0 ;
15675: LD_ADDR_EXP 59
15679: PUSH
15680: LD_INT 0
15682: ST_TO_ADDR
// end ; enable ;
15683: ENABLE
// end ; end_of_file
15684: PPOPN 3
15686: END
// export JMM ; export Joan ; export VEDCI1 ; export VEDCI2 ; export VEDCI3 ; export Am_opoce ; export Am_sol ; export Am_mech ; export Am_vyr ; export Am_snipe ; export Am_utoky ; var UTOCENI ; export mcmillanova_pomsta ; export counter_utoku ; every 0 0$0.1 do
15687: GO 15689
15689: DISABLE
// begin UTOCENI = false ;
15690: LD_ADDR_LOC 9
15694: PUSH
15695: LD_INT 0
15697: ST_TO_ADDR
// Am_utoky = 0 ;
15698: LD_ADDR_EXP 70
15702: PUSH
15703: LD_INT 0
15705: ST_TO_ADDR
// Am_opoce = [ OPC1 , OPC2 , OPC3 , OPC4 ] ;
15706: LD_ADDR_EXP 65
15710: PUSH
15711: LD_INT 140
15713: PUSH
15714: LD_INT 141
15716: PUSH
15717: LD_INT 142
15719: PUSH
15720: LD_INT 143
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: ST_TO_ADDR
// mcmillanova_pomsta = false ;
15729: LD_ADDR_EXP 71
15733: PUSH
15734: LD_INT 0
15736: ST_TO_ADDR
// counter_utoku = 0 ;
15737: LD_ADDR_EXP 72
15741: PUSH
15742: LD_INT 0
15744: ST_TO_ADDR
// disable ( 998 ) ;
15745: LD_INT 998
15747: DISABLE_MARKED
// end ;
15748: END
// every 0 0$0.2 do
15749: GO 15751
15751: DISABLE
// begin ComEnterUnit ( VEDCI1 , Am_lab1 ) ;
15752: LD_EXP 62
15756: PPUSH
15757: LD_INT 48
15759: PPUSH
15760: CALL_OW 120
// ComEnterUnit ( VEDCI2 , Am_lab2 ) ;
15764: LD_EXP 63
15768: PPUSH
15769: LD_INT 55
15771: PPUSH
15772: CALL_OW 120
// ComEnterUnit ( VEDCI3 , Am_lab3 ) ;
15776: LD_EXP 64
15780: PPUSH
15781: LD_INT 56
15783: PPUSH
15784: CALL_OW 120
// ComEnterUnit ( Joan , Am_lab2 ) ;
15788: LD_EXP 61
15792: PPUSH
15793: LD_INT 55
15795: PPUSH
15796: CALL_OW 120
// ComEnterUnit ( Am_opoce , Am_dep ) ;
15800: LD_EXP 65
15804: PPUSH
15805: LD_INT 45
15807: PPUSH
15808: CALL_OW 120
// ComEnterUnit ( Am_mech , Am_ct ) ;
15812: LD_EXP 67
15816: PPUSH
15817: LD_INT 83
15819: PPUSH
15820: CALL_OW 120
// ComEnterUnit ( Am_vyr , Am_tov ) ;
15824: LD_EXP 68
15828: PPUSH
15829: LD_INT 175
15831: PPUSH
15832: CALL_OW 120
// ComEnterUnit ( Am_snipe , Am_bar ) ;
15836: LD_EXP 69
15840: PPUSH
15841: LD_INT 85
15843: PPUSH
15844: CALL_OW 120
// ComEnterUnit ( Am_sol , Am_bar ) ;
15848: LD_EXP 66
15852: PPUSH
15853: LD_INT 85
15855: PPUSH
15856: CALL_OW 120
// end ;
15860: END
// every 0 0$0.1 do var i , pom ;
15861: GO 15863
15863: DISABLE
15864: LD_INT 0
15866: PPUSH
15867: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
15868: LD_ADDR_VAR 0 2
15872: PUSH
15873: LD_INT 13
15875: PPUSH
15876: LD_INT 22
15878: PUSH
15879: LD_EXP 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 21
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PPUSH
15902: CALL_OW 70
15906: ST_TO_ADDR
// for i in pom do
15907: LD_ADDR_VAR 0 1
15911: PUSH
15912: LD_VAR 0 2
15916: PUSH
15917: FOR_IN
15918: IFFALSE 15942
// SetBLevel ( i , levely_budovy_amici [ difficulty ] ) ;
15920: LD_VAR 0 1
15924: PPUSH
15925: LD_EXP 40
15929: PUSH
15930: LD_OWVAR 67
15934: ARRAY
15935: PPUSH
15936: CALL_OW 241
15940: GO 15917
15942: POP
15943: POP
// end ;
15944: PPOPN 2
15946: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) > 0 do var pom ;
15947: LD_INT 22
15949: PUSH
15950: LD_EXP 1
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 101
15961: PUSH
15962: LD_EXP 2
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PPUSH
15975: CALL_OW 69
15979: PUSH
15980: LD_INT 0
15982: GREATER
15983: IFFALSE 16245
15985: GO 15987
15987: DISABLE
15988: LD_INT 0
15990: PPUSH
// begin pom = FilterUnitsInArea ( Am_vychod , [ [ f_side , You ] ] ) ;
15991: LD_ADDR_VAR 0 1
15995: PUSH
15996: LD_INT 18
15998: PPUSH
15999: LD_INT 22
16001: PUSH
16002: LD_EXP 1
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: PPUSH
16014: CALL_OW 70
16018: ST_TO_ADDR
// if pom > 0 then
16019: LD_VAR 0 1
16023: PUSH
16024: LD_INT 0
16026: GREATER
16027: IFFALSE 16119
// begin if IsOK ( Am_sol [ 1 ] ) then
16029: LD_EXP 66
16033: PUSH
16034: LD_INT 1
16036: ARRAY
16037: PPUSH
16038: CALL_OW 302
16042: IFFALSE 16073
// begin ComExitBuilding ( Am_sol [ 1 ] ) ;
16044: LD_EXP 66
16048: PUSH
16049: LD_INT 1
16051: ARRAY
16052: PPUSH
16053: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 1 ] , Am_bu3 ) ;
16057: LD_EXP 66
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: LD_INT 166
16068: PPUSH
16069: CALL_OW 180
// end ; if IsOK ( Am_sol [ 2 ] ) then
16073: LD_EXP 66
16077: PUSH
16078: LD_INT 2
16080: ARRAY
16081: PPUSH
16082: CALL_OW 302
16086: IFFALSE 16117
// begin ComExitBuilding ( Am_sol [ 2 ] ) ;
16088: LD_EXP 66
16092: PUSH
16093: LD_INT 2
16095: ARRAY
16096: PPUSH
16097: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 2 ] , Am_bu4 ) ;
16101: LD_EXP 66
16105: PUSH
16106: LD_INT 2
16108: ARRAY
16109: PPUSH
16110: LD_INT 171
16112: PPUSH
16113: CALL_OW 180
// end ; end else
16117: GO 16245
// begin pom = FilterUnitsInArea ( Am_vychod , [ [ f_side , You ] ] ) ;
16119: LD_ADDR_VAR 0 1
16123: PUSH
16124: LD_INT 18
16126: PPUSH
16127: LD_INT 22
16129: PUSH
16130: LD_EXP 1
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: PPUSH
16142: CALL_OW 70
16146: ST_TO_ADDR
// if pom > 0 then
16147: LD_VAR 0 1
16151: PUSH
16152: LD_INT 0
16154: GREATER
16155: IFFALSE 16245
// begin if IsOK ( Am_sol [ 1 ] ) then
16157: LD_EXP 66
16161: PUSH
16162: LD_INT 1
16164: ARRAY
16165: PPUSH
16166: CALL_OW 302
16170: IFFALSE 16201
// begin ComExitBuilding ( Am_sol [ 1 ] ) ;
16172: LD_EXP 66
16176: PUSH
16177: LD_INT 1
16179: ARRAY
16180: PPUSH
16181: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 1 ] , Am_bu1 ) ;
16185: LD_EXP 66
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: PPUSH
16194: LD_INT 52
16196: PPUSH
16197: CALL_OW 180
// end ; if IsOK ( Am_sol [ 2 ] ) then
16201: LD_EXP 66
16205: PUSH
16206: LD_INT 2
16208: ARRAY
16209: PPUSH
16210: CALL_OW 302
16214: IFFALSE 16245
// begin ComExitBuilding ( Am_sol [ 2 ] ) ;
16216: LD_EXP 66
16220: PUSH
16221: LD_INT 2
16223: ARRAY
16224: PPUSH
16225: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 2 ] , Am_bu2 ) ;
16229: LD_EXP 66
16233: PUSH
16234: LD_INT 2
16236: ARRAY
16237: PPUSH
16238: LD_INT 53
16240: PPUSH
16241: CALL_OW 180
// end ; end ; end ; end ;
16245: PPOPN 1
16247: END
// every 1 1$7 do
16248: GO 16250
16250: DISABLE
// begin if Researched ( Amici , tech_Sib1 ) then
16251: LD_EXP 2
16255: PPUSH
16256: LD_INT 54
16258: PPUSH
16259: CALL_OW 325
16263: IFFALSE 16297
// begin SetTech ( tech_Sib1 , Amici , state_enabled ) ;
16265: LD_INT 54
16267: PPUSH
16268: LD_EXP 2
16272: PPUSH
16273: LD_INT 1
16275: PPUSH
16276: CALL_OW 322
// ComResearch ( [ Am_lab1 , Am_lab2 ] , tech_Sib1 ) ;
16280: LD_INT 48
16282: PUSH
16283: LD_INT 55
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PPUSH
16290: LD_INT 54
16292: PPUSH
16293: CALL_OW 124
// end ; enable ;
16297: ENABLE
// end ;
16298: END
// every 0 0$19 do
16299: GO 16301
16301: DISABLE
// begin SetTech ( tech_Sib1 , Amici , state_enabled ) ;
16302: LD_INT 54
16304: PPUSH
16305: LD_EXP 2
16309: PPUSH
16310: LD_INT 1
16312: PPUSH
16313: CALL_OW 322
// ComResearch ( [ Am_lab1 , Am_lab2 ] , tech_Sib1 ) ;
16317: LD_INT 48
16319: PUSH
16320: LD_INT 55
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PPUSH
16327: LD_INT 54
16329: PPUSH
16330: CALL_OW 124
// end ;
16334: END
// every 1 1$8 do
16335: GO 16337
16337: DISABLE
// begin if Researched ( Amici , tech_Opto1 ) then
16338: LD_EXP 2
16342: PPUSH
16343: LD_INT 60
16345: PPUSH
16346: CALL_OW 325
16350: IFFALSE 16377
// begin SetTech ( tech_Opto1 , Amici , state_enabled ) ;
16352: LD_INT 60
16354: PPUSH
16355: LD_EXP 2
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: CALL_OW 322
// ComResearch ( Am_lab3 , tech_Opto1 ) ;
16367: LD_INT 56
16369: PPUSH
16370: LD_INT 60
16372: PPUSH
16373: CALL_OW 124
// end ; enable ;
16377: ENABLE
// end ;
16378: END
// every 0 0$21 do
16379: GO 16381
16381: DISABLE
// begin SetTech ( tech_Opto1 , Amici , state_enabled ) ;
16382: LD_INT 60
16384: PPUSH
16385: LD_EXP 2
16389: PPUSH
16390: LD_INT 1
16392: PPUSH
16393: CALL_OW 322
// ComResearch ( Am_lab3 , tech_Opto1 ) ;
16397: LD_INT 56
16399: PPUSH
16400: LD_INT 60
16402: PPUSH
16403: CALL_OW 124
// end ;
16407: END
// every 0 0$10 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom , i , pom1 ;
16408: LD_EXP 59
16412: PUSH
16413: LD_INT 0
16415: EQUAL
16416: PUSH
16417: CALL 16512 0 0
16421: PUSH
16422: LD_INT 0
16424: EQUAL
16425: AND
16426: IFFALSE 16509
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
// begin if IsOK ( Am_bar ) and IsInUnit ( Am_sol [ 1 ] ) <> Am_bar and IsInUnit ( Am_sol [ 1 ] ) <> Am_bar then
16436: LD_INT 85
16438: PPUSH
16439: CALL_OW 302
16443: PUSH
16444: LD_EXP 66
16448: PUSH
16449: LD_INT 1
16451: ARRAY
16452: PPUSH
16453: CALL_OW 310
16457: PUSH
16458: LD_INT 85
16460: NONEQUAL
16461: AND
16462: PUSH
16463: LD_EXP 66
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: PPUSH
16472: CALL_OW 310
16476: PUSH
16477: LD_INT 85
16479: NONEQUAL
16480: AND
16481: IFFALSE 16504
// begin ComExitBuilding ( Am_sol ) ;
16483: LD_EXP 66
16487: PPUSH
16488: CALL_OW 122
// AddComEnterUnit ( Am_sol , Am_bar ) ;
16492: LD_EXP 66
16496: PPUSH
16497: LD_INT 85
16499: PPUSH
16500: CALL_OW 180
// end ; opravovani_budov ;
16504: CALL 18643 0 0
// enable ;
16508: ENABLE
// end ;
16509: PPOPN 3
16511: END
// function bojeschopnych_rusu ; var pom , i , pom1 ; begin
16512: LD_INT 0
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) ;
16518: LD_ADDR_VAR 0 2
16522: PUSH
16523: LD_INT 22
16525: PUSH
16526: LD_EXP 1
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 101
16537: PUSH
16538: LD_EXP 2
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PPUSH
16551: CALL_OW 69
16555: ST_TO_ADDR
// pom1 = pom ;
16556: LD_ADDR_VAR 0 4
16560: PUSH
16561: LD_VAR 0 2
16565: ST_TO_ADDR
// for i in pom do
16566: LD_ADDR_VAR 0 3
16570: PUSH
16571: LD_VAR 0 2
16575: PUSH
16576: FOR_IN
16577: IFFALSE 16627
// if GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) = 0 then
16579: LD_VAR 0 3
16583: PPUSH
16584: CALL_OW 247
16588: PUSH
16589: LD_INT 2
16591: EQUAL
16592: PUSH
16593: LD_VAR 0 3
16597: PPUSH
16598: CALL_OW 311
16602: PUSH
16603: LD_INT 0
16605: EQUAL
16606: AND
16607: IFFALSE 16625
// pom1 = pom1 diff i ;
16609: LD_ADDR_VAR 0 4
16613: PUSH
16614: LD_VAR 0 4
16618: PUSH
16619: LD_VAR 0 3
16623: DIFF
16624: ST_TO_ADDR
16625: GO 16576
16627: POP
16628: POP
// debug_strings = [ pom1 ] ;
16629: LD_ADDR_OWVAR 48
16633: PUSH
16634: LD_VAR 0 4
16638: PUSH
16639: EMPTY
16640: LIST
16641: ST_TO_ADDR
// result := pom1 + 0 ;
16642: LD_ADDR_VAR 0 1
16646: PUSH
16647: LD_VAR 0 4
16651: PUSH
16652: LD_INT 0
16654: PLUS
16655: ST_TO_ADDR
// end ;
16656: LD_VAR 0 1
16660: RET
// every 0 0$19 trigger Am_utoky = 1 do var i ; var cesta ;
16661: LD_EXP 70
16665: PUSH
16666: LD_INT 1
16668: EQUAL
16669: IFFALSE 17023
16671: GO 16673
16673: DISABLE
16674: LD_INT 0
16676: PPUSH
16677: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
16678: LD_EXP 42
16682: PUSH
16683: LD_OWVAR 67
16687: ARRAY
16688: PPUSH
16689: CALL_OW 67
// wait ( Rand ( 1 , 0 0$30 ) ) ;
16693: LD_INT 1
16695: PPUSH
16696: LD_INT 1050
16698: PPUSH
16699: CALL_OW 12
16703: PPUSH
16704: CALL_OW 67
// if mcmillanova_pomsta then
16708: LD_EXP 71
16712: IFFALSE 16716
// exit ;
16714: GO 17023
// for i in AM_UTOK_1_LIST do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 32
16725: PUSH
16726: FOR_IN
16727: IFFALSE 16746
// PlaceUnitArea ( i , Am_enter , false ) ;
16729: LD_VAR 0 1
16733: PPUSH
16734: LD_INT 19
16736: PPUSH
16737: LD_INT 0
16739: PPUSH
16740: CALL_OW 49
16744: GO 16726
16746: POP
16747: POP
// case cislo_baze of 1 :
16748: LD_EXP 8
16752: PUSH
16753: LD_INT 1
16755: DOUBLE
16756: EQUAL
16757: IFTRUE 16761
16759: GO 16815
16761: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 57 , 77 ] , [ 48 , 75 ] ] ; 2 :
16762: LD_ADDR_VAR 0 2
16766: PUSH
16767: LD_INT 40
16769: PUSH
16770: LD_INT 46
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 70
16779: PUSH
16780: LD_INT 62
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 57
16789: PUSH
16790: LD_INT 77
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 48
16799: PUSH
16800: LD_INT 75
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: ST_TO_ADDR
16813: GO 16984
16815: LD_INT 2
16817: DOUBLE
16818: EQUAL
16819: IFTRUE 16823
16821: GO 16888
16823: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 76 , 58 ] , [ 83 , 72 ] , [ 94 , 91 ] ] ; 3 :
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 40
16831: PUSH
16832: LD_INT 47
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 61
16841: PUSH
16842: LD_INT 52
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 76
16851: PUSH
16852: LD_INT 58
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 83
16861: PUSH
16862: LD_INT 72
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 94
16871: PUSH
16872: LD_INT 91
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: ST_TO_ADDR
16886: GO 16984
16888: LD_INT 3
16890: DOUBLE
16891: EQUAL
16892: IFTRUE 16896
16894: GO 16983
16896: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 86 , 76 ] , [ 103 , 95 ] , [ 126 , 79 ] , [ 140 , 82 ] , [ 144 , 69 ] ] ; end ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: LD_INT 40
16904: PUSH
16905: LD_INT 47
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 61
16914: PUSH
16915: LD_INT 52
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 86
16924: PUSH
16925: LD_INT 76
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 103
16934: PUSH
16935: LD_INT 95
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 126
16944: PUSH
16945: LD_INT 79
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 140
16954: PUSH
16955: LD_INT 82
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 144
16964: PUSH
16965: LD_INT 69
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: ST_TO_ADDR
16981: GO 16984
16983: POP
// McMove ( 1 , AM_UTOK_1_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
16984: LD_INT 1
16986: PPUSH
16987: LD_EXP 32
16991: PPUSH
16992: LD_VAR 0 2
16996: PPUSH
16997: LD_INT 5
16999: PUSH
17000: LD_INT 6
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: PPUSH
17011: CALL_OW 398
// Am_utoky = 2 ;
17015: LD_ADDR_EXP 70
17019: PUSH
17020: LD_INT 2
17022: ST_TO_ADDR
// end ;
17023: PPOPN 2
17025: END
// every 0 0$17 trigger Am_utoky = 2 do var i ; var cesta ;
17026: LD_EXP 70
17030: PUSH
17031: LD_INT 2
17033: EQUAL
17034: IFFALSE 17373
17036: GO 17038
17038: DISABLE
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
17043: LD_EXP 42
17047: PUSH
17048: LD_OWVAR 67
17052: ARRAY
17053: PPUSH
17054: CALL_OW 67
// if mcmillanova_pomsta then
17058: LD_EXP 71
17062: IFFALSE 17066
// exit ;
17064: GO 17373
// for i in AM_UTOK_2_LIST do
17066: LD_ADDR_VAR 0 1
17070: PUSH
17071: LD_EXP 33
17075: PUSH
17076: FOR_IN
17077: IFFALSE 17096
// PlaceUnitArea ( i , Am_enter , false ) ;
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_INT 19
17086: PPUSH
17087: LD_INT 0
17089: PPUSH
17090: CALL_OW 49
17094: GO 17076
17096: POP
17097: POP
// case cislo_baze of 1 :
17098: LD_EXP 8
17102: PUSH
17103: LD_INT 1
17105: DOUBLE
17106: EQUAL
17107: IFTRUE 17111
17109: GO 17165
17111: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 57 , 77 ] , [ 48 , 75 ] ] ; 2 :
17112: LD_ADDR_VAR 0 2
17116: PUSH
17117: LD_INT 40
17119: PUSH
17120: LD_INT 46
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 70
17129: PUSH
17130: LD_INT 62
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 57
17139: PUSH
17140: LD_INT 77
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 48
17149: PUSH
17150: LD_INT 75
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: ST_TO_ADDR
17163: GO 17334
17165: LD_INT 2
17167: DOUBLE
17168: EQUAL
17169: IFTRUE 17173
17171: GO 17238
17173: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 76 , 58 ] , [ 83 , 72 ] , [ 94 , 91 ] ] ; 3 :
17174: LD_ADDR_VAR 0 2
17178: PUSH
17179: LD_INT 40
17181: PUSH
17182: LD_INT 47
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 61
17191: PUSH
17192: LD_INT 52
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 76
17201: PUSH
17202: LD_INT 58
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 83
17211: PUSH
17212: LD_INT 72
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 94
17221: PUSH
17222: LD_INT 91
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: ST_TO_ADDR
17236: GO 17334
17238: LD_INT 3
17240: DOUBLE
17241: EQUAL
17242: IFTRUE 17246
17244: GO 17333
17246: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 86 , 76 ] , [ 103 , 95 ] , [ 126 , 79 ] , [ 140 , 82 ] , [ 144 , 69 ] ] ; end ;
17247: LD_ADDR_VAR 0 2
17251: PUSH
17252: LD_INT 40
17254: PUSH
17255: LD_INT 47
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 61
17264: PUSH
17265: LD_INT 52
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 86
17274: PUSH
17275: LD_INT 76
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 103
17284: PUSH
17285: LD_INT 95
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 126
17294: PUSH
17295: LD_INT 79
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 140
17304: PUSH
17305: LD_INT 82
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 144
17314: PUSH
17315: LD_INT 69
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: ST_TO_ADDR
17331: GO 17334
17333: POP
// McMove ( 1 , AM_UTOK_2_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
17334: LD_INT 1
17336: PPUSH
17337: LD_EXP 33
17341: PPUSH
17342: LD_VAR 0 2
17346: PPUSH
17347: LD_INT 5
17349: PUSH
17350: LD_INT 6
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 398
// Am_utoky = 3 ;
17365: LD_ADDR_EXP 70
17369: PUSH
17370: LD_INT 3
17372: ST_TO_ADDR
// end ;
17373: PPOPN 2
17375: END
// every 0 0$19 trigger Am_utoky = 3 do var i ; var cesta ;
17376: LD_EXP 70
17380: PUSH
17381: LD_INT 3
17383: EQUAL
17384: IFFALSE 17756
17386: GO 17388
17388: DISABLE
17389: LD_INT 0
17391: PPUSH
17392: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
17393: LD_EXP 42
17397: PUSH
17398: LD_OWVAR 67
17402: ARRAY
17403: PPUSH
17404: CALL_OW 67
// if mcmillanova_pomsta then
17408: LD_EXP 71
17412: IFFALSE 17416
// exit ;
17414: GO 17756
// for i in AM_UTOK_3_LIST do
17416: LD_ADDR_VAR 0 1
17420: PUSH
17421: LD_EXP 34
17425: PUSH
17426: FOR_IN
17427: IFFALSE 17446
// PlaceUnitArea ( i , Am_enter , false ) ;
17429: LD_VAR 0 1
17433: PPUSH
17434: LD_INT 19
17436: PPUSH
17437: LD_INT 0
17439: PPUSH
17440: CALL_OW 49
17444: GO 17426
17446: POP
17447: POP
// case cislo_baze of 1 :
17448: LD_EXP 8
17452: PUSH
17453: LD_INT 1
17455: DOUBLE
17456: EQUAL
17457: IFTRUE 17461
17459: GO 17526
17461: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 96 , 104 ] , [ 70 , 100 ] , [ 49 , 78 ] ] ; 2 :
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_INT 40
17469: PUSH
17470: LD_INT 46
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 70
17479: PUSH
17480: LD_INT 62
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 96
17489: PUSH
17490: LD_INT 104
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 70
17499: PUSH
17500: LD_INT 100
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 49
17509: PUSH
17510: LD_INT 78
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: ST_TO_ADDR
17524: GO 17717
17526: LD_INT 2
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17610
17534: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 59 , 76 ] , [ 59 , 85 ] , [ 71 , 99 ] , [ 97 , 103 ] ] ; 3 :
17535: LD_ADDR_VAR 0 2
17539: PUSH
17540: LD_INT 40
17542: PUSH
17543: LD_INT 47
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 61
17552: PUSH
17553: LD_INT 52
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 59
17562: PUSH
17563: LD_INT 76
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 59
17572: PUSH
17573: LD_INT 85
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 71
17582: PUSH
17583: LD_INT 99
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 97
17592: PUSH
17593: LD_INT 103
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: ST_TO_ADDR
17608: GO 17717
17610: LD_INT 3
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17618
17616: GO 17716
17618: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 87 , 42 ] , [ 84 , 20 ] , [ 100 , 30 ] , [ 128 , 41 ] , [ 139 , 45 ] , [ 148 , 65 ] ] ; end ;
17619: LD_ADDR_VAR 0 2
17623: PUSH
17624: LD_INT 40
17626: PUSH
17627: LD_INT 47
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 61
17636: PUSH
17637: LD_INT 52
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 87
17646: PUSH
17647: LD_INT 42
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 84
17656: PUSH
17657: LD_INT 20
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 100
17666: PUSH
17667: LD_INT 30
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 128
17676: PUSH
17677: LD_INT 41
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 139
17686: PUSH
17687: LD_INT 45
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 148
17696: PUSH
17697: LD_INT 65
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: ST_TO_ADDR
17714: GO 17717
17716: POP
// McMove ( 1 , AM_UTOK_3_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
17717: LD_INT 1
17719: PPUSH
17720: LD_EXP 34
17724: PPUSH
17725: LD_VAR 0 2
17729: PPUSH
17730: LD_INT 5
17732: PUSH
17733: LD_INT 6
17735: PUSH
17736: LD_INT 3
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 398
// Am_utoky = 4 ;
17748: LD_ADDR_EXP 70
17752: PUSH
17753: LD_INT 4
17755: ST_TO_ADDR
// end ;
17756: PPOPN 2
17758: END
// every 0 0$19 trigger mcmillanova_pomsta marked 999 do var units ; var i , pom ; var cesta ;
17759: LD_EXP 71
17763: IFFALSE 18064
17765: GO 17767
17767: DISABLE
17768: LD_INT 0
17770: PPUSH
17771: PPUSH
17772: PPUSH
17773: PPUSH
// begin cesta = [ [ 74 , 52 ] ] ;
17774: LD_ADDR_VAR 0 4
17778: PUSH
17779: LD_INT 74
17781: PUSH
17782: LD_INT 52
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: ST_TO_ADDR
// units = create_JMM_revange ;
17792: LD_ADDR_VAR 0 1
17796: PUSH
17797: CALL 9824 0 0
17801: ST_TO_ADDR
// for i in units do
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_VAR 0 1
17811: PUSH
17812: FOR_IN
17813: IFFALSE 17832
// PlaceUnitArea ( i , JMM_revenge , false ) ;
17815: LD_VAR 0 2
17819: PPUSH
17820: LD_INT 29
17822: PPUSH
17823: LD_INT 0
17825: PPUSH
17826: CALL_OW 49
17830: GO 17812
17832: POP
17833: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
17834: LD_ADDR_VAR 0 3
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_EXP 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 21
17856: PUSH
17857: LD_INT 2
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 21
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PPUSH
17883: CALL_OW 69
17887: ST_TO_ADDR
// for i in pom do
17888: LD_ADDR_VAR 0 2
17892: PUSH
17893: LD_VAR 0 3
17897: PUSH
17898: FOR_IN
17899: IFFALSE 17941
// cesta = cesta ^ [ [ GetX ( i ) , GetY ( i ) ] ] ;
17901: LD_ADDR_VAR 0 4
17905: PUSH
17906: LD_VAR 0 4
17910: PUSH
17911: LD_VAR 0 2
17915: PPUSH
17916: CALL_OW 250
17920: PUSH
17921: LD_VAR 0 2
17925: PPUSH
17926: CALL_OW 251
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: EMPTY
17936: LIST
17937: ADD
17938: ST_TO_ADDR
17939: GO 17898
17941: POP
17942: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_INT 22
17950: PUSH
17951: LD_EXP 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 21
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: ST_TO_ADDR
// for i in pom do
17979: LD_ADDR_VAR 0 2
17983: PUSH
17984: LD_VAR 0 3
17988: PUSH
17989: FOR_IN
17990: IFFALSE 18032
// cesta = cesta ^ [ [ GetX ( i ) , GetY ( i ) ] ] ;
17992: LD_ADDR_VAR 0 4
17996: PUSH
17997: LD_VAR 0 4
18001: PUSH
18002: LD_VAR 0 2
18006: PPUSH
18007: CALL_OW 250
18011: PUSH
18012: LD_VAR 0 2
18016: PPUSH
18017: CALL_OW 251
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: ADD
18029: ST_TO_ADDR
18030: GO 17989
18032: POP
18033: POP
// McMove ( 1 , units , cesta , [ mc_move_agressive , mc_move_dontcapture ] ) ;
18034: LD_INT 1
18036: PPUSH
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_VAR 0 4
18046: PPUSH
18047: LD_INT 6
18049: PUSH
18050: LD_INT 5
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PPUSH
18057: CALL_OW 398
// enable ( 998 ) ;
18061: LD_INT 998
18063: ENABLE_MARKED
// end ;
18064: PPOPN 4
18066: END
// every 0 0$13 marked 998 do
18067: GO 18069
18069: DISABLE
// begin wait ( wait_mcmillanova_pomsta [ difficulty ] ) ;
18070: LD_EXP 48
18074: PUSH
18075: LD_OWVAR 67
18079: ARRAY
18080: PPUSH
18081: CALL_OW 67
// enable ( 999 ) ;
18085: LD_INT 999
18087: ENABLE_MARKED
// end ;
18088: END
// every 0 0$13 trigger Am_utoky = 4 do
18089: LD_EXP 70
18093: PUSH
18094: LD_INT 4
18096: EQUAL
18097: IFFALSE 18449
18099: GO 18101
18101: DISABLE
// begin wait ( cas_na_odchod_vedcu [ difficulty ] ) ;
18102: LD_EXP 46
18106: PUSH
18107: LD_OWVAR 67
18111: ARRAY
18112: PPUSH
18113: CALL_OW 67
// cekej_na_utok ;
18117: CALL 20608 0 0
// ComExitBuilding ( VEDCI1 ) ;
18121: LD_EXP 62
18125: PPUSH
18126: CALL_OW 122
// McMove ( 1 , VEDCI1 , [ [ 118 , 60 ] , [ 113 , 73 ] , [ 98 , 74 ] , [ 87 , 42 ] , [ 82 , 33 ] , [ 67 , 2 ] ] , [ ] ) ;
18130: LD_INT 1
18132: PPUSH
18133: LD_EXP 62
18137: PPUSH
18138: LD_INT 118
18140: PUSH
18141: LD_INT 60
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 113
18150: PUSH
18151: LD_INT 73
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 98
18160: PUSH
18161: LD_INT 74
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 87
18170: PUSH
18171: LD_INT 42
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 82
18180: PUSH
18181: LD_INT 33
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 67
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: PPUSH
18206: EMPTY
18207: PPUSH
18208: CALL_OW 398
// ComExitBuilding ( VEDCI2 ) ;
18212: LD_EXP 63
18216: PPUSH
18217: CALL_OW 122
// wait ( 0 0$30 ) ;
18221: LD_INT 1050
18223: PPUSH
18224: CALL_OW 67
// McMove ( 1 , VEDCI2 , [ [ 88 , 10 ] , [ 85 , 42 ] , [ 93 , 57 ] , [ 62 , 50 ] , [ 43 , 31 ] , [ 24 , 22 ] , [ 30 , 40 ] , [ 15 , 29 ] ] , [ ] ) ;
18228: LD_INT 1
18230: PPUSH
18231: LD_EXP 63
18235: PPUSH
18236: LD_INT 88
18238: PUSH
18239: LD_INT 10
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 85
18248: PUSH
18249: LD_INT 42
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 93
18258: PUSH
18259: LD_INT 57
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 62
18268: PUSH
18269: LD_INT 50
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 43
18278: PUSH
18279: LD_INT 31
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 24
18288: PUSH
18289: LD_INT 22
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 30
18298: PUSH
18299: LD_INT 40
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 15
18308: PUSH
18309: LD_INT 29
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: PPUSH
18326: EMPTY
18327: PPUSH
18328: CALL_OW 398
// ComExitBuilding ( VEDCI3 ) ;
18332: LD_EXP 64
18336: PPUSH
18337: CALL_OW 122
// wait ( 0 0$30 ) ;
18341: LD_INT 1050
18343: PPUSH
18344: CALL_OW 67
// McMove ( 1 , VEDCI3 , [ [ 101 , 46 ] , [ 112 , 75 ] , [ 90 , 90 ] , [ 70 , 83 ] , [ 54 , 82 ] , [ 32 , 44 ] , [ 16 , 28 ] ] , [ ] ) ;
18348: LD_INT 1
18350: PPUSH
18351: LD_EXP 64
18355: PPUSH
18356: LD_INT 101
18358: PUSH
18359: LD_INT 46
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 112
18368: PUSH
18369: LD_INT 75
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 90
18378: PUSH
18379: LD_INT 90
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 70
18388: PUSH
18389: LD_INT 83
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 54
18398: PUSH
18399: LD_INT 82
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 32
18408: PUSH
18409: LD_INT 44
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 16
18418: PUSH
18419: LD_INT 28
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: PPUSH
18435: EMPTY
18436: PPUSH
18437: CALL_OW 398
// Am_utoky = 5 ;
18441: LD_ADDR_EXP 70
18445: PUSH
18446: LD_INT 5
18448: ST_TO_ADDR
// end ;
18449: END
// every 0 0$1 trigger Am_utoky = 5 do var pom , i ;
18450: LD_EXP 70
18454: PUSH
18455: LD_INT 5
18457: EQUAL
18458: IFFALSE 18640
18460: GO 18462
18462: DISABLE
18463: LD_INT 0
18465: PPUSH
18466: PPUSH
// begin pom = FilterUnitsInArea ( Sci_ex_2 , [ [ f_side , Amici ] , [ f_class , class_scientistic ] ] ) ;
18467: LD_ADDR_VAR 0 1
18471: PUSH
18472: LD_INT 21
18474: PPUSH
18475: LD_INT 22
18477: PUSH
18478: LD_EXP 2
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 25
18489: PUSH
18490: LD_INT 4
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PPUSH
18501: CALL_OW 70
18505: ST_TO_ADDR
// if pom > 0 then
18506: LD_VAR 0 1
18510: PUSH
18511: LD_INT 0
18513: GREATER
18514: IFFALSE 18553
// begin for i in pom do
18516: LD_ADDR_VAR 0 2
18520: PUSH
18521: LD_VAR 0 1
18525: PUSH
18526: FOR_IN
18527: IFFALSE 18540
// RemoveUnit ( i ) ;
18529: LD_VAR 0 2
18533: PPUSH
18534: CALL_OW 64
18538: GO 18526
18540: POP
18541: POP
// wait ( 0 0$2 ) ;
18542: LD_INT 70
18544: PPUSH
18545: CALL_OW 67
// prohra_vedci ;
18549: CALL 156 0 0
// end ; pom = FilterUnitsInArea ( Sci_ex_3 , [ [ f_side , Amici ] , [ f_class , class_scientistic ] ] ) ;
18553: LD_ADDR_VAR 0 1
18557: PUSH
18558: LD_INT 22
18560: PPUSH
18561: LD_INT 22
18563: PUSH
18564: LD_EXP 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 25
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PPUSH
18587: CALL_OW 70
18591: ST_TO_ADDR
// if pom > 0 then
18592: LD_VAR 0 1
18596: PUSH
18597: LD_INT 0
18599: GREATER
18600: IFFALSE 18639
// begin for i in pom do
18602: LD_ADDR_VAR 0 2
18606: PUSH
18607: LD_VAR 0 1
18611: PUSH
18612: FOR_IN
18613: IFFALSE 18626
// RemoveUnit ( i ) ;
18615: LD_VAR 0 2
18619: PPUSH
18620: CALL_OW 64
18624: GO 18612
18626: POP
18627: POP
// wait ( 0 0$2 ) ;
18628: LD_INT 70
18630: PPUSH
18631: CALL_OW 67
// prohra_vedci ;
18635: CALL 156 0 0
// end ; enable ;
18639: ENABLE
// end ;
18640: PPOPN 2
18642: END
// function opravovani_budov ; var pom , pom1 , i ; begin
18643: LD_INT 0
18645: PPUSH
18646: PPUSH
18647: PPUSH
18648: PPUSH
// pom1 = [ ] ;
18649: LD_ADDR_VAR 0 3
18653: PUSH
18654: EMPTY
18655: ST_TO_ADDR
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: LD_INT 13
18663: PPUSH
18664: LD_INT 22
18666: PUSH
18667: LD_EXP 4
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 21
18678: PUSH
18679: LD_INT 3
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 70
18694: ST_TO_ADDR
// for i in pom do
18695: LD_ADDR_VAR 0 4
18699: PUSH
18700: LD_VAR 0 2
18704: PUSH
18705: FOR_IN
18706: IFFALSE 18741
// if GetLives ( i ) < 1000 then
18708: LD_VAR 0 4
18712: PPUSH
18713: CALL_OW 256
18717: PUSH
18718: LD_INT 1000
18720: LESS
18721: IFFALSE 18739
// pom1 = pom1 ^ i ;
18723: LD_ADDR_VAR 0 3
18727: PUSH
18728: LD_VAR 0 3
18732: PUSH
18733: LD_VAR 0 4
18737: ADD
18738: ST_TO_ADDR
18739: GO 18705
18741: POP
18742: POP
// if pom1 > 0 then
18743: LD_VAR 0 3
18747: PUSH
18748: LD_INT 0
18750: GREATER
18751: IFFALSE 18866
// begin if IsInUnit ( Am_opoce [ 1 ] ) or IsInUnit ( Am_opoce [ 2 ] ) or IsInUnit ( Am_opoce [ 3 ] ) then
18753: LD_EXP 65
18757: PUSH
18758: LD_INT 1
18760: ARRAY
18761: PPUSH
18762: CALL_OW 310
18766: PUSH
18767: LD_EXP 65
18771: PUSH
18772: LD_INT 2
18774: ARRAY
18775: PPUSH
18776: CALL_OW 310
18780: OR
18781: PUSH
18782: LD_EXP 65
18786: PUSH
18787: LD_INT 3
18789: ARRAY
18790: PPUSH
18791: CALL_OW 310
18795: OR
18796: IFFALSE 18866
// begin ComExitBuilding ( Am_opoce ) ;
18798: LD_EXP 65
18802: PPUSH
18803: CALL_OW 122
// for i in pom1 do
18807: LD_ADDR_VAR 0 4
18811: PUSH
18812: LD_VAR 0 3
18816: PUSH
18817: FOR_IN
18818: IFFALSE 18836
// AddComRepairBuilding ( Am_opoce , i ) ;
18820: LD_EXP 65
18824: PPUSH
18825: LD_VAR 0 4
18829: PPUSH
18830: CALL_OW 190
18834: GO 18817
18836: POP
18837: POP
// AddComEnterUnit ( Am_opoce , Am_dep ) ;
18838: LD_EXP 65
18842: PPUSH
18843: LD_INT 45
18845: PPUSH
18846: CALL_OW 180
// ComEnterUnit ( Am_opoce [ 4 ] , Am_dep ) ;
18850: LD_EXP 65
18854: PUSH
18855: LD_INT 4
18857: ARRAY
18858: PPUSH
18859: LD_INT 45
18861: PPUSH
18862: CALL_OW 120
// end ; end end ;
18866: LD_VAR 0 1
18870: RET
// every 0 0$10 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) < max_pocet_aut [ difficulty ] do var design ;
18871: LD_INT 13
18873: PPUSH
18874: LD_INT 22
18876: PUSH
18877: LD_EXP 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 21
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL_OW 70
18904: PUSH
18905: LD_EXP 43
18909: PUSH
18910: LD_OWVAR 67
18914: ARRAY
18915: LESS
18916: IFFALSE 19003
18918: GO 18920
18920: DISABLE
18921: LD_INT 0
18923: PPUSH
// begin AddResourceType ( GetBase ( Am_dep ) , mat_cans , 50 ) ;
18924: LD_INT 45
18926: PPUSH
18927: CALL_OW 274
18931: PPUSH
18932: LD_INT 1
18934: PPUSH
18935: LD_INT 50
18937: PPUSH
18938: CALL_OW 276
// if BuildingStatus ( Am_tov ) <> 3 then
18942: LD_INT 175
18944: PPUSH
18945: CALL_OW 461
18949: PUSH
18950: LD_INT 3
18952: NONEQUAL
18953: IFFALSE 19002
// begin design = get_random_design ;
18955: LD_ADDR_VAR 0 1
18959: PUSH
18960: CALL 19006 0 0
18964: ST_TO_ADDR
// ComConstruct ( Am_tov , design [ 1 ] , design [ 2 ] , control_remote , design [ 3 ] ) ;
18965: LD_INT 175
18967: PPUSH
18968: LD_VAR 0 1
18972: PUSH
18973: LD_INT 1
18975: ARRAY
18976: PPUSH
18977: LD_VAR 0 1
18981: PUSH
18982: LD_INT 2
18984: ARRAY
18985: PPUSH
18986: LD_INT 2
18988: PPUSH
18989: LD_VAR 0 1
18993: PUSH
18994: LD_INT 3
18996: ARRAY
18997: PPUSH
18998: CALL_OW 125
// end ; enable ;
19002: ENABLE
// end ;
19003: PPOPN 1
19005: END
// function get_random_design ; var pom1 , pom2 , pom3 ; var aa , aa1 , aa2 , aa3 ; begin
19006: LD_INT 0
19008: PPUSH
19009: PPUSH
19010: PPUSH
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
// pom1 = Rand ( 1 , 5 ) ;
19016: LD_ADDR_VAR 0 2
19020: PUSH
19021: LD_INT 1
19023: PPUSH
19024: LD_INT 5
19026: PPUSH
19027: CALL_OW 12
19031: ST_TO_ADDR
// case pom1 of 1 :
19032: LD_VAR 0 2
19036: PUSH
19037: LD_INT 1
19039: DOUBLE
19040: EQUAL
19041: IFTRUE 19045
19043: GO 19056
19045: POP
// aa3 = us_machine_gun ; 2 :
19046: LD_ADDR_VAR 0 8
19050: PUSH
19051: LD_INT 2
19053: ST_TO_ADDR
19054: GO 19133
19056: LD_INT 2
19058: DOUBLE
19059: EQUAL
19060: IFTRUE 19064
19062: GO 19075
19064: POP
// aa3 = us_light_gun ; 3 :
19065: LD_ADDR_VAR 0 8
19069: PUSH
19070: LD_INT 3
19072: ST_TO_ADDR
19073: GO 19133
19075: LD_INT 3
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19094
19083: POP
// aa3 = us_gatling_gun ; 4 :
19084: LD_ADDR_VAR 0 8
19088: PUSH
19089: LD_INT 4
19091: ST_TO_ADDR
19092: GO 19133
19094: LD_INT 4
19096: DOUBLE
19097: EQUAL
19098: IFTRUE 19102
19100: GO 19113
19102: POP
// aa3 = us_double_gun ; 5 :
19103: LD_ADDR_VAR 0 8
19107: PUSH
19108: LD_INT 5
19110: ST_TO_ADDR
19111: GO 19133
19113: LD_INT 5
19115: DOUBLE
19116: EQUAL
19117: IFTRUE 19121
19119: GO 19132
19121: POP
// aa3 = us_heavy_gun ; end ;
19122: LD_ADDR_VAR 0 8
19126: PUSH
19127: LD_INT 6
19129: ST_TO_ADDR
19130: GO 19133
19132: POP
// if pom1 = 5 then
19133: LD_VAR 0 2
19137: PUSH
19138: LD_INT 5
19140: EQUAL
19141: IFFALSE 19153
// pom2 = 4 else
19143: LD_ADDR_VAR 0 3
19147: PUSH
19148: LD_INT 4
19150: ST_TO_ADDR
19151: GO 19204
// if pom1 in [ 3 , 4 ] then
19153: LD_VAR 0 2
19157: PUSH
19158: LD_INT 3
19160: PUSH
19161: LD_INT 4
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: IN
19168: IFFALSE 19188
// pom2 = Rand ( 2 , 4 ) else
19170: LD_ADDR_VAR 0 3
19174: PUSH
19175: LD_INT 2
19177: PPUSH
19178: LD_INT 4
19180: PPUSH
19181: CALL_OW 12
19185: ST_TO_ADDR
19186: GO 19204
// pom2 = Rand ( 1 , 4 ) ;
19188: LD_ADDR_VAR 0 3
19192: PUSH
19193: LD_INT 1
19195: PPUSH
19196: LD_INT 4
19198: PPUSH
19199: CALL_OW 12
19203: ST_TO_ADDR
// case pom2 of 1 :
19204: LD_VAR 0 3
19208: PUSH
19209: LD_INT 1
19211: DOUBLE
19212: EQUAL
19213: IFTRUE 19217
19215: GO 19228
19217: POP
// aa1 = us_light_wheeled ; 2 :
19218: LD_ADDR_VAR 0 6
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
19226: GO 19286
19228: LD_INT 2
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19247
19236: POP
// aa1 = us_medium_wheeled ; 3 :
19237: LD_ADDR_VAR 0 6
19241: PUSH
19242: LD_INT 2
19244: ST_TO_ADDR
19245: GO 19286
19247: LD_INT 3
19249: DOUBLE
19250: EQUAL
19251: IFTRUE 19255
19253: GO 19266
19255: POP
// aa1 = us_medium_tracked ; 4 :
19256: LD_ADDR_VAR 0 6
19260: PUSH
19261: LD_INT 3
19263: ST_TO_ADDR
19264: GO 19286
19266: LD_INT 4
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19285
19274: POP
// aa1 = us_heavy_tracked ; end ;
19275: LD_ADDR_VAR 0 6
19279: PUSH
19280: LD_INT 4
19282: ST_TO_ADDR
19283: GO 19286
19285: POP
// if pom2 <> 4 then
19286: LD_VAR 0 3
19290: PUSH
19291: LD_INT 4
19293: NONEQUAL
19294: IFFALSE 19314
// pom3 = Rand ( 1 , 3 ) else
19296: LD_ADDR_VAR 0 4
19300: PUSH
19301: LD_INT 1
19303: PPUSH
19304: LD_INT 3
19306: PPUSH
19307: CALL_OW 12
19311: ST_TO_ADDR
19312: GO 19330
// pom3 = Rand ( 2 , 3 ) ;
19314: LD_ADDR_VAR 0 4
19318: PUSH
19319: LD_INT 2
19321: PPUSH
19322: LD_INT 3
19324: PPUSH
19325: CALL_OW 12
19329: ST_TO_ADDR
// case pom3 of 1 :
19330: LD_VAR 0 4
19334: PUSH
19335: LD_INT 1
19337: DOUBLE
19338: EQUAL
19339: IFTRUE 19343
19341: GO 19354
19343: POP
// aa2 = engine_solar ; 2 :
19344: LD_ADDR_VAR 0 7
19348: PUSH
19349: LD_INT 2
19351: ST_TO_ADDR
19352: GO 19393
19354: LD_INT 2
19356: DOUBLE
19357: EQUAL
19358: IFTRUE 19362
19360: GO 19373
19362: POP
// aa2 = engine_combustion ; 3 :
19363: LD_ADDR_VAR 0 7
19367: PUSH
19368: LD_INT 1
19370: ST_TO_ADDR
19371: GO 19393
19373: LD_INT 3
19375: DOUBLE
19376: EQUAL
19377: IFTRUE 19381
19379: GO 19392
19381: POP
// aa2 = engine_siberite ; end ;
19382: LD_ADDR_VAR 0 7
19386: PUSH
19387: LD_INT 3
19389: ST_TO_ADDR
19390: GO 19393
19392: POP
// aa = [ aa1 , aa2 , aa3 ] ;
19393: LD_ADDR_VAR 0 5
19397: PUSH
19398: LD_VAR 0 6
19402: PUSH
19403: LD_VAR 0 7
19407: PUSH
19408: LD_VAR 0 8
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: ST_TO_ADDR
// result = aa ;
19418: LD_ADDR_VAR 0 1
19422: PUSH
19423: LD_VAR 0 5
19427: ST_TO_ADDR
// end ;
19428: LD_VAR 0 1
19432: RET
// every 0 0$5 trigger IsOK ( Am_snipe ) do var u , sl ;
19433: LD_EXP 69
19437: PPUSH
19438: CALL_OW 302
19442: IFFALSE 19567
19444: GO 19446
19446: DISABLE
19447: LD_INT 0
19449: PPUSH
19450: PPUSH
// begin sl = false ;
19451: LD_ADDR_VAR 0 2
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
// if Attacks ( Am_snipe ) < 0 then
19459: LD_EXP 69
19463: PPUSH
19464: CALL_OW 320
19468: PUSH
19469: LD_INT 0
19471: LESS
19472: IFFALSE 19566
// begin u = Attacks ( Am_snipe ) ;
19474: LD_ADDR_VAR 0 1
19478: PUSH
19479: LD_EXP 69
19483: PPUSH
19484: CALL_OW 320
19488: ST_TO_ADDR
// if GetType ( u ) <> unit_vehicle then
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL_OW 247
19498: PUSH
19499: LD_INT 2
19501: NONEQUAL
19502: IFFALSE 19514
// sl = true else
19504: LD_ADDR_VAR 0 2
19508: PUSH
19509: LD_INT 1
19511: ST_TO_ADDR
19512: GO 19537
// if GetControl ( u ) = control_manual then
19514: LD_VAR 0 1
19518: PPUSH
19519: CALL_OW 263
19523: PUSH
19524: LD_INT 1
19526: EQUAL
19527: IFFALSE 19537
// sl = true ;
19529: LD_ADDR_VAR 0 2
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// if sl then
19537: LD_VAR 0 2
19541: IFFALSE 19566
// if Prob ( 45 ) then
19543: LD_INT 45
19545: PPUSH
19546: CALL_OW 13
19550: IFFALSE 19566
// ComAttackSoporific ( Am_snipe , u ) ;
19552: LD_EXP 69
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 166
// end ; enable ;
19566: ENABLE
// end ;
19567: PPOPN 2
19569: END
// every 0 0$1 do
19570: GO 19572
19572: DISABLE
// begin wait ( cas_prvniho_utoku [ difficulty ] ) ;
19573: LD_EXP 45
19577: PUSH
19578: LD_OWVAR 67
19582: ARRAY
19583: PPUSH
19584: CALL_OW 67
// UTOCENI = true ;
19588: LD_ADDR_LOC 9
19592: PUSH
19593: LD_INT 1
19595: ST_TO_ADDR
// end ;
19596: END
// every 0 0$1 trigger UTOCENI do var pom , i ; var cesty ;
19597: LD_LOC 9
19601: IFFALSE 20348
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
19610: PPUSH
// begin pom = create_pre_attack ;
19611: LD_ADDR_VAR 0 1
19615: PUSH
19616: CALL 10341 0 0
19620: ST_TO_ADDR
// for i in pom do
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_VAR 0 1
19630: PUSH
19631: FOR_IN
19632: IFFALSE 19651
// PlaceUnitArea ( i , Am_enter , false ) ;
19634: LD_VAR 0 2
19638: PPUSH
19639: LD_INT 19
19641: PPUSH
19642: LD_INT 0
19644: PPUSH
19645: CALL_OW 49
19649: GO 19631
19651: POP
19652: POP
// case cislo_baze of 1 :
19653: LD_EXP 8
19657: PUSH
19658: LD_INT 1
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19850
19666: POP
// cesty = [ [ [ 46 , 50 ] , [ 75 , 55 ] , [ 85 , 75 ] , [ 96 , 102 ] , [ 69 , 101 ] , [ 48 , 78 ] ] , [ [ 38 , 43 ] , [ 58 , 54 ] , [ 51 , 80 ] ] , [ [ 46 , 50 ] , [ 75 , 55 ] , [ 85 , 75 ] , [ 96 , 102 ] , [ 69 , 101 ] , [ 48 , 78 ] ] ] ; 2 :
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: LD_INT 46
19674: PUSH
19675: LD_INT 50
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 75
19684: PUSH
19685: LD_INT 55
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 85
19694: PUSH
19695: LD_INT 75
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 96
19704: PUSH
19705: LD_INT 102
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 69
19714: PUSH
19715: LD_INT 101
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 48
19724: PUSH
19725: LD_INT 78
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 38
19742: PUSH
19743: LD_INT 43
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 58
19752: PUSH
19753: LD_INT 54
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 51
19762: PUSH
19763: LD_INT 80
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 46
19777: PUSH
19778: LD_INT 50
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 75
19787: PUSH
19788: LD_INT 55
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 85
19797: PUSH
19798: LD_INT 75
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 96
19807: PUSH
19808: LD_INT 102
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 69
19817: PUSH
19818: LD_INT 101
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 48
19827: PUSH
19828: LD_INT 78
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: ST_TO_ADDR
19848: GO 20279
19850: LD_INT 2
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 20031
19858: POP
// cesty = [ [ [ 40 , 47 ] , [ 61 , 52 ] , [ 59 , 76 ] , [ 59 , 85 ] , [ 71 , 99 ] , [ 97 , 103 ] ] , [ [ 42 , 46 ] , [ 71 , 48 ] , [ 81 , 66 ] , [ 96 , 98 ] ] , [ [ 42 , 46 ] , [ 71 , 48 ] , [ 81 , 66 ] , [ 96 , 98 ] ] ] ; 3 :
19859: LD_ADDR_VAR 0 3
19863: PUSH
19864: LD_INT 40
19866: PUSH
19867: LD_INT 47
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 61
19876: PUSH
19877: LD_INT 52
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 59
19886: PUSH
19887: LD_INT 76
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 59
19896: PUSH
19897: LD_INT 85
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 71
19906: PUSH
19907: LD_INT 99
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 97
19916: PUSH
19917: LD_INT 103
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 42
19934: PUSH
19935: LD_INT 46
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 71
19944: PUSH
19945: LD_INT 48
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 81
19954: PUSH
19955: LD_INT 66
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 96
19964: PUSH
19965: LD_INT 98
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 42
19980: PUSH
19981: LD_INT 46
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 71
19990: PUSH
19991: LD_INT 48
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 81
20000: PUSH
20001: LD_INT 66
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 96
20010: PUSH
20011: LD_INT 98
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: ST_TO_ADDR
20029: GO 20279
20031: LD_INT 3
20033: DOUBLE
20034: EQUAL
20035: IFTRUE 20039
20037: GO 20278
20039: POP
// cesty = [ [ [ 40 , 47 ] , [ 61 , 52 ] , [ 87 , 42 ] , [ 95 , 94 ] , [ 113 , 96 ] , [ 143 , 78 ] , [ 142 , 68 ] , [ 160 , 88 ] ] , [ [ 39 , 43 ] , [ 70 , 49 ] , [ 94 , 93 ] , [ 122 , 93 ] , [ 147 , 64 ] , [ 156 , 88 ] ] , [ [ 39 , 43 ] , [ 70 , 49 ] , [ 94 , 93 ] , [ 122 , 93 ] , [ 147 , 64 ] , [ 156 , 88 ] ] ] ; end ;
20040: LD_ADDR_VAR 0 3
20044: PUSH
20045: LD_INT 40
20047: PUSH
20048: LD_INT 47
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 61
20057: PUSH
20058: LD_INT 52
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 87
20067: PUSH
20068: LD_INT 42
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 95
20077: PUSH
20078: LD_INT 94
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 113
20087: PUSH
20088: LD_INT 96
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 143
20097: PUSH
20098: LD_INT 78
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 142
20107: PUSH
20108: LD_INT 68
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 160
20117: PUSH
20118: LD_INT 88
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 39
20137: PUSH
20138: LD_INT 43
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 70
20147: PUSH
20148: LD_INT 49
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 94
20157: PUSH
20158: LD_INT 93
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 122
20167: PUSH
20168: LD_INT 93
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 147
20177: PUSH
20178: LD_INT 64
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 156
20187: PUSH
20188: LD_INT 88
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 39
20205: PUSH
20206: LD_INT 43
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 70
20215: PUSH
20216: LD_INT 49
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 94
20225: PUSH
20226: LD_INT 93
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 122
20235: PUSH
20236: LD_INT 93
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 147
20245: PUSH
20246: LD_INT 64
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 156
20255: PUSH
20256: LD_INT 88
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: ST_TO_ADDR
20276: GO 20279
20278: POP
// McMove ( 1 , pom , cesty [ Rand ( 1 , 3 ) ] , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
20279: LD_INT 1
20281: PPUSH
20282: LD_VAR 0 1
20286: PPUSH
20287: LD_VAR 0 3
20291: PUSH
20292: LD_INT 1
20294: PPUSH
20295: LD_INT 3
20297: PPUSH
20298: CALL_OW 12
20302: ARRAY
20303: PPUSH
20304: LD_INT 5
20306: PUSH
20307: LD_INT 6
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: PPUSH
20318: CALL_OW 398
// wait ( cas_na_opakovani_preattacku [ difficulty ] ) ;
20322: LD_EXP 51
20326: PUSH
20327: LD_OWVAR 67
20331: ARRAY
20332: PPUSH
20333: CALL_OW 67
// if Am_utoky = 0 then
20337: LD_EXP 70
20341: PUSH
20342: LD_INT 0
20344: EQUAL
20345: IFFALSE 20348
// enable ;
20347: ENABLE
// end ;
20348: PPOPN 3
20350: END
// on VehicleConstructed ( veh , f ) do var pom ;
20351: LD_INT 0
20353: PPUSH
// begin if f = Am_tov then
20354: LD_VAR 0 2
20358: PUSH
20359: LD_INT 175
20361: EQUAL
20362: IFFALSE 20604
// begin pom = Rand ( 1 , 2 ) ;
20364: LD_ADDR_VAR 0 3
20368: PUSH
20369: LD_INT 1
20371: PPUSH
20372: LD_INT 2
20374: PPUSH
20375: CALL_OW 12
20379: ST_TO_ADDR
// case pom of 1 :
20380: LD_VAR 0 3
20384: PUSH
20385: LD_INT 1
20387: DOUBLE
20388: EQUAL
20389: IFTRUE 20393
20391: GO 20494
20393: POP
// if IsOK ( Am_mech [ 1 ] ) then
20394: LD_EXP 67
20398: PUSH
20399: LD_INT 1
20401: ARRAY
20402: PPUSH
20403: CALL_OW 302
20407: IFFALSE 20444
// begin ComLinkTo ( veh , Am_mech [ 1 ] ) ;
20409: LD_VAR 0 1
20413: PPUSH
20414: LD_EXP 67
20418: PUSH
20419: LD_INT 1
20421: ARRAY
20422: PPUSH
20423: CALL_OW 135
// AddComMoveXY ( veh , 89 , 22 ) ;
20427: LD_VAR 0 1
20431: PPUSH
20432: LD_INT 89
20434: PPUSH
20435: LD_INT 22
20437: PPUSH
20438: CALL_OW 171
// end else
20442: GO 20492
// if IsOK ( Am_mech [ 2 ] ) then
20444: LD_EXP 67
20448: PUSH
20449: LD_INT 2
20451: ARRAY
20452: PPUSH
20453: CALL_OW 302
20457: IFFALSE 20492
// begin ComLinkTo ( veh , Am_mech [ 2 ] ) ;
20459: LD_VAR 0 1
20463: PPUSH
20464: LD_EXP 67
20468: PUSH
20469: LD_INT 2
20471: ARRAY
20472: PPUSH
20473: CALL_OW 135
// AddComMoveXY ( veh , 119 , 40 ) ;
20477: LD_VAR 0 1
20481: PPUSH
20482: LD_INT 119
20484: PPUSH
20485: LD_INT 40
20487: PPUSH
20488: CALL_OW 171
// end ; 2 :
20492: GO 20604
20494: LD_INT 2
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20603
20502: POP
// if IsOK ( Am_mech [ 2 ] ) then
20503: LD_EXP 67
20507: PUSH
20508: LD_INT 2
20510: ARRAY
20511: PPUSH
20512: CALL_OW 302
20516: IFFALSE 20553
// begin ComLinkTo ( veh , Am_mech [ 2 ] ) ;
20518: LD_VAR 0 1
20522: PPUSH
20523: LD_EXP 67
20527: PUSH
20528: LD_INT 2
20530: ARRAY
20531: PPUSH
20532: CALL_OW 135
// AddComMoveXY ( veh , 119 , 40 ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: LD_INT 119
20543: PPUSH
20544: LD_INT 40
20546: PPUSH
20547: CALL_OW 171
// end else
20551: GO 20601
// if IsOK ( Am_mech [ 1 ] ) then
20553: LD_EXP 67
20557: PUSH
20558: LD_INT 1
20560: ARRAY
20561: PPUSH
20562: CALL_OW 302
20566: IFFALSE 20601
// begin ComLinkTo ( veh , Am_mech [ 1 ] ) ;
20568: LD_VAR 0 1
20572: PPUSH
20573: LD_EXP 67
20577: PUSH
20578: LD_INT 1
20580: ARRAY
20581: PPUSH
20582: CALL_OW 135
// AddComMoveXY ( veh , 89 , 22 ) ;
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_INT 89
20593: PPUSH
20594: LD_INT 22
20596: PPUSH
20597: CALL_OW 171
// end ; end ;
20601: GO 20604
20603: POP
// end ; enable ;
20604: ENABLE
// end ;
20605: PPOPN 3
20607: END
// function cekej_na_utok ; var utoci ; var i , pom ; var aunits ; begin
20608: LD_INT 0
20610: PPUSH
20611: PPUSH
20612: PPUSH
20613: PPUSH
20614: PPUSH
// utoci = false ;
20615: LD_ADDR_VAR 0 2
20619: PUSH
20620: LD_INT 0
20622: ST_TO_ADDR
// aunits = FilterUnitsInArea ( Am_base_at , [ [ f_side , Amici ] ] ) ;
20623: LD_ADDR_VAR 0 5
20627: PUSH
20628: LD_INT 25
20630: PPUSH
20631: LD_INT 22
20633: PUSH
20634: LD_EXP 2
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: EMPTY
20644: LIST
20645: PPUSH
20646: CALL_OW 70
20650: ST_TO_ADDR
// while not utoci do
20651: LD_VAR 0 2
20655: NOT
20656: IFFALSE 20749
// begin pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
20658: LD_ADDR_VAR 0 4
20662: PUSH
20663: LD_INT 22
20665: PUSH
20666: LD_EXP 1
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: PPUSH
20678: CALL_OW 69
20682: ST_TO_ADDR
// for i in pom do
20683: LD_ADDR_VAR 0 3
20687: PUSH
20688: LD_VAR 0 4
20692: PUSH
20693: FOR_IN
20694: IFFALSE 20738
// if Attacks ( i ) <> 0 then
20696: LD_VAR 0 3
20700: PPUSH
20701: CALL_OW 320
20705: PUSH
20706: LD_INT 0
20708: NONEQUAL
20709: IFFALSE 20736
// if Attacks ( i ) in aunits then
20711: LD_VAR 0 3
20715: PPUSH
20716: CALL_OW 320
20720: PUSH
20721: LD_VAR 0 5
20725: IN
20726: IFFALSE 20736
// utoci = true ;
20728: LD_ADDR_VAR 0 2
20732: PUSH
20733: LD_INT 1
20735: ST_TO_ADDR
20736: GO 20693
20738: POP
20739: POP
// wait ( 0 0$10 ) ;
20740: LD_INT 350
20742: PPUSH
20743: CALL_OW 67
// end ;
20747: GO 20651
// wait ( doba_od_utoku_k_uteku_vedcu [ difficulty ] ) ;
20749: LD_EXP 47
20753: PUSH
20754: LD_OWVAR 67
20758: ARRAY
20759: PPUSH
20760: CALL_OW 67
// end ;
20764: LD_VAR 0 1
20768: RET
// export function test_na_vedce ; var i ; var OK ; begin
20769: LD_INT 0
20771: PPUSH
20772: PPUSH
20773: PPUSH
// OK = true ;
20774: LD_ADDR_VAR 0 3
20778: PUSH
20779: LD_INT 1
20781: ST_TO_ADDR
// for i in VEDCI1 do
20782: LD_ADDR_VAR 0 2
20786: PUSH
20787: LD_EXP 62
20791: PUSH
20792: FOR_IN
20793: IFFALSE 20816
// if IsLive ( i ) then
20795: LD_VAR 0 2
20799: PPUSH
20800: CALL_OW 300
20804: IFFALSE 20814
// OK = false ;
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
20814: GO 20792
20816: POP
20817: POP
// for i in VEDCI2 do
20818: LD_ADDR_VAR 0 2
20822: PUSH
20823: LD_EXP 63
20827: PUSH
20828: FOR_IN
20829: IFFALSE 20852
// if IsLive ( i ) then
20831: LD_VAR 0 2
20835: PPUSH
20836: CALL_OW 300
20840: IFFALSE 20850
// OK = false ;
20842: LD_ADDR_VAR 0 3
20846: PUSH
20847: LD_INT 0
20849: ST_TO_ADDR
20850: GO 20828
20852: POP
20853: POP
// for i in VEDCI3 do
20854: LD_ADDR_VAR 0 2
20858: PUSH
20859: LD_EXP 64
20863: PUSH
20864: FOR_IN
20865: IFFALSE 20888
// if IsLive ( i ) then
20867: LD_VAR 0 2
20871: PPUSH
20872: CALL_OW 300
20876: IFFALSE 20886
// OK = false ;
20878: LD_ADDR_VAR 0 3
20882: PUSH
20883: LD_INT 0
20885: ST_TO_ADDR
20886: GO 20864
20888: POP
20889: POP
// result := OK ;
20890: LD_ADDR_VAR 0 1
20894: PUSH
20895: LD_VAR 0 3
20899: ST_TO_ADDR
// end ; end_of_file
20900: LD_VAR 0 1
20904: RET
// every 0 0$2 + 0 0$0.1 do
20905: GO 20907
20907: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
20908: LD_INT 22
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 25
20923: PUSH
20924: LD_INT 12
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 25
20933: PUSH
20934: LD_INT 16
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 25
20943: PUSH
20944: LD_INT 15
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 25
20953: PUSH
20954: LD_INT 17
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PPUSH
20972: CALL_OW 69
20976: PUSH
20977: LD_INT 22
20979: PUSH
20980: LD_INT 3
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 3
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 25
21005: PUSH
21006: LD_INT 12
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 25
21015: PUSH
21016: LD_INT 16
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 25
21025: PUSH
21026: LD_INT 15
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 25
21035: PUSH
21036: LD_INT 17
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: GREATER
21064: IFFALSE 21075
// begin SetAchievement ( ACH_POTA ) ;
21066: LD_STRING ACH_POTA
21068: PPUSH
21069: CALL_OW 543
// exit ;
21073: GO 21076
// end ; enable ;
21075: ENABLE
// end ;
21076: END
