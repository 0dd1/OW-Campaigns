// export You , Amici , Amici2 , Arabi ; export everybody ; starting begin You = 3 ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 3
   7: ST_TO_ADDR
// Amici = 1 ;
   8: LD_ADDR_EXP 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// Arabi = 2 ;
  16: LD_ADDR_EXP 4
  20: PUSH
  21: LD_INT 2
  23: ST_TO_ADDR
// Amici2 = 4 ;
  24: LD_ADDR_EXP 3
  28: PUSH
  29: LD_INT 4
  31: ST_TO_ADDR
// RandomizeAll ;
  32: CALL_OW 11
// debug_strings = [ ] ;
  36: LD_ADDR_OWVAR 48
  40: PUSH
  41: EMPTY
  42: ST_TO_ADDR
// InitBc ;
  43: CALL_OW 21
// InitHc ;
  47: CALL_OW 19
// InitUc ;
  51: CALL_OW 18
// InitVc ;
  55: CALL_OW 20
// SET_DIFFICULTY ;
  59: CALL 10976 0 0
// load_postav ;
  63: CALL 1179 0 0
// load_promenne ;
  67: CALL 1448 0 0
// vytvor_araby ;
  71: CALL 7583 0 0
// vytvor_amiky ;
  75: CALL 7842 0 0
// cislo_baze = vyber_misto_pro_zakladnu ;
  79: LD_ADDR_EXP 8
  83: PUSH
  84: CALL 1588 0 0
  88: ST_TO_ADDR
// place_resource ;
  89: CALL 4324 0 0
// Ru_enter = vyber_lidi_pro_misi ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: CALL 5436 0 0
 102: ST_TO_ADDR
// create_first_utok ;
 103: CALL 8782 0 0
// create_second_utok ;
 107: CALL 9042 0 0
// create_third_utok ;
 111: CALL 9458 0 0
// create_rusky_konvoj ( Ru_enter ) ;
 115: LD_EXP 9
 119: PPUSH
 120: CALL 6847 0 1
// placni_rusy_na_zacatek ;
 124: CALL 4410 0 0
// InGameOff ;
 128: CALL_OW 9
// end ;
 132: END
// on UnitDestroyed ( un ) do begin if un = bur then
 133: LD_VAR 0 1
 137: PUSH
 138: LD_EXP 11
 142: EQUAL
 143: IFFALSE 152
// YouLost ( Burlak ) ;
 145: LD_STRING Burlak
 147: PPUSH
 148: CALL_OW 104
// enable ;
 152: ENABLE
// end ;
 153: PPOPN 1
 155: END
// export function prohra_vedci ; begin
 156: LD_INT 0
 158: PPUSH
// YouLost ( Scientists ) ;
 159: LD_STRING Scientists
 161: PPUSH
 162: CALL_OW 104
// end ;
 166: LD_VAR 0 1
 170: RET
// on EndTheMissionRaised ( void ) do begin end_the_mission_allowed := false ;
 171: LD_ADDR_OWVAR 57
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// konec_mise ;
 179: CALL 186 0 0
// end ;
 183: PPOPN 1
 185: END
// export function konec_mise ; var i , pom , pom1 ; var drv ; var all_people ; var plab ; begin
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
// DisableExclamations ;
 195: CALL_OW 474
// gained_medals := [ ] ;
 199: LD_ADDR_OWVAR 61
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// missing_medals := [ ] ;
 206: LD_ADDR_OWVAR 62
 210: PUSH
 211: EMPTY
 212: ST_TO_ADDR
// if IsOK ( masha ) and GetSide ( masha ) = You then
 213: LD_EXP 10
 217: PPUSH
 218: CALL_OW 302
 222: PUSH
 223: LD_EXP 10
 227: PPUSH
 228: CALL_OW 255
 232: PUSH
 233: LD_EXP 1
 237: EQUAL
 238: AND
 239: IFFALSE 253
// AddMedal ( Masha , 1 ) else
 241: LD_STRING Masha
 243: PPUSH
 244: LD_INT 1
 246: PPUSH
 247: CALL_OW 101
 251: GO 264
// AddMedal ( Masha , - 1 ) ;
 253: LD_STRING Masha
 255: PPUSH
 256: LD_INT 1
 258: NEG
 259: PPUSH
 260: CALL_OW 101
// plab = 0 ;
 264: LD_ADDR_VAR 0 7
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
 272: LD_ADDR_VAR 0 2
 276: PUSH
 277: LD_INT 48
 279: PUSH
 280: LD_INT 55
 282: PUSH
 283: LD_INT 56
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: FOR_IN
 292: IFFALSE 327
// if GetSide ( i ) = You then
 294: LD_VAR 0 2
 298: PPUSH
 299: CALL_OW 255
 303: PUSH
 304: LD_EXP 1
 308: EQUAL
 309: IFFALSE 325
// plab = plab + 1 ;
 311: LD_ADDR_VAR 0 7
 315: PUSH
 316: LD_VAR 0 7
 320: PUSH
 321: LD_INT 1
 323: PLUS
 324: ST_TO_ADDR
 325: GO 291
 327: POP
 328: POP
// if plab >= 3 then
 329: LD_VAR 0 7
 333: PUSH
 334: LD_INT 3
 336: GREATEREQUAL
 337: IFFALSE 351
// AddMedal ( Capture , 1 ) else
 339: LD_STRING Capture
 341: PPUSH
 342: LD_INT 1
 344: PPUSH
 345: CALL_OW 101
 349: GO 362
// AddMedal ( Capture , - 1 ) ;
 351: LD_STRING Capture
 353: PPUSH
 354: LD_INT 1
 356: NEG
 357: PPUSH
 358: CALL_OW 101
// if GetTech ( tech_TauRad , You ) = state_researched or GetTech ( tech_SpacAnom , You ) = state_researched then
 362: LD_INT 28
 364: PPUSH
 365: LD_EXP 1
 369: PPUSH
 370: CALL_OW 321
 374: PUSH
 375: LD_INT 2
 377: EQUAL
 378: PUSH
 379: LD_INT 29
 381: PPUSH
 382: LD_EXP 1
 386: PPUSH
 387: CALL_OW 321
 391: PUSH
 392: LD_INT 2
 394: EQUAL
 395: OR
 396: IFFALSE 410
// AddMedal ( Invention , 1 ) else
 398: LD_STRING Invention
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 101
 408: GO 421
// AddMedal ( Invention , - 1 ) ;
 410: LD_STRING Invention
 412: PPUSH
 413: LD_INT 1
 415: NEG
 416: PPUSH
 417: CALL_OW 101
// GiveMedals ( Main ) ;
 421: LD_STRING Main
 423: PPUSH
 424: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 22
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: LD_INT 21
 447: PUSH
 448: LD_INT 1
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PPUSH
 459: CALL_OW 69
 463: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
 464: LD_ADDR_VAR 0 4
 468: PUSH
 469: LD_INT 22
 471: PUSH
 472: LD_EXP 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 21
 483: PUSH
 484: LD_INT 2
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: ST_TO_ADDR
// for i in pom1 do
 500: LD_ADDR_VAR 0 2
 504: PUSH
 505: LD_VAR 0 4
 509: PUSH
 510: FOR_IN
 511: IFFALSE 570
// if IsDrivenBy ( i ) then
 513: LD_VAR 0 2
 517: PPUSH
 518: CALL_OW 311
 522: IFFALSE 568
// begin drv = IsDrivenBy ( i ) ;
 524: LD_ADDR_VAR 0 5
 528: PUSH
 529: LD_VAR 0 2
 533: PPUSH
 534: CALL_OW 311
 538: ST_TO_ADDR
// if not ( drv in pom ) then
 539: LD_VAR 0 5
 543: PUSH
 544: LD_VAR 0 3
 548: IN
 549: NOT
 550: IFFALSE 568
// pom = pom ^ drv ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_VAR 0 5
 566: ADD
 567: ST_TO_ADDR
// end ;
 568: GO 510
 570: POP
 571: POP
// all_people = pom ;
 572: LD_ADDR_VAR 0 6
 576: PUSH
 577: LD_VAR 0 3
 581: ST_TO_ADDR
// all_people = all_people diff UnitFilter ( all_people , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ) ;
 582: LD_ADDR_VAR 0 6
 586: PUSH
 587: LD_VAR 0 6
 591: PUSH
 592: LD_VAR 0 6
 596: PPUSH
 597: LD_INT 2
 599: PUSH
 600: LD_INT 25
 602: PUSH
 603: LD_INT 12
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 25
 612: PUSH
 613: LD_INT 16
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 25
 622: PUSH
 623: LD_INT 15
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PPUSH
 636: CALL_OW 72
 640: DIFF
 641: ST_TO_ADDR
// RewardPeople ( all_people ) ;
 642: LD_VAR 0 6
 646: PPUSH
 647: CALL_OW 43
// SaveCharacters ( bur , Burlak ) ;
 651: LD_EXP 11
 655: PPUSH
 656: LD_STRING Burlak
 658: PPUSH
 659: CALL_OW 38
// SaveCharacters ( dol , Dolgov ) ;
 663: LD_EXP 12
 667: PPUSH
 668: LD_STRING Dolgov
 670: PPUSH
 671: CALL_OW 38
// SaveCharacters ( kapisto , Kapitsova ) ;
 675: LD_EXP 13
 679: PPUSH
 680: LD_STRING Kapitsova
 682: PPUSH
 683: CALL_OW 38
// SaveCharacters ( petro , Petrosyan ) ;
 687: LD_EXP 14
 691: PPUSH
 692: LD_STRING Petrosyan
 694: PPUSH
 695: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
 699: LD_EXP 15
 703: PPUSH
 704: LD_STRING Popov
 706: PPUSH
 707: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
 711: LD_EXP 16
 715: PPUSH
 716: LD_STRING Belkov
 718: PPUSH
 719: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
 723: LD_EXP 17
 727: PPUSH
 728: LD_STRING Gnyevko
 730: PPUSH
 731: CALL_OW 38
// SaveCharacters ( kiri , Kirilenkova ) ;
 735: LD_EXP 18
 739: PPUSH
 740: LD_STRING Kirilenkova
 742: PPUSH
 743: CALL_OW 38
// SaveCharacters ( koval , Kovalyuk ) ;
 747: LD_EXP 19
 751: PPUSH
 752: LD_STRING Kovalyuk
 754: PPUSH
 755: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
 759: LD_EXP 20
 763: PPUSH
 764: LD_STRING Scholtze
 766: PPUSH
 767: CALL_OW 38
// SaveCharacters ( kuzmov , Kuzmov ) ;
 771: LD_EXP 21
 775: PPUSH
 776: LD_STRING Kuzmov
 778: PPUSH
 779: CALL_OW 38
// SaveCharacters ( karam , Karamazov ) ;
 783: LD_EXP 22
 787: PPUSH
 788: LD_STRING Karamazov
 790: PPUSH
 791: CALL_OW 38
// SaveCharacters ( petrov , Petrovova ) ;
 795: LD_EXP 23
 799: PPUSH
 800: LD_STRING Petrovova
 802: PPUSH
 803: CALL_OW 38
// SaveCharacters ( gleb , Gleb ) ;
 807: LD_EXP 24
 811: PPUSH
 812: LD_STRING Gleb
 814: PPUSH
 815: CALL_OW 38
// SaveCharacters ( lipsch , Lipschin ) ;
 819: LD_EXP 25
 823: PPUSH
 824: LD_STRING Lipschin
 826: PPUSH
 827: CALL_OW 38
// SaveCharacters ( tito , Titov ) ;
 831: LD_EXP 26
 835: PPUSH
 836: LD_STRING Titov
 838: PPUSH
 839: CALL_OW 38
// SaveCharacters ( xavier , Xavier ) ;
 843: LD_EXP 27
 847: PPUSH
 848: LD_STRING Xavier
 850: PPUSH
 851: CALL_OW 38
// SaveCharacters ( obluk , Oblukov ) ;
 855: LD_EXP 28
 859: PPUSH
 860: LD_STRING Oblukov
 862: PPUSH
 863: CALL_OW 38
// SaveCharacters ( kozlov , Kozlov ) ;
 867: LD_EXP 29
 871: PPUSH
 872: LD_STRING Kozlov
 874: PPUSH
 875: CALL_OW 38
// if plab >= 2 then
 879: LD_VAR 0 7
 883: PUSH
 884: LD_INT 2
 886: GREATEREQUAL
 887: IFFALSE 901
// SaveVariable ( true , LabCaptured ) else
 889: LD_INT 1
 891: PPUSH
 892: LD_STRING LabCaptured
 894: PPUSH
 895: CALL_OW 39
 899: GO 911
// SaveVariable ( false , LabCaptured ) ;
 901: LD_INT 0
 903: PPUSH
 904: LD_STRING LabCaptured
 906: PPUSH
 907: CALL_OW 39
// if not IsOK ( masha ) then
 911: LD_EXP 10
 915: PPUSH
 916: CALL_OW 302
 920: NOT
 921: IFFALSE 930
// DeleteVariable ( Masha ) ;
 923: LD_STRING Masha
 925: PPUSH
 926: CALL_OW 41
// SaveVariable ( GetTech ( tech_TauRad , You ) , shifting ) ;
 930: LD_INT 28
 932: PPUSH
 933: LD_EXP 1
 937: PPUSH
 938: CALL_OW 321
 942: PPUSH
 943: LD_STRING shifting
 945: PPUSH
 946: CALL_OW 39
// SaveVariable ( GetTech ( tech_SpacAnom , You ) , slowing ) ;
 950: LD_INT 29
 952: PPUSH
 953: LD_EXP 1
 957: PPUSH
 958: CALL_OW 321
 962: PPUSH
 963: LD_STRING slowing
 965: PPUSH
 966: CALL_OW 39
// pom := [ ] ;
 970: LD_ADDR_VAR 0 3
 974: PUSH
 975: EMPTY
 976: ST_TO_ADDR
// for i in everybody do
 977: LD_ADDR_VAR 0 2
 981: PUSH
 982: LD_EXP 5
 986: PUSH
 987: FOR_IN
 988: IFFALSE 1019
// if IsLive ( i ) then
 990: LD_VAR 0 2
 994: PPUSH
 995: CALL_OW 300
 999: IFFALSE 1017
// pom := pom ^ i ;
1001: LD_ADDR_VAR 0 3
1005: PUSH
1006: LD_VAR 0 3
1010: PUSH
1011: LD_VAR 0 2
1015: ADD
1016: ST_TO_ADDR
1017: GO 987
1019: POP
1020: POP
// pom := pom diff [ bur , dol , kapisto , petro , pop , bel , gny , kiri , koval , schol , kuzmov , karam , petrov , gleb , lipsch , tito , xavier , obluk , kozlov , 0 ] ;
1021: LD_ADDR_VAR 0 3
1025: PUSH
1026: LD_VAR 0 3
1030: PUSH
1031: LD_EXP 11
1035: PUSH
1036: LD_EXP 12
1040: PUSH
1041: LD_EXP 13
1045: PUSH
1046: LD_EXP 14
1050: PUSH
1051: LD_EXP 15
1055: PUSH
1056: LD_EXP 16
1060: PUSH
1061: LD_EXP 17
1065: PUSH
1066: LD_EXP 18
1070: PUSH
1071: LD_EXP 19
1075: PUSH
1076: LD_EXP 20
1080: PUSH
1081: LD_EXP 21
1085: PUSH
1086: LD_EXP 22
1090: PUSH
1091: LD_EXP 23
1095: PUSH
1096: LD_EXP 24
1100: PUSH
1101: LD_EXP 25
1105: PUSH
1106: LD_EXP 26
1110: PUSH
1111: LD_EXP 27
1115: PUSH
1116: LD_EXP 28
1120: PUSH
1121: LD_EXP 29
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: DIFF
1151: ST_TO_ADDR
// SaveCharacters ( pom , survivors3 ) ;
1152: LD_VAR 0 3
1156: PPUSH
1157: LD_STRING survivors3
1159: PPUSH
1160: CALL_OW 38
// YouWin ( ) ;
1164: CALL_OW 103
// EnableExclamations ;
1168: CALL_OW 473
// exit ;
1172: GO 1174
// end ;
1174: LD_VAR 0 1
1178: RET
// function load_postav ; begin
1179: LD_INT 0
1181: PPUSH
// pop = nacti_osobu ( Popov ) ;
1182: LD_ADDR_EXP 15
1186: PUSH
1187: LD_STRING Popov
1189: PPUSH
1190: CALL 7798 0 1
1194: ST_TO_ADDR
// SetSide ( pop , You ) ;
1195: LD_EXP 15
1199: PPUSH
1200: LD_EXP 1
1204: PPUSH
1205: CALL_OW 235
// dol = nacti_osobu ( Dolgov ) ;
1209: LD_ADDR_EXP 12
1213: PUSH
1214: LD_STRING Dolgov
1216: PPUSH
1217: CALL 7798 0 1
1221: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
1222: LD_ADDR_EXP 11
1226: PUSH
1227: LD_STRING Burlak
1229: PPUSH
1230: CALL 7798 0 1
1234: ST_TO_ADDR
// kapisto = nacti_osobu ( Kapitsova ) ;
1235: LD_ADDR_EXP 13
1239: PUSH
1240: LD_STRING Kapitsova
1242: PPUSH
1243: CALL 7798 0 1
1247: ST_TO_ADDR
// petro = nacti_osobu ( Petrosyan ) ;
1248: LD_ADDR_EXP 14
1252: PUSH
1253: LD_STRING Petrosyan
1255: PPUSH
1256: CALL 7798 0 1
1260: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
1261: LD_ADDR_EXP 16
1265: PUSH
1266: LD_STRING Belkov
1268: PPUSH
1269: CALL 7798 0 1
1273: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
1274: LD_ADDR_EXP 17
1278: PUSH
1279: LD_STRING Gnyevko
1281: PPUSH
1282: CALL 7798 0 1
1286: ST_TO_ADDR
// kiri = nacti_osobu ( Kirilenkova ) ;
1287: LD_ADDR_EXP 18
1291: PUSH
1292: LD_STRING Kirilenkova
1294: PPUSH
1295: CALL 7798 0 1
1299: ST_TO_ADDR
// koval = nacti_osobu ( Kovalyuk ) ;
1300: LD_ADDR_EXP 19
1304: PUSH
1305: LD_STRING Kovalyuk
1307: PPUSH
1308: CALL 7798 0 1
1312: ST_TO_ADDR
// schol = nacti_osobu ( Scholtze ) ;
1313: LD_ADDR_EXP 20
1317: PUSH
1318: LD_STRING Scholtze
1320: PPUSH
1321: CALL 7798 0 1
1325: ST_TO_ADDR
// kuzmov = nacti_osobu ( Kuzmov ) ;
1326: LD_ADDR_EXP 21
1330: PUSH
1331: LD_STRING Kuzmov
1333: PPUSH
1334: CALL 7798 0 1
1338: ST_TO_ADDR
// karam = nacti_osobu ( Karamazov ) ;
1339: LD_ADDR_EXP 22
1343: PUSH
1344: LD_STRING Karamazov
1346: PPUSH
1347: CALL 7798 0 1
1351: ST_TO_ADDR
// petrov = nacti_osobu ( Petrovova ) ;
1352: LD_ADDR_EXP 23
1356: PUSH
1357: LD_STRING Petrovova
1359: PPUSH
1360: CALL 7798 0 1
1364: ST_TO_ADDR
// gleb = nacti_osobu ( Gleb ) ;
1365: LD_ADDR_EXP 24
1369: PUSH
1370: LD_STRING Gleb
1372: PPUSH
1373: CALL 7798 0 1
1377: ST_TO_ADDR
// lipsch = nacti_osobu ( Lipschin ) ;
1378: LD_ADDR_EXP 25
1382: PUSH
1383: LD_STRING Lipschin
1385: PPUSH
1386: CALL 7798 0 1
1390: ST_TO_ADDR
// tito = nacti_osobu ( Titov ) ;
1391: LD_ADDR_EXP 26
1395: PUSH
1396: LD_STRING Titov
1398: PPUSH
1399: CALL 7798 0 1
1403: ST_TO_ADDR
// xavier = nacti_osobu ( Xavier ) ;
1404: LD_ADDR_EXP 27
1408: PUSH
1409: LD_STRING Xavier
1411: PPUSH
1412: CALL 7798 0 1
1416: ST_TO_ADDR
// obluk = nacti_osobu ( Oblukov ) ;
1417: LD_ADDR_EXP 28
1421: PUSH
1422: LD_STRING Oblukov
1424: PPUSH
1425: CALL 7798 0 1
1429: ST_TO_ADDR
// kozlov = nacti_osobu ( Kozlov ) ;
1430: LD_ADDR_EXP 29
1434: PUSH
1435: LD_STRING Kozlov
1437: PPUSH
1438: CALL 7798 0 1
1442: ST_TO_ADDR
// end ;
1443: LD_VAR 0 1
1447: RET
// function load_promenne ; begin
1448: LD_INT 0
1450: PPUSH
// masha_l = LoadVariable ( Masha , [ ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun ] ) ;
1451: LD_ADDR_EXP 52
1455: PUSH
1456: LD_STRING Masha
1458: PPUSH
1459: LD_INT 24
1461: PUSH
1462: LD_INT 1
1464: PUSH
1465: LD_INT 1
1467: PUSH
1468: LD_INT 46
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 30
1481: ST_TO_ADDR
// maccepted = LoadVariable ( MercHandedover , true ) ;
1482: LD_ADDR_EXP 53
1486: PUSH
1487: LD_STRING MercHandedover
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: CALL_OW 30
1497: ST_TO_ADDR
// mhandedover = not LoadVariable ( GenscherBetrayed , false ) ;
1498: LD_ADDR_EXP 54
1502: PUSH
1503: LD_STRING GenscherBetrayed
1505: PPUSH
1506: LD_INT 0
1508: PPUSH
1509: CALL_OW 30
1513: NOT
1514: ST_TO_ADDR
// end ; end_of_file
1515: LD_VAR 0 1
1519: RET
// var kecy ; export KECY_s_arabama ; var taurad ; var uz_byly_kecy_o_mashe ; every 0 0$0.1 do var i ;
1520: GO 1522
1522: DISABLE
1523: LD_INT 0
1525: PPUSH
// begin KECY_s_arabama = false ;
1526: LD_ADDR_EXP 6
1530: PUSH
1531: LD_INT 0
1533: ST_TO_ADDR
// taurad = false ;
1534: LD_ADDR_LOC 2
1538: PUSH
1539: LD_INT 0
1541: ST_TO_ADDR
// uz_byly_kecy_o_mashe = false ;
1542: LD_ADDR_LOC 3
1546: PUSH
1547: LD_INT 0
1549: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 4 ] do
1550: LD_ADDR_VAR 0 1
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 3
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: FOR_IN
1574: IFFALSE 1583
// disable ( i ) ;
1576: LD_VAR 0 1
1580: DISABLE_MARKED
1581: GO 1573
1583: POP
1584: POP
// end ;
1585: PPOPN 1
1587: END
// export function vyber_misto_pro_zakladnu ; var pom ; begin
1588: LD_INT 0
1590: PPUSH
1591: PPUSH
// pom = Query ( QStarting ) ;
1592: LD_ADDR_VAR 0 2
1596: PUSH
1597: LD_STRING QStarting
1599: PPUSH
1600: CALL_OW 97
1604: ST_TO_ADDR
// case pom of 1 :
1605: LD_VAR 0 2
1609: PUSH
1610: LD_INT 1
1612: DOUBLE
1613: EQUAL
1614: IFTRUE 1618
1616: GO 1629
1618: POP
// Ru_base = base1 ; 2 :
1619: LD_ADDR_EXP 7
1623: PUSH
1624: LD_INT 1
1626: ST_TO_ADDR
1627: GO 1668
1629: LD_INT 2
1631: DOUBLE
1632: EQUAL
1633: IFTRUE 1637
1635: GO 1648
1637: POP
// Ru_base = base2 ; 3 :
1638: LD_ADDR_EXP 7
1642: PUSH
1643: LD_INT 2
1645: ST_TO_ADDR
1646: GO 1668
1648: LD_INT 3
1650: DOUBLE
1651: EQUAL
1652: IFTRUE 1656
1654: GO 1667
1656: POP
// Ru_base = base3 ; end ;
1657: LD_ADDR_EXP 7
1661: PUSH
1662: LD_INT 3
1664: ST_TO_ADDR
1665: GO 1668
1667: POP
// result = pom ;
1668: LD_ADDR_VAR 0 1
1672: PUSH
1673: LD_VAR 0 2
1677: ST_TO_ADDR
// end ;
1678: LD_VAR 0 1
1682: RET
// export function chmo1 ; begin
1683: LD_INT 0
1685: PPUSH
// wait ( 0 0$0.5 ) ;
1686: LD_INT 18
1688: PPUSH
1689: CALL_OW 67
// SaveForQuickRestart ;
1693: CALL_OW 22
// ChangeMissionObjectives ( MStart ) ;
1697: LD_STRING MStart
1699: PPUSH
1700: CALL_OW 337
// end ;
1704: LD_VAR 0 1
1708: RET
// on Contact ( s1 , s2 ) do begin if s1 = Amici and s2 = You then
1709: LD_VAR 0 1
1713: PUSH
1714: LD_EXP 2
1718: EQUAL
1719: PUSH
1720: LD_VAR 0 2
1724: PUSH
1725: LD_EXP 1
1729: EQUAL
1730: AND
1731: IFFALSE 1920
// begin while kecy do
1733: LD_LOC 1
1737: IFFALSE 1748
// wait ( 0 0$1 ) ;
1739: LD_INT 35
1741: PPUSH
1742: CALL_OW 67
1746: GO 1733
// kecy = true ;
1748: LD_ADDR_LOC 1
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// DialogueOn ;
1756: CALL_OW 6
// Say ( Joan , DJoan-Joan-1 ) ;
1760: LD_EXP 61
1764: PPUSH
1765: LD_STRING DJoan-Joan-1
1767: PPUSH
1768: CALL_OW 88
// Say ( bur , DJoan-Bur-1 ) ;
1772: LD_EXP 11
1776: PPUSH
1777: LD_STRING DJoan-Bur-1
1779: PPUSH
1780: CALL_OW 88
// Say ( Joan , DJoan-Joan-2 ) ;
1784: LD_EXP 61
1788: PPUSH
1789: LD_STRING DJoan-Joan-2
1791: PPUSH
1792: CALL_OW 88
// Say ( bur , DJoan-Bur-2 ) ;
1796: LD_EXP 11
1800: PPUSH
1801: LD_STRING DJoan-Bur-2
1803: PPUSH
1804: CALL_OW 88
// SayRadio ( JMM , DJoan-JMM-2 ) ;
1808: LD_EXP 60
1812: PPUSH
1813: LD_STRING DJoan-JMM-2
1815: PPUSH
1816: CALL_OW 94
// Say ( bur , DJoan-Bur-3 ) ;
1820: LD_EXP 11
1824: PPUSH
1825: LD_STRING DJoan-Bur-3
1827: PPUSH
1828: CALL_OW 88
// SayRadio ( JMM , DJoan-JMM-3 ) ;
1832: LD_EXP 60
1836: PPUSH
1837: LD_STRING DJoan-JMM-3
1839: PPUSH
1840: CALL_OW 94
// DialogueOff ;
1844: CALL_OW 7
// if not KECY_s_arabama then
1848: LD_EXP 6
1852: NOT
1853: IFFALSE 1889
// begin if not maccepted then
1855: LD_EXP 53
1859: NOT
1860: IFFALSE 1867
// enable ( 1 ) else
1862: LD_INT 1
1864: ENABLE_MARKED
1865: GO 1881
// if mhandedover then
1867: LD_EXP 54
1871: IFFALSE 1878
// enable ( 2 ) else
1873: LD_INT 2
1875: ENABLE_MARKED
1876: GO 1881
// enable ( 3 ) ;
1878: LD_INT 3
1880: ENABLE_MARKED
// KECY_s_arabama = true ;
1881: LD_ADDR_EXP 6
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// end ; enable ( 4 ) ;
1889: LD_INT 4
1891: ENABLE_MARKED
// kecy = false ;
1892: LD_ADDR_LOC 1
1896: PUSH
1897: LD_INT 0
1899: ST_TO_ADDR
// Am_utoky = 1 ;
1900: LD_ADDR_EXP 70
1904: PUSH
1905: LD_INT 1
1907: ST_TO_ADDR
// ComExitBuilding ( Joan ) ;
1908: LD_EXP 61
1912: PPUSH
1913: CALL_OW 122
// disable ;
1917: DISABLE
// end else
1918: GO 1921
// enable ;
1920: ENABLE
// end ;
1921: PPOPN 2
1923: END
// every 0 0$1 marked 1 do
1924: GO 1926
1926: DISABLE
// begin wait ( 0 0$5 ) ;
1927: LD_INT 175
1929: PPUSH
1930: CALL_OW 67
// while kecy do
1934: LD_LOC 1
1938: IFFALSE 1949
// wait ( 0 0$1 ) ;
1940: LD_INT 35
1942: PPUSH
1943: CALL_OW 67
1947: GO 1934
// kecy = true ;
1949: LD_ADDR_LOC 1
1953: PUSH
1954: LD_INT 1
1956: ST_TO_ADDR
// DialogueOn ;
1957: CALL_OW 6
// Say ( diet , DArNeutral-Diet-1 ) ;
1961: LD_EXP 55
1965: PPUSH
1966: LD_STRING DArNeutral-Diet-1
1968: PPUSH
1969: CALL_OW 88
// DialogueOff ;
1973: CALL_OW 7
// kecy = false ;
1977: LD_ADDR_LOC 1
1981: PUSH
1982: LD_INT 0
1984: ST_TO_ADDR
// Arabi_vztah = 2 ;
1985: LD_ADDR_EXP 59
1989: PUSH
1990: LD_INT 2
1992: ST_TO_ADDR
// ar_leave_north ;
1993: CALL 11692 0 0
// end ;
1997: END
// every 0 0$1 marked 2 do var pom ;
1998: GO 2000
2000: DISABLE
2001: LD_INT 0
2003: PPUSH
// begin wait ( 0 0$5 ) ;
2004: LD_INT 175
2006: PPUSH
2007: CALL_OW 67
// while kecy do
2011: LD_LOC 1
2015: IFFALSE 2026
// wait ( 0 0$1 ) ;
2017: LD_INT 35
2019: PPUSH
2020: CALL_OW 67
2024: GO 2011
// kecy = true ;
2026: LD_ADDR_LOC 1
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// DialogueOn ;
2034: CALL_OW 6
// SayRadio ( diet , DArHelp-Diet-1 ) ;
2038: LD_EXP 55
2042: PPUSH
2043: LD_STRING DArHelp-Diet-1
2045: PPUSH
2046: CALL_OW 94
// pom = Query ( QArHelp ) ;
2050: LD_ADDR_VAR 0 1
2054: PUSH
2055: LD_STRING QArHelp
2057: PPUSH
2058: CALL_OW 97
2062: ST_TO_ADDR
// case pom of 1 :
2063: LD_VAR 0 1
2067: PUSH
2068: LD_INT 1
2070: DOUBLE
2071: EQUAL
2072: IFTRUE 2076
2074: GO 2127
2076: POP
// begin SayRadio ( bur , DQrArHelp#1-Bur-1 ) ;
2077: LD_EXP 11
2081: PPUSH
2082: LD_STRING DQrArHelp#1-Bur-1
2084: PPUSH
2085: CALL_OW 94
// SayRadio ( diet , DQrArHelp#1-Diet-1 ) ;
2089: LD_EXP 55
2093: PPUSH
2094: LD_STRING DQrArHelp#1-Diet-1
2096: PPUSH
2097: CALL_OW 94
// SayRadio ( bur , DQrArHelp#1-Bur-2 ) ;
2101: LD_EXP 11
2105: PPUSH
2106: LD_STRING DQrArHelp#1-Bur-2
2108: PPUSH
2109: CALL_OW 94
// SayRadio ( diet , DQrArHelp#1-Diet-2 ) ;
2113: LD_EXP 55
2117: PPUSH
2118: LD_STRING DQrArHelp#1-Diet-2
2120: PPUSH
2121: CALL_OW 94
// end ; 2 :
2125: GO 2163
2127: LD_INT 2
2129: DOUBLE
2130: EQUAL
2131: IFTRUE 2135
2133: GO 2162
2135: POP
// begin SayRadio ( bur , DQrArHelp#2-Bur-1 ) ;
2136: LD_EXP 11
2140: PPUSH
2141: LD_STRING DQrArHelp#2-Bur-1
2143: PPUSH
2144: CALL_OW 94
// SayRadio ( diet , DQrArHelp#2-Diet-1 ) ;
2148: LD_EXP 55
2152: PPUSH
2153: LD_STRING DQrArHelp#2-Diet-1
2155: PPUSH
2156: CALL_OW 94
// end ; end ;
2160: GO 2163
2162: POP
// DialogueOff ;
2163: CALL_OW 7
// kecy = false ;
2167: LD_ADDR_LOC 1
2171: PUSH
2172: LD_INT 0
2174: ST_TO_ADDR
// case pom of 1 :
2175: LD_VAR 0 1
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2203
2188: POP
// begin Arabi_vztah = 20 ;
2189: LD_ADDR_EXP 59
2193: PUSH
2194: LD_INT 20
2196: ST_TO_ADDR
// arabi_spojenci ;
2197: CALL 11894 0 0
// end ; 2 :
2201: GO 2227
2203: LD_INT 2
2205: DOUBLE
2206: EQUAL
2207: IFTRUE 2211
2209: GO 2226
2211: POP
// begin Arabi_vztah = 3 ;
2212: LD_ADDR_EXP 59
2216: PUSH
2217: LD_INT 3
2219: ST_TO_ADDR
// arabi_north_okamzite ;
2220: CALL 11419 0 0
// end ; end ;
2224: GO 2227
2226: POP
// end ;
2227: PPOPN 1
2229: END
// every 0 0$1 marked 3 do
2230: GO 2232
2232: DISABLE
// begin wait ( 0 0$5 ) ;
2233: LD_INT 175
2235: PPUSH
2236: CALL_OW 67
// while kecy do
2240: LD_LOC 1
2244: IFFALSE 2255
// wait ( 0 0$1 ) ;
2246: LD_INT 35
2248: PPUSH
2249: CALL_OW 67
2253: GO 2240
// kecy = true ;
2255: LD_ADDR_LOC 1
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// DialogueOn ;
2263: CALL_OW 6
// SayRadio ( diet , DArHostile-Diet-1 ) ;
2267: LD_EXP 55
2271: PPUSH
2272: LD_STRING DArHostile-Diet-1
2274: PPUSH
2275: CALL_OW 94
// Arabi_vztah = 0 ;
2279: LD_ADDR_EXP 59
2283: PUSH
2284: LD_INT 0
2286: ST_TO_ADDR
// arabi_ally_amici ;
2287: CALL 11936 0 0
// DialogueOff ;
2291: CALL_OW 7
// kecy = false ;
2295: LD_ADDR_LOC 1
2299: PUSH
2300: LD_INT 0
2302: ST_TO_ADDR
// end ;
2303: END
// every 0 0$15 marked 4 do
2304: GO 2306
2306: DISABLE
// begin wait ( 0 0$20 ) ;
2307: LD_INT 700
2309: PPUSH
2310: CALL_OW 67
// while kecy do
2314: LD_LOC 1
2318: IFFALSE 2329
// wait ( 0 0$1 ) ;
2320: LD_INT 35
2322: PPUSH
2323: CALL_OW 67
2327: GO 2314
// kecy = true ;
2329: LD_ADDR_LOC 1
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// DialogueOn ;
2337: CALL_OW 6
// SayRadio ( pop , DCapture-Pop-1 ) ;
2341: LD_EXP 15
2345: PPUSH
2346: LD_STRING DCapture-Pop-1
2348: PPUSH
2349: CALL_OW 94
// ChangeMissionObjectives ( MCapture ) ;
2353: LD_STRING MCapture
2355: PPUSH
2356: CALL_OW 337
// DialogueOff ;
2360: CALL_OW 7
// kecy = false ;
2364: LD_ADDR_LOC 1
2368: PUSH
2369: LD_INT 0
2371: ST_TO_ADDR
// end ;
2372: END
// on UnitGoesToRed ( un ) do begin if un = Joan then
2373: LD_VAR 0 1
2377: PUSH
2378: LD_EXP 61
2382: EQUAL
2383: IFFALSE 2477
// begin DialogueOn ;
2385: CALL_OW 6
// CenterNowOnUnits ( Joan ) ;
2389: LD_EXP 61
2393: PPUSH
2394: CALL_OW 87
// ForceSay ( Joan , DJoanDies-Joan-1 ) ;
2398: LD_EXP 61
2402: PPUSH
2403: LD_STRING DJoanDies-Joan-1
2405: PPUSH
2406: CALL_OW 91
// SayRadio ( JMM , DJoanDies-JMM-1 ) ;
2410: LD_EXP 60
2414: PPUSH
2415: LD_STRING DJoanDies-JMM-1
2417: PPUSH
2418: CALL_OW 94
// wait ( 0 0$1 ) ;
2422: LD_INT 35
2424: PPUSH
2425: CALL_OW 67
// SetLives ( Joan , 0 ) ;
2429: LD_EXP 61
2433: PPUSH
2434: LD_INT 0
2436: PPUSH
2437: CALL_OW 234
// KillUnit ( Joan ) ;
2441: LD_EXP 61
2445: PPUSH
2446: CALL_OW 66
// DialogueOff ;
2450: CALL_OW 7
// wait ( wait_mcmillanova_pomsta [ difficulty ] ) ;
2454: LD_EXP 48
2458: PUSH
2459: LD_OWVAR 67
2463: ARRAY
2464: PPUSH
2465: CALL_OW 67
// mcmillanova_pomsta = true ;
2469: LD_ADDR_EXP 71
2473: PUSH
2474: LD_INT 1
2476: ST_TO_ADDR
// end ; enable ;
2477: ENABLE
// end ;
2478: PPOPN 1
2480: END
// export function dialog_masha_kaput ; begin
2481: LD_INT 0
2483: PPUSH
// if uz_byly_kecy_o_mashe then
2484: LD_LOC 3
2488: IFFALSE 2492
// exit ;
2490: GO 2551
// while kecy do
2492: LD_LOC 1
2496: IFFALSE 2507
// wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
2505: GO 2492
// kecy = true ;
2507: LD_ADDR_LOC 1
2511: PUSH
2512: LD_INT 1
2514: ST_TO_ADDR
// DialogueOn ;
2515: CALL_OW 6
// Say ( bur , DMashaDies-Bur-1 ) ;
2519: LD_EXP 11
2523: PPUSH
2524: LD_STRING DMashaDies-Bur-1
2526: PPUSH
2527: CALL_OW 88
// uz_byly_kecy_o_mashe = true ;
2531: LD_ADDR_LOC 3
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// DialogueOff ;
2539: CALL_OW 7
// kecy = false ;
2543: LD_ADDR_LOC 1
2547: PUSH
2548: LD_INT 0
2550: ST_TO_ADDR
// end ;
2551: LD_VAR 0 1
2555: RET
// on VehicleCaptured ( new , auto , strana , hum ) do begin if auto = masha then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_EXP 10
2565: EQUAL
2566: IFFALSE 2572
// dialog_masha_kaput ;
2568: CALL 2481 0 0
// enable ;
2572: ENABLE
// end ;
2573: PPOPN 4
2575: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 do var pom , i ; var je_space ; var labc ;
2576: LD_INT 22
2578: PUSH
2579: LD_EXP 1
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 2
2590: PUSH
2591: LD_INT 30
2593: PUSH
2594: LD_INT 7
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 30
2603: PUSH
2604: LD_INT 8
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: LIST
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PPUSH
2620: CALL_OW 69
2624: PUSH
2625: LD_INT 0
2627: GREATER
2628: IFFALSE 2981
2630: GO 2632
2632: DISABLE
2633: LD_INT 0
2635: PPUSH
2636: PPUSH
2637: PPUSH
2638: PPUSH
// begin je_space = false ;
2639: LD_ADDR_VAR 0 3
2643: PUSH
2644: LD_INT 0
2646: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2647: LD_ADDR_VAR 0 1
2651: PUSH
2652: LD_INT 22
2654: PUSH
2655: LD_EXP 1
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 2
2666: PUSH
2667: LD_INT 30
2669: PUSH
2670: LD_INT 7
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 30
2679: PUSH
2680: LD_INT 8
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: LIST
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PPUSH
2696: CALL_OW 69
2700: ST_TO_ADDR
// for i in pom do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: LD_VAR 0 1
2710: PUSH
2711: FOR_IN
2712: IFFALSE 2770
// if GetLabKind ( i , 1 ) = b_lab_spacetime or GetLabKind ( i , 2 ) = b_lab_spacetime then
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 1
2721: PPUSH
2722: CALL_OW 268
2726: PUSH
2727: LD_INT 14
2729: EQUAL
2730: PUSH
2731: LD_VAR 0 2
2735: PPUSH
2736: LD_INT 2
2738: PPUSH
2739: CALL_OW 268
2743: PUSH
2744: LD_INT 14
2746: EQUAL
2747: OR
2748: IFFALSE 2768
// begin je_space = true ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_INT 1
2757: ST_TO_ADDR
// labc = i ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 2
2767: ST_TO_ADDR
// end ;
2768: GO 2711
2770: POP
2771: POP
// if je_space then
2772: LD_VAR 0 3
2776: IFFALSE 2980
// begin while IsConstructed ( i ) <> 0 do
2778: LD_VAR 0 2
2782: PPUSH
2783: CALL_OW 304
2787: PUSH
2788: LD_INT 0
2790: NONEQUAL
2791: IFFALSE 2802
// wait ( 0 0$1 ) ;
2793: LD_INT 35
2795: PPUSH
2796: CALL_OW 67
2800: GO 2778
// while kecy do
2802: LD_LOC 1
2806: IFFALSE 2817
// wait ( 0 0$5 ) ;
2808: LD_INT 175
2810: PPUSH
2811: CALL_OW 67
2815: GO 2802
// kecy = true ;
2817: LD_ADDR_LOC 1
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// DialogueOn ;
2825: CALL_OW 6
// Say ( bur , DResearch-Bur-1 ) ;
2829: LD_EXP 11
2833: PPUSH
2834: LD_STRING DResearch-Bur-1
2836: PPUSH
2837: CALL_OW 88
// if IsOK ( kapisto ) then
2841: LD_EXP 13
2845: PPUSH
2846: CALL_OW 302
2850: IFFALSE 2866
// Say ( kapisto , DResearch-Kap-1 ) else
2852: LD_EXP 13
2856: PPUSH
2857: LD_STRING DResearch-Kap-1
2859: PPUSH
2860: CALL_OW 88
2864: GO 2966
// if IsOK ( petro ) then
2866: LD_EXP 14
2870: PPUSH
2871: CALL_OW 302
2875: IFFALSE 2891
// Say ( petro , DResearch-Pty-1 ) else
2877: LD_EXP 14
2881: PPUSH
2882: LD_STRING DResearch-Pty-1
2884: PPUSH
2885: CALL_OW 88
2889: GO 2966
// if IsOK ( dol ) then
2891: LD_EXP 12
2895: PPUSH
2896: CALL_OW 302
2900: IFFALSE 2916
// Say ( dol , DResearch-Dol-1 ) else
2902: LD_EXP 12
2906: PPUSH
2907: LD_STRING DResearch-Dol-1
2909: PPUSH
2910: CALL_OW 88
2914: GO 2966
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
2916: LD_ADDR_VAR 0 1
2920: PUSH
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 4
2926: PPUSH
2927: LD_EXP 11
2931: PUSH
2932: EMPTY
2933: LIST
2934: PPUSH
2935: CALL 2984 0 3
2939: ST_TO_ADDR
// if pom <> 0 then
2940: LD_VAR 0 1
2944: PUSH
2945: LD_INT 0
2947: NONEQUAL
2948: IFFALSE 2966
// Say ( pom [ 1 ] , DResearch-RSol1-1 ) ;
2950: LD_VAR 0 1
2954: PUSH
2955: LD_INT 1
2957: ARRAY
2958: PPUSH
2959: LD_STRING DResearch-RSol1-1
2961: PPUSH
2962: CALL_OW 88
// end ; DialogueOff ;
2966: CALL_OW 7
// kecy = false ;
2970: LD_ADDR_LOC 1
2974: PUSH
2975: LD_INT 0
2977: ST_TO_ADDR
// end else
2978: GO 2981
// enable ;
2980: ENABLE
// end ;
2981: PPOPN 4
2983: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
2984: LD_INT 0
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
2992: LD_ADDR_VAR 0 6
2996: PUSH
2997: LD_INT 22
2999: PUSH
3000: LD_EXP 1
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 25
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 26
3021: PUSH
3022: LD_VAR 0 1
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: LIST
3035: PPUSH
3036: CALL_OW 69
3040: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
3041: LD_ADDR_VAR 0 7
3045: PUSH
3046: LD_INT 22
3048: PUSH
3049: LD_EXP 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 25
3060: PUSH
3061: LD_INT 3
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 26
3070: PUSH
3071: LD_VAR 0 1
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 69
3089: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
3090: LD_ADDR_VAR 0 8
3094: PUSH
3095: LD_INT 22
3097: PUSH
3098: LD_EXP 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 25
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 26
3119: PUSH
3120: LD_VAR 0 1
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 69
3138: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
3139: LD_ADDR_VAR 0 9
3143: PUSH
3144: LD_INT 22
3146: PUSH
3147: LD_EXP 1
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_INT 25
3158: PUSH
3159: LD_INT 1
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 26
3168: PUSH
3169: LD_VAR 0 1
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: LIST
3182: PPUSH
3183: CALL_OW 69
3187: ST_TO_ADDR
// case povolani of class_scientistic :
3188: LD_VAR 0 2
3192: PUSH
3193: LD_INT 4
3195: DOUBLE
3196: EQUAL
3197: IFTRUE 3201
3199: GO 3214
3201: POP
// pom = pom1 ; class_mechanic :
3202: LD_ADDR_VAR 0 5
3206: PUSH
3207: LD_VAR 0 6
3211: ST_TO_ADDR
3212: GO 3278
3214: LD_INT 3
3216: DOUBLE
3217: EQUAL
3218: IFTRUE 3222
3220: GO 3235
3222: POP
// pom = pom2 ; class_engineer :
3223: LD_ADDR_VAR 0 5
3227: PUSH
3228: LD_VAR 0 7
3232: ST_TO_ADDR
3233: GO 3278
3235: LD_INT 2
3237: DOUBLE
3238: EQUAL
3239: IFTRUE 3243
3241: GO 3256
3243: POP
// pom = pom3 ; class_soldier :
3244: LD_ADDR_VAR 0 5
3248: PUSH
3249: LD_VAR 0 8
3253: ST_TO_ADDR
3254: GO 3278
3256: LD_INT 1
3258: DOUBLE
3259: EQUAL
3260: IFTRUE 3264
3262: GO 3277
3264: POP
// pom = pom4 ; end ;
3265: LD_ADDR_VAR 0 5
3269: PUSH
3270: LD_VAR 0 9
3274: ST_TO_ADDR
3275: GO 3278
3277: POP
// if povolani <> class_scientistic then
3278: LD_VAR 0 2
3282: PUSH
3283: LD_INT 4
3285: NONEQUAL
3286: IFFALSE 3304
// pom = pom ^ pom1 ;
3288: LD_ADDR_VAR 0 5
3292: PUSH
3293: LD_VAR 0 5
3297: PUSH
3298: LD_VAR 0 6
3302: ADD
3303: ST_TO_ADDR
// if povolani <> class_mechanic then
3304: LD_VAR 0 2
3308: PUSH
3309: LD_INT 3
3311: NONEQUAL
3312: IFFALSE 3330
// pom = pom ^ pom2 ;
3314: LD_ADDR_VAR 0 5
3318: PUSH
3319: LD_VAR 0 5
3323: PUSH
3324: LD_VAR 0 7
3328: ADD
3329: ST_TO_ADDR
// if povolani <> class_engineer then
3330: LD_VAR 0 2
3334: PUSH
3335: LD_INT 2
3337: NONEQUAL
3338: IFFALSE 3356
// pom = pom ^ pom3 ;
3340: LD_ADDR_VAR 0 5
3344: PUSH
3345: LD_VAR 0 5
3349: PUSH
3350: LD_VAR 0 8
3354: ADD
3355: ST_TO_ADDR
// if povolani <> class_soldier then
3356: LD_VAR 0 2
3360: PUSH
3361: LD_INT 1
3363: NONEQUAL
3364: IFFALSE 3382
// pom = pom ^ pom4 ;
3366: LD_ADDR_VAR 0 5
3370: PUSH
3371: LD_VAR 0 5
3375: PUSH
3376: LD_VAR 0 9
3380: ADD
3381: ST_TO_ADDR
// result := pom diff diffseznam ;
3382: LD_ADDR_VAR 0 4
3386: PUSH
3387: LD_VAR 0 5
3391: PUSH
3392: LD_VAR 0 3
3396: DIFF
3397: ST_TO_ADDR
// end ;
3398: LD_VAR 0 4
3402: RET
// on VehicleDestroyed ( un , side , nation , x , y , dir , chas , contr , eng , weap ) do begin if un = masha and side = You then
3403: LD_VAR 0 1
3407: PUSH
3408: LD_EXP 10
3412: EQUAL
3413: PUSH
3414: LD_VAR 0 2
3418: PUSH
3419: LD_EXP 1
3423: EQUAL
3424: AND
3425: IFFALSE 3431
// dialog_masha_kaput ;
3427: CALL 2481 0 0
// end ;
3431: PPOPN 10
3433: END
// every 0 0$1 trigger GetTech ( tech_TauRad , You ) = state_researched or GetTech ( tech_SpacAnom , You ) = state_researched do var pom ;
3434: LD_INT 28
3436: PPUSH
3437: LD_EXP 1
3441: PPUSH
3442: CALL_OW 321
3446: PUSH
3447: LD_INT 2
3449: EQUAL
3450: PUSH
3451: LD_INT 29
3453: PPUSH
3454: LD_EXP 1
3458: PPUSH
3459: CALL_OW 321
3463: PUSH
3464: LD_INT 2
3466: EQUAL
3467: OR
3468: IFFALSE 3862
3470: GO 3472
3472: DISABLE
3473: LD_INT 0
3475: PPUSH
// begin DialogueOn ;
3476: CALL_OW 6
// if IsOK ( kapisto ) then
3480: LD_EXP 13
3484: PPUSH
3485: CALL_OW 302
3489: IFFALSE 3557
// begin Say ( kapisto , DSpecBaz-Kap-1 ) ;
3491: LD_EXP 13
3495: PPUSH
3496: LD_STRING DSpecBaz-Kap-1
3498: PPUSH
3499: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3503: LD_INT 28
3505: PPUSH
3506: LD_EXP 1
3510: PPUSH
3511: CALL_OW 321
3515: PUSH
3516: LD_INT 2
3518: EQUAL
3519: IFFALSE 3543
// begin Say ( kapisto , DSpecBaz-Kap-1b ) ;
3521: LD_EXP 13
3525: PPUSH
3526: LD_STRING DSpecBaz-Kap-1b
3528: PPUSH
3529: CALL_OW 88
// taurad = true ;
3533: LD_ADDR_LOC 2
3537: PUSH
3538: LD_INT 1
3540: ST_TO_ADDR
// end else
3541: GO 3555
// Say ( kapisto , DSpecBaz-Kap-1c ) ;
3543: LD_EXP 13
3547: PPUSH
3548: LD_STRING DSpecBaz-Kap-1c
3550: PPUSH
3551: CALL_OW 88
// end else
3555: GO 3839
// if IsOK ( petro ) then
3557: LD_EXP 14
3561: PPUSH
3562: CALL_OW 302
3566: IFFALSE 3634
// begin Say ( petro , DSpecBaz-Pty-1 ) ;
3568: LD_EXP 14
3572: PPUSH
3573: LD_STRING DSpecBaz-Pty-1
3575: PPUSH
3576: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3580: LD_INT 28
3582: PPUSH
3583: LD_EXP 1
3587: PPUSH
3588: CALL_OW 321
3592: PUSH
3593: LD_INT 2
3595: EQUAL
3596: IFFALSE 3620
// begin Say ( petro , DSpecBaz-Pty-1b ) ;
3598: LD_EXP 14
3602: PPUSH
3603: LD_STRING DSpecBaz-Pty-1b
3605: PPUSH
3606: CALL_OW 88
// taurad = true ;
3610: LD_ADDR_LOC 2
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// end else
3618: GO 3632
// Say ( petro , DSpecBaz-Pty-1c ) ;
3620: LD_EXP 14
3624: PPUSH
3625: LD_STRING DSpecBaz-Pty-1c
3627: PPUSH
3628: CALL_OW 88
// end else
3632: GO 3839
// if IsOK ( dol ) then
3634: LD_EXP 12
3638: PPUSH
3639: CALL_OW 302
3643: IFFALSE 3711
// begin Say ( dol , DSpecBaz-Dol-1 ) ;
3645: LD_EXP 12
3649: PPUSH
3650: LD_STRING DSpecBaz-Dol-1
3652: PPUSH
3653: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3657: LD_INT 28
3659: PPUSH
3660: LD_EXP 1
3664: PPUSH
3665: CALL_OW 321
3669: PUSH
3670: LD_INT 2
3672: EQUAL
3673: IFFALSE 3697
// begin Say ( dol , DSpecBaz-Dol-1b ) ;
3675: LD_EXP 12
3679: PPUSH
3680: LD_STRING DSpecBaz-Dol-1b
3682: PPUSH
3683: CALL_OW 88
// taurad = true ;
3687: LD_ADDR_LOC 2
3691: PUSH
3692: LD_INT 1
3694: ST_TO_ADDR
// end else
3695: GO 3709
// Say ( dol , DSpecBaz-Dol-1c ) ;
3697: LD_EXP 12
3701: PPUSH
3702: LD_STRING DSpecBaz-Dol-1c
3704: PPUSH
3705: CALL_OW 88
// end else
3709: GO 3839
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur , petro , kapisto , dol ] ) ;
3711: LD_ADDR_VAR 0 1
3715: PUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_INT 4
3721: PPUSH
3722: LD_EXP 11
3726: PUSH
3727: LD_EXP 14
3731: PUSH
3732: LD_EXP 13
3736: PUSH
3737: LD_EXP 12
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: PPUSH
3748: CALL 2984 0 3
3752: ST_TO_ADDR
// if pom > 0 then
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 0
3760: GREATER
3761: IFFALSE 3839
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1 ) ;
3763: LD_VAR 0 1
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_STRING DSpecBaz-RSci1-1
3774: PPUSH
3775: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3779: LD_INT 28
3781: PPUSH
3782: LD_EXP 1
3786: PPUSH
3787: CALL_OW 321
3791: PUSH
3792: LD_INT 2
3794: EQUAL
3795: IFFALSE 3823
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1b ) ;
3797: LD_VAR 0 1
3801: PUSH
3802: LD_INT 1
3804: ARRAY
3805: PPUSH
3806: LD_STRING DSpecBaz-RSci1-1b
3808: PPUSH
3809: CALL_OW 88
// taurad = true ;
3813: LD_ADDR_LOC 2
3817: PUSH
3818: LD_INT 1
3820: ST_TO_ADDR
// end else
3821: GO 3839
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1c ) ;
3823: LD_VAR 0 1
3827: PUSH
3828: LD_INT 1
3830: ARRAY
3831: PPUSH
3832: LD_STRING DSpecBaz-RSci1-1c
3834: PPUSH
3835: CALL_OW 88
// end ; end ; Say ( bur , DSpecBaz-Bur-1 ) ;
3839: LD_EXP 11
3843: PPUSH
3844: LD_STRING DSpecBaz-Bur-1
3846: PPUSH
3847: CALL_OW 88
// Hint ( SpecBaz ) ;
3851: LD_STRING SpecBaz
3853: PPUSH
3854: CALL_OW 339
// DialogueOff ;
3858: CALL_OW 7
// end ;
3862: PPOPN 1
3864: END
// every 0 0$1 trigger GetTech ( tech_TauRad , You ) = state_researched and GetTech ( tech_SpacAnom , You ) = state_researched do var pom ;
3865: LD_INT 28
3867: PPUSH
3868: LD_EXP 1
3872: PPUSH
3873: CALL_OW 321
3877: PUSH
3878: LD_INT 2
3880: EQUAL
3881: PUSH
3882: LD_INT 29
3884: PPUSH
3885: LD_EXP 1
3889: PPUSH
3890: CALL_OW 321
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: AND
3899: IFFALSE 4206
3901: GO 3903
3903: DISABLE
3904: LD_INT 0
3906: PPUSH
// begin DialogueOn ;
3907: CALL_OW 6
// if IsOK ( kapisto ) then
3911: LD_EXP 13
3915: PPUSH
3916: CALL_OW 302
3920: IFFALSE 3968
// begin Say ( kapisto , DSpecBaz-Kap-1a ) ;
3922: LD_EXP 13
3926: PPUSH
3927: LD_STRING DSpecBaz-Kap-1a
3929: PPUSH
3930: CALL_OW 88
// if taurad then
3934: LD_LOC 2
3938: IFFALSE 3954
// Say ( kapisto , DSpecBaz-Kap-1c ) else
3940: LD_EXP 13
3944: PPUSH
3945: LD_STRING DSpecBaz-Kap-1c
3947: PPUSH
3948: CALL_OW 88
3952: GO 3966
// Say ( kapisto , DSpecBaz-Kap-1b ) ;
3954: LD_EXP 13
3958: PPUSH
3959: LD_STRING DSpecBaz-Kap-1b
3961: PPUSH
3962: CALL_OW 88
// end else
3966: GO 4190
// if IsOK ( petro ) then
3968: LD_EXP 14
3972: PPUSH
3973: CALL_OW 302
3977: IFFALSE 4025
// begin Say ( petro , DSpecBaz-Pty-1a ) ;
3979: LD_EXP 14
3983: PPUSH
3984: LD_STRING DSpecBaz-Pty-1a
3986: PPUSH
3987: CALL_OW 88
// if taurad then
3991: LD_LOC 2
3995: IFFALSE 4011
// Say ( petro , DSpecBaz-Pty-1c ) else
3997: LD_EXP 14
4001: PPUSH
4002: LD_STRING DSpecBaz-Pty-1c
4004: PPUSH
4005: CALL_OW 88
4009: GO 4023
// Say ( petro , DSpecBaz-Pty-1b ) ;
4011: LD_EXP 14
4015: PPUSH
4016: LD_STRING DSpecBaz-Pty-1b
4018: PPUSH
4019: CALL_OW 88
// end else
4023: GO 4190
// if IsOK ( dol ) then
4025: LD_EXP 12
4029: PPUSH
4030: CALL_OW 302
4034: IFFALSE 4082
// begin Say ( dol , DSpecBaz-Dol-1a ) ;
4036: LD_EXP 12
4040: PPUSH
4041: LD_STRING DSpecBaz-Dol-1a
4043: PPUSH
4044: CALL_OW 88
// if taurad then
4048: LD_LOC 2
4052: IFFALSE 4068
// Say ( dol , DSpecBaz-Dol-1c ) else
4054: LD_EXP 12
4058: PPUSH
4059: LD_STRING DSpecBaz-Dol-1c
4061: PPUSH
4062: CALL_OW 88
4066: GO 4080
// Say ( dol , DSpecBaz-Dol-1b ) ;
4068: LD_EXP 12
4072: PPUSH
4073: LD_STRING DSpecBaz-Dol-1b
4075: PPUSH
4076: CALL_OW 88
// end else
4080: GO 4190
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur , petro , kapisto , dol ] ) ;
4082: LD_ADDR_VAR 0 1
4086: PUSH
4087: LD_INT 1
4089: PPUSH
4090: LD_INT 4
4092: PPUSH
4093: LD_EXP 11
4097: PUSH
4098: LD_EXP 14
4102: PUSH
4103: LD_EXP 13
4107: PUSH
4108: LD_EXP 12
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL 2984 0 3
4123: ST_TO_ADDR
// if pom > 0 then
4124: LD_VAR 0 1
4128: PUSH
4129: LD_INT 0
4131: GREATER
4132: IFFALSE 4190
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1a ) ;
4134: LD_VAR 0 1
4138: PUSH
4139: LD_INT 1
4141: ARRAY
4142: PPUSH
4143: LD_STRING DSpecBaz-RSci1-1a
4145: PPUSH
4146: CALL_OW 88
// if taurad then
4150: LD_LOC 2
4154: IFFALSE 4174
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1c ) else
4156: LD_VAR 0 1
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_STRING DSpecBaz-RSci1-1c
4167: PPUSH
4168: CALL_OW 88
4172: GO 4190
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1b ) ;
4174: LD_VAR 0 1
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_STRING DSpecBaz-RSci1-1b
4185: PPUSH
4186: CALL_OW 88
// end ; end ; Say ( bur , DSpecBaz-Bur-1a ) ;
4190: LD_EXP 11
4194: PPUSH
4195: LD_STRING DSpecBaz-Bur-1a
4197: PPUSH
4198: CALL_OW 88
// DialogueOff ;
4202: CALL_OW 7
// end ;
4206: PPOPN 1
4208: END
// every 0 0$1 trigger SeeArea ( You , Arabi_see ) > 2 do
4209: LD_EXP 1
4213: PPUSH
4214: LD_INT 28
4216: PPUSH
4217: CALL_OW 294
4221: PUSH
4222: LD_INT 2
4224: GREATER
4225: IFFALSE 4271
4227: GO 4229
4229: DISABLE
// begin if not KECY_s_arabama then
4230: LD_EXP 6
4234: NOT
4235: IFFALSE 4271
// begin if not maccepted then
4237: LD_EXP 53
4241: NOT
4242: IFFALSE 4249
// enable ( 1 ) else
4244: LD_INT 1
4246: ENABLE_MARKED
4247: GO 4263
// if mhandedover then
4249: LD_EXP 54
4253: IFFALSE 4260
// enable ( 2 ) else
4255: LD_INT 2
4257: ENABLE_MARKED
4258: GO 4263
// enable ( 3 ) ;
4260: LD_INT 3
4262: ENABLE_MARKED
// KECY_s_arabama = true ;
4263: LD_ADDR_EXP 6
4267: PUSH
4268: LD_INT 1
4270: ST_TO_ADDR
// end ; end ;
4271: END
// export function query_konec ; var pom ; begin
4272: LD_INT 0
4274: PPUSH
4275: PPUSH
// pom = Query ( QEndMission ) ;
4276: LD_ADDR_VAR 0 2
4280: PUSH
4281: LD_STRING QEndMission
4283: PPUSH
4284: CALL_OW 97
4288: ST_TO_ADDR
// result := pom ;
4289: LD_ADDR_VAR 0 1
4293: PUSH
4294: LD_VAR 0 2
4298: ST_TO_ADDR
// end ; end_of_file
4299: LD_VAR 0 1
4303: RET
// export Ru_base ; export cislo_baze ; export Ru_enter ; export masha ; export bur ; export dol ; export kapisto ; export petro ; export pop ; export bel ; export gny ; export kiri ; export koval ; export schol ; export kuzmov ; export karam ; export petrov ; export gleb ; export lipsch ; export tito ; export xavier ; export obluk ; export kozlov ; var bedny ; export test_ukonceni_allowed ; every 0 0$0.1 do
4304: GO 4306
4306: DISABLE
// begin bedny = 0 ;
4307: LD_ADDR_LOC 4
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// test_ukonceni_allowed = false ;
4315: LD_ADDR_EXP 30
4319: PUSH
4320: LD_INT 0
4322: ST_TO_ADDR
// end ;
4323: END
// export function place_resource ; begin
4324: LD_INT 0
4326: PPUSH
// CreateDepositXY ( 45 , 72 , mat_oil ) ;
4327: LD_INT 45
4329: PPUSH
4330: LD_INT 72
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: CALL_OW 62
// CreateDepositXY ( 51 , 86 , mat_siberit ) ;
4340: LD_INT 51
4342: PPUSH
4343: LD_INT 86
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 62
// CreateDepositXY ( 92 , 110 , mat_oil ) ;
4353: LD_INT 92
4355: PPUSH
4356: LD_INT 110
4358: PPUSH
4359: LD_INT 2
4361: PPUSH
4362: CALL_OW 62
// CreateDepositXY ( 103 , 103 , mat_siberit ) ;
4366: LD_INT 103
4368: PPUSH
4369: LD_INT 103
4371: PPUSH
4372: LD_INT 3
4374: PPUSH
4375: CALL_OW 62
// CreateDepositXY ( 151 , 84 , mat_oil ) ;
4379: LD_INT 151
4381: PPUSH
4382: LD_INT 84
4384: PPUSH
4385: LD_INT 2
4387: PPUSH
4388: CALL_OW 62
// CreateDepositXY ( 139 , 60 , mat_siberit ) ;
4392: LD_INT 139
4394: PPUSH
4395: LD_INT 60
4397: PPUSH
4398: LD_INT 3
4400: PPUSH
4401: CALL_OW 62
// end ;
4405: LD_VAR 0 1
4409: RET
// export function placni_rusy_na_zacatek ; var ezone ; var i ; begin
4410: LD_INT 0
4412: PPUSH
4413: PPUSH
4414: PPUSH
// case cislo_baze of 1 :
4415: LD_EXP 8
4419: PUSH
4420: LD_INT 1
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4451
4428: POP
// begin ezone = ezone1 ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 4
4436: ST_TO_ADDR
// RevealFogArea ( You , Renter1 ) ;
4437: LD_EXP 1
4441: PPUSH
4442: LD_INT 14
4444: PPUSH
4445: CALL_OW 332
// end ; 2 :
4449: GO 4514
4451: LD_INT 2
4453: DOUBLE
4454: EQUAL
4455: IFTRUE 4459
4457: GO 4482
4459: POP
// begin ezone = ezone2 ;
4460: LD_ADDR_VAR 0 2
4464: PUSH
4465: LD_INT 5
4467: ST_TO_ADDR
// RevealFogArea ( You , Renter2 ) ;
4468: LD_EXP 1
4472: PPUSH
4473: LD_INT 15
4475: PPUSH
4476: CALL_OW 332
// end ; 3 :
4480: GO 4514
4482: LD_INT 3
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4513
4490: POP
// begin ezone = ezone3 ;
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 6
4498: ST_TO_ADDR
// RevealFogArea ( You , Renter3 ) ;
4499: LD_EXP 1
4503: PPUSH
4504: LD_INT 16
4506: PPUSH
4507: CALL_OW 332
// end ; end ;
4511: GO 4514
4513: POP
// for i in RUSI_ENTER_LIST do
4514: LD_ADDR_VAR 0 3
4518: PUSH
4519: LD_EXP 31
4523: PUSH
4524: FOR_IN
4525: IFFALSE 4546
// PlaceUnitArea ( i , ezone , false ) ;
4527: LD_VAR 0 3
4531: PPUSH
4532: LD_VAR 0 2
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
4544: GO 4524
4546: POP
4547: POP
// CenterNowOnUnits ( RUSI_ENTER_LIST ) ;
4548: LD_EXP 31
4552: PPUSH
4553: CALL_OW 87
// chmo1 ;
4557: CALL 1683 0 0
// InGameOff ;
4561: CALL_OW 9
// end ;
4565: LD_VAR 0 1
4569: RET
// every 0 0$1 do
4570: GO 4572
4572: DISABLE
// begin wait ( delay_beden [ difficulty ] ) ;
4573: LD_EXP 44
4577: PUSH
4578: LD_OWVAR 67
4582: ARRAY
4583: PPUSH
4584: CALL_OW 67
// wait ( Rand ( 1 , bedny * 0 0$20 ) ) ;
4588: LD_INT 1
4590: PPUSH
4591: LD_LOC 4
4595: PUSH
4596: LD_INT 700
4598: MUL
4599: PPUSH
4600: CALL_OW 12
4604: PPUSH
4605: CALL_OW 67
// bedny = bedny + 1 ;
4609: LD_ADDR_LOC 4
4613: PUSH
4614: LD_LOC 4
4618: PUSH
4619: LD_INT 1
4621: PLUS
4622: ST_TO_ADDR
// case cislo_baze of 1 :
4623: LD_EXP 8
4627: PUSH
4628: LD_INT 1
4630: DOUBLE
4631: EQUAL
4632: IFTRUE 4636
4634: GO 4660
4636: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base3 , true ) ; 2 :
4637: LD_INT 3
4639: PPUSH
4640: LD_INT 5
4642: PPUSH
4643: CALL_OW 12
4647: PPUSH
4648: LD_INT 3
4650: PPUSH
4651: LD_INT 1
4653: PPUSH
4654: CALL_OW 55
4658: GO 4732
4660: LD_INT 2
4662: DOUBLE
4663: EQUAL
4664: IFTRUE 4668
4666: GO 4692
4668: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base2 , true ) ; 3 :
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 5
4674: PPUSH
4675: CALL_OW 12
4679: PPUSH
4680: LD_INT 2
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 55
4690: GO 4732
4692: LD_INT 3
4694: DOUBLE
4695: EQUAL
4696: IFTRUE 4700
4698: GO 4724
4700: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base1 , true ) ; else
4701: LD_INT 3
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 12
4711: PPUSH
4712: LD_INT 1
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 55
4722: GO 4732
4724: POP
// begin msg ( ERROR: pri padani beden doslo k chybe ) ;
4725: LD_STRING ERROR: pri padani beden doslo k chybe
4727: PPUSH
4728: CALL_OW 100
// end ; end ; enable ;
4732: ENABLE
// end ;
4733: END
// every 1 1$30 do
4734: GO 4736
4736: DISABLE
// begin wait ( Rand ( 1 , 1 1$0 ) ) ;
4737: LD_INT 1
4739: PPUSH
4740: LD_INT 2100
4742: PPUSH
4743: CALL_OW 12
4747: PPUSH
4748: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , Bedny_Ar , true ) ;
4752: LD_INT 1
4754: PPUSH
4755: LD_INT 5
4757: PPUSH
4758: CALL_OW 12
4762: PPUSH
4763: LD_INT 24
4765: PPUSH
4766: LD_INT 1
4768: PPUSH
4769: CALL_OW 55
// enable ;
4773: ENABLE
// end ;
4774: END
// every 0 0$1 do var okay ; var plab ; var i ; var pom ;
4775: GO 4777
4777: DISABLE
4778: LD_INT 0
4780: PPUSH
4781: PPUSH
4782: PPUSH
4783: PPUSH
// begin okay = true ;
4784: LD_ADDR_VAR 0 1
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// if IsOK ( Am_lab1 ) then
4792: LD_INT 48
4794: PPUSH
4795: CALL_OW 302
4799: IFFALSE 4824
// if GetSide ( Am_lab1 ) = Amici then
4801: LD_INT 48
4803: PPUSH
4804: CALL_OW 255
4808: PUSH
4809: LD_EXP 2
4813: EQUAL
4814: IFFALSE 4824
// okay = false ;
4816: LD_ADDR_VAR 0 1
4820: PUSH
4821: LD_INT 0
4823: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
4824: LD_INT 55
4826: PPUSH
4827: CALL_OW 302
4831: IFFALSE 4856
// if GetSide ( Am_lab2 ) = Amici then
4833: LD_INT 55
4835: PPUSH
4836: CALL_OW 255
4840: PUSH
4841: LD_EXP 2
4845: EQUAL
4846: IFFALSE 4856
// okay = false ;
4848: LD_ADDR_VAR 0 1
4852: PUSH
4853: LD_INT 0
4855: ST_TO_ADDR
// if IsOK ( Am_lab3 ) then
4856: LD_INT 56
4858: PPUSH
4859: CALL_OW 302
4863: IFFALSE 4888
// if GetSide ( Am_lab3 ) = Amici then
4865: LD_INT 56
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_EXP 2
4877: EQUAL
4878: IFFALSE 4888
// okay = false ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_INT 0
4887: ST_TO_ADDR
// if IsOK ( Joan ) then
4888: LD_EXP 61
4892: PPUSH
4893: CALL_OW 302
4897: IFFALSE 4907
// okay = false ;
4899: LD_ADDR_VAR 0 1
4903: PUSH
4904: LD_INT 0
4906: ST_TO_ADDR
// if okay and test_na_vedce then
4907: LD_VAR 0 1
4911: PUSH
4912: CALL 20765 0 0
4916: AND
4917: IFFALSE 5097
// begin plab = 0 ;
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: LD_INT 0
4926: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
4927: LD_ADDR_VAR 0 3
4931: PUSH
4932: LD_INT 48
4934: PUSH
4935: LD_INT 55
4937: PUSH
4938: LD_INT 56
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: FOR_IN
4947: IFFALSE 4993
// if GetSide ( i ) = You or IsDead ( i ) then
4949: LD_VAR 0 3
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_EXP 1
4963: EQUAL
4964: PUSH
4965: LD_VAR 0 3
4969: PPUSH
4970: CALL_OW 301
4974: OR
4975: IFFALSE 4991
// plab = plab + 1 ;
4977: LD_ADDR_VAR 0 2
4981: PUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: PLUS
4990: ST_TO_ADDR
4991: GO 4946
4993: POP
4994: POP
// if GetTech ( tech_TauRad , You ) and GetTech ( tech_SpacAnom , You ) then
4995: LD_INT 28
4997: PPUSH
4998: LD_EXP 1
5002: PPUSH
5003: CALL_OW 321
5007: PUSH
5008: LD_INT 29
5010: PPUSH
5011: LD_EXP 1
5015: PPUSH
5016: CALL_OW 321
5020: AND
5021: IFFALSE 5037
// plab = plab + 1 ;
5023: LD_ADDR_VAR 0 2
5027: PUSH
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 1
5035: PLUS
5036: ST_TO_ADDR
// if plab >= 4 then
5037: LD_VAR 0 2
5041: PUSH
5042: LD_INT 4
5044: GREATEREQUAL
5045: IFFALSE 5053
// konec_mise else
5047: CALL 186 0 0
5051: GO 5095
// begin pom = query_konec ;
5053: LD_ADDR_VAR 0 4
5057: PUSH
5058: CALL 4272 0 0
5062: ST_TO_ADDR
// if pom = 2 then
5063: LD_VAR 0 4
5067: PUSH
5068: LD_INT 2
5070: EQUAL
5071: IFFALSE 5079
// konec_mise else
5073: CALL 186 0 0
5077: GO 5095
// begin end_the_mission_allowed = true ;
5079: LD_ADDR_OWVAR 57
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// test_ukonceni_allowed = true ;
5087: LD_ADDR_EXP 30
5091: PUSH
5092: LD_INT 1
5094: ST_TO_ADDR
// end ; end ; end else
5095: GO 5098
// enable ;
5097: ENABLE
// end ;
5098: PPOPN 4
5100: END
// every 0 0$1 do
5101: GO 5103
5103: DISABLE
// begin SetMark ( Masha , 1 ) ;
5104: LD_EXP 10
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 242
// end ;
5116: END
// every 0 0$5 trigger test_ukonceni_allowed do var okay ; var i ; var plab ;
5117: LD_EXP 30
5121: IFFALSE 5399
5123: GO 5125
5125: DISABLE
5126: LD_INT 0
5128: PPUSH
5129: PPUSH
5130: PPUSH
// begin okay = true ;
5131: LD_ADDR_VAR 0 1
5135: PUSH
5136: LD_INT 1
5138: ST_TO_ADDR
// if IsOK ( Am_lab1 ) then
5139: LD_INT 48
5141: PPUSH
5142: CALL_OW 302
5146: IFFALSE 5171
// if GetSide ( Am_lab1 ) = Amici then
5148: LD_INT 48
5150: PPUSH
5151: CALL_OW 255
5155: PUSH
5156: LD_EXP 2
5160: EQUAL
5161: IFFALSE 5171
// okay = false ;
5163: LD_ADDR_VAR 0 1
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
5171: LD_INT 55
5173: PPUSH
5174: CALL_OW 302
5178: IFFALSE 5203
// if GetSide ( Am_lab2 ) = Amici then
5180: LD_INT 55
5182: PPUSH
5183: CALL_OW 255
5187: PUSH
5188: LD_EXP 2
5192: EQUAL
5193: IFFALSE 5203
// okay = false ;
5195: LD_ADDR_VAR 0 1
5199: PUSH
5200: LD_INT 0
5202: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
5203: LD_INT 55
5205: PPUSH
5206: CALL_OW 302
5210: IFFALSE 5235
// if GetSide ( Am_lab2 ) = Amici then
5212: LD_INT 55
5214: PPUSH
5215: CALL_OW 255
5219: PUSH
5220: LD_EXP 2
5224: EQUAL
5225: IFFALSE 5235
// okay = false ;
5227: LD_ADDR_VAR 0 1
5231: PUSH
5232: LD_INT 0
5234: ST_TO_ADDR
// if IsOK ( Joan ) then
5235: LD_EXP 61
5239: PPUSH
5240: CALL_OW 302
5244: IFFALSE 5254
// okay = false ;
5246: LD_ADDR_VAR 0 1
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// if okay and test_na_vedce then
5254: LD_VAR 0 1
5258: PUSH
5259: CALL 20765 0 0
5263: AND
5264: IFFALSE 5398
// begin plab = 0 ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_INT 0
5273: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
5274: LD_ADDR_VAR 0 2
5278: PUSH
5279: LD_INT 48
5281: PUSH
5282: LD_INT 55
5284: PUSH
5285: LD_INT 56
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: LIST
5292: PUSH
5293: FOR_IN
5294: IFFALSE 5340
// if GetSide ( i ) = You or IsDead ( i ) then
5296: LD_VAR 0 2
5300: PPUSH
5301: CALL_OW 255
5305: PUSH
5306: LD_EXP 1
5310: EQUAL
5311: PUSH
5312: LD_VAR 0 2
5316: PPUSH
5317: CALL_OW 301
5321: OR
5322: IFFALSE 5338
// plab = plab + 1 ;
5324: LD_ADDR_VAR 0 3
5328: PUSH
5329: LD_VAR 0 3
5333: PUSH
5334: LD_INT 1
5336: PLUS
5337: ST_TO_ADDR
5338: GO 5293
5340: POP
5341: POP
// if GetTech ( tech_TauRad , You ) and GetTech ( tech_SpacAnom , You ) then
5342: LD_INT 28
5344: PPUSH
5345: LD_EXP 1
5349: PPUSH
5350: CALL_OW 321
5354: PUSH
5355: LD_INT 29
5357: PPUSH
5358: LD_EXP 1
5362: PPUSH
5363: CALL_OW 321
5367: AND
5368: IFFALSE 5384
// plab = plab + 1 ;
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: PLUS
5383: ST_TO_ADDR
// if plab >= 4 then
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 4
5391: GREATEREQUAL
5392: IFFALSE 5398
// konec_mise ;
5394: CALL 186 0 0
// end ; enable ;
5398: ENABLE
// end ;
5399: PPOPN 3
5401: END
// every 1 1$0 trigger GetSide ( Ar_bar ) = You do
5402: LD_INT 61
5404: PPUSH
5405: CALL_OW 255
5409: PUSH
5410: LD_EXP 1
5414: EQUAL
5415: IFFALSE 5435
5417: GO 5419
5419: DISABLE
// begin SetTech ( tech_Mortar , You , state_researched ) ;
5420: LD_INT 41
5422: PPUSH
5423: LD_EXP 1
5427: PPUSH
5428: LD_INT 2
5430: PPUSH
5431: CALL_OW 322
// end ; end_of_file
5435: END
// export RUSI_ENTER_LIST ; export AM_UTOK_1_LIST ; export AM_UTOK_2_LIST ; export AM_UTOK_3_LIST ; var av , ah ; export function vyber_lidi_pro_misi ; var lvyber ; var i , j , pom ; var vyber ; begin
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
5440: PPUSH
5441: PPUSH
5442: PPUSH
5443: PPUSH
// uc_nation = nation_russian ;
5444: LD_ADDR_OWVAR 21
5448: PUSH
5449: LD_INT 3
5451: ST_TO_ADDR
// uc_side = You ;
5452: LD_ADDR_OWVAR 20
5456: PUSH
5457: LD_EXP 1
5461: ST_TO_ADDR
// pom = [ ] ;
5462: LD_ADDR_VAR 0 5
5466: PUSH
5467: EMPTY
5468: ST_TO_ADDR
// SetSide ( bur , You ) ;
5469: LD_EXP 11
5473: PPUSH
5474: LD_EXP 1
5478: PPUSH
5479: CALL_OW 235
// SetClass ( bur , class_mechanic ) ;
5483: LD_EXP 11
5487: PPUSH
5488: LD_INT 3
5490: PPUSH
5491: CALL_OW 336
// if dol > 0 then
5495: LD_EXP 12
5499: PUSH
5500: LD_INT 0
5502: GREATER
5503: IFFALSE 5531
// begin SetClass ( dol , class_scientistic ) ;
5505: LD_EXP 12
5509: PPUSH
5510: LD_INT 4
5512: PPUSH
5513: CALL_OW 336
// SetSide ( dol , You ) ;
5517: LD_EXP 12
5521: PPUSH
5522: LD_EXP 1
5526: PPUSH
5527: CALL_OW 235
// end ; if kapisto > 0 then
5531: LD_EXP 13
5535: PUSH
5536: LD_INT 0
5538: GREATER
5539: IFFALSE 5567
// begin SetClass ( kapisto , class_scientistic ) ;
5541: LD_EXP 13
5545: PPUSH
5546: LD_INT 4
5548: PPUSH
5549: CALL_OW 336
// SetSide ( kapisto , You ) ;
5553: LD_EXP 13
5557: PPUSH
5558: LD_EXP 1
5562: PPUSH
5563: CALL_OW 235
// end ; if petro > 0 then
5567: LD_EXP 14
5571: PUSH
5572: LD_INT 0
5574: GREATER
5575: IFFALSE 5603
// begin SetClass ( petro , class_scientistic ) ;
5577: LD_EXP 14
5581: PPUSH
5582: LD_INT 4
5584: PPUSH
5585: CALL_OW 336
// SetSide ( petro , You ) ;
5589: LD_EXP 14
5593: PPUSH
5594: LD_EXP 1
5598: PPUSH
5599: CALL_OW 235
// end ; lvyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
5603: LD_ADDR_VAR 0 2
5607: PUSH
5608: LD_INT -4
5610: PUSH
5611: LD_INT -1
5613: PUSH
5614: LD_INT -6
5616: PUSH
5617: LD_EXP 11
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
// lvyber = lvyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_VAR 0 2
5637: PUSH
5638: LD_INT -2
5640: PUSH
5641: LD_INT -3
5643: PUSH
5644: LD_INT -5
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: ADD
5652: ST_TO_ADDR
// if dol > 0 then
5653: LD_EXP 12
5657: PUSH
5658: LD_INT 0
5660: GREATER
5661: IFFALSE 5705
// begin SetSide ( dol , You ) ;
5663: LD_EXP 12
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 235
// SetClass ( dol , class_scientistic ) ;
5677: LD_EXP 12
5681: PPUSH
5682: LD_INT 4
5684: PPUSH
5685: CALL_OW 336
// lvyber = lvyber ^ dol ;
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_EXP 12
5703: ADD
5704: ST_TO_ADDR
// end ; if kapisto > 0 then
5705: LD_EXP 13
5709: PUSH
5710: LD_INT 0
5712: GREATER
5713: IFFALSE 5757
// begin SetSide ( kapisto , You ) ;
5715: LD_EXP 13
5719: PPUSH
5720: LD_EXP 1
5724: PPUSH
5725: CALL_OW 235
// SetClass ( kapisto , class_scientistic ) ;
5729: LD_EXP 13
5733: PPUSH
5734: LD_INT 4
5736: PPUSH
5737: CALL_OW 336
// lvyber = lvyber ^ kapisto ;
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: LD_VAR 0 2
5750: PUSH
5751: LD_EXP 13
5755: ADD
5756: ST_TO_ADDR
// end ; if petro > 0 then
5757: LD_EXP 14
5761: PUSH
5762: LD_INT 0
5764: GREATER
5765: IFFALSE 5809
// begin SetSide ( petro , You ) ;
5767: LD_EXP 14
5771: PPUSH
5772: LD_EXP 1
5776: PPUSH
5777: CALL_OW 235
// SetClass ( petro , class_scientistic ) ;
5781: LD_EXP 14
5785: PPUSH
5786: LD_INT 4
5788: PPUSH
5789: CALL_OW 336
// lvyber = lvyber ^ petro ;
5793: LD_ADDR_VAR 0 2
5797: PUSH
5798: LD_VAR 0 2
5802: PUSH
5803: LD_EXP 14
5807: ADD
5808: ST_TO_ADDR
// end ; if bel > 0 then
5809: LD_EXP 16
5813: PUSH
5814: LD_INT 0
5816: GREATER
5817: IFFALSE 5861
// begin SetSide ( bel , You ) ;
5819: LD_EXP 16
5823: PPUSH
5824: LD_EXP 1
5828: PPUSH
5829: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
5833: LD_EXP 16
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: CALL_OW 336
// lvyber = lvyber ^ bel ;
5845: LD_ADDR_VAR 0 2
5849: PUSH
5850: LD_VAR 0 2
5854: PUSH
5855: LD_EXP 16
5859: ADD
5860: ST_TO_ADDR
// end ; if gny > 0 then
5861: LD_EXP 17
5865: PUSH
5866: LD_INT 0
5868: GREATER
5869: IFFALSE 5913
// begin SetSide ( gny , You ) ;
5871: LD_EXP 17
5875: PPUSH
5876: LD_EXP 1
5880: PPUSH
5881: CALL_OW 235
// SetClass ( gny , class_soldier ) ;
5885: LD_EXP 17
5889: PPUSH
5890: LD_INT 1
5892: PPUSH
5893: CALL_OW 336
// lvyber = lvyber ^ gny ;
5897: LD_ADDR_VAR 0 2
5901: PUSH
5902: LD_VAR 0 2
5906: PUSH
5907: LD_EXP 17
5911: ADD
5912: ST_TO_ADDR
// end ; if kiri > 0 then
5913: LD_EXP 18
5917: PUSH
5918: LD_INT 0
5920: GREATER
5921: IFFALSE 5965
// begin SetSide ( kiri , You ) ;
5923: LD_EXP 18
5927: PPUSH
5928: LD_EXP 1
5932: PPUSH
5933: CALL_OW 235
// SetClass ( kiri , class_scientistic ) ;
5937: LD_EXP 18
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: CALL_OW 336
// lvyber = lvyber ^ kiri ;
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_VAR 0 2
5958: PUSH
5959: LD_EXP 18
5963: ADD
5964: ST_TO_ADDR
// end ; if koval > 0 then
5965: LD_EXP 19
5969: PUSH
5970: LD_INT 0
5972: GREATER
5973: IFFALSE 6017
// begin SetSide ( koval , You ) ;
5975: LD_EXP 19
5979: PPUSH
5980: LD_EXP 1
5984: PPUSH
5985: CALL_OW 235
// SetClass ( koval , class_soldier ) ;
5989: LD_EXP 19
5993: PPUSH
5994: LD_INT 1
5996: PPUSH
5997: CALL_OW 336
// lvyber = lvyber ^ koval ;
6001: LD_ADDR_VAR 0 2
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_EXP 19
6015: ADD
6016: ST_TO_ADDR
// end ; if schol > 0 then
6017: LD_EXP 20
6021: PUSH
6022: LD_INT 0
6024: GREATER
6025: IFFALSE 6069
// begin SetSide ( schol , You ) ;
6027: LD_EXP 20
6031: PPUSH
6032: LD_EXP 1
6036: PPUSH
6037: CALL_OW 235
// SetClass ( schol , class_scientistic ) ;
6041: LD_EXP 20
6045: PPUSH
6046: LD_INT 4
6048: PPUSH
6049: CALL_OW 336
// lvyber = lvyber ^ schol ;
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_VAR 0 2
6062: PUSH
6063: LD_EXP 20
6067: ADD
6068: ST_TO_ADDR
// end ; if kuzmov > 0 then
6069: LD_EXP 21
6073: PUSH
6074: LD_INT 0
6076: GREATER
6077: IFFALSE 6121
// begin SetSide ( kuzmov , You ) ;
6079: LD_EXP 21
6083: PPUSH
6084: LD_EXP 1
6088: PPUSH
6089: CALL_OW 235
// SetClass ( kuzmov , class_soldier ) ;
6093: LD_EXP 21
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 336
// lvyber = lvyber ^ kuzmov ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_VAR 0 2
6114: PUSH
6115: LD_EXP 21
6119: ADD
6120: ST_TO_ADDR
// end ; if karam > 0 then
6121: LD_EXP 22
6125: PUSH
6126: LD_INT 0
6128: GREATER
6129: IFFALSE 6173
// begin SetSide ( karam , You ) ;
6131: LD_EXP 22
6135: PPUSH
6136: LD_EXP 1
6140: PPUSH
6141: CALL_OW 235
// SetClass ( karam , class_soldier ) ;
6145: LD_EXP 22
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: CALL_OW 336
// lvyber = lvyber ^ karam ;
6157: LD_ADDR_VAR 0 2
6161: PUSH
6162: LD_VAR 0 2
6166: PUSH
6167: LD_EXP 22
6171: ADD
6172: ST_TO_ADDR
// end ; if petrov > 0 then
6173: LD_EXP 23
6177: PUSH
6178: LD_INT 0
6180: GREATER
6181: IFFALSE 6225
// begin SetSide ( petrov , You ) ;
6183: LD_EXP 23
6187: PPUSH
6188: LD_EXP 1
6192: PPUSH
6193: CALL_OW 235
// SetClass ( petrov , class_mechanic ) ;
6197: LD_EXP 23
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: CALL_OW 336
// lvyber = lvyber ^ petrov ;
6209: LD_ADDR_VAR 0 2
6213: PUSH
6214: LD_VAR 0 2
6218: PUSH
6219: LD_EXP 23
6223: ADD
6224: ST_TO_ADDR
// end ; if gleb > 0 then
6225: LD_EXP 24
6229: PUSH
6230: LD_INT 0
6232: GREATER
6233: IFFALSE 6277
// begin SetSide ( gleb , You ) ;
6235: LD_EXP 24
6239: PPUSH
6240: LD_EXP 1
6244: PPUSH
6245: CALL_OW 235
// SetClass ( gleb , class_mechanic ) ;
6249: LD_EXP 24
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 336
// lvyber = lvyber ^ gleb ;
6261: LD_ADDR_VAR 0 2
6265: PUSH
6266: LD_VAR 0 2
6270: PUSH
6271: LD_EXP 24
6275: ADD
6276: ST_TO_ADDR
// end ; if lipsch > 0 then
6277: LD_EXP 25
6281: PUSH
6282: LD_INT 0
6284: GREATER
6285: IFFALSE 6329
// begin SetSide ( lipsch , You ) ;
6287: LD_EXP 25
6291: PPUSH
6292: LD_EXP 1
6296: PPUSH
6297: CALL_OW 235
// SetClass ( lipsch , class_engineer ) ;
6301: LD_EXP 25
6305: PPUSH
6306: LD_INT 2
6308: PPUSH
6309: CALL_OW 336
// lvyber = lvyber ^ lipsch ;
6313: LD_ADDR_VAR 0 2
6317: PUSH
6318: LD_VAR 0 2
6322: PUSH
6323: LD_EXP 25
6327: ADD
6328: ST_TO_ADDR
// end ; if tito > 0 then
6329: LD_EXP 26
6333: PUSH
6334: LD_INT 0
6336: GREATER
6337: IFFALSE 6381
// begin SetSide ( tito , You ) ;
6339: LD_EXP 26
6343: PPUSH
6344: LD_EXP 1
6348: PPUSH
6349: CALL_OW 235
// SetClass ( tito , class_soldier ) ;
6353: LD_EXP 26
6357: PPUSH
6358: LD_INT 1
6360: PPUSH
6361: CALL_OW 336
// lvyber = lvyber ^ tito ;
6365: LD_ADDR_VAR 0 2
6369: PUSH
6370: LD_VAR 0 2
6374: PUSH
6375: LD_EXP 26
6379: ADD
6380: ST_TO_ADDR
// end ; if xavier > 0 then
6381: LD_EXP 27
6385: PUSH
6386: LD_INT 0
6388: GREATER
6389: IFFALSE 6433
// begin SetSide ( xavier , You ) ;
6391: LD_EXP 27
6395: PPUSH
6396: LD_EXP 1
6400: PPUSH
6401: CALL_OW 235
// SetClass ( xavier , class_soldier ) ;
6405: LD_EXP 27
6409: PPUSH
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 336
// lvyber = lvyber ^ xavier ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_EXP 27
6431: ADD
6432: ST_TO_ADDR
// end ; if obluk > 0 then
6433: LD_EXP 28
6437: PUSH
6438: LD_INT 0
6440: GREATER
6441: IFFALSE 6485
// begin SetSide ( obluk , You ) ;
6443: LD_EXP 28
6447: PPUSH
6448: LD_EXP 1
6452: PPUSH
6453: CALL_OW 235
// SetClass ( obluk , class_soldier ) ;
6457: LD_EXP 28
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: CALL_OW 336
// lvyber = lvyber ^ obluk ;
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: LD_VAR 0 2
6478: PUSH
6479: LD_EXP 28
6483: ADD
6484: ST_TO_ADDR
// end ; if kozlov > 0 then
6485: LD_EXP 29
6489: PUSH
6490: LD_INT 0
6492: GREATER
6493: IFFALSE 6537
// begin SetSide ( kozlov , You ) ;
6495: LD_EXP 29
6499: PPUSH
6500: LD_EXP 1
6504: PPUSH
6505: CALL_OW 235
// SetClass ( kozlov , class_soldier ) ;
6509: LD_EXP 29
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: CALL_OW 336
// lvyber = lvyber ^ kozlov ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: LD_EXP 29
6535: ADD
6536: ST_TO_ADDR
// end ; if TestCharacters ( survivors3 ) then
6537: LD_STRING survivors3
6539: PPUSH
6540: CALL_OW 28
6544: IFFALSE 6559
// pom := CreateCharacterSet ( survivors3 ) ;
6546: LD_ADDR_VAR 0 5
6550: PUSH
6551: LD_STRING survivors3
6553: PPUSH
6554: CALL_OW 31
6558: ST_TO_ADDR
// everybody := pom ;
6559: LD_ADDR_EXP 5
6563: PUSH
6564: LD_VAR 0 5
6568: ST_TO_ADDR
// for i in pom do
6569: LD_ADDR_VAR 0 3
6573: PUSH
6574: LD_VAR 0 5
6578: PUSH
6579: FOR_IN
6580: IFFALSE 6593
// nastav_povolani_podle_skilu ( i ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: CALL 10685 0 1
6591: GO 6579
6593: POP
6594: POP
// if pom < pocet_lidi_na_zacatku [ difficulty ] then
6595: LD_VAR 0 5
6599: PUSH
6600: LD_EXP 37
6604: PUSH
6605: LD_OWVAR 67
6609: ARRAY
6610: LESS
6611: IFFALSE 6685
// for i := 1 to ( pocet_lidi_na_zacatku [ difficulty ] - pom ) do
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_EXP 37
6627: PUSH
6628: LD_OWVAR 67
6632: ARRAY
6633: PUSH
6634: LD_VAR 0 5
6638: MINUS
6639: PUSH
6640: FOR_TO
6641: IFFALSE 6683
// pom = pom ^ get_human ( get_sex , Rand ( 1 , 4 ) , 6 ,  ) ;
6643: LD_ADDR_VAR 0 5
6647: PUSH
6648: LD_VAR 0 5
6652: PUSH
6653: CALL 7490 0 0
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: LD_INT 4
6663: PPUSH
6664: CALL_OW 12
6668: PPUSH
6669: LD_INT 6
6671: PPUSH
6672: LD_STRING 
6674: PPUSH
6675: CALL 7525 0 4
6679: ADD
6680: ST_TO_ADDR
6681: GO 6640
6683: POP
6684: POP
// lvyber = lvyber ^ pom ;
6685: LD_ADDR_VAR 0 2
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_VAR 0 5
6699: ADD
6700: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet_lidi_na_zacatku [ difficulty ] , pocet_lidi_na_zacatku [ difficulty ] , lvyber , [ [ class_engineer , 1 ] , [ class_scientistic , 0 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
6701: LD_ADDR_VAR 0 5
6705: PUSH
6706: LD_STRING Vyber si peopliky
6708: PPUSH
6709: LD_EXP 37
6713: PUSH
6714: LD_OWVAR 67
6718: ARRAY
6719: PPUSH
6720: LD_EXP 37
6724: PUSH
6725: LD_OWVAR 67
6729: ARRAY
6730: PPUSH
6731: LD_VAR 0 2
6735: PPUSH
6736: LD_INT 2
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 4
6748: PUSH
6749: LD_INT 0
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 3
6758: PUSH
6759: LD_INT 0
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 1
6768: PUSH
6769: LD_INT 0
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 42
6786: ST_TO_ADDR
// everybody := everybody union pom ;
6787: LD_ADDR_EXP 5
6791: PUSH
6792: LD_EXP 5
6796: PUSH
6797: LD_VAR 0 5
6801: UNION
6802: ST_TO_ADDR
// vyber = [ bur ] ;
6803: LD_ADDR_VAR 0 6
6807: PUSH
6808: LD_EXP 11
6812: PUSH
6813: EMPTY
6814: LIST
6815: ST_TO_ADDR
// vyber = vyber ^ pom ;
6816: LD_ADDR_VAR 0 6
6820: PUSH
6821: LD_VAR 0 6
6825: PUSH
6826: LD_VAR 0 5
6830: ADD
6831: ST_TO_ADDR
// result := vyber ;
6832: LD_ADDR_VAR 0 1
6836: PUSH
6837: LD_VAR 0 6
6841: ST_TO_ADDR
// end ;
6842: LD_VAR 0 1
6846: RET
// export function create_rusky_konvoj ( lidicci ) ; var pom ; var lpom ; begin
6847: LD_INT 0
6849: PPUSH
6850: PPUSH
6851: PPUSH
// pom = [ ] ;
6852: LD_ADDR_VAR 0 3
6856: PUSH
6857: EMPTY
6858: ST_TO_ADDR
// lpom = lidicci ;
6859: LD_ADDR_VAR 0 4
6863: PUSH
6864: LD_VAR 0 1
6868: ST_TO_ADDR
// uc_nation = nation_russian ;
6869: LD_ADDR_OWVAR 21
6873: PUSH
6874: LD_INT 3
6876: ST_TO_ADDR
// uc_side = You ;
6877: LD_ADDR_OWVAR 20
6881: PUSH
6882: LD_EXP 1
6886: ST_TO_ADDR
// vc_chassis = masha_l [ 1 ] ;
6887: LD_ADDR_OWVAR 37
6891: PUSH
6892: LD_EXP 52
6896: PUSH
6897: LD_INT 1
6899: ARRAY
6900: ST_TO_ADDR
// vc_engine = masha_l [ 2 ] ;
6901: LD_ADDR_OWVAR 39
6905: PUSH
6906: LD_EXP 52
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: ST_TO_ADDR
// vc_control = masha_l [ 3 ] ;
6915: LD_ADDR_OWVAR 38
6919: PUSH
6920: LD_EXP 52
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: ST_TO_ADDR
// vc_weapon = masha_l [ 4 ] ;
6929: LD_ADDR_OWVAR 40
6933: PUSH
6934: LD_EXP 52
6938: PUSH
6939: LD_INT 4
6941: ARRAY
6942: ST_TO_ADDR
// av = CreateVehicle ;
6943: LD_ADDR_LOC 5
6947: PUSH
6948: CALL_OW 45
6952: ST_TO_ADDR
// masha = av ;
6953: LD_ADDR_EXP 10
6957: PUSH
6958: LD_LOC 5
6962: ST_TO_ADDR
// SetMark ( masha , 1 ) ;
6963: LD_EXP 10
6967: PPUSH
6968: LD_INT 1
6970: PPUSH
6971: CALL_OW 242
// PlaceHumanInUnit ( bur , masha ) ;
6975: LD_EXP 11
6979: PPUSH
6980: LD_EXP 10
6984: PPUSH
6985: CALL_OW 52
// lpom = lpom diff bur ;
6989: LD_ADDR_VAR 0 4
6993: PUSH
6994: LD_VAR 0 4
6998: PUSH
6999: LD_EXP 11
7003: DIFF
7004: ST_TO_ADDR
// pom = pom ^ masha ;
7005: LD_ADDR_VAR 0 3
7009: PUSH
7010: LD_VAR 0 3
7014: PUSH
7015: LD_EXP 10
7019: ADD
7020: ST_TO_ADDR
// vc_control = control_manual ;
7021: LD_ADDR_OWVAR 38
7025: PUSH
7026: LD_INT 1
7028: ST_TO_ADDR
// vc_engine = engine_combustion ;
7029: LD_ADDR_OWVAR 39
7033: PUSH
7034: LD_INT 1
7036: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
7037: LD_ADDR_OWVAR 37
7041: PUSH
7042: LD_INT 22
7044: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
7045: LD_ADDR_OWVAR 40
7049: PUSH
7050: LD_INT 51
7052: ST_TO_ADDR
// av = CreateVehicle ;
7053: LD_ADDR_LOC 5
7057: PUSH
7058: CALL_OW 45
7062: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 1 ] , av ) ;
7063: LD_VAR 0 4
7067: PUSH
7068: LD_INT 1
7070: ARRAY
7071: PPUSH
7072: LD_LOC 5
7076: PPUSH
7077: CALL_OW 52
// AddCargo ( av , mat_cans , 100 ) ;
7081: LD_LOC 5
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 100
7091: PPUSH
7092: CALL_OW 291
// pom = pom ^ av ;
7096: LD_ADDR_VAR 0 3
7100: PUSH
7101: LD_VAR 0 3
7105: PUSH
7106: LD_LOC 5
7110: ADD
7111: ST_TO_ADDR
// av = CreateVehicle ;
7112: LD_ADDR_LOC 5
7116: PUSH
7117: CALL_OW 45
7121: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 2 ] , av ) ;
7122: LD_VAR 0 4
7126: PUSH
7127: LD_INT 2
7129: ARRAY
7130: PPUSH
7131: LD_LOC 5
7135: PPUSH
7136: CALL_OW 52
// AddCargo ( av , mat_cans , 50 ) ;
7140: LD_LOC 5
7144: PPUSH
7145: LD_INT 1
7147: PPUSH
7148: LD_INT 50
7150: PPUSH
7151: CALL_OW 291
// AddCargo ( av , mat_oil , 50 ) ;
7155: LD_LOC 5
7159: PPUSH
7160: LD_INT 2
7162: PPUSH
7163: LD_INT 50
7165: PPUSH
7166: CALL_OW 291
// pom = pom ^ av ;
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: LD_LOC 5
7184: ADD
7185: ST_TO_ADDR
// av = CreateVehicle ;
7186: LD_ADDR_LOC 5
7190: PUSH
7191: CALL_OW 45
7195: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 3 ] , av ) ;
7196: LD_VAR 0 4
7200: PUSH
7201: LD_INT 3
7203: ARRAY
7204: PPUSH
7205: LD_LOC 5
7209: PPUSH
7210: CALL_OW 52
// AddCargo ( av , mat_cans , 20 ) ;
7214: LD_LOC 5
7218: PPUSH
7219: LD_INT 1
7221: PPUSH
7222: LD_INT 20
7224: PPUSH
7225: CALL_OW 291
// AddCargo ( av , mat_oil , 40 ) ;
7229: LD_LOC 5
7233: PPUSH
7234: LD_INT 2
7236: PPUSH
7237: LD_INT 40
7239: PPUSH
7240: CALL_OW 291
// AddCargo ( av , mat_siberit , 20 ) ;
7244: LD_LOC 5
7248: PPUSH
7249: LD_INT 3
7251: PPUSH
7252: LD_INT 20
7254: PPUSH
7255: CALL_OW 291
// pom = pom ^ av ;
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_VAR 0 3
7268: PUSH
7269: LD_LOC 5
7273: ADD
7274: ST_TO_ADDR
// vc_weapon = ru_crane ;
7275: LD_ADDR_OWVAR 40
7279: PUSH
7280: LD_INT 52
7282: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
7283: LD_ADDR_OWVAR 37
7287: PUSH
7288: LD_INT 22
7290: ST_TO_ADDR
// av = CreateVehicle ;
7291: LD_ADDR_LOC 5
7295: PUSH
7296: CALL_OW 45
7300: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 4 ] , av ) ;
7301: LD_VAR 0 4
7305: PUSH
7306: LD_INT 4
7308: ARRAY
7309: PPUSH
7310: LD_LOC 5
7314: PPUSH
7315: CALL_OW 52
// pom = pom ^ av ;
7319: LD_ADDR_VAR 0 3
7323: PUSH
7324: LD_VAR 0 3
7328: PUSH
7329: LD_LOC 5
7333: ADD
7334: ST_TO_ADDR
// vc_weapon = zbran_na_uvod [ difficulty ] ;
7335: LD_ADDR_OWVAR 40
7339: PUSH
7340: LD_EXP 49
7344: PUSH
7345: LD_OWVAR 67
7349: ARRAY
7350: ST_TO_ADDR
// vc_chassis = chassis_na_uvod [ difficulty ] ;
7351: LD_ADDR_OWVAR 37
7355: PUSH
7356: LD_EXP 50
7360: PUSH
7361: LD_OWVAR 67
7365: ARRAY
7366: ST_TO_ADDR
// if difficulty < 3 then
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 3
7374: LESS
7375: IFFALSE 7421
// begin av = CreateVehicle ;
7377: LD_ADDR_LOC 5
7381: PUSH
7382: CALL_OW 45
7386: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 5 ] , av ) ;
7387: LD_VAR 0 4
7391: PUSH
7392: LD_INT 5
7394: ARRAY
7395: PPUSH
7396: LD_LOC 5
7400: PPUSH
7401: CALL_OW 52
// pom = pom ^ av ;
7405: LD_ADDR_VAR 0 3
7409: PUSH
7410: LD_VAR 0 3
7414: PUSH
7415: LD_LOC 5
7419: ADD
7420: ST_TO_ADDR
// end ; if difficulty < 2 then
7421: LD_OWVAR 67
7425: PUSH
7426: LD_INT 2
7428: LESS
7429: IFFALSE 7475
// begin av = CreateVehicle ;
7431: LD_ADDR_LOC 5
7435: PUSH
7436: CALL_OW 45
7440: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 6 ] , av ) ;
7441: LD_VAR 0 4
7445: PUSH
7446: LD_INT 6
7448: ARRAY
7449: PPUSH
7450: LD_LOC 5
7454: PPUSH
7455: CALL_OW 52
// pom = pom ^ av ;
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: LD_VAR 0 3
7468: PUSH
7469: LD_LOC 5
7473: ADD
7474: ST_TO_ADDR
// end ; RUSI_ENTER_LIST = pom ;
7475: LD_ADDR_EXP 31
7479: PUSH
7480: LD_VAR 0 3
7484: ST_TO_ADDR
// end ;
7485: LD_VAR 0 2
7489: RET
// function get_sex ; begin
7490: LD_INT 0
7492: PPUSH
// if Prob ( 20 ) then
7493: LD_INT 20
7495: PPUSH
7496: CALL_OW 13
7500: IFFALSE 7512
// result = sex_female else
7502: LD_ADDR_VAR 0 1
7506: PUSH
7507: LD_INT 2
7509: ST_TO_ADDR
7510: GO 7520
// result = sex_male ;
7512: LD_ADDR_VAR 0 1
7516: PUSH
7517: LD_INT 1
7519: ST_TO_ADDR
// end ;
7520: LD_VAR 0 1
7524: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
7525: LD_INT 0
7527: PPUSH
7528: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7529: LD_VAR 0 1
7533: PPUSH
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_VAR 0 3
7543: PPUSH
7544: CALL_OW 380
// hc_name := name ;
7548: LD_ADDR_OWVAR 26
7552: PUSH
7553: LD_VAR 0 4
7557: ST_TO_ADDR
// pom = CreateHuman ;
7558: LD_ADDR_VAR 0 6
7562: PUSH
7563: CALL_OW 44
7567: ST_TO_ADDR
// result := pom ;
7568: LD_ADDR_VAR 0 5
7572: PUSH
7573: LD_VAR 0 6
7577: ST_TO_ADDR
// end ;
7578: LD_VAR 0 5
7582: RET
// export function vytvor_araby ; begin
7583: LD_INT 0
7585: PPUSH
// uc_nation = nation_arabian ;
7586: LD_ADDR_OWVAR 21
7590: PUSH
7591: LD_INT 2
7593: ST_TO_ADDR
// uc_side = Arabi ;
7594: LD_ADDR_OWVAR 20
7598: PUSH
7599: LD_EXP 4
7603: ST_TO_ADDR
// diet = nacti_osobu ( Dietrich ) ;
7604: LD_ADDR_EXP 55
7608: PUSH
7609: LD_STRING Dietrich
7611: PPUSH
7612: CALL 7798 0 1
7616: ST_TO_ADDR
// SetSide ( diet , Arabi ) ;
7617: LD_EXP 55
7621: PPUSH
7622: LD_EXP 4
7626: PPUSH
7627: CALL_OW 235
// PlaceUnitXY ( diet , 76 , 19 , false ) ;
7631: LD_EXP 55
7635: PPUSH
7636: LD_INT 76
7638: PPUSH
7639: LD_INT 19
7641: PPUSH
7642: LD_INT 0
7644: PPUSH
7645: CALL_OW 48
// A2 = get_human ( sex_male , class_soldier , levely_arabi [ difficulty ] ,  ) ;
7649: LD_ADDR_EXP 56
7653: PUSH
7654: LD_INT 1
7656: PPUSH
7657: LD_INT 1
7659: PPUSH
7660: LD_EXP 38
7664: PUSH
7665: LD_OWVAR 67
7669: ARRAY
7670: PPUSH
7671: LD_STRING 
7673: PPUSH
7674: CALL 7525 0 4
7678: ST_TO_ADDR
// PlaceUnitXY ( A2 , 74 , 22 , false ) ;
7679: LD_EXP 56
7683: PPUSH
7684: LD_INT 74
7686: PPUSH
7687: LD_INT 22
7689: PPUSH
7690: LD_INT 0
7692: PPUSH
7693: CALL_OW 48
// A3 = get_human ( sex_male , class_engineer , levely_arabi [ difficulty ] ,  ) ;
7697: LD_ADDR_EXP 57
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_INT 2
7707: PPUSH
7708: LD_EXP 38
7712: PUSH
7713: LD_OWVAR 67
7717: ARRAY
7718: PPUSH
7719: LD_STRING 
7721: PPUSH
7722: CALL 7525 0 4
7726: ST_TO_ADDR
// PlaceUnitXY ( A3 , 74 , 21 , false ) ;
7727: LD_EXP 57
7731: PPUSH
7732: LD_INT 74
7734: PPUSH
7735: LD_INT 21
7737: PPUSH
7738: LD_INT 0
7740: PPUSH
7741: CALL_OW 48
// A4 = get_human ( sex_male , class_soldier , levely_arabi [ difficulty ] ,  ) ;
7745: LD_ADDR_EXP 58
7749: PUSH
7750: LD_INT 1
7752: PPUSH
7753: LD_INT 1
7755: PPUSH
7756: LD_EXP 38
7760: PUSH
7761: LD_OWVAR 67
7765: ARRAY
7766: PPUSH
7767: LD_STRING 
7769: PPUSH
7770: CALL 7525 0 4
7774: ST_TO_ADDR
// PlaceUnitXY ( A4 , 75 , 22 , false ) ;
7775: LD_EXP 58
7779: PPUSH
7780: LD_INT 75
7782: PPUSH
7783: LD_INT 22
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL_OW 48
// end ;
7793: LD_VAR 0 1
7797: RET
// export function nacti_osobu ( ident ) ; begin
7798: LD_INT 0
7800: PPUSH
// if CheckCharacterSet ( ident ) then
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 29
7810: IFFALSE 7829
// result := CreateCharacter ( ident ) else
7812: LD_ADDR_VAR 0 2
7816: PUSH
7817: LD_VAR 0 1
7821: PPUSH
7822: CALL_OW 34
7826: ST_TO_ADDR
7827: GO 7837
// result := 0 ;
7829: LD_ADDR_VAR 0 2
7833: PUSH
7834: LD_INT 0
7836: ST_TO_ADDR
// end ;
7837: LD_VAR 0 2
7841: RET
// export function vytvor_amiky ; begin
7842: LD_INT 0
7844: PPUSH
// uc_nation = nation_american ;
7845: LD_ADDR_OWVAR 21
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// uc_side = Amici ;
7853: LD_ADDR_OWVAR 20
7857: PUSH
7858: LD_EXP 2
7862: ST_TO_ADDR
// Joan = nacti_osobu ( Joan ) ;
7863: LD_ADDR_EXP 61
7867: PUSH
7868: LD_STRING Joan
7870: PPUSH
7871: CALL 7798 0 1
7875: ST_TO_ADDR
// SetClass ( Joan , class_scientistic ) ;
7876: LD_EXP 61
7880: PPUSH
7881: LD_INT 4
7883: PPUSH
7884: CALL_OW 336
// SetSide ( Joan , Amici ) ;
7888: LD_EXP 61
7892: PPUSH
7893: LD_EXP 2
7897: PPUSH
7898: CALL_OW 235
// JMM = nacti_osobu ( MacMillan ) ;
7902: LD_ADDR_EXP 60
7906: PUSH
7907: LD_STRING MacMillan
7909: PPUSH
7910: CALL 7798 0 1
7914: ST_TO_ADDR
// SetSide ( JMM , Amici ) ;
7915: LD_EXP 60
7919: PPUSH
7920: LD_EXP 2
7924: PPUSH
7925: CALL_OW 235
// SetClass ( JMM , class_soldier ) ;
7929: LD_EXP 60
7933: PPUSH
7934: LD_INT 1
7936: PPUSH
7937: CALL_OW 336
// PlaceUnitXY ( Joan , 111 , 41 , false ) ;
7941: LD_EXP 61
7945: PPUSH
7946: LD_INT 111
7948: PPUSH
7949: LD_INT 41
7951: PPUSH
7952: LD_INT 0
7954: PPUSH
7955: CALL_OW 48
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] , Karin Horak ) ;
7959: LD_ADDR_LOC 6
7963: PUSH
7964: LD_INT 2
7966: PPUSH
7967: LD_INT 4
7969: PPUSH
7970: LD_EXP 41
7974: PUSH
7975: LD_OWVAR 67
7979: ARRAY
7980: PPUSH
7981: LD_STRING Karin Horak
7983: PPUSH
7984: CALL 7525 0 4
7988: ST_TO_ADDR
// PlaceUnitXY ( ah , 107 , 30 , false ) ;
7989: LD_LOC 6
7993: PPUSH
7994: LD_INT 107
7996: PPUSH
7997: LD_INT 30
7999: PPUSH
8000: LD_INT 0
8002: PPUSH
8003: CALL_OW 48
// VEDCI1 = [ ah ] ;
8007: LD_ADDR_EXP 62
8011: PUSH
8012: LD_LOC 6
8016: PUSH
8017: EMPTY
8018: LIST
8019: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8020: LD_ADDR_LOC 6
8024: PUSH
8025: CALL 7490 0 0
8029: PPUSH
8030: LD_INT 4
8032: PPUSH
8033: LD_EXP 41
8037: PUSH
8038: LD_OWVAR 67
8042: ARRAY
8043: PPUSH
8044: LD_STRING 
8046: PPUSH
8047: CALL 7525 0 4
8051: ST_TO_ADDR
// PlaceUnitXY ( ah , 110 , 32 , false ) ;
8052: LD_LOC 6
8056: PPUSH
8057: LD_INT 110
8059: PPUSH
8060: LD_INT 32
8062: PPUSH
8063: LD_INT 0
8065: PPUSH
8066: CALL_OW 48
// VEDCI1 = VEDCI1 ^ ah ;
8070: LD_ADDR_EXP 62
8074: PUSH
8075: LD_EXP 62
8079: PUSH
8080: LD_LOC 6
8084: ADD
8085: ST_TO_ADDR
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8086: LD_ADDR_LOC 6
8090: PUSH
8091: LD_INT 2
8093: PPUSH
8094: LD_INT 4
8096: PPUSH
8097: LD_EXP 41
8101: PUSH
8102: LD_OWVAR 67
8106: ARRAY
8107: PPUSH
8108: LD_STRING 
8110: PPUSH
8111: CALL 7525 0 4
8115: ST_TO_ADDR
// PlaceUnitXY ( ah , 113 , 40 , false ) ;
8116: LD_LOC 6
8120: PPUSH
8121: LD_INT 113
8123: PPUSH
8124: LD_INT 40
8126: PPUSH
8127: LD_INT 0
8129: PPUSH
8130: CALL_OW 48
// VEDCI2 = [ ah ] ;
8134: LD_ADDR_EXP 63
8138: PUSH
8139: LD_LOC 6
8143: PUSH
8144: EMPTY
8145: LIST
8146: ST_TO_ADDR
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8147: LD_ADDR_LOC 6
8151: PUSH
8152: LD_INT 2
8154: PPUSH
8155: LD_INT 4
8157: PPUSH
8158: LD_EXP 41
8162: PUSH
8163: LD_OWVAR 67
8167: ARRAY
8168: PPUSH
8169: LD_STRING 
8171: PPUSH
8172: CALL 7525 0 4
8176: ST_TO_ADDR
// PlaceUnitXY ( ah , 112 , 40 , false ) ;
8177: LD_LOC 6
8181: PPUSH
8182: LD_INT 112
8184: PPUSH
8185: LD_INT 40
8187: PPUSH
8188: LD_INT 0
8190: PPUSH
8191: CALL_OW 48
// VEDCI2 = VEDCI2 ^ ah ;
8195: LD_ADDR_EXP 63
8199: PUSH
8200: LD_EXP 63
8204: PUSH
8205: LD_LOC 6
8209: ADD
8210: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8211: LD_ADDR_LOC 6
8215: PUSH
8216: CALL 7490 0 0
8220: PPUSH
8221: LD_INT 4
8223: PPUSH
8224: LD_EXP 41
8228: PUSH
8229: LD_OWVAR 67
8233: ARRAY
8234: PPUSH
8235: LD_STRING 
8237: PPUSH
8238: CALL 7525 0 4
8242: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 43 , false ) ;
8243: LD_LOC 6
8247: PPUSH
8248: LD_INT 106
8250: PPUSH
8251: LD_INT 43
8253: PPUSH
8254: LD_INT 0
8256: PPUSH
8257: CALL_OW 48
// VEDCI3 = [ ah ] ;
8261: LD_ADDR_EXP 64
8265: PUSH
8266: LD_LOC 6
8270: PUSH
8271: EMPTY
8272: LIST
8273: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8274: LD_ADDR_LOC 6
8278: PUSH
8279: CALL 7490 0 0
8283: PPUSH
8284: LD_INT 4
8286: PPUSH
8287: LD_EXP 41
8291: PUSH
8292: LD_OWVAR 67
8296: ARRAY
8297: PPUSH
8298: LD_STRING 
8300: PPUSH
8301: CALL 7525 0 4
8305: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 44 , false ) ;
8306: LD_LOC 6
8310: PPUSH
8311: LD_INT 106
8313: PPUSH
8314: LD_INT 44
8316: PPUSH
8317: LD_INT 0
8319: PPUSH
8320: CALL_OW 48
// VEDCI3 = VEDCI3 ^ ah ;
8324: LD_ADDR_EXP 64
8328: PUSH
8329: LD_EXP 64
8333: PUSH
8334: LD_LOC 6
8338: ADD
8339: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] + 1 , David Love ) ;
8340: LD_ADDR_LOC 6
8344: PUSH
8345: CALL 7490 0 0
8349: PPUSH
8350: LD_INT 3
8352: PPUSH
8353: LD_EXP 41
8357: PUSH
8358: LD_OWVAR 67
8362: ARRAY
8363: PUSH
8364: LD_INT 1
8366: PLUS
8367: PPUSH
8368: LD_STRING David Love
8370: PPUSH
8371: CALL 7525 0 4
8375: ST_TO_ADDR
// PlaceUnitXY ( ah , 105 , 29 , false ) ;
8376: LD_LOC 6
8380: PPUSH
8381: LD_INT 105
8383: PPUSH
8384: LD_INT 29
8386: PPUSH
8387: LD_INT 0
8389: PPUSH
8390: CALL_OW 48
// Am_mech = ah ;
8394: LD_ADDR_EXP 67
8398: PUSH
8399: LD_LOC 6
8403: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] + 1 ,  ) ;
8404: LD_ADDR_LOC 6
8408: PUSH
8409: CALL 7490 0 0
8413: PPUSH
8414: LD_INT 3
8416: PPUSH
8417: LD_EXP 41
8421: PUSH
8422: LD_OWVAR 67
8426: ARRAY
8427: PUSH
8428: LD_INT 1
8430: PLUS
8431: PPUSH
8432: LD_STRING 
8434: PPUSH
8435: CALL 7525 0 4
8439: ST_TO_ADDR
// PlaceUnitXY ( ah , 105 , 30 , false ) ;
8440: LD_LOC 6
8444: PPUSH
8445: LD_INT 105
8447: PPUSH
8448: LD_INT 30
8450: PPUSH
8451: LD_INT 0
8453: PPUSH
8454: CALL_OW 48
// Am_mech = Am_mech ^ ah ;
8458: LD_ADDR_EXP 67
8462: PUSH
8463: LD_EXP 67
8467: PUSH
8468: LD_LOC 6
8472: ADD
8473: ST_TO_ADDR
// prepare_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
8474: CALL 7490 0 0
8478: PPUSH
8479: LD_INT 3
8481: PPUSH
8482: LD_EXP 41
8486: PUSH
8487: LD_OWVAR 67
8491: ARRAY
8492: PPUSH
8493: LD_STRING 
8495: PPUSH
8496: CALL 8745 0 4
// SetSkill ( ah , skill_combat , 6 ) ;
8500: LD_LOC 6
8504: PPUSH
8505: LD_INT 1
8507: PPUSH
8508: LD_INT 6
8510: PPUSH
8511: CALL_OW 237
// ah = CreateHuman ;
8515: LD_ADDR_LOC 6
8519: PUSH
8520: CALL_OW 44
8524: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 39 , false ) ;
8525: LD_LOC 6
8529: PPUSH
8530: LD_INT 106
8532: PPUSH
8533: LD_INT 39
8535: PPUSH
8536: LD_INT 0
8538: PPUSH
8539: CALL_OW 48
// Am_vyr = ah ;
8543: LD_ADDR_EXP 68
8547: PUSH
8548: LD_LOC 6
8552: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , levely_amici [ difficulty ] ,  ) ;
8553: LD_ADDR_LOC 6
8557: PUSH
8558: LD_INT 1
8560: PPUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_EXP 41
8568: PUSH
8569: LD_OWVAR 67
8573: ARRAY
8574: PPUSH
8575: LD_STRING 
8577: PPUSH
8578: CALL 7525 0 4
8582: ST_TO_ADDR
// PlaceUnitXY ( ah , 104 , 39 , false ) ;
8583: LD_LOC 6
8587: PPUSH
8588: LD_INT 104
8590: PPUSH
8591: LD_INT 39
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL_OW 48
// Am_sol = [ ah ] ;
8601: LD_ADDR_EXP 66
8605: PUSH
8606: LD_LOC 6
8610: PUSH
8611: EMPTY
8612: LIST
8613: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , levely_amici [ difficulty ] ,  ) ;
8614: LD_ADDR_LOC 6
8618: PUSH
8619: LD_INT 1
8621: PPUSH
8622: LD_INT 1
8624: PPUSH
8625: LD_EXP 41
8629: PUSH
8630: LD_OWVAR 67
8634: ARRAY
8635: PPUSH
8636: LD_STRING 
8638: PPUSH
8639: CALL 7525 0 4
8643: ST_TO_ADDR
// PlaceUnitXY ( ah , 102 , 44 , false ) ;
8644: LD_LOC 6
8648: PPUSH
8649: LD_INT 102
8651: PPUSH
8652: LD_INT 44
8654: PPUSH
8655: LD_INT 0
8657: PPUSH
8658: CALL_OW 48
// Am_sol = Am_sol ^ ah ;
8662: LD_ADDR_EXP 66
8666: PUSH
8667: LD_EXP 66
8671: PUSH
8672: LD_LOC 6
8676: ADD
8677: ST_TO_ADDR
// ah = get_human ( sex_male , class_sniper , levely_amici [ difficulty ] - 2 ,  ) ;
8678: LD_ADDR_LOC 6
8682: PUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_INT 5
8688: PPUSH
8689: LD_EXP 41
8693: PUSH
8694: LD_OWVAR 67
8698: ARRAY
8699: PUSH
8700: LD_INT 2
8702: MINUS
8703: PPUSH
8704: LD_STRING 
8706: PPUSH
8707: CALL 7525 0 4
8711: ST_TO_ADDR
// PlaceUnitXY ( ah , 98 , 43 , false ) ;
8712: LD_LOC 6
8716: PPUSH
8717: LD_INT 98
8719: PPUSH
8720: LD_INT 43
8722: PPUSH
8723: LD_INT 0
8725: PPUSH
8726: CALL_OW 48
// Am_snipe = ah ;
8730: LD_ADDR_EXP 69
8734: PUSH
8735: LD_LOC 6
8739: ST_TO_ADDR
// end ;
8740: LD_VAR 0 1
8744: RET
// function prepare_human ( sex , clas , level , name ) ; begin
8745: LD_INT 0
8747: PPUSH
// PrepareHuman ( sex , clas , level ) ;
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_VAR 0 2
8757: PPUSH
8758: LD_VAR 0 3
8762: PPUSH
8763: CALL_OW 380
// hc_name := name ;
8767: LD_ADDR_OWVAR 26
8771: PUSH
8772: LD_VAR 0 4
8776: ST_TO_ADDR
// end ;
8777: LD_VAR 0 5
8781: RET
// export function create_first_utok ; var pom ; begin
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
// pom = [ ] ;
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: EMPTY
8792: ST_TO_ADDR
// uc_nation = nation_american ;
8793: LD_ADDR_OWVAR 21
8797: PUSH
8798: LD_INT 1
8800: ST_TO_ADDR
// uc_side = Amici2 ;
8801: LD_ADDR_OWVAR 20
8805: PUSH
8806: LD_EXP 3
8810: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8811: LD_ADDR_VAR 0 2
8815: PUSH
8816: CALL 7490 0 0
8820: PPUSH
8821: LD_INT 1
8823: PPUSH
8824: LD_EXP 41
8828: PUSH
8829: LD_OWVAR 67
8833: ARRAY
8834: PPUSH
8835: LD_STRING 
8837: PPUSH
8838: CALL 7525 0 4
8842: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8843: LD_ADDR_VAR 0 2
8847: PUSH
8848: LD_VAR 0 2
8852: PUSH
8853: CALL 7490 0 0
8857: PPUSH
8858: LD_INT 1
8860: PPUSH
8861: LD_EXP 41
8865: PUSH
8866: LD_OWVAR 67
8870: ARRAY
8871: PPUSH
8872: LD_STRING 
8874: PPUSH
8875: CALL 7525 0 4
8879: ADD
8880: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_VAR 0 2
8890: PUSH
8891: CALL 7490 0 0
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: LD_EXP 41
8903: PUSH
8904: LD_OWVAR 67
8908: ARRAY
8909: PPUSH
8910: LD_STRING 
8912: PPUSH
8913: CALL 7525 0 4
8917: ADD
8918: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
8919: LD_ADDR_LOC 6
8923: PUSH
8924: CALL 7490 0 0
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: LD_EXP 41
8936: PUSH
8937: LD_OWVAR 67
8941: ARRAY
8942: PUSH
8943: LD_INT 3
8945: MINUS
8946: PPUSH
8947: LD_STRING 
8949: PPUSH
8950: CALL 7525 0 4
8954: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
8955: LD_ADDR_OWVAR 37
8959: PUSH
8960: LD_INT 3
8962: ST_TO_ADDR
// vc_control = control_manual ;
8963: LD_ADDR_OWVAR 38
8967: PUSH
8968: LD_INT 1
8970: ST_TO_ADDR
// vc_engine = engine_combustion ;
8971: LD_ADDR_OWVAR 39
8975: PUSH
8976: LD_INT 1
8978: ST_TO_ADDR
// vc_weapon = us_double_gun ;
8979: LD_ADDR_OWVAR 40
8983: PUSH
8984: LD_INT 5
8986: ST_TO_ADDR
// av = CreateVehicle ;
8987: LD_ADDR_LOC 5
8991: PUSH
8992: CALL_OW 45
8996: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8997: LD_LOC 6
9001: PPUSH
9002: LD_LOC 5
9006: PPUSH
9007: CALL_OW 52
// pom = pom ^ av ;
9011: LD_ADDR_VAR 0 2
9015: PUSH
9016: LD_VAR 0 2
9020: PUSH
9021: LD_LOC 5
9025: ADD
9026: ST_TO_ADDR
// AM_UTOK_1_LIST = pom ;
9027: LD_ADDR_EXP 32
9031: PUSH
9032: LD_VAR 0 2
9036: ST_TO_ADDR
// end ;
9037: LD_VAR 0 1
9041: RET
// export function create_second_utok ; var pom ; begin
9042: LD_INT 0
9044: PPUSH
9045: PPUSH
// pom = [ ] ;
9046: LD_ADDR_VAR 0 2
9050: PUSH
9051: EMPTY
9052: ST_TO_ADDR
// uc_nation = nation_american ;
9053: LD_ADDR_OWVAR 21
9057: PUSH
9058: LD_INT 1
9060: ST_TO_ADDR
// uc_side = Amici2 ;
9061: LD_ADDR_OWVAR 20
9065: PUSH
9066: LD_EXP 3
9070: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9071: LD_ADDR_VAR 0 2
9075: PUSH
9076: CALL 7490 0 0
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: LD_EXP 41
9088: PUSH
9089: LD_OWVAR 67
9093: ARRAY
9094: PPUSH
9095: LD_STRING 
9097: PPUSH
9098: CALL 7525 0 4
9102: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: LD_VAR 0 2
9112: PUSH
9113: CALL 7490 0 0
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: LD_EXP 41
9125: PUSH
9126: LD_OWVAR 67
9130: ARRAY
9131: PPUSH
9132: LD_STRING 
9134: PPUSH
9135: CALL 7525 0 4
9139: ADD
9140: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9141: LD_ADDR_LOC 6
9145: PUSH
9146: CALL 7490 0 0
9150: PPUSH
9151: LD_INT 3
9153: PPUSH
9154: LD_EXP 41
9158: PUSH
9159: LD_OWVAR 67
9163: ARRAY
9164: PUSH
9165: LD_INT 3
9167: MINUS
9168: PPUSH
9169: LD_STRING 
9171: PPUSH
9172: CALL 7525 0 4
9176: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9177: LD_ADDR_OWVAR 37
9181: PUSH
9182: LD_INT 3
9184: ST_TO_ADDR
// vc_control = control_manual ;
9185: LD_ADDR_OWVAR 38
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// vc_engine = engine_combustion ;
9193: LD_ADDR_OWVAR 39
9197: PUSH
9198: LD_INT 1
9200: ST_TO_ADDR
// vc_weapon = us_double_gun ;
9201: LD_ADDR_OWVAR 40
9205: PUSH
9206: LD_INT 5
9208: ST_TO_ADDR
// av = CreateVehicle ;
9209: LD_ADDR_LOC 5
9213: PUSH
9214: CALL_OW 45
9218: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9219: LD_LOC 6
9223: PPUSH
9224: LD_LOC 5
9228: PPUSH
9229: CALL_OW 52
// pom = pom ^ av ;
9233: LD_ADDR_VAR 0 2
9237: PUSH
9238: LD_VAR 0 2
9242: PUSH
9243: LD_LOC 5
9247: ADD
9248: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9249: LD_ADDR_LOC 6
9253: PUSH
9254: CALL 7490 0 0
9258: PPUSH
9259: LD_INT 3
9261: PPUSH
9262: LD_EXP 41
9266: PUSH
9267: LD_OWVAR 67
9271: ARRAY
9272: PUSH
9273: LD_INT 3
9275: MINUS
9276: PPUSH
9277: LD_STRING 
9279: PPUSH
9280: CALL 7525 0 4
9284: ST_TO_ADDR
// av = CreateVehicle ;
9285: LD_ADDR_LOC 5
9289: PUSH
9290: CALL_OW 45
9294: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9295: LD_LOC 6
9299: PPUSH
9300: LD_LOC 5
9304: PPUSH
9305: CALL_OW 52
// pom = pom ^ av ;
9309: LD_ADDR_VAR 0 2
9313: PUSH
9314: LD_VAR 0 2
9318: PUSH
9319: LD_LOC 5
9323: ADD
9324: ST_TO_ADDR
// if difficulty > 2 then
9325: LD_OWVAR 67
9329: PUSH
9330: LD_INT 2
9332: GREATER
9333: IFFALSE 9443
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9335: LD_ADDR_LOC 6
9339: PUSH
9340: CALL 7490 0 0
9344: PPUSH
9345: LD_INT 3
9347: PPUSH
9348: LD_EXP 41
9352: PUSH
9353: LD_OWVAR 67
9357: ARRAY
9358: PUSH
9359: LD_INT 3
9361: MINUS
9362: PPUSH
9363: LD_STRING 
9365: PPUSH
9366: CALL 7525 0 4
9370: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9371: LD_ADDR_OWVAR 37
9375: PUSH
9376: LD_INT 3
9378: ST_TO_ADDR
// vc_control = control_manual ;
9379: LD_ADDR_OWVAR 38
9383: PUSH
9384: LD_INT 1
9386: ST_TO_ADDR
// vc_engine = engine_solar ;
9387: LD_ADDR_OWVAR 39
9391: PUSH
9392: LD_INT 2
9394: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
9395: LD_ADDR_OWVAR 40
9399: PUSH
9400: LD_INT 4
9402: ST_TO_ADDR
// av = CreateVehicle ;
9403: LD_ADDR_LOC 5
9407: PUSH
9408: CALL_OW 45
9412: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9413: LD_LOC 6
9417: PPUSH
9418: LD_LOC 5
9422: PPUSH
9423: CALL_OW 52
// pom = pom ^ av ;
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: LD_VAR 0 2
9436: PUSH
9437: LD_LOC 5
9441: ADD
9442: ST_TO_ADDR
// end ; AM_UTOK_2_LIST = pom ;
9443: LD_ADDR_EXP 33
9447: PUSH
9448: LD_VAR 0 2
9452: ST_TO_ADDR
// end ;
9453: LD_VAR 0 1
9457: RET
// export function create_third_utok ; var pom ; begin
9458: LD_INT 0
9460: PPUSH
9461: PPUSH
// pom = [ ] ;
9462: LD_ADDR_VAR 0 2
9466: PUSH
9467: EMPTY
9468: ST_TO_ADDR
// uc_nation = nation_american ;
9469: LD_ADDR_OWVAR 21
9473: PUSH
9474: LD_INT 1
9476: ST_TO_ADDR
// uc_side = Amici2 ;
9477: LD_ADDR_OWVAR 20
9481: PUSH
9482: LD_EXP 3
9486: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9487: LD_ADDR_VAR 0 2
9491: PUSH
9492: CALL 7490 0 0
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: LD_EXP 41
9504: PUSH
9505: LD_OWVAR 67
9509: ARRAY
9510: PPUSH
9511: LD_STRING 
9513: PPUSH
9514: CALL 7525 0 4
9518: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_sniper , levely_amici [ difficulty ] ,  ) ;
9519: LD_ADDR_VAR 0 2
9523: PUSH
9524: LD_VAR 0 2
9528: PUSH
9529: CALL 7490 0 0
9533: PPUSH
9534: LD_INT 5
9536: PPUSH
9537: LD_EXP 41
9541: PUSH
9542: LD_OWVAR 67
9546: ARRAY
9547: PPUSH
9548: LD_STRING 
9550: PPUSH
9551: CALL 7525 0 4
9555: ADD
9556: ST_TO_ADDR
// if difficulty > 2 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 2
9564: GREATER
9565: IFFALSE 9605
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9567: LD_ADDR_VAR 0 2
9571: PUSH
9572: LD_VAR 0 2
9576: PUSH
9577: CALL 7490 0 0
9581: PPUSH
9582: LD_INT 1
9584: PPUSH
9585: LD_EXP 41
9589: PUSH
9590: LD_OWVAR 67
9594: ARRAY
9595: PPUSH
9596: LD_STRING 
9598: PPUSH
9599: CALL 7525 0 4
9603: ADD
9604: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9605: LD_ADDR_LOC 6
9609: PUSH
9610: CALL 7490 0 0
9614: PPUSH
9615: LD_INT 3
9617: PPUSH
9618: LD_EXP 41
9622: PUSH
9623: LD_OWVAR 67
9627: ARRAY
9628: PUSH
9629: LD_INT 2
9631: MINUS
9632: PPUSH
9633: LD_STRING 
9635: PPUSH
9636: CALL 7525 0 4
9640: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9641: LD_ADDR_OWVAR 37
9645: PUSH
9646: LD_INT 3
9648: ST_TO_ADDR
// vc_control = control_manual ;
9649: LD_ADDR_OWVAR 38
9653: PUSH
9654: LD_INT 1
9656: ST_TO_ADDR
// vc_engine = engine_combustion ;
9657: LD_ADDR_OWVAR 39
9661: PUSH
9662: LD_INT 1
9664: ST_TO_ADDR
// vc_weapon = us_double_gun ;
9665: LD_ADDR_OWVAR 40
9669: PUSH
9670: LD_INT 5
9672: ST_TO_ADDR
// av = CreateVehicle ;
9673: LD_ADDR_LOC 5
9677: PUSH
9678: CALL_OW 45
9682: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9683: LD_LOC 6
9687: PPUSH
9688: LD_LOC 5
9692: PPUSH
9693: CALL_OW 52
// pom = pom ^ av ;
9697: LD_ADDR_VAR 0 2
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: LD_LOC 5
9711: ADD
9712: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9713: LD_ADDR_LOC 6
9717: PUSH
9718: CALL 7490 0 0
9722: PPUSH
9723: LD_INT 3
9725: PPUSH
9726: LD_EXP 41
9730: PUSH
9731: LD_OWVAR 67
9735: ARRAY
9736: PUSH
9737: LD_INT 2
9739: MINUS
9740: PPUSH
9741: LD_STRING 
9743: PPUSH
9744: CALL 7525 0 4
9748: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
9749: LD_ADDR_OWVAR 37
9753: PUSH
9754: LD_INT 4
9756: ST_TO_ADDR
// vc_weapon = us_heavy_gun ;
9757: LD_ADDR_OWVAR 40
9761: PUSH
9762: LD_INT 6
9764: ST_TO_ADDR
// av = CreateVehicle ;
9765: LD_ADDR_LOC 5
9769: PUSH
9770: CALL_OW 45
9774: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9775: LD_LOC 6
9779: PPUSH
9780: LD_LOC 5
9784: PPUSH
9785: CALL_OW 52
// pom = pom ^ av ;
9789: LD_ADDR_VAR 0 2
9793: PUSH
9794: LD_VAR 0 2
9798: PUSH
9799: LD_LOC 5
9803: ADD
9804: ST_TO_ADDR
// AM_UTOK_3_LIST = pom ;
9805: LD_ADDR_EXP 34
9809: PUSH
9810: LD_VAR 0 2
9814: ST_TO_ADDR
// end ;
9815: LD_VAR 0 1
9819: RET
// export function create_JMM_revange ; var pom , i ; begin
9820: LD_INT 0
9822: PPUSH
9823: PPUSH
9824: PPUSH
// pom = [ ] ;
9825: LD_ADDR_VAR 0 2
9829: PUSH
9830: EMPTY
9831: ST_TO_ADDR
// uc_nation = nation_american ;
9832: LD_ADDR_OWVAR 21
9836: PUSH
9837: LD_INT 1
9839: ST_TO_ADDR
// uc_side = Amici2 ;
9840: LD_ADDR_OWVAR 20
9844: PUSH
9845: LD_EXP 3
9849: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9850: LD_ADDR_VAR 0 2
9854: PUSH
9855: CALL 7490 0 0
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: LD_EXP 41
9867: PUSH
9868: LD_OWVAR 67
9872: ARRAY
9873: PPUSH
9874: LD_STRING 
9876: PPUSH
9877: CALL 7525 0 4
9881: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_sniper , levely_amici [ difficulty ] ,  ) ;
9882: LD_ADDR_VAR 0 2
9886: PUSH
9887: LD_VAR 0 2
9891: PUSH
9892: CALL 7490 0 0
9896: PPUSH
9897: LD_INT 5
9899: PPUSH
9900: LD_EXP 41
9904: PUSH
9905: LD_OWVAR 67
9909: ARRAY
9910: PPUSH
9911: LD_STRING 
9913: PPUSH
9914: CALL 7525 0 4
9918: ADD
9919: ST_TO_ADDR
// if difficulty > 2 then
9920: LD_OWVAR 67
9924: PUSH
9925: LD_INT 2
9927: GREATER
9928: IFFALSE 9968
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9930: LD_ADDR_VAR 0 2
9934: PUSH
9935: LD_VAR 0 2
9939: PUSH
9940: CALL 7490 0 0
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: LD_EXP 41
9952: PUSH
9953: LD_OWVAR 67
9957: ARRAY
9958: PPUSH
9959: LD_STRING 
9961: PPUSH
9962: CALL 7525 0 4
9966: ADD
9967: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9968: LD_ADDR_LOC 6
9972: PUSH
9973: CALL 7490 0 0
9977: PPUSH
9978: LD_INT 3
9980: PPUSH
9981: LD_EXP 41
9985: PUSH
9986: LD_OWVAR 67
9990: ARRAY
9991: PUSH
9992: LD_INT 2
9994: MINUS
9995: PPUSH
9996: LD_STRING 
9998: PPUSH
9999: CALL 7525 0 4
10003: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
10004: LD_ADDR_OWVAR 37
10008: PUSH
10009: LD_INT 4
10011: ST_TO_ADDR
// vc_weapon = us_heavy_gun ;
10012: LD_ADDR_OWVAR 40
10016: PUSH
10017: LD_INT 6
10019: ST_TO_ADDR
// av = CreateVehicle ;
10020: LD_ADDR_LOC 5
10024: PUSH
10025: CALL_OW 45
10029: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10030: LD_LOC 6
10034: PPUSH
10035: LD_LOC 5
10039: PPUSH
10040: CALL_OW 52
// pom = pom ^ av ;
10044: LD_ADDR_VAR 0 2
10048: PUSH
10049: LD_VAR 0 2
10053: PUSH
10054: LD_LOC 5
10058: ADD
10059: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 4 ,  ) ;
10060: LD_ADDR_LOC 6
10064: PUSH
10065: CALL 7490 0 0
10069: PPUSH
10070: LD_INT 3
10072: PPUSH
10073: LD_EXP 41
10077: PUSH
10078: LD_OWVAR 67
10082: ARRAY
10083: PUSH
10084: LD_INT 4
10086: MINUS
10087: PPUSH
10088: LD_STRING 
10090: PPUSH
10091: CALL 7525 0 4
10095: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
10096: LD_ADDR_OWVAR 37
10100: PUSH
10101: LD_INT 3
10103: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10104: LD_ADDR_OWVAR 40
10108: PUSH
10109: LD_INT 4
10111: ST_TO_ADDR
// av = CreateVehicle ;
10112: LD_ADDR_LOC 5
10116: PUSH
10117: CALL_OW 45
10121: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10122: LD_LOC 6
10126: PPUSH
10127: LD_LOC 5
10131: PPUSH
10132: CALL_OW 52
// pom = pom ^ av ;
10136: LD_ADDR_VAR 0 2
10140: PUSH
10141: LD_VAR 0 2
10145: PUSH
10146: LD_LOC 5
10150: ADD
10151: ST_TO_ADDR
// if prob ( 50 ) then
10152: LD_INT 50
10154: PPUSH
10155: CALL_OW 13
10159: IFFALSE 10187
// begin av = CreateVehicle ;
10161: LD_ADDR_LOC 5
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// pom = pom ^ av ;
10171: LD_ADDR_VAR 0 2
10175: PUSH
10176: LD_VAR 0 2
10180: PUSH
10181: LD_LOC 5
10185: ADD
10186: ST_TO_ADDR
// end ; if difficulty > 1 then
10187: LD_OWVAR 67
10191: PUSH
10192: LD_INT 1
10194: GREATER
10195: IFFALSE 10235
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
10197: LD_ADDR_VAR 0 2
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: CALL 7490 0 0
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: LD_EXP 41
10219: PUSH
10220: LD_OWVAR 67
10224: ARRAY
10225: PPUSH
10226: LD_STRING 
10228: PPUSH
10229: CALL 7525 0 4
10233: ADD
10234: ST_TO_ADDR
// if prob ( 50 ) and difficulty > 1 then
10235: LD_INT 50
10237: PPUSH
10238: CALL_OW 13
10242: PUSH
10243: LD_OWVAR 67
10247: PUSH
10248: LD_INT 1
10250: GREATER
10251: AND
10252: IFFALSE 10322
// for i = 1 to Rand ( 1 , difficulty ) do
10254: LD_ADDR_VAR 0 3
10258: PUSH
10259: DOUBLE
10260: LD_INT 1
10262: DEC
10263: ST_TO_ADDR
10264: LD_INT 1
10266: PPUSH
10267: LD_OWVAR 67
10271: PPUSH
10272: CALL_OW 12
10276: PUSH
10277: FOR_TO
10278: IFFALSE 10320
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
10280: LD_ADDR_VAR 0 2
10284: PUSH
10285: LD_VAR 0 2
10289: PUSH
10290: CALL 7490 0 0
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: LD_EXP 41
10302: PUSH
10303: LD_OWVAR 67
10307: ARRAY
10308: PPUSH
10309: LD_STRING 
10311: PPUSH
10312: CALL 7525 0 4
10316: ADD
10317: ST_TO_ADDR
10318: GO 10277
10320: POP
10321: POP
// result := pom ;
10322: LD_ADDR_VAR 0 1
10326: PUSH
10327: LD_VAR 0 2
10331: ST_TO_ADDR
// end ;
10332: LD_VAR 0 1
10336: RET
// export function create_pre_attack ; var i , pom ; var PC ; begin
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
10341: PPUSH
10342: PPUSH
// pom = [ ] ;
10343: LD_ADDR_VAR 0 3
10347: PUSH
10348: EMPTY
10349: ST_TO_ADDR
// uc_nation = nation_american ;
10350: LD_ADDR_OWVAR 21
10354: PUSH
10355: LD_INT 1
10357: ST_TO_ADDR
// uc_side = Amici2 ;
10358: LD_ADDR_OWVAR 20
10362: PUSH
10363: LD_EXP 3
10367: ST_TO_ADDR
// PC = counter_utoku ;
10368: LD_ADDR_VAR 0 4
10372: PUSH
10373: LD_EXP 72
10377: ST_TO_ADDR
// for i in Rand ( 1 , 3 ) + difficulty do
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 1
10385: PPUSH
10386: LD_INT 3
10388: PPUSH
10389: CALL_OW 12
10393: PUSH
10394: LD_OWVAR 67
10398: PLUS
10399: PUSH
10400: FOR_IN
10401: IFFALSE 10461
// begin pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 2 ,  ) ;
10403: LD_ADDR_VAR 0 3
10407: PUSH
10408: LD_VAR 0 3
10412: PUSH
10413: CALL 7490 0 0
10417: PPUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_EXP 41
10425: PUSH
10426: LD_OWVAR 67
10430: ARRAY
10431: PUSH
10432: LD_INT 2
10434: MINUS
10435: PPUSH
10436: LD_STRING 
10438: PPUSH
10439: CALL 7525 0 4
10443: ADD
10444: ST_TO_ADDR
// counter_utoku = counter_utoku + 1 ;
10445: LD_ADDR_EXP 72
10449: PUSH
10450: LD_EXP 72
10454: PUSH
10455: LD_INT 1
10457: PLUS
10458: ST_TO_ADDR
// end ;
10459: GO 10400
10461: POP
10462: POP
// PC = PC - 1 ;
10463: LD_ADDR_VAR 0 4
10467: PUSH
10468: LD_VAR 0 4
10472: PUSH
10473: LD_INT 1
10475: MINUS
10476: ST_TO_ADDR
// if counter_utoku > 10 then
10477: LD_EXP 72
10481: PUSH
10482: LD_INT 10
10484: GREATER
10485: IFFALSE 10590
// begin vc_chassis = us_medium_tracked ;
10487: LD_ADDR_OWVAR 37
10491: PUSH
10492: LD_INT 3
10494: ST_TO_ADDR
// vc_engine = engine_combustion ;
10495: LD_ADDR_OWVAR 39
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// vc_control = control_computer ;
10503: LD_ADDR_OWVAR 38
10507: PUSH
10508: LD_INT 3
10510: ST_TO_ADDR
// vc_weapon = [ us_light_gun , us_gatling_gun , us_double_gun , us_machine_gun ] [ Rand ( 1 , 4 ) ] ;
10511: LD_ADDR_OWVAR 40
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: LD_INT 4
10521: PUSH
10522: LD_INT 5
10524: PUSH
10525: LD_INT 2
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 1
10536: PPUSH
10537: LD_INT 4
10539: PPUSH
10540: CALL_OW 12
10544: ARRAY
10545: ST_TO_ADDR
// pom = pom ^ av ;
10546: LD_ADDR_VAR 0 3
10550: PUSH
10551: LD_VAR 0 3
10555: PUSH
10556: LD_LOC 5
10560: ADD
10561: ST_TO_ADDR
// counter_utoku = counter_utoku - 5 ;
10562: LD_ADDR_EXP 72
10566: PUSH
10567: LD_EXP 72
10571: PUSH
10572: LD_INT 5
10574: MINUS
10575: ST_TO_ADDR
// PC = PC - 10 ;
10576: LD_ADDR_VAR 0 4
10580: PUSH
10581: LD_VAR 0 4
10585: PUSH
10586: LD_INT 10
10588: MINUS
10589: ST_TO_ADDR
// end ; if counter_utoku > 5 then
10590: LD_EXP 72
10594: PUSH
10595: LD_INT 5
10597: GREATER
10598: IFFALSE 10670
// begin pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] + 1 ,  ) ;
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: LD_VAR 0 3
10609: PUSH
10610: CALL 7490 0 0
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: LD_EXP 41
10622: PUSH
10623: LD_OWVAR 67
10627: ARRAY
10628: PUSH
10629: LD_INT 1
10631: PLUS
10632: PPUSH
10633: LD_STRING 
10635: PPUSH
10636: CALL 7525 0 4
10640: ADD
10641: ST_TO_ADDR
// counter_utoku = counter_utoku - 1 ;
10642: LD_ADDR_EXP 72
10646: PUSH
10647: LD_EXP 72
10651: PUSH
10652: LD_INT 1
10654: MINUS
10655: ST_TO_ADDR
// PC = PC - 3 ;
10656: LD_ADDR_VAR 0 4
10660: PUSH
10661: LD_VAR 0 4
10665: PUSH
10666: LD_INT 3
10668: MINUS
10669: ST_TO_ADDR
// end ; result := pom ;
10670: LD_ADDR_VAR 0 1
10674: PUSH
10675: LD_VAR 0 3
10679: ST_TO_ADDR
// end ;
10680: LD_VAR 0 1
10684: RET
// function nastav_povolani_podle_skilu ( voj ) ; var comb , eng , sci , mech ; var classa ; begin
10685: LD_INT 0
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
10691: PPUSH
10692: PPUSH
// mech = GetSkill ( voj , skill_mechanical ) ;
10693: LD_ADDR_VAR 0 6
10697: PUSH
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_INT 3
10705: PPUSH
10706: CALL_OW 259
10710: ST_TO_ADDR
// eng = GetSkill ( voj , skill_engineering ) ;
10711: LD_ADDR_VAR 0 4
10715: PUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: LD_INT 2
10723: PPUSH
10724: CALL_OW 259
10728: ST_TO_ADDR
// sci = GetSkill ( voj , skill_scientistic ) ;
10729: LD_ADDR_VAR 0 5
10733: PUSH
10734: LD_VAR 0 1
10738: PPUSH
10739: LD_INT 4
10741: PPUSH
10742: CALL_OW 259
10746: ST_TO_ADDR
// comb = GetSkill ( voj , skill_combat ) ;
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_VAR 0 1
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 259
10764: ST_TO_ADDR
// if comb >= eng and comb >= sci and comb >= mech then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_VAR 0 4
10774: GREATEREQUAL
10775: PUSH
10776: LD_VAR 0 3
10780: PUSH
10781: LD_VAR 0 5
10785: GREATEREQUAL
10786: AND
10787: PUSH
10788: LD_VAR 0 3
10792: PUSH
10793: LD_VAR 0 6
10797: GREATEREQUAL
10798: AND
10799: IFFALSE 10811
// classa = class_soldier else
10801: LD_ADDR_VAR 0 7
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
10809: GO 10957
// if eng >= comb and eng >= mech and eng >= sci then
10811: LD_VAR 0 4
10815: PUSH
10816: LD_VAR 0 3
10820: GREATEREQUAL
10821: PUSH
10822: LD_VAR 0 4
10826: PUSH
10827: LD_VAR 0 6
10831: GREATEREQUAL
10832: AND
10833: PUSH
10834: LD_VAR 0 4
10838: PUSH
10839: LD_VAR 0 5
10843: GREATEREQUAL
10844: AND
10845: IFFALSE 10857
// classa = class_engineer else
10847: LD_ADDR_VAR 0 7
10851: PUSH
10852: LD_INT 2
10854: ST_TO_ADDR
10855: GO 10957
// if sci >= eng and sci >= mech and sci >= comb then
10857: LD_VAR 0 5
10861: PUSH
10862: LD_VAR 0 4
10866: GREATEREQUAL
10867: PUSH
10868: LD_VAR 0 5
10872: PUSH
10873: LD_VAR 0 6
10877: GREATEREQUAL
10878: AND
10879: PUSH
10880: LD_VAR 0 5
10884: PUSH
10885: LD_VAR 0 3
10889: GREATEREQUAL
10890: AND
10891: IFFALSE 10903
// classa = class_scientistic else
10893: LD_ADDR_VAR 0 7
10897: PUSH
10898: LD_INT 4
10900: ST_TO_ADDR
10901: GO 10957
// if mech >= comb and mech >= eng and mech >= sci then
10903: LD_VAR 0 6
10907: PUSH
10908: LD_VAR 0 3
10912: GREATEREQUAL
10913: PUSH
10914: LD_VAR 0 6
10918: PUSH
10919: LD_VAR 0 4
10923: GREATEREQUAL
10924: AND
10925: PUSH
10926: LD_VAR 0 6
10930: PUSH
10931: LD_VAR 0 5
10935: GREATEREQUAL
10936: AND
10937: IFFALSE 10949
// classa = class_mechanic else
10939: LD_ADDR_VAR 0 7
10943: PUSH
10944: LD_INT 3
10946: ST_TO_ADDR
10947: GO 10957
// classa = class_soldier ;
10949: LD_ADDR_VAR 0 7
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// SetClass ( voj , classa ) ;
10957: LD_VAR 0 1
10961: PPUSH
10962: LD_VAR 0 7
10966: PPUSH
10967: CALL_OW 336
// end ; end_of_file
10971: LD_VAR 0 2
10975: RET
// export CHASSIS_FOR_VEHICLE ; export GUN_FOR_VEHICLE ; export pocet_lidi_na_zacatku ; export levely_arabi ; export levely_budovy_arabi ; export levely_budovy_amici ; export levely_amici ; export cas_utoku_amiku ; export max_pocet_aut ; export delay_beden ; export cas_prvniho_utoku ; export cas_na_odchod_vedcu ; export doba_od_utoku_k_uteku_vedcu ; export wait_mcmillanova_pomsta ; export zbran_na_uvod ; export chassis_na_uvod ; export cas_na_opakovani_preattacku ; export masha_l ; export maccepted ; export mhandedover ; export function SET_DIFFICULTY ; begin
10976: LD_INT 0
10978: PPUSH
// GUN_FOR_VEHICLE = [ ru_heavy_gun , ru_gun , ru_gatling_gun ] ;
10979: LD_ADDR_EXP 36
10983: PUSH
10984: LD_INT 46
10986: PUSH
10987: LD_INT 44
10989: PUSH
10990: LD_INT 43
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: ST_TO_ADDR
// CHASSIS_FOR_VEHICLE = [ ru_heavy_tracked , ru_medium_tracked , ru_heavy_wheeled ] ;
10998: LD_ADDR_EXP 35
11002: PUSH
11003: LD_INT 24
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_INT 23
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: LIST
11016: ST_TO_ADDR
// pocet_lidi_na_zacatku = [ 6 , 5 , 4 ] ;
11017: LD_ADDR_EXP 37
11021: PUSH
11022: LD_INT 6
11024: PUSH
11025: LD_INT 5
11027: PUSH
11028: LD_INT 4
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: ST_TO_ADDR
// levely_arabi = [ 6 , 7 , 8 ] ;
11036: LD_ADDR_EXP 38
11040: PUSH
11041: LD_INT 6
11043: PUSH
11044: LD_INT 7
11046: PUSH
11047: LD_INT 8
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: ST_TO_ADDR
// levely_budovy_arabi = [ 7 , 8 , 9 ] ;
11055: LD_ADDR_EXP 39
11059: PUSH
11060: LD_INT 7
11062: PUSH
11063: LD_INT 8
11065: PUSH
11066: LD_INT 9
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: ST_TO_ADDR
// levely_budovy_amici = [ 3 , 5 , 7 ] ;
11074: LD_ADDR_EXP 40
11078: PUSH
11079: LD_INT 3
11081: PUSH
11082: LD_INT 5
11084: PUSH
11085: LD_INT 7
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: ST_TO_ADDR
// levely_amici = [ 7 , 8 , 9 ] ;
11093: LD_ADDR_EXP 41
11097: PUSH
11098: LD_INT 7
11100: PUSH
11101: LD_INT 8
11103: PUSH
11104: LD_INT 9
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: ST_TO_ADDR
// cas_utoku_amiku = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
11112: LD_ADDR_EXP 42
11116: PUSH
11117: LD_INT 10500
11119: PUSH
11120: LD_INT 8400
11122: PUSH
11123: LD_INT 6300
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: ST_TO_ADDR
// max_pocet_aut = [ 3 , 4 , 5 ] ;
11131: LD_ADDR_EXP 43
11135: PUSH
11136: LD_INT 3
11138: PUSH
11139: LD_INT 4
11141: PUSH
11142: LD_INT 5
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// delay_beden = [ 0 0$30 , 0 0$50 , 1 1$10 ] ;
11150: LD_ADDR_EXP 44
11154: PUSH
11155: LD_INT 1050
11157: PUSH
11158: LD_INT 1750
11160: PUSH
11161: LD_INT 2450
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: ST_TO_ADDR
// cas_prvniho_utoku = [ 7 7$0 , 6 6$0 , 5 5$0 ] ;
11169: LD_ADDR_EXP 45
11173: PUSH
11174: LD_INT 14700
11176: PUSH
11177: LD_INT 12600
11179: PUSH
11180: LD_INT 10500
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: ST_TO_ADDR
// cas_na_odchod_vedcu = [ 40 40$0 , 28 28$0 , 18 18$0 ] ;
11188: LD_ADDR_EXP 46
11192: PUSH
11193: LD_INT 84000
11195: PUSH
11196: LD_INT 58800
11198: PUSH
11199: LD_INT 37800
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// doba_od_utoku_k_uteku_vedcu = [ 8 8$0 , 6 6$0 , 4 4$0 ] ;
11207: LD_ADDR_EXP 47
11211: PUSH
11212: LD_INT 16800
11214: PUSH
11215: LD_INT 12600
11217: PUSH
11218: LD_INT 8400
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: ST_TO_ADDR
// wait_mcmillanova_pomsta = [ 12 12$0 , 9 9$0 , 6 6$0 ] ;
11226: LD_ADDR_EXP 48
11230: PUSH
11231: LD_INT 25200
11233: PUSH
11234: LD_INT 18900
11236: PUSH
11237: LD_INT 12600
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: ST_TO_ADDR
// zbran_na_uvod = [ ru_heavy_gun , ru_gun , ru_gatling_gun ] ;
11245: LD_ADDR_EXP 49
11249: PUSH
11250: LD_INT 46
11252: PUSH
11253: LD_INT 44
11255: PUSH
11256: LD_INT 43
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: ST_TO_ADDR
// chassis_na_uvod = [ ru_heavy_tracked , ru_medium_tracked , ru_medium_wheeled ] ;
11264: LD_ADDR_EXP 50
11268: PUSH
11269: LD_INT 24
11271: PUSH
11272: LD_INT 22
11274: PUSH
11275: LD_INT 21
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// cas_na_opakovani_preattacku = [ 5 5$0 , 3 3$0 , 2 2$0 ] ;
11283: LD_ADDR_EXP 51
11287: PUSH
11288: LD_INT 10500
11290: PUSH
11291: LD_INT 6300
11293: PUSH
11294: LD_INT 4200
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: ST_TO_ADDR
// end ; end_of_file
11302: LD_VAR 0 1
11306: RET
// export diet ; export A2 ; export A3 ; export A4 ; var Arabi_enter ; var Arabi_opoce ; export Arabi_vztah ; every 0 0$0.1 do var i ;
11307: GO 11309
11309: DISABLE
11310: LD_INT 0
11312: PPUSH
// begin Arabi_enter = [ A1 , A2 , A3 , A4 , diet ] ;
11313: LD_ADDR_LOC 7
11317: PUSH
11318: LD_INT 134
11320: PUSH
11321: LD_EXP 56
11325: PUSH
11326: LD_EXP 57
11330: PUSH
11331: LD_EXP 58
11335: PUSH
11336: LD_EXP 55
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: ST_TO_ADDR
// Arabi_opoce = [ Op1 , Op2 , Op3 , OP_dep ] ;
11348: LD_ADDR_LOC 8
11352: PUSH
11353: LD_INT 139
11355: PUSH
11356: LD_INT 138
11358: PUSH
11359: LD_INT 135
11361: PUSH
11362: LD_INT 184
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: ST_TO_ADDR
// Arabi_vztah = 1 ;
11371: LD_ADDR_EXP 59
11375: PUSH
11376: LD_INT 1
11378: ST_TO_ADDR
// for i in [ 101 , 102 ] do
11379: LD_ADDR_VAR 0 1
11383: PUSH
11384: LD_INT 101
11386: PUSH
11387: LD_INT 102
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11404
// disable ( i ) ;
11397: LD_VAR 0 1
11401: DISABLE_MARKED
11402: GO 11394
11404: POP
11405: POP
// ComEnterUnit ( OP_dep , Ar_dep ) ;
11406: LD_INT 184
11408: PPUSH
11409: LD_INT 58
11411: PPUSH
11412: CALL_OW 120
// end ;
11416: PPOPN 1
11418: END
// export function arabi_north_okamzite ; var i ; begin
11419: LD_INT 0
11421: PPUSH
11422: PPUSH
// wait ( 0 0$5 ) ;
11423: LD_INT 175
11425: PPUSH
11426: CALL_OW 67
// for i in Arabi_enter do
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_LOC 7
11439: PUSH
11440: FOR_IN
11441: IFFALSE 11465
// if IsInUnit ( i ) then
11443: LD_VAR 0 2
11447: PPUSH
11448: CALL_OW 310
11452: IFFALSE 11463
// ComExitBuilding ( i ) ;
11454: LD_VAR 0 2
11458: PPUSH
11459: CALL_OW 122
11463: GO 11440
11465: POP
11466: POP
// AddComMoveXY ( Arabi_enter , 59 , 1 ) ;
11467: LD_LOC 7
11471: PPUSH
11472: LD_INT 59
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 171
// enable ( 101 ) ;
11482: LD_INT 101
11484: ENABLE_MARKED
// for i in Arabi_opoce do
11485: LD_ADDR_VAR 0 2
11489: PUSH
11490: LD_LOC 8
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11520
// if IsInUnit ( i ) then
11498: LD_VAR 0 2
11502: PPUSH
11503: CALL_OW 310
11507: IFFALSE 11518
// ComExitBuilding ( i ) ;
11509: LD_VAR 0 2
11513: PPUSH
11514: CALL_OW 122
11518: GO 11495
11520: POP
11521: POP
// AddComMoveXY ( Arabi_opoce , 59 , 1 ) ;
11522: LD_LOC 8
11526: PPUSH
11527: LD_INT 59
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 171
// wait ( 0 0$10 ) ;
11537: LD_INT 350
11539: PPUSH
11540: CALL_OW 67
// while Arabi_enter <> 0 do
11544: LD_LOC 7
11548: PUSH
11549: LD_INT 0
11551: NONEQUAL
11552: IFFALSE 11593
// begin ComMoveXY ( Arabi_enter , 62 , 2 ) ;
11554: LD_LOC 7
11558: PPUSH
11559: LD_INT 62
11561: PPUSH
11562: LD_INT 2
11564: PPUSH
11565: CALL_OW 111
// ComMoveXY ( Arabi_opoce , 62 , 2 ) ;
11569: LD_LOC 8
11573: PPUSH
11574: LD_INT 62
11576: PPUSH
11577: LD_INT 2
11579: PPUSH
11580: CALL_OW 111
// wait ( 0 0$2 ) ;
11584: LD_INT 70
11586: PPUSH
11587: CALL_OW 67
// end ;
11591: GO 11544
// disable ( 101 ) ;
11593: LD_INT 101
11595: DISABLE_MARKED
// end ;
11596: LD_VAR 0 1
11600: RET
// every 0 0$1 marked 101 do var pom , i ;
11601: GO 11603
11603: DISABLE
11604: LD_INT 0
11606: PPUSH
11607: PPUSH
// begin pom = FilterUnitsInArea ( Exarabi , [ [ f_side , Arabi ] ] ) ;
11608: LD_ADDR_VAR 0 1
11612: PUSH
11613: LD_INT 7
11615: PPUSH
11616: LD_INT 22
11618: PUSH
11619: LD_EXP 4
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: PPUSH
11631: CALL_OW 70
11635: ST_TO_ADDR
// if pom <> 0 then
11636: LD_VAR 0 1
11640: PUSH
11641: LD_INT 0
11643: NONEQUAL
11644: IFFALSE 11688
// for i in pom do
11646: LD_ADDR_VAR 0 2
11650: PUSH
11651: LD_VAR 0 1
11655: PUSH
11656: FOR_IN
11657: IFFALSE 11686
// begin RemoveUnit ( i ) ;
11659: LD_VAR 0 2
11663: PPUSH
11664: CALL_OW 64
// Arabi_enter = Arabi_enter diff i ;
11668: LD_ADDR_LOC 7
11672: PUSH
11673: LD_LOC 7
11677: PUSH
11678: LD_VAR 0 2
11682: DIFF
11683: ST_TO_ADDR
// end ;
11684: GO 11656
11686: POP
11687: POP
// enable ;
11688: ENABLE
// end ;
11689: PPOPN 2
11691: END
// export function ar_leave_north ; var i ; begin
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
// SetAttitude ( Arabi , You , att_neutral , true ) ;
11696: LD_EXP 4
11700: PPUSH
11701: LD_EXP 1
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 80
// wait ( 0 0$30 ) ;
11716: LD_INT 1050
11718: PPUSH
11719: CALL_OW 67
// for i in Arabi_enter do
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: LD_LOC 7
11732: PUSH
11733: FOR_IN
11734: IFFALSE 11758
// if IsInUnit ( i ) then
11736: LD_VAR 0 2
11740: PPUSH
11741: CALL_OW 310
11745: IFFALSE 11756
// ComExitBuilding ( i ) ;
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 122
11756: GO 11733
11758: POP
11759: POP
// AddComMoveXY ( Arabi_enter , 59 , 1 ) ;
11760: LD_LOC 7
11764: PPUSH
11765: LD_INT 59
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: CALL_OW 171
// for i in Arabi_opoce do
11775: LD_ADDR_VAR 0 2
11779: PUSH
11780: LD_LOC 8
11784: PUSH
11785: FOR_IN
11786: IFFALSE 11810
// if IsInUnit ( i ) then
11788: LD_VAR 0 2
11792: PPUSH
11793: CALL_OW 310
11797: IFFALSE 11808
// ComExitBuilding ( i ) ;
11799: LD_VAR 0 2
11803: PPUSH
11804: CALL_OW 122
11808: GO 11785
11810: POP
11811: POP
// AddComMoveXY ( Arabi_opoce , 59 , 1 ) ;
11812: LD_LOC 8
11816: PPUSH
11817: LD_INT 59
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 171
// enable ( 101 ) ;
11827: LD_INT 101
11829: ENABLE_MARKED
// wait ( 0 0$10 ) ;
11830: LD_INT 350
11832: PPUSH
11833: CALL_OW 67
// while Arabi_enter <> 0 do
11837: LD_LOC 7
11841: PUSH
11842: LD_INT 0
11844: NONEQUAL
11845: IFFALSE 11886
// begin ComMoveXY ( Arabi_enter , 62 , 2 ) ;
11847: LD_LOC 7
11851: PPUSH
11852: LD_INT 62
11854: PPUSH
11855: LD_INT 2
11857: PPUSH
11858: CALL_OW 111
// ComMoveXY ( Arabi_opoce , 62 , 2 ) ;
11862: LD_LOC 8
11866: PPUSH
11867: LD_INT 62
11869: PPUSH
11870: LD_INT 2
11872: PPUSH
11873: CALL_OW 111
// wait ( 0 0$2 ) ;
11877: LD_INT 70
11879: PPUSH
11880: CALL_OW 67
// end ;
11884: GO 11837
// disable ( 101 ) ;
11886: LD_INT 101
11888: DISABLE_MARKED
// end ;
11889: LD_VAR 0 1
11893: RET
// export function arabi_spojenci ; begin
11894: LD_INT 0
11896: PPUSH
// SetAttitude ( Arabi , You , att_neutral , true ) ;
11897: LD_EXP 4
11901: PPUSH
11902: LD_EXP 1
11906: PPUSH
11907: LD_INT 0
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 80
// ChangeSideFog ( Arabi , You ) ;
11917: LD_EXP 4
11921: PPUSH
11922: LD_EXP 1
11926: PPUSH
11927: CALL_OW 343
// end ;
11931: LD_VAR 0 1
11935: RET
// export function arabi_ally_amici ; begin
11936: LD_INT 0
11938: PPUSH
// SetAttitude ( Arabi , You , att_enemy , false ) ;
11939: LD_EXP 4
11943: PPUSH
11944: LD_EXP 1
11948: PPUSH
11949: LD_INT 2
11951: PPUSH
11952: LD_INT 0
11954: PPUSH
11955: CALL_OW 80
// end ;
11959: LD_VAR 0 1
11963: RET
// every 0 0$1 do
11964: GO 11966
11966: DISABLE
// begin ComEnterUnit ( Arabi_enter [ 1 ] , Ar_lab ) ;
11967: LD_LOC 7
11971: PUSH
11972: LD_INT 1
11974: ARRAY
11975: PPUSH
11976: LD_INT 59
11978: PPUSH
11979: CALL_OW 120
// ComPlaceRemoteCharge ( diet , 78 , 47 , 0 ) ;
11983: LD_EXP 55
11987: PPUSH
11988: LD_INT 78
11990: PPUSH
11991: LD_INT 47
11993: PPUSH
11994: LD_INT 0
11996: PPUSH
11997: CALL_OW 133
// AddComEnterUnit ( diet , Ar_bar ) ;
12001: LD_EXP 55
12005: PPUSH
12006: LD_INT 61
12008: PPUSH
12009: CALL_OW 180
// ComPlaceRemoteCharge ( Arabi_enter [ 2 ] , 78 , 43 , 0 ) ;
12013: LD_LOC 7
12017: PUSH
12018: LD_INT 2
12020: ARRAY
12021: PPUSH
12022: LD_INT 78
12024: PPUSH
12025: LD_INT 43
12027: PPUSH
12028: LD_INT 0
12030: PPUSH
12031: CALL_OW 133
// AddComEnterUnit ( Arabi_enter [ 2 ] , Ar_bu1 ) ;
12035: LD_LOC 7
12039: PUSH
12040: LD_INT 2
12042: ARRAY
12043: PPUSH
12044: LD_INT 73
12046: PPUSH
12047: CALL_OW 180
// ComHiddenCamera ( Arabi_enter [ 3 ] , 64 , 38 ) ;
12051: LD_LOC 7
12055: PUSH
12056: LD_INT 3
12058: ARRAY
12059: PPUSH
12060: LD_INT 64
12062: PPUSH
12063: LD_INT 38
12065: PPUSH
12066: CALL_OW 157
// AddComHiddenCamera ( Arabi_enter [ 3 ] , 85 , 52 ) ;
12070: LD_LOC 7
12074: PUSH
12075: LD_INT 3
12077: ARRAY
12078: PPUSH
12079: LD_INT 85
12081: PPUSH
12082: LD_INT 52
12084: PPUSH
12085: CALL_OW 217
// AddComHiddenCamera ( Arabi_enter [ 3 ] , 101 , 51 ) ;
12089: LD_LOC 7
12093: PUSH
12094: LD_INT 3
12096: ARRAY
12097: PPUSH
12098: LD_INT 101
12100: PPUSH
12101: LD_INT 51
12103: PPUSH
12104: CALL_OW 217
// AddComEnterUnit ( Arabi_enter [ 3 ] , Ar_dep ) ;
12108: LD_LOC 7
12112: PUSH
12113: LD_INT 3
12115: ARRAY
12116: PPUSH
12117: LD_INT 58
12119: PPUSH
12120: CALL_OW 180
// ComPlaceRemoteCharge ( Arabi_enter [ 4 ] , 82 , 46 , 0 ) ;
12124: LD_LOC 7
12128: PUSH
12129: LD_INT 4
12131: ARRAY
12132: PPUSH
12133: LD_INT 82
12135: PPUSH
12136: LD_INT 46
12138: PPUSH
12139: LD_INT 0
12141: PPUSH
12142: CALL_OW 133
// AddComEnterUnit ( Arabi_enter [ 4 ] , Ar_bu2 ) ;
12146: LD_LOC 7
12150: PUSH
12151: LD_INT 4
12153: ARRAY
12154: PPUSH
12155: LD_INT 78
12157: PPUSH
12158: CALL_OW 180
// ComEnterUnit ( Op1 , Ar_dep ) ;
12162: LD_INT 139
12164: PPUSH
12165: LD_INT 58
12167: PPUSH
12168: CALL_OW 120
// ComEnterUnit ( Op2 , Ar_bar ) ;
12172: LD_INT 138
12174: PPUSH
12175: LD_INT 61
12177: PPUSH
12178: CALL_OW 120
// ComMoveXY ( Op3 , 49 , 3 ) ;
12182: LD_INT 135
12184: PPUSH
12185: LD_INT 49
12187: PPUSH
12188: LD_INT 3
12190: PPUSH
12191: CALL_OW 111
// AddComMoveXY ( Op3 , 45 , 5 ) ;
12195: LD_INT 135
12197: PPUSH
12198: LD_INT 45
12200: PPUSH
12201: LD_INT 5
12203: PPUSH
12204: CALL_OW 171
// AddComMoveXY ( Op3 , 45 , 15 ) ;
12208: LD_INT 135
12210: PPUSH
12211: LD_INT 45
12213: PPUSH
12214: LD_INT 15
12216: PPUSH
12217: CALL_OW 171
// AddComMoveXY ( Op3 , 62 , 29 ) ;
12221: LD_INT 135
12223: PPUSH
12224: LD_INT 62
12226: PPUSH
12227: LD_INT 29
12229: PPUSH
12230: CALL_OW 171
// HiddenCamera ( 40 , 7 , Arabi ) ;
12234: LD_INT 40
12236: PPUSH
12237: LD_INT 7
12239: PPUSH
12240: LD_EXP 4
12244: PPUSH
12245: CALL_OW 244
// end ;
12249: END
// every 1 1$7 do
12250: GO 12252
12252: DISABLE
// begin if Researched ( Arabi , tech_Sib1 ) then
12253: LD_EXP 4
12257: PPUSH
12258: LD_INT 54
12260: PPUSH
12261: CALL_OW 325
12265: IFFALSE 12292
// begin SetTech ( tech_Sib1 , Arabi , state_enabled ) ;
12267: LD_INT 54
12269: PPUSH
12270: LD_EXP 4
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL_OW 322
// ComResearch ( Ar_lab , tech_Sib1 ) ;
12282: LD_INT 59
12284: PPUSH
12285: LD_INT 54
12287: PPUSH
12288: CALL_OW 124
// end ; enable ;
12292: ENABLE
// end ;
12293: END
// every 0 0$19 do
12294: GO 12296
12296: DISABLE
// begin SetTech ( tech_Sib1 , Arabi , state_enabled ) ;
12297: LD_INT 54
12299: PPUSH
12300: LD_EXP 4
12304: PPUSH
12305: LD_INT 1
12307: PPUSH
12308: CALL_OW 322
// ComResearch ( Ar_lab , tech_Sib1 ) ;
12312: LD_INT 59
12314: PPUSH
12315: LD_INT 54
12317: PPUSH
12318: CALL_OW 124
// end ;
12322: END
// every 0 0$1 trigger Arabi_vztah = 0 and bojeschopnych_rusu > 0 do var pom ;
12323: LD_EXP 59
12327: PUSH
12328: LD_INT 0
12330: EQUAL
12331: PUSH
12332: CALL 13659 0 0
12336: PUSH
12337: LD_INT 0
12339: GREATER
12340: AND
12341: IFFALSE 13066
12343: GO 12345
12345: DISABLE
12346: LD_INT 0
12348: PPUSH
// begin if GetClass ( A1 ) = class_scientistic then
12349: LD_INT 134
12351: PPUSH
12352: CALL_OW 257
12356: PUSH
12357: LD_INT 4
12359: EQUAL
12360: IFFALSE 12389
// begin ComExitBuilding ( A1 ) ;
12362: LD_INT 134
12364: PPUSH
12365: CALL_OW 122
// AddComEnterUnit ( A1 , Ar_bar ) ;
12369: LD_INT 134
12371: PPUSH
12372: LD_INT 61
12374: PPUSH
12375: CALL_OW 180
// AddComChangeProfession ( A1 , class_mortar ) ;
12379: LD_INT 134
12381: PPUSH
12382: LD_INT 8
12384: PPUSH
12385: CALL_OW 183
// end ; if GetClass ( A3 ) = class_engineer then
12389: LD_EXP 57
12393: PPUSH
12394: CALL_OW 257
12398: PUSH
12399: LD_INT 2
12401: EQUAL
12402: IFFALSE 12437
// begin ComExitBuilding ( A3 ) ;
12404: LD_EXP 57
12408: PPUSH
12409: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_bar ) ;
12413: LD_EXP 57
12417: PPUSH
12418: LD_INT 61
12420: PPUSH
12421: CALL_OW 180
// AddComChangeProfession ( A3 , class_soldier ) ;
12425: LD_EXP 57
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 183
// end ; if not IsInUnit ( diet ) = Ar_bar then
12437: LD_EXP 55
12441: PPUSH
12442: CALL_OW 310
12446: PUSH
12447: LD_INT 61
12449: EQUAL
12450: NOT
12451: IFFALSE 12479
// begin ComEnterUnit ( diet , Ar_bar ) ;
12453: LD_EXP 55
12457: PPUSH
12458: LD_INT 61
12460: PPUSH
12461: CALL_OW 120
// AddComChangeProfession ( diet , class_mortar ) ;
12465: LD_EXP 55
12469: PPUSH
12470: LD_INT 8
12472: PPUSH
12473: CALL_OW 183
// end else
12477: GO 12506
// if GetClass ( diet ) = class_soldier then
12479: LD_EXP 55
12483: PPUSH
12484: CALL_OW 257
12488: PUSH
12489: LD_INT 1
12491: EQUAL
12492: IFFALSE 12506
// ComChangeProfession ( diet , class_mortar ) ;
12494: LD_EXP 55
12498: PPUSH
12499: LD_INT 8
12501: PPUSH
12502: CALL_OW 123
// if IsInUnit ( A2 ) = 0 or IsInUnit ( A2 ) = Ar_bar then
12506: LD_EXP 56
12510: PPUSH
12511: CALL_OW 310
12515: PUSH
12516: LD_INT 0
12518: EQUAL
12519: PUSH
12520: LD_EXP 56
12524: PPUSH
12525: CALL_OW 310
12529: PUSH
12530: LD_INT 61
12532: EQUAL
12533: OR
12534: IFFALSE 12782
// begin if IsOK ( Ar_bu1 ) then
12536: LD_INT 73
12538: PPUSH
12539: CALL_OW 302
12543: IFFALSE 12568
// begin ComExitBuilding ( A2 ) ;
12545: LD_EXP 56
12549: PPUSH
12550: CALL_OW 122
// AddComEnterUnit ( A2 , Ar_bu1 ) ;
12554: LD_EXP 56
12558: PPUSH
12559: LD_INT 73
12561: PPUSH
12562: CALL_OW 180
// end else
12566: GO 12782
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_btype , b_breastwork ] ] ) ;
12568: LD_ADDR_VAR 0 1
12572: PUSH
12573: LD_INT 8
12575: PPUSH
12576: LD_INT 22
12578: PUSH
12579: LD_EXP 4
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 30
12590: PUSH
12591: LD_INT 31
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PPUSH
12602: CALL_OW 70
12606: ST_TO_ADDR
// case pom of 1 :
12607: LD_VAR 0 1
12611: PUSH
12612: LD_INT 1
12614: DOUBLE
12615: EQUAL
12616: IFTRUE 12620
12618: GO 12695
12620: POP
// if GetX ( pom [ 1 ] ) = 78 then
12621: LD_VAR 0 1
12625: PUSH
12626: LD_INT 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 250
12634: PUSH
12635: LD_INT 78
12637: EQUAL
12638: IFFALSE 12669
// begin ComExitBuilding ( A2 ) ;
12640: LD_EXP 56
12644: PPUSH
12645: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 1 ] ) ;
12649: LD_EXP 56
12653: PPUSH
12654: LD_VAR 0 1
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: PPUSH
12663: CALL_OW 180
// end else
12667: GO 12693
// begin ComEnterUnit ( A2 , Ar_bar ) ;
12669: LD_EXP 56
12673: PPUSH
12674: LD_INT 61
12676: PPUSH
12677: CALL_OW 120
// AddComChangeProfession ( A2 , class_mortar ) ;
12681: LD_EXP 56
12685: PPUSH
12686: LD_INT 8
12688: PPUSH
12689: CALL_OW 183
// end ; 2 :
12693: GO 12782
12695: LD_INT 2
12697: DOUBLE
12698: EQUAL
12699: IFTRUE 12703
12701: GO 12781
12703: POP
// if GetX ( pom [ 1 ] ) = 78 then
12704: LD_VAR 0 1
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PPUSH
12713: CALL_OW 250
12717: PUSH
12718: LD_INT 78
12720: EQUAL
12721: IFFALSE 12752
// begin ComExitBuilding ( A2 ) ;
12723: LD_EXP 56
12727: PPUSH
12728: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 1 ] ) ;
12732: LD_EXP 56
12736: PPUSH
12737: LD_VAR 0 1
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: CALL_OW 180
// end else
12750: GO 12779
// begin ComExitBuilding ( A2 ) ;
12752: LD_EXP 56
12756: PPUSH
12757: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 2 ] ) ;
12761: LD_EXP 56
12765: PPUSH
12766: LD_VAR 0 1
12770: PUSH
12771: LD_INT 2
12773: ARRAY
12774: PPUSH
12775: CALL_OW 180
// end ; end ;
12779: GO 12782
12781: POP
// end ; end ; if IsInUnit ( A4 ) = 0 or IsInUnit ( A4 ) = Ar_bar then
12782: LD_EXP 58
12786: PPUSH
12787: CALL_OW 310
12791: PUSH
12792: LD_INT 0
12794: EQUAL
12795: PUSH
12796: LD_EXP 58
12800: PPUSH
12801: CALL_OW 310
12805: PUSH
12806: LD_INT 61
12808: EQUAL
12809: OR
12810: IFFALSE 13058
// begin if IsOK ( Ar_bu2 ) then
12812: LD_INT 78
12814: PPUSH
12815: CALL_OW 302
12819: IFFALSE 12844
// begin ComExitBuilding ( A4 ) ;
12821: LD_EXP 58
12825: PPUSH
12826: CALL_OW 122
// AddComEnterUnit ( A4 , Ar_bu2 ) ;
12830: LD_EXP 58
12834: PPUSH
12835: LD_INT 78
12837: PPUSH
12838: CALL_OW 180
// end else
12842: GO 13058
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_btype , b_breastwork ] ] ) ;
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_INT 8
12851: PPUSH
12852: LD_INT 22
12854: PUSH
12855: LD_EXP 4
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 31
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 70
12882: ST_TO_ADDR
// case pom of 1 :
12883: LD_VAR 0 1
12887: PUSH
12888: LD_INT 1
12890: DOUBLE
12891: EQUAL
12892: IFTRUE 12896
12894: GO 12971
12896: POP
// if GetX ( pom [ 1 ] ) = 78 then
12897: LD_VAR 0 1
12901: PUSH
12902: LD_INT 1
12904: ARRAY
12905: PPUSH
12906: CALL_OW 250
12910: PUSH
12911: LD_INT 78
12913: EQUAL
12914: IFFALSE 12945
// begin ComExitBuilding ( A4 ) ;
12916: LD_EXP 58
12920: PPUSH
12921: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 1 ] ) ;
12925: LD_EXP 58
12929: PPUSH
12930: LD_VAR 0 1
12934: PUSH
12935: LD_INT 1
12937: ARRAY
12938: PPUSH
12939: CALL_OW 180
// end else
12943: GO 12969
// begin ComEnterUnit ( A2 , Ar_bar ) ;
12945: LD_EXP 56
12949: PPUSH
12950: LD_INT 61
12952: PPUSH
12953: CALL_OW 120
// AddComChangeProfession ( A2 , class_mortar ) ;
12957: LD_EXP 56
12961: PPUSH
12962: LD_INT 8
12964: PPUSH
12965: CALL_OW 183
// end ; 2 :
12969: GO 13058
12971: LD_INT 2
12973: DOUBLE
12974: EQUAL
12975: IFTRUE 12979
12977: GO 13057
12979: POP
// if GetX ( pom [ 1 ] ) = 78 then
12980: LD_VAR 0 1
12984: PUSH
12985: LD_INT 1
12987: ARRAY
12988: PPUSH
12989: CALL_OW 250
12993: PUSH
12994: LD_INT 78
12996: EQUAL
12997: IFFALSE 13028
// begin ComExitBuilding ( A4 ) ;
12999: LD_EXP 58
13003: PPUSH
13004: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 1 ] ) ;
13008: LD_EXP 58
13012: PPUSH
13013: LD_VAR 0 1
13017: PUSH
13018: LD_INT 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 180
// end else
13026: GO 13055
// begin ComExitBuilding ( A4 ) ;
13028: LD_EXP 58
13032: PPUSH
13033: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 2 ] ) ;
13037: LD_EXP 58
13041: PPUSH
13042: LD_VAR 0 1
13046: PUSH
13047: LD_INT 2
13049: ARRAY
13050: PPUSH
13051: CALL_OW 180
// end ; end ;
13055: GO 13058
13057: POP
// end ; end ; wait ( 0 0$10 ) ;
13058: LD_INT 350
13060: PPUSH
13061: CALL_OW 67
// enable ;
13065: ENABLE
// end ;
13066: PPOPN 1
13068: END
// every 0 0$10 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom , i , pom1 ;
13069: LD_EXP 59
13073: PUSH
13074: LD_INT 0
13076: EQUAL
13077: PUSH
13078: CALL 13659 0 0
13082: PUSH
13083: LD_INT 0
13085: EQUAL
13086: AND
13087: IFFALSE 13423
13089: GO 13091
13091: DISABLE
13092: LD_INT 0
13094: PPUSH
13095: PPUSH
13096: PPUSH
// begin pom1 = [ ] ;
13097: LD_ADDR_VAR 0 3
13101: PUSH
13102: EMPTY
13103: ST_TO_ADDR
// pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 8
13111: PPUSH
13112: LD_INT 22
13114: PUSH
13115: LD_EXP 4
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 21
13126: PUSH
13127: LD_INT 3
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PPUSH
13138: CALL_OW 70
13142: ST_TO_ADDR
// for i in pom do
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: LD_VAR 0 1
13152: PUSH
13153: FOR_IN
13154: IFFALSE 13189
// if GetLives ( i ) < 1000 then
13156: LD_VAR 0 2
13160: PPUSH
13161: CALL_OW 256
13165: PUSH
13166: LD_INT 1000
13168: LESS
13169: IFFALSE 13187
// pom1 = pom1 ^ i ;
13171: LD_ADDR_VAR 0 3
13175: PUSH
13176: LD_VAR 0 3
13180: PUSH
13181: LD_VAR 0 2
13185: ADD
13186: ST_TO_ADDR
13187: GO 13153
13189: POP
13190: POP
// if pom1 > 0 then
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 0
13198: GREATER
13199: IFFALSE 13303
// begin if IsInUnit ( A3 ) = Ar_bar then
13201: LD_EXP 57
13205: PPUSH
13206: CALL_OW 310
13210: PUSH
13211: LD_INT 61
13213: EQUAL
13214: IFFALSE 13301
// begin ComExitBuilding ( A3 ) ;
13216: LD_EXP 57
13220: PPUSH
13221: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_dep ) ;
13225: LD_EXP 57
13229: PPUSH
13230: LD_INT 58
13232: PPUSH
13233: CALL_OW 180
// AddComChangeProfession ( A3 , class_engineer ) ;
13237: LD_EXP 57
13241: PPUSH
13242: LD_INT 2
13244: PPUSH
13245: CALL_OW 183
// AddComExitBuilding ( A3 ) ;
13249: LD_EXP 57
13253: PPUSH
13254: CALL_OW 182
// for i in pom1 do
13258: LD_ADDR_VAR 0 2
13262: PUSH
13263: LD_VAR 0 3
13267: PUSH
13268: FOR_IN
13269: IFFALSE 13287
// AddComRepairBuilding ( A3 , i ) ;
13271: LD_EXP 57
13275: PPUSH
13276: LD_VAR 0 2
13280: PPUSH
13281: CALL_OW 190
13285: GO 13268
13287: POP
13288: POP
// AddComEnterUnit ( A3 , Ar_dep ) ;
13289: LD_EXP 57
13293: PPUSH
13294: LD_INT 58
13296: PPUSH
13297: CALL_OW 180
// end ; end else
13301: GO 13336
// begin ComExitBuilding ( A3 ) ;
13303: LD_EXP 57
13307: PPUSH
13308: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_dep ) ;
13312: LD_EXP 57
13316: PPUSH
13317: LD_INT 58
13319: PPUSH
13320: CALL_OW 180
// AddComChangeProfession ( A3 , class_engineer ) ;
13324: LD_EXP 57
13328: PPUSH
13329: LD_INT 2
13331: PPUSH
13332: CALL_OW 183
// end ; if pom < 7 then
13336: LD_VAR 0 1
13340: PUSH
13341: LD_INT 7
13343: LESS
13344: IFFALSE 13355
// staveni_budov_arabi ( pom ) ;
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL 13426 0 1
// if GetClass ( diet ) <> class_soldier then
13355: LD_EXP 55
13359: PPUSH
13360: CALL_OW 257
13364: PUSH
13365: LD_INT 1
13367: NONEQUAL
13368: IFFALSE 13382
// ComChangeProfession ( diet , class_soldier ) ;
13370: LD_EXP 55
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 123
// if IsInUnit ( A1 ) <> Ar_lab then
13382: LD_INT 134
13384: PPUSH
13385: CALL_OW 310
13389: PUSH
13390: LD_INT 59
13392: NONEQUAL
13393: IFFALSE 13422
// begin ComExitBuilding ( A1 ) ;
13395: LD_INT 134
13397: PPUSH
13398: CALL_OW 122
// AddComEnterUnit ( A1 , Ar_lab ) ;
13402: LD_INT 134
13404: PPUSH
13405: LD_INT 59
13407: PPUSH
13408: CALL_OW 180
// AddComChangeProfession ( A1 , class_scientistic ) ;
13412: LD_INT 134
13414: PPUSH
13415: LD_INT 4
13417: PPUSH
13418: CALL_OW 183
// end ; enable ;
13422: ENABLE
// end ;
13423: PPOPN 3
13425: END
// function staveni_budov_arabi ( list_budov ) ; var pom ; begin
13426: LD_INT 0
13428: PPUSH
13429: PPUSH
// pom = FilterUnitsInArea ( Ar_base , [ [ f_side , You ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
13430: LD_ADDR_VAR 0 3
13434: PUSH
13435: LD_INT 8
13437: PPUSH
13438: LD_INT 22
13440: PUSH
13441: LD_EXP 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 30
13455: PUSH
13456: LD_INT 32
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 30
13465: PUSH
13466: LD_INT 31
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 70
13486: ST_TO_ADDR
// if pom <> 2 then
13487: LD_VAR 0 3
13491: PUSH
13492: LD_INT 2
13494: NONEQUAL
13495: IFFALSE 13654
// begin if IsInUnit ( A3 ) = Ar_dep then
13497: LD_EXP 57
13501: PPUSH
13502: CALL_OW 310
13506: PUSH
13507: LD_INT 58
13509: EQUAL
13510: IFFALSE 13521
// ComExitBuilding ( A3 ) ;
13512: LD_EXP 57
13516: PPUSH
13517: CALL_OW 122
// case pom of 0 :
13521: LD_VAR 0 3
13525: PUSH
13526: LD_INT 0
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13579
13534: POP
// begin AddComBuild ( A3 , b_breastwork , 78 , 32 , 3 ) ;
13535: LD_EXP 57
13539: PPUSH
13540: LD_INT 31
13542: PPUSH
13543: LD_INT 78
13545: PPUSH
13546: LD_INT 32
13548: PPUSH
13549: LD_INT 3
13551: PPUSH
13552: CALL_OW 205
// AddComBuild ( A3 , b_breastwork , 73 , 30 , 3 ) ;
13556: LD_EXP 57
13560: PPUSH
13561: LD_INT 31
13563: PPUSH
13564: LD_INT 73
13566: PPUSH
13567: LD_INT 30
13569: PPUSH
13570: LD_INT 3
13572: PPUSH
13573: CALL_OW 205
// end ; 1 :
13577: GO 13654
13579: LD_INT 1
13581: DOUBLE
13582: EQUAL
13583: IFTRUE 13587
13585: GO 13653
13587: POP
// if GetX ( pom [ 1 ] ) = 78 then
13588: LD_VAR 0 3
13592: PUSH
13593: LD_INT 1
13595: ARRAY
13596: PPUSH
13597: CALL_OW 250
13601: PUSH
13602: LD_INT 78
13604: EQUAL
13605: IFFALSE 13630
// AddComBuild ( A3 , b_breastwork , 73 , 30 , 3 ) else
13607: LD_EXP 57
13611: PPUSH
13612: LD_INT 31
13614: PPUSH
13615: LD_INT 73
13617: PPUSH
13618: LD_INT 30
13620: PPUSH
13621: LD_INT 3
13623: PPUSH
13624: CALL_OW 205
13628: GO 13651
// AddComBuild ( A3 , b_breastwork , 78 , 32 , 3 ) ; end ;
13630: LD_EXP 57
13634: PPUSH
13635: LD_INT 31
13637: PPUSH
13638: LD_INT 78
13640: PPUSH
13641: LD_INT 32
13643: PPUSH
13644: LD_INT 3
13646: PPUSH
13647: CALL_OW 205
13651: GO 13654
13653: POP
// end ; end ;
13654: LD_VAR 0 2
13658: RET
// function bojeschopnych_rusu ; var pom , i , pom1 ; begin
13659: LD_INT 0
13661: PPUSH
13662: PPUSH
13663: PPUSH
13664: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_see , Arabi ] ] ) ;
13665: LD_ADDR_VAR 0 2
13669: PUSH
13670: LD_INT 22
13672: PUSH
13673: LD_EXP 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 101
13684: PUSH
13685: LD_EXP 4
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 69
13702: ST_TO_ADDR
// pom1 = pom ;
13703: LD_ADDR_VAR 0 4
13707: PUSH
13708: LD_VAR 0 2
13712: ST_TO_ADDR
// for i in pom do
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 2
13722: PUSH
13723: FOR_IN
13724: IFFALSE 13774
// if GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) = 0 then
13726: LD_VAR 0 3
13730: PPUSH
13731: CALL_OW 247
13735: PUSH
13736: LD_INT 2
13738: EQUAL
13739: PUSH
13740: LD_VAR 0 3
13744: PPUSH
13745: CALL_OW 311
13749: PUSH
13750: LD_INT 0
13752: EQUAL
13753: AND
13754: IFFALSE 13772
// pom1 = pom1 diff i ;
13756: LD_ADDR_VAR 0 4
13760: PUSH
13761: LD_VAR 0 4
13765: PUSH
13766: LD_VAR 0 3
13770: DIFF
13771: ST_TO_ADDR
13772: GO 13723
13774: POP
13775: POP
// debug_strings = [ pom1 ] ;
13776: LD_ADDR_OWVAR 48
13780: PUSH
13781: LD_VAR 0 4
13785: PUSH
13786: EMPTY
13787: LIST
13788: ST_TO_ADDR
// result := pom1 + 0 ;
13789: LD_ADDR_VAR 0 1
13793: PUSH
13794: LD_VAR 0 4
13798: PUSH
13799: LD_INT 0
13801: PLUS
13802: ST_TO_ADDR
// end ;
13803: LD_VAR 0 1
13807: RET
// every 0 0$0.5 trigger Arabi_vztah = 0 do var pom ;
13808: LD_EXP 59
13812: PUSH
13813: LD_INT 0
13815: EQUAL
13816: IFFALSE 13965
13818: GO 13820
13820: DISABLE
13821: LD_INT 0
13823: PPUSH
// begin pom = FilterUnitsInArea ( Armina1 , [ [ f_side , You ] ] ) ;
13824: LD_ADDR_VAR 0 1
13828: PUSH
13829: LD_INT 9
13831: PPUSH
13832: LD_INT 22
13834: PUSH
13835: LD_EXP 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: PPUSH
13847: CALL_OW 70
13851: ST_TO_ADDR
// if pom > 0 then
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 0
13859: GREATER
13860: IFFALSE 13871
// ComFireExplosives ( diet ) ;
13862: LD_EXP 55
13866: PPUSH
13867: CALL_OW 134
// pom = FilterUnitsInArea ( Armina2 , [ [ f_side , You ] ] ) ;
13871: LD_ADDR_VAR 0 1
13875: PUSH
13876: LD_INT 10
13878: PPUSH
13879: LD_INT 22
13881: PUSH
13882: LD_EXP 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: PPUSH
13894: CALL_OW 70
13898: ST_TO_ADDR
// if pom > 0 then
13899: LD_VAR 0 1
13903: PUSH
13904: LD_INT 0
13906: GREATER
13907: IFFALSE 13918
// ComFireExplosives ( A2 ) ;
13909: LD_EXP 56
13913: PPUSH
13914: CALL_OW 134
// pom = FilterUnitsInArea ( Armina3 , [ [ f_side , You ] ] ) ;
13918: LD_ADDR_VAR 0 1
13922: PUSH
13923: LD_INT 11
13925: PPUSH
13926: LD_INT 22
13928: PUSH
13929: LD_EXP 1
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: PPUSH
13941: CALL_OW 70
13945: ST_TO_ADDR
// if pom > 0 then
13946: LD_VAR 0 1
13950: PUSH
13951: LD_INT 0
13953: GREATER
13954: IFFALSE 13965
// ComFireExplosives ( A4 ) ;
13956: LD_EXP 58
13960: PPUSH
13961: CALL_OW 134
// end ;
13965: PPOPN 1
13967: END
// every 0 0$20 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var i , pom , pom1 ;
13968: LD_EXP 59
13972: PUSH
13973: LD_INT 0
13975: EQUAL
13976: PUSH
13977: CALL 13659 0 0
13981: PUSH
13982: LD_INT 0
13984: EQUAL
13985: AND
13986: IFFALSE 14235
13988: GO 13990
13990: DISABLE
13991: LD_INT 0
13993: PPUSH
13994: PPUSH
13995: PPUSH
// begin pom1 = [ ] ;
13996: LD_ADDR_VAR 0 3
14000: PUSH
14001: EMPTY
14002: ST_TO_ADDR
// for i in Arabi_enter do
14003: LD_ADDR_VAR 0 1
14007: PUSH
14008: LD_LOC 7
14012: PUSH
14013: FOR_IN
14014: IFFALSE 14069
// if GetLives ( i ) < 1000 and i <> A1 and IsIdle ( i ) then
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 256
14025: PUSH
14026: LD_INT 1000
14028: LESS
14029: PUSH
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 134
14037: NONEQUAL
14038: AND
14039: PUSH
14040: LD_VAR 0 1
14044: PPUSH
14045: CALL_OW 316
14049: AND
14050: IFFALSE 14067
// ComMoveXY ( i , 77 , 20 ) ;
14052: LD_VAR 0 1
14056: PPUSH
14057: LD_INT 77
14059: PPUSH
14060: LD_INT 20
14062: PPUSH
14063: CALL_OW 111
14067: GO 14013
14069: POP
14070: POP
// pom = FilterUnitsInArea ( HealArea , [ [ f_side , Arabi ] ] ) ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 12
14078: PPUSH
14079: LD_INT 22
14081: PUSH
14082: LD_EXP 4
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: PPUSH
14094: CALL_OW 70
14098: ST_TO_ADDR
// for i in pom do
14099: LD_ADDR_VAR 0 1
14103: PUSH
14104: LD_VAR 0 2
14108: PUSH
14109: FOR_IN
14110: IFFALSE 14145
// if GetLives ( i ) < 1000 then
14112: LD_VAR 0 1
14116: PPUSH
14117: CALL_OW 256
14121: PUSH
14122: LD_INT 1000
14124: LESS
14125: IFFALSE 14143
// pom1 = pom1 ^ i ;
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: LD_VAR 0 3
14136: PUSH
14137: LD_VAR 0 1
14141: ADD
14142: ST_TO_ADDR
14143: GO 14109
14145: POP
14146: POP
// if IsOK ( A1 ) then
14147: LD_INT 134
14149: PPUSH
14150: CALL_OW 302
14154: IFFALSE 14235
// begin if pom1 > 0 then
14156: LD_VAR 0 3
14160: PUSH
14161: LD_INT 0
14163: GREATER
14164: IFFALSE 14234
// begin while IsInUnit ( A1 ) <> Ar_lab do
14166: LD_INT 134
14168: PPUSH
14169: CALL_OW 310
14173: PUSH
14174: LD_INT 59
14176: NONEQUAL
14177: IFFALSE 14188
// wait ( 0 0$3 ) ;
14179: LD_INT 105
14181: PPUSH
14182: CALL_OW 67
14186: GO 14166
// ComExitBuilding ( A1 ) ;
14188: LD_INT 134
14190: PPUSH
14191: CALL_OW 122
// for i in pom1 do
14195: LD_ADDR_VAR 0 1
14199: PUSH
14200: LD_VAR 0 3
14204: PUSH
14205: FOR_IN
14206: IFFALSE 14222
// AddComHeal ( A1 , i ) ;
14208: LD_INT 134
14210: PPUSH
14211: LD_VAR 0 1
14215: PPUSH
14216: CALL_OW 188
14220: GO 14205
14222: POP
14223: POP
// AddComEnterUnit ( A1 , ar_lab ) ;
14224: LD_INT 134
14226: PPUSH
14227: LD_INT 59
14229: PPUSH
14230: CALL_OW 180
// end ; enable ;
14234: ENABLE
// end ; end ;
14235: PPOPN 3
14237: END
// every 0 0$30 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom ;
14238: LD_EXP 59
14242: PUSH
14243: LD_INT 0
14245: EQUAL
14246: PUSH
14247: CALL 13659 0 0
14251: PUSH
14252: LD_INT 0
14254: EQUAL
14255: AND
14256: IFFALSE 14739
14258: GO 14260
14260: DISABLE
14261: LD_INT 0
14263: PPUSH
// begin if ( not MineAtPos ( 78 , 47 ) ) and IsOK ( diet ) then
14264: LD_INT 78
14266: PPUSH
14267: LD_INT 47
14269: PPUSH
14270: CALL_OW 458
14274: NOT
14275: PUSH
14276: LD_EXP 55
14280: PPUSH
14281: CALL_OW 302
14285: AND
14286: IFFALSE 14419
// begin while HasTask ( diet ) do
14288: LD_EXP 55
14292: PPUSH
14293: CALL_OW 314
14297: IFFALSE 14308
// wait ( 0 0$1 ) ;
14299: LD_INT 35
14301: PPUSH
14302: CALL_OW 67
14306: GO 14288
// if not MineAtPos ( 78 , 47 ) then
14308: LD_INT 78
14310: PPUSH
14311: LD_INT 47
14313: PPUSH
14314: CALL_OW 458
14318: NOT
14319: IFFALSE 14419
// begin pom = IsInUnit ( diet ) ;
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_EXP 55
14330: PPUSH
14331: CALL_OW 310
14335: ST_TO_ADDR
// if pom = 0 then
14336: LD_VAR 0 1
14340: PUSH
14341: LD_INT 0
14343: EQUAL
14344: IFFALSE 14357
// ComRemember ( diet ) else
14346: LD_EXP 55
14350: PPUSH
14351: CALL_OW 143
14355: GO 14366
// ComExitBuilding ( diet ) ;
14357: LD_EXP 55
14361: PPUSH
14362: CALL_OW 122
// AddComPlaceRemoteCharge ( diet , 78 , 47 , 0 ) ;
14366: LD_EXP 55
14370: PPUSH
14371: LD_INT 78
14373: PPUSH
14374: LD_INT 47
14376: PPUSH
14377: LD_INT 0
14379: PPUSH
14380: CALL_OW 193
// if pom > 0 then
14384: LD_VAR 0 1
14388: PUSH
14389: LD_INT 0
14391: GREATER
14392: IFFALSE 14410
// AddComEnterUnit ( diet , pom ) else
14394: LD_EXP 55
14398: PPUSH
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL_OW 180
14408: GO 14419
// AddComReturn ( diet ) ;
14410: LD_EXP 55
14414: PPUSH
14415: CALL_OW 204
// end ; end ; if ( not MineAtPos ( 78 , 43 ) ) and IsOK ( A2 ) then
14419: LD_INT 78
14421: PPUSH
14422: LD_INT 43
14424: PPUSH
14425: CALL_OW 458
14429: NOT
14430: PUSH
14431: LD_EXP 56
14435: PPUSH
14436: CALL_OW 302
14440: AND
14441: IFFALSE 14574
// begin while HasTask ( A2 ) do
14443: LD_EXP 56
14447: PPUSH
14448: CALL_OW 314
14452: IFFALSE 14463
// wait ( 0 0$1 ) ;
14454: LD_INT 35
14456: PPUSH
14457: CALL_OW 67
14461: GO 14443
// if not MineAtPos ( 78 , 43 ) then
14463: LD_INT 78
14465: PPUSH
14466: LD_INT 43
14468: PPUSH
14469: CALL_OW 458
14473: NOT
14474: IFFALSE 14574
// begin pom = IsInUnit ( A2 ) ;
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: LD_EXP 56
14485: PPUSH
14486: CALL_OW 310
14490: ST_TO_ADDR
// if pom = 0 then
14491: LD_VAR 0 1
14495: PUSH
14496: LD_INT 0
14498: EQUAL
14499: IFFALSE 14512
// ComRemember ( A2 ) else
14501: LD_EXP 56
14505: PPUSH
14506: CALL_OW 143
14510: GO 14521
// ComExitBuilding ( A2 ) ;
14512: LD_EXP 56
14516: PPUSH
14517: CALL_OW 122
// AddComPlaceRemoteCharge ( A2 , 78 , 43 , 0 ) ;
14521: LD_EXP 56
14525: PPUSH
14526: LD_INT 78
14528: PPUSH
14529: LD_INT 43
14531: PPUSH
14532: LD_INT 0
14534: PPUSH
14535: CALL_OW 193
// if pom > 0 then
14539: LD_VAR 0 1
14543: PUSH
14544: LD_INT 0
14546: GREATER
14547: IFFALSE 14565
// AddComEnterUnit ( A2 , pom ) else
14549: LD_EXP 56
14553: PPUSH
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 180
14563: GO 14574
// AddComReturn ( A2 ) ;
14565: LD_EXP 56
14569: PPUSH
14570: CALL_OW 204
// end ; end ; if ( not MineAtPos ( 82 , 46 ) ) and IsOK ( A4 ) then
14574: LD_INT 82
14576: PPUSH
14577: LD_INT 46
14579: PPUSH
14580: CALL_OW 458
14584: NOT
14585: PUSH
14586: LD_EXP 58
14590: PPUSH
14591: CALL_OW 302
14595: AND
14596: IFFALSE 14738
// begin while HasTask ( A4 ) do
14598: LD_EXP 58
14602: PPUSH
14603: CALL_OW 314
14607: IFFALSE 14618
// wait ( 0 0$1 ) ;
14609: LD_INT 35
14611: PPUSH
14612: CALL_OW 67
14616: GO 14598
// if not MineAtPos ( 82 , 46 ) then
14618: LD_INT 82
14620: PPUSH
14621: LD_INT 46
14623: PPUSH
14624: CALL_OW 458
14628: NOT
14629: IFFALSE 14738
// begin pom = IsInUnit ( A4 ) ;
14631: LD_ADDR_VAR 0 1
14635: PUSH
14636: LD_EXP 58
14640: PPUSH
14641: CALL_OW 310
14645: ST_TO_ADDR
// if pom = 0 then
14646: LD_VAR 0 1
14650: PUSH
14651: LD_INT 0
14653: EQUAL
14654: IFFALSE 14667
// ComRemember ( A4 ) else
14656: LD_EXP 58
14660: PPUSH
14661: CALL_OW 143
14665: GO 14676
// ComExitBuilding ( A4 ) ;
14667: LD_EXP 58
14671: PPUSH
14672: CALL_OW 122
// AddComExitBuilding ( A4 ) ;
14676: LD_EXP 58
14680: PPUSH
14681: CALL_OW 182
// AddComPlaceRemoteCharge ( A4 , 82 , 76 , 0 ) ;
14685: LD_EXP 58
14689: PPUSH
14690: LD_INT 82
14692: PPUSH
14693: LD_INT 76
14695: PPUSH
14696: LD_INT 0
14698: PPUSH
14699: CALL_OW 193
// if pom > 0 then
14703: LD_VAR 0 1
14707: PUSH
14708: LD_INT 0
14710: GREATER
14711: IFFALSE 14729
// AddComEnterUnit ( A4 , pom ) else
14713: LD_EXP 58
14717: PPUSH
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 180
14727: GO 14738
// AddComReturn ( A4 ) ;
14729: LD_EXP 58
14733: PPUSH
14734: CALL_OW 204
// end ; end ; enable ;
14738: ENABLE
// end ;
14739: PPOPN 1
14741: END
// every 0 0$5 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var i , pom ;
14742: LD_EXP 59
14746: PUSH
14747: LD_INT 0
14749: EQUAL
14750: PUSH
14751: CALL 13659 0 0
14755: PUSH
14756: LD_INT 0
14758: EQUAL
14759: AND
14760: IFFALSE 14894
14762: GO 14764
14764: DISABLE
14765: LD_INT 0
14767: PPUSH
14768: PPUSH
// begin pom = FIlterAllUnits ( [ [ f_side , You ] , [ f_see , Arabi ] ] ) ;
14769: LD_ADDR_VAR 0 2
14773: PUSH
14774: LD_INT 22
14776: PUSH
14777: LD_EXP 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 101
14788: PUSH
14789: LD_EXP 4
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PPUSH
14802: CALL_OW 69
14806: ST_TO_ADDR
// if pom > 0 then
14807: LD_VAR 0 2
14811: PUSH
14812: LD_INT 0
14814: GREATER
14815: IFFALSE 14893
// begin ComChangeProfession ( diet , class_mortar ) ;
14817: LD_EXP 55
14821: PPUSH
14822: LD_INT 8
14824: PPUSH
14825: CALL_OW 123
// AddComExitBuilding ( diet ) ;
14829: LD_EXP 55
14833: PPUSH
14834: CALL_OW 182
// for i in pom do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: LD_VAR 0 2
14847: PUSH
14848: FOR_IN
14849: IFFALSE 14867
// AddComAttackUnit ( diet , i ) ;
14851: LD_EXP 55
14855: PPUSH
14856: LD_VAR 0 1
14860: PPUSH
14861: CALL_OW 175
14865: GO 14848
14867: POP
14868: POP
// AddComEnterUnit ( diet , Ar_bar ) ;
14869: LD_EXP 55
14873: PPUSH
14874: LD_INT 61
14876: PPUSH
14877: CALL_OW 180
// AddComChangeProfession ( diet , class_soldier ) ;
14881: LD_EXP 55
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 183
// end ; enable ;
14893: ENABLE
// end ;
14894: PPOPN 2
14896: END
// every 0 0$0.1 do var pom , i ;
14897: GO 14899
14899: DISABLE
14900: LD_INT 0
14902: PPUSH
14903: PPUSH
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
14904: LD_ADDR_VAR 0 1
14908: PUSH
14909: LD_INT 8
14911: PPUSH
14912: LD_INT 22
14914: PUSH
14915: LD_EXP 4
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 21
14926: PUSH
14927: LD_INT 3
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PPUSH
14938: CALL_OW 70
14942: ST_TO_ADDR
// for i in pom do
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_VAR 0 1
14952: PUSH
14953: FOR_IN
14954: IFFALSE 14978
// SetBLevel ( i , levely_budovy_arabi [ difficulty ] ) ;
14956: LD_VAR 0 2
14960: PPUSH
14961: LD_EXP 39
14965: PUSH
14966: LD_OWVAR 67
14970: ARRAY
14971: PPUSH
14972: CALL_OW 241
14976: GO 14953
14978: POP
14979: POP
// end ;
14980: PPOPN 2
14982: END
// every 0 0$5 trigger Arabi_vztah = 20 do var pom ; var poc ;
14983: LD_EXP 59
14987: PUSH
14988: LD_INT 20
14990: EQUAL
14991: IFFALSE 15361
14993: GO 14995
14995: DISABLE
14996: LD_INT 0
14998: PPUSH
14999: PPUSH
// begin wait ( 0 0$30 ) ;
15000: LD_INT 1050
15002: PPUSH
15003: CALL_OW 67
// ComExitBuilding ( Arabi_enter ) ;
15007: LD_LOC 7
15011: PPUSH
15012: CALL_OW 122
// AddComEnterUnit ( Arabi_enter , Ar_bar ) ;
15016: LD_LOC 7
15020: PPUSH
15021: LD_INT 61
15023: PPUSH
15024: CALL_OW 180
// AddComChangeProfession ( Arabi_enter , class_mortar ) ;
15028: LD_LOC 7
15032: PPUSH
15033: LD_INT 8
15035: PPUSH
15036: CALL_OW 183
// RemoveMineOfUnit ( diet ) ;
15040: LD_EXP 55
15044: PPUSH
15045: CALL_OW 460
// RemoveMineOfUnit ( A2 ) ;
15049: LD_EXP 56
15053: PPUSH
15054: CALL_OW 460
// RemoveMineOfUnit ( A4 ) ;
15058: LD_EXP 58
15062: PPUSH
15063: CALL_OW 460
// AddComPlaceRemoteCharge ( diet , 0 , 0 , Am_at6 ) ;
15067: LD_EXP 55
15071: PPUSH
15072: LD_INT 0
15074: PPUSH
15075: LD_INT 0
15077: PPUSH
15078: LD_INT 180
15080: PPUSH
15081: CALL_OW 193
// AddComPlaceRemoteCharge ( A2 , 0 , 0 , Am_at7 ) ;
15085: LD_EXP 56
15089: PPUSH
15090: LD_INT 0
15092: PPUSH
15093: LD_INT 0
15095: PPUSH
15096: LD_INT 70
15098: PPUSH
15099: CALL_OW 193
// AddComPlaceRemoteCharge ( A3 , 0 , 0 , Am_bar ) ;
15103: LD_EXP 57
15107: PPUSH
15108: LD_INT 0
15110: PPUSH
15111: LD_INT 0
15113: PPUSH
15114: LD_INT 85
15116: PPUSH
15117: CALL_OW 193
// AddComPlaceRemoteCharge ( A4 , 0 , 0 , Am_at4 ) ;
15121: LD_EXP 58
15125: PPUSH
15126: LD_INT 0
15128: PPUSH
15129: LD_INT 0
15131: PPUSH
15132: LD_INT 69
15134: PPUSH
15135: CALL_OW 193
// AddComMoveXY ( Arabi_enter , 88 , 9 ) ;
15139: LD_LOC 7
15143: PPUSH
15144: LD_INT 88
15146: PPUSH
15147: LD_INT 9
15149: PPUSH
15150: CALL_OW 171
// ComExitBuilding ( Arabi_opoce ) ;
15154: LD_LOC 8
15158: PPUSH
15159: CALL_OW 122
// AddComEnterUnit ( Arabi_opoce , Ar_bar ) ;
15163: LD_LOC 8
15167: PPUSH
15168: LD_INT 61
15170: PPUSH
15171: CALL_OW 180
// AddComChangeProfession ( Arabi_opoce , class_apeman_kamikaze ) ;
15175: LD_LOC 8
15179: PPUSH
15180: LD_INT 17
15182: PPUSH
15183: CALL_OW 183
// AddComExitBuilding ( Arabi_opoce ) ;
15187: LD_LOC 8
15191: PPUSH
15192: CALL_OW 182
// wait ( 1 1$0 ) ;
15196: LD_INT 2100
15198: PPUSH
15199: CALL_OW 67
// while FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) = 0 do
15203: LD_INT 22
15205: PUSH
15206: LD_EXP 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 101
15217: PUSH
15218: LD_EXP 2
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PPUSH
15231: CALL_OW 69
15235: PUSH
15236: LD_INT 0
15238: EQUAL
15239: IFFALSE 15250
// wait ( 0 0$5 ) ;
15241: LD_INT 175
15243: PPUSH
15244: CALL_OW 67
15248: GO 15203
// ComFireExplosives ( [ diet , A2 , A3 , A4 ] ) ;
15250: LD_EXP 55
15254: PUSH
15255: LD_EXP 56
15259: PUSH
15260: LD_EXP 57
15264: PUSH
15265: LD_EXP 58
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: PPUSH
15276: CALL_OW 134
// AddComAttackUnit ( Arabi_enter , Am_el2 ) ;
15280: LD_LOC 7
15284: PPUSH
15285: LD_INT 81
15287: PPUSH
15288: CALL_OW 175
// AddComAttackUnit ( Arabi_opoce , Am_tov ) ;
15292: LD_LOC 8
15296: PPUSH
15297: LD_INT 175
15299: PPUSH
15300: CALL_OW 175
// wait ( 0 0$3 ) ;
15304: LD_INT 105
15306: PPUSH
15307: CALL_OW 67
// SetAttitude ( Arabi , Amici , att_enemy , true ) ;
15311: LD_EXP 4
15315: PPUSH
15316: LD_EXP 2
15320: PPUSH
15321: LD_INT 2
15323: PPUSH
15324: LD_INT 1
15326: PPUSH
15327: CALL_OW 80
// SetAttitude ( Amici , Arabi , att_enemy , true ) ;
15331: LD_EXP 2
15335: PPUSH
15336: LD_EXP 4
15340: PPUSH
15341: LD_INT 2
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: CALL_OW 80
// wait ( 0 0$30 ) ;
15351: LD_INT 1050
15353: PPUSH
15354: CALL_OW 67
// enable ( 102 ) ;
15358: LD_INT 102
15360: ENABLE_MARKED
// end ;
15361: PPOPN 2
15363: END
// every 0 0$1 trigger GetLives ( Am_el2 ) < 200 marked 102 do
15364: LD_INT 81
15366: PPUSH
15367: CALL_OW 256
15371: PUSH
15372: LD_INT 200
15374: LESS
15375: IFFALSE 15457
15377: GO 15379
15379: DISABLE
// begin ComMoveXY ( Arabi_enter , 61 , 1 ) ;
15380: LD_LOC 7
15384: PPUSH
15385: LD_INT 61
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 111
// enable ( 101 ) ;
15395: LD_INT 101
15397: ENABLE_MARKED
// while FilterAllUnits ( [ [ f_side , Arabi ] , [ f_class , class_mortar ] ] ) do
15398: LD_INT 22
15400: PUSH
15401: LD_EXP 4
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 25
15412: PUSH
15413: LD_INT 8
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 69
15428: IFFALSE 15454
// begin ComMoveXY ( Arabi_enter , 61 , 1 ) ;
15430: LD_LOC 7
15434: PPUSH
15435: LD_INT 61
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 111
// wait ( 0 0$1 ) ;
15445: LD_INT 35
15447: PPUSH
15448: CALL_OW 67
// end ;
15452: GO 15398
// disable ( 101 ) ;
15454: LD_INT 101
15456: DISABLE_MARKED
// end ;
15457: END
// every 0 0$11 do var pom ;
15458: GO 15460
15460: DISABLE
15461: LD_INT 0
15463: PPUSH
// begin pom = UnitsInside ( Ar_lab ) ;
15464: LD_ADDR_VAR 0 1
15468: PUSH
15469: LD_INT 59
15471: PPUSH
15472: CALL_OW 313
15476: ST_TO_ADDR
// ComChangeProfession ( pom , class_scientistic ) ;
15477: LD_VAR 0 1
15481: PPUSH
15482: LD_INT 4
15484: PPUSH
15485: CALL_OW 123
// enable ;
15489: ENABLE
// end ;
15490: PPOPN 1
15492: END
// every 0 0$1 trigger not KECY_s_arabama do var pom , i ; var vysl ;
15493: LD_EXP 6
15497: NOT
15498: IFFALSE 15680
15500: GO 15502
15502: DISABLE
15503: LD_INT 0
15505: PPUSH
15506: PPUSH
15507: PPUSH
// begin vysl = false ;
15508: LD_ADDR_VAR 0 3
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
15516: LD_ADDR_VAR 0 1
15520: PUSH
15521: LD_INT 22
15523: PUSH
15524: LD_EXP 1
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 2
15535: PUSH
15536: LD_INT 21
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 21
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PPUSH
15565: CALL_OW 69
15569: ST_TO_ADDR
// for i in pom do
15570: LD_ADDR_VAR 0 2
15574: PUSH
15575: LD_VAR 0 1
15579: PUSH
15580: FOR_IN
15581: IFFALSE 15615
// if GetSide ( Attacks ( i ) ) = Arabi then
15583: LD_VAR 0 2
15587: PPUSH
15588: CALL_OW 320
15592: PPUSH
15593: CALL_OW 255
15597: PUSH
15598: LD_EXP 4
15602: EQUAL
15603: IFFALSE 15613
// vysl = true ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
15613: GO 15580
15615: POP
15616: POP
// if vysl then
15617: LD_VAR 0 3
15621: IFFALSE 15679
// begin KECY_s_arabama = true ;
15623: LD_ADDR_EXP 6
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// SetAttitude ( You , Arabi , att_enemy , true ) ;
15631: LD_EXP 1
15635: PPUSH
15636: LD_EXP 4
15640: PPUSH
15641: LD_INT 2
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
15651: LD_EXP 4
15655: PPUSH
15656: LD_EXP 1
15660: PPUSH
15661: LD_INT 2
15663: PPUSH
15664: LD_INT 1
15666: PPUSH
15667: CALL_OW 80
// Arabi_vztah = 0 ;
15671: LD_ADDR_EXP 59
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// end ; enable ;
15679: ENABLE
// end ; end_of_file
15680: PPOPN 3
15682: END
// export JMM ; export Joan ; export VEDCI1 ; export VEDCI2 ; export VEDCI3 ; export Am_opoce ; export Am_sol ; export Am_mech ; export Am_vyr ; export Am_snipe ; export Am_utoky ; var UTOCENI ; export mcmillanova_pomsta ; export counter_utoku ; every 0 0$0.1 do
15683: GO 15685
15685: DISABLE
// begin UTOCENI = false ;
15686: LD_ADDR_LOC 9
15690: PUSH
15691: LD_INT 0
15693: ST_TO_ADDR
// Am_utoky = 0 ;
15694: LD_ADDR_EXP 70
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// Am_opoce = [ OPC1 , OPC2 , OPC3 , OPC4 ] ;
15702: LD_ADDR_EXP 65
15706: PUSH
15707: LD_INT 140
15709: PUSH
15710: LD_INT 141
15712: PUSH
15713: LD_INT 142
15715: PUSH
15716: LD_INT 143
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: ST_TO_ADDR
// mcmillanova_pomsta = false ;
15725: LD_ADDR_EXP 71
15729: PUSH
15730: LD_INT 0
15732: ST_TO_ADDR
// counter_utoku = 0 ;
15733: LD_ADDR_EXP 72
15737: PUSH
15738: LD_INT 0
15740: ST_TO_ADDR
// disable ( 998 ) ;
15741: LD_INT 998
15743: DISABLE_MARKED
// end ;
15744: END
// every 0 0$0.2 do
15745: GO 15747
15747: DISABLE
// begin ComEnterUnit ( VEDCI1 , Am_lab1 ) ;
15748: LD_EXP 62
15752: PPUSH
15753: LD_INT 48
15755: PPUSH
15756: CALL_OW 120
// ComEnterUnit ( VEDCI2 , Am_lab2 ) ;
15760: LD_EXP 63
15764: PPUSH
15765: LD_INT 55
15767: PPUSH
15768: CALL_OW 120
// ComEnterUnit ( VEDCI3 , Am_lab3 ) ;
15772: LD_EXP 64
15776: PPUSH
15777: LD_INT 56
15779: PPUSH
15780: CALL_OW 120
// ComEnterUnit ( Joan , Am_lab2 ) ;
15784: LD_EXP 61
15788: PPUSH
15789: LD_INT 55
15791: PPUSH
15792: CALL_OW 120
// ComEnterUnit ( Am_opoce , Am_dep ) ;
15796: LD_EXP 65
15800: PPUSH
15801: LD_INT 45
15803: PPUSH
15804: CALL_OW 120
// ComEnterUnit ( Am_mech , Am_ct ) ;
15808: LD_EXP 67
15812: PPUSH
15813: LD_INT 83
15815: PPUSH
15816: CALL_OW 120
// ComEnterUnit ( Am_vyr , Am_tov ) ;
15820: LD_EXP 68
15824: PPUSH
15825: LD_INT 175
15827: PPUSH
15828: CALL_OW 120
// ComEnterUnit ( Am_snipe , Am_bar ) ;
15832: LD_EXP 69
15836: PPUSH
15837: LD_INT 85
15839: PPUSH
15840: CALL_OW 120
// ComEnterUnit ( Am_sol , Am_bar ) ;
15844: LD_EXP 66
15848: PPUSH
15849: LD_INT 85
15851: PPUSH
15852: CALL_OW 120
// end ;
15856: END
// every 0 0$0.1 do var i , pom ;
15857: GO 15859
15859: DISABLE
15860: LD_INT 0
15862: PPUSH
15863: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
15864: LD_ADDR_VAR 0 2
15868: PUSH
15869: LD_INT 13
15871: PPUSH
15872: LD_INT 22
15874: PUSH
15875: LD_EXP 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 21
15886: PUSH
15887: LD_INT 3
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PPUSH
15898: CALL_OW 70
15902: ST_TO_ADDR
// for i in pom do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 2
15912: PUSH
15913: FOR_IN
15914: IFFALSE 15938
// SetBLevel ( i , levely_budovy_amici [ difficulty ] ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_EXP 40
15925: PUSH
15926: LD_OWVAR 67
15930: ARRAY
15931: PPUSH
15932: CALL_OW 241
15936: GO 15913
15938: POP
15939: POP
// end ;
15940: PPOPN 2
15942: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) > 0 do var pom ;
15943: LD_INT 22
15945: PUSH
15946: LD_EXP 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 101
15957: PUSH
15958: LD_EXP 2
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: PUSH
15976: LD_INT 0
15978: GREATER
15979: IFFALSE 16241
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
// begin pom = FilterUnitsInArea ( Am_vychod , [ [ f_side , You ] ] ) ;
15987: LD_ADDR_VAR 0 1
15991: PUSH
15992: LD_INT 18
15994: PPUSH
15995: LD_INT 22
15997: PUSH
15998: LD_EXP 1
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: PPUSH
16010: CALL_OW 70
16014: ST_TO_ADDR
// if pom > 0 then
16015: LD_VAR 0 1
16019: PUSH
16020: LD_INT 0
16022: GREATER
16023: IFFALSE 16115
// begin if IsOK ( Am_sol [ 1 ] ) then
16025: LD_EXP 66
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 302
16038: IFFALSE 16069
// begin ComExitBuilding ( Am_sol [ 1 ] ) ;
16040: LD_EXP 66
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: PPUSH
16049: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 1 ] , Am_bu3 ) ;
16053: LD_EXP 66
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: LD_INT 166
16064: PPUSH
16065: CALL_OW 180
// end ; if IsOK ( Am_sol [ 2 ] ) then
16069: LD_EXP 66
16073: PUSH
16074: LD_INT 2
16076: ARRAY
16077: PPUSH
16078: CALL_OW 302
16082: IFFALSE 16113
// begin ComExitBuilding ( Am_sol [ 2 ] ) ;
16084: LD_EXP 66
16088: PUSH
16089: LD_INT 2
16091: ARRAY
16092: PPUSH
16093: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 2 ] , Am_bu4 ) ;
16097: LD_EXP 66
16101: PUSH
16102: LD_INT 2
16104: ARRAY
16105: PPUSH
16106: LD_INT 171
16108: PPUSH
16109: CALL_OW 180
// end ; end else
16113: GO 16241
// begin pom = FilterUnitsInArea ( Am_vychod , [ [ f_side , You ] ] ) ;
16115: LD_ADDR_VAR 0 1
16119: PUSH
16120: LD_INT 18
16122: PPUSH
16123: LD_INT 22
16125: PUSH
16126: LD_EXP 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: PPUSH
16138: CALL_OW 70
16142: ST_TO_ADDR
// if pom > 0 then
16143: LD_VAR 0 1
16147: PUSH
16148: LD_INT 0
16150: GREATER
16151: IFFALSE 16241
// begin if IsOK ( Am_sol [ 1 ] ) then
16153: LD_EXP 66
16157: PUSH
16158: LD_INT 1
16160: ARRAY
16161: PPUSH
16162: CALL_OW 302
16166: IFFALSE 16197
// begin ComExitBuilding ( Am_sol [ 1 ] ) ;
16168: LD_EXP 66
16172: PUSH
16173: LD_INT 1
16175: ARRAY
16176: PPUSH
16177: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 1 ] , Am_bu1 ) ;
16181: LD_EXP 66
16185: PUSH
16186: LD_INT 1
16188: ARRAY
16189: PPUSH
16190: LD_INT 52
16192: PPUSH
16193: CALL_OW 180
// end ; if IsOK ( Am_sol [ 2 ] ) then
16197: LD_EXP 66
16201: PUSH
16202: LD_INT 2
16204: ARRAY
16205: PPUSH
16206: CALL_OW 302
16210: IFFALSE 16241
// begin ComExitBuilding ( Am_sol [ 2 ] ) ;
16212: LD_EXP 66
16216: PUSH
16217: LD_INT 2
16219: ARRAY
16220: PPUSH
16221: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 2 ] , Am_bu2 ) ;
16225: LD_EXP 66
16229: PUSH
16230: LD_INT 2
16232: ARRAY
16233: PPUSH
16234: LD_INT 53
16236: PPUSH
16237: CALL_OW 180
// end ; end ; end ; end ;
16241: PPOPN 1
16243: END
// every 1 1$7 do
16244: GO 16246
16246: DISABLE
// begin if Researched ( Amici , tech_Sib1 ) then
16247: LD_EXP 2
16251: PPUSH
16252: LD_INT 54
16254: PPUSH
16255: CALL_OW 325
16259: IFFALSE 16293
// begin SetTech ( tech_Sib1 , Amici , state_enabled ) ;
16261: LD_INT 54
16263: PPUSH
16264: LD_EXP 2
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 322
// ComResearch ( [ Am_lab1 , Am_lab2 ] , tech_Sib1 ) ;
16276: LD_INT 48
16278: PUSH
16279: LD_INT 55
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: LD_INT 54
16288: PPUSH
16289: CALL_OW 124
// end ; enable ;
16293: ENABLE
// end ;
16294: END
// every 0 0$19 do
16295: GO 16297
16297: DISABLE
// begin SetTech ( tech_Sib1 , Amici , state_enabled ) ;
16298: LD_INT 54
16300: PPUSH
16301: LD_EXP 2
16305: PPUSH
16306: LD_INT 1
16308: PPUSH
16309: CALL_OW 322
// ComResearch ( [ Am_lab1 , Am_lab2 ] , tech_Sib1 ) ;
16313: LD_INT 48
16315: PUSH
16316: LD_INT 55
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PPUSH
16323: LD_INT 54
16325: PPUSH
16326: CALL_OW 124
// end ;
16330: END
// every 1 1$8 do
16331: GO 16333
16333: DISABLE
// begin if Researched ( Amici , tech_Opto1 ) then
16334: LD_EXP 2
16338: PPUSH
16339: LD_INT 60
16341: PPUSH
16342: CALL_OW 325
16346: IFFALSE 16373
// begin SetTech ( tech_Opto1 , Amici , state_enabled ) ;
16348: LD_INT 60
16350: PPUSH
16351: LD_EXP 2
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 322
// ComResearch ( Am_lab3 , tech_Opto1 ) ;
16363: LD_INT 56
16365: PPUSH
16366: LD_INT 60
16368: PPUSH
16369: CALL_OW 124
// end ; enable ;
16373: ENABLE
// end ;
16374: END
// every 0 0$21 do
16375: GO 16377
16377: DISABLE
// begin SetTech ( tech_Opto1 , Amici , state_enabled ) ;
16378: LD_INT 60
16380: PPUSH
16381: LD_EXP 2
16385: PPUSH
16386: LD_INT 1
16388: PPUSH
16389: CALL_OW 322
// ComResearch ( Am_lab3 , tech_Opto1 ) ;
16393: LD_INT 56
16395: PPUSH
16396: LD_INT 60
16398: PPUSH
16399: CALL_OW 124
// end ;
16403: END
// every 0 0$10 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom , i , pom1 ;
16404: LD_EXP 59
16408: PUSH
16409: LD_INT 0
16411: EQUAL
16412: PUSH
16413: CALL 16508 0 0
16417: PUSH
16418: LD_INT 0
16420: EQUAL
16421: AND
16422: IFFALSE 16505
16424: GO 16426
16426: DISABLE
16427: LD_INT 0
16429: PPUSH
16430: PPUSH
16431: PPUSH
// begin if IsOK ( Am_bar ) and IsInUnit ( Am_sol [ 1 ] ) <> Am_bar and IsInUnit ( Am_sol [ 1 ] ) <> Am_bar then
16432: LD_INT 85
16434: PPUSH
16435: CALL_OW 302
16439: PUSH
16440: LD_EXP 66
16444: PUSH
16445: LD_INT 1
16447: ARRAY
16448: PPUSH
16449: CALL_OW 310
16453: PUSH
16454: LD_INT 85
16456: NONEQUAL
16457: AND
16458: PUSH
16459: LD_EXP 66
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: CALL_OW 310
16472: PUSH
16473: LD_INT 85
16475: NONEQUAL
16476: AND
16477: IFFALSE 16500
// begin ComExitBuilding ( Am_sol ) ;
16479: LD_EXP 66
16483: PPUSH
16484: CALL_OW 122
// AddComEnterUnit ( Am_sol , Am_bar ) ;
16488: LD_EXP 66
16492: PPUSH
16493: LD_INT 85
16495: PPUSH
16496: CALL_OW 180
// end ; opravovani_budov ;
16500: CALL 18639 0 0
// enable ;
16504: ENABLE
// end ;
16505: PPOPN 3
16507: END
// function bojeschopnych_rusu ; var pom , i , pom1 ; begin
16508: LD_INT 0
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) ;
16514: LD_ADDR_VAR 0 2
16518: PUSH
16519: LD_INT 22
16521: PUSH
16522: LD_EXP 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 101
16533: PUSH
16534: LD_EXP 2
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 69
16551: ST_TO_ADDR
// pom1 = pom ;
16552: LD_ADDR_VAR 0 4
16556: PUSH
16557: LD_VAR 0 2
16561: ST_TO_ADDR
// for i in pom do
16562: LD_ADDR_VAR 0 3
16566: PUSH
16567: LD_VAR 0 2
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16623
// if GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) = 0 then
16575: LD_VAR 0 3
16579: PPUSH
16580: CALL_OW 247
16584: PUSH
16585: LD_INT 2
16587: EQUAL
16588: PUSH
16589: LD_VAR 0 3
16593: PPUSH
16594: CALL_OW 311
16598: PUSH
16599: LD_INT 0
16601: EQUAL
16602: AND
16603: IFFALSE 16621
// pom1 = pom1 diff i ;
16605: LD_ADDR_VAR 0 4
16609: PUSH
16610: LD_VAR 0 4
16614: PUSH
16615: LD_VAR 0 3
16619: DIFF
16620: ST_TO_ADDR
16621: GO 16572
16623: POP
16624: POP
// debug_strings = [ pom1 ] ;
16625: LD_ADDR_OWVAR 48
16629: PUSH
16630: LD_VAR 0 4
16634: PUSH
16635: EMPTY
16636: LIST
16637: ST_TO_ADDR
// result := pom1 + 0 ;
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: LD_VAR 0 4
16647: PUSH
16648: LD_INT 0
16650: PLUS
16651: ST_TO_ADDR
// end ;
16652: LD_VAR 0 1
16656: RET
// every 0 0$19 trigger Am_utoky = 1 do var i ; var cesta ;
16657: LD_EXP 70
16661: PUSH
16662: LD_INT 1
16664: EQUAL
16665: IFFALSE 17019
16667: GO 16669
16669: DISABLE
16670: LD_INT 0
16672: PPUSH
16673: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
16674: LD_EXP 42
16678: PUSH
16679: LD_OWVAR 67
16683: ARRAY
16684: PPUSH
16685: CALL_OW 67
// wait ( Rand ( 1 , 0 0$30 ) ) ;
16689: LD_INT 1
16691: PPUSH
16692: LD_INT 1050
16694: PPUSH
16695: CALL_OW 12
16699: PPUSH
16700: CALL_OW 67
// if mcmillanova_pomsta then
16704: LD_EXP 71
16708: IFFALSE 16712
// exit ;
16710: GO 17019
// for i in AM_UTOK_1_LIST do
16712: LD_ADDR_VAR 0 1
16716: PUSH
16717: LD_EXP 32
16721: PUSH
16722: FOR_IN
16723: IFFALSE 16742
// PlaceUnitArea ( i , Am_enter , false ) ;
16725: LD_VAR 0 1
16729: PPUSH
16730: LD_INT 19
16732: PPUSH
16733: LD_INT 0
16735: PPUSH
16736: CALL_OW 49
16740: GO 16722
16742: POP
16743: POP
// case cislo_baze of 1 :
16744: LD_EXP 8
16748: PUSH
16749: LD_INT 1
16751: DOUBLE
16752: EQUAL
16753: IFTRUE 16757
16755: GO 16811
16757: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 57 , 77 ] , [ 48 , 75 ] ] ; 2 :
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_INT 40
16765: PUSH
16766: LD_INT 46
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 70
16775: PUSH
16776: LD_INT 62
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 57
16785: PUSH
16786: LD_INT 77
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 48
16795: PUSH
16796: LD_INT 75
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: ST_TO_ADDR
16809: GO 16980
16811: LD_INT 2
16813: DOUBLE
16814: EQUAL
16815: IFTRUE 16819
16817: GO 16884
16819: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 76 , 58 ] , [ 83 , 72 ] , [ 94 , 91 ] ] ; 3 :
16820: LD_ADDR_VAR 0 2
16824: PUSH
16825: LD_INT 40
16827: PUSH
16828: LD_INT 47
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 61
16837: PUSH
16838: LD_INT 52
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 76
16847: PUSH
16848: LD_INT 58
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 83
16857: PUSH
16858: LD_INT 72
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 94
16867: PUSH
16868: LD_INT 91
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: ST_TO_ADDR
16882: GO 16980
16884: LD_INT 3
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 16979
16892: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 86 , 76 ] , [ 103 , 95 ] , [ 126 , 79 ] , [ 140 , 82 ] , [ 144 , 69 ] ] ; end ;
16893: LD_ADDR_VAR 0 2
16897: PUSH
16898: LD_INT 40
16900: PUSH
16901: LD_INT 47
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 61
16910: PUSH
16911: LD_INT 52
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 86
16920: PUSH
16921: LD_INT 76
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 103
16930: PUSH
16931: LD_INT 95
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 126
16940: PUSH
16941: LD_INT 79
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 140
16950: PUSH
16951: LD_INT 82
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 144
16960: PUSH
16961: LD_INT 69
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: ST_TO_ADDR
16977: GO 16980
16979: POP
// McMove ( 1 , AM_UTOK_1_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
16980: LD_INT 1
16982: PPUSH
16983: LD_EXP 32
16987: PPUSH
16988: LD_VAR 0 2
16992: PPUSH
16993: LD_INT 5
16995: PUSH
16996: LD_INT 6
16998: PUSH
16999: LD_INT 3
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: PPUSH
17007: CALL_OW 398
// Am_utoky = 2 ;
17011: LD_ADDR_EXP 70
17015: PUSH
17016: LD_INT 2
17018: ST_TO_ADDR
// end ;
17019: PPOPN 2
17021: END
// every 0 0$17 trigger Am_utoky = 2 do var i ; var cesta ;
17022: LD_EXP 70
17026: PUSH
17027: LD_INT 2
17029: EQUAL
17030: IFFALSE 17369
17032: GO 17034
17034: DISABLE
17035: LD_INT 0
17037: PPUSH
17038: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
17039: LD_EXP 42
17043: PUSH
17044: LD_OWVAR 67
17048: ARRAY
17049: PPUSH
17050: CALL_OW 67
// if mcmillanova_pomsta then
17054: LD_EXP 71
17058: IFFALSE 17062
// exit ;
17060: GO 17369
// for i in AM_UTOK_2_LIST do
17062: LD_ADDR_VAR 0 1
17066: PUSH
17067: LD_EXP 33
17071: PUSH
17072: FOR_IN
17073: IFFALSE 17092
// PlaceUnitArea ( i , Am_enter , false ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: LD_INT 19
17082: PPUSH
17083: LD_INT 0
17085: PPUSH
17086: CALL_OW 49
17090: GO 17072
17092: POP
17093: POP
// case cislo_baze of 1 :
17094: LD_EXP 8
17098: PUSH
17099: LD_INT 1
17101: DOUBLE
17102: EQUAL
17103: IFTRUE 17107
17105: GO 17161
17107: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 57 , 77 ] , [ 48 , 75 ] ] ; 2 :
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_INT 40
17115: PUSH
17116: LD_INT 46
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 70
17125: PUSH
17126: LD_INT 62
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 57
17135: PUSH
17136: LD_INT 77
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 48
17145: PUSH
17146: LD_INT 75
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: ST_TO_ADDR
17159: GO 17330
17161: LD_INT 2
17163: DOUBLE
17164: EQUAL
17165: IFTRUE 17169
17167: GO 17234
17169: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 76 , 58 ] , [ 83 , 72 ] , [ 94 , 91 ] ] ; 3 :
17170: LD_ADDR_VAR 0 2
17174: PUSH
17175: LD_INT 40
17177: PUSH
17178: LD_INT 47
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 61
17187: PUSH
17188: LD_INT 52
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 76
17197: PUSH
17198: LD_INT 58
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 83
17207: PUSH
17208: LD_INT 72
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 94
17217: PUSH
17218: LD_INT 91
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: ST_TO_ADDR
17232: GO 17330
17234: LD_INT 3
17236: DOUBLE
17237: EQUAL
17238: IFTRUE 17242
17240: GO 17329
17242: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 86 , 76 ] , [ 103 , 95 ] , [ 126 , 79 ] , [ 140 , 82 ] , [ 144 , 69 ] ] ; end ;
17243: LD_ADDR_VAR 0 2
17247: PUSH
17248: LD_INT 40
17250: PUSH
17251: LD_INT 47
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 61
17260: PUSH
17261: LD_INT 52
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 86
17270: PUSH
17271: LD_INT 76
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 103
17280: PUSH
17281: LD_INT 95
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 126
17290: PUSH
17291: LD_INT 79
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 140
17300: PUSH
17301: LD_INT 82
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 144
17310: PUSH
17311: LD_INT 69
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: ST_TO_ADDR
17327: GO 17330
17329: POP
// McMove ( 1 , AM_UTOK_2_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
17330: LD_INT 1
17332: PPUSH
17333: LD_EXP 33
17337: PPUSH
17338: LD_VAR 0 2
17342: PPUSH
17343: LD_INT 5
17345: PUSH
17346: LD_INT 6
17348: PUSH
17349: LD_INT 3
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: PPUSH
17357: CALL_OW 398
// Am_utoky = 3 ;
17361: LD_ADDR_EXP 70
17365: PUSH
17366: LD_INT 3
17368: ST_TO_ADDR
// end ;
17369: PPOPN 2
17371: END
// every 0 0$19 trigger Am_utoky = 3 do var i ; var cesta ;
17372: LD_EXP 70
17376: PUSH
17377: LD_INT 3
17379: EQUAL
17380: IFFALSE 17752
17382: GO 17384
17384: DISABLE
17385: LD_INT 0
17387: PPUSH
17388: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
17389: LD_EXP 42
17393: PUSH
17394: LD_OWVAR 67
17398: ARRAY
17399: PPUSH
17400: CALL_OW 67
// if mcmillanova_pomsta then
17404: LD_EXP 71
17408: IFFALSE 17412
// exit ;
17410: GO 17752
// for i in AM_UTOK_3_LIST do
17412: LD_ADDR_VAR 0 1
17416: PUSH
17417: LD_EXP 34
17421: PUSH
17422: FOR_IN
17423: IFFALSE 17442
// PlaceUnitArea ( i , Am_enter , false ) ;
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_INT 19
17432: PPUSH
17433: LD_INT 0
17435: PPUSH
17436: CALL_OW 49
17440: GO 17422
17442: POP
17443: POP
// case cislo_baze of 1 :
17444: LD_EXP 8
17448: PUSH
17449: LD_INT 1
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17522
17457: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 96 , 104 ] , [ 70 , 100 ] , [ 49 , 78 ] ] ; 2 :
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 40
17465: PUSH
17466: LD_INT 46
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 70
17475: PUSH
17476: LD_INT 62
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 96
17485: PUSH
17486: LD_INT 104
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 70
17495: PUSH
17496: LD_INT 100
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 49
17505: PUSH
17506: LD_INT 78
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: ST_TO_ADDR
17520: GO 17713
17522: LD_INT 2
17524: DOUBLE
17525: EQUAL
17526: IFTRUE 17530
17528: GO 17606
17530: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 59 , 76 ] , [ 59 , 85 ] , [ 71 , 99 ] , [ 97 , 103 ] ] ; 3 :
17531: LD_ADDR_VAR 0 2
17535: PUSH
17536: LD_INT 40
17538: PUSH
17539: LD_INT 47
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 61
17548: PUSH
17549: LD_INT 52
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 59
17558: PUSH
17559: LD_INT 76
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 59
17568: PUSH
17569: LD_INT 85
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 71
17578: PUSH
17579: LD_INT 99
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 97
17588: PUSH
17589: LD_INT 103
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: ST_TO_ADDR
17604: GO 17713
17606: LD_INT 3
17608: DOUBLE
17609: EQUAL
17610: IFTRUE 17614
17612: GO 17712
17614: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 87 , 42 ] , [ 84 , 20 ] , [ 100 , 30 ] , [ 128 , 41 ] , [ 139 , 45 ] , [ 148 , 65 ] ] ; end ;
17615: LD_ADDR_VAR 0 2
17619: PUSH
17620: LD_INT 40
17622: PUSH
17623: LD_INT 47
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 61
17632: PUSH
17633: LD_INT 52
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 87
17642: PUSH
17643: LD_INT 42
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 84
17652: PUSH
17653: LD_INT 20
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 100
17662: PUSH
17663: LD_INT 30
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 128
17672: PUSH
17673: LD_INT 41
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 139
17682: PUSH
17683: LD_INT 45
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 148
17692: PUSH
17693: LD_INT 65
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: ST_TO_ADDR
17710: GO 17713
17712: POP
// McMove ( 1 , AM_UTOK_3_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
17713: LD_INT 1
17715: PPUSH
17716: LD_EXP 34
17720: PPUSH
17721: LD_VAR 0 2
17725: PPUSH
17726: LD_INT 5
17728: PUSH
17729: LD_INT 6
17731: PUSH
17732: LD_INT 3
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: PPUSH
17740: CALL_OW 398
// Am_utoky = 4 ;
17744: LD_ADDR_EXP 70
17748: PUSH
17749: LD_INT 4
17751: ST_TO_ADDR
// end ;
17752: PPOPN 2
17754: END
// every 0 0$19 trigger mcmillanova_pomsta marked 999 do var units ; var i , pom ; var cesta ;
17755: LD_EXP 71
17759: IFFALSE 18060
17761: GO 17763
17763: DISABLE
17764: LD_INT 0
17766: PPUSH
17767: PPUSH
17768: PPUSH
17769: PPUSH
// begin cesta = [ [ 74 , 52 ] ] ;
17770: LD_ADDR_VAR 0 4
17774: PUSH
17775: LD_INT 74
17777: PUSH
17778: LD_INT 52
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: ST_TO_ADDR
// units = create_JMM_revange ;
17788: LD_ADDR_VAR 0 1
17792: PUSH
17793: CALL 9820 0 0
17797: ST_TO_ADDR
// for i in units do
17798: LD_ADDR_VAR 0 2
17802: PUSH
17803: LD_VAR 0 1
17807: PUSH
17808: FOR_IN
17809: IFFALSE 17828
// PlaceUnitArea ( i , JMM_revenge , false ) ;
17811: LD_VAR 0 2
17815: PPUSH
17816: LD_INT 29
17818: PPUSH
17819: LD_INT 0
17821: PPUSH
17822: CALL_OW 49
17826: GO 17808
17828: POP
17829: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
17830: LD_ADDR_VAR 0 3
17834: PUSH
17835: LD_INT 22
17837: PUSH
17838: LD_EXP 1
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 21
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 21
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PPUSH
17879: CALL_OW 69
17883: ST_TO_ADDR
// for i in pom do
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: LD_VAR 0 3
17893: PUSH
17894: FOR_IN
17895: IFFALSE 17937
// cesta = cesta ^ [ [ GetX ( i ) , GetY ( i ) ] ] ;
17897: LD_ADDR_VAR 0 4
17901: PUSH
17902: LD_VAR 0 4
17906: PUSH
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 250
17916: PUSH
17917: LD_VAR 0 2
17921: PPUSH
17922: CALL_OW 251
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: ADD
17934: ST_TO_ADDR
17935: GO 17894
17937: POP
17938: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
17939: LD_ADDR_VAR 0 3
17943: PUSH
17944: LD_INT 22
17946: PUSH
17947: LD_EXP 1
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 21
17958: PUSH
17959: LD_INT 3
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PPUSH
17970: CALL_OW 69
17974: ST_TO_ADDR
// for i in pom do
17975: LD_ADDR_VAR 0 2
17979: PUSH
17980: LD_VAR 0 3
17984: PUSH
17985: FOR_IN
17986: IFFALSE 18028
// cesta = cesta ^ [ [ GetX ( i ) , GetY ( i ) ] ] ;
17988: LD_ADDR_VAR 0 4
17992: PUSH
17993: LD_VAR 0 4
17997: PUSH
17998: LD_VAR 0 2
18002: PPUSH
18003: CALL_OW 250
18007: PUSH
18008: LD_VAR 0 2
18012: PPUSH
18013: CALL_OW 251
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: ADD
18025: ST_TO_ADDR
18026: GO 17985
18028: POP
18029: POP
// McMove ( 1 , units , cesta , [ mc_move_agressive , mc_move_dontcapture ] ) ;
18030: LD_INT 1
18032: PPUSH
18033: LD_VAR 0 1
18037: PPUSH
18038: LD_VAR 0 4
18042: PPUSH
18043: LD_INT 6
18045: PUSH
18046: LD_INT 5
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 398
// enable ( 998 ) ;
18057: LD_INT 998
18059: ENABLE_MARKED
// end ;
18060: PPOPN 4
18062: END
// every 0 0$13 marked 998 do
18063: GO 18065
18065: DISABLE
// begin wait ( wait_mcmillanova_pomsta [ difficulty ] ) ;
18066: LD_EXP 48
18070: PUSH
18071: LD_OWVAR 67
18075: ARRAY
18076: PPUSH
18077: CALL_OW 67
// enable ( 999 ) ;
18081: LD_INT 999
18083: ENABLE_MARKED
// end ;
18084: END
// every 0 0$13 trigger Am_utoky = 4 do
18085: LD_EXP 70
18089: PUSH
18090: LD_INT 4
18092: EQUAL
18093: IFFALSE 18445
18095: GO 18097
18097: DISABLE
// begin wait ( cas_na_odchod_vedcu [ difficulty ] ) ;
18098: LD_EXP 46
18102: PUSH
18103: LD_OWVAR 67
18107: ARRAY
18108: PPUSH
18109: CALL_OW 67
// cekej_na_utok ;
18113: CALL 20604 0 0
// ComExitBuilding ( VEDCI1 ) ;
18117: LD_EXP 62
18121: PPUSH
18122: CALL_OW 122
// McMove ( 1 , VEDCI1 , [ [ 118 , 60 ] , [ 113 , 73 ] , [ 98 , 74 ] , [ 87 , 42 ] , [ 82 , 33 ] , [ 67 , 2 ] ] , [ ] ) ;
18126: LD_INT 1
18128: PPUSH
18129: LD_EXP 62
18133: PPUSH
18134: LD_INT 118
18136: PUSH
18137: LD_INT 60
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 113
18146: PUSH
18147: LD_INT 73
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 98
18156: PUSH
18157: LD_INT 74
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 87
18166: PUSH
18167: LD_INT 42
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 82
18176: PUSH
18177: LD_INT 33
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 67
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: PPUSH
18202: EMPTY
18203: PPUSH
18204: CALL_OW 398
// ComExitBuilding ( VEDCI2 ) ;
18208: LD_EXP 63
18212: PPUSH
18213: CALL_OW 122
// wait ( 0 0$30 ) ;
18217: LD_INT 1050
18219: PPUSH
18220: CALL_OW 67
// McMove ( 1 , VEDCI2 , [ [ 88 , 10 ] , [ 85 , 42 ] , [ 93 , 57 ] , [ 62 , 50 ] , [ 43 , 31 ] , [ 24 , 22 ] , [ 30 , 40 ] , [ 15 , 29 ] ] , [ ] ) ;
18224: LD_INT 1
18226: PPUSH
18227: LD_EXP 63
18231: PPUSH
18232: LD_INT 88
18234: PUSH
18235: LD_INT 10
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 85
18244: PUSH
18245: LD_INT 42
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 93
18254: PUSH
18255: LD_INT 57
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 62
18264: PUSH
18265: LD_INT 50
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 43
18274: PUSH
18275: LD_INT 31
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 24
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 30
18294: PUSH
18295: LD_INT 40
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 15
18304: PUSH
18305: LD_INT 29
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: PPUSH
18322: EMPTY
18323: PPUSH
18324: CALL_OW 398
// ComExitBuilding ( VEDCI3 ) ;
18328: LD_EXP 64
18332: PPUSH
18333: CALL_OW 122
// wait ( 0 0$30 ) ;
18337: LD_INT 1050
18339: PPUSH
18340: CALL_OW 67
// McMove ( 1 , VEDCI3 , [ [ 101 , 46 ] , [ 112 , 75 ] , [ 90 , 90 ] , [ 70 , 83 ] , [ 54 , 82 ] , [ 32 , 44 ] , [ 16 , 28 ] ] , [ ] ) ;
18344: LD_INT 1
18346: PPUSH
18347: LD_EXP 64
18351: PPUSH
18352: LD_INT 101
18354: PUSH
18355: LD_INT 46
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 112
18364: PUSH
18365: LD_INT 75
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 90
18374: PUSH
18375: LD_INT 90
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 70
18384: PUSH
18385: LD_INT 83
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 54
18394: PUSH
18395: LD_INT 82
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 32
18404: PUSH
18405: LD_INT 44
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 16
18414: PUSH
18415: LD_INT 28
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PPUSH
18431: EMPTY
18432: PPUSH
18433: CALL_OW 398
// Am_utoky = 5 ;
18437: LD_ADDR_EXP 70
18441: PUSH
18442: LD_INT 5
18444: ST_TO_ADDR
// end ;
18445: END
// every 0 0$1 trigger Am_utoky = 5 do var pom , i ;
18446: LD_EXP 70
18450: PUSH
18451: LD_INT 5
18453: EQUAL
18454: IFFALSE 18636
18456: GO 18458
18458: DISABLE
18459: LD_INT 0
18461: PPUSH
18462: PPUSH
// begin pom = FilterUnitsInArea ( Sci_ex_2 , [ [ f_side , Amici ] , [ f_class , class_scientistic ] ] ) ;
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: LD_INT 21
18470: PPUSH
18471: LD_INT 22
18473: PUSH
18474: LD_EXP 2
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 25
18485: PUSH
18486: LD_INT 4
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 70
18501: ST_TO_ADDR
// if pom > 0 then
18502: LD_VAR 0 1
18506: PUSH
18507: LD_INT 0
18509: GREATER
18510: IFFALSE 18549
// begin for i in pom do
18512: LD_ADDR_VAR 0 2
18516: PUSH
18517: LD_VAR 0 1
18521: PUSH
18522: FOR_IN
18523: IFFALSE 18536
// RemoveUnit ( i ) ;
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 64
18534: GO 18522
18536: POP
18537: POP
// wait ( 0 0$2 ) ;
18538: LD_INT 70
18540: PPUSH
18541: CALL_OW 67
// prohra_vedci ;
18545: CALL 156 0 0
// end ; pom = FilterUnitsInArea ( Sci_ex_3 , [ [ f_side , Amici ] , [ f_class , class_scientistic ] ] ) ;
18549: LD_ADDR_VAR 0 1
18553: PUSH
18554: LD_INT 22
18556: PPUSH
18557: LD_INT 22
18559: PUSH
18560: LD_EXP 2
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 25
18571: PUSH
18572: LD_INT 4
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 70
18587: ST_TO_ADDR
// if pom > 0 then
18588: LD_VAR 0 1
18592: PUSH
18593: LD_INT 0
18595: GREATER
18596: IFFALSE 18635
// begin for i in pom do
18598: LD_ADDR_VAR 0 2
18602: PUSH
18603: LD_VAR 0 1
18607: PUSH
18608: FOR_IN
18609: IFFALSE 18622
// RemoveUnit ( i ) ;
18611: LD_VAR 0 2
18615: PPUSH
18616: CALL_OW 64
18620: GO 18608
18622: POP
18623: POP
// wait ( 0 0$2 ) ;
18624: LD_INT 70
18626: PPUSH
18627: CALL_OW 67
// prohra_vedci ;
18631: CALL 156 0 0
// end ; enable ;
18635: ENABLE
// end ;
18636: PPOPN 2
18638: END
// function opravovani_budov ; var pom , pom1 , i ; begin
18639: LD_INT 0
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
// pom1 = [ ] ;
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: EMPTY
18651: ST_TO_ADDR
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
18652: LD_ADDR_VAR 0 2
18656: PUSH
18657: LD_INT 13
18659: PPUSH
18660: LD_INT 22
18662: PUSH
18663: LD_EXP 4
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 3
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PPUSH
18686: CALL_OW 70
18690: ST_TO_ADDR
// for i in pom do
18691: LD_ADDR_VAR 0 4
18695: PUSH
18696: LD_VAR 0 2
18700: PUSH
18701: FOR_IN
18702: IFFALSE 18737
// if GetLives ( i ) < 1000 then
18704: LD_VAR 0 4
18708: PPUSH
18709: CALL_OW 256
18713: PUSH
18714: LD_INT 1000
18716: LESS
18717: IFFALSE 18735
// pom1 = pom1 ^ i ;
18719: LD_ADDR_VAR 0 3
18723: PUSH
18724: LD_VAR 0 3
18728: PUSH
18729: LD_VAR 0 4
18733: ADD
18734: ST_TO_ADDR
18735: GO 18701
18737: POP
18738: POP
// if pom1 > 0 then
18739: LD_VAR 0 3
18743: PUSH
18744: LD_INT 0
18746: GREATER
18747: IFFALSE 18862
// begin if IsInUnit ( Am_opoce [ 1 ] ) or IsInUnit ( Am_opoce [ 2 ] ) or IsInUnit ( Am_opoce [ 3 ] ) then
18749: LD_EXP 65
18753: PUSH
18754: LD_INT 1
18756: ARRAY
18757: PPUSH
18758: CALL_OW 310
18762: PUSH
18763: LD_EXP 65
18767: PUSH
18768: LD_INT 2
18770: ARRAY
18771: PPUSH
18772: CALL_OW 310
18776: OR
18777: PUSH
18778: LD_EXP 65
18782: PUSH
18783: LD_INT 3
18785: ARRAY
18786: PPUSH
18787: CALL_OW 310
18791: OR
18792: IFFALSE 18862
// begin ComExitBuilding ( Am_opoce ) ;
18794: LD_EXP 65
18798: PPUSH
18799: CALL_OW 122
// for i in pom1 do
18803: LD_ADDR_VAR 0 4
18807: PUSH
18808: LD_VAR 0 3
18812: PUSH
18813: FOR_IN
18814: IFFALSE 18832
// AddComRepairBuilding ( Am_opoce , i ) ;
18816: LD_EXP 65
18820: PPUSH
18821: LD_VAR 0 4
18825: PPUSH
18826: CALL_OW 190
18830: GO 18813
18832: POP
18833: POP
// AddComEnterUnit ( Am_opoce , Am_dep ) ;
18834: LD_EXP 65
18838: PPUSH
18839: LD_INT 45
18841: PPUSH
18842: CALL_OW 180
// ComEnterUnit ( Am_opoce [ 4 ] , Am_dep ) ;
18846: LD_EXP 65
18850: PUSH
18851: LD_INT 4
18853: ARRAY
18854: PPUSH
18855: LD_INT 45
18857: PPUSH
18858: CALL_OW 120
// end ; end end ;
18862: LD_VAR 0 1
18866: RET
// every 0 0$10 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) < max_pocet_aut [ difficulty ] do var design ;
18867: LD_INT 13
18869: PPUSH
18870: LD_INT 22
18872: PUSH
18873: LD_EXP 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 21
18884: PUSH
18885: LD_INT 2
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL_OW 70
18900: PUSH
18901: LD_EXP 43
18905: PUSH
18906: LD_OWVAR 67
18910: ARRAY
18911: LESS
18912: IFFALSE 18999
18914: GO 18916
18916: DISABLE
18917: LD_INT 0
18919: PPUSH
// begin AddResourceType ( GetBase ( Am_dep ) , mat_cans , 50 ) ;
18920: LD_INT 45
18922: PPUSH
18923: CALL_OW 274
18927: PPUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_INT 50
18933: PPUSH
18934: CALL_OW 276
// if BuildingStatus ( Am_tov ) <> 3 then
18938: LD_INT 175
18940: PPUSH
18941: CALL_OW 461
18945: PUSH
18946: LD_INT 3
18948: NONEQUAL
18949: IFFALSE 18998
// begin design = get_random_design ;
18951: LD_ADDR_VAR 0 1
18955: PUSH
18956: CALL 19002 0 0
18960: ST_TO_ADDR
// ComConstruct ( Am_tov , design [ 1 ] , design [ 2 ] , control_remote , design [ 3 ] ) ;
18961: LD_INT 175
18963: PPUSH
18964: LD_VAR 0 1
18968: PUSH
18969: LD_INT 1
18971: ARRAY
18972: PPUSH
18973: LD_VAR 0 1
18977: PUSH
18978: LD_INT 2
18980: ARRAY
18981: PPUSH
18982: LD_INT 2
18984: PPUSH
18985: LD_VAR 0 1
18989: PUSH
18990: LD_INT 3
18992: ARRAY
18993: PPUSH
18994: CALL_OW 125
// end ; enable ;
18998: ENABLE
// end ;
18999: PPOPN 1
19001: END
// function get_random_design ; var pom1 , pom2 , pom3 ; var aa , aa1 , aa2 , aa3 ; begin
19002: LD_INT 0
19004: PPUSH
19005: PPUSH
19006: PPUSH
19007: PPUSH
19008: PPUSH
19009: PPUSH
19010: PPUSH
19011: PPUSH
// pom1 = Rand ( 1 , 5 ) ;
19012: LD_ADDR_VAR 0 2
19016: PUSH
19017: LD_INT 1
19019: PPUSH
19020: LD_INT 5
19022: PPUSH
19023: CALL_OW 12
19027: ST_TO_ADDR
// case pom1 of 1 :
19028: LD_VAR 0 2
19032: PUSH
19033: LD_INT 1
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19052
19041: POP
// aa3 = us_machine_gun ; 2 :
19042: LD_ADDR_VAR 0 8
19046: PUSH
19047: LD_INT 2
19049: ST_TO_ADDR
19050: GO 19129
19052: LD_INT 2
19054: DOUBLE
19055: EQUAL
19056: IFTRUE 19060
19058: GO 19071
19060: POP
// aa3 = us_light_gun ; 3 :
19061: LD_ADDR_VAR 0 8
19065: PUSH
19066: LD_INT 3
19068: ST_TO_ADDR
19069: GO 19129
19071: LD_INT 3
19073: DOUBLE
19074: EQUAL
19075: IFTRUE 19079
19077: GO 19090
19079: POP
// aa3 = us_gatling_gun ; 4 :
19080: LD_ADDR_VAR 0 8
19084: PUSH
19085: LD_INT 4
19087: ST_TO_ADDR
19088: GO 19129
19090: LD_INT 4
19092: DOUBLE
19093: EQUAL
19094: IFTRUE 19098
19096: GO 19109
19098: POP
// aa3 = us_double_gun ; 5 :
19099: LD_ADDR_VAR 0 8
19103: PUSH
19104: LD_INT 5
19106: ST_TO_ADDR
19107: GO 19129
19109: LD_INT 5
19111: DOUBLE
19112: EQUAL
19113: IFTRUE 19117
19115: GO 19128
19117: POP
// aa3 = us_heavy_gun ; end ;
19118: LD_ADDR_VAR 0 8
19122: PUSH
19123: LD_INT 6
19125: ST_TO_ADDR
19126: GO 19129
19128: POP
// if pom1 = 5 then
19129: LD_VAR 0 2
19133: PUSH
19134: LD_INT 5
19136: EQUAL
19137: IFFALSE 19149
// pom2 = 4 else
19139: LD_ADDR_VAR 0 3
19143: PUSH
19144: LD_INT 4
19146: ST_TO_ADDR
19147: GO 19200
// if pom1 in [ 3 , 4 ] then
19149: LD_VAR 0 2
19153: PUSH
19154: LD_INT 3
19156: PUSH
19157: LD_INT 4
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: IN
19164: IFFALSE 19184
// pom2 = Rand ( 2 , 4 ) else
19166: LD_ADDR_VAR 0 3
19170: PUSH
19171: LD_INT 2
19173: PPUSH
19174: LD_INT 4
19176: PPUSH
19177: CALL_OW 12
19181: ST_TO_ADDR
19182: GO 19200
// pom2 = Rand ( 1 , 4 ) ;
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_INT 4
19194: PPUSH
19195: CALL_OW 12
19199: ST_TO_ADDR
// case pom2 of 1 :
19200: LD_VAR 0 3
19204: PUSH
19205: LD_INT 1
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19224
19213: POP
// aa1 = us_light_wheeled ; 2 :
19214: LD_ADDR_VAR 0 6
19218: PUSH
19219: LD_INT 1
19221: ST_TO_ADDR
19222: GO 19282
19224: LD_INT 2
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19232
19230: GO 19243
19232: POP
// aa1 = us_medium_wheeled ; 3 :
19233: LD_ADDR_VAR 0 6
19237: PUSH
19238: LD_INT 2
19240: ST_TO_ADDR
19241: GO 19282
19243: LD_INT 3
19245: DOUBLE
19246: EQUAL
19247: IFTRUE 19251
19249: GO 19262
19251: POP
// aa1 = us_medium_tracked ; 4 :
19252: LD_ADDR_VAR 0 6
19256: PUSH
19257: LD_INT 3
19259: ST_TO_ADDR
19260: GO 19282
19262: LD_INT 4
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19270
19268: GO 19281
19270: POP
// aa1 = us_heavy_tracked ; end ;
19271: LD_ADDR_VAR 0 6
19275: PUSH
19276: LD_INT 4
19278: ST_TO_ADDR
19279: GO 19282
19281: POP
// if pom2 <> 4 then
19282: LD_VAR 0 3
19286: PUSH
19287: LD_INT 4
19289: NONEQUAL
19290: IFFALSE 19310
// pom3 = Rand ( 1 , 3 ) else
19292: LD_ADDR_VAR 0 4
19296: PUSH
19297: LD_INT 1
19299: PPUSH
19300: LD_INT 3
19302: PPUSH
19303: CALL_OW 12
19307: ST_TO_ADDR
19308: GO 19326
// pom3 = Rand ( 2 , 3 ) ;
19310: LD_ADDR_VAR 0 4
19314: PUSH
19315: LD_INT 2
19317: PPUSH
19318: LD_INT 3
19320: PPUSH
19321: CALL_OW 12
19325: ST_TO_ADDR
// case pom3 of 1 :
19326: LD_VAR 0 4
19330: PUSH
19331: LD_INT 1
19333: DOUBLE
19334: EQUAL
19335: IFTRUE 19339
19337: GO 19350
19339: POP
// aa2 = engine_solar ; 2 :
19340: LD_ADDR_VAR 0 7
19344: PUSH
19345: LD_INT 2
19347: ST_TO_ADDR
19348: GO 19389
19350: LD_INT 2
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19369
19358: POP
// aa2 = engine_combustion ; 3 :
19359: LD_ADDR_VAR 0 7
19363: PUSH
19364: LD_INT 1
19366: ST_TO_ADDR
19367: GO 19389
19369: LD_INT 3
19371: DOUBLE
19372: EQUAL
19373: IFTRUE 19377
19375: GO 19388
19377: POP
// aa2 = engine_siberite ; end ;
19378: LD_ADDR_VAR 0 7
19382: PUSH
19383: LD_INT 3
19385: ST_TO_ADDR
19386: GO 19389
19388: POP
// aa = [ aa1 , aa2 , aa3 ] ;
19389: LD_ADDR_VAR 0 5
19393: PUSH
19394: LD_VAR 0 6
19398: PUSH
19399: LD_VAR 0 7
19403: PUSH
19404: LD_VAR 0 8
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: LIST
19413: ST_TO_ADDR
// result = aa ;
19414: LD_ADDR_VAR 0 1
19418: PUSH
19419: LD_VAR 0 5
19423: ST_TO_ADDR
// end ;
19424: LD_VAR 0 1
19428: RET
// every 0 0$5 trigger IsOK ( Am_snipe ) do var u , sl ;
19429: LD_EXP 69
19433: PPUSH
19434: CALL_OW 302
19438: IFFALSE 19563
19440: GO 19442
19442: DISABLE
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
// begin sl = false ;
19447: LD_ADDR_VAR 0 2
19451: PUSH
19452: LD_INT 0
19454: ST_TO_ADDR
// if Attacks ( Am_snipe ) < 0 then
19455: LD_EXP 69
19459: PPUSH
19460: CALL_OW 320
19464: PUSH
19465: LD_INT 0
19467: LESS
19468: IFFALSE 19562
// begin u = Attacks ( Am_snipe ) ;
19470: LD_ADDR_VAR 0 1
19474: PUSH
19475: LD_EXP 69
19479: PPUSH
19480: CALL_OW 320
19484: ST_TO_ADDR
// if GetType ( u ) <> unit_vehicle then
19485: LD_VAR 0 1
19489: PPUSH
19490: CALL_OW 247
19494: PUSH
19495: LD_INT 2
19497: NONEQUAL
19498: IFFALSE 19510
// sl = true else
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: LD_INT 1
19507: ST_TO_ADDR
19508: GO 19533
// if GetControl ( u ) = control_manual then
19510: LD_VAR 0 1
19514: PPUSH
19515: CALL_OW 263
19519: PUSH
19520: LD_INT 1
19522: EQUAL
19523: IFFALSE 19533
// sl = true ;
19525: LD_ADDR_VAR 0 2
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// if sl then
19533: LD_VAR 0 2
19537: IFFALSE 19562
// if Prob ( 45 ) then
19539: LD_INT 45
19541: PPUSH
19542: CALL_OW 13
19546: IFFALSE 19562
// ComAttackSoporific ( Am_snipe , u ) ;
19548: LD_EXP 69
19552: PPUSH
19553: LD_VAR 0 1
19557: PPUSH
19558: CALL_OW 166
// end ; enable ;
19562: ENABLE
// end ;
19563: PPOPN 2
19565: END
// every 0 0$1 do
19566: GO 19568
19568: DISABLE
// begin wait ( cas_prvniho_utoku [ difficulty ] ) ;
19569: LD_EXP 45
19573: PUSH
19574: LD_OWVAR 67
19578: ARRAY
19579: PPUSH
19580: CALL_OW 67
// UTOCENI = true ;
19584: LD_ADDR_LOC 9
19588: PUSH
19589: LD_INT 1
19591: ST_TO_ADDR
// end ;
19592: END
// every 0 0$1 trigger UTOCENI do var pom , i ; var cesty ;
19593: LD_LOC 9
19597: IFFALSE 20344
19599: GO 19601
19601: DISABLE
19602: LD_INT 0
19604: PPUSH
19605: PPUSH
19606: PPUSH
// begin pom = create_pre_attack ;
19607: LD_ADDR_VAR 0 1
19611: PUSH
19612: CALL 10337 0 0
19616: ST_TO_ADDR
// for i in pom do
19617: LD_ADDR_VAR 0 2
19621: PUSH
19622: LD_VAR 0 1
19626: PUSH
19627: FOR_IN
19628: IFFALSE 19647
// PlaceUnitArea ( i , Am_enter , false ) ;
19630: LD_VAR 0 2
19634: PPUSH
19635: LD_INT 19
19637: PPUSH
19638: LD_INT 0
19640: PPUSH
19641: CALL_OW 49
19645: GO 19627
19647: POP
19648: POP
// case cislo_baze of 1 :
19649: LD_EXP 8
19653: PUSH
19654: LD_INT 1
19656: DOUBLE
19657: EQUAL
19658: IFTRUE 19662
19660: GO 19846
19662: POP
// cesty = [ [ [ 46 , 50 ] , [ 75 , 55 ] , [ 85 , 75 ] , [ 96 , 102 ] , [ 69 , 101 ] , [ 48 , 78 ] ] , [ [ 38 , 43 ] , [ 58 , 54 ] , [ 51 , 80 ] ] , [ [ 46 , 50 ] , [ 75 , 55 ] , [ 85 , 75 ] , [ 96 , 102 ] , [ 69 , 101 ] , [ 48 , 78 ] ] ] ; 2 :
19663: LD_ADDR_VAR 0 3
19667: PUSH
19668: LD_INT 46
19670: PUSH
19671: LD_INT 50
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 75
19680: PUSH
19681: LD_INT 55
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 85
19690: PUSH
19691: LD_INT 75
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 96
19700: PUSH
19701: LD_INT 102
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 69
19710: PUSH
19711: LD_INT 101
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 48
19720: PUSH
19721: LD_INT 78
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 38
19738: PUSH
19739: LD_INT 43
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 58
19748: PUSH
19749: LD_INT 54
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 51
19758: PUSH
19759: LD_INT 80
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 46
19773: PUSH
19774: LD_INT 50
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 75
19783: PUSH
19784: LD_INT 55
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 85
19793: PUSH
19794: LD_INT 75
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 96
19803: PUSH
19804: LD_INT 102
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 69
19813: PUSH
19814: LD_INT 101
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 48
19823: PUSH
19824: LD_INT 78
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: ST_TO_ADDR
19844: GO 20275
19846: LD_INT 2
19848: DOUBLE
19849: EQUAL
19850: IFTRUE 19854
19852: GO 20027
19854: POP
// cesty = [ [ [ 40 , 47 ] , [ 61 , 52 ] , [ 59 , 76 ] , [ 59 , 85 ] , [ 71 , 99 ] , [ 97 , 103 ] ] , [ [ 42 , 46 ] , [ 71 , 48 ] , [ 81 , 66 ] , [ 96 , 98 ] ] , [ [ 42 , 46 ] , [ 71 , 48 ] , [ 81 , 66 ] , [ 96 , 98 ] ] ] ; 3 :
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: LD_INT 40
19862: PUSH
19863: LD_INT 47
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 61
19872: PUSH
19873: LD_INT 52
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 59
19882: PUSH
19883: LD_INT 76
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 59
19892: PUSH
19893: LD_INT 85
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 71
19902: PUSH
19903: LD_INT 99
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 97
19912: PUSH
19913: LD_INT 103
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 42
19930: PUSH
19931: LD_INT 46
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 71
19940: PUSH
19941: LD_INT 48
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 81
19950: PUSH
19951: LD_INT 66
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 96
19960: PUSH
19961: LD_INT 98
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 42
19976: PUSH
19977: LD_INT 46
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 71
19986: PUSH
19987: LD_INT 48
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 81
19996: PUSH
19997: LD_INT 66
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 96
20006: PUSH
20007: LD_INT 98
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: ST_TO_ADDR
20025: GO 20275
20027: LD_INT 3
20029: DOUBLE
20030: EQUAL
20031: IFTRUE 20035
20033: GO 20274
20035: POP
// cesty = [ [ [ 40 , 47 ] , [ 61 , 52 ] , [ 87 , 42 ] , [ 95 , 94 ] , [ 113 , 96 ] , [ 143 , 78 ] , [ 142 , 68 ] , [ 160 , 88 ] ] , [ [ 39 , 43 ] , [ 70 , 49 ] , [ 94 , 93 ] , [ 122 , 93 ] , [ 147 , 64 ] , [ 156 , 88 ] ] , [ [ 39 , 43 ] , [ 70 , 49 ] , [ 94 , 93 ] , [ 122 , 93 ] , [ 147 , 64 ] , [ 156 , 88 ] ] ] ; end ;
20036: LD_ADDR_VAR 0 3
20040: PUSH
20041: LD_INT 40
20043: PUSH
20044: LD_INT 47
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 61
20053: PUSH
20054: LD_INT 52
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 87
20063: PUSH
20064: LD_INT 42
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 95
20073: PUSH
20074: LD_INT 94
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 113
20083: PUSH
20084: LD_INT 96
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 143
20093: PUSH
20094: LD_INT 78
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 142
20103: PUSH
20104: LD_INT 68
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 160
20113: PUSH
20114: LD_INT 88
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 39
20133: PUSH
20134: LD_INT 43
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 70
20143: PUSH
20144: LD_INT 49
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 94
20153: PUSH
20154: LD_INT 93
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 122
20163: PUSH
20164: LD_INT 93
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 147
20173: PUSH
20174: LD_INT 64
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 156
20183: PUSH
20184: LD_INT 88
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 39
20201: PUSH
20202: LD_INT 43
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 70
20211: PUSH
20212: LD_INT 49
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 94
20221: PUSH
20222: LD_INT 93
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 122
20231: PUSH
20232: LD_INT 93
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 147
20241: PUSH
20242: LD_INT 64
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 156
20251: PUSH
20252: LD_INT 88
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: ST_TO_ADDR
20272: GO 20275
20274: POP
// McMove ( 1 , pom , cesty [ Rand ( 1 , 3 ) ] , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
20275: LD_INT 1
20277: PPUSH
20278: LD_VAR 0 1
20282: PPUSH
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 1
20290: PPUSH
20291: LD_INT 3
20293: PPUSH
20294: CALL_OW 12
20298: ARRAY
20299: PPUSH
20300: LD_INT 5
20302: PUSH
20303: LD_INT 6
20305: PUSH
20306: LD_INT 3
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL_OW 398
// wait ( cas_na_opakovani_preattacku [ difficulty ] ) ;
20318: LD_EXP 51
20322: PUSH
20323: LD_OWVAR 67
20327: ARRAY
20328: PPUSH
20329: CALL_OW 67
// if Am_utoky = 0 then
20333: LD_EXP 70
20337: PUSH
20338: LD_INT 0
20340: EQUAL
20341: IFFALSE 20344
// enable ;
20343: ENABLE
// end ;
20344: PPOPN 3
20346: END
// on VehicleConstructed ( veh , f ) do var pom ;
20347: LD_INT 0
20349: PPUSH
// begin if f = Am_tov then
20350: LD_VAR 0 2
20354: PUSH
20355: LD_INT 175
20357: EQUAL
20358: IFFALSE 20600
// begin pom = Rand ( 1 , 2 ) ;
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_INT 1
20367: PPUSH
20368: LD_INT 2
20370: PPUSH
20371: CALL_OW 12
20375: ST_TO_ADDR
// case pom of 1 :
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 1
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20490
20389: POP
// if IsOK ( Am_mech [ 1 ] ) then
20390: LD_EXP 67
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PPUSH
20399: CALL_OW 302
20403: IFFALSE 20440
// begin ComLinkTo ( veh , Am_mech [ 1 ] ) ;
20405: LD_VAR 0 1
20409: PPUSH
20410: LD_EXP 67
20414: PUSH
20415: LD_INT 1
20417: ARRAY
20418: PPUSH
20419: CALL_OW 135
// AddComMoveXY ( veh , 89 , 22 ) ;
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_INT 89
20430: PPUSH
20431: LD_INT 22
20433: PPUSH
20434: CALL_OW 171
// end else
20438: GO 20488
// if IsOK ( Am_mech [ 2 ] ) then
20440: LD_EXP 67
20444: PUSH
20445: LD_INT 2
20447: ARRAY
20448: PPUSH
20449: CALL_OW 302
20453: IFFALSE 20488
// begin ComLinkTo ( veh , Am_mech [ 2 ] ) ;
20455: LD_VAR 0 1
20459: PPUSH
20460: LD_EXP 67
20464: PUSH
20465: LD_INT 2
20467: ARRAY
20468: PPUSH
20469: CALL_OW 135
// AddComMoveXY ( veh , 119 , 40 ) ;
20473: LD_VAR 0 1
20477: PPUSH
20478: LD_INT 119
20480: PPUSH
20481: LD_INT 40
20483: PPUSH
20484: CALL_OW 171
// end ; 2 :
20488: GO 20600
20490: LD_INT 2
20492: DOUBLE
20493: EQUAL
20494: IFTRUE 20498
20496: GO 20599
20498: POP
// if IsOK ( Am_mech [ 2 ] ) then
20499: LD_EXP 67
20503: PUSH
20504: LD_INT 2
20506: ARRAY
20507: PPUSH
20508: CALL_OW 302
20512: IFFALSE 20549
// begin ComLinkTo ( veh , Am_mech [ 2 ] ) ;
20514: LD_VAR 0 1
20518: PPUSH
20519: LD_EXP 67
20523: PUSH
20524: LD_INT 2
20526: ARRAY
20527: PPUSH
20528: CALL_OW 135
// AddComMoveXY ( veh , 119 , 40 ) ;
20532: LD_VAR 0 1
20536: PPUSH
20537: LD_INT 119
20539: PPUSH
20540: LD_INT 40
20542: PPUSH
20543: CALL_OW 171
// end else
20547: GO 20597
// if IsOK ( Am_mech [ 1 ] ) then
20549: LD_EXP 67
20553: PUSH
20554: LD_INT 1
20556: ARRAY
20557: PPUSH
20558: CALL_OW 302
20562: IFFALSE 20597
// begin ComLinkTo ( veh , Am_mech [ 1 ] ) ;
20564: LD_VAR 0 1
20568: PPUSH
20569: LD_EXP 67
20573: PUSH
20574: LD_INT 1
20576: ARRAY
20577: PPUSH
20578: CALL_OW 135
// AddComMoveXY ( veh , 89 , 22 ) ;
20582: LD_VAR 0 1
20586: PPUSH
20587: LD_INT 89
20589: PPUSH
20590: LD_INT 22
20592: PPUSH
20593: CALL_OW 171
// end ; end ;
20597: GO 20600
20599: POP
// end ; enable ;
20600: ENABLE
// end ;
20601: PPOPN 3
20603: END
// function cekej_na_utok ; var utoci ; var i , pom ; var aunits ; begin
20604: LD_INT 0
20606: PPUSH
20607: PPUSH
20608: PPUSH
20609: PPUSH
20610: PPUSH
// utoci = false ;
20611: LD_ADDR_VAR 0 2
20615: PUSH
20616: LD_INT 0
20618: ST_TO_ADDR
// aunits = FilterUnitsInArea ( Am_base_at , [ [ f_side , Amici ] ] ) ;
20619: LD_ADDR_VAR 0 5
20623: PUSH
20624: LD_INT 25
20626: PPUSH
20627: LD_INT 22
20629: PUSH
20630: LD_EXP 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: PPUSH
20642: CALL_OW 70
20646: ST_TO_ADDR
// while not utoci do
20647: LD_VAR 0 2
20651: NOT
20652: IFFALSE 20745
// begin pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
20654: LD_ADDR_VAR 0 4
20658: PUSH
20659: LD_INT 22
20661: PUSH
20662: LD_EXP 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: PPUSH
20674: CALL_OW 69
20678: ST_TO_ADDR
// for i in pom do
20679: LD_ADDR_VAR 0 3
20683: PUSH
20684: LD_VAR 0 4
20688: PUSH
20689: FOR_IN
20690: IFFALSE 20734
// if Attacks ( i ) <> 0 then
20692: LD_VAR 0 3
20696: PPUSH
20697: CALL_OW 320
20701: PUSH
20702: LD_INT 0
20704: NONEQUAL
20705: IFFALSE 20732
// if Attacks ( i ) in aunits then
20707: LD_VAR 0 3
20711: PPUSH
20712: CALL_OW 320
20716: PUSH
20717: LD_VAR 0 5
20721: IN
20722: IFFALSE 20732
// utoci = true ;
20724: LD_ADDR_VAR 0 2
20728: PUSH
20729: LD_INT 1
20731: ST_TO_ADDR
20732: GO 20689
20734: POP
20735: POP
// wait ( 0 0$10 ) ;
20736: LD_INT 350
20738: PPUSH
20739: CALL_OW 67
// end ;
20743: GO 20647
// wait ( doba_od_utoku_k_uteku_vedcu [ difficulty ] ) ;
20745: LD_EXP 47
20749: PUSH
20750: LD_OWVAR 67
20754: ARRAY
20755: PPUSH
20756: CALL_OW 67
// end ;
20760: LD_VAR 0 1
20764: RET
// export function test_na_vedce ; var i ; var OK ; begin
20765: LD_INT 0
20767: PPUSH
20768: PPUSH
20769: PPUSH
// OK = true ;
20770: LD_ADDR_VAR 0 3
20774: PUSH
20775: LD_INT 1
20777: ST_TO_ADDR
// for i in VEDCI1 do
20778: LD_ADDR_VAR 0 2
20782: PUSH
20783: LD_EXP 62
20787: PUSH
20788: FOR_IN
20789: IFFALSE 20812
// if IsLive ( i ) then
20791: LD_VAR 0 2
20795: PPUSH
20796: CALL_OW 300
20800: IFFALSE 20810
// OK = false ;
20802: LD_ADDR_VAR 0 3
20806: PUSH
20807: LD_INT 0
20809: ST_TO_ADDR
20810: GO 20788
20812: POP
20813: POP
// for i in VEDCI2 do
20814: LD_ADDR_VAR 0 2
20818: PUSH
20819: LD_EXP 63
20823: PUSH
20824: FOR_IN
20825: IFFALSE 20848
// if IsLive ( i ) then
20827: LD_VAR 0 2
20831: PPUSH
20832: CALL_OW 300
20836: IFFALSE 20846
// OK = false ;
20838: LD_ADDR_VAR 0 3
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
20846: GO 20824
20848: POP
20849: POP
// for i in VEDCI3 do
20850: LD_ADDR_VAR 0 2
20854: PUSH
20855: LD_EXP 64
20859: PUSH
20860: FOR_IN
20861: IFFALSE 20884
// if IsLive ( i ) then
20863: LD_VAR 0 2
20867: PPUSH
20868: CALL_OW 300
20872: IFFALSE 20882
// OK = false ;
20874: LD_ADDR_VAR 0 3
20878: PUSH
20879: LD_INT 0
20881: ST_TO_ADDR
20882: GO 20860
20884: POP
20885: POP
// result := OK ;
20886: LD_ADDR_VAR 0 1
20890: PUSH
20891: LD_VAR 0 3
20895: ST_TO_ADDR
// end ; end_of_file
20896: LD_VAR 0 1
20900: RET
// every 0 0$2 + 0 0$0.1 do
20901: GO 20903
20903: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
20904: LD_INT 22
20906: PUSH
20907: LD_INT 3
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 25
20919: PUSH
20920: LD_INT 12
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 25
20929: PUSH
20930: LD_INT 16
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 25
20939: PUSH
20940: LD_INT 15
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 25
20949: PUSH
20950: LD_INT 17
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PPUSH
20968: CALL_OW 69
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_INT 3
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 21
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 3
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: LD_INT 25
21001: PUSH
21002: LD_INT 12
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 25
21011: PUSH
21012: LD_INT 16
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 25
21021: PUSH
21022: LD_INT 15
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 25
21031: PUSH
21032: LD_INT 17
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: PPUSH
21055: CALL_OW 69
21059: GREATER
21060: IFFALSE 21071
// begin SetAchievement ( ACH_POTA ) ;
21062: LD_STRING ACH_POTA
21064: PPUSH
21065: CALL_OW 543
// exit ;
21069: GO 21072
// end ; enable ;
21071: ENABLE
// end ;
21072: END
