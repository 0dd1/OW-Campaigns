// export You , Amici , Amici2 , Arabi ; export everybody ; export macmilanUnitsDeadCounter ; starting begin You = 3 ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 3
   7: ST_TO_ADDR
// Amici = 1 ;
   8: LD_ADDR_EXP 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// Arabi = 2 ;
  16: LD_ADDR_EXP 4
  20: PUSH
  21: LD_INT 2
  23: ST_TO_ADDR
// Amici2 = 4 ;
  24: LD_ADDR_EXP 3
  28: PUSH
  29: LD_INT 4
  31: ST_TO_ADDR
// RandomizeAll ;
  32: CALL_OW 11
// debug_strings = [ ] ;
  36: LD_ADDR_OWVAR 48
  40: PUSH
  41: EMPTY
  42: ST_TO_ADDR
// InitBc ;
  43: CALL_OW 21
// InitHc ;
  47: CALL_OW 19
// InitUc ;
  51: CALL_OW 18
// InitVc ;
  55: CALL_OW 20
// macmilanUnitsDeadCounter := 0 ;
  59: LD_ADDR_EXP 6
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// SET_DIFFICULTY ;
  67: CALL 11105 0 0
// load_postav ;
  71: CALL 1304 0 0
// load_promenne ;
  75: CALL 1573 0 0
// vytvor_araby ;
  79: CALL 7712 0 0
// vytvor_amiky ;
  83: CALL 7971 0 0
// cislo_baze = vyber_misto_pro_zakladnu ;
  87: LD_ADDR_EXP 9
  91: PUSH
  92: CALL 1713 0 0
  96: ST_TO_ADDR
// place_resource ;
  97: CALL 4453 0 0
// Ru_enter = vyber_lidi_pro_misi ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: CALL 5565 0 0
 110: ST_TO_ADDR
// create_first_utok ;
 111: CALL 8911 0 0
// create_second_utok ;
 115: CALL 9171 0 0
// create_third_utok ;
 119: CALL 9587 0 0
// create_rusky_konvoj ( Ru_enter ) ;
 123: LD_EXP 10
 127: PPUSH
 128: CALL 6976 0 1
// placni_rusy_na_zacatek ;
 132: CALL 4539 0 0
// InGameOff ;
 136: CALL_OW 9
// end ;
 140: END
// on UnitDestroyed ( un ) do begin if un = bur then
 141: LD_VAR 0 1
 145: PUSH
 146: LD_EXP 12
 150: EQUAL
 151: IFFALSE 160
// YouLost ( Burlak ) ;
 153: LD_STRING Burlak
 155: PPUSH
 156: CALL_OW 104
// if GetSide ( un ) = 4 then
 160: LD_VAR 0 1
 164: PPUSH
 165: CALL_OW 255
 169: PUSH
 170: LD_INT 4
 172: EQUAL
 173: IFFALSE 198
// begin macmilanUnitsDeadCounter := macmilanUnitsDeadCounter + 1 ;
 175: LD_ADDR_EXP 6
 179: PUSH
 180: LD_EXP 6
 184: PUSH
 185: LD_INT 1
 187: PLUS
 188: ST_TO_ADDR
// SA_MeatGrinder ( macmilanUnitsDeadCounter ) ;
 189: LD_EXP 6
 193: PPUSH
 194: CALL 21217 0 1
// end ; end ;
 198: PPOPN 1
 200: END
// export function prohra_vedci ; begin
 201: LD_INT 0
 203: PPUSH
// YouLost ( Scientists ) ;
 204: LD_STRING Scientists
 206: PPUSH
 207: CALL_OW 104
// end ;
 211: LD_VAR 0 1
 215: RET
// on EndTheMissionRaised ( void ) do begin end_the_mission_allowed := false ;
 216: LD_ADDR_OWVAR 57
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// konec_mise ;
 224: CALL 231 0 0
// end ;
 228: PPOPN 1
 230: END
// export function konec_mise ; var i , pom , pom1 ; var drv ; var all_people ; var plab ; var medal1 , medal2 , medal3 ; begin
 231: LD_INT 0
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
// medal1 := false ;
 243: LD_ADDR_VAR 0 8
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// medal2 := false ;
 251: LD_ADDR_VAR 0 9
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// medal3 := false ;
 259: LD_ADDR_VAR 0 10
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// DisableExclamations ;
 267: CALL_OW 474
// gained_medals := [ ] ;
 271: LD_ADDR_OWVAR 61
 275: PUSH
 276: EMPTY
 277: ST_TO_ADDR
// missing_medals := [ ] ;
 278: LD_ADDR_OWVAR 62
 282: PUSH
 283: EMPTY
 284: ST_TO_ADDR
// if IsOK ( masha ) and GetSide ( masha ) = You then
 285: LD_EXP 11
 289: PPUSH
 290: CALL_OW 302
 294: PUSH
 295: LD_EXP 11
 299: PPUSH
 300: CALL_OW 255
 304: PUSH
 305: LD_EXP 1
 309: EQUAL
 310: AND
 311: IFFALSE 333
// begin AddMedal ( Masha , 1 ) ;
 313: LD_STRING Masha
 315: PPUSH
 316: LD_INT 1
 318: PPUSH
 319: CALL_OW 101
// medal1 := true ;
 323: LD_ADDR_VAR 0 8
 327: PUSH
 328: LD_INT 1
 330: ST_TO_ADDR
// end else
 331: GO 344
// AddMedal ( Masha , - 1 ) ;
 333: LD_STRING Masha
 335: PPUSH
 336: LD_INT 1
 338: NEG
 339: PPUSH
 340: CALL_OW 101
// plab = 0 ;
 344: LD_ADDR_VAR 0 7
 348: PUSH
 349: LD_INT 0
 351: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: LD_INT 48
 359: PUSH
 360: LD_INT 55
 362: PUSH
 363: LD_INT 56
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: FOR_IN
 372: IFFALSE 407
// if GetSide ( i ) = You then
 374: LD_VAR 0 2
 378: PPUSH
 379: CALL_OW 255
 383: PUSH
 384: LD_EXP 1
 388: EQUAL
 389: IFFALSE 405
// plab = plab + 1 ;
 391: LD_ADDR_VAR 0 7
 395: PUSH
 396: LD_VAR 0 7
 400: PUSH
 401: LD_INT 1
 403: PLUS
 404: ST_TO_ADDR
 405: GO 371
 407: POP
 408: POP
// if plab >= 3 then
 409: LD_VAR 0 7
 413: PUSH
 414: LD_INT 3
 416: GREATEREQUAL
 417: IFFALSE 439
// begin AddMedal ( Capture , 1 ) ;
 419: LD_STRING Capture
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: CALL_OW 101
// medal2 := true ;
 429: LD_ADDR_VAR 0 9
 433: PUSH
 434: LD_INT 1
 436: ST_TO_ADDR
// end else
 437: GO 450
// AddMedal ( Capture , - 1 ) ;
 439: LD_STRING Capture
 441: PPUSH
 442: LD_INT 1
 444: NEG
 445: PPUSH
 446: CALL_OW 101
// if GetTech ( tech_TauRad , You ) = state_researched or GetTech ( tech_SpacAnom , You ) = state_researched then
 450: LD_INT 28
 452: PPUSH
 453: LD_EXP 1
 457: PPUSH
 458: CALL_OW 321
 462: PUSH
 463: LD_INT 2
 465: EQUAL
 466: PUSH
 467: LD_INT 29
 469: PPUSH
 470: LD_EXP 1
 474: PPUSH
 475: CALL_OW 321
 479: PUSH
 480: LD_INT 2
 482: EQUAL
 483: OR
 484: IFFALSE 506
// begin AddMedal ( Invention , 1 ) ;
 486: LD_STRING Invention
 488: PPUSH
 489: LD_INT 1
 491: PPUSH
 492: CALL_OW 101
// medal3 := true ;
 496: LD_ADDR_VAR 0 10
 500: PUSH
 501: LD_INT 1
 503: ST_TO_ADDR
// end else
 504: GO 517
// AddMedal ( Invention , - 1 ) ;
 506: LD_STRING Invention
 508: PPUSH
 509: LD_INT 1
 511: NEG
 512: PPUSH
 513: CALL_OW 101
// SA_EndMission ( 3 , 9 , medal1 , medal2 , medal3 ) ;
 517: LD_INT 3
 519: PPUSH
 520: LD_INT 9
 522: PPUSH
 523: LD_VAR 0 8
 527: PPUSH
 528: LD_VAR 0 9
 532: PPUSH
 533: LD_VAR 0 10
 537: PPUSH
 538: CALL 21237 0 5
// GiveMedals ( Main ) ;
 542: LD_STRING Main
 544: PPUSH
 545: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 549: LD_ADDR_VAR 0 3
 553: PUSH
 554: LD_INT 22
 556: PUSH
 557: LD_EXP 1
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 21
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PPUSH
 580: CALL_OW 69
 584: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
 585: LD_ADDR_VAR 0 4
 589: PUSH
 590: LD_INT 22
 592: PUSH
 593: LD_EXP 1
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: PUSH
 602: LD_INT 21
 604: PUSH
 605: LD_INT 2
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 69
 620: ST_TO_ADDR
// for i in pom1 do
 621: LD_ADDR_VAR 0 2
 625: PUSH
 626: LD_VAR 0 4
 630: PUSH
 631: FOR_IN
 632: IFFALSE 691
// if IsDrivenBy ( i ) then
 634: LD_VAR 0 2
 638: PPUSH
 639: CALL_OW 311
 643: IFFALSE 689
// begin drv = IsDrivenBy ( i ) ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_VAR 0 2
 654: PPUSH
 655: CALL_OW 311
 659: ST_TO_ADDR
// if not ( drv in pom ) then
 660: LD_VAR 0 5
 664: PUSH
 665: LD_VAR 0 3
 669: IN
 670: NOT
 671: IFFALSE 689
// pom = pom ^ drv ;
 673: LD_ADDR_VAR 0 3
 677: PUSH
 678: LD_VAR 0 3
 682: PUSH
 683: LD_VAR 0 5
 687: ADD
 688: ST_TO_ADDR
// end ;
 689: GO 631
 691: POP
 692: POP
// all_people = pom ;
 693: LD_ADDR_VAR 0 6
 697: PUSH
 698: LD_VAR 0 3
 702: ST_TO_ADDR
// all_people = all_people diff UnitFilter ( all_people , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ) ;
 703: LD_ADDR_VAR 0 6
 707: PUSH
 708: LD_VAR 0 6
 712: PUSH
 713: LD_VAR 0 6
 717: PPUSH
 718: LD_INT 2
 720: PUSH
 721: LD_INT 25
 723: PUSH
 724: LD_INT 12
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 25
 733: PUSH
 734: LD_INT 16
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 25
 743: PUSH
 744: LD_INT 15
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PPUSH
 757: CALL_OW 72
 761: DIFF
 762: ST_TO_ADDR
// RewardPeople ( all_people ) ;
 763: LD_VAR 0 6
 767: PPUSH
 768: CALL_OW 43
// SaveCharacters ( bur , Burlak ) ;
 772: LD_EXP 12
 776: PPUSH
 777: LD_STRING Burlak
 779: PPUSH
 780: CALL_OW 38
// SaveCharacters ( dol , Dolgov ) ;
 784: LD_EXP 13
 788: PPUSH
 789: LD_STRING Dolgov
 791: PPUSH
 792: CALL_OW 38
// SaveCharacters ( kapisto , Kapitsova ) ;
 796: LD_EXP 14
 800: PPUSH
 801: LD_STRING Kapitsova
 803: PPUSH
 804: CALL_OW 38
// SaveCharacters ( petro , Petrosyan ) ;
 808: LD_EXP 15
 812: PPUSH
 813: LD_STRING Petrosyan
 815: PPUSH
 816: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
 820: LD_EXP 16
 824: PPUSH
 825: LD_STRING Popov
 827: PPUSH
 828: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
 832: LD_EXP 17
 836: PPUSH
 837: LD_STRING Belkov
 839: PPUSH
 840: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
 844: LD_EXP 18
 848: PPUSH
 849: LD_STRING Gnyevko
 851: PPUSH
 852: CALL_OW 38
// SaveCharacters ( kiri , Kirilenkova ) ;
 856: LD_EXP 19
 860: PPUSH
 861: LD_STRING Kirilenkova
 863: PPUSH
 864: CALL_OW 38
// SaveCharacters ( koval , Kovalyuk ) ;
 868: LD_EXP 20
 872: PPUSH
 873: LD_STRING Kovalyuk
 875: PPUSH
 876: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
 880: LD_EXP 21
 884: PPUSH
 885: LD_STRING Scholtze
 887: PPUSH
 888: CALL_OW 38
// SaveCharacters ( kuzmov , Kuzmov ) ;
 892: LD_EXP 22
 896: PPUSH
 897: LD_STRING Kuzmov
 899: PPUSH
 900: CALL_OW 38
// SaveCharacters ( karam , Karamazov ) ;
 904: LD_EXP 23
 908: PPUSH
 909: LD_STRING Karamazov
 911: PPUSH
 912: CALL_OW 38
// SaveCharacters ( petrov , Petrovova ) ;
 916: LD_EXP 24
 920: PPUSH
 921: LD_STRING Petrovova
 923: PPUSH
 924: CALL_OW 38
// SaveCharacters ( gleb , Gleb ) ;
 928: LD_EXP 25
 932: PPUSH
 933: LD_STRING Gleb
 935: PPUSH
 936: CALL_OW 38
// SaveCharacters ( lipsch , Lipschin ) ;
 940: LD_EXP 26
 944: PPUSH
 945: LD_STRING Lipschin
 947: PPUSH
 948: CALL_OW 38
// SaveCharacters ( tito , Titov ) ;
 952: LD_EXP 27
 956: PPUSH
 957: LD_STRING Titov
 959: PPUSH
 960: CALL_OW 38
// SaveCharacters ( xavier , Xavier ) ;
 964: LD_EXP 28
 968: PPUSH
 969: LD_STRING Xavier
 971: PPUSH
 972: CALL_OW 38
// SaveCharacters ( obluk , Oblukov ) ;
 976: LD_EXP 29
 980: PPUSH
 981: LD_STRING Oblukov
 983: PPUSH
 984: CALL_OW 38
// SaveCharacters ( kozlov , Kozlov ) ;
 988: LD_EXP 30
 992: PPUSH
 993: LD_STRING Kozlov
 995: PPUSH
 996: CALL_OW 38
// if plab >= 2 then
1000: LD_VAR 0 7
1004: PUSH
1005: LD_INT 2
1007: GREATEREQUAL
1008: IFFALSE 1022
// SaveVariable ( true , LabCaptured ) else
1010: LD_INT 1
1012: PPUSH
1013: LD_STRING LabCaptured
1015: PPUSH
1016: CALL_OW 39
1020: GO 1032
// SaveVariable ( false , LabCaptured ) ;
1022: LD_INT 0
1024: PPUSH
1025: LD_STRING LabCaptured
1027: PPUSH
1028: CALL_OW 39
// if not IsOK ( masha ) then
1032: LD_EXP 11
1036: PPUSH
1037: CALL_OW 302
1041: NOT
1042: IFFALSE 1051
// DeleteVariable ( Masha ) ;
1044: LD_STRING Masha
1046: PPUSH
1047: CALL_OW 41
// SaveVariable ( GetTech ( tech_TauRad , You ) , shifting ) ;
1051: LD_INT 28
1053: PPUSH
1054: LD_EXP 1
1058: PPUSH
1059: CALL_OW 321
1063: PPUSH
1064: LD_STRING shifting
1066: PPUSH
1067: CALL_OW 39
// SaveVariable ( GetTech ( tech_SpacAnom , You ) , slowing ) ;
1071: LD_INT 29
1073: PPUSH
1074: LD_EXP 1
1078: PPUSH
1079: CALL_OW 321
1083: PPUSH
1084: LD_STRING slowing
1086: PPUSH
1087: CALL_OW 39
// pom := [ ] ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// for i in everybody do
1098: LD_ADDR_VAR 0 2
1102: PUSH
1103: LD_EXP 5
1107: PUSH
1108: FOR_IN
1109: IFFALSE 1144
// if GetLives ( i ) > 0 then
1111: LD_VAR 0 2
1115: PPUSH
1116: CALL_OW 256
1120: PUSH
1121: LD_INT 0
1123: GREATER
1124: IFFALSE 1142
// pom := pom ^ i ;
1126: LD_ADDR_VAR 0 3
1130: PUSH
1131: LD_VAR 0 3
1135: PUSH
1136: LD_VAR 0 2
1140: ADD
1141: ST_TO_ADDR
1142: GO 1108
1144: POP
1145: POP
// pom := pom diff [ bur , dol , kapisto , petro , pop , bel , gny , kiri , koval , schol , kuzmov , karam , petrov , gleb , lipsch , tito , xavier , obluk , kozlov , 0 ] ;
1146: LD_ADDR_VAR 0 3
1150: PUSH
1151: LD_VAR 0 3
1155: PUSH
1156: LD_EXP 12
1160: PUSH
1161: LD_EXP 13
1165: PUSH
1166: LD_EXP 14
1170: PUSH
1171: LD_EXP 15
1175: PUSH
1176: LD_EXP 16
1180: PUSH
1181: LD_EXP 17
1185: PUSH
1186: LD_EXP 18
1190: PUSH
1191: LD_EXP 19
1195: PUSH
1196: LD_EXP 20
1200: PUSH
1201: LD_EXP 21
1205: PUSH
1206: LD_EXP 22
1210: PUSH
1211: LD_EXP 23
1215: PUSH
1216: LD_EXP 24
1220: PUSH
1221: LD_EXP 25
1225: PUSH
1226: LD_EXP 26
1230: PUSH
1231: LD_EXP 27
1235: PUSH
1236: LD_EXP 28
1240: PUSH
1241: LD_EXP 29
1245: PUSH
1246: LD_EXP 30
1250: PUSH
1251: LD_INT 0
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: DIFF
1276: ST_TO_ADDR
// SaveCharacters ( pom , survivors3 ) ;
1277: LD_VAR 0 3
1281: PPUSH
1282: LD_STRING survivors3
1284: PPUSH
1285: CALL_OW 38
// YouWin ( ) ;
1289: CALL_OW 103
// EnableExclamations ;
1293: CALL_OW 473
// exit ;
1297: GO 1299
// end ;
1299: LD_VAR 0 1
1303: RET
// function load_postav ; begin
1304: LD_INT 0
1306: PPUSH
// pop = nacti_osobu ( Popov ) ;
1307: LD_ADDR_EXP 16
1311: PUSH
1312: LD_STRING Popov
1314: PPUSH
1315: CALL 7927 0 1
1319: ST_TO_ADDR
// SetSide ( pop , You ) ;
1320: LD_EXP 16
1324: PPUSH
1325: LD_EXP 1
1329: PPUSH
1330: CALL_OW 235
// dol = nacti_osobu ( Dolgov ) ;
1334: LD_ADDR_EXP 13
1338: PUSH
1339: LD_STRING Dolgov
1341: PPUSH
1342: CALL 7927 0 1
1346: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
1347: LD_ADDR_EXP 12
1351: PUSH
1352: LD_STRING Burlak
1354: PPUSH
1355: CALL 7927 0 1
1359: ST_TO_ADDR
// kapisto = nacti_osobu ( Kapitsova ) ;
1360: LD_ADDR_EXP 14
1364: PUSH
1365: LD_STRING Kapitsova
1367: PPUSH
1368: CALL 7927 0 1
1372: ST_TO_ADDR
// petro = nacti_osobu ( Petrosyan ) ;
1373: LD_ADDR_EXP 15
1377: PUSH
1378: LD_STRING Petrosyan
1380: PPUSH
1381: CALL 7927 0 1
1385: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
1386: LD_ADDR_EXP 17
1390: PUSH
1391: LD_STRING Belkov
1393: PPUSH
1394: CALL 7927 0 1
1398: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
1399: LD_ADDR_EXP 18
1403: PUSH
1404: LD_STRING Gnyevko
1406: PPUSH
1407: CALL 7927 0 1
1411: ST_TO_ADDR
// kiri = nacti_osobu ( Kirilenkova ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Kirilenkova
1419: PPUSH
1420: CALL 7927 0 1
1424: ST_TO_ADDR
// koval = nacti_osobu ( Kovalyuk ) ;
1425: LD_ADDR_EXP 20
1429: PUSH
1430: LD_STRING Kovalyuk
1432: PPUSH
1433: CALL 7927 0 1
1437: ST_TO_ADDR
// schol = nacti_osobu ( Scholtze ) ;
1438: LD_ADDR_EXP 21
1442: PUSH
1443: LD_STRING Scholtze
1445: PPUSH
1446: CALL 7927 0 1
1450: ST_TO_ADDR
// kuzmov = nacti_osobu ( Kuzmov ) ;
1451: LD_ADDR_EXP 22
1455: PUSH
1456: LD_STRING Kuzmov
1458: PPUSH
1459: CALL 7927 0 1
1463: ST_TO_ADDR
// karam = nacti_osobu ( Karamazov ) ;
1464: LD_ADDR_EXP 23
1468: PUSH
1469: LD_STRING Karamazov
1471: PPUSH
1472: CALL 7927 0 1
1476: ST_TO_ADDR
// petrov = nacti_osobu ( Petrovova ) ;
1477: LD_ADDR_EXP 24
1481: PUSH
1482: LD_STRING Petrovova
1484: PPUSH
1485: CALL 7927 0 1
1489: ST_TO_ADDR
// gleb = nacti_osobu ( Gleb ) ;
1490: LD_ADDR_EXP 25
1494: PUSH
1495: LD_STRING Gleb
1497: PPUSH
1498: CALL 7927 0 1
1502: ST_TO_ADDR
// lipsch = nacti_osobu ( Lipschin ) ;
1503: LD_ADDR_EXP 26
1507: PUSH
1508: LD_STRING Lipschin
1510: PPUSH
1511: CALL 7927 0 1
1515: ST_TO_ADDR
// tito = nacti_osobu ( Titov ) ;
1516: LD_ADDR_EXP 27
1520: PUSH
1521: LD_STRING Titov
1523: PPUSH
1524: CALL 7927 0 1
1528: ST_TO_ADDR
// xavier = nacti_osobu ( Xavier ) ;
1529: LD_ADDR_EXP 28
1533: PUSH
1534: LD_STRING Xavier
1536: PPUSH
1537: CALL 7927 0 1
1541: ST_TO_ADDR
// obluk = nacti_osobu ( Oblukov ) ;
1542: LD_ADDR_EXP 29
1546: PUSH
1547: LD_STRING Oblukov
1549: PPUSH
1550: CALL 7927 0 1
1554: ST_TO_ADDR
// kozlov = nacti_osobu ( Kozlov ) ;
1555: LD_ADDR_EXP 30
1559: PUSH
1560: LD_STRING Kozlov
1562: PPUSH
1563: CALL 7927 0 1
1567: ST_TO_ADDR
// end ;
1568: LD_VAR 0 1
1572: RET
// function load_promenne ; begin
1573: LD_INT 0
1575: PPUSH
// masha_l = LoadVariable ( Masha , [ ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun ] ) ;
1576: LD_ADDR_EXP 53
1580: PUSH
1581: LD_STRING Masha
1583: PPUSH
1584: LD_INT 24
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 46
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PPUSH
1602: CALL_OW 30
1606: ST_TO_ADDR
// maccepted = LoadVariable ( MercHandedover , true ) ;
1607: LD_ADDR_EXP 54
1611: PUSH
1612: LD_STRING MercHandedover
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: CALL_OW 30
1622: ST_TO_ADDR
// mhandedover = not LoadVariable ( GenscherBetrayed , false ) ;
1623: LD_ADDR_EXP 55
1627: PUSH
1628: LD_STRING GenscherBetrayed
1630: PPUSH
1631: LD_INT 0
1633: PPUSH
1634: CALL_OW 30
1638: NOT
1639: ST_TO_ADDR
// end ; end_of_file
1640: LD_VAR 0 1
1644: RET
// var kecy ; export KECY_s_arabama ; var taurad ; var uz_byly_kecy_o_mashe ; every 0 0$0.1 do var i ;
1645: GO 1647
1647: DISABLE
1648: LD_INT 0
1650: PPUSH
// begin KECY_s_arabama = false ;
1651: LD_ADDR_EXP 7
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// taurad = false ;
1659: LD_ADDR_LOC 2
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// uz_byly_kecy_o_mashe = false ;
1667: LD_ADDR_LOC 3
1671: PUSH
1672: LD_INT 0
1674: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 4 ] do
1675: LD_ADDR_VAR 0 1
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 2
1685: PUSH
1686: LD_INT 3
1688: PUSH
1689: LD_INT 4
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: FOR_IN
1699: IFFALSE 1708
// disable ( i ) ;
1701: LD_VAR 0 1
1705: DISABLE_MARKED
1706: GO 1698
1708: POP
1709: POP
// end ;
1710: PPOPN 1
1712: END
// export function vyber_misto_pro_zakladnu ; var pom ; begin
1713: LD_INT 0
1715: PPUSH
1716: PPUSH
// pom = Query ( QStarting ) ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: LD_STRING QStarting
1724: PPUSH
1725: CALL_OW 97
1729: ST_TO_ADDR
// case pom of 1 :
1730: LD_VAR 0 2
1734: PUSH
1735: LD_INT 1
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1754
1743: POP
// Ru_base = base1 ; 2 :
1744: LD_ADDR_EXP 8
1748: PUSH
1749: LD_INT 1
1751: ST_TO_ADDR
1752: GO 1793
1754: LD_INT 2
1756: DOUBLE
1757: EQUAL
1758: IFTRUE 1762
1760: GO 1773
1762: POP
// Ru_base = base2 ; 3 :
1763: LD_ADDR_EXP 8
1767: PUSH
1768: LD_INT 2
1770: ST_TO_ADDR
1771: GO 1793
1773: LD_INT 3
1775: DOUBLE
1776: EQUAL
1777: IFTRUE 1781
1779: GO 1792
1781: POP
// Ru_base = base3 ; end ;
1782: LD_ADDR_EXP 8
1786: PUSH
1787: LD_INT 3
1789: ST_TO_ADDR
1790: GO 1793
1792: POP
// result = pom ;
1793: LD_ADDR_VAR 0 1
1797: PUSH
1798: LD_VAR 0 2
1802: ST_TO_ADDR
// end ;
1803: LD_VAR 0 1
1807: RET
// export function chmo1 ; begin
1808: LD_INT 0
1810: PPUSH
// wait ( 0 0$0.5 ) ;
1811: LD_INT 18
1813: PPUSH
1814: CALL_OW 67
// SaveForQuickRestart ;
1818: CALL_OW 22
// ChangeMissionObjectives ( MStart ) ;
1822: LD_STRING MStart
1824: PPUSH
1825: CALL_OW 337
// end ;
1829: LD_VAR 0 1
1833: RET
// on Contact ( s1 , s2 ) do begin if s1 = Amici and s2 = You then
1834: LD_VAR 0 1
1838: PUSH
1839: LD_EXP 2
1843: EQUAL
1844: PUSH
1845: LD_VAR 0 2
1849: PUSH
1850: LD_EXP 1
1854: EQUAL
1855: AND
1856: IFFALSE 2045
// begin while kecy do
1858: LD_LOC 1
1862: IFFALSE 1873
// wait ( 0 0$1 ) ;
1864: LD_INT 35
1866: PPUSH
1867: CALL_OW 67
1871: GO 1858
// kecy = true ;
1873: LD_ADDR_LOC 1
1877: PUSH
1878: LD_INT 1
1880: ST_TO_ADDR
// DialogueOn ;
1881: CALL_OW 6
// Say ( Joan , DJoan-Joan-1 ) ;
1885: LD_EXP 62
1889: PPUSH
1890: LD_STRING DJoan-Joan-1
1892: PPUSH
1893: CALL_OW 88
// Say ( bur , DJoan-Bur-1 ) ;
1897: LD_EXP 12
1901: PPUSH
1902: LD_STRING DJoan-Bur-1
1904: PPUSH
1905: CALL_OW 88
// Say ( Joan , DJoan-Joan-2 ) ;
1909: LD_EXP 62
1913: PPUSH
1914: LD_STRING DJoan-Joan-2
1916: PPUSH
1917: CALL_OW 88
// Say ( bur , DJoan-Bur-2 ) ;
1921: LD_EXP 12
1925: PPUSH
1926: LD_STRING DJoan-Bur-2
1928: PPUSH
1929: CALL_OW 88
// SayRadio ( JMM , DJoan-JMM-2 ) ;
1933: LD_EXP 61
1937: PPUSH
1938: LD_STRING DJoan-JMM-2
1940: PPUSH
1941: CALL_OW 94
// Say ( bur , DJoan-Bur-3 ) ;
1945: LD_EXP 12
1949: PPUSH
1950: LD_STRING DJoan-Bur-3
1952: PPUSH
1953: CALL_OW 88
// SayRadio ( JMM , DJoan-JMM-3 ) ;
1957: LD_EXP 61
1961: PPUSH
1962: LD_STRING DJoan-JMM-3
1964: PPUSH
1965: CALL_OW 94
// DialogueOff ;
1969: CALL_OW 7
// if not KECY_s_arabama then
1973: LD_EXP 7
1977: NOT
1978: IFFALSE 2014
// begin if not maccepted then
1980: LD_EXP 54
1984: NOT
1985: IFFALSE 1992
// enable ( 1 ) else
1987: LD_INT 1
1989: ENABLE_MARKED
1990: GO 2006
// if mhandedover then
1992: LD_EXP 55
1996: IFFALSE 2003
// enable ( 2 ) else
1998: LD_INT 2
2000: ENABLE_MARKED
2001: GO 2006
// enable ( 3 ) ;
2003: LD_INT 3
2005: ENABLE_MARKED
// KECY_s_arabama = true ;
2006: LD_ADDR_EXP 7
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// end ; enable ( 4 ) ;
2014: LD_INT 4
2016: ENABLE_MARKED
// kecy = false ;
2017: LD_ADDR_LOC 1
2021: PUSH
2022: LD_INT 0
2024: ST_TO_ADDR
// Am_utoky = 1 ;
2025: LD_ADDR_EXP 71
2029: PUSH
2030: LD_INT 1
2032: ST_TO_ADDR
// ComExitBuilding ( Joan ) ;
2033: LD_EXP 62
2037: PPUSH
2038: CALL_OW 122
// disable ;
2042: DISABLE
// end else
2043: GO 2046
// enable ;
2045: ENABLE
// end ;
2046: PPOPN 2
2048: END
// every 0 0$1 marked 1 do
2049: GO 2051
2051: DISABLE
// begin wait ( 0 0$5 ) ;
2052: LD_INT 175
2054: PPUSH
2055: CALL_OW 67
// while kecy do
2059: LD_LOC 1
2063: IFFALSE 2074
// wait ( 0 0$1 ) ;
2065: LD_INT 35
2067: PPUSH
2068: CALL_OW 67
2072: GO 2059
// kecy = true ;
2074: LD_ADDR_LOC 1
2078: PUSH
2079: LD_INT 1
2081: ST_TO_ADDR
// DialogueOn ;
2082: CALL_OW 6
// Say ( diet , DArNeutral-Diet-1 ) ;
2086: LD_EXP 56
2090: PPUSH
2091: LD_STRING DArNeutral-Diet-1
2093: PPUSH
2094: CALL_OW 88
// DialogueOff ;
2098: CALL_OW 7
// kecy = false ;
2102: LD_ADDR_LOC 1
2106: PUSH
2107: LD_INT 0
2109: ST_TO_ADDR
// Arabi_vztah = 2 ;
2110: LD_ADDR_EXP 60
2114: PUSH
2115: LD_INT 2
2117: ST_TO_ADDR
// ar_leave_north ;
2118: CALL 11821 0 0
// end ;
2122: END
// every 0 0$1 marked 2 do var pom ;
2123: GO 2125
2125: DISABLE
2126: LD_INT 0
2128: PPUSH
// begin wait ( 0 0$5 ) ;
2129: LD_INT 175
2131: PPUSH
2132: CALL_OW 67
// while kecy do
2136: LD_LOC 1
2140: IFFALSE 2151
// wait ( 0 0$1 ) ;
2142: LD_INT 35
2144: PPUSH
2145: CALL_OW 67
2149: GO 2136
// kecy = true ;
2151: LD_ADDR_LOC 1
2155: PUSH
2156: LD_INT 1
2158: ST_TO_ADDR
// DialogueOn ;
2159: CALL_OW 6
// SayRadio ( diet , DArHelp-Diet-1 ) ;
2163: LD_EXP 56
2167: PPUSH
2168: LD_STRING DArHelp-Diet-1
2170: PPUSH
2171: CALL_OW 94
// pom = Query ( QArHelp ) ;
2175: LD_ADDR_VAR 0 1
2179: PUSH
2180: LD_STRING QArHelp
2182: PPUSH
2183: CALL_OW 97
2187: ST_TO_ADDR
// case pom of 1 :
2188: LD_VAR 0 1
2192: PUSH
2193: LD_INT 1
2195: DOUBLE
2196: EQUAL
2197: IFTRUE 2201
2199: GO 2252
2201: POP
// begin SayRadio ( bur , DQrArHelp#1-Bur-1 ) ;
2202: LD_EXP 12
2206: PPUSH
2207: LD_STRING DQrArHelp#1-Bur-1
2209: PPUSH
2210: CALL_OW 94
// SayRadio ( diet , DQrArHelp#1-Diet-1 ) ;
2214: LD_EXP 56
2218: PPUSH
2219: LD_STRING DQrArHelp#1-Diet-1
2221: PPUSH
2222: CALL_OW 94
// SayRadio ( bur , DQrArHelp#1-Bur-2 ) ;
2226: LD_EXP 12
2230: PPUSH
2231: LD_STRING DQrArHelp#1-Bur-2
2233: PPUSH
2234: CALL_OW 94
// SayRadio ( diet , DQrArHelp#1-Diet-2 ) ;
2238: LD_EXP 56
2242: PPUSH
2243: LD_STRING DQrArHelp#1-Diet-2
2245: PPUSH
2246: CALL_OW 94
// end ; 2 :
2250: GO 2288
2252: LD_INT 2
2254: DOUBLE
2255: EQUAL
2256: IFTRUE 2260
2258: GO 2287
2260: POP
// begin SayRadio ( bur , DQrArHelp#2-Bur-1 ) ;
2261: LD_EXP 12
2265: PPUSH
2266: LD_STRING DQrArHelp#2-Bur-1
2268: PPUSH
2269: CALL_OW 94
// SayRadio ( diet , DQrArHelp#2-Diet-1 ) ;
2273: LD_EXP 56
2277: PPUSH
2278: LD_STRING DQrArHelp#2-Diet-1
2280: PPUSH
2281: CALL_OW 94
// end ; end ;
2285: GO 2288
2287: POP
// DialogueOff ;
2288: CALL_OW 7
// kecy = false ;
2292: LD_ADDR_LOC 1
2296: PUSH
2297: LD_INT 0
2299: ST_TO_ADDR
// case pom of 1 :
2300: LD_VAR 0 1
2304: PUSH
2305: LD_INT 1
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2328
2313: POP
// begin Arabi_vztah = 20 ;
2314: LD_ADDR_EXP 60
2318: PUSH
2319: LD_INT 20
2321: ST_TO_ADDR
// arabi_spojenci ;
2322: CALL 12023 0 0
// end ; 2 :
2326: GO 2356
2328: LD_INT 2
2330: DOUBLE
2331: EQUAL
2332: IFTRUE 2336
2334: GO 2355
2336: POP
// begin SA_NoThanksGensher ;
2337: CALL 21202 0 0
// Arabi_vztah = 3 ;
2341: LD_ADDR_EXP 60
2345: PUSH
2346: LD_INT 3
2348: ST_TO_ADDR
// arabi_north_okamzite ;
2349: CALL 11548 0 0
// end ; end ;
2353: GO 2356
2355: POP
// end ;
2356: PPOPN 1
2358: END
// every 0 0$1 marked 3 do
2359: GO 2361
2361: DISABLE
// begin wait ( 0 0$5 ) ;
2362: LD_INT 175
2364: PPUSH
2365: CALL_OW 67
// while kecy do
2369: LD_LOC 1
2373: IFFALSE 2384
// wait ( 0 0$1 ) ;
2375: LD_INT 35
2377: PPUSH
2378: CALL_OW 67
2382: GO 2369
// kecy = true ;
2384: LD_ADDR_LOC 1
2388: PUSH
2389: LD_INT 1
2391: ST_TO_ADDR
// DialogueOn ;
2392: CALL_OW 6
// SayRadio ( diet , DArHostile-Diet-1 ) ;
2396: LD_EXP 56
2400: PPUSH
2401: LD_STRING DArHostile-Diet-1
2403: PPUSH
2404: CALL_OW 94
// Arabi_vztah = 0 ;
2408: LD_ADDR_EXP 60
2412: PUSH
2413: LD_INT 0
2415: ST_TO_ADDR
// arabi_ally_amici ;
2416: CALL 12065 0 0
// DialogueOff ;
2420: CALL_OW 7
// kecy = false ;
2424: LD_ADDR_LOC 1
2428: PUSH
2429: LD_INT 0
2431: ST_TO_ADDR
// end ;
2432: END
// every 0 0$15 marked 4 do
2433: GO 2435
2435: DISABLE
// begin wait ( 0 0$20 ) ;
2436: LD_INT 700
2438: PPUSH
2439: CALL_OW 67
// while kecy do
2443: LD_LOC 1
2447: IFFALSE 2458
// wait ( 0 0$1 ) ;
2449: LD_INT 35
2451: PPUSH
2452: CALL_OW 67
2456: GO 2443
// kecy = true ;
2458: LD_ADDR_LOC 1
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// DialogueOn ;
2466: CALL_OW 6
// SayRadio ( pop , DCapture-Pop-1 ) ;
2470: LD_EXP 16
2474: PPUSH
2475: LD_STRING DCapture-Pop-1
2477: PPUSH
2478: CALL_OW 94
// ChangeMissionObjectives ( MCapture ) ;
2482: LD_STRING MCapture
2484: PPUSH
2485: CALL_OW 337
// DialogueOff ;
2489: CALL_OW 7
// kecy = false ;
2493: LD_ADDR_LOC 1
2497: PUSH
2498: LD_INT 0
2500: ST_TO_ADDR
// end ;
2501: END
// on UnitGoesToRed ( un ) do begin if un = Joan then
2502: LD_VAR 0 1
2506: PUSH
2507: LD_EXP 62
2511: EQUAL
2512: IFFALSE 2606
// begin DialogueOn ;
2514: CALL_OW 6
// CenterNowOnUnits ( Joan ) ;
2518: LD_EXP 62
2522: PPUSH
2523: CALL_OW 87
// ForceSay ( Joan , DJoanDies-Joan-1 ) ;
2527: LD_EXP 62
2531: PPUSH
2532: LD_STRING DJoanDies-Joan-1
2534: PPUSH
2535: CALL_OW 91
// SayRadio ( JMM , DJoanDies-JMM-1 ) ;
2539: LD_EXP 61
2543: PPUSH
2544: LD_STRING DJoanDies-JMM-1
2546: PPUSH
2547: CALL_OW 94
// wait ( 0 0$1 ) ;
2551: LD_INT 35
2553: PPUSH
2554: CALL_OW 67
// SetLives ( Joan , 0 ) ;
2558: LD_EXP 62
2562: PPUSH
2563: LD_INT 0
2565: PPUSH
2566: CALL_OW 234
// KillUnit ( Joan ) ;
2570: LD_EXP 62
2574: PPUSH
2575: CALL_OW 66
// DialogueOff ;
2579: CALL_OW 7
// wait ( wait_mcmillanova_pomsta [ difficulty ] ) ;
2583: LD_EXP 49
2587: PUSH
2588: LD_OWVAR 67
2592: ARRAY
2593: PPUSH
2594: CALL_OW 67
// mcmillanova_pomsta = true ;
2598: LD_ADDR_EXP 72
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// end ; enable ;
2606: ENABLE
// end ;
2607: PPOPN 1
2609: END
// export function dialog_masha_kaput ; begin
2610: LD_INT 0
2612: PPUSH
// if uz_byly_kecy_o_mashe then
2613: LD_LOC 3
2617: IFFALSE 2621
// exit ;
2619: GO 2680
// while kecy do
2621: LD_LOC 1
2625: IFFALSE 2636
// wait ( 0 0$1 ) ;
2627: LD_INT 35
2629: PPUSH
2630: CALL_OW 67
2634: GO 2621
// kecy = true ;
2636: LD_ADDR_LOC 1
2640: PUSH
2641: LD_INT 1
2643: ST_TO_ADDR
// DialogueOn ;
2644: CALL_OW 6
// Say ( bur , DMashaDies-Bur-1 ) ;
2648: LD_EXP 12
2652: PPUSH
2653: LD_STRING DMashaDies-Bur-1
2655: PPUSH
2656: CALL_OW 88
// uz_byly_kecy_o_mashe = true ;
2660: LD_ADDR_LOC 3
2664: PUSH
2665: LD_INT 1
2667: ST_TO_ADDR
// DialogueOff ;
2668: CALL_OW 7
// kecy = false ;
2672: LD_ADDR_LOC 1
2676: PUSH
2677: LD_INT 0
2679: ST_TO_ADDR
// end ;
2680: LD_VAR 0 1
2684: RET
// on VehicleCaptured ( new , auto , strana , hum ) do begin if auto = masha then
2685: LD_VAR 0 2
2689: PUSH
2690: LD_EXP 11
2694: EQUAL
2695: IFFALSE 2701
// dialog_masha_kaput ;
2697: CALL 2610 0 0
// enable ;
2701: ENABLE
// end ;
2702: PPOPN 4
2704: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 do var pom , i ; var je_space ; var labc ;
2705: LD_INT 22
2707: PUSH
2708: LD_EXP 1
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: LD_INT 30
2722: PUSH
2723: LD_INT 7
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 30
2732: PUSH
2733: LD_INT 8
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 69
2753: PUSH
2754: LD_INT 0
2756: GREATER
2757: IFFALSE 3110
2759: GO 2761
2761: DISABLE
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
2767: PPUSH
// begin je_space = false ;
2768: LD_ADDR_VAR 0 3
2772: PUSH
2773: LD_INT 0
2775: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2776: LD_ADDR_VAR 0 1
2780: PUSH
2781: LD_INT 22
2783: PUSH
2784: LD_EXP 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 30
2808: PUSH
2809: LD_INT 8
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PPUSH
2825: CALL_OW 69
2829: ST_TO_ADDR
// for i in pom do
2830: LD_ADDR_VAR 0 2
2834: PUSH
2835: LD_VAR 0 1
2839: PUSH
2840: FOR_IN
2841: IFFALSE 2899
// if GetLabKind ( i , 1 ) = b_lab_spacetime or GetLabKind ( i , 2 ) = b_lab_spacetime then
2843: LD_VAR 0 2
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: CALL_OW 268
2855: PUSH
2856: LD_INT 14
2858: EQUAL
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_INT 2
2867: PPUSH
2868: CALL_OW 268
2872: PUSH
2873: LD_INT 14
2875: EQUAL
2876: OR
2877: IFFALSE 2897
// begin je_space = true ;
2879: LD_ADDR_VAR 0 3
2883: PUSH
2884: LD_INT 1
2886: ST_TO_ADDR
// labc = i ;
2887: LD_ADDR_VAR 0 4
2891: PUSH
2892: LD_VAR 0 2
2896: ST_TO_ADDR
// end ;
2897: GO 2840
2899: POP
2900: POP
// if je_space then
2901: LD_VAR 0 3
2905: IFFALSE 3109
// begin while IsConstructed ( i ) <> 0 do
2907: LD_VAR 0 2
2911: PPUSH
2912: CALL_OW 304
2916: PUSH
2917: LD_INT 0
2919: NONEQUAL
2920: IFFALSE 2931
// wait ( 0 0$1 ) ;
2922: LD_INT 35
2924: PPUSH
2925: CALL_OW 67
2929: GO 2907
// while kecy do
2931: LD_LOC 1
2935: IFFALSE 2946
// wait ( 0 0$5 ) ;
2937: LD_INT 175
2939: PPUSH
2940: CALL_OW 67
2944: GO 2931
// kecy = true ;
2946: LD_ADDR_LOC 1
2950: PUSH
2951: LD_INT 1
2953: ST_TO_ADDR
// DialogueOn ;
2954: CALL_OW 6
// Say ( bur , DResearch-Bur-1 ) ;
2958: LD_EXP 12
2962: PPUSH
2963: LD_STRING DResearch-Bur-1
2965: PPUSH
2966: CALL_OW 88
// if IsOK ( kapisto ) then
2970: LD_EXP 14
2974: PPUSH
2975: CALL_OW 302
2979: IFFALSE 2995
// Say ( kapisto , DResearch-Kap-1 ) else
2981: LD_EXP 14
2985: PPUSH
2986: LD_STRING DResearch-Kap-1
2988: PPUSH
2989: CALL_OW 88
2993: GO 3095
// if IsOK ( petro ) then
2995: LD_EXP 15
2999: PPUSH
3000: CALL_OW 302
3004: IFFALSE 3020
// Say ( petro , DResearch-Pty-1 ) else
3006: LD_EXP 15
3010: PPUSH
3011: LD_STRING DResearch-Pty-1
3013: PPUSH
3014: CALL_OW 88
3018: GO 3095
// if IsOK ( dol ) then
3020: LD_EXP 13
3024: PPUSH
3025: CALL_OW 302
3029: IFFALSE 3045
// Say ( dol , DResearch-Dol-1 ) else
3031: LD_EXP 13
3035: PPUSH
3036: LD_STRING DResearch-Dol-1
3038: PPUSH
3039: CALL_OW 88
3043: GO 3095
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
3045: LD_ADDR_VAR 0 1
3049: PUSH
3050: LD_INT 1
3052: PPUSH
3053: LD_INT 4
3055: PPUSH
3056: LD_EXP 12
3060: PUSH
3061: EMPTY
3062: LIST
3063: PPUSH
3064: CALL 3113 0 3
3068: ST_TO_ADDR
// if pom <> 0 then
3069: LD_VAR 0 1
3073: PUSH
3074: LD_INT 0
3076: NONEQUAL
3077: IFFALSE 3095
// Say ( pom [ 1 ] , DResearch-RSol1-1 ) ;
3079: LD_VAR 0 1
3083: PUSH
3084: LD_INT 1
3086: ARRAY
3087: PPUSH
3088: LD_STRING DResearch-RSol1-1
3090: PPUSH
3091: CALL_OW 88
// end ; DialogueOff ;
3095: CALL_OW 7
// kecy = false ;
3099: LD_ADDR_LOC 1
3103: PUSH
3104: LD_INT 0
3106: ST_TO_ADDR
// end else
3107: GO 3110
// enable ;
3109: ENABLE
// end ;
3110: PPOPN 4
3112: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
3113: LD_INT 0
3115: PPUSH
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
3120: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
3121: LD_ADDR_VAR 0 6
3125: PUSH
3126: LD_INT 22
3128: PUSH
3129: LD_EXP 1
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: LD_INT 25
3140: PUSH
3141: LD_INT 4
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PUSH
3148: LD_INT 26
3150: PUSH
3151: LD_VAR 0 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
3170: LD_ADDR_VAR 0 7
3174: PUSH
3175: LD_INT 22
3177: PUSH
3178: LD_EXP 1
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PUSH
3187: LD_INT 25
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 26
3199: PUSH
3200: LD_VAR 0 1
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
3219: LD_ADDR_VAR 0 8
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_EXP 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: LD_INT 26
3248: PUSH
3249: LD_VAR 0 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: PPUSH
3263: CALL_OW 69
3267: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
3268: LD_ADDR_VAR 0 9
3272: PUSH
3273: LD_INT 22
3275: PUSH
3276: LD_EXP 1
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 25
3287: PUSH
3288: LD_INT 1
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: LD_INT 26
3297: PUSH
3298: LD_VAR 0 1
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: ST_TO_ADDR
// case povolani of class_scientistic :
3317: LD_VAR 0 2
3321: PUSH
3322: LD_INT 4
3324: DOUBLE
3325: EQUAL
3326: IFTRUE 3330
3328: GO 3343
3330: POP
// pom = pom1 ; class_mechanic :
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: LD_VAR 0 6
3340: ST_TO_ADDR
3341: GO 3407
3343: LD_INT 3
3345: DOUBLE
3346: EQUAL
3347: IFTRUE 3351
3349: GO 3364
3351: POP
// pom = pom2 ; class_engineer :
3352: LD_ADDR_VAR 0 5
3356: PUSH
3357: LD_VAR 0 7
3361: ST_TO_ADDR
3362: GO 3407
3364: LD_INT 2
3366: DOUBLE
3367: EQUAL
3368: IFTRUE 3372
3370: GO 3385
3372: POP
// pom = pom3 ; class_soldier :
3373: LD_ADDR_VAR 0 5
3377: PUSH
3378: LD_VAR 0 8
3382: ST_TO_ADDR
3383: GO 3407
3385: LD_INT 1
3387: DOUBLE
3388: EQUAL
3389: IFTRUE 3393
3391: GO 3406
3393: POP
// pom = pom4 ; end ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_VAR 0 9
3403: ST_TO_ADDR
3404: GO 3407
3406: POP
// if povolani <> class_scientistic then
3407: LD_VAR 0 2
3411: PUSH
3412: LD_INT 4
3414: NONEQUAL
3415: IFFALSE 3433
// pom = pom ^ pom1 ;
3417: LD_ADDR_VAR 0 5
3421: PUSH
3422: LD_VAR 0 5
3426: PUSH
3427: LD_VAR 0 6
3431: ADD
3432: ST_TO_ADDR
// if povolani <> class_mechanic then
3433: LD_VAR 0 2
3437: PUSH
3438: LD_INT 3
3440: NONEQUAL
3441: IFFALSE 3459
// pom = pom ^ pom2 ;
3443: LD_ADDR_VAR 0 5
3447: PUSH
3448: LD_VAR 0 5
3452: PUSH
3453: LD_VAR 0 7
3457: ADD
3458: ST_TO_ADDR
// if povolani <> class_engineer then
3459: LD_VAR 0 2
3463: PUSH
3464: LD_INT 2
3466: NONEQUAL
3467: IFFALSE 3485
// pom = pom ^ pom3 ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_VAR 0 5
3478: PUSH
3479: LD_VAR 0 8
3483: ADD
3484: ST_TO_ADDR
// if povolani <> class_soldier then
3485: LD_VAR 0 2
3489: PUSH
3490: LD_INT 1
3492: NONEQUAL
3493: IFFALSE 3511
// pom = pom ^ pom4 ;
3495: LD_ADDR_VAR 0 5
3499: PUSH
3500: LD_VAR 0 5
3504: PUSH
3505: LD_VAR 0 9
3509: ADD
3510: ST_TO_ADDR
// result := pom diff diffseznam ;
3511: LD_ADDR_VAR 0 4
3515: PUSH
3516: LD_VAR 0 5
3520: PUSH
3521: LD_VAR 0 3
3525: DIFF
3526: ST_TO_ADDR
// end ;
3527: LD_VAR 0 4
3531: RET
// on VehicleDestroyed ( un , side , nation , x , y , dir , chas , contr , eng , weap ) do begin if un = masha and side = You then
3532: LD_VAR 0 1
3536: PUSH
3537: LD_EXP 11
3541: EQUAL
3542: PUSH
3543: LD_VAR 0 2
3547: PUSH
3548: LD_EXP 1
3552: EQUAL
3553: AND
3554: IFFALSE 3560
// dialog_masha_kaput ;
3556: CALL 2610 0 0
// end ;
3560: PPOPN 10
3562: END
// every 0 0$1 trigger GetTech ( tech_TauRad , You ) = state_researched or GetTech ( tech_SpacAnom , You ) = state_researched do var pom ;
3563: LD_INT 28
3565: PPUSH
3566: LD_EXP 1
3570: PPUSH
3571: CALL_OW 321
3575: PUSH
3576: LD_INT 2
3578: EQUAL
3579: PUSH
3580: LD_INT 29
3582: PPUSH
3583: LD_EXP 1
3587: PPUSH
3588: CALL_OW 321
3592: PUSH
3593: LD_INT 2
3595: EQUAL
3596: OR
3597: IFFALSE 3991
3599: GO 3601
3601: DISABLE
3602: LD_INT 0
3604: PPUSH
// begin DialogueOn ;
3605: CALL_OW 6
// if IsOK ( kapisto ) then
3609: LD_EXP 14
3613: PPUSH
3614: CALL_OW 302
3618: IFFALSE 3686
// begin Say ( kapisto , DSpecBaz-Kap-1 ) ;
3620: LD_EXP 14
3624: PPUSH
3625: LD_STRING DSpecBaz-Kap-1
3627: PPUSH
3628: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3632: LD_INT 28
3634: PPUSH
3635: LD_EXP 1
3639: PPUSH
3640: CALL_OW 321
3644: PUSH
3645: LD_INT 2
3647: EQUAL
3648: IFFALSE 3672
// begin Say ( kapisto , DSpecBaz-Kap-1b ) ;
3650: LD_EXP 14
3654: PPUSH
3655: LD_STRING DSpecBaz-Kap-1b
3657: PPUSH
3658: CALL_OW 88
// taurad = true ;
3662: LD_ADDR_LOC 2
3666: PUSH
3667: LD_INT 1
3669: ST_TO_ADDR
// end else
3670: GO 3684
// Say ( kapisto , DSpecBaz-Kap-1c ) ;
3672: LD_EXP 14
3676: PPUSH
3677: LD_STRING DSpecBaz-Kap-1c
3679: PPUSH
3680: CALL_OW 88
// end else
3684: GO 3968
// if IsOK ( petro ) then
3686: LD_EXP 15
3690: PPUSH
3691: CALL_OW 302
3695: IFFALSE 3763
// begin Say ( petro , DSpecBaz-Pty-1 ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_STRING DSpecBaz-Pty-1
3704: PPUSH
3705: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3709: LD_INT 28
3711: PPUSH
3712: LD_EXP 1
3716: PPUSH
3717: CALL_OW 321
3721: PUSH
3722: LD_INT 2
3724: EQUAL
3725: IFFALSE 3749
// begin Say ( petro , DSpecBaz-Pty-1b ) ;
3727: LD_EXP 15
3731: PPUSH
3732: LD_STRING DSpecBaz-Pty-1b
3734: PPUSH
3735: CALL_OW 88
// taurad = true ;
3739: LD_ADDR_LOC 2
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// end else
3747: GO 3761
// Say ( petro , DSpecBaz-Pty-1c ) ;
3749: LD_EXP 15
3753: PPUSH
3754: LD_STRING DSpecBaz-Pty-1c
3756: PPUSH
3757: CALL_OW 88
// end else
3761: GO 3968
// if IsOK ( dol ) then
3763: LD_EXP 13
3767: PPUSH
3768: CALL_OW 302
3772: IFFALSE 3840
// begin Say ( dol , DSpecBaz-Dol-1 ) ;
3774: LD_EXP 13
3778: PPUSH
3779: LD_STRING DSpecBaz-Dol-1
3781: PPUSH
3782: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3786: LD_INT 28
3788: PPUSH
3789: LD_EXP 1
3793: PPUSH
3794: CALL_OW 321
3798: PUSH
3799: LD_INT 2
3801: EQUAL
3802: IFFALSE 3826
// begin Say ( dol , DSpecBaz-Dol-1b ) ;
3804: LD_EXP 13
3808: PPUSH
3809: LD_STRING DSpecBaz-Dol-1b
3811: PPUSH
3812: CALL_OW 88
// taurad = true ;
3816: LD_ADDR_LOC 2
3820: PUSH
3821: LD_INT 1
3823: ST_TO_ADDR
// end else
3824: GO 3838
// Say ( dol , DSpecBaz-Dol-1c ) ;
3826: LD_EXP 13
3830: PPUSH
3831: LD_STRING DSpecBaz-Dol-1c
3833: PPUSH
3834: CALL_OW 88
// end else
3838: GO 3968
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur , petro , kapisto , dol ] ) ;
3840: LD_ADDR_VAR 0 1
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 4
3850: PPUSH
3851: LD_EXP 12
3855: PUSH
3856: LD_EXP 15
3860: PUSH
3861: LD_EXP 14
3865: PUSH
3866: LD_EXP 13
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL 3113 0 3
3881: ST_TO_ADDR
// if pom > 0 then
3882: LD_VAR 0 1
3886: PUSH
3887: LD_INT 0
3889: GREATER
3890: IFFALSE 3968
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1 ) ;
3892: LD_VAR 0 1
3896: PUSH
3897: LD_INT 1
3899: ARRAY
3900: PPUSH
3901: LD_STRING DSpecBaz-RSci1-1
3903: PPUSH
3904: CALL_OW 88
// if GetTech ( tech_TauRad , You ) = state_researched then
3908: LD_INT 28
3910: PPUSH
3911: LD_EXP 1
3915: PPUSH
3916: CALL_OW 321
3920: PUSH
3921: LD_INT 2
3923: EQUAL
3924: IFFALSE 3952
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1b ) ;
3926: LD_VAR 0 1
3930: PUSH
3931: LD_INT 1
3933: ARRAY
3934: PPUSH
3935: LD_STRING DSpecBaz-RSci1-1b
3937: PPUSH
3938: CALL_OW 88
// taurad = true ;
3942: LD_ADDR_LOC 2
3946: PUSH
3947: LD_INT 1
3949: ST_TO_ADDR
// end else
3950: GO 3968
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1c ) ;
3952: LD_VAR 0 1
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_STRING DSpecBaz-RSci1-1c
3963: PPUSH
3964: CALL_OW 88
// end ; end ; Say ( bur , DSpecBaz-Bur-1 ) ;
3968: LD_EXP 12
3972: PPUSH
3973: LD_STRING DSpecBaz-Bur-1
3975: PPUSH
3976: CALL_OW 88
// Hint ( SpecBaz ) ;
3980: LD_STRING SpecBaz
3982: PPUSH
3983: CALL_OW 339
// DialogueOff ;
3987: CALL_OW 7
// end ;
3991: PPOPN 1
3993: END
// every 0 0$1 trigger GetTech ( tech_TauRad , You ) = state_researched and GetTech ( tech_SpacAnom , You ) = state_researched do var pom ;
3994: LD_INT 28
3996: PPUSH
3997: LD_EXP 1
4001: PPUSH
4002: CALL_OW 321
4006: PUSH
4007: LD_INT 2
4009: EQUAL
4010: PUSH
4011: LD_INT 29
4013: PPUSH
4014: LD_EXP 1
4018: PPUSH
4019: CALL_OW 321
4023: PUSH
4024: LD_INT 2
4026: EQUAL
4027: AND
4028: IFFALSE 4335
4030: GO 4032
4032: DISABLE
4033: LD_INT 0
4035: PPUSH
// begin DialogueOn ;
4036: CALL_OW 6
// if IsOK ( kapisto ) then
4040: LD_EXP 14
4044: PPUSH
4045: CALL_OW 302
4049: IFFALSE 4097
// begin Say ( kapisto , DSpecBaz-Kap-1a ) ;
4051: LD_EXP 14
4055: PPUSH
4056: LD_STRING DSpecBaz-Kap-1a
4058: PPUSH
4059: CALL_OW 88
// if taurad then
4063: LD_LOC 2
4067: IFFALSE 4083
// Say ( kapisto , DSpecBaz-Kap-1c ) else
4069: LD_EXP 14
4073: PPUSH
4074: LD_STRING DSpecBaz-Kap-1c
4076: PPUSH
4077: CALL_OW 88
4081: GO 4095
// Say ( kapisto , DSpecBaz-Kap-1b ) ;
4083: LD_EXP 14
4087: PPUSH
4088: LD_STRING DSpecBaz-Kap-1b
4090: PPUSH
4091: CALL_OW 88
// end else
4095: GO 4319
// if IsOK ( petro ) then
4097: LD_EXP 15
4101: PPUSH
4102: CALL_OW 302
4106: IFFALSE 4154
// begin Say ( petro , DSpecBaz-Pty-1a ) ;
4108: LD_EXP 15
4112: PPUSH
4113: LD_STRING DSpecBaz-Pty-1a
4115: PPUSH
4116: CALL_OW 88
// if taurad then
4120: LD_LOC 2
4124: IFFALSE 4140
// Say ( petro , DSpecBaz-Pty-1c ) else
4126: LD_EXP 15
4130: PPUSH
4131: LD_STRING DSpecBaz-Pty-1c
4133: PPUSH
4134: CALL_OW 88
4138: GO 4152
// Say ( petro , DSpecBaz-Pty-1b ) ;
4140: LD_EXP 15
4144: PPUSH
4145: LD_STRING DSpecBaz-Pty-1b
4147: PPUSH
4148: CALL_OW 88
// end else
4152: GO 4319
// if IsOK ( dol ) then
4154: LD_EXP 13
4158: PPUSH
4159: CALL_OW 302
4163: IFFALSE 4211
// begin Say ( dol , DSpecBaz-Dol-1a ) ;
4165: LD_EXP 13
4169: PPUSH
4170: LD_STRING DSpecBaz-Dol-1a
4172: PPUSH
4173: CALL_OW 88
// if taurad then
4177: LD_LOC 2
4181: IFFALSE 4197
// Say ( dol , DSpecBaz-Dol-1c ) else
4183: LD_EXP 13
4187: PPUSH
4188: LD_STRING DSpecBaz-Dol-1c
4190: PPUSH
4191: CALL_OW 88
4195: GO 4209
// Say ( dol , DSpecBaz-Dol-1b ) ;
4197: LD_EXP 13
4201: PPUSH
4202: LD_STRING DSpecBaz-Dol-1b
4204: PPUSH
4205: CALL_OW 88
// end else
4209: GO 4319
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur , petro , kapisto , dol ] ) ;
4211: LD_ADDR_VAR 0 1
4215: PUSH
4216: LD_INT 1
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_EXP 12
4226: PUSH
4227: LD_EXP 15
4231: PUSH
4232: LD_EXP 14
4236: PUSH
4237: LD_EXP 13
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: PPUSH
4248: CALL 3113 0 3
4252: ST_TO_ADDR
// if pom > 0 then
4253: LD_VAR 0 1
4257: PUSH
4258: LD_INT 0
4260: GREATER
4261: IFFALSE 4319
// begin Say ( pom [ 1 ] , DSpecBaz-RSci1-1a ) ;
4263: LD_VAR 0 1
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: PPUSH
4272: LD_STRING DSpecBaz-RSci1-1a
4274: PPUSH
4275: CALL_OW 88
// if taurad then
4279: LD_LOC 2
4283: IFFALSE 4303
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1c ) else
4285: LD_VAR 0 1
4289: PUSH
4290: LD_INT 1
4292: ARRAY
4293: PPUSH
4294: LD_STRING DSpecBaz-RSci1-1c
4296: PPUSH
4297: CALL_OW 88
4301: GO 4319
// Say ( pom [ 1 ] , DSpecBaz-RSci1-1b ) ;
4303: LD_VAR 0 1
4307: PUSH
4308: LD_INT 1
4310: ARRAY
4311: PPUSH
4312: LD_STRING DSpecBaz-RSci1-1b
4314: PPUSH
4315: CALL_OW 88
// end ; end ; Say ( bur , DSpecBaz-Bur-1a ) ;
4319: LD_EXP 12
4323: PPUSH
4324: LD_STRING DSpecBaz-Bur-1a
4326: PPUSH
4327: CALL_OW 88
// DialogueOff ;
4331: CALL_OW 7
// end ;
4335: PPOPN 1
4337: END
// every 0 0$1 trigger SeeArea ( You , Arabi_see ) > 2 do
4338: LD_EXP 1
4342: PPUSH
4343: LD_INT 28
4345: PPUSH
4346: CALL_OW 294
4350: PUSH
4351: LD_INT 2
4353: GREATER
4354: IFFALSE 4400
4356: GO 4358
4358: DISABLE
// begin if not KECY_s_arabama then
4359: LD_EXP 7
4363: NOT
4364: IFFALSE 4400
// begin if not maccepted then
4366: LD_EXP 54
4370: NOT
4371: IFFALSE 4378
// enable ( 1 ) else
4373: LD_INT 1
4375: ENABLE_MARKED
4376: GO 4392
// if mhandedover then
4378: LD_EXP 55
4382: IFFALSE 4389
// enable ( 2 ) else
4384: LD_INT 2
4386: ENABLE_MARKED
4387: GO 4392
// enable ( 3 ) ;
4389: LD_INT 3
4391: ENABLE_MARKED
// KECY_s_arabama = true ;
4392: LD_ADDR_EXP 7
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// end ; end ;
4400: END
// export function query_konec ; var pom ; begin
4401: LD_INT 0
4403: PPUSH
4404: PPUSH
// pom = Query ( QEndMission ) ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_STRING QEndMission
4412: PPUSH
4413: CALL_OW 97
4417: ST_TO_ADDR
// result := pom ;
4418: LD_ADDR_VAR 0 1
4422: PUSH
4423: LD_VAR 0 2
4427: ST_TO_ADDR
// end ; end_of_file
4428: LD_VAR 0 1
4432: RET
// export Ru_base ; export cislo_baze ; export Ru_enter ; export masha ; export bur ; export dol ; export kapisto ; export petro ; export pop ; export bel ; export gny ; export kiri ; export koval ; export schol ; export kuzmov ; export karam ; export petrov ; export gleb ; export lipsch ; export tito ; export xavier ; export obluk ; export kozlov ; var bedny ; export test_ukonceni_allowed ; every 0 0$0.1 do
4433: GO 4435
4435: DISABLE
// begin bedny = 0 ;
4436: LD_ADDR_LOC 4
4440: PUSH
4441: LD_INT 0
4443: ST_TO_ADDR
// test_ukonceni_allowed = false ;
4444: LD_ADDR_EXP 31
4448: PUSH
4449: LD_INT 0
4451: ST_TO_ADDR
// end ;
4452: END
// export function place_resource ; begin
4453: LD_INT 0
4455: PPUSH
// CreateDepositXY ( 45 , 72 , mat_oil ) ;
4456: LD_INT 45
4458: PPUSH
4459: LD_INT 72
4461: PPUSH
4462: LD_INT 2
4464: PPUSH
4465: CALL_OW 62
// CreateDepositXY ( 51 , 86 , mat_siberit ) ;
4469: LD_INT 51
4471: PPUSH
4472: LD_INT 86
4474: PPUSH
4475: LD_INT 3
4477: PPUSH
4478: CALL_OW 62
// CreateDepositXY ( 92 , 110 , mat_oil ) ;
4482: LD_INT 92
4484: PPUSH
4485: LD_INT 110
4487: PPUSH
4488: LD_INT 2
4490: PPUSH
4491: CALL_OW 62
// CreateDepositXY ( 103 , 103 , mat_siberit ) ;
4495: LD_INT 103
4497: PPUSH
4498: LD_INT 103
4500: PPUSH
4501: LD_INT 3
4503: PPUSH
4504: CALL_OW 62
// CreateDepositXY ( 151 , 84 , mat_oil ) ;
4508: LD_INT 151
4510: PPUSH
4511: LD_INT 84
4513: PPUSH
4514: LD_INT 2
4516: PPUSH
4517: CALL_OW 62
// CreateDepositXY ( 139 , 60 , mat_siberit ) ;
4521: LD_INT 139
4523: PPUSH
4524: LD_INT 60
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: CALL_OW 62
// end ;
4534: LD_VAR 0 1
4538: RET
// export function placni_rusy_na_zacatek ; var ezone ; var i ; begin
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
4543: PPUSH
// case cislo_baze of 1 :
4544: LD_EXP 9
4548: PUSH
4549: LD_INT 1
4551: DOUBLE
4552: EQUAL
4553: IFTRUE 4557
4555: GO 4580
4557: POP
// begin ezone = ezone1 ;
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: LD_INT 4
4565: ST_TO_ADDR
// RevealFogArea ( You , Renter1 ) ;
4566: LD_EXP 1
4570: PPUSH
4571: LD_INT 14
4573: PPUSH
4574: CALL_OW 332
// end ; 2 :
4578: GO 4643
4580: LD_INT 2
4582: DOUBLE
4583: EQUAL
4584: IFTRUE 4588
4586: GO 4611
4588: POP
// begin ezone = ezone2 ;
4589: LD_ADDR_VAR 0 2
4593: PUSH
4594: LD_INT 5
4596: ST_TO_ADDR
// RevealFogArea ( You , Renter2 ) ;
4597: LD_EXP 1
4601: PPUSH
4602: LD_INT 15
4604: PPUSH
4605: CALL_OW 332
// end ; 3 :
4609: GO 4643
4611: LD_INT 3
4613: DOUBLE
4614: EQUAL
4615: IFTRUE 4619
4617: GO 4642
4619: POP
// begin ezone = ezone3 ;
4620: LD_ADDR_VAR 0 2
4624: PUSH
4625: LD_INT 6
4627: ST_TO_ADDR
// RevealFogArea ( You , Renter3 ) ;
4628: LD_EXP 1
4632: PPUSH
4633: LD_INT 16
4635: PPUSH
4636: CALL_OW 332
// end ; end ;
4640: GO 4643
4642: POP
// for i in RUSI_ENTER_LIST do
4643: LD_ADDR_VAR 0 3
4647: PUSH
4648: LD_EXP 32
4652: PUSH
4653: FOR_IN
4654: IFFALSE 4675
// PlaceUnitArea ( i , ezone , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_VAR 0 2
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 49
4673: GO 4653
4675: POP
4676: POP
// CenterNowOnUnits ( RUSI_ENTER_LIST ) ;
4677: LD_EXP 32
4681: PPUSH
4682: CALL_OW 87
// chmo1 ;
4686: CALL 1808 0 0
// InGameOff ;
4690: CALL_OW 9
// end ;
4694: LD_VAR 0 1
4698: RET
// every 0 0$1 do
4699: GO 4701
4701: DISABLE
// begin wait ( delay_beden [ difficulty ] ) ;
4702: LD_EXP 45
4706: PUSH
4707: LD_OWVAR 67
4711: ARRAY
4712: PPUSH
4713: CALL_OW 67
// wait ( Rand ( 1 , bedny * 0 0$20 ) ) ;
4717: LD_INT 1
4719: PPUSH
4720: LD_LOC 4
4724: PUSH
4725: LD_INT 700
4727: MUL
4728: PPUSH
4729: CALL_OW 12
4733: PPUSH
4734: CALL_OW 67
// bedny = bedny + 1 ;
4738: LD_ADDR_LOC 4
4742: PUSH
4743: LD_LOC 4
4747: PUSH
4748: LD_INT 1
4750: PLUS
4751: ST_TO_ADDR
// case cislo_baze of 1 :
4752: LD_EXP 9
4756: PUSH
4757: LD_INT 1
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4789
4765: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base3 , true ) ; 2 :
4766: LD_INT 3
4768: PPUSH
4769: LD_INT 5
4771: PPUSH
4772: CALL_OW 12
4776: PPUSH
4777: LD_INT 3
4779: PPUSH
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 55
4787: GO 4861
4789: LD_INT 2
4791: DOUBLE
4792: EQUAL
4793: IFTRUE 4797
4795: GO 4821
4797: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base2 , true ) ; 3 :
4798: LD_INT 3
4800: PPUSH
4801: LD_INT 5
4803: PPUSH
4804: CALL_OW 12
4808: PPUSH
4809: LD_INT 2
4811: PPUSH
4812: LD_INT 1
4814: PPUSH
4815: CALL_OW 55
4819: GO 4861
4821: LD_INT 3
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4829
4827: GO 4853
4829: POP
// CreateCratesArea ( Rand ( 3 , 5 ) , base1 , true ) ; else
4830: LD_INT 3
4832: PPUSH
4833: LD_INT 5
4835: PPUSH
4836: CALL_OW 12
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: LD_INT 1
4846: PPUSH
4847: CALL_OW 55
4851: GO 4861
4853: POP
// begin msg ( ERROR: pri padani beden doslo k chybe ) ;
4854: LD_STRING ERROR: pri padani beden doslo k chybe
4856: PPUSH
4857: CALL_OW 100
// end ; end ; enable ;
4861: ENABLE
// end ;
4862: END
// every 1 1$30 do
4863: GO 4865
4865: DISABLE
// begin wait ( Rand ( 1 , 1 1$0 ) ) ;
4866: LD_INT 1
4868: PPUSH
4869: LD_INT 2100
4871: PPUSH
4872: CALL_OW 12
4876: PPUSH
4877: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , Bedny_Ar , true ) ;
4881: LD_INT 1
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: CALL_OW 12
4891: PPUSH
4892: LD_INT 24
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: CALL_OW 55
// enable ;
4902: ENABLE
// end ;
4903: END
// every 0 0$1 do var okay ; var plab ; var i ; var pom ;
4904: GO 4906
4906: DISABLE
4907: LD_INT 0
4909: PPUSH
4910: PPUSH
4911: PPUSH
4912: PPUSH
// begin okay = true ;
4913: LD_ADDR_VAR 0 1
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// if IsOK ( Am_lab1 ) then
4921: LD_INT 48
4923: PPUSH
4924: CALL_OW 302
4928: IFFALSE 4953
// if GetSide ( Am_lab1 ) = Amici then
4930: LD_INT 48
4932: PPUSH
4933: CALL_OW 255
4937: PUSH
4938: LD_EXP 2
4942: EQUAL
4943: IFFALSE 4953
// okay = false ;
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: LD_INT 0
4952: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
4953: LD_INT 55
4955: PPUSH
4956: CALL_OW 302
4960: IFFALSE 4985
// if GetSide ( Am_lab2 ) = Amici then
4962: LD_INT 55
4964: PPUSH
4965: CALL_OW 255
4969: PUSH
4970: LD_EXP 2
4974: EQUAL
4975: IFFALSE 4985
// okay = false ;
4977: LD_ADDR_VAR 0 1
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// if IsOK ( Am_lab3 ) then
4985: LD_INT 56
4987: PPUSH
4988: CALL_OW 302
4992: IFFALSE 5017
// if GetSide ( Am_lab3 ) = Amici then
4994: LD_INT 56
4996: PPUSH
4997: CALL_OW 255
5001: PUSH
5002: LD_EXP 2
5006: EQUAL
5007: IFFALSE 5017
// okay = false ;
5009: LD_ADDR_VAR 0 1
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// if IsOK ( Joan ) then
5017: LD_EXP 62
5021: PPUSH
5022: CALL_OW 302
5026: IFFALSE 5036
// okay = false ;
5028: LD_ADDR_VAR 0 1
5032: PUSH
5033: LD_INT 0
5035: ST_TO_ADDR
// if okay and test_na_vedce then
5036: LD_VAR 0 1
5040: PUSH
5041: CALL 20894 0 0
5045: AND
5046: IFFALSE 5226
// begin plab = 0 ;
5048: LD_ADDR_VAR 0 2
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
5056: LD_ADDR_VAR 0 3
5060: PUSH
5061: LD_INT 48
5063: PUSH
5064: LD_INT 55
5066: PUSH
5067: LD_INT 56
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: PUSH
5075: FOR_IN
5076: IFFALSE 5122
// if GetSide ( i ) = You or IsDead ( i ) then
5078: LD_VAR 0 3
5082: PPUSH
5083: CALL_OW 255
5087: PUSH
5088: LD_EXP 1
5092: EQUAL
5093: PUSH
5094: LD_VAR 0 3
5098: PPUSH
5099: CALL_OW 301
5103: OR
5104: IFFALSE 5120
// plab = plab + 1 ;
5106: LD_ADDR_VAR 0 2
5110: PUSH
5111: LD_VAR 0 2
5115: PUSH
5116: LD_INT 1
5118: PLUS
5119: ST_TO_ADDR
5120: GO 5075
5122: POP
5123: POP
// if GetTech ( tech_TauRad , You ) and GetTech ( tech_SpacAnom , You ) then
5124: LD_INT 28
5126: PPUSH
5127: LD_EXP 1
5131: PPUSH
5132: CALL_OW 321
5136: PUSH
5137: LD_INT 29
5139: PPUSH
5140: LD_EXP 1
5144: PPUSH
5145: CALL_OW 321
5149: AND
5150: IFFALSE 5166
// plab = plab + 1 ;
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: LD_VAR 0 2
5161: PUSH
5162: LD_INT 1
5164: PLUS
5165: ST_TO_ADDR
// if plab >= 4 then
5166: LD_VAR 0 2
5170: PUSH
5171: LD_INT 4
5173: GREATEREQUAL
5174: IFFALSE 5182
// konec_mise else
5176: CALL 231 0 0
5180: GO 5224
// begin pom = query_konec ;
5182: LD_ADDR_VAR 0 4
5186: PUSH
5187: CALL 4401 0 0
5191: ST_TO_ADDR
// if pom = 2 then
5192: LD_VAR 0 4
5196: PUSH
5197: LD_INT 2
5199: EQUAL
5200: IFFALSE 5208
// konec_mise else
5202: CALL 231 0 0
5206: GO 5224
// begin end_the_mission_allowed = true ;
5208: LD_ADDR_OWVAR 57
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// test_ukonceni_allowed = true ;
5216: LD_ADDR_EXP 31
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// end ; end ; end else
5224: GO 5227
// enable ;
5226: ENABLE
// end ;
5227: PPOPN 4
5229: END
// every 0 0$1 do
5230: GO 5232
5232: DISABLE
// begin SetMark ( Masha , 1 ) ;
5233: LD_EXP 11
5237: PPUSH
5238: LD_INT 1
5240: PPUSH
5241: CALL_OW 242
// end ;
5245: END
// every 0 0$5 trigger test_ukonceni_allowed do var okay ; var i ; var plab ;
5246: LD_EXP 31
5250: IFFALSE 5528
5252: GO 5254
5254: DISABLE
5255: LD_INT 0
5257: PPUSH
5258: PPUSH
5259: PPUSH
// begin okay = true ;
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// if IsOK ( Am_lab1 ) then
5268: LD_INT 48
5270: PPUSH
5271: CALL_OW 302
5275: IFFALSE 5300
// if GetSide ( Am_lab1 ) = Amici then
5277: LD_INT 48
5279: PPUSH
5280: CALL_OW 255
5284: PUSH
5285: LD_EXP 2
5289: EQUAL
5290: IFFALSE 5300
// okay = false ;
5292: LD_ADDR_VAR 0 1
5296: PUSH
5297: LD_INT 0
5299: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
5300: LD_INT 55
5302: PPUSH
5303: CALL_OW 302
5307: IFFALSE 5332
// if GetSide ( Am_lab2 ) = Amici then
5309: LD_INT 55
5311: PPUSH
5312: CALL_OW 255
5316: PUSH
5317: LD_EXP 2
5321: EQUAL
5322: IFFALSE 5332
// okay = false ;
5324: LD_ADDR_VAR 0 1
5328: PUSH
5329: LD_INT 0
5331: ST_TO_ADDR
// if IsOK ( Am_lab2 ) then
5332: LD_INT 55
5334: PPUSH
5335: CALL_OW 302
5339: IFFALSE 5364
// if GetSide ( Am_lab2 ) = Amici then
5341: LD_INT 55
5343: PPUSH
5344: CALL_OW 255
5348: PUSH
5349: LD_EXP 2
5353: EQUAL
5354: IFFALSE 5364
// okay = false ;
5356: LD_ADDR_VAR 0 1
5360: PUSH
5361: LD_INT 0
5363: ST_TO_ADDR
// if IsOK ( Joan ) then
5364: LD_EXP 62
5368: PPUSH
5369: CALL_OW 302
5373: IFFALSE 5383
// okay = false ;
5375: LD_ADDR_VAR 0 1
5379: PUSH
5380: LD_INT 0
5382: ST_TO_ADDR
// if okay and test_na_vedce then
5383: LD_VAR 0 1
5387: PUSH
5388: CALL 20894 0 0
5392: AND
5393: IFFALSE 5527
// begin plab = 0 ;
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: LD_INT 0
5402: ST_TO_ADDR
// for i in [ Am_lab1 , Am_lab2 , Am_lab3 ] do
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: LD_INT 48
5410: PUSH
5411: LD_INT 55
5413: PUSH
5414: LD_INT 56
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: FOR_IN
5423: IFFALSE 5469
// if GetSide ( i ) = You or IsDead ( i ) then
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 255
5434: PUSH
5435: LD_EXP 1
5439: EQUAL
5440: PUSH
5441: LD_VAR 0 2
5445: PPUSH
5446: CALL_OW 301
5450: OR
5451: IFFALSE 5467
// plab = plab + 1 ;
5453: LD_ADDR_VAR 0 3
5457: PUSH
5458: LD_VAR 0 3
5462: PUSH
5463: LD_INT 1
5465: PLUS
5466: ST_TO_ADDR
5467: GO 5422
5469: POP
5470: POP
// if GetTech ( tech_TauRad , You ) and GetTech ( tech_SpacAnom , You ) then
5471: LD_INT 28
5473: PPUSH
5474: LD_EXP 1
5478: PPUSH
5479: CALL_OW 321
5483: PUSH
5484: LD_INT 29
5486: PPUSH
5487: LD_EXP 1
5491: PPUSH
5492: CALL_OW 321
5496: AND
5497: IFFALSE 5513
// plab = plab + 1 ;
5499: LD_ADDR_VAR 0 3
5503: PUSH
5504: LD_VAR 0 3
5508: PUSH
5509: LD_INT 1
5511: PLUS
5512: ST_TO_ADDR
// if plab >= 4 then
5513: LD_VAR 0 3
5517: PUSH
5518: LD_INT 4
5520: GREATEREQUAL
5521: IFFALSE 5527
// konec_mise ;
5523: CALL 231 0 0
// end ; enable ;
5527: ENABLE
// end ;
5528: PPOPN 3
5530: END
// every 1 1$0 trigger GetSide ( Ar_bar ) = You do
5531: LD_INT 61
5533: PPUSH
5534: CALL_OW 255
5538: PUSH
5539: LD_EXP 1
5543: EQUAL
5544: IFFALSE 5564
5546: GO 5548
5548: DISABLE
// begin SetTech ( tech_Mortar , You , state_researched ) ;
5549: LD_INT 41
5551: PPUSH
5552: LD_EXP 1
5556: PPUSH
5557: LD_INT 2
5559: PPUSH
5560: CALL_OW 322
// end ; end_of_file
5564: END
// export RUSI_ENTER_LIST ; export AM_UTOK_1_LIST ; export AM_UTOK_2_LIST ; export AM_UTOK_3_LIST ; var av , ah ; export function vyber_lidi_pro_misi ; var lvyber ; var i , j , pom ; var vyber ; begin
5565: LD_INT 0
5567: PPUSH
5568: PPUSH
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
// uc_nation = nation_russian ;
5573: LD_ADDR_OWVAR 21
5577: PUSH
5578: LD_INT 3
5580: ST_TO_ADDR
// uc_side = You ;
5581: LD_ADDR_OWVAR 20
5585: PUSH
5586: LD_EXP 1
5590: ST_TO_ADDR
// pom = [ ] ;
5591: LD_ADDR_VAR 0 5
5595: PUSH
5596: EMPTY
5597: ST_TO_ADDR
// SetSide ( bur , You ) ;
5598: LD_EXP 12
5602: PPUSH
5603: LD_EXP 1
5607: PPUSH
5608: CALL_OW 235
// SetClass ( bur , class_mechanic ) ;
5612: LD_EXP 12
5616: PPUSH
5617: LD_INT 3
5619: PPUSH
5620: CALL_OW 336
// if dol > 0 then
5624: LD_EXP 13
5628: PUSH
5629: LD_INT 0
5631: GREATER
5632: IFFALSE 5660
// begin SetClass ( dol , class_scientistic ) ;
5634: LD_EXP 13
5638: PPUSH
5639: LD_INT 4
5641: PPUSH
5642: CALL_OW 336
// SetSide ( dol , You ) ;
5646: LD_EXP 13
5650: PPUSH
5651: LD_EXP 1
5655: PPUSH
5656: CALL_OW 235
// end ; if kapisto > 0 then
5660: LD_EXP 14
5664: PUSH
5665: LD_INT 0
5667: GREATER
5668: IFFALSE 5696
// begin SetClass ( kapisto , class_scientistic ) ;
5670: LD_EXP 14
5674: PPUSH
5675: LD_INT 4
5677: PPUSH
5678: CALL_OW 336
// SetSide ( kapisto , You ) ;
5682: LD_EXP 14
5686: PPUSH
5687: LD_EXP 1
5691: PPUSH
5692: CALL_OW 235
// end ; if petro > 0 then
5696: LD_EXP 15
5700: PUSH
5701: LD_INT 0
5703: GREATER
5704: IFFALSE 5732
// begin SetClass ( petro , class_scientistic ) ;
5706: LD_EXP 15
5710: PPUSH
5711: LD_INT 4
5713: PPUSH
5714: CALL_OW 336
// SetSide ( petro , You ) ;
5718: LD_EXP 15
5722: PPUSH
5723: LD_EXP 1
5727: PPUSH
5728: CALL_OW 235
// end ; lvyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
5732: LD_ADDR_VAR 0 2
5736: PUSH
5737: LD_INT -4
5739: PUSH
5740: LD_INT -1
5742: PUSH
5743: LD_INT -6
5745: PUSH
5746: LD_EXP 12
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: ST_TO_ADDR
// lvyber = lvyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
5757: LD_ADDR_VAR 0 2
5761: PUSH
5762: LD_VAR 0 2
5766: PUSH
5767: LD_INT -2
5769: PUSH
5770: LD_INT -3
5772: PUSH
5773: LD_INT -5
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: ADD
5781: ST_TO_ADDR
// if dol > 0 then
5782: LD_EXP 13
5786: PUSH
5787: LD_INT 0
5789: GREATER
5790: IFFALSE 5834
// begin SetSide ( dol , You ) ;
5792: LD_EXP 13
5796: PPUSH
5797: LD_EXP 1
5801: PPUSH
5802: CALL_OW 235
// SetClass ( dol , class_scientistic ) ;
5806: LD_EXP 13
5810: PPUSH
5811: LD_INT 4
5813: PPUSH
5814: CALL_OW 336
// lvyber = lvyber ^ dol ;
5818: LD_ADDR_VAR 0 2
5822: PUSH
5823: LD_VAR 0 2
5827: PUSH
5828: LD_EXP 13
5832: ADD
5833: ST_TO_ADDR
// end ; if kapisto > 0 then
5834: LD_EXP 14
5838: PUSH
5839: LD_INT 0
5841: GREATER
5842: IFFALSE 5886
// begin SetSide ( kapisto , You ) ;
5844: LD_EXP 14
5848: PPUSH
5849: LD_EXP 1
5853: PPUSH
5854: CALL_OW 235
// SetClass ( kapisto , class_scientistic ) ;
5858: LD_EXP 14
5862: PPUSH
5863: LD_INT 4
5865: PPUSH
5866: CALL_OW 336
// lvyber = lvyber ^ kapisto ;
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: LD_VAR 0 2
5879: PUSH
5880: LD_EXP 14
5884: ADD
5885: ST_TO_ADDR
// end ; if petro > 0 then
5886: LD_EXP 15
5890: PUSH
5891: LD_INT 0
5893: GREATER
5894: IFFALSE 5938
// begin SetSide ( petro , You ) ;
5896: LD_EXP 15
5900: PPUSH
5901: LD_EXP 1
5905: PPUSH
5906: CALL_OW 235
// SetClass ( petro , class_scientistic ) ;
5910: LD_EXP 15
5914: PPUSH
5915: LD_INT 4
5917: PPUSH
5918: CALL_OW 336
// lvyber = lvyber ^ petro ;
5922: LD_ADDR_VAR 0 2
5926: PUSH
5927: LD_VAR 0 2
5931: PUSH
5932: LD_EXP 15
5936: ADD
5937: ST_TO_ADDR
// end ; if bel > 0 then
5938: LD_EXP 17
5942: PUSH
5943: LD_INT 0
5945: GREATER
5946: IFFALSE 5990
// begin SetSide ( bel , You ) ;
5948: LD_EXP 17
5952: PPUSH
5953: LD_EXP 1
5957: PPUSH
5958: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
5962: LD_EXP 17
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: CALL_OW 336
// lvyber = lvyber ^ bel ;
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: LD_VAR 0 2
5983: PUSH
5984: LD_EXP 17
5988: ADD
5989: ST_TO_ADDR
// end ; if gny > 0 then
5990: LD_EXP 18
5994: PUSH
5995: LD_INT 0
5997: GREATER
5998: IFFALSE 6042
// begin SetSide ( gny , You ) ;
6000: LD_EXP 18
6004: PPUSH
6005: LD_EXP 1
6009: PPUSH
6010: CALL_OW 235
// SetClass ( gny , class_soldier ) ;
6014: LD_EXP 18
6018: PPUSH
6019: LD_INT 1
6021: PPUSH
6022: CALL_OW 336
// lvyber = lvyber ^ gny ;
6026: LD_ADDR_VAR 0 2
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_EXP 18
6040: ADD
6041: ST_TO_ADDR
// end ; if kiri > 0 then
6042: LD_EXP 19
6046: PUSH
6047: LD_INT 0
6049: GREATER
6050: IFFALSE 6094
// begin SetSide ( kiri , You ) ;
6052: LD_EXP 19
6056: PPUSH
6057: LD_EXP 1
6061: PPUSH
6062: CALL_OW 235
// SetClass ( kiri , class_scientistic ) ;
6066: LD_EXP 19
6070: PPUSH
6071: LD_INT 4
6073: PPUSH
6074: CALL_OW 336
// lvyber = lvyber ^ kiri ;
6078: LD_ADDR_VAR 0 2
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_EXP 19
6092: ADD
6093: ST_TO_ADDR
// end ; if koval > 0 then
6094: LD_EXP 20
6098: PUSH
6099: LD_INT 0
6101: GREATER
6102: IFFALSE 6146
// begin SetSide ( koval , You ) ;
6104: LD_EXP 20
6108: PPUSH
6109: LD_EXP 1
6113: PPUSH
6114: CALL_OW 235
// SetClass ( koval , class_soldier ) ;
6118: LD_EXP 20
6122: PPUSH
6123: LD_INT 1
6125: PPUSH
6126: CALL_OW 336
// lvyber = lvyber ^ koval ;
6130: LD_ADDR_VAR 0 2
6134: PUSH
6135: LD_VAR 0 2
6139: PUSH
6140: LD_EXP 20
6144: ADD
6145: ST_TO_ADDR
// end ; if schol > 0 then
6146: LD_EXP 21
6150: PUSH
6151: LD_INT 0
6153: GREATER
6154: IFFALSE 6198
// begin SetSide ( schol , You ) ;
6156: LD_EXP 21
6160: PPUSH
6161: LD_EXP 1
6165: PPUSH
6166: CALL_OW 235
// SetClass ( schol , class_scientistic ) ;
6170: LD_EXP 21
6174: PPUSH
6175: LD_INT 4
6177: PPUSH
6178: CALL_OW 336
// lvyber = lvyber ^ schol ;
6182: LD_ADDR_VAR 0 2
6186: PUSH
6187: LD_VAR 0 2
6191: PUSH
6192: LD_EXP 21
6196: ADD
6197: ST_TO_ADDR
// end ; if kuzmov > 0 then
6198: LD_EXP 22
6202: PUSH
6203: LD_INT 0
6205: GREATER
6206: IFFALSE 6250
// begin SetSide ( kuzmov , You ) ;
6208: LD_EXP 22
6212: PPUSH
6213: LD_EXP 1
6217: PPUSH
6218: CALL_OW 235
// SetClass ( kuzmov , class_soldier ) ;
6222: LD_EXP 22
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: CALL_OW 336
// lvyber = lvyber ^ kuzmov ;
6234: LD_ADDR_VAR 0 2
6238: PUSH
6239: LD_VAR 0 2
6243: PUSH
6244: LD_EXP 22
6248: ADD
6249: ST_TO_ADDR
// end ; if karam > 0 then
6250: LD_EXP 23
6254: PUSH
6255: LD_INT 0
6257: GREATER
6258: IFFALSE 6302
// begin SetSide ( karam , You ) ;
6260: LD_EXP 23
6264: PPUSH
6265: LD_EXP 1
6269: PPUSH
6270: CALL_OW 235
// SetClass ( karam , class_soldier ) ;
6274: LD_EXP 23
6278: PPUSH
6279: LD_INT 1
6281: PPUSH
6282: CALL_OW 336
// lvyber = lvyber ^ karam ;
6286: LD_ADDR_VAR 0 2
6290: PUSH
6291: LD_VAR 0 2
6295: PUSH
6296: LD_EXP 23
6300: ADD
6301: ST_TO_ADDR
// end ; if petrov > 0 then
6302: LD_EXP 24
6306: PUSH
6307: LD_INT 0
6309: GREATER
6310: IFFALSE 6354
// begin SetSide ( petrov , You ) ;
6312: LD_EXP 24
6316: PPUSH
6317: LD_EXP 1
6321: PPUSH
6322: CALL_OW 235
// SetClass ( petrov , class_mechanic ) ;
6326: LD_EXP 24
6330: PPUSH
6331: LD_INT 3
6333: PPUSH
6334: CALL_OW 336
// lvyber = lvyber ^ petrov ;
6338: LD_ADDR_VAR 0 2
6342: PUSH
6343: LD_VAR 0 2
6347: PUSH
6348: LD_EXP 24
6352: ADD
6353: ST_TO_ADDR
// end ; if gleb > 0 then
6354: LD_EXP 25
6358: PUSH
6359: LD_INT 0
6361: GREATER
6362: IFFALSE 6406
// begin SetSide ( gleb , You ) ;
6364: LD_EXP 25
6368: PPUSH
6369: LD_EXP 1
6373: PPUSH
6374: CALL_OW 235
// SetClass ( gleb , class_mechanic ) ;
6378: LD_EXP 25
6382: PPUSH
6383: LD_INT 3
6385: PPUSH
6386: CALL_OW 336
// lvyber = lvyber ^ gleb ;
6390: LD_ADDR_VAR 0 2
6394: PUSH
6395: LD_VAR 0 2
6399: PUSH
6400: LD_EXP 25
6404: ADD
6405: ST_TO_ADDR
// end ; if lipsch > 0 then
6406: LD_EXP 26
6410: PUSH
6411: LD_INT 0
6413: GREATER
6414: IFFALSE 6458
// begin SetSide ( lipsch , You ) ;
6416: LD_EXP 26
6420: PPUSH
6421: LD_EXP 1
6425: PPUSH
6426: CALL_OW 235
// SetClass ( lipsch , class_engineer ) ;
6430: LD_EXP 26
6434: PPUSH
6435: LD_INT 2
6437: PPUSH
6438: CALL_OW 336
// lvyber = lvyber ^ lipsch ;
6442: LD_ADDR_VAR 0 2
6446: PUSH
6447: LD_VAR 0 2
6451: PUSH
6452: LD_EXP 26
6456: ADD
6457: ST_TO_ADDR
// end ; if tito > 0 then
6458: LD_EXP 27
6462: PUSH
6463: LD_INT 0
6465: GREATER
6466: IFFALSE 6510
// begin SetSide ( tito , You ) ;
6468: LD_EXP 27
6472: PPUSH
6473: LD_EXP 1
6477: PPUSH
6478: CALL_OW 235
// SetClass ( tito , class_soldier ) ;
6482: LD_EXP 27
6486: PPUSH
6487: LD_INT 1
6489: PPUSH
6490: CALL_OW 336
// lvyber = lvyber ^ tito ;
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: LD_VAR 0 2
6503: PUSH
6504: LD_EXP 27
6508: ADD
6509: ST_TO_ADDR
// end ; if xavier > 0 then
6510: LD_EXP 28
6514: PUSH
6515: LD_INT 0
6517: GREATER
6518: IFFALSE 6562
// begin SetSide ( xavier , You ) ;
6520: LD_EXP 28
6524: PPUSH
6525: LD_EXP 1
6529: PPUSH
6530: CALL_OW 235
// SetClass ( xavier , class_soldier ) ;
6534: LD_EXP 28
6538: PPUSH
6539: LD_INT 1
6541: PPUSH
6542: CALL_OW 336
// lvyber = lvyber ^ xavier ;
6546: LD_ADDR_VAR 0 2
6550: PUSH
6551: LD_VAR 0 2
6555: PUSH
6556: LD_EXP 28
6560: ADD
6561: ST_TO_ADDR
// end ; if obluk > 0 then
6562: LD_EXP 29
6566: PUSH
6567: LD_INT 0
6569: GREATER
6570: IFFALSE 6614
// begin SetSide ( obluk , You ) ;
6572: LD_EXP 29
6576: PPUSH
6577: LD_EXP 1
6581: PPUSH
6582: CALL_OW 235
// SetClass ( obluk , class_soldier ) ;
6586: LD_EXP 29
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: CALL_OW 336
// lvyber = lvyber ^ obluk ;
6598: LD_ADDR_VAR 0 2
6602: PUSH
6603: LD_VAR 0 2
6607: PUSH
6608: LD_EXP 29
6612: ADD
6613: ST_TO_ADDR
// end ; if kozlov > 0 then
6614: LD_EXP 30
6618: PUSH
6619: LD_INT 0
6621: GREATER
6622: IFFALSE 6666
// begin SetSide ( kozlov , You ) ;
6624: LD_EXP 30
6628: PPUSH
6629: LD_EXP 1
6633: PPUSH
6634: CALL_OW 235
// SetClass ( kozlov , class_soldier ) ;
6638: LD_EXP 30
6642: PPUSH
6643: LD_INT 1
6645: PPUSH
6646: CALL_OW 336
// lvyber = lvyber ^ kozlov ;
6650: LD_ADDR_VAR 0 2
6654: PUSH
6655: LD_VAR 0 2
6659: PUSH
6660: LD_EXP 30
6664: ADD
6665: ST_TO_ADDR
// end ; if TestCharacters ( survivors3 ) then
6666: LD_STRING survivors3
6668: PPUSH
6669: CALL_OW 28
6673: IFFALSE 6688
// pom := CreateCharacterSet ( survivors3 ) ;
6675: LD_ADDR_VAR 0 5
6679: PUSH
6680: LD_STRING survivors3
6682: PPUSH
6683: CALL_OW 31
6687: ST_TO_ADDR
// everybody := pom ;
6688: LD_ADDR_EXP 5
6692: PUSH
6693: LD_VAR 0 5
6697: ST_TO_ADDR
// for i in pom do
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_VAR 0 5
6707: PUSH
6708: FOR_IN
6709: IFFALSE 6722
// nastav_povolani_podle_skilu ( i ) ;
6711: LD_VAR 0 3
6715: PPUSH
6716: CALL 10814 0 1
6720: GO 6708
6722: POP
6723: POP
// if pom < pocet_lidi_na_zacatku [ difficulty ] then
6724: LD_VAR 0 5
6728: PUSH
6729: LD_EXP 38
6733: PUSH
6734: LD_OWVAR 67
6738: ARRAY
6739: LESS
6740: IFFALSE 6814
// for i := 1 to ( pocet_lidi_na_zacatku [ difficulty ] - pom ) do
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: DOUBLE
6748: LD_INT 1
6750: DEC
6751: ST_TO_ADDR
6752: LD_EXP 38
6756: PUSH
6757: LD_OWVAR 67
6761: ARRAY
6762: PUSH
6763: LD_VAR 0 5
6767: MINUS
6768: PUSH
6769: FOR_TO
6770: IFFALSE 6812
// pom = pom ^ get_human ( get_sex , Rand ( 1 , 4 ) , 6 ,  ) ;
6772: LD_ADDR_VAR 0 5
6776: PUSH
6777: LD_VAR 0 5
6781: PUSH
6782: CALL 7619 0 0
6786: PPUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 4
6792: PPUSH
6793: CALL_OW 12
6797: PPUSH
6798: LD_INT 6
6800: PPUSH
6801: LD_STRING 
6803: PPUSH
6804: CALL 7654 0 4
6808: ADD
6809: ST_TO_ADDR
6810: GO 6769
6812: POP
6813: POP
// lvyber = lvyber ^ pom ;
6814: LD_ADDR_VAR 0 2
6818: PUSH
6819: LD_VAR 0 2
6823: PUSH
6824: LD_VAR 0 5
6828: ADD
6829: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet_lidi_na_zacatku [ difficulty ] , pocet_lidi_na_zacatku [ difficulty ] , lvyber , [ [ class_engineer , 1 ] , [ class_scientistic , 0 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
6830: LD_ADDR_VAR 0 5
6834: PUSH
6835: LD_STRING Vyber si peopliky
6837: PPUSH
6838: LD_EXP 38
6842: PUSH
6843: LD_OWVAR 67
6847: ARRAY
6848: PPUSH
6849: LD_EXP 38
6853: PUSH
6854: LD_OWVAR 67
6858: ARRAY
6859: PPUSH
6860: LD_VAR 0 2
6864: PPUSH
6865: LD_INT 2
6867: PUSH
6868: LD_INT 1
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 4
6877: PUSH
6878: LD_INT 0
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 3
6887: PUSH
6888: LD_INT 0
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 1
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 42
6915: ST_TO_ADDR
// everybody := everybody union pom ;
6916: LD_ADDR_EXP 5
6920: PUSH
6921: LD_EXP 5
6925: PUSH
6926: LD_VAR 0 5
6930: UNION
6931: ST_TO_ADDR
// vyber = [ bur ] ;
6932: LD_ADDR_VAR 0 6
6936: PUSH
6937: LD_EXP 12
6941: PUSH
6942: EMPTY
6943: LIST
6944: ST_TO_ADDR
// vyber = vyber ^ pom ;
6945: LD_ADDR_VAR 0 6
6949: PUSH
6950: LD_VAR 0 6
6954: PUSH
6955: LD_VAR 0 5
6959: ADD
6960: ST_TO_ADDR
// result := vyber ;
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: LD_VAR 0 6
6970: ST_TO_ADDR
// end ;
6971: LD_VAR 0 1
6975: RET
// export function create_rusky_konvoj ( lidicci ) ; var pom ; var lpom ; begin
6976: LD_INT 0
6978: PPUSH
6979: PPUSH
6980: PPUSH
// pom = [ ] ;
6981: LD_ADDR_VAR 0 3
6985: PUSH
6986: EMPTY
6987: ST_TO_ADDR
// lpom = lidicci ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 1
6997: ST_TO_ADDR
// uc_nation = nation_russian ;
6998: LD_ADDR_OWVAR 21
7002: PUSH
7003: LD_INT 3
7005: ST_TO_ADDR
// uc_side = You ;
7006: LD_ADDR_OWVAR 20
7010: PUSH
7011: LD_EXP 1
7015: ST_TO_ADDR
// vc_chassis = masha_l [ 1 ] ;
7016: LD_ADDR_OWVAR 37
7020: PUSH
7021: LD_EXP 53
7025: PUSH
7026: LD_INT 1
7028: ARRAY
7029: ST_TO_ADDR
// vc_engine = masha_l [ 2 ] ;
7030: LD_ADDR_OWVAR 39
7034: PUSH
7035: LD_EXP 53
7039: PUSH
7040: LD_INT 2
7042: ARRAY
7043: ST_TO_ADDR
// vc_control = masha_l [ 3 ] ;
7044: LD_ADDR_OWVAR 38
7048: PUSH
7049: LD_EXP 53
7053: PUSH
7054: LD_INT 3
7056: ARRAY
7057: ST_TO_ADDR
// vc_weapon = masha_l [ 4 ] ;
7058: LD_ADDR_OWVAR 40
7062: PUSH
7063: LD_EXP 53
7067: PUSH
7068: LD_INT 4
7070: ARRAY
7071: ST_TO_ADDR
// av = CreateVehicle ;
7072: LD_ADDR_LOC 5
7076: PUSH
7077: CALL_OW 45
7081: ST_TO_ADDR
// masha = av ;
7082: LD_ADDR_EXP 11
7086: PUSH
7087: LD_LOC 5
7091: ST_TO_ADDR
// SetMark ( masha , 1 ) ;
7092: LD_EXP 11
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: CALL_OW 242
// PlaceHumanInUnit ( bur , masha ) ;
7104: LD_EXP 12
7108: PPUSH
7109: LD_EXP 11
7113: PPUSH
7114: CALL_OW 52
// lpom = lpom diff bur ;
7118: LD_ADDR_VAR 0 4
7122: PUSH
7123: LD_VAR 0 4
7127: PUSH
7128: LD_EXP 12
7132: DIFF
7133: ST_TO_ADDR
// pom = pom ^ masha ;
7134: LD_ADDR_VAR 0 3
7138: PUSH
7139: LD_VAR 0 3
7143: PUSH
7144: LD_EXP 11
7148: ADD
7149: ST_TO_ADDR
// vc_control = control_manual ;
7150: LD_ADDR_OWVAR 38
7154: PUSH
7155: LD_INT 1
7157: ST_TO_ADDR
// vc_engine = engine_combustion ;
7158: LD_ADDR_OWVAR 39
7162: PUSH
7163: LD_INT 1
7165: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
7166: LD_ADDR_OWVAR 37
7170: PUSH
7171: LD_INT 22
7173: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
7174: LD_ADDR_OWVAR 40
7178: PUSH
7179: LD_INT 51
7181: ST_TO_ADDR
// av = CreateVehicle ;
7182: LD_ADDR_LOC 5
7186: PUSH
7187: CALL_OW 45
7191: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 1 ] , av ) ;
7192: LD_VAR 0 4
7196: PUSH
7197: LD_INT 1
7199: ARRAY
7200: PPUSH
7201: LD_LOC 5
7205: PPUSH
7206: CALL_OW 52
// AddCargo ( av , mat_cans , 100 ) ;
7210: LD_LOC 5
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 100
7220: PPUSH
7221: CALL_OW 291
// pom = pom ^ av ;
7225: LD_ADDR_VAR 0 3
7229: PUSH
7230: LD_VAR 0 3
7234: PUSH
7235: LD_LOC 5
7239: ADD
7240: ST_TO_ADDR
// av = CreateVehicle ;
7241: LD_ADDR_LOC 5
7245: PUSH
7246: CALL_OW 45
7250: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 2 ] , av ) ;
7251: LD_VAR 0 4
7255: PUSH
7256: LD_INT 2
7258: ARRAY
7259: PPUSH
7260: LD_LOC 5
7264: PPUSH
7265: CALL_OW 52
// AddCargo ( av , mat_cans , 50 ) ;
7269: LD_LOC 5
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: LD_INT 50
7279: PPUSH
7280: CALL_OW 291
// AddCargo ( av , mat_oil , 50 ) ;
7284: LD_LOC 5
7288: PPUSH
7289: LD_INT 2
7291: PPUSH
7292: LD_INT 50
7294: PPUSH
7295: CALL_OW 291
// pom = pom ^ av ;
7299: LD_ADDR_VAR 0 3
7303: PUSH
7304: LD_VAR 0 3
7308: PUSH
7309: LD_LOC 5
7313: ADD
7314: ST_TO_ADDR
// av = CreateVehicle ;
7315: LD_ADDR_LOC 5
7319: PUSH
7320: CALL_OW 45
7324: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 3 ] , av ) ;
7325: LD_VAR 0 4
7329: PUSH
7330: LD_INT 3
7332: ARRAY
7333: PPUSH
7334: LD_LOC 5
7338: PPUSH
7339: CALL_OW 52
// AddCargo ( av , mat_cans , 20 ) ;
7343: LD_LOC 5
7347: PPUSH
7348: LD_INT 1
7350: PPUSH
7351: LD_INT 20
7353: PPUSH
7354: CALL_OW 291
// AddCargo ( av , mat_oil , 40 ) ;
7358: LD_LOC 5
7362: PPUSH
7363: LD_INT 2
7365: PPUSH
7366: LD_INT 40
7368: PPUSH
7369: CALL_OW 291
// AddCargo ( av , mat_siberit , 20 ) ;
7373: LD_LOC 5
7377: PPUSH
7378: LD_INT 3
7380: PPUSH
7381: LD_INT 20
7383: PPUSH
7384: CALL_OW 291
// pom = pom ^ av ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 3
7397: PUSH
7398: LD_LOC 5
7402: ADD
7403: ST_TO_ADDR
// vc_weapon = ru_crane ;
7404: LD_ADDR_OWVAR 40
7408: PUSH
7409: LD_INT 52
7411: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
7412: LD_ADDR_OWVAR 37
7416: PUSH
7417: LD_INT 22
7419: ST_TO_ADDR
// av = CreateVehicle ;
7420: LD_ADDR_LOC 5
7424: PUSH
7425: CALL_OW 45
7429: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 4 ] , av ) ;
7430: LD_VAR 0 4
7434: PUSH
7435: LD_INT 4
7437: ARRAY
7438: PPUSH
7439: LD_LOC 5
7443: PPUSH
7444: CALL_OW 52
// pom = pom ^ av ;
7448: LD_ADDR_VAR 0 3
7452: PUSH
7453: LD_VAR 0 3
7457: PUSH
7458: LD_LOC 5
7462: ADD
7463: ST_TO_ADDR
// vc_weapon = zbran_na_uvod [ difficulty ] ;
7464: LD_ADDR_OWVAR 40
7468: PUSH
7469: LD_EXP 50
7473: PUSH
7474: LD_OWVAR 67
7478: ARRAY
7479: ST_TO_ADDR
// vc_chassis = chassis_na_uvod [ difficulty ] ;
7480: LD_ADDR_OWVAR 37
7484: PUSH
7485: LD_EXP 51
7489: PUSH
7490: LD_OWVAR 67
7494: ARRAY
7495: ST_TO_ADDR
// if difficulty < 3 then
7496: LD_OWVAR 67
7500: PUSH
7501: LD_INT 3
7503: LESS
7504: IFFALSE 7550
// begin av = CreateVehicle ;
7506: LD_ADDR_LOC 5
7510: PUSH
7511: CALL_OW 45
7515: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 5 ] , av ) ;
7516: LD_VAR 0 4
7520: PUSH
7521: LD_INT 5
7523: ARRAY
7524: PPUSH
7525: LD_LOC 5
7529: PPUSH
7530: CALL_OW 52
// pom = pom ^ av ;
7534: LD_ADDR_VAR 0 3
7538: PUSH
7539: LD_VAR 0 3
7543: PUSH
7544: LD_LOC 5
7548: ADD
7549: ST_TO_ADDR
// end ; if difficulty < 2 then
7550: LD_OWVAR 67
7554: PUSH
7555: LD_INT 2
7557: LESS
7558: IFFALSE 7604
// begin av = CreateVehicle ;
7560: LD_ADDR_LOC 5
7564: PUSH
7565: CALL_OW 45
7569: ST_TO_ADDR
// PlaceHumanInUnit ( lpom [ 6 ] , av ) ;
7570: LD_VAR 0 4
7574: PUSH
7575: LD_INT 6
7577: ARRAY
7578: PPUSH
7579: LD_LOC 5
7583: PPUSH
7584: CALL_OW 52
// pom = pom ^ av ;
7588: LD_ADDR_VAR 0 3
7592: PUSH
7593: LD_VAR 0 3
7597: PUSH
7598: LD_LOC 5
7602: ADD
7603: ST_TO_ADDR
// end ; RUSI_ENTER_LIST = pom ;
7604: LD_ADDR_EXP 32
7608: PUSH
7609: LD_VAR 0 3
7613: ST_TO_ADDR
// end ;
7614: LD_VAR 0 2
7618: RET
// function get_sex ; begin
7619: LD_INT 0
7621: PPUSH
// if Prob ( 20 ) then
7622: LD_INT 20
7624: PPUSH
7625: CALL_OW 13
7629: IFFALSE 7641
// result = sex_female else
7631: LD_ADDR_VAR 0 1
7635: PUSH
7636: LD_INT 2
7638: ST_TO_ADDR
7639: GO 7649
// result = sex_male ;
7641: LD_ADDR_VAR 0 1
7645: PUSH
7646: LD_INT 1
7648: ST_TO_ADDR
// end ;
7649: LD_VAR 0 1
7653: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
7654: LD_INT 0
7656: PPUSH
7657: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_VAR 0 2
7667: PPUSH
7668: LD_VAR 0 3
7672: PPUSH
7673: CALL_OW 380
// hc_name := name ;
7677: LD_ADDR_OWVAR 26
7681: PUSH
7682: LD_VAR 0 4
7686: ST_TO_ADDR
// pom = CreateHuman ;
7687: LD_ADDR_VAR 0 6
7691: PUSH
7692: CALL_OW 44
7696: ST_TO_ADDR
// result := pom ;
7697: LD_ADDR_VAR 0 5
7701: PUSH
7702: LD_VAR 0 6
7706: ST_TO_ADDR
// end ;
7707: LD_VAR 0 5
7711: RET
// export function vytvor_araby ; begin
7712: LD_INT 0
7714: PPUSH
// uc_nation = nation_arabian ;
7715: LD_ADDR_OWVAR 21
7719: PUSH
7720: LD_INT 2
7722: ST_TO_ADDR
// uc_side = Arabi ;
7723: LD_ADDR_OWVAR 20
7727: PUSH
7728: LD_EXP 4
7732: ST_TO_ADDR
// diet = nacti_osobu ( Dietrich ) ;
7733: LD_ADDR_EXP 56
7737: PUSH
7738: LD_STRING Dietrich
7740: PPUSH
7741: CALL 7927 0 1
7745: ST_TO_ADDR
// SetSide ( diet , Arabi ) ;
7746: LD_EXP 56
7750: PPUSH
7751: LD_EXP 4
7755: PPUSH
7756: CALL_OW 235
// PlaceUnitXY ( diet , 76 , 19 , false ) ;
7760: LD_EXP 56
7764: PPUSH
7765: LD_INT 76
7767: PPUSH
7768: LD_INT 19
7770: PPUSH
7771: LD_INT 0
7773: PPUSH
7774: CALL_OW 48
// A2 = get_human ( sex_male , class_soldier , levely_arabi [ difficulty ] ,  ) ;
7778: LD_ADDR_EXP 57
7782: PUSH
7783: LD_INT 1
7785: PPUSH
7786: LD_INT 1
7788: PPUSH
7789: LD_EXP 39
7793: PUSH
7794: LD_OWVAR 67
7798: ARRAY
7799: PPUSH
7800: LD_STRING 
7802: PPUSH
7803: CALL 7654 0 4
7807: ST_TO_ADDR
// PlaceUnitXY ( A2 , 74 , 22 , false ) ;
7808: LD_EXP 57
7812: PPUSH
7813: LD_INT 74
7815: PPUSH
7816: LD_INT 22
7818: PPUSH
7819: LD_INT 0
7821: PPUSH
7822: CALL_OW 48
// A3 = get_human ( sex_male , class_engineer , levely_arabi [ difficulty ] ,  ) ;
7826: LD_ADDR_EXP 58
7830: PUSH
7831: LD_INT 1
7833: PPUSH
7834: LD_INT 2
7836: PPUSH
7837: LD_EXP 39
7841: PUSH
7842: LD_OWVAR 67
7846: ARRAY
7847: PPUSH
7848: LD_STRING 
7850: PPUSH
7851: CALL 7654 0 4
7855: ST_TO_ADDR
// PlaceUnitXY ( A3 , 74 , 21 , false ) ;
7856: LD_EXP 58
7860: PPUSH
7861: LD_INT 74
7863: PPUSH
7864: LD_INT 21
7866: PPUSH
7867: LD_INT 0
7869: PPUSH
7870: CALL_OW 48
// A4 = get_human ( sex_male , class_soldier , levely_arabi [ difficulty ] ,  ) ;
7874: LD_ADDR_EXP 59
7878: PUSH
7879: LD_INT 1
7881: PPUSH
7882: LD_INT 1
7884: PPUSH
7885: LD_EXP 39
7889: PUSH
7890: LD_OWVAR 67
7894: ARRAY
7895: PPUSH
7896: LD_STRING 
7898: PPUSH
7899: CALL 7654 0 4
7903: ST_TO_ADDR
// PlaceUnitXY ( A4 , 75 , 22 , false ) ;
7904: LD_EXP 59
7908: PPUSH
7909: LD_INT 75
7911: PPUSH
7912: LD_INT 22
7914: PPUSH
7915: LD_INT 0
7917: PPUSH
7918: CALL_OW 48
// end ;
7922: LD_VAR 0 1
7926: RET
// export function nacti_osobu ( ident ) ; begin
7927: LD_INT 0
7929: PPUSH
// if CheckCharacterSet ( ident ) then
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 29
7939: IFFALSE 7958
// result := CreateCharacter ( ident ) else
7941: LD_ADDR_VAR 0 2
7945: PUSH
7946: LD_VAR 0 1
7950: PPUSH
7951: CALL_OW 34
7955: ST_TO_ADDR
7956: GO 7966
// result := 0 ;
7958: LD_ADDR_VAR 0 2
7962: PUSH
7963: LD_INT 0
7965: ST_TO_ADDR
// end ;
7966: LD_VAR 0 2
7970: RET
// export function vytvor_amiky ; begin
7971: LD_INT 0
7973: PPUSH
// uc_nation = nation_american ;
7974: LD_ADDR_OWVAR 21
7978: PUSH
7979: LD_INT 1
7981: ST_TO_ADDR
// uc_side = Amici ;
7982: LD_ADDR_OWVAR 20
7986: PUSH
7987: LD_EXP 2
7991: ST_TO_ADDR
// Joan = nacti_osobu ( Joan ) ;
7992: LD_ADDR_EXP 62
7996: PUSH
7997: LD_STRING Joan
7999: PPUSH
8000: CALL 7927 0 1
8004: ST_TO_ADDR
// SetClass ( Joan , class_scientistic ) ;
8005: LD_EXP 62
8009: PPUSH
8010: LD_INT 4
8012: PPUSH
8013: CALL_OW 336
// SetSide ( Joan , Amici ) ;
8017: LD_EXP 62
8021: PPUSH
8022: LD_EXP 2
8026: PPUSH
8027: CALL_OW 235
// JMM = nacti_osobu ( MacMillan ) ;
8031: LD_ADDR_EXP 61
8035: PUSH
8036: LD_STRING MacMillan
8038: PPUSH
8039: CALL 7927 0 1
8043: ST_TO_ADDR
// SetSide ( JMM , Amici ) ;
8044: LD_EXP 61
8048: PPUSH
8049: LD_EXP 2
8053: PPUSH
8054: CALL_OW 235
// SetClass ( JMM , class_soldier ) ;
8058: LD_EXP 61
8062: PPUSH
8063: LD_INT 1
8065: PPUSH
8066: CALL_OW 336
// PlaceUnitXY ( Joan , 111 , 41 , false ) ;
8070: LD_EXP 62
8074: PPUSH
8075: LD_INT 111
8077: PPUSH
8078: LD_INT 41
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 48
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] , Karin Horak ) ;
8088: LD_ADDR_LOC 6
8092: PUSH
8093: LD_INT 2
8095: PPUSH
8096: LD_INT 4
8098: PPUSH
8099: LD_EXP 42
8103: PUSH
8104: LD_OWVAR 67
8108: ARRAY
8109: PPUSH
8110: LD_STRING Karin Horak
8112: PPUSH
8113: CALL 7654 0 4
8117: ST_TO_ADDR
// PlaceUnitXY ( ah , 107 , 30 , false ) ;
8118: LD_LOC 6
8122: PPUSH
8123: LD_INT 107
8125: PPUSH
8126: LD_INT 30
8128: PPUSH
8129: LD_INT 0
8131: PPUSH
8132: CALL_OW 48
// VEDCI1 = [ ah ] ;
8136: LD_ADDR_EXP 63
8140: PUSH
8141: LD_LOC 6
8145: PUSH
8146: EMPTY
8147: LIST
8148: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8149: LD_ADDR_LOC 6
8153: PUSH
8154: CALL 7619 0 0
8158: PPUSH
8159: LD_INT 4
8161: PPUSH
8162: LD_EXP 42
8166: PUSH
8167: LD_OWVAR 67
8171: ARRAY
8172: PPUSH
8173: LD_STRING 
8175: PPUSH
8176: CALL 7654 0 4
8180: ST_TO_ADDR
// PlaceUnitXY ( ah , 110 , 32 , false ) ;
8181: LD_LOC 6
8185: PPUSH
8186: LD_INT 110
8188: PPUSH
8189: LD_INT 32
8191: PPUSH
8192: LD_INT 0
8194: PPUSH
8195: CALL_OW 48
// VEDCI1 = VEDCI1 ^ ah ;
8199: LD_ADDR_EXP 63
8203: PUSH
8204: LD_EXP 63
8208: PUSH
8209: LD_LOC 6
8213: ADD
8214: ST_TO_ADDR
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8215: LD_ADDR_LOC 6
8219: PUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 4
8225: PPUSH
8226: LD_EXP 42
8230: PUSH
8231: LD_OWVAR 67
8235: ARRAY
8236: PPUSH
8237: LD_STRING 
8239: PPUSH
8240: CALL 7654 0 4
8244: ST_TO_ADDR
// PlaceUnitXY ( ah , 113 , 40 , false ) ;
8245: LD_LOC 6
8249: PPUSH
8250: LD_INT 113
8252: PPUSH
8253: LD_INT 40
8255: PPUSH
8256: LD_INT 0
8258: PPUSH
8259: CALL_OW 48
// VEDCI2 = [ ah ] ;
8263: LD_ADDR_EXP 64
8267: PUSH
8268: LD_LOC 6
8272: PUSH
8273: EMPTY
8274: LIST
8275: ST_TO_ADDR
// ah = get_human ( sex_female , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8276: LD_ADDR_LOC 6
8280: PUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 4
8286: PPUSH
8287: LD_EXP 42
8291: PUSH
8292: LD_OWVAR 67
8296: ARRAY
8297: PPUSH
8298: LD_STRING 
8300: PPUSH
8301: CALL 7654 0 4
8305: ST_TO_ADDR
// PlaceUnitXY ( ah , 112 , 40 , false ) ;
8306: LD_LOC 6
8310: PPUSH
8311: LD_INT 112
8313: PPUSH
8314: LD_INT 40
8316: PPUSH
8317: LD_INT 0
8319: PPUSH
8320: CALL_OW 48
// VEDCI2 = VEDCI2 ^ ah ;
8324: LD_ADDR_EXP 64
8328: PUSH
8329: LD_EXP 64
8333: PUSH
8334: LD_LOC 6
8338: ADD
8339: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8340: LD_ADDR_LOC 6
8344: PUSH
8345: CALL 7619 0 0
8349: PPUSH
8350: LD_INT 4
8352: PPUSH
8353: LD_EXP 42
8357: PUSH
8358: LD_OWVAR 67
8362: ARRAY
8363: PPUSH
8364: LD_STRING 
8366: PPUSH
8367: CALL 7654 0 4
8371: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 43 , false ) ;
8372: LD_LOC 6
8376: PPUSH
8377: LD_INT 106
8379: PPUSH
8380: LD_INT 43
8382: PPUSH
8383: LD_INT 0
8385: PPUSH
8386: CALL_OW 48
// VEDCI3 = [ ah ] ;
8390: LD_ADDR_EXP 65
8394: PUSH
8395: LD_LOC 6
8399: PUSH
8400: EMPTY
8401: LIST
8402: ST_TO_ADDR
// ah = get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
8403: LD_ADDR_LOC 6
8407: PUSH
8408: CALL 7619 0 0
8412: PPUSH
8413: LD_INT 4
8415: PPUSH
8416: LD_EXP 42
8420: PUSH
8421: LD_OWVAR 67
8425: ARRAY
8426: PPUSH
8427: LD_STRING 
8429: PPUSH
8430: CALL 7654 0 4
8434: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 44 , false ) ;
8435: LD_LOC 6
8439: PPUSH
8440: LD_INT 106
8442: PPUSH
8443: LD_INT 44
8445: PPUSH
8446: LD_INT 0
8448: PPUSH
8449: CALL_OW 48
// VEDCI3 = VEDCI3 ^ ah ;
8453: LD_ADDR_EXP 65
8457: PUSH
8458: LD_EXP 65
8462: PUSH
8463: LD_LOC 6
8467: ADD
8468: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] + 1 , David Love ) ;
8469: LD_ADDR_LOC 6
8473: PUSH
8474: CALL 7619 0 0
8478: PPUSH
8479: LD_INT 3
8481: PPUSH
8482: LD_EXP 42
8486: PUSH
8487: LD_OWVAR 67
8491: ARRAY
8492: PUSH
8493: LD_INT 1
8495: PLUS
8496: PPUSH
8497: LD_STRING David Love
8499: PPUSH
8500: CALL 7654 0 4
8504: ST_TO_ADDR
// PlaceUnitXY ( ah , 105 , 29 , false ) ;
8505: LD_LOC 6
8509: PPUSH
8510: LD_INT 105
8512: PPUSH
8513: LD_INT 29
8515: PPUSH
8516: LD_INT 0
8518: PPUSH
8519: CALL_OW 48
// Am_mech = ah ;
8523: LD_ADDR_EXP 68
8527: PUSH
8528: LD_LOC 6
8532: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] + 1 ,  ) ;
8533: LD_ADDR_LOC 6
8537: PUSH
8538: CALL 7619 0 0
8542: PPUSH
8543: LD_INT 3
8545: PPUSH
8546: LD_EXP 42
8550: PUSH
8551: LD_OWVAR 67
8555: ARRAY
8556: PUSH
8557: LD_INT 1
8559: PLUS
8560: PPUSH
8561: LD_STRING 
8563: PPUSH
8564: CALL 7654 0 4
8568: ST_TO_ADDR
// PlaceUnitXY ( ah , 105 , 30 , false ) ;
8569: LD_LOC 6
8573: PPUSH
8574: LD_INT 105
8576: PPUSH
8577: LD_INT 30
8579: PPUSH
8580: LD_INT 0
8582: PPUSH
8583: CALL_OW 48
// Am_mech = Am_mech ^ ah ;
8587: LD_ADDR_EXP 68
8591: PUSH
8592: LD_EXP 68
8596: PUSH
8597: LD_LOC 6
8601: ADD
8602: ST_TO_ADDR
// prepare_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
8603: CALL 7619 0 0
8607: PPUSH
8608: LD_INT 3
8610: PPUSH
8611: LD_EXP 42
8615: PUSH
8616: LD_OWVAR 67
8620: ARRAY
8621: PPUSH
8622: LD_STRING 
8624: PPUSH
8625: CALL 8874 0 4
// SetSkill ( ah , skill_combat , 6 ) ;
8629: LD_LOC 6
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: LD_INT 6
8639: PPUSH
8640: CALL_OW 237
// ah = CreateHuman ;
8644: LD_ADDR_LOC 6
8648: PUSH
8649: CALL_OW 44
8653: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 39 , false ) ;
8654: LD_LOC 6
8658: PPUSH
8659: LD_INT 106
8661: PPUSH
8662: LD_INT 39
8664: PPUSH
8665: LD_INT 0
8667: PPUSH
8668: CALL_OW 48
// Am_vyr = ah ;
8672: LD_ADDR_EXP 69
8676: PUSH
8677: LD_LOC 6
8681: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , levely_amici [ difficulty ] ,  ) ;
8682: LD_ADDR_LOC 6
8686: PUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 1
8692: PPUSH
8693: LD_EXP 42
8697: PUSH
8698: LD_OWVAR 67
8702: ARRAY
8703: PPUSH
8704: LD_STRING 
8706: PPUSH
8707: CALL 7654 0 4
8711: ST_TO_ADDR
// PlaceUnitXY ( ah , 104 , 39 , false ) ;
8712: LD_LOC 6
8716: PPUSH
8717: LD_INT 104
8719: PPUSH
8720: LD_INT 39
8722: PPUSH
8723: LD_INT 0
8725: PPUSH
8726: CALL_OW 48
// Am_sol = [ ah ] ;
8730: LD_ADDR_EXP 67
8734: PUSH
8735: LD_LOC 6
8739: PUSH
8740: EMPTY
8741: LIST
8742: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , levely_amici [ difficulty ] ,  ) ;
8743: LD_ADDR_LOC 6
8747: PUSH
8748: LD_INT 1
8750: PPUSH
8751: LD_INT 1
8753: PPUSH
8754: LD_EXP 42
8758: PUSH
8759: LD_OWVAR 67
8763: ARRAY
8764: PPUSH
8765: LD_STRING 
8767: PPUSH
8768: CALL 7654 0 4
8772: ST_TO_ADDR
// PlaceUnitXY ( ah , 102 , 44 , false ) ;
8773: LD_LOC 6
8777: PPUSH
8778: LD_INT 102
8780: PPUSH
8781: LD_INT 44
8783: PPUSH
8784: LD_INT 0
8786: PPUSH
8787: CALL_OW 48
// Am_sol = Am_sol ^ ah ;
8791: LD_ADDR_EXP 67
8795: PUSH
8796: LD_EXP 67
8800: PUSH
8801: LD_LOC 6
8805: ADD
8806: ST_TO_ADDR
// ah = get_human ( sex_male , class_sniper , levely_amici [ difficulty ] - 2 ,  ) ;
8807: LD_ADDR_LOC 6
8811: PUSH
8812: LD_INT 1
8814: PPUSH
8815: LD_INT 5
8817: PPUSH
8818: LD_EXP 42
8822: PUSH
8823: LD_OWVAR 67
8827: ARRAY
8828: PUSH
8829: LD_INT 2
8831: MINUS
8832: PPUSH
8833: LD_STRING 
8835: PPUSH
8836: CALL 7654 0 4
8840: ST_TO_ADDR
// PlaceUnitXY ( ah , 98 , 43 , false ) ;
8841: LD_LOC 6
8845: PPUSH
8846: LD_INT 98
8848: PPUSH
8849: LD_INT 43
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 48
// Am_snipe = ah ;
8859: LD_ADDR_EXP 70
8863: PUSH
8864: LD_LOC 6
8868: ST_TO_ADDR
// end ;
8869: LD_VAR 0 1
8873: RET
// function prepare_human ( sex , clas , level , name ) ; begin
8874: LD_INT 0
8876: PPUSH
// PrepareHuman ( sex , clas , level ) ;
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_VAR 0 3
8891: PPUSH
8892: CALL_OW 380
// hc_name := name ;
8896: LD_ADDR_OWVAR 26
8900: PUSH
8901: LD_VAR 0 4
8905: ST_TO_ADDR
// end ;
8906: LD_VAR 0 5
8910: RET
// export function create_first_utok ; var pom ; begin
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
// pom = [ ] ;
8915: LD_ADDR_VAR 0 2
8919: PUSH
8920: EMPTY
8921: ST_TO_ADDR
// uc_nation = nation_american ;
8922: LD_ADDR_OWVAR 21
8926: PUSH
8927: LD_INT 1
8929: ST_TO_ADDR
// uc_side = Amici2 ;
8930: LD_ADDR_OWVAR 20
8934: PUSH
8935: LD_EXP 3
8939: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: CALL 7619 0 0
8949: PPUSH
8950: LD_INT 1
8952: PPUSH
8953: LD_EXP 42
8957: PUSH
8958: LD_OWVAR 67
8962: ARRAY
8963: PPUSH
8964: LD_STRING 
8966: PPUSH
8967: CALL 7654 0 4
8971: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
8972: LD_ADDR_VAR 0 2
8976: PUSH
8977: LD_VAR 0 2
8981: PUSH
8982: CALL 7619 0 0
8986: PPUSH
8987: LD_INT 1
8989: PPUSH
8990: LD_EXP 42
8994: PUSH
8995: LD_OWVAR 67
8999: ARRAY
9000: PPUSH
9001: LD_STRING 
9003: PPUSH
9004: CALL 7654 0 4
9008: ADD
9009: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9010: LD_ADDR_VAR 0 2
9014: PUSH
9015: LD_VAR 0 2
9019: PUSH
9020: CALL 7619 0 0
9024: PPUSH
9025: LD_INT 1
9027: PPUSH
9028: LD_EXP 42
9032: PUSH
9033: LD_OWVAR 67
9037: ARRAY
9038: PPUSH
9039: LD_STRING 
9041: PPUSH
9042: CALL 7654 0 4
9046: ADD
9047: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9048: LD_ADDR_LOC 6
9052: PUSH
9053: CALL 7619 0 0
9057: PPUSH
9058: LD_INT 3
9060: PPUSH
9061: LD_EXP 42
9065: PUSH
9066: LD_OWVAR 67
9070: ARRAY
9071: PUSH
9072: LD_INT 3
9074: MINUS
9075: PPUSH
9076: LD_STRING 
9078: PPUSH
9079: CALL 7654 0 4
9083: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9084: LD_ADDR_OWVAR 37
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// vc_control = control_manual ;
9092: LD_ADDR_OWVAR 38
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// vc_engine = engine_combustion ;
9100: LD_ADDR_OWVAR 39
9104: PUSH
9105: LD_INT 1
9107: ST_TO_ADDR
// vc_weapon = us_double_gun ;
9108: LD_ADDR_OWVAR 40
9112: PUSH
9113: LD_INT 5
9115: ST_TO_ADDR
// av = CreateVehicle ;
9116: LD_ADDR_LOC 5
9120: PUSH
9121: CALL_OW 45
9125: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9126: LD_LOC 6
9130: PPUSH
9131: LD_LOC 5
9135: PPUSH
9136: CALL_OW 52
// pom = pom ^ av ;
9140: LD_ADDR_VAR 0 2
9144: PUSH
9145: LD_VAR 0 2
9149: PUSH
9150: LD_LOC 5
9154: ADD
9155: ST_TO_ADDR
// AM_UTOK_1_LIST = pom ;
9156: LD_ADDR_EXP 33
9160: PUSH
9161: LD_VAR 0 2
9165: ST_TO_ADDR
// end ;
9166: LD_VAR 0 1
9170: RET
// export function create_second_utok ; var pom ; begin
9171: LD_INT 0
9173: PPUSH
9174: PPUSH
// pom = [ ] ;
9175: LD_ADDR_VAR 0 2
9179: PUSH
9180: EMPTY
9181: ST_TO_ADDR
// uc_nation = nation_american ;
9182: LD_ADDR_OWVAR 21
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// uc_side = Amici2 ;
9190: LD_ADDR_OWVAR 20
9194: PUSH
9195: LD_EXP 3
9199: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9200: LD_ADDR_VAR 0 2
9204: PUSH
9205: CALL 7619 0 0
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_EXP 42
9217: PUSH
9218: LD_OWVAR 67
9222: ARRAY
9223: PPUSH
9224: LD_STRING 
9226: PPUSH
9227: CALL 7654 0 4
9231: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9232: LD_ADDR_VAR 0 2
9236: PUSH
9237: LD_VAR 0 2
9241: PUSH
9242: CALL 7619 0 0
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: LD_EXP 42
9254: PUSH
9255: LD_OWVAR 67
9259: ARRAY
9260: PPUSH
9261: LD_STRING 
9263: PPUSH
9264: CALL 7654 0 4
9268: ADD
9269: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9270: LD_ADDR_LOC 6
9274: PUSH
9275: CALL 7619 0 0
9279: PPUSH
9280: LD_INT 3
9282: PPUSH
9283: LD_EXP 42
9287: PUSH
9288: LD_OWVAR 67
9292: ARRAY
9293: PUSH
9294: LD_INT 3
9296: MINUS
9297: PPUSH
9298: LD_STRING 
9300: PPUSH
9301: CALL 7654 0 4
9305: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9306: LD_ADDR_OWVAR 37
9310: PUSH
9311: LD_INT 3
9313: ST_TO_ADDR
// vc_control = control_manual ;
9314: LD_ADDR_OWVAR 38
9318: PUSH
9319: LD_INT 1
9321: ST_TO_ADDR
// vc_engine = engine_combustion ;
9322: LD_ADDR_OWVAR 39
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// vc_weapon = us_double_gun ;
9330: LD_ADDR_OWVAR 40
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
// av = CreateVehicle ;
9338: LD_ADDR_LOC 5
9342: PUSH
9343: CALL_OW 45
9347: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9348: LD_LOC 6
9352: PPUSH
9353: LD_LOC 5
9357: PPUSH
9358: CALL_OW 52
// pom = pom ^ av ;
9362: LD_ADDR_VAR 0 2
9366: PUSH
9367: LD_VAR 0 2
9371: PUSH
9372: LD_LOC 5
9376: ADD
9377: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9378: LD_ADDR_LOC 6
9382: PUSH
9383: CALL 7619 0 0
9387: PPUSH
9388: LD_INT 3
9390: PPUSH
9391: LD_EXP 42
9395: PUSH
9396: LD_OWVAR 67
9400: ARRAY
9401: PUSH
9402: LD_INT 3
9404: MINUS
9405: PPUSH
9406: LD_STRING 
9408: PPUSH
9409: CALL 7654 0 4
9413: ST_TO_ADDR
// av = CreateVehicle ;
9414: LD_ADDR_LOC 5
9418: PUSH
9419: CALL_OW 45
9423: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9424: LD_LOC 6
9428: PPUSH
9429: LD_LOC 5
9433: PPUSH
9434: CALL_OW 52
// pom = pom ^ av ;
9438: LD_ADDR_VAR 0 2
9442: PUSH
9443: LD_VAR 0 2
9447: PUSH
9448: LD_LOC 5
9452: ADD
9453: ST_TO_ADDR
// if difficulty > 2 then
9454: LD_OWVAR 67
9458: PUSH
9459: LD_INT 2
9461: GREATER
9462: IFFALSE 9572
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 3 ,  ) ;
9464: LD_ADDR_LOC 6
9468: PUSH
9469: CALL 7619 0 0
9473: PPUSH
9474: LD_INT 3
9476: PPUSH
9477: LD_EXP 42
9481: PUSH
9482: LD_OWVAR 67
9486: ARRAY
9487: PUSH
9488: LD_INT 3
9490: MINUS
9491: PPUSH
9492: LD_STRING 
9494: PPUSH
9495: CALL 7654 0 4
9499: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9500: LD_ADDR_OWVAR 37
9504: PUSH
9505: LD_INT 3
9507: ST_TO_ADDR
// vc_control = control_manual ;
9508: LD_ADDR_OWVAR 38
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// vc_engine = engine_solar ;
9516: LD_ADDR_OWVAR 39
9520: PUSH
9521: LD_INT 2
9523: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
9524: LD_ADDR_OWVAR 40
9528: PUSH
9529: LD_INT 4
9531: ST_TO_ADDR
// av = CreateVehicle ;
9532: LD_ADDR_LOC 5
9536: PUSH
9537: CALL_OW 45
9541: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9542: LD_LOC 6
9546: PPUSH
9547: LD_LOC 5
9551: PPUSH
9552: CALL_OW 52
// pom = pom ^ av ;
9556: LD_ADDR_VAR 0 2
9560: PUSH
9561: LD_VAR 0 2
9565: PUSH
9566: LD_LOC 5
9570: ADD
9571: ST_TO_ADDR
// end ; AM_UTOK_2_LIST = pom ;
9572: LD_ADDR_EXP 34
9576: PUSH
9577: LD_VAR 0 2
9581: ST_TO_ADDR
// end ;
9582: LD_VAR 0 1
9586: RET
// export function create_third_utok ; var pom ; begin
9587: LD_INT 0
9589: PPUSH
9590: PPUSH
// pom = [ ] ;
9591: LD_ADDR_VAR 0 2
9595: PUSH
9596: EMPTY
9597: ST_TO_ADDR
// uc_nation = nation_american ;
9598: LD_ADDR_OWVAR 21
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// uc_side = Amici2 ;
9606: LD_ADDR_OWVAR 20
9610: PUSH
9611: LD_EXP 3
9615: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: CALL 7619 0 0
9625: PPUSH
9626: LD_INT 1
9628: PPUSH
9629: LD_EXP 42
9633: PUSH
9634: LD_OWVAR 67
9638: ARRAY
9639: PPUSH
9640: LD_STRING 
9642: PPUSH
9643: CALL 7654 0 4
9647: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_sniper , levely_amici [ difficulty ] ,  ) ;
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_VAR 0 2
9657: PUSH
9658: CALL 7619 0 0
9662: PPUSH
9663: LD_INT 5
9665: PPUSH
9666: LD_EXP 42
9670: PUSH
9671: LD_OWVAR 67
9675: ARRAY
9676: PPUSH
9677: LD_STRING 
9679: PPUSH
9680: CALL 7654 0 4
9684: ADD
9685: ST_TO_ADDR
// if difficulty > 2 then
9686: LD_OWVAR 67
9690: PUSH
9691: LD_INT 2
9693: GREATER
9694: IFFALSE 9734
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9696: LD_ADDR_VAR 0 2
9700: PUSH
9701: LD_VAR 0 2
9705: PUSH
9706: CALL 7619 0 0
9710: PPUSH
9711: LD_INT 1
9713: PPUSH
9714: LD_EXP 42
9718: PUSH
9719: LD_OWVAR 67
9723: ARRAY
9724: PPUSH
9725: LD_STRING 
9727: PPUSH
9728: CALL 7654 0 4
9732: ADD
9733: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9734: LD_ADDR_LOC 6
9738: PUSH
9739: CALL 7619 0 0
9743: PPUSH
9744: LD_INT 3
9746: PPUSH
9747: LD_EXP 42
9751: PUSH
9752: LD_OWVAR 67
9756: ARRAY
9757: PUSH
9758: LD_INT 2
9760: MINUS
9761: PPUSH
9762: LD_STRING 
9764: PPUSH
9765: CALL 7654 0 4
9769: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
9770: LD_ADDR_OWVAR 37
9774: PUSH
9775: LD_INT 3
9777: ST_TO_ADDR
// vc_control = control_manual ;
9778: LD_ADDR_OWVAR 38
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// vc_engine = engine_combustion ;
9786: LD_ADDR_OWVAR 39
9790: PUSH
9791: LD_INT 1
9793: ST_TO_ADDR
// vc_weapon = us_double_gun ;
9794: LD_ADDR_OWVAR 40
9798: PUSH
9799: LD_INT 5
9801: ST_TO_ADDR
// av = CreateVehicle ;
9802: LD_ADDR_LOC 5
9806: PUSH
9807: CALL_OW 45
9811: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9812: LD_LOC 6
9816: PPUSH
9817: LD_LOC 5
9821: PPUSH
9822: CALL_OW 52
// pom = pom ^ av ;
9826: LD_ADDR_VAR 0 2
9830: PUSH
9831: LD_VAR 0 2
9835: PUSH
9836: LD_LOC 5
9840: ADD
9841: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
9842: LD_ADDR_LOC 6
9846: PUSH
9847: CALL 7619 0 0
9851: PPUSH
9852: LD_INT 3
9854: PPUSH
9855: LD_EXP 42
9859: PUSH
9860: LD_OWVAR 67
9864: ARRAY
9865: PUSH
9866: LD_INT 2
9868: MINUS
9869: PPUSH
9870: LD_STRING 
9872: PPUSH
9873: CALL 7654 0 4
9877: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
9878: LD_ADDR_OWVAR 37
9882: PUSH
9883: LD_INT 4
9885: ST_TO_ADDR
// vc_weapon = us_heavy_gun ;
9886: LD_ADDR_OWVAR 40
9890: PUSH
9891: LD_INT 6
9893: ST_TO_ADDR
// av = CreateVehicle ;
9894: LD_ADDR_LOC 5
9898: PUSH
9899: CALL_OW 45
9903: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9904: LD_LOC 6
9908: PPUSH
9909: LD_LOC 5
9913: PPUSH
9914: CALL_OW 52
// pom = pom ^ av ;
9918: LD_ADDR_VAR 0 2
9922: PUSH
9923: LD_VAR 0 2
9927: PUSH
9928: LD_LOC 5
9932: ADD
9933: ST_TO_ADDR
// AM_UTOK_3_LIST = pom ;
9934: LD_ADDR_EXP 35
9938: PUSH
9939: LD_VAR 0 2
9943: ST_TO_ADDR
// end ;
9944: LD_VAR 0 1
9948: RET
// export function create_JMM_revange ; var pom , i ; begin
9949: LD_INT 0
9951: PPUSH
9952: PPUSH
9953: PPUSH
// pom = [ ] ;
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: EMPTY
9960: ST_TO_ADDR
// uc_nation = nation_american ;
9961: LD_ADDR_OWVAR 21
9965: PUSH
9966: LD_INT 1
9968: ST_TO_ADDR
// uc_side = Amici2 ;
9969: LD_ADDR_OWVAR 20
9973: PUSH
9974: LD_EXP 3
9978: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
9979: LD_ADDR_VAR 0 2
9983: PUSH
9984: CALL 7619 0 0
9988: PPUSH
9989: LD_INT 1
9991: PPUSH
9992: LD_EXP 42
9996: PUSH
9997: LD_OWVAR 67
10001: ARRAY
10002: PPUSH
10003: LD_STRING 
10005: PPUSH
10006: CALL 7654 0 4
10010: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_sniper , levely_amici [ difficulty ] ,  ) ;
10011: LD_ADDR_VAR 0 2
10015: PUSH
10016: LD_VAR 0 2
10020: PUSH
10021: CALL 7619 0 0
10025: PPUSH
10026: LD_INT 5
10028: PPUSH
10029: LD_EXP 42
10033: PUSH
10034: LD_OWVAR 67
10038: ARRAY
10039: PPUSH
10040: LD_STRING 
10042: PPUSH
10043: CALL 7654 0 4
10047: ADD
10048: ST_TO_ADDR
// if difficulty > 2 then
10049: LD_OWVAR 67
10053: PUSH
10054: LD_INT 2
10056: GREATER
10057: IFFALSE 10097
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
10059: LD_ADDR_VAR 0 2
10063: PUSH
10064: LD_VAR 0 2
10068: PUSH
10069: CALL 7619 0 0
10073: PPUSH
10074: LD_INT 1
10076: PPUSH
10077: LD_EXP 42
10081: PUSH
10082: LD_OWVAR 67
10086: ARRAY
10087: PPUSH
10088: LD_STRING 
10090: PPUSH
10091: CALL 7654 0 4
10095: ADD
10096: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 2 ,  ) ;
10097: LD_ADDR_LOC 6
10101: PUSH
10102: CALL 7619 0 0
10106: PPUSH
10107: LD_INT 3
10109: PPUSH
10110: LD_EXP 42
10114: PUSH
10115: LD_OWVAR 67
10119: ARRAY
10120: PUSH
10121: LD_INT 2
10123: MINUS
10124: PPUSH
10125: LD_STRING 
10127: PPUSH
10128: CALL 7654 0 4
10132: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
10133: LD_ADDR_OWVAR 37
10137: PUSH
10138: LD_INT 4
10140: ST_TO_ADDR
// vc_weapon = us_heavy_gun ;
10141: LD_ADDR_OWVAR 40
10145: PUSH
10146: LD_INT 6
10148: ST_TO_ADDR
// av = CreateVehicle ;
10149: LD_ADDR_LOC 5
10153: PUSH
10154: CALL_OW 45
10158: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10159: LD_LOC 6
10163: PPUSH
10164: LD_LOC 5
10168: PPUSH
10169: CALL_OW 52
// pom = pom ^ av ;
10173: LD_ADDR_VAR 0 2
10177: PUSH
10178: LD_VAR 0 2
10182: PUSH
10183: LD_LOC 5
10187: ADD
10188: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] - 4 ,  ) ;
10189: LD_ADDR_LOC 6
10193: PUSH
10194: CALL 7619 0 0
10198: PPUSH
10199: LD_INT 3
10201: PPUSH
10202: LD_EXP 42
10206: PUSH
10207: LD_OWVAR 67
10211: ARRAY
10212: PUSH
10213: LD_INT 4
10215: MINUS
10216: PPUSH
10217: LD_STRING 
10219: PPUSH
10220: CALL 7654 0 4
10224: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
10225: LD_ADDR_OWVAR 37
10229: PUSH
10230: LD_INT 3
10232: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10233: LD_ADDR_OWVAR 40
10237: PUSH
10238: LD_INT 4
10240: ST_TO_ADDR
// av = CreateVehicle ;
10241: LD_ADDR_LOC 5
10245: PUSH
10246: CALL_OW 45
10250: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10251: LD_LOC 6
10255: PPUSH
10256: LD_LOC 5
10260: PPUSH
10261: CALL_OW 52
// pom = pom ^ av ;
10265: LD_ADDR_VAR 0 2
10269: PUSH
10270: LD_VAR 0 2
10274: PUSH
10275: LD_LOC 5
10279: ADD
10280: ST_TO_ADDR
// if prob ( 50 ) then
10281: LD_INT 50
10283: PPUSH
10284: CALL_OW 13
10288: IFFALSE 10316
// begin av = CreateVehicle ;
10290: LD_ADDR_LOC 5
10294: PUSH
10295: CALL_OW 45
10299: ST_TO_ADDR
// pom = pom ^ av ;
10300: LD_ADDR_VAR 0 2
10304: PUSH
10305: LD_VAR 0 2
10309: PUSH
10310: LD_LOC 5
10314: ADD
10315: ST_TO_ADDR
// end ; if difficulty > 1 then
10316: LD_OWVAR 67
10320: PUSH
10321: LD_INT 1
10323: GREATER
10324: IFFALSE 10364
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
10326: LD_ADDR_VAR 0 2
10330: PUSH
10331: LD_VAR 0 2
10335: PUSH
10336: CALL 7619 0 0
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: LD_EXP 42
10348: PUSH
10349: LD_OWVAR 67
10353: ARRAY
10354: PPUSH
10355: LD_STRING 
10357: PPUSH
10358: CALL 7654 0 4
10362: ADD
10363: ST_TO_ADDR
// if prob ( 50 ) and difficulty > 1 then
10364: LD_INT 50
10366: PPUSH
10367: CALL_OW 13
10371: PUSH
10372: LD_OWVAR 67
10376: PUSH
10377: LD_INT 1
10379: GREATER
10380: AND
10381: IFFALSE 10451
// for i = 1 to Rand ( 1 , difficulty ) do
10383: LD_ADDR_VAR 0 3
10387: PUSH
10388: DOUBLE
10389: LD_INT 1
10391: DEC
10392: ST_TO_ADDR
10393: LD_INT 1
10395: PPUSH
10396: LD_OWVAR 67
10400: PPUSH
10401: CALL_OW 12
10405: PUSH
10406: FOR_TO
10407: IFFALSE 10449
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
10409: LD_ADDR_VAR 0 2
10413: PUSH
10414: LD_VAR 0 2
10418: PUSH
10419: CALL 7619 0 0
10423: PPUSH
10424: LD_INT 1
10426: PPUSH
10427: LD_EXP 42
10431: PUSH
10432: LD_OWVAR 67
10436: ARRAY
10437: PPUSH
10438: LD_STRING 
10440: PPUSH
10441: CALL 7654 0 4
10445: ADD
10446: ST_TO_ADDR
10447: GO 10406
10449: POP
10450: POP
// result := pom ;
10451: LD_ADDR_VAR 0 1
10455: PUSH
10456: LD_VAR 0 2
10460: ST_TO_ADDR
// end ;
10461: LD_VAR 0 1
10465: RET
// export function create_pre_attack ; var i , pom ; var PC ; begin
10466: LD_INT 0
10468: PPUSH
10469: PPUSH
10470: PPUSH
10471: PPUSH
// pom = [ ] ;
10472: LD_ADDR_VAR 0 3
10476: PUSH
10477: EMPTY
10478: ST_TO_ADDR
// uc_nation = nation_american ;
10479: LD_ADDR_OWVAR 21
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// uc_side = Amici2 ;
10487: LD_ADDR_OWVAR 20
10491: PUSH
10492: LD_EXP 3
10496: ST_TO_ADDR
// PC = counter_utoku ;
10497: LD_ADDR_VAR 0 4
10501: PUSH
10502: LD_EXP 73
10506: ST_TO_ADDR
// for i in Rand ( 1 , 3 ) + difficulty do
10507: LD_ADDR_VAR 0 2
10511: PUSH
10512: LD_INT 1
10514: PPUSH
10515: LD_INT 3
10517: PPUSH
10518: CALL_OW 12
10522: PUSH
10523: LD_OWVAR 67
10527: PLUS
10528: PUSH
10529: FOR_IN
10530: IFFALSE 10590
// begin pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 2 ,  ) ;
10532: LD_ADDR_VAR 0 3
10536: PUSH
10537: LD_VAR 0 3
10541: PUSH
10542: CALL 7619 0 0
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: LD_EXP 42
10554: PUSH
10555: LD_OWVAR 67
10559: ARRAY
10560: PUSH
10561: LD_INT 2
10563: MINUS
10564: PPUSH
10565: LD_STRING 
10567: PPUSH
10568: CALL 7654 0 4
10572: ADD
10573: ST_TO_ADDR
// counter_utoku = counter_utoku + 1 ;
10574: LD_ADDR_EXP 73
10578: PUSH
10579: LD_EXP 73
10583: PUSH
10584: LD_INT 1
10586: PLUS
10587: ST_TO_ADDR
// end ;
10588: GO 10529
10590: POP
10591: POP
// PC = PC - 1 ;
10592: LD_ADDR_VAR 0 4
10596: PUSH
10597: LD_VAR 0 4
10601: PUSH
10602: LD_INT 1
10604: MINUS
10605: ST_TO_ADDR
// if counter_utoku > 10 then
10606: LD_EXP 73
10610: PUSH
10611: LD_INT 10
10613: GREATER
10614: IFFALSE 10719
// begin vc_chassis = us_medium_tracked ;
10616: LD_ADDR_OWVAR 37
10620: PUSH
10621: LD_INT 3
10623: ST_TO_ADDR
// vc_engine = engine_combustion ;
10624: LD_ADDR_OWVAR 39
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// vc_control = control_computer ;
10632: LD_ADDR_OWVAR 38
10636: PUSH
10637: LD_INT 3
10639: ST_TO_ADDR
// vc_weapon = [ us_light_gun , us_gatling_gun , us_double_gun , us_machine_gun ] [ Rand ( 1 , 4 ) ] ;
10640: LD_ADDR_OWVAR 40
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: LD_INT 4
10650: PUSH
10651: LD_INT 5
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 1
10665: PPUSH
10666: LD_INT 4
10668: PPUSH
10669: CALL_OW 12
10673: ARRAY
10674: ST_TO_ADDR
// pom = pom ^ av ;
10675: LD_ADDR_VAR 0 3
10679: PUSH
10680: LD_VAR 0 3
10684: PUSH
10685: LD_LOC 5
10689: ADD
10690: ST_TO_ADDR
// counter_utoku = counter_utoku - 5 ;
10691: LD_ADDR_EXP 73
10695: PUSH
10696: LD_EXP 73
10700: PUSH
10701: LD_INT 5
10703: MINUS
10704: ST_TO_ADDR
// PC = PC - 10 ;
10705: LD_ADDR_VAR 0 4
10709: PUSH
10710: LD_VAR 0 4
10714: PUSH
10715: LD_INT 10
10717: MINUS
10718: ST_TO_ADDR
// end ; if counter_utoku > 5 then
10719: LD_EXP 73
10723: PUSH
10724: LD_INT 5
10726: GREATER
10727: IFFALSE 10799
// begin pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] + 1 ,  ) ;
10729: LD_ADDR_VAR 0 3
10733: PUSH
10734: LD_VAR 0 3
10738: PUSH
10739: CALL 7619 0 0
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: LD_EXP 42
10751: PUSH
10752: LD_OWVAR 67
10756: ARRAY
10757: PUSH
10758: LD_INT 1
10760: PLUS
10761: PPUSH
10762: LD_STRING 
10764: PPUSH
10765: CALL 7654 0 4
10769: ADD
10770: ST_TO_ADDR
// counter_utoku = counter_utoku - 1 ;
10771: LD_ADDR_EXP 73
10775: PUSH
10776: LD_EXP 73
10780: PUSH
10781: LD_INT 1
10783: MINUS
10784: ST_TO_ADDR
// PC = PC - 3 ;
10785: LD_ADDR_VAR 0 4
10789: PUSH
10790: LD_VAR 0 4
10794: PUSH
10795: LD_INT 3
10797: MINUS
10798: ST_TO_ADDR
// end ; result := pom ;
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: LD_VAR 0 3
10808: ST_TO_ADDR
// end ;
10809: LD_VAR 0 1
10813: RET
// function nastav_povolani_podle_skilu ( voj ) ; var comb , eng , sci , mech ; var classa ; begin
10814: LD_INT 0
10816: PPUSH
10817: PPUSH
10818: PPUSH
10819: PPUSH
10820: PPUSH
10821: PPUSH
// mech = GetSkill ( voj , skill_mechanical ) ;
10822: LD_ADDR_VAR 0 6
10826: PUSH
10827: LD_VAR 0 1
10831: PPUSH
10832: LD_INT 3
10834: PPUSH
10835: CALL_OW 259
10839: ST_TO_ADDR
// eng = GetSkill ( voj , skill_engineering ) ;
10840: LD_ADDR_VAR 0 4
10844: PUSH
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_INT 2
10852: PPUSH
10853: CALL_OW 259
10857: ST_TO_ADDR
// sci = GetSkill ( voj , skill_scientistic ) ;
10858: LD_ADDR_VAR 0 5
10862: PUSH
10863: LD_VAR 0 1
10867: PPUSH
10868: LD_INT 4
10870: PPUSH
10871: CALL_OW 259
10875: ST_TO_ADDR
// comb = GetSkill ( voj , skill_combat ) ;
10876: LD_ADDR_VAR 0 3
10880: PUSH
10881: LD_VAR 0 1
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: CALL_OW 259
10893: ST_TO_ADDR
// if comb >= eng and comb >= sci and comb >= mech then
10894: LD_VAR 0 3
10898: PUSH
10899: LD_VAR 0 4
10903: GREATEREQUAL
10904: PUSH
10905: LD_VAR 0 3
10909: PUSH
10910: LD_VAR 0 5
10914: GREATEREQUAL
10915: AND
10916: PUSH
10917: LD_VAR 0 3
10921: PUSH
10922: LD_VAR 0 6
10926: GREATEREQUAL
10927: AND
10928: IFFALSE 10940
// classa = class_soldier else
10930: LD_ADDR_VAR 0 7
10934: PUSH
10935: LD_INT 1
10937: ST_TO_ADDR
10938: GO 11086
// if eng >= comb and eng >= mech and eng >= sci then
10940: LD_VAR 0 4
10944: PUSH
10945: LD_VAR 0 3
10949: GREATEREQUAL
10950: PUSH
10951: LD_VAR 0 4
10955: PUSH
10956: LD_VAR 0 6
10960: GREATEREQUAL
10961: AND
10962: PUSH
10963: LD_VAR 0 4
10967: PUSH
10968: LD_VAR 0 5
10972: GREATEREQUAL
10973: AND
10974: IFFALSE 10986
// classa = class_engineer else
10976: LD_ADDR_VAR 0 7
10980: PUSH
10981: LD_INT 2
10983: ST_TO_ADDR
10984: GO 11086
// if sci >= eng and sci >= mech and sci >= comb then
10986: LD_VAR 0 5
10990: PUSH
10991: LD_VAR 0 4
10995: GREATEREQUAL
10996: PUSH
10997: LD_VAR 0 5
11001: PUSH
11002: LD_VAR 0 6
11006: GREATEREQUAL
11007: AND
11008: PUSH
11009: LD_VAR 0 5
11013: PUSH
11014: LD_VAR 0 3
11018: GREATEREQUAL
11019: AND
11020: IFFALSE 11032
// classa = class_scientistic else
11022: LD_ADDR_VAR 0 7
11026: PUSH
11027: LD_INT 4
11029: ST_TO_ADDR
11030: GO 11086
// if mech >= comb and mech >= eng and mech >= sci then
11032: LD_VAR 0 6
11036: PUSH
11037: LD_VAR 0 3
11041: GREATEREQUAL
11042: PUSH
11043: LD_VAR 0 6
11047: PUSH
11048: LD_VAR 0 4
11052: GREATEREQUAL
11053: AND
11054: PUSH
11055: LD_VAR 0 6
11059: PUSH
11060: LD_VAR 0 5
11064: GREATEREQUAL
11065: AND
11066: IFFALSE 11078
// classa = class_mechanic else
11068: LD_ADDR_VAR 0 7
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
11076: GO 11086
// classa = class_soldier ;
11078: LD_ADDR_VAR 0 7
11082: PUSH
11083: LD_INT 1
11085: ST_TO_ADDR
// SetClass ( voj , classa ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: LD_VAR 0 7
11095: PPUSH
11096: CALL_OW 336
// end ; end_of_file
11100: LD_VAR 0 2
11104: RET
// export CHASSIS_FOR_VEHICLE ; export GUN_FOR_VEHICLE ; export pocet_lidi_na_zacatku ; export levely_arabi ; export levely_budovy_arabi ; export levely_budovy_amici ; export levely_amici ; export cas_utoku_amiku ; export max_pocet_aut ; export delay_beden ; export cas_prvniho_utoku ; export cas_na_odchod_vedcu ; export doba_od_utoku_k_uteku_vedcu ; export wait_mcmillanova_pomsta ; export zbran_na_uvod ; export chassis_na_uvod ; export cas_na_opakovani_preattacku ; export masha_l ; export maccepted ; export mhandedover ; export function SET_DIFFICULTY ; begin
11105: LD_INT 0
11107: PPUSH
// GUN_FOR_VEHICLE = [ ru_heavy_gun , ru_gun , ru_gatling_gun ] ;
11108: LD_ADDR_EXP 37
11112: PUSH
11113: LD_INT 46
11115: PUSH
11116: LD_INT 44
11118: PUSH
11119: LD_INT 43
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// CHASSIS_FOR_VEHICLE = [ ru_heavy_tracked , ru_medium_tracked , ru_heavy_wheeled ] ;
11127: LD_ADDR_EXP 36
11131: PUSH
11132: LD_INT 24
11134: PUSH
11135: LD_INT 22
11137: PUSH
11138: LD_INT 23
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: ST_TO_ADDR
// pocet_lidi_na_zacatku = [ 6 , 5 , 4 ] ;
11146: LD_ADDR_EXP 38
11150: PUSH
11151: LD_INT 6
11153: PUSH
11154: LD_INT 5
11156: PUSH
11157: LD_INT 4
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: ST_TO_ADDR
// levely_arabi = [ 6 , 7 , 8 ] ;
11165: LD_ADDR_EXP 39
11169: PUSH
11170: LD_INT 6
11172: PUSH
11173: LD_INT 7
11175: PUSH
11176: LD_INT 8
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: ST_TO_ADDR
// levely_budovy_arabi = [ 7 , 8 , 9 ] ;
11184: LD_ADDR_EXP 40
11188: PUSH
11189: LD_INT 7
11191: PUSH
11192: LD_INT 8
11194: PUSH
11195: LD_INT 9
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: ST_TO_ADDR
// levely_budovy_amici = [ 3 , 5 , 7 ] ;
11203: LD_ADDR_EXP 41
11207: PUSH
11208: LD_INT 3
11210: PUSH
11211: LD_INT 5
11213: PUSH
11214: LD_INT 7
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: ST_TO_ADDR
// levely_amici = [ 7 , 8 , 9 ] ;
11222: LD_ADDR_EXP 42
11226: PUSH
11227: LD_INT 7
11229: PUSH
11230: LD_INT 8
11232: PUSH
11233: LD_INT 9
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// cas_utoku_amiku = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
11241: LD_ADDR_EXP 43
11245: PUSH
11246: LD_INT 10500
11248: PUSH
11249: LD_INT 8400
11251: PUSH
11252: LD_INT 6300
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: ST_TO_ADDR
// max_pocet_aut = [ 3 , 4 , 5 ] ;
11260: LD_ADDR_EXP 44
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: LD_INT 4
11270: PUSH
11271: LD_INT 5
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: ST_TO_ADDR
// delay_beden = [ 0 0$30 , 0 0$50 , 1 1$10 ] ;
11279: LD_ADDR_EXP 45
11283: PUSH
11284: LD_INT 1050
11286: PUSH
11287: LD_INT 1750
11289: PUSH
11290: LD_INT 2450
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// cas_prvniho_utoku = [ 7 7$0 , 6 6$0 , 5 5$0 ] ;
11298: LD_ADDR_EXP 46
11302: PUSH
11303: LD_INT 14700
11305: PUSH
11306: LD_INT 12600
11308: PUSH
11309: LD_INT 10500
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: ST_TO_ADDR
// cas_na_odchod_vedcu = [ 40 40$0 , 28 28$0 , 18 18$0 ] ;
11317: LD_ADDR_EXP 47
11321: PUSH
11322: LD_INT 84000
11324: PUSH
11325: LD_INT 58800
11327: PUSH
11328: LD_INT 37800
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: ST_TO_ADDR
// doba_od_utoku_k_uteku_vedcu = [ 8 8$0 , 6 6$0 , 4 4$0 ] ;
11336: LD_ADDR_EXP 48
11340: PUSH
11341: LD_INT 16800
11343: PUSH
11344: LD_INT 12600
11346: PUSH
11347: LD_INT 8400
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: ST_TO_ADDR
// wait_mcmillanova_pomsta = [ 12 12$0 , 9 9$0 , 6 6$0 ] ;
11355: LD_ADDR_EXP 49
11359: PUSH
11360: LD_INT 25200
11362: PUSH
11363: LD_INT 18900
11365: PUSH
11366: LD_INT 12600
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: ST_TO_ADDR
// zbran_na_uvod = [ ru_heavy_gun , ru_gun , ru_gatling_gun ] ;
11374: LD_ADDR_EXP 50
11378: PUSH
11379: LD_INT 46
11381: PUSH
11382: LD_INT 44
11384: PUSH
11385: LD_INT 43
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: ST_TO_ADDR
// chassis_na_uvod = [ ru_heavy_tracked , ru_medium_tracked , ru_medium_wheeled ] ;
11393: LD_ADDR_EXP 51
11397: PUSH
11398: LD_INT 24
11400: PUSH
11401: LD_INT 22
11403: PUSH
11404: LD_INT 21
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: ST_TO_ADDR
// cas_na_opakovani_preattacku = [ 5 5$0 , 3 3$0 , 2 2$0 ] ;
11412: LD_ADDR_EXP 52
11416: PUSH
11417: LD_INT 10500
11419: PUSH
11420: LD_INT 6300
11422: PUSH
11423: LD_INT 4200
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: ST_TO_ADDR
// end ; end_of_file
11431: LD_VAR 0 1
11435: RET
// export diet ; export A2 ; export A3 ; export A4 ; var Arabi_enter ; var Arabi_opoce ; export Arabi_vztah ; every 0 0$0.1 do var i ;
11436: GO 11438
11438: DISABLE
11439: LD_INT 0
11441: PPUSH
// begin Arabi_enter = [ A1 , A2 , A3 , A4 , diet ] ;
11442: LD_ADDR_LOC 7
11446: PUSH
11447: LD_INT 134
11449: PUSH
11450: LD_EXP 57
11454: PUSH
11455: LD_EXP 58
11459: PUSH
11460: LD_EXP 59
11464: PUSH
11465: LD_EXP 56
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: ST_TO_ADDR
// Arabi_opoce = [ Op1 , Op2 , Op3 , OP_dep ] ;
11477: LD_ADDR_LOC 8
11481: PUSH
11482: LD_INT 139
11484: PUSH
11485: LD_INT 138
11487: PUSH
11488: LD_INT 135
11490: PUSH
11491: LD_INT 184
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: ST_TO_ADDR
// Arabi_vztah = 1 ;
11500: LD_ADDR_EXP 60
11504: PUSH
11505: LD_INT 1
11507: ST_TO_ADDR
// for i in [ 101 , 102 ] do
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_INT 101
11515: PUSH
11516: LD_INT 102
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: FOR_IN
11524: IFFALSE 11533
// disable ( i ) ;
11526: LD_VAR 0 1
11530: DISABLE_MARKED
11531: GO 11523
11533: POP
11534: POP
// ComEnterUnit ( OP_dep , Ar_dep ) ;
11535: LD_INT 184
11537: PPUSH
11538: LD_INT 58
11540: PPUSH
11541: CALL_OW 120
// end ;
11545: PPOPN 1
11547: END
// export function arabi_north_okamzite ; var i ; begin
11548: LD_INT 0
11550: PPUSH
11551: PPUSH
// wait ( 0 0$5 ) ;
11552: LD_INT 175
11554: PPUSH
11555: CALL_OW 67
// for i in Arabi_enter do
11559: LD_ADDR_VAR 0 2
11563: PUSH
11564: LD_LOC 7
11568: PUSH
11569: FOR_IN
11570: IFFALSE 11594
// if IsInUnit ( i ) then
11572: LD_VAR 0 2
11576: PPUSH
11577: CALL_OW 310
11581: IFFALSE 11592
// ComExitBuilding ( i ) ;
11583: LD_VAR 0 2
11587: PPUSH
11588: CALL_OW 122
11592: GO 11569
11594: POP
11595: POP
// AddComMoveXY ( Arabi_enter , 59 , 1 ) ;
11596: LD_LOC 7
11600: PPUSH
11601: LD_INT 59
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 171
// enable ( 101 ) ;
11611: LD_INT 101
11613: ENABLE_MARKED
// for i in Arabi_opoce do
11614: LD_ADDR_VAR 0 2
11618: PUSH
11619: LD_LOC 8
11623: PUSH
11624: FOR_IN
11625: IFFALSE 11649
// if IsInUnit ( i ) then
11627: LD_VAR 0 2
11631: PPUSH
11632: CALL_OW 310
11636: IFFALSE 11647
// ComExitBuilding ( i ) ;
11638: LD_VAR 0 2
11642: PPUSH
11643: CALL_OW 122
11647: GO 11624
11649: POP
11650: POP
// AddComMoveXY ( Arabi_opoce , 59 , 1 ) ;
11651: LD_LOC 8
11655: PPUSH
11656: LD_INT 59
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 171
// wait ( 0 0$10 ) ;
11666: LD_INT 350
11668: PPUSH
11669: CALL_OW 67
// while Arabi_enter <> 0 do
11673: LD_LOC 7
11677: PUSH
11678: LD_INT 0
11680: NONEQUAL
11681: IFFALSE 11722
// begin ComMoveXY ( Arabi_enter , 62 , 2 ) ;
11683: LD_LOC 7
11687: PPUSH
11688: LD_INT 62
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 111
// ComMoveXY ( Arabi_opoce , 62 , 2 ) ;
11698: LD_LOC 8
11702: PPUSH
11703: LD_INT 62
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 111
// wait ( 0 0$2 ) ;
11713: LD_INT 70
11715: PPUSH
11716: CALL_OW 67
// end ;
11720: GO 11673
// disable ( 101 ) ;
11722: LD_INT 101
11724: DISABLE_MARKED
// end ;
11725: LD_VAR 0 1
11729: RET
// every 0 0$1 marked 101 do var pom , i ;
11730: GO 11732
11732: DISABLE
11733: LD_INT 0
11735: PPUSH
11736: PPUSH
// begin pom = FilterUnitsInArea ( Exarabi , [ [ f_side , Arabi ] ] ) ;
11737: LD_ADDR_VAR 0 1
11741: PUSH
11742: LD_INT 7
11744: PPUSH
11745: LD_INT 22
11747: PUSH
11748: LD_EXP 4
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: PPUSH
11760: CALL_OW 70
11764: ST_TO_ADDR
// if pom <> 0 then
11765: LD_VAR 0 1
11769: PUSH
11770: LD_INT 0
11772: NONEQUAL
11773: IFFALSE 11817
// for i in pom do
11775: LD_ADDR_VAR 0 2
11779: PUSH
11780: LD_VAR 0 1
11784: PUSH
11785: FOR_IN
11786: IFFALSE 11815
// begin RemoveUnit ( i ) ;
11788: LD_VAR 0 2
11792: PPUSH
11793: CALL_OW 64
// Arabi_enter = Arabi_enter diff i ;
11797: LD_ADDR_LOC 7
11801: PUSH
11802: LD_LOC 7
11806: PUSH
11807: LD_VAR 0 2
11811: DIFF
11812: ST_TO_ADDR
// end ;
11813: GO 11785
11815: POP
11816: POP
// enable ;
11817: ENABLE
// end ;
11818: PPOPN 2
11820: END
// export function ar_leave_north ; var i ; begin
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
// SetAttitude ( Arabi , You , att_neutral , true ) ;
11825: LD_EXP 4
11829: PPUSH
11830: LD_EXP 1
11834: PPUSH
11835: LD_INT 0
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 80
// wait ( 0 0$30 ) ;
11845: LD_INT 1050
11847: PPUSH
11848: CALL_OW 67
// for i in Arabi_enter do
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_LOC 7
11861: PUSH
11862: FOR_IN
11863: IFFALSE 11887
// if IsInUnit ( i ) then
11865: LD_VAR 0 2
11869: PPUSH
11870: CALL_OW 310
11874: IFFALSE 11885
// ComExitBuilding ( i ) ;
11876: LD_VAR 0 2
11880: PPUSH
11881: CALL_OW 122
11885: GO 11862
11887: POP
11888: POP
// AddComMoveXY ( Arabi_enter , 59 , 1 ) ;
11889: LD_LOC 7
11893: PPUSH
11894: LD_INT 59
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 171
// for i in Arabi_opoce do
11904: LD_ADDR_VAR 0 2
11908: PUSH
11909: LD_LOC 8
11913: PUSH
11914: FOR_IN
11915: IFFALSE 11939
// if IsInUnit ( i ) then
11917: LD_VAR 0 2
11921: PPUSH
11922: CALL_OW 310
11926: IFFALSE 11937
// ComExitBuilding ( i ) ;
11928: LD_VAR 0 2
11932: PPUSH
11933: CALL_OW 122
11937: GO 11914
11939: POP
11940: POP
// AddComMoveXY ( Arabi_opoce , 59 , 1 ) ;
11941: LD_LOC 8
11945: PPUSH
11946: LD_INT 59
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: CALL_OW 171
// enable ( 101 ) ;
11956: LD_INT 101
11958: ENABLE_MARKED
// wait ( 0 0$10 ) ;
11959: LD_INT 350
11961: PPUSH
11962: CALL_OW 67
// while Arabi_enter <> 0 do
11966: LD_LOC 7
11970: PUSH
11971: LD_INT 0
11973: NONEQUAL
11974: IFFALSE 12015
// begin ComMoveXY ( Arabi_enter , 62 , 2 ) ;
11976: LD_LOC 7
11980: PPUSH
11981: LD_INT 62
11983: PPUSH
11984: LD_INT 2
11986: PPUSH
11987: CALL_OW 111
// ComMoveXY ( Arabi_opoce , 62 , 2 ) ;
11991: LD_LOC 8
11995: PPUSH
11996: LD_INT 62
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: CALL_OW 111
// wait ( 0 0$2 ) ;
12006: LD_INT 70
12008: PPUSH
12009: CALL_OW 67
// end ;
12013: GO 11966
// disable ( 101 ) ;
12015: LD_INT 101
12017: DISABLE_MARKED
// end ;
12018: LD_VAR 0 1
12022: RET
// export function arabi_spojenci ; begin
12023: LD_INT 0
12025: PPUSH
// SetAttitude ( Arabi , You , att_neutral , true ) ;
12026: LD_EXP 4
12030: PPUSH
12031: LD_EXP 1
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 80
// ChangeSideFog ( Arabi , You ) ;
12046: LD_EXP 4
12050: PPUSH
12051: LD_EXP 1
12055: PPUSH
12056: CALL_OW 343
// end ;
12060: LD_VAR 0 1
12064: RET
// export function arabi_ally_amici ; begin
12065: LD_INT 0
12067: PPUSH
// SetAttitude ( Arabi , You , att_enemy , false ) ;
12068: LD_EXP 4
12072: PPUSH
12073: LD_EXP 1
12077: PPUSH
12078: LD_INT 2
12080: PPUSH
12081: LD_INT 0
12083: PPUSH
12084: CALL_OW 80
// end ;
12088: LD_VAR 0 1
12092: RET
// every 0 0$1 do
12093: GO 12095
12095: DISABLE
// begin ComEnterUnit ( Arabi_enter [ 1 ] , Ar_lab ) ;
12096: LD_LOC 7
12100: PUSH
12101: LD_INT 1
12103: ARRAY
12104: PPUSH
12105: LD_INT 59
12107: PPUSH
12108: CALL_OW 120
// ComPlaceRemoteCharge ( diet , 78 , 47 , 0 ) ;
12112: LD_EXP 56
12116: PPUSH
12117: LD_INT 78
12119: PPUSH
12120: LD_INT 47
12122: PPUSH
12123: LD_INT 0
12125: PPUSH
12126: CALL_OW 133
// AddComEnterUnit ( diet , Ar_bar ) ;
12130: LD_EXP 56
12134: PPUSH
12135: LD_INT 61
12137: PPUSH
12138: CALL_OW 180
// ComPlaceRemoteCharge ( Arabi_enter [ 2 ] , 78 , 43 , 0 ) ;
12142: LD_LOC 7
12146: PUSH
12147: LD_INT 2
12149: ARRAY
12150: PPUSH
12151: LD_INT 78
12153: PPUSH
12154: LD_INT 43
12156: PPUSH
12157: LD_INT 0
12159: PPUSH
12160: CALL_OW 133
// AddComEnterUnit ( Arabi_enter [ 2 ] , Ar_bu1 ) ;
12164: LD_LOC 7
12168: PUSH
12169: LD_INT 2
12171: ARRAY
12172: PPUSH
12173: LD_INT 73
12175: PPUSH
12176: CALL_OW 180
// ComHiddenCamera ( Arabi_enter [ 3 ] , 64 , 38 ) ;
12180: LD_LOC 7
12184: PUSH
12185: LD_INT 3
12187: ARRAY
12188: PPUSH
12189: LD_INT 64
12191: PPUSH
12192: LD_INT 38
12194: PPUSH
12195: CALL_OW 157
// AddComHiddenCamera ( Arabi_enter [ 3 ] , 85 , 52 ) ;
12199: LD_LOC 7
12203: PUSH
12204: LD_INT 3
12206: ARRAY
12207: PPUSH
12208: LD_INT 85
12210: PPUSH
12211: LD_INT 52
12213: PPUSH
12214: CALL_OW 217
// AddComHiddenCamera ( Arabi_enter [ 3 ] , 101 , 51 ) ;
12218: LD_LOC 7
12222: PUSH
12223: LD_INT 3
12225: ARRAY
12226: PPUSH
12227: LD_INT 101
12229: PPUSH
12230: LD_INT 51
12232: PPUSH
12233: CALL_OW 217
// AddComEnterUnit ( Arabi_enter [ 3 ] , Ar_dep ) ;
12237: LD_LOC 7
12241: PUSH
12242: LD_INT 3
12244: ARRAY
12245: PPUSH
12246: LD_INT 58
12248: PPUSH
12249: CALL_OW 180
// ComPlaceRemoteCharge ( Arabi_enter [ 4 ] , 82 , 46 , 0 ) ;
12253: LD_LOC 7
12257: PUSH
12258: LD_INT 4
12260: ARRAY
12261: PPUSH
12262: LD_INT 82
12264: PPUSH
12265: LD_INT 46
12267: PPUSH
12268: LD_INT 0
12270: PPUSH
12271: CALL_OW 133
// AddComEnterUnit ( Arabi_enter [ 4 ] , Ar_bu2 ) ;
12275: LD_LOC 7
12279: PUSH
12280: LD_INT 4
12282: ARRAY
12283: PPUSH
12284: LD_INT 78
12286: PPUSH
12287: CALL_OW 180
// ComEnterUnit ( Op1 , Ar_dep ) ;
12291: LD_INT 139
12293: PPUSH
12294: LD_INT 58
12296: PPUSH
12297: CALL_OW 120
// ComEnterUnit ( Op2 , Ar_bar ) ;
12301: LD_INT 138
12303: PPUSH
12304: LD_INT 61
12306: PPUSH
12307: CALL_OW 120
// ComMoveXY ( Op3 , 49 , 3 ) ;
12311: LD_INT 135
12313: PPUSH
12314: LD_INT 49
12316: PPUSH
12317: LD_INT 3
12319: PPUSH
12320: CALL_OW 111
// AddComMoveXY ( Op3 , 45 , 5 ) ;
12324: LD_INT 135
12326: PPUSH
12327: LD_INT 45
12329: PPUSH
12330: LD_INT 5
12332: PPUSH
12333: CALL_OW 171
// AddComMoveXY ( Op3 , 45 , 15 ) ;
12337: LD_INT 135
12339: PPUSH
12340: LD_INT 45
12342: PPUSH
12343: LD_INT 15
12345: PPUSH
12346: CALL_OW 171
// AddComMoveXY ( Op3 , 62 , 29 ) ;
12350: LD_INT 135
12352: PPUSH
12353: LD_INT 62
12355: PPUSH
12356: LD_INT 29
12358: PPUSH
12359: CALL_OW 171
// HiddenCamera ( 40 , 7 , Arabi ) ;
12363: LD_INT 40
12365: PPUSH
12366: LD_INT 7
12368: PPUSH
12369: LD_EXP 4
12373: PPUSH
12374: CALL_OW 244
// end ;
12378: END
// every 1 1$7 do
12379: GO 12381
12381: DISABLE
// begin if Researched ( Arabi , tech_Sib1 ) then
12382: LD_EXP 4
12386: PPUSH
12387: LD_INT 54
12389: PPUSH
12390: CALL_OW 325
12394: IFFALSE 12421
// begin SetTech ( tech_Sib1 , Arabi , state_enabled ) ;
12396: LD_INT 54
12398: PPUSH
12399: LD_EXP 4
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// ComResearch ( Ar_lab , tech_Sib1 ) ;
12411: LD_INT 59
12413: PPUSH
12414: LD_INT 54
12416: PPUSH
12417: CALL_OW 124
// end ; enable ;
12421: ENABLE
// end ;
12422: END
// every 0 0$19 do
12423: GO 12425
12425: DISABLE
// begin SetTech ( tech_Sib1 , Arabi , state_enabled ) ;
12426: LD_INT 54
12428: PPUSH
12429: LD_EXP 4
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 322
// ComResearch ( Ar_lab , tech_Sib1 ) ;
12441: LD_INT 59
12443: PPUSH
12444: LD_INT 54
12446: PPUSH
12447: CALL_OW 124
// end ;
12451: END
// every 0 0$1 trigger Arabi_vztah = 0 and bojeschopnych_rusu > 0 do var pom ;
12452: LD_EXP 60
12456: PUSH
12457: LD_INT 0
12459: EQUAL
12460: PUSH
12461: CALL 13788 0 0
12465: PUSH
12466: LD_INT 0
12468: GREATER
12469: AND
12470: IFFALSE 13195
12472: GO 12474
12474: DISABLE
12475: LD_INT 0
12477: PPUSH
// begin if GetClass ( A1 ) = class_scientistic then
12478: LD_INT 134
12480: PPUSH
12481: CALL_OW 257
12485: PUSH
12486: LD_INT 4
12488: EQUAL
12489: IFFALSE 12518
// begin ComExitBuilding ( A1 ) ;
12491: LD_INT 134
12493: PPUSH
12494: CALL_OW 122
// AddComEnterUnit ( A1 , Ar_bar ) ;
12498: LD_INT 134
12500: PPUSH
12501: LD_INT 61
12503: PPUSH
12504: CALL_OW 180
// AddComChangeProfession ( A1 , class_mortar ) ;
12508: LD_INT 134
12510: PPUSH
12511: LD_INT 8
12513: PPUSH
12514: CALL_OW 183
// end ; if GetClass ( A3 ) = class_engineer then
12518: LD_EXP 58
12522: PPUSH
12523: CALL_OW 257
12527: PUSH
12528: LD_INT 2
12530: EQUAL
12531: IFFALSE 12566
// begin ComExitBuilding ( A3 ) ;
12533: LD_EXP 58
12537: PPUSH
12538: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_bar ) ;
12542: LD_EXP 58
12546: PPUSH
12547: LD_INT 61
12549: PPUSH
12550: CALL_OW 180
// AddComChangeProfession ( A3 , class_soldier ) ;
12554: LD_EXP 58
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 183
// end ; if not IsInUnit ( diet ) = Ar_bar then
12566: LD_EXP 56
12570: PPUSH
12571: CALL_OW 310
12575: PUSH
12576: LD_INT 61
12578: EQUAL
12579: NOT
12580: IFFALSE 12608
// begin ComEnterUnit ( diet , Ar_bar ) ;
12582: LD_EXP 56
12586: PPUSH
12587: LD_INT 61
12589: PPUSH
12590: CALL_OW 120
// AddComChangeProfession ( diet , class_mortar ) ;
12594: LD_EXP 56
12598: PPUSH
12599: LD_INT 8
12601: PPUSH
12602: CALL_OW 183
// end else
12606: GO 12635
// if GetClass ( diet ) = class_soldier then
12608: LD_EXP 56
12612: PPUSH
12613: CALL_OW 257
12617: PUSH
12618: LD_INT 1
12620: EQUAL
12621: IFFALSE 12635
// ComChangeProfession ( diet , class_mortar ) ;
12623: LD_EXP 56
12627: PPUSH
12628: LD_INT 8
12630: PPUSH
12631: CALL_OW 123
// if IsInUnit ( A2 ) = 0 or IsInUnit ( A2 ) = Ar_bar then
12635: LD_EXP 57
12639: PPUSH
12640: CALL_OW 310
12644: PUSH
12645: LD_INT 0
12647: EQUAL
12648: PUSH
12649: LD_EXP 57
12653: PPUSH
12654: CALL_OW 310
12658: PUSH
12659: LD_INT 61
12661: EQUAL
12662: OR
12663: IFFALSE 12911
// begin if IsOK ( Ar_bu1 ) then
12665: LD_INT 73
12667: PPUSH
12668: CALL_OW 302
12672: IFFALSE 12697
// begin ComExitBuilding ( A2 ) ;
12674: LD_EXP 57
12678: PPUSH
12679: CALL_OW 122
// AddComEnterUnit ( A2 , Ar_bu1 ) ;
12683: LD_EXP 57
12687: PPUSH
12688: LD_INT 73
12690: PPUSH
12691: CALL_OW 180
// end else
12695: GO 12911
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_btype , b_breastwork ] ] ) ;
12697: LD_ADDR_VAR 0 1
12701: PUSH
12702: LD_INT 8
12704: PPUSH
12705: LD_INT 22
12707: PUSH
12708: LD_EXP 4
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 30
12719: PUSH
12720: LD_INT 31
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 70
12735: ST_TO_ADDR
// case pom of 1 :
12736: LD_VAR 0 1
12740: PUSH
12741: LD_INT 1
12743: DOUBLE
12744: EQUAL
12745: IFTRUE 12749
12747: GO 12824
12749: POP
// if GetX ( pom [ 1 ] ) = 78 then
12750: LD_VAR 0 1
12754: PUSH
12755: LD_INT 1
12757: ARRAY
12758: PPUSH
12759: CALL_OW 250
12763: PUSH
12764: LD_INT 78
12766: EQUAL
12767: IFFALSE 12798
// begin ComExitBuilding ( A2 ) ;
12769: LD_EXP 57
12773: PPUSH
12774: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 1 ] ) ;
12778: LD_EXP 57
12782: PPUSH
12783: LD_VAR 0 1
12787: PUSH
12788: LD_INT 1
12790: ARRAY
12791: PPUSH
12792: CALL_OW 180
// end else
12796: GO 12822
// begin ComEnterUnit ( A2 , Ar_bar ) ;
12798: LD_EXP 57
12802: PPUSH
12803: LD_INT 61
12805: PPUSH
12806: CALL_OW 120
// AddComChangeProfession ( A2 , class_mortar ) ;
12810: LD_EXP 57
12814: PPUSH
12815: LD_INT 8
12817: PPUSH
12818: CALL_OW 183
// end ; 2 :
12822: GO 12911
12824: LD_INT 2
12826: DOUBLE
12827: EQUAL
12828: IFTRUE 12832
12830: GO 12910
12832: POP
// if GetX ( pom [ 1 ] ) = 78 then
12833: LD_VAR 0 1
12837: PUSH
12838: LD_INT 1
12840: ARRAY
12841: PPUSH
12842: CALL_OW 250
12846: PUSH
12847: LD_INT 78
12849: EQUAL
12850: IFFALSE 12881
// begin ComExitBuilding ( A2 ) ;
12852: LD_EXP 57
12856: PPUSH
12857: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 1 ] ) ;
12861: LD_EXP 57
12865: PPUSH
12866: LD_VAR 0 1
12870: PUSH
12871: LD_INT 1
12873: ARRAY
12874: PPUSH
12875: CALL_OW 180
// end else
12879: GO 12908
// begin ComExitBuilding ( A2 ) ;
12881: LD_EXP 57
12885: PPUSH
12886: CALL_OW 122
// AddComEnterUnit ( A2 , pom [ 2 ] ) ;
12890: LD_EXP 57
12894: PPUSH
12895: LD_VAR 0 1
12899: PUSH
12900: LD_INT 2
12902: ARRAY
12903: PPUSH
12904: CALL_OW 180
// end ; end ;
12908: GO 12911
12910: POP
// end ; end ; if IsInUnit ( A4 ) = 0 or IsInUnit ( A4 ) = Ar_bar then
12911: LD_EXP 59
12915: PPUSH
12916: CALL_OW 310
12920: PUSH
12921: LD_INT 0
12923: EQUAL
12924: PUSH
12925: LD_EXP 59
12929: PPUSH
12930: CALL_OW 310
12934: PUSH
12935: LD_INT 61
12937: EQUAL
12938: OR
12939: IFFALSE 13187
// begin if IsOK ( Ar_bu2 ) then
12941: LD_INT 78
12943: PPUSH
12944: CALL_OW 302
12948: IFFALSE 12973
// begin ComExitBuilding ( A4 ) ;
12950: LD_EXP 59
12954: PPUSH
12955: CALL_OW 122
// AddComEnterUnit ( A4 , Ar_bu2 ) ;
12959: LD_EXP 59
12963: PPUSH
12964: LD_INT 78
12966: PPUSH
12967: CALL_OW 180
// end else
12971: GO 13187
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_btype , b_breastwork ] ] ) ;
12973: LD_ADDR_VAR 0 1
12977: PUSH
12978: LD_INT 8
12980: PPUSH
12981: LD_INT 22
12983: PUSH
12984: LD_EXP 4
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 70
13011: ST_TO_ADDR
// case pom of 1 :
13012: LD_VAR 0 1
13016: PUSH
13017: LD_INT 1
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13100
13025: POP
// if GetX ( pom [ 1 ] ) = 78 then
13026: LD_VAR 0 1
13030: PUSH
13031: LD_INT 1
13033: ARRAY
13034: PPUSH
13035: CALL_OW 250
13039: PUSH
13040: LD_INT 78
13042: EQUAL
13043: IFFALSE 13074
// begin ComExitBuilding ( A4 ) ;
13045: LD_EXP 59
13049: PPUSH
13050: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 1 ] ) ;
13054: LD_EXP 59
13058: PPUSH
13059: LD_VAR 0 1
13063: PUSH
13064: LD_INT 1
13066: ARRAY
13067: PPUSH
13068: CALL_OW 180
// end else
13072: GO 13098
// begin ComEnterUnit ( A2 , Ar_bar ) ;
13074: LD_EXP 57
13078: PPUSH
13079: LD_INT 61
13081: PPUSH
13082: CALL_OW 120
// AddComChangeProfession ( A2 , class_mortar ) ;
13086: LD_EXP 57
13090: PPUSH
13091: LD_INT 8
13093: PPUSH
13094: CALL_OW 183
// end ; 2 :
13098: GO 13187
13100: LD_INT 2
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13186
13108: POP
// if GetX ( pom [ 1 ] ) = 78 then
13109: LD_VAR 0 1
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: CALL_OW 250
13122: PUSH
13123: LD_INT 78
13125: EQUAL
13126: IFFALSE 13157
// begin ComExitBuilding ( A4 ) ;
13128: LD_EXP 59
13132: PPUSH
13133: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 1 ] ) ;
13137: LD_EXP 59
13141: PPUSH
13142: LD_VAR 0 1
13146: PUSH
13147: LD_INT 1
13149: ARRAY
13150: PPUSH
13151: CALL_OW 180
// end else
13155: GO 13184
// begin ComExitBuilding ( A4 ) ;
13157: LD_EXP 59
13161: PPUSH
13162: CALL_OW 122
// AddComEnterUnit ( A4 , pom [ 2 ] ) ;
13166: LD_EXP 59
13170: PPUSH
13171: LD_VAR 0 1
13175: PUSH
13176: LD_INT 2
13178: ARRAY
13179: PPUSH
13180: CALL_OW 180
// end ; end ;
13184: GO 13187
13186: POP
// end ; end ; wait ( 0 0$10 ) ;
13187: LD_INT 350
13189: PPUSH
13190: CALL_OW 67
// enable ;
13194: ENABLE
// end ;
13195: PPOPN 1
13197: END
// every 0 0$10 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom , i , pom1 ;
13198: LD_EXP 60
13202: PUSH
13203: LD_INT 0
13205: EQUAL
13206: PUSH
13207: CALL 13788 0 0
13211: PUSH
13212: LD_INT 0
13214: EQUAL
13215: AND
13216: IFFALSE 13552
13218: GO 13220
13220: DISABLE
13221: LD_INT 0
13223: PPUSH
13224: PPUSH
13225: PPUSH
// begin pom1 = [ ] ;
13226: LD_ADDR_VAR 0 3
13230: PUSH
13231: EMPTY
13232: ST_TO_ADDR
// pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
13233: LD_ADDR_VAR 0 1
13237: PUSH
13238: LD_INT 8
13240: PPUSH
13241: LD_INT 22
13243: PUSH
13244: LD_EXP 4
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 3
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 70
13271: ST_TO_ADDR
// for i in pom do
13272: LD_ADDR_VAR 0 2
13276: PUSH
13277: LD_VAR 0 1
13281: PUSH
13282: FOR_IN
13283: IFFALSE 13318
// if GetLives ( i ) < 1000 then
13285: LD_VAR 0 2
13289: PPUSH
13290: CALL_OW 256
13294: PUSH
13295: LD_INT 1000
13297: LESS
13298: IFFALSE 13316
// pom1 = pom1 ^ i ;
13300: LD_ADDR_VAR 0 3
13304: PUSH
13305: LD_VAR 0 3
13309: PUSH
13310: LD_VAR 0 2
13314: ADD
13315: ST_TO_ADDR
13316: GO 13282
13318: POP
13319: POP
// if pom1 > 0 then
13320: LD_VAR 0 3
13324: PUSH
13325: LD_INT 0
13327: GREATER
13328: IFFALSE 13432
// begin if IsInUnit ( A3 ) = Ar_bar then
13330: LD_EXP 58
13334: PPUSH
13335: CALL_OW 310
13339: PUSH
13340: LD_INT 61
13342: EQUAL
13343: IFFALSE 13430
// begin ComExitBuilding ( A3 ) ;
13345: LD_EXP 58
13349: PPUSH
13350: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_dep ) ;
13354: LD_EXP 58
13358: PPUSH
13359: LD_INT 58
13361: PPUSH
13362: CALL_OW 180
// AddComChangeProfession ( A3 , class_engineer ) ;
13366: LD_EXP 58
13370: PPUSH
13371: LD_INT 2
13373: PPUSH
13374: CALL_OW 183
// AddComExitBuilding ( A3 ) ;
13378: LD_EXP 58
13382: PPUSH
13383: CALL_OW 182
// for i in pom1 do
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: LD_VAR 0 3
13396: PUSH
13397: FOR_IN
13398: IFFALSE 13416
// AddComRepairBuilding ( A3 , i ) ;
13400: LD_EXP 58
13404: PPUSH
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 190
13414: GO 13397
13416: POP
13417: POP
// AddComEnterUnit ( A3 , Ar_dep ) ;
13418: LD_EXP 58
13422: PPUSH
13423: LD_INT 58
13425: PPUSH
13426: CALL_OW 180
// end ; end else
13430: GO 13465
// begin ComExitBuilding ( A3 ) ;
13432: LD_EXP 58
13436: PPUSH
13437: CALL_OW 122
// AddComEnterUnit ( A3 , Ar_dep ) ;
13441: LD_EXP 58
13445: PPUSH
13446: LD_INT 58
13448: PPUSH
13449: CALL_OW 180
// AddComChangeProfession ( A3 , class_engineer ) ;
13453: LD_EXP 58
13457: PPUSH
13458: LD_INT 2
13460: PPUSH
13461: CALL_OW 183
// end ; if pom < 7 then
13465: LD_VAR 0 1
13469: PUSH
13470: LD_INT 7
13472: LESS
13473: IFFALSE 13484
// staveni_budov_arabi ( pom ) ;
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL 13555 0 1
// if GetClass ( diet ) <> class_soldier then
13484: LD_EXP 56
13488: PPUSH
13489: CALL_OW 257
13493: PUSH
13494: LD_INT 1
13496: NONEQUAL
13497: IFFALSE 13511
// ComChangeProfession ( diet , class_soldier ) ;
13499: LD_EXP 56
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 123
// if IsInUnit ( A1 ) <> Ar_lab then
13511: LD_INT 134
13513: PPUSH
13514: CALL_OW 310
13518: PUSH
13519: LD_INT 59
13521: NONEQUAL
13522: IFFALSE 13551
// begin ComExitBuilding ( A1 ) ;
13524: LD_INT 134
13526: PPUSH
13527: CALL_OW 122
// AddComEnterUnit ( A1 , Ar_lab ) ;
13531: LD_INT 134
13533: PPUSH
13534: LD_INT 59
13536: PPUSH
13537: CALL_OW 180
// AddComChangeProfession ( A1 , class_scientistic ) ;
13541: LD_INT 134
13543: PPUSH
13544: LD_INT 4
13546: PPUSH
13547: CALL_OW 183
// end ; enable ;
13551: ENABLE
// end ;
13552: PPOPN 3
13554: END
// function staveni_budov_arabi ( list_budov ) ; var pom ; begin
13555: LD_INT 0
13557: PPUSH
13558: PPUSH
// pom = FilterUnitsInArea ( Ar_base , [ [ f_side , You ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
13559: LD_ADDR_VAR 0 3
13563: PUSH
13564: LD_INT 8
13566: PPUSH
13567: LD_INT 22
13569: PUSH
13570: LD_EXP 1
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: LD_INT 32
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 30
13594: PUSH
13595: LD_INT 31
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 70
13615: ST_TO_ADDR
// if pom <> 2 then
13616: LD_VAR 0 3
13620: PUSH
13621: LD_INT 2
13623: NONEQUAL
13624: IFFALSE 13783
// begin if IsInUnit ( A3 ) = Ar_dep then
13626: LD_EXP 58
13630: PPUSH
13631: CALL_OW 310
13635: PUSH
13636: LD_INT 58
13638: EQUAL
13639: IFFALSE 13650
// ComExitBuilding ( A3 ) ;
13641: LD_EXP 58
13645: PPUSH
13646: CALL_OW 122
// case pom of 0 :
13650: LD_VAR 0 3
13654: PUSH
13655: LD_INT 0
13657: DOUBLE
13658: EQUAL
13659: IFTRUE 13663
13661: GO 13708
13663: POP
// begin AddComBuild ( A3 , b_breastwork , 78 , 32 , 3 ) ;
13664: LD_EXP 58
13668: PPUSH
13669: LD_INT 31
13671: PPUSH
13672: LD_INT 78
13674: PPUSH
13675: LD_INT 32
13677: PPUSH
13678: LD_INT 3
13680: PPUSH
13681: CALL_OW 205
// AddComBuild ( A3 , b_breastwork , 73 , 30 , 3 ) ;
13685: LD_EXP 58
13689: PPUSH
13690: LD_INT 31
13692: PPUSH
13693: LD_INT 73
13695: PPUSH
13696: LD_INT 30
13698: PPUSH
13699: LD_INT 3
13701: PPUSH
13702: CALL_OW 205
// end ; 1 :
13706: GO 13783
13708: LD_INT 1
13710: DOUBLE
13711: EQUAL
13712: IFTRUE 13716
13714: GO 13782
13716: POP
// if GetX ( pom [ 1 ] ) = 78 then
13717: LD_VAR 0 3
13721: PUSH
13722: LD_INT 1
13724: ARRAY
13725: PPUSH
13726: CALL_OW 250
13730: PUSH
13731: LD_INT 78
13733: EQUAL
13734: IFFALSE 13759
// AddComBuild ( A3 , b_breastwork , 73 , 30 , 3 ) else
13736: LD_EXP 58
13740: PPUSH
13741: LD_INT 31
13743: PPUSH
13744: LD_INT 73
13746: PPUSH
13747: LD_INT 30
13749: PPUSH
13750: LD_INT 3
13752: PPUSH
13753: CALL_OW 205
13757: GO 13780
// AddComBuild ( A3 , b_breastwork , 78 , 32 , 3 ) ; end ;
13759: LD_EXP 58
13763: PPUSH
13764: LD_INT 31
13766: PPUSH
13767: LD_INT 78
13769: PPUSH
13770: LD_INT 32
13772: PPUSH
13773: LD_INT 3
13775: PPUSH
13776: CALL_OW 205
13780: GO 13783
13782: POP
// end ; end ;
13783: LD_VAR 0 2
13787: RET
// function bojeschopnych_rusu ; var pom , i , pom1 ; begin
13788: LD_INT 0
13790: PPUSH
13791: PPUSH
13792: PPUSH
13793: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_see , Arabi ] ] ) ;
13794: LD_ADDR_VAR 0 2
13798: PUSH
13799: LD_INT 22
13801: PUSH
13802: LD_EXP 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 101
13813: PUSH
13814: LD_EXP 4
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: ST_TO_ADDR
// pom1 = pom ;
13832: LD_ADDR_VAR 0 4
13836: PUSH
13837: LD_VAR 0 2
13841: ST_TO_ADDR
// for i in pom do
13842: LD_ADDR_VAR 0 3
13846: PUSH
13847: LD_VAR 0 2
13851: PUSH
13852: FOR_IN
13853: IFFALSE 13903
// if GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) = 0 then
13855: LD_VAR 0 3
13859: PPUSH
13860: CALL_OW 247
13864: PUSH
13865: LD_INT 2
13867: EQUAL
13868: PUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: CALL_OW 311
13878: PUSH
13879: LD_INT 0
13881: EQUAL
13882: AND
13883: IFFALSE 13901
// pom1 = pom1 diff i ;
13885: LD_ADDR_VAR 0 4
13889: PUSH
13890: LD_VAR 0 4
13894: PUSH
13895: LD_VAR 0 3
13899: DIFF
13900: ST_TO_ADDR
13901: GO 13852
13903: POP
13904: POP
// debug_strings = [ pom1 ] ;
13905: LD_ADDR_OWVAR 48
13909: PUSH
13910: LD_VAR 0 4
13914: PUSH
13915: EMPTY
13916: LIST
13917: ST_TO_ADDR
// result := pom1 + 0 ;
13918: LD_ADDR_VAR 0 1
13922: PUSH
13923: LD_VAR 0 4
13927: PUSH
13928: LD_INT 0
13930: PLUS
13931: ST_TO_ADDR
// end ;
13932: LD_VAR 0 1
13936: RET
// every 0 0$0.5 trigger Arabi_vztah = 0 do var pom ;
13937: LD_EXP 60
13941: PUSH
13942: LD_INT 0
13944: EQUAL
13945: IFFALSE 14094
13947: GO 13949
13949: DISABLE
13950: LD_INT 0
13952: PPUSH
// begin pom = FilterUnitsInArea ( Armina1 , [ [ f_side , You ] ] ) ;
13953: LD_ADDR_VAR 0 1
13957: PUSH
13958: LD_INT 9
13960: PPUSH
13961: LD_INT 22
13963: PUSH
13964: LD_EXP 1
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: PPUSH
13976: CALL_OW 70
13980: ST_TO_ADDR
// if pom > 0 then
13981: LD_VAR 0 1
13985: PUSH
13986: LD_INT 0
13988: GREATER
13989: IFFALSE 14000
// ComFireExplosives ( diet ) ;
13991: LD_EXP 56
13995: PPUSH
13996: CALL_OW 134
// pom = FilterUnitsInArea ( Armina2 , [ [ f_side , You ] ] ) ;
14000: LD_ADDR_VAR 0 1
14004: PUSH
14005: LD_INT 10
14007: PPUSH
14008: LD_INT 22
14010: PUSH
14011: LD_EXP 1
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: PPUSH
14023: CALL_OW 70
14027: ST_TO_ADDR
// if pom > 0 then
14028: LD_VAR 0 1
14032: PUSH
14033: LD_INT 0
14035: GREATER
14036: IFFALSE 14047
// ComFireExplosives ( A2 ) ;
14038: LD_EXP 57
14042: PPUSH
14043: CALL_OW 134
// pom = FilterUnitsInArea ( Armina3 , [ [ f_side , You ] ] ) ;
14047: LD_ADDR_VAR 0 1
14051: PUSH
14052: LD_INT 11
14054: PPUSH
14055: LD_INT 22
14057: PUSH
14058: LD_EXP 1
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: EMPTY
14068: LIST
14069: PPUSH
14070: CALL_OW 70
14074: ST_TO_ADDR
// if pom > 0 then
14075: LD_VAR 0 1
14079: PUSH
14080: LD_INT 0
14082: GREATER
14083: IFFALSE 14094
// ComFireExplosives ( A4 ) ;
14085: LD_EXP 59
14089: PPUSH
14090: CALL_OW 134
// end ;
14094: PPOPN 1
14096: END
// every 0 0$20 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var i , pom , pom1 ;
14097: LD_EXP 60
14101: PUSH
14102: LD_INT 0
14104: EQUAL
14105: PUSH
14106: CALL 13788 0 0
14110: PUSH
14111: LD_INT 0
14113: EQUAL
14114: AND
14115: IFFALSE 14364
14117: GO 14119
14119: DISABLE
14120: LD_INT 0
14122: PPUSH
14123: PPUSH
14124: PPUSH
// begin pom1 = [ ] ;
14125: LD_ADDR_VAR 0 3
14129: PUSH
14130: EMPTY
14131: ST_TO_ADDR
// for i in Arabi_enter do
14132: LD_ADDR_VAR 0 1
14136: PUSH
14137: LD_LOC 7
14141: PUSH
14142: FOR_IN
14143: IFFALSE 14198
// if GetLives ( i ) < 1000 and i <> A1 and IsIdle ( i ) then
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 256
14154: PUSH
14155: LD_INT 1000
14157: LESS
14158: PUSH
14159: LD_VAR 0 1
14163: PUSH
14164: LD_INT 134
14166: NONEQUAL
14167: AND
14168: PUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 316
14178: AND
14179: IFFALSE 14196
// ComMoveXY ( i , 77 , 20 ) ;
14181: LD_VAR 0 1
14185: PPUSH
14186: LD_INT 77
14188: PPUSH
14189: LD_INT 20
14191: PPUSH
14192: CALL_OW 111
14196: GO 14142
14198: POP
14199: POP
// pom = FilterUnitsInArea ( HealArea , [ [ f_side , Arabi ] ] ) ;
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 12
14207: PPUSH
14208: LD_INT 22
14210: PUSH
14211: LD_EXP 4
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: PPUSH
14223: CALL_OW 70
14227: ST_TO_ADDR
// for i in pom do
14228: LD_ADDR_VAR 0 1
14232: PUSH
14233: LD_VAR 0 2
14237: PUSH
14238: FOR_IN
14239: IFFALSE 14274
// if GetLives ( i ) < 1000 then
14241: LD_VAR 0 1
14245: PPUSH
14246: CALL_OW 256
14250: PUSH
14251: LD_INT 1000
14253: LESS
14254: IFFALSE 14272
// pom1 = pom1 ^ i ;
14256: LD_ADDR_VAR 0 3
14260: PUSH
14261: LD_VAR 0 3
14265: PUSH
14266: LD_VAR 0 1
14270: ADD
14271: ST_TO_ADDR
14272: GO 14238
14274: POP
14275: POP
// if IsOK ( A1 ) then
14276: LD_INT 134
14278: PPUSH
14279: CALL_OW 302
14283: IFFALSE 14364
// begin if pom1 > 0 then
14285: LD_VAR 0 3
14289: PUSH
14290: LD_INT 0
14292: GREATER
14293: IFFALSE 14363
// begin while IsInUnit ( A1 ) <> Ar_lab do
14295: LD_INT 134
14297: PPUSH
14298: CALL_OW 310
14302: PUSH
14303: LD_INT 59
14305: NONEQUAL
14306: IFFALSE 14317
// wait ( 0 0$3 ) ;
14308: LD_INT 105
14310: PPUSH
14311: CALL_OW 67
14315: GO 14295
// ComExitBuilding ( A1 ) ;
14317: LD_INT 134
14319: PPUSH
14320: CALL_OW 122
// for i in pom1 do
14324: LD_ADDR_VAR 0 1
14328: PUSH
14329: LD_VAR 0 3
14333: PUSH
14334: FOR_IN
14335: IFFALSE 14351
// AddComHeal ( A1 , i ) ;
14337: LD_INT 134
14339: PPUSH
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 188
14349: GO 14334
14351: POP
14352: POP
// AddComEnterUnit ( A1 , ar_lab ) ;
14353: LD_INT 134
14355: PPUSH
14356: LD_INT 59
14358: PPUSH
14359: CALL_OW 180
// end ; enable ;
14363: ENABLE
// end ; end ;
14364: PPOPN 3
14366: END
// every 0 0$30 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom ;
14367: LD_EXP 60
14371: PUSH
14372: LD_INT 0
14374: EQUAL
14375: PUSH
14376: CALL 13788 0 0
14380: PUSH
14381: LD_INT 0
14383: EQUAL
14384: AND
14385: IFFALSE 14868
14387: GO 14389
14389: DISABLE
14390: LD_INT 0
14392: PPUSH
// begin if ( not MineAtPos ( 78 , 47 ) ) and IsOK ( diet ) then
14393: LD_INT 78
14395: PPUSH
14396: LD_INT 47
14398: PPUSH
14399: CALL_OW 458
14403: NOT
14404: PUSH
14405: LD_EXP 56
14409: PPUSH
14410: CALL_OW 302
14414: AND
14415: IFFALSE 14548
// begin while HasTask ( diet ) do
14417: LD_EXP 56
14421: PPUSH
14422: CALL_OW 314
14426: IFFALSE 14437
// wait ( 0 0$1 ) ;
14428: LD_INT 35
14430: PPUSH
14431: CALL_OW 67
14435: GO 14417
// if not MineAtPos ( 78 , 47 ) then
14437: LD_INT 78
14439: PPUSH
14440: LD_INT 47
14442: PPUSH
14443: CALL_OW 458
14447: NOT
14448: IFFALSE 14548
// begin pom = IsInUnit ( diet ) ;
14450: LD_ADDR_VAR 0 1
14454: PUSH
14455: LD_EXP 56
14459: PPUSH
14460: CALL_OW 310
14464: ST_TO_ADDR
// if pom = 0 then
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 0
14472: EQUAL
14473: IFFALSE 14486
// ComRemember ( diet ) else
14475: LD_EXP 56
14479: PPUSH
14480: CALL_OW 143
14484: GO 14495
// ComExitBuilding ( diet ) ;
14486: LD_EXP 56
14490: PPUSH
14491: CALL_OW 122
// AddComPlaceRemoteCharge ( diet , 78 , 47 , 0 ) ;
14495: LD_EXP 56
14499: PPUSH
14500: LD_INT 78
14502: PPUSH
14503: LD_INT 47
14505: PPUSH
14506: LD_INT 0
14508: PPUSH
14509: CALL_OW 193
// if pom > 0 then
14513: LD_VAR 0 1
14517: PUSH
14518: LD_INT 0
14520: GREATER
14521: IFFALSE 14539
// AddComEnterUnit ( diet , pom ) else
14523: LD_EXP 56
14527: PPUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 180
14537: GO 14548
// AddComReturn ( diet ) ;
14539: LD_EXP 56
14543: PPUSH
14544: CALL_OW 204
// end ; end ; if ( not MineAtPos ( 78 , 43 ) ) and IsOK ( A2 ) then
14548: LD_INT 78
14550: PPUSH
14551: LD_INT 43
14553: PPUSH
14554: CALL_OW 458
14558: NOT
14559: PUSH
14560: LD_EXP 57
14564: PPUSH
14565: CALL_OW 302
14569: AND
14570: IFFALSE 14703
// begin while HasTask ( A2 ) do
14572: LD_EXP 57
14576: PPUSH
14577: CALL_OW 314
14581: IFFALSE 14592
// wait ( 0 0$1 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
14590: GO 14572
// if not MineAtPos ( 78 , 43 ) then
14592: LD_INT 78
14594: PPUSH
14595: LD_INT 43
14597: PPUSH
14598: CALL_OW 458
14602: NOT
14603: IFFALSE 14703
// begin pom = IsInUnit ( A2 ) ;
14605: LD_ADDR_VAR 0 1
14609: PUSH
14610: LD_EXP 57
14614: PPUSH
14615: CALL_OW 310
14619: ST_TO_ADDR
// if pom = 0 then
14620: LD_VAR 0 1
14624: PUSH
14625: LD_INT 0
14627: EQUAL
14628: IFFALSE 14641
// ComRemember ( A2 ) else
14630: LD_EXP 57
14634: PPUSH
14635: CALL_OW 143
14639: GO 14650
// ComExitBuilding ( A2 ) ;
14641: LD_EXP 57
14645: PPUSH
14646: CALL_OW 122
// AddComPlaceRemoteCharge ( A2 , 78 , 43 , 0 ) ;
14650: LD_EXP 57
14654: PPUSH
14655: LD_INT 78
14657: PPUSH
14658: LD_INT 43
14660: PPUSH
14661: LD_INT 0
14663: PPUSH
14664: CALL_OW 193
// if pom > 0 then
14668: LD_VAR 0 1
14672: PUSH
14673: LD_INT 0
14675: GREATER
14676: IFFALSE 14694
// AddComEnterUnit ( A2 , pom ) else
14678: LD_EXP 57
14682: PPUSH
14683: LD_VAR 0 1
14687: PPUSH
14688: CALL_OW 180
14692: GO 14703
// AddComReturn ( A2 ) ;
14694: LD_EXP 57
14698: PPUSH
14699: CALL_OW 204
// end ; end ; if ( not MineAtPos ( 82 , 46 ) ) and IsOK ( A4 ) then
14703: LD_INT 82
14705: PPUSH
14706: LD_INT 46
14708: PPUSH
14709: CALL_OW 458
14713: NOT
14714: PUSH
14715: LD_EXP 59
14719: PPUSH
14720: CALL_OW 302
14724: AND
14725: IFFALSE 14867
// begin while HasTask ( A4 ) do
14727: LD_EXP 59
14731: PPUSH
14732: CALL_OW 314
14736: IFFALSE 14747
// wait ( 0 0$1 ) ;
14738: LD_INT 35
14740: PPUSH
14741: CALL_OW 67
14745: GO 14727
// if not MineAtPos ( 82 , 46 ) then
14747: LD_INT 82
14749: PPUSH
14750: LD_INT 46
14752: PPUSH
14753: CALL_OW 458
14757: NOT
14758: IFFALSE 14867
// begin pom = IsInUnit ( A4 ) ;
14760: LD_ADDR_VAR 0 1
14764: PUSH
14765: LD_EXP 59
14769: PPUSH
14770: CALL_OW 310
14774: ST_TO_ADDR
// if pom = 0 then
14775: LD_VAR 0 1
14779: PUSH
14780: LD_INT 0
14782: EQUAL
14783: IFFALSE 14796
// ComRemember ( A4 ) else
14785: LD_EXP 59
14789: PPUSH
14790: CALL_OW 143
14794: GO 14805
// ComExitBuilding ( A4 ) ;
14796: LD_EXP 59
14800: PPUSH
14801: CALL_OW 122
// AddComExitBuilding ( A4 ) ;
14805: LD_EXP 59
14809: PPUSH
14810: CALL_OW 182
// AddComPlaceRemoteCharge ( A4 , 82 , 76 , 0 ) ;
14814: LD_EXP 59
14818: PPUSH
14819: LD_INT 82
14821: PPUSH
14822: LD_INT 76
14824: PPUSH
14825: LD_INT 0
14827: PPUSH
14828: CALL_OW 193
// if pom > 0 then
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 0
14839: GREATER
14840: IFFALSE 14858
// AddComEnterUnit ( A4 , pom ) else
14842: LD_EXP 59
14846: PPUSH
14847: LD_VAR 0 1
14851: PPUSH
14852: CALL_OW 180
14856: GO 14867
// AddComReturn ( A4 ) ;
14858: LD_EXP 59
14862: PPUSH
14863: CALL_OW 204
// end ; end ; enable ;
14867: ENABLE
// end ;
14868: PPOPN 1
14870: END
// every 0 0$5 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var i , pom ;
14871: LD_EXP 60
14875: PUSH
14876: LD_INT 0
14878: EQUAL
14879: PUSH
14880: CALL 13788 0 0
14884: PUSH
14885: LD_INT 0
14887: EQUAL
14888: AND
14889: IFFALSE 15023
14891: GO 14893
14893: DISABLE
14894: LD_INT 0
14896: PPUSH
14897: PPUSH
// begin pom = FIlterAllUnits ( [ [ f_side , You ] , [ f_see , Arabi ] ] ) ;
14898: LD_ADDR_VAR 0 2
14902: PUSH
14903: LD_INT 22
14905: PUSH
14906: LD_EXP 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 101
14917: PUSH
14918: LD_EXP 4
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 69
14935: ST_TO_ADDR
// if pom > 0 then
14936: LD_VAR 0 2
14940: PUSH
14941: LD_INT 0
14943: GREATER
14944: IFFALSE 15022
// begin ComChangeProfession ( diet , class_mortar ) ;
14946: LD_EXP 56
14950: PPUSH
14951: LD_INT 8
14953: PPUSH
14954: CALL_OW 123
// AddComExitBuilding ( diet ) ;
14958: LD_EXP 56
14962: PPUSH
14963: CALL_OW 182
// for i in pom do
14967: LD_ADDR_VAR 0 1
14971: PUSH
14972: LD_VAR 0 2
14976: PUSH
14977: FOR_IN
14978: IFFALSE 14996
// AddComAttackUnit ( diet , i ) ;
14980: LD_EXP 56
14984: PPUSH
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 175
14994: GO 14977
14996: POP
14997: POP
// AddComEnterUnit ( diet , Ar_bar ) ;
14998: LD_EXP 56
15002: PPUSH
15003: LD_INT 61
15005: PPUSH
15006: CALL_OW 180
// AddComChangeProfession ( diet , class_soldier ) ;
15010: LD_EXP 56
15014: PPUSH
15015: LD_INT 1
15017: PPUSH
15018: CALL_OW 183
// end ; enable ;
15022: ENABLE
// end ;
15023: PPOPN 2
15025: END
// every 0 0$0.1 do var pom , i ;
15026: GO 15028
15028: DISABLE
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// begin pom = FilterUnitsInArea ( Ar_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
15033: LD_ADDR_VAR 0 1
15037: PUSH
15038: LD_INT 8
15040: PPUSH
15041: LD_INT 22
15043: PUSH
15044: LD_EXP 4
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 21
15055: PUSH
15056: LD_INT 3
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PPUSH
15067: CALL_OW 70
15071: ST_TO_ADDR
// for i in pom do
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: LD_VAR 0 1
15081: PUSH
15082: FOR_IN
15083: IFFALSE 15107
// SetBLevel ( i , levely_budovy_arabi [ difficulty ] ) ;
15085: LD_VAR 0 2
15089: PPUSH
15090: LD_EXP 40
15094: PUSH
15095: LD_OWVAR 67
15099: ARRAY
15100: PPUSH
15101: CALL_OW 241
15105: GO 15082
15107: POP
15108: POP
// end ;
15109: PPOPN 2
15111: END
// every 0 0$5 trigger Arabi_vztah = 20 do var pom ; var poc ;
15112: LD_EXP 60
15116: PUSH
15117: LD_INT 20
15119: EQUAL
15120: IFFALSE 15490
15122: GO 15124
15124: DISABLE
15125: LD_INT 0
15127: PPUSH
15128: PPUSH
// begin wait ( 0 0$30 ) ;
15129: LD_INT 1050
15131: PPUSH
15132: CALL_OW 67
// ComExitBuilding ( Arabi_enter ) ;
15136: LD_LOC 7
15140: PPUSH
15141: CALL_OW 122
// AddComEnterUnit ( Arabi_enter , Ar_bar ) ;
15145: LD_LOC 7
15149: PPUSH
15150: LD_INT 61
15152: PPUSH
15153: CALL_OW 180
// AddComChangeProfession ( Arabi_enter , class_mortar ) ;
15157: LD_LOC 7
15161: PPUSH
15162: LD_INT 8
15164: PPUSH
15165: CALL_OW 183
// RemoveMineOfUnit ( diet ) ;
15169: LD_EXP 56
15173: PPUSH
15174: CALL_OW 460
// RemoveMineOfUnit ( A2 ) ;
15178: LD_EXP 57
15182: PPUSH
15183: CALL_OW 460
// RemoveMineOfUnit ( A4 ) ;
15187: LD_EXP 59
15191: PPUSH
15192: CALL_OW 460
// AddComPlaceRemoteCharge ( diet , 0 , 0 , Am_at6 ) ;
15196: LD_EXP 56
15200: PPUSH
15201: LD_INT 0
15203: PPUSH
15204: LD_INT 0
15206: PPUSH
15207: LD_INT 180
15209: PPUSH
15210: CALL_OW 193
// AddComPlaceRemoteCharge ( A2 , 0 , 0 , Am_at7 ) ;
15214: LD_EXP 57
15218: PPUSH
15219: LD_INT 0
15221: PPUSH
15222: LD_INT 0
15224: PPUSH
15225: LD_INT 70
15227: PPUSH
15228: CALL_OW 193
// AddComPlaceRemoteCharge ( A3 , 0 , 0 , Am_bar ) ;
15232: LD_EXP 58
15236: PPUSH
15237: LD_INT 0
15239: PPUSH
15240: LD_INT 0
15242: PPUSH
15243: LD_INT 85
15245: PPUSH
15246: CALL_OW 193
// AddComPlaceRemoteCharge ( A4 , 0 , 0 , Am_at4 ) ;
15250: LD_EXP 59
15254: PPUSH
15255: LD_INT 0
15257: PPUSH
15258: LD_INT 0
15260: PPUSH
15261: LD_INT 69
15263: PPUSH
15264: CALL_OW 193
// AddComMoveXY ( Arabi_enter , 88 , 9 ) ;
15268: LD_LOC 7
15272: PPUSH
15273: LD_INT 88
15275: PPUSH
15276: LD_INT 9
15278: PPUSH
15279: CALL_OW 171
// ComExitBuilding ( Arabi_opoce ) ;
15283: LD_LOC 8
15287: PPUSH
15288: CALL_OW 122
// AddComEnterUnit ( Arabi_opoce , Ar_bar ) ;
15292: LD_LOC 8
15296: PPUSH
15297: LD_INT 61
15299: PPUSH
15300: CALL_OW 180
// AddComChangeProfession ( Arabi_opoce , class_apeman_kamikaze ) ;
15304: LD_LOC 8
15308: PPUSH
15309: LD_INT 17
15311: PPUSH
15312: CALL_OW 183
// AddComExitBuilding ( Arabi_opoce ) ;
15316: LD_LOC 8
15320: PPUSH
15321: CALL_OW 182
// wait ( 1 1$0 ) ;
15325: LD_INT 2100
15327: PPUSH
15328: CALL_OW 67
// while FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) = 0 do
15332: LD_INT 22
15334: PUSH
15335: LD_EXP 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 101
15346: PUSH
15347: LD_EXP 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PPUSH
15360: CALL_OW 69
15364: PUSH
15365: LD_INT 0
15367: EQUAL
15368: IFFALSE 15379
// wait ( 0 0$5 ) ;
15370: LD_INT 175
15372: PPUSH
15373: CALL_OW 67
15377: GO 15332
// ComFireExplosives ( [ diet , A2 , A3 , A4 ] ) ;
15379: LD_EXP 56
15383: PUSH
15384: LD_EXP 57
15388: PUSH
15389: LD_EXP 58
15393: PUSH
15394: LD_EXP 59
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: PPUSH
15405: CALL_OW 134
// AddComAttackUnit ( Arabi_enter , Am_el2 ) ;
15409: LD_LOC 7
15413: PPUSH
15414: LD_INT 81
15416: PPUSH
15417: CALL_OW 175
// AddComAttackUnit ( Arabi_opoce , Am_tov ) ;
15421: LD_LOC 8
15425: PPUSH
15426: LD_INT 175
15428: PPUSH
15429: CALL_OW 175
// wait ( 0 0$3 ) ;
15433: LD_INT 105
15435: PPUSH
15436: CALL_OW 67
// SetAttitude ( Arabi , Amici , att_enemy , true ) ;
15440: LD_EXP 4
15444: PPUSH
15445: LD_EXP 2
15449: PPUSH
15450: LD_INT 2
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: CALL_OW 80
// SetAttitude ( Amici , Arabi , att_enemy , true ) ;
15460: LD_EXP 2
15464: PPUSH
15465: LD_EXP 4
15469: PPUSH
15470: LD_INT 2
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: CALL_OW 80
// wait ( 0 0$30 ) ;
15480: LD_INT 1050
15482: PPUSH
15483: CALL_OW 67
// enable ( 102 ) ;
15487: LD_INT 102
15489: ENABLE_MARKED
// end ;
15490: PPOPN 2
15492: END
// every 0 0$1 trigger GetLives ( Am_el2 ) < 200 marked 102 do
15493: LD_INT 81
15495: PPUSH
15496: CALL_OW 256
15500: PUSH
15501: LD_INT 200
15503: LESS
15504: IFFALSE 15586
15506: GO 15508
15508: DISABLE
// begin ComMoveXY ( Arabi_enter , 61 , 1 ) ;
15509: LD_LOC 7
15513: PPUSH
15514: LD_INT 61
15516: PPUSH
15517: LD_INT 1
15519: PPUSH
15520: CALL_OW 111
// enable ( 101 ) ;
15524: LD_INT 101
15526: ENABLE_MARKED
// while FilterAllUnits ( [ [ f_side , Arabi ] , [ f_class , class_mortar ] ] ) do
15527: LD_INT 22
15529: PUSH
15530: LD_EXP 4
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 25
15541: PUSH
15542: LD_INT 8
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 69
15557: IFFALSE 15583
// begin ComMoveXY ( Arabi_enter , 61 , 1 ) ;
15559: LD_LOC 7
15563: PPUSH
15564: LD_INT 61
15566: PPUSH
15567: LD_INT 1
15569: PPUSH
15570: CALL_OW 111
// wait ( 0 0$1 ) ;
15574: LD_INT 35
15576: PPUSH
15577: CALL_OW 67
// end ;
15581: GO 15527
// disable ( 101 ) ;
15583: LD_INT 101
15585: DISABLE_MARKED
// end ;
15586: END
// every 0 0$11 do var pom ;
15587: GO 15589
15589: DISABLE
15590: LD_INT 0
15592: PPUSH
// begin pom = UnitsInside ( Ar_lab ) ;
15593: LD_ADDR_VAR 0 1
15597: PUSH
15598: LD_INT 59
15600: PPUSH
15601: CALL_OW 313
15605: ST_TO_ADDR
// ComChangeProfession ( pom , class_scientistic ) ;
15606: LD_VAR 0 1
15610: PPUSH
15611: LD_INT 4
15613: PPUSH
15614: CALL_OW 123
// enable ;
15618: ENABLE
// end ;
15619: PPOPN 1
15621: END
// every 0 0$1 trigger not KECY_s_arabama do var pom , i ; var vysl ;
15622: LD_EXP 7
15626: NOT
15627: IFFALSE 15809
15629: GO 15631
15631: DISABLE
15632: LD_INT 0
15634: PPUSH
15635: PPUSH
15636: PPUSH
// begin vysl = false ;
15637: LD_ADDR_VAR 0 3
15641: PUSH
15642: LD_INT 0
15644: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
15645: LD_ADDR_VAR 0 1
15649: PUSH
15650: LD_INT 22
15652: PUSH
15653: LD_EXP 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: LD_INT 21
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: ST_TO_ADDR
// for i in pom do
15699: LD_ADDR_VAR 0 2
15703: PUSH
15704: LD_VAR 0 1
15708: PUSH
15709: FOR_IN
15710: IFFALSE 15744
// if GetSide ( Attacks ( i ) ) = Arabi then
15712: LD_VAR 0 2
15716: PPUSH
15717: CALL_OW 320
15721: PPUSH
15722: CALL_OW 255
15726: PUSH
15727: LD_EXP 4
15731: EQUAL
15732: IFFALSE 15742
// vysl = true ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_INT 1
15741: ST_TO_ADDR
15742: GO 15709
15744: POP
15745: POP
// if vysl then
15746: LD_VAR 0 3
15750: IFFALSE 15808
// begin KECY_s_arabama = true ;
15752: LD_ADDR_EXP 7
15756: PUSH
15757: LD_INT 1
15759: ST_TO_ADDR
// SetAttitude ( You , Arabi , att_enemy , true ) ;
15760: LD_EXP 1
15764: PPUSH
15765: LD_EXP 4
15769: PPUSH
15770: LD_INT 2
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
15780: LD_EXP 4
15784: PPUSH
15785: LD_EXP 1
15789: PPUSH
15790: LD_INT 2
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: CALL_OW 80
// Arabi_vztah = 0 ;
15800: LD_ADDR_EXP 60
15804: PUSH
15805: LD_INT 0
15807: ST_TO_ADDR
// end ; enable ;
15808: ENABLE
// end ; end_of_file
15809: PPOPN 3
15811: END
// export JMM ; export Joan ; export VEDCI1 ; export VEDCI2 ; export VEDCI3 ; export Am_opoce ; export Am_sol ; export Am_mech ; export Am_vyr ; export Am_snipe ; export Am_utoky ; var UTOCENI ; export mcmillanova_pomsta ; export counter_utoku ; every 0 0$0.1 do
15812: GO 15814
15814: DISABLE
// begin UTOCENI = false ;
15815: LD_ADDR_LOC 9
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// Am_utoky = 0 ;
15823: LD_ADDR_EXP 71
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// Am_opoce = [ OPC1 , OPC2 , OPC3 , OPC4 ] ;
15831: LD_ADDR_EXP 66
15835: PUSH
15836: LD_INT 140
15838: PUSH
15839: LD_INT 141
15841: PUSH
15842: LD_INT 142
15844: PUSH
15845: LD_INT 143
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: ST_TO_ADDR
// mcmillanova_pomsta = false ;
15854: LD_ADDR_EXP 72
15858: PUSH
15859: LD_INT 0
15861: ST_TO_ADDR
// counter_utoku = 0 ;
15862: LD_ADDR_EXP 73
15866: PUSH
15867: LD_INT 0
15869: ST_TO_ADDR
// disable ( 998 ) ;
15870: LD_INT 998
15872: DISABLE_MARKED
// end ;
15873: END
// every 0 0$0.2 do
15874: GO 15876
15876: DISABLE
// begin ComEnterUnit ( VEDCI1 , Am_lab1 ) ;
15877: LD_EXP 63
15881: PPUSH
15882: LD_INT 48
15884: PPUSH
15885: CALL_OW 120
// ComEnterUnit ( VEDCI2 , Am_lab2 ) ;
15889: LD_EXP 64
15893: PPUSH
15894: LD_INT 55
15896: PPUSH
15897: CALL_OW 120
// ComEnterUnit ( VEDCI3 , Am_lab3 ) ;
15901: LD_EXP 65
15905: PPUSH
15906: LD_INT 56
15908: PPUSH
15909: CALL_OW 120
// ComEnterUnit ( Joan , Am_lab2 ) ;
15913: LD_EXP 62
15917: PPUSH
15918: LD_INT 55
15920: PPUSH
15921: CALL_OW 120
// ComEnterUnit ( Am_opoce , Am_dep ) ;
15925: LD_EXP 66
15929: PPUSH
15930: LD_INT 45
15932: PPUSH
15933: CALL_OW 120
// ComEnterUnit ( Am_mech , Am_ct ) ;
15937: LD_EXP 68
15941: PPUSH
15942: LD_INT 83
15944: PPUSH
15945: CALL_OW 120
// ComEnterUnit ( Am_vyr , Am_tov ) ;
15949: LD_EXP 69
15953: PPUSH
15954: LD_INT 175
15956: PPUSH
15957: CALL_OW 120
// ComEnterUnit ( Am_snipe , Am_bar ) ;
15961: LD_EXP 70
15965: PPUSH
15966: LD_INT 85
15968: PPUSH
15969: CALL_OW 120
// ComEnterUnit ( Am_sol , Am_bar ) ;
15973: LD_EXP 67
15977: PPUSH
15978: LD_INT 85
15980: PPUSH
15981: CALL_OW 120
// end ;
15985: END
// every 0 0$0.1 do var i , pom ;
15986: GO 15988
15988: DISABLE
15989: LD_INT 0
15991: PPUSH
15992: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
15993: LD_ADDR_VAR 0 2
15997: PUSH
15998: LD_INT 13
16000: PPUSH
16001: LD_INT 22
16003: PUSH
16004: LD_EXP 2
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 21
16015: PUSH
16016: LD_INT 3
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 70
16031: ST_TO_ADDR
// for i in pom do
16032: LD_ADDR_VAR 0 1
16036: PUSH
16037: LD_VAR 0 2
16041: PUSH
16042: FOR_IN
16043: IFFALSE 16067
// SetBLevel ( i , levely_budovy_amici [ difficulty ] ) ;
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_EXP 41
16054: PUSH
16055: LD_OWVAR 67
16059: ARRAY
16060: PPUSH
16061: CALL_OW 241
16065: GO 16042
16067: POP
16068: POP
// end ;
16069: PPOPN 2
16071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) > 0 do var pom ;
16072: LD_INT 22
16074: PUSH
16075: LD_EXP 1
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 101
16086: PUSH
16087: LD_EXP 2
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: PUSH
16105: LD_INT 0
16107: GREATER
16108: IFFALSE 16370
16110: GO 16112
16112: DISABLE
16113: LD_INT 0
16115: PPUSH
// begin pom = FilterUnitsInArea ( Am_vychod , [ [ f_side , You ] ] ) ;
16116: LD_ADDR_VAR 0 1
16120: PUSH
16121: LD_INT 18
16123: PPUSH
16124: LD_INT 22
16126: PUSH
16127: LD_EXP 1
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: PPUSH
16139: CALL_OW 70
16143: ST_TO_ADDR
// if pom > 0 then
16144: LD_VAR 0 1
16148: PUSH
16149: LD_INT 0
16151: GREATER
16152: IFFALSE 16244
// begin if IsOK ( Am_sol [ 1 ] ) then
16154: LD_EXP 67
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: PPUSH
16163: CALL_OW 302
16167: IFFALSE 16198
// begin ComExitBuilding ( Am_sol [ 1 ] ) ;
16169: LD_EXP 67
16173: PUSH
16174: LD_INT 1
16176: ARRAY
16177: PPUSH
16178: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 1 ] , Am_bu3 ) ;
16182: LD_EXP 67
16186: PUSH
16187: LD_INT 1
16189: ARRAY
16190: PPUSH
16191: LD_INT 166
16193: PPUSH
16194: CALL_OW 180
// end ; if IsOK ( Am_sol [ 2 ] ) then
16198: LD_EXP 67
16202: PUSH
16203: LD_INT 2
16205: ARRAY
16206: PPUSH
16207: CALL_OW 302
16211: IFFALSE 16242
// begin ComExitBuilding ( Am_sol [ 2 ] ) ;
16213: LD_EXP 67
16217: PUSH
16218: LD_INT 2
16220: ARRAY
16221: PPUSH
16222: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 2 ] , Am_bu4 ) ;
16226: LD_EXP 67
16230: PUSH
16231: LD_INT 2
16233: ARRAY
16234: PPUSH
16235: LD_INT 171
16237: PPUSH
16238: CALL_OW 180
// end ; end else
16242: GO 16370
// begin pom = FilterUnitsInArea ( Am_vychod , [ [ f_side , You ] ] ) ;
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_INT 18
16251: PPUSH
16252: LD_INT 22
16254: PUSH
16255: LD_EXP 1
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: EMPTY
16265: LIST
16266: PPUSH
16267: CALL_OW 70
16271: ST_TO_ADDR
// if pom > 0 then
16272: LD_VAR 0 1
16276: PUSH
16277: LD_INT 0
16279: GREATER
16280: IFFALSE 16370
// begin if IsOK ( Am_sol [ 1 ] ) then
16282: LD_EXP 67
16286: PUSH
16287: LD_INT 1
16289: ARRAY
16290: PPUSH
16291: CALL_OW 302
16295: IFFALSE 16326
// begin ComExitBuilding ( Am_sol [ 1 ] ) ;
16297: LD_EXP 67
16301: PUSH
16302: LD_INT 1
16304: ARRAY
16305: PPUSH
16306: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 1 ] , Am_bu1 ) ;
16310: LD_EXP 67
16314: PUSH
16315: LD_INT 1
16317: ARRAY
16318: PPUSH
16319: LD_INT 52
16321: PPUSH
16322: CALL_OW 180
// end ; if IsOK ( Am_sol [ 2 ] ) then
16326: LD_EXP 67
16330: PUSH
16331: LD_INT 2
16333: ARRAY
16334: PPUSH
16335: CALL_OW 302
16339: IFFALSE 16370
// begin ComExitBuilding ( Am_sol [ 2 ] ) ;
16341: LD_EXP 67
16345: PUSH
16346: LD_INT 2
16348: ARRAY
16349: PPUSH
16350: CALL_OW 122
// AddComEnterUnit ( Am_sol [ 2 ] , Am_bu2 ) ;
16354: LD_EXP 67
16358: PUSH
16359: LD_INT 2
16361: ARRAY
16362: PPUSH
16363: LD_INT 53
16365: PPUSH
16366: CALL_OW 180
// end ; end ; end ; end ;
16370: PPOPN 1
16372: END
// every 1 1$7 do
16373: GO 16375
16375: DISABLE
// begin if Researched ( Amici , tech_Sib1 ) then
16376: LD_EXP 2
16380: PPUSH
16381: LD_INT 54
16383: PPUSH
16384: CALL_OW 325
16388: IFFALSE 16422
// begin SetTech ( tech_Sib1 , Amici , state_enabled ) ;
16390: LD_INT 54
16392: PPUSH
16393: LD_EXP 2
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: CALL_OW 322
// ComResearch ( [ Am_lab1 , Am_lab2 ] , tech_Sib1 ) ;
16405: LD_INT 48
16407: PUSH
16408: LD_INT 55
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PPUSH
16415: LD_INT 54
16417: PPUSH
16418: CALL_OW 124
// end ; enable ;
16422: ENABLE
// end ;
16423: END
// every 0 0$19 do
16424: GO 16426
16426: DISABLE
// begin SetTech ( tech_Sib1 , Amici , state_enabled ) ;
16427: LD_INT 54
16429: PPUSH
16430: LD_EXP 2
16434: PPUSH
16435: LD_INT 1
16437: PPUSH
16438: CALL_OW 322
// ComResearch ( [ Am_lab1 , Am_lab2 ] , tech_Sib1 ) ;
16442: LD_INT 48
16444: PUSH
16445: LD_INT 55
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: LD_INT 54
16454: PPUSH
16455: CALL_OW 124
// end ;
16459: END
// every 1 1$8 do
16460: GO 16462
16462: DISABLE
// begin if Researched ( Amici , tech_Opto1 ) then
16463: LD_EXP 2
16467: PPUSH
16468: LD_INT 60
16470: PPUSH
16471: CALL_OW 325
16475: IFFALSE 16502
// begin SetTech ( tech_Opto1 , Amici , state_enabled ) ;
16477: LD_INT 60
16479: PPUSH
16480: LD_EXP 2
16484: PPUSH
16485: LD_INT 1
16487: PPUSH
16488: CALL_OW 322
// ComResearch ( Am_lab3 , tech_Opto1 ) ;
16492: LD_INT 56
16494: PPUSH
16495: LD_INT 60
16497: PPUSH
16498: CALL_OW 124
// end ; enable ;
16502: ENABLE
// end ;
16503: END
// every 0 0$21 do
16504: GO 16506
16506: DISABLE
// begin SetTech ( tech_Opto1 , Amici , state_enabled ) ;
16507: LD_INT 60
16509: PPUSH
16510: LD_EXP 2
16514: PPUSH
16515: LD_INT 1
16517: PPUSH
16518: CALL_OW 322
// ComResearch ( Am_lab3 , tech_Opto1 ) ;
16522: LD_INT 56
16524: PPUSH
16525: LD_INT 60
16527: PPUSH
16528: CALL_OW 124
// end ;
16532: END
// every 0 0$10 trigger Arabi_vztah = 0 and bojeschopnych_rusu = 0 do var pom , i , pom1 ;
16533: LD_EXP 60
16537: PUSH
16538: LD_INT 0
16540: EQUAL
16541: PUSH
16542: CALL 16637 0 0
16546: PUSH
16547: LD_INT 0
16549: EQUAL
16550: AND
16551: IFFALSE 16634
16553: GO 16555
16555: DISABLE
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
16560: PPUSH
// begin if IsOK ( Am_bar ) and IsInUnit ( Am_sol [ 1 ] ) <> Am_bar and IsInUnit ( Am_sol [ 1 ] ) <> Am_bar then
16561: LD_INT 85
16563: PPUSH
16564: CALL_OW 302
16568: PUSH
16569: LD_EXP 67
16573: PUSH
16574: LD_INT 1
16576: ARRAY
16577: PPUSH
16578: CALL_OW 310
16582: PUSH
16583: LD_INT 85
16585: NONEQUAL
16586: AND
16587: PUSH
16588: LD_EXP 67
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: PPUSH
16597: CALL_OW 310
16601: PUSH
16602: LD_INT 85
16604: NONEQUAL
16605: AND
16606: IFFALSE 16629
// begin ComExitBuilding ( Am_sol ) ;
16608: LD_EXP 67
16612: PPUSH
16613: CALL_OW 122
// AddComEnterUnit ( Am_sol , Am_bar ) ;
16617: LD_EXP 67
16621: PPUSH
16622: LD_INT 85
16624: PPUSH
16625: CALL_OW 180
// end ; opravovani_budov ;
16629: CALL 18768 0 0
// enable ;
16633: ENABLE
// end ;
16634: PPOPN 3
16636: END
// function bojeschopnych_rusu ; var pom , i , pom1 ; begin
16637: LD_INT 0
16639: PPUSH
16640: PPUSH
16641: PPUSH
16642: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_see , Amici ] ] ) ;
16643: LD_ADDR_VAR 0 2
16647: PUSH
16648: LD_INT 22
16650: PUSH
16651: LD_EXP 1
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 101
16662: PUSH
16663: LD_EXP 2
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: ST_TO_ADDR
// pom1 = pom ;
16681: LD_ADDR_VAR 0 4
16685: PUSH
16686: LD_VAR 0 2
16690: ST_TO_ADDR
// for i in pom do
16691: LD_ADDR_VAR 0 3
16695: PUSH
16696: LD_VAR 0 2
16700: PUSH
16701: FOR_IN
16702: IFFALSE 16752
// if GetType ( i ) = unit_vehicle and IsDrivenBy ( i ) = 0 then
16704: LD_VAR 0 3
16708: PPUSH
16709: CALL_OW 247
16713: PUSH
16714: LD_INT 2
16716: EQUAL
16717: PUSH
16718: LD_VAR 0 3
16722: PPUSH
16723: CALL_OW 311
16727: PUSH
16728: LD_INT 0
16730: EQUAL
16731: AND
16732: IFFALSE 16750
// pom1 = pom1 diff i ;
16734: LD_ADDR_VAR 0 4
16738: PUSH
16739: LD_VAR 0 4
16743: PUSH
16744: LD_VAR 0 3
16748: DIFF
16749: ST_TO_ADDR
16750: GO 16701
16752: POP
16753: POP
// debug_strings = [ pom1 ] ;
16754: LD_ADDR_OWVAR 48
16758: PUSH
16759: LD_VAR 0 4
16763: PUSH
16764: EMPTY
16765: LIST
16766: ST_TO_ADDR
// result := pom1 + 0 ;
16767: LD_ADDR_VAR 0 1
16771: PUSH
16772: LD_VAR 0 4
16776: PUSH
16777: LD_INT 0
16779: PLUS
16780: ST_TO_ADDR
// end ;
16781: LD_VAR 0 1
16785: RET
// every 0 0$19 trigger Am_utoky = 1 do var i ; var cesta ;
16786: LD_EXP 71
16790: PUSH
16791: LD_INT 1
16793: EQUAL
16794: IFFALSE 17148
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
16802: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
16803: LD_EXP 43
16807: PUSH
16808: LD_OWVAR 67
16812: ARRAY
16813: PPUSH
16814: CALL_OW 67
// wait ( Rand ( 1 , 0 0$30 ) ) ;
16818: LD_INT 1
16820: PPUSH
16821: LD_INT 1050
16823: PPUSH
16824: CALL_OW 12
16828: PPUSH
16829: CALL_OW 67
// if mcmillanova_pomsta then
16833: LD_EXP 72
16837: IFFALSE 16841
// exit ;
16839: GO 17148
// for i in AM_UTOK_1_LIST do
16841: LD_ADDR_VAR 0 1
16845: PUSH
16846: LD_EXP 33
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16871
// PlaceUnitArea ( i , Am_enter , false ) ;
16854: LD_VAR 0 1
16858: PPUSH
16859: LD_INT 19
16861: PPUSH
16862: LD_INT 0
16864: PPUSH
16865: CALL_OW 49
16869: GO 16851
16871: POP
16872: POP
// case cislo_baze of 1 :
16873: LD_EXP 9
16877: PUSH
16878: LD_INT 1
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 16940
16886: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 57 , 77 ] , [ 48 , 75 ] ] ; 2 :
16887: LD_ADDR_VAR 0 2
16891: PUSH
16892: LD_INT 40
16894: PUSH
16895: LD_INT 46
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 70
16904: PUSH
16905: LD_INT 62
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 57
16914: PUSH
16915: LD_INT 77
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 48
16924: PUSH
16925: LD_INT 75
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: ST_TO_ADDR
16938: GO 17109
16940: LD_INT 2
16942: DOUBLE
16943: EQUAL
16944: IFTRUE 16948
16946: GO 17013
16948: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 76 , 58 ] , [ 83 , 72 ] , [ 94 , 91 ] ] ; 3 :
16949: LD_ADDR_VAR 0 2
16953: PUSH
16954: LD_INT 40
16956: PUSH
16957: LD_INT 47
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 61
16966: PUSH
16967: LD_INT 52
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 76
16976: PUSH
16977: LD_INT 58
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 83
16986: PUSH
16987: LD_INT 72
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 94
16996: PUSH
16997: LD_INT 91
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: ST_TO_ADDR
17011: GO 17109
17013: LD_INT 3
17015: DOUBLE
17016: EQUAL
17017: IFTRUE 17021
17019: GO 17108
17021: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 86 , 76 ] , [ 103 , 95 ] , [ 126 , 79 ] , [ 140 , 82 ] , [ 144 , 69 ] ] ; end ;
17022: LD_ADDR_VAR 0 2
17026: PUSH
17027: LD_INT 40
17029: PUSH
17030: LD_INT 47
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 61
17039: PUSH
17040: LD_INT 52
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 86
17049: PUSH
17050: LD_INT 76
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 103
17059: PUSH
17060: LD_INT 95
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 126
17069: PUSH
17070: LD_INT 79
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 140
17079: PUSH
17080: LD_INT 82
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 144
17089: PUSH
17090: LD_INT 69
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: ST_TO_ADDR
17106: GO 17109
17108: POP
// McMove ( 1 , AM_UTOK_1_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
17109: LD_INT 1
17111: PPUSH
17112: LD_EXP 33
17116: PPUSH
17117: LD_VAR 0 2
17121: PPUSH
17122: LD_INT 5
17124: PUSH
17125: LD_INT 6
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL_OW 398
// Am_utoky = 2 ;
17140: LD_ADDR_EXP 71
17144: PUSH
17145: LD_INT 2
17147: ST_TO_ADDR
// end ;
17148: PPOPN 2
17150: END
// every 0 0$17 trigger Am_utoky = 2 do var i ; var cesta ;
17151: LD_EXP 71
17155: PUSH
17156: LD_INT 2
17158: EQUAL
17159: IFFALSE 17498
17161: GO 17163
17163: DISABLE
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
17168: LD_EXP 43
17172: PUSH
17173: LD_OWVAR 67
17177: ARRAY
17178: PPUSH
17179: CALL_OW 67
// if mcmillanova_pomsta then
17183: LD_EXP 72
17187: IFFALSE 17191
// exit ;
17189: GO 17498
// for i in AM_UTOK_2_LIST do
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: LD_EXP 34
17200: PUSH
17201: FOR_IN
17202: IFFALSE 17221
// PlaceUnitArea ( i , Am_enter , false ) ;
17204: LD_VAR 0 1
17208: PPUSH
17209: LD_INT 19
17211: PPUSH
17212: LD_INT 0
17214: PPUSH
17215: CALL_OW 49
17219: GO 17201
17221: POP
17222: POP
// case cislo_baze of 1 :
17223: LD_EXP 9
17227: PUSH
17228: LD_INT 1
17230: DOUBLE
17231: EQUAL
17232: IFTRUE 17236
17234: GO 17290
17236: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 57 , 77 ] , [ 48 , 75 ] ] ; 2 :
17237: LD_ADDR_VAR 0 2
17241: PUSH
17242: LD_INT 40
17244: PUSH
17245: LD_INT 46
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 70
17254: PUSH
17255: LD_INT 62
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 57
17264: PUSH
17265: LD_INT 77
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 48
17274: PUSH
17275: LD_INT 75
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: ST_TO_ADDR
17288: GO 17459
17290: LD_INT 2
17292: DOUBLE
17293: EQUAL
17294: IFTRUE 17298
17296: GO 17363
17298: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 76 , 58 ] , [ 83 , 72 ] , [ 94 , 91 ] ] ; 3 :
17299: LD_ADDR_VAR 0 2
17303: PUSH
17304: LD_INT 40
17306: PUSH
17307: LD_INT 47
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 61
17316: PUSH
17317: LD_INT 52
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 76
17326: PUSH
17327: LD_INT 58
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 83
17336: PUSH
17337: LD_INT 72
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 94
17346: PUSH
17347: LD_INT 91
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: ST_TO_ADDR
17361: GO 17459
17363: LD_INT 3
17365: DOUBLE
17366: EQUAL
17367: IFTRUE 17371
17369: GO 17458
17371: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 86 , 76 ] , [ 103 , 95 ] , [ 126 , 79 ] , [ 140 , 82 ] , [ 144 , 69 ] ] ; end ;
17372: LD_ADDR_VAR 0 2
17376: PUSH
17377: LD_INT 40
17379: PUSH
17380: LD_INT 47
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 61
17389: PUSH
17390: LD_INT 52
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 86
17399: PUSH
17400: LD_INT 76
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 103
17409: PUSH
17410: LD_INT 95
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 126
17419: PUSH
17420: LD_INT 79
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 140
17429: PUSH
17430: LD_INT 82
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 144
17439: PUSH
17440: LD_INT 69
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: ST_TO_ADDR
17456: GO 17459
17458: POP
// McMove ( 1 , AM_UTOK_2_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
17459: LD_INT 1
17461: PPUSH
17462: LD_EXP 34
17466: PPUSH
17467: LD_VAR 0 2
17471: PPUSH
17472: LD_INT 5
17474: PUSH
17475: LD_INT 6
17477: PUSH
17478: LD_INT 3
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: PPUSH
17486: CALL_OW 398
// Am_utoky = 3 ;
17490: LD_ADDR_EXP 71
17494: PUSH
17495: LD_INT 3
17497: ST_TO_ADDR
// end ;
17498: PPOPN 2
17500: END
// every 0 0$19 trigger Am_utoky = 3 do var i ; var cesta ;
17501: LD_EXP 71
17505: PUSH
17506: LD_INT 3
17508: EQUAL
17509: IFFALSE 17881
17511: GO 17513
17513: DISABLE
17514: LD_INT 0
17516: PPUSH
17517: PPUSH
// begin wait ( cas_utoku_amiku [ difficulty ] ) ;
17518: LD_EXP 43
17522: PUSH
17523: LD_OWVAR 67
17527: ARRAY
17528: PPUSH
17529: CALL_OW 67
// if mcmillanova_pomsta then
17533: LD_EXP 72
17537: IFFALSE 17541
// exit ;
17539: GO 17881
// for i in AM_UTOK_3_LIST do
17541: LD_ADDR_VAR 0 1
17545: PUSH
17546: LD_EXP 35
17550: PUSH
17551: FOR_IN
17552: IFFALSE 17571
// PlaceUnitArea ( i , Am_enter , false ) ;
17554: LD_VAR 0 1
17558: PPUSH
17559: LD_INT 19
17561: PPUSH
17562: LD_INT 0
17564: PPUSH
17565: CALL_OW 49
17569: GO 17551
17571: POP
17572: POP
// case cislo_baze of 1 :
17573: LD_EXP 9
17577: PUSH
17578: LD_INT 1
17580: DOUBLE
17581: EQUAL
17582: IFTRUE 17586
17584: GO 17651
17586: POP
// cesta = [ [ 40 , 46 ] , [ 70 , 62 ] , [ 96 , 104 ] , [ 70 , 100 ] , [ 49 , 78 ] ] ; 2 :
17587: LD_ADDR_VAR 0 2
17591: PUSH
17592: LD_INT 40
17594: PUSH
17595: LD_INT 46
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 70
17604: PUSH
17605: LD_INT 62
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 96
17614: PUSH
17615: LD_INT 104
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 70
17624: PUSH
17625: LD_INT 100
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 49
17634: PUSH
17635: LD_INT 78
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: ST_TO_ADDR
17649: GO 17842
17651: LD_INT 2
17653: DOUBLE
17654: EQUAL
17655: IFTRUE 17659
17657: GO 17735
17659: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 59 , 76 ] , [ 59 , 85 ] , [ 71 , 99 ] , [ 97 , 103 ] ] ; 3 :
17660: LD_ADDR_VAR 0 2
17664: PUSH
17665: LD_INT 40
17667: PUSH
17668: LD_INT 47
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 61
17677: PUSH
17678: LD_INT 52
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 59
17687: PUSH
17688: LD_INT 76
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 59
17697: PUSH
17698: LD_INT 85
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 71
17707: PUSH
17708: LD_INT 99
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 97
17717: PUSH
17718: LD_INT 103
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: ST_TO_ADDR
17733: GO 17842
17735: LD_INT 3
17737: DOUBLE
17738: EQUAL
17739: IFTRUE 17743
17741: GO 17841
17743: POP
// cesta = [ [ 40 , 47 ] , [ 61 , 52 ] , [ 87 , 42 ] , [ 84 , 20 ] , [ 100 , 30 ] , [ 128 , 41 ] , [ 139 , 45 ] , [ 148 , 65 ] ] ; end ;
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: LD_INT 40
17751: PUSH
17752: LD_INT 47
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 61
17761: PUSH
17762: LD_INT 52
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 87
17771: PUSH
17772: LD_INT 42
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 84
17781: PUSH
17782: LD_INT 20
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 100
17791: PUSH
17792: LD_INT 30
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 128
17801: PUSH
17802: LD_INT 41
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 139
17811: PUSH
17812: LD_INT 45
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 148
17821: PUSH
17822: LD_INT 65
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: ST_TO_ADDR
17839: GO 17842
17841: POP
// McMove ( 1 , AM_UTOK_3_LIST , cesta , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
17842: LD_INT 1
17844: PPUSH
17845: LD_EXP 35
17849: PPUSH
17850: LD_VAR 0 2
17854: PPUSH
17855: LD_INT 5
17857: PUSH
17858: LD_INT 6
17860: PUSH
17861: LD_INT 3
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: PPUSH
17869: CALL_OW 398
// Am_utoky = 4 ;
17873: LD_ADDR_EXP 71
17877: PUSH
17878: LD_INT 4
17880: ST_TO_ADDR
// end ;
17881: PPOPN 2
17883: END
// every 0 0$19 trigger mcmillanova_pomsta marked 999 do var units ; var i , pom ; var cesta ;
17884: LD_EXP 72
17888: IFFALSE 18189
17890: GO 17892
17892: DISABLE
17893: LD_INT 0
17895: PPUSH
17896: PPUSH
17897: PPUSH
17898: PPUSH
// begin cesta = [ [ 74 , 52 ] ] ;
17899: LD_ADDR_VAR 0 4
17903: PUSH
17904: LD_INT 74
17906: PUSH
17907: LD_INT 52
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: ST_TO_ADDR
// units = create_JMM_revange ;
17917: LD_ADDR_VAR 0 1
17921: PUSH
17922: CALL 9949 0 0
17926: ST_TO_ADDR
// for i in units do
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_VAR 0 1
17936: PUSH
17937: FOR_IN
17938: IFFALSE 17957
// PlaceUnitArea ( i , JMM_revenge , false ) ;
17940: LD_VAR 0 2
17944: PPUSH
17945: LD_INT 29
17947: PPUSH
17948: LD_INT 0
17950: PPUSH
17951: CALL_OW 49
17955: GO 17937
17957: POP
17958: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
17959: LD_ADDR_VAR 0 3
17963: PUSH
17964: LD_INT 22
17966: PUSH
17967: LD_EXP 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: LD_INT 21
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 21
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PPUSH
18008: CALL_OW 69
18012: ST_TO_ADDR
// for i in pom do
18013: LD_ADDR_VAR 0 2
18017: PUSH
18018: LD_VAR 0 3
18022: PUSH
18023: FOR_IN
18024: IFFALSE 18066
// cesta = cesta ^ [ [ GetX ( i ) , GetY ( i ) ] ] ;
18026: LD_ADDR_VAR 0 4
18030: PUSH
18031: LD_VAR 0 4
18035: PUSH
18036: LD_VAR 0 2
18040: PPUSH
18041: CALL_OW 250
18045: PUSH
18046: LD_VAR 0 2
18050: PPUSH
18051: CALL_OW 251
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: ADD
18063: ST_TO_ADDR
18064: GO 18023
18066: POP
18067: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
18068: LD_ADDR_VAR 0 3
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_EXP 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 21
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PPUSH
18099: CALL_OW 69
18103: ST_TO_ADDR
// for i in pom do
18104: LD_ADDR_VAR 0 2
18108: PUSH
18109: LD_VAR 0 3
18113: PUSH
18114: FOR_IN
18115: IFFALSE 18157
// cesta = cesta ^ [ [ GetX ( i ) , GetY ( i ) ] ] ;
18117: LD_ADDR_VAR 0 4
18121: PUSH
18122: LD_VAR 0 4
18126: PUSH
18127: LD_VAR 0 2
18131: PPUSH
18132: CALL_OW 250
18136: PUSH
18137: LD_VAR 0 2
18141: PPUSH
18142: CALL_OW 251
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: EMPTY
18152: LIST
18153: ADD
18154: ST_TO_ADDR
18155: GO 18114
18157: POP
18158: POP
// McMove ( 1 , units , cesta , [ mc_move_agressive , mc_move_dontcapture ] ) ;
18159: LD_INT 1
18161: PPUSH
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_VAR 0 4
18171: PPUSH
18172: LD_INT 6
18174: PUSH
18175: LD_INT 5
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 398
// enable ( 998 ) ;
18186: LD_INT 998
18188: ENABLE_MARKED
// end ;
18189: PPOPN 4
18191: END
// every 0 0$13 marked 998 do
18192: GO 18194
18194: DISABLE
// begin wait ( wait_mcmillanova_pomsta [ difficulty ] ) ;
18195: LD_EXP 49
18199: PUSH
18200: LD_OWVAR 67
18204: ARRAY
18205: PPUSH
18206: CALL_OW 67
// enable ( 999 ) ;
18210: LD_INT 999
18212: ENABLE_MARKED
// end ;
18213: END
// every 0 0$13 trigger Am_utoky = 4 do
18214: LD_EXP 71
18218: PUSH
18219: LD_INT 4
18221: EQUAL
18222: IFFALSE 18574
18224: GO 18226
18226: DISABLE
// begin wait ( cas_na_odchod_vedcu [ difficulty ] ) ;
18227: LD_EXP 47
18231: PUSH
18232: LD_OWVAR 67
18236: ARRAY
18237: PPUSH
18238: CALL_OW 67
// cekej_na_utok ;
18242: CALL 20733 0 0
// ComExitBuilding ( VEDCI1 ) ;
18246: LD_EXP 63
18250: PPUSH
18251: CALL_OW 122
// McMove ( 1 , VEDCI1 , [ [ 118 , 60 ] , [ 113 , 73 ] , [ 98 , 74 ] , [ 87 , 42 ] , [ 82 , 33 ] , [ 67 , 2 ] ] , [ ] ) ;
18255: LD_INT 1
18257: PPUSH
18258: LD_EXP 63
18262: PPUSH
18263: LD_INT 118
18265: PUSH
18266: LD_INT 60
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 113
18275: PUSH
18276: LD_INT 73
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 98
18285: PUSH
18286: LD_INT 74
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 87
18295: PUSH
18296: LD_INT 42
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 82
18305: PUSH
18306: LD_INT 33
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 67
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: PPUSH
18331: EMPTY
18332: PPUSH
18333: CALL_OW 398
// ComExitBuilding ( VEDCI2 ) ;
18337: LD_EXP 64
18341: PPUSH
18342: CALL_OW 122
// wait ( 0 0$30 ) ;
18346: LD_INT 1050
18348: PPUSH
18349: CALL_OW 67
// McMove ( 1 , VEDCI2 , [ [ 88 , 10 ] , [ 85 , 42 ] , [ 93 , 57 ] , [ 62 , 50 ] , [ 43 , 31 ] , [ 24 , 22 ] , [ 30 , 40 ] , [ 15 , 29 ] ] , [ ] ) ;
18353: LD_INT 1
18355: PPUSH
18356: LD_EXP 64
18360: PPUSH
18361: LD_INT 88
18363: PUSH
18364: LD_INT 10
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 85
18373: PUSH
18374: LD_INT 42
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 93
18383: PUSH
18384: LD_INT 57
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 62
18393: PUSH
18394: LD_INT 50
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 43
18403: PUSH
18404: LD_INT 31
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 24
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 30
18423: PUSH
18424: LD_INT 40
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 15
18433: PUSH
18434: LD_INT 29
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: PPUSH
18451: EMPTY
18452: PPUSH
18453: CALL_OW 398
// ComExitBuilding ( VEDCI3 ) ;
18457: LD_EXP 65
18461: PPUSH
18462: CALL_OW 122
// wait ( 0 0$30 ) ;
18466: LD_INT 1050
18468: PPUSH
18469: CALL_OW 67
// McMove ( 1 , VEDCI3 , [ [ 101 , 46 ] , [ 112 , 75 ] , [ 90 , 90 ] , [ 70 , 83 ] , [ 54 , 82 ] , [ 32 , 44 ] , [ 16 , 28 ] ] , [ ] ) ;
18473: LD_INT 1
18475: PPUSH
18476: LD_EXP 65
18480: PPUSH
18481: LD_INT 101
18483: PUSH
18484: LD_INT 46
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 112
18493: PUSH
18494: LD_INT 75
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 90
18503: PUSH
18504: LD_INT 90
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 70
18513: PUSH
18514: LD_INT 83
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 54
18523: PUSH
18524: LD_INT 82
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 32
18533: PUSH
18534: LD_INT 44
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 16
18543: PUSH
18544: LD_INT 28
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PPUSH
18560: EMPTY
18561: PPUSH
18562: CALL_OW 398
// Am_utoky = 5 ;
18566: LD_ADDR_EXP 71
18570: PUSH
18571: LD_INT 5
18573: ST_TO_ADDR
// end ;
18574: END
// every 0 0$1 trigger Am_utoky = 5 do var pom , i ;
18575: LD_EXP 71
18579: PUSH
18580: LD_INT 5
18582: EQUAL
18583: IFFALSE 18765
18585: GO 18587
18587: DISABLE
18588: LD_INT 0
18590: PPUSH
18591: PPUSH
// begin pom = FilterUnitsInArea ( Sci_ex_2 , [ [ f_side , Amici ] , [ f_class , class_scientistic ] ] ) ;
18592: LD_ADDR_VAR 0 1
18596: PUSH
18597: LD_INT 21
18599: PPUSH
18600: LD_INT 22
18602: PUSH
18603: LD_EXP 2
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 25
18614: PUSH
18615: LD_INT 4
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 70
18630: ST_TO_ADDR
// if pom > 0 then
18631: LD_VAR 0 1
18635: PUSH
18636: LD_INT 0
18638: GREATER
18639: IFFALSE 18678
// begin for i in pom do
18641: LD_ADDR_VAR 0 2
18645: PUSH
18646: LD_VAR 0 1
18650: PUSH
18651: FOR_IN
18652: IFFALSE 18665
// RemoveUnit ( i ) ;
18654: LD_VAR 0 2
18658: PPUSH
18659: CALL_OW 64
18663: GO 18651
18665: POP
18666: POP
// wait ( 0 0$2 ) ;
18667: LD_INT 70
18669: PPUSH
18670: CALL_OW 67
// prohra_vedci ;
18674: CALL 201 0 0
// end ; pom = FilterUnitsInArea ( Sci_ex_3 , [ [ f_side , Amici ] , [ f_class , class_scientistic ] ] ) ;
18678: LD_ADDR_VAR 0 1
18682: PUSH
18683: LD_INT 22
18685: PPUSH
18686: LD_INT 22
18688: PUSH
18689: LD_EXP 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 25
18700: PUSH
18701: LD_INT 4
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PPUSH
18712: CALL_OW 70
18716: ST_TO_ADDR
// if pom > 0 then
18717: LD_VAR 0 1
18721: PUSH
18722: LD_INT 0
18724: GREATER
18725: IFFALSE 18764
// begin for i in pom do
18727: LD_ADDR_VAR 0 2
18731: PUSH
18732: LD_VAR 0 1
18736: PUSH
18737: FOR_IN
18738: IFFALSE 18751
// RemoveUnit ( i ) ;
18740: LD_VAR 0 2
18744: PPUSH
18745: CALL_OW 64
18749: GO 18737
18751: POP
18752: POP
// wait ( 0 0$2 ) ;
18753: LD_INT 70
18755: PPUSH
18756: CALL_OW 67
// prohra_vedci ;
18760: CALL 201 0 0
// end ; enable ;
18764: ENABLE
// end ;
18765: PPOPN 2
18767: END
// function opravovani_budov ; var pom , pom1 , i ; begin
18768: LD_INT 0
18770: PPUSH
18771: PPUSH
18772: PPUSH
18773: PPUSH
// pom1 = [ ] ;
18774: LD_ADDR_VAR 0 3
18778: PUSH
18779: EMPTY
18780: ST_TO_ADDR
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Arabi ] , [ f_type , unit_building ] ] ) ;
18781: LD_ADDR_VAR 0 2
18785: PUSH
18786: LD_INT 13
18788: PPUSH
18789: LD_INT 22
18791: PUSH
18792: LD_EXP 4
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 21
18803: PUSH
18804: LD_INT 3
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PPUSH
18815: CALL_OW 70
18819: ST_TO_ADDR
// for i in pom do
18820: LD_ADDR_VAR 0 4
18824: PUSH
18825: LD_VAR 0 2
18829: PUSH
18830: FOR_IN
18831: IFFALSE 18866
// if GetLives ( i ) < 1000 then
18833: LD_VAR 0 4
18837: PPUSH
18838: CALL_OW 256
18842: PUSH
18843: LD_INT 1000
18845: LESS
18846: IFFALSE 18864
// pom1 = pom1 ^ i ;
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_VAR 0 3
18857: PUSH
18858: LD_VAR 0 4
18862: ADD
18863: ST_TO_ADDR
18864: GO 18830
18866: POP
18867: POP
// if pom1 > 0 then
18868: LD_VAR 0 3
18872: PUSH
18873: LD_INT 0
18875: GREATER
18876: IFFALSE 18991
// begin if IsInUnit ( Am_opoce [ 1 ] ) or IsInUnit ( Am_opoce [ 2 ] ) or IsInUnit ( Am_opoce [ 3 ] ) then
18878: LD_EXP 66
18882: PUSH
18883: LD_INT 1
18885: ARRAY
18886: PPUSH
18887: CALL_OW 310
18891: PUSH
18892: LD_EXP 66
18896: PUSH
18897: LD_INT 2
18899: ARRAY
18900: PPUSH
18901: CALL_OW 310
18905: OR
18906: PUSH
18907: LD_EXP 66
18911: PUSH
18912: LD_INT 3
18914: ARRAY
18915: PPUSH
18916: CALL_OW 310
18920: OR
18921: IFFALSE 18991
// begin ComExitBuilding ( Am_opoce ) ;
18923: LD_EXP 66
18927: PPUSH
18928: CALL_OW 122
// for i in pom1 do
18932: LD_ADDR_VAR 0 4
18936: PUSH
18937: LD_VAR 0 3
18941: PUSH
18942: FOR_IN
18943: IFFALSE 18961
// AddComRepairBuilding ( Am_opoce , i ) ;
18945: LD_EXP 66
18949: PPUSH
18950: LD_VAR 0 4
18954: PPUSH
18955: CALL_OW 190
18959: GO 18942
18961: POP
18962: POP
// AddComEnterUnit ( Am_opoce , Am_dep ) ;
18963: LD_EXP 66
18967: PPUSH
18968: LD_INT 45
18970: PPUSH
18971: CALL_OW 180
// ComEnterUnit ( Am_opoce [ 4 ] , Am_dep ) ;
18975: LD_EXP 66
18979: PUSH
18980: LD_INT 4
18982: ARRAY
18983: PPUSH
18984: LD_INT 45
18986: PPUSH
18987: CALL_OW 120
// end ; end end ;
18991: LD_VAR 0 1
18995: RET
// every 0 0$10 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) < max_pocet_aut [ difficulty ] do var design ;
18996: LD_INT 13
18998: PPUSH
18999: LD_INT 22
19001: PUSH
19002: LD_EXP 2
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 70
19029: PUSH
19030: LD_EXP 44
19034: PUSH
19035: LD_OWVAR 67
19039: ARRAY
19040: LESS
19041: IFFALSE 19128
19043: GO 19045
19045: DISABLE
19046: LD_INT 0
19048: PPUSH
// begin AddResourceType ( GetBase ( Am_dep ) , mat_cans , 50 ) ;
19049: LD_INT 45
19051: PPUSH
19052: CALL_OW 274
19056: PPUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_INT 50
19062: PPUSH
19063: CALL_OW 276
// if BuildingStatus ( Am_tov ) <> 3 then
19067: LD_INT 175
19069: PPUSH
19070: CALL_OW 461
19074: PUSH
19075: LD_INT 3
19077: NONEQUAL
19078: IFFALSE 19127
// begin design = get_random_design ;
19080: LD_ADDR_VAR 0 1
19084: PUSH
19085: CALL 19131 0 0
19089: ST_TO_ADDR
// ComConstruct ( Am_tov , design [ 1 ] , design [ 2 ] , control_remote , design [ 3 ] ) ;
19090: LD_INT 175
19092: PPUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 1
19100: ARRAY
19101: PPUSH
19102: LD_VAR 0 1
19106: PUSH
19107: LD_INT 2
19109: ARRAY
19110: PPUSH
19111: LD_INT 2
19113: PPUSH
19114: LD_VAR 0 1
19118: PUSH
19119: LD_INT 3
19121: ARRAY
19122: PPUSH
19123: CALL_OW 125
// end ; enable ;
19127: ENABLE
// end ;
19128: PPOPN 1
19130: END
// function get_random_design ; var pom1 , pom2 , pom3 ; var aa , aa1 , aa2 , aa3 ; begin
19131: LD_INT 0
19133: PPUSH
19134: PPUSH
19135: PPUSH
19136: PPUSH
19137: PPUSH
19138: PPUSH
19139: PPUSH
19140: PPUSH
// pom1 = Rand ( 1 , 5 ) ;
19141: LD_ADDR_VAR 0 2
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_INT 5
19151: PPUSH
19152: CALL_OW 12
19156: ST_TO_ADDR
// case pom1 of 1 :
19157: LD_VAR 0 2
19161: PUSH
19162: LD_INT 1
19164: DOUBLE
19165: EQUAL
19166: IFTRUE 19170
19168: GO 19181
19170: POP
// aa3 = us_machine_gun ; 2 :
19171: LD_ADDR_VAR 0 8
19175: PUSH
19176: LD_INT 2
19178: ST_TO_ADDR
19179: GO 19258
19181: LD_INT 2
19183: DOUBLE
19184: EQUAL
19185: IFTRUE 19189
19187: GO 19200
19189: POP
// aa3 = us_light_gun ; 3 :
19190: LD_ADDR_VAR 0 8
19194: PUSH
19195: LD_INT 3
19197: ST_TO_ADDR
19198: GO 19258
19200: LD_INT 3
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 19219
19208: POP
// aa3 = us_gatling_gun ; 4 :
19209: LD_ADDR_VAR 0 8
19213: PUSH
19214: LD_INT 4
19216: ST_TO_ADDR
19217: GO 19258
19219: LD_INT 4
19221: DOUBLE
19222: EQUAL
19223: IFTRUE 19227
19225: GO 19238
19227: POP
// aa3 = us_double_gun ; 5 :
19228: LD_ADDR_VAR 0 8
19232: PUSH
19233: LD_INT 5
19235: ST_TO_ADDR
19236: GO 19258
19238: LD_INT 5
19240: DOUBLE
19241: EQUAL
19242: IFTRUE 19246
19244: GO 19257
19246: POP
// aa3 = us_heavy_gun ; end ;
19247: LD_ADDR_VAR 0 8
19251: PUSH
19252: LD_INT 6
19254: ST_TO_ADDR
19255: GO 19258
19257: POP
// if pom1 = 5 then
19258: LD_VAR 0 2
19262: PUSH
19263: LD_INT 5
19265: EQUAL
19266: IFFALSE 19278
// pom2 = 4 else
19268: LD_ADDR_VAR 0 3
19272: PUSH
19273: LD_INT 4
19275: ST_TO_ADDR
19276: GO 19329
// if pom1 in [ 3 , 4 ] then
19278: LD_VAR 0 2
19282: PUSH
19283: LD_INT 3
19285: PUSH
19286: LD_INT 4
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: IN
19293: IFFALSE 19313
// pom2 = Rand ( 2 , 4 ) else
19295: LD_ADDR_VAR 0 3
19299: PUSH
19300: LD_INT 2
19302: PPUSH
19303: LD_INT 4
19305: PPUSH
19306: CALL_OW 12
19310: ST_TO_ADDR
19311: GO 19329
// pom2 = Rand ( 1 , 4 ) ;
19313: LD_ADDR_VAR 0 3
19317: PUSH
19318: LD_INT 1
19320: PPUSH
19321: LD_INT 4
19323: PPUSH
19324: CALL_OW 12
19328: ST_TO_ADDR
// case pom2 of 1 :
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 1
19336: DOUBLE
19337: EQUAL
19338: IFTRUE 19342
19340: GO 19353
19342: POP
// aa1 = us_light_wheeled ; 2 :
19343: LD_ADDR_VAR 0 6
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
19351: GO 19411
19353: LD_INT 2
19355: DOUBLE
19356: EQUAL
19357: IFTRUE 19361
19359: GO 19372
19361: POP
// aa1 = us_medium_wheeled ; 3 :
19362: LD_ADDR_VAR 0 6
19366: PUSH
19367: LD_INT 2
19369: ST_TO_ADDR
19370: GO 19411
19372: LD_INT 3
19374: DOUBLE
19375: EQUAL
19376: IFTRUE 19380
19378: GO 19391
19380: POP
// aa1 = us_medium_tracked ; 4 :
19381: LD_ADDR_VAR 0 6
19385: PUSH
19386: LD_INT 3
19388: ST_TO_ADDR
19389: GO 19411
19391: LD_INT 4
19393: DOUBLE
19394: EQUAL
19395: IFTRUE 19399
19397: GO 19410
19399: POP
// aa1 = us_heavy_tracked ; end ;
19400: LD_ADDR_VAR 0 6
19404: PUSH
19405: LD_INT 4
19407: ST_TO_ADDR
19408: GO 19411
19410: POP
// if pom2 <> 4 then
19411: LD_VAR 0 3
19415: PUSH
19416: LD_INT 4
19418: NONEQUAL
19419: IFFALSE 19439
// pom3 = Rand ( 1 , 3 ) else
19421: LD_ADDR_VAR 0 4
19425: PUSH
19426: LD_INT 1
19428: PPUSH
19429: LD_INT 3
19431: PPUSH
19432: CALL_OW 12
19436: ST_TO_ADDR
19437: GO 19455
// pom3 = Rand ( 2 , 3 ) ;
19439: LD_ADDR_VAR 0 4
19443: PUSH
19444: LD_INT 2
19446: PPUSH
19447: LD_INT 3
19449: PPUSH
19450: CALL_OW 12
19454: ST_TO_ADDR
// case pom3 of 1 :
19455: LD_VAR 0 4
19459: PUSH
19460: LD_INT 1
19462: DOUBLE
19463: EQUAL
19464: IFTRUE 19468
19466: GO 19479
19468: POP
// aa2 = engine_solar ; 2 :
19469: LD_ADDR_VAR 0 7
19473: PUSH
19474: LD_INT 2
19476: ST_TO_ADDR
19477: GO 19518
19479: LD_INT 2
19481: DOUBLE
19482: EQUAL
19483: IFTRUE 19487
19485: GO 19498
19487: POP
// aa2 = engine_combustion ; 3 :
19488: LD_ADDR_VAR 0 7
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
19496: GO 19518
19498: LD_INT 3
19500: DOUBLE
19501: EQUAL
19502: IFTRUE 19506
19504: GO 19517
19506: POP
// aa2 = engine_siberite ; end ;
19507: LD_ADDR_VAR 0 7
19511: PUSH
19512: LD_INT 3
19514: ST_TO_ADDR
19515: GO 19518
19517: POP
// aa = [ aa1 , aa2 , aa3 ] ;
19518: LD_ADDR_VAR 0 5
19522: PUSH
19523: LD_VAR 0 6
19527: PUSH
19528: LD_VAR 0 7
19532: PUSH
19533: LD_VAR 0 8
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: ST_TO_ADDR
// result = aa ;
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_VAR 0 5
19552: ST_TO_ADDR
// end ;
19553: LD_VAR 0 1
19557: RET
// every 0 0$5 trigger IsOK ( Am_snipe ) do var u , sl ;
19558: LD_EXP 70
19562: PPUSH
19563: CALL_OW 302
19567: IFFALSE 19692
19569: GO 19571
19571: DISABLE
19572: LD_INT 0
19574: PPUSH
19575: PPUSH
// begin sl = false ;
19576: LD_ADDR_VAR 0 2
19580: PUSH
19581: LD_INT 0
19583: ST_TO_ADDR
// if Attacks ( Am_snipe ) < 0 then
19584: LD_EXP 70
19588: PPUSH
19589: CALL_OW 320
19593: PUSH
19594: LD_INT 0
19596: LESS
19597: IFFALSE 19691
// begin u = Attacks ( Am_snipe ) ;
19599: LD_ADDR_VAR 0 1
19603: PUSH
19604: LD_EXP 70
19608: PPUSH
19609: CALL_OW 320
19613: ST_TO_ADDR
// if GetType ( u ) <> unit_vehicle then
19614: LD_VAR 0 1
19618: PPUSH
19619: CALL_OW 247
19623: PUSH
19624: LD_INT 2
19626: NONEQUAL
19627: IFFALSE 19639
// sl = true else
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 1
19636: ST_TO_ADDR
19637: GO 19662
// if GetControl ( u ) = control_manual then
19639: LD_VAR 0 1
19643: PPUSH
19644: CALL_OW 263
19648: PUSH
19649: LD_INT 1
19651: EQUAL
19652: IFFALSE 19662
// sl = true ;
19654: LD_ADDR_VAR 0 2
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if sl then
19662: LD_VAR 0 2
19666: IFFALSE 19691
// if Prob ( 45 ) then
19668: LD_INT 45
19670: PPUSH
19671: CALL_OW 13
19675: IFFALSE 19691
// ComAttackSoporific ( Am_snipe , u ) ;
19677: LD_EXP 70
19681: PPUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 166
// end ; enable ;
19691: ENABLE
// end ;
19692: PPOPN 2
19694: END
// every 0 0$1 do
19695: GO 19697
19697: DISABLE
// begin wait ( cas_prvniho_utoku [ difficulty ] ) ;
19698: LD_EXP 46
19702: PUSH
19703: LD_OWVAR 67
19707: ARRAY
19708: PPUSH
19709: CALL_OW 67
// UTOCENI = true ;
19713: LD_ADDR_LOC 9
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// end ;
19721: END
// every 0 0$1 trigger UTOCENI do var pom , i ; var cesty ;
19722: LD_LOC 9
19726: IFFALSE 20473
19728: GO 19730
19730: DISABLE
19731: LD_INT 0
19733: PPUSH
19734: PPUSH
19735: PPUSH
// begin pom = create_pre_attack ;
19736: LD_ADDR_VAR 0 1
19740: PUSH
19741: CALL 10466 0 0
19745: ST_TO_ADDR
// for i in pom do
19746: LD_ADDR_VAR 0 2
19750: PUSH
19751: LD_VAR 0 1
19755: PUSH
19756: FOR_IN
19757: IFFALSE 19776
// PlaceUnitArea ( i , Am_enter , false ) ;
19759: LD_VAR 0 2
19763: PPUSH
19764: LD_INT 19
19766: PPUSH
19767: LD_INT 0
19769: PPUSH
19770: CALL_OW 49
19774: GO 19756
19776: POP
19777: POP
// case cislo_baze of 1 :
19778: LD_EXP 9
19782: PUSH
19783: LD_INT 1
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19975
19791: POP
// cesty = [ [ [ 46 , 50 ] , [ 75 , 55 ] , [ 85 , 75 ] , [ 96 , 102 ] , [ 69 , 101 ] , [ 48 , 78 ] ] , [ [ 38 , 43 ] , [ 58 , 54 ] , [ 51 , 80 ] ] , [ [ 46 , 50 ] , [ 75 , 55 ] , [ 85 , 75 ] , [ 96 , 102 ] , [ 69 , 101 ] , [ 48 , 78 ] ] ] ; 2 :
19792: LD_ADDR_VAR 0 3
19796: PUSH
19797: LD_INT 46
19799: PUSH
19800: LD_INT 50
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 75
19809: PUSH
19810: LD_INT 55
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 85
19819: PUSH
19820: LD_INT 75
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 96
19829: PUSH
19830: LD_INT 102
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 69
19839: PUSH
19840: LD_INT 101
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 48
19849: PUSH
19850: LD_INT 78
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 38
19867: PUSH
19868: LD_INT 43
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 58
19877: PUSH
19878: LD_INT 54
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 51
19887: PUSH
19888: LD_INT 80
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 46
19902: PUSH
19903: LD_INT 50
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 75
19912: PUSH
19913: LD_INT 55
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 85
19922: PUSH
19923: LD_INT 75
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 96
19932: PUSH
19933: LD_INT 102
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 69
19942: PUSH
19943: LD_INT 101
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 48
19952: PUSH
19953: LD_INT 78
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: ST_TO_ADDR
19973: GO 20404
19975: LD_INT 2
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20156
19983: POP
// cesty = [ [ [ 40 , 47 ] , [ 61 , 52 ] , [ 59 , 76 ] , [ 59 , 85 ] , [ 71 , 99 ] , [ 97 , 103 ] ] , [ [ 42 , 46 ] , [ 71 , 48 ] , [ 81 , 66 ] , [ 96 , 98 ] ] , [ [ 42 , 46 ] , [ 71 , 48 ] , [ 81 , 66 ] , [ 96 , 98 ] ] ] ; 3 :
19984: LD_ADDR_VAR 0 3
19988: PUSH
19989: LD_INT 40
19991: PUSH
19992: LD_INT 47
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 61
20001: PUSH
20002: LD_INT 52
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 59
20011: PUSH
20012: LD_INT 76
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 59
20021: PUSH
20022: LD_INT 85
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 71
20031: PUSH
20032: LD_INT 99
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 97
20041: PUSH
20042: LD_INT 103
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 42
20059: PUSH
20060: LD_INT 46
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 71
20069: PUSH
20070: LD_INT 48
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 81
20079: PUSH
20080: LD_INT 66
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 96
20089: PUSH
20090: LD_INT 98
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 42
20105: PUSH
20106: LD_INT 46
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 71
20115: PUSH
20116: LD_INT 48
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 81
20125: PUSH
20126: LD_INT 66
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 96
20135: PUSH
20136: LD_INT 98
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: LIST
20153: ST_TO_ADDR
20154: GO 20404
20156: LD_INT 3
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20403
20164: POP
// cesty = [ [ [ 40 , 47 ] , [ 61 , 52 ] , [ 87 , 42 ] , [ 95 , 94 ] , [ 113 , 96 ] , [ 143 , 78 ] , [ 142 , 68 ] , [ 160 , 88 ] ] , [ [ 39 , 43 ] , [ 70 , 49 ] , [ 94 , 93 ] , [ 122 , 93 ] , [ 147 , 64 ] , [ 156 , 88 ] ] , [ [ 39 , 43 ] , [ 70 , 49 ] , [ 94 , 93 ] , [ 122 , 93 ] , [ 147 , 64 ] , [ 156 , 88 ] ] ] ; end ;
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_INT 40
20172: PUSH
20173: LD_INT 47
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 61
20182: PUSH
20183: LD_INT 52
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 87
20192: PUSH
20193: LD_INT 42
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 95
20202: PUSH
20203: LD_INT 94
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 113
20212: PUSH
20213: LD_INT 96
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 143
20222: PUSH
20223: LD_INT 78
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 142
20232: PUSH
20233: LD_INT 68
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 160
20242: PUSH
20243: LD_INT 88
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 39
20262: PUSH
20263: LD_INT 43
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 70
20272: PUSH
20273: LD_INT 49
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 94
20282: PUSH
20283: LD_INT 93
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 122
20292: PUSH
20293: LD_INT 93
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 147
20302: PUSH
20303: LD_INT 64
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 156
20312: PUSH
20313: LD_INT 88
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 39
20330: PUSH
20331: LD_INT 43
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 70
20340: PUSH
20341: LD_INT 49
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 94
20350: PUSH
20351: LD_INT 93
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 122
20360: PUSH
20361: LD_INT 93
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 147
20370: PUSH
20371: LD_INT 64
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 156
20380: PUSH
20381: LD_INT 88
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: ST_TO_ADDR
20401: GO 20404
20403: POP
// McMove ( 1 , pom , cesty [ Rand ( 1 , 3 ) ] , [ mc_move_dontcapture , mc_move_agressive , mc_move_waitwp ] ) ;
20404: LD_INT 1
20406: PPUSH
20407: LD_VAR 0 1
20411: PPUSH
20412: LD_VAR 0 3
20416: PUSH
20417: LD_INT 1
20419: PPUSH
20420: LD_INT 3
20422: PPUSH
20423: CALL_OW 12
20427: ARRAY
20428: PPUSH
20429: LD_INT 5
20431: PUSH
20432: LD_INT 6
20434: PUSH
20435: LD_INT 3
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: PPUSH
20443: CALL_OW 398
// wait ( cas_na_opakovani_preattacku [ difficulty ] ) ;
20447: LD_EXP 52
20451: PUSH
20452: LD_OWVAR 67
20456: ARRAY
20457: PPUSH
20458: CALL_OW 67
// if Am_utoky = 0 then
20462: LD_EXP 71
20466: PUSH
20467: LD_INT 0
20469: EQUAL
20470: IFFALSE 20473
// enable ;
20472: ENABLE
// end ;
20473: PPOPN 3
20475: END
// on VehicleConstructed ( veh , f ) do var pom ;
20476: LD_INT 0
20478: PPUSH
// begin if f = Am_tov then
20479: LD_VAR 0 2
20483: PUSH
20484: LD_INT 175
20486: EQUAL
20487: IFFALSE 20729
// begin pom = Rand ( 1 , 2 ) ;
20489: LD_ADDR_VAR 0 3
20493: PUSH
20494: LD_INT 1
20496: PPUSH
20497: LD_INT 2
20499: PPUSH
20500: CALL_OW 12
20504: ST_TO_ADDR
// case pom of 1 :
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 1
20512: DOUBLE
20513: EQUAL
20514: IFTRUE 20518
20516: GO 20619
20518: POP
// if IsOK ( Am_mech [ 1 ] ) then
20519: LD_EXP 68
20523: PUSH
20524: LD_INT 1
20526: ARRAY
20527: PPUSH
20528: CALL_OW 302
20532: IFFALSE 20569
// begin ComLinkTo ( veh , Am_mech [ 1 ] ) ;
20534: LD_VAR 0 1
20538: PPUSH
20539: LD_EXP 68
20543: PUSH
20544: LD_INT 1
20546: ARRAY
20547: PPUSH
20548: CALL_OW 135
// AddComMoveXY ( veh , 89 , 22 ) ;
20552: LD_VAR 0 1
20556: PPUSH
20557: LD_INT 89
20559: PPUSH
20560: LD_INT 22
20562: PPUSH
20563: CALL_OW 171
// end else
20567: GO 20617
// if IsOK ( Am_mech [ 2 ] ) then
20569: LD_EXP 68
20573: PUSH
20574: LD_INT 2
20576: ARRAY
20577: PPUSH
20578: CALL_OW 302
20582: IFFALSE 20617
// begin ComLinkTo ( veh , Am_mech [ 2 ] ) ;
20584: LD_VAR 0 1
20588: PPUSH
20589: LD_EXP 68
20593: PUSH
20594: LD_INT 2
20596: ARRAY
20597: PPUSH
20598: CALL_OW 135
// AddComMoveXY ( veh , 119 , 40 ) ;
20602: LD_VAR 0 1
20606: PPUSH
20607: LD_INT 119
20609: PPUSH
20610: LD_INT 40
20612: PPUSH
20613: CALL_OW 171
// end ; 2 :
20617: GO 20729
20619: LD_INT 2
20621: DOUBLE
20622: EQUAL
20623: IFTRUE 20627
20625: GO 20728
20627: POP
// if IsOK ( Am_mech [ 2 ] ) then
20628: LD_EXP 68
20632: PUSH
20633: LD_INT 2
20635: ARRAY
20636: PPUSH
20637: CALL_OW 302
20641: IFFALSE 20678
// begin ComLinkTo ( veh , Am_mech [ 2 ] ) ;
20643: LD_VAR 0 1
20647: PPUSH
20648: LD_EXP 68
20652: PUSH
20653: LD_INT 2
20655: ARRAY
20656: PPUSH
20657: CALL_OW 135
// AddComMoveXY ( veh , 119 , 40 ) ;
20661: LD_VAR 0 1
20665: PPUSH
20666: LD_INT 119
20668: PPUSH
20669: LD_INT 40
20671: PPUSH
20672: CALL_OW 171
// end else
20676: GO 20726
// if IsOK ( Am_mech [ 1 ] ) then
20678: LD_EXP 68
20682: PUSH
20683: LD_INT 1
20685: ARRAY
20686: PPUSH
20687: CALL_OW 302
20691: IFFALSE 20726
// begin ComLinkTo ( veh , Am_mech [ 1 ] ) ;
20693: LD_VAR 0 1
20697: PPUSH
20698: LD_EXP 68
20702: PUSH
20703: LD_INT 1
20705: ARRAY
20706: PPUSH
20707: CALL_OW 135
// AddComMoveXY ( veh , 89 , 22 ) ;
20711: LD_VAR 0 1
20715: PPUSH
20716: LD_INT 89
20718: PPUSH
20719: LD_INT 22
20721: PPUSH
20722: CALL_OW 171
// end ; end ;
20726: GO 20729
20728: POP
// end ; enable ;
20729: ENABLE
// end ;
20730: PPOPN 3
20732: END
// function cekej_na_utok ; var utoci ; var i , pom ; var aunits ; begin
20733: LD_INT 0
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
20739: PPUSH
// utoci = false ;
20740: LD_ADDR_VAR 0 2
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// aunits = FilterUnitsInArea ( Am_base_at , [ [ f_side , Amici ] ] ) ;
20748: LD_ADDR_VAR 0 5
20752: PUSH
20753: LD_INT 25
20755: PPUSH
20756: LD_INT 22
20758: PUSH
20759: LD_EXP 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: PPUSH
20771: CALL_OW 70
20775: ST_TO_ADDR
// while not utoci do
20776: LD_VAR 0 2
20780: NOT
20781: IFFALSE 20874
// begin pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
20783: LD_ADDR_VAR 0 4
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_EXP 1
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: PPUSH
20803: CALL_OW 69
20807: ST_TO_ADDR
// for i in pom do
20808: LD_ADDR_VAR 0 3
20812: PUSH
20813: LD_VAR 0 4
20817: PUSH
20818: FOR_IN
20819: IFFALSE 20863
// if Attacks ( i ) <> 0 then
20821: LD_VAR 0 3
20825: PPUSH
20826: CALL_OW 320
20830: PUSH
20831: LD_INT 0
20833: NONEQUAL
20834: IFFALSE 20861
// if Attacks ( i ) in aunits then
20836: LD_VAR 0 3
20840: PPUSH
20841: CALL_OW 320
20845: PUSH
20846: LD_VAR 0 5
20850: IN
20851: IFFALSE 20861
// utoci = true ;
20853: LD_ADDR_VAR 0 2
20857: PUSH
20858: LD_INT 1
20860: ST_TO_ADDR
20861: GO 20818
20863: POP
20864: POP
// wait ( 0 0$10 ) ;
20865: LD_INT 350
20867: PPUSH
20868: CALL_OW 67
// end ;
20872: GO 20776
// wait ( doba_od_utoku_k_uteku_vedcu [ difficulty ] ) ;
20874: LD_EXP 48
20878: PUSH
20879: LD_OWVAR 67
20883: ARRAY
20884: PPUSH
20885: CALL_OW 67
// end ;
20889: LD_VAR 0 1
20893: RET
// export function test_na_vedce ; var i ; var OK ; begin
20894: LD_INT 0
20896: PPUSH
20897: PPUSH
20898: PPUSH
// OK = true ;
20899: LD_ADDR_VAR 0 3
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// for i in VEDCI1 do
20907: LD_ADDR_VAR 0 2
20911: PUSH
20912: LD_EXP 63
20916: PUSH
20917: FOR_IN
20918: IFFALSE 20941
// if IsLive ( i ) then
20920: LD_VAR 0 2
20924: PPUSH
20925: CALL_OW 300
20929: IFFALSE 20939
// OK = false ;
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: LD_INT 0
20938: ST_TO_ADDR
20939: GO 20917
20941: POP
20942: POP
// for i in VEDCI2 do
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_EXP 64
20952: PUSH
20953: FOR_IN
20954: IFFALSE 20977
// if IsLive ( i ) then
20956: LD_VAR 0 2
20960: PPUSH
20961: CALL_OW 300
20965: IFFALSE 20975
// OK = false ;
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
20975: GO 20953
20977: POP
20978: POP
// for i in VEDCI3 do
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_EXP 65
20988: PUSH
20989: FOR_IN
20990: IFFALSE 21013
// if IsLive ( i ) then
20992: LD_VAR 0 2
20996: PPUSH
20997: CALL_OW 300
21001: IFFALSE 21011
// OK = false ;
21003: LD_ADDR_VAR 0 3
21007: PUSH
21008: LD_INT 0
21010: ST_TO_ADDR
21011: GO 20989
21013: POP
21014: POP
// result := OK ;
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_VAR 0 3
21024: ST_TO_ADDR
// end ; end_of_file
21025: LD_VAR 0 1
21029: RET
// every 0 0$2 + 0 0$0.1 do
21030: GO 21032
21032: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
21033: LD_INT 22
21035: PUSH
21036: LD_INT 3
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 25
21048: PUSH
21049: LD_INT 12
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 25
21058: PUSH
21059: LD_INT 16
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 25
21068: PUSH
21069: LD_INT 15
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 25
21078: PUSH
21079: LD_INT 17
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PPUSH
21097: CALL_OW 69
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_INT 3
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 21
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 3
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: LD_INT 25
21130: PUSH
21131: LD_INT 12
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 25
21140: PUSH
21141: LD_INT 16
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 25
21150: PUSH
21151: LD_INT 15
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 25
21160: PUSH
21161: LD_INT 17
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: GREATER
21189: IFFALSE 21200
// begin SetAchievement ( ACH_POTA ) ;
21191: LD_STRING ACH_POTA
21193: PPUSH
21194: CALL_OW 543
// exit ;
21198: GO 21201
// end ; enable ;
21200: ENABLE
// end ;
21201: END
// export function SA_NoThanksGensher ; begin
21202: LD_INT 0
21204: PPUSH
// SetAchievement ( ACH_NOT ) ;
21205: LD_STRING ACH_NOT
21207: PPUSH
21208: CALL_OW 543
// end ;
21212: LD_VAR 0 1
21216: RET
// export function SA_MeatGrinder ( n ) ; begin
21217: LD_INT 0
21219: PPUSH
// SetAchievementEx ( ACH_MTG , n ) ;
21220: LD_STRING ACH_MTG
21222: PPUSH
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 564
// end ; end_of_file
21232: LD_VAR 0 2
21236: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
21237: LD_INT 0
21239: PPUSH
21240: PPUSH
// if not missionNumber then
21241: LD_VAR 0 2
21245: NOT
21246: IFFALSE 21250
// exit ;
21248: GO 21380
// achiv := false ;
21250: LD_ADDR_VAR 0 7
21254: PUSH
21255: LD_INT 0
21257: ST_TO_ADDR
// case campaignNumber of 1 :
21258: LD_VAR 0 1
21262: PUSH
21263: LD_INT 1
21265: DOUBLE
21266: EQUAL
21267: IFTRUE 21271
21269: GO 21282
21271: POP
// achiv := ACH_GOTA ; 2 :
21272: LD_ADDR_VAR 0 7
21276: PUSH
21277: LD_STRING ACH_GOTA
21279: ST_TO_ADDR
21280: GO 21332
21282: LD_INT 2
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21293
21290: POP
// ; 3 :
21291: GO 21332
21293: LD_INT 3
21295: DOUBLE
21296: EQUAL
21297: IFTRUE 21301
21299: GO 21312
21301: POP
// achiv := ACH_MOTSU ; 4 :
21302: LD_ADDR_VAR 0 7
21306: PUSH
21307: LD_STRING ACH_MOTSU
21309: ST_TO_ADDR
21310: GO 21332
21312: LD_INT 4
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21331
21320: POP
// achiv := ACH_LOP ; end ;
21321: LD_ADDR_VAR 0 7
21325: PUSH
21326: LD_STRING ACH_LOP
21328: ST_TO_ADDR
21329: GO 21332
21331: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
21332: LD_OWVAR 67
21336: PUSH
21337: LD_INT 3
21339: EQUAL
21340: PUSH
21341: LD_VAR 0 7
21345: AND
21346: PUSH
21347: LD_VAR 0 3
21351: AND
21352: PUSH
21353: LD_VAR 0 4
21357: AND
21358: PUSH
21359: LD_VAR 0 5
21363: AND
21364: IFFALSE 21380
// SetAchievementEX ( achiv , missionNumber ) ;
21366: LD_VAR 0 7
21370: PPUSH
21371: LD_VAR 0 2
21375: PPUSH
21376: CALL_OW 564
// end ;
21380: LD_VAR 0 6
21384: RET
