// export ru , am , al , le , sr ; export ams0 , ams1 , ams2 , ams3 , ams4 ; export ams0_sk , ams1_sk , ams2_sk , ams3_sk , ams4_sk ; export ams_1 , ams_2 , ams_3 , ams_4 ; export ams_1_sk , ams_2_sk , ams_3_sk , ams_4_sk ; export amm0 , amm0_sk , amm1 , amm1_sk , amm2 , amm2_sk , amm3 , amm3_sk , amm4 , amm4_sk , amm5 , amm5_sk , amm6 , amm6_sk ; export amv1 , amv1_ch , amv1_wp , amv2 , amv2_ch , amv2_wp , amv3 , amv3_ch , amv3_wp , amv4 , amv4_ch , amv4_wp , amv5 , amv5_ch , amv5_wp , amv6 , amv6_ch , amv6_wp ; export amsm0 , amsm1 , amsm2 , amsm3 , amsm4 , amsm5 ; export amsm0_sk , amsm1_sk , amsm2_sk , amsm3_sk , amsm4_sk , amsm5_sk ; export amsn0 , amsn0_sk , amsn1 , amsn1_sk , amsn2 , amsn2_sk ; export ame0 , ame0_sk , ame1 , ame1_sk , ame2 , ame2_sk , ame3 , ame3_sk , ame4 , ame4_sk ; export als0 , als1 , als2 , als3 , als4 ; export als0_sk , als1_sk , als2_sk , als3_sk , als4_sk ; export als_1 , als_2 , als_3 , als_4 ; export als_1_sk , als_2_sk , als_3_sk , als_4_sk ; export als__1 , als__2 , als__3 , als__4 ; export als__1_sk , als__2_sk , als__3_sk , als__4_sk ; export alm0 , alm0_sk , alm1 , alm1_sk , alm2 , alm2_sk , alm3 , alm3_sk , alm4 , alm4_sk , alm5 , alm5_sk , alm6 , alm6_sk ; export alv1 , alv1_ch , alv1_wp , alv2 , alv2_ch , alv2_wp , alv3 , alv3_ch , alv3_wp , alv4 , alv4_ch , alv4_wp , alv5 , alv5_ch , alv5_wp , alv6 , alv6_ch , alv6_wp ; export alsn0 , alsn0_sk , alsn1 , alsn1_sk , alsn2 , alsn2_sk ; export ale0 , ale0_sk , ale1 , ale1_sk , ale2 , ale2_sk , ale3 , ale3_sk ; export les0 , les1 , les2 ; export les0_sk , les1_sk , les2_sk ; export les_1 , les_2 , les_3 , les_4 ; export les_1_sk , les_2_sk , les_3_sk , les_4_sk ; export lem0 , lem0_sk , lem1 , lem1_sk , lem2 , lem2_sk , lem3 , lem3_sk ; export lev1 , lev1_ch , lev1_wp , lev2 , lev2_ch , lev2_wp , lev3 , lev3_ch , lev3_wp ; export lee0 , lee0_sk , lee1 , lee1_sk , lee2 , lee2_sk ; export lesc_1_sk , lesc_2_sk , lesc_3_sk , lesc_1 , lesc_2 , lesc_3 ; export poticadlo_min , poticadlo_max , lestavidul_min , lestavidul_max , amdoustavit_min , amdoustavit_max , al_att_min , al_att_max ; export albudovy , ambudovy , lebudovy , bdkoef , le_def_sk ; export fst_vybuch , lestavidul , amdoustavit ; export total_sr , al_att , al_def_skill , ru_def_skill , regid , al_surr , am_surr , before_sib_res ; var supply ; function setvars ; begin
   0: LD_INT 0
   2: PPUSH
// ru = 3 ;
   3: LD_ADDR_EXP 1
   7: PUSH
   8: LD_INT 3
  10: ST_TO_ADDR
// am = 1 ;
  11: LD_ADDR_EXP 2
  15: PUSH
  16: LD_INT 1
  18: ST_TO_ADDR
// al = 7 ;
  19: LD_ADDR_EXP 3
  23: PUSH
  24: LD_INT 7
  26: ST_TO_ADDR
// le = 8 ;
  27: LD_ADDR_EXP 4
  31: PUSH
  32: LD_INT 8
  34: ST_TO_ADDR
// sr = 6 ;
  35: LD_ADDR_EXP 5
  39: PUSH
  40: LD_INT 6
  42: ST_TO_ADDR
// ambudovy = [ amware00 , amfact00 , amlabf00 , amlabf01 , ambarr00 , amsimn00 , amcntw00 , amsibp00 , amsibp01 , amsibp02 ] ;
  43: LD_ADDR_EXP 208
  47: PUSH
  48: LD_INT 5
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 12
  56: PUSH
  57: LD_INT 13
  59: PUSH
  60: LD_INT 14
  62: PUSH
  63: LD_INT 15
  65: PUSH
  66: LD_INT 16
  68: PUSH
  69: LD_INT 17
  71: PUSH
  72: LD_INT 18
  74: PUSH
  75: LD_INT 19
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: LIST
  82: LIST
  83: LIST
  84: LIST
  85: LIST
  86: LIST
  87: LIST
  88: LIST
  89: ST_TO_ADDR
// albudovy = [ alware00 , alfact00 , alfact01 , allab00 , allab01 , allab02 , albarr00 , albarr01 , alspow00 , alspow01 , alspow02 , alspow03 , alsbmn00 , alcttw00 , altelp00 ] ;
  90: LD_ADDR_EXP 207
  94: PUSH
  95: LD_INT 25
  97: PUSH
  98: LD_INT 26
 100: PUSH
 101: LD_INT 34
 103: PUSH
 104: LD_INT 40
 106: PUSH
 107: LD_INT 33
 109: PUSH
 110: LD_INT 32
 112: PUSH
 113: LD_INT 41
 115: PUSH
 116: LD_INT 42
 118: PUSH
 119: LD_INT 46
 121: PUSH
 122: LD_INT 44
 124: PUSH
 125: LD_INT 43
 127: PUSH
 128: LD_INT 50
 130: PUSH
 131: LD_INT 45
 133: PUSH
 134: LD_INT 47
 136: PUSH
 137: LD_INT 48
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// lebudovy = [ leware00 , lesmn00 , lebarr00 , lefact00 , lespow00 , lespow01 , lelabf00 , lelabf01 , lesopw02 , ledepo00 ] ;
 157: LD_ADDR_EXP 209
 161: PUSH
 162: LD_INT 51
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: LD_INT 56
 170: PUSH
 171: LD_INT 57
 173: PUSH
 174: LD_INT 63
 176: PUSH
 177: LD_INT 66
 179: PUSH
 180: LD_INT 64
 182: PUSH
 183: LD_INT 65
 185: PUSH
 186: LD_INT 67
 188: PUSH
 189: LD_INT 72
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: ST_TO_ADDR
// rusacimajisib = false ;
 204: LD_ADDR_EXP 242
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// amsibdeveldone = false ;
 212: LD_ADDR_EXP 241
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// legionmed = false ;
 220: LD_ADDR_EXP 247
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// vyhrozoval = false ;
 228: LD_ADDR_EXP 243
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// hodiliju = false ;
 236: LD_ADDR_EXP 246
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// lesurr = false ;
 244: LD_ADDR_EXP 248
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// fst_vybuch = 1 ;
 252: LD_ADDR_EXP 212
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// poticadlo_min = [ 12 , 6 , 6 ] [ difficulty ] ;
 260: LD_ADDR_EXP 199
 264: PUSH
 265: LD_INT 12
 267: PUSH
 268: LD_INT 6
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// poticadlo_max = [ 42 , 36 , 24 ] [ difficulty ] ;
 285: LD_ADDR_EXP 200
 289: PUSH
 290: LD_INT 42
 292: PUSH
 293: LD_INT 36
 295: PUSH
 296: LD_INT 24
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: LIST
 303: PUSH
 304: LD_OWVAR 67
 308: ARRAY
 309: ST_TO_ADDR
// lestavidul_min = [ 18 , 6 , 6 ] [ difficulty ] ;
 310: LD_ADDR_EXP 201
 314: PUSH
 315: LD_INT 18
 317: PUSH
 318: LD_INT 6
 320: PUSH
 321: LD_INT 6
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: PUSH
 329: LD_OWVAR 67
 333: ARRAY
 334: ST_TO_ADDR
// lestavidul_max = [ 30 , 18 , 12 ] [ difficulty ] ;
 335: LD_ADDR_EXP 202
 339: PUSH
 340: LD_INT 30
 342: PUSH
 343: LD_INT 18
 345: PUSH
 346: LD_INT 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_OWVAR 67
 358: ARRAY
 359: ST_TO_ADDR
// amdoustavit_min = [ 18 , 6 , 6 ] [ difficulty ] ;
 360: LD_ADDR_EXP 203
 364: PUSH
 365: LD_INT 18
 367: PUSH
 368: LD_INT 6
 370: PUSH
 371: LD_INT 6
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_OWVAR 67
 383: ARRAY
 384: ST_TO_ADDR
// amdoustavit_max = [ 30 , 18 , 12 ] [ difficulty ] ;
 385: LD_ADDR_EXP 204
 389: PUSH
 390: LD_INT 30
 392: PUSH
 393: LD_INT 18
 395: PUSH
 396: LD_INT 12
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: ST_TO_ADDR
// al_att_min = [ 90 , 90 , 60 ] [ difficulty ] ;
 410: LD_ADDR_EXP 205
 414: PUSH
 415: LD_INT 90
 417: PUSH
 418: LD_INT 90
 420: PUSH
 421: LD_INT 60
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: LIST
 428: PUSH
 429: LD_OWVAR 67
 433: ARRAY
 434: ST_TO_ADDR
// al_att_max = [ 150 , 120 , 90 ] [ difficulty ] ;
 435: LD_ADDR_EXP 206
 439: PUSH
 440: LD_INT 150
 442: PUSH
 443: LD_INT 120
 445: PUSH
 446: LD_INT 90
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: PUSH
 454: LD_OWVAR 67
 458: ARRAY
 459: ST_TO_ADDR
// poticadlo = rand ( poticadlo_min , poticadlo_max ) ;
 460: LD_ADDR_EXP 240
 464: PUSH
 465: LD_EXP 199
 469: PPUSH
 470: LD_EXP 200
 474: PPUSH
 475: CALL_OW 12
 479: ST_TO_ADDR
// lestavidul = rand ( lestavidul_min , lestavidul_max ) ;
 480: LD_ADDR_EXP 213
 484: PUSH
 485: LD_EXP 201
 489: PPUSH
 490: LD_EXP 202
 494: PPUSH
 495: CALL_OW 12
 499: ST_TO_ADDR
// amdoustavit = rand ( amdoustavit_min , amdoustavit_max ) ;
 500: LD_ADDR_EXP 214
 504: PUSH
 505: LD_EXP 203
 509: PPUSH
 510: LD_EXP 204
 514: PPUSH
 515: CALL_OW 12
 519: ST_TO_ADDR
// ledolu = 0 ;
 520: LD_ADDR_EXP 227
 524: PUSH
 525: LD_INT 0
 527: ST_TO_ADDR
// poziceledolu = [ [ 115 , 130 ] , [ 113 , 121 ] , [ 103 , 126 ] , [ 103 , 133 ] ] ;
 528: LD_ADDR_EXP 228
 532: PUSH
 533: LD_INT 115
 535: PUSH
 536: LD_INT 130
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 113
 545: PUSH
 546: LD_INT 121
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: LD_INT 103
 555: PUSH
 556: LD_INT 126
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 103
 565: PUSH
 566: LD_INT 133
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: ST_TO_ADDR
// vezeartef = 0 ;
 579: LD_ADDR_EXP 244
 583: PUSH
 584: LD_INT 0
 586: ST_TO_ADDR
// artef_gone = false ;
 587: LD_ADDR_EXP 245
 591: PUSH
 592: LD_INT 0
 594: ST_TO_ADDR
// total_sr = 0 ;
 595: LD_ADDR_EXP 215
 599: PUSH
 600: LD_INT 0
 602: ST_TO_ADDR
// al_att = rand ( al_att_min , al_att_max ) ;
 603: LD_ADDR_EXP 216
 607: PUSH
 608: LD_EXP 205
 612: PPUSH
 613: LD_EXP 206
 617: PPUSH
 618: CALL_OW 12
 622: ST_TO_ADDR
// regid = 0 ;
 623: LD_ADDR_EXP 219
 627: PUSH
 628: LD_INT 0
 630: ST_TO_ADDR
// al_surr = false ;
 631: LD_ADDR_EXP 220
 635: PUSH
 636: LD_INT 0
 638: ST_TO_ADDR
// am_surr = false ;
 639: LD_ADDR_EXP 221
 643: PUSH
 644: LD_INT 0
 646: ST_TO_ADDR
// before_sib_res = [ 20 20$0 , 10 10$0 , 0 ] [ difficulty ] ;
 647: LD_ADDR_EXP 222
 651: PUSH
 652: LD_INT 42000
 654: PUSH
 655: LD_INT 21000
 657: PUSH
 658: LD_INT 0
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PUSH
 666: LD_OWVAR 67
 670: ARRAY
 671: ST_TO_ADDR
// supply = 30 ;
 672: LD_ADDR_LOC 1
 676: PUSH
 677: LD_INT 30
 679: ST_TO_ADDR
// bdkoef = 3 ;
 680: LD_ADDR_EXP 210
 684: PUSH
 685: LD_INT 3
 687: ST_TO_ADDR
// ru_def_skill = [ 8 , 6 , 4 ] [ difficulty ] ;
 688: LD_ADDR_EXP 218
 692: PUSH
 693: LD_INT 8
 695: PUSH
 696: LD_INT 6
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: LIST
 706: PUSH
 707: LD_OWVAR 67
 711: ARRAY
 712: ST_TO_ADDR
// al_def_skill = [ 6 , 8 , 9 ] [ difficulty ] ;
 713: LD_ADDR_EXP 217
 717: PUSH
 718: LD_INT 6
 720: PUSH
 721: LD_INT 8
 723: PUSH
 724: LD_INT 9
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: LIST
 731: PUSH
 732: LD_OWVAR 67
 736: ARRAY
 737: ST_TO_ADDR
// le_def_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 738: LD_ADDR_EXP 211
 742: PUSH
 743: LD_INT 6
 745: PUSH
 746: LD_INT 8
 748: PUSH
 749: LD_INT 10
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_OWVAR 67
 761: ARRAY
 762: ST_TO_ADDR
// ams0_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 763: LD_ADDR_EXP 11
 767: PUSH
 768: LD_INT 6
 770: PUSH
 771: LD_INT 8
 773: PUSH
 774: LD_INT 10
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_OWVAR 67
 786: ARRAY
 787: ST_TO_ADDR
// ams1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 788: LD_ADDR_EXP 12
 792: PUSH
 793: LD_INT 6
 795: PUSH
 796: LD_INT 8
 798: PUSH
 799: LD_INT 10
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_OWVAR 67
 811: ARRAY
 812: ST_TO_ADDR
// ams2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 813: LD_ADDR_EXP 13
 817: PUSH
 818: LD_INT 6
 820: PUSH
 821: LD_INT 8
 823: PUSH
 824: LD_INT 10
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PUSH
 832: LD_OWVAR 67
 836: ARRAY
 837: ST_TO_ADDR
// ams3_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 838: LD_ADDR_EXP 14
 842: PUSH
 843: LD_INT 6
 845: PUSH
 846: LD_INT 8
 848: PUSH
 849: LD_INT 10
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: LD_OWVAR 67
 861: ARRAY
 862: ST_TO_ADDR
// ams4_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 863: LD_ADDR_EXP 15
 867: PUSH
 868: LD_INT 6
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: LD_INT 10
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: ST_TO_ADDR
// ams_1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_INT 6
 895: PUSH
 896: LD_INT 8
 898: PUSH
 899: LD_INT 10
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: LIST
 906: PUSH
 907: LD_OWVAR 67
 911: ARRAY
 912: ST_TO_ADDR
// ams_2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 913: LD_ADDR_EXP 21
 917: PUSH
 918: LD_INT 6
 920: PUSH
 921: LD_INT 8
 923: PUSH
 924: LD_INT 10
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_OWVAR 67
 936: ARRAY
 937: ST_TO_ADDR
// ams_3_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 938: LD_ADDR_EXP 22
 942: PUSH
 943: LD_INT 6
 945: PUSH
 946: LD_INT 8
 948: PUSH
 949: LD_INT 10
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: PUSH
 957: LD_OWVAR 67
 961: ARRAY
 962: ST_TO_ADDR
// ams_4_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 963: LD_ADDR_EXP 23
 967: PUSH
 968: LD_INT 6
 970: PUSH
 971: LD_INT 8
 973: PUSH
 974: LD_INT 10
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_OWVAR 67
 986: ARRAY
 987: ST_TO_ADDR
// amm0_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
 988: LD_ADDR_EXP 25
 992: PUSH
 993: LD_INT 6
 995: PUSH
 996: LD_INT 8
 998: PUSH
 999: LD_INT 10
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: PUSH
1007: LD_OWVAR 67
1011: ARRAY
1012: ST_TO_ADDR
// amm1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1013: LD_ADDR_EXP 27
1017: PUSH
1018: LD_INT 6
1020: PUSH
1021: LD_INT 8
1023: PUSH
1024: LD_INT 10
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_OWVAR 67
1036: ARRAY
1037: ST_TO_ADDR
// amm2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1038: LD_ADDR_EXP 29
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: LD_INT 8
1048: PUSH
1049: LD_INT 10
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_OWVAR 67
1061: ARRAY
1062: ST_TO_ADDR
// amm3_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1063: LD_ADDR_EXP 31
1067: PUSH
1068: LD_INT 6
1070: PUSH
1071: LD_INT 8
1073: PUSH
1074: LD_INT 10
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_OWVAR 67
1086: ARRAY
1087: ST_TO_ADDR
// amm4_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1088: LD_ADDR_EXP 33
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 8
1098: PUSH
1099: LD_INT 10
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_OWVAR 67
1111: ARRAY
1112: ST_TO_ADDR
// amm5_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1113: LD_ADDR_EXP 35
1117: PUSH
1118: LD_INT 6
1120: PUSH
1121: LD_INT 8
1123: PUSH
1124: LD_INT 10
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: LD_OWVAR 67
1136: ARRAY
1137: ST_TO_ADDR
// amm6_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1138: LD_ADDR_EXP 37
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 8
1148: PUSH
1149: LD_INT 10
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_OWVAR 67
1161: ARRAY
1162: ST_TO_ADDR
// amv1_ch = [ us_medium_tracked , us_morphling , us_heavy_tracked ] [ difficulty ] ;
1163: LD_ADDR_EXP 39
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: LD_INT 5
1173: PUSH
1174: LD_INT 4
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: ST_TO_ADDR
// amv1_wp = [ us_double_gun , us_heavy_gun , us_heavy_gun ] [ difficulty ] ;
1188: LD_ADDR_EXP 40
1192: PUSH
1193: LD_INT 5
1195: PUSH
1196: LD_INT 6
1198: PUSH
1199: LD_INT 6
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_OWVAR 67
1211: ARRAY
1212: ST_TO_ADDR
// amv2_ch = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
1213: LD_ADDR_EXP 42
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: LD_INT 3
1223: PUSH
1224: LD_INT 4
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_OWVAR 67
1236: ARRAY
1237: ST_TO_ADDR
// amv2_wp = [ us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ difficulty ] ;
1238: LD_ADDR_EXP 43
1242: PUSH
1243: LD_INT 7
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: LD_OWVAR 67
1261: ARRAY
1262: ST_TO_ADDR
// amv3_ch = [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
1263: LD_ADDR_EXP 45
1267: PUSH
1268: LD_INT 2
1270: PUSH
1271: LD_INT 3
1273: PUSH
1274: LD_INT 4
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PUSH
1282: LD_OWVAR 67
1286: ARRAY
1287: ST_TO_ADDR
// amv3_wp = [ us_laser , us_laser , us_laser ] [ difficulty ] ;
1288: LD_ADDR_EXP 46
1292: PUSH
1293: LD_INT 9
1295: PUSH
1296: LD_INT 9
1298: PUSH
1299: LD_INT 9
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: PUSH
1307: LD_OWVAR 67
1311: ARRAY
1312: ST_TO_ADDR
// amv4_ch = [ us_morphling , us_morphling , us_heavy_tracked ] [ difficulty ] ;
1313: LD_ADDR_EXP 48
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 5
1323: PUSH
1324: LD_INT 4
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_OWVAR 67
1336: ARRAY
1337: ST_TO_ADDR
// amv4_wp = [ us_heavy_gun , us_heavy_gun , us_heavy_gun ] [ difficulty ] ;
1338: LD_ADDR_EXP 49
1342: PUSH
1343: LD_INT 6
1345: PUSH
1346: LD_INT 6
1348: PUSH
1349: LD_INT 6
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_OWVAR 67
1361: ARRAY
1362: ST_TO_ADDR
// amv5_ch = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
1363: LD_ADDR_EXP 51
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 4
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_OWVAR 67
1386: ARRAY
1387: ST_TO_ADDR
// amv5_wp = [ us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ difficulty ] ;
1388: LD_ADDR_EXP 52
1392: PUSH
1393: LD_INT 7
1395: PUSH
1396: LD_INT 7
1398: PUSH
1399: LD_INT 7
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: PUSH
1407: LD_OWVAR 67
1411: ARRAY
1412: ST_TO_ADDR
// amv6_ch = [ us_heavy_tracked , us_heavy_tracked , us_heavy_tracked ] [ difficulty ] ;
1413: LD_ADDR_EXP 54
1417: PUSH
1418: LD_INT 4
1420: PUSH
1421: LD_INT 4
1423: PUSH
1424: LD_INT 4
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_OWVAR 67
1436: ARRAY
1437: ST_TO_ADDR
// amv6_wp = [ us_double_gun , us_heavy_gun , us_heavy_gun ] [ difficulty ] ;
1438: LD_ADDR_EXP 55
1442: PUSH
1443: LD_INT 5
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 6
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_OWVAR 67
1461: ARRAY
1462: ST_TO_ADDR
// amsm0_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1463: LD_ADDR_EXP 62
1467: PUSH
1468: LD_INT 5
1470: PUSH
1471: LD_INT 7
1473: PUSH
1474: LD_INT 9
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: PUSH
1482: LD_OWVAR 67
1486: ARRAY
1487: ST_TO_ADDR
// amsm1_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1488: LD_ADDR_EXP 63
1492: PUSH
1493: LD_INT 5
1495: PUSH
1496: LD_INT 7
1498: PUSH
1499: LD_INT 9
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: LD_OWVAR 67
1511: ARRAY
1512: ST_TO_ADDR
// amsm2_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1513: LD_ADDR_EXP 64
1517: PUSH
1518: LD_INT 5
1520: PUSH
1521: LD_INT 7
1523: PUSH
1524: LD_INT 9
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_OWVAR 67
1536: ARRAY
1537: ST_TO_ADDR
// amsm3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1538: LD_ADDR_EXP 65
1542: PUSH
1543: LD_INT 5
1545: PUSH
1546: LD_INT 7
1548: PUSH
1549: LD_INT 9
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: PUSH
1557: LD_OWVAR 67
1561: ARRAY
1562: ST_TO_ADDR
// amsm4_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1563: LD_ADDR_EXP 66
1567: PUSH
1568: LD_INT 5
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: LD_INT 9
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_OWVAR 67
1586: ARRAY
1587: ST_TO_ADDR
// amsm5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1588: LD_ADDR_EXP 67
1592: PUSH
1593: LD_INT 5
1595: PUSH
1596: LD_INT 7
1598: PUSH
1599: LD_INT 9
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_OWVAR 67
1611: ARRAY
1612: ST_TO_ADDR
// amsn0_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1613: LD_ADDR_EXP 69
1617: PUSH
1618: LD_INT 6
1620: PUSH
1621: LD_INT 8
1623: PUSH
1624: LD_INT 10
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: ST_TO_ADDR
// amsn1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1638: LD_ADDR_EXP 71
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: LD_INT 8
1648: PUSH
1649: LD_INT 10
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_OWVAR 67
1661: ARRAY
1662: ST_TO_ADDR
// amsn2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1663: LD_ADDR_EXP 73
1667: PUSH
1668: LD_INT 6
1670: PUSH
1671: LD_INT 8
1673: PUSH
1674: LD_INT 10
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: PUSH
1682: LD_OWVAR 67
1686: ARRAY
1687: ST_TO_ADDR
// ame0_sk = [ 6 , 9 , 10 ] [ difficulty ] ;
1688: LD_ADDR_EXP 75
1692: PUSH
1693: LD_INT 6
1695: PUSH
1696: LD_INT 9
1698: PUSH
1699: LD_INT 10
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_OWVAR 67
1711: ARRAY
1712: ST_TO_ADDR
// ame1_sk = [ 6 , 9 , 10 ] [ difficulty ] ;
1713: LD_ADDR_EXP 77
1717: PUSH
1718: LD_INT 6
1720: PUSH
1721: LD_INT 9
1723: PUSH
1724: LD_INT 10
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: LD_OWVAR 67
1736: ARRAY
1737: ST_TO_ADDR
// ame2_sk = [ 6 , 9 , 10 ] [ difficulty ] ;
1738: LD_ADDR_EXP 79
1742: PUSH
1743: LD_INT 6
1745: PUSH
1746: LD_INT 9
1748: PUSH
1749: LD_INT 10
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_OWVAR 67
1761: ARRAY
1762: ST_TO_ADDR
// ame3_sk = [ 6 , 9 , 10 ] [ difficulty ] ;
1763: LD_ADDR_EXP 81
1767: PUSH
1768: LD_INT 6
1770: PUSH
1771: LD_INT 9
1773: PUSH
1774: LD_INT 10
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_OWVAR 67
1786: ARRAY
1787: ST_TO_ADDR
// ame4_sk = [ 6 , 9 , 10 ] [ difficulty ] ;
1788: LD_ADDR_EXP 83
1792: PUSH
1793: LD_INT 6
1795: PUSH
1796: LD_INT 9
1798: PUSH
1799: LD_INT 10
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_OWVAR 67
1811: ARRAY
1812: ST_TO_ADDR
// als0_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1813: LD_ADDR_EXP 89
1817: PUSH
1818: LD_INT 6
1820: PUSH
1821: LD_INT 8
1823: PUSH
1824: LD_INT 10
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_OWVAR 67
1836: ARRAY
1837: ST_TO_ADDR
// als1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1838: LD_ADDR_EXP 90
1842: PUSH
1843: LD_INT 6
1845: PUSH
1846: LD_INT 8
1848: PUSH
1849: LD_INT 10
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_OWVAR 67
1861: ARRAY
1862: ST_TO_ADDR
// als2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1863: LD_ADDR_EXP 91
1867: PUSH
1868: LD_INT 6
1870: PUSH
1871: LD_INT 8
1873: PUSH
1874: LD_INT 10
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: PUSH
1882: LD_OWVAR 67
1886: ARRAY
1887: ST_TO_ADDR
// als3_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1888: LD_ADDR_EXP 92
1892: PUSH
1893: LD_INT 6
1895: PUSH
1896: LD_INT 8
1898: PUSH
1899: LD_INT 10
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: LD_OWVAR 67
1911: ARRAY
1912: ST_TO_ADDR
// als4_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1913: LD_ADDR_EXP 93
1917: PUSH
1918: LD_INT 6
1920: PUSH
1921: LD_INT 8
1923: PUSH
1924: LD_INT 10
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_OWVAR 67
1936: ARRAY
1937: ST_TO_ADDR
// als_1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1938: LD_ADDR_EXP 98
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: LD_INT 8
1948: PUSH
1949: LD_INT 10
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: LD_OWVAR 67
1961: ARRAY
1962: ST_TO_ADDR
// als_2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1963: LD_ADDR_EXP 99
1967: PUSH
1968: LD_INT 6
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 10
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_OWVAR 67
1986: ARRAY
1987: ST_TO_ADDR
// als_3_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
1988: LD_ADDR_EXP 100
1992: PUSH
1993: LD_INT 6
1995: PUSH
1996: LD_INT 8
1998: PUSH
1999: LD_INT 10
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_OWVAR 67
2011: ARRAY
2012: ST_TO_ADDR
// als_4_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2013: LD_ADDR_EXP 101
2017: PUSH
2018: LD_INT 6
2020: PUSH
2021: LD_INT 8
2023: PUSH
2024: LD_INT 10
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_OWVAR 67
2036: ARRAY
2037: ST_TO_ADDR
// als__1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2038: LD_ADDR_EXP 106
2042: PUSH
2043: LD_INT 6
2045: PUSH
2046: LD_INT 8
2048: PUSH
2049: LD_INT 10
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: LD_OWVAR 67
2061: ARRAY
2062: ST_TO_ADDR
// als__2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2063: LD_ADDR_EXP 107
2067: PUSH
2068: LD_INT 6
2070: PUSH
2071: LD_INT 8
2073: PUSH
2074: LD_INT 10
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: LD_OWVAR 67
2086: ARRAY
2087: ST_TO_ADDR
// als__3_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2088: LD_ADDR_EXP 108
2092: PUSH
2093: LD_INT 6
2095: PUSH
2096: LD_INT 8
2098: PUSH
2099: LD_INT 10
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: LD_OWVAR 67
2111: ARRAY
2112: ST_TO_ADDR
// als__4_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2113: LD_ADDR_EXP 109
2117: PUSH
2118: LD_INT 6
2120: PUSH
2121: LD_INT 8
2123: PUSH
2124: LD_INT 10
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: LD_OWVAR 67
2136: ARRAY
2137: ST_TO_ADDR
// alm0_sk = [ 5 , 8 , 9 ] [ difficulty ] ;
2138: LD_ADDR_EXP 111
2142: PUSH
2143: LD_INT 5
2145: PUSH
2146: LD_INT 8
2148: PUSH
2149: LD_INT 9
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: ST_TO_ADDR
// alm1_sk = [ 6 , 8 , 9 ] [ difficulty ] ;
2163: LD_ADDR_EXP 113
2167: PUSH
2168: LD_INT 6
2170: PUSH
2171: LD_INT 8
2173: PUSH
2174: LD_INT 9
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: LIST
2181: PUSH
2182: LD_OWVAR 67
2186: ARRAY
2187: ST_TO_ADDR
// alm2_sk = [ 5 , 8 , 9 ] [ difficulty ] ;
2188: LD_ADDR_EXP 115
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: LD_INT 8
2198: PUSH
2199: LD_INT 9
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: LIST
2206: PUSH
2207: LD_OWVAR 67
2211: ARRAY
2212: ST_TO_ADDR
// alm3_sk = [ 6 , 8 , 9 ] [ difficulty ] ;
2213: LD_ADDR_EXP 117
2217: PUSH
2218: LD_INT 6
2220: PUSH
2221: LD_INT 8
2223: PUSH
2224: LD_INT 9
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_OWVAR 67
2236: ARRAY
2237: ST_TO_ADDR
// alm4_sk = [ 5 , 8 , 9 ] [ difficulty ] ;
2238: LD_ADDR_EXP 119
2242: PUSH
2243: LD_INT 5
2245: PUSH
2246: LD_INT 8
2248: PUSH
2249: LD_INT 9
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: LD_OWVAR 67
2261: ARRAY
2262: ST_TO_ADDR
// alm5_sk = [ 6 , 8 , 9 ] [ difficulty ] ;
2263: LD_ADDR_EXP 121
2267: PUSH
2268: LD_INT 6
2270: PUSH
2271: LD_INT 8
2273: PUSH
2274: LD_INT 9
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_OWVAR 67
2286: ARRAY
2287: ST_TO_ADDR
// alm6_sk = [ 6 , 8 , 9 ] [ difficulty ] ;
2288: LD_ADDR_EXP 123
2292: PUSH
2293: LD_INT 6
2295: PUSH
2296: LD_INT 8
2298: PUSH
2299: LD_INT 9
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: LIST
2306: PUSH
2307: LD_OWVAR 67
2311: ARRAY
2312: ST_TO_ADDR
// alv1_ch = [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
2313: LD_ADDR_EXP 125
2317: PUSH
2318: LD_INT 2
2320: PUSH
2321: LD_INT 3
2323: PUSH
2324: LD_INT 4
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: LIST
2331: PUSH
2332: LD_OWVAR 67
2336: ARRAY
2337: ST_TO_ADDR
// alv1_wp = [ us_laser , us_laser , us_laser ] [ difficulty ] ;
2338: LD_ADDR_EXP 126
2342: PUSH
2343: LD_INT 9
2345: PUSH
2346: LD_INT 9
2348: PUSH
2349: LD_INT 9
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_OWVAR 67
2361: ARRAY
2362: ST_TO_ADDR
// alv2_ch = [ us_medium_tracked , us_morphling , us_heavy_tracked ] [ difficulty ] ;
2363: LD_ADDR_EXP 128
2367: PUSH
2368: LD_INT 3
2370: PUSH
2371: LD_INT 5
2373: PUSH
2374: LD_INT 4
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_OWVAR 67
2386: ARRAY
2387: ST_TO_ADDR
// alv2_wp = [ us_double_gun , us_heavy_gun , us_heavy_gun ] [ difficulty ] ;
2388: LD_ADDR_EXP 129
2392: PUSH
2393: LD_INT 5
2395: PUSH
2396: LD_INT 6
2398: PUSH
2399: LD_INT 6
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: PUSH
2407: LD_OWVAR 67
2411: ARRAY
2412: ST_TO_ADDR
// alv3_ch = [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ difficulty ] ;
2413: LD_ADDR_EXP 131
2417: PUSH
2418: LD_INT 21
2420: PUSH
2421: LD_INT 22
2423: PUSH
2424: LD_INT 24
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: PUSH
2432: LD_OWVAR 67
2436: ARRAY
2437: ST_TO_ADDR
// alv3_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
2438: LD_ADDR_EXP 132
2442: PUSH
2443: LD_INT 43
2445: PUSH
2446: LD_INT 43
2448: PUSH
2449: LD_INT 43
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: PUSH
2457: LD_OWVAR 67
2461: ARRAY
2462: ST_TO_ADDR
// alv4_ch = [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ difficulty ] ;
2463: LD_ADDR_EXP 134
2467: PUSH
2468: LD_INT 22
2470: PUSH
2471: LD_INT 22
2473: PUSH
2474: LD_INT 24
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: PUSH
2482: LD_OWVAR 67
2486: ARRAY
2487: ST_TO_ADDR
// alv4_wp = [ ru_rocket_launcher , ru_rocket_launcher , ru_rocket_launcher ] [ difficulty ] ;
2488: LD_ADDR_EXP 135
2492: PUSH
2493: LD_INT 45
2495: PUSH
2496: LD_INT 45
2498: PUSH
2499: LD_INT 45
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_OWVAR 67
2511: ARRAY
2512: ST_TO_ADDR
// alv5_ch = [ us_medium_tracked , us_morphling , us_heavy_tracked ] [ difficulty ] ;
2513: LD_ADDR_EXP 137
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: LD_INT 5
2523: PUSH
2524: LD_INT 4
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PUSH
2532: LD_OWVAR 67
2536: ARRAY
2537: ST_TO_ADDR
// alv5_wp = [ us_laser , us_laser , us_laser ] [ difficulty ] ;
2538: LD_ADDR_EXP 138
2542: PUSH
2543: LD_INT 9
2545: PUSH
2546: LD_INT 9
2548: PUSH
2549: LD_INT 9
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: PUSH
2557: LD_OWVAR 67
2561: ARRAY
2562: ST_TO_ADDR
// alv6_ch = [ us_medium_tracked , us_morphling , us_heavy_tracked ] [ difficulty ] ;
2563: LD_ADDR_EXP 140
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: LD_INT 5
2573: PUSH
2574: LD_INT 4
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PUSH
2582: LD_OWVAR 67
2586: ARRAY
2587: ST_TO_ADDR
// alv6_wp = [ us_laser , us_laser , us_laser ] [ difficulty ] ;
2588: LD_ADDR_EXP 141
2592: PUSH
2593: LD_INT 9
2595: PUSH
2596: LD_INT 9
2598: PUSH
2599: LD_INT 9
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: PUSH
2607: LD_OWVAR 67
2611: ARRAY
2612: ST_TO_ADDR
// alsn0_sk = [ 6 , 8 , 9 ] [ difficulty ] ;
2613: LD_ADDR_EXP 143
2617: PUSH
2618: LD_INT 6
2620: PUSH
2621: LD_INT 8
2623: PUSH
2624: LD_INT 9
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_OWVAR 67
2636: ARRAY
2637: ST_TO_ADDR
// alsn1_sk = [ 6 , 8 , 9 ] [ difficulty ] ;
2638: LD_ADDR_EXP 145
2642: PUSH
2643: LD_INT 6
2645: PUSH
2646: LD_INT 8
2648: PUSH
2649: LD_INT 9
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// alsn2_sk = [ 6 , 7 , 8 ] [ difficulty ] ;
2663: LD_ADDR_EXP 147
2667: PUSH
2668: LD_INT 6
2670: PUSH
2671: LD_INT 7
2673: PUSH
2674: LD_INT 8
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PUSH
2682: LD_OWVAR 67
2686: ARRAY
2687: ST_TO_ADDR
// ale0_sk = [ 7 , 8 , 10 ] [ difficulty ] ;
2688: LD_ADDR_EXP 149
2692: PUSH
2693: LD_INT 7
2695: PUSH
2696: LD_INT 8
2698: PUSH
2699: LD_INT 10
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: ARRAY
2712: ST_TO_ADDR
// ale1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2713: LD_ADDR_EXP 151
2717: PUSH
2718: LD_INT 6
2720: PUSH
2721: LD_INT 8
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: PUSH
2732: LD_OWVAR 67
2736: ARRAY
2737: ST_TO_ADDR
// ale2_sk = [ 7 , 8 , 10 ] [ difficulty ] ;
2738: LD_ADDR_EXP 153
2742: PUSH
2743: LD_INT 7
2745: PUSH
2746: LD_INT 8
2748: PUSH
2749: LD_INT 10
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: LIST
2756: PUSH
2757: LD_OWVAR 67
2761: ARRAY
2762: ST_TO_ADDR
// ale3_sk = [ 7 , 8 , 10 ] [ difficulty ] ;
2763: LD_ADDR_EXP 155
2767: PUSH
2768: LD_INT 7
2770: PUSH
2771: LD_INT 8
2773: PUSH
2774: LD_INT 10
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_OWVAR 67
2786: ARRAY
2787: ST_TO_ADDR
// les0_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2788: LD_ADDR_EXP 159
2792: PUSH
2793: LD_INT 6
2795: PUSH
2796: LD_INT 8
2798: PUSH
2799: LD_INT 10
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_OWVAR 67
2811: ARRAY
2812: ST_TO_ADDR
// les1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2813: LD_ADDR_EXP 160
2817: PUSH
2818: LD_INT 6
2820: PUSH
2821: LD_INT 8
2823: PUSH
2824: LD_INT 10
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: LIST
2831: PUSH
2832: LD_OWVAR 67
2836: ARRAY
2837: ST_TO_ADDR
// les2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2838: LD_ADDR_EXP 161
2842: PUSH
2843: LD_INT 6
2845: PUSH
2846: LD_INT 8
2848: PUSH
2849: LD_INT 10
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: LD_OWVAR 67
2861: ARRAY
2862: ST_TO_ADDR
// les_1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2863: LD_ADDR_EXP 166
2867: PUSH
2868: LD_INT 6
2870: PUSH
2871: LD_INT 8
2873: PUSH
2874: LD_INT 10
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_OWVAR 67
2886: ARRAY
2887: ST_TO_ADDR
// les_2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2888: LD_ADDR_EXP 167
2892: PUSH
2893: LD_INT 6
2895: PUSH
2896: LD_INT 8
2898: PUSH
2899: LD_INT 10
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: LIST
2906: PUSH
2907: LD_OWVAR 67
2911: ARRAY
2912: ST_TO_ADDR
// les_3_sk = [ 7 , 9 , 10 ] [ difficulty ] ;
2913: LD_ADDR_EXP 168
2917: PUSH
2918: LD_INT 7
2920: PUSH
2921: LD_INT 9
2923: PUSH
2924: LD_INT 10
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: LIST
2931: PUSH
2932: LD_OWVAR 67
2936: ARRAY
2937: ST_TO_ADDR
// les_4_sk = [ 7 , 9 , 10 ] [ difficulty ] ;
2938: LD_ADDR_EXP 169
2942: PUSH
2943: LD_INT 7
2945: PUSH
2946: LD_INT 9
2948: PUSH
2949: LD_INT 10
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: LIST
2956: PUSH
2957: LD_OWVAR 67
2961: ARRAY
2962: ST_TO_ADDR
// lem0_sk = 10 ;
2963: LD_ADDR_EXP 171
2967: PUSH
2968: LD_INT 10
2970: ST_TO_ADDR
// lem1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
2971: LD_ADDR_EXP 173
2975: PUSH
2976: LD_INT 6
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: LD_INT 10
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_OWVAR 67
2994: ARRAY
2995: ST_TO_ADDR
// lem2_sk = [ 7 , 8 , 10 ] [ difficulty ] ;
2996: LD_ADDR_EXP 175
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_INT 8
3006: PUSH
3007: LD_INT 10
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: PUSH
3015: LD_OWVAR 67
3019: ARRAY
3020: ST_TO_ADDR
// lem3_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
3021: LD_ADDR_EXP 177
3025: PUSH
3026: LD_INT 6
3028: PUSH
3029: LD_INT 8
3031: PUSH
3032: LD_INT 10
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PUSH
3040: LD_OWVAR 67
3044: ARRAY
3045: ST_TO_ADDR
// lev1_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
3046: LD_ADDR_EXP 179
3050: PUSH
3051: LD_INT 13
3053: PUSH
3054: LD_INT 13
3056: PUSH
3057: LD_INT 14
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_OWVAR 67
3069: ARRAY
3070: ST_TO_ADDR
// lev1_wp = [ ar_flame_thrower , ar_flame_thrower , ar_flame_thrower ] [ difficulty ] ;
3071: LD_ADDR_EXP 180
3075: PUSH
3076: LD_INT 26
3078: PUSH
3079: LD_INT 26
3081: PUSH
3082: LD_INT 26
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: LIST
3089: PUSH
3090: LD_OWVAR 67
3094: ARRAY
3095: ST_TO_ADDR
// lev2_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
3096: LD_ADDR_EXP 182
3100: PUSH
3101: LD_INT 13
3103: PUSH
3104: LD_INT 13
3106: PUSH
3107: LD_INT 14
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: PUSH
3115: LD_OWVAR 67
3119: ARRAY
3120: ST_TO_ADDR
// lev2_wp = [ ar_flame_thrower , ar_flame_thrower , ar_flame_thrower ] [ difficulty ] ;
3121: LD_ADDR_EXP 183
3125: PUSH
3126: LD_INT 26
3128: PUSH
3129: LD_INT 26
3131: PUSH
3132: LD_INT 26
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: PUSH
3140: LD_OWVAR 67
3144: ARRAY
3145: ST_TO_ADDR
// lev3_ch = [ ar_half_tracked , ar_half_tracked , ar_half_tracked ] [ difficulty ] ;
3146: LD_ADDR_EXP 185
3150: PUSH
3151: LD_INT 14
3153: PUSH
3154: LD_INT 14
3156: PUSH
3157: LD_INT 14
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: PUSH
3165: LD_OWVAR 67
3169: ARRAY
3170: ST_TO_ADDR
// lev3_wp = [ ar_rocket_launcher , ar_rocket_launcher , ar_rocket_launcher ] [ difficulty ] ;
3171: LD_ADDR_EXP 186
3175: PUSH
3176: LD_INT 28
3178: PUSH
3179: LD_INT 28
3181: PUSH
3182: LD_INT 28
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_OWVAR 67
3194: ARRAY
3195: ST_TO_ADDR
// lee0_sk = [ 5 , 8 , 10 ] [ difficulty ] ;
3196: LD_ADDR_EXP 188
3200: PUSH
3201: LD_INT 5
3203: PUSH
3204: LD_INT 8
3206: PUSH
3207: LD_INT 10
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_OWVAR 67
3219: ARRAY
3220: ST_TO_ADDR
// lee1_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
3221: LD_ADDR_EXP 190
3225: PUSH
3226: LD_INT 6
3228: PUSH
3229: LD_INT 8
3231: PUSH
3232: LD_INT 10
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: PUSH
3240: LD_OWVAR 67
3244: ARRAY
3245: ST_TO_ADDR
// lee2_sk = [ 5 , 8 , 10 ] [ difficulty ] ;
3246: LD_ADDR_EXP 192
3250: PUSH
3251: LD_INT 5
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: LD_INT 10
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: LIST
3264: PUSH
3265: LD_OWVAR 67
3269: ARRAY
3270: ST_TO_ADDR
// lesc_1_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
3271: LD_ADDR_EXP 193
3275: PUSH
3276: LD_INT 5
3278: PUSH
3279: LD_INT 7
3281: PUSH
3282: LD_INT 9
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: LIST
3289: PUSH
3290: LD_OWVAR 67
3294: ARRAY
3295: ST_TO_ADDR
// lesc_2_sk = [ 6 , 8 , 10 ] [ difficulty ] ;
3296: LD_ADDR_EXP 194
3300: PUSH
3301: LD_INT 6
3303: PUSH
3304: LD_INT 8
3306: PUSH
3307: LD_INT 10
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: PUSH
3315: LD_OWVAR 67
3319: ARRAY
3320: ST_TO_ADDR
// lesc_3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
3321: LD_ADDR_EXP 195
3325: PUSH
3326: LD_INT 5
3328: PUSH
3329: LD_INT 7
3331: PUSH
3332: LD_INT 9
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: LIST
3339: PUSH
3340: LD_OWVAR 67
3344: ARRAY
3345: ST_TO_ADDR
// end ;
3346: LD_VAR 0 1
3350: RET
// export debug ; starting begin debug = false ;
3351: LD_ADDR_EXP 223
3355: PUSH
3356: LD_INT 0
3358: ST_TO_ADDR
// randomizeall ;
3359: CALL_OW 11
// disable ( 01 ) ;
3363: LD_INT 1
3365: DISABLE_MARKED
// disable ( 02 ) ;
3366: LD_INT 2
3368: DISABLE_MARKED
// disable ( 03 ) ;
3369: LD_INT 3
3371: DISABLE_MARKED
// disable ( 04 ) ;
3372: LD_INT 4
3374: DISABLE_MARKED
// disable ( 08 ) ;
3375: LD_INT 8
3377: DISABLE_MARKED
// disable ( 10 ) ;
3378: LD_INT 10
3380: DISABLE_MARKED
// setvars ;
3381: CALL 0 0 0
// prepare_americans ;
3385: CALL 8106 0 0
// prepare_aliance ;
3389: CALL 11153 0 0
// prepare_legion ;
3393: CALL 3633 0 0
// if debug then
3397: LD_EXP 223
3401: IFFALSE 3410
// msg ( Bacha, debug is on! ) ;
3403: LD_STRING Bacha, debug is on!
3405: PPUSH
3406: CALL_OW 100
// prepare_russians ;
3410: CALL 16717 0 0
// end ;
3414: END
// every 1 1$0 + 0 0$15 do
3415: GO 3417
3417: DISABLE
// begin createcratesarea ( 5 , target , true ) ;
3418: LD_INT 5
3420: PPUSH
3421: LD_INT 10
3423: PPUSH
3424: LD_INT 1
3426: PPUSH
3427: CALL_OW 55
// if supply < 10 then
3431: LD_LOC 1
3435: PUSH
3436: LD_INT 10
3438: LESS
3439: IFFALSE 3458
// begin supply = supply - 1 ;
3441: LD_ADDR_LOC 1
3445: PUSH
3446: LD_LOC 1
3450: PUSH
3451: LD_INT 1
3453: MINUS
3454: ST_TO_ADDR
// enable ;
3455: ENABLE
// end else
3456: GO 3461
// enable ( 01 ) ;
3458: LD_INT 1
3460: ENABLE_MARKED
// end ;
3461: END
// every 2 2$0 marked 01 do
3462: GO 3464
3464: DISABLE
// begin createcratesarea ( 5 , target , true ) ;
3465: LD_INT 5
3467: PPUSH
3468: LD_INT 10
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: CALL_OW 55
// if supply then
3478: LD_LOC 1
3482: IFFALSE 3501
// begin supply = supply - 1 ;
3484: LD_ADDR_LOC 1
3488: PUSH
3489: LD_LOC 1
3493: PUSH
3494: LD_INT 1
3496: MINUS
3497: ST_TO_ADDR
// enable ;
3498: ENABLE
// end else
3499: GO 3504
// enable ( 13 ) ;
3501: LD_INT 13
3503: ENABLE_MARKED
// end ;
3504: END
// every 4 4$0 marked 13 do
3505: GO 3507
3507: DISABLE
// begin createcratesarea ( 5 , target , true ) ;
3508: LD_INT 5
3510: PPUSH
3511: LD_INT 10
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 55
// end ;
3521: END
// every 0 0$7 do
3522: GO 3524
3524: DISABLE
// begin randomize ;
3525: CALL_OW 10
// enable ;
3529: ENABLE
// end ;
3530: END
// every 1 1$0 do
3531: GO 3533
3533: DISABLE
// begin enable ;
3534: ENABLE
// if filterunitsinarea ( opoles , [ [ f_side , 0 ] ] ) > 7 then
3535: LD_INT 21
3537: PPUSH
3538: LD_INT 22
3540: PUSH
3541: LD_INT 0
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PUSH
3548: EMPTY
3549: LIST
3550: PPUSH
3551: CALL_OW 70
3555: PUSH
3556: LD_INT 7
3558: GREATER
3559: IFFALSE 3563
// exit ;
3561: GO 3632
// if prob ( 33 ) then
3563: LD_INT 33
3565: PPUSH
3566: CALL_OW 13
3570: IFFALSE 3632
// begin uc_nation = nation_nature ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 0
3579: ST_TO_ADDR
// uc_side = 0 ;
3580: LD_ADDR_OWVAR 20
3584: PUSH
3585: LD_INT 0
3587: ST_TO_ADDR
// hc_agressivity = rand ( 0 , 20 ) ;
3588: LD_ADDR_OWVAR 35
3592: PUSH
3593: LD_INT 0
3595: PPUSH
3596: LD_INT 20
3598: PPUSH
3599: CALL_OW 12
3603: ST_TO_ADDR
// preparehuman ( sex_male , class_apeman , 0 ) ;
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 12
3609: PPUSH
3610: LD_INT 0
3612: PPUSH
3613: CALL_OW 380
// placeunitarea ( createhuman , opoles , false ) ;
3617: CALL_OW 44
3621: PPUSH
3622: LD_INT 21
3624: PPUSH
3625: LD_INT 0
3627: PPUSH
3628: CALL_OW 49
// end ; end ; end_of_file
3632: END
// export lecntw00 ; var leen_ ; var doprovod ; export function prepare_legion ; var tmp ; begin
3633: LD_INT 0
3635: PPUSH
3636: PPUSH
// uc_side = le ;
3637: LD_ADDR_OWVAR 20
3641: PUSH
3642: LD_EXP 4
3646: ST_TO_ADDR
// uc_nation = nation_arabian ;
3647: LD_ADDR_OWVAR 21
3651: PUSH
3652: LD_INT 2
3654: ST_TO_ADDR
// preparesoldier ( sex_male , les0_sk ) ;
3655: LD_INT 1
3657: PPUSH
3658: LD_EXP 159
3662: PPUSH
3663: CALL_OW 381
// tmp = createhuman ;
3667: LD_ADDR_VAR 0 2
3671: PUSH
3672: CALL_OW 44
3676: ST_TO_ADDR
// placeunitxyr ( tmp , 127 , 130 , 1 , false ) ;
3677: LD_VAR 0 2
3681: PPUSH
3682: LD_INT 127
3684: PPUSH
3685: LD_INT 130
3687: PPUSH
3688: LD_INT 1
3690: PPUSH
3691: LD_INT 0
3693: PPUSH
3694: CALL_OW 50
// comenterunit ( tmp , lebunk00 ) ;
3698: LD_VAR 0 2
3702: PPUSH
3703: LD_INT 52
3705: PPUSH
3706: CALL_OW 120
// les0 = tmp ;
3710: LD_ADDR_EXP 156
3714: PUSH
3715: LD_VAR 0 2
3719: ST_TO_ADDR
// preparesoldier ( sex_male , les1_sk ) ;
3720: LD_INT 1
3722: PPUSH
3723: LD_EXP 160
3727: PPUSH
3728: CALL_OW 381
// tmp = createhuman ;
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: CALL_OW 44
3741: ST_TO_ADDR
// placeunitxyr ( tmp , 143 , 118 , 1 , false ) ;
3742: LD_VAR 0 2
3746: PPUSH
3747: LD_INT 143
3749: PPUSH
3750: LD_INT 118
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 0
3758: PPUSH
3759: CALL_OW 50
// comenterunit ( tmp , lebunk01 ) ;
3763: LD_VAR 0 2
3767: PPUSH
3768: LD_INT 53
3770: PPUSH
3771: CALL_OW 120
// les1 = tmp ;
3775: LD_ADDR_EXP 157
3779: PUSH
3780: LD_VAR 0 2
3784: ST_TO_ADDR
// preparesoldier ( sex_male , les2_sk ) ;
3785: LD_INT 1
3787: PPUSH
3788: LD_EXP 161
3792: PPUSH
3793: CALL_OW 381
// tmp = createhuman ;
3797: LD_ADDR_VAR 0 2
3801: PUSH
3802: CALL_OW 44
3806: ST_TO_ADDR
// placeunitxyr ( tmp , 172 , 126 , 1 , false ) ;
3807: LD_VAR 0 2
3811: PPUSH
3812: LD_INT 172
3814: PPUSH
3815: LD_INT 126
3817: PPUSH
3818: LD_INT 1
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 50
// comenterunit ( tmp , lebunk02 ) ;
3828: LD_VAR 0 2
3832: PPUSH
3833: LD_INT 54
3835: PPUSH
3836: CALL_OW 120
// les2 = tmp ;
3840: LD_ADDR_EXP 158
3844: PUSH
3845: LD_VAR 0 2
3849: ST_TO_ADDR
// preparesoldier ( sex_male , les_1_sk ) ;
3850: LD_INT 1
3852: PPUSH
3853: LD_EXP 166
3857: PPUSH
3858: CALL_OW 381
// tmp = createhuman ;
3862: LD_ADDR_VAR 0 2
3866: PUSH
3867: CALL_OW 44
3871: ST_TO_ADDR
// placeunitxyr ( tmp , 135 , 124 , 1 , false ) ;
3872: LD_VAR 0 2
3876: PPUSH
3877: LD_INT 135
3879: PPUSH
3880: LD_INT 124
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 50
// comenterunit ( tmp , lebarr00 ) ;
3893: LD_VAR 0 2
3897: PPUSH
3898: LD_INT 56
3900: PPUSH
3901: CALL_OW 120
// les_1 = tmp ;
3905: LD_ADDR_EXP 162
3909: PUSH
3910: LD_VAR 0 2
3914: ST_TO_ADDR
// preparesoldier ( sex_male , les_2_sk ) ;
3915: LD_INT 1
3917: PPUSH
3918: LD_EXP 167
3922: PPUSH
3923: CALL_OW 381
// tmp = createhuman ;
3927: LD_ADDR_VAR 0 2
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// placeunitxyr ( tmp , 135 , 124 , 1 , false ) ;
3937: LD_VAR 0 2
3941: PPUSH
3942: LD_INT 135
3944: PPUSH
3945: LD_INT 124
3947: PPUSH
3948: LD_INT 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 50
// comenterunit ( tmp , lebarr00 ) ;
3958: LD_VAR 0 2
3962: PPUSH
3963: LD_INT 56
3965: PPUSH
3966: CALL_OW 120
// les_2 = tmp ;
3970: LD_ADDR_EXP 163
3974: PUSH
3975: LD_VAR 0 2
3979: ST_TO_ADDR
// preparehuman ( sex_male , class_mortar , les_3_sk ) ;
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 8
3985: PPUSH
3986: LD_EXP 168
3990: PPUSH
3991: CALL_OW 380
// tmp = createhuman ;
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: CALL_OW 44
4004: ST_TO_ADDR
// placeunitxyr ( tmp , 135 , 124 , 1 , false ) ;
4005: LD_VAR 0 2
4009: PPUSH
4010: LD_INT 135
4012: PPUSH
4013: LD_INT 124
4015: PPUSH
4016: LD_INT 1
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 50
// comenterunit ( tmp , lebarr00 ) ;
4026: LD_VAR 0 2
4030: PPUSH
4031: LD_INT 56
4033: PPUSH
4034: CALL_OW 120
// les_3 = tmp ;
4038: LD_ADDR_EXP 164
4042: PUSH
4043: LD_VAR 0 2
4047: ST_TO_ADDR
// preparehuman ( sex_male , class_mortar , les_4_sk ) ;
4048: LD_INT 1
4050: PPUSH
4051: LD_INT 8
4053: PPUSH
4054: LD_EXP 169
4058: PPUSH
4059: CALL_OW 380
// tmp = createhuman ;
4063: LD_ADDR_VAR 0 2
4067: PUSH
4068: CALL_OW 44
4072: ST_TO_ADDR
// placeunitxyr ( tmp , 135 , 124 , 1 , false ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_INT 135
4080: PPUSH
4081: LD_INT 124
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 50
// comenterunit ( tmp , lebarr00 ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 56
4101: PPUSH
4102: CALL_OW 120
// les_4 = tmp ;
4106: LD_ADDR_EXP 165
4110: PUSH
4111: LD_VAR 0 2
4115: ST_TO_ADDR
// doprovod = [ les_1 , les_2 , les_3 , les_4 ] ;
4116: LD_ADDR_LOC 3
4120: PUSH
4121: LD_EXP 162
4125: PUSH
4126: LD_EXP 163
4130: PUSH
4131: LD_EXP 164
4135: PUSH
4136: LD_EXP 165
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: ST_TO_ADDR
// preparescientist ( sex_male , lesc_1_sk ) ;
4147: LD_INT 1
4149: PPUSH
4150: LD_EXP 193
4154: PPUSH
4155: CALL_OW 384
// tmp = createhuman ;
4159: LD_ADDR_VAR 0 2
4163: PUSH
4164: CALL_OW 44
4168: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 133 , 1 , false ) ;
4169: LD_VAR 0 2
4173: PPUSH
4174: LD_INT 134
4176: PPUSH
4177: LD_INT 133
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: LD_INT 0
4185: PPUSH
4186: CALL_OW 50
// comenterunit ( tmp , lelabf01 ) ;
4190: LD_VAR 0 2
4194: PPUSH
4195: LD_INT 65
4197: PPUSH
4198: CALL_OW 120
// lesc_1 = tmp ;
4202: LD_ADDR_EXP 196
4206: PUSH
4207: LD_VAR 0 2
4211: ST_TO_ADDR
// preparescientist ( sex_male , lesc_2_sk ) ;
4212: LD_INT 1
4214: PPUSH
4215: LD_EXP 194
4219: PPUSH
4220: CALL_OW 384
// tmp = createhuman ;
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: CALL_OW 44
4233: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 133 , 1 , false ) ;
4234: LD_VAR 0 2
4238: PPUSH
4239: LD_INT 134
4241: PPUSH
4242: LD_INT 133
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 0
4250: PPUSH
4251: CALL_OW 50
// comenterunit ( tmp , lelabf01 ) ;
4255: LD_VAR 0 2
4259: PPUSH
4260: LD_INT 65
4262: PPUSH
4263: CALL_OW 120
// lesc_2 = tmp ;
4267: LD_ADDR_EXP 197
4271: PUSH
4272: LD_VAR 0 2
4276: ST_TO_ADDR
// preparescientist ( sex_male , lesc_3_sk ) ;
4277: LD_INT 1
4279: PPUSH
4280: LD_EXP 195
4284: PPUSH
4285: CALL_OW 384
// tmp = createhuman ;
4289: LD_ADDR_VAR 0 2
4293: PUSH
4294: CALL_OW 44
4298: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 133 , 1 , false ) ;
4299: LD_VAR 0 2
4303: PPUSH
4304: LD_INT 134
4306: PPUSH
4307: LD_INT 133
4309: PPUSH
4310: LD_INT 1
4312: PPUSH
4313: LD_INT 0
4315: PPUSH
4316: CALL_OW 50
// comenterunit ( tmp , lelabf01 ) ;
4320: LD_VAR 0 2
4324: PPUSH
4325: LD_INT 65
4327: PPUSH
4328: CALL_OW 120
// lesc_3 = tmp ;
4332: LD_ADDR_EXP 198
4336: PUSH
4337: LD_VAR 0 2
4341: ST_TO_ADDR
// vc_control = control_manual ;
4342: LD_ADDR_OWVAR 38
4346: PUSH
4347: LD_INT 1
4349: ST_TO_ADDR
// vc_engine = engine_siberite ;
4350: LD_ADDR_OWVAR 39
4354: PUSH
4355: LD_INT 3
4357: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
4358: LD_ADDR_OWVAR 37
4362: PUSH
4363: LD_INT 14
4365: ST_TO_ADDR
// vc_weapon = ar_control_tower ;
4366: LD_ADDR_OWVAR 40
4370: PUSH
4371: LD_INT 31
4373: ST_TO_ADDR
// lecntw00 = createvehicle ;
4374: LD_ADDR_EXP 224
4378: PUSH
4379: CALL_OW 45
4383: ST_TO_ADDR
// setdir ( lecntw00 , 5 ) ;
4384: LD_EXP 224
4388: PPUSH
4389: LD_INT 5
4391: PPUSH
4392: CALL_OW 233
// placeunitxyr ( lecntw00 , 159 , 136 , 1 , false ) ;
4396: LD_EXP 224
4400: PPUSH
4401: LD_INT 159
4403: PPUSH
4404: LD_INT 136
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: LD_INT 0
4412: PPUSH
4413: CALL_OW 50
// preparemechanic ( sex_female , lem0_sk ) ;
4417: LD_INT 2
4419: PPUSH
4420: LD_EXP 171
4424: PPUSH
4425: CALL_OW 383
// lem0 = createhuman ;
4429: LD_ADDR_EXP 170
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// placehumaninunit ( lem0 , lecntw00 ) ;
4439: LD_EXP 170
4443: PPUSH
4444: LD_EXP 224
4448: PPUSH
4449: CALL_OW 52
// vc_chassis = lev1_ch ;
4453: LD_ADDR_OWVAR 37
4457: PUSH
4458: LD_EXP 179
4462: ST_TO_ADDR
// vc_weapon = lev1_wp ;
4463: LD_ADDR_OWVAR 40
4467: PUSH
4468: LD_EXP 180
4472: ST_TO_ADDR
// lev1 = createvehicle ;
4473: LD_ADDR_EXP 178
4477: PUSH
4478: CALL_OW 45
4482: ST_TO_ADDR
// setdir ( lev1 , 5 ) ;
4483: LD_EXP 178
4487: PPUSH
4488: LD_INT 5
4490: PPUSH
4491: CALL_OW 233
// placeunitxy ( lev1 , 128 , 123 , false ) ;
4495: LD_EXP 178
4499: PPUSH
4500: LD_INT 128
4502: PPUSH
4503: LD_INT 123
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 48
// preparemechanic ( sex_male , lem1_sk ) ;
4513: LD_INT 1
4515: PPUSH
4516: LD_EXP 173
4520: PPUSH
4521: CALL_OW 383
// lem1 = createhuman ;
4525: LD_ADDR_EXP 172
4529: PUSH
4530: CALL_OW 44
4534: ST_TO_ADDR
// placehumaninunit ( lem1 , lev1 ) ;
4535: LD_EXP 172
4539: PPUSH
4540: LD_EXP 178
4544: PPUSH
4545: CALL_OW 52
// vc_chassis = lev2_ch ;
4549: LD_ADDR_OWVAR 37
4553: PUSH
4554: LD_EXP 182
4558: ST_TO_ADDR
// vc_weapon = lev2_wp ;
4559: LD_ADDR_OWVAR 40
4563: PUSH
4564: LD_EXP 183
4568: ST_TO_ADDR
// lev2 = createvehicle ;
4569: LD_ADDR_EXP 181
4573: PUSH
4574: CALL_OW 45
4578: ST_TO_ADDR
// setdir ( lev2 , 5 ) ;
4579: LD_EXP 181
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: CALL_OW 233
// placeunitxy ( lev2 , 137 , 119 , false ) ;
4591: LD_EXP 181
4595: PPUSH
4596: LD_INT 137
4598: PPUSH
4599: LD_INT 119
4601: PPUSH
4602: LD_INT 0
4604: PPUSH
4605: CALL_OW 48
// preparemechanic ( sex_male , lem2_sk ) ;
4609: LD_INT 1
4611: PPUSH
4612: LD_EXP 175
4616: PPUSH
4617: CALL_OW 383
// lem2 = createhuman ;
4621: LD_ADDR_EXP 174
4625: PUSH
4626: CALL_OW 44
4630: ST_TO_ADDR
// placehumaninunit ( lem2 , lev2 ) ;
4631: LD_EXP 174
4635: PPUSH
4636: LD_EXP 181
4640: PPUSH
4641: CALL_OW 52
// vc_chassis = lev3_ch ;
4645: LD_ADDR_OWVAR 37
4649: PUSH
4650: LD_EXP 185
4654: ST_TO_ADDR
// vc_weapon = lev3_wp ;
4655: LD_ADDR_OWVAR 40
4659: PUSH
4660: LD_EXP 186
4664: ST_TO_ADDR
// lev3 = createvehicle ;
4665: LD_ADDR_EXP 184
4669: PUSH
4670: CALL_OW 45
4674: ST_TO_ADDR
// setdir ( lev3 , 5 ) ;
4675: LD_EXP 184
4679: PPUSH
4680: LD_INT 5
4682: PPUSH
4683: CALL_OW 233
// placeunitxy ( lev3 , 158 , 118 , false ) ;
4687: LD_EXP 184
4691: PPUSH
4692: LD_INT 158
4694: PPUSH
4695: LD_INT 118
4697: PPUSH
4698: LD_INT 0
4700: PPUSH
4701: CALL_OW 48
// preparemechanic ( sex_male , lem3_sk ) ;
4705: LD_INT 1
4707: PPUSH
4708: LD_EXP 177
4712: PPUSH
4713: CALL_OW 383
// lem3 = createhuman ;
4717: LD_ADDR_EXP 176
4721: PUSH
4722: CALL_OW 44
4726: ST_TO_ADDR
// placehumaninunit ( lem3 , lev3 ) ;
4727: LD_EXP 176
4731: PPUSH
4732: LD_EXP 184
4736: PPUSH
4737: CALL_OW 52
// prepareengineer ( sex_female , 9 ) ;
4741: LD_INT 2
4743: PPUSH
4744: LD_INT 9
4746: PPUSH
4747: CALL_OW 382
// tmp = createhuman ;
4751: LD_ADDR_VAR 0 2
4755: PUSH
4756: CALL_OW 44
4760: ST_TO_ADDR
// placeunitxyr ( tmp , 151 , 133 , 1 , false ) ;
4761: LD_VAR 0 2
4765: PPUSH
4766: LD_INT 151
4768: PPUSH
4769: LD_INT 133
4771: PPUSH
4772: LD_INT 1
4774: PPUSH
4775: LD_INT 0
4777: PPUSH
4778: CALL_OW 50
// comenterunit ( tmp , leware00 ) ;
4782: LD_VAR 0 2
4786: PPUSH
4787: LD_INT 51
4789: PPUSH
4790: CALL_OW 120
// prepareengineer ( sex_female , 9 ) ;
4794: LD_INT 2
4796: PPUSH
4797: LD_INT 9
4799: PPUSH
4800: CALL_OW 382
// tmp = createhuman ;
4804: LD_ADDR_VAR 0 2
4808: PUSH
4809: CALL_OW 44
4813: ST_TO_ADDR
// placeunitxyr ( tmp , 132 , 136 , 1 , false ) ;
4814: LD_VAR 0 2
4818: PPUSH
4819: LD_INT 132
4821: PPUSH
4822: LD_INT 136
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: LD_INT 0
4830: PPUSH
4831: CALL_OW 50
// comremember ( tmp ) ;
4835: LD_VAR 0 2
4839: PPUSH
4840: CALL_OW 143
// comenterunit ( tmp , ledepo00 ) ;
4844: LD_VAR 0 2
4848: PPUSH
4849: LD_INT 72
4851: PPUSH
4852: CALL_OW 120
// leen_ = tmp ;
4856: LD_ADDR_LOC 2
4860: PUSH
4861: LD_VAR 0 2
4865: ST_TO_ADDR
// setresourcevisibility ( 115 , 130 , le ) ;
4866: LD_INT 115
4868: PPUSH
4869: LD_INT 130
4871: PPUSH
4872: LD_EXP 4
4876: PPUSH
4877: CALL_OW 441
// setresourcevisibility ( 113 , 121 , le ) ;
4881: LD_INT 113
4883: PPUSH
4884: LD_INT 121
4886: PPUSH
4887: LD_EXP 4
4891: PPUSH
4892: CALL_OW 441
// setresourcevisibility ( 103 , 126 , le ) ;
4896: LD_INT 103
4898: PPUSH
4899: LD_INT 126
4901: PPUSH
4902: LD_EXP 4
4906: PPUSH
4907: CALL_OW 441
// setresourcevisibility ( 103 , 133 , le ) ;
4911: LD_INT 103
4913: PPUSH
4914: LD_INT 133
4916: PPUSH
4917: LD_EXP 4
4921: PPUSH
4922: CALL_OW 441
// prepareengineer ( sex_male , lee0_sk ) ;
4926: LD_INT 1
4928: PPUSH
4929: LD_EXP 188
4933: PPUSH
4934: CALL_OW 382
// lee0 = createhuman ;
4938: LD_ADDR_EXP 187
4942: PUSH
4943: CALL_OW 44
4947: ST_TO_ADDR
// placeunitxyr ( lee0 , 128 , 128 , 1 , false ) ;
4948: LD_EXP 187
4952: PPUSH
4953: LD_INT 128
4955: PPUSH
4956: LD_INT 128
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: LD_INT 0
4964: PPUSH
4965: CALL_OW 50
// comhold ( lee0 ) ;
4969: LD_EXP 187
4973: PPUSH
4974: CALL_OW 140
// prepareengineer ( sex_male , lee1_sk ) ;
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 190
4985: PPUSH
4986: CALL_OW 382
// lee1 = createhuman ;
4990: LD_ADDR_EXP 189
4994: PUSH
4995: CALL_OW 44
4999: ST_TO_ADDR
// placeunitxyr ( lee1 , 141 , 119 , 1 , false ) ;
5000: LD_EXP 189
5004: PPUSH
5005: LD_INT 141
5007: PPUSH
5008: LD_INT 119
5010: PPUSH
5011: LD_INT 1
5013: PPUSH
5014: LD_INT 0
5016: PPUSH
5017: CALL_OW 50
// comhold ( lee1 ) ;
5021: LD_EXP 189
5025: PPUSH
5026: CALL_OW 140
// prepareengineer ( sex_male , lee2_sk ) ;
5030: LD_INT 1
5032: PPUSH
5033: LD_EXP 192
5037: PPUSH
5038: CALL_OW 382
// lee2 = createhuman ;
5042: LD_ADDR_EXP 191
5046: PUSH
5047: CALL_OW 44
5051: ST_TO_ADDR
// placeunitxyr ( lee2 , 174 , 127 , 1 , false ) ;
5052: LD_EXP 191
5056: PPUSH
5057: LD_INT 174
5059: PPUSH
5060: LD_INT 127
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_INT 0
5068: PPUSH
5069: CALL_OW 50
// comhold ( lee2 ) ;
5073: LD_EXP 191
5077: PPUSH
5078: CALL_OW 140
// inzinyri = [ lee0 , lee1 , lee2 ] ;
5082: LD_ADDR_LOC 5
5086: PUSH
5087: LD_EXP 187
5091: PUSH
5092: LD_EXP 189
5096: PUSH
5097: LD_EXP 191
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: ST_TO_ADDR
// comremember ( inzinyri ) ;
5107: LD_LOC 5
5111: PPUSH
5112: CALL_OW 143
// opravujte = [ [ lebunk00 , lebarr00 ] , [ lebarr00 , lebunk01 ] , [ lebunk02 ] ] ;
5116: LD_ADDR_LOC 4
5120: PUSH
5121: LD_INT 52
5123: PUSH
5124: LD_INT 56
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 56
5133: PUSH
5134: LD_INT 53
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: LD_INT 54
5143: PUSH
5144: EMPTY
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: ST_TO_ADDR
// legionari = filterallunits ( [ [ f_side , le ] , [ f_type , unit_human ] ] ) ;
5152: LD_ADDR_EXP 226
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_EXP 4
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PPUSH
5183: CALL_OW 69
5187: ST_TO_ADDR
// pocet_legionaru = 0 + legionari ;
5188: LD_ADDR_EXP 225
5192: PUSH
5193: LD_INT 0
5195: PUSH
5196: LD_EXP 226
5200: PLUS
5201: ST_TO_ADDR
// end ;
5202: LD_VAR 0 1
5206: RET
// export pocet_legionaru , legionari ; var opravujte ; var inzinyri ; every 0 0$3 do var tmp , tmp2 , tmp3 , oprav , buds , lives ;
5207: GO 5209
5209: DISABLE
5210: LD_INT 0
5212: PPUSH
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
// begin for tmp = 1 to 0 + opravujte do
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: DOUBLE
5224: LD_INT 1
5226: DEC
5227: ST_TO_ADDR
5228: LD_INT 0
5230: PUSH
5231: LD_LOC 4
5235: PLUS
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5469
// begin buds = [ ] ;
5240: LD_ADDR_VAR 0 5
5244: PUSH
5245: EMPTY
5246: ST_TO_ADDR
// lives = [ ] ;
5247: LD_ADDR_VAR 0 6
5251: PUSH
5252: EMPTY
5253: ST_TO_ADDR
// for tmp2 in opravujte [ tmp ] do
5254: LD_ADDR_VAR 0 2
5258: PUSH
5259: LD_LOC 4
5263: PUSH
5264: LD_VAR 0 1
5268: ARRAY
5269: PUSH
5270: FOR_IN
5271: IFFALSE 5333
// if ( getlives ( tmp2 ) < hranice_zdravi ) then
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 256
5282: PUSH
5283: LD_INT 1000
5285: LESS
5286: IFFALSE 5331
// begin buds = buds ^ [ tmp2 ] ;
5288: LD_ADDR_VAR 0 5
5292: PUSH
5293: LD_VAR 0 5
5297: PUSH
5298: LD_VAR 0 2
5302: PUSH
5303: EMPTY
5304: LIST
5305: ADD
5306: ST_TO_ADDR
// lives = lives ^ [ getlives ( tmp2 ) ] ;
5307: LD_ADDR_VAR 0 6
5311: PUSH
5312: LD_VAR 0 6
5316: PUSH
5317: LD_VAR 0 2
5321: PPUSH
5322: CALL_OW 256
5326: PUSH
5327: EMPTY
5328: LIST
5329: ADD
5330: ST_TO_ADDR
// end ;
5331: GO 5270
5333: POP
5334: POP
// tmp2 = sortlistbylistasc ( buds , lives ) ;
5335: LD_ADDR_VAR 0 2
5339: PUSH
5340: LD_VAR 0 5
5344: PPUSH
5345: LD_VAR 0 6
5349: PPUSH
5350: CALL_OW 76
5354: ST_TO_ADDR
// if tmp2 then
5355: LD_VAR 0 2
5359: IFFALSE 5467
// begin comrepairbuilding ( inzinyri [ tmp ] , tmp2 [ 1 ] ) ;
5361: LD_LOC 5
5365: PUSH
5366: LD_VAR 0 1
5370: ARRAY
5371: PPUSH
5372: LD_VAR 0 2
5376: PUSH
5377: LD_INT 1
5379: ARRAY
5380: PPUSH
5381: CALL_OW 130
// for tmp3 = 2 to 0 + tmp2 do
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: DOUBLE
5391: LD_INT 2
5393: DEC
5394: ST_TO_ADDR
5395: LD_INT 0
5397: PUSH
5398: LD_VAR 0 2
5402: PLUS
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5435
// addcomrepairbuilding ( inzinyri [ tmp ] , tmp2 [ tmp3 ] ) ;
5407: LD_LOC 5
5411: PUSH
5412: LD_VAR 0 1
5416: ARRAY
5417: PPUSH
5418: LD_VAR 0 2
5422: PUSH
5423: LD_VAR 0 3
5427: ARRAY
5428: PPUSH
5429: CALL_OW 190
5433: GO 5404
5435: POP
5436: POP
// addcomreturn ( inzinyri [ tmp ] ) ;
5437: LD_LOC 5
5441: PUSH
5442: LD_VAR 0 1
5446: ARRAY
5447: PPUSH
5448: CALL_OW 204
// addcomhold ( inzinyri [ tmp ] ) ;
5452: LD_LOC 5
5456: PUSH
5457: LD_VAR 0 1
5461: ARRAY
5462: PPUSH
5463: CALL_OW 200
// end ; end ;
5467: GO 5237
5469: POP
5470: POP
// enable ;
5471: ENABLE
// end ;
5472: PPOPN 6
5474: END
// export ledolu , poziceledolu ; every 0 0$10 + 15 15$0 marked 05 do var tmp , tmp1 , tmp2 ;
5475: GO 5477
5477: DISABLE
5478: LD_INT 0
5480: PPUSH
5481: PPUSH
5482: PPUSH
// begin lestavidul = lestavidul - 1 ;
5483: LD_ADDR_EXP 213
5487: PUSH
5488: LD_EXP 213
5492: PUSH
5493: LD_INT 1
5495: MINUS
5496: ST_TO_ADDR
// if not lestavidul then
5497: LD_EXP 213
5501: NOT
5502: IFFALSE 5823
// begin if debug then
5504: LD_EXP 223
5508: IFFALSE 5517
// msg ( le: deme stavet dul ) ;
5510: LD_STRING le: deme stavet dul
5512: PPUSH
5513: CALL_OW 100
// tmp = filterunitsinarea ( mothdep , [ [ f_side , le ] , [ f_btype , b_siberite_mine ] ] ) ;
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_INT 9
5524: PPUSH
5525: LD_INT 22
5527: PUSH
5528: LD_EXP 4
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 30
5539: PUSH
5540: LD_INT 30
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PPUSH
5551: CALL_OW 70
5555: ST_TO_ADDR
// tmp1 = [ ] ;
5556: LD_ADDR_VAR 0 2
5560: PUSH
5561: EMPTY
5562: ST_TO_ADDR
// for tmp2 in tmp do
5563: LD_ADDR_VAR 0 3
5567: PUSH
5568: LD_VAR 0 1
5572: PUSH
5573: FOR_IN
5574: IFFALSE 5616
// tmp1 = tmp1 ^ [ [ getx ( tmp2 ) , gety ( tmp2 ) ] ] ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: LD_VAR 0 2
5585: PUSH
5586: LD_VAR 0 3
5590: PPUSH
5591: CALL_OW 250
5595: PUSH
5596: LD_VAR 0 3
5600: PPUSH
5601: CALL_OW 251
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: ADD
5613: ST_TO_ADDR
5614: GO 5573
5616: POP
5617: POP
// tmp1 = poziceledolu diff tmp1 ;
5618: LD_ADDR_VAR 0 2
5622: PUSH
5623: LD_EXP 228
5627: PUSH
5628: LD_VAR 0 2
5632: DIFF
5633: ST_TO_ADDR
// tmp = rand ( 1 , 0 + tmp1 ) ;
5634: LD_ADDR_VAR 0 1
5638: PUSH
5639: LD_INT 1
5641: PPUSH
5642: LD_INT 0
5644: PUSH
5645: LD_VAR 0 2
5649: PLUS
5650: PPUSH
5651: CALL_OW 12
5655: ST_TO_ADDR
// tmp2 = filterunitsinarea ( mothdep , [ [ f_nation , nation_nature ] , [ f_side , 0 ] ] ) ;
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_INT 9
5663: PPUSH
5664: LD_INT 23
5666: PUSH
5667: LD_INT 0
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 22
5676: PUSH
5677: LD_INT 0
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PPUSH
5688: CALL_OW 70
5692: ST_TO_ADDR
// commovexy ( tmp2 , 93 , 113 ) ;
5693: LD_VAR 0 3
5697: PPUSH
5698: LD_INT 93
5700: PPUSH
5701: LD_INT 113
5703: PPUSH
5704: CALL_OW 111
// addcommovexy ( tmp2 , 89 , 127 ) ;
5708: LD_VAR 0 3
5712: PPUSH
5713: LD_INT 89
5715: PPUSH
5716: LD_INT 127
5718: PPUSH
5719: CALL_OW 171
// comexitbuilding ( leen_ ) ;
5723: LD_LOC 2
5727: PPUSH
5728: CALL_OW 122
// addcombuild ( leen_ , b_siberite_mine , tmp1 [ tmp ] [ 1 ] , tmp1 [ tmp ] [ 2 ] , 2 ) ;
5732: LD_LOC 2
5736: PPUSH
5737: LD_INT 30
5739: PPUSH
5740: LD_VAR 0 2
5744: PUSH
5745: LD_VAR 0 1
5749: ARRAY
5750: PUSH
5751: LD_INT 1
5753: ARRAY
5754: PPUSH
5755: LD_VAR 0 2
5759: PUSH
5760: LD_VAR 0 1
5764: ARRAY
5765: PUSH
5766: LD_INT 2
5768: ARRAY
5769: PPUSH
5770: LD_INT 2
5772: PPUSH
5773: CALL_OW 205
// commoveunit ( doprovod , leen_ ) ;
5777: LD_LOC 3
5781: PPUSH
5782: LD_LOC 2
5786: PPUSH
5787: CALL_OW 112
// if ledolu < 4 then
5791: LD_EXP 227
5795: PUSH
5796: LD_INT 4
5798: LESS
5799: IFFALSE 5821
// lestavidul = rand ( lestavidul_min , lestavidul_max ) ;
5801: LD_ADDR_EXP 213
5805: PUSH
5806: LD_EXP 201
5810: PPUSH
5811: LD_EXP 202
5815: PPUSH
5816: CALL_OW 12
5820: ST_TO_ADDR
// end else
5821: GO 5824
// enable ;
5823: ENABLE
// end ;
5824: PPOPN 3
5826: END
// every 0 0$10 + 15 15$5 marked 10 do
5827: GO 5829
5829: DISABLE
// begin while islive ( leen_ ) and not isinarea ( leen_ , lebase ) do
5830: LD_LOC 2
5834: PPUSH
5835: CALL_OW 300
5839: PUSH
5840: LD_LOC 2
5844: PPUSH
5845: LD_INT 13
5847: PPUSH
5848: CALL_OW 308
5852: NOT
5853: AND
5854: IFFALSE 5865
// wait ( 0 0$1 ) ;
5856: LD_INT 35
5858: PPUSH
5859: CALL_OW 67
5863: GO 5830
// comenterunit ( doprovod , lebarr00 ) ;
5865: LD_LOC 3
5869: PPUSH
5870: LD_INT 56
5872: PPUSH
5873: CALL_OW 120
// if islive ( leen_ ) then
5877: LD_LOC 2
5881: PPUSH
5882: CALL_OW 300
5886: IFFALSE 5903
// comenterunit ( [ leen_ ] , ledepo00 ) ;
5888: LD_LOC 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: PPUSH
5896: LD_INT 72
5898: PPUSH
5899: CALL_OW 120
// end ;
5903: END
// on buildingcomplete ( un ) do if ( getbtype ( un ) = b_siberite_mine ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 266
5913: PUSH
5914: LD_INT 30
5916: EQUAL
5917: IFFALSE 6036
// if ( getside ( un ) = le ) and ( [ getx ( un ) , gety ( un ) ] in poziceledolu ) and not lesurr then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 255
5928: PUSH
5929: LD_EXP 4
5933: EQUAL
5934: PUSH
5935: LD_VAR 0 1
5939: PPUSH
5940: CALL_OW 250
5944: PUSH
5945: LD_VAR 0 1
5949: PPUSH
5950: CALL_OW 251
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_EXP 228
5963: IN
5964: AND
5965: PUSH
5966: LD_EXP 248
5970: NOT
5971: AND
5972: IFFALSE 5979
// enable ( 05 ) else
5974: LD_INT 5
5976: ENABLE_MARKED
5977: GO 6036
// if ( getside ( un ) = am ) and ( getx ( un ) = 64 ) and ( gety ( un ) = 17 ) and not am_surr then
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 255
5988: PUSH
5989: LD_EXP 2
5993: EQUAL
5994: PUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 250
6004: PUSH
6005: LD_INT 64
6007: EQUAL
6008: AND
6009: PUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 251
6019: PUSH
6020: LD_INT 17
6022: EQUAL
6023: AND
6024: PUSH
6025: LD_EXP 221
6029: NOT
6030: AND
6031: IFFALSE 6036
// enable ( 07 ) ;
6033: LD_INT 7
6035: ENABLE_MARKED
6036: PPOPN 1
6038: END
// var attid ; every 0 0$2 trigger rusacimajisib and not legdestr do var tmp , tmp1 , tmp2 , regid_le ;
6039: LD_EXP 242
6043: PUSH
6044: LD_EXP 239
6048: NOT
6049: AND
6050: IFFALSE 7421
6052: GO 6054
6054: DISABLE
6055: LD_INT 0
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
// begin if lesurr then
6061: LD_EXP 248
6065: IFFALSE 6069
// exit ;
6067: GO 7421
// if debug then
6069: LD_EXP 223
6073: IFFALSE 6082
// msg ( legion: attaaaaaaaaaack! ) ;
6075: LD_STRING legion: attaaaaaaaaaack!
6077: PPUSH
6078: CALL_OW 100
// uc_nation = nation_arabian ;
6082: LD_ADDR_OWVAR 21
6086: PUSH
6087: LD_INT 2
6089: ST_TO_ADDR
// uc_side = le ;
6090: LD_ADDR_OWVAR 20
6094: PUSH
6095: LD_EXP 4
6099: ST_TO_ADDR
// vc_control = control_manual ;
6100: LD_ADDR_OWVAR 38
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// vc_engine = engine_siberite ;
6108: LD_ADDR_OWVAR 39
6112: PUSH
6113: LD_INT 3
6115: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
6116: LD_ADDR_OWVAR 37
6120: PUSH
6121: LD_INT 14
6123: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
6124: LD_ADDR_OWVAR 40
6128: PUSH
6129: LD_INT 28
6131: ST_TO_ADDR
// tmp = createvehicle ;
6132: LD_ADDR_VAR 0 1
6136: PUSH
6137: CALL_OW 45
6141: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
6142: LD_VAR 0 1
6146: PPUSH
6147: LD_INT 5
6149: PPUSH
6150: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6154: LD_VAR 0 1
6158: PPUSH
6159: LD_INT 20
6161: PPUSH
6162: LD_INT 0
6164: PPUSH
6165: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6169: LD_INT 1
6171: PPUSH
6172: LD_EXP 211
6176: PPUSH
6177: CALL_OW 383
// tmp1 = createhuman ;
6181: LD_ADDR_VAR 0 2
6185: PUSH
6186: CALL_OW 44
6190: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6191: LD_VAR 0 2
6195: PPUSH
6196: LD_VAR 0 1
6200: PPUSH
6201: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6205: LD_ADDR_OWVAR 37
6209: PUSH
6210: LD_INT 14
6212: ST_TO_ADDR
// vc_weapon = ar_gun ;
6213: LD_ADDR_OWVAR 40
6217: PUSH
6218: LD_INT 27
6220: ST_TO_ADDR
// tmp = createvehicle ;
6221: LD_ADDR_VAR 0 1
6225: PUSH
6226: CALL_OW 45
6230: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
6231: LD_VAR 0 1
6235: PPUSH
6236: LD_INT 4
6238: PPUSH
6239: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_INT 20
6250: PPUSH
6251: LD_INT 0
6253: PPUSH
6254: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6258: LD_INT 1
6260: PPUSH
6261: LD_EXP 211
6265: PPUSH
6266: CALL_OW 383
// tmp1 = createhuman ;
6270: LD_ADDR_VAR 0 2
6274: PUSH
6275: CALL_OW 44
6279: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6280: LD_VAR 0 2
6284: PPUSH
6285: LD_VAR 0 1
6289: PPUSH
6290: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6294: LD_ADDR_OWVAR 37
6298: PUSH
6299: LD_INT 14
6301: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
6302: LD_ADDR_OWVAR 40
6306: PUSH
6307: LD_INT 26
6309: ST_TO_ADDR
// tmp = createvehicle ;
6310: LD_ADDR_VAR 0 1
6314: PUSH
6315: CALL_OW 45
6319: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
6320: LD_VAR 0 1
6324: PPUSH
6325: LD_INT 5
6327: PPUSH
6328: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6332: LD_VAR 0 1
6336: PPUSH
6337: LD_INT 20
6339: PPUSH
6340: LD_INT 0
6342: PPUSH
6343: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6347: LD_INT 1
6349: PPUSH
6350: LD_EXP 211
6354: PPUSH
6355: CALL_OW 383
// tmp1 = createhuman ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: CALL_OW 44
6368: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6369: LD_VAR 0 2
6373: PPUSH
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6383: LD_ADDR_OWVAR 37
6387: PUSH
6388: LD_INT 14
6390: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
6391: LD_ADDR_OWVAR 40
6395: PUSH
6396: LD_INT 28
6398: ST_TO_ADDR
// tmp = createvehicle ;
6399: LD_ADDR_VAR 0 1
6403: PUSH
6404: CALL_OW 45
6408: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_INT 5
6416: PPUSH
6417: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6421: LD_VAR 0 1
6425: PPUSH
6426: LD_INT 20
6428: PPUSH
6429: LD_INT 0
6431: PPUSH
6432: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6436: LD_INT 1
6438: PPUSH
6439: LD_EXP 211
6443: PPUSH
6444: CALL_OW 383
// tmp1 = createhuman ;
6448: LD_ADDR_VAR 0 2
6452: PUSH
6453: CALL_OW 44
6457: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6458: LD_VAR 0 2
6462: PPUSH
6463: LD_VAR 0 1
6467: PPUSH
6468: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6472: LD_ADDR_OWVAR 37
6476: PUSH
6477: LD_INT 14
6479: ST_TO_ADDR
// vc_weapon = ar_gun ;
6480: LD_ADDR_OWVAR 40
6484: PUSH
6485: LD_INT 27
6487: ST_TO_ADDR
// tmp = createvehicle ;
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: CALL_OW 45
6497: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 4
6505: PPUSH
6506: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6510: LD_VAR 0 1
6514: PPUSH
6515: LD_INT 20
6517: PPUSH
6518: LD_INT 0
6520: PPUSH
6521: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6525: LD_INT 1
6527: PPUSH
6528: LD_EXP 211
6532: PPUSH
6533: CALL_OW 383
// tmp1 = createhuman ;
6537: LD_ADDR_VAR 0 2
6541: PUSH
6542: CALL_OW 44
6546: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6547: LD_VAR 0 2
6551: PPUSH
6552: LD_VAR 0 1
6556: PPUSH
6557: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6561: LD_ADDR_OWVAR 37
6565: PUSH
6566: LD_INT 14
6568: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
6569: LD_ADDR_OWVAR 40
6573: PUSH
6574: LD_INT 26
6576: ST_TO_ADDR
// tmp = createvehicle ;
6577: LD_ADDR_VAR 0 1
6581: PUSH
6582: CALL_OW 45
6586: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
6587: LD_VAR 0 1
6591: PPUSH
6592: LD_INT 5
6594: PPUSH
6595: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6599: LD_VAR 0 1
6603: PPUSH
6604: LD_INT 20
6606: PPUSH
6607: LD_INT 0
6609: PPUSH
6610: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6614: LD_INT 1
6616: PPUSH
6617: LD_EXP 211
6621: PPUSH
6622: CALL_OW 383
// tmp1 = createhuman ;
6626: LD_ADDR_VAR 0 2
6630: PUSH
6631: CALL_OW 44
6635: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6636: LD_VAR 0 2
6640: PPUSH
6641: LD_VAR 0 1
6645: PPUSH
6646: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6650: LD_ADDR_OWVAR 37
6654: PUSH
6655: LD_INT 14
6657: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
6658: LD_ADDR_OWVAR 40
6662: PUSH
6663: LD_INT 28
6665: ST_TO_ADDR
// tmp = createvehicle ;
6666: LD_ADDR_VAR 0 1
6670: PUSH
6671: CALL_OW 45
6675: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
6676: LD_VAR 0 1
6680: PPUSH
6681: LD_INT 5
6683: PPUSH
6684: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6688: LD_VAR 0 1
6692: PPUSH
6693: LD_INT 20
6695: PPUSH
6696: LD_INT 0
6698: PPUSH
6699: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6703: LD_INT 1
6705: PPUSH
6706: LD_EXP 211
6710: PPUSH
6711: CALL_OW 383
// tmp1 = createhuman ;
6715: LD_ADDR_VAR 0 2
6719: PUSH
6720: CALL_OW 44
6724: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6725: LD_VAR 0 2
6729: PPUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6739: LD_ADDR_OWVAR 37
6743: PUSH
6744: LD_INT 14
6746: ST_TO_ADDR
// vc_weapon = ar_gun ;
6747: LD_ADDR_OWVAR 40
6751: PUSH
6752: LD_INT 27
6754: ST_TO_ADDR
// tmp = createvehicle ;
6755: LD_ADDR_VAR 0 1
6759: PUSH
6760: CALL_OW 45
6764: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
6765: LD_VAR 0 1
6769: PPUSH
6770: LD_INT 4
6772: PPUSH
6773: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6777: LD_VAR 0 1
6781: PPUSH
6782: LD_INT 20
6784: PPUSH
6785: LD_INT 0
6787: PPUSH
6788: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6792: LD_INT 1
6794: PPUSH
6795: LD_EXP 211
6799: PPUSH
6800: CALL_OW 383
// tmp1 = createhuman ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: CALL_OW 44
6813: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6814: LD_VAR 0 2
6818: PPUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6828: LD_ADDR_OWVAR 37
6832: PUSH
6833: LD_INT 14
6835: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
6836: LD_ADDR_OWVAR 40
6840: PUSH
6841: LD_INT 26
6843: ST_TO_ADDR
// tmp = createvehicle ;
6844: LD_ADDR_VAR 0 1
6848: PUSH
6849: CALL_OW 45
6853: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
6854: LD_VAR 0 1
6858: PPUSH
6859: LD_INT 5
6861: PPUSH
6862: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_INT 20
6873: PPUSH
6874: LD_INT 0
6876: PPUSH
6877: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6881: LD_INT 1
6883: PPUSH
6884: LD_EXP 211
6888: PPUSH
6889: CALL_OW 383
// tmp1 = createhuman ;
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: CALL_OW 44
6902: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6903: LD_VAR 0 2
6907: PPUSH
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 52
// vc_chassis = ar_half_tracked ;
6917: LD_ADDR_OWVAR 37
6921: PUSH
6922: LD_INT 14
6924: ST_TO_ADDR
// vc_weapon = ar_radar ;
6925: LD_ADDR_OWVAR 40
6929: PUSH
6930: LD_INT 30
6932: ST_TO_ADDR
// tmp = createvehicle ;
6933: LD_ADDR_VAR 0 1
6937: PUSH
6938: CALL_OW 45
6942: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_INT 5
6950: PPUSH
6951: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
6955: LD_VAR 0 1
6959: PPUSH
6960: LD_INT 20
6962: PPUSH
6963: LD_INT 0
6965: PPUSH
6966: CALL_OW 49
// preparemechanic ( sex_male , le_def_sk ) ;
6970: LD_INT 1
6972: PPUSH
6973: LD_EXP 211
6977: PPUSH
6978: CALL_OW 383
// tmp1 = createhuman ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: CALL_OW 44
6991: ST_TO_ADDR
// placehumaninunit ( tmp1 , tmp ) ;
6992: LD_VAR 0 2
6996: PPUSH
6997: LD_VAR 0 1
7001: PPUSH
7002: CALL_OW 52
// if difficulty > 1 then
7006: LD_OWVAR 67
7010: PUSH
7011: LD_INT 1
7013: GREATER
7014: IFFALSE 7241
// begin vc_control = control_remote ;
7016: LD_ADDR_OWVAR 38
7020: PUSH
7021: LD_INT 2
7023: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
7024: LD_ADDR_OWVAR 37
7028: PUSH
7029: LD_INT 14
7031: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
7032: LD_ADDR_OWVAR 40
7036: PUSH
7037: LD_INT 29
7039: ST_TO_ADDR
// tmp = createvehicle ;
7040: LD_ADDR_VAR 0 1
7044: PUSH
7045: CALL_OW 45
7049: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
7050: LD_VAR 0 1
7054: PPUSH
7055: LD_INT 5
7057: PPUSH
7058: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_INT 20
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 49
// linkvehicletohuman ( tmp , lem0 ) ;
7077: LD_VAR 0 1
7081: PPUSH
7082: LD_EXP 170
7086: PPUSH
7087: CALL_OW 53
// vc_control = control_remote ;
7091: LD_ADDR_OWVAR 38
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
7099: LD_ADDR_OWVAR 37
7103: PUSH
7104: LD_INT 14
7106: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
7107: LD_ADDR_OWVAR 40
7111: PUSH
7112: LD_INT 29
7114: ST_TO_ADDR
// tmp = createvehicle ;
7115: LD_ADDR_VAR 0 1
7119: PUSH
7120: CALL_OW 45
7124: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
7125: LD_VAR 0 1
7129: PPUSH
7130: LD_INT 4
7132: PPUSH
7133: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_INT 20
7144: PPUSH
7145: LD_INT 0
7147: PPUSH
7148: CALL_OW 49
// linkvehicletohuman ( tmp , lem0 ) ;
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_EXP 170
7161: PPUSH
7162: CALL_OW 53
// vc_control = control_remote ;
7166: LD_ADDR_OWVAR 38
7170: PUSH
7171: LD_INT 2
7173: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
7174: LD_ADDR_OWVAR 37
7178: PUSH
7179: LD_INT 14
7181: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
7182: LD_ADDR_OWVAR 40
7186: PUSH
7187: LD_INT 29
7189: ST_TO_ADDR
// tmp = createvehicle ;
7190: LD_ADDR_VAR 0 1
7194: PUSH
7195: CALL_OW 45
7199: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
7200: LD_VAR 0 1
7204: PPUSH
7205: LD_INT 4
7207: PPUSH
7208: CALL_OW 233
// placeunitarea ( tmp , lethiefsar , false ) ;
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 20
7219: PPUSH
7220: LD_INT 0
7222: PPUSH
7223: CALL_OW 49
// linkvehicletohuman ( tmp , lem0 ) ;
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_EXP 170
7236: PPUSH
7237: CALL_OW 53
// end ; tmp = filterunitsinarea ( lethiefsar , [ [ f_or , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ar_gun ] , [ f_weapon , ar_flame_thrower ] ] ] ) ;
7241: LD_ADDR_VAR 0 1
7245: PUSH
7246: LD_INT 20
7248: PPUSH
7249: LD_INT 2
7251: PUSH
7252: LD_INT 34
7254: PUSH
7255: LD_INT 28
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 34
7264: PUSH
7265: LD_INT 27
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 34
7274: PUSH
7275: LD_INT 26
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: PPUSH
7291: CALL_OW 70
7295: ST_TO_ADDR
// tmp1 = filterunitsinarea ( lethiefsar , [ [ f_weapon , ar_selfpropelled_bomb ] ] ) ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_INT 20
7303: PPUSH
7304: LD_INT 34
7306: PUSH
7307: LD_INT 29
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: PPUSH
7317: CALL_OW 70
7321: ST_TO_ADDR
// tmp2 = filterunitsinarea ( lethiefsar , [ [ f_weapon , ar_radar ] ] ) ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_INT 20
7329: PPUSH
7330: LD_INT 34
7332: PUSH
7333: LD_INT 30
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: ST_TO_ADDR
// regid_le = mcregistry ( le , [ [ mc_reg_area_to_guard , target ] , mc_reg_ignore_fog ] ) ;
7348: LD_ADDR_VAR 0 4
7352: PUSH
7353: LD_EXP 4
7357: PPUSH
7358: LD_INT 2
7360: PUSH
7361: LD_INT 10
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 7
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 399
7379: ST_TO_ADDR
// attid = mcattack ( 100 , regid_le , tmp ^ tmp1 ^ tmp2 , [ mc_no_stop ] ) ;
7380: LD_ADDR_LOC 6
7384: PUSH
7385: LD_INT 100
7387: PPUSH
7388: LD_VAR 0 4
7392: PPUSH
7393: LD_VAR 0 1
7397: PUSH
7398: LD_VAR 0 2
7402: ADD
7403: PUSH
7404: LD_VAR 0 3
7408: ADD
7409: PPUSH
7410: LD_INT 10
7412: PUSH
7413: EMPTY
7414: LIST
7415: PPUSH
7416: CALL_OW 402
7420: ST_TO_ADDR
// end ;
7421: PPOPN 4
7423: END
// var lesni_opoce_ ; function lesni_opoce ; begin
7424: LD_INT 0
7426: PPUSH
// lesni_opoce_ = filterunitsinarea ( opoles , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7427: LD_ADDR_LOC 7
7431: PUSH
7432: LD_INT 21
7434: PPUSH
7435: LD_INT 22
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 12
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 70
7463: ST_TO_ADDR
// result = 0 + lesni_opoce_ ;
7464: LD_ADDR_VAR 0 1
7468: PUSH
7469: LD_INT 0
7471: PUSH
7472: LD_LOC 7
7476: PLUS
7477: ST_TO_ADDR
// end ;
7478: LD_VAR 0 1
7482: RET
// every 0 0$7 trigger lesni_opoce marked 09 do var tmp , tmp1 ;
7483: CALL 7424 0 0
7487: IFFALSE 7657
7489: GO 7491
7491: DISABLE
7492: LD_INT 0
7494: PPUSH
7495: PPUSH
// begin tmp1 = [ ] ;
7496: LD_ADDR_VAR 0 2
7500: PUSH
7501: EMPTY
7502: ST_TO_ADDR
// for tmp in lesni_opoce_ do
7503: LD_ADDR_VAR 0 1
7507: PUSH
7508: LD_LOC 7
7512: PUSH
7513: FOR_IN
7514: IFFALSE 7548
// tmp1 = tmp1 ^ [ getdistunitxy ( tmp , 134 , 133 ) ] ;
7516: LD_ADDR_VAR 0 2
7520: PUSH
7521: LD_VAR 0 2
7525: PUSH
7526: LD_VAR 0 1
7530: PPUSH
7531: LD_INT 134
7533: PPUSH
7534: LD_INT 133
7536: PPUSH
7537: CALL_OW 297
7541: PUSH
7542: EMPTY
7543: LIST
7544: ADD
7545: ST_TO_ADDR
7546: GO 7513
7548: POP
7549: POP
// tmp = worstfromlistbylist ( lesni_opoce_ , tmp1 ) ;
7550: LD_ADDR_VAR 0 1
7554: PUSH
7555: LD_LOC 7
7559: PPUSH
7560: LD_VAR 0 2
7564: PPUSH
7565: CALL_OW 78
7569: ST_TO_ADDR
// comtamexy ( [ lesc_1 , lesc_3 , lesc_2 ] , getx ( tmp ) , gety ( tmp ) ) ;
7570: LD_EXP 196
7574: PUSH
7575: LD_EXP 198
7579: PUSH
7580: LD_EXP 197
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: PPUSH
7590: LD_VAR 0 1
7594: PPUSH
7595: CALL_OW 250
7599: PPUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 251
7609: PPUSH
7610: CALL_OW 131
// addcommoveunit ( [ lesc_1 , lesc_3 , lesc_2 ] , lelabf01 ) ;
7614: LD_EXP 196
7618: PUSH
7619: LD_EXP 198
7623: PUSH
7624: LD_EXP 197
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: LIST
7633: PPUSH
7634: LD_INT 65
7636: PPUSH
7637: CALL_OW 172
// wait ( rand ( 0 0$30 , 5 5$0 ) ) ;
7641: LD_INT 1050
7643: PPUSH
7644: LD_INT 10500
7646: PPUSH
7647: CALL_OW 12
7651: PPUSH
7652: CALL_OW 67
// enable ;
7656: ENABLE
// end ;
7657: PPOPN 2
7659: END
// on apemantamed ( ape , sci ) do var tmp , tmp1 , tmp2 ;
7660: LD_INT 0
7662: PPUSH
7663: PPUSH
7664: PPUSH
// begin if getside ( sci ) = le then
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: LD_EXP 4
7679: EQUAL
7680: IFFALSE 8103
// begin commoveunit ( ape , lebarr00 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 56
7689: PPUSH
7690: CALL_OW 112
// addcomchangeprofession ( ape , class_apeman_kamikaze ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 17
7701: PPUSH
7702: CALL_OW 183
// addcomexitbuilding ( ape ) ;
7706: LD_VAR 0 1
7710: PPUSH
7711: CALL_OW 182
// tmp2 = filterunitsinarea ( target , [ [ f_side , ru ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
7715: LD_ADDR_VAR 0 5
7719: PUSH
7720: LD_INT 10
7722: PPUSH
7723: LD_INT 22
7725: PUSH
7726: LD_EXP 1
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 2
7737: PUSH
7738: LD_INT 30
7740: PUSH
7741: LD_INT 32
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 30
7750: PUSH
7751: LD_INT 33
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 70
7771: ST_TO_ADDR
// if not tmp2 then
7772: LD_VAR 0 5
7776: NOT
7777: IFFALSE 7818
// tmp2 = filterunitsinarea ( target , [ [ f_side , ru ] , [ f_type , unit_building ] ] ) ;
7779: LD_ADDR_VAR 0 5
7783: PUSH
7784: LD_INT 10
7786: PPUSH
7787: LD_INT 22
7789: PUSH
7790: LD_EXP 1
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 3
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PPUSH
7813: CALL_OW 70
7817: ST_TO_ADDR
// if not tmp2 then
7818: LD_VAR 0 5
7822: NOT
7823: IFFALSE 7864
// tmp2 = filterunitsinarea ( target , [ [ f_side , ru ] , [ f_type , unit_vehicle ] ] ) ;
7825: LD_ADDR_VAR 0 5
7829: PUSH
7830: LD_INT 10
7832: PPUSH
7833: LD_INT 22
7835: PUSH
7836: LD_EXP 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 21
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 70
7863: ST_TO_ADDR
// if not tmp2 then
7864: LD_VAR 0 5
7868: NOT
7869: IFFALSE 7910
// tmp2 = filterunitsinarea ( target , [ [ f_side , ru ] , [ f_type , unit_human ] ] ) ;
7871: LD_ADDR_VAR 0 5
7875: PUSH
7876: LD_INT 10
7878: PPUSH
7879: LD_INT 22
7881: PUSH
7882: LD_EXP 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 70
7909: ST_TO_ADDR
// if not tmp2 then
7910: LD_VAR 0 5
7914: NOT
7915: IFFALSE 7953
// tmp2 = filterallunits ( [ [ f_side , ru ] , [ f_type , unit_vehicle ] ] ) ;
7917: LD_ADDR_VAR 0 5
7921: PUSH
7922: LD_INT 22
7924: PUSH
7925: LD_EXP 1
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: LD_INT 21
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PPUSH
7948: CALL_OW 69
7952: ST_TO_ADDR
// if not tmp2 then
7953: LD_VAR 0 5
7957: NOT
7958: IFFALSE 7996
// tmp2 = filterallunits ( [ [ f_side , ru ] , [ f_type , unit_human ] ] ) ;
7960: LD_ADDR_VAR 0 5
7964: PUSH
7965: LD_INT 22
7967: PUSH
7968: LD_EXP 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 21
7979: PUSH
7980: LD_INT 1
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PPUSH
7991: CALL_OW 69
7995: ST_TO_ADDR
// tmp1 = [ ] ;
7996: LD_ADDR_VAR 0 4
8000: PUSH
8001: EMPTY
8002: ST_TO_ADDR
// for tmp in tmp2 do
8003: LD_ADDR_VAR 0 3
8007: PUSH
8008: LD_VAR 0 5
8012: PUSH
8013: FOR_IN
8014: IFFALSE 8048
// tmp1 = tmp1 ^ [ getdistunitxy ( tmp , 134 , 133 ) ] ;
8016: LD_ADDR_VAR 0 4
8020: PUSH
8021: LD_VAR 0 4
8025: PUSH
8026: LD_VAR 0 3
8030: PPUSH
8031: LD_INT 134
8033: PPUSH
8034: LD_INT 133
8036: PPUSH
8037: CALL_OW 297
8041: PUSH
8042: EMPTY
8043: LIST
8044: ADD
8045: ST_TO_ADDR
8046: GO 8013
8048: POP
8049: POP
// tmp = worstfromlistbylist ( tmp2 , tmp1 ) ;
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: LD_VAR 0 5
8059: PPUSH
8060: LD_VAR 0 4
8064: PPUSH
8065: CALL_OW 78
8069: ST_TO_ADDR
// if debug then
8070: LD_EXP 223
8074: IFFALSE 8089
// msg ( 2b kamikadzed:  & tmp ) ;
8076: LD_STRING 2b kamikadzed: 
8078: PUSH
8079: LD_VAR 0 3
8083: STR
8084: PPUSH
8085: CALL_OW 100
// addcomattackunit ( ape , tmp ) ;
8089: LD_VAR 0 1
8093: PPUSH
8094: LD_VAR 0 3
8098: PPUSH
8099: CALL_OW 175
// end ; end ; end_of_file
8103: PPOPN 5
8105: END
// var amen_ ; export function prepare_americans ; var tmp ; begin
8106: LD_INT 0
8108: PPUSH
8109: PPUSH
// uc_side = am ;
8110: LD_ADDR_OWVAR 20
8114: PUSH
8115: LD_EXP 2
8119: ST_TO_ADDR
// uc_nation = nation_american ;
8120: LD_ADDR_OWVAR 21
8124: PUSH
8125: LD_INT 1
8127: ST_TO_ADDR
// preparesoldier ( sex_male , ams0_sk ) ;
8128: LD_INT 1
8130: PPUSH
8131: LD_EXP 11
8135: PPUSH
8136: CALL_OW 381
// tmp = createhuman ;
8140: LD_ADDR_VAR 0 2
8144: PUSH
8145: CALL_OW 44
8149: ST_TO_ADDR
// placeunitxyr ( tmp , 80 , 19 , 1 , false ) ;
8150: LD_VAR 0 2
8154: PPUSH
8155: LD_INT 80
8157: PPUSH
8158: LD_INT 19
8160: PPUSH
8161: LD_INT 1
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: CALL_OW 50
// comenterunit ( tmp , ambunk00 ) ;
8171: LD_VAR 0 2
8175: PPUSH
8176: LD_INT 1
8178: PPUSH
8179: CALL_OW 120
// ams0 = tmp ;
8183: LD_ADDR_EXP 6
8187: PUSH
8188: LD_VAR 0 2
8192: ST_TO_ADDR
// preparesoldier ( sex_male , ams1_sk ) ;
8193: LD_INT 1
8195: PPUSH
8196: LD_EXP 12
8200: PPUSH
8201: CALL_OW 381
// tmp = createhuman ;
8205: LD_ADDR_VAR 0 2
8209: PUSH
8210: CALL_OW 44
8214: ST_TO_ADDR
// placeunitxyr ( tmp , 94 , 26 , 1 , false ) ;
8215: LD_VAR 0 2
8219: PPUSH
8220: LD_INT 94
8222: PPUSH
8223: LD_INT 26
8225: PPUSH
8226: LD_INT 1
8228: PPUSH
8229: LD_INT 0
8231: PPUSH
8232: CALL_OW 50
// comenterunit ( tmp , ambunk01 ) ;
8236: LD_VAR 0 2
8240: PPUSH
8241: LD_INT 2
8243: PPUSH
8244: CALL_OW 120
// ams1 = tmp ;
8248: LD_ADDR_EXP 7
8252: PUSH
8253: LD_VAR 0 2
8257: ST_TO_ADDR
// preparesoldier ( sex_male , ams2_sk ) ;
8258: LD_INT 1
8260: PPUSH
8261: LD_EXP 13
8265: PPUSH
8266: CALL_OW 381
// tmp = createhuman ;
8270: LD_ADDR_VAR 0 2
8274: PUSH
8275: CALL_OW 44
8279: ST_TO_ADDR
// placeunitxyr ( tmp , 103 , 27 , 1 , false ) ;
8280: LD_VAR 0 2
8284: PPUSH
8285: LD_INT 103
8287: PPUSH
8288: LD_INT 27
8290: PPUSH
8291: LD_INT 1
8293: PPUSH
8294: LD_INT 0
8296: PPUSH
8297: CALL_OW 50
// comenterunit ( tmp , ambunk02 ) ;
8301: LD_VAR 0 2
8305: PPUSH
8306: LD_INT 3
8308: PPUSH
8309: CALL_OW 120
// ams2 = tmp ;
8313: LD_ADDR_EXP 8
8317: PUSH
8318: LD_VAR 0 2
8322: ST_TO_ADDR
// preparesoldier ( sex_male , ams3_sk ) ;
8323: LD_INT 1
8325: PPUSH
8326: LD_EXP 14
8330: PPUSH
8331: CALL_OW 381
// tmp = createhuman ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: CALL_OW 44
8344: ST_TO_ADDR
// placeunitxyr ( tmp , 116 , 24 , 1 , false ) ;
8345: LD_VAR 0 2
8349: PPUSH
8350: LD_INT 116
8352: PPUSH
8353: LD_INT 24
8355: PPUSH
8356: LD_INT 1
8358: PPUSH
8359: LD_INT 0
8361: PPUSH
8362: CALL_OW 50
// comenterunit ( tmp , ambunk03 ) ;
8366: LD_VAR 0 2
8370: PPUSH
8371: LD_INT 4
8373: PPUSH
8374: CALL_OW 120
// ams3 = tmp ;
8378: LD_ADDR_EXP 9
8382: PUSH
8383: LD_VAR 0 2
8387: ST_TO_ADDR
// preparesoldier ( sex_male , ams4_sk ) ;
8388: LD_INT 1
8390: PPUSH
8391: LD_EXP 15
8395: PPUSH
8396: CALL_OW 381
// tmp = createhuman ;
8400: LD_ADDR_VAR 0 2
8404: PUSH
8405: CALL_OW 44
8409: ST_TO_ADDR
// placeunitxyr ( tmp , 113 , 4 , 1 , false ) ;
8410: LD_VAR 0 2
8414: PPUSH
8415: LD_INT 113
8417: PPUSH
8418: LD_INT 4
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: LD_INT 0
8426: PPUSH
8427: CALL_OW 50
// comenterunit ( tmp , ambunk04 ) ;
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_INT 71
8438: PPUSH
8439: CALL_OW 120
// ams4 = tmp ;
8443: LD_ADDR_EXP 10
8447: PUSH
8448: LD_VAR 0 2
8452: ST_TO_ADDR
// preparesoldier ( sex_male , ams_1_sk ) ;
8453: LD_INT 1
8455: PPUSH
8456: LD_EXP 20
8460: PPUSH
8461: CALL_OW 381
// tmp = createhuman ;
8465: LD_ADDR_VAR 0 2
8469: PUSH
8470: CALL_OW 44
8474: ST_TO_ADDR
// placeunitxyr ( tmp , 88 , 15 , 1 , false ) ;
8475: LD_VAR 0 2
8479: PPUSH
8480: LD_INT 88
8482: PPUSH
8483: LD_INT 15
8485: PPUSH
8486: LD_INT 1
8488: PPUSH
8489: LD_INT 0
8491: PPUSH
8492: CALL_OW 50
// comenterunit ( tmp , ambarr00 ) ;
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_INT 14
8503: PPUSH
8504: CALL_OW 120
// ams_1 = tmp ;
8508: LD_ADDR_EXP 16
8512: PUSH
8513: LD_VAR 0 2
8517: ST_TO_ADDR
// preparesoldier ( sex_male , ams_2_sk ) ;
8518: LD_INT 1
8520: PPUSH
8521: LD_EXP 21
8525: PPUSH
8526: CALL_OW 381
// tmp = createhuman ;
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: CALL_OW 44
8539: ST_TO_ADDR
// placeunitxyr ( tmp , 88 , 15 , 1 , false ) ;
8540: LD_VAR 0 2
8544: PPUSH
8545: LD_INT 88
8547: PPUSH
8548: LD_INT 15
8550: PPUSH
8551: LD_INT 1
8553: PPUSH
8554: LD_INT 0
8556: PPUSH
8557: CALL_OW 50
// comenterunit ( tmp , ambarr00 ) ;
8561: LD_VAR 0 2
8565: PPUSH
8566: LD_INT 14
8568: PPUSH
8569: CALL_OW 120
// ams_2 = tmp ;
8573: LD_ADDR_EXP 17
8577: PUSH
8578: LD_VAR 0 2
8582: ST_TO_ADDR
// preparehuman ( sex_male , class_soldier , ams_3_sk ) ;
8583: LD_INT 1
8585: PPUSH
8586: LD_INT 1
8588: PPUSH
8589: LD_EXP 22
8593: PPUSH
8594: CALL_OW 380
// tmp = createhuman ;
8598: LD_ADDR_VAR 0 2
8602: PUSH
8603: CALL_OW 44
8607: ST_TO_ADDR
// placeunitxyr ( tmp , 88 , 15 , 1 , false ) ;
8608: LD_VAR 0 2
8612: PPUSH
8613: LD_INT 88
8615: PPUSH
8616: LD_INT 15
8618: PPUSH
8619: LD_INT 1
8621: PPUSH
8622: LD_INT 0
8624: PPUSH
8625: CALL_OW 50
// comenterunit ( tmp , ambarr00 ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_INT 14
8636: PPUSH
8637: CALL_OW 120
// ams_3 = tmp ;
8641: LD_ADDR_EXP 18
8645: PUSH
8646: LD_VAR 0 2
8650: ST_TO_ADDR
// preparehuman ( sex_male , class_sniper , ams_4_sk ) ;
8651: LD_INT 1
8653: PPUSH
8654: LD_INT 5
8656: PPUSH
8657: LD_EXP 23
8661: PPUSH
8662: CALL_OW 380
// tmp = createhuman ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: CALL_OW 44
8675: ST_TO_ADDR
// placeunitxyr ( tmp , 88 , 15 , 1 , false ) ;
8676: LD_VAR 0 2
8680: PPUSH
8681: LD_INT 88
8683: PPUSH
8684: LD_INT 15
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 0
8692: PPUSH
8693: CALL_OW 50
// comenterunit ( tmp , ambarr00 ) ;
8697: LD_VAR 0 2
8701: PPUSH
8702: LD_INT 14
8704: PPUSH
8705: CALL_OW 120
// ams_4 = tmp ;
8709: LD_ADDR_EXP 19
8713: PUSH
8714: LD_VAR 0 2
8718: ST_TO_ADDR
// preparemechanic ( sex_female , amm0_sk ) ;
8719: LD_INT 2
8721: PPUSH
8722: LD_EXP 25
8726: PPUSH
8727: CALL_OW 383
// amm0 = createhuman ;
8731: LD_ADDR_EXP 24
8735: PUSH
8736: CALL_OW 44
8740: ST_TO_ADDR
// placeunitxyr ( amm0 , 97 , 11 , 1 , false ) ;
8741: LD_EXP 24
8745: PPUSH
8746: LD_INT 97
8748: PPUSH
8749: LD_INT 11
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: LD_INT 0
8757: PPUSH
8758: CALL_OW 50
// comenterunit ( amm0 , amcntw00 ) ;
8762: LD_EXP 24
8766: PPUSH
8767: LD_INT 16
8769: PPUSH
8770: CALL_OW 120
// vc_control = control_manual ;
8774: LD_ADDR_OWVAR 38
8778: PUSH
8779: LD_INT 1
8781: ST_TO_ADDR
// vc_engine = engine_siberite ;
8782: LD_ADDR_OWVAR 39
8786: PUSH
8787: LD_INT 3
8789: ST_TO_ADDR
// vc_chassis = amv1_ch ;
8790: LD_ADDR_OWVAR 37
8794: PUSH
8795: LD_EXP 39
8799: ST_TO_ADDR
// vc_weapon = amv1_wp ;
8800: LD_ADDR_OWVAR 40
8804: PUSH
8805: LD_EXP 40
8809: ST_TO_ADDR
// amv1 = createvehicle ;
8810: LD_ADDR_EXP 38
8814: PUSH
8815: CALL_OW 45
8819: ST_TO_ADDR
// setdir ( amv1 , 3 ) ;
8820: LD_EXP 38
8824: PPUSH
8825: LD_INT 3
8827: PPUSH
8828: CALL_OW 233
// placeunitxy ( amv1 , 76 , 14 , false ) ;
8832: LD_EXP 38
8836: PPUSH
8837: LD_INT 76
8839: PPUSH
8840: LD_INT 14
8842: PPUSH
8843: LD_INT 0
8845: PPUSH
8846: CALL_OW 48
// preparemechanic ( sex_male , amm1_sk ) ;
8850: LD_INT 1
8852: PPUSH
8853: LD_EXP 27
8857: PPUSH
8858: CALL_OW 383
// amm1 = createhuman ;
8862: LD_ADDR_EXP 26
8866: PUSH
8867: CALL_OW 44
8871: ST_TO_ADDR
// placehumaninunit ( amm1 , amv1 ) ;
8872: LD_EXP 26
8876: PPUSH
8877: LD_EXP 38
8881: PPUSH
8882: CALL_OW 52
// vc_chassis = amv2_ch ;
8886: LD_ADDR_OWVAR 37
8890: PUSH
8891: LD_EXP 42
8895: ST_TO_ADDR
// vc_weapon = amv2_wp ;
8896: LD_ADDR_OWVAR 40
8900: PUSH
8901: LD_EXP 43
8905: ST_TO_ADDR
// amv2 = createvehicle ;
8906: LD_ADDR_EXP 41
8910: PUSH
8911: CALL_OW 45
8915: ST_TO_ADDR
// setdir ( amv2 , 2 ) ;
8916: LD_EXP 41
8920: PPUSH
8921: LD_INT 2
8923: PPUSH
8924: CALL_OW 233
// placeunitxy ( amv2 , 84 , 19 , false ) ;
8928: LD_EXP 41
8932: PPUSH
8933: LD_INT 84
8935: PPUSH
8936: LD_INT 19
8938: PPUSH
8939: LD_INT 0
8941: PPUSH
8942: CALL_OW 48
// preparemechanic ( sex_male , amm2_sk ) ;
8946: LD_INT 1
8948: PPUSH
8949: LD_EXP 29
8953: PPUSH
8954: CALL_OW 383
// amm2 = createhuman ;
8958: LD_ADDR_EXP 28
8962: PUSH
8963: CALL_OW 44
8967: ST_TO_ADDR
// placehumaninunit ( amm2 , amv2 ) ;
8968: LD_EXP 28
8972: PPUSH
8973: LD_EXP 41
8977: PPUSH
8978: CALL_OW 52
// vc_chassis = amv3_ch ;
8982: LD_ADDR_OWVAR 37
8986: PUSH
8987: LD_EXP 45
8991: ST_TO_ADDR
// vc_weapon = amv3_wp ;
8992: LD_ADDR_OWVAR 40
8996: PUSH
8997: LD_EXP 46
9001: ST_TO_ADDR
// amv3 = createvehicle ;
9002: LD_ADDR_EXP 44
9006: PUSH
9007: CALL_OW 45
9011: ST_TO_ADDR
// setdir ( amv3 , 4 ) ;
9012: LD_EXP 44
9016: PPUSH
9017: LD_INT 4
9019: PPUSH
9020: CALL_OW 233
// placeunitxy ( amv3 , 91 , 23 , false ) ;
9024: LD_EXP 44
9028: PPUSH
9029: LD_INT 91
9031: PPUSH
9032: LD_INT 23
9034: PPUSH
9035: LD_INT 0
9037: PPUSH
9038: CALL_OW 48
// preparemechanic ( sex_male , amm3_sk ) ;
9042: LD_INT 1
9044: PPUSH
9045: LD_EXP 31
9049: PPUSH
9050: CALL_OW 383
// amm3 = createhuman ;
9054: LD_ADDR_EXP 30
9058: PUSH
9059: CALL_OW 44
9063: ST_TO_ADDR
// placehumaninunit ( amm3 , amv3 ) ;
9064: LD_EXP 30
9068: PPUSH
9069: LD_EXP 44
9073: PPUSH
9074: CALL_OW 52
// vc_chassis = amv4_ch ;
9078: LD_ADDR_OWVAR 37
9082: PUSH
9083: LD_EXP 48
9087: ST_TO_ADDR
// vc_weapon = amv4_wp ;
9088: LD_ADDR_OWVAR 40
9092: PUSH
9093: LD_EXP 49
9097: ST_TO_ADDR
// amv4 = createvehicle ;
9098: LD_ADDR_EXP 47
9102: PUSH
9103: CALL_OW 45
9107: ST_TO_ADDR
// setdir ( amv4 , 2 ) ;
9108: LD_EXP 47
9112: PPUSH
9113: LD_INT 2
9115: PPUSH
9116: CALL_OW 233
// placeunitxy ( amv4 , 105 , 26 , false ) ;
9120: LD_EXP 47
9124: PPUSH
9125: LD_INT 105
9127: PPUSH
9128: LD_INT 26
9130: PPUSH
9131: LD_INT 0
9133: PPUSH
9134: CALL_OW 48
// preparemechanic ( sex_male , amm4_sk ) ;
9138: LD_INT 1
9140: PPUSH
9141: LD_EXP 33
9145: PPUSH
9146: CALL_OW 383
// amm4 = createhuman ;
9150: LD_ADDR_EXP 32
9154: PUSH
9155: CALL_OW 44
9159: ST_TO_ADDR
// placehumaninunit ( amm4 , amv4 ) ;
9160: LD_EXP 32
9164: PPUSH
9165: LD_EXP 47
9169: PPUSH
9170: CALL_OW 52
// vc_chassis = amv5_ch ;
9174: LD_ADDR_OWVAR 37
9178: PUSH
9179: LD_EXP 51
9183: ST_TO_ADDR
// vc_weapon = amv5_wp ;
9184: LD_ADDR_OWVAR 40
9188: PUSH
9189: LD_EXP 52
9193: ST_TO_ADDR
// amv5 = createvehicle ;
9194: LD_ADDR_EXP 50
9198: PUSH
9199: CALL_OW 45
9203: ST_TO_ADDR
// setdir ( amv5 , 3 ) ;
9204: LD_EXP 50
9208: PPUSH
9209: LD_INT 3
9211: PPUSH
9212: CALL_OW 233
// placeunitxy ( amv5 , 110 , 24 , false ) ;
9216: LD_EXP 50
9220: PPUSH
9221: LD_INT 110
9223: PPUSH
9224: LD_INT 24
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 48
// preparemechanic ( sex_male , amm5_sk ) ;
9234: LD_INT 1
9236: PPUSH
9237: LD_EXP 35
9241: PPUSH
9242: CALL_OW 383
// amm5 = createhuman ;
9246: LD_ADDR_EXP 34
9250: PUSH
9251: CALL_OW 44
9255: ST_TO_ADDR
// placehumaninunit ( amm5 , amv5 ) ;
9256: LD_EXP 34
9260: PPUSH
9261: LD_EXP 50
9265: PPUSH
9266: CALL_OW 52
// vc_chassis = amv6_ch ;
9270: LD_ADDR_OWVAR 37
9274: PUSH
9275: LD_EXP 54
9279: ST_TO_ADDR
// vc_weapon = amv6_wp ;
9280: LD_ADDR_OWVAR 40
9284: PUSH
9285: LD_EXP 55
9289: ST_TO_ADDR
// amv6 = createvehicle ;
9290: LD_ADDR_EXP 53
9294: PUSH
9295: CALL_OW 45
9299: ST_TO_ADDR
// setdir ( amv6 , 2 ) ;
9300: LD_EXP 53
9304: PPUSH
9305: LD_INT 2
9307: PPUSH
9308: CALL_OW 233
// placeunitxy ( amv6 , 115 , 11 , false ) ;
9312: LD_EXP 53
9316: PPUSH
9317: LD_INT 115
9319: PPUSH
9320: LD_INT 11
9322: PPUSH
9323: LD_INT 0
9325: PPUSH
9326: CALL_OW 48
// preparemechanic ( sex_male , amm6_sk ) ;
9330: LD_INT 1
9332: PPUSH
9333: LD_EXP 37
9337: PPUSH
9338: CALL_OW 383
// amm6 = createhuman ;
9342: LD_ADDR_EXP 36
9346: PUSH
9347: CALL_OW 44
9351: ST_TO_ADDR
// placehumaninunit ( amm6 , amv6 ) ;
9352: LD_EXP 36
9356: PPUSH
9357: LD_EXP 53
9361: PPUSH
9362: CALL_OW 52
// doprovoda = [ amv1 , amv2 , amv3 ] ;
9366: LD_ADDR_LOC 11
9370: PUSH
9371: LD_EXP 38
9375: PUSH
9376: LD_EXP 41
9380: PUSH
9381: LD_EXP 44
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: ST_TO_ADDR
// comremember ( doprovoda ) ;
9391: LD_LOC 11
9395: PPUSH
9396: CALL_OW 143
// preparehuman ( sex_male , class_sniper , amsn0_sk ) ;
9400: LD_INT 1
9402: PPUSH
9403: LD_INT 5
9405: PPUSH
9406: LD_EXP 69
9410: PPUSH
9411: CALL_OW 380
// amsn0 = createhuman ;
9415: LD_ADDR_EXP 68
9419: PUSH
9420: CALL_OW 44
9424: ST_TO_ADDR
// placeunitxyr ( amsn0 , 71 , 9 , 1 , false ) ;
9425: LD_EXP 68
9429: PPUSH
9430: LD_INT 71
9432: PPUSH
9433: LD_INT 9
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: LD_INT 0
9441: PPUSH
9442: CALL_OW 50
// comhold ( amsn0 ) ;
9446: LD_EXP 68
9450: PPUSH
9451: CALL_OW 140
// preparehuman ( sex_male , class_sniper , amsn1_sk ) ;
9455: LD_INT 1
9457: PPUSH
9458: LD_INT 5
9460: PPUSH
9461: LD_EXP 71
9465: PPUSH
9466: CALL_OW 380
// amsn1 = createhuman ;
9470: LD_ADDR_EXP 70
9474: PUSH
9475: CALL_OW 44
9479: ST_TO_ADDR
// placeunitxyr ( amsn1 , 97 , 27 , 1 , false ) ;
9480: LD_EXP 70
9484: PPUSH
9485: LD_INT 97
9487: PPUSH
9488: LD_INT 27
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: LD_INT 0
9496: PPUSH
9497: CALL_OW 50
// comhold ( amsn1 ) ;
9501: LD_EXP 70
9505: PPUSH
9506: CALL_OW 140
// preparehuman ( sex_male , class_sniper , amsn2_sk ) ;
9510: LD_INT 1
9512: PPUSH
9513: LD_INT 5
9515: PPUSH
9516: LD_EXP 73
9520: PPUSH
9521: CALL_OW 380
// amsn2 = createhuman ;
9525: LD_ADDR_EXP 72
9529: PUSH
9530: CALL_OW 44
9534: ST_TO_ADDR
// placeunitxyr ( amsn2 , 116 , 19 , 1 , false ) ;
9535: LD_EXP 72
9539: PPUSH
9540: LD_INT 116
9542: PPUSH
9543: LD_INT 19
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: LD_INT 0
9551: PPUSH
9552: CALL_OW 50
// comhold ( amsn2 ) ;
9556: LD_EXP 72
9560: PPUSH
9561: CALL_OW 140
// prepareengineer ( sex_female , 9 ) ;
9565: LD_INT 2
9567: PPUSH
9568: LD_INT 9
9570: PPUSH
9571: CALL_OW 382
// tmp = createhuman ;
9575: LD_ADDR_VAR 0 2
9579: PUSH
9580: CALL_OW 44
9584: ST_TO_ADDR
// placeunitxyr ( tmp , 86 , 8 , 1 , false ) ;
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_INT 86
9592: PPUSH
9593: LD_INT 8
9595: PPUSH
9596: LD_INT 1
9598: PPUSH
9599: LD_INT 0
9601: PPUSH
9602: CALL_OW 50
// comenterunit ( tmp , amware00 ) ;
9606: LD_VAR 0 2
9610: PPUSH
9611: LD_INT 5
9613: PPUSH
9614: CALL_OW 120
// prepareengineer ( sex_female , 9 ) ;
9618: LD_INT 2
9620: PPUSH
9621: LD_INT 9
9623: PPUSH
9624: CALL_OW 382
// amen_ = createhuman ;
9628: LD_ADDR_LOC 8
9632: PUSH
9633: CALL_OW 44
9637: ST_TO_ADDR
// placeunitxyr ( amen_ , 86 , 8 , 1 , false ) ;
9638: LD_LOC 8
9642: PPUSH
9643: LD_INT 86
9645: PPUSH
9646: LD_INT 8
9648: PPUSH
9649: LD_INT 1
9651: PPUSH
9652: LD_INT 0
9654: PPUSH
9655: CALL_OW 50
// comremember ( amen_ ) ;
9659: LD_LOC 8
9663: PPUSH
9664: CALL_OW 143
// comenterunit ( amen_ , amware00 ) ;
9668: LD_LOC 8
9672: PPUSH
9673: LD_INT 5
9675: PPUSH
9676: CALL_OW 120
// setresourcevisibility ( 64 , 17 , am ) ;
9680: LD_INT 64
9682: PPUSH
9683: LD_INT 17
9685: PPUSH
9686: LD_EXP 2
9690: PPUSH
9691: CALL_OW 441
// prepareengineer ( sex_male , ame0_sk ) ;
9695: LD_INT 1
9697: PPUSH
9698: LD_EXP 75
9702: PPUSH
9703: CALL_OW 382
// ame0 = createhuman ;
9707: LD_ADDR_EXP 74
9711: PUSH
9712: CALL_OW 44
9716: ST_TO_ADDR
// placeunitxyr ( ame0 , 80 , 18 , 1 , false ) ;
9717: LD_EXP 74
9721: PPUSH
9722: LD_INT 80
9724: PPUSH
9725: LD_INT 18
9727: PPUSH
9728: LD_INT 1
9730: PPUSH
9731: LD_INT 0
9733: PPUSH
9734: CALL_OW 50
// comhold ( ame0 ) ;
9738: LD_EXP 74
9742: PPUSH
9743: CALL_OW 140
// prepareengineer ( sex_male , ame1_sk ) ;
9747: LD_INT 1
9749: PPUSH
9750: LD_EXP 77
9754: PPUSH
9755: CALL_OW 382
// ame1 = createhuman ;
9759: LD_ADDR_EXP 76
9763: PUSH
9764: CALL_OW 44
9768: ST_TO_ADDR
// placeunitxyr ( ame1 , 95 , 26 , 1 , false ) ;
9769: LD_EXP 76
9773: PPUSH
9774: LD_INT 95
9776: PPUSH
9777: LD_INT 26
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: LD_INT 0
9785: PPUSH
9786: CALL_OW 50
// comhold ( ame1 ) ;
9790: LD_EXP 76
9794: PPUSH
9795: CALL_OW 140
// prepareengineer ( sex_male , ame2_sk ) ;
9799: LD_INT 1
9801: PPUSH
9802: LD_EXP 79
9806: PPUSH
9807: CALL_OW 382
// ame2 = createhuman ;
9811: LD_ADDR_EXP 78
9815: PUSH
9816: CALL_OW 44
9820: ST_TO_ADDR
// placeunitxyr ( ame2 , 102 , 27 , 1 , false ) ;
9821: LD_EXP 78
9825: PPUSH
9826: LD_INT 102
9828: PPUSH
9829: LD_INT 27
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: LD_INT 0
9837: PPUSH
9838: CALL_OW 50
// comhold ( ame2 ) ;
9842: LD_EXP 78
9846: PPUSH
9847: CALL_OW 140
// prepareengineer ( sex_male , ame3_sk ) ;
9851: LD_INT 1
9853: PPUSH
9854: LD_EXP 81
9858: PPUSH
9859: CALL_OW 382
// ame3 = createhuman ;
9863: LD_ADDR_EXP 80
9867: PUSH
9868: CALL_OW 44
9872: ST_TO_ADDR
// placeunitxyr ( ame3 , 115 , 23 , 1 , false ) ;
9873: LD_EXP 80
9877: PPUSH
9878: LD_INT 115
9880: PPUSH
9881: LD_INT 23
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: LD_INT 0
9889: PPUSH
9890: CALL_OW 50
// comhold ( ame3 ) ;
9894: LD_EXP 80
9898: PPUSH
9899: CALL_OW 140
// prepareengineer ( sex_male , ame4_sk ) ;
9903: LD_INT 1
9905: PPUSH
9906: LD_EXP 83
9910: PPUSH
9911: CALL_OW 382
// ame4 = createhuman ;
9915: LD_ADDR_EXP 82
9919: PUSH
9920: CALL_OW 44
9924: ST_TO_ADDR
// placeunitxyr ( ame4 , 113 , 7 , 1 , false ) ;
9925: LD_EXP 82
9929: PPUSH
9930: LD_INT 113
9932: PPUSH
9933: LD_INT 7
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: LD_INT 0
9941: PPUSH
9942: CALL_OW 50
// comhold ( ame4 ) ;
9946: LD_EXP 82
9950: PPUSH
9951: CALL_OW 140
// preparescientist ( sex_female , amsm0_sk ) ;
9955: LD_INT 2
9957: PPUSH
9958: LD_EXP 62
9962: PPUSH
9963: CALL_OW 384
// amsm0 = createhuman ;
9967: LD_ADDR_EXP 56
9971: PUSH
9972: CALL_OW 44
9976: ST_TO_ADDR
// placeunitxyr ( amsm0 , 77 , 6 , 1 , false ) ;
9977: LD_EXP 56
9981: PPUSH
9982: LD_INT 77
9984: PPUSH
9985: LD_INT 6
9987: PPUSH
9988: LD_INT 1
9990: PPUSH
9991: LD_INT 0
9993: PPUSH
9994: CALL_OW 50
// comenterunit ( amsm0 , amlabf00 ) ;
9998: LD_EXP 56
10002: PPUSH
10003: LD_INT 12
10005: PPUSH
10006: CALL_OW 120
// preparemechanic ( sex_male , amsm1_sk ) ;
10010: LD_INT 1
10012: PPUSH
10013: LD_EXP 63
10017: PPUSH
10018: CALL_OW 383
// amsm1 = createhuman ;
10022: LD_ADDR_EXP 57
10026: PUSH
10027: CALL_OW 44
10031: ST_TO_ADDR
// placeunitxyr ( amsm1 , 77 , 6 , 1 , false ) ;
10032: LD_EXP 57
10036: PPUSH
10037: LD_INT 77
10039: PPUSH
10040: LD_INT 6
10042: PPUSH
10043: LD_INT 1
10045: PPUSH
10046: LD_INT 0
10048: PPUSH
10049: CALL_OW 50
// setclass ( amsm1 , class_scientistic ) ;
10053: LD_EXP 57
10057: PPUSH
10058: LD_INT 4
10060: PPUSH
10061: CALL_OW 336
// comenterunit ( amsm1 , amlabf00 ) ;
10065: LD_EXP 57
10069: PPUSH
10070: LD_INT 12
10072: PPUSH
10073: CALL_OW 120
// preparescientist ( sex_female , amsm2_sk ) ;
10077: LD_INT 2
10079: PPUSH
10080: LD_EXP 64
10084: PPUSH
10085: CALL_OW 384
// amsm2 = createhuman ;
10089: LD_ADDR_EXP 58
10093: PUSH
10094: CALL_OW 44
10098: ST_TO_ADDR
// placeunitxyr ( amsm2 , 77 , 6 , 1 , false ) ;
10099: LD_EXP 58
10103: PPUSH
10104: LD_INT 77
10106: PPUSH
10107: LD_INT 6
10109: PPUSH
10110: LD_INT 1
10112: PPUSH
10113: LD_INT 0
10115: PPUSH
10116: CALL_OW 50
// comenterunit ( amsm2 , amlabf00 ) ;
10120: LD_EXP 58
10124: PPUSH
10125: LD_INT 12
10127: PPUSH
10128: CALL_OW 120
// preparemechanic ( sex_male , amsm3_sk ) ;
10132: LD_INT 1
10134: PPUSH
10135: LD_EXP 65
10139: PPUSH
10140: CALL_OW 383
// amsm3 = createhuman ;
10144: LD_ADDR_EXP 59
10148: PUSH
10149: CALL_OW 44
10153: ST_TO_ADDR
// placeunitxyr ( amsm3 , 77 , 6 , 1 , false ) ;
10154: LD_EXP 59
10158: PPUSH
10159: LD_INT 77
10161: PPUSH
10162: LD_INT 6
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL_OW 50
// setclass ( amsm3 , class_scientistic ) ;
10175: LD_EXP 59
10179: PPUSH
10180: LD_INT 4
10182: PPUSH
10183: CALL_OW 336
// comenterunit ( amsm3 , amlabf00 ) ;
10187: LD_EXP 59
10191: PPUSH
10192: LD_INT 12
10194: PPUSH
10195: CALL_OW 120
// preparescientist ( sex_female , amsm4_sk ) ;
10199: LD_INT 2
10201: PPUSH
10202: LD_EXP 66
10206: PPUSH
10207: CALL_OW 384
// amsm4 = createhuman ;
10211: LD_ADDR_EXP 60
10215: PUSH
10216: CALL_OW 44
10220: ST_TO_ADDR
// placeunitxyr ( amsm4 , 77 , 6 , 2 , false ) ;
10221: LD_EXP 60
10225: PPUSH
10226: LD_INT 77
10228: PPUSH
10229: LD_INT 6
10231: PPUSH
10232: LD_INT 2
10234: PPUSH
10235: LD_INT 0
10237: PPUSH
10238: CALL_OW 50
// comenterunit ( amsm4 , amlabf00 ) ;
10242: LD_EXP 60
10246: PPUSH
10247: LD_INT 12
10249: PPUSH
10250: CALL_OW 120
// preparemechanic ( sex_male , amsm5_sk ) ;
10254: LD_INT 1
10256: PPUSH
10257: LD_EXP 67
10261: PPUSH
10262: CALL_OW 383
// amsm5 = createhuman ;
10266: LD_ADDR_EXP 61
10270: PUSH
10271: CALL_OW 44
10275: ST_TO_ADDR
// placeunitxyr ( amsm5 , 77 , 6 , 2 , false ) ;
10276: LD_EXP 61
10280: PPUSH
10281: LD_INT 77
10283: PPUSH
10284: LD_INT 6
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 0
10292: PPUSH
10293: CALL_OW 50
// setclass ( amsm5 , class_scientistic ) ;
10297: LD_EXP 61
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 336
// comenterunit ( amsm5 , amlabf00 ) ;
10309: LD_EXP 61
10313: PPUSH
10314: LD_INT 12
10316: PPUSH
10317: CALL_OW 120
// inzinyri = [ ame0 , ame1 , ame2 , ame3 , ame4 ] ;
10321: LD_ADDR_LOC 10
10325: PUSH
10326: LD_EXP 74
10330: PUSH
10331: LD_EXP 76
10335: PUSH
10336: LD_EXP 78
10340: PUSH
10341: LD_EXP 80
10345: PUSH
10346: LD_EXP 82
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: ST_TO_ADDR
// comremember ( inzinyri ) ;
10358: LD_LOC 10
10362: PPUSH
10363: CALL_OW 143
// opravujte = [ [ amturr00 , ambunk00 , ambarr00 ] , [ ambarr00 , ambunk01 ] , [ ambunk02 ] , [ ambunk03 , amturr01 ] , [ amturr01 , ambunk04 ] ] ;
10367: LD_ADDR_LOC 9
10371: PUSH
10372: LD_INT 69
10374: PUSH
10375: LD_INT 1
10377: PUSH
10378: LD_INT 14
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 14
10388: PUSH
10389: LD_INT 2
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 3
10398: PUSH
10399: EMPTY
10400: LIST
10401: PUSH
10402: LD_INT 4
10404: PUSH
10405: LD_INT 70
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 70
10414: PUSH
10415: LD_INT 71
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: ST_TO_ADDR
// americani = filterallunits ( [ [ f_side , am ] , [ f_type , unit_human ] ] ) ;
10429: LD_ADDR_EXP 230
10433: PUSH
10434: LD_INT 22
10436: PUSH
10437: LD_EXP 2
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 21
10448: PUSH
10449: LD_INT 1
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PPUSH
10460: CALL_OW 69
10464: ST_TO_ADDR
// pocet_americanu = 0 + americani ;
10465: LD_ADDR_EXP 229
10469: PUSH
10470: LD_INT 0
10472: PUSH
10473: LD_EXP 230
10477: PLUS
10478: ST_TO_ADDR
// end ;
10479: LD_VAR 0 1
10483: RET
// export pocet_americanu , americani ; var opravujte ; var inzinyri ; every 0 0$3 do var tmp , tmp2 , tmp3 , oprav , buds , lives ;
10484: GO 10486
10486: DISABLE
10487: LD_INT 0
10489: PPUSH
10490: PPUSH
10491: PPUSH
10492: PPUSH
10493: PPUSH
10494: PPUSH
// begin for tmp = 1 to 0 + opravujte do
10495: LD_ADDR_VAR 0 1
10499: PUSH
10500: DOUBLE
10501: LD_INT 1
10503: DEC
10504: ST_TO_ADDR
10505: LD_INT 0
10507: PUSH
10508: LD_LOC 9
10512: PLUS
10513: PUSH
10514: FOR_TO
10515: IFFALSE 10746
// begin buds = [ ] ;
10517: LD_ADDR_VAR 0 5
10521: PUSH
10522: EMPTY
10523: ST_TO_ADDR
// lives = [ ] ;
10524: LD_ADDR_VAR 0 6
10528: PUSH
10529: EMPTY
10530: ST_TO_ADDR
// for tmp2 in opravujte [ tmp ] do
10531: LD_ADDR_VAR 0 2
10535: PUSH
10536: LD_LOC 9
10540: PUSH
10541: LD_VAR 0 1
10545: ARRAY
10546: PUSH
10547: FOR_IN
10548: IFFALSE 10610
// if ( getlives ( tmp2 ) < hranice_zdravi ) then
10550: LD_VAR 0 2
10554: PPUSH
10555: CALL_OW 256
10559: PUSH
10560: LD_INT 1000
10562: LESS
10563: IFFALSE 10608
// begin buds = buds ^ [ tmp2 ] ;
10565: LD_ADDR_VAR 0 5
10569: PUSH
10570: LD_VAR 0 5
10574: PUSH
10575: LD_VAR 0 2
10579: PUSH
10580: EMPTY
10581: LIST
10582: ADD
10583: ST_TO_ADDR
// lives = lives ^ [ getlives ( tmp2 ) ] ;
10584: LD_ADDR_VAR 0 6
10588: PUSH
10589: LD_VAR 0 6
10593: PUSH
10594: LD_VAR 0 2
10598: PPUSH
10599: CALL_OW 256
10603: PUSH
10604: EMPTY
10605: LIST
10606: ADD
10607: ST_TO_ADDR
// end ;
10608: GO 10547
10610: POP
10611: POP
// tmp2 = sortlistbylistasc ( buds , lives ) ;
10612: LD_ADDR_VAR 0 2
10616: PUSH
10617: LD_VAR 0 5
10621: PPUSH
10622: LD_VAR 0 6
10626: PPUSH
10627: CALL_OW 76
10631: ST_TO_ADDR
// if tmp2 then
10632: LD_VAR 0 2
10636: IFFALSE 10744
// begin comrepairbuilding ( inzinyri [ tmp ] , tmp2 [ 1 ] ) ;
10638: LD_LOC 10
10642: PUSH
10643: LD_VAR 0 1
10647: ARRAY
10648: PPUSH
10649: LD_VAR 0 2
10653: PUSH
10654: LD_INT 1
10656: ARRAY
10657: PPUSH
10658: CALL_OW 130
// for tmp3 = 2 to 0 + tmp2 do
10662: LD_ADDR_VAR 0 3
10666: PUSH
10667: DOUBLE
10668: LD_INT 2
10670: DEC
10671: ST_TO_ADDR
10672: LD_INT 0
10674: PUSH
10675: LD_VAR 0 2
10679: PLUS
10680: PUSH
10681: FOR_TO
10682: IFFALSE 10712
// addcomrepairbuilding ( inzinyri [ tmp ] , tmp2 [ tmp3 ] ) ;
10684: LD_LOC 10
10688: PUSH
10689: LD_VAR 0 1
10693: ARRAY
10694: PPUSH
10695: LD_VAR 0 2
10699: PUSH
10700: LD_VAR 0 3
10704: ARRAY
10705: PPUSH
10706: CALL_OW 190
10710: GO 10681
10712: POP
10713: POP
// addcomreturn ( inzinyri [ tmp ] ) ;
10714: LD_LOC 10
10718: PUSH
10719: LD_VAR 0 1
10723: ARRAY
10724: PPUSH
10725: CALL_OW 204
// addcomhold ( inzinyri [ tmp ] ) ;
10729: LD_LOC 10
10733: PUSH
10734: LD_VAR 0 1
10738: ARRAY
10739: PPUSH
10740: CALL_OW 200
// end ; end ;
10744: GO 10514
10746: POP
10747: POP
// enable ;
10748: ENABLE
// end ;
10749: PPOPN 6
10751: END
// every 20 20$1 trigger not am_surr do
10752: LD_EXP 221
10756: NOT
10757: IFFALSE 10781
10759: GO 10761
10761: DISABLE
// begin wait ( before_sib_res ) ;
10762: LD_EXP 222
10766: PPUSH
10767: CALL_OW 67
// comresearch ( amlabf00 , tech_sibfiss ) ;
10771: LD_INT 12
10773: PPUSH
10774: LD_INT 25
10776: PPUSH
10777: CALL_OW 124
// end ;
10781: END
// every 0 0$3.1 + 7 trigger amsibdeveldone do var tmp ;
10782: LD_EXP 241
10786: IFFALSE 10905
10788: GO 10790
10790: DISABLE
10791: LD_INT 0
10793: PPUSH
// begin if debug then
10794: LD_EXP 223
10798: IFFALSE 10807
// msg ( am: deme stavet siberitofku ) ;
10800: LD_STRING am: deme stavet siberitofku
10802: PPUSH
10803: CALL_OW 100
// tmp = [ amsm0 , amsm1 , amsm2 , amsm3 , amsm4 , amsm5 ] ;
10807: LD_ADDR_VAR 0 1
10811: PUSH
10812: LD_EXP 56
10816: PUSH
10817: LD_EXP 57
10821: PUSH
10822: LD_EXP 58
10826: PUSH
10827: LD_EXP 59
10831: PUSH
10832: LD_EXP 60
10836: PUSH
10837: LD_EXP 61
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: ST_TO_ADDR
// comexitbuilding ( tmp ) ;
10850: LD_VAR 0 1
10854: PPUSH
10855: CALL_OW 122
// addcomenterunit ( tmp , amfact00 ) ;
10859: LD_VAR 0 1
10863: PPUSH
10864: LD_INT 6
10866: PPUSH
10867: CALL_OW 180
// addcomchangeprofession ( tmp , class_mechanic ) ;
10871: LD_VAR 0 1
10875: PPUSH
10876: LD_INT 3
10878: PPUSH
10879: CALL_OW 183
// comconstruct ( [ amfact00 ] , us_morphling , engine_siberite , control_remote , us_siberium_rocket ) ;
10883: LD_INT 6
10885: PUSH
10886: EMPTY
10887: LIST
10888: PPUSH
10889: LD_INT 5
10891: PPUSH
10892: LD_INT 3
10894: PPUSH
10895: LD_INT 2
10897: PPUSH
10898: LD_INT 8
10900: PPUSH
10901: CALL_OW 125
// end ;
10905: PPOPN 1
10907: END
// var doprovoda ; every 0 0$10 + 10 10$0 marked 07 do var tmp ;
10908: GO 10910
10910: DISABLE
10911: LD_INT 0
10913: PPUSH
// begin amdoustavit = amdoustavit - 1 ;
10914: LD_ADDR_EXP 214
10918: PUSH
10919: LD_EXP 214
10923: PUSH
10924: LD_INT 1
10926: MINUS
10927: ST_TO_ADDR
// tmp = hexinfo ( 64 , 17 ) ;
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: LD_INT 64
10935: PPUSH
10936: LD_INT 17
10938: PPUSH
10939: CALL_OW 428
10943: ST_TO_ADDR
// if not amdoustavit and tmp <= 0 then
10944: LD_EXP 214
10948: NOT
10949: PUSH
10950: LD_VAR 0 1
10954: PUSH
10955: LD_INT 0
10957: LESSEQUAL
10958: AND
10959: IFFALSE 11075
// begin if debug then
10961: LD_EXP 223
10965: IFFALSE 10974
// msg ( am: deme stavet dul ) ;
10967: LD_STRING am: deme stavet dul
10969: PPUSH
10970: CALL_OW 100
// combuild ( [ amen_ ] , b_siberite_mine , 64 , 17 , 0 ) ;
10974: LD_LOC 8
10978: PUSH
10979: EMPTY
10980: LIST
10981: PPUSH
10982: LD_INT 30
10984: PPUSH
10985: LD_INT 64
10987: PPUSH
10988: LD_INT 17
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 145
// while isinarea ( amen_ , ambase ) do
10998: LD_LOC 8
11002: PPUSH
11003: LD_INT 11
11005: PPUSH
11006: CALL_OW 308
11010: IFFALSE 11021
// wait ( 0 0$1 ) ;
11012: LD_INT 35
11014: PPUSH
11015: CALL_OW 67
11019: GO 10998
// commoveunit ( doprovoda , amen_ ) ;
11021: LD_LOC 11
11025: PPUSH
11026: LD_LOC 8
11030: PPUSH
11031: CALL_OW 112
// enable ( 11 ) ;
11035: LD_INT 11
11037: ENABLE_MARKED
// addcomenterunit ( [ amen_ ] , amware00 ) ;
11038: LD_LOC 8
11042: PUSH
11043: EMPTY
11044: LIST
11045: PPUSH
11046: LD_INT 5
11048: PPUSH
11049: CALL_OW 180
// amdoustavit = rand ( amdoustavit_min , amdoustavit_max ) ;
11053: LD_ADDR_EXP 214
11057: PUSH
11058: LD_EXP 203
11062: PPUSH
11063: LD_EXP 204
11067: PPUSH
11068: CALL_OW 12
11072: ST_TO_ADDR
// end else
11073: GO 11076
// enable ;
11075: ENABLE
// end ;
11076: PPOPN 1
11078: END
// every 0 0$10 + 10 10$5 marked 11 do
11079: GO 11081
11081: DISABLE
// begin while islive ( amen_ ) and not isinarea ( amen_ , ambase ) do
11082: LD_LOC 8
11086: PPUSH
11087: CALL_OW 300
11091: PUSH
11092: LD_LOC 8
11096: PPUSH
11097: LD_INT 11
11099: PPUSH
11100: CALL_OW 308
11104: NOT
11105: AND
11106: IFFALSE 11117
// wait ( 0 0$1 ) ;
11108: LD_INT 35
11110: PPUSH
11111: CALL_OW 67
11115: GO 11082
// comreturn ( doprovoda ) ;
11117: LD_LOC 11
11121: PPUSH
11122: CALL_OW 144
// if islive ( amen_ ) then
11126: LD_LOC 8
11130: PPUSH
11131: CALL_OW 300
11135: IFFALSE 11152
// comenterunit ( [ amen_ ] , amware00 ) ;
11137: LD_LOC 8
11141: PUSH
11142: EMPTY
11143: LIST
11144: PPUSH
11145: LD_INT 5
11147: PPUSH
11148: CALL_OW 120
// end ; end_of_file
11152: END
// export function prepare_aliance ; var tmp ; begin
11153: LD_INT 0
11155: PPUSH
11156: PPUSH
// telep = [ ] ;
11157: LD_ADDR_LOC 18
11161: PUSH
11162: EMPTY
11163: ST_TO_ADDR
// uc_side = al ;
11164: LD_ADDR_OWVAR 20
11168: PUSH
11169: LD_EXP 3
11173: ST_TO_ADDR
// uc_nation = nation_american ;
11174: LD_ADDR_OWVAR 21
11178: PUSH
11179: LD_INT 1
11181: ST_TO_ADDR
// preparesoldier ( sex_male , als0_sk ) ;
11182: LD_INT 1
11184: PPUSH
11185: LD_EXP 89
11189: PPUSH
11190: CALL_OW 381
// tmp = createhuman ;
11194: LD_ADDR_VAR 0 2
11198: PUSH
11199: CALL_OW 44
11203: ST_TO_ADDR
// placeunitxyr ( tmp , 151 , 49 , 1 , false ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 151
11211: PPUSH
11212: LD_INT 49
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: LD_INT 0
11220: PPUSH
11221: CALL_OW 50
// comenterunit ( tmp , albunk00 ) ;
11225: LD_VAR 0 2
11229: PPUSH
11230: LD_INT 24
11232: PPUSH
11233: CALL_OW 120
// als0 = tmp ;
11237: LD_ADDR_EXP 84
11241: PUSH
11242: LD_VAR 0 2
11246: ST_TO_ADDR
// preparesoldier ( sex_male , als1_sk ) ;
11247: LD_INT 1
11249: PPUSH
11250: LD_EXP 90
11254: PPUSH
11255: CALL_OW 381
// tmp = createhuman ;
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: CALL_OW 44
11268: ST_TO_ADDR
// placeunitxyr ( tmp , 150 , 64 , 1 , false ) ;
11269: LD_VAR 0 2
11273: PPUSH
11274: LD_INT 150
11276: PPUSH
11277: LD_INT 64
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: LD_INT 0
11285: PPUSH
11286: CALL_OW 50
// comenterunit ( tmp , albunk01 ) ;
11290: LD_VAR 0 2
11294: PPUSH
11295: LD_INT 23
11297: PPUSH
11298: CALL_OW 120
// als1 = tmp ;
11302: LD_ADDR_EXP 85
11306: PUSH
11307: LD_VAR 0 2
11311: ST_TO_ADDR
// preparesoldier ( sex_male , als2_sk ) ;
11312: LD_INT 1
11314: PPUSH
11315: LD_EXP 91
11319: PPUSH
11320: CALL_OW 381
// tmp = createhuman ;
11324: LD_ADDR_VAR 0 2
11328: PUSH
11329: CALL_OW 44
11333: ST_TO_ADDR
// placeunitxyr ( tmp , 153 , 77 , 1 , false ) ;
11334: LD_VAR 0 2
11338: PPUSH
11339: LD_INT 153
11341: PPUSH
11342: LD_INT 77
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: LD_INT 0
11350: PPUSH
11351: CALL_OW 50
// comenterunit ( tmp , albunk02 ) ;
11355: LD_VAR 0 2
11359: PPUSH
11360: LD_INT 22
11362: PPUSH
11363: CALL_OW 120
// als2 = tmp ;
11367: LD_ADDR_EXP 86
11371: PUSH
11372: LD_VAR 0 2
11376: ST_TO_ADDR
// uc_nation = nation_russian ;
11377: LD_ADDR_OWVAR 21
11381: PUSH
11382: LD_INT 3
11384: ST_TO_ADDR
// preparesoldier ( sex_male , als3_sk ) ;
11385: LD_INT 1
11387: PPUSH
11388: LD_EXP 92
11392: PPUSH
11393: CALL_OW 381
// tmp = createhuman ;
11397: LD_ADDR_VAR 0 2
11401: PUSH
11402: CALL_OW 44
11406: ST_TO_ADDR
// placeunitxyr ( tmp , 163 , 89 , 1 , false ) ;
11407: LD_VAR 0 2
11411: PPUSH
11412: LD_INT 163
11414: PPUSH
11415: LD_INT 89
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: LD_INT 0
11423: PPUSH
11424: CALL_OW 50
// comenterunit ( tmp , albunk03 ) ;
11428: LD_VAR 0 2
11432: PPUSH
11433: LD_INT 21
11435: PPUSH
11436: CALL_OW 120
// als3 = tmp ;
11440: LD_ADDR_EXP 87
11444: PUSH
11445: LD_VAR 0 2
11449: ST_TO_ADDR
// preparesoldier ( sex_male , als4_sk ) ;
11450: LD_INT 1
11452: PPUSH
11453: LD_EXP 93
11457: PPUSH
11458: CALL_OW 381
// tmp = createhuman ;
11462: LD_ADDR_VAR 0 2
11466: PUSH
11467: CALL_OW 44
11471: ST_TO_ADDR
// placeunitxyr ( tmp , 172 , 97 , 1 , false ) ;
11472: LD_VAR 0 2
11476: PPUSH
11477: LD_INT 172
11479: PPUSH
11480: LD_INT 97
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 0
11488: PPUSH
11489: CALL_OW 50
// comenterunit ( tmp , albunk04 ) ;
11493: LD_VAR 0 2
11497: PPUSH
11498: LD_INT 20
11500: PPUSH
11501: CALL_OW 120
// als4 = tmp ;
11505: LD_ADDR_EXP 88
11509: PUSH
11510: LD_VAR 0 2
11514: ST_TO_ADDR
// uc_nation = nation_american ;
11515: LD_ADDR_OWVAR 21
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// preparesoldier ( sex_male , als_1_sk ) ;
11523: LD_INT 1
11525: PPUSH
11526: LD_EXP 98
11530: PPUSH
11531: CALL_OW 381
// tmp = createhuman ;
11535: LD_ADDR_VAR 0 2
11539: PUSH
11540: CALL_OW 44
11544: ST_TO_ADDR
// placeunitxyr ( tmp , 156 , 42 , 1 , false ) ;
11545: LD_VAR 0 2
11549: PPUSH
11550: LD_INT 156
11552: PPUSH
11553: LD_INT 42
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: LD_INT 0
11561: PPUSH
11562: CALL_OW 50
// comenterunit ( tmp , albarr00 ) ;
11566: LD_VAR 0 2
11570: PPUSH
11571: LD_INT 41
11573: PPUSH
11574: CALL_OW 120
// als_1 = tmp ;
11578: LD_ADDR_EXP 94
11582: PUSH
11583: LD_VAR 0 2
11587: ST_TO_ADDR
// preparesoldier ( sex_male , als_2_sk ) ;
11588: LD_INT 1
11590: PPUSH
11591: LD_EXP 99
11595: PPUSH
11596: CALL_OW 381
// tmp = createhuman ;
11600: LD_ADDR_VAR 0 2
11604: PUSH
11605: CALL_OW 44
11609: ST_TO_ADDR
// placeunitxyr ( tmp , 156 , 42 , 1 , false ) ;
11610: LD_VAR 0 2
11614: PPUSH
11615: LD_INT 156
11617: PPUSH
11618: LD_INT 42
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 50
// comenterunit ( tmp , albarr00 ) ;
11631: LD_VAR 0 2
11635: PPUSH
11636: LD_INT 41
11638: PPUSH
11639: CALL_OW 120
// als_2 = tmp ;
11643: LD_ADDR_EXP 95
11647: PUSH
11648: LD_VAR 0 2
11652: ST_TO_ADDR
// preparehuman ( sex_male , class_sniper , als_3_sk ) ;
11653: LD_INT 1
11655: PPUSH
11656: LD_INT 5
11658: PPUSH
11659: LD_EXP 100
11663: PPUSH
11664: CALL_OW 380
// tmp = createhuman ;
11668: LD_ADDR_VAR 0 2
11672: PUSH
11673: CALL_OW 44
11677: ST_TO_ADDR
// placeunitxyr ( tmp , 156 , 42 , 1 , false ) ;
11678: LD_VAR 0 2
11682: PPUSH
11683: LD_INT 156
11685: PPUSH
11686: LD_INT 42
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: LD_INT 0
11694: PPUSH
11695: CALL_OW 50
// comenterunit ( tmp , albarr00 ) ;
11699: LD_VAR 0 2
11703: PPUSH
11704: LD_INT 41
11706: PPUSH
11707: CALL_OW 120
// als_3 = tmp ;
11711: LD_ADDR_EXP 96
11715: PUSH
11716: LD_VAR 0 2
11720: ST_TO_ADDR
// preparehuman ( sex_male , class_sniper , als_4_sk ) ;
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 5
11726: PPUSH
11727: LD_EXP 101
11731: PPUSH
11732: CALL_OW 380
// tmp = createhuman ;
11736: LD_ADDR_VAR 0 2
11740: PUSH
11741: CALL_OW 44
11745: ST_TO_ADDR
// placeunitxyr ( tmp , 156 , 42 , 1 , false ) ;
11746: LD_VAR 0 2
11750: PPUSH
11751: LD_INT 156
11753: PPUSH
11754: LD_INT 42
11756: PPUSH
11757: LD_INT 1
11759: PPUSH
11760: LD_INT 0
11762: PPUSH
11763: CALL_OW 50
// comenterunit ( tmp , albarr00 ) ;
11767: LD_VAR 0 2
11771: PPUSH
11772: LD_INT 41
11774: PPUSH
11775: CALL_OW 120
// als_4 = tmp ;
11779: LD_ADDR_EXP 97
11783: PUSH
11784: LD_VAR 0 2
11788: ST_TO_ADDR
// uc_nation = nation_russian ;
11789: LD_ADDR_OWVAR 21
11793: PUSH
11794: LD_INT 3
11796: ST_TO_ADDR
// preparesoldier ( sex_male , als__1_sk ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_EXP 106
11804: PPUSH
11805: CALL_OW 381
// tmp = createhuman ;
11809: LD_ADDR_VAR 0 2
11813: PUSH
11814: CALL_OW 44
11818: ST_TO_ADDR
// placeunitxyr ( tmp , 185 , 101 , 1 , false ) ;
11819: LD_VAR 0 2
11823: PPUSH
11824: LD_INT 185
11826: PPUSH
11827: LD_INT 101
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: LD_INT 0
11835: PPUSH
11836: CALL_OW 50
// comenterunit ( tmp , albarr01 ) ;
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 42
11847: PPUSH
11848: CALL_OW 120
// als__1 = tmp ;
11852: LD_ADDR_EXP 102
11856: PUSH
11857: LD_VAR 0 2
11861: ST_TO_ADDR
// preparesoldier ( sex_male , als__2_sk ) ;
11862: LD_INT 1
11864: PPUSH
11865: LD_EXP 107
11869: PPUSH
11870: CALL_OW 381
// tmp = createhuman ;
11874: LD_ADDR_VAR 0 2
11878: PUSH
11879: CALL_OW 44
11883: ST_TO_ADDR
// placeunitxyr ( tmp , 185 , 101 , 1 , false ) ;
11884: LD_VAR 0 2
11888: PPUSH
11889: LD_INT 185
11891: PPUSH
11892: LD_INT 101
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 0
11900: PPUSH
11901: CALL_OW 50
// comenterunit ( tmp , albarr01 ) ;
11905: LD_VAR 0 2
11909: PPUSH
11910: LD_INT 42
11912: PPUSH
11913: CALL_OW 120
// als__2 = tmp ;
11917: LD_ADDR_EXP 103
11921: PUSH
11922: LD_VAR 0 2
11926: ST_TO_ADDR
// preparehuman ( sex_male , class_bazooker , als__3_sk ) ;
11927: LD_INT 1
11929: PPUSH
11930: LD_INT 9
11932: PPUSH
11933: LD_EXP 108
11937: PPUSH
11938: CALL_OW 380
// tmp = createhuman ;
11942: LD_ADDR_VAR 0 2
11946: PUSH
11947: CALL_OW 44
11951: ST_TO_ADDR
// placeunitxyr ( tmp , 185 , 101 , 1 , false ) ;
11952: LD_VAR 0 2
11956: PPUSH
11957: LD_INT 185
11959: PPUSH
11960: LD_INT 101
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: LD_INT 0
11968: PPUSH
11969: CALL_OW 50
// comenterunit ( tmp , albarr01 ) ;
11973: LD_VAR 0 2
11977: PPUSH
11978: LD_INT 42
11980: PPUSH
11981: CALL_OW 120
// als__3 = tmp ;
11985: LD_ADDR_EXP 104
11989: PUSH
11990: LD_VAR 0 2
11994: ST_TO_ADDR
// preparehuman ( sex_male , class_bazooker , als__4_sk ) ;
11995: LD_INT 1
11997: PPUSH
11998: LD_INT 9
12000: PPUSH
12001: LD_EXP 109
12005: PPUSH
12006: CALL_OW 380
// tmp = createhuman ;
12010: LD_ADDR_VAR 0 2
12014: PUSH
12015: CALL_OW 44
12019: ST_TO_ADDR
// placeunitxyr ( tmp , 185 , 101 , 1 , false ) ;
12020: LD_VAR 0 2
12024: PPUSH
12025: LD_INT 185
12027: PPUSH
12028: LD_INT 101
12030: PPUSH
12031: LD_INT 1
12033: PPUSH
12034: LD_INT 0
12036: PPUSH
12037: CALL_OW 50
// comenterunit ( tmp , albarr01 ) ;
12041: LD_VAR 0 2
12045: PPUSH
12046: LD_INT 42
12048: PPUSH
12049: CALL_OW 120
// als__4 = tmp ;
12053: LD_ADDR_EXP 105
12057: PUSH
12058: LD_VAR 0 2
12062: ST_TO_ADDR
// preparemechanic ( sex_female , alm0_sk ) ;
12063: LD_INT 2
12065: PPUSH
12066: LD_EXP 111
12070: PPUSH
12071: CALL_OW 383
// alm0 = createhuman ;
12075: LD_ADDR_EXP 110
12079: PUSH
12080: CALL_OW 44
12084: ST_TO_ADDR
// placeunitxyr ( alm0 , 157 , 55 , 1 , false ) ;
12085: LD_EXP 110
12089: PPUSH
12090: LD_INT 157
12092: PPUSH
12093: LD_INT 55
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: LD_INT 0
12101: PPUSH
12102: CALL_OW 50
// comenterunit ( alm0 , alcttw00 ) ;
12106: LD_EXP 110
12110: PPUSH
12111: LD_INT 47
12113: PPUSH
12114: CALL_OW 120
// vc_control = control_manual ;
12118: LD_ADDR_OWVAR 38
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// vc_engine = engine_siberite ;
12126: LD_ADDR_OWVAR 39
12130: PUSH
12131: LD_INT 3
12133: ST_TO_ADDR
// uc_nation = nation_american ;
12134: LD_ADDR_OWVAR 21
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// vc_chassis = alv1_ch ;
12142: LD_ADDR_OWVAR 37
12146: PUSH
12147: LD_EXP 125
12151: ST_TO_ADDR
// vc_weapon = alv1_wp ;
12152: LD_ADDR_OWVAR 40
12156: PUSH
12157: LD_EXP 126
12161: ST_TO_ADDR
// alv1 = createvehicle ;
12162: LD_ADDR_EXP 124
12166: PUSH
12167: CALL_OW 45
12171: ST_TO_ADDR
// setdir ( alv1 , 4 ) ;
12172: LD_EXP 124
12176: PPUSH
12177: LD_INT 4
12179: PPUSH
12180: CALL_OW 233
// placeunitxy ( alv1 , 150 , 42 , false ) ;
12184: LD_EXP 124
12188: PPUSH
12189: LD_INT 150
12191: PPUSH
12192: LD_INT 42
12194: PPUSH
12195: LD_INT 0
12197: PPUSH
12198: CALL_OW 48
// preparemechanic ( sex_male , alm1_sk ) ;
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 113
12209: PPUSH
12210: CALL_OW 383
// alm1 = createhuman ;
12214: LD_ADDR_EXP 112
12218: PUSH
12219: CALL_OW 44
12223: ST_TO_ADDR
// placehumaninunit ( alm1 , alv1 ) ;
12224: LD_EXP 112
12228: PPUSH
12229: LD_EXP 124
12233: PPUSH
12234: CALL_OW 52
// vc_chassis = alv2_ch ;
12238: LD_ADDR_OWVAR 37
12242: PUSH
12243: LD_EXP 128
12247: ST_TO_ADDR
// vc_weapon = alv2_wp ;
12248: LD_ADDR_OWVAR 40
12252: PUSH
12253: LD_EXP 129
12257: ST_TO_ADDR
// alv2 = createvehicle ;
12258: LD_ADDR_EXP 127
12262: PUSH
12263: CALL_OW 45
12267: ST_TO_ADDR
// setdir ( alv2 , 4 ) ;
12268: LD_EXP 127
12272: PPUSH
12273: LD_INT 4
12275: PPUSH
12276: CALL_OW 233
// placeunitxy ( alv2 , 152 , 68 , false ) ;
12280: LD_EXP 127
12284: PPUSH
12285: LD_INT 152
12287: PPUSH
12288: LD_INT 68
12290: PPUSH
12291: LD_INT 0
12293: PPUSH
12294: CALL_OW 48
// preparemechanic ( sex_male , alm2_sk ) ;
12298: LD_INT 1
12300: PPUSH
12301: LD_EXP 115
12305: PPUSH
12306: CALL_OW 383
// alm2 = createhuman ;
12310: LD_ADDR_EXP 114
12314: PUSH
12315: CALL_OW 44
12319: ST_TO_ADDR
// placehumaninunit ( alm2 , alv2 ) ;
12320: LD_EXP 114
12324: PPUSH
12325: LD_EXP 127
12329: PPUSH
12330: CALL_OW 52
// uc_nation = nation_russian ;
12334: LD_ADDR_OWVAR 21
12338: PUSH
12339: LD_INT 3
12341: ST_TO_ADDR
// vc_chassis = alv3_ch ;
12342: LD_ADDR_OWVAR 37
12346: PUSH
12347: LD_EXP 131
12351: ST_TO_ADDR
// vc_weapon = alv3_wp ;
12352: LD_ADDR_OWVAR 40
12356: PUSH
12357: LD_EXP 132
12361: ST_TO_ADDR
// alv3 = createvehicle ;
12362: LD_ADDR_EXP 130
12366: PUSH
12367: CALL_OW 45
12371: ST_TO_ADDR
// setdir ( alv3 , 5 ) ;
12372: LD_EXP 130
12376: PPUSH
12377: LD_INT 5
12379: PPUSH
12380: CALL_OW 233
// placeunitxy ( alv3 , 154 , 75 , false ) ;
12384: LD_EXP 130
12388: PPUSH
12389: LD_INT 154
12391: PPUSH
12392: LD_INT 75
12394: PPUSH
12395: LD_INT 0
12397: PPUSH
12398: CALL_OW 48
// preparemechanic ( sex_male , alm3_sk ) ;
12402: LD_INT 1
12404: PPUSH
12405: LD_EXP 117
12409: PPUSH
12410: CALL_OW 383
// alm3 = createhuman ;
12414: LD_ADDR_EXP 116
12418: PUSH
12419: CALL_OW 44
12423: ST_TO_ADDR
// placehumaninunit ( alm3 , alv3 ) ;
12424: LD_EXP 116
12428: PPUSH
12429: LD_EXP 130
12433: PPUSH
12434: CALL_OW 52
// vc_chassis = alv4_ch ;
12438: LD_ADDR_OWVAR 37
12442: PUSH
12443: LD_EXP 134
12447: ST_TO_ADDR
// vc_weapon = alv4_wp ;
12448: LD_ADDR_OWVAR 40
12452: PUSH
12453: LD_EXP 135
12457: ST_TO_ADDR
// alv4 = createvehicle ;
12458: LD_ADDR_EXP 133
12462: PUSH
12463: CALL_OW 45
12467: ST_TO_ADDR
// setdir ( alv4 , 3 ) ;
12468: LD_EXP 133
12472: PPUSH
12473: LD_INT 3
12475: PPUSH
12476: CALL_OW 233
// placeunitxy ( alv4 , 165 , 89 , false ) ;
12480: LD_EXP 133
12484: PPUSH
12485: LD_INT 165
12487: PPUSH
12488: LD_INT 89
12490: PPUSH
12491: LD_INT 0
12493: PPUSH
12494: CALL_OW 48
// preparemechanic ( sex_male , alm4_sk ) ;
12498: LD_INT 1
12500: PPUSH
12501: LD_EXP 119
12505: PPUSH
12506: CALL_OW 383
// alm4 = createhuman ;
12510: LD_ADDR_EXP 118
12514: PUSH
12515: CALL_OW 44
12519: ST_TO_ADDR
// placehumaninunit ( alm4 , alv4 ) ;
12520: LD_EXP 118
12524: PPUSH
12525: LD_EXP 133
12529: PPUSH
12530: CALL_OW 52
// uc_nation = nation_american ;
12534: LD_ADDR_OWVAR 21
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
// vc_chassis = alv5_ch ;
12542: LD_ADDR_OWVAR 37
12546: PUSH
12547: LD_EXP 137
12551: ST_TO_ADDR
// vc_weapon = alv5_wp ;
12552: LD_ADDR_OWVAR 40
12556: PUSH
12557: LD_EXP 138
12561: ST_TO_ADDR
// alv5 = createvehicle ;
12562: LD_ADDR_EXP 136
12566: PUSH
12567: CALL_OW 45
12571: ST_TO_ADDR
// setdir ( alv5 , 4 ) ;
12572: LD_EXP 136
12576: PPUSH
12577: LD_INT 4
12579: PPUSH
12580: CALL_OW 233
// placeunitxy ( alv5 , 168 , 93 , false ) ;
12584: LD_EXP 136
12588: PPUSH
12589: LD_INT 168
12591: PPUSH
12592: LD_INT 93
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 48
// preparemechanic ( sex_male , alm5_sk ) ;
12602: LD_INT 1
12604: PPUSH
12605: LD_EXP 121
12609: PPUSH
12610: CALL_OW 383
// alm5 = createhuman ;
12614: LD_ADDR_EXP 120
12618: PUSH
12619: CALL_OW 44
12623: ST_TO_ADDR
// placehumaninunit ( alm5 , alv5 ) ;
12624: LD_EXP 120
12628: PPUSH
12629: LD_EXP 136
12633: PPUSH
12634: CALL_OW 52
// vc_chassis = alv6_ch ;
12638: LD_ADDR_OWVAR 37
12642: PUSH
12643: LD_EXP 140
12647: ST_TO_ADDR
// vc_weapon = alv6_wp ;
12648: LD_ADDR_OWVAR 40
12652: PUSH
12653: LD_EXP 141
12657: ST_TO_ADDR
// alv6 = createvehicle ;
12658: LD_ADDR_EXP 139
12662: PUSH
12663: CALL_OW 45
12667: ST_TO_ADDR
// setdir ( alv6 , 3 ) ;
12668: LD_EXP 139
12672: PPUSH
12673: LD_INT 3
12675: PPUSH
12676: CALL_OW 233
// placeunitxy ( alv6 , 191 , 108 , false ) ;
12680: LD_EXP 139
12684: PPUSH
12685: LD_INT 191
12687: PPUSH
12688: LD_INT 108
12690: PPUSH
12691: LD_INT 0
12693: PPUSH
12694: CALL_OW 48
// preparemechanic ( sex_male , alm6_sk ) ;
12698: LD_INT 1
12700: PPUSH
12701: LD_EXP 123
12705: PPUSH
12706: CALL_OW 383
// alm6 = createhuman ;
12710: LD_ADDR_EXP 122
12714: PUSH
12715: CALL_OW 44
12719: ST_TO_ADDR
// placehumaninunit ( alm6 , alv6 ) ;
12720: LD_EXP 122
12724: PPUSH
12725: LD_EXP 139
12729: PPUSH
12730: CALL_OW 52
// uc_nation = nation_russian ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_INT 3
12741: ST_TO_ADDR
// preparehuman ( sex_male , class_bazooker , alsn0_sk ) ;
12742: LD_INT 1
12744: PPUSH
12745: LD_INT 9
12747: PPUSH
12748: LD_EXP 143
12752: PPUSH
12753: CALL_OW 380
// alsn0 = createhuman ;
12757: LD_ADDR_EXP 142
12761: PUSH
12762: CALL_OW 44
12766: ST_TO_ADDR
// placeunitxyr ( alsn0 , 150 , 52 , 1 , false ) ;
12767: LD_EXP 142
12771: PPUSH
12772: LD_INT 150
12774: PPUSH
12775: LD_INT 52
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: LD_INT 0
12783: PPUSH
12784: CALL_OW 50
// comhold ( alsn0 ) ;
12788: LD_EXP 142
12792: PPUSH
12793: CALL_OW 140
// uc_nation = nation_american ;
12797: LD_ADDR_OWVAR 21
12801: PUSH
12802: LD_INT 1
12804: ST_TO_ADDR
// preparehuman ( sex_male , class_sniper , alsn1_sk ) ;
12805: LD_INT 1
12807: PPUSH
12808: LD_INT 5
12810: PPUSH
12811: LD_EXP 145
12815: PPUSH
12816: CALL_OW 380
// alsn1 = createhuman ;
12820: LD_ADDR_EXP 144
12824: PUSH
12825: CALL_OW 44
12829: ST_TO_ADDR
// placeunitxyr ( alsn1 , 154 , 77 , 1 , false ) ;
12830: LD_EXP 144
12834: PPUSH
12835: LD_INT 154
12837: PPUSH
12838: LD_INT 77
12840: PPUSH
12841: LD_INT 1
12843: PPUSH
12844: LD_INT 0
12846: PPUSH
12847: CALL_OW 50
// comhold ( alsn1 ) ;
12851: LD_EXP 144
12855: PPUSH
12856: CALL_OW 140
// preparehuman ( sex_male , class_sniper , alsn2_sk ) ;
12860: LD_INT 1
12862: PPUSH
12863: LD_INT 5
12865: PPUSH
12866: LD_EXP 147
12870: PPUSH
12871: CALL_OW 380
// alsn2 = createhuman ;
12875: LD_ADDR_EXP 146
12879: PUSH
12880: CALL_OW 44
12884: ST_TO_ADDR
// placeunitxyr ( alsn2 , 176 , 101 , 1 , false ) ;
12885: LD_EXP 146
12889: PPUSH
12890: LD_INT 176
12892: PPUSH
12893: LD_INT 101
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_INT 0
12901: PPUSH
12902: CALL_OW 50
// comhold ( alsn2 ) ;
12906: LD_EXP 146
12910: PPUSH
12911: CALL_OW 140
// uc_nation = nation_russian ;
12915: LD_ADDR_OWVAR 21
12919: PUSH
12920: LD_INT 3
12922: ST_TO_ADDR
// prepareengineer ( sex_female , 9 ) ;
12923: LD_INT 2
12925: PPUSH
12926: LD_INT 9
12928: PPUSH
12929: CALL_OW 382
// tmp = createhuman ;
12933: LD_ADDR_VAR 0 2
12937: PUSH
12938: CALL_OW 44
12942: ST_TO_ADDR
// placeunitxyr ( tmp , 164 , 74 , 1 , false ) ;
12943: LD_VAR 0 2
12947: PPUSH
12948: LD_INT 164
12950: PPUSH
12951: LD_INT 74
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: LD_INT 0
12959: PPUSH
12960: CALL_OW 50
// comenterunit ( tmp , alware00 ) ;
12964: LD_VAR 0 2
12968: PPUSH
12969: LD_INT 25
12971: PPUSH
12972: CALL_OW 120
// uc_nation = nation_russian ;
12976: LD_ADDR_OWVAR 21
12980: PUSH
12981: LD_INT 3
12983: ST_TO_ADDR
// prepareengineer ( sex_male , ale0_sk ) ;
12984: LD_INT 1
12986: PPUSH
12987: LD_EXP 149
12991: PPUSH
12992: CALL_OW 382
// ale0 = createhuman ;
12996: LD_ADDR_EXP 148
13000: PUSH
13001: CALL_OW 44
13005: ST_TO_ADDR
// placeunitxyr ( ale0 , 151 , 47 , 1 , false ) ;
13006: LD_EXP 148
13010: PPUSH
13011: LD_INT 151
13013: PPUSH
13014: LD_INT 47
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: LD_INT 0
13022: PPUSH
13023: CALL_OW 50
// comhold ( ale0 ) ;
13027: LD_EXP 148
13031: PPUSH
13032: CALL_OW 140
// prepareengineer ( sex_male , ale1_sk ) ;
13036: LD_INT 1
13038: PPUSH
13039: LD_EXP 151
13043: PPUSH
13044: CALL_OW 382
// ale1 = createhuman ;
13048: LD_ADDR_EXP 150
13052: PUSH
13053: CALL_OW 44
13057: ST_TO_ADDR
// placeunitxyr ( ale1 , 151 , 60 , 1 , false ) ;
13058: LD_EXP 150
13062: PPUSH
13063: LD_INT 151
13065: PPUSH
13066: LD_INT 60
13068: PPUSH
13069: LD_INT 1
13071: PPUSH
13072: LD_INT 0
13074: PPUSH
13075: CALL_OW 50
// comhold ( ale1 ) ;
13079: LD_EXP 150
13083: PPUSH
13084: CALL_OW 140
// prepareengineer ( sex_male , ale2_sk ) ;
13088: LD_INT 1
13090: PPUSH
13091: LD_EXP 153
13095: PPUSH
13096: CALL_OW 382
// ale2 = createhuman ;
13100: LD_ADDR_EXP 152
13104: PUSH
13105: CALL_OW 44
13109: ST_TO_ADDR
// placeunitxyr ( ale2 , 160 , 86 , 1 , false ) ;
13110: LD_EXP 152
13114: PPUSH
13115: LD_INT 160
13117: PPUSH
13118: LD_INT 86
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: LD_INT 0
13126: PPUSH
13127: CALL_OW 50
// comhold ( ale2 ) ;
13131: LD_EXP 152
13135: PPUSH
13136: CALL_OW 140
// prepareengineer ( sex_male , ale3_sk ) ;
13140: LD_INT 1
13142: PPUSH
13143: LD_EXP 155
13147: PPUSH
13148: CALL_OW 382
// ale3 = createhuman ;
13152: LD_ADDR_EXP 154
13156: PUSH
13157: CALL_OW 44
13161: ST_TO_ADDR
// placeunitxyr ( ale3 , 173 , 97 , 1 , false ) ;
13162: LD_EXP 154
13166: PPUSH
13167: LD_INT 173
13169: PPUSH
13170: LD_INT 97
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: LD_INT 0
13178: PPUSH
13179: CALL_OW 50
// comhold ( ale3 ) ;
13183: LD_EXP 154
13187: PPUSH
13188: CALL_OW 140
// inzinyri = [ ale0 , ale1 , ale2 , ale3 ] ;
13192: LD_ADDR_LOC 13
13196: PUSH
13197: LD_EXP 148
13201: PUSH
13202: LD_EXP 150
13206: PUSH
13207: LD_EXP 152
13211: PUSH
13212: LD_EXP 154
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: ST_TO_ADDR
// comremember ( inzinyri ) ;
13223: LD_LOC 13
13227: PPUSH
13228: CALL_OW 143
// opravujte = [ [ albarr00 , albunk00 ] , [ alturr00 , albunk01 ] , [ albunk02 , albunk03 ] , [ albunk04 , alturr01 , albarr01 ] ] ;
13232: LD_ADDR_LOC 12
13236: PUSH
13237: LD_INT 41
13239: PUSH
13240: LD_INT 24
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 49
13249: PUSH
13250: LD_INT 23
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 22
13259: PUSH
13260: LD_INT 21
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 20
13269: PUSH
13270: LD_INT 68
13272: PUSH
13273: LD_INT 42
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: ST_TO_ADDR
// teleportexit ( altelp00 , 7 , 5 ) ;
13287: LD_INT 48
13289: PPUSH
13290: LD_INT 7
13292: PPUSH
13293: LD_INT 5
13295: PPUSH
13296: CALL_OW 243
// aliancnici = filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] ] ) ;
13300: LD_ADDR_EXP 232
13304: PUSH
13305: LD_INT 22
13307: PUSH
13308: LD_EXP 3
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 21
13319: PUSH
13320: LD_INT 1
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 69
13335: ST_TO_ADDR
// pocet_aliancniku = 0 + aliancnici ;
13336: LD_ADDR_EXP 231
13340: PUSH
13341: LD_INT 0
13343: PUSH
13344: LD_EXP 232
13348: PLUS
13349: ST_TO_ADDR
// utocnici = [ ] ;
13350: LD_ADDR_LOC 16
13354: PUSH
13355: EMPTY
13356: ST_TO_ADDR
// end ;
13357: LD_VAR 0 1
13361: RET
// export pocet_aliancniku , aliancnici ; var opravujte ; var inzinyri ; every 0 0$3 + 2 do var tmp , tmp2 , tmp3 , oprav , buds , lives ;
13362: GO 13364
13364: DISABLE
13365: LD_INT 0
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
13372: PPUSH
// begin for tmp = 1 to 0 + opravujte do
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: DOUBLE
13379: LD_INT 1
13381: DEC
13382: ST_TO_ADDR
13383: LD_INT 0
13385: PUSH
13386: LD_LOC 12
13390: PLUS
13391: PUSH
13392: FOR_TO
13393: IFFALSE 13624
// begin buds = [ ] ;
13395: LD_ADDR_VAR 0 5
13399: PUSH
13400: EMPTY
13401: ST_TO_ADDR
// lives = [ ] ;
13402: LD_ADDR_VAR 0 6
13406: PUSH
13407: EMPTY
13408: ST_TO_ADDR
// for tmp2 in opravujte [ tmp ] do
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_LOC 12
13418: PUSH
13419: LD_VAR 0 1
13423: ARRAY
13424: PUSH
13425: FOR_IN
13426: IFFALSE 13488
// if ( getlives ( tmp2 ) < hranice_zdravi ) then
13428: LD_VAR 0 2
13432: PPUSH
13433: CALL_OW 256
13437: PUSH
13438: LD_INT 1000
13440: LESS
13441: IFFALSE 13486
// begin buds = buds ^ [ tmp2 ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: LD_VAR 0 5
13452: PUSH
13453: LD_VAR 0 2
13457: PUSH
13458: EMPTY
13459: LIST
13460: ADD
13461: ST_TO_ADDR
// lives = lives ^ [ getlives ( tmp2 ) ] ;
13462: LD_ADDR_VAR 0 6
13466: PUSH
13467: LD_VAR 0 6
13471: PUSH
13472: LD_VAR 0 2
13476: PPUSH
13477: CALL_OW 256
13481: PUSH
13482: EMPTY
13483: LIST
13484: ADD
13485: ST_TO_ADDR
// end ;
13486: GO 13425
13488: POP
13489: POP
// tmp2 = sortlistbylistasc ( buds , lives ) ;
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_VAR 0 5
13499: PPUSH
13500: LD_VAR 0 6
13504: PPUSH
13505: CALL_OW 76
13509: ST_TO_ADDR
// if tmp2 then
13510: LD_VAR 0 2
13514: IFFALSE 13622
// begin comrepairbuilding ( inzinyri [ tmp ] , tmp2 [ 1 ] ) ;
13516: LD_LOC 13
13520: PUSH
13521: LD_VAR 0 1
13525: ARRAY
13526: PPUSH
13527: LD_VAR 0 2
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: CALL_OW 130
// for tmp3 = 2 to 0 + tmp2 do
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: DOUBLE
13546: LD_INT 2
13548: DEC
13549: ST_TO_ADDR
13550: LD_INT 0
13552: PUSH
13553: LD_VAR 0 2
13557: PLUS
13558: PUSH
13559: FOR_TO
13560: IFFALSE 13590
// addcomrepairbuilding ( inzinyri [ tmp ] , tmp2 [ tmp3 ] ) ;
13562: LD_LOC 13
13566: PUSH
13567: LD_VAR 0 1
13571: ARRAY
13572: PPUSH
13573: LD_VAR 0 2
13577: PUSH
13578: LD_VAR 0 3
13582: ARRAY
13583: PPUSH
13584: CALL_OW 190
13588: GO 13559
13590: POP
13591: POP
// addcomreturn ( inzinyri [ tmp ] ) ;
13592: LD_LOC 13
13596: PUSH
13597: LD_VAR 0 1
13601: ARRAY
13602: PPUSH
13603: CALL_OW 204
// addcomhold ( inzinyri [ tmp ] ) ;
13607: LD_LOC 13
13611: PUSH
13612: LD_VAR 0 1
13616: ARRAY
13617: PPUSH
13618: CALL_OW 200
// end ; end ;
13622: GO 13392
13624: POP
13625: POP
// enable ;
13626: ENABLE
// end ;
13627: PPOPN 6
13629: END
// every 0 0$1 marked 08 do var zkseznam , tmp , tmp1 ;
13630: GO 13632
13632: DISABLE
13633: LD_INT 0
13635: PPUSH
13636: PPUSH
13637: PPUSH
// begin wait ( 10 10$0 ) ;
13638: LD_INT 21000
13640: PPUSH
13641: CALL_OW 67
// if al_surr then
13645: LD_EXP 220
13649: IFFALSE 13653
// exit ;
13651: GO 14948
// if artef_gone then
13653: LD_EXP 245
13657: IFFALSE 13661
// exit ;
13659: GO 14948
// if debug then
13661: LD_EXP 223
13665: IFFALSE 13674
// msg ( al: armaggedon ) ;
13667: LD_STRING al: armaggedon
13669: PPUSH
13670: CALL_OW 100
// zkseznam = [ [ 64 , 17 ] , [ 51 , 12 ] , [ 58 , 24 ] , [ 70 , 32 ] , [ 45 , 19 ] , [ 55 , 35 ] , [ 46 , 31 ] , [ 61 , 41 ] , [ 58 , 46 ] , [ 51 , 40 ] , [ 55 , 47 ] , [ 60 , 51 ] , [ 64 , 53 ] , [ 37 , 41 ] , [ 38 , 59 ] , [ 45 , 50 ] , [ 48 , 57 ] , [ 47 , 48 ] , [ 35 , 16 ] , [ 38 , 51 ] , [ 55 , 61 ] , [ 64 , 60 ] , [ 60 , 63 ] , [ 76 , 60 ] , [ 74 , 71 ] , [ 71 , 73 ] , [ 74 , 77 ] , [ 54 , 65 ] , [ 60 , 68 ] , [ 57 , 69 ] , [ 62 , 71 ] , [ 58 , 71 ] , [ 61 , 73 ] , [ 63 , 74 ] , [ 66 , 75 ] , [ 60 , 74 ] , [ 63 , 76 ] , [ 62 , 76 ] , [ 64 , 77 ] , [ 65 , 77 ] , [ 46 , 65 ] , [ 50 , 67 ] , [ 53 , 68 ] , [ 56 , 72 ] , [ 56 , 74 ] , [ 47 , 69 ] , [ 46 , 72 ] , [ 46 , 78 ] , [ 42 , 81 ] , [ 50 , 83 ] , [ 55 , 85 ] , [ 60 , 78 ] , [ 59 , 79 ] , [ 59 , 82 ] , [ 63 , 81 ] , [ 67 , 79 ] , [ 64 , 79 ] , [ 67 , 82 ] , [ 68 , 83 ] , [ 66 , 83 ] , [ 71 , 84 ] , [ 64 , 84 ] , [ 70 , 87 ] , [ 75 , 91 ] , [ 68 , 90 ] , [ 58 , 93 ] , [ 63 , 95 ] , [ 67 , 94 ] , [ 75 , 95 ] , [ 62 , 99 ] , [ 68 , 105 ] , [ 70 , 100 ] , [ 73 , 98 ] , [ 75 , 105 ] , [ 84 , 82 ] , [ 81 , 89 ] , [ 91 , 94 ] , [ 77 , 114 ] , [ 74 , 122 ] , [ 81 , 100 ] , [ 81 , 106 ] , [ 88 , 104 ] , [ 91 , 120 ] , [ 103 , 126 ] , [ 89 , 132 ] , [ 103 , 133 ] , [ 112 , 120 ] , [ 115 , 130 ] , [ 102 , 107 ] , [ 62 , 77 ] , [ 65 , 78 ] ] ;
13674: LD_ADDR_VAR 0 1
13678: PUSH
13679: LD_INT 64
13681: PUSH
13682: LD_INT 17
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 51
13691: PUSH
13692: LD_INT 12
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 58
13701: PUSH
13702: LD_INT 24
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 70
13711: PUSH
13712: LD_INT 32
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 45
13721: PUSH
13722: LD_INT 19
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 55
13731: PUSH
13732: LD_INT 35
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 46
13741: PUSH
13742: LD_INT 31
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 61
13751: PUSH
13752: LD_INT 41
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 58
13761: PUSH
13762: LD_INT 46
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 51
13771: PUSH
13772: LD_INT 40
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 55
13781: PUSH
13782: LD_INT 47
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 60
13791: PUSH
13792: LD_INT 51
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 64
13801: PUSH
13802: LD_INT 53
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 37
13811: PUSH
13812: LD_INT 41
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 38
13821: PUSH
13822: LD_INT 59
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 45
13831: PUSH
13832: LD_INT 50
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 48
13841: PUSH
13842: LD_INT 57
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 47
13851: PUSH
13852: LD_INT 48
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 35
13861: PUSH
13862: LD_INT 16
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 38
13871: PUSH
13872: LD_INT 51
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 55
13881: PUSH
13882: LD_INT 61
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 64
13891: PUSH
13892: LD_INT 60
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 60
13901: PUSH
13902: LD_INT 63
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 76
13911: PUSH
13912: LD_INT 60
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 74
13921: PUSH
13922: LD_INT 71
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 71
13931: PUSH
13932: LD_INT 73
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 74
13941: PUSH
13942: LD_INT 77
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 54
13951: PUSH
13952: LD_INT 65
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 60
13961: PUSH
13962: LD_INT 68
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 57
13971: PUSH
13972: LD_INT 69
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 62
13981: PUSH
13982: LD_INT 71
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 58
13991: PUSH
13992: LD_INT 71
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 61
14001: PUSH
14002: LD_INT 73
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 63
14011: PUSH
14012: LD_INT 74
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 66
14021: PUSH
14022: LD_INT 75
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 60
14031: PUSH
14032: LD_INT 74
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 63
14041: PUSH
14042: LD_INT 76
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 62
14051: PUSH
14052: LD_INT 76
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 64
14061: PUSH
14062: LD_INT 77
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 65
14071: PUSH
14072: LD_INT 77
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 46
14081: PUSH
14082: LD_INT 65
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 50
14091: PUSH
14092: LD_INT 67
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 53
14101: PUSH
14102: LD_INT 68
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 56
14111: PUSH
14112: LD_INT 72
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 56
14121: PUSH
14122: LD_INT 74
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 47
14131: PUSH
14132: LD_INT 69
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 46
14141: PUSH
14142: LD_INT 72
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 46
14151: PUSH
14152: LD_INT 78
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 42
14161: PUSH
14162: LD_INT 81
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 50
14171: PUSH
14172: LD_INT 83
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 55
14181: PUSH
14182: LD_INT 85
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 60
14191: PUSH
14192: LD_INT 78
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 59
14201: PUSH
14202: LD_INT 79
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 59
14211: PUSH
14212: LD_INT 82
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 63
14221: PUSH
14222: LD_INT 81
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 67
14231: PUSH
14232: LD_INT 79
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 64
14241: PUSH
14242: LD_INT 79
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 67
14251: PUSH
14252: LD_INT 82
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 68
14261: PUSH
14262: LD_INT 83
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 66
14271: PUSH
14272: LD_INT 83
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: LD_INT 71
14281: PUSH
14282: LD_INT 84
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 64
14291: PUSH
14292: LD_INT 84
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 70
14301: PUSH
14302: LD_INT 87
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 75
14311: PUSH
14312: LD_INT 91
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 68
14321: PUSH
14322: LD_INT 90
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 58
14331: PUSH
14332: LD_INT 93
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 63
14341: PUSH
14342: LD_INT 95
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 67
14351: PUSH
14352: LD_INT 94
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 75
14361: PUSH
14362: LD_INT 95
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 62
14371: PUSH
14372: LD_INT 99
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 68
14381: PUSH
14382: LD_INT 105
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 70
14391: PUSH
14392: LD_INT 100
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 73
14401: PUSH
14402: LD_INT 98
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 75
14411: PUSH
14412: LD_INT 105
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 84
14421: PUSH
14422: LD_INT 82
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 81
14431: PUSH
14432: LD_INT 89
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 91
14441: PUSH
14442: LD_INT 94
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 77
14451: PUSH
14452: LD_INT 114
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 74
14461: PUSH
14462: LD_INT 122
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 81
14471: PUSH
14472: LD_INT 100
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 81
14481: PUSH
14482: LD_INT 106
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 88
14491: PUSH
14492: LD_INT 104
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 91
14501: PUSH
14502: LD_INT 120
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 103
14511: PUSH
14512: LD_INT 126
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 89
14521: PUSH
14522: LD_INT 132
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 103
14531: PUSH
14532: LD_INT 133
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 112
14541: PUSH
14542: LD_INT 120
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 115
14551: PUSH
14552: LD_INT 130
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 102
14561: PUSH
14562: LD_INT 107
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 62
14571: PUSH
14572: LD_INT 77
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 65
14581: PUSH
14582: LD_INT 78
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: ST_TO_ADDR
// for tmp in zkseznam do
14682: LD_ADDR_VAR 0 2
14686: PUSH
14687: LD_VAR 0 1
14691: PUSH
14692: FOR_IN
14693: IFFALSE 14749
// begin contaminate ( al , tmp [ 1 ] , tmp [ 2 ] ) ;
14695: LD_EXP 3
14699: PPUSH
14700: LD_VAR 0 2
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: LD_VAR 0 2
14713: PUSH
14714: LD_INT 2
14716: ARRAY
14717: PPUSH
14718: CALL_OW 489
// artcontamination ( tmp [ 1 ] , tmp [ 2 ] , 10 ) ;
14722: LD_VAR 0 2
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 2
14735: PUSH
14736: LD_INT 2
14738: ARRAY
14739: PPUSH
14740: LD_INT 10
14742: PPUSH
14743: CALL_OW 495
// end ;
14747: GO 14692
14749: POP
14750: POP
// tmp = filterunitsinarea ( mlsibdeps , [ [ f_type , unit_building ] , [ f_side , ru ] ] ) ;
14751: LD_ADDR_VAR 0 2
14755: PUSH
14756: LD_INT 22
14758: PPUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 3
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_EXP 1
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 70
14789: ST_TO_ADDR
// if tmp then
14790: LD_VAR 0 2
14794: IFFALSE 14805
// centernowonunits ( tmp ) ;
14796: LD_VAR 0 2
14800: PPUSH
14801: CALL_OW 87
// for tmp1 in tmp do
14805: LD_ADDR_VAR 0 3
14809: PUSH
14810: LD_VAR 0 2
14814: PUSH
14815: FOR_IN
14816: IFFALSE 14848
// setlives ( tmp1 , hranice_umirani - rand ( 1 , hranice_umirani - 2 ) ) ;
14818: LD_VAR 0 3
14822: PPUSH
14823: LD_INT 250
14825: PUSH
14826: LD_INT 1
14828: PPUSH
14829: LD_INT 250
14831: PUSH
14832: LD_INT 2
14834: MINUS
14835: PPUSH
14836: CALL_OW 12
14840: MINUS
14841: PPUSH
14842: CALL_OW 234
14846: GO 14815
14848: POP
14849: POP
// tmp = filterunitsinarea ( mlsibdeps , [ [ f_type , unit_vehicle ] , [ f_side , ru ] ] ) ;
14850: LD_ADDR_VAR 0 2
14854: PUSH
14855: LD_INT 22
14857: PPUSH
14858: LD_INT 21
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 22
14870: PUSH
14871: LD_EXP 1
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 70
14888: ST_TO_ADDR
// for tmp1 in tmp do
14889: LD_ADDR_VAR 0 3
14893: PUSH
14894: LD_VAR 0 2
14898: PUSH
14899: FOR_IN
14900: IFFALSE 14932
// setlives ( tmp1 , hranice_umirani - rand ( 1 , hranice_umirani - 2 ) ) ;
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 250
14909: PUSH
14910: LD_INT 1
14912: PPUSH
14913: LD_INT 250
14915: PUSH
14916: LD_INT 2
14918: MINUS
14919: PPUSH
14920: CALL_OW 12
14924: MINUS
14925: PPUSH
14926: CALL_OW 234
14930: GO 14899
14932: POP
14933: POP
// wait ( 0 0$1 ) ;
14934: LD_INT 35
14936: PPUSH
14937: CALL_OW 67
// youlost ( Alliance ) ;
14941: LD_STRING Alliance
14943: PPUSH
14944: CALL_OW 104
// end ;
14948: PPOPN 3
14950: END
// var attida , attidb , utocnici , ridici , telep ; every 0 0$10 + 10 10$0 do var tmp , tmp1 , tmp2 ;
14951: GO 14953
14953: DISABLE
14954: LD_INT 0
14956: PPUSH
14957: PPUSH
14958: PPUSH
// begin if al_surr then
14959: LD_EXP 220
14963: IFFALSE 14967
// exit ;
14965: GO 16566
// al_att = al_att - 1 ;
14967: LD_ADDR_EXP 216
14971: PUSH
14972: LD_EXP 216
14976: PUSH
14977: LD_INT 1
14979: MINUS
14980: ST_TO_ADDR
// if not al_att then
14981: LD_EXP 216
14985: NOT
14986: IFFALSE 16565
// begin if debug then
14988: LD_EXP 223
14992: IFFALSE 15001
// msg ( al: attack from two sides ) ;
14994: LD_STRING al: attack from two sides
14996: PPUSH
14997: CALL_OW 100
// uc_side = al ;
15001: LD_ADDR_OWVAR 20
15005: PUSH
15006: LD_EXP 3
15010: ST_TO_ADDR
// uc_nation = nation_american ;
15011: LD_ADDR_OWVAR 21
15015: PUSH
15016: LD_INT 1
15018: ST_TO_ADDR
// vc_control = control_manual ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// vc_engine = engine_siberite ;
15027: LD_ADDR_OWVAR 39
15031: PUSH
15032: LD_INT 3
15034: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_morphling , us_heavy_tracked ] [ difficulty ] ;
15035: LD_ADDR_OWVAR 37
15039: PUSH
15040: LD_INT 3
15042: PUSH
15043: LD_INT 5
15045: PUSH
15046: LD_INT 4
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: LD_OWVAR 67
15058: ARRAY
15059: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_heavy_gun , us_heavy_gun ] [ difficulty ] ;
15060: LD_ADDR_OWVAR 40
15064: PUSH
15065: LD_INT 5
15067: PUSH
15068: LD_INT 6
15070: PUSH
15071: LD_INT 6
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: LD_OWVAR 67
15083: ARRAY
15084: ST_TO_ADDR
// tmp = createvehicle ;
15085: LD_ADDR_VAR 0 1
15089: PUSH
15090: CALL_OW 45
15094: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15095: LD_VAR 0 1
15099: PPUSH
15100: LD_INT 3
15102: PPUSH
15103: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15107: LD_VAR 0 1
15111: PPUSH
15112: LD_INT 24
15114: PPUSH
15115: LD_INT 0
15117: PPUSH
15118: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15122: LD_INT 1
15124: PPUSH
15125: LD_EXP 217
15129: PPUSH
15130: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15134: CALL_OW 44
15138: PPUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 52
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_morphling ] [ difficulty ] ;
15148: LD_ADDR_OWVAR 37
15152: PUSH
15153: LD_INT 3
15155: PUSH
15156: LD_INT 3
15158: PUSH
15159: LD_INT 5
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: PUSH
15167: LD_OWVAR 67
15171: ARRAY
15172: ST_TO_ADDR
// vc_weapon = us_rocket_launcher ;
15173: LD_ADDR_OWVAR 40
15177: PUSH
15178: LD_INT 7
15180: ST_TO_ADDR
// tmp = createvehicle ;
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: CALL_OW 45
15190: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15191: LD_VAR 0 1
15195: PPUSH
15196: LD_INT 3
15198: PPUSH
15199: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15203: LD_VAR 0 1
15207: PPUSH
15208: LD_INT 24
15210: PPUSH
15211: LD_INT 0
15213: PPUSH
15214: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15218: LD_INT 1
15220: PPUSH
15221: LD_EXP 217
15225: PPUSH
15226: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15230: CALL_OW 44
15234: PPUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 52
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
15244: LD_ADDR_OWVAR 37
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: LD_INT 3
15254: PUSH
15255: LD_INT 4
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: LD_OWVAR 67
15267: ARRAY
15268: ST_TO_ADDR
// vc_weapon = us_laser ;
15269: LD_ADDR_OWVAR 40
15273: PUSH
15274: LD_INT 9
15276: ST_TO_ADDR
// tmp = createvehicle ;
15277: LD_ADDR_VAR 0 1
15281: PUSH
15282: CALL_OW 45
15286: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 3
15294: PPUSH
15295: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 24
15306: PPUSH
15307: LD_INT 0
15309: PPUSH
15310: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15314: LD_INT 1
15316: PPUSH
15317: LD_EXP 217
15321: PPUSH
15322: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15326: CALL_OW 44
15330: PPUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 52
// if difficulty > 1 then
15340: LD_OWVAR 67
15344: PUSH
15345: LD_INT 1
15347: GREATER
15348: IFFALSE 15446
// begin vc_chassis = [ 0 , us_medium_tracked , us_morphling ] [ difficulty ] ;
15350: LD_ADDR_OWVAR 37
15354: PUSH
15355: LD_INT 0
15357: PUSH
15358: LD_INT 3
15360: PUSH
15361: LD_INT 5
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: LD_OWVAR 67
15373: ARRAY
15374: ST_TO_ADDR
// vc_weapon = us_laser ;
15375: LD_ADDR_OWVAR 40
15379: PUSH
15380: LD_INT 9
15382: ST_TO_ADDR
// tmp = createvehicle ;
15383: LD_ADDR_VAR 0 1
15387: PUSH
15388: CALL_OW 45
15392: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15393: LD_VAR 0 1
15397: PPUSH
15398: LD_INT 3
15400: PPUSH
15401: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15405: LD_VAR 0 1
15409: PPUSH
15410: LD_INT 24
15412: PPUSH
15413: LD_INT 0
15415: PPUSH
15416: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15420: LD_INT 1
15422: PPUSH
15423: LD_EXP 217
15427: PPUSH
15428: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15432: CALL_OW 44
15436: PPUSH
15437: LD_VAR 0 1
15441: PPUSH
15442: CALL_OW 52
// end ; uc_nation = nation_russian ;
15446: LD_ADDR_OWVAR 21
15450: PUSH
15451: LD_INT 3
15453: ST_TO_ADDR
// vc_chassis = [ ru_medium_wheeled , ru_medium_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
15454: LD_ADDR_OWVAR 37
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 21
15464: PUSH
15465: LD_INT 23
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: PUSH
15473: LD_OWVAR 67
15477: ARRAY
15478: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
15479: LD_ADDR_OWVAR 40
15483: PUSH
15484: LD_INT 43
15486: ST_TO_ADDR
// tmp = createvehicle ;
15487: LD_ADDR_VAR 0 1
15491: PUSH
15492: CALL_OW 45
15496: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 3
15504: PPUSH
15505: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_INT 24
15516: PPUSH
15517: LD_INT 0
15519: PPUSH
15520: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15524: LD_INT 1
15526: PPUSH
15527: LD_EXP 217
15531: PPUSH
15532: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15536: CALL_OW 44
15540: PPUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 52
// if difficulty > 1 then
15550: LD_OWVAR 67
15554: PUSH
15555: LD_INT 1
15557: GREATER
15558: IFFALSE 15639
// begin vc_chassis = ru_medium_wheeled ;
15560: LD_ADDR_OWVAR 37
15564: PUSH
15565: LD_INT 21
15567: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
15568: LD_ADDR_OWVAR 40
15572: PUSH
15573: LD_INT 43
15575: ST_TO_ADDR
// tmp = createvehicle ;
15576: LD_ADDR_VAR 0 1
15580: PUSH
15581: CALL_OW 45
15585: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15586: LD_VAR 0 1
15590: PPUSH
15591: LD_INT 3
15593: PPUSH
15594: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15598: LD_VAR 0 1
15602: PPUSH
15603: LD_INT 24
15605: PPUSH
15606: LD_INT 0
15608: PPUSH
15609: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15613: LD_INT 1
15615: PPUSH
15616: LD_EXP 217
15620: PPUSH
15621: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15625: CALL_OW 44
15629: PPUSH
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 52
// end ; vc_chassis = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ difficulty ] ;
15639: LD_ADDR_OWVAR 37
15643: PUSH
15644: LD_INT 23
15646: PUSH
15647: LD_INT 23
15649: PUSH
15650: LD_INT 24
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: PUSH
15658: LD_OWVAR 67
15662: ARRAY
15663: ST_TO_ADDR
// vc_weapon = ru_rocket ;
15664: LD_ADDR_OWVAR 40
15668: PUSH
15669: LD_INT 47
15671: ST_TO_ADDR
// tmp = createvehicle ;
15672: LD_ADDR_VAR 0 1
15676: PUSH
15677: CALL_OW 45
15681: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15682: LD_VAR 0 1
15686: PPUSH
15687: LD_INT 3
15689: PPUSH
15690: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15694: LD_VAR 0 1
15698: PPUSH
15699: LD_INT 24
15701: PPUSH
15702: LD_INT 0
15704: PPUSH
15705: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15709: LD_INT 1
15711: PPUSH
15712: LD_EXP 217
15716: PPUSH
15717: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15721: CALL_OW 44
15725: PPUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 52
// if difficulty > 1 then
15735: LD_OWVAR 67
15739: PUSH
15740: LD_INT 1
15742: GREATER
15743: IFFALSE 15824
// begin vc_chassis = ru_heavy_wheeled ;
15745: LD_ADDR_OWVAR 37
15749: PUSH
15750: LD_INT 23
15752: ST_TO_ADDR
// vc_weapon = ru_rocket ;
15753: LD_ADDR_OWVAR 40
15757: PUSH
15758: LD_INT 47
15760: ST_TO_ADDR
// tmp = createvehicle ;
15761: LD_ADDR_VAR 0 1
15765: PUSH
15766: CALL_OW 45
15770: ST_TO_ADDR
// setdir ( tmp , 3 ) ;
15771: LD_VAR 0 1
15775: PPUSH
15776: LD_INT 3
15778: PPUSH
15779: CALL_OW 233
// placeunitarea ( tmp , alarriv , false ) ;
15783: LD_VAR 0 1
15787: PPUSH
15788: LD_INT 24
15790: PPUSH
15791: LD_INT 0
15793: PPUSH
15794: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15798: LD_INT 1
15800: PPUSH
15801: LD_EXP 217
15805: PPUSH
15806: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15810: CALL_OW 44
15814: PPUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 52
// end ; tmp1 = [ ] ;
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: EMPTY
15830: ST_TO_ADDR
// vc_chassis = [ ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ difficulty ] ;
15831: LD_ADDR_OWVAR 37
15835: PUSH
15836: LD_INT 23
15838: PUSH
15839: LD_INT 24
15841: PUSH
15842: LD_INT 24
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: PUSH
15850: LD_OWVAR 67
15854: ARRAY
15855: ST_TO_ADDR
// vc_weapon = ru_rocket ;
15856: LD_ADDR_OWVAR 40
15860: PUSH
15861: LD_INT 47
15863: ST_TO_ADDR
// tmp = createvehicle ;
15864: LD_ADDR_VAR 0 1
15868: PUSH
15869: CALL_OW 45
15873: ST_TO_ADDR
// placeunitarea ( tmp , albaseinner , false ) ;
15874: LD_VAR 0 1
15878: PPUSH
15879: LD_INT 25
15881: PPUSH
15882: LD_INT 0
15884: PPUSH
15885: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15889: LD_INT 1
15891: PPUSH
15892: LD_EXP 217
15896: PPUSH
15897: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
15901: CALL_OW 44
15905: PPUSH
15906: LD_VAR 0 1
15910: PPUSH
15911: CALL_OW 52
// tmp1 = tmp1 ^ [ tmp ] ;
15915: LD_ADDR_VAR 0 2
15919: PUSH
15920: LD_VAR 0 2
15924: PUSH
15925: LD_VAR 0 1
15929: PUSH
15930: EMPTY
15931: LIST
15932: ADD
15933: ST_TO_ADDR
// vc_chassis = [ ru_medium_wheeled , ru_medium_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
15934: LD_ADDR_OWVAR 37
15938: PUSH
15939: LD_INT 21
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 23
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_OWVAR 67
15957: ARRAY
15958: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
15959: LD_ADDR_OWVAR 40
15963: PUSH
15964: LD_INT 43
15966: ST_TO_ADDR
// tmp = createvehicle ;
15967: LD_ADDR_VAR 0 1
15971: PUSH
15972: CALL_OW 45
15976: ST_TO_ADDR
// placeunitarea ( tmp , albaseinner , false ) ;
15977: LD_VAR 0 1
15981: PPUSH
15982: LD_INT 25
15984: PPUSH
15985: LD_INT 0
15987: PPUSH
15988: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
15992: LD_INT 1
15994: PPUSH
15995: LD_EXP 217
15999: PPUSH
16000: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
16004: CALL_OW 44
16008: PPUSH
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 52
// tmp1 = tmp1 ^ [ tmp ] ;
16018: LD_ADDR_VAR 0 2
16022: PUSH
16023: LD_VAR 0 2
16027: PUSH
16028: LD_VAR 0 1
16032: PUSH
16033: EMPTY
16034: LIST
16035: ADD
16036: ST_TO_ADDR
// uc_nation = nation_american ;
16037: LD_ADDR_OWVAR 21
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
16045: LD_ADDR_OWVAR 37
16049: PUSH
16050: LD_INT 3
16052: PUSH
16053: LD_INT 3
16055: PUSH
16056: LD_INT 4
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: PUSH
16064: LD_OWVAR 67
16068: ARRAY
16069: ST_TO_ADDR
// vc_weapon = us_rocket_launcher ;
16070: LD_ADDR_OWVAR 40
16074: PUSH
16075: LD_INT 7
16077: ST_TO_ADDR
// tmp = createvehicle ;
16078: LD_ADDR_VAR 0 1
16082: PUSH
16083: CALL_OW 45
16087: ST_TO_ADDR
// placeunitarea ( tmp , albaseinner , false ) ;
16088: LD_VAR 0 1
16092: PPUSH
16093: LD_INT 25
16095: PPUSH
16096: LD_INT 0
16098: PPUSH
16099: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
16103: LD_INT 1
16105: PPUSH
16106: LD_EXP 217
16110: PPUSH
16111: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
16115: CALL_OW 44
16119: PPUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 52
// tmp1 = tmp1 ^ [ tmp ] ;
16129: LD_ADDR_VAR 0 2
16133: PUSH
16134: LD_VAR 0 2
16138: PUSH
16139: LD_VAR 0 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: ADD
16147: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
16148: LD_ADDR_OWVAR 37
16152: PUSH
16153: LD_INT 3
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 4
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: LD_OWVAR 67
16171: ARRAY
16172: ST_TO_ADDR
// vc_weapon = us_laser ;
16173: LD_ADDR_OWVAR 40
16177: PUSH
16178: LD_INT 9
16180: ST_TO_ADDR
// tmp = createvehicle ;
16181: LD_ADDR_VAR 0 1
16185: PUSH
16186: CALL_OW 45
16190: ST_TO_ADDR
// placeunitarea ( tmp , albaseinner , false ) ;
16191: LD_VAR 0 1
16195: PPUSH
16196: LD_INT 25
16198: PPUSH
16199: LD_INT 0
16201: PPUSH
16202: CALL_OW 49
// preparemechanic ( sex_male , al_def_skill ) ;
16206: LD_INT 1
16208: PPUSH
16209: LD_EXP 217
16213: PPUSH
16214: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
16218: CALL_OW 44
16222: PPUSH
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL_OW 52
// tmp1 = tmp1 ^ [ tmp ] ;
16232: LD_ADDR_VAR 0 2
16236: PUSH
16237: LD_VAR 0 2
16241: PUSH
16242: LD_VAR 0 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: ADD
16250: ST_TO_ADDR
// commoveunit ( tmp1 , altelp00 ) ;
16251: LD_VAR 0 2
16255: PPUSH
16256: LD_INT 48
16258: PPUSH
16259: CALL_OW 112
// tmp = filterunitsinarea ( alarriv , [ [ f_side , al ] , [ f_type , unit_vehicle ] ] ) ;
16263: LD_ADDR_VAR 0 1
16267: PUSH
16268: LD_INT 24
16270: PPUSH
16271: LD_INT 22
16273: PUSH
16274: LD_EXP 3
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 21
16285: PUSH
16286: LD_INT 2
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PPUSH
16297: CALL_OW 70
16301: ST_TO_ADDR
// utocnici = tmp ^ tmp1 ;
16302: LD_ADDR_LOC 16
16306: PUSH
16307: LD_VAR 0 1
16311: PUSH
16312: LD_VAR 0 2
16316: ADD
16317: ST_TO_ADDR
// ridici = [ ] ;
16318: LD_ADDR_LOC 17
16322: PUSH
16323: EMPTY
16324: ST_TO_ADDR
// for tmp2 in utocnici do
16325: LD_ADDR_VAR 0 3
16329: PUSH
16330: LD_LOC 16
16334: PUSH
16335: FOR_IN
16336: IFFALSE 16364
// ridici = ridici ^ [ isdrivenby ( tmp2 ) ] ;
16338: LD_ADDR_LOC 17
16342: PUSH
16343: LD_LOC 17
16347: PUSH
16348: LD_VAR 0 3
16352: PPUSH
16353: CALL_OW 311
16357: PUSH
16358: EMPTY
16359: LIST
16360: ADD
16361: ST_TO_ADDR
16362: GO 16335
16364: POP
16365: POP
// telep = [ ] ;
16366: LD_ADDR_LOC 18
16370: PUSH
16371: EMPTY
16372: ST_TO_ADDR
// if not regid then
16373: LD_EXP 219
16377: NOT
16378: IFFALSE 16423
// regid = mcregistry ( al , [ [ mc_reg_area_to_guard , target ] , [ mc_reg_refresh_time , 11 ] , mc_reg_ignore_fog ] ) ;
16380: LD_ADDR_EXP 219
16384: PUSH
16385: LD_EXP 3
16389: PPUSH
16390: LD_INT 2
16392: PUSH
16393: LD_INT 10
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 11
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 7
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: LIST
16417: PPUSH
16418: CALL_OW 399
16422: ST_TO_ADDR
// attida = mcattack ( 100 , regid , tmp , [ mc_no_stop ] ) ;
16423: LD_ADDR_LOC 14
16427: PUSH
16428: LD_INT 100
16430: PPUSH
16431: LD_EXP 219
16435: PPUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: LD_INT 10
16443: PUSH
16444: EMPTY
16445: LIST
16446: PPUSH
16447: CALL_OW 402
16451: ST_TO_ADDR
// while ( 0 + ( tmp1 diff filterunitsinarea ( albaseinner , [ [ f_side , al ] , [ f_type , unit_vehicle ] ] ) ) ) < ( 0 + tmp1 ) do
16452: LD_INT 0
16454: PUSH
16455: LD_VAR 0 2
16459: PUSH
16460: LD_INT 25
16462: PPUSH
16463: LD_INT 22
16465: PUSH
16466: LD_EXP 3
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 21
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PPUSH
16489: CALL_OW 70
16493: DIFF
16494: PLUS
16495: PUSH
16496: LD_INT 0
16498: PUSH
16499: LD_VAR 0 2
16503: PLUS
16504: LESS
16505: IFFALSE 16516
// wait ( 0 0$1 ) ;
16507: LD_INT 35
16509: PPUSH
16510: CALL_OW 67
16514: GO 16452
// attidb = mcattack ( 100 , regid , tmp1 , [ mc_no_stop ] ) ;
16516: LD_ADDR_LOC 15
16520: PUSH
16521: LD_INT 100
16523: PPUSH
16524: LD_EXP 219
16528: PPUSH
16529: LD_VAR 0 2
16533: PPUSH
16534: LD_INT 10
16536: PUSH
16537: EMPTY
16538: LIST
16539: PPUSH
16540: CALL_OW 402
16544: ST_TO_ADDR
// al_att = rand ( al_att_min , al_att_max ) ;
16545: LD_ADDR_EXP 216
16549: PUSH
16550: LD_EXP 205
16554: PPUSH
16555: LD_EXP 206
16559: PPUSH
16560: CALL_OW 12
16564: ST_TO_ADDR
// end ; enable ;
16565: ENABLE
// end ;
16566: PPOPN 3
16568: END
// on spontaneousteleported ( un ) do if un in utocnici then
16569: LD_VAR 0 1
16573: PUSH
16574: LD_LOC 16
16578: IN
16579: IFFALSE 16600
// telep = telep ^ [ un ] ;
16581: LD_ADDR_LOC 18
16585: PUSH
16586: LD_LOC 18
16590: PUSH
16591: LD_VAR 0 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: ADD
16599: ST_TO_ADDR
16600: PPOPN 1
16602: END
// every 0 0$5 trigger telep do var tmp , tmp1 , tmp2 ;
16603: LD_LOC 18
16607: IFFALSE 16714
16609: GO 16611
16611: DISABLE
16612: LD_INT 0
16614: PPUSH
16615: PPUSH
16616: PPUSH
// begin wait ( 5 ) ;
16617: LD_INT 5
16619: PPUSH
16620: CALL_OW 67
// tmp2 = unitfilter ( ridici , [ [ f_outside ] ] ) ;
16624: LD_ADDR_VAR 0 3
16628: PUSH
16629: LD_LOC 17
16633: PPUSH
16634: LD_INT 56
16636: PUSH
16637: EMPTY
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: PPUSH
16643: CALL_OW 72
16647: ST_TO_ADDR
// for tmp in telep do
16648: LD_ADDR_VAR 0 1
16652: PUSH
16653: LD_LOC 18
16657: PUSH
16658: FOR_IN
16659: IFFALSE 16711
// begin tmp1 = nearestunittounit ( tmp2 , tmp ) ;
16661: LD_ADDR_VAR 0 2
16665: PUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 74
16680: ST_TO_ADDR
// addcomrepairvehicle ( tmp1 , tmp ) ;
16681: LD_VAR 0 2
16685: PPUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 189
// addcomenterunit ( tmp1 , tmp ) ;
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 180
// end ;
16709: GO 16658
16711: POP
16712: POP
// enable ;
16713: ENABLE
// end ; end_of_file
16714: PPOPN 3
16716: END
// var lidi , ostatni , vehikly , masha ; export burlak , jmm , roth , powel , heike , farmer ; var titov , belkov , kuzmov , gnyevko , kozlov , kiril , kapitsova , petrosyan , scholtze , dolgov , kovalyuk , karamazov , petrovova , gleb , lipshchin , xavier , fadeev , gladkov , bystrov , oblukov ; export legdestr ; export function prepare_russians ; var tmp , tmp2 , tmp3 , na , veh ; begin
16717: LD_INT 0
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
// centernowonxy ( 99 , 102 ) ;
16725: LD_INT 99
16727: PPUSH
16728: LD_INT 102
16730: PPUSH
16731: CALL_OW 86
// na = 0 ;
16735: LD_ADDR_VAR 0 5
16739: PUSH
16740: LD_INT 0
16742: ST_TO_ADDR
// uc_side = ru ;
16743: LD_ADDR_OWVAR 20
16747: PUSH
16748: LD_EXP 1
16752: ST_TO_ADDR
// if testcharacters ( Burlak ) then
16753: LD_STRING Burlak
16755: PPUSH
16756: CALL_OW 28
16760: IFFALSE 16798
// if checkcharacterset ( Burlak ) then
16762: LD_STRING Burlak
16764: PPUSH
16765: CALL_OW 29
16769: IFFALSE 16789
// burlak = createcharacterwithclass ( Burlak , class_engineer ) else
16771: LD_ADDR_EXP 233
16775: PUSH
16776: LD_STRING Burlak
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: CALL_OW 35
16786: ST_TO_ADDR
16787: GO 16796
// msg ( jakto ze Burlak je chciplej?! ) else
16789: LD_STRING jakto ze Burlak je chciplej?!
16791: PPUSH
16792: CALL_OW 100
16796: GO 16805
// msg ( neny Burlak ) ;
16798: LD_STRING neny Burlak
16800: PPUSH
16801: CALL_OW 100
// uc_side = al ;
16805: LD_ADDR_OWVAR 20
16809: PUSH
16810: LD_EXP 3
16814: ST_TO_ADDR
// if testvariable ( JMMKilled ) then
16815: LD_STRING JMMKilled
16817: PPUSH
16818: CALL_OW 27
16822: IFFALSE 16843
// tmp = loadvariable ( JMMKilled , - 1 ) else
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_STRING JMMKilled
16831: PPUSH
16832: LD_INT 1
16834: NEG
16835: PPUSH
16836: CALL_OW 30
16840: ST_TO_ADDR
16841: GO 16856
// buildquery ( neny JMMKilled , [ OK ] ) ;
16843: LD_STRING neny JMMKilled
16845: PPUSH
16846: LD_STRING OK
16848: PUSH
16849: EMPTY
16850: LIST
16851: PPUSH
16852: CALL_OW 99
// if tmp then
16856: LD_VAR 0 2
16860: IFFALSE 16872
// jmm = 0 else
16862: LD_ADDR_EXP 234
16866: PUSH
16867: LD_INT 0
16869: ST_TO_ADDR
16870: GO 16932
// begin jmm = newcharacter ( Macmillan ) ;
16872: LD_ADDR_EXP 234
16876: PUSH
16877: LD_STRING Macmillan
16879: PPUSH
16880: CALL_OW 25
16884: ST_TO_ADDR
// if not jmm then
16885: LD_EXP 234
16889: NOT
16890: IFFALSE 16899
// msg ( neny Macmillan ) ;
16892: LD_STRING neny Macmillan
16894: PPUSH
16895: CALL_OW 100
// placeunitxyr ( jmm , 164 , 74 , 1 , false ) ;
16899: LD_EXP 234
16903: PPUSH
16904: LD_INT 164
16906: PPUSH
16907: LD_INT 74
16909: PPUSH
16910: LD_INT 1
16912: PPUSH
16913: LD_INT 0
16915: PPUSH
16916: CALL_OW 50
// comenterunit ( jmm , alware00 ) ;
16920: LD_EXP 234
16924: PPUSH
16925: LD_INT 25
16927: PPUSH
16928: CALL_OW 120
// end ; roth = newcharacter ( Roth ) ;
16932: LD_ADDR_EXP 235
16936: PUSH
16937: LD_STRING Roth
16939: PPUSH
16940: CALL_OW 25
16944: ST_TO_ADDR
// if not roth then
16945: LD_EXP 235
16949: NOT
16950: IFFALSE 16959
// msg ( neny Roth ) ;
16952: LD_STRING neny Roth
16954: PPUSH
16955: CALL_OW 100
// placeunitxyr ( roth , 161 , 54 , 1 , false ) ;
16959: LD_EXP 235
16963: PPUSH
16964: LD_INT 161
16966: PPUSH
16967: LD_INT 54
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: LD_INT 0
16975: PPUSH
16976: CALL_OW 50
// comenterunit ( roth , allab00 ) ;
16980: LD_EXP 235
16984: PPUSH
16985: LD_INT 40
16987: PPUSH
16988: CALL_OW 120
// uc_side = am ;
16992: LD_ADDR_OWVAR 20
16996: PUSH
16997: LD_EXP 2
17001: ST_TO_ADDR
// powel = newcharacter ( Powell ) ;
17002: LD_ADDR_EXP 236
17006: PUSH
17007: LD_STRING Powell
17009: PPUSH
17010: CALL_OW 25
17014: ST_TO_ADDR
// if not powel then
17015: LD_EXP 236
17019: NOT
17020: IFFALSE 17029
// msg ( neny Powell ) ;
17022: LD_STRING neny Powell
17024: PPUSH
17025: CALL_OW 100
// placeunitxyr ( powel , 86 , 8 , 1 , false ) ;
17029: LD_EXP 236
17033: PPUSH
17034: LD_INT 86
17036: PPUSH
17037: LD_INT 8
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_INT 0
17045: PPUSH
17046: CALL_OW 50
// comenterunit ( powel , amware00 ) ;
17050: LD_EXP 236
17054: PPUSH
17055: LD_INT 5
17057: PPUSH
17058: CALL_OW 120
// uc_side = le ;
17062: LD_ADDR_OWVAR 20
17066: PUSH
17067: LD_EXP 4
17071: ST_TO_ADDR
// if testcharacters ( Heike ) then
17072: LD_STRING Heike
17074: PPUSH
17075: CALL_OW 28
17079: IFFALSE 17161
// if checkcharacterset ( Heike ) and not LoadVariable ( HeikeKilled , true ) then
17081: LD_STRING Heike
17083: PPUSH
17084: CALL_OW 29
17088: PUSH
17089: LD_STRING HeikeKilled
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: CALL_OW 30
17099: NOT
17100: AND
17101: IFFALSE 17151
// begin heike = createcharacter ( Heike ) ;
17103: LD_ADDR_EXP 237
17107: PUSH
17108: LD_STRING Heike
17110: PPUSH
17111: CALL_OW 34
17115: ST_TO_ADDR
// placeunitxyr ( heike , 152 , 133 , 1 , false ) ;
17116: LD_EXP 237
17120: PPUSH
17121: LD_INT 152
17123: PPUSH
17124: LD_INT 133
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: LD_INT 0
17132: PPUSH
17133: CALL_OW 50
// comenterunit ( heike , leware00 ) ;
17137: LD_EXP 237
17141: PPUSH
17142: LD_INT 51
17144: PPUSH
17145: CALL_OW 120
// end else
17149: GO 17159
// heike = 0 else
17151: LD_ADDR_EXP 237
17155: PUSH
17156: LD_INT 0
17158: ST_TO_ADDR
17159: GO 17168
// msg ( neny Heike ) ;
17161: LD_STRING neny Heike
17163: PPUSH
17164: CALL_OW 100
// if not heike then
17168: LD_EXP 237
17172: NOT
17173: IFFALSE 17260
// if testcharacters ( Farmer ) then
17175: LD_STRING Farmer
17177: PPUSH
17178: CALL_OW 28
17182: IFFALSE 17251
// if checkcharacterset ( Farmer ) then
17184: LD_STRING Farmer
17186: PPUSH
17187: CALL_OW 29
17191: IFFALSE 17241
// begin farmer = createcharacter ( Farmer ) ;
17193: LD_ADDR_EXP 238
17197: PUSH
17198: LD_STRING Farmer
17200: PPUSH
17201: CALL_OW 34
17205: ST_TO_ADDR
// placeunitxyr ( farmer , 152 , 133 , 1 , false ) ;
17206: LD_EXP 238
17210: PPUSH
17211: LD_INT 152
17213: PPUSH
17214: LD_INT 133
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 0
17222: PPUSH
17223: CALL_OW 50
// comenterunit ( farmer , leware00 ) ;
17227: LD_EXP 238
17231: PPUSH
17232: LD_INT 51
17234: PPUSH
17235: CALL_OW 120
// end else
17239: GO 17249
// farmer = 0 else
17241: LD_ADDR_EXP 238
17245: PUSH
17246: LD_INT 0
17248: ST_TO_ADDR
17249: GO 17258
// msg ( neny Farmer ) else
17251: LD_STRING neny Farmer
17253: PPUSH
17254: CALL_OW 100
17258: GO 17268
// farmer = 0 ;
17260: LD_ADDR_EXP 238
17264: PUSH
17265: LD_INT 0
17267: ST_TO_ADDR
// uc_side = ru ;
17268: LD_ADDR_OWVAR 20
17272: PUSH
17273: LD_EXP 1
17277: ST_TO_ADDR
// if testcharacters ( Titov ) then
17278: LD_STRING Titov
17280: PPUSH
17281: CALL_OW 28
17285: IFFALSE 17335
// if checkcharacterset ( Titov ) then
17287: LD_STRING Titov
17289: PPUSH
17290: CALL_OW 29
17294: IFFALSE 17311
// titov = createcharacter ( Titov ) else
17296: LD_ADDR_LOC 23
17300: PUSH
17301: LD_STRING Titov
17303: PPUSH
17304: CALL_OW 34
17308: ST_TO_ADDR
17309: GO 17333
// begin titov = 0 ;
17311: LD_ADDR_LOC 23
17315: PUSH
17316: LD_INT 0
17318: ST_TO_ADDR
// na = na + 1 ;
17319: LD_ADDR_VAR 0 5
17323: PUSH
17324: LD_VAR 0 5
17328: PUSH
17329: LD_INT 1
17331: PLUS
17332: ST_TO_ADDR
// end else
17333: GO 17342
// msg ( neny Titov ) ;
17335: LD_STRING neny Titov
17337: PPUSH
17338: CALL_OW 100
// if testcharacters ( Belkov ) then
17342: LD_STRING Belkov
17344: PPUSH
17345: CALL_OW 28
17349: IFFALSE 17399
// if checkcharacterset ( Belkov ) then
17351: LD_STRING Belkov
17353: PPUSH
17354: CALL_OW 29
17358: IFFALSE 17375
// belkov = createcharacter ( Belkov ) else
17360: LD_ADDR_LOC 24
17364: PUSH
17365: LD_STRING Belkov
17367: PPUSH
17368: CALL_OW 34
17372: ST_TO_ADDR
17373: GO 17397
// begin belkov = 0 ;
17375: LD_ADDR_LOC 24
17379: PUSH
17380: LD_INT 0
17382: ST_TO_ADDR
// na = na + 1 ;
17383: LD_ADDR_VAR 0 5
17387: PUSH
17388: LD_VAR 0 5
17392: PUSH
17393: LD_INT 1
17395: PLUS
17396: ST_TO_ADDR
// end else
17397: GO 17406
// msg ( neny Belkov ) ;
17399: LD_STRING neny Belkov
17401: PPUSH
17402: CALL_OW 100
// if testcharacters ( Kuzmov ) then
17406: LD_STRING Kuzmov
17408: PPUSH
17409: CALL_OW 28
17413: IFFALSE 17463
// if checkcharacterset ( Kuzmov ) then
17415: LD_STRING Kuzmov
17417: PPUSH
17418: CALL_OW 29
17422: IFFALSE 17439
// kuzmov = createcharacter ( Kuzmov ) else
17424: LD_ADDR_LOC 25
17428: PUSH
17429: LD_STRING Kuzmov
17431: PPUSH
17432: CALL_OW 34
17436: ST_TO_ADDR
17437: GO 17461
// begin kuzmov = 0 ;
17439: LD_ADDR_LOC 25
17443: PUSH
17444: LD_INT 0
17446: ST_TO_ADDR
// na = na + 1 ;
17447: LD_ADDR_VAR 0 5
17451: PUSH
17452: LD_VAR 0 5
17456: PUSH
17457: LD_INT 1
17459: PLUS
17460: ST_TO_ADDR
// end else
17461: GO 17470
// msg ( neny Kuzmov ) ;
17463: LD_STRING neny Kuzmov
17465: PPUSH
17466: CALL_OW 100
// if testcharacters ( Gnyevko ) then
17470: LD_STRING Gnyevko
17472: PPUSH
17473: CALL_OW 28
17477: IFFALSE 17527
// if checkcharacterset ( Gnyevko ) then
17479: LD_STRING Gnyevko
17481: PPUSH
17482: CALL_OW 29
17486: IFFALSE 17503
// gnyevko = createcharacter ( Gnyevko ) else
17488: LD_ADDR_LOC 26
17492: PUSH
17493: LD_STRING Gnyevko
17495: PPUSH
17496: CALL_OW 34
17500: ST_TO_ADDR
17501: GO 17525
// begin gnyevko = 0 ;
17503: LD_ADDR_LOC 26
17507: PUSH
17508: LD_INT 0
17510: ST_TO_ADDR
// na = na + 1 ;
17511: LD_ADDR_VAR 0 5
17515: PUSH
17516: LD_VAR 0 5
17520: PUSH
17521: LD_INT 1
17523: PLUS
17524: ST_TO_ADDR
// end else
17525: GO 17534
// msg ( neny Gnyevko ) ;
17527: LD_STRING neny Gnyevko
17529: PPUSH
17530: CALL_OW 100
// if testcharacters ( Kozlov ) then
17534: LD_STRING Kozlov
17536: PPUSH
17537: CALL_OW 28
17541: IFFALSE 17591
// if checkcharacterset ( Kozlov ) then
17543: LD_STRING Kozlov
17545: PPUSH
17546: CALL_OW 29
17550: IFFALSE 17567
// kozlov = createcharacter ( Kozlov ) else
17552: LD_ADDR_LOC 27
17556: PUSH
17557: LD_STRING Kozlov
17559: PPUSH
17560: CALL_OW 34
17564: ST_TO_ADDR
17565: GO 17589
// begin kozlov = 0 ;
17567: LD_ADDR_LOC 27
17571: PUSH
17572: LD_INT 0
17574: ST_TO_ADDR
// na = na + 1 ;
17575: LD_ADDR_VAR 0 5
17579: PUSH
17580: LD_VAR 0 5
17584: PUSH
17585: LD_INT 1
17587: PLUS
17588: ST_TO_ADDR
// end else
17589: GO 17598
// msg ( neny Kozlov ) ;
17591: LD_STRING neny Kozlov
17593: PPUSH
17594: CALL_OW 100
// if testcharacters ( Kirilenkova ) then
17598: LD_STRING Kirilenkova
17600: PPUSH
17601: CALL_OW 28
17605: IFFALSE 17655
// if checkcharacterset ( Kirilenkova ) then
17607: LD_STRING Kirilenkova
17609: PPUSH
17610: CALL_OW 29
17614: IFFALSE 17631
// kiril = createcharacter ( Kirilenkova ) else
17616: LD_ADDR_LOC 28
17620: PUSH
17621: LD_STRING Kirilenkova
17623: PPUSH
17624: CALL_OW 34
17628: ST_TO_ADDR
17629: GO 17653
// begin kiril = 0 ;
17631: LD_ADDR_LOC 28
17635: PUSH
17636: LD_INT 0
17638: ST_TO_ADDR
// na = na + 1 ;
17639: LD_ADDR_VAR 0 5
17643: PUSH
17644: LD_VAR 0 5
17648: PUSH
17649: LD_INT 1
17651: PLUS
17652: ST_TO_ADDR
// end else
17653: GO 17662
// msg ( neny Kirilenkova ) ;
17655: LD_STRING neny Kirilenkova
17657: PPUSH
17658: CALL_OW 100
// if testcharacters ( Kapitsova ) then
17662: LD_STRING Kapitsova
17664: PPUSH
17665: CALL_OW 28
17669: IFFALSE 17719
// if checkcharacterset ( Kapitsova ) then
17671: LD_STRING Kapitsova
17673: PPUSH
17674: CALL_OW 29
17678: IFFALSE 17695
// kapitsova = createcharacter ( Kapitsova ) else
17680: LD_ADDR_LOC 29
17684: PUSH
17685: LD_STRING Kapitsova
17687: PPUSH
17688: CALL_OW 34
17692: ST_TO_ADDR
17693: GO 17717
// begin kapitsova = 0 ;
17695: LD_ADDR_LOC 29
17699: PUSH
17700: LD_INT 0
17702: ST_TO_ADDR
// na = na + 1 ;
17703: LD_ADDR_VAR 0 5
17707: PUSH
17708: LD_VAR 0 5
17712: PUSH
17713: LD_INT 1
17715: PLUS
17716: ST_TO_ADDR
// end else
17717: GO 17726
// msg ( neny Kapitsova ) ;
17719: LD_STRING neny Kapitsova
17721: PPUSH
17722: CALL_OW 100
// if testcharacters ( Petrosyan ) then
17726: LD_STRING Petrosyan
17728: PPUSH
17729: CALL_OW 28
17733: IFFALSE 17783
// if checkcharacterset ( Petrosyan ) then
17735: LD_STRING Petrosyan
17737: PPUSH
17738: CALL_OW 29
17742: IFFALSE 17759
// petrosyan = createcharacter ( Petrosyan ) else
17744: LD_ADDR_LOC 30
17748: PUSH
17749: LD_STRING Petrosyan
17751: PPUSH
17752: CALL_OW 34
17756: ST_TO_ADDR
17757: GO 17781
// begin petrosyan = 0 ;
17759: LD_ADDR_LOC 30
17763: PUSH
17764: LD_INT 0
17766: ST_TO_ADDR
// na = na + 1 ;
17767: LD_ADDR_VAR 0 5
17771: PUSH
17772: LD_VAR 0 5
17776: PUSH
17777: LD_INT 1
17779: PLUS
17780: ST_TO_ADDR
// end else
17781: GO 17790
// msg ( neny Petrosyan ) ;
17783: LD_STRING neny Petrosyan
17785: PPUSH
17786: CALL_OW 100
// if testcharacters ( Scholtze ) then
17790: LD_STRING Scholtze
17792: PPUSH
17793: CALL_OW 28
17797: IFFALSE 17847
// if checkcharacterset ( Scholtze ) then
17799: LD_STRING Scholtze
17801: PPUSH
17802: CALL_OW 29
17806: IFFALSE 17823
// scholtze = createcharacter ( Scholtze ) else
17808: LD_ADDR_LOC 31
17812: PUSH
17813: LD_STRING Scholtze
17815: PPUSH
17816: CALL_OW 34
17820: ST_TO_ADDR
17821: GO 17845
// begin scholtze = 0 ;
17823: LD_ADDR_LOC 31
17827: PUSH
17828: LD_INT 0
17830: ST_TO_ADDR
// na = na + 1 ;
17831: LD_ADDR_VAR 0 5
17835: PUSH
17836: LD_VAR 0 5
17840: PUSH
17841: LD_INT 1
17843: PLUS
17844: ST_TO_ADDR
// end else
17845: GO 17854
// msg ( neny Scholtze ) ;
17847: LD_STRING neny Scholtze
17849: PPUSH
17850: CALL_OW 100
// if testcharacters ( Dolgov ) then
17854: LD_STRING Dolgov
17856: PPUSH
17857: CALL_OW 28
17861: IFFALSE 17911
// if checkcharacterset ( Dolgov ) then
17863: LD_STRING Dolgov
17865: PPUSH
17866: CALL_OW 29
17870: IFFALSE 17887
// dolgov = createcharacter ( Dolgov ) else
17872: LD_ADDR_LOC 32
17876: PUSH
17877: LD_STRING Dolgov
17879: PPUSH
17880: CALL_OW 34
17884: ST_TO_ADDR
17885: GO 17909
// begin dolgov = 0 ;
17887: LD_ADDR_LOC 32
17891: PUSH
17892: LD_INT 0
17894: ST_TO_ADDR
// na = na + 1 ;
17895: LD_ADDR_VAR 0 5
17899: PUSH
17900: LD_VAR 0 5
17904: PUSH
17905: LD_INT 1
17907: PLUS
17908: ST_TO_ADDR
// end else
17909: GO 17918
// msg ( neny Dolgov ) ;
17911: LD_STRING neny Dolgov
17913: PPUSH
17914: CALL_OW 100
// if testcharacters ( Kovalyuk ) then
17918: LD_STRING Kovalyuk
17920: PPUSH
17921: CALL_OW 28
17925: IFFALSE 17975
// if checkcharacterset ( Kovalyuk ) then
17927: LD_STRING Kovalyuk
17929: PPUSH
17930: CALL_OW 29
17934: IFFALSE 17951
// kovalyuk = createcharacter ( Kovalyuk ) else
17936: LD_ADDR_LOC 33
17940: PUSH
17941: LD_STRING Kovalyuk
17943: PPUSH
17944: CALL_OW 34
17948: ST_TO_ADDR
17949: GO 17973
// begin kovalyuk = 0 ;
17951: LD_ADDR_LOC 33
17955: PUSH
17956: LD_INT 0
17958: ST_TO_ADDR
// na = na + 1 ;
17959: LD_ADDR_VAR 0 5
17963: PUSH
17964: LD_VAR 0 5
17968: PUSH
17969: LD_INT 1
17971: PLUS
17972: ST_TO_ADDR
// end else
17973: GO 17982
// msg ( neny Kovalyuk ) ;
17975: LD_STRING neny Kovalyuk
17977: PPUSH
17978: CALL_OW 100
// if testcharacters ( Karamazov ) then
17982: LD_STRING Karamazov
17984: PPUSH
17985: CALL_OW 28
17989: IFFALSE 18039
// if checkcharacterset ( Karamazov ) then
17991: LD_STRING Karamazov
17993: PPUSH
17994: CALL_OW 29
17998: IFFALSE 18015
// karamazov = createcharacter ( Karamazov ) else
18000: LD_ADDR_LOC 34
18004: PUSH
18005: LD_STRING Karamazov
18007: PPUSH
18008: CALL_OW 34
18012: ST_TO_ADDR
18013: GO 18037
// begin karamazov = 0 ;
18015: LD_ADDR_LOC 34
18019: PUSH
18020: LD_INT 0
18022: ST_TO_ADDR
// na = na + 1 ;
18023: LD_ADDR_VAR 0 5
18027: PUSH
18028: LD_VAR 0 5
18032: PUSH
18033: LD_INT 1
18035: PLUS
18036: ST_TO_ADDR
// end else
18037: GO 18046
// msg ( neny Karamazov ) ;
18039: LD_STRING neny Karamazov
18041: PPUSH
18042: CALL_OW 100
// if testcharacters ( Petrovova ) then
18046: LD_STRING Petrovova
18048: PPUSH
18049: CALL_OW 28
18053: IFFALSE 18103
// if checkcharacterset ( Petrovova ) then
18055: LD_STRING Petrovova
18057: PPUSH
18058: CALL_OW 29
18062: IFFALSE 18079
// petrovova = createcharacter ( Petrovova ) else
18064: LD_ADDR_LOC 35
18068: PUSH
18069: LD_STRING Petrovova
18071: PPUSH
18072: CALL_OW 34
18076: ST_TO_ADDR
18077: GO 18101
// begin petrovova = 0 ;
18079: LD_ADDR_LOC 35
18083: PUSH
18084: LD_INT 0
18086: ST_TO_ADDR
// na = na + 1 ;
18087: LD_ADDR_VAR 0 5
18091: PUSH
18092: LD_VAR 0 5
18096: PUSH
18097: LD_INT 1
18099: PLUS
18100: ST_TO_ADDR
// end else
18101: GO 18110
// msg ( neny Petrovova ) ;
18103: LD_STRING neny Petrovova
18105: PPUSH
18106: CALL_OW 100
// if testcharacters ( Gleb ) then
18110: LD_STRING Gleb
18112: PPUSH
18113: CALL_OW 28
18117: IFFALSE 18167
// if checkcharacterset ( Gleb ) then
18119: LD_STRING Gleb
18121: PPUSH
18122: CALL_OW 29
18126: IFFALSE 18143
// gleb = createcharacter ( Gleb ) else
18128: LD_ADDR_LOC 36
18132: PUSH
18133: LD_STRING Gleb
18135: PPUSH
18136: CALL_OW 34
18140: ST_TO_ADDR
18141: GO 18165
// begin gleb = 0 ;
18143: LD_ADDR_LOC 36
18147: PUSH
18148: LD_INT 0
18150: ST_TO_ADDR
// na = na + 1 ;
18151: LD_ADDR_VAR 0 5
18155: PUSH
18156: LD_VAR 0 5
18160: PUSH
18161: LD_INT 1
18163: PLUS
18164: ST_TO_ADDR
// end else
18165: GO 18174
// msg ( neny Gleb ) ;
18167: LD_STRING neny Gleb
18169: PPUSH
18170: CALL_OW 100
// if testcharacters ( Lipshchin ) then
18174: LD_STRING Lipshchin
18176: PPUSH
18177: CALL_OW 28
18181: IFFALSE 18231
// if checkcharacterset ( Lipshchin ) then
18183: LD_STRING Lipshchin
18185: PPUSH
18186: CALL_OW 29
18190: IFFALSE 18207
// lipshchin = createcharacter ( Lipshchin ) else
18192: LD_ADDR_LOC 37
18196: PUSH
18197: LD_STRING Lipshchin
18199: PPUSH
18200: CALL_OW 34
18204: ST_TO_ADDR
18205: GO 18229
// begin lipshchin = 0 ;
18207: LD_ADDR_LOC 37
18211: PUSH
18212: LD_INT 0
18214: ST_TO_ADDR
// na = na + 1 ;
18215: LD_ADDR_VAR 0 5
18219: PUSH
18220: LD_VAR 0 5
18224: PUSH
18225: LD_INT 1
18227: PLUS
18228: ST_TO_ADDR
// end else
18229: GO 18238
// msg ( neny Lipshchin ) ;
18231: LD_STRING neny Lipshchin
18233: PPUSH
18234: CALL_OW 100
// if testcharacters ( Xavier ) then
18238: LD_STRING Xavier
18240: PPUSH
18241: CALL_OW 28
18245: IFFALSE 18295
// if checkcharacterset ( Xavier ) then
18247: LD_STRING Xavier
18249: PPUSH
18250: CALL_OW 29
18254: IFFALSE 18271
// xavier = createcharacter ( Xavier ) else
18256: LD_ADDR_LOC 38
18260: PUSH
18261: LD_STRING Xavier
18263: PPUSH
18264: CALL_OW 34
18268: ST_TO_ADDR
18269: GO 18293
// begin xavier = 0 ;
18271: LD_ADDR_LOC 38
18275: PUSH
18276: LD_INT 0
18278: ST_TO_ADDR
// na = na + 1 ;
18279: LD_ADDR_VAR 0 5
18283: PUSH
18284: LD_VAR 0 5
18288: PUSH
18289: LD_INT 1
18291: PLUS
18292: ST_TO_ADDR
// end else
18293: GO 18302
// msg ( neny Xavier ) ;
18295: LD_STRING neny Xavier
18297: PPUSH
18298: CALL_OW 100
// if testcharacters ( Fadeev ) then
18302: LD_STRING Fadeev
18304: PPUSH
18305: CALL_OW 28
18309: IFFALSE 18359
// if checkcharacterset ( Fadeev ) then
18311: LD_STRING Fadeev
18313: PPUSH
18314: CALL_OW 29
18318: IFFALSE 18335
// fadeev = createcharacter ( Fadeev ) else
18320: LD_ADDR_LOC 39
18324: PUSH
18325: LD_STRING Fadeev
18327: PPUSH
18328: CALL_OW 34
18332: ST_TO_ADDR
18333: GO 18357
// begin fadeev = 0 ;
18335: LD_ADDR_LOC 39
18339: PUSH
18340: LD_INT 0
18342: ST_TO_ADDR
// na = na + 1 ;
18343: LD_ADDR_VAR 0 5
18347: PUSH
18348: LD_VAR 0 5
18352: PUSH
18353: LD_INT 1
18355: PLUS
18356: ST_TO_ADDR
// end else
18357: GO 18366
// msg ( neny Fadeev ) ;
18359: LD_STRING neny Fadeev
18361: PPUSH
18362: CALL_OW 100
// if testcharacters ( Gladkov ) then
18366: LD_STRING Gladkov
18368: PPUSH
18369: CALL_OW 28
18373: IFFALSE 18423
// if checkcharacterset ( Gladkov ) then
18375: LD_STRING Gladkov
18377: PPUSH
18378: CALL_OW 29
18382: IFFALSE 18399
// gladkov = createcharacter ( Gladkov ) else
18384: LD_ADDR_LOC 40
18388: PUSH
18389: LD_STRING Gladkov
18391: PPUSH
18392: CALL_OW 34
18396: ST_TO_ADDR
18397: GO 18421
// begin gladkov = 0 ;
18399: LD_ADDR_LOC 40
18403: PUSH
18404: LD_INT 0
18406: ST_TO_ADDR
// na = na + 1 ;
18407: LD_ADDR_VAR 0 5
18411: PUSH
18412: LD_VAR 0 5
18416: PUSH
18417: LD_INT 1
18419: PLUS
18420: ST_TO_ADDR
// end else
18421: GO 18430
// msg ( neny Gladkov ) ;
18423: LD_STRING neny Gladkov
18425: PPUSH
18426: CALL_OW 100
// if testcharacters ( Bystrov ) then
18430: LD_STRING Bystrov
18432: PPUSH
18433: CALL_OW 28
18437: IFFALSE 18487
// if checkcharacterset ( Bystrov ) then
18439: LD_STRING Bystrov
18441: PPUSH
18442: CALL_OW 29
18446: IFFALSE 18463
// bystrov = createcharacter ( Bystrov ) else
18448: LD_ADDR_LOC 41
18452: PUSH
18453: LD_STRING Bystrov
18455: PPUSH
18456: CALL_OW 34
18460: ST_TO_ADDR
18461: GO 18485
// begin bystrov = 0 ;
18463: LD_ADDR_LOC 41
18467: PUSH
18468: LD_INT 0
18470: ST_TO_ADDR
// na = na + 1 ;
18471: LD_ADDR_VAR 0 5
18475: PUSH
18476: LD_VAR 0 5
18480: PUSH
18481: LD_INT 1
18483: PLUS
18484: ST_TO_ADDR
// end else
18485: GO 18494
// msg ( neny Bystrov ) ;
18487: LD_STRING neny Bystrov
18489: PPUSH
18490: CALL_OW 100
// if testcharacters ( Oblukov ) then
18494: LD_STRING Oblukov
18496: PPUSH
18497: CALL_OW 28
18501: IFFALSE 18551
// if checkcharacterset ( Oblukov ) then
18503: LD_STRING Oblukov
18505: PPUSH
18506: CALL_OW 29
18510: IFFALSE 18527
// oblukov = createcharacter ( Oblukov ) else
18512: LD_ADDR_LOC 42
18516: PUSH
18517: LD_STRING Oblukov
18519: PPUSH
18520: CALL_OW 34
18524: ST_TO_ADDR
18525: GO 18549
// begin oblukov = 0 ;
18527: LD_ADDR_LOC 42
18531: PUSH
18532: LD_INT 0
18534: ST_TO_ADDR
// na = na + 1 ;
18535: LD_ADDR_VAR 0 5
18539: PUSH
18540: LD_VAR 0 5
18544: PUSH
18545: LD_INT 1
18547: PLUS
18548: ST_TO_ADDR
// end else
18549: GO 18558
// msg ( neny Oblukov ) ;
18551: LD_STRING neny Oblukov
18553: PPUSH
18554: CALL_OW 100
// uc_nation = nation_russian ;
18558: LD_ADDR_OWVAR 21
18562: PUSH
18563: LD_INT 3
18565: ST_TO_ADDR
// if not testvariable ( Masha ) then
18566: LD_STRING Masha
18568: PPUSH
18569: CALL_OW 27
18573: NOT
18574: IFFALSE 18583
// msg ( neny Masha ) ;
18576: LD_STRING neny Masha
18578: PPUSH
18579: CALL_OW 100
// veh = loadvariable ( Masha , [ ] ) ;
18583: LD_ADDR_VAR 0 6
18587: PUSH
18588: LD_STRING Masha
18590: PPUSH
18591: EMPTY
18592: PPUSH
18593: CALL_OW 30
18597: ST_TO_ADDR
// if veh then
18598: LD_VAR 0 6
18602: IFFALSE 18684
// begin vc_chassis = veh [ 1 ] ;
18604: LD_ADDR_OWVAR 37
18608: PUSH
18609: LD_VAR 0 6
18613: PUSH
18614: LD_INT 1
18616: ARRAY
18617: ST_TO_ADDR
// vc_engine = veh [ 2 ] ;
18618: LD_ADDR_OWVAR 39
18622: PUSH
18623: LD_VAR 0 6
18627: PUSH
18628: LD_INT 2
18630: ARRAY
18631: ST_TO_ADDR
// vc_control = veh [ 3 ] ;
18632: LD_ADDR_OWVAR 38
18636: PUSH
18637: LD_VAR 0 6
18641: PUSH
18642: LD_INT 3
18644: ARRAY
18645: ST_TO_ADDR
// vc_weapon = veh [ 4 ] ;
18646: LD_ADDR_OWVAR 40
18650: PUSH
18651: LD_VAR 0 6
18655: PUSH
18656: LD_INT 4
18658: ARRAY
18659: ST_TO_ADDR
// masha = createvehicle ;
18660: LD_ADDR_LOC 22
18664: PUSH
18665: CALL_OW 45
18669: ST_TO_ADDR
// setmark ( masha , 1 ) ;
18670: LD_LOC 22
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 242
// end else
18682: GO 18692
// masha = 0 ;
18684: LD_ADDR_LOC 22
18688: PUSH
18689: LD_INT 0
18691: ST_TO_ADDR
// ostatni = [ ] ;
18692: LD_ADDR_LOC 20
18696: PUSH
18697: EMPTY
18698: ST_TO_ADDR
// for tmp = 1 to na do
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: DOUBLE
18705: LD_INT 1
18707: DEC
18708: ST_TO_ADDR
18709: LD_VAR 0 5
18713: PUSH
18714: FOR_TO
18715: IFFALSE 18769
// begin preparehuman ( rand ( 1 , 2 ) , rand ( 1 , 4 ) , ru_def_skill ) ;
18717: LD_INT 1
18719: PPUSH
18720: LD_INT 2
18722: PPUSH
18723: CALL_OW 12
18727: PPUSH
18728: LD_INT 1
18730: PPUSH
18731: LD_INT 4
18733: PPUSH
18734: CALL_OW 12
18738: PPUSH
18739: LD_EXP 218
18743: PPUSH
18744: CALL_OW 380
// ostatni = ostatni ^ [ createhuman ] ;
18748: LD_ADDR_LOC 20
18752: PUSH
18753: LD_LOC 20
18757: PUSH
18758: CALL_OW 44
18762: PUSH
18763: EMPTY
18764: LIST
18765: ADD
18766: ST_TO_ADDR
// end ;
18767: GO 18714
18769: POP
18770: POP
// lidi = [ titov , belkov , kuzmov , gnyevko , kozlov , kiril , kapitsova , petrosyan , scholtze , dolgov , kovalyuk , karamazov , petrovova , gleb , lipshchin , xavier , fadeev , gladkov , bystrov , oblukov ] diff [ 0 ] ;
18771: LD_ADDR_LOC 19
18775: PUSH
18776: LD_LOC 23
18780: PUSH
18781: LD_LOC 24
18785: PUSH
18786: LD_LOC 25
18790: PUSH
18791: LD_LOC 26
18795: PUSH
18796: LD_LOC 27
18800: PUSH
18801: LD_LOC 28
18805: PUSH
18806: LD_LOC 29
18810: PUSH
18811: LD_LOC 30
18815: PUSH
18816: LD_LOC 31
18820: PUSH
18821: LD_LOC 32
18825: PUSH
18826: LD_LOC 33
18830: PUSH
18831: LD_LOC 34
18835: PUSH
18836: LD_LOC 35
18840: PUSH
18841: LD_LOC 36
18845: PUSH
18846: LD_LOC 37
18850: PUSH
18851: LD_LOC 38
18855: PUSH
18856: LD_LOC 39
18860: PUSH
18861: LD_LOC 40
18865: PUSH
18866: LD_LOC 41
18870: PUSH
18871: LD_LOC 42
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: EMPTY
18902: LIST
18903: DIFF
18904: ST_TO_ADDR
// tmp3 = lidi ^ ostatni ;
18905: LD_ADDR_VAR 0 4
18909: PUSH
18910: LD_LOC 19
18914: PUSH
18915: LD_LOC 20
18919: ADD
18920: ST_TO_ADDR
// vehikly = [ ] ;
18921: LD_ADDR_LOC 21
18925: PUSH
18926: EMPTY
18927: ST_TO_ADDR
// vc_control = control_manual ;
18928: LD_ADDR_OWVAR 38
18932: PUSH
18933: LD_INT 1
18935: ST_TO_ADDR
// vc_engine = engine_siberite ;
18936: LD_ADDR_OWVAR 39
18940: PUSH
18941: LD_INT 3
18943: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
18944: LD_ADDR_OWVAR 40
18948: PUSH
18949: LD_INT 51
18951: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
18952: LD_ADDR_OWVAR 37
18956: PUSH
18957: LD_INT 21
18959: ST_TO_ADDR
// for tmp = 1 to 3 do
18960: LD_ADDR_VAR 0 2
18964: PUSH
18965: DOUBLE
18966: LD_INT 1
18968: DEC
18969: ST_TO_ADDR
18970: LD_INT 3
18972: PUSH
18973: FOR_TO
18974: IFFALSE 19044
// begin tmp2 = createvehicle ;
18976: LD_ADDR_VAR 0 3
18980: PUSH
18981: CALL_OW 45
18985: ST_TO_ADDR
// setcargo ( tmp2 , mat_cans , 100 ) ;
18986: LD_VAR 0 3
18990: PPUSH
18991: LD_INT 1
18993: PPUSH
18994: LD_INT 100
18996: PPUSH
18997: CALL_OW 290
// placehumaninunit ( tmp3 [ tmp ] , tmp2 ) ;
19001: LD_VAR 0 4
19005: PUSH
19006: LD_VAR 0 2
19010: ARRAY
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: CALL_OW 52
// placeunitxyr ( tmp2 , 12 , 14 , 8 , false ) ;
19021: LD_VAR 0 3
19025: PPUSH
19026: LD_INT 12
19028: PPUSH
19029: LD_INT 14
19031: PPUSH
19032: LD_INT 8
19034: PPUSH
19035: LD_INT 0
19037: PPUSH
19038: CALL_OW 50
// end ;
19042: GO 18973
19044: POP
19045: POP
// placeunitxyr ( tmp3 [ 4 ] , 12 , 14 , 8 , false ) ;
19046: LD_VAR 0 4
19050: PUSH
19051: LD_INT 4
19053: ARRAY
19054: PPUSH
19055: LD_INT 12
19057: PPUSH
19058: LD_INT 14
19060: PPUSH
19061: LD_INT 8
19063: PPUSH
19064: LD_INT 0
19066: PPUSH
19067: CALL_OW 50
// placeunitxyr ( tmp3 [ 5 ] , 12 , 14 , 8 , false ) ;
19071: LD_VAR 0 4
19075: PUSH
19076: LD_INT 5
19078: ARRAY
19079: PPUSH
19080: LD_INT 12
19082: PPUSH
19083: LD_INT 14
19085: PPUSH
19086: LD_INT 8
19088: PPUSH
19089: LD_INT 0
19091: PPUSH
19092: CALL_OW 50
// placeunitxyr ( tmp3 [ 6 ] , 12 , 14 , 8 , false ) ;
19096: LD_VAR 0 4
19100: PUSH
19101: LD_INT 6
19103: ARRAY
19104: PPUSH
19105: LD_INT 12
19107: PPUSH
19108: LD_INT 14
19110: PPUSH
19111: LD_INT 8
19113: PPUSH
19114: LD_INT 0
19116: PPUSH
19117: CALL_OW 50
// if masha then
19121: LD_LOC 22
19125: IFFALSE 19176
// begin setdir ( masha , 2 ) ;
19127: LD_LOC 22
19131: PPUSH
19132: LD_INT 2
19134: PPUSH
19135: CALL_OW 233
// placehumaninunit ( burlak , masha ) ;
19139: LD_EXP 233
19143: PPUSH
19144: LD_LOC 22
19148: PPUSH
19149: CALL_OW 52
// placeunitxyr ( masha , 12 , 14 , 8 , false ) ;
19153: LD_LOC 22
19157: PPUSH
19158: LD_INT 12
19160: PPUSH
19161: LD_INT 14
19163: PPUSH
19164: LD_INT 8
19166: PPUSH
19167: LD_INT 0
19169: PPUSH
19170: CALL_OW 50
// end else
19174: GO 19197
// placeunitxyr ( burlak , 12 , 14 , 8 , false ) ;
19176: LD_EXP 233
19180: PPUSH
19181: LD_INT 12
19183: PPUSH
19184: LD_INT 14
19186: PPUSH
19187: LD_INT 8
19189: PPUSH
19190: LD_INT 0
19192: PPUSH
19193: CALL_OW 50
// tmp2 = [ [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_rocket_launcher ] ] ;
19197: LD_ADDR_VAR 0 3
19201: PUSH
19202: LD_INT 22
19204: PUSH
19205: LD_INT 45
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 22
19214: PUSH
19215: LD_INT 45
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 22
19224: PUSH
19225: LD_INT 44
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 44
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_INT 44
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 22
19254: PUSH
19255: LD_INT 45
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: ST_TO_ADDR
// for tmp = 1 to 6 - ( 0 + ( [ masha ] diff [ 0 ] ) ) do
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: DOUBLE
19276: LD_INT 1
19278: DEC
19279: ST_TO_ADDR
19280: LD_INT 6
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: LD_LOC 22
19290: PUSH
19291: EMPTY
19292: LIST
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: EMPTY
19298: LIST
19299: DIFF
19300: PLUS
19301: MINUS
19302: PUSH
19303: FOR_TO
19304: IFFALSE 19450
// begin vc_weapon = tmp2 [ tmp ] [ 2 ] ;
19306: LD_ADDR_OWVAR 40
19310: PUSH
19311: LD_VAR 0 3
19315: PUSH
19316: LD_VAR 0 2
19320: ARRAY
19321: PUSH
19322: LD_INT 2
19324: ARRAY
19325: ST_TO_ADDR
// vc_chassis = tmp2 [ tmp ] [ 1 ] ;
19326: LD_ADDR_OWVAR 37
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 2
19340: ARRAY
19341: PUSH
19342: LD_INT 1
19344: ARRAY
19345: ST_TO_ADDR
// vehikly = vehikly ^ [ createvehicle ] ;
19346: LD_ADDR_LOC 21
19350: PUSH
19351: LD_LOC 21
19355: PUSH
19356: CALL_OW 45
19360: PUSH
19361: EMPTY
19362: LIST
19363: ADD
19364: ST_TO_ADDR
// placehumaninunit ( tmp3 [ tmp + 6 ] , vehikly [ tmp ] ) ;
19365: LD_VAR 0 4
19369: PUSH
19370: LD_VAR 0 2
19374: PUSH
19375: LD_INT 6
19377: PLUS
19378: ARRAY
19379: PPUSH
19380: LD_LOC 21
19384: PUSH
19385: LD_VAR 0 2
19389: ARRAY
19390: PPUSH
19391: CALL_OW 52
// setdir ( vehikly [ tmp ] , rand ( 2 , 3 ) ) ;
19395: LD_LOC 21
19399: PUSH
19400: LD_VAR 0 2
19404: ARRAY
19405: PPUSH
19406: LD_INT 2
19408: PPUSH
19409: LD_INT 3
19411: PPUSH
19412: CALL_OW 12
19416: PPUSH
19417: CALL_OW 233
// placeunitxyr ( vehikly [ tmp ] , 12 , 14 , 8 , false ) ;
19421: LD_LOC 21
19425: PUSH
19426: LD_VAR 0 2
19430: ARRAY
19431: PPUSH
19432: LD_INT 12
19434: PPUSH
19435: LD_INT 14
19437: PPUSH
19438: LD_INT 8
19440: PPUSH
19441: LD_INT 0
19443: PPUSH
19444: CALL_OW 50
// end ;
19448: GO 19303
19450: POP
19451: POP
// if masha then
19452: LD_LOC 22
19456: IFFALSE 19483
// placeunitxyr ( tmp3 [ 12 ] , 12 , 14 , 8 , false ) ;
19458: LD_VAR 0 4
19462: PUSH
19463: LD_INT 12
19465: ARRAY
19466: PPUSH
19467: LD_INT 12
19469: PPUSH
19470: LD_INT 14
19472: PPUSH
19473: LD_INT 8
19475: PPUSH
19476: LD_INT 0
19478: PPUSH
19479: CALL_OW 50
// for tmp = 13 to 20 do
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: DOUBLE
19489: LD_INT 13
19491: DEC
19492: ST_TO_ADDR
19493: LD_INT 20
19495: PUSH
19496: FOR_TO
19497: IFFALSE 19528
// placeunitxyr ( tmp3 [ tmp ] , 12 , 14 , 8 , false ) ;
19499: LD_VAR 0 4
19503: PUSH
19504: LD_VAR 0 2
19508: ARRAY
19509: PPUSH
19510: LD_INT 12
19512: PPUSH
19513: LD_INT 14
19515: PPUSH
19516: LD_INT 8
19518: PPUSH
19519: LD_INT 0
19521: PPUSH
19522: CALL_OW 50
19526: GO 19496
19528: POP
19529: POP
// centernowonunits ( vehikly ) ;
19530: LD_LOC 21
19534: PPUSH
19535: CALL_OW 87
// commovexy ( lidi ^ ostatni ^ [ burlak ] , 21 , 33 ) ;
19539: LD_LOC 19
19543: PUSH
19544: LD_LOC 20
19548: ADD
19549: PUSH
19550: LD_EXP 233
19554: PUSH
19555: EMPTY
19556: LIST
19557: ADD
19558: PPUSH
19559: LD_INT 21
19561: PPUSH
19562: LD_INT 33
19564: PPUSH
19565: CALL_OW 111
// wait ( 0 0$2 ) ;
19569: LD_INT 70
19571: PPUSH
19572: CALL_OW 67
// centeronxy ( 21 , 33 ) ;
19576: LD_INT 21
19578: PPUSH
19579: LD_INT 33
19581: PPUSH
19582: CALL_OW 84
// while not isinarea ( burlak , prichod ) do
19586: LD_EXP 233
19590: PPUSH
19591: LD_INT 8
19593: PPUSH
19594: CALL_OW 308
19598: NOT
19599: IFFALSE 19610
// wait ( 0 0$1 ) ;
19601: LD_INT 35
19603: PPUSH
19604: CALL_OW 67
19608: GO 19586
// legdestr = 0 ;
19610: LD_ADDR_EXP 239
19614: PUSH
19615: LD_INT 0
19617: ST_TO_ADDR
// if testvariable ( LegionDestroyed ) then
19618: LD_STRING LegionDestroyed
19620: PPUSH
19621: CALL_OW 27
19625: IFFALSE 19646
// legdestr = loadvariable ( LegionDestroyed , - 1 ) else
19627: LD_ADDR_EXP 239
19631: PUSH
19632: LD_STRING LegionDestroyed
19634: PPUSH
19635: LD_INT 1
19637: NEG
19638: PPUSH
19639: CALL_OW 30
19643: ST_TO_ADDR
19644: GO 19653
// msg ( neny LegionDestroyed ) ;
19646: LD_STRING neny LegionDestroyed
19648: PPUSH
19649: CALL_OW 100
// tmp2 = unitfilter ( lidi , [ [ f_sex , sex_male ] ] ) ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_LOC 19
19662: PPUSH
19663: LD_INT 26
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: EMPTY
19674: LIST
19675: PPUSH
19676: CALL_OW 72
19680: ST_TO_ADDR
// tmp3 = unitfilter ( ostatni , [ [ f_sex , sex_male ] ] ) ;
19681: LD_ADDR_VAR 0 4
19685: PUSH
19686: LD_LOC 20
19690: PPUSH
19691: LD_INT 26
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: EMPTY
19702: LIST
19703: PPUSH
19704: CALL_OW 72
19708: ST_TO_ADDR
// dialogueon ;
19709: CALL_OW 6
// say ( burlak , DStart-Bur-1 ) ;
19713: LD_EXP 233
19717: PPUSH
19718: LD_STRING DStart-Bur-1
19720: PPUSH
19721: CALL_OW 88
// if not legdestr then
19725: LD_EXP 239
19729: NOT
19730: IFFALSE 19866
// if gladkov then
19732: LD_LOC 40
19736: IFFALSE 19752
// say ( gladkov , DStart-Gla-1 ) else
19738: LD_LOC 40
19742: PPUSH
19743: LD_STRING DStart-Gla-1
19745: PPUSH
19746: CALL_OW 88
19750: GO 19866
// if tmp3 then
19752: LD_VAR 0 4
19756: IFFALSE 19776
// say ( tmp3 [ 1 ] , DStart-Gla-1 ) else
19758: LD_VAR 0 4
19762: PUSH
19763: LD_INT 1
19765: ARRAY
19766: PPUSH
19767: LD_STRING DStart-Gla-1
19769: PPUSH
19770: CALL_OW 88
19774: GO 19866
// if tmp2 then
19776: LD_VAR 0 3
19780: IFFALSE 19800
// say ( tmp2 [ 1 ] , DStart-Gla-1 ) else
19782: LD_VAR 0 3
19786: PUSH
19787: LD_INT 1
19789: ARRAY
19790: PPUSH
19791: LD_STRING DStart-Gla-1
19793: PPUSH
19794: CALL_OW 88
19798: GO 19866
// if bystrov then
19800: LD_LOC 41
19804: IFFALSE 19820
// say ( bystrov , DStart-Bys-1 ) else
19806: LD_LOC 41
19810: PPUSH
19811: LD_STRING DStart-Bys-1
19813: PPUSH
19814: CALL_OW 88
19818: GO 19866
// if tmp3 then
19820: LD_VAR 0 4
19824: IFFALSE 19844
// say ( tmp3 [ 1 ] , DStart-Rsol1-1 ) else
19826: LD_VAR 0 4
19830: PUSH
19831: LD_INT 1
19833: ARRAY
19834: PPUSH
19835: LD_STRING DStart-Rsol1-1
19837: PPUSH
19838: CALL_OW 88
19842: GO 19866
// if tmp2 then
19844: LD_VAR 0 3
19848: IFFALSE 19866
// say ( tmp2 [ 1 ] , DStart-Rsol1-1 ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DStart-Rsol1-1
19861: PPUSH
19862: CALL_OW 88
// say ( burlak , DStart-Bur-2 ) ;
19866: LD_EXP 233
19870: PPUSH
19871: LD_STRING DStart-Bur-2
19873: PPUSH
19874: CALL_OW 88
// if tmp2 then
19878: LD_VAR 0 3
19882: IFFALSE 19902
// say ( tmp2 [ 1 ] , DStart-Rsol1-2 ) else
19884: LD_VAR 0 3
19888: PUSH
19889: LD_INT 1
19891: ARRAY
19892: PPUSH
19893: LD_STRING DStart-Rsol1-2
19895: PPUSH
19896: CALL_OW 88
19900: GO 19924
// if tmp3 then
19902: LD_VAR 0 4
19906: IFFALSE 19924
// say ( tmp3 [ 1 ] , DStart-Rsol1-2 ) ;
19908: LD_VAR 0 4
19912: PUSH
19913: LD_INT 1
19915: ARRAY
19916: PPUSH
19917: LD_STRING DStart-Rsol1-2
19919: PPUSH
19920: CALL_OW 88
// say ( burlak , DStart-Bur-3 ) ;
19924: LD_EXP 233
19928: PPUSH
19929: LD_STRING DStart-Bur-3
19931: PPUSH
19932: CALL_OW 88
// dialogueoff ;
19936: CALL_OW 7
// saveforquickrestart ;
19940: CALL_OW 22
// wait ( 0 0$0.5 ) ;
19944: LD_INT 18
19946: PPUSH
19947: CALL_OW 67
// changemissionobjectives ( MStart ) ;
19951: LD_STRING MStart
19953: PPUSH
19954: CALL_OW 337
// end ;
19958: LD_VAR 0 1
19962: RET
// function visib_dep ; var tmp , tmp1 , deps ; begin
19963: LD_INT 0
19965: PPUSH
19966: PPUSH
19967: PPUSH
19968: PPUSH
// deps = [ [ 47 , 48 ] , [ 48 , 57 ] , [ 55 , 61 ] , [ 54 , 65 ] , [ 47 , 69 ] , [ 56 , 74 ] , [ 66 , 75 ] ] ;
19969: LD_ADDR_VAR 0 4
19973: PUSH
19974: LD_INT 47
19976: PUSH
19977: LD_INT 48
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 48
19986: PUSH
19987: LD_INT 57
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 55
19996: PUSH
19997: LD_INT 61
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 54
20006: PUSH
20007: LD_INT 65
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 47
20016: PUSH
20017: LD_INT 69
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 56
20026: PUSH
20027: LD_INT 74
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 66
20036: PUSH
20037: LD_INT 75
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: ST_TO_ADDR
// tmp1 = 0 ;
20053: LD_ADDR_VAR 0 3
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// for tmp in deps do
20061: LD_ADDR_VAR 0 2
20065: PUSH
20066: LD_VAR 0 4
20070: PUSH
20071: FOR_IN
20072: IFFALSE 20115
// tmp1 = tmp1 + getresourcevisibility ( tmp [ 1 ] , tmp [ 2 ] , ru ) ;
20074: LD_ADDR_VAR 0 3
20078: PUSH
20079: LD_VAR 0 3
20083: PUSH
20084: LD_VAR 0 2
20088: PUSH
20089: LD_INT 1
20091: ARRAY
20092: PPUSH
20093: LD_VAR 0 2
20097: PUSH
20098: LD_INT 2
20100: ARRAY
20101: PPUSH
20102: LD_EXP 1
20106: PPUSH
20107: CALL_OW 440
20111: PLUS
20112: ST_TO_ADDR
20113: GO 20071
20115: POP
20116: POP
// result = tmp1 ;
20117: LD_ADDR_VAR 0 1
20121: PUSH
20122: LD_VAR 0 3
20126: ST_TO_ADDR
// end ;
20127: LD_VAR 0 1
20131: RET
// every 0 0$1 trigger seearea ( ru , mthldvw ) do var tmp ;
20132: LD_EXP 1
20136: PPUSH
20137: LD_INT 7
20139: PPUSH
20140: CALL_OW 294
20144: IFFALSE 20313
20146: GO 20148
20148: DISABLE
20149: LD_INT 0
20151: PPUSH
// begin while visib_dep < 4 do
20152: CALL 19963 0 0
20156: PUSH
20157: LD_INT 4
20159: LESS
20160: IFFALSE 20171
// wait ( 0 0$1 ) ;
20162: LD_INT 35
20164: PPUSH
20165: CALL_OW 67
20169: GO 20152
// tmp = unitfilter ( ostatni , [ [ f_sex , sex_male ] ] ) ;
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_LOC 20
20180: PPUSH
20181: LD_INT 26
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: PPUSH
20194: CALL_OW 72
20198: ST_TO_ADDR
// if not tmp then
20199: LD_VAR 0 1
20203: NOT
20204: IFFALSE 20234
// tmp = unitfilter ( lidi , [ [ f_sex , sex_male ] ] ) ;
20206: LD_ADDR_VAR 0 1
20210: PUSH
20211: LD_LOC 19
20215: PPUSH
20216: LD_INT 26
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: PPUSH
20229: CALL_OW 72
20233: ST_TO_ADDR
// dialogueon ;
20234: CALL_OW 6
// say ( burlak , DMotherlode-Bur-1 ) ;
20238: LD_EXP 233
20242: PPUSH
20243: LD_STRING DMotherlode-Bur-1
20245: PPUSH
20246: CALL_OW 88
// if belkov then
20250: LD_LOC 24
20254: IFFALSE 20268
// say ( belkov , DMotherlode-Bel-1 ) ;
20256: LD_LOC 24
20260: PPUSH
20261: LD_STRING DMotherlode-Bel-1
20263: PPUSH
20264: CALL_OW 88
// if tmp then
20268: LD_VAR 0 1
20272: IFFALSE 20290
// say ( tmp [ 1 ] , DMotherlode-Rsol1-1 ) ;
20274: LD_VAR 0 1
20278: PUSH
20279: LD_INT 1
20281: ARRAY
20282: PPUSH
20283: LD_STRING DMotherlode-Rsol1-1
20285: PPUSH
20286: CALL_OW 88
// say ( burlak , DMotherlode-Bur-2 ) ;
20290: LD_EXP 233
20294: PPUSH
20295: LD_STRING DMotherlode-Bur-2
20297: PPUSH
20298: CALL_OW 88
// dialogueoff ;
20302: CALL_OW 7
// changemissionobjectives ( MFindOut ) ;
20306: LD_STRING MFindOut
20308: PPUSH
20309: CALL_OW 337
// end ;
20313: PPOPN 1
20315: END
// export poticadlo ; every 0 0$10 + 5 5$0 marked 06 do var tmp , tmp2 , tmp3 ;
20316: GO 20318
20318: DISABLE
20319: LD_INT 0
20321: PPUSH
20322: PPUSH
20323: PPUSH
// begin if al_surr then
20324: LD_EXP 220
20328: IFFALSE 20334
// exit else
20330: GO 20759
20332: GO 20335
// enable ;
20334: ENABLE
// if artef_gone then
20335: LD_EXP 245
20339: IFFALSE 20344
// begin enable ;
20341: ENABLE
// exit ;
20342: GO 20759
// end ; poticadlo = poticadlo - 1 ;
20344: LD_ADDR_EXP 240
20348: PUSH
20349: LD_EXP 240
20353: PUSH
20354: LD_INT 1
20356: MINUS
20357: ST_TO_ADDR
// if not poticadlo then
20358: LD_EXP 240
20362: NOT
20363: IFFALSE 20759
// begin if debug then
20365: LD_EXP 223
20369: IFFALSE 20378
// msg ( al: preparing to kill a sib. building ) ;
20371: LD_STRING al: preparing to kill a sib. building
20373: PPUSH
20374: CALL_OW 100
// tmp2 = filterallunits ( [ [ f_side , ru ] , [ f_or , [ f_btype , b_siberite_mine ] , [ f_btype , b_siberite_power ] ] , f_not , [ f_constructed ] ] ) ;
20378: LD_ADDR_VAR 0 2
20382: PUSH
20383: LD_INT 22
20385: PUSH
20386: LD_EXP 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 30
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 30
20410: PUSH
20411: LD_INT 28
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 3
20425: PUSH
20426: LD_INT 57
20428: PUSH
20429: EMPTY
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: ST_TO_ADDR
// if not tmp2 then
20443: LD_VAR 0 2
20447: NOT
20448: IFFALSE 20463
// begin poticadlo = 1 ;
20450: LD_ADDR_EXP 240
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// enable ;
20458: ENABLE
// exit ;
20459: GO 20759
// end else
20461: GO 20542
// begin tmp = rand ( 1 , 0 + tmp2 ) ;
20463: LD_ADDR_VAR 0 1
20467: PUSH
20468: LD_INT 1
20470: PPUSH
20471: LD_INT 0
20473: PUSH
20474: LD_VAR 0 2
20478: PLUS
20479: PPUSH
20480: CALL_OW 12
20484: ST_TO_ADDR
// centernowonunits ( tmp2 [ tmp ] ) ;
20485: LD_VAR 0 2
20489: PUSH
20490: LD_VAR 0 1
20494: ARRAY
20495: PPUSH
20496: CALL_OW 87
// tmp3 = getbtype ( tmp2 [ tmp ] ) ;
20500: LD_ADDR_VAR 0 3
20504: PUSH
20505: LD_VAR 0 2
20509: PUSH
20510: LD_VAR 0 1
20514: ARRAY
20515: PPUSH
20516: CALL_OW 266
20520: ST_TO_ADDR
// setlives ( [ tmp2 [ tmp ] ] , 0 ) ;
20521: LD_VAR 0 2
20525: PUSH
20526: LD_VAR 0 1
20530: ARRAY
20531: PUSH
20532: EMPTY
20533: LIST
20534: PPUSH
20535: LD_INT 0
20537: PPUSH
20538: CALL_OW 234
// end ; if fst_vybuch then
20542: LD_EXP 212
20546: IFFALSE 20739
// begin tmp = unitfilter ( ostatni , [ [ f_sex , sex_male ] , [ f_ok ] ] ) ;
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_LOC 20
20557: PPUSH
20558: LD_INT 26
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 50
20570: PUSH
20571: EMPTY
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PPUSH
20578: CALL_OW 72
20582: ST_TO_ADDR
// if not tmp then
20583: LD_VAR 0 1
20587: NOT
20588: IFFALSE 20625
// tmp = unitfilter ( lidi , [ [ f_sex , sex_male ] , [ f_ok ] ] ) ;
20590: LD_ADDR_VAR 0 1
20594: PUSH
20595: LD_LOC 19
20599: PPUSH
20600: LD_INT 26
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 50
20612: PUSH
20613: EMPTY
20614: LIST
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PPUSH
20620: CALL_OW 72
20624: ST_TO_ADDR
// dialogueon ;
20625: CALL_OW 6
// if tmp3 = b_siberite_mine then
20629: LD_VAR 0 3
20633: PUSH
20634: LD_INT 30
20636: EQUAL
20637: IFFALSE 20693
// if tmp then
20639: LD_VAR 0 1
20643: IFFALSE 20691
// begin say ( tmp [ 1 ] , DAlaskDestroyed-Rsol1-1 ) ;
20645: LD_VAR 0 1
20649: PUSH
20650: LD_INT 1
20652: ARRAY
20653: PPUSH
20654: LD_STRING DAlaskDestroyed-Rsol1-1
20656: PPUSH
20657: CALL_OW 88
// say ( burlak , DAlaskDestroyed-Bur-1 ) ;
20661: LD_EXP 233
20665: PPUSH
20666: LD_STRING DAlaskDestroyed-Bur-1
20668: PPUSH
20669: CALL_OW 88
// say ( tmp [ 1 ] , DAlaskDestroyed-Rsol1-2 ) ;
20673: LD_VAR 0 1
20677: PUSH
20678: LD_INT 1
20680: ARRAY
20681: PPUSH
20682: LD_STRING DAlaskDestroyed-Rsol1-2
20684: PPUSH
20685: CALL_OW 88
// end else
20689: GO 20691
// else
20691: GO 20715
// if tmp then
20693: LD_VAR 0 1
20697: IFFALSE 20715
// say ( tmp [ 1 ] , DAlaskDestroyed-Rsol2-2 ) ;
20699: LD_VAR 0 1
20703: PUSH
20704: LD_INT 1
20706: ARRAY
20707: PPUSH
20708: LD_STRING DAlaskDestroyed-Rsol2-2
20710: PPUSH
20711: CALL_OW 88
// say ( burlak , DAlaskDestroyed-Bur-2 ) ;
20715: LD_EXP 233
20719: PPUSH
20720: LD_STRING DAlaskDestroyed-Bur-2
20722: PPUSH
20723: CALL_OW 88
// dialogueoff ;
20727: CALL_OW 7
// fst_vybuch = 0 ;
20731: LD_ADDR_EXP 212
20735: PUSH
20736: LD_INT 0
20738: ST_TO_ADDR
// end ; poticadlo = rand ( poticadlo_min , poticadlo_max ) ;
20739: LD_ADDR_EXP 240
20743: PUSH
20744: LD_EXP 199
20748: PPUSH
20749: LD_EXP 200
20753: PPUSH
20754: CALL_OW 12
20758: ST_TO_ADDR
// end ; end ;
20759: PPOPN 3
20761: END
// var dul_v_ml_ ; function dul_v_ml ; var tmp , tmp1 ; begin
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
// dul_v_ml_ = 0 ;
20767: LD_ADDR_LOC 43
20771: PUSH
20772: LD_INT 0
20774: ST_TO_ADDR
// tmp = filterunitsinarea ( mothdep , [ [ f_btype , b_siberite_mine ] , f_not , [ f_side , ru ] ] ) ;
20775: LD_ADDR_VAR 0 2
20779: PUSH
20780: LD_INT 9
20782: PPUSH
20783: LD_INT 30
20785: PUSH
20786: LD_INT 30
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 3
20795: PUSH
20796: LD_INT 22
20798: PUSH
20799: LD_EXP 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: PPUSH
20813: CALL_OW 70
20817: ST_TO_ADDR
// for tmp1 in tmp do
20818: LD_ADDR_VAR 0 3
20822: PUSH
20823: LD_VAR 0 2
20827: PUSH
20828: FOR_IN
20829: IFFALSE 20901
// if not isconstructed ( tmp1 ) and ( getlives ( tmp1 ) > hranice_umirani ) then
20831: LD_VAR 0 3
20835: PPUSH
20836: CALL_OW 304
20840: NOT
20841: PUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: CALL_OW 256
20851: PUSH
20852: LD_INT 250
20854: GREATER
20855: AND
20856: IFFALSE 20899
// begin dul_v_ml_ = tmp1 ;
20858: LD_ADDR_LOC 43
20862: PUSH
20863: LD_VAR 0 3
20867: ST_TO_ADDR
// result = true ;
20868: LD_ADDR_VAR 0 1
20872: PUSH
20873: LD_INT 1
20875: ST_TO_ADDR
// if debug then
20876: LD_EXP 223
20880: IFFALSE 20895
// msg ( tmp1 & :dul u arabu ) ;
20882: LD_VAR 0 3
20886: PUSH
20887: LD_STRING :dul u arabu
20889: STR
20890: PPUSH
20891: CALL_OW 100
// exit ;
20895: POP
20896: POP
20897: GO 21026
// end ;
20899: GO 20828
20901: POP
20902: POP
// tmp = hexinfo ( 64 , 17 ) ;
20903: LD_ADDR_VAR 0 2
20907: PUSH
20908: LD_INT 64
20910: PPUSH
20911: LD_INT 17
20913: PPUSH
20914: CALL_OW 428
20918: ST_TO_ADDR
// if ( getbtype ( tmp ) = b_siberite_mine ) and ( getlives ( tmp ) > hranice_umirani ) and not isconstructed ( tmp ) then
20919: LD_VAR 0 2
20923: PPUSH
20924: CALL_OW 266
20928: PUSH
20929: LD_INT 30
20931: EQUAL
20932: PUSH
20933: LD_VAR 0 2
20937: PPUSH
20938: CALL_OW 256
20942: PUSH
20943: LD_INT 250
20945: GREATER
20946: AND
20947: PUSH
20948: LD_VAR 0 2
20952: PPUSH
20953: CALL_OW 304
20957: NOT
20958: AND
20959: IFFALSE 20981
// begin dul_v_ml_ = tmp ;
20961: LD_ADDR_LOC 43
20965: PUSH
20966: LD_VAR 0 2
20970: ST_TO_ADDR
// result = true ;
20971: LD_ADDR_VAR 0 1
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// end else
20979: GO 20989
// result = false ;
20981: LD_ADDR_VAR 0 1
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// if debug and tmp and not isconstructed ( tmp ) then
20989: LD_EXP 223
20993: PUSH
20994: LD_VAR 0 2
20998: AND
20999: PUSH
21000: LD_VAR 0 2
21004: PPUSH
21005: CALL_OW 304
21009: NOT
21010: AND
21011: IFFALSE 21026
// msg ( tmp & :dul u amiku ) ;
21013: LD_VAR 0 2
21017: PUSH
21018: LD_STRING :dul u amiku
21020: STR
21021: PPUSH
21022: CALL_OW 100
// end ;
21026: LD_VAR 0 1
21030: RET
// every 0 0$3 trigger dul_v_ml do var tmp ;
21031: CALL 20762 0 0
21035: IFFALSE 21213
21037: GO 21039
21039: DISABLE
21040: LD_INT 0
21042: PPUSH
// begin tmp = unitfilter ( ostatni , [ [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21043: LD_ADDR_VAR 0 1
21047: PUSH
21048: LD_LOC 20
21052: PPUSH
21053: LD_INT 26
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 50
21065: PUSH
21066: EMPTY
21067: LIST
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL_OW 72
21077: ST_TO_ADDR
// if not tmp then
21078: LD_VAR 0 1
21082: NOT
21083: IFFALSE 21120
// tmp = unitfilter ( lidi , [ [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21085: LD_ADDR_VAR 0 1
21089: PUSH
21090: LD_LOC 19
21094: PPUSH
21095: LD_INT 26
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 50
21107: PUSH
21108: EMPTY
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PPUSH
21115: CALL_OW 72
21119: ST_TO_ADDR
// centernowonunits ( [ dul_v_ml_ ] ) ;
21120: LD_LOC 43
21124: PUSH
21125: EMPTY
21126: LIST
21127: PPUSH
21128: CALL_OW 87
// placeseeing ( getx ( dul_v_ml_ ) , gety ( dul_v_ml_ ) , ru , 5 ) ;
21132: LD_LOC 43
21136: PPUSH
21137: CALL_OW 250
21141: PPUSH
21142: LD_LOC 43
21146: PPUSH
21147: CALL_OW 251
21151: PPUSH
21152: LD_EXP 1
21156: PPUSH
21157: LD_INT 5
21159: PPUSH
21160: CALL_OW 330
// if tmp then
21164: LD_VAR 0 1
21168: IFFALSE 21206
// begin dialogueon ;
21170: CALL_OW 6
// say ( tmp [ 1 ] , DMines-Rsol1-1 ) ;
21174: LD_VAR 0 1
21178: PUSH
21179: LD_INT 1
21181: ARRAY
21182: PPUSH
21183: LD_STRING DMines-Rsol1-1
21185: PPUSH
21186: CALL_OW 88
// say ( burlak , DMines-Bur-1 ) ;
21190: LD_EXP 233
21194: PPUSH
21195: LD_STRING DMines-Bur-1
21197: PPUSH
21198: CALL_OW 88
// dialogueoff ;
21202: CALL_OW 7
// end ; youlost ( Motherlode ) ;
21206: LD_STRING Motherlode
21208: PPUSH
21209: CALL_OW 104
// end ;
21213: PPOPN 1
21215: END
// export amsibdeveldone ; on researchcomplete ( tech , lab ) do var tmp ;
21216: LD_INT 0
21218: PPUSH
// if ( tech = tech_sibfiss ) and ( getside ( lab ) = ru ) then
21219: LD_VAR 0 1
21223: PUSH
21224: LD_INT 25
21226: EQUAL
21227: PUSH
21228: LD_VAR 0 2
21232: PPUSH
21233: CALL_OW 255
21237: PUSH
21238: LD_EXP 1
21242: EQUAL
21243: AND
21244: IFFALSE 21377
// begin tmp = unitfilter ( ostatni , [ [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21246: LD_ADDR_VAR 0 3
21250: PUSH
21251: LD_LOC 20
21255: PPUSH
21256: LD_INT 25
21258: PUSH
21259: LD_INT 4
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 26
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 50
21278: PUSH
21279: EMPTY
21280: LIST
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: LIST
21286: PPUSH
21287: CALL_OW 72
21291: ST_TO_ADDR
// if not tmp then
21292: LD_VAR 0 3
21296: NOT
21297: IFFALSE 21345
// tmp = unitfilter ( lidi , [ [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21299: LD_ADDR_VAR 0 3
21303: PUSH
21304: LD_LOC 19
21308: PPUSH
21309: LD_INT 25
21311: PUSH
21312: LD_INT 4
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 26
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 50
21331: PUSH
21332: EMPTY
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: PPUSH
21340: CALL_OW 72
21344: ST_TO_ADDR
// if tmp then
21345: LD_VAR 0 3
21349: IFFALSE 21375
// begin dialogueon ;
21351: CALL_OW 6
// say ( tmp [ 1 ] , DRuBomb-Sci-1 ) ;
21355: LD_VAR 0 3
21359: PUSH
21360: LD_INT 1
21362: ARRAY
21363: PPUSH
21364: LD_STRING DRuBomb-Sci-1
21366: PPUSH
21367: CALL_OW 88
// dialogueoff ;
21371: CALL_OW 7
// end end else
21375: GO 21412
// if ( tech = tech_sibfiss ) and ( getside ( lab ) = am ) then
21377: LD_VAR 0 1
21381: PUSH
21382: LD_INT 25
21384: EQUAL
21385: PUSH
21386: LD_VAR 0 2
21390: PPUSH
21391: CALL_OW 255
21395: PUSH
21396: LD_EXP 2
21400: EQUAL
21401: AND
21402: IFFALSE 21412
// amsibdeveldone = true ;
21404: LD_ADDR_EXP 241
21408: PUSH
21409: LD_INT 1
21411: ST_TO_ADDR
21412: PPOPN 3
21414: END
// export rusacimajisib ; on vehicleconstructed ( veh , fact ) do if ( getside ( veh ) = ru ) and ( getweapon ( veh ) = ru_siberium_rocket ) and not rusacimajisib then
21415: LD_VAR 0 1
21419: PPUSH
21420: CALL_OW 255
21424: PUSH
21425: LD_EXP 1
21429: EQUAL
21430: PUSH
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 264
21440: PUSH
21441: LD_INT 48
21443: EQUAL
21444: AND
21445: PUSH
21446: LD_EXP 242
21450: NOT
21451: AND
21452: IFFALSE 21460
// sibdone else
21454: CALL 21583 0 0
21458: GO 21496
// if ( getside ( veh ) = am ) and ( getweapon ( veh ) = us_siberium_rocket ) then
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 255
21469: PUSH
21470: LD_EXP 2
21474: EQUAL
21475: PUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 264
21485: PUSH
21486: LD_INT 8
21488: EQUAL
21489: AND
21490: IFFALSE 21496
// sibdone2 ;
21492: CALL 22135 0 0
21496: PPOPN 2
21498: END
// on weaponplaced ( bunk , fact ) do if ( getside ( bunk ) = ru ) and ( getbweapon ( bunk ) = ru_siberium_rocket ) and not rusacimajisib then
21499: LD_VAR 0 1
21503: PPUSH
21504: CALL_OW 255
21508: PUSH
21509: LD_EXP 1
21513: EQUAL
21514: PUSH
21515: LD_VAR 0 1
21519: PPUSH
21520: CALL_OW 269
21524: PUSH
21525: LD_INT 48
21527: EQUAL
21528: AND
21529: PUSH
21530: LD_EXP 242
21534: NOT
21535: AND
21536: IFFALSE 21544
// sibdone else
21538: CALL 21583 0 0
21542: GO 21580
// if ( getside ( bunk ) = am ) and ( getbweapon ( bunk ) = us_siberium_rocket ) then
21544: LD_VAR 0 1
21548: PPUSH
21549: CALL_OW 255
21553: PUSH
21554: LD_EXP 2
21558: EQUAL
21559: PUSH
21560: LD_VAR 0 1
21564: PPUSH
21565: CALL_OW 269
21569: PUSH
21570: LD_INT 8
21572: EQUAL
21573: AND
21574: IFFALSE 21580
// sibdone2 ;
21576: CALL 22135 0 0
21580: PPOPN 2
21582: END
// export vyhrozoval ; function sibdone ; var tmp ; begin
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// rusacimajisib = true ;
21587: LD_ADDR_EXP 242
21591: PUSH
21592: LD_INT 1
21594: ST_TO_ADDR
// tmp = unitfilter ( ostatni , [ [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21595: LD_ADDR_VAR 0 2
21599: PUSH
21600: LD_LOC 20
21604: PPUSH
21605: LD_INT 26
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 50
21617: PUSH
21618: EMPTY
21619: LIST
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PPUSH
21625: CALL_OW 72
21629: ST_TO_ADDR
// if not tmp then
21630: LD_VAR 0 2
21634: NOT
21635: IFFALSE 21672
// tmp = unitfilter ( lidi , [ [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_LOC 19
21646: PPUSH
21647: LD_INT 26
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 50
21659: PUSH
21660: EMPTY
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 72
21671: ST_TO_ADDR
// dialogueon ;
21672: CALL_OW 6
// if tmp then
21676: LD_VAR 0 2
21680: IFFALSE 21698
// say ( tmp [ 1 ] , DRuBomb-Rsol1-1 ) ;
21682: LD_VAR 0 2
21686: PUSH
21687: LD_INT 1
21689: ARRAY
21690: PPUSH
21691: LD_STRING DRuBomb-Rsol1-1
21693: PPUSH
21694: CALL_OW 88
// dialogueoff ;
21698: CALL_OW 7
// case query ( QUseBomb ) of 1 :
21702: LD_STRING QUseBomb
21704: PPUSH
21705: CALL_OW 97
21709: PUSH
21710: LD_INT 1
21712: DOUBLE
21713: EQUAL
21714: IFTRUE 21718
21716: GO 22111
21718: POP
// begin vyhrozoval = true ;
21719: LD_ADDR_EXP 243
21723: PUSH
21724: LD_INT 1
21726: ST_TO_ADDR
// dialogueon ;
21727: CALL_OW 6
// forcesay ( burlak , DQrUseBomb#1-Bur-1 ) ;
21731: LD_EXP 233
21735: PPUSH
21736: LD_STRING DQrUseBomb#1-Bur-1
21738: PPUSH
21739: CALL_OW 91
// if isok ( powel ) then
21743: LD_EXP 236
21747: PPUSH
21748: CALL_OW 302
21752: IFFALSE 21768
// say ( powel , DQrUseBomb#1-Pow-1 ) else
21754: LD_EXP 236
21758: PPUSH
21759: LD_STRING DQrUseBomb#1-Pow-1
21761: PPUSH
21762: CALL_OW 88
21766: GO 21833
// begin tmp = filterallunits ( [ [ f_side , am ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21768: LD_ADDR_VAR 0 2
21772: PUSH
21773: LD_INT 22
21775: PUSH
21776: LD_EXP 2
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 26
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 50
21797: PUSH
21798: EMPTY
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: PPUSH
21806: CALL_OW 69
21810: ST_TO_ADDR
// if tmp then
21811: LD_VAR 0 2
21815: IFFALSE 21833
// say ( tmp [ 1 ] , DQrUseBomb#1-Pow-1 ) ;
21817: LD_VAR 0 2
21821: PUSH
21822: LD_INT 1
21824: ARRAY
21825: PPUSH
21826: LD_STRING DQrUseBomb#1-Pow-1
21828: PPUSH
21829: CALL_OW 88
// end ; if isok ( jmm ) then
21833: LD_EXP 234
21837: PPUSH
21838: CALL_OW 302
21842: IFFALSE 21858
// say ( jmm , DQrUseBomb#1-JMM-1 ) else
21844: LD_EXP 234
21848: PPUSH
21849: LD_STRING DQrUseBomb#1-JMM-1
21851: PPUSH
21852: CALL_OW 88
21856: GO 21923
// begin tmp = filterallunits ( [ [ f_side , al ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 22
21865: PUSH
21866: LD_EXP 3
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 26
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 50
21887: PUSH
21888: EMPTY
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: PPUSH
21896: CALL_OW 69
21900: ST_TO_ADDR
// if tmp then
21901: LD_VAR 0 2
21905: IFFALSE 21923
// say ( tmp [ 1 ] , DQrUseBomb#1-JMM-1 ) ;
21907: LD_VAR 0 2
21911: PUSH
21912: LD_INT 1
21914: ARRAY
21915: PPUSH
21916: LD_STRING DQrUseBomb#1-JMM-1
21918: PPUSH
21919: CALL_OW 88
// end ; if isok ( heike ) then
21923: LD_EXP 237
21927: PPUSH
21928: CALL_OW 302
21932: IFFALSE 21948
// say ( heike , DQrUseBomb#1-Hke-1 ) else
21934: LD_EXP 237
21938: PPUSH
21939: LD_STRING DQrUseBomb#1-Hke-1
21941: PPUSH
21942: CALL_OW 88
21946: GO 22105
// if isok ( farmer ) then
21948: LD_EXP 238
21952: PPUSH
21953: CALL_OW 302
21957: IFFALSE 21973
// say ( farmer , DQrUseBomb#1-Frm-1 ) else
21959: LD_EXP 238
21963: PPUSH
21964: LD_STRING DQrUseBomb#1-Frm-1
21966: PPUSH
21967: CALL_OW 88
21971: GO 22105
// begin tmp = filterallunits ( [ [ f_side , le ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
21973: LD_ADDR_VAR 0 2
21977: PUSH
21978: LD_INT 22
21980: PUSH
21981: LD_EXP 4
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 26
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 50
22002: PUSH
22003: EMPTY
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: PPUSH
22011: CALL_OW 69
22015: ST_TO_ADDR
// if tmp then
22016: LD_VAR 0 2
22020: IFFALSE 22040
// say ( tmp [ 1 ] , DQrUseBomb#1-Frm-1 ) else
22022: LD_VAR 0 2
22026: PUSH
22027: LD_INT 1
22029: ARRAY
22030: PPUSH
22031: LD_STRING DQrUseBomb#1-Frm-1
22033: PPUSH
22034: CALL_OW 88
22038: GO 22105
// begin tmp = filterallunits ( [ [ f_side , le ] , [ f_sex , sex_female ] , [ f_ok ] ] ) ;
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_INT 22
22047: PUSH
22048: LD_EXP 4
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 26
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 50
22069: PUSH
22070: EMPTY
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 69
22082: ST_TO_ADDR
// if tmp then
22083: LD_VAR 0 2
22087: IFFALSE 22105
// say ( tmp [ 1 ] , DQrUseBomb#1-Hke-1 ) end ;
22089: LD_VAR 0 2
22093: PUSH
22094: LD_INT 1
22096: ARRAY
22097: PPUSH
22098: LD_STRING DQrUseBomb#1-Hke-1
22100: PPUSH
22101: CALL_OW 88
// end ; dialogueoff ;
22105: CALL_OW 7
// end ; 2 :
22109: GO 22123
22111: LD_INT 2
22113: DOUBLE
22114: EQUAL
22115: IFTRUE 22119
22117: GO 22122
22119: POP
// begin end ; end ;
22120: GO 22123
22122: POP
// changemissionobjectives ( Mrocket ) ;
22123: LD_STRING Mrocket
22125: PPUSH
22126: CALL_OW 337
// end ;
22130: LD_VAR 0 1
22134: RET
// function sibdone2 ; var tmp ; begin
22135: LD_INT 0
22137: PPUSH
22138: PPUSH
// tmp = filterallunits ( [ [ f_side , am ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
22139: LD_ADDR_VAR 0 2
22143: PUSH
22144: LD_INT 22
22146: PUSH
22147: LD_EXP 2
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 26
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 50
22168: PUSH
22169: EMPTY
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: PPUSH
22177: CALL_OW 69
22181: ST_TO_ADDR
// dialogueon ;
22182: CALL_OW 6
// if isok ( powel ) then
22186: LD_EXP 236
22190: PPUSH
22191: CALL_OW 302
22195: IFFALSE 22211
// say ( powel , DAmBomb-Pow-1 ) else
22197: LD_EXP 236
22201: PPUSH
22202: LD_STRING DAmBomb-Pow-1
22204: PPUSH
22205: CALL_OW 88
22209: GO 22233
// if tmp then
22211: LD_VAR 0 2
22215: IFFALSE 22233
// say ( tmp [ 1 ] , DAmBomb-Pow-1 ) ;
22217: LD_VAR 0 2
22221: PUSH
22222: LD_INT 1
22224: ARRAY
22225: PPUSH
22226: LD_STRING DAmBomb-Pow-1
22228: PPUSH
22229: CALL_OW 88
// if tmp then
22233: LD_VAR 0 2
22237: IFFALSE 22251
// say ( burlak , DAmBomb-Bur-1 ) ;
22239: LD_EXP 233
22243: PPUSH
22244: LD_STRING DAmBomb-Bur-1
22246: PPUSH
22247: CALL_OW 88
// if isok ( powel ) then
22251: LD_EXP 236
22255: PPUSH
22256: CALL_OW 302
22260: IFFALSE 22276
// say ( powel , DAmBomb-Pow-2 ) else
22262: LD_EXP 236
22266: PPUSH
22267: LD_STRING DAmBomb-Pow-2
22269: PPUSH
22270: CALL_OW 88
22274: GO 22298
// if tmp then
22276: LD_VAR 0 2
22280: IFFALSE 22298
// say ( tmp [ 1 ] , DAmBomb-Pow-2 ) ;
22282: LD_VAR 0 2
22286: PUSH
22287: LD_INT 1
22289: ARRAY
22290: PPUSH
22291: LD_STRING DAmBomb-Pow-2
22293: PPUSH
22294: CALL_OW 88
// if tmp then
22298: LD_VAR 0 2
22302: IFFALSE 22316
// say ( burlak , DAmBomb-Bur-2 ) ;
22304: LD_EXP 233
22308: PPUSH
22309: LD_STRING DAmBomb-Bur-2
22311: PPUSH
22312: CALL_OW 88
// dialogueoff ;
22316: CALL_OW 7
// youlost ( Bomb ) ;
22320: LD_STRING Bomb
22322: PPUSH
22323: CALL_OW 104
// end ;
22327: LD_VAR 0 1
22331: RET
// export vezeartef , artef_gone ; on artifactloaded ( un , size ) do if getside ( un ) = ru then
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 255
22341: PUSH
22342: LD_EXP 1
22346: EQUAL
22347: IFFALSE 22367
// begin artef_gone = true ;
22349: LD_ADDR_EXP 245
22353: PUSH
22354: LD_INT 1
22356: ST_TO_ADDR
// changemissionobjectives ( Martef ) ;
22357: LD_STRING Martef
22359: PPUSH
22360: CALL_OW 337
// disable ( 06 ) ;
22364: LD_INT 6
22366: DISABLE_MARKED
// end ;
22367: PPOPN 2
22369: END
// every 0 0$1 trigger rusacimajisib do
22370: LD_EXP 242
22374: IFFALSE 22400
22376: GO 22378
22378: DISABLE
// begin if not findartifact ( 5 ) then
22379: LD_INT 5
22381: PPUSH
22382: CALL_OW 469
22386: NOT
22387: IFFALSE 22399
// artef_gone = true else
22389: LD_ADDR_EXP 245
22393: PUSH
22394: LD_INT 1
22396: ST_TO_ADDR
22397: GO 22400
// enable ;
22399: ENABLE
// end ;
22400: END
// export hodiliju ; export legionmed ; on siberiterocketexploded ( un , x , y ) do var tmp ;
22401: LD_INT 0
22403: PPUSH
// begin SA_OnSiberiteRocketExploded ( un , x , y ) ;
22404: LD_VAR 0 1
22408: PPUSH
22409: LD_VAR 0 2
22413: PPUSH
22414: LD_VAR 0 3
22418: PPUSH
22419: CALL 26847 0 3
// if getside ( un ) = ru then
22423: LD_VAR 0 1
22427: PPUSH
22428: CALL_OW 255
22432: PUSH
22433: LD_EXP 1
22437: EQUAL
22438: IFFALSE 22772
// begin hodiliju = true ;
22440: LD_ADDR_EXP 246
22444: PUSH
22445: LD_INT 1
22447: ST_TO_ADDR
// disable ;
22448: DISABLE
// tmp = filterallunits ( [ [ f_side , al ] , [ f_sex , sex_male ] ] ) ;
22449: LD_ADDR_VAR 0 4
22453: PUSH
22454: LD_INT 22
22456: PUSH
22457: LD_EXP 3
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 26
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PPUSH
22480: CALL_OW 69
22484: ST_TO_ADDR
// wait ( 0 0$7 ) ;
22485: LD_INT 245
22487: PPUSH
22488: CALL_OW 67
// if not artef_gone then
22492: LD_EXP 245
22496: NOT
22497: IFFALSE 22629
// begin dialogueon ;
22499: CALL_OW 6
// if isok ( jmm ) then
22503: LD_EXP 234
22507: PPUSH
22508: CALL_OW 302
22512: IFFALSE 22528
// say ( jmm , DAfterBlastAll-JMM-1 ) else
22514: LD_EXP 234
22518: PPUSH
22519: LD_STRING DAfterBlastAll-JMM-1
22521: PPUSH
22522: CALL_OW 88
22526: GO 22550
// if tmp then
22528: LD_VAR 0 4
22532: IFFALSE 22550
// forcesay ( tmp [ 1 ] , DAfterBlastAll-JMM-1 ) ;
22534: LD_VAR 0 4
22538: PUSH
22539: LD_INT 1
22541: ARRAY
22542: PPUSH
22543: LD_STRING DAfterBlastAll-JMM-1
22545: PPUSH
22546: CALL_OW 91
// if tmp then
22550: LD_VAR 0 4
22554: IFFALSE 22568
// say ( burlak , DAfterBlastAll-Bur-1 ) ;
22556: LD_EXP 233
22560: PPUSH
22561: LD_STRING DAfterBlastAll-Bur-1
22563: PPUSH
22564: CALL_OW 88
// if isok ( jmm ) then
22568: LD_EXP 234
22572: PPUSH
22573: CALL_OW 302
22577: IFFALSE 22593
// say ( jmm , DAfterBlastAll-JMM-2 ) else
22579: LD_EXP 234
22583: PPUSH
22584: LD_STRING DAfterBlastAll-JMM-2
22586: PPUSH
22587: CALL_OW 88
22591: GO 22615
// if tmp then
22593: LD_VAR 0 4
22597: IFFALSE 22615
// forcesay ( tmp [ 1 ] , DAfterBlastAll-JMM-2 ) ;
22599: LD_VAR 0 4
22603: PUSH
22604: LD_INT 1
22606: ARRAY
22607: PPUSH
22608: LD_STRING DAfterBlastAll-JMM-2
22610: PPUSH
22611: CALL_OW 91
// dialogueoff ;
22615: CALL_OW 7
// changemissionobjectives ( M1 ) ;
22619: LD_STRING M1
22621: PPUSH
22622: CALL_OW 337
// enable ( 08 ) ;
22626: LD_INT 8
22628: ENABLE_MARKED
// end ; if not lesurr then
22629: LD_EXP 248
22633: NOT
22634: IFFALSE 22772
// begin tmp = filterallunits ( [ [ f_side , le ] , [ f_sex , sex_male ] ] ) ;
22636: LD_ADDR_VAR 0 4
22640: PUSH
22641: LD_INT 22
22643: PUSH
22644: LD_EXP 4
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 26
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PPUSH
22667: CALL_OW 69
22671: ST_TO_ADDR
// dialogueon ;
22672: CALL_OW 6
// if isok ( heike ) then
22676: LD_EXP 237
22680: PPUSH
22681: CALL_OW 302
22685: IFFALSE 22701
// say ( heike , DAfterBlastLeg-Hke-1 ) else
22687: LD_EXP 237
22691: PPUSH
22692: LD_STRING DAfterBlastLeg-Hke-1
22694: PPUSH
22695: CALL_OW 88
22699: GO 22748
// if isok ( farmer ) then
22701: LD_EXP 238
22705: PPUSH
22706: CALL_OW 302
22710: IFFALSE 22726
// say ( farmer , DAfterBlastLeg-Frm-1 ) else
22712: LD_EXP 238
22716: PPUSH
22717: LD_STRING DAfterBlastLeg-Frm-1
22719: PPUSH
22720: CALL_OW 88
22724: GO 22748
// if tmp then
22726: LD_VAR 0 4
22730: IFFALSE 22748
// forcesay ( tmp [ 1 ] , DAfterBlastLeg-Merc1-1 ) ;
22732: LD_VAR 0 4
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PPUSH
22741: LD_STRING DAfterBlastLeg-Merc1-1
22743: PPUSH
22744: CALL_OW 91
// dialogueoff ;
22748: CALL_OW 7
// lesurr = true ;
22752: LD_ADDR_EXP 248
22756: PUSH
22757: LD_INT 1
22759: ST_TO_ADDR
// legionmed = true ;
22760: LD_ADDR_EXP 247
22764: PUSH
22765: LD_INT 1
22767: ST_TO_ADDR
// legiontobali ;
22768: CALL 22775 0 0
// end ; end ; end ;
22772: PPOPN 4
22774: END
// var all_odch_le_lidi ; function legiontobali ; var tmp , tmp1 , tmp2 , tmp3 , tmp4 ; begin
22775: LD_INT 0
22777: PPUSH
22778: PPUSH
22779: PPUSH
22780: PPUSH
22781: PPUSH
22782: PPUSH
// disable ( 09 ) ;
22783: LD_INT 9
22785: DISABLE_MARKED
// hint ( Legion ) ;
22786: LD_STRING Legion
22788: PPUSH
22789: CALL_OW 339
// tmp = filterallunits ( [ [ f_side , le ] , [ f_type , unit_human ] ] ) ;
22793: LD_ADDR_VAR 0 2
22797: PUSH
22798: LD_INT 22
22800: PUSH
22801: LD_EXP 4
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 21
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 69
22828: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , le ] , [ f_type , unit_vehicle ] ] ) ;
22829: LD_ADDR_VAR 0 3
22833: PUSH
22834: LD_INT 22
22836: PUSH
22837: LD_EXP 4
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 21
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PPUSH
22860: CALL_OW 69
22864: ST_TO_ADDR
// if isok ( ledepo00 ) and ( getside ( ledepo00 ) = le ) then
22865: LD_INT 72
22867: PPUSH
22868: CALL_OW 302
22872: PUSH
22873: LD_INT 72
22875: PPUSH
22876: CALL_OW 255
22880: PUSH
22881: LD_EXP 4
22885: EQUAL
22886: AND
22887: IFFALSE 22908
// setsidebase ( getbase ( ledepo00 ) , sr ) else
22889: LD_INT 72
22891: PPUSH
22892: CALL_OW 274
22896: PPUSH
22897: LD_EXP 5
22901: PPUSH
22902: CALL_OW 236
22906: GO 22920
// setside ( ledepo00 , sr ) ;
22908: LD_INT 72
22910: PPUSH
22911: LD_EXP 5
22915: PPUSH
22916: CALL_OW 235
// if isok ( leware00 ) and ( getside ( leware00 ) = le ) then
22920: LD_INT 51
22922: PPUSH
22923: CALL_OW 302
22927: PUSH
22928: LD_INT 51
22930: PPUSH
22931: CALL_OW 255
22935: PUSH
22936: LD_EXP 4
22940: EQUAL
22941: AND
22942: IFFALSE 22963
// setsidebase ( getbase ( leware00 ) , sr ) else
22944: LD_INT 51
22946: PPUSH
22947: CALL_OW 274
22951: PPUSH
22952: LD_EXP 5
22956: PPUSH
22957: CALL_OW 236
22961: GO 23003
// setside ( filterallunits ( [ [ f_side , le ] , [ f_type , unit_building ] ] ) , sr ) ;
22963: LD_INT 22
22965: PUSH
22966: LD_EXP 4
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 69
22993: PPUSH
22994: LD_EXP 5
22998: PPUSH
22999: CALL_OW 235
// total_sr = total_sr + 0 + tmp ;
23003: LD_ADDR_EXP 215
23007: PUSH
23008: LD_EXP 215
23012: PUSH
23013: LD_INT 0
23015: PLUS
23016: PUSH
23017: LD_VAR 0 2
23021: PLUS
23022: ST_TO_ADDR
// setside ( tmp , sr ) ;
23023: LD_VAR 0 2
23027: PPUSH
23028: LD_EXP 5
23032: PPUSH
23033: CALL_OW 235
// setside ( tmp1 , sr ) ;
23037: LD_VAR 0 3
23041: PPUSH
23042: LD_EXP 5
23046: PPUSH
23047: CALL_OW 235
// tmp = unitfilter ( tmp , [ [ f_ok ] ] ) ;
23051: LD_ADDR_VAR 0 2
23055: PUSH
23056: LD_VAR 0 2
23060: PPUSH
23061: LD_INT 50
23063: PUSH
23064: EMPTY
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: PPUSH
23070: CALL_OW 72
23074: ST_TO_ADDR
// tmp1 = tmp diff [ heike , farmer ] ;
23075: LD_ADDR_VAR 0 3
23079: PUSH
23080: LD_VAR 0 2
23084: PUSH
23085: LD_EXP 237
23089: PUSH
23090: LD_EXP 238
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: DIFF
23099: ST_TO_ADDR
// for tmp2 = 1 to 0 + tmp1 do
23100: LD_ADDR_VAR 0 4
23104: PUSH
23105: DOUBLE
23106: LD_INT 1
23108: DEC
23109: ST_TO_ADDR
23110: LD_INT 0
23112: PUSH
23113: LD_VAR 0 3
23117: PLUS
23118: PUSH
23119: FOR_TO
23120: IFFALSE 23280
// if tmp2 <= ( ( 0 + tmp1 ) / 3 ) then
23122: LD_VAR 0 4
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: LD_VAR 0 3
23134: PLUS
23135: PUSH
23136: LD_INT 3
23138: DIVREAL
23139: LESSEQUAL
23140: IFFALSE 23278
// begin tmp = tmp diff tmp1 [ tmp2 ] ;
23142: LD_ADDR_VAR 0 2
23146: PUSH
23147: LD_VAR 0 2
23151: PUSH
23152: LD_VAR 0 3
23156: PUSH
23157: LD_VAR 0 4
23161: ARRAY
23162: DIFF
23163: ST_TO_ADDR
// setside ( tmp1 [ tmp2 ] , ru ) ;
23164: LD_VAR 0 3
23168: PUSH
23169: LD_VAR 0 4
23173: ARRAY
23174: PPUSH
23175: LD_EXP 1
23179: PPUSH
23180: CALL_OW 235
// if gettype ( isinunit ( tmp1 [ tmp2 ] ) ) = unit_vehicle then
23184: LD_VAR 0 3
23188: PUSH
23189: LD_VAR 0 4
23193: ARRAY
23194: PPUSH
23195: CALL_OW 310
23199: PPUSH
23200: CALL_OW 247
23204: PUSH
23205: LD_INT 2
23207: EQUAL
23208: IFFALSE 23237
// setside ( isinunit ( tmp1 [ tmp2 ] ) , ru ) else
23210: LD_VAR 0 3
23214: PUSH
23215: LD_VAR 0 4
23219: ARRAY
23220: PPUSH
23221: CALL_OW 310
23225: PPUSH
23226: LD_EXP 1
23230: PPUSH
23231: CALL_OW 235
23235: GO 23278
// if gettype ( isinunit ( tmp1 [ tmp2 ] ) ) = unit_building then
23237: LD_VAR 0 3
23241: PUSH
23242: LD_VAR 0 4
23246: ARRAY
23247: PPUSH
23248: CALL_OW 310
23252: PPUSH
23253: CALL_OW 247
23257: PUSH
23258: LD_INT 3
23260: EQUAL
23261: IFFALSE 23278
// comexitbuilding ( tmp1 [ tmp2 ] ) ;
23263: LD_VAR 0 3
23267: PUSH
23268: LD_VAR 0 4
23272: ARRAY
23273: PPUSH
23274: CALL_OW 122
// end ;
23278: GO 23119
23280: POP
23281: POP
// tmp3 = [ ] ;
23282: LD_ADDR_VAR 0 5
23286: PUSH
23287: EMPTY
23288: ST_TO_ADDR
// tmp4 = [ ] ;
23289: LD_ADDR_VAR 0 6
23293: PUSH
23294: EMPTY
23295: ST_TO_ADDR
// tmp1 = [ ] ;
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: EMPTY
23302: ST_TO_ADDR
// for tmp2 in tmp do
23303: LD_ADDR_VAR 0 4
23307: PUSH
23308: LD_VAR 0 2
23312: PUSH
23313: FOR_IN
23314: IFFALSE 23419
// if gettype ( isinunit ( tmp2 ) ) = unit_vehicle then
23316: LD_VAR 0 4
23320: PPUSH
23321: CALL_OW 310
23325: PPUSH
23326: CALL_OW 247
23330: PUSH
23331: LD_INT 2
23333: EQUAL
23334: IFFALSE 23398
// if not isinarea ( isinunit ( tmp2 ) , lebase ) then
23336: LD_VAR 0 4
23340: PPUSH
23341: CALL_OW 310
23345: PPUSH
23346: LD_INT 13
23348: PPUSH
23349: CALL_OW 308
23353: NOT
23354: IFFALSE 23377
// tmp3 = tmp3 ^ [ tmp2 ] else
23356: LD_ADDR_VAR 0 5
23360: PUSH
23361: LD_VAR 0 5
23365: PUSH
23366: LD_VAR 0 4
23370: PUSH
23371: EMPTY
23372: LIST
23373: ADD
23374: ST_TO_ADDR
23375: GO 23396
// tmp4 = tmp4 ^ [ tmp2 ] else
23377: LD_ADDR_VAR 0 6
23381: PUSH
23382: LD_VAR 0 6
23386: PUSH
23387: LD_VAR 0 4
23391: PUSH
23392: EMPTY
23393: LIST
23394: ADD
23395: ST_TO_ADDR
23396: GO 23417
// tmp1 = tmp1 ^ [ tmp2 ] ;
23398: LD_ADDR_VAR 0 3
23402: PUSH
23403: LD_VAR 0 3
23407: PUSH
23408: LD_VAR 0 4
23412: PUSH
23413: EMPTY
23414: LIST
23415: ADD
23416: ST_TO_ADDR
23417: GO 23313
23419: POP
23420: POP
// comwait ( tmp4 , 17 ) ;
23421: LD_VAR 0 6
23425: PPUSH
23426: LD_INT 17
23428: PPUSH
23429: CALL_OW 142
// addcomexitvehicle ( tmp4 ) ;
23433: LD_VAR 0 6
23437: PPUSH
23438: CALL_OW 181
// addcommovetoarea ( tmp4 , leexitar ) ;
23442: LD_VAR 0 6
23446: PPUSH
23447: LD_INT 18
23449: PPUSH
23450: CALL_OW 173
// commovetoarea ( tmp3 , lemeetar ) ;
23454: LD_VAR 0 5
23458: PPUSH
23459: LD_INT 19
23461: PPUSH
23462: CALL_OW 113
// addcomexitvehicle ( tmp3 ) ;
23466: LD_VAR 0 5
23470: PPUSH
23471: CALL_OW 181
// addcommovetoarea ( tmp3 , leexitar ) ;
23475: LD_VAR 0 5
23479: PPUSH
23480: LD_INT 18
23482: PPUSH
23483: CALL_OW 173
// commovetoarea ( tmp1 , leexitar ) ;
23487: LD_VAR 0 3
23491: PPUSH
23492: LD_INT 18
23494: PPUSH
23495: CALL_OW 113
// all_odch_le_lidi = tmp1 ^ tmp3 ^ tmp4 ;
23499: LD_ADDR_LOC 44
23503: PUSH
23504: LD_VAR 0 3
23508: PUSH
23509: LD_VAR 0 5
23513: ADD
23514: PUSH
23515: LD_VAR 0 6
23519: ADD
23520: ST_TO_ADDR
// enable ( 04 ) ;
23521: LD_INT 4
23523: ENABLE_MARKED
// end ;
23524: LD_VAR 0 1
23528: RET
// function odch_le_lidi ; begin
23529: LD_INT 0
23531: PPUSH
// odch_le_lidi_ = filterunitsinarea ( leexitar , [ [ f_type , unit_human ] , [ f_side , sr ] ] ) ;
23532: LD_ADDR_LOC 45
23536: PUSH
23537: LD_INT 18
23539: PPUSH
23540: LD_INT 21
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 22
23552: PUSH
23553: LD_EXP 5
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PPUSH
23566: CALL_OW 70
23570: ST_TO_ADDR
// result = 0 + odch_le_lidi_ ;
23571: LD_ADDR_VAR 0 1
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_LOC 45
23583: PLUS
23584: ST_TO_ADDR
// end ;
23585: LD_VAR 0 1
23589: RET
// var odch_le_lidi_ ; every 0 0$2 + 3 trigger odch_le_lidi marked 04 do var tmp ;
23590: CALL 23529 0 0
23594: IFFALSE 23651
23596: GO 23598
23598: DISABLE
23599: LD_INT 0
23601: PPUSH
// begin all_odch_le_lidi = all_odch_le_lidi diff odch_le_lidi_ ;
23602: LD_ADDR_LOC 44
23606: PUSH
23607: LD_LOC 44
23611: PUSH
23612: LD_LOC 45
23616: DIFF
23617: ST_TO_ADDR
// for tmp in odch_le_lidi_ do
23618: LD_ADDR_VAR 0 1
23622: PUSH
23623: LD_LOC 45
23627: PUSH
23628: FOR_IN
23629: IFFALSE 23642
// destroyunit ( tmp ) ;
23631: LD_VAR 0 1
23635: PPUSH
23636: CALL_OW 65
23640: GO 23628
23642: POP
23643: POP
// if all_odch_le_lidi then
23644: LD_LOC 44
23648: IFFALSE 23651
// enable ;
23650: ENABLE
// end ;
23651: PPOPN 1
23653: END
// function surrender ( budlist , side ) ; var tmp ; begin
23654: LD_INT 0
23656: PPUSH
23657: PPUSH
// tmp = unitfilter ( budlist , [ [ f_side , side ] , [ f_lives , hranice_umirani + 1 ] ] ) ;
23658: LD_ADDR_VAR 0 4
23662: PUSH
23663: LD_VAR 0 1
23667: PPUSH
23668: LD_INT 22
23670: PUSH
23671: LD_VAR 0 2
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 24
23682: PUSH
23683: LD_INT 250
23685: PUSH
23686: LD_INT 1
23688: PLUS
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 72
23702: ST_TO_ADDR
// result = ( 0 + tmp ) < ( ( 0 + budlist ) / bdkoef ) ;
23703: LD_ADDR_VAR 0 3
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_VAR 0 4
23715: PLUS
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: LD_VAR 0 1
23724: PLUS
23725: PUSH
23726: LD_EXP 210
23730: DIVREAL
23731: LESS
23732: ST_TO_ADDR
// end ;
23733: LD_VAR 0 3
23737: RET
// var all_odch_al_lidi ; every 0 0$3 + 5 trigger surrender ( aliancnici , al ) do var tmp , tmp1 , tmp2 , tmp3 , tmp4 ;
23738: LD_EXP 232
23742: PPUSH
23743: LD_EXP 3
23747: PPUSH
23748: CALL 23654 0 2
23752: IFFALSE 24377
23754: GO 23756
23756: DISABLE
23757: LD_INT 0
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
// begin al_surr = true ;
23764: LD_ADDR_EXP 220
23768: PUSH
23769: LD_INT 1
23771: ST_TO_ADDR
// tmp = filterallunits ( [ [ f_side , al ] , [ f_sex , sex_male ] ] ) ;
23772: LD_ADDR_VAR 0 1
23776: PUSH
23777: LD_INT 22
23779: PUSH
23780: LD_EXP 3
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 26
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PPUSH
23803: CALL_OW 69
23807: ST_TO_ADDR
// dialogueon ;
23808: CALL_OW 6
// if isok ( jmm ) then
23812: LD_EXP 234
23816: PPUSH
23817: CALL_OW 302
23821: IFFALSE 23837
// say ( jmm , DSurrenderAlliance-JMM-1 ) else
23823: LD_EXP 234
23827: PPUSH
23828: LD_STRING DSurrenderAlliance-JMM-1
23830: PPUSH
23831: CALL_OW 88
23835: GO 23884
// if isok ( roth ) then
23837: LD_EXP 235
23841: PPUSH
23842: CALL_OW 302
23846: IFFALSE 23862
// say ( roth , DSurrenderAlliance-Roth-1 ) else
23848: LD_EXP 235
23852: PPUSH
23853: LD_STRING DSurrenderAlliance-Roth-1
23855: PPUSH
23856: CALL_OW 88
23860: GO 23884
// if tmp then
23862: LD_VAR 0 1
23866: IFFALSE 23884
// forcesay ( tmp [ 1 ] , DSurrenderAlliance-Sci1-1 ) ;
23868: LD_VAR 0 1
23872: PUSH
23873: LD_INT 1
23875: ARRAY
23876: PPUSH
23877: LD_STRING DSurrenderAlliance-Sci1-1
23879: PPUSH
23880: CALL_OW 91
// dialogueoff ;
23884: CALL_OW 7
// if not artef_gone then
23888: LD_EXP 245
23892: NOT
23893: IFFALSE 23902
// changemissionobjectives ( Martef ) ;
23895: LD_STRING Martef
23897: PPUSH
23898: CALL_OW 337
// disable ( 06 ) ;
23902: LD_INT 6
23904: DISABLE_MARKED
// disable ( 08 ) ;
23905: LD_INT 8
23907: DISABLE_MARKED
// tmp = filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] ] ) ;
23908: LD_ADDR_VAR 0 1
23912: PUSH
23913: LD_INT 22
23915: PUSH
23916: LD_EXP 3
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 21
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PPUSH
23939: CALL_OW 69
23943: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , al ] , [ f_type , unit_vehicle ] ] ) ;
23944: LD_ADDR_VAR 0 2
23948: PUSH
23949: LD_INT 22
23951: PUSH
23952: LD_EXP 3
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 21
23963: PUSH
23964: LD_INT 2
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PPUSH
23975: CALL_OW 69
23979: ST_TO_ADDR
// total_sr = total_sr + 0 + tmp ;
23980: LD_ADDR_EXP 215
23984: PUSH
23985: LD_EXP 215
23989: PUSH
23990: LD_INT 0
23992: PLUS
23993: PUSH
23994: LD_VAR 0 1
23998: PLUS
23999: ST_TO_ADDR
// if isok ( alware00 ) and ( getside ( alware00 ) = al ) then
24000: LD_INT 25
24002: PPUSH
24003: CALL_OW 302
24007: PUSH
24008: LD_INT 25
24010: PPUSH
24011: CALL_OW 255
24015: PUSH
24016: LD_EXP 3
24020: EQUAL
24021: AND
24022: IFFALSE 24043
// setsidebase ( getbase ( alware00 ) , sr ) else
24024: LD_INT 25
24026: PPUSH
24027: CALL_OW 274
24031: PPUSH
24032: LD_EXP 5
24036: PPUSH
24037: CALL_OW 236
24041: GO 24083
// setside ( filterallunits ( [ [ f_side , al ] , [ f_type , unit_building ] ] ) , sr ) ;
24043: LD_INT 22
24045: PUSH
24046: LD_EXP 3
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 21
24057: PUSH
24058: LD_INT 3
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 69
24073: PPUSH
24074: LD_EXP 5
24078: PPUSH
24079: CALL_OW 235
// setside ( tmp , sr ) ;
24083: LD_VAR 0 1
24087: PPUSH
24088: LD_EXP 5
24092: PPUSH
24093: CALL_OW 235
// setside ( tmp1 , sr ) ;
24097: LD_VAR 0 2
24101: PPUSH
24102: LD_EXP 5
24106: PPUSH
24107: CALL_OW 235
// tmp = unitfilter ( tmp , [ [ f_ok ] ] ) ;
24111: LD_ADDR_VAR 0 1
24115: PUSH
24116: LD_VAR 0 1
24120: PPUSH
24121: LD_INT 50
24123: PUSH
24124: EMPTY
24125: LIST
24126: PUSH
24127: EMPTY
24128: LIST
24129: PPUSH
24130: CALL_OW 72
24134: ST_TO_ADDR
// tmp3 = [ ] ;
24135: LD_ADDR_VAR 0 4
24139: PUSH
24140: EMPTY
24141: ST_TO_ADDR
// tmp4 = [ ] ;
24142: LD_ADDR_VAR 0 5
24146: PUSH
24147: EMPTY
24148: ST_TO_ADDR
// tmp1 = [ ] ;
24149: LD_ADDR_VAR 0 2
24153: PUSH
24154: EMPTY
24155: ST_TO_ADDR
// for tmp2 in tmp do
24156: LD_ADDR_VAR 0 3
24160: PUSH
24161: LD_VAR 0 1
24165: PUSH
24166: FOR_IN
24167: IFFALSE 24272
// if gettype ( isinunit ( tmp2 ) ) = unit_vehicle then
24169: LD_VAR 0 3
24173: PPUSH
24174: CALL_OW 310
24178: PPUSH
24179: CALL_OW 247
24183: PUSH
24184: LD_INT 2
24186: EQUAL
24187: IFFALSE 24251
// if not isinarea ( isinunit ( tmp2 ) , albase ) then
24189: LD_VAR 0 3
24193: PPUSH
24194: CALL_OW 310
24198: PPUSH
24199: LD_INT 12
24201: PPUSH
24202: CALL_OW 308
24206: NOT
24207: IFFALSE 24230
// tmp3 = tmp3 ^ [ tmp2 ] else
24209: LD_ADDR_VAR 0 4
24213: PUSH
24214: LD_VAR 0 4
24218: PUSH
24219: LD_VAR 0 3
24223: PUSH
24224: EMPTY
24225: LIST
24226: ADD
24227: ST_TO_ADDR
24228: GO 24249
// tmp4 = tmp4 ^ [ tmp2 ] else
24230: LD_ADDR_VAR 0 5
24234: PUSH
24235: LD_VAR 0 5
24239: PUSH
24240: LD_VAR 0 3
24244: PUSH
24245: EMPTY
24246: LIST
24247: ADD
24248: ST_TO_ADDR
24249: GO 24270
// tmp1 = tmp1 ^ [ tmp2 ] ;
24251: LD_ADDR_VAR 0 2
24255: PUSH
24256: LD_VAR 0 2
24260: PUSH
24261: LD_VAR 0 3
24265: PUSH
24266: EMPTY
24267: LIST
24268: ADD
24269: ST_TO_ADDR
24270: GO 24166
24272: POP
24273: POP
// comwait ( tmp4 , 17 ) ;
24274: LD_VAR 0 5
24278: PPUSH
24279: LD_INT 17
24281: PPUSH
24282: CALL_OW 142
// addcomexitvehicle ( tmp4 ) ;
24286: LD_VAR 0 5
24290: PPUSH
24291: CALL_OW 181
// addcommovetoarea ( tmp4 , alexitar ) ;
24295: LD_VAR 0 5
24299: PPUSH
24300: LD_INT 16
24302: PPUSH
24303: CALL_OW 173
// commovetoarea ( tmp3 , almeetar ) ;
24307: LD_VAR 0 4
24311: PPUSH
24312: LD_INT 17
24314: PPUSH
24315: CALL_OW 113
// addcomexitvehicle ( tmp3 ) ;
24319: LD_VAR 0 4
24323: PPUSH
24324: CALL_OW 181
// addcommovetoarea ( tmp3 , alexitar ) ;
24328: LD_VAR 0 4
24332: PPUSH
24333: LD_INT 16
24335: PPUSH
24336: CALL_OW 173
// commovetoarea ( tmp1 , alexitar ) ;
24340: LD_VAR 0 2
24344: PPUSH
24345: LD_INT 16
24347: PPUSH
24348: CALL_OW 113
// all_odch_al_lidi = tmp1 ^ tmp3 ^ tmp4 ;
24352: LD_ADDR_LOC 46
24356: PUSH
24357: LD_VAR 0 2
24361: PUSH
24362: LD_VAR 0 4
24366: ADD
24367: PUSH
24368: LD_VAR 0 5
24372: ADD
24373: ST_TO_ADDR
// enable ( 03 ) ;
24374: LD_INT 3
24376: ENABLE_MARKED
// end ;
24377: PPOPN 5
24379: END
// function odch_al_lidi ; begin
24380: LD_INT 0
24382: PPUSH
// odch_al_lidi_ = filterunitsinarea ( alexitar , [ [ f_type , unit_human ] , [ f_side , sr ] ] ) ;
24383: LD_ADDR_LOC 47
24387: PUSH
24388: LD_INT 16
24390: PPUSH
24391: LD_INT 21
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 22
24403: PUSH
24404: LD_EXP 5
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PPUSH
24417: CALL_OW 70
24421: ST_TO_ADDR
// result = 0 + odch_al_lidi_ ;
24422: LD_ADDR_VAR 0 1
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: LD_LOC 47
24434: PLUS
24435: ST_TO_ADDR
// end ;
24436: LD_VAR 0 1
24440: RET
// var odch_al_lidi_ ; every 0 0$2 + 3 trigger odch_al_lidi marked 03 do var tmp ;
24441: CALL 24380 0 0
24445: IFFALSE 24502
24447: GO 24449
24449: DISABLE
24450: LD_INT 0
24452: PPUSH
// begin all_odch_al_lidi = all_odch_al_lidi diff odch_al_lidi_ ;
24453: LD_ADDR_LOC 46
24457: PUSH
24458: LD_LOC 46
24462: PUSH
24463: LD_LOC 47
24467: DIFF
24468: ST_TO_ADDR
// for tmp in odch_al_lidi_ do
24469: LD_ADDR_VAR 0 1
24473: PUSH
24474: LD_LOC 47
24478: PUSH
24479: FOR_IN
24480: IFFALSE 24493
// destroyunit ( tmp ) ;
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 65
24491: GO 24479
24493: POP
24494: POP
// if all_odch_al_lidi then
24495: LD_LOC 46
24499: IFFALSE 24502
// enable ;
24501: ENABLE
// end ;
24502: PPOPN 1
24504: END
// var all_odch_am_lidi ; every 0 0$3 + 7 trigger surrender ( americani , am ) do var tmp , tmp2 , tmp3 , tmp1 , tmp4 ;
24505: LD_EXP 230
24509: PPUSH
24510: LD_EXP 2
24514: PPUSH
24515: CALL 23654 0 2
24519: IFFALSE 25138
24521: GO 24523
24523: DISABLE
24524: LD_INT 0
24526: PPUSH
24527: PPUSH
24528: PPUSH
24529: PPUSH
24530: PPUSH
// begin am_surr = true ;
24531: LD_ADDR_EXP 221
24535: PUSH
24536: LD_INT 1
24538: ST_TO_ADDR
// tmp = filterallunits ( [ [ f_side , am ] , [ f_sex , sex_male ] ] ) ;
24539: LD_ADDR_VAR 0 1
24543: PUSH
24544: LD_INT 22
24546: PUSH
24547: LD_EXP 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 26
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PPUSH
24570: CALL_OW 69
24574: ST_TO_ADDR
// dialogueon ;
24575: CALL_OW 6
// if isok ( powel ) then
24579: LD_EXP 236
24583: PPUSH
24584: CALL_OW 302
24588: IFFALSE 24636
// begin if hodiliju then
24590: LD_EXP 246
24594: IFFALSE 24610
// say ( powel , DSurrenderAmericans-Pow-1 ) else
24596: LD_EXP 236
24600: PPUSH
24601: LD_STRING DSurrenderAmericans-Pow-1
24603: PPUSH
24604: CALL_OW 88
24608: GO 24622
// say ( powel , DSurrenderAmericans-Pow-1a ) ;
24610: LD_EXP 236
24614: PPUSH
24615: LD_STRING DSurrenderAmericans-Pow-1a
24617: PPUSH
24618: CALL_OW 88
// say ( powel , DSurrenderAmericans-Pow-1b ) ;
24622: LD_EXP 236
24626: PPUSH
24627: LD_STRING DSurrenderAmericans-Pow-1b
24629: PPUSH
24630: CALL_OW 88
// end else
24634: GO 24658
// if tmp then
24636: LD_VAR 0 1
24640: IFFALSE 24658
// forcesay ( tmp [ 1 ] , DSurrenderAmericans-Sol1-1 ) ;
24642: LD_VAR 0 1
24646: PUSH
24647: LD_INT 1
24649: ARRAY
24650: PPUSH
24651: LD_STRING DSurrenderAmericans-Sol1-1
24653: PPUSH
24654: CALL_OW 91
// dialogueoff ;
24658: CALL_OW 7
// changemissionobjectives ( MDev ) ;
24662: LD_STRING MDev
24664: PPUSH
24665: CALL_OW 337
// tmp = filterallunits ( [ [ f_side , am ] , [ f_type , unit_human ] ] ) ;
24669: LD_ADDR_VAR 0 1
24673: PUSH
24674: LD_INT 22
24676: PUSH
24677: LD_EXP 2
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 21
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PPUSH
24700: CALL_OW 69
24704: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , am ] , [ f_type , unit_vehicle ] ] ) ;
24705: LD_ADDR_VAR 0 4
24709: PUSH
24710: LD_INT 22
24712: PUSH
24713: LD_EXP 2
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 21
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PPUSH
24736: CALL_OW 69
24740: ST_TO_ADDR
// total_sr = total_sr + 0 + tmp ;
24741: LD_ADDR_EXP 215
24745: PUSH
24746: LD_EXP 215
24750: PUSH
24751: LD_INT 0
24753: PLUS
24754: PUSH
24755: LD_VAR 0 1
24759: PLUS
24760: ST_TO_ADDR
// if isok ( amware00 ) and ( getside ( amware00 ) = am ) then
24761: LD_INT 5
24763: PPUSH
24764: CALL_OW 302
24768: PUSH
24769: LD_INT 5
24771: PPUSH
24772: CALL_OW 255
24776: PUSH
24777: LD_EXP 2
24781: EQUAL
24782: AND
24783: IFFALSE 24804
// setsidebase ( getbase ( amware00 ) , sr ) else
24785: LD_INT 5
24787: PPUSH
24788: CALL_OW 274
24792: PPUSH
24793: LD_EXP 5
24797: PPUSH
24798: CALL_OW 236
24802: GO 24844
// setside ( filterallunits ( [ [ f_side , am ] , [ f_type , unit_building ] ] ) , sr ) ;
24804: LD_INT 22
24806: PUSH
24807: LD_EXP 2
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 21
24818: PUSH
24819: LD_INT 3
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PPUSH
24830: CALL_OW 69
24834: PPUSH
24835: LD_EXP 5
24839: PPUSH
24840: CALL_OW 235
// setside ( tmp , sr ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_EXP 5
24853: PPUSH
24854: CALL_OW 235
// setside ( tmp1 , sr ) ;
24858: LD_VAR 0 4
24862: PPUSH
24863: LD_EXP 5
24867: PPUSH
24868: CALL_OW 235
// tmp = unitfilter ( tmp , [ [ f_ok ] ] ) ;
24872: LD_ADDR_VAR 0 1
24876: PUSH
24877: LD_VAR 0 1
24881: PPUSH
24882: LD_INT 50
24884: PUSH
24885: EMPTY
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: PPUSH
24891: CALL_OW 72
24895: ST_TO_ADDR
// tmp3 = [ ] ;
24896: LD_ADDR_VAR 0 3
24900: PUSH
24901: EMPTY
24902: ST_TO_ADDR
// tmp4 = [ ] ;
24903: LD_ADDR_VAR 0 5
24907: PUSH
24908: EMPTY
24909: ST_TO_ADDR
// tmp1 = [ ] ;
24910: LD_ADDR_VAR 0 4
24914: PUSH
24915: EMPTY
24916: ST_TO_ADDR
// for tmp2 in tmp do
24917: LD_ADDR_VAR 0 2
24921: PUSH
24922: LD_VAR 0 1
24926: PUSH
24927: FOR_IN
24928: IFFALSE 25033
// if gettype ( isinunit ( tmp2 ) ) = unit_vehicle then
24930: LD_VAR 0 2
24934: PPUSH
24935: CALL_OW 310
24939: PPUSH
24940: CALL_OW 247
24944: PUSH
24945: LD_INT 2
24947: EQUAL
24948: IFFALSE 25012
// if not isinarea ( isinunit ( tmp2 ) , ambase ) then
24950: LD_VAR 0 2
24954: PPUSH
24955: CALL_OW 310
24959: PPUSH
24960: LD_INT 11
24962: PPUSH
24963: CALL_OW 308
24967: NOT
24968: IFFALSE 24991
// tmp3 = tmp3 ^ [ tmp2 ] else
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: LD_VAR 0 3
24979: PUSH
24980: LD_VAR 0 2
24984: PUSH
24985: EMPTY
24986: LIST
24987: ADD
24988: ST_TO_ADDR
24989: GO 25010
// tmp4 = tmp4 ^ [ tmp2 ] else
24991: LD_ADDR_VAR 0 5
24995: PUSH
24996: LD_VAR 0 5
25000: PUSH
25001: LD_VAR 0 2
25005: PUSH
25006: EMPTY
25007: LIST
25008: ADD
25009: ST_TO_ADDR
25010: GO 25031
// tmp1 = tmp1 ^ [ tmp2 ] ;
25012: LD_ADDR_VAR 0 4
25016: PUSH
25017: LD_VAR 0 4
25021: PUSH
25022: LD_VAR 0 2
25026: PUSH
25027: EMPTY
25028: LIST
25029: ADD
25030: ST_TO_ADDR
25031: GO 24927
25033: POP
25034: POP
// comwait ( tmp4 , 17 ) ;
25035: LD_VAR 0 5
25039: PPUSH
25040: LD_INT 17
25042: PPUSH
25043: CALL_OW 142
// addcomexitvehicle ( tmp4 ) ;
25047: LD_VAR 0 5
25051: PPUSH
25052: CALL_OW 181
// addcommovetoarea ( tmp4 , amexitar ) ;
25056: LD_VAR 0 5
25060: PPUSH
25061: LD_INT 14
25063: PPUSH
25064: CALL_OW 173
// commovetoarea ( tmp3 , ammeetar ) ;
25068: LD_VAR 0 3
25072: PPUSH
25073: LD_INT 15
25075: PPUSH
25076: CALL_OW 113
// addcomexitvehicle ( tmp3 ) ;
25080: LD_VAR 0 3
25084: PPUSH
25085: CALL_OW 181
// addcommovetoarea ( tmp3 , amexitar ) ;
25089: LD_VAR 0 3
25093: PPUSH
25094: LD_INT 14
25096: PPUSH
25097: CALL_OW 173
// commovetoarea ( tmp1 , amexitar ) ;
25101: LD_VAR 0 4
25105: PPUSH
25106: LD_INT 14
25108: PPUSH
25109: CALL_OW 113
// all_odch_am_lidi = tmp1 ^ tmp3 ^ tmp4 ;
25113: LD_ADDR_LOC 48
25117: PUSH
25118: LD_VAR 0 4
25122: PUSH
25123: LD_VAR 0 3
25127: ADD
25128: PUSH
25129: LD_VAR 0 5
25133: ADD
25134: ST_TO_ADDR
// enable ( 02 ) ;
25135: LD_INT 2
25137: ENABLE_MARKED
// end ;
25138: PPOPN 5
25140: END
// function odch_am_lidi ; begin
25141: LD_INT 0
25143: PPUSH
// odch_am_lidi_ = filterunitsinarea ( amexitar , [ [ f_type , unit_human ] , [ f_side , sr ] ] ) ;
25144: LD_ADDR_LOC 49
25148: PUSH
25149: LD_INT 14
25151: PPUSH
25152: LD_INT 21
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 22
25164: PUSH
25165: LD_EXP 5
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PPUSH
25178: CALL_OW 70
25182: ST_TO_ADDR
// result = 0 + odch_am_lidi_ ;
25183: LD_ADDR_VAR 0 1
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: LD_LOC 49
25195: PLUS
25196: ST_TO_ADDR
// end ;
25197: LD_VAR 0 1
25201: RET
// var odch_am_lidi_ ; every 0 0$2 + 3 trigger odch_am_lidi marked 02 do var tmp ;
25202: CALL 25141 0 0
25206: IFFALSE 25263
25208: GO 25210
25210: DISABLE
25211: LD_INT 0
25213: PPUSH
// begin all_odch_am_lidi = all_odch_am_lidi diff odch_am_lidi_ ;
25214: LD_ADDR_LOC 48
25218: PUSH
25219: LD_LOC 48
25223: PUSH
25224: LD_LOC 49
25228: DIFF
25229: ST_TO_ADDR
// for tmp in odch_am_lidi_ do
25230: LD_ADDR_VAR 0 1
25234: PUSH
25235: LD_LOC 49
25239: PUSH
25240: FOR_IN
25241: IFFALSE 25254
// destroyunit ( tmp ) ;
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL_OW 65
25252: GO 25240
25254: POP
25255: POP
// if all_odch_am_lidi then
25256: LD_LOC 48
25260: IFFALSE 25263
// enable ;
25262: ENABLE
// end ;
25263: PPOPN 1
25265: END
// export lesurr ; every 0 0$3 + 11 trigger surrender ( legionari , le ) do var tmp ;
25266: LD_EXP 226
25270: PPUSH
25271: LD_EXP 4
25275: PPUSH
25276: CALL 23654 0 2
25280: IFFALSE 25438
25282: GO 25284
25284: DISABLE
25285: LD_INT 0
25287: PPUSH
// begin if not lesurr then
25288: LD_EXP 248
25292: NOT
25293: IFFALSE 25438
// begin tmp = filterallunits ( [ [ f_side , le ] , [ f_sex , sex_male ] ] ) ;
25295: LD_ADDR_VAR 0 1
25299: PUSH
25300: LD_INT 22
25302: PUSH
25303: LD_EXP 4
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 26
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PPUSH
25326: CALL_OW 69
25330: ST_TO_ADDR
// dialogueon ;
25331: CALL_OW 6
// if isok ( heike ) then
25335: LD_EXP 237
25339: PPUSH
25340: CALL_OW 302
25344: IFFALSE 25360
// say ( heike , DSurrenderLegion-Hke-1 ) else
25346: LD_EXP 237
25350: PPUSH
25351: LD_STRING DSurrenderLegion-Hke-1
25353: PPUSH
25354: CALL_OW 88
25358: GO 25407
// if isok ( farmer ) then
25360: LD_EXP 238
25364: PPUSH
25365: CALL_OW 302
25369: IFFALSE 25385
// say ( farmer , DSurrenderLegion-Frm-1 ) else
25371: LD_EXP 238
25375: PPUSH
25376: LD_STRING DSurrenderLegion-Frm-1
25378: PPUSH
25379: CALL_OW 88
25383: GO 25407
// if tmp then
25385: LD_VAR 0 1
25389: IFFALSE 25407
// forcesay ( tmp [ 1 ] , DSurrenderLegion-Merc1-1 ) ;
25391: LD_VAR 0 1
25395: PUSH
25396: LD_INT 1
25398: ARRAY
25399: PPUSH
25400: LD_STRING DSurrenderLegion-Merc1-1
25402: PPUSH
25403: CALL_OW 91
// dialogueoff ;
25407: CALL_OW 7
// lesurr = true ;
25411: LD_ADDR_EXP 248
25415: PUSH
25416: LD_INT 1
25418: ST_TO_ADDR
// if not rusacimajisib then
25419: LD_EXP 242
25423: NOT
25424: IFFALSE 25434
// legionmed = true ;
25426: LD_ADDR_EXP 247
25430: PUSH
25431: LD_INT 1
25433: ST_TO_ADDR
// legiontobali ;
25434: CALL 22775 0 0
// end ; end ;
25438: PPOPN 1
25440: END
// on unitdestroyed ( un ) do if un = burlak then
25441: LD_VAR 0 1
25445: PUSH
25446: LD_EXP 233
25450: EQUAL
25451: IFFALSE 25460
// youlost ( Burlak ) ;
25453: LD_STRING Burlak
25455: PPUSH
25456: CALL_OW 104
25460: PPOPN 1
25462: END
// every 0 0$3.2 trigger not filterallunits ( [ f_or , [ f_side , am ] , [ f_side , al ] , [ f_side , le ] ] ) do var tmp ;
25463: LD_INT 2
25465: PUSH
25466: LD_INT 22
25468: PUSH
25469: LD_EXP 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 22
25480: PUSH
25481: LD_EXP 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 22
25492: PUSH
25493: LD_EXP 4
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: NOT
25513: IFFALSE 26672
25515: GO 25517
25517: DISABLE
25518: LD_INT 0
25520: PPUSH
// begin dialogueon ;
25521: CALL_OW 6
// if isok ( burlak ) then
25525: LD_EXP 233
25529: PPUSH
25530: CALL_OW 302
25534: IFFALSE 25548
// say ( burlak , DEnd-Bur-1 ) ;
25536: LD_EXP 233
25540: PPUSH
25541: LD_STRING DEnd-Bur-1
25543: PPUSH
25544: CALL_OW 88
// if isok ( petrosyan ) then
25548: LD_LOC 30
25552: PPUSH
25553: CALL_OW 302
25557: IFFALSE 25571
// say ( petrosyan , DEnd-Pty-1 ) ;
25559: LD_LOC 30
25563: PPUSH
25564: LD_STRING DEnd-Pty-1
25566: PPUSH
25567: CALL_OW 88
// if isok ( belkov ) then
25571: LD_LOC 24
25575: PPUSH
25576: CALL_OW 302
25580: IFFALSE 25594
// say ( belkov , DEnd-Bel-1 ) ;
25582: LD_LOC 24
25586: PPUSH
25587: LD_STRING DEnd-Bel-1
25589: PPUSH
25590: CALL_OW 88
// if isok ( kiril ) then
25594: LD_LOC 28
25598: PPUSH
25599: CALL_OW 302
25603: IFFALSE 25617
// say ( kiril , DEnd-Kir-1 ) ;
25605: LD_LOC 28
25609: PPUSH
25610: LD_STRING DEnd-Kir-1
25612: PPUSH
25613: CALL_OW 88
// if isok ( gnyevko ) then
25617: LD_LOC 26
25621: PPUSH
25622: CALL_OW 302
25626: IFFALSE 25640
// say ( gnyevko , DEnd-Gny-1 ) ;
25628: LD_LOC 26
25632: PPUSH
25633: LD_STRING DEnd-Gny-1
25635: PPUSH
25636: CALL_OW 88
// if isok ( gladkov ) then
25640: LD_LOC 40
25644: PPUSH
25645: CALL_OW 302
25649: IFFALSE 25663
// say ( gladkov , DEnd-Gla-1 ) ;
25651: LD_LOC 40
25655: PPUSH
25656: LD_STRING DEnd-Gla-1
25658: PPUSH
25659: CALL_OW 88
// if isok ( dolgov ) then
25663: LD_LOC 32
25667: PPUSH
25668: CALL_OW 302
25672: IFFALSE 25686
// say ( dolgov , DEnd-Dol-1 ) ;
25674: LD_LOC 32
25678: PPUSH
25679: LD_STRING DEnd-Dol-1
25681: PPUSH
25682: CALL_OW 88
// if isok ( kapitsova ) then
25686: LD_LOC 29
25690: PPUSH
25691: CALL_OW 302
25695: IFFALSE 25709
// say ( kapitsova , DEnd-Kap-1 ) ;
25697: LD_LOC 29
25701: PPUSH
25702: LD_STRING DEnd-Kap-1
25704: PPUSH
25705: CALL_OW 88
// if isok ( gleb ) then
25709: LD_LOC 36
25713: PPUSH
25714: CALL_OW 302
25718: IFFALSE 25732
// say ( gleb , DEnd-Glb-1 ) ;
25720: LD_LOC 36
25724: PPUSH
25725: LD_STRING DEnd-Glb-1
25727: PPUSH
25728: CALL_OW 88
// if isok ( kuzmov ) then
25732: LD_LOC 25
25736: PPUSH
25737: CALL_OW 302
25741: IFFALSE 25755
// say ( kuzmov , DEnd-Kuz-1 ) ;
25743: LD_LOC 25
25747: PPUSH
25748: LD_STRING DEnd-Kuz-1
25750: PPUSH
25751: CALL_OW 88
// if isok ( kovalyuk ) then
25755: LD_LOC 33
25759: PPUSH
25760: CALL_OW 302
25764: IFFALSE 25778
// say ( kovalyuk , DEnd-Kov-1 ) ;
25766: LD_LOC 33
25770: PPUSH
25771: LD_STRING DEnd-Kov-1
25773: PPUSH
25774: CALL_OW 88
// if isok ( scholtze ) then
25778: LD_LOC 31
25782: PPUSH
25783: CALL_OW 302
25787: IFFALSE 25801
// say ( scholtze , DEnd-Sch-1 ) ;
25789: LD_LOC 31
25793: PPUSH
25794: LD_STRING DEnd-Sch-1
25796: PPUSH
25797: CALL_OW 88
// if isok ( karamazov ) then
25801: LD_LOC 34
25805: PPUSH
25806: CALL_OW 302
25810: IFFALSE 25824
// say ( karamazov , DEnd-Kar-1 ) ;
25812: LD_LOC 34
25816: PPUSH
25817: LD_STRING DEnd-Kar-1
25819: PPUSH
25820: CALL_OW 88
// if isok ( titov ) then
25824: LD_LOC 23
25828: PPUSH
25829: CALL_OW 302
25833: IFFALSE 25847
// say ( titov , DEnd-Tit-1 ) ;
25835: LD_LOC 23
25839: PPUSH
25840: LD_STRING DEnd-Tit-1
25842: PPUSH
25843: CALL_OW 88
// if isok ( oblukov ) then
25847: LD_LOC 42
25851: PPUSH
25852: CALL_OW 302
25856: IFFALSE 25870
// say ( oblukov , DEnd-Obl-1 ) ;
25858: LD_LOC 42
25862: PPUSH
25863: LD_STRING DEnd-Obl-1
25865: PPUSH
25866: CALL_OW 88
// if isok ( kozlov ) then
25870: LD_LOC 27
25874: PPUSH
25875: CALL_OW 302
25879: IFFALSE 25893
// say ( kozlov , DEnd-Koz-1 ) ;
25881: LD_LOC 27
25885: PPUSH
25886: LD_STRING DEnd-Koz-1
25888: PPUSH
25889: CALL_OW 88
// if isok ( petrovova ) then
25893: LD_LOC 35
25897: PPUSH
25898: CALL_OW 302
25902: IFFALSE 25916
// say ( petrovova , DEnd-Ptr-1 ) ;
25904: LD_LOC 35
25908: PPUSH
25909: LD_STRING DEnd-Ptr-1
25911: PPUSH
25912: CALL_OW 88
// if isok ( bystrov ) then
25916: LD_LOC 41
25920: PPUSH
25921: CALL_OW 302
25925: IFFALSE 25939
// say ( bystrov , DEnd-Bys-1 ) ;
25927: LD_LOC 41
25931: PPUSH
25932: LD_STRING DEnd-Bys-1
25934: PPUSH
25935: CALL_OW 88
// if isok ( lipshchin ) then
25939: LD_LOC 37
25943: PPUSH
25944: CALL_OW 302
25948: IFFALSE 25962
// say ( lipshchin , DEnd-Lip-1 ) ;
25950: LD_LOC 37
25954: PPUSH
25955: LD_STRING DEnd-Lip-1
25957: PPUSH
25958: CALL_OW 88
// if isok ( fadeev ) then
25962: LD_LOC 39
25966: PPUSH
25967: CALL_OW 302
25971: IFFALSE 25985
// say ( fadeev , DEnd-Fad-1 ) ;
25973: LD_LOC 39
25977: PPUSH
25978: LD_STRING DEnd-Fad-1
25980: PPUSH
25981: CALL_OW 88
// dialogueoff ;
25985: CALL_OW 7
// addmedal ( Hero , 1 ) ;
25989: LD_STRING Hero
25991: PPUSH
25992: LD_INT 1
25994: PPUSH
25995: CALL_OW 101
// tmp = unitfilter ( lidi ^ ostatni , [ [ f_side , ru ] , [ f_alive ] ] ) ;
25999: LD_ADDR_VAR 0 1
26003: PUSH
26004: LD_LOC 19
26008: PUSH
26009: LD_LOC 20
26013: ADD
26014: PPUSH
26015: LD_INT 22
26017: PUSH
26018: LD_EXP 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 51
26029: PUSH
26030: EMPTY
26031: LIST
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PPUSH
26037: CALL_OW 72
26041: ST_TO_ADDR
// if ( 0 + tmp ) = 20 then
26042: LD_INT 0
26044: PUSH
26045: LD_VAR 0 1
26049: PLUS
26050: PUSH
26051: LD_INT 20
26053: EQUAL
26054: IFFALSE 26068
// addmedal ( NoLosses , 1 ) else
26056: LD_STRING NoLosses
26058: PPUSH
26059: LD_INT 1
26061: PPUSH
26062: CALL_OW 101
26066: GO 26079
// addmedal ( NoLosses , - 1 ) ;
26068: LD_STRING NoLosses
26070: PPUSH
26071: LD_INT 1
26073: NEG
26074: PPUSH
26075: CALL_OW 101
// if legionmed then
26079: LD_EXP 247
26083: IFFALSE 26097
// addmedal ( Legion , 1 ) else
26085: LD_STRING Legion
26087: PPUSH
26088: LD_INT 1
26090: PPUSH
26091: CALL_OW 101
26095: GO 26108
// addmedal ( Legion , - 1 ) ;
26097: LD_STRING Legion
26099: PPUSH
26100: LD_INT 1
26102: NEG
26103: PPUSH
26104: CALL_OW 101
// SA_OnMissionComplete ;
26108: CALL 26877 0 0
// givemedals ( Main ) ;
26112: LD_STRING Main
26114: PPUSH
26115: CALL_OW 102
// savecharacters ( burlak , Burlak ) ;
26119: LD_EXP 233
26123: PPUSH
26124: LD_STRING Burlak
26126: PPUSH
26127: CALL_OW 38
// if titov then
26131: LD_LOC 23
26135: IFFALSE 26149
// savecharacters ( titov , Titov ) ;
26137: LD_LOC 23
26141: PPUSH
26142: LD_STRING Titov
26144: PPUSH
26145: CALL_OW 38
// if belkov then
26149: LD_LOC 24
26153: IFFALSE 26167
// savecharacters ( belkov , Belkov ) ;
26155: LD_LOC 24
26159: PPUSH
26160: LD_STRING Belkov
26162: PPUSH
26163: CALL_OW 38
// if kuzmov then
26167: LD_LOC 25
26171: IFFALSE 26185
// savecharacters ( kuzmov , Kuzmov ) ;
26173: LD_LOC 25
26177: PPUSH
26178: LD_STRING Kuzmov
26180: PPUSH
26181: CALL_OW 38
// if gnyevko then
26185: LD_LOC 26
26189: IFFALSE 26203
// savecharacters ( gnyevko , Gnyevko ) ;
26191: LD_LOC 26
26195: PPUSH
26196: LD_STRING Gnyevko
26198: PPUSH
26199: CALL_OW 38
// if kozlov then
26203: LD_LOC 27
26207: IFFALSE 26221
// savecharacters ( kozlov , Kozlov ) ;
26209: LD_LOC 27
26213: PPUSH
26214: LD_STRING Kozlov
26216: PPUSH
26217: CALL_OW 38
// if kiril then
26221: LD_LOC 28
26225: IFFALSE 26239
// savecharacters ( kiril , Kirilenkova ) ;
26227: LD_LOC 28
26231: PPUSH
26232: LD_STRING Kirilenkova
26234: PPUSH
26235: CALL_OW 38
// if kapitsova then
26239: LD_LOC 29
26243: IFFALSE 26257
// savecharacters ( kapitsova , Kapitsova ) ;
26245: LD_LOC 29
26249: PPUSH
26250: LD_STRING Kapitsova
26252: PPUSH
26253: CALL_OW 38
// if petrosyan then
26257: LD_LOC 30
26261: IFFALSE 26275
// savecharacters ( petrosyan , Petrosyan ) ;
26263: LD_LOC 30
26267: PPUSH
26268: LD_STRING Petrosyan
26270: PPUSH
26271: CALL_OW 38
// if scholtze then
26275: LD_LOC 31
26279: IFFALSE 26293
// savecharacters ( scholtze , Scholtze ) ;
26281: LD_LOC 31
26285: PPUSH
26286: LD_STRING Scholtze
26288: PPUSH
26289: CALL_OW 38
// if dolgov then
26293: LD_LOC 32
26297: IFFALSE 26311
// savecharacters ( dolgov , Dolgov ) ;
26299: LD_LOC 32
26303: PPUSH
26304: LD_STRING Dolgov
26306: PPUSH
26307: CALL_OW 38
// if kovalyuk then
26311: LD_LOC 33
26315: IFFALSE 26329
// savecharacters ( kovalyuk , Kovalyuk ) ;
26317: LD_LOC 33
26321: PPUSH
26322: LD_STRING Kovalyuk
26324: PPUSH
26325: CALL_OW 38
// if karamazov then
26329: LD_LOC 34
26333: IFFALSE 26347
// savecharacters ( karamazov , Karamazov ) ;
26335: LD_LOC 34
26339: PPUSH
26340: LD_STRING Karamazov
26342: PPUSH
26343: CALL_OW 38
// if petrovova then
26347: LD_LOC 35
26351: IFFALSE 26365
// savecharacters ( petrovova , Petrovova ) ;
26353: LD_LOC 35
26357: PPUSH
26358: LD_STRING Petrovova
26360: PPUSH
26361: CALL_OW 38
// if gleb then
26365: LD_LOC 36
26369: IFFALSE 26383
// savecharacters ( gleb , Gleb ) ;
26371: LD_LOC 36
26375: PPUSH
26376: LD_STRING Gleb
26378: PPUSH
26379: CALL_OW 38
// if lipshchin then
26383: LD_LOC 37
26387: IFFALSE 26401
// savecharacters ( lipshchin , Lipshchin ) ;
26389: LD_LOC 37
26393: PPUSH
26394: LD_STRING Lipshchin
26396: PPUSH
26397: CALL_OW 38
// if xavier then
26401: LD_LOC 38
26405: IFFALSE 26419
// savecharacters ( xavier , Xavier ) ;
26407: LD_LOC 38
26411: PPUSH
26412: LD_STRING Xavier
26414: PPUSH
26415: CALL_OW 38
// if fadeev then
26419: LD_LOC 39
26423: IFFALSE 26437
// savecharacters ( fadeev , Fadeev ) ;
26425: LD_LOC 39
26429: PPUSH
26430: LD_STRING Fadeev
26432: PPUSH
26433: CALL_OW 38
// if gladkov then
26437: LD_LOC 40
26441: IFFALSE 26455
// savecharacters ( gladkov , Gladkov ) ;
26443: LD_LOC 40
26447: PPUSH
26448: LD_STRING Gladkov
26450: PPUSH
26451: CALL_OW 38
// if bystrov then
26455: LD_LOC 41
26459: IFFALSE 26473
// savecharacters ( bystrov , Bystrov ) ;
26461: LD_LOC 41
26465: PPUSH
26466: LD_STRING Bystrov
26468: PPUSH
26469: CALL_OW 38
// if oblukov then
26473: LD_LOC 42
26477: IFFALSE 26491
// savecharacters ( oblukov , Oblukov ) ;
26479: LD_LOC 42
26483: PPUSH
26484: LD_STRING Oblukov
26486: PPUSH
26487: CALL_OW 38
// tmp = filterallunits ( [ [ f_side , ru ] , [ f_type , unit_human ] ] ) diff [ burlak , titov , belkov , kuzmov , gnyevko , kozlov , kiril , kapitsova , petrosyan , scholtze , dolgov , kovalyuk , karamazov , petrovova , gleb , lipshchin , xavier , fadeev , gladkov , bystrov , oblukov ] ;
26491: LD_ADDR_VAR 0 1
26495: PUSH
26496: LD_INT 22
26498: PUSH
26499: LD_EXP 1
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 21
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PPUSH
26522: CALL_OW 69
26526: PUSH
26527: LD_EXP 233
26531: PUSH
26532: LD_LOC 23
26536: PUSH
26537: LD_LOC 24
26541: PUSH
26542: LD_LOC 25
26546: PUSH
26547: LD_LOC 26
26551: PUSH
26552: LD_LOC 27
26556: PUSH
26557: LD_LOC 28
26561: PUSH
26562: LD_LOC 29
26566: PUSH
26567: LD_LOC 30
26571: PUSH
26572: LD_LOC 31
26576: PUSH
26577: LD_LOC 32
26581: PUSH
26582: LD_LOC 33
26586: PUSH
26587: LD_LOC 34
26591: PUSH
26592: LD_LOC 35
26596: PUSH
26597: LD_LOC 36
26601: PUSH
26602: LD_LOC 37
26606: PUSH
26607: LD_LOC 38
26611: PUSH
26612: LD_LOC 39
26616: PUSH
26617: LD_LOC 40
26621: PUSH
26622: LD_LOC 41
26626: PUSH
26627: LD_LOC 42
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: DIFF
26655: ST_TO_ADDR
// savecharacters ( tmp , Ru15Winners ) ;
26656: LD_VAR 0 1
26660: PPUSH
26661: LD_STRING Ru15Winners
26663: PPUSH
26664: CALL_OW 38
// youwin ;
26668: CALL_OW 103
// end ; end_of_file
26672: PPOPN 1
26674: END
// every 0 0$2 + 0 0$0.1 do
26675: GO 26677
26677: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
26678: LD_INT 22
26680: PUSH
26681: LD_INT 3
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: LD_INT 25
26693: PUSH
26694: LD_INT 12
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 25
26703: PUSH
26704: LD_INT 16
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 25
26713: PUSH
26714: LD_INT 15
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 25
26723: PUSH
26724: LD_INT 17
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PPUSH
26742: CALL_OW 69
26746: PUSH
26747: LD_INT 22
26749: PUSH
26750: LD_INT 3
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 21
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 3
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: LD_INT 25
26775: PUSH
26776: LD_INT 12
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 25
26785: PUSH
26786: LD_INT 16
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 25
26795: PUSH
26796: LD_INT 15
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 25
26805: PUSH
26806: LD_INT 17
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 69
26833: GREATER
26834: IFFALSE 26845
// begin SetAchievement ( ACH_POTA ) ;
26836: LD_STRING ACH_POTA
26838: PPUSH
26839: CALL_OW 543
// exit ;
26843: GO 26846
// end ; enable ;
26845: ENABLE
// end ;
26846: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y ) ; begin
26847: LD_INT 0
26849: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = 3 then
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 255
26859: PUSH
26860: LD_INT 3
26862: EQUAL
26863: IFFALSE 26872
// SetAchievement ( ACH_RAD ) ;
26865: LD_STRING ACH_RAD
26867: PPUSH
26868: CALL_OW 543
// end ;
26872: LD_VAR 0 4
26876: RET
// export function SA_OnMissionComplete ; begin
26877: LD_INT 0
26879: PPUSH
// SetAchievement ( ACH_FMR ) ;
26880: LD_STRING ACH_FMR
26882: PPUSH
26883: CALL_OW 543
// end ;
26887: LD_VAR 0 1
26891: RET
