// var stReady , stRepair , stInCombat , stHelp , stNotReady , ImpatienceTreshold ; var vozKirov , vozKirovImpat , vozKirovState , vozKirovOut , vozHrace , mechKirov , mechKirovOut ; var targHrace , targAcquired ; every 0 0$1 marked 10 do var i ; var auta , autapom ; var poc ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// begin auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
   9: LD_ADDR_VAR 0 2
  13: PUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 21
  19: PUSH
  20: LD_INT 2
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: PUSH
  27: LD_INT 59
  29: PUSH
  30: EMPTY
  31: LIST
  32: PUSH
  33: EMPTY
  34: LIST
  35: LIST
  36: PPUSH
  37: CALL_OW 70
  41: ST_TO_ADDR
// for i in auta do
  42: LD_ADDR_VAR 0 1
  46: PUSH
  47: LD_VAR 0 2
  51: PUSH
  52: FOR_IN
  53: IFFALSE 132
// begin ComMoveToArea ( i , Zarea_utok ) ;
  55: LD_VAR 0 1
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: CALL_OW 113
// AddComAgressiveMove ( i , 28 , 15 ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: LD_INT 28
  74: PPUSH
  75: LD_INT 15
  77: PPUSH
  78: CALL_OW 174
// AddComAttackUnit ( i , Am_bu3 ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: LD_INT 19
  89: PPUSH
  90: CALL_OW 175
// AddComAgressiveMove ( i , 13 , 9 ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: LD_INT 13
 101: PPUSH
 102: LD_INT 9
 104: PPUSH
 105: CALL_OW 174
// RUSKE_POSILY_RIDICI_LIST = RUSKE_POSILY_RIDICI_LIST diff IsDrivenBy ( i ) ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_EXP 57
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 311
 128: DIFF
 129: ST_TO_ADDR
// end ;
 130: GO 52
 132: POP
 133: POP
// auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: PPUSH
 142: LD_INT 21
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 3
 154: PUSH
 155: LD_INT 59
 157: PUSH
 158: EMPTY
 159: LIST
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PPUSH
 166: CALL_OW 70
 170: ST_TO_ADDR
// poc = 1 ;
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 1
 178: ST_TO_ADDR
// for i in RUSKE_POSILY_RIDICI_LIST do
 179: LD_ADDR_VAR 0 1
 183: PUSH
 184: LD_EXP 57
 188: PUSH
 189: FOR_IN
 190: IFFALSE 244
// begin if auta + 0 >= poc then
 192: LD_VAR 0 2
 196: PUSH
 197: LD_INT 0
 199: PLUS
 200: PUSH
 201: LD_VAR 0 4
 205: GREATEREQUAL
 206: IFFALSE 228
// ComEnterUnit ( i , auta [ poc ] ) ;
 208: LD_VAR 0 1
 212: PPUSH
 213: LD_VAR 0 2
 217: PUSH
 218: LD_VAR 0 4
 222: ARRAY
 223: PPUSH
 224: CALL_OW 120
// poc = poc + 1 ;
 228: LD_ADDR_VAR 0 4
 232: PUSH
 233: LD_VAR 0 4
 237: PUSH
 238: LD_INT 1
 240: PLUS
 241: ST_TO_ADDR
// end ;
 242: GO 189
 244: POP
 245: POP
// if RUSKE_POSILY_RIDICI_LIST <> 0 then
 246: LD_EXP 57
 250: PUSH
 251: LD_INT 0
 253: NONEQUAL
 254: IFFALSE 257
// enable ;
 256: ENABLE
// end ;
 257: PPOPN 4
 259: END
// every 0 0$1 trigger setkani_om do
 260: LD_EXP 41
 264: IFFALSE 286
 266: GO 268
 268: DISABLE
// begin RepairVehicles ( 6 , Om_repair , 61 , 9 ) ;
 269: LD_INT 6
 271: PPUSH
 272: LD_INT 52
 274: PPUSH
 275: LD_INT 61
 277: PPUSH
 278: LD_INT 9
 280: PPUSH
 281: CALL 695 0 4
// enable ;
 285: ENABLE
// end ;
 286: END
// every 0 0$1 trigger setkani_om do
 287: LD_EXP 41
 291: IFFALSE 304
 293: GO 295
 295: DISABLE
// begin AttackVehicles ( 6 ) ;
 296: LD_INT 6
 298: PPUSH
 299: CALL 305 0 1
// enable ;
 303: ENABLE
// end ;
 304: END
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
 305: LD_INT 0
 307: PPUSH
 308: PPUSH
 309: PPUSH
 310: PPUSH
 311: PPUSH
 312: PPUSH
 313: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= 0 then
 314: LD_INT 22
 316: PUSH
 317: LD_VAR 0 1
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: PUSH
 326: LD_INT 21
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: LD_INT 24
 338: PUSH
 339: LD_INT 1000
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: PPUSH
 351: CALL_OW 69
 355: PUSH
 356: LD_INT 0
 358: GREATEREQUAL
 359: IFFALSE 690
// repeat wait ( 0 0$1 ) ;
 361: LD_INT 35
 363: PPUSH
 364: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_or , [ f_weapon , 42 ] , [ f_weapon , 43 ] , [ f_weapon , 44 ] ] ] ) ;
 368: LD_ADDR_VAR 0 5
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_VAR 0 1
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 21
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 24
 397: PUSH
 398: LD_INT 650
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 2
 407: PUSH
 408: LD_INT 34
 410: PUSH
 411: LD_INT 42
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 34
 420: PUSH
 421: LD_INT 43
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 34
 430: PUSH
 431: LD_INT 44
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: ST_TO_ADDR
// for j in vehiclesOK do
 455: LD_ADDR_VAR 0 4
 459: PUSH
 460: LD_VAR 0 5
 464: PUSH
 465: FOR_IN
 466: IFFALSE 641
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , j ) ;
 468: LD_ADDR_VAR 0 6
 472: PUSH
 473: LD_INT 22
 475: PUSH
 476: LD_INT 1
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: PUSH
 483: EMPTY
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PPUSH
 491: LD_VAR 0 4
 495: PPUSH
 496: CALL_OW 74
 500: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
 501: LD_ADDR_VAR 0 7
 505: PUSH
 506: LD_INT 22
 508: PUSH
 509: LD_INT 1
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 2
 518: PUSH
 519: LD_INT 59
 521: PUSH
 522: EMPTY
 523: LIST
 524: PUSH
 525: LD_INT 21
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 21
 537: PUSH
 538: LD_INT 2
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: EMPTY
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PPUSH
 563: LD_VAR 0 4
 567: PPUSH
 568: CALL_OW 74
 572: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
 573: LD_VAR 0 4
 577: PPUSH
 578: LD_VAR 0 6
 582: PPUSH
 583: CALL_OW 296
 587: PUSH
 588: LD_INT 8
 590: PLUS
 591: PUSH
 592: LD_VAR 0 4
 596: PPUSH
 597: LD_VAR 0 7
 601: PPUSH
 602: CALL_OW 296
 606: LESS
 607: IFFALSE 625
// ComAttackUnit ( j , target1 ) else
 609: LD_VAR 0 4
 613: PPUSH
 614: LD_VAR 0 6
 618: PPUSH
 619: CALL_OW 115
 623: GO 639
// ComAttackUnit ( j , target2 ) ;
 625: LD_VAR 0 4
 629: PPUSH
 630: LD_VAR 0 7
 634: PPUSH
 635: CALL_OW 115
// end ;
 639: GO 465
 641: POP
 642: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
 643: LD_INT 22
 645: PUSH
 646: LD_VAR 0 1
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 24
 667: PUSH
 668: LD_INT 1000
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: PPUSH
 680: CALL_OW 69
 684: PUSH
 685: LD_INT 0
 687: EQUAL
 688: IFFALSE 361
// end ;
 690: LD_VAR 0 2
 694: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
 699: PPUSH
 700: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
 701: LD_ADDR_VAR 0 8
 705: PUSH
 706: LD_INT 22
 708: PUSH
 709: LD_VAR 0 1
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PUSH
 718: LD_INT 21
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 3
 730: PUSH
 731: LD_INT 24
 733: PUSH
 734: LD_INT 650
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 69
 754: ST_TO_ADDR
// if damageVehicles > 0 then
 755: LD_VAR 0 8
 759: PUSH
 760: LD_INT 0
 762: GREATER
 763: IFFALSE 784
// ComMoveXY ( damageVehicles , repX , repY ) ;
 765: LD_VAR 0 8
 769: PPUSH
 770: LD_VAR 0 3
 774: PPUSH
 775: LD_VAR 0 4
 779: PPUSH
 780: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 784: LD_VAR 0 8
 788: PPUSH
 789: LD_INT 95
 791: PUSH
 792: LD_VAR 0 2
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 3
 803: PUSH
 804: LD_INT 58
 806: PUSH
 807: EMPTY
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PPUSH
 818: CALL_OW 72
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 893
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
 828: LD_ADDR_VAR 0 6
 832: PUSH
 833: LD_VAR 0 8
 837: PPUSH
 838: LD_INT 95
 840: PUSH
 841: LD_VAR 0 2
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 3
 852: PUSH
 853: LD_INT 58
 855: PUSH
 856: EMPTY
 857: LIST
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 72
 871: PUSH
 872: FOR_IN
 873: IFFALSE 891
// ComExitVehicle ( UnitsInside ( i ) ) ;
 875: LD_VAR 0 6
 879: PPUSH
 880: CALL_OW 313
 884: PPUSH
 885: CALL_OW 121
 889: GO 872
 891: POP
 892: POP
// end ;
 893: LD_VAR 0 5
 897: RET
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and GetSide ( human ) = 6 and IsOk ( vehicle ) then
 898: LD_VAR 0 1
 902: PPUSH
 903: CALL_OW 255
 907: PUSH
 908: LD_INT 6
 910: EQUAL
 911: PUSH
 912: LD_VAR 0 2
 916: PPUSH
 917: CALL_OW 255
 921: PUSH
 922: LD_INT 6
 924: EQUAL
 925: AND
 926: PUSH
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 302
 936: AND
 937: IFFALSE 1012
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
 939: LD_VAR 0 1
 943: PPUSH
 944: CALL_OW 264
 948: PUSH
 949: LD_INT 42
 951: EQUAL
 952: PUSH
 953: LD_VAR 0 1
 957: PPUSH
 958: CALL_OW 264
 962: PUSH
 963: LD_INT 43
 965: EQUAL
 966: OR
 967: PUSH
 968: LD_VAR 0 1
 972: PPUSH
 973: CALL_OW 264
 977: PUSH
 978: LD_INT 44
 980: EQUAL
 981: OR
 982: IFFALSE 1012
// begin ComRepairVehicle ( human , vehicle ) ;
 984: LD_VAR 0 2
 988: PPUSH
 989: LD_VAR 0 1
 993: PPUSH
 994: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
 998: LD_VAR 0 2
1002: PPUSH
1003: LD_VAR 0 1
1007: PPUSH
1008: CALL_OW 180
// end ; end ; end_of_file
1012: PPOPN 2
1014: END
// export You , You2 , You3 , Amici , Arabi ; export KurinDialog ; export KurinAddTime ; starting begin RandomizeAll ;
1015: CALL_OW 11
// InitHc ;
1019: CALL_OW 19
// InitBc ;
1023: CALL_OW 21
// InitVc ;
1027: CALL_OW 20
// InitUc ;
1031: CALL_OW 18
// KurinDialog = 0 ;
1035: LD_ADDR_EXP 6
1039: PUSH
1040: LD_INT 0
1042: ST_TO_ADDR
// KurinAddTime = 0 ;
1043: LD_ADDR_EXP 7
1047: PUSH
1048: LD_INT 0
1050: ST_TO_ADDR
// set_difficulty ;
1051: CALL 4018 0 0
// load_postav ;
1055: CALL 1871 0 0
// load_promenne ;
1059: CALL 2023 0 0
// You = 3 ;
1063: LD_ADDR_EXP 1
1067: PUSH
1068: LD_INT 3
1070: ST_TO_ADDR
// You2 = 6 ;
1071: LD_ADDR_EXP 2
1075: PUSH
1076: LD_INT 6
1078: ST_TO_ADDR
// You3 = 5 ;
1079: LD_ADDR_EXP 3
1083: PUSH
1084: LD_INT 5
1086: ST_TO_ADDR
// Amici = 1 ;
1087: LD_ADDR_EXP 4
1091: PUSH
1092: LD_INT 1
1094: ST_TO_ADDR
// Arabi = 2 ;
1095: LD_ADDR_EXP 5
1099: PUSH
1100: LD_INT 2
1102: ST_TO_ADDR
// placni_budovy_z_predesle_mise ;
1103: CALL 2397 0 0
// RevealFogArea ( You , CelaRU02 ) ;
1107: LD_EXP 1
1111: PPUSH
1112: LD_INT 36
1114: PPUSH
1115: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1119: LD_EXP 2
1123: PPUSH
1124: LD_INT 36
1126: PPUSH
1127: CALL_OW 332
// create_arabsky_utok ;
1131: CALL 18270 0 0
// create_americka_pomoc_hlidce ;
1135: CALL 16194 0 0
// create_americke_posily ;
1139: CALL 17063 0 0
// create_ruske_posily_na_omicron ;
1143: CALL 19419 0 0
// create_arabi_komanda ;
1147: CALL 20391 0 0
// create_ru_posily_ma_utek ;
1151: CALL 21237 0 0
// create_arabi_na_posily_kirovu ;
1155: CALL 21689 0 0
// create_cerpaci_ruske_auta ;
1159: CALL 22141 0 0
// create_am_jednotky ;
1163: CALL 20061 0 0
// set_skily_amikum ;
1167: CALL 16547 0 0
// uklid_rusu ;
1171: CALL 4786 0 0
// ChangeSideFog ( You , You ) ;
1175: LD_EXP 1
1179: PPUSH
1180: LD_EXP 1
1184: PPUSH
1185: CALL_OW 343
// ChangeSideFog ( You2 , You ) ;
1189: LD_EXP 2
1193: PPUSH
1194: LD_EXP 1
1198: PPUSH
1199: CALL_OW 343
// pojmenovani_zakladen ;
1203: CALL 4443 0 0
// InGameOn ;
1207: CALL_OW 8
// CenterOnXY ( 137 , 76 ) ;
1211: LD_INT 137
1213: PPUSH
1214: LD_INT 76
1216: PPUSH
1217: CALL_OW 84
// RevealFogArea ( You , CelaRU02 ) ;
1221: LD_EXP 1
1225: PPUSH
1226: LD_INT 36
1228: PPUSH
1229: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1233: LD_EXP 2
1237: PPUSH
1238: LD_INT 36
1240: PPUSH
1241: CALL_OW 332
// uvodni_pokec ;
1245: CALL 9660 0 0
// end ;
1249: END
// on UnitDestroyed ( un ) do begin if un = bur then
1250: LD_VAR 0 1
1254: PUSH
1255: LD_EXP 29
1259: EQUAL
1260: IFFALSE 1269
// YouLost ( Burlak ) ;
1262: LD_STRING Burlak
1264: PPUSH
1265: CALL_OW 104
// enable ;
1269: ENABLE
// end ;
1270: PPOPN 1
1272: END
// export function konec_mise_lhani ; begin
1273: LD_INT 0
1275: PPUSH
// hlaska_lhani ;
1276: CALL 14966 0 0
// YouLost ( Vehicles ) ;
1280: LD_STRING Vehicles
1282: PPUSH
1283: CALL_OW 104
// end ;
1287: LD_VAR 0 1
1291: RET
// export function konec_pred_omikronem ; begin
1292: LD_INT 0
1294: PPUSH
// YouLost ( Delay ) ;
1295: LD_STRING Delay
1297: PPUSH
1298: CALL_OW 104
// end ;
1302: LD_VAR 0 1
1306: RET
// export function konec_mise_utok ; begin
1307: LD_INT 0
1309: PPUSH
// YouLost ( SelfAttack ) ;
1310: LD_STRING SelfAttack
1312: PPUSH
1313: CALL_OW 104
// end ;
1317: LD_VAR 0 1
1321: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var mrtvi ; var all_people ; begin
1322: LD_INT 0
1324: PPUSH
1325: PPUSH
1326: PPUSH
1327: PPUSH
1328: PPUSH
1329: PPUSH
1330: PPUSH
1331: PPUSH
// DisableExclamations ;
1332: CALL_OW 474
// gained_medals := [ ] ;
1336: LD_ADDR_OWVAR 61
1340: PUSH
1341: EMPTY
1342: ST_TO_ADDR
// missing_medals := [ ] ;
1343: LD_ADDR_OWVAR 62
1347: PUSH
1348: EMPTY
1349: ST_TO_ADDR
// if Prezite_posily >= muze_projit_posil [ difficulty ] then
1350: LD_EXP 73
1354: PUSH
1355: LD_EXP 22
1359: PUSH
1360: LD_OWVAR 67
1364: ARRAY
1365: GREATEREQUAL
1366: IFFALSE 1381
// AddMedal ( PreventReinforcements , - 1 ) else
1368: LD_STRING PreventReinforcements
1370: PPUSH
1371: LD_INT 1
1373: NEG
1374: PPUSH
1375: CALL_OW 101
1379: GO 1391
// AddMedal ( PreventReinforcements , 1 ) ;
1381: LD_STRING PreventReinforcements
1383: PPUSH
1384: LD_INT 1
1386: PPUSH
1387: CALL_OW 101
// if scholtze_saved and IsOk ( schol ) and GetSide ( schol ) = 3 then
1391: LD_EXP 37
1395: PUSH
1396: LD_EXP 33
1400: PPUSH
1401: CALL_OW 302
1405: AND
1406: PUSH
1407: LD_EXP 33
1411: PPUSH
1412: CALL_OW 255
1416: PUSH
1417: LD_INT 3
1419: EQUAL
1420: AND
1421: IFFALSE 1435
// AddMedal ( Scholtze , 1 ) else
1423: LD_STRING Scholtze
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: CALL_OW 101
1433: GO 1446
// AddMedal ( Scholtze , - 1 ) ;
1435: LD_STRING Scholtze
1437: PPUSH
1438: LD_INT 1
1440: NEG
1441: PPUSH
1442: CALL_OW 101
// case stav_aut_new of 1 :
1446: LD_EXP 46
1450: PUSH
1451: LD_INT 1
1453: DOUBLE
1454: EQUAL
1455: IFTRUE 1459
1457: GO 1472
1459: POP
// AddMedal ( Surplus , 1 ) ; 2 :
1460: LD_STRING Surplus
1462: PPUSH
1463: LD_INT 1
1465: PPUSH
1466: CALL_OW 101
1470: GO 1517
1472: LD_INT 2
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1494
1480: POP
// AddMedal ( Surplus , - 1 ) ; 3 :
1481: LD_STRING Surplus
1483: PPUSH
1484: LD_INT 1
1486: NEG
1487: PPUSH
1488: CALL_OW 101
1492: GO 1517
1494: LD_INT 3
1496: DOUBLE
1497: EQUAL
1498: IFTRUE 1502
1500: GO 1516
1502: POP
// AddMedal ( Surplus , - 2 ) ; end ;
1503: LD_STRING Surplus
1505: PPUSH
1506: LD_INT 2
1508: NEG
1509: PPUSH
1510: CALL_OW 101
1514: GO 1517
1516: POP
// if not stav_aut_new then
1517: LD_EXP 46
1521: NOT
1522: IFFALSE 1535
// AddMedal ( Surplus , - 1 ) ;
1524: LD_STRING Surplus
1526: PPUSH
1527: LD_INT 1
1529: NEG
1530: PPUSH
1531: CALL_OW 101
// GiveMedals ( Main ) ;
1535: LD_STRING Main
1537: PPUSH
1538: CALL_OW 102
// all_people := FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1542: LD_ADDR_VAR 0 8
1546: PUSH
1547: LD_INT 22
1549: PUSH
1550: LD_EXP 1
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 21
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PPUSH
1573: CALL_OW 69
1577: ST_TO_ADDR
// RewardPeople ( all_people ) ;
1578: LD_VAR 0 8
1582: PPUSH
1583: CALL_OW 43
// if not ( bel in all_people ) then
1587: LD_EXP 32
1591: PUSH
1592: LD_VAR 0 8
1596: IN
1597: NOT
1598: IFFALSE 1609
// KillUnit ( bel ) ;
1600: LD_EXP 32
1604: PPUSH
1605: CALL_OW 66
// if not ( gny in all_people ) then
1609: LD_EXP 31
1613: PUSH
1614: LD_VAR 0 8
1618: IN
1619: NOT
1620: IFFALSE 1631
// KillUnit ( gny ) ;
1622: LD_EXP 31
1626: PPUSH
1627: CALL_OW 66
// if not ( kov in all_people ) then
1631: LD_EXP 30
1635: PUSH
1636: LD_VAR 0 8
1640: IN
1641: NOT
1642: IFFALSE 1653
// KillUnit ( kov ) ;
1644: LD_EXP 30
1648: PPUSH
1649: CALL_OW 66
// if not ( schol in all_people ) then
1653: LD_EXP 33
1657: PUSH
1658: LD_VAR 0 8
1662: IN
1663: NOT
1664: IFFALSE 1675
// KillUnit ( schol ) ;
1666: LD_EXP 33
1670: PPUSH
1671: CALL_OW 66
// SaveCharacters ( bur , Burlak ) ;
1675: LD_EXP 29
1679: PPUSH
1680: LD_STRING Burlak
1682: PPUSH
1683: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
1687: LD_EXP 32
1691: PPUSH
1692: LD_STRING Belkov
1694: PPUSH
1695: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
1699: LD_EXP 31
1703: PPUSH
1704: LD_STRING Gnyevko
1706: PPUSH
1707: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
1711: LD_EXP 30
1715: PPUSH
1716: LD_STRING Kovalyuk
1718: PPUSH
1719: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
1723: LD_EXP 33
1727: PPUSH
1728: LD_STRING Scholtze
1730: PPUSH
1731: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
1735: LD_EXP 28
1739: PPUSH
1740: LD_STRING Popov
1742: PPUSH
1743: CALL_OW 38
// pom := all_people diff [ bur , kur , bel , gny , kov , schol , schol2 , pop ] ;
1747: LD_ADDR_VAR 0 3
1751: PUSH
1752: LD_VAR 0 8
1756: PUSH
1757: LD_EXP 29
1761: PUSH
1762: LD_EXP 27
1766: PUSH
1767: LD_EXP 32
1771: PUSH
1772: LD_EXP 31
1776: PUSH
1777: LD_EXP 30
1781: PUSH
1782: LD_EXP 33
1786: PUSH
1787: LD_EXP 34
1791: PUSH
1792: LD_EXP 28
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: DIFF
1807: ST_TO_ADDR
// SaveCharacters ( pom , survivors1 ) ;
1808: LD_VAR 0 3
1812: PPUSH
1813: LD_STRING survivors1
1815: PPUSH
1816: CALL_OW 38
// SaveVariable ( BELKOV_SAVED , belkov_saved ) ;
1820: LD_EXP 24
1824: PPUSH
1825: LD_STRING belkov_saved
1827: PPUSH
1828: CALL_OW 39
// SaveVariable ( STAV_UTOKU , stav_utoku ) ;
1832: LD_EXP 25
1836: PPUSH
1837: LD_STRING stav_utoku
1839: PPUSH
1840: CALL_OW 39
// SaveVariable ( stav_aut , Surplus_vehicles ) ;
1844: LD_EXP 38
1848: PPUSH
1849: LD_STRING Surplus_vehicles
1851: PPUSH
1852: CALL_OW 39
// YouWin ;
1856: CALL_OW 103
// EnableExclamations ;
1860: CALL_OW 473
// exit ;
1864: GO 1866
// end ;
1866: LD_VAR 0 1
1870: RET
// function load_postav ; begin
1871: LD_INT 0
1873: PPUSH
// grishko = NewCharacter ( Grishko ) ;
1874: LD_ADDR_EXP 35
1878: PUSH
1879: LD_STRING Grishko
1881: PPUSH
1882: CALL_OW 25
1886: ST_TO_ADDR
// kur = nacti_osobu ( kurin ) ;
1887: LD_ADDR_EXP 27
1891: PUSH
1892: LD_STRING kurin
1894: PPUSH
1895: CALL 20347 0 1
1899: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
1900: LD_ADDR_EXP 32
1904: PUSH
1905: LD_STRING Belkov
1907: PPUSH
1908: CALL 20347 0 1
1912: ST_TO_ADDR
// kov = nacti_osobu ( Kovalyuk ) ;
1913: LD_ADDR_EXP 30
1917: PUSH
1918: LD_STRING Kovalyuk
1920: PPUSH
1921: CALL 20347 0 1
1925: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
1926: LD_ADDR_EXP 29
1930: PUSH
1931: LD_STRING Burlak
1933: PPUSH
1934: CALL 20347 0 1
1938: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
1939: LD_ADDR_EXP 31
1943: PUSH
1944: LD_STRING Gnyevko
1946: PPUSH
1947: CALL 20347 0 1
1951: ST_TO_ADDR
// pop = NewCharacter ( Popov ) ;
1952: LD_ADDR_EXP 28
1956: PUSH
1957: LD_STRING Popov
1959: PPUSH
1960: CALL_OW 25
1964: ST_TO_ADDR
// if CheckCharacterSet ( survivors1 ) then
1965: LD_STRING survivors1
1967: PPUSH
1968: CALL_OW 29
1972: IFFALSE 1987
// other_survivors_mise_2 = CreateCharacterSet ( survivors1 ) ;
1974: LD_ADDR_EXP 71
1978: PUSH
1979: LD_STRING survivors1
1981: PPUSH
1982: CALL_OW 31
1986: ST_TO_ADDR
// if CheckCharacterSet ( amici_bw ) then
1987: LD_STRING amici_bw
1989: PPUSH
1990: CALL_OW 29
1994: IFFALSE 2011
// amici_bw_2 = CreateCharacter ( amici_bw ) else
1996: LD_ADDR_EXP 10
2000: PUSH
2001: LD_STRING amici_bw
2003: PPUSH
2004: CALL_OW 34
2008: ST_TO_ADDR
2009: GO 2018
// amici_bw_2 = [ ] ;
2011: LD_ADDR_EXP 10
2015: PUSH
2016: EMPTY
2017: ST_TO_ADDR
// end ;
2018: LD_VAR 0 1
2022: RET
// function load_promenne ; var default_budovy ; begin
2023: LD_INT 0
2025: PPUSH
2026: PPUSH
// default_budovy = [ [ 0 , 2 , 66 , 97 , 0 ] , [ 2 , 1 , 61 , 83 , 2 ] , [ 6 , 1 , 73 , 90 , 4 ] ] ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: LD_INT 0
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 66
2040: PUSH
2041: LD_INT 97
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 2
2056: PUSH
2057: LD_INT 1
2059: PUSH
2060: LD_INT 61
2062: PUSH
2063: LD_INT 83
2065: PUSH
2066: LD_INT 2
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 6
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: LD_INT 73
2084: PUSH
2085: LD_INT 90
2087: PUSH
2088: LD_INT 4
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: ST_TO_ADDR
// budovy_mise_2 = LoadVariable ( budovy , default_budovy ) ;
2103: LD_ADDR_EXP 8
2107: PUSH
2108: LD_STRING budovy
2110: PPUSH
2111: LD_VAR 0 2
2115: PPUSH
2116: CALL_OW 30
2120: ST_TO_ADDR
// breastworks_east = LoadVariable ( bw_east , 3 ) ;
2121: LD_ADDR_EXP 9
2125: PUSH
2126: LD_STRING bw_east
2128: PPUSH
2129: LD_INT 3
2131: PPUSH
2132: CALL_OW 30
2136: ST_TO_ADDR
// end ;
2137: LD_VAR 0 1
2141: RET
// export function create_scholtze ; var pom ; begin
2142: LD_INT 0
2144: PPUSH
2145: PPUSH
// pom = NewCharacter ( Scholtze ) ;
2146: LD_ADDR_VAR 0 2
2150: PUSH
2151: LD_STRING Scholtze
2153: PPUSH
2154: CALL_OW 25
2158: ST_TO_ADDR
// SetSide ( pom , You2 ) ;
2159: LD_VAR 0 2
2163: PPUSH
2164: LD_EXP 2
2168: PPUSH
2169: CALL_OW 235
// SetClass ( pom , class_scientistic ) ;
2173: LD_VAR 0 2
2177: PPUSH
2178: LD_INT 4
2180: PPUSH
2181: CALL_OW 336
// PlaceUnitXY ( pom , 49 , 5 , true ) ;
2185: LD_VAR 0 2
2189: PPUSH
2190: LD_INT 49
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: LD_INT 1
2198: PPUSH
2199: CALL_OW 48
// result = pom ;
2203: LD_ADDR_VAR 0 1
2207: PUSH
2208: LD_VAR 0 2
2212: ST_TO_ADDR
// end ;
2213: LD_VAR 0 1
2217: RET
// on Command ( com ) do var i , j , temp ;
2218: LD_INT 0
2220: PPUSH
2221: PPUSH
2222: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2223: LD_ADDR_VAR 0 2
2227: PUSH
2228: LD_INT 22
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 21
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PPUSH
2252: CALL_OW 69
2256: PUSH
2257: FOR_IN
2258: IFFALSE 2380
// if GetTaskList ( i ) > 0 then
2260: LD_VAR 0 2
2264: PPUSH
2265: CALL_OW 437
2269: PUSH
2270: LD_INT 0
2272: GREATER
2273: IFFALSE 2378
// for j = 1 to GetTaskList ( i ) do
2275: LD_ADDR_VAR 0 3
2279: PUSH
2280: DOUBLE
2281: LD_INT 1
2283: DEC
2284: ST_TO_ADDR
2285: LD_VAR 0 2
2289: PPUSH
2290: CALL_OW 437
2294: PUSH
2295: FOR_TO
2296: IFFALSE 2376
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
2298: LD_ADDR_VAR 0 4
2302: PUSH
2303: LD_VAR 0 2
2307: PPUSH
2308: CALL_OW 437
2312: PUSH
2313: LD_VAR 0 3
2317: ARRAY
2318: PUSH
2319: LD_INT 4
2321: ARRAY
2322: ST_TO_ADDR
// if temp = RU1_dep or ( GetSide ( temp ) = 6 and GetType ( temp ) = unit_vehicle ) then
2323: LD_VAR 0 4
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: PUSH
2332: LD_VAR 0 4
2336: PPUSH
2337: CALL_OW 255
2341: PUSH
2342: LD_INT 6
2344: EQUAL
2345: PUSH
2346: LD_VAR 0 4
2350: PPUSH
2351: CALL_OW 247
2355: PUSH
2356: LD_INT 2
2358: EQUAL
2359: AND
2360: OR
2361: IFFALSE 2374
// SetTaskList ( i , [ ] ) ;
2363: LD_VAR 0 2
2367: PPUSH
2368: EMPTY
2369: PPUSH
2370: CALL_OW 446
// end ;
2374: GO 2295
2376: POP
2377: POP
2378: GO 2257
2380: POP
2381: POP
// end ; end_of_file
2382: PPOPN 4
2384: END
// var konzervy_delay ; export budovy_mise_2 ; export breastworks_east ; export amici_bw_2 ; every 0 0$0.1 do
2385: GO 2387
2387: DISABLE
// begin konzervy_delay = 0 ;
2388: LD_ADDR_LOC 16
2392: PUSH
2393: LD_INT 0
2395: ST_TO_ADDR
// end ;
2396: END
// export function placni_budovy_z_predesle_mise ; var pom , i ; var ab ; var bw_e ; var vojaci ; var pocet ; begin
2397: LD_INT 0
2399: PPUSH
2400: PPUSH
2401: PPUSH
2402: PPUSH
2403: PPUSH
2404: PPUSH
2405: PPUSH
// uc_side = You ;
2406: LD_ADDR_OWVAR 20
2410: PUSH
2411: LD_EXP 1
2415: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
2416: LD_ADDR_OWVAR 44
2420: PUSH
2421: LD_INT 9
2423: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2424: LD_ADDR_OWVAR 45
2428: PUSH
2429: LD_INT 9
2431: ST_TO_ADDR
// for i in budovy_mise_2 do
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: LD_EXP 8
2441: PUSH
2442: FOR_IN
2443: IFFALSE 2591
// begin uc_nation = i [ 6 ] ;
2445: LD_ADDR_OWVAR 21
2449: PUSH
2450: LD_VAR 0 3
2454: PUSH
2455: LD_INT 6
2457: ARRAY
2458: ST_TO_ADDR
// bc_type = i [ 1 ] ;
2459: LD_ADDR_OWVAR 42
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 1
2471: ARRAY
2472: ST_TO_ADDR
// bc_level = i [ 2 ] ;
2473: LD_ADDR_OWVAR 43
2477: PUSH
2478: LD_VAR 0 3
2482: PUSH
2483: LD_INT 2
2485: ARRAY
2486: ST_TO_ADDR
// pom = CreateAndPlaceBuildingXYD ( i [ 3 ] + 30 , i [ 4 ] - 20 , i [ 5 ] ) ;
2487: LD_ADDR_VAR 0 2
2491: PUSH
2492: LD_VAR 0 3
2496: PUSH
2497: LD_INT 3
2499: ARRAY
2500: PUSH
2501: LD_INT 30
2503: PLUS
2504: PPUSH
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 4
2512: ARRAY
2513: PUSH
2514: LD_INT 20
2516: MINUS
2517: PPUSH
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 5
2525: ARRAY
2526: PPUSH
2527: CALL_OW 47
2531: ST_TO_ADDR
// if bc_type in [ b_depot , b_warehouse ] then
2532: LD_OWVAR 42
2536: PUSH
2537: LD_INT 0
2539: PUSH
2540: LD_INT 1
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: IN
2547: IFFALSE 2589
// begin SetResourceType ( GetBase ( pom ) , mat_cans , 100 ) ;
2549: LD_VAR 0 2
2553: PPUSH
2554: CALL_OW 274
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 100
2564: PPUSH
2565: CALL_OW 277
// SetResourceType ( GetBase ( pom ) , mat_oil , 25 ) ;
2569: LD_VAR 0 2
2573: PPUSH
2574: CALL_OW 274
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: LD_INT 25
2584: PPUSH
2585: CALL_OW 277
// end ; end ;
2589: GO 2442
2591: POP
2592: POP
// bw_e = breastworks_east ;
2593: LD_ADDR_VAR 0 5
2597: PUSH
2598: LD_EXP 9
2602: ST_TO_ADDR
// uc_side = Amici ;
2603: LD_ADDR_OWVAR 20
2607: PUSH
2608: LD_EXP 4
2612: ST_TO_ADDR
// uc_nation = nation_american ;
2613: LD_ADDR_OWVAR 21
2617: PUSH
2618: LD_INT 1
2620: ST_TO_ADDR
// bc_type = b_breastwork ;
2621: LD_ADDR_OWVAR 42
2625: PUSH
2626: LD_INT 31
2628: ST_TO_ADDR
// bc_level = level_bw_e [ difficulty ] ;
2629: LD_ADDR_OWVAR 43
2633: PUSH
2634: LD_EXP 11
2638: PUSH
2639: LD_OWVAR 67
2643: ARRAY
2644: ST_TO_ADDR
// if bw_e > 1 then
2645: LD_VAR 0 5
2649: PUSH
2650: LD_INT 1
2652: GREATER
2653: IFFALSE 2668
// CreateAndPlaceBuildingXYD ( 123 , 42 , 1 ) ;
2655: LD_INT 123
2657: PPUSH
2658: LD_INT 42
2660: PPUSH
2661: LD_INT 1
2663: PPUSH
2664: CALL_OW 47
// if bw_e = 1 or bw_e = 3 then
2668: LD_VAR 0 5
2672: PUSH
2673: LD_INT 1
2675: EQUAL
2676: PUSH
2677: LD_VAR 0 5
2681: PUSH
2682: LD_INT 3
2684: EQUAL
2685: OR
2686: IFFALSE 2701
// CreateAndPlaceBuildingXYD ( 120 , 36 , 1 ) ;
2688: LD_INT 120
2690: PPUSH
2691: LD_INT 36
2693: PPUSH
2694: LD_INT 1
2696: PPUSH
2697: CALL_OW 47
// vojaci = amici_bw_2 ;
2701: LD_ADDR_VAR 0 6
2705: PUSH
2706: LD_EXP 10
2710: ST_TO_ADDR
// if bw_e > 0 then
2711: LD_VAR 0 5
2715: PUSH
2716: LD_INT 0
2718: GREATER
2719: IFFALSE 2968
// begin if bw_e = 1 or bw_e = 2 then
2721: LD_VAR 0 5
2725: PUSH
2726: LD_INT 1
2728: EQUAL
2729: PUSH
2730: LD_VAR 0 5
2734: PUSH
2735: LD_INT 2
2737: EQUAL
2738: OR
2739: IFFALSE 2751
// pocet = 1 else
2741: LD_ADDR_VAR 0 7
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
2749: GO 2759
// pocet = 2 ;
2751: LD_ADDR_VAR 0 7
2755: PUSH
2756: LD_INT 2
2758: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2759: LD_ADDR_VAR 0 6
2763: PUSH
2764: LD_VAR 0 6
2768: PUSH
2769: LD_INT 1
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 2
2777: PPUSH
2778: LD_STRING 
2780: PPUSH
2781: CALL 16147 0 4
2785: ADD
2786: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2787: LD_ADDR_VAR 0 6
2791: PUSH
2792: LD_VAR 0 6
2796: PUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 1
2802: PPUSH
2803: LD_INT 2
2805: PPUSH
2806: LD_STRING 
2808: PPUSH
2809: CALL 16147 0 4
2813: ADD
2814: ST_TO_ADDR
// pom = FilterUnitsinArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
2815: LD_ADDR_VAR 0 2
2819: PUSH
2820: LD_INT 22
2822: PPUSH
2823: LD_INT 22
2825: PUSH
2826: LD_EXP 4
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 30
2837: PUSH
2838: LD_INT 31
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PPUSH
2849: CALL_OW 70
2853: ST_TO_ADDR
// if pocet >= 1 then
2854: LD_VAR 0 7
2858: PUSH
2859: LD_INT 1
2861: GREATEREQUAL
2862: IFFALSE 2911
// begin PlaceUnitXYR ( vojaci [ 1 ] , 129 , 39 , 5 , false ) ;
2864: LD_VAR 0 6
2868: PUSH
2869: LD_INT 1
2871: ARRAY
2872: PPUSH
2873: LD_INT 129
2875: PPUSH
2876: LD_INT 39
2878: PPUSH
2879: LD_INT 5
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 50
// ComEnterUnit ( vojaci [ 1 ] , pom [ 1 ] ) ;
2889: LD_VAR 0 6
2893: PUSH
2894: LD_INT 1
2896: ARRAY
2897: PPUSH
2898: LD_VAR 0 2
2902: PUSH
2903: LD_INT 1
2905: ARRAY
2906: PPUSH
2907: CALL_OW 120
// end ; if pocet = 2 then
2911: LD_VAR 0 7
2915: PUSH
2916: LD_INT 2
2918: EQUAL
2919: IFFALSE 2968
// begin PlaceUnitXYR ( vojaci [ 2 ] , 129 , 39 , 5 , false ) ;
2921: LD_VAR 0 6
2925: PUSH
2926: LD_INT 2
2928: ARRAY
2929: PPUSH
2930: LD_INT 129
2932: PPUSH
2933: LD_INT 39
2935: PPUSH
2936: LD_INT 5
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 50
// ComEnterUnit ( vojaci [ 2 ] , pom [ 2 ] ) ;
2946: LD_VAR 0 6
2950: PUSH
2951: LD_INT 2
2953: ARRAY
2954: PPUSH
2955: LD_VAR 0 2
2959: PUSH
2960: LD_INT 2
2962: ARRAY
2963: PPUSH
2964: CALL_OW 120
// end ; end ; end ;
2968: LD_VAR 0 1
2972: RET
// export function vyber_characteru ; var pom ; var units_na_vyber ; var i ; var pocet ; var vyber ; var osurviv ; begin
2973: LD_INT 0
2975: PPUSH
2976: PPUSH
2977: PPUSH
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// uc_side = You ;
2982: LD_ADDR_OWVAR 20
2986: PUSH
2987: LD_EXP 1
2991: ST_TO_ADDR
// uc_nation = nation_russian ;
2992: LD_ADDR_OWVAR 21
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// pocet = 3 ;
3000: LD_ADDR_VAR 0 5
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// units_na_vyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
3008: LD_ADDR_VAR 0 3
3012: PUSH
3013: LD_INT -4
3015: PUSH
3016: LD_INT -1
3018: PUSH
3019: LD_INT -6
3021: PUSH
3022: LD_EXP 29
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_change_class ] ;
3033: LD_ADDR_VAR 0 3
3037: PUSH
3038: LD_VAR 0 3
3042: PUSH
3043: LD_INT -5
3045: PUSH
3046: EMPTY
3047: LIST
3048: ADD
3049: ST_TO_ADDR
// if IsOK ( gny ) then
3050: LD_EXP 31
3054: PPUSH
3055: CALL_OW 302
3059: IFFALSE 3093
// begin SetSide ( gny , You ) ;
3061: LD_EXP 31
3065: PPUSH
3066: LD_EXP 1
3070: PPUSH
3071: CALL_OW 235
// units_na_vyber = units_na_vyber ^ gny end else
3075: LD_ADDR_VAR 0 3
3079: PUSH
3080: LD_VAR 0 3
3084: PUSH
3085: LD_EXP 31
3089: ADD
3090: ST_TO_ADDR
3091: GO 3107
// pocet = pocet + 1 ;
3093: LD_ADDR_VAR 0 5
3097: PUSH
3098: LD_VAR 0 5
3102: PUSH
3103: LD_INT 1
3105: PLUS
3106: ST_TO_ADDR
// if IsOK ( kov ) then
3107: LD_EXP 30
3111: PPUSH
3112: CALL_OW 302
3116: IFFALSE 3150
// begin SetSide ( kov , You ) ;
3118: LD_EXP 30
3122: PPUSH
3123: LD_EXP 1
3127: PPUSH
3128: CALL_OW 235
// units_na_vyber = units_na_vyber ^ kov end else
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_VAR 0 3
3141: PUSH
3142: LD_EXP 30
3146: ADD
3147: ST_TO_ADDR
3148: GO 3164
// pocet = pocet + 1 ;
3150: LD_ADDR_VAR 0 5
3154: PUSH
3155: LD_VAR 0 5
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: LD_VAR 0 3
3173: PUSH
3174: LD_INT -2
3176: PUSH
3177: LD_INT -3
3179: PUSH
3180: LD_INT -5
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: ADD
3188: ST_TO_ADDR
// if IsOK ( bel ) then
3189: LD_EXP 32
3193: PPUSH
3194: CALL_OW 302
3198: IFFALSE 3230
// begin SetSide ( bel , You ) ;
3200: LD_EXP 32
3204: PPUSH
3205: LD_EXP 1
3209: PPUSH
3210: CALL_OW 235
// units_na_vyber = units_na_vyber ^ bel ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: LD_VAR 0 3
3223: PUSH
3224: LD_EXP 32
3228: ADD
3229: ST_TO_ADDR
// end ; osurviv = other_survivors_mise_2 ;
3230: LD_ADDR_VAR 0 7
3234: PUSH
3235: LD_EXP 71
3239: ST_TO_ADDR
// for i in osurviv do
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_VAR 0 7
3249: PUSH
3250: FOR_IN
3251: IFFALSE 3269
// SetSide ( i , You ) ;
3253: LD_VAR 0 4
3257: PPUSH
3258: LD_EXP 1
3262: PPUSH
3263: CALL_OW 235
3267: GO 3250
3269: POP
3270: POP
// units_na_vyber = units_na_vyber ^ osurviv ;
3271: LD_ADDR_VAR 0 3
3275: PUSH
3276: LD_VAR 0 3
3280: PUSH
3281: LD_VAR 0 7
3285: ADD
3286: ST_TO_ADDR
// uc_side = You ;
3287: LD_ADDR_OWVAR 20
3291: PUSH
3292: LD_EXP 1
3296: ST_TO_ADDR
// uc_nation = nation_russian ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 3
3304: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_soldier , 2 ,  ) ;
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: CALL 16112 0 0
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 2
3325: PPUSH
3326: LD_STRING 
3328: PPUSH
3329: CALL 16147 0 4
3333: ADD
3334: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( sex_female , class_soldier , 3 ,  ) ;
3335: LD_ADDR_VAR 0 3
3339: PUSH
3340: LD_VAR 0 3
3344: PUSH
3345: LD_INT 2
3347: PPUSH
3348: LD_INT 1
3350: PPUSH
3351: LD_INT 3
3353: PPUSH
3354: LD_STRING 
3356: PPUSH
3357: CALL 16147 0 4
3361: ADD
3362: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3363: LD_ADDR_VAR 0 3
3367: PUSH
3368: LD_VAR 0 3
3372: PUSH
3373: CALL 16112 0 0
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: LD_STRING 
3386: PPUSH
3387: CALL 16147 0 4
3391: ADD
3392: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3393: LD_ADDR_VAR 0 3
3397: PUSH
3398: LD_VAR 0 3
3402: PUSH
3403: CALL 16112 0 0
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: LD_STRING 
3416: PPUSH
3417: CALL 16147 0 4
3421: ADD
3422: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3423: LD_ADDR_VAR 0 3
3427: PUSH
3428: LD_VAR 0 3
3432: PUSH
3433: CALL 16112 0 0
3437: PPUSH
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 2
3443: PPUSH
3444: LD_STRING 
3446: PPUSH
3447: CALL 16147 0 4
3451: ADD
3452: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3453: LD_ADDR_VAR 0 3
3457: PUSH
3458: LD_VAR 0 3
3462: PUSH
3463: CALL 16112 0 0
3467: PPUSH
3468: LD_INT 2
3470: PPUSH
3471: LD_INT 2
3473: PPUSH
3474: LD_STRING 
3476: PPUSH
3477: CALL 16147 0 4
3481: ADD
3482: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 3
3492: PUSH
3493: CALL 16112 0 0
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 2
3503: PPUSH
3504: LD_STRING 
3506: PPUSH
3507: CALL 16147 0 4
3511: ADD
3512: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: LD_VAR 0 3
3522: PUSH
3523: CALL 16112 0 0
3527: PPUSH
3528: LD_INT 3
3530: PPUSH
3531: LD_INT 2
3533: PPUSH
3534: LD_STRING 
3536: PPUSH
3537: CALL 16147 0 4
3541: ADD
3542: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet , pocet , units_na_vyber , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_STRING Vyber si peopliky
3550: PPUSH
3551: LD_VAR 0 5
3555: PPUSH
3556: LD_VAR 0 5
3560: PPUSH
3561: LD_VAR 0 3
3565: PPUSH
3566: LD_INT 2
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 4
3578: PUSH
3579: LD_INT 1
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 3
3588: PUSH
3589: LD_INT 0
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 1
3598: PUSH
3599: LD_INT 0
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PPUSH
3612: CALL_OW 42
3616: ST_TO_ADDR
// vyber = [ bur ] ;
3617: LD_ADDR_VAR 0 6
3621: PUSH
3622: LD_EXP 29
3626: PUSH
3627: EMPTY
3628: LIST
3629: ST_TO_ADDR
// if IsOK ( gny ) then
3630: LD_EXP 31
3634: PPUSH
3635: CALL_OW 302
3639: IFFALSE 3657
// vyber = vyber ^ gny ;
3641: LD_ADDR_VAR 0 6
3645: PUSH
3646: LD_VAR 0 6
3650: PUSH
3651: LD_EXP 31
3655: ADD
3656: ST_TO_ADDR
// if IsOK ( kov ) then
3657: LD_EXP 30
3661: PPUSH
3662: CALL_OW 302
3666: IFFALSE 3684
// vyber = vyber ^ kov ;
3668: LD_ADDR_VAR 0 6
3672: PUSH
3673: LD_VAR 0 6
3677: PUSH
3678: LD_EXP 30
3682: ADD
3683: ST_TO_ADDR
// vyber = vyber ^ pom ;
3684: LD_ADDR_VAR 0 6
3688: PUSH
3689: LD_VAR 0 6
3693: PUSH
3694: LD_VAR 0 2
3698: ADD
3699: ST_TO_ADDR
// manage_zbytek ( osurviv diff vyber ) ;
3700: LD_VAR 0 7
3704: PUSH
3705: LD_VAR 0 6
3709: DIFF
3710: PPUSH
3711: CALL 3945 0 1
// result := vyber ;
3715: LD_ADDR_VAR 0 1
3719: PUSH
3720: LD_VAR 0 6
3724: ST_TO_ADDR
// end ;
3725: LD_VAR 0 1
3729: RET
// export function placni_unity ( unity ) ; var i ; begin
3730: LD_INT 0
3732: PPUSH
3733: PPUSH
// for i in unity do
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: LD_VAR 0 1
3743: PUSH
3744: FOR_IN
3745: IFFALSE 3784
// begin SetSide ( i , You ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 235
// PlaceUnitXYR ( i , 99 , 73 , 5 , false ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_INT 99
3768: PPUSH
3769: LD_INT 73
3771: PPUSH
3772: LD_INT 5
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL_OW 50
// end ;
3782: GO 3744
3784: POP
3785: POP
// wait ( 0 0$0.5 ) ;
3786: LD_INT 18
3788: PPUSH
3789: CALL_OW 67
// SaveForQuickRestart ;
3793: CALL_OW 22
// end ;
3797: LD_VAR 0 2
3801: RET
// every 0 0$10 trigger stav_omikron < 3 do
3802: LD_EXP 39
3806: PUSH
3807: LD_INT 3
3809: LESS
3810: IFFALSE 3879
3812: GO 3814
3814: DISABLE
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
3815: LD_INT 50
3817: PPUSH
3818: LD_INT 4200
3820: PPUSH
3821: CALL_OW 12
3825: PPUSH
3826: CALL_OW 67
// wait ( konzervy_delay * 0 0$5 ) ;
3830: LD_LOC 16
3834: PUSH
3835: LD_INT 175
3837: MUL
3838: PPUSH
3839: CALL_OW 67
// konzervy_delay = konzervy_delay + 1 ;
3843: LD_ADDR_LOC 16
3847: PUSH
3848: LD_LOC 16
3852: PUSH
3853: LD_INT 1
3855: PLUS
3856: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
3857: LD_INT 3
3859: PPUSH
3860: LD_INT 5
3862: PPUSH
3863: CALL_OW 12
3867: PPUSH
3868: LD_INT 7
3870: PPUSH
3871: LD_INT 1
3873: PPUSH
3874: CALL_OW 55
// enable ;
3878: ENABLE
// end ;
3879: END
// every 0 0$30 do
3880: GO 3882
3882: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
3883: LD_INT 3
3885: PPUSH
3886: LD_INT 5
3888: PPUSH
3889: CALL_OW 12
3893: PPUSH
3894: LD_INT 7
3896: PPUSH
3897: LD_INT 1
3899: PPUSH
3900: CALL_OW 55
// end ;
3904: END
// every 1 1$20 do
3905: GO 3907
3907: DISABLE
// begin wait ( Rand ( 1 , 0 0$40 ) ) ;
3908: LD_INT 1
3910: PPUSH
3911: LD_INT 1400
3913: PPUSH
3914: CALL_OW 12
3918: PPUSH
3919: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 4 ) , konzervy_all , true ) ;
3923: LD_INT 1
3925: PPUSH
3926: LD_INT 4
3928: PPUSH
3929: CALL_OW 12
3933: PPUSH
3934: LD_INT 25
3936: PPUSH
3937: LD_INT 1
3939: PPUSH
3940: CALL_OW 55
// end ;
3944: END
// function manage_zbytek ( lidi ) ; var i ; begin
3945: LD_INT 0
3947: PPUSH
3948: PPUSH
// for i in lidi do
3949: LD_ADDR_VAR 0 3
3953: PUSH
3954: LD_VAR 0 1
3958: PUSH
3959: FOR_IN
3960: IFFALSE 3999
// begin SetSide ( i , You2 ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_EXP 2
3971: PPUSH
3972: CALL_OW 235
// PlaceUnitXYR ( i , 144 , 79 , 3 , false ) ;
3976: LD_VAR 0 3
3980: PPUSH
3981: LD_INT 144
3983: PPUSH
3984: LD_INT 79
3986: PPUSH
3987: LD_INT 3
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 50
// end ;
3997: GO 3959
3999: POP
4000: POP
// ComEnterUnit ( lidi , RU1_dep ) ;
4001: LD_VAR 0 1
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL_OW 120
// end ; end_of_file
4013: LD_VAR 0 2
4017: RET
// export level_bw_e ; export schol_find_amikama ; export levely_amici ; export posily1 ; export posily11 ; export posily2 ; export posily3 ; export posily4 ; export utok_na_omikron ; export levely_ruske_posily ; export levely_am_budov ; export muze_projit_posil ; export muze_prezit_posil ; export BELKOV_SAVED ; export STAV_UTOKU ; export function set_difficulty ; begin
4018: LD_INT 0
4020: PPUSH
// BELKOV_SAVED = LoadVariable ( belkov_saved , 0 ) ;
4021: LD_ADDR_EXP 24
4025: PUSH
4026: LD_STRING belkov_saved
4028: PPUSH
4029: LD_INT 0
4031: PPUSH
4032: CALL_OW 30
4036: ST_TO_ADDR
// STAV_UTOKU = LoadVariable ( utok_stav , 3 ) ;
4037: LD_ADDR_EXP 25
4041: PUSH
4042: LD_STRING utok_stav
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 30
4052: ST_TO_ADDR
// level_bw_e = [ 2 , 3 , 4 ] ;
4053: LD_ADDR_EXP 11
4057: PUSH
4058: LD_INT 2
4060: PUSH
4061: LD_INT 3
4063: PUSH
4064: LD_INT 4
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: ST_TO_ADDR
// schol_find_amikama = [ 11 11$0 , 9 9$0 , 7 7$0 ] ;
4072: LD_ADDR_EXP 12
4076: PUSH
4077: LD_INT 23100
4079: PUSH
4080: LD_INT 18900
4082: PUSH
4083: LD_INT 14700
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: ST_TO_ADDR
// levely_amici = [ 2 , 3 , 4 ] ;
4091: LD_ADDR_EXP 13
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: LD_INT 3
4101: PUSH
4102: LD_INT 4
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: ST_TO_ADDR
// posily1 = [ 13 13$00 , 11 11$00 , 10 10$00 ] ;
4110: LD_ADDR_EXP 14
4114: PUSH
4115: LD_INT 27300
4117: PUSH
4118: LD_INT 23100
4120: PUSH
4121: LD_INT 21000
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: ST_TO_ADDR
// posily11 = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
4129: LD_ADDR_EXP 15
4133: PUSH
4134: LD_INT 10500
4136: PUSH
4137: LD_INT 8400
4139: PUSH
4140: LD_INT 6300
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: ST_TO_ADDR
// posily2 = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
4148: LD_ADDR_EXP 16
4152: PUSH
4153: LD_INT 21000
4155: PUSH
4156: LD_INT 16800
4158: PUSH
4159: LD_INT 10500
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: ST_TO_ADDR
// posily3 = [ 11 11$0 , 8 8$30 , 5 5$0 ] ;
4167: LD_ADDR_EXP 17
4171: PUSH
4172: LD_INT 23100
4174: PUSH
4175: LD_INT 17850
4177: PUSH
4178: LD_INT 10500
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// posily4 = [ 8 8$0 , 7 7$0 , 5 5$0 ] ;
4186: LD_ADDR_EXP 18
4190: PUSH
4191: LD_INT 16800
4193: PUSH
4194: LD_INT 14700
4196: PUSH
4197: LD_INT 10500
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// utok_na_omikron = [ 55 55$0 , 45 45$0 , 35 35$0 ] [ difficulty ] ;
4205: LD_ADDR_EXP 19
4209: PUSH
4210: LD_INT 115500
4212: PUSH
4213: LD_INT 94500
4215: PUSH
4216: LD_INT 73500
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: PUSH
4224: LD_OWVAR 67
4228: ARRAY
4229: ST_TO_ADDR
// levely_ruske_posily = [ 4 , 3 , 2 ] ;
4230: LD_ADDR_EXP 20
4234: PUSH
4235: LD_INT 4
4237: PUSH
4238: LD_INT 3
4240: PUSH
4241: LD_INT 2
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// levely_am_budov = [ 0 , 1 , 2 ] ;
4249: LD_ADDR_EXP 21
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: LD_INT 1
4259: PUSH
4260: LD_INT 2
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: ST_TO_ADDR
// muze_projit_posil = [ 8 , 8 , 6 ] ;
4268: LD_ADDR_EXP 22
4272: PUSH
4273: LD_INT 8
4275: PUSH
4276: LD_INT 8
4278: PUSH
4279: LD_INT 6
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: ST_TO_ADDR
// muze_prezit_posil = [ 2 , 5 , 100 ] ;
4287: LD_ADDR_EXP 23
4291: PUSH
4292: LD_INT 2
4294: PUSH
4295: LD_INT 5
4297: PUSH
4298: LD_INT 100
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
4306: LD_ADDR_EXP 26
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: LD_STRING :
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: ST_TO_ADDR
// end ;
4325: LD_VAR 0 1
4329: RET
// export cas ; every 0 0$10 do var pom ;
4330: GO 4332
4332: DISABLE
4333: LD_INT 0
4335: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
4336: LD_EXP 26
4340: PUSH
4341: LD_INT 3
4343: ARRAY
4344: PUSH
4345: LD_INT 10
4347: PLUS
4348: PUSH
4349: LD_INT 60
4351: EQUAL
4352: IFFALSE 4388
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
4354: LD_ADDR_EXP 26
4358: PUSH
4359: LD_EXP 26
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: PUSH
4368: LD_INT 1
4370: PLUS
4371: PUSH
4372: LD_EXP 26
4376: PUSH
4377: LD_INT 2
4379: ARRAY
4380: ADD
4381: PUSH
4382: LD_INT 0
4384: ADD
4385: ST_TO_ADDR
4386: GO 4426
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
4388: LD_ADDR_EXP 26
4392: PUSH
4393: LD_EXP 26
4397: PUSH
4398: LD_INT 1
4400: ARRAY
4401: PUSH
4402: LD_EXP 26
4406: PUSH
4407: LD_INT 2
4409: ARRAY
4410: ADD
4411: PUSH
4412: LD_EXP 26
4416: PUSH
4417: LD_INT 3
4419: ARRAY
4420: PUSH
4421: LD_INT 10
4423: PLUS
4424: ADD
4425: ST_TO_ADDR
// debug_strings = [ cas ] ;
4426: LD_ADDR_OWVAR 48
4430: PUSH
4431: LD_EXP 26
4435: PUSH
4436: EMPTY
4437: LIST
4438: ST_TO_ADDR
// enable ;
4439: ENABLE
// end ;
4440: PPOPN 1
4442: END
// export function pojmenovani_zakladen ; var pom ; begin
4443: LD_INT 0
4445: PPUSH
4446: PPUSH
// SetBName ( RU1_dep , kirov ) ;
4447: LD_INT 1
4449: PPUSH
4450: LD_STRING kirov
4452: PPUSH
4453: CALL_OW 500
// pom = FilterUnitsInArea ( Ru2_base , [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: LD_INT 2
4464: PPUSH
4465: LD_INT 22
4467: PUSH
4468: LD_EXP 1
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 30
4479: PUSH
4480: LD_INT 0
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 70
4495: ST_TO_ADDR
// if pom > 0 then
4496: LD_VAR 0 2
4500: PUSH
4501: LD_INT 0
4503: GREATER
4504: IFFALSE 4522
// SetBName ( pom [ 1 ] , beria ) ;
4506: LD_VAR 0 2
4510: PUSH
4511: LD_INT 1
4513: ARRAY
4514: PPUSH
4515: LD_STRING beria
4517: PPUSH
4518: CALL_OW 500
// SetBName ( Am_dep , omikron ) ;
4522: LD_INT 12
4524: PPUSH
4525: LD_STRING omikron
4527: PPUSH
4528: CALL_OW 500
// end ;
4532: LD_VAR 0 1
4536: RET
// export function pojmenovani_kaganoviche ( base ) ; begin
4537: LD_INT 0
4539: PPUSH
// SetBName ( base , kagan ) ;
4540: LD_VAR 0 1
4544: PPUSH
4545: LD_STRING kagan
4547: PPUSH
4548: CALL_OW 500
// end ; end_of_file
4552: LD_VAR 0 2
4556: RET
// export kur ; export pop ; export bur ; export kov ; export gny ; export bel ; export schol ; export schol2 ; export grishko ; export Rusi_enter ; export scholtze_saved ; export stav_aut ; export stav_omikron ; export RU_videl_oil ; var counter_zapnut ; export setkani_om ; var R_comp ; export Rusi_utekli ; export Rusi_save ; var dialog_probehnul ; var qrefuel_over ; export kecy_scholtze_nalezen ; export konec_counteru ; export stav_aut_new ; export postavenych_aut ; var TTime ; export special_time ; every 0 0$0.1 do var i ;
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
// begin schol = 0 ;
4563: LD_ADDR_EXP 33
4567: PUSH
4568: LD_INT 0
4570: ST_TO_ADDR
// scholtze_saved = false ;
4571: LD_ADDR_EXP 37
4575: PUSH
4576: LD_INT 0
4578: ST_TO_ADDR
// stav_omikron = 0 ;
4579: LD_ADDR_EXP 39
4583: PUSH
4584: LD_INT 0
4586: ST_TO_ADDR
// stav_aut = 0 ;
4587: LD_ADDR_EXP 38
4591: PUSH
4592: LD_INT 0
4594: ST_TO_ADDR
// RU_videl_oil = false ;
4595: LD_ADDR_EXP 40
4599: PUSH
4600: LD_INT 0
4602: ST_TO_ADDR
// counter_zapnut = false ;
4603: LD_ADDR_LOC 17
4607: PUSH
4608: LD_INT 0
4610: ST_TO_ADDR
// setkani_om = false ;
4611: LD_ADDR_EXP 41
4615: PUSH
4616: LD_INT 0
4618: ST_TO_ADDR
// R_comp = [ ] ;
4619: LD_ADDR_LOC 18
4623: PUSH
4624: EMPTY
4625: ST_TO_ADDR
// Rusi_utekli = [ ] ;
4626: LD_ADDR_EXP 42
4630: PUSH
4631: EMPTY
4632: ST_TO_ADDR
// Rusi_save = [ ] ;
4633: LD_ADDR_EXP 43
4637: PUSH
4638: EMPTY
4639: ST_TO_ADDR
// dialog_probehnul = false ;
4640: LD_ADDR_LOC 19
4644: PUSH
4645: LD_INT 0
4647: ST_TO_ADDR
// qrefuel_over = false ;
4648: LD_ADDR_LOC 20
4652: PUSH
4653: LD_INT 0
4655: ST_TO_ADDR
// kecy_scholtze_nalezen = false ;
4656: LD_ADDR_EXP 44
4660: PUSH
4661: LD_INT 0
4663: ST_TO_ADDR
// postavenych_aut = 0 ;
4664: LD_ADDR_EXP 47
4668: PUSH
4669: LD_INT 0
4671: ST_TO_ADDR
// TTime = 0 ;
4672: LD_ADDR_LOC 21
4676: PUSH
4677: LD_INT 0
4679: ST_TO_ADDR
// konec_counteru = false ;
4680: LD_ADDR_EXP 45
4684: PUSH
4685: LD_INT 0
4687: ST_TO_ADDR
// stav_aut_new = 0 ;
4688: LD_ADDR_EXP 46
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// special_time = false ;
4696: LD_ADDR_EXP 48
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 6 , 7 , 8 , 9 , 10 , 51 , 52 , 53 , 200 , 201 , 202 , 203 ] do
4704: LD_ADDR_VAR 0 1
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 2
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 6
4720: PUSH
4721: LD_INT 7
4723: PUSH
4724: LD_INT 8
4726: PUSH
4727: LD_INT 9
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: LD_INT 51
4735: PUSH
4736: LD_INT 52
4738: PUSH
4739: LD_INT 53
4741: PUSH
4742: LD_INT 200
4744: PUSH
4745: LD_INT 201
4747: PUSH
4748: LD_INT 202
4750: PUSH
4751: LD_INT 203
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: PUSH
4771: FOR_IN
4772: IFFALSE 4781
// disable ( i ) ;
4774: LD_VAR 0 1
4778: DISABLE_MARKED
4779: GO 4771
4781: POP
4782: POP
// end ;
4783: PPOPN 1
4785: END
// export function uklid_rusu ; begin
4786: LD_INT 0
4788: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
4789: LD_INT 42
4791: PPUSH
4792: LD_INT 3
4794: PPUSH
4795: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
4799: LD_INT 43
4801: PPUSH
4802: LD_INT 4
4804: PPUSH
4805: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab2 ) ;
4809: LD_INT 44
4811: PPUSH
4812: LD_INT 16
4814: PPUSH
4815: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab2 ) ;
4819: LD_INT 45
4821: PPUSH
4822: LD_INT 16
4824: PPUSH
4825: CALL_OW 120
// ComEnterUnit ( RU1_sci3 , RU1_lab2 ) ;
4829: LD_INT 46
4831: PPUSH
4832: LD_INT 16
4834: PPUSH
4835: CALL_OW 120
// ComEnterUnit ( RU1_sci4 , RU1_lab1 ) ;
4839: LD_INT 47
4841: PPUSH
4842: LD_INT 6
4844: PPUSH
4845: CALL_OW 120
// ComEnterUnit ( RU1_sci5 , RU1_lab1 ) ;
4849: LD_INT 48
4851: PPUSH
4852: LD_INT 6
4854: PPUSH
4855: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_fac ) ;
4859: LD_INT 49
4861: PPUSH
4862: LD_INT 5
4864: PPUSH
4865: CALL_OW 120
// ComEnterUnit ( RU1_me2 , RU1_fac ) ;
4869: LD_INT 50
4871: PPUSH
4872: LD_INT 5
4874: PPUSH
4875: CALL_OW 120
// ComEnterUnit ( RU1_me3 , RU1_fac ) ;
4879: LD_INT 51
4881: PPUSH
4882: LD_INT 5
4884: PPUSH
4885: CALL_OW 120
// ComEnterUnit ( pop , RU1_bar1 ) ;
4889: LD_EXP 28
4893: PPUSH
4894: LD_INT 2
4896: PPUSH
4897: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar1 ) ;
4901: LD_INT 52
4903: PPUSH
4904: LD_INT 2
4906: PPUSH
4907: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar1 ) ;
4911: LD_INT 53
4913: PPUSH
4914: LD_INT 2
4916: PPUSH
4917: CALL_OW 120
// ComEnterUnit ( RU1_sol3 , RU1_bar2 ) ;
4921: LD_INT 56
4923: PPUSH
4924: LD_INT 17
4926: PPUSH
4927: CALL_OW 120
// ComEnterUnit ( RU1_sol4 , RU1_bar2 ) ;
4931: LD_INT 54
4933: PPUSH
4934: LD_INT 17
4936: PPUSH
4937: CALL_OW 120
// ComEnterUnit ( RU1_sol5 , RU1_bar2 ) ;
4941: LD_INT 55
4943: PPUSH
4944: LD_INT 17
4946: PPUSH
4947: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
4951: LD_INT 57
4953: PPUSH
4954: LD_INT 1
4956: PPUSH
4957: CALL_OW 120
// end ;
4961: LD_VAR 0 1
4965: RET
// every 5 5$30 do var pom ;
4966: GO 4968
4968: DISABLE
4969: LD_INT 0
4971: PPUSH
// begin schol2 = create_scholtze ;
4972: LD_ADDR_EXP 34
4976: PUSH
4977: CALL 2142 0 0
4981: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4982: LD_INT 70
4984: PPUSH
4985: CALL_OW 67
// CenterNowOnUnits ( schol2 ) ;
4989: LD_EXP 34
4993: PPUSH
4994: CALL_OW 87
// dialog_scholtze_enter ;
4998: CALL 10968 0 0
// ComMoveToArea ( schol2 , scholze_flee ) ;
5002: LD_EXP 34
5006: PPUSH
5007: LD_INT 45
5009: PPUSH
5010: CALL_OW 113
// AddComHold ( schol2 ) ;
5014: LD_EXP 34
5018: PPUSH
5019: CALL_OW 200
// wait ( 0 0$5 ) ;
5023: LD_INT 175
5025: PPUSH
5026: CALL_OW 67
// amici_hlidka ;
5030: CALL 22770 0 0
// enable ( 1 ) ;
5034: LD_INT 1
5036: ENABLE_MARKED
// end ;
5037: PPOPN 1
5039: END
// every 0 0$1 trigger FilterUnitsInArea ( Schol_les , [ [ f_side , You ] ] ) > 0 marked 1 do
5040: LD_INT 26
5042: PPUSH
5043: LD_INT 22
5045: PUSH
5046: LD_EXP 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: PPUSH
5058: CALL_OW 70
5062: PUSH
5063: LD_INT 0
5065: GREATER
5066: IFFALSE 5140
5068: GO 5070
5070: DISABLE
// begin kecy_scholtze_nalezen = true ;
5071: LD_ADDR_EXP 44
5075: PUSH
5076: LD_INT 1
5078: ST_TO_ADDR
// dialog_scholtze_nalezen ;
5079: CALL 11040 0 0
// SetSide ( schol2 , You ) ;
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 1
5092: PPUSH
5093: CALL_OW 235
// schol = schol2 ;
5097: LD_ADDR_EXP 33
5101: PUSH
5102: LD_EXP 34
5106: ST_TO_ADDR
// ChangeMissionObjectives ( MScholtzeOut ) ;
5107: LD_STRING MScholtzeOut
5109: PPUSH
5110: CALL_OW 337
// wait ( 1 1$0 ) ;
5114: LD_INT 2100
5116: PPUSH
5117: CALL_OW 67
// if IsLive ( schol ) then
5121: LD_EXP 33
5125: PPUSH
5126: CALL_OW 300
5130: IFFALSE 5140
// scholtze_saved = true ;
5132: LD_ADDR_EXP 37
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// end ;
5140: END
// every 1 1$0 do
5141: GO 5143
5143: DISABLE
// begin if GetResourceType ( GetBase ( RU1_dep ) , mat_oil ) < 50 then
5144: LD_INT 1
5146: PPUSH
5147: CALL_OW 274
5151: PPUSH
5152: LD_INT 2
5154: PPUSH
5155: CALL_OW 275
5159: PUSH
5160: LD_INT 50
5162: LESS
5163: IFFALSE 5183
// AddResourceType ( GetBase ( RU1_dep ) , mat_oil , 100 ) ;
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 274
5172: PPUSH
5173: LD_INT 2
5175: PPUSH
5176: LD_INT 100
5178: PPUSH
5179: CALL_OW 276
// enable ;
5183: ENABLE
// end ;
5184: END
// every 1 1$7 do
5185: GO 5187
5187: DISABLE
// begin if Researched ( You2 , tech_Weap1 ) then
5188: LD_EXP 2
5192: PPUSH
5193: LD_INT 51
5195: PPUSH
5196: CALL_OW 325
5200: IFFALSE 5227
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5202: LD_INT 51
5204: PPUSH
5205: LD_EXP 2
5209: PPUSH
5210: LD_INT 1
5212: PPUSH
5213: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5217: LD_INT 6
5219: PPUSH
5220: LD_INT 51
5222: PPUSH
5223: CALL_OW 124
// end ; enable ;
5227: ENABLE
// end ;
5228: END
// every 0 0$19 do
5229: GO 5231
5231: DISABLE
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5232: LD_INT 51
5234: PPUSH
5235: LD_EXP 2
5239: PPUSH
5240: LD_INT 1
5242: PPUSH
5243: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5247: LD_INT 6
5249: PPUSH
5250: LD_INT 51
5252: PPUSH
5253: CALL_OW 124
// end ;
5257: END
// every 0 0$5 trigger stav_omikron = 2 do
5258: LD_EXP 39
5262: PUSH
5263: LD_INT 2
5265: EQUAL
5266: IFFALSE 5309
5268: GO 5270
5270: DISABLE
// begin TTime = 7 7$0 ;
5271: LD_ADDR_LOC 21
5275: PUSH
5276: LD_INT 14700
5278: ST_TO_ADDR
// enable ( 53 ) ;
5279: LD_INT 53
5281: ENABLE_MARKED
// wait ( 7 7$0 ) ;
5282: LD_INT 14700
5284: PPUSH
5285: CALL_OW 67
// special_time = true ;
5289: LD_ADDR_EXP 48
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// hlaska_omicron ;
5297: CALL 12637 0 0
// stav_omikron = 3 ;
5301: LD_ADDR_EXP 39
5305: PUSH
5306: LD_INT 3
5308: ST_TO_ADDR
// end ;
5309: END
// export function popov_ven ; var i ; begin
5310: LD_INT 0
5312: PPUSH
5313: PPUSH
// for i = 1 to 8 do
5314: LD_ADDR_VAR 0 2
5318: PUSH
5319: DOUBLE
5320: LD_INT 1
5322: DEC
5323: ST_TO_ADDR
5324: LD_INT 8
5326: PUSH
5327: FOR_TO
5328: IFFALSE 5346
// DoNotAttack ( i , pop ) ;
5330: LD_VAR 0 2
5334: PPUSH
5335: LD_EXP 28
5339: PPUSH
5340: CALL_OW 471
5344: GO 5327
5346: POP
5347: POP
// while IsInUnit ( pop ) > 0 do
5348: LD_EXP 28
5352: PPUSH
5353: CALL_OW 310
5357: PUSH
5358: LD_INT 0
5360: GREATER
5361: IFFALSE 5428
// begin case GetType ( IsInUnit ( pop ) ) of unit_building :
5363: LD_EXP 28
5367: PPUSH
5368: CALL_OW 310
5372: PPUSH
5373: CALL_OW 247
5377: PUSH
5378: LD_INT 3
5380: DOUBLE
5381: EQUAL
5382: IFTRUE 5386
5384: GO 5398
5386: POP
// ComExitBuilding ( pop ) ; unit_vehicle :
5387: LD_EXP 28
5391: PPUSH
5392: CALL_OW 122
5396: GO 5419
5398: LD_INT 2
5400: DOUBLE
5401: EQUAL
5402: IFTRUE 5406
5404: GO 5418
5406: POP
// ComExitVehicle ( pop ) ; end ;
5407: LD_EXP 28
5411: PPUSH
5412: CALL_OW 121
5416: GO 5419
5418: POP
// wait ( 0 0$0.5 ) ;
5419: LD_INT 18
5421: PPUSH
5422: CALL_OW 67
// end ;
5426: GO 5348
// AddComMoveToArea ( pop , bst_2 ) ;
5428: LD_EXP 28
5432: PPUSH
5433: LD_INT 41
5435: PPUSH
5436: CALL_OW 173
// AddComMoveToArea ( pop , bst_3 ) ;
5440: LD_EXP 28
5444: PPUSH
5445: LD_INT 42
5447: PPUSH
5448: CALL_OW 173
// AddComHold ( pop ) ;
5452: LD_EXP 28
5456: PPUSH
5457: CALL_OW 200
// end ;
5461: LD_VAR 0 1
5465: RET
// every 0 0$5 trigger IsInArea ( pop , Exit_area ) do
5466: LD_EXP 28
5470: PPUSH
5471: LD_INT 16
5473: PPUSH
5474: CALL_OW 308
5478: IFFALSE 5492
5480: GO 5482
5482: DISABLE
// begin RemoveUnit ( pop ) ;
5483: LD_EXP 28
5487: PPUSH
5488: CALL_OW 64
// end ;
5492: END
// export function prebarveni_druhe_baze ; var pom , i ; begin
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
5497: PPUSH
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You3 ] , [ f_type , unit_building ] ] ) ;
5498: LD_ADDR_VAR 0 2
5502: PUSH
5503: LD_INT 2
5505: PPUSH
5506: LD_INT 22
5508: PUSH
5509: LD_EXP 3
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PUSH
5518: LD_INT 21
5520: PUSH
5521: LD_INT 3
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PPUSH
5532: CALL_OW 70
5536: ST_TO_ADDR
// for i in pom do
5537: LD_ADDR_VAR 0 3
5541: PUSH
5542: LD_VAR 0 2
5546: PUSH
5547: FOR_IN
5548: IFFALSE 5566
// SetSide ( i , You ) ;
5550: LD_VAR 0 3
5554: PPUSH
5555: LD_EXP 1
5559: PPUSH
5560: CALL_OW 235
5564: GO 5547
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 1
5572: RET
// export function pomoc_pro_omikroni_utok ; var i ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
// for i in RUSKE_POSILY_NA_OMICRON_LIST do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_EXP 56
5586: PUSH
5587: FOR_IN
5588: IFFALSE 5607
// PlaceUnitArea ( i , Enterposil , false ) ;
5590: LD_VAR 0 2
5594: PPUSH
5595: LD_INT 49
5597: PPUSH
5598: LD_INT 0
5600: PPUSH
5601: CALL_OW 49
5605: GO 5587
5607: POP
5608: POP
// ComMoveToArea ( RUSKE_POSILY_NA_OMICRON_LIST , bst_4 ) ;
5609: LD_EXP 56
5613: PPUSH
5614: LD_INT 43
5616: PPUSH
5617: CALL_OW 113
// for i in RUSKE_POSILY_RIDICI_LIST do
5621: LD_ADDR_VAR 0 2
5625: PUSH
5626: LD_EXP 57
5630: PUSH
5631: FOR_IN
5632: IFFALSE 5651
// PlaceUnitArea ( i , Arabi1 , false ) ;
5634: LD_VAR 0 2
5638: PPUSH
5639: LD_INT 12
5641: PPUSH
5642: LD_INT 0
5644: PPUSH
5645: CALL_OW 49
5649: GO 5631
5651: POP
5652: POP
// ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , bst_1 ) ;
5653: LD_EXP 57
5657: PPUSH
5658: LD_INT 40
5660: PPUSH
5661: CALL_OW 113
// AddComEnterUnit ( RUSKE_POSILY_RIDICI_LIST , RU1_fac ) ;
5665: LD_EXP 57
5669: PPUSH
5670: LD_INT 5
5672: PPUSH
5673: CALL_OW 180
// end ;
5677: LD_VAR 0 1
5681: RET
// every 0 0$1 trigger stav_omikron = 3 and not special_time do
5682: LD_EXP 39
5686: PUSH
5687: LD_INT 3
5689: EQUAL
5690: PUSH
5691: LD_EXP 48
5695: NOT
5696: AND
5697: IFFALSE 5731
5699: GO 5701
5701: DISABLE
// begin disable ( 53 ) ;
5702: LD_INT 53
5704: DISABLE_MARKED
// TTime = 3 3$0 ;
5705: LD_ADDR_LOC 21
5709: PUSH
5710: LD_INT 6300
5712: ST_TO_ADDR
// enable ( 51 ) ;
5713: LD_INT 51
5715: ENABLE_MARKED
// counter_zapnut = true ;
5716: LD_ADDR_LOC 17
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// posli_ruske_posily ;
5724: CALL 6231 0 0
// enable ( 3 ) ;
5728: LD_INT 3
5730: ENABLE_MARKED
// end ;
5731: END
// every 0 0$1 trigger stav_omikron = 3 and special_time do
5732: LD_EXP 39
5736: PUSH
5737: LD_INT 3
5739: EQUAL
5740: PUSH
5741: LD_EXP 48
5745: AND
5746: IFFALSE 5780
5748: GO 5750
5750: DISABLE
// begin disable ( 53 ) ;
5751: LD_INT 53
5753: DISABLE_MARKED
// TTime = 2 2$0 ;
5754: LD_ADDR_LOC 21
5758: PUSH
5759: LD_INT 4200
5761: ST_TO_ADDR
// enable ( 51 ) ;
5762: LD_INT 51
5764: ENABLE_MARKED
// counter_zapnut = true ;
5765: LD_ADDR_LOC 17
5769: PUSH
5770: LD_INT 1
5772: ST_TO_ADDR
// posli_ruske_posily ;
5773: CALL 6231 0 0
// enable ( 3 ) ;
5777: LD_INT 3
5779: ENABLE_MARKED
// end ;
5780: END
// every 0 0$3 trigger stav_omikron = 3 do var i , pom , pom1 , pom2 , rpom ; var rusi_enter_new ; var poc ;
5781: LD_EXP 39
5785: PUSH
5786: LD_INT 3
5788: EQUAL
5789: IFFALSE 5983
5791: GO 5793
5793: DISABLE
5794: LD_INT 0
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
5802: PPUSH
// begin if FilterUnitsInArea ( Om_zone , [ [ f_side , You ] ] ) then
5803: LD_INT 8
5805: PPUSH
5806: LD_INT 22
5808: PUSH
5809: LD_EXP 1
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: PPUSH
5821: CALL_OW 70
5825: IFFALSE 5982
// begin rpom = FilterUnitsExceptArea ( Om_pom1 , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
5827: LD_ADDR_VAR 0 5
5831: PUSH
5832: LD_INT 23
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_EXP 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 1
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PPUSH
5861: CALL_OW 71
5865: ST_TO_ADDR
// if rpom = 0 then
5866: LD_VAR 0 5
5870: PUSH
5871: LD_INT 0
5873: EQUAL
5874: IFFALSE 5979
// begin disable ( 51 ) ;
5876: LD_INT 51
5878: DISABLE_MARKED
// disable ( 52 ) ;
5879: LD_INT 52
5881: DISABLE_MARKED
// konec_counteru = true ;
5882: LD_ADDR_EXP 45
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// poc = 0 ;
5890: LD_ADDR_VAR 0 7
5894: PUSH
5895: LD_INT 0
5897: ST_TO_ADDR
// while FilterUnitsInArea ( Om_zone , [ [ f_side , You2 ] ] ) = 0 and poc < 60 do
5898: LD_INT 8
5900: PPUSH
5901: LD_INT 22
5903: PUSH
5904: LD_EXP 2
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PUSH
5913: EMPTY
5914: LIST
5915: PPUSH
5916: CALL_OW 70
5920: PUSH
5921: LD_INT 0
5923: EQUAL
5924: PUSH
5925: LD_VAR 0 7
5929: PUSH
5930: LD_INT 60
5932: LESS
5933: AND
5934: IFFALSE 5959
// begin wait ( 0 0$1 ) ;
5936: LD_INT 35
5938: PPUSH
5939: CALL_OW 67
// poc = poc + 1 ;
5943: LD_ADDR_VAR 0 7
5947: PUSH
5948: LD_VAR 0 7
5952: PUSH
5953: LD_INT 1
5955: PLUS
5956: ST_TO_ADDR
// end ;
5957: GO 5898
// stav_omikron = 4 ;
5959: LD_ADDR_EXP 39
5963: PUSH
5964: LD_INT 4
5966: ST_TO_ADDR
// dialog_pred_omicronem ;
5967: CALL 12720 0 0
// enable ( 9 ) ;
5971: LD_INT 9
5973: ENABLE_MARKED
// disable ( 3 ) ;
5974: LD_INT 3
5976: DISABLE_MARKED
// end else
5977: GO 5980
// enable ;
5979: ENABLE
// end else
5980: GO 5983
// enable ;
5982: ENABLE
// end ;
5983: PPOPN 7
5985: END
// export function CheckVehicles ; var pom , pom1 , pom2 ; begin
5986: LD_INT 0
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
5992: LD_ADDR_VAR 0 2
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_EXP 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PUSH
6009: LD_INT 21
6011: PUSH
6012: LD_INT 2
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PPUSH
6023: CALL_OW 69
6027: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 22
6035: PUSH
6036: LD_EXP 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 21
6047: PUSH
6048: LD_INT 1
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 51
6057: PUSH
6058: EMPTY
6059: LIST
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: PPUSH
6066: CALL_OW 69
6070: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Ru2_base , [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
6071: LD_ADDR_VAR 0 4
6075: PUSH
6076: LD_INT 2
6078: PPUSH
6079: LD_INT 22
6081: PUSH
6082: LD_EXP 2
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 21
6093: PUSH
6094: LD_INT 2
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 70
6109: ST_TO_ADDR
// pom = pom + pom2 ;
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: LD_VAR 0 2
6119: PUSH
6120: LD_VAR 0 4
6124: PLUS
6125: ST_TO_ADDR
// if pom < pom1 then
6126: LD_VAR 0 2
6130: PUSH
6131: LD_VAR 0 3
6135: LESS
6136: IFFALSE 6146
// stav_aut_new = 3 ;
6138: LD_ADDR_EXP 46
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// if pom = pom1 then
6146: LD_VAR 0 2
6150: PUSH
6151: LD_VAR 0 3
6155: EQUAL
6156: IFFALSE 6166
// stav_aut_new = 2 ;
6158: LD_ADDR_EXP 46
6162: PUSH
6163: LD_INT 2
6165: ST_TO_ADDR
// if pom > pom1 and KurinAddTime = 0 then
6166: LD_VAR 0 2
6170: PUSH
6171: LD_VAR 0 3
6175: GREATER
6176: PUSH
6177: LD_EXP 7
6181: PUSH
6182: LD_INT 0
6184: EQUAL
6185: AND
6186: IFFALSE 6196
// stav_aut_new = 1 ;
6188: LD_ADDR_EXP 46
6192: PUSH
6193: LD_INT 1
6195: ST_TO_ADDR
// if pom >= pom1 and KurinAddTime = 1 then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_VAR 0 3
6205: GREATEREQUAL
6206: PUSH
6207: LD_EXP 7
6211: PUSH
6212: LD_INT 1
6214: EQUAL
6215: AND
6216: IFFALSE 6226
// stav_aut_new = 2 ;
6218: LD_ADDR_EXP 46
6222: PUSH
6223: LD_INT 2
6225: ST_TO_ADDR
// end ;
6226: LD_VAR 0 1
6230: RET
// function posli_ruske_posily ; begin
6231: LD_INT 0
6233: PPUSH
// McMove ( 1 , RUSKE_POSILY_NA_OMICRON_LIST , [ [ 109 , 54 ] , [ 102 , 38 ] , [ 90 , 22 ] , [ 54 , 10 ] ] , [ mc_move_dontcapture ] ) ;
6234: LD_INT 1
6236: PPUSH
6237: LD_EXP 56
6241: PPUSH
6242: LD_INT 109
6244: PUSH
6245: LD_INT 54
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: LD_INT 102
6254: PUSH
6255: LD_INT 38
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 90
6264: PUSH
6265: LD_INT 22
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 54
6274: PUSH
6275: LD_INT 10
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PPUSH
6288: LD_INT 5
6290: PUSH
6291: EMPTY
6292: LIST
6293: PPUSH
6294: CALL_OW 398
// end ;
6298: LD_VAR 0 1
6302: RET
// every 0 0$7 marked 2 do var pom ;
6303: GO 6305
6305: DISABLE
6306: LD_INT 0
6308: PPUSH
// begin ComExitBuilding ( RUSKE_POSILY_RIDICI_LIST ) ;
6309: LD_EXP 57
6313: PPUSH
6314: CALL_OW 122
// while FilterUnitsInArea ( RU2_base , [ [ f_side , You2 ] ] ) < RUSKE_POSILY_RIDICI_LIST do
6318: LD_INT 2
6320: PPUSH
6321: LD_INT 22
6323: PUSH
6324: LD_EXP 2
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: EMPTY
6334: LIST
6335: PPUSH
6336: CALL_OW 70
6340: PUSH
6341: LD_EXP 57
6345: LESS
6346: IFFALSE 6369
// begin ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , drivers_enter ) ;
6348: LD_EXP 57
6352: PPUSH
6353: LD_INT 47
6355: PPUSH
6356: CALL_OW 113
// wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// end ;
6367: GO 6318
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
6369: LD_ADDR_VAR 0 1
6373: PUSH
6374: LD_INT 2
6376: PPUSH
6377: LD_INT 22
6379: PUSH
6380: LD_EXP 1
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 21
6391: PUSH
6392: LD_INT 2
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 3
6401: PUSH
6402: LD_INT 59
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 70
6418: ST_TO_ADDR
// if not pom then
6419: LD_VAR 0 1
6423: NOT
6424: IFFALSE 6430
// konec_mise_lhani ;
6426: CALL 1273 0 0
// end ;
6430: PPOPN 1
6432: END
// every 0 0$1 marked 3 do
6433: GO 6435
6435: DISABLE
// begin if special_time then
6436: LD_EXP 48
6440: IFFALSE 6451
// wait ( 2 2$0 ) else
6442: LD_INT 4200
6444: PPUSH
6445: CALL_OW 67
6449: GO 6458
// wait ( 3 3$0 ) ;
6451: LD_INT 6300
6453: PPUSH
6454: CALL_OW 67
// if not setkani_om then
6458: LD_EXP 41
6462: NOT
6463: IFFALSE 6501
// begin dialog_upoz ;
6465: CALL 15010 0 0
// TTime = 2 2$0 ;
6469: LD_ADDR_LOC 21
6473: PUSH
6474: LD_INT 4200
6476: ST_TO_ADDR
// disable ( 51 ) ;
6477: LD_INT 51
6479: DISABLE_MARKED
// enable ( 52 ) ;
6480: LD_INT 52
6482: ENABLE_MARKED
// wait ( 2 2$0 ) ;
6483: LD_INT 4200
6485: PPUSH
6486: CALL_OW 67
// if not setkani_om then
6490: LD_EXP 41
6494: NOT
6495: IFFALSE 6501
// konec_pred_omikronem ;
6497: CALL 1292 0 0
// end ; end ;
6501: END
// every 0 0$1 marked 4 do var pom ;
6502: GO 6504
6504: DISABLE
6505: LD_INT 0
6507: PPUSH
// begin wait ( utok_na_omikron - 5 5$0 ) ;
6508: LD_EXP 19
6512: PUSH
6513: LD_INT 10500
6515: MINUS
6516: PPUSH
6517: CALL_OW 67
// pomoc_pro_omikroni_utok ;
6521: CALL 5573 0 0
// wait ( 5 5$0 ) ;
6525: LD_INT 10500
6527: PPUSH
6528: CALL_OW 67
// disable ( 5 ) ;
6532: LD_INT 5
6534: DISABLE_MARKED
// if dialog_probehnul then
6535: LD_LOC 19
6539: IFFALSE 6545
// exit else
6541: GO 6653
6543: GO 6553
// dialog_probehnul := true ;
6545: LD_ADDR_LOC 19
6549: PUSH
6550: LD_INT 1
6552: ST_TO_ADDR
// pom = dialog_otazka_poctu_aut ;
6553: LD_ADDR_VAR 0 1
6557: PUSH
6558: CALL 12426 0 0
6562: ST_TO_ADDR
// case pom of 1 :
6563: LD_VAR 0 1
6567: PUSH
6568: LD_INT 1
6570: DOUBLE
6571: EQUAL
6572: IFTRUE 6576
6574: GO 6598
6576: POP
// begin stav_omikron = 3 ;
6577: LD_ADDR_EXP 39
6581: PUSH
6582: LD_INT 3
6584: ST_TO_ADDR
// stav_aut = 1 ;
6585: LD_ADDR_EXP 38
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// enable ( 2 ) ;
6593: LD_INT 2
6595: ENABLE_MARKED
// end ; 2 :
6596: GO 6653
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6625
6606: POP
// begin stav_omikron = 3 ;
6607: LD_ADDR_EXP 39
6611: PUSH
6612: LD_INT 3
6614: ST_TO_ADDR
// stav_aut = 2 ;
6615: LD_ADDR_EXP 38
6619: PUSH
6620: LD_INT 2
6622: ST_TO_ADDR
// end ; 3 :
6623: GO 6653
6625: LD_INT 3
6627: DOUBLE
6628: EQUAL
6629: IFTRUE 6633
6631: GO 6652
6633: POP
// begin stav_omikron = 2 ;
6634: LD_ADDR_EXP 39
6638: PUSH
6639: LD_INT 2
6641: ST_TO_ADDR
// stav_aut = 3 ;
6642: LD_ADDR_EXP 38
6646: PUSH
6647: LD_INT 3
6649: ST_TO_ADDR
// end ; end ;
6650: GO 6653
6652: POP
// end ;
6653: PPOPN 1
6655: END
// every 0 0$17 trigger stav_omikron < 2 marked 5 do var un , veh ;
6656: LD_EXP 39
6660: PUSH
6661: LD_INT 2
6663: LESS
6664: IFFALSE 6896
6666: GO 6668
6668: DISABLE
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
// begin un = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_EXP 1
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 21
6692: PUSH
6693: LD_INT 1
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_INT 22
6716: PUSH
6717: LD_EXP 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 21
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 69
6744: ST_TO_ADDR
// if veh >= ( un + 2 ) then
6745: LD_VAR 0 2
6749: PUSH
6750: LD_VAR 0 1
6754: PUSH
6755: LD_INT 2
6757: PLUS
6758: GREATEREQUAL
6759: IFFALSE 6895
// begin disable ( 4 ) ;
6761: LD_INT 4
6763: DISABLE_MARKED
// pomoc_pro_omikroni_utok ;
6764: CALL 5573 0 0
// if dialog_probehnul then
6768: LD_LOC 19
6772: IFFALSE 6778
// exit else
6774: GO 6896
6776: GO 6786
// dialog_probehnul = true ;
6778: LD_ADDR_LOC 19
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// wait ( 0 0$10 ) ;
6786: LD_INT 350
6788: PPUSH
6789: CALL_OW 67
// un = dialog_otazka_poctu_aut ;
6793: LD_ADDR_VAR 0 1
6797: PUSH
6798: CALL 12426 0 0
6802: ST_TO_ADDR
// case un of 1 :
6803: LD_VAR 0 1
6807: PUSH
6808: LD_INT 1
6810: DOUBLE
6811: EQUAL
6812: IFTRUE 6816
6814: GO 6838
6816: POP
// begin stav_omikron = 3 ;
6817: LD_ADDR_EXP 39
6821: PUSH
6822: LD_INT 3
6824: ST_TO_ADDR
// stav_aut = 1 ;
6825: LD_ADDR_EXP 38
6829: PUSH
6830: LD_INT 1
6832: ST_TO_ADDR
// enable ( 2 ) ;
6833: LD_INT 2
6835: ENABLE_MARKED
// end ; 2 :
6836: GO 6893
6838: LD_INT 2
6840: DOUBLE
6841: EQUAL
6842: IFTRUE 6846
6844: GO 6865
6846: POP
// begin stav_omikron = 3 ;
6847: LD_ADDR_EXP 39
6851: PUSH
6852: LD_INT 3
6854: ST_TO_ADDR
// stav_aut = 2 ;
6855: LD_ADDR_EXP 38
6859: PUSH
6860: LD_INT 2
6862: ST_TO_ADDR
// end ; 3 :
6863: GO 6893
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 6892
6873: POP
// begin stav_omikron = 2 ;
6874: LD_ADDR_EXP 39
6878: PUSH
6879: LD_INT 2
6881: ST_TO_ADDR
// stav_aut = 3 ;
6882: LD_ADDR_EXP 38
6886: PUSH
6887: LD_INT 3
6889: ST_TO_ADDR
// end ; end ;
6890: GO 6893
6892: POP
// end else
6893: GO 6896
// enable ;
6895: ENABLE
// end ;
6896: PPOPN 2
6898: END
// export function manage_ruske_computery_zpet ; var pom ; begin
6899: LD_INT 0
6901: PPUSH
6902: PPUSH
// disable ( 200 ) ;
6903: LD_INT 200
6905: DISABLE_MARKED
// disable ( 201 ) ;
6906: LD_INT 201
6908: DISABLE_MARKED
// disable ( 202 ) ;
6909: LD_INT 202
6911: DISABLE_MARKED
// disable ( 203 ) ;
6912: LD_INT 203
6914: DISABLE_MARKED
// pom = FilterUnitsInArea ( Am_base , [ [ F_side , You2 ] ] ) ;
6915: LD_ADDR_VAR 0 2
6919: PUSH
6920: LD_INT 6
6922: PPUSH
6923: LD_INT 22
6925: PUSH
6926: LD_EXP 2
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: EMPTY
6936: LIST
6937: PPUSH
6938: CALL_OW 70
6942: ST_TO_ADDR
// McMove ( 2 , pom , [ [ 42 , 14 ] , [ 60 , 15 ] , [ 95 , 21 ] , [ 100 , 34 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
6943: LD_INT 2
6945: PPUSH
6946: LD_VAR 0 2
6950: PPUSH
6951: LD_INT 42
6953: PUSH
6954: LD_INT 14
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 60
6963: PUSH
6964: LD_INT 15
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 95
6973: PUSH
6974: LD_INT 21
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 100
6983: PUSH
6984: LD_INT 34
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: LD_INT 6
6999: PUSH
7000: LD_INT 1
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 398
// enable ( 5 ) ;
7015: LD_INT 5
7017: ENABLE_MARKED
// R_comp = pom ;
7018: LD_ADDR_LOC 18
7022: PUSH
7023: LD_VAR 0 2
7027: ST_TO_ADDR
// end ;
7028: LD_VAR 0 1
7032: RET
// every 0 0$15 marked 5 do
7033: GO 7035
7035: DISABLE
// begin wait ( 1 1$0 ) ;
7036: LD_INT 2100
7038: PPUSH
7039: CALL_OW 67
// McMove ( 1 , R_comp , [ [ 110 , 59 ] , [ 129 , 75 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7043: LD_INT 1
7045: PPUSH
7046: LD_LOC 18
7050: PPUSH
7051: LD_INT 110
7053: PUSH
7054: LD_INT 59
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 129
7063: PUSH
7064: LD_INT 75
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: LD_INT 6
7077: PUSH
7078: LD_INT 1
7080: PUSH
7081: LD_INT 3
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 398
// end ;
7093: END
// function split_ruske_jednotky ( jedn ) ; var i , pom ; var p1 , p2 , p3 , p4 ; var a ; begin
7094: LD_INT 0
7096: PPUSH
7097: PPUSH
7098: PPUSH
7099: PPUSH
7100: PPUSH
7101: PPUSH
7102: PPUSH
7103: PPUSH
// p1 = [ ] ;
7104: LD_ADDR_VAR 0 5
7108: PUSH
7109: EMPTY
7110: ST_TO_ADDR
// p2 = [ ] ;
7111: LD_ADDR_VAR 0 6
7115: PUSH
7116: EMPTY
7117: ST_TO_ADDR
// p3 = [ ] ;
7118: LD_ADDR_VAR 0 7
7122: PUSH
7123: EMPTY
7124: ST_TO_ADDR
// p4 = [ ] ;
7125: LD_ADDR_VAR 0 8
7129: PUSH
7130: EMPTY
7131: ST_TO_ADDR
// for i in jedn do
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 1
7141: PUSH
7142: FOR_IN
7143: IFFALSE 7277
// begin pom = Rand ( 1 , 4 ) ;
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: LD_INT 1
7152: PPUSH
7153: LD_INT 4
7155: PPUSH
7156: CALL_OW 12
7160: ST_TO_ADDR
// case pom of 1 :
7161: LD_VAR 0 4
7165: PUSH
7166: LD_INT 1
7168: DOUBLE
7169: EQUAL
7170: IFTRUE 7174
7172: GO 7193
7174: POP
// p1 = p1 ^ i ; 2 :
7175: LD_ADDR_VAR 0 5
7179: PUSH
7180: LD_VAR 0 5
7184: PUSH
7185: LD_VAR 0 3
7189: ADD
7190: ST_TO_ADDR
7191: GO 7275
7193: LD_INT 2
7195: DOUBLE
7196: EQUAL
7197: IFTRUE 7201
7199: GO 7220
7201: POP
// p2 = p2 ^ i ; 3 :
7202: LD_ADDR_VAR 0 6
7206: PUSH
7207: LD_VAR 0 6
7211: PUSH
7212: LD_VAR 0 3
7216: ADD
7217: ST_TO_ADDR
7218: GO 7275
7220: LD_INT 3
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 7247
7228: POP
// p3 = p3 ^ i ; 4 :
7229: LD_ADDR_VAR 0 7
7233: PUSH
7234: LD_VAR 0 7
7238: PUSH
7239: LD_VAR 0 3
7243: ADD
7244: ST_TO_ADDR
7245: GO 7275
7247: LD_INT 4
7249: DOUBLE
7250: EQUAL
7251: IFTRUE 7255
7253: GO 7274
7255: POP
// p4 = p4 ^ i ; end ;
7256: LD_ADDR_VAR 0 8
7260: PUSH
7261: LD_VAR 0 8
7265: PUSH
7266: LD_VAR 0 3
7270: ADD
7271: ST_TO_ADDR
7272: GO 7275
7274: POP
// end ;
7275: GO 7142
7277: POP
7278: POP
// a = [ p1 , p2 , p3 , p4 ] ;
7279: LD_ADDR_VAR 0 9
7283: PUSH
7284: LD_VAR 0 5
7288: PUSH
7289: LD_VAR 0 6
7293: PUSH
7294: LD_VAR 0 7
7298: PUSH
7299: LD_VAR 0 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: ST_TO_ADDR
// result := a ;
7310: LD_ADDR_VAR 0 2
7314: PUSH
7315: LD_VAR 0 9
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 2
7324: RET
// every 0 0$1 marked 6 do var pom , i ;
7325: GO 7327
7327: DISABLE
7328: LD_INT 0
7330: PPUSH
7331: PPUSH
// begin pom = FilterUnitsInArea ( RU_odber , [ [ f_side , You2 ] ] ) ;
7332: LD_ADDR_VAR 0 1
7336: PUSH
7337: LD_INT 27
7339: PPUSH
7340: LD_INT 22
7342: PUSH
7343: LD_EXP 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: PPUSH
7355: CALL_OW 70
7359: ST_TO_ADDR
// if pom > 0 then
7360: LD_VAR 0 1
7364: PUSH
7365: LD_INT 0
7367: GREATER
7368: IFFALSE 7412
// begin Rusi_utekli = Rusi_utekli ^ pom ;
7370: LD_ADDR_EXP 42
7374: PUSH
7375: LD_EXP 42
7379: PUSH
7380: LD_VAR 0 1
7384: ADD
7385: ST_TO_ADDR
// for i in pom do
7386: LD_ADDR_VAR 0 2
7390: PUSH
7391: LD_VAR 0 1
7395: PUSH
7396: FOR_IN
7397: IFFALSE 7410
// RemoveUnit ( i ) ;
7399: LD_VAR 0 2
7403: PPUSH
7404: CALL_OW 64
7408: GO 7396
7410: POP
7411: POP
// end ; enable ;
7412: ENABLE
// end ;
7413: PPOPN 2
7415: END
// every 25 25$0 do var i , pom ;
7416: GO 7418
7418: DISABLE
7419: LD_INT 0
7421: PPUSH
7422: PPUSH
// begin for i in RU_posily_na_utek do
7423: LD_ADDR_VAR 0 1
7427: PUSH
7428: LD_EXP 58
7432: PUSH
7433: FOR_IN
7434: IFFALSE 7453
// PlaceUnitArea ( i , Ru_posily , false ) ;
7436: LD_VAR 0 1
7440: PPUSH
7441: LD_INT 28
7443: PPUSH
7444: LD_INT 0
7446: PPUSH
7447: CALL_OW 49
7451: GO 7433
7453: POP
7454: POP
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_type , unit_vehicle ] ] ) ;
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: LD_EXP 58
7464: PPUSH
7465: LD_INT 21
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: PPUSH
7478: CALL_OW 72
7482: ST_TO_ADDR
// ComMoveXY ( pom , 155 , 93 ) ;
7483: LD_VAR 0 2
7487: PPUSH
7488: LD_INT 155
7490: PPUSH
7491: LD_INT 93
7493: PPUSH
7494: CALL_OW 111
// Rusi_save = pom ;
7498: LD_ADDR_EXP 43
7502: PUSH
7503: LD_VAR 0 2
7507: ST_TO_ADDR
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_soldier ] ] ) ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: LD_EXP 58
7517: PPUSH
7518: LD_INT 25
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: PPUSH
7531: CALL_OW 72
7535: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_bar2 ) ;
7536: LD_VAR 0 2
7540: PPUSH
7541: LD_INT 17
7543: PPUSH
7544: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_mechanic ] ] ) ;
7548: LD_ADDR_VAR 0 2
7552: PUSH
7553: LD_EXP 58
7557: PPUSH
7558: LD_INT 25
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: PPUSH
7571: CALL_OW 72
7575: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_fac ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_INT 5
7583: PPUSH
7584: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_engineer ] ] ) ;
7588: LD_ADDR_VAR 0 2
7592: PUSH
7593: LD_EXP 58
7597: PPUSH
7598: LD_INT 25
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_dep ) ;
7616: LD_VAR 0 2
7620: PPUSH
7621: LD_INT 1
7623: PPUSH
7624: CALL_OW 120
// Rusi_save = Rusi_save ^ [ RU1_sol1 , RU1_me3 , Ru1_sci2 , RU1_sci5 , RU1_sci3 , RU1_sol5 , RU1_eng1 ] ;
7628: LD_ADDR_EXP 43
7632: PUSH
7633: LD_EXP 43
7637: PUSH
7638: LD_INT 52
7640: PUSH
7641: LD_INT 51
7643: PUSH
7644: LD_INT 45
7646: PUSH
7647: LD_INT 48
7649: PUSH
7650: LD_INT 46
7652: PUSH
7653: LD_INT 55
7655: PUSH
7656: LD_INT 57
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: ADD
7668: ST_TO_ADDR
// end ;
7669: PPOPN 2
7671: END
// export function posli_rusy_pryc ; var pom ; begin
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
// SetLives ( Rusi_save , 800 ) ;
7676: LD_EXP 43
7680: PPUSH
7681: LD_INT 800
7683: PPUSH
7684: CALL_OW 234
// pom = split_ruske_jednotky ( Rusi_save ) ;
7688: LD_ADDR_VAR 0 2
7692: PUSH
7693: LD_EXP 43
7697: PPUSH
7698: CALL 7094 0 1
7702: ST_TO_ADDR
// ComExitBuilding ( Rusi_save ) ;
7703: LD_EXP 43
7707: PPUSH
7708: CALL_OW 122
// AddComMoveXY ( pom [ 1 ] , 110 , 45 ) ;
7712: LD_VAR 0 2
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: LD_INT 110
7723: PPUSH
7724: LD_INT 45
7726: PPUSH
7727: CALL_OW 171
// AddComMoveXY ( pom [ 2 ] , 103 , 60 ) ;
7731: LD_VAR 0 2
7735: PUSH
7736: LD_INT 2
7738: ARRAY
7739: PPUSH
7740: LD_INT 103
7742: PPUSH
7743: LD_INT 60
7745: PPUSH
7746: CALL_OW 171
// AddComMoveXY ( pom [ 3 ] , 76 , 80 ) ;
7750: LD_VAR 0 2
7754: PUSH
7755: LD_INT 3
7757: ARRAY
7758: PPUSH
7759: LD_INT 76
7761: PPUSH
7762: LD_INT 80
7764: PPUSH
7765: CALL_OW 171
// AddComMoveXY ( pom [ 4 ] , 53 , 1 ) ;
7769: LD_VAR 0 2
7773: PUSH
7774: LD_INT 4
7776: ARRAY
7777: PPUSH
7778: LD_INT 53
7780: PPUSH
7781: LD_INT 1
7783: PPUSH
7784: CALL_OW 171
// end ;
7788: LD_VAR 0 1
7792: RET
// export function posli_lidi_zpet_omicron ; var pom ; var pom1 , i ; begin
7793: LD_INT 0
7795: PPUSH
7796: PPUSH
7797: PPUSH
7798: PPUSH
// pom1 = [ ] ;
7799: LD_ADDR_VAR 0 3
7803: PUSH
7804: EMPTY
7805: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_building ] , [ f_side , You ] ] ) ;
7806: LD_ADDR_VAR 0 2
7810: PUSH
7811: LD_INT 20
7813: PPUSH
7814: LD_INT 21
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: LD_EXP 1
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 70
7844: ST_TO_ADDR
// for i in pom do
7845: LD_ADDR_VAR 0 4
7849: PUSH
7850: LD_VAR 0 2
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7881
// pom1 = pom1 ^ UnitsInside ( i ) ;
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: LD_VAR 0 3
7867: PUSH
7868: LD_VAR 0 4
7872: PPUSH
7873: CALL_OW 313
7877: ADD
7878: ST_TO_ADDR
7879: GO 7855
7881: POP
7882: POP
// ComExitBuilding ( pom1 ) ;
7883: LD_VAR 0 3
7887: PPUSH
7888: CALL_OW 122
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , You ] ] ) ;
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_INT 20
7899: PPUSH
7900: LD_INT 21
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 22
7912: PUSH
7913: LD_EXP 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 70
7930: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
7931: LD_ADDR_VAR 0 3
7935: PUSH
7936: LD_VAR 0 3
7940: PUSH
7941: LD_VAR 0 2
7945: ADD
7946: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , You ] ] ) ;
7947: LD_ADDR_VAR 0 2
7951: PUSH
7952: LD_INT 20
7954: PPUSH
7955: LD_INT 21
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 22
7967: PUSH
7968: LD_EXP 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PPUSH
7981: CALL_OW 70
7985: ST_TO_ADDR
// for i in pom do
7986: LD_ADDR_VAR 0 4
7990: PUSH
7991: LD_VAR 0 2
7995: PUSH
7996: FOR_IN
7997: IFFALSE 8049
// begin pom1 = pom ^ i ;
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: LD_VAR 0 2
8008: PUSH
8009: LD_VAR 0 4
8013: ADD
8014: ST_TO_ADDR
// if IsDrivenBy ( i ) then
8015: LD_VAR 0 4
8019: PPUSH
8020: CALL_OW 311
8024: IFFALSE 8047
// pom1 = pom1 ^ IsDrivenBy ( i ) ;
8026: LD_ADDR_VAR 0 3
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: LD_VAR 0 4
8040: PPUSH
8041: CALL_OW 311
8045: ADD
8046: ST_TO_ADDR
// end ;
8047: GO 7996
8049: POP
8050: POP
// SetSide ( pom1 , You3 ) ;
8051: LD_VAR 0 3
8055: PPUSH
8056: LD_EXP 3
8060: PPUSH
8061: CALL_OW 235
// pom = FilterUnitsInArea ( Om_ven_1 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8065: LD_ADDR_VAR 0 2
8069: PUSH
8070: LD_INT 29
8072: PPUSH
8073: LD_INT 22
8075: PUSH
8076: LD_EXP 3
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 21
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 21
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PPUSH
8117: CALL_OW 70
8121: ST_TO_ADDR
// ComMoveXY ( pom , 79 , 16 ) ;
8122: LD_VAR 0 2
8126: PPUSH
8127: LD_INT 79
8129: PPUSH
8130: LD_INT 16
8132: PPUSH
8133: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_2 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: LD_INT 30
8144: PPUSH
8145: LD_INT 22
8147: PUSH
8148: LD_EXP 3
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: LD_INT 21
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 21
8172: PUSH
8173: LD_INT 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 70
8193: ST_TO_ADDR
// ComMoveXY ( pom , 67 , 40 ) ;
8194: LD_VAR 0 2
8198: PPUSH
8199: LD_INT 67
8201: PPUSH
8202: LD_INT 40
8204: PPUSH
8205: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_3 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_INT 31
8216: PPUSH
8217: LD_INT 22
8219: PUSH
8220: LD_EXP 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: LD_INT 2
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 2
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 21
8244: PUSH
8245: LD_INT 1
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 70
8265: ST_TO_ADDR
// ComMoveXY ( pom , 58 , 52 ) ;
8266: LD_VAR 0 2
8270: PPUSH
8271: LD_INT 58
8273: PPUSH
8274: LD_INT 52
8276: PPUSH
8277: CALL_OW 111
// end ;
8281: LD_VAR 0 1
8285: RET
// export function get_lidi_popov_area ; var pom , i ; var drv ; var a ; begin
8286: LD_INT 0
8288: PPUSH
8289: PPUSH
8290: PPUSH
8291: PPUSH
8292: PPUSH
// a = [ ] ;
8293: LD_ADDR_VAR 0 5
8297: PUSH
8298: EMPTY
8299: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
8300: LD_ADDR_VAR 0 2
8304: PUSH
8305: LD_INT 15
8307: PPUSH
8308: LD_INT 22
8310: PUSH
8311: LD_EXP 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 21
8322: PUSH
8323: LD_INT 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PPUSH
8334: CALL_OW 70
8338: ST_TO_ADDR
// a = pom ;
8339: LD_ADDR_VAR 0 5
8343: PUSH
8344: LD_VAR 0 2
8348: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
8349: LD_ADDR_VAR 0 2
8353: PUSH
8354: LD_INT 15
8356: PPUSH
8357: LD_INT 22
8359: PUSH
8360: LD_EXP 1
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 21
8371: PUSH
8372: LD_INT 2
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 70
8387: ST_TO_ADDR
// for i in pom do
8388: LD_ADDR_VAR 0 3
8392: PUSH
8393: LD_VAR 0 2
8397: PUSH
8398: FOR_IN
8399: IFFALSE 8457
// begin drv = IsDrivenBy ( i ) ;
8401: LD_ADDR_VAR 0 4
8405: PUSH
8406: LD_VAR 0 3
8410: PPUSH
8411: CALL_OW 311
8415: ST_TO_ADDR
// if ( not ( drv in a ) ) and ( drv <> 0 ) then
8416: LD_VAR 0 4
8420: PUSH
8421: LD_VAR 0 5
8425: IN
8426: NOT
8427: PUSH
8428: LD_VAR 0 4
8432: PUSH
8433: LD_INT 0
8435: NONEQUAL
8436: AND
8437: IFFALSE 8455
// a = a ^ drv ;
8439: LD_ADDR_VAR 0 5
8443: PUSH
8444: LD_VAR 0 5
8448: PUSH
8449: LD_VAR 0 4
8453: ADD
8454: ST_TO_ADDR
// end ;
8455: GO 8398
8457: POP
8458: POP
// result := a ;
8459: LD_ADDR_VAR 0 1
8463: PUSH
8464: LD_VAR 0 5
8468: ST_TO_ADDR
// end ;
8469: LD_VAR 0 1
8473: RET
// export function totalni_ukonceni_mise_v_ingame_videu ; var pom ; begin
8474: LD_INT 0
8476: PPUSH
8477: PPUSH
// InGameOn ;
8478: CALL_OW 8
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8482: LD_ADDR_VAR 0 2
8486: PUSH
8487: LD_INT 22
8489: PUSH
8490: LD_EXP 1
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 2
8501: PUSH
8502: LD_INT 21
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 21
8514: PUSH
8515: LD_INT 1
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PPUSH
8531: CALL_OW 69
8535: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8536: LD_INT 10
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: LD_INT 108
8546: PUSH
8547: LD_INT 70
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: LD_INT 77
8556: PUSH
8557: LD_INT 65
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: LD_INT 53
8566: PUSH
8567: LD_INT 63
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 40
8576: PUSH
8577: LD_INT 64
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 51
8586: PUSH
8587: LD_INT 97
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: PPUSH
8601: LD_INT 10
8603: PUSH
8604: LD_INT 5
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 398
// pom = FilterAllUnits ( [ [ f_side , You2 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8615: LD_ADDR_VAR 0 2
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_EXP 2
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 2
8634: PUSH
8635: LD_INT 21
8637: PUSH
8638: LD_INT 2
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 21
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 69
8668: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8669: LD_INT 10
8671: PPUSH
8672: LD_VAR 0 2
8676: PPUSH
8677: LD_INT 108
8679: PUSH
8680: LD_INT 70
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 77
8689: PUSH
8690: LD_INT 65
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 53
8699: PUSH
8700: LD_INT 63
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 40
8709: PUSH
8710: LD_INT 64
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 51
8719: PUSH
8720: LD_INT 97
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: PPUSH
8734: LD_INT 10
8736: PUSH
8737: LD_INT 5
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 398
// enable ( 7 ) ;
8748: LD_INT 7
8750: ENABLE_MARKED
// wait ( 0 0$10 ) ;
8751: LD_INT 350
8753: PPUSH
8754: CALL_OW 67
// InGameOff ;
8758: CALL_OW 9
// konec_mise ;
8762: CALL 1322 0 0
// end ;
8766: LD_VAR 0 1
8770: RET
// export function schovej_kurina ; begin
8771: LD_INT 0
8773: PPUSH
// ComEnterUnit ( kur , RU1_dep ) ;
8774: LD_EXP 27
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: CALL_OW 120
// end ;
8786: LD_VAR 0 1
8790: RET
// export function posli_kurina_na_smrt ; begin
8791: LD_INT 0
8793: PPUSH
// ComExitBuilding ( kur ) ;
8794: LD_EXP 27
8798: PPUSH
8799: CALL_OW 122
// end ;
8803: LD_VAR 0 1
8807: RET
// every 0 0$2 do var pom ; var i ;
8808: GO 8810
8810: DISABLE
8811: LD_INT 0
8813: PPUSH
8814: PPUSH
// begin pom = FilterUnitsExceptArea ( Om_ven , [ [ f_side , You3 ] ] ) ;
8815: LD_ADDR_VAR 0 1
8819: PUSH
8820: LD_INT 20
8822: PPUSH
8823: LD_INT 22
8825: PUSH
8826: LD_EXP 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: EMPTY
8836: LIST
8837: PPUSH
8838: CALL_OW 71
8842: ST_TO_ADDR
// for i in pom do
8843: LD_ADDR_VAR 0 2
8847: PUSH
8848: LD_VAR 0 1
8852: PUSH
8853: FOR_IN
8854: IFFALSE 8917
// begin if GetType ( i ) = unit_vehicle then
8856: LD_VAR 0 2
8860: PPUSH
8861: CALL_OW 247
8865: PUSH
8866: LD_INT 2
8868: EQUAL
8869: IFFALSE 8901
// if IsDrivenBy ( i ) then
8871: LD_VAR 0 2
8875: PPUSH
8876: CALL_OW 311
8880: IFFALSE 8901
// SetSide ( IsDrivenBy ( i ) , You ) ;
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 311
8891: PPUSH
8892: LD_EXP 1
8896: PPUSH
8897: CALL_OW 235
// SetSide ( i , You ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_EXP 1
8910: PPUSH
8911: CALL_OW 235
// end ;
8915: GO 8853
8917: POP
8918: POP
// enable ;
8919: ENABLE
// end ;
8920: PPOPN 2
8922: END
// every 0 0$1 marked 9 do var i ; var ridici ; var mcm ;
8923: GO 8925
8925: DISABLE
8926: LD_INT 0
8928: PPUSH
8929: PPUSH
8930: PPUSH
// begin ridici = [ ] ;
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: EMPTY
8937: ST_TO_ADDR
// for i in RUSI_CERPACI_AUTA_LIST do
8938: LD_ADDR_VAR 0 1
8942: PUSH
8943: LD_EXP 59
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8989
// begin PlaceUnitArea ( i , Enterposil , false ) ;
8951: LD_VAR 0 1
8955: PPUSH
8956: LD_INT 49
8958: PPUSH
8959: LD_INT 0
8961: PPUSH
8962: CALL_OW 49
// ridici = ridici ^ IsDrivenBy ( i ) ;
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: LD_VAR 0 2
8975: PUSH
8976: LD_VAR 0 1
8980: PPUSH
8981: CALL_OW 311
8985: ADD
8986: ST_TO_ADDR
// end ;
8987: GO 8948
8989: POP
8990: POP
// mcm = McMove ( 10 , RUSI_CERPACI_AUTA_LIST , [ [ 130 , 75 ] , [ 112 , 59 ] , [ 106 , 32 ] , [ 91 , 21 ] , [ 62 , 9 ] ] , [ mc_move_waitwp ] ) ;
8991: LD_ADDR_VAR 0 3
8995: PUSH
8996: LD_INT 10
8998: PPUSH
8999: LD_EXP 59
9003: PPUSH
9004: LD_INT 130
9006: PUSH
9007: LD_INT 75
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 112
9016: PUSH
9017: LD_INT 59
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 106
9026: PUSH
9027: LD_INT 32
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 91
9036: PUSH
9037: LD_INT 21
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 62
9046: PUSH
9047: LD_INT 9
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: PPUSH
9061: LD_INT 3
9063: PUSH
9064: EMPTY
9065: LIST
9066: PPUSH
9067: CALL_OW 398
9071: ST_TO_ADDR
// while UnitFilter ( RUSI_CERPACI_AUTA_LIST , [ [ f_inarea , benzina ] ] ) <> RUSI_CERPACI_AUTA_LIST do
9072: LD_EXP 59
9076: PPUSH
9077: LD_INT 95
9079: PUSH
9080: LD_INT 48
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: PPUSH
9090: CALL_OW 72
9094: PUSH
9095: LD_EXP 59
9099: NONEQUAL
9100: IFFALSE 9135
// begin KillMc ( mcm ) ;
9102: LD_VAR 0 3
9106: PPUSH
9107: CALL_OW 387
// wait ( 0 0$2 ) ;
9111: LD_INT 70
9113: PPUSH
9114: CALL_OW 67
// ComMoveXY ( RUSI_CERPACI_AUTA_LIST , 62 , 9 ) ;
9118: LD_EXP 59
9122: PPUSH
9123: LD_INT 62
9125: PPUSH
9126: LD_INT 9
9128: PPUSH
9129: CALL_OW 111
// end ;
9133: GO 9072
// hint_cerpaci_auta ;
9135: CALL 16097 0 0
// ComExitVehicle ( ridici ) ;
9139: LD_VAR 0 2
9143: PPUSH
9144: CALL_OW 121
// AddComAgressiveMove ( ridici , 45 , 6 ) ;
9148: LD_VAR 0 2
9152: PPUSH
9153: LD_INT 45
9155: PPUSH
9156: LD_INT 6
9158: PPUSH
9159: CALL_OW 174
// AddComAgressiveMove ( ridici , 15 , 10 ) ;
9163: LD_VAR 0 2
9167: PPUSH
9168: LD_INT 15
9170: PPUSH
9171: LD_INT 10
9173: PPUSH
9174: CALL_OW 174
// AddComAttackUnit ( ridici , Am_dep ) ;
9178: LD_VAR 0 2
9182: PPUSH
9183: LD_INT 12
9185: PPUSH
9186: CALL_OW 175
// end ;
9190: PPOPN 3
9192: END
// every 0 0$2 do var pom , i ; var ridic ;
9193: GO 9195
9195: DISABLE
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
// begin pom = FilterUnitsInArea ( Cauta , [ [ f_side , You2 ] , [ f_weapon , ru_cargo_bay ] ] ) ;
9201: LD_ADDR_VAR 0 1
9205: PUSH
9206: LD_INT 39
9208: PPUSH
9209: LD_INT 22
9211: PUSH
9212: LD_EXP 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 34
9223: PUSH
9224: LD_INT 51
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 70
9239: ST_TO_ADDR
// if pom > 0 then
9240: LD_VAR 0 1
9244: PUSH
9245: LD_INT 0
9247: GREATER
9248: IFFALSE 9269
// begin if not qrefuel_over then
9250: LD_LOC 20
9254: NOT
9255: IFFALSE 9269
// begin qrefuel_over = true ;
9257: LD_ADDR_LOC 20
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// query_refuel ;
9265: CALL 16015 0 0
// end ; end ; for i in pom do
9269: LD_ADDR_VAR 0 2
9273: PUSH
9274: LD_VAR 0 1
9278: PUSH
9279: FOR_IN
9280: IFFALSE 9334
// if IsDrivenBy ( i ) then
9282: LD_VAR 0 2
9286: PPUSH
9287: CALL_OW 311
9291: IFFALSE 9332
// begin ridic = IsDrivenBy ( i ) ;
9293: LD_ADDR_VAR 0 3
9297: PUSH
9298: LD_VAR 0 2
9302: PPUSH
9303: CALL_OW 311
9307: ST_TO_ADDR
// ComExitVehicle ( ridic ) ;
9308: LD_VAR 0 3
9312: PPUSH
9313: CALL_OW 121
// AddComAgressiveMove ( ridic , 21 , 14 ) ;
9317: LD_VAR 0 3
9321: PPUSH
9322: LD_INT 21
9324: PPUSH
9325: LD_INT 14
9327: PPUSH
9328: CALL_OW 174
// end ;
9332: GO 9279
9334: POP
9335: POP
// enable ;
9336: ENABLE
// end ;
9337: PPOPN 3
9339: END
// on VehicleConstructed ( v , fact ) do begin postavenych_aut = postavenych_aut + 1 ;
9340: LD_ADDR_EXP 47
9344: PUSH
9345: LD_EXP 47
9349: PUSH
9350: LD_INT 1
9352: PLUS
9353: ST_TO_ADDR
// enable ;
9354: ENABLE
// end ;
9355: PPOPN 2
9357: END
// every 0 0$1 marked 51 do
9358: GO 9360
9360: DISABLE
// begin if konec_counteru then
9361: LD_EXP 45
9365: IFFALSE 9376
// begin display_strings = [ ] ;
9367: LD_ADDR_OWVAR 47
9371: PUSH
9372: EMPTY
9373: ST_TO_ADDR
// exit ;
9374: GO 9427
// end ; display_strings = [ #Ru03-1 , TTime ] ;
9376: LD_ADDR_OWVAR 47
9380: PUSH
9381: LD_STRING #Ru03-1
9383: PUSH
9384: LD_LOC 21
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9393: LD_ADDR_LOC 21
9397: PUSH
9398: LD_LOC 21
9402: PUSH
9403: LD_INT 35
9405: MINUS
9406: ST_TO_ADDR
// if TTime > 0 then
9407: LD_LOC 21
9411: PUSH
9412: LD_INT 0
9414: GREATER
9415: IFFALSE 9420
// enable else
9417: ENABLE
9418: GO 9427
// display_strings = [ ] ;
9420: LD_ADDR_OWVAR 47
9424: PUSH
9425: EMPTY
9426: ST_TO_ADDR
// end ;
9427: END
// every 0 0$1 marked 52 do
9428: GO 9430
9430: DISABLE
// begin if konec_counteru then
9431: LD_EXP 45
9435: IFFALSE 9446
// begin display_strings = [ ] ;
9437: LD_ADDR_OWVAR 47
9441: PUSH
9442: EMPTY
9443: ST_TO_ADDR
// exit ;
9444: GO 9497
// end ; display_strings = [ #Ru03-2 , TTime ] ;
9446: LD_ADDR_OWVAR 47
9450: PUSH
9451: LD_STRING #Ru03-2
9453: PUSH
9454: LD_LOC 21
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9463: LD_ADDR_LOC 21
9467: PUSH
9468: LD_LOC 21
9472: PUSH
9473: LD_INT 35
9475: MINUS
9476: ST_TO_ADDR
// if TTime > 0 then
9477: LD_LOC 21
9481: PUSH
9482: LD_INT 0
9484: GREATER
9485: IFFALSE 9490
// enable else
9487: ENABLE
9488: GO 9497
// display_strings = [ ] ;
9490: LD_ADDR_OWVAR 47
9494: PUSH
9495: EMPTY
9496: ST_TO_ADDR
// end ;
9497: END
// every 0 0$1 marked 53 do
9498: GO 9500
9500: DISABLE
// begin if konec_counteru then
9501: LD_EXP 45
9505: IFFALSE 9516
// begin display_strings = [ ] ;
9507: LD_ADDR_OWVAR 47
9511: PUSH
9512: EMPTY
9513: ST_TO_ADDR
// exit ;
9514: GO 9567
// end ; display_strings = [ #Ru03-3 , TTime ] ;
9516: LD_ADDR_OWVAR 47
9520: PUSH
9521: LD_STRING #Ru03-3
9523: PUSH
9524: LD_LOC 21
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9533: LD_ADDR_LOC 21
9537: PUSH
9538: LD_LOC 21
9542: PUSH
9543: LD_INT 35
9545: MINUS
9546: ST_TO_ADDR
// if TTime > 0 then
9547: LD_LOC 21
9551: PUSH
9552: LD_INT 0
9554: GREATER
9555: IFFALSE 9560
// enable else
9557: ENABLE
9558: GO 9567
// display_strings = [ ] ;
9560: LD_ADDR_OWVAR 47
9564: PUSH
9565: EMPTY
9566: ST_TO_ADDR
// end ;
9567: END
// export function zastaveni_rusaku ; var pom ; begin
9568: LD_INT 0
9570: PPUSH
9571: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9572: LD_ADDR_VAR 0 2
9576: PUSH
9577: LD_INT 22
9579: PUSH
9580: LD_EXP 1
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 2
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 21
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PPUSH
9621: CALL_OW 69
9625: ST_TO_ADDR
// ComStand ( pom ) ;
9626: LD_VAR 0 2
9630: PPUSH
9631: CALL_OW 165
// end ; end_of_file
9635: LD_VAR 0 1
9639: RET
// export konstanta_utoceni ; var hint_bw ; every 0 0$0.1 do
9640: GO 9642
9642: DISABLE
// begin konstanta_utoceni = 0 ;
9643: LD_ADDR_EXP 49
9647: PUSH
9648: LD_INT 0
9650: ST_TO_ADDR
// hint_bw = false ;
9651: LD_ADDR_LOC 22
9655: PUSH
9656: LD_INT 0
9658: ST_TO_ADDR
// end ;
9659: END
// export function uvodni_pokec ; var vyber ; begin
9660: LD_INT 0
9662: PPUSH
9663: PPUSH
// wait ( 0 0$2 ) ;
9664: LD_INT 70
9666: PPUSH
9667: CALL_OW 67
// ComTurnUnit ( bur , kur ) ;
9671: LD_EXP 29
9675: PPUSH
9676: LD_EXP 27
9680: PPUSH
9681: CALL_OW 119
// ComTurnUnit ( kur , bur ) ;
9685: LD_EXP 27
9689: PPUSH
9690: LD_EXP 29
9694: PPUSH
9695: CALL_OW 119
// if BELKOV_SAVED then
9699: LD_EXP 24
9703: IFFALSE 9743
// begin Say ( kur , D1b-Kur-1 ) ;
9705: LD_EXP 27
9709: PPUSH
9710: LD_STRING D1b-Kur-1
9712: PPUSH
9713: CALL_OW 88
// Say ( bel , D1b-Bel-1 ) ;
9717: LD_EXP 32
9721: PPUSH
9722: LD_STRING D1b-Bel-1
9724: PPUSH
9725: CALL_OW 88
// Say ( kur , D1b-Kur-2 ) ;
9729: LD_EXP 27
9733: PPUSH
9734: LD_STRING D1b-Kur-2
9736: PPUSH
9737: CALL_OW 88
// end else
9741: GO 9827
// begin Say ( kur , D1a-Kur-1 ) ;
9743: LD_EXP 27
9747: PPUSH
9748: LD_STRING D1a-Kur-1
9750: PPUSH
9751: CALL_OW 88
// Say ( bur , D1a-Bur-1 ) ;
9755: LD_EXP 29
9759: PPUSH
9760: LD_STRING D1a-Bur-1
9762: PPUSH
9763: CALL_OW 88
// if STAV_UTOKU = 3 then
9767: LD_EXP 25
9771: PUSH
9772: LD_INT 3
9774: EQUAL
9775: IFFALSE 9791
// Say ( kur , D1a-Kur-2a ) else
9777: LD_EXP 27
9781: PPUSH
9782: LD_STRING D1a-Kur-2a
9784: PPUSH
9785: CALL_OW 88
9789: GO 9803
// Say ( kur , D1a-Kur-2 ) ;
9791: LD_EXP 27
9795: PPUSH
9796: LD_STRING D1a-Kur-2
9798: PPUSH
9799: CALL_OW 88
// Say ( kur , D1a-Kur-2b ) ;
9803: LD_EXP 27
9807: PPUSH
9808: LD_STRING D1a-Kur-2b
9810: PPUSH
9811: CALL_OW 88
// Say ( bur , D1a-Bur-2 ) ;
9815: LD_EXP 29
9819: PPUSH
9820: LD_STRING D1a-Bur-2
9822: PPUSH
9823: CALL_OW 88
// end ; Say ( kur , D2-Kur-1 ) ;
9827: LD_EXP 27
9831: PPUSH
9832: LD_STRING D2-Kur-1
9834: PPUSH
9835: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
9839: LD_EXP 29
9843: PPUSH
9844: LD_STRING D2-Bur-1
9846: PPUSH
9847: CALL_OW 88
// Say ( kur , D2-Kur-2 ) ;
9851: LD_EXP 27
9855: PPUSH
9856: LD_STRING D2-Kur-2
9858: PPUSH
9859: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
9863: LD_EXP 29
9867: PPUSH
9868: LD_STRING D2-Bur-2
9870: PPUSH
9871: CALL_OW 88
// Say ( kur , D2-Kur-3 ) ;
9875: LD_EXP 27
9879: PPUSH
9880: LD_STRING D2-Kur-3
9882: PPUSH
9883: CALL_OW 88
// Say ( pop , D2-Pop-3 ) ;
9887: LD_EXP 28
9891: PPUSH
9892: LD_STRING D2-Pop-3
9894: PPUSH
9895: CALL_OW 88
// Say ( kur , D2-Kur-4 ) ;
9899: LD_EXP 27
9903: PPUSH
9904: LD_STRING D2-Kur-4
9906: PPUSH
9907: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
9911: LD_EXP 29
9915: PPUSH
9916: LD_STRING D2-Bur-4
9918: PPUSH
9919: CALL_OW 88
// Say ( kur , D2-Kur-5 ) ;
9923: LD_EXP 27
9927: PPUSH
9928: LD_STRING D2-Kur-5
9930: PPUSH
9931: CALL_OW 88
// Say ( bur , D2-Bur-5 ) ;
9935: LD_EXP 29
9939: PPUSH
9940: LD_STRING D2-Bur-5
9942: PPUSH
9943: CALL_OW 88
// Say ( kur , D2-Kur-6 ) ;
9947: LD_EXP 27
9951: PPUSH
9952: LD_STRING D2-Kur-6
9954: PPUSH
9955: CALL_OW 88
// vyber = vyber_characteru ;
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: CALL 2973 0 0
9968: ST_TO_ADDR
// if bel in vyber then
9969: LD_EXP 32
9973: PUSH
9974: LD_VAR 0 2
9978: IN
9979: IFFALSE 9992
// RemoveUnit ( bel ) else
9981: LD_EXP 32
9985: PPUSH
9986: CALL_OW 64
9990: GO 10006
// Setside ( bel , You2 ) ;
9992: LD_EXP 32
9996: PPUSH
9997: LD_EXP 2
10001: PPUSH
10002: CALL_OW 235
// if IsOK ( kov ) then
10006: LD_EXP 30
10010: PPUSH
10011: CALL_OW 302
10015: IFFALSE 10026
// RemoveUnit ( kov ) ;
10017: LD_EXP 30
10021: PPUSH
10022: CALL_OW 64
// if IsOK ( gny ) then
10026: LD_EXP 31
10030: PPUSH
10031: CALL_OW 302
10035: IFFALSE 10046
// RemoveUnit ( gny ) ;
10037: LD_EXP 31
10041: PPUSH
10042: CALL_OW 64
// RemoveUnit ( bur ) ;
10046: LD_EXP 29
10050: PPUSH
10051: CALL_OW 64
// prebarveni_druhe_baze ;
10055: CALL 5493 0 0
// ChangeSideFog ( You3 , You ) ;
10059: LD_EXP 3
10063: PPUSH
10064: LD_EXP 1
10068: PPUSH
10069: CALL_OW 343
// placni_unity ( vyber ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: CALL 3730 0 1
// CenterOnUnits ( vyber ) ;
10082: LD_VAR 0 2
10086: PPUSH
10087: CALL_OW 85
// RevealFogArea ( You , Wth ) ;
10091: LD_EXP 1
10095: PPUSH
10096: LD_INT 24
10098: PPUSH
10099: CALL_OW 332
// wait ( 0 0$2 ) ;
10103: LD_INT 70
10105: PPUSH
10106: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10110: LD_STRING M1
10112: PPUSH
10113: CALL_OW 337
// hint_bw = true ;
10117: LD_ADDR_LOC 22
10121: PUSH
10122: LD_INT 1
10124: ST_TO_ADDR
// Hint ( Oil ) ;
10125: LD_STRING Oil
10127: PPUSH
10128: CALL_OW 339
// Hint ( Upgrading ) ;
10132: LD_STRING Upgrading
10134: PPUSH
10135: CALL_OW 339
// InGameOff ;
10139: CALL_OW 9
// end ;
10143: LD_VAR 0 1
10147: RET
// every 0 0$1 trigger GetResourceVisibility ( 57 , 89 , You ) > 0 do
10148: LD_INT 57
10150: PPUSH
10151: LD_INT 89
10153: PPUSH
10154: LD_EXP 1
10158: PPUSH
10159: CALL_OW 440
10163: PUSH
10164: LD_INT 0
10166: GREATER
10167: IFFALSE 10245
10169: GO 10171
10171: DISABLE
// begin CenterOnXY ( 57 , 89 ) ;
10172: LD_INT 57
10174: PPUSH
10175: LD_INT 89
10177: PPUSH
10178: CALL_OW 84
// DialogueOn ;
10182: CALL_OW 6
// interface_hidden := true ;
10186: LD_ADDR_OWVAR 54
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// Say ( bur , D2a-Bur-1 ) ;
10194: LD_EXP 29
10198: PPUSH
10199: LD_STRING D2a-Bur-1
10201: PPUSH
10202: CALL_OW 88
// SayRadio ( kur , D2a-Kur-1 ) ;
10206: LD_EXP 27
10210: PPUSH
10211: LD_STRING D2a-Kur-1
10213: PPUSH
10214: CALL_OW 94
// RU_videl_oil = true ;
10218: LD_ADDR_EXP 40
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// interface_hidden := false ;
10226: LD_ADDR_OWVAR 54
10230: PUSH
10231: LD_INT 0
10233: ST_TO_ADDR
// Hint ( OilSpoted ) ;
10234: LD_STRING OilSpoted
10236: PPUSH
10237: CALL_OW 339
// DialogueOff ;
10241: CALL_OW 7
// end ;
10245: END
// every 0 0$3 trigger RU_videl_oil and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ;
10246: LD_EXP 40
10250: PUSH
10251: LD_INT 22
10253: PUSH
10254: LD_EXP 1
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 30
10265: PUSH
10266: LD_INT 0
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: PUSH
10282: LD_INT 1
10284: GREATER
10285: AND
10286: IFFALSE 10450
10288: GO 10290
10290: DISABLE
10291: LD_INT 0
10293: PPUSH
10294: PPUSH
10295: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
10296: LD_ADDR_VAR 0 1
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: LD_EXP 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 30
10315: PUSH
10316: LD_INT 0
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PPUSH
10327: CALL_OW 69
10331: ST_TO_ADDR
// pom1 = [ ] ;
10332: LD_ADDR_VAR 0 2
10336: PUSH
10337: EMPTY
10338: ST_TO_ADDR
// for i in pom do
10339: LD_ADDR_VAR 0 3
10343: PUSH
10344: LD_VAR 0 1
10348: PUSH
10349: FOR_IN
10350: IFFALSE 10391
// if GetDistUnitXY ( i , 56 , 88 ) < 30 then
10352: LD_VAR 0 3
10356: PPUSH
10357: LD_INT 56
10359: PPUSH
10360: LD_INT 88
10362: PPUSH
10363: CALL_OW 297
10367: PUSH
10368: LD_INT 30
10370: LESS
10371: IFFALSE 10389
// pom1 = pom1 ^ i ;
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 2
10382: PUSH
10383: LD_VAR 0 3
10387: ADD
10388: ST_TO_ADDR
10389: GO 10349
10391: POP
10392: POP
// if pom1 > 0 then
10393: LD_VAR 0 2
10397: PUSH
10398: LD_INT 0
10400: GREATER
10401: IFFALSE 10449
// begin while IsConstructed ( pom1 [ 1 ] ) do
10403: LD_VAR 0 2
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PPUSH
10412: CALL_OW 304
10416: IFFALSE 10427
// wait ( 0 0$5 ) ;
10418: LD_INT 175
10420: PPUSH
10421: CALL_OW 67
10425: GO 10403
// ChangeMissionObjectives ( M2 ) ;
10427: LD_STRING M2
10429: PPUSH
10430: CALL_OW 337
// pojmenovani_kaganoviche ( pom1 [ 1 ] ) ;
10434: LD_VAR 0 2
10438: PUSH
10439: LD_INT 1
10441: ARRAY
10442: PPUSH
10443: CALL 4537 0 1
// end else
10447: GO 10450
// enable ;
10449: ENABLE
// end ;
10450: PPOPN 3
10452: END
// every 0 0$2 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) > 0 do var pom ;
10453: LD_INT 2
10455: PPUSH
10456: LD_INT 22
10458: PUSH
10459: LD_EXP 1
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 30
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PPUSH
10482: CALL_OW 70
10486: PUSH
10487: LD_INT 0
10489: GREATER
10490: IFFALSE 10782
10492: GO 10494
10494: DISABLE
10495: LD_INT 0
10497: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) ;
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: LD_INT 2
10505: PPUSH
10506: LD_INT 22
10508: PUSH
10509: LD_EXP 1
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 30
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 70
10536: ST_TO_ADDR
// pom = pom [ 1 ] ;
10537: LD_ADDR_VAR 0 1
10541: PUSH
10542: LD_VAR 0 1
10546: PUSH
10547: LD_INT 1
10549: ARRAY
10550: ST_TO_ADDR
// while IsConstructed ( pom ) <> 0 do
10551: LD_VAR 0 1
10555: PPUSH
10556: CALL_OW 304
10560: PUSH
10561: LD_INT 0
10563: NONEQUAL
10564: IFFALSE 10575
// wait ( 0 0$2 ) ;
10566: LD_INT 70
10568: PPUSH
10569: CALL_OW 67
10573: GO 10551
// CenterNowOnUnits ( pom ) ;
10575: LD_VAR 0 1
10579: PPUSH
10580: CALL_OW 87
// interface_hidden := true ;
10584: LD_ADDR_OWVAR 54
10588: PUSH
10589: LD_INT 1
10591: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) ;
10592: LD_ADDR_VAR 0 1
10596: PUSH
10597: LD_INT 2
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_EXP 1
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 30
10614: PUSH
10615: LD_INT 26
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PPUSH
10626: CALL_OW 70
10630: ST_TO_ADDR
// if pom = 0 then
10631: LD_VAR 0 1
10635: PUSH
10636: LD_INT 0
10638: EQUAL
10639: IFFALSE 10756
// begin DialogueOn ;
10641: CALL_OW 6
// Say ( bur , D3aa-Bur-1 ) ;
10645: LD_EXP 29
10649: PPUSH
10650: LD_STRING D3aa-Bur-1
10652: PPUSH
10653: CALL_OW 88
// if IsOK ( schol ) then
10657: LD_EXP 33
10661: PPUSH
10662: CALL_OW 302
10666: IFFALSE 10694
// begin Say ( schol , D3aa-Sch-1 ) ;
10668: LD_EXP 33
10672: PPUSH
10673: LD_STRING D3aa-Sch-1
10675: PPUSH
10676: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
10680: LD_EXP 29
10684: PPUSH
10685: LD_STRING D3aa-Bur-2
10687: PPUSH
10688: CALL_OW 88
// end else
10692: GO 10756
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
10694: LD_ADDR_VAR 0 1
10698: PUSH
10699: LD_INT 1
10701: PPUSH
10702: LD_INT 4
10704: PPUSH
10705: LD_EXP 29
10709: PUSH
10710: EMPTY
10711: LIST
10712: PPUSH
10713: CALL 11327 0 3
10717: ST_TO_ADDR
// if pom > 0 then
10718: LD_VAR 0 1
10722: PUSH
10723: LD_INT 0
10725: GREATER
10726: IFFALSE 10756
// begin Say ( pom [ 1 ] , D3aa-Sci1-1 ) ;
10728: LD_VAR 0 1
10732: PUSH
10733: LD_INT 1
10735: ARRAY
10736: PPUSH
10737: LD_STRING D3aa-Sci1-1
10739: PPUSH
10740: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
10744: LD_EXP 29
10748: PPUSH
10749: LD_STRING D3aa-Bur-2
10751: PPUSH
10752: CALL_OW 88
// end ; end ; end ; ChangeMissionObjectives ( M3 ) ;
10756: LD_STRING M3
10758: PPUSH
10759: CALL_OW 337
// Hint ( Factory ) ;
10763: LD_STRING Factory
10765: PPUSH
10766: CALL_OW 339
// interface_hidden := false ;
10770: LD_ADDR_OWVAR 54
10774: PUSH
10775: LD_INT 0
10777: ST_TO_ADDR
// DialogueOff ;
10778: CALL_OW 7
// end ;
10782: PPOPN 1
10784: END
// every 0 0$5 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) > 0 do var pom ;
10785: LD_INT 2
10787: PPUSH
10788: LD_INT 22
10790: PUSH
10791: LD_EXP 1
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 30
10802: PUSH
10803: LD_INT 4
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 70
10818: PUSH
10819: LD_INT 0
10821: GREATER
10822: IFFALSE 10904
10824: GO 10826
10826: DISABLE
10827: LD_INT 0
10829: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) ;
10830: LD_ADDR_VAR 0 1
10834: PUSH
10835: LD_INT 2
10837: PPUSH
10838: LD_INT 22
10840: PUSH
10841: LD_EXP 1
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 30
10852: PUSH
10853: LD_INT 4
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 70
10868: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
10869: LD_VAR 0 1
10873: PUSH
10874: LD_INT 1
10876: ARRAY
10877: PPUSH
10878: CALL_OW 304
10882: PUSH
10883: LD_INT 0
10885: NONEQUAL
10886: IFFALSE 10897
// wait ( 0 0$5 ) ;
10888: LD_INT 175
10890: PPUSH
10891: CALL_OW 67
10895: GO 10869
// Hint ( Armoury ) ;
10897: LD_STRING Armoury
10899: PPUSH
10900: CALL_OW 339
// end ;
10904: PPOPN 1
10906: END
// every 0 0$3 trigger hint_bw do var pom ;
10907: LD_LOC 22
10911: IFFALSE 10965
10913: GO 10915
10915: DISABLE
10916: LD_INT 0
10918: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_breastwork ] ] ) ;
10919: LD_ADDR_VAR 0 1
10923: PUSH
10924: LD_INT 2
10926: PPUSH
10927: LD_INT 22
10929: PUSH
10930: LD_EXP 1
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 30
10941: PUSH
10942: LD_INT 31
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 70
10957: ST_TO_ADDR
// Hint ( bunkers ) ;
10958: LD_STRING bunkers
10960: PPUSH
10961: CALL_OW 339
// end ;
10965: PPOPN 1
10967: END
// export function dialog_scholtze_enter ; begin
10968: LD_INT 0
10970: PPUSH
// CenterOnUnits ( schol2 ) ;
10971: LD_EXP 34
10975: PPUSH
10976: CALL_OW 85
// DialogueOn ;
10980: CALL_OW 6
// interface_hidden := true ;
10984: LD_ADDR_OWVAR 54
10988: PUSH
10989: LD_INT 1
10991: ST_TO_ADDR
// SayRadio ( schol2 , D4-Sch-1 ) ;
10992: LD_EXP 34
10996: PPUSH
10997: LD_STRING D4-Sch-1
10999: PPUSH
11000: CALL_OW 94
// Say ( bur , D4-Bur-1 ) ;
11004: LD_EXP 29
11008: PPUSH
11009: LD_STRING D4-Bur-1
11011: PPUSH
11012: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
11016: LD_STRING M4
11018: PPUSH
11019: CALL_OW 337
// interface_hidden := false ;
11023: LD_ADDR_OWVAR 54
11027: PUSH
11028: LD_INT 0
11030: ST_TO_ADDR
// DialogueOff ;
11031: CALL_OW 7
// end ;
11035: LD_VAR 0 1
11039: RET
// export function dialog_scholtze_nalezen ; begin
11040: LD_INT 0
11042: PPUSH
// CenterOnUnits ( schol2 ) ;
11043: LD_EXP 34
11047: PPUSH
11048: CALL_OW 85
// DialogueOn ;
11052: CALL_OW 6
// interface_hidden := true ;
11056: LD_ADDR_OWVAR 54
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// if IsOK ( schol2 ) then
11064: LD_EXP 34
11068: PPUSH
11069: CALL_OW 302
11073: IFFALSE 11118
// begin Say ( schol2 , D4a-Sch-1 ) ;
11075: LD_EXP 34
11079: PPUSH
11080: LD_STRING D4a-Sch-1
11082: PPUSH
11083: CALL_OW 88
// Say ( bur , D4a-Bur-1 ) ;
11087: LD_EXP 29
11091: PPUSH
11092: LD_STRING D4a-Bur-1
11094: PPUSH
11095: CALL_OW 88
// Say ( schol2 , D4a-Sch-2 ) ;
11099: LD_EXP 34
11103: PPUSH
11104: LD_STRING D4a-Sch-2
11106: PPUSH
11107: CALL_OW 88
// ChangeMissionObjectives ( MScholtzeOut ) ;
11111: LD_STRING MScholtzeOut
11113: PPUSH
11114: CALL_OW 337
// end ; interface_hidden := false ;
11118: LD_ADDR_OWVAR 54
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
// DialogueOff ;
11126: CALL_OW 7
// end ;
11130: LD_VAR 0 1
11134: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) = 1 marked 201 do var pom ;
11135: CALL 26409 0 0
11139: PUSH
11140: LD_INT 22
11142: PUSH
11143: LD_EXP 1
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PUSH
11152: LD_INT 30
11154: PUSH
11155: LD_INT 0
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PPUSH
11166: CALL_OW 69
11170: PUSH
11171: LD_INT 1
11173: EQUAL
11174: AND
11175: IFFALSE 11324
11177: GO 11179
11179: DISABLE
11180: LD_INT 0
11182: PPUSH
// begin DialogueOn ;
11183: CALL_OW 6
// interface_hidden := true ;
11187: LD_ADDR_OWVAR 54
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
11195: LD_EXP 72
11199: PPUSH
11200: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: LD_INT 1
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: LD_EXP 29
11219: PUSH
11220: LD_EXP 31
11224: PUSH
11225: LD_EXP 30
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL 11327 0 3
11239: ST_TO_ADDR
// if pom = 0 then
11240: LD_VAR 0 1
11244: PUSH
11245: LD_INT 0
11247: EQUAL
11248: IFFALSE 11274
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
11250: LD_ADDR_VAR 0 1
11254: PUSH
11255: LD_INT 1
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: LD_EXP 29
11265: PUSH
11266: EMPTY
11267: LIST
11268: PPUSH
11269: CALL 11327 0 3
11273: ST_TO_ADDR
// if pom > 0 then
11274: LD_VAR 0 1
11278: PUSH
11279: LD_INT 0
11281: GREATER
11282: IFFALSE 11312
// begin Say ( pom [ 1 ] , D3a-RSol1-1 ) ;
11284: LD_VAR 0 1
11288: PUSH
11289: LD_INT 1
11291: ARRAY
11292: PPUSH
11293: LD_STRING D3a-RSol1-1
11295: PPUSH
11296: CALL_OW 88
// Say ( bur , D3a-Bur-1 ) ;
11300: LD_EXP 29
11304: PPUSH
11305: LD_STRING D3a-Bur-1
11307: PPUSH
11308: CALL_OW 88
// end ; interface_hidden := false ;
11312: LD_ADDR_OWVAR 54
11316: PUSH
11317: LD_INT 0
11319: ST_TO_ADDR
// DialogueOff ;
11320: CALL_OW 7
// end ;
11324: PPOPN 1
11326: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11327: LD_INT 0
11329: PPUSH
11330: PPUSH
11331: PPUSH
11332: PPUSH
11333: PPUSH
11334: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
11335: LD_ADDR_VAR 0 6
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_EXP 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 25
11354: PUSH
11355: LD_INT 4
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 26
11364: PUSH
11365: LD_VAR 0 1
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
11384: LD_ADDR_VAR 0 7
11388: PUSH
11389: LD_INT 22
11391: PUSH
11392: LD_EXP 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 25
11403: PUSH
11404: LD_INT 3
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 26
11413: PUSH
11414: LD_VAR 0 1
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
11433: LD_ADDR_VAR 0 8
11437: PUSH
11438: LD_INT 22
11440: PUSH
11441: LD_EXP 1
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 25
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 26
11462: PUSH
11463: LD_VAR 0 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: PPUSH
11477: CALL_OW 69
11481: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
11482: LD_ADDR_VAR 0 9
11486: PUSH
11487: LD_INT 22
11489: PUSH
11490: LD_EXP 1
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 25
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 26
11511: PUSH
11512: LD_VAR 0 1
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PPUSH
11526: CALL_OW 69
11530: ST_TO_ADDR
// case povolani of class_scientistic :
11531: LD_VAR 0 2
11535: PUSH
11536: LD_INT 4
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11544
11542: GO 11557
11544: POP
// pom = pom1 ; class_mechanic :
11545: LD_ADDR_VAR 0 5
11549: PUSH
11550: LD_VAR 0 6
11554: ST_TO_ADDR
11555: GO 11621
11557: LD_INT 3
11559: DOUBLE
11560: EQUAL
11561: IFTRUE 11565
11563: GO 11578
11565: POP
// pom = pom2 ; class_engineer :
11566: LD_ADDR_VAR 0 5
11570: PUSH
11571: LD_VAR 0 7
11575: ST_TO_ADDR
11576: GO 11621
11578: LD_INT 2
11580: DOUBLE
11581: EQUAL
11582: IFTRUE 11586
11584: GO 11599
11586: POP
// pom = pom3 ; class_soldier :
11587: LD_ADDR_VAR 0 5
11591: PUSH
11592: LD_VAR 0 8
11596: ST_TO_ADDR
11597: GO 11621
11599: LD_INT 1
11601: DOUBLE
11602: EQUAL
11603: IFTRUE 11607
11605: GO 11620
11607: POP
// pom = pom4 ; end ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: LD_VAR 0 9
11617: ST_TO_ADDR
11618: GO 11621
11620: POP
// if povolani <> class_scientistic then
11621: LD_VAR 0 2
11625: PUSH
11626: LD_INT 4
11628: NONEQUAL
11629: IFFALSE 11647
// pom = pom ^ pom1 ;
11631: LD_ADDR_VAR 0 5
11635: PUSH
11636: LD_VAR 0 5
11640: PUSH
11641: LD_VAR 0 6
11645: ADD
11646: ST_TO_ADDR
// if povolani <> class_mechanic then
11647: LD_VAR 0 2
11651: PUSH
11652: LD_INT 3
11654: NONEQUAL
11655: IFFALSE 11673
// pom = pom ^ pom2 ;
11657: LD_ADDR_VAR 0 5
11661: PUSH
11662: LD_VAR 0 5
11666: PUSH
11667: LD_VAR 0 7
11671: ADD
11672: ST_TO_ADDR
// if povolani <> class_engineer then
11673: LD_VAR 0 2
11677: PUSH
11678: LD_INT 2
11680: NONEQUAL
11681: IFFALSE 11699
// pom = pom ^ pom3 ;
11683: LD_ADDR_VAR 0 5
11687: PUSH
11688: LD_VAR 0 5
11692: PUSH
11693: LD_VAR 0 8
11697: ADD
11698: ST_TO_ADDR
// if povolani <> class_soldier then
11699: LD_VAR 0 2
11703: PUSH
11704: LD_INT 1
11706: NONEQUAL
11707: IFFALSE 11725
// pom = pom ^ pom4 ;
11709: LD_ADDR_VAR 0 5
11713: PUSH
11714: LD_VAR 0 5
11718: PUSH
11719: LD_VAR 0 9
11723: ADD
11724: ST_TO_ADDR
// result := pom diff diffseznam ;
11725: LD_ADDR_VAR 0 4
11729: PUSH
11730: LD_VAR 0 5
11734: PUSH
11735: LD_VAR 0 3
11739: DIFF
11740: ST_TO_ADDR
// end ;
11741: LD_VAR 0 4
11745: RET
// function GetPeopleSide ( side , sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11746: LD_INT 0
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
11754: LD_ADDR_VAR 0 7
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_VAR 0 1
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 25
11773: PUSH
11774: LD_INT 4
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 26
11783: PUSH
11784: LD_VAR 0 2
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
11803: LD_ADDR_VAR 0 8
11807: PUSH
11808: LD_INT 22
11810: PUSH
11811: LD_VAR 0 1
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PUSH
11820: LD_INT 25
11822: PUSH
11823: LD_INT 3
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 26
11832: PUSH
11833: LD_VAR 0 2
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: PPUSH
11847: CALL_OW 69
11851: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
11852: LD_ADDR_VAR 0 9
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_VAR 0 1
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 25
11871: PUSH
11872: LD_INT 2
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 26
11881: PUSH
11882: LD_VAR 0 2
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
11901: LD_ADDR_VAR 0 10
11905: PUSH
11906: LD_INT 22
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 25
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 26
11930: PUSH
11931: LD_VAR 0 2
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 69
11949: ST_TO_ADDR
// case povolani of class_scientistic :
11950: LD_VAR 0 3
11954: PUSH
11955: LD_INT 4
11957: DOUBLE
11958: EQUAL
11959: IFTRUE 11963
11961: GO 11976
11963: POP
// pom = pom1 ; class_mechanic :
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: LD_VAR 0 7
11973: ST_TO_ADDR
11974: GO 12040
11976: LD_INT 3
11978: DOUBLE
11979: EQUAL
11980: IFTRUE 11984
11982: GO 11997
11984: POP
// pom = pom2 ; class_engineer :
11985: LD_ADDR_VAR 0 6
11989: PUSH
11990: LD_VAR 0 8
11994: ST_TO_ADDR
11995: GO 12040
11997: LD_INT 2
11999: DOUBLE
12000: EQUAL
12001: IFTRUE 12005
12003: GO 12018
12005: POP
// pom = pom3 ; class_soldier :
12006: LD_ADDR_VAR 0 6
12010: PUSH
12011: LD_VAR 0 9
12015: ST_TO_ADDR
12016: GO 12040
12018: LD_INT 1
12020: DOUBLE
12021: EQUAL
12022: IFTRUE 12026
12024: GO 12039
12026: POP
// pom = pom4 ; end ;
12027: LD_ADDR_VAR 0 6
12031: PUSH
12032: LD_VAR 0 10
12036: ST_TO_ADDR
12037: GO 12040
12039: POP
// if povolani <> class_scientistic then
12040: LD_VAR 0 3
12044: PUSH
12045: LD_INT 4
12047: NONEQUAL
12048: IFFALSE 12066
// pom = pom ^ pom1 ;
12050: LD_ADDR_VAR 0 6
12054: PUSH
12055: LD_VAR 0 6
12059: PUSH
12060: LD_VAR 0 7
12064: ADD
12065: ST_TO_ADDR
// if povolani <> class_mechanic then
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 3
12073: NONEQUAL
12074: IFFALSE 12092
// pom = pom ^ pom2 ;
12076: LD_ADDR_VAR 0 6
12080: PUSH
12081: LD_VAR 0 6
12085: PUSH
12086: LD_VAR 0 8
12090: ADD
12091: ST_TO_ADDR
// if povolani <> class_engineer then
12092: LD_VAR 0 3
12096: PUSH
12097: LD_INT 2
12099: NONEQUAL
12100: IFFALSE 12118
// pom = pom ^ pom3 ;
12102: LD_ADDR_VAR 0 6
12106: PUSH
12107: LD_VAR 0 6
12111: PUSH
12112: LD_VAR 0 9
12116: ADD
12117: ST_TO_ADDR
// if povolani <> class_soldier then
12118: LD_VAR 0 3
12122: PUSH
12123: LD_INT 1
12125: NONEQUAL
12126: IFFALSE 12144
// pom = pom ^ pom4 ;
12128: LD_ADDR_VAR 0 6
12132: PUSH
12133: LD_VAR 0 6
12137: PUSH
12138: LD_VAR 0 10
12142: ADD
12143: ST_TO_ADDR
// result := pom diff diffseznam ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_VAR 0 6
12153: PUSH
12154: LD_VAR 0 4
12158: DIFF
12159: ST_TO_ADDR
// end ;
12160: LD_VAR 0 5
12164: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom ;
12165: CALL 26409 0 0
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_EXP 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 0
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: PUSH
12201: LD_INT 1
12203: GREATER
12204: AND
12205: IFFALSE 12423
12207: GO 12209
12209: DISABLE
12210: LD_INT 0
12212: PPUSH
// begin disable ( 201 ) ;
12213: LD_INT 201
12215: DISABLE_MARKED
// DialogueOn ;
12216: CALL_OW 6
// interface_hidden := true ;
12220: LD_ADDR_OWVAR 54
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
12228: LD_EXP 72
12232: PPUSH
12233: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: LD_EXP 29
12252: PUSH
12253: LD_EXP 31
12257: PUSH
12258: LD_EXP 30
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: PPUSH
12268: CALL 11327 0 3
12272: ST_TO_ADDR
// if pom = 0 then
12273: LD_VAR 0 1
12277: PUSH
12278: LD_INT 0
12280: EQUAL
12281: IFFALSE 12307
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
12283: LD_ADDR_VAR 0 1
12287: PUSH
12288: LD_INT 1
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: LD_EXP 29
12298: PUSH
12299: EMPTY
12300: LIST
12301: PPUSH
12302: CALL 11327 0 3
12306: ST_TO_ADDR
// if pom > 0 then
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 0
12314: GREATER
12315: IFFALSE 12411
// begin Say ( pom [ 1 ] , D3b-RSol1-1 ) ;
12317: LD_VAR 0 1
12321: PUSH
12322: LD_INT 1
12324: ARRAY
12325: PPUSH
12326: LD_STRING D3b-RSol1-1
12328: PPUSH
12329: CALL_OW 88
// if IsOK ( gny ) then
12333: LD_EXP 31
12337: PPUSH
12338: CALL_OW 302
12342: IFFALSE 12370
// begin Say ( gny , D3b-Gny-1 ) ;
12344: LD_EXP 31
12348: PPUSH
12349: LD_STRING D3b-Gny-1
12351: PPUSH
12352: CALL_OW 88
// Say ( bur , D3b-Bur-1 ) ;
12356: LD_EXP 29
12360: PPUSH
12361: LD_STRING D3b-Bur-1
12363: PPUSH
12364: CALL_OW 88
// end else
12368: GO 12411
// if ISOK ( kov ) then
12370: LD_EXP 30
12374: PPUSH
12375: CALL_OW 302
12379: IFFALSE 12395
// Say ( kov , D3b-Kov-1 ) else
12381: LD_EXP 30
12385: PPUSH
12386: LD_STRING D3b-Kov-1
12388: PPUSH
12389: CALL_OW 88
12393: GO 12411
// Say ( pom [ 1 ] , D3b-RSol1-2 ) ;
12395: LD_VAR 0 1
12399: PUSH
12400: LD_INT 1
12402: ARRAY
12403: PPUSH
12404: LD_STRING D3b-RSol1-2
12406: PPUSH
12407: CALL_OW 88
// end ; interface_hidden := false ;
12411: LD_ADDR_OWVAR 54
12415: PUSH
12416: LD_INT 0
12418: ST_TO_ADDR
// DialogueOff ;
12419: CALL_OW 7
// end ;
12423: PPOPN 1
12425: END
// export function dialog_otazka_poctu_aut ; var pom ; begin
12426: LD_INT 0
12428: PPUSH
12429: PPUSH
// DialogueOn ;
12430: CALL_OW 6
// interface_hidden := true ;
12434: LD_ADDR_OWVAR 54
12438: PUSH
12439: LD_INT 1
12441: ST_TO_ADDR
// Say ( kur , D5-Kur-1 ) ;
12442: LD_EXP 27
12446: PPUSH
12447: LD_STRING D5-Kur-1
12449: PPUSH
12450: CALL_OW 88
// pom = Query ( QVehicles ) ;
12454: LD_ADDR_VAR 0 2
12458: PUSH
12459: LD_STRING QVehicles
12461: PPUSH
12462: CALL_OW 97
12466: ST_TO_ADDR
// case pom of 1 :
12467: LD_VAR 0 2
12471: PUSH
12472: LD_INT 1
12474: DOUBLE
12475: EQUAL
12476: IFTRUE 12480
12478: GO 12507
12480: POP
// begin Say ( bur , D6a-Bur-1 ) ;
12481: LD_EXP 29
12485: PPUSH
12486: LD_STRING D6a-Bur-1
12488: PPUSH
12489: CALL_OW 88
// Say ( kur , D6a-Kur-1 ) ;
12493: LD_EXP 27
12497: PPUSH
12498: LD_STRING D6a-Kur-1
12500: PPUSH
12501: CALL_OW 88
// end ; 2 :
12505: GO 12610
12507: LD_INT 2
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12554
12515: POP
// begin Say ( bur , D6b-Bur-1 ) ;
12516: LD_EXP 29
12520: PPUSH
12521: LD_STRING D6b-Bur-1
12523: PPUSH
12524: CALL_OW 88
// Say ( kur , D6b-Kur-1 ) ;
12528: LD_EXP 27
12532: PPUSH
12533: LD_STRING D6b-Kur-1
12535: PPUSH
12536: CALL_OW 88
// Say ( bur , D6b-Bur-2 ) ;
12540: LD_EXP 29
12544: PPUSH
12545: LD_STRING D6b-Bur-2
12547: PPUSH
12548: CALL_OW 88
// end ; 3 :
12552: GO 12610
12554: LD_INT 3
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12609
12562: POP
// begin Say ( bur , D6c-Bur-1 ) ;
12563: LD_EXP 29
12567: PPUSH
12568: LD_STRING D6c-Bur-1
12570: PPUSH
12571: CALL_OW 88
// Say ( kur , D6c-Kur-1 ) ;
12575: LD_EXP 27
12579: PPUSH
12580: LD_STRING D6c-Kur-1
12582: PPUSH
12583: CALL_OW 88
// Say ( bur , D6c-Bur-2 ) ;
12587: LD_EXP 29
12591: PPUSH
12592: LD_STRING D6c-Bur-2
12594: PPUSH
12595: CALL_OW 88
// KurinAddTime = 1 ;
12599: LD_ADDR_EXP 7
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// end ; end ;
12607: GO 12610
12609: POP
// interface_hidden := false ;
12610: LD_ADDR_OWVAR 54
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// DialogueOff ;
12618: CALL_OW 7
// result := pom ;
12622: LD_ADDR_VAR 0 1
12626: PUSH
12627: LD_VAR 0 2
12631: ST_TO_ADDR
// end ;
12632: LD_VAR 0 1
12636: RET
// export function hlaska_omicron ; begin
12637: LD_INT 0
12639: PPUSH
// DialogueOn ;
12640: CALL_OW 6
// interface_hidden := true ;
12644: LD_ADDR_OWVAR 54
12648: PUSH
12649: LD_INT 1
12651: ST_TO_ADDR
// Say ( kur , D6c-Kur-2 ) ;
12652: LD_EXP 27
12656: PPUSH
12657: LD_STRING D6c-Kur-2
12659: PPUSH
12660: CALL_OW 88
// interface_hidden := false ;
12664: LD_ADDR_OWVAR 54
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// DialogueOff ;
12672: CALL_OW 7
// end ;
12676: LD_VAR 0 1
12680: RET
// every 0 0$1 trigger stav_omikron = 3 do
12681: LD_EXP 39
12685: PUSH
12686: LD_INT 3
12688: EQUAL
12689: IFFALSE 12719
12691: GO 12693
12693: DISABLE
// begin CheckVehicles ;
12694: CALL 5986 0 0
// ChangeMissionObjectives ( M5 ) ;
12698: LD_STRING M5
12700: PPUSH
12701: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 1 ) ;
12705: LD_INT 32
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 424
// CheckVehicles ;
12715: CALL 5986 0 0
// end ;
12719: END
// export function dialog_pred_omicronem ; var pom ; begin
12720: LD_INT 0
12722: PPUSH
12723: PPUSH
// DialogueOn ;
12724: CALL_OW 6
// interface_hidden := true ;
12728: LD_ADDR_OWVAR 54
12732: PUSH
12733: LD_INT 1
12735: ST_TO_ADDR
// Say ( bur , D7-Bur-1 ) ;
12736: LD_EXP 29
12740: PPUSH
12741: LD_STRING D7-Bur-1
12743: PPUSH
12744: CALL_OW 88
// SayRadio ( kur , D7-Kur-1 ) ;
12748: LD_EXP 27
12752: PPUSH
12753: LD_STRING D7-Kur-1
12755: PPUSH
12756: CALL_OW 94
// setkani_om := true ;
12760: LD_ADDR_EXP 41
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// ChangeMissionObjectives ( M5a ) ;
12768: LD_STRING M5a
12770: PPUSH
12771: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 0 ) ;
12775: LD_INT 32
12777: PPUSH
12778: LD_INT 0
12780: PPUSH
12781: CALL_OW 424
// interface_hidden := false ;
12785: LD_ADDR_OWVAR 54
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// DialogueOff ;
12793: CALL_OW 7
// end ;
12797: LD_VAR 0 1
12801: RET
// every 0 0$5 trigger stav_omikron = 4 and omicron_half_destroyed do var pom ;
12802: LD_EXP 39
12806: PUSH
12807: LD_INT 4
12809: EQUAL
12810: PUSH
12811: CALL 26478 0 0
12815: AND
12816: IFFALSE 13083
12818: GO 12820
12820: DISABLE
12821: LD_INT 0
12823: PPUSH
// begin popov_ven ;
12824: CALL 5310 0 0
// DialogueOn ;
12828: CALL_OW 6
// interface_hidden := true ;
12832: LD_ADDR_OWVAR 54
12836: PUSH
12837: LD_INT 1
12839: ST_TO_ADDR
// pom = create_kecajici_amik ;
12840: LD_ADDR_VAR 0 1
12844: PUSH
12845: CALL 18109 0 0
12849: ST_TO_ADDR
// SayRadio ( pom , D8-Sol1-1 ) ;
12850: LD_VAR 0 1
12854: PPUSH
12855: LD_STRING D8-Sol1-1
12857: PPUSH
12858: CALL_OW 94
// if IsOK ( kov ) then
12862: LD_EXP 30
12866: PPUSH
12867: CALL_OW 302
12871: IFFALSE 12887
// Say ( kov , D8-Kov-1 ) else
12873: LD_EXP 30
12877: PPUSH
12878: LD_STRING D8-Kov-1
12880: PPUSH
12881: CALL_OW 88
12885: GO 12978
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
12887: LD_ADDR_VAR 0 1
12891: PUSH
12892: LD_INT 1
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_EXP 29
12902: PUSH
12903: LD_EXP 31
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PPUSH
12912: CALL 11327 0 3
12916: ST_TO_ADDR
// if pom = 0 then
12917: LD_VAR 0 1
12921: PUSH
12922: LD_INT 0
12924: EQUAL
12925: IFFALSE 12962
// GetPeopleSide ( You2 , sex_male , class_soldier , [ kur , pop , bel ] ) ;
12927: LD_EXP 2
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 27
12942: PUSH
12943: LD_EXP 28
12947: PUSH
12948: LD_EXP 32
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL 11746 0 4
// Say ( pom [ 1 ] , D8-RSol1-1 ) ;
12962: LD_VAR 0 1
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PPUSH
12971: LD_STRING D8-RSol1-1
12973: PPUSH
12974: CALL_OW 88
// end ; if IsOK ( gny ) then
12978: LD_EXP 31
12982: PPUSH
12983: CALL_OW 302
12987: IFFALSE 13003
// Say ( gny , D8-Gny-1 ) else
12989: LD_EXP 31
12993: PPUSH
12994: LD_STRING D8-Gny-1
12996: PPUSH
12997: CALL_OW 88
13001: GO 13059
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13003: LD_ADDR_VAR 0 1
13007: PUSH
13008: LD_INT 1
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: LD_EXP 29
13018: PUSH
13019: LD_EXP 31
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PPUSH
13028: CALL 11327 0 3
13032: ST_TO_ADDR
// if pom > 1 then
13033: LD_VAR 0 1
13037: PUSH
13038: LD_INT 1
13040: GREATER
13041: IFFALSE 13059
// Say ( pom [ 2 ] , D8-RSol2-1 ) ;
13043: LD_VAR 0 1
13047: PUSH
13048: LD_INT 2
13050: ARRAY
13051: PPUSH
13052: LD_STRING D8-RSol2-1
13054: PPUSH
13055: CALL_OW 88
// end ; interface_hidden := false ;
13059: LD_ADDR_OWVAR 54
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// DialogueOff ;
13067: CALL_OW 7
// stahnuti_amiku ;
13071: CALL 26641 0 0
// stav_omikron = 5 ;
13075: LD_ADDR_EXP 39
13079: PUSH
13080: LD_INT 5
13082: ST_TO_ADDR
// end ;
13083: PPOPN 1
13085: END
// every 0 0$5 trigger stav_omikron = 5 do var gri ;
13086: LD_EXP 39
13090: PUSH
13091: LD_INT 5
13093: EQUAL
13094: IFFALSE 13255
13096: GO 13098
13098: DISABLE
13099: LD_INT 0
13101: PPUSH
// begin setkani_om = false ;
13102: LD_ADDR_EXP 41
13106: PUSH
13107: LD_INT 0
13109: ST_TO_ADDR
// gri = create_grishko ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: CALL 18168 0 0
13119: ST_TO_ADDR
// CenterOnUnits ( gri ) ;
13120: LD_VAR 0 1
13124: PPUSH
13125: CALL_OW 85
// DialogueOn ;
13129: CALL_OW 6
// interface_hidden := true ;
13133: LD_ADDR_OWVAR 54
13137: PUSH
13138: LD_INT 1
13140: ST_TO_ADDR
// SayRadio ( gri , D9-Gri-1 ) ;
13141: LD_VAR 0 1
13145: PPUSH
13146: LD_STRING D9-Gri-1
13148: PPUSH
13149: CALL_OW 94
// SayRadio ( kur , D9-Kur-1 ) ;
13153: LD_EXP 27
13157: PPUSH
13158: LD_STRING D9-Kur-1
13160: PPUSH
13161: CALL_OW 94
// wait ( 0 0$2 ) ;
13165: LD_INT 70
13167: PPUSH
13168: CALL_OW 67
// SayRadio ( gri , D9-Gri-2 ) ;
13172: LD_VAR 0 1
13176: PPUSH
13177: LD_STRING D9-Gri-2
13179: PPUSH
13180: CALL_OW 94
// SayRadio ( kur , D9-Kur-2 ) ;
13184: LD_EXP 27
13188: PPUSH
13189: LD_STRING D9-Kur-2
13191: PPUSH
13192: CALL_OW 94
// SayRadio ( gri , D9-Gri-3 ) ;
13196: LD_VAR 0 1
13200: PPUSH
13201: LD_STRING D9-Gri-3
13203: PPUSH
13204: CALL_OW 94
// SayRadio ( kur , D9-Kur-3 ) ;
13208: LD_EXP 27
13212: PPUSH
13213: LD_STRING D9-Kur-3
13215: PPUSH
13216: CALL_OW 94
// interface_hidden := false ;
13220: LD_ADDR_OWVAR 54
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// DialogueOff ;
13228: CALL_OW 7
// wait ( 0 0$20 ) ;
13232: LD_INT 700
13234: PPUSH
13235: CALL_OW 67
// stav_omikron = 6 ;
13239: LD_ADDR_EXP 39
13243: PUSH
13244: LD_INT 6
13246: ST_TO_ADDR
// zastaveni_rusaku ;
13247: CALL 9568 0 0
// utok_arabu ;
13251: CALL 27482 0 0
// end ;
13255: PPOPN 1
13257: END
// export function kecy_behem_utoku_arabu ; begin
13258: LD_INT 0
13260: PPUSH
// stav_omikron = 7 ;
13261: LD_ADDR_EXP 39
13265: PUSH
13266: LD_INT 7
13268: ST_TO_ADDR
// SayRadio ( kur , D9a-Kur-1 ) ;
13269: LD_EXP 27
13273: PPUSH
13274: LD_STRING D9a-Kur-1
13276: PPUSH
13277: CALL_OW 94
// Say ( bur , D9a-Bur-1 ) ;
13281: LD_EXP 29
13285: PPUSH
13286: LD_STRING D9a-Bur-1
13288: PPUSH
13289: CALL_OW 88
// SayRadio ( kur , D9a-Kur-2 ) ;
13293: LD_EXP 27
13297: PPUSH
13298: LD_STRING D9a-Kur-2
13300: PPUSH
13301: CALL_OW 94
// posilani_arabskych_hlidek = true ;
13305: LD_ADDR_EXP 74
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// manage_ruske_computery_zpet ;
13313: CALL 6899 0 0
// end ;
13317: LD_VAR 0 1
13321: RET
// every 0 0$1 trigger stav_omikron = 8 and get_lidi_popov_area > 0 do var pom , pom1 ;
13322: LD_EXP 39
13326: PUSH
13327: LD_INT 8
13329: EQUAL
13330: PUSH
13331: CALL 8286 0 0
13335: PUSH
13336: LD_INT 0
13338: GREATER
13339: AND
13340: IFFALSE 13598
13342: GO 13344
13344: DISABLE
13345: LD_INT 0
13347: PPUSH
13348: PPUSH
// begin pom = get_lidi_popov_area ;
13349: LD_ADDR_VAR 0 1
13353: PUSH
13354: CALL 8286 0 0
13358: ST_TO_ADDR
// pom = pom [ 1 ] ;
13359: LD_ADDR_VAR 0 1
13363: PUSH
13364: LD_VAR 0 1
13368: PUSH
13369: LD_INT 1
13371: ARRAY
13372: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13373: LD_ADDR_VAR 0 2
13377: PUSH
13378: LD_INT 22
13380: PUSH
13381: LD_EXP 1
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 21
13395: PUSH
13396: LD_INT 1
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 21
13405: PUSH
13406: LD_INT 2
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PPUSH
13422: CALL_OW 69
13426: ST_TO_ADDR
// ComStop ( pom1 ) ;
13427: LD_VAR 0 2
13431: PPUSH
13432: CALL_OW 141
// ArDontAttackPlayer ( true ) ;
13436: LD_INT 1
13438: PPUSH
13439: CALL 28360 0 1
// InGameOn ;
13443: CALL_OW 8
// CenterOnUnits ( [ pop ] ) ;
13447: LD_EXP 28
13451: PUSH
13452: EMPTY
13453: LIST
13454: PPUSH
13455: CALL_OW 85
// ComMoveUnit ( pop , pom ) ;
13459: LD_EXP 28
13463: PPUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL_OW 112
// while GetDistUnits ( pop , pom ) > 4 do
13473: LD_EXP 28
13477: PPUSH
13478: LD_VAR 0 1
13482: PPUSH
13483: CALL_OW 296
13487: PUSH
13488: LD_INT 4
13490: GREATER
13491: IFFALSE 13502
// wait ( 0 0$1 ) ;
13493: LD_INT 35
13495: PPUSH
13496: CALL_OW 67
13500: GO 13473
// ComTurnUnit ( pom , pop ) ;
13502: LD_VAR 0 1
13506: PPUSH
13507: LD_EXP 28
13511: PPUSH
13512: CALL_OW 119
// CenterOnUnits ( [ pop ] ) ;
13516: LD_EXP 28
13520: PUSH
13521: EMPTY
13522: LIST
13523: PPUSH
13524: CALL_OW 85
// InGameOff ;
13528: CALL_OW 9
// DialogueOn ;
13532: CALL_OW 6
// interface_hidden := true ;
13536: LD_ADDR_OWVAR 54
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// if GetDistUnits ( pop , bur ) <= 10 then
13544: LD_EXP 28
13548: PPUSH
13549: LD_EXP 29
13553: PPUSH
13554: CALL_OW 296
13558: PUSH
13559: LD_INT 10
13561: LESSEQUAL
13562: IFFALSE 13570
// dialog_popov_s_burlakem else
13564: CALL 13601 0 0
13568: GO 13574
// dialog_popov_bez_burlaka ;
13570: CALL 13729 0 0
// stav_omikron = 9 ;
13574: LD_ADDR_EXP 39
13578: PUSH
13579: LD_INT 9
13581: ST_TO_ADDR
// interface_hidden := false ;
13582: LD_ADDR_OWVAR 54
13586: PUSH
13587: LD_INT 0
13589: ST_TO_ADDR
// DialogueOff ;
13590: CALL_OW 7
// totalni_ukonceni_mise_v_ingame_videu ;
13594: CALL 8474 0 0
// end ;
13598: PPOPN 2
13600: END
// function dialog_popov_s_burlakem ; begin
13601: LD_INT 0
13603: PPUSH
// Say ( bur , D10a-Bur-1 ) ;
13604: LD_EXP 29
13608: PPUSH
13609: LD_STRING D10a-Bur-1
13611: PPUSH
13612: CALL_OW 88
// Say ( pop , D10a-Pop-1 ) ;
13616: LD_EXP 28
13620: PPUSH
13621: LD_STRING D10a-Pop-1
13623: PPUSH
13624: CALL_OW 88
// Say ( bur , D10a-Bur-2 ) ;
13628: LD_EXP 29
13632: PPUSH
13633: LD_STRING D10a-Bur-2
13635: PPUSH
13636: CALL_OW 88
// Say ( pop , D10a-Pop-2 ) ;
13640: LD_EXP 28
13644: PPUSH
13645: LD_STRING D10a-Pop-2
13647: PPUSH
13648: CALL_OW 88
// Say ( bur , D10a-Bur-3 ) ;
13652: LD_EXP 29
13656: PPUSH
13657: LD_STRING D10a-Bur-3
13659: PPUSH
13660: CALL_OW 88
// Say ( pop , D10a-Pop-3 ) ;
13664: LD_EXP 28
13668: PPUSH
13669: LD_STRING D10a-Pop-3
13671: PPUSH
13672: CALL_OW 88
// Say ( bur , D10a-Bur-4 ) ;
13676: LD_EXP 29
13680: PPUSH
13681: LD_STRING D10a-Bur-4
13683: PPUSH
13684: CALL_OW 88
// Say ( pop , D10a-Pop-4 ) ;
13688: LD_EXP 28
13692: PPUSH
13693: LD_STRING D10a-Pop-4
13695: PPUSH
13696: CALL_OW 88
// Say ( bur , D10a-Bur-5 ) ;
13700: LD_EXP 29
13704: PPUSH
13705: LD_STRING D10a-Bur-5
13707: PPUSH
13708: CALL_OW 88
// Say ( pop , D10a-Pop-5 ) ;
13712: LD_EXP 28
13716: PPUSH
13717: LD_STRING D10a-Pop-5
13719: PPUSH
13720: CALL_OW 88
// end ;
13724: LD_VAR 0 1
13728: RET
// function dialog_popov_bez_burlaka ; var pom ; begin
13729: LD_INT 0
13731: PPUSH
13732: PPUSH
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13733: LD_ADDR_VAR 0 2
13737: PUSH
13738: LD_INT 15
13740: PPUSH
13741: LD_INT 22
13743: PUSH
13744: LD_EXP 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 21
13755: PUSH
13756: LD_INT 1
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 26
13765: PUSH
13766: LD_INT 1
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: LIST
13777: PPUSH
13778: CALL_OW 70
13782: ST_TO_ADDR
// if pom = 0 then
13783: LD_VAR 0 2
13787: PUSH
13788: LD_INT 0
13790: EQUAL
13791: IFFALSE 13795
// exit ;
13793: GO 13915
// Say ( pom , D10b-RSol1-1 ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_STRING D10b-RSol1-1
13802: PPUSH
13803: CALL_OW 88
// Say ( pop , D10b-Pop-1 ) ;
13807: LD_EXP 28
13811: PPUSH
13812: LD_STRING D10b-Pop-1
13814: PPUSH
13815: CALL_OW 88
// Say ( pom , D10b-RSol1-2 ) ;
13819: LD_VAR 0 2
13823: PPUSH
13824: LD_STRING D10b-RSol1-2
13826: PPUSH
13827: CALL_OW 88
// SayRadio ( pop , D10b-Pop-2 ) ;
13831: LD_EXP 28
13835: PPUSH
13836: LD_STRING D10b-Pop-2
13838: PPUSH
13839: CALL_OW 94
// Say ( bur , D10b-Bur-2 ) ;
13843: LD_EXP 29
13847: PPUSH
13848: LD_STRING D10b-Bur-2
13850: PPUSH
13851: CALL_OW 88
// SayRadio ( pop , D10b-Pop-3 ) ;
13855: LD_EXP 28
13859: PPUSH
13860: LD_STRING D10b-Pop-3
13862: PPUSH
13863: CALL_OW 94
// Say ( bur , D10b-Bur-3 ) ;
13867: LD_EXP 29
13871: PPUSH
13872: LD_STRING D10b-Bur-3
13874: PPUSH
13875: CALL_OW 88
// SayRadio ( pop , D10b-Pop-4 ) ;
13879: LD_EXP 28
13883: PPUSH
13884: LD_STRING D10b-Pop-4
13886: PPUSH
13887: CALL_OW 94
// Say ( bur , D10b-Bur-4 ) ;
13891: LD_EXP 29
13895: PPUSH
13896: LD_STRING D10b-Bur-4
13898: PPUSH
13899: CALL_OW 88
// SayRadio ( pop , D10b-Pop-5 ) ;
13903: LD_EXP 28
13907: PPUSH
13908: LD_STRING D10b-Pop-5
13910: PPUSH
13911: CALL_OW 94
// end ;
13915: LD_VAR 0 1
13919: RET
// every 0 0$1 trigger stav_omikron in [ 0 , 1 , 2 , 3 ] do var pom , i , upoz , pom1 , pom2 , pom3 ; var dr_pom1 , dr_pom2 , dr_pom3 ; var dr_pom ;
13920: LD_EXP 39
13924: PUSH
13925: LD_INT 0
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: IN
13943: IFFALSE 14735
13945: GO 13947
13947: DISABLE
13948: LD_INT 0
13950: PPUSH
13951: PPUSH
13952: PPUSH
13953: PPUSH
13954: PPUSH
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
// begin upoz = false ;
13960: LD_ADDR_VAR 0 3
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , f_not , [ f_type , unit_building ] ] ) ;
13968: LD_ADDR_VAR 0 1
13972: PUSH
13973: LD_INT 17
13975: PPUSH
13976: LD_INT 22
13978: PUSH
13979: LD_EXP 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: LD_INT 21
13993: PUSH
13994: LD_INT 3
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 70
14010: ST_TO_ADDR
// dr_pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
14011: LD_ADDR_VAR 0 10
14015: PUSH
14016: LD_INT 17
14018: PPUSH
14019: LD_INT 22
14021: PUSH
14022: LD_EXP 1
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 21
14033: PUSH
14034: LD_INT 3
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PPUSH
14045: CALL_OW 70
14049: ST_TO_ADDR
// for i in dr_pom do
14050: LD_ADDR_VAR 0 2
14054: PUSH
14055: LD_VAR 0 10
14059: PUSH
14060: FOR_IN
14061: IFFALSE 14086
// pom = pom union UnitsInside ( i ) ;
14063: LD_ADDR_VAR 0 1
14067: PUSH
14068: LD_VAR 0 1
14072: PUSH
14073: LD_VAR 0 2
14077: PPUSH
14078: CALL_OW 313
14082: UNION
14083: ST_TO_ADDR
14084: GO 14060
14086: POP
14087: POP
// if pom then
14088: LD_VAR 0 1
14092: IFFALSE 14141
// for i in pom do
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_VAR 0 1
14103: PUSH
14104: FOR_IN
14105: IFFALSE 14139
// if Getside ( Attacks ( i ) ) = Amici then
14107: LD_VAR 0 2
14111: PPUSH
14112: CALL_OW 320
14116: PPUSH
14117: CALL_OW 255
14121: PUSH
14122: LD_EXP 4
14126: EQUAL
14127: IFFALSE 14137
// upoz = true ;
14129: LD_ADDR_VAR 0 3
14133: PUSH
14134: LD_INT 1
14136: ST_TO_ADDR
14137: GO 14104
14139: POP
14140: POP
// if upoz then
14141: LD_VAR 0 3
14145: IFFALSE 14734
// begin DialogueOn ;
14147: CALL_OW 6
// interface_hidden := true ;
14151: LD_ADDR_OWVAR 54
14155: PUSH
14156: LD_INT 1
14158: ST_TO_ADDR
// if IsOK ( gny ) then
14159: LD_EXP 31
14163: PPUSH
14164: CALL_OW 302
14168: IFFALSE 14196
// begin Say ( gny , D11-Gny-1 ) ;
14170: LD_EXP 31
14174: PPUSH
14175: LD_STRING D11-Gny-1
14177: PPUSH
14178: CALL_OW 88
// Say ( bur , D11-Bur-1 ) ;
14182: LD_EXP 29
14186: PPUSH
14187: LD_STRING D11-Bur-1
14189: PPUSH
14190: CALL_OW 88
// end else
14194: GO 14208
// SayRadio ( kur , D11-Kur-1 ) ;
14196: LD_EXP 27
14200: PPUSH
14201: LD_STRING D11-Kur-1
14203: PPUSH
14204: CALL_OW 94
// interface_hidden := true ;
14208: LD_ADDR_OWVAR 54
14212: PUSH
14213: LD_INT 1
14215: ST_TO_ADDR
// DialogueOff ;
14216: CALL_OW 7
// InGameOn ;
14220: CALL_OW 8
// repeat pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14224: LD_ADDR_VAR 0 4
14228: PUSH
14229: LD_INT 18
14231: PPUSH
14232: LD_INT 22
14234: PUSH
14235: LD_EXP 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 3
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: PPUSH
14262: CALL_OW 70
14266: ST_TO_ADDR
// dr_pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14267: LD_ADDR_VAR 0 7
14271: PUSH
14272: LD_INT 18
14274: PPUSH
14275: LD_INT 22
14277: PUSH
14278: LD_EXP 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 21
14289: PUSH
14290: LD_INT 3
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PPUSH
14301: CALL_OW 70
14305: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14306: LD_ADDR_VAR 0 5
14310: PUSH
14311: LD_INT 19
14313: PPUSH
14314: LD_INT 22
14316: PUSH
14317: LD_EXP 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 3
14328: PUSH
14329: LD_INT 21
14331: PUSH
14332: LD_INT 3
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 70
14348: ST_TO_ADDR
// dr_pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14349: LD_ADDR_VAR 0 8
14353: PUSH
14354: LD_INT 19
14356: PPUSH
14357: LD_INT 22
14359: PUSH
14360: LD_EXP 1
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 70
14387: ST_TO_ADDR
// pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14388: LD_ADDR_VAR 0 6
14392: PUSH
14393: LD_INT 37
14395: PPUSH
14396: LD_INT 22
14398: PUSH
14399: LD_EXP 1
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 3
14410: PUSH
14411: LD_INT 21
14413: PUSH
14414: LD_INT 3
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: PPUSH
14426: CALL_OW 70
14430: ST_TO_ADDR
// dr_pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14431: LD_ADDR_VAR 0 9
14435: PUSH
14436: LD_INT 37
14438: PPUSH
14439: LD_INT 22
14441: PUSH
14442: LD_EXP 1
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 3
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PPUSH
14465: CALL_OW 70
14469: ST_TO_ADDR
// ComMoveToArea ( pom1 , om_ven_3 ) ;
14470: LD_VAR 0 4
14474: PPUSH
14475: LD_INT 31
14477: PPUSH
14478: CALL_OW 113
// for i in dr_pom1 do
14482: LD_ADDR_VAR 0 2
14486: PUSH
14487: LD_VAR 0 7
14491: PUSH
14492: FOR_IN
14493: IFFALSE 14533
// begin dr_pom = UnitsInside ( i ) ;
14495: LD_ADDR_VAR 0 10
14499: PUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 313
14509: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
14510: LD_VAR 0 10
14514: PPUSH
14515: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_1 ) ;
14519: LD_VAR 0 10
14523: PPUSH
14524: LD_INT 29
14526: PPUSH
14527: CALL_OW 173
// end ;
14531: GO 14492
14533: POP
14534: POP
// ComMoveToArea ( pom2 , om_zone ) ;
14535: LD_VAR 0 5
14539: PPUSH
14540: LD_INT 8
14542: PPUSH
14543: CALL_OW 113
// for i in dr_pom2 do
14547: LD_ADDR_VAR 0 2
14551: PUSH
14552: LD_VAR 0 8
14556: PUSH
14557: FOR_IN
14558: IFFALSE 14598
// begin dr_pom = UnitsInside ( i ) ;
14560: LD_ADDR_VAR 0 10
14564: PUSH
14565: LD_VAR 0 2
14569: PPUSH
14570: CALL_OW 313
14574: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
14575: LD_VAR 0 10
14579: PPUSH
14580: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_2 ) ;
14584: LD_VAR 0 10
14588: PPUSH
14589: LD_INT 30
14591: PPUSH
14592: CALL_OW 173
// end ;
14596: GO 14557
14598: POP
14599: POP
// ComMoveToArea ( pom3 , om_zone ) ;
14600: LD_VAR 0 6
14604: PPUSH
14605: LD_INT 8
14607: PPUSH
14608: CALL_OW 113
// for i in dr_pom3 do
14612: LD_ADDR_VAR 0 2
14616: PUSH
14617: LD_VAR 0 9
14621: PUSH
14622: FOR_IN
14623: IFFALSE 14663
// begin dr_pom = UnitsInside ( i ) ;
14625: LD_ADDR_VAR 0 10
14629: PUSH
14630: LD_VAR 0 2
14634: PPUSH
14635: CALL_OW 313
14639: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
14640: LD_VAR 0 10
14644: PPUSH
14645: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_3 ) ;
14649: LD_VAR 0 10
14653: PPUSH
14654: LD_INT 31
14656: PPUSH
14657: CALL_OW 173
// end ;
14661: GO 14622
14663: POP
14664: POP
// wait ( 0 0$3 ) ;
14665: LD_INT 105
14667: PPUSH
14668: CALL_OW 67
// until not ( pom1 or pom3 or pom3 ) ;
14672: LD_VAR 0 4
14676: PUSH
14677: LD_VAR 0 6
14681: OR
14682: PUSH
14683: LD_VAR 0 6
14687: OR
14688: NOT
14689: IFFALSE 14224
// wait ( 0 0$4 ) ;
14691: LD_INT 140
14693: PPUSH
14694: CALL_OW 67
// if dr_pom3 then
14698: LD_VAR 0 9
14702: IFFALSE 14730
// for i in dr_pom3 do
14704: LD_ADDR_VAR 0 2
14708: PUSH
14709: LD_VAR 0 9
14713: PUSH
14714: FOR_IN
14715: IFFALSE 14728
// KillUnit ( i ) ;
14717: LD_VAR 0 2
14721: PPUSH
14722: CALL_OW 66
14726: GO 14714
14728: POP
14729: POP
// InGameOff ;
14730: CALL_OW 9
// end ; enable ;
14734: ENABLE
// end ;
14735: PPOPN 10
14737: END
// every 1 trigger stav_omikron in [ 4 , 5 , 6 ] do var pom , pom1 , pom2 , i , AreaNotCleared , firstDialog ;
14738: LD_EXP 39
14742: PUSH
14743: LD_INT 4
14745: PUSH
14746: LD_INT 5
14748: PUSH
14749: LD_INT 6
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: IN
14757: IFFALSE 14963
14759: GO 14761
14761: DISABLE
14762: LD_INT 0
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
// begin enable ;
14770: ENABLE
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_or , [ f_side , 3 ] , [ f_side , You3 ] ] ] ) ;
14771: LD_ADDR_VAR 0 1
14775: PUSH
14776: LD_INT 20
14778: PPUSH
14779: LD_INT 21
14781: PUSH
14782: LD_INT 1
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_EXP 3
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// pom2 = pom2 = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_or , [ f_side , 3 ] , [ f_side , You3 ] ] ] ) ;
14828: LD_ADDR_VAR 0 3
14832: PUSH
14833: LD_VAR 0 3
14837: PUSH
14838: LD_INT 20
14840: PPUSH
14841: LD_INT 21
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_INT 3
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 22
14866: PUSH
14867: LD_EXP 3
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 70
14889: EQUAL
14890: ST_TO_ADDR
// if pom or pom2 then
14891: LD_VAR 0 1
14895: PUSH
14896: LD_VAR 0 3
14900: OR
14901: IFFALSE 14963
// begin ComMoveXY ( pom , 62 , 16 ) ;
14903: LD_VAR 0 1
14907: PPUSH
14908: LD_INT 62
14910: PPUSH
14911: LD_INT 16
14913: PPUSH
14914: CALL_OW 111
// ComMoveXY ( pom2 , 62 , 16 ) ;
14918: LD_VAR 0 3
14922: PPUSH
14923: LD_INT 62
14925: PPUSH
14926: LD_INT 16
14928: PPUSH
14929: CALL_OW 111
// if KurinDialog = 0 then
14933: LD_EXP 6
14937: PUSH
14938: LD_INT 0
14940: EQUAL
14941: IFFALSE 14963
// begin KurinDialog = 1 ;
14943: LD_ADDR_EXP 6
14947: PUSH
14948: LD_INT 1
14950: ST_TO_ADDR
// Say ( kur , D12-Kur-1 ) ;
14951: LD_EXP 27
14955: PPUSH
14956: LD_STRING D12-Kur-1
14958: PPUSH
14959: CALL_OW 88
// end ; end ; end ;
14963: PPOPN 6
14965: END
// export function hlaska_lhani ; begin
14966: LD_INT 0
14968: PPUSH
// DialogueOn ;
14969: CALL_OW 6
// interface_hidden := true ;
14973: LD_ADDR_OWVAR 54
14977: PUSH
14978: LD_INT 1
14980: ST_TO_ADDR
// Say ( kur , D6d-Kur-1 ) ;
14981: LD_EXP 27
14985: PPUSH
14986: LD_STRING D6d-Kur-1
14988: PPUSH
14989: CALL_OW 88
// interface_hidden := false ;
14993: LD_ADDR_OWVAR 54
14997: PUSH
14998: LD_INT 0
15000: ST_TO_ADDR
// DialogueOff ;
15001: CALL_OW 7
// end ;
15005: LD_VAR 0 1
15009: RET
// export function dialog_upoz ; begin
15010: LD_INT 0
15012: PPUSH
// DialogueOn ;
15013: CALL_OW 6
// interface_hidden := true ;
15017: LD_ADDR_OWVAR 54
15021: PUSH
15022: LD_INT 1
15024: ST_TO_ADDR
// SayRadio ( kur , D7a-Kur-1 ) ;
15025: LD_EXP 27
15029: PPUSH
15030: LD_STRING D7a-Kur-1
15032: PPUSH
15033: CALL_OW 94
// interface_hidden := false ;
15037: LD_ADDR_OWVAR 54
15041: PUSH
15042: LD_INT 0
15044: ST_TO_ADDR
// DialogueOff ;
15045: CALL_OW 7
// end ;
15049: LD_VAR 0 1
15053: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
15054: GO 15056
15056: DISABLE
15057: LD_INT 0
15059: PPUSH
15060: PPUSH
15061: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15062: LD_ADDR_VAR 0 3
15066: PUSH
15067: LD_INT 22
15069: PUSH
15070: LD_EXP 1
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 21
15084: PUSH
15085: LD_INT 1
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 21
15094: PUSH
15095: LD_INT 2
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 69
15115: ST_TO_ADDR
// for i in Ru_Units do
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_VAR 0 3
15125: PUSH
15126: FOR_IN
15127: IFFALSE 15234
// begin pom = Attacks ( i ) ;
15129: LD_ADDR_VAR 0 1
15133: PUSH
15134: LD_VAR 0 2
15138: PPUSH
15139: CALL_OW 320
15143: ST_TO_ADDR
// if pom <> 0 then
15144: LD_VAR 0 1
15148: PUSH
15149: LD_INT 0
15151: NONEQUAL
15152: IFFALSE 15194
// if Getside ( pom ) in [ You2 , You3 ] then
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 255
15163: PUSH
15164: LD_EXP 2
15168: PUSH
15169: LD_EXP 3
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: IN
15178: IFFALSE 15194
// konstanta_utoceni = konstanta_utoceni + 1 ;
15180: LD_ADDR_EXP 49
15184: PUSH
15185: LD_EXP 49
15189: PUSH
15190: LD_INT 1
15192: PLUS
15193: ST_TO_ADDR
// if pom = pop or pom = kur then
15194: LD_VAR 0 1
15198: PUSH
15199: LD_EXP 28
15203: EQUAL
15204: PUSH
15205: LD_VAR 0 1
15209: PUSH
15210: LD_EXP 27
15214: EQUAL
15215: OR
15216: IFFALSE 15232
// konstanta_utoceni = konstanta_utoceni + 10 ;
15218: LD_ADDR_EXP 49
15222: PUSH
15223: LD_EXP 49
15227: PUSH
15228: LD_INT 10
15230: PLUS
15231: ST_TO_ADDR
// end ;
15232: GO 15126
15234: POP
15235: POP
// if konstanta_utoceni < 10 then
15236: LD_EXP 49
15240: PUSH
15241: LD_INT 10
15243: LESS
15244: IFFALSE 15247
// enable ;
15246: ENABLE
// end ;
15247: PPOPN 3
15249: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
15250: LD_EXP 49
15254: PUSH
15255: LD_INT 10
15257: GREATEREQUAL
15258: IFFALSE 15267
15260: GO 15262
15262: DISABLE
// begin konec_mise_utok ;
15263: CALL 1307 0 0
// end ;
15267: END
// export function dialog_scholtze_umrel ; var i , pom , pom1 ; begin
15268: LD_INT 0
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
// pom = 0 ;
15274: LD_ADDR_VAR 0 3
15278: PUSH
15279: LD_INT 0
15281: ST_TO_ADDR
// DialogueOn ;
15282: CALL_OW 6
// interface_hidden := true ;
15286: LD_ADDR_OWVAR 54
15290: PUSH
15291: LD_INT 1
15293: ST_TO_ADDR
// ForceSay ( schol2 , D4b-Sch-1 ) ;
15294: LD_EXP 34
15298: PPUSH
15299: LD_STRING D4b-Sch-1
15301: PPUSH
15302: CALL_OW 91
// pom = FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
15306: LD_ADDR_VAR 0 3
15310: PUSH
15311: LD_INT 22
15313: PUSH
15314: LD_EXP 4
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 21
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PPUSH
15337: CALL_OW 69
15341: ST_TO_ADDR
// pom1 = NearestUnitToUnit ( pom , schol2 ) ;
15342: LD_ADDR_VAR 0 4
15346: PUSH
15347: LD_VAR 0 3
15351: PPUSH
15352: LD_EXP 34
15356: PPUSH
15357: CALL_OW 74
15361: ST_TO_ADDR
// if pom1 <> 0 then
15362: LD_VAR 0 4
15366: PUSH
15367: LD_INT 0
15369: NONEQUAL
15370: IFFALSE 15384
// SayNoName ( pom1 , D4b-Sol1-1 ) ;
15372: LD_VAR 0 4
15376: PPUSH
15377: LD_STRING D4b-Sol1-1
15379: PPUSH
15380: CALL_OW 90
// pom1 = NearestUnitToUnit ( pom diff pom1 , pom1 ) ;
15384: LD_ADDR_VAR 0 4
15388: PUSH
15389: LD_VAR 0 3
15393: PUSH
15394: LD_VAR 0 4
15398: DIFF
15399: PPUSH
15400: LD_VAR 0 4
15404: PPUSH
15405: CALL_OW 74
15409: ST_TO_ADDR
// SayNoName ( pom1 , D4b-Sol2-1 ) ;
15410: LD_VAR 0 4
15414: PPUSH
15415: LD_STRING D4b-Sol2-1
15417: PPUSH
15418: CALL_OW 90
// ForceSay ( schol2 , D4b-Sch-2 ) ;
15422: LD_EXP 34
15426: PPUSH
15427: LD_STRING D4b-Sch-2
15429: PPUSH
15430: CALL_OW 91
// Say ( bur , D4b-Bur-2 ) ;
15434: LD_EXP 29
15438: PPUSH
15439: LD_STRING D4b-Bur-2
15441: PPUSH
15442: CALL_OW 88
// SetLives ( schol2 , 0 ) ;
15446: LD_EXP 34
15450: PPUSH
15451: LD_INT 0
15453: PPUSH
15454: CALL_OW 234
// ChangeMissionObjectives ( MScholtzeDel ) ;
15458: LD_STRING MScholtzeDel
15460: PPUSH
15461: CALL_OW 337
// interface_hidden := false ;
15465: LD_ADDR_OWVAR 54
15469: PUSH
15470: LD_INT 0
15472: ST_TO_ADDR
// DialogueOff ;
15473: CALL_OW 7
// end ;
15477: LD_VAR 0 1
15481: RET
// on UnitGoesToRed ( un ) do begin if un = schol2 then
15482: LD_VAR 0 1
15486: PUSH
15487: LD_EXP 34
15491: EQUAL
15492: IFFALSE 15508
// if kecy_scholtze_nalezen then
15494: LD_EXP 44
15498: IFFALSE 15504
// exit else
15500: GO 15508
15502: GO 15508
// dialog_scholtze_umrel ;
15504: CALL 15268 0 0
// end ;
15508: PPOPN 1
15510: END
// every 0 0$2 trigger FilterUnitsInArea ( noTracksArea , [ [ f_side , You ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] , [ f_chassis , us_light_wheeled ] , [ f_chassis , us_medium_wheeled ] ] ] ) and stav_omikron in [ 0 , 1 , 2 , 3 ] do
15511: LD_INT 53
15513: PPUSH
15514: LD_INT 22
15516: PUSH
15517: LD_EXP 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 2
15528: PUSH
15529: LD_INT 31
15531: PUSH
15532: LD_INT 21
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 31
15541: PUSH
15542: LD_INT 23
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 31
15551: PUSH
15552: LD_INT 1
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 31
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 70
15584: PUSH
15585: LD_EXP 39
15589: PUSH
15590: LD_INT 0
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: LD_INT 3
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: IN
15608: AND
15609: IFFALSE 15636
15611: GO 15613
15613: DISABLE
// begin CenterOnXY ( 38 , 58 ) ;
15614: LD_INT 38
15616: PPUSH
15617: LD_INT 58
15619: PPUSH
15620: CALL_OW 84
// Say ( bur , D5a-Bur-1 ) ;
15624: LD_EXP 29
15628: PPUSH
15629: LD_STRING D5a-Bur-1
15631: PPUSH
15632: CALL_OW 88
// end ;
15636: END
// on BuildingStarted ( b , builder ) do begin if b in FilterUnitsInArea ( restrictedArea , [ f_side , 3 ] ) then
15637: LD_VAR 0 1
15641: PUSH
15642: LD_INT 54
15644: PPUSH
15645: LD_INT 22
15647: PUSH
15648: LD_INT 3
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 70
15659: IN
15660: IFFALSE 15671
// RemoveUnit ( b ) ;
15662: LD_VAR 0 1
15666: PPUSH
15667: CALL_OW 64
// end ;
15671: PPOPN 2
15673: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) > 0 do var pom ;
15674: LD_INT 22
15676: PUSH
15677: LD_EXP 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 30
15688: PUSH
15689: LD_INT 26
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: PUSH
15705: LD_INT 0
15707: GREATER
15708: IFFALSE 15800
15710: GO 15712
15712: DISABLE
15713: LD_INT 0
15715: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_mine ] ] ) ;
15716: LD_ADDR_VAR 0 1
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_EXP 1
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 30
15735: PUSH
15736: LD_INT 29
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PPUSH
15747: CALL_OW 69
15751: ST_TO_ADDR
// if pom > 0 then
15752: LD_VAR 0 1
15756: PUSH
15757: LD_INT 0
15759: GREATER
15760: IFFALSE 15799
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
15762: LD_VAR 0 1
15766: PUSH
15767: LD_INT 1
15769: ARRAY
15770: PPUSH
15771: CALL_OW 304
15775: PUSH
15776: LD_INT 0
15778: NONEQUAL
15779: IFFALSE 15790
// wait ( 0 0$1 ) ;
15781: LD_INT 35
15783: PPUSH
15784: CALL_OW 67
15788: GO 15762
// Hint ( PowerPlant ) ;
15790: LD_STRING PowerPlant
15792: PPUSH
15793: CALL_OW 339
// end else
15797: GO 15800
// enable ;
15799: ENABLE
// end ;
15800: PPOPN 1
15802: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ; var pocet ;
15803: LD_INT 22
15805: PUSH
15806: LD_EXP 1
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 30
15817: PUSH
15818: LD_INT 0
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PPUSH
15829: CALL_OW 69
15833: PUSH
15834: LD_INT 1
15836: GREATER
15837: IFFALSE 15997
15839: GO 15841
15841: DISABLE
15842: LD_INT 0
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
// begin pocet = 0 ;
15848: LD_ADDR_VAR 0 4
15852: PUSH
15853: LD_INT 0
15855: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
15856: LD_ADDR_VAR 0 1
15860: PUSH
15861: LD_INT 22
15863: PUSH
15864: LD_EXP 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 30
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL_OW 69
15891: ST_TO_ADDR
// pom1 = pom ;
15892: LD_ADDR_VAR 0 2
15896: PUSH
15897: LD_VAR 0 1
15901: ST_TO_ADDR
// while pocet < 2 do
15902: LD_VAR 0 4
15906: PUSH
15907: LD_INT 2
15909: LESS
15910: IFFALSE 15990
// begin for i in pom do
15912: LD_ADDR_VAR 0 3
15916: PUSH
15917: LD_VAR 0 1
15921: PUSH
15922: FOR_IN
15923: IFFALSE 15969
// if not IsConstructed ( i ) then
15925: LD_VAR 0 3
15929: PPUSH
15930: CALL_OW 304
15934: NOT
15935: IFFALSE 15967
// begin pocet = pocet + 1 ;
15937: LD_ADDR_VAR 0 4
15941: PUSH
15942: LD_VAR 0 4
15946: PUSH
15947: LD_INT 1
15949: PLUS
15950: ST_TO_ADDR
// pom1 = pom1 diff i ;
15951: LD_ADDR_VAR 0 2
15955: PUSH
15956: LD_VAR 0 2
15960: PUSH
15961: LD_VAR 0 3
15965: DIFF
15966: ST_TO_ADDR
// end ;
15967: GO 15922
15969: POP
15970: POP
// pom = pom1 ;
15971: LD_ADDR_VAR 0 1
15975: PUSH
15976: LD_VAR 0 2
15980: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15981: LD_INT 70
15983: PPUSH
15984: CALL_OW 67
// end ;
15988: GO 15902
// Hint ( Transport1 ) ;
15990: LD_STRING Transport1
15992: PPUSH
15993: CALL_OW 339
// end ;
15997: PPOPN 4
15999: END
// export function chmo_6 ; begin
16000: LD_INT 0
16002: PPUSH
// ChangeMissionObjectives ( M6a ) ;
16003: LD_STRING M6a
16005: PPUSH
16006: CALL_OW 337
// end ;
16010: LD_VAR 0 1
16014: RET
// export function query_refuel ; begin
16015: LD_INT 0
16017: PPUSH
// Query ( QRefuel ) ;
16018: LD_STRING QRefuel
16020: PPUSH
16021: CALL_OW 97
// end ;
16025: LD_VAR 0 1
16029: RET
// every 0 0$6 do var pom ;
16030: GO 16032
16032: DISABLE
16033: LD_INT 0
16035: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
16036: LD_ADDR_VAR 0 1
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_EXP 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 21
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PPUSH
16067: CALL_OW 69
16071: ST_TO_ADDR
// if postavenych_aut >= pom then
16072: LD_EXP 47
16076: PUSH
16077: LD_VAR 0 1
16081: GREATEREQUAL
16082: IFFALSE 16093
// ChangeMissionObjectives ( M3a ) else
16084: LD_STRING M3a
16086: PPUSH
16087: CALL_OW 337
16091: GO 16094
// enable ;
16093: ENABLE
// end ;
16094: PPOPN 1
16096: END
// export function hint_cerpaci_auta ; begin
16097: LD_INT 0
16099: PPUSH
// Hint ( refuelingtrucks ) ;
16100: LD_STRING refuelingtrucks
16102: PPUSH
16103: CALL_OW 339
// end ; end_of_file
16107: LD_VAR 0 1
16111: RET
// export AMERICKA_POMOC_HLIDCE_LIST ; export AMERICKE_POSILY1_LIST ; export AMERICKE_POSILY2_LIST ; export AMERICKE_POSILY3_LIST ; export AMERICKE_POSILY4_LIST ; export AMERICKE_POSILY11_LIST ; export RUSKE_POSILY_NA_OMICRON_LIST ; export RUSKE_POSILY_RIDICI_LIST ; export RU_posily_na_utek ; export RUSI_CERPACI_AUTA_LIST ; export ARABI_KAMIKADZE_LIST ; export ARABI_PRVNI_VLNA ; export ARABI_FLAME_LIST ; export ARABI_SELF_AUTA ; export ARABI_VOJACI ; export ARABI_doraz ; export ARABI_KIROV_POSILY ; export Arabi_komanda1 ; export Arabi_komanda2 ; export Arabi_komanda3 ; export Arabi_komanda4 ; export other_survivors_mise_2 ; var ah , av ; export function get_sex ; begin
16112: LD_INT 0
16114: PPUSH
// if Prob ( 20 ) then
16115: LD_INT 20
16117: PPUSH
16118: CALL_OW 13
16122: IFFALSE 16134
// result = sex_female else
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: LD_INT 2
16131: ST_TO_ADDR
16132: GO 16142
// result = sex_male ;
16134: LD_ADDR_VAR 0 1
16138: PUSH
16139: LD_INT 1
16141: ST_TO_ADDR
// end ;
16142: LD_VAR 0 1
16146: RET
// export function get_human ( sex , clas , level , name ) ; begin
16147: LD_INT 0
16149: PPUSH
// PrepareHuman ( sex , clas , level ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: LD_VAR 0 2
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: CALL_OW 380
// hc_name := name ;
16169: LD_ADDR_OWVAR 26
16173: PUSH
16174: LD_VAR 0 4
16178: ST_TO_ADDR
// result := CreateHuman ;
16179: LD_ADDR_VAR 0 5
16183: PUSH
16184: CALL_OW 44
16188: ST_TO_ADDR
// end ;
16189: LD_VAR 0 5
16193: RET
// export function create_americka_pomoc_hlidce ; var pom ; begin
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
// pom = [ ] ;
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: EMPTY
16204: ST_TO_ADDR
// uc_side = Amici ;
16205: LD_ADDR_OWVAR 20
16209: PUSH
16210: LD_EXP 4
16214: ST_TO_ADDR
// uc_nation = nation_american ;
16215: LD_ADDR_OWVAR 21
16219: PUSH
16220: LD_INT 1
16222: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
16223: LD_ADDR_LOC 23
16227: PUSH
16228: CALL 16112 0 0
16232: PPUSH
16233: LD_INT 3
16235: PPUSH
16236: LD_EXP 13
16240: PUSH
16241: LD_OWVAR 67
16245: ARRAY
16246: PPUSH
16247: LD_STRING 
16249: PPUSH
16250: CALL 16147 0 4
16254: ST_TO_ADDR
// case difficulty of 1 :
16255: LD_OWVAR 67
16259: PUSH
16260: LD_INT 1
16262: DOUBLE
16263: EQUAL
16264: IFTRUE 16268
16266: GO 16303
16268: POP
// begin vc_chassis = us_light_wheeled ;
16269: LD_ADDR_OWVAR 37
16273: PUSH
16274: LD_INT 1
16276: ST_TO_ADDR
// vc_control = control_manual ;
16277: LD_ADDR_OWVAR 38
16281: PUSH
16282: LD_INT 1
16284: ST_TO_ADDR
// vc_engine = engine_solar ;
16285: LD_ADDR_OWVAR 39
16289: PUSH
16290: LD_INT 2
16292: ST_TO_ADDR
// vc_weapon = us_light_gun ;
16293: LD_ADDR_OWVAR 40
16297: PUSH
16298: LD_INT 3
16300: ST_TO_ADDR
// end ; 2 :
16301: GO 16390
16303: LD_INT 2
16305: DOUBLE
16306: EQUAL
16307: IFTRUE 16311
16309: GO 16346
16311: POP
// begin vc_chassis = us_light_wheeled ;
16312: LD_ADDR_OWVAR 37
16316: PUSH
16317: LD_INT 1
16319: ST_TO_ADDR
// vc_control = control_manual ;
16320: LD_ADDR_OWVAR 38
16324: PUSH
16325: LD_INT 1
16327: ST_TO_ADDR
// vc_engine = engine_solar ;
16328: LD_ADDR_OWVAR 39
16332: PUSH
16333: LD_INT 2
16335: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
16336: LD_ADDR_OWVAR 40
16340: PUSH
16341: LD_INT 2
16343: ST_TO_ADDR
// end ; 3 :
16344: GO 16390
16346: LD_INT 3
16348: DOUBLE
16349: EQUAL
16350: IFTRUE 16354
16352: GO 16389
16354: POP
// begin vc_chassis = us_medium_wheeled ;
16355: LD_ADDR_OWVAR 37
16359: PUSH
16360: LD_INT 2
16362: ST_TO_ADDR
// vc_control = control_manual ;
16363: LD_ADDR_OWVAR 38
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
// vc_engine = engine_combustion ;
16371: LD_ADDR_OWVAR 39
16375: PUSH
16376: LD_INT 1
16378: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
16379: LD_ADDR_OWVAR 40
16383: PUSH
16384: LD_INT 4
16386: ST_TO_ADDR
// end ; end ;
16387: GO 16390
16389: POP
// av = CreateVehicle ;
16390: LD_ADDR_LOC 24
16394: PUSH
16395: CALL_OW 45
16399: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
16400: LD_LOC 23
16404: PPUSH
16405: LD_LOC 24
16409: PPUSH
16410: CALL_OW 52
// pom = pom ^ av ;
16414: LD_ADDR_VAR 0 2
16418: PUSH
16419: LD_VAR 0 2
16423: PUSH
16424: LD_LOC 24
16428: ADD
16429: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
16430: LD_ADDR_LOC 23
16434: PUSH
16435: CALL 16112 0 0
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: LD_EXP 13
16447: PUSH
16448: LD_OWVAR 67
16452: ARRAY
16453: PPUSH
16454: LD_STRING 
16456: PPUSH
16457: CALL 16147 0 4
16461: ST_TO_ADDR
// pom = pom ^ ah ;
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_VAR 0 2
16471: PUSH
16472: LD_LOC 23
16476: ADD
16477: ST_TO_ADDR
// if pom > 2 then
16478: LD_VAR 0 2
16482: PUSH
16483: LD_INT 2
16485: GREATER
16486: IFFALSE 16532
// pom = pom ^ ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
16488: LD_ADDR_VAR 0 2
16492: PUSH
16493: LD_VAR 0 2
16497: PUSH
16498: LD_LOC 23
16502: ADD
16503: PUSH
16504: CALL 16112 0 0
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: LD_EXP 13
16516: PUSH
16517: LD_OWVAR 67
16521: ARRAY
16522: PPUSH
16523: LD_STRING 
16525: PPUSH
16526: CALL 16147 0 4
16530: EQUAL
16531: ST_TO_ADDR
// AMERICKA_POMOC_HLIDCE_LIST = pom ;
16532: LD_ADDR_EXP 50
16536: PUSH
16537: LD_VAR 0 2
16541: ST_TO_ADDR
// end ;
16542: LD_VAR 0 1
16546: RET
// export function set_skily_amikum ; var pom , i ; begin
16547: LD_INT 0
16549: PPUSH
16550: PPUSH
16551: PPUSH
// pom = [ Am_sol1 , Am_sol2 , Am_sol3 , Am_sol4 , Am_vb1 , Am_vb2 , Am_vb3 , Am_vb4 ] ;
16552: LD_ADDR_VAR 0 2
16556: PUSH
16557: LD_INT 38
16559: PUSH
16560: LD_INT 39
16562: PUSH
16563: LD_INT 40
16565: PUSH
16566: LD_INT 41
16568: PUSH
16569: LD_INT 29
16571: PUSH
16572: LD_INT 30
16574: PUSH
16575: LD_INT 31
16577: PUSH
16578: LD_INT 32
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: ST_TO_ADDR
// for i in pom do
16591: LD_ADDR_VAR 0 3
16595: PUSH
16596: LD_VAR 0 2
16600: PUSH
16601: FOR_IN
16602: IFFALSE 16629
// uprav_cloveka ( i , class_soldier , levely_amici [ difficulty ] ) ;
16604: LD_VAR 0 3
16608: PPUSH
16609: LD_INT 1
16611: PPUSH
16612: LD_EXP 13
16616: PUSH
16617: LD_OWVAR 67
16621: ARRAY
16622: PPUSH
16623: CALL 16944 0 3
16627: GO 16601
16629: POP
16630: POP
// pom = [ Am_me1 , Am_me2 , Am_me3 ] ;
16631: LD_ADDR_VAR 0 2
16635: PUSH
16636: LD_INT 33
16638: PUSH
16639: LD_INT 34
16641: PUSH
16642: LD_INT 35
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: LIST
16649: ST_TO_ADDR
// for i in pom do
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: FOR_IN
16661: IFFALSE 16688
// uprav_cloveka ( i , class_mechanic , levely_amici [ difficulty ] ) ;
16663: LD_VAR 0 3
16667: PPUSH
16668: LD_INT 3
16670: PPUSH
16671: LD_EXP 13
16675: PUSH
16676: LD_OWVAR 67
16680: ARRAY
16681: PPUSH
16682: CALL 16944 0 3
16686: GO 16660
16688: POP
16689: POP
// uprav_cloveka ( Am_sci1 , class_scientistic , levely_amici [ difficulty ] ) ;
16690: LD_INT 37
16692: PPUSH
16693: LD_INT 4
16695: PPUSH
16696: LD_EXP 13
16700: PUSH
16701: LD_OWVAR 67
16705: ARRAY
16706: PPUSH
16707: CALL 16944 0 3
// uprav_cloveka ( Am_eng1 , class_engineer , levely_amici [ difficulty ] ) ;
16711: LD_INT 36
16713: PPUSH
16714: LD_INT 2
16716: PPUSH
16717: LD_EXP 13
16721: PUSH
16722: LD_OWVAR 67
16726: ARRAY
16727: PPUSH
16728: CALL 16944 0 3
// end ;
16732: LD_VAR 0 1
16736: RET
// function set_skills ( un , skills ) ; begin
16737: LD_INT 0
16739: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
16740: LD_VAR 0 1
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: LD_VAR 0 2
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: PPUSH
16757: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 2
16768: PPUSH
16769: LD_VAR 0 2
16773: PUSH
16774: LD_INT 2
16776: ARRAY
16777: PPUSH
16778: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
16782: LD_VAR 0 1
16786: PPUSH
16787: LD_INT 3
16789: PPUSH
16790: LD_VAR 0 2
16794: PUSH
16795: LD_INT 3
16797: ARRAY
16798: PPUSH
16799: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
16803: LD_VAR 0 1
16807: PPUSH
16808: LD_INT 4
16810: PPUSH
16811: LD_VAR 0 2
16815: PUSH
16816: LD_INT 4
16818: ARRAY
16819: PPUSH
16820: CALL_OW 237
// end ;
16824: LD_VAR 0 3
16828: RET
// function get_skills ( un ) ; var pom3 , pom4 , pom5 , pom6 ; begin
16829: LD_INT 0
16831: PPUSH
16832: PPUSH
16833: PPUSH
16834: PPUSH
16835: PPUSH
// pom3 := GetSkill ( un , skill_combat ) ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_INT 1
16848: PPUSH
16849: CALL_OW 259
16853: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_engineering ) ;
16854: LD_ADDR_VAR 0 4
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: LD_INT 2
16866: PPUSH
16867: CALL_OW 259
16871: ST_TO_ADDR
// pom5 := GetSkill ( un , skill_mechanical ) ;
16872: LD_ADDR_VAR 0 5
16876: PUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: LD_INT 3
16884: PPUSH
16885: CALL_OW 259
16889: ST_TO_ADDR
// pom6 := GetSkill ( un , skill_scientistic ) ;
16890: LD_ADDR_VAR 0 6
16894: PUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_INT 4
16902: PPUSH
16903: CALL_OW 259
16907: ST_TO_ADDR
// result := [ pom3 , pom4 , pom5 , pom6 ] end ;
16908: LD_ADDR_VAR 0 2
16912: PUSH
16913: LD_VAR 0 3
16917: PUSH
16918: LD_VAR 0 4
16922: PUSH
16923: LD_VAR 0 5
16927: PUSH
16928: LD_VAR 0 6
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: ST_TO_ADDR
16939: LD_VAR 0 2
16943: RET
// function uprav_cloveka ( un , clas , lev ) ; var pom1 ; begin
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
16948: LD_INT 1
16950: PPUSH
16951: LD_VAR 0 2
16955: PPUSH
16956: LD_VAR 0 3
16960: PPUSH
16961: LD_STRING 
16963: PPUSH
16964: CALL 17026 0 4
// ah = CreateHuman ;
16968: LD_ADDR_LOC 23
16972: PUSH
16973: CALL_OW 44
16977: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
16978: LD_ADDR_VAR 0 5
16982: PUSH
16983: LD_LOC 23
16987: PPUSH
16988: CALL 16829 0 1
16992: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
16993: LD_VAR 0 1
16997: PPUSH
16998: LD_LOC 23
17002: PPUSH
17003: CALL 16829 0 1
17007: PPUSH
17008: CALL 16737 0 2
// DestroyUnit ( ah ) ;
17012: LD_LOC 23
17016: PPUSH
17017: CALL_OW 65
// end ;
17021: LD_VAR 0 4
17025: RET
// function prepare_human ( sex , clas , level , name ) ; begin
17026: LD_INT 0
17028: PPUSH
// PrepareHuman ( sex , clas , level ) ;
17029: LD_VAR 0 1
17033: PPUSH
17034: LD_VAR 0 2
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: CALL_OW 380
// hc_name := name ;
17048: LD_ADDR_OWVAR 26
17052: PUSH
17053: LD_VAR 0 4
17057: ST_TO_ADDR
// end ;
17058: LD_VAR 0 5
17062: RET
// export function create_americke_posily ; var pom ; begin
17063: LD_INT 0
17065: PPUSH
17066: PPUSH
// uc_side = Amici ;
17067: LD_ADDR_OWVAR 20
17071: PUSH
17072: LD_EXP 4
17076: ST_TO_ADDR
// uc_nation = nation_american ;
17077: LD_ADDR_OWVAR 21
17081: PUSH
17082: LD_INT 1
17084: ST_TO_ADDR
// pom = [ ] ;
17085: LD_ADDR_VAR 0 2
17089: PUSH
17090: EMPTY
17091: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17092: LD_ADDR_VAR 0 2
17096: PUSH
17097: LD_VAR 0 2
17101: PUSH
17102: CALL 16112 0 0
17106: PPUSH
17107: LD_INT 1
17109: PPUSH
17110: LD_EXP 13
17114: PUSH
17115: LD_OWVAR 67
17119: ARRAY
17120: PPUSH
17121: LD_STRING 
17123: PPUSH
17124: CALL 16147 0 4
17128: ADD
17129: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17130: LD_ADDR_VAR 0 2
17134: PUSH
17135: LD_VAR 0 2
17139: PUSH
17140: CALL 16112 0 0
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: LD_EXP 13
17152: PUSH
17153: LD_OWVAR 67
17157: ARRAY
17158: PPUSH
17159: LD_STRING 
17161: PPUSH
17162: CALL 16147 0 4
17166: ADD
17167: ST_TO_ADDR
// AMERICKE_POSILY1_LIST = pom ;
17168: LD_ADDR_EXP 51
17172: PUSH
17173: LD_VAR 0 2
17177: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17178: LD_ADDR_VAR 0 2
17182: PUSH
17183: CALL 16112 0 0
17187: PPUSH
17188: LD_INT 1
17190: PPUSH
17191: LD_EXP 13
17195: PUSH
17196: LD_OWVAR 67
17200: ARRAY
17201: PPUSH
17202: LD_STRING 
17204: PPUSH
17205: CALL 16147 0 4
17209: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_VAR 0 2
17219: PUSH
17220: CALL 16112 0 0
17224: PPUSH
17225: LD_INT 3
17227: PPUSH
17228: LD_EXP 13
17232: PUSH
17233: LD_OWVAR 67
17237: ARRAY
17238: PPUSH
17239: LD_STRING 
17241: PPUSH
17242: CALL 16147 0 4
17246: ADD
17247: ST_TO_ADDR
// if pom > 1 then
17248: LD_VAR 0 2
17252: PUSH
17253: LD_INT 1
17255: GREATER
17256: IFFALSE 17296
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_VAR 0 2
17267: PUSH
17268: CALL 16112 0 0
17272: PPUSH
17273: LD_INT 4
17275: PPUSH
17276: LD_EXP 13
17280: PUSH
17281: LD_OWVAR 67
17285: ARRAY
17286: PPUSH
17287: LD_STRING 
17289: PPUSH
17290: CALL 16147 0 4
17294: ADD
17295: ST_TO_ADDR
// if pom > 2 then
17296: LD_VAR 0 2
17300: PUSH
17301: LD_INT 2
17303: GREATER
17304: IFFALSE 17344
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17306: LD_ADDR_VAR 0 2
17310: PUSH
17311: LD_VAR 0 2
17315: PUSH
17316: CALL 16112 0 0
17320: PPUSH
17321: LD_INT 1
17323: PPUSH
17324: LD_EXP 13
17328: PUSH
17329: LD_OWVAR 67
17333: ARRAY
17334: PPUSH
17335: LD_STRING 
17337: PPUSH
17338: CALL 16147 0 4
17342: ADD
17343: ST_TO_ADDR
// AMERICKE_POSILY2_LIST = pom ;
17344: LD_ADDR_EXP 52
17348: PUSH
17349: LD_VAR 0 2
17353: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17354: LD_ADDR_VAR 0 2
17358: PUSH
17359: CALL 16112 0 0
17363: PPUSH
17364: LD_INT 1
17366: PPUSH
17367: LD_EXP 13
17371: PUSH
17372: LD_OWVAR 67
17376: ARRAY
17377: PPUSH
17378: LD_STRING 
17380: PPUSH
17381: CALL 16147 0 4
17385: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17386: LD_ADDR_VAR 0 2
17390: PUSH
17391: LD_VAR 0 2
17395: PUSH
17396: CALL 16112 0 0
17400: PPUSH
17401: LD_INT 1
17403: PPUSH
17404: LD_EXP 13
17408: PUSH
17409: LD_OWVAR 67
17413: ARRAY
17414: PPUSH
17415: LD_STRING 
17417: PPUSH
17418: CALL 16147 0 4
17422: ADD
17423: ST_TO_ADDR
// if pom = 1 then
17424: LD_VAR 0 2
17428: PUSH
17429: LD_INT 1
17431: EQUAL
17432: IFFALSE 17472
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17434: LD_ADDR_VAR 0 2
17438: PUSH
17439: LD_VAR 0 2
17443: PUSH
17444: CALL 16112 0 0
17448: PPUSH
17449: LD_INT 3
17451: PPUSH
17452: LD_EXP 13
17456: PUSH
17457: LD_OWVAR 67
17461: ARRAY
17462: PPUSH
17463: LD_STRING 
17465: PPUSH
17466: CALL 16147 0 4
17470: ADD
17471: ST_TO_ADDR
// if pom = 2 then
17472: LD_VAR 0 2
17476: PUSH
17477: LD_INT 2
17479: EQUAL
17480: IFFALSE 17586
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17482: LD_ADDR_LOC 23
17486: PUSH
17487: CALL 16112 0 0
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: LD_EXP 13
17499: PUSH
17500: LD_OWVAR 67
17504: ARRAY
17505: PPUSH
17506: LD_STRING 
17508: PPUSH
17509: CALL 16147 0 4
17513: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
17514: LD_ADDR_OWVAR 37
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
// vc_control = control_manual ;
17522: LD_ADDR_OWVAR 38
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// vc_engine = engine_solar ;
17530: LD_ADDR_OWVAR 39
17534: PUSH
17535: LD_INT 2
17537: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
17538: LD_ADDR_OWVAR 40
17542: PUSH
17543: LD_INT 2
17545: ST_TO_ADDR
// av = CreateVehicle ;
17546: LD_ADDR_LOC 24
17550: PUSH
17551: CALL_OW 45
17555: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
17556: LD_LOC 23
17560: PPUSH
17561: LD_LOC 24
17565: PPUSH
17566: CALL_OW 52
// pom = pom ^ av ;
17570: LD_ADDR_VAR 0 2
17574: PUSH
17575: LD_VAR 0 2
17579: PUSH
17580: LD_LOC 24
17584: ADD
17585: ST_TO_ADDR
// end ; if pom = 3 then
17586: LD_VAR 0 2
17590: PUSH
17591: LD_INT 3
17593: EQUAL
17594: IFFALSE 17700
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17596: LD_ADDR_LOC 23
17600: PUSH
17601: CALL 16112 0 0
17605: PPUSH
17606: LD_INT 3
17608: PPUSH
17609: LD_EXP 13
17613: PUSH
17614: LD_OWVAR 67
17618: ARRAY
17619: PPUSH
17620: LD_STRING 
17622: PPUSH
17623: CALL 16147 0 4
17627: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
17628: LD_ADDR_OWVAR 37
17632: PUSH
17633: LD_INT 2
17635: ST_TO_ADDR
// vc_control = control_manual ;
17636: LD_ADDR_OWVAR 38
17640: PUSH
17641: LD_INT 1
17643: ST_TO_ADDR
// vc_engine = engine_solar ;
17644: LD_ADDR_OWVAR 39
17648: PUSH
17649: LD_INT 2
17651: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
17652: LD_ADDR_OWVAR 40
17656: PUSH
17657: LD_INT 4
17659: ST_TO_ADDR
// av = CreateVehicle ;
17660: LD_ADDR_LOC 24
17664: PUSH
17665: CALL_OW 45
17669: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
17670: LD_LOC 23
17674: PPUSH
17675: LD_LOC 24
17679: PPUSH
17680: CALL_OW 52
// pom = pom ^ av ;
17684: LD_ADDR_VAR 0 2
17688: PUSH
17689: LD_VAR 0 2
17693: PUSH
17694: LD_LOC 24
17698: ADD
17699: ST_TO_ADDR
// end ; AMERICKE_POSILY3_LIST = pom ;
17700: LD_ADDR_EXP 53
17704: PUSH
17705: LD_VAR 0 2
17709: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17710: LD_ADDR_VAR 0 2
17714: PUSH
17715: CALL 16112 0 0
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: LD_EXP 13
17727: PUSH
17728: LD_OWVAR 67
17732: ARRAY
17733: PPUSH
17734: LD_STRING 
17736: PPUSH
17737: CALL 16147 0 4
17741: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17742: LD_ADDR_VAR 0 2
17746: PUSH
17747: LD_VAR 0 2
17751: PUSH
17752: CALL 16112 0 0
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_EXP 13
17764: PUSH
17765: LD_OWVAR 67
17769: ARRAY
17770: PPUSH
17771: LD_STRING 
17773: PPUSH
17774: CALL 16147 0 4
17778: ADD
17779: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
17780: LD_ADDR_VAR 0 2
17784: PUSH
17785: LD_VAR 0 2
17789: PUSH
17790: CALL 16112 0 0
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: LD_EXP 13
17802: PUSH
17803: LD_OWVAR 67
17807: ARRAY
17808: PUSH
17809: LD_INT 1
17811: MINUS
17812: PPUSH
17813: LD_STRING 
17815: PPUSH
17816: CALL 16147 0 4
17820: ADD
17821: ST_TO_ADDR
// AMERICKE_POSILY4_LIST = pom ;
17822: LD_ADDR_EXP 54
17826: PUSH
17827: LD_VAR 0 2
17831: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17832: LD_ADDR_VAR 0 2
17836: PUSH
17837: CALL 16112 0 0
17841: PPUSH
17842: LD_INT 1
17844: PPUSH
17845: LD_EXP 13
17849: PUSH
17850: LD_OWVAR 67
17854: ARRAY
17855: PPUSH
17856: LD_STRING 
17858: PPUSH
17859: CALL 16147 0 4
17863: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
17864: LD_ADDR_VAR 0 2
17868: PUSH
17869: LD_VAR 0 2
17873: PUSH
17874: CALL 16112 0 0
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: LD_EXP 13
17886: PUSH
17887: LD_OWVAR 67
17891: ARRAY
17892: PUSH
17893: LD_INT 1
17895: MINUS
17896: PPUSH
17897: LD_STRING 
17899: PPUSH
17900: CALL 16147 0 4
17904: ADD
17905: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
17906: LD_ADDR_VAR 0 2
17910: PUSH
17911: LD_VAR 0 2
17915: PUSH
17916: CALL 16112 0 0
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: LD_EXP 13
17928: PUSH
17929: LD_OWVAR 67
17933: ARRAY
17934: PUSH
17935: LD_INT 1
17937: MINUS
17938: PPUSH
17939: LD_STRING 
17941: PPUSH
17942: CALL 16147 0 4
17946: ADD
17947: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] - 1 ,  ) ;
17948: LD_ADDR_VAR 0 2
17952: PUSH
17953: LD_VAR 0 2
17957: PUSH
17958: CALL 16112 0 0
17962: PPUSH
17963: LD_INT 4
17965: PPUSH
17966: LD_EXP 13
17970: PUSH
17971: LD_OWVAR 67
17975: ARRAY
17976: PUSH
17977: LD_INT 1
17979: MINUS
17980: PPUSH
17981: LD_STRING 
17983: PPUSH
17984: CALL 16147 0 4
17988: ADD
17989: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17990: LD_ADDR_LOC 23
17994: PUSH
17995: CALL 16112 0 0
17999: PPUSH
18000: LD_INT 3
18002: PPUSH
18003: LD_EXP 13
18007: PUSH
18008: LD_OWVAR 67
18012: ARRAY
18013: PPUSH
18014: LD_STRING 
18016: PPUSH
18017: CALL 16147 0 4
18021: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
18022: LD_ADDR_OWVAR 37
18026: PUSH
18027: LD_INT 3
18029: ST_TO_ADDR
// vc_control = control_manual ;
18030: LD_ADDR_OWVAR 38
18034: PUSH
18035: LD_INT 1
18037: ST_TO_ADDR
// vc_engine = engine_combustion ;
18038: LD_ADDR_OWVAR 39
18042: PUSH
18043: LD_INT 1
18045: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18046: LD_ADDR_OWVAR 40
18050: PUSH
18051: LD_INT 2
18053: ST_TO_ADDR
// av = CreateVehicle ;
18054: LD_ADDR_LOC 24
18058: PUSH
18059: CALL_OW 45
18063: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18064: LD_LOC 23
18068: PPUSH
18069: LD_LOC 24
18073: PPUSH
18074: CALL_OW 52
// pom = pom ^ av ;
18078: LD_ADDR_VAR 0 2
18082: PUSH
18083: LD_VAR 0 2
18087: PUSH
18088: LD_LOC 24
18092: ADD
18093: ST_TO_ADDR
// AMERICKE_POSILY11_LIST = pom ;
18094: LD_ADDR_EXP 55
18098: PUSH
18099: LD_VAR 0 2
18103: ST_TO_ADDR
// end ;
18104: LD_VAR 0 1
18108: RET
// export function create_kecajici_amik ; var pom ; begin
18109: LD_INT 0
18111: PPUSH
18112: PPUSH
// uc_side = Amici ;
18113: LD_ADDR_OWVAR 20
18117: PUSH
18118: LD_EXP 4
18122: ST_TO_ADDR
// uc_nation = nation_american ;
18123: LD_ADDR_OWVAR 21
18127: PUSH
18128: LD_INT 1
18130: ST_TO_ADDR
// pom = get_human ( sex_male , class_soldier , 4 , Mike Damme ) ;
18131: LD_ADDR_VAR 0 2
18135: PUSH
18136: LD_INT 1
18138: PPUSH
18139: LD_INT 1
18141: PPUSH
18142: LD_INT 4
18144: PPUSH
18145: LD_STRING Mike Damme
18147: PPUSH
18148: CALL 16147 0 4
18152: ST_TO_ADDR
// result := pom ;
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_VAR 0 2
18162: ST_TO_ADDR
// end ;
18163: LD_VAR 0 1
18167: RET
// export function create_grishko ; var pom ; begin
18168: LD_INT 0
18170: PPUSH
18171: PPUSH
// pom = grishko ;
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_EXP 35
18181: ST_TO_ADDR
// if pom = 0 then
18182: LD_VAR 0 2
18186: PUSH
18187: LD_INT 0
18189: EQUAL
18190: IFFALSE 18214
// pom = get_human ( sex_male , class_soldier , 4 , Piotr Grishko ) ;
18192: LD_ADDR_VAR 0 2
18196: PUSH
18197: LD_INT 1
18199: PPUSH
18200: LD_INT 1
18202: PPUSH
18203: LD_INT 4
18205: PPUSH
18206: LD_STRING Piotr Grishko
18208: PPUSH
18209: CALL 16147 0 4
18213: ST_TO_ADDR
// if pom > 0 then
18214: LD_VAR 0 2
18218: PUSH
18219: LD_INT 0
18221: GREATER
18222: IFFALSE 18258
// begin SetSide ( pom [ 1 ] , You2 ) ;
18224: LD_VAR 0 2
18228: PUSH
18229: LD_INT 1
18231: ARRAY
18232: PPUSH
18233: LD_EXP 2
18237: PPUSH
18238: CALL_OW 235
// result = pom [ 1 ] ;
18242: LD_ADDR_VAR 0 1
18246: PUSH
18247: LD_VAR 0 2
18251: PUSH
18252: LD_INT 1
18254: ARRAY
18255: ST_TO_ADDR
// end else
18256: GO 18265
// msg ( ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril ) ;
18258: LD_STRING ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril
18260: PPUSH
18261: CALL_OW 100
// end ;
18265: LD_VAR 0 1
18269: RET
// export function create_arabsky_utok ; var pom , i ; begin
18270: LD_INT 0
18272: PPUSH
18273: PPUSH
18274: PPUSH
// pom = FilterUnitsInArea ( Ar_jedn , [ [ f_side , Arabi ] , [ f_class , class_apeman_kamikaze ] ] ) ;
18275: LD_ADDR_VAR 0 2
18279: PUSH
18280: LD_INT 9
18282: PPUSH
18283: LD_INT 22
18285: PUSH
18286: LD_EXP 5
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 25
18297: PUSH
18298: LD_INT 17
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 70
18313: ST_TO_ADDR
// ARABI_KAMIKADZE_LIST = pom ;
18314: LD_ADDR_EXP 60
18318: PUSH
18319: LD_VAR 0 2
18323: ST_TO_ADDR
// for i in pom do
18324: LD_ADDR_VAR 0 3
18328: PUSH
18329: LD_VAR 0 2
18333: PUSH
18334: FOR_IN
18335: IFFALSE 18348
// RemoveUnit ( i ) ;
18337: LD_VAR 0 3
18341: PPUSH
18342: CALL_OW 64
18346: GO 18334
18348: POP
18349: POP
// pom = [ ] ;
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: EMPTY
18356: ST_TO_ADDR
// uc_side = Arabi ;
18357: LD_ADDR_OWVAR 20
18361: PUSH
18362: LD_EXP 5
18366: ST_TO_ADDR
// uc_nation = nation_arabian ;
18367: LD_ADDR_OWVAR 21
18371: PUSH
18372: LD_INT 2
18374: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18375: LD_ADDR_LOC 23
18379: PUSH
18380: CALL 16112 0 0
18384: PPUSH
18385: LD_INT 3
18387: PPUSH
18388: LD_INT 9
18390: PPUSH
18391: LD_STRING 
18393: PPUSH
18394: CALL 16147 0 4
18398: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
18399: LD_ADDR_OWVAR 37
18403: PUSH
18404: LD_INT 14
18406: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
18407: LD_ADDR_OWVAR 40
18411: PUSH
18412: LD_INT 26
18414: ST_TO_ADDR
// vc_control = control_manual ;
18415: LD_ADDR_OWVAR 38
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// vc_engine = engine_combustion ;
18423: LD_ADDR_OWVAR 39
18427: PUSH
18428: LD_INT 1
18430: ST_TO_ADDR
// av = CreateVehicle ;
18431: LD_ADDR_LOC 24
18435: PUSH
18436: CALL_OW 45
18440: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18441: LD_LOC 23
18445: PPUSH
18446: LD_LOC 24
18450: PPUSH
18451: CALL_OW 52
// pom = pom ^ av ;
18455: LD_ADDR_VAR 0 2
18459: PUSH
18460: LD_VAR 0 2
18464: PUSH
18465: LD_LOC 24
18469: ADD
18470: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18471: LD_ADDR_LOC 23
18475: PUSH
18476: CALL 16112 0 0
18480: PPUSH
18481: LD_INT 3
18483: PPUSH
18484: LD_INT 9
18486: PPUSH
18487: LD_STRING 
18489: PPUSH
18490: CALL 16147 0 4
18494: ST_TO_ADDR
// av = CreateVehicle ;
18495: LD_ADDR_LOC 24
18499: PUSH
18500: CALL_OW 45
18504: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18505: LD_LOC 23
18509: PPUSH
18510: LD_LOC 24
18514: PPUSH
18515: CALL_OW 52
// pom = pom ^ av ;
18519: LD_ADDR_VAR 0 2
18523: PUSH
18524: LD_VAR 0 2
18528: PUSH
18529: LD_LOC 24
18533: ADD
18534: ST_TO_ADDR
// ARABI_FLAME_LIST = pom ;
18535: LD_ADDR_EXP 62
18539: PUSH
18540: LD_VAR 0 2
18544: ST_TO_ADDR
// pom = [ ] ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: EMPTY
18551: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18552: LD_ADDR_LOC 23
18556: PUSH
18557: CALL 16112 0 0
18561: PPUSH
18562: LD_INT 3
18564: PPUSH
18565: LD_INT 9
18567: PPUSH
18568: LD_STRING 
18570: PPUSH
18571: CALL 16147 0 4
18575: ST_TO_ADDR
// vc_weapon = ar_gun ;
18576: LD_ADDR_OWVAR 40
18580: PUSH
18581: LD_INT 27
18583: ST_TO_ADDR
// av = CreateVehicle ;
18584: LD_ADDR_LOC 24
18588: PUSH
18589: CALL_OW 45
18593: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18594: LD_LOC 23
18598: PPUSH
18599: LD_LOC 24
18603: PPUSH
18604: CALL_OW 52
// pom = av ;
18608: LD_ADDR_VAR 0 2
18612: PUSH
18613: LD_LOC 24
18617: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18618: LD_ADDR_LOC 23
18622: PUSH
18623: CALL 16112 0 0
18627: PPUSH
18628: LD_INT 3
18630: PPUSH
18631: LD_INT 9
18633: PPUSH
18634: LD_STRING 
18636: PPUSH
18637: CALL 16147 0 4
18641: ST_TO_ADDR
// av = CreateVehicle ;
18642: LD_ADDR_LOC 24
18646: PUSH
18647: CALL_OW 45
18651: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18652: LD_LOC 23
18656: PPUSH
18657: LD_LOC 24
18661: PPUSH
18662: CALL_OW 52
// pom = pom ^ av ;
18666: LD_ADDR_VAR 0 2
18670: PUSH
18671: LD_VAR 0 2
18675: PUSH
18676: LD_LOC 24
18680: ADD
18681: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18682: LD_ADDR_LOC 23
18686: PUSH
18687: CALL 16112 0 0
18691: PPUSH
18692: LD_INT 3
18694: PPUSH
18695: LD_INT 9
18697: PPUSH
18698: LD_STRING 
18700: PPUSH
18701: CALL 16147 0 4
18705: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
18706: LD_ADDR_OWVAR 40
18710: PUSH
18711: LD_INT 25
18713: ST_TO_ADDR
// av = CreateVehicle ;
18714: LD_ADDR_LOC 24
18718: PUSH
18719: CALL_OW 45
18723: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18724: LD_LOC 23
18728: PPUSH
18729: LD_LOC 24
18733: PPUSH
18734: CALL_OW 52
// pom = pom ^ av ;
18738: LD_ADDR_VAR 0 2
18742: PUSH
18743: LD_VAR 0 2
18747: PUSH
18748: LD_LOC 24
18752: ADD
18753: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18754: LD_ADDR_LOC 23
18758: PUSH
18759: CALL 16112 0 0
18763: PPUSH
18764: LD_INT 3
18766: PPUSH
18767: LD_INT 9
18769: PPUSH
18770: LD_STRING 
18772: PPUSH
18773: CALL 16147 0 4
18777: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
18778: LD_ADDR_OWVAR 40
18782: PUSH
18783: LD_INT 28
18785: ST_TO_ADDR
// av = CreateVehicle ;
18786: LD_ADDR_LOC 24
18790: PUSH
18791: CALL_OW 45
18795: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18796: LD_LOC 23
18800: PPUSH
18801: LD_LOC 24
18805: PPUSH
18806: CALL_OW 52
// pom = pom ^ av ;
18810: LD_ADDR_VAR 0 2
18814: PUSH
18815: LD_VAR 0 2
18819: PUSH
18820: LD_LOC 24
18824: ADD
18825: ST_TO_ADDR
// ARABI_PRVNI_VLNA = pom ;
18826: LD_ADDR_EXP 61
18830: PUSH
18831: LD_VAR 0 2
18835: ST_TO_ADDR
// pom = [ ] ;
18836: LD_ADDR_VAR 0 2
18840: PUSH
18841: EMPTY
18842: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
18843: LD_ADDR_OWVAR 40
18847: PUSH
18848: LD_INT 29
18850: ST_TO_ADDR
// vc_control = control_apeman ;
18851: LD_ADDR_OWVAR 38
18855: PUSH
18856: LD_INT 5
18858: ST_TO_ADDR
// ah = CreateVehicle ;
18859: LD_ADDR_LOC 23
18863: PUSH
18864: CALL_OW 45
18868: ST_TO_ADDR
// pom = ah ;
18869: LD_ADDR_VAR 0 2
18873: PUSH
18874: LD_LOC 23
18878: ST_TO_ADDR
// pom = pom ^ CreateVehicle ;
18879: LD_ADDR_VAR 0 2
18883: PUSH
18884: LD_VAR 0 2
18888: PUSH
18889: CALL_OW 45
18893: ADD
18894: ST_TO_ADDR
// ARABI_SELF_AUTA = pom ;
18895: LD_ADDR_EXP 63
18899: PUSH
18900: LD_VAR 0 2
18904: ST_TO_ADDR
// pom = [ ] ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: EMPTY
18911: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 9 ,  ) ;
18912: LD_ADDR_VAR 0 2
18916: PUSH
18917: CALL 16112 0 0
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: LD_INT 9
18927: PPUSH
18928: LD_STRING 
18930: PPUSH
18931: CALL 16147 0 4
18935: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
18936: LD_ADDR_VAR 0 2
18940: PUSH
18941: LD_VAR 0 2
18945: PUSH
18946: CALL 16112 0 0
18950: PPUSH
18951: LD_INT 1
18953: PPUSH
18954: LD_INT 9
18956: PPUSH
18957: LD_STRING 
18959: PPUSH
18960: CALL 16147 0 4
18964: ADD
18965: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
18966: LD_ADDR_VAR 0 2
18970: PUSH
18971: LD_VAR 0 2
18975: PUSH
18976: CALL 16112 0 0
18980: PPUSH
18981: LD_INT 1
18983: PPUSH
18984: LD_INT 9
18986: PPUSH
18987: LD_STRING 
18989: PPUSH
18990: CALL 16147 0 4
18994: ADD
18995: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
18996: LD_ADDR_VAR 0 2
19000: PUSH
19001: LD_VAR 0 2
19005: PUSH
19006: CALL 16112 0 0
19010: PPUSH
19011: LD_INT 1
19013: PPUSH
19014: LD_INT 9
19016: PPUSH
19017: LD_STRING 
19019: PPUSH
19020: CALL 16147 0 4
19024: ADD
19025: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: LD_VAR 0 2
19035: PUSH
19036: CALL 16112 0 0
19040: PPUSH
19041: LD_INT 8
19043: PPUSH
19044: LD_INT 9
19046: PPUSH
19047: LD_STRING 
19049: PPUSH
19050: CALL 16147 0 4
19054: ADD
19055: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19056: LD_ADDR_VAR 0 2
19060: PUSH
19061: LD_VAR 0 2
19065: PUSH
19066: CALL 16112 0 0
19070: PPUSH
19071: LD_INT 8
19073: PPUSH
19074: LD_INT 9
19076: PPUSH
19077: LD_STRING 
19079: PPUSH
19080: CALL 16147 0 4
19084: ADD
19085: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19086: LD_ADDR_VAR 0 2
19090: PUSH
19091: LD_VAR 0 2
19095: PUSH
19096: CALL 16112 0 0
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: LD_INT 9
19106: PPUSH
19107: LD_STRING 
19109: PPUSH
19110: CALL 16147 0 4
19114: ADD
19115: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19116: LD_ADDR_VAR 0 2
19120: PUSH
19121: LD_VAR 0 2
19125: PUSH
19126: CALL 16112 0 0
19130: PPUSH
19131: LD_INT 8
19133: PPUSH
19134: LD_INT 9
19136: PPUSH
19137: LD_STRING 
19139: PPUSH
19140: CALL 16147 0 4
19144: ADD
19145: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_VAR 0 2
19155: PUSH
19156: CALL 16112 0 0
19160: PPUSH
19161: LD_INT 8
19163: PPUSH
19164: LD_INT 9
19166: PPUSH
19167: LD_STRING 
19169: PPUSH
19170: CALL 16147 0 4
19174: ADD
19175: ST_TO_ADDR
// ARABI_VOJACI = pom ;
19176: LD_ADDR_EXP 64
19180: PUSH
19181: LD_VAR 0 2
19185: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19186: LD_ADDR_OWVAR 40
19190: PUSH
19191: LD_INT 28
19193: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19194: LD_ADDR_OWVAR 37
19198: PUSH
19199: LD_INT 14
19201: ST_TO_ADDR
// vc_control = control_manual ;
19202: LD_ADDR_OWVAR 38
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// vc_engine = engine_siberite ;
19210: LD_ADDR_OWVAR 39
19214: PUSH
19215: LD_INT 3
19217: ST_TO_ADDR
// av = CreateVehicle ;
19218: LD_ADDR_LOC 24
19222: PUSH
19223: CALL_OW 45
19227: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19228: LD_ADDR_LOC 23
19232: PUSH
19233: CALL 16112 0 0
19237: PPUSH
19238: LD_INT 3
19240: PPUSH
19241: LD_INT 9
19243: PPUSH
19244: LD_STRING 
19246: PPUSH
19247: CALL 16147 0 4
19251: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19252: LD_LOC 23
19256: PPUSH
19257: LD_LOC 24
19261: PPUSH
19262: CALL_OW 52
// pom = av ;
19266: LD_ADDR_VAR 0 2
19270: PUSH
19271: LD_LOC 24
19275: ST_TO_ADDR
// av = CreateVehicle ;
19276: LD_ADDR_LOC 24
19280: PUSH
19281: CALL_OW 45
19285: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19286: LD_ADDR_LOC 23
19290: PUSH
19291: CALL 16112 0 0
19295: PPUSH
19296: LD_INT 3
19298: PPUSH
19299: LD_INT 8
19301: PPUSH
19302: LD_STRING 
19304: PPUSH
19305: CALL 16147 0 4
19309: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19310: LD_LOC 23
19314: PPUSH
19315: LD_LOC 24
19319: PPUSH
19320: CALL_OW 52
// pom = pom ^ av ;
19324: LD_ADDR_VAR 0 2
19328: PUSH
19329: LD_VAR 0 2
19333: PUSH
19334: LD_LOC 24
19338: ADD
19339: ST_TO_ADDR
// av = CreateVehicle ;
19340: LD_ADDR_LOC 24
19344: PUSH
19345: CALL_OW 45
19349: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19350: LD_ADDR_LOC 23
19354: PUSH
19355: CALL 16112 0 0
19359: PPUSH
19360: LD_INT 3
19362: PPUSH
19363: LD_INT 8
19365: PPUSH
19366: LD_STRING 
19368: PPUSH
19369: CALL 16147 0 4
19373: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19374: LD_LOC 23
19378: PPUSH
19379: LD_LOC 24
19383: PPUSH
19384: CALL_OW 52
// pom = pom ^ av ;
19388: LD_ADDR_VAR 0 2
19392: PUSH
19393: LD_VAR 0 2
19397: PUSH
19398: LD_LOC 24
19402: ADD
19403: ST_TO_ADDR
// ARABI_doraz = pom ;
19404: LD_ADDR_EXP 65
19408: PUSH
19409: LD_VAR 0 2
19413: ST_TO_ADDR
// end ;
19414: LD_VAR 0 1
19418: RET
// export function create_ruske_posily_na_omicron ; var pom ; begin
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
// pom = [ ] ;
19423: LD_ADDR_VAR 0 2
19427: PUSH
19428: EMPTY
19429: ST_TO_ADDR
// uc_side = You2 ;
19430: LD_ADDR_OWVAR 20
19434: PUSH
19435: LD_EXP 2
19439: ST_TO_ADDR
// uc_nation = nation_russian ;
19440: LD_ADDR_OWVAR 21
19444: PUSH
19445: LD_INT 3
19447: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
19448: LD_ADDR_OWVAR 37
19452: PUSH
19453: LD_INT 23
19455: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
19456: LD_ADDR_OWVAR 40
19460: PUSH
19461: LD_INT 43
19463: ST_TO_ADDR
// vc_control = control_manual ;
19464: LD_ADDR_OWVAR 38
19468: PUSH
19469: LD_INT 1
19471: ST_TO_ADDR
// vc_engine = engine_combustion ;
19472: LD_ADDR_OWVAR 39
19476: PUSH
19477: LD_INT 1
19479: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
19480: LD_ADDR_LOC 23
19484: PUSH
19485: CALL 16112 0 0
19489: PPUSH
19490: LD_INT 3
19492: PPUSH
19493: LD_EXP 20
19497: PUSH
19498: LD_OWVAR 67
19502: ARRAY
19503: PPUSH
19504: LD_STRING 
19506: PPUSH
19507: CALL 16147 0 4
19511: ST_TO_ADDR
// av = CreateVehicle ;
19512: LD_ADDR_LOC 24
19516: PUSH
19517: CALL_OW 45
19521: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19522: LD_LOC 23
19526: PPUSH
19527: LD_LOC 24
19531: PPUSH
19532: CALL_OW 52
// pom = pom ^ av ;
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: LD_LOC 24
19550: ADD
19551: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] + 1 ,  ) ;
19552: LD_ADDR_LOC 23
19556: PUSH
19557: CALL 16112 0 0
19561: PPUSH
19562: LD_INT 3
19564: PPUSH
19565: LD_EXP 20
19569: PUSH
19570: LD_OWVAR 67
19574: ARRAY
19575: PUSH
19576: LD_INT 1
19578: PLUS
19579: PPUSH
19580: LD_STRING 
19582: PPUSH
19583: CALL 16147 0 4
19587: ST_TO_ADDR
// av = CreateVehicle ;
19588: LD_ADDR_LOC 24
19592: PUSH
19593: CALL_OW 45
19597: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19598: LD_LOC 23
19602: PPUSH
19603: LD_LOC 24
19607: PPUSH
19608: CALL_OW 52
// pom = pom ^ av ;
19612: LD_ADDR_VAR 0 2
19616: PUSH
19617: LD_VAR 0 2
19621: PUSH
19622: LD_LOC 24
19626: ADD
19627: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
19628: LD_ADDR_LOC 23
19632: PUSH
19633: CALL 16112 0 0
19637: PPUSH
19638: LD_INT 3
19640: PPUSH
19641: LD_EXP 20
19645: PUSH
19646: LD_OWVAR 67
19650: ARRAY
19651: PPUSH
19652: LD_STRING 
19654: PPUSH
19655: CALL 16147 0 4
19659: ST_TO_ADDR
// vc_weapon = ru_gun ;
19660: LD_ADDR_OWVAR 40
19664: PUSH
19665: LD_INT 44
19667: ST_TO_ADDR
// av = CreateVehicle ;
19668: LD_ADDR_LOC 24
19672: PUSH
19673: CALL_OW 45
19677: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19678: LD_LOC 23
19682: PPUSH
19683: LD_LOC 24
19687: PPUSH
19688: CALL_OW 52
// pom = pom ^ av ;
19692: LD_ADDR_VAR 0 2
19696: PUSH
19697: LD_VAR 0 2
19701: PUSH
19702: LD_LOC 24
19706: ADD
19707: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] - 1 ,  ) ;
19708: LD_ADDR_LOC 23
19712: PUSH
19713: CALL 16112 0 0
19717: PPUSH
19718: LD_INT 3
19720: PPUSH
19721: LD_EXP 20
19725: PUSH
19726: LD_OWVAR 67
19730: ARRAY
19731: PUSH
19732: LD_INT 1
19734: MINUS
19735: PPUSH
19736: LD_STRING 
19738: PPUSH
19739: CALL 16147 0 4
19743: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
19744: LD_ADDR_OWVAR 37
19748: PUSH
19749: LD_INT 22
19751: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
19752: LD_ADDR_OWVAR 40
19756: PUSH
19757: LD_INT 42
19759: ST_TO_ADDR
// av = CreateVehicle ;
19760: LD_ADDR_LOC 24
19764: PUSH
19765: CALL_OW 45
19769: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19770: LD_LOC 23
19774: PPUSH
19775: LD_LOC 24
19779: PPUSH
19780: CALL_OW 52
// pom = pom ^ av ;
19784: LD_ADDR_VAR 0 2
19788: PUSH
19789: LD_VAR 0 2
19793: PUSH
19794: LD_LOC 24
19798: ADD
19799: ST_TO_ADDR
// RUSKE_POSILY_NA_OMICRON_LIST = pom ;
19800: LD_ADDR_EXP 56
19804: PUSH
19805: LD_VAR 0 2
19809: ST_TO_ADDR
// pom = [ ] ;
19810: LD_ADDR_VAR 0 2
19814: PUSH
19815: EMPTY
19816: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
19817: LD_ADDR_LOC 23
19821: PUSH
19822: CALL 16112 0 0
19826: PPUSH
19827: LD_INT 3
19829: PPUSH
19830: LD_EXP 20
19834: PUSH
19835: LD_OWVAR 67
19839: ARRAY
19840: PPUSH
19841: LD_STRING 
19843: PPUSH
19844: CALL 16147 0 4
19848: ST_TO_ADDR
// pom = pom ^ ah ;
19849: LD_ADDR_VAR 0 2
19853: PUSH
19854: LD_VAR 0 2
19858: PUSH
19859: LD_LOC 23
19863: ADD
19864: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
19865: LD_ADDR_LOC 23
19869: PUSH
19870: CALL 16112 0 0
19874: PPUSH
19875: LD_INT 3
19877: PPUSH
19878: LD_EXP 20
19882: PUSH
19883: LD_OWVAR 67
19887: ARRAY
19888: PPUSH
19889: LD_STRING 
19891: PPUSH
19892: CALL 16147 0 4
19896: ST_TO_ADDR
// pom = pom ^ ah ;
19897: LD_ADDR_VAR 0 2
19901: PUSH
19902: LD_VAR 0 2
19906: PUSH
19907: LD_LOC 23
19911: ADD
19912: ST_TO_ADDR
// RUSKE_POSILY_RIDICI_LIST = pom ;
19913: LD_ADDR_EXP 57
19917: PUSH
19918: LD_VAR 0 2
19922: ST_TO_ADDR
// end ;
19923: LD_VAR 0 1
19927: RET
// export function create_dalsi_ridici ( auta ) ; var i , pom ; var poc ; begin
19928: LD_INT 0
19930: PPUSH
19931: PPUSH
19932: PPUSH
19933: PPUSH
// uc_side = You2 ;
19934: LD_ADDR_OWVAR 20
19938: PUSH
19939: LD_EXP 2
19943: ST_TO_ADDR
// uc_nation = nation_russian ;
19944: LD_ADDR_OWVAR 21
19948: PUSH
19949: LD_INT 3
19951: ST_TO_ADDR
// pom = [ ] ;
19952: LD_ADDR_VAR 0 4
19956: PUSH
19957: EMPTY
19958: ST_TO_ADDR
// poc = 0 ;
19959: LD_ADDR_VAR 0 5
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// for i in auta do
19967: LD_ADDR_VAR 0 3
19971: PUSH
19972: LD_VAR 0 1
19976: PUSH
19977: FOR_IN
19978: IFFALSE 20044
// begin poc = poc + 1 ;
19980: LD_ADDR_VAR 0 5
19984: PUSH
19985: LD_VAR 0 5
19989: PUSH
19990: LD_INT 1
19992: PLUS
19993: ST_TO_ADDR
// if poc < 3 then
19994: LD_VAR 0 5
19998: PUSH
19999: LD_INT 3
20001: LESS
20002: IFFALSE 20042
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20004: LD_ADDR_VAR 0 4
20008: PUSH
20009: LD_VAR 0 4
20013: PUSH
20014: CALL 16112 0 0
20018: PPUSH
20019: LD_INT 3
20021: PPUSH
20022: LD_EXP 20
20026: PUSH
20027: LD_OWVAR 67
20031: ARRAY
20032: PPUSH
20033: LD_STRING 
20035: PPUSH
20036: CALL 16147 0 4
20040: ADD
20041: ST_TO_ADDR
// end ;
20042: GO 19977
20044: POP
20045: POP
// result := pom ;
20046: LD_ADDR_VAR 0 2
20050: PUSH
20051: LD_VAR 0 4
20055: ST_TO_ADDR
// end ;
20056: LD_VAR 0 2
20060: RET
// export function create_am_jednotky ; begin
20061: LD_INT 0
20063: PPUSH
// SetSide ( kur , You2 ) ;
20064: LD_EXP 27
20068: PPUSH
20069: LD_EXP 2
20073: PPUSH
20074: CALL_OW 235
// PlaceUnitXY ( kur , 147 , 81 , false ) ;
20078: LD_EXP 27
20082: PPUSH
20083: LD_INT 147
20085: PPUSH
20086: LD_INT 81
20088: PPUSH
20089: LD_INT 0
20091: PPUSH
20092: CALL_OW 48
// if BELKOV_SAVED then
20096: LD_EXP 24
20100: IFFALSE 20146
// begin SetSide ( bel , You2 ) ;
20102: LD_EXP 32
20106: PPUSH
20107: LD_EXP 2
20111: PPUSH
20112: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
20116: LD_EXP 32
20120: PPUSH
20121: LD_INT 1
20123: PPUSH
20124: CALL_OW 336
// PlaceUnitXY ( bel , 141 , 80 , false ) ;
20128: LD_EXP 32
20132: PPUSH
20133: LD_INT 141
20135: PPUSH
20136: LD_INT 80
20138: PPUSH
20139: LD_INT 0
20141: PPUSH
20142: CALL_OW 48
// end ; if kov <> 0 then
20146: LD_EXP 30
20150: PUSH
20151: LD_INT 0
20153: NONEQUAL
20154: IFFALSE 20200
// begin SetSide ( kov , You ) ;
20156: LD_EXP 30
20160: PPUSH
20161: LD_EXP 1
20165: PPUSH
20166: CALL_OW 235
// SetClass ( kov , class_soldier ) ;
20170: LD_EXP 30
20174: PPUSH
20175: LD_INT 1
20177: PPUSH
20178: CALL_OW 336
// PlaceUnitXY ( kov , 142 , 80 , false ) ;
20182: LD_EXP 30
20186: PPUSH
20187: LD_INT 142
20189: PPUSH
20190: LD_INT 80
20192: PPUSH
20193: LD_INT 0
20195: PPUSH
20196: CALL_OW 48
// end ; SetClass ( bur , class_mechanic ) ;
20200: LD_EXP 29
20204: PPUSH
20205: LD_INT 3
20207: PPUSH
20208: CALL_OW 336
// SetSide ( bur , You ) ;
20212: LD_EXP 29
20216: PPUSH
20217: LD_EXP 1
20221: PPUSH
20222: CALL_OW 235
// PlaceUnitXY ( bur , 144 , 80 , false ) ;
20226: LD_EXP 29
20230: PPUSH
20231: LD_INT 144
20233: PPUSH
20234: LD_INT 80
20236: PPUSH
20237: LD_INT 0
20239: PPUSH
20240: CALL_OW 48
// if gny <> 0 then
20244: LD_EXP 31
20248: PUSH
20249: LD_INT 0
20251: NONEQUAL
20252: IFFALSE 20310
// begin SetClass ( gny , class_soldier ) ;
20254: LD_EXP 31
20258: PPUSH
20259: LD_INT 1
20261: PPUSH
20262: CALL_OW 336
// SetSide ( gny , You ) ;
20266: LD_EXP 31
20270: PPUSH
20271: LD_EXP 1
20275: PPUSH
20276: CALL_OW 235
// SetClass ( gny , class_mechanic ) ;
20280: LD_EXP 31
20284: PPUSH
20285: LD_INT 3
20287: PPUSH
20288: CALL_OW 336
// PlaceUnitXY ( gny , 142 , 79 , false ) ;
20292: LD_EXP 31
20296: PPUSH
20297: LD_INT 142
20299: PPUSH
20300: LD_INT 79
20302: PPUSH
20303: LD_INT 0
20305: PPUSH
20306: CALL_OW 48
// end ; SetSide ( pop , You2 ) ;
20310: LD_EXP 28
20314: PPUSH
20315: LD_EXP 2
20319: PPUSH
20320: CALL_OW 235
// PlaceUnitXY ( pop , 136 , 79 , false ) ;
20324: LD_EXP 28
20328: PPUSH
20329: LD_INT 136
20331: PPUSH
20332: LD_INT 79
20334: PPUSH
20335: LD_INT 0
20337: PPUSH
20338: CALL_OW 48
// end ;
20342: LD_VAR 0 1
20346: RET
// export function nacti_osobu ( ident ) ; begin
20347: LD_INT 0
20349: PPUSH
// if CheckCharacterSet ( ident ) then
20350: LD_VAR 0 1
20354: PPUSH
20355: CALL_OW 29
20359: IFFALSE 20378
// result := CreateCharacter ( ident ) else
20361: LD_ADDR_VAR 0 2
20365: PUSH
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 34
20375: ST_TO_ADDR
20376: GO 20386
// result := 0 ;
20378: LD_ADDR_VAR 0 2
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// end ;
20386: LD_VAR 0 2
20390: RET
// export function create_arabi_komanda ; var pom ; begin
20391: LD_INT 0
20393: PPUSH
20394: PPUSH
// uc_side = Arabi ;
20395: LD_ADDR_OWVAR 20
20399: PUSH
20400: LD_EXP 5
20404: ST_TO_ADDR
// uc_nation = nation_arabian ;
20405: LD_ADDR_OWVAR 21
20409: PUSH
20410: LD_INT 2
20412: ST_TO_ADDR
// pom = [ ] ;
20413: LD_ADDR_VAR 0 2
20417: PUSH
20418: EMPTY
20419: ST_TO_ADDR
// pom = get_human ( sex_female , class_soldier , 8 ,  ) ;
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_INT 2
20427: PPUSH
20428: LD_INT 1
20430: PPUSH
20431: LD_INT 8
20433: PPUSH
20434: LD_STRING 
20436: PPUSH
20437: CALL 16147 0 4
20441: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20442: LD_ADDR_VAR 0 2
20446: PUSH
20447: LD_VAR 0 2
20451: PUSH
20452: CALL 16112 0 0
20456: PPUSH
20457: LD_INT 1
20459: PPUSH
20460: LD_INT 6
20462: PPUSH
20463: LD_STRING 
20465: PPUSH
20466: CALL 16147 0 4
20470: ADD
20471: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20472: LD_ADDR_VAR 0 2
20476: PUSH
20477: LD_VAR 0 2
20481: PUSH
20482: CALL 16112 0 0
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: LD_INT 6
20492: PPUSH
20493: LD_STRING 
20495: PPUSH
20496: CALL 16147 0 4
20500: ADD
20501: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20502: LD_ADDR_VAR 0 2
20506: PUSH
20507: LD_VAR 0 2
20511: PUSH
20512: CALL 16112 0 0
20516: PPUSH
20517: LD_INT 1
20519: PPUSH
20520: LD_INT 6
20522: PPUSH
20523: LD_STRING 
20525: PPUSH
20526: CALL 16147 0 4
20530: ADD
20531: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
20532: LD_ADDR_LOC 23
20536: PUSH
20537: CALL 16112 0 0
20541: PPUSH
20542: LD_INT 3
20544: PPUSH
20545: LD_INT 6
20547: PPUSH
20548: LD_STRING 
20550: PPUSH
20551: CALL 16147 0 4
20555: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
20556: LD_ADDR_OWVAR 40
20560: PUSH
20561: LD_INT 25
20563: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
20564: LD_ADDR_OWVAR 37
20568: PUSH
20569: LD_INT 13
20571: ST_TO_ADDR
// vc_control = control_manual ;
20572: LD_ADDR_OWVAR 38
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// vc_engine = engine_solar ;
20580: LD_ADDR_OWVAR 39
20584: PUSH
20585: LD_INT 2
20587: ST_TO_ADDR
// av = CreateVehicle ;
20588: LD_ADDR_LOC 24
20592: PUSH
20593: CALL_OW 45
20597: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20598: LD_LOC 23
20602: PPUSH
20603: LD_LOC 24
20607: PPUSH
20608: CALL_OW 52
// pom = pom ^ av ;
20612: LD_ADDR_VAR 0 2
20616: PUSH
20617: LD_VAR 0 2
20621: PUSH
20622: LD_LOC 24
20626: ADD
20627: ST_TO_ADDR
// vc_weapon = ar_gun ;
20628: LD_ADDR_OWVAR 40
20632: PUSH
20633: LD_INT 27
20635: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
20636: LD_ADDR_OWVAR 37
20640: PUSH
20641: LD_INT 14
20643: ST_TO_ADDR
// vc_control = control_apeman ;
20644: LD_ADDR_OWVAR 38
20648: PUSH
20649: LD_INT 5
20651: ST_TO_ADDR
// vc_engine = engine_combustion ;
20652: LD_ADDR_OWVAR 39
20656: PUSH
20657: LD_INT 1
20659: ST_TO_ADDR
// av = CreateVehicle ;
20660: LD_ADDR_LOC 24
20664: PUSH
20665: CALL_OW 45
20669: ST_TO_ADDR
// pom = pom ^ av ;
20670: LD_ADDR_VAR 0 2
20674: PUSH
20675: LD_VAR 0 2
20679: PUSH
20680: LD_LOC 24
20684: ADD
20685: ST_TO_ADDR
// vc_weapon = ar_gun ;
20686: LD_ADDR_OWVAR 40
20690: PUSH
20691: LD_INT 27
20693: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
20694: LD_ADDR_OWVAR 37
20698: PUSH
20699: LD_INT 14
20701: ST_TO_ADDR
// vc_control = control_apeman ;
20702: LD_ADDR_OWVAR 38
20706: PUSH
20707: LD_INT 5
20709: ST_TO_ADDR
// vc_engine = engine_combustion ;
20710: LD_ADDR_OWVAR 39
20714: PUSH
20715: LD_INT 1
20717: ST_TO_ADDR
// av = CreateVehicle ;
20718: LD_ADDR_LOC 24
20722: PUSH
20723: CALL_OW 45
20727: ST_TO_ADDR
// pom = pom ^ av ;
20728: LD_ADDR_VAR 0 2
20732: PUSH
20733: LD_VAR 0 2
20737: PUSH
20738: LD_LOC 24
20742: ADD
20743: ST_TO_ADDR
// Arabi_komanda1 = pom ;
20744: LD_ADDR_EXP 67
20748: PUSH
20749: LD_VAR 0 2
20753: ST_TO_ADDR
// Arabi_komanda2 = pom ;
20754: LD_ADDR_EXP 68
20758: PUSH
20759: LD_VAR 0 2
20763: ST_TO_ADDR
// vc_weapon = ar_gun ;
20764: LD_ADDR_OWVAR 40
20768: PUSH
20769: LD_INT 27
20771: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
20772: LD_ADDR_OWVAR 37
20776: PUSH
20777: LD_INT 14
20779: ST_TO_ADDR
// vc_control = control_apeman ;
20780: LD_ADDR_OWVAR 38
20784: PUSH
20785: LD_INT 5
20787: ST_TO_ADDR
// vc_engine = engine_combustion ;
20788: LD_ADDR_OWVAR 39
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// av = CreateVehicle ;
20796: LD_ADDR_LOC 24
20800: PUSH
20801: CALL_OW 45
20805: ST_TO_ADDR
// pom = pom ^ av ;
20806: LD_ADDR_VAR 0 2
20810: PUSH
20811: LD_VAR 0 2
20815: PUSH
20816: LD_LOC 24
20820: ADD
20821: ST_TO_ADDR
// av = CreateVehicle ;
20822: LD_ADDR_LOC 24
20826: PUSH
20827: CALL_OW 45
20831: ST_TO_ADDR
// pom = pom ^ av ;
20832: LD_ADDR_VAR 0 2
20836: PUSH
20837: LD_VAR 0 2
20841: PUSH
20842: LD_LOC 24
20846: ADD
20847: ST_TO_ADDR
// vc_weapon = ar_gun ;
20848: LD_ADDR_OWVAR 40
20852: PUSH
20853: LD_INT 27
20855: ST_TO_ADDR
// av = CreateVehicle ;
20856: LD_ADDR_LOC 24
20860: PUSH
20861: CALL_OW 45
20865: ST_TO_ADDR
// pom = pom ^ av ;
20866: LD_ADDR_VAR 0 2
20870: PUSH
20871: LD_VAR 0 2
20875: PUSH
20876: LD_LOC 24
20880: ADD
20881: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20882: LD_ADDR_VAR 0 2
20886: PUSH
20887: LD_VAR 0 2
20891: PUSH
20892: CALL 16112 0 0
20896: PPUSH
20897: LD_INT 1
20899: PPUSH
20900: LD_INT 6
20902: PPUSH
20903: LD_STRING 
20905: PPUSH
20906: CALL 16147 0 4
20910: ADD
20911: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20912: LD_ADDR_VAR 0 2
20916: PUSH
20917: LD_VAR 0 2
20921: PUSH
20922: CALL 16112 0 0
20926: PPUSH
20927: LD_INT 1
20929: PPUSH
20930: LD_INT 6
20932: PPUSH
20933: LD_STRING 
20935: PPUSH
20936: CALL 16147 0 4
20940: ADD
20941: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
20942: LD_ADDR_LOC 23
20946: PUSH
20947: CALL 16112 0 0
20951: PPUSH
20952: LD_INT 3
20954: PPUSH
20955: LD_INT 6
20957: PPUSH
20958: LD_STRING 
20960: PPUSH
20961: CALL 16147 0 4
20965: ST_TO_ADDR
// vc_weapon = ar_gun ;
20966: LD_ADDR_OWVAR 40
20970: PUSH
20971: LD_INT 27
20973: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
20974: LD_ADDR_OWVAR 37
20978: PUSH
20979: LD_INT 13
20981: ST_TO_ADDR
// vc_control = control_manual ;
20982: LD_ADDR_OWVAR 38
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// vc_engine = engine_siberite ;
20990: LD_ADDR_OWVAR 39
20994: PUSH
20995: LD_INT 3
20997: ST_TO_ADDR
// av = CreateVehicle ;
20998: LD_ADDR_LOC 24
21002: PUSH
21003: CALL_OW 45
21007: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21008: LD_LOC 23
21012: PPUSH
21013: LD_LOC 24
21017: PPUSH
21018: CALL_OW 52
// pom = pom ^ av ;
21022: LD_ADDR_VAR 0 2
21026: PUSH
21027: LD_VAR 0 2
21031: PUSH
21032: LD_LOC 24
21036: ADD
21037: ST_TO_ADDR
// Arabi_komanda3 = pom ;
21038: LD_ADDR_EXP 69
21042: PUSH
21043: LD_VAR 0 2
21047: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 8 ,  ) ;
21048: LD_ADDR_VAR 0 2
21052: PUSH
21053: CALL 16112 0 0
21057: PPUSH
21058: LD_INT 1
21060: PPUSH
21061: LD_INT 8
21063: PPUSH
21064: LD_STRING 
21066: PPUSH
21067: CALL 16147 0 4
21071: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21072: LD_ADDR_VAR 0 2
21076: PUSH
21077: LD_VAR 0 2
21081: PUSH
21082: CALL 16112 0 0
21086: PPUSH
21087: LD_INT 1
21089: PPUSH
21090: LD_INT 6
21092: PPUSH
21093: LD_STRING 
21095: PPUSH
21096: CALL 16147 0 4
21100: ADD
21101: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21102: LD_ADDR_VAR 0 2
21106: PUSH
21107: LD_VAR 0 2
21111: PUSH
21112: CALL 16112 0 0
21116: PPUSH
21117: LD_INT 1
21119: PPUSH
21120: LD_INT 6
21122: PPUSH
21123: LD_STRING 
21125: PPUSH
21126: CALL 16147 0 4
21130: ADD
21131: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21132: LD_ADDR_VAR 0 2
21136: PUSH
21137: LD_VAR 0 2
21141: PUSH
21142: CALL 16112 0 0
21146: PPUSH
21147: LD_INT 8
21149: PPUSH
21150: LD_INT 6
21152: PPUSH
21153: LD_STRING 
21155: PPUSH
21156: CALL 16147 0 4
21160: ADD
21161: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21162: LD_ADDR_VAR 0 2
21166: PUSH
21167: LD_VAR 0 2
21171: PUSH
21172: CALL 16112 0 0
21176: PPUSH
21177: LD_INT 8
21179: PPUSH
21180: LD_INT 6
21182: PPUSH
21183: LD_STRING 
21185: PPUSH
21186: CALL 16147 0 4
21190: ADD
21191: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , 6 ,  ) ;
21192: LD_ADDR_VAR 0 2
21196: PUSH
21197: LD_VAR 0 2
21201: PUSH
21202: CALL 16112 0 0
21206: PPUSH
21207: LD_INT 4
21209: PPUSH
21210: LD_INT 6
21212: PPUSH
21213: LD_STRING 
21215: PPUSH
21216: CALL 16147 0 4
21220: ADD
21221: ST_TO_ADDR
// Arabi_komanda4 = pom ;
21222: LD_ADDR_EXP 70
21226: PUSH
21227: LD_VAR 0 2
21231: ST_TO_ADDR
// end ;
21232: LD_VAR 0 1
21236: RET
// export function create_ru_posily_ma_utek ; var pom ; begin
21237: LD_INT 0
21239: PPUSH
21240: PPUSH
// uc_side = You2 ;
21241: LD_ADDR_OWVAR 20
21245: PUSH
21246: LD_EXP 2
21250: ST_TO_ADDR
// uc_nation = nation_russian ;
21251: LD_ADDR_OWVAR 21
21255: PUSH
21256: LD_INT 3
21258: ST_TO_ADDR
// pom = [ ] ;
21259: LD_ADDR_VAR 0 2
21263: PUSH
21264: EMPTY
21265: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21266: LD_ADDR_LOC 23
21270: PUSH
21271: CALL 16112 0 0
21275: PPUSH
21276: LD_INT 3
21278: PPUSH
21279: LD_INT 3
21281: PPUSH
21282: LD_STRING 
21284: PPUSH
21285: CALL 16147 0 4
21289: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
21290: LD_ADDR_OWVAR 40
21294: PUSH
21295: LD_INT 42
21297: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
21298: LD_ADDR_OWVAR 37
21302: PUSH
21303: LD_INT 23
21305: ST_TO_ADDR
// vc_control = control_manual ;
21306: LD_ADDR_OWVAR 38
21310: PUSH
21311: LD_INT 1
21313: ST_TO_ADDR
// vc_engine = engine_combustion ;
21314: LD_ADDR_OWVAR 39
21318: PUSH
21319: LD_INT 1
21321: ST_TO_ADDR
// av = CreateVehicle ;
21322: LD_ADDR_LOC 24
21326: PUSH
21327: CALL_OW 45
21331: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21332: LD_LOC 23
21336: PPUSH
21337: LD_LOC 24
21341: PPUSH
21342: CALL_OW 52
// pom = pom ^ av ;
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_VAR 0 2
21355: PUSH
21356: LD_LOC 24
21360: ADD
21361: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21362: LD_ADDR_LOC 23
21366: PUSH
21367: CALL 16112 0 0
21371: PPUSH
21372: LD_INT 3
21374: PPUSH
21375: LD_INT 3
21377: PPUSH
21378: LD_STRING 
21380: PPUSH
21381: CALL 16147 0 4
21385: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
21386: LD_ADDR_OWVAR 37
21390: PUSH
21391: LD_INT 21
21393: ST_TO_ADDR
// av = CreateVehicle ;
21394: LD_ADDR_LOC 24
21398: PUSH
21399: CALL_OW 45
21403: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21404: LD_LOC 23
21408: PPUSH
21409: LD_LOC 24
21413: PPUSH
21414: CALL_OW 52
// pom = pom ^ av ;
21418: LD_ADDR_VAR 0 2
21422: PUSH
21423: LD_VAR 0 2
21427: PUSH
21428: LD_LOC 24
21432: ADD
21433: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_VAR 0 2
21443: PUSH
21444: CALL 16112 0 0
21448: PPUSH
21449: LD_INT 1
21451: PPUSH
21452: LD_INT 3
21454: PPUSH
21455: LD_STRING 
21457: PPUSH
21458: CALL 16147 0 4
21462: ADD
21463: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_VAR 0 2
21473: PUSH
21474: CALL 16112 0 0
21478: PPUSH
21479: LD_INT 1
21481: PPUSH
21482: LD_INT 3
21484: PPUSH
21485: LD_STRING 
21487: PPUSH
21488: CALL 16147 0 4
21492: ADD
21493: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21494: LD_ADDR_VAR 0 2
21498: PUSH
21499: LD_VAR 0 2
21503: PUSH
21504: CALL 16112 0 0
21508: PPUSH
21509: LD_INT 1
21511: PPUSH
21512: LD_INT 3
21514: PPUSH
21515: LD_STRING 
21517: PPUSH
21518: CALL 16147 0 4
21522: ADD
21523: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
21524: LD_ADDR_VAR 0 2
21528: PUSH
21529: LD_VAR 0 2
21533: PUSH
21534: CALL 16112 0 0
21538: PPUSH
21539: LD_INT 3
21541: PPUSH
21542: LD_INT 3
21544: PPUSH
21545: LD_STRING 
21547: PPUSH
21548: CALL 16147 0 4
21552: ADD
21553: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
21554: LD_ADDR_VAR 0 2
21558: PUSH
21559: LD_VAR 0 2
21563: PUSH
21564: CALL 16112 0 0
21568: PPUSH
21569: LD_INT 3
21571: PPUSH
21572: LD_INT 3
21574: PPUSH
21575: LD_STRING 
21577: PPUSH
21578: CALL 16147 0 4
21582: ADD
21583: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
21584: LD_ADDR_VAR 0 2
21588: PUSH
21589: LD_VAR 0 2
21593: PUSH
21594: CALL 16112 0 0
21598: PPUSH
21599: LD_INT 3
21601: PPUSH
21602: LD_INT 3
21604: PPUSH
21605: LD_STRING 
21607: PPUSH
21608: CALL 16147 0 4
21612: ADD
21613: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: LD_VAR 0 2
21623: PUSH
21624: CALL 16112 0 0
21628: PPUSH
21629: LD_INT 2
21631: PPUSH
21632: LD_INT 3
21634: PPUSH
21635: LD_STRING 
21637: PPUSH
21638: CALL 16147 0 4
21642: ADD
21643: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
21644: LD_ADDR_VAR 0 2
21648: PUSH
21649: LD_VAR 0 2
21653: PUSH
21654: CALL 16112 0 0
21658: PPUSH
21659: LD_INT 2
21661: PPUSH
21662: LD_INT 3
21664: PPUSH
21665: LD_STRING 
21667: PPUSH
21668: CALL 16147 0 4
21672: ADD
21673: ST_TO_ADDR
// RU_posily_na_utek = pom ;
21674: LD_ADDR_EXP 58
21678: PUSH
21679: LD_VAR 0 2
21683: ST_TO_ADDR
// end ;
21684: LD_VAR 0 1
21688: RET
// export function create_arabi_na_posily_kirovu ; var pom ; begin
21689: LD_INT 0
21691: PPUSH
21692: PPUSH
// pom = [ ] ;
21693: LD_ADDR_VAR 0 2
21697: PUSH
21698: EMPTY
21699: ST_TO_ADDR
// uc_side = Arabi ;
21700: LD_ADDR_OWVAR 20
21704: PUSH
21705: LD_EXP 5
21709: ST_TO_ADDR
// uc_nation = nation_arabian ;
21710: LD_ADDR_OWVAR 21
21714: PUSH
21715: LD_INT 2
21717: ST_TO_ADDR
// vc_weapon = ar_gun ;
21718: LD_ADDR_OWVAR 40
21722: PUSH
21723: LD_INT 27
21725: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21726: LD_ADDR_OWVAR 37
21730: PUSH
21731: LD_INT 14
21733: ST_TO_ADDR
// vc_control = control_apeman ;
21734: LD_ADDR_OWVAR 38
21738: PUSH
21739: LD_INT 5
21741: ST_TO_ADDR
// vc_engine = engine_combustion ;
21742: LD_ADDR_OWVAR 39
21746: PUSH
21747: LD_INT 1
21749: ST_TO_ADDR
// av = CreateVehicle ;
21750: LD_ADDR_LOC 24
21754: PUSH
21755: CALL_OW 45
21759: ST_TO_ADDR
// pom = pom ^ av ;
21760: LD_ADDR_VAR 0 2
21764: PUSH
21765: LD_VAR 0 2
21769: PUSH
21770: LD_LOC 24
21774: ADD
21775: ST_TO_ADDR
// av = CreateVehicle ;
21776: LD_ADDR_LOC 24
21780: PUSH
21781: CALL_OW 45
21785: ST_TO_ADDR
// pom = pom ^ av ;
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_VAR 0 2
21795: PUSH
21796: LD_LOC 24
21800: ADD
21801: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
21802: LD_ADDR_LOC 23
21806: PUSH
21807: CALL 16112 0 0
21811: PPUSH
21812: LD_INT 3
21814: PPUSH
21815: LD_INT 5
21817: PPUSH
21818: LD_STRING 
21820: PPUSH
21821: CALL 16147 0 4
21825: ST_TO_ADDR
// vc_control = control_manual ;
21826: LD_ADDR_OWVAR 38
21830: PUSH
21831: LD_INT 1
21833: ST_TO_ADDR
// av = CreateVehicle ;
21834: LD_ADDR_LOC 24
21838: PUSH
21839: CALL_OW 45
21843: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21844: LD_LOC 23
21848: PPUSH
21849: LD_LOC 24
21853: PPUSH
21854: CALL_OW 52
// pom = pom ^ av ;
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_VAR 0 2
21867: PUSH
21868: LD_LOC 24
21872: ADD
21873: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
21874: LD_ADDR_LOC 23
21878: PUSH
21879: CALL 16112 0 0
21883: PPUSH
21884: LD_INT 3
21886: PPUSH
21887: LD_INT 5
21889: PPUSH
21890: LD_STRING 
21892: PPUSH
21893: CALL 16147 0 4
21897: ST_TO_ADDR
// vc_control = control_manual ;
21898: LD_ADDR_OWVAR 38
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// av = CreateVehicle ;
21906: LD_ADDR_LOC 24
21910: PUSH
21911: CALL_OW 45
21915: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21916: LD_LOC 23
21920: PPUSH
21921: LD_LOC 24
21925: PPUSH
21926: CALL_OW 52
// pom = pom ^ av ;
21930: LD_ADDR_VAR 0 2
21934: PUSH
21935: LD_VAR 0 2
21939: PUSH
21940: LD_LOC 24
21944: ADD
21945: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
21946: LD_ADDR_VAR 0 2
21950: PUSH
21951: LD_VAR 0 2
21955: PUSH
21956: CALL 16112 0 0
21960: PPUSH
21961: LD_INT 1
21963: PPUSH
21964: LD_INT 7
21966: PPUSH
21967: LD_STRING 
21969: PPUSH
21970: CALL 16147 0 4
21974: ADD
21975: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
21976: LD_ADDR_VAR 0 2
21980: PUSH
21981: LD_VAR 0 2
21985: PUSH
21986: CALL 16112 0 0
21990: PPUSH
21991: LD_INT 1
21993: PPUSH
21994: LD_INT 7
21996: PPUSH
21997: LD_STRING 
21999: PPUSH
22000: CALL 16147 0 4
22004: ADD
22005: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22006: LD_ADDR_VAR 0 2
22010: PUSH
22011: LD_VAR 0 2
22015: PUSH
22016: CALL 16112 0 0
22020: PPUSH
22021: LD_INT 8
22023: PPUSH
22024: LD_INT 7
22026: PPUSH
22027: LD_STRING 
22029: PPUSH
22030: CALL 16147 0 4
22034: ADD
22035: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_VAR 0 2
22045: PUSH
22046: CALL 16112 0 0
22050: PPUSH
22051: LD_INT 8
22053: PPUSH
22054: LD_INT 7
22056: PPUSH
22057: LD_STRING 
22059: PPUSH
22060: CALL 16147 0 4
22064: ADD
22065: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22066: LD_ADDR_VAR 0 2
22070: PUSH
22071: LD_VAR 0 2
22075: PUSH
22076: CALL 16112 0 0
22080: PPUSH
22081: LD_INT 8
22083: PPUSH
22084: LD_INT 7
22086: PPUSH
22087: LD_STRING 
22089: PPUSH
22090: CALL 16147 0 4
22094: ADD
22095: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22096: LD_ADDR_VAR 0 2
22100: PUSH
22101: LD_VAR 0 2
22105: PUSH
22106: CALL 16112 0 0
22110: PPUSH
22111: LD_INT 8
22113: PPUSH
22114: LD_INT 7
22116: PPUSH
22117: LD_STRING 
22119: PPUSH
22120: CALL 16147 0 4
22124: ADD
22125: ST_TO_ADDR
// ARABI_KIROV_POSILY = pom ;
22126: LD_ADDR_EXP 66
22130: PUSH
22131: LD_VAR 0 2
22135: ST_TO_ADDR
// end ;
22136: LD_VAR 0 1
22140: RET
// export function create_cerpaci_ruske_auta ; var pom ; begin
22141: LD_INT 0
22143: PPUSH
22144: PPUSH
// pom = [ ] ;
22145: LD_ADDR_VAR 0 2
22149: PUSH
22150: EMPTY
22151: ST_TO_ADDR
// uc_nation = nation_russian ;
22152: LD_ADDR_OWVAR 21
22156: PUSH
22157: LD_INT 3
22159: ST_TO_ADDR
// uc_side = You2 ;
22160: LD_ADDR_OWVAR 20
22164: PUSH
22165: LD_EXP 2
22169: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
22170: LD_ADDR_OWVAR 40
22174: PUSH
22175: LD_INT 51
22177: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22178: LD_ADDR_OWVAR 37
22182: PUSH
22183: LD_INT 21
22185: ST_TO_ADDR
// vc_control = control_manual ;
22186: LD_ADDR_OWVAR 38
22190: PUSH
22191: LD_INT 1
22193: ST_TO_ADDR
// vc_engine = engine_combustion ;
22194: LD_ADDR_OWVAR 39
22198: PUSH
22199: LD_INT 1
22201: ST_TO_ADDR
// av = CreateVehicle ;
22202: LD_ADDR_LOC 24
22206: PUSH
22207: CALL_OW 45
22211: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22212: LD_ADDR_LOC 23
22216: PUSH
22217: CALL 16112 0 0
22221: PPUSH
22222: LD_INT 1
22224: PPUSH
22225: LD_INT 4
22227: PPUSH
22228: LD_STRING 
22230: PPUSH
22231: CALL 16147 0 4
22235: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22236: LD_LOC 23
22240: PPUSH
22241: LD_LOC 24
22245: PPUSH
22246: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22250: LD_LOC 24
22254: PPUSH
22255: LD_INT 2
22257: PPUSH
22258: LD_INT 100
22260: PPUSH
22261: CALL_OW 290
// pom = pom ^ av ;
22265: LD_ADDR_VAR 0 2
22269: PUSH
22270: LD_VAR 0 2
22274: PUSH
22275: LD_LOC 24
22279: ADD
22280: ST_TO_ADDR
// av = CreateVehicle ;
22281: LD_ADDR_LOC 24
22285: PUSH
22286: CALL_OW 45
22290: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22291: LD_ADDR_LOC 23
22295: PUSH
22296: CALL 16112 0 0
22300: PPUSH
22301: LD_INT 1
22303: PPUSH
22304: LD_INT 4
22306: PPUSH
22307: LD_STRING 
22309: PPUSH
22310: CALL 16147 0 4
22314: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22315: LD_LOC 23
22319: PPUSH
22320: LD_LOC 24
22324: PPUSH
22325: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22329: LD_LOC 24
22333: PPUSH
22334: LD_INT 2
22336: PPUSH
22337: LD_INT 100
22339: PPUSH
22340: CALL_OW 290
// pom = pom ^ av ;
22344: LD_ADDR_VAR 0 2
22348: PUSH
22349: LD_VAR 0 2
22353: PUSH
22354: LD_LOC 24
22358: ADD
22359: ST_TO_ADDR
// av = CreateVehicle ;
22360: LD_ADDR_LOC 24
22364: PUSH
22365: CALL_OW 45
22369: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22370: LD_ADDR_LOC 23
22374: PUSH
22375: CALL 16112 0 0
22379: PPUSH
22380: LD_INT 1
22382: PPUSH
22383: LD_INT 4
22385: PPUSH
22386: LD_STRING 
22388: PPUSH
22389: CALL 16147 0 4
22393: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22394: LD_LOC 23
22398: PPUSH
22399: LD_LOC 24
22403: PPUSH
22404: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22408: LD_LOC 24
22412: PPUSH
22413: LD_INT 2
22415: PPUSH
22416: LD_INT 100
22418: PPUSH
22419: CALL_OW 290
// pom = pom ^ av ;
22423: LD_ADDR_VAR 0 2
22427: PUSH
22428: LD_VAR 0 2
22432: PUSH
22433: LD_LOC 24
22437: ADD
22438: ST_TO_ADDR
// RUSI_CERPACI_AUTA_LIST = pom ;
22439: LD_ADDR_EXP 59
22443: PUSH
22444: LD_VAR 0 2
22448: ST_TO_ADDR
// end ; end_of_file
22449: LD_VAR 0 1
22453: RET
// var Am_hlidka ; var Am_pomoc ; export Am_posily ; export Prezite_posily ; every 0 0$0.1 do var i ;
22454: GO 22456
22456: DISABLE
22457: LD_INT 0
22459: PPUSH
// begin Am_hlidka = [ ] ;
22460: LD_ADDR_LOC 25
22464: PUSH
22465: EMPTY
22466: ST_TO_ADDR
// Am_pomoc = [ ] ;
22467: LD_ADDR_LOC 26
22471: PUSH
22472: EMPTY
22473: ST_TO_ADDR
// Prezite_posily = 0 ;
22474: LD_ADDR_EXP 73
22478: PUSH
22479: LD_INT 0
22481: ST_TO_ADDR
// for i in [ 101 , 102 , 103 ] do
22482: LD_ADDR_VAR 0 1
22486: PUSH
22487: LD_INT 101
22489: PUSH
22490: LD_INT 102
22492: PUSH
22493: LD_INT 103
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: PUSH
22501: FOR_IN
22502: IFFALSE 22511
// enable ( i ) end ;
22504: LD_VAR 0 1
22508: ENABLE_MARKED
22509: GO 22501
22511: POP
22512: POP
22513: PPOPN 1
22515: END
// every 0 0$1 do var budovy ;
22516: GO 22518
22518: DISABLE
22519: LD_INT 0
22521: PPUSH
// begin ComEnterUnit ( Am_pru1 , Am_bar2 ) ;
22522: LD_INT 26
22524: PPUSH
22525: LD_INT 25
22527: PPUSH
22528: CALL_OW 120
// ComEnterUnit ( Am_pru2 , Am_bar2 ) ;
22532: LD_INT 27
22534: PPUSH
22535: LD_INT 25
22537: PPUSH
22538: CALL_OW 120
// ComEnterUnit ( Am_pru3 , Am_bar2 ) ;
22542: LD_INT 28
22544: PPUSH
22545: LD_INT 25
22547: PPUSH
22548: CALL_OW 120
// ComEnterUnit ( Am_vb1 , Am_bu1 ) ;
22552: LD_INT 29
22554: PPUSH
22555: LD_INT 7
22557: PPUSH
22558: CALL_OW 120
// ComEnterUnit ( Am_vb2 , Am_bu2 ) ;
22562: LD_INT 30
22564: PPUSH
22565: LD_INT 8
22567: PPUSH
22568: CALL_OW 120
// ComEnterUnit ( Am_vb3 , Am_bu3 ) ;
22572: LD_INT 31
22574: PPUSH
22575: LD_INT 19
22577: PPUSH
22578: CALL_OW 120
// ComEnterUnit ( Am_vb4 , Am_bu4 ) ;
22582: LD_INT 32
22584: PPUSH
22585: LD_INT 18
22587: PPUSH
22588: CALL_OW 120
// ComEnterUnit ( Am_sol1 , Am_bar1 ) ;
22592: LD_INT 38
22594: PPUSH
22595: LD_INT 11
22597: PPUSH
22598: CALL_OW 120
// ComEnterUnit ( Am_sol2 , Am_bar1 ) ;
22602: LD_INT 39
22604: PPUSH
22605: LD_INT 11
22607: PPUSH
22608: CALL_OW 120
// ComEnterUnit ( Am_sol3 , Am_bar1 ) ;
22612: LD_INT 40
22614: PPUSH
22615: LD_INT 11
22617: PPUSH
22618: CALL_OW 120
// ComEnterUnit ( pitomec , Am_bar2 ) ;
22622: LD_INT 63
22624: PPUSH
22625: LD_INT 25
22627: PPUSH
22628: CALL_OW 120
// ComEnterUnit ( Am_sol4 , Am_dep ) ;
22632: LD_INT 41
22634: PPUSH
22635: LD_INT 12
22637: PPUSH
22638: CALL_OW 120
// ComEnterUnit ( Am_eng1 , Am_dep ) ;
22642: LD_INT 36
22644: PPUSH
22645: LD_INT 12
22647: PPUSH
22648: CALL_OW 120
// ComEnterUnit ( Am_sci1 , Am_lab ) ;
22652: LD_INT 37
22654: PPUSH
22655: LD_INT 9
22657: PPUSH
22658: CALL_OW 120
// ComEnterUnit ( Am_me1 , Am_fac ) ;
22662: LD_INT 33
22664: PPUSH
22665: LD_INT 10
22667: PPUSH
22668: CALL_OW 120
// ComEnterUnit ( Am_me2 , Am_fac ) ;
22672: LD_INT 34
22674: PPUSH
22675: LD_INT 10
22677: PPUSH
22678: CALL_OW 120
// ComEnterUnit ( Am_me3 , Am_fac ) ;
22682: LD_INT 35
22684: PPUSH
22685: LD_INT 10
22687: PPUSH
22688: CALL_OW 120
// budovy = [ Am_bu1 , Am_bu2 , Am_bu3 , Am_bu4 , Am_el1 , Am_el2 , Am_lab , Am_fac , Am_mine , Am_dep , Am_bar1 , Am_bar2 ] ;
22692: LD_ADDR_VAR 0 1
22696: PUSH
22697: LD_INT 7
22699: PUSH
22700: LD_INT 8
22702: PUSH
22703: LD_INT 19
22705: PUSH
22706: LD_INT 18
22708: PUSH
22709: LD_INT 22
22711: PUSH
22712: LD_INT 23
22714: PUSH
22715: LD_INT 9
22717: PUSH
22718: LD_INT 10
22720: PUSH
22721: LD_INT 24
22723: PUSH
22724: LD_INT 12
22726: PUSH
22727: LD_INT 11
22729: PUSH
22730: LD_INT 25
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: ST_TO_ADDR
// SetBLevel ( budovy , levely_am_budov [ difficulty ] ) ;
22747: LD_VAR 0 1
22751: PPUSH
22752: LD_EXP 21
22756: PUSH
22757: LD_OWVAR 67
22761: ARRAY
22762: PPUSH
22763: CALL_OW 241
// end ;
22767: PPOPN 1
22769: END
// export function amici_hlidka ; begin
22770: LD_INT 0
22772: PPUSH
// case difficulty of 1 :
22773: LD_OWVAR 67
22777: PUSH
22778: LD_INT 1
22780: DOUBLE
22781: EQUAL
22782: IFTRUE 22786
22784: GO 22800
22786: POP
// Am_hlidka = [ Am_pru1 ] ; 2 :
22787: LD_ADDR_LOC 25
22791: PUSH
22792: LD_INT 26
22794: PUSH
22795: EMPTY
22796: LIST
22797: ST_TO_ADDR
22798: GO 22857
22800: LD_INT 2
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 22826
22808: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 ] ; 3 :
22809: LD_ADDR_LOC 25
22813: PUSH
22814: LD_INT 26
22816: PUSH
22817: LD_INT 27
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: ST_TO_ADDR
22824: GO 22857
22826: LD_INT 3
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 22856
22834: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 , Am_pru3 ] ; end ;
22835: LD_ADDR_LOC 25
22839: PUSH
22840: LD_INT 26
22842: PUSH
22843: LD_INT 27
22845: PUSH
22846: LD_INT 28
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 22857
22856: POP
// ComExitBuilding ( Am_hlidka ) ;
22857: LD_LOC 25
22861: PPUSH
22862: CALL_OW 122
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
22866: LD_LOC 25
22870: PPUSH
22871: LD_INT 34
22873: PPUSH
22874: LD_INT 16
22876: PPUSH
22877: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
22881: LD_LOC 25
22885: PPUSH
22886: LD_INT 245
22888: PPUSH
22889: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
22893: LD_LOC 25
22897: PPUSH
22898: LD_INT 51
22900: PPUSH
22901: LD_INT 19
22903: PPUSH
22904: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
22908: LD_LOC 25
22912: PPUSH
22913: LD_INT 245
22915: PPUSH
22916: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
22920: LD_LOC 25
22924: PPUSH
22925: LD_INT 54
22927: PPUSH
22928: LD_INT 5
22930: PPUSH
22931: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
22935: LD_LOC 25
22939: PPUSH
22940: LD_INT 245
22942: PPUSH
22943: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
22947: LD_LOC 25
22951: PPUSH
22952: LD_INT 77
22954: PPUSH
22955: LD_INT 16
22957: PPUSH
22958: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
22962: LD_LOC 25
22966: PPUSH
22967: LD_INT 245
22969: PPUSH
22970: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
22974: LD_LOC 25
22978: PPUSH
22979: LD_INT 81
22981: PPUSH
22982: LD_INT 32
22984: PPUSH
22985: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
22989: LD_LOC 25
22993: PPUSH
22994: LD_INT 245
22996: PPUSH
22997: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23001: LD_LOC 25
23005: PPUSH
23006: LD_INT 73
23008: PPUSH
23009: LD_INT 32
23011: PPUSH
23012: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23016: LD_LOC 25
23020: PPUSH
23021: LD_INT 245
23023: PPUSH
23024: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
23028: LD_LOC 25
23032: PPUSH
23033: LD_INT 57
23035: PPUSH
23036: LD_INT 33
23038: PPUSH
23039: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23043: LD_LOC 25
23047: PPUSH
23048: LD_INT 245
23050: PPUSH
23051: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
23055: LD_LOC 25
23059: PPUSH
23060: LD_INT 45
23062: PPUSH
23063: LD_INT 24
23065: PPUSH
23066: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23070: LD_LOC 25
23074: PPUSH
23075: LD_INT 245
23077: PPUSH
23078: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
23082: LD_LOC 25
23086: PPUSH
23087: LD_INT 34
23089: PPUSH
23090: LD_INT 13
23092: PPUSH
23093: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23097: LD_LOC 25
23101: PPUSH
23102: LD_INT 245
23104: PPUSH
23105: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23109: LD_LOC 25
23113: PPUSH
23114: LD_INT 34
23116: PPUSH
23117: LD_INT 16
23119: PPUSH
23120: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23124: LD_LOC 25
23128: PPUSH
23129: LD_INT 245
23131: PPUSH
23132: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23136: LD_LOC 25
23140: PPUSH
23141: LD_INT 51
23143: PPUSH
23144: LD_INT 19
23146: PPUSH
23147: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23151: LD_LOC 25
23155: PPUSH
23156: LD_INT 245
23158: PPUSH
23159: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23163: LD_LOC 25
23167: PPUSH
23168: LD_INT 54
23170: PPUSH
23171: LD_INT 5
23173: PPUSH
23174: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23178: LD_LOC 25
23182: PPUSH
23183: LD_INT 245
23185: PPUSH
23186: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23190: LD_LOC 25
23194: PPUSH
23195: LD_INT 77
23197: PPUSH
23198: LD_INT 16
23200: PPUSH
23201: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23205: LD_LOC 25
23209: PPUSH
23210: LD_INT 245
23212: PPUSH
23213: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23217: LD_LOC 25
23221: PPUSH
23222: LD_INT 81
23224: PPUSH
23225: LD_INT 32
23227: PPUSH
23228: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23232: LD_LOC 25
23236: PPUSH
23237: LD_INT 245
23239: PPUSH
23240: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23244: LD_LOC 25
23248: PPUSH
23249: LD_INT 73
23251: PPUSH
23252: LD_INT 32
23254: PPUSH
23255: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23259: LD_LOC 25
23263: PPUSH
23264: LD_INT 245
23266: PPUSH
23267: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
23271: LD_LOC 25
23275: PPUSH
23276: LD_INT 57
23278: PPUSH
23279: LD_INT 33
23281: PPUSH
23282: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23286: LD_LOC 25
23290: PPUSH
23291: LD_INT 245
23293: PPUSH
23294: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
23298: LD_LOC 25
23302: PPUSH
23303: LD_INT 45
23305: PPUSH
23306: LD_INT 24
23308: PPUSH
23309: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23313: LD_LOC 25
23317: PPUSH
23318: LD_INT 245
23320: PPUSH
23321: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
23325: LD_LOC 25
23329: PPUSH
23330: LD_INT 34
23332: PPUSH
23333: LD_INT 13
23335: PPUSH
23336: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23340: LD_LOC 25
23344: PPUSH
23345: LD_INT 245
23347: PPUSH
23348: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23352: LD_LOC 25
23356: PPUSH
23357: LD_INT 34
23359: PPUSH
23360: LD_INT 16
23362: PPUSH
23363: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23367: LD_LOC 25
23371: PPUSH
23372: LD_INT 245
23374: PPUSH
23375: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23379: LD_LOC 25
23383: PPUSH
23384: LD_INT 51
23386: PPUSH
23387: LD_INT 19
23389: PPUSH
23390: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23394: LD_LOC 25
23398: PPUSH
23399: LD_INT 245
23401: PPUSH
23402: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23406: LD_LOC 25
23410: PPUSH
23411: LD_INT 54
23413: PPUSH
23414: LD_INT 5
23416: PPUSH
23417: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23421: LD_LOC 25
23425: PPUSH
23426: LD_INT 245
23428: PPUSH
23429: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23433: LD_LOC 25
23437: PPUSH
23438: LD_INT 77
23440: PPUSH
23441: LD_INT 16
23443: PPUSH
23444: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23448: LD_LOC 25
23452: PPUSH
23453: LD_INT 245
23455: PPUSH
23456: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23460: LD_LOC 25
23464: PPUSH
23465: LD_INT 81
23467: PPUSH
23468: LD_INT 32
23470: PPUSH
23471: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23475: LD_LOC 25
23479: PPUSH
23480: LD_INT 245
23482: PPUSH
23483: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23487: LD_LOC 25
23491: PPUSH
23492: LD_INT 73
23494: PPUSH
23495: LD_INT 32
23497: PPUSH
23498: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23502: LD_LOC 25
23506: PPUSH
23507: LD_INT 245
23509: PPUSH
23510: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
23514: LD_LOC 25
23518: PPUSH
23519: LD_INT 57
23521: PPUSH
23522: LD_INT 33
23524: PPUSH
23525: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23529: LD_LOC 25
23533: PPUSH
23534: LD_INT 245
23536: PPUSH
23537: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
23541: LD_LOC 25
23545: PPUSH
23546: LD_INT 45
23548: PPUSH
23549: LD_INT 24
23551: PPUSH
23552: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23556: LD_LOC 25
23560: PPUSH
23561: LD_INT 245
23563: PPUSH
23564: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
23568: LD_LOC 25
23572: PPUSH
23573: LD_INT 34
23575: PPUSH
23576: LD_INT 13
23578: PPUSH
23579: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23583: LD_LOC 25
23587: PPUSH
23588: LD_INT 245
23590: PPUSH
23591: CALL_OW 202
// enable ( 101 ) ;
23595: LD_INT 101
23597: ENABLE_MARKED
// enable ( 103 ) ;
23598: LD_INT 103
23600: ENABLE_MARKED
// enable ( 102 ) ;
23601: LD_INT 102
23603: ENABLE_MARKED
// end ;
23604: LD_VAR 0 1
23608: RET
// every 0 0$1 marked 102 do var i , j , pom ;
23609: GO 23611
23611: DISABLE
23612: LD_INT 0
23614: PPUSH
23615: PPUSH
23616: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
23617: LD_ADDR_VAR 0 3
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_EXP 1
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 21
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PPUSH
23648: CALL_OW 69
23652: ST_TO_ADDR
// for i in Am_hlidka do
23653: LD_ADDR_VAR 0 1
23657: PUSH
23658: LD_LOC 25
23662: PUSH
23663: FOR_IN
23664: IFFALSE 23732
// if GetLives ( i ) < 1000 then
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL_OW 256
23675: PUSH
23676: LD_INT 1000
23678: LESS
23679: IFFALSE 23730
// for j in pom do
23681: LD_ADDR_VAR 0 2
23685: PUSH
23686: LD_VAR 0 3
23690: PUSH
23691: FOR_IN
23692: IFFALSE 23728
// begin if See ( Amici , j ) then
23694: LD_EXP 4
23698: PPUSH
23699: LD_VAR 0 2
23703: PPUSH
23704: CALL_OW 292
23708: IFFALSE 23724
// ComAttackUnit ( Am_hlidka , j ) ;
23710: LD_LOC 25
23714: PPUSH
23715: LD_VAR 0 2
23719: PPUSH
23720: CALL_OW 115
// break ;
23724: GO 23728
// end ;
23726: GO 23691
23728: POP
23729: POP
23730: GO 23663
23732: POP
23733: POP
// end ;
23734: PPOPN 3
23736: END
// every 0 0$1 marked 101 do var i ; var jedn ; var posli ;
23737: GO 23739
23739: DISABLE
23740: LD_INT 0
23742: PPUSH
23743: PPUSH
23744: PPUSH
// begin jedn = [ ] ;
23745: LD_ADDR_VAR 0 2
23749: PUSH
23750: EMPTY
23751: ST_TO_ADDR
// posli = false ;
23752: LD_ADDR_VAR 0 3
23756: PUSH
23757: LD_INT 0
23759: ST_TO_ADDR
// for i in Am_hlidka do
23760: LD_ADDR_VAR 0 1
23764: PUSH
23765: LD_LOC 25
23769: PUSH
23770: FOR_IN
23771: IFFALSE 23806
// if GetLives ( i ) < 1000 then
23773: LD_VAR 0 1
23777: PPUSH
23778: CALL_OW 256
23782: PUSH
23783: LD_INT 1000
23785: LESS
23786: IFFALSE 23804
// jedn = jedn ^ i ;
23788: LD_ADDR_VAR 0 2
23792: PUSH
23793: LD_VAR 0 2
23797: PUSH
23798: LD_VAR 0 1
23802: ADD
23803: ST_TO_ADDR
23804: GO 23770
23806: POP
23807: POP
// if jedn > 0 then
23808: LD_VAR 0 2
23812: PUSH
23813: LD_INT 0
23815: GREATER
23816: IFFALSE 23861
// begin wait ( 0 0$7 ) ;
23818: LD_INT 245
23820: PPUSH
23821: CALL_OW 67
// for i in jedn do
23825: LD_ADDR_VAR 0 1
23829: PUSH
23830: LD_VAR 0 2
23834: PUSH
23835: FOR_IN
23836: IFFALSE 23859
// if IsOK ( i ) then
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 302
23847: IFFALSE 23857
// posli = true ;
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_INT 1
23856: ST_TO_ADDR
23857: GO 23835
23859: POP
23860: POP
// end ; if posli then
23861: LD_VAR 0 3
23865: IFFALSE 23880
// americka_pomoc_hlidce ( jedn [ 1 ] ) ;
23867: LD_VAR 0 2
23871: PUSH
23872: LD_INT 1
23874: ARRAY
23875: PPUSH
23876: CALL 24039 0 1
// enable ;
23880: ENABLE
// end ;
23881: PPOPN 3
23883: END
// every 0 0$1 marked 102 do
23884: GO 23886
23886: DISABLE
// begin wait ( schol_find_amikama [ difficulty ] ) ;
23887: LD_EXP 12
23891: PUSH
23892: LD_OWVAR 67
23896: ARRAY
23897: PPUSH
23898: CALL_OW 67
// if GetSide ( schol ) = You or GetSide ( schol2 ) = You then
23902: LD_EXP 33
23906: PPUSH
23907: CALL_OW 255
23911: PUSH
23912: LD_EXP 1
23916: EQUAL
23917: PUSH
23918: LD_EXP 34
23922: PPUSH
23923: CALL_OW 255
23927: PUSH
23928: LD_EXP 1
23932: EQUAL
23933: OR
23934: IFFALSE 23940
// exit else
23936: GO 23969
23938: GO 23969
// begin ComAgressiveMove ( Am_hlidka , 38 , 2 ) ;
23940: LD_LOC 25
23944: PPUSH
23945: LD_INT 38
23947: PPUSH
23948: LD_INT 2
23950: PPUSH
23951: CALL_OW 114
// AddComAttackUnit ( Am_hlidka , schol2 ) ;
23955: LD_LOC 25
23959: PPUSH
23960: LD_EXP 34
23964: PPUSH
23965: CALL_OW 175
// end ; end ;
23969: END
// every 0 0$3 trigger scholtze_saved or IsDead ( schol2 ) do
23970: LD_EXP 37
23974: PUSH
23975: LD_EXP 34
23979: PPUSH
23980: CALL_OW 301
23984: OR
23985: IFFALSE 24038
23987: GO 23989
23989: DISABLE
// begin ComAgressiveMove ( Am_hlidka , 28 , 18 ) ;
23990: LD_LOC 25
23994: PPUSH
23995: LD_INT 28
23997: PPUSH
23998: LD_INT 18
24000: PPUSH
24001: CALL_OW 114
// AddComEnterUnit ( Am_hlidka , Am_bar2 ) ;
24005: LD_LOC 25
24009: PPUSH
24010: LD_INT 25
24012: PPUSH
24013: CALL_OW 180
// ComAgressiveMove ( Am_pomoc , 21 , 32 ) ;
24017: LD_LOC 26
24021: PPUSH
24022: LD_INT 21
24024: PPUSH
24025: LD_INT 32
24027: PPUSH
24028: CALL_OW 114
// disable ( 101 ) ;
24032: LD_INT 101
24034: DISABLE_MARKED
// disable ( 102 ) ;
24035: LD_INT 102
24037: DISABLE_MARKED
// end ;
24038: END
// function americka_pomoc_hlidce ( jedn ) ; var i ; begin
24039: LD_INT 0
24041: PPUSH
24042: PPUSH
// Am_pomoc = AMERICKA_POMOC_HLIDCE_LIST ;
24043: LD_ADDR_LOC 26
24047: PUSH
24048: LD_EXP 50
24052: ST_TO_ADDR
// while SeeArea ( Amici , Help_area ) > 0 do
24053: LD_EXP 4
24057: PPUSH
24058: LD_INT 3
24060: PPUSH
24061: CALL_OW 294
24065: PUSH
24066: LD_INT 0
24068: GREATER
24069: IFFALSE 24080
// wait ( 0 0$1 ) ;
24071: LD_INT 35
24073: PPUSH
24074: CALL_OW 67
24078: GO 24053
// for i in AMERICKA_POMOC_HLIDCE_LIST do
24080: LD_ADDR_VAR 0 3
24084: PUSH
24085: LD_EXP 50
24089: PUSH
24090: FOR_IN
24091: IFFALSE 24110
// PlaceUnitArea ( i , Help_area , false ) ;
24093: LD_VAR 0 3
24097: PPUSH
24098: LD_INT 3
24100: PPUSH
24101: LD_INT 0
24103: PPUSH
24104: CALL_OW 49
24108: GO 24090
24110: POP
24111: POP
// wait ( 0 0$1 ) ;
24112: LD_INT 35
24114: PPUSH
24115: CALL_OW 67
// ComAgressiveMove ( Am_pomoc , GetX ( jedn ) , GetY ( jedn ) ) ;
24119: LD_LOC 26
24123: PPUSH
24124: LD_VAR 0 1
24128: PPUSH
24129: CALL_OW 250
24133: PPUSH
24134: LD_VAR 0 1
24138: PPUSH
24139: CALL_OW 251
24143: PPUSH
24144: CALL_OW 114
// end ;
24148: LD_VAR 0 2
24152: RET
// every 0 0$10 do
24153: GO 24155
24155: DISABLE
// begin wait ( Rand ( 1 , 0 0$30 ) ) ;
24156: LD_INT 1
24158: PPUSH
24159: LD_INT 1050
24161: PPUSH
24162: CALL_OW 12
24166: PPUSH
24167: CALL_OW 67
// wait ( posily1 [ difficulty ] ) ;
24171: LD_EXP 14
24175: PUSH
24176: LD_OWVAR 67
24180: ARRAY
24181: PPUSH
24182: CALL_OW 67
// posli_posily ( 1 ) ;
24186: LD_INT 1
24188: PPUSH
24189: CALL 24282 0 1
// wait ( posily11 [ difficulty ] ) ;
24193: LD_EXP 15
24197: PUSH
24198: LD_OWVAR 67
24202: ARRAY
24203: PPUSH
24204: CALL_OW 67
// posli_posily ( 11 ) ;
24208: LD_INT 11
24210: PPUSH
24211: CALL 24282 0 1
// wait ( posily2 [ difficulty ] ) ;
24215: LD_EXP 16
24219: PUSH
24220: LD_OWVAR 67
24224: ARRAY
24225: PPUSH
24226: CALL_OW 67
// posli_posily ( 2 ) ;
24230: LD_INT 2
24232: PPUSH
24233: CALL 24282 0 1
// wait ( posily3 [ difficulty ] ) ;
24237: LD_EXP 17
24241: PUSH
24242: LD_OWVAR 67
24246: ARRAY
24247: PPUSH
24248: CALL_OW 67
// posli_posily ( 3 ) ;
24252: LD_INT 3
24254: PPUSH
24255: CALL 24282 0 1
// wait ( posily4 [ difficulty ] ) ;
24259: LD_EXP 18
24263: PUSH
24264: LD_OWVAR 67
24268: ARRAY
24269: PPUSH
24270: CALL_OW 67
// posli_posily ( 4 ) ;
24274: LD_INT 4
24276: PPUSH
24277: CALL 24282 0 1
// end ;
24281: END
// function posli_posily ( ktere ) ; var i , pom ; var poc ; begin
24282: LD_INT 0
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
// case ktere of 1 :
24288: LD_VAR 0 1
24292: PUSH
24293: LD_INT 1
24295: DOUBLE
24296: EQUAL
24297: IFTRUE 24301
24299: GO 24336
24301: POP
// for i in AMERICKE_POSILY1_LIST do
24302: LD_ADDR_VAR 0 3
24306: PUSH
24307: LD_EXP 51
24311: PUSH
24312: FOR_IN
24313: IFFALSE 24332
// PlaceUnitArea ( i , posily_1 , false ) ; 2 :
24315: LD_VAR 0 3
24319: PPUSH
24320: LD_INT 4
24322: PPUSH
24323: LD_INT 0
24325: PPUSH
24326: CALL_OW 49
24330: GO 24312
24332: POP
24333: POP
24334: GO 24509
24336: LD_INT 2
24338: DOUBLE
24339: EQUAL
24340: IFTRUE 24344
24342: GO 24379
24344: POP
// for i in AMERICKE_POSILY2_LIST do
24345: LD_ADDR_VAR 0 3
24349: PUSH
24350: LD_EXP 52
24354: PUSH
24355: FOR_IN
24356: IFFALSE 24375
// PlaceUnitArea ( i , posily_3 , false ) ; 3 :
24358: LD_VAR 0 3
24362: PPUSH
24363: LD_INT 5
24365: PPUSH
24366: LD_INT 0
24368: PPUSH
24369: CALL_OW 49
24373: GO 24355
24375: POP
24376: POP
24377: GO 24509
24379: LD_INT 3
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24422
24387: POP
// for i in AMERICKE_POSILY3_LIST do
24388: LD_ADDR_VAR 0 3
24392: PUSH
24393: LD_EXP 53
24397: PUSH
24398: FOR_IN
24399: IFFALSE 24418
// PlaceUnitArea ( i , posily_1 , false ) ; 4 :
24401: LD_VAR 0 3
24405: PPUSH
24406: LD_INT 4
24408: PPUSH
24409: LD_INT 0
24411: PPUSH
24412: CALL_OW 49
24416: GO 24398
24418: POP
24419: POP
24420: GO 24509
24422: LD_INT 4
24424: DOUBLE
24425: EQUAL
24426: IFTRUE 24430
24428: GO 24465
24430: POP
// for i in AMERICKE_POSILY4_LIST do
24431: LD_ADDR_VAR 0 3
24435: PUSH
24436: LD_EXP 54
24440: PUSH
24441: FOR_IN
24442: IFFALSE 24461
// PlaceUnitArea ( i , posily_3 , false ) ; 11 :
24444: LD_VAR 0 3
24448: PPUSH
24449: LD_INT 5
24451: PPUSH
24452: LD_INT 0
24454: PPUSH
24455: CALL_OW 49
24459: GO 24441
24461: POP
24462: POP
24463: GO 24509
24465: LD_INT 11
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24508
24473: POP
// for i in AMERICKE_POSILY11_LIST do
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_EXP 55
24483: PUSH
24484: FOR_IN
24485: IFFALSE 24504
// PlaceUnitArea ( i , posily_1 , false ) ; end ;
24487: LD_VAR 0 3
24491: PPUSH
24492: LD_INT 4
24494: PPUSH
24495: LD_INT 0
24497: PPUSH
24498: CALL_OW 49
24502: GO 24484
24504: POP
24505: POP
24506: GO 24509
24508: POP
// case ktere of 1 :
24509: LD_VAR 0 1
24513: PUSH
24514: LD_INT 1
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24739
24522: POP
// begin Am_posily = AMERICKE_POSILY1_LIST ;
24523: LD_ADDR_EXP 72
24527: PUSH
24528: LD_EXP 51
24532: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
24533: LD_EXP 72
24537: PPUSH
24538: LD_INT 42
24540: PPUSH
24541: LD_INT 69
24543: PPUSH
24544: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
24548: LD_EXP 72
24552: PPUSH
24553: LD_INT 35
24555: PPUSH
24556: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
24560: LD_EXP 72
24564: PPUSH
24565: LD_INT 42
24567: PPUSH
24568: LD_INT 69
24570: PPUSH
24571: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24575: LD_EXP 72
24579: PPUSH
24580: LD_INT 35
24582: PPUSH
24583: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
24587: LD_EXP 72
24591: PPUSH
24592: LD_INT 42
24594: PPUSH
24595: LD_INT 69
24597: PPUSH
24598: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24602: LD_EXP 72
24606: PPUSH
24607: LD_INT 35
24609: PPUSH
24610: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
24614: LD_EXP 72
24618: PPUSH
24619: LD_INT 28
24621: PPUSH
24622: LD_INT 47
24624: PPUSH
24625: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24629: LD_EXP 72
24633: PPUSH
24634: LD_INT 35
24636: PPUSH
24637: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
24641: LD_EXP 72
24645: PPUSH
24646: LD_INT 28
24648: PPUSH
24649: LD_INT 47
24651: PPUSH
24652: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24656: LD_EXP 72
24660: PPUSH
24661: LD_INT 35
24663: PPUSH
24664: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
24668: LD_EXP 72
24672: PPUSH
24673: LD_INT 28
24675: PPUSH
24676: LD_INT 47
24678: PPUSH
24679: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24683: LD_EXP 72
24687: PPUSH
24688: LD_INT 35
24690: PPUSH
24691: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
24695: LD_EXP 72
24699: PPUSH
24700: LD_INT 28
24702: PPUSH
24703: LD_INT 47
24705: PPUSH
24706: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24710: LD_EXP 72
24714: PPUSH
24715: LD_INT 35
24717: PPUSH
24718: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
24722: LD_EXP 72
24726: PPUSH
24727: LD_INT 20
24729: PPUSH
24730: LD_INT 12
24732: PPUSH
24733: CALL_OW 174
// end ; 2 :
24737: GO 26018
24739: LD_INT 2
24741: DOUBLE
24742: EQUAL
24743: IFTRUE 24747
24745: GO 24883
24747: POP
// begin Am_posily = AMERICKE_POSILY2_LIST ;
24748: LD_ADDR_EXP 72
24752: PUSH
24753: LD_EXP 52
24757: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 112 , 22 ) ;
24758: LD_EXP 72
24762: PPUSH
24763: LD_INT 112
24765: PPUSH
24766: LD_INT 22
24768: PPUSH
24769: CALL_OW 114
// AddComWait ( Am_posily , 0 0$2 ) ;
24773: LD_EXP 72
24777: PPUSH
24778: LD_INT 70
24780: PPUSH
24781: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 86 , 18 ) ;
24785: LD_EXP 72
24789: PPUSH
24790: LD_INT 86
24792: PPUSH
24793: LD_INT 18
24795: PPUSH
24796: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
24800: LD_EXP 72
24804: PPUSH
24805: LD_INT 70
24807: PPUSH
24808: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 77 , 34 ) ;
24812: LD_EXP 72
24816: PPUSH
24817: LD_INT 77
24819: PPUSH
24820: LD_INT 34
24822: PPUSH
24823: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
24827: LD_EXP 72
24831: PPUSH
24832: LD_INT 70
24834: PPUSH
24835: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 51 , 37 ) ;
24839: LD_EXP 72
24843: PPUSH
24844: LD_INT 51
24846: PPUSH
24847: LD_INT 37
24849: PPUSH
24850: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24854: LD_EXP 72
24858: PPUSH
24859: LD_INT 35
24861: PPUSH
24862: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 23 , 12 ) ;
24866: LD_EXP 72
24870: PPUSH
24871: LD_INT 23
24873: PPUSH
24874: LD_INT 12
24876: PPUSH
24877: CALL_OW 174
// end ; 3 :
24881: GO 26018
24883: LD_INT 3
24885: DOUBLE
24886: EQUAL
24887: IFTRUE 24891
24889: GO 25108
24891: POP
// begin Am_posily = AMERICKE_POSILY3_LIST ;
24892: LD_ADDR_EXP 72
24896: PUSH
24897: LD_EXP 53
24901: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
24902: LD_EXP 72
24906: PPUSH
24907: LD_INT 42
24909: PPUSH
24910: LD_INT 69
24912: PPUSH
24913: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
24917: LD_EXP 72
24921: PPUSH
24922: LD_INT 35
24924: PPUSH
24925: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
24929: LD_EXP 72
24933: PPUSH
24934: LD_INT 42
24936: PPUSH
24937: LD_INT 69
24939: PPUSH
24940: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
24944: LD_EXP 72
24948: PPUSH
24949: LD_INT 35
24951: PPUSH
24952: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
24956: LD_EXP 72
24960: PPUSH
24961: LD_INT 42
24963: PPUSH
24964: LD_INT 69
24966: PPUSH
24967: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
24971: LD_EXP 72
24975: PPUSH
24976: LD_INT 35
24978: PPUSH
24979: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
24983: LD_EXP 72
24987: PPUSH
24988: LD_INT 28
24990: PPUSH
24991: LD_INT 47
24993: PPUSH
24994: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
24998: LD_EXP 72
25002: PPUSH
25003: LD_INT 35
25005: PPUSH
25006: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25010: LD_EXP 72
25014: PPUSH
25015: LD_INT 28
25017: PPUSH
25018: LD_INT 47
25020: PPUSH
25021: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25025: LD_EXP 72
25029: PPUSH
25030: LD_INT 35
25032: PPUSH
25033: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25037: LD_EXP 72
25041: PPUSH
25042: LD_INT 28
25044: PPUSH
25045: LD_INT 47
25047: PPUSH
25048: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25052: LD_EXP 72
25056: PPUSH
25057: LD_INT 35
25059: PPUSH
25060: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25064: LD_EXP 72
25068: PPUSH
25069: LD_INT 28
25071: PPUSH
25072: LD_INT 47
25074: PPUSH
25075: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25079: LD_EXP 72
25083: PPUSH
25084: LD_INT 35
25086: PPUSH
25087: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25091: LD_EXP 72
25095: PPUSH
25096: LD_INT 20
25098: PPUSH
25099: LD_INT 12
25101: PPUSH
25102: CALL_OW 174
// end ; 4 :
25106: GO 26018
25108: LD_INT 4
25110: DOUBLE
25111: EQUAL
25112: IFTRUE 25116
25114: GO 25549
25116: POP
// begin Am_posily = AMERICKE_POSILY4_LIST ;
25117: LD_ADDR_EXP 72
25121: PUSH
25122: LD_EXP 54
25126: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25127: LD_EXP 72
25131: PPUSH
25132: LD_INT 110
25134: PPUSH
25135: LD_INT 23
25137: PPUSH
25138: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25142: LD_EXP 72
25146: PPUSH
25147: LD_INT 35
25149: PPUSH
25150: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25154: LD_EXP 72
25158: PPUSH
25159: LD_INT 110
25161: PPUSH
25162: LD_INT 23
25164: PPUSH
25165: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25169: LD_EXP 72
25173: PPUSH
25174: LD_INT 35
25176: PPUSH
25177: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25181: LD_EXP 72
25185: PPUSH
25186: LD_INT 110
25188: PPUSH
25189: LD_INT 23
25191: PPUSH
25192: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25196: LD_EXP 72
25200: PPUSH
25201: LD_INT 35
25203: PPUSH
25204: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25208: LD_EXP 72
25212: PPUSH
25213: LD_INT 110
25215: PPUSH
25216: LD_INT 23
25218: PPUSH
25219: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25223: LD_EXP 72
25227: PPUSH
25228: LD_INT 35
25230: PPUSH
25231: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25235: LD_EXP 72
25239: PPUSH
25240: LD_INT 87
25242: PPUSH
25243: LD_INT 19
25245: PPUSH
25246: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25250: LD_EXP 72
25254: PPUSH
25255: LD_INT 35
25257: PPUSH
25258: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25262: LD_EXP 72
25266: PPUSH
25267: LD_INT 87
25269: PPUSH
25270: LD_INT 19
25272: PPUSH
25273: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25277: LD_EXP 72
25281: PPUSH
25282: LD_INT 35
25284: PPUSH
25285: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25289: LD_EXP 72
25293: PPUSH
25294: LD_INT 87
25296: PPUSH
25297: LD_INT 19
25299: PPUSH
25300: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25304: LD_EXP 72
25308: PPUSH
25309: LD_INT 35
25311: PPUSH
25312: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25316: LD_EXP 72
25320: PPUSH
25321: LD_INT 87
25323: PPUSH
25324: LD_INT 19
25326: PPUSH
25327: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25331: LD_EXP 72
25335: PPUSH
25336: LD_INT 35
25338: PPUSH
25339: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25343: LD_EXP 72
25347: PPUSH
25348: LD_INT 52
25350: PPUSH
25351: LD_INT 12
25353: PPUSH
25354: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25358: LD_EXP 72
25362: PPUSH
25363: LD_INT 35
25365: PPUSH
25366: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25370: LD_EXP 72
25374: PPUSH
25375: LD_INT 52
25377: PPUSH
25378: LD_INT 12
25380: PPUSH
25381: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25385: LD_EXP 72
25389: PPUSH
25390: LD_INT 35
25392: PPUSH
25393: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25397: LD_EXP 72
25401: PPUSH
25402: LD_INT 52
25404: PPUSH
25405: LD_INT 12
25407: PPUSH
25408: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25412: LD_EXP 72
25416: PPUSH
25417: LD_INT 35
25419: PPUSH
25420: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25424: LD_EXP 72
25428: PPUSH
25429: LD_INT 52
25431: PPUSH
25432: LD_INT 12
25434: PPUSH
25435: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25439: LD_EXP 72
25443: PPUSH
25444: LD_INT 35
25446: PPUSH
25447: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25451: LD_EXP 72
25455: PPUSH
25456: LD_INT 52
25458: PPUSH
25459: LD_INT 12
25461: PPUSH
25462: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25466: LD_EXP 72
25470: PPUSH
25471: LD_INT 35
25473: PPUSH
25474: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25478: LD_EXP 72
25482: PPUSH
25483: LD_INT 52
25485: PPUSH
25486: LD_INT 12
25488: PPUSH
25489: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25493: LD_EXP 72
25497: PPUSH
25498: LD_INT 35
25500: PPUSH
25501: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25505: LD_EXP 72
25509: PPUSH
25510: LD_INT 52
25512: PPUSH
25513: LD_INT 12
25515: PPUSH
25516: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25520: LD_EXP 72
25524: PPUSH
25525: LD_INT 35
25527: PPUSH
25528: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
25532: LD_EXP 72
25536: PPUSH
25537: LD_INT 27
25539: PPUSH
25540: LD_INT 13
25542: PPUSH
25543: CALL_OW 174
// end ; 11 :
25547: GO 26018
25549: LD_INT 11
25551: DOUBLE
25552: EQUAL
25553: IFTRUE 25557
25555: GO 26017
25557: POP
// begin Am_posily = AMERICKE_POSILY11_LIST ;
25558: LD_ADDR_EXP 72
25562: PUSH
25563: LD_EXP 55
25567: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25568: LD_EXP 72
25572: PPUSH
25573: LD_INT 110
25575: PPUSH
25576: LD_INT 23
25578: PPUSH
25579: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25583: LD_EXP 72
25587: PPUSH
25588: LD_INT 35
25590: PPUSH
25591: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25595: LD_EXP 72
25599: PPUSH
25600: LD_INT 110
25602: PPUSH
25603: LD_INT 23
25605: PPUSH
25606: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25610: LD_EXP 72
25614: PPUSH
25615: LD_INT 35
25617: PPUSH
25618: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25622: LD_EXP 72
25626: PPUSH
25627: LD_INT 110
25629: PPUSH
25630: LD_INT 23
25632: PPUSH
25633: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25637: LD_EXP 72
25641: PPUSH
25642: LD_INT 35
25644: PPUSH
25645: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25649: LD_EXP 72
25653: PPUSH
25654: LD_INT 110
25656: PPUSH
25657: LD_INT 23
25659: PPUSH
25660: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25664: LD_EXP 72
25668: PPUSH
25669: LD_INT 35
25671: PPUSH
25672: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25676: LD_EXP 72
25680: PPUSH
25681: LD_INT 87
25683: PPUSH
25684: LD_INT 19
25686: PPUSH
25687: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25691: LD_EXP 72
25695: PPUSH
25696: LD_INT 35
25698: PPUSH
25699: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25703: LD_EXP 72
25707: PPUSH
25708: LD_INT 87
25710: PPUSH
25711: LD_INT 19
25713: PPUSH
25714: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25718: LD_EXP 72
25722: PPUSH
25723: LD_INT 35
25725: PPUSH
25726: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25730: LD_EXP 72
25734: PPUSH
25735: LD_INT 87
25737: PPUSH
25738: LD_INT 19
25740: PPUSH
25741: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25745: LD_EXP 72
25749: PPUSH
25750: LD_INT 35
25752: PPUSH
25753: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25757: LD_EXP 72
25761: PPUSH
25762: LD_INT 87
25764: PPUSH
25765: LD_INT 19
25767: PPUSH
25768: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25772: LD_EXP 72
25776: PPUSH
25777: LD_INT 35
25779: PPUSH
25780: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25784: LD_EXP 72
25788: PPUSH
25789: LD_INT 52
25791: PPUSH
25792: LD_INT 12
25794: PPUSH
25795: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25799: LD_EXP 72
25803: PPUSH
25804: LD_INT 35
25806: PPUSH
25807: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25811: LD_EXP 72
25815: PPUSH
25816: LD_INT 52
25818: PPUSH
25819: LD_INT 12
25821: PPUSH
25822: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25826: LD_EXP 72
25830: PPUSH
25831: LD_INT 35
25833: PPUSH
25834: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25838: LD_EXP 72
25842: PPUSH
25843: LD_INT 52
25845: PPUSH
25846: LD_INT 12
25848: PPUSH
25849: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25853: LD_EXP 72
25857: PPUSH
25858: LD_INT 35
25860: PPUSH
25861: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25865: LD_EXP 72
25869: PPUSH
25870: LD_INT 52
25872: PPUSH
25873: LD_INT 12
25875: PPUSH
25876: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25880: LD_EXP 72
25884: PPUSH
25885: LD_INT 35
25887: PPUSH
25888: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25892: LD_EXP 72
25896: PPUSH
25897: LD_INT 52
25899: PPUSH
25900: LD_INT 12
25902: PPUSH
25903: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25907: LD_EXP 72
25911: PPUSH
25912: LD_INT 35
25914: PPUSH
25915: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25919: LD_EXP 72
25923: PPUSH
25924: LD_INT 52
25926: PPUSH
25927: LD_INT 12
25929: PPUSH
25930: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25934: LD_EXP 72
25938: PPUSH
25939: LD_INT 35
25941: PPUSH
25942: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25946: LD_EXP 72
25950: PPUSH
25951: LD_INT 52
25953: PPUSH
25954: LD_INT 12
25956: PPUSH
25957: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25961: LD_EXP 72
25965: PPUSH
25966: LD_INT 35
25968: PPUSH
25969: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25973: LD_EXP 72
25977: PPUSH
25978: LD_INT 52
25980: PPUSH
25981: LD_INT 12
25983: PPUSH
25984: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25988: LD_EXP 72
25992: PPUSH
25993: LD_INT 35
25995: PPUSH
25996: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26000: LD_EXP 72
26004: PPUSH
26005: LD_INT 27
26007: PPUSH
26008: LD_INT 13
26010: PPUSH
26011: CALL_OW 174
// end ; end ;
26015: GO 26018
26017: POP
// end ;
26018: LD_VAR 0 2
26022: RET
// every 1 1$7 do
26023: GO 26025
26025: DISABLE
// begin if Researched ( Amici , tech_Weap1 ) then
26026: LD_EXP 4
26030: PPUSH
26031: LD_INT 51
26033: PPUSH
26034: CALL_OW 325
26038: IFFALSE 26065
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26040: LD_INT 51
26042: PPUSH
26043: LD_EXP 4
26047: PPUSH
26048: LD_INT 1
26050: PPUSH
26051: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26055: LD_INT 9
26057: PPUSH
26058: LD_INT 51
26060: PPUSH
26061: CALL_OW 124
// end ; enable ;
26065: ENABLE
// end ;
26066: END
// every 0 0$19 do
26067: GO 26069
26069: DISABLE
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26070: LD_INT 51
26072: PPUSH
26073: LD_EXP 4
26077: PPUSH
26078: LD_INT 1
26080: PPUSH
26081: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26085: LD_INT 9
26087: PPUSH
26088: LD_INT 51
26090: PPUSH
26091: CALL_OW 124
// end ;
26095: END
// every 0 0$1 do var i , temp_list ;
26096: GO 26098
26098: DISABLE
26099: LD_INT 0
26101: PPUSH
26102: PPUSH
// begin i = 1 ;
26103: LD_ADDR_VAR 0 1
26107: PUSH
26108: LD_INT 1
26110: ST_TO_ADDR
// while i <= Am_posily do
26111: LD_VAR 0 1
26115: PUSH
26116: LD_EXP 72
26120: LESSEQUAL
26121: IFFALSE 26260
// begin if IsInArea ( Am_posily [ i ] , Am_base ) or not IsLive ( i ) then
26123: LD_EXP 72
26127: PUSH
26128: LD_VAR 0 1
26132: ARRAY
26133: PPUSH
26134: LD_INT 6
26136: PPUSH
26137: CALL_OW 308
26141: PUSH
26142: LD_VAR 0 1
26146: PPUSH
26147: CALL_OW 300
26151: NOT
26152: OR
26153: IFFALSE 26244
// begin if IsInArea ( Am_posily [ i ] , Am_base ) then
26155: LD_EXP 72
26159: PUSH
26160: LD_VAR 0 1
26164: ARRAY
26165: PPUSH
26166: LD_INT 6
26168: PPUSH
26169: CALL_OW 308
26173: IFFALSE 26222
// begin Prezite_posily = Prezite_posily + 1 ;
26175: LD_ADDR_EXP 73
26179: PUSH
26180: LD_EXP 73
26184: PUSH
26185: LD_INT 1
26187: PLUS
26188: ST_TO_ADDR
// if Prezite_posily > muze_prezit_posil [ difficulty ] then
26189: LD_EXP 73
26193: PUSH
26194: LD_EXP 23
26198: PUSH
26199: LD_OWVAR 67
26203: ARRAY
26204: GREATER
26205: IFFALSE 26222
// DestroyUnit ( Am_posily [ i ] ) ;
26207: LD_EXP 72
26211: PUSH
26212: LD_VAR 0 1
26216: ARRAY
26217: PPUSH
26218: CALL_OW 65
// end ; Am_posily = Delete ( Am_posily , i ) ;
26222: LD_ADDR_EXP 72
26226: PUSH
26227: LD_EXP 72
26231: PPUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 3
26241: ST_TO_ADDR
// continue ;
26242: GO 26111
// end ; i = i + 1 ;
26244: LD_ADDR_VAR 0 1
26248: PUSH
26249: LD_VAR 0 1
26253: PUSH
26254: LD_INT 1
26256: PLUS
26257: ST_TO_ADDR
// end ;
26258: GO 26111
// enable ;
26260: ENABLE
// end ;
26261: PPOPN 2
26263: END
// every 0 0$13 do var pom ;
26264: GO 26266
26266: DISABLE
26267: LD_INT 0
26269: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_mechanic ] ] ) ;
26270: LD_ADDR_VAR 0 1
26274: PUSH
26275: LD_INT 6
26277: PPUSH
26278: LD_INT 22
26280: PUSH
26281: LD_EXP 4
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 25
26292: PUSH
26293: LD_INT 3
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PPUSH
26304: CALL_OW 70
26308: ST_TO_ADDR
// if pom > 0 then
26309: LD_VAR 0 1
26313: PUSH
26314: LD_INT 0
26316: GREATER
26317: IFFALSE 26331
// ComEnterUnit ( pom , Am_fac ) ;
26319: LD_VAR 0 1
26323: PPUSH
26324: LD_INT 10
26326: PPUSH
26327: CALL_OW 120
// enable ;
26331: ENABLE
// end ;
26332: PPOPN 1
26334: END
// every 0 0$17 do var pom ;
26335: GO 26337
26337: DISABLE
26338: LD_INT 0
26340: PPUSH
// begin pom = UnitsInside ( Am_fac ) ;
26341: LD_ADDR_VAR 0 1
26345: PUSH
26346: LD_INT 10
26348: PPUSH
26349: CALL_OW 313
26353: ST_TO_ADDR
// if pom > 3 then
26354: LD_VAR 0 1
26358: PUSH
26359: LD_INT 3
26361: GREATER
26362: IFFALSE 26383
// ComConstruct ( Am_fac , us_light_wheeled , engine_solar , control_manual , us_machine_gun ) ;
26364: LD_INT 10
26366: PPUSH
26367: LD_INT 1
26369: PPUSH
26370: LD_INT 2
26372: PPUSH
26373: LD_INT 1
26375: PPUSH
26376: LD_INT 2
26378: PPUSH
26379: CALL_OW 125
// while UnitsInside ( Am_fac ) > 3 do
26383: LD_INT 10
26385: PPUSH
26386: CALL_OW 313
26390: PUSH
26391: LD_INT 3
26393: GREATER
26394: IFFALSE 26405
// wait ( 0 0$10 ) ;
26396: LD_INT 350
26398: PPUSH
26399: CALL_OW 67
26403: GO 26383
// enable ;
26405: ENABLE
// end ;
26406: PPOPN 1
26408: END
// export function am_posily_videny_rusakama ; var i ; var videli ; begin
26409: LD_INT 0
26411: PPUSH
26412: PPUSH
26413: PPUSH
// videli = false ;
26414: LD_ADDR_VAR 0 3
26418: PUSH
26419: LD_INT 0
26421: ST_TO_ADDR
// for i in Am_posily do
26422: LD_ADDR_VAR 0 2
26426: PUSH
26427: LD_EXP 72
26431: PUSH
26432: FOR_IN
26433: IFFALSE 26461
// if See ( You , i ) then
26435: LD_EXP 1
26439: PPUSH
26440: LD_VAR 0 2
26444: PPUSH
26445: CALL_OW 292
26449: IFFALSE 26459
// videli = true ;
26451: LD_ADDR_VAR 0 3
26455: PUSH
26456: LD_INT 1
26458: ST_TO_ADDR
26459: GO 26432
26461: POP
26462: POP
// result := videli ;
26463: LD_ADDR_VAR 0 1
26467: PUSH
26468: LD_VAR 0 3
26472: ST_TO_ADDR
// end ;
26473: LD_VAR 0 1
26477: RET
// export function omicron_half_destroyed ; var pom , i ; var zije ; var a ; begin
26478: LD_INT 0
26480: PPUSH
26481: PPUSH
26482: PPUSH
26483: PPUSH
26484: PPUSH
// a = false ;
26485: LD_ADDR_VAR 0 5
26489: PUSH
26490: LD_INT 0
26492: ST_TO_ADDR
// if ( ( not IsOK ( Am_bu1 ) ) or ( GetSide ( Am_bu1 ) <> Amici ) ) and ( ( not IsOK ( Am_bu2 ) ) or GetSide ( Am_bu2 ) <> Amici ) and ( ( not IsOK ( Am_bu3 ) ) or GetSide ( Am_bu3 ) <> Amici ) and ( ( not IsOK ( Am_bar1 ) ) or GetSide ( Am_bar1 ) <> Amici ) and ( ( not IsOK ( Am_bar2 ) ) or GetSide ( Am_bar2 ) <> Amici ) then
26493: LD_INT 7
26495: PPUSH
26496: CALL_OW 302
26500: NOT
26501: PUSH
26502: LD_INT 7
26504: PPUSH
26505: CALL_OW 255
26509: PUSH
26510: LD_EXP 4
26514: NONEQUAL
26515: OR
26516: PUSH
26517: LD_INT 8
26519: PPUSH
26520: CALL_OW 302
26524: NOT
26525: PUSH
26526: LD_INT 8
26528: PPUSH
26529: CALL_OW 255
26533: PUSH
26534: LD_EXP 4
26538: NONEQUAL
26539: OR
26540: AND
26541: PUSH
26542: LD_INT 19
26544: PPUSH
26545: CALL_OW 302
26549: NOT
26550: PUSH
26551: LD_INT 19
26553: PPUSH
26554: CALL_OW 255
26558: PUSH
26559: LD_EXP 4
26563: NONEQUAL
26564: OR
26565: AND
26566: PUSH
26567: LD_INT 11
26569: PPUSH
26570: CALL_OW 302
26574: NOT
26575: PUSH
26576: LD_INT 11
26578: PPUSH
26579: CALL_OW 255
26583: PUSH
26584: LD_EXP 4
26588: NONEQUAL
26589: OR
26590: AND
26591: PUSH
26592: LD_INT 25
26594: PPUSH
26595: CALL_OW 302
26599: NOT
26600: PUSH
26601: LD_INT 25
26603: PPUSH
26604: CALL_OW 255
26608: PUSH
26609: LD_EXP 4
26613: NONEQUAL
26614: OR
26615: AND
26616: IFFALSE 26626
// a = true ;
26618: LD_ADDR_VAR 0 5
26622: PUSH
26623: LD_INT 1
26625: ST_TO_ADDR
// result = a ;
26626: LD_ADDR_VAR 0 1
26630: PUSH
26631: LD_VAR 0 5
26635: ST_TO_ADDR
// end ;
26636: LD_VAR 0 1
26640: RET
// export function stahnuti_amiku ; var i ; var pom , pom1 , pom2 , pomx ; begin
26641: LD_INT 0
26643: PPUSH
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
26649: LD_ADDR_VAR 0 3
26653: PUSH
26654: LD_INT 6
26656: PPUSH
26657: LD_INT 22
26659: PUSH
26660: LD_EXP 4
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 21
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PPUSH
26683: CALL_OW 70
26687: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
26688: LD_ADDR_VAR 0 5
26692: PUSH
26693: LD_INT 6
26695: PPUSH
26696: LD_INT 22
26698: PUSH
26699: LD_EXP 4
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 21
26710: PUSH
26711: LD_INT 3
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PPUSH
26722: CALL_OW 70
26726: ST_TO_ADDR
// for i in pom2 do
26727: LD_ADDR_VAR 0 2
26731: PUSH
26732: LD_VAR 0 5
26736: PUSH
26737: FOR_IN
26738: IFFALSE 26778
// if UnitsInside ( i ) <> 0 then
26740: LD_VAR 0 2
26744: PPUSH
26745: CALL_OW 313
26749: PUSH
26750: LD_INT 0
26752: NONEQUAL
26753: IFFALSE 26776
// pom = pom ^ UnitsInside ( i ) ;
26755: LD_ADDR_VAR 0 3
26759: PUSH
26760: LD_VAR 0 3
26764: PUSH
26765: LD_VAR 0 2
26769: PPUSH
26770: CALL_OW 313
26774: ADD
26775: ST_TO_ADDR
26776: GO 26737
26778: POP
26779: POP
// ComExitBuilding ( pom ) ;
26780: LD_VAR 0 3
26784: PPUSH
26785: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
26789: LD_VAR 0 3
26793: PPUSH
26794: LD_INT 6
26796: PPUSH
26797: LD_INT 2
26799: PPUSH
26800: CALL_OW 171
// wait ( 0 0$1 ) ;
26804: LD_INT 35
26806: PPUSH
26807: CALL_OW 67
// while pom > 0 do
26811: LD_VAR 0 3
26815: PUSH
26816: LD_INT 0
26818: GREATER
26819: IFFALSE 27055
// begin pom1 = FilterUnitsInArea ( ODBER_AM2 , [ [ f_side , Amici ] ] ) ;
26821: LD_ADDR_VAR 0 4
26825: PUSH
26826: LD_INT 38
26828: PPUSH
26829: LD_INT 22
26831: PUSH
26832: LD_EXP 4
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: PPUSH
26844: CALL_OW 70
26848: ST_TO_ADDR
// for i in pom1 do
26849: LD_ADDR_VAR 0 2
26853: PUSH
26854: LD_VAR 0 4
26858: PUSH
26859: FOR_IN
26860: IFFALSE 26889
// begin RemoveUnit ( i ) ;
26862: LD_VAR 0 2
26866: PPUSH
26867: CALL_OW 64
// pom = pom diff i ;
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: LD_VAR 0 3
26880: PUSH
26881: LD_VAR 0 2
26885: DIFF
26886: ST_TO_ADDR
// end ;
26887: GO 26859
26889: POP
26890: POP
// wait ( 0 0$1 ) ;
26891: LD_INT 35
26893: PPUSH
26894: CALL_OW 67
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
26898: LD_ADDR_VAR 0 3
26902: PUSH
26903: LD_INT 6
26905: PPUSH
26906: LD_INT 22
26908: PUSH
26909: LD_EXP 4
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 21
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PPUSH
26932: CALL_OW 70
26936: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
26937: LD_ADDR_VAR 0 5
26941: PUSH
26942: LD_INT 6
26944: PPUSH
26945: LD_INT 22
26947: PUSH
26948: LD_EXP 4
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 21
26959: PUSH
26960: LD_INT 3
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PPUSH
26971: CALL_OW 70
26975: ST_TO_ADDR
// for i in pom2 do
26976: LD_ADDR_VAR 0 2
26980: PUSH
26981: LD_VAR 0 5
26985: PUSH
26986: FOR_IN
26987: IFFALSE 27027
// if UnitsInside ( i ) <> 0 then
26989: LD_VAR 0 2
26993: PPUSH
26994: CALL_OW 313
26998: PUSH
26999: LD_INT 0
27001: NONEQUAL
27002: IFFALSE 27025
// pom = pom ^ UnitsInside ( i ) ;
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_VAR 0 3
27013: PUSH
27014: LD_VAR 0 2
27018: PPUSH
27019: CALL_OW 313
27023: ADD
27024: ST_TO_ADDR
27025: GO 26986
27027: POP
27028: POP
// ComExitBuilding ( pom ) ;
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27038: LD_VAR 0 3
27042: PPUSH
27043: LD_INT 6
27045: PPUSH
27046: LD_INT 2
27048: PPUSH
27049: CALL_OW 171
// end ;
27053: GO 26811
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27055: LD_ADDR_VAR 0 3
27059: PUSH
27060: LD_INT 22
27062: PPUSH
27063: LD_INT 22
27065: PUSH
27066: LD_EXP 4
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 21
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 70
27093: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27094: LD_ADDR_VAR 0 5
27098: PUSH
27099: LD_INT 22
27101: PPUSH
27102: LD_INT 22
27104: PUSH
27105: LD_EXP 4
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 21
27116: PUSH
27117: LD_INT 3
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PPUSH
27128: CALL_OW 70
27132: ST_TO_ADDR
// for i in pom2 do
27133: LD_ADDR_VAR 0 2
27137: PUSH
27138: LD_VAR 0 5
27142: PUSH
27143: FOR_IN
27144: IFFALSE 27184
// if UnitsInside ( i ) <> 0 then
27146: LD_VAR 0 2
27150: PPUSH
27151: CALL_OW 313
27155: PUSH
27156: LD_INT 0
27158: NONEQUAL
27159: IFFALSE 27182
// pom = pom ^ UnitsInside ( i ) ;
27161: LD_ADDR_VAR 0 3
27165: PUSH
27166: LD_VAR 0 3
27170: PUSH
27171: LD_VAR 0 2
27175: PPUSH
27176: CALL_OW 313
27180: ADD
27181: ST_TO_ADDR
27182: GO 27143
27184: POP
27185: POP
// ComExitBuilding ( pom ) ;
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
27195: LD_VAR 0 3
27199: PPUSH
27200: LD_INT 138
27202: PPUSH
27203: LD_INT 40
27205: PPUSH
27206: CALL_OW 171
// wait ( 0 0$1 ) ;
27210: LD_INT 35
27212: PPUSH
27213: CALL_OW 67
// while pom + 0 > 0 do
27217: LD_VAR 0 3
27221: PUSH
27222: LD_INT 0
27224: PLUS
27225: PUSH
27226: LD_INT 0
27228: GREATER
27229: IFFALSE 27465
// begin pom1 = FilterUnitsInArea ( ODBER_AM , [ [ f_side , Amici ] ] ) ;
27231: LD_ADDR_VAR 0 4
27235: PUSH
27236: LD_INT 35
27238: PPUSH
27239: LD_INT 22
27241: PUSH
27242: LD_EXP 4
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: PPUSH
27254: CALL_OW 70
27258: ST_TO_ADDR
// for i in pom1 do
27259: LD_ADDR_VAR 0 2
27263: PUSH
27264: LD_VAR 0 4
27268: PUSH
27269: FOR_IN
27270: IFFALSE 27299
// begin RemoveUnit ( i ) ;
27272: LD_VAR 0 2
27276: PPUSH
27277: CALL_OW 64
// pom = pom diff i ;
27281: LD_ADDR_VAR 0 3
27285: PUSH
27286: LD_VAR 0 3
27290: PUSH
27291: LD_VAR 0 2
27295: DIFF
27296: ST_TO_ADDR
// end ;
27297: GO 27269
27299: POP
27300: POP
// wait ( 0 0$1 ) ;
27301: LD_INT 35
27303: PPUSH
27304: CALL_OW 67
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27308: LD_ADDR_VAR 0 3
27312: PUSH
27313: LD_INT 22
27315: PPUSH
27316: LD_INT 22
27318: PUSH
27319: LD_EXP 4
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 21
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PPUSH
27342: CALL_OW 70
27346: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27347: LD_ADDR_VAR 0 5
27351: PUSH
27352: LD_INT 22
27354: PPUSH
27355: LD_INT 22
27357: PUSH
27358: LD_EXP 4
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 21
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PPUSH
27381: CALL_OW 70
27385: ST_TO_ADDR
// for i in pom2 do
27386: LD_ADDR_VAR 0 2
27390: PUSH
27391: LD_VAR 0 5
27395: PUSH
27396: FOR_IN
27397: IFFALSE 27437
// if UnitsInside ( i ) <> 0 then
27399: LD_VAR 0 2
27403: PPUSH
27404: CALL_OW 313
27408: PUSH
27409: LD_INT 0
27411: NONEQUAL
27412: IFFALSE 27435
// pom = pom ^ UnitsInside ( i ) ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_VAR 0 3
27423: PUSH
27424: LD_VAR 0 2
27428: PPUSH
27429: CALL_OW 313
27433: ADD
27434: ST_TO_ADDR
27435: GO 27396
27437: POP
27438: POP
// ComExitBuilding ( pom ) ;
27439: LD_VAR 0 3
27443: PPUSH
27444: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
27448: LD_VAR 0 3
27452: PPUSH
27453: LD_INT 138
27455: PPUSH
27456: LD_INT 40
27458: PPUSH
27459: CALL_OW 171
// end ;
27463: GO 27217
// end ; end_of_file
27465: LD_VAR 0 1
27469: RET
// var arabsky_utok_zacal ; export posilani_arabskych_hlidek ; every 0 0$0.1 do
27470: GO 27472
27472: DISABLE
// begin posilani_arabskych_hlidek = false ;
27473: LD_ADDR_EXP 74
27477: PUSH
27478: LD_INT 0
27480: ST_TO_ADDR
// end ;
27481: END
// export function utok_arabu ; var i , pom ; begin
27482: LD_INT 0
27484: PPUSH
27485: PPUSH
27486: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
27487: LD_ADDR_VAR 0 3
27491: PUSH
27492: LD_INT 22
27494: PUSH
27495: LD_EXP 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: PPUSH
27507: CALL_OW 69
27511: ST_TO_ADDR
// ArDontAttackPlayer ( true ) ;
27512: LD_INT 1
27514: PPUSH
27515: CALL 28360 0 1
// InGameOn ;
27519: CALL_OW 8
// ComStop ( pom ) ;
27523: LD_VAR 0 3
27527: PPUSH
27528: CALL_OW 141
// EnableVideoExclamations ;
27532: CALL_OW 498
// CenterNowOnXY ( 142 , 80 ) ;
27536: LD_INT 142
27538: PPUSH
27539: LD_INT 80
27541: PPUSH
27542: CALL_OW 86
// arabsky_utok_zacal = true ;
27546: LD_ADDR_LOC 27
27550: PUSH
27551: LD_INT 1
27553: ST_TO_ADDR
// posli_rusy_pryc ;
27554: CALL 7672 0 0
// schovej_kurina ;
27558: CALL 8771 0 0
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 1 ] , Opoce1 , false ) ;
27562: LD_EXP 60
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PPUSH
27571: LD_INT 10
27573: PPUSH
27574: LD_INT 0
27576: PPUSH
27577: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 2 ] , Opoce2 , false ) ;
27581: LD_EXP 60
27585: PUSH
27586: LD_INT 2
27588: ARRAY
27589: PPUSH
27590: LD_INT 11
27592: PPUSH
27593: LD_INT 0
27595: PPUSH
27596: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 3 ] , Opoce2 , false ) ;
27600: LD_EXP 60
27604: PUSH
27605: LD_INT 3
27607: ARRAY
27608: PPUSH
27609: LD_INT 11
27611: PPUSH
27612: LD_INT 0
27614: PPUSH
27615: CALL_OW 49
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 134 , 62 ) ;
27619: LD_EXP 60
27623: PUSH
27624: LD_INT 1
27626: ARRAY
27627: PPUSH
27628: LD_INT 134
27630: PPUSH
27631: LD_INT 62
27633: PPUSH
27634: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 133 , 69 ) ;
27638: LD_EXP 60
27642: PUSH
27643: LD_INT 1
27645: ARRAY
27646: PPUSH
27647: LD_INT 133
27649: PPUSH
27650: LD_INT 69
27652: PPUSH
27653: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_bu1 ) ;
27657: LD_EXP 60
27661: PUSH
27662: LD_INT 1
27664: ARRAY
27665: PPUSH
27666: LD_INT 3
27668: PPUSH
27669: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 142 , 94 ) ;
27673: LD_EXP 60
27677: PUSH
27678: LD_INT 2
27680: ARRAY
27681: PPUSH
27682: LD_INT 142
27684: PPUSH
27685: LD_INT 94
27687: PPUSH
27688: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 140 , 90 ) ;
27692: LD_EXP 60
27696: PUSH
27697: LD_INT 2
27699: ARRAY
27700: PPUSH
27701: LD_INT 140
27703: PPUSH
27704: LD_INT 90
27706: PPUSH
27707: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_el1 ) ;
27711: LD_EXP 60
27715: PUSH
27716: LD_INT 2
27718: ARRAY
27719: PPUSH
27720: LD_INT 14
27722: PPUSH
27723: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 143 , 94 ) ;
27727: LD_EXP 60
27731: PUSH
27732: LD_INT 3
27734: ARRAY
27735: PPUSH
27736: LD_INT 143
27738: PPUSH
27739: LD_INT 94
27741: PPUSH
27742: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 141 , 90 ) ;
27746: LD_EXP 60
27750: PUSH
27751: LD_INT 3
27753: ARRAY
27754: PPUSH
27755: LD_INT 141
27757: PPUSH
27758: LD_INT 90
27760: PPUSH
27761: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_el1 ) ;
27765: LD_EXP 60
27769: PUSH
27770: LD_INT 3
27772: ARRAY
27773: PPUSH
27774: LD_INT 14
27776: PPUSH
27777: CALL_OW 175
// music_nat = nation_arabian ;
27781: LD_ADDR_OWVAR 71
27785: PUSH
27786: LD_INT 2
27788: ST_TO_ADDR
// CenterOnXY ( 142 , 80 ) ;
27789: LD_INT 142
27791: PPUSH
27792: LD_INT 80
27794: PPUSH
27795: CALL_OW 84
// for i in ARABI_SELF_AUTA do
27799: LD_ADDR_VAR 0 2
27803: PUSH
27804: LD_EXP 63
27808: PUSH
27809: FOR_IN
27810: IFFALSE 27829
// PlaceUnitArea ( i , Arabi2 , false ) ;
27812: LD_VAR 0 2
27816: PPUSH
27817: LD_INT 13
27819: PPUSH
27820: LD_INT 0
27822: PPUSH
27823: CALL_OW 49
27827: GO 27809
27829: POP
27830: POP
// ComAttackUnit ( ARABI_SELF_AUTA [ 1 ] , RU1_bar2 ) ;
27831: LD_EXP 63
27835: PUSH
27836: LD_INT 1
27838: ARRAY
27839: PPUSH
27840: LD_INT 17
27842: PPUSH
27843: CALL_OW 115
// ComWait ( ARABI_SELF_AUTA [ 2 ] , 0 0$3 ) ;
27847: LD_EXP 63
27851: PUSH
27852: LD_INT 2
27854: ARRAY
27855: PPUSH
27856: LD_INT 105
27858: PPUSH
27859: CALL_OW 142
// AddComAttackUnit ( ARABI_SELF_AUTA [ 2 ] , RU1_bar2 ) ;
27863: LD_EXP 63
27867: PUSH
27868: LD_INT 2
27870: ARRAY
27871: PPUSH
27872: LD_INT 17
27874: PPUSH
27875: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
27879: LD_INT 142
27881: PPUSH
27882: LD_INT 80
27884: PPUSH
27885: CALL_OW 84
// for i in ARABI_PRVNI_VLNA do
27889: LD_ADDR_VAR 0 2
27893: PUSH
27894: LD_EXP 61
27898: PUSH
27899: FOR_IN
27900: IFFALSE 27919
// PlaceUnitArea ( i , Arabi1 , false ) ;
27902: LD_VAR 0 2
27906: PPUSH
27907: LD_INT 12
27909: PPUSH
27910: LD_INT 0
27912: PPUSH
27913: CALL_OW 49
27917: GO 27899
27919: POP
27920: POP
// ComMoveXY ( ARABI_PRVNI_VLNA , 139 , 78 ) ;
27921: LD_EXP 61
27925: PPUSH
27926: LD_INT 139
27928: PPUSH
27929: LD_INT 78
27931: PPUSH
27932: CALL_OW 111
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bar1 ) ;
27936: LD_EXP 61
27940: PPUSH
27941: LD_INT 2
27943: PPUSH
27944: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu2 ) ;
27948: LD_EXP 61
27952: PPUSH
27953: LD_INT 4
27955: PPUSH
27956: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu1 ) ;
27960: LD_EXP 61
27964: PPUSH
27965: LD_INT 3
27967: PPUSH
27968: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab2 ) ;
27972: LD_EXP 61
27976: PPUSH
27977: LD_INT 16
27979: PPUSH
27980: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_dep ) ;
27984: LD_EXP 61
27988: PPUSH
27989: LD_INT 1
27991: PPUSH
27992: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab1 ) ;
27996: LD_EXP 61
28000: PPUSH
28001: LD_INT 6
28003: PPUSH
28004: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_fac ) ;
28008: LD_EXP 61
28012: PPUSH
28013: LD_INT 5
28015: PPUSH
28016: CALL_OW 175
// AddComAgressiveMove ( ARABI_PRVNI_VLNA , 143 , 79 ) ;
28020: LD_EXP 61
28024: PPUSH
28025: LD_INT 143
28027: PPUSH
28028: LD_INT 79
28030: PPUSH
28031: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28035: LD_INT 142
28037: PPUSH
28038: LD_INT 80
28040: PPUSH
28041: CALL_OW 84
// DisableVideoExclamations ;
28045: CALL_OW 499
// InGameOff ;
28049: CALL_OW 9
// interface_hidden := true ;
28053: LD_ADDR_OWVAR 54
28057: PUSH
28058: LD_INT 1
28060: ST_TO_ADDR
// kecy_behem_utoku_arabu ;
28061: CALL 13258 0 0
// InGameOn ;
28065: CALL_OW 8
// EnableVideoExclamations ;
28069: CALL_OW 498
// CenterOnXY ( 142 , 80 ) ;
28073: LD_INT 142
28075: PPUSH
28076: LD_INT 80
28078: PPUSH
28079: CALL_OW 84
// wait ( 0 0$4 ) ;
28083: LD_INT 140
28085: PPUSH
28086: CALL_OW 67
// posli_kurina_na_smrt ;
28090: CALL 8791 0 0
// for i in ARABI_FLAME_LIST do
28094: LD_ADDR_VAR 0 2
28098: PUSH
28099: LD_EXP 62
28103: PUSH
28104: FOR_IN
28105: IFFALSE 28124
// PlaceUnitArea ( i , Arabi2 , false ) ;
28107: LD_VAR 0 2
28111: PPUSH
28112: LD_INT 13
28114: PPUSH
28115: LD_INT 0
28117: PPUSH
28118: CALL_OW 49
28122: GO 28104
28124: POP
28125: POP
// ComMoveXY ( ARABI_FLAME_LIST , 139 , 78 ) ;
28126: LD_EXP 62
28130: PPUSH
28131: LD_INT 139
28133: PPUSH
28134: LD_INT 78
28136: PPUSH
28137: CALL_OW 111
// AddComAttackUnit ( ARABI_FLAME_LIST , RU1_bar1 ) ;
28141: LD_EXP 62
28145: PPUSH
28146: LD_INT 2
28148: PPUSH
28149: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
28153: LD_INT 142
28155: PPUSH
28156: LD_INT 80
28158: PPUSH
28159: CALL_OW 84
// for i in ARABI_VOJACI do
28163: LD_ADDR_VAR 0 2
28167: PUSH
28168: LD_EXP 64
28172: PUSH
28173: FOR_IN
28174: IFFALSE 28193
// PlaceUnitArea ( i , Arabi1 , false ) ;
28176: LD_VAR 0 2
28180: PPUSH
28181: LD_INT 12
28183: PPUSH
28184: LD_INT 0
28186: PPUSH
28187: CALL_OW 49
28191: GO 28173
28193: POP
28194: POP
// ComMoveXY ( ARABI_VOJACI , 153 , 84 ) ;
28195: LD_EXP 64
28199: PPUSH
28200: LD_INT 153
28202: PPUSH
28203: LD_INT 84
28205: PPUSH
28206: CALL_OW 111
// AddComAgressiveMove ( ARABI_VOJACI , 150 , 83 ) ;
28210: LD_EXP 64
28214: PPUSH
28215: LD_INT 150
28217: PPUSH
28218: LD_INT 83
28220: PPUSH
28221: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 78 ) ;
28225: LD_EXP 64
28229: PPUSH
28230: LD_INT 141
28232: PPUSH
28233: LD_INT 78
28235: PPUSH
28236: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 86 ) ;
28240: LD_EXP 64
28244: PPUSH
28245: LD_INT 141
28247: PPUSH
28248: LD_INT 86
28250: PPUSH
28251: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28255: LD_INT 142
28257: PPUSH
28258: LD_INT 80
28260: PPUSH
28261: CALL_OW 84
// wait ( 0 0$5 ) ;
28265: LD_INT 175
28267: PPUSH
28268: CALL_OW 67
// for i in ARABI_doraz do
28272: LD_ADDR_VAR 0 2
28276: PUSH
28277: LD_EXP 65
28281: PUSH
28282: FOR_IN
28283: IFFALSE 28302
// PlaceUnitArea ( i , Arabi1 , false ) ;
28285: LD_VAR 0 2
28289: PPUSH
28290: LD_INT 12
28292: PPUSH
28293: LD_INT 0
28295: PPUSH
28296: CALL_OW 49
28300: GO 28282
28302: POP
28303: POP
// ComMoveXY ( ARABI_doraz , 153 , 85 ) ;
28304: LD_EXP 65
28308: PPUSH
28309: LD_INT 153
28311: PPUSH
28312: LD_INT 85
28314: PPUSH
28315: CALL_OW 111
// AddComAttackUnit ( ARABI_doraz , RU1_dep ) ;
28319: LD_EXP 65
28323: PPUSH
28324: LD_INT 1
28326: PPUSH
28327: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab1 ) ;
28331: LD_EXP 65
28335: PPUSH
28336: LD_INT 6
28338: PPUSH
28339: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab2 ) ;
28343: LD_EXP 65
28347: PPUSH
28348: LD_INT 16
28350: PPUSH
28351: CALL_OW 175
// end ;
28355: LD_VAR 0 1
28359: RET
// export function ArDontAttackPlayer ( bol ) ; var i ; begin
28360: LD_INT 0
28362: PPUSH
28363: PPUSH
// for i in FilterAllUnits ( [ f_side , You ] ) do
28364: LD_ADDR_VAR 0 3
28368: PUSH
28369: LD_INT 22
28371: PUSH
28372: LD_EXP 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PPUSH
28381: CALL_OW 69
28385: PUSH
28386: FOR_IN
28387: IFFALSE 28427
// if bol then
28389: LD_VAR 0 1
28393: IFFALSE 28411
// DoNotAttack ( Arabi , i ) else
28395: LD_EXP 5
28399: PPUSH
28400: LD_VAR 0 3
28404: PPUSH
28405: CALL_OW 471
28409: GO 28425
// NormalAttack ( Arabi , i ) ;
28411: LD_EXP 5
28415: PPUSH
28416: LD_VAR 0 3
28420: PPUSH
28421: CALL_OW 472
28425: GO 28386
28427: POP
28428: POP
// end ;
28429: LD_VAR 0 2
28433: RET
// every 0 0$5 trigger arabsky_utok_zacal do var pom , pom1 , i ; var utek ;
28434: LD_LOC 27
28438: IFFALSE 28622
28440: GO 28442
28442: DISABLE
28443: LD_INT 0
28445: PPUSH
28446: PPUSH
28447: PPUSH
28448: PPUSH
// begin utek = [ ] ;
28449: LD_ADDR_VAR 0 4
28453: PUSH
28454: EMPTY
28455: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) ;
28456: LD_ADDR_VAR 0 1
28460: PUSH
28461: LD_INT 14
28463: PPUSH
28464: LD_INT 22
28466: PUSH
28467: LD_EXP 2
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 50
28478: PUSH
28479: EMPTY
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PPUSH
28486: CALL_OW 70
28490: ST_TO_ADDR
// if pom < 2 then
28491: LD_VAR 0 1
28495: PUSH
28496: LD_INT 2
28498: LESS
28499: IFFALSE 28596
// begin pom1 = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_ok ] ] ) ;
28501: LD_ADDR_VAR 0 2
28505: PUSH
28506: LD_INT 22
28508: PUSH
28509: LD_EXP 5
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 50
28520: PUSH
28521: EMPTY
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PPUSH
28528: CALL_OW 69
28532: ST_TO_ADDR
// if pom1 > 0 then
28533: LD_VAR 0 2
28537: PUSH
28538: LD_INT 0
28540: GREATER
28541: IFFALSE 28596
// for i in pom1 do
28543: LD_ADDR_VAR 0 3
28547: PUSH
28548: LD_VAR 0 2
28552: PUSH
28553: FOR_IN
28554: IFFALSE 28594
// if utek < 3 then
28556: LD_VAR 0 4
28560: PUSH
28561: LD_INT 3
28563: LESS
28564: IFFALSE 28584
// utek = utek ^ i else
28566: LD_ADDR_VAR 0 4
28570: PUSH
28571: LD_VAR 0 4
28575: PUSH
28576: LD_VAR 0 3
28580: ADD
28581: ST_TO_ADDR
28582: GO 28592
// arabsky_utok_zacal = false ;
28584: LD_ADDR_LOC 27
28588: PUSH
28589: LD_INT 0
28591: ST_TO_ADDR
28592: GO 28553
28594: POP
28595: POP
// end ; if utek > 0 then
28596: LD_VAR 0 4
28600: PUSH
28601: LD_INT 0
28603: GREATER
28604: IFFALSE 28621
// ComMoveXY ( utek , 166 , 95 ) ;
28606: LD_VAR 0 4
28610: PPUSH
28611: LD_INT 166
28613: PPUSH
28614: LD_INT 95
28616: PPUSH
28617: CALL_OW 111
// enable ;
28621: ENABLE
// end ;
28622: PPOPN 4
28624: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) < 2 do var pom , i ;
28625: LD_INT 14
28627: PPUSH
28628: LD_INT 22
28630: PUSH
28631: LD_EXP 2
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 50
28642: PUSH
28643: EMPTY
28644: LIST
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PPUSH
28650: CALL_OW 70
28654: PUSH
28655: LD_INT 2
28657: LESS
28658: IFFALSE 28722
28660: GO 28662
28662: DISABLE
28663: LD_INT 0
28665: PPUSH
28666: PPUSH
// begin pom = FilterUnitsInArea ( Arabi2 , [ [ f_side , Arabi ] ] ) ;
28667: LD_ADDR_VAR 0 1
28671: PUSH
28672: LD_INT 13
28674: PPUSH
28675: LD_INT 22
28677: PUSH
28678: LD_EXP 5
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: EMPTY
28688: LIST
28689: PPUSH
28690: CALL_OW 70
28694: ST_TO_ADDR
// for i in pom do
28695: LD_ADDR_VAR 0 2
28699: PUSH
28700: LD_VAR 0 1
28704: PUSH
28705: FOR_IN
28706: IFFALSE 28719
// RemoveUnit ( i ) ;
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL_OW 64
28717: GO 28705
28719: POP
28720: POP
// enable ;
28721: ENABLE
// end ;
28722: PPOPN 2
28724: END
// every 0 0$4 trigger arabsky_utok_zacal do
28725: LD_LOC 27
28729: IFFALSE 28825
28731: GO 28733
28733: DISABLE
// begin if GetLives ( RU1_el1 ) < 1000 and GetLives ( RU1_el1 ) < 150 then
28734: LD_INT 14
28736: PPUSH
28737: CALL_OW 256
28741: PUSH
28742: LD_INT 1000
28744: LESS
28745: PUSH
28746: LD_INT 14
28748: PPUSH
28749: CALL_OW 256
28753: PUSH
28754: LD_INT 150
28756: LESS
28757: AND
28758: IFFALSE 28770
// SetLives ( RU1_el1 , 150 ) ;
28760: LD_INT 14
28762: PPUSH
28763: LD_INT 150
28765: PPUSH
28766: CALL_OW 234
// if GetLives ( RU1_el2 ) < 1000 and GetLives ( RU1_el2 ) < 150 then
28770: LD_INT 15
28772: PPUSH
28773: CALL_OW 256
28777: PUSH
28778: LD_INT 1000
28780: LESS
28781: PUSH
28782: LD_INT 15
28784: PPUSH
28785: CALL_OW 256
28789: PUSH
28790: LD_INT 150
28792: LESS
28793: AND
28794: IFFALSE 28806
// SetLives ( RU1_el2 , 150 ) ;
28796: LD_INT 15
28798: PPUSH
28799: LD_INT 150
28801: PPUSH
28802: CALL_OW 234
// if IsOK ( RU1_el1 ) or IsOK ( RU1_el2 ) then
28806: LD_INT 14
28808: PPUSH
28809: CALL_OW 302
28813: PUSH
28814: LD_INT 15
28816: PPUSH
28817: CALL_OW 302
28821: OR
28822: IFFALSE 28825
// enable ;
28824: ENABLE
// end ;
28825: END
// every 0 0$5 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) <= 3 do
28826: LD_INT 14
28828: PPUSH
28829: LD_INT 22
28831: PUSH
28832: LD_EXP 2
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 50
28843: PUSH
28844: EMPTY
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PPUSH
28851: CALL_OW 70
28855: PUSH
28856: LD_INT 3
28858: LESSEQUAL
28859: IFFALSE 28903
28861: GO 28863
28863: DISABLE
// begin ArDontAttackPlayer ( false ) ;
28864: LD_INT 0
28866: PPUSH
28867: CALL 28360 0 1
// arabi_kirov_posily_posli ;
28871: CALL 28988 0 0
// DisableVideoExclamations ;
28875: CALL_OW 499
// music_nat = 0 ;
28879: LD_ADDR_OWVAR 71
28883: PUSH
28884: LD_INT 0
28886: ST_TO_ADDR
// chmo_6 ;
28887: CALL 16000 0 0
// InGameOff ;
28891: CALL_OW 9
// stav_omikron = 8 ;
28895: LD_ADDR_EXP 39
28899: PUSH
28900: LD_INT 8
28902: ST_TO_ADDR
// end ;
28903: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) > 2 do var pom ;
28904: LD_INT 14
28906: PPUSH
28907: LD_INT 22
28909: PUSH
28910: LD_EXP 2
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: PPUSH
28922: CALL_OW 70
28926: PUSH
28927: LD_INT 2
28929: GREATER
28930: IFFALSE 28985
28932: GO 28934
28934: DISABLE
28935: LD_INT 0
28937: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) ;
28938: LD_ADDR_VAR 0 1
28942: PUSH
28943: LD_INT 14
28945: PPUSH
28946: LD_INT 22
28948: PUSH
28949: LD_EXP 2
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: PPUSH
28961: CALL_OW 70
28965: ST_TO_ADDR
// ComAttackUnit ( ARABI_doraz , pom [ 1 ] ) ;
28966: LD_EXP 65
28970: PPUSH
28971: LD_VAR 0 1
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: PPUSH
28980: CALL_OW 115
// enable ;
28984: ENABLE
// end ;
28985: PPOPN 1
28987: END
// function arabi_kirov_posily_posli ; var i ; begin
28988: LD_INT 0
28990: PPUSH
28991: PPUSH
// for i in ARABI_KIROV_POSILY do
28992: LD_ADDR_VAR 0 2
28996: PUSH
28997: LD_EXP 66
29001: PUSH
29002: FOR_IN
29003: IFFALSE 29022
// PlaceUnitArea ( i , Arabi3 , false ) ;
29005: LD_VAR 0 2
29009: PPUSH
29010: LD_INT 33
29012: PPUSH
29013: LD_INT 0
29015: PPUSH
29016: CALL_OW 49
29020: GO 29002
29022: POP
29023: POP
// ComAgressiveMove ( ARABI_KIROV_POSILY , 142 , 84 ) ;
29024: LD_EXP 66
29028: PPUSH
29029: LD_INT 142
29031: PPUSH
29032: LD_INT 84
29034: PPUSH
29035: CALL_OW 114
// end ;
29039: LD_VAR 0 1
29043: RET
