// var stReady , stRepair , stInCombat , stHelp , stNotReady , ImpatienceTreshold ; var vozKirov , vozKirovImpat , vozKirovState , vozKirovOut , vozHrace , mechKirov , mechKirovOut ; var targHrace , targAcquired ; every 0 0$1 marked 10 do var i ; var auta , autapom ; var poc ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// begin auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
   9: LD_ADDR_VAR 0 2
  13: PUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 21
  19: PUSH
  20: LD_INT 2
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: PUSH
  27: LD_INT 59
  29: PUSH
  30: EMPTY
  31: LIST
  32: PUSH
  33: EMPTY
  34: LIST
  35: LIST
  36: PPUSH
  37: CALL_OW 70
  41: ST_TO_ADDR
// for i in auta do
  42: LD_ADDR_VAR 0 1
  46: PUSH
  47: LD_VAR 0 2
  51: PUSH
  52: FOR_IN
  53: IFFALSE 132
// begin ComMoveToArea ( i , Zarea_utok ) ;
  55: LD_VAR 0 1
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: CALL_OW 113
// AddComAgressiveMove ( i , 28 , 15 ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: LD_INT 28
  74: PPUSH
  75: LD_INT 15
  77: PPUSH
  78: CALL_OW 174
// AddComAttackUnit ( i , Am_bu3 ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: LD_INT 19
  89: PPUSH
  90: CALL_OW 175
// AddComAgressiveMove ( i , 13 , 9 ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: LD_INT 13
 101: PPUSH
 102: LD_INT 9
 104: PPUSH
 105: CALL_OW 174
// RUSKE_POSILY_RIDICI_LIST = RUSKE_POSILY_RIDICI_LIST diff IsDrivenBy ( i ) ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_EXP 57
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 311
 128: DIFF
 129: ST_TO_ADDR
// end ;
 130: GO 52
 132: POP
 133: POP
// auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: PPUSH
 142: LD_INT 21
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 3
 154: PUSH
 155: LD_INT 59
 157: PUSH
 158: EMPTY
 159: LIST
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PPUSH
 166: CALL_OW 70
 170: ST_TO_ADDR
// poc = 1 ;
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 1
 178: ST_TO_ADDR
// for i in RUSKE_POSILY_RIDICI_LIST do
 179: LD_ADDR_VAR 0 1
 183: PUSH
 184: LD_EXP 57
 188: PUSH
 189: FOR_IN
 190: IFFALSE 244
// begin if auta + 0 >= poc then
 192: LD_VAR 0 2
 196: PUSH
 197: LD_INT 0
 199: PLUS
 200: PUSH
 201: LD_VAR 0 4
 205: GREATEREQUAL
 206: IFFALSE 228
// ComEnterUnit ( i , auta [ poc ] ) ;
 208: LD_VAR 0 1
 212: PPUSH
 213: LD_VAR 0 2
 217: PUSH
 218: LD_VAR 0 4
 222: ARRAY
 223: PPUSH
 224: CALL_OW 120
// poc = poc + 1 ;
 228: LD_ADDR_VAR 0 4
 232: PUSH
 233: LD_VAR 0 4
 237: PUSH
 238: LD_INT 1
 240: PLUS
 241: ST_TO_ADDR
// end ;
 242: GO 189
 244: POP
 245: POP
// if RUSKE_POSILY_RIDICI_LIST <> 0 then
 246: LD_EXP 57
 250: PUSH
 251: LD_INT 0
 253: NONEQUAL
 254: IFFALSE 257
// enable ;
 256: ENABLE
// end ;
 257: PPOPN 4
 259: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 260: LD_EXP 41
 264: PUSH
 265: LD_EXP 39
 269: PUSH
 270: LD_INT 7
 272: LESS
 273: AND
 274: IFFALSE 296
 276: GO 278
 278: DISABLE
// begin RepairVehicles ( 6 , Om_repair , 61 , 9 ) ;
 279: LD_INT 6
 281: PPUSH
 282: LD_INT 52
 284: PPUSH
 285: LD_INT 61
 287: PPUSH
 288: LD_INT 9
 290: PPUSH
 291: CALL 724 0 4
// enable ;
 295: ENABLE
// end ;
 296: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 297: LD_EXP 41
 301: PUSH
 302: LD_EXP 39
 306: PUSH
 307: LD_INT 7
 309: LESS
 310: AND
 311: IFFALSE 323
 313: GO 315
 315: DISABLE
// begin AttackVehicles ( 6 ) ;
 316: LD_INT 6
 318: PPUSH
 319: CALL 324 0 1
// end ;
 323: END
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= 0 then
 333: LD_INT 22
 335: PUSH
 336: LD_VAR 0 1
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 21
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 24
 357: PUSH
 358: LD_INT 1000
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: LD_INT 0
 377: GREATEREQUAL
 378: IFFALSE 719
// repeat wait ( 0 0$1 ) ;
 380: LD_INT 35
 382: PPUSH
 383: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_or , [ f_weapon , 42 ] , [ f_weapon , 43 ] , [ f_weapon , 44 ] ] ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 22
 394: PUSH
 395: LD_VAR 0 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 21
 406: PUSH
 407: LD_INT 2
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 24
 416: PUSH
 417: LD_INT 650
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 2
 426: PUSH
 427: LD_INT 34
 429: PUSH
 430: LD_INT 42
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: LD_INT 34
 439: PUSH
 440: LD_INT 43
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PUSH
 447: LD_INT 34
 449: PUSH
 450: LD_INT 44
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// for j in vehiclesOK do
 474: LD_ADDR_VAR 0 4
 478: PUSH
 479: LD_VAR 0 5
 483: PUSH
 484: FOR_IN
 485: IFFALSE 660
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , j ) ;
 487: LD_ADDR_VAR 0 6
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PPUSH
 510: LD_VAR 0 4
 514: PPUSH
 515: CALL_OW 74
 519: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
 520: LD_ADDR_VAR 0 7
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: LD_INT 59
 540: PUSH
 541: EMPTY
 542: LIST
 543: PUSH
 544: LD_INT 21
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 21
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PUSH
 574: EMPTY
 575: LIST
 576: PPUSH
 577: CALL_OW 69
 581: PPUSH
 582: LD_VAR 0 4
 586: PPUSH
 587: CALL_OW 74
 591: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
 592: LD_VAR 0 4
 596: PPUSH
 597: LD_VAR 0 6
 601: PPUSH
 602: CALL_OW 296
 606: PUSH
 607: LD_INT 8
 609: PLUS
 610: PUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_VAR 0 7
 620: PPUSH
 621: CALL_OW 296
 625: LESS
 626: IFFALSE 644
// ComAttackUnit ( j , target1 ) else
 628: LD_VAR 0 4
 632: PPUSH
 633: LD_VAR 0 6
 637: PPUSH
 638: CALL_OW 115
 642: GO 658
// ComAttackUnit ( j , target2 ) ;
 644: LD_VAR 0 4
 648: PPUSH
 649: LD_VAR 0 7
 653: PPUSH
 654: CALL_OW 115
// end ;
 658: GO 484
 660: POP
 661: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 or stav_omikron >= 7 ;
 662: LD_INT 22
 664: PUSH
 665: LD_VAR 0 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: LD_INT 1000
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: PUSH
 704: LD_INT 0
 706: EQUAL
 707: PUSH
 708: LD_EXP 39
 712: PUSH
 713: LD_INT 7
 715: GREATEREQUAL
 716: OR
 717: IFFALSE 380
// end ;
 719: LD_VAR 0 2
 723: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
 728: PPUSH
 729: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
 730: LD_ADDR_VAR 0 8
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_VAR 0 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 21
 749: PUSH
 750: LD_INT 2
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 24
 762: PUSH
 763: LD_INT 650
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: ST_TO_ADDR
// if damageVehicles > 0 then
 784: LD_VAR 0 8
 788: PUSH
 789: LD_INT 0
 791: GREATER
 792: IFFALSE 813
// ComMoveXY ( damageVehicles , repX , repY ) ;
 794: LD_VAR 0 8
 798: PPUSH
 799: LD_VAR 0 3
 803: PPUSH
 804: LD_VAR 0 4
 808: PPUSH
 809: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 813: LD_VAR 0 8
 817: PPUSH
 818: LD_INT 95
 820: PUSH
 821: LD_VAR 0 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 3
 832: PUSH
 833: LD_INT 58
 835: PUSH
 836: EMPTY
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 72
 851: PUSH
 852: LD_INT 0
 854: GREATER
 855: IFFALSE 922
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
 857: LD_ADDR_VAR 0 6
 861: PUSH
 862: LD_VAR 0 8
 866: PPUSH
 867: LD_INT 95
 869: PUSH
 870: LD_VAR 0 2
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: LD_INT 3
 881: PUSH
 882: LD_INT 58
 884: PUSH
 885: EMPTY
 886: LIST
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 72
 900: PUSH
 901: FOR_IN
 902: IFFALSE 920
// ComExitVehicle ( UnitsInside ( i ) ) ;
 904: LD_VAR 0 6
 908: PPUSH
 909: CALL_OW 313
 913: PPUSH
 914: CALL_OW 121
 918: GO 901
 920: POP
 921: POP
// end ;
 922: LD_VAR 0 5
 926: RET
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and GetSide ( human ) = 6 and IsOk ( vehicle ) then
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 255
 936: PUSH
 937: LD_INT 6
 939: EQUAL
 940: PUSH
 941: LD_VAR 0 2
 945: PPUSH
 946: CALL_OW 255
 950: PUSH
 951: LD_INT 6
 953: EQUAL
 954: AND
 955: PUSH
 956: LD_VAR 0 1
 960: PPUSH
 961: CALL_OW 302
 965: AND
 966: IFFALSE 1041
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
 968: LD_VAR 0 1
 972: PPUSH
 973: CALL_OW 264
 977: PUSH
 978: LD_INT 42
 980: EQUAL
 981: PUSH
 982: LD_VAR 0 1
 986: PPUSH
 987: CALL_OW 264
 991: PUSH
 992: LD_INT 43
 994: EQUAL
 995: OR
 996: PUSH
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 264
1006: PUSH
1007: LD_INT 44
1009: EQUAL
1010: OR
1011: IFFALSE 1041
// begin ComRepairVehicle ( human , vehicle ) ;
1013: LD_VAR 0 2
1017: PPUSH
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
1027: LD_VAR 0 2
1031: PPUSH
1032: LD_VAR 0 1
1036: PPUSH
1037: CALL_OW 180
// end ; end ;
1041: PPOPN 2
1043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do var i ;
1044: LD_INT 22
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 21
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: IFFALSE 1149
1074: GO 1076
1076: DISABLE
1077: LD_INT 0
1079: PPUSH
// begin enable ;
1080: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_INT 6
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 21
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PPUSH
1110: CALL_OW 69
1114: PUSH
1115: FOR_IN
1116: IFFALSE 1147
// if GetFuel ( i ) < 3 then
1118: LD_VAR 0 1
1122: PPUSH
1123: CALL_OW 261
1127: PUSH
1128: LD_INT 3
1130: LESS
1131: IFFALSE 1145
// SetFuel ( i , 3 ) ;
1133: LD_VAR 0 1
1137: PPUSH
1138: LD_INT 3
1140: PPUSH
1141: CALL_OW 240
1145: GO 1115
1147: POP
1148: POP
// end ; end_of_file
1149: PPOPN 1
1151: END
// export You , You2 , You3 , Amici , Arabi ; export KurinDialog ; export KurinAddTime ; starting begin RandomizeAll ;
1152: CALL_OW 11
// InitHc ;
1156: CALL_OW 19
// InitBc ;
1160: CALL_OW 21
// InitVc ;
1164: CALL_OW 20
// InitUc ;
1168: CALL_OW 18
// KurinDialog = 0 ;
1172: LD_ADDR_EXP 6
1176: PUSH
1177: LD_INT 0
1179: ST_TO_ADDR
// KurinAddTime = 0 ;
1180: LD_ADDR_EXP 7
1184: PUSH
1185: LD_INT 0
1187: ST_TO_ADDR
// set_difficulty ;
1188: CALL 4180 0 0
// load_postav ;
1192: CALL 2008 0 0
// load_promenne ;
1196: CALL 2160 0 0
// You = 3 ;
1200: LD_ADDR_EXP 1
1204: PUSH
1205: LD_INT 3
1207: ST_TO_ADDR
// You2 = 6 ;
1208: LD_ADDR_EXP 2
1212: PUSH
1213: LD_INT 6
1215: ST_TO_ADDR
// You3 = 5 ;
1216: LD_ADDR_EXP 3
1220: PUSH
1221: LD_INT 5
1223: ST_TO_ADDR
// Amici = 1 ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// Arabi = 2 ;
1232: LD_ADDR_EXP 5
1236: PUSH
1237: LD_INT 2
1239: ST_TO_ADDR
// placni_budovy_z_predesle_mise ;
1240: CALL 2559 0 0
// RevealFogArea ( You , CelaRU02 ) ;
1244: LD_EXP 1
1248: PPUSH
1249: LD_INT 36
1251: PPUSH
1252: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1256: LD_EXP 2
1260: PPUSH
1261: LD_INT 36
1263: PPUSH
1264: CALL_OW 332
// create_arabsky_utok ;
1268: CALL 18810 0 0
// create_americka_pomoc_hlidce ;
1272: CALL 16734 0 0
// create_americke_posily ;
1276: CALL 17603 0 0
// create_ruske_posily_na_omicron ;
1280: CALL 19959 0 0
// create_arabi_komanda ;
1284: CALL 20931 0 0
// create_ru_posily_ma_utek ;
1288: CALL 21777 0 0
// create_arabi_na_posily_kirovu ;
1292: CALL 22229 0 0
// create_cerpaci_ruske_auta ;
1296: CALL 22681 0 0
// create_am_jednotky ;
1300: CALL 20601 0 0
// set_skily_amikum ;
1304: CALL 17087 0 0
// uklid_rusu ;
1308: CALL 4948 0 0
// ChangeSideFog ( You , You ) ;
1312: LD_EXP 1
1316: PPUSH
1317: LD_EXP 1
1321: PPUSH
1322: CALL_OW 343
// ChangeSideFog ( You2 , You ) ;
1326: LD_EXP 2
1330: PPUSH
1331: LD_EXP 1
1335: PPUSH
1336: CALL_OW 343
// pojmenovani_zakladen ;
1340: CALL 4605 0 0
// InGameOn ;
1344: CALL_OW 8
// CenterOnXY ( 137 , 76 ) ;
1348: LD_INT 137
1350: PPUSH
1351: LD_INT 76
1353: PPUSH
1354: CALL_OW 84
// RevealFogArea ( You , CelaRU02 ) ;
1358: LD_EXP 1
1362: PPUSH
1363: LD_INT 36
1365: PPUSH
1366: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1370: LD_EXP 2
1374: PPUSH
1375: LD_INT 36
1377: PPUSH
1378: CALL_OW 332
// uvodni_pokec ;
1382: CALL 10056 0 0
// end ;
1386: END
// on UnitDestroyed ( un ) do begin if un = bur then
1387: LD_VAR 0 1
1391: PUSH
1392: LD_EXP 29
1396: EQUAL
1397: IFFALSE 1406
// YouLost ( Burlak ) ;
1399: LD_STRING Burlak
1401: PPUSH
1402: CALL_OW 104
// enable ;
1406: ENABLE
// end ;
1407: PPOPN 1
1409: END
// export function konec_mise_lhani ; begin
1410: LD_INT 0
1412: PPUSH
// hlaska_lhani ;
1413: CALL 15506 0 0
// YouLost ( Vehicles ) ;
1417: LD_STRING Vehicles
1419: PPUSH
1420: CALL_OW 104
// end ;
1424: LD_VAR 0 1
1428: RET
// export function konec_pred_omikronem ; begin
1429: LD_INT 0
1431: PPUSH
// YouLost ( Delay ) ;
1432: LD_STRING Delay
1434: PPUSH
1435: CALL_OW 104
// end ;
1439: LD_VAR 0 1
1443: RET
// export function konec_mise_utok ; begin
1444: LD_INT 0
1446: PPUSH
// YouLost ( SelfAttack ) ;
1447: LD_STRING SelfAttack
1449: PPUSH
1450: CALL_OW 104
// end ;
1454: LD_VAR 0 1
1458: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var mrtvi ; var all_people ; begin
1459: LD_INT 0
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
1465: PPUSH
1466: PPUSH
1467: PPUSH
1468: PPUSH
// DisableExclamations ;
1469: CALL_OW 474
// gained_medals := [ ] ;
1473: LD_ADDR_OWVAR 61
1477: PUSH
1478: EMPTY
1479: ST_TO_ADDR
// missing_medals := [ ] ;
1480: LD_ADDR_OWVAR 62
1484: PUSH
1485: EMPTY
1486: ST_TO_ADDR
// if Prezite_posily >= muze_projit_posil [ difficulty ] then
1487: LD_EXP 73
1491: PUSH
1492: LD_EXP 22
1496: PUSH
1497: LD_OWVAR 67
1501: ARRAY
1502: GREATEREQUAL
1503: IFFALSE 1518
// AddMedal ( PreventReinforcements , - 1 ) else
1505: LD_STRING PreventReinforcements
1507: PPUSH
1508: LD_INT 1
1510: NEG
1511: PPUSH
1512: CALL_OW 101
1516: GO 1528
// AddMedal ( PreventReinforcements , 1 ) ;
1518: LD_STRING PreventReinforcements
1520: PPUSH
1521: LD_INT 1
1523: PPUSH
1524: CALL_OW 101
// if scholtze_saved and IsOk ( schol ) and GetSide ( schol ) = 3 then
1528: LD_EXP 37
1532: PUSH
1533: LD_EXP 33
1537: PPUSH
1538: CALL_OW 302
1542: AND
1543: PUSH
1544: LD_EXP 33
1548: PPUSH
1549: CALL_OW 255
1553: PUSH
1554: LD_INT 3
1556: EQUAL
1557: AND
1558: IFFALSE 1572
// AddMedal ( Scholtze , 1 ) else
1560: LD_STRING Scholtze
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 101
1570: GO 1583
// AddMedal ( Scholtze , - 1 ) ;
1572: LD_STRING Scholtze
1574: PPUSH
1575: LD_INT 1
1577: NEG
1578: PPUSH
1579: CALL_OW 101
// case stav_aut_new of 1 :
1583: LD_EXP 46
1587: PUSH
1588: LD_INT 1
1590: DOUBLE
1591: EQUAL
1592: IFTRUE 1596
1594: GO 1609
1596: POP
// AddMedal ( Surplus , 1 ) ; 2 :
1597: LD_STRING Surplus
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: CALL_OW 101
1607: GO 1654
1609: LD_INT 2
1611: DOUBLE
1612: EQUAL
1613: IFTRUE 1617
1615: GO 1631
1617: POP
// AddMedal ( Surplus , - 1 ) ; 3 :
1618: LD_STRING Surplus
1620: PPUSH
1621: LD_INT 1
1623: NEG
1624: PPUSH
1625: CALL_OW 101
1629: GO 1654
1631: LD_INT 3
1633: DOUBLE
1634: EQUAL
1635: IFTRUE 1639
1637: GO 1653
1639: POP
// AddMedal ( Surplus , - 2 ) ; end ;
1640: LD_STRING Surplus
1642: PPUSH
1643: LD_INT 2
1645: NEG
1646: PPUSH
1647: CALL_OW 101
1651: GO 1654
1653: POP
// if not stav_aut_new then
1654: LD_EXP 46
1658: NOT
1659: IFFALSE 1672
// AddMedal ( Surplus , - 1 ) ;
1661: LD_STRING Surplus
1663: PPUSH
1664: LD_INT 1
1666: NEG
1667: PPUSH
1668: CALL_OW 101
// GiveMedals ( Main ) ;
1672: LD_STRING Main
1674: PPUSH
1675: CALL_OW 102
// all_people := FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1679: LD_ADDR_VAR 0 8
1683: PUSH
1684: LD_INT 22
1686: PUSH
1687: LD_EXP 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// RewardPeople ( all_people ) ;
1715: LD_VAR 0 8
1719: PPUSH
1720: CALL_OW 43
// if not ( bel in all_people ) then
1724: LD_EXP 32
1728: PUSH
1729: LD_VAR 0 8
1733: IN
1734: NOT
1735: IFFALSE 1746
// KillUnit ( bel ) ;
1737: LD_EXP 32
1741: PPUSH
1742: CALL_OW 66
// if not ( gny in all_people ) then
1746: LD_EXP 31
1750: PUSH
1751: LD_VAR 0 8
1755: IN
1756: NOT
1757: IFFALSE 1768
// KillUnit ( gny ) ;
1759: LD_EXP 31
1763: PPUSH
1764: CALL_OW 66
// if not ( kov in all_people ) then
1768: LD_EXP 30
1772: PUSH
1773: LD_VAR 0 8
1777: IN
1778: NOT
1779: IFFALSE 1790
// KillUnit ( kov ) ;
1781: LD_EXP 30
1785: PPUSH
1786: CALL_OW 66
// if not ( schol in all_people ) then
1790: LD_EXP 33
1794: PUSH
1795: LD_VAR 0 8
1799: IN
1800: NOT
1801: IFFALSE 1812
// KillUnit ( schol ) ;
1803: LD_EXP 33
1807: PPUSH
1808: CALL_OW 66
// SaveCharacters ( bur , Burlak ) ;
1812: LD_EXP 29
1816: PPUSH
1817: LD_STRING Burlak
1819: PPUSH
1820: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
1824: LD_EXP 32
1828: PPUSH
1829: LD_STRING Belkov
1831: PPUSH
1832: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
1836: LD_EXP 31
1840: PPUSH
1841: LD_STRING Gnyevko
1843: PPUSH
1844: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
1848: LD_EXP 30
1852: PPUSH
1853: LD_STRING Kovalyuk
1855: PPUSH
1856: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
1860: LD_EXP 33
1864: PPUSH
1865: LD_STRING Scholtze
1867: PPUSH
1868: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
1872: LD_EXP 28
1876: PPUSH
1877: LD_STRING Popov
1879: PPUSH
1880: CALL_OW 38
// pom := all_people diff [ bur , kur , bel , gny , kov , schol , schol2 , pop ] ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: LD_VAR 0 8
1893: PUSH
1894: LD_EXP 29
1898: PUSH
1899: LD_EXP 27
1903: PUSH
1904: LD_EXP 32
1908: PUSH
1909: LD_EXP 31
1913: PUSH
1914: LD_EXP 30
1918: PUSH
1919: LD_EXP 33
1923: PUSH
1924: LD_EXP 34
1928: PUSH
1929: LD_EXP 28
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: DIFF
1944: ST_TO_ADDR
// SaveCharacters ( pom , survivors1 ) ;
1945: LD_VAR 0 3
1949: PPUSH
1950: LD_STRING survivors1
1952: PPUSH
1953: CALL_OW 38
// SaveVariable ( BELKOV_SAVED , belkov_saved ) ;
1957: LD_EXP 24
1961: PPUSH
1962: LD_STRING belkov_saved
1964: PPUSH
1965: CALL_OW 39
// SaveVariable ( STAV_UTOKU , stav_utoku ) ;
1969: LD_EXP 25
1973: PPUSH
1974: LD_STRING stav_utoku
1976: PPUSH
1977: CALL_OW 39
// SaveVariable ( stav_aut , Surplus_vehicles ) ;
1981: LD_EXP 38
1985: PPUSH
1986: LD_STRING Surplus_vehicles
1988: PPUSH
1989: CALL_OW 39
// YouWin ;
1993: CALL_OW 103
// EnableExclamations ;
1997: CALL_OW 473
// exit ;
2001: GO 2003
// end ;
2003: LD_VAR 0 1
2007: RET
// function load_postav ; begin
2008: LD_INT 0
2010: PPUSH
// grishko = NewCharacter ( Grishko ) ;
2011: LD_ADDR_EXP 35
2015: PUSH
2016: LD_STRING Grishko
2018: PPUSH
2019: CALL_OW 25
2023: ST_TO_ADDR
// kur = nacti_osobu ( kurin ) ;
2024: LD_ADDR_EXP 27
2028: PUSH
2029: LD_STRING kurin
2031: PPUSH
2032: CALL 20887 0 1
2036: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
2037: LD_ADDR_EXP 32
2041: PUSH
2042: LD_STRING Belkov
2044: PPUSH
2045: CALL 20887 0 1
2049: ST_TO_ADDR
// kov = nacti_osobu ( Kovalyuk ) ;
2050: LD_ADDR_EXP 30
2054: PUSH
2055: LD_STRING Kovalyuk
2057: PPUSH
2058: CALL 20887 0 1
2062: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
2063: LD_ADDR_EXP 29
2067: PUSH
2068: LD_STRING Burlak
2070: PPUSH
2071: CALL 20887 0 1
2075: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
2076: LD_ADDR_EXP 31
2080: PUSH
2081: LD_STRING Gnyevko
2083: PPUSH
2084: CALL 20887 0 1
2088: ST_TO_ADDR
// pop = NewCharacter ( Popov ) ;
2089: LD_ADDR_EXP 28
2093: PUSH
2094: LD_STRING Popov
2096: PPUSH
2097: CALL_OW 25
2101: ST_TO_ADDR
// if CheckCharacterSet ( survivors1 ) then
2102: LD_STRING survivors1
2104: PPUSH
2105: CALL_OW 29
2109: IFFALSE 2124
// other_survivors_mise_2 = CreateCharacterSet ( survivors1 ) ;
2111: LD_ADDR_EXP 71
2115: PUSH
2116: LD_STRING survivors1
2118: PPUSH
2119: CALL_OW 31
2123: ST_TO_ADDR
// if CheckCharacterSet ( amici_bw ) then
2124: LD_STRING amici_bw
2126: PPUSH
2127: CALL_OW 29
2131: IFFALSE 2148
// amici_bw_2 = CreateCharacter ( amici_bw ) else
2133: LD_ADDR_EXP 10
2137: PUSH
2138: LD_STRING amici_bw
2140: PPUSH
2141: CALL_OW 34
2145: ST_TO_ADDR
2146: GO 2155
// amici_bw_2 = [ ] ;
2148: LD_ADDR_EXP 10
2152: PUSH
2153: EMPTY
2154: ST_TO_ADDR
// end ;
2155: LD_VAR 0 1
2159: RET
// function load_promenne ; var default_budovy ; begin
2160: LD_INT 0
2162: PPUSH
2163: PPUSH
// default_budovy = [ [ 0 , 2 , 66 , 97 , 0 ] , [ 2 , 1 , 61 , 83 , 2 ] , [ 6 , 1 , 73 , 90 , 4 ] ] ;
2164: LD_ADDR_VAR 0 2
2168: PUSH
2169: LD_INT 0
2171: PUSH
2172: LD_INT 2
2174: PUSH
2175: LD_INT 66
2177: PUSH
2178: LD_INT 97
2180: PUSH
2181: LD_INT 0
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 61
2199: PUSH
2200: LD_INT 83
2202: PUSH
2203: LD_INT 2
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 6
2215: PUSH
2216: LD_INT 1
2218: PUSH
2219: LD_INT 73
2221: PUSH
2222: LD_INT 90
2224: PUSH
2225: LD_INT 4
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: ST_TO_ADDR
// budovy_mise_2 = LoadVariable ( budovy , default_budovy ) ;
2240: LD_ADDR_EXP 8
2244: PUSH
2245: LD_STRING budovy
2247: PPUSH
2248: LD_VAR 0 2
2252: PPUSH
2253: CALL_OW 30
2257: ST_TO_ADDR
// breastworks_east = LoadVariable ( bw_east , 3 ) ;
2258: LD_ADDR_EXP 9
2262: PUSH
2263: LD_STRING bw_east
2265: PPUSH
2266: LD_INT 3
2268: PPUSH
2269: CALL_OW 30
2273: ST_TO_ADDR
// end ;
2274: LD_VAR 0 1
2278: RET
// export function create_scholtze ; var pom ; begin
2279: LD_INT 0
2281: PPUSH
2282: PPUSH
// pom = NewCharacter ( Scholtze ) ;
2283: LD_ADDR_VAR 0 2
2287: PUSH
2288: LD_STRING Scholtze
2290: PPUSH
2291: CALL_OW 25
2295: ST_TO_ADDR
// SetSide ( pom , You2 ) ;
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_EXP 2
2305: PPUSH
2306: CALL_OW 235
// SetClass ( pom , class_scientistic ) ;
2310: LD_VAR 0 2
2314: PPUSH
2315: LD_INT 4
2317: PPUSH
2318: CALL_OW 336
// PlaceUnitXY ( pom , 49 , 5 , true ) ;
2322: LD_VAR 0 2
2326: PPUSH
2327: LD_INT 49
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL_OW 48
// result = pom ;
2340: LD_ADDR_VAR 0 1
2344: PUSH
2345: LD_VAR 0 2
2349: ST_TO_ADDR
// end ;
2350: LD_VAR 0 1
2354: RET
// on Command ( com ) do var i , j , temp ;
2355: LD_INT 0
2357: PPUSH
2358: PPUSH
2359: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2360: LD_ADDR_VAR 0 2
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 3
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 21
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: FOR_IN
2395: IFFALSE 2542
// if GetTaskList ( i ) > 0 then
2397: LD_VAR 0 2
2401: PPUSH
2402: CALL_OW 437
2406: PUSH
2407: LD_INT 0
2409: GREATER
2410: IFFALSE 2540
// for j = 1 to GetTaskList ( i ) do
2412: LD_ADDR_VAR 0 3
2416: PUSH
2417: DOUBLE
2418: LD_INT 1
2420: DEC
2421: ST_TO_ADDR
2422: LD_VAR 0 2
2426: PPUSH
2427: CALL_OW 437
2431: PUSH
2432: FOR_TO
2433: IFFALSE 2538
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
2435: LD_ADDR_VAR 0 4
2439: PUSH
2440: LD_VAR 0 2
2444: PPUSH
2445: CALL_OW 437
2449: PUSH
2450: LD_VAR 0 3
2454: ARRAY
2455: PUSH
2456: LD_INT 4
2458: ARRAY
2459: ST_TO_ADDR
// if temp = RU1_dep or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
2460: LD_VAR 0 4
2464: PUSH
2465: LD_INT 1
2467: EQUAL
2468: PUSH
2469: LD_VAR 0 4
2473: PPUSH
2474: CALL_OW 255
2478: PUSH
2479: LD_INT 6
2481: EQUAL
2482: PUSH
2483: LD_VAR 0 2
2487: PPUSH
2488: CALL_OW 437
2492: PUSH
2493: LD_VAR 0 3
2497: ARRAY
2498: PUSH
2499: LD_INT 1
2501: ARRAY
2502: PUSH
2503: LD_STRING e
2505: EQUAL
2506: AND
2507: PUSH
2508: LD_VAR 0 4
2512: PPUSH
2513: CALL_OW 247
2517: PUSH
2518: LD_INT 2
2520: EQUAL
2521: AND
2522: OR
2523: IFFALSE 2536
// SetTaskList ( i , [ ] ) ;
2525: LD_VAR 0 2
2529: PPUSH
2530: EMPTY
2531: PPUSH
2532: CALL_OW 446
// end ;
2536: GO 2432
2538: POP
2539: POP
2540: GO 2394
2542: POP
2543: POP
// end ; end_of_file
2544: PPOPN 4
2546: END
// var konzervy_delay ; export budovy_mise_2 ; export breastworks_east ; export amici_bw_2 ; every 0 0$0.1 do
2547: GO 2549
2549: DISABLE
// begin konzervy_delay = 0 ;
2550: LD_ADDR_LOC 16
2554: PUSH
2555: LD_INT 0
2557: ST_TO_ADDR
// end ;
2558: END
// export function placni_budovy_z_predesle_mise ; var pom , i ; var ab ; var bw_e ; var vojaci ; var pocet ; begin
2559: LD_INT 0
2561: PPUSH
2562: PPUSH
2563: PPUSH
2564: PPUSH
2565: PPUSH
2566: PPUSH
2567: PPUSH
// uc_side = You ;
2568: LD_ADDR_OWVAR 20
2572: PUSH
2573: LD_EXP 1
2577: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
2578: LD_ADDR_OWVAR 44
2582: PUSH
2583: LD_INT 9
2585: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2586: LD_ADDR_OWVAR 45
2590: PUSH
2591: LD_INT 9
2593: ST_TO_ADDR
// for i in budovy_mise_2 do
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: LD_EXP 8
2603: PUSH
2604: FOR_IN
2605: IFFALSE 2753
// begin uc_nation = i [ 6 ] ;
2607: LD_ADDR_OWVAR 21
2611: PUSH
2612: LD_VAR 0 3
2616: PUSH
2617: LD_INT 6
2619: ARRAY
2620: ST_TO_ADDR
// bc_type = i [ 1 ] ;
2621: LD_ADDR_OWVAR 42
2625: PUSH
2626: LD_VAR 0 3
2630: PUSH
2631: LD_INT 1
2633: ARRAY
2634: ST_TO_ADDR
// bc_level = i [ 2 ] ;
2635: LD_ADDR_OWVAR 43
2639: PUSH
2640: LD_VAR 0 3
2644: PUSH
2645: LD_INT 2
2647: ARRAY
2648: ST_TO_ADDR
// pom = CreateAndPlaceBuildingXYD ( i [ 3 ] + 30 , i [ 4 ] - 20 , i [ 5 ] ) ;
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_VAR 0 3
2658: PUSH
2659: LD_INT 3
2661: ARRAY
2662: PUSH
2663: LD_INT 30
2665: PLUS
2666: PPUSH
2667: LD_VAR 0 3
2671: PUSH
2672: LD_INT 4
2674: ARRAY
2675: PUSH
2676: LD_INT 20
2678: MINUS
2679: PPUSH
2680: LD_VAR 0 3
2684: PUSH
2685: LD_INT 5
2687: ARRAY
2688: PPUSH
2689: CALL_OW 47
2693: ST_TO_ADDR
// if bc_type in [ b_depot , b_warehouse ] then
2694: LD_OWVAR 42
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: LD_INT 1
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: IN
2709: IFFALSE 2751
// begin SetResourceType ( GetBase ( pom ) , mat_cans , 100 ) ;
2711: LD_VAR 0 2
2715: PPUSH
2716: CALL_OW 274
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 100
2726: PPUSH
2727: CALL_OW 277
// SetResourceType ( GetBase ( pom ) , mat_oil , 25 ) ;
2731: LD_VAR 0 2
2735: PPUSH
2736: CALL_OW 274
2740: PPUSH
2741: LD_INT 2
2743: PPUSH
2744: LD_INT 25
2746: PPUSH
2747: CALL_OW 277
// end ; end ;
2751: GO 2604
2753: POP
2754: POP
// bw_e = breastworks_east ;
2755: LD_ADDR_VAR 0 5
2759: PUSH
2760: LD_EXP 9
2764: ST_TO_ADDR
// uc_side = Amici ;
2765: LD_ADDR_OWVAR 20
2769: PUSH
2770: LD_EXP 4
2774: ST_TO_ADDR
// uc_nation = nation_american ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// bc_type = b_breastwork ;
2783: LD_ADDR_OWVAR 42
2787: PUSH
2788: LD_INT 31
2790: ST_TO_ADDR
// bc_level = level_bw_e [ difficulty ] ;
2791: LD_ADDR_OWVAR 43
2795: PUSH
2796: LD_EXP 11
2800: PUSH
2801: LD_OWVAR 67
2805: ARRAY
2806: ST_TO_ADDR
// if bw_e > 1 then
2807: LD_VAR 0 5
2811: PUSH
2812: LD_INT 1
2814: GREATER
2815: IFFALSE 2830
// CreateAndPlaceBuildingXYD ( 123 , 42 , 1 ) ;
2817: LD_INT 123
2819: PPUSH
2820: LD_INT 42
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: CALL_OW 47
// if bw_e = 1 or bw_e = 3 then
2830: LD_VAR 0 5
2834: PUSH
2835: LD_INT 1
2837: EQUAL
2838: PUSH
2839: LD_VAR 0 5
2843: PUSH
2844: LD_INT 3
2846: EQUAL
2847: OR
2848: IFFALSE 2863
// CreateAndPlaceBuildingXYD ( 120 , 36 , 1 ) ;
2850: LD_INT 120
2852: PPUSH
2853: LD_INT 36
2855: PPUSH
2856: LD_INT 1
2858: PPUSH
2859: CALL_OW 47
// vojaci = amici_bw_2 ;
2863: LD_ADDR_VAR 0 6
2867: PUSH
2868: LD_EXP 10
2872: ST_TO_ADDR
// if bw_e > 0 then
2873: LD_VAR 0 5
2877: PUSH
2878: LD_INT 0
2880: GREATER
2881: IFFALSE 3130
// begin if bw_e = 1 or bw_e = 2 then
2883: LD_VAR 0 5
2887: PUSH
2888: LD_INT 1
2890: EQUAL
2891: PUSH
2892: LD_VAR 0 5
2896: PUSH
2897: LD_INT 2
2899: EQUAL
2900: OR
2901: IFFALSE 2913
// pocet = 1 else
2903: LD_ADDR_VAR 0 7
2907: PUSH
2908: LD_INT 1
2910: ST_TO_ADDR
2911: GO 2921
// pocet = 2 ;
2913: LD_ADDR_VAR 0 7
2917: PUSH
2918: LD_INT 2
2920: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2921: LD_ADDR_VAR 0 6
2925: PUSH
2926: LD_VAR 0 6
2930: PUSH
2931: LD_INT 1
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: LD_STRING 
2942: PPUSH
2943: CALL 16687 0 4
2947: ADD
2948: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2949: LD_ADDR_VAR 0 6
2953: PUSH
2954: LD_VAR 0 6
2958: PUSH
2959: LD_INT 1
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: LD_INT 2
2967: PPUSH
2968: LD_STRING 
2970: PPUSH
2971: CALL 16687 0 4
2975: ADD
2976: ST_TO_ADDR
// pom = FilterUnitsinArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
2977: LD_ADDR_VAR 0 2
2981: PUSH
2982: LD_INT 22
2984: PPUSH
2985: LD_INT 22
2987: PUSH
2988: LD_EXP 4
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 30
2999: PUSH
3000: LD_INT 31
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PPUSH
3011: CALL_OW 70
3015: ST_TO_ADDR
// if pocet >= 1 then
3016: LD_VAR 0 7
3020: PUSH
3021: LD_INT 1
3023: GREATEREQUAL
3024: IFFALSE 3073
// begin PlaceUnitXYR ( vojaci [ 1 ] , 129 , 39 , 5 , false ) ;
3026: LD_VAR 0 6
3030: PUSH
3031: LD_INT 1
3033: ARRAY
3034: PPUSH
3035: LD_INT 129
3037: PPUSH
3038: LD_INT 39
3040: PPUSH
3041: LD_INT 5
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 50
// ComEnterUnit ( vojaci [ 1 ] , pom [ 1 ] ) ;
3051: LD_VAR 0 6
3055: PUSH
3056: LD_INT 1
3058: ARRAY
3059: PPUSH
3060: LD_VAR 0 2
3064: PUSH
3065: LD_INT 1
3067: ARRAY
3068: PPUSH
3069: CALL_OW 120
// end ; if pocet = 2 then
3073: LD_VAR 0 7
3077: PUSH
3078: LD_INT 2
3080: EQUAL
3081: IFFALSE 3130
// begin PlaceUnitXYR ( vojaci [ 2 ] , 129 , 39 , 5 , false ) ;
3083: LD_VAR 0 6
3087: PUSH
3088: LD_INT 2
3090: ARRAY
3091: PPUSH
3092: LD_INT 129
3094: PPUSH
3095: LD_INT 39
3097: PPUSH
3098: LD_INT 5
3100: PPUSH
3101: LD_INT 0
3103: PPUSH
3104: CALL_OW 50
// ComEnterUnit ( vojaci [ 2 ] , pom [ 2 ] ) ;
3108: LD_VAR 0 6
3112: PUSH
3113: LD_INT 2
3115: ARRAY
3116: PPUSH
3117: LD_VAR 0 2
3121: PUSH
3122: LD_INT 2
3124: ARRAY
3125: PPUSH
3126: CALL_OW 120
// end ; end ; end ;
3130: LD_VAR 0 1
3134: RET
// export function vyber_characteru ; var pom ; var units_na_vyber ; var i ; var pocet ; var vyber ; var osurviv ; begin
3135: LD_INT 0
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
3143: PPUSH
// uc_side = You ;
3144: LD_ADDR_OWVAR 20
3148: PUSH
3149: LD_EXP 1
3153: ST_TO_ADDR
// uc_nation = nation_russian ;
3154: LD_ADDR_OWVAR 21
3158: PUSH
3159: LD_INT 3
3161: ST_TO_ADDR
// pocet = 3 ;
3162: LD_ADDR_VAR 0 5
3166: PUSH
3167: LD_INT 3
3169: ST_TO_ADDR
// units_na_vyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
3170: LD_ADDR_VAR 0 3
3174: PUSH
3175: LD_INT -4
3177: PUSH
3178: LD_INT -1
3180: PUSH
3181: LD_INT -6
3183: PUSH
3184: LD_EXP 29
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_change_class ] ;
3195: LD_ADDR_VAR 0 3
3199: PUSH
3200: LD_VAR 0 3
3204: PUSH
3205: LD_INT -5
3207: PUSH
3208: EMPTY
3209: LIST
3210: ADD
3211: ST_TO_ADDR
// if IsOK ( gny ) then
3212: LD_EXP 31
3216: PPUSH
3217: CALL_OW 302
3221: IFFALSE 3255
// begin SetSide ( gny , You ) ;
3223: LD_EXP 31
3227: PPUSH
3228: LD_EXP 1
3232: PPUSH
3233: CALL_OW 235
// units_na_vyber = units_na_vyber ^ gny end else
3237: LD_ADDR_VAR 0 3
3241: PUSH
3242: LD_VAR 0 3
3246: PUSH
3247: LD_EXP 31
3251: ADD
3252: ST_TO_ADDR
3253: GO 3269
// pocet = pocet + 1 ;
3255: LD_ADDR_VAR 0 5
3259: PUSH
3260: LD_VAR 0 5
3264: PUSH
3265: LD_INT 1
3267: PLUS
3268: ST_TO_ADDR
// if IsOK ( kov ) then
3269: LD_EXP 30
3273: PPUSH
3274: CALL_OW 302
3278: IFFALSE 3312
// begin SetSide ( kov , You ) ;
3280: LD_EXP 30
3284: PPUSH
3285: LD_EXP 1
3289: PPUSH
3290: CALL_OW 235
// units_na_vyber = units_na_vyber ^ kov end else
3294: LD_ADDR_VAR 0 3
3298: PUSH
3299: LD_VAR 0 3
3303: PUSH
3304: LD_EXP 30
3308: ADD
3309: ST_TO_ADDR
3310: GO 3326
// pocet = pocet + 1 ;
3312: LD_ADDR_VAR 0 5
3316: PUSH
3317: LD_VAR 0 5
3321: PUSH
3322: LD_INT 1
3324: PLUS
3325: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
3326: LD_ADDR_VAR 0 3
3330: PUSH
3331: LD_VAR 0 3
3335: PUSH
3336: LD_INT -2
3338: PUSH
3339: LD_INT -3
3341: PUSH
3342: LD_INT -5
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: ADD
3350: ST_TO_ADDR
// if IsOK ( bel ) then
3351: LD_EXP 32
3355: PPUSH
3356: CALL_OW 302
3360: IFFALSE 3392
// begin SetSide ( bel , You ) ;
3362: LD_EXP 32
3366: PPUSH
3367: LD_EXP 1
3371: PPUSH
3372: CALL_OW 235
// units_na_vyber = units_na_vyber ^ bel ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: LD_VAR 0 3
3385: PUSH
3386: LD_EXP 32
3390: ADD
3391: ST_TO_ADDR
// end ; osurviv = other_survivors_mise_2 ;
3392: LD_ADDR_VAR 0 7
3396: PUSH
3397: LD_EXP 71
3401: ST_TO_ADDR
// for i in osurviv do
3402: LD_ADDR_VAR 0 4
3406: PUSH
3407: LD_VAR 0 7
3411: PUSH
3412: FOR_IN
3413: IFFALSE 3431
// SetSide ( i , You ) ;
3415: LD_VAR 0 4
3419: PPUSH
3420: LD_EXP 1
3424: PPUSH
3425: CALL_OW 235
3429: GO 3412
3431: POP
3432: POP
// units_na_vyber = units_na_vyber ^ osurviv ;
3433: LD_ADDR_VAR 0 3
3437: PUSH
3438: LD_VAR 0 3
3442: PUSH
3443: LD_VAR 0 7
3447: ADD
3448: ST_TO_ADDR
// uc_side = You ;
3449: LD_ADDR_OWVAR 20
3453: PUSH
3454: LD_EXP 1
3458: ST_TO_ADDR
// uc_nation = nation_russian ;
3459: LD_ADDR_OWVAR 21
3463: PUSH
3464: LD_INT 3
3466: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_soldier , 2 ,  ) ;
3467: LD_ADDR_VAR 0 3
3471: PUSH
3472: LD_VAR 0 3
3476: PUSH
3477: CALL 16652 0 0
3481: PPUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 2
3487: PPUSH
3488: LD_STRING 
3490: PPUSH
3491: CALL 16687 0 4
3495: ADD
3496: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( sex_female , class_soldier , 3 ,  ) ;
3497: LD_ADDR_VAR 0 3
3501: PUSH
3502: LD_VAR 0 3
3506: PUSH
3507: LD_INT 2
3509: PPUSH
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 3
3515: PPUSH
3516: LD_STRING 
3518: PPUSH
3519: CALL 16687 0 4
3523: ADD
3524: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3525: LD_ADDR_VAR 0 3
3529: PUSH
3530: LD_VAR 0 3
3534: PUSH
3535: CALL 16652 0 0
3539: PPUSH
3540: LD_INT 2
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_STRING 
3548: PPUSH
3549: CALL 16687 0 4
3553: ADD
3554: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: LD_VAR 0 3
3564: PUSH
3565: CALL 16652 0 0
3569: PPUSH
3570: LD_INT 4
3572: PPUSH
3573: LD_INT 2
3575: PPUSH
3576: LD_STRING 
3578: PPUSH
3579: CALL 16687 0 4
3583: ADD
3584: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: LD_VAR 0 3
3594: PUSH
3595: CALL 16652 0 0
3599: PPUSH
3600: LD_INT 3
3602: PPUSH
3603: LD_INT 2
3605: PPUSH
3606: LD_STRING 
3608: PPUSH
3609: CALL 16687 0 4
3613: ADD
3614: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: LD_VAR 0 3
3624: PUSH
3625: CALL 16652 0 0
3629: PPUSH
3630: LD_INT 2
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: LD_STRING 
3638: PPUSH
3639: CALL 16687 0 4
3643: ADD
3644: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: LD_VAR 0 3
3654: PUSH
3655: CALL 16652 0 0
3659: PPUSH
3660: LD_INT 4
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: LD_STRING 
3668: PPUSH
3669: CALL 16687 0 4
3673: ADD
3674: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3675: LD_ADDR_VAR 0 3
3679: PUSH
3680: LD_VAR 0 3
3684: PUSH
3685: CALL 16652 0 0
3689: PPUSH
3690: LD_INT 3
3692: PPUSH
3693: LD_INT 2
3695: PPUSH
3696: LD_STRING 
3698: PPUSH
3699: CALL 16687 0 4
3703: ADD
3704: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet , pocet , units_na_vyber , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
3705: LD_ADDR_VAR 0 2
3709: PUSH
3710: LD_STRING Vyber si peopliky
3712: PPUSH
3713: LD_VAR 0 5
3717: PPUSH
3718: LD_VAR 0 5
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: LD_INT 2
3730: PUSH
3731: LD_INT 1
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 4
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: LD_INT 0
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 1
3760: PUSH
3761: LD_INT 0
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 42
3778: ST_TO_ADDR
// vyber = [ bur ] ;
3779: LD_ADDR_VAR 0 6
3783: PUSH
3784: LD_EXP 29
3788: PUSH
3789: EMPTY
3790: LIST
3791: ST_TO_ADDR
// if IsOK ( gny ) then
3792: LD_EXP 31
3796: PPUSH
3797: CALL_OW 302
3801: IFFALSE 3819
// vyber = vyber ^ gny ;
3803: LD_ADDR_VAR 0 6
3807: PUSH
3808: LD_VAR 0 6
3812: PUSH
3813: LD_EXP 31
3817: ADD
3818: ST_TO_ADDR
// if IsOK ( kov ) then
3819: LD_EXP 30
3823: PPUSH
3824: CALL_OW 302
3828: IFFALSE 3846
// vyber = vyber ^ kov ;
3830: LD_ADDR_VAR 0 6
3834: PUSH
3835: LD_VAR 0 6
3839: PUSH
3840: LD_EXP 30
3844: ADD
3845: ST_TO_ADDR
// vyber = vyber ^ pom ;
3846: LD_ADDR_VAR 0 6
3850: PUSH
3851: LD_VAR 0 6
3855: PUSH
3856: LD_VAR 0 2
3860: ADD
3861: ST_TO_ADDR
// manage_zbytek ( osurviv diff vyber ) ;
3862: LD_VAR 0 7
3866: PUSH
3867: LD_VAR 0 6
3871: DIFF
3872: PPUSH
3873: CALL 4107 0 1
// result := vyber ;
3877: LD_ADDR_VAR 0 1
3881: PUSH
3882: LD_VAR 0 6
3886: ST_TO_ADDR
// end ;
3887: LD_VAR 0 1
3891: RET
// export function placni_unity ( unity ) ; var i ; begin
3892: LD_INT 0
3894: PPUSH
3895: PPUSH
// for i in unity do
3896: LD_ADDR_VAR 0 3
3900: PUSH
3901: LD_VAR 0 1
3905: PUSH
3906: FOR_IN
3907: IFFALSE 3946
// begin SetSide ( i , You ) ;
3909: LD_VAR 0 3
3913: PPUSH
3914: LD_EXP 1
3918: PPUSH
3919: CALL_OW 235
// PlaceUnitXYR ( i , 99 , 73 , 5 , false ) ;
3923: LD_VAR 0 3
3927: PPUSH
3928: LD_INT 99
3930: PPUSH
3931: LD_INT 73
3933: PPUSH
3934: LD_INT 5
3936: PPUSH
3937: LD_INT 0
3939: PPUSH
3940: CALL_OW 50
// end ;
3944: GO 3906
3946: POP
3947: POP
// wait ( 0 0$0.5 ) ;
3948: LD_INT 18
3950: PPUSH
3951: CALL_OW 67
// SaveForQuickRestart ;
3955: CALL_OW 22
// end ;
3959: LD_VAR 0 2
3963: RET
// every 0 0$10 trigger stav_omikron < 3 do
3964: LD_EXP 39
3968: PUSH
3969: LD_INT 3
3971: LESS
3972: IFFALSE 4041
3974: GO 3976
3976: DISABLE
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
3977: LD_INT 50
3979: PPUSH
3980: LD_INT 4200
3982: PPUSH
3983: CALL_OW 12
3987: PPUSH
3988: CALL_OW 67
// wait ( konzervy_delay * 0 0$5 ) ;
3992: LD_LOC 16
3996: PUSH
3997: LD_INT 175
3999: MUL
4000: PPUSH
4001: CALL_OW 67
// konzervy_delay = konzervy_delay + 1 ;
4005: LD_ADDR_LOC 16
4009: PUSH
4010: LD_LOC 16
4014: PUSH
4015: LD_INT 1
4017: PLUS
4018: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4019: LD_INT 3
4021: PPUSH
4022: LD_INT 5
4024: PPUSH
4025: CALL_OW 12
4029: PPUSH
4030: LD_INT 7
4032: PPUSH
4033: LD_INT 1
4035: PPUSH
4036: CALL_OW 55
// enable ;
4040: ENABLE
// end ;
4041: END
// every 0 0$30 do
4042: GO 4044
4044: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4045: LD_INT 3
4047: PPUSH
4048: LD_INT 5
4050: PPUSH
4051: CALL_OW 12
4055: PPUSH
4056: LD_INT 7
4058: PPUSH
4059: LD_INT 1
4061: PPUSH
4062: CALL_OW 55
// end ;
4066: END
// every 1 1$20 do
4067: GO 4069
4069: DISABLE
// begin wait ( Rand ( 1 , 0 0$40 ) ) ;
4070: LD_INT 1
4072: PPUSH
4073: LD_INT 1400
4075: PPUSH
4076: CALL_OW 12
4080: PPUSH
4081: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 4 ) , konzervy_all , true ) ;
4085: LD_INT 1
4087: PPUSH
4088: LD_INT 4
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: LD_INT 25
4098: PPUSH
4099: LD_INT 1
4101: PPUSH
4102: CALL_OW 55
// end ;
4106: END
// function manage_zbytek ( lidi ) ; var i ; begin
4107: LD_INT 0
4109: PPUSH
4110: PPUSH
// for i in lidi do
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: LD_VAR 0 1
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4161
// begin SetSide ( i , You2 ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_EXP 2
4133: PPUSH
4134: CALL_OW 235
// PlaceUnitXYR ( i , 144 , 79 , 3 , false ) ;
4138: LD_VAR 0 3
4142: PPUSH
4143: LD_INT 144
4145: PPUSH
4146: LD_INT 79
4148: PPUSH
4149: LD_INT 3
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL_OW 50
// end ;
4159: GO 4121
4161: POP
4162: POP
// ComEnterUnit ( lidi , RU1_dep ) ;
4163: LD_VAR 0 1
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: CALL_OW 120
// end ; end_of_file
4175: LD_VAR 0 2
4179: RET
// export level_bw_e ; export schol_find_amikama ; export levely_amici ; export posily1 ; export posily11 ; export posily2 ; export posily3 ; export posily4 ; export utok_na_omikron ; export levely_ruske_posily ; export levely_am_budov ; export muze_projit_posil ; export muze_prezit_posil ; export BELKOV_SAVED ; export STAV_UTOKU ; export function set_difficulty ; begin
4180: LD_INT 0
4182: PPUSH
// BELKOV_SAVED = LoadVariable ( belkov_saved , 0 ) ;
4183: LD_ADDR_EXP 24
4187: PUSH
4188: LD_STRING belkov_saved
4190: PPUSH
4191: LD_INT 0
4193: PPUSH
4194: CALL_OW 30
4198: ST_TO_ADDR
// STAV_UTOKU = LoadVariable ( utok_stav , 3 ) ;
4199: LD_ADDR_EXP 25
4203: PUSH
4204: LD_STRING utok_stav
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: CALL_OW 30
4214: ST_TO_ADDR
// level_bw_e = [ 2 , 3 , 4 ] ;
4215: LD_ADDR_EXP 11
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: LD_INT 3
4225: PUSH
4226: LD_INT 4
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: ST_TO_ADDR
// schol_find_amikama = [ 11 11$0 , 9 9$0 , 7 7$0 ] ;
4234: LD_ADDR_EXP 12
4238: PUSH
4239: LD_INT 23100
4241: PUSH
4242: LD_INT 18900
4244: PUSH
4245: LD_INT 14700
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// levely_amici = [ 2 , 3 , 4 ] ;
4253: LD_ADDR_EXP 13
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: LD_INT 3
4263: PUSH
4264: LD_INT 4
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: ST_TO_ADDR
// posily1 = [ 13 13$00 , 11 11$00 , 10 10$00 ] ;
4272: LD_ADDR_EXP 14
4276: PUSH
4277: LD_INT 27300
4279: PUSH
4280: LD_INT 23100
4282: PUSH
4283: LD_INT 21000
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: ST_TO_ADDR
// posily11 = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
4291: LD_ADDR_EXP 15
4295: PUSH
4296: LD_INT 10500
4298: PUSH
4299: LD_INT 8400
4301: PUSH
4302: LD_INT 6300
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: LIST
4309: ST_TO_ADDR
// posily2 = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
4310: LD_ADDR_EXP 16
4314: PUSH
4315: LD_INT 21000
4317: PUSH
4318: LD_INT 16800
4320: PUSH
4321: LD_INT 10500
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: ST_TO_ADDR
// posily3 = [ 11 11$0 , 8 8$30 , 5 5$0 ] ;
4329: LD_ADDR_EXP 17
4333: PUSH
4334: LD_INT 23100
4336: PUSH
4337: LD_INT 17850
4339: PUSH
4340: LD_INT 10500
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: LIST
4347: ST_TO_ADDR
// posily4 = [ 8 8$0 , 7 7$0 , 5 5$0 ] ;
4348: LD_ADDR_EXP 18
4352: PUSH
4353: LD_INT 16800
4355: PUSH
4356: LD_INT 14700
4358: PUSH
4359: LD_INT 10500
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: LIST
4366: ST_TO_ADDR
// utok_na_omikron = [ 55 55$0 , 45 45$0 , 35 35$0 ] [ difficulty ] ;
4367: LD_ADDR_EXP 19
4371: PUSH
4372: LD_INT 115500
4374: PUSH
4375: LD_INT 94500
4377: PUSH
4378: LD_INT 73500
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_OWVAR 67
4390: ARRAY
4391: ST_TO_ADDR
// levely_ruske_posily = [ 4 , 3 , 2 ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: LD_INT 4
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: ST_TO_ADDR
// levely_am_budov = [ 0 , 1 , 2 ] ;
4411: LD_ADDR_EXP 21
4415: PUSH
4416: LD_INT 0
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: LD_INT 2
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: ST_TO_ADDR
// muze_projit_posil = [ 8 , 8 , 6 ] ;
4430: LD_ADDR_EXP 22
4434: PUSH
4435: LD_INT 8
4437: PUSH
4438: LD_INT 8
4440: PUSH
4441: LD_INT 6
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: ST_TO_ADDR
// muze_prezit_posil = [ 2 , 5 , 100 ] ;
4449: LD_ADDR_EXP 23
4453: PUSH
4454: LD_INT 2
4456: PUSH
4457: LD_INT 5
4459: PUSH
4460: LD_INT 100
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
4468: LD_ADDR_EXP 26
4472: PUSH
4473: LD_INT 0
4475: PUSH
4476: LD_STRING :
4478: PUSH
4479: LD_INT 0
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: ST_TO_ADDR
// end ;
4487: LD_VAR 0 1
4491: RET
// export cas ; every 0 0$10 do var pom ;
4492: GO 4494
4494: DISABLE
4495: LD_INT 0
4497: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
4498: LD_EXP 26
4502: PUSH
4503: LD_INT 3
4505: ARRAY
4506: PUSH
4507: LD_INT 10
4509: PLUS
4510: PUSH
4511: LD_INT 60
4513: EQUAL
4514: IFFALSE 4550
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
4516: LD_ADDR_EXP 26
4520: PUSH
4521: LD_EXP 26
4525: PUSH
4526: LD_INT 1
4528: ARRAY
4529: PUSH
4530: LD_INT 1
4532: PLUS
4533: PUSH
4534: LD_EXP 26
4538: PUSH
4539: LD_INT 2
4541: ARRAY
4542: ADD
4543: PUSH
4544: LD_INT 0
4546: ADD
4547: ST_TO_ADDR
4548: GO 4588
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
4550: LD_ADDR_EXP 26
4554: PUSH
4555: LD_EXP 26
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: PUSH
4564: LD_EXP 26
4568: PUSH
4569: LD_INT 2
4571: ARRAY
4572: ADD
4573: PUSH
4574: LD_EXP 26
4578: PUSH
4579: LD_INT 3
4581: ARRAY
4582: PUSH
4583: LD_INT 10
4585: PLUS
4586: ADD
4587: ST_TO_ADDR
// debug_strings = [ cas ] ;
4588: LD_ADDR_OWVAR 48
4592: PUSH
4593: LD_EXP 26
4597: PUSH
4598: EMPTY
4599: LIST
4600: ST_TO_ADDR
// enable ;
4601: ENABLE
// end ;
4602: PPOPN 1
4604: END
// export function pojmenovani_zakladen ; var pom ; begin
4605: LD_INT 0
4607: PPUSH
4608: PPUSH
// SetBName ( RU1_dep , kirov ) ;
4609: LD_INT 1
4611: PPUSH
4612: LD_STRING kirov
4614: PPUSH
4615: CALL_OW 500
// pom = FilterUnitsInArea ( Ru2_base , [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
4619: LD_ADDR_VAR 0 2
4623: PUSH
4624: LD_INT 2
4626: PPUSH
4627: LD_INT 22
4629: PUSH
4630: LD_EXP 1
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 30
4641: PUSH
4642: LD_INT 0
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PPUSH
4653: CALL_OW 70
4657: ST_TO_ADDR
// if pom > 0 then
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 0
4665: GREATER
4666: IFFALSE 4684
// SetBName ( pom [ 1 ] , beria ) ;
4668: LD_VAR 0 2
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PPUSH
4677: LD_STRING beria
4679: PPUSH
4680: CALL_OW 500
// SetBName ( Am_dep , omikron ) ;
4684: LD_INT 12
4686: PPUSH
4687: LD_STRING omikron
4689: PPUSH
4690: CALL_OW 500
// end ;
4694: LD_VAR 0 1
4698: RET
// export function pojmenovani_kaganoviche ( base ) ; begin
4699: LD_INT 0
4701: PPUSH
// SetBName ( base , kagan ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: LD_STRING kagan
4709: PPUSH
4710: CALL_OW 500
// end ; end_of_file
4714: LD_VAR 0 2
4718: RET
// export kur ; export pop ; export bur ; export kov ; export gny ; export bel ; export schol ; export schol2 ; export grishko ; export Rusi_enter ; export scholtze_saved ; export stav_aut ; export stav_omikron ; export RU_videl_oil ; var counter_zapnut ; export setkani_om ; var R_comp ; export Rusi_utekli ; export Rusi_save ; var dialog_probehnul ; var qrefuel_over ; export kecy_scholtze_nalezen ; export konec_counteru ; export stav_aut_new ; export postavenych_aut ; var TTime ; export special_time ; every 0 0$0.1 do var i ;
4719: GO 4721
4721: DISABLE
4722: LD_INT 0
4724: PPUSH
// begin schol = 0 ;
4725: LD_ADDR_EXP 33
4729: PUSH
4730: LD_INT 0
4732: ST_TO_ADDR
// scholtze_saved = false ;
4733: LD_ADDR_EXP 37
4737: PUSH
4738: LD_INT 0
4740: ST_TO_ADDR
// stav_omikron = 0 ;
4741: LD_ADDR_EXP 39
4745: PUSH
4746: LD_INT 0
4748: ST_TO_ADDR
// stav_aut = 0 ;
4749: LD_ADDR_EXP 38
4753: PUSH
4754: LD_INT 0
4756: ST_TO_ADDR
// RU_videl_oil = false ;
4757: LD_ADDR_EXP 40
4761: PUSH
4762: LD_INT 0
4764: ST_TO_ADDR
// counter_zapnut = false ;
4765: LD_ADDR_LOC 17
4769: PUSH
4770: LD_INT 0
4772: ST_TO_ADDR
// setkani_om = false ;
4773: LD_ADDR_EXP 41
4777: PUSH
4778: LD_INT 0
4780: ST_TO_ADDR
// R_comp = [ ] ;
4781: LD_ADDR_LOC 18
4785: PUSH
4786: EMPTY
4787: ST_TO_ADDR
// Rusi_utekli = [ ] ;
4788: LD_ADDR_EXP 42
4792: PUSH
4793: EMPTY
4794: ST_TO_ADDR
// Rusi_save = [ ] ;
4795: LD_ADDR_EXP 43
4799: PUSH
4800: EMPTY
4801: ST_TO_ADDR
// dialog_probehnul = false ;
4802: LD_ADDR_LOC 19
4806: PUSH
4807: LD_INT 0
4809: ST_TO_ADDR
// qrefuel_over = false ;
4810: LD_ADDR_LOC 20
4814: PUSH
4815: LD_INT 0
4817: ST_TO_ADDR
// kecy_scholtze_nalezen = false ;
4818: LD_ADDR_EXP 44
4822: PUSH
4823: LD_INT 0
4825: ST_TO_ADDR
// postavenych_aut = 0 ;
4826: LD_ADDR_EXP 47
4830: PUSH
4831: LD_INT 0
4833: ST_TO_ADDR
// TTime = 0 ;
4834: LD_ADDR_LOC 21
4838: PUSH
4839: LD_INT 0
4841: ST_TO_ADDR
// konec_counteru = false ;
4842: LD_ADDR_EXP 45
4846: PUSH
4847: LD_INT 0
4849: ST_TO_ADDR
// stav_aut_new = 0 ;
4850: LD_ADDR_EXP 46
4854: PUSH
4855: LD_INT 0
4857: ST_TO_ADDR
// special_time = false ;
4858: LD_ADDR_EXP 48
4862: PUSH
4863: LD_INT 0
4865: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 6 , 7 , 8 , 9 , 10 , 51 , 52 , 53 , 200 , 201 , 202 , 203 ] do
4866: LD_ADDR_VAR 0 1
4870: PUSH
4871: LD_INT 1
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: LD_INT 3
4879: PUSH
4880: LD_INT 6
4882: PUSH
4883: LD_INT 7
4885: PUSH
4886: LD_INT 8
4888: PUSH
4889: LD_INT 9
4891: PUSH
4892: LD_INT 10
4894: PUSH
4895: LD_INT 51
4897: PUSH
4898: LD_INT 52
4900: PUSH
4901: LD_INT 53
4903: PUSH
4904: LD_INT 200
4906: PUSH
4907: LD_INT 201
4909: PUSH
4910: LD_INT 202
4912: PUSH
4913: LD_INT 203
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: FOR_IN
4934: IFFALSE 4943
// disable ( i ) ;
4936: LD_VAR 0 1
4940: DISABLE_MARKED
4941: GO 4933
4943: POP
4944: POP
// end ;
4945: PPOPN 1
4947: END
// export function uklid_rusu ; begin
4948: LD_INT 0
4950: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
4951: LD_INT 42
4953: PPUSH
4954: LD_INT 3
4956: PPUSH
4957: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
4961: LD_INT 43
4963: PPUSH
4964: LD_INT 4
4966: PPUSH
4967: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab2 ) ;
4971: LD_INT 44
4973: PPUSH
4974: LD_INT 16
4976: PPUSH
4977: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab2 ) ;
4981: LD_INT 45
4983: PPUSH
4984: LD_INT 16
4986: PPUSH
4987: CALL_OW 120
// ComEnterUnit ( RU1_sci3 , RU1_lab2 ) ;
4991: LD_INT 46
4993: PPUSH
4994: LD_INT 16
4996: PPUSH
4997: CALL_OW 120
// ComEnterUnit ( RU1_sci4 , RU1_lab1 ) ;
5001: LD_INT 47
5003: PPUSH
5004: LD_INT 6
5006: PPUSH
5007: CALL_OW 120
// ComEnterUnit ( RU1_sci5 , RU1_lab1 ) ;
5011: LD_INT 48
5013: PPUSH
5014: LD_INT 6
5016: PPUSH
5017: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_fac ) ;
5021: LD_INT 49
5023: PPUSH
5024: LD_INT 5
5026: PPUSH
5027: CALL_OW 120
// ComEnterUnit ( RU1_me2 , RU1_fac ) ;
5031: LD_INT 50
5033: PPUSH
5034: LD_INT 5
5036: PPUSH
5037: CALL_OW 120
// ComEnterUnit ( RU1_me3 , RU1_fac ) ;
5041: LD_INT 51
5043: PPUSH
5044: LD_INT 5
5046: PPUSH
5047: CALL_OW 120
// ComEnterUnit ( pop , RU1_bar1 ) ;
5051: LD_EXP 28
5055: PPUSH
5056: LD_INT 2
5058: PPUSH
5059: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar1 ) ;
5063: LD_INT 52
5065: PPUSH
5066: LD_INT 2
5068: PPUSH
5069: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar1 ) ;
5073: LD_INT 53
5075: PPUSH
5076: LD_INT 2
5078: PPUSH
5079: CALL_OW 120
// ComEnterUnit ( RU1_sol3 , RU1_bar2 ) ;
5083: LD_INT 56
5085: PPUSH
5086: LD_INT 17
5088: PPUSH
5089: CALL_OW 120
// ComEnterUnit ( RU1_sol4 , RU1_bar2 ) ;
5093: LD_INT 54
5095: PPUSH
5096: LD_INT 17
5098: PPUSH
5099: CALL_OW 120
// ComEnterUnit ( RU1_sol5 , RU1_bar2 ) ;
5103: LD_INT 55
5105: PPUSH
5106: LD_INT 17
5108: PPUSH
5109: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
5113: LD_INT 57
5115: PPUSH
5116: LD_INT 1
5118: PPUSH
5119: CALL_OW 120
// end ;
5123: LD_VAR 0 1
5127: RET
// every 5 5$30 do var pom ;
5128: GO 5130
5130: DISABLE
5131: LD_INT 0
5133: PPUSH
// begin schol2 = create_scholtze ;
5134: LD_ADDR_EXP 34
5138: PUSH
5139: CALL 2279 0 0
5143: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5144: LD_INT 70
5146: PPUSH
5147: CALL_OW 67
// CenterNowOnUnits ( schol2 ) ;
5151: LD_EXP 34
5155: PPUSH
5156: CALL_OW 87
// dialog_scholtze_enter ;
5160: CALL 11490 0 0
// ComMoveToArea ( schol2 , scholze_flee ) ;
5164: LD_EXP 34
5168: PPUSH
5169: LD_INT 45
5171: PPUSH
5172: CALL_OW 113
// AddComHold ( schol2 ) ;
5176: LD_EXP 34
5180: PPUSH
5181: CALL_OW 200
// wait ( 0 0$5 ) ;
5185: LD_INT 175
5187: PPUSH
5188: CALL_OW 67
// amici_hlidka ;
5192: CALL 23679 0 0
// enable ( 1 ) ;
5196: LD_INT 1
5198: ENABLE_MARKED
// end ;
5199: PPOPN 1
5201: END
// every 0 0$1 trigger FilterUnitsInArea ( Schol_les , [ [ f_side , You ] ] ) > 0 marked 1 do
5202: LD_INT 26
5204: PPUSH
5205: LD_INT 22
5207: PUSH
5208: LD_EXP 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: PPUSH
5220: CALL_OW 70
5224: PUSH
5225: LD_INT 0
5227: GREATER
5228: IFFALSE 5302
5230: GO 5232
5232: DISABLE
// begin kecy_scholtze_nalezen = true ;
5233: LD_ADDR_EXP 44
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// dialog_scholtze_nalezen ;
5241: CALL 11562 0 0
// SetSide ( schol2 , You ) ;
5245: LD_EXP 34
5249: PPUSH
5250: LD_EXP 1
5254: PPUSH
5255: CALL_OW 235
// schol = schol2 ;
5259: LD_ADDR_EXP 33
5263: PUSH
5264: LD_EXP 34
5268: ST_TO_ADDR
// ChangeMissionObjectives ( MScholtzeOut ) ;
5269: LD_STRING MScholtzeOut
5271: PPUSH
5272: CALL_OW 337
// wait ( 1 1$0 ) ;
5276: LD_INT 2100
5278: PPUSH
5279: CALL_OW 67
// if IsLive ( schol ) then
5283: LD_EXP 33
5287: PPUSH
5288: CALL_OW 300
5292: IFFALSE 5302
// scholtze_saved = true ;
5294: LD_ADDR_EXP 37
5298: PUSH
5299: LD_INT 1
5301: ST_TO_ADDR
// end ;
5302: END
// every 1 1$0 do
5303: GO 5305
5305: DISABLE
// begin if GetResourceType ( GetBase ( RU1_dep ) , mat_oil ) < 50 then
5306: LD_INT 1
5308: PPUSH
5309: CALL_OW 274
5313: PPUSH
5314: LD_INT 2
5316: PPUSH
5317: CALL_OW 275
5321: PUSH
5322: LD_INT 50
5324: LESS
5325: IFFALSE 5345
// AddResourceType ( GetBase ( RU1_dep ) , mat_oil , 100 ) ;
5327: LD_INT 1
5329: PPUSH
5330: CALL_OW 274
5334: PPUSH
5335: LD_INT 2
5337: PPUSH
5338: LD_INT 100
5340: PPUSH
5341: CALL_OW 276
// enable ;
5345: ENABLE
// end ;
5346: END
// every 1 1$7 do
5347: GO 5349
5349: DISABLE
// begin if Researched ( You2 , tech_Weap1 ) then
5350: LD_EXP 2
5354: PPUSH
5355: LD_INT 51
5357: PPUSH
5358: CALL_OW 325
5362: IFFALSE 5389
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5364: LD_INT 51
5366: PPUSH
5367: LD_EXP 2
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5379: LD_INT 6
5381: PPUSH
5382: LD_INT 51
5384: PPUSH
5385: CALL_OW 124
// end ; enable ;
5389: ENABLE
// end ;
5390: END
// every 0 0$19 do
5391: GO 5393
5393: DISABLE
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5394: LD_INT 51
5396: PPUSH
5397: LD_EXP 2
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5409: LD_INT 6
5411: PPUSH
5412: LD_INT 51
5414: PPUSH
5415: CALL_OW 124
// end ;
5419: END
// every 0 0$5 trigger stav_omikron = 2 do
5420: LD_EXP 39
5424: PUSH
5425: LD_INT 2
5427: EQUAL
5428: IFFALSE 5471
5430: GO 5432
5432: DISABLE
// begin TTime = 7 7$0 ;
5433: LD_ADDR_LOC 21
5437: PUSH
5438: LD_INT 14700
5440: ST_TO_ADDR
// enable ( 53 ) ;
5441: LD_INT 53
5443: ENABLE_MARKED
// wait ( 7 7$0 ) ;
5444: LD_INT 14700
5446: PPUSH
5447: CALL_OW 67
// special_time = true ;
5451: LD_ADDR_EXP 48
5455: PUSH
5456: LD_INT 1
5458: ST_TO_ADDR
// hlaska_omicron ;
5459: CALL 13159 0 0
// stav_omikron = 3 ;
5463: LD_ADDR_EXP 39
5467: PUSH
5468: LD_INT 3
5470: ST_TO_ADDR
// end ;
5471: END
// export function popov_ven ; var i ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
// for i = 1 to 8 do
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_INT 8
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5508
// DoNotAttack ( i , pop ) ;
5492: LD_VAR 0 2
5496: PPUSH
5497: LD_EXP 28
5501: PPUSH
5502: CALL_OW 471
5506: GO 5489
5508: POP
5509: POP
// while IsInUnit ( pop ) > 0 do
5510: LD_EXP 28
5514: PPUSH
5515: CALL_OW 310
5519: PUSH
5520: LD_INT 0
5522: GREATER
5523: IFFALSE 5590
// begin case GetType ( IsInUnit ( pop ) ) of unit_building :
5525: LD_EXP 28
5529: PPUSH
5530: CALL_OW 310
5534: PPUSH
5535: CALL_OW 247
5539: PUSH
5540: LD_INT 3
5542: DOUBLE
5543: EQUAL
5544: IFTRUE 5548
5546: GO 5560
5548: POP
// ComExitBuilding ( pop ) ; unit_vehicle :
5549: LD_EXP 28
5553: PPUSH
5554: CALL_OW 122
5558: GO 5581
5560: LD_INT 2
5562: DOUBLE
5563: EQUAL
5564: IFTRUE 5568
5566: GO 5580
5568: POP
// ComExitVehicle ( pop ) ; end ;
5569: LD_EXP 28
5573: PPUSH
5574: CALL_OW 121
5578: GO 5581
5580: POP
// wait ( 0 0$0.5 ) ;
5581: LD_INT 18
5583: PPUSH
5584: CALL_OW 67
// end ;
5588: GO 5510
// AddComMoveToArea ( pop , bst_2 ) ;
5590: LD_EXP 28
5594: PPUSH
5595: LD_INT 41
5597: PPUSH
5598: CALL_OW 173
// AddComMoveToArea ( pop , bst_3 ) ;
5602: LD_EXP 28
5606: PPUSH
5607: LD_INT 42
5609: PPUSH
5610: CALL_OW 173
// AddComHold ( pop ) ;
5614: LD_EXP 28
5618: PPUSH
5619: CALL_OW 200
// end ;
5623: LD_VAR 0 1
5627: RET
// every 0 0$5 trigger IsInArea ( pop , Exit_area ) do
5628: LD_EXP 28
5632: PPUSH
5633: LD_INT 16
5635: PPUSH
5636: CALL_OW 308
5640: IFFALSE 5654
5642: GO 5644
5644: DISABLE
// begin RemoveUnit ( pop ) ;
5645: LD_EXP 28
5649: PPUSH
5650: CALL_OW 64
// end ;
5654: END
// export function prebarveni_druhe_baze ; var pom , i ; begin
5655: LD_INT 0
5657: PPUSH
5658: PPUSH
5659: PPUSH
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You3 ] , [ f_type , unit_building ] ] ) ;
5660: LD_ADDR_VAR 0 2
5664: PUSH
5665: LD_INT 2
5667: PPUSH
5668: LD_INT 22
5670: PUSH
5671: LD_EXP 3
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 3
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 70
5698: ST_TO_ADDR
// for i in pom do
5699: LD_ADDR_VAR 0 3
5703: PUSH
5704: LD_VAR 0 2
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5728
// SetSide ( i , You ) ;
5712: LD_VAR 0 3
5716: PPUSH
5717: LD_EXP 1
5721: PPUSH
5722: CALL_OW 235
5726: GO 5709
5728: POP
5729: POP
// end ;
5730: LD_VAR 0 1
5734: RET
// export function pomoc_pro_omikroni_utok ; var i ; begin
5735: LD_INT 0
5737: PPUSH
5738: PPUSH
// for i in RUSKE_POSILY_NA_OMICRON_LIST do
5739: LD_ADDR_VAR 0 2
5743: PUSH
5744: LD_EXP 56
5748: PUSH
5749: FOR_IN
5750: IFFALSE 5769
// PlaceUnitArea ( i , Enterposil , false ) ;
5752: LD_VAR 0 2
5756: PPUSH
5757: LD_INT 49
5759: PPUSH
5760: LD_INT 0
5762: PPUSH
5763: CALL_OW 49
5767: GO 5749
5769: POP
5770: POP
// ComMoveToArea ( RUSKE_POSILY_NA_OMICRON_LIST , bst_4 ) ;
5771: LD_EXP 56
5775: PPUSH
5776: LD_INT 43
5778: PPUSH
5779: CALL_OW 113
// for i in RUSKE_POSILY_RIDICI_LIST do
5783: LD_ADDR_VAR 0 2
5787: PUSH
5788: LD_EXP 57
5792: PUSH
5793: FOR_IN
5794: IFFALSE 5813
// PlaceUnitArea ( i , Arabi1 , false ) ;
5796: LD_VAR 0 2
5800: PPUSH
5801: LD_INT 12
5803: PPUSH
5804: LD_INT 0
5806: PPUSH
5807: CALL_OW 49
5811: GO 5793
5813: POP
5814: POP
// ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , bst_1 ) ;
5815: LD_EXP 57
5819: PPUSH
5820: LD_INT 40
5822: PPUSH
5823: CALL_OW 113
// AddComEnterUnit ( RUSKE_POSILY_RIDICI_LIST , RU1_fac ) ;
5827: LD_EXP 57
5831: PPUSH
5832: LD_INT 5
5834: PPUSH
5835: CALL_OW 180
// end ;
5839: LD_VAR 0 1
5843: RET
// every 0 0$1 trigger stav_omikron = 3 and not special_time do
5844: LD_EXP 39
5848: PUSH
5849: LD_INT 3
5851: EQUAL
5852: PUSH
5853: LD_EXP 48
5857: NOT
5858: AND
5859: IFFALSE 5893
5861: GO 5863
5863: DISABLE
// begin disable ( 53 ) ;
5864: LD_INT 53
5866: DISABLE_MARKED
// TTime = 3 3$0 ;
5867: LD_ADDR_LOC 21
5871: PUSH
5872: LD_INT 6300
5874: ST_TO_ADDR
// enable ( 51 ) ;
5875: LD_INT 51
5877: ENABLE_MARKED
// counter_zapnut = true ;
5878: LD_ADDR_LOC 17
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// posli_ruske_posily ;
5886: CALL 6393 0 0
// enable ( 3 ) ;
5890: LD_INT 3
5892: ENABLE_MARKED
// end ;
5893: END
// every 0 0$1 trigger stav_omikron = 3 and special_time do
5894: LD_EXP 39
5898: PUSH
5899: LD_INT 3
5901: EQUAL
5902: PUSH
5903: LD_EXP 48
5907: AND
5908: IFFALSE 5942
5910: GO 5912
5912: DISABLE
// begin disable ( 53 ) ;
5913: LD_INT 53
5915: DISABLE_MARKED
// TTime = 2 2$0 ;
5916: LD_ADDR_LOC 21
5920: PUSH
5921: LD_INT 4200
5923: ST_TO_ADDR
// enable ( 51 ) ;
5924: LD_INT 51
5926: ENABLE_MARKED
// counter_zapnut = true ;
5927: LD_ADDR_LOC 17
5931: PUSH
5932: LD_INT 1
5934: ST_TO_ADDR
// posli_ruske_posily ;
5935: CALL 6393 0 0
// enable ( 3 ) ;
5939: LD_INT 3
5941: ENABLE_MARKED
// end ;
5942: END
// every 0 0$3 trigger stav_omikron = 3 do var i , pom , pom1 , pom2 , rpom ; var rusi_enter_new ; var poc ;
5943: LD_EXP 39
5947: PUSH
5948: LD_INT 3
5950: EQUAL
5951: IFFALSE 6145
5953: GO 5955
5955: DISABLE
5956: LD_INT 0
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
5963: PPUSH
5964: PPUSH
// begin if FilterUnitsInArea ( Om_zone , [ [ f_side , You ] ] ) then
5965: LD_INT 8
5967: PPUSH
5968: LD_INT 22
5970: PUSH
5971: LD_EXP 1
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: PUSH
5980: EMPTY
5981: LIST
5982: PPUSH
5983: CALL_OW 70
5987: IFFALSE 6144
// begin rpom = FilterUnitsExceptArea ( Om_pom1 , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
5989: LD_ADDR_VAR 0 5
5993: PUSH
5994: LD_INT 23
5996: PPUSH
5997: LD_INT 22
5999: PUSH
6000: LD_EXP 1
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PUSH
6009: LD_INT 21
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PPUSH
6023: CALL_OW 71
6027: ST_TO_ADDR
// if rpom = 0 then
6028: LD_VAR 0 5
6032: PUSH
6033: LD_INT 0
6035: EQUAL
6036: IFFALSE 6141
// begin disable ( 51 ) ;
6038: LD_INT 51
6040: DISABLE_MARKED
// disable ( 52 ) ;
6041: LD_INT 52
6043: DISABLE_MARKED
// konec_counteru = true ;
6044: LD_ADDR_EXP 45
6048: PUSH
6049: LD_INT 1
6051: ST_TO_ADDR
// poc = 0 ;
6052: LD_ADDR_VAR 0 7
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// while FilterUnitsInArea ( Om_zone , [ [ f_side , You2 ] ] ) = 0 and poc < 60 do
6060: LD_INT 8
6062: PPUSH
6063: LD_INT 22
6065: PUSH
6066: LD_EXP 2
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: PPUSH
6078: CALL_OW 70
6082: PUSH
6083: LD_INT 0
6085: EQUAL
6086: PUSH
6087: LD_VAR 0 7
6091: PUSH
6092: LD_INT 60
6094: LESS
6095: AND
6096: IFFALSE 6121
// begin wait ( 0 0$1 ) ;
6098: LD_INT 35
6100: PPUSH
6101: CALL_OW 67
// poc = poc + 1 ;
6105: LD_ADDR_VAR 0 7
6109: PUSH
6110: LD_VAR 0 7
6114: PUSH
6115: LD_INT 1
6117: PLUS
6118: ST_TO_ADDR
// end ;
6119: GO 6060
// stav_omikron = 4 ;
6121: LD_ADDR_EXP 39
6125: PUSH
6126: LD_INT 4
6128: ST_TO_ADDR
// dialog_pred_omicronem ;
6129: CALL 13242 0 0
// enable ( 9 ) ;
6133: LD_INT 9
6135: ENABLE_MARKED
// disable ( 3 ) ;
6136: LD_INT 3
6138: DISABLE_MARKED
// end else
6139: GO 6142
// enable ;
6141: ENABLE
// end else
6142: GO 6145
// enable ;
6144: ENABLE
// end ;
6145: PPOPN 7
6147: END
// export function CheckVehicles ; var pom , pom1 , pom2 ; begin
6148: LD_INT 0
6150: PPUSH
6151: PPUSH
6152: PPUSH
6153: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6154: LD_ADDR_VAR 0 2
6158: PUSH
6159: LD_INT 22
6161: PUSH
6162: LD_EXP 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 21
6173: PUSH
6174: LD_INT 2
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
6190: LD_ADDR_VAR 0 3
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_EXP 1
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 21
6209: PUSH
6210: LD_INT 1
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: LD_INT 51
6219: PUSH
6220: EMPTY
6221: LIST
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: PPUSH
6228: CALL_OW 69
6232: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Ru2_base , [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
6233: LD_ADDR_VAR 0 4
6237: PUSH
6238: LD_INT 2
6240: PPUSH
6241: LD_INT 22
6243: PUSH
6244: LD_EXP 2
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 21
6255: PUSH
6256: LD_INT 2
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: CALL_OW 70
6271: ST_TO_ADDR
// pom = pom + pom2 ;
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_VAR 0 2
6281: PUSH
6282: LD_VAR 0 4
6286: PLUS
6287: ST_TO_ADDR
// if pom < pom1 then
6288: LD_VAR 0 2
6292: PUSH
6293: LD_VAR 0 3
6297: LESS
6298: IFFALSE 6308
// stav_aut_new = 3 ;
6300: LD_ADDR_EXP 46
6304: PUSH
6305: LD_INT 3
6307: ST_TO_ADDR
// if pom = pom1 then
6308: LD_VAR 0 2
6312: PUSH
6313: LD_VAR 0 3
6317: EQUAL
6318: IFFALSE 6328
// stav_aut_new = 2 ;
6320: LD_ADDR_EXP 46
6324: PUSH
6325: LD_INT 2
6327: ST_TO_ADDR
// if pom > pom1 and KurinAddTime = 0 then
6328: LD_VAR 0 2
6332: PUSH
6333: LD_VAR 0 3
6337: GREATER
6338: PUSH
6339: LD_EXP 7
6343: PUSH
6344: LD_INT 0
6346: EQUAL
6347: AND
6348: IFFALSE 6358
// stav_aut_new = 1 ;
6350: LD_ADDR_EXP 46
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// if pom >= pom1 and KurinAddTime = 1 then
6358: LD_VAR 0 2
6362: PUSH
6363: LD_VAR 0 3
6367: GREATEREQUAL
6368: PUSH
6369: LD_EXP 7
6373: PUSH
6374: LD_INT 1
6376: EQUAL
6377: AND
6378: IFFALSE 6388
// stav_aut_new = 2 ;
6380: LD_ADDR_EXP 46
6384: PUSH
6385: LD_INT 2
6387: ST_TO_ADDR
// end ;
6388: LD_VAR 0 1
6392: RET
// function posli_ruske_posily ; begin
6393: LD_INT 0
6395: PPUSH
// McMove ( 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , [ [ 109 , 54 ] , [ 102 , 38 ] , [ 90 , 22 ] , [ 54 , 10 ] ] , [ mc_move_dontcapture ] ) ;
6396: LD_INT 1
6398: PPUSH
6399: LD_INT 22
6401: PUSH
6402: LD_INT 6
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 21
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PPUSH
6423: CALL_OW 69
6427: PPUSH
6428: LD_INT 109
6430: PUSH
6431: LD_INT 54
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 102
6440: PUSH
6441: LD_INT 38
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 90
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 54
6460: PUSH
6461: LD_INT 10
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PPUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: PPUSH
6480: CALL_OW 398
// end ;
6484: LD_VAR 0 1
6488: RET
// every 0 0$7 marked 2 do var i , k , pom ;
6489: GO 6491
6491: DISABLE
6492: LD_INT 0
6494: PPUSH
6495: PPUSH
6496: PPUSH
// begin ComExitBuilding ( RUSKE_POSILY_RIDICI_LIST ) ;
6497: LD_EXP 57
6501: PPUSH
6502: CALL_OW 122
// while FilterUnitsInArea ( RU2_base , [ [ f_side , You2 ] ] ) < RUSKE_POSILY_RIDICI_LIST do
6506: LD_INT 2
6508: PPUSH
6509: LD_INT 22
6511: PUSH
6512: LD_EXP 2
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: PPUSH
6524: CALL_OW 70
6528: PUSH
6529: LD_EXP 57
6533: LESS
6534: IFFALSE 6557
// begin ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , drivers_enter ) ;
6536: LD_EXP 57
6540: PPUSH
6541: LD_INT 47
6543: PPUSH
6544: CALL_OW 113
// wait ( 0 0$1 ) ;
6548: LD_INT 35
6550: PPUSH
6551: CALL_OW 67
// end ;
6555: GO 6506
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_not , [ f_occupied ] ] ] ) ;
6557: LD_ADDR_VAR 0 3
6561: PUSH
6562: LD_INT 2
6564: PPUSH
6565: LD_INT 22
6567: PUSH
6568: LD_EXP 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 21
6579: PUSH
6580: LD_INT 2
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: LD_INT 59
6592: PUSH
6593: EMPTY
6594: LIST
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: PPUSH
6605: CALL_OW 70
6609: ST_TO_ADDR
// if not pom then
6610: LD_VAR 0 3
6614: NOT
6615: IFFALSE 6621
// konec_mise_lhani ;
6617: CALL 1410 0 0
// if pom < RUSKE_POSILY_RIDICI_LIST then
6621: LD_VAR 0 3
6625: PUSH
6626: LD_EXP 57
6630: LESS
6631: IFFALSE 6645
// k := pom else
6633: LD_ADDR_VAR 0 2
6637: PUSH
6638: LD_VAR 0 3
6642: ST_TO_ADDR
6643: GO 6655
// k := RUSKE_POSILY_RIDICI_LIST ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 57
6654: ST_TO_ADDR
// for i = 1 to k do
6655: LD_ADDR_VAR 0 1
6659: PUSH
6660: DOUBLE
6661: LD_INT 1
6663: DEC
6664: ST_TO_ADDR
6665: LD_VAR 0 2
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6722
// begin ComEnterUnit ( RUSKE_POSILY_RIDICI_LIST [ i ] , pom [ i ] ) ;
6673: LD_EXP 57
6677: PUSH
6678: LD_VAR 0 1
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 3
6688: PUSH
6689: LD_VAR 0 1
6693: ARRAY
6694: PPUSH
6695: CALL_OW 120
// AddComMoveXY ( RUSKE_POSILY_RIDICI_LIST [ i ] , 60 , 13 ) ;
6699: LD_EXP 57
6703: PUSH
6704: LD_VAR 0 1
6708: ARRAY
6709: PPUSH
6710: LD_INT 60
6712: PPUSH
6713: LD_INT 13
6715: PPUSH
6716: CALL_OW 171
// end ;
6720: GO 6670
6722: POP
6723: POP
// end ;
6724: PPOPN 3
6726: END
// every 0 0$1 marked 3 do
6727: GO 6729
6729: DISABLE
// begin if special_time then
6730: LD_EXP 48
6734: IFFALSE 6745
// wait ( 2 2$0 ) else
6736: LD_INT 4200
6738: PPUSH
6739: CALL_OW 67
6743: GO 6752
// wait ( 3 3$0 ) ;
6745: LD_INT 6300
6747: PPUSH
6748: CALL_OW 67
// if not setkani_om then
6752: LD_EXP 41
6756: NOT
6757: IFFALSE 6795
// begin dialog_upoz ;
6759: CALL 15550 0 0
// TTime = 2 2$0 ;
6763: LD_ADDR_LOC 21
6767: PUSH
6768: LD_INT 4200
6770: ST_TO_ADDR
// disable ( 51 ) ;
6771: LD_INT 51
6773: DISABLE_MARKED
// enable ( 52 ) ;
6774: LD_INT 52
6776: ENABLE_MARKED
// wait ( 2 2$0 ) ;
6777: LD_INT 4200
6779: PPUSH
6780: CALL_OW 67
// if not setkani_om then
6784: LD_EXP 41
6788: NOT
6789: IFFALSE 6795
// konec_pred_omikronem ;
6791: CALL 1429 0 0
// end ; end ;
6795: END
// every 0 0$1 marked 4 do var pom ;
6796: GO 6798
6798: DISABLE
6799: LD_INT 0
6801: PPUSH
// begin wait ( utok_na_omikron - 5 5$0 ) ;
6802: LD_EXP 19
6806: PUSH
6807: LD_INT 10500
6809: MINUS
6810: PPUSH
6811: CALL_OW 67
// pomoc_pro_omikroni_utok ;
6815: CALL 5735 0 0
// wait ( 5 5$0 ) ;
6819: LD_INT 10500
6821: PPUSH
6822: CALL_OW 67
// disable ( 5 ) ;
6826: LD_INT 5
6828: DISABLE_MARKED
// if dialog_probehnul then
6829: LD_LOC 19
6833: IFFALSE 6839
// exit else
6835: GO 6947
6837: GO 6847
// dialog_probehnul := true ;
6839: LD_ADDR_LOC 19
6843: PUSH
6844: LD_INT 1
6846: ST_TO_ADDR
// pom = dialog_otazka_poctu_aut ;
6847: LD_ADDR_VAR 0 1
6851: PUSH
6852: CALL 12948 0 0
6856: ST_TO_ADDR
// case pom of 1 :
6857: LD_VAR 0 1
6861: PUSH
6862: LD_INT 1
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6892
6870: POP
// begin stav_omikron = 3 ;
6871: LD_ADDR_EXP 39
6875: PUSH
6876: LD_INT 3
6878: ST_TO_ADDR
// stav_aut = 1 ;
6879: LD_ADDR_EXP 38
6883: PUSH
6884: LD_INT 1
6886: ST_TO_ADDR
// enable ( 2 ) ;
6887: LD_INT 2
6889: ENABLE_MARKED
// end ; 2 :
6890: GO 6947
6892: LD_INT 2
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 6919
6900: POP
// begin stav_omikron = 3 ;
6901: LD_ADDR_EXP 39
6905: PUSH
6906: LD_INT 3
6908: ST_TO_ADDR
// stav_aut = 2 ;
6909: LD_ADDR_EXP 38
6913: PUSH
6914: LD_INT 2
6916: ST_TO_ADDR
// end ; 3 :
6917: GO 6947
6919: LD_INT 3
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6946
6927: POP
// begin stav_omikron = 2 ;
6928: LD_ADDR_EXP 39
6932: PUSH
6933: LD_INT 2
6935: ST_TO_ADDR
// stav_aut = 3 ;
6936: LD_ADDR_EXP 38
6940: PUSH
6941: LD_INT 3
6943: ST_TO_ADDR
// end ; end ;
6944: GO 6947
6946: POP
// end ;
6947: PPOPN 1
6949: END
// every 0 0$17 trigger stav_omikron < 2 marked 5 do var un , veh ;
6950: LD_EXP 39
6954: PUSH
6955: LD_INT 2
6957: LESS
6958: IFFALSE 7190
6960: GO 6962
6962: DISABLE
6963: LD_INT 0
6965: PPUSH
6966: PPUSH
// begin un = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
6967: LD_ADDR_VAR 0 1
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_EXP 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PPUSH
6998: CALL_OW 69
7002: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7003: LD_ADDR_VAR 0 2
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_EXP 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 69
7038: ST_TO_ADDR
// if veh >= ( un + 2 ) then
7039: LD_VAR 0 2
7043: PUSH
7044: LD_VAR 0 1
7048: PUSH
7049: LD_INT 2
7051: PLUS
7052: GREATEREQUAL
7053: IFFALSE 7189
// begin disable ( 4 ) ;
7055: LD_INT 4
7057: DISABLE_MARKED
// pomoc_pro_omikroni_utok ;
7058: CALL 5735 0 0
// if dialog_probehnul then
7062: LD_LOC 19
7066: IFFALSE 7072
// exit else
7068: GO 7190
7070: GO 7080
// dialog_probehnul = true ;
7072: LD_ADDR_LOC 19
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7080: LD_INT 350
7082: PPUSH
7083: CALL_OW 67
// un = dialog_otazka_poctu_aut ;
7087: LD_ADDR_VAR 0 1
7091: PUSH
7092: CALL 12948 0 0
7096: ST_TO_ADDR
// case un of 1 :
7097: LD_VAR 0 1
7101: PUSH
7102: LD_INT 1
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7132
7110: POP
// begin stav_omikron = 3 ;
7111: LD_ADDR_EXP 39
7115: PUSH
7116: LD_INT 3
7118: ST_TO_ADDR
// stav_aut = 1 ;
7119: LD_ADDR_EXP 38
7123: PUSH
7124: LD_INT 1
7126: ST_TO_ADDR
// enable ( 2 ) ;
7127: LD_INT 2
7129: ENABLE_MARKED
// end ; 2 :
7130: GO 7187
7132: LD_INT 2
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7140
7138: GO 7159
7140: POP
// begin stav_omikron = 3 ;
7141: LD_ADDR_EXP 39
7145: PUSH
7146: LD_INT 3
7148: ST_TO_ADDR
// stav_aut = 2 ;
7149: LD_ADDR_EXP 38
7153: PUSH
7154: LD_INT 2
7156: ST_TO_ADDR
// end ; 3 :
7157: GO 7187
7159: LD_INT 3
7161: DOUBLE
7162: EQUAL
7163: IFTRUE 7167
7165: GO 7186
7167: POP
// begin stav_omikron = 2 ;
7168: LD_ADDR_EXP 39
7172: PUSH
7173: LD_INT 2
7175: ST_TO_ADDR
// stav_aut = 3 ;
7176: LD_ADDR_EXP 38
7180: PUSH
7181: LD_INT 3
7183: ST_TO_ADDR
// end ; end ;
7184: GO 7187
7186: POP
// end else
7187: GO 7190
// enable ;
7189: ENABLE
// end ;
7190: PPOPN 2
7192: END
// export function manage_ruske_computery_zpet ; var pom ; begin
7193: LD_INT 0
7195: PPUSH
7196: PPUSH
// disable ( 200 ) ;
7197: LD_INT 200
7199: DISABLE_MARKED
// disable ( 201 ) ;
7200: LD_INT 201
7202: DISABLE_MARKED
// disable ( 202 ) ;
7203: LD_INT 202
7205: DISABLE_MARKED
// disable ( 203 ) ;
7206: LD_INT 203
7208: DISABLE_MARKED
// pom = FilterUnitsInArea ( Am_base , [ [ F_side , You2 ] ] ) ;
7209: LD_ADDR_VAR 0 2
7213: PUSH
7214: LD_INT 6
7216: PPUSH
7217: LD_INT 22
7219: PUSH
7220: LD_EXP 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: PPUSH
7232: CALL_OW 70
7236: ST_TO_ADDR
// McMove ( 2 , pom , [ [ 42 , 14 ] , [ 60 , 15 ] , [ 95 , 21 ] , [ 100 , 34 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7237: LD_INT 2
7239: PPUSH
7240: LD_VAR 0 2
7244: PPUSH
7245: LD_INT 42
7247: PUSH
7248: LD_INT 14
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 60
7257: PUSH
7258: LD_INT 15
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 95
7267: PUSH
7268: LD_INT 21
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 100
7277: PUSH
7278: LD_INT 34
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PPUSH
7291: LD_INT 6
7293: PUSH
7294: LD_INT 1
7296: PUSH
7297: LD_INT 3
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PPUSH
7305: CALL_OW 398
// enable ( 5 ) ;
7309: LD_INT 5
7311: ENABLE_MARKED
// R_comp = pom ;
7312: LD_ADDR_LOC 18
7316: PUSH
7317: LD_VAR 0 2
7321: ST_TO_ADDR
// end ;
7322: LD_VAR 0 1
7326: RET
// every 0 0$15 marked 5 do
7327: GO 7329
7329: DISABLE
// begin wait ( 1 1$0 ) ;
7330: LD_INT 2100
7332: PPUSH
7333: CALL_OW 67
// McMove ( 1 , R_comp , [ [ 110 , 59 ] , [ 129 , 75 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7337: LD_INT 1
7339: PPUSH
7340: LD_LOC 18
7344: PPUSH
7345: LD_INT 110
7347: PUSH
7348: LD_INT 59
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 129
7357: PUSH
7358: LD_INT 75
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PPUSH
7369: LD_INT 6
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 398
// end ;
7387: END
// function split_ruske_jednotky ( jedn ) ; var i , pom ; var p1 , p2 , p3 , p4 ; var a ; begin
7388: LD_INT 0
7390: PPUSH
7391: PPUSH
7392: PPUSH
7393: PPUSH
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
// p1 = [ ] ;
7398: LD_ADDR_VAR 0 5
7402: PUSH
7403: EMPTY
7404: ST_TO_ADDR
// p2 = [ ] ;
7405: LD_ADDR_VAR 0 6
7409: PUSH
7410: EMPTY
7411: ST_TO_ADDR
// p3 = [ ] ;
7412: LD_ADDR_VAR 0 7
7416: PUSH
7417: EMPTY
7418: ST_TO_ADDR
// p4 = [ ] ;
7419: LD_ADDR_VAR 0 8
7423: PUSH
7424: EMPTY
7425: ST_TO_ADDR
// for i in jedn do
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: FOR_IN
7437: IFFALSE 7571
// begin pom = Rand ( 1 , 4 ) ;
7439: LD_ADDR_VAR 0 4
7443: PUSH
7444: LD_INT 1
7446: PPUSH
7447: LD_INT 4
7449: PPUSH
7450: CALL_OW 12
7454: ST_TO_ADDR
// case pom of 1 :
7455: LD_VAR 0 4
7459: PUSH
7460: LD_INT 1
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7487
7468: POP
// p1 = p1 ^ i ; 2 :
7469: LD_ADDR_VAR 0 5
7473: PUSH
7474: LD_VAR 0 5
7478: PUSH
7479: LD_VAR 0 3
7483: ADD
7484: ST_TO_ADDR
7485: GO 7569
7487: LD_INT 2
7489: DOUBLE
7490: EQUAL
7491: IFTRUE 7495
7493: GO 7514
7495: POP
// p2 = p2 ^ i ; 3 :
7496: LD_ADDR_VAR 0 6
7500: PUSH
7501: LD_VAR 0 6
7505: PUSH
7506: LD_VAR 0 3
7510: ADD
7511: ST_TO_ADDR
7512: GO 7569
7514: LD_INT 3
7516: DOUBLE
7517: EQUAL
7518: IFTRUE 7522
7520: GO 7541
7522: POP
// p3 = p3 ^ i ; 4 :
7523: LD_ADDR_VAR 0 7
7527: PUSH
7528: LD_VAR 0 7
7532: PUSH
7533: LD_VAR 0 3
7537: ADD
7538: ST_TO_ADDR
7539: GO 7569
7541: LD_INT 4
7543: DOUBLE
7544: EQUAL
7545: IFTRUE 7549
7547: GO 7568
7549: POP
// p4 = p4 ^ i ; end ;
7550: LD_ADDR_VAR 0 8
7554: PUSH
7555: LD_VAR 0 8
7559: PUSH
7560: LD_VAR 0 3
7564: ADD
7565: ST_TO_ADDR
7566: GO 7569
7568: POP
// end ;
7569: GO 7436
7571: POP
7572: POP
// a = [ p1 , p2 , p3 , p4 ] ;
7573: LD_ADDR_VAR 0 9
7577: PUSH
7578: LD_VAR 0 5
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_VAR 0 7
7592: PUSH
7593: LD_VAR 0 8
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: ST_TO_ADDR
// result := a ;
7604: LD_ADDR_VAR 0 2
7608: PUSH
7609: LD_VAR 0 9
7613: ST_TO_ADDR
// end ;
7614: LD_VAR 0 2
7618: RET
// every 0 0$1 marked 6 do var pom , i ;
7619: GO 7621
7621: DISABLE
7622: LD_INT 0
7624: PPUSH
7625: PPUSH
// begin pom = FilterUnitsInArea ( RU_odber , [ [ f_side , You2 ] ] ) ;
7626: LD_ADDR_VAR 0 1
7630: PUSH
7631: LD_INT 27
7633: PPUSH
7634: LD_INT 22
7636: PUSH
7637: LD_EXP 2
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: PPUSH
7649: CALL_OW 70
7653: ST_TO_ADDR
// if pom > 0 then
7654: LD_VAR 0 1
7658: PUSH
7659: LD_INT 0
7661: GREATER
7662: IFFALSE 7706
// begin Rusi_utekli = Rusi_utekli ^ pom ;
7664: LD_ADDR_EXP 42
7668: PUSH
7669: LD_EXP 42
7673: PUSH
7674: LD_VAR 0 1
7678: ADD
7679: ST_TO_ADDR
// for i in pom do
7680: LD_ADDR_VAR 0 2
7684: PUSH
7685: LD_VAR 0 1
7689: PUSH
7690: FOR_IN
7691: IFFALSE 7704
// RemoveUnit ( i ) ;
7693: LD_VAR 0 2
7697: PPUSH
7698: CALL_OW 64
7702: GO 7690
7704: POP
7705: POP
// end ; enable ;
7706: ENABLE
// end ;
7707: PPOPN 2
7709: END
// every 25 25$0 do var i , pom ;
7710: GO 7712
7712: DISABLE
7713: LD_INT 0
7715: PPUSH
7716: PPUSH
// begin for i in RU_posily_na_utek do
7717: LD_ADDR_VAR 0 1
7721: PUSH
7722: LD_EXP 58
7726: PUSH
7727: FOR_IN
7728: IFFALSE 7747
// PlaceUnitArea ( i , Ru_posily , false ) ;
7730: LD_VAR 0 1
7734: PPUSH
7735: LD_INT 28
7737: PPUSH
7738: LD_INT 0
7740: PPUSH
7741: CALL_OW 49
7745: GO 7727
7747: POP
7748: POP
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_type , unit_vehicle ] ] ) ;
7749: LD_ADDR_VAR 0 2
7753: PUSH
7754: LD_EXP 58
7758: PPUSH
7759: LD_INT 21
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: EMPTY
7770: LIST
7771: PPUSH
7772: CALL_OW 72
7776: ST_TO_ADDR
// ComMoveXY ( pom , 155 , 93 ) ;
7777: LD_VAR 0 2
7781: PPUSH
7782: LD_INT 155
7784: PPUSH
7785: LD_INT 93
7787: PPUSH
7788: CALL_OW 111
// Rusi_save = pom ;
7792: LD_ADDR_EXP 43
7796: PUSH
7797: LD_VAR 0 2
7801: ST_TO_ADDR
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_soldier ] ] ) ;
7802: LD_ADDR_VAR 0 2
7806: PUSH
7807: LD_EXP 58
7811: PPUSH
7812: LD_INT 25
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_bar2 ) ;
7830: LD_VAR 0 2
7834: PPUSH
7835: LD_INT 17
7837: PPUSH
7838: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_mechanic ] ] ) ;
7842: LD_ADDR_VAR 0 2
7846: PUSH
7847: LD_EXP 58
7851: PPUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 3
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: PPUSH
7865: CALL_OW 72
7869: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_fac ) ;
7870: LD_VAR 0 2
7874: PPUSH
7875: LD_INT 5
7877: PPUSH
7878: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_engineer ] ] ) ;
7882: LD_ADDR_VAR 0 2
7886: PUSH
7887: LD_EXP 58
7891: PPUSH
7892: LD_INT 25
7894: PUSH
7895: LD_INT 2
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: PPUSH
7905: CALL_OW 72
7909: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_dep ) ;
7910: LD_VAR 0 2
7914: PPUSH
7915: LD_INT 1
7917: PPUSH
7918: CALL_OW 120
// Rusi_save = Rusi_save ^ [ RU1_sol1 , RU1_me3 , Ru1_sci2 , RU1_sci5 , RU1_sci3 , RU1_sol5 , RU1_eng1 ] ;
7922: LD_ADDR_EXP 43
7926: PUSH
7927: LD_EXP 43
7931: PUSH
7932: LD_INT 52
7934: PUSH
7935: LD_INT 51
7937: PUSH
7938: LD_INT 45
7940: PUSH
7941: LD_INT 48
7943: PUSH
7944: LD_INT 46
7946: PUSH
7947: LD_INT 55
7949: PUSH
7950: LD_INT 57
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: ADD
7962: ST_TO_ADDR
// end ;
7963: PPOPN 2
7965: END
// export function posli_rusy_pryc ; var pom ; begin
7966: LD_INT 0
7968: PPUSH
7969: PPUSH
// SetLives ( Rusi_save , 800 ) ;
7970: LD_EXP 43
7974: PPUSH
7975: LD_INT 800
7977: PPUSH
7978: CALL_OW 234
// pom = split_ruske_jednotky ( Rusi_save ) ;
7982: LD_ADDR_VAR 0 2
7986: PUSH
7987: LD_EXP 43
7991: PPUSH
7992: CALL 7388 0 1
7996: ST_TO_ADDR
// ComExitBuilding ( Rusi_save ) ;
7997: LD_EXP 43
8001: PPUSH
8002: CALL_OW 122
// AddComMoveXY ( pom [ 1 ] , 110 , 45 ) ;
8006: LD_VAR 0 2
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_INT 110
8017: PPUSH
8018: LD_INT 45
8020: PPUSH
8021: CALL_OW 171
// AddComMoveXY ( pom [ 2 ] , 103 , 60 ) ;
8025: LD_VAR 0 2
8029: PUSH
8030: LD_INT 2
8032: ARRAY
8033: PPUSH
8034: LD_INT 103
8036: PPUSH
8037: LD_INT 60
8039: PPUSH
8040: CALL_OW 171
// AddComMoveXY ( pom [ 3 ] , 76 , 80 ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 3
8051: ARRAY
8052: PPUSH
8053: LD_INT 76
8055: PPUSH
8056: LD_INT 80
8058: PPUSH
8059: CALL_OW 171
// AddComMoveXY ( pom [ 4 ] , 53 , 1 ) ;
8063: LD_VAR 0 2
8067: PUSH
8068: LD_INT 4
8070: ARRAY
8071: PPUSH
8072: LD_INT 53
8074: PPUSH
8075: LD_INT 1
8077: PPUSH
8078: CALL_OW 171
// end ;
8082: LD_VAR 0 1
8086: RET
// export function posli_lidi_zpet_omicron ; var pom ; var pom1 , i ; begin
8087: LD_INT 0
8089: PPUSH
8090: PPUSH
8091: PPUSH
8092: PPUSH
// pom1 = [ ] ;
8093: LD_ADDR_VAR 0 3
8097: PUSH
8098: EMPTY
8099: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_building ] , [ f_side , You ] ] ) ;
8100: LD_ADDR_VAR 0 2
8104: PUSH
8105: LD_INT 20
8107: PPUSH
8108: LD_INT 21
8110: PUSH
8111: LD_INT 3
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 22
8120: PUSH
8121: LD_EXP 1
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PPUSH
8134: CALL_OW 70
8138: ST_TO_ADDR
// for i in pom do
8139: LD_ADDR_VAR 0 4
8143: PUSH
8144: LD_VAR 0 2
8148: PUSH
8149: FOR_IN
8150: IFFALSE 8175
// pom1 = pom1 ^ UnitsInside ( i ) ;
8152: LD_ADDR_VAR 0 3
8156: PUSH
8157: LD_VAR 0 3
8161: PUSH
8162: LD_VAR 0 4
8166: PPUSH
8167: CALL_OW 313
8171: ADD
8172: ST_TO_ADDR
8173: GO 8149
8175: POP
8176: POP
// ComExitBuilding ( pom1 ) ;
8177: LD_VAR 0 3
8181: PPUSH
8182: CALL_OW 122
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , You ] ] ) ;
8186: LD_ADDR_VAR 0 2
8190: PUSH
8191: LD_INT 20
8193: PPUSH
8194: LD_INT 21
8196: PUSH
8197: LD_INT 1
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 22
8206: PUSH
8207: LD_EXP 1
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PPUSH
8220: CALL_OW 70
8224: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
8225: LD_ADDR_VAR 0 3
8229: PUSH
8230: LD_VAR 0 3
8234: PUSH
8235: LD_VAR 0 2
8239: ADD
8240: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , You ] ] ) ;
8241: LD_ADDR_VAR 0 2
8245: PUSH
8246: LD_INT 20
8248: PPUSH
8249: LD_INT 21
8251: PUSH
8252: LD_INT 2
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 22
8261: PUSH
8262: LD_EXP 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 70
8279: ST_TO_ADDR
// for i in pom do
8280: LD_ADDR_VAR 0 4
8284: PUSH
8285: LD_VAR 0 2
8289: PUSH
8290: FOR_IN
8291: IFFALSE 8343
// begin pom1 = pom ^ i ;
8293: LD_ADDR_VAR 0 3
8297: PUSH
8298: LD_VAR 0 2
8302: PUSH
8303: LD_VAR 0 4
8307: ADD
8308: ST_TO_ADDR
// if IsDrivenBy ( i ) then
8309: LD_VAR 0 4
8313: PPUSH
8314: CALL_OW 311
8318: IFFALSE 8341
// pom1 = pom1 ^ IsDrivenBy ( i ) ;
8320: LD_ADDR_VAR 0 3
8324: PUSH
8325: LD_VAR 0 3
8329: PUSH
8330: LD_VAR 0 4
8334: PPUSH
8335: CALL_OW 311
8339: ADD
8340: ST_TO_ADDR
// end ;
8341: GO 8290
8343: POP
8344: POP
// SetSide ( pom1 , You3 ) ;
8345: LD_VAR 0 3
8349: PPUSH
8350: LD_EXP 3
8354: PPUSH
8355: CALL_OW 235
// pom = FilterUnitsInArea ( Om_ven_1 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_INT 29
8366: PPUSH
8367: LD_INT 22
8369: PUSH
8370: LD_EXP 3
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 2
8381: PUSH
8382: LD_INT 21
8384: PUSH
8385: LD_INT 2
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 21
8394: PUSH
8395: LD_INT 1
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 70
8415: ST_TO_ADDR
// ComMoveXY ( pom , 79 , 16 ) ;
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_INT 79
8423: PPUSH
8424: LD_INT 16
8426: PPUSH
8427: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_2 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8431: LD_ADDR_VAR 0 2
8435: PUSH
8436: LD_INT 30
8438: PPUSH
8439: LD_INT 22
8441: PUSH
8442: LD_EXP 3
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 2
8453: PUSH
8454: LD_INT 21
8456: PUSH
8457: LD_INT 2
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 21
8466: PUSH
8467: LD_INT 1
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PPUSH
8483: CALL_OW 70
8487: ST_TO_ADDR
// ComMoveXY ( pom , 67 , 40 ) ;
8488: LD_VAR 0 2
8492: PPUSH
8493: LD_INT 67
8495: PPUSH
8496: LD_INT 40
8498: PPUSH
8499: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_3 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: LD_INT 31
8510: PPUSH
8511: LD_INT 22
8513: PUSH
8514: LD_EXP 3
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: LD_INT 21
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 21
8538: PUSH
8539: LD_INT 1
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 70
8559: ST_TO_ADDR
// ComMoveXY ( pom , 58 , 52 ) ;
8560: LD_VAR 0 2
8564: PPUSH
8565: LD_INT 58
8567: PPUSH
8568: LD_INT 52
8570: PPUSH
8571: CALL_OW 111
// end ;
8575: LD_VAR 0 1
8579: RET
// export function get_lidi_popov_area ; var pom , i ; var drv ; var a ; begin
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
// a = [ ] ;
8587: LD_ADDR_VAR 0 5
8591: PUSH
8592: EMPTY
8593: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
8594: LD_ADDR_VAR 0 2
8598: PUSH
8599: LD_INT 15
8601: PPUSH
8602: LD_INT 22
8604: PUSH
8605: LD_EXP 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 21
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 70
8632: ST_TO_ADDR
// a = pom ;
8633: LD_ADDR_VAR 0 5
8637: PUSH
8638: LD_VAR 0 2
8642: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: LD_INT 15
8650: PPUSH
8651: LD_INT 22
8653: PUSH
8654: LD_EXP 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 21
8665: PUSH
8666: LD_INT 2
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 70
8681: ST_TO_ADDR
// for i in pom do
8682: LD_ADDR_VAR 0 3
8686: PUSH
8687: LD_VAR 0 2
8691: PUSH
8692: FOR_IN
8693: IFFALSE 8751
// begin drv = IsDrivenBy ( i ) ;
8695: LD_ADDR_VAR 0 4
8699: PUSH
8700: LD_VAR 0 3
8704: PPUSH
8705: CALL_OW 311
8709: ST_TO_ADDR
// if ( not ( drv in a ) ) and ( drv <> 0 ) then
8710: LD_VAR 0 4
8714: PUSH
8715: LD_VAR 0 5
8719: IN
8720: NOT
8721: PUSH
8722: LD_VAR 0 4
8726: PUSH
8727: LD_INT 0
8729: NONEQUAL
8730: AND
8731: IFFALSE 8749
// a = a ^ drv ;
8733: LD_ADDR_VAR 0 5
8737: PUSH
8738: LD_VAR 0 5
8742: PUSH
8743: LD_VAR 0 4
8747: ADD
8748: ST_TO_ADDR
// end ;
8749: GO 8692
8751: POP
8752: POP
// result := a ;
8753: LD_ADDR_VAR 0 1
8757: PUSH
8758: LD_VAR 0 5
8762: ST_TO_ADDR
// end ;
8763: LD_VAR 0 1
8767: RET
// export function totalni_ukonceni_mise_v_ingame_videu ; var pom ; begin
8768: LD_INT 0
8770: PPUSH
8771: PPUSH
// InGameOn ;
8772: CALL_OW 8
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8776: LD_ADDR_VAR 0 2
8780: PUSH
8781: LD_INT 22
8783: PUSH
8784: LD_EXP 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: LD_INT 21
8798: PUSH
8799: LD_INT 2
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8830: LD_INT 10
8832: PPUSH
8833: LD_VAR 0 2
8837: PPUSH
8838: LD_INT 108
8840: PUSH
8841: LD_INT 70
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 77
8850: PUSH
8851: LD_INT 65
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 53
8860: PUSH
8861: LD_INT 63
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 40
8870: PUSH
8871: LD_INT 64
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 51
8880: PUSH
8881: LD_INT 97
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: PPUSH
8895: LD_INT 10
8897: PUSH
8898: LD_INT 5
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PPUSH
8905: CALL_OW 398
// pom = FilterAllUnits ( [ [ f_side , You2 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_EXP 2
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 2
8928: PUSH
8929: LD_INT 21
8931: PUSH
8932: LD_INT 2
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 21
8941: PUSH
8942: LD_INT 1
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 69
8962: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8963: LD_INT 10
8965: PPUSH
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 108
8973: PUSH
8974: LD_INT 70
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 77
8983: PUSH
8984: LD_INT 65
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: LD_INT 53
8993: PUSH
8994: LD_INT 63
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 40
9003: PUSH
9004: LD_INT 64
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 51
9013: PUSH
9014: LD_INT 97
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: LD_INT 10
9030: PUSH
9031: LD_INT 5
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 398
// enable ( 7 ) ;
9042: LD_INT 7
9044: ENABLE_MARKED
// wait ( 0 0$10 ) ;
9045: LD_INT 350
9047: PPUSH
9048: CALL_OW 67
// InGameOff ;
9052: CALL_OW 9
// konec_mise ;
9056: CALL 1459 0 0
// end ;
9060: LD_VAR 0 1
9064: RET
// export function schovej_kurina ; begin
9065: LD_INT 0
9067: PPUSH
// ComEnterUnit ( kur , RU1_dep ) ;
9068: LD_EXP 27
9072: PPUSH
9073: LD_INT 1
9075: PPUSH
9076: CALL_OW 120
// end ;
9080: LD_VAR 0 1
9084: RET
// export function posli_kurina_na_smrt ; begin
9085: LD_INT 0
9087: PPUSH
// ComExitBuilding ( kur ) ;
9088: LD_EXP 27
9092: PPUSH
9093: CALL_OW 122
// end ;
9097: LD_VAR 0 1
9101: RET
// every 0 0$2 do var pom ; var i ;
9102: GO 9104
9104: DISABLE
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
// begin pom = FilterUnitsExceptArea ( Om_ven , [ [ f_side , You3 ] ] ) ;
9109: LD_ADDR_VAR 0 1
9113: PUSH
9114: LD_INT 20
9116: PPUSH
9117: LD_INT 22
9119: PUSH
9120: LD_EXP 3
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: EMPTY
9130: LIST
9131: PPUSH
9132: CALL_OW 71
9136: ST_TO_ADDR
// for i in pom do
9137: LD_ADDR_VAR 0 2
9141: PUSH
9142: LD_VAR 0 1
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9211
// begin if GetType ( i ) = unit_vehicle then
9150: LD_VAR 0 2
9154: PPUSH
9155: CALL_OW 247
9159: PUSH
9160: LD_INT 2
9162: EQUAL
9163: IFFALSE 9195
// if IsDrivenBy ( i ) then
9165: LD_VAR 0 2
9169: PPUSH
9170: CALL_OW 311
9174: IFFALSE 9195
// SetSide ( IsDrivenBy ( i ) , You ) ;
9176: LD_VAR 0 2
9180: PPUSH
9181: CALL_OW 311
9185: PPUSH
9186: LD_EXP 1
9190: PPUSH
9191: CALL_OW 235
// SetSide ( i , You ) ;
9195: LD_VAR 0 2
9199: PPUSH
9200: LD_EXP 1
9204: PPUSH
9205: CALL_OW 235
// end ;
9209: GO 9147
9211: POP
9212: POP
// enable ;
9213: ENABLE
// end ;
9214: PPOPN 2
9216: END
// every 0 0$1 marked 9 do var i ; var ridici ; var mcm ;
9217: GO 9219
9219: DISABLE
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
// begin if FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) then
9225: LD_INT 56
9227: PPUSH
9228: LD_INT 22
9230: PUSH
9231: LD_INT 1
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 70
9242: IFFALSE 9283
// for i in FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) do
9244: LD_ADDR_VAR 0 1
9248: PUSH
9249: LD_INT 56
9251: PPUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 70
9266: PUSH
9267: FOR_IN
9268: IFFALSE 9281
// RemoveUnit ( i ) ;
9270: LD_VAR 0 1
9274: PPUSH
9275: CALL_OW 64
9279: GO 9267
9281: POP
9282: POP
// ridici = [ ] ;
9283: LD_ADDR_VAR 0 2
9287: PUSH
9288: EMPTY
9289: ST_TO_ADDR
// for i in RUSI_CERPACI_AUTA_LIST do
9290: LD_ADDR_VAR 0 1
9294: PUSH
9295: LD_EXP 59
9299: PUSH
9300: FOR_IN
9301: IFFALSE 9341
// begin PlaceUnitArea ( i , cargoSpawn , false ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 55
9310: PPUSH
9311: LD_INT 0
9313: PPUSH
9314: CALL_OW 49
// ridici = ridici ^ IsDrivenBy ( i ) ;
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_VAR 0 2
9327: PUSH
9328: LD_VAR 0 1
9332: PPUSH
9333: CALL_OW 311
9337: ADD
9338: ST_TO_ADDR
// end ;
9339: GO 9300
9341: POP
9342: POP
// mcm = McMove ( 10 , RUSI_CERPACI_AUTA_LIST , [ [ 130 , 75 ] , [ 112 , 59 ] , [ 106 , 32 ] , [ 91 , 21 ] , [ 62 , 9 ] ] , [ mc_move_waitwp ] ) ;
9343: LD_ADDR_VAR 0 3
9347: PUSH
9348: LD_INT 10
9350: PPUSH
9351: LD_EXP 59
9355: PPUSH
9356: LD_INT 130
9358: PUSH
9359: LD_INT 75
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 112
9368: PUSH
9369: LD_INT 59
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 106
9378: PUSH
9379: LD_INT 32
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 91
9388: PUSH
9389: LD_INT 21
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 62
9398: PUSH
9399: LD_INT 9
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: LD_INT 3
9415: PUSH
9416: EMPTY
9417: LIST
9418: PPUSH
9419: CALL_OW 398
9423: ST_TO_ADDR
// while UnitFilter ( RUSI_CERPACI_AUTA_LIST , [ [ f_inarea , benzina ] ] ) <> RUSI_CERPACI_AUTA_LIST do
9424: LD_EXP 59
9428: PPUSH
9429: LD_INT 95
9431: PUSH
9432: LD_INT 48
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: PPUSH
9442: CALL_OW 72
9446: PUSH
9447: LD_EXP 59
9451: NONEQUAL
9452: IFFALSE 9487
// begin KillMc ( mcm ) ;
9454: LD_VAR 0 3
9458: PPUSH
9459: CALL_OW 387
// wait ( 0 0$2 ) ;
9463: LD_INT 70
9465: PPUSH
9466: CALL_OW 67
// ComMoveXY ( RUSI_CERPACI_AUTA_LIST , 62 , 9 ) ;
9470: LD_EXP 59
9474: PPUSH
9475: LD_INT 62
9477: PPUSH
9478: LD_INT 9
9480: PPUSH
9481: CALL_OW 111
// end ;
9485: GO 9424
// hint_cerpaci_auta ;
9487: CALL 16637 0 0
// ComExitVehicle ( ridici ) ;
9491: LD_VAR 0 2
9495: PPUSH
9496: CALL_OW 121
// AddComAgressiveMove ( ridici , 45 , 6 ) ;
9500: LD_VAR 0 2
9504: PPUSH
9505: LD_INT 45
9507: PPUSH
9508: LD_INT 6
9510: PPUSH
9511: CALL_OW 174
// AddComAgressiveMove ( ridici , 15 , 10 ) ;
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_INT 15
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 174
// AddComAttackUnit ( ridici , Am_dep ) ;
9530: LD_VAR 0 2
9534: PPUSH
9535: LD_INT 12
9537: PPUSH
9538: CALL_OW 175
// end ;
9542: PPOPN 3
9544: END
// every 0 0$2 do var pom , i ; var ridic ;
9545: GO 9547
9547: DISABLE
9548: LD_INT 0
9550: PPUSH
9551: PPUSH
9552: PPUSH
// begin pom = FilterUnitsInArea ( Cauta , [ [ f_side , You2 ] , [ f_weapon , ru_cargo_bay ] ] ) ;
9553: LD_ADDR_VAR 0 1
9557: PUSH
9558: LD_INT 39
9560: PPUSH
9561: LD_INT 22
9563: PUSH
9564: LD_EXP 2
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 34
9575: PUSH
9576: LD_INT 51
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PPUSH
9587: CALL_OW 70
9591: ST_TO_ADDR
// if pom > 0 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_INT 0
9599: GREATER
9600: IFFALSE 9621
// begin if not qrefuel_over then
9602: LD_LOC 20
9606: NOT
9607: IFFALSE 9621
// begin qrefuel_over = true ;
9609: LD_ADDR_LOC 20
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// query_refuel ;
9617: CALL 16555 0 0
// end ; end ; for i in pom do
9621: LD_ADDR_VAR 0 2
9625: PUSH
9626: LD_VAR 0 1
9630: PUSH
9631: FOR_IN
9632: IFFALSE 9686
// if IsDrivenBy ( i ) then
9634: LD_VAR 0 2
9638: PPUSH
9639: CALL_OW 311
9643: IFFALSE 9684
// begin ridic = IsDrivenBy ( i ) ;
9645: LD_ADDR_VAR 0 3
9649: PUSH
9650: LD_VAR 0 2
9654: PPUSH
9655: CALL_OW 311
9659: ST_TO_ADDR
// ComExitVehicle ( ridic ) ;
9660: LD_VAR 0 3
9664: PPUSH
9665: CALL_OW 121
// AddComAgressiveMove ( ridic , 21 , 14 ) ;
9669: LD_VAR 0 3
9673: PPUSH
9674: LD_INT 21
9676: PPUSH
9677: LD_INT 14
9679: PPUSH
9680: CALL_OW 174
// end ;
9684: GO 9631
9686: POP
9687: POP
// enable ;
9688: ENABLE
// end ;
9689: PPOPN 3
9691: END
// on VehicleConstructed ( v , fact ) do begin if GetSide ( fact ) = 3 then
9692: LD_VAR 0 2
9696: PPUSH
9697: CALL_OW 255
9701: PUSH
9702: LD_INT 3
9704: EQUAL
9705: IFFALSE 9721
// postavenych_aut = postavenych_aut + 1 ;
9707: LD_ADDR_EXP 47
9711: PUSH
9712: LD_EXP 47
9716: PUSH
9717: LD_INT 1
9719: PLUS
9720: ST_TO_ADDR
// if GetSide ( fact ) = 6 then
9721: LD_VAR 0 2
9725: PPUSH
9726: CALL_OW 255
9730: PUSH
9731: LD_INT 6
9733: EQUAL
9734: IFFALSE 9751
// ComMoveXY ( v , 125 , 70 ) ;
9736: LD_VAR 0 1
9740: PPUSH
9741: LD_INT 125
9743: PPUSH
9744: LD_INT 70
9746: PPUSH
9747: CALL_OW 111
// end ;
9751: PPOPN 2
9753: END
// every 0 0$1 marked 51 do
9754: GO 9756
9756: DISABLE
// begin if konec_counteru then
9757: LD_EXP 45
9761: IFFALSE 9772
// begin display_strings = [ ] ;
9763: LD_ADDR_OWVAR 47
9767: PUSH
9768: EMPTY
9769: ST_TO_ADDR
// exit ;
9770: GO 9823
// end ; display_strings = [ #Ru03-1 , TTime ] ;
9772: LD_ADDR_OWVAR 47
9776: PUSH
9777: LD_STRING #Ru03-1
9779: PUSH
9780: LD_LOC 21
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9789: LD_ADDR_LOC 21
9793: PUSH
9794: LD_LOC 21
9798: PUSH
9799: LD_INT 35
9801: MINUS
9802: ST_TO_ADDR
// if TTime > 0 then
9803: LD_LOC 21
9807: PUSH
9808: LD_INT 0
9810: GREATER
9811: IFFALSE 9816
// enable else
9813: ENABLE
9814: GO 9823
// display_strings = [ ] ;
9816: LD_ADDR_OWVAR 47
9820: PUSH
9821: EMPTY
9822: ST_TO_ADDR
// end ;
9823: END
// every 0 0$1 marked 52 do
9824: GO 9826
9826: DISABLE
// begin if konec_counteru then
9827: LD_EXP 45
9831: IFFALSE 9842
// begin display_strings = [ ] ;
9833: LD_ADDR_OWVAR 47
9837: PUSH
9838: EMPTY
9839: ST_TO_ADDR
// exit ;
9840: GO 9893
// end ; display_strings = [ #Ru03-2 , TTime ] ;
9842: LD_ADDR_OWVAR 47
9846: PUSH
9847: LD_STRING #Ru03-2
9849: PUSH
9850: LD_LOC 21
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9859: LD_ADDR_LOC 21
9863: PUSH
9864: LD_LOC 21
9868: PUSH
9869: LD_INT 35
9871: MINUS
9872: ST_TO_ADDR
// if TTime > 0 then
9873: LD_LOC 21
9877: PUSH
9878: LD_INT 0
9880: GREATER
9881: IFFALSE 9886
// enable else
9883: ENABLE
9884: GO 9893
// display_strings = [ ] ;
9886: LD_ADDR_OWVAR 47
9890: PUSH
9891: EMPTY
9892: ST_TO_ADDR
// end ;
9893: END
// every 0 0$1 marked 53 do
9894: GO 9896
9896: DISABLE
// begin if konec_counteru then
9897: LD_EXP 45
9901: IFFALSE 9912
// begin display_strings = [ ] ;
9903: LD_ADDR_OWVAR 47
9907: PUSH
9908: EMPTY
9909: ST_TO_ADDR
// exit ;
9910: GO 9963
// end ; display_strings = [ #Ru03-3 , TTime ] ;
9912: LD_ADDR_OWVAR 47
9916: PUSH
9917: LD_STRING #Ru03-3
9919: PUSH
9920: LD_LOC 21
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9929: LD_ADDR_LOC 21
9933: PUSH
9934: LD_LOC 21
9938: PUSH
9939: LD_INT 35
9941: MINUS
9942: ST_TO_ADDR
// if TTime > 0 then
9943: LD_LOC 21
9947: PUSH
9948: LD_INT 0
9950: GREATER
9951: IFFALSE 9956
// enable else
9953: ENABLE
9954: GO 9963
// display_strings = [ ] ;
9956: LD_ADDR_OWVAR 47
9960: PUSH
9961: EMPTY
9962: ST_TO_ADDR
// end ;
9963: END
// export function zastaveni_rusaku ; var pom ; begin
9964: LD_INT 0
9966: PPUSH
9967: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9968: LD_ADDR_VAR 0 2
9972: PUSH
9973: LD_INT 22
9975: PUSH
9976: LD_EXP 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 2
9987: PUSH
9988: LD_INT 21
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 21
10000: PUSH
10001: LD_INT 1
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PPUSH
10017: CALL_OW 69
10021: ST_TO_ADDR
// ComStand ( pom ) ;
10022: LD_VAR 0 2
10026: PPUSH
10027: CALL_OW 165
// end ; end_of_file
10031: LD_VAR 0 1
10035: RET
// export konstanta_utoceni ; var hint_bw ; every 0 0$0.1 do
10036: GO 10038
10038: DISABLE
// begin konstanta_utoceni = 0 ;
10039: LD_ADDR_EXP 49
10043: PUSH
10044: LD_INT 0
10046: ST_TO_ADDR
// hint_bw = false ;
10047: LD_ADDR_LOC 22
10051: PUSH
10052: LD_INT 0
10054: ST_TO_ADDR
// end ;
10055: END
// export function uvodni_pokec ; var vyber , eng ; begin
10056: LD_INT 0
10058: PPUSH
10059: PPUSH
10060: PPUSH
// wait ( 0 0$2 ) ;
10061: LD_INT 70
10063: PPUSH
10064: CALL_OW 67
// ComTurnUnit ( bur , kur ) ;
10068: LD_EXP 29
10072: PPUSH
10073: LD_EXP 27
10077: PPUSH
10078: CALL_OW 119
// ComTurnUnit ( kur , bur ) ;
10082: LD_EXP 27
10086: PPUSH
10087: LD_EXP 29
10091: PPUSH
10092: CALL_OW 119
// if BELKOV_SAVED then
10096: LD_EXP 24
10100: IFFALSE 10140
// begin Say ( kur , D1b-Kur-1 ) ;
10102: LD_EXP 27
10106: PPUSH
10107: LD_STRING D1b-Kur-1
10109: PPUSH
10110: CALL_OW 88
// Say ( bel , D1b-Bel-1 ) ;
10114: LD_EXP 32
10118: PPUSH
10119: LD_STRING D1b-Bel-1
10121: PPUSH
10122: CALL_OW 88
// Say ( kur , D1b-Kur-2 ) ;
10126: LD_EXP 27
10130: PPUSH
10131: LD_STRING D1b-Kur-2
10133: PPUSH
10134: CALL_OW 88
// end else
10138: GO 10224
// begin Say ( kur , D1a-Kur-1 ) ;
10140: LD_EXP 27
10144: PPUSH
10145: LD_STRING D1a-Kur-1
10147: PPUSH
10148: CALL_OW 88
// Say ( bur , D1a-Bur-1 ) ;
10152: LD_EXP 29
10156: PPUSH
10157: LD_STRING D1a-Bur-1
10159: PPUSH
10160: CALL_OW 88
// if STAV_UTOKU = 3 then
10164: LD_EXP 25
10168: PUSH
10169: LD_INT 3
10171: EQUAL
10172: IFFALSE 10188
// Say ( kur , D1a-Kur-2a ) else
10174: LD_EXP 27
10178: PPUSH
10179: LD_STRING D1a-Kur-2a
10181: PPUSH
10182: CALL_OW 88
10186: GO 10200
// Say ( kur , D1a-Kur-2 ) ;
10188: LD_EXP 27
10192: PPUSH
10193: LD_STRING D1a-Kur-2
10195: PPUSH
10196: CALL_OW 88
// Say ( kur , D1a-Kur-2b ) ;
10200: LD_EXP 27
10204: PPUSH
10205: LD_STRING D1a-Kur-2b
10207: PPUSH
10208: CALL_OW 88
// Say ( bur , D1a-Bur-2 ) ;
10212: LD_EXP 29
10216: PPUSH
10217: LD_STRING D1a-Bur-2
10219: PPUSH
10220: CALL_OW 88
// end ; Say ( kur , D2-Kur-1 ) ;
10224: LD_EXP 27
10228: PPUSH
10229: LD_STRING D2-Kur-1
10231: PPUSH
10232: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
10236: LD_EXP 29
10240: PPUSH
10241: LD_STRING D2-Bur-1
10243: PPUSH
10244: CALL_OW 88
// Say ( kur , D2-Kur-2 ) ;
10248: LD_EXP 27
10252: PPUSH
10253: LD_STRING D2-Kur-2
10255: PPUSH
10256: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
10260: LD_EXP 29
10264: PPUSH
10265: LD_STRING D2-Bur-2
10267: PPUSH
10268: CALL_OW 88
// Say ( kur , D2-Kur-3 ) ;
10272: LD_EXP 27
10276: PPUSH
10277: LD_STRING D2-Kur-3
10279: PPUSH
10280: CALL_OW 88
// Say ( pop , D2-Pop-3 ) ;
10284: LD_EXP 28
10288: PPUSH
10289: LD_STRING D2-Pop-3
10291: PPUSH
10292: CALL_OW 88
// Say ( kur , D2-Kur-4 ) ;
10296: LD_EXP 27
10300: PPUSH
10301: LD_STRING D2-Kur-4
10303: PPUSH
10304: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
10308: LD_EXP 29
10312: PPUSH
10313: LD_STRING D2-Bur-4
10315: PPUSH
10316: CALL_OW 88
// Say ( kur , D2-Kur-5 ) ;
10320: LD_EXP 27
10324: PPUSH
10325: LD_STRING D2-Kur-5
10327: PPUSH
10328: CALL_OW 88
// Say ( bur , D2-Bur-5 ) ;
10332: LD_EXP 29
10336: PPUSH
10337: LD_STRING D2-Bur-5
10339: PPUSH
10340: CALL_OW 88
// Say ( kur , D2-Kur-6 ) ;
10344: LD_EXP 27
10348: PPUSH
10349: LD_STRING D2-Kur-6
10351: PPUSH
10352: CALL_OW 88
// vyber = vyber_characteru ;
10356: LD_ADDR_VAR 0 2
10360: PUSH
10361: CALL 3135 0 0
10365: ST_TO_ADDR
// if bel in vyber then
10366: LD_EXP 32
10370: PUSH
10371: LD_VAR 0 2
10375: IN
10376: IFFALSE 10389
// RemoveUnit ( bel ) else
10378: LD_EXP 32
10382: PPUSH
10383: CALL_OW 64
10387: GO 10403
// Setside ( bel , You2 ) ;
10389: LD_EXP 32
10393: PPUSH
10394: LD_EXP 2
10398: PPUSH
10399: CALL_OW 235
// if IsOK ( kov ) then
10403: LD_EXP 30
10407: PPUSH
10408: CALL_OW 302
10412: IFFALSE 10423
// RemoveUnit ( kov ) ;
10414: LD_EXP 30
10418: PPUSH
10419: CALL_OW 64
// if IsOK ( gny ) then
10423: LD_EXP 31
10427: PPUSH
10428: CALL_OW 302
10432: IFFALSE 10443
// RemoveUnit ( gny ) ;
10434: LD_EXP 31
10438: PPUSH
10439: CALL_OW 64
// RemoveUnit ( bur ) ;
10443: LD_EXP 29
10447: PPUSH
10448: CALL_OW 64
// prebarveni_druhe_baze ;
10452: CALL 5655 0 0
// ChangeSideFog ( You3 , You ) ;
10456: LD_EXP 3
10460: PPUSH
10461: LD_EXP 1
10465: PPUSH
10466: CALL_OW 343
// placni_unity ( vyber ) ;
10470: LD_VAR 0 2
10474: PPUSH
10475: CALL 3892 0 1
// CenterOnUnits ( vyber ) ;
10479: LD_VAR 0 2
10483: PPUSH
10484: CALL_OW 85
// RevealFogArea ( You , Wth ) ;
10488: LD_EXP 1
10492: PPUSH
10493: LD_INT 24
10495: PPUSH
10496: CALL_OW 332
// wait ( 0 0$2 ) ;
10500: LD_INT 70
10502: PPUSH
10503: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10507: LD_STRING M1
10509: PPUSH
10510: CALL_OW 337
// hint_bw = true ;
10514: LD_ADDR_LOC 22
10518: PUSH
10519: LD_INT 1
10521: ST_TO_ADDR
// Hint ( Oil ) ;
10522: LD_STRING Oil
10524: PPUSH
10525: CALL_OW 339
// Hint ( Upgrading ) ;
10529: LD_STRING Upgrading
10531: PPUSH
10532: CALL_OW 339
// InGameOff ;
10536: CALL_OW 9
// wait ( 1 1$00 ) ;
10540: LD_INT 2100
10542: PPUSH
10543: CALL_OW 67
// eng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) ;
10547: LD_ADDR_VAR 0 3
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 6
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 25
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 69
10580: ST_TO_ADDR
// if not eng then
10581: LD_VAR 0 3
10585: NOT
10586: IFFALSE 10590
// exit ;
10588: GO 10639
// ComExitBuilding ( eng ) ;
10590: LD_VAR 0 3
10594: PPUSH
10595: CALL_OW 122
// AddComBuild ( eng , b_oil_power , 140 , 69 , 0 ) ;
10599: LD_VAR 0 3
10603: PPUSH
10604: LD_INT 26
10606: PPUSH
10607: LD_INT 140
10609: PPUSH
10610: LD_INT 69
10612: PPUSH
10613: LD_INT 0
10615: PPUSH
10616: CALL_OW 205
// wait ( 2 2$30 ) ;
10620: LD_INT 5250
10622: PPUSH
10623: CALL_OW 67
// ComEnterUnit ( eng , RU1_dep ) ;
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: CALL_OW 120
// end ;
10639: LD_VAR 0 1
10643: RET
// every 0 0$1 trigger GetResourceVisibility ( 57 , 89 , You ) > 0 do
10644: LD_INT 57
10646: PPUSH
10647: LD_INT 89
10649: PPUSH
10650: LD_EXP 1
10654: PPUSH
10655: CALL_OW 440
10659: PUSH
10660: LD_INT 0
10662: GREATER
10663: IFFALSE 10767
10665: GO 10667
10667: DISABLE
// begin CenterOnXY ( 57 , 89 ) ;
10668: LD_INT 57
10670: PPUSH
10671: LD_INT 89
10673: PPUSH
10674: CALL_OW 84
// DialogueOn ;
10678: CALL_OW 6
// interface_hidden := true ;
10682: LD_ADDR_OWVAR 54
10686: PUSH
10687: LD_INT 1
10689: ST_TO_ADDR
// Say ( bur , D2a-Bur-1 ) ;
10690: LD_EXP 29
10694: PPUSH
10695: LD_STRING D2a-Bur-1
10697: PPUSH
10698: CALL_OW 88
// SayRadio ( kur , D2a-Kur-1 ) ;
10702: LD_EXP 27
10706: PPUSH
10707: LD_STRING D2a-Kur-1
10709: PPUSH
10710: CALL_OW 94
// RU_videl_oil = true ;
10714: LD_ADDR_EXP 40
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// interface_hidden := false ;
10722: LD_ADDR_OWVAR 54
10726: PUSH
10727: LD_INT 0
10729: ST_TO_ADDR
// Hint ( OilSpoted ) ;
10730: LD_STRING OilSpoted
10732: PPUSH
10733: CALL_OW 339
// DialogueOff ;
10737: CALL_OW 7
// wait ( 0 0$45 ) ;
10741: LD_INT 1575
10743: PPUSH
10744: CALL_OW 67
// ComConstruct ( Ru1_fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
10748: LD_INT 5
10750: PPUSH
10751: LD_INT 21
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: LD_INT 42
10762: PPUSH
10763: CALL_OW 125
// end ;
10767: END
// every 0 0$3 trigger RU_videl_oil and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ;
10768: LD_EXP 40
10772: PUSH
10773: LD_INT 22
10775: PUSH
10776: LD_EXP 1
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 30
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PPUSH
10799: CALL_OW 69
10803: PUSH
10804: LD_INT 1
10806: GREATER
10807: AND
10808: IFFALSE 10972
10810: GO 10812
10812: DISABLE
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
10817: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
10818: LD_ADDR_VAR 0 1
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_EXP 1
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 30
10837: PUSH
10838: LD_INT 0
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: ST_TO_ADDR
// pom1 = [ ] ;
10854: LD_ADDR_VAR 0 2
10858: PUSH
10859: EMPTY
10860: ST_TO_ADDR
// for i in pom do
10861: LD_ADDR_VAR 0 3
10865: PUSH
10866: LD_VAR 0 1
10870: PUSH
10871: FOR_IN
10872: IFFALSE 10913
// if GetDistUnitXY ( i , 56 , 88 ) < 30 then
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 56
10881: PPUSH
10882: LD_INT 88
10884: PPUSH
10885: CALL_OW 297
10889: PUSH
10890: LD_INT 30
10892: LESS
10893: IFFALSE 10911
// pom1 = pom1 ^ i ;
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_VAR 0 2
10904: PUSH
10905: LD_VAR 0 3
10909: ADD
10910: ST_TO_ADDR
10911: GO 10871
10913: POP
10914: POP
// if pom1 > 0 then
10915: LD_VAR 0 2
10919: PUSH
10920: LD_INT 0
10922: GREATER
10923: IFFALSE 10971
// begin while IsConstructed ( pom1 [ 1 ] ) do
10925: LD_VAR 0 2
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: PPUSH
10934: CALL_OW 304
10938: IFFALSE 10949
// wait ( 0 0$5 ) ;
10940: LD_INT 175
10942: PPUSH
10943: CALL_OW 67
10947: GO 10925
// ChangeMissionObjectives ( M2 ) ;
10949: LD_STRING M2
10951: PPUSH
10952: CALL_OW 337
// pojmenovani_kaganoviche ( pom1 [ 1 ] ) ;
10956: LD_VAR 0 2
10960: PUSH
10961: LD_INT 1
10963: ARRAY
10964: PPUSH
10965: CALL 4699 0 1
// end else
10969: GO 10972
// enable ;
10971: ENABLE
// end ;
10972: PPOPN 3
10974: END
// every 0 0$2 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) > 0 do var pom ;
10975: LD_INT 2
10977: PPUSH
10978: LD_INT 22
10980: PUSH
10981: LD_EXP 1
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 30
10992: PUSH
10993: LD_INT 3
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PPUSH
11004: CALL_OW 70
11008: PUSH
11009: LD_INT 0
11011: GREATER
11012: IFFALSE 11304
11014: GO 11016
11016: DISABLE
11017: LD_INT 0
11019: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) ;
11020: LD_ADDR_VAR 0 1
11024: PUSH
11025: LD_INT 2
11027: PPUSH
11028: LD_INT 22
11030: PUSH
11031: LD_EXP 1
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 30
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 70
11058: ST_TO_ADDR
// pom = pom [ 1 ] ;
11059: LD_ADDR_VAR 0 1
11063: PUSH
11064: LD_VAR 0 1
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: ST_TO_ADDR
// while IsConstructed ( pom ) <> 0 do
11073: LD_VAR 0 1
11077: PPUSH
11078: CALL_OW 304
11082: PUSH
11083: LD_INT 0
11085: NONEQUAL
11086: IFFALSE 11097
// wait ( 0 0$2 ) ;
11088: LD_INT 70
11090: PPUSH
11091: CALL_OW 67
11095: GO 11073
// CenterNowOnUnits ( pom ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: CALL_OW 87
// interface_hidden := true ;
11106: LD_ADDR_OWVAR 54
11110: PUSH
11111: LD_INT 1
11113: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) ;
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: LD_INT 2
11121: PPUSH
11122: LD_INT 22
11124: PUSH
11125: LD_EXP 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 30
11136: PUSH
11137: LD_INT 26
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 70
11152: ST_TO_ADDR
// if pom = 0 then
11153: LD_VAR 0 1
11157: PUSH
11158: LD_INT 0
11160: EQUAL
11161: IFFALSE 11278
// begin DialogueOn ;
11163: CALL_OW 6
// Say ( bur , D3aa-Bur-1 ) ;
11167: LD_EXP 29
11171: PPUSH
11172: LD_STRING D3aa-Bur-1
11174: PPUSH
11175: CALL_OW 88
// if IsOK ( schol ) then
11179: LD_EXP 33
11183: PPUSH
11184: CALL_OW 302
11188: IFFALSE 11216
// begin Say ( schol , D3aa-Sch-1 ) ;
11190: LD_EXP 33
11194: PPUSH
11195: LD_STRING D3aa-Sch-1
11197: PPUSH
11198: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11202: LD_EXP 29
11206: PPUSH
11207: LD_STRING D3aa-Bur-2
11209: PPUSH
11210: CALL_OW 88
// end else
11214: GO 11278
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: LD_INT 1
11223: PPUSH
11224: LD_INT 4
11226: PPUSH
11227: LD_EXP 29
11231: PUSH
11232: EMPTY
11233: LIST
11234: PPUSH
11235: CALL 11849 0 3
11239: ST_TO_ADDR
// if pom > 0 then
11240: LD_VAR 0 1
11244: PUSH
11245: LD_INT 0
11247: GREATER
11248: IFFALSE 11278
// begin Say ( pom [ 1 ] , D3aa-Sci1-1 ) ;
11250: LD_VAR 0 1
11254: PUSH
11255: LD_INT 1
11257: ARRAY
11258: PPUSH
11259: LD_STRING D3aa-Sci1-1
11261: PPUSH
11262: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11266: LD_EXP 29
11270: PPUSH
11271: LD_STRING D3aa-Bur-2
11273: PPUSH
11274: CALL_OW 88
// end ; end ; end ; ChangeMissionObjectives ( M3 ) ;
11278: LD_STRING M3
11280: PPUSH
11281: CALL_OW 337
// Hint ( Factory ) ;
11285: LD_STRING Factory
11287: PPUSH
11288: CALL_OW 339
// interface_hidden := false ;
11292: LD_ADDR_OWVAR 54
11296: PUSH
11297: LD_INT 0
11299: ST_TO_ADDR
// DialogueOff ;
11300: CALL_OW 7
// end ;
11304: PPOPN 1
11306: END
// every 0 0$5 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) > 0 do var pom ;
11307: LD_INT 2
11309: PPUSH
11310: LD_INT 22
11312: PUSH
11313: LD_EXP 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 30
11324: PUSH
11325: LD_INT 4
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 70
11340: PUSH
11341: LD_INT 0
11343: GREATER
11344: IFFALSE 11426
11346: GO 11348
11348: DISABLE
11349: LD_INT 0
11351: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) ;
11352: LD_ADDR_VAR 0 1
11356: PUSH
11357: LD_INT 2
11359: PPUSH
11360: LD_INT 22
11362: PUSH
11363: LD_EXP 1
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 30
11374: PUSH
11375: LD_INT 4
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 70
11390: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
11391: LD_VAR 0 1
11395: PUSH
11396: LD_INT 1
11398: ARRAY
11399: PPUSH
11400: CALL_OW 304
11404: PUSH
11405: LD_INT 0
11407: NONEQUAL
11408: IFFALSE 11419
// wait ( 0 0$5 ) ;
11410: LD_INT 175
11412: PPUSH
11413: CALL_OW 67
11417: GO 11391
// Hint ( Armoury ) ;
11419: LD_STRING Armoury
11421: PPUSH
11422: CALL_OW 339
// end ;
11426: PPOPN 1
11428: END
// every 0 0$3 trigger hint_bw do var pom ;
11429: LD_LOC 22
11433: IFFALSE 11487
11435: GO 11437
11437: DISABLE
11438: LD_INT 0
11440: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_breastwork ] ] ) ;
11441: LD_ADDR_VAR 0 1
11445: PUSH
11446: LD_INT 2
11448: PPUSH
11449: LD_INT 22
11451: PUSH
11452: LD_EXP 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 30
11463: PUSH
11464: LD_INT 31
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 70
11479: ST_TO_ADDR
// Hint ( bunkers ) ;
11480: LD_STRING bunkers
11482: PPUSH
11483: CALL_OW 339
// end ;
11487: PPOPN 1
11489: END
// export function dialog_scholtze_enter ; begin
11490: LD_INT 0
11492: PPUSH
// CenterOnUnits ( schol2 ) ;
11493: LD_EXP 34
11497: PPUSH
11498: CALL_OW 85
// DialogueOn ;
11502: CALL_OW 6
// interface_hidden := true ;
11506: LD_ADDR_OWVAR 54
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// SayRadio ( schol2 , D4-Sch-1 ) ;
11514: LD_EXP 34
11518: PPUSH
11519: LD_STRING D4-Sch-1
11521: PPUSH
11522: CALL_OW 94
// Say ( bur , D4-Bur-1 ) ;
11526: LD_EXP 29
11530: PPUSH
11531: LD_STRING D4-Bur-1
11533: PPUSH
11534: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
11538: LD_STRING M4
11540: PPUSH
11541: CALL_OW 337
// interface_hidden := false ;
11545: LD_ADDR_OWVAR 54
11549: PUSH
11550: LD_INT 0
11552: ST_TO_ADDR
// DialogueOff ;
11553: CALL_OW 7
// end ;
11557: LD_VAR 0 1
11561: RET
// export function dialog_scholtze_nalezen ; begin
11562: LD_INT 0
11564: PPUSH
// CenterOnUnits ( schol2 ) ;
11565: LD_EXP 34
11569: PPUSH
11570: CALL_OW 85
// DialogueOn ;
11574: CALL_OW 6
// interface_hidden := true ;
11578: LD_ADDR_OWVAR 54
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if IsOK ( schol2 ) then
11586: LD_EXP 34
11590: PPUSH
11591: CALL_OW 302
11595: IFFALSE 11640
// begin Say ( schol2 , D4a-Sch-1 ) ;
11597: LD_EXP 34
11601: PPUSH
11602: LD_STRING D4a-Sch-1
11604: PPUSH
11605: CALL_OW 88
// Say ( bur , D4a-Bur-1 ) ;
11609: LD_EXP 29
11613: PPUSH
11614: LD_STRING D4a-Bur-1
11616: PPUSH
11617: CALL_OW 88
// Say ( schol2 , D4a-Sch-2 ) ;
11621: LD_EXP 34
11625: PPUSH
11626: LD_STRING D4a-Sch-2
11628: PPUSH
11629: CALL_OW 88
// ChangeMissionObjectives ( MScholtzeOut ) ;
11633: LD_STRING MScholtzeOut
11635: PPUSH
11636: CALL_OW 337
// end ; interface_hidden := false ;
11640: LD_ADDR_OWVAR 54
11644: PUSH
11645: LD_INT 0
11647: ST_TO_ADDR
// DialogueOff ;
11648: CALL_OW 7
// end ;
11652: LD_VAR 0 1
11656: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) = 1 marked 201 do var pom ;
11657: CALL 27318 0 0
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_EXP 1
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 30
11676: PUSH
11677: LD_INT 0
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PPUSH
11688: CALL_OW 69
11692: PUSH
11693: LD_INT 1
11695: EQUAL
11696: AND
11697: IFFALSE 11846
11699: GO 11701
11701: DISABLE
11702: LD_INT 0
11704: PPUSH
// begin DialogueOn ;
11705: CALL_OW 6
// interface_hidden := true ;
11709: LD_ADDR_OWVAR 54
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
11717: LD_EXP 72
11721: PPUSH
11722: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
11726: LD_ADDR_VAR 0 1
11730: PUSH
11731: LD_INT 1
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: LD_EXP 29
11741: PUSH
11742: LD_EXP 31
11746: PUSH
11747: LD_EXP 30
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL 11849 0 3
11761: ST_TO_ADDR
// if pom = 0 then
11762: LD_VAR 0 1
11766: PUSH
11767: LD_INT 0
11769: EQUAL
11770: IFFALSE 11796
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 1
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: LD_EXP 29
11787: PUSH
11788: EMPTY
11789: LIST
11790: PPUSH
11791: CALL 11849 0 3
11795: ST_TO_ADDR
// if pom > 0 then
11796: LD_VAR 0 1
11800: PUSH
11801: LD_INT 0
11803: GREATER
11804: IFFALSE 11834
// begin Say ( pom [ 1 ] , D3a-RSol1-1 ) ;
11806: LD_VAR 0 1
11810: PUSH
11811: LD_INT 1
11813: ARRAY
11814: PPUSH
11815: LD_STRING D3a-RSol1-1
11817: PPUSH
11818: CALL_OW 88
// Say ( bur , D3a-Bur-1 ) ;
11822: LD_EXP 29
11826: PPUSH
11827: LD_STRING D3a-Bur-1
11829: PPUSH
11830: CALL_OW 88
// end ; interface_hidden := false ;
11834: LD_ADDR_OWVAR 54
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// DialogueOff ;
11842: CALL_OW 7
// end ;
11846: PPOPN 1
11848: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11849: LD_INT 0
11851: PPUSH
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
11856: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
11857: LD_ADDR_VAR 0 6
11861: PUSH
11862: LD_INT 22
11864: PUSH
11865: LD_EXP 1
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 25
11876: PUSH
11877: LD_INT 4
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 26
11886: PUSH
11887: LD_VAR 0 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
11906: LD_ADDR_VAR 0 7
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_EXP 1
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 25
11925: PUSH
11926: LD_INT 3
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: LD_INT 26
11935: PUSH
11936: LD_VAR 0 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
11955: LD_ADDR_VAR 0 8
11959: PUSH
11960: LD_INT 22
11962: PUSH
11963: LD_EXP 1
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 2
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 26
11984: PUSH
11985: LD_VAR 0 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12004: LD_ADDR_VAR 0 9
12008: PUSH
12009: LD_INT 22
12011: PUSH
12012: LD_EXP 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 25
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 26
12033: PUSH
12034: LD_VAR 0 1
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PPUSH
12048: CALL_OW 69
12052: ST_TO_ADDR
// case povolani of class_scientistic :
12053: LD_VAR 0 2
12057: PUSH
12058: LD_INT 4
12060: DOUBLE
12061: EQUAL
12062: IFTRUE 12066
12064: GO 12079
12066: POP
// pom = pom1 ; class_mechanic :
12067: LD_ADDR_VAR 0 5
12071: PUSH
12072: LD_VAR 0 6
12076: ST_TO_ADDR
12077: GO 12143
12079: LD_INT 3
12081: DOUBLE
12082: EQUAL
12083: IFTRUE 12087
12085: GO 12100
12087: POP
// pom = pom2 ; class_engineer :
12088: LD_ADDR_VAR 0 5
12092: PUSH
12093: LD_VAR 0 7
12097: ST_TO_ADDR
12098: GO 12143
12100: LD_INT 2
12102: DOUBLE
12103: EQUAL
12104: IFTRUE 12108
12106: GO 12121
12108: POP
// pom = pom3 ; class_soldier :
12109: LD_ADDR_VAR 0 5
12113: PUSH
12114: LD_VAR 0 8
12118: ST_TO_ADDR
12119: GO 12143
12121: LD_INT 1
12123: DOUBLE
12124: EQUAL
12125: IFTRUE 12129
12127: GO 12142
12129: POP
// pom = pom4 ; end ;
12130: LD_ADDR_VAR 0 5
12134: PUSH
12135: LD_VAR 0 9
12139: ST_TO_ADDR
12140: GO 12143
12142: POP
// if povolani <> class_scientistic then
12143: LD_VAR 0 2
12147: PUSH
12148: LD_INT 4
12150: NONEQUAL
12151: IFFALSE 12169
// pom = pom ^ pom1 ;
12153: LD_ADDR_VAR 0 5
12157: PUSH
12158: LD_VAR 0 5
12162: PUSH
12163: LD_VAR 0 6
12167: ADD
12168: ST_TO_ADDR
// if povolani <> class_mechanic then
12169: LD_VAR 0 2
12173: PUSH
12174: LD_INT 3
12176: NONEQUAL
12177: IFFALSE 12195
// pom = pom ^ pom2 ;
12179: LD_ADDR_VAR 0 5
12183: PUSH
12184: LD_VAR 0 5
12188: PUSH
12189: LD_VAR 0 7
12193: ADD
12194: ST_TO_ADDR
// if povolani <> class_engineer then
12195: LD_VAR 0 2
12199: PUSH
12200: LD_INT 2
12202: NONEQUAL
12203: IFFALSE 12221
// pom = pom ^ pom3 ;
12205: LD_ADDR_VAR 0 5
12209: PUSH
12210: LD_VAR 0 5
12214: PUSH
12215: LD_VAR 0 8
12219: ADD
12220: ST_TO_ADDR
// if povolani <> class_soldier then
12221: LD_VAR 0 2
12225: PUSH
12226: LD_INT 1
12228: NONEQUAL
12229: IFFALSE 12247
// pom = pom ^ pom4 ;
12231: LD_ADDR_VAR 0 5
12235: PUSH
12236: LD_VAR 0 5
12240: PUSH
12241: LD_VAR 0 9
12245: ADD
12246: ST_TO_ADDR
// result := pom diff diffseznam ;
12247: LD_ADDR_VAR 0 4
12251: PUSH
12252: LD_VAR 0 5
12256: PUSH
12257: LD_VAR 0 3
12261: DIFF
12262: ST_TO_ADDR
// end ;
12263: LD_VAR 0 4
12267: RET
// function GetPeopleSide ( side , sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
12268: LD_INT 0
12270: PPUSH
12271: PPUSH
12272: PPUSH
12273: PPUSH
12274: PPUSH
12275: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12276: LD_ADDR_VAR 0 7
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_VAR 0 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 25
12295: PUSH
12296: LD_INT 4
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 26
12305: PUSH
12306: LD_VAR 0 2
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 69
12324: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12325: LD_ADDR_VAR 0 8
12329: PUSH
12330: LD_INT 22
12332: PUSH
12333: LD_VAR 0 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 25
12344: PUSH
12345: LD_INT 3
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 26
12354: PUSH
12355: LD_VAR 0 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: PPUSH
12369: CALL_OW 69
12373: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12374: LD_ADDR_VAR 0 9
12378: PUSH
12379: LD_INT 22
12381: PUSH
12382: LD_VAR 0 1
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 25
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 26
12403: PUSH
12404: LD_VAR 0 2
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: PPUSH
12418: CALL_OW 69
12422: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12423: LD_ADDR_VAR 0 10
12427: PUSH
12428: LD_INT 22
12430: PUSH
12431: LD_VAR 0 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 1
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 26
12452: PUSH
12453: LD_VAR 0 2
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: LIST
12466: PPUSH
12467: CALL_OW 69
12471: ST_TO_ADDR
// case povolani of class_scientistic :
12472: LD_VAR 0 3
12476: PUSH
12477: LD_INT 4
12479: DOUBLE
12480: EQUAL
12481: IFTRUE 12485
12483: GO 12498
12485: POP
// pom = pom1 ; class_mechanic :
12486: LD_ADDR_VAR 0 6
12490: PUSH
12491: LD_VAR 0 7
12495: ST_TO_ADDR
12496: GO 12562
12498: LD_INT 3
12500: DOUBLE
12501: EQUAL
12502: IFTRUE 12506
12504: GO 12519
12506: POP
// pom = pom2 ; class_engineer :
12507: LD_ADDR_VAR 0 6
12511: PUSH
12512: LD_VAR 0 8
12516: ST_TO_ADDR
12517: GO 12562
12519: LD_INT 2
12521: DOUBLE
12522: EQUAL
12523: IFTRUE 12527
12525: GO 12540
12527: POP
// pom = pom3 ; class_soldier :
12528: LD_ADDR_VAR 0 6
12532: PUSH
12533: LD_VAR 0 9
12537: ST_TO_ADDR
12538: GO 12562
12540: LD_INT 1
12542: DOUBLE
12543: EQUAL
12544: IFTRUE 12548
12546: GO 12561
12548: POP
// pom = pom4 ; end ;
12549: LD_ADDR_VAR 0 6
12553: PUSH
12554: LD_VAR 0 10
12558: ST_TO_ADDR
12559: GO 12562
12561: POP
// if povolani <> class_scientistic then
12562: LD_VAR 0 3
12566: PUSH
12567: LD_INT 4
12569: NONEQUAL
12570: IFFALSE 12588
// pom = pom ^ pom1 ;
12572: LD_ADDR_VAR 0 6
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: LD_VAR 0 7
12586: ADD
12587: ST_TO_ADDR
// if povolani <> class_mechanic then
12588: LD_VAR 0 3
12592: PUSH
12593: LD_INT 3
12595: NONEQUAL
12596: IFFALSE 12614
// pom = pom ^ pom2 ;
12598: LD_ADDR_VAR 0 6
12602: PUSH
12603: LD_VAR 0 6
12607: PUSH
12608: LD_VAR 0 8
12612: ADD
12613: ST_TO_ADDR
// if povolani <> class_engineer then
12614: LD_VAR 0 3
12618: PUSH
12619: LD_INT 2
12621: NONEQUAL
12622: IFFALSE 12640
// pom = pom ^ pom3 ;
12624: LD_ADDR_VAR 0 6
12628: PUSH
12629: LD_VAR 0 6
12633: PUSH
12634: LD_VAR 0 9
12638: ADD
12639: ST_TO_ADDR
// if povolani <> class_soldier then
12640: LD_VAR 0 3
12644: PUSH
12645: LD_INT 1
12647: NONEQUAL
12648: IFFALSE 12666
// pom = pom ^ pom4 ;
12650: LD_ADDR_VAR 0 6
12654: PUSH
12655: LD_VAR 0 6
12659: PUSH
12660: LD_VAR 0 10
12664: ADD
12665: ST_TO_ADDR
// result := pom diff diffseznam ;
12666: LD_ADDR_VAR 0 5
12670: PUSH
12671: LD_VAR 0 6
12675: PUSH
12676: LD_VAR 0 4
12680: DIFF
12681: ST_TO_ADDR
// end ;
12682: LD_VAR 0 5
12686: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom ;
12687: CALL 27318 0 0
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_EXP 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 30
12706: PUSH
12707: LD_INT 0
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PPUSH
12718: CALL_OW 69
12722: PUSH
12723: LD_INT 1
12725: GREATER
12726: AND
12727: IFFALSE 12945
12729: GO 12731
12731: DISABLE
12732: LD_INT 0
12734: PPUSH
// begin disable ( 201 ) ;
12735: LD_INT 201
12737: DISABLE_MARKED
// DialogueOn ;
12738: CALL_OW 6
// interface_hidden := true ;
12742: LD_ADDR_OWVAR 54
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
12750: LD_EXP 72
12754: PPUSH
12755: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
12759: LD_ADDR_VAR 0 1
12763: PUSH
12764: LD_INT 1
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: LD_EXP 29
12774: PUSH
12775: LD_EXP 31
12779: PUSH
12780: LD_EXP 30
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: PPUSH
12790: CALL 11849 0 3
12794: ST_TO_ADDR
// if pom = 0 then
12795: LD_VAR 0 1
12799: PUSH
12800: LD_INT 0
12802: EQUAL
12803: IFFALSE 12829
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
12805: LD_ADDR_VAR 0 1
12809: PUSH
12810: LD_INT 1
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: LD_EXP 29
12820: PUSH
12821: EMPTY
12822: LIST
12823: PPUSH
12824: CALL 11849 0 3
12828: ST_TO_ADDR
// if pom > 0 then
12829: LD_VAR 0 1
12833: PUSH
12834: LD_INT 0
12836: GREATER
12837: IFFALSE 12933
// begin Say ( pom [ 1 ] , D3b-RSol1-1 ) ;
12839: LD_VAR 0 1
12843: PUSH
12844: LD_INT 1
12846: ARRAY
12847: PPUSH
12848: LD_STRING D3b-RSol1-1
12850: PPUSH
12851: CALL_OW 88
// if IsOK ( gny ) then
12855: LD_EXP 31
12859: PPUSH
12860: CALL_OW 302
12864: IFFALSE 12892
// begin Say ( gny , D3b-Gny-1 ) ;
12866: LD_EXP 31
12870: PPUSH
12871: LD_STRING D3b-Gny-1
12873: PPUSH
12874: CALL_OW 88
// Say ( bur , D3b-Bur-1 ) ;
12878: LD_EXP 29
12882: PPUSH
12883: LD_STRING D3b-Bur-1
12885: PPUSH
12886: CALL_OW 88
// end else
12890: GO 12933
// if ISOK ( kov ) then
12892: LD_EXP 30
12896: PPUSH
12897: CALL_OW 302
12901: IFFALSE 12917
// Say ( kov , D3b-Kov-1 ) else
12903: LD_EXP 30
12907: PPUSH
12908: LD_STRING D3b-Kov-1
12910: PPUSH
12911: CALL_OW 88
12915: GO 12933
// Say ( pom [ 1 ] , D3b-RSol1-2 ) ;
12917: LD_VAR 0 1
12921: PUSH
12922: LD_INT 1
12924: ARRAY
12925: PPUSH
12926: LD_STRING D3b-RSol1-2
12928: PPUSH
12929: CALL_OW 88
// end ; interface_hidden := false ;
12933: LD_ADDR_OWVAR 54
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// DialogueOff ;
12941: CALL_OW 7
// end ;
12945: PPOPN 1
12947: END
// export function dialog_otazka_poctu_aut ; var pom ; begin
12948: LD_INT 0
12950: PPUSH
12951: PPUSH
// DialogueOn ;
12952: CALL_OW 6
// interface_hidden := true ;
12956: LD_ADDR_OWVAR 54
12960: PUSH
12961: LD_INT 1
12963: ST_TO_ADDR
// Say ( kur , D5-Kur-1 ) ;
12964: LD_EXP 27
12968: PPUSH
12969: LD_STRING D5-Kur-1
12971: PPUSH
12972: CALL_OW 88
// pom = Query ( QVehicles ) ;
12976: LD_ADDR_VAR 0 2
12980: PUSH
12981: LD_STRING QVehicles
12983: PPUSH
12984: CALL_OW 97
12988: ST_TO_ADDR
// case pom of 1 :
12989: LD_VAR 0 2
12993: PUSH
12994: LD_INT 1
12996: DOUBLE
12997: EQUAL
12998: IFTRUE 13002
13000: GO 13029
13002: POP
// begin Say ( bur , D6a-Bur-1 ) ;
13003: LD_EXP 29
13007: PPUSH
13008: LD_STRING D6a-Bur-1
13010: PPUSH
13011: CALL_OW 88
// Say ( kur , D6a-Kur-1 ) ;
13015: LD_EXP 27
13019: PPUSH
13020: LD_STRING D6a-Kur-1
13022: PPUSH
13023: CALL_OW 88
// end ; 2 :
13027: GO 13132
13029: LD_INT 2
13031: DOUBLE
13032: EQUAL
13033: IFTRUE 13037
13035: GO 13076
13037: POP
// begin Say ( bur , D6b-Bur-1 ) ;
13038: LD_EXP 29
13042: PPUSH
13043: LD_STRING D6b-Bur-1
13045: PPUSH
13046: CALL_OW 88
// Say ( kur , D6b-Kur-1 ) ;
13050: LD_EXP 27
13054: PPUSH
13055: LD_STRING D6b-Kur-1
13057: PPUSH
13058: CALL_OW 88
// Say ( bur , D6b-Bur-2 ) ;
13062: LD_EXP 29
13066: PPUSH
13067: LD_STRING D6b-Bur-2
13069: PPUSH
13070: CALL_OW 88
// end ; 3 :
13074: GO 13132
13076: LD_INT 3
13078: DOUBLE
13079: EQUAL
13080: IFTRUE 13084
13082: GO 13131
13084: POP
// begin Say ( bur , D6c-Bur-1 ) ;
13085: LD_EXP 29
13089: PPUSH
13090: LD_STRING D6c-Bur-1
13092: PPUSH
13093: CALL_OW 88
// Say ( kur , D6c-Kur-1 ) ;
13097: LD_EXP 27
13101: PPUSH
13102: LD_STRING D6c-Kur-1
13104: PPUSH
13105: CALL_OW 88
// Say ( bur , D6c-Bur-2 ) ;
13109: LD_EXP 29
13113: PPUSH
13114: LD_STRING D6c-Bur-2
13116: PPUSH
13117: CALL_OW 88
// KurinAddTime = 1 ;
13121: LD_ADDR_EXP 7
13125: PUSH
13126: LD_INT 1
13128: ST_TO_ADDR
// end ; end ;
13129: GO 13132
13131: POP
// interface_hidden := false ;
13132: LD_ADDR_OWVAR 54
13136: PUSH
13137: LD_INT 0
13139: ST_TO_ADDR
// DialogueOff ;
13140: CALL_OW 7
// result := pom ;
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_VAR 0 2
13153: ST_TO_ADDR
// end ;
13154: LD_VAR 0 1
13158: RET
// export function hlaska_omicron ; begin
13159: LD_INT 0
13161: PPUSH
// DialogueOn ;
13162: CALL_OW 6
// interface_hidden := true ;
13166: LD_ADDR_OWVAR 54
13170: PUSH
13171: LD_INT 1
13173: ST_TO_ADDR
// Say ( kur , D6c-Kur-2 ) ;
13174: LD_EXP 27
13178: PPUSH
13179: LD_STRING D6c-Kur-2
13181: PPUSH
13182: CALL_OW 88
// interface_hidden := false ;
13186: LD_ADDR_OWVAR 54
13190: PUSH
13191: LD_INT 0
13193: ST_TO_ADDR
// DialogueOff ;
13194: CALL_OW 7
// end ;
13198: LD_VAR 0 1
13202: RET
// every 0 0$1 trigger stav_omikron = 3 do
13203: LD_EXP 39
13207: PUSH
13208: LD_INT 3
13210: EQUAL
13211: IFFALSE 13241
13213: GO 13215
13215: DISABLE
// begin CheckVehicles ;
13216: CALL 6148 0 0
// ChangeMissionObjectives ( M5 ) ;
13220: LD_STRING M5
13222: PPUSH
13223: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 1 ) ;
13227: LD_INT 32
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 424
// CheckVehicles ;
13237: CALL 6148 0 0
// end ;
13241: END
// export function dialog_pred_omicronem ; var pom ; begin
13242: LD_INT 0
13244: PPUSH
13245: PPUSH
// DialogueOn ;
13246: CALL_OW 6
// interface_hidden := true ;
13250: LD_ADDR_OWVAR 54
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// Say ( bur , D7-Bur-1 ) ;
13258: LD_EXP 29
13262: PPUSH
13263: LD_STRING D7-Bur-1
13265: PPUSH
13266: CALL_OW 88
// SayRadio ( kur , D7-Kur-1 ) ;
13270: LD_EXP 27
13274: PPUSH
13275: LD_STRING D7-Kur-1
13277: PPUSH
13278: CALL_OW 94
// setkani_om := true ;
13282: LD_ADDR_EXP 41
13286: PUSH
13287: LD_INT 1
13289: ST_TO_ADDR
// ChangeMissionObjectives ( M5a ) ;
13290: LD_STRING M5a
13292: PPUSH
13293: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 0 ) ;
13297: LD_INT 32
13299: PPUSH
13300: LD_INT 0
13302: PPUSH
13303: CALL_OW 424
// interface_hidden := false ;
13307: LD_ADDR_OWVAR 54
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// DialogueOff ;
13315: CALL_OW 7
// end ;
13319: LD_VAR 0 1
13323: RET
// every 0 0$5 trigger stav_omikron = 4 and omicron_half_destroyed do var pom ;
13324: LD_EXP 39
13328: PUSH
13329: LD_INT 4
13331: EQUAL
13332: PUSH
13333: CALL 27387 0 0
13337: AND
13338: IFFALSE 13605
13340: GO 13342
13342: DISABLE
13343: LD_INT 0
13345: PPUSH
// begin popov_ven ;
13346: CALL 5472 0 0
// DialogueOn ;
13350: CALL_OW 6
// interface_hidden := true ;
13354: LD_ADDR_OWVAR 54
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// pom = create_kecajici_amik ;
13362: LD_ADDR_VAR 0 1
13366: PUSH
13367: CALL 18649 0 0
13371: ST_TO_ADDR
// SayRadio ( pom , D8-Sol1-1 ) ;
13372: LD_VAR 0 1
13376: PPUSH
13377: LD_STRING D8-Sol1-1
13379: PPUSH
13380: CALL_OW 94
// if IsOK ( kov ) then
13384: LD_EXP 30
13388: PPUSH
13389: CALL_OW 302
13393: IFFALSE 13409
// Say ( kov , D8-Kov-1 ) else
13395: LD_EXP 30
13399: PPUSH
13400: LD_STRING D8-Kov-1
13402: PPUSH
13403: CALL_OW 88
13407: GO 13500
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13409: LD_ADDR_VAR 0 1
13413: PUSH
13414: LD_INT 1
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: LD_EXP 29
13424: PUSH
13425: LD_EXP 31
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL 11849 0 3
13438: ST_TO_ADDR
// if pom = 0 then
13439: LD_VAR 0 1
13443: PUSH
13444: LD_INT 0
13446: EQUAL
13447: IFFALSE 13484
// GetPeopleSide ( You2 , sex_male , class_soldier , [ kur , pop , bel ] ) ;
13449: LD_EXP 2
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: LD_EXP 27
13464: PUSH
13465: LD_EXP 28
13469: PUSH
13470: LD_EXP 32
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL 12268 0 4
// Say ( pom [ 1 ] , D8-RSol1-1 ) ;
13484: LD_VAR 0 1
13488: PUSH
13489: LD_INT 1
13491: ARRAY
13492: PPUSH
13493: LD_STRING D8-RSol1-1
13495: PPUSH
13496: CALL_OW 88
// end ; if IsOK ( gny ) then
13500: LD_EXP 31
13504: PPUSH
13505: CALL_OW 302
13509: IFFALSE 13525
// Say ( gny , D8-Gny-1 ) else
13511: LD_EXP 31
13515: PPUSH
13516: LD_STRING D8-Gny-1
13518: PPUSH
13519: CALL_OW 88
13523: GO 13581
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_INT 1
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_EXP 29
13540: PUSH
13541: LD_EXP 31
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL 11849 0 3
13554: ST_TO_ADDR
// if pom > 1 then
13555: LD_VAR 0 1
13559: PUSH
13560: LD_INT 1
13562: GREATER
13563: IFFALSE 13581
// Say ( pom [ 2 ] , D8-RSol2-1 ) ;
13565: LD_VAR 0 1
13569: PUSH
13570: LD_INT 2
13572: ARRAY
13573: PPUSH
13574: LD_STRING D8-RSol2-1
13576: PPUSH
13577: CALL_OW 88
// end ; interface_hidden := false ;
13581: LD_ADDR_OWVAR 54
13585: PUSH
13586: LD_INT 0
13588: ST_TO_ADDR
// DialogueOff ;
13589: CALL_OW 7
// stahnuti_amiku ;
13593: CALL 27550 0 0
// stav_omikron = 5 ;
13597: LD_ADDR_EXP 39
13601: PUSH
13602: LD_INT 5
13604: ST_TO_ADDR
// end ;
13605: PPOPN 1
13607: END
// every 0 0$5 trigger stav_omikron = 5 do var gri ;
13608: LD_EXP 39
13612: PUSH
13613: LD_INT 5
13615: EQUAL
13616: IFFALSE 13777
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
// begin setkani_om = false ;
13624: LD_ADDR_EXP 41
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// gri = create_grishko ;
13632: LD_ADDR_VAR 0 1
13636: PUSH
13637: CALL 18708 0 0
13641: ST_TO_ADDR
// CenterOnUnits ( gri ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 85
// DialogueOn ;
13651: CALL_OW 6
// interface_hidden := true ;
13655: LD_ADDR_OWVAR 54
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// SayRadio ( gri , D9-Gri-1 ) ;
13663: LD_VAR 0 1
13667: PPUSH
13668: LD_STRING D9-Gri-1
13670: PPUSH
13671: CALL_OW 94
// SayRadio ( kur , D9-Kur-1 ) ;
13675: LD_EXP 27
13679: PPUSH
13680: LD_STRING D9-Kur-1
13682: PPUSH
13683: CALL_OW 94
// wait ( 0 0$2 ) ;
13687: LD_INT 70
13689: PPUSH
13690: CALL_OW 67
// SayRadio ( gri , D9-Gri-2 ) ;
13694: LD_VAR 0 1
13698: PPUSH
13699: LD_STRING D9-Gri-2
13701: PPUSH
13702: CALL_OW 94
// SayRadio ( kur , D9-Kur-2 ) ;
13706: LD_EXP 27
13710: PPUSH
13711: LD_STRING D9-Kur-2
13713: PPUSH
13714: CALL_OW 94
// SayRadio ( gri , D9-Gri-3 ) ;
13718: LD_VAR 0 1
13722: PPUSH
13723: LD_STRING D9-Gri-3
13725: PPUSH
13726: CALL_OW 94
// SayRadio ( kur , D9-Kur-3 ) ;
13730: LD_EXP 27
13734: PPUSH
13735: LD_STRING D9-Kur-3
13737: PPUSH
13738: CALL_OW 94
// interface_hidden := false ;
13742: LD_ADDR_OWVAR 54
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// DialogueOff ;
13750: CALL_OW 7
// wait ( 0 0$20 ) ;
13754: LD_INT 700
13756: PPUSH
13757: CALL_OW 67
// stav_omikron = 6 ;
13761: LD_ADDR_EXP 39
13765: PUSH
13766: LD_INT 6
13768: ST_TO_ADDR
// zastaveni_rusaku ;
13769: CALL 9964 0 0
// utok_arabu ;
13773: CALL 28391 0 0
// end ;
13777: PPOPN 1
13779: END
// export function kecy_behem_utoku_arabu ; var i ; begin
13780: LD_INT 0
13782: PPUSH
13783: PPUSH
// stav_omikron = 7 ;
13784: LD_ADDR_EXP 39
13788: PUSH
13789: LD_INT 7
13791: ST_TO_ADDR
// SayRadio ( kur , D9a-Kur-1 ) ;
13792: LD_EXP 27
13796: PPUSH
13797: LD_STRING D9a-Kur-1
13799: PPUSH
13800: CALL_OW 94
// Say ( bur , D9a-Bur-1 ) ;
13804: LD_EXP 29
13808: PPUSH
13809: LD_STRING D9a-Bur-1
13811: PPUSH
13812: CALL_OW 88
// SayRadio ( kur , D9a-Kur-2 ) ;
13816: LD_EXP 27
13820: PPUSH
13821: LD_STRING D9a-Kur-2
13823: PPUSH
13824: CALL_OW 94
// posilani_arabskych_hlidek = true ;
13828: LD_ADDR_EXP 74
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
13836: LD_ADDR_VAR 0 2
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 3
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: PUSH
13877: FOR_IN
13878: IFFALSE 13897
// ComMoveXY ( i , 59 , 12 ) ;
13880: LD_VAR 0 2
13884: PPUSH
13885: LD_INT 59
13887: PPUSH
13888: LD_INT 12
13890: PPUSH
13891: CALL_OW 111
13895: GO 13877
13897: POP
13898: POP
// manage_ruske_computery_zpet ;
13899: CALL 7193 0 0
// end ;
13903: LD_VAR 0 1
13907: RET
// every 0 0$1 trigger stav_omikron = 8 and get_lidi_popov_area > 0 do var pom , pom1 ;
13908: LD_EXP 39
13912: PUSH
13913: LD_INT 8
13915: EQUAL
13916: PUSH
13917: CALL 8580 0 0
13921: PUSH
13922: LD_INT 0
13924: GREATER
13925: AND
13926: IFFALSE 14184
13928: GO 13930
13930: DISABLE
13931: LD_INT 0
13933: PPUSH
13934: PPUSH
// begin pom = get_lidi_popov_area ;
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: CALL 8580 0 0
13944: ST_TO_ADDR
// pom = pom [ 1 ] ;
13945: LD_ADDR_VAR 0 1
13949: PUSH
13950: LD_VAR 0 1
13954: PUSH
13955: LD_INT 1
13957: ARRAY
13958: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13959: LD_ADDR_VAR 0 2
13963: PUSH
13964: LD_INT 22
13966: PUSH
13967: LD_EXP 1
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 2
13978: PUSH
13979: LD_INT 21
13981: PUSH
13982: LD_INT 1
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 2
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PPUSH
14008: CALL_OW 69
14012: ST_TO_ADDR
// ComStop ( pom1 ) ;
14013: LD_VAR 0 2
14017: PPUSH
14018: CALL_OW 141
// ArDontAttackPlayer ( true ) ;
14022: LD_INT 1
14024: PPUSH
14025: CALL 29365 0 1
// InGameOn ;
14029: CALL_OW 8
// CenterOnUnits ( [ pop ] ) ;
14033: LD_EXP 28
14037: PUSH
14038: EMPTY
14039: LIST
14040: PPUSH
14041: CALL_OW 85
// ComMoveUnit ( pop , pom ) ;
14045: LD_EXP 28
14049: PPUSH
14050: LD_VAR 0 1
14054: PPUSH
14055: CALL_OW 112
// while GetDistUnits ( pop , pom ) > 4 do
14059: LD_EXP 28
14063: PPUSH
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 296
14073: PUSH
14074: LD_INT 4
14076: GREATER
14077: IFFALSE 14088
// wait ( 0 0$1 ) ;
14079: LD_INT 35
14081: PPUSH
14082: CALL_OW 67
14086: GO 14059
// ComTurnUnit ( pom , pop ) ;
14088: LD_VAR 0 1
14092: PPUSH
14093: LD_EXP 28
14097: PPUSH
14098: CALL_OW 119
// CenterOnUnits ( [ pop ] ) ;
14102: LD_EXP 28
14106: PUSH
14107: EMPTY
14108: LIST
14109: PPUSH
14110: CALL_OW 85
// InGameOff ;
14114: CALL_OW 9
// DialogueOn ;
14118: CALL_OW 6
// interface_hidden := true ;
14122: LD_ADDR_OWVAR 54
14126: PUSH
14127: LD_INT 1
14129: ST_TO_ADDR
// if GetDistUnits ( pop , bur ) <= 10 then
14130: LD_EXP 28
14134: PPUSH
14135: LD_EXP 29
14139: PPUSH
14140: CALL_OW 296
14144: PUSH
14145: LD_INT 10
14147: LESSEQUAL
14148: IFFALSE 14156
// dialog_popov_s_burlakem else
14150: CALL 14187 0 0
14154: GO 14160
// dialog_popov_bez_burlaka ;
14156: CALL 14315 0 0
// stav_omikron = 9 ;
14160: LD_ADDR_EXP 39
14164: PUSH
14165: LD_INT 9
14167: ST_TO_ADDR
// interface_hidden := false ;
14168: LD_ADDR_OWVAR 54
14172: PUSH
14173: LD_INT 0
14175: ST_TO_ADDR
// DialogueOff ;
14176: CALL_OW 7
// totalni_ukonceni_mise_v_ingame_videu ;
14180: CALL 8768 0 0
// end ;
14184: PPOPN 2
14186: END
// function dialog_popov_s_burlakem ; begin
14187: LD_INT 0
14189: PPUSH
// Say ( bur , D10a-Bur-1 ) ;
14190: LD_EXP 29
14194: PPUSH
14195: LD_STRING D10a-Bur-1
14197: PPUSH
14198: CALL_OW 88
// Say ( pop , D10a-Pop-1 ) ;
14202: LD_EXP 28
14206: PPUSH
14207: LD_STRING D10a-Pop-1
14209: PPUSH
14210: CALL_OW 88
// Say ( bur , D10a-Bur-2 ) ;
14214: LD_EXP 29
14218: PPUSH
14219: LD_STRING D10a-Bur-2
14221: PPUSH
14222: CALL_OW 88
// Say ( pop , D10a-Pop-2 ) ;
14226: LD_EXP 28
14230: PPUSH
14231: LD_STRING D10a-Pop-2
14233: PPUSH
14234: CALL_OW 88
// Say ( bur , D10a-Bur-3 ) ;
14238: LD_EXP 29
14242: PPUSH
14243: LD_STRING D10a-Bur-3
14245: PPUSH
14246: CALL_OW 88
// Say ( pop , D10a-Pop-3 ) ;
14250: LD_EXP 28
14254: PPUSH
14255: LD_STRING D10a-Pop-3
14257: PPUSH
14258: CALL_OW 88
// Say ( bur , D10a-Bur-4 ) ;
14262: LD_EXP 29
14266: PPUSH
14267: LD_STRING D10a-Bur-4
14269: PPUSH
14270: CALL_OW 88
// Say ( pop , D10a-Pop-4 ) ;
14274: LD_EXP 28
14278: PPUSH
14279: LD_STRING D10a-Pop-4
14281: PPUSH
14282: CALL_OW 88
// Say ( bur , D10a-Bur-5 ) ;
14286: LD_EXP 29
14290: PPUSH
14291: LD_STRING D10a-Bur-5
14293: PPUSH
14294: CALL_OW 88
// Say ( pop , D10a-Pop-5 ) ;
14298: LD_EXP 28
14302: PPUSH
14303: LD_STRING D10a-Pop-5
14305: PPUSH
14306: CALL_OW 88
// end ;
14310: LD_VAR 0 1
14314: RET
// function dialog_popov_bez_burlaka ; var pom ; begin
14315: LD_INT 0
14317: PPUSH
14318: PPUSH
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 15
14326: PPUSH
14327: LD_INT 22
14329: PUSH
14330: LD_EXP 1
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 26
14351: PUSH
14352: LD_INT 1
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: ST_TO_ADDR
// if pom = 0 then
14369: LD_VAR 0 2
14373: PUSH
14374: LD_INT 0
14376: EQUAL
14377: IFFALSE 14381
// exit ;
14379: GO 14501
// Say ( pom , D10b-RSol1-1 ) ;
14381: LD_VAR 0 2
14385: PPUSH
14386: LD_STRING D10b-RSol1-1
14388: PPUSH
14389: CALL_OW 88
// Say ( pop , D10b-Pop-1 ) ;
14393: LD_EXP 28
14397: PPUSH
14398: LD_STRING D10b-Pop-1
14400: PPUSH
14401: CALL_OW 88
// Say ( pom , D10b-RSol1-2 ) ;
14405: LD_VAR 0 2
14409: PPUSH
14410: LD_STRING D10b-RSol1-2
14412: PPUSH
14413: CALL_OW 88
// SayRadio ( pop , D10b-Pop-2 ) ;
14417: LD_EXP 28
14421: PPUSH
14422: LD_STRING D10b-Pop-2
14424: PPUSH
14425: CALL_OW 94
// Say ( bur , D10b-Bur-2 ) ;
14429: LD_EXP 29
14433: PPUSH
14434: LD_STRING D10b-Bur-2
14436: PPUSH
14437: CALL_OW 88
// SayRadio ( pop , D10b-Pop-3 ) ;
14441: LD_EXP 28
14445: PPUSH
14446: LD_STRING D10b-Pop-3
14448: PPUSH
14449: CALL_OW 94
// Say ( bur , D10b-Bur-3 ) ;
14453: LD_EXP 29
14457: PPUSH
14458: LD_STRING D10b-Bur-3
14460: PPUSH
14461: CALL_OW 88
// SayRadio ( pop , D10b-Pop-4 ) ;
14465: LD_EXP 28
14469: PPUSH
14470: LD_STRING D10b-Pop-4
14472: PPUSH
14473: CALL_OW 94
// Say ( bur , D10b-Bur-4 ) ;
14477: LD_EXP 29
14481: PPUSH
14482: LD_STRING D10b-Bur-4
14484: PPUSH
14485: CALL_OW 88
// SayRadio ( pop , D10b-Pop-5 ) ;
14489: LD_EXP 28
14493: PPUSH
14494: LD_STRING D10b-Pop-5
14496: PPUSH
14497: CALL_OW 94
// end ;
14501: LD_VAR 0 1
14505: RET
// every 0 0$1 trigger stav_omikron in [ 0 , 1 , 2 , 3 ] do var pom , i , upoz , pom1 , pom2 , pom3 ; var dr_pom1 , dr_pom2 , dr_pom3 ; var dr_pom ;
14506: LD_EXP 39
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: LD_INT 1
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: IN
14529: IFFALSE 15321
14531: GO 14533
14533: DISABLE
14534: LD_INT 0
14536: PPUSH
14537: PPUSH
14538: PPUSH
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
14543: PPUSH
14544: PPUSH
14545: PPUSH
// begin upoz = false ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , f_not , [ f_type , unit_building ] ] ) ;
14554: LD_ADDR_VAR 0 1
14558: PUSH
14559: LD_INT 17
14561: PPUSH
14562: LD_INT 22
14564: PUSH
14565: LD_EXP 1
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: LD_INT 3
14576: PUSH
14577: LD_INT 21
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: PPUSH
14592: CALL_OW 70
14596: ST_TO_ADDR
// dr_pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
14597: LD_ADDR_VAR 0 10
14601: PUSH
14602: LD_INT 17
14604: PPUSH
14605: LD_INT 22
14607: PUSH
14608: LD_EXP 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 3
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PPUSH
14631: CALL_OW 70
14635: ST_TO_ADDR
// for i in dr_pom do
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: LD_VAR 0 10
14645: PUSH
14646: FOR_IN
14647: IFFALSE 14672
// pom = pom union UnitsInside ( i ) ;
14649: LD_ADDR_VAR 0 1
14653: PUSH
14654: LD_VAR 0 1
14658: PUSH
14659: LD_VAR 0 2
14663: PPUSH
14664: CALL_OW 313
14668: UNION
14669: ST_TO_ADDR
14670: GO 14646
14672: POP
14673: POP
// if pom then
14674: LD_VAR 0 1
14678: IFFALSE 14727
// for i in pom do
14680: LD_ADDR_VAR 0 2
14684: PUSH
14685: LD_VAR 0 1
14689: PUSH
14690: FOR_IN
14691: IFFALSE 14725
// if Getside ( Attacks ( i ) ) = Amici then
14693: LD_VAR 0 2
14697: PPUSH
14698: CALL_OW 320
14702: PPUSH
14703: CALL_OW 255
14707: PUSH
14708: LD_EXP 4
14712: EQUAL
14713: IFFALSE 14723
// upoz = true ;
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: LD_INT 1
14722: ST_TO_ADDR
14723: GO 14690
14725: POP
14726: POP
// if upoz then
14727: LD_VAR 0 3
14731: IFFALSE 15320
// begin DialogueOn ;
14733: CALL_OW 6
// interface_hidden := true ;
14737: LD_ADDR_OWVAR 54
14741: PUSH
14742: LD_INT 1
14744: ST_TO_ADDR
// if IsOK ( gny ) then
14745: LD_EXP 31
14749: PPUSH
14750: CALL_OW 302
14754: IFFALSE 14782
// begin Say ( gny , D11-Gny-1 ) ;
14756: LD_EXP 31
14760: PPUSH
14761: LD_STRING D11-Gny-1
14763: PPUSH
14764: CALL_OW 88
// Say ( bur , D11-Bur-1 ) ;
14768: LD_EXP 29
14772: PPUSH
14773: LD_STRING D11-Bur-1
14775: PPUSH
14776: CALL_OW 88
// end else
14780: GO 14794
// SayRadio ( kur , D11-Kur-1 ) ;
14782: LD_EXP 27
14786: PPUSH
14787: LD_STRING D11-Kur-1
14789: PPUSH
14790: CALL_OW 94
// interface_hidden := true ;
14794: LD_ADDR_OWVAR 54
14798: PUSH
14799: LD_INT 1
14801: ST_TO_ADDR
// DialogueOff ;
14802: CALL_OW 7
// InGameOn ;
14806: CALL_OW 8
// repeat pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14810: LD_ADDR_VAR 0 4
14814: PUSH
14815: LD_INT 18
14817: PPUSH
14818: LD_INT 22
14820: PUSH
14821: LD_EXP 1
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 3
14832: PUSH
14833: LD_INT 21
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 70
14852: ST_TO_ADDR
// dr_pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14853: LD_ADDR_VAR 0 7
14857: PUSH
14858: LD_INT 18
14860: PPUSH
14861: LD_INT 22
14863: PUSH
14864: LD_EXP 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 21
14875: PUSH
14876: LD_INT 3
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 70
14891: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14892: LD_ADDR_VAR 0 5
14896: PUSH
14897: LD_INT 19
14899: PPUSH
14900: LD_INT 22
14902: PUSH
14903: LD_EXP 1
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: LD_INT 21
14917: PUSH
14918: LD_INT 3
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 70
14934: ST_TO_ADDR
// dr_pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14935: LD_ADDR_VAR 0 8
14939: PUSH
14940: LD_INT 19
14942: PPUSH
14943: LD_INT 22
14945: PUSH
14946: LD_EXP 1
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 21
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 70
14973: ST_TO_ADDR
// pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14974: LD_ADDR_VAR 0 6
14978: PUSH
14979: LD_INT 37
14981: PPUSH
14982: LD_INT 22
14984: PUSH
14985: LD_EXP 1
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 3
14996: PUSH
14997: LD_INT 21
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: PPUSH
15012: CALL_OW 70
15016: ST_TO_ADDR
// dr_pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15017: LD_ADDR_VAR 0 9
15021: PUSH
15022: LD_INT 37
15024: PPUSH
15025: LD_INT 22
15027: PUSH
15028: LD_EXP 1
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 21
15039: PUSH
15040: LD_INT 3
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 70
15055: ST_TO_ADDR
// ComMoveToArea ( pom1 , om_ven_3 ) ;
15056: LD_VAR 0 4
15060: PPUSH
15061: LD_INT 31
15063: PPUSH
15064: CALL_OW 113
// for i in dr_pom1 do
15068: LD_ADDR_VAR 0 2
15072: PUSH
15073: LD_VAR 0 7
15077: PUSH
15078: FOR_IN
15079: IFFALSE 15119
// begin dr_pom = UnitsInside ( i ) ;
15081: LD_ADDR_VAR 0 10
15085: PUSH
15086: LD_VAR 0 2
15090: PPUSH
15091: CALL_OW 313
15095: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15096: LD_VAR 0 10
15100: PPUSH
15101: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_1 ) ;
15105: LD_VAR 0 10
15109: PPUSH
15110: LD_INT 29
15112: PPUSH
15113: CALL_OW 173
// end ;
15117: GO 15078
15119: POP
15120: POP
// ComMoveToArea ( pom2 , om_zone ) ;
15121: LD_VAR 0 5
15125: PPUSH
15126: LD_INT 8
15128: PPUSH
15129: CALL_OW 113
// for i in dr_pom2 do
15133: LD_ADDR_VAR 0 2
15137: PUSH
15138: LD_VAR 0 8
15142: PUSH
15143: FOR_IN
15144: IFFALSE 15184
// begin dr_pom = UnitsInside ( i ) ;
15146: LD_ADDR_VAR 0 10
15150: PUSH
15151: LD_VAR 0 2
15155: PPUSH
15156: CALL_OW 313
15160: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15161: LD_VAR 0 10
15165: PPUSH
15166: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_2 ) ;
15170: LD_VAR 0 10
15174: PPUSH
15175: LD_INT 30
15177: PPUSH
15178: CALL_OW 173
// end ;
15182: GO 15143
15184: POP
15185: POP
// ComMoveToArea ( pom3 , om_zone ) ;
15186: LD_VAR 0 6
15190: PPUSH
15191: LD_INT 8
15193: PPUSH
15194: CALL_OW 113
// for i in dr_pom3 do
15198: LD_ADDR_VAR 0 2
15202: PUSH
15203: LD_VAR 0 9
15207: PUSH
15208: FOR_IN
15209: IFFALSE 15249
// begin dr_pom = UnitsInside ( i ) ;
15211: LD_ADDR_VAR 0 10
15215: PUSH
15216: LD_VAR 0 2
15220: PPUSH
15221: CALL_OW 313
15225: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15226: LD_VAR 0 10
15230: PPUSH
15231: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_3 ) ;
15235: LD_VAR 0 10
15239: PPUSH
15240: LD_INT 31
15242: PPUSH
15243: CALL_OW 173
// end ;
15247: GO 15208
15249: POP
15250: POP
// wait ( 0 0$3 ) ;
15251: LD_INT 105
15253: PPUSH
15254: CALL_OW 67
// until not ( pom1 or pom3 or pom3 ) ;
15258: LD_VAR 0 4
15262: PUSH
15263: LD_VAR 0 6
15267: OR
15268: PUSH
15269: LD_VAR 0 6
15273: OR
15274: NOT
15275: IFFALSE 14810
// wait ( 0 0$4 ) ;
15277: LD_INT 140
15279: PPUSH
15280: CALL_OW 67
// if dr_pom3 then
15284: LD_VAR 0 9
15288: IFFALSE 15316
// for i in dr_pom3 do
15290: LD_ADDR_VAR 0 2
15294: PUSH
15295: LD_VAR 0 9
15299: PUSH
15300: FOR_IN
15301: IFFALSE 15314
// KillUnit ( i ) ;
15303: LD_VAR 0 2
15307: PPUSH
15308: CALL_OW 66
15312: GO 15300
15314: POP
15315: POP
// InGameOff ;
15316: CALL_OW 9
// end ; enable ;
15320: ENABLE
// end ;
15321: PPOPN 10
15323: END
// every 1 trigger stav_omikron in [ 4 , 5 , 6 ] do var pom , pom1 , pom2 , i , AreaNotCleared , firstDialog ;
15324: LD_EXP 39
15328: PUSH
15329: LD_INT 4
15331: PUSH
15332: LD_INT 5
15334: PUSH
15335: LD_INT 6
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: IN
15343: IFFALSE 15503
15345: GO 15347
15347: DISABLE
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
15352: PPUSH
15353: PPUSH
15354: PPUSH
15355: PPUSH
// begin enable ;
15356: ENABLE
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , 3 ] ] ) ;
15357: LD_ADDR_VAR 0 1
15361: PUSH
15362: LD_INT 20
15364: PPUSH
15365: LD_INT 21
15367: PUSH
15368: LD_INT 1
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 22
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PPUSH
15389: CALL_OW 70
15393: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) ;
15394: LD_ADDR_VAR 0 3
15398: PUSH
15399: LD_INT 20
15401: PPUSH
15402: LD_INT 21
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 22
15414: PUSH
15415: LD_INT 3
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 70
15430: ST_TO_ADDR
// if pom or pom2 then
15431: LD_VAR 0 1
15435: PUSH
15436: LD_VAR 0 3
15440: OR
15441: IFFALSE 15503
// begin ComMoveXY ( pom , 62 , 16 ) ;
15443: LD_VAR 0 1
15447: PPUSH
15448: LD_INT 62
15450: PPUSH
15451: LD_INT 16
15453: PPUSH
15454: CALL_OW 111
// ComMoveXY ( pom2 , 62 , 16 ) ;
15458: LD_VAR 0 3
15462: PPUSH
15463: LD_INT 62
15465: PPUSH
15466: LD_INT 16
15468: PPUSH
15469: CALL_OW 111
// if KurinDialog = 0 then
15473: LD_EXP 6
15477: PUSH
15478: LD_INT 0
15480: EQUAL
15481: IFFALSE 15503
// begin KurinDialog = 1 ;
15483: LD_ADDR_EXP 6
15487: PUSH
15488: LD_INT 1
15490: ST_TO_ADDR
// Say ( kur , D12-Kur-1 ) ;
15491: LD_EXP 27
15495: PPUSH
15496: LD_STRING D12-Kur-1
15498: PPUSH
15499: CALL_OW 88
// end ; end ; end ;
15503: PPOPN 6
15505: END
// export function hlaska_lhani ; begin
15506: LD_INT 0
15508: PPUSH
// DialogueOn ;
15509: CALL_OW 6
// interface_hidden := true ;
15513: LD_ADDR_OWVAR 54
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
// Say ( kur , D6d-Kur-1 ) ;
15521: LD_EXP 27
15525: PPUSH
15526: LD_STRING D6d-Kur-1
15528: PPUSH
15529: CALL_OW 88
// interface_hidden := false ;
15533: LD_ADDR_OWVAR 54
15537: PUSH
15538: LD_INT 0
15540: ST_TO_ADDR
// DialogueOff ;
15541: CALL_OW 7
// end ;
15545: LD_VAR 0 1
15549: RET
// export function dialog_upoz ; begin
15550: LD_INT 0
15552: PPUSH
// DialogueOn ;
15553: CALL_OW 6
// interface_hidden := true ;
15557: LD_ADDR_OWVAR 54
15561: PUSH
15562: LD_INT 1
15564: ST_TO_ADDR
// SayRadio ( kur , D7a-Kur-1 ) ;
15565: LD_EXP 27
15569: PPUSH
15570: LD_STRING D7a-Kur-1
15572: PPUSH
15573: CALL_OW 94
// interface_hidden := false ;
15577: LD_ADDR_OWVAR 54
15581: PUSH
15582: LD_INT 0
15584: ST_TO_ADDR
// DialogueOff ;
15585: CALL_OW 7
// end ;
15589: LD_VAR 0 1
15593: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15602: LD_ADDR_VAR 0 3
15606: PUSH
15607: LD_INT 22
15609: PUSH
15610: LD_EXP 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PPUSH
15651: CALL_OW 69
15655: ST_TO_ADDR
// for i in Ru_Units do
15656: LD_ADDR_VAR 0 2
15660: PUSH
15661: LD_VAR 0 3
15665: PUSH
15666: FOR_IN
15667: IFFALSE 15774
// begin pom = Attacks ( i ) ;
15669: LD_ADDR_VAR 0 1
15673: PUSH
15674: LD_VAR 0 2
15678: PPUSH
15679: CALL_OW 320
15683: ST_TO_ADDR
// if pom <> 0 then
15684: LD_VAR 0 1
15688: PUSH
15689: LD_INT 0
15691: NONEQUAL
15692: IFFALSE 15734
// if Getside ( pom ) in [ You2 , You3 ] then
15694: LD_VAR 0 1
15698: PPUSH
15699: CALL_OW 255
15703: PUSH
15704: LD_EXP 2
15708: PUSH
15709: LD_EXP 3
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: IN
15718: IFFALSE 15734
// konstanta_utoceni = konstanta_utoceni + 1 ;
15720: LD_ADDR_EXP 49
15724: PUSH
15725: LD_EXP 49
15729: PUSH
15730: LD_INT 1
15732: PLUS
15733: ST_TO_ADDR
// if pom = pop or pom = kur then
15734: LD_VAR 0 1
15738: PUSH
15739: LD_EXP 28
15743: EQUAL
15744: PUSH
15745: LD_VAR 0 1
15749: PUSH
15750: LD_EXP 27
15754: EQUAL
15755: OR
15756: IFFALSE 15772
// konstanta_utoceni = konstanta_utoceni + 10 ;
15758: LD_ADDR_EXP 49
15762: PUSH
15763: LD_EXP 49
15767: PUSH
15768: LD_INT 10
15770: PLUS
15771: ST_TO_ADDR
// end ;
15772: GO 15666
15774: POP
15775: POP
// if konstanta_utoceni < 10 then
15776: LD_EXP 49
15780: PUSH
15781: LD_INT 10
15783: LESS
15784: IFFALSE 15787
// enable ;
15786: ENABLE
// end ;
15787: PPOPN 3
15789: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
15790: LD_EXP 49
15794: PUSH
15795: LD_INT 10
15797: GREATEREQUAL
15798: IFFALSE 15807
15800: GO 15802
15802: DISABLE
// begin konec_mise_utok ;
15803: CALL 1444 0 0
// end ;
15807: END
// export function dialog_scholtze_umrel ; var i , pom , pom1 ; begin
15808: LD_INT 0
15810: PPUSH
15811: PPUSH
15812: PPUSH
15813: PPUSH
// pom = 0 ;
15814: LD_ADDR_VAR 0 3
15818: PUSH
15819: LD_INT 0
15821: ST_TO_ADDR
// DialogueOn ;
15822: CALL_OW 6
// interface_hidden := true ;
15826: LD_ADDR_OWVAR 54
15830: PUSH
15831: LD_INT 1
15833: ST_TO_ADDR
// ForceSay ( schol2 , D4b-Sch-1 ) ;
15834: LD_EXP 34
15838: PPUSH
15839: LD_STRING D4b-Sch-1
15841: PPUSH
15842: CALL_OW 91
// pom = FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
15846: LD_ADDR_VAR 0 3
15850: PUSH
15851: LD_INT 22
15853: PUSH
15854: LD_EXP 4
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 21
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PPUSH
15877: CALL_OW 69
15881: ST_TO_ADDR
// pom1 = NearestUnitToUnit ( pom , schol2 ) ;
15882: LD_ADDR_VAR 0 4
15886: PUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_EXP 34
15896: PPUSH
15897: CALL_OW 74
15901: ST_TO_ADDR
// if pom1 <> 0 then
15902: LD_VAR 0 4
15906: PUSH
15907: LD_INT 0
15909: NONEQUAL
15910: IFFALSE 15924
// SayNoName ( pom1 , D4b-Sol1-1 ) ;
15912: LD_VAR 0 4
15916: PPUSH
15917: LD_STRING D4b-Sol1-1
15919: PPUSH
15920: CALL_OW 90
// pom1 = NearestUnitToUnit ( pom diff pom1 , pom1 ) ;
15924: LD_ADDR_VAR 0 4
15928: PUSH
15929: LD_VAR 0 3
15933: PUSH
15934: LD_VAR 0 4
15938: DIFF
15939: PPUSH
15940: LD_VAR 0 4
15944: PPUSH
15945: CALL_OW 74
15949: ST_TO_ADDR
// SayNoName ( pom1 , D4b-Sol2-1 ) ;
15950: LD_VAR 0 4
15954: PPUSH
15955: LD_STRING D4b-Sol2-1
15957: PPUSH
15958: CALL_OW 90
// ForceSay ( schol2 , D4b-Sch-2 ) ;
15962: LD_EXP 34
15966: PPUSH
15967: LD_STRING D4b-Sch-2
15969: PPUSH
15970: CALL_OW 91
// Say ( bur , D4b-Bur-2 ) ;
15974: LD_EXP 29
15978: PPUSH
15979: LD_STRING D4b-Bur-2
15981: PPUSH
15982: CALL_OW 88
// SetLives ( schol2 , 0 ) ;
15986: LD_EXP 34
15990: PPUSH
15991: LD_INT 0
15993: PPUSH
15994: CALL_OW 234
// ChangeMissionObjectives ( MScholtzeDel ) ;
15998: LD_STRING MScholtzeDel
16000: PPUSH
16001: CALL_OW 337
// interface_hidden := false ;
16005: LD_ADDR_OWVAR 54
16009: PUSH
16010: LD_INT 0
16012: ST_TO_ADDR
// DialogueOff ;
16013: CALL_OW 7
// end ;
16017: LD_VAR 0 1
16021: RET
// on UnitGoesToRed ( un ) do begin if un = schol2 then
16022: LD_VAR 0 1
16026: PUSH
16027: LD_EXP 34
16031: EQUAL
16032: IFFALSE 16048
// if kecy_scholtze_nalezen then
16034: LD_EXP 44
16038: IFFALSE 16044
// exit else
16040: GO 16048
16042: GO 16048
// dialog_scholtze_umrel ;
16044: CALL 15808 0 0
// end ;
16048: PPOPN 1
16050: END
// every 0 0$2 trigger FilterUnitsInArea ( noTracksArea , [ [ f_side , You ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] , [ f_chassis , us_light_wheeled ] , [ f_chassis , us_medium_wheeled ] ] ] ) and stav_omikron in [ 0 , 1 , 2 , 3 ] do
16051: LD_INT 53
16053: PPUSH
16054: LD_INT 22
16056: PUSH
16057: LD_EXP 1
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 2
16068: PUSH
16069: LD_INT 31
16071: PUSH
16072: LD_INT 21
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 31
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 31
16091: PUSH
16092: LD_INT 1
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 31
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PPUSH
16120: CALL_OW 70
16124: PUSH
16125: LD_EXP 39
16129: PUSH
16130: LD_INT 0
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: LD_INT 2
16138: PUSH
16139: LD_INT 3
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: IN
16148: AND
16149: IFFALSE 16176
16151: GO 16153
16153: DISABLE
// begin CenterOnXY ( 38 , 58 ) ;
16154: LD_INT 38
16156: PPUSH
16157: LD_INT 58
16159: PPUSH
16160: CALL_OW 84
// Say ( bur , D5a-Bur-1 ) ;
16164: LD_EXP 29
16168: PPUSH
16169: LD_STRING D5a-Bur-1
16171: PPUSH
16172: CALL_OW 88
// end ;
16176: END
// on BuildingStarted ( b , builder ) do begin if b in FilterUnitsInArea ( restrictedArea , [ f_side , 3 ] ) then
16177: LD_VAR 0 1
16181: PUSH
16182: LD_INT 54
16184: PPUSH
16185: LD_INT 22
16187: PUSH
16188: LD_INT 3
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PPUSH
16195: CALL_OW 70
16199: IN
16200: IFFALSE 16211
// RemoveUnit ( b ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL_OW 64
// end ;
16211: PPOPN 2
16213: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) > 0 do var pom ;
16214: LD_INT 22
16216: PUSH
16217: LD_EXP 1
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 30
16228: PUSH
16229: LD_INT 26
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PPUSH
16240: CALL_OW 69
16244: PUSH
16245: LD_INT 0
16247: GREATER
16248: IFFALSE 16340
16250: GO 16252
16252: DISABLE
16253: LD_INT 0
16255: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_mine ] ] ) ;
16256: LD_ADDR_VAR 0 1
16260: PUSH
16261: LD_INT 22
16263: PUSH
16264: LD_EXP 1
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 30
16275: PUSH
16276: LD_INT 29
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PPUSH
16287: CALL_OW 69
16291: ST_TO_ADDR
// if pom > 0 then
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 0
16299: GREATER
16300: IFFALSE 16339
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
16302: LD_VAR 0 1
16306: PUSH
16307: LD_INT 1
16309: ARRAY
16310: PPUSH
16311: CALL_OW 304
16315: PUSH
16316: LD_INT 0
16318: NONEQUAL
16319: IFFALSE 16330
// wait ( 0 0$1 ) ;
16321: LD_INT 35
16323: PPUSH
16324: CALL_OW 67
16328: GO 16302
// Hint ( PowerPlant ) ;
16330: LD_STRING PowerPlant
16332: PPUSH
16333: CALL_OW 339
// end else
16337: GO 16340
// enable ;
16339: ENABLE
// end ;
16340: PPOPN 1
16342: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ; var pocet ;
16343: LD_INT 22
16345: PUSH
16346: LD_EXP 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 30
16357: PUSH
16358: LD_INT 0
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 69
16373: PUSH
16374: LD_INT 1
16376: GREATER
16377: IFFALSE 16537
16379: GO 16381
16381: DISABLE
16382: LD_INT 0
16384: PPUSH
16385: PPUSH
16386: PPUSH
16387: PPUSH
// begin pocet = 0 ;
16388: LD_ADDR_VAR 0 4
16392: PUSH
16393: LD_INT 0
16395: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
16396: LD_ADDR_VAR 0 1
16400: PUSH
16401: LD_INT 22
16403: PUSH
16404: LD_EXP 1
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 30
16415: PUSH
16416: LD_INT 0
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PPUSH
16427: CALL_OW 69
16431: ST_TO_ADDR
// pom1 = pom ;
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_VAR 0 1
16441: ST_TO_ADDR
// while pocet < 2 do
16442: LD_VAR 0 4
16446: PUSH
16447: LD_INT 2
16449: LESS
16450: IFFALSE 16530
// begin for i in pom do
16452: LD_ADDR_VAR 0 3
16456: PUSH
16457: LD_VAR 0 1
16461: PUSH
16462: FOR_IN
16463: IFFALSE 16509
// if not IsConstructed ( i ) then
16465: LD_VAR 0 3
16469: PPUSH
16470: CALL_OW 304
16474: NOT
16475: IFFALSE 16507
// begin pocet = pocet + 1 ;
16477: LD_ADDR_VAR 0 4
16481: PUSH
16482: LD_VAR 0 4
16486: PUSH
16487: LD_INT 1
16489: PLUS
16490: ST_TO_ADDR
// pom1 = pom1 diff i ;
16491: LD_ADDR_VAR 0 2
16495: PUSH
16496: LD_VAR 0 2
16500: PUSH
16501: LD_VAR 0 3
16505: DIFF
16506: ST_TO_ADDR
// end ;
16507: GO 16462
16509: POP
16510: POP
// pom = pom1 ;
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_VAR 0 2
16520: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16521: LD_INT 70
16523: PPUSH
16524: CALL_OW 67
// end ;
16528: GO 16442
// Hint ( Transport1 ) ;
16530: LD_STRING Transport1
16532: PPUSH
16533: CALL_OW 339
// end ;
16537: PPOPN 4
16539: END
// export function chmo_6 ; begin
16540: LD_INT 0
16542: PPUSH
// ChangeMissionObjectives ( M6a ) ;
16543: LD_STRING M6a
16545: PPUSH
16546: CALL_OW 337
// end ;
16550: LD_VAR 0 1
16554: RET
// export function query_refuel ; begin
16555: LD_INT 0
16557: PPUSH
// Query ( QRefuel ) ;
16558: LD_STRING QRefuel
16560: PPUSH
16561: CALL_OW 97
// end ;
16565: LD_VAR 0 1
16569: RET
// every 0 0$6 do var pom ;
16570: GO 16572
16572: DISABLE
16573: LD_INT 0
16575: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_EXP 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// if postavenych_aut >= pom then
16612: LD_EXP 47
16616: PUSH
16617: LD_VAR 0 1
16621: GREATEREQUAL
16622: IFFALSE 16633
// ChangeMissionObjectives ( M3a ) else
16624: LD_STRING M3a
16626: PPUSH
16627: CALL_OW 337
16631: GO 16634
// enable ;
16633: ENABLE
// end ;
16634: PPOPN 1
16636: END
// export function hint_cerpaci_auta ; begin
16637: LD_INT 0
16639: PPUSH
// Hint ( refuelingtrucks ) ;
16640: LD_STRING refuelingtrucks
16642: PPUSH
16643: CALL_OW 339
// end ; end_of_file
16647: LD_VAR 0 1
16651: RET
// export AMERICKA_POMOC_HLIDCE_LIST ; export AMERICKE_POSILY1_LIST ; export AMERICKE_POSILY2_LIST ; export AMERICKE_POSILY3_LIST ; export AMERICKE_POSILY4_LIST ; export AMERICKE_POSILY11_LIST ; export RUSKE_POSILY_NA_OMICRON_LIST ; export RUSKE_POSILY_RIDICI_LIST ; export RU_posily_na_utek ; export RUSI_CERPACI_AUTA_LIST ; export ARABI_KAMIKADZE_LIST ; export ARABI_PRVNI_VLNA ; export ARABI_FLAME_LIST ; export ARABI_SELF_AUTA ; export ARABI_VOJACI ; export ARABI_doraz ; export ARABI_KIROV_POSILY ; export Arabi_komanda1 ; export Arabi_komanda2 ; export Arabi_komanda3 ; export Arabi_komanda4 ; export other_survivors_mise_2 ; var ah , av ; export function get_sex ; begin
16652: LD_INT 0
16654: PPUSH
// if Prob ( 20 ) then
16655: LD_INT 20
16657: PPUSH
16658: CALL_OW 13
16662: IFFALSE 16674
// result = sex_female else
16664: LD_ADDR_VAR 0 1
16668: PUSH
16669: LD_INT 2
16671: ST_TO_ADDR
16672: GO 16682
// result = sex_male ;
16674: LD_ADDR_VAR 0 1
16678: PUSH
16679: LD_INT 1
16681: ST_TO_ADDR
// end ;
16682: LD_VAR 0 1
16686: RET
// export function get_human ( sex , clas , level , name ) ; begin
16687: LD_INT 0
16689: PPUSH
// PrepareHuman ( sex , clas , level ) ;
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: CALL_OW 380
// hc_name := name ;
16709: LD_ADDR_OWVAR 26
16713: PUSH
16714: LD_VAR 0 4
16718: ST_TO_ADDR
// result := CreateHuman ;
16719: LD_ADDR_VAR 0 5
16723: PUSH
16724: CALL_OW 44
16728: ST_TO_ADDR
// end ;
16729: LD_VAR 0 5
16733: RET
// export function create_americka_pomoc_hlidce ; var pom ; begin
16734: LD_INT 0
16736: PPUSH
16737: PPUSH
// pom = [ ] ;
16738: LD_ADDR_VAR 0 2
16742: PUSH
16743: EMPTY
16744: ST_TO_ADDR
// uc_side = Amici ;
16745: LD_ADDR_OWVAR 20
16749: PUSH
16750: LD_EXP 4
16754: ST_TO_ADDR
// uc_nation = nation_american ;
16755: LD_ADDR_OWVAR 21
16759: PUSH
16760: LD_INT 1
16762: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
16763: LD_ADDR_LOC 23
16767: PUSH
16768: CALL 16652 0 0
16772: PPUSH
16773: LD_INT 3
16775: PPUSH
16776: LD_EXP 13
16780: PUSH
16781: LD_OWVAR 67
16785: ARRAY
16786: PPUSH
16787: LD_STRING 
16789: PPUSH
16790: CALL 16687 0 4
16794: ST_TO_ADDR
// case difficulty of 1 :
16795: LD_OWVAR 67
16799: PUSH
16800: LD_INT 1
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16843
16808: POP
// begin vc_chassis = us_light_wheeled ;
16809: LD_ADDR_OWVAR 37
16813: PUSH
16814: LD_INT 1
16816: ST_TO_ADDR
// vc_control = control_manual ;
16817: LD_ADDR_OWVAR 38
16821: PUSH
16822: LD_INT 1
16824: ST_TO_ADDR
// vc_engine = engine_solar ;
16825: LD_ADDR_OWVAR 39
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// vc_weapon = us_light_gun ;
16833: LD_ADDR_OWVAR 40
16837: PUSH
16838: LD_INT 3
16840: ST_TO_ADDR
// end ; 2 :
16841: GO 16930
16843: LD_INT 2
16845: DOUBLE
16846: EQUAL
16847: IFTRUE 16851
16849: GO 16886
16851: POP
// begin vc_chassis = us_light_wheeled ;
16852: LD_ADDR_OWVAR 37
16856: PUSH
16857: LD_INT 1
16859: ST_TO_ADDR
// vc_control = control_manual ;
16860: LD_ADDR_OWVAR 38
16864: PUSH
16865: LD_INT 1
16867: ST_TO_ADDR
// vc_engine = engine_solar ;
16868: LD_ADDR_OWVAR 39
16872: PUSH
16873: LD_INT 2
16875: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
16876: LD_ADDR_OWVAR 40
16880: PUSH
16881: LD_INT 2
16883: ST_TO_ADDR
// end ; 3 :
16884: GO 16930
16886: LD_INT 3
16888: DOUBLE
16889: EQUAL
16890: IFTRUE 16894
16892: GO 16929
16894: POP
// begin vc_chassis = us_medium_wheeled ;
16895: LD_ADDR_OWVAR 37
16899: PUSH
16900: LD_INT 2
16902: ST_TO_ADDR
// vc_control = control_manual ;
16903: LD_ADDR_OWVAR 38
16907: PUSH
16908: LD_INT 1
16910: ST_TO_ADDR
// vc_engine = engine_combustion ;
16911: LD_ADDR_OWVAR 39
16915: PUSH
16916: LD_INT 1
16918: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
16919: LD_ADDR_OWVAR 40
16923: PUSH
16924: LD_INT 4
16926: ST_TO_ADDR
// end ; end ;
16927: GO 16930
16929: POP
// av = CreateVehicle ;
16930: LD_ADDR_LOC 24
16934: PUSH
16935: CALL_OW 45
16939: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
16940: LD_LOC 23
16944: PPUSH
16945: LD_LOC 24
16949: PPUSH
16950: CALL_OW 52
// pom = pom ^ av ;
16954: LD_ADDR_VAR 0 2
16958: PUSH
16959: LD_VAR 0 2
16963: PUSH
16964: LD_LOC 24
16968: ADD
16969: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
16970: LD_ADDR_LOC 23
16974: PUSH
16975: CALL 16652 0 0
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: LD_EXP 13
16987: PUSH
16988: LD_OWVAR 67
16992: ARRAY
16993: PPUSH
16994: LD_STRING 
16996: PPUSH
16997: CALL 16687 0 4
17001: ST_TO_ADDR
// pom = pom ^ ah ;
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_VAR 0 2
17011: PUSH
17012: LD_LOC 23
17016: ADD
17017: ST_TO_ADDR
// if pom > 2 then
17018: LD_VAR 0 2
17022: PUSH
17023: LD_INT 2
17025: GREATER
17026: IFFALSE 17072
// pom = pom ^ ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17028: LD_ADDR_VAR 0 2
17032: PUSH
17033: LD_VAR 0 2
17037: PUSH
17038: LD_LOC 23
17042: ADD
17043: PUSH
17044: CALL 16652 0 0
17048: PPUSH
17049: LD_INT 1
17051: PPUSH
17052: LD_EXP 13
17056: PUSH
17057: LD_OWVAR 67
17061: ARRAY
17062: PPUSH
17063: LD_STRING 
17065: PPUSH
17066: CALL 16687 0 4
17070: EQUAL
17071: ST_TO_ADDR
// AMERICKA_POMOC_HLIDCE_LIST = pom ;
17072: LD_ADDR_EXP 50
17076: PUSH
17077: LD_VAR 0 2
17081: ST_TO_ADDR
// end ;
17082: LD_VAR 0 1
17086: RET
// export function set_skily_amikum ; var pom , i ; begin
17087: LD_INT 0
17089: PPUSH
17090: PPUSH
17091: PPUSH
// pom = [ Am_sol1 , Am_sol2 , Am_sol3 , Am_sol4 , Am_vb1 , Am_vb2 , Am_vb3 , Am_vb4 ] ;
17092: LD_ADDR_VAR 0 2
17096: PUSH
17097: LD_INT 38
17099: PUSH
17100: LD_INT 39
17102: PUSH
17103: LD_INT 40
17105: PUSH
17106: LD_INT 41
17108: PUSH
17109: LD_INT 29
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 31
17117: PUSH
17118: LD_INT 32
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: ST_TO_ADDR
// for i in pom do
17131: LD_ADDR_VAR 0 3
17135: PUSH
17136: LD_VAR 0 2
17140: PUSH
17141: FOR_IN
17142: IFFALSE 17169
// uprav_cloveka ( i , class_soldier , levely_amici [ difficulty ] ) ;
17144: LD_VAR 0 3
17148: PPUSH
17149: LD_INT 1
17151: PPUSH
17152: LD_EXP 13
17156: PUSH
17157: LD_OWVAR 67
17161: ARRAY
17162: PPUSH
17163: CALL 17484 0 3
17167: GO 17141
17169: POP
17170: POP
// pom = [ Am_me1 , Am_me2 , Am_me3 ] ;
17171: LD_ADDR_VAR 0 2
17175: PUSH
17176: LD_INT 33
17178: PUSH
17179: LD_INT 34
17181: PUSH
17182: LD_INT 35
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: ST_TO_ADDR
// for i in pom do
17190: LD_ADDR_VAR 0 3
17194: PUSH
17195: LD_VAR 0 2
17199: PUSH
17200: FOR_IN
17201: IFFALSE 17228
// uprav_cloveka ( i , class_mechanic , levely_amici [ difficulty ] ) ;
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_INT 3
17210: PPUSH
17211: LD_EXP 13
17215: PUSH
17216: LD_OWVAR 67
17220: ARRAY
17221: PPUSH
17222: CALL 17484 0 3
17226: GO 17200
17228: POP
17229: POP
// uprav_cloveka ( Am_sci1 , class_scientistic , levely_amici [ difficulty ] ) ;
17230: LD_INT 37
17232: PPUSH
17233: LD_INT 4
17235: PPUSH
17236: LD_EXP 13
17240: PUSH
17241: LD_OWVAR 67
17245: ARRAY
17246: PPUSH
17247: CALL 17484 0 3
// uprav_cloveka ( Am_eng1 , class_engineer , levely_amici [ difficulty ] ) ;
17251: LD_INT 36
17253: PPUSH
17254: LD_INT 2
17256: PPUSH
17257: LD_EXP 13
17261: PUSH
17262: LD_OWVAR 67
17266: ARRAY
17267: PPUSH
17268: CALL 17484 0 3
// end ;
17272: LD_VAR 0 1
17276: RET
// function set_skills ( un , skills ) ; begin
17277: LD_INT 0
17279: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_INT 1
17287: PPUSH
17288: LD_VAR 0 2
17292: PUSH
17293: LD_INT 1
17295: ARRAY
17296: PPUSH
17297: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
17301: LD_VAR 0 1
17305: PPUSH
17306: LD_INT 2
17308: PPUSH
17309: LD_VAR 0 2
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: PPUSH
17318: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
17322: LD_VAR 0 1
17326: PPUSH
17327: LD_INT 3
17329: PPUSH
17330: LD_VAR 0 2
17334: PUSH
17335: LD_INT 3
17337: ARRAY
17338: PPUSH
17339: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: LD_INT 4
17350: PPUSH
17351: LD_VAR 0 2
17355: PUSH
17356: LD_INT 4
17358: ARRAY
17359: PPUSH
17360: CALL_OW 237
// end ;
17364: LD_VAR 0 3
17368: RET
// function get_skills ( un ) ; var pom3 , pom4 , pom5 , pom6 ; begin
17369: LD_INT 0
17371: PPUSH
17372: PPUSH
17373: PPUSH
17374: PPUSH
17375: PPUSH
// pom3 := GetSkill ( un , skill_combat ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: LD_INT 1
17388: PPUSH
17389: CALL_OW 259
17393: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_engineering ) ;
17394: LD_ADDR_VAR 0 4
17398: PUSH
17399: LD_VAR 0 1
17403: PPUSH
17404: LD_INT 2
17406: PPUSH
17407: CALL_OW 259
17411: ST_TO_ADDR
// pom5 := GetSkill ( un , skill_mechanical ) ;
17412: LD_ADDR_VAR 0 5
17416: PUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_INT 3
17424: PPUSH
17425: CALL_OW 259
17429: ST_TO_ADDR
// pom6 := GetSkill ( un , skill_scientistic ) ;
17430: LD_ADDR_VAR 0 6
17434: PUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: LD_INT 4
17442: PPUSH
17443: CALL_OW 259
17447: ST_TO_ADDR
// result := [ pom3 , pom4 , pom5 , pom6 ] end ;
17448: LD_ADDR_VAR 0 2
17452: PUSH
17453: LD_VAR 0 3
17457: PUSH
17458: LD_VAR 0 4
17462: PUSH
17463: LD_VAR 0 5
17467: PUSH
17468: LD_VAR 0 6
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: ST_TO_ADDR
17479: LD_VAR 0 2
17483: RET
// function uprav_cloveka ( un , clas , lev ) ; var pom1 ; begin
17484: LD_INT 0
17486: PPUSH
17487: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
17488: LD_INT 1
17490: PPUSH
17491: LD_VAR 0 2
17495: PPUSH
17496: LD_VAR 0 3
17500: PPUSH
17501: LD_STRING 
17503: PPUSH
17504: CALL 17566 0 4
// ah = CreateHuman ;
17508: LD_ADDR_LOC 23
17512: PUSH
17513: CALL_OW 44
17517: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
17518: LD_ADDR_VAR 0 5
17522: PUSH
17523: LD_LOC 23
17527: PPUSH
17528: CALL 17369 0 1
17532: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
17533: LD_VAR 0 1
17537: PPUSH
17538: LD_LOC 23
17542: PPUSH
17543: CALL 17369 0 1
17547: PPUSH
17548: CALL 17277 0 2
// DestroyUnit ( ah ) ;
17552: LD_LOC 23
17556: PPUSH
17557: CALL_OW 65
// end ;
17561: LD_VAR 0 4
17565: RET
// function prepare_human ( sex , clas , level , name ) ; begin
17566: LD_INT 0
17568: PPUSH
// PrepareHuman ( sex , clas , level ) ;
17569: LD_VAR 0 1
17573: PPUSH
17574: LD_VAR 0 2
17578: PPUSH
17579: LD_VAR 0 3
17583: PPUSH
17584: CALL_OW 380
// hc_name := name ;
17588: LD_ADDR_OWVAR 26
17592: PUSH
17593: LD_VAR 0 4
17597: ST_TO_ADDR
// end ;
17598: LD_VAR 0 5
17602: RET
// export function create_americke_posily ; var pom ; begin
17603: LD_INT 0
17605: PPUSH
17606: PPUSH
// uc_side = Amici ;
17607: LD_ADDR_OWVAR 20
17611: PUSH
17612: LD_EXP 4
17616: ST_TO_ADDR
// uc_nation = nation_american ;
17617: LD_ADDR_OWVAR 21
17621: PUSH
17622: LD_INT 1
17624: ST_TO_ADDR
// pom = [ ] ;
17625: LD_ADDR_VAR 0 2
17629: PUSH
17630: EMPTY
17631: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17632: LD_ADDR_VAR 0 2
17636: PUSH
17637: LD_VAR 0 2
17641: PUSH
17642: CALL 16652 0 0
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: LD_EXP 13
17654: PUSH
17655: LD_OWVAR 67
17659: ARRAY
17660: PPUSH
17661: LD_STRING 
17663: PPUSH
17664: CALL 16687 0 4
17668: ADD
17669: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17670: LD_ADDR_VAR 0 2
17674: PUSH
17675: LD_VAR 0 2
17679: PUSH
17680: CALL 16652 0 0
17684: PPUSH
17685: LD_INT 1
17687: PPUSH
17688: LD_EXP 13
17692: PUSH
17693: LD_OWVAR 67
17697: ARRAY
17698: PPUSH
17699: LD_STRING 
17701: PPUSH
17702: CALL 16687 0 4
17706: ADD
17707: ST_TO_ADDR
// AMERICKE_POSILY1_LIST = pom ;
17708: LD_ADDR_EXP 51
17712: PUSH
17713: LD_VAR 0 2
17717: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: CALL 16652 0 0
17727: PPUSH
17728: LD_INT 1
17730: PPUSH
17731: LD_EXP 13
17735: PUSH
17736: LD_OWVAR 67
17740: ARRAY
17741: PPUSH
17742: LD_STRING 
17744: PPUSH
17745: CALL 16687 0 4
17749: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17750: LD_ADDR_VAR 0 2
17754: PUSH
17755: LD_VAR 0 2
17759: PUSH
17760: CALL 16652 0 0
17764: PPUSH
17765: LD_INT 3
17767: PPUSH
17768: LD_EXP 13
17772: PUSH
17773: LD_OWVAR 67
17777: ARRAY
17778: PPUSH
17779: LD_STRING 
17781: PPUSH
17782: CALL 16687 0 4
17786: ADD
17787: ST_TO_ADDR
// if pom > 1 then
17788: LD_VAR 0 2
17792: PUSH
17793: LD_INT 1
17795: GREATER
17796: IFFALSE 17836
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
17798: LD_ADDR_VAR 0 2
17802: PUSH
17803: LD_VAR 0 2
17807: PUSH
17808: CALL 16652 0 0
17812: PPUSH
17813: LD_INT 4
17815: PPUSH
17816: LD_EXP 13
17820: PUSH
17821: LD_OWVAR 67
17825: ARRAY
17826: PPUSH
17827: LD_STRING 
17829: PPUSH
17830: CALL 16687 0 4
17834: ADD
17835: ST_TO_ADDR
// if pom > 2 then
17836: LD_VAR 0 2
17840: PUSH
17841: LD_INT 2
17843: GREATER
17844: IFFALSE 17884
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17846: LD_ADDR_VAR 0 2
17850: PUSH
17851: LD_VAR 0 2
17855: PUSH
17856: CALL 16652 0 0
17860: PPUSH
17861: LD_INT 1
17863: PPUSH
17864: LD_EXP 13
17868: PUSH
17869: LD_OWVAR 67
17873: ARRAY
17874: PPUSH
17875: LD_STRING 
17877: PPUSH
17878: CALL 16687 0 4
17882: ADD
17883: ST_TO_ADDR
// AMERICKE_POSILY2_LIST = pom ;
17884: LD_ADDR_EXP 52
17888: PUSH
17889: LD_VAR 0 2
17893: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17894: LD_ADDR_VAR 0 2
17898: PUSH
17899: CALL 16652 0 0
17903: PPUSH
17904: LD_INT 1
17906: PPUSH
17907: LD_EXP 13
17911: PUSH
17912: LD_OWVAR 67
17916: ARRAY
17917: PPUSH
17918: LD_STRING 
17920: PPUSH
17921: CALL 16687 0 4
17925: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17926: LD_ADDR_VAR 0 2
17930: PUSH
17931: LD_VAR 0 2
17935: PUSH
17936: CALL 16652 0 0
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: LD_EXP 13
17948: PUSH
17949: LD_OWVAR 67
17953: ARRAY
17954: PPUSH
17955: LD_STRING 
17957: PPUSH
17958: CALL 16687 0 4
17962: ADD
17963: ST_TO_ADDR
// if pom = 1 then
17964: LD_VAR 0 2
17968: PUSH
17969: LD_INT 1
17971: EQUAL
17972: IFFALSE 18012
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17974: LD_ADDR_VAR 0 2
17978: PUSH
17979: LD_VAR 0 2
17983: PUSH
17984: CALL 16652 0 0
17988: PPUSH
17989: LD_INT 3
17991: PPUSH
17992: LD_EXP 13
17996: PUSH
17997: LD_OWVAR 67
18001: ARRAY
18002: PPUSH
18003: LD_STRING 
18005: PPUSH
18006: CALL 16687 0 4
18010: ADD
18011: ST_TO_ADDR
// if pom = 2 then
18012: LD_VAR 0 2
18016: PUSH
18017: LD_INT 2
18019: EQUAL
18020: IFFALSE 18126
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18022: LD_ADDR_LOC 23
18026: PUSH
18027: CALL 16652 0 0
18031: PPUSH
18032: LD_INT 3
18034: PPUSH
18035: LD_EXP 13
18039: PUSH
18040: LD_OWVAR 67
18044: ARRAY
18045: PPUSH
18046: LD_STRING 
18048: PPUSH
18049: CALL 16687 0 4
18053: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
18054: LD_ADDR_OWVAR 37
18058: PUSH
18059: LD_INT 1
18061: ST_TO_ADDR
// vc_control = control_manual ;
18062: LD_ADDR_OWVAR 38
18066: PUSH
18067: LD_INT 1
18069: ST_TO_ADDR
// vc_engine = engine_solar ;
18070: LD_ADDR_OWVAR 39
18074: PUSH
18075: LD_INT 2
18077: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18078: LD_ADDR_OWVAR 40
18082: PUSH
18083: LD_INT 2
18085: ST_TO_ADDR
// av = CreateVehicle ;
18086: LD_ADDR_LOC 24
18090: PUSH
18091: CALL_OW 45
18095: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18096: LD_LOC 23
18100: PPUSH
18101: LD_LOC 24
18105: PPUSH
18106: CALL_OW 52
// pom = pom ^ av ;
18110: LD_ADDR_VAR 0 2
18114: PUSH
18115: LD_VAR 0 2
18119: PUSH
18120: LD_LOC 24
18124: ADD
18125: ST_TO_ADDR
// end ; if pom = 3 then
18126: LD_VAR 0 2
18130: PUSH
18131: LD_INT 3
18133: EQUAL
18134: IFFALSE 18240
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18136: LD_ADDR_LOC 23
18140: PUSH
18141: CALL 16652 0 0
18145: PPUSH
18146: LD_INT 3
18148: PPUSH
18149: LD_EXP 13
18153: PUSH
18154: LD_OWVAR 67
18158: ARRAY
18159: PPUSH
18160: LD_STRING 
18162: PPUSH
18163: CALL 16687 0 4
18167: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
18168: LD_ADDR_OWVAR 37
18172: PUSH
18173: LD_INT 2
18175: ST_TO_ADDR
// vc_control = control_manual ;
18176: LD_ADDR_OWVAR 38
18180: PUSH
18181: LD_INT 1
18183: ST_TO_ADDR
// vc_engine = engine_solar ;
18184: LD_ADDR_OWVAR 39
18188: PUSH
18189: LD_INT 2
18191: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
18192: LD_ADDR_OWVAR 40
18196: PUSH
18197: LD_INT 4
18199: ST_TO_ADDR
// av = CreateVehicle ;
18200: LD_ADDR_LOC 24
18204: PUSH
18205: CALL_OW 45
18209: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18210: LD_LOC 23
18214: PPUSH
18215: LD_LOC 24
18219: PPUSH
18220: CALL_OW 52
// pom = pom ^ av ;
18224: LD_ADDR_VAR 0 2
18228: PUSH
18229: LD_VAR 0 2
18233: PUSH
18234: LD_LOC 24
18238: ADD
18239: ST_TO_ADDR
// end ; AMERICKE_POSILY3_LIST = pom ;
18240: LD_ADDR_EXP 53
18244: PUSH
18245: LD_VAR 0 2
18249: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18250: LD_ADDR_VAR 0 2
18254: PUSH
18255: CALL 16652 0 0
18259: PPUSH
18260: LD_INT 1
18262: PPUSH
18263: LD_EXP 13
18267: PUSH
18268: LD_OWVAR 67
18272: ARRAY
18273: PPUSH
18274: LD_STRING 
18276: PPUSH
18277: CALL 16687 0 4
18281: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18282: LD_ADDR_VAR 0 2
18286: PUSH
18287: LD_VAR 0 2
18291: PUSH
18292: CALL 16652 0 0
18296: PPUSH
18297: LD_INT 1
18299: PPUSH
18300: LD_EXP 13
18304: PUSH
18305: LD_OWVAR 67
18309: ARRAY
18310: PPUSH
18311: LD_STRING 
18313: PPUSH
18314: CALL 16687 0 4
18318: ADD
18319: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18320: LD_ADDR_VAR 0 2
18324: PUSH
18325: LD_VAR 0 2
18329: PUSH
18330: CALL 16652 0 0
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: LD_EXP 13
18342: PUSH
18343: LD_OWVAR 67
18347: ARRAY
18348: PUSH
18349: LD_INT 1
18351: MINUS
18352: PPUSH
18353: LD_STRING 
18355: PPUSH
18356: CALL 16687 0 4
18360: ADD
18361: ST_TO_ADDR
// AMERICKE_POSILY4_LIST = pom ;
18362: LD_ADDR_EXP 54
18366: PUSH
18367: LD_VAR 0 2
18371: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18372: LD_ADDR_VAR 0 2
18376: PUSH
18377: CALL 16652 0 0
18381: PPUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_EXP 13
18389: PUSH
18390: LD_OWVAR 67
18394: ARRAY
18395: PPUSH
18396: LD_STRING 
18398: PPUSH
18399: CALL 16687 0 4
18403: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18404: LD_ADDR_VAR 0 2
18408: PUSH
18409: LD_VAR 0 2
18413: PUSH
18414: CALL 16652 0 0
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: LD_EXP 13
18426: PUSH
18427: LD_OWVAR 67
18431: ARRAY
18432: PUSH
18433: LD_INT 1
18435: MINUS
18436: PPUSH
18437: LD_STRING 
18439: PPUSH
18440: CALL 16687 0 4
18444: ADD
18445: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: LD_VAR 0 2
18455: PUSH
18456: CALL 16652 0 0
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: LD_EXP 13
18468: PUSH
18469: LD_OWVAR 67
18473: ARRAY
18474: PUSH
18475: LD_INT 1
18477: MINUS
18478: PPUSH
18479: LD_STRING 
18481: PPUSH
18482: CALL 16687 0 4
18486: ADD
18487: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] - 1 ,  ) ;
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: CALL 16652 0 0
18502: PPUSH
18503: LD_INT 4
18505: PPUSH
18506: LD_EXP 13
18510: PUSH
18511: LD_OWVAR 67
18515: ARRAY
18516: PUSH
18517: LD_INT 1
18519: MINUS
18520: PPUSH
18521: LD_STRING 
18523: PPUSH
18524: CALL 16687 0 4
18528: ADD
18529: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18530: LD_ADDR_LOC 23
18534: PUSH
18535: CALL 16652 0 0
18539: PPUSH
18540: LD_INT 3
18542: PPUSH
18543: LD_EXP 13
18547: PUSH
18548: LD_OWVAR 67
18552: ARRAY
18553: PPUSH
18554: LD_STRING 
18556: PPUSH
18557: CALL 16687 0 4
18561: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
18562: LD_ADDR_OWVAR 37
18566: PUSH
18567: LD_INT 3
18569: ST_TO_ADDR
// vc_control = control_manual ;
18570: LD_ADDR_OWVAR 38
18574: PUSH
18575: LD_INT 1
18577: ST_TO_ADDR
// vc_engine = engine_combustion ;
18578: LD_ADDR_OWVAR 39
18582: PUSH
18583: LD_INT 1
18585: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18586: LD_ADDR_OWVAR 40
18590: PUSH
18591: LD_INT 2
18593: ST_TO_ADDR
// av = CreateVehicle ;
18594: LD_ADDR_LOC 24
18598: PUSH
18599: CALL_OW 45
18603: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18604: LD_LOC 23
18608: PPUSH
18609: LD_LOC 24
18613: PPUSH
18614: CALL_OW 52
// pom = pom ^ av ;
18618: LD_ADDR_VAR 0 2
18622: PUSH
18623: LD_VAR 0 2
18627: PUSH
18628: LD_LOC 24
18632: ADD
18633: ST_TO_ADDR
// AMERICKE_POSILY11_LIST = pom ;
18634: LD_ADDR_EXP 55
18638: PUSH
18639: LD_VAR 0 2
18643: ST_TO_ADDR
// end ;
18644: LD_VAR 0 1
18648: RET
// export function create_kecajici_amik ; var pom ; begin
18649: LD_INT 0
18651: PPUSH
18652: PPUSH
// uc_side = Amici ;
18653: LD_ADDR_OWVAR 20
18657: PUSH
18658: LD_EXP 4
18662: ST_TO_ADDR
// uc_nation = nation_american ;
18663: LD_ADDR_OWVAR 21
18667: PUSH
18668: LD_INT 1
18670: ST_TO_ADDR
// pom = get_human ( sex_male , class_soldier , 4 , Mike Damme ) ;
18671: LD_ADDR_VAR 0 2
18675: PUSH
18676: LD_INT 1
18678: PPUSH
18679: LD_INT 1
18681: PPUSH
18682: LD_INT 4
18684: PPUSH
18685: LD_STRING Mike Damme
18687: PPUSH
18688: CALL 16687 0 4
18692: ST_TO_ADDR
// result := pom ;
18693: LD_ADDR_VAR 0 1
18697: PUSH
18698: LD_VAR 0 2
18702: ST_TO_ADDR
// end ;
18703: LD_VAR 0 1
18707: RET
// export function create_grishko ; var pom ; begin
18708: LD_INT 0
18710: PPUSH
18711: PPUSH
// pom = grishko ;
18712: LD_ADDR_VAR 0 2
18716: PUSH
18717: LD_EXP 35
18721: ST_TO_ADDR
// if pom = 0 then
18722: LD_VAR 0 2
18726: PUSH
18727: LD_INT 0
18729: EQUAL
18730: IFFALSE 18754
// pom = get_human ( sex_male , class_soldier , 4 , Piotr Grishko ) ;
18732: LD_ADDR_VAR 0 2
18736: PUSH
18737: LD_INT 1
18739: PPUSH
18740: LD_INT 1
18742: PPUSH
18743: LD_INT 4
18745: PPUSH
18746: LD_STRING Piotr Grishko
18748: PPUSH
18749: CALL 16687 0 4
18753: ST_TO_ADDR
// if pom > 0 then
18754: LD_VAR 0 2
18758: PUSH
18759: LD_INT 0
18761: GREATER
18762: IFFALSE 18798
// begin SetSide ( pom [ 1 ] , You2 ) ;
18764: LD_VAR 0 2
18768: PUSH
18769: LD_INT 1
18771: ARRAY
18772: PPUSH
18773: LD_EXP 2
18777: PPUSH
18778: CALL_OW 235
// result = pom [ 1 ] ;
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: LD_VAR 0 2
18791: PUSH
18792: LD_INT 1
18794: ARRAY
18795: ST_TO_ADDR
// end else
18796: GO 18805
// msg ( ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril ) ;
18798: LD_STRING ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril
18800: PPUSH
18801: CALL_OW 100
// end ;
18805: LD_VAR 0 1
18809: RET
// export function create_arabsky_utok ; var pom , i ; begin
18810: LD_INT 0
18812: PPUSH
18813: PPUSH
18814: PPUSH
// pom = FilterUnitsInArea ( Ar_jedn , [ [ f_side , Arabi ] , [ f_class , class_apeman_kamikaze ] ] ) ;
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_INT 9
18822: PPUSH
18823: LD_INT 22
18825: PUSH
18826: LD_EXP 5
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 25
18837: PUSH
18838: LD_INT 17
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 70
18853: ST_TO_ADDR
// ARABI_KAMIKADZE_LIST = pom ;
18854: LD_ADDR_EXP 60
18858: PUSH
18859: LD_VAR 0 2
18863: ST_TO_ADDR
// for i in pom do
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_VAR 0 2
18873: PUSH
18874: FOR_IN
18875: IFFALSE 18888
// RemoveUnit ( i ) ;
18877: LD_VAR 0 3
18881: PPUSH
18882: CALL_OW 64
18886: GO 18874
18888: POP
18889: POP
// pom = [ ] ;
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: EMPTY
18896: ST_TO_ADDR
// uc_side = Arabi ;
18897: LD_ADDR_OWVAR 20
18901: PUSH
18902: LD_EXP 5
18906: ST_TO_ADDR
// uc_nation = nation_arabian ;
18907: LD_ADDR_OWVAR 21
18911: PUSH
18912: LD_INT 2
18914: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18915: LD_ADDR_LOC 23
18919: PUSH
18920: CALL 16652 0 0
18924: PPUSH
18925: LD_INT 3
18927: PPUSH
18928: LD_INT 9
18930: PPUSH
18931: LD_STRING 
18933: PPUSH
18934: CALL 16687 0 4
18938: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
18939: LD_ADDR_OWVAR 37
18943: PUSH
18944: LD_INT 14
18946: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
18947: LD_ADDR_OWVAR 40
18951: PUSH
18952: LD_INT 26
18954: ST_TO_ADDR
// vc_control = control_manual ;
18955: LD_ADDR_OWVAR 38
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// vc_engine = engine_combustion ;
18963: LD_ADDR_OWVAR 39
18967: PUSH
18968: LD_INT 1
18970: ST_TO_ADDR
// av = CreateVehicle ;
18971: LD_ADDR_LOC 24
18975: PUSH
18976: CALL_OW 45
18980: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18981: LD_LOC 23
18985: PPUSH
18986: LD_LOC 24
18990: PPUSH
18991: CALL_OW 52
// pom = pom ^ av ;
18995: LD_ADDR_VAR 0 2
18999: PUSH
19000: LD_VAR 0 2
19004: PUSH
19005: LD_LOC 24
19009: ADD
19010: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19011: LD_ADDR_LOC 23
19015: PUSH
19016: CALL 16652 0 0
19020: PPUSH
19021: LD_INT 3
19023: PPUSH
19024: LD_INT 9
19026: PPUSH
19027: LD_STRING 
19029: PPUSH
19030: CALL 16687 0 4
19034: ST_TO_ADDR
// av = CreateVehicle ;
19035: LD_ADDR_LOC 24
19039: PUSH
19040: CALL_OW 45
19044: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19045: LD_LOC 23
19049: PPUSH
19050: LD_LOC 24
19054: PPUSH
19055: CALL_OW 52
// pom = pom ^ av ;
19059: LD_ADDR_VAR 0 2
19063: PUSH
19064: LD_VAR 0 2
19068: PUSH
19069: LD_LOC 24
19073: ADD
19074: ST_TO_ADDR
// ARABI_FLAME_LIST = pom ;
19075: LD_ADDR_EXP 62
19079: PUSH
19080: LD_VAR 0 2
19084: ST_TO_ADDR
// pom = [ ] ;
19085: LD_ADDR_VAR 0 2
19089: PUSH
19090: EMPTY
19091: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19092: LD_ADDR_LOC 23
19096: PUSH
19097: CALL 16652 0 0
19101: PPUSH
19102: LD_INT 3
19104: PPUSH
19105: LD_INT 9
19107: PPUSH
19108: LD_STRING 
19110: PPUSH
19111: CALL 16687 0 4
19115: ST_TO_ADDR
// vc_weapon = ar_gun ;
19116: LD_ADDR_OWVAR 40
19120: PUSH
19121: LD_INT 27
19123: ST_TO_ADDR
// av = CreateVehicle ;
19124: LD_ADDR_LOC 24
19128: PUSH
19129: CALL_OW 45
19133: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19134: LD_LOC 23
19138: PPUSH
19139: LD_LOC 24
19143: PPUSH
19144: CALL_OW 52
// pom = av ;
19148: LD_ADDR_VAR 0 2
19152: PUSH
19153: LD_LOC 24
19157: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19158: LD_ADDR_LOC 23
19162: PUSH
19163: CALL 16652 0 0
19167: PPUSH
19168: LD_INT 3
19170: PPUSH
19171: LD_INT 9
19173: PPUSH
19174: LD_STRING 
19176: PPUSH
19177: CALL 16687 0 4
19181: ST_TO_ADDR
// av = CreateVehicle ;
19182: LD_ADDR_LOC 24
19186: PUSH
19187: CALL_OW 45
19191: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19192: LD_LOC 23
19196: PPUSH
19197: LD_LOC 24
19201: PPUSH
19202: CALL_OW 52
// pom = pom ^ av ;
19206: LD_ADDR_VAR 0 2
19210: PUSH
19211: LD_VAR 0 2
19215: PUSH
19216: LD_LOC 24
19220: ADD
19221: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19222: LD_ADDR_LOC 23
19226: PUSH
19227: CALL 16652 0 0
19231: PPUSH
19232: LD_INT 3
19234: PPUSH
19235: LD_INT 9
19237: PPUSH
19238: LD_STRING 
19240: PPUSH
19241: CALL 16687 0 4
19245: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
19246: LD_ADDR_OWVAR 40
19250: PUSH
19251: LD_INT 25
19253: ST_TO_ADDR
// av = CreateVehicle ;
19254: LD_ADDR_LOC 24
19258: PUSH
19259: CALL_OW 45
19263: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19264: LD_LOC 23
19268: PPUSH
19269: LD_LOC 24
19273: PPUSH
19274: CALL_OW 52
// pom = pom ^ av ;
19278: LD_ADDR_VAR 0 2
19282: PUSH
19283: LD_VAR 0 2
19287: PUSH
19288: LD_LOC 24
19292: ADD
19293: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19294: LD_ADDR_LOC 23
19298: PUSH
19299: CALL 16652 0 0
19303: PPUSH
19304: LD_INT 3
19306: PPUSH
19307: LD_INT 9
19309: PPUSH
19310: LD_STRING 
19312: PPUSH
19313: CALL 16687 0 4
19317: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19318: LD_ADDR_OWVAR 40
19322: PUSH
19323: LD_INT 28
19325: ST_TO_ADDR
// av = CreateVehicle ;
19326: LD_ADDR_LOC 24
19330: PUSH
19331: CALL_OW 45
19335: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19336: LD_LOC 23
19340: PPUSH
19341: LD_LOC 24
19345: PPUSH
19346: CALL_OW 52
// pom = pom ^ av ;
19350: LD_ADDR_VAR 0 2
19354: PUSH
19355: LD_VAR 0 2
19359: PUSH
19360: LD_LOC 24
19364: ADD
19365: ST_TO_ADDR
// ARABI_PRVNI_VLNA = pom ;
19366: LD_ADDR_EXP 61
19370: PUSH
19371: LD_VAR 0 2
19375: ST_TO_ADDR
// pom = [ ] ;
19376: LD_ADDR_VAR 0 2
19380: PUSH
19381: EMPTY
19382: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
19383: LD_ADDR_OWVAR 40
19387: PUSH
19388: LD_INT 29
19390: ST_TO_ADDR
// vc_control = control_apeman ;
19391: LD_ADDR_OWVAR 38
19395: PUSH
19396: LD_INT 5
19398: ST_TO_ADDR
// ah = CreateVehicle ;
19399: LD_ADDR_LOC 23
19403: PUSH
19404: CALL_OW 45
19408: ST_TO_ADDR
// pom = ah ;
19409: LD_ADDR_VAR 0 2
19413: PUSH
19414: LD_LOC 23
19418: ST_TO_ADDR
// pom = pom ^ CreateVehicle ;
19419: LD_ADDR_VAR 0 2
19423: PUSH
19424: LD_VAR 0 2
19428: PUSH
19429: CALL_OW 45
19433: ADD
19434: ST_TO_ADDR
// ARABI_SELF_AUTA = pom ;
19435: LD_ADDR_EXP 63
19439: PUSH
19440: LD_VAR 0 2
19444: ST_TO_ADDR
// pom = [ ] ;
19445: LD_ADDR_VAR 0 2
19449: PUSH
19450: EMPTY
19451: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 9 ,  ) ;
19452: LD_ADDR_VAR 0 2
19456: PUSH
19457: CALL 16652 0 0
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: LD_INT 9
19467: PPUSH
19468: LD_STRING 
19470: PPUSH
19471: CALL 16687 0 4
19475: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19476: LD_ADDR_VAR 0 2
19480: PUSH
19481: LD_VAR 0 2
19485: PUSH
19486: CALL 16652 0 0
19490: PPUSH
19491: LD_INT 1
19493: PPUSH
19494: LD_INT 9
19496: PPUSH
19497: LD_STRING 
19499: PPUSH
19500: CALL 16687 0 4
19504: ADD
19505: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19506: LD_ADDR_VAR 0 2
19510: PUSH
19511: LD_VAR 0 2
19515: PUSH
19516: CALL 16652 0 0
19520: PPUSH
19521: LD_INT 1
19523: PPUSH
19524: LD_INT 9
19526: PPUSH
19527: LD_STRING 
19529: PPUSH
19530: CALL 16687 0 4
19534: ADD
19535: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: CALL 16652 0 0
19550: PPUSH
19551: LD_INT 1
19553: PPUSH
19554: LD_INT 9
19556: PPUSH
19557: LD_STRING 
19559: PPUSH
19560: CALL 16687 0 4
19564: ADD
19565: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19566: LD_ADDR_VAR 0 2
19570: PUSH
19571: LD_VAR 0 2
19575: PUSH
19576: CALL 16652 0 0
19580: PPUSH
19581: LD_INT 8
19583: PPUSH
19584: LD_INT 9
19586: PPUSH
19587: LD_STRING 
19589: PPUSH
19590: CALL 16687 0 4
19594: ADD
19595: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: LD_VAR 0 2
19605: PUSH
19606: CALL 16652 0 0
19610: PPUSH
19611: LD_INT 8
19613: PPUSH
19614: LD_INT 9
19616: PPUSH
19617: LD_STRING 
19619: PPUSH
19620: CALL 16687 0 4
19624: ADD
19625: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19626: LD_ADDR_VAR 0 2
19630: PUSH
19631: LD_VAR 0 2
19635: PUSH
19636: CALL 16652 0 0
19640: PPUSH
19641: LD_INT 1
19643: PPUSH
19644: LD_INT 9
19646: PPUSH
19647: LD_STRING 
19649: PPUSH
19650: CALL 16687 0 4
19654: ADD
19655: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19656: LD_ADDR_VAR 0 2
19660: PUSH
19661: LD_VAR 0 2
19665: PUSH
19666: CALL 16652 0 0
19670: PPUSH
19671: LD_INT 8
19673: PPUSH
19674: LD_INT 9
19676: PPUSH
19677: LD_STRING 
19679: PPUSH
19680: CALL 16687 0 4
19684: ADD
19685: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19686: LD_ADDR_VAR 0 2
19690: PUSH
19691: LD_VAR 0 2
19695: PUSH
19696: CALL 16652 0 0
19700: PPUSH
19701: LD_INT 8
19703: PPUSH
19704: LD_INT 9
19706: PPUSH
19707: LD_STRING 
19709: PPUSH
19710: CALL 16687 0 4
19714: ADD
19715: ST_TO_ADDR
// ARABI_VOJACI = pom ;
19716: LD_ADDR_EXP 64
19720: PUSH
19721: LD_VAR 0 2
19725: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19726: LD_ADDR_OWVAR 40
19730: PUSH
19731: LD_INT 28
19733: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19734: LD_ADDR_OWVAR 37
19738: PUSH
19739: LD_INT 14
19741: ST_TO_ADDR
// vc_control = control_manual ;
19742: LD_ADDR_OWVAR 38
19746: PUSH
19747: LD_INT 1
19749: ST_TO_ADDR
// vc_engine = engine_combustion ;
19750: LD_ADDR_OWVAR 39
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// av = CreateVehicle ;
19758: LD_ADDR_LOC 24
19762: PUSH
19763: CALL_OW 45
19767: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19768: LD_ADDR_LOC 23
19772: PUSH
19773: CALL 16652 0 0
19777: PPUSH
19778: LD_INT 3
19780: PPUSH
19781: LD_INT 9
19783: PPUSH
19784: LD_STRING 
19786: PPUSH
19787: CALL 16687 0 4
19791: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19792: LD_LOC 23
19796: PPUSH
19797: LD_LOC 24
19801: PPUSH
19802: CALL_OW 52
// pom = av ;
19806: LD_ADDR_VAR 0 2
19810: PUSH
19811: LD_LOC 24
19815: ST_TO_ADDR
// av = CreateVehicle ;
19816: LD_ADDR_LOC 24
19820: PUSH
19821: CALL_OW 45
19825: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19826: LD_ADDR_LOC 23
19830: PUSH
19831: CALL 16652 0 0
19835: PPUSH
19836: LD_INT 3
19838: PPUSH
19839: LD_INT 8
19841: PPUSH
19842: LD_STRING 
19844: PPUSH
19845: CALL 16687 0 4
19849: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19850: LD_LOC 23
19854: PPUSH
19855: LD_LOC 24
19859: PPUSH
19860: CALL_OW 52
// pom = pom ^ av ;
19864: LD_ADDR_VAR 0 2
19868: PUSH
19869: LD_VAR 0 2
19873: PUSH
19874: LD_LOC 24
19878: ADD
19879: ST_TO_ADDR
// av = CreateVehicle ;
19880: LD_ADDR_LOC 24
19884: PUSH
19885: CALL_OW 45
19889: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19890: LD_ADDR_LOC 23
19894: PUSH
19895: CALL 16652 0 0
19899: PPUSH
19900: LD_INT 3
19902: PPUSH
19903: LD_INT 8
19905: PPUSH
19906: LD_STRING 
19908: PPUSH
19909: CALL 16687 0 4
19913: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19914: LD_LOC 23
19918: PPUSH
19919: LD_LOC 24
19923: PPUSH
19924: CALL_OW 52
// pom = pom ^ av ;
19928: LD_ADDR_VAR 0 2
19932: PUSH
19933: LD_VAR 0 2
19937: PUSH
19938: LD_LOC 24
19942: ADD
19943: ST_TO_ADDR
// ARABI_doraz = pom ;
19944: LD_ADDR_EXP 65
19948: PUSH
19949: LD_VAR 0 2
19953: ST_TO_ADDR
// end ;
19954: LD_VAR 0 1
19958: RET
// export function create_ruske_posily_na_omicron ; var pom ; begin
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
// pom = [ ] ;
19963: LD_ADDR_VAR 0 2
19967: PUSH
19968: EMPTY
19969: ST_TO_ADDR
// uc_side = You2 ;
19970: LD_ADDR_OWVAR 20
19974: PUSH
19975: LD_EXP 2
19979: ST_TO_ADDR
// uc_nation = nation_russian ;
19980: LD_ADDR_OWVAR 21
19984: PUSH
19985: LD_INT 3
19987: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
19988: LD_ADDR_OWVAR 37
19992: PUSH
19993: LD_INT 23
19995: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
19996: LD_ADDR_OWVAR 40
20000: PUSH
20001: LD_INT 43
20003: ST_TO_ADDR
// vc_control = control_manual ;
20004: LD_ADDR_OWVAR 38
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// vc_engine = engine_combustion ;
20012: LD_ADDR_OWVAR 39
20016: PUSH
20017: LD_INT 1
20019: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20020: LD_ADDR_LOC 23
20024: PUSH
20025: CALL 16652 0 0
20029: PPUSH
20030: LD_INT 3
20032: PPUSH
20033: LD_EXP 20
20037: PUSH
20038: LD_OWVAR 67
20042: ARRAY
20043: PPUSH
20044: LD_STRING 
20046: PPUSH
20047: CALL 16687 0 4
20051: ST_TO_ADDR
// av = CreateVehicle ;
20052: LD_ADDR_LOC 24
20056: PUSH
20057: CALL_OW 45
20061: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20062: LD_LOC 23
20066: PPUSH
20067: LD_LOC 24
20071: PPUSH
20072: CALL_OW 52
// pom = pom ^ av ;
20076: LD_ADDR_VAR 0 2
20080: PUSH
20081: LD_VAR 0 2
20085: PUSH
20086: LD_LOC 24
20090: ADD
20091: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] + 1 ,  ) ;
20092: LD_ADDR_LOC 23
20096: PUSH
20097: CALL 16652 0 0
20101: PPUSH
20102: LD_INT 3
20104: PPUSH
20105: LD_EXP 20
20109: PUSH
20110: LD_OWVAR 67
20114: ARRAY
20115: PUSH
20116: LD_INT 1
20118: PLUS
20119: PPUSH
20120: LD_STRING 
20122: PPUSH
20123: CALL 16687 0 4
20127: ST_TO_ADDR
// av = CreateVehicle ;
20128: LD_ADDR_LOC 24
20132: PUSH
20133: CALL_OW 45
20137: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20138: LD_LOC 23
20142: PPUSH
20143: LD_LOC 24
20147: PPUSH
20148: CALL_OW 52
// pom = pom ^ av ;
20152: LD_ADDR_VAR 0 2
20156: PUSH
20157: LD_VAR 0 2
20161: PUSH
20162: LD_LOC 24
20166: ADD
20167: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20168: LD_ADDR_LOC 23
20172: PUSH
20173: CALL 16652 0 0
20177: PPUSH
20178: LD_INT 3
20180: PPUSH
20181: LD_EXP 20
20185: PUSH
20186: LD_OWVAR 67
20190: ARRAY
20191: PPUSH
20192: LD_STRING 
20194: PPUSH
20195: CALL 16687 0 4
20199: ST_TO_ADDR
// vc_weapon = ru_gun ;
20200: LD_ADDR_OWVAR 40
20204: PUSH
20205: LD_INT 44
20207: ST_TO_ADDR
// av = CreateVehicle ;
20208: LD_ADDR_LOC 24
20212: PUSH
20213: CALL_OW 45
20217: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20218: LD_LOC 23
20222: PPUSH
20223: LD_LOC 24
20227: PPUSH
20228: CALL_OW 52
// pom = pom ^ av ;
20232: LD_ADDR_VAR 0 2
20236: PUSH
20237: LD_VAR 0 2
20241: PUSH
20242: LD_LOC 24
20246: ADD
20247: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] - 1 ,  ) ;
20248: LD_ADDR_LOC 23
20252: PUSH
20253: CALL 16652 0 0
20257: PPUSH
20258: LD_INT 3
20260: PPUSH
20261: LD_EXP 20
20265: PUSH
20266: LD_OWVAR 67
20270: ARRAY
20271: PUSH
20272: LD_INT 1
20274: MINUS
20275: PPUSH
20276: LD_STRING 
20278: PPUSH
20279: CALL 16687 0 4
20283: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
20284: LD_ADDR_OWVAR 37
20288: PUSH
20289: LD_INT 22
20291: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
20292: LD_ADDR_OWVAR 40
20296: PUSH
20297: LD_INT 42
20299: ST_TO_ADDR
// av = CreateVehicle ;
20300: LD_ADDR_LOC 24
20304: PUSH
20305: CALL_OW 45
20309: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20310: LD_LOC 23
20314: PPUSH
20315: LD_LOC 24
20319: PPUSH
20320: CALL_OW 52
// pom = pom ^ av ;
20324: LD_ADDR_VAR 0 2
20328: PUSH
20329: LD_VAR 0 2
20333: PUSH
20334: LD_LOC 24
20338: ADD
20339: ST_TO_ADDR
// RUSKE_POSILY_NA_OMICRON_LIST = pom ;
20340: LD_ADDR_EXP 56
20344: PUSH
20345: LD_VAR 0 2
20349: ST_TO_ADDR
// pom = [ ] ;
20350: LD_ADDR_VAR 0 2
20354: PUSH
20355: EMPTY
20356: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20357: LD_ADDR_LOC 23
20361: PUSH
20362: CALL 16652 0 0
20366: PPUSH
20367: LD_INT 3
20369: PPUSH
20370: LD_EXP 20
20374: PUSH
20375: LD_OWVAR 67
20379: ARRAY
20380: PPUSH
20381: LD_STRING 
20383: PPUSH
20384: CALL 16687 0 4
20388: ST_TO_ADDR
// pom = pom ^ ah ;
20389: LD_ADDR_VAR 0 2
20393: PUSH
20394: LD_VAR 0 2
20398: PUSH
20399: LD_LOC 23
20403: ADD
20404: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20405: LD_ADDR_LOC 23
20409: PUSH
20410: CALL 16652 0 0
20414: PPUSH
20415: LD_INT 3
20417: PPUSH
20418: LD_EXP 20
20422: PUSH
20423: LD_OWVAR 67
20427: ARRAY
20428: PPUSH
20429: LD_STRING 
20431: PPUSH
20432: CALL 16687 0 4
20436: ST_TO_ADDR
// pom = pom ^ ah ;
20437: LD_ADDR_VAR 0 2
20441: PUSH
20442: LD_VAR 0 2
20446: PUSH
20447: LD_LOC 23
20451: ADD
20452: ST_TO_ADDR
// RUSKE_POSILY_RIDICI_LIST = pom ;
20453: LD_ADDR_EXP 57
20457: PUSH
20458: LD_VAR 0 2
20462: ST_TO_ADDR
// end ;
20463: LD_VAR 0 1
20467: RET
// export function create_dalsi_ridici ( auta ) ; var i , pom ; var poc ; begin
20468: LD_INT 0
20470: PPUSH
20471: PPUSH
20472: PPUSH
20473: PPUSH
// uc_side = You2 ;
20474: LD_ADDR_OWVAR 20
20478: PUSH
20479: LD_EXP 2
20483: ST_TO_ADDR
// uc_nation = nation_russian ;
20484: LD_ADDR_OWVAR 21
20488: PUSH
20489: LD_INT 3
20491: ST_TO_ADDR
// pom = [ ] ;
20492: LD_ADDR_VAR 0 4
20496: PUSH
20497: EMPTY
20498: ST_TO_ADDR
// poc = 0 ;
20499: LD_ADDR_VAR 0 5
20503: PUSH
20504: LD_INT 0
20506: ST_TO_ADDR
// for i in auta do
20507: LD_ADDR_VAR 0 3
20511: PUSH
20512: LD_VAR 0 1
20516: PUSH
20517: FOR_IN
20518: IFFALSE 20584
// begin poc = poc + 1 ;
20520: LD_ADDR_VAR 0 5
20524: PUSH
20525: LD_VAR 0 5
20529: PUSH
20530: LD_INT 1
20532: PLUS
20533: ST_TO_ADDR
// if poc < 3 then
20534: LD_VAR 0 5
20538: PUSH
20539: LD_INT 3
20541: LESS
20542: IFFALSE 20582
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20544: LD_ADDR_VAR 0 4
20548: PUSH
20549: LD_VAR 0 4
20553: PUSH
20554: CALL 16652 0 0
20558: PPUSH
20559: LD_INT 3
20561: PPUSH
20562: LD_EXP 20
20566: PUSH
20567: LD_OWVAR 67
20571: ARRAY
20572: PPUSH
20573: LD_STRING 
20575: PPUSH
20576: CALL 16687 0 4
20580: ADD
20581: ST_TO_ADDR
// end ;
20582: GO 20517
20584: POP
20585: POP
// result := pom ;
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_VAR 0 4
20595: ST_TO_ADDR
// end ;
20596: LD_VAR 0 2
20600: RET
// export function create_am_jednotky ; begin
20601: LD_INT 0
20603: PPUSH
// SetSide ( kur , You2 ) ;
20604: LD_EXP 27
20608: PPUSH
20609: LD_EXP 2
20613: PPUSH
20614: CALL_OW 235
// PlaceUnitXY ( kur , 149 , 79 , false ) ;
20618: LD_EXP 27
20622: PPUSH
20623: LD_INT 149
20625: PPUSH
20626: LD_INT 79
20628: PPUSH
20629: LD_INT 0
20631: PPUSH
20632: CALL_OW 48
// if BELKOV_SAVED then
20636: LD_EXP 24
20640: IFFALSE 20686
// begin SetSide ( bel , You2 ) ;
20642: LD_EXP 32
20646: PPUSH
20647: LD_EXP 2
20651: PPUSH
20652: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
20656: LD_EXP 32
20660: PPUSH
20661: LD_INT 1
20663: PPUSH
20664: CALL_OW 336
// PlaceUnitXY ( bel , 141 , 80 , false ) ;
20668: LD_EXP 32
20672: PPUSH
20673: LD_INT 141
20675: PPUSH
20676: LD_INT 80
20678: PPUSH
20679: LD_INT 0
20681: PPUSH
20682: CALL_OW 48
// end ; if kov <> 0 then
20686: LD_EXP 30
20690: PUSH
20691: LD_INT 0
20693: NONEQUAL
20694: IFFALSE 20740
// begin SetSide ( kov , You ) ;
20696: LD_EXP 30
20700: PPUSH
20701: LD_EXP 1
20705: PPUSH
20706: CALL_OW 235
// SetClass ( kov , class_soldier ) ;
20710: LD_EXP 30
20714: PPUSH
20715: LD_INT 1
20717: PPUSH
20718: CALL_OW 336
// PlaceUnitXY ( kov , 142 , 80 , false ) ;
20722: LD_EXP 30
20726: PPUSH
20727: LD_INT 142
20729: PPUSH
20730: LD_INT 80
20732: PPUSH
20733: LD_INT 0
20735: PPUSH
20736: CALL_OW 48
// end ; SetClass ( bur , class_mechanic ) ;
20740: LD_EXP 29
20744: PPUSH
20745: LD_INT 3
20747: PPUSH
20748: CALL_OW 336
// SetSide ( bur , You ) ;
20752: LD_EXP 29
20756: PPUSH
20757: LD_EXP 1
20761: PPUSH
20762: CALL_OW 235
// PlaceUnitXY ( bur , 144 , 80 , false ) ;
20766: LD_EXP 29
20770: PPUSH
20771: LD_INT 144
20773: PPUSH
20774: LD_INT 80
20776: PPUSH
20777: LD_INT 0
20779: PPUSH
20780: CALL_OW 48
// if gny <> 0 then
20784: LD_EXP 31
20788: PUSH
20789: LD_INT 0
20791: NONEQUAL
20792: IFFALSE 20850
// begin SetClass ( gny , class_soldier ) ;
20794: LD_EXP 31
20798: PPUSH
20799: LD_INT 1
20801: PPUSH
20802: CALL_OW 336
// SetSide ( gny , You ) ;
20806: LD_EXP 31
20810: PPUSH
20811: LD_EXP 1
20815: PPUSH
20816: CALL_OW 235
// SetClass ( gny , class_mechanic ) ;
20820: LD_EXP 31
20824: PPUSH
20825: LD_INT 3
20827: PPUSH
20828: CALL_OW 336
// PlaceUnitXY ( gny , 142 , 79 , false ) ;
20832: LD_EXP 31
20836: PPUSH
20837: LD_INT 142
20839: PPUSH
20840: LD_INT 79
20842: PPUSH
20843: LD_INT 0
20845: PPUSH
20846: CALL_OW 48
// end ; SetSide ( pop , You2 ) ;
20850: LD_EXP 28
20854: PPUSH
20855: LD_EXP 2
20859: PPUSH
20860: CALL_OW 235
// PlaceUnitXY ( pop , 136 , 79 , false ) ;
20864: LD_EXP 28
20868: PPUSH
20869: LD_INT 136
20871: PPUSH
20872: LD_INT 79
20874: PPUSH
20875: LD_INT 0
20877: PPUSH
20878: CALL_OW 48
// end ;
20882: LD_VAR 0 1
20886: RET
// export function nacti_osobu ( ident ) ; begin
20887: LD_INT 0
20889: PPUSH
// if CheckCharacterSet ( ident ) then
20890: LD_VAR 0 1
20894: PPUSH
20895: CALL_OW 29
20899: IFFALSE 20918
// result := CreateCharacter ( ident ) else
20901: LD_ADDR_VAR 0 2
20905: PUSH
20906: LD_VAR 0 1
20910: PPUSH
20911: CALL_OW 34
20915: ST_TO_ADDR
20916: GO 20926
// result := 0 ;
20918: LD_ADDR_VAR 0 2
20922: PUSH
20923: LD_INT 0
20925: ST_TO_ADDR
// end ;
20926: LD_VAR 0 2
20930: RET
// export function create_arabi_komanda ; var pom ; begin
20931: LD_INT 0
20933: PPUSH
20934: PPUSH
// uc_side = Arabi ;
20935: LD_ADDR_OWVAR 20
20939: PUSH
20940: LD_EXP 5
20944: ST_TO_ADDR
// uc_nation = nation_arabian ;
20945: LD_ADDR_OWVAR 21
20949: PUSH
20950: LD_INT 2
20952: ST_TO_ADDR
// pom = [ ] ;
20953: LD_ADDR_VAR 0 2
20957: PUSH
20958: EMPTY
20959: ST_TO_ADDR
// pom = get_human ( sex_female , class_soldier , 8 ,  ) ;
20960: LD_ADDR_VAR 0 2
20964: PUSH
20965: LD_INT 2
20967: PPUSH
20968: LD_INT 1
20970: PPUSH
20971: LD_INT 8
20973: PPUSH
20974: LD_STRING 
20976: PPUSH
20977: CALL 16687 0 4
20981: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20982: LD_ADDR_VAR 0 2
20986: PUSH
20987: LD_VAR 0 2
20991: PUSH
20992: CALL 16652 0 0
20996: PPUSH
20997: LD_INT 1
20999: PPUSH
21000: LD_INT 6
21002: PPUSH
21003: LD_STRING 
21005: PPUSH
21006: CALL 16687 0 4
21010: ADD
21011: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21012: LD_ADDR_VAR 0 2
21016: PUSH
21017: LD_VAR 0 2
21021: PUSH
21022: CALL 16652 0 0
21026: PPUSH
21027: LD_INT 1
21029: PPUSH
21030: LD_INT 6
21032: PPUSH
21033: LD_STRING 
21035: PPUSH
21036: CALL 16687 0 4
21040: ADD
21041: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21042: LD_ADDR_VAR 0 2
21046: PUSH
21047: LD_VAR 0 2
21051: PUSH
21052: CALL 16652 0 0
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: LD_INT 6
21062: PPUSH
21063: LD_STRING 
21065: PPUSH
21066: CALL 16687 0 4
21070: ADD
21071: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21072: LD_ADDR_LOC 23
21076: PUSH
21077: CALL 16652 0 0
21081: PPUSH
21082: LD_INT 3
21084: PPUSH
21085: LD_INT 6
21087: PPUSH
21088: LD_STRING 
21090: PPUSH
21091: CALL 16687 0 4
21095: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
21096: LD_ADDR_OWVAR 40
21100: PUSH
21101: LD_INT 25
21103: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21104: LD_ADDR_OWVAR 37
21108: PUSH
21109: LD_INT 13
21111: ST_TO_ADDR
// vc_control = control_manual ;
21112: LD_ADDR_OWVAR 38
21116: PUSH
21117: LD_INT 1
21119: ST_TO_ADDR
// vc_engine = engine_solar ;
21120: LD_ADDR_OWVAR 39
21124: PUSH
21125: LD_INT 2
21127: ST_TO_ADDR
// av = CreateVehicle ;
21128: LD_ADDR_LOC 24
21132: PUSH
21133: CALL_OW 45
21137: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21138: LD_LOC 23
21142: PPUSH
21143: LD_LOC 24
21147: PPUSH
21148: CALL_OW 52
// pom = pom ^ av ;
21152: LD_ADDR_VAR 0 2
21156: PUSH
21157: LD_VAR 0 2
21161: PUSH
21162: LD_LOC 24
21166: ADD
21167: ST_TO_ADDR
// vc_weapon = ar_gun ;
21168: LD_ADDR_OWVAR 40
21172: PUSH
21173: LD_INT 27
21175: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21176: LD_ADDR_OWVAR 37
21180: PUSH
21181: LD_INT 14
21183: ST_TO_ADDR
// vc_control = control_apeman ;
21184: LD_ADDR_OWVAR 38
21188: PUSH
21189: LD_INT 5
21191: ST_TO_ADDR
// vc_engine = engine_combustion ;
21192: LD_ADDR_OWVAR 39
21196: PUSH
21197: LD_INT 1
21199: ST_TO_ADDR
// av = CreateVehicle ;
21200: LD_ADDR_LOC 24
21204: PUSH
21205: CALL_OW 45
21209: ST_TO_ADDR
// pom = pom ^ av ;
21210: LD_ADDR_VAR 0 2
21214: PUSH
21215: LD_VAR 0 2
21219: PUSH
21220: LD_LOC 24
21224: ADD
21225: ST_TO_ADDR
// vc_weapon = ar_gun ;
21226: LD_ADDR_OWVAR 40
21230: PUSH
21231: LD_INT 27
21233: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21234: LD_ADDR_OWVAR 37
21238: PUSH
21239: LD_INT 14
21241: ST_TO_ADDR
// vc_control = control_apeman ;
21242: LD_ADDR_OWVAR 38
21246: PUSH
21247: LD_INT 5
21249: ST_TO_ADDR
// vc_engine = engine_combustion ;
21250: LD_ADDR_OWVAR 39
21254: PUSH
21255: LD_INT 1
21257: ST_TO_ADDR
// av = CreateVehicle ;
21258: LD_ADDR_LOC 24
21262: PUSH
21263: CALL_OW 45
21267: ST_TO_ADDR
// pom = pom ^ av ;
21268: LD_ADDR_VAR 0 2
21272: PUSH
21273: LD_VAR 0 2
21277: PUSH
21278: LD_LOC 24
21282: ADD
21283: ST_TO_ADDR
// Arabi_komanda1 = pom ;
21284: LD_ADDR_EXP 67
21288: PUSH
21289: LD_VAR 0 2
21293: ST_TO_ADDR
// Arabi_komanda2 = pom ;
21294: LD_ADDR_EXP 68
21298: PUSH
21299: LD_VAR 0 2
21303: ST_TO_ADDR
// vc_weapon = ar_gun ;
21304: LD_ADDR_OWVAR 40
21308: PUSH
21309: LD_INT 27
21311: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21312: LD_ADDR_OWVAR 37
21316: PUSH
21317: LD_INT 14
21319: ST_TO_ADDR
// vc_control = control_apeman ;
21320: LD_ADDR_OWVAR 38
21324: PUSH
21325: LD_INT 5
21327: ST_TO_ADDR
// vc_engine = engine_combustion ;
21328: LD_ADDR_OWVAR 39
21332: PUSH
21333: LD_INT 1
21335: ST_TO_ADDR
// av = CreateVehicle ;
21336: LD_ADDR_LOC 24
21340: PUSH
21341: CALL_OW 45
21345: ST_TO_ADDR
// pom = pom ^ av ;
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_VAR 0 2
21355: PUSH
21356: LD_LOC 24
21360: ADD
21361: ST_TO_ADDR
// av = CreateVehicle ;
21362: LD_ADDR_LOC 24
21366: PUSH
21367: CALL_OW 45
21371: ST_TO_ADDR
// pom = pom ^ av ;
21372: LD_ADDR_VAR 0 2
21376: PUSH
21377: LD_VAR 0 2
21381: PUSH
21382: LD_LOC 24
21386: ADD
21387: ST_TO_ADDR
// vc_weapon = ar_gun ;
21388: LD_ADDR_OWVAR 40
21392: PUSH
21393: LD_INT 27
21395: ST_TO_ADDR
// av = CreateVehicle ;
21396: LD_ADDR_LOC 24
21400: PUSH
21401: CALL_OW 45
21405: ST_TO_ADDR
// pom = pom ^ av ;
21406: LD_ADDR_VAR 0 2
21410: PUSH
21411: LD_VAR 0 2
21415: PUSH
21416: LD_LOC 24
21420: ADD
21421: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: LD_VAR 0 2
21431: PUSH
21432: CALL 16652 0 0
21436: PPUSH
21437: LD_INT 1
21439: PPUSH
21440: LD_INT 6
21442: PPUSH
21443: LD_STRING 
21445: PPUSH
21446: CALL 16687 0 4
21450: ADD
21451: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21452: LD_ADDR_VAR 0 2
21456: PUSH
21457: LD_VAR 0 2
21461: PUSH
21462: CALL 16652 0 0
21466: PPUSH
21467: LD_INT 1
21469: PPUSH
21470: LD_INT 6
21472: PPUSH
21473: LD_STRING 
21475: PPUSH
21476: CALL 16687 0 4
21480: ADD
21481: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21482: LD_ADDR_LOC 23
21486: PUSH
21487: CALL 16652 0 0
21491: PPUSH
21492: LD_INT 3
21494: PPUSH
21495: LD_INT 6
21497: PPUSH
21498: LD_STRING 
21500: PPUSH
21501: CALL 16687 0 4
21505: ST_TO_ADDR
// vc_weapon = ar_gun ;
21506: LD_ADDR_OWVAR 40
21510: PUSH
21511: LD_INT 27
21513: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21514: LD_ADDR_OWVAR 37
21518: PUSH
21519: LD_INT 13
21521: ST_TO_ADDR
// vc_control = control_manual ;
21522: LD_ADDR_OWVAR 38
21526: PUSH
21527: LD_INT 1
21529: ST_TO_ADDR
// vc_engine = engine_siberite ;
21530: LD_ADDR_OWVAR 39
21534: PUSH
21535: LD_INT 3
21537: ST_TO_ADDR
// av = CreateVehicle ;
21538: LD_ADDR_LOC 24
21542: PUSH
21543: CALL_OW 45
21547: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21548: LD_LOC 23
21552: PPUSH
21553: LD_LOC 24
21557: PPUSH
21558: CALL_OW 52
// pom = pom ^ av ;
21562: LD_ADDR_VAR 0 2
21566: PUSH
21567: LD_VAR 0 2
21571: PUSH
21572: LD_LOC 24
21576: ADD
21577: ST_TO_ADDR
// Arabi_komanda3 = pom ;
21578: LD_ADDR_EXP 69
21582: PUSH
21583: LD_VAR 0 2
21587: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 8 ,  ) ;
21588: LD_ADDR_VAR 0 2
21592: PUSH
21593: CALL 16652 0 0
21597: PPUSH
21598: LD_INT 1
21600: PPUSH
21601: LD_INT 8
21603: PPUSH
21604: LD_STRING 
21606: PPUSH
21607: CALL 16687 0 4
21611: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21612: LD_ADDR_VAR 0 2
21616: PUSH
21617: LD_VAR 0 2
21621: PUSH
21622: CALL 16652 0 0
21626: PPUSH
21627: LD_INT 1
21629: PPUSH
21630: LD_INT 6
21632: PPUSH
21633: LD_STRING 
21635: PPUSH
21636: CALL 16687 0 4
21640: ADD
21641: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21642: LD_ADDR_VAR 0 2
21646: PUSH
21647: LD_VAR 0 2
21651: PUSH
21652: CALL 16652 0 0
21656: PPUSH
21657: LD_INT 1
21659: PPUSH
21660: LD_INT 6
21662: PPUSH
21663: LD_STRING 
21665: PPUSH
21666: CALL 16687 0 4
21670: ADD
21671: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21672: LD_ADDR_VAR 0 2
21676: PUSH
21677: LD_VAR 0 2
21681: PUSH
21682: CALL 16652 0 0
21686: PPUSH
21687: LD_INT 8
21689: PPUSH
21690: LD_INT 6
21692: PPUSH
21693: LD_STRING 
21695: PPUSH
21696: CALL 16687 0 4
21700: ADD
21701: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21702: LD_ADDR_VAR 0 2
21706: PUSH
21707: LD_VAR 0 2
21711: PUSH
21712: CALL 16652 0 0
21716: PPUSH
21717: LD_INT 8
21719: PPUSH
21720: LD_INT 6
21722: PPUSH
21723: LD_STRING 
21725: PPUSH
21726: CALL 16687 0 4
21730: ADD
21731: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , 6 ,  ) ;
21732: LD_ADDR_VAR 0 2
21736: PUSH
21737: LD_VAR 0 2
21741: PUSH
21742: CALL 16652 0 0
21746: PPUSH
21747: LD_INT 4
21749: PPUSH
21750: LD_INT 6
21752: PPUSH
21753: LD_STRING 
21755: PPUSH
21756: CALL 16687 0 4
21760: ADD
21761: ST_TO_ADDR
// Arabi_komanda4 = pom ;
21762: LD_ADDR_EXP 70
21766: PUSH
21767: LD_VAR 0 2
21771: ST_TO_ADDR
// end ;
21772: LD_VAR 0 1
21776: RET
// export function create_ru_posily_ma_utek ; var pom ; begin
21777: LD_INT 0
21779: PPUSH
21780: PPUSH
// uc_side = You2 ;
21781: LD_ADDR_OWVAR 20
21785: PUSH
21786: LD_EXP 2
21790: ST_TO_ADDR
// uc_nation = nation_russian ;
21791: LD_ADDR_OWVAR 21
21795: PUSH
21796: LD_INT 3
21798: ST_TO_ADDR
// pom = [ ] ;
21799: LD_ADDR_VAR 0 2
21803: PUSH
21804: EMPTY
21805: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21806: LD_ADDR_LOC 23
21810: PUSH
21811: CALL 16652 0 0
21815: PPUSH
21816: LD_INT 3
21818: PPUSH
21819: LD_INT 3
21821: PPUSH
21822: LD_STRING 
21824: PPUSH
21825: CALL 16687 0 4
21829: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
21830: LD_ADDR_OWVAR 40
21834: PUSH
21835: LD_INT 42
21837: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
21838: LD_ADDR_OWVAR 37
21842: PUSH
21843: LD_INT 23
21845: ST_TO_ADDR
// vc_control = control_manual ;
21846: LD_ADDR_OWVAR 38
21850: PUSH
21851: LD_INT 1
21853: ST_TO_ADDR
// vc_engine = engine_combustion ;
21854: LD_ADDR_OWVAR 39
21858: PUSH
21859: LD_INT 1
21861: ST_TO_ADDR
// av = CreateVehicle ;
21862: LD_ADDR_LOC 24
21866: PUSH
21867: CALL_OW 45
21871: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21872: LD_LOC 23
21876: PPUSH
21877: LD_LOC 24
21881: PPUSH
21882: CALL_OW 52
// pom = pom ^ av ;
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_VAR 0 2
21895: PUSH
21896: LD_LOC 24
21900: ADD
21901: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21902: LD_ADDR_LOC 23
21906: PUSH
21907: CALL 16652 0 0
21911: PPUSH
21912: LD_INT 3
21914: PPUSH
21915: LD_INT 3
21917: PPUSH
21918: LD_STRING 
21920: PPUSH
21921: CALL 16687 0 4
21925: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
21926: LD_ADDR_OWVAR 37
21930: PUSH
21931: LD_INT 21
21933: ST_TO_ADDR
// av = CreateVehicle ;
21934: LD_ADDR_LOC 24
21938: PUSH
21939: CALL_OW 45
21943: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21944: LD_LOC 23
21948: PPUSH
21949: LD_LOC 24
21953: PPUSH
21954: CALL_OW 52
// pom = pom ^ av ;
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: LD_VAR 0 2
21967: PUSH
21968: LD_LOC 24
21972: ADD
21973: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21974: LD_ADDR_VAR 0 2
21978: PUSH
21979: LD_VAR 0 2
21983: PUSH
21984: CALL 16652 0 0
21988: PPUSH
21989: LD_INT 1
21991: PPUSH
21992: LD_INT 3
21994: PPUSH
21995: LD_STRING 
21997: PPUSH
21998: CALL 16687 0 4
22002: ADD
22003: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22004: LD_ADDR_VAR 0 2
22008: PUSH
22009: LD_VAR 0 2
22013: PUSH
22014: CALL 16652 0 0
22018: PPUSH
22019: LD_INT 1
22021: PPUSH
22022: LD_INT 3
22024: PPUSH
22025: LD_STRING 
22027: PPUSH
22028: CALL 16687 0 4
22032: ADD
22033: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_VAR 0 2
22043: PUSH
22044: CALL 16652 0 0
22048: PPUSH
22049: LD_INT 1
22051: PPUSH
22052: LD_INT 3
22054: PPUSH
22055: LD_STRING 
22057: PPUSH
22058: CALL 16687 0 4
22062: ADD
22063: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22064: LD_ADDR_VAR 0 2
22068: PUSH
22069: LD_VAR 0 2
22073: PUSH
22074: CALL 16652 0 0
22078: PPUSH
22079: LD_INT 3
22081: PPUSH
22082: LD_INT 3
22084: PPUSH
22085: LD_STRING 
22087: PPUSH
22088: CALL 16687 0 4
22092: ADD
22093: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22094: LD_ADDR_VAR 0 2
22098: PUSH
22099: LD_VAR 0 2
22103: PUSH
22104: CALL 16652 0 0
22108: PPUSH
22109: LD_INT 3
22111: PPUSH
22112: LD_INT 3
22114: PPUSH
22115: LD_STRING 
22117: PPUSH
22118: CALL 16687 0 4
22122: ADD
22123: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22124: LD_ADDR_VAR 0 2
22128: PUSH
22129: LD_VAR 0 2
22133: PUSH
22134: CALL 16652 0 0
22138: PPUSH
22139: LD_INT 3
22141: PPUSH
22142: LD_INT 3
22144: PPUSH
22145: LD_STRING 
22147: PPUSH
22148: CALL 16687 0 4
22152: ADD
22153: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22154: LD_ADDR_VAR 0 2
22158: PUSH
22159: LD_VAR 0 2
22163: PUSH
22164: CALL 16652 0 0
22168: PPUSH
22169: LD_INT 2
22171: PPUSH
22172: LD_INT 3
22174: PPUSH
22175: LD_STRING 
22177: PPUSH
22178: CALL 16687 0 4
22182: ADD
22183: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22184: LD_ADDR_VAR 0 2
22188: PUSH
22189: LD_VAR 0 2
22193: PUSH
22194: CALL 16652 0 0
22198: PPUSH
22199: LD_INT 2
22201: PPUSH
22202: LD_INT 3
22204: PPUSH
22205: LD_STRING 
22207: PPUSH
22208: CALL 16687 0 4
22212: ADD
22213: ST_TO_ADDR
// RU_posily_na_utek = pom ;
22214: LD_ADDR_EXP 58
22218: PUSH
22219: LD_VAR 0 2
22223: ST_TO_ADDR
// end ;
22224: LD_VAR 0 1
22228: RET
// export function create_arabi_na_posily_kirovu ; var pom ; begin
22229: LD_INT 0
22231: PPUSH
22232: PPUSH
// pom = [ ] ;
22233: LD_ADDR_VAR 0 2
22237: PUSH
22238: EMPTY
22239: ST_TO_ADDR
// uc_side = Arabi ;
22240: LD_ADDR_OWVAR 20
22244: PUSH
22245: LD_EXP 5
22249: ST_TO_ADDR
// uc_nation = nation_arabian ;
22250: LD_ADDR_OWVAR 21
22254: PUSH
22255: LD_INT 2
22257: ST_TO_ADDR
// vc_weapon = ar_gun ;
22258: LD_ADDR_OWVAR 40
22262: PUSH
22263: LD_INT 27
22265: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
22266: LD_ADDR_OWVAR 37
22270: PUSH
22271: LD_INT 14
22273: ST_TO_ADDR
// vc_control = control_apeman ;
22274: LD_ADDR_OWVAR 38
22278: PUSH
22279: LD_INT 5
22281: ST_TO_ADDR
// vc_engine = engine_combustion ;
22282: LD_ADDR_OWVAR 39
22286: PUSH
22287: LD_INT 1
22289: ST_TO_ADDR
// av = CreateVehicle ;
22290: LD_ADDR_LOC 24
22294: PUSH
22295: CALL_OW 45
22299: ST_TO_ADDR
// pom = pom ^ av ;
22300: LD_ADDR_VAR 0 2
22304: PUSH
22305: LD_VAR 0 2
22309: PUSH
22310: LD_LOC 24
22314: ADD
22315: ST_TO_ADDR
// av = CreateVehicle ;
22316: LD_ADDR_LOC 24
22320: PUSH
22321: CALL_OW 45
22325: ST_TO_ADDR
// pom = pom ^ av ;
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_VAR 0 2
22335: PUSH
22336: LD_LOC 24
22340: ADD
22341: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22342: LD_ADDR_LOC 23
22346: PUSH
22347: CALL 16652 0 0
22351: PPUSH
22352: LD_INT 3
22354: PPUSH
22355: LD_INT 5
22357: PPUSH
22358: LD_STRING 
22360: PPUSH
22361: CALL 16687 0 4
22365: ST_TO_ADDR
// vc_control = control_manual ;
22366: LD_ADDR_OWVAR 38
22370: PUSH
22371: LD_INT 1
22373: ST_TO_ADDR
// av = CreateVehicle ;
22374: LD_ADDR_LOC 24
22378: PUSH
22379: CALL_OW 45
22383: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22384: LD_LOC 23
22388: PPUSH
22389: LD_LOC 24
22393: PPUSH
22394: CALL_OW 52
// pom = pom ^ av ;
22398: LD_ADDR_VAR 0 2
22402: PUSH
22403: LD_VAR 0 2
22407: PUSH
22408: LD_LOC 24
22412: ADD
22413: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22414: LD_ADDR_LOC 23
22418: PUSH
22419: CALL 16652 0 0
22423: PPUSH
22424: LD_INT 3
22426: PPUSH
22427: LD_INT 5
22429: PPUSH
22430: LD_STRING 
22432: PPUSH
22433: CALL 16687 0 4
22437: ST_TO_ADDR
// vc_control = control_manual ;
22438: LD_ADDR_OWVAR 38
22442: PUSH
22443: LD_INT 1
22445: ST_TO_ADDR
// av = CreateVehicle ;
22446: LD_ADDR_LOC 24
22450: PUSH
22451: CALL_OW 45
22455: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22456: LD_LOC 23
22460: PPUSH
22461: LD_LOC 24
22465: PPUSH
22466: CALL_OW 52
// pom = pom ^ av ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_VAR 0 2
22479: PUSH
22480: LD_LOC 24
22484: ADD
22485: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22486: LD_ADDR_VAR 0 2
22490: PUSH
22491: LD_VAR 0 2
22495: PUSH
22496: CALL 16652 0 0
22500: PPUSH
22501: LD_INT 1
22503: PPUSH
22504: LD_INT 7
22506: PPUSH
22507: LD_STRING 
22509: PPUSH
22510: CALL 16687 0 4
22514: ADD
22515: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22516: LD_ADDR_VAR 0 2
22520: PUSH
22521: LD_VAR 0 2
22525: PUSH
22526: CALL 16652 0 0
22530: PPUSH
22531: LD_INT 1
22533: PPUSH
22534: LD_INT 7
22536: PPUSH
22537: LD_STRING 
22539: PPUSH
22540: CALL 16687 0 4
22544: ADD
22545: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22546: LD_ADDR_VAR 0 2
22550: PUSH
22551: LD_VAR 0 2
22555: PUSH
22556: CALL 16652 0 0
22560: PPUSH
22561: LD_INT 8
22563: PPUSH
22564: LD_INT 7
22566: PPUSH
22567: LD_STRING 
22569: PPUSH
22570: CALL 16687 0 4
22574: ADD
22575: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22576: LD_ADDR_VAR 0 2
22580: PUSH
22581: LD_VAR 0 2
22585: PUSH
22586: CALL 16652 0 0
22590: PPUSH
22591: LD_INT 8
22593: PPUSH
22594: LD_INT 7
22596: PPUSH
22597: LD_STRING 
22599: PPUSH
22600: CALL 16687 0 4
22604: ADD
22605: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22606: LD_ADDR_VAR 0 2
22610: PUSH
22611: LD_VAR 0 2
22615: PUSH
22616: CALL 16652 0 0
22620: PPUSH
22621: LD_INT 8
22623: PPUSH
22624: LD_INT 7
22626: PPUSH
22627: LD_STRING 
22629: PPUSH
22630: CALL 16687 0 4
22634: ADD
22635: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_VAR 0 2
22645: PUSH
22646: CALL 16652 0 0
22650: PPUSH
22651: LD_INT 8
22653: PPUSH
22654: LD_INT 7
22656: PPUSH
22657: LD_STRING 
22659: PPUSH
22660: CALL 16687 0 4
22664: ADD
22665: ST_TO_ADDR
// ARABI_KIROV_POSILY = pom ;
22666: LD_ADDR_EXP 66
22670: PUSH
22671: LD_VAR 0 2
22675: ST_TO_ADDR
// end ;
22676: LD_VAR 0 1
22680: RET
// export function create_cerpaci_ruske_auta ; var pom ; begin
22681: LD_INT 0
22683: PPUSH
22684: PPUSH
// pom = [ ] ;
22685: LD_ADDR_VAR 0 2
22689: PUSH
22690: EMPTY
22691: ST_TO_ADDR
// uc_nation = nation_russian ;
22692: LD_ADDR_OWVAR 21
22696: PUSH
22697: LD_INT 3
22699: ST_TO_ADDR
// uc_side = You2 ;
22700: LD_ADDR_OWVAR 20
22704: PUSH
22705: LD_EXP 2
22709: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
22710: LD_ADDR_OWVAR 40
22714: PUSH
22715: LD_INT 51
22717: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22718: LD_ADDR_OWVAR 37
22722: PUSH
22723: LD_INT 21
22725: ST_TO_ADDR
// vc_control = control_manual ;
22726: LD_ADDR_OWVAR 38
22730: PUSH
22731: LD_INT 1
22733: ST_TO_ADDR
// vc_engine = engine_combustion ;
22734: LD_ADDR_OWVAR 39
22738: PUSH
22739: LD_INT 1
22741: ST_TO_ADDR
// av = CreateVehicle ;
22742: LD_ADDR_LOC 24
22746: PUSH
22747: CALL_OW 45
22751: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22752: LD_ADDR_LOC 23
22756: PUSH
22757: CALL 16652 0 0
22761: PPUSH
22762: LD_INT 1
22764: PPUSH
22765: LD_INT 4
22767: PPUSH
22768: LD_STRING 
22770: PPUSH
22771: CALL 16687 0 4
22775: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22776: LD_LOC 23
22780: PPUSH
22781: LD_LOC 24
22785: PPUSH
22786: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22790: LD_LOC 24
22794: PPUSH
22795: LD_INT 2
22797: PPUSH
22798: LD_INT 100
22800: PPUSH
22801: CALL_OW 290
// pom = pom ^ av ;
22805: LD_ADDR_VAR 0 2
22809: PUSH
22810: LD_VAR 0 2
22814: PUSH
22815: LD_LOC 24
22819: ADD
22820: ST_TO_ADDR
// av = CreateVehicle ;
22821: LD_ADDR_LOC 24
22825: PUSH
22826: CALL_OW 45
22830: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22831: LD_ADDR_LOC 23
22835: PUSH
22836: CALL 16652 0 0
22840: PPUSH
22841: LD_INT 1
22843: PPUSH
22844: LD_INT 4
22846: PPUSH
22847: LD_STRING 
22849: PPUSH
22850: CALL 16687 0 4
22854: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22855: LD_LOC 23
22859: PPUSH
22860: LD_LOC 24
22864: PPUSH
22865: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22869: LD_LOC 24
22873: PPUSH
22874: LD_INT 2
22876: PPUSH
22877: LD_INT 100
22879: PPUSH
22880: CALL_OW 290
// pom = pom ^ av ;
22884: LD_ADDR_VAR 0 2
22888: PUSH
22889: LD_VAR 0 2
22893: PUSH
22894: LD_LOC 24
22898: ADD
22899: ST_TO_ADDR
// av = CreateVehicle ;
22900: LD_ADDR_LOC 24
22904: PUSH
22905: CALL_OW 45
22909: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22910: LD_ADDR_LOC 23
22914: PUSH
22915: CALL 16652 0 0
22919: PPUSH
22920: LD_INT 1
22922: PPUSH
22923: LD_INT 4
22925: PPUSH
22926: LD_STRING 
22928: PPUSH
22929: CALL 16687 0 4
22933: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22934: LD_LOC 23
22938: PPUSH
22939: LD_LOC 24
22943: PPUSH
22944: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22948: LD_LOC 24
22952: PPUSH
22953: LD_INT 2
22955: PPUSH
22956: LD_INT 100
22958: PPUSH
22959: CALL_OW 290
// pom = pom ^ av ;
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: LD_LOC 24
22977: ADD
22978: ST_TO_ADDR
// RUSI_CERPACI_AUTA_LIST = pom ;
22979: LD_ADDR_EXP 59
22983: PUSH
22984: LD_VAR 0 2
22988: ST_TO_ADDR
// end ; end_of_file
22989: LD_VAR 0 1
22993: RET
// var Am_hlidka ; var Am_pomoc ; export Am_posily ; export Prezite_posily ; every 0 0$0.1 do var i ;
22994: GO 22996
22996: DISABLE
22997: LD_INT 0
22999: PPUSH
// begin Am_hlidka = [ ] ;
23000: LD_ADDR_LOC 25
23004: PUSH
23005: EMPTY
23006: ST_TO_ADDR
// Am_pomoc = [ ] ;
23007: LD_ADDR_LOC 26
23011: PUSH
23012: EMPTY
23013: ST_TO_ADDR
// Prezite_posily = 0 ;
23014: LD_ADDR_EXP 73
23018: PUSH
23019: LD_INT 0
23021: ST_TO_ADDR
// for i in [ 101 , 102 , 103 ] do
23022: LD_ADDR_VAR 0 1
23026: PUSH
23027: LD_INT 101
23029: PUSH
23030: LD_INT 102
23032: PUSH
23033: LD_INT 103
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: FOR_IN
23042: IFFALSE 23051
// enable ( i ) end ;
23044: LD_VAR 0 1
23048: ENABLE_MARKED
23049: GO 23041
23051: POP
23052: POP
23053: PPOPN 1
23055: END
// export function PrepareOmicron ; var i , skill ; begin
23056: LD_INT 0
23058: PPUSH
23059: PPUSH
23060: PPUSH
// uc_side := 1 ;
23061: LD_ADDR_OWVAR 20
23065: PUSH
23066: LD_INT 1
23068: ST_TO_ADDR
// uc_nation := 1 ;
23069: LD_ADDR_OWVAR 21
23073: PUSH
23074: LD_INT 1
23076: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
23077: LD_ADDR_VAR 0 3
23081: PUSH
23082: LD_INT 3
23084: PUSH
23085: LD_INT 4
23087: PUSH
23088: LD_INT 5
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: PUSH
23096: LD_OWVAR 67
23100: ARRAY
23101: ST_TO_ADDR
// for i = 1 to Difficulty do
23102: LD_ADDR_VAR 0 2
23106: PUSH
23107: DOUBLE
23108: LD_INT 1
23110: DEC
23111: ST_TO_ADDR
23112: LD_OWVAR 67
23116: PUSH
23117: FOR_TO
23118: IFFALSE 23158
// begin PrepareHuman ( false , 2 , skill ) ;
23120: LD_INT 0
23122: PPUSH
23123: LD_INT 2
23125: PPUSH
23126: LD_VAR 0 3
23130: PPUSH
23131: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 20 , 13 , 6 , false ) ;
23135: CALL_OW 44
23139: PPUSH
23140: LD_INT 20
23142: PPUSH
23143: LD_INT 13
23145: PPUSH
23146: LD_INT 6
23148: PPUSH
23149: LD_INT 0
23151: PPUSH
23152: CALL_OW 50
// end ;
23156: GO 23117
23158: POP
23159: POP
// if Difficulty > 1 then
23160: LD_OWVAR 67
23164: PUSH
23165: LD_INT 1
23167: GREATER
23168: IFFALSE 23180
// begin PlaceWeaponTurret ( Am_bu1 , us_gatling_gun ) ;
23170: LD_INT 7
23172: PPUSH
23173: LD_INT 4
23175: PPUSH
23176: CALL_OW 431
// end ; end ;
23180: LD_VAR 0 1
23184: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var i , engs , buildings ;
23185: LD_INT 22
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 25
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PPUSH
23209: CALL_OW 69
23213: IFFALSE 23418
23215: GO 23217
23217: DISABLE
23218: LD_INT 0
23220: PPUSH
23221: PPUSH
23222: PPUSH
// begin enable ;
23223: ENABLE
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23224: LD_ADDR_VAR 0 3
23228: PUSH
23229: LD_INT 22
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 4
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: LD_INT 24
23254: PUSH
23255: LD_INT 1000
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: PPUSH
23271: CALL_OW 69
23275: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
23276: LD_ADDR_VAR 0 2
23280: PUSH
23281: LD_INT 22
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 25
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PPUSH
23305: CALL_OW 69
23309: ST_TO_ADDR
// for i in engs do
23310: LD_ADDR_VAR 0 1
23314: PUSH
23315: LD_VAR 0 2
23319: PUSH
23320: FOR_IN
23321: IFFALSE 23416
// if not HasTask ( i ) and not IsInUnit ( i ) and not buildings then
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 314
23332: NOT
23333: PUSH
23334: LD_VAR 0 1
23338: PPUSH
23339: CALL_OW 310
23343: NOT
23344: AND
23345: PUSH
23346: LD_VAR 0 3
23350: NOT
23351: AND
23352: IFFALSE 23368
// ComEnterUnit ( i , Am_dep ) else
23354: LD_VAR 0 1
23358: PPUSH
23359: LD_INT 12
23361: PPUSH
23362: CALL_OW 120
23366: GO 23414
// if buildings then
23368: LD_VAR 0 3
23372: IFFALSE 23414
// if IsInUnit ( i ) then
23374: LD_VAR 0 1
23378: PPUSH
23379: CALL_OW 310
23383: IFFALSE 23396
// ComExitBuilding ( i ) else
23385: LD_VAR 0 1
23389: PPUSH
23390: CALL_OW 122
23394: GO 23414
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_VAR 0 3
23405: PUSH
23406: LD_INT 1
23408: ARRAY
23409: PPUSH
23410: CALL_OW 130
23414: GO 23320
23416: POP
23417: POP
// end ;
23418: PPOPN 3
23420: END
// every 0 0$1 do var budovy ;
23421: GO 23423
23423: DISABLE
23424: LD_INT 0
23426: PPUSH
// begin PrepareOmicron ;
23427: CALL 23056 0 0
// ComEnterUnit ( Am_pru1 , Am_bar2 ) ;
23431: LD_INT 26
23433: PPUSH
23434: LD_INT 25
23436: PPUSH
23437: CALL_OW 120
// ComEnterUnit ( Am_pru2 , Am_bar2 ) ;
23441: LD_INT 27
23443: PPUSH
23444: LD_INT 25
23446: PPUSH
23447: CALL_OW 120
// ComEnterUnit ( Am_pru3 , Am_bar2 ) ;
23451: LD_INT 28
23453: PPUSH
23454: LD_INT 25
23456: PPUSH
23457: CALL_OW 120
// ComEnterUnit ( Am_vb1 , Am_bu1 ) ;
23461: LD_INT 29
23463: PPUSH
23464: LD_INT 7
23466: PPUSH
23467: CALL_OW 120
// ComEnterUnit ( Am_vb2 , Am_bu2 ) ;
23471: LD_INT 30
23473: PPUSH
23474: LD_INT 8
23476: PPUSH
23477: CALL_OW 120
// ComEnterUnit ( Am_vb3 , Am_bu3 ) ;
23481: LD_INT 31
23483: PPUSH
23484: LD_INT 19
23486: PPUSH
23487: CALL_OW 120
// ComEnterUnit ( Am_vb4 , Am_bu4 ) ;
23491: LD_INT 32
23493: PPUSH
23494: LD_INT 18
23496: PPUSH
23497: CALL_OW 120
// ComEnterUnit ( Am_sol1 , Am_bar1 ) ;
23501: LD_INT 38
23503: PPUSH
23504: LD_INT 11
23506: PPUSH
23507: CALL_OW 120
// ComEnterUnit ( Am_sol2 , Am_bar1 ) ;
23511: LD_INT 39
23513: PPUSH
23514: LD_INT 11
23516: PPUSH
23517: CALL_OW 120
// ComEnterUnit ( Am_sol3 , Am_bar1 ) ;
23521: LD_INT 40
23523: PPUSH
23524: LD_INT 11
23526: PPUSH
23527: CALL_OW 120
// ComEnterUnit ( pitomec , Am_bar2 ) ;
23531: LD_INT 63
23533: PPUSH
23534: LD_INT 25
23536: PPUSH
23537: CALL_OW 120
// ComEnterUnit ( Am_sol4 , Am_dep ) ;
23541: LD_INT 41
23543: PPUSH
23544: LD_INT 12
23546: PPUSH
23547: CALL_OW 120
// ComEnterUnit ( Am_eng1 , Am_dep ) ;
23551: LD_INT 36
23553: PPUSH
23554: LD_INT 12
23556: PPUSH
23557: CALL_OW 120
// ComEnterUnit ( Am_sci1 , Am_lab ) ;
23561: LD_INT 37
23563: PPUSH
23564: LD_INT 9
23566: PPUSH
23567: CALL_OW 120
// ComEnterUnit ( Am_me1 , Am_fac ) ;
23571: LD_INT 33
23573: PPUSH
23574: LD_INT 10
23576: PPUSH
23577: CALL_OW 120
// ComEnterUnit ( Am_me2 , Am_fac ) ;
23581: LD_INT 34
23583: PPUSH
23584: LD_INT 10
23586: PPUSH
23587: CALL_OW 120
// ComEnterUnit ( Am_me3 , Am_fac ) ;
23591: LD_INT 35
23593: PPUSH
23594: LD_INT 10
23596: PPUSH
23597: CALL_OW 120
// budovy = [ Am_bu1 , Am_bu2 , Am_bu3 , Am_bu4 , Am_el1 , Am_el2 , Am_lab , Am_fac , Am_mine , Am_dep , Am_bar1 , Am_bar2 ] ;
23601: LD_ADDR_VAR 0 1
23605: PUSH
23606: LD_INT 7
23608: PUSH
23609: LD_INT 8
23611: PUSH
23612: LD_INT 19
23614: PUSH
23615: LD_INT 18
23617: PUSH
23618: LD_INT 22
23620: PUSH
23621: LD_INT 23
23623: PUSH
23624: LD_INT 9
23626: PUSH
23627: LD_INT 10
23629: PUSH
23630: LD_INT 24
23632: PUSH
23633: LD_INT 12
23635: PUSH
23636: LD_INT 11
23638: PUSH
23639: LD_INT 25
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: ST_TO_ADDR
// SetBLevel ( budovy , levely_am_budov [ difficulty ] ) ;
23656: LD_VAR 0 1
23660: PPUSH
23661: LD_EXP 21
23665: PUSH
23666: LD_OWVAR 67
23670: ARRAY
23671: PPUSH
23672: CALL_OW 241
// end ;
23676: PPOPN 1
23678: END
// export function amici_hlidka ; begin
23679: LD_INT 0
23681: PPUSH
// case difficulty of 1 :
23682: LD_OWVAR 67
23686: PUSH
23687: LD_INT 1
23689: DOUBLE
23690: EQUAL
23691: IFTRUE 23695
23693: GO 23709
23695: POP
// Am_hlidka = [ Am_pru1 ] ; 2 :
23696: LD_ADDR_LOC 25
23700: PUSH
23701: LD_INT 26
23703: PUSH
23704: EMPTY
23705: LIST
23706: ST_TO_ADDR
23707: GO 23766
23709: LD_INT 2
23711: DOUBLE
23712: EQUAL
23713: IFTRUE 23717
23715: GO 23735
23717: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 ] ; 3 :
23718: LD_ADDR_LOC 25
23722: PUSH
23723: LD_INT 26
23725: PUSH
23726: LD_INT 27
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: ST_TO_ADDR
23733: GO 23766
23735: LD_INT 3
23737: DOUBLE
23738: EQUAL
23739: IFTRUE 23743
23741: GO 23765
23743: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 , Am_pru3 ] ; end ;
23744: LD_ADDR_LOC 25
23748: PUSH
23749: LD_INT 26
23751: PUSH
23752: LD_INT 27
23754: PUSH
23755: LD_INT 28
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: ST_TO_ADDR
23763: GO 23766
23765: POP
// ComExitBuilding ( Am_hlidka ) ;
23766: LD_LOC 25
23770: PPUSH
23771: CALL_OW 122
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23775: LD_LOC 25
23779: PPUSH
23780: LD_INT 34
23782: PPUSH
23783: LD_INT 16
23785: PPUSH
23786: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23790: LD_LOC 25
23794: PPUSH
23795: LD_INT 245
23797: PPUSH
23798: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23802: LD_LOC 25
23806: PPUSH
23807: LD_INT 51
23809: PPUSH
23810: LD_INT 19
23812: PPUSH
23813: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23817: LD_LOC 25
23821: PPUSH
23822: LD_INT 245
23824: PPUSH
23825: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23829: LD_LOC 25
23833: PPUSH
23834: LD_INT 54
23836: PPUSH
23837: LD_INT 5
23839: PPUSH
23840: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23844: LD_LOC 25
23848: PPUSH
23849: LD_INT 245
23851: PPUSH
23852: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23856: LD_LOC 25
23860: PPUSH
23861: LD_INT 77
23863: PPUSH
23864: LD_INT 16
23866: PPUSH
23867: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23871: LD_LOC 25
23875: PPUSH
23876: LD_INT 245
23878: PPUSH
23879: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23883: LD_LOC 25
23887: PPUSH
23888: LD_INT 81
23890: PPUSH
23891: LD_INT 32
23893: PPUSH
23894: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23898: LD_LOC 25
23902: PPUSH
23903: LD_INT 245
23905: PPUSH
23906: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23910: LD_LOC 25
23914: PPUSH
23915: LD_INT 73
23917: PPUSH
23918: LD_INT 32
23920: PPUSH
23921: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23925: LD_LOC 25
23929: PPUSH
23930: LD_INT 245
23932: PPUSH
23933: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
23937: LD_LOC 25
23941: PPUSH
23942: LD_INT 57
23944: PPUSH
23945: LD_INT 33
23947: PPUSH
23948: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23952: LD_LOC 25
23956: PPUSH
23957: LD_INT 245
23959: PPUSH
23960: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
23964: LD_LOC 25
23968: PPUSH
23969: LD_INT 45
23971: PPUSH
23972: LD_INT 24
23974: PPUSH
23975: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23979: LD_LOC 25
23983: PPUSH
23984: LD_INT 245
23986: PPUSH
23987: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
23991: LD_LOC 25
23995: PPUSH
23996: LD_INT 34
23998: PPUSH
23999: LD_INT 13
24001: PPUSH
24002: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24006: LD_LOC 25
24010: PPUSH
24011: LD_INT 245
24013: PPUSH
24014: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24018: LD_LOC 25
24022: PPUSH
24023: LD_INT 34
24025: PPUSH
24026: LD_INT 16
24028: PPUSH
24029: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24033: LD_LOC 25
24037: PPUSH
24038: LD_INT 245
24040: PPUSH
24041: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24045: LD_LOC 25
24049: PPUSH
24050: LD_INT 51
24052: PPUSH
24053: LD_INT 19
24055: PPUSH
24056: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24060: LD_LOC 25
24064: PPUSH
24065: LD_INT 245
24067: PPUSH
24068: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24072: LD_LOC 25
24076: PPUSH
24077: LD_INT 54
24079: PPUSH
24080: LD_INT 5
24082: PPUSH
24083: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24087: LD_LOC 25
24091: PPUSH
24092: LD_INT 245
24094: PPUSH
24095: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24099: LD_LOC 25
24103: PPUSH
24104: LD_INT 77
24106: PPUSH
24107: LD_INT 16
24109: PPUSH
24110: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24114: LD_LOC 25
24118: PPUSH
24119: LD_INT 245
24121: PPUSH
24122: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24126: LD_LOC 25
24130: PPUSH
24131: LD_INT 81
24133: PPUSH
24134: LD_INT 32
24136: PPUSH
24137: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24141: LD_LOC 25
24145: PPUSH
24146: LD_INT 245
24148: PPUSH
24149: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24153: LD_LOC 25
24157: PPUSH
24158: LD_INT 73
24160: PPUSH
24161: LD_INT 32
24163: PPUSH
24164: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24168: LD_LOC 25
24172: PPUSH
24173: LD_INT 245
24175: PPUSH
24176: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24180: LD_LOC 25
24184: PPUSH
24185: LD_INT 57
24187: PPUSH
24188: LD_INT 33
24190: PPUSH
24191: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24195: LD_LOC 25
24199: PPUSH
24200: LD_INT 245
24202: PPUSH
24203: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24207: LD_LOC 25
24211: PPUSH
24212: LD_INT 45
24214: PPUSH
24215: LD_INT 24
24217: PPUSH
24218: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24222: LD_LOC 25
24226: PPUSH
24227: LD_INT 245
24229: PPUSH
24230: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24234: LD_LOC 25
24238: PPUSH
24239: LD_INT 34
24241: PPUSH
24242: LD_INT 13
24244: PPUSH
24245: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24249: LD_LOC 25
24253: PPUSH
24254: LD_INT 245
24256: PPUSH
24257: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24261: LD_LOC 25
24265: PPUSH
24266: LD_INT 34
24268: PPUSH
24269: LD_INT 16
24271: PPUSH
24272: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24276: LD_LOC 25
24280: PPUSH
24281: LD_INT 245
24283: PPUSH
24284: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24288: LD_LOC 25
24292: PPUSH
24293: LD_INT 51
24295: PPUSH
24296: LD_INT 19
24298: PPUSH
24299: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24303: LD_LOC 25
24307: PPUSH
24308: LD_INT 245
24310: PPUSH
24311: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24315: LD_LOC 25
24319: PPUSH
24320: LD_INT 54
24322: PPUSH
24323: LD_INT 5
24325: PPUSH
24326: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24330: LD_LOC 25
24334: PPUSH
24335: LD_INT 245
24337: PPUSH
24338: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24342: LD_LOC 25
24346: PPUSH
24347: LD_INT 77
24349: PPUSH
24350: LD_INT 16
24352: PPUSH
24353: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24357: LD_LOC 25
24361: PPUSH
24362: LD_INT 245
24364: PPUSH
24365: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24369: LD_LOC 25
24373: PPUSH
24374: LD_INT 81
24376: PPUSH
24377: LD_INT 32
24379: PPUSH
24380: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24384: LD_LOC 25
24388: PPUSH
24389: LD_INT 245
24391: PPUSH
24392: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24396: LD_LOC 25
24400: PPUSH
24401: LD_INT 73
24403: PPUSH
24404: LD_INT 32
24406: PPUSH
24407: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24411: LD_LOC 25
24415: PPUSH
24416: LD_INT 245
24418: PPUSH
24419: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24423: LD_LOC 25
24427: PPUSH
24428: LD_INT 57
24430: PPUSH
24431: LD_INT 33
24433: PPUSH
24434: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24438: LD_LOC 25
24442: PPUSH
24443: LD_INT 245
24445: PPUSH
24446: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24450: LD_LOC 25
24454: PPUSH
24455: LD_INT 45
24457: PPUSH
24458: LD_INT 24
24460: PPUSH
24461: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24465: LD_LOC 25
24469: PPUSH
24470: LD_INT 245
24472: PPUSH
24473: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24477: LD_LOC 25
24481: PPUSH
24482: LD_INT 34
24484: PPUSH
24485: LD_INT 13
24487: PPUSH
24488: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24492: LD_LOC 25
24496: PPUSH
24497: LD_INT 245
24499: PPUSH
24500: CALL_OW 202
// enable ( 101 ) ;
24504: LD_INT 101
24506: ENABLE_MARKED
// enable ( 103 ) ;
24507: LD_INT 103
24509: ENABLE_MARKED
// enable ( 102 ) ;
24510: LD_INT 102
24512: ENABLE_MARKED
// end ;
24513: LD_VAR 0 1
24517: RET
// every 0 0$1 marked 102 do var i , j , pom ;
24518: GO 24520
24520: DISABLE
24521: LD_INT 0
24523: PPUSH
24524: PPUSH
24525: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
24526: LD_ADDR_VAR 0 3
24530: PUSH
24531: LD_INT 22
24533: PUSH
24534: LD_EXP 1
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 21
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PPUSH
24557: CALL_OW 69
24561: ST_TO_ADDR
// for i in Am_hlidka do
24562: LD_ADDR_VAR 0 1
24566: PUSH
24567: LD_LOC 25
24571: PUSH
24572: FOR_IN
24573: IFFALSE 24641
// if GetLives ( i ) < 1000 then
24575: LD_VAR 0 1
24579: PPUSH
24580: CALL_OW 256
24584: PUSH
24585: LD_INT 1000
24587: LESS
24588: IFFALSE 24639
// for j in pom do
24590: LD_ADDR_VAR 0 2
24594: PUSH
24595: LD_VAR 0 3
24599: PUSH
24600: FOR_IN
24601: IFFALSE 24637
// begin if See ( Amici , j ) then
24603: LD_EXP 4
24607: PPUSH
24608: LD_VAR 0 2
24612: PPUSH
24613: CALL_OW 292
24617: IFFALSE 24633
// ComAttackUnit ( Am_hlidka , j ) ;
24619: LD_LOC 25
24623: PPUSH
24624: LD_VAR 0 2
24628: PPUSH
24629: CALL_OW 115
// break ;
24633: GO 24637
// end ;
24635: GO 24600
24637: POP
24638: POP
24639: GO 24572
24641: POP
24642: POP
// end ;
24643: PPOPN 3
24645: END
// every 0 0$1 marked 101 do var i ; var jedn ; var posli ;
24646: GO 24648
24648: DISABLE
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
// begin jedn = [ ] ;
24654: LD_ADDR_VAR 0 2
24658: PUSH
24659: EMPTY
24660: ST_TO_ADDR
// posli = false ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_INT 0
24668: ST_TO_ADDR
// for i in Am_hlidka do
24669: LD_ADDR_VAR 0 1
24673: PUSH
24674: LD_LOC 25
24678: PUSH
24679: FOR_IN
24680: IFFALSE 24715
// if GetLives ( i ) < 1000 then
24682: LD_VAR 0 1
24686: PPUSH
24687: CALL_OW 256
24691: PUSH
24692: LD_INT 1000
24694: LESS
24695: IFFALSE 24713
// jedn = jedn ^ i ;
24697: LD_ADDR_VAR 0 2
24701: PUSH
24702: LD_VAR 0 2
24706: PUSH
24707: LD_VAR 0 1
24711: ADD
24712: ST_TO_ADDR
24713: GO 24679
24715: POP
24716: POP
// if jedn > 0 then
24717: LD_VAR 0 2
24721: PUSH
24722: LD_INT 0
24724: GREATER
24725: IFFALSE 24770
// begin wait ( 0 0$7 ) ;
24727: LD_INT 245
24729: PPUSH
24730: CALL_OW 67
// for i in jedn do
24734: LD_ADDR_VAR 0 1
24738: PUSH
24739: LD_VAR 0 2
24743: PUSH
24744: FOR_IN
24745: IFFALSE 24768
// if IsOK ( i ) then
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 302
24756: IFFALSE 24766
// posli = true ;
24758: LD_ADDR_VAR 0 3
24762: PUSH
24763: LD_INT 1
24765: ST_TO_ADDR
24766: GO 24744
24768: POP
24769: POP
// end ; if posli then
24770: LD_VAR 0 3
24774: IFFALSE 24789
// americka_pomoc_hlidce ( jedn [ 1 ] ) ;
24776: LD_VAR 0 2
24780: PUSH
24781: LD_INT 1
24783: ARRAY
24784: PPUSH
24785: CALL 24948 0 1
// enable ;
24789: ENABLE
// end ;
24790: PPOPN 3
24792: END
// every 0 0$1 marked 102 do
24793: GO 24795
24795: DISABLE
// begin wait ( schol_find_amikama [ difficulty ] ) ;
24796: LD_EXP 12
24800: PUSH
24801: LD_OWVAR 67
24805: ARRAY
24806: PPUSH
24807: CALL_OW 67
// if GetSide ( schol ) = You or GetSide ( schol2 ) = You then
24811: LD_EXP 33
24815: PPUSH
24816: CALL_OW 255
24820: PUSH
24821: LD_EXP 1
24825: EQUAL
24826: PUSH
24827: LD_EXP 34
24831: PPUSH
24832: CALL_OW 255
24836: PUSH
24837: LD_EXP 1
24841: EQUAL
24842: OR
24843: IFFALSE 24849
// exit else
24845: GO 24878
24847: GO 24878
// begin ComAgressiveMove ( Am_hlidka , 38 , 2 ) ;
24849: LD_LOC 25
24853: PPUSH
24854: LD_INT 38
24856: PPUSH
24857: LD_INT 2
24859: PPUSH
24860: CALL_OW 114
// AddComAttackUnit ( Am_hlidka , schol2 ) ;
24864: LD_LOC 25
24868: PPUSH
24869: LD_EXP 34
24873: PPUSH
24874: CALL_OW 175
// end ; end ;
24878: END
// every 0 0$3 trigger scholtze_saved or IsDead ( schol2 ) do
24879: LD_EXP 37
24883: PUSH
24884: LD_EXP 34
24888: PPUSH
24889: CALL_OW 301
24893: OR
24894: IFFALSE 24947
24896: GO 24898
24898: DISABLE
// begin ComAgressiveMove ( Am_hlidka , 28 , 18 ) ;
24899: LD_LOC 25
24903: PPUSH
24904: LD_INT 28
24906: PPUSH
24907: LD_INT 18
24909: PPUSH
24910: CALL_OW 114
// AddComEnterUnit ( Am_hlidka , Am_bar2 ) ;
24914: LD_LOC 25
24918: PPUSH
24919: LD_INT 25
24921: PPUSH
24922: CALL_OW 180
// ComAgressiveMove ( Am_pomoc , 21 , 32 ) ;
24926: LD_LOC 26
24930: PPUSH
24931: LD_INT 21
24933: PPUSH
24934: LD_INT 32
24936: PPUSH
24937: CALL_OW 114
// disable ( 101 ) ;
24941: LD_INT 101
24943: DISABLE_MARKED
// disable ( 102 ) ;
24944: LD_INT 102
24946: DISABLE_MARKED
// end ;
24947: END
// function americka_pomoc_hlidce ( jedn ) ; var i ; begin
24948: LD_INT 0
24950: PPUSH
24951: PPUSH
// Am_pomoc = AMERICKA_POMOC_HLIDCE_LIST ;
24952: LD_ADDR_LOC 26
24956: PUSH
24957: LD_EXP 50
24961: ST_TO_ADDR
// while SeeArea ( Amici , Help_area ) > 0 do
24962: LD_EXP 4
24966: PPUSH
24967: LD_INT 3
24969: PPUSH
24970: CALL_OW 294
24974: PUSH
24975: LD_INT 0
24977: GREATER
24978: IFFALSE 24989
// wait ( 0 0$1 ) ;
24980: LD_INT 35
24982: PPUSH
24983: CALL_OW 67
24987: GO 24962
// for i in AMERICKA_POMOC_HLIDCE_LIST do
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_EXP 50
24998: PUSH
24999: FOR_IN
25000: IFFALSE 25019
// PlaceUnitArea ( i , Help_area , false ) ;
25002: LD_VAR 0 3
25006: PPUSH
25007: LD_INT 3
25009: PPUSH
25010: LD_INT 0
25012: PPUSH
25013: CALL_OW 49
25017: GO 24999
25019: POP
25020: POP
// wait ( 0 0$1 ) ;
25021: LD_INT 35
25023: PPUSH
25024: CALL_OW 67
// ComAgressiveMove ( Am_pomoc , GetX ( jedn ) , GetY ( jedn ) ) ;
25028: LD_LOC 26
25032: PPUSH
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL_OW 250
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 251
25052: PPUSH
25053: CALL_OW 114
// end ;
25057: LD_VAR 0 2
25061: RET
// every 0 0$10 do
25062: GO 25064
25064: DISABLE
// begin wait ( Rand ( 1 , 0 0$30 ) ) ;
25065: LD_INT 1
25067: PPUSH
25068: LD_INT 1050
25070: PPUSH
25071: CALL_OW 12
25075: PPUSH
25076: CALL_OW 67
// wait ( posily1 [ difficulty ] ) ;
25080: LD_EXP 14
25084: PUSH
25085: LD_OWVAR 67
25089: ARRAY
25090: PPUSH
25091: CALL_OW 67
// posli_posily ( 1 ) ;
25095: LD_INT 1
25097: PPUSH
25098: CALL 25191 0 1
// wait ( posily11 [ difficulty ] ) ;
25102: LD_EXP 15
25106: PUSH
25107: LD_OWVAR 67
25111: ARRAY
25112: PPUSH
25113: CALL_OW 67
// posli_posily ( 11 ) ;
25117: LD_INT 11
25119: PPUSH
25120: CALL 25191 0 1
// wait ( posily2 [ difficulty ] ) ;
25124: LD_EXP 16
25128: PUSH
25129: LD_OWVAR 67
25133: ARRAY
25134: PPUSH
25135: CALL_OW 67
// posli_posily ( 2 ) ;
25139: LD_INT 2
25141: PPUSH
25142: CALL 25191 0 1
// wait ( posily3 [ difficulty ] ) ;
25146: LD_EXP 17
25150: PUSH
25151: LD_OWVAR 67
25155: ARRAY
25156: PPUSH
25157: CALL_OW 67
// posli_posily ( 3 ) ;
25161: LD_INT 3
25163: PPUSH
25164: CALL 25191 0 1
// wait ( posily4 [ difficulty ] ) ;
25168: LD_EXP 18
25172: PUSH
25173: LD_OWVAR 67
25177: ARRAY
25178: PPUSH
25179: CALL_OW 67
// posli_posily ( 4 ) ;
25183: LD_INT 4
25185: PPUSH
25186: CALL 25191 0 1
// end ;
25190: END
// function posli_posily ( ktere ) ; var i , pom ; var poc ; begin
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
// case ktere of 1 :
25197: LD_VAR 0 1
25201: PUSH
25202: LD_INT 1
25204: DOUBLE
25205: EQUAL
25206: IFTRUE 25210
25208: GO 25245
25210: POP
// for i in AMERICKE_POSILY1_LIST do
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_EXP 51
25220: PUSH
25221: FOR_IN
25222: IFFALSE 25241
// PlaceUnitArea ( i , posily_1 , false ) ; 2 :
25224: LD_VAR 0 3
25228: PPUSH
25229: LD_INT 4
25231: PPUSH
25232: LD_INT 0
25234: PPUSH
25235: CALL_OW 49
25239: GO 25221
25241: POP
25242: POP
25243: GO 25418
25245: LD_INT 2
25247: DOUBLE
25248: EQUAL
25249: IFTRUE 25253
25251: GO 25288
25253: POP
// for i in AMERICKE_POSILY2_LIST do
25254: LD_ADDR_VAR 0 3
25258: PUSH
25259: LD_EXP 52
25263: PUSH
25264: FOR_IN
25265: IFFALSE 25284
// PlaceUnitArea ( i , posily_3 , false ) ; 3 :
25267: LD_VAR 0 3
25271: PPUSH
25272: LD_INT 5
25274: PPUSH
25275: LD_INT 0
25277: PPUSH
25278: CALL_OW 49
25282: GO 25264
25284: POP
25285: POP
25286: GO 25418
25288: LD_INT 3
25290: DOUBLE
25291: EQUAL
25292: IFTRUE 25296
25294: GO 25331
25296: POP
// for i in AMERICKE_POSILY3_LIST do
25297: LD_ADDR_VAR 0 3
25301: PUSH
25302: LD_EXP 53
25306: PUSH
25307: FOR_IN
25308: IFFALSE 25327
// PlaceUnitArea ( i , posily_1 , false ) ; 4 :
25310: LD_VAR 0 3
25314: PPUSH
25315: LD_INT 4
25317: PPUSH
25318: LD_INT 0
25320: PPUSH
25321: CALL_OW 49
25325: GO 25307
25327: POP
25328: POP
25329: GO 25418
25331: LD_INT 4
25333: DOUBLE
25334: EQUAL
25335: IFTRUE 25339
25337: GO 25374
25339: POP
// for i in AMERICKE_POSILY4_LIST do
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_EXP 54
25349: PUSH
25350: FOR_IN
25351: IFFALSE 25370
// PlaceUnitArea ( i , posily_3 , false ) ; 11 :
25353: LD_VAR 0 3
25357: PPUSH
25358: LD_INT 5
25360: PPUSH
25361: LD_INT 0
25363: PPUSH
25364: CALL_OW 49
25368: GO 25350
25370: POP
25371: POP
25372: GO 25418
25374: LD_INT 11
25376: DOUBLE
25377: EQUAL
25378: IFTRUE 25382
25380: GO 25417
25382: POP
// for i in AMERICKE_POSILY11_LIST do
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_EXP 55
25392: PUSH
25393: FOR_IN
25394: IFFALSE 25413
// PlaceUnitArea ( i , posily_1 , false ) ; end ;
25396: LD_VAR 0 3
25400: PPUSH
25401: LD_INT 4
25403: PPUSH
25404: LD_INT 0
25406: PPUSH
25407: CALL_OW 49
25411: GO 25393
25413: POP
25414: POP
25415: GO 25418
25417: POP
// case ktere of 1 :
25418: LD_VAR 0 1
25422: PUSH
25423: LD_INT 1
25425: DOUBLE
25426: EQUAL
25427: IFTRUE 25431
25429: GO 25648
25431: POP
// begin Am_posily = AMERICKE_POSILY1_LIST ;
25432: LD_ADDR_EXP 72
25436: PUSH
25437: LD_EXP 51
25441: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25442: LD_EXP 72
25446: PPUSH
25447: LD_INT 42
25449: PPUSH
25450: LD_INT 69
25452: PPUSH
25453: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25457: LD_EXP 72
25461: PPUSH
25462: LD_INT 35
25464: PPUSH
25465: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25469: LD_EXP 72
25473: PPUSH
25474: LD_INT 42
25476: PPUSH
25477: LD_INT 69
25479: PPUSH
25480: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25484: LD_EXP 72
25488: PPUSH
25489: LD_INT 35
25491: PPUSH
25492: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25496: LD_EXP 72
25500: PPUSH
25501: LD_INT 42
25503: PPUSH
25504: LD_INT 69
25506: PPUSH
25507: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25511: LD_EXP 72
25515: PPUSH
25516: LD_INT 35
25518: PPUSH
25519: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25523: LD_EXP 72
25527: PPUSH
25528: LD_INT 28
25530: PPUSH
25531: LD_INT 47
25533: PPUSH
25534: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25538: LD_EXP 72
25542: PPUSH
25543: LD_INT 35
25545: PPUSH
25546: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25550: LD_EXP 72
25554: PPUSH
25555: LD_INT 28
25557: PPUSH
25558: LD_INT 47
25560: PPUSH
25561: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25565: LD_EXP 72
25569: PPUSH
25570: LD_INT 35
25572: PPUSH
25573: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25577: LD_EXP 72
25581: PPUSH
25582: LD_INT 28
25584: PPUSH
25585: LD_INT 47
25587: PPUSH
25588: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25592: LD_EXP 72
25596: PPUSH
25597: LD_INT 35
25599: PPUSH
25600: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25604: LD_EXP 72
25608: PPUSH
25609: LD_INT 28
25611: PPUSH
25612: LD_INT 47
25614: PPUSH
25615: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25619: LD_EXP 72
25623: PPUSH
25624: LD_INT 35
25626: PPUSH
25627: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25631: LD_EXP 72
25635: PPUSH
25636: LD_INT 20
25638: PPUSH
25639: LD_INT 12
25641: PPUSH
25642: CALL_OW 174
// end ; 2 :
25646: GO 26927
25648: LD_INT 2
25650: DOUBLE
25651: EQUAL
25652: IFTRUE 25656
25654: GO 25792
25656: POP
// begin Am_posily = AMERICKE_POSILY2_LIST ;
25657: LD_ADDR_EXP 72
25661: PUSH
25662: LD_EXP 52
25666: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 112 , 22 ) ;
25667: LD_EXP 72
25671: PPUSH
25672: LD_INT 112
25674: PPUSH
25675: LD_INT 22
25677: PPUSH
25678: CALL_OW 114
// AddComWait ( Am_posily , 0 0$2 ) ;
25682: LD_EXP 72
25686: PPUSH
25687: LD_INT 70
25689: PPUSH
25690: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 86 , 18 ) ;
25694: LD_EXP 72
25698: PPUSH
25699: LD_INT 86
25701: PPUSH
25702: LD_INT 18
25704: PPUSH
25705: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25709: LD_EXP 72
25713: PPUSH
25714: LD_INT 70
25716: PPUSH
25717: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 77 , 34 ) ;
25721: LD_EXP 72
25725: PPUSH
25726: LD_INT 77
25728: PPUSH
25729: LD_INT 34
25731: PPUSH
25732: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25736: LD_EXP 72
25740: PPUSH
25741: LD_INT 70
25743: PPUSH
25744: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 51 , 37 ) ;
25748: LD_EXP 72
25752: PPUSH
25753: LD_INT 51
25755: PPUSH
25756: LD_INT 37
25758: PPUSH
25759: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25763: LD_EXP 72
25767: PPUSH
25768: LD_INT 35
25770: PPUSH
25771: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 23 , 12 ) ;
25775: LD_EXP 72
25779: PPUSH
25780: LD_INT 23
25782: PPUSH
25783: LD_INT 12
25785: PPUSH
25786: CALL_OW 174
// end ; 3 :
25790: GO 26927
25792: LD_INT 3
25794: DOUBLE
25795: EQUAL
25796: IFTRUE 25800
25798: GO 26017
25800: POP
// begin Am_posily = AMERICKE_POSILY3_LIST ;
25801: LD_ADDR_EXP 72
25805: PUSH
25806: LD_EXP 53
25810: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25811: LD_EXP 72
25815: PPUSH
25816: LD_INT 42
25818: PPUSH
25819: LD_INT 69
25821: PPUSH
25822: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25826: LD_EXP 72
25830: PPUSH
25831: LD_INT 35
25833: PPUSH
25834: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25838: LD_EXP 72
25842: PPUSH
25843: LD_INT 42
25845: PPUSH
25846: LD_INT 69
25848: PPUSH
25849: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25853: LD_EXP 72
25857: PPUSH
25858: LD_INT 35
25860: PPUSH
25861: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25865: LD_EXP 72
25869: PPUSH
25870: LD_INT 42
25872: PPUSH
25873: LD_INT 69
25875: PPUSH
25876: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25880: LD_EXP 72
25884: PPUSH
25885: LD_INT 35
25887: PPUSH
25888: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25892: LD_EXP 72
25896: PPUSH
25897: LD_INT 28
25899: PPUSH
25900: LD_INT 47
25902: PPUSH
25903: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25907: LD_EXP 72
25911: PPUSH
25912: LD_INT 35
25914: PPUSH
25915: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25919: LD_EXP 72
25923: PPUSH
25924: LD_INT 28
25926: PPUSH
25927: LD_INT 47
25929: PPUSH
25930: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25934: LD_EXP 72
25938: PPUSH
25939: LD_INT 35
25941: PPUSH
25942: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25946: LD_EXP 72
25950: PPUSH
25951: LD_INT 28
25953: PPUSH
25954: LD_INT 47
25956: PPUSH
25957: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25961: LD_EXP 72
25965: PPUSH
25966: LD_INT 35
25968: PPUSH
25969: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25973: LD_EXP 72
25977: PPUSH
25978: LD_INT 28
25980: PPUSH
25981: LD_INT 47
25983: PPUSH
25984: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25988: LD_EXP 72
25992: PPUSH
25993: LD_INT 35
25995: PPUSH
25996: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
26000: LD_EXP 72
26004: PPUSH
26005: LD_INT 20
26007: PPUSH
26008: LD_INT 12
26010: PPUSH
26011: CALL_OW 174
// end ; 4 :
26015: GO 26927
26017: LD_INT 4
26019: DOUBLE
26020: EQUAL
26021: IFTRUE 26025
26023: GO 26458
26025: POP
// begin Am_posily = AMERICKE_POSILY4_LIST ;
26026: LD_ADDR_EXP 72
26030: PUSH
26031: LD_EXP 54
26035: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26036: LD_EXP 72
26040: PPUSH
26041: LD_INT 110
26043: PPUSH
26044: LD_INT 23
26046: PPUSH
26047: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26051: LD_EXP 72
26055: PPUSH
26056: LD_INT 35
26058: PPUSH
26059: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26063: LD_EXP 72
26067: PPUSH
26068: LD_INT 110
26070: PPUSH
26071: LD_INT 23
26073: PPUSH
26074: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26078: LD_EXP 72
26082: PPUSH
26083: LD_INT 35
26085: PPUSH
26086: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26090: LD_EXP 72
26094: PPUSH
26095: LD_INT 110
26097: PPUSH
26098: LD_INT 23
26100: PPUSH
26101: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26105: LD_EXP 72
26109: PPUSH
26110: LD_INT 35
26112: PPUSH
26113: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26117: LD_EXP 72
26121: PPUSH
26122: LD_INT 110
26124: PPUSH
26125: LD_INT 23
26127: PPUSH
26128: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26132: LD_EXP 72
26136: PPUSH
26137: LD_INT 35
26139: PPUSH
26140: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26144: LD_EXP 72
26148: PPUSH
26149: LD_INT 87
26151: PPUSH
26152: LD_INT 19
26154: PPUSH
26155: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26159: LD_EXP 72
26163: PPUSH
26164: LD_INT 35
26166: PPUSH
26167: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26171: LD_EXP 72
26175: PPUSH
26176: LD_INT 87
26178: PPUSH
26179: LD_INT 19
26181: PPUSH
26182: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26186: LD_EXP 72
26190: PPUSH
26191: LD_INT 35
26193: PPUSH
26194: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26198: LD_EXP 72
26202: PPUSH
26203: LD_INT 87
26205: PPUSH
26206: LD_INT 19
26208: PPUSH
26209: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26213: LD_EXP 72
26217: PPUSH
26218: LD_INT 35
26220: PPUSH
26221: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26225: LD_EXP 72
26229: PPUSH
26230: LD_INT 87
26232: PPUSH
26233: LD_INT 19
26235: PPUSH
26236: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26240: LD_EXP 72
26244: PPUSH
26245: LD_INT 35
26247: PPUSH
26248: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26252: LD_EXP 72
26256: PPUSH
26257: LD_INT 52
26259: PPUSH
26260: LD_INT 12
26262: PPUSH
26263: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26267: LD_EXP 72
26271: PPUSH
26272: LD_INT 35
26274: PPUSH
26275: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26279: LD_EXP 72
26283: PPUSH
26284: LD_INT 52
26286: PPUSH
26287: LD_INT 12
26289: PPUSH
26290: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26294: LD_EXP 72
26298: PPUSH
26299: LD_INT 35
26301: PPUSH
26302: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26306: LD_EXP 72
26310: PPUSH
26311: LD_INT 52
26313: PPUSH
26314: LD_INT 12
26316: PPUSH
26317: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26321: LD_EXP 72
26325: PPUSH
26326: LD_INT 35
26328: PPUSH
26329: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26333: LD_EXP 72
26337: PPUSH
26338: LD_INT 52
26340: PPUSH
26341: LD_INT 12
26343: PPUSH
26344: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26348: LD_EXP 72
26352: PPUSH
26353: LD_INT 35
26355: PPUSH
26356: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26360: LD_EXP 72
26364: PPUSH
26365: LD_INT 52
26367: PPUSH
26368: LD_INT 12
26370: PPUSH
26371: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26375: LD_EXP 72
26379: PPUSH
26380: LD_INT 35
26382: PPUSH
26383: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26387: LD_EXP 72
26391: PPUSH
26392: LD_INT 52
26394: PPUSH
26395: LD_INT 12
26397: PPUSH
26398: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26402: LD_EXP 72
26406: PPUSH
26407: LD_INT 35
26409: PPUSH
26410: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26414: LD_EXP 72
26418: PPUSH
26419: LD_INT 52
26421: PPUSH
26422: LD_INT 12
26424: PPUSH
26425: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26429: LD_EXP 72
26433: PPUSH
26434: LD_INT 35
26436: PPUSH
26437: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26441: LD_EXP 72
26445: PPUSH
26446: LD_INT 27
26448: PPUSH
26449: LD_INT 13
26451: PPUSH
26452: CALL_OW 174
// end ; 11 :
26456: GO 26927
26458: LD_INT 11
26460: DOUBLE
26461: EQUAL
26462: IFTRUE 26466
26464: GO 26926
26466: POP
// begin Am_posily = AMERICKE_POSILY11_LIST ;
26467: LD_ADDR_EXP 72
26471: PUSH
26472: LD_EXP 55
26476: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26477: LD_EXP 72
26481: PPUSH
26482: LD_INT 110
26484: PPUSH
26485: LD_INT 23
26487: PPUSH
26488: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26492: LD_EXP 72
26496: PPUSH
26497: LD_INT 35
26499: PPUSH
26500: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26504: LD_EXP 72
26508: PPUSH
26509: LD_INT 110
26511: PPUSH
26512: LD_INT 23
26514: PPUSH
26515: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26519: LD_EXP 72
26523: PPUSH
26524: LD_INT 35
26526: PPUSH
26527: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26531: LD_EXP 72
26535: PPUSH
26536: LD_INT 110
26538: PPUSH
26539: LD_INT 23
26541: PPUSH
26542: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26546: LD_EXP 72
26550: PPUSH
26551: LD_INT 35
26553: PPUSH
26554: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26558: LD_EXP 72
26562: PPUSH
26563: LD_INT 110
26565: PPUSH
26566: LD_INT 23
26568: PPUSH
26569: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26573: LD_EXP 72
26577: PPUSH
26578: LD_INT 35
26580: PPUSH
26581: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26585: LD_EXP 72
26589: PPUSH
26590: LD_INT 87
26592: PPUSH
26593: LD_INT 19
26595: PPUSH
26596: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26600: LD_EXP 72
26604: PPUSH
26605: LD_INT 35
26607: PPUSH
26608: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26612: LD_EXP 72
26616: PPUSH
26617: LD_INT 87
26619: PPUSH
26620: LD_INT 19
26622: PPUSH
26623: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26627: LD_EXP 72
26631: PPUSH
26632: LD_INT 35
26634: PPUSH
26635: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26639: LD_EXP 72
26643: PPUSH
26644: LD_INT 87
26646: PPUSH
26647: LD_INT 19
26649: PPUSH
26650: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26654: LD_EXP 72
26658: PPUSH
26659: LD_INT 35
26661: PPUSH
26662: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26666: LD_EXP 72
26670: PPUSH
26671: LD_INT 87
26673: PPUSH
26674: LD_INT 19
26676: PPUSH
26677: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26681: LD_EXP 72
26685: PPUSH
26686: LD_INT 35
26688: PPUSH
26689: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26693: LD_EXP 72
26697: PPUSH
26698: LD_INT 52
26700: PPUSH
26701: LD_INT 12
26703: PPUSH
26704: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26708: LD_EXP 72
26712: PPUSH
26713: LD_INT 35
26715: PPUSH
26716: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26720: LD_EXP 72
26724: PPUSH
26725: LD_INT 52
26727: PPUSH
26728: LD_INT 12
26730: PPUSH
26731: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26735: LD_EXP 72
26739: PPUSH
26740: LD_INT 35
26742: PPUSH
26743: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26747: LD_EXP 72
26751: PPUSH
26752: LD_INT 52
26754: PPUSH
26755: LD_INT 12
26757: PPUSH
26758: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26762: LD_EXP 72
26766: PPUSH
26767: LD_INT 35
26769: PPUSH
26770: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26774: LD_EXP 72
26778: PPUSH
26779: LD_INT 52
26781: PPUSH
26782: LD_INT 12
26784: PPUSH
26785: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26789: LD_EXP 72
26793: PPUSH
26794: LD_INT 35
26796: PPUSH
26797: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26801: LD_EXP 72
26805: PPUSH
26806: LD_INT 52
26808: PPUSH
26809: LD_INT 12
26811: PPUSH
26812: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26816: LD_EXP 72
26820: PPUSH
26821: LD_INT 35
26823: PPUSH
26824: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26828: LD_EXP 72
26832: PPUSH
26833: LD_INT 52
26835: PPUSH
26836: LD_INT 12
26838: PPUSH
26839: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26843: LD_EXP 72
26847: PPUSH
26848: LD_INT 35
26850: PPUSH
26851: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26855: LD_EXP 72
26859: PPUSH
26860: LD_INT 52
26862: PPUSH
26863: LD_INT 12
26865: PPUSH
26866: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26870: LD_EXP 72
26874: PPUSH
26875: LD_INT 35
26877: PPUSH
26878: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26882: LD_EXP 72
26886: PPUSH
26887: LD_INT 52
26889: PPUSH
26890: LD_INT 12
26892: PPUSH
26893: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26897: LD_EXP 72
26901: PPUSH
26902: LD_INT 35
26904: PPUSH
26905: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26909: LD_EXP 72
26913: PPUSH
26914: LD_INT 27
26916: PPUSH
26917: LD_INT 13
26919: PPUSH
26920: CALL_OW 174
// end ; end ;
26924: GO 26927
26926: POP
// end ;
26927: LD_VAR 0 2
26931: RET
// every 1 1$7 do
26932: GO 26934
26934: DISABLE
// begin if Researched ( Amici , tech_Weap1 ) then
26935: LD_EXP 4
26939: PPUSH
26940: LD_INT 51
26942: PPUSH
26943: CALL_OW 325
26947: IFFALSE 26974
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26949: LD_INT 51
26951: PPUSH
26952: LD_EXP 4
26956: PPUSH
26957: LD_INT 1
26959: PPUSH
26960: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26964: LD_INT 9
26966: PPUSH
26967: LD_INT 51
26969: PPUSH
26970: CALL_OW 124
// end ; enable ;
26974: ENABLE
// end ;
26975: END
// every 0 0$19 do
26976: GO 26978
26978: DISABLE
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26979: LD_INT 51
26981: PPUSH
26982: LD_EXP 4
26986: PPUSH
26987: LD_INT 1
26989: PPUSH
26990: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26994: LD_INT 9
26996: PPUSH
26997: LD_INT 51
26999: PPUSH
27000: CALL_OW 124
// end ;
27004: END
// every 0 0$1 do var i , temp_list ;
27005: GO 27007
27007: DISABLE
27008: LD_INT 0
27010: PPUSH
27011: PPUSH
// begin i = 1 ;
27012: LD_ADDR_VAR 0 1
27016: PUSH
27017: LD_INT 1
27019: ST_TO_ADDR
// while i <= Am_posily do
27020: LD_VAR 0 1
27024: PUSH
27025: LD_EXP 72
27029: LESSEQUAL
27030: IFFALSE 27169
// begin if IsInArea ( Am_posily [ i ] , Am_base ) or not IsLive ( i ) then
27032: LD_EXP 72
27036: PUSH
27037: LD_VAR 0 1
27041: ARRAY
27042: PPUSH
27043: LD_INT 6
27045: PPUSH
27046: CALL_OW 308
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 300
27060: NOT
27061: OR
27062: IFFALSE 27153
// begin if IsInArea ( Am_posily [ i ] , Am_base ) then
27064: LD_EXP 72
27068: PUSH
27069: LD_VAR 0 1
27073: ARRAY
27074: PPUSH
27075: LD_INT 6
27077: PPUSH
27078: CALL_OW 308
27082: IFFALSE 27131
// begin Prezite_posily = Prezite_posily + 1 ;
27084: LD_ADDR_EXP 73
27088: PUSH
27089: LD_EXP 73
27093: PUSH
27094: LD_INT 1
27096: PLUS
27097: ST_TO_ADDR
// if Prezite_posily > muze_prezit_posil [ difficulty ] then
27098: LD_EXP 73
27102: PUSH
27103: LD_EXP 23
27107: PUSH
27108: LD_OWVAR 67
27112: ARRAY
27113: GREATER
27114: IFFALSE 27131
// DestroyUnit ( Am_posily [ i ] ) ;
27116: LD_EXP 72
27120: PUSH
27121: LD_VAR 0 1
27125: ARRAY
27126: PPUSH
27127: CALL_OW 65
// end ; Am_posily = Delete ( Am_posily , i ) ;
27131: LD_ADDR_EXP 72
27135: PUSH
27136: LD_EXP 72
27140: PPUSH
27141: LD_VAR 0 1
27145: PPUSH
27146: CALL_OW 3
27150: ST_TO_ADDR
// continue ;
27151: GO 27020
// end ; i = i + 1 ;
27153: LD_ADDR_VAR 0 1
27157: PUSH
27158: LD_VAR 0 1
27162: PUSH
27163: LD_INT 1
27165: PLUS
27166: ST_TO_ADDR
// end ;
27167: GO 27020
// enable ;
27169: ENABLE
// end ;
27170: PPOPN 2
27172: END
// every 0 0$13 do var pom ;
27173: GO 27175
27175: DISABLE
27176: LD_INT 0
27178: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_mechanic ] ] ) ;
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 6
27186: PPUSH
27187: LD_INT 22
27189: PUSH
27190: LD_EXP 4
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 25
27201: PUSH
27202: LD_INT 3
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PPUSH
27213: CALL_OW 70
27217: ST_TO_ADDR
// if pom > 0 then
27218: LD_VAR 0 1
27222: PUSH
27223: LD_INT 0
27225: GREATER
27226: IFFALSE 27240
// ComEnterUnit ( pom , Am_fac ) ;
27228: LD_VAR 0 1
27232: PPUSH
27233: LD_INT 10
27235: PPUSH
27236: CALL_OW 120
// enable ;
27240: ENABLE
// end ;
27241: PPOPN 1
27243: END
// every 0 0$17 do var pom ;
27244: GO 27246
27246: DISABLE
27247: LD_INT 0
27249: PPUSH
// begin pom = UnitsInside ( Am_fac ) ;
27250: LD_ADDR_VAR 0 1
27254: PUSH
27255: LD_INT 10
27257: PPUSH
27258: CALL_OW 313
27262: ST_TO_ADDR
// if pom > 3 then
27263: LD_VAR 0 1
27267: PUSH
27268: LD_INT 3
27270: GREATER
27271: IFFALSE 27292
// ComConstruct ( Am_fac , us_light_wheeled , engine_solar , control_manual , us_machine_gun ) ;
27273: LD_INT 10
27275: PPUSH
27276: LD_INT 1
27278: PPUSH
27279: LD_INT 2
27281: PPUSH
27282: LD_INT 1
27284: PPUSH
27285: LD_INT 2
27287: PPUSH
27288: CALL_OW 125
// while UnitsInside ( Am_fac ) > 3 do
27292: LD_INT 10
27294: PPUSH
27295: CALL_OW 313
27299: PUSH
27300: LD_INT 3
27302: GREATER
27303: IFFALSE 27314
// wait ( 0 0$10 ) ;
27305: LD_INT 350
27307: PPUSH
27308: CALL_OW 67
27312: GO 27292
// enable ;
27314: ENABLE
// end ;
27315: PPOPN 1
27317: END
// export function am_posily_videny_rusakama ; var i ; var videli ; begin
27318: LD_INT 0
27320: PPUSH
27321: PPUSH
27322: PPUSH
// videli = false ;
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_INT 0
27330: ST_TO_ADDR
// for i in Am_posily do
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: LD_EXP 72
27340: PUSH
27341: FOR_IN
27342: IFFALSE 27370
// if See ( You , i ) then
27344: LD_EXP 1
27348: PPUSH
27349: LD_VAR 0 2
27353: PPUSH
27354: CALL_OW 292
27358: IFFALSE 27368
// videli = true ;
27360: LD_ADDR_VAR 0 3
27364: PUSH
27365: LD_INT 1
27367: ST_TO_ADDR
27368: GO 27341
27370: POP
27371: POP
// result := videli ;
27372: LD_ADDR_VAR 0 1
27376: PUSH
27377: LD_VAR 0 3
27381: ST_TO_ADDR
// end ;
27382: LD_VAR 0 1
27386: RET
// export function omicron_half_destroyed ; var pom , i ; var zije ; var a ; begin
27387: LD_INT 0
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
// a = false ;
27394: LD_ADDR_VAR 0 5
27398: PUSH
27399: LD_INT 0
27401: ST_TO_ADDR
// if ( ( not IsOK ( Am_bu1 ) ) or ( GetSide ( Am_bu1 ) <> Amici ) ) and ( ( not IsOK ( Am_bu2 ) ) or GetSide ( Am_bu2 ) <> Amici ) and ( ( not IsOK ( Am_bu3 ) ) or GetSide ( Am_bu3 ) <> Amici ) and ( ( not IsOK ( Am_bar1 ) ) or GetSide ( Am_bar1 ) <> Amici ) and ( ( not IsOK ( Am_bar2 ) ) or GetSide ( Am_bar2 ) <> Amici ) then
27402: LD_INT 7
27404: PPUSH
27405: CALL_OW 302
27409: NOT
27410: PUSH
27411: LD_INT 7
27413: PPUSH
27414: CALL_OW 255
27418: PUSH
27419: LD_EXP 4
27423: NONEQUAL
27424: OR
27425: PUSH
27426: LD_INT 8
27428: PPUSH
27429: CALL_OW 302
27433: NOT
27434: PUSH
27435: LD_INT 8
27437: PPUSH
27438: CALL_OW 255
27442: PUSH
27443: LD_EXP 4
27447: NONEQUAL
27448: OR
27449: AND
27450: PUSH
27451: LD_INT 19
27453: PPUSH
27454: CALL_OW 302
27458: NOT
27459: PUSH
27460: LD_INT 19
27462: PPUSH
27463: CALL_OW 255
27467: PUSH
27468: LD_EXP 4
27472: NONEQUAL
27473: OR
27474: AND
27475: PUSH
27476: LD_INT 11
27478: PPUSH
27479: CALL_OW 302
27483: NOT
27484: PUSH
27485: LD_INT 11
27487: PPUSH
27488: CALL_OW 255
27492: PUSH
27493: LD_EXP 4
27497: NONEQUAL
27498: OR
27499: AND
27500: PUSH
27501: LD_INT 25
27503: PPUSH
27504: CALL_OW 302
27508: NOT
27509: PUSH
27510: LD_INT 25
27512: PPUSH
27513: CALL_OW 255
27517: PUSH
27518: LD_EXP 4
27522: NONEQUAL
27523: OR
27524: AND
27525: IFFALSE 27535
// a = true ;
27527: LD_ADDR_VAR 0 5
27531: PUSH
27532: LD_INT 1
27534: ST_TO_ADDR
// result = a ;
27535: LD_ADDR_VAR 0 1
27539: PUSH
27540: LD_VAR 0 5
27544: ST_TO_ADDR
// end ;
27545: LD_VAR 0 1
27549: RET
// export function stahnuti_amiku ; var i ; var pom , pom1 , pom2 , pomx ; begin
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_INT 6
27565: PPUSH
27566: LD_INT 22
27568: PUSH
27569: LD_EXP 4
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 21
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PPUSH
27592: CALL_OW 70
27596: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27597: LD_ADDR_VAR 0 5
27601: PUSH
27602: LD_INT 6
27604: PPUSH
27605: LD_INT 22
27607: PUSH
27608: LD_EXP 4
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 21
27619: PUSH
27620: LD_INT 3
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PPUSH
27631: CALL_OW 70
27635: ST_TO_ADDR
// for i in pom2 do
27636: LD_ADDR_VAR 0 2
27640: PUSH
27641: LD_VAR 0 5
27645: PUSH
27646: FOR_IN
27647: IFFALSE 27687
// if UnitsInside ( i ) <> 0 then
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL_OW 313
27658: PUSH
27659: LD_INT 0
27661: NONEQUAL
27662: IFFALSE 27685
// pom = pom ^ UnitsInside ( i ) ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_VAR 0 3
27673: PUSH
27674: LD_VAR 0 2
27678: PPUSH
27679: CALL_OW 313
27683: ADD
27684: ST_TO_ADDR
27685: GO 27646
27687: POP
27688: POP
// ComExitBuilding ( pom ) ;
27689: LD_VAR 0 3
27693: PPUSH
27694: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27698: LD_VAR 0 3
27702: PPUSH
27703: LD_INT 6
27705: PPUSH
27706: LD_INT 2
27708: PPUSH
27709: CALL_OW 171
// wait ( 0 0$1 ) ;
27713: LD_INT 35
27715: PPUSH
27716: CALL_OW 67
// while pom > 0 do
27720: LD_VAR 0 3
27724: PUSH
27725: LD_INT 0
27727: GREATER
27728: IFFALSE 27964
// begin pom1 = FilterUnitsInArea ( ODBER_AM2 , [ [ f_side , Amici ] ] ) ;
27730: LD_ADDR_VAR 0 4
27734: PUSH
27735: LD_INT 38
27737: PPUSH
27738: LD_INT 22
27740: PUSH
27741: LD_EXP 4
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: PPUSH
27753: CALL_OW 70
27757: ST_TO_ADDR
// for i in pom1 do
27758: LD_ADDR_VAR 0 2
27762: PUSH
27763: LD_VAR 0 4
27767: PUSH
27768: FOR_IN
27769: IFFALSE 27798
// begin RemoveUnit ( i ) ;
27771: LD_VAR 0 2
27775: PPUSH
27776: CALL_OW 64
// pom = pom diff i ;
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_VAR 0 3
27789: PUSH
27790: LD_VAR 0 2
27794: DIFF
27795: ST_TO_ADDR
// end ;
27796: GO 27768
27798: POP
27799: POP
// wait ( 0 0$1 ) ;
27800: LD_INT 35
27802: PPUSH
27803: CALL_OW 67
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27807: LD_ADDR_VAR 0 3
27811: PUSH
27812: LD_INT 6
27814: PPUSH
27815: LD_INT 22
27817: PUSH
27818: LD_EXP 4
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 21
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PPUSH
27841: CALL_OW 70
27845: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27846: LD_ADDR_VAR 0 5
27850: PUSH
27851: LD_INT 6
27853: PPUSH
27854: LD_INT 22
27856: PUSH
27857: LD_EXP 4
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 21
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PPUSH
27880: CALL_OW 70
27884: ST_TO_ADDR
// for i in pom2 do
27885: LD_ADDR_VAR 0 2
27889: PUSH
27890: LD_VAR 0 5
27894: PUSH
27895: FOR_IN
27896: IFFALSE 27936
// if UnitsInside ( i ) <> 0 then
27898: LD_VAR 0 2
27902: PPUSH
27903: CALL_OW 313
27907: PUSH
27908: LD_INT 0
27910: NONEQUAL
27911: IFFALSE 27934
// pom = pom ^ UnitsInside ( i ) ;
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: LD_VAR 0 3
27922: PUSH
27923: LD_VAR 0 2
27927: PPUSH
27928: CALL_OW 313
27932: ADD
27933: ST_TO_ADDR
27934: GO 27895
27936: POP
27937: POP
// ComExitBuilding ( pom ) ;
27938: LD_VAR 0 3
27942: PPUSH
27943: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27947: LD_VAR 0 3
27951: PPUSH
27952: LD_INT 6
27954: PPUSH
27955: LD_INT 2
27957: PPUSH
27958: CALL_OW 171
// end ;
27962: GO 27720
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27964: LD_ADDR_VAR 0 3
27968: PUSH
27969: LD_INT 22
27971: PPUSH
27972: LD_INT 22
27974: PUSH
27975: LD_EXP 4
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 21
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PPUSH
27998: CALL_OW 70
28002: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
28003: LD_ADDR_VAR 0 5
28007: PUSH
28008: LD_INT 22
28010: PPUSH
28011: LD_INT 22
28013: PUSH
28014: LD_EXP 4
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 21
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PPUSH
28037: CALL_OW 70
28041: ST_TO_ADDR
// for i in pom2 do
28042: LD_ADDR_VAR 0 2
28046: PUSH
28047: LD_VAR 0 5
28051: PUSH
28052: FOR_IN
28053: IFFALSE 28093
// if UnitsInside ( i ) <> 0 then
28055: LD_VAR 0 2
28059: PPUSH
28060: CALL_OW 313
28064: PUSH
28065: LD_INT 0
28067: NONEQUAL
28068: IFFALSE 28091
// pom = pom ^ UnitsInside ( i ) ;
28070: LD_ADDR_VAR 0 3
28074: PUSH
28075: LD_VAR 0 3
28079: PUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 313
28089: ADD
28090: ST_TO_ADDR
28091: GO 28052
28093: POP
28094: POP
// ComExitBuilding ( pom ) ;
28095: LD_VAR 0 3
28099: PPUSH
28100: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
28104: LD_VAR 0 3
28108: PPUSH
28109: LD_INT 138
28111: PPUSH
28112: LD_INT 40
28114: PPUSH
28115: CALL_OW 171
// wait ( 0 0$1 ) ;
28119: LD_INT 35
28121: PPUSH
28122: CALL_OW 67
// while pom + 0 > 0 do
28126: LD_VAR 0 3
28130: PUSH
28131: LD_INT 0
28133: PLUS
28134: PUSH
28135: LD_INT 0
28137: GREATER
28138: IFFALSE 28374
// begin pom1 = FilterUnitsInArea ( ODBER_AM , [ [ f_side , Amici ] ] ) ;
28140: LD_ADDR_VAR 0 4
28144: PUSH
28145: LD_INT 35
28147: PPUSH
28148: LD_INT 22
28150: PUSH
28151: LD_EXP 4
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: PPUSH
28163: CALL_OW 70
28167: ST_TO_ADDR
// for i in pom1 do
28168: LD_ADDR_VAR 0 2
28172: PUSH
28173: LD_VAR 0 4
28177: PUSH
28178: FOR_IN
28179: IFFALSE 28208
// begin RemoveUnit ( i ) ;
28181: LD_VAR 0 2
28185: PPUSH
28186: CALL_OW 64
// pom = pom diff i ;
28190: LD_ADDR_VAR 0 3
28194: PUSH
28195: LD_VAR 0 3
28199: PUSH
28200: LD_VAR 0 2
28204: DIFF
28205: ST_TO_ADDR
// end ;
28206: GO 28178
28208: POP
28209: POP
// wait ( 0 0$1 ) ;
28210: LD_INT 35
28212: PPUSH
28213: CALL_OW 67
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
28217: LD_ADDR_VAR 0 3
28221: PUSH
28222: LD_INT 22
28224: PPUSH
28225: LD_INT 22
28227: PUSH
28228: LD_EXP 4
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 21
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PPUSH
28251: CALL_OW 70
28255: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
28256: LD_ADDR_VAR 0 5
28260: PUSH
28261: LD_INT 22
28263: PPUSH
28264: LD_INT 22
28266: PUSH
28267: LD_EXP 4
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 21
28278: PUSH
28279: LD_INT 3
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 70
28294: ST_TO_ADDR
// for i in pom2 do
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: LD_VAR 0 5
28304: PUSH
28305: FOR_IN
28306: IFFALSE 28346
// if UnitsInside ( i ) <> 0 then
28308: LD_VAR 0 2
28312: PPUSH
28313: CALL_OW 313
28317: PUSH
28318: LD_INT 0
28320: NONEQUAL
28321: IFFALSE 28344
// pom = pom ^ UnitsInside ( i ) ;
28323: LD_ADDR_VAR 0 3
28327: PUSH
28328: LD_VAR 0 3
28332: PUSH
28333: LD_VAR 0 2
28337: PPUSH
28338: CALL_OW 313
28342: ADD
28343: ST_TO_ADDR
28344: GO 28305
28346: POP
28347: POP
// ComExitBuilding ( pom ) ;
28348: LD_VAR 0 3
28352: PPUSH
28353: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
28357: LD_VAR 0 3
28361: PPUSH
28362: LD_INT 138
28364: PPUSH
28365: LD_INT 40
28367: PPUSH
28368: CALL_OW 171
// end ;
28372: GO 28126
// end ; end_of_file
28374: LD_VAR 0 1
28378: RET
// var arabsky_utok_zacal ; export posilani_arabskych_hlidek ; every 0 0$0.1 do
28379: GO 28381
28381: DISABLE
// begin posilani_arabskych_hlidek = false ;
28382: LD_ADDR_EXP 74
28386: PUSH
28387: LD_INT 0
28389: ST_TO_ADDR
// end ;
28390: END
// export function utok_arabu ; var i , pom ; begin
28391: LD_INT 0
28393: PPUSH
28394: PPUSH
28395: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_INT 22
28403: PUSH
28404: LD_EXP 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: EMPTY
28414: LIST
28415: PPUSH
28416: CALL_OW 69
28420: ST_TO_ADDR
// ArDontAttackPlayer ( true ) ;
28421: LD_INT 1
28423: PPUSH
28424: CALL 29365 0 1
// InGameOn ;
28428: CALL_OW 8
// ComStop ( pom ) ;
28432: LD_VAR 0 3
28436: PPUSH
28437: CALL_OW 141
// EnableVideoExclamations ;
28441: CALL_OW 498
// CenterNowOnXY ( 142 , 80 ) ;
28445: LD_INT 142
28447: PPUSH
28448: LD_INT 80
28450: PPUSH
28451: CALL_OW 86
// arabsky_utok_zacal = true ;
28455: LD_ADDR_LOC 27
28459: PUSH
28460: LD_INT 1
28462: ST_TO_ADDR
// posli_rusy_pryc ;
28463: CALL 7966 0 0
// schovej_kurina ;
28467: CALL 9065 0 0
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 1 ] , Opoce1 , false ) ;
28471: LD_EXP 60
28475: PUSH
28476: LD_INT 1
28478: ARRAY
28479: PPUSH
28480: LD_INT 10
28482: PPUSH
28483: LD_INT 0
28485: PPUSH
28486: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 2 ] , Opoce2 , false ) ;
28490: LD_EXP 60
28494: PUSH
28495: LD_INT 2
28497: ARRAY
28498: PPUSH
28499: LD_INT 11
28501: PPUSH
28502: LD_INT 0
28504: PPUSH
28505: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 3 ] , Opoce2 , false ) ;
28509: LD_EXP 60
28513: PUSH
28514: LD_INT 3
28516: ARRAY
28517: PPUSH
28518: LD_INT 11
28520: PPUSH
28521: LD_INT 0
28523: PPUSH
28524: CALL_OW 49
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 134 , 62 ) ;
28528: LD_EXP 60
28532: PUSH
28533: LD_INT 1
28535: ARRAY
28536: PPUSH
28537: LD_INT 134
28539: PPUSH
28540: LD_INT 62
28542: PPUSH
28543: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 133 , 69 ) ;
28547: LD_EXP 60
28551: PUSH
28552: LD_INT 1
28554: ARRAY
28555: PPUSH
28556: LD_INT 133
28558: PPUSH
28559: LD_INT 69
28561: PPUSH
28562: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_bu1 ) ;
28566: LD_EXP 60
28570: PUSH
28571: LD_INT 1
28573: ARRAY
28574: PPUSH
28575: LD_INT 3
28577: PPUSH
28578: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_fac ) ;
28582: LD_EXP 60
28586: PUSH
28587: LD_INT 1
28589: ARRAY
28590: PPUSH
28591: LD_INT 5
28593: PPUSH
28594: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_dep ) ;
28598: LD_EXP 60
28602: PUSH
28603: LD_INT 1
28605: ARRAY
28606: PPUSH
28607: LD_INT 1
28609: PPUSH
28610: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 142 , 94 ) ;
28614: LD_EXP 60
28618: PUSH
28619: LD_INT 2
28621: ARRAY
28622: PPUSH
28623: LD_INT 142
28625: PPUSH
28626: LD_INT 94
28628: PPUSH
28629: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 140 , 90 ) ;
28633: LD_EXP 60
28637: PUSH
28638: LD_INT 2
28640: ARRAY
28641: PPUSH
28642: LD_INT 140
28644: PPUSH
28645: LD_INT 90
28647: PPUSH
28648: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_el1 ) ;
28652: LD_EXP 60
28656: PUSH
28657: LD_INT 2
28659: ARRAY
28660: PPUSH
28661: LD_INT 14
28663: PPUSH
28664: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_fac ) ;
28668: LD_EXP 60
28672: PUSH
28673: LD_INT 2
28675: ARRAY
28676: PPUSH
28677: LD_INT 5
28679: PPUSH
28680: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_dep ) ;
28684: LD_EXP 60
28688: PUSH
28689: LD_INT 2
28691: ARRAY
28692: PPUSH
28693: LD_INT 1
28695: PPUSH
28696: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 143 , 94 ) ;
28700: LD_EXP 60
28704: PUSH
28705: LD_INT 3
28707: ARRAY
28708: PPUSH
28709: LD_INT 143
28711: PPUSH
28712: LD_INT 94
28714: PPUSH
28715: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 141 , 90 ) ;
28719: LD_EXP 60
28723: PUSH
28724: LD_INT 3
28726: ARRAY
28727: PPUSH
28728: LD_INT 141
28730: PPUSH
28731: LD_INT 90
28733: PPUSH
28734: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_bar1 ) ;
28738: LD_EXP 60
28742: PUSH
28743: LD_INT 3
28745: ARRAY
28746: PPUSH
28747: LD_INT 2
28749: PPUSH
28750: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_fac ) ;
28754: LD_EXP 60
28758: PUSH
28759: LD_INT 3
28761: ARRAY
28762: PPUSH
28763: LD_INT 5
28765: PPUSH
28766: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_dep ) ;
28770: LD_EXP 60
28774: PUSH
28775: LD_INT 3
28777: ARRAY
28778: PPUSH
28779: LD_INT 1
28781: PPUSH
28782: CALL_OW 175
// music_nat = nation_arabian ;
28786: LD_ADDR_OWVAR 71
28790: PUSH
28791: LD_INT 2
28793: ST_TO_ADDR
// CenterOnXY ( 142 , 80 ) ;
28794: LD_INT 142
28796: PPUSH
28797: LD_INT 80
28799: PPUSH
28800: CALL_OW 84
// for i in ARABI_SELF_AUTA do
28804: LD_ADDR_VAR 0 2
28808: PUSH
28809: LD_EXP 63
28813: PUSH
28814: FOR_IN
28815: IFFALSE 28834
// PlaceUnitArea ( i , Arabi2 , false ) ;
28817: LD_VAR 0 2
28821: PPUSH
28822: LD_INT 13
28824: PPUSH
28825: LD_INT 0
28827: PPUSH
28828: CALL_OW 49
28832: GO 28814
28834: POP
28835: POP
// ComAttackUnit ( ARABI_SELF_AUTA [ 1 ] , RU1_bar2 ) ;
28836: LD_EXP 63
28840: PUSH
28841: LD_INT 1
28843: ARRAY
28844: PPUSH
28845: LD_INT 17
28847: PPUSH
28848: CALL_OW 115
// ComWait ( ARABI_SELF_AUTA [ 2 ] , 0 0$1 ) ;
28852: LD_EXP 63
28856: PUSH
28857: LD_INT 2
28859: ARRAY
28860: PPUSH
28861: LD_INT 35
28863: PPUSH
28864: CALL_OW 142
// AddComAttackUnit ( ARABI_SELF_AUTA [ 2 ] , RU1_dep ) ;
28868: LD_EXP 63
28872: PUSH
28873: LD_INT 2
28875: ARRAY
28876: PPUSH
28877: LD_INT 1
28879: PPUSH
28880: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
28884: LD_INT 142
28886: PPUSH
28887: LD_INT 80
28889: PPUSH
28890: CALL_OW 84
// for i in ARABI_PRVNI_VLNA do
28894: LD_ADDR_VAR 0 2
28898: PUSH
28899: LD_EXP 61
28903: PUSH
28904: FOR_IN
28905: IFFALSE 28924
// PlaceUnitArea ( i , Arabi1 , false ) ;
28907: LD_VAR 0 2
28911: PPUSH
28912: LD_INT 12
28914: PPUSH
28915: LD_INT 0
28917: PPUSH
28918: CALL_OW 49
28922: GO 28904
28924: POP
28925: POP
// ComMoveXY ( ARABI_PRVNI_VLNA , 139 , 78 ) ;
28926: LD_EXP 61
28930: PPUSH
28931: LD_INT 139
28933: PPUSH
28934: LD_INT 78
28936: PPUSH
28937: CALL_OW 111
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bar1 ) ;
28941: LD_EXP 61
28945: PPUSH
28946: LD_INT 2
28948: PPUSH
28949: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu2 ) ;
28953: LD_EXP 61
28957: PPUSH
28958: LD_INT 4
28960: PPUSH
28961: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu1 ) ;
28965: LD_EXP 61
28969: PPUSH
28970: LD_INT 3
28972: PPUSH
28973: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab2 ) ;
28977: LD_EXP 61
28981: PPUSH
28982: LD_INT 16
28984: PPUSH
28985: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_dep ) ;
28989: LD_EXP 61
28993: PPUSH
28994: LD_INT 1
28996: PPUSH
28997: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab1 ) ;
29001: LD_EXP 61
29005: PPUSH
29006: LD_INT 6
29008: PPUSH
29009: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_fac ) ;
29013: LD_EXP 61
29017: PPUSH
29018: LD_INT 5
29020: PPUSH
29021: CALL_OW 175
// AddComAgressiveMove ( ARABI_PRVNI_VLNA , 143 , 79 ) ;
29025: LD_EXP 61
29029: PPUSH
29030: LD_INT 143
29032: PPUSH
29033: LD_INT 79
29035: PPUSH
29036: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
29040: LD_INT 142
29042: PPUSH
29043: LD_INT 80
29045: PPUSH
29046: CALL_OW 84
// DisableVideoExclamations ;
29050: CALL_OW 499
// InGameOff ;
29054: CALL_OW 9
// interface_hidden := true ;
29058: LD_ADDR_OWVAR 54
29062: PUSH
29063: LD_INT 1
29065: ST_TO_ADDR
// kecy_behem_utoku_arabu ;
29066: CALL 13780 0 0
// InGameOn ;
29070: CALL_OW 8
// EnableVideoExclamations ;
29074: CALL_OW 498
// CenterOnXY ( 142 , 80 ) ;
29078: LD_INT 142
29080: PPUSH
29081: LD_INT 80
29083: PPUSH
29084: CALL_OW 84
// wait ( 0 0$4 ) ;
29088: LD_INT 140
29090: PPUSH
29091: CALL_OW 67
// posli_kurina_na_smrt ;
29095: CALL 9085 0 0
// for i in ARABI_FLAME_LIST do
29099: LD_ADDR_VAR 0 2
29103: PUSH
29104: LD_EXP 62
29108: PUSH
29109: FOR_IN
29110: IFFALSE 29129
// PlaceUnitArea ( i , Arabi2 , false ) ;
29112: LD_VAR 0 2
29116: PPUSH
29117: LD_INT 13
29119: PPUSH
29120: LD_INT 0
29122: PPUSH
29123: CALL_OW 49
29127: GO 29109
29129: POP
29130: POP
// ComMoveXY ( ARABI_FLAME_LIST , 139 , 78 ) ;
29131: LD_EXP 62
29135: PPUSH
29136: LD_INT 139
29138: PPUSH
29139: LD_INT 78
29141: PPUSH
29142: CALL_OW 111
// AddComAttackUnit ( ARABI_FLAME_LIST , RU1_bar1 ) ;
29146: LD_EXP 62
29150: PPUSH
29151: LD_INT 2
29153: PPUSH
29154: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
29158: LD_INT 142
29160: PPUSH
29161: LD_INT 80
29163: PPUSH
29164: CALL_OW 84
// for i in ARABI_VOJACI do
29168: LD_ADDR_VAR 0 2
29172: PUSH
29173: LD_EXP 64
29177: PUSH
29178: FOR_IN
29179: IFFALSE 29198
// PlaceUnitArea ( i , Arabi1 , false ) ;
29181: LD_VAR 0 2
29185: PPUSH
29186: LD_INT 12
29188: PPUSH
29189: LD_INT 0
29191: PPUSH
29192: CALL_OW 49
29196: GO 29178
29198: POP
29199: POP
// ComMoveXY ( ARABI_VOJACI , 153 , 84 ) ;
29200: LD_EXP 64
29204: PPUSH
29205: LD_INT 153
29207: PPUSH
29208: LD_INT 84
29210: PPUSH
29211: CALL_OW 111
// AddComAgressiveMove ( ARABI_VOJACI , 150 , 83 ) ;
29215: LD_EXP 64
29219: PPUSH
29220: LD_INT 150
29222: PPUSH
29223: LD_INT 83
29225: PPUSH
29226: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 78 ) ;
29230: LD_EXP 64
29234: PPUSH
29235: LD_INT 141
29237: PPUSH
29238: LD_INT 78
29240: PPUSH
29241: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 86 ) ;
29245: LD_EXP 64
29249: PPUSH
29250: LD_INT 141
29252: PPUSH
29253: LD_INT 86
29255: PPUSH
29256: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
29260: LD_INT 142
29262: PPUSH
29263: LD_INT 80
29265: PPUSH
29266: CALL_OW 84
// wait ( 0 0$5 ) ;
29270: LD_INT 175
29272: PPUSH
29273: CALL_OW 67
// for i in ARABI_doraz do
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: LD_EXP 65
29286: PUSH
29287: FOR_IN
29288: IFFALSE 29307
// PlaceUnitArea ( i , Arabi1 , false ) ;
29290: LD_VAR 0 2
29294: PPUSH
29295: LD_INT 12
29297: PPUSH
29298: LD_INT 0
29300: PPUSH
29301: CALL_OW 49
29305: GO 29287
29307: POP
29308: POP
// ComMoveXY ( ARABI_doraz , 153 , 85 ) ;
29309: LD_EXP 65
29313: PPUSH
29314: LD_INT 153
29316: PPUSH
29317: LD_INT 85
29319: PPUSH
29320: CALL_OW 111
// AddComAttackUnit ( ARABI_doraz , RU1_dep ) ;
29324: LD_EXP 65
29328: PPUSH
29329: LD_INT 1
29331: PPUSH
29332: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab1 ) ;
29336: LD_EXP 65
29340: PPUSH
29341: LD_INT 6
29343: PPUSH
29344: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab2 ) ;
29348: LD_EXP 65
29352: PPUSH
29353: LD_INT 16
29355: PPUSH
29356: CALL_OW 175
// end ;
29360: LD_VAR 0 1
29364: RET
// export function ArDontAttackPlayer ( bol ) ; var i ; begin
29365: LD_INT 0
29367: PPUSH
29368: PPUSH
// for i in FilterAllUnits ( [ f_side , You ] ) do
29369: LD_ADDR_VAR 0 3
29373: PUSH
29374: LD_INT 22
29376: PUSH
29377: LD_EXP 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PPUSH
29386: CALL_OW 69
29390: PUSH
29391: FOR_IN
29392: IFFALSE 29432
// if bol then
29394: LD_VAR 0 1
29398: IFFALSE 29416
// DoNotAttack ( Arabi , i ) else
29400: LD_EXP 5
29404: PPUSH
29405: LD_VAR 0 3
29409: PPUSH
29410: CALL_OW 471
29414: GO 29430
// NormalAttack ( Arabi , i ) ;
29416: LD_EXP 5
29420: PPUSH
29421: LD_VAR 0 3
29425: PPUSH
29426: CALL_OW 472
29430: GO 29391
29432: POP
29433: POP
// end ;
29434: LD_VAR 0 2
29438: RET
// every 0 0$5 trigger arabsky_utok_zacal do var pom , pom1 , i ; var utek ;
29439: LD_LOC 27
29443: IFFALSE 29627
29445: GO 29447
29447: DISABLE
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
// begin utek = [ ] ;
29454: LD_ADDR_VAR 0 4
29458: PUSH
29459: EMPTY
29460: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) ;
29461: LD_ADDR_VAR 0 1
29465: PUSH
29466: LD_INT 14
29468: PPUSH
29469: LD_INT 22
29471: PUSH
29472: LD_EXP 2
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 50
29483: PUSH
29484: EMPTY
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PPUSH
29491: CALL_OW 70
29495: ST_TO_ADDR
// if pom < 2 then
29496: LD_VAR 0 1
29500: PUSH
29501: LD_INT 2
29503: LESS
29504: IFFALSE 29601
// begin pom1 = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_ok ] ] ) ;
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_INT 22
29513: PUSH
29514: LD_EXP 5
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 50
29525: PUSH
29526: EMPTY
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PPUSH
29533: CALL_OW 69
29537: ST_TO_ADDR
// if pom1 > 0 then
29538: LD_VAR 0 2
29542: PUSH
29543: LD_INT 0
29545: GREATER
29546: IFFALSE 29601
// for i in pom1 do
29548: LD_ADDR_VAR 0 3
29552: PUSH
29553: LD_VAR 0 2
29557: PUSH
29558: FOR_IN
29559: IFFALSE 29599
// if utek < 3 then
29561: LD_VAR 0 4
29565: PUSH
29566: LD_INT 3
29568: LESS
29569: IFFALSE 29589
// utek = utek ^ i else
29571: LD_ADDR_VAR 0 4
29575: PUSH
29576: LD_VAR 0 4
29580: PUSH
29581: LD_VAR 0 3
29585: ADD
29586: ST_TO_ADDR
29587: GO 29597
// arabsky_utok_zacal = false ;
29589: LD_ADDR_LOC 27
29593: PUSH
29594: LD_INT 0
29596: ST_TO_ADDR
29597: GO 29558
29599: POP
29600: POP
// end ; if utek > 0 then
29601: LD_VAR 0 4
29605: PUSH
29606: LD_INT 0
29608: GREATER
29609: IFFALSE 29626
// ComMoveXY ( utek , 166 , 95 ) ;
29611: LD_VAR 0 4
29615: PPUSH
29616: LD_INT 166
29618: PPUSH
29619: LD_INT 95
29621: PPUSH
29622: CALL_OW 111
// enable ;
29626: ENABLE
// end ;
29627: PPOPN 4
29629: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) < 2 do var pom , i ;
29630: LD_INT 14
29632: PPUSH
29633: LD_INT 22
29635: PUSH
29636: LD_EXP 2
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 50
29647: PUSH
29648: EMPTY
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PPUSH
29655: CALL_OW 70
29659: PUSH
29660: LD_INT 2
29662: LESS
29663: IFFALSE 29727
29665: GO 29667
29667: DISABLE
29668: LD_INT 0
29670: PPUSH
29671: PPUSH
// begin pom = FilterUnitsInArea ( Arabi2 , [ [ f_side , Arabi ] ] ) ;
29672: LD_ADDR_VAR 0 1
29676: PUSH
29677: LD_INT 13
29679: PPUSH
29680: LD_INT 22
29682: PUSH
29683: LD_EXP 5
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: EMPTY
29693: LIST
29694: PPUSH
29695: CALL_OW 70
29699: ST_TO_ADDR
// for i in pom do
29700: LD_ADDR_VAR 0 2
29704: PUSH
29705: LD_VAR 0 1
29709: PUSH
29710: FOR_IN
29711: IFFALSE 29724
// RemoveUnit ( i ) ;
29713: LD_VAR 0 2
29717: PPUSH
29718: CALL_OW 64
29722: GO 29710
29724: POP
29725: POP
// enable ;
29726: ENABLE
// end ;
29727: PPOPN 2
29729: END
// every 0 0$4 trigger arabsky_utok_zacal do
29730: LD_LOC 27
29734: IFFALSE 29830
29736: GO 29738
29738: DISABLE
// begin if GetLives ( RU1_el1 ) < 1000 and GetLives ( RU1_el1 ) < 150 then
29739: LD_INT 14
29741: PPUSH
29742: CALL_OW 256
29746: PUSH
29747: LD_INT 1000
29749: LESS
29750: PUSH
29751: LD_INT 14
29753: PPUSH
29754: CALL_OW 256
29758: PUSH
29759: LD_INT 150
29761: LESS
29762: AND
29763: IFFALSE 29775
// SetLives ( RU1_el1 , 150 ) ;
29765: LD_INT 14
29767: PPUSH
29768: LD_INT 150
29770: PPUSH
29771: CALL_OW 234
// if GetLives ( RU1_el2 ) < 1000 and GetLives ( RU1_el2 ) < 150 then
29775: LD_INT 15
29777: PPUSH
29778: CALL_OW 256
29782: PUSH
29783: LD_INT 1000
29785: LESS
29786: PUSH
29787: LD_INT 15
29789: PPUSH
29790: CALL_OW 256
29794: PUSH
29795: LD_INT 150
29797: LESS
29798: AND
29799: IFFALSE 29811
// SetLives ( RU1_el2 , 150 ) ;
29801: LD_INT 15
29803: PPUSH
29804: LD_INT 150
29806: PPUSH
29807: CALL_OW 234
// if IsOK ( RU1_el1 ) or IsOK ( RU1_el2 ) then
29811: LD_INT 14
29813: PPUSH
29814: CALL_OW 302
29818: PUSH
29819: LD_INT 15
29821: PPUSH
29822: CALL_OW 302
29826: OR
29827: IFFALSE 29830
// enable ;
29829: ENABLE
// end ;
29830: END
// every 0 0$5 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) <= 3 do var i ;
29831: LD_INT 14
29833: PPUSH
29834: LD_INT 22
29836: PUSH
29837: LD_EXP 2
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 50
29848: PUSH
29849: EMPTY
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PPUSH
29856: CALL_OW 70
29860: PUSH
29861: LD_INT 3
29863: LESSEQUAL
29864: IFFALSE 30015
29866: GO 29868
29868: DISABLE
29869: LD_INT 0
29871: PPUSH
// begin ArDontAttackPlayer ( false ) ;
29872: LD_INT 0
29874: PPUSH
29875: CALL 29365 0 1
// arabi_kirov_posily_posli ;
29879: CALL 30102 0 0
// DisableVideoExclamations ;
29883: CALL_OW 499
// music_nat = 0 ;
29887: LD_ADDR_OWVAR 71
29891: PUSH
29892: LD_INT 0
29894: ST_TO_ADDR
// chmo_6 ;
29895: CALL 16540 0 0
// InGameOff ;
29899: CALL_OW 9
// stav_omikron = 8 ;
29903: LD_ADDR_EXP 39
29907: PUSH
29908: LD_INT 8
29910: ST_TO_ADDR
// wait ( 3 3$00 ) ;
29911: LD_INT 6300
29913: PPUSH
29914: CALL_OW 67
// repeat wait ( 0 0$2 ) ;
29918: LD_INT 70
29920: PPUSH
29921: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
29925: LD_ADDR_VAR 0 1
29929: PUSH
29930: LD_INT 22
29932: PUSH
29933: LD_INT 2
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: PUSH
29945: FOR_IN
29946: IFFALSE 29996
// if not HasTask ( i ) then
29948: LD_VAR 0 1
29952: PPUSH
29953: CALL_OW 314
29957: NOT
29958: IFFALSE 29994
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
29960: LD_VAR 0 1
29964: PPUSH
29965: LD_INT 81
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 69
29979: PPUSH
29980: LD_VAR 0 1
29984: PPUSH
29985: CALL_OW 74
29989: PPUSH
29990: CALL_OW 115
29994: GO 29945
29996: POP
29997: POP
// until not FilterAllUnits ( [ f_enemy , 2 ] ) ;
29998: LD_INT 81
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PPUSH
30008: CALL_OW 69
30012: NOT
30013: IFFALSE 29918
// end ;
30015: PPOPN 1
30017: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) > 2 do var pom ;
30018: LD_INT 14
30020: PPUSH
30021: LD_INT 22
30023: PUSH
30024: LD_EXP 2
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: PPUSH
30036: CALL_OW 70
30040: PUSH
30041: LD_INT 2
30043: GREATER
30044: IFFALSE 30099
30046: GO 30048
30048: DISABLE
30049: LD_INT 0
30051: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) ;
30052: LD_ADDR_VAR 0 1
30056: PUSH
30057: LD_INT 14
30059: PPUSH
30060: LD_INT 22
30062: PUSH
30063: LD_EXP 2
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: EMPTY
30073: LIST
30074: PPUSH
30075: CALL_OW 70
30079: ST_TO_ADDR
// ComAttackUnit ( ARABI_doraz , pom [ 1 ] ) ;
30080: LD_EXP 65
30084: PPUSH
30085: LD_VAR 0 1
30089: PUSH
30090: LD_INT 1
30092: ARRAY
30093: PPUSH
30094: CALL_OW 115
// enable ;
30098: ENABLE
// end ;
30099: PPOPN 1
30101: END
// function arabi_kirov_posily_posli ; var i ; begin
30102: LD_INT 0
30104: PPUSH
30105: PPUSH
// for i in ARABI_KIROV_POSILY do
30106: LD_ADDR_VAR 0 2
30110: PUSH
30111: LD_EXP 66
30115: PUSH
30116: FOR_IN
30117: IFFALSE 30136
// PlaceUnitArea ( i , Arabi3 , false ) ;
30119: LD_VAR 0 2
30123: PPUSH
30124: LD_INT 33
30126: PPUSH
30127: LD_INT 0
30129: PPUSH
30130: CALL_OW 49
30134: GO 30116
30136: POP
30137: POP
// ComAgressiveMove ( ARABI_KIROV_POSILY , 142 , 84 ) ;
30138: LD_EXP 66
30142: PPUSH
30143: LD_INT 142
30145: PPUSH
30146: LD_INT 84
30148: PPUSH
30149: CALL_OW 114
// end ;
30153: LD_VAR 0 1
30157: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 4 do var i ;
30158: LD_INT 22
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: LD_INT 24
30173: PUSH
30174: LD_INT 1000
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PPUSH
30189: CALL_OW 69
30193: PUSH
30194: LD_INT 4
30196: GREATER
30197: IFFALSE 30281
30199: GO 30201
30201: DISABLE
30202: LD_INT 0
30204: PPUSH
// begin enable ;
30205: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
30206: LD_ADDR_VAR 0 1
30210: PUSH
30211: LD_INT 22
30213: PUSH
30214: LD_INT 2
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: LD_INT 24
30226: PUSH
30227: LD_INT 1000
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PPUSH
30242: CALL_OW 69
30246: PUSH
30247: FOR_IN
30248: IFFALSE 30279
// if GetLives ( i ) > 500 then
30250: LD_VAR 0 1
30254: PPUSH
30255: CALL_OW 256
30259: PUSH
30260: LD_INT 500
30262: GREATER
30263: IFFALSE 30277
// SetLives ( i , 1000 ) ;
30265: LD_VAR 0 1
30269: PPUSH
30270: LD_INT 1000
30272: PPUSH
30273: CALL_OW 234
30277: GO 30247
30279: POP
30280: POP
// end ;
30281: PPOPN 1
30283: END
