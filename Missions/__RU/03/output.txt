// var stReady , stRepair , stInCombat , stHelp , stNotReady , ImpatienceTreshold ; var vozKirov , vozKirovImpat , vozKirovState , vozKirovOut , vozHrace , mechKirov , mechKirovOut ; var targHrace , targAcquired ; every 0 0$1 marked 10 do var i ; var auta , autapom ; var poc ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// begin auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
   9: LD_ADDR_VAR 0 2
  13: PUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 21
  19: PUSH
  20: LD_INT 2
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: PUSH
  27: LD_INT 59
  29: PUSH
  30: EMPTY
  31: LIST
  32: PUSH
  33: EMPTY
  34: LIST
  35: LIST
  36: PPUSH
  37: CALL_OW 70
  41: ST_TO_ADDR
// for i in auta do
  42: LD_ADDR_VAR 0 1
  46: PUSH
  47: LD_VAR 0 2
  51: PUSH
  52: FOR_IN
  53: IFFALSE 132
// begin ComMoveToArea ( i , Zarea_utok ) ;
  55: LD_VAR 0 1
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: CALL_OW 113
// AddComAgressiveMove ( i , 28 , 15 ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: LD_INT 28
  74: PPUSH
  75: LD_INT 15
  77: PPUSH
  78: CALL_OW 174
// AddComAttackUnit ( i , Am_bu3 ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: LD_INT 19
  89: PPUSH
  90: CALL_OW 175
// AddComAgressiveMove ( i , 13 , 9 ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: LD_INT 13
 101: PPUSH
 102: LD_INT 9
 104: PPUSH
 105: CALL_OW 174
// RUSKE_POSILY_RIDICI_LIST = RUSKE_POSILY_RIDICI_LIST diff IsDrivenBy ( i ) ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_EXP 57
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 311
 128: DIFF
 129: ST_TO_ADDR
// end ;
 130: GO 52
 132: POP
 133: POP
// auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: PPUSH
 142: LD_INT 21
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 3
 154: PUSH
 155: LD_INT 59
 157: PUSH
 158: EMPTY
 159: LIST
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PPUSH
 166: CALL_OW 70
 170: ST_TO_ADDR
// poc = 1 ;
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 1
 178: ST_TO_ADDR
// for i in RUSKE_POSILY_RIDICI_LIST do
 179: LD_ADDR_VAR 0 1
 183: PUSH
 184: LD_EXP 57
 188: PUSH
 189: FOR_IN
 190: IFFALSE 244
// begin if auta + 0 >= poc then
 192: LD_VAR 0 2
 196: PUSH
 197: LD_INT 0
 199: PLUS
 200: PUSH
 201: LD_VAR 0 4
 205: GREATEREQUAL
 206: IFFALSE 228
// ComEnterUnit ( i , auta [ poc ] ) ;
 208: LD_VAR 0 1
 212: PPUSH
 213: LD_VAR 0 2
 217: PUSH
 218: LD_VAR 0 4
 222: ARRAY
 223: PPUSH
 224: CALL_OW 120
// poc = poc + 1 ;
 228: LD_ADDR_VAR 0 4
 232: PUSH
 233: LD_VAR 0 4
 237: PUSH
 238: LD_INT 1
 240: PLUS
 241: ST_TO_ADDR
// end ;
 242: GO 189
 244: POP
 245: POP
// if RUSKE_POSILY_RIDICI_LIST <> 0 then
 246: LD_EXP 57
 250: PUSH
 251: LD_INT 0
 253: NONEQUAL
 254: IFFALSE 257
// enable ;
 256: ENABLE
// end ;
 257: PPOPN 4
 259: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 260: LD_EXP 41
 264: PUSH
 265: LD_EXP 39
 269: PUSH
 270: LD_INT 7
 272: LESS
 273: AND
 274: IFFALSE 296
 276: GO 278
 278: DISABLE
// begin RepairVehicles ( 6 , Om_repair , 61 , 9 ) ;
 279: LD_INT 6
 281: PPUSH
 282: LD_INT 52
 284: PPUSH
 285: LD_INT 61
 287: PPUSH
 288: LD_INT 9
 290: PPUSH
 291: CALL 724 0 4
// enable ;
 295: ENABLE
// end ;
 296: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 297: LD_EXP 41
 301: PUSH
 302: LD_EXP 39
 306: PUSH
 307: LD_INT 7
 309: LESS
 310: AND
 311: IFFALSE 323
 313: GO 315
 315: DISABLE
// begin AttackVehicles ( 6 ) ;
 316: LD_INT 6
 318: PPUSH
 319: CALL 324 0 1
// end ;
 323: END
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= 0 then
 333: LD_INT 22
 335: PUSH
 336: LD_VAR 0 1
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 21
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 24
 357: PUSH
 358: LD_INT 1000
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: LD_INT 0
 377: GREATEREQUAL
 378: IFFALSE 719
// repeat wait ( 0 0$1 ) ;
 380: LD_INT 35
 382: PPUSH
 383: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_or , [ f_weapon , 42 ] , [ f_weapon , 43 ] , [ f_weapon , 44 ] ] ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 22
 394: PUSH
 395: LD_VAR 0 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 21
 406: PUSH
 407: LD_INT 2
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 24
 416: PUSH
 417: LD_INT 650
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 2
 426: PUSH
 427: LD_INT 34
 429: PUSH
 430: LD_INT 42
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: LD_INT 34
 439: PUSH
 440: LD_INT 43
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PUSH
 447: LD_INT 34
 449: PUSH
 450: LD_INT 44
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// for j in vehiclesOK do
 474: LD_ADDR_VAR 0 4
 478: PUSH
 479: LD_VAR 0 5
 483: PUSH
 484: FOR_IN
 485: IFFALSE 660
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , j ) ;
 487: LD_ADDR_VAR 0 6
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PPUSH
 510: LD_VAR 0 4
 514: PPUSH
 515: CALL_OW 74
 519: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
 520: LD_ADDR_VAR 0 7
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: LD_INT 59
 540: PUSH
 541: EMPTY
 542: LIST
 543: PUSH
 544: LD_INT 21
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 21
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PUSH
 574: EMPTY
 575: LIST
 576: PPUSH
 577: CALL_OW 69
 581: PPUSH
 582: LD_VAR 0 4
 586: PPUSH
 587: CALL_OW 74
 591: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
 592: LD_VAR 0 4
 596: PPUSH
 597: LD_VAR 0 6
 601: PPUSH
 602: CALL_OW 296
 606: PUSH
 607: LD_INT 8
 609: PLUS
 610: PUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_VAR 0 7
 620: PPUSH
 621: CALL_OW 296
 625: LESS
 626: IFFALSE 644
// ComAttackUnit ( j , target1 ) else
 628: LD_VAR 0 4
 632: PPUSH
 633: LD_VAR 0 6
 637: PPUSH
 638: CALL_OW 115
 642: GO 658
// ComAttackUnit ( j , target2 ) ;
 644: LD_VAR 0 4
 648: PPUSH
 649: LD_VAR 0 7
 653: PPUSH
 654: CALL_OW 115
// end ;
 658: GO 484
 660: POP
 661: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 or stav_omikron >= 7 ;
 662: LD_INT 22
 664: PUSH
 665: LD_VAR 0 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: LD_INT 1000
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: PUSH
 704: LD_INT 0
 706: EQUAL
 707: PUSH
 708: LD_EXP 39
 712: PUSH
 713: LD_INT 7
 715: GREATEREQUAL
 716: OR
 717: IFFALSE 380
// end ;
 719: LD_VAR 0 2
 723: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
 728: PPUSH
 729: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
 730: LD_ADDR_VAR 0 8
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_VAR 0 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 21
 749: PUSH
 750: LD_INT 2
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 24
 762: PUSH
 763: LD_INT 650
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: ST_TO_ADDR
// if damageVehicles > 0 then
 784: LD_VAR 0 8
 788: PUSH
 789: LD_INT 0
 791: GREATER
 792: IFFALSE 813
// ComMoveXY ( damageVehicles , repX , repY ) ;
 794: LD_VAR 0 8
 798: PPUSH
 799: LD_VAR 0 3
 803: PPUSH
 804: LD_VAR 0 4
 808: PPUSH
 809: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 813: LD_VAR 0 8
 817: PPUSH
 818: LD_INT 95
 820: PUSH
 821: LD_VAR 0 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 3
 832: PUSH
 833: LD_INT 58
 835: PUSH
 836: EMPTY
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 72
 851: PUSH
 852: LD_INT 0
 854: GREATER
 855: IFFALSE 922
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
 857: LD_ADDR_VAR 0 6
 861: PUSH
 862: LD_VAR 0 8
 866: PPUSH
 867: LD_INT 95
 869: PUSH
 870: LD_VAR 0 2
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: LD_INT 3
 881: PUSH
 882: LD_INT 58
 884: PUSH
 885: EMPTY
 886: LIST
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 72
 900: PUSH
 901: FOR_IN
 902: IFFALSE 920
// ComExitVehicle ( UnitsInside ( i ) ) ;
 904: LD_VAR 0 6
 908: PPUSH
 909: CALL_OW 313
 913: PPUSH
 914: CALL_OW 121
 918: GO 901
 920: POP
 921: POP
// end ;
 922: LD_VAR 0 5
 926: RET
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and GetSide ( human ) = 6 and IsOk ( vehicle ) then
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 255
 936: PUSH
 937: LD_INT 6
 939: EQUAL
 940: PUSH
 941: LD_VAR 0 2
 945: PPUSH
 946: CALL_OW 255
 950: PUSH
 951: LD_INT 6
 953: EQUAL
 954: AND
 955: PUSH
 956: LD_VAR 0 1
 960: PPUSH
 961: CALL_OW 302
 965: AND
 966: IFFALSE 1041
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
 968: LD_VAR 0 1
 972: PPUSH
 973: CALL_OW 264
 977: PUSH
 978: LD_INT 42
 980: EQUAL
 981: PUSH
 982: LD_VAR 0 1
 986: PPUSH
 987: CALL_OW 264
 991: PUSH
 992: LD_INT 43
 994: EQUAL
 995: OR
 996: PUSH
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 264
1006: PUSH
1007: LD_INT 44
1009: EQUAL
1010: OR
1011: IFFALSE 1041
// begin ComRepairVehicle ( human , vehicle ) ;
1013: LD_VAR 0 2
1017: PPUSH
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
1027: LD_VAR 0 2
1031: PPUSH
1032: LD_VAR 0 1
1036: PPUSH
1037: CALL_OW 180
// end ; end ;
1041: PPOPN 2
1043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do var i ;
1044: LD_INT 22
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 21
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: IFFALSE 1149
1074: GO 1076
1076: DISABLE
1077: LD_INT 0
1079: PPUSH
// begin enable ;
1080: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_INT 6
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 21
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PPUSH
1110: CALL_OW 69
1114: PUSH
1115: FOR_IN
1116: IFFALSE 1147
// if GetFuel ( i ) < 3 then
1118: LD_VAR 0 1
1122: PPUSH
1123: CALL_OW 261
1127: PUSH
1128: LD_INT 3
1130: LESS
1131: IFFALSE 1145
// SetFuel ( i , 3 ) ;
1133: LD_VAR 0 1
1137: PPUSH
1138: LD_INT 3
1140: PPUSH
1141: CALL_OW 240
1145: GO 1115
1147: POP
1148: POP
// end ; end_of_file
1149: PPOPN 1
1151: END
// export You , You2 , You3 , Amici , Arabi ; export KurinDialog ; export KurinAddTime ; starting begin RandomizeAll ;
1152: CALL_OW 11
// InitHc ;
1156: CALL_OW 19
// InitBc ;
1160: CALL_OW 21
// InitVc ;
1164: CALL_OW 20
// InitUc ;
1168: CALL_OW 18
// KurinDialog = 0 ;
1172: LD_ADDR_EXP 6
1176: PUSH
1177: LD_INT 0
1179: ST_TO_ADDR
// KurinAddTime = 0 ;
1180: LD_ADDR_EXP 7
1184: PUSH
1185: LD_INT 0
1187: ST_TO_ADDR
// set_difficulty ;
1188: CALL 4183 0 0
// load_postav ;
1192: CALL 2008 0 0
// load_promenne ;
1196: CALL 2160 0 0
// You = 3 ;
1200: LD_ADDR_EXP 1
1204: PUSH
1205: LD_INT 3
1207: ST_TO_ADDR
// You2 = 6 ;
1208: LD_ADDR_EXP 2
1212: PUSH
1213: LD_INT 6
1215: ST_TO_ADDR
// You3 = 5 ;
1216: LD_ADDR_EXP 3
1220: PUSH
1221: LD_INT 5
1223: ST_TO_ADDR
// Amici = 1 ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// Arabi = 2 ;
1232: LD_ADDR_EXP 5
1236: PUSH
1237: LD_INT 2
1239: ST_TO_ADDR
// placni_budovy_z_predesle_mise ;
1240: CALL 2562 0 0
// RevealFogArea ( You , CelaRU02 ) ;
1244: LD_EXP 1
1248: PPUSH
1249: LD_INT 36
1251: PPUSH
1252: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1256: LD_EXP 2
1260: PPUSH
1261: LD_INT 36
1263: PPUSH
1264: CALL_OW 332
// create_arabsky_utok ;
1268: CALL 18813 0 0
// create_americka_pomoc_hlidce ;
1272: CALL 16737 0 0
// create_americke_posily ;
1276: CALL 17606 0 0
// create_ruske_posily_na_omicron ;
1280: CALL 19962 0 0
// create_arabi_komanda ;
1284: CALL 20934 0 0
// create_ru_posily_ma_utek ;
1288: CALL 21780 0 0
// create_arabi_na_posily_kirovu ;
1292: CALL 22232 0 0
// create_cerpaci_ruske_auta ;
1296: CALL 22684 0 0
// create_am_jednotky ;
1300: CALL 20604 0 0
// set_skily_amikum ;
1304: CALL 17090 0 0
// uklid_rusu ;
1308: CALL 4951 0 0
// ChangeSideFog ( You , You ) ;
1312: LD_EXP 1
1316: PPUSH
1317: LD_EXP 1
1321: PPUSH
1322: CALL_OW 343
// ChangeSideFog ( You2 , You ) ;
1326: LD_EXP 2
1330: PPUSH
1331: LD_EXP 1
1335: PPUSH
1336: CALL_OW 343
// pojmenovani_zakladen ;
1340: CALL 4608 0 0
// InGameOn ;
1344: CALL_OW 8
// CenterOnXY ( 137 , 76 ) ;
1348: LD_INT 137
1350: PPUSH
1351: LD_INT 76
1353: PPUSH
1354: CALL_OW 84
// RevealFogArea ( You , CelaRU02 ) ;
1358: LD_EXP 1
1362: PPUSH
1363: LD_INT 36
1365: PPUSH
1366: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1370: LD_EXP 2
1374: PPUSH
1375: LD_INT 36
1377: PPUSH
1378: CALL_OW 332
// uvodni_pokec ;
1382: CALL 10059 0 0
// end ;
1386: END
// on UnitDestroyed ( un ) do begin if un = bur then
1387: LD_VAR 0 1
1391: PUSH
1392: LD_EXP 29
1396: EQUAL
1397: IFFALSE 1406
// YouLost ( Burlak ) ;
1399: LD_STRING Burlak
1401: PPUSH
1402: CALL_OW 104
// enable ;
1406: ENABLE
// end ;
1407: PPOPN 1
1409: END
// export function konec_mise_lhani ; begin
1410: LD_INT 0
1412: PPUSH
// hlaska_lhani ;
1413: CALL 15509 0 0
// YouLost ( Vehicles ) ;
1417: LD_STRING Vehicles
1419: PPUSH
1420: CALL_OW 104
// end ;
1424: LD_VAR 0 1
1428: RET
// export function konec_pred_omikronem ; begin
1429: LD_INT 0
1431: PPUSH
// YouLost ( Delay ) ;
1432: LD_STRING Delay
1434: PPUSH
1435: CALL_OW 104
// end ;
1439: LD_VAR 0 1
1443: RET
// export function konec_mise_utok ; begin
1444: LD_INT 0
1446: PPUSH
// YouLost ( SelfAttack ) ;
1447: LD_STRING SelfAttack
1449: PPUSH
1450: CALL_OW 104
// end ;
1454: LD_VAR 0 1
1458: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var mrtvi ; var all_people ; begin
1459: LD_INT 0
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
1465: PPUSH
1466: PPUSH
1467: PPUSH
1468: PPUSH
// DisableExclamations ;
1469: CALL_OW 474
// gained_medals := [ ] ;
1473: LD_ADDR_OWVAR 61
1477: PUSH
1478: EMPTY
1479: ST_TO_ADDR
// missing_medals := [ ] ;
1480: LD_ADDR_OWVAR 62
1484: PUSH
1485: EMPTY
1486: ST_TO_ADDR
// if Prezite_posily >= muze_projit_posil [ difficulty ] then
1487: LD_EXP 73
1491: PUSH
1492: LD_EXP 22
1496: PUSH
1497: LD_OWVAR 67
1501: ARRAY
1502: GREATEREQUAL
1503: IFFALSE 1518
// AddMedal ( PreventReinforcements , - 1 ) else
1505: LD_STRING PreventReinforcements
1507: PPUSH
1508: LD_INT 1
1510: NEG
1511: PPUSH
1512: CALL_OW 101
1516: GO 1528
// AddMedal ( PreventReinforcements , 1 ) ;
1518: LD_STRING PreventReinforcements
1520: PPUSH
1521: LD_INT 1
1523: PPUSH
1524: CALL_OW 101
// if scholtze_saved and IsOk ( schol ) and GetSide ( schol ) = 3 then
1528: LD_EXP 37
1532: PUSH
1533: LD_EXP 33
1537: PPUSH
1538: CALL_OW 302
1542: AND
1543: PUSH
1544: LD_EXP 33
1548: PPUSH
1549: CALL_OW 255
1553: PUSH
1554: LD_INT 3
1556: EQUAL
1557: AND
1558: IFFALSE 1572
// AddMedal ( Scholtze , 1 ) else
1560: LD_STRING Scholtze
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 101
1570: GO 1583
// AddMedal ( Scholtze , - 1 ) ;
1572: LD_STRING Scholtze
1574: PPUSH
1575: LD_INT 1
1577: NEG
1578: PPUSH
1579: CALL_OW 101
// case stav_aut_new of 1 :
1583: LD_EXP 46
1587: PUSH
1588: LD_INT 1
1590: DOUBLE
1591: EQUAL
1592: IFTRUE 1596
1594: GO 1609
1596: POP
// AddMedal ( Surplus , 1 ) ; 2 :
1597: LD_STRING Surplus
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: CALL_OW 101
1607: GO 1654
1609: LD_INT 2
1611: DOUBLE
1612: EQUAL
1613: IFTRUE 1617
1615: GO 1631
1617: POP
// AddMedal ( Surplus , - 1 ) ; 3 :
1618: LD_STRING Surplus
1620: PPUSH
1621: LD_INT 1
1623: NEG
1624: PPUSH
1625: CALL_OW 101
1629: GO 1654
1631: LD_INT 3
1633: DOUBLE
1634: EQUAL
1635: IFTRUE 1639
1637: GO 1653
1639: POP
// AddMedal ( Surplus , - 2 ) ; end ;
1640: LD_STRING Surplus
1642: PPUSH
1643: LD_INT 2
1645: NEG
1646: PPUSH
1647: CALL_OW 101
1651: GO 1654
1653: POP
// if not stav_aut_new then
1654: LD_EXP 46
1658: NOT
1659: IFFALSE 1672
// AddMedal ( Surplus , - 1 ) ;
1661: LD_STRING Surplus
1663: PPUSH
1664: LD_INT 1
1666: NEG
1667: PPUSH
1668: CALL_OW 101
// GiveMedals ( Main ) ;
1672: LD_STRING Main
1674: PPUSH
1675: CALL_OW 102
// all_people := FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1679: LD_ADDR_VAR 0 8
1683: PUSH
1684: LD_INT 22
1686: PUSH
1687: LD_EXP 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// RewardPeople ( all_people ) ;
1715: LD_VAR 0 8
1719: PPUSH
1720: CALL_OW 43
// if not ( bel in all_people ) then
1724: LD_EXP 32
1728: PUSH
1729: LD_VAR 0 8
1733: IN
1734: NOT
1735: IFFALSE 1746
// KillUnit ( bel ) ;
1737: LD_EXP 32
1741: PPUSH
1742: CALL_OW 66
// if not ( gny in all_people ) then
1746: LD_EXP 31
1750: PUSH
1751: LD_VAR 0 8
1755: IN
1756: NOT
1757: IFFALSE 1768
// KillUnit ( gny ) ;
1759: LD_EXP 31
1763: PPUSH
1764: CALL_OW 66
// if not ( kov in all_people ) then
1768: LD_EXP 30
1772: PUSH
1773: LD_VAR 0 8
1777: IN
1778: NOT
1779: IFFALSE 1790
// KillUnit ( kov ) ;
1781: LD_EXP 30
1785: PPUSH
1786: CALL_OW 66
// if not ( schol in all_people ) then
1790: LD_EXP 33
1794: PUSH
1795: LD_VAR 0 8
1799: IN
1800: NOT
1801: IFFALSE 1812
// KillUnit ( schol ) ;
1803: LD_EXP 33
1807: PPUSH
1808: CALL_OW 66
// SaveCharacters ( bur , Burlak ) ;
1812: LD_EXP 29
1816: PPUSH
1817: LD_STRING Burlak
1819: PPUSH
1820: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
1824: LD_EXP 32
1828: PPUSH
1829: LD_STRING Belkov
1831: PPUSH
1832: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
1836: LD_EXP 31
1840: PPUSH
1841: LD_STRING Gnyevko
1843: PPUSH
1844: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
1848: LD_EXP 30
1852: PPUSH
1853: LD_STRING Kovalyuk
1855: PPUSH
1856: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
1860: LD_EXP 33
1864: PPUSH
1865: LD_STRING Scholtze
1867: PPUSH
1868: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
1872: LD_EXP 28
1876: PPUSH
1877: LD_STRING Popov
1879: PPUSH
1880: CALL_OW 38
// pom := all_people diff [ bur , kur , bel , gny , kov , schol , schol2 , pop ] ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: LD_VAR 0 8
1893: PUSH
1894: LD_EXP 29
1898: PUSH
1899: LD_EXP 27
1903: PUSH
1904: LD_EXP 32
1908: PUSH
1909: LD_EXP 31
1913: PUSH
1914: LD_EXP 30
1918: PUSH
1919: LD_EXP 33
1923: PUSH
1924: LD_EXP 34
1928: PUSH
1929: LD_EXP 28
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: DIFF
1944: ST_TO_ADDR
// SaveCharacters ( pom , survivors1 ) ;
1945: LD_VAR 0 3
1949: PPUSH
1950: LD_STRING survivors1
1952: PPUSH
1953: CALL_OW 38
// SaveVariable ( BELKOV_SAVED , belkov_saved ) ;
1957: LD_EXP 24
1961: PPUSH
1962: LD_STRING belkov_saved
1964: PPUSH
1965: CALL_OW 39
// SaveVariable ( STAV_UTOKU , stav_utoku ) ;
1969: LD_EXP 25
1973: PPUSH
1974: LD_STRING stav_utoku
1976: PPUSH
1977: CALL_OW 39
// SaveVariable ( stav_aut , Surplus_vehicles ) ;
1981: LD_EXP 38
1985: PPUSH
1986: LD_STRING Surplus_vehicles
1988: PPUSH
1989: CALL_OW 39
// YouWin ;
1993: CALL_OW 103
// EnableExclamations ;
1997: CALL_OW 473
// exit ;
2001: GO 2003
// end ;
2003: LD_VAR 0 1
2007: RET
// function load_postav ; begin
2008: LD_INT 0
2010: PPUSH
// grishko = NewCharacter ( Grishko ) ;
2011: LD_ADDR_EXP 35
2015: PUSH
2016: LD_STRING Grishko
2018: PPUSH
2019: CALL_OW 25
2023: ST_TO_ADDR
// kur = nacti_osobu ( kurin ) ;
2024: LD_ADDR_EXP 27
2028: PUSH
2029: LD_STRING kurin
2031: PPUSH
2032: CALL 20890 0 1
2036: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
2037: LD_ADDR_EXP 32
2041: PUSH
2042: LD_STRING Belkov
2044: PPUSH
2045: CALL 20890 0 1
2049: ST_TO_ADDR
// kov = nacti_osobu ( Kovalyuk ) ;
2050: LD_ADDR_EXP 30
2054: PUSH
2055: LD_STRING Kovalyuk
2057: PPUSH
2058: CALL 20890 0 1
2062: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
2063: LD_ADDR_EXP 29
2067: PUSH
2068: LD_STRING Burlak
2070: PPUSH
2071: CALL 20890 0 1
2075: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
2076: LD_ADDR_EXP 31
2080: PUSH
2081: LD_STRING Gnyevko
2083: PPUSH
2084: CALL 20890 0 1
2088: ST_TO_ADDR
// pop = NewCharacter ( Popov ) ;
2089: LD_ADDR_EXP 28
2093: PUSH
2094: LD_STRING Popov
2096: PPUSH
2097: CALL_OW 25
2101: ST_TO_ADDR
// if CheckCharacterSet ( survivors1 ) then
2102: LD_STRING survivors1
2104: PPUSH
2105: CALL_OW 29
2109: IFFALSE 2124
// other_survivors_mise_2 = CreateCharacterSet ( survivors1 ) ;
2111: LD_ADDR_EXP 71
2115: PUSH
2116: LD_STRING survivors1
2118: PPUSH
2119: CALL_OW 31
2123: ST_TO_ADDR
// if CheckCharacterSet ( amici_bw ) then
2124: LD_STRING amici_bw
2126: PPUSH
2127: CALL_OW 29
2131: IFFALSE 2148
// amici_bw_2 = CreateCharacter ( amici_bw ) else
2133: LD_ADDR_EXP 10
2137: PUSH
2138: LD_STRING amici_bw
2140: PPUSH
2141: CALL_OW 34
2145: ST_TO_ADDR
2146: GO 2155
// amici_bw_2 = [ ] ;
2148: LD_ADDR_EXP 10
2152: PUSH
2153: EMPTY
2154: ST_TO_ADDR
// end ;
2155: LD_VAR 0 1
2159: RET
// function load_promenne ; var default_budovy ; begin
2160: LD_INT 0
2162: PPUSH
2163: PPUSH
// default_budovy = [ [ 0 , 2 , 66 , 97 , 0 ] , [ 2 , 1 , 61 , 83 , 2 ] , [ 6 , 1 , 73 , 90 , 4 ] ] ;
2164: LD_ADDR_VAR 0 2
2168: PUSH
2169: LD_INT 0
2171: PUSH
2172: LD_INT 2
2174: PUSH
2175: LD_INT 66
2177: PUSH
2178: LD_INT 97
2180: PUSH
2181: LD_INT 0
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 61
2199: PUSH
2200: LD_INT 83
2202: PUSH
2203: LD_INT 2
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 6
2215: PUSH
2216: LD_INT 1
2218: PUSH
2219: LD_INT 73
2221: PUSH
2222: LD_INT 90
2224: PUSH
2225: LD_INT 4
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: ST_TO_ADDR
// budovy_mise_2 = LoadVariable ( budovy , default_budovy ) ;
2240: LD_ADDR_EXP 8
2244: PUSH
2245: LD_STRING budovy
2247: PPUSH
2248: LD_VAR 0 2
2252: PPUSH
2253: CALL_OW 30
2257: ST_TO_ADDR
// breastworks_east = LoadVariable ( bw_east , 3 ) ;
2258: LD_ADDR_EXP 9
2262: PUSH
2263: LD_STRING bw_east
2265: PPUSH
2266: LD_INT 3
2268: PPUSH
2269: CALL_OW 30
2273: ST_TO_ADDR
// end ;
2274: LD_VAR 0 1
2278: RET
// export function create_scholtze ; var pom ; begin
2279: LD_INT 0
2281: PPUSH
2282: PPUSH
// pom = NewCharacter ( Scholtze ) ;
2283: LD_ADDR_VAR 0 2
2287: PUSH
2288: LD_STRING Scholtze
2290: PPUSH
2291: CALL_OW 25
2295: ST_TO_ADDR
// SetSide ( pom , You2 ) ;
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_EXP 2
2305: PPUSH
2306: CALL_OW 235
// SetClass ( pom , class_scientistic ) ;
2310: LD_VAR 0 2
2314: PPUSH
2315: LD_INT 4
2317: PPUSH
2318: CALL_OW 336
// PlaceUnitXYR ( pom , 49 , 5 , 8 , true ) ;
2322: LD_VAR 0 2
2326: PPUSH
2327: LD_INT 49
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: LD_INT 8
2335: PPUSH
2336: LD_INT 1
2338: PPUSH
2339: CALL_OW 50
// result = pom ;
2343: LD_ADDR_VAR 0 1
2347: PUSH
2348: LD_VAR 0 2
2352: ST_TO_ADDR
// end ;
2353: LD_VAR 0 1
2357: RET
// on Command ( com ) do var i , j , temp ;
2358: LD_INT 0
2360: PPUSH
2361: PPUSH
2362: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 3
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 21
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PPUSH
2392: CALL_OW 69
2396: PUSH
2397: FOR_IN
2398: IFFALSE 2545
// if GetTaskList ( i ) > 0 then
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL_OW 437
2409: PUSH
2410: LD_INT 0
2412: GREATER
2413: IFFALSE 2543
// for j = 1 to GetTaskList ( i ) do
2415: LD_ADDR_VAR 0 3
2419: PUSH
2420: DOUBLE
2421: LD_INT 1
2423: DEC
2424: ST_TO_ADDR
2425: LD_VAR 0 2
2429: PPUSH
2430: CALL_OW 437
2434: PUSH
2435: FOR_TO
2436: IFFALSE 2541
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
2438: LD_ADDR_VAR 0 4
2442: PUSH
2443: LD_VAR 0 2
2447: PPUSH
2448: CALL_OW 437
2452: PUSH
2453: LD_VAR 0 3
2457: ARRAY
2458: PUSH
2459: LD_INT 4
2461: ARRAY
2462: ST_TO_ADDR
// if temp = RU1_dep or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
2463: LD_VAR 0 4
2467: PUSH
2468: LD_INT 1
2470: EQUAL
2471: PUSH
2472: LD_VAR 0 4
2476: PPUSH
2477: CALL_OW 255
2481: PUSH
2482: LD_INT 6
2484: EQUAL
2485: PUSH
2486: LD_VAR 0 2
2490: PPUSH
2491: CALL_OW 437
2495: PUSH
2496: LD_VAR 0 3
2500: ARRAY
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: PUSH
2506: LD_STRING e
2508: EQUAL
2509: AND
2510: PUSH
2511: LD_VAR 0 4
2515: PPUSH
2516: CALL_OW 247
2520: PUSH
2521: LD_INT 2
2523: EQUAL
2524: AND
2525: OR
2526: IFFALSE 2539
// SetTaskList ( i , [ ] ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: EMPTY
2534: PPUSH
2535: CALL_OW 446
// end ;
2539: GO 2435
2541: POP
2542: POP
2543: GO 2397
2545: POP
2546: POP
// end ; end_of_file
2547: PPOPN 4
2549: END
// var konzervy_delay ; export budovy_mise_2 ; export breastworks_east ; export amici_bw_2 ; every 0 0$0.1 do
2550: GO 2552
2552: DISABLE
// begin konzervy_delay = 0 ;
2553: LD_ADDR_LOC 16
2557: PUSH
2558: LD_INT 0
2560: ST_TO_ADDR
// end ;
2561: END
// export function placni_budovy_z_predesle_mise ; var pom , i ; var ab ; var bw_e ; var vojaci ; var pocet ; begin
2562: LD_INT 0
2564: PPUSH
2565: PPUSH
2566: PPUSH
2567: PPUSH
2568: PPUSH
2569: PPUSH
2570: PPUSH
// uc_side = You ;
2571: LD_ADDR_OWVAR 20
2575: PUSH
2576: LD_EXP 1
2580: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_INT 9
2588: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2589: LD_ADDR_OWVAR 45
2593: PUSH
2594: LD_INT 9
2596: ST_TO_ADDR
// for i in budovy_mise_2 do
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: LD_EXP 8
2606: PUSH
2607: FOR_IN
2608: IFFALSE 2756
// begin uc_nation = i [ 6 ] ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_VAR 0 3
2619: PUSH
2620: LD_INT 6
2622: ARRAY
2623: ST_TO_ADDR
// bc_type = i [ 1 ] ;
2624: LD_ADDR_OWVAR 42
2628: PUSH
2629: LD_VAR 0 3
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: ST_TO_ADDR
// bc_level = i [ 2 ] ;
2638: LD_ADDR_OWVAR 43
2642: PUSH
2643: LD_VAR 0 3
2647: PUSH
2648: LD_INT 2
2650: ARRAY
2651: ST_TO_ADDR
// pom = CreateAndPlaceBuildingXYD ( i [ 3 ] + 30 , i [ 4 ] - 20 , i [ 5 ] ) ;
2652: LD_ADDR_VAR 0 2
2656: PUSH
2657: LD_VAR 0 3
2661: PUSH
2662: LD_INT 3
2664: ARRAY
2665: PUSH
2666: LD_INT 30
2668: PLUS
2669: PPUSH
2670: LD_VAR 0 3
2674: PUSH
2675: LD_INT 4
2677: ARRAY
2678: PUSH
2679: LD_INT 20
2681: MINUS
2682: PPUSH
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 5
2690: ARRAY
2691: PPUSH
2692: CALL_OW 47
2696: ST_TO_ADDR
// if bc_type in [ b_depot , b_warehouse ] then
2697: LD_OWVAR 42
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 1
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: IN
2712: IFFALSE 2754
// begin SetResourceType ( GetBase ( pom ) , mat_cans , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: CALL_OW 274
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: LD_INT 100
2729: PPUSH
2730: CALL_OW 277
// SetResourceType ( GetBase ( pom ) , mat_oil , 25 ) ;
2734: LD_VAR 0 2
2738: PPUSH
2739: CALL_OW 274
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 25
2749: PPUSH
2750: CALL_OW 277
// end ; end ;
2754: GO 2607
2756: POP
2757: POP
// bw_e = breastworks_east ;
2758: LD_ADDR_VAR 0 5
2762: PUSH
2763: LD_EXP 9
2767: ST_TO_ADDR
// uc_side = Amici ;
2768: LD_ADDR_OWVAR 20
2772: PUSH
2773: LD_EXP 4
2777: ST_TO_ADDR
// uc_nation = nation_american ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 1
2785: ST_TO_ADDR
// bc_type = b_breastwork ;
2786: LD_ADDR_OWVAR 42
2790: PUSH
2791: LD_INT 31
2793: ST_TO_ADDR
// bc_level = level_bw_e [ difficulty ] ;
2794: LD_ADDR_OWVAR 43
2798: PUSH
2799: LD_EXP 11
2803: PUSH
2804: LD_OWVAR 67
2808: ARRAY
2809: ST_TO_ADDR
// if bw_e > 1 then
2810: LD_VAR 0 5
2814: PUSH
2815: LD_INT 1
2817: GREATER
2818: IFFALSE 2833
// CreateAndPlaceBuildingXYD ( 123 , 42 , 1 ) ;
2820: LD_INT 123
2822: PPUSH
2823: LD_INT 42
2825: PPUSH
2826: LD_INT 1
2828: PPUSH
2829: CALL_OW 47
// if bw_e = 1 or bw_e = 3 then
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 1
2840: EQUAL
2841: PUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: EQUAL
2850: OR
2851: IFFALSE 2866
// CreateAndPlaceBuildingXYD ( 120 , 36 , 1 ) ;
2853: LD_INT 120
2855: PPUSH
2856: LD_INT 36
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 47
// vojaci = amici_bw_2 ;
2866: LD_ADDR_VAR 0 6
2870: PUSH
2871: LD_EXP 10
2875: ST_TO_ADDR
// if bw_e > 0 then
2876: LD_VAR 0 5
2880: PUSH
2881: LD_INT 0
2883: GREATER
2884: IFFALSE 3133
// begin if bw_e = 1 or bw_e = 2 then
2886: LD_VAR 0 5
2890: PUSH
2891: LD_INT 1
2893: EQUAL
2894: PUSH
2895: LD_VAR 0 5
2899: PUSH
2900: LD_INT 2
2902: EQUAL
2903: OR
2904: IFFALSE 2916
// pocet = 1 else
2906: LD_ADDR_VAR 0 7
2910: PUSH
2911: LD_INT 1
2913: ST_TO_ADDR
2914: GO 2924
// pocet = 2 ;
2916: LD_ADDR_VAR 0 7
2920: PUSH
2921: LD_INT 2
2923: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2924: LD_ADDR_VAR 0 6
2928: PUSH
2929: LD_VAR 0 6
2933: PUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: LD_INT 2
2942: PPUSH
2943: LD_STRING 
2945: PPUSH
2946: CALL 16690 0 4
2950: ADD
2951: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2952: LD_ADDR_VAR 0 6
2956: PUSH
2957: LD_VAR 0 6
2961: PUSH
2962: LD_INT 1
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: LD_INT 2
2970: PPUSH
2971: LD_STRING 
2973: PPUSH
2974: CALL 16690 0 4
2978: ADD
2979: ST_TO_ADDR
// pom = FilterUnitsinArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
2980: LD_ADDR_VAR 0 2
2984: PUSH
2985: LD_INT 22
2987: PPUSH
2988: LD_INT 22
2990: PUSH
2991: LD_EXP 4
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 30
3002: PUSH
3003: LD_INT 31
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 70
3018: ST_TO_ADDR
// if pocet >= 1 then
3019: LD_VAR 0 7
3023: PUSH
3024: LD_INT 1
3026: GREATEREQUAL
3027: IFFALSE 3076
// begin PlaceUnitXYR ( vojaci [ 1 ] , 129 , 39 , 5 , false ) ;
3029: LD_VAR 0 6
3033: PUSH
3034: LD_INT 1
3036: ARRAY
3037: PPUSH
3038: LD_INT 129
3040: PPUSH
3041: LD_INT 39
3043: PPUSH
3044: LD_INT 5
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 50
// ComEnterUnit ( vojaci [ 1 ] , pom [ 1 ] ) ;
3054: LD_VAR 0 6
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_VAR 0 2
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: CALL_OW 120
// end ; if pocet = 2 then
3076: LD_VAR 0 7
3080: PUSH
3081: LD_INT 2
3083: EQUAL
3084: IFFALSE 3133
// begin PlaceUnitXYR ( vojaci [ 2 ] , 129 , 39 , 5 , false ) ;
3086: LD_VAR 0 6
3090: PUSH
3091: LD_INT 2
3093: ARRAY
3094: PPUSH
3095: LD_INT 129
3097: PPUSH
3098: LD_INT 39
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_INT 0
3106: PPUSH
3107: CALL_OW 50
// ComEnterUnit ( vojaci [ 2 ] , pom [ 2 ] ) ;
3111: LD_VAR 0 6
3115: PUSH
3116: LD_INT 2
3118: ARRAY
3119: PPUSH
3120: LD_VAR 0 2
3124: PUSH
3125: LD_INT 2
3127: ARRAY
3128: PPUSH
3129: CALL_OW 120
// end ; end ; end ;
3133: LD_VAR 0 1
3137: RET
// export function vyber_characteru ; var pom ; var units_na_vyber ; var i ; var pocet ; var vyber ; var osurviv ; begin
3138: LD_INT 0
3140: PPUSH
3141: PPUSH
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// uc_side = You ;
3147: LD_ADDR_OWVAR 20
3151: PUSH
3152: LD_EXP 1
3156: ST_TO_ADDR
// uc_nation = nation_russian ;
3157: LD_ADDR_OWVAR 21
3161: PUSH
3162: LD_INT 3
3164: ST_TO_ADDR
// pocet = 3 ;
3165: LD_ADDR_VAR 0 5
3169: PUSH
3170: LD_INT 3
3172: ST_TO_ADDR
// units_na_vyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
3173: LD_ADDR_VAR 0 3
3177: PUSH
3178: LD_INT -4
3180: PUSH
3181: LD_INT -1
3183: PUSH
3184: LD_INT -6
3186: PUSH
3187: LD_EXP 29
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_change_class ] ;
3198: LD_ADDR_VAR 0 3
3202: PUSH
3203: LD_VAR 0 3
3207: PUSH
3208: LD_INT -5
3210: PUSH
3211: EMPTY
3212: LIST
3213: ADD
3214: ST_TO_ADDR
// if IsOK ( gny ) then
3215: LD_EXP 31
3219: PPUSH
3220: CALL_OW 302
3224: IFFALSE 3258
// begin SetSide ( gny , You ) ;
3226: LD_EXP 31
3230: PPUSH
3231: LD_EXP 1
3235: PPUSH
3236: CALL_OW 235
// units_na_vyber = units_na_vyber ^ gny end else
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_VAR 0 3
3249: PUSH
3250: LD_EXP 31
3254: ADD
3255: ST_TO_ADDR
3256: GO 3272
// pocet = pocet + 1 ;
3258: LD_ADDR_VAR 0 5
3262: PUSH
3263: LD_VAR 0 5
3267: PUSH
3268: LD_INT 1
3270: PLUS
3271: ST_TO_ADDR
// if IsOK ( kov ) then
3272: LD_EXP 30
3276: PPUSH
3277: CALL_OW 302
3281: IFFALSE 3315
// begin SetSide ( kov , You ) ;
3283: LD_EXP 30
3287: PPUSH
3288: LD_EXP 1
3292: PPUSH
3293: CALL_OW 235
// units_na_vyber = units_na_vyber ^ kov end else
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: LD_VAR 0 3
3306: PUSH
3307: LD_EXP 30
3311: ADD
3312: ST_TO_ADDR
3313: GO 3329
// pocet = pocet + 1 ;
3315: LD_ADDR_VAR 0 5
3319: PUSH
3320: LD_VAR 0 5
3324: PUSH
3325: LD_INT 1
3327: PLUS
3328: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
3329: LD_ADDR_VAR 0 3
3333: PUSH
3334: LD_VAR 0 3
3338: PUSH
3339: LD_INT -2
3341: PUSH
3342: LD_INT -3
3344: PUSH
3345: LD_INT -5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: ADD
3353: ST_TO_ADDR
// if IsOK ( bel ) then
3354: LD_EXP 32
3358: PPUSH
3359: CALL_OW 302
3363: IFFALSE 3395
// begin SetSide ( bel , You ) ;
3365: LD_EXP 32
3369: PPUSH
3370: LD_EXP 1
3374: PPUSH
3375: CALL_OW 235
// units_na_vyber = units_na_vyber ^ bel ;
3379: LD_ADDR_VAR 0 3
3383: PUSH
3384: LD_VAR 0 3
3388: PUSH
3389: LD_EXP 32
3393: ADD
3394: ST_TO_ADDR
// end ; osurviv = other_survivors_mise_2 ;
3395: LD_ADDR_VAR 0 7
3399: PUSH
3400: LD_EXP 71
3404: ST_TO_ADDR
// for i in osurviv do
3405: LD_ADDR_VAR 0 4
3409: PUSH
3410: LD_VAR 0 7
3414: PUSH
3415: FOR_IN
3416: IFFALSE 3434
// SetSide ( i , You ) ;
3418: LD_VAR 0 4
3422: PPUSH
3423: LD_EXP 1
3427: PPUSH
3428: CALL_OW 235
3432: GO 3415
3434: POP
3435: POP
// units_na_vyber = units_na_vyber ^ osurviv ;
3436: LD_ADDR_VAR 0 3
3440: PUSH
3441: LD_VAR 0 3
3445: PUSH
3446: LD_VAR 0 7
3450: ADD
3451: ST_TO_ADDR
// uc_side = You ;
3452: LD_ADDR_OWVAR 20
3456: PUSH
3457: LD_EXP 1
3461: ST_TO_ADDR
// uc_nation = nation_russian ;
3462: LD_ADDR_OWVAR 21
3466: PUSH
3467: LD_INT 3
3469: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_soldier , 2 ,  ) ;
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: LD_VAR 0 3
3479: PUSH
3480: CALL 16655 0 0
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: LD_STRING 
3493: PPUSH
3494: CALL 16690 0 4
3498: ADD
3499: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( sex_female , class_soldier , 3 ,  ) ;
3500: LD_ADDR_VAR 0 3
3504: PUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 2
3512: PPUSH
3513: LD_INT 1
3515: PPUSH
3516: LD_INT 3
3518: PPUSH
3519: LD_STRING 
3521: PPUSH
3522: CALL 16690 0 4
3526: ADD
3527: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: CALL 16655 0 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_INT 2
3548: PPUSH
3549: LD_STRING 
3551: PPUSH
3552: CALL 16690 0 4
3556: ADD
3557: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3558: LD_ADDR_VAR 0 3
3562: PUSH
3563: LD_VAR 0 3
3567: PUSH
3568: CALL 16655 0 0
3572: PPUSH
3573: LD_INT 4
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: LD_STRING 
3581: PPUSH
3582: CALL 16690 0 4
3586: ADD
3587: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: CALL 16655 0 0
3602: PPUSH
3603: LD_INT 3
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: LD_STRING 
3611: PPUSH
3612: CALL 16690 0 4
3616: ADD
3617: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PUSH
3628: CALL 16655 0 0
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: LD_INT 2
3638: PPUSH
3639: LD_STRING 
3641: PPUSH
3642: CALL 16690 0 4
3646: ADD
3647: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 3
3657: PUSH
3658: CALL 16655 0 0
3662: PPUSH
3663: LD_INT 4
3665: PPUSH
3666: LD_INT 2
3668: PPUSH
3669: LD_STRING 
3671: PPUSH
3672: CALL 16690 0 4
3676: ADD
3677: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: LD_VAR 0 3
3687: PUSH
3688: CALL 16655 0 0
3692: PPUSH
3693: LD_INT 3
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_STRING 
3701: PPUSH
3702: CALL 16690 0 4
3706: ADD
3707: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet , pocet , units_na_vyber , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
3708: LD_ADDR_VAR 0 2
3712: PUSH
3713: LD_STRING Vyber si peopliky
3715: PPUSH
3716: LD_VAR 0 5
3720: PPUSH
3721: LD_VAR 0 5
3725: PPUSH
3726: LD_VAR 0 3
3730: PPUSH
3731: LD_INT 2
3733: PUSH
3734: LD_INT 1
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_INT 4
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 0
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PUSH
3764: LD_INT 0
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PPUSH
3777: CALL_OW 42
3781: ST_TO_ADDR
// vyber = [ bur ] ;
3782: LD_ADDR_VAR 0 6
3786: PUSH
3787: LD_EXP 29
3791: PUSH
3792: EMPTY
3793: LIST
3794: ST_TO_ADDR
// if IsOK ( gny ) then
3795: LD_EXP 31
3799: PPUSH
3800: CALL_OW 302
3804: IFFALSE 3822
// vyber = vyber ^ gny ;
3806: LD_ADDR_VAR 0 6
3810: PUSH
3811: LD_VAR 0 6
3815: PUSH
3816: LD_EXP 31
3820: ADD
3821: ST_TO_ADDR
// if IsOK ( kov ) then
3822: LD_EXP 30
3826: PPUSH
3827: CALL_OW 302
3831: IFFALSE 3849
// vyber = vyber ^ kov ;
3833: LD_ADDR_VAR 0 6
3837: PUSH
3838: LD_VAR 0 6
3842: PUSH
3843: LD_EXP 30
3847: ADD
3848: ST_TO_ADDR
// vyber = vyber ^ pom ;
3849: LD_ADDR_VAR 0 6
3853: PUSH
3854: LD_VAR 0 6
3858: PUSH
3859: LD_VAR 0 2
3863: ADD
3864: ST_TO_ADDR
// manage_zbytek ( osurviv diff vyber ) ;
3865: LD_VAR 0 7
3869: PUSH
3870: LD_VAR 0 6
3874: DIFF
3875: PPUSH
3876: CALL 4110 0 1
// result := vyber ;
3880: LD_ADDR_VAR 0 1
3884: PUSH
3885: LD_VAR 0 6
3889: ST_TO_ADDR
// end ;
3890: LD_VAR 0 1
3894: RET
// export function placni_unity ( unity ) ; var i ; begin
3895: LD_INT 0
3897: PPUSH
3898: PPUSH
// for i in unity do
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: LD_VAR 0 1
3908: PUSH
3909: FOR_IN
3910: IFFALSE 3949
// begin SetSide ( i , You ) ;
3912: LD_VAR 0 3
3916: PPUSH
3917: LD_EXP 1
3921: PPUSH
3922: CALL_OW 235
// PlaceUnitXYR ( i , 99 , 73 , 5 , false ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_INT 99
3933: PPUSH
3934: LD_INT 73
3936: PPUSH
3937: LD_INT 5
3939: PPUSH
3940: LD_INT 0
3942: PPUSH
3943: CALL_OW 50
// end ;
3947: GO 3909
3949: POP
3950: POP
// wait ( 0 0$0.5 ) ;
3951: LD_INT 18
3953: PPUSH
3954: CALL_OW 67
// SaveForQuickRestart ;
3958: CALL_OW 22
// end ;
3962: LD_VAR 0 2
3966: RET
// every 0 0$10 trigger stav_omikron < 3 do
3967: LD_EXP 39
3971: PUSH
3972: LD_INT 3
3974: LESS
3975: IFFALSE 4044
3977: GO 3979
3979: DISABLE
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
3980: LD_INT 50
3982: PPUSH
3983: LD_INT 4200
3985: PPUSH
3986: CALL_OW 12
3990: PPUSH
3991: CALL_OW 67
// wait ( konzervy_delay * 0 0$5 ) ;
3995: LD_LOC 16
3999: PUSH
4000: LD_INT 175
4002: MUL
4003: PPUSH
4004: CALL_OW 67
// konzervy_delay = konzervy_delay + 1 ;
4008: LD_ADDR_LOC 16
4012: PUSH
4013: LD_LOC 16
4017: PUSH
4018: LD_INT 1
4020: PLUS
4021: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4022: LD_INT 3
4024: PPUSH
4025: LD_INT 5
4027: PPUSH
4028: CALL_OW 12
4032: PPUSH
4033: LD_INT 7
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: CALL_OW 55
// enable ;
4043: ENABLE
// end ;
4044: END
// every 0 0$30 do
4045: GO 4047
4047: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4048: LD_INT 3
4050: PPUSH
4051: LD_INT 5
4053: PPUSH
4054: CALL_OW 12
4058: PPUSH
4059: LD_INT 7
4061: PPUSH
4062: LD_INT 1
4064: PPUSH
4065: CALL_OW 55
// end ;
4069: END
// every 1 1$20 do
4070: GO 4072
4072: DISABLE
// begin wait ( Rand ( 1 , 0 0$40 ) ) ;
4073: LD_INT 1
4075: PPUSH
4076: LD_INT 1400
4078: PPUSH
4079: CALL_OW 12
4083: PPUSH
4084: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 4 ) , konzervy_all , true ) ;
4088: LD_INT 1
4090: PPUSH
4091: LD_INT 4
4093: PPUSH
4094: CALL_OW 12
4098: PPUSH
4099: LD_INT 25
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 55
// end ;
4109: END
// function manage_zbytek ( lidi ) ; var i ; begin
4110: LD_INT 0
4112: PPUSH
4113: PPUSH
// for i in lidi do
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: LD_VAR 0 1
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4164
// begin SetSide ( i , You2 ) ;
4127: LD_VAR 0 3
4131: PPUSH
4132: LD_EXP 2
4136: PPUSH
4137: CALL_OW 235
// PlaceUnitXYR ( i , 144 , 79 , 3 , false ) ;
4141: LD_VAR 0 3
4145: PPUSH
4146: LD_INT 144
4148: PPUSH
4149: LD_INT 79
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: CALL_OW 50
// end ;
4162: GO 4124
4164: POP
4165: POP
// ComEnterUnit ( lidi , RU1_dep ) ;
4166: LD_VAR 0 1
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: CALL_OW 120
// end ; end_of_file
4178: LD_VAR 0 2
4182: RET
// export level_bw_e ; export schol_find_amikama ; export levely_amici ; export posily1 ; export posily11 ; export posily2 ; export posily3 ; export posily4 ; export utok_na_omikron ; export levely_ruske_posily ; export levely_am_budov ; export muze_projit_posil ; export muze_prezit_posil ; export BELKOV_SAVED ; export STAV_UTOKU ; export function set_difficulty ; begin
4183: LD_INT 0
4185: PPUSH
// BELKOV_SAVED = LoadVariable ( belkov_saved , 0 ) ;
4186: LD_ADDR_EXP 24
4190: PUSH
4191: LD_STRING belkov_saved
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL_OW 30
4201: ST_TO_ADDR
// STAV_UTOKU = LoadVariable ( utok_stav , 3 ) ;
4202: LD_ADDR_EXP 25
4206: PUSH
4207: LD_STRING utok_stav
4209: PPUSH
4210: LD_INT 3
4212: PPUSH
4213: CALL_OW 30
4217: ST_TO_ADDR
// level_bw_e = [ 2 , 3 , 4 ] ;
4218: LD_ADDR_EXP 11
4222: PUSH
4223: LD_INT 2
4225: PUSH
4226: LD_INT 3
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: ST_TO_ADDR
// schol_find_amikama = [ 11 11$0 , 9 9$0 , 7 7$0 ] ;
4237: LD_ADDR_EXP 12
4241: PUSH
4242: LD_INT 23100
4244: PUSH
4245: LD_INT 18900
4247: PUSH
4248: LD_INT 14700
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: LIST
4255: ST_TO_ADDR
// levely_amici = [ 2 , 3 , 4 ] ;
4256: LD_ADDR_EXP 13
4260: PUSH
4261: LD_INT 2
4263: PUSH
4264: LD_INT 3
4266: PUSH
4267: LD_INT 4
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: ST_TO_ADDR
// posily1 = [ 13 13$00 , 11 11$00 , 10 10$00 ] ;
4275: LD_ADDR_EXP 14
4279: PUSH
4280: LD_INT 27300
4282: PUSH
4283: LD_INT 23100
4285: PUSH
4286: LD_INT 21000
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: ST_TO_ADDR
// posily11 = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
4294: LD_ADDR_EXP 15
4298: PUSH
4299: LD_INT 10500
4301: PUSH
4302: LD_INT 8400
4304: PUSH
4305: LD_INT 6300
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: ST_TO_ADDR
// posily2 = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
4313: LD_ADDR_EXP 16
4317: PUSH
4318: LD_INT 21000
4320: PUSH
4321: LD_INT 16800
4323: PUSH
4324: LD_INT 10500
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: LIST
4331: ST_TO_ADDR
// posily3 = [ 11 11$0 , 8 8$30 , 5 5$0 ] ;
4332: LD_ADDR_EXP 17
4336: PUSH
4337: LD_INT 23100
4339: PUSH
4340: LD_INT 17850
4342: PUSH
4343: LD_INT 10500
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: ST_TO_ADDR
// posily4 = [ 8 8$0 , 7 7$0 , 5 5$0 ] ;
4351: LD_ADDR_EXP 18
4355: PUSH
4356: LD_INT 16800
4358: PUSH
4359: LD_INT 14700
4361: PUSH
4362: LD_INT 10500
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: ST_TO_ADDR
// utok_na_omikron = [ 55 55$0 , 45 45$0 , 35 35$0 ] [ difficulty ] ;
4370: LD_ADDR_EXP 19
4374: PUSH
4375: LD_INT 115500
4377: PUSH
4378: LD_INT 94500
4380: PUSH
4381: LD_INT 73500
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: PUSH
4389: LD_OWVAR 67
4393: ARRAY
4394: ST_TO_ADDR
// levely_ruske_posily = [ 4 , 3 , 2 ] ;
4395: LD_ADDR_EXP 20
4399: PUSH
4400: LD_INT 4
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 2
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: ST_TO_ADDR
// levely_am_budov = [ 0 , 1 , 2 ] ;
4414: LD_ADDR_EXP 21
4418: PUSH
4419: LD_INT 0
4421: PUSH
4422: LD_INT 1
4424: PUSH
4425: LD_INT 2
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// muze_projit_posil = [ 8 , 8 , 6 ] ;
4433: LD_ADDR_EXP 22
4437: PUSH
4438: LD_INT 8
4440: PUSH
4441: LD_INT 8
4443: PUSH
4444: LD_INT 6
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: ST_TO_ADDR
// muze_prezit_posil = [ 2 , 5 , 100 ] ;
4452: LD_ADDR_EXP 23
4456: PUSH
4457: LD_INT 2
4459: PUSH
4460: LD_INT 5
4462: PUSH
4463: LD_INT 100
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
4471: LD_ADDR_EXP 26
4475: PUSH
4476: LD_INT 0
4478: PUSH
4479: LD_STRING :
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: ST_TO_ADDR
// end ;
4490: LD_VAR 0 1
4494: RET
// export cas ; every 0 0$10 do var pom ;
4495: GO 4497
4497: DISABLE
4498: LD_INT 0
4500: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
4501: LD_EXP 26
4505: PUSH
4506: LD_INT 3
4508: ARRAY
4509: PUSH
4510: LD_INT 10
4512: PLUS
4513: PUSH
4514: LD_INT 60
4516: EQUAL
4517: IFFALSE 4553
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
4519: LD_ADDR_EXP 26
4523: PUSH
4524: LD_EXP 26
4528: PUSH
4529: LD_INT 1
4531: ARRAY
4532: PUSH
4533: LD_INT 1
4535: PLUS
4536: PUSH
4537: LD_EXP 26
4541: PUSH
4542: LD_INT 2
4544: ARRAY
4545: ADD
4546: PUSH
4547: LD_INT 0
4549: ADD
4550: ST_TO_ADDR
4551: GO 4591
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
4553: LD_ADDR_EXP 26
4557: PUSH
4558: LD_EXP 26
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PUSH
4567: LD_EXP 26
4571: PUSH
4572: LD_INT 2
4574: ARRAY
4575: ADD
4576: PUSH
4577: LD_EXP 26
4581: PUSH
4582: LD_INT 3
4584: ARRAY
4585: PUSH
4586: LD_INT 10
4588: PLUS
4589: ADD
4590: ST_TO_ADDR
// debug_strings = [ cas ] ;
4591: LD_ADDR_OWVAR 48
4595: PUSH
4596: LD_EXP 26
4600: PUSH
4601: EMPTY
4602: LIST
4603: ST_TO_ADDR
// enable ;
4604: ENABLE
// end ;
4605: PPOPN 1
4607: END
// export function pojmenovani_zakladen ; var pom ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
// SetBName ( RU1_dep , kirov ) ;
4612: LD_INT 1
4614: PPUSH
4615: LD_STRING kirov
4617: PPUSH
4618: CALL_OW 500
// pom = FilterUnitsInArea ( Ru2_base , [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
4622: LD_ADDR_VAR 0 2
4626: PUSH
4627: LD_INT 2
4629: PPUSH
4630: LD_INT 22
4632: PUSH
4633: LD_EXP 1
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 30
4644: PUSH
4645: LD_INT 0
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 70
4660: ST_TO_ADDR
// if pom > 0 then
4661: LD_VAR 0 2
4665: PUSH
4666: LD_INT 0
4668: GREATER
4669: IFFALSE 4687
// SetBName ( pom [ 1 ] , beria ) ;
4671: LD_VAR 0 2
4675: PUSH
4676: LD_INT 1
4678: ARRAY
4679: PPUSH
4680: LD_STRING beria
4682: PPUSH
4683: CALL_OW 500
// SetBName ( Am_dep , omikron ) ;
4687: LD_INT 12
4689: PPUSH
4690: LD_STRING omikron
4692: PPUSH
4693: CALL_OW 500
// end ;
4697: LD_VAR 0 1
4701: RET
// export function pojmenovani_kaganoviche ( base ) ; begin
4702: LD_INT 0
4704: PPUSH
// SetBName ( base , kagan ) ;
4705: LD_VAR 0 1
4709: PPUSH
4710: LD_STRING kagan
4712: PPUSH
4713: CALL_OW 500
// end ; end_of_file
4717: LD_VAR 0 2
4721: RET
// export kur ; export pop ; export bur ; export kov ; export gny ; export bel ; export schol ; export schol2 ; export grishko ; export Rusi_enter ; export scholtze_saved ; export stav_aut ; export stav_omikron ; export RU_videl_oil ; var counter_zapnut ; export setkani_om ; var R_comp ; export Rusi_utekli ; export Rusi_save ; var dialog_probehnul ; var qrefuel_over ; export kecy_scholtze_nalezen ; export konec_counteru ; export stav_aut_new ; export postavenych_aut ; var TTime ; export special_time ; every 0 0$0.1 do var i ;
4722: GO 4724
4724: DISABLE
4725: LD_INT 0
4727: PPUSH
// begin schol = 0 ;
4728: LD_ADDR_EXP 33
4732: PUSH
4733: LD_INT 0
4735: ST_TO_ADDR
// scholtze_saved = false ;
4736: LD_ADDR_EXP 37
4740: PUSH
4741: LD_INT 0
4743: ST_TO_ADDR
// stav_omikron = 0 ;
4744: LD_ADDR_EXP 39
4748: PUSH
4749: LD_INT 0
4751: ST_TO_ADDR
// stav_aut = 0 ;
4752: LD_ADDR_EXP 38
4756: PUSH
4757: LD_INT 0
4759: ST_TO_ADDR
// RU_videl_oil = false ;
4760: LD_ADDR_EXP 40
4764: PUSH
4765: LD_INT 0
4767: ST_TO_ADDR
// counter_zapnut = false ;
4768: LD_ADDR_LOC 17
4772: PUSH
4773: LD_INT 0
4775: ST_TO_ADDR
// setkani_om = false ;
4776: LD_ADDR_EXP 41
4780: PUSH
4781: LD_INT 0
4783: ST_TO_ADDR
// R_comp = [ ] ;
4784: LD_ADDR_LOC 18
4788: PUSH
4789: EMPTY
4790: ST_TO_ADDR
// Rusi_utekli = [ ] ;
4791: LD_ADDR_EXP 42
4795: PUSH
4796: EMPTY
4797: ST_TO_ADDR
// Rusi_save = [ ] ;
4798: LD_ADDR_EXP 43
4802: PUSH
4803: EMPTY
4804: ST_TO_ADDR
// dialog_probehnul = false ;
4805: LD_ADDR_LOC 19
4809: PUSH
4810: LD_INT 0
4812: ST_TO_ADDR
// qrefuel_over = false ;
4813: LD_ADDR_LOC 20
4817: PUSH
4818: LD_INT 0
4820: ST_TO_ADDR
// kecy_scholtze_nalezen = false ;
4821: LD_ADDR_EXP 44
4825: PUSH
4826: LD_INT 0
4828: ST_TO_ADDR
// postavenych_aut = 0 ;
4829: LD_ADDR_EXP 47
4833: PUSH
4834: LD_INT 0
4836: ST_TO_ADDR
// TTime = 0 ;
4837: LD_ADDR_LOC 21
4841: PUSH
4842: LD_INT 0
4844: ST_TO_ADDR
// konec_counteru = false ;
4845: LD_ADDR_EXP 45
4849: PUSH
4850: LD_INT 0
4852: ST_TO_ADDR
// stav_aut_new = 0 ;
4853: LD_ADDR_EXP 46
4857: PUSH
4858: LD_INT 0
4860: ST_TO_ADDR
// special_time = false ;
4861: LD_ADDR_EXP 48
4865: PUSH
4866: LD_INT 0
4868: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 6 , 7 , 8 , 9 , 10 , 51 , 52 , 53 , 200 , 201 , 202 , 203 ] do
4869: LD_ADDR_VAR 0 1
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: LD_INT 2
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: LD_INT 6
4885: PUSH
4886: LD_INT 7
4888: PUSH
4889: LD_INT 8
4891: PUSH
4892: LD_INT 9
4894: PUSH
4895: LD_INT 10
4897: PUSH
4898: LD_INT 51
4900: PUSH
4901: LD_INT 52
4903: PUSH
4904: LD_INT 53
4906: PUSH
4907: LD_INT 200
4909: PUSH
4910: LD_INT 201
4912: PUSH
4913: LD_INT 202
4915: PUSH
4916: LD_INT 203
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: PUSH
4936: FOR_IN
4937: IFFALSE 4946
// disable ( i ) ;
4939: LD_VAR 0 1
4943: DISABLE_MARKED
4944: GO 4936
4946: POP
4947: POP
// end ;
4948: PPOPN 1
4950: END
// export function uklid_rusu ; begin
4951: LD_INT 0
4953: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
4954: LD_INT 42
4956: PPUSH
4957: LD_INT 3
4959: PPUSH
4960: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
4964: LD_INT 43
4966: PPUSH
4967: LD_INT 4
4969: PPUSH
4970: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab2 ) ;
4974: LD_INT 44
4976: PPUSH
4977: LD_INT 16
4979: PPUSH
4980: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab2 ) ;
4984: LD_INT 45
4986: PPUSH
4987: LD_INT 16
4989: PPUSH
4990: CALL_OW 120
// ComEnterUnit ( RU1_sci3 , RU1_lab2 ) ;
4994: LD_INT 46
4996: PPUSH
4997: LD_INT 16
4999: PPUSH
5000: CALL_OW 120
// ComEnterUnit ( RU1_sci4 , RU1_lab1 ) ;
5004: LD_INT 47
5006: PPUSH
5007: LD_INT 6
5009: PPUSH
5010: CALL_OW 120
// ComEnterUnit ( RU1_sci5 , RU1_lab1 ) ;
5014: LD_INT 48
5016: PPUSH
5017: LD_INT 6
5019: PPUSH
5020: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_fac ) ;
5024: LD_INT 49
5026: PPUSH
5027: LD_INT 5
5029: PPUSH
5030: CALL_OW 120
// ComEnterUnit ( RU1_me2 , RU1_fac ) ;
5034: LD_INT 50
5036: PPUSH
5037: LD_INT 5
5039: PPUSH
5040: CALL_OW 120
// ComEnterUnit ( RU1_me3 , RU1_fac ) ;
5044: LD_INT 51
5046: PPUSH
5047: LD_INT 5
5049: PPUSH
5050: CALL_OW 120
// ComEnterUnit ( pop , RU1_bar1 ) ;
5054: LD_EXP 28
5058: PPUSH
5059: LD_INT 2
5061: PPUSH
5062: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar1 ) ;
5066: LD_INT 52
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar1 ) ;
5076: LD_INT 53
5078: PPUSH
5079: LD_INT 2
5081: PPUSH
5082: CALL_OW 120
// ComEnterUnit ( RU1_sol3 , RU1_bar2 ) ;
5086: LD_INT 56
5088: PPUSH
5089: LD_INT 17
5091: PPUSH
5092: CALL_OW 120
// ComEnterUnit ( RU1_sol4 , RU1_bar2 ) ;
5096: LD_INT 54
5098: PPUSH
5099: LD_INT 17
5101: PPUSH
5102: CALL_OW 120
// ComEnterUnit ( RU1_sol5 , RU1_bar2 ) ;
5106: LD_INT 55
5108: PPUSH
5109: LD_INT 17
5111: PPUSH
5112: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
5116: LD_INT 57
5118: PPUSH
5119: LD_INT 1
5121: PPUSH
5122: CALL_OW 120
// end ;
5126: LD_VAR 0 1
5130: RET
// every 5 5$30 do var pom ;
5131: GO 5133
5133: DISABLE
5134: LD_INT 0
5136: PPUSH
// begin schol2 = create_scholtze ;
5137: LD_ADDR_EXP 34
5141: PUSH
5142: CALL 2279 0 0
5146: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5147: LD_INT 70
5149: PPUSH
5150: CALL_OW 67
// CenterNowOnUnits ( schol2 ) ;
5154: LD_EXP 34
5158: PPUSH
5159: CALL_OW 87
// dialog_scholtze_enter ;
5163: CALL 11493 0 0
// ComMoveToArea ( schol2 , scholze_flee ) ;
5167: LD_EXP 34
5171: PPUSH
5172: LD_INT 45
5174: PPUSH
5175: CALL_OW 113
// AddComHold ( schol2 ) ;
5179: LD_EXP 34
5183: PPUSH
5184: CALL_OW 200
// wait ( 0 0$5 ) ;
5188: LD_INT 175
5190: PPUSH
5191: CALL_OW 67
// amici_hlidka ;
5195: CALL 23682 0 0
// enable ( 1 ) ;
5199: LD_INT 1
5201: ENABLE_MARKED
// end ;
5202: PPOPN 1
5204: END
// every 0 0$1 trigger FilterUnitsInArea ( Schol_les , [ [ f_side , You ] ] ) > 0 marked 1 do
5205: LD_INT 26
5207: PPUSH
5208: LD_INT 22
5210: PUSH
5211: LD_EXP 1
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: EMPTY
5221: LIST
5222: PPUSH
5223: CALL_OW 70
5227: PUSH
5228: LD_INT 0
5230: GREATER
5231: IFFALSE 5305
5233: GO 5235
5235: DISABLE
// begin kecy_scholtze_nalezen = true ;
5236: LD_ADDR_EXP 44
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// dialog_scholtze_nalezen ;
5244: CALL 11565 0 0
// SetSide ( schol2 , You ) ;
5248: LD_EXP 34
5252: PPUSH
5253: LD_EXP 1
5257: PPUSH
5258: CALL_OW 235
// schol = schol2 ;
5262: LD_ADDR_EXP 33
5266: PUSH
5267: LD_EXP 34
5271: ST_TO_ADDR
// ChangeMissionObjectives ( MScholtzeOut ) ;
5272: LD_STRING MScholtzeOut
5274: PPUSH
5275: CALL_OW 337
// wait ( 1 1$0 ) ;
5279: LD_INT 2100
5281: PPUSH
5282: CALL_OW 67
// if IsLive ( schol ) then
5286: LD_EXP 33
5290: PPUSH
5291: CALL_OW 300
5295: IFFALSE 5305
// scholtze_saved = true ;
5297: LD_ADDR_EXP 37
5301: PUSH
5302: LD_INT 1
5304: ST_TO_ADDR
// end ;
5305: END
// every 1 1$0 do
5306: GO 5308
5308: DISABLE
// begin if GetResourceType ( GetBase ( RU1_dep ) , mat_oil ) < 50 then
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 274
5316: PPUSH
5317: LD_INT 2
5319: PPUSH
5320: CALL_OW 275
5324: PUSH
5325: LD_INT 50
5327: LESS
5328: IFFALSE 5348
// AddResourceType ( GetBase ( RU1_dep ) , mat_oil , 100 ) ;
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 274
5337: PPUSH
5338: LD_INT 2
5340: PPUSH
5341: LD_INT 100
5343: PPUSH
5344: CALL_OW 276
// enable ;
5348: ENABLE
// end ;
5349: END
// every 1 1$7 do
5350: GO 5352
5352: DISABLE
// begin if Researched ( You2 , tech_Weap1 ) then
5353: LD_EXP 2
5357: PPUSH
5358: LD_INT 51
5360: PPUSH
5361: CALL_OW 325
5365: IFFALSE 5392
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5367: LD_INT 51
5369: PPUSH
5370: LD_EXP 2
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5382: LD_INT 6
5384: PPUSH
5385: LD_INT 51
5387: PPUSH
5388: CALL_OW 124
// end ; enable ;
5392: ENABLE
// end ;
5393: END
// every 0 0$19 do
5394: GO 5396
5396: DISABLE
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5397: LD_INT 51
5399: PPUSH
5400: LD_EXP 2
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5412: LD_INT 6
5414: PPUSH
5415: LD_INT 51
5417: PPUSH
5418: CALL_OW 124
// end ;
5422: END
// every 0 0$5 trigger stav_omikron = 2 do
5423: LD_EXP 39
5427: PUSH
5428: LD_INT 2
5430: EQUAL
5431: IFFALSE 5474
5433: GO 5435
5435: DISABLE
// begin TTime = 7 7$0 ;
5436: LD_ADDR_LOC 21
5440: PUSH
5441: LD_INT 14700
5443: ST_TO_ADDR
// enable ( 53 ) ;
5444: LD_INT 53
5446: ENABLE_MARKED
// wait ( 7 7$0 ) ;
5447: LD_INT 14700
5449: PPUSH
5450: CALL_OW 67
// special_time = true ;
5454: LD_ADDR_EXP 48
5458: PUSH
5459: LD_INT 1
5461: ST_TO_ADDR
// hlaska_omicron ;
5462: CALL 13162 0 0
// stav_omikron = 3 ;
5466: LD_ADDR_EXP 39
5470: PUSH
5471: LD_INT 3
5473: ST_TO_ADDR
// end ;
5474: END
// export function popov_ven ; var i ; begin
5475: LD_INT 0
5477: PPUSH
5478: PPUSH
// for i = 1 to 8 do
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: DOUBLE
5485: LD_INT 1
5487: DEC
5488: ST_TO_ADDR
5489: LD_INT 8
5491: PUSH
5492: FOR_TO
5493: IFFALSE 5511
// DoNotAttack ( i , pop ) ;
5495: LD_VAR 0 2
5499: PPUSH
5500: LD_EXP 28
5504: PPUSH
5505: CALL_OW 471
5509: GO 5492
5511: POP
5512: POP
// while IsInUnit ( pop ) > 0 do
5513: LD_EXP 28
5517: PPUSH
5518: CALL_OW 310
5522: PUSH
5523: LD_INT 0
5525: GREATER
5526: IFFALSE 5593
// begin case GetType ( IsInUnit ( pop ) ) of unit_building :
5528: LD_EXP 28
5532: PPUSH
5533: CALL_OW 310
5537: PPUSH
5538: CALL_OW 247
5542: PUSH
5543: LD_INT 3
5545: DOUBLE
5546: EQUAL
5547: IFTRUE 5551
5549: GO 5563
5551: POP
// ComExitBuilding ( pop ) ; unit_vehicle :
5552: LD_EXP 28
5556: PPUSH
5557: CALL_OW 122
5561: GO 5584
5563: LD_INT 2
5565: DOUBLE
5566: EQUAL
5567: IFTRUE 5571
5569: GO 5583
5571: POP
// ComExitVehicle ( pop ) ; end ;
5572: LD_EXP 28
5576: PPUSH
5577: CALL_OW 121
5581: GO 5584
5583: POP
// wait ( 0 0$0.5 ) ;
5584: LD_INT 18
5586: PPUSH
5587: CALL_OW 67
// end ;
5591: GO 5513
// AddComMoveToArea ( pop , bst_2 ) ;
5593: LD_EXP 28
5597: PPUSH
5598: LD_INT 41
5600: PPUSH
5601: CALL_OW 173
// AddComMoveToArea ( pop , bst_3 ) ;
5605: LD_EXP 28
5609: PPUSH
5610: LD_INT 42
5612: PPUSH
5613: CALL_OW 173
// AddComHold ( pop ) ;
5617: LD_EXP 28
5621: PPUSH
5622: CALL_OW 200
// end ;
5626: LD_VAR 0 1
5630: RET
// every 0 0$5 trigger IsInArea ( pop , Exit_area ) do
5631: LD_EXP 28
5635: PPUSH
5636: LD_INT 16
5638: PPUSH
5639: CALL_OW 308
5643: IFFALSE 5657
5645: GO 5647
5647: DISABLE
// begin RemoveUnit ( pop ) ;
5648: LD_EXP 28
5652: PPUSH
5653: CALL_OW 64
// end ;
5657: END
// export function prebarveni_druhe_baze ; var pom , i ; begin
5658: LD_INT 0
5660: PPUSH
5661: PPUSH
5662: PPUSH
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You3 ] , [ f_type , unit_building ] ] ) ;
5663: LD_ADDR_VAR 0 2
5667: PUSH
5668: LD_INT 2
5670: PPUSH
5671: LD_INT 22
5673: PUSH
5674: LD_EXP 3
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 21
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 70
5701: ST_TO_ADDR
// for i in pom do
5702: LD_ADDR_VAR 0 3
5706: PUSH
5707: LD_VAR 0 2
5711: PUSH
5712: FOR_IN
5713: IFFALSE 5731
// SetSide ( i , You ) ;
5715: LD_VAR 0 3
5719: PPUSH
5720: LD_EXP 1
5724: PPUSH
5725: CALL_OW 235
5729: GO 5712
5731: POP
5732: POP
// end ;
5733: LD_VAR 0 1
5737: RET
// export function pomoc_pro_omikroni_utok ; var i ; begin
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
// for i in RUSKE_POSILY_NA_OMICRON_LIST do
5742: LD_ADDR_VAR 0 2
5746: PUSH
5747: LD_EXP 56
5751: PUSH
5752: FOR_IN
5753: IFFALSE 5772
// PlaceUnitArea ( i , Enterposil , false ) ;
5755: LD_VAR 0 2
5759: PPUSH
5760: LD_INT 49
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
5770: GO 5752
5772: POP
5773: POP
// ComMoveToArea ( RUSKE_POSILY_NA_OMICRON_LIST , bst_4 ) ;
5774: LD_EXP 56
5778: PPUSH
5779: LD_INT 43
5781: PPUSH
5782: CALL_OW 113
// for i in RUSKE_POSILY_RIDICI_LIST do
5786: LD_ADDR_VAR 0 2
5790: PUSH
5791: LD_EXP 57
5795: PUSH
5796: FOR_IN
5797: IFFALSE 5816
// PlaceUnitArea ( i , Arabi1 , false ) ;
5799: LD_VAR 0 2
5803: PPUSH
5804: LD_INT 12
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: CALL_OW 49
5814: GO 5796
5816: POP
5817: POP
// ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , bst_1 ) ;
5818: LD_EXP 57
5822: PPUSH
5823: LD_INT 40
5825: PPUSH
5826: CALL_OW 113
// AddComEnterUnit ( RUSKE_POSILY_RIDICI_LIST , RU1_fac ) ;
5830: LD_EXP 57
5834: PPUSH
5835: LD_INT 5
5837: PPUSH
5838: CALL_OW 180
// end ;
5842: LD_VAR 0 1
5846: RET
// every 0 0$1 trigger stav_omikron = 3 and not special_time do
5847: LD_EXP 39
5851: PUSH
5852: LD_INT 3
5854: EQUAL
5855: PUSH
5856: LD_EXP 48
5860: NOT
5861: AND
5862: IFFALSE 5896
5864: GO 5866
5866: DISABLE
// begin disable ( 53 ) ;
5867: LD_INT 53
5869: DISABLE_MARKED
// TTime = 3 3$0 ;
5870: LD_ADDR_LOC 21
5874: PUSH
5875: LD_INT 6300
5877: ST_TO_ADDR
// enable ( 51 ) ;
5878: LD_INT 51
5880: ENABLE_MARKED
// counter_zapnut = true ;
5881: LD_ADDR_LOC 17
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// posli_ruske_posily ;
5889: CALL 6396 0 0
// enable ( 3 ) ;
5893: LD_INT 3
5895: ENABLE_MARKED
// end ;
5896: END
// every 0 0$1 trigger stav_omikron = 3 and special_time do
5897: LD_EXP 39
5901: PUSH
5902: LD_INT 3
5904: EQUAL
5905: PUSH
5906: LD_EXP 48
5910: AND
5911: IFFALSE 5945
5913: GO 5915
5915: DISABLE
// begin disable ( 53 ) ;
5916: LD_INT 53
5918: DISABLE_MARKED
// TTime = 2 2$0 ;
5919: LD_ADDR_LOC 21
5923: PUSH
5924: LD_INT 4200
5926: ST_TO_ADDR
// enable ( 51 ) ;
5927: LD_INT 51
5929: ENABLE_MARKED
// counter_zapnut = true ;
5930: LD_ADDR_LOC 17
5934: PUSH
5935: LD_INT 1
5937: ST_TO_ADDR
// posli_ruske_posily ;
5938: CALL 6396 0 0
// enable ( 3 ) ;
5942: LD_INT 3
5944: ENABLE_MARKED
// end ;
5945: END
// every 0 0$3 trigger stav_omikron = 3 do var i , pom , pom1 , pom2 , rpom ; var rusi_enter_new ; var poc ;
5946: LD_EXP 39
5950: PUSH
5951: LD_INT 3
5953: EQUAL
5954: IFFALSE 6148
5956: GO 5958
5958: DISABLE
5959: LD_INT 0
5961: PPUSH
5962: PPUSH
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
5967: PPUSH
// begin if FilterUnitsInArea ( Om_zone , [ [ f_side , You ] ] ) then
5968: LD_INT 8
5970: PPUSH
5971: LD_INT 22
5973: PUSH
5974: LD_EXP 1
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: EMPTY
5984: LIST
5985: PPUSH
5986: CALL_OW 70
5990: IFFALSE 6147
// begin rpom = FilterUnitsExceptArea ( Om_pom1 , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
5992: LD_ADDR_VAR 0 5
5996: PUSH
5997: LD_INT 23
5999: PPUSH
6000: LD_INT 22
6002: PUSH
6003: LD_EXP 1
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PUSH
6012: LD_INT 21
6014: PUSH
6015: LD_INT 1
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PPUSH
6026: CALL_OW 71
6030: ST_TO_ADDR
// if rpom = 0 then
6031: LD_VAR 0 5
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6144
// begin disable ( 51 ) ;
6041: LD_INT 51
6043: DISABLE_MARKED
// disable ( 52 ) ;
6044: LD_INT 52
6046: DISABLE_MARKED
// konec_counteru = true ;
6047: LD_ADDR_EXP 45
6051: PUSH
6052: LD_INT 1
6054: ST_TO_ADDR
// poc = 0 ;
6055: LD_ADDR_VAR 0 7
6059: PUSH
6060: LD_INT 0
6062: ST_TO_ADDR
// while FilterUnitsInArea ( Om_zone , [ [ f_side , You2 ] ] ) = 0 and poc < 60 do
6063: LD_INT 8
6065: PPUSH
6066: LD_INT 22
6068: PUSH
6069: LD_EXP 2
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: EMPTY
6079: LIST
6080: PPUSH
6081: CALL_OW 70
6085: PUSH
6086: LD_INT 0
6088: EQUAL
6089: PUSH
6090: LD_VAR 0 7
6094: PUSH
6095: LD_INT 60
6097: LESS
6098: AND
6099: IFFALSE 6124
// begin wait ( 0 0$1 ) ;
6101: LD_INT 35
6103: PPUSH
6104: CALL_OW 67
// poc = poc + 1 ;
6108: LD_ADDR_VAR 0 7
6112: PUSH
6113: LD_VAR 0 7
6117: PUSH
6118: LD_INT 1
6120: PLUS
6121: ST_TO_ADDR
// end ;
6122: GO 6063
// stav_omikron = 4 ;
6124: LD_ADDR_EXP 39
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// dialog_pred_omicronem ;
6132: CALL 13245 0 0
// enable ( 9 ) ;
6136: LD_INT 9
6138: ENABLE_MARKED
// disable ( 3 ) ;
6139: LD_INT 3
6141: DISABLE_MARKED
// end else
6142: GO 6145
// enable ;
6144: ENABLE
// end else
6145: GO 6148
// enable ;
6147: ENABLE
// end ;
6148: PPOPN 7
6150: END
// export function CheckVehicles ; var pom , pom1 , pom2 ; begin
6151: LD_INT 0
6153: PPUSH
6154: PPUSH
6155: PPUSH
6156: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6157: LD_ADDR_VAR 0 2
6161: PUSH
6162: LD_INT 22
6164: PUSH
6165: LD_EXP 1
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 2
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 69
6192: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
6193: LD_ADDR_VAR 0 3
6197: PUSH
6198: LD_INT 22
6200: PUSH
6201: LD_EXP 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 51
6222: PUSH
6223: EMPTY
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 69
6235: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Ru2_base , [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
6236: LD_ADDR_VAR 0 4
6240: PUSH
6241: LD_INT 2
6243: PPUSH
6244: LD_INT 22
6246: PUSH
6247: LD_EXP 2
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 2
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// pom = pom + pom2 ;
6275: LD_ADDR_VAR 0 2
6279: PUSH
6280: LD_VAR 0 2
6284: PUSH
6285: LD_VAR 0 4
6289: PLUS
6290: ST_TO_ADDR
// if pom < pom1 then
6291: LD_VAR 0 2
6295: PUSH
6296: LD_VAR 0 3
6300: LESS
6301: IFFALSE 6311
// stav_aut_new = 3 ;
6303: LD_ADDR_EXP 46
6307: PUSH
6308: LD_INT 3
6310: ST_TO_ADDR
// if pom = pom1 then
6311: LD_VAR 0 2
6315: PUSH
6316: LD_VAR 0 3
6320: EQUAL
6321: IFFALSE 6331
// stav_aut_new = 2 ;
6323: LD_ADDR_EXP 46
6327: PUSH
6328: LD_INT 2
6330: ST_TO_ADDR
// if pom > pom1 and KurinAddTime = 0 then
6331: LD_VAR 0 2
6335: PUSH
6336: LD_VAR 0 3
6340: GREATER
6341: PUSH
6342: LD_EXP 7
6346: PUSH
6347: LD_INT 0
6349: EQUAL
6350: AND
6351: IFFALSE 6361
// stav_aut_new = 1 ;
6353: LD_ADDR_EXP 46
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// if pom >= pom1 and KurinAddTime = 1 then
6361: LD_VAR 0 2
6365: PUSH
6366: LD_VAR 0 3
6370: GREATEREQUAL
6371: PUSH
6372: LD_EXP 7
6376: PUSH
6377: LD_INT 1
6379: EQUAL
6380: AND
6381: IFFALSE 6391
// stav_aut_new = 2 ;
6383: LD_ADDR_EXP 46
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// end ;
6391: LD_VAR 0 1
6395: RET
// function posli_ruske_posily ; begin
6396: LD_INT 0
6398: PPUSH
// McMove ( 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , [ [ 109 , 54 ] , [ 102 , 38 ] , [ 90 , 22 ] , [ 54 , 10 ] ] , [ mc_move_dontcapture ] ) ;
6399: LD_INT 1
6401: PPUSH
6402: LD_INT 22
6404: PUSH
6405: LD_INT 6
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 21
6414: PUSH
6415: LD_INT 2
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PPUSH
6426: CALL_OW 69
6430: PPUSH
6431: LD_INT 109
6433: PUSH
6434: LD_INT 54
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 102
6443: PUSH
6444: LD_INT 38
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 90
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 54
6463: PUSH
6464: LD_INT 10
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: PPUSH
6477: LD_INT 5
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 398
// end ;
6487: LD_VAR 0 1
6491: RET
// every 0 0$7 marked 2 do var i , k , pom ;
6492: GO 6494
6494: DISABLE
6495: LD_INT 0
6497: PPUSH
6498: PPUSH
6499: PPUSH
// begin ComExitBuilding ( RUSKE_POSILY_RIDICI_LIST ) ;
6500: LD_EXP 57
6504: PPUSH
6505: CALL_OW 122
// while FilterUnitsInArea ( RU2_base , [ [ f_side , You2 ] ] ) < RUSKE_POSILY_RIDICI_LIST do
6509: LD_INT 2
6511: PPUSH
6512: LD_INT 22
6514: PUSH
6515: LD_EXP 2
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: PPUSH
6527: CALL_OW 70
6531: PUSH
6532: LD_EXP 57
6536: LESS
6537: IFFALSE 6560
// begin ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , drivers_enter ) ;
6539: LD_EXP 57
6543: PPUSH
6544: LD_INT 47
6546: PPUSH
6547: CALL_OW 113
// wait ( 0 0$1 ) ;
6551: LD_INT 35
6553: PPUSH
6554: CALL_OW 67
// end ;
6558: GO 6509
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_not , [ f_occupied ] ] ] ) ;
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: LD_INT 2
6567: PPUSH
6568: LD_INT 22
6570: PUSH
6571: LD_EXP 1
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 21
6582: PUSH
6583: LD_INT 2
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: LD_INT 59
6595: PUSH
6596: EMPTY
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 70
6612: ST_TO_ADDR
// if not pom then
6613: LD_VAR 0 3
6617: NOT
6618: IFFALSE 6624
// konec_mise_lhani ;
6620: CALL 1410 0 0
// if pom < RUSKE_POSILY_RIDICI_LIST then
6624: LD_VAR 0 3
6628: PUSH
6629: LD_EXP 57
6633: LESS
6634: IFFALSE 6648
// k := pom else
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_VAR 0 3
6645: ST_TO_ADDR
6646: GO 6658
// k := RUSKE_POSILY_RIDICI_LIST ;
6648: LD_ADDR_VAR 0 2
6652: PUSH
6653: LD_EXP 57
6657: ST_TO_ADDR
// for i = 1 to k do
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: DOUBLE
6664: LD_INT 1
6666: DEC
6667: ST_TO_ADDR
6668: LD_VAR 0 2
6672: PUSH
6673: FOR_TO
6674: IFFALSE 6725
// begin ComEnterUnit ( RUSKE_POSILY_RIDICI_LIST [ i ] , pom [ i ] ) ;
6676: LD_EXP 57
6680: PUSH
6681: LD_VAR 0 1
6685: ARRAY
6686: PPUSH
6687: LD_VAR 0 3
6691: PUSH
6692: LD_VAR 0 1
6696: ARRAY
6697: PPUSH
6698: CALL_OW 120
// AddComMoveXY ( RUSKE_POSILY_RIDICI_LIST [ i ] , 60 , 13 ) ;
6702: LD_EXP 57
6706: PUSH
6707: LD_VAR 0 1
6711: ARRAY
6712: PPUSH
6713: LD_INT 60
6715: PPUSH
6716: LD_INT 13
6718: PPUSH
6719: CALL_OW 171
// end ;
6723: GO 6673
6725: POP
6726: POP
// end ;
6727: PPOPN 3
6729: END
// every 0 0$1 marked 3 do
6730: GO 6732
6732: DISABLE
// begin if special_time then
6733: LD_EXP 48
6737: IFFALSE 6748
// wait ( 2 2$0 ) else
6739: LD_INT 4200
6741: PPUSH
6742: CALL_OW 67
6746: GO 6755
// wait ( 3 3$0 ) ;
6748: LD_INT 6300
6750: PPUSH
6751: CALL_OW 67
// if not setkani_om then
6755: LD_EXP 41
6759: NOT
6760: IFFALSE 6798
// begin dialog_upoz ;
6762: CALL 15553 0 0
// TTime = 2 2$0 ;
6766: LD_ADDR_LOC 21
6770: PUSH
6771: LD_INT 4200
6773: ST_TO_ADDR
// disable ( 51 ) ;
6774: LD_INT 51
6776: DISABLE_MARKED
// enable ( 52 ) ;
6777: LD_INT 52
6779: ENABLE_MARKED
// wait ( 2 2$0 ) ;
6780: LD_INT 4200
6782: PPUSH
6783: CALL_OW 67
// if not setkani_om then
6787: LD_EXP 41
6791: NOT
6792: IFFALSE 6798
// konec_pred_omikronem ;
6794: CALL 1429 0 0
// end ; end ;
6798: END
// every 0 0$1 marked 4 do var pom ;
6799: GO 6801
6801: DISABLE
6802: LD_INT 0
6804: PPUSH
// begin wait ( utok_na_omikron - 5 5$0 ) ;
6805: LD_EXP 19
6809: PUSH
6810: LD_INT 10500
6812: MINUS
6813: PPUSH
6814: CALL_OW 67
// pomoc_pro_omikroni_utok ;
6818: CALL 5738 0 0
// wait ( 5 5$0 ) ;
6822: LD_INT 10500
6824: PPUSH
6825: CALL_OW 67
// disable ( 5 ) ;
6829: LD_INT 5
6831: DISABLE_MARKED
// if dialog_probehnul then
6832: LD_LOC 19
6836: IFFALSE 6842
// exit else
6838: GO 6950
6840: GO 6850
// dialog_probehnul := true ;
6842: LD_ADDR_LOC 19
6846: PUSH
6847: LD_INT 1
6849: ST_TO_ADDR
// pom = dialog_otazka_poctu_aut ;
6850: LD_ADDR_VAR 0 1
6854: PUSH
6855: CALL 12951 0 0
6859: ST_TO_ADDR
// case pom of 1 :
6860: LD_VAR 0 1
6864: PUSH
6865: LD_INT 1
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 6895
6873: POP
// begin stav_omikron = 3 ;
6874: LD_ADDR_EXP 39
6878: PUSH
6879: LD_INT 3
6881: ST_TO_ADDR
// stav_aut = 1 ;
6882: LD_ADDR_EXP 38
6886: PUSH
6887: LD_INT 1
6889: ST_TO_ADDR
// enable ( 2 ) ;
6890: LD_INT 2
6892: ENABLE_MARKED
// end ; 2 :
6893: GO 6950
6895: LD_INT 2
6897: DOUBLE
6898: EQUAL
6899: IFTRUE 6903
6901: GO 6922
6903: POP
// begin stav_omikron = 3 ;
6904: LD_ADDR_EXP 39
6908: PUSH
6909: LD_INT 3
6911: ST_TO_ADDR
// stav_aut = 2 ;
6912: LD_ADDR_EXP 38
6916: PUSH
6917: LD_INT 2
6919: ST_TO_ADDR
// end ; 3 :
6920: GO 6950
6922: LD_INT 3
6924: DOUBLE
6925: EQUAL
6926: IFTRUE 6930
6928: GO 6949
6930: POP
// begin stav_omikron = 2 ;
6931: LD_ADDR_EXP 39
6935: PUSH
6936: LD_INT 2
6938: ST_TO_ADDR
// stav_aut = 3 ;
6939: LD_ADDR_EXP 38
6943: PUSH
6944: LD_INT 3
6946: ST_TO_ADDR
// end ; end ;
6947: GO 6950
6949: POP
// end ;
6950: PPOPN 1
6952: END
// every 0 0$17 trigger stav_omikron < 2 marked 5 do var un , veh ;
6953: LD_EXP 39
6957: PUSH
6958: LD_INT 2
6960: LESS
6961: IFFALSE 7193
6963: GO 6965
6965: DISABLE
6966: LD_INT 0
6968: PPUSH
6969: PPUSH
// begin un = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
6970: LD_ADDR_VAR 0 1
6974: PUSH
6975: LD_INT 22
6977: PUSH
6978: LD_EXP 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 21
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7006: LD_ADDR_VAR 0 2
7010: PUSH
7011: LD_INT 22
7013: PUSH
7014: LD_EXP 1
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 21
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: ST_TO_ADDR
// if veh >= ( un + 2 ) then
7042: LD_VAR 0 2
7046: PUSH
7047: LD_VAR 0 1
7051: PUSH
7052: LD_INT 2
7054: PLUS
7055: GREATEREQUAL
7056: IFFALSE 7192
// begin disable ( 4 ) ;
7058: LD_INT 4
7060: DISABLE_MARKED
// pomoc_pro_omikroni_utok ;
7061: CALL 5738 0 0
// if dialog_probehnul then
7065: LD_LOC 19
7069: IFFALSE 7075
// exit else
7071: GO 7193
7073: GO 7083
// dialog_probehnul = true ;
7075: LD_ADDR_LOC 19
7079: PUSH
7080: LD_INT 1
7082: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7083: LD_INT 350
7085: PPUSH
7086: CALL_OW 67
// un = dialog_otazka_poctu_aut ;
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: CALL 12951 0 0
7099: ST_TO_ADDR
// case un of 1 :
7100: LD_VAR 0 1
7104: PUSH
7105: LD_INT 1
7107: DOUBLE
7108: EQUAL
7109: IFTRUE 7113
7111: GO 7135
7113: POP
// begin stav_omikron = 3 ;
7114: LD_ADDR_EXP 39
7118: PUSH
7119: LD_INT 3
7121: ST_TO_ADDR
// stav_aut = 1 ;
7122: LD_ADDR_EXP 38
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// enable ( 2 ) ;
7130: LD_INT 2
7132: ENABLE_MARKED
// end ; 2 :
7133: GO 7190
7135: LD_INT 2
7137: DOUBLE
7138: EQUAL
7139: IFTRUE 7143
7141: GO 7162
7143: POP
// begin stav_omikron = 3 ;
7144: LD_ADDR_EXP 39
7148: PUSH
7149: LD_INT 3
7151: ST_TO_ADDR
// stav_aut = 2 ;
7152: LD_ADDR_EXP 38
7156: PUSH
7157: LD_INT 2
7159: ST_TO_ADDR
// end ; 3 :
7160: GO 7190
7162: LD_INT 3
7164: DOUBLE
7165: EQUAL
7166: IFTRUE 7170
7168: GO 7189
7170: POP
// begin stav_omikron = 2 ;
7171: LD_ADDR_EXP 39
7175: PUSH
7176: LD_INT 2
7178: ST_TO_ADDR
// stav_aut = 3 ;
7179: LD_ADDR_EXP 38
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// end ; end ;
7187: GO 7190
7189: POP
// end else
7190: GO 7193
// enable ;
7192: ENABLE
// end ;
7193: PPOPN 2
7195: END
// export function manage_ruske_computery_zpet ; var pom ; begin
7196: LD_INT 0
7198: PPUSH
7199: PPUSH
// disable ( 200 ) ;
7200: LD_INT 200
7202: DISABLE_MARKED
// disable ( 201 ) ;
7203: LD_INT 201
7205: DISABLE_MARKED
// disable ( 202 ) ;
7206: LD_INT 202
7208: DISABLE_MARKED
// disable ( 203 ) ;
7209: LD_INT 203
7211: DISABLE_MARKED
// pom = FilterUnitsInArea ( Am_base , [ [ F_side , You2 ] ] ) ;
7212: LD_ADDR_VAR 0 2
7216: PUSH
7217: LD_INT 6
7219: PPUSH
7220: LD_INT 22
7222: PUSH
7223: LD_EXP 2
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: PPUSH
7235: CALL_OW 70
7239: ST_TO_ADDR
// McMove ( 2 , pom , [ [ 42 , 14 ] , [ 60 , 15 ] , [ 95 , 21 ] , [ 100 , 34 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7240: LD_INT 2
7242: PPUSH
7243: LD_VAR 0 2
7247: PPUSH
7248: LD_INT 42
7250: PUSH
7251: LD_INT 14
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 60
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 95
7270: PUSH
7271: LD_INT 21
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 100
7280: PUSH
7281: LD_INT 34
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: PPUSH
7294: LD_INT 6
7296: PUSH
7297: LD_INT 1
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 398
// enable ( 5 ) ;
7312: LD_INT 5
7314: ENABLE_MARKED
// R_comp = pom ;
7315: LD_ADDR_LOC 18
7319: PUSH
7320: LD_VAR 0 2
7324: ST_TO_ADDR
// end ;
7325: LD_VAR 0 1
7329: RET
// every 0 0$15 marked 5 do
7330: GO 7332
7332: DISABLE
// begin wait ( 1 1$0 ) ;
7333: LD_INT 2100
7335: PPUSH
7336: CALL_OW 67
// McMove ( 1 , R_comp , [ [ 110 , 59 ] , [ 129 , 75 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7340: LD_INT 1
7342: PPUSH
7343: LD_LOC 18
7347: PPUSH
7348: LD_INT 110
7350: PUSH
7351: LD_INT 59
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 129
7360: PUSH
7361: LD_INT 75
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PPUSH
7372: LD_INT 6
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: LD_INT 3
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 398
// end ;
7390: END
// function split_ruske_jednotky ( jedn ) ; var i , pom ; var p1 , p2 , p3 , p4 ; var a ; begin
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
// p1 = [ ] ;
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: EMPTY
7407: ST_TO_ADDR
// p2 = [ ] ;
7408: LD_ADDR_VAR 0 6
7412: PUSH
7413: EMPTY
7414: ST_TO_ADDR
// p3 = [ ] ;
7415: LD_ADDR_VAR 0 7
7419: PUSH
7420: EMPTY
7421: ST_TO_ADDR
// p4 = [ ] ;
7422: LD_ADDR_VAR 0 8
7426: PUSH
7427: EMPTY
7428: ST_TO_ADDR
// for i in jedn do
7429: LD_ADDR_VAR 0 3
7433: PUSH
7434: LD_VAR 0 1
7438: PUSH
7439: FOR_IN
7440: IFFALSE 7574
// begin pom = Rand ( 1 , 4 ) ;
7442: LD_ADDR_VAR 0 4
7446: PUSH
7447: LD_INT 1
7449: PPUSH
7450: LD_INT 4
7452: PPUSH
7453: CALL_OW 12
7457: ST_TO_ADDR
// case pom of 1 :
7458: LD_VAR 0 4
7462: PUSH
7463: LD_INT 1
7465: DOUBLE
7466: EQUAL
7467: IFTRUE 7471
7469: GO 7490
7471: POP
// p1 = p1 ^ i ; 2 :
7472: LD_ADDR_VAR 0 5
7476: PUSH
7477: LD_VAR 0 5
7481: PUSH
7482: LD_VAR 0 3
7486: ADD
7487: ST_TO_ADDR
7488: GO 7572
7490: LD_INT 2
7492: DOUBLE
7493: EQUAL
7494: IFTRUE 7498
7496: GO 7517
7498: POP
// p2 = p2 ^ i ; 3 :
7499: LD_ADDR_VAR 0 6
7503: PUSH
7504: LD_VAR 0 6
7508: PUSH
7509: LD_VAR 0 3
7513: ADD
7514: ST_TO_ADDR
7515: GO 7572
7517: LD_INT 3
7519: DOUBLE
7520: EQUAL
7521: IFTRUE 7525
7523: GO 7544
7525: POP
// p3 = p3 ^ i ; 4 :
7526: LD_ADDR_VAR 0 7
7530: PUSH
7531: LD_VAR 0 7
7535: PUSH
7536: LD_VAR 0 3
7540: ADD
7541: ST_TO_ADDR
7542: GO 7572
7544: LD_INT 4
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7571
7552: POP
// p4 = p4 ^ i ; end ;
7553: LD_ADDR_VAR 0 8
7557: PUSH
7558: LD_VAR 0 8
7562: PUSH
7563: LD_VAR 0 3
7567: ADD
7568: ST_TO_ADDR
7569: GO 7572
7571: POP
// end ;
7572: GO 7439
7574: POP
7575: POP
// a = [ p1 , p2 , p3 , p4 ] ;
7576: LD_ADDR_VAR 0 9
7580: PUSH
7581: LD_VAR 0 5
7585: PUSH
7586: LD_VAR 0 6
7590: PUSH
7591: LD_VAR 0 7
7595: PUSH
7596: LD_VAR 0 8
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: ST_TO_ADDR
// result := a ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_VAR 0 9
7616: ST_TO_ADDR
// end ;
7617: LD_VAR 0 2
7621: RET
// every 0 0$1 marked 6 do var pom , i ;
7622: GO 7624
7624: DISABLE
7625: LD_INT 0
7627: PPUSH
7628: PPUSH
// begin pom = FilterUnitsInArea ( RU_odber , [ [ f_side , You2 ] ] ) ;
7629: LD_ADDR_VAR 0 1
7633: PUSH
7634: LD_INT 27
7636: PPUSH
7637: LD_INT 22
7639: PUSH
7640: LD_EXP 2
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: PPUSH
7652: CALL_OW 70
7656: ST_TO_ADDR
// if pom > 0 then
7657: LD_VAR 0 1
7661: PUSH
7662: LD_INT 0
7664: GREATER
7665: IFFALSE 7709
// begin Rusi_utekli = Rusi_utekli ^ pom ;
7667: LD_ADDR_EXP 42
7671: PUSH
7672: LD_EXP 42
7676: PUSH
7677: LD_VAR 0 1
7681: ADD
7682: ST_TO_ADDR
// for i in pom do
7683: LD_ADDR_VAR 0 2
7687: PUSH
7688: LD_VAR 0 1
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7707
// RemoveUnit ( i ) ;
7696: LD_VAR 0 2
7700: PPUSH
7701: CALL_OW 64
7705: GO 7693
7707: POP
7708: POP
// end ; enable ;
7709: ENABLE
// end ;
7710: PPOPN 2
7712: END
// every 25 25$0 do var i , pom ;
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
// begin for i in RU_posily_na_utek do
7720: LD_ADDR_VAR 0 1
7724: PUSH
7725: LD_EXP 58
7729: PUSH
7730: FOR_IN
7731: IFFALSE 7750
// PlaceUnitArea ( i , Ru_posily , false ) ;
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_INT 28
7740: PPUSH
7741: LD_INT 0
7743: PPUSH
7744: CALL_OW 49
7748: GO 7730
7750: POP
7751: POP
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_type , unit_vehicle ] ] ) ;
7752: LD_ADDR_VAR 0 2
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: PPUSH
7775: CALL_OW 72
7779: ST_TO_ADDR
// ComMoveXY ( pom , 155 , 93 ) ;
7780: LD_VAR 0 2
7784: PPUSH
7785: LD_INT 155
7787: PPUSH
7788: LD_INT 93
7790: PPUSH
7791: CALL_OW 111
// Rusi_save = pom ;
7795: LD_ADDR_EXP 43
7799: PUSH
7800: LD_VAR 0 2
7804: ST_TO_ADDR
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_soldier ] ] ) ;
7805: LD_ADDR_VAR 0 2
7809: PUSH
7810: LD_EXP 58
7814: PPUSH
7815: LD_INT 25
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: PPUSH
7828: CALL_OW 72
7832: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_bar2 ) ;
7833: LD_VAR 0 2
7837: PPUSH
7838: LD_INT 17
7840: PPUSH
7841: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_mechanic ] ] ) ;
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: LD_EXP 58
7854: PPUSH
7855: LD_INT 25
7857: PUSH
7858: LD_INT 3
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: PPUSH
7868: CALL_OW 72
7872: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_fac ) ;
7873: LD_VAR 0 2
7877: PPUSH
7878: LD_INT 5
7880: PPUSH
7881: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_engineer ] ] ) ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_EXP 58
7894: PPUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 2
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: PPUSH
7908: CALL_OW 72
7912: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_dep ) ;
7913: LD_VAR 0 2
7917: PPUSH
7918: LD_INT 1
7920: PPUSH
7921: CALL_OW 120
// Rusi_save = Rusi_save ^ [ RU1_sol1 , RU1_me3 , Ru1_sci2 , RU1_sci5 , RU1_sci3 , RU1_sol5 , RU1_eng1 ] ;
7925: LD_ADDR_EXP 43
7929: PUSH
7930: LD_EXP 43
7934: PUSH
7935: LD_INT 52
7937: PUSH
7938: LD_INT 51
7940: PUSH
7941: LD_INT 45
7943: PUSH
7944: LD_INT 48
7946: PUSH
7947: LD_INT 46
7949: PUSH
7950: LD_INT 55
7952: PUSH
7953: LD_INT 57
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: ADD
7965: ST_TO_ADDR
// end ;
7966: PPOPN 2
7968: END
// export function posli_rusy_pryc ; var pom ; begin
7969: LD_INT 0
7971: PPUSH
7972: PPUSH
// SetLives ( Rusi_save , 800 ) ;
7973: LD_EXP 43
7977: PPUSH
7978: LD_INT 800
7980: PPUSH
7981: CALL_OW 234
// pom = split_ruske_jednotky ( Rusi_save ) ;
7985: LD_ADDR_VAR 0 2
7989: PUSH
7990: LD_EXP 43
7994: PPUSH
7995: CALL 7391 0 1
7999: ST_TO_ADDR
// ComExitBuilding ( Rusi_save ) ;
8000: LD_EXP 43
8004: PPUSH
8005: CALL_OW 122
// AddComMoveXY ( pom [ 1 ] , 110 , 45 ) ;
8009: LD_VAR 0 2
8013: PUSH
8014: LD_INT 1
8016: ARRAY
8017: PPUSH
8018: LD_INT 110
8020: PPUSH
8021: LD_INT 45
8023: PPUSH
8024: CALL_OW 171
// AddComMoveXY ( pom [ 2 ] , 103 , 60 ) ;
8028: LD_VAR 0 2
8032: PUSH
8033: LD_INT 2
8035: ARRAY
8036: PPUSH
8037: LD_INT 103
8039: PPUSH
8040: LD_INT 60
8042: PPUSH
8043: CALL_OW 171
// AddComMoveXY ( pom [ 3 ] , 76 , 80 ) ;
8047: LD_VAR 0 2
8051: PUSH
8052: LD_INT 3
8054: ARRAY
8055: PPUSH
8056: LD_INT 76
8058: PPUSH
8059: LD_INT 80
8061: PPUSH
8062: CALL_OW 171
// AddComMoveXY ( pom [ 4 ] , 53 , 1 ) ;
8066: LD_VAR 0 2
8070: PUSH
8071: LD_INT 4
8073: ARRAY
8074: PPUSH
8075: LD_INT 53
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: CALL_OW 171
// end ;
8085: LD_VAR 0 1
8089: RET
// export function posli_lidi_zpet_omicron ; var pom ; var pom1 , i ; begin
8090: LD_INT 0
8092: PPUSH
8093: PPUSH
8094: PPUSH
8095: PPUSH
// pom1 = [ ] ;
8096: LD_ADDR_VAR 0 3
8100: PUSH
8101: EMPTY
8102: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_building ] , [ f_side , You ] ] ) ;
8103: LD_ADDR_VAR 0 2
8107: PUSH
8108: LD_INT 20
8110: PPUSH
8111: LD_INT 21
8113: PUSH
8114: LD_INT 3
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_EXP 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 70
8141: ST_TO_ADDR
// for i in pom do
8142: LD_ADDR_VAR 0 4
8146: PUSH
8147: LD_VAR 0 2
8151: PUSH
8152: FOR_IN
8153: IFFALSE 8178
// pom1 = pom1 ^ UnitsInside ( i ) ;
8155: LD_ADDR_VAR 0 3
8159: PUSH
8160: LD_VAR 0 3
8164: PUSH
8165: LD_VAR 0 4
8169: PPUSH
8170: CALL_OW 313
8174: ADD
8175: ST_TO_ADDR
8176: GO 8152
8178: POP
8179: POP
// ComExitBuilding ( pom1 ) ;
8180: LD_VAR 0 3
8184: PPUSH
8185: CALL_OW 122
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , You ] ] ) ;
8189: LD_ADDR_VAR 0 2
8193: PUSH
8194: LD_INT 20
8196: PPUSH
8197: LD_INT 21
8199: PUSH
8200: LD_INT 1
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 22
8209: PUSH
8210: LD_EXP 1
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PPUSH
8223: CALL_OW 70
8227: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
8228: LD_ADDR_VAR 0 3
8232: PUSH
8233: LD_VAR 0 3
8237: PUSH
8238: LD_VAR 0 2
8242: ADD
8243: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , You ] ] ) ;
8244: LD_ADDR_VAR 0 2
8248: PUSH
8249: LD_INT 20
8251: PPUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 2
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 22
8264: PUSH
8265: LD_EXP 1
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 70
8282: ST_TO_ADDR
// for i in pom do
8283: LD_ADDR_VAR 0 4
8287: PUSH
8288: LD_VAR 0 2
8292: PUSH
8293: FOR_IN
8294: IFFALSE 8346
// begin pom1 = pom ^ i ;
8296: LD_ADDR_VAR 0 3
8300: PUSH
8301: LD_VAR 0 2
8305: PUSH
8306: LD_VAR 0 4
8310: ADD
8311: ST_TO_ADDR
// if IsDrivenBy ( i ) then
8312: LD_VAR 0 4
8316: PPUSH
8317: CALL_OW 311
8321: IFFALSE 8344
// pom1 = pom1 ^ IsDrivenBy ( i ) ;
8323: LD_ADDR_VAR 0 3
8327: PUSH
8328: LD_VAR 0 3
8332: PUSH
8333: LD_VAR 0 4
8337: PPUSH
8338: CALL_OW 311
8342: ADD
8343: ST_TO_ADDR
// end ;
8344: GO 8293
8346: POP
8347: POP
// SetSide ( pom1 , You3 ) ;
8348: LD_VAR 0 3
8352: PPUSH
8353: LD_EXP 3
8357: PPUSH
8358: CALL_OW 235
// pom = FilterUnitsInArea ( Om_ven_1 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8362: LD_ADDR_VAR 0 2
8366: PUSH
8367: LD_INT 29
8369: PPUSH
8370: LD_INT 22
8372: PUSH
8373: LD_EXP 3
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 2
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 70
8418: ST_TO_ADDR
// ComMoveXY ( pom , 79 , 16 ) ;
8419: LD_VAR 0 2
8423: PPUSH
8424: LD_INT 79
8426: PPUSH
8427: LD_INT 16
8429: PPUSH
8430: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_2 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8434: LD_ADDR_VAR 0 2
8438: PUSH
8439: LD_INT 30
8441: PPUSH
8442: LD_INT 22
8444: PUSH
8445: LD_EXP 3
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 2
8456: PUSH
8457: LD_INT 21
8459: PUSH
8460: LD_INT 2
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 21
8469: PUSH
8470: LD_INT 1
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 70
8490: ST_TO_ADDR
// ComMoveXY ( pom , 67 , 40 ) ;
8491: LD_VAR 0 2
8495: PPUSH
8496: LD_INT 67
8498: PPUSH
8499: LD_INT 40
8501: PPUSH
8502: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_3 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8506: LD_ADDR_VAR 0 2
8510: PUSH
8511: LD_INT 31
8513: PPUSH
8514: LD_INT 22
8516: PUSH
8517: LD_EXP 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: LD_INT 21
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 21
8541: PUSH
8542: LD_INT 1
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 70
8562: ST_TO_ADDR
// ComMoveXY ( pom , 58 , 52 ) ;
8563: LD_VAR 0 2
8567: PPUSH
8568: LD_INT 58
8570: PPUSH
8571: LD_INT 52
8573: PPUSH
8574: CALL_OW 111
// end ;
8578: LD_VAR 0 1
8582: RET
// export function get_lidi_popov_area ; var pom , i ; var drv ; var a ; begin
8583: LD_INT 0
8585: PPUSH
8586: PPUSH
8587: PPUSH
8588: PPUSH
8589: PPUSH
// a = [ ] ;
8590: LD_ADDR_VAR 0 5
8594: PUSH
8595: EMPTY
8596: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
8597: LD_ADDR_VAR 0 2
8601: PUSH
8602: LD_INT 15
8604: PPUSH
8605: LD_INT 22
8607: PUSH
8608: LD_EXP 1
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 70
8635: ST_TO_ADDR
// a = pom ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: LD_VAR 0 2
8645: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
8646: LD_ADDR_VAR 0 2
8650: PUSH
8651: LD_INT 15
8653: PPUSH
8654: LD_INT 22
8656: PUSH
8657: LD_EXP 1
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 21
8668: PUSH
8669: LD_INT 2
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 70
8684: ST_TO_ADDR
// for i in pom do
8685: LD_ADDR_VAR 0 3
8689: PUSH
8690: LD_VAR 0 2
8694: PUSH
8695: FOR_IN
8696: IFFALSE 8754
// begin drv = IsDrivenBy ( i ) ;
8698: LD_ADDR_VAR 0 4
8702: PUSH
8703: LD_VAR 0 3
8707: PPUSH
8708: CALL_OW 311
8712: ST_TO_ADDR
// if ( not ( drv in a ) ) and ( drv <> 0 ) then
8713: LD_VAR 0 4
8717: PUSH
8718: LD_VAR 0 5
8722: IN
8723: NOT
8724: PUSH
8725: LD_VAR 0 4
8729: PUSH
8730: LD_INT 0
8732: NONEQUAL
8733: AND
8734: IFFALSE 8752
// a = a ^ drv ;
8736: LD_ADDR_VAR 0 5
8740: PUSH
8741: LD_VAR 0 5
8745: PUSH
8746: LD_VAR 0 4
8750: ADD
8751: ST_TO_ADDR
// end ;
8752: GO 8695
8754: POP
8755: POP
// result := a ;
8756: LD_ADDR_VAR 0 1
8760: PUSH
8761: LD_VAR 0 5
8765: ST_TO_ADDR
// end ;
8766: LD_VAR 0 1
8770: RET
// export function totalni_ukonceni_mise_v_ingame_videu ; var pom ; begin
8771: LD_INT 0
8773: PPUSH
8774: PPUSH
// InGameOn ;
8775: CALL_OW 8
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8779: LD_ADDR_VAR 0 2
8783: PUSH
8784: LD_INT 22
8786: PUSH
8787: LD_EXP 1
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: LD_INT 21
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8833: LD_INT 10
8835: PPUSH
8836: LD_VAR 0 2
8840: PPUSH
8841: LD_INT 108
8843: PUSH
8844: LD_INT 70
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 77
8853: PUSH
8854: LD_INT 65
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 53
8863: PUSH
8864: LD_INT 63
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: LD_INT 40
8873: PUSH
8874: LD_INT 64
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 51
8883: PUSH
8884: LD_INT 97
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: PPUSH
8898: LD_INT 10
8900: PUSH
8901: LD_INT 5
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PPUSH
8908: CALL_OW 398
// pom = FilterAllUnits ( [ [ f_side , You2 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8912: LD_ADDR_VAR 0 2
8916: PUSH
8917: LD_INT 22
8919: PUSH
8920: LD_EXP 2
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: LD_INT 21
8934: PUSH
8935: LD_INT 2
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 21
8944: PUSH
8945: LD_INT 1
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PPUSH
8961: CALL_OW 69
8965: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8966: LD_INT 10
8968: PPUSH
8969: LD_VAR 0 2
8973: PPUSH
8974: LD_INT 108
8976: PUSH
8977: LD_INT 70
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 77
8986: PUSH
8987: LD_INT 65
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 53
8996: PUSH
8997: LD_INT 63
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 40
9006: PUSH
9007: LD_INT 64
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 51
9016: PUSH
9017: LD_INT 97
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: PPUSH
9031: LD_INT 10
9033: PUSH
9034: LD_INT 5
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 398
// enable ( 7 ) ;
9045: LD_INT 7
9047: ENABLE_MARKED
// wait ( 0 0$10 ) ;
9048: LD_INT 350
9050: PPUSH
9051: CALL_OW 67
// InGameOff ;
9055: CALL_OW 9
// konec_mise ;
9059: CALL 1459 0 0
// end ;
9063: LD_VAR 0 1
9067: RET
// export function schovej_kurina ; begin
9068: LD_INT 0
9070: PPUSH
// ComEnterUnit ( kur , RU1_dep ) ;
9071: LD_EXP 27
9075: PPUSH
9076: LD_INT 1
9078: PPUSH
9079: CALL_OW 120
// end ;
9083: LD_VAR 0 1
9087: RET
// export function posli_kurina_na_smrt ; begin
9088: LD_INT 0
9090: PPUSH
// ComExitBuilding ( kur ) ;
9091: LD_EXP 27
9095: PPUSH
9096: CALL_OW 122
// end ;
9100: LD_VAR 0 1
9104: RET
// every 0 0$2 do var pom ; var i ;
9105: GO 9107
9107: DISABLE
9108: LD_INT 0
9110: PPUSH
9111: PPUSH
// begin pom = FilterUnitsExceptArea ( Om_ven , [ [ f_side , You3 ] ] ) ;
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_INT 20
9119: PPUSH
9120: LD_INT 22
9122: PUSH
9123: LD_EXP 3
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: EMPTY
9133: LIST
9134: PPUSH
9135: CALL_OW 71
9139: ST_TO_ADDR
// for i in pom do
9140: LD_ADDR_VAR 0 2
9144: PUSH
9145: LD_VAR 0 1
9149: PUSH
9150: FOR_IN
9151: IFFALSE 9214
// begin if GetType ( i ) = unit_vehicle then
9153: LD_VAR 0 2
9157: PPUSH
9158: CALL_OW 247
9162: PUSH
9163: LD_INT 2
9165: EQUAL
9166: IFFALSE 9198
// if IsDrivenBy ( i ) then
9168: LD_VAR 0 2
9172: PPUSH
9173: CALL_OW 311
9177: IFFALSE 9198
// SetSide ( IsDrivenBy ( i ) , You ) ;
9179: LD_VAR 0 2
9183: PPUSH
9184: CALL_OW 311
9188: PPUSH
9189: LD_EXP 1
9193: PPUSH
9194: CALL_OW 235
// SetSide ( i , You ) ;
9198: LD_VAR 0 2
9202: PPUSH
9203: LD_EXP 1
9207: PPUSH
9208: CALL_OW 235
// end ;
9212: GO 9150
9214: POP
9215: POP
// enable ;
9216: ENABLE
// end ;
9217: PPOPN 2
9219: END
// every 0 0$1 marked 9 do var i ; var ridici ; var mcm ;
9220: GO 9222
9222: DISABLE
9223: LD_INT 0
9225: PPUSH
9226: PPUSH
9227: PPUSH
// begin if FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) then
9228: LD_INT 56
9230: PPUSH
9231: LD_INT 22
9233: PUSH
9234: LD_INT 1
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PPUSH
9241: CALL_OW 70
9245: IFFALSE 9286
// for i in FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) do
9247: LD_ADDR_VAR 0 1
9251: PUSH
9252: LD_INT 56
9254: PPUSH
9255: LD_INT 22
9257: PUSH
9258: LD_INT 1
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PPUSH
9265: CALL_OW 70
9269: PUSH
9270: FOR_IN
9271: IFFALSE 9284
// RemoveUnit ( i ) ;
9273: LD_VAR 0 1
9277: PPUSH
9278: CALL_OW 64
9282: GO 9270
9284: POP
9285: POP
// ridici = [ ] ;
9286: LD_ADDR_VAR 0 2
9290: PUSH
9291: EMPTY
9292: ST_TO_ADDR
// for i in RUSI_CERPACI_AUTA_LIST do
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: LD_EXP 59
9302: PUSH
9303: FOR_IN
9304: IFFALSE 9344
// begin PlaceUnitArea ( i , cargoSpawn , false ) ;
9306: LD_VAR 0 1
9310: PPUSH
9311: LD_INT 55
9313: PPUSH
9314: LD_INT 0
9316: PPUSH
9317: CALL_OW 49
// ridici = ridici ^ IsDrivenBy ( i ) ;
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_VAR 0 1
9335: PPUSH
9336: CALL_OW 311
9340: ADD
9341: ST_TO_ADDR
// end ;
9342: GO 9303
9344: POP
9345: POP
// mcm = McMove ( 10 , RUSI_CERPACI_AUTA_LIST , [ [ 130 , 75 ] , [ 112 , 59 ] , [ 106 , 32 ] , [ 91 , 21 ] , [ 62 , 9 ] ] , [ mc_move_waitwp ] ) ;
9346: LD_ADDR_VAR 0 3
9350: PUSH
9351: LD_INT 10
9353: PPUSH
9354: LD_EXP 59
9358: PPUSH
9359: LD_INT 130
9361: PUSH
9362: LD_INT 75
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 112
9371: PUSH
9372: LD_INT 59
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 106
9381: PUSH
9382: LD_INT 32
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_INT 21
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 62
9401: PUSH
9402: LD_INT 9
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: LD_INT 3
9418: PUSH
9419: EMPTY
9420: LIST
9421: PPUSH
9422: CALL_OW 398
9426: ST_TO_ADDR
// while UnitFilter ( RUSI_CERPACI_AUTA_LIST , [ [ f_inarea , benzina ] ] ) <> RUSI_CERPACI_AUTA_LIST do
9427: LD_EXP 59
9431: PPUSH
9432: LD_INT 95
9434: PUSH
9435: LD_INT 48
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: PPUSH
9445: CALL_OW 72
9449: PUSH
9450: LD_EXP 59
9454: NONEQUAL
9455: IFFALSE 9490
// begin KillMc ( mcm ) ;
9457: LD_VAR 0 3
9461: PPUSH
9462: CALL_OW 387
// wait ( 0 0$2 ) ;
9466: LD_INT 70
9468: PPUSH
9469: CALL_OW 67
// ComMoveXY ( RUSI_CERPACI_AUTA_LIST , 62 , 9 ) ;
9473: LD_EXP 59
9477: PPUSH
9478: LD_INT 62
9480: PPUSH
9481: LD_INT 9
9483: PPUSH
9484: CALL_OW 111
// end ;
9488: GO 9427
// hint_cerpaci_auta ;
9490: CALL 16640 0 0
// ComExitVehicle ( ridici ) ;
9494: LD_VAR 0 2
9498: PPUSH
9499: CALL_OW 121
// AddComAgressiveMove ( ridici , 45 , 6 ) ;
9503: LD_VAR 0 2
9507: PPUSH
9508: LD_INT 45
9510: PPUSH
9511: LD_INT 6
9513: PPUSH
9514: CALL_OW 174
// AddComAgressiveMove ( ridici , 15 , 10 ) ;
9518: LD_VAR 0 2
9522: PPUSH
9523: LD_INT 15
9525: PPUSH
9526: LD_INT 10
9528: PPUSH
9529: CALL_OW 174
// AddComAttackUnit ( ridici , Am_dep ) ;
9533: LD_VAR 0 2
9537: PPUSH
9538: LD_INT 12
9540: PPUSH
9541: CALL_OW 175
// end ;
9545: PPOPN 3
9547: END
// every 0 0$2 do var pom , i ; var ridic ;
9548: GO 9550
9550: DISABLE
9551: LD_INT 0
9553: PPUSH
9554: PPUSH
9555: PPUSH
// begin pom = FilterUnitsInArea ( Cauta , [ [ f_side , You2 ] , [ f_weapon , ru_cargo_bay ] ] ) ;
9556: LD_ADDR_VAR 0 1
9560: PUSH
9561: LD_INT 39
9563: PPUSH
9564: LD_INT 22
9566: PUSH
9567: LD_EXP 2
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 34
9578: PUSH
9579: LD_INT 51
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 70
9594: ST_TO_ADDR
// if pom > 0 then
9595: LD_VAR 0 1
9599: PUSH
9600: LD_INT 0
9602: GREATER
9603: IFFALSE 9624
// begin if not qrefuel_over then
9605: LD_LOC 20
9609: NOT
9610: IFFALSE 9624
// begin qrefuel_over = true ;
9612: LD_ADDR_LOC 20
9616: PUSH
9617: LD_INT 1
9619: ST_TO_ADDR
// query_refuel ;
9620: CALL 16558 0 0
// end ; end ; for i in pom do
9624: LD_ADDR_VAR 0 2
9628: PUSH
9629: LD_VAR 0 1
9633: PUSH
9634: FOR_IN
9635: IFFALSE 9689
// if IsDrivenBy ( i ) then
9637: LD_VAR 0 2
9641: PPUSH
9642: CALL_OW 311
9646: IFFALSE 9687
// begin ridic = IsDrivenBy ( i ) ;
9648: LD_ADDR_VAR 0 3
9652: PUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 311
9662: ST_TO_ADDR
// ComExitVehicle ( ridic ) ;
9663: LD_VAR 0 3
9667: PPUSH
9668: CALL_OW 121
// AddComAgressiveMove ( ridic , 21 , 14 ) ;
9672: LD_VAR 0 3
9676: PPUSH
9677: LD_INT 21
9679: PPUSH
9680: LD_INT 14
9682: PPUSH
9683: CALL_OW 174
// end ;
9687: GO 9634
9689: POP
9690: POP
// enable ;
9691: ENABLE
// end ;
9692: PPOPN 3
9694: END
// on VehicleConstructed ( v , fact ) do begin if GetSide ( fact ) = 3 then
9695: LD_VAR 0 2
9699: PPUSH
9700: CALL_OW 255
9704: PUSH
9705: LD_INT 3
9707: EQUAL
9708: IFFALSE 9724
// postavenych_aut = postavenych_aut + 1 ;
9710: LD_ADDR_EXP 47
9714: PUSH
9715: LD_EXP 47
9719: PUSH
9720: LD_INT 1
9722: PLUS
9723: ST_TO_ADDR
// if GetSide ( fact ) = 6 then
9724: LD_VAR 0 2
9728: PPUSH
9729: CALL_OW 255
9733: PUSH
9734: LD_INT 6
9736: EQUAL
9737: IFFALSE 9754
// ComMoveXY ( v , 125 , 70 ) ;
9739: LD_VAR 0 1
9743: PPUSH
9744: LD_INT 125
9746: PPUSH
9747: LD_INT 70
9749: PPUSH
9750: CALL_OW 111
// end ;
9754: PPOPN 2
9756: END
// every 0 0$1 marked 51 do
9757: GO 9759
9759: DISABLE
// begin if konec_counteru then
9760: LD_EXP 45
9764: IFFALSE 9775
// begin display_strings = [ ] ;
9766: LD_ADDR_OWVAR 47
9770: PUSH
9771: EMPTY
9772: ST_TO_ADDR
// exit ;
9773: GO 9826
// end ; display_strings = [ #Ru03-1 , TTime ] ;
9775: LD_ADDR_OWVAR 47
9779: PUSH
9780: LD_STRING #Ru03-1
9782: PUSH
9783: LD_LOC 21
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9792: LD_ADDR_LOC 21
9796: PUSH
9797: LD_LOC 21
9801: PUSH
9802: LD_INT 35
9804: MINUS
9805: ST_TO_ADDR
// if TTime > 0 then
9806: LD_LOC 21
9810: PUSH
9811: LD_INT 0
9813: GREATER
9814: IFFALSE 9819
// enable else
9816: ENABLE
9817: GO 9826
// display_strings = [ ] ;
9819: LD_ADDR_OWVAR 47
9823: PUSH
9824: EMPTY
9825: ST_TO_ADDR
// end ;
9826: END
// every 0 0$1 marked 52 do
9827: GO 9829
9829: DISABLE
// begin if konec_counteru then
9830: LD_EXP 45
9834: IFFALSE 9845
// begin display_strings = [ ] ;
9836: LD_ADDR_OWVAR 47
9840: PUSH
9841: EMPTY
9842: ST_TO_ADDR
// exit ;
9843: GO 9896
// end ; display_strings = [ #Ru03-2 , TTime ] ;
9845: LD_ADDR_OWVAR 47
9849: PUSH
9850: LD_STRING #Ru03-2
9852: PUSH
9853: LD_LOC 21
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9862: LD_ADDR_LOC 21
9866: PUSH
9867: LD_LOC 21
9871: PUSH
9872: LD_INT 35
9874: MINUS
9875: ST_TO_ADDR
// if TTime > 0 then
9876: LD_LOC 21
9880: PUSH
9881: LD_INT 0
9883: GREATER
9884: IFFALSE 9889
// enable else
9886: ENABLE
9887: GO 9896
// display_strings = [ ] ;
9889: LD_ADDR_OWVAR 47
9893: PUSH
9894: EMPTY
9895: ST_TO_ADDR
// end ;
9896: END
// every 0 0$1 marked 53 do
9897: GO 9899
9899: DISABLE
// begin if konec_counteru then
9900: LD_EXP 45
9904: IFFALSE 9915
// begin display_strings = [ ] ;
9906: LD_ADDR_OWVAR 47
9910: PUSH
9911: EMPTY
9912: ST_TO_ADDR
// exit ;
9913: GO 9966
// end ; display_strings = [ #Ru03-3 , TTime ] ;
9915: LD_ADDR_OWVAR 47
9919: PUSH
9920: LD_STRING #Ru03-3
9922: PUSH
9923: LD_LOC 21
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9932: LD_ADDR_LOC 21
9936: PUSH
9937: LD_LOC 21
9941: PUSH
9942: LD_INT 35
9944: MINUS
9945: ST_TO_ADDR
// if TTime > 0 then
9946: LD_LOC 21
9950: PUSH
9951: LD_INT 0
9953: GREATER
9954: IFFALSE 9959
// enable else
9956: ENABLE
9957: GO 9966
// display_strings = [ ] ;
9959: LD_ADDR_OWVAR 47
9963: PUSH
9964: EMPTY
9965: ST_TO_ADDR
// end ;
9966: END
// export function zastaveni_rusaku ; var pom ; begin
9967: LD_INT 0
9969: PPUSH
9970: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9971: LD_ADDR_VAR 0 2
9975: PUSH
9976: LD_INT 22
9978: PUSH
9979: LD_EXP 1
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: LD_INT 21
9993: PUSH
9994: LD_INT 2
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 21
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: ST_TO_ADDR
// ComStand ( pom ) ;
10025: LD_VAR 0 2
10029: PPUSH
10030: CALL_OW 165
// end ; end_of_file
10034: LD_VAR 0 1
10038: RET
// export konstanta_utoceni ; var hint_bw ; every 0 0$0.1 do
10039: GO 10041
10041: DISABLE
// begin konstanta_utoceni = 0 ;
10042: LD_ADDR_EXP 49
10046: PUSH
10047: LD_INT 0
10049: ST_TO_ADDR
// hint_bw = false ;
10050: LD_ADDR_LOC 22
10054: PUSH
10055: LD_INT 0
10057: ST_TO_ADDR
// end ;
10058: END
// export function uvodni_pokec ; var vyber , eng ; begin
10059: LD_INT 0
10061: PPUSH
10062: PPUSH
10063: PPUSH
// wait ( 0 0$2 ) ;
10064: LD_INT 70
10066: PPUSH
10067: CALL_OW 67
// ComTurnUnit ( bur , kur ) ;
10071: LD_EXP 29
10075: PPUSH
10076: LD_EXP 27
10080: PPUSH
10081: CALL_OW 119
// ComTurnUnit ( kur , bur ) ;
10085: LD_EXP 27
10089: PPUSH
10090: LD_EXP 29
10094: PPUSH
10095: CALL_OW 119
// if BELKOV_SAVED then
10099: LD_EXP 24
10103: IFFALSE 10143
// begin Say ( kur , D1b-Kur-1 ) ;
10105: LD_EXP 27
10109: PPUSH
10110: LD_STRING D1b-Kur-1
10112: PPUSH
10113: CALL_OW 88
// Say ( bel , D1b-Bel-1 ) ;
10117: LD_EXP 32
10121: PPUSH
10122: LD_STRING D1b-Bel-1
10124: PPUSH
10125: CALL_OW 88
// Say ( kur , D1b-Kur-2 ) ;
10129: LD_EXP 27
10133: PPUSH
10134: LD_STRING D1b-Kur-2
10136: PPUSH
10137: CALL_OW 88
// end else
10141: GO 10227
// begin Say ( kur , D1a-Kur-1 ) ;
10143: LD_EXP 27
10147: PPUSH
10148: LD_STRING D1a-Kur-1
10150: PPUSH
10151: CALL_OW 88
// Say ( bur , D1a-Bur-1 ) ;
10155: LD_EXP 29
10159: PPUSH
10160: LD_STRING D1a-Bur-1
10162: PPUSH
10163: CALL_OW 88
// if STAV_UTOKU = 3 then
10167: LD_EXP 25
10171: PUSH
10172: LD_INT 3
10174: EQUAL
10175: IFFALSE 10191
// Say ( kur , D1a-Kur-2a ) else
10177: LD_EXP 27
10181: PPUSH
10182: LD_STRING D1a-Kur-2a
10184: PPUSH
10185: CALL_OW 88
10189: GO 10203
// Say ( kur , D1a-Kur-2 ) ;
10191: LD_EXP 27
10195: PPUSH
10196: LD_STRING D1a-Kur-2
10198: PPUSH
10199: CALL_OW 88
// Say ( kur , D1a-Kur-2b ) ;
10203: LD_EXP 27
10207: PPUSH
10208: LD_STRING D1a-Kur-2b
10210: PPUSH
10211: CALL_OW 88
// Say ( bur , D1a-Bur-2 ) ;
10215: LD_EXP 29
10219: PPUSH
10220: LD_STRING D1a-Bur-2
10222: PPUSH
10223: CALL_OW 88
// end ; Say ( kur , D2-Kur-1 ) ;
10227: LD_EXP 27
10231: PPUSH
10232: LD_STRING D2-Kur-1
10234: PPUSH
10235: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
10239: LD_EXP 29
10243: PPUSH
10244: LD_STRING D2-Bur-1
10246: PPUSH
10247: CALL_OW 88
// Say ( kur , D2-Kur-2 ) ;
10251: LD_EXP 27
10255: PPUSH
10256: LD_STRING D2-Kur-2
10258: PPUSH
10259: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
10263: LD_EXP 29
10267: PPUSH
10268: LD_STRING D2-Bur-2
10270: PPUSH
10271: CALL_OW 88
// Say ( kur , D2-Kur-3 ) ;
10275: LD_EXP 27
10279: PPUSH
10280: LD_STRING D2-Kur-3
10282: PPUSH
10283: CALL_OW 88
// Say ( pop , D2-Pop-3 ) ;
10287: LD_EXP 28
10291: PPUSH
10292: LD_STRING D2-Pop-3
10294: PPUSH
10295: CALL_OW 88
// Say ( kur , D2-Kur-4 ) ;
10299: LD_EXP 27
10303: PPUSH
10304: LD_STRING D2-Kur-4
10306: PPUSH
10307: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
10311: LD_EXP 29
10315: PPUSH
10316: LD_STRING D2-Bur-4
10318: PPUSH
10319: CALL_OW 88
// Say ( kur , D2-Kur-5 ) ;
10323: LD_EXP 27
10327: PPUSH
10328: LD_STRING D2-Kur-5
10330: PPUSH
10331: CALL_OW 88
// Say ( bur , D2-Bur-5 ) ;
10335: LD_EXP 29
10339: PPUSH
10340: LD_STRING D2-Bur-5
10342: PPUSH
10343: CALL_OW 88
// Say ( kur , D2-Kur-6 ) ;
10347: LD_EXP 27
10351: PPUSH
10352: LD_STRING D2-Kur-6
10354: PPUSH
10355: CALL_OW 88
// vyber = vyber_characteru ;
10359: LD_ADDR_VAR 0 2
10363: PUSH
10364: CALL 3138 0 0
10368: ST_TO_ADDR
// if bel in vyber then
10369: LD_EXP 32
10373: PUSH
10374: LD_VAR 0 2
10378: IN
10379: IFFALSE 10392
// RemoveUnit ( bel ) else
10381: LD_EXP 32
10385: PPUSH
10386: CALL_OW 64
10390: GO 10406
// Setside ( bel , You2 ) ;
10392: LD_EXP 32
10396: PPUSH
10397: LD_EXP 2
10401: PPUSH
10402: CALL_OW 235
// if IsOK ( kov ) then
10406: LD_EXP 30
10410: PPUSH
10411: CALL_OW 302
10415: IFFALSE 10426
// RemoveUnit ( kov ) ;
10417: LD_EXP 30
10421: PPUSH
10422: CALL_OW 64
// if IsOK ( gny ) then
10426: LD_EXP 31
10430: PPUSH
10431: CALL_OW 302
10435: IFFALSE 10446
// RemoveUnit ( gny ) ;
10437: LD_EXP 31
10441: PPUSH
10442: CALL_OW 64
// RemoveUnit ( bur ) ;
10446: LD_EXP 29
10450: PPUSH
10451: CALL_OW 64
// prebarveni_druhe_baze ;
10455: CALL 5658 0 0
// ChangeSideFog ( You3 , You ) ;
10459: LD_EXP 3
10463: PPUSH
10464: LD_EXP 1
10468: PPUSH
10469: CALL_OW 343
// placni_unity ( vyber ) ;
10473: LD_VAR 0 2
10477: PPUSH
10478: CALL 3895 0 1
// CenterOnUnits ( vyber ) ;
10482: LD_VAR 0 2
10486: PPUSH
10487: CALL_OW 85
// RevealFogArea ( You , Wth ) ;
10491: LD_EXP 1
10495: PPUSH
10496: LD_INT 24
10498: PPUSH
10499: CALL_OW 332
// wait ( 0 0$2 ) ;
10503: LD_INT 70
10505: PPUSH
10506: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10510: LD_STRING M1
10512: PPUSH
10513: CALL_OW 337
// hint_bw = true ;
10517: LD_ADDR_LOC 22
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// Hint ( Oil ) ;
10525: LD_STRING Oil
10527: PPUSH
10528: CALL_OW 339
// Hint ( Upgrading ) ;
10532: LD_STRING Upgrading
10534: PPUSH
10535: CALL_OW 339
// InGameOff ;
10539: CALL_OW 9
// wait ( 1 1$00 ) ;
10543: LD_INT 2100
10545: PPUSH
10546: CALL_OW 67
// eng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) ;
10550: LD_ADDR_VAR 0 3
10554: PUSH
10555: LD_INT 22
10557: PUSH
10558: LD_INT 6
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: LD_INT 2
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PPUSH
10579: CALL_OW 69
10583: ST_TO_ADDR
// if not eng then
10584: LD_VAR 0 3
10588: NOT
10589: IFFALSE 10593
// exit ;
10591: GO 10642
// ComExitBuilding ( eng ) ;
10593: LD_VAR 0 3
10597: PPUSH
10598: CALL_OW 122
// AddComBuild ( eng , b_oil_power , 140 , 69 , 0 ) ;
10602: LD_VAR 0 3
10606: PPUSH
10607: LD_INT 26
10609: PPUSH
10610: LD_INT 140
10612: PPUSH
10613: LD_INT 69
10615: PPUSH
10616: LD_INT 0
10618: PPUSH
10619: CALL_OW 205
// wait ( 2 2$30 ) ;
10623: LD_INT 5250
10625: PPUSH
10626: CALL_OW 67
// ComEnterUnit ( eng , RU1_dep ) ;
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 120
// end ;
10642: LD_VAR 0 1
10646: RET
// every 0 0$1 trigger GetResourceVisibility ( 57 , 89 , You ) > 0 do
10647: LD_INT 57
10649: PPUSH
10650: LD_INT 89
10652: PPUSH
10653: LD_EXP 1
10657: PPUSH
10658: CALL_OW 440
10662: PUSH
10663: LD_INT 0
10665: GREATER
10666: IFFALSE 10770
10668: GO 10670
10670: DISABLE
// begin CenterOnXY ( 57 , 89 ) ;
10671: LD_INT 57
10673: PPUSH
10674: LD_INT 89
10676: PPUSH
10677: CALL_OW 84
// DialogueOn ;
10681: CALL_OW 6
// interface_hidden := true ;
10685: LD_ADDR_OWVAR 54
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// Say ( bur , D2a-Bur-1 ) ;
10693: LD_EXP 29
10697: PPUSH
10698: LD_STRING D2a-Bur-1
10700: PPUSH
10701: CALL_OW 88
// SayRadio ( kur , D2a-Kur-1 ) ;
10705: LD_EXP 27
10709: PPUSH
10710: LD_STRING D2a-Kur-1
10712: PPUSH
10713: CALL_OW 94
// RU_videl_oil = true ;
10717: LD_ADDR_EXP 40
10721: PUSH
10722: LD_INT 1
10724: ST_TO_ADDR
// interface_hidden := false ;
10725: LD_ADDR_OWVAR 54
10729: PUSH
10730: LD_INT 0
10732: ST_TO_ADDR
// Hint ( OilSpoted ) ;
10733: LD_STRING OilSpoted
10735: PPUSH
10736: CALL_OW 339
// DialogueOff ;
10740: CALL_OW 7
// wait ( 0 0$45 ) ;
10744: LD_INT 1575
10746: PPUSH
10747: CALL_OW 67
// ComConstruct ( Ru1_fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
10751: LD_INT 5
10753: PPUSH
10754: LD_INT 21
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: LD_INT 1
10762: PPUSH
10763: LD_INT 42
10765: PPUSH
10766: CALL_OW 125
// end ;
10770: END
// every 0 0$3 trigger RU_videl_oil and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ;
10771: LD_EXP 40
10775: PUSH
10776: LD_INT 22
10778: PUSH
10779: LD_EXP 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 30
10790: PUSH
10791: LD_INT 0
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: PUSH
10807: LD_INT 1
10809: GREATER
10810: AND
10811: IFFALSE 10975
10813: GO 10815
10815: DISABLE
10816: LD_INT 0
10818: PPUSH
10819: PPUSH
10820: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
10821: LD_ADDR_VAR 0 1
10825: PUSH
10826: LD_INT 22
10828: PUSH
10829: LD_EXP 1
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 30
10840: PUSH
10841: LD_INT 0
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 69
10856: ST_TO_ADDR
// pom1 = [ ] ;
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: EMPTY
10863: ST_TO_ADDR
// for i in pom do
10864: LD_ADDR_VAR 0 3
10868: PUSH
10869: LD_VAR 0 1
10873: PUSH
10874: FOR_IN
10875: IFFALSE 10916
// if GetDistUnitXY ( i , 56 , 88 ) < 30 then
10877: LD_VAR 0 3
10881: PPUSH
10882: LD_INT 56
10884: PPUSH
10885: LD_INT 88
10887: PPUSH
10888: CALL_OW 297
10892: PUSH
10893: LD_INT 30
10895: LESS
10896: IFFALSE 10914
// pom1 = pom1 ^ i ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: LD_VAR 0 3
10912: ADD
10913: ST_TO_ADDR
10914: GO 10874
10916: POP
10917: POP
// if pom1 > 0 then
10918: LD_VAR 0 2
10922: PUSH
10923: LD_INT 0
10925: GREATER
10926: IFFALSE 10974
// begin while IsConstructed ( pom1 [ 1 ] ) do
10928: LD_VAR 0 2
10932: PUSH
10933: LD_INT 1
10935: ARRAY
10936: PPUSH
10937: CALL_OW 304
10941: IFFALSE 10952
// wait ( 0 0$5 ) ;
10943: LD_INT 175
10945: PPUSH
10946: CALL_OW 67
10950: GO 10928
// ChangeMissionObjectives ( M2 ) ;
10952: LD_STRING M2
10954: PPUSH
10955: CALL_OW 337
// pojmenovani_kaganoviche ( pom1 [ 1 ] ) ;
10959: LD_VAR 0 2
10963: PUSH
10964: LD_INT 1
10966: ARRAY
10967: PPUSH
10968: CALL 4702 0 1
// end else
10972: GO 10975
// enable ;
10974: ENABLE
// end ;
10975: PPOPN 3
10977: END
// every 0 0$2 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) > 0 do var pom ;
10978: LD_INT 2
10980: PPUSH
10981: LD_INT 22
10983: PUSH
10984: LD_EXP 1
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 30
10995: PUSH
10996: LD_INT 3
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PPUSH
11007: CALL_OW 70
11011: PUSH
11012: LD_INT 0
11014: GREATER
11015: IFFALSE 11307
11017: GO 11019
11019: DISABLE
11020: LD_INT 0
11022: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) ;
11023: LD_ADDR_VAR 0 1
11027: PUSH
11028: LD_INT 2
11030: PPUSH
11031: LD_INT 22
11033: PUSH
11034: LD_EXP 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 3
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PPUSH
11057: CALL_OW 70
11061: ST_TO_ADDR
// pom = pom [ 1 ] ;
11062: LD_ADDR_VAR 0 1
11066: PUSH
11067: LD_VAR 0 1
11071: PUSH
11072: LD_INT 1
11074: ARRAY
11075: ST_TO_ADDR
// while IsConstructed ( pom ) <> 0 do
11076: LD_VAR 0 1
11080: PPUSH
11081: CALL_OW 304
11085: PUSH
11086: LD_INT 0
11088: NONEQUAL
11089: IFFALSE 11100
// wait ( 0 0$2 ) ;
11091: LD_INT 70
11093: PPUSH
11094: CALL_OW 67
11098: GO 11076
// CenterNowOnUnits ( pom ) ;
11100: LD_VAR 0 1
11104: PPUSH
11105: CALL_OW 87
// interface_hidden := true ;
11109: LD_ADDR_OWVAR 54
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) ;
11117: LD_ADDR_VAR 0 1
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_EXP 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 26
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 70
11155: ST_TO_ADDR
// if pom = 0 then
11156: LD_VAR 0 1
11160: PUSH
11161: LD_INT 0
11163: EQUAL
11164: IFFALSE 11281
// begin DialogueOn ;
11166: CALL_OW 6
// Say ( bur , D3aa-Bur-1 ) ;
11170: LD_EXP 29
11174: PPUSH
11175: LD_STRING D3aa-Bur-1
11177: PPUSH
11178: CALL_OW 88
// if IsOK ( schol ) then
11182: LD_EXP 33
11186: PPUSH
11187: CALL_OW 302
11191: IFFALSE 11219
// begin Say ( schol , D3aa-Sch-1 ) ;
11193: LD_EXP 33
11197: PPUSH
11198: LD_STRING D3aa-Sch-1
11200: PPUSH
11201: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11205: LD_EXP 29
11209: PPUSH
11210: LD_STRING D3aa-Bur-2
11212: PPUSH
11213: CALL_OW 88
// end else
11217: GO 11281
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
11219: LD_ADDR_VAR 0 1
11223: PUSH
11224: LD_INT 1
11226: PPUSH
11227: LD_INT 4
11229: PPUSH
11230: LD_EXP 29
11234: PUSH
11235: EMPTY
11236: LIST
11237: PPUSH
11238: CALL 11852 0 3
11242: ST_TO_ADDR
// if pom > 0 then
11243: LD_VAR 0 1
11247: PUSH
11248: LD_INT 0
11250: GREATER
11251: IFFALSE 11281
// begin Say ( pom [ 1 ] , D3aa-Sci1-1 ) ;
11253: LD_VAR 0 1
11257: PUSH
11258: LD_INT 1
11260: ARRAY
11261: PPUSH
11262: LD_STRING D3aa-Sci1-1
11264: PPUSH
11265: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11269: LD_EXP 29
11273: PPUSH
11274: LD_STRING D3aa-Bur-2
11276: PPUSH
11277: CALL_OW 88
// end ; end ; end ; ChangeMissionObjectives ( M3 ) ;
11281: LD_STRING M3
11283: PPUSH
11284: CALL_OW 337
// Hint ( Factory ) ;
11288: LD_STRING Factory
11290: PPUSH
11291: CALL_OW 339
// interface_hidden := false ;
11295: LD_ADDR_OWVAR 54
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// DialogueOff ;
11303: CALL_OW 7
// end ;
11307: PPOPN 1
11309: END
// every 0 0$5 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) > 0 do var pom ;
11310: LD_INT 2
11312: PPUSH
11313: LD_INT 22
11315: PUSH
11316: LD_EXP 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 4
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 70
11343: PUSH
11344: LD_INT 0
11346: GREATER
11347: IFFALSE 11429
11349: GO 11351
11351: DISABLE
11352: LD_INT 0
11354: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) ;
11355: LD_ADDR_VAR 0 1
11359: PUSH
11360: LD_INT 2
11362: PPUSH
11363: LD_INT 22
11365: PUSH
11366: LD_EXP 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 30
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 70
11393: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
11394: LD_VAR 0 1
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: PPUSH
11403: CALL_OW 304
11407: PUSH
11408: LD_INT 0
11410: NONEQUAL
11411: IFFALSE 11422
// wait ( 0 0$5 ) ;
11413: LD_INT 175
11415: PPUSH
11416: CALL_OW 67
11420: GO 11394
// Hint ( Armoury ) ;
11422: LD_STRING Armoury
11424: PPUSH
11425: CALL_OW 339
// end ;
11429: PPOPN 1
11431: END
// every 0 0$3 trigger hint_bw do var pom ;
11432: LD_LOC 22
11436: IFFALSE 11490
11438: GO 11440
11440: DISABLE
11441: LD_INT 0
11443: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_breastwork ] ] ) ;
11444: LD_ADDR_VAR 0 1
11448: PUSH
11449: LD_INT 2
11451: PPUSH
11452: LD_INT 22
11454: PUSH
11455: LD_EXP 1
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 30
11466: PUSH
11467: LD_INT 31
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 70
11482: ST_TO_ADDR
// Hint ( bunkers ) ;
11483: LD_STRING bunkers
11485: PPUSH
11486: CALL_OW 339
// end ;
11490: PPOPN 1
11492: END
// export function dialog_scholtze_enter ; begin
11493: LD_INT 0
11495: PPUSH
// CenterOnUnits ( schol2 ) ;
11496: LD_EXP 34
11500: PPUSH
11501: CALL_OW 85
// DialogueOn ;
11505: CALL_OW 6
// interface_hidden := true ;
11509: LD_ADDR_OWVAR 54
11513: PUSH
11514: LD_INT 1
11516: ST_TO_ADDR
// SayRadio ( schol2 , D4-Sch-1 ) ;
11517: LD_EXP 34
11521: PPUSH
11522: LD_STRING D4-Sch-1
11524: PPUSH
11525: CALL_OW 94
// Say ( bur , D4-Bur-1 ) ;
11529: LD_EXP 29
11533: PPUSH
11534: LD_STRING D4-Bur-1
11536: PPUSH
11537: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
11541: LD_STRING M4
11543: PPUSH
11544: CALL_OW 337
// interface_hidden := false ;
11548: LD_ADDR_OWVAR 54
11552: PUSH
11553: LD_INT 0
11555: ST_TO_ADDR
// DialogueOff ;
11556: CALL_OW 7
// end ;
11560: LD_VAR 0 1
11564: RET
// export function dialog_scholtze_nalezen ; begin
11565: LD_INT 0
11567: PPUSH
// CenterOnUnits ( schol2 ) ;
11568: LD_EXP 34
11572: PPUSH
11573: CALL_OW 85
// DialogueOn ;
11577: CALL_OW 6
// interface_hidden := true ;
11581: LD_ADDR_OWVAR 54
11585: PUSH
11586: LD_INT 1
11588: ST_TO_ADDR
// if IsOK ( schol2 ) then
11589: LD_EXP 34
11593: PPUSH
11594: CALL_OW 302
11598: IFFALSE 11643
// begin Say ( schol2 , D4a-Sch-1 ) ;
11600: LD_EXP 34
11604: PPUSH
11605: LD_STRING D4a-Sch-1
11607: PPUSH
11608: CALL_OW 88
// Say ( bur , D4a-Bur-1 ) ;
11612: LD_EXP 29
11616: PPUSH
11617: LD_STRING D4a-Bur-1
11619: PPUSH
11620: CALL_OW 88
// Say ( schol2 , D4a-Sch-2 ) ;
11624: LD_EXP 34
11628: PPUSH
11629: LD_STRING D4a-Sch-2
11631: PPUSH
11632: CALL_OW 88
// ChangeMissionObjectives ( MScholtzeOut ) ;
11636: LD_STRING MScholtzeOut
11638: PPUSH
11639: CALL_OW 337
// end ; interface_hidden := false ;
11643: LD_ADDR_OWVAR 54
11647: PUSH
11648: LD_INT 0
11650: ST_TO_ADDR
// DialogueOff ;
11651: CALL_OW 7
// end ;
11655: LD_VAR 0 1
11659: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) = 1 marked 201 do var pom ;
11660: CALL 27321 0 0
11664: PUSH
11665: LD_INT 22
11667: PUSH
11668: LD_EXP 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 30
11679: PUSH
11680: LD_INT 0
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 69
11695: PUSH
11696: LD_INT 1
11698: EQUAL
11699: AND
11700: IFFALSE 11849
11702: GO 11704
11704: DISABLE
11705: LD_INT 0
11707: PPUSH
// begin DialogueOn ;
11708: CALL_OW 6
// interface_hidden := true ;
11712: LD_ADDR_OWVAR 54
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
11720: LD_EXP 72
11724: PPUSH
11725: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
11729: LD_ADDR_VAR 0 1
11733: PUSH
11734: LD_INT 1
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: LD_EXP 29
11744: PUSH
11745: LD_EXP 31
11749: PUSH
11750: LD_EXP 30
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: LIST
11759: PPUSH
11760: CALL 11852 0 3
11764: ST_TO_ADDR
// if pom = 0 then
11765: LD_VAR 0 1
11769: PUSH
11770: LD_INT 0
11772: EQUAL
11773: IFFALSE 11799
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
11775: LD_ADDR_VAR 0 1
11779: PUSH
11780: LD_INT 1
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: LD_EXP 29
11790: PUSH
11791: EMPTY
11792: LIST
11793: PPUSH
11794: CALL 11852 0 3
11798: ST_TO_ADDR
// if pom > 0 then
11799: LD_VAR 0 1
11803: PUSH
11804: LD_INT 0
11806: GREATER
11807: IFFALSE 11837
// begin Say ( pom [ 1 ] , D3a-RSol1-1 ) ;
11809: LD_VAR 0 1
11813: PUSH
11814: LD_INT 1
11816: ARRAY
11817: PPUSH
11818: LD_STRING D3a-RSol1-1
11820: PPUSH
11821: CALL_OW 88
// Say ( bur , D3a-Bur-1 ) ;
11825: LD_EXP 29
11829: PPUSH
11830: LD_STRING D3a-Bur-1
11832: PPUSH
11833: CALL_OW 88
// end ; interface_hidden := false ;
11837: LD_ADDR_OWVAR 54
11841: PUSH
11842: LD_INT 0
11844: ST_TO_ADDR
// DialogueOff ;
11845: CALL_OW 7
// end ;
11849: PPOPN 1
11851: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11852: LD_INT 0
11854: PPUSH
11855: PPUSH
11856: PPUSH
11857: PPUSH
11858: PPUSH
11859: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
11860: LD_ADDR_VAR 0 6
11864: PUSH
11865: LD_INT 22
11867: PUSH
11868: LD_EXP 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 25
11879: PUSH
11880: LD_INT 4
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 26
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 69
11908: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
11909: LD_ADDR_VAR 0 7
11913: PUSH
11914: LD_INT 22
11916: PUSH
11917: LD_EXP 1
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 25
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 26
11938: PUSH
11939: LD_VAR 0 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: PPUSH
11953: CALL_OW 69
11957: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
11958: LD_ADDR_VAR 0 8
11962: PUSH
11963: LD_INT 22
11965: PUSH
11966: LD_EXP 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 25
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 26
11987: PUSH
11988: LD_VAR 0 1
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: PPUSH
12002: CALL_OW 69
12006: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12007: LD_ADDR_VAR 0 9
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_EXP 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 26
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: ST_TO_ADDR
// case povolani of class_scientistic :
12056: LD_VAR 0 2
12060: PUSH
12061: LD_INT 4
12063: DOUBLE
12064: EQUAL
12065: IFTRUE 12069
12067: GO 12082
12069: POP
// pom = pom1 ; class_mechanic :
12070: LD_ADDR_VAR 0 5
12074: PUSH
12075: LD_VAR 0 6
12079: ST_TO_ADDR
12080: GO 12146
12082: LD_INT 3
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12103
12090: POP
// pom = pom2 ; class_engineer :
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: LD_VAR 0 7
12100: ST_TO_ADDR
12101: GO 12146
12103: LD_INT 2
12105: DOUBLE
12106: EQUAL
12107: IFTRUE 12111
12109: GO 12124
12111: POP
// pom = pom3 ; class_soldier :
12112: LD_ADDR_VAR 0 5
12116: PUSH
12117: LD_VAR 0 8
12121: ST_TO_ADDR
12122: GO 12146
12124: LD_INT 1
12126: DOUBLE
12127: EQUAL
12128: IFTRUE 12132
12130: GO 12145
12132: POP
// pom = pom4 ; end ;
12133: LD_ADDR_VAR 0 5
12137: PUSH
12138: LD_VAR 0 9
12142: ST_TO_ADDR
12143: GO 12146
12145: POP
// if povolani <> class_scientistic then
12146: LD_VAR 0 2
12150: PUSH
12151: LD_INT 4
12153: NONEQUAL
12154: IFFALSE 12172
// pom = pom ^ pom1 ;
12156: LD_ADDR_VAR 0 5
12160: PUSH
12161: LD_VAR 0 5
12165: PUSH
12166: LD_VAR 0 6
12170: ADD
12171: ST_TO_ADDR
// if povolani <> class_mechanic then
12172: LD_VAR 0 2
12176: PUSH
12177: LD_INT 3
12179: NONEQUAL
12180: IFFALSE 12198
// pom = pom ^ pom2 ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 5
12191: PUSH
12192: LD_VAR 0 7
12196: ADD
12197: ST_TO_ADDR
// if povolani <> class_engineer then
12198: LD_VAR 0 2
12202: PUSH
12203: LD_INT 2
12205: NONEQUAL
12206: IFFALSE 12224
// pom = pom ^ pom3 ;
12208: LD_ADDR_VAR 0 5
12212: PUSH
12213: LD_VAR 0 5
12217: PUSH
12218: LD_VAR 0 8
12222: ADD
12223: ST_TO_ADDR
// if povolani <> class_soldier then
12224: LD_VAR 0 2
12228: PUSH
12229: LD_INT 1
12231: NONEQUAL
12232: IFFALSE 12250
// pom = pom ^ pom4 ;
12234: LD_ADDR_VAR 0 5
12238: PUSH
12239: LD_VAR 0 5
12243: PUSH
12244: LD_VAR 0 9
12248: ADD
12249: ST_TO_ADDR
// result := pom diff diffseznam ;
12250: LD_ADDR_VAR 0 4
12254: PUSH
12255: LD_VAR 0 5
12259: PUSH
12260: LD_VAR 0 3
12264: DIFF
12265: ST_TO_ADDR
// end ;
12266: LD_VAR 0 4
12270: RET
// function GetPeopleSide ( side , sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
12271: LD_INT 0
12273: PPUSH
12274: PPUSH
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12279: LD_ADDR_VAR 0 7
12283: PUSH
12284: LD_INT 22
12286: PUSH
12287: LD_VAR 0 1
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 25
12298: PUSH
12299: LD_INT 4
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 26
12308: PUSH
12309: LD_VAR 0 2
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12328: LD_ADDR_VAR 0 8
12332: PUSH
12333: LD_INT 22
12335: PUSH
12336: LD_VAR 0 1
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 3
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 26
12357: PUSH
12358: LD_VAR 0 2
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12377: LD_ADDR_VAR 0 9
12381: PUSH
12382: LD_INT 22
12384: PUSH
12385: LD_VAR 0 1
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 25
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 26
12406: PUSH
12407: LD_VAR 0 2
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 69
12425: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12426: LD_ADDR_VAR 0 10
12430: PUSH
12431: LD_INT 22
12433: PUSH
12434: LD_VAR 0 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 1
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: LD_VAR 0 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// case povolani of class_scientistic :
12475: LD_VAR 0 3
12479: PUSH
12480: LD_INT 4
12482: DOUBLE
12483: EQUAL
12484: IFTRUE 12488
12486: GO 12501
12488: POP
// pom = pom1 ; class_mechanic :
12489: LD_ADDR_VAR 0 6
12493: PUSH
12494: LD_VAR 0 7
12498: ST_TO_ADDR
12499: GO 12565
12501: LD_INT 3
12503: DOUBLE
12504: EQUAL
12505: IFTRUE 12509
12507: GO 12522
12509: POP
// pom = pom2 ; class_engineer :
12510: LD_ADDR_VAR 0 6
12514: PUSH
12515: LD_VAR 0 8
12519: ST_TO_ADDR
12520: GO 12565
12522: LD_INT 2
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12543
12530: POP
// pom = pom3 ; class_soldier :
12531: LD_ADDR_VAR 0 6
12535: PUSH
12536: LD_VAR 0 9
12540: ST_TO_ADDR
12541: GO 12565
12543: LD_INT 1
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12564
12551: POP
// pom = pom4 ; end ;
12552: LD_ADDR_VAR 0 6
12556: PUSH
12557: LD_VAR 0 10
12561: ST_TO_ADDR
12562: GO 12565
12564: POP
// if povolani <> class_scientistic then
12565: LD_VAR 0 3
12569: PUSH
12570: LD_INT 4
12572: NONEQUAL
12573: IFFALSE 12591
// pom = pom ^ pom1 ;
12575: LD_ADDR_VAR 0 6
12579: PUSH
12580: LD_VAR 0 6
12584: PUSH
12585: LD_VAR 0 7
12589: ADD
12590: ST_TO_ADDR
// if povolani <> class_mechanic then
12591: LD_VAR 0 3
12595: PUSH
12596: LD_INT 3
12598: NONEQUAL
12599: IFFALSE 12617
// pom = pom ^ pom2 ;
12601: LD_ADDR_VAR 0 6
12605: PUSH
12606: LD_VAR 0 6
12610: PUSH
12611: LD_VAR 0 8
12615: ADD
12616: ST_TO_ADDR
// if povolani <> class_engineer then
12617: LD_VAR 0 3
12621: PUSH
12622: LD_INT 2
12624: NONEQUAL
12625: IFFALSE 12643
// pom = pom ^ pom3 ;
12627: LD_ADDR_VAR 0 6
12631: PUSH
12632: LD_VAR 0 6
12636: PUSH
12637: LD_VAR 0 9
12641: ADD
12642: ST_TO_ADDR
// if povolani <> class_soldier then
12643: LD_VAR 0 3
12647: PUSH
12648: LD_INT 1
12650: NONEQUAL
12651: IFFALSE 12669
// pom = pom ^ pom4 ;
12653: LD_ADDR_VAR 0 6
12657: PUSH
12658: LD_VAR 0 6
12662: PUSH
12663: LD_VAR 0 10
12667: ADD
12668: ST_TO_ADDR
// result := pom diff diffseznam ;
12669: LD_ADDR_VAR 0 5
12673: PUSH
12674: LD_VAR 0 6
12678: PUSH
12679: LD_VAR 0 4
12683: DIFF
12684: ST_TO_ADDR
// end ;
12685: LD_VAR 0 5
12689: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom ;
12690: CALL 27321 0 0
12694: PUSH
12695: LD_INT 22
12697: PUSH
12698: LD_EXP 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 30
12709: PUSH
12710: LD_INT 0
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PPUSH
12721: CALL_OW 69
12725: PUSH
12726: LD_INT 1
12728: GREATER
12729: AND
12730: IFFALSE 12948
12732: GO 12734
12734: DISABLE
12735: LD_INT 0
12737: PPUSH
// begin disable ( 201 ) ;
12738: LD_INT 201
12740: DISABLE_MARKED
// DialogueOn ;
12741: CALL_OW 6
// interface_hidden := true ;
12745: LD_ADDR_OWVAR 54
12749: PUSH
12750: LD_INT 1
12752: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
12753: LD_EXP 72
12757: PPUSH
12758: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
12762: LD_ADDR_VAR 0 1
12766: PUSH
12767: LD_INT 1
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: LD_EXP 29
12777: PUSH
12778: LD_EXP 31
12782: PUSH
12783: LD_EXP 30
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL 11852 0 3
12797: ST_TO_ADDR
// if pom = 0 then
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 0
12805: EQUAL
12806: IFFALSE 12832
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
12808: LD_ADDR_VAR 0 1
12812: PUSH
12813: LD_INT 1
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: LD_EXP 29
12823: PUSH
12824: EMPTY
12825: LIST
12826: PPUSH
12827: CALL 11852 0 3
12831: ST_TO_ADDR
// if pom > 0 then
12832: LD_VAR 0 1
12836: PUSH
12837: LD_INT 0
12839: GREATER
12840: IFFALSE 12936
// begin Say ( pom [ 1 ] , D3b-RSol1-1 ) ;
12842: LD_VAR 0 1
12846: PUSH
12847: LD_INT 1
12849: ARRAY
12850: PPUSH
12851: LD_STRING D3b-RSol1-1
12853: PPUSH
12854: CALL_OW 88
// if IsOK ( gny ) then
12858: LD_EXP 31
12862: PPUSH
12863: CALL_OW 302
12867: IFFALSE 12895
// begin Say ( gny , D3b-Gny-1 ) ;
12869: LD_EXP 31
12873: PPUSH
12874: LD_STRING D3b-Gny-1
12876: PPUSH
12877: CALL_OW 88
// Say ( bur , D3b-Bur-1 ) ;
12881: LD_EXP 29
12885: PPUSH
12886: LD_STRING D3b-Bur-1
12888: PPUSH
12889: CALL_OW 88
// end else
12893: GO 12936
// if ISOK ( kov ) then
12895: LD_EXP 30
12899: PPUSH
12900: CALL_OW 302
12904: IFFALSE 12920
// Say ( kov , D3b-Kov-1 ) else
12906: LD_EXP 30
12910: PPUSH
12911: LD_STRING D3b-Kov-1
12913: PPUSH
12914: CALL_OW 88
12918: GO 12936
// Say ( pom [ 1 ] , D3b-RSol1-2 ) ;
12920: LD_VAR 0 1
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: PPUSH
12929: LD_STRING D3b-RSol1-2
12931: PPUSH
12932: CALL_OW 88
// end ; interface_hidden := false ;
12936: LD_ADDR_OWVAR 54
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// DialogueOff ;
12944: CALL_OW 7
// end ;
12948: PPOPN 1
12950: END
// export function dialog_otazka_poctu_aut ; var pom ; begin
12951: LD_INT 0
12953: PPUSH
12954: PPUSH
// DialogueOn ;
12955: CALL_OW 6
// interface_hidden := true ;
12959: LD_ADDR_OWVAR 54
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// Say ( kur , D5-Kur-1 ) ;
12967: LD_EXP 27
12971: PPUSH
12972: LD_STRING D5-Kur-1
12974: PPUSH
12975: CALL_OW 88
// pom = Query ( QVehicles ) ;
12979: LD_ADDR_VAR 0 2
12983: PUSH
12984: LD_STRING QVehicles
12986: PPUSH
12987: CALL_OW 97
12991: ST_TO_ADDR
// case pom of 1 :
12992: LD_VAR 0 2
12996: PUSH
12997: LD_INT 1
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13032
13005: POP
// begin Say ( bur , D6a-Bur-1 ) ;
13006: LD_EXP 29
13010: PPUSH
13011: LD_STRING D6a-Bur-1
13013: PPUSH
13014: CALL_OW 88
// Say ( kur , D6a-Kur-1 ) ;
13018: LD_EXP 27
13022: PPUSH
13023: LD_STRING D6a-Kur-1
13025: PPUSH
13026: CALL_OW 88
// end ; 2 :
13030: GO 13135
13032: LD_INT 2
13034: DOUBLE
13035: EQUAL
13036: IFTRUE 13040
13038: GO 13079
13040: POP
// begin Say ( bur , D6b-Bur-1 ) ;
13041: LD_EXP 29
13045: PPUSH
13046: LD_STRING D6b-Bur-1
13048: PPUSH
13049: CALL_OW 88
// Say ( kur , D6b-Kur-1 ) ;
13053: LD_EXP 27
13057: PPUSH
13058: LD_STRING D6b-Kur-1
13060: PPUSH
13061: CALL_OW 88
// Say ( bur , D6b-Bur-2 ) ;
13065: LD_EXP 29
13069: PPUSH
13070: LD_STRING D6b-Bur-2
13072: PPUSH
13073: CALL_OW 88
// end ; 3 :
13077: GO 13135
13079: LD_INT 3
13081: DOUBLE
13082: EQUAL
13083: IFTRUE 13087
13085: GO 13134
13087: POP
// begin Say ( bur , D6c-Bur-1 ) ;
13088: LD_EXP 29
13092: PPUSH
13093: LD_STRING D6c-Bur-1
13095: PPUSH
13096: CALL_OW 88
// Say ( kur , D6c-Kur-1 ) ;
13100: LD_EXP 27
13104: PPUSH
13105: LD_STRING D6c-Kur-1
13107: PPUSH
13108: CALL_OW 88
// Say ( bur , D6c-Bur-2 ) ;
13112: LD_EXP 29
13116: PPUSH
13117: LD_STRING D6c-Bur-2
13119: PPUSH
13120: CALL_OW 88
// KurinAddTime = 1 ;
13124: LD_ADDR_EXP 7
13128: PUSH
13129: LD_INT 1
13131: ST_TO_ADDR
// end ; end ;
13132: GO 13135
13134: POP
// interface_hidden := false ;
13135: LD_ADDR_OWVAR 54
13139: PUSH
13140: LD_INT 0
13142: ST_TO_ADDR
// DialogueOff ;
13143: CALL_OW 7
// result := pom ;
13147: LD_ADDR_VAR 0 1
13151: PUSH
13152: LD_VAR 0 2
13156: ST_TO_ADDR
// end ;
13157: LD_VAR 0 1
13161: RET
// export function hlaska_omicron ; begin
13162: LD_INT 0
13164: PPUSH
// DialogueOn ;
13165: CALL_OW 6
// interface_hidden := true ;
13169: LD_ADDR_OWVAR 54
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// Say ( kur , D6c-Kur-2 ) ;
13177: LD_EXP 27
13181: PPUSH
13182: LD_STRING D6c-Kur-2
13184: PPUSH
13185: CALL_OW 88
// interface_hidden := false ;
13189: LD_ADDR_OWVAR 54
13193: PUSH
13194: LD_INT 0
13196: ST_TO_ADDR
// DialogueOff ;
13197: CALL_OW 7
// end ;
13201: LD_VAR 0 1
13205: RET
// every 0 0$1 trigger stav_omikron = 3 do
13206: LD_EXP 39
13210: PUSH
13211: LD_INT 3
13213: EQUAL
13214: IFFALSE 13244
13216: GO 13218
13218: DISABLE
// begin CheckVehicles ;
13219: CALL 6151 0 0
// ChangeMissionObjectives ( M5 ) ;
13223: LD_STRING M5
13225: PPUSH
13226: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 1 ) ;
13230: LD_INT 32
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 424
// CheckVehicles ;
13240: CALL 6151 0 0
// end ;
13244: END
// export function dialog_pred_omicronem ; var pom ; begin
13245: LD_INT 0
13247: PPUSH
13248: PPUSH
// DialogueOn ;
13249: CALL_OW 6
// interface_hidden := true ;
13253: LD_ADDR_OWVAR 54
13257: PUSH
13258: LD_INT 1
13260: ST_TO_ADDR
// Say ( bur , D7-Bur-1 ) ;
13261: LD_EXP 29
13265: PPUSH
13266: LD_STRING D7-Bur-1
13268: PPUSH
13269: CALL_OW 88
// SayRadio ( kur , D7-Kur-1 ) ;
13273: LD_EXP 27
13277: PPUSH
13278: LD_STRING D7-Kur-1
13280: PPUSH
13281: CALL_OW 94
// setkani_om := true ;
13285: LD_ADDR_EXP 41
13289: PUSH
13290: LD_INT 1
13292: ST_TO_ADDR
// ChangeMissionObjectives ( M5a ) ;
13293: LD_STRING M5a
13295: PPUSH
13296: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 0 ) ;
13300: LD_INT 32
13302: PPUSH
13303: LD_INT 0
13305: PPUSH
13306: CALL_OW 424
// interface_hidden := false ;
13310: LD_ADDR_OWVAR 54
13314: PUSH
13315: LD_INT 0
13317: ST_TO_ADDR
// DialogueOff ;
13318: CALL_OW 7
// end ;
13322: LD_VAR 0 1
13326: RET
// every 0 0$5 trigger stav_omikron = 4 and omicron_half_destroyed do var pom ;
13327: LD_EXP 39
13331: PUSH
13332: LD_INT 4
13334: EQUAL
13335: PUSH
13336: CALL 27390 0 0
13340: AND
13341: IFFALSE 13608
13343: GO 13345
13345: DISABLE
13346: LD_INT 0
13348: PPUSH
// begin popov_ven ;
13349: CALL 5475 0 0
// DialogueOn ;
13353: CALL_OW 6
// interface_hidden := true ;
13357: LD_ADDR_OWVAR 54
13361: PUSH
13362: LD_INT 1
13364: ST_TO_ADDR
// pom = create_kecajici_amik ;
13365: LD_ADDR_VAR 0 1
13369: PUSH
13370: CALL 18652 0 0
13374: ST_TO_ADDR
// SayRadio ( pom , D8-Sol1-1 ) ;
13375: LD_VAR 0 1
13379: PPUSH
13380: LD_STRING D8-Sol1-1
13382: PPUSH
13383: CALL_OW 94
// if IsOK ( kov ) then
13387: LD_EXP 30
13391: PPUSH
13392: CALL_OW 302
13396: IFFALSE 13412
// Say ( kov , D8-Kov-1 ) else
13398: LD_EXP 30
13402: PPUSH
13403: LD_STRING D8-Kov-1
13405: PPUSH
13406: CALL_OW 88
13410: GO 13503
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13412: LD_ADDR_VAR 0 1
13416: PUSH
13417: LD_INT 1
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: LD_EXP 29
13427: PUSH
13428: LD_EXP 31
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL 11852 0 3
13441: ST_TO_ADDR
// if pom = 0 then
13442: LD_VAR 0 1
13446: PUSH
13447: LD_INT 0
13449: EQUAL
13450: IFFALSE 13487
// GetPeopleSide ( You2 , sex_male , class_soldier , [ kur , pop , bel ] ) ;
13452: LD_EXP 2
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: LD_INT 1
13462: PPUSH
13463: LD_EXP 27
13467: PUSH
13468: LD_EXP 28
13472: PUSH
13473: LD_EXP 32
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL 12271 0 4
// Say ( pom [ 1 ] , D8-RSol1-1 ) ;
13487: LD_VAR 0 1
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: PPUSH
13496: LD_STRING D8-RSol1-1
13498: PPUSH
13499: CALL_OW 88
// end ; if IsOK ( gny ) then
13503: LD_EXP 31
13507: PPUSH
13508: CALL_OW 302
13512: IFFALSE 13528
// Say ( gny , D8-Gny-1 ) else
13514: LD_EXP 31
13518: PPUSH
13519: LD_STRING D8-Gny-1
13521: PPUSH
13522: CALL_OW 88
13526: GO 13584
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13528: LD_ADDR_VAR 0 1
13532: PUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_INT 1
13538: PPUSH
13539: LD_EXP 29
13543: PUSH
13544: LD_EXP 31
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PPUSH
13553: CALL 11852 0 3
13557: ST_TO_ADDR
// if pom > 1 then
13558: LD_VAR 0 1
13562: PUSH
13563: LD_INT 1
13565: GREATER
13566: IFFALSE 13584
// Say ( pom [ 2 ] , D8-RSol2-1 ) ;
13568: LD_VAR 0 1
13572: PUSH
13573: LD_INT 2
13575: ARRAY
13576: PPUSH
13577: LD_STRING D8-RSol2-1
13579: PPUSH
13580: CALL_OW 88
// end ; interface_hidden := false ;
13584: LD_ADDR_OWVAR 54
13588: PUSH
13589: LD_INT 0
13591: ST_TO_ADDR
// DialogueOff ;
13592: CALL_OW 7
// stahnuti_amiku ;
13596: CALL 27553 0 0
// stav_omikron = 5 ;
13600: LD_ADDR_EXP 39
13604: PUSH
13605: LD_INT 5
13607: ST_TO_ADDR
// end ;
13608: PPOPN 1
13610: END
// every 0 0$5 trigger stav_omikron = 5 do var gri ;
13611: LD_EXP 39
13615: PUSH
13616: LD_INT 5
13618: EQUAL
13619: IFFALSE 13780
13621: GO 13623
13623: DISABLE
13624: LD_INT 0
13626: PPUSH
// begin setkani_om = false ;
13627: LD_ADDR_EXP 41
13631: PUSH
13632: LD_INT 0
13634: ST_TO_ADDR
// gri = create_grishko ;
13635: LD_ADDR_VAR 0 1
13639: PUSH
13640: CALL 18711 0 0
13644: ST_TO_ADDR
// CenterOnUnits ( gri ) ;
13645: LD_VAR 0 1
13649: PPUSH
13650: CALL_OW 85
// DialogueOn ;
13654: CALL_OW 6
// interface_hidden := true ;
13658: LD_ADDR_OWVAR 54
13662: PUSH
13663: LD_INT 1
13665: ST_TO_ADDR
// SayRadio ( gri , D9-Gri-1 ) ;
13666: LD_VAR 0 1
13670: PPUSH
13671: LD_STRING D9-Gri-1
13673: PPUSH
13674: CALL_OW 94
// SayRadio ( kur , D9-Kur-1 ) ;
13678: LD_EXP 27
13682: PPUSH
13683: LD_STRING D9-Kur-1
13685: PPUSH
13686: CALL_OW 94
// wait ( 0 0$2 ) ;
13690: LD_INT 70
13692: PPUSH
13693: CALL_OW 67
// SayRadio ( gri , D9-Gri-2 ) ;
13697: LD_VAR 0 1
13701: PPUSH
13702: LD_STRING D9-Gri-2
13704: PPUSH
13705: CALL_OW 94
// SayRadio ( kur , D9-Kur-2 ) ;
13709: LD_EXP 27
13713: PPUSH
13714: LD_STRING D9-Kur-2
13716: PPUSH
13717: CALL_OW 94
// SayRadio ( gri , D9-Gri-3 ) ;
13721: LD_VAR 0 1
13725: PPUSH
13726: LD_STRING D9-Gri-3
13728: PPUSH
13729: CALL_OW 94
// SayRadio ( kur , D9-Kur-3 ) ;
13733: LD_EXP 27
13737: PPUSH
13738: LD_STRING D9-Kur-3
13740: PPUSH
13741: CALL_OW 94
// interface_hidden := false ;
13745: LD_ADDR_OWVAR 54
13749: PUSH
13750: LD_INT 0
13752: ST_TO_ADDR
// DialogueOff ;
13753: CALL_OW 7
// wait ( 0 0$20 ) ;
13757: LD_INT 700
13759: PPUSH
13760: CALL_OW 67
// stav_omikron = 6 ;
13764: LD_ADDR_EXP 39
13768: PUSH
13769: LD_INT 6
13771: ST_TO_ADDR
// zastaveni_rusaku ;
13772: CALL 9967 0 0
// utok_arabu ;
13776: CALL 28394 0 0
// end ;
13780: PPOPN 1
13782: END
// export function kecy_behem_utoku_arabu ; var i ; begin
13783: LD_INT 0
13785: PPUSH
13786: PPUSH
// stav_omikron = 7 ;
13787: LD_ADDR_EXP 39
13791: PUSH
13792: LD_INT 7
13794: ST_TO_ADDR
// SayRadio ( kur , D9a-Kur-1 ) ;
13795: LD_EXP 27
13799: PPUSH
13800: LD_STRING D9a-Kur-1
13802: PPUSH
13803: CALL_OW 94
// Say ( bur , D9a-Bur-1 ) ;
13807: LD_EXP 29
13811: PPUSH
13812: LD_STRING D9a-Bur-1
13814: PPUSH
13815: CALL_OW 88
// SayRadio ( kur , D9a-Kur-2 ) ;
13819: LD_EXP 27
13823: PPUSH
13824: LD_STRING D9a-Kur-2
13826: PPUSH
13827: CALL_OW 94
// posilani_arabskych_hlidek = true ;
13831: LD_ADDR_EXP 74
13835: PUSH
13836: LD_INT 1
13838: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
13839: LD_ADDR_VAR 0 2
13843: PUSH
13844: LD_INT 22
13846: PUSH
13847: LD_INT 3
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 3
13856: PUSH
13857: LD_INT 21
13859: PUSH
13860: LD_INT 3
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: PUSH
13880: FOR_IN
13881: IFFALSE 13900
// ComMoveXY ( i , 59 , 12 ) ;
13883: LD_VAR 0 2
13887: PPUSH
13888: LD_INT 59
13890: PPUSH
13891: LD_INT 12
13893: PPUSH
13894: CALL_OW 111
13898: GO 13880
13900: POP
13901: POP
// manage_ruske_computery_zpet ;
13902: CALL 7196 0 0
// end ;
13906: LD_VAR 0 1
13910: RET
// every 0 0$1 trigger stav_omikron = 8 and get_lidi_popov_area > 0 do var pom , pom1 ;
13911: LD_EXP 39
13915: PUSH
13916: LD_INT 8
13918: EQUAL
13919: PUSH
13920: CALL 8583 0 0
13924: PUSH
13925: LD_INT 0
13927: GREATER
13928: AND
13929: IFFALSE 14187
13931: GO 13933
13933: DISABLE
13934: LD_INT 0
13936: PPUSH
13937: PPUSH
// begin pom = get_lidi_popov_area ;
13938: LD_ADDR_VAR 0 1
13942: PUSH
13943: CALL 8583 0 0
13947: ST_TO_ADDR
// pom = pom [ 1 ] ;
13948: LD_ADDR_VAR 0 1
13952: PUSH
13953: LD_VAR 0 1
13957: PUSH
13958: LD_INT 1
13960: ARRAY
13961: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13962: LD_ADDR_VAR 0 2
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_EXP 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 2
13981: PUSH
13982: LD_INT 21
13984: PUSH
13985: LD_INT 1
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 21
13994: PUSH
13995: LD_INT 2
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: ST_TO_ADDR
// ComStop ( pom1 ) ;
14016: LD_VAR 0 2
14020: PPUSH
14021: CALL_OW 141
// ArDontAttackPlayer ( true ) ;
14025: LD_INT 1
14027: PPUSH
14028: CALL 29368 0 1
// InGameOn ;
14032: CALL_OW 8
// CenterOnUnits ( [ pop ] ) ;
14036: LD_EXP 28
14040: PUSH
14041: EMPTY
14042: LIST
14043: PPUSH
14044: CALL_OW 85
// ComMoveUnit ( pop , pom ) ;
14048: LD_EXP 28
14052: PPUSH
14053: LD_VAR 0 1
14057: PPUSH
14058: CALL_OW 112
// while GetDistUnits ( pop , pom ) > 4 do
14062: LD_EXP 28
14066: PPUSH
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 296
14076: PUSH
14077: LD_INT 4
14079: GREATER
14080: IFFALSE 14091
// wait ( 0 0$1 ) ;
14082: LD_INT 35
14084: PPUSH
14085: CALL_OW 67
14089: GO 14062
// ComTurnUnit ( pom , pop ) ;
14091: LD_VAR 0 1
14095: PPUSH
14096: LD_EXP 28
14100: PPUSH
14101: CALL_OW 119
// CenterOnUnits ( [ pop ] ) ;
14105: LD_EXP 28
14109: PUSH
14110: EMPTY
14111: LIST
14112: PPUSH
14113: CALL_OW 85
// InGameOff ;
14117: CALL_OW 9
// DialogueOn ;
14121: CALL_OW 6
// interface_hidden := true ;
14125: LD_ADDR_OWVAR 54
14129: PUSH
14130: LD_INT 1
14132: ST_TO_ADDR
// if GetDistUnits ( pop , bur ) <= 10 then
14133: LD_EXP 28
14137: PPUSH
14138: LD_EXP 29
14142: PPUSH
14143: CALL_OW 296
14147: PUSH
14148: LD_INT 10
14150: LESSEQUAL
14151: IFFALSE 14159
// dialog_popov_s_burlakem else
14153: CALL 14190 0 0
14157: GO 14163
// dialog_popov_bez_burlaka ;
14159: CALL 14318 0 0
// stav_omikron = 9 ;
14163: LD_ADDR_EXP 39
14167: PUSH
14168: LD_INT 9
14170: ST_TO_ADDR
// interface_hidden := false ;
14171: LD_ADDR_OWVAR 54
14175: PUSH
14176: LD_INT 0
14178: ST_TO_ADDR
// DialogueOff ;
14179: CALL_OW 7
// totalni_ukonceni_mise_v_ingame_videu ;
14183: CALL 8771 0 0
// end ;
14187: PPOPN 2
14189: END
// function dialog_popov_s_burlakem ; begin
14190: LD_INT 0
14192: PPUSH
// Say ( bur , D10a-Bur-1 ) ;
14193: LD_EXP 29
14197: PPUSH
14198: LD_STRING D10a-Bur-1
14200: PPUSH
14201: CALL_OW 88
// Say ( pop , D10a-Pop-1 ) ;
14205: LD_EXP 28
14209: PPUSH
14210: LD_STRING D10a-Pop-1
14212: PPUSH
14213: CALL_OW 88
// Say ( bur , D10a-Bur-2 ) ;
14217: LD_EXP 29
14221: PPUSH
14222: LD_STRING D10a-Bur-2
14224: PPUSH
14225: CALL_OW 88
// Say ( pop , D10a-Pop-2 ) ;
14229: LD_EXP 28
14233: PPUSH
14234: LD_STRING D10a-Pop-2
14236: PPUSH
14237: CALL_OW 88
// Say ( bur , D10a-Bur-3 ) ;
14241: LD_EXP 29
14245: PPUSH
14246: LD_STRING D10a-Bur-3
14248: PPUSH
14249: CALL_OW 88
// Say ( pop , D10a-Pop-3 ) ;
14253: LD_EXP 28
14257: PPUSH
14258: LD_STRING D10a-Pop-3
14260: PPUSH
14261: CALL_OW 88
// Say ( bur , D10a-Bur-4 ) ;
14265: LD_EXP 29
14269: PPUSH
14270: LD_STRING D10a-Bur-4
14272: PPUSH
14273: CALL_OW 88
// Say ( pop , D10a-Pop-4 ) ;
14277: LD_EXP 28
14281: PPUSH
14282: LD_STRING D10a-Pop-4
14284: PPUSH
14285: CALL_OW 88
// Say ( bur , D10a-Bur-5 ) ;
14289: LD_EXP 29
14293: PPUSH
14294: LD_STRING D10a-Bur-5
14296: PPUSH
14297: CALL_OW 88
// Say ( pop , D10a-Pop-5 ) ;
14301: LD_EXP 28
14305: PPUSH
14306: LD_STRING D10a-Pop-5
14308: PPUSH
14309: CALL_OW 88
// end ;
14313: LD_VAR 0 1
14317: RET
// function dialog_popov_bez_burlaka ; var pom ; begin
14318: LD_INT 0
14320: PPUSH
14321: PPUSH
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14322: LD_ADDR_VAR 0 2
14326: PUSH
14327: LD_INT 15
14329: PPUSH
14330: LD_INT 22
14332: PUSH
14333: LD_EXP 1
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 21
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 26
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 70
14371: ST_TO_ADDR
// if pom = 0 then
14372: LD_VAR 0 2
14376: PUSH
14377: LD_INT 0
14379: EQUAL
14380: IFFALSE 14384
// exit ;
14382: GO 14504
// Say ( pom , D10b-RSol1-1 ) ;
14384: LD_VAR 0 2
14388: PPUSH
14389: LD_STRING D10b-RSol1-1
14391: PPUSH
14392: CALL_OW 88
// Say ( pop , D10b-Pop-1 ) ;
14396: LD_EXP 28
14400: PPUSH
14401: LD_STRING D10b-Pop-1
14403: PPUSH
14404: CALL_OW 88
// Say ( pom , D10b-RSol1-2 ) ;
14408: LD_VAR 0 2
14412: PPUSH
14413: LD_STRING D10b-RSol1-2
14415: PPUSH
14416: CALL_OW 88
// SayRadio ( pop , D10b-Pop-2 ) ;
14420: LD_EXP 28
14424: PPUSH
14425: LD_STRING D10b-Pop-2
14427: PPUSH
14428: CALL_OW 94
// Say ( bur , D10b-Bur-2 ) ;
14432: LD_EXP 29
14436: PPUSH
14437: LD_STRING D10b-Bur-2
14439: PPUSH
14440: CALL_OW 88
// SayRadio ( pop , D10b-Pop-3 ) ;
14444: LD_EXP 28
14448: PPUSH
14449: LD_STRING D10b-Pop-3
14451: PPUSH
14452: CALL_OW 94
// Say ( bur , D10b-Bur-3 ) ;
14456: LD_EXP 29
14460: PPUSH
14461: LD_STRING D10b-Bur-3
14463: PPUSH
14464: CALL_OW 88
// SayRadio ( pop , D10b-Pop-4 ) ;
14468: LD_EXP 28
14472: PPUSH
14473: LD_STRING D10b-Pop-4
14475: PPUSH
14476: CALL_OW 94
// Say ( bur , D10b-Bur-4 ) ;
14480: LD_EXP 29
14484: PPUSH
14485: LD_STRING D10b-Bur-4
14487: PPUSH
14488: CALL_OW 88
// SayRadio ( pop , D10b-Pop-5 ) ;
14492: LD_EXP 28
14496: PPUSH
14497: LD_STRING D10b-Pop-5
14499: PPUSH
14500: CALL_OW 94
// end ;
14504: LD_VAR 0 1
14508: RET
// every 0 0$1 trigger stav_omikron in [ 0 , 1 , 2 , 3 ] do var pom , i , upoz , pom1 , pom2 , pom3 ; var dr_pom1 , dr_pom2 , dr_pom3 ; var dr_pom ;
14509: LD_EXP 39
14513: PUSH
14514: LD_INT 0
14516: PUSH
14517: LD_INT 1
14519: PUSH
14520: LD_INT 2
14522: PUSH
14523: LD_INT 3
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: IN
14532: IFFALSE 15324
14534: GO 14536
14536: DISABLE
14537: LD_INT 0
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
14543: PPUSH
14544: PPUSH
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
// begin upoz = false ;
14549: LD_ADDR_VAR 0 3
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , f_not , [ f_type , unit_building ] ] ) ;
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: LD_INT 17
14564: PPUSH
14565: LD_INT 22
14567: PUSH
14568: LD_EXP 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 3
14579: PUSH
14580: LD_INT 21
14582: PUSH
14583: LD_INT 3
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: LIST
14594: PPUSH
14595: CALL_OW 70
14599: ST_TO_ADDR
// dr_pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
14600: LD_ADDR_VAR 0 10
14604: PUSH
14605: LD_INT 17
14607: PPUSH
14608: LD_INT 22
14610: PUSH
14611: LD_EXP 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 21
14622: PUSH
14623: LD_INT 3
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 70
14638: ST_TO_ADDR
// for i in dr_pom do
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: LD_VAR 0 10
14648: PUSH
14649: FOR_IN
14650: IFFALSE 14675
// pom = pom union UnitsInside ( i ) ;
14652: LD_ADDR_VAR 0 1
14656: PUSH
14657: LD_VAR 0 1
14661: PUSH
14662: LD_VAR 0 2
14666: PPUSH
14667: CALL_OW 313
14671: UNION
14672: ST_TO_ADDR
14673: GO 14649
14675: POP
14676: POP
// if pom then
14677: LD_VAR 0 1
14681: IFFALSE 14730
// for i in pom do
14683: LD_ADDR_VAR 0 2
14687: PUSH
14688: LD_VAR 0 1
14692: PUSH
14693: FOR_IN
14694: IFFALSE 14728
// if Getside ( Attacks ( i ) ) = Amici then
14696: LD_VAR 0 2
14700: PPUSH
14701: CALL_OW 320
14705: PPUSH
14706: CALL_OW 255
14710: PUSH
14711: LD_EXP 4
14715: EQUAL
14716: IFFALSE 14726
// upoz = true ;
14718: LD_ADDR_VAR 0 3
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
14726: GO 14693
14728: POP
14729: POP
// if upoz then
14730: LD_VAR 0 3
14734: IFFALSE 15323
// begin DialogueOn ;
14736: CALL_OW 6
// interface_hidden := true ;
14740: LD_ADDR_OWVAR 54
14744: PUSH
14745: LD_INT 1
14747: ST_TO_ADDR
// if IsOK ( gny ) then
14748: LD_EXP 31
14752: PPUSH
14753: CALL_OW 302
14757: IFFALSE 14785
// begin Say ( gny , D11-Gny-1 ) ;
14759: LD_EXP 31
14763: PPUSH
14764: LD_STRING D11-Gny-1
14766: PPUSH
14767: CALL_OW 88
// Say ( bur , D11-Bur-1 ) ;
14771: LD_EXP 29
14775: PPUSH
14776: LD_STRING D11-Bur-1
14778: PPUSH
14779: CALL_OW 88
// end else
14783: GO 14797
// SayRadio ( kur , D11-Kur-1 ) ;
14785: LD_EXP 27
14789: PPUSH
14790: LD_STRING D11-Kur-1
14792: PPUSH
14793: CALL_OW 94
// interface_hidden := true ;
14797: LD_ADDR_OWVAR 54
14801: PUSH
14802: LD_INT 1
14804: ST_TO_ADDR
// DialogueOff ;
14805: CALL_OW 7
// InGameOn ;
14809: CALL_OW 8
// repeat pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14813: LD_ADDR_VAR 0 4
14817: PUSH
14818: LD_INT 18
14820: PPUSH
14821: LD_INT 22
14823: PUSH
14824: LD_EXP 1
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 3
14835: PUSH
14836: LD_INT 21
14838: PUSH
14839: LD_INT 3
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: PPUSH
14851: CALL_OW 70
14855: ST_TO_ADDR
// dr_pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14856: LD_ADDR_VAR 0 7
14860: PUSH
14861: LD_INT 18
14863: PPUSH
14864: LD_INT 22
14866: PUSH
14867: LD_EXP 1
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 21
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 70
14894: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14895: LD_ADDR_VAR 0 5
14899: PUSH
14900: LD_INT 19
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_EXP 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 3
14917: PUSH
14918: LD_INT 21
14920: PUSH
14921: LD_INT 3
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: PPUSH
14933: CALL_OW 70
14937: ST_TO_ADDR
// dr_pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14938: LD_ADDR_VAR 0 8
14942: PUSH
14943: LD_INT 19
14945: PPUSH
14946: LD_INT 22
14948: PUSH
14949: LD_EXP 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 70
14976: ST_TO_ADDR
// pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14977: LD_ADDR_VAR 0 6
14981: PUSH
14982: LD_INT 37
14984: PPUSH
14985: LD_INT 22
14987: PUSH
14988: LD_EXP 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 3
14999: PUSH
15000: LD_INT 21
15002: PUSH
15003: LD_INT 3
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 70
15019: ST_TO_ADDR
// dr_pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15020: LD_ADDR_VAR 0 9
15024: PUSH
15025: LD_INT 37
15027: PPUSH
15028: LD_INT 22
15030: PUSH
15031: LD_EXP 1
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 3
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 70
15058: ST_TO_ADDR
// ComMoveToArea ( pom1 , om_ven_3 ) ;
15059: LD_VAR 0 4
15063: PPUSH
15064: LD_INT 31
15066: PPUSH
15067: CALL_OW 113
// for i in dr_pom1 do
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: LD_VAR 0 7
15080: PUSH
15081: FOR_IN
15082: IFFALSE 15122
// begin dr_pom = UnitsInside ( i ) ;
15084: LD_ADDR_VAR 0 10
15088: PUSH
15089: LD_VAR 0 2
15093: PPUSH
15094: CALL_OW 313
15098: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15099: LD_VAR 0 10
15103: PPUSH
15104: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_1 ) ;
15108: LD_VAR 0 10
15112: PPUSH
15113: LD_INT 29
15115: PPUSH
15116: CALL_OW 173
// end ;
15120: GO 15081
15122: POP
15123: POP
// ComMoveToArea ( pom2 , om_zone ) ;
15124: LD_VAR 0 5
15128: PPUSH
15129: LD_INT 8
15131: PPUSH
15132: CALL_OW 113
// for i in dr_pom2 do
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_VAR 0 8
15145: PUSH
15146: FOR_IN
15147: IFFALSE 15187
// begin dr_pom = UnitsInside ( i ) ;
15149: LD_ADDR_VAR 0 10
15153: PUSH
15154: LD_VAR 0 2
15158: PPUSH
15159: CALL_OW 313
15163: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15164: LD_VAR 0 10
15168: PPUSH
15169: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_2 ) ;
15173: LD_VAR 0 10
15177: PPUSH
15178: LD_INT 30
15180: PPUSH
15181: CALL_OW 173
// end ;
15185: GO 15146
15187: POP
15188: POP
// ComMoveToArea ( pom3 , om_zone ) ;
15189: LD_VAR 0 6
15193: PPUSH
15194: LD_INT 8
15196: PPUSH
15197: CALL_OW 113
// for i in dr_pom3 do
15201: LD_ADDR_VAR 0 2
15205: PUSH
15206: LD_VAR 0 9
15210: PUSH
15211: FOR_IN
15212: IFFALSE 15252
// begin dr_pom = UnitsInside ( i ) ;
15214: LD_ADDR_VAR 0 10
15218: PUSH
15219: LD_VAR 0 2
15223: PPUSH
15224: CALL_OW 313
15228: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15229: LD_VAR 0 10
15233: PPUSH
15234: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_3 ) ;
15238: LD_VAR 0 10
15242: PPUSH
15243: LD_INT 31
15245: PPUSH
15246: CALL_OW 173
// end ;
15250: GO 15211
15252: POP
15253: POP
// wait ( 0 0$3 ) ;
15254: LD_INT 105
15256: PPUSH
15257: CALL_OW 67
// until not ( pom1 or pom3 or pom3 ) ;
15261: LD_VAR 0 4
15265: PUSH
15266: LD_VAR 0 6
15270: OR
15271: PUSH
15272: LD_VAR 0 6
15276: OR
15277: NOT
15278: IFFALSE 14813
// wait ( 0 0$4 ) ;
15280: LD_INT 140
15282: PPUSH
15283: CALL_OW 67
// if dr_pom3 then
15287: LD_VAR 0 9
15291: IFFALSE 15319
// for i in dr_pom3 do
15293: LD_ADDR_VAR 0 2
15297: PUSH
15298: LD_VAR 0 9
15302: PUSH
15303: FOR_IN
15304: IFFALSE 15317
// KillUnit ( i ) ;
15306: LD_VAR 0 2
15310: PPUSH
15311: CALL_OW 66
15315: GO 15303
15317: POP
15318: POP
// InGameOff ;
15319: CALL_OW 9
// end ; enable ;
15323: ENABLE
// end ;
15324: PPOPN 10
15326: END
// every 1 trigger stav_omikron in [ 4 , 5 , 6 ] do var pom , pom1 , pom2 , i , AreaNotCleared , firstDialog ;
15327: LD_EXP 39
15331: PUSH
15332: LD_INT 4
15334: PUSH
15335: LD_INT 5
15337: PUSH
15338: LD_INT 6
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: IN
15346: IFFALSE 15506
15348: GO 15350
15350: DISABLE
15351: LD_INT 0
15353: PPUSH
15354: PPUSH
15355: PPUSH
15356: PPUSH
15357: PPUSH
15358: PPUSH
// begin enable ;
15359: ENABLE
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , 3 ] ] ) ;
15360: LD_ADDR_VAR 0 1
15364: PUSH
15365: LD_INT 20
15367: PPUSH
15368: LD_INT 21
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 22
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PPUSH
15392: CALL_OW 70
15396: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) ;
15397: LD_ADDR_VAR 0 3
15401: PUSH
15402: LD_INT 20
15404: PPUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 22
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PPUSH
15429: CALL_OW 70
15433: ST_TO_ADDR
// if pom or pom2 then
15434: LD_VAR 0 1
15438: PUSH
15439: LD_VAR 0 3
15443: OR
15444: IFFALSE 15506
// begin ComMoveXY ( pom , 62 , 16 ) ;
15446: LD_VAR 0 1
15450: PPUSH
15451: LD_INT 62
15453: PPUSH
15454: LD_INT 16
15456: PPUSH
15457: CALL_OW 111
// ComMoveXY ( pom2 , 62 , 16 ) ;
15461: LD_VAR 0 3
15465: PPUSH
15466: LD_INT 62
15468: PPUSH
15469: LD_INT 16
15471: PPUSH
15472: CALL_OW 111
// if KurinDialog = 0 then
15476: LD_EXP 6
15480: PUSH
15481: LD_INT 0
15483: EQUAL
15484: IFFALSE 15506
// begin KurinDialog = 1 ;
15486: LD_ADDR_EXP 6
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// Say ( kur , D12-Kur-1 ) ;
15494: LD_EXP 27
15498: PPUSH
15499: LD_STRING D12-Kur-1
15501: PPUSH
15502: CALL_OW 88
// end ; end ; end ;
15506: PPOPN 6
15508: END
// export function hlaska_lhani ; begin
15509: LD_INT 0
15511: PPUSH
// DialogueOn ;
15512: CALL_OW 6
// interface_hidden := true ;
15516: LD_ADDR_OWVAR 54
15520: PUSH
15521: LD_INT 1
15523: ST_TO_ADDR
// Say ( kur , D6d-Kur-1 ) ;
15524: LD_EXP 27
15528: PPUSH
15529: LD_STRING D6d-Kur-1
15531: PPUSH
15532: CALL_OW 88
// interface_hidden := false ;
15536: LD_ADDR_OWVAR 54
15540: PUSH
15541: LD_INT 0
15543: ST_TO_ADDR
// DialogueOff ;
15544: CALL_OW 7
// end ;
15548: LD_VAR 0 1
15552: RET
// export function dialog_upoz ; begin
15553: LD_INT 0
15555: PPUSH
// DialogueOn ;
15556: CALL_OW 6
// interface_hidden := true ;
15560: LD_ADDR_OWVAR 54
15564: PUSH
15565: LD_INT 1
15567: ST_TO_ADDR
// SayRadio ( kur , D7a-Kur-1 ) ;
15568: LD_EXP 27
15572: PPUSH
15573: LD_STRING D7a-Kur-1
15575: PPUSH
15576: CALL_OW 94
// interface_hidden := false ;
15580: LD_ADDR_OWVAR 54
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// DialogueOff ;
15588: CALL_OW 7
// end ;
15592: LD_VAR 0 1
15596: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
15597: GO 15599
15599: DISABLE
15600: LD_INT 0
15602: PPUSH
15603: PPUSH
15604: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_INT 22
15612: PUSH
15613: LD_EXP 1
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 2
15624: PUSH
15625: LD_INT 21
15627: PUSH
15628: LD_INT 1
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 21
15637: PUSH
15638: LD_INT 2
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: ST_TO_ADDR
// for i in Ru_Units do
15659: LD_ADDR_VAR 0 2
15663: PUSH
15664: LD_VAR 0 3
15668: PUSH
15669: FOR_IN
15670: IFFALSE 15777
// begin pom = Attacks ( i ) ;
15672: LD_ADDR_VAR 0 1
15676: PUSH
15677: LD_VAR 0 2
15681: PPUSH
15682: CALL_OW 320
15686: ST_TO_ADDR
// if pom <> 0 then
15687: LD_VAR 0 1
15691: PUSH
15692: LD_INT 0
15694: NONEQUAL
15695: IFFALSE 15737
// if Getside ( pom ) in [ You2 , You3 ] then
15697: LD_VAR 0 1
15701: PPUSH
15702: CALL_OW 255
15706: PUSH
15707: LD_EXP 2
15711: PUSH
15712: LD_EXP 3
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: IN
15721: IFFALSE 15737
// konstanta_utoceni = konstanta_utoceni + 1 ;
15723: LD_ADDR_EXP 49
15727: PUSH
15728: LD_EXP 49
15732: PUSH
15733: LD_INT 1
15735: PLUS
15736: ST_TO_ADDR
// if pom = pop or pom = kur then
15737: LD_VAR 0 1
15741: PUSH
15742: LD_EXP 28
15746: EQUAL
15747: PUSH
15748: LD_VAR 0 1
15752: PUSH
15753: LD_EXP 27
15757: EQUAL
15758: OR
15759: IFFALSE 15775
// konstanta_utoceni = konstanta_utoceni + 10 ;
15761: LD_ADDR_EXP 49
15765: PUSH
15766: LD_EXP 49
15770: PUSH
15771: LD_INT 10
15773: PLUS
15774: ST_TO_ADDR
// end ;
15775: GO 15669
15777: POP
15778: POP
// if konstanta_utoceni < 10 then
15779: LD_EXP 49
15783: PUSH
15784: LD_INT 10
15786: LESS
15787: IFFALSE 15790
// enable ;
15789: ENABLE
// end ;
15790: PPOPN 3
15792: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
15793: LD_EXP 49
15797: PUSH
15798: LD_INT 10
15800: GREATEREQUAL
15801: IFFALSE 15810
15803: GO 15805
15805: DISABLE
// begin konec_mise_utok ;
15806: CALL 1444 0 0
// end ;
15810: END
// export function dialog_scholtze_umrel ; var i , pom , pom1 ; begin
15811: LD_INT 0
15813: PPUSH
15814: PPUSH
15815: PPUSH
15816: PPUSH
// pom = 0 ;
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_INT 0
15824: ST_TO_ADDR
// DialogueOn ;
15825: CALL_OW 6
// interface_hidden := true ;
15829: LD_ADDR_OWVAR 54
15833: PUSH
15834: LD_INT 1
15836: ST_TO_ADDR
// ForceSay ( schol2 , D4b-Sch-1 ) ;
15837: LD_EXP 34
15841: PPUSH
15842: LD_STRING D4b-Sch-1
15844: PPUSH
15845: CALL_OW 91
// pom = FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_INT 22
15856: PUSH
15857: LD_EXP 4
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PPUSH
15880: CALL_OW 69
15884: ST_TO_ADDR
// pom1 = NearestUnitToUnit ( pom , schol2 ) ;
15885: LD_ADDR_VAR 0 4
15889: PUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_EXP 34
15899: PPUSH
15900: CALL_OW 74
15904: ST_TO_ADDR
// if pom1 <> 0 then
15905: LD_VAR 0 4
15909: PUSH
15910: LD_INT 0
15912: NONEQUAL
15913: IFFALSE 15927
// SayNoName ( pom1 , D4b-Sol1-1 ) ;
15915: LD_VAR 0 4
15919: PPUSH
15920: LD_STRING D4b-Sol1-1
15922: PPUSH
15923: CALL_OW 90
// pom1 = NearestUnitToUnit ( pom diff pom1 , pom1 ) ;
15927: LD_ADDR_VAR 0 4
15931: PUSH
15932: LD_VAR 0 3
15936: PUSH
15937: LD_VAR 0 4
15941: DIFF
15942: PPUSH
15943: LD_VAR 0 4
15947: PPUSH
15948: CALL_OW 74
15952: ST_TO_ADDR
// SayNoName ( pom1 , D4b-Sol2-1 ) ;
15953: LD_VAR 0 4
15957: PPUSH
15958: LD_STRING D4b-Sol2-1
15960: PPUSH
15961: CALL_OW 90
// ForceSay ( schol2 , D4b-Sch-2 ) ;
15965: LD_EXP 34
15969: PPUSH
15970: LD_STRING D4b-Sch-2
15972: PPUSH
15973: CALL_OW 91
// Say ( bur , D4b-Bur-2 ) ;
15977: LD_EXP 29
15981: PPUSH
15982: LD_STRING D4b-Bur-2
15984: PPUSH
15985: CALL_OW 88
// SetLives ( schol2 , 0 ) ;
15989: LD_EXP 34
15993: PPUSH
15994: LD_INT 0
15996: PPUSH
15997: CALL_OW 234
// ChangeMissionObjectives ( MScholtzeDel ) ;
16001: LD_STRING MScholtzeDel
16003: PPUSH
16004: CALL_OW 337
// interface_hidden := false ;
16008: LD_ADDR_OWVAR 54
16012: PUSH
16013: LD_INT 0
16015: ST_TO_ADDR
// DialogueOff ;
16016: CALL_OW 7
// end ;
16020: LD_VAR 0 1
16024: RET
// on UnitGoesToRed ( un ) do begin if un = schol2 then
16025: LD_VAR 0 1
16029: PUSH
16030: LD_EXP 34
16034: EQUAL
16035: IFFALSE 16051
// if kecy_scholtze_nalezen then
16037: LD_EXP 44
16041: IFFALSE 16047
// exit else
16043: GO 16051
16045: GO 16051
// dialog_scholtze_umrel ;
16047: CALL 15811 0 0
// end ;
16051: PPOPN 1
16053: END
// every 0 0$2 trigger FilterUnitsInArea ( noTracksArea , [ [ f_side , You ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] , [ f_chassis , us_light_wheeled ] , [ f_chassis , us_medium_wheeled ] ] ] ) and stav_omikron in [ 0 , 1 , 2 , 3 ] do
16054: LD_INT 53
16056: PPUSH
16057: LD_INT 22
16059: PUSH
16060: LD_EXP 1
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: LD_INT 31
16074: PUSH
16075: LD_INT 21
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 31
16084: PUSH
16085: LD_INT 23
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 31
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 31
16104: PUSH
16105: LD_INT 2
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PPUSH
16123: CALL_OW 70
16127: PUSH
16128: LD_EXP 39
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 3
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: IN
16151: AND
16152: IFFALSE 16179
16154: GO 16156
16156: DISABLE
// begin CenterOnXY ( 38 , 58 ) ;
16157: LD_INT 38
16159: PPUSH
16160: LD_INT 58
16162: PPUSH
16163: CALL_OW 84
// Say ( bur , D5a-Bur-1 ) ;
16167: LD_EXP 29
16171: PPUSH
16172: LD_STRING D5a-Bur-1
16174: PPUSH
16175: CALL_OW 88
// end ;
16179: END
// on BuildingStarted ( b , builder ) do begin if b in FilterUnitsInArea ( restrictedArea , [ f_side , 3 ] ) then
16180: LD_VAR 0 1
16184: PUSH
16185: LD_INT 54
16187: PPUSH
16188: LD_INT 22
16190: PUSH
16191: LD_INT 3
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 70
16202: IN
16203: IFFALSE 16214
// RemoveUnit ( b ) ;
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 64
// end ;
16214: PPOPN 2
16216: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) > 0 do var pom ;
16217: LD_INT 22
16219: PUSH
16220: LD_EXP 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 30
16231: PUSH
16232: LD_INT 26
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: PUSH
16248: LD_INT 0
16250: GREATER
16251: IFFALSE 16343
16253: GO 16255
16255: DISABLE
16256: LD_INT 0
16258: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_mine ] ] ) ;
16259: LD_ADDR_VAR 0 1
16263: PUSH
16264: LD_INT 22
16266: PUSH
16267: LD_EXP 1
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 30
16278: PUSH
16279: LD_INT 29
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PPUSH
16290: CALL_OW 69
16294: ST_TO_ADDR
// if pom > 0 then
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 0
16302: GREATER
16303: IFFALSE 16342
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
16305: LD_VAR 0 1
16309: PUSH
16310: LD_INT 1
16312: ARRAY
16313: PPUSH
16314: CALL_OW 304
16318: PUSH
16319: LD_INT 0
16321: NONEQUAL
16322: IFFALSE 16333
// wait ( 0 0$1 ) ;
16324: LD_INT 35
16326: PPUSH
16327: CALL_OW 67
16331: GO 16305
// Hint ( PowerPlant ) ;
16333: LD_STRING PowerPlant
16335: PPUSH
16336: CALL_OW 339
// end else
16340: GO 16343
// enable ;
16342: ENABLE
// end ;
16343: PPOPN 1
16345: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ; var pocet ;
16346: LD_INT 22
16348: PUSH
16349: LD_EXP 1
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 30
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PPUSH
16372: CALL_OW 69
16376: PUSH
16377: LD_INT 1
16379: GREATER
16380: IFFALSE 16540
16382: GO 16384
16384: DISABLE
16385: LD_INT 0
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
// begin pocet = 0 ;
16391: LD_ADDR_VAR 0 4
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
16399: LD_ADDR_VAR 0 1
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_EXP 1
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 30
16418: PUSH
16419: LD_INT 0
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PPUSH
16430: CALL_OW 69
16434: ST_TO_ADDR
// pom1 = pom ;
16435: LD_ADDR_VAR 0 2
16439: PUSH
16440: LD_VAR 0 1
16444: ST_TO_ADDR
// while pocet < 2 do
16445: LD_VAR 0 4
16449: PUSH
16450: LD_INT 2
16452: LESS
16453: IFFALSE 16533
// begin for i in pom do
16455: LD_ADDR_VAR 0 3
16459: PUSH
16460: LD_VAR 0 1
16464: PUSH
16465: FOR_IN
16466: IFFALSE 16512
// if not IsConstructed ( i ) then
16468: LD_VAR 0 3
16472: PPUSH
16473: CALL_OW 304
16477: NOT
16478: IFFALSE 16510
// begin pocet = pocet + 1 ;
16480: LD_ADDR_VAR 0 4
16484: PUSH
16485: LD_VAR 0 4
16489: PUSH
16490: LD_INT 1
16492: PLUS
16493: ST_TO_ADDR
// pom1 = pom1 diff i ;
16494: LD_ADDR_VAR 0 2
16498: PUSH
16499: LD_VAR 0 2
16503: PUSH
16504: LD_VAR 0 3
16508: DIFF
16509: ST_TO_ADDR
// end ;
16510: GO 16465
16512: POP
16513: POP
// pom = pom1 ;
16514: LD_ADDR_VAR 0 1
16518: PUSH
16519: LD_VAR 0 2
16523: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16524: LD_INT 70
16526: PPUSH
16527: CALL_OW 67
// end ;
16531: GO 16445
// Hint ( Transport1 ) ;
16533: LD_STRING Transport1
16535: PPUSH
16536: CALL_OW 339
// end ;
16540: PPOPN 4
16542: END
// export function chmo_6 ; begin
16543: LD_INT 0
16545: PPUSH
// ChangeMissionObjectives ( M6a ) ;
16546: LD_STRING M6a
16548: PPUSH
16549: CALL_OW 337
// end ;
16553: LD_VAR 0 1
16557: RET
// export function query_refuel ; begin
16558: LD_INT 0
16560: PPUSH
// Query ( QRefuel ) ;
16561: LD_STRING QRefuel
16563: PPUSH
16564: CALL_OW 97
// end ;
16568: LD_VAR 0 1
16572: RET
// every 0 0$6 do var pom ;
16573: GO 16575
16575: DISABLE
16576: LD_INT 0
16578: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
16579: LD_ADDR_VAR 0 1
16583: PUSH
16584: LD_INT 22
16586: PUSH
16587: LD_EXP 1
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 21
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 69
16614: ST_TO_ADDR
// if postavenych_aut >= pom then
16615: LD_EXP 47
16619: PUSH
16620: LD_VAR 0 1
16624: GREATEREQUAL
16625: IFFALSE 16636
// ChangeMissionObjectives ( M3a ) else
16627: LD_STRING M3a
16629: PPUSH
16630: CALL_OW 337
16634: GO 16637
// enable ;
16636: ENABLE
// end ;
16637: PPOPN 1
16639: END
// export function hint_cerpaci_auta ; begin
16640: LD_INT 0
16642: PPUSH
// Hint ( refuelingtrucks ) ;
16643: LD_STRING refuelingtrucks
16645: PPUSH
16646: CALL_OW 339
// end ; end_of_file
16650: LD_VAR 0 1
16654: RET
// export AMERICKA_POMOC_HLIDCE_LIST ; export AMERICKE_POSILY1_LIST ; export AMERICKE_POSILY2_LIST ; export AMERICKE_POSILY3_LIST ; export AMERICKE_POSILY4_LIST ; export AMERICKE_POSILY11_LIST ; export RUSKE_POSILY_NA_OMICRON_LIST ; export RUSKE_POSILY_RIDICI_LIST ; export RU_posily_na_utek ; export RUSI_CERPACI_AUTA_LIST ; export ARABI_KAMIKADZE_LIST ; export ARABI_PRVNI_VLNA ; export ARABI_FLAME_LIST ; export ARABI_SELF_AUTA ; export ARABI_VOJACI ; export ARABI_doraz ; export ARABI_KIROV_POSILY ; export Arabi_komanda1 ; export Arabi_komanda2 ; export Arabi_komanda3 ; export Arabi_komanda4 ; export other_survivors_mise_2 ; var ah , av ; export function get_sex ; begin
16655: LD_INT 0
16657: PPUSH
// if Prob ( 20 ) then
16658: LD_INT 20
16660: PPUSH
16661: CALL_OW 13
16665: IFFALSE 16677
// result = sex_female else
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_INT 2
16674: ST_TO_ADDR
16675: GO 16685
// result = sex_male ;
16677: LD_ADDR_VAR 0 1
16681: PUSH
16682: LD_INT 1
16684: ST_TO_ADDR
// end ;
16685: LD_VAR 0 1
16689: RET
// export function get_human ( sex , clas , level , name ) ; begin
16690: LD_INT 0
16692: PPUSH
// PrepareHuman ( sex , clas , level ) ;
16693: LD_VAR 0 1
16697: PPUSH
16698: LD_VAR 0 2
16702: PPUSH
16703: LD_VAR 0 3
16707: PPUSH
16708: CALL_OW 380
// hc_name := name ;
16712: LD_ADDR_OWVAR 26
16716: PUSH
16717: LD_VAR 0 4
16721: ST_TO_ADDR
// result := CreateHuman ;
16722: LD_ADDR_VAR 0 5
16726: PUSH
16727: CALL_OW 44
16731: ST_TO_ADDR
// end ;
16732: LD_VAR 0 5
16736: RET
// export function create_americka_pomoc_hlidce ; var pom ; begin
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
// pom = [ ] ;
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: EMPTY
16747: ST_TO_ADDR
// uc_side = Amici ;
16748: LD_ADDR_OWVAR 20
16752: PUSH
16753: LD_EXP 4
16757: ST_TO_ADDR
// uc_nation = nation_american ;
16758: LD_ADDR_OWVAR 21
16762: PUSH
16763: LD_INT 1
16765: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
16766: LD_ADDR_LOC 23
16770: PUSH
16771: CALL 16655 0 0
16775: PPUSH
16776: LD_INT 3
16778: PPUSH
16779: LD_EXP 13
16783: PUSH
16784: LD_OWVAR 67
16788: ARRAY
16789: PPUSH
16790: LD_STRING 
16792: PPUSH
16793: CALL 16690 0 4
16797: ST_TO_ADDR
// case difficulty of 1 :
16798: LD_OWVAR 67
16802: PUSH
16803: LD_INT 1
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16846
16811: POP
// begin vc_chassis = us_light_wheeled ;
16812: LD_ADDR_OWVAR 37
16816: PUSH
16817: LD_INT 1
16819: ST_TO_ADDR
// vc_control = control_manual ;
16820: LD_ADDR_OWVAR 38
16824: PUSH
16825: LD_INT 1
16827: ST_TO_ADDR
// vc_engine = engine_solar ;
16828: LD_ADDR_OWVAR 39
16832: PUSH
16833: LD_INT 2
16835: ST_TO_ADDR
// vc_weapon = us_light_gun ;
16836: LD_ADDR_OWVAR 40
16840: PUSH
16841: LD_INT 3
16843: ST_TO_ADDR
// end ; 2 :
16844: GO 16933
16846: LD_INT 2
16848: DOUBLE
16849: EQUAL
16850: IFTRUE 16854
16852: GO 16889
16854: POP
// begin vc_chassis = us_light_wheeled ;
16855: LD_ADDR_OWVAR 37
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// vc_control = control_manual ;
16863: LD_ADDR_OWVAR 38
16867: PUSH
16868: LD_INT 1
16870: ST_TO_ADDR
// vc_engine = engine_solar ;
16871: LD_ADDR_OWVAR 39
16875: PUSH
16876: LD_INT 2
16878: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
16879: LD_ADDR_OWVAR 40
16883: PUSH
16884: LD_INT 2
16886: ST_TO_ADDR
// end ; 3 :
16887: GO 16933
16889: LD_INT 3
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 16932
16897: POP
// begin vc_chassis = us_medium_wheeled ;
16898: LD_ADDR_OWVAR 37
16902: PUSH
16903: LD_INT 2
16905: ST_TO_ADDR
// vc_control = control_manual ;
16906: LD_ADDR_OWVAR 38
16910: PUSH
16911: LD_INT 1
16913: ST_TO_ADDR
// vc_engine = engine_combustion ;
16914: LD_ADDR_OWVAR 39
16918: PUSH
16919: LD_INT 1
16921: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
16922: LD_ADDR_OWVAR 40
16926: PUSH
16927: LD_INT 4
16929: ST_TO_ADDR
// end ; end ;
16930: GO 16933
16932: POP
// av = CreateVehicle ;
16933: LD_ADDR_LOC 24
16937: PUSH
16938: CALL_OW 45
16942: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
16943: LD_LOC 23
16947: PPUSH
16948: LD_LOC 24
16952: PPUSH
16953: CALL_OW 52
// pom = pom ^ av ;
16957: LD_ADDR_VAR 0 2
16961: PUSH
16962: LD_VAR 0 2
16966: PUSH
16967: LD_LOC 24
16971: ADD
16972: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
16973: LD_ADDR_LOC 23
16977: PUSH
16978: CALL 16655 0 0
16982: PPUSH
16983: LD_INT 1
16985: PPUSH
16986: LD_EXP 13
16990: PUSH
16991: LD_OWVAR 67
16995: ARRAY
16996: PPUSH
16997: LD_STRING 
16999: PPUSH
17000: CALL 16690 0 4
17004: ST_TO_ADDR
// pom = pom ^ ah ;
17005: LD_ADDR_VAR 0 2
17009: PUSH
17010: LD_VAR 0 2
17014: PUSH
17015: LD_LOC 23
17019: ADD
17020: ST_TO_ADDR
// if pom > 2 then
17021: LD_VAR 0 2
17025: PUSH
17026: LD_INT 2
17028: GREATER
17029: IFFALSE 17075
// pom = pom ^ ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_VAR 0 2
17040: PUSH
17041: LD_LOC 23
17045: ADD
17046: PUSH
17047: CALL 16655 0 0
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: LD_EXP 13
17059: PUSH
17060: LD_OWVAR 67
17064: ARRAY
17065: PPUSH
17066: LD_STRING 
17068: PPUSH
17069: CALL 16690 0 4
17073: EQUAL
17074: ST_TO_ADDR
// AMERICKA_POMOC_HLIDCE_LIST = pom ;
17075: LD_ADDR_EXP 50
17079: PUSH
17080: LD_VAR 0 2
17084: ST_TO_ADDR
// end ;
17085: LD_VAR 0 1
17089: RET
// export function set_skily_amikum ; var pom , i ; begin
17090: LD_INT 0
17092: PPUSH
17093: PPUSH
17094: PPUSH
// pom = [ Am_sol1 , Am_sol2 , Am_sol3 , Am_sol4 , Am_vb1 , Am_vb2 , Am_vb3 , Am_vb4 ] ;
17095: LD_ADDR_VAR 0 2
17099: PUSH
17100: LD_INT 38
17102: PUSH
17103: LD_INT 39
17105: PUSH
17106: LD_INT 40
17108: PUSH
17109: LD_INT 41
17111: PUSH
17112: LD_INT 29
17114: PUSH
17115: LD_INT 30
17117: PUSH
17118: LD_INT 31
17120: PUSH
17121: LD_INT 32
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: ST_TO_ADDR
// for i in pom do
17134: LD_ADDR_VAR 0 3
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: FOR_IN
17145: IFFALSE 17172
// uprav_cloveka ( i , class_soldier , levely_amici [ difficulty ] ) ;
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 1
17154: PPUSH
17155: LD_EXP 13
17159: PUSH
17160: LD_OWVAR 67
17164: ARRAY
17165: PPUSH
17166: CALL 17487 0 3
17170: GO 17144
17172: POP
17173: POP
// pom = [ Am_me1 , Am_me2 , Am_me3 ] ;
17174: LD_ADDR_VAR 0 2
17178: PUSH
17179: LD_INT 33
17181: PUSH
17182: LD_INT 34
17184: PUSH
17185: LD_INT 35
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: ST_TO_ADDR
// for i in pom do
17193: LD_ADDR_VAR 0 3
17197: PUSH
17198: LD_VAR 0 2
17202: PUSH
17203: FOR_IN
17204: IFFALSE 17231
// uprav_cloveka ( i , class_mechanic , levely_amici [ difficulty ] ) ;
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_INT 3
17213: PPUSH
17214: LD_EXP 13
17218: PUSH
17219: LD_OWVAR 67
17223: ARRAY
17224: PPUSH
17225: CALL 17487 0 3
17229: GO 17203
17231: POP
17232: POP
// uprav_cloveka ( Am_sci1 , class_scientistic , levely_amici [ difficulty ] ) ;
17233: LD_INT 37
17235: PPUSH
17236: LD_INT 4
17238: PPUSH
17239: LD_EXP 13
17243: PUSH
17244: LD_OWVAR 67
17248: ARRAY
17249: PPUSH
17250: CALL 17487 0 3
// uprav_cloveka ( Am_eng1 , class_engineer , levely_amici [ difficulty ] ) ;
17254: LD_INT 36
17256: PPUSH
17257: LD_INT 2
17259: PPUSH
17260: LD_EXP 13
17264: PUSH
17265: LD_OWVAR 67
17269: ARRAY
17270: PPUSH
17271: CALL 17487 0 3
// end ;
17275: LD_VAR 0 1
17279: RET
// function set_skills ( un , skills ) ; begin
17280: LD_INT 0
17282: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
17283: LD_VAR 0 1
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: LD_VAR 0 2
17295: PUSH
17296: LD_INT 1
17298: ARRAY
17299: PPUSH
17300: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
17304: LD_VAR 0 1
17308: PPUSH
17309: LD_INT 2
17311: PPUSH
17312: LD_VAR 0 2
17316: PUSH
17317: LD_INT 2
17319: ARRAY
17320: PPUSH
17321: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
17325: LD_VAR 0 1
17329: PPUSH
17330: LD_INT 3
17332: PPUSH
17333: LD_VAR 0 2
17337: PUSH
17338: LD_INT 3
17340: ARRAY
17341: PPUSH
17342: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
17346: LD_VAR 0 1
17350: PPUSH
17351: LD_INT 4
17353: PPUSH
17354: LD_VAR 0 2
17358: PUSH
17359: LD_INT 4
17361: ARRAY
17362: PPUSH
17363: CALL_OW 237
// end ;
17367: LD_VAR 0 3
17371: RET
// function get_skills ( un ) ; var pom3 , pom4 , pom5 , pom6 ; begin
17372: LD_INT 0
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
// pom3 := GetSkill ( un , skill_combat ) ;
17379: LD_ADDR_VAR 0 3
17383: PUSH
17384: LD_VAR 0 1
17388: PPUSH
17389: LD_INT 1
17391: PPUSH
17392: CALL_OW 259
17396: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_engineering ) ;
17397: LD_ADDR_VAR 0 4
17401: PUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_INT 2
17409: PPUSH
17410: CALL_OW 259
17414: ST_TO_ADDR
// pom5 := GetSkill ( un , skill_mechanical ) ;
17415: LD_ADDR_VAR 0 5
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_INT 3
17427: PPUSH
17428: CALL_OW 259
17432: ST_TO_ADDR
// pom6 := GetSkill ( un , skill_scientistic ) ;
17433: LD_ADDR_VAR 0 6
17437: PUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: LD_INT 4
17445: PPUSH
17446: CALL_OW 259
17450: ST_TO_ADDR
// result := [ pom3 , pom4 , pom5 , pom6 ] end ;
17451: LD_ADDR_VAR 0 2
17455: PUSH
17456: LD_VAR 0 3
17460: PUSH
17461: LD_VAR 0 4
17465: PUSH
17466: LD_VAR 0 5
17470: PUSH
17471: LD_VAR 0 6
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: ST_TO_ADDR
17482: LD_VAR 0 2
17486: RET
// function uprav_cloveka ( un , clas , lev ) ; var pom1 ; begin
17487: LD_INT 0
17489: PPUSH
17490: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
17491: LD_INT 1
17493: PPUSH
17494: LD_VAR 0 2
17498: PPUSH
17499: LD_VAR 0 3
17503: PPUSH
17504: LD_STRING 
17506: PPUSH
17507: CALL 17569 0 4
// ah = CreateHuman ;
17511: LD_ADDR_LOC 23
17515: PUSH
17516: CALL_OW 44
17520: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
17521: LD_ADDR_VAR 0 5
17525: PUSH
17526: LD_LOC 23
17530: PPUSH
17531: CALL 17372 0 1
17535: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
17536: LD_VAR 0 1
17540: PPUSH
17541: LD_LOC 23
17545: PPUSH
17546: CALL 17372 0 1
17550: PPUSH
17551: CALL 17280 0 2
// DestroyUnit ( ah ) ;
17555: LD_LOC 23
17559: PPUSH
17560: CALL_OW 65
// end ;
17564: LD_VAR 0 4
17568: RET
// function prepare_human ( sex , clas , level , name ) ; begin
17569: LD_INT 0
17571: PPUSH
// PrepareHuman ( sex , clas , level ) ;
17572: LD_VAR 0 1
17576: PPUSH
17577: LD_VAR 0 2
17581: PPUSH
17582: LD_VAR 0 3
17586: PPUSH
17587: CALL_OW 380
// hc_name := name ;
17591: LD_ADDR_OWVAR 26
17595: PUSH
17596: LD_VAR 0 4
17600: ST_TO_ADDR
// end ;
17601: LD_VAR 0 5
17605: RET
// export function create_americke_posily ; var pom ; begin
17606: LD_INT 0
17608: PPUSH
17609: PPUSH
// uc_side = Amici ;
17610: LD_ADDR_OWVAR 20
17614: PUSH
17615: LD_EXP 4
17619: ST_TO_ADDR
// uc_nation = nation_american ;
17620: LD_ADDR_OWVAR 21
17624: PUSH
17625: LD_INT 1
17627: ST_TO_ADDR
// pom = [ ] ;
17628: LD_ADDR_VAR 0 2
17632: PUSH
17633: EMPTY
17634: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17635: LD_ADDR_VAR 0 2
17639: PUSH
17640: LD_VAR 0 2
17644: PUSH
17645: CALL 16655 0 0
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: LD_EXP 13
17657: PUSH
17658: LD_OWVAR 67
17662: ARRAY
17663: PPUSH
17664: LD_STRING 
17666: PPUSH
17667: CALL 16690 0 4
17671: ADD
17672: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17673: LD_ADDR_VAR 0 2
17677: PUSH
17678: LD_VAR 0 2
17682: PUSH
17683: CALL 16655 0 0
17687: PPUSH
17688: LD_INT 1
17690: PPUSH
17691: LD_EXP 13
17695: PUSH
17696: LD_OWVAR 67
17700: ARRAY
17701: PPUSH
17702: LD_STRING 
17704: PPUSH
17705: CALL 16690 0 4
17709: ADD
17710: ST_TO_ADDR
// AMERICKE_POSILY1_LIST = pom ;
17711: LD_ADDR_EXP 51
17715: PUSH
17716: LD_VAR 0 2
17720: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17721: LD_ADDR_VAR 0 2
17725: PUSH
17726: CALL 16655 0 0
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: LD_EXP 13
17738: PUSH
17739: LD_OWVAR 67
17743: ARRAY
17744: PPUSH
17745: LD_STRING 
17747: PPUSH
17748: CALL 16690 0 4
17752: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: LD_VAR 0 2
17762: PUSH
17763: CALL 16655 0 0
17767: PPUSH
17768: LD_INT 3
17770: PPUSH
17771: LD_EXP 13
17775: PUSH
17776: LD_OWVAR 67
17780: ARRAY
17781: PPUSH
17782: LD_STRING 
17784: PPUSH
17785: CALL 16690 0 4
17789: ADD
17790: ST_TO_ADDR
// if pom > 1 then
17791: LD_VAR 0 2
17795: PUSH
17796: LD_INT 1
17798: GREATER
17799: IFFALSE 17839
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
17801: LD_ADDR_VAR 0 2
17805: PUSH
17806: LD_VAR 0 2
17810: PUSH
17811: CALL 16655 0 0
17815: PPUSH
17816: LD_INT 4
17818: PPUSH
17819: LD_EXP 13
17823: PUSH
17824: LD_OWVAR 67
17828: ARRAY
17829: PPUSH
17830: LD_STRING 
17832: PPUSH
17833: CALL 16690 0 4
17837: ADD
17838: ST_TO_ADDR
// if pom > 2 then
17839: LD_VAR 0 2
17843: PUSH
17844: LD_INT 2
17846: GREATER
17847: IFFALSE 17887
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17849: LD_ADDR_VAR 0 2
17853: PUSH
17854: LD_VAR 0 2
17858: PUSH
17859: CALL 16655 0 0
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: LD_EXP 13
17871: PUSH
17872: LD_OWVAR 67
17876: ARRAY
17877: PPUSH
17878: LD_STRING 
17880: PPUSH
17881: CALL 16690 0 4
17885: ADD
17886: ST_TO_ADDR
// AMERICKE_POSILY2_LIST = pom ;
17887: LD_ADDR_EXP 52
17891: PUSH
17892: LD_VAR 0 2
17896: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17897: LD_ADDR_VAR 0 2
17901: PUSH
17902: CALL 16655 0 0
17906: PPUSH
17907: LD_INT 1
17909: PPUSH
17910: LD_EXP 13
17914: PUSH
17915: LD_OWVAR 67
17919: ARRAY
17920: PPUSH
17921: LD_STRING 
17923: PPUSH
17924: CALL 16690 0 4
17928: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17929: LD_ADDR_VAR 0 2
17933: PUSH
17934: LD_VAR 0 2
17938: PUSH
17939: CALL 16655 0 0
17943: PPUSH
17944: LD_INT 1
17946: PPUSH
17947: LD_EXP 13
17951: PUSH
17952: LD_OWVAR 67
17956: ARRAY
17957: PPUSH
17958: LD_STRING 
17960: PPUSH
17961: CALL 16690 0 4
17965: ADD
17966: ST_TO_ADDR
// if pom = 1 then
17967: LD_VAR 0 2
17971: PUSH
17972: LD_INT 1
17974: EQUAL
17975: IFFALSE 18015
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_VAR 0 2
17986: PUSH
17987: CALL 16655 0 0
17991: PPUSH
17992: LD_INT 3
17994: PPUSH
17995: LD_EXP 13
17999: PUSH
18000: LD_OWVAR 67
18004: ARRAY
18005: PPUSH
18006: LD_STRING 
18008: PPUSH
18009: CALL 16690 0 4
18013: ADD
18014: ST_TO_ADDR
// if pom = 2 then
18015: LD_VAR 0 2
18019: PUSH
18020: LD_INT 2
18022: EQUAL
18023: IFFALSE 18129
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18025: LD_ADDR_LOC 23
18029: PUSH
18030: CALL 16655 0 0
18034: PPUSH
18035: LD_INT 3
18037: PPUSH
18038: LD_EXP 13
18042: PUSH
18043: LD_OWVAR 67
18047: ARRAY
18048: PPUSH
18049: LD_STRING 
18051: PPUSH
18052: CALL 16690 0 4
18056: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
18057: LD_ADDR_OWVAR 37
18061: PUSH
18062: LD_INT 1
18064: ST_TO_ADDR
// vc_control = control_manual ;
18065: LD_ADDR_OWVAR 38
18069: PUSH
18070: LD_INT 1
18072: ST_TO_ADDR
// vc_engine = engine_solar ;
18073: LD_ADDR_OWVAR 39
18077: PUSH
18078: LD_INT 2
18080: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18081: LD_ADDR_OWVAR 40
18085: PUSH
18086: LD_INT 2
18088: ST_TO_ADDR
// av = CreateVehicle ;
18089: LD_ADDR_LOC 24
18093: PUSH
18094: CALL_OW 45
18098: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18099: LD_LOC 23
18103: PPUSH
18104: LD_LOC 24
18108: PPUSH
18109: CALL_OW 52
// pom = pom ^ av ;
18113: LD_ADDR_VAR 0 2
18117: PUSH
18118: LD_VAR 0 2
18122: PUSH
18123: LD_LOC 24
18127: ADD
18128: ST_TO_ADDR
// end ; if pom = 3 then
18129: LD_VAR 0 2
18133: PUSH
18134: LD_INT 3
18136: EQUAL
18137: IFFALSE 18243
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18139: LD_ADDR_LOC 23
18143: PUSH
18144: CALL 16655 0 0
18148: PPUSH
18149: LD_INT 3
18151: PPUSH
18152: LD_EXP 13
18156: PUSH
18157: LD_OWVAR 67
18161: ARRAY
18162: PPUSH
18163: LD_STRING 
18165: PPUSH
18166: CALL 16690 0 4
18170: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
18171: LD_ADDR_OWVAR 37
18175: PUSH
18176: LD_INT 2
18178: ST_TO_ADDR
// vc_control = control_manual ;
18179: LD_ADDR_OWVAR 38
18183: PUSH
18184: LD_INT 1
18186: ST_TO_ADDR
// vc_engine = engine_solar ;
18187: LD_ADDR_OWVAR 39
18191: PUSH
18192: LD_INT 2
18194: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
18195: LD_ADDR_OWVAR 40
18199: PUSH
18200: LD_INT 4
18202: ST_TO_ADDR
// av = CreateVehicle ;
18203: LD_ADDR_LOC 24
18207: PUSH
18208: CALL_OW 45
18212: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18213: LD_LOC 23
18217: PPUSH
18218: LD_LOC 24
18222: PPUSH
18223: CALL_OW 52
// pom = pom ^ av ;
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_VAR 0 2
18236: PUSH
18237: LD_LOC 24
18241: ADD
18242: ST_TO_ADDR
// end ; AMERICKE_POSILY3_LIST = pom ;
18243: LD_ADDR_EXP 53
18247: PUSH
18248: LD_VAR 0 2
18252: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: CALL 16655 0 0
18262: PPUSH
18263: LD_INT 1
18265: PPUSH
18266: LD_EXP 13
18270: PUSH
18271: LD_OWVAR 67
18275: ARRAY
18276: PPUSH
18277: LD_STRING 
18279: PPUSH
18280: CALL 16690 0 4
18284: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18285: LD_ADDR_VAR 0 2
18289: PUSH
18290: LD_VAR 0 2
18294: PUSH
18295: CALL 16655 0 0
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: LD_EXP 13
18307: PUSH
18308: LD_OWVAR 67
18312: ARRAY
18313: PPUSH
18314: LD_STRING 
18316: PPUSH
18317: CALL 16690 0 4
18321: ADD
18322: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18323: LD_ADDR_VAR 0 2
18327: PUSH
18328: LD_VAR 0 2
18332: PUSH
18333: CALL 16655 0 0
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: LD_EXP 13
18345: PUSH
18346: LD_OWVAR 67
18350: ARRAY
18351: PUSH
18352: LD_INT 1
18354: MINUS
18355: PPUSH
18356: LD_STRING 
18358: PPUSH
18359: CALL 16690 0 4
18363: ADD
18364: ST_TO_ADDR
// AMERICKE_POSILY4_LIST = pom ;
18365: LD_ADDR_EXP 54
18369: PUSH
18370: LD_VAR 0 2
18374: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18375: LD_ADDR_VAR 0 2
18379: PUSH
18380: CALL 16655 0 0
18384: PPUSH
18385: LD_INT 1
18387: PPUSH
18388: LD_EXP 13
18392: PUSH
18393: LD_OWVAR 67
18397: ARRAY
18398: PPUSH
18399: LD_STRING 
18401: PPUSH
18402: CALL 16690 0 4
18406: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18407: LD_ADDR_VAR 0 2
18411: PUSH
18412: LD_VAR 0 2
18416: PUSH
18417: CALL 16655 0 0
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: LD_EXP 13
18429: PUSH
18430: LD_OWVAR 67
18434: ARRAY
18435: PUSH
18436: LD_INT 1
18438: MINUS
18439: PPUSH
18440: LD_STRING 
18442: PPUSH
18443: CALL 16690 0 4
18447: ADD
18448: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18449: LD_ADDR_VAR 0 2
18453: PUSH
18454: LD_VAR 0 2
18458: PUSH
18459: CALL 16655 0 0
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: LD_EXP 13
18471: PUSH
18472: LD_OWVAR 67
18476: ARRAY
18477: PUSH
18478: LD_INT 1
18480: MINUS
18481: PPUSH
18482: LD_STRING 
18484: PPUSH
18485: CALL 16690 0 4
18489: ADD
18490: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] - 1 ,  ) ;
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_VAR 0 2
18500: PUSH
18501: CALL 16655 0 0
18505: PPUSH
18506: LD_INT 4
18508: PPUSH
18509: LD_EXP 13
18513: PUSH
18514: LD_OWVAR 67
18518: ARRAY
18519: PUSH
18520: LD_INT 1
18522: MINUS
18523: PPUSH
18524: LD_STRING 
18526: PPUSH
18527: CALL 16690 0 4
18531: ADD
18532: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18533: LD_ADDR_LOC 23
18537: PUSH
18538: CALL 16655 0 0
18542: PPUSH
18543: LD_INT 3
18545: PPUSH
18546: LD_EXP 13
18550: PUSH
18551: LD_OWVAR 67
18555: ARRAY
18556: PPUSH
18557: LD_STRING 
18559: PPUSH
18560: CALL 16690 0 4
18564: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
18565: LD_ADDR_OWVAR 37
18569: PUSH
18570: LD_INT 3
18572: ST_TO_ADDR
// vc_control = control_manual ;
18573: LD_ADDR_OWVAR 38
18577: PUSH
18578: LD_INT 1
18580: ST_TO_ADDR
// vc_engine = engine_combustion ;
18581: LD_ADDR_OWVAR 39
18585: PUSH
18586: LD_INT 1
18588: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18589: LD_ADDR_OWVAR 40
18593: PUSH
18594: LD_INT 2
18596: ST_TO_ADDR
// av = CreateVehicle ;
18597: LD_ADDR_LOC 24
18601: PUSH
18602: CALL_OW 45
18606: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18607: LD_LOC 23
18611: PPUSH
18612: LD_LOC 24
18616: PPUSH
18617: CALL_OW 52
// pom = pom ^ av ;
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: LD_VAR 0 2
18630: PUSH
18631: LD_LOC 24
18635: ADD
18636: ST_TO_ADDR
// AMERICKE_POSILY11_LIST = pom ;
18637: LD_ADDR_EXP 55
18641: PUSH
18642: LD_VAR 0 2
18646: ST_TO_ADDR
// end ;
18647: LD_VAR 0 1
18651: RET
// export function create_kecajici_amik ; var pom ; begin
18652: LD_INT 0
18654: PPUSH
18655: PPUSH
// uc_side = Amici ;
18656: LD_ADDR_OWVAR 20
18660: PUSH
18661: LD_EXP 4
18665: ST_TO_ADDR
// uc_nation = nation_american ;
18666: LD_ADDR_OWVAR 21
18670: PUSH
18671: LD_INT 1
18673: ST_TO_ADDR
// pom = get_human ( sex_male , class_soldier , 4 , Mike Damme ) ;
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: LD_INT 1
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: LD_INT 4
18687: PPUSH
18688: LD_STRING Mike Damme
18690: PPUSH
18691: CALL 16690 0 4
18695: ST_TO_ADDR
// result := pom ;
18696: LD_ADDR_VAR 0 1
18700: PUSH
18701: LD_VAR 0 2
18705: ST_TO_ADDR
// end ;
18706: LD_VAR 0 1
18710: RET
// export function create_grishko ; var pom ; begin
18711: LD_INT 0
18713: PPUSH
18714: PPUSH
// pom = grishko ;
18715: LD_ADDR_VAR 0 2
18719: PUSH
18720: LD_EXP 35
18724: ST_TO_ADDR
// if pom = 0 then
18725: LD_VAR 0 2
18729: PUSH
18730: LD_INT 0
18732: EQUAL
18733: IFFALSE 18757
// pom = get_human ( sex_male , class_soldier , 4 , Piotr Grishko ) ;
18735: LD_ADDR_VAR 0 2
18739: PUSH
18740: LD_INT 1
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: LD_INT 4
18748: PPUSH
18749: LD_STRING Piotr Grishko
18751: PPUSH
18752: CALL 16690 0 4
18756: ST_TO_ADDR
// if pom > 0 then
18757: LD_VAR 0 2
18761: PUSH
18762: LD_INT 0
18764: GREATER
18765: IFFALSE 18801
// begin SetSide ( pom [ 1 ] , You2 ) ;
18767: LD_VAR 0 2
18771: PUSH
18772: LD_INT 1
18774: ARRAY
18775: PPUSH
18776: LD_EXP 2
18780: PPUSH
18781: CALL_OW 235
// result = pom [ 1 ] ;
18785: LD_ADDR_VAR 0 1
18789: PUSH
18790: LD_VAR 0 2
18794: PUSH
18795: LD_INT 1
18797: ARRAY
18798: ST_TO_ADDR
// end else
18799: GO 18808
// msg ( ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril ) ;
18801: LD_STRING ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril
18803: PPUSH
18804: CALL_OW 100
// end ;
18808: LD_VAR 0 1
18812: RET
// export function create_arabsky_utok ; var pom , i ; begin
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
18817: PPUSH
// pom = FilterUnitsInArea ( Ar_jedn , [ [ f_side , Arabi ] , [ f_class , class_apeman_kamikaze ] ] ) ;
18818: LD_ADDR_VAR 0 2
18822: PUSH
18823: LD_INT 9
18825: PPUSH
18826: LD_INT 22
18828: PUSH
18829: LD_EXP 5
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 25
18840: PUSH
18841: LD_INT 17
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 70
18856: ST_TO_ADDR
// ARABI_KAMIKADZE_LIST = pom ;
18857: LD_ADDR_EXP 60
18861: PUSH
18862: LD_VAR 0 2
18866: ST_TO_ADDR
// for i in pom do
18867: LD_ADDR_VAR 0 3
18871: PUSH
18872: LD_VAR 0 2
18876: PUSH
18877: FOR_IN
18878: IFFALSE 18891
// RemoveUnit ( i ) ;
18880: LD_VAR 0 3
18884: PPUSH
18885: CALL_OW 64
18889: GO 18877
18891: POP
18892: POP
// pom = [ ] ;
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: EMPTY
18899: ST_TO_ADDR
// uc_side = Arabi ;
18900: LD_ADDR_OWVAR 20
18904: PUSH
18905: LD_EXP 5
18909: ST_TO_ADDR
// uc_nation = nation_arabian ;
18910: LD_ADDR_OWVAR 21
18914: PUSH
18915: LD_INT 2
18917: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18918: LD_ADDR_LOC 23
18922: PUSH
18923: CALL 16655 0 0
18927: PPUSH
18928: LD_INT 3
18930: PPUSH
18931: LD_INT 9
18933: PPUSH
18934: LD_STRING 
18936: PPUSH
18937: CALL 16690 0 4
18941: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
18942: LD_ADDR_OWVAR 37
18946: PUSH
18947: LD_INT 14
18949: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
18950: LD_ADDR_OWVAR 40
18954: PUSH
18955: LD_INT 26
18957: ST_TO_ADDR
// vc_control = control_manual ;
18958: LD_ADDR_OWVAR 38
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// vc_engine = engine_combustion ;
18966: LD_ADDR_OWVAR 39
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// av = CreateVehicle ;
18974: LD_ADDR_LOC 24
18978: PUSH
18979: CALL_OW 45
18983: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18984: LD_LOC 23
18988: PPUSH
18989: LD_LOC 24
18993: PPUSH
18994: CALL_OW 52
// pom = pom ^ av ;
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_VAR 0 2
19007: PUSH
19008: LD_LOC 24
19012: ADD
19013: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19014: LD_ADDR_LOC 23
19018: PUSH
19019: CALL 16655 0 0
19023: PPUSH
19024: LD_INT 3
19026: PPUSH
19027: LD_INT 9
19029: PPUSH
19030: LD_STRING 
19032: PPUSH
19033: CALL 16690 0 4
19037: ST_TO_ADDR
// av = CreateVehicle ;
19038: LD_ADDR_LOC 24
19042: PUSH
19043: CALL_OW 45
19047: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19048: LD_LOC 23
19052: PPUSH
19053: LD_LOC 24
19057: PPUSH
19058: CALL_OW 52
// pom = pom ^ av ;
19062: LD_ADDR_VAR 0 2
19066: PUSH
19067: LD_VAR 0 2
19071: PUSH
19072: LD_LOC 24
19076: ADD
19077: ST_TO_ADDR
// ARABI_FLAME_LIST = pom ;
19078: LD_ADDR_EXP 62
19082: PUSH
19083: LD_VAR 0 2
19087: ST_TO_ADDR
// pom = [ ] ;
19088: LD_ADDR_VAR 0 2
19092: PUSH
19093: EMPTY
19094: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19095: LD_ADDR_LOC 23
19099: PUSH
19100: CALL 16655 0 0
19104: PPUSH
19105: LD_INT 3
19107: PPUSH
19108: LD_INT 9
19110: PPUSH
19111: LD_STRING 
19113: PPUSH
19114: CALL 16690 0 4
19118: ST_TO_ADDR
// vc_weapon = ar_gun ;
19119: LD_ADDR_OWVAR 40
19123: PUSH
19124: LD_INT 27
19126: ST_TO_ADDR
// av = CreateVehicle ;
19127: LD_ADDR_LOC 24
19131: PUSH
19132: CALL_OW 45
19136: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19137: LD_LOC 23
19141: PPUSH
19142: LD_LOC 24
19146: PPUSH
19147: CALL_OW 52
// pom = av ;
19151: LD_ADDR_VAR 0 2
19155: PUSH
19156: LD_LOC 24
19160: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19161: LD_ADDR_LOC 23
19165: PUSH
19166: CALL 16655 0 0
19170: PPUSH
19171: LD_INT 3
19173: PPUSH
19174: LD_INT 9
19176: PPUSH
19177: LD_STRING 
19179: PPUSH
19180: CALL 16690 0 4
19184: ST_TO_ADDR
// av = CreateVehicle ;
19185: LD_ADDR_LOC 24
19189: PUSH
19190: CALL_OW 45
19194: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19195: LD_LOC 23
19199: PPUSH
19200: LD_LOC 24
19204: PPUSH
19205: CALL_OW 52
// pom = pom ^ av ;
19209: LD_ADDR_VAR 0 2
19213: PUSH
19214: LD_VAR 0 2
19218: PUSH
19219: LD_LOC 24
19223: ADD
19224: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19225: LD_ADDR_LOC 23
19229: PUSH
19230: CALL 16655 0 0
19234: PPUSH
19235: LD_INT 3
19237: PPUSH
19238: LD_INT 9
19240: PPUSH
19241: LD_STRING 
19243: PPUSH
19244: CALL 16690 0 4
19248: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
19249: LD_ADDR_OWVAR 40
19253: PUSH
19254: LD_INT 25
19256: ST_TO_ADDR
// av = CreateVehicle ;
19257: LD_ADDR_LOC 24
19261: PUSH
19262: CALL_OW 45
19266: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19267: LD_LOC 23
19271: PPUSH
19272: LD_LOC 24
19276: PPUSH
19277: CALL_OW 52
// pom = pom ^ av ;
19281: LD_ADDR_VAR 0 2
19285: PUSH
19286: LD_VAR 0 2
19290: PUSH
19291: LD_LOC 24
19295: ADD
19296: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19297: LD_ADDR_LOC 23
19301: PUSH
19302: CALL 16655 0 0
19306: PPUSH
19307: LD_INT 3
19309: PPUSH
19310: LD_INT 9
19312: PPUSH
19313: LD_STRING 
19315: PPUSH
19316: CALL 16690 0 4
19320: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19321: LD_ADDR_OWVAR 40
19325: PUSH
19326: LD_INT 28
19328: ST_TO_ADDR
// av = CreateVehicle ;
19329: LD_ADDR_LOC 24
19333: PUSH
19334: CALL_OW 45
19338: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19339: LD_LOC 23
19343: PPUSH
19344: LD_LOC 24
19348: PPUSH
19349: CALL_OW 52
// pom = pom ^ av ;
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_VAR 0 2
19362: PUSH
19363: LD_LOC 24
19367: ADD
19368: ST_TO_ADDR
// ARABI_PRVNI_VLNA = pom ;
19369: LD_ADDR_EXP 61
19373: PUSH
19374: LD_VAR 0 2
19378: ST_TO_ADDR
// pom = [ ] ;
19379: LD_ADDR_VAR 0 2
19383: PUSH
19384: EMPTY
19385: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
19386: LD_ADDR_OWVAR 40
19390: PUSH
19391: LD_INT 29
19393: ST_TO_ADDR
// vc_control = control_apeman ;
19394: LD_ADDR_OWVAR 38
19398: PUSH
19399: LD_INT 5
19401: ST_TO_ADDR
// ah = CreateVehicle ;
19402: LD_ADDR_LOC 23
19406: PUSH
19407: CALL_OW 45
19411: ST_TO_ADDR
// pom = ah ;
19412: LD_ADDR_VAR 0 2
19416: PUSH
19417: LD_LOC 23
19421: ST_TO_ADDR
// pom = pom ^ CreateVehicle ;
19422: LD_ADDR_VAR 0 2
19426: PUSH
19427: LD_VAR 0 2
19431: PUSH
19432: CALL_OW 45
19436: ADD
19437: ST_TO_ADDR
// ARABI_SELF_AUTA = pom ;
19438: LD_ADDR_EXP 63
19442: PUSH
19443: LD_VAR 0 2
19447: ST_TO_ADDR
// pom = [ ] ;
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: EMPTY
19454: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 9 ,  ) ;
19455: LD_ADDR_VAR 0 2
19459: PUSH
19460: CALL 16655 0 0
19464: PPUSH
19465: LD_INT 1
19467: PPUSH
19468: LD_INT 9
19470: PPUSH
19471: LD_STRING 
19473: PPUSH
19474: CALL 16690 0 4
19478: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19479: LD_ADDR_VAR 0 2
19483: PUSH
19484: LD_VAR 0 2
19488: PUSH
19489: CALL 16655 0 0
19493: PPUSH
19494: LD_INT 1
19496: PPUSH
19497: LD_INT 9
19499: PPUSH
19500: LD_STRING 
19502: PPUSH
19503: CALL 16690 0 4
19507: ADD
19508: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19509: LD_ADDR_VAR 0 2
19513: PUSH
19514: LD_VAR 0 2
19518: PUSH
19519: CALL 16655 0 0
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: LD_INT 9
19529: PPUSH
19530: LD_STRING 
19532: PPUSH
19533: CALL 16690 0 4
19537: ADD
19538: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19539: LD_ADDR_VAR 0 2
19543: PUSH
19544: LD_VAR 0 2
19548: PUSH
19549: CALL 16655 0 0
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: LD_INT 9
19559: PPUSH
19560: LD_STRING 
19562: PPUSH
19563: CALL 16690 0 4
19567: ADD
19568: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19569: LD_ADDR_VAR 0 2
19573: PUSH
19574: LD_VAR 0 2
19578: PUSH
19579: CALL 16655 0 0
19583: PPUSH
19584: LD_INT 8
19586: PPUSH
19587: LD_INT 9
19589: PPUSH
19590: LD_STRING 
19592: PPUSH
19593: CALL 16690 0 4
19597: ADD
19598: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19599: LD_ADDR_VAR 0 2
19603: PUSH
19604: LD_VAR 0 2
19608: PUSH
19609: CALL 16655 0 0
19613: PPUSH
19614: LD_INT 8
19616: PPUSH
19617: LD_INT 9
19619: PPUSH
19620: LD_STRING 
19622: PPUSH
19623: CALL 16690 0 4
19627: ADD
19628: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_VAR 0 2
19638: PUSH
19639: CALL 16655 0 0
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: LD_INT 9
19649: PPUSH
19650: LD_STRING 
19652: PPUSH
19653: CALL 16690 0 4
19657: ADD
19658: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: LD_VAR 0 2
19668: PUSH
19669: CALL 16655 0 0
19673: PPUSH
19674: LD_INT 8
19676: PPUSH
19677: LD_INT 9
19679: PPUSH
19680: LD_STRING 
19682: PPUSH
19683: CALL 16690 0 4
19687: ADD
19688: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19689: LD_ADDR_VAR 0 2
19693: PUSH
19694: LD_VAR 0 2
19698: PUSH
19699: CALL 16655 0 0
19703: PPUSH
19704: LD_INT 8
19706: PPUSH
19707: LD_INT 9
19709: PPUSH
19710: LD_STRING 
19712: PPUSH
19713: CALL 16690 0 4
19717: ADD
19718: ST_TO_ADDR
// ARABI_VOJACI = pom ;
19719: LD_ADDR_EXP 64
19723: PUSH
19724: LD_VAR 0 2
19728: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19729: LD_ADDR_OWVAR 40
19733: PUSH
19734: LD_INT 28
19736: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19737: LD_ADDR_OWVAR 37
19741: PUSH
19742: LD_INT 14
19744: ST_TO_ADDR
// vc_control = control_manual ;
19745: LD_ADDR_OWVAR 38
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// vc_engine = engine_combustion ;
19753: LD_ADDR_OWVAR 39
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// av = CreateVehicle ;
19761: LD_ADDR_LOC 24
19765: PUSH
19766: CALL_OW 45
19770: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19771: LD_ADDR_LOC 23
19775: PUSH
19776: CALL 16655 0 0
19780: PPUSH
19781: LD_INT 3
19783: PPUSH
19784: LD_INT 9
19786: PPUSH
19787: LD_STRING 
19789: PPUSH
19790: CALL 16690 0 4
19794: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19795: LD_LOC 23
19799: PPUSH
19800: LD_LOC 24
19804: PPUSH
19805: CALL_OW 52
// pom = av ;
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: LD_LOC 24
19818: ST_TO_ADDR
// av = CreateVehicle ;
19819: LD_ADDR_LOC 24
19823: PUSH
19824: CALL_OW 45
19828: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19829: LD_ADDR_LOC 23
19833: PUSH
19834: CALL 16655 0 0
19838: PPUSH
19839: LD_INT 3
19841: PPUSH
19842: LD_INT 8
19844: PPUSH
19845: LD_STRING 
19847: PPUSH
19848: CALL 16690 0 4
19852: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19853: LD_LOC 23
19857: PPUSH
19858: LD_LOC 24
19862: PPUSH
19863: CALL_OW 52
// pom = pom ^ av ;
19867: LD_ADDR_VAR 0 2
19871: PUSH
19872: LD_VAR 0 2
19876: PUSH
19877: LD_LOC 24
19881: ADD
19882: ST_TO_ADDR
// av = CreateVehicle ;
19883: LD_ADDR_LOC 24
19887: PUSH
19888: CALL_OW 45
19892: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19893: LD_ADDR_LOC 23
19897: PUSH
19898: CALL 16655 0 0
19902: PPUSH
19903: LD_INT 3
19905: PPUSH
19906: LD_INT 8
19908: PPUSH
19909: LD_STRING 
19911: PPUSH
19912: CALL 16690 0 4
19916: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19917: LD_LOC 23
19921: PPUSH
19922: LD_LOC 24
19926: PPUSH
19927: CALL_OW 52
// pom = pom ^ av ;
19931: LD_ADDR_VAR 0 2
19935: PUSH
19936: LD_VAR 0 2
19940: PUSH
19941: LD_LOC 24
19945: ADD
19946: ST_TO_ADDR
// ARABI_doraz = pom ;
19947: LD_ADDR_EXP 65
19951: PUSH
19952: LD_VAR 0 2
19956: ST_TO_ADDR
// end ;
19957: LD_VAR 0 1
19961: RET
// export function create_ruske_posily_na_omicron ; var pom ; begin
19962: LD_INT 0
19964: PPUSH
19965: PPUSH
// pom = [ ] ;
19966: LD_ADDR_VAR 0 2
19970: PUSH
19971: EMPTY
19972: ST_TO_ADDR
// uc_side = You2 ;
19973: LD_ADDR_OWVAR 20
19977: PUSH
19978: LD_EXP 2
19982: ST_TO_ADDR
// uc_nation = nation_russian ;
19983: LD_ADDR_OWVAR 21
19987: PUSH
19988: LD_INT 3
19990: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
19991: LD_ADDR_OWVAR 37
19995: PUSH
19996: LD_INT 23
19998: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
19999: LD_ADDR_OWVAR 40
20003: PUSH
20004: LD_INT 43
20006: ST_TO_ADDR
// vc_control = control_manual ;
20007: LD_ADDR_OWVAR 38
20011: PUSH
20012: LD_INT 1
20014: ST_TO_ADDR
// vc_engine = engine_combustion ;
20015: LD_ADDR_OWVAR 39
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20023: LD_ADDR_LOC 23
20027: PUSH
20028: CALL 16655 0 0
20032: PPUSH
20033: LD_INT 3
20035: PPUSH
20036: LD_EXP 20
20040: PUSH
20041: LD_OWVAR 67
20045: ARRAY
20046: PPUSH
20047: LD_STRING 
20049: PPUSH
20050: CALL 16690 0 4
20054: ST_TO_ADDR
// av = CreateVehicle ;
20055: LD_ADDR_LOC 24
20059: PUSH
20060: CALL_OW 45
20064: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20065: LD_LOC 23
20069: PPUSH
20070: LD_LOC 24
20074: PPUSH
20075: CALL_OW 52
// pom = pom ^ av ;
20079: LD_ADDR_VAR 0 2
20083: PUSH
20084: LD_VAR 0 2
20088: PUSH
20089: LD_LOC 24
20093: ADD
20094: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] + 1 ,  ) ;
20095: LD_ADDR_LOC 23
20099: PUSH
20100: CALL 16655 0 0
20104: PPUSH
20105: LD_INT 3
20107: PPUSH
20108: LD_EXP 20
20112: PUSH
20113: LD_OWVAR 67
20117: ARRAY
20118: PUSH
20119: LD_INT 1
20121: PLUS
20122: PPUSH
20123: LD_STRING 
20125: PPUSH
20126: CALL 16690 0 4
20130: ST_TO_ADDR
// av = CreateVehicle ;
20131: LD_ADDR_LOC 24
20135: PUSH
20136: CALL_OW 45
20140: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20141: LD_LOC 23
20145: PPUSH
20146: LD_LOC 24
20150: PPUSH
20151: CALL_OW 52
// pom = pom ^ av ;
20155: LD_ADDR_VAR 0 2
20159: PUSH
20160: LD_VAR 0 2
20164: PUSH
20165: LD_LOC 24
20169: ADD
20170: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20171: LD_ADDR_LOC 23
20175: PUSH
20176: CALL 16655 0 0
20180: PPUSH
20181: LD_INT 3
20183: PPUSH
20184: LD_EXP 20
20188: PUSH
20189: LD_OWVAR 67
20193: ARRAY
20194: PPUSH
20195: LD_STRING 
20197: PPUSH
20198: CALL 16690 0 4
20202: ST_TO_ADDR
// vc_weapon = ru_gun ;
20203: LD_ADDR_OWVAR 40
20207: PUSH
20208: LD_INT 44
20210: ST_TO_ADDR
// av = CreateVehicle ;
20211: LD_ADDR_LOC 24
20215: PUSH
20216: CALL_OW 45
20220: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20221: LD_LOC 23
20225: PPUSH
20226: LD_LOC 24
20230: PPUSH
20231: CALL_OW 52
// pom = pom ^ av ;
20235: LD_ADDR_VAR 0 2
20239: PUSH
20240: LD_VAR 0 2
20244: PUSH
20245: LD_LOC 24
20249: ADD
20250: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] - 1 ,  ) ;
20251: LD_ADDR_LOC 23
20255: PUSH
20256: CALL 16655 0 0
20260: PPUSH
20261: LD_INT 3
20263: PPUSH
20264: LD_EXP 20
20268: PUSH
20269: LD_OWVAR 67
20273: ARRAY
20274: PUSH
20275: LD_INT 1
20277: MINUS
20278: PPUSH
20279: LD_STRING 
20281: PPUSH
20282: CALL 16690 0 4
20286: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
20287: LD_ADDR_OWVAR 37
20291: PUSH
20292: LD_INT 22
20294: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
20295: LD_ADDR_OWVAR 40
20299: PUSH
20300: LD_INT 42
20302: ST_TO_ADDR
// av = CreateVehicle ;
20303: LD_ADDR_LOC 24
20307: PUSH
20308: CALL_OW 45
20312: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20313: LD_LOC 23
20317: PPUSH
20318: LD_LOC 24
20322: PPUSH
20323: CALL_OW 52
// pom = pom ^ av ;
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_VAR 0 2
20336: PUSH
20337: LD_LOC 24
20341: ADD
20342: ST_TO_ADDR
// RUSKE_POSILY_NA_OMICRON_LIST = pom ;
20343: LD_ADDR_EXP 56
20347: PUSH
20348: LD_VAR 0 2
20352: ST_TO_ADDR
// pom = [ ] ;
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: EMPTY
20359: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20360: LD_ADDR_LOC 23
20364: PUSH
20365: CALL 16655 0 0
20369: PPUSH
20370: LD_INT 3
20372: PPUSH
20373: LD_EXP 20
20377: PUSH
20378: LD_OWVAR 67
20382: ARRAY
20383: PPUSH
20384: LD_STRING 
20386: PPUSH
20387: CALL 16690 0 4
20391: ST_TO_ADDR
// pom = pom ^ ah ;
20392: LD_ADDR_VAR 0 2
20396: PUSH
20397: LD_VAR 0 2
20401: PUSH
20402: LD_LOC 23
20406: ADD
20407: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20408: LD_ADDR_LOC 23
20412: PUSH
20413: CALL 16655 0 0
20417: PPUSH
20418: LD_INT 3
20420: PPUSH
20421: LD_EXP 20
20425: PUSH
20426: LD_OWVAR 67
20430: ARRAY
20431: PPUSH
20432: LD_STRING 
20434: PPUSH
20435: CALL 16690 0 4
20439: ST_TO_ADDR
// pom = pom ^ ah ;
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: LD_VAR 0 2
20449: PUSH
20450: LD_LOC 23
20454: ADD
20455: ST_TO_ADDR
// RUSKE_POSILY_RIDICI_LIST = pom ;
20456: LD_ADDR_EXP 57
20460: PUSH
20461: LD_VAR 0 2
20465: ST_TO_ADDR
// end ;
20466: LD_VAR 0 1
20470: RET
// export function create_dalsi_ridici ( auta ) ; var i , pom ; var poc ; begin
20471: LD_INT 0
20473: PPUSH
20474: PPUSH
20475: PPUSH
20476: PPUSH
// uc_side = You2 ;
20477: LD_ADDR_OWVAR 20
20481: PUSH
20482: LD_EXP 2
20486: ST_TO_ADDR
// uc_nation = nation_russian ;
20487: LD_ADDR_OWVAR 21
20491: PUSH
20492: LD_INT 3
20494: ST_TO_ADDR
// pom = [ ] ;
20495: LD_ADDR_VAR 0 4
20499: PUSH
20500: EMPTY
20501: ST_TO_ADDR
// poc = 0 ;
20502: LD_ADDR_VAR 0 5
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// for i in auta do
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_VAR 0 1
20519: PUSH
20520: FOR_IN
20521: IFFALSE 20587
// begin poc = poc + 1 ;
20523: LD_ADDR_VAR 0 5
20527: PUSH
20528: LD_VAR 0 5
20532: PUSH
20533: LD_INT 1
20535: PLUS
20536: ST_TO_ADDR
// if poc < 3 then
20537: LD_VAR 0 5
20541: PUSH
20542: LD_INT 3
20544: LESS
20545: IFFALSE 20585
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20547: LD_ADDR_VAR 0 4
20551: PUSH
20552: LD_VAR 0 4
20556: PUSH
20557: CALL 16655 0 0
20561: PPUSH
20562: LD_INT 3
20564: PPUSH
20565: LD_EXP 20
20569: PUSH
20570: LD_OWVAR 67
20574: ARRAY
20575: PPUSH
20576: LD_STRING 
20578: PPUSH
20579: CALL 16690 0 4
20583: ADD
20584: ST_TO_ADDR
// end ;
20585: GO 20520
20587: POP
20588: POP
// result := pom ;
20589: LD_ADDR_VAR 0 2
20593: PUSH
20594: LD_VAR 0 4
20598: ST_TO_ADDR
// end ;
20599: LD_VAR 0 2
20603: RET
// export function create_am_jednotky ; begin
20604: LD_INT 0
20606: PPUSH
// SetSide ( kur , You2 ) ;
20607: LD_EXP 27
20611: PPUSH
20612: LD_EXP 2
20616: PPUSH
20617: CALL_OW 235
// PlaceUnitXY ( kur , 149 , 79 , false ) ;
20621: LD_EXP 27
20625: PPUSH
20626: LD_INT 149
20628: PPUSH
20629: LD_INT 79
20631: PPUSH
20632: LD_INT 0
20634: PPUSH
20635: CALL_OW 48
// if BELKOV_SAVED then
20639: LD_EXP 24
20643: IFFALSE 20689
// begin SetSide ( bel , You2 ) ;
20645: LD_EXP 32
20649: PPUSH
20650: LD_EXP 2
20654: PPUSH
20655: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
20659: LD_EXP 32
20663: PPUSH
20664: LD_INT 1
20666: PPUSH
20667: CALL_OW 336
// PlaceUnitXY ( bel , 141 , 80 , false ) ;
20671: LD_EXP 32
20675: PPUSH
20676: LD_INT 141
20678: PPUSH
20679: LD_INT 80
20681: PPUSH
20682: LD_INT 0
20684: PPUSH
20685: CALL_OW 48
// end ; if kov <> 0 then
20689: LD_EXP 30
20693: PUSH
20694: LD_INT 0
20696: NONEQUAL
20697: IFFALSE 20743
// begin SetSide ( kov , You ) ;
20699: LD_EXP 30
20703: PPUSH
20704: LD_EXP 1
20708: PPUSH
20709: CALL_OW 235
// SetClass ( kov , class_soldier ) ;
20713: LD_EXP 30
20717: PPUSH
20718: LD_INT 1
20720: PPUSH
20721: CALL_OW 336
// PlaceUnitXY ( kov , 142 , 80 , false ) ;
20725: LD_EXP 30
20729: PPUSH
20730: LD_INT 142
20732: PPUSH
20733: LD_INT 80
20735: PPUSH
20736: LD_INT 0
20738: PPUSH
20739: CALL_OW 48
// end ; SetClass ( bur , class_mechanic ) ;
20743: LD_EXP 29
20747: PPUSH
20748: LD_INT 3
20750: PPUSH
20751: CALL_OW 336
// SetSide ( bur , You ) ;
20755: LD_EXP 29
20759: PPUSH
20760: LD_EXP 1
20764: PPUSH
20765: CALL_OW 235
// PlaceUnitXY ( bur , 144 , 80 , false ) ;
20769: LD_EXP 29
20773: PPUSH
20774: LD_INT 144
20776: PPUSH
20777: LD_INT 80
20779: PPUSH
20780: LD_INT 0
20782: PPUSH
20783: CALL_OW 48
// if gny <> 0 then
20787: LD_EXP 31
20791: PUSH
20792: LD_INT 0
20794: NONEQUAL
20795: IFFALSE 20853
// begin SetClass ( gny , class_soldier ) ;
20797: LD_EXP 31
20801: PPUSH
20802: LD_INT 1
20804: PPUSH
20805: CALL_OW 336
// SetSide ( gny , You ) ;
20809: LD_EXP 31
20813: PPUSH
20814: LD_EXP 1
20818: PPUSH
20819: CALL_OW 235
// SetClass ( gny , class_mechanic ) ;
20823: LD_EXP 31
20827: PPUSH
20828: LD_INT 3
20830: PPUSH
20831: CALL_OW 336
// PlaceUnitXY ( gny , 142 , 79 , false ) ;
20835: LD_EXP 31
20839: PPUSH
20840: LD_INT 142
20842: PPUSH
20843: LD_INT 79
20845: PPUSH
20846: LD_INT 0
20848: PPUSH
20849: CALL_OW 48
// end ; SetSide ( pop , You2 ) ;
20853: LD_EXP 28
20857: PPUSH
20858: LD_EXP 2
20862: PPUSH
20863: CALL_OW 235
// PlaceUnitXY ( pop , 136 , 79 , false ) ;
20867: LD_EXP 28
20871: PPUSH
20872: LD_INT 136
20874: PPUSH
20875: LD_INT 79
20877: PPUSH
20878: LD_INT 0
20880: PPUSH
20881: CALL_OW 48
// end ;
20885: LD_VAR 0 1
20889: RET
// export function nacti_osobu ( ident ) ; begin
20890: LD_INT 0
20892: PPUSH
// if CheckCharacterSet ( ident ) then
20893: LD_VAR 0 1
20897: PPUSH
20898: CALL_OW 29
20902: IFFALSE 20921
// result := CreateCharacter ( ident ) else
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 34
20918: ST_TO_ADDR
20919: GO 20929
// result := 0 ;
20921: LD_ADDR_VAR 0 2
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// end ;
20929: LD_VAR 0 2
20933: RET
// export function create_arabi_komanda ; var pom ; begin
20934: LD_INT 0
20936: PPUSH
20937: PPUSH
// uc_side = Arabi ;
20938: LD_ADDR_OWVAR 20
20942: PUSH
20943: LD_EXP 5
20947: ST_TO_ADDR
// uc_nation = nation_arabian ;
20948: LD_ADDR_OWVAR 21
20952: PUSH
20953: LD_INT 2
20955: ST_TO_ADDR
// pom = [ ] ;
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: EMPTY
20962: ST_TO_ADDR
// pom = get_human ( sex_female , class_soldier , 8 ,  ) ;
20963: LD_ADDR_VAR 0 2
20967: PUSH
20968: LD_INT 2
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: LD_INT 8
20976: PPUSH
20977: LD_STRING 
20979: PPUSH
20980: CALL 16690 0 4
20984: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20985: LD_ADDR_VAR 0 2
20989: PUSH
20990: LD_VAR 0 2
20994: PUSH
20995: CALL 16655 0 0
20999: PPUSH
21000: LD_INT 1
21002: PPUSH
21003: LD_INT 6
21005: PPUSH
21006: LD_STRING 
21008: PPUSH
21009: CALL 16690 0 4
21013: ADD
21014: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21015: LD_ADDR_VAR 0 2
21019: PUSH
21020: LD_VAR 0 2
21024: PUSH
21025: CALL 16655 0 0
21029: PPUSH
21030: LD_INT 1
21032: PPUSH
21033: LD_INT 6
21035: PPUSH
21036: LD_STRING 
21038: PPUSH
21039: CALL 16690 0 4
21043: ADD
21044: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_VAR 0 2
21054: PUSH
21055: CALL 16655 0 0
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: LD_INT 6
21065: PPUSH
21066: LD_STRING 
21068: PPUSH
21069: CALL 16690 0 4
21073: ADD
21074: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21075: LD_ADDR_LOC 23
21079: PUSH
21080: CALL 16655 0 0
21084: PPUSH
21085: LD_INT 3
21087: PPUSH
21088: LD_INT 6
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: CALL 16690 0 4
21098: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
21099: LD_ADDR_OWVAR 40
21103: PUSH
21104: LD_INT 25
21106: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21107: LD_ADDR_OWVAR 37
21111: PUSH
21112: LD_INT 13
21114: ST_TO_ADDR
// vc_control = control_manual ;
21115: LD_ADDR_OWVAR 38
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// vc_engine = engine_solar ;
21123: LD_ADDR_OWVAR 39
21127: PUSH
21128: LD_INT 2
21130: ST_TO_ADDR
// av = CreateVehicle ;
21131: LD_ADDR_LOC 24
21135: PUSH
21136: CALL_OW 45
21140: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21141: LD_LOC 23
21145: PPUSH
21146: LD_LOC 24
21150: PPUSH
21151: CALL_OW 52
// pom = pom ^ av ;
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_VAR 0 2
21164: PUSH
21165: LD_LOC 24
21169: ADD
21170: ST_TO_ADDR
// vc_weapon = ar_gun ;
21171: LD_ADDR_OWVAR 40
21175: PUSH
21176: LD_INT 27
21178: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21179: LD_ADDR_OWVAR 37
21183: PUSH
21184: LD_INT 14
21186: ST_TO_ADDR
// vc_control = control_apeman ;
21187: LD_ADDR_OWVAR 38
21191: PUSH
21192: LD_INT 5
21194: ST_TO_ADDR
// vc_engine = engine_combustion ;
21195: LD_ADDR_OWVAR 39
21199: PUSH
21200: LD_INT 1
21202: ST_TO_ADDR
// av = CreateVehicle ;
21203: LD_ADDR_LOC 24
21207: PUSH
21208: CALL_OW 45
21212: ST_TO_ADDR
// pom = pom ^ av ;
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_VAR 0 2
21222: PUSH
21223: LD_LOC 24
21227: ADD
21228: ST_TO_ADDR
// vc_weapon = ar_gun ;
21229: LD_ADDR_OWVAR 40
21233: PUSH
21234: LD_INT 27
21236: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21237: LD_ADDR_OWVAR 37
21241: PUSH
21242: LD_INT 14
21244: ST_TO_ADDR
// vc_control = control_apeman ;
21245: LD_ADDR_OWVAR 38
21249: PUSH
21250: LD_INT 5
21252: ST_TO_ADDR
// vc_engine = engine_combustion ;
21253: LD_ADDR_OWVAR 39
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// av = CreateVehicle ;
21261: LD_ADDR_LOC 24
21265: PUSH
21266: CALL_OW 45
21270: ST_TO_ADDR
// pom = pom ^ av ;
21271: LD_ADDR_VAR 0 2
21275: PUSH
21276: LD_VAR 0 2
21280: PUSH
21281: LD_LOC 24
21285: ADD
21286: ST_TO_ADDR
// Arabi_komanda1 = pom ;
21287: LD_ADDR_EXP 67
21291: PUSH
21292: LD_VAR 0 2
21296: ST_TO_ADDR
// Arabi_komanda2 = pom ;
21297: LD_ADDR_EXP 68
21301: PUSH
21302: LD_VAR 0 2
21306: ST_TO_ADDR
// vc_weapon = ar_gun ;
21307: LD_ADDR_OWVAR 40
21311: PUSH
21312: LD_INT 27
21314: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21315: LD_ADDR_OWVAR 37
21319: PUSH
21320: LD_INT 14
21322: ST_TO_ADDR
// vc_control = control_apeman ;
21323: LD_ADDR_OWVAR 38
21327: PUSH
21328: LD_INT 5
21330: ST_TO_ADDR
// vc_engine = engine_combustion ;
21331: LD_ADDR_OWVAR 39
21335: PUSH
21336: LD_INT 1
21338: ST_TO_ADDR
// av = CreateVehicle ;
21339: LD_ADDR_LOC 24
21343: PUSH
21344: CALL_OW 45
21348: ST_TO_ADDR
// pom = pom ^ av ;
21349: LD_ADDR_VAR 0 2
21353: PUSH
21354: LD_VAR 0 2
21358: PUSH
21359: LD_LOC 24
21363: ADD
21364: ST_TO_ADDR
// av = CreateVehicle ;
21365: LD_ADDR_LOC 24
21369: PUSH
21370: CALL_OW 45
21374: ST_TO_ADDR
// pom = pom ^ av ;
21375: LD_ADDR_VAR 0 2
21379: PUSH
21380: LD_VAR 0 2
21384: PUSH
21385: LD_LOC 24
21389: ADD
21390: ST_TO_ADDR
// vc_weapon = ar_gun ;
21391: LD_ADDR_OWVAR 40
21395: PUSH
21396: LD_INT 27
21398: ST_TO_ADDR
// av = CreateVehicle ;
21399: LD_ADDR_LOC 24
21403: PUSH
21404: CALL_OW 45
21408: ST_TO_ADDR
// pom = pom ^ av ;
21409: LD_ADDR_VAR 0 2
21413: PUSH
21414: LD_VAR 0 2
21418: PUSH
21419: LD_LOC 24
21423: ADD
21424: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21425: LD_ADDR_VAR 0 2
21429: PUSH
21430: LD_VAR 0 2
21434: PUSH
21435: CALL 16655 0 0
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: LD_INT 6
21445: PPUSH
21446: LD_STRING 
21448: PPUSH
21449: CALL 16690 0 4
21453: ADD
21454: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: LD_VAR 0 2
21464: PUSH
21465: CALL 16655 0 0
21469: PPUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_INT 6
21475: PPUSH
21476: LD_STRING 
21478: PPUSH
21479: CALL 16690 0 4
21483: ADD
21484: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21485: LD_ADDR_LOC 23
21489: PUSH
21490: CALL 16655 0 0
21494: PPUSH
21495: LD_INT 3
21497: PPUSH
21498: LD_INT 6
21500: PPUSH
21501: LD_STRING 
21503: PPUSH
21504: CALL 16690 0 4
21508: ST_TO_ADDR
// vc_weapon = ar_gun ;
21509: LD_ADDR_OWVAR 40
21513: PUSH
21514: LD_INT 27
21516: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21517: LD_ADDR_OWVAR 37
21521: PUSH
21522: LD_INT 13
21524: ST_TO_ADDR
// vc_control = control_manual ;
21525: LD_ADDR_OWVAR 38
21529: PUSH
21530: LD_INT 1
21532: ST_TO_ADDR
// vc_engine = engine_siberite ;
21533: LD_ADDR_OWVAR 39
21537: PUSH
21538: LD_INT 3
21540: ST_TO_ADDR
// av = CreateVehicle ;
21541: LD_ADDR_LOC 24
21545: PUSH
21546: CALL_OW 45
21550: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21551: LD_LOC 23
21555: PPUSH
21556: LD_LOC 24
21560: PPUSH
21561: CALL_OW 52
// pom = pom ^ av ;
21565: LD_ADDR_VAR 0 2
21569: PUSH
21570: LD_VAR 0 2
21574: PUSH
21575: LD_LOC 24
21579: ADD
21580: ST_TO_ADDR
// Arabi_komanda3 = pom ;
21581: LD_ADDR_EXP 69
21585: PUSH
21586: LD_VAR 0 2
21590: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 8 ,  ) ;
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: CALL 16655 0 0
21600: PPUSH
21601: LD_INT 1
21603: PPUSH
21604: LD_INT 8
21606: PPUSH
21607: LD_STRING 
21609: PPUSH
21610: CALL 16690 0 4
21614: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21615: LD_ADDR_VAR 0 2
21619: PUSH
21620: LD_VAR 0 2
21624: PUSH
21625: CALL 16655 0 0
21629: PPUSH
21630: LD_INT 1
21632: PPUSH
21633: LD_INT 6
21635: PPUSH
21636: LD_STRING 
21638: PPUSH
21639: CALL 16690 0 4
21643: ADD
21644: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21645: LD_ADDR_VAR 0 2
21649: PUSH
21650: LD_VAR 0 2
21654: PUSH
21655: CALL 16655 0 0
21659: PPUSH
21660: LD_INT 1
21662: PPUSH
21663: LD_INT 6
21665: PPUSH
21666: LD_STRING 
21668: PPUSH
21669: CALL 16690 0 4
21673: ADD
21674: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21675: LD_ADDR_VAR 0 2
21679: PUSH
21680: LD_VAR 0 2
21684: PUSH
21685: CALL 16655 0 0
21689: PPUSH
21690: LD_INT 8
21692: PPUSH
21693: LD_INT 6
21695: PPUSH
21696: LD_STRING 
21698: PPUSH
21699: CALL 16690 0 4
21703: ADD
21704: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21705: LD_ADDR_VAR 0 2
21709: PUSH
21710: LD_VAR 0 2
21714: PUSH
21715: CALL 16655 0 0
21719: PPUSH
21720: LD_INT 8
21722: PPUSH
21723: LD_INT 6
21725: PPUSH
21726: LD_STRING 
21728: PPUSH
21729: CALL 16690 0 4
21733: ADD
21734: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , 6 ,  ) ;
21735: LD_ADDR_VAR 0 2
21739: PUSH
21740: LD_VAR 0 2
21744: PUSH
21745: CALL 16655 0 0
21749: PPUSH
21750: LD_INT 4
21752: PPUSH
21753: LD_INT 6
21755: PPUSH
21756: LD_STRING 
21758: PPUSH
21759: CALL 16690 0 4
21763: ADD
21764: ST_TO_ADDR
// Arabi_komanda4 = pom ;
21765: LD_ADDR_EXP 70
21769: PUSH
21770: LD_VAR 0 2
21774: ST_TO_ADDR
// end ;
21775: LD_VAR 0 1
21779: RET
// export function create_ru_posily_ma_utek ; var pom ; begin
21780: LD_INT 0
21782: PPUSH
21783: PPUSH
// uc_side = You2 ;
21784: LD_ADDR_OWVAR 20
21788: PUSH
21789: LD_EXP 2
21793: ST_TO_ADDR
// uc_nation = nation_russian ;
21794: LD_ADDR_OWVAR 21
21798: PUSH
21799: LD_INT 3
21801: ST_TO_ADDR
// pom = [ ] ;
21802: LD_ADDR_VAR 0 2
21806: PUSH
21807: EMPTY
21808: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21809: LD_ADDR_LOC 23
21813: PUSH
21814: CALL 16655 0 0
21818: PPUSH
21819: LD_INT 3
21821: PPUSH
21822: LD_INT 3
21824: PPUSH
21825: LD_STRING 
21827: PPUSH
21828: CALL 16690 0 4
21832: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
21833: LD_ADDR_OWVAR 40
21837: PUSH
21838: LD_INT 42
21840: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
21841: LD_ADDR_OWVAR 37
21845: PUSH
21846: LD_INT 23
21848: ST_TO_ADDR
// vc_control = control_manual ;
21849: LD_ADDR_OWVAR 38
21853: PUSH
21854: LD_INT 1
21856: ST_TO_ADDR
// vc_engine = engine_combustion ;
21857: LD_ADDR_OWVAR 39
21861: PUSH
21862: LD_INT 1
21864: ST_TO_ADDR
// av = CreateVehicle ;
21865: LD_ADDR_LOC 24
21869: PUSH
21870: CALL_OW 45
21874: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21875: LD_LOC 23
21879: PPUSH
21880: LD_LOC 24
21884: PPUSH
21885: CALL_OW 52
// pom = pom ^ av ;
21889: LD_ADDR_VAR 0 2
21893: PUSH
21894: LD_VAR 0 2
21898: PUSH
21899: LD_LOC 24
21903: ADD
21904: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21905: LD_ADDR_LOC 23
21909: PUSH
21910: CALL 16655 0 0
21914: PPUSH
21915: LD_INT 3
21917: PPUSH
21918: LD_INT 3
21920: PPUSH
21921: LD_STRING 
21923: PPUSH
21924: CALL 16690 0 4
21928: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
21929: LD_ADDR_OWVAR 37
21933: PUSH
21934: LD_INT 21
21936: ST_TO_ADDR
// av = CreateVehicle ;
21937: LD_ADDR_LOC 24
21941: PUSH
21942: CALL_OW 45
21946: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21947: LD_LOC 23
21951: PPUSH
21952: LD_LOC 24
21956: PPUSH
21957: CALL_OW 52
// pom = pom ^ av ;
21961: LD_ADDR_VAR 0 2
21965: PUSH
21966: LD_VAR 0 2
21970: PUSH
21971: LD_LOC 24
21975: ADD
21976: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21977: LD_ADDR_VAR 0 2
21981: PUSH
21982: LD_VAR 0 2
21986: PUSH
21987: CALL 16655 0 0
21991: PPUSH
21992: LD_INT 1
21994: PPUSH
21995: LD_INT 3
21997: PPUSH
21998: LD_STRING 
22000: PPUSH
22001: CALL 16690 0 4
22005: ADD
22006: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22007: LD_ADDR_VAR 0 2
22011: PUSH
22012: LD_VAR 0 2
22016: PUSH
22017: CALL 16655 0 0
22021: PPUSH
22022: LD_INT 1
22024: PPUSH
22025: LD_INT 3
22027: PPUSH
22028: LD_STRING 
22030: PPUSH
22031: CALL 16690 0 4
22035: ADD
22036: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: LD_VAR 0 2
22046: PUSH
22047: CALL 16655 0 0
22051: PPUSH
22052: LD_INT 1
22054: PPUSH
22055: LD_INT 3
22057: PPUSH
22058: LD_STRING 
22060: PPUSH
22061: CALL 16690 0 4
22065: ADD
22066: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22067: LD_ADDR_VAR 0 2
22071: PUSH
22072: LD_VAR 0 2
22076: PUSH
22077: CALL 16655 0 0
22081: PPUSH
22082: LD_INT 3
22084: PPUSH
22085: LD_INT 3
22087: PPUSH
22088: LD_STRING 
22090: PPUSH
22091: CALL 16690 0 4
22095: ADD
22096: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22097: LD_ADDR_VAR 0 2
22101: PUSH
22102: LD_VAR 0 2
22106: PUSH
22107: CALL 16655 0 0
22111: PPUSH
22112: LD_INT 3
22114: PPUSH
22115: LD_INT 3
22117: PPUSH
22118: LD_STRING 
22120: PPUSH
22121: CALL 16690 0 4
22125: ADD
22126: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22127: LD_ADDR_VAR 0 2
22131: PUSH
22132: LD_VAR 0 2
22136: PUSH
22137: CALL 16655 0 0
22141: PPUSH
22142: LD_INT 3
22144: PPUSH
22145: LD_INT 3
22147: PPUSH
22148: LD_STRING 
22150: PPUSH
22151: CALL 16690 0 4
22155: ADD
22156: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22157: LD_ADDR_VAR 0 2
22161: PUSH
22162: LD_VAR 0 2
22166: PUSH
22167: CALL 16655 0 0
22171: PPUSH
22172: LD_INT 2
22174: PPUSH
22175: LD_INT 3
22177: PPUSH
22178: LD_STRING 
22180: PPUSH
22181: CALL 16690 0 4
22185: ADD
22186: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_VAR 0 2
22196: PUSH
22197: CALL 16655 0 0
22201: PPUSH
22202: LD_INT 2
22204: PPUSH
22205: LD_INT 3
22207: PPUSH
22208: LD_STRING 
22210: PPUSH
22211: CALL 16690 0 4
22215: ADD
22216: ST_TO_ADDR
// RU_posily_na_utek = pom ;
22217: LD_ADDR_EXP 58
22221: PUSH
22222: LD_VAR 0 2
22226: ST_TO_ADDR
// end ;
22227: LD_VAR 0 1
22231: RET
// export function create_arabi_na_posily_kirovu ; var pom ; begin
22232: LD_INT 0
22234: PPUSH
22235: PPUSH
// pom = [ ] ;
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: EMPTY
22242: ST_TO_ADDR
// uc_side = Arabi ;
22243: LD_ADDR_OWVAR 20
22247: PUSH
22248: LD_EXP 5
22252: ST_TO_ADDR
// uc_nation = nation_arabian ;
22253: LD_ADDR_OWVAR 21
22257: PUSH
22258: LD_INT 2
22260: ST_TO_ADDR
// vc_weapon = ar_gun ;
22261: LD_ADDR_OWVAR 40
22265: PUSH
22266: LD_INT 27
22268: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
22269: LD_ADDR_OWVAR 37
22273: PUSH
22274: LD_INT 14
22276: ST_TO_ADDR
// vc_control = control_apeman ;
22277: LD_ADDR_OWVAR 38
22281: PUSH
22282: LD_INT 5
22284: ST_TO_ADDR
// vc_engine = engine_combustion ;
22285: LD_ADDR_OWVAR 39
22289: PUSH
22290: LD_INT 1
22292: ST_TO_ADDR
// av = CreateVehicle ;
22293: LD_ADDR_LOC 24
22297: PUSH
22298: CALL_OW 45
22302: ST_TO_ADDR
// pom = pom ^ av ;
22303: LD_ADDR_VAR 0 2
22307: PUSH
22308: LD_VAR 0 2
22312: PUSH
22313: LD_LOC 24
22317: ADD
22318: ST_TO_ADDR
// av = CreateVehicle ;
22319: LD_ADDR_LOC 24
22323: PUSH
22324: CALL_OW 45
22328: ST_TO_ADDR
// pom = pom ^ av ;
22329: LD_ADDR_VAR 0 2
22333: PUSH
22334: LD_VAR 0 2
22338: PUSH
22339: LD_LOC 24
22343: ADD
22344: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22345: LD_ADDR_LOC 23
22349: PUSH
22350: CALL 16655 0 0
22354: PPUSH
22355: LD_INT 3
22357: PPUSH
22358: LD_INT 5
22360: PPUSH
22361: LD_STRING 
22363: PPUSH
22364: CALL 16690 0 4
22368: ST_TO_ADDR
// vc_control = control_manual ;
22369: LD_ADDR_OWVAR 38
22373: PUSH
22374: LD_INT 1
22376: ST_TO_ADDR
// av = CreateVehicle ;
22377: LD_ADDR_LOC 24
22381: PUSH
22382: CALL_OW 45
22386: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22387: LD_LOC 23
22391: PPUSH
22392: LD_LOC 24
22396: PPUSH
22397: CALL_OW 52
// pom = pom ^ av ;
22401: LD_ADDR_VAR 0 2
22405: PUSH
22406: LD_VAR 0 2
22410: PUSH
22411: LD_LOC 24
22415: ADD
22416: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22417: LD_ADDR_LOC 23
22421: PUSH
22422: CALL 16655 0 0
22426: PPUSH
22427: LD_INT 3
22429: PPUSH
22430: LD_INT 5
22432: PPUSH
22433: LD_STRING 
22435: PPUSH
22436: CALL 16690 0 4
22440: ST_TO_ADDR
// vc_control = control_manual ;
22441: LD_ADDR_OWVAR 38
22445: PUSH
22446: LD_INT 1
22448: ST_TO_ADDR
// av = CreateVehicle ;
22449: LD_ADDR_LOC 24
22453: PUSH
22454: CALL_OW 45
22458: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22459: LD_LOC 23
22463: PPUSH
22464: LD_LOC 24
22468: PPUSH
22469: CALL_OW 52
// pom = pom ^ av ;
22473: LD_ADDR_VAR 0 2
22477: PUSH
22478: LD_VAR 0 2
22482: PUSH
22483: LD_LOC 24
22487: ADD
22488: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22489: LD_ADDR_VAR 0 2
22493: PUSH
22494: LD_VAR 0 2
22498: PUSH
22499: CALL 16655 0 0
22503: PPUSH
22504: LD_INT 1
22506: PPUSH
22507: LD_INT 7
22509: PPUSH
22510: LD_STRING 
22512: PPUSH
22513: CALL 16690 0 4
22517: ADD
22518: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_VAR 0 2
22528: PUSH
22529: CALL 16655 0 0
22533: PPUSH
22534: LD_INT 1
22536: PPUSH
22537: LD_INT 7
22539: PPUSH
22540: LD_STRING 
22542: PPUSH
22543: CALL 16690 0 4
22547: ADD
22548: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22549: LD_ADDR_VAR 0 2
22553: PUSH
22554: LD_VAR 0 2
22558: PUSH
22559: CALL 16655 0 0
22563: PPUSH
22564: LD_INT 8
22566: PPUSH
22567: LD_INT 7
22569: PPUSH
22570: LD_STRING 
22572: PPUSH
22573: CALL 16690 0 4
22577: ADD
22578: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22579: LD_ADDR_VAR 0 2
22583: PUSH
22584: LD_VAR 0 2
22588: PUSH
22589: CALL 16655 0 0
22593: PPUSH
22594: LD_INT 8
22596: PPUSH
22597: LD_INT 7
22599: PPUSH
22600: LD_STRING 
22602: PPUSH
22603: CALL 16690 0 4
22607: ADD
22608: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22609: LD_ADDR_VAR 0 2
22613: PUSH
22614: LD_VAR 0 2
22618: PUSH
22619: CALL 16655 0 0
22623: PPUSH
22624: LD_INT 8
22626: PPUSH
22627: LD_INT 7
22629: PPUSH
22630: LD_STRING 
22632: PPUSH
22633: CALL 16690 0 4
22637: ADD
22638: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22639: LD_ADDR_VAR 0 2
22643: PUSH
22644: LD_VAR 0 2
22648: PUSH
22649: CALL 16655 0 0
22653: PPUSH
22654: LD_INT 8
22656: PPUSH
22657: LD_INT 7
22659: PPUSH
22660: LD_STRING 
22662: PPUSH
22663: CALL 16690 0 4
22667: ADD
22668: ST_TO_ADDR
// ARABI_KIROV_POSILY = pom ;
22669: LD_ADDR_EXP 66
22673: PUSH
22674: LD_VAR 0 2
22678: ST_TO_ADDR
// end ;
22679: LD_VAR 0 1
22683: RET
// export function create_cerpaci_ruske_auta ; var pom ; begin
22684: LD_INT 0
22686: PPUSH
22687: PPUSH
// pom = [ ] ;
22688: LD_ADDR_VAR 0 2
22692: PUSH
22693: EMPTY
22694: ST_TO_ADDR
// uc_nation = nation_russian ;
22695: LD_ADDR_OWVAR 21
22699: PUSH
22700: LD_INT 3
22702: ST_TO_ADDR
// uc_side = You2 ;
22703: LD_ADDR_OWVAR 20
22707: PUSH
22708: LD_EXP 2
22712: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
22713: LD_ADDR_OWVAR 40
22717: PUSH
22718: LD_INT 51
22720: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22721: LD_ADDR_OWVAR 37
22725: PUSH
22726: LD_INT 21
22728: ST_TO_ADDR
// vc_control = control_manual ;
22729: LD_ADDR_OWVAR 38
22733: PUSH
22734: LD_INT 1
22736: ST_TO_ADDR
// vc_engine = engine_combustion ;
22737: LD_ADDR_OWVAR 39
22741: PUSH
22742: LD_INT 1
22744: ST_TO_ADDR
// av = CreateVehicle ;
22745: LD_ADDR_LOC 24
22749: PUSH
22750: CALL_OW 45
22754: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22755: LD_ADDR_LOC 23
22759: PUSH
22760: CALL 16655 0 0
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: LD_INT 4
22770: PPUSH
22771: LD_STRING 
22773: PPUSH
22774: CALL 16690 0 4
22778: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22779: LD_LOC 23
22783: PPUSH
22784: LD_LOC 24
22788: PPUSH
22789: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22793: LD_LOC 24
22797: PPUSH
22798: LD_INT 2
22800: PPUSH
22801: LD_INT 100
22803: PPUSH
22804: CALL_OW 290
// pom = pom ^ av ;
22808: LD_ADDR_VAR 0 2
22812: PUSH
22813: LD_VAR 0 2
22817: PUSH
22818: LD_LOC 24
22822: ADD
22823: ST_TO_ADDR
// av = CreateVehicle ;
22824: LD_ADDR_LOC 24
22828: PUSH
22829: CALL_OW 45
22833: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22834: LD_ADDR_LOC 23
22838: PUSH
22839: CALL 16655 0 0
22843: PPUSH
22844: LD_INT 1
22846: PPUSH
22847: LD_INT 4
22849: PPUSH
22850: LD_STRING 
22852: PPUSH
22853: CALL 16690 0 4
22857: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22858: LD_LOC 23
22862: PPUSH
22863: LD_LOC 24
22867: PPUSH
22868: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22872: LD_LOC 24
22876: PPUSH
22877: LD_INT 2
22879: PPUSH
22880: LD_INT 100
22882: PPUSH
22883: CALL_OW 290
// pom = pom ^ av ;
22887: LD_ADDR_VAR 0 2
22891: PUSH
22892: LD_VAR 0 2
22896: PUSH
22897: LD_LOC 24
22901: ADD
22902: ST_TO_ADDR
// av = CreateVehicle ;
22903: LD_ADDR_LOC 24
22907: PUSH
22908: CALL_OW 45
22912: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22913: LD_ADDR_LOC 23
22917: PUSH
22918: CALL 16655 0 0
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: LD_INT 4
22928: PPUSH
22929: LD_STRING 
22931: PPUSH
22932: CALL 16690 0 4
22936: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22937: LD_LOC 23
22941: PPUSH
22942: LD_LOC 24
22946: PPUSH
22947: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22951: LD_LOC 24
22955: PPUSH
22956: LD_INT 2
22958: PPUSH
22959: LD_INT 100
22961: PPUSH
22962: CALL_OW 290
// pom = pom ^ av ;
22966: LD_ADDR_VAR 0 2
22970: PUSH
22971: LD_VAR 0 2
22975: PUSH
22976: LD_LOC 24
22980: ADD
22981: ST_TO_ADDR
// RUSI_CERPACI_AUTA_LIST = pom ;
22982: LD_ADDR_EXP 59
22986: PUSH
22987: LD_VAR 0 2
22991: ST_TO_ADDR
// end ; end_of_file
22992: LD_VAR 0 1
22996: RET
// var Am_hlidka ; var Am_pomoc ; export Am_posily ; export Prezite_posily ; every 0 0$0.1 do var i ;
22997: GO 22999
22999: DISABLE
23000: LD_INT 0
23002: PPUSH
// begin Am_hlidka = [ ] ;
23003: LD_ADDR_LOC 25
23007: PUSH
23008: EMPTY
23009: ST_TO_ADDR
// Am_pomoc = [ ] ;
23010: LD_ADDR_LOC 26
23014: PUSH
23015: EMPTY
23016: ST_TO_ADDR
// Prezite_posily = 0 ;
23017: LD_ADDR_EXP 73
23021: PUSH
23022: LD_INT 0
23024: ST_TO_ADDR
// for i in [ 101 , 102 , 103 ] do
23025: LD_ADDR_VAR 0 1
23029: PUSH
23030: LD_INT 101
23032: PUSH
23033: LD_INT 102
23035: PUSH
23036: LD_INT 103
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: PUSH
23044: FOR_IN
23045: IFFALSE 23054
// enable ( i ) end ;
23047: LD_VAR 0 1
23051: ENABLE_MARKED
23052: GO 23044
23054: POP
23055: POP
23056: PPOPN 1
23058: END
// export function PrepareOmicron ; var i , skill ; begin
23059: LD_INT 0
23061: PPUSH
23062: PPUSH
23063: PPUSH
// uc_side := 1 ;
23064: LD_ADDR_OWVAR 20
23068: PUSH
23069: LD_INT 1
23071: ST_TO_ADDR
// uc_nation := 1 ;
23072: LD_ADDR_OWVAR 21
23076: PUSH
23077: LD_INT 1
23079: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: LD_INT 4
23090: PUSH
23091: LD_INT 5
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: PUSH
23099: LD_OWVAR 67
23103: ARRAY
23104: ST_TO_ADDR
// for i = 1 to Difficulty do
23105: LD_ADDR_VAR 0 2
23109: PUSH
23110: DOUBLE
23111: LD_INT 1
23113: DEC
23114: ST_TO_ADDR
23115: LD_OWVAR 67
23119: PUSH
23120: FOR_TO
23121: IFFALSE 23161
// begin PrepareHuman ( false , 2 , skill ) ;
23123: LD_INT 0
23125: PPUSH
23126: LD_INT 2
23128: PPUSH
23129: LD_VAR 0 3
23133: PPUSH
23134: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 20 , 13 , 6 , false ) ;
23138: CALL_OW 44
23142: PPUSH
23143: LD_INT 20
23145: PPUSH
23146: LD_INT 13
23148: PPUSH
23149: LD_INT 6
23151: PPUSH
23152: LD_INT 0
23154: PPUSH
23155: CALL_OW 50
// end ;
23159: GO 23120
23161: POP
23162: POP
// if Difficulty > 1 then
23163: LD_OWVAR 67
23167: PUSH
23168: LD_INT 1
23170: GREATER
23171: IFFALSE 23183
// begin PlaceWeaponTurret ( Am_bu1 , us_gatling_gun ) ;
23173: LD_INT 7
23175: PPUSH
23176: LD_INT 4
23178: PPUSH
23179: CALL_OW 431
// end ; end ;
23183: LD_VAR 0 1
23187: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var i , engs , buildings ;
23188: LD_INT 22
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 25
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PPUSH
23212: CALL_OW 69
23216: IFFALSE 23421
23218: GO 23220
23220: DISABLE
23221: LD_INT 0
23223: PPUSH
23224: PPUSH
23225: PPUSH
// begin enable ;
23226: ENABLE
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23227: LD_ADDR_VAR 0 3
23231: PUSH
23232: LD_INT 22
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 4
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 3
23254: PUSH
23255: LD_INT 24
23257: PUSH
23258: LD_INT 1000
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: LIST
23273: PPUSH
23274: CALL_OW 69
23278: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
23279: LD_ADDR_VAR 0 2
23283: PUSH
23284: LD_INT 22
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 25
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: ST_TO_ADDR
// for i in engs do
23313: LD_ADDR_VAR 0 1
23317: PUSH
23318: LD_VAR 0 2
23322: PUSH
23323: FOR_IN
23324: IFFALSE 23419
// if not HasTask ( i ) and not IsInUnit ( i ) and not buildings then
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 314
23335: NOT
23336: PUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL_OW 310
23346: NOT
23347: AND
23348: PUSH
23349: LD_VAR 0 3
23353: NOT
23354: AND
23355: IFFALSE 23371
// ComEnterUnit ( i , Am_dep ) else
23357: LD_VAR 0 1
23361: PPUSH
23362: LD_INT 12
23364: PPUSH
23365: CALL_OW 120
23369: GO 23417
// if buildings then
23371: LD_VAR 0 3
23375: IFFALSE 23417
// if IsInUnit ( i ) then
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 310
23386: IFFALSE 23399
// ComExitBuilding ( i ) else
23388: LD_VAR 0 1
23392: PPUSH
23393: CALL_OW 122
23397: GO 23417
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
23399: LD_VAR 0 1
23403: PPUSH
23404: LD_VAR 0 3
23408: PUSH
23409: LD_INT 1
23411: ARRAY
23412: PPUSH
23413: CALL_OW 130
23417: GO 23323
23419: POP
23420: POP
// end ;
23421: PPOPN 3
23423: END
// every 0 0$1 do var budovy ;
23424: GO 23426
23426: DISABLE
23427: LD_INT 0
23429: PPUSH
// begin PrepareOmicron ;
23430: CALL 23059 0 0
// ComEnterUnit ( Am_pru1 , Am_bar2 ) ;
23434: LD_INT 26
23436: PPUSH
23437: LD_INT 25
23439: PPUSH
23440: CALL_OW 120
// ComEnterUnit ( Am_pru2 , Am_bar2 ) ;
23444: LD_INT 27
23446: PPUSH
23447: LD_INT 25
23449: PPUSH
23450: CALL_OW 120
// ComEnterUnit ( Am_pru3 , Am_bar2 ) ;
23454: LD_INT 28
23456: PPUSH
23457: LD_INT 25
23459: PPUSH
23460: CALL_OW 120
// ComEnterUnit ( Am_vb1 , Am_bu1 ) ;
23464: LD_INT 29
23466: PPUSH
23467: LD_INT 7
23469: PPUSH
23470: CALL_OW 120
// ComEnterUnit ( Am_vb2 , Am_bu2 ) ;
23474: LD_INT 30
23476: PPUSH
23477: LD_INT 8
23479: PPUSH
23480: CALL_OW 120
// ComEnterUnit ( Am_vb3 , Am_bu3 ) ;
23484: LD_INT 31
23486: PPUSH
23487: LD_INT 19
23489: PPUSH
23490: CALL_OW 120
// ComEnterUnit ( Am_vb4 , Am_bu4 ) ;
23494: LD_INT 32
23496: PPUSH
23497: LD_INT 18
23499: PPUSH
23500: CALL_OW 120
// ComEnterUnit ( Am_sol1 , Am_bar1 ) ;
23504: LD_INT 38
23506: PPUSH
23507: LD_INT 11
23509: PPUSH
23510: CALL_OW 120
// ComEnterUnit ( Am_sol2 , Am_bar1 ) ;
23514: LD_INT 39
23516: PPUSH
23517: LD_INT 11
23519: PPUSH
23520: CALL_OW 120
// ComEnterUnit ( Am_sol3 , Am_bar1 ) ;
23524: LD_INT 40
23526: PPUSH
23527: LD_INT 11
23529: PPUSH
23530: CALL_OW 120
// ComEnterUnit ( pitomec , Am_bar2 ) ;
23534: LD_INT 63
23536: PPUSH
23537: LD_INT 25
23539: PPUSH
23540: CALL_OW 120
// ComEnterUnit ( Am_sol4 , Am_dep ) ;
23544: LD_INT 41
23546: PPUSH
23547: LD_INT 12
23549: PPUSH
23550: CALL_OW 120
// ComEnterUnit ( Am_eng1 , Am_dep ) ;
23554: LD_INT 36
23556: PPUSH
23557: LD_INT 12
23559: PPUSH
23560: CALL_OW 120
// ComEnterUnit ( Am_sci1 , Am_lab ) ;
23564: LD_INT 37
23566: PPUSH
23567: LD_INT 9
23569: PPUSH
23570: CALL_OW 120
// ComEnterUnit ( Am_me1 , Am_fac ) ;
23574: LD_INT 33
23576: PPUSH
23577: LD_INT 10
23579: PPUSH
23580: CALL_OW 120
// ComEnterUnit ( Am_me2 , Am_fac ) ;
23584: LD_INT 34
23586: PPUSH
23587: LD_INT 10
23589: PPUSH
23590: CALL_OW 120
// ComEnterUnit ( Am_me3 , Am_fac ) ;
23594: LD_INT 35
23596: PPUSH
23597: LD_INT 10
23599: PPUSH
23600: CALL_OW 120
// budovy = [ Am_bu1 , Am_bu2 , Am_bu3 , Am_bu4 , Am_el1 , Am_el2 , Am_lab , Am_fac , Am_mine , Am_dep , Am_bar1 , Am_bar2 ] ;
23604: LD_ADDR_VAR 0 1
23608: PUSH
23609: LD_INT 7
23611: PUSH
23612: LD_INT 8
23614: PUSH
23615: LD_INT 19
23617: PUSH
23618: LD_INT 18
23620: PUSH
23621: LD_INT 22
23623: PUSH
23624: LD_INT 23
23626: PUSH
23627: LD_INT 9
23629: PUSH
23630: LD_INT 10
23632: PUSH
23633: LD_INT 24
23635: PUSH
23636: LD_INT 12
23638: PUSH
23639: LD_INT 11
23641: PUSH
23642: LD_INT 25
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: ST_TO_ADDR
// SetBLevel ( budovy , levely_am_budov [ difficulty ] ) ;
23659: LD_VAR 0 1
23663: PPUSH
23664: LD_EXP 21
23668: PUSH
23669: LD_OWVAR 67
23673: ARRAY
23674: PPUSH
23675: CALL_OW 241
// end ;
23679: PPOPN 1
23681: END
// export function amici_hlidka ; begin
23682: LD_INT 0
23684: PPUSH
// case difficulty of 1 :
23685: LD_OWVAR 67
23689: PUSH
23690: LD_INT 1
23692: DOUBLE
23693: EQUAL
23694: IFTRUE 23698
23696: GO 23712
23698: POP
// Am_hlidka = [ Am_pru1 ] ; 2 :
23699: LD_ADDR_LOC 25
23703: PUSH
23704: LD_INT 26
23706: PUSH
23707: EMPTY
23708: LIST
23709: ST_TO_ADDR
23710: GO 23769
23712: LD_INT 2
23714: DOUBLE
23715: EQUAL
23716: IFTRUE 23720
23718: GO 23738
23720: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 ] ; 3 :
23721: LD_ADDR_LOC 25
23725: PUSH
23726: LD_INT 26
23728: PUSH
23729: LD_INT 27
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: ST_TO_ADDR
23736: GO 23769
23738: LD_INT 3
23740: DOUBLE
23741: EQUAL
23742: IFTRUE 23746
23744: GO 23768
23746: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 , Am_pru3 ] ; end ;
23747: LD_ADDR_LOC 25
23751: PUSH
23752: LD_INT 26
23754: PUSH
23755: LD_INT 27
23757: PUSH
23758: LD_INT 28
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: LIST
23765: ST_TO_ADDR
23766: GO 23769
23768: POP
// ComExitBuilding ( Am_hlidka ) ;
23769: LD_LOC 25
23773: PPUSH
23774: CALL_OW 122
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23778: LD_LOC 25
23782: PPUSH
23783: LD_INT 34
23785: PPUSH
23786: LD_INT 16
23788: PPUSH
23789: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23793: LD_LOC 25
23797: PPUSH
23798: LD_INT 245
23800: PPUSH
23801: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23805: LD_LOC 25
23809: PPUSH
23810: LD_INT 51
23812: PPUSH
23813: LD_INT 19
23815: PPUSH
23816: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23820: LD_LOC 25
23824: PPUSH
23825: LD_INT 245
23827: PPUSH
23828: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23832: LD_LOC 25
23836: PPUSH
23837: LD_INT 54
23839: PPUSH
23840: LD_INT 5
23842: PPUSH
23843: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23847: LD_LOC 25
23851: PPUSH
23852: LD_INT 245
23854: PPUSH
23855: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23859: LD_LOC 25
23863: PPUSH
23864: LD_INT 77
23866: PPUSH
23867: LD_INT 16
23869: PPUSH
23870: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23874: LD_LOC 25
23878: PPUSH
23879: LD_INT 245
23881: PPUSH
23882: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23886: LD_LOC 25
23890: PPUSH
23891: LD_INT 81
23893: PPUSH
23894: LD_INT 32
23896: PPUSH
23897: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23901: LD_LOC 25
23905: PPUSH
23906: LD_INT 245
23908: PPUSH
23909: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23913: LD_LOC 25
23917: PPUSH
23918: LD_INT 73
23920: PPUSH
23921: LD_INT 32
23923: PPUSH
23924: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23928: LD_LOC 25
23932: PPUSH
23933: LD_INT 245
23935: PPUSH
23936: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
23940: LD_LOC 25
23944: PPUSH
23945: LD_INT 57
23947: PPUSH
23948: LD_INT 33
23950: PPUSH
23951: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23955: LD_LOC 25
23959: PPUSH
23960: LD_INT 245
23962: PPUSH
23963: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
23967: LD_LOC 25
23971: PPUSH
23972: LD_INT 45
23974: PPUSH
23975: LD_INT 24
23977: PPUSH
23978: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23982: LD_LOC 25
23986: PPUSH
23987: LD_INT 245
23989: PPUSH
23990: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
23994: LD_LOC 25
23998: PPUSH
23999: LD_INT 34
24001: PPUSH
24002: LD_INT 13
24004: PPUSH
24005: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24009: LD_LOC 25
24013: PPUSH
24014: LD_INT 245
24016: PPUSH
24017: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24021: LD_LOC 25
24025: PPUSH
24026: LD_INT 34
24028: PPUSH
24029: LD_INT 16
24031: PPUSH
24032: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24036: LD_LOC 25
24040: PPUSH
24041: LD_INT 245
24043: PPUSH
24044: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24048: LD_LOC 25
24052: PPUSH
24053: LD_INT 51
24055: PPUSH
24056: LD_INT 19
24058: PPUSH
24059: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24063: LD_LOC 25
24067: PPUSH
24068: LD_INT 245
24070: PPUSH
24071: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24075: LD_LOC 25
24079: PPUSH
24080: LD_INT 54
24082: PPUSH
24083: LD_INT 5
24085: PPUSH
24086: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24090: LD_LOC 25
24094: PPUSH
24095: LD_INT 245
24097: PPUSH
24098: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24102: LD_LOC 25
24106: PPUSH
24107: LD_INT 77
24109: PPUSH
24110: LD_INT 16
24112: PPUSH
24113: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24117: LD_LOC 25
24121: PPUSH
24122: LD_INT 245
24124: PPUSH
24125: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24129: LD_LOC 25
24133: PPUSH
24134: LD_INT 81
24136: PPUSH
24137: LD_INT 32
24139: PPUSH
24140: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24144: LD_LOC 25
24148: PPUSH
24149: LD_INT 245
24151: PPUSH
24152: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24156: LD_LOC 25
24160: PPUSH
24161: LD_INT 73
24163: PPUSH
24164: LD_INT 32
24166: PPUSH
24167: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24171: LD_LOC 25
24175: PPUSH
24176: LD_INT 245
24178: PPUSH
24179: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24183: LD_LOC 25
24187: PPUSH
24188: LD_INT 57
24190: PPUSH
24191: LD_INT 33
24193: PPUSH
24194: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24198: LD_LOC 25
24202: PPUSH
24203: LD_INT 245
24205: PPUSH
24206: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24210: LD_LOC 25
24214: PPUSH
24215: LD_INT 45
24217: PPUSH
24218: LD_INT 24
24220: PPUSH
24221: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24225: LD_LOC 25
24229: PPUSH
24230: LD_INT 245
24232: PPUSH
24233: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24237: LD_LOC 25
24241: PPUSH
24242: LD_INT 34
24244: PPUSH
24245: LD_INT 13
24247: PPUSH
24248: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24252: LD_LOC 25
24256: PPUSH
24257: LD_INT 245
24259: PPUSH
24260: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24264: LD_LOC 25
24268: PPUSH
24269: LD_INT 34
24271: PPUSH
24272: LD_INT 16
24274: PPUSH
24275: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24279: LD_LOC 25
24283: PPUSH
24284: LD_INT 245
24286: PPUSH
24287: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24291: LD_LOC 25
24295: PPUSH
24296: LD_INT 51
24298: PPUSH
24299: LD_INT 19
24301: PPUSH
24302: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24306: LD_LOC 25
24310: PPUSH
24311: LD_INT 245
24313: PPUSH
24314: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24318: LD_LOC 25
24322: PPUSH
24323: LD_INT 54
24325: PPUSH
24326: LD_INT 5
24328: PPUSH
24329: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24333: LD_LOC 25
24337: PPUSH
24338: LD_INT 245
24340: PPUSH
24341: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24345: LD_LOC 25
24349: PPUSH
24350: LD_INT 77
24352: PPUSH
24353: LD_INT 16
24355: PPUSH
24356: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24360: LD_LOC 25
24364: PPUSH
24365: LD_INT 245
24367: PPUSH
24368: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24372: LD_LOC 25
24376: PPUSH
24377: LD_INT 81
24379: PPUSH
24380: LD_INT 32
24382: PPUSH
24383: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24387: LD_LOC 25
24391: PPUSH
24392: LD_INT 245
24394: PPUSH
24395: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24399: LD_LOC 25
24403: PPUSH
24404: LD_INT 73
24406: PPUSH
24407: LD_INT 32
24409: PPUSH
24410: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24414: LD_LOC 25
24418: PPUSH
24419: LD_INT 245
24421: PPUSH
24422: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24426: LD_LOC 25
24430: PPUSH
24431: LD_INT 57
24433: PPUSH
24434: LD_INT 33
24436: PPUSH
24437: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24441: LD_LOC 25
24445: PPUSH
24446: LD_INT 245
24448: PPUSH
24449: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24453: LD_LOC 25
24457: PPUSH
24458: LD_INT 45
24460: PPUSH
24461: LD_INT 24
24463: PPUSH
24464: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24468: LD_LOC 25
24472: PPUSH
24473: LD_INT 245
24475: PPUSH
24476: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24480: LD_LOC 25
24484: PPUSH
24485: LD_INT 34
24487: PPUSH
24488: LD_INT 13
24490: PPUSH
24491: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24495: LD_LOC 25
24499: PPUSH
24500: LD_INT 245
24502: PPUSH
24503: CALL_OW 202
// enable ( 101 ) ;
24507: LD_INT 101
24509: ENABLE_MARKED
// enable ( 103 ) ;
24510: LD_INT 103
24512: ENABLE_MARKED
// enable ( 102 ) ;
24513: LD_INT 102
24515: ENABLE_MARKED
// end ;
24516: LD_VAR 0 1
24520: RET
// every 0 0$1 marked 102 do var i , j , pom ;
24521: GO 24523
24523: DISABLE
24524: LD_INT 0
24526: PPUSH
24527: PPUSH
24528: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
24529: LD_ADDR_VAR 0 3
24533: PUSH
24534: LD_INT 22
24536: PUSH
24537: LD_EXP 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 21
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PPUSH
24560: CALL_OW 69
24564: ST_TO_ADDR
// for i in Am_hlidka do
24565: LD_ADDR_VAR 0 1
24569: PUSH
24570: LD_LOC 25
24574: PUSH
24575: FOR_IN
24576: IFFALSE 24644
// if GetLives ( i ) < 1000 then
24578: LD_VAR 0 1
24582: PPUSH
24583: CALL_OW 256
24587: PUSH
24588: LD_INT 1000
24590: LESS
24591: IFFALSE 24642
// for j in pom do
24593: LD_ADDR_VAR 0 2
24597: PUSH
24598: LD_VAR 0 3
24602: PUSH
24603: FOR_IN
24604: IFFALSE 24640
// begin if See ( Amici , j ) then
24606: LD_EXP 4
24610: PPUSH
24611: LD_VAR 0 2
24615: PPUSH
24616: CALL_OW 292
24620: IFFALSE 24636
// ComAttackUnit ( Am_hlidka , j ) ;
24622: LD_LOC 25
24626: PPUSH
24627: LD_VAR 0 2
24631: PPUSH
24632: CALL_OW 115
// break ;
24636: GO 24640
// end ;
24638: GO 24603
24640: POP
24641: POP
24642: GO 24575
24644: POP
24645: POP
// end ;
24646: PPOPN 3
24648: END
// every 0 0$1 marked 101 do var i ; var jedn ; var posli ;
24649: GO 24651
24651: DISABLE
24652: LD_INT 0
24654: PPUSH
24655: PPUSH
24656: PPUSH
// begin jedn = [ ] ;
24657: LD_ADDR_VAR 0 2
24661: PUSH
24662: EMPTY
24663: ST_TO_ADDR
// posli = false ;
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: LD_INT 0
24671: ST_TO_ADDR
// for i in Am_hlidka do
24672: LD_ADDR_VAR 0 1
24676: PUSH
24677: LD_LOC 25
24681: PUSH
24682: FOR_IN
24683: IFFALSE 24718
// if GetLives ( i ) < 1000 then
24685: LD_VAR 0 1
24689: PPUSH
24690: CALL_OW 256
24694: PUSH
24695: LD_INT 1000
24697: LESS
24698: IFFALSE 24716
// jedn = jedn ^ i ;
24700: LD_ADDR_VAR 0 2
24704: PUSH
24705: LD_VAR 0 2
24709: PUSH
24710: LD_VAR 0 1
24714: ADD
24715: ST_TO_ADDR
24716: GO 24682
24718: POP
24719: POP
// if jedn > 0 then
24720: LD_VAR 0 2
24724: PUSH
24725: LD_INT 0
24727: GREATER
24728: IFFALSE 24773
// begin wait ( 0 0$7 ) ;
24730: LD_INT 245
24732: PPUSH
24733: CALL_OW 67
// for i in jedn do
24737: LD_ADDR_VAR 0 1
24741: PUSH
24742: LD_VAR 0 2
24746: PUSH
24747: FOR_IN
24748: IFFALSE 24771
// if IsOK ( i ) then
24750: LD_VAR 0 1
24754: PPUSH
24755: CALL_OW 302
24759: IFFALSE 24769
// posli = true ;
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_INT 1
24768: ST_TO_ADDR
24769: GO 24747
24771: POP
24772: POP
// end ; if posli then
24773: LD_VAR 0 3
24777: IFFALSE 24792
// americka_pomoc_hlidce ( jedn [ 1 ] ) ;
24779: LD_VAR 0 2
24783: PUSH
24784: LD_INT 1
24786: ARRAY
24787: PPUSH
24788: CALL 24951 0 1
// enable ;
24792: ENABLE
// end ;
24793: PPOPN 3
24795: END
// every 0 0$1 marked 102 do
24796: GO 24798
24798: DISABLE
// begin wait ( schol_find_amikama [ difficulty ] ) ;
24799: LD_EXP 12
24803: PUSH
24804: LD_OWVAR 67
24808: ARRAY
24809: PPUSH
24810: CALL_OW 67
// if GetSide ( schol ) = You or GetSide ( schol2 ) = You then
24814: LD_EXP 33
24818: PPUSH
24819: CALL_OW 255
24823: PUSH
24824: LD_EXP 1
24828: EQUAL
24829: PUSH
24830: LD_EXP 34
24834: PPUSH
24835: CALL_OW 255
24839: PUSH
24840: LD_EXP 1
24844: EQUAL
24845: OR
24846: IFFALSE 24852
// exit else
24848: GO 24881
24850: GO 24881
// begin ComAgressiveMove ( Am_hlidka , 38 , 2 ) ;
24852: LD_LOC 25
24856: PPUSH
24857: LD_INT 38
24859: PPUSH
24860: LD_INT 2
24862: PPUSH
24863: CALL_OW 114
// AddComAttackUnit ( Am_hlidka , schol2 ) ;
24867: LD_LOC 25
24871: PPUSH
24872: LD_EXP 34
24876: PPUSH
24877: CALL_OW 175
// end ; end ;
24881: END
// every 0 0$3 trigger scholtze_saved or IsDead ( schol2 ) do
24882: LD_EXP 37
24886: PUSH
24887: LD_EXP 34
24891: PPUSH
24892: CALL_OW 301
24896: OR
24897: IFFALSE 24950
24899: GO 24901
24901: DISABLE
// begin ComAgressiveMove ( Am_hlidka , 28 , 18 ) ;
24902: LD_LOC 25
24906: PPUSH
24907: LD_INT 28
24909: PPUSH
24910: LD_INT 18
24912: PPUSH
24913: CALL_OW 114
// AddComEnterUnit ( Am_hlidka , Am_bar2 ) ;
24917: LD_LOC 25
24921: PPUSH
24922: LD_INT 25
24924: PPUSH
24925: CALL_OW 180
// ComAgressiveMove ( Am_pomoc , 21 , 32 ) ;
24929: LD_LOC 26
24933: PPUSH
24934: LD_INT 21
24936: PPUSH
24937: LD_INT 32
24939: PPUSH
24940: CALL_OW 114
// disable ( 101 ) ;
24944: LD_INT 101
24946: DISABLE_MARKED
// disable ( 102 ) ;
24947: LD_INT 102
24949: DISABLE_MARKED
// end ;
24950: END
// function americka_pomoc_hlidce ( jedn ) ; var i ; begin
24951: LD_INT 0
24953: PPUSH
24954: PPUSH
// Am_pomoc = AMERICKA_POMOC_HLIDCE_LIST ;
24955: LD_ADDR_LOC 26
24959: PUSH
24960: LD_EXP 50
24964: ST_TO_ADDR
// while SeeArea ( Amici , Help_area ) > 0 do
24965: LD_EXP 4
24969: PPUSH
24970: LD_INT 3
24972: PPUSH
24973: CALL_OW 294
24977: PUSH
24978: LD_INT 0
24980: GREATER
24981: IFFALSE 24992
// wait ( 0 0$1 ) ;
24983: LD_INT 35
24985: PPUSH
24986: CALL_OW 67
24990: GO 24965
// for i in AMERICKA_POMOC_HLIDCE_LIST do
24992: LD_ADDR_VAR 0 3
24996: PUSH
24997: LD_EXP 50
25001: PUSH
25002: FOR_IN
25003: IFFALSE 25022
// PlaceUnitArea ( i , Help_area , false ) ;
25005: LD_VAR 0 3
25009: PPUSH
25010: LD_INT 3
25012: PPUSH
25013: LD_INT 0
25015: PPUSH
25016: CALL_OW 49
25020: GO 25002
25022: POP
25023: POP
// wait ( 0 0$1 ) ;
25024: LD_INT 35
25026: PPUSH
25027: CALL_OW 67
// ComAgressiveMove ( Am_pomoc , GetX ( jedn ) , GetY ( jedn ) ) ;
25031: LD_LOC 26
25035: PPUSH
25036: LD_VAR 0 1
25040: PPUSH
25041: CALL_OW 250
25045: PPUSH
25046: LD_VAR 0 1
25050: PPUSH
25051: CALL_OW 251
25055: PPUSH
25056: CALL_OW 114
// end ;
25060: LD_VAR 0 2
25064: RET
// every 0 0$10 do
25065: GO 25067
25067: DISABLE
// begin wait ( Rand ( 1 , 0 0$30 ) ) ;
25068: LD_INT 1
25070: PPUSH
25071: LD_INT 1050
25073: PPUSH
25074: CALL_OW 12
25078: PPUSH
25079: CALL_OW 67
// wait ( posily1 [ difficulty ] ) ;
25083: LD_EXP 14
25087: PUSH
25088: LD_OWVAR 67
25092: ARRAY
25093: PPUSH
25094: CALL_OW 67
// posli_posily ( 1 ) ;
25098: LD_INT 1
25100: PPUSH
25101: CALL 25194 0 1
// wait ( posily11 [ difficulty ] ) ;
25105: LD_EXP 15
25109: PUSH
25110: LD_OWVAR 67
25114: ARRAY
25115: PPUSH
25116: CALL_OW 67
// posli_posily ( 11 ) ;
25120: LD_INT 11
25122: PPUSH
25123: CALL 25194 0 1
// wait ( posily2 [ difficulty ] ) ;
25127: LD_EXP 16
25131: PUSH
25132: LD_OWVAR 67
25136: ARRAY
25137: PPUSH
25138: CALL_OW 67
// posli_posily ( 2 ) ;
25142: LD_INT 2
25144: PPUSH
25145: CALL 25194 0 1
// wait ( posily3 [ difficulty ] ) ;
25149: LD_EXP 17
25153: PUSH
25154: LD_OWVAR 67
25158: ARRAY
25159: PPUSH
25160: CALL_OW 67
// posli_posily ( 3 ) ;
25164: LD_INT 3
25166: PPUSH
25167: CALL 25194 0 1
// wait ( posily4 [ difficulty ] ) ;
25171: LD_EXP 18
25175: PUSH
25176: LD_OWVAR 67
25180: ARRAY
25181: PPUSH
25182: CALL_OW 67
// posli_posily ( 4 ) ;
25186: LD_INT 4
25188: PPUSH
25189: CALL 25194 0 1
// end ;
25193: END
// function posli_posily ( ktere ) ; var i , pom ; var poc ; begin
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
// case ktere of 1 :
25200: LD_VAR 0 1
25204: PUSH
25205: LD_INT 1
25207: DOUBLE
25208: EQUAL
25209: IFTRUE 25213
25211: GO 25248
25213: POP
// for i in AMERICKE_POSILY1_LIST do
25214: LD_ADDR_VAR 0 3
25218: PUSH
25219: LD_EXP 51
25223: PUSH
25224: FOR_IN
25225: IFFALSE 25244
// PlaceUnitArea ( i , posily_1 , false ) ; 2 :
25227: LD_VAR 0 3
25231: PPUSH
25232: LD_INT 4
25234: PPUSH
25235: LD_INT 0
25237: PPUSH
25238: CALL_OW 49
25242: GO 25224
25244: POP
25245: POP
25246: GO 25421
25248: LD_INT 2
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25291
25256: POP
// for i in AMERICKE_POSILY2_LIST do
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_EXP 52
25266: PUSH
25267: FOR_IN
25268: IFFALSE 25287
// PlaceUnitArea ( i , posily_3 , false ) ; 3 :
25270: LD_VAR 0 3
25274: PPUSH
25275: LD_INT 5
25277: PPUSH
25278: LD_INT 0
25280: PPUSH
25281: CALL_OW 49
25285: GO 25267
25287: POP
25288: POP
25289: GO 25421
25291: LD_INT 3
25293: DOUBLE
25294: EQUAL
25295: IFTRUE 25299
25297: GO 25334
25299: POP
// for i in AMERICKE_POSILY3_LIST do
25300: LD_ADDR_VAR 0 3
25304: PUSH
25305: LD_EXP 53
25309: PUSH
25310: FOR_IN
25311: IFFALSE 25330
// PlaceUnitArea ( i , posily_1 , false ) ; 4 :
25313: LD_VAR 0 3
25317: PPUSH
25318: LD_INT 4
25320: PPUSH
25321: LD_INT 0
25323: PPUSH
25324: CALL_OW 49
25328: GO 25310
25330: POP
25331: POP
25332: GO 25421
25334: LD_INT 4
25336: DOUBLE
25337: EQUAL
25338: IFTRUE 25342
25340: GO 25377
25342: POP
// for i in AMERICKE_POSILY4_LIST do
25343: LD_ADDR_VAR 0 3
25347: PUSH
25348: LD_EXP 54
25352: PUSH
25353: FOR_IN
25354: IFFALSE 25373
// PlaceUnitArea ( i , posily_3 , false ) ; 11 :
25356: LD_VAR 0 3
25360: PPUSH
25361: LD_INT 5
25363: PPUSH
25364: LD_INT 0
25366: PPUSH
25367: CALL_OW 49
25371: GO 25353
25373: POP
25374: POP
25375: GO 25421
25377: LD_INT 11
25379: DOUBLE
25380: EQUAL
25381: IFTRUE 25385
25383: GO 25420
25385: POP
// for i in AMERICKE_POSILY11_LIST do
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: LD_EXP 55
25395: PUSH
25396: FOR_IN
25397: IFFALSE 25416
// PlaceUnitArea ( i , posily_1 , false ) ; end ;
25399: LD_VAR 0 3
25403: PPUSH
25404: LD_INT 4
25406: PPUSH
25407: LD_INT 0
25409: PPUSH
25410: CALL_OW 49
25414: GO 25396
25416: POP
25417: POP
25418: GO 25421
25420: POP
// case ktere of 1 :
25421: LD_VAR 0 1
25425: PUSH
25426: LD_INT 1
25428: DOUBLE
25429: EQUAL
25430: IFTRUE 25434
25432: GO 25651
25434: POP
// begin Am_posily = AMERICKE_POSILY1_LIST ;
25435: LD_ADDR_EXP 72
25439: PUSH
25440: LD_EXP 51
25444: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25445: LD_EXP 72
25449: PPUSH
25450: LD_INT 42
25452: PPUSH
25453: LD_INT 69
25455: PPUSH
25456: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25460: LD_EXP 72
25464: PPUSH
25465: LD_INT 35
25467: PPUSH
25468: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25472: LD_EXP 72
25476: PPUSH
25477: LD_INT 42
25479: PPUSH
25480: LD_INT 69
25482: PPUSH
25483: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25487: LD_EXP 72
25491: PPUSH
25492: LD_INT 35
25494: PPUSH
25495: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25499: LD_EXP 72
25503: PPUSH
25504: LD_INT 42
25506: PPUSH
25507: LD_INT 69
25509: PPUSH
25510: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25514: LD_EXP 72
25518: PPUSH
25519: LD_INT 35
25521: PPUSH
25522: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25526: LD_EXP 72
25530: PPUSH
25531: LD_INT 28
25533: PPUSH
25534: LD_INT 47
25536: PPUSH
25537: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25541: LD_EXP 72
25545: PPUSH
25546: LD_INT 35
25548: PPUSH
25549: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25553: LD_EXP 72
25557: PPUSH
25558: LD_INT 28
25560: PPUSH
25561: LD_INT 47
25563: PPUSH
25564: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25568: LD_EXP 72
25572: PPUSH
25573: LD_INT 35
25575: PPUSH
25576: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25580: LD_EXP 72
25584: PPUSH
25585: LD_INT 28
25587: PPUSH
25588: LD_INT 47
25590: PPUSH
25591: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25595: LD_EXP 72
25599: PPUSH
25600: LD_INT 35
25602: PPUSH
25603: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25607: LD_EXP 72
25611: PPUSH
25612: LD_INT 28
25614: PPUSH
25615: LD_INT 47
25617: PPUSH
25618: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25622: LD_EXP 72
25626: PPUSH
25627: LD_INT 35
25629: PPUSH
25630: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25634: LD_EXP 72
25638: PPUSH
25639: LD_INT 20
25641: PPUSH
25642: LD_INT 12
25644: PPUSH
25645: CALL_OW 174
// end ; 2 :
25649: GO 26930
25651: LD_INT 2
25653: DOUBLE
25654: EQUAL
25655: IFTRUE 25659
25657: GO 25795
25659: POP
// begin Am_posily = AMERICKE_POSILY2_LIST ;
25660: LD_ADDR_EXP 72
25664: PUSH
25665: LD_EXP 52
25669: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 112 , 22 ) ;
25670: LD_EXP 72
25674: PPUSH
25675: LD_INT 112
25677: PPUSH
25678: LD_INT 22
25680: PPUSH
25681: CALL_OW 114
// AddComWait ( Am_posily , 0 0$2 ) ;
25685: LD_EXP 72
25689: PPUSH
25690: LD_INT 70
25692: PPUSH
25693: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 86 , 18 ) ;
25697: LD_EXP 72
25701: PPUSH
25702: LD_INT 86
25704: PPUSH
25705: LD_INT 18
25707: PPUSH
25708: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25712: LD_EXP 72
25716: PPUSH
25717: LD_INT 70
25719: PPUSH
25720: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 77 , 34 ) ;
25724: LD_EXP 72
25728: PPUSH
25729: LD_INT 77
25731: PPUSH
25732: LD_INT 34
25734: PPUSH
25735: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25739: LD_EXP 72
25743: PPUSH
25744: LD_INT 70
25746: PPUSH
25747: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 51 , 37 ) ;
25751: LD_EXP 72
25755: PPUSH
25756: LD_INT 51
25758: PPUSH
25759: LD_INT 37
25761: PPUSH
25762: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25766: LD_EXP 72
25770: PPUSH
25771: LD_INT 35
25773: PPUSH
25774: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 23 , 12 ) ;
25778: LD_EXP 72
25782: PPUSH
25783: LD_INT 23
25785: PPUSH
25786: LD_INT 12
25788: PPUSH
25789: CALL_OW 174
// end ; 3 :
25793: GO 26930
25795: LD_INT 3
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25803
25801: GO 26020
25803: POP
// begin Am_posily = AMERICKE_POSILY3_LIST ;
25804: LD_ADDR_EXP 72
25808: PUSH
25809: LD_EXP 53
25813: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25814: LD_EXP 72
25818: PPUSH
25819: LD_INT 42
25821: PPUSH
25822: LD_INT 69
25824: PPUSH
25825: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25829: LD_EXP 72
25833: PPUSH
25834: LD_INT 35
25836: PPUSH
25837: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25841: LD_EXP 72
25845: PPUSH
25846: LD_INT 42
25848: PPUSH
25849: LD_INT 69
25851: PPUSH
25852: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25856: LD_EXP 72
25860: PPUSH
25861: LD_INT 35
25863: PPUSH
25864: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25868: LD_EXP 72
25872: PPUSH
25873: LD_INT 42
25875: PPUSH
25876: LD_INT 69
25878: PPUSH
25879: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25883: LD_EXP 72
25887: PPUSH
25888: LD_INT 35
25890: PPUSH
25891: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25895: LD_EXP 72
25899: PPUSH
25900: LD_INT 28
25902: PPUSH
25903: LD_INT 47
25905: PPUSH
25906: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25910: LD_EXP 72
25914: PPUSH
25915: LD_INT 35
25917: PPUSH
25918: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25922: LD_EXP 72
25926: PPUSH
25927: LD_INT 28
25929: PPUSH
25930: LD_INT 47
25932: PPUSH
25933: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25937: LD_EXP 72
25941: PPUSH
25942: LD_INT 35
25944: PPUSH
25945: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25949: LD_EXP 72
25953: PPUSH
25954: LD_INT 28
25956: PPUSH
25957: LD_INT 47
25959: PPUSH
25960: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25964: LD_EXP 72
25968: PPUSH
25969: LD_INT 35
25971: PPUSH
25972: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25976: LD_EXP 72
25980: PPUSH
25981: LD_INT 28
25983: PPUSH
25984: LD_INT 47
25986: PPUSH
25987: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25991: LD_EXP 72
25995: PPUSH
25996: LD_INT 35
25998: PPUSH
25999: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
26003: LD_EXP 72
26007: PPUSH
26008: LD_INT 20
26010: PPUSH
26011: LD_INT 12
26013: PPUSH
26014: CALL_OW 174
// end ; 4 :
26018: GO 26930
26020: LD_INT 4
26022: DOUBLE
26023: EQUAL
26024: IFTRUE 26028
26026: GO 26461
26028: POP
// begin Am_posily = AMERICKE_POSILY4_LIST ;
26029: LD_ADDR_EXP 72
26033: PUSH
26034: LD_EXP 54
26038: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26039: LD_EXP 72
26043: PPUSH
26044: LD_INT 110
26046: PPUSH
26047: LD_INT 23
26049: PPUSH
26050: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26054: LD_EXP 72
26058: PPUSH
26059: LD_INT 35
26061: PPUSH
26062: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26066: LD_EXP 72
26070: PPUSH
26071: LD_INT 110
26073: PPUSH
26074: LD_INT 23
26076: PPUSH
26077: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26081: LD_EXP 72
26085: PPUSH
26086: LD_INT 35
26088: PPUSH
26089: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26093: LD_EXP 72
26097: PPUSH
26098: LD_INT 110
26100: PPUSH
26101: LD_INT 23
26103: PPUSH
26104: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26108: LD_EXP 72
26112: PPUSH
26113: LD_INT 35
26115: PPUSH
26116: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26120: LD_EXP 72
26124: PPUSH
26125: LD_INT 110
26127: PPUSH
26128: LD_INT 23
26130: PPUSH
26131: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26135: LD_EXP 72
26139: PPUSH
26140: LD_INT 35
26142: PPUSH
26143: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26147: LD_EXP 72
26151: PPUSH
26152: LD_INT 87
26154: PPUSH
26155: LD_INT 19
26157: PPUSH
26158: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26162: LD_EXP 72
26166: PPUSH
26167: LD_INT 35
26169: PPUSH
26170: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26174: LD_EXP 72
26178: PPUSH
26179: LD_INT 87
26181: PPUSH
26182: LD_INT 19
26184: PPUSH
26185: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26189: LD_EXP 72
26193: PPUSH
26194: LD_INT 35
26196: PPUSH
26197: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26201: LD_EXP 72
26205: PPUSH
26206: LD_INT 87
26208: PPUSH
26209: LD_INT 19
26211: PPUSH
26212: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26216: LD_EXP 72
26220: PPUSH
26221: LD_INT 35
26223: PPUSH
26224: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26228: LD_EXP 72
26232: PPUSH
26233: LD_INT 87
26235: PPUSH
26236: LD_INT 19
26238: PPUSH
26239: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26243: LD_EXP 72
26247: PPUSH
26248: LD_INT 35
26250: PPUSH
26251: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26255: LD_EXP 72
26259: PPUSH
26260: LD_INT 52
26262: PPUSH
26263: LD_INT 12
26265: PPUSH
26266: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26270: LD_EXP 72
26274: PPUSH
26275: LD_INT 35
26277: PPUSH
26278: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26282: LD_EXP 72
26286: PPUSH
26287: LD_INT 52
26289: PPUSH
26290: LD_INT 12
26292: PPUSH
26293: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26297: LD_EXP 72
26301: PPUSH
26302: LD_INT 35
26304: PPUSH
26305: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26309: LD_EXP 72
26313: PPUSH
26314: LD_INT 52
26316: PPUSH
26317: LD_INT 12
26319: PPUSH
26320: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26324: LD_EXP 72
26328: PPUSH
26329: LD_INT 35
26331: PPUSH
26332: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26336: LD_EXP 72
26340: PPUSH
26341: LD_INT 52
26343: PPUSH
26344: LD_INT 12
26346: PPUSH
26347: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26351: LD_EXP 72
26355: PPUSH
26356: LD_INT 35
26358: PPUSH
26359: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26363: LD_EXP 72
26367: PPUSH
26368: LD_INT 52
26370: PPUSH
26371: LD_INT 12
26373: PPUSH
26374: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26378: LD_EXP 72
26382: PPUSH
26383: LD_INT 35
26385: PPUSH
26386: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26390: LD_EXP 72
26394: PPUSH
26395: LD_INT 52
26397: PPUSH
26398: LD_INT 12
26400: PPUSH
26401: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26405: LD_EXP 72
26409: PPUSH
26410: LD_INT 35
26412: PPUSH
26413: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26417: LD_EXP 72
26421: PPUSH
26422: LD_INT 52
26424: PPUSH
26425: LD_INT 12
26427: PPUSH
26428: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26432: LD_EXP 72
26436: PPUSH
26437: LD_INT 35
26439: PPUSH
26440: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26444: LD_EXP 72
26448: PPUSH
26449: LD_INT 27
26451: PPUSH
26452: LD_INT 13
26454: PPUSH
26455: CALL_OW 174
// end ; 11 :
26459: GO 26930
26461: LD_INT 11
26463: DOUBLE
26464: EQUAL
26465: IFTRUE 26469
26467: GO 26929
26469: POP
// begin Am_posily = AMERICKE_POSILY11_LIST ;
26470: LD_ADDR_EXP 72
26474: PUSH
26475: LD_EXP 55
26479: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26480: LD_EXP 72
26484: PPUSH
26485: LD_INT 110
26487: PPUSH
26488: LD_INT 23
26490: PPUSH
26491: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26495: LD_EXP 72
26499: PPUSH
26500: LD_INT 35
26502: PPUSH
26503: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26507: LD_EXP 72
26511: PPUSH
26512: LD_INT 110
26514: PPUSH
26515: LD_INT 23
26517: PPUSH
26518: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26522: LD_EXP 72
26526: PPUSH
26527: LD_INT 35
26529: PPUSH
26530: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26534: LD_EXP 72
26538: PPUSH
26539: LD_INT 110
26541: PPUSH
26542: LD_INT 23
26544: PPUSH
26545: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26549: LD_EXP 72
26553: PPUSH
26554: LD_INT 35
26556: PPUSH
26557: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26561: LD_EXP 72
26565: PPUSH
26566: LD_INT 110
26568: PPUSH
26569: LD_INT 23
26571: PPUSH
26572: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26576: LD_EXP 72
26580: PPUSH
26581: LD_INT 35
26583: PPUSH
26584: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26588: LD_EXP 72
26592: PPUSH
26593: LD_INT 87
26595: PPUSH
26596: LD_INT 19
26598: PPUSH
26599: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26603: LD_EXP 72
26607: PPUSH
26608: LD_INT 35
26610: PPUSH
26611: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26615: LD_EXP 72
26619: PPUSH
26620: LD_INT 87
26622: PPUSH
26623: LD_INT 19
26625: PPUSH
26626: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26630: LD_EXP 72
26634: PPUSH
26635: LD_INT 35
26637: PPUSH
26638: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26642: LD_EXP 72
26646: PPUSH
26647: LD_INT 87
26649: PPUSH
26650: LD_INT 19
26652: PPUSH
26653: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26657: LD_EXP 72
26661: PPUSH
26662: LD_INT 35
26664: PPUSH
26665: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26669: LD_EXP 72
26673: PPUSH
26674: LD_INT 87
26676: PPUSH
26677: LD_INT 19
26679: PPUSH
26680: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26684: LD_EXP 72
26688: PPUSH
26689: LD_INT 35
26691: PPUSH
26692: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26696: LD_EXP 72
26700: PPUSH
26701: LD_INT 52
26703: PPUSH
26704: LD_INT 12
26706: PPUSH
26707: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26711: LD_EXP 72
26715: PPUSH
26716: LD_INT 35
26718: PPUSH
26719: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26723: LD_EXP 72
26727: PPUSH
26728: LD_INT 52
26730: PPUSH
26731: LD_INT 12
26733: PPUSH
26734: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26738: LD_EXP 72
26742: PPUSH
26743: LD_INT 35
26745: PPUSH
26746: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26750: LD_EXP 72
26754: PPUSH
26755: LD_INT 52
26757: PPUSH
26758: LD_INT 12
26760: PPUSH
26761: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26765: LD_EXP 72
26769: PPUSH
26770: LD_INT 35
26772: PPUSH
26773: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26777: LD_EXP 72
26781: PPUSH
26782: LD_INT 52
26784: PPUSH
26785: LD_INT 12
26787: PPUSH
26788: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26792: LD_EXP 72
26796: PPUSH
26797: LD_INT 35
26799: PPUSH
26800: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26804: LD_EXP 72
26808: PPUSH
26809: LD_INT 52
26811: PPUSH
26812: LD_INT 12
26814: PPUSH
26815: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26819: LD_EXP 72
26823: PPUSH
26824: LD_INT 35
26826: PPUSH
26827: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26831: LD_EXP 72
26835: PPUSH
26836: LD_INT 52
26838: PPUSH
26839: LD_INT 12
26841: PPUSH
26842: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26846: LD_EXP 72
26850: PPUSH
26851: LD_INT 35
26853: PPUSH
26854: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26858: LD_EXP 72
26862: PPUSH
26863: LD_INT 52
26865: PPUSH
26866: LD_INT 12
26868: PPUSH
26869: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26873: LD_EXP 72
26877: PPUSH
26878: LD_INT 35
26880: PPUSH
26881: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26885: LD_EXP 72
26889: PPUSH
26890: LD_INT 52
26892: PPUSH
26893: LD_INT 12
26895: PPUSH
26896: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26900: LD_EXP 72
26904: PPUSH
26905: LD_INT 35
26907: PPUSH
26908: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26912: LD_EXP 72
26916: PPUSH
26917: LD_INT 27
26919: PPUSH
26920: LD_INT 13
26922: PPUSH
26923: CALL_OW 174
// end ; end ;
26927: GO 26930
26929: POP
// end ;
26930: LD_VAR 0 2
26934: RET
// every 1 1$7 do
26935: GO 26937
26937: DISABLE
// begin if Researched ( Amici , tech_Weap1 ) then
26938: LD_EXP 4
26942: PPUSH
26943: LD_INT 51
26945: PPUSH
26946: CALL_OW 325
26950: IFFALSE 26977
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26952: LD_INT 51
26954: PPUSH
26955: LD_EXP 4
26959: PPUSH
26960: LD_INT 1
26962: PPUSH
26963: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26967: LD_INT 9
26969: PPUSH
26970: LD_INT 51
26972: PPUSH
26973: CALL_OW 124
// end ; enable ;
26977: ENABLE
// end ;
26978: END
// every 0 0$19 do
26979: GO 26981
26981: DISABLE
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26982: LD_INT 51
26984: PPUSH
26985: LD_EXP 4
26989: PPUSH
26990: LD_INT 1
26992: PPUSH
26993: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26997: LD_INT 9
26999: PPUSH
27000: LD_INT 51
27002: PPUSH
27003: CALL_OW 124
// end ;
27007: END
// every 0 0$1 do var i , temp_list ;
27008: GO 27010
27010: DISABLE
27011: LD_INT 0
27013: PPUSH
27014: PPUSH
// begin i = 1 ;
27015: LD_ADDR_VAR 0 1
27019: PUSH
27020: LD_INT 1
27022: ST_TO_ADDR
// while i <= Am_posily do
27023: LD_VAR 0 1
27027: PUSH
27028: LD_EXP 72
27032: LESSEQUAL
27033: IFFALSE 27172
// begin if IsInArea ( Am_posily [ i ] , Am_base ) or not IsLive ( i ) then
27035: LD_EXP 72
27039: PUSH
27040: LD_VAR 0 1
27044: ARRAY
27045: PPUSH
27046: LD_INT 6
27048: PPUSH
27049: CALL_OW 308
27053: PUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: CALL_OW 300
27063: NOT
27064: OR
27065: IFFALSE 27156
// begin if IsInArea ( Am_posily [ i ] , Am_base ) then
27067: LD_EXP 72
27071: PUSH
27072: LD_VAR 0 1
27076: ARRAY
27077: PPUSH
27078: LD_INT 6
27080: PPUSH
27081: CALL_OW 308
27085: IFFALSE 27134
// begin Prezite_posily = Prezite_posily + 1 ;
27087: LD_ADDR_EXP 73
27091: PUSH
27092: LD_EXP 73
27096: PUSH
27097: LD_INT 1
27099: PLUS
27100: ST_TO_ADDR
// if Prezite_posily > muze_prezit_posil [ difficulty ] then
27101: LD_EXP 73
27105: PUSH
27106: LD_EXP 23
27110: PUSH
27111: LD_OWVAR 67
27115: ARRAY
27116: GREATER
27117: IFFALSE 27134
// DestroyUnit ( Am_posily [ i ] ) ;
27119: LD_EXP 72
27123: PUSH
27124: LD_VAR 0 1
27128: ARRAY
27129: PPUSH
27130: CALL_OW 65
// end ; Am_posily = Delete ( Am_posily , i ) ;
27134: LD_ADDR_EXP 72
27138: PUSH
27139: LD_EXP 72
27143: PPUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 3
27153: ST_TO_ADDR
// continue ;
27154: GO 27023
// end ; i = i + 1 ;
27156: LD_ADDR_VAR 0 1
27160: PUSH
27161: LD_VAR 0 1
27165: PUSH
27166: LD_INT 1
27168: PLUS
27169: ST_TO_ADDR
// end ;
27170: GO 27023
// enable ;
27172: ENABLE
// end ;
27173: PPOPN 2
27175: END
// every 0 0$13 do var pom ;
27176: GO 27178
27178: DISABLE
27179: LD_INT 0
27181: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_mechanic ] ] ) ;
27182: LD_ADDR_VAR 0 1
27186: PUSH
27187: LD_INT 6
27189: PPUSH
27190: LD_INT 22
27192: PUSH
27193: LD_EXP 4
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 25
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PPUSH
27216: CALL_OW 70
27220: ST_TO_ADDR
// if pom > 0 then
27221: LD_VAR 0 1
27225: PUSH
27226: LD_INT 0
27228: GREATER
27229: IFFALSE 27243
// ComEnterUnit ( pom , Am_fac ) ;
27231: LD_VAR 0 1
27235: PPUSH
27236: LD_INT 10
27238: PPUSH
27239: CALL_OW 120
// enable ;
27243: ENABLE
// end ;
27244: PPOPN 1
27246: END
// every 0 0$17 do var pom ;
27247: GO 27249
27249: DISABLE
27250: LD_INT 0
27252: PPUSH
// begin pom = UnitsInside ( Am_fac ) ;
27253: LD_ADDR_VAR 0 1
27257: PUSH
27258: LD_INT 10
27260: PPUSH
27261: CALL_OW 313
27265: ST_TO_ADDR
// if pom > 3 then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 3
27273: GREATER
27274: IFFALSE 27295
// ComConstruct ( Am_fac , us_light_wheeled , engine_solar , control_manual , us_machine_gun ) ;
27276: LD_INT 10
27278: PPUSH
27279: LD_INT 1
27281: PPUSH
27282: LD_INT 2
27284: PPUSH
27285: LD_INT 1
27287: PPUSH
27288: LD_INT 2
27290: PPUSH
27291: CALL_OW 125
// while UnitsInside ( Am_fac ) > 3 do
27295: LD_INT 10
27297: PPUSH
27298: CALL_OW 313
27302: PUSH
27303: LD_INT 3
27305: GREATER
27306: IFFALSE 27317
// wait ( 0 0$10 ) ;
27308: LD_INT 350
27310: PPUSH
27311: CALL_OW 67
27315: GO 27295
// enable ;
27317: ENABLE
// end ;
27318: PPOPN 1
27320: END
// export function am_posily_videny_rusakama ; var i ; var videli ; begin
27321: LD_INT 0
27323: PPUSH
27324: PPUSH
27325: PPUSH
// videli = false ;
27326: LD_ADDR_VAR 0 3
27330: PUSH
27331: LD_INT 0
27333: ST_TO_ADDR
// for i in Am_posily do
27334: LD_ADDR_VAR 0 2
27338: PUSH
27339: LD_EXP 72
27343: PUSH
27344: FOR_IN
27345: IFFALSE 27373
// if See ( You , i ) then
27347: LD_EXP 1
27351: PPUSH
27352: LD_VAR 0 2
27356: PPUSH
27357: CALL_OW 292
27361: IFFALSE 27371
// videli = true ;
27363: LD_ADDR_VAR 0 3
27367: PUSH
27368: LD_INT 1
27370: ST_TO_ADDR
27371: GO 27344
27373: POP
27374: POP
// result := videli ;
27375: LD_ADDR_VAR 0 1
27379: PUSH
27380: LD_VAR 0 3
27384: ST_TO_ADDR
// end ;
27385: LD_VAR 0 1
27389: RET
// export function omicron_half_destroyed ; var pom , i ; var zije ; var a ; begin
27390: LD_INT 0
27392: PPUSH
27393: PPUSH
27394: PPUSH
27395: PPUSH
27396: PPUSH
// a = false ;
27397: LD_ADDR_VAR 0 5
27401: PUSH
27402: LD_INT 0
27404: ST_TO_ADDR
// if ( ( not IsOK ( Am_bu1 ) ) or ( GetSide ( Am_bu1 ) <> Amici ) ) and ( ( not IsOK ( Am_bu2 ) ) or GetSide ( Am_bu2 ) <> Amici ) and ( ( not IsOK ( Am_bu3 ) ) or GetSide ( Am_bu3 ) <> Amici ) and ( ( not IsOK ( Am_bar1 ) ) or GetSide ( Am_bar1 ) <> Amici ) and ( ( not IsOK ( Am_bar2 ) ) or GetSide ( Am_bar2 ) <> Amici ) then
27405: LD_INT 7
27407: PPUSH
27408: CALL_OW 302
27412: NOT
27413: PUSH
27414: LD_INT 7
27416: PPUSH
27417: CALL_OW 255
27421: PUSH
27422: LD_EXP 4
27426: NONEQUAL
27427: OR
27428: PUSH
27429: LD_INT 8
27431: PPUSH
27432: CALL_OW 302
27436: NOT
27437: PUSH
27438: LD_INT 8
27440: PPUSH
27441: CALL_OW 255
27445: PUSH
27446: LD_EXP 4
27450: NONEQUAL
27451: OR
27452: AND
27453: PUSH
27454: LD_INT 19
27456: PPUSH
27457: CALL_OW 302
27461: NOT
27462: PUSH
27463: LD_INT 19
27465: PPUSH
27466: CALL_OW 255
27470: PUSH
27471: LD_EXP 4
27475: NONEQUAL
27476: OR
27477: AND
27478: PUSH
27479: LD_INT 11
27481: PPUSH
27482: CALL_OW 302
27486: NOT
27487: PUSH
27488: LD_INT 11
27490: PPUSH
27491: CALL_OW 255
27495: PUSH
27496: LD_EXP 4
27500: NONEQUAL
27501: OR
27502: AND
27503: PUSH
27504: LD_INT 25
27506: PPUSH
27507: CALL_OW 302
27511: NOT
27512: PUSH
27513: LD_INT 25
27515: PPUSH
27516: CALL_OW 255
27520: PUSH
27521: LD_EXP 4
27525: NONEQUAL
27526: OR
27527: AND
27528: IFFALSE 27538
// a = true ;
27530: LD_ADDR_VAR 0 5
27534: PUSH
27535: LD_INT 1
27537: ST_TO_ADDR
// result = a ;
27538: LD_ADDR_VAR 0 1
27542: PUSH
27543: LD_VAR 0 5
27547: ST_TO_ADDR
// end ;
27548: LD_VAR 0 1
27552: RET
// export function stahnuti_amiku ; var i ; var pom , pom1 , pom2 , pomx ; begin
27553: LD_INT 0
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27561: LD_ADDR_VAR 0 3
27565: PUSH
27566: LD_INT 6
27568: PPUSH
27569: LD_INT 22
27571: PUSH
27572: LD_EXP 4
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 21
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PPUSH
27595: CALL_OW 70
27599: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27600: LD_ADDR_VAR 0 5
27604: PUSH
27605: LD_INT 6
27607: PPUSH
27608: LD_INT 22
27610: PUSH
27611: LD_EXP 4
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 21
27622: PUSH
27623: LD_INT 3
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PPUSH
27634: CALL_OW 70
27638: ST_TO_ADDR
// for i in pom2 do
27639: LD_ADDR_VAR 0 2
27643: PUSH
27644: LD_VAR 0 5
27648: PUSH
27649: FOR_IN
27650: IFFALSE 27690
// if UnitsInside ( i ) <> 0 then
27652: LD_VAR 0 2
27656: PPUSH
27657: CALL_OW 313
27661: PUSH
27662: LD_INT 0
27664: NONEQUAL
27665: IFFALSE 27688
// pom = pom ^ UnitsInside ( i ) ;
27667: LD_ADDR_VAR 0 3
27671: PUSH
27672: LD_VAR 0 3
27676: PUSH
27677: LD_VAR 0 2
27681: PPUSH
27682: CALL_OW 313
27686: ADD
27687: ST_TO_ADDR
27688: GO 27649
27690: POP
27691: POP
// ComExitBuilding ( pom ) ;
27692: LD_VAR 0 3
27696: PPUSH
27697: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27701: LD_VAR 0 3
27705: PPUSH
27706: LD_INT 6
27708: PPUSH
27709: LD_INT 2
27711: PPUSH
27712: CALL_OW 171
// wait ( 0 0$1 ) ;
27716: LD_INT 35
27718: PPUSH
27719: CALL_OW 67
// while pom > 0 do
27723: LD_VAR 0 3
27727: PUSH
27728: LD_INT 0
27730: GREATER
27731: IFFALSE 27967
// begin pom1 = FilterUnitsInArea ( ODBER_AM2 , [ [ f_side , Amici ] ] ) ;
27733: LD_ADDR_VAR 0 4
27737: PUSH
27738: LD_INT 38
27740: PPUSH
27741: LD_INT 22
27743: PUSH
27744: LD_EXP 4
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: EMPTY
27754: LIST
27755: PPUSH
27756: CALL_OW 70
27760: ST_TO_ADDR
// for i in pom1 do
27761: LD_ADDR_VAR 0 2
27765: PUSH
27766: LD_VAR 0 4
27770: PUSH
27771: FOR_IN
27772: IFFALSE 27801
// begin RemoveUnit ( i ) ;
27774: LD_VAR 0 2
27778: PPUSH
27779: CALL_OW 64
// pom = pom diff i ;
27783: LD_ADDR_VAR 0 3
27787: PUSH
27788: LD_VAR 0 3
27792: PUSH
27793: LD_VAR 0 2
27797: DIFF
27798: ST_TO_ADDR
// end ;
27799: GO 27771
27801: POP
27802: POP
// wait ( 0 0$1 ) ;
27803: LD_INT 35
27805: PPUSH
27806: CALL_OW 67
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27810: LD_ADDR_VAR 0 3
27814: PUSH
27815: LD_INT 6
27817: PPUSH
27818: LD_INT 22
27820: PUSH
27821: LD_EXP 4
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 21
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PPUSH
27844: CALL_OW 70
27848: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27849: LD_ADDR_VAR 0 5
27853: PUSH
27854: LD_INT 6
27856: PPUSH
27857: LD_INT 22
27859: PUSH
27860: LD_EXP 4
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 21
27871: PUSH
27872: LD_INT 3
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 70
27887: ST_TO_ADDR
// for i in pom2 do
27888: LD_ADDR_VAR 0 2
27892: PUSH
27893: LD_VAR 0 5
27897: PUSH
27898: FOR_IN
27899: IFFALSE 27939
// if UnitsInside ( i ) <> 0 then
27901: LD_VAR 0 2
27905: PPUSH
27906: CALL_OW 313
27910: PUSH
27911: LD_INT 0
27913: NONEQUAL
27914: IFFALSE 27937
// pom = pom ^ UnitsInside ( i ) ;
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: LD_VAR 0 3
27925: PUSH
27926: LD_VAR 0 2
27930: PPUSH
27931: CALL_OW 313
27935: ADD
27936: ST_TO_ADDR
27937: GO 27898
27939: POP
27940: POP
// ComExitBuilding ( pom ) ;
27941: LD_VAR 0 3
27945: PPUSH
27946: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27950: LD_VAR 0 3
27954: PPUSH
27955: LD_INT 6
27957: PPUSH
27958: LD_INT 2
27960: PPUSH
27961: CALL_OW 171
// end ;
27965: GO 27723
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27967: LD_ADDR_VAR 0 3
27971: PUSH
27972: LD_INT 22
27974: PPUSH
27975: LD_INT 22
27977: PUSH
27978: LD_EXP 4
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 21
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: CALL_OW 70
28005: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
28006: LD_ADDR_VAR 0 5
28010: PUSH
28011: LD_INT 22
28013: PPUSH
28014: LD_INT 22
28016: PUSH
28017: LD_EXP 4
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 21
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PPUSH
28040: CALL_OW 70
28044: ST_TO_ADDR
// for i in pom2 do
28045: LD_ADDR_VAR 0 2
28049: PUSH
28050: LD_VAR 0 5
28054: PUSH
28055: FOR_IN
28056: IFFALSE 28096
// if UnitsInside ( i ) <> 0 then
28058: LD_VAR 0 2
28062: PPUSH
28063: CALL_OW 313
28067: PUSH
28068: LD_INT 0
28070: NONEQUAL
28071: IFFALSE 28094
// pom = pom ^ UnitsInside ( i ) ;
28073: LD_ADDR_VAR 0 3
28077: PUSH
28078: LD_VAR 0 3
28082: PUSH
28083: LD_VAR 0 2
28087: PPUSH
28088: CALL_OW 313
28092: ADD
28093: ST_TO_ADDR
28094: GO 28055
28096: POP
28097: POP
// ComExitBuilding ( pom ) ;
28098: LD_VAR 0 3
28102: PPUSH
28103: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
28107: LD_VAR 0 3
28111: PPUSH
28112: LD_INT 138
28114: PPUSH
28115: LD_INT 40
28117: PPUSH
28118: CALL_OW 171
// wait ( 0 0$1 ) ;
28122: LD_INT 35
28124: PPUSH
28125: CALL_OW 67
// while pom + 0 > 0 do
28129: LD_VAR 0 3
28133: PUSH
28134: LD_INT 0
28136: PLUS
28137: PUSH
28138: LD_INT 0
28140: GREATER
28141: IFFALSE 28377
// begin pom1 = FilterUnitsInArea ( ODBER_AM , [ [ f_side , Amici ] ] ) ;
28143: LD_ADDR_VAR 0 4
28147: PUSH
28148: LD_INT 35
28150: PPUSH
28151: LD_INT 22
28153: PUSH
28154: LD_EXP 4
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: PPUSH
28166: CALL_OW 70
28170: ST_TO_ADDR
// for i in pom1 do
28171: LD_ADDR_VAR 0 2
28175: PUSH
28176: LD_VAR 0 4
28180: PUSH
28181: FOR_IN
28182: IFFALSE 28211
// begin RemoveUnit ( i ) ;
28184: LD_VAR 0 2
28188: PPUSH
28189: CALL_OW 64
// pom = pom diff i ;
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_VAR 0 3
28202: PUSH
28203: LD_VAR 0 2
28207: DIFF
28208: ST_TO_ADDR
// end ;
28209: GO 28181
28211: POP
28212: POP
// wait ( 0 0$1 ) ;
28213: LD_INT 35
28215: PPUSH
28216: CALL_OW 67
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
28220: LD_ADDR_VAR 0 3
28224: PUSH
28225: LD_INT 22
28227: PPUSH
28228: LD_INT 22
28230: PUSH
28231: LD_EXP 4
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 21
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PPUSH
28254: CALL_OW 70
28258: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
28259: LD_ADDR_VAR 0 5
28263: PUSH
28264: LD_INT 22
28266: PPUSH
28267: LD_INT 22
28269: PUSH
28270: LD_EXP 4
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 21
28281: PUSH
28282: LD_INT 3
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PPUSH
28293: CALL_OW 70
28297: ST_TO_ADDR
// for i in pom2 do
28298: LD_ADDR_VAR 0 2
28302: PUSH
28303: LD_VAR 0 5
28307: PUSH
28308: FOR_IN
28309: IFFALSE 28349
// if UnitsInside ( i ) <> 0 then
28311: LD_VAR 0 2
28315: PPUSH
28316: CALL_OW 313
28320: PUSH
28321: LD_INT 0
28323: NONEQUAL
28324: IFFALSE 28347
// pom = pom ^ UnitsInside ( i ) ;
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_VAR 0 3
28335: PUSH
28336: LD_VAR 0 2
28340: PPUSH
28341: CALL_OW 313
28345: ADD
28346: ST_TO_ADDR
28347: GO 28308
28349: POP
28350: POP
// ComExitBuilding ( pom ) ;
28351: LD_VAR 0 3
28355: PPUSH
28356: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
28360: LD_VAR 0 3
28364: PPUSH
28365: LD_INT 138
28367: PPUSH
28368: LD_INT 40
28370: PPUSH
28371: CALL_OW 171
// end ;
28375: GO 28129
// end ; end_of_file
28377: LD_VAR 0 1
28381: RET
// var arabsky_utok_zacal ; export posilani_arabskych_hlidek ; every 0 0$0.1 do
28382: GO 28384
28384: DISABLE
// begin posilani_arabskych_hlidek = false ;
28385: LD_ADDR_EXP 74
28389: PUSH
28390: LD_INT 0
28392: ST_TO_ADDR
// end ;
28393: END
// export function utok_arabu ; var i , pom ; begin
28394: LD_INT 0
28396: PPUSH
28397: PPUSH
28398: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_INT 22
28406: PUSH
28407: LD_EXP 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: EMPTY
28417: LIST
28418: PPUSH
28419: CALL_OW 69
28423: ST_TO_ADDR
// ArDontAttackPlayer ( true ) ;
28424: LD_INT 1
28426: PPUSH
28427: CALL 29368 0 1
// InGameOn ;
28431: CALL_OW 8
// ComStop ( pom ) ;
28435: LD_VAR 0 3
28439: PPUSH
28440: CALL_OW 141
// EnableVideoExclamations ;
28444: CALL_OW 498
// CenterNowOnXY ( 142 , 80 ) ;
28448: LD_INT 142
28450: PPUSH
28451: LD_INT 80
28453: PPUSH
28454: CALL_OW 86
// arabsky_utok_zacal = true ;
28458: LD_ADDR_LOC 27
28462: PUSH
28463: LD_INT 1
28465: ST_TO_ADDR
// posli_rusy_pryc ;
28466: CALL 7969 0 0
// schovej_kurina ;
28470: CALL 9068 0 0
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 1 ] , Opoce1 , false ) ;
28474: LD_EXP 60
28478: PUSH
28479: LD_INT 1
28481: ARRAY
28482: PPUSH
28483: LD_INT 10
28485: PPUSH
28486: LD_INT 0
28488: PPUSH
28489: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 2 ] , Opoce2 , false ) ;
28493: LD_EXP 60
28497: PUSH
28498: LD_INT 2
28500: ARRAY
28501: PPUSH
28502: LD_INT 11
28504: PPUSH
28505: LD_INT 0
28507: PPUSH
28508: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 3 ] , Opoce2 , false ) ;
28512: LD_EXP 60
28516: PUSH
28517: LD_INT 3
28519: ARRAY
28520: PPUSH
28521: LD_INT 11
28523: PPUSH
28524: LD_INT 0
28526: PPUSH
28527: CALL_OW 49
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 134 , 62 ) ;
28531: LD_EXP 60
28535: PUSH
28536: LD_INT 1
28538: ARRAY
28539: PPUSH
28540: LD_INT 134
28542: PPUSH
28543: LD_INT 62
28545: PPUSH
28546: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 133 , 69 ) ;
28550: LD_EXP 60
28554: PUSH
28555: LD_INT 1
28557: ARRAY
28558: PPUSH
28559: LD_INT 133
28561: PPUSH
28562: LD_INT 69
28564: PPUSH
28565: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_bu1 ) ;
28569: LD_EXP 60
28573: PUSH
28574: LD_INT 1
28576: ARRAY
28577: PPUSH
28578: LD_INT 3
28580: PPUSH
28581: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_fac ) ;
28585: LD_EXP 60
28589: PUSH
28590: LD_INT 1
28592: ARRAY
28593: PPUSH
28594: LD_INT 5
28596: PPUSH
28597: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_dep ) ;
28601: LD_EXP 60
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: LD_INT 1
28612: PPUSH
28613: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 142 , 94 ) ;
28617: LD_EXP 60
28621: PUSH
28622: LD_INT 2
28624: ARRAY
28625: PPUSH
28626: LD_INT 142
28628: PPUSH
28629: LD_INT 94
28631: PPUSH
28632: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 140 , 90 ) ;
28636: LD_EXP 60
28640: PUSH
28641: LD_INT 2
28643: ARRAY
28644: PPUSH
28645: LD_INT 140
28647: PPUSH
28648: LD_INT 90
28650: PPUSH
28651: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_el1 ) ;
28655: LD_EXP 60
28659: PUSH
28660: LD_INT 2
28662: ARRAY
28663: PPUSH
28664: LD_INT 14
28666: PPUSH
28667: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_fac ) ;
28671: LD_EXP 60
28675: PUSH
28676: LD_INT 2
28678: ARRAY
28679: PPUSH
28680: LD_INT 5
28682: PPUSH
28683: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_dep ) ;
28687: LD_EXP 60
28691: PUSH
28692: LD_INT 2
28694: ARRAY
28695: PPUSH
28696: LD_INT 1
28698: PPUSH
28699: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 143 , 94 ) ;
28703: LD_EXP 60
28707: PUSH
28708: LD_INT 3
28710: ARRAY
28711: PPUSH
28712: LD_INT 143
28714: PPUSH
28715: LD_INT 94
28717: PPUSH
28718: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 141 , 90 ) ;
28722: LD_EXP 60
28726: PUSH
28727: LD_INT 3
28729: ARRAY
28730: PPUSH
28731: LD_INT 141
28733: PPUSH
28734: LD_INT 90
28736: PPUSH
28737: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_bar1 ) ;
28741: LD_EXP 60
28745: PUSH
28746: LD_INT 3
28748: ARRAY
28749: PPUSH
28750: LD_INT 2
28752: PPUSH
28753: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_fac ) ;
28757: LD_EXP 60
28761: PUSH
28762: LD_INT 3
28764: ARRAY
28765: PPUSH
28766: LD_INT 5
28768: PPUSH
28769: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_dep ) ;
28773: LD_EXP 60
28777: PUSH
28778: LD_INT 3
28780: ARRAY
28781: PPUSH
28782: LD_INT 1
28784: PPUSH
28785: CALL_OW 175
// music_nat = nation_arabian ;
28789: LD_ADDR_OWVAR 71
28793: PUSH
28794: LD_INT 2
28796: ST_TO_ADDR
// CenterOnXY ( 142 , 80 ) ;
28797: LD_INT 142
28799: PPUSH
28800: LD_INT 80
28802: PPUSH
28803: CALL_OW 84
// for i in ARABI_SELF_AUTA do
28807: LD_ADDR_VAR 0 2
28811: PUSH
28812: LD_EXP 63
28816: PUSH
28817: FOR_IN
28818: IFFALSE 28837
// PlaceUnitArea ( i , Arabi2 , false ) ;
28820: LD_VAR 0 2
28824: PPUSH
28825: LD_INT 13
28827: PPUSH
28828: LD_INT 0
28830: PPUSH
28831: CALL_OW 49
28835: GO 28817
28837: POP
28838: POP
// ComAttackUnit ( ARABI_SELF_AUTA [ 1 ] , RU1_bar2 ) ;
28839: LD_EXP 63
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PPUSH
28848: LD_INT 17
28850: PPUSH
28851: CALL_OW 115
// ComWait ( ARABI_SELF_AUTA [ 2 ] , 0 0$1 ) ;
28855: LD_EXP 63
28859: PUSH
28860: LD_INT 2
28862: ARRAY
28863: PPUSH
28864: LD_INT 35
28866: PPUSH
28867: CALL_OW 142
// AddComAttackUnit ( ARABI_SELF_AUTA [ 2 ] , RU1_dep ) ;
28871: LD_EXP 63
28875: PUSH
28876: LD_INT 2
28878: ARRAY
28879: PPUSH
28880: LD_INT 1
28882: PPUSH
28883: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
28887: LD_INT 142
28889: PPUSH
28890: LD_INT 80
28892: PPUSH
28893: CALL_OW 84
// for i in ARABI_PRVNI_VLNA do
28897: LD_ADDR_VAR 0 2
28901: PUSH
28902: LD_EXP 61
28906: PUSH
28907: FOR_IN
28908: IFFALSE 28927
// PlaceUnitArea ( i , Arabi1 , false ) ;
28910: LD_VAR 0 2
28914: PPUSH
28915: LD_INT 12
28917: PPUSH
28918: LD_INT 0
28920: PPUSH
28921: CALL_OW 49
28925: GO 28907
28927: POP
28928: POP
// ComMoveXY ( ARABI_PRVNI_VLNA , 139 , 78 ) ;
28929: LD_EXP 61
28933: PPUSH
28934: LD_INT 139
28936: PPUSH
28937: LD_INT 78
28939: PPUSH
28940: CALL_OW 111
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bar1 ) ;
28944: LD_EXP 61
28948: PPUSH
28949: LD_INT 2
28951: PPUSH
28952: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu2 ) ;
28956: LD_EXP 61
28960: PPUSH
28961: LD_INT 4
28963: PPUSH
28964: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu1 ) ;
28968: LD_EXP 61
28972: PPUSH
28973: LD_INT 3
28975: PPUSH
28976: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab2 ) ;
28980: LD_EXP 61
28984: PPUSH
28985: LD_INT 16
28987: PPUSH
28988: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_dep ) ;
28992: LD_EXP 61
28996: PPUSH
28997: LD_INT 1
28999: PPUSH
29000: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab1 ) ;
29004: LD_EXP 61
29008: PPUSH
29009: LD_INT 6
29011: PPUSH
29012: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_fac ) ;
29016: LD_EXP 61
29020: PPUSH
29021: LD_INT 5
29023: PPUSH
29024: CALL_OW 175
// AddComAgressiveMove ( ARABI_PRVNI_VLNA , 143 , 79 ) ;
29028: LD_EXP 61
29032: PPUSH
29033: LD_INT 143
29035: PPUSH
29036: LD_INT 79
29038: PPUSH
29039: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
29043: LD_INT 142
29045: PPUSH
29046: LD_INT 80
29048: PPUSH
29049: CALL_OW 84
// DisableVideoExclamations ;
29053: CALL_OW 499
// InGameOff ;
29057: CALL_OW 9
// interface_hidden := true ;
29061: LD_ADDR_OWVAR 54
29065: PUSH
29066: LD_INT 1
29068: ST_TO_ADDR
// kecy_behem_utoku_arabu ;
29069: CALL 13783 0 0
// InGameOn ;
29073: CALL_OW 8
// EnableVideoExclamations ;
29077: CALL_OW 498
// CenterOnXY ( 142 , 80 ) ;
29081: LD_INT 142
29083: PPUSH
29084: LD_INT 80
29086: PPUSH
29087: CALL_OW 84
// wait ( 0 0$4 ) ;
29091: LD_INT 140
29093: PPUSH
29094: CALL_OW 67
// posli_kurina_na_smrt ;
29098: CALL 9088 0 0
// for i in ARABI_FLAME_LIST do
29102: LD_ADDR_VAR 0 2
29106: PUSH
29107: LD_EXP 62
29111: PUSH
29112: FOR_IN
29113: IFFALSE 29132
// PlaceUnitArea ( i , Arabi2 , false ) ;
29115: LD_VAR 0 2
29119: PPUSH
29120: LD_INT 13
29122: PPUSH
29123: LD_INT 0
29125: PPUSH
29126: CALL_OW 49
29130: GO 29112
29132: POP
29133: POP
// ComMoveXY ( ARABI_FLAME_LIST , 139 , 78 ) ;
29134: LD_EXP 62
29138: PPUSH
29139: LD_INT 139
29141: PPUSH
29142: LD_INT 78
29144: PPUSH
29145: CALL_OW 111
// AddComAttackUnit ( ARABI_FLAME_LIST , RU1_bar1 ) ;
29149: LD_EXP 62
29153: PPUSH
29154: LD_INT 2
29156: PPUSH
29157: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
29161: LD_INT 142
29163: PPUSH
29164: LD_INT 80
29166: PPUSH
29167: CALL_OW 84
// for i in ARABI_VOJACI do
29171: LD_ADDR_VAR 0 2
29175: PUSH
29176: LD_EXP 64
29180: PUSH
29181: FOR_IN
29182: IFFALSE 29201
// PlaceUnitArea ( i , Arabi1 , false ) ;
29184: LD_VAR 0 2
29188: PPUSH
29189: LD_INT 12
29191: PPUSH
29192: LD_INT 0
29194: PPUSH
29195: CALL_OW 49
29199: GO 29181
29201: POP
29202: POP
// ComMoveXY ( ARABI_VOJACI , 153 , 84 ) ;
29203: LD_EXP 64
29207: PPUSH
29208: LD_INT 153
29210: PPUSH
29211: LD_INT 84
29213: PPUSH
29214: CALL_OW 111
// AddComAgressiveMove ( ARABI_VOJACI , 150 , 83 ) ;
29218: LD_EXP 64
29222: PPUSH
29223: LD_INT 150
29225: PPUSH
29226: LD_INT 83
29228: PPUSH
29229: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 78 ) ;
29233: LD_EXP 64
29237: PPUSH
29238: LD_INT 141
29240: PPUSH
29241: LD_INT 78
29243: PPUSH
29244: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 86 ) ;
29248: LD_EXP 64
29252: PPUSH
29253: LD_INT 141
29255: PPUSH
29256: LD_INT 86
29258: PPUSH
29259: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
29263: LD_INT 142
29265: PPUSH
29266: LD_INT 80
29268: PPUSH
29269: CALL_OW 84
// wait ( 0 0$5 ) ;
29273: LD_INT 175
29275: PPUSH
29276: CALL_OW 67
// for i in ARABI_doraz do
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: LD_EXP 65
29289: PUSH
29290: FOR_IN
29291: IFFALSE 29310
// PlaceUnitArea ( i , Arabi1 , false ) ;
29293: LD_VAR 0 2
29297: PPUSH
29298: LD_INT 12
29300: PPUSH
29301: LD_INT 0
29303: PPUSH
29304: CALL_OW 49
29308: GO 29290
29310: POP
29311: POP
// ComMoveXY ( ARABI_doraz , 153 , 85 ) ;
29312: LD_EXP 65
29316: PPUSH
29317: LD_INT 153
29319: PPUSH
29320: LD_INT 85
29322: PPUSH
29323: CALL_OW 111
// AddComAttackUnit ( ARABI_doraz , RU1_dep ) ;
29327: LD_EXP 65
29331: PPUSH
29332: LD_INT 1
29334: PPUSH
29335: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab1 ) ;
29339: LD_EXP 65
29343: PPUSH
29344: LD_INT 6
29346: PPUSH
29347: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab2 ) ;
29351: LD_EXP 65
29355: PPUSH
29356: LD_INT 16
29358: PPUSH
29359: CALL_OW 175
// end ;
29363: LD_VAR 0 1
29367: RET
// export function ArDontAttackPlayer ( bol ) ; var i ; begin
29368: LD_INT 0
29370: PPUSH
29371: PPUSH
// for i in FilterAllUnits ( [ f_side , You ] ) do
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_INT 22
29379: PUSH
29380: LD_EXP 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PPUSH
29389: CALL_OW 69
29393: PUSH
29394: FOR_IN
29395: IFFALSE 29435
// if bol then
29397: LD_VAR 0 1
29401: IFFALSE 29419
// DoNotAttack ( Arabi , i ) else
29403: LD_EXP 5
29407: PPUSH
29408: LD_VAR 0 3
29412: PPUSH
29413: CALL_OW 471
29417: GO 29433
// NormalAttack ( Arabi , i ) ;
29419: LD_EXP 5
29423: PPUSH
29424: LD_VAR 0 3
29428: PPUSH
29429: CALL_OW 472
29433: GO 29394
29435: POP
29436: POP
// end ;
29437: LD_VAR 0 2
29441: RET
// every 0 0$5 trigger arabsky_utok_zacal do var pom , pom1 , i ; var utek ;
29442: LD_LOC 27
29446: IFFALSE 29630
29448: GO 29450
29450: DISABLE
29451: LD_INT 0
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
// begin utek = [ ] ;
29457: LD_ADDR_VAR 0 4
29461: PUSH
29462: EMPTY
29463: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) ;
29464: LD_ADDR_VAR 0 1
29468: PUSH
29469: LD_INT 14
29471: PPUSH
29472: LD_INT 22
29474: PUSH
29475: LD_EXP 2
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 50
29486: PUSH
29487: EMPTY
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PPUSH
29494: CALL_OW 70
29498: ST_TO_ADDR
// if pom < 2 then
29499: LD_VAR 0 1
29503: PUSH
29504: LD_INT 2
29506: LESS
29507: IFFALSE 29604
// begin pom1 = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_ok ] ] ) ;
29509: LD_ADDR_VAR 0 2
29513: PUSH
29514: LD_INT 22
29516: PUSH
29517: LD_EXP 5
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 50
29528: PUSH
29529: EMPTY
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PPUSH
29536: CALL_OW 69
29540: ST_TO_ADDR
// if pom1 > 0 then
29541: LD_VAR 0 2
29545: PUSH
29546: LD_INT 0
29548: GREATER
29549: IFFALSE 29604
// for i in pom1 do
29551: LD_ADDR_VAR 0 3
29555: PUSH
29556: LD_VAR 0 2
29560: PUSH
29561: FOR_IN
29562: IFFALSE 29602
// if utek < 3 then
29564: LD_VAR 0 4
29568: PUSH
29569: LD_INT 3
29571: LESS
29572: IFFALSE 29592
// utek = utek ^ i else
29574: LD_ADDR_VAR 0 4
29578: PUSH
29579: LD_VAR 0 4
29583: PUSH
29584: LD_VAR 0 3
29588: ADD
29589: ST_TO_ADDR
29590: GO 29600
// arabsky_utok_zacal = false ;
29592: LD_ADDR_LOC 27
29596: PUSH
29597: LD_INT 0
29599: ST_TO_ADDR
29600: GO 29561
29602: POP
29603: POP
// end ; if utek > 0 then
29604: LD_VAR 0 4
29608: PUSH
29609: LD_INT 0
29611: GREATER
29612: IFFALSE 29629
// ComMoveXY ( utek , 166 , 95 ) ;
29614: LD_VAR 0 4
29618: PPUSH
29619: LD_INT 166
29621: PPUSH
29622: LD_INT 95
29624: PPUSH
29625: CALL_OW 111
// enable ;
29629: ENABLE
// end ;
29630: PPOPN 4
29632: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) < 2 do var pom , i ;
29633: LD_INT 14
29635: PPUSH
29636: LD_INT 22
29638: PUSH
29639: LD_EXP 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 50
29650: PUSH
29651: EMPTY
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PPUSH
29658: CALL_OW 70
29662: PUSH
29663: LD_INT 2
29665: LESS
29666: IFFALSE 29730
29668: GO 29670
29670: DISABLE
29671: LD_INT 0
29673: PPUSH
29674: PPUSH
// begin pom = FilterUnitsInArea ( Arabi2 , [ [ f_side , Arabi ] ] ) ;
29675: LD_ADDR_VAR 0 1
29679: PUSH
29680: LD_INT 13
29682: PPUSH
29683: LD_INT 22
29685: PUSH
29686: LD_EXP 5
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: PPUSH
29698: CALL_OW 70
29702: ST_TO_ADDR
// for i in pom do
29703: LD_ADDR_VAR 0 2
29707: PUSH
29708: LD_VAR 0 1
29712: PUSH
29713: FOR_IN
29714: IFFALSE 29727
// RemoveUnit ( i ) ;
29716: LD_VAR 0 2
29720: PPUSH
29721: CALL_OW 64
29725: GO 29713
29727: POP
29728: POP
// enable ;
29729: ENABLE
// end ;
29730: PPOPN 2
29732: END
// every 0 0$4 trigger arabsky_utok_zacal do
29733: LD_LOC 27
29737: IFFALSE 29833
29739: GO 29741
29741: DISABLE
// begin if GetLives ( RU1_el1 ) < 1000 and GetLives ( RU1_el1 ) < 150 then
29742: LD_INT 14
29744: PPUSH
29745: CALL_OW 256
29749: PUSH
29750: LD_INT 1000
29752: LESS
29753: PUSH
29754: LD_INT 14
29756: PPUSH
29757: CALL_OW 256
29761: PUSH
29762: LD_INT 150
29764: LESS
29765: AND
29766: IFFALSE 29778
// SetLives ( RU1_el1 , 150 ) ;
29768: LD_INT 14
29770: PPUSH
29771: LD_INT 150
29773: PPUSH
29774: CALL_OW 234
// if GetLives ( RU1_el2 ) < 1000 and GetLives ( RU1_el2 ) < 150 then
29778: LD_INT 15
29780: PPUSH
29781: CALL_OW 256
29785: PUSH
29786: LD_INT 1000
29788: LESS
29789: PUSH
29790: LD_INT 15
29792: PPUSH
29793: CALL_OW 256
29797: PUSH
29798: LD_INT 150
29800: LESS
29801: AND
29802: IFFALSE 29814
// SetLives ( RU1_el2 , 150 ) ;
29804: LD_INT 15
29806: PPUSH
29807: LD_INT 150
29809: PPUSH
29810: CALL_OW 234
// if IsOK ( RU1_el1 ) or IsOK ( RU1_el2 ) then
29814: LD_INT 14
29816: PPUSH
29817: CALL_OW 302
29821: PUSH
29822: LD_INT 15
29824: PPUSH
29825: CALL_OW 302
29829: OR
29830: IFFALSE 29833
// enable ;
29832: ENABLE
// end ;
29833: END
// every 0 0$5 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) <= 3 do var i ;
29834: LD_INT 14
29836: PPUSH
29837: LD_INT 22
29839: PUSH
29840: LD_EXP 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 50
29851: PUSH
29852: EMPTY
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PPUSH
29859: CALL_OW 70
29863: PUSH
29864: LD_INT 3
29866: LESSEQUAL
29867: IFFALSE 29914
29869: GO 29871
29871: DISABLE
29872: LD_INT 0
29874: PPUSH
// begin ArDontAttackPlayer ( false ) ;
29875: LD_INT 0
29877: PPUSH
29878: CALL 29368 0 1
// arabi_kirov_posily_posli ;
29882: CALL 30001 0 0
// DisableVideoExclamations ;
29886: CALL_OW 499
// music_nat = 0 ;
29890: LD_ADDR_OWVAR 71
29894: PUSH
29895: LD_INT 0
29897: ST_TO_ADDR
// chmo_6 ;
29898: CALL 16543 0 0
// InGameOff ;
29902: CALL_OW 9
// stav_omikron = 8 ;
29906: LD_ADDR_EXP 39
29910: PUSH
29911: LD_INT 8
29913: ST_TO_ADDR
// end ;
29914: PPOPN 1
29916: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) > 2 do var pom ;
29917: LD_INT 14
29919: PPUSH
29920: LD_INT 22
29922: PUSH
29923: LD_EXP 2
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: EMPTY
29933: LIST
29934: PPUSH
29935: CALL_OW 70
29939: PUSH
29940: LD_INT 2
29942: GREATER
29943: IFFALSE 29998
29945: GO 29947
29947: DISABLE
29948: LD_INT 0
29950: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) ;
29951: LD_ADDR_VAR 0 1
29955: PUSH
29956: LD_INT 14
29958: PPUSH
29959: LD_INT 22
29961: PUSH
29962: LD_EXP 2
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: PPUSH
29974: CALL_OW 70
29978: ST_TO_ADDR
// ComAttackUnit ( ARABI_doraz , pom [ 1 ] ) ;
29979: LD_EXP 65
29983: PPUSH
29984: LD_VAR 0 1
29988: PUSH
29989: LD_INT 1
29991: ARRAY
29992: PPUSH
29993: CALL_OW 115
// enable ;
29997: ENABLE
// end ;
29998: PPOPN 1
30000: END
// function arabi_kirov_posily_posli ; var i ; begin
30001: LD_INT 0
30003: PPUSH
30004: PPUSH
// for i in ARABI_KIROV_POSILY do
30005: LD_ADDR_VAR 0 2
30009: PUSH
30010: LD_EXP 66
30014: PUSH
30015: FOR_IN
30016: IFFALSE 30035
// PlaceUnitArea ( i , Arabi3 , false ) ;
30018: LD_VAR 0 2
30022: PPUSH
30023: LD_INT 33
30025: PPUSH
30026: LD_INT 0
30028: PPUSH
30029: CALL_OW 49
30033: GO 30015
30035: POP
30036: POP
// ComAgressiveMove ( ARABI_KIROV_POSILY , 142 , 84 ) ;
30037: LD_EXP 66
30041: PPUSH
30042: LD_INT 142
30044: PPUSH
30045: LD_INT 84
30047: PPUSH
30048: CALL_OW 114
// end ;
30052: LD_VAR 0 1
30056: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 4 do var i ;
30057: LD_INT 22
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 24
30072: PUSH
30073: LD_INT 1000
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 69
30092: PUSH
30093: LD_INT 4
30095: GREATER
30096: IFFALSE 30180
30098: GO 30100
30100: DISABLE
30101: LD_INT 0
30103: PPUSH
// begin enable ;
30104: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
30105: LD_ADDR_VAR 0 1
30109: PUSH
30110: LD_INT 22
30112: PUSH
30113: LD_INT 2
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: LD_INT 24
30125: PUSH
30126: LD_INT 1000
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PPUSH
30141: CALL_OW 69
30145: PUSH
30146: FOR_IN
30147: IFFALSE 30178
// if GetLives ( i ) > 500 then
30149: LD_VAR 0 1
30153: PPUSH
30154: CALL_OW 256
30158: PUSH
30159: LD_INT 500
30161: GREATER
30162: IFFALSE 30176
// SetLives ( i , 1000 ) ;
30164: LD_VAR 0 1
30168: PPUSH
30169: LD_INT 1000
30171: PPUSH
30172: CALL_OW 234
30176: GO 30146
30178: POP
30179: POP
// end ;
30180: PPOPN 1
30182: END
