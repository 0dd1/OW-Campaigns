// var stReady , stRepair , stInCombat , stHelp , stNotReady , ImpatienceTreshold ; var vozKirov , vozKirovImpat , vozKirovState , vozKirovOut , vozHrace , mechKirov , mechKirovOut ; var targHrace , targAcquired ; every 0 0$1 marked 10 do var i ; var auta , autapom ; var poc ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// begin auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
   9: LD_ADDR_VAR 0 2
  13: PUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 21
  19: PUSH
  20: LD_INT 2
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: PUSH
  27: LD_INT 59
  29: PUSH
  30: EMPTY
  31: LIST
  32: PUSH
  33: EMPTY
  34: LIST
  35: LIST
  36: PPUSH
  37: CALL_OW 70
  41: ST_TO_ADDR
// for i in auta do
  42: LD_ADDR_VAR 0 1
  46: PUSH
  47: LD_VAR 0 2
  51: PUSH
  52: FOR_IN
  53: IFFALSE 132
// begin ComMoveToArea ( i , Zarea_utok ) ;
  55: LD_VAR 0 1
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: CALL_OW 113
// AddComAgressiveMove ( i , 28 , 15 ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: LD_INT 28
  74: PPUSH
  75: LD_INT 15
  77: PPUSH
  78: CALL_OW 174
// AddComAttackUnit ( i , Am_bu3 ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: LD_INT 19
  89: PPUSH
  90: CALL_OW 175
// AddComAgressiveMove ( i , 13 , 9 ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: LD_INT 13
 101: PPUSH
 102: LD_INT 9
 104: PPUSH
 105: CALL_OW 174
// RUSKE_POSILY_RIDICI_LIST = RUSKE_POSILY_RIDICI_LIST diff IsDrivenBy ( i ) ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_EXP 57
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 311
 128: DIFF
 129: ST_TO_ADDR
// end ;
 130: GO 52
 132: POP
 133: POP
// auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: PPUSH
 142: LD_INT 21
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 3
 154: PUSH
 155: LD_INT 59
 157: PUSH
 158: EMPTY
 159: LIST
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PPUSH
 166: CALL_OW 70
 170: ST_TO_ADDR
// poc = 1 ;
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 1
 178: ST_TO_ADDR
// for i in RUSKE_POSILY_RIDICI_LIST do
 179: LD_ADDR_VAR 0 1
 183: PUSH
 184: LD_EXP 57
 188: PUSH
 189: FOR_IN
 190: IFFALSE 244
// begin if auta + 0 >= poc then
 192: LD_VAR 0 2
 196: PUSH
 197: LD_INT 0
 199: PLUS
 200: PUSH
 201: LD_VAR 0 4
 205: GREATEREQUAL
 206: IFFALSE 228
// ComEnterUnit ( i , auta [ poc ] ) ;
 208: LD_VAR 0 1
 212: PPUSH
 213: LD_VAR 0 2
 217: PUSH
 218: LD_VAR 0 4
 222: ARRAY
 223: PPUSH
 224: CALL_OW 120
// poc = poc + 1 ;
 228: LD_ADDR_VAR 0 4
 232: PUSH
 233: LD_VAR 0 4
 237: PUSH
 238: LD_INT 1
 240: PLUS
 241: ST_TO_ADDR
// end ;
 242: GO 189
 244: POP
 245: POP
// if RUSKE_POSILY_RIDICI_LIST <> 0 then
 246: LD_EXP 57
 250: PUSH
 251: LD_INT 0
 253: NONEQUAL
 254: IFFALSE 257
// enable ;
 256: ENABLE
// end ;
 257: PPOPN 4
 259: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 260: LD_EXP 41
 264: PUSH
 265: LD_EXP 39
 269: PUSH
 270: LD_INT 7
 272: LESS
 273: AND
 274: IFFALSE 296
 276: GO 278
 278: DISABLE
// begin RepairVehicles ( 6 , Om_repair , 61 , 9 ) ;
 279: LD_INT 6
 281: PPUSH
 282: LD_INT 52
 284: PPUSH
 285: LD_INT 61
 287: PPUSH
 288: LD_INT 9
 290: PPUSH
 291: CALL 724 0 4
// enable ;
 295: ENABLE
// end ;
 296: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 297: LD_EXP 41
 301: PUSH
 302: LD_EXP 39
 306: PUSH
 307: LD_INT 7
 309: LESS
 310: AND
 311: IFFALSE 323
 313: GO 315
 315: DISABLE
// begin AttackVehicles ( 6 ) ;
 316: LD_INT 6
 318: PPUSH
 319: CALL 324 0 1
// end ;
 323: END
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= 0 then
 333: LD_INT 22
 335: PUSH
 336: LD_VAR 0 1
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 21
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 24
 357: PUSH
 358: LD_INT 1000
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: LD_INT 0
 377: GREATEREQUAL
 378: IFFALSE 719
// repeat wait ( 0 0$1 ) ;
 380: LD_INT 35
 382: PPUSH
 383: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_or , [ f_weapon , 42 ] , [ f_weapon , 43 ] , [ f_weapon , 44 ] ] ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 22
 394: PUSH
 395: LD_VAR 0 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 21
 406: PUSH
 407: LD_INT 2
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 24
 416: PUSH
 417: LD_INT 650
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 2
 426: PUSH
 427: LD_INT 34
 429: PUSH
 430: LD_INT 42
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: LD_INT 34
 439: PUSH
 440: LD_INT 43
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PUSH
 447: LD_INT 34
 449: PUSH
 450: LD_INT 44
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// for j in vehiclesOK do
 474: LD_ADDR_VAR 0 4
 478: PUSH
 479: LD_VAR 0 5
 483: PUSH
 484: FOR_IN
 485: IFFALSE 660
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , j ) ;
 487: LD_ADDR_VAR 0 6
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PPUSH
 510: LD_VAR 0 4
 514: PPUSH
 515: CALL_OW 74
 519: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
 520: LD_ADDR_VAR 0 7
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: LD_INT 59
 540: PUSH
 541: EMPTY
 542: LIST
 543: PUSH
 544: LD_INT 21
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 21
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PUSH
 574: EMPTY
 575: LIST
 576: PPUSH
 577: CALL_OW 69
 581: PPUSH
 582: LD_VAR 0 4
 586: PPUSH
 587: CALL_OW 74
 591: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
 592: LD_VAR 0 4
 596: PPUSH
 597: LD_VAR 0 6
 601: PPUSH
 602: CALL_OW 296
 606: PUSH
 607: LD_INT 8
 609: PLUS
 610: PUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_VAR 0 7
 620: PPUSH
 621: CALL_OW 296
 625: LESS
 626: IFFALSE 644
// ComAttackUnit ( j , target1 ) else
 628: LD_VAR 0 4
 632: PPUSH
 633: LD_VAR 0 6
 637: PPUSH
 638: CALL_OW 115
 642: GO 658
// ComAttackUnit ( j , target2 ) ;
 644: LD_VAR 0 4
 648: PPUSH
 649: LD_VAR 0 7
 653: PPUSH
 654: CALL_OW 115
// end ;
 658: GO 484
 660: POP
 661: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 or stav_omikron >= 7 ;
 662: LD_INT 22
 664: PUSH
 665: LD_VAR 0 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: LD_INT 1000
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: PUSH
 704: LD_INT 0
 706: EQUAL
 707: PUSH
 708: LD_EXP 39
 712: PUSH
 713: LD_INT 7
 715: GREATEREQUAL
 716: OR
 717: IFFALSE 380
// end ;
 719: LD_VAR 0 2
 723: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
 728: PPUSH
 729: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
 730: LD_ADDR_VAR 0 8
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_VAR 0 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 21
 749: PUSH
 750: LD_INT 2
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 24
 762: PUSH
 763: LD_INT 650
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: ST_TO_ADDR
// if damageVehicles > 0 then
 784: LD_VAR 0 8
 788: PUSH
 789: LD_INT 0
 791: GREATER
 792: IFFALSE 813
// ComMoveXY ( damageVehicles , repX , repY ) ;
 794: LD_VAR 0 8
 798: PPUSH
 799: LD_VAR 0 3
 803: PPUSH
 804: LD_VAR 0 4
 808: PPUSH
 809: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 813: LD_VAR 0 8
 817: PPUSH
 818: LD_INT 95
 820: PUSH
 821: LD_VAR 0 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 3
 832: PUSH
 833: LD_INT 58
 835: PUSH
 836: EMPTY
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 72
 851: PUSH
 852: LD_INT 0
 854: GREATER
 855: IFFALSE 922
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
 857: LD_ADDR_VAR 0 6
 861: PUSH
 862: LD_VAR 0 8
 866: PPUSH
 867: LD_INT 95
 869: PUSH
 870: LD_VAR 0 2
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: LD_INT 3
 881: PUSH
 882: LD_INT 58
 884: PUSH
 885: EMPTY
 886: LIST
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 72
 900: PUSH
 901: FOR_IN
 902: IFFALSE 920
// ComExitVehicle ( UnitsInside ( i ) ) ;
 904: LD_VAR 0 6
 908: PPUSH
 909: CALL_OW 313
 913: PPUSH
 914: CALL_OW 121
 918: GO 901
 920: POP
 921: POP
// end ;
 922: LD_VAR 0 5
 926: RET
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and GetSide ( human ) = 6 and IsOk ( vehicle ) then
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 255
 936: PUSH
 937: LD_INT 6
 939: EQUAL
 940: PUSH
 941: LD_VAR 0 2
 945: PPUSH
 946: CALL_OW 255
 950: PUSH
 951: LD_INT 6
 953: EQUAL
 954: AND
 955: PUSH
 956: LD_VAR 0 1
 960: PPUSH
 961: CALL_OW 302
 965: AND
 966: IFFALSE 1041
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
 968: LD_VAR 0 1
 972: PPUSH
 973: CALL_OW 264
 977: PUSH
 978: LD_INT 42
 980: EQUAL
 981: PUSH
 982: LD_VAR 0 1
 986: PPUSH
 987: CALL_OW 264
 991: PUSH
 992: LD_INT 43
 994: EQUAL
 995: OR
 996: PUSH
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 264
1006: PUSH
1007: LD_INT 44
1009: EQUAL
1010: OR
1011: IFFALSE 1041
// begin ComRepairVehicle ( human , vehicle ) ;
1013: LD_VAR 0 2
1017: PPUSH
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
1027: LD_VAR 0 2
1031: PPUSH
1032: LD_VAR 0 1
1036: PPUSH
1037: CALL_OW 180
// end ; end ;
1041: PPOPN 2
1043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do var i ;
1044: LD_INT 22
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 21
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: IFFALSE 1149
1074: GO 1076
1076: DISABLE
1077: LD_INT 0
1079: PPUSH
// begin enable ;
1080: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_INT 6
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 21
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PPUSH
1110: CALL_OW 69
1114: PUSH
1115: FOR_IN
1116: IFFALSE 1147
// if GetFuel ( i ) < 3 then
1118: LD_VAR 0 1
1122: PPUSH
1123: CALL_OW 261
1127: PUSH
1128: LD_INT 3
1130: LESS
1131: IFFALSE 1145
// SetFuel ( i , 3 ) ;
1133: LD_VAR 0 1
1137: PPUSH
1138: LD_INT 3
1140: PPUSH
1141: CALL_OW 240
1145: GO 1115
1147: POP
1148: POP
// end ; end_of_file
1149: PPOPN 1
1151: END
// export You , You2 , You3 , Amici , Arabi ; export KurinDialog ; export KurinAddTime ; starting begin RandomizeAll ;
1152: CALL_OW 11
// InitHc ;
1156: CALL_OW 19
// InitBc ;
1160: CALL_OW 21
// InitVc ;
1164: CALL_OW 20
// InitUc ;
1168: CALL_OW 18
// KurinDialog = 0 ;
1172: LD_ADDR_EXP 6
1176: PUSH
1177: LD_INT 0
1179: ST_TO_ADDR
// KurinAddTime = 0 ;
1180: LD_ADDR_EXP 7
1184: PUSH
1185: LD_INT 0
1187: ST_TO_ADDR
// set_difficulty ;
1188: CALL 4327 0 0
// load_postav ;
1192: CALL 2152 0 0
// load_promenne ;
1196: CALL 2304 0 0
// You = 3 ;
1200: LD_ADDR_EXP 1
1204: PUSH
1205: LD_INT 3
1207: ST_TO_ADDR
// You2 = 6 ;
1208: LD_ADDR_EXP 2
1212: PUSH
1213: LD_INT 6
1215: ST_TO_ADDR
// You3 = 5 ;
1216: LD_ADDR_EXP 3
1220: PUSH
1221: LD_INT 5
1223: ST_TO_ADDR
// Amici = 1 ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// Arabi = 2 ;
1232: LD_ADDR_EXP 5
1236: PUSH
1237: LD_INT 2
1239: ST_TO_ADDR
// placni_budovy_z_predesle_mise ;
1240: CALL 2706 0 0
// RevealFogArea ( You , CelaRU02 ) ;
1244: LD_EXP 1
1248: PPUSH
1249: LD_INT 36
1251: PPUSH
1252: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1256: LD_EXP 2
1260: PPUSH
1261: LD_INT 36
1263: PPUSH
1264: CALL_OW 332
// create_arabsky_utok ;
1268: CALL 18897 0 0
// create_americka_pomoc_hlidce ;
1272: CALL 16821 0 0
// create_americke_posily ;
1276: CALL 17690 0 0
// create_ruske_posily_na_omicron ;
1280: CALL 20046 0 0
// create_arabi_komanda ;
1284: CALL 21018 0 0
// create_ru_posily_ma_utek ;
1288: CALL 21864 0 0
// create_arabi_na_posily_kirovu ;
1292: CALL 22316 0 0
// create_cerpaci_ruske_auta ;
1296: CALL 22768 0 0
// create_am_jednotky ;
1300: CALL 20688 0 0
// set_skily_amikum ;
1304: CALL 17174 0 0
// uklid_rusu ;
1308: CALL 5095 0 0
// ChangeSideFog ( You , You ) ;
1312: LD_EXP 1
1316: PPUSH
1317: LD_EXP 1
1321: PPUSH
1322: CALL_OW 343
// ChangeSideFog ( You2 , You ) ;
1326: LD_EXP 2
1330: PPUSH
1331: LD_EXP 1
1335: PPUSH
1336: CALL_OW 343
// pojmenovani_zakladen ;
1340: CALL 4752 0 0
// InGameOn ;
1344: CALL_OW 8
// CenterOnXY ( 137 , 76 ) ;
1348: LD_INT 137
1350: PPUSH
1351: LD_INT 76
1353: PPUSH
1354: CALL_OW 84
// RevealFogArea ( You , CelaRU02 ) ;
1358: LD_EXP 1
1362: PPUSH
1363: LD_INT 36
1365: PPUSH
1366: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1370: LD_EXP 2
1374: PPUSH
1375: LD_INT 36
1377: PPUSH
1378: CALL_OW 332
// uvodni_pokec ;
1382: CALL 10206 0 0
// end ;
1386: END
// on UnitDestroyed ( un ) do begin if un = schol2 and GetSide ( un ) = 6 then
1387: LD_VAR 0 1
1391: PUSH
1392: LD_EXP 34
1396: EQUAL
1397: PUSH
1398: LD_VAR 0 1
1402: PPUSH
1403: CALL_OW 255
1407: PUSH
1408: LD_INT 6
1410: EQUAL
1411: AND
1412: IFFALSE 1418
// SA_DontSaveScholtze ;
1414: CALL 29187 0 0
// if un = bur then
1418: LD_VAR 0 1
1422: PUSH
1423: LD_EXP 29
1427: EQUAL
1428: IFFALSE 1437
// YouLost ( Burlak ) ;
1430: LD_STRING Burlak
1432: PPUSH
1433: CALL_OW 104
// end ;
1437: PPOPN 1
1439: END
// export function konec_mise_lhani ; begin
1440: LD_INT 0
1442: PPUSH
// hlaska_lhani ;
1443: CALL 15593 0 0
// YouLost ( Vehicles ) ;
1447: LD_STRING Vehicles
1449: PPUSH
1450: CALL_OW 104
// end ;
1454: LD_VAR 0 1
1458: RET
// export function konec_pred_omikronem ; begin
1459: LD_INT 0
1461: PPUSH
// YouLost ( Delay ) ;
1462: LD_STRING Delay
1464: PPUSH
1465: CALL_OW 104
// end ;
1469: LD_VAR 0 1
1473: RET
// export function konec_mise_utok ; begin
1474: LD_INT 0
1476: PPUSH
// YouLost ( SelfAttack ) ;
1477: LD_STRING SelfAttack
1479: PPUSH
1480: CALL_OW 104
// end ;
1484: LD_VAR 0 1
1488: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var mrtvi ; var all_people ; var medal1 , medal2 , medal3 ; begin
1489: LD_INT 0
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
// medal1 := false ;
1502: LD_ADDR_VAR 0 9
1506: PUSH
1507: LD_INT 0
1509: ST_TO_ADDR
// medal2 := false ;
1510: LD_ADDR_VAR 0 10
1514: PUSH
1515: LD_INT 0
1517: ST_TO_ADDR
// medal3 := false ;
1518: LD_ADDR_VAR 0 11
1522: PUSH
1523: LD_INT 0
1525: ST_TO_ADDR
// DisableExclamations ;
1526: CALL_OW 474
// gained_medals := [ ] ;
1530: LD_ADDR_OWVAR 61
1534: PUSH
1535: EMPTY
1536: ST_TO_ADDR
// missing_medals := [ ] ;
1537: LD_ADDR_OWVAR 62
1541: PUSH
1542: EMPTY
1543: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) = 1 then
1544: LD_INT 22
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: CALL_OW 69
1572: PUSH
1573: LD_INT 1
1575: EQUAL
1576: IFFALSE 1582
// SA_OneDepotWin ;
1578: CALL 29202 0 0
// if Prezite_posily >= muze_projit_posil [ difficulty ] then
1582: LD_EXP 73
1586: PUSH
1587: LD_EXP 22
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: GREATEREQUAL
1598: IFFALSE 1613
// AddMedal ( PreventReinforcements , - 1 ) else
1600: LD_STRING PreventReinforcements
1602: PPUSH
1603: LD_INT 1
1605: NEG
1606: PPUSH
1607: CALL_OW 101
1611: GO 1631
// begin medal1 := true ;
1613: LD_ADDR_VAR 0 9
1617: PUSH
1618: LD_INT 1
1620: ST_TO_ADDR
// AddMedal ( PreventReinforcements , 1 ) ;
1621: LD_STRING PreventReinforcements
1623: PPUSH
1624: LD_INT 1
1626: PPUSH
1627: CALL_OW 101
// end ; if scholtze_saved and IsOk ( schol ) and GetSide ( schol ) = 3 then
1631: LD_EXP 37
1635: PUSH
1636: LD_EXP 33
1640: PPUSH
1641: CALL_OW 302
1645: AND
1646: PUSH
1647: LD_EXP 33
1651: PPUSH
1652: CALL_OW 255
1656: PUSH
1657: LD_INT 3
1659: EQUAL
1660: AND
1661: IFFALSE 1683
// begin AddMedal ( Scholtze , 1 ) ;
1663: LD_STRING Scholtze
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 101
// medal2 := true ;
1673: LD_ADDR_VAR 0 10
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// end else
1681: GO 1694
// AddMedal ( Scholtze , - 1 ) ;
1683: LD_STRING Scholtze
1685: PPUSH
1686: LD_INT 1
1688: NEG
1689: PPUSH
1690: CALL_OW 101
// case stav_aut_new of 1 :
1694: LD_EXP 46
1698: PUSH
1699: LD_INT 1
1701: DOUBLE
1702: EQUAL
1703: IFTRUE 1707
1705: GO 1728
1707: POP
// begin AddMedal ( Surplus , 1 ) ;
1708: LD_STRING Surplus
1710: PPUSH
1711: LD_INT 1
1713: PPUSH
1714: CALL_OW 101
// medal3 := true ;
1718: LD_ADDR_VAR 0 11
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// end ; 2 :
1726: GO 1773
1728: LD_INT 2
1730: DOUBLE
1731: EQUAL
1732: IFTRUE 1736
1734: GO 1750
1736: POP
// AddMedal ( Surplus , - 1 ) ; 3 :
1737: LD_STRING Surplus
1739: PPUSH
1740: LD_INT 1
1742: NEG
1743: PPUSH
1744: CALL_OW 101
1748: GO 1773
1750: LD_INT 3
1752: DOUBLE
1753: EQUAL
1754: IFTRUE 1758
1756: GO 1772
1758: POP
// AddMedal ( Surplus , - 2 ) ; end ;
1759: LD_STRING Surplus
1761: PPUSH
1762: LD_INT 2
1764: NEG
1765: PPUSH
1766: CALL_OW 101
1770: GO 1773
1772: POP
// if not stav_aut_new then
1773: LD_EXP 46
1777: NOT
1778: IFFALSE 1791
// AddMedal ( Surplus , - 1 ) ;
1780: LD_STRING Surplus
1782: PPUSH
1783: LD_INT 1
1785: NEG
1786: PPUSH
1787: CALL_OW 101
// SA_EndMission ( 3 , 3 , medal1 , medal2 , medal3 ) ;
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: LD_VAR 0 9
1801: PPUSH
1802: LD_VAR 0 10
1806: PPUSH
1807: LD_VAR 0 11
1811: PPUSH
1812: CALL 29217 0 5
// GiveMedals ( Main ) ;
1816: LD_STRING Main
1818: PPUSH
1819: CALL_OW 102
// all_people := FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1823: LD_ADDR_VAR 0 8
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_EXP 1
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 21
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: ST_TO_ADDR
// RewardPeople ( all_people ) ;
1859: LD_VAR 0 8
1863: PPUSH
1864: CALL_OW 43
// if not ( bel in all_people ) then
1868: LD_EXP 32
1872: PUSH
1873: LD_VAR 0 8
1877: IN
1878: NOT
1879: IFFALSE 1890
// KillUnit ( bel ) ;
1881: LD_EXP 32
1885: PPUSH
1886: CALL_OW 66
// if not ( gny in all_people ) then
1890: LD_EXP 31
1894: PUSH
1895: LD_VAR 0 8
1899: IN
1900: NOT
1901: IFFALSE 1912
// KillUnit ( gny ) ;
1903: LD_EXP 31
1907: PPUSH
1908: CALL_OW 66
// if not ( kov in all_people ) then
1912: LD_EXP 30
1916: PUSH
1917: LD_VAR 0 8
1921: IN
1922: NOT
1923: IFFALSE 1934
// KillUnit ( kov ) ;
1925: LD_EXP 30
1929: PPUSH
1930: CALL_OW 66
// if not ( schol in all_people ) then
1934: LD_EXP 33
1938: PUSH
1939: LD_VAR 0 8
1943: IN
1944: NOT
1945: IFFALSE 1956
// KillUnit ( schol ) ;
1947: LD_EXP 33
1951: PPUSH
1952: CALL_OW 66
// SaveCharacters ( bur , Burlak ) ;
1956: LD_EXP 29
1960: PPUSH
1961: LD_STRING Burlak
1963: PPUSH
1964: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
1968: LD_EXP 32
1972: PPUSH
1973: LD_STRING Belkov
1975: PPUSH
1976: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
1980: LD_EXP 31
1984: PPUSH
1985: LD_STRING Gnyevko
1987: PPUSH
1988: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
1992: LD_EXP 30
1996: PPUSH
1997: LD_STRING Kovalyuk
1999: PPUSH
2000: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
2004: LD_EXP 33
2008: PPUSH
2009: LD_STRING Scholtze
2011: PPUSH
2012: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
2016: LD_EXP 28
2020: PPUSH
2021: LD_STRING Popov
2023: PPUSH
2024: CALL_OW 38
// pom := all_people diff [ bur , kur , bel , gny , kov , schol , schol2 , pop ] ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_VAR 0 8
2037: PUSH
2038: LD_EXP 29
2042: PUSH
2043: LD_EXP 27
2047: PUSH
2048: LD_EXP 32
2052: PUSH
2053: LD_EXP 31
2057: PUSH
2058: LD_EXP 30
2062: PUSH
2063: LD_EXP 33
2067: PUSH
2068: LD_EXP 34
2072: PUSH
2073: LD_EXP 28
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: DIFF
2088: ST_TO_ADDR
// SaveCharacters ( pom , survivors1 ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_STRING survivors1
2096: PPUSH
2097: CALL_OW 38
// SaveVariable ( BELKOV_SAVED , belkov_saved ) ;
2101: LD_EXP 24
2105: PPUSH
2106: LD_STRING belkov_saved
2108: PPUSH
2109: CALL_OW 39
// SaveVariable ( STAV_UTOKU , stav_utoku ) ;
2113: LD_EXP 25
2117: PPUSH
2118: LD_STRING stav_utoku
2120: PPUSH
2121: CALL_OW 39
// SaveVariable ( stav_aut , Surplus_vehicles ) ;
2125: LD_EXP 38
2129: PPUSH
2130: LD_STRING Surplus_vehicles
2132: PPUSH
2133: CALL_OW 39
// YouWin ;
2137: CALL_OW 103
// EnableExclamations ;
2141: CALL_OW 473
// exit ;
2145: GO 2147
// end ;
2147: LD_VAR 0 1
2151: RET
// function load_postav ; begin
2152: LD_INT 0
2154: PPUSH
// grishko = NewCharacter ( Grishko ) ;
2155: LD_ADDR_EXP 35
2159: PUSH
2160: LD_STRING Grishko
2162: PPUSH
2163: CALL_OW 25
2167: ST_TO_ADDR
// kur = nacti_osobu ( kurin ) ;
2168: LD_ADDR_EXP 27
2172: PUSH
2173: LD_STRING kurin
2175: PPUSH
2176: CALL 20974 0 1
2180: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
2181: LD_ADDR_EXP 32
2185: PUSH
2186: LD_STRING Belkov
2188: PPUSH
2189: CALL 20974 0 1
2193: ST_TO_ADDR
// kov = nacti_osobu ( Kovalyuk ) ;
2194: LD_ADDR_EXP 30
2198: PUSH
2199: LD_STRING Kovalyuk
2201: PPUSH
2202: CALL 20974 0 1
2206: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Burlak
2214: PPUSH
2215: CALL 20974 0 1
2219: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
2220: LD_ADDR_EXP 31
2224: PUSH
2225: LD_STRING Gnyevko
2227: PPUSH
2228: CALL 20974 0 1
2232: ST_TO_ADDR
// pop = NewCharacter ( Popov ) ;
2233: LD_ADDR_EXP 28
2237: PUSH
2238: LD_STRING Popov
2240: PPUSH
2241: CALL_OW 25
2245: ST_TO_ADDR
// if CheckCharacterSet ( survivors1 ) then
2246: LD_STRING survivors1
2248: PPUSH
2249: CALL_OW 29
2253: IFFALSE 2268
// other_survivors_mise_2 = CreateCharacterSet ( survivors1 ) ;
2255: LD_ADDR_EXP 71
2259: PUSH
2260: LD_STRING survivors1
2262: PPUSH
2263: CALL_OW 31
2267: ST_TO_ADDR
// if CheckCharacterSet ( amici_bw ) then
2268: LD_STRING amici_bw
2270: PPUSH
2271: CALL_OW 29
2275: IFFALSE 2292
// amici_bw_2 = CreateCharacter ( amici_bw ) else
2277: LD_ADDR_EXP 10
2281: PUSH
2282: LD_STRING amici_bw
2284: PPUSH
2285: CALL_OW 34
2289: ST_TO_ADDR
2290: GO 2299
// amici_bw_2 = [ ] ;
2292: LD_ADDR_EXP 10
2296: PUSH
2297: EMPTY
2298: ST_TO_ADDR
// end ;
2299: LD_VAR 0 1
2303: RET
// function load_promenne ; var default_budovy ; begin
2304: LD_INT 0
2306: PPUSH
2307: PPUSH
// default_budovy = [ [ 0 , 2 , 66 , 97 , 0 ] , [ 2 , 1 , 61 , 83 , 2 ] , [ 6 , 1 , 73 , 90 , 4 ] ] ;
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: LD_INT 0
2315: PUSH
2316: LD_INT 2
2318: PUSH
2319: LD_INT 66
2321: PUSH
2322: LD_INT 97
2324: PUSH
2325: LD_INT 0
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: LD_INT 61
2343: PUSH
2344: LD_INT 83
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 6
2359: PUSH
2360: LD_INT 1
2362: PUSH
2363: LD_INT 73
2365: PUSH
2366: LD_INT 90
2368: PUSH
2369: LD_INT 4
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: ST_TO_ADDR
// budovy_mise_2 = LoadVariable ( budovy , default_budovy ) ;
2384: LD_ADDR_EXP 8
2388: PUSH
2389: LD_STRING budovy
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 30
2401: ST_TO_ADDR
// breastworks_east = LoadVariable ( bw_east , 3 ) ;
2402: LD_ADDR_EXP 9
2406: PUSH
2407: LD_STRING bw_east
2409: PPUSH
2410: LD_INT 3
2412: PPUSH
2413: CALL_OW 30
2417: ST_TO_ADDR
// end ;
2418: LD_VAR 0 1
2422: RET
// export function create_scholtze ; var pom ; begin
2423: LD_INT 0
2425: PPUSH
2426: PPUSH
// pom = NewCharacter ( Scholtze ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_STRING Scholtze
2434: PPUSH
2435: CALL_OW 25
2439: ST_TO_ADDR
// SetSide ( pom , You2 ) ;
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_EXP 2
2449: PPUSH
2450: CALL_OW 235
// SetClass ( pom , class_scientistic ) ;
2454: LD_VAR 0 2
2458: PPUSH
2459: LD_INT 4
2461: PPUSH
2462: CALL_OW 336
// PlaceUnitXYR ( pom , 49 , 5 , 8 , true ) ;
2466: LD_VAR 0 2
2470: PPUSH
2471: LD_INT 49
2473: PPUSH
2474: LD_INT 5
2476: PPUSH
2477: LD_INT 8
2479: PPUSH
2480: LD_INT 1
2482: PPUSH
2483: CALL_OW 50
// result = pom ;
2487: LD_ADDR_VAR 0 1
2491: PUSH
2492: LD_VAR 0 2
2496: ST_TO_ADDR
// end ;
2497: LD_VAR 0 1
2501: RET
// on Command ( com ) do var i , j , temp ;
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
2506: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: LD_INT 22
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 21
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 69
2540: PUSH
2541: FOR_IN
2542: IFFALSE 2689
// if GetTaskList ( i ) > 0 then
2544: LD_VAR 0 2
2548: PPUSH
2549: CALL_OW 437
2553: PUSH
2554: LD_INT 0
2556: GREATER
2557: IFFALSE 2687
// for j = 1 to GetTaskList ( i ) do
2559: LD_ADDR_VAR 0 3
2563: PUSH
2564: DOUBLE
2565: LD_INT 1
2567: DEC
2568: ST_TO_ADDR
2569: LD_VAR 0 2
2573: PPUSH
2574: CALL_OW 437
2578: PUSH
2579: FOR_TO
2580: IFFALSE 2685
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 2
2591: PPUSH
2592: CALL_OW 437
2596: PUSH
2597: LD_VAR 0 3
2601: ARRAY
2602: PUSH
2603: LD_INT 4
2605: ARRAY
2606: ST_TO_ADDR
// if temp = RU1_dep or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
2607: LD_VAR 0 4
2611: PUSH
2612: LD_INT 1
2614: EQUAL
2615: PUSH
2616: LD_VAR 0 4
2620: PPUSH
2621: CALL_OW 255
2625: PUSH
2626: LD_INT 6
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 2
2634: PPUSH
2635: CALL_OW 437
2639: PUSH
2640: LD_VAR 0 3
2644: ARRAY
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_STRING e
2652: EQUAL
2653: AND
2654: PUSH
2655: LD_VAR 0 4
2659: PPUSH
2660: CALL_OW 247
2664: PUSH
2665: LD_INT 2
2667: EQUAL
2668: AND
2669: OR
2670: IFFALSE 2683
// SetTaskList ( i , [ ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: EMPTY
2678: PPUSH
2679: CALL_OW 446
// end ;
2683: GO 2579
2685: POP
2686: POP
2687: GO 2541
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 4
2693: END
// var konzervy_delay ; export budovy_mise_2 ; export breastworks_east ; export amici_bw_2 ; every 0 0$0.1 do
2694: GO 2696
2696: DISABLE
// begin konzervy_delay = 0 ;
2697: LD_ADDR_LOC 16
2701: PUSH
2702: LD_INT 0
2704: ST_TO_ADDR
// end ;
2705: END
// export function placni_budovy_z_predesle_mise ; var pom , i ; var ab ; var bw_e ; var vojaci ; var pocet ; begin
2706: LD_INT 0
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
2712: PPUSH
2713: PPUSH
2714: PPUSH
// uc_side = You ;
2715: LD_ADDR_OWVAR 20
2719: PUSH
2720: LD_EXP 1
2724: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
2725: LD_ADDR_OWVAR 44
2729: PUSH
2730: LD_INT 9
2732: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2733: LD_ADDR_OWVAR 45
2737: PUSH
2738: LD_INT 9
2740: ST_TO_ADDR
// for i in budovy_mise_2 do
2741: LD_ADDR_VAR 0 3
2745: PUSH
2746: LD_EXP 8
2750: PUSH
2751: FOR_IN
2752: IFFALSE 2900
// begin uc_nation = i [ 6 ] ;
2754: LD_ADDR_OWVAR 21
2758: PUSH
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 6
2766: ARRAY
2767: ST_TO_ADDR
// bc_type = i [ 1 ] ;
2768: LD_ADDR_OWVAR 42
2772: PUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 1
2780: ARRAY
2781: ST_TO_ADDR
// bc_level = i [ 2 ] ;
2782: LD_ADDR_OWVAR 43
2786: PUSH
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: ST_TO_ADDR
// pom = CreateAndPlaceBuildingXYD ( i [ 3 ] + 30 , i [ 4 ] - 20 , i [ 5 ] ) ;
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 3
2808: ARRAY
2809: PUSH
2810: LD_INT 30
2812: PLUS
2813: PPUSH
2814: LD_VAR 0 3
2818: PUSH
2819: LD_INT 4
2821: ARRAY
2822: PUSH
2823: LD_INT 20
2825: MINUS
2826: PPUSH
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 5
2834: ARRAY
2835: PPUSH
2836: CALL_OW 47
2840: ST_TO_ADDR
// if bc_type in [ b_depot , b_warehouse ] then
2841: LD_OWVAR 42
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 1
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: IN
2856: IFFALSE 2898
// begin SetResourceType ( GetBase ( pom ) , mat_cans , 100 ) ;
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 274
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 100
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( pom ) , mat_oil , 25 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 25
2893: PPUSH
2894: CALL_OW 277
// end ; end ;
2898: GO 2751
2900: POP
2901: POP
// bw_e = breastworks_east ;
2902: LD_ADDR_VAR 0 5
2906: PUSH
2907: LD_EXP 9
2911: ST_TO_ADDR
// uc_side = Amici ;
2912: LD_ADDR_OWVAR 20
2916: PUSH
2917: LD_EXP 4
2921: ST_TO_ADDR
// uc_nation = nation_american ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// bc_type = b_breastwork ;
2930: LD_ADDR_OWVAR 42
2934: PUSH
2935: LD_INT 31
2937: ST_TO_ADDR
// bc_level = level_bw_e [ difficulty ] ;
2938: LD_ADDR_OWVAR 43
2942: PUSH
2943: LD_EXP 11
2947: PUSH
2948: LD_OWVAR 67
2952: ARRAY
2953: ST_TO_ADDR
// if bw_e > 1 then
2954: LD_VAR 0 5
2958: PUSH
2959: LD_INT 1
2961: GREATER
2962: IFFALSE 2977
// CreateAndPlaceBuildingXYD ( 123 , 42 , 1 ) ;
2964: LD_INT 123
2966: PPUSH
2967: LD_INT 42
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: CALL_OW 47
// if bw_e = 1 or bw_e = 3 then
2977: LD_VAR 0 5
2981: PUSH
2982: LD_INT 1
2984: EQUAL
2985: PUSH
2986: LD_VAR 0 5
2990: PUSH
2991: LD_INT 3
2993: EQUAL
2994: OR
2995: IFFALSE 3010
// CreateAndPlaceBuildingXYD ( 120 , 36 , 1 ) ;
2997: LD_INT 120
2999: PPUSH
3000: LD_INT 36
3002: PPUSH
3003: LD_INT 1
3005: PPUSH
3006: CALL_OW 47
// vojaci = amici_bw_2 ;
3010: LD_ADDR_VAR 0 6
3014: PUSH
3015: LD_EXP 10
3019: ST_TO_ADDR
// if bw_e > 0 then
3020: LD_VAR 0 5
3024: PUSH
3025: LD_INT 0
3027: GREATER
3028: IFFALSE 3277
// begin if bw_e = 1 or bw_e = 2 then
3030: LD_VAR 0 5
3034: PUSH
3035: LD_INT 1
3037: EQUAL
3038: PUSH
3039: LD_VAR 0 5
3043: PUSH
3044: LD_INT 2
3046: EQUAL
3047: OR
3048: IFFALSE 3060
// pocet = 1 else
3050: LD_ADDR_VAR 0 7
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
3058: GO 3068
// pocet = 2 ;
3060: LD_ADDR_VAR 0 7
3064: PUSH
3065: LD_INT 2
3067: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
3068: LD_ADDR_VAR 0 6
3072: PUSH
3073: LD_VAR 0 6
3077: PUSH
3078: LD_INT 1
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 2
3086: PPUSH
3087: LD_STRING 
3089: PPUSH
3090: CALL 16774 0 4
3094: ADD
3095: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
3096: LD_ADDR_VAR 0 6
3100: PUSH
3101: LD_VAR 0 6
3105: PUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 1
3111: PPUSH
3112: LD_INT 2
3114: PPUSH
3115: LD_STRING 
3117: PPUSH
3118: CALL 16774 0 4
3122: ADD
3123: ST_TO_ADDR
// pom = FilterUnitsinArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
3124: LD_ADDR_VAR 0 2
3128: PUSH
3129: LD_INT 22
3131: PPUSH
3132: LD_INT 22
3134: PUSH
3135: LD_EXP 4
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 31
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 70
3162: ST_TO_ADDR
// if pocet >= 1 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 1
3170: GREATEREQUAL
3171: IFFALSE 3220
// begin PlaceUnitXYR ( vojaci [ 1 ] , 129 , 39 , 5 , false ) ;
3173: LD_VAR 0 6
3177: PUSH
3178: LD_INT 1
3180: ARRAY
3181: PPUSH
3182: LD_INT 129
3184: PPUSH
3185: LD_INT 39
3187: PPUSH
3188: LD_INT 5
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 50
// ComEnterUnit ( vojaci [ 1 ] , pom [ 1 ] ) ;
3198: LD_VAR 0 6
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: PPUSH
3207: LD_VAR 0 2
3211: PUSH
3212: LD_INT 1
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ; if pocet = 2 then
3220: LD_VAR 0 7
3224: PUSH
3225: LD_INT 2
3227: EQUAL
3228: IFFALSE 3277
// begin PlaceUnitXYR ( vojaci [ 2 ] , 129 , 39 , 5 , false ) ;
3230: LD_VAR 0 6
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PPUSH
3239: LD_INT 129
3241: PPUSH
3242: LD_INT 39
3244: PPUSH
3245: LD_INT 5
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 50
// ComEnterUnit ( vojaci [ 2 ] , pom [ 2 ] ) ;
3255: LD_VAR 0 6
3259: PUSH
3260: LD_INT 2
3262: ARRAY
3263: PPUSH
3264: LD_VAR 0 2
3268: PUSH
3269: LD_INT 2
3271: ARRAY
3272: PPUSH
3273: CALL_OW 120
// end ; end ; end ;
3277: LD_VAR 0 1
3281: RET
// export function vyber_characteru ; var pom ; var units_na_vyber ; var i ; var pocet ; var vyber ; var osurviv ; begin
3282: LD_INT 0
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// uc_side = You ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_EXP 1
3300: ST_TO_ADDR
// uc_nation = nation_russian ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 3
3308: ST_TO_ADDR
// pocet = 3 ;
3309: LD_ADDR_VAR 0 5
3313: PUSH
3314: LD_INT 3
3316: ST_TO_ADDR
// units_na_vyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
3317: LD_ADDR_VAR 0 3
3321: PUSH
3322: LD_INT -4
3324: PUSH
3325: LD_INT -1
3327: PUSH
3328: LD_INT -6
3330: PUSH
3331: LD_EXP 29
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_change_class ] ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PUSH
3352: LD_INT -5
3354: PUSH
3355: EMPTY
3356: LIST
3357: ADD
3358: ST_TO_ADDR
// if IsOK ( gny ) then
3359: LD_EXP 31
3363: PPUSH
3364: CALL_OW 302
3368: IFFALSE 3402
// begin SetSide ( gny , You ) ;
3370: LD_EXP 31
3374: PPUSH
3375: LD_EXP 1
3379: PPUSH
3380: CALL_OW 235
// units_na_vyber = units_na_vyber ^ gny end else
3384: LD_ADDR_VAR 0 3
3388: PUSH
3389: LD_VAR 0 3
3393: PUSH
3394: LD_EXP 31
3398: ADD
3399: ST_TO_ADDR
3400: GO 3416
// pocet = pocet + 1 ;
3402: LD_ADDR_VAR 0 5
3406: PUSH
3407: LD_VAR 0 5
3411: PUSH
3412: LD_INT 1
3414: PLUS
3415: ST_TO_ADDR
// if IsOK ( kov ) then
3416: LD_EXP 30
3420: PPUSH
3421: CALL_OW 302
3425: IFFALSE 3459
// begin SetSide ( kov , You ) ;
3427: LD_EXP 30
3431: PPUSH
3432: LD_EXP 1
3436: PPUSH
3437: CALL_OW 235
// units_na_vyber = units_na_vyber ^ kov end else
3441: LD_ADDR_VAR 0 3
3445: PUSH
3446: LD_VAR 0 3
3450: PUSH
3451: LD_EXP 30
3455: ADD
3456: ST_TO_ADDR
3457: GO 3473
// pocet = pocet + 1 ;
3459: LD_ADDR_VAR 0 5
3463: PUSH
3464: LD_VAR 0 5
3468: PUSH
3469: LD_INT 1
3471: PLUS
3472: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: LD_VAR 0 3
3482: PUSH
3483: LD_INT -2
3485: PUSH
3486: LD_INT -3
3488: PUSH
3489: LD_INT -5
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: ADD
3497: ST_TO_ADDR
// if IsOK ( bel ) then
3498: LD_EXP 32
3502: PPUSH
3503: CALL_OW 302
3507: IFFALSE 3539
// begin SetSide ( bel , You ) ;
3509: LD_EXP 32
3513: PPUSH
3514: LD_EXP 1
3518: PPUSH
3519: CALL_OW 235
// units_na_vyber = units_na_vyber ^ bel ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: LD_VAR 0 3
3532: PUSH
3533: LD_EXP 32
3537: ADD
3538: ST_TO_ADDR
// end ; osurviv = other_survivors_mise_2 ;
3539: LD_ADDR_VAR 0 7
3543: PUSH
3544: LD_EXP 71
3548: ST_TO_ADDR
// for i in osurviv do
3549: LD_ADDR_VAR 0 4
3553: PUSH
3554: LD_VAR 0 7
3558: PUSH
3559: FOR_IN
3560: IFFALSE 3578
// SetSide ( i , You ) ;
3562: LD_VAR 0 4
3566: PPUSH
3567: LD_EXP 1
3571: PPUSH
3572: CALL_OW 235
3576: GO 3559
3578: POP
3579: POP
// units_na_vyber = units_na_vyber ^ osurviv ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_VAR 0 3
3589: PUSH
3590: LD_VAR 0 7
3594: ADD
3595: ST_TO_ADDR
// uc_side = You ;
3596: LD_ADDR_OWVAR 20
3600: PUSH
3601: LD_EXP 1
3605: ST_TO_ADDR
// uc_nation = nation_russian ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_INT 3
3613: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_soldier , 2 ,  ) ;
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: LD_VAR 0 3
3623: PUSH
3624: CALL 16739 0 0
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: LD_STRING 
3637: PPUSH
3638: CALL 16774 0 4
3642: ADD
3643: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( sex_female , class_soldier , 3 ,  ) ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_VAR 0 3
3653: PUSH
3654: LD_INT 2
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 3
3662: PPUSH
3663: LD_STRING 
3665: PPUSH
3666: CALL 16774 0 4
3670: ADD
3671: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_VAR 0 3
3681: PUSH
3682: CALL 16739 0 0
3686: PPUSH
3687: LD_INT 2
3689: PPUSH
3690: LD_INT 2
3692: PPUSH
3693: LD_STRING 
3695: PPUSH
3696: CALL 16774 0 4
3700: ADD
3701: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_VAR 0 3
3711: PUSH
3712: CALL 16739 0 0
3716: PPUSH
3717: LD_INT 4
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_STRING 
3725: PPUSH
3726: CALL 16774 0 4
3730: ADD
3731: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: LD_VAR 0 3
3741: PUSH
3742: CALL 16739 0 0
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_INT 2
3752: PPUSH
3753: LD_STRING 
3755: PPUSH
3756: CALL 16774 0 4
3760: ADD
3761: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_VAR 0 3
3771: PUSH
3772: CALL 16739 0 0
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: LD_STRING 
3785: PPUSH
3786: CALL 16774 0 4
3790: ADD
3791: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3792: LD_ADDR_VAR 0 3
3796: PUSH
3797: LD_VAR 0 3
3801: PUSH
3802: CALL 16739 0 0
3806: PPUSH
3807: LD_INT 4
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: LD_STRING 
3815: PPUSH
3816: CALL 16774 0 4
3820: ADD
3821: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: LD_VAR 0 3
3831: PUSH
3832: CALL 16739 0 0
3836: PPUSH
3837: LD_INT 3
3839: PPUSH
3840: LD_INT 2
3842: PPUSH
3843: LD_STRING 
3845: PPUSH
3846: CALL 16774 0 4
3850: ADD
3851: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet , pocet , units_na_vyber , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
3852: LD_ADDR_VAR 0 2
3856: PUSH
3857: LD_STRING Vyber si peopliky
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 2
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 4
3887: PUSH
3888: LD_INT 1
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 0
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 1
3907: PUSH
3908: LD_INT 0
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 42
3925: ST_TO_ADDR
// vyber = [ bur ] ;
3926: LD_ADDR_VAR 0 6
3930: PUSH
3931: LD_EXP 29
3935: PUSH
3936: EMPTY
3937: LIST
3938: ST_TO_ADDR
// if IsOK ( gny ) then
3939: LD_EXP 31
3943: PPUSH
3944: CALL_OW 302
3948: IFFALSE 3966
// vyber = vyber ^ gny ;
3950: LD_ADDR_VAR 0 6
3954: PUSH
3955: LD_VAR 0 6
3959: PUSH
3960: LD_EXP 31
3964: ADD
3965: ST_TO_ADDR
// if IsOK ( kov ) then
3966: LD_EXP 30
3970: PPUSH
3971: CALL_OW 302
3975: IFFALSE 3993
// vyber = vyber ^ kov ;
3977: LD_ADDR_VAR 0 6
3981: PUSH
3982: LD_VAR 0 6
3986: PUSH
3987: LD_EXP 30
3991: ADD
3992: ST_TO_ADDR
// vyber = vyber ^ pom ;
3993: LD_ADDR_VAR 0 6
3997: PUSH
3998: LD_VAR 0 6
4002: PUSH
4003: LD_VAR 0 2
4007: ADD
4008: ST_TO_ADDR
// manage_zbytek ( osurviv diff vyber ) ;
4009: LD_VAR 0 7
4013: PUSH
4014: LD_VAR 0 6
4018: DIFF
4019: PPUSH
4020: CALL 4254 0 1
// result := vyber ;
4024: LD_ADDR_VAR 0 1
4028: PUSH
4029: LD_VAR 0 6
4033: ST_TO_ADDR
// end ;
4034: LD_VAR 0 1
4038: RET
// export function placni_unity ( unity ) ; var i ; begin
4039: LD_INT 0
4041: PPUSH
4042: PPUSH
// for i in unity do
4043: LD_ADDR_VAR 0 3
4047: PUSH
4048: LD_VAR 0 1
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4093
// begin SetSide ( i , You ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_EXP 1
4065: PPUSH
4066: CALL_OW 235
// PlaceUnitXYR ( i , 99 , 73 , 5 , false ) ;
4070: LD_VAR 0 3
4074: PPUSH
4075: LD_INT 99
4077: PPUSH
4078: LD_INT 73
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 50
// end ;
4091: GO 4053
4093: POP
4094: POP
// wait ( 0 0$0.5 ) ;
4095: LD_INT 18
4097: PPUSH
4098: CALL_OW 67
// SaveForQuickRestart ;
4102: CALL_OW 22
// end ;
4106: LD_VAR 0 2
4110: RET
// every 0 0$10 trigger stav_omikron < 3 do
4111: LD_EXP 39
4115: PUSH
4116: LD_INT 3
4118: LESS
4119: IFFALSE 4188
4121: GO 4123
4123: DISABLE
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
4124: LD_INT 50
4126: PPUSH
4127: LD_INT 4200
4129: PPUSH
4130: CALL_OW 12
4134: PPUSH
4135: CALL_OW 67
// wait ( konzervy_delay * 0 0$5 ) ;
4139: LD_LOC 16
4143: PUSH
4144: LD_INT 175
4146: MUL
4147: PPUSH
4148: CALL_OW 67
// konzervy_delay = konzervy_delay + 1 ;
4152: LD_ADDR_LOC 16
4156: PUSH
4157: LD_LOC 16
4161: PUSH
4162: LD_INT 1
4164: PLUS
4165: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 12
4176: PPUSH
4177: LD_INT 7
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: CALL_OW 55
// enable ;
4187: ENABLE
// end ;
4188: END
// every 0 0$30 do
4189: GO 4191
4191: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4192: LD_INT 3
4194: PPUSH
4195: LD_INT 5
4197: PPUSH
4198: CALL_OW 12
4202: PPUSH
4203: LD_INT 7
4205: PPUSH
4206: LD_INT 1
4208: PPUSH
4209: CALL_OW 55
// end ;
4213: END
// every 1 1$20 do
4214: GO 4216
4216: DISABLE
// begin wait ( Rand ( 1 , 0 0$40 ) ) ;
4217: LD_INT 1
4219: PPUSH
4220: LD_INT 1400
4222: PPUSH
4223: CALL_OW 12
4227: PPUSH
4228: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 4 ) , konzervy_all , true ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 4
4237: PPUSH
4238: CALL_OW 12
4242: PPUSH
4243: LD_INT 25
4245: PPUSH
4246: LD_INT 1
4248: PPUSH
4249: CALL_OW 55
// end ;
4253: END
// function manage_zbytek ( lidi ) ; var i ; begin
4254: LD_INT 0
4256: PPUSH
4257: PPUSH
// for i in lidi do
4258: LD_ADDR_VAR 0 3
4262: PUSH
4263: LD_VAR 0 1
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4308
// begin SetSide ( i , You2 ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_EXP 2
4280: PPUSH
4281: CALL_OW 235
// PlaceUnitXYR ( i , 144 , 79 , 3 , false ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 144
4292: PPUSH
4293: LD_INT 79
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL_OW 50
// end ;
4306: GO 4268
4308: POP
4309: POP
// ComEnterUnit ( lidi , RU1_dep ) ;
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 120
// end ; end_of_file
4322: LD_VAR 0 2
4326: RET
// export level_bw_e ; export schol_find_amikama ; export levely_amici ; export posily1 ; export posily11 ; export posily2 ; export posily3 ; export posily4 ; export utok_na_omikron ; export levely_ruske_posily ; export levely_am_budov ; export muze_projit_posil ; export muze_prezit_posil ; export BELKOV_SAVED ; export STAV_UTOKU ; export function set_difficulty ; begin
4327: LD_INT 0
4329: PPUSH
// BELKOV_SAVED = LoadVariable ( belkov_saved , 0 ) ;
4330: LD_ADDR_EXP 24
4334: PUSH
4335: LD_STRING belkov_saved
4337: PPUSH
4338: LD_INT 0
4340: PPUSH
4341: CALL_OW 30
4345: ST_TO_ADDR
// STAV_UTOKU = LoadVariable ( utok_stav , 3 ) ;
4346: LD_ADDR_EXP 25
4350: PUSH
4351: LD_STRING utok_stav
4353: PPUSH
4354: LD_INT 3
4356: PPUSH
4357: CALL_OW 30
4361: ST_TO_ADDR
// level_bw_e = [ 2 , 3 , 4 ] ;
4362: LD_ADDR_EXP 11
4366: PUSH
4367: LD_INT 2
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: ST_TO_ADDR
// schol_find_amikama = [ 11 11$0 , 9 9$0 , 7 7$0 ] ;
4381: LD_ADDR_EXP 12
4385: PUSH
4386: LD_INT 23100
4388: PUSH
4389: LD_INT 18900
4391: PUSH
4392: LD_INT 14700
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: ST_TO_ADDR
// levely_amici = [ 2 , 3 , 4 ] ;
4400: LD_ADDR_EXP 13
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: LD_INT 4
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: ST_TO_ADDR
// posily1 = [ 13 13$00 , 11 11$00 , 10 10$00 ] ;
4419: LD_ADDR_EXP 14
4423: PUSH
4424: LD_INT 27300
4426: PUSH
4427: LD_INT 23100
4429: PUSH
4430: LD_INT 21000
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// posily11 = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
4438: LD_ADDR_EXP 15
4442: PUSH
4443: LD_INT 10500
4445: PUSH
4446: LD_INT 8400
4448: PUSH
4449: LD_INT 6300
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: ST_TO_ADDR
// posily2 = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
4457: LD_ADDR_EXP 16
4461: PUSH
4462: LD_INT 21000
4464: PUSH
4465: LD_INT 16800
4467: PUSH
4468: LD_INT 10500
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: ST_TO_ADDR
// posily3 = [ 11 11$0 , 8 8$30 , 5 5$0 ] ;
4476: LD_ADDR_EXP 17
4480: PUSH
4481: LD_INT 23100
4483: PUSH
4484: LD_INT 17850
4486: PUSH
4487: LD_INT 10500
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// posily4 = [ 8 8$0 , 7 7$0 , 5 5$0 ] ;
4495: LD_ADDR_EXP 18
4499: PUSH
4500: LD_INT 16800
4502: PUSH
4503: LD_INT 14700
4505: PUSH
4506: LD_INT 10500
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: ST_TO_ADDR
// utok_na_omikron = [ 55 55$0 , 45 45$0 , 35 35$0 ] [ difficulty ] ;
4514: LD_ADDR_EXP 19
4518: PUSH
4519: LD_INT 115500
4521: PUSH
4522: LD_INT 94500
4524: PUSH
4525: LD_INT 73500
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: PUSH
4533: LD_OWVAR 67
4537: ARRAY
4538: ST_TO_ADDR
// levely_ruske_posily = [ 4 , 3 , 2 ] ;
4539: LD_ADDR_EXP 20
4543: PUSH
4544: LD_INT 4
4546: PUSH
4547: LD_INT 3
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
// levely_am_budov = [ 0 , 1 , 2 ] ;
4558: LD_ADDR_EXP 21
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// muze_projit_posil = [ 8 , 8 , 6 ] ;
4577: LD_ADDR_EXP 22
4581: PUSH
4582: LD_INT 8
4584: PUSH
4585: LD_INT 8
4587: PUSH
4588: LD_INT 6
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: ST_TO_ADDR
// muze_prezit_posil = [ 2 , 5 , 100 ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_INT 2
4603: PUSH
4604: LD_INT 5
4606: PUSH
4607: LD_INT 100
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
4615: LD_ADDR_EXP 26
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_STRING :
4625: PUSH
4626: LD_INT 0
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// end ;
4634: LD_VAR 0 1
4638: RET
// export cas ; every 0 0$10 do var pom ;
4639: GO 4641
4641: DISABLE
4642: LD_INT 0
4644: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
4645: LD_EXP 26
4649: PUSH
4650: LD_INT 3
4652: ARRAY
4653: PUSH
4654: LD_INT 10
4656: PLUS
4657: PUSH
4658: LD_INT 60
4660: EQUAL
4661: IFFALSE 4697
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
4663: LD_ADDR_EXP 26
4667: PUSH
4668: LD_EXP 26
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PUSH
4677: LD_INT 1
4679: PLUS
4680: PUSH
4681: LD_EXP 26
4685: PUSH
4686: LD_INT 2
4688: ARRAY
4689: ADD
4690: PUSH
4691: LD_INT 0
4693: ADD
4694: ST_TO_ADDR
4695: GO 4735
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
4697: LD_ADDR_EXP 26
4701: PUSH
4702: LD_EXP 26
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PUSH
4711: LD_EXP 26
4715: PUSH
4716: LD_INT 2
4718: ARRAY
4719: ADD
4720: PUSH
4721: LD_EXP 26
4725: PUSH
4726: LD_INT 3
4728: ARRAY
4729: PUSH
4730: LD_INT 10
4732: PLUS
4733: ADD
4734: ST_TO_ADDR
// debug_strings = [ cas ] ;
4735: LD_ADDR_OWVAR 48
4739: PUSH
4740: LD_EXP 26
4744: PUSH
4745: EMPTY
4746: LIST
4747: ST_TO_ADDR
// enable ;
4748: ENABLE
// end ;
4749: PPOPN 1
4751: END
// export function pojmenovani_zakladen ; var pom ; begin
4752: LD_INT 0
4754: PPUSH
4755: PPUSH
// SetBName ( RU1_dep , kirov ) ;
4756: LD_INT 1
4758: PPUSH
4759: LD_STRING kirov
4761: PPUSH
4762: CALL_OW 500
// pom = FilterUnitsInArea ( Ru2_base , [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
4766: LD_ADDR_VAR 0 2
4770: PUSH
4771: LD_INT 2
4773: PPUSH
4774: LD_INT 22
4776: PUSH
4777: LD_EXP 1
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: LD_INT 0
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 70
4804: ST_TO_ADDR
// if pom > 0 then
4805: LD_VAR 0 2
4809: PUSH
4810: LD_INT 0
4812: GREATER
4813: IFFALSE 4831
// SetBName ( pom [ 1 ] , beria ) ;
4815: LD_VAR 0 2
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: PPUSH
4824: LD_STRING beria
4826: PPUSH
4827: CALL_OW 500
// SetBName ( Am_dep , omikron ) ;
4831: LD_INT 12
4833: PPUSH
4834: LD_STRING omikron
4836: PPUSH
4837: CALL_OW 500
// end ;
4841: LD_VAR 0 1
4845: RET
// export function pojmenovani_kaganoviche ( base ) ; begin
4846: LD_INT 0
4848: PPUSH
// SetBName ( base , kagan ) ;
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_STRING kagan
4856: PPUSH
4857: CALL_OW 500
// end ; end_of_file
4861: LD_VAR 0 2
4865: RET
// export kur ; export pop ; export bur ; export kov ; export gny ; export bel ; export schol ; export schol2 ; export grishko ; export Rusi_enter ; export scholtze_saved ; export stav_aut ; export stav_omikron ; export RU_videl_oil ; var counter_zapnut ; export setkani_om ; var R_comp ; export Rusi_utekli ; export Rusi_save ; var dialog_probehnul ; var qrefuel_over ; export kecy_scholtze_nalezen ; export konec_counteru ; export stav_aut_new ; export postavenych_aut ; var TTime ; export special_time ; every 0 0$0.1 do var i ;
4866: GO 4868
4868: DISABLE
4869: LD_INT 0
4871: PPUSH
// begin schol = 0 ;
4872: LD_ADDR_EXP 33
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// scholtze_saved = false ;
4880: LD_ADDR_EXP 37
4884: PUSH
4885: LD_INT 0
4887: ST_TO_ADDR
// stav_omikron = 0 ;
4888: LD_ADDR_EXP 39
4892: PUSH
4893: LD_INT 0
4895: ST_TO_ADDR
// stav_aut = 0 ;
4896: LD_ADDR_EXP 38
4900: PUSH
4901: LD_INT 0
4903: ST_TO_ADDR
// RU_videl_oil = false ;
4904: LD_ADDR_EXP 40
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// counter_zapnut = false ;
4912: LD_ADDR_LOC 17
4916: PUSH
4917: LD_INT 0
4919: ST_TO_ADDR
// setkani_om = false ;
4920: LD_ADDR_EXP 41
4924: PUSH
4925: LD_INT 0
4927: ST_TO_ADDR
// R_comp = [ ] ;
4928: LD_ADDR_LOC 18
4932: PUSH
4933: EMPTY
4934: ST_TO_ADDR
// Rusi_utekli = [ ] ;
4935: LD_ADDR_EXP 42
4939: PUSH
4940: EMPTY
4941: ST_TO_ADDR
// Rusi_save = [ ] ;
4942: LD_ADDR_EXP 43
4946: PUSH
4947: EMPTY
4948: ST_TO_ADDR
// dialog_probehnul = false ;
4949: LD_ADDR_LOC 19
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// qrefuel_over = false ;
4957: LD_ADDR_LOC 20
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// kecy_scholtze_nalezen = false ;
4965: LD_ADDR_EXP 44
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// postavenych_aut = 0 ;
4973: LD_ADDR_EXP 47
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// TTime = 0 ;
4981: LD_ADDR_LOC 21
4985: PUSH
4986: LD_INT 0
4988: ST_TO_ADDR
// konec_counteru = false ;
4989: LD_ADDR_EXP 45
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// stav_aut_new = 0 ;
4997: LD_ADDR_EXP 46
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
// special_time = false ;
5005: LD_ADDR_EXP 48
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 6 , 7 , 8 , 9 , 10 , 51 , 52 , 53 , 200 , 201 , 202 , 203 ] do
5013: LD_ADDR_VAR 0 1
5017: PUSH
5018: LD_INT 1
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: LD_INT 6
5029: PUSH
5030: LD_INT 7
5032: PUSH
5033: LD_INT 8
5035: PUSH
5036: LD_INT 9
5038: PUSH
5039: LD_INT 10
5041: PUSH
5042: LD_INT 51
5044: PUSH
5045: LD_INT 52
5047: PUSH
5048: LD_INT 53
5050: PUSH
5051: LD_INT 200
5053: PUSH
5054: LD_INT 201
5056: PUSH
5057: LD_INT 202
5059: PUSH
5060: LD_INT 203
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5090
// disable ( i ) ;
5083: LD_VAR 0 1
5087: DISABLE_MARKED
5088: GO 5080
5090: POP
5091: POP
// end ;
5092: PPOPN 1
5094: END
// export function uklid_rusu ; begin
5095: LD_INT 0
5097: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
5098: LD_INT 42
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
5108: LD_INT 43
5110: PPUSH
5111: LD_INT 4
5113: PPUSH
5114: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab2 ) ;
5118: LD_INT 44
5120: PPUSH
5121: LD_INT 16
5123: PPUSH
5124: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab2 ) ;
5128: LD_INT 45
5130: PPUSH
5131: LD_INT 16
5133: PPUSH
5134: CALL_OW 120
// ComEnterUnit ( RU1_sci3 , RU1_lab2 ) ;
5138: LD_INT 46
5140: PPUSH
5141: LD_INT 16
5143: PPUSH
5144: CALL_OW 120
// ComEnterUnit ( RU1_sci4 , RU1_lab1 ) ;
5148: LD_INT 47
5150: PPUSH
5151: LD_INT 6
5153: PPUSH
5154: CALL_OW 120
// ComEnterUnit ( RU1_sci5 , RU1_lab1 ) ;
5158: LD_INT 48
5160: PPUSH
5161: LD_INT 6
5163: PPUSH
5164: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_fac ) ;
5168: LD_INT 49
5170: PPUSH
5171: LD_INT 5
5173: PPUSH
5174: CALL_OW 120
// ComEnterUnit ( RU1_me2 , RU1_fac ) ;
5178: LD_INT 50
5180: PPUSH
5181: LD_INT 5
5183: PPUSH
5184: CALL_OW 120
// ComEnterUnit ( RU1_me3 , RU1_fac ) ;
5188: LD_INT 51
5190: PPUSH
5191: LD_INT 5
5193: PPUSH
5194: CALL_OW 120
// ComEnterUnit ( pop , RU1_bar1 ) ;
5198: LD_EXP 28
5202: PPUSH
5203: LD_INT 2
5205: PPUSH
5206: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar1 ) ;
5210: LD_INT 52
5212: PPUSH
5213: LD_INT 2
5215: PPUSH
5216: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar1 ) ;
5220: LD_INT 53
5222: PPUSH
5223: LD_INT 2
5225: PPUSH
5226: CALL_OW 120
// ComEnterUnit ( RU1_sol3 , RU1_bar2 ) ;
5230: LD_INT 56
5232: PPUSH
5233: LD_INT 17
5235: PPUSH
5236: CALL_OW 120
// ComEnterUnit ( RU1_sol4 , RU1_bar2 ) ;
5240: LD_INT 54
5242: PPUSH
5243: LD_INT 17
5245: PPUSH
5246: CALL_OW 120
// ComEnterUnit ( RU1_sol5 , RU1_bar2 ) ;
5250: LD_INT 55
5252: PPUSH
5253: LD_INT 17
5255: PPUSH
5256: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
5260: LD_INT 57
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL_OW 120
// end ;
5270: LD_VAR 0 1
5274: RET
// every 5 5$30 do var pom ;
5275: GO 5277
5277: DISABLE
5278: LD_INT 0
5280: PPUSH
// begin schol2 = create_scholtze ;
5281: LD_ADDR_EXP 34
5285: PUSH
5286: CALL 2423 0 0
5290: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5291: LD_INT 70
5293: PPUSH
5294: CALL_OW 67
// CenterNowOnUnits ( schol2 ) ;
5298: LD_EXP 34
5302: PPUSH
5303: CALL_OW 87
// dialog_scholtze_enter ;
5307: CALL 11640 0 0
// ComMoveToArea ( schol2 , scholze_flee ) ;
5311: LD_EXP 34
5315: PPUSH
5316: LD_INT 45
5318: PPUSH
5319: CALL_OW 113
// AddComHold ( schol2 ) ;
5323: LD_EXP 34
5327: PPUSH
5328: CALL_OW 200
// wait ( 0 0$5 ) ;
5332: LD_INT 175
5334: PPUSH
5335: CALL_OW 67
// amici_hlidka ;
5339: CALL 23766 0 0
// enable ( 1 ) ;
5343: LD_INT 1
5345: ENABLE_MARKED
// end ;
5346: PPOPN 1
5348: END
// every 0 0$1 trigger FilterUnitsInArea ( Schol_les , [ [ f_side , You ] ] ) > 0 marked 1 do
5349: LD_INT 26
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_EXP 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: EMPTY
5365: LIST
5366: PPUSH
5367: CALL_OW 70
5371: PUSH
5372: LD_INT 0
5374: GREATER
5375: IFFALSE 5449
5377: GO 5379
5379: DISABLE
// begin kecy_scholtze_nalezen = true ;
5380: LD_ADDR_EXP 44
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// dialog_scholtze_nalezen ;
5388: CALL 11712 0 0
// SetSide ( schol2 , You ) ;
5392: LD_EXP 34
5396: PPUSH
5397: LD_EXP 1
5401: PPUSH
5402: CALL_OW 235
// schol = schol2 ;
5406: LD_ADDR_EXP 33
5410: PUSH
5411: LD_EXP 34
5415: ST_TO_ADDR
// ChangeMissionObjectives ( MScholtzeOut ) ;
5416: LD_STRING MScholtzeOut
5418: PPUSH
5419: CALL_OW 337
// wait ( 1 1$0 ) ;
5423: LD_INT 2100
5425: PPUSH
5426: CALL_OW 67
// if IsLive ( schol ) then
5430: LD_EXP 33
5434: PPUSH
5435: CALL_OW 300
5439: IFFALSE 5449
// scholtze_saved = true ;
5441: LD_ADDR_EXP 37
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// end ;
5449: END
// every 1 1$0 do
5450: GO 5452
5452: DISABLE
// begin if GetResourceType ( GetBase ( RU1_dep ) , mat_oil ) < 50 then
5453: LD_INT 1
5455: PPUSH
5456: CALL_OW 274
5460: PPUSH
5461: LD_INT 2
5463: PPUSH
5464: CALL_OW 275
5468: PUSH
5469: LD_INT 50
5471: LESS
5472: IFFALSE 5492
// AddResourceType ( GetBase ( RU1_dep ) , mat_oil , 100 ) ;
5474: LD_INT 1
5476: PPUSH
5477: CALL_OW 274
5481: PPUSH
5482: LD_INT 2
5484: PPUSH
5485: LD_INT 100
5487: PPUSH
5488: CALL_OW 276
// enable ;
5492: ENABLE
// end ;
5493: END
// every 1 1$7 do
5494: GO 5496
5496: DISABLE
// begin if Researched ( You2 , tech_Weap1 ) then
5497: LD_EXP 2
5501: PPUSH
5502: LD_INT 51
5504: PPUSH
5505: CALL_OW 325
5509: IFFALSE 5536
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5511: LD_INT 51
5513: PPUSH
5514: LD_EXP 2
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5526: LD_INT 6
5528: PPUSH
5529: LD_INT 51
5531: PPUSH
5532: CALL_OW 124
// end ; enable ;
5536: ENABLE
// end ;
5537: END
// every 0 0$19 do
5538: GO 5540
5540: DISABLE
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5541: LD_INT 51
5543: PPUSH
5544: LD_EXP 2
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5556: LD_INT 6
5558: PPUSH
5559: LD_INT 51
5561: PPUSH
5562: CALL_OW 124
// end ;
5566: END
// every 0 0$5 trigger stav_omikron = 2 do
5567: LD_EXP 39
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: IFFALSE 5618
5577: GO 5579
5579: DISABLE
// begin TTime = 7 7$0 ;
5580: LD_ADDR_LOC 21
5584: PUSH
5585: LD_INT 14700
5587: ST_TO_ADDR
// enable ( 53 ) ;
5588: LD_INT 53
5590: ENABLE_MARKED
// wait ( 7 7$0 ) ;
5591: LD_INT 14700
5593: PPUSH
5594: CALL_OW 67
// special_time = true ;
5598: LD_ADDR_EXP 48
5602: PUSH
5603: LD_INT 1
5605: ST_TO_ADDR
// hlaska_omicron ;
5606: CALL 13309 0 0
// stav_omikron = 3 ;
5610: LD_ADDR_EXP 39
5614: PUSH
5615: LD_INT 3
5617: ST_TO_ADDR
// end ;
5618: END
// export function popov_ven ; var i ; begin
5619: LD_INT 0
5621: PPUSH
5622: PPUSH
// for i = 1 to 8 do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_INT 8
5635: PUSH
5636: FOR_TO
5637: IFFALSE 5655
// DoNotAttack ( i , pop ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: LD_EXP 28
5648: PPUSH
5649: CALL_OW 471
5653: GO 5636
5655: POP
5656: POP
// while IsInUnit ( pop ) > 0 do
5657: LD_EXP 28
5661: PPUSH
5662: CALL_OW 310
5666: PUSH
5667: LD_INT 0
5669: GREATER
5670: IFFALSE 5737
// begin case GetType ( IsInUnit ( pop ) ) of unit_building :
5672: LD_EXP 28
5676: PPUSH
5677: CALL_OW 310
5681: PPUSH
5682: CALL_OW 247
5686: PUSH
5687: LD_INT 3
5689: DOUBLE
5690: EQUAL
5691: IFTRUE 5695
5693: GO 5707
5695: POP
// ComExitBuilding ( pop ) ; unit_vehicle :
5696: LD_EXP 28
5700: PPUSH
5701: CALL_OW 122
5705: GO 5728
5707: LD_INT 2
5709: DOUBLE
5710: EQUAL
5711: IFTRUE 5715
5713: GO 5727
5715: POP
// ComExitVehicle ( pop ) ; end ;
5716: LD_EXP 28
5720: PPUSH
5721: CALL_OW 121
5725: GO 5728
5727: POP
// wait ( 0 0$0.5 ) ;
5728: LD_INT 18
5730: PPUSH
5731: CALL_OW 67
// end ;
5735: GO 5657
// AddComMoveToArea ( pop , bst_2 ) ;
5737: LD_EXP 28
5741: PPUSH
5742: LD_INT 41
5744: PPUSH
5745: CALL_OW 173
// AddComMoveToArea ( pop , bst_3 ) ;
5749: LD_EXP 28
5753: PPUSH
5754: LD_INT 42
5756: PPUSH
5757: CALL_OW 173
// AddComHold ( pop ) ;
5761: LD_EXP 28
5765: PPUSH
5766: CALL_OW 200
// end ;
5770: LD_VAR 0 1
5774: RET
// every 0 0$5 trigger IsInArea ( pop , Exit_area ) do
5775: LD_EXP 28
5779: PPUSH
5780: LD_INT 16
5782: PPUSH
5783: CALL_OW 308
5787: IFFALSE 5801
5789: GO 5791
5791: DISABLE
// begin RemoveUnit ( pop ) ;
5792: LD_EXP 28
5796: PPUSH
5797: CALL_OW 64
// end ;
5801: END
// export function prebarveni_druhe_baze ; var pom , i ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You3 ] , [ f_type , unit_building ] ] ) ;
5807: LD_ADDR_VAR 0 2
5811: PUSH
5812: LD_INT 2
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_EXP 3
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 21
5829: PUSH
5830: LD_INT 3
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PPUSH
5841: CALL_OW 70
5845: ST_TO_ADDR
// for i in pom do
5846: LD_ADDR_VAR 0 3
5850: PUSH
5851: LD_VAR 0 2
5855: PUSH
5856: FOR_IN
5857: IFFALSE 5875
// SetSide ( i , You ) ;
5859: LD_VAR 0 3
5863: PPUSH
5864: LD_EXP 1
5868: PPUSH
5869: CALL_OW 235
5873: GO 5856
5875: POP
5876: POP
// end ;
5877: LD_VAR 0 1
5881: RET
// export function pomoc_pro_omikroni_utok ; var i ; begin
5882: LD_INT 0
5884: PPUSH
5885: PPUSH
// for i in RUSKE_POSILY_NA_OMICRON_LIST do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_EXP 56
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5916
// PlaceUnitArea ( i , Enterposil , false ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 49
5906: PPUSH
5907: LD_INT 0
5909: PPUSH
5910: CALL_OW 49
5914: GO 5896
5916: POP
5917: POP
// ComMoveToArea ( RUSKE_POSILY_NA_OMICRON_LIST , bst_4 ) ;
5918: LD_EXP 56
5922: PPUSH
5923: LD_INT 43
5925: PPUSH
5926: CALL_OW 113
// for i in RUSKE_POSILY_RIDICI_LIST do
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: LD_EXP 57
5939: PUSH
5940: FOR_IN
5941: IFFALSE 5960
// PlaceUnitArea ( i , Arabi1 , false ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 12
5950: PPUSH
5951: LD_INT 0
5953: PPUSH
5954: CALL_OW 49
5958: GO 5940
5960: POP
5961: POP
// ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , bst_1 ) ;
5962: LD_EXP 57
5966: PPUSH
5967: LD_INT 40
5969: PPUSH
5970: CALL_OW 113
// AddComEnterUnit ( RUSKE_POSILY_RIDICI_LIST , RU1_fac ) ;
5974: LD_EXP 57
5978: PPUSH
5979: LD_INT 5
5981: PPUSH
5982: CALL_OW 180
// end ;
5986: LD_VAR 0 1
5990: RET
// every 0 0$1 trigger stav_omikron = 3 and not special_time do
5991: LD_EXP 39
5995: PUSH
5996: LD_INT 3
5998: EQUAL
5999: PUSH
6000: LD_EXP 48
6004: NOT
6005: AND
6006: IFFALSE 6040
6008: GO 6010
6010: DISABLE
// begin disable ( 53 ) ;
6011: LD_INT 53
6013: DISABLE_MARKED
// TTime = 3 3$0 ;
6014: LD_ADDR_LOC 21
6018: PUSH
6019: LD_INT 6300
6021: ST_TO_ADDR
// enable ( 51 ) ;
6022: LD_INT 51
6024: ENABLE_MARKED
// counter_zapnut = true ;
6025: LD_ADDR_LOC 17
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// posli_ruske_posily ;
6033: CALL 6543 0 0
// enable ( 3 ) ;
6037: LD_INT 3
6039: ENABLE_MARKED
// end ;
6040: END
// every 0 0$1 trigger stav_omikron = 3 and special_time do
6041: LD_EXP 39
6045: PUSH
6046: LD_INT 3
6048: EQUAL
6049: PUSH
6050: LD_EXP 48
6054: AND
6055: IFFALSE 6089
6057: GO 6059
6059: DISABLE
// begin disable ( 53 ) ;
6060: LD_INT 53
6062: DISABLE_MARKED
// TTime = 2 2$0 ;
6063: LD_ADDR_LOC 21
6067: PUSH
6068: LD_INT 4200
6070: ST_TO_ADDR
// enable ( 51 ) ;
6071: LD_INT 51
6073: ENABLE_MARKED
// counter_zapnut = true ;
6074: LD_ADDR_LOC 17
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// posli_ruske_posily ;
6082: CALL 6543 0 0
// enable ( 3 ) ;
6086: LD_INT 3
6088: ENABLE_MARKED
// end ;
6089: END
// every 0 0$3 trigger stav_omikron = 3 do var i , pom , pom1 , pom2 , rpom ; var rusi_enter_new ; var poc ;
6090: LD_EXP 39
6094: PUSH
6095: LD_INT 3
6097: EQUAL
6098: IFFALSE 6295
6100: GO 6102
6102: DISABLE
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
6107: PPUSH
6108: PPUSH
6109: PPUSH
6110: PPUSH
6111: PPUSH
// begin if FilterUnitsInArea ( Om_zone , [ [ f_side , You ] ] ) then
6112: LD_INT 8
6114: PPUSH
6115: LD_INT 22
6117: PUSH
6118: LD_EXP 1
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: IFFALSE 6294
// begin rpom = FilterUnitsExceptArea ( Om_pom1 , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
6136: LD_ADDR_VAR 0 5
6140: PUSH
6141: LD_INT 23
6143: PPUSH
6144: LD_INT 22
6146: PUSH
6147: LD_EXP 1
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 1
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PPUSH
6170: CALL_OW 71
6174: ST_TO_ADDR
// if rpom = 0 then
6175: LD_VAR 0 5
6179: PUSH
6180: LD_INT 0
6182: EQUAL
6183: IFFALSE 6291
// begin disable ( 51 ) ;
6185: LD_INT 51
6187: DISABLE_MARKED
// disable ( 52 ) ;
6188: LD_INT 52
6190: DISABLE_MARKED
// konec_counteru = true ;
6191: LD_ADDR_EXP 45
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// poc = 0 ;
6199: LD_ADDR_VAR 0 7
6203: PUSH
6204: LD_INT 0
6206: ST_TO_ADDR
// while FilterUnitsInArea ( Om_zone , [ [ f_side , You2 ] ] ) = 0 and poc < 60 do
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 22
6212: PUSH
6213: LD_EXP 2
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: EMPTY
6223: LIST
6224: PPUSH
6225: CALL_OW 70
6229: PUSH
6230: LD_INT 0
6232: EQUAL
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: LD_INT 60
6241: LESS
6242: AND
6243: IFFALSE 6268
// begin wait ( 0 0$1 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// poc = poc + 1 ;
6252: LD_ADDR_VAR 0 7
6256: PUSH
6257: LD_VAR 0 7
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6207
// stav_omikron = 4 ;
6268: LD_ADDR_EXP 39
6272: PUSH
6273: LD_INT 4
6275: ST_TO_ADDR
// dialog_pred_omicronem ;
6276: CALL 13392 0 0
// enable ( 9 ) ;
6280: LD_INT 9
6282: ENABLE_MARKED
// disable ( 3 ) ;
6283: LD_INT 3
6285: DISABLE_MARKED
// enable ( 10 ) ;
6286: LD_INT 10
6288: ENABLE_MARKED
// end else
6289: GO 6292
// enable ;
6291: ENABLE
// end else
6292: GO 6295
// enable ;
6294: ENABLE
// end ;
6295: PPOPN 7
6297: END
// export function CheckVehicles ; var pom , pom1 , pom2 ; begin
6298: LD_INT 0
6300: PPUSH
6301: PPUSH
6302: PPUSH
6303: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_INT 22
6311: PUSH
6312: LD_EXP 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 21
6323: PUSH
6324: LD_INT 2
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PPUSH
6335: CALL_OW 69
6339: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_INT 22
6347: PUSH
6348: LD_EXP 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 21
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 51
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 69
6382: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Ru2_base , [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
6383: LD_ADDR_VAR 0 4
6387: PUSH
6388: LD_INT 2
6390: PPUSH
6391: LD_INT 22
6393: PUSH
6394: LD_EXP 2
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 21
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PPUSH
6417: CALL_OW 70
6421: ST_TO_ADDR
// pom = pom + pom2 ;
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: LD_VAR 0 2
6431: PUSH
6432: LD_VAR 0 4
6436: PLUS
6437: ST_TO_ADDR
// if pom < pom1 then
6438: LD_VAR 0 2
6442: PUSH
6443: LD_VAR 0 3
6447: LESS
6448: IFFALSE 6458
// stav_aut_new = 3 ;
6450: LD_ADDR_EXP 46
6454: PUSH
6455: LD_INT 3
6457: ST_TO_ADDR
// if pom = pom1 then
6458: LD_VAR 0 2
6462: PUSH
6463: LD_VAR 0 3
6467: EQUAL
6468: IFFALSE 6478
// stav_aut_new = 2 ;
6470: LD_ADDR_EXP 46
6474: PUSH
6475: LD_INT 2
6477: ST_TO_ADDR
// if pom > pom1 and KurinAddTime = 0 then
6478: LD_VAR 0 2
6482: PUSH
6483: LD_VAR 0 3
6487: GREATER
6488: PUSH
6489: LD_EXP 7
6493: PUSH
6494: LD_INT 0
6496: EQUAL
6497: AND
6498: IFFALSE 6508
// stav_aut_new = 1 ;
6500: LD_ADDR_EXP 46
6504: PUSH
6505: LD_INT 1
6507: ST_TO_ADDR
// if pom >= pom1 and KurinAddTime = 1 then
6508: LD_VAR 0 2
6512: PUSH
6513: LD_VAR 0 3
6517: GREATEREQUAL
6518: PUSH
6519: LD_EXP 7
6523: PUSH
6524: LD_INT 1
6526: EQUAL
6527: AND
6528: IFFALSE 6538
// stav_aut_new = 2 ;
6530: LD_ADDR_EXP 46
6534: PUSH
6535: LD_INT 2
6537: ST_TO_ADDR
// end ;
6538: LD_VAR 0 1
6542: RET
// function posli_ruske_posily ; begin
6543: LD_INT 0
6545: PPUSH
// McMove ( 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , [ [ 109 , 54 ] , [ 102 , 38 ] , [ 90 , 22 ] , [ 54 , 10 ] ] , [ mc_move_dontcapture ] ) ;
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 22
6551: PUSH
6552: LD_INT 6
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PPUSH
6573: CALL_OW 69
6577: PPUSH
6578: LD_INT 109
6580: PUSH
6581: LD_INT 54
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 102
6590: PUSH
6591: LD_INT 38
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 90
6600: PUSH
6601: LD_INT 22
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 54
6610: PUSH
6611: LD_INT 10
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PPUSH
6624: LD_INT 5
6626: PUSH
6627: EMPTY
6628: LIST
6629: PPUSH
6630: CALL_OW 398
// end ;
6634: LD_VAR 0 1
6638: RET
// every 0 0$7 marked 2 do var i , k , pom ;
6639: GO 6641
6641: DISABLE
6642: LD_INT 0
6644: PPUSH
6645: PPUSH
6646: PPUSH
// begin ComExitBuilding ( RUSKE_POSILY_RIDICI_LIST ) ;
6647: LD_EXP 57
6651: PPUSH
6652: CALL_OW 122
// while FilterUnitsInArea ( RU2_base , [ [ f_side , You2 ] ] ) < RUSKE_POSILY_RIDICI_LIST do
6656: LD_INT 2
6658: PPUSH
6659: LD_INT 22
6661: PUSH
6662: LD_EXP 2
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: PPUSH
6674: CALL_OW 70
6678: PUSH
6679: LD_EXP 57
6683: LESS
6684: IFFALSE 6707
// begin ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , drivers_enter ) ;
6686: LD_EXP 57
6690: PPUSH
6691: LD_INT 47
6693: PPUSH
6694: CALL_OW 113
// wait ( 0 0$1 ) ;
6698: LD_INT 35
6700: PPUSH
6701: CALL_OW 67
// end ;
6705: GO 6656
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_not , [ f_occupied ] ] ] ) ;
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: LD_INT 2
6714: PPUSH
6715: LD_INT 22
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 2
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 59
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: PPUSH
6755: CALL_OW 70
6759: ST_TO_ADDR
// if not pom then
6760: LD_VAR 0 3
6764: NOT
6765: IFFALSE 6771
// konec_mise_lhani ;
6767: CALL 1440 0 0
// if pom < RUSKE_POSILY_RIDICI_LIST then
6771: LD_VAR 0 3
6775: PUSH
6776: LD_EXP 57
6780: LESS
6781: IFFALSE 6795
// k := pom else
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_VAR 0 3
6792: ST_TO_ADDR
6793: GO 6805
// k := RUSKE_POSILY_RIDICI_LIST ;
6795: LD_ADDR_VAR 0 2
6799: PUSH
6800: LD_EXP 57
6804: ST_TO_ADDR
// for i = 1 to k do
6805: LD_ADDR_VAR 0 1
6809: PUSH
6810: DOUBLE
6811: LD_INT 1
6813: DEC
6814: ST_TO_ADDR
6815: LD_VAR 0 2
6819: PUSH
6820: FOR_TO
6821: IFFALSE 6872
// begin ComEnterUnit ( RUSKE_POSILY_RIDICI_LIST [ i ] , pom [ i ] ) ;
6823: LD_EXP 57
6827: PUSH
6828: LD_VAR 0 1
6832: ARRAY
6833: PPUSH
6834: LD_VAR 0 3
6838: PUSH
6839: LD_VAR 0 1
6843: ARRAY
6844: PPUSH
6845: CALL_OW 120
// AddComMoveXY ( RUSKE_POSILY_RIDICI_LIST [ i ] , 60 , 13 ) ;
6849: LD_EXP 57
6853: PUSH
6854: LD_VAR 0 1
6858: ARRAY
6859: PPUSH
6860: LD_INT 60
6862: PPUSH
6863: LD_INT 13
6865: PPUSH
6866: CALL_OW 171
// end ;
6870: GO 6820
6872: POP
6873: POP
// end ;
6874: PPOPN 3
6876: END
// every 0 0$1 marked 3 do
6877: GO 6879
6879: DISABLE
// begin if special_time then
6880: LD_EXP 48
6884: IFFALSE 6895
// wait ( 2 2$0 ) else
6886: LD_INT 4200
6888: PPUSH
6889: CALL_OW 67
6893: GO 6902
// wait ( 3 3$0 ) ;
6895: LD_INT 6300
6897: PPUSH
6898: CALL_OW 67
// if not setkani_om then
6902: LD_EXP 41
6906: NOT
6907: IFFALSE 6945
// begin dialog_upoz ;
6909: CALL 15637 0 0
// TTime = 2 2$0 ;
6913: LD_ADDR_LOC 21
6917: PUSH
6918: LD_INT 4200
6920: ST_TO_ADDR
// disable ( 51 ) ;
6921: LD_INT 51
6923: DISABLE_MARKED
// enable ( 52 ) ;
6924: LD_INT 52
6926: ENABLE_MARKED
// wait ( 2 2$0 ) ;
6927: LD_INT 4200
6929: PPUSH
6930: CALL_OW 67
// if not setkani_om then
6934: LD_EXP 41
6938: NOT
6939: IFFALSE 6945
// konec_pred_omikronem ;
6941: CALL 1459 0 0
// end ; end ;
6945: END
// every 0 0$1 marked 4 do var pom ;
6946: GO 6948
6948: DISABLE
6949: LD_INT 0
6951: PPUSH
// begin wait ( utok_na_omikron - 5 5$0 ) ;
6952: LD_EXP 19
6956: PUSH
6957: LD_INT 10500
6959: MINUS
6960: PPUSH
6961: CALL_OW 67
// pomoc_pro_omikroni_utok ;
6965: CALL 5882 0 0
// wait ( 5 5$0 ) ;
6969: LD_INT 10500
6971: PPUSH
6972: CALL_OW 67
// disable ( 5 ) ;
6976: LD_INT 5
6978: DISABLE_MARKED
// if dialog_probehnul then
6979: LD_LOC 19
6983: IFFALSE 6989
// exit else
6985: GO 7097
6987: GO 6997
// dialog_probehnul := true ;
6989: LD_ADDR_LOC 19
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// pom = dialog_otazka_poctu_aut ;
6997: LD_ADDR_VAR 0 1
7001: PUSH
7002: CALL 13098 0 0
7006: ST_TO_ADDR
// case pom of 1 :
7007: LD_VAR 0 1
7011: PUSH
7012: LD_INT 1
7014: DOUBLE
7015: EQUAL
7016: IFTRUE 7020
7018: GO 7042
7020: POP
// begin stav_omikron = 3 ;
7021: LD_ADDR_EXP 39
7025: PUSH
7026: LD_INT 3
7028: ST_TO_ADDR
// stav_aut = 1 ;
7029: LD_ADDR_EXP 38
7033: PUSH
7034: LD_INT 1
7036: ST_TO_ADDR
// enable ( 2 ) ;
7037: LD_INT 2
7039: ENABLE_MARKED
// end ; 2 :
7040: GO 7097
7042: LD_INT 2
7044: DOUBLE
7045: EQUAL
7046: IFTRUE 7050
7048: GO 7069
7050: POP
// begin stav_omikron = 3 ;
7051: LD_ADDR_EXP 39
7055: PUSH
7056: LD_INT 3
7058: ST_TO_ADDR
// stav_aut = 2 ;
7059: LD_ADDR_EXP 38
7063: PUSH
7064: LD_INT 2
7066: ST_TO_ADDR
// end ; 3 :
7067: GO 7097
7069: LD_INT 3
7071: DOUBLE
7072: EQUAL
7073: IFTRUE 7077
7075: GO 7096
7077: POP
// begin stav_omikron = 2 ;
7078: LD_ADDR_EXP 39
7082: PUSH
7083: LD_INT 2
7085: ST_TO_ADDR
// stav_aut = 3 ;
7086: LD_ADDR_EXP 38
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// end ; end ;
7094: GO 7097
7096: POP
// end ;
7097: PPOPN 1
7099: END
// every 0 0$17 trigger stav_omikron < 2 marked 5 do var un , veh ;
7100: LD_EXP 39
7104: PUSH
7105: LD_INT 2
7107: LESS
7108: IFFALSE 7340
7110: GO 7112
7112: DISABLE
7113: LD_INT 0
7115: PPUSH
7116: PPUSH
// begin un = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_EXP 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 1
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7153: LD_ADDR_VAR 0 2
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_EXP 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 21
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: ST_TO_ADDR
// if veh >= ( un + 2 ) then
7189: LD_VAR 0 2
7193: PUSH
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 2
7201: PLUS
7202: GREATEREQUAL
7203: IFFALSE 7339
// begin disable ( 4 ) ;
7205: LD_INT 4
7207: DISABLE_MARKED
// pomoc_pro_omikroni_utok ;
7208: CALL 5882 0 0
// if dialog_probehnul then
7212: LD_LOC 19
7216: IFFALSE 7222
// exit else
7218: GO 7340
7220: GO 7230
// dialog_probehnul = true ;
7222: LD_ADDR_LOC 19
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7230: LD_INT 350
7232: PPUSH
7233: CALL_OW 67
// un = dialog_otazka_poctu_aut ;
7237: LD_ADDR_VAR 0 1
7241: PUSH
7242: CALL 13098 0 0
7246: ST_TO_ADDR
// case un of 1 :
7247: LD_VAR 0 1
7251: PUSH
7252: LD_INT 1
7254: DOUBLE
7255: EQUAL
7256: IFTRUE 7260
7258: GO 7282
7260: POP
// begin stav_omikron = 3 ;
7261: LD_ADDR_EXP 39
7265: PUSH
7266: LD_INT 3
7268: ST_TO_ADDR
// stav_aut = 1 ;
7269: LD_ADDR_EXP 38
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// enable ( 2 ) ;
7277: LD_INT 2
7279: ENABLE_MARKED
// end ; 2 :
7280: GO 7337
7282: LD_INT 2
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7309
7290: POP
// begin stav_omikron = 3 ;
7291: LD_ADDR_EXP 39
7295: PUSH
7296: LD_INT 3
7298: ST_TO_ADDR
// stav_aut = 2 ;
7299: LD_ADDR_EXP 38
7303: PUSH
7304: LD_INT 2
7306: ST_TO_ADDR
// end ; 3 :
7307: GO 7337
7309: LD_INT 3
7311: DOUBLE
7312: EQUAL
7313: IFTRUE 7317
7315: GO 7336
7317: POP
// begin stav_omikron = 2 ;
7318: LD_ADDR_EXP 39
7322: PUSH
7323: LD_INT 2
7325: ST_TO_ADDR
// stav_aut = 3 ;
7326: LD_ADDR_EXP 38
7330: PUSH
7331: LD_INT 3
7333: ST_TO_ADDR
// end ; end ;
7334: GO 7337
7336: POP
// end else
7337: GO 7340
// enable ;
7339: ENABLE
// end ;
7340: PPOPN 2
7342: END
// export function manage_ruske_computery_zpet ; var pom ; begin
7343: LD_INT 0
7345: PPUSH
7346: PPUSH
// disable ( 200 ) ;
7347: LD_INT 200
7349: DISABLE_MARKED
// disable ( 201 ) ;
7350: LD_INT 201
7352: DISABLE_MARKED
// disable ( 202 ) ;
7353: LD_INT 202
7355: DISABLE_MARKED
// disable ( 203 ) ;
7356: LD_INT 203
7358: DISABLE_MARKED
// pom = FilterUnitsInArea ( Am_base , [ [ F_side , You2 ] ] ) ;
7359: LD_ADDR_VAR 0 2
7363: PUSH
7364: LD_INT 6
7366: PPUSH
7367: LD_INT 22
7369: PUSH
7370: LD_EXP 2
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 70
7386: ST_TO_ADDR
// McMove ( 2 , pom , [ [ 42 , 14 ] , [ 60 , 15 ] , [ 95 , 21 ] , [ 100 , 34 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7387: LD_INT 2
7389: PPUSH
7390: LD_VAR 0 2
7394: PPUSH
7395: LD_INT 42
7397: PUSH
7398: LD_INT 14
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 60
7407: PUSH
7408: LD_INT 15
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 95
7417: PUSH
7418: LD_INT 21
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 100
7427: PUSH
7428: LD_INT 34
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: PPUSH
7441: LD_INT 6
7443: PUSH
7444: LD_INT 1
7446: PUSH
7447: LD_INT 3
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 398
// enable ( 5 ) ;
7459: LD_INT 5
7461: ENABLE_MARKED
// R_comp = pom ;
7462: LD_ADDR_LOC 18
7466: PUSH
7467: LD_VAR 0 2
7471: ST_TO_ADDR
// end ;
7472: LD_VAR 0 1
7476: RET
// every 0 0$15 marked 5 do
7477: GO 7479
7479: DISABLE
// begin wait ( 1 1$0 ) ;
7480: LD_INT 2100
7482: PPUSH
7483: CALL_OW 67
// McMove ( 1 , R_comp , [ [ 110 , 59 ] , [ 129 , 75 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7487: LD_INT 1
7489: PPUSH
7490: LD_LOC 18
7494: PPUSH
7495: LD_INT 110
7497: PUSH
7498: LD_INT 59
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 129
7507: PUSH
7508: LD_INT 75
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PPUSH
7519: LD_INT 6
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: LD_INT 3
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 398
// end ;
7537: END
// function split_ruske_jednotky ( jedn ) ; var i , pom ; var p1 , p2 , p3 , p4 ; var a ; begin
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
// p1 = [ ] ;
7548: LD_ADDR_VAR 0 5
7552: PUSH
7553: EMPTY
7554: ST_TO_ADDR
// p2 = [ ] ;
7555: LD_ADDR_VAR 0 6
7559: PUSH
7560: EMPTY
7561: ST_TO_ADDR
// p3 = [ ] ;
7562: LD_ADDR_VAR 0 7
7566: PUSH
7567: EMPTY
7568: ST_TO_ADDR
// p4 = [ ] ;
7569: LD_ADDR_VAR 0 8
7573: PUSH
7574: EMPTY
7575: ST_TO_ADDR
// for i in jedn do
7576: LD_ADDR_VAR 0 3
7580: PUSH
7581: LD_VAR 0 1
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7721
// begin pom = Rand ( 1 , 4 ) ;
7589: LD_ADDR_VAR 0 4
7593: PUSH
7594: LD_INT 1
7596: PPUSH
7597: LD_INT 4
7599: PPUSH
7600: CALL_OW 12
7604: ST_TO_ADDR
// case pom of 1 :
7605: LD_VAR 0 4
7609: PUSH
7610: LD_INT 1
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7637
7618: POP
// p1 = p1 ^ i ; 2 :
7619: LD_ADDR_VAR 0 5
7623: PUSH
7624: LD_VAR 0 5
7628: PUSH
7629: LD_VAR 0 3
7633: ADD
7634: ST_TO_ADDR
7635: GO 7719
7637: LD_INT 2
7639: DOUBLE
7640: EQUAL
7641: IFTRUE 7645
7643: GO 7664
7645: POP
// p2 = p2 ^ i ; 3 :
7646: LD_ADDR_VAR 0 6
7650: PUSH
7651: LD_VAR 0 6
7655: PUSH
7656: LD_VAR 0 3
7660: ADD
7661: ST_TO_ADDR
7662: GO 7719
7664: LD_INT 3
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7691
7672: POP
// p3 = p3 ^ i ; 4 :
7673: LD_ADDR_VAR 0 7
7677: PUSH
7678: LD_VAR 0 7
7682: PUSH
7683: LD_VAR 0 3
7687: ADD
7688: ST_TO_ADDR
7689: GO 7719
7691: LD_INT 4
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7718
7699: POP
// p4 = p4 ^ i ; end ;
7700: LD_ADDR_VAR 0 8
7704: PUSH
7705: LD_VAR 0 8
7709: PUSH
7710: LD_VAR 0 3
7714: ADD
7715: ST_TO_ADDR
7716: GO 7719
7718: POP
// end ;
7719: GO 7586
7721: POP
7722: POP
// a = [ p1 , p2 , p3 , p4 ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_VAR 0 5
7732: PUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_VAR 0 7
7742: PUSH
7743: LD_VAR 0 8
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: ST_TO_ADDR
// result := a ;
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_VAR 0 9
7763: ST_TO_ADDR
// end ;
7764: LD_VAR 0 2
7768: RET
// every 0 0$1 marked 6 do var pom , i ;
7769: GO 7771
7771: DISABLE
7772: LD_INT 0
7774: PPUSH
7775: PPUSH
// begin pom = FilterUnitsInArea ( RU_odber , [ [ f_side , You2 ] ] ) ;
7776: LD_ADDR_VAR 0 1
7780: PUSH
7781: LD_INT 27
7783: PPUSH
7784: LD_INT 22
7786: PUSH
7787: LD_EXP 2
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 70
7803: ST_TO_ADDR
// if pom > 0 then
7804: LD_VAR 0 1
7808: PUSH
7809: LD_INT 0
7811: GREATER
7812: IFFALSE 7856
// begin Rusi_utekli = Rusi_utekli ^ pom ;
7814: LD_ADDR_EXP 42
7818: PUSH
7819: LD_EXP 42
7823: PUSH
7824: LD_VAR 0 1
7828: ADD
7829: ST_TO_ADDR
// for i in pom do
7830: LD_ADDR_VAR 0 2
7834: PUSH
7835: LD_VAR 0 1
7839: PUSH
7840: FOR_IN
7841: IFFALSE 7854
// RemoveUnit ( i ) ;
7843: LD_VAR 0 2
7847: PPUSH
7848: CALL_OW 64
7852: GO 7840
7854: POP
7855: POP
// end ; enable ;
7856: ENABLE
// end ;
7857: PPOPN 2
7859: END
// every 25 25$0 do var i , pom ;
7860: GO 7862
7862: DISABLE
7863: LD_INT 0
7865: PPUSH
7866: PPUSH
// begin for i in RU_posily_na_utek do
7867: LD_ADDR_VAR 0 1
7871: PUSH
7872: LD_EXP 58
7876: PUSH
7877: FOR_IN
7878: IFFALSE 7897
// PlaceUnitArea ( i , Ru_posily , false ) ;
7880: LD_VAR 0 1
7884: PPUSH
7885: LD_INT 28
7887: PPUSH
7888: LD_INT 0
7890: PPUSH
7891: CALL_OW 49
7895: GO 7877
7897: POP
7898: POP
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_type , unit_vehicle ] ] ) ;
7899: LD_ADDR_VAR 0 2
7903: PUSH
7904: LD_EXP 58
7908: PPUSH
7909: LD_INT 21
7911: PUSH
7912: LD_INT 2
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: EMPTY
7920: LIST
7921: PPUSH
7922: CALL_OW 72
7926: ST_TO_ADDR
// ComMoveXY ( pom , 155 , 93 ) ;
7927: LD_VAR 0 2
7931: PPUSH
7932: LD_INT 155
7934: PPUSH
7935: LD_INT 93
7937: PPUSH
7938: CALL_OW 111
// Rusi_save = pom ;
7942: LD_ADDR_EXP 43
7946: PUSH
7947: LD_VAR 0 2
7951: ST_TO_ADDR
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_soldier ] ] ) ;
7952: LD_ADDR_VAR 0 2
7956: PUSH
7957: LD_EXP 58
7961: PPUSH
7962: LD_INT 25
7964: PUSH
7965: LD_INT 1
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: PPUSH
7975: CALL_OW 72
7979: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_bar2 ) ;
7980: LD_VAR 0 2
7984: PPUSH
7985: LD_INT 17
7987: PPUSH
7988: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_mechanic ] ] ) ;
7992: LD_ADDR_VAR 0 2
7996: PUSH
7997: LD_EXP 58
8001: PPUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: PPUSH
8015: CALL_OW 72
8019: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_fac ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 5
8027: PPUSH
8028: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_engineer ] ] ) ;
8032: LD_ADDR_VAR 0 2
8036: PUSH
8037: LD_EXP 58
8041: PPUSH
8042: LD_INT 25
8044: PUSH
8045: LD_INT 2
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: PPUSH
8055: CALL_OW 72
8059: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_dep ) ;
8060: LD_VAR 0 2
8064: PPUSH
8065: LD_INT 1
8067: PPUSH
8068: CALL_OW 120
// Rusi_save = Rusi_save ^ [ RU1_sol1 , RU1_me3 , Ru1_sci2 , RU1_sci5 , RU1_sci3 , RU1_sol5 , RU1_eng1 ] ;
8072: LD_ADDR_EXP 43
8076: PUSH
8077: LD_EXP 43
8081: PUSH
8082: LD_INT 52
8084: PUSH
8085: LD_INT 51
8087: PUSH
8088: LD_INT 45
8090: PUSH
8091: LD_INT 48
8093: PUSH
8094: LD_INT 46
8096: PUSH
8097: LD_INT 55
8099: PUSH
8100: LD_INT 57
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: ADD
8112: ST_TO_ADDR
// end ;
8113: PPOPN 2
8115: END
// export function posli_rusy_pryc ; var pom ; begin
8116: LD_INT 0
8118: PPUSH
8119: PPUSH
// SetLives ( Rusi_save , 800 ) ;
8120: LD_EXP 43
8124: PPUSH
8125: LD_INT 800
8127: PPUSH
8128: CALL_OW 234
// pom = split_ruske_jednotky ( Rusi_save ) ;
8132: LD_ADDR_VAR 0 2
8136: PUSH
8137: LD_EXP 43
8141: PPUSH
8142: CALL 7538 0 1
8146: ST_TO_ADDR
// ComExitBuilding ( Rusi_save ) ;
8147: LD_EXP 43
8151: PPUSH
8152: CALL_OW 122
// AddComMoveXY ( pom [ 1 ] , 110 , 45 ) ;
8156: LD_VAR 0 2
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: PPUSH
8165: LD_INT 110
8167: PPUSH
8168: LD_INT 45
8170: PPUSH
8171: CALL_OW 171
// AddComMoveXY ( pom [ 2 ] , 103 , 60 ) ;
8175: LD_VAR 0 2
8179: PUSH
8180: LD_INT 2
8182: ARRAY
8183: PPUSH
8184: LD_INT 103
8186: PPUSH
8187: LD_INT 60
8189: PPUSH
8190: CALL_OW 171
// AddComMoveXY ( pom [ 3 ] , 76 , 80 ) ;
8194: LD_VAR 0 2
8198: PUSH
8199: LD_INT 3
8201: ARRAY
8202: PPUSH
8203: LD_INT 76
8205: PPUSH
8206: LD_INT 80
8208: PPUSH
8209: CALL_OW 171
// AddComMoveXY ( pom [ 4 ] , 53 , 1 ) ;
8213: LD_VAR 0 2
8217: PUSH
8218: LD_INT 4
8220: ARRAY
8221: PPUSH
8222: LD_INT 53
8224: PPUSH
8225: LD_INT 1
8227: PPUSH
8228: CALL_OW 171
// end ;
8232: LD_VAR 0 1
8236: RET
// export function posli_lidi_zpet_omicron ; var pom ; var pom1 , i ; begin
8237: LD_INT 0
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// pom1 = [ ] ;
8243: LD_ADDR_VAR 0 3
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_building ] , [ f_side , You ] ] ) ;
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: LD_INT 20
8257: PPUSH
8258: LD_INT 21
8260: PUSH
8261: LD_INT 3
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: LD_INT 22
8270: PUSH
8271: LD_EXP 1
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 70
8288: ST_TO_ADDR
// for i in pom do
8289: LD_ADDR_VAR 0 4
8293: PUSH
8294: LD_VAR 0 2
8298: PUSH
8299: FOR_IN
8300: IFFALSE 8325
// pom1 = pom1 ^ UnitsInside ( i ) ;
8302: LD_ADDR_VAR 0 3
8306: PUSH
8307: LD_VAR 0 3
8311: PUSH
8312: LD_VAR 0 4
8316: PPUSH
8317: CALL_OW 313
8321: ADD
8322: ST_TO_ADDR
8323: GO 8299
8325: POP
8326: POP
// ComExitBuilding ( pom1 ) ;
8327: LD_VAR 0 3
8331: PPUSH
8332: CALL_OW 122
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , You ] ] ) ;
8336: LD_ADDR_VAR 0 2
8340: PUSH
8341: LD_INT 20
8343: PPUSH
8344: LD_INT 21
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 22
8356: PUSH
8357: LD_EXP 1
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 70
8374: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
8375: LD_ADDR_VAR 0 3
8379: PUSH
8380: LD_VAR 0 3
8384: PUSH
8385: LD_VAR 0 2
8389: ADD
8390: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , You ] ] ) ;
8391: LD_ADDR_VAR 0 2
8395: PUSH
8396: LD_INT 20
8398: PPUSH
8399: LD_INT 21
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 22
8411: PUSH
8412: LD_EXP 1
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PPUSH
8425: CALL_OW 70
8429: ST_TO_ADDR
// for i in pom do
8430: LD_ADDR_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: PUSH
8440: FOR_IN
8441: IFFALSE 8493
// begin pom1 = pom ^ i ;
8443: LD_ADDR_VAR 0 3
8447: PUSH
8448: LD_VAR 0 2
8452: PUSH
8453: LD_VAR 0 4
8457: ADD
8458: ST_TO_ADDR
// if IsDrivenBy ( i ) then
8459: LD_VAR 0 4
8463: PPUSH
8464: CALL_OW 311
8468: IFFALSE 8491
// pom1 = pom1 ^ IsDrivenBy ( i ) ;
8470: LD_ADDR_VAR 0 3
8474: PUSH
8475: LD_VAR 0 3
8479: PUSH
8480: LD_VAR 0 4
8484: PPUSH
8485: CALL_OW 311
8489: ADD
8490: ST_TO_ADDR
// end ;
8491: GO 8440
8493: POP
8494: POP
// SetSide ( pom1 , You3 ) ;
8495: LD_VAR 0 3
8499: PPUSH
8500: LD_EXP 3
8504: PPUSH
8505: CALL_OW 235
// pom = FilterUnitsInArea ( Om_ven_1 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8509: LD_ADDR_VAR 0 2
8513: PUSH
8514: LD_INT 29
8516: PPUSH
8517: LD_INT 22
8519: PUSH
8520: LD_EXP 3
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 2
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PPUSH
8561: CALL_OW 70
8565: ST_TO_ADDR
// ComMoveXY ( pom , 79 , 16 ) ;
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_INT 79
8573: PPUSH
8574: LD_INT 16
8576: PPUSH
8577: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_2 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8581: LD_ADDR_VAR 0 2
8585: PUSH
8586: LD_INT 30
8588: PPUSH
8589: LD_INT 22
8591: PUSH
8592: LD_EXP 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 21
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 70
8637: ST_TO_ADDR
// ComMoveXY ( pom , 67 , 40 ) ;
8638: LD_VAR 0 2
8642: PPUSH
8643: LD_INT 67
8645: PPUSH
8646: LD_INT 40
8648: PPUSH
8649: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_3 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8653: LD_ADDR_VAR 0 2
8657: PUSH
8658: LD_INT 31
8660: PPUSH
8661: LD_INT 22
8663: PUSH
8664: LD_EXP 3
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 2
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 2
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 70
8709: ST_TO_ADDR
// ComMoveXY ( pom , 58 , 52 ) ;
8710: LD_VAR 0 2
8714: PPUSH
8715: LD_INT 58
8717: PPUSH
8718: LD_INT 52
8720: PPUSH
8721: CALL_OW 111
// end ;
8725: LD_VAR 0 1
8729: RET
// export function get_lidi_popov_area ; var pom , i ; var drv ; var a ; begin
8730: LD_INT 0
8732: PPUSH
8733: PPUSH
8734: PPUSH
8735: PPUSH
8736: PPUSH
// a = [ ] ;
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
8744: LD_ADDR_VAR 0 2
8748: PUSH
8749: LD_INT 15
8751: PPUSH
8752: LD_INT 22
8754: PUSH
8755: LD_EXP 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 21
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 70
8782: ST_TO_ADDR
// a = pom ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_VAR 0 2
8792: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
8793: LD_ADDR_VAR 0 2
8797: PUSH
8798: LD_INT 15
8800: PPUSH
8801: LD_INT 22
8803: PUSH
8804: LD_EXP 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 21
8815: PUSH
8816: LD_INT 2
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PPUSH
8827: CALL_OW 70
8831: ST_TO_ADDR
// for i in pom do
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_VAR 0 2
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8901
// begin drv = IsDrivenBy ( i ) ;
8845: LD_ADDR_VAR 0 4
8849: PUSH
8850: LD_VAR 0 3
8854: PPUSH
8855: CALL_OW 311
8859: ST_TO_ADDR
// if ( not ( drv in a ) ) and ( drv <> 0 ) then
8860: LD_VAR 0 4
8864: PUSH
8865: LD_VAR 0 5
8869: IN
8870: NOT
8871: PUSH
8872: LD_VAR 0 4
8876: PUSH
8877: LD_INT 0
8879: NONEQUAL
8880: AND
8881: IFFALSE 8899
// a = a ^ drv ;
8883: LD_ADDR_VAR 0 5
8887: PUSH
8888: LD_VAR 0 5
8892: PUSH
8893: LD_VAR 0 4
8897: ADD
8898: ST_TO_ADDR
// end ;
8899: GO 8842
8901: POP
8902: POP
// result := a ;
8903: LD_ADDR_VAR 0 1
8907: PUSH
8908: LD_VAR 0 5
8912: ST_TO_ADDR
// end ;
8913: LD_VAR 0 1
8917: RET
// export function totalni_ukonceni_mise_v_ingame_videu ; var pom ; begin
8918: LD_INT 0
8920: PPUSH
8921: PPUSH
// InGameOn ;
8922: CALL_OW 8
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8926: LD_ADDR_VAR 0 2
8930: PUSH
8931: LD_INT 22
8933: PUSH
8934: LD_EXP 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: LD_INT 21
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 21
8958: PUSH
8959: LD_INT 1
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 69
8979: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8980: LD_INT 10
8982: PPUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_INT 108
8990: PUSH
8991: LD_INT 70
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 77
9000: PUSH
9001: LD_INT 65
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 53
9010: PUSH
9011: LD_INT 63
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 40
9020: PUSH
9021: LD_INT 64
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 51
9030: PUSH
9031: LD_INT 97
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: PPUSH
9045: LD_INT 10
9047: PUSH
9048: LD_INT 5
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 398
// pom = FilterAllUnits ( [ [ f_side , You2 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9059: LD_ADDR_VAR 0 2
9063: PUSH
9064: LD_INT 22
9066: PUSH
9067: LD_EXP 2
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 2
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 21
9091: PUSH
9092: LD_INT 1
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
9113: LD_INT 10
9115: PPUSH
9116: LD_VAR 0 2
9120: PPUSH
9121: LD_INT 108
9123: PUSH
9124: LD_INT 70
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 77
9133: PUSH
9134: LD_INT 65
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: LD_INT 53
9143: PUSH
9144: LD_INT 63
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 40
9153: PUSH
9154: LD_INT 64
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 51
9163: PUSH
9164: LD_INT 97
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: PPUSH
9178: LD_INT 10
9180: PUSH
9181: LD_INT 5
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PPUSH
9188: CALL_OW 398
// enable ( 7 ) ;
9192: LD_INT 7
9194: ENABLE_MARKED
// wait ( 0 0$10 ) ;
9195: LD_INT 350
9197: PPUSH
9198: CALL_OW 67
// InGameOff ;
9202: CALL_OW 9
// konec_mise ;
9206: CALL 1489 0 0
// end ;
9210: LD_VAR 0 1
9214: RET
// export function schovej_kurina ; begin
9215: LD_INT 0
9217: PPUSH
// ComEnterUnit ( kur , RU1_dep ) ;
9218: LD_EXP 27
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 120
// end ;
9230: LD_VAR 0 1
9234: RET
// export function posli_kurina_na_smrt ; begin
9235: LD_INT 0
9237: PPUSH
// ComExitBuilding ( kur ) ;
9238: LD_EXP 27
9242: PPUSH
9243: CALL_OW 122
// end ;
9247: LD_VAR 0 1
9251: RET
// every 0 0$2 do var pom ; var i ;
9252: GO 9254
9254: DISABLE
9255: LD_INT 0
9257: PPUSH
9258: PPUSH
// begin pom = FilterUnitsExceptArea ( Om_ven , [ [ f_side , You3 ] ] ) ;
9259: LD_ADDR_VAR 0 1
9263: PUSH
9264: LD_INT 20
9266: PPUSH
9267: LD_INT 22
9269: PUSH
9270: LD_EXP 3
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: PPUSH
9282: CALL_OW 71
9286: ST_TO_ADDR
// for i in pom do
9287: LD_ADDR_VAR 0 2
9291: PUSH
9292: LD_VAR 0 1
9296: PUSH
9297: FOR_IN
9298: IFFALSE 9361
// begin if GetType ( i ) = unit_vehicle then
9300: LD_VAR 0 2
9304: PPUSH
9305: CALL_OW 247
9309: PUSH
9310: LD_INT 2
9312: EQUAL
9313: IFFALSE 9345
// if IsDrivenBy ( i ) then
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 311
9324: IFFALSE 9345
// SetSide ( IsDrivenBy ( i ) , You ) ;
9326: LD_VAR 0 2
9330: PPUSH
9331: CALL_OW 311
9335: PPUSH
9336: LD_EXP 1
9340: PPUSH
9341: CALL_OW 235
// SetSide ( i , You ) ;
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_EXP 1
9354: PPUSH
9355: CALL_OW 235
// end ;
9359: GO 9297
9361: POP
9362: POP
// enable ;
9363: ENABLE
// end ;
9364: PPOPN 2
9366: END
// every 0 0$1 marked 9 do var i ; var ridici ; var mcm ;
9367: GO 9369
9369: DISABLE
9370: LD_INT 0
9372: PPUSH
9373: PPUSH
9374: PPUSH
// begin if FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) then
9375: LD_INT 56
9377: PPUSH
9378: LD_INT 22
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 70
9392: IFFALSE 9433
// for i in FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) do
9394: LD_ADDR_VAR 0 1
9398: PUSH
9399: LD_INT 56
9401: PPUSH
9402: LD_INT 22
9404: PUSH
9405: LD_INT 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 70
9416: PUSH
9417: FOR_IN
9418: IFFALSE 9431
// RemoveUnit ( i ) ;
9420: LD_VAR 0 1
9424: PPUSH
9425: CALL_OW 64
9429: GO 9417
9431: POP
9432: POP
// ridici = [ ] ;
9433: LD_ADDR_VAR 0 2
9437: PUSH
9438: EMPTY
9439: ST_TO_ADDR
// for i in RUSI_CERPACI_AUTA_LIST do
9440: LD_ADDR_VAR 0 1
9444: PUSH
9445: LD_EXP 59
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9491
// begin PlaceUnitArea ( i , cargoSpawn , false ) ;
9453: LD_VAR 0 1
9457: PPUSH
9458: LD_INT 55
9460: PPUSH
9461: LD_INT 0
9463: PPUSH
9464: CALL_OW 49
// ridici = ridici ^ IsDrivenBy ( i ) ;
9468: LD_ADDR_VAR 0 2
9472: PUSH
9473: LD_VAR 0 2
9477: PUSH
9478: LD_VAR 0 1
9482: PPUSH
9483: CALL_OW 311
9487: ADD
9488: ST_TO_ADDR
// end ;
9489: GO 9450
9491: POP
9492: POP
// mcm = McMove ( 10 , RUSI_CERPACI_AUTA_LIST , [ [ 130 , 75 ] , [ 112 , 59 ] , [ 106 , 32 ] , [ 91 , 21 ] , [ 62 , 9 ] ] , [ mc_move_waitwp ] ) ;
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: LD_INT 10
9500: PPUSH
9501: LD_EXP 59
9505: PPUSH
9506: LD_INT 130
9508: PUSH
9509: LD_INT 75
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 112
9518: PUSH
9519: LD_INT 59
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 106
9528: PUSH
9529: LD_INT 32
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 91
9538: PUSH
9539: LD_INT 21
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 62
9548: PUSH
9549: LD_INT 9
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: PPUSH
9563: LD_INT 3
9565: PUSH
9566: EMPTY
9567: LIST
9568: PPUSH
9569: CALL_OW 398
9573: ST_TO_ADDR
// while UnitFilter ( RUSI_CERPACI_AUTA_LIST , [ [ f_inarea , benzina ] ] ) <> RUSI_CERPACI_AUTA_LIST do
9574: LD_EXP 59
9578: PPUSH
9579: LD_INT 95
9581: PUSH
9582: LD_INT 48
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: PPUSH
9592: CALL_OW 72
9596: PUSH
9597: LD_EXP 59
9601: NONEQUAL
9602: IFFALSE 9637
// begin KillMc ( mcm ) ;
9604: LD_VAR 0 3
9608: PPUSH
9609: CALL_OW 387
// wait ( 0 0$2 ) ;
9613: LD_INT 70
9615: PPUSH
9616: CALL_OW 67
// ComMoveXY ( RUSI_CERPACI_AUTA_LIST , 62 , 9 ) ;
9620: LD_EXP 59
9624: PPUSH
9625: LD_INT 62
9627: PPUSH
9628: LD_INT 9
9630: PPUSH
9631: CALL_OW 111
// end ;
9635: GO 9574
// hint_cerpaci_auta ;
9637: CALL 16724 0 0
// ComExitVehicle ( ridici ) ;
9641: LD_VAR 0 2
9645: PPUSH
9646: CALL_OW 121
// AddComAgressiveMove ( ridici , 45 , 6 ) ;
9650: LD_VAR 0 2
9654: PPUSH
9655: LD_INT 45
9657: PPUSH
9658: LD_INT 6
9660: PPUSH
9661: CALL_OW 174
// AddComAgressiveMove ( ridici , 15 , 10 ) ;
9665: LD_VAR 0 2
9669: PPUSH
9670: LD_INT 15
9672: PPUSH
9673: LD_INT 10
9675: PPUSH
9676: CALL_OW 174
// AddComAttackUnit ( ridici , Am_dep ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 12
9687: PPUSH
9688: CALL_OW 175
// end ;
9692: PPOPN 3
9694: END
// every 0 0$2 do var pom , i ; var ridic ;
9695: GO 9697
9697: DISABLE
9698: LD_INT 0
9700: PPUSH
9701: PPUSH
9702: PPUSH
// begin pom = FilterUnitsInArea ( Cauta , [ [ f_side , You2 ] , [ f_weapon , ru_cargo_bay ] ] ) ;
9703: LD_ADDR_VAR 0 1
9707: PUSH
9708: LD_INT 39
9710: PPUSH
9711: LD_INT 22
9713: PUSH
9714: LD_EXP 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 34
9725: PUSH
9726: LD_INT 51
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 70
9741: ST_TO_ADDR
// if pom > 0 then
9742: LD_VAR 0 1
9746: PUSH
9747: LD_INT 0
9749: GREATER
9750: IFFALSE 9771
// begin if not qrefuel_over then
9752: LD_LOC 20
9756: NOT
9757: IFFALSE 9771
// begin qrefuel_over = true ;
9759: LD_ADDR_LOC 20
9763: PUSH
9764: LD_INT 1
9766: ST_TO_ADDR
// query_refuel ;
9767: CALL 16642 0 0
// end ; end ; for i in pom do
9771: LD_ADDR_VAR 0 2
9775: PUSH
9776: LD_VAR 0 1
9780: PUSH
9781: FOR_IN
9782: IFFALSE 9836
// if IsDrivenBy ( i ) then
9784: LD_VAR 0 2
9788: PPUSH
9789: CALL_OW 311
9793: IFFALSE 9834
// begin ridic = IsDrivenBy ( i ) ;
9795: LD_ADDR_VAR 0 3
9799: PUSH
9800: LD_VAR 0 2
9804: PPUSH
9805: CALL_OW 311
9809: ST_TO_ADDR
// ComExitVehicle ( ridic ) ;
9810: LD_VAR 0 3
9814: PPUSH
9815: CALL_OW 121
// AddComAgressiveMove ( ridic , 21 , 14 ) ;
9819: LD_VAR 0 3
9823: PPUSH
9824: LD_INT 21
9826: PPUSH
9827: LD_INT 14
9829: PPUSH
9830: CALL_OW 174
// end ;
9834: GO 9781
9836: POP
9837: POP
// enable ;
9838: ENABLE
// end ;
9839: PPOPN 3
9841: END
// on VehicleConstructed ( v , fact ) do begin if GetSide ( fact ) = 3 then
9842: LD_VAR 0 2
9846: PPUSH
9847: CALL_OW 255
9851: PUSH
9852: LD_INT 3
9854: EQUAL
9855: IFFALSE 9871
// postavenych_aut = postavenych_aut + 1 ;
9857: LD_ADDR_EXP 47
9861: PUSH
9862: LD_EXP 47
9866: PUSH
9867: LD_INT 1
9869: PLUS
9870: ST_TO_ADDR
// if GetSide ( fact ) = 6 then
9871: LD_VAR 0 2
9875: PPUSH
9876: CALL_OW 255
9880: PUSH
9881: LD_INT 6
9883: EQUAL
9884: IFFALSE 9901
// ComMoveXY ( v , 125 , 70 ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: LD_INT 125
9893: PPUSH
9894: LD_INT 70
9896: PPUSH
9897: CALL_OW 111
// end ;
9901: PPOPN 2
9903: END
// every 0 0$1 marked 51 do
9904: GO 9906
9906: DISABLE
// begin if konec_counteru then
9907: LD_EXP 45
9911: IFFALSE 9922
// begin display_strings = [ ] ;
9913: LD_ADDR_OWVAR 47
9917: PUSH
9918: EMPTY
9919: ST_TO_ADDR
// exit ;
9920: GO 9973
// end ; display_strings = [ #Ru03-1 , TTime ] ;
9922: LD_ADDR_OWVAR 47
9926: PUSH
9927: LD_STRING #Ru03-1
9929: PUSH
9930: LD_LOC 21
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9939: LD_ADDR_LOC 21
9943: PUSH
9944: LD_LOC 21
9948: PUSH
9949: LD_INT 35
9951: MINUS
9952: ST_TO_ADDR
// if TTime > 0 then
9953: LD_LOC 21
9957: PUSH
9958: LD_INT 0
9960: GREATER
9961: IFFALSE 9966
// enable else
9963: ENABLE
9964: GO 9973
// display_strings = [ ] ;
9966: LD_ADDR_OWVAR 47
9970: PUSH
9971: EMPTY
9972: ST_TO_ADDR
// end ;
9973: END
// every 0 0$1 marked 52 do
9974: GO 9976
9976: DISABLE
// begin if konec_counteru then
9977: LD_EXP 45
9981: IFFALSE 9992
// begin display_strings = [ ] ;
9983: LD_ADDR_OWVAR 47
9987: PUSH
9988: EMPTY
9989: ST_TO_ADDR
// exit ;
9990: GO 10043
// end ; display_strings = [ #Ru03-2 , TTime ] ;
9992: LD_ADDR_OWVAR 47
9996: PUSH
9997: LD_STRING #Ru03-2
9999: PUSH
10000: LD_LOC 21
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
10009: LD_ADDR_LOC 21
10013: PUSH
10014: LD_LOC 21
10018: PUSH
10019: LD_INT 35
10021: MINUS
10022: ST_TO_ADDR
// if TTime > 0 then
10023: LD_LOC 21
10027: PUSH
10028: LD_INT 0
10030: GREATER
10031: IFFALSE 10036
// enable else
10033: ENABLE
10034: GO 10043
// display_strings = [ ] ;
10036: LD_ADDR_OWVAR 47
10040: PUSH
10041: EMPTY
10042: ST_TO_ADDR
// end ;
10043: END
// every 0 0$1 marked 53 do
10044: GO 10046
10046: DISABLE
// begin if konec_counteru then
10047: LD_EXP 45
10051: IFFALSE 10062
// begin display_strings = [ ] ;
10053: LD_ADDR_OWVAR 47
10057: PUSH
10058: EMPTY
10059: ST_TO_ADDR
// exit ;
10060: GO 10113
// end ; display_strings = [ #Ru03-3 , TTime ] ;
10062: LD_ADDR_OWVAR 47
10066: PUSH
10067: LD_STRING #Ru03-3
10069: PUSH
10070: LD_LOC 21
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
10079: LD_ADDR_LOC 21
10083: PUSH
10084: LD_LOC 21
10088: PUSH
10089: LD_INT 35
10091: MINUS
10092: ST_TO_ADDR
// if TTime > 0 then
10093: LD_LOC 21
10097: PUSH
10098: LD_INT 0
10100: GREATER
10101: IFFALSE 10106
// enable else
10103: ENABLE
10104: GO 10113
// display_strings = [ ] ;
10106: LD_ADDR_OWVAR 47
10110: PUSH
10111: EMPTY
10112: ST_TO_ADDR
// end ;
10113: END
// export function zastaveni_rusaku ; var pom ; begin
10114: LD_INT 0
10116: PPUSH
10117: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
10118: LD_ADDR_VAR 0 2
10122: PUSH
10123: LD_INT 22
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 21
10140: PUSH
10141: LD_INT 2
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 21
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 69
10171: ST_TO_ADDR
// ComStand ( pom ) ;
10172: LD_VAR 0 2
10176: PPUSH
10177: CALL_OW 165
// end ; end_of_file
10181: LD_VAR 0 1
10185: RET
// export konstanta_utoceni ; var hint_bw ; every 0 0$0.1 do
10186: GO 10188
10188: DISABLE
// begin konstanta_utoceni = 0 ;
10189: LD_ADDR_EXP 49
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// hint_bw = false ;
10197: LD_ADDR_LOC 22
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// end ;
10205: END
// export function uvodni_pokec ; var vyber , eng ; begin
10206: LD_INT 0
10208: PPUSH
10209: PPUSH
10210: PPUSH
// wait ( 0 0$2 ) ;
10211: LD_INT 70
10213: PPUSH
10214: CALL_OW 67
// ComTurnUnit ( bur , kur ) ;
10218: LD_EXP 29
10222: PPUSH
10223: LD_EXP 27
10227: PPUSH
10228: CALL_OW 119
// ComTurnUnit ( kur , bur ) ;
10232: LD_EXP 27
10236: PPUSH
10237: LD_EXP 29
10241: PPUSH
10242: CALL_OW 119
// if BELKOV_SAVED then
10246: LD_EXP 24
10250: IFFALSE 10290
// begin Say ( kur , D1b-Kur-1 ) ;
10252: LD_EXP 27
10256: PPUSH
10257: LD_STRING D1b-Kur-1
10259: PPUSH
10260: CALL_OW 88
// Say ( bel , D1b-Bel-1 ) ;
10264: LD_EXP 32
10268: PPUSH
10269: LD_STRING D1b-Bel-1
10271: PPUSH
10272: CALL_OW 88
// Say ( kur , D1b-Kur-2 ) ;
10276: LD_EXP 27
10280: PPUSH
10281: LD_STRING D1b-Kur-2
10283: PPUSH
10284: CALL_OW 88
// end else
10288: GO 10374
// begin Say ( kur , D1a-Kur-1 ) ;
10290: LD_EXP 27
10294: PPUSH
10295: LD_STRING D1a-Kur-1
10297: PPUSH
10298: CALL_OW 88
// Say ( bur , D1a-Bur-1 ) ;
10302: LD_EXP 29
10306: PPUSH
10307: LD_STRING D1a-Bur-1
10309: PPUSH
10310: CALL_OW 88
// if STAV_UTOKU = 3 then
10314: LD_EXP 25
10318: PUSH
10319: LD_INT 3
10321: EQUAL
10322: IFFALSE 10338
// Say ( kur , D1a-Kur-2a ) else
10324: LD_EXP 27
10328: PPUSH
10329: LD_STRING D1a-Kur-2a
10331: PPUSH
10332: CALL_OW 88
10336: GO 10350
// Say ( kur , D1a-Kur-2 ) ;
10338: LD_EXP 27
10342: PPUSH
10343: LD_STRING D1a-Kur-2
10345: PPUSH
10346: CALL_OW 88
// Say ( kur , D1a-Kur-2b ) ;
10350: LD_EXP 27
10354: PPUSH
10355: LD_STRING D1a-Kur-2b
10357: PPUSH
10358: CALL_OW 88
// Say ( bur , D1a-Bur-2 ) ;
10362: LD_EXP 29
10366: PPUSH
10367: LD_STRING D1a-Bur-2
10369: PPUSH
10370: CALL_OW 88
// end ; Say ( kur , D2-Kur-1 ) ;
10374: LD_EXP 27
10378: PPUSH
10379: LD_STRING D2-Kur-1
10381: PPUSH
10382: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
10386: LD_EXP 29
10390: PPUSH
10391: LD_STRING D2-Bur-1
10393: PPUSH
10394: CALL_OW 88
// Say ( kur , D2-Kur-2 ) ;
10398: LD_EXP 27
10402: PPUSH
10403: LD_STRING D2-Kur-2
10405: PPUSH
10406: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
10410: LD_EXP 29
10414: PPUSH
10415: LD_STRING D2-Bur-2
10417: PPUSH
10418: CALL_OW 88
// Say ( kur , D2-Kur-3 ) ;
10422: LD_EXP 27
10426: PPUSH
10427: LD_STRING D2-Kur-3
10429: PPUSH
10430: CALL_OW 88
// Say ( pop , D2-Pop-3 ) ;
10434: LD_EXP 28
10438: PPUSH
10439: LD_STRING D2-Pop-3
10441: PPUSH
10442: CALL_OW 88
// Say ( kur , D2-Kur-4 ) ;
10446: LD_EXP 27
10450: PPUSH
10451: LD_STRING D2-Kur-4
10453: PPUSH
10454: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
10458: LD_EXP 29
10462: PPUSH
10463: LD_STRING D2-Bur-4
10465: PPUSH
10466: CALL_OW 88
// Say ( kur , D2-Kur-5 ) ;
10470: LD_EXP 27
10474: PPUSH
10475: LD_STRING D2-Kur-5
10477: PPUSH
10478: CALL_OW 88
// Say ( bur , D2-Bur-5 ) ;
10482: LD_EXP 29
10486: PPUSH
10487: LD_STRING D2-Bur-5
10489: PPUSH
10490: CALL_OW 88
// Say ( kur , D2-Kur-6 ) ;
10494: LD_EXP 27
10498: PPUSH
10499: LD_STRING D2-Kur-6
10501: PPUSH
10502: CALL_OW 88
// vyber = vyber_characteru ;
10506: LD_ADDR_VAR 0 2
10510: PUSH
10511: CALL 3282 0 0
10515: ST_TO_ADDR
// if bel in vyber then
10516: LD_EXP 32
10520: PUSH
10521: LD_VAR 0 2
10525: IN
10526: IFFALSE 10539
// RemoveUnit ( bel ) else
10528: LD_EXP 32
10532: PPUSH
10533: CALL_OW 64
10537: GO 10553
// Setside ( bel , You2 ) ;
10539: LD_EXP 32
10543: PPUSH
10544: LD_EXP 2
10548: PPUSH
10549: CALL_OW 235
// if IsOK ( kov ) then
10553: LD_EXP 30
10557: PPUSH
10558: CALL_OW 302
10562: IFFALSE 10573
// RemoveUnit ( kov ) ;
10564: LD_EXP 30
10568: PPUSH
10569: CALL_OW 64
// if IsOK ( gny ) then
10573: LD_EXP 31
10577: PPUSH
10578: CALL_OW 302
10582: IFFALSE 10593
// RemoveUnit ( gny ) ;
10584: LD_EXP 31
10588: PPUSH
10589: CALL_OW 64
// RemoveUnit ( bur ) ;
10593: LD_EXP 29
10597: PPUSH
10598: CALL_OW 64
// prebarveni_druhe_baze ;
10602: CALL 5802 0 0
// ChangeSideFog ( You3 , You ) ;
10606: LD_EXP 3
10610: PPUSH
10611: LD_EXP 1
10615: PPUSH
10616: CALL_OW 343
// placni_unity ( vyber ) ;
10620: LD_VAR 0 2
10624: PPUSH
10625: CALL 4039 0 1
// CenterOnUnits ( vyber ) ;
10629: LD_VAR 0 2
10633: PPUSH
10634: CALL_OW 85
// RevealFogArea ( You , Wth ) ;
10638: LD_EXP 1
10642: PPUSH
10643: LD_INT 24
10645: PPUSH
10646: CALL_OW 332
// wait ( 0 0$2 ) ;
10650: LD_INT 70
10652: PPUSH
10653: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10657: LD_STRING M1
10659: PPUSH
10660: CALL_OW 337
// hint_bw = true ;
10664: LD_ADDR_LOC 22
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// Hint ( Oil ) ;
10672: LD_STRING Oil
10674: PPUSH
10675: CALL_OW 339
// Hint ( Upgrading ) ;
10679: LD_STRING Upgrading
10681: PPUSH
10682: CALL_OW 339
// InGameOff ;
10686: CALL_OW 9
// wait ( 1 1$00 ) ;
10690: LD_INT 2100
10692: PPUSH
10693: CALL_OW 67
// eng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) ;
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_INT 6
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 25
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: ST_TO_ADDR
// if not eng then
10731: LD_VAR 0 3
10735: NOT
10736: IFFALSE 10740
// exit ;
10738: GO 10789
// ComExitBuilding ( eng ) ;
10740: LD_VAR 0 3
10744: PPUSH
10745: CALL_OW 122
// AddComBuild ( eng , b_oil_power , 140 , 69 , 0 ) ;
10749: LD_VAR 0 3
10753: PPUSH
10754: LD_INT 26
10756: PPUSH
10757: LD_INT 140
10759: PPUSH
10760: LD_INT 69
10762: PPUSH
10763: LD_INT 0
10765: PPUSH
10766: CALL_OW 205
// wait ( 2 2$30 ) ;
10770: LD_INT 5250
10772: PPUSH
10773: CALL_OW 67
// ComEnterUnit ( eng , RU1_dep ) ;
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 120
// end ;
10789: LD_VAR 0 1
10793: RET
// every 0 0$1 trigger GetResourceVisibility ( 57 , 89 , You ) > 0 do
10794: LD_INT 57
10796: PPUSH
10797: LD_INT 89
10799: PPUSH
10800: LD_EXP 1
10804: PPUSH
10805: CALL_OW 440
10809: PUSH
10810: LD_INT 0
10812: GREATER
10813: IFFALSE 10917
10815: GO 10817
10817: DISABLE
// begin CenterOnXY ( 57 , 89 ) ;
10818: LD_INT 57
10820: PPUSH
10821: LD_INT 89
10823: PPUSH
10824: CALL_OW 84
// DialogueOn ;
10828: CALL_OW 6
// interface_hidden := true ;
10832: LD_ADDR_OWVAR 54
10836: PUSH
10837: LD_INT 1
10839: ST_TO_ADDR
// Say ( bur , D2a-Bur-1 ) ;
10840: LD_EXP 29
10844: PPUSH
10845: LD_STRING D2a-Bur-1
10847: PPUSH
10848: CALL_OW 88
// SayRadio ( kur , D2a-Kur-1 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_STRING D2a-Kur-1
10859: PPUSH
10860: CALL_OW 94
// RU_videl_oil = true ;
10864: LD_ADDR_EXP 40
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// interface_hidden := false ;
10872: LD_ADDR_OWVAR 54
10876: PUSH
10877: LD_INT 0
10879: ST_TO_ADDR
// Hint ( OilSpoted ) ;
10880: LD_STRING OilSpoted
10882: PPUSH
10883: CALL_OW 339
// DialogueOff ;
10887: CALL_OW 7
// wait ( 0 0$45 ) ;
10891: LD_INT 1575
10893: PPUSH
10894: CALL_OW 67
// ComConstruct ( Ru1_fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
10898: LD_INT 5
10900: PPUSH
10901: LD_INT 21
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: LD_INT 42
10912: PPUSH
10913: CALL_OW 125
// end ;
10917: END
// every 0 0$3 trigger RU_videl_oil and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ;
10918: LD_EXP 40
10922: PUSH
10923: LD_INT 22
10925: PUSH
10926: LD_EXP 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 30
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: PUSH
10954: LD_INT 1
10956: GREATER
10957: AND
10958: IFFALSE 11122
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_EXP 1
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 69
11003: ST_TO_ADDR
// pom1 = [ ] ;
11004: LD_ADDR_VAR 0 2
11008: PUSH
11009: EMPTY
11010: ST_TO_ADDR
// for i in pom do
11011: LD_ADDR_VAR 0 3
11015: PUSH
11016: LD_VAR 0 1
11020: PUSH
11021: FOR_IN
11022: IFFALSE 11063
// if GetDistUnitXY ( i , 56 , 88 ) < 30 then
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 56
11031: PPUSH
11032: LD_INT 88
11034: PPUSH
11035: CALL_OW 297
11039: PUSH
11040: LD_INT 30
11042: LESS
11043: IFFALSE 11061
// pom1 = pom1 ^ i ;
11045: LD_ADDR_VAR 0 2
11049: PUSH
11050: LD_VAR 0 2
11054: PUSH
11055: LD_VAR 0 3
11059: ADD
11060: ST_TO_ADDR
11061: GO 11021
11063: POP
11064: POP
// if pom1 > 0 then
11065: LD_VAR 0 2
11069: PUSH
11070: LD_INT 0
11072: GREATER
11073: IFFALSE 11121
// begin while IsConstructed ( pom1 [ 1 ] ) do
11075: LD_VAR 0 2
11079: PUSH
11080: LD_INT 1
11082: ARRAY
11083: PPUSH
11084: CALL_OW 304
11088: IFFALSE 11099
// wait ( 0 0$5 ) ;
11090: LD_INT 175
11092: PPUSH
11093: CALL_OW 67
11097: GO 11075
// ChangeMissionObjectives ( M2 ) ;
11099: LD_STRING M2
11101: PPUSH
11102: CALL_OW 337
// pojmenovani_kaganoviche ( pom1 [ 1 ] ) ;
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 1
11113: ARRAY
11114: PPUSH
11115: CALL 4846 0 1
// end else
11119: GO 11122
// enable ;
11121: ENABLE
// end ;
11122: PPOPN 3
11124: END
// every 0 0$2 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) > 0 do var pom ;
11125: LD_INT 2
11127: PPUSH
11128: LD_INT 22
11130: PUSH
11131: LD_EXP 1
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 30
11142: PUSH
11143: LD_INT 3
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PPUSH
11154: CALL_OW 70
11158: PUSH
11159: LD_INT 0
11161: GREATER
11162: IFFALSE 11454
11164: GO 11166
11166: DISABLE
11167: LD_INT 0
11169: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) ;
11170: LD_ADDR_VAR 0 1
11174: PUSH
11175: LD_INT 2
11177: PPUSH
11178: LD_INT 22
11180: PUSH
11181: LD_EXP 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 30
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PPUSH
11204: CALL_OW 70
11208: ST_TO_ADDR
// pom = pom [ 1 ] ;
11209: LD_ADDR_VAR 0 1
11213: PUSH
11214: LD_VAR 0 1
11218: PUSH
11219: LD_INT 1
11221: ARRAY
11222: ST_TO_ADDR
// while IsConstructed ( pom ) <> 0 do
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL_OW 304
11232: PUSH
11233: LD_INT 0
11235: NONEQUAL
11236: IFFALSE 11247
// wait ( 0 0$2 ) ;
11238: LD_INT 70
11240: PPUSH
11241: CALL_OW 67
11245: GO 11223
// CenterNowOnUnits ( pom ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 87
// interface_hidden := true ;
11256: LD_ADDR_OWVAR 54
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) ;
11264: LD_ADDR_VAR 0 1
11268: PUSH
11269: LD_INT 2
11271: PPUSH
11272: LD_INT 22
11274: PUSH
11275: LD_EXP 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 30
11286: PUSH
11287: LD_INT 26
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PPUSH
11298: CALL_OW 70
11302: ST_TO_ADDR
// if pom = 0 then
11303: LD_VAR 0 1
11307: PUSH
11308: LD_INT 0
11310: EQUAL
11311: IFFALSE 11428
// begin DialogueOn ;
11313: CALL_OW 6
// Say ( bur , D3aa-Bur-1 ) ;
11317: LD_EXP 29
11321: PPUSH
11322: LD_STRING D3aa-Bur-1
11324: PPUSH
11325: CALL_OW 88
// if IsOK ( schol ) then
11329: LD_EXP 33
11333: PPUSH
11334: CALL_OW 302
11338: IFFALSE 11366
// begin Say ( schol , D3aa-Sch-1 ) ;
11340: LD_EXP 33
11344: PPUSH
11345: LD_STRING D3aa-Sch-1
11347: PPUSH
11348: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11352: LD_EXP 29
11356: PPUSH
11357: LD_STRING D3aa-Bur-2
11359: PPUSH
11360: CALL_OW 88
// end else
11364: GO 11428
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_INT 1
11373: PPUSH
11374: LD_INT 4
11376: PPUSH
11377: LD_EXP 29
11381: PUSH
11382: EMPTY
11383: LIST
11384: PPUSH
11385: CALL 11999 0 3
11389: ST_TO_ADDR
// if pom > 0 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 0
11397: GREATER
11398: IFFALSE 11428
// begin Say ( pom [ 1 ] , D3aa-Sci1-1 ) ;
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 1
11407: ARRAY
11408: PPUSH
11409: LD_STRING D3aa-Sci1-1
11411: PPUSH
11412: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11416: LD_EXP 29
11420: PPUSH
11421: LD_STRING D3aa-Bur-2
11423: PPUSH
11424: CALL_OW 88
// end ; end ; end ; ChangeMissionObjectives ( M3 ) ;
11428: LD_STRING M3
11430: PPUSH
11431: CALL_OW 337
// Hint ( Factory ) ;
11435: LD_STRING Factory
11437: PPUSH
11438: CALL_OW 339
// interface_hidden := false ;
11442: LD_ADDR_OWVAR 54
11446: PUSH
11447: LD_INT 0
11449: ST_TO_ADDR
// DialogueOff ;
11450: CALL_OW 7
// end ;
11454: PPOPN 1
11456: END
// every 0 0$5 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) > 0 do var pom ;
11457: LD_INT 2
11459: PPUSH
11460: LD_INT 22
11462: PUSH
11463: LD_EXP 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 30
11474: PUSH
11475: LD_INT 4
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PPUSH
11486: CALL_OW 70
11490: PUSH
11491: LD_INT 0
11493: GREATER
11494: IFFALSE 11576
11496: GO 11498
11498: DISABLE
11499: LD_INT 0
11501: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) ;
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: LD_INT 2
11509: PPUSH
11510: LD_INT 22
11512: PUSH
11513: LD_EXP 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 30
11524: PUSH
11525: LD_INT 4
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PPUSH
11536: CALL_OW 70
11540: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
11541: LD_VAR 0 1
11545: PUSH
11546: LD_INT 1
11548: ARRAY
11549: PPUSH
11550: CALL_OW 304
11554: PUSH
11555: LD_INT 0
11557: NONEQUAL
11558: IFFALSE 11569
// wait ( 0 0$5 ) ;
11560: LD_INT 175
11562: PPUSH
11563: CALL_OW 67
11567: GO 11541
// Hint ( Armoury ) ;
11569: LD_STRING Armoury
11571: PPUSH
11572: CALL_OW 339
// end ;
11576: PPOPN 1
11578: END
// every 0 0$3 trigger hint_bw do var pom ;
11579: LD_LOC 22
11583: IFFALSE 11637
11585: GO 11587
11587: DISABLE
11588: LD_INT 0
11590: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_breastwork ] ] ) ;
11591: LD_ADDR_VAR 0 1
11595: PUSH
11596: LD_INT 2
11598: PPUSH
11599: LD_INT 22
11601: PUSH
11602: LD_EXP 1
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 30
11613: PUSH
11614: LD_INT 31
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 70
11629: ST_TO_ADDR
// Hint ( bunkers ) ;
11630: LD_STRING bunkers
11632: PPUSH
11633: CALL_OW 339
// end ;
11637: PPOPN 1
11639: END
// export function dialog_scholtze_enter ; begin
11640: LD_INT 0
11642: PPUSH
// CenterOnUnits ( schol2 ) ;
11643: LD_EXP 34
11647: PPUSH
11648: CALL_OW 85
// DialogueOn ;
11652: CALL_OW 6
// interface_hidden := true ;
11656: LD_ADDR_OWVAR 54
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// SayRadio ( schol2 , D4-Sch-1 ) ;
11664: LD_EXP 34
11668: PPUSH
11669: LD_STRING D4-Sch-1
11671: PPUSH
11672: CALL_OW 94
// Say ( bur , D4-Bur-1 ) ;
11676: LD_EXP 29
11680: PPUSH
11681: LD_STRING D4-Bur-1
11683: PPUSH
11684: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
11688: LD_STRING M4
11690: PPUSH
11691: CALL_OW 337
// interface_hidden := false ;
11695: LD_ADDR_OWVAR 54
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// DialogueOff ;
11703: CALL_OW 7
// end ;
11707: LD_VAR 0 1
11711: RET
// export function dialog_scholtze_nalezen ; begin
11712: LD_INT 0
11714: PPUSH
// CenterOnUnits ( schol2 ) ;
11715: LD_EXP 34
11719: PPUSH
11720: CALL_OW 85
// DialogueOn ;
11724: CALL_OW 6
// interface_hidden := true ;
11728: LD_ADDR_OWVAR 54
11732: PUSH
11733: LD_INT 1
11735: ST_TO_ADDR
// if IsOK ( schol2 ) then
11736: LD_EXP 34
11740: PPUSH
11741: CALL_OW 302
11745: IFFALSE 11790
// begin Say ( schol2 , D4a-Sch-1 ) ;
11747: LD_EXP 34
11751: PPUSH
11752: LD_STRING D4a-Sch-1
11754: PPUSH
11755: CALL_OW 88
// Say ( bur , D4a-Bur-1 ) ;
11759: LD_EXP 29
11763: PPUSH
11764: LD_STRING D4a-Bur-1
11766: PPUSH
11767: CALL_OW 88
// Say ( schol2 , D4a-Sch-2 ) ;
11771: LD_EXP 34
11775: PPUSH
11776: LD_STRING D4a-Sch-2
11778: PPUSH
11779: CALL_OW 88
// ChangeMissionObjectives ( MScholtzeOut ) ;
11783: LD_STRING MScholtzeOut
11785: PPUSH
11786: CALL_OW 337
// end ; interface_hidden := false ;
11790: LD_ADDR_OWVAR 54
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// DialogueOff ;
11798: CALL_OW 7
// end ;
11802: LD_VAR 0 1
11806: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) = 1 marked 201 do var pom ;
11807: CALL 26262 0 0
11811: PUSH
11812: LD_INT 22
11814: PUSH
11815: LD_EXP 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 69
11842: PUSH
11843: LD_INT 1
11845: EQUAL
11846: AND
11847: IFFALSE 11996
11849: GO 11851
11851: DISABLE
11852: LD_INT 0
11854: PPUSH
// begin DialogueOn ;
11855: CALL_OW 6
// interface_hidden := true ;
11859: LD_ADDR_OWVAR 54
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
11867: LD_EXP 72
11871: PPUSH
11872: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_INT 1
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: LD_EXP 29
11891: PUSH
11892: LD_EXP 31
11896: PUSH
11897: LD_EXP 30
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL 11999 0 3
11911: ST_TO_ADDR
// if pom = 0 then
11912: LD_VAR 0 1
11916: PUSH
11917: LD_INT 0
11919: EQUAL
11920: IFFALSE 11946
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
11922: LD_ADDR_VAR 0 1
11926: PUSH
11927: LD_INT 1
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_EXP 29
11937: PUSH
11938: EMPTY
11939: LIST
11940: PPUSH
11941: CALL 11999 0 3
11945: ST_TO_ADDR
// if pom > 0 then
11946: LD_VAR 0 1
11950: PUSH
11951: LD_INT 0
11953: GREATER
11954: IFFALSE 11984
// begin Say ( pom [ 1 ] , D3a-RSol1-1 ) ;
11956: LD_VAR 0 1
11960: PUSH
11961: LD_INT 1
11963: ARRAY
11964: PPUSH
11965: LD_STRING D3a-RSol1-1
11967: PPUSH
11968: CALL_OW 88
// Say ( bur , D3a-Bur-1 ) ;
11972: LD_EXP 29
11976: PPUSH
11977: LD_STRING D3a-Bur-1
11979: PPUSH
11980: CALL_OW 88
// end ; interface_hidden := false ;
11984: LD_ADDR_OWVAR 54
11988: PUSH
11989: LD_INT 0
11991: ST_TO_ADDR
// DialogueOff ;
11992: CALL_OW 7
// end ;
11996: PPOPN 1
11998: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11999: LD_INT 0
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
12005: PPUSH
12006: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12007: LD_ADDR_VAR 0 6
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_EXP 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 26
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12056: LD_ADDR_VAR 0 7
12060: PUSH
12061: LD_INT 22
12063: PUSH
12064: LD_EXP 1
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 25
12075: PUSH
12076: LD_INT 3
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 26
12085: PUSH
12086: LD_VAR 0 1
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 69
12104: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12105: LD_ADDR_VAR 0 8
12109: PUSH
12110: LD_INT 22
12112: PUSH
12113: LD_EXP 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 2
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 26
12134: PUSH
12135: LD_VAR 0 1
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12154: LD_ADDR_VAR 0 9
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_EXP 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 26
12183: PUSH
12184: LD_VAR 0 1
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 69
12202: ST_TO_ADDR
// case povolani of class_scientistic :
12203: LD_VAR 0 2
12207: PUSH
12208: LD_INT 4
12210: DOUBLE
12211: EQUAL
12212: IFTRUE 12216
12214: GO 12229
12216: POP
// pom = pom1 ; class_mechanic :
12217: LD_ADDR_VAR 0 5
12221: PUSH
12222: LD_VAR 0 6
12226: ST_TO_ADDR
12227: GO 12293
12229: LD_INT 3
12231: DOUBLE
12232: EQUAL
12233: IFTRUE 12237
12235: GO 12250
12237: POP
// pom = pom2 ; class_engineer :
12238: LD_ADDR_VAR 0 5
12242: PUSH
12243: LD_VAR 0 7
12247: ST_TO_ADDR
12248: GO 12293
12250: LD_INT 2
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12271
12258: POP
// pom = pom3 ; class_soldier :
12259: LD_ADDR_VAR 0 5
12263: PUSH
12264: LD_VAR 0 8
12268: ST_TO_ADDR
12269: GO 12293
12271: LD_INT 1
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12292
12279: POP
// pom = pom4 ; end ;
12280: LD_ADDR_VAR 0 5
12284: PUSH
12285: LD_VAR 0 9
12289: ST_TO_ADDR
12290: GO 12293
12292: POP
// if povolani <> class_scientistic then
12293: LD_VAR 0 2
12297: PUSH
12298: LD_INT 4
12300: NONEQUAL
12301: IFFALSE 12319
// pom = pom ^ pom1 ;
12303: LD_ADDR_VAR 0 5
12307: PUSH
12308: LD_VAR 0 5
12312: PUSH
12313: LD_VAR 0 6
12317: ADD
12318: ST_TO_ADDR
// if povolani <> class_mechanic then
12319: LD_VAR 0 2
12323: PUSH
12324: LD_INT 3
12326: NONEQUAL
12327: IFFALSE 12345
// pom = pom ^ pom2 ;
12329: LD_ADDR_VAR 0 5
12333: PUSH
12334: LD_VAR 0 5
12338: PUSH
12339: LD_VAR 0 7
12343: ADD
12344: ST_TO_ADDR
// if povolani <> class_engineer then
12345: LD_VAR 0 2
12349: PUSH
12350: LD_INT 2
12352: NONEQUAL
12353: IFFALSE 12371
// pom = pom ^ pom3 ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 5
12364: PUSH
12365: LD_VAR 0 8
12369: ADD
12370: ST_TO_ADDR
// if povolani <> class_soldier then
12371: LD_VAR 0 2
12375: PUSH
12376: LD_INT 1
12378: NONEQUAL
12379: IFFALSE 12397
// pom = pom ^ pom4 ;
12381: LD_ADDR_VAR 0 5
12385: PUSH
12386: LD_VAR 0 5
12390: PUSH
12391: LD_VAR 0 9
12395: ADD
12396: ST_TO_ADDR
// result := pom diff diffseznam ;
12397: LD_ADDR_VAR 0 4
12401: PUSH
12402: LD_VAR 0 5
12406: PUSH
12407: LD_VAR 0 3
12411: DIFF
12412: ST_TO_ADDR
// end ;
12413: LD_VAR 0 4
12417: RET
// function GetPeopleSide ( side , sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
12418: LD_INT 0
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
12424: PPUSH
12425: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12426: LD_ADDR_VAR 0 7
12430: PUSH
12431: LD_INT 22
12433: PUSH
12434: LD_VAR 0 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 4
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: LD_VAR 0 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12475: LD_ADDR_VAR 0 8
12479: PUSH
12480: LD_INT 22
12482: PUSH
12483: LD_VAR 0 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 25
12494: PUSH
12495: LD_INT 3
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 26
12504: PUSH
12505: LD_VAR 0 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 69
12523: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12524: LD_ADDR_VAR 0 9
12528: PUSH
12529: LD_INT 22
12531: PUSH
12532: LD_VAR 0 1
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 26
12553: PUSH
12554: LD_VAR 0 2
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12573: LD_ADDR_VAR 0 10
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_VAR 0 1
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 25
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 26
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: PPUSH
12617: CALL_OW 69
12621: ST_TO_ADDR
// case povolani of class_scientistic :
12622: LD_VAR 0 3
12626: PUSH
12627: LD_INT 4
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12648
12635: POP
// pom = pom1 ; class_mechanic :
12636: LD_ADDR_VAR 0 6
12640: PUSH
12641: LD_VAR 0 7
12645: ST_TO_ADDR
12646: GO 12712
12648: LD_INT 3
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12669
12656: POP
// pom = pom2 ; class_engineer :
12657: LD_ADDR_VAR 0 6
12661: PUSH
12662: LD_VAR 0 8
12666: ST_TO_ADDR
12667: GO 12712
12669: LD_INT 2
12671: DOUBLE
12672: EQUAL
12673: IFTRUE 12677
12675: GO 12690
12677: POP
// pom = pom3 ; class_soldier :
12678: LD_ADDR_VAR 0 6
12682: PUSH
12683: LD_VAR 0 9
12687: ST_TO_ADDR
12688: GO 12712
12690: LD_INT 1
12692: DOUBLE
12693: EQUAL
12694: IFTRUE 12698
12696: GO 12711
12698: POP
// pom = pom4 ; end ;
12699: LD_ADDR_VAR 0 6
12703: PUSH
12704: LD_VAR 0 10
12708: ST_TO_ADDR
12709: GO 12712
12711: POP
// if povolani <> class_scientistic then
12712: LD_VAR 0 3
12716: PUSH
12717: LD_INT 4
12719: NONEQUAL
12720: IFFALSE 12738
// pom = pom ^ pom1 ;
12722: LD_ADDR_VAR 0 6
12726: PUSH
12727: LD_VAR 0 6
12731: PUSH
12732: LD_VAR 0 7
12736: ADD
12737: ST_TO_ADDR
// if povolani <> class_mechanic then
12738: LD_VAR 0 3
12742: PUSH
12743: LD_INT 3
12745: NONEQUAL
12746: IFFALSE 12764
// pom = pom ^ pom2 ;
12748: LD_ADDR_VAR 0 6
12752: PUSH
12753: LD_VAR 0 6
12757: PUSH
12758: LD_VAR 0 8
12762: ADD
12763: ST_TO_ADDR
// if povolani <> class_engineer then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 2
12771: NONEQUAL
12772: IFFALSE 12790
// pom = pom ^ pom3 ;
12774: LD_ADDR_VAR 0 6
12778: PUSH
12779: LD_VAR 0 6
12783: PUSH
12784: LD_VAR 0 9
12788: ADD
12789: ST_TO_ADDR
// if povolani <> class_soldier then
12790: LD_VAR 0 3
12794: PUSH
12795: LD_INT 1
12797: NONEQUAL
12798: IFFALSE 12816
// pom = pom ^ pom4 ;
12800: LD_ADDR_VAR 0 6
12804: PUSH
12805: LD_VAR 0 6
12809: PUSH
12810: LD_VAR 0 10
12814: ADD
12815: ST_TO_ADDR
// result := pom diff diffseznam ;
12816: LD_ADDR_VAR 0 5
12820: PUSH
12821: LD_VAR 0 6
12825: PUSH
12826: LD_VAR 0 4
12830: DIFF
12831: ST_TO_ADDR
// end ;
12832: LD_VAR 0 5
12836: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom ;
12837: CALL 26262 0 0
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_EXP 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 30
12856: PUSH
12857: LD_INT 0
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: PUSH
12873: LD_INT 1
12875: GREATER
12876: AND
12877: IFFALSE 13095
12879: GO 12881
12881: DISABLE
12882: LD_INT 0
12884: PPUSH
// begin disable ( 201 ) ;
12885: LD_INT 201
12887: DISABLE_MARKED
// DialogueOn ;
12888: CALL_OW 6
// interface_hidden := true ;
12892: LD_ADDR_OWVAR 54
12896: PUSH
12897: LD_INT 1
12899: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
12900: LD_EXP 72
12904: PPUSH
12905: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
12909: LD_ADDR_VAR 0 1
12913: PUSH
12914: LD_INT 1
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: LD_EXP 29
12924: PUSH
12925: LD_EXP 31
12929: PUSH
12930: LD_EXP 30
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL 11999 0 3
12944: ST_TO_ADDR
// if pom = 0 then
12945: LD_VAR 0 1
12949: PUSH
12950: LD_INT 0
12952: EQUAL
12953: IFFALSE 12979
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
12955: LD_ADDR_VAR 0 1
12959: PUSH
12960: LD_INT 1
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: LD_EXP 29
12970: PUSH
12971: EMPTY
12972: LIST
12973: PPUSH
12974: CALL 11999 0 3
12978: ST_TO_ADDR
// if pom > 0 then
12979: LD_VAR 0 1
12983: PUSH
12984: LD_INT 0
12986: GREATER
12987: IFFALSE 13083
// begin Say ( pom [ 1 ] , D3b-RSol1-1 ) ;
12989: LD_VAR 0 1
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PPUSH
12998: LD_STRING D3b-RSol1-1
13000: PPUSH
13001: CALL_OW 88
// if IsOK ( gny ) then
13005: LD_EXP 31
13009: PPUSH
13010: CALL_OW 302
13014: IFFALSE 13042
// begin Say ( gny , D3b-Gny-1 ) ;
13016: LD_EXP 31
13020: PPUSH
13021: LD_STRING D3b-Gny-1
13023: PPUSH
13024: CALL_OW 88
// Say ( bur , D3b-Bur-1 ) ;
13028: LD_EXP 29
13032: PPUSH
13033: LD_STRING D3b-Bur-1
13035: PPUSH
13036: CALL_OW 88
// end else
13040: GO 13083
// if ISOK ( kov ) then
13042: LD_EXP 30
13046: PPUSH
13047: CALL_OW 302
13051: IFFALSE 13067
// Say ( kov , D3b-Kov-1 ) else
13053: LD_EXP 30
13057: PPUSH
13058: LD_STRING D3b-Kov-1
13060: PPUSH
13061: CALL_OW 88
13065: GO 13083
// Say ( pom [ 1 ] , D3b-RSol1-2 ) ;
13067: LD_VAR 0 1
13071: PUSH
13072: LD_INT 1
13074: ARRAY
13075: PPUSH
13076: LD_STRING D3b-RSol1-2
13078: PPUSH
13079: CALL_OW 88
// end ; interface_hidden := false ;
13083: LD_ADDR_OWVAR 54
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// DialogueOff ;
13091: CALL_OW 7
// end ;
13095: PPOPN 1
13097: END
// export function dialog_otazka_poctu_aut ; var pom ; begin
13098: LD_INT 0
13100: PPUSH
13101: PPUSH
// DialogueOn ;
13102: CALL_OW 6
// interface_hidden := true ;
13106: LD_ADDR_OWVAR 54
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// Say ( kur , D5-Kur-1 ) ;
13114: LD_EXP 27
13118: PPUSH
13119: LD_STRING D5-Kur-1
13121: PPUSH
13122: CALL_OW 88
// pom = Query ( QVehicles ) ;
13126: LD_ADDR_VAR 0 2
13130: PUSH
13131: LD_STRING QVehicles
13133: PPUSH
13134: CALL_OW 97
13138: ST_TO_ADDR
// case pom of 1 :
13139: LD_VAR 0 2
13143: PUSH
13144: LD_INT 1
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13179
13152: POP
// begin Say ( bur , D6a-Bur-1 ) ;
13153: LD_EXP 29
13157: PPUSH
13158: LD_STRING D6a-Bur-1
13160: PPUSH
13161: CALL_OW 88
// Say ( kur , D6a-Kur-1 ) ;
13165: LD_EXP 27
13169: PPUSH
13170: LD_STRING D6a-Kur-1
13172: PPUSH
13173: CALL_OW 88
// end ; 2 :
13177: GO 13282
13179: LD_INT 2
13181: DOUBLE
13182: EQUAL
13183: IFTRUE 13187
13185: GO 13226
13187: POP
// begin Say ( bur , D6b-Bur-1 ) ;
13188: LD_EXP 29
13192: PPUSH
13193: LD_STRING D6b-Bur-1
13195: PPUSH
13196: CALL_OW 88
// Say ( kur , D6b-Kur-1 ) ;
13200: LD_EXP 27
13204: PPUSH
13205: LD_STRING D6b-Kur-1
13207: PPUSH
13208: CALL_OW 88
// Say ( bur , D6b-Bur-2 ) ;
13212: LD_EXP 29
13216: PPUSH
13217: LD_STRING D6b-Bur-2
13219: PPUSH
13220: CALL_OW 88
// end ; 3 :
13224: GO 13282
13226: LD_INT 3
13228: DOUBLE
13229: EQUAL
13230: IFTRUE 13234
13232: GO 13281
13234: POP
// begin Say ( bur , D6c-Bur-1 ) ;
13235: LD_EXP 29
13239: PPUSH
13240: LD_STRING D6c-Bur-1
13242: PPUSH
13243: CALL_OW 88
// Say ( kur , D6c-Kur-1 ) ;
13247: LD_EXP 27
13251: PPUSH
13252: LD_STRING D6c-Kur-1
13254: PPUSH
13255: CALL_OW 88
// Say ( bur , D6c-Bur-2 ) ;
13259: LD_EXP 29
13263: PPUSH
13264: LD_STRING D6c-Bur-2
13266: PPUSH
13267: CALL_OW 88
// KurinAddTime = 1 ;
13271: LD_ADDR_EXP 7
13275: PUSH
13276: LD_INT 1
13278: ST_TO_ADDR
// end ; end ;
13279: GO 13282
13281: POP
// interface_hidden := false ;
13282: LD_ADDR_OWVAR 54
13286: PUSH
13287: LD_INT 0
13289: ST_TO_ADDR
// DialogueOff ;
13290: CALL_OW 7
// result := pom ;
13294: LD_ADDR_VAR 0 1
13298: PUSH
13299: LD_VAR 0 2
13303: ST_TO_ADDR
// end ;
13304: LD_VAR 0 1
13308: RET
// export function hlaska_omicron ; begin
13309: LD_INT 0
13311: PPUSH
// DialogueOn ;
13312: CALL_OW 6
// interface_hidden := true ;
13316: LD_ADDR_OWVAR 54
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// Say ( kur , D6c-Kur-2 ) ;
13324: LD_EXP 27
13328: PPUSH
13329: LD_STRING D6c-Kur-2
13331: PPUSH
13332: CALL_OW 88
// interface_hidden := false ;
13336: LD_ADDR_OWVAR 54
13340: PUSH
13341: LD_INT 0
13343: ST_TO_ADDR
// DialogueOff ;
13344: CALL_OW 7
// end ;
13348: LD_VAR 0 1
13352: RET
// every 0 0$1 trigger stav_omikron = 3 do
13353: LD_EXP 39
13357: PUSH
13358: LD_INT 3
13360: EQUAL
13361: IFFALSE 13391
13363: GO 13365
13365: DISABLE
// begin CheckVehicles ;
13366: CALL 6298 0 0
// ChangeMissionObjectives ( M5 ) ;
13370: LD_STRING M5
13372: PPUSH
13373: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 1 ) ;
13377: LD_INT 32
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 424
// CheckVehicles ;
13387: CALL 6298 0 0
// end ;
13391: END
// export function dialog_pred_omicronem ; var pom ; begin
13392: LD_INT 0
13394: PPUSH
13395: PPUSH
// DialogueOn ;
13396: CALL_OW 6
// interface_hidden := true ;
13400: LD_ADDR_OWVAR 54
13404: PUSH
13405: LD_INT 1
13407: ST_TO_ADDR
// Say ( bur , D7-Bur-1 ) ;
13408: LD_EXP 29
13412: PPUSH
13413: LD_STRING D7-Bur-1
13415: PPUSH
13416: CALL_OW 88
// SayRadio ( kur , D7-Kur-1 ) ;
13420: LD_EXP 27
13424: PPUSH
13425: LD_STRING D7-Kur-1
13427: PPUSH
13428: CALL_OW 94
// setkani_om := true ;
13432: LD_ADDR_EXP 41
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// ChangeMissionObjectives ( M5a ) ;
13440: LD_STRING M5a
13442: PPUSH
13443: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 0 ) ;
13447: LD_INT 32
13449: PPUSH
13450: LD_INT 0
13452: PPUSH
13453: CALL_OW 424
// interface_hidden := false ;
13457: LD_ADDR_OWVAR 54
13461: PUSH
13462: LD_INT 0
13464: ST_TO_ADDR
// DialogueOff ;
13465: CALL_OW 7
// end ;
13469: LD_VAR 0 1
13473: RET
// every 0 0$5 trigger stav_omikron = 4 and omicron_half_destroyed do var pom ;
13474: LD_EXP 39
13478: PUSH
13479: LD_INT 4
13481: EQUAL
13482: PUSH
13483: CALL 26331 0 0
13487: AND
13488: IFFALSE 13755
13490: GO 13492
13492: DISABLE
13493: LD_INT 0
13495: PPUSH
// begin popov_ven ;
13496: CALL 5619 0 0
// DialogueOn ;
13500: CALL_OW 6
// interface_hidden := true ;
13504: LD_ADDR_OWVAR 54
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// pom = create_kecajici_amik ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: CALL 18736 0 0
13521: ST_TO_ADDR
// SayRadio ( pom , D8-Sol1-1 ) ;
13522: LD_VAR 0 1
13526: PPUSH
13527: LD_STRING D8-Sol1-1
13529: PPUSH
13530: CALL_OW 94
// if IsOK ( kov ) then
13534: LD_EXP 30
13538: PPUSH
13539: CALL_OW 302
13543: IFFALSE 13559
// Say ( kov , D8-Kov-1 ) else
13545: LD_EXP 30
13549: PPUSH
13550: LD_STRING D8-Kov-1
13552: PPUSH
13553: CALL_OW 88
13557: GO 13650
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: LD_INT 1
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: LD_EXP 29
13574: PUSH
13575: LD_EXP 31
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL 11999 0 3
13588: ST_TO_ADDR
// if pom = 0 then
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 0
13596: EQUAL
13597: IFFALSE 13634
// GetPeopleSide ( You2 , sex_male , class_soldier , [ kur , pop , bel ] ) ;
13599: LD_EXP 2
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_EXP 27
13614: PUSH
13615: LD_EXP 28
13619: PUSH
13620: LD_EXP 32
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: PPUSH
13630: CALL 12418 0 4
// Say ( pom [ 1 ] , D8-RSol1-1 ) ;
13634: LD_VAR 0 1
13638: PUSH
13639: LD_INT 1
13641: ARRAY
13642: PPUSH
13643: LD_STRING D8-RSol1-1
13645: PPUSH
13646: CALL_OW 88
// end ; if IsOK ( gny ) then
13650: LD_EXP 31
13654: PPUSH
13655: CALL_OW 302
13659: IFFALSE 13675
// Say ( gny , D8-Gny-1 ) else
13661: LD_EXP 31
13665: PPUSH
13666: LD_STRING D8-Gny-1
13668: PPUSH
13669: CALL_OW 88
13673: GO 13731
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13675: LD_ADDR_VAR 0 1
13679: PUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: LD_EXP 29
13690: PUSH
13691: LD_EXP 31
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL 11999 0 3
13704: ST_TO_ADDR
// if pom > 1 then
13705: LD_VAR 0 1
13709: PUSH
13710: LD_INT 1
13712: GREATER
13713: IFFALSE 13731
// Say ( pom [ 2 ] , D8-RSol2-1 ) ;
13715: LD_VAR 0 1
13719: PUSH
13720: LD_INT 2
13722: ARRAY
13723: PPUSH
13724: LD_STRING D8-RSol2-1
13726: PPUSH
13727: CALL_OW 88
// end ; interface_hidden := false ;
13731: LD_ADDR_OWVAR 54
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// DialogueOff ;
13739: CALL_OW 7
// stahnuti_amiku ;
13743: CALL 26494 0 0
// stav_omikron = 5 ;
13747: LD_ADDR_EXP 39
13751: PUSH
13752: LD_INT 5
13754: ST_TO_ADDR
// end ;
13755: PPOPN 1
13757: END
// every 0 0$5 trigger stav_omikron = 5 do var gri ;
13758: LD_EXP 39
13762: PUSH
13763: LD_INT 5
13765: EQUAL
13766: IFFALSE 13927
13768: GO 13770
13770: DISABLE
13771: LD_INT 0
13773: PPUSH
// begin setkani_om = false ;
13774: LD_ADDR_EXP 41
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// gri = create_grishko ;
13782: LD_ADDR_VAR 0 1
13786: PUSH
13787: CALL 18795 0 0
13791: ST_TO_ADDR
// CenterOnUnits ( gri ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: CALL_OW 85
// DialogueOn ;
13801: CALL_OW 6
// interface_hidden := true ;
13805: LD_ADDR_OWVAR 54
13809: PUSH
13810: LD_INT 1
13812: ST_TO_ADDR
// SayRadio ( gri , D9-Gri-1 ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_STRING D9-Gri-1
13820: PPUSH
13821: CALL_OW 94
// SayRadio ( kur , D9-Kur-1 ) ;
13825: LD_EXP 27
13829: PPUSH
13830: LD_STRING D9-Kur-1
13832: PPUSH
13833: CALL_OW 94
// wait ( 0 0$2 ) ;
13837: LD_INT 70
13839: PPUSH
13840: CALL_OW 67
// SayRadio ( gri , D9-Gri-2 ) ;
13844: LD_VAR 0 1
13848: PPUSH
13849: LD_STRING D9-Gri-2
13851: PPUSH
13852: CALL_OW 94
// SayRadio ( kur , D9-Kur-2 ) ;
13856: LD_EXP 27
13860: PPUSH
13861: LD_STRING D9-Kur-2
13863: PPUSH
13864: CALL_OW 94
// SayRadio ( gri , D9-Gri-3 ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_STRING D9-Gri-3
13875: PPUSH
13876: CALL_OW 94
// SayRadio ( kur , D9-Kur-3 ) ;
13880: LD_EXP 27
13884: PPUSH
13885: LD_STRING D9-Kur-3
13887: PPUSH
13888: CALL_OW 94
// interface_hidden := false ;
13892: LD_ADDR_OWVAR 54
13896: PUSH
13897: LD_INT 0
13899: ST_TO_ADDR
// DialogueOff ;
13900: CALL_OW 7
// wait ( 0 0$20 ) ;
13904: LD_INT 700
13906: PPUSH
13907: CALL_OW 67
// stav_omikron = 6 ;
13911: LD_ADDR_EXP 39
13915: PUSH
13916: LD_INT 6
13918: ST_TO_ADDR
// zastaveni_rusaku ;
13919: CALL 10114 0 0
// utok_arabu ;
13923: CALL 27335 0 0
// end ;
13927: PPOPN 1
13929: END
// export function kecy_behem_utoku_arabu ; var i ; begin
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
// stav_omikron = 7 ;
13934: LD_ADDR_EXP 39
13938: PUSH
13939: LD_INT 7
13941: ST_TO_ADDR
// SayRadio ( kur , D9a-Kur-1 ) ;
13942: LD_EXP 27
13946: PPUSH
13947: LD_STRING D9a-Kur-1
13949: PPUSH
13950: CALL_OW 94
// Say ( bur , D9a-Bur-1 ) ;
13954: LD_EXP 29
13958: PPUSH
13959: LD_STRING D9a-Bur-1
13961: PPUSH
13962: CALL_OW 88
// SayRadio ( kur , D9a-Kur-2 ) ;
13966: LD_EXP 27
13970: PPUSH
13971: LD_STRING D9a-Kur-2
13973: PPUSH
13974: CALL_OW 94
// posilani_arabskych_hlidek = true ;
13978: LD_ADDR_EXP 74
13982: PUSH
13983: LD_INT 1
13985: ST_TO_ADDR
// manage_ruske_computery_zpet ;
13986: CALL 7343 0 0
// end ;
13990: LD_VAR 0 1
13994: RET
// every 0 0$1 trigger stav_omikron = 8 and get_lidi_popov_area > 0 do var pom , pom1 ;
13995: LD_EXP 39
13999: PUSH
14000: LD_INT 8
14002: EQUAL
14003: PUSH
14004: CALL 8730 0 0
14008: PUSH
14009: LD_INT 0
14011: GREATER
14012: AND
14013: IFFALSE 14271
14015: GO 14017
14017: DISABLE
14018: LD_INT 0
14020: PPUSH
14021: PPUSH
// begin pom = get_lidi_popov_area ;
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: CALL 8730 0 0
14031: ST_TO_ADDR
// pom = pom [ 1 ] ;
14032: LD_ADDR_VAR 0 1
14036: PUSH
14037: LD_VAR 0 1
14041: PUSH
14042: LD_INT 1
14044: ARRAY
14045: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_EXP 1
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 2
14065: PUSH
14066: LD_INT 21
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 21
14078: PUSH
14079: LD_INT 2
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// ComStop ( pom1 ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: CALL_OW 141
// ArDontAttackPlayer ( true ) ;
14109: LD_INT 1
14111: PPUSH
14112: CALL 28372 0 1
// InGameOn ;
14116: CALL_OW 8
// CenterOnUnits ( [ pop ] ) ;
14120: LD_EXP 28
14124: PUSH
14125: EMPTY
14126: LIST
14127: PPUSH
14128: CALL_OW 85
// ComMoveUnit ( pop , pom ) ;
14132: LD_EXP 28
14136: PPUSH
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 112
// while GetDistUnits ( pop , pom ) > 4 do
14146: LD_EXP 28
14150: PPUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 296
14160: PUSH
14161: LD_INT 4
14163: GREATER
14164: IFFALSE 14175
// wait ( 0 0$1 ) ;
14166: LD_INT 35
14168: PPUSH
14169: CALL_OW 67
14173: GO 14146
// ComTurnUnit ( pom , pop ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_EXP 28
14184: PPUSH
14185: CALL_OW 119
// CenterOnUnits ( [ pop ] ) ;
14189: LD_EXP 28
14193: PUSH
14194: EMPTY
14195: LIST
14196: PPUSH
14197: CALL_OW 85
// InGameOff ;
14201: CALL_OW 9
// DialogueOn ;
14205: CALL_OW 6
// interface_hidden := true ;
14209: LD_ADDR_OWVAR 54
14213: PUSH
14214: LD_INT 1
14216: ST_TO_ADDR
// if GetDistUnits ( pop , bur ) <= 10 then
14217: LD_EXP 28
14221: PPUSH
14222: LD_EXP 29
14226: PPUSH
14227: CALL_OW 296
14231: PUSH
14232: LD_INT 10
14234: LESSEQUAL
14235: IFFALSE 14243
// dialog_popov_s_burlakem else
14237: CALL 14274 0 0
14241: GO 14247
// dialog_popov_bez_burlaka ;
14243: CALL 14402 0 0
// stav_omikron = 9 ;
14247: LD_ADDR_EXP 39
14251: PUSH
14252: LD_INT 9
14254: ST_TO_ADDR
// interface_hidden := false ;
14255: LD_ADDR_OWVAR 54
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// DialogueOff ;
14263: CALL_OW 7
// totalni_ukonceni_mise_v_ingame_videu ;
14267: CALL 8918 0 0
// end ;
14271: PPOPN 2
14273: END
// function dialog_popov_s_burlakem ; begin
14274: LD_INT 0
14276: PPUSH
// Say ( bur , D10a-Bur-1 ) ;
14277: LD_EXP 29
14281: PPUSH
14282: LD_STRING D10a-Bur-1
14284: PPUSH
14285: CALL_OW 88
// Say ( pop , D10a-Pop-1 ) ;
14289: LD_EXP 28
14293: PPUSH
14294: LD_STRING D10a-Pop-1
14296: PPUSH
14297: CALL_OW 88
// Say ( bur , D10a-Bur-2 ) ;
14301: LD_EXP 29
14305: PPUSH
14306: LD_STRING D10a-Bur-2
14308: PPUSH
14309: CALL_OW 88
// Say ( pop , D10a-Pop-2 ) ;
14313: LD_EXP 28
14317: PPUSH
14318: LD_STRING D10a-Pop-2
14320: PPUSH
14321: CALL_OW 88
// Say ( bur , D10a-Bur-3 ) ;
14325: LD_EXP 29
14329: PPUSH
14330: LD_STRING D10a-Bur-3
14332: PPUSH
14333: CALL_OW 88
// Say ( pop , D10a-Pop-3 ) ;
14337: LD_EXP 28
14341: PPUSH
14342: LD_STRING D10a-Pop-3
14344: PPUSH
14345: CALL_OW 88
// Say ( bur , D10a-Bur-4 ) ;
14349: LD_EXP 29
14353: PPUSH
14354: LD_STRING D10a-Bur-4
14356: PPUSH
14357: CALL_OW 88
// Say ( pop , D10a-Pop-4 ) ;
14361: LD_EXP 28
14365: PPUSH
14366: LD_STRING D10a-Pop-4
14368: PPUSH
14369: CALL_OW 88
// Say ( bur , D10a-Bur-5 ) ;
14373: LD_EXP 29
14377: PPUSH
14378: LD_STRING D10a-Bur-5
14380: PPUSH
14381: CALL_OW 88
// Say ( pop , D10a-Pop-5 ) ;
14385: LD_EXP 28
14389: PPUSH
14390: LD_STRING D10a-Pop-5
14392: PPUSH
14393: CALL_OW 88
// end ;
14397: LD_VAR 0 1
14401: RET
// function dialog_popov_bez_burlaka ; var pom ; begin
14402: LD_INT 0
14404: PPUSH
14405: PPUSH
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14406: LD_ADDR_VAR 0 2
14410: PUSH
14411: LD_INT 15
14413: PPUSH
14414: LD_INT 22
14416: PUSH
14417: LD_EXP 1
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 21
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 26
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 70
14455: ST_TO_ADDR
// if pom = 0 then
14456: LD_VAR 0 2
14460: PUSH
14461: LD_INT 0
14463: EQUAL
14464: IFFALSE 14468
// exit ;
14466: GO 14588
// Say ( pom , D10b-RSol1-1 ) ;
14468: LD_VAR 0 2
14472: PPUSH
14473: LD_STRING D10b-RSol1-1
14475: PPUSH
14476: CALL_OW 88
// Say ( pop , D10b-Pop-1 ) ;
14480: LD_EXP 28
14484: PPUSH
14485: LD_STRING D10b-Pop-1
14487: PPUSH
14488: CALL_OW 88
// Say ( pom , D10b-RSol1-2 ) ;
14492: LD_VAR 0 2
14496: PPUSH
14497: LD_STRING D10b-RSol1-2
14499: PPUSH
14500: CALL_OW 88
// SayRadio ( pop , D10b-Pop-2 ) ;
14504: LD_EXP 28
14508: PPUSH
14509: LD_STRING D10b-Pop-2
14511: PPUSH
14512: CALL_OW 94
// Say ( bur , D10b-Bur-2 ) ;
14516: LD_EXP 29
14520: PPUSH
14521: LD_STRING D10b-Bur-2
14523: PPUSH
14524: CALL_OW 88
// SayRadio ( pop , D10b-Pop-3 ) ;
14528: LD_EXP 28
14532: PPUSH
14533: LD_STRING D10b-Pop-3
14535: PPUSH
14536: CALL_OW 94
// Say ( bur , D10b-Bur-3 ) ;
14540: LD_EXP 29
14544: PPUSH
14545: LD_STRING D10b-Bur-3
14547: PPUSH
14548: CALL_OW 88
// SayRadio ( pop , D10b-Pop-4 ) ;
14552: LD_EXP 28
14556: PPUSH
14557: LD_STRING D10b-Pop-4
14559: PPUSH
14560: CALL_OW 94
// Say ( bur , D10b-Bur-4 ) ;
14564: LD_EXP 29
14568: PPUSH
14569: LD_STRING D10b-Bur-4
14571: PPUSH
14572: CALL_OW 88
// SayRadio ( pop , D10b-Pop-5 ) ;
14576: LD_EXP 28
14580: PPUSH
14581: LD_STRING D10b-Pop-5
14583: PPUSH
14584: CALL_OW 94
// end ;
14588: LD_VAR 0 1
14592: RET
// every 0 0$1 trigger stav_omikron in [ 0 , 1 , 2 , 3 ] do var pom , i , upoz , pom1 , pom2 , pom3 ; var dr_pom1 , dr_pom2 , dr_pom3 ; var dr_pom ;
14593: LD_EXP 39
14597: PUSH
14598: LD_INT 0
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: IN
14616: IFFALSE 15408
14618: GO 14620
14620: DISABLE
14621: LD_INT 0
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
// begin upoz = false ;
14633: LD_ADDR_VAR 0 3
14637: PUSH
14638: LD_INT 0
14640: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , f_not , [ f_type , unit_building ] ] ) ;
14641: LD_ADDR_VAR 0 1
14645: PUSH
14646: LD_INT 17
14648: PPUSH
14649: LD_INT 22
14651: PUSH
14652: LD_EXP 1
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 3
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 70
14683: ST_TO_ADDR
// dr_pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
14684: LD_ADDR_VAR 0 10
14688: PUSH
14689: LD_INT 17
14691: PPUSH
14692: LD_INT 22
14694: PUSH
14695: LD_EXP 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 21
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 70
14722: ST_TO_ADDR
// for i in dr_pom do
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_VAR 0 10
14732: PUSH
14733: FOR_IN
14734: IFFALSE 14759
// pom = pom union UnitsInside ( i ) ;
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_VAR 0 1
14745: PUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: CALL_OW 313
14755: UNION
14756: ST_TO_ADDR
14757: GO 14733
14759: POP
14760: POP
// if pom then
14761: LD_VAR 0 1
14765: IFFALSE 14814
// for i in pom do
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_VAR 0 1
14776: PUSH
14777: FOR_IN
14778: IFFALSE 14812
// if Getside ( Attacks ( i ) ) = Amici then
14780: LD_VAR 0 2
14784: PPUSH
14785: CALL_OW 320
14789: PPUSH
14790: CALL_OW 255
14794: PUSH
14795: LD_EXP 4
14799: EQUAL
14800: IFFALSE 14810
// upoz = true ;
14802: LD_ADDR_VAR 0 3
14806: PUSH
14807: LD_INT 1
14809: ST_TO_ADDR
14810: GO 14777
14812: POP
14813: POP
// if upoz then
14814: LD_VAR 0 3
14818: IFFALSE 15407
// begin DialogueOn ;
14820: CALL_OW 6
// interface_hidden := true ;
14824: LD_ADDR_OWVAR 54
14828: PUSH
14829: LD_INT 1
14831: ST_TO_ADDR
// if IsOK ( gny ) then
14832: LD_EXP 31
14836: PPUSH
14837: CALL_OW 302
14841: IFFALSE 14869
// begin Say ( gny , D11-Gny-1 ) ;
14843: LD_EXP 31
14847: PPUSH
14848: LD_STRING D11-Gny-1
14850: PPUSH
14851: CALL_OW 88
// Say ( bur , D11-Bur-1 ) ;
14855: LD_EXP 29
14859: PPUSH
14860: LD_STRING D11-Bur-1
14862: PPUSH
14863: CALL_OW 88
// end else
14867: GO 14881
// SayRadio ( kur , D11-Kur-1 ) ;
14869: LD_EXP 27
14873: PPUSH
14874: LD_STRING D11-Kur-1
14876: PPUSH
14877: CALL_OW 94
// interface_hidden := true ;
14881: LD_ADDR_OWVAR 54
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// DialogueOff ;
14889: CALL_OW 7
// InGameOn ;
14893: CALL_OW 8
// repeat pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_INT 18
14904: PPUSH
14905: LD_INT 22
14907: PUSH
14908: LD_EXP 1
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: LD_INT 21
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 70
14939: ST_TO_ADDR
// dr_pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14940: LD_ADDR_VAR 0 7
14944: PUSH
14945: LD_INT 18
14947: PPUSH
14948: LD_INT 22
14950: PUSH
14951: LD_EXP 1
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 21
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 70
14978: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_INT 19
14986: PPUSH
14987: LD_INT 22
14989: PUSH
14990: LD_EXP 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 3
15001: PUSH
15002: LD_INT 21
15004: PUSH
15005: LD_INT 3
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: PPUSH
15017: CALL_OW 70
15021: ST_TO_ADDR
// dr_pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15022: LD_ADDR_VAR 0 8
15026: PUSH
15027: LD_INT 19
15029: PPUSH
15030: LD_INT 22
15032: PUSH
15033: LD_EXP 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 21
15044: PUSH
15045: LD_INT 3
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PPUSH
15056: CALL_OW 70
15060: ST_TO_ADDR
// pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
15061: LD_ADDR_VAR 0 6
15065: PUSH
15066: LD_INT 37
15068: PPUSH
15069: LD_INT 22
15071: PUSH
15072: LD_EXP 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: LD_INT 21
15086: PUSH
15087: LD_INT 3
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 70
15103: ST_TO_ADDR
// dr_pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15104: LD_ADDR_VAR 0 9
15108: PUSH
15109: LD_INT 37
15111: PPUSH
15112: LD_INT 22
15114: PUSH
15115: LD_EXP 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 21
15126: PUSH
15127: LD_INT 3
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PPUSH
15138: CALL_OW 70
15142: ST_TO_ADDR
// ComMoveToArea ( pom1 , om_ven_3 ) ;
15143: LD_VAR 0 4
15147: PPUSH
15148: LD_INT 31
15150: PPUSH
15151: CALL_OW 113
// for i in dr_pom1 do
15155: LD_ADDR_VAR 0 2
15159: PUSH
15160: LD_VAR 0 7
15164: PUSH
15165: FOR_IN
15166: IFFALSE 15206
// begin dr_pom = UnitsInside ( i ) ;
15168: LD_ADDR_VAR 0 10
15172: PUSH
15173: LD_VAR 0 2
15177: PPUSH
15178: CALL_OW 313
15182: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15183: LD_VAR 0 10
15187: PPUSH
15188: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_1 ) ;
15192: LD_VAR 0 10
15196: PPUSH
15197: LD_INT 29
15199: PPUSH
15200: CALL_OW 173
// end ;
15204: GO 15165
15206: POP
15207: POP
// ComMoveToArea ( pom2 , om_zone ) ;
15208: LD_VAR 0 5
15212: PPUSH
15213: LD_INT 8
15215: PPUSH
15216: CALL_OW 113
// for i in dr_pom2 do
15220: LD_ADDR_VAR 0 2
15224: PUSH
15225: LD_VAR 0 8
15229: PUSH
15230: FOR_IN
15231: IFFALSE 15271
// begin dr_pom = UnitsInside ( i ) ;
15233: LD_ADDR_VAR 0 10
15237: PUSH
15238: LD_VAR 0 2
15242: PPUSH
15243: CALL_OW 313
15247: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15248: LD_VAR 0 10
15252: PPUSH
15253: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_2 ) ;
15257: LD_VAR 0 10
15261: PPUSH
15262: LD_INT 30
15264: PPUSH
15265: CALL_OW 173
// end ;
15269: GO 15230
15271: POP
15272: POP
// ComMoveToArea ( pom3 , om_zone ) ;
15273: LD_VAR 0 6
15277: PPUSH
15278: LD_INT 8
15280: PPUSH
15281: CALL_OW 113
// for i in dr_pom3 do
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: LD_VAR 0 9
15294: PUSH
15295: FOR_IN
15296: IFFALSE 15336
// begin dr_pom = UnitsInside ( i ) ;
15298: LD_ADDR_VAR 0 10
15302: PUSH
15303: LD_VAR 0 2
15307: PPUSH
15308: CALL_OW 313
15312: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15313: LD_VAR 0 10
15317: PPUSH
15318: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_3 ) ;
15322: LD_VAR 0 10
15326: PPUSH
15327: LD_INT 31
15329: PPUSH
15330: CALL_OW 173
// end ;
15334: GO 15295
15336: POP
15337: POP
// wait ( 0 0$3 ) ;
15338: LD_INT 105
15340: PPUSH
15341: CALL_OW 67
// until not ( pom1 or pom3 or pom3 ) ;
15345: LD_VAR 0 4
15349: PUSH
15350: LD_VAR 0 6
15354: OR
15355: PUSH
15356: LD_VAR 0 6
15360: OR
15361: NOT
15362: IFFALSE 14897
// wait ( 0 0$4 ) ;
15364: LD_INT 140
15366: PPUSH
15367: CALL_OW 67
// if dr_pom3 then
15371: LD_VAR 0 9
15375: IFFALSE 15403
// for i in dr_pom3 do
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_VAR 0 9
15386: PUSH
15387: FOR_IN
15388: IFFALSE 15401
// KillUnit ( i ) ;
15390: LD_VAR 0 2
15394: PPUSH
15395: CALL_OW 66
15399: GO 15387
15401: POP
15402: POP
// InGameOff ;
15403: CALL_OW 9
// end ; enable ;
15407: ENABLE
// end ;
15408: PPOPN 10
15410: END
// every 1 trigger stav_omikron in [ 4 , 5 , 6 ] do var pom , pom1 , pom2 , i , AreaNotCleared , firstDialog ;
15411: LD_EXP 39
15415: PUSH
15416: LD_INT 4
15418: PUSH
15419: LD_INT 5
15421: PUSH
15422: LD_INT 6
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: IN
15430: IFFALSE 15590
15432: GO 15434
15434: DISABLE
15435: LD_INT 0
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
// begin enable ;
15443: ENABLE
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , 3 ] ] ) ;
15444: LD_ADDR_VAR 0 1
15448: PUSH
15449: LD_INT 20
15451: PPUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 22
15464: PUSH
15465: LD_INT 3
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 70
15480: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) ;
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: LD_INT 20
15488: PPUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 22
15501: PUSH
15502: LD_INT 3
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 70
15517: ST_TO_ADDR
// if pom or pom2 then
15518: LD_VAR 0 1
15522: PUSH
15523: LD_VAR 0 3
15527: OR
15528: IFFALSE 15590
// begin ComMoveXY ( pom , 62 , 16 ) ;
15530: LD_VAR 0 1
15534: PPUSH
15535: LD_INT 62
15537: PPUSH
15538: LD_INT 16
15540: PPUSH
15541: CALL_OW 111
// ComMoveXY ( pom2 , 62 , 16 ) ;
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_INT 62
15552: PPUSH
15553: LD_INT 16
15555: PPUSH
15556: CALL_OW 111
// if KurinDialog = 0 then
15560: LD_EXP 6
15564: PUSH
15565: LD_INT 0
15567: EQUAL
15568: IFFALSE 15590
// begin KurinDialog = 1 ;
15570: LD_ADDR_EXP 6
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// Say ( kur , D12-Kur-1 ) ;
15578: LD_EXP 27
15582: PPUSH
15583: LD_STRING D12-Kur-1
15585: PPUSH
15586: CALL_OW 88
// end ; end ; end ;
15590: PPOPN 6
15592: END
// export function hlaska_lhani ; begin
15593: LD_INT 0
15595: PPUSH
// DialogueOn ;
15596: CALL_OW 6
// interface_hidden := true ;
15600: LD_ADDR_OWVAR 54
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// Say ( kur , D6d-Kur-1 ) ;
15608: LD_EXP 27
15612: PPUSH
15613: LD_STRING D6d-Kur-1
15615: PPUSH
15616: CALL_OW 88
// interface_hidden := false ;
15620: LD_ADDR_OWVAR 54
15624: PUSH
15625: LD_INT 0
15627: ST_TO_ADDR
// DialogueOff ;
15628: CALL_OW 7
// end ;
15632: LD_VAR 0 1
15636: RET
// export function dialog_upoz ; begin
15637: LD_INT 0
15639: PPUSH
// DialogueOn ;
15640: CALL_OW 6
// interface_hidden := true ;
15644: LD_ADDR_OWVAR 54
15648: PUSH
15649: LD_INT 1
15651: ST_TO_ADDR
// SayRadio ( kur , D7a-Kur-1 ) ;
15652: LD_EXP 27
15656: PPUSH
15657: LD_STRING D7a-Kur-1
15659: PPUSH
15660: CALL_OW 94
// interface_hidden := false ;
15664: LD_ADDR_OWVAR 54
15668: PUSH
15669: LD_INT 0
15671: ST_TO_ADDR
// DialogueOff ;
15672: CALL_OW 7
// end ;
15676: LD_VAR 0 1
15680: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
15681: GO 15683
15683: DISABLE
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
15688: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15689: LD_ADDR_VAR 0 3
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_EXP 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 2
15708: PUSH
15709: LD_INT 21
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 21
15721: PUSH
15722: LD_INT 2
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 69
15742: ST_TO_ADDR
// for i in Ru_Units do
15743: LD_ADDR_VAR 0 2
15747: PUSH
15748: LD_VAR 0 3
15752: PUSH
15753: FOR_IN
15754: IFFALSE 15861
// begin pom = Attacks ( i ) ;
15756: LD_ADDR_VAR 0 1
15760: PUSH
15761: LD_VAR 0 2
15765: PPUSH
15766: CALL_OW 320
15770: ST_TO_ADDR
// if pom <> 0 then
15771: LD_VAR 0 1
15775: PUSH
15776: LD_INT 0
15778: NONEQUAL
15779: IFFALSE 15821
// if Getside ( pom ) in [ You2 , You3 ] then
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 255
15790: PUSH
15791: LD_EXP 2
15795: PUSH
15796: LD_EXP 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: IN
15805: IFFALSE 15821
// konstanta_utoceni = konstanta_utoceni + 1 ;
15807: LD_ADDR_EXP 49
15811: PUSH
15812: LD_EXP 49
15816: PUSH
15817: LD_INT 1
15819: PLUS
15820: ST_TO_ADDR
// if pom = pop or pom = kur then
15821: LD_VAR 0 1
15825: PUSH
15826: LD_EXP 28
15830: EQUAL
15831: PUSH
15832: LD_VAR 0 1
15836: PUSH
15837: LD_EXP 27
15841: EQUAL
15842: OR
15843: IFFALSE 15859
// konstanta_utoceni = konstanta_utoceni + 10 ;
15845: LD_ADDR_EXP 49
15849: PUSH
15850: LD_EXP 49
15854: PUSH
15855: LD_INT 10
15857: PLUS
15858: ST_TO_ADDR
// end ;
15859: GO 15753
15861: POP
15862: POP
// if konstanta_utoceni < 10 then
15863: LD_EXP 49
15867: PUSH
15868: LD_INT 10
15870: LESS
15871: IFFALSE 15874
// enable ;
15873: ENABLE
// end ;
15874: PPOPN 3
15876: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
15877: LD_EXP 49
15881: PUSH
15882: LD_INT 10
15884: GREATEREQUAL
15885: IFFALSE 15894
15887: GO 15889
15889: DISABLE
// begin konec_mise_utok ;
15890: CALL 1474 0 0
// end ;
15894: END
// export function dialog_scholtze_umrel ; var i , pom , pom1 ; begin
15895: LD_INT 0
15897: PPUSH
15898: PPUSH
15899: PPUSH
15900: PPUSH
// pom = 0 ;
15901: LD_ADDR_VAR 0 3
15905: PUSH
15906: LD_INT 0
15908: ST_TO_ADDR
// DialogueOn ;
15909: CALL_OW 6
// interface_hidden := true ;
15913: LD_ADDR_OWVAR 54
15917: PUSH
15918: LD_INT 1
15920: ST_TO_ADDR
// ForceSay ( schol2 , D4b-Sch-1 ) ;
15921: LD_EXP 34
15925: PPUSH
15926: LD_STRING D4b-Sch-1
15928: PPUSH
15929: CALL_OW 91
// pom = FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
15933: LD_ADDR_VAR 0 3
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_EXP 4
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 21
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 69
15968: ST_TO_ADDR
// pom1 = NearestUnitToUnit ( pom , schol2 ) ;
15969: LD_ADDR_VAR 0 4
15973: PUSH
15974: LD_VAR 0 3
15978: PPUSH
15979: LD_EXP 34
15983: PPUSH
15984: CALL_OW 74
15988: ST_TO_ADDR
// if pom1 <> 0 then
15989: LD_VAR 0 4
15993: PUSH
15994: LD_INT 0
15996: NONEQUAL
15997: IFFALSE 16011
// SayNoName ( pom1 , D4b-Sol1-1 ) ;
15999: LD_VAR 0 4
16003: PPUSH
16004: LD_STRING D4b-Sol1-1
16006: PPUSH
16007: CALL_OW 90
// pom1 = NearestUnitToUnit ( pom diff pom1 , pom1 ) ;
16011: LD_ADDR_VAR 0 4
16015: PUSH
16016: LD_VAR 0 3
16020: PUSH
16021: LD_VAR 0 4
16025: DIFF
16026: PPUSH
16027: LD_VAR 0 4
16031: PPUSH
16032: CALL_OW 74
16036: ST_TO_ADDR
// SayNoName ( pom1 , D4b-Sol2-1 ) ;
16037: LD_VAR 0 4
16041: PPUSH
16042: LD_STRING D4b-Sol2-1
16044: PPUSH
16045: CALL_OW 90
// ForceSay ( schol2 , D4b-Sch-2 ) ;
16049: LD_EXP 34
16053: PPUSH
16054: LD_STRING D4b-Sch-2
16056: PPUSH
16057: CALL_OW 91
// Say ( bur , D4b-Bur-2 ) ;
16061: LD_EXP 29
16065: PPUSH
16066: LD_STRING D4b-Bur-2
16068: PPUSH
16069: CALL_OW 88
// SetLives ( schol2 , 0 ) ;
16073: LD_EXP 34
16077: PPUSH
16078: LD_INT 0
16080: PPUSH
16081: CALL_OW 234
// ChangeMissionObjectives ( MScholtzeDel ) ;
16085: LD_STRING MScholtzeDel
16087: PPUSH
16088: CALL_OW 337
// interface_hidden := false ;
16092: LD_ADDR_OWVAR 54
16096: PUSH
16097: LD_INT 0
16099: ST_TO_ADDR
// DialogueOff ;
16100: CALL_OW 7
// end ;
16104: LD_VAR 0 1
16108: RET
// on UnitGoesToRed ( un ) do begin if un = schol2 then
16109: LD_VAR 0 1
16113: PUSH
16114: LD_EXP 34
16118: EQUAL
16119: IFFALSE 16135
// if kecy_scholtze_nalezen then
16121: LD_EXP 44
16125: IFFALSE 16131
// exit else
16127: GO 16135
16129: GO 16135
// dialog_scholtze_umrel ;
16131: CALL 15895 0 0
// end ;
16135: PPOPN 1
16137: END
// every 0 0$2 trigger FilterUnitsInArea ( noTracksArea , [ [ f_side , You ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] , [ f_chassis , us_light_wheeled ] , [ f_chassis , us_medium_wheeled ] ] ] ) and stav_omikron in [ 0 , 1 , 2 , 3 ] do
16138: LD_INT 53
16140: PPUSH
16141: LD_INT 22
16143: PUSH
16144: LD_EXP 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 2
16155: PUSH
16156: LD_INT 31
16158: PUSH
16159: LD_INT 21
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 31
16168: PUSH
16169: LD_INT 23
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 31
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 31
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 70
16211: PUSH
16212: LD_EXP 39
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: LD_INT 1
16222: PUSH
16223: LD_INT 2
16225: PUSH
16226: LD_INT 3
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: IN
16235: AND
16236: IFFALSE 16263
16238: GO 16240
16240: DISABLE
// begin CenterOnXY ( 38 , 58 ) ;
16241: LD_INT 38
16243: PPUSH
16244: LD_INT 58
16246: PPUSH
16247: CALL_OW 84
// Say ( bur , D5a-Bur-1 ) ;
16251: LD_EXP 29
16255: PPUSH
16256: LD_STRING D5a-Bur-1
16258: PPUSH
16259: CALL_OW 88
// end ;
16263: END
// on BuildingStarted ( b , builder ) do begin if b in FilterUnitsInArea ( restrictedArea , [ f_side , 3 ] ) then
16264: LD_VAR 0 1
16268: PUSH
16269: LD_INT 54
16271: PPUSH
16272: LD_INT 22
16274: PUSH
16275: LD_INT 3
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PPUSH
16282: CALL_OW 70
16286: IN
16287: IFFALSE 16298
// RemoveUnit ( b ) ;
16289: LD_VAR 0 1
16293: PPUSH
16294: CALL_OW 64
// end ;
16298: PPOPN 2
16300: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) > 0 do var pom ;
16301: LD_INT 22
16303: PUSH
16304: LD_EXP 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 30
16315: PUSH
16316: LD_INT 26
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PPUSH
16327: CALL_OW 69
16331: PUSH
16332: LD_INT 0
16334: GREATER
16335: IFFALSE 16427
16337: GO 16339
16339: DISABLE
16340: LD_INT 0
16342: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_mine ] ] ) ;
16343: LD_ADDR_VAR 0 1
16347: PUSH
16348: LD_INT 22
16350: PUSH
16351: LD_EXP 1
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 30
16362: PUSH
16363: LD_INT 29
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PPUSH
16374: CALL_OW 69
16378: ST_TO_ADDR
// if pom > 0 then
16379: LD_VAR 0 1
16383: PUSH
16384: LD_INT 0
16386: GREATER
16387: IFFALSE 16426
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
16389: LD_VAR 0 1
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: CALL_OW 304
16402: PUSH
16403: LD_INT 0
16405: NONEQUAL
16406: IFFALSE 16417
// wait ( 0 0$1 ) ;
16408: LD_INT 35
16410: PPUSH
16411: CALL_OW 67
16415: GO 16389
// Hint ( PowerPlant ) ;
16417: LD_STRING PowerPlant
16419: PPUSH
16420: CALL_OW 339
// end else
16424: GO 16427
// enable ;
16426: ENABLE
// end ;
16427: PPOPN 1
16429: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ; var pocet ;
16430: LD_INT 22
16432: PUSH
16433: LD_EXP 1
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 30
16444: PUSH
16445: LD_INT 0
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: PUSH
16461: LD_INT 1
16463: GREATER
16464: IFFALSE 16624
16466: GO 16468
16468: DISABLE
16469: LD_INT 0
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
// begin pocet = 0 ;
16475: LD_ADDR_VAR 0 4
16479: PUSH
16480: LD_INT 0
16482: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
16483: LD_ADDR_VAR 0 1
16487: PUSH
16488: LD_INT 22
16490: PUSH
16491: LD_EXP 1
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: ST_TO_ADDR
// pom1 = pom ;
16519: LD_ADDR_VAR 0 2
16523: PUSH
16524: LD_VAR 0 1
16528: ST_TO_ADDR
// while pocet < 2 do
16529: LD_VAR 0 4
16533: PUSH
16534: LD_INT 2
16536: LESS
16537: IFFALSE 16617
// begin for i in pom do
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_VAR 0 1
16548: PUSH
16549: FOR_IN
16550: IFFALSE 16596
// if not IsConstructed ( i ) then
16552: LD_VAR 0 3
16556: PPUSH
16557: CALL_OW 304
16561: NOT
16562: IFFALSE 16594
// begin pocet = pocet + 1 ;
16564: LD_ADDR_VAR 0 4
16568: PUSH
16569: LD_VAR 0 4
16573: PUSH
16574: LD_INT 1
16576: PLUS
16577: ST_TO_ADDR
// pom1 = pom1 diff i ;
16578: LD_ADDR_VAR 0 2
16582: PUSH
16583: LD_VAR 0 2
16587: PUSH
16588: LD_VAR 0 3
16592: DIFF
16593: ST_TO_ADDR
// end ;
16594: GO 16549
16596: POP
16597: POP
// pom = pom1 ;
16598: LD_ADDR_VAR 0 1
16602: PUSH
16603: LD_VAR 0 2
16607: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16608: LD_INT 70
16610: PPUSH
16611: CALL_OW 67
// end ;
16615: GO 16529
// Hint ( Transport1 ) ;
16617: LD_STRING Transport1
16619: PPUSH
16620: CALL_OW 339
// end ;
16624: PPOPN 4
16626: END
// export function chmo_6 ; begin
16627: LD_INT 0
16629: PPUSH
// ChangeMissionObjectives ( M6a ) ;
16630: LD_STRING M6a
16632: PPUSH
16633: CALL_OW 337
// end ;
16637: LD_VAR 0 1
16641: RET
// export function query_refuel ; begin
16642: LD_INT 0
16644: PPUSH
// Query ( QRefuel ) ;
16645: LD_STRING QRefuel
16647: PPUSH
16648: CALL_OW 97
// end ;
16652: LD_VAR 0 1
16656: RET
// every 0 0$6 do var pom ;
16657: GO 16659
16659: DISABLE
16660: LD_INT 0
16662: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
16663: LD_ADDR_VAR 0 1
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_EXP 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 21
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: ST_TO_ADDR
// if postavenych_aut >= pom then
16699: LD_EXP 47
16703: PUSH
16704: LD_VAR 0 1
16708: GREATEREQUAL
16709: IFFALSE 16720
// ChangeMissionObjectives ( M3a ) else
16711: LD_STRING M3a
16713: PPUSH
16714: CALL_OW 337
16718: GO 16721
// enable ;
16720: ENABLE
// end ;
16721: PPOPN 1
16723: END
// export function hint_cerpaci_auta ; begin
16724: LD_INT 0
16726: PPUSH
// Hint ( refuelingtrucks ) ;
16727: LD_STRING refuelingtrucks
16729: PPUSH
16730: CALL_OW 339
// end ; end_of_file
16734: LD_VAR 0 1
16738: RET
// export AMERICKA_POMOC_HLIDCE_LIST ; export AMERICKE_POSILY1_LIST ; export AMERICKE_POSILY2_LIST ; export AMERICKE_POSILY3_LIST ; export AMERICKE_POSILY4_LIST ; export AMERICKE_POSILY11_LIST ; export RUSKE_POSILY_NA_OMICRON_LIST ; export RUSKE_POSILY_RIDICI_LIST ; export RU_posily_na_utek ; export RUSI_CERPACI_AUTA_LIST ; export ARABI_KAMIKADZE_LIST ; export ARABI_PRVNI_VLNA ; export ARABI_FLAME_LIST ; export ARABI_SELF_AUTA ; export ARABI_VOJACI ; export ARABI_doraz ; export ARABI_KIROV_POSILY ; export Arabi_komanda1 ; export Arabi_komanda2 ; export Arabi_komanda3 ; export Arabi_komanda4 ; export other_survivors_mise_2 ; var ah , av ; export function get_sex ; begin
16739: LD_INT 0
16741: PPUSH
// if Prob ( 20 ) then
16742: LD_INT 20
16744: PPUSH
16745: CALL_OW 13
16749: IFFALSE 16761
// result = sex_female else
16751: LD_ADDR_VAR 0 1
16755: PUSH
16756: LD_INT 2
16758: ST_TO_ADDR
16759: GO 16769
// result = sex_male ;
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: LD_INT 1
16768: ST_TO_ADDR
// end ;
16769: LD_VAR 0 1
16773: RET
// export function get_human ( sex , clas , level , name ) ; begin
16774: LD_INT 0
16776: PPUSH
// PrepareHuman ( sex , clas , level ) ;
16777: LD_VAR 0 1
16781: PPUSH
16782: LD_VAR 0 2
16786: PPUSH
16787: LD_VAR 0 3
16791: PPUSH
16792: CALL_OW 380
// hc_name := name ;
16796: LD_ADDR_OWVAR 26
16800: PUSH
16801: LD_VAR 0 4
16805: ST_TO_ADDR
// result := CreateHuman ;
16806: LD_ADDR_VAR 0 5
16810: PUSH
16811: CALL_OW 44
16815: ST_TO_ADDR
// end ;
16816: LD_VAR 0 5
16820: RET
// export function create_americka_pomoc_hlidce ; var pom ; begin
16821: LD_INT 0
16823: PPUSH
16824: PPUSH
// pom = [ ] ;
16825: LD_ADDR_VAR 0 2
16829: PUSH
16830: EMPTY
16831: ST_TO_ADDR
// uc_side = Amici ;
16832: LD_ADDR_OWVAR 20
16836: PUSH
16837: LD_EXP 4
16841: ST_TO_ADDR
// uc_nation = nation_american ;
16842: LD_ADDR_OWVAR 21
16846: PUSH
16847: LD_INT 1
16849: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
16850: LD_ADDR_LOC 23
16854: PUSH
16855: CALL 16739 0 0
16859: PPUSH
16860: LD_INT 3
16862: PPUSH
16863: LD_EXP 13
16867: PUSH
16868: LD_OWVAR 67
16872: ARRAY
16873: PPUSH
16874: LD_STRING 
16876: PPUSH
16877: CALL 16774 0 4
16881: ST_TO_ADDR
// case difficulty of 1 :
16882: LD_OWVAR 67
16886: PUSH
16887: LD_INT 1
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16930
16895: POP
// begin vc_chassis = us_light_wheeled ;
16896: LD_ADDR_OWVAR 37
16900: PUSH
16901: LD_INT 1
16903: ST_TO_ADDR
// vc_control = control_manual ;
16904: LD_ADDR_OWVAR 38
16908: PUSH
16909: LD_INT 1
16911: ST_TO_ADDR
// vc_engine = engine_solar ;
16912: LD_ADDR_OWVAR 39
16916: PUSH
16917: LD_INT 2
16919: ST_TO_ADDR
// vc_weapon = us_light_gun ;
16920: LD_ADDR_OWVAR 40
16924: PUSH
16925: LD_INT 3
16927: ST_TO_ADDR
// end ; 2 :
16928: GO 17017
16930: LD_INT 2
16932: DOUBLE
16933: EQUAL
16934: IFTRUE 16938
16936: GO 16973
16938: POP
// begin vc_chassis = us_light_wheeled ;
16939: LD_ADDR_OWVAR 37
16943: PUSH
16944: LD_INT 1
16946: ST_TO_ADDR
// vc_control = control_manual ;
16947: LD_ADDR_OWVAR 38
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// vc_engine = engine_solar ;
16955: LD_ADDR_OWVAR 39
16959: PUSH
16960: LD_INT 2
16962: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
16963: LD_ADDR_OWVAR 40
16967: PUSH
16968: LD_INT 2
16970: ST_TO_ADDR
// end ; 3 :
16971: GO 17017
16973: LD_INT 3
16975: DOUBLE
16976: EQUAL
16977: IFTRUE 16981
16979: GO 17016
16981: POP
// begin vc_chassis = us_medium_wheeled ;
16982: LD_ADDR_OWVAR 37
16986: PUSH
16987: LD_INT 2
16989: ST_TO_ADDR
// vc_control = control_manual ;
16990: LD_ADDR_OWVAR 38
16994: PUSH
16995: LD_INT 1
16997: ST_TO_ADDR
// vc_engine = engine_combustion ;
16998: LD_ADDR_OWVAR 39
17002: PUSH
17003: LD_INT 1
17005: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
17006: LD_ADDR_OWVAR 40
17010: PUSH
17011: LD_INT 4
17013: ST_TO_ADDR
// end ; end ;
17014: GO 17017
17016: POP
// av = CreateVehicle ;
17017: LD_ADDR_LOC 24
17021: PUSH
17022: CALL_OW 45
17026: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
17027: LD_LOC 23
17031: PPUSH
17032: LD_LOC 24
17036: PPUSH
17037: CALL_OW 52
// pom = pom ^ av ;
17041: LD_ADDR_VAR 0 2
17045: PUSH
17046: LD_VAR 0 2
17050: PUSH
17051: LD_LOC 24
17055: ADD
17056: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17057: LD_ADDR_LOC 23
17061: PUSH
17062: CALL 16739 0 0
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: LD_EXP 13
17074: PUSH
17075: LD_OWVAR 67
17079: ARRAY
17080: PPUSH
17081: LD_STRING 
17083: PPUSH
17084: CALL 16774 0 4
17088: ST_TO_ADDR
// pom = pom ^ ah ;
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_VAR 0 2
17098: PUSH
17099: LD_LOC 23
17103: ADD
17104: ST_TO_ADDR
// if pom > 2 then
17105: LD_VAR 0 2
17109: PUSH
17110: LD_INT 2
17112: GREATER
17113: IFFALSE 17159
// pom = pom ^ ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17115: LD_ADDR_VAR 0 2
17119: PUSH
17120: LD_VAR 0 2
17124: PUSH
17125: LD_LOC 23
17129: ADD
17130: PUSH
17131: CALL 16739 0 0
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: LD_EXP 13
17143: PUSH
17144: LD_OWVAR 67
17148: ARRAY
17149: PPUSH
17150: LD_STRING 
17152: PPUSH
17153: CALL 16774 0 4
17157: EQUAL
17158: ST_TO_ADDR
// AMERICKA_POMOC_HLIDCE_LIST = pom ;
17159: LD_ADDR_EXP 50
17163: PUSH
17164: LD_VAR 0 2
17168: ST_TO_ADDR
// end ;
17169: LD_VAR 0 1
17173: RET
// export function set_skily_amikum ; var pom , i ; begin
17174: LD_INT 0
17176: PPUSH
17177: PPUSH
17178: PPUSH
// pom = [ Am_sol1 , Am_sol2 , Am_sol3 , Am_sol4 , Am_vb1 , Am_vb2 , Am_vb3 , Am_vb4 ] ;
17179: LD_ADDR_VAR 0 2
17183: PUSH
17184: LD_INT 38
17186: PUSH
17187: LD_INT 39
17189: PUSH
17190: LD_INT 40
17192: PUSH
17193: LD_INT 41
17195: PUSH
17196: LD_INT 29
17198: PUSH
17199: LD_INT 30
17201: PUSH
17202: LD_INT 31
17204: PUSH
17205: LD_INT 32
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: ST_TO_ADDR
// for i in pom do
17218: LD_ADDR_VAR 0 3
17222: PUSH
17223: LD_VAR 0 2
17227: PUSH
17228: FOR_IN
17229: IFFALSE 17256
// uprav_cloveka ( i , class_soldier , levely_amici [ difficulty ] ) ;
17231: LD_VAR 0 3
17235: PPUSH
17236: LD_INT 1
17238: PPUSH
17239: LD_EXP 13
17243: PUSH
17244: LD_OWVAR 67
17248: ARRAY
17249: PPUSH
17250: CALL 17571 0 3
17254: GO 17228
17256: POP
17257: POP
// pom = [ Am_me1 , Am_me2 , Am_me3 ] ;
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_INT 33
17265: PUSH
17266: LD_INT 34
17268: PUSH
17269: LD_INT 35
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: LIST
17276: ST_TO_ADDR
// for i in pom do
17277: LD_ADDR_VAR 0 3
17281: PUSH
17282: LD_VAR 0 2
17286: PUSH
17287: FOR_IN
17288: IFFALSE 17315
// uprav_cloveka ( i , class_mechanic , levely_amici [ difficulty ] ) ;
17290: LD_VAR 0 3
17294: PPUSH
17295: LD_INT 3
17297: PPUSH
17298: LD_EXP 13
17302: PUSH
17303: LD_OWVAR 67
17307: ARRAY
17308: PPUSH
17309: CALL 17571 0 3
17313: GO 17287
17315: POP
17316: POP
// uprav_cloveka ( Am_sci1 , class_scientistic , levely_amici [ difficulty ] ) ;
17317: LD_INT 37
17319: PPUSH
17320: LD_INT 4
17322: PPUSH
17323: LD_EXP 13
17327: PUSH
17328: LD_OWVAR 67
17332: ARRAY
17333: PPUSH
17334: CALL 17571 0 3
// uprav_cloveka ( Am_eng1 , class_engineer , levely_amici [ difficulty ] ) ;
17338: LD_INT 36
17340: PPUSH
17341: LD_INT 2
17343: PPUSH
17344: LD_EXP 13
17348: PUSH
17349: LD_OWVAR 67
17353: ARRAY
17354: PPUSH
17355: CALL 17571 0 3
// end ;
17359: LD_VAR 0 1
17363: RET
// function set_skills ( un , skills ) ; begin
17364: LD_INT 0
17366: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
17367: LD_VAR 0 1
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: LD_VAR 0 2
17379: PUSH
17380: LD_INT 1
17382: ARRAY
17383: PPUSH
17384: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 2
17395: PPUSH
17396: LD_VAR 0 2
17400: PUSH
17401: LD_INT 2
17403: ARRAY
17404: PPUSH
17405: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
17409: LD_VAR 0 1
17413: PPUSH
17414: LD_INT 3
17416: PPUSH
17417: LD_VAR 0 2
17421: PUSH
17422: LD_INT 3
17424: ARRAY
17425: PPUSH
17426: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_INT 4
17437: PPUSH
17438: LD_VAR 0 2
17442: PUSH
17443: LD_INT 4
17445: ARRAY
17446: PPUSH
17447: CALL_OW 237
// end ;
17451: LD_VAR 0 3
17455: RET
// function get_skills ( un ) ; var pom3 , pom4 , pom5 , pom6 ; begin
17456: LD_INT 0
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
17462: PPUSH
// pom3 := GetSkill ( un , skill_combat ) ;
17463: LD_ADDR_VAR 0 3
17467: PUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: CALL_OW 259
17480: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_engineering ) ;
17481: LD_ADDR_VAR 0 4
17485: PUSH
17486: LD_VAR 0 1
17490: PPUSH
17491: LD_INT 2
17493: PPUSH
17494: CALL_OW 259
17498: ST_TO_ADDR
// pom5 := GetSkill ( un , skill_mechanical ) ;
17499: LD_ADDR_VAR 0 5
17503: PUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: LD_INT 3
17511: PPUSH
17512: CALL_OW 259
17516: ST_TO_ADDR
// pom6 := GetSkill ( un , skill_scientistic ) ;
17517: LD_ADDR_VAR 0 6
17521: PUSH
17522: LD_VAR 0 1
17526: PPUSH
17527: LD_INT 4
17529: PPUSH
17530: CALL_OW 259
17534: ST_TO_ADDR
// result := [ pom3 , pom4 , pom5 , pom6 ] end ;
17535: LD_ADDR_VAR 0 2
17539: PUSH
17540: LD_VAR 0 3
17544: PUSH
17545: LD_VAR 0 4
17549: PUSH
17550: LD_VAR 0 5
17554: PUSH
17555: LD_VAR 0 6
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: ST_TO_ADDR
17566: LD_VAR 0 2
17570: RET
// function uprav_cloveka ( un , clas , lev ) ; var pom1 ; begin
17571: LD_INT 0
17573: PPUSH
17574: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
17575: LD_INT 1
17577: PPUSH
17578: LD_VAR 0 2
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_STRING 
17590: PPUSH
17591: CALL 17653 0 4
// ah = CreateHuman ;
17595: LD_ADDR_LOC 23
17599: PUSH
17600: CALL_OW 44
17604: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
17605: LD_ADDR_VAR 0 5
17609: PUSH
17610: LD_LOC 23
17614: PPUSH
17615: CALL 17456 0 1
17619: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
17620: LD_VAR 0 1
17624: PPUSH
17625: LD_LOC 23
17629: PPUSH
17630: CALL 17456 0 1
17634: PPUSH
17635: CALL 17364 0 2
// DestroyUnit ( ah ) ;
17639: LD_LOC 23
17643: PPUSH
17644: CALL_OW 65
// end ;
17648: LD_VAR 0 4
17652: RET
// function prepare_human ( sex , clas , level , name ) ; begin
17653: LD_INT 0
17655: PPUSH
// PrepareHuman ( sex , clas , level ) ;
17656: LD_VAR 0 1
17660: PPUSH
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: CALL_OW 380
// hc_name := name ;
17675: LD_ADDR_OWVAR 26
17679: PUSH
17680: LD_VAR 0 4
17684: ST_TO_ADDR
// end ;
17685: LD_VAR 0 5
17689: RET
// export function create_americke_posily ; var pom ; begin
17690: LD_INT 0
17692: PPUSH
17693: PPUSH
// uc_side = Amici ;
17694: LD_ADDR_OWVAR 20
17698: PUSH
17699: LD_EXP 4
17703: ST_TO_ADDR
// uc_nation = nation_american ;
17704: LD_ADDR_OWVAR 21
17708: PUSH
17709: LD_INT 1
17711: ST_TO_ADDR
// pom = [ ] ;
17712: LD_ADDR_VAR 0 2
17716: PUSH
17717: EMPTY
17718: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: LD_VAR 0 2
17728: PUSH
17729: CALL 16739 0 0
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: LD_EXP 13
17741: PUSH
17742: LD_OWVAR 67
17746: ARRAY
17747: PPUSH
17748: LD_STRING 
17750: PPUSH
17751: CALL 16774 0 4
17755: ADD
17756: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17757: LD_ADDR_VAR 0 2
17761: PUSH
17762: LD_VAR 0 2
17766: PUSH
17767: CALL 16739 0 0
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_EXP 13
17779: PUSH
17780: LD_OWVAR 67
17784: ARRAY
17785: PPUSH
17786: LD_STRING 
17788: PPUSH
17789: CALL 16774 0 4
17793: ADD
17794: ST_TO_ADDR
// AMERICKE_POSILY1_LIST = pom ;
17795: LD_ADDR_EXP 51
17799: PUSH
17800: LD_VAR 0 2
17804: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17805: LD_ADDR_VAR 0 2
17809: PUSH
17810: CALL 16739 0 0
17814: PPUSH
17815: LD_INT 1
17817: PPUSH
17818: LD_EXP 13
17822: PUSH
17823: LD_OWVAR 67
17827: ARRAY
17828: PPUSH
17829: LD_STRING 
17831: PPUSH
17832: CALL 16774 0 4
17836: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17837: LD_ADDR_VAR 0 2
17841: PUSH
17842: LD_VAR 0 2
17846: PUSH
17847: CALL 16739 0 0
17851: PPUSH
17852: LD_INT 3
17854: PPUSH
17855: LD_EXP 13
17859: PUSH
17860: LD_OWVAR 67
17864: ARRAY
17865: PPUSH
17866: LD_STRING 
17868: PPUSH
17869: CALL 16774 0 4
17873: ADD
17874: ST_TO_ADDR
// if pom > 1 then
17875: LD_VAR 0 2
17879: PUSH
17880: LD_INT 1
17882: GREATER
17883: IFFALSE 17923
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
17885: LD_ADDR_VAR 0 2
17889: PUSH
17890: LD_VAR 0 2
17894: PUSH
17895: CALL 16739 0 0
17899: PPUSH
17900: LD_INT 4
17902: PPUSH
17903: LD_EXP 13
17907: PUSH
17908: LD_OWVAR 67
17912: ARRAY
17913: PPUSH
17914: LD_STRING 
17916: PPUSH
17917: CALL 16774 0 4
17921: ADD
17922: ST_TO_ADDR
// if pom > 2 then
17923: LD_VAR 0 2
17927: PUSH
17928: LD_INT 2
17930: GREATER
17931: IFFALSE 17971
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17933: LD_ADDR_VAR 0 2
17937: PUSH
17938: LD_VAR 0 2
17942: PUSH
17943: CALL 16739 0 0
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: LD_EXP 13
17955: PUSH
17956: LD_OWVAR 67
17960: ARRAY
17961: PPUSH
17962: LD_STRING 
17964: PPUSH
17965: CALL 16774 0 4
17969: ADD
17970: ST_TO_ADDR
// AMERICKE_POSILY2_LIST = pom ;
17971: LD_ADDR_EXP 52
17975: PUSH
17976: LD_VAR 0 2
17980: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17981: LD_ADDR_VAR 0 2
17985: PUSH
17986: CALL 16739 0 0
17990: PPUSH
17991: LD_INT 1
17993: PPUSH
17994: LD_EXP 13
17998: PUSH
17999: LD_OWVAR 67
18003: ARRAY
18004: PPUSH
18005: LD_STRING 
18007: PPUSH
18008: CALL 16774 0 4
18012: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18013: LD_ADDR_VAR 0 2
18017: PUSH
18018: LD_VAR 0 2
18022: PUSH
18023: CALL 16739 0 0
18027: PPUSH
18028: LD_INT 1
18030: PPUSH
18031: LD_EXP 13
18035: PUSH
18036: LD_OWVAR 67
18040: ARRAY
18041: PPUSH
18042: LD_STRING 
18044: PPUSH
18045: CALL 16774 0 4
18049: ADD
18050: ST_TO_ADDR
// if pom = 1 then
18051: LD_VAR 0 2
18055: PUSH
18056: LD_INT 1
18058: EQUAL
18059: IFFALSE 18099
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18061: LD_ADDR_VAR 0 2
18065: PUSH
18066: LD_VAR 0 2
18070: PUSH
18071: CALL 16739 0 0
18075: PPUSH
18076: LD_INT 3
18078: PPUSH
18079: LD_EXP 13
18083: PUSH
18084: LD_OWVAR 67
18088: ARRAY
18089: PPUSH
18090: LD_STRING 
18092: PPUSH
18093: CALL 16774 0 4
18097: ADD
18098: ST_TO_ADDR
// if pom = 2 then
18099: LD_VAR 0 2
18103: PUSH
18104: LD_INT 2
18106: EQUAL
18107: IFFALSE 18213
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18109: LD_ADDR_LOC 23
18113: PUSH
18114: CALL 16739 0 0
18118: PPUSH
18119: LD_INT 3
18121: PPUSH
18122: LD_EXP 13
18126: PUSH
18127: LD_OWVAR 67
18131: ARRAY
18132: PPUSH
18133: LD_STRING 
18135: PPUSH
18136: CALL 16774 0 4
18140: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
18141: LD_ADDR_OWVAR 37
18145: PUSH
18146: LD_INT 1
18148: ST_TO_ADDR
// vc_control = control_manual ;
18149: LD_ADDR_OWVAR 38
18153: PUSH
18154: LD_INT 1
18156: ST_TO_ADDR
// vc_engine = engine_solar ;
18157: LD_ADDR_OWVAR 39
18161: PUSH
18162: LD_INT 2
18164: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18165: LD_ADDR_OWVAR 40
18169: PUSH
18170: LD_INT 2
18172: ST_TO_ADDR
// av = CreateVehicle ;
18173: LD_ADDR_LOC 24
18177: PUSH
18178: CALL_OW 45
18182: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18183: LD_LOC 23
18187: PPUSH
18188: LD_LOC 24
18192: PPUSH
18193: CALL_OW 52
// pom = pom ^ av ;
18197: LD_ADDR_VAR 0 2
18201: PUSH
18202: LD_VAR 0 2
18206: PUSH
18207: LD_LOC 24
18211: ADD
18212: ST_TO_ADDR
// end ; if pom = 3 then
18213: LD_VAR 0 2
18217: PUSH
18218: LD_INT 3
18220: EQUAL
18221: IFFALSE 18327
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18223: LD_ADDR_LOC 23
18227: PUSH
18228: CALL 16739 0 0
18232: PPUSH
18233: LD_INT 3
18235: PPUSH
18236: LD_EXP 13
18240: PUSH
18241: LD_OWVAR 67
18245: ARRAY
18246: PPUSH
18247: LD_STRING 
18249: PPUSH
18250: CALL 16774 0 4
18254: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
18255: LD_ADDR_OWVAR 37
18259: PUSH
18260: LD_INT 2
18262: ST_TO_ADDR
// vc_control = control_manual ;
18263: LD_ADDR_OWVAR 38
18267: PUSH
18268: LD_INT 1
18270: ST_TO_ADDR
// vc_engine = engine_solar ;
18271: LD_ADDR_OWVAR 39
18275: PUSH
18276: LD_INT 2
18278: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
18279: LD_ADDR_OWVAR 40
18283: PUSH
18284: LD_INT 4
18286: ST_TO_ADDR
// av = CreateVehicle ;
18287: LD_ADDR_LOC 24
18291: PUSH
18292: CALL_OW 45
18296: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18297: LD_LOC 23
18301: PPUSH
18302: LD_LOC 24
18306: PPUSH
18307: CALL_OW 52
// pom = pom ^ av ;
18311: LD_ADDR_VAR 0 2
18315: PUSH
18316: LD_VAR 0 2
18320: PUSH
18321: LD_LOC 24
18325: ADD
18326: ST_TO_ADDR
// end ; AMERICKE_POSILY3_LIST = pom ;
18327: LD_ADDR_EXP 53
18331: PUSH
18332: LD_VAR 0 2
18336: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18337: LD_ADDR_VAR 0 2
18341: PUSH
18342: CALL 16739 0 0
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: LD_EXP 13
18354: PUSH
18355: LD_OWVAR 67
18359: ARRAY
18360: PPUSH
18361: LD_STRING 
18363: PPUSH
18364: CALL 16774 0 4
18368: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18369: LD_ADDR_VAR 0 2
18373: PUSH
18374: LD_VAR 0 2
18378: PUSH
18379: CALL 16739 0 0
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: LD_EXP 13
18391: PUSH
18392: LD_OWVAR 67
18396: ARRAY
18397: PPUSH
18398: LD_STRING 
18400: PPUSH
18401: CALL 16774 0 4
18405: ADD
18406: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18407: LD_ADDR_VAR 0 2
18411: PUSH
18412: LD_VAR 0 2
18416: PUSH
18417: CALL 16739 0 0
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: LD_EXP 13
18429: PUSH
18430: LD_OWVAR 67
18434: ARRAY
18435: PUSH
18436: LD_INT 1
18438: MINUS
18439: PPUSH
18440: LD_STRING 
18442: PPUSH
18443: CALL 16774 0 4
18447: ADD
18448: ST_TO_ADDR
// AMERICKE_POSILY4_LIST = pom ;
18449: LD_ADDR_EXP 54
18453: PUSH
18454: LD_VAR 0 2
18458: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18459: LD_ADDR_VAR 0 2
18463: PUSH
18464: CALL 16739 0 0
18468: PPUSH
18469: LD_INT 1
18471: PPUSH
18472: LD_EXP 13
18476: PUSH
18477: LD_OWVAR 67
18481: ARRAY
18482: PPUSH
18483: LD_STRING 
18485: PPUSH
18486: CALL 16774 0 4
18490: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_VAR 0 2
18500: PUSH
18501: CALL 16739 0 0
18505: PPUSH
18506: LD_INT 1
18508: PPUSH
18509: LD_EXP 13
18513: PUSH
18514: LD_OWVAR 67
18518: ARRAY
18519: PUSH
18520: LD_INT 1
18522: MINUS
18523: PPUSH
18524: LD_STRING 
18526: PPUSH
18527: CALL 16774 0 4
18531: ADD
18532: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18533: LD_ADDR_VAR 0 2
18537: PUSH
18538: LD_VAR 0 2
18542: PUSH
18543: CALL 16739 0 0
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: LD_EXP 13
18555: PUSH
18556: LD_OWVAR 67
18560: ARRAY
18561: PUSH
18562: LD_INT 1
18564: MINUS
18565: PPUSH
18566: LD_STRING 
18568: PPUSH
18569: CALL 16774 0 4
18573: ADD
18574: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] - 1 ,  ) ;
18575: LD_ADDR_VAR 0 2
18579: PUSH
18580: LD_VAR 0 2
18584: PUSH
18585: CALL 16739 0 0
18589: PPUSH
18590: LD_INT 4
18592: PPUSH
18593: LD_EXP 13
18597: PUSH
18598: LD_OWVAR 67
18602: ARRAY
18603: PUSH
18604: LD_INT 1
18606: MINUS
18607: PPUSH
18608: LD_STRING 
18610: PPUSH
18611: CALL 16774 0 4
18615: ADD
18616: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18617: LD_ADDR_LOC 23
18621: PUSH
18622: CALL 16739 0 0
18626: PPUSH
18627: LD_INT 3
18629: PPUSH
18630: LD_EXP 13
18634: PUSH
18635: LD_OWVAR 67
18639: ARRAY
18640: PPUSH
18641: LD_STRING 
18643: PPUSH
18644: CALL 16774 0 4
18648: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
18649: LD_ADDR_OWVAR 37
18653: PUSH
18654: LD_INT 3
18656: ST_TO_ADDR
// vc_control = control_manual ;
18657: LD_ADDR_OWVAR 38
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// vc_engine = engine_combustion ;
18665: LD_ADDR_OWVAR 39
18669: PUSH
18670: LD_INT 1
18672: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18673: LD_ADDR_OWVAR 40
18677: PUSH
18678: LD_INT 2
18680: ST_TO_ADDR
// av = CreateVehicle ;
18681: LD_ADDR_LOC 24
18685: PUSH
18686: CALL_OW 45
18690: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18691: LD_LOC 23
18695: PPUSH
18696: LD_LOC 24
18700: PPUSH
18701: CALL_OW 52
// pom = pom ^ av ;
18705: LD_ADDR_VAR 0 2
18709: PUSH
18710: LD_VAR 0 2
18714: PUSH
18715: LD_LOC 24
18719: ADD
18720: ST_TO_ADDR
// AMERICKE_POSILY11_LIST = pom ;
18721: LD_ADDR_EXP 55
18725: PUSH
18726: LD_VAR 0 2
18730: ST_TO_ADDR
// end ;
18731: LD_VAR 0 1
18735: RET
// export function create_kecajici_amik ; var pom ; begin
18736: LD_INT 0
18738: PPUSH
18739: PPUSH
// uc_side = Amici ;
18740: LD_ADDR_OWVAR 20
18744: PUSH
18745: LD_EXP 4
18749: ST_TO_ADDR
// uc_nation = nation_american ;
18750: LD_ADDR_OWVAR 21
18754: PUSH
18755: LD_INT 1
18757: ST_TO_ADDR
// pom = get_human ( sex_male , class_soldier , 4 , Mike Damme ) ;
18758: LD_ADDR_VAR 0 2
18762: PUSH
18763: LD_INT 1
18765: PPUSH
18766: LD_INT 1
18768: PPUSH
18769: LD_INT 4
18771: PPUSH
18772: LD_STRING Mike Damme
18774: PPUSH
18775: CALL 16774 0 4
18779: ST_TO_ADDR
// result := pom ;
18780: LD_ADDR_VAR 0 1
18784: PUSH
18785: LD_VAR 0 2
18789: ST_TO_ADDR
// end ;
18790: LD_VAR 0 1
18794: RET
// export function create_grishko ; var pom ; begin
18795: LD_INT 0
18797: PPUSH
18798: PPUSH
// pom = grishko ;
18799: LD_ADDR_VAR 0 2
18803: PUSH
18804: LD_EXP 35
18808: ST_TO_ADDR
// if pom = 0 then
18809: LD_VAR 0 2
18813: PUSH
18814: LD_INT 0
18816: EQUAL
18817: IFFALSE 18841
// pom = get_human ( sex_male , class_soldier , 4 , Piotr Grishko ) ;
18819: LD_ADDR_VAR 0 2
18823: PUSH
18824: LD_INT 1
18826: PPUSH
18827: LD_INT 1
18829: PPUSH
18830: LD_INT 4
18832: PPUSH
18833: LD_STRING Piotr Grishko
18835: PPUSH
18836: CALL 16774 0 4
18840: ST_TO_ADDR
// if pom > 0 then
18841: LD_VAR 0 2
18845: PUSH
18846: LD_INT 0
18848: GREATER
18849: IFFALSE 18885
// begin SetSide ( pom [ 1 ] , You2 ) ;
18851: LD_VAR 0 2
18855: PUSH
18856: LD_INT 1
18858: ARRAY
18859: PPUSH
18860: LD_EXP 2
18864: PPUSH
18865: CALL_OW 235
// result = pom [ 1 ] ;
18869: LD_ADDR_VAR 0 1
18873: PUSH
18874: LD_VAR 0 2
18878: PUSH
18879: LD_INT 1
18881: ARRAY
18882: ST_TO_ADDR
// end else
18883: GO 18892
// msg ( ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril ) ;
18885: LD_STRING ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril
18887: PPUSH
18888: CALL_OW 100
// end ;
18892: LD_VAR 0 1
18896: RET
// export function create_arabsky_utok ; var pom , i ; begin
18897: LD_INT 0
18899: PPUSH
18900: PPUSH
18901: PPUSH
// pom = FilterUnitsInArea ( Ar_jedn , [ [ f_side , Arabi ] , [ f_class , class_apeman_kamikaze ] ] ) ;
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_INT 9
18909: PPUSH
18910: LD_INT 22
18912: PUSH
18913: LD_EXP 5
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 25
18924: PUSH
18925: LD_INT 17
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PPUSH
18936: CALL_OW 70
18940: ST_TO_ADDR
// ARABI_KAMIKADZE_LIST = pom ;
18941: LD_ADDR_EXP 60
18945: PUSH
18946: LD_VAR 0 2
18950: ST_TO_ADDR
// for i in pom do
18951: LD_ADDR_VAR 0 3
18955: PUSH
18956: LD_VAR 0 2
18960: PUSH
18961: FOR_IN
18962: IFFALSE 18975
// RemoveUnit ( i ) ;
18964: LD_VAR 0 3
18968: PPUSH
18969: CALL_OW 64
18973: GO 18961
18975: POP
18976: POP
// pom = [ ] ;
18977: LD_ADDR_VAR 0 2
18981: PUSH
18982: EMPTY
18983: ST_TO_ADDR
// uc_side = Arabi ;
18984: LD_ADDR_OWVAR 20
18988: PUSH
18989: LD_EXP 5
18993: ST_TO_ADDR
// uc_nation = nation_arabian ;
18994: LD_ADDR_OWVAR 21
18998: PUSH
18999: LD_INT 2
19001: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19002: LD_ADDR_LOC 23
19006: PUSH
19007: CALL 16739 0 0
19011: PPUSH
19012: LD_INT 3
19014: PPUSH
19015: LD_INT 9
19017: PPUSH
19018: LD_STRING 
19020: PPUSH
19021: CALL 16774 0 4
19025: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19026: LD_ADDR_OWVAR 37
19030: PUSH
19031: LD_INT 14
19033: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
19034: LD_ADDR_OWVAR 40
19038: PUSH
19039: LD_INT 26
19041: ST_TO_ADDR
// vc_control = control_manual ;
19042: LD_ADDR_OWVAR 38
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// vc_engine = engine_combustion ;
19050: LD_ADDR_OWVAR 39
19054: PUSH
19055: LD_INT 1
19057: ST_TO_ADDR
// av = CreateVehicle ;
19058: LD_ADDR_LOC 24
19062: PUSH
19063: CALL_OW 45
19067: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19068: LD_LOC 23
19072: PPUSH
19073: LD_LOC 24
19077: PPUSH
19078: CALL_OW 52
// pom = pom ^ av ;
19082: LD_ADDR_VAR 0 2
19086: PUSH
19087: LD_VAR 0 2
19091: PUSH
19092: LD_LOC 24
19096: ADD
19097: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19098: LD_ADDR_LOC 23
19102: PUSH
19103: CALL 16739 0 0
19107: PPUSH
19108: LD_INT 3
19110: PPUSH
19111: LD_INT 9
19113: PPUSH
19114: LD_STRING 
19116: PPUSH
19117: CALL 16774 0 4
19121: ST_TO_ADDR
// av = CreateVehicle ;
19122: LD_ADDR_LOC 24
19126: PUSH
19127: CALL_OW 45
19131: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19132: LD_LOC 23
19136: PPUSH
19137: LD_LOC 24
19141: PPUSH
19142: CALL_OW 52
// pom = pom ^ av ;
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: LD_VAR 0 2
19155: PUSH
19156: LD_LOC 24
19160: ADD
19161: ST_TO_ADDR
// ARABI_FLAME_LIST = pom ;
19162: LD_ADDR_EXP 62
19166: PUSH
19167: LD_VAR 0 2
19171: ST_TO_ADDR
// pom = [ ] ;
19172: LD_ADDR_VAR 0 2
19176: PUSH
19177: EMPTY
19178: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19179: LD_ADDR_LOC 23
19183: PUSH
19184: CALL 16739 0 0
19188: PPUSH
19189: LD_INT 3
19191: PPUSH
19192: LD_INT 9
19194: PPUSH
19195: LD_STRING 
19197: PPUSH
19198: CALL 16774 0 4
19202: ST_TO_ADDR
// vc_weapon = ar_gun ;
19203: LD_ADDR_OWVAR 40
19207: PUSH
19208: LD_INT 27
19210: ST_TO_ADDR
// av = CreateVehicle ;
19211: LD_ADDR_LOC 24
19215: PUSH
19216: CALL_OW 45
19220: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19221: LD_LOC 23
19225: PPUSH
19226: LD_LOC 24
19230: PPUSH
19231: CALL_OW 52
// pom = av ;
19235: LD_ADDR_VAR 0 2
19239: PUSH
19240: LD_LOC 24
19244: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19245: LD_ADDR_LOC 23
19249: PUSH
19250: CALL 16739 0 0
19254: PPUSH
19255: LD_INT 3
19257: PPUSH
19258: LD_INT 9
19260: PPUSH
19261: LD_STRING 
19263: PPUSH
19264: CALL 16774 0 4
19268: ST_TO_ADDR
// av = CreateVehicle ;
19269: LD_ADDR_LOC 24
19273: PUSH
19274: CALL_OW 45
19278: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19279: LD_LOC 23
19283: PPUSH
19284: LD_LOC 24
19288: PPUSH
19289: CALL_OW 52
// pom = pom ^ av ;
19293: LD_ADDR_VAR 0 2
19297: PUSH
19298: LD_VAR 0 2
19302: PUSH
19303: LD_LOC 24
19307: ADD
19308: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19309: LD_ADDR_LOC 23
19313: PUSH
19314: CALL 16739 0 0
19318: PPUSH
19319: LD_INT 3
19321: PPUSH
19322: LD_INT 9
19324: PPUSH
19325: LD_STRING 
19327: PPUSH
19328: CALL 16774 0 4
19332: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
19333: LD_ADDR_OWVAR 40
19337: PUSH
19338: LD_INT 25
19340: ST_TO_ADDR
// av = CreateVehicle ;
19341: LD_ADDR_LOC 24
19345: PUSH
19346: CALL_OW 45
19350: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19351: LD_LOC 23
19355: PPUSH
19356: LD_LOC 24
19360: PPUSH
19361: CALL_OW 52
// pom = pom ^ av ;
19365: LD_ADDR_VAR 0 2
19369: PUSH
19370: LD_VAR 0 2
19374: PUSH
19375: LD_LOC 24
19379: ADD
19380: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19381: LD_ADDR_LOC 23
19385: PUSH
19386: CALL 16739 0 0
19390: PPUSH
19391: LD_INT 3
19393: PPUSH
19394: LD_INT 9
19396: PPUSH
19397: LD_STRING 
19399: PPUSH
19400: CALL 16774 0 4
19404: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19405: LD_ADDR_OWVAR 40
19409: PUSH
19410: LD_INT 28
19412: ST_TO_ADDR
// av = CreateVehicle ;
19413: LD_ADDR_LOC 24
19417: PUSH
19418: CALL_OW 45
19422: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19423: LD_LOC 23
19427: PPUSH
19428: LD_LOC 24
19432: PPUSH
19433: CALL_OW 52
// pom = pom ^ av ;
19437: LD_ADDR_VAR 0 2
19441: PUSH
19442: LD_VAR 0 2
19446: PUSH
19447: LD_LOC 24
19451: ADD
19452: ST_TO_ADDR
// ARABI_PRVNI_VLNA = pom ;
19453: LD_ADDR_EXP 61
19457: PUSH
19458: LD_VAR 0 2
19462: ST_TO_ADDR
// pom = [ ] ;
19463: LD_ADDR_VAR 0 2
19467: PUSH
19468: EMPTY
19469: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
19470: LD_ADDR_OWVAR 40
19474: PUSH
19475: LD_INT 29
19477: ST_TO_ADDR
// vc_control = control_apeman ;
19478: LD_ADDR_OWVAR 38
19482: PUSH
19483: LD_INT 5
19485: ST_TO_ADDR
// ah = CreateVehicle ;
19486: LD_ADDR_LOC 23
19490: PUSH
19491: CALL_OW 45
19495: ST_TO_ADDR
// pom = ah ;
19496: LD_ADDR_VAR 0 2
19500: PUSH
19501: LD_LOC 23
19505: ST_TO_ADDR
// pom = pom ^ CreateVehicle ;
19506: LD_ADDR_VAR 0 2
19510: PUSH
19511: LD_VAR 0 2
19515: PUSH
19516: CALL_OW 45
19520: ADD
19521: ST_TO_ADDR
// ARABI_SELF_AUTA = pom ;
19522: LD_ADDR_EXP 63
19526: PUSH
19527: LD_VAR 0 2
19531: ST_TO_ADDR
// pom = [ ] ;
19532: LD_ADDR_VAR 0 2
19536: PUSH
19537: EMPTY
19538: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 9 ,  ) ;
19539: LD_ADDR_VAR 0 2
19543: PUSH
19544: CALL 16739 0 0
19548: PPUSH
19549: LD_INT 1
19551: PPUSH
19552: LD_INT 9
19554: PPUSH
19555: LD_STRING 
19557: PPUSH
19558: CALL 16774 0 4
19562: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19563: LD_ADDR_VAR 0 2
19567: PUSH
19568: LD_VAR 0 2
19572: PUSH
19573: CALL 16739 0 0
19577: PPUSH
19578: LD_INT 1
19580: PPUSH
19581: LD_INT 9
19583: PPUSH
19584: LD_STRING 
19586: PPUSH
19587: CALL 16774 0 4
19591: ADD
19592: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_VAR 0 2
19602: PUSH
19603: CALL 16739 0 0
19607: PPUSH
19608: LD_INT 1
19610: PPUSH
19611: LD_INT 9
19613: PPUSH
19614: LD_STRING 
19616: PPUSH
19617: CALL 16774 0 4
19621: ADD
19622: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19623: LD_ADDR_VAR 0 2
19627: PUSH
19628: LD_VAR 0 2
19632: PUSH
19633: CALL 16739 0 0
19637: PPUSH
19638: LD_INT 1
19640: PPUSH
19641: LD_INT 9
19643: PPUSH
19644: LD_STRING 
19646: PPUSH
19647: CALL 16774 0 4
19651: ADD
19652: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_VAR 0 2
19662: PUSH
19663: CALL 16739 0 0
19667: PPUSH
19668: LD_INT 8
19670: PPUSH
19671: LD_INT 9
19673: PPUSH
19674: LD_STRING 
19676: PPUSH
19677: CALL 16774 0 4
19681: ADD
19682: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19683: LD_ADDR_VAR 0 2
19687: PUSH
19688: LD_VAR 0 2
19692: PUSH
19693: CALL 16739 0 0
19697: PPUSH
19698: LD_INT 8
19700: PPUSH
19701: LD_INT 9
19703: PPUSH
19704: LD_STRING 
19706: PPUSH
19707: CALL 16774 0 4
19711: ADD
19712: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19713: LD_ADDR_VAR 0 2
19717: PUSH
19718: LD_VAR 0 2
19722: PUSH
19723: CALL 16739 0 0
19727: PPUSH
19728: LD_INT 1
19730: PPUSH
19731: LD_INT 9
19733: PPUSH
19734: LD_STRING 
19736: PPUSH
19737: CALL 16774 0 4
19741: ADD
19742: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19743: LD_ADDR_VAR 0 2
19747: PUSH
19748: LD_VAR 0 2
19752: PUSH
19753: CALL 16739 0 0
19757: PPUSH
19758: LD_INT 8
19760: PPUSH
19761: LD_INT 9
19763: PPUSH
19764: LD_STRING 
19766: PPUSH
19767: CALL 16774 0 4
19771: ADD
19772: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19773: LD_ADDR_VAR 0 2
19777: PUSH
19778: LD_VAR 0 2
19782: PUSH
19783: CALL 16739 0 0
19787: PPUSH
19788: LD_INT 8
19790: PPUSH
19791: LD_INT 9
19793: PPUSH
19794: LD_STRING 
19796: PPUSH
19797: CALL 16774 0 4
19801: ADD
19802: ST_TO_ADDR
// ARABI_VOJACI = pom ;
19803: LD_ADDR_EXP 64
19807: PUSH
19808: LD_VAR 0 2
19812: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19813: LD_ADDR_OWVAR 40
19817: PUSH
19818: LD_INT 28
19820: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19821: LD_ADDR_OWVAR 37
19825: PUSH
19826: LD_INT 14
19828: ST_TO_ADDR
// vc_control = control_manual ;
19829: LD_ADDR_OWVAR 38
19833: PUSH
19834: LD_INT 1
19836: ST_TO_ADDR
// vc_engine = engine_combustion ;
19837: LD_ADDR_OWVAR 39
19841: PUSH
19842: LD_INT 1
19844: ST_TO_ADDR
// av = CreateVehicle ;
19845: LD_ADDR_LOC 24
19849: PUSH
19850: CALL_OW 45
19854: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19855: LD_ADDR_LOC 23
19859: PUSH
19860: CALL 16739 0 0
19864: PPUSH
19865: LD_INT 3
19867: PPUSH
19868: LD_INT 9
19870: PPUSH
19871: LD_STRING 
19873: PPUSH
19874: CALL 16774 0 4
19878: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19879: LD_LOC 23
19883: PPUSH
19884: LD_LOC 24
19888: PPUSH
19889: CALL_OW 52
// pom = av ;
19893: LD_ADDR_VAR 0 2
19897: PUSH
19898: LD_LOC 24
19902: ST_TO_ADDR
// av = CreateVehicle ;
19903: LD_ADDR_LOC 24
19907: PUSH
19908: CALL_OW 45
19912: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19913: LD_ADDR_LOC 23
19917: PUSH
19918: CALL 16739 0 0
19922: PPUSH
19923: LD_INT 3
19925: PPUSH
19926: LD_INT 8
19928: PPUSH
19929: LD_STRING 
19931: PPUSH
19932: CALL 16774 0 4
19936: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19937: LD_LOC 23
19941: PPUSH
19942: LD_LOC 24
19946: PPUSH
19947: CALL_OW 52
// pom = pom ^ av ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_VAR 0 2
19960: PUSH
19961: LD_LOC 24
19965: ADD
19966: ST_TO_ADDR
// av = CreateVehicle ;
19967: LD_ADDR_LOC 24
19971: PUSH
19972: CALL_OW 45
19976: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19977: LD_ADDR_LOC 23
19981: PUSH
19982: CALL 16739 0 0
19986: PPUSH
19987: LD_INT 3
19989: PPUSH
19990: LD_INT 8
19992: PPUSH
19993: LD_STRING 
19995: PPUSH
19996: CALL 16774 0 4
20000: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20001: LD_LOC 23
20005: PPUSH
20006: LD_LOC 24
20010: PPUSH
20011: CALL_OW 52
// pom = pom ^ av ;
20015: LD_ADDR_VAR 0 2
20019: PUSH
20020: LD_VAR 0 2
20024: PUSH
20025: LD_LOC 24
20029: ADD
20030: ST_TO_ADDR
// ARABI_doraz = pom ;
20031: LD_ADDR_EXP 65
20035: PUSH
20036: LD_VAR 0 2
20040: ST_TO_ADDR
// end ;
20041: LD_VAR 0 1
20045: RET
// export function create_ruske_posily_na_omicron ; var pom ; begin
20046: LD_INT 0
20048: PPUSH
20049: PPUSH
// pom = [ ] ;
20050: LD_ADDR_VAR 0 2
20054: PUSH
20055: EMPTY
20056: ST_TO_ADDR
// uc_side = You2 ;
20057: LD_ADDR_OWVAR 20
20061: PUSH
20062: LD_EXP 2
20066: ST_TO_ADDR
// uc_nation = nation_russian ;
20067: LD_ADDR_OWVAR 21
20071: PUSH
20072: LD_INT 3
20074: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
20075: LD_ADDR_OWVAR 37
20079: PUSH
20080: LD_INT 23
20082: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
20083: LD_ADDR_OWVAR 40
20087: PUSH
20088: LD_INT 43
20090: ST_TO_ADDR
// vc_control = control_manual ;
20091: LD_ADDR_OWVAR 38
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// vc_engine = engine_combustion ;
20099: LD_ADDR_OWVAR 39
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20107: LD_ADDR_LOC 23
20111: PUSH
20112: CALL 16739 0 0
20116: PPUSH
20117: LD_INT 3
20119: PPUSH
20120: LD_EXP 20
20124: PUSH
20125: LD_OWVAR 67
20129: ARRAY
20130: PPUSH
20131: LD_STRING 
20133: PPUSH
20134: CALL 16774 0 4
20138: ST_TO_ADDR
// av = CreateVehicle ;
20139: LD_ADDR_LOC 24
20143: PUSH
20144: CALL_OW 45
20148: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20149: LD_LOC 23
20153: PPUSH
20154: LD_LOC 24
20158: PPUSH
20159: CALL_OW 52
// pom = pom ^ av ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_VAR 0 2
20172: PUSH
20173: LD_LOC 24
20177: ADD
20178: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] + 1 ,  ) ;
20179: LD_ADDR_LOC 23
20183: PUSH
20184: CALL 16739 0 0
20188: PPUSH
20189: LD_INT 3
20191: PPUSH
20192: LD_EXP 20
20196: PUSH
20197: LD_OWVAR 67
20201: ARRAY
20202: PUSH
20203: LD_INT 1
20205: PLUS
20206: PPUSH
20207: LD_STRING 
20209: PPUSH
20210: CALL 16774 0 4
20214: ST_TO_ADDR
// av = CreateVehicle ;
20215: LD_ADDR_LOC 24
20219: PUSH
20220: CALL_OW 45
20224: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20225: LD_LOC 23
20229: PPUSH
20230: LD_LOC 24
20234: PPUSH
20235: CALL_OW 52
// pom = pom ^ av ;
20239: LD_ADDR_VAR 0 2
20243: PUSH
20244: LD_VAR 0 2
20248: PUSH
20249: LD_LOC 24
20253: ADD
20254: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20255: LD_ADDR_LOC 23
20259: PUSH
20260: CALL 16739 0 0
20264: PPUSH
20265: LD_INT 3
20267: PPUSH
20268: LD_EXP 20
20272: PUSH
20273: LD_OWVAR 67
20277: ARRAY
20278: PPUSH
20279: LD_STRING 
20281: PPUSH
20282: CALL 16774 0 4
20286: ST_TO_ADDR
// vc_weapon = ru_gun ;
20287: LD_ADDR_OWVAR 40
20291: PUSH
20292: LD_INT 44
20294: ST_TO_ADDR
// av = CreateVehicle ;
20295: LD_ADDR_LOC 24
20299: PUSH
20300: CALL_OW 45
20304: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20305: LD_LOC 23
20309: PPUSH
20310: LD_LOC 24
20314: PPUSH
20315: CALL_OW 52
// pom = pom ^ av ;
20319: LD_ADDR_VAR 0 2
20323: PUSH
20324: LD_VAR 0 2
20328: PUSH
20329: LD_LOC 24
20333: ADD
20334: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] - 1 ,  ) ;
20335: LD_ADDR_LOC 23
20339: PUSH
20340: CALL 16739 0 0
20344: PPUSH
20345: LD_INT 3
20347: PPUSH
20348: LD_EXP 20
20352: PUSH
20353: LD_OWVAR 67
20357: ARRAY
20358: PUSH
20359: LD_INT 1
20361: MINUS
20362: PPUSH
20363: LD_STRING 
20365: PPUSH
20366: CALL 16774 0 4
20370: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
20371: LD_ADDR_OWVAR 37
20375: PUSH
20376: LD_INT 22
20378: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
20379: LD_ADDR_OWVAR 40
20383: PUSH
20384: LD_INT 42
20386: ST_TO_ADDR
// av = CreateVehicle ;
20387: LD_ADDR_LOC 24
20391: PUSH
20392: CALL_OW 45
20396: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20397: LD_LOC 23
20401: PPUSH
20402: LD_LOC 24
20406: PPUSH
20407: CALL_OW 52
// pom = pom ^ av ;
20411: LD_ADDR_VAR 0 2
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: LD_LOC 24
20425: ADD
20426: ST_TO_ADDR
// RUSKE_POSILY_NA_OMICRON_LIST = pom ;
20427: LD_ADDR_EXP 56
20431: PUSH
20432: LD_VAR 0 2
20436: ST_TO_ADDR
// pom = [ ] ;
20437: LD_ADDR_VAR 0 2
20441: PUSH
20442: EMPTY
20443: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20444: LD_ADDR_LOC 23
20448: PUSH
20449: CALL 16739 0 0
20453: PPUSH
20454: LD_INT 3
20456: PPUSH
20457: LD_EXP 20
20461: PUSH
20462: LD_OWVAR 67
20466: ARRAY
20467: PPUSH
20468: LD_STRING 
20470: PPUSH
20471: CALL 16774 0 4
20475: ST_TO_ADDR
// pom = pom ^ ah ;
20476: LD_ADDR_VAR 0 2
20480: PUSH
20481: LD_VAR 0 2
20485: PUSH
20486: LD_LOC 23
20490: ADD
20491: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20492: LD_ADDR_LOC 23
20496: PUSH
20497: CALL 16739 0 0
20501: PPUSH
20502: LD_INT 3
20504: PPUSH
20505: LD_EXP 20
20509: PUSH
20510: LD_OWVAR 67
20514: ARRAY
20515: PPUSH
20516: LD_STRING 
20518: PPUSH
20519: CALL 16774 0 4
20523: ST_TO_ADDR
// pom = pom ^ ah ;
20524: LD_ADDR_VAR 0 2
20528: PUSH
20529: LD_VAR 0 2
20533: PUSH
20534: LD_LOC 23
20538: ADD
20539: ST_TO_ADDR
// RUSKE_POSILY_RIDICI_LIST = pom ;
20540: LD_ADDR_EXP 57
20544: PUSH
20545: LD_VAR 0 2
20549: ST_TO_ADDR
// end ;
20550: LD_VAR 0 1
20554: RET
// export function create_dalsi_ridici ( auta ) ; var i , pom ; var poc ; begin
20555: LD_INT 0
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
// uc_side = You2 ;
20561: LD_ADDR_OWVAR 20
20565: PUSH
20566: LD_EXP 2
20570: ST_TO_ADDR
// uc_nation = nation_russian ;
20571: LD_ADDR_OWVAR 21
20575: PUSH
20576: LD_INT 3
20578: ST_TO_ADDR
// pom = [ ] ;
20579: LD_ADDR_VAR 0 4
20583: PUSH
20584: EMPTY
20585: ST_TO_ADDR
// poc = 0 ;
20586: LD_ADDR_VAR 0 5
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// for i in auta do
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_VAR 0 1
20603: PUSH
20604: FOR_IN
20605: IFFALSE 20671
// begin poc = poc + 1 ;
20607: LD_ADDR_VAR 0 5
20611: PUSH
20612: LD_VAR 0 5
20616: PUSH
20617: LD_INT 1
20619: PLUS
20620: ST_TO_ADDR
// if poc < 3 then
20621: LD_VAR 0 5
20625: PUSH
20626: LD_INT 3
20628: LESS
20629: IFFALSE 20669
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20631: LD_ADDR_VAR 0 4
20635: PUSH
20636: LD_VAR 0 4
20640: PUSH
20641: CALL 16739 0 0
20645: PPUSH
20646: LD_INT 3
20648: PPUSH
20649: LD_EXP 20
20653: PUSH
20654: LD_OWVAR 67
20658: ARRAY
20659: PPUSH
20660: LD_STRING 
20662: PPUSH
20663: CALL 16774 0 4
20667: ADD
20668: ST_TO_ADDR
// end ;
20669: GO 20604
20671: POP
20672: POP
// result := pom ;
20673: LD_ADDR_VAR 0 2
20677: PUSH
20678: LD_VAR 0 4
20682: ST_TO_ADDR
// end ;
20683: LD_VAR 0 2
20687: RET
// export function create_am_jednotky ; begin
20688: LD_INT 0
20690: PPUSH
// SetSide ( kur , You2 ) ;
20691: LD_EXP 27
20695: PPUSH
20696: LD_EXP 2
20700: PPUSH
20701: CALL_OW 235
// PlaceUnitXY ( kur , 149 , 79 , false ) ;
20705: LD_EXP 27
20709: PPUSH
20710: LD_INT 149
20712: PPUSH
20713: LD_INT 79
20715: PPUSH
20716: LD_INT 0
20718: PPUSH
20719: CALL_OW 48
// if BELKOV_SAVED then
20723: LD_EXP 24
20727: IFFALSE 20773
// begin SetSide ( bel , You2 ) ;
20729: LD_EXP 32
20733: PPUSH
20734: LD_EXP 2
20738: PPUSH
20739: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
20743: LD_EXP 32
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: CALL_OW 336
// PlaceUnitXY ( bel , 141 , 80 , false ) ;
20755: LD_EXP 32
20759: PPUSH
20760: LD_INT 141
20762: PPUSH
20763: LD_INT 80
20765: PPUSH
20766: LD_INT 0
20768: PPUSH
20769: CALL_OW 48
// end ; if kov <> 0 then
20773: LD_EXP 30
20777: PUSH
20778: LD_INT 0
20780: NONEQUAL
20781: IFFALSE 20827
// begin SetSide ( kov , You ) ;
20783: LD_EXP 30
20787: PPUSH
20788: LD_EXP 1
20792: PPUSH
20793: CALL_OW 235
// SetClass ( kov , class_soldier ) ;
20797: LD_EXP 30
20801: PPUSH
20802: LD_INT 1
20804: PPUSH
20805: CALL_OW 336
// PlaceUnitXY ( kov , 142 , 80 , false ) ;
20809: LD_EXP 30
20813: PPUSH
20814: LD_INT 142
20816: PPUSH
20817: LD_INT 80
20819: PPUSH
20820: LD_INT 0
20822: PPUSH
20823: CALL_OW 48
// end ; SetClass ( bur , class_mechanic ) ;
20827: LD_EXP 29
20831: PPUSH
20832: LD_INT 3
20834: PPUSH
20835: CALL_OW 336
// SetSide ( bur , You ) ;
20839: LD_EXP 29
20843: PPUSH
20844: LD_EXP 1
20848: PPUSH
20849: CALL_OW 235
// PlaceUnitXY ( bur , 144 , 80 , false ) ;
20853: LD_EXP 29
20857: PPUSH
20858: LD_INT 144
20860: PPUSH
20861: LD_INT 80
20863: PPUSH
20864: LD_INT 0
20866: PPUSH
20867: CALL_OW 48
// if gny <> 0 then
20871: LD_EXP 31
20875: PUSH
20876: LD_INT 0
20878: NONEQUAL
20879: IFFALSE 20937
// begin SetClass ( gny , class_soldier ) ;
20881: LD_EXP 31
20885: PPUSH
20886: LD_INT 1
20888: PPUSH
20889: CALL_OW 336
// SetSide ( gny , You ) ;
20893: LD_EXP 31
20897: PPUSH
20898: LD_EXP 1
20902: PPUSH
20903: CALL_OW 235
// SetClass ( gny , class_mechanic ) ;
20907: LD_EXP 31
20911: PPUSH
20912: LD_INT 3
20914: PPUSH
20915: CALL_OW 336
// PlaceUnitXY ( gny , 142 , 79 , false ) ;
20919: LD_EXP 31
20923: PPUSH
20924: LD_INT 142
20926: PPUSH
20927: LD_INT 79
20929: PPUSH
20930: LD_INT 0
20932: PPUSH
20933: CALL_OW 48
// end ; SetSide ( pop , You2 ) ;
20937: LD_EXP 28
20941: PPUSH
20942: LD_EXP 2
20946: PPUSH
20947: CALL_OW 235
// PlaceUnitXY ( pop , 136 , 79 , false ) ;
20951: LD_EXP 28
20955: PPUSH
20956: LD_INT 136
20958: PPUSH
20959: LD_INT 79
20961: PPUSH
20962: LD_INT 0
20964: PPUSH
20965: CALL_OW 48
// end ;
20969: LD_VAR 0 1
20973: RET
// export function nacti_osobu ( ident ) ; begin
20974: LD_INT 0
20976: PPUSH
// if CheckCharacterSet ( ident ) then
20977: LD_VAR 0 1
20981: PPUSH
20982: CALL_OW 29
20986: IFFALSE 21005
// result := CreateCharacter ( ident ) else
20988: LD_ADDR_VAR 0 2
20992: PUSH
20993: LD_VAR 0 1
20997: PPUSH
20998: CALL_OW 34
21002: ST_TO_ADDR
21003: GO 21013
// result := 0 ;
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_INT 0
21012: ST_TO_ADDR
// end ;
21013: LD_VAR 0 2
21017: RET
// export function create_arabi_komanda ; var pom ; begin
21018: LD_INT 0
21020: PPUSH
21021: PPUSH
// uc_side = Arabi ;
21022: LD_ADDR_OWVAR 20
21026: PUSH
21027: LD_EXP 5
21031: ST_TO_ADDR
// uc_nation = nation_arabian ;
21032: LD_ADDR_OWVAR 21
21036: PUSH
21037: LD_INT 2
21039: ST_TO_ADDR
// pom = [ ] ;
21040: LD_ADDR_VAR 0 2
21044: PUSH
21045: EMPTY
21046: ST_TO_ADDR
// pom = get_human ( sex_female , class_soldier , 8 ,  ) ;
21047: LD_ADDR_VAR 0 2
21051: PUSH
21052: LD_INT 2
21054: PPUSH
21055: LD_INT 1
21057: PPUSH
21058: LD_INT 8
21060: PPUSH
21061: LD_STRING 
21063: PPUSH
21064: CALL 16774 0 4
21068: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: LD_VAR 0 2
21078: PUSH
21079: CALL 16739 0 0
21083: PPUSH
21084: LD_INT 1
21086: PPUSH
21087: LD_INT 6
21089: PPUSH
21090: LD_STRING 
21092: PPUSH
21093: CALL 16774 0 4
21097: ADD
21098: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21099: LD_ADDR_VAR 0 2
21103: PUSH
21104: LD_VAR 0 2
21108: PUSH
21109: CALL 16739 0 0
21113: PPUSH
21114: LD_INT 1
21116: PPUSH
21117: LD_INT 6
21119: PPUSH
21120: LD_STRING 
21122: PPUSH
21123: CALL 16774 0 4
21127: ADD
21128: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_VAR 0 2
21138: PUSH
21139: CALL 16739 0 0
21143: PPUSH
21144: LD_INT 1
21146: PPUSH
21147: LD_INT 6
21149: PPUSH
21150: LD_STRING 
21152: PPUSH
21153: CALL 16774 0 4
21157: ADD
21158: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21159: LD_ADDR_LOC 23
21163: PUSH
21164: CALL 16739 0 0
21168: PPUSH
21169: LD_INT 3
21171: PPUSH
21172: LD_INT 6
21174: PPUSH
21175: LD_STRING 
21177: PPUSH
21178: CALL 16774 0 4
21182: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
21183: LD_ADDR_OWVAR 40
21187: PUSH
21188: LD_INT 25
21190: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21191: LD_ADDR_OWVAR 37
21195: PUSH
21196: LD_INT 13
21198: ST_TO_ADDR
// vc_control = control_manual ;
21199: LD_ADDR_OWVAR 38
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// vc_engine = engine_solar ;
21207: LD_ADDR_OWVAR 39
21211: PUSH
21212: LD_INT 2
21214: ST_TO_ADDR
// av = CreateVehicle ;
21215: LD_ADDR_LOC 24
21219: PUSH
21220: CALL_OW 45
21224: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21225: LD_LOC 23
21229: PPUSH
21230: LD_LOC 24
21234: PPUSH
21235: CALL_OW 52
// pom = pom ^ av ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_VAR 0 2
21248: PUSH
21249: LD_LOC 24
21253: ADD
21254: ST_TO_ADDR
// vc_weapon = ar_gun ;
21255: LD_ADDR_OWVAR 40
21259: PUSH
21260: LD_INT 27
21262: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21263: LD_ADDR_OWVAR 37
21267: PUSH
21268: LD_INT 14
21270: ST_TO_ADDR
// vc_control = control_apeman ;
21271: LD_ADDR_OWVAR 38
21275: PUSH
21276: LD_INT 5
21278: ST_TO_ADDR
// vc_engine = engine_combustion ;
21279: LD_ADDR_OWVAR 39
21283: PUSH
21284: LD_INT 1
21286: ST_TO_ADDR
// av = CreateVehicle ;
21287: LD_ADDR_LOC 24
21291: PUSH
21292: CALL_OW 45
21296: ST_TO_ADDR
// pom = pom ^ av ;
21297: LD_ADDR_VAR 0 2
21301: PUSH
21302: LD_VAR 0 2
21306: PUSH
21307: LD_LOC 24
21311: ADD
21312: ST_TO_ADDR
// vc_weapon = ar_gun ;
21313: LD_ADDR_OWVAR 40
21317: PUSH
21318: LD_INT 27
21320: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21321: LD_ADDR_OWVAR 37
21325: PUSH
21326: LD_INT 14
21328: ST_TO_ADDR
// vc_control = control_apeman ;
21329: LD_ADDR_OWVAR 38
21333: PUSH
21334: LD_INT 5
21336: ST_TO_ADDR
// vc_engine = engine_combustion ;
21337: LD_ADDR_OWVAR 39
21341: PUSH
21342: LD_INT 1
21344: ST_TO_ADDR
// av = CreateVehicle ;
21345: LD_ADDR_LOC 24
21349: PUSH
21350: CALL_OW 45
21354: ST_TO_ADDR
// pom = pom ^ av ;
21355: LD_ADDR_VAR 0 2
21359: PUSH
21360: LD_VAR 0 2
21364: PUSH
21365: LD_LOC 24
21369: ADD
21370: ST_TO_ADDR
// Arabi_komanda1 = pom ;
21371: LD_ADDR_EXP 67
21375: PUSH
21376: LD_VAR 0 2
21380: ST_TO_ADDR
// Arabi_komanda2 = pom ;
21381: LD_ADDR_EXP 68
21385: PUSH
21386: LD_VAR 0 2
21390: ST_TO_ADDR
// vc_weapon = ar_gun ;
21391: LD_ADDR_OWVAR 40
21395: PUSH
21396: LD_INT 27
21398: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21399: LD_ADDR_OWVAR 37
21403: PUSH
21404: LD_INT 14
21406: ST_TO_ADDR
// vc_control = control_apeman ;
21407: LD_ADDR_OWVAR 38
21411: PUSH
21412: LD_INT 5
21414: ST_TO_ADDR
// vc_engine = engine_combustion ;
21415: LD_ADDR_OWVAR 39
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// av = CreateVehicle ;
21423: LD_ADDR_LOC 24
21427: PUSH
21428: CALL_OW 45
21432: ST_TO_ADDR
// pom = pom ^ av ;
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_VAR 0 2
21442: PUSH
21443: LD_LOC 24
21447: ADD
21448: ST_TO_ADDR
// av = CreateVehicle ;
21449: LD_ADDR_LOC 24
21453: PUSH
21454: CALL_OW 45
21458: ST_TO_ADDR
// pom = pom ^ av ;
21459: LD_ADDR_VAR 0 2
21463: PUSH
21464: LD_VAR 0 2
21468: PUSH
21469: LD_LOC 24
21473: ADD
21474: ST_TO_ADDR
// vc_weapon = ar_gun ;
21475: LD_ADDR_OWVAR 40
21479: PUSH
21480: LD_INT 27
21482: ST_TO_ADDR
// av = CreateVehicle ;
21483: LD_ADDR_LOC 24
21487: PUSH
21488: CALL_OW 45
21492: ST_TO_ADDR
// pom = pom ^ av ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_VAR 0 2
21502: PUSH
21503: LD_LOC 24
21507: ADD
21508: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21509: LD_ADDR_VAR 0 2
21513: PUSH
21514: LD_VAR 0 2
21518: PUSH
21519: CALL 16739 0 0
21523: PPUSH
21524: LD_INT 1
21526: PPUSH
21527: LD_INT 6
21529: PPUSH
21530: LD_STRING 
21532: PPUSH
21533: CALL 16774 0 4
21537: ADD
21538: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21539: LD_ADDR_VAR 0 2
21543: PUSH
21544: LD_VAR 0 2
21548: PUSH
21549: CALL 16739 0 0
21553: PPUSH
21554: LD_INT 1
21556: PPUSH
21557: LD_INT 6
21559: PPUSH
21560: LD_STRING 
21562: PPUSH
21563: CALL 16774 0 4
21567: ADD
21568: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21569: LD_ADDR_LOC 23
21573: PUSH
21574: CALL 16739 0 0
21578: PPUSH
21579: LD_INT 3
21581: PPUSH
21582: LD_INT 6
21584: PPUSH
21585: LD_STRING 
21587: PPUSH
21588: CALL 16774 0 4
21592: ST_TO_ADDR
// vc_weapon = ar_gun ;
21593: LD_ADDR_OWVAR 40
21597: PUSH
21598: LD_INT 27
21600: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21601: LD_ADDR_OWVAR 37
21605: PUSH
21606: LD_INT 13
21608: ST_TO_ADDR
// vc_control = control_manual ;
21609: LD_ADDR_OWVAR 38
21613: PUSH
21614: LD_INT 1
21616: ST_TO_ADDR
// vc_engine = engine_siberite ;
21617: LD_ADDR_OWVAR 39
21621: PUSH
21622: LD_INT 3
21624: ST_TO_ADDR
// av = CreateVehicle ;
21625: LD_ADDR_LOC 24
21629: PUSH
21630: CALL_OW 45
21634: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21635: LD_LOC 23
21639: PPUSH
21640: LD_LOC 24
21644: PPUSH
21645: CALL_OW 52
// pom = pom ^ av ;
21649: LD_ADDR_VAR 0 2
21653: PUSH
21654: LD_VAR 0 2
21658: PUSH
21659: LD_LOC 24
21663: ADD
21664: ST_TO_ADDR
// Arabi_komanda3 = pom ;
21665: LD_ADDR_EXP 69
21669: PUSH
21670: LD_VAR 0 2
21674: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 8 ,  ) ;
21675: LD_ADDR_VAR 0 2
21679: PUSH
21680: CALL 16739 0 0
21684: PPUSH
21685: LD_INT 1
21687: PPUSH
21688: LD_INT 8
21690: PPUSH
21691: LD_STRING 
21693: PPUSH
21694: CALL 16774 0 4
21698: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_VAR 0 2
21708: PUSH
21709: CALL 16739 0 0
21713: PPUSH
21714: LD_INT 1
21716: PPUSH
21717: LD_INT 6
21719: PPUSH
21720: LD_STRING 
21722: PPUSH
21723: CALL 16774 0 4
21727: ADD
21728: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_VAR 0 2
21738: PUSH
21739: CALL 16739 0 0
21743: PPUSH
21744: LD_INT 1
21746: PPUSH
21747: LD_INT 6
21749: PPUSH
21750: LD_STRING 
21752: PPUSH
21753: CALL 16774 0 4
21757: ADD
21758: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21759: LD_ADDR_VAR 0 2
21763: PUSH
21764: LD_VAR 0 2
21768: PUSH
21769: CALL 16739 0 0
21773: PPUSH
21774: LD_INT 8
21776: PPUSH
21777: LD_INT 6
21779: PPUSH
21780: LD_STRING 
21782: PPUSH
21783: CALL 16774 0 4
21787: ADD
21788: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21789: LD_ADDR_VAR 0 2
21793: PUSH
21794: LD_VAR 0 2
21798: PUSH
21799: CALL 16739 0 0
21803: PPUSH
21804: LD_INT 8
21806: PPUSH
21807: LD_INT 6
21809: PPUSH
21810: LD_STRING 
21812: PPUSH
21813: CALL 16774 0 4
21817: ADD
21818: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , 6 ,  ) ;
21819: LD_ADDR_VAR 0 2
21823: PUSH
21824: LD_VAR 0 2
21828: PUSH
21829: CALL 16739 0 0
21833: PPUSH
21834: LD_INT 4
21836: PPUSH
21837: LD_INT 6
21839: PPUSH
21840: LD_STRING 
21842: PPUSH
21843: CALL 16774 0 4
21847: ADD
21848: ST_TO_ADDR
// Arabi_komanda4 = pom ;
21849: LD_ADDR_EXP 70
21853: PUSH
21854: LD_VAR 0 2
21858: ST_TO_ADDR
// end ;
21859: LD_VAR 0 1
21863: RET
// export function create_ru_posily_ma_utek ; var pom ; begin
21864: LD_INT 0
21866: PPUSH
21867: PPUSH
// uc_side = You2 ;
21868: LD_ADDR_OWVAR 20
21872: PUSH
21873: LD_EXP 2
21877: ST_TO_ADDR
// uc_nation = nation_russian ;
21878: LD_ADDR_OWVAR 21
21882: PUSH
21883: LD_INT 3
21885: ST_TO_ADDR
// pom = [ ] ;
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: EMPTY
21892: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21893: LD_ADDR_LOC 23
21897: PUSH
21898: CALL 16739 0 0
21902: PPUSH
21903: LD_INT 3
21905: PPUSH
21906: LD_INT 3
21908: PPUSH
21909: LD_STRING 
21911: PPUSH
21912: CALL 16774 0 4
21916: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
21917: LD_ADDR_OWVAR 40
21921: PUSH
21922: LD_INT 42
21924: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
21925: LD_ADDR_OWVAR 37
21929: PUSH
21930: LD_INT 23
21932: ST_TO_ADDR
// vc_control = control_manual ;
21933: LD_ADDR_OWVAR 38
21937: PUSH
21938: LD_INT 1
21940: ST_TO_ADDR
// vc_engine = engine_combustion ;
21941: LD_ADDR_OWVAR 39
21945: PUSH
21946: LD_INT 1
21948: ST_TO_ADDR
// av = CreateVehicle ;
21949: LD_ADDR_LOC 24
21953: PUSH
21954: CALL_OW 45
21958: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21959: LD_LOC 23
21963: PPUSH
21964: LD_LOC 24
21968: PPUSH
21969: CALL_OW 52
// pom = pom ^ av ;
21973: LD_ADDR_VAR 0 2
21977: PUSH
21978: LD_VAR 0 2
21982: PUSH
21983: LD_LOC 24
21987: ADD
21988: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21989: LD_ADDR_LOC 23
21993: PUSH
21994: CALL 16739 0 0
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: LD_INT 3
22004: PPUSH
22005: LD_STRING 
22007: PPUSH
22008: CALL 16774 0 4
22012: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22013: LD_ADDR_OWVAR 37
22017: PUSH
22018: LD_INT 21
22020: ST_TO_ADDR
// av = CreateVehicle ;
22021: LD_ADDR_LOC 24
22025: PUSH
22026: CALL_OW 45
22030: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22031: LD_LOC 23
22035: PPUSH
22036: LD_LOC 24
22040: PPUSH
22041: CALL_OW 52
// pom = pom ^ av ;
22045: LD_ADDR_VAR 0 2
22049: PUSH
22050: LD_VAR 0 2
22054: PUSH
22055: LD_LOC 24
22059: ADD
22060: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22061: LD_ADDR_VAR 0 2
22065: PUSH
22066: LD_VAR 0 2
22070: PUSH
22071: CALL 16739 0 0
22075: PPUSH
22076: LD_INT 1
22078: PPUSH
22079: LD_INT 3
22081: PPUSH
22082: LD_STRING 
22084: PPUSH
22085: CALL 16774 0 4
22089: ADD
22090: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: LD_VAR 0 2
22100: PUSH
22101: CALL 16739 0 0
22105: PPUSH
22106: LD_INT 1
22108: PPUSH
22109: LD_INT 3
22111: PPUSH
22112: LD_STRING 
22114: PPUSH
22115: CALL 16774 0 4
22119: ADD
22120: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22121: LD_ADDR_VAR 0 2
22125: PUSH
22126: LD_VAR 0 2
22130: PUSH
22131: CALL 16739 0 0
22135: PPUSH
22136: LD_INT 1
22138: PPUSH
22139: LD_INT 3
22141: PPUSH
22142: LD_STRING 
22144: PPUSH
22145: CALL 16774 0 4
22149: ADD
22150: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22151: LD_ADDR_VAR 0 2
22155: PUSH
22156: LD_VAR 0 2
22160: PUSH
22161: CALL 16739 0 0
22165: PPUSH
22166: LD_INT 3
22168: PPUSH
22169: LD_INT 3
22171: PPUSH
22172: LD_STRING 
22174: PPUSH
22175: CALL 16774 0 4
22179: ADD
22180: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22181: LD_ADDR_VAR 0 2
22185: PUSH
22186: LD_VAR 0 2
22190: PUSH
22191: CALL 16739 0 0
22195: PPUSH
22196: LD_INT 3
22198: PPUSH
22199: LD_INT 3
22201: PPUSH
22202: LD_STRING 
22204: PPUSH
22205: CALL 16774 0 4
22209: ADD
22210: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22211: LD_ADDR_VAR 0 2
22215: PUSH
22216: LD_VAR 0 2
22220: PUSH
22221: CALL 16739 0 0
22225: PPUSH
22226: LD_INT 3
22228: PPUSH
22229: LD_INT 3
22231: PPUSH
22232: LD_STRING 
22234: PPUSH
22235: CALL 16774 0 4
22239: ADD
22240: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22241: LD_ADDR_VAR 0 2
22245: PUSH
22246: LD_VAR 0 2
22250: PUSH
22251: CALL 16739 0 0
22255: PPUSH
22256: LD_INT 2
22258: PPUSH
22259: LD_INT 3
22261: PPUSH
22262: LD_STRING 
22264: PPUSH
22265: CALL 16774 0 4
22269: ADD
22270: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22271: LD_ADDR_VAR 0 2
22275: PUSH
22276: LD_VAR 0 2
22280: PUSH
22281: CALL 16739 0 0
22285: PPUSH
22286: LD_INT 2
22288: PPUSH
22289: LD_INT 3
22291: PPUSH
22292: LD_STRING 
22294: PPUSH
22295: CALL 16774 0 4
22299: ADD
22300: ST_TO_ADDR
// RU_posily_na_utek = pom ;
22301: LD_ADDR_EXP 58
22305: PUSH
22306: LD_VAR 0 2
22310: ST_TO_ADDR
// end ;
22311: LD_VAR 0 1
22315: RET
// export function create_arabi_na_posily_kirovu ; var pom ; begin
22316: LD_INT 0
22318: PPUSH
22319: PPUSH
// pom = [ ] ;
22320: LD_ADDR_VAR 0 2
22324: PUSH
22325: EMPTY
22326: ST_TO_ADDR
// uc_side = Arabi ;
22327: LD_ADDR_OWVAR 20
22331: PUSH
22332: LD_EXP 5
22336: ST_TO_ADDR
// uc_nation = nation_arabian ;
22337: LD_ADDR_OWVAR 21
22341: PUSH
22342: LD_INT 2
22344: ST_TO_ADDR
// vc_weapon = ar_gun ;
22345: LD_ADDR_OWVAR 40
22349: PUSH
22350: LD_INT 27
22352: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
22353: LD_ADDR_OWVAR 37
22357: PUSH
22358: LD_INT 14
22360: ST_TO_ADDR
// vc_control = control_apeman ;
22361: LD_ADDR_OWVAR 38
22365: PUSH
22366: LD_INT 5
22368: ST_TO_ADDR
// vc_engine = engine_combustion ;
22369: LD_ADDR_OWVAR 39
22373: PUSH
22374: LD_INT 1
22376: ST_TO_ADDR
// av = CreateVehicle ;
22377: LD_ADDR_LOC 24
22381: PUSH
22382: CALL_OW 45
22386: ST_TO_ADDR
// pom = pom ^ av ;
22387: LD_ADDR_VAR 0 2
22391: PUSH
22392: LD_VAR 0 2
22396: PUSH
22397: LD_LOC 24
22401: ADD
22402: ST_TO_ADDR
// av = CreateVehicle ;
22403: LD_ADDR_LOC 24
22407: PUSH
22408: CALL_OW 45
22412: ST_TO_ADDR
// pom = pom ^ av ;
22413: LD_ADDR_VAR 0 2
22417: PUSH
22418: LD_VAR 0 2
22422: PUSH
22423: LD_LOC 24
22427: ADD
22428: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22429: LD_ADDR_LOC 23
22433: PUSH
22434: CALL 16739 0 0
22438: PPUSH
22439: LD_INT 3
22441: PPUSH
22442: LD_INT 5
22444: PPUSH
22445: LD_STRING 
22447: PPUSH
22448: CALL 16774 0 4
22452: ST_TO_ADDR
// vc_control = control_manual ;
22453: LD_ADDR_OWVAR 38
22457: PUSH
22458: LD_INT 1
22460: ST_TO_ADDR
// av = CreateVehicle ;
22461: LD_ADDR_LOC 24
22465: PUSH
22466: CALL_OW 45
22470: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22471: LD_LOC 23
22475: PPUSH
22476: LD_LOC 24
22480: PPUSH
22481: CALL_OW 52
// pom = pom ^ av ;
22485: LD_ADDR_VAR 0 2
22489: PUSH
22490: LD_VAR 0 2
22494: PUSH
22495: LD_LOC 24
22499: ADD
22500: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22501: LD_ADDR_LOC 23
22505: PUSH
22506: CALL 16739 0 0
22510: PPUSH
22511: LD_INT 3
22513: PPUSH
22514: LD_INT 5
22516: PPUSH
22517: LD_STRING 
22519: PPUSH
22520: CALL 16774 0 4
22524: ST_TO_ADDR
// vc_control = control_manual ;
22525: LD_ADDR_OWVAR 38
22529: PUSH
22530: LD_INT 1
22532: ST_TO_ADDR
// av = CreateVehicle ;
22533: LD_ADDR_LOC 24
22537: PUSH
22538: CALL_OW 45
22542: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22543: LD_LOC 23
22547: PPUSH
22548: LD_LOC 24
22552: PPUSH
22553: CALL_OW 52
// pom = pom ^ av ;
22557: LD_ADDR_VAR 0 2
22561: PUSH
22562: LD_VAR 0 2
22566: PUSH
22567: LD_LOC 24
22571: ADD
22572: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22573: LD_ADDR_VAR 0 2
22577: PUSH
22578: LD_VAR 0 2
22582: PUSH
22583: CALL 16739 0 0
22587: PPUSH
22588: LD_INT 1
22590: PPUSH
22591: LD_INT 7
22593: PPUSH
22594: LD_STRING 
22596: PPUSH
22597: CALL 16774 0 4
22601: ADD
22602: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22603: LD_ADDR_VAR 0 2
22607: PUSH
22608: LD_VAR 0 2
22612: PUSH
22613: CALL 16739 0 0
22617: PPUSH
22618: LD_INT 1
22620: PPUSH
22621: LD_INT 7
22623: PPUSH
22624: LD_STRING 
22626: PPUSH
22627: CALL 16774 0 4
22631: ADD
22632: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22633: LD_ADDR_VAR 0 2
22637: PUSH
22638: LD_VAR 0 2
22642: PUSH
22643: CALL 16739 0 0
22647: PPUSH
22648: LD_INT 8
22650: PPUSH
22651: LD_INT 7
22653: PPUSH
22654: LD_STRING 
22656: PPUSH
22657: CALL 16774 0 4
22661: ADD
22662: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: LD_VAR 0 2
22672: PUSH
22673: CALL 16739 0 0
22677: PPUSH
22678: LD_INT 8
22680: PPUSH
22681: LD_INT 7
22683: PPUSH
22684: LD_STRING 
22686: PPUSH
22687: CALL 16774 0 4
22691: ADD
22692: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22693: LD_ADDR_VAR 0 2
22697: PUSH
22698: LD_VAR 0 2
22702: PUSH
22703: CALL 16739 0 0
22707: PPUSH
22708: LD_INT 8
22710: PPUSH
22711: LD_INT 7
22713: PPUSH
22714: LD_STRING 
22716: PPUSH
22717: CALL 16774 0 4
22721: ADD
22722: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22723: LD_ADDR_VAR 0 2
22727: PUSH
22728: LD_VAR 0 2
22732: PUSH
22733: CALL 16739 0 0
22737: PPUSH
22738: LD_INT 8
22740: PPUSH
22741: LD_INT 7
22743: PPUSH
22744: LD_STRING 
22746: PPUSH
22747: CALL 16774 0 4
22751: ADD
22752: ST_TO_ADDR
// ARABI_KIROV_POSILY = pom ;
22753: LD_ADDR_EXP 66
22757: PUSH
22758: LD_VAR 0 2
22762: ST_TO_ADDR
// end ;
22763: LD_VAR 0 1
22767: RET
// export function create_cerpaci_ruske_auta ; var pom ; begin
22768: LD_INT 0
22770: PPUSH
22771: PPUSH
// pom = [ ] ;
22772: LD_ADDR_VAR 0 2
22776: PUSH
22777: EMPTY
22778: ST_TO_ADDR
// uc_nation = nation_russian ;
22779: LD_ADDR_OWVAR 21
22783: PUSH
22784: LD_INT 3
22786: ST_TO_ADDR
// uc_side = You2 ;
22787: LD_ADDR_OWVAR 20
22791: PUSH
22792: LD_EXP 2
22796: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
22797: LD_ADDR_OWVAR 40
22801: PUSH
22802: LD_INT 51
22804: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22805: LD_ADDR_OWVAR 37
22809: PUSH
22810: LD_INT 21
22812: ST_TO_ADDR
// vc_control = control_manual ;
22813: LD_ADDR_OWVAR 38
22817: PUSH
22818: LD_INT 1
22820: ST_TO_ADDR
// vc_engine = engine_combustion ;
22821: LD_ADDR_OWVAR 39
22825: PUSH
22826: LD_INT 1
22828: ST_TO_ADDR
// av = CreateVehicle ;
22829: LD_ADDR_LOC 24
22833: PUSH
22834: CALL_OW 45
22838: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22839: LD_ADDR_LOC 23
22843: PUSH
22844: CALL 16739 0 0
22848: PPUSH
22849: LD_INT 1
22851: PPUSH
22852: LD_INT 4
22854: PPUSH
22855: LD_STRING 
22857: PPUSH
22858: CALL 16774 0 4
22862: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22863: LD_LOC 23
22867: PPUSH
22868: LD_LOC 24
22872: PPUSH
22873: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22877: LD_LOC 24
22881: PPUSH
22882: LD_INT 2
22884: PPUSH
22885: LD_INT 100
22887: PPUSH
22888: CALL_OW 290
// pom = pom ^ av ;
22892: LD_ADDR_VAR 0 2
22896: PUSH
22897: LD_VAR 0 2
22901: PUSH
22902: LD_LOC 24
22906: ADD
22907: ST_TO_ADDR
// av = CreateVehicle ;
22908: LD_ADDR_LOC 24
22912: PUSH
22913: CALL_OW 45
22917: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22918: LD_ADDR_LOC 23
22922: PUSH
22923: CALL 16739 0 0
22927: PPUSH
22928: LD_INT 1
22930: PPUSH
22931: LD_INT 4
22933: PPUSH
22934: LD_STRING 
22936: PPUSH
22937: CALL 16774 0 4
22941: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22942: LD_LOC 23
22946: PPUSH
22947: LD_LOC 24
22951: PPUSH
22952: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22956: LD_LOC 24
22960: PPUSH
22961: LD_INT 2
22963: PPUSH
22964: LD_INT 100
22966: PPUSH
22967: CALL_OW 290
// pom = pom ^ av ;
22971: LD_ADDR_VAR 0 2
22975: PUSH
22976: LD_VAR 0 2
22980: PUSH
22981: LD_LOC 24
22985: ADD
22986: ST_TO_ADDR
// av = CreateVehicle ;
22987: LD_ADDR_LOC 24
22991: PUSH
22992: CALL_OW 45
22996: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22997: LD_ADDR_LOC 23
23001: PUSH
23002: CALL 16739 0 0
23006: PPUSH
23007: LD_INT 1
23009: PPUSH
23010: LD_INT 4
23012: PPUSH
23013: LD_STRING 
23015: PPUSH
23016: CALL 16774 0 4
23020: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
23021: LD_LOC 23
23025: PPUSH
23026: LD_LOC 24
23030: PPUSH
23031: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
23035: LD_LOC 24
23039: PPUSH
23040: LD_INT 2
23042: PPUSH
23043: LD_INT 100
23045: PPUSH
23046: CALL_OW 290
// pom = pom ^ av ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_VAR 0 2
23059: PUSH
23060: LD_LOC 24
23064: ADD
23065: ST_TO_ADDR
// RUSI_CERPACI_AUTA_LIST = pom ;
23066: LD_ADDR_EXP 59
23070: PUSH
23071: LD_VAR 0 2
23075: ST_TO_ADDR
// end ; end_of_file
23076: LD_VAR 0 1
23080: RET
// var Am_hlidka ; var Am_pomoc ; export Am_posily ; export Prezite_posily ; every 0 0$0.1 do var i ;
23081: GO 23083
23083: DISABLE
23084: LD_INT 0
23086: PPUSH
// begin Am_hlidka = [ ] ;
23087: LD_ADDR_LOC 25
23091: PUSH
23092: EMPTY
23093: ST_TO_ADDR
// Am_pomoc = [ ] ;
23094: LD_ADDR_LOC 26
23098: PUSH
23099: EMPTY
23100: ST_TO_ADDR
// Prezite_posily = 0 ;
23101: LD_ADDR_EXP 73
23105: PUSH
23106: LD_INT 0
23108: ST_TO_ADDR
// for i in [ 101 , 102 , 103 ] do
23109: LD_ADDR_VAR 0 1
23113: PUSH
23114: LD_INT 101
23116: PUSH
23117: LD_INT 102
23119: PUSH
23120: LD_INT 103
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: PUSH
23128: FOR_IN
23129: IFFALSE 23138
// enable ( i ) end ;
23131: LD_VAR 0 1
23135: ENABLE_MARKED
23136: GO 23128
23138: POP
23139: POP
23140: PPOPN 1
23142: END
// export function PrepareOmicron ; var i , skill ; begin
23143: LD_INT 0
23145: PPUSH
23146: PPUSH
23147: PPUSH
// uc_side := 1 ;
23148: LD_ADDR_OWVAR 20
23152: PUSH
23153: LD_INT 1
23155: ST_TO_ADDR
// uc_nation := 1 ;
23156: LD_ADDR_OWVAR 21
23160: PUSH
23161: LD_INT 1
23163: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
23164: LD_ADDR_VAR 0 3
23168: PUSH
23169: LD_INT 3
23171: PUSH
23172: LD_INT 4
23174: PUSH
23175: LD_INT 5
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: PUSH
23183: LD_OWVAR 67
23187: ARRAY
23188: ST_TO_ADDR
// for i = 1 to Difficulty do
23189: LD_ADDR_VAR 0 2
23193: PUSH
23194: DOUBLE
23195: LD_INT 1
23197: DEC
23198: ST_TO_ADDR
23199: LD_OWVAR 67
23203: PUSH
23204: FOR_TO
23205: IFFALSE 23245
// begin PrepareHuman ( false , 2 , skill ) ;
23207: LD_INT 0
23209: PPUSH
23210: LD_INT 2
23212: PPUSH
23213: LD_VAR 0 3
23217: PPUSH
23218: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 20 , 13 , 6 , false ) ;
23222: CALL_OW 44
23226: PPUSH
23227: LD_INT 20
23229: PPUSH
23230: LD_INT 13
23232: PPUSH
23233: LD_INT 6
23235: PPUSH
23236: LD_INT 0
23238: PPUSH
23239: CALL_OW 50
// end ;
23243: GO 23204
23245: POP
23246: POP
// if Difficulty > 1 then
23247: LD_OWVAR 67
23251: PUSH
23252: LD_INT 1
23254: GREATER
23255: IFFALSE 23267
// begin PlaceWeaponTurret ( Am_bu1 , us_gatling_gun ) ;
23257: LD_INT 7
23259: PPUSH
23260: LD_INT 4
23262: PPUSH
23263: CALL_OW 431
// end ; end ;
23267: LD_VAR 0 1
23271: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var i , engs , buildings ;
23272: LD_INT 22
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 25
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PPUSH
23296: CALL_OW 69
23300: IFFALSE 23505
23302: GO 23304
23304: DISABLE
23305: LD_INT 0
23307: PPUSH
23308: PPUSH
23309: PPUSH
// begin enable ;
23310: ENABLE
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23311: LD_ADDR_VAR 0 3
23315: PUSH
23316: LD_INT 22
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 30
23328: PUSH
23329: LD_INT 4
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 3
23338: PUSH
23339: LD_INT 24
23341: PUSH
23342: LD_INT 1000
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: PPUSH
23358: CALL_OW 69
23362: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
23363: LD_ADDR_VAR 0 2
23367: PUSH
23368: LD_INT 22
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 25
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PPUSH
23392: CALL_OW 69
23396: ST_TO_ADDR
// for i in engs do
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_VAR 0 2
23406: PUSH
23407: FOR_IN
23408: IFFALSE 23503
// if not HasTask ( i ) and not IsInUnit ( i ) and not buildings then
23410: LD_VAR 0 1
23414: PPUSH
23415: CALL_OW 314
23419: NOT
23420: PUSH
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL_OW 310
23430: NOT
23431: AND
23432: PUSH
23433: LD_VAR 0 3
23437: NOT
23438: AND
23439: IFFALSE 23455
// ComEnterUnit ( i , Am_dep ) else
23441: LD_VAR 0 1
23445: PPUSH
23446: LD_INT 12
23448: PPUSH
23449: CALL_OW 120
23453: GO 23501
// if buildings then
23455: LD_VAR 0 3
23459: IFFALSE 23501
// if IsInUnit ( i ) then
23461: LD_VAR 0 1
23465: PPUSH
23466: CALL_OW 310
23470: IFFALSE 23483
// ComExitBuilding ( i ) else
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 122
23481: GO 23501
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: LD_VAR 0 3
23492: PUSH
23493: LD_INT 1
23495: ARRAY
23496: PPUSH
23497: CALL_OW 130
23501: GO 23407
23503: POP
23504: POP
// end ;
23505: PPOPN 3
23507: END
// every 0 0$1 do var budovy ;
23508: GO 23510
23510: DISABLE
23511: LD_INT 0
23513: PPUSH
// begin PrepareOmicron ;
23514: CALL 23143 0 0
// ComEnterUnit ( Am_pru1 , Am_bar2 ) ;
23518: LD_INT 26
23520: PPUSH
23521: LD_INT 25
23523: PPUSH
23524: CALL_OW 120
// ComEnterUnit ( Am_pru2 , Am_bar2 ) ;
23528: LD_INT 27
23530: PPUSH
23531: LD_INT 25
23533: PPUSH
23534: CALL_OW 120
// ComEnterUnit ( Am_pru3 , Am_bar2 ) ;
23538: LD_INT 28
23540: PPUSH
23541: LD_INT 25
23543: PPUSH
23544: CALL_OW 120
// ComEnterUnit ( Am_vb1 , Am_bu1 ) ;
23548: LD_INT 29
23550: PPUSH
23551: LD_INT 7
23553: PPUSH
23554: CALL_OW 120
// ComEnterUnit ( Am_vb2 , Am_bu2 ) ;
23558: LD_INT 30
23560: PPUSH
23561: LD_INT 8
23563: PPUSH
23564: CALL_OW 120
// ComEnterUnit ( Am_vb3 , Am_bu3 ) ;
23568: LD_INT 31
23570: PPUSH
23571: LD_INT 19
23573: PPUSH
23574: CALL_OW 120
// ComEnterUnit ( Am_vb4 , Am_bu4 ) ;
23578: LD_INT 32
23580: PPUSH
23581: LD_INT 18
23583: PPUSH
23584: CALL_OW 120
// ComEnterUnit ( Am_sol1 , Am_bar1 ) ;
23588: LD_INT 38
23590: PPUSH
23591: LD_INT 11
23593: PPUSH
23594: CALL_OW 120
// ComEnterUnit ( Am_sol2 , Am_bar1 ) ;
23598: LD_INT 39
23600: PPUSH
23601: LD_INT 11
23603: PPUSH
23604: CALL_OW 120
// ComEnterUnit ( Am_sol3 , Am_bar1 ) ;
23608: LD_INT 40
23610: PPUSH
23611: LD_INT 11
23613: PPUSH
23614: CALL_OW 120
// ComEnterUnit ( pitomec , Am_bar2 ) ;
23618: LD_INT 63
23620: PPUSH
23621: LD_INT 25
23623: PPUSH
23624: CALL_OW 120
// ComEnterUnit ( Am_sol4 , Am_dep ) ;
23628: LD_INT 41
23630: PPUSH
23631: LD_INT 12
23633: PPUSH
23634: CALL_OW 120
// ComEnterUnit ( Am_eng1 , Am_dep ) ;
23638: LD_INT 36
23640: PPUSH
23641: LD_INT 12
23643: PPUSH
23644: CALL_OW 120
// ComEnterUnit ( Am_sci1 , Am_lab ) ;
23648: LD_INT 37
23650: PPUSH
23651: LD_INT 9
23653: PPUSH
23654: CALL_OW 120
// ComEnterUnit ( Am_me1 , Am_fac ) ;
23658: LD_INT 33
23660: PPUSH
23661: LD_INT 10
23663: PPUSH
23664: CALL_OW 120
// ComEnterUnit ( Am_me2 , Am_fac ) ;
23668: LD_INT 34
23670: PPUSH
23671: LD_INT 10
23673: PPUSH
23674: CALL_OW 120
// ComEnterUnit ( Am_me3 , Am_fac ) ;
23678: LD_INT 35
23680: PPUSH
23681: LD_INT 10
23683: PPUSH
23684: CALL_OW 120
// budovy = [ Am_bu1 , Am_bu2 , Am_bu3 , Am_bu4 , Am_el1 , Am_el2 , Am_lab , Am_fac , Am_mine , Am_dep , Am_bar1 , Am_bar2 ] ;
23688: LD_ADDR_VAR 0 1
23692: PUSH
23693: LD_INT 7
23695: PUSH
23696: LD_INT 8
23698: PUSH
23699: LD_INT 19
23701: PUSH
23702: LD_INT 18
23704: PUSH
23705: LD_INT 22
23707: PUSH
23708: LD_INT 23
23710: PUSH
23711: LD_INT 9
23713: PUSH
23714: LD_INT 10
23716: PUSH
23717: LD_INT 24
23719: PUSH
23720: LD_INT 12
23722: PUSH
23723: LD_INT 11
23725: PUSH
23726: LD_INT 25
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: ST_TO_ADDR
// SetBLevel ( budovy , levely_am_budov [ difficulty ] ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_EXP 21
23752: PUSH
23753: LD_OWVAR 67
23757: ARRAY
23758: PPUSH
23759: CALL_OW 241
// end ;
23763: PPOPN 1
23765: END
// export function amici_hlidka ; begin
23766: LD_INT 0
23768: PPUSH
// case difficulty of 1 :
23769: LD_OWVAR 67
23773: PUSH
23774: LD_INT 1
23776: DOUBLE
23777: EQUAL
23778: IFTRUE 23782
23780: GO 23796
23782: POP
// Am_hlidka = [ Am_pru1 ] ; 2 :
23783: LD_ADDR_LOC 25
23787: PUSH
23788: LD_INT 26
23790: PUSH
23791: EMPTY
23792: LIST
23793: ST_TO_ADDR
23794: GO 23853
23796: LD_INT 2
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23822
23804: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 ] ; 3 :
23805: LD_ADDR_LOC 25
23809: PUSH
23810: LD_INT 26
23812: PUSH
23813: LD_INT 27
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: ST_TO_ADDR
23820: GO 23853
23822: LD_INT 3
23824: DOUBLE
23825: EQUAL
23826: IFTRUE 23830
23828: GO 23852
23830: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 , Am_pru3 ] ; end ;
23831: LD_ADDR_LOC 25
23835: PUSH
23836: LD_INT 26
23838: PUSH
23839: LD_INT 27
23841: PUSH
23842: LD_INT 28
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: ST_TO_ADDR
23850: GO 23853
23852: POP
// ComExitBuilding ( Am_hlidka ) ;
23853: LD_LOC 25
23857: PPUSH
23858: CALL_OW 122
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23862: LD_LOC 25
23866: PPUSH
23867: LD_INT 34
23869: PPUSH
23870: LD_INT 16
23872: PPUSH
23873: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23877: LD_LOC 25
23881: PPUSH
23882: LD_INT 245
23884: PPUSH
23885: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23889: LD_LOC 25
23893: PPUSH
23894: LD_INT 51
23896: PPUSH
23897: LD_INT 19
23899: PPUSH
23900: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23904: LD_LOC 25
23908: PPUSH
23909: LD_INT 245
23911: PPUSH
23912: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23916: LD_LOC 25
23920: PPUSH
23921: LD_INT 54
23923: PPUSH
23924: LD_INT 5
23926: PPUSH
23927: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23931: LD_LOC 25
23935: PPUSH
23936: LD_INT 245
23938: PPUSH
23939: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23943: LD_LOC 25
23947: PPUSH
23948: LD_INT 77
23950: PPUSH
23951: LD_INT 16
23953: PPUSH
23954: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23958: LD_LOC 25
23962: PPUSH
23963: LD_INT 245
23965: PPUSH
23966: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23970: LD_LOC 25
23974: PPUSH
23975: LD_INT 81
23977: PPUSH
23978: LD_INT 32
23980: PPUSH
23981: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23985: LD_LOC 25
23989: PPUSH
23990: LD_INT 245
23992: PPUSH
23993: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23997: LD_LOC 25
24001: PPUSH
24002: LD_INT 73
24004: PPUSH
24005: LD_INT 32
24007: PPUSH
24008: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24012: LD_LOC 25
24016: PPUSH
24017: LD_INT 245
24019: PPUSH
24020: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24024: LD_LOC 25
24028: PPUSH
24029: LD_INT 57
24031: PPUSH
24032: LD_INT 33
24034: PPUSH
24035: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24039: LD_LOC 25
24043: PPUSH
24044: LD_INT 245
24046: PPUSH
24047: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24051: LD_LOC 25
24055: PPUSH
24056: LD_INT 45
24058: PPUSH
24059: LD_INT 24
24061: PPUSH
24062: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24066: LD_LOC 25
24070: PPUSH
24071: LD_INT 245
24073: PPUSH
24074: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24078: LD_LOC 25
24082: PPUSH
24083: LD_INT 34
24085: PPUSH
24086: LD_INT 13
24088: PPUSH
24089: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24093: LD_LOC 25
24097: PPUSH
24098: LD_INT 245
24100: PPUSH
24101: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24105: LD_LOC 25
24109: PPUSH
24110: LD_INT 34
24112: PPUSH
24113: LD_INT 16
24115: PPUSH
24116: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24120: LD_LOC 25
24124: PPUSH
24125: LD_INT 245
24127: PPUSH
24128: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24132: LD_LOC 25
24136: PPUSH
24137: LD_INT 51
24139: PPUSH
24140: LD_INT 19
24142: PPUSH
24143: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24147: LD_LOC 25
24151: PPUSH
24152: LD_INT 245
24154: PPUSH
24155: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24159: LD_LOC 25
24163: PPUSH
24164: LD_INT 54
24166: PPUSH
24167: LD_INT 5
24169: PPUSH
24170: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24174: LD_LOC 25
24178: PPUSH
24179: LD_INT 245
24181: PPUSH
24182: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24186: LD_LOC 25
24190: PPUSH
24191: LD_INT 77
24193: PPUSH
24194: LD_INT 16
24196: PPUSH
24197: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24201: LD_LOC 25
24205: PPUSH
24206: LD_INT 245
24208: PPUSH
24209: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24213: LD_LOC 25
24217: PPUSH
24218: LD_INT 81
24220: PPUSH
24221: LD_INT 32
24223: PPUSH
24224: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24228: LD_LOC 25
24232: PPUSH
24233: LD_INT 245
24235: PPUSH
24236: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24240: LD_LOC 25
24244: PPUSH
24245: LD_INT 73
24247: PPUSH
24248: LD_INT 32
24250: PPUSH
24251: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24255: LD_LOC 25
24259: PPUSH
24260: LD_INT 245
24262: PPUSH
24263: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24267: LD_LOC 25
24271: PPUSH
24272: LD_INT 57
24274: PPUSH
24275: LD_INT 33
24277: PPUSH
24278: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24282: LD_LOC 25
24286: PPUSH
24287: LD_INT 245
24289: PPUSH
24290: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24294: LD_LOC 25
24298: PPUSH
24299: LD_INT 45
24301: PPUSH
24302: LD_INT 24
24304: PPUSH
24305: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24309: LD_LOC 25
24313: PPUSH
24314: LD_INT 245
24316: PPUSH
24317: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24321: LD_LOC 25
24325: PPUSH
24326: LD_INT 34
24328: PPUSH
24329: LD_INT 13
24331: PPUSH
24332: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24336: LD_LOC 25
24340: PPUSH
24341: LD_INT 245
24343: PPUSH
24344: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24348: LD_LOC 25
24352: PPUSH
24353: LD_INT 34
24355: PPUSH
24356: LD_INT 16
24358: PPUSH
24359: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24363: LD_LOC 25
24367: PPUSH
24368: LD_INT 245
24370: PPUSH
24371: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24375: LD_LOC 25
24379: PPUSH
24380: LD_INT 51
24382: PPUSH
24383: LD_INT 19
24385: PPUSH
24386: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24390: LD_LOC 25
24394: PPUSH
24395: LD_INT 245
24397: PPUSH
24398: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24402: LD_LOC 25
24406: PPUSH
24407: LD_INT 54
24409: PPUSH
24410: LD_INT 5
24412: PPUSH
24413: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24417: LD_LOC 25
24421: PPUSH
24422: LD_INT 245
24424: PPUSH
24425: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24429: LD_LOC 25
24433: PPUSH
24434: LD_INT 77
24436: PPUSH
24437: LD_INT 16
24439: PPUSH
24440: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24444: LD_LOC 25
24448: PPUSH
24449: LD_INT 245
24451: PPUSH
24452: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24456: LD_LOC 25
24460: PPUSH
24461: LD_INT 81
24463: PPUSH
24464: LD_INT 32
24466: PPUSH
24467: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24471: LD_LOC 25
24475: PPUSH
24476: LD_INT 245
24478: PPUSH
24479: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24483: LD_LOC 25
24487: PPUSH
24488: LD_INT 73
24490: PPUSH
24491: LD_INT 32
24493: PPUSH
24494: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24498: LD_LOC 25
24502: PPUSH
24503: LD_INT 245
24505: PPUSH
24506: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24510: LD_LOC 25
24514: PPUSH
24515: LD_INT 57
24517: PPUSH
24518: LD_INT 33
24520: PPUSH
24521: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24525: LD_LOC 25
24529: PPUSH
24530: LD_INT 245
24532: PPUSH
24533: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24537: LD_LOC 25
24541: PPUSH
24542: LD_INT 45
24544: PPUSH
24545: LD_INT 24
24547: PPUSH
24548: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24552: LD_LOC 25
24556: PPUSH
24557: LD_INT 245
24559: PPUSH
24560: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24564: LD_LOC 25
24568: PPUSH
24569: LD_INT 34
24571: PPUSH
24572: LD_INT 13
24574: PPUSH
24575: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24579: LD_LOC 25
24583: PPUSH
24584: LD_INT 245
24586: PPUSH
24587: CALL_OW 202
// enable ( 101 ) ;
24591: LD_INT 101
24593: ENABLE_MARKED
// enable ( 103 ) ;
24594: LD_INT 103
24596: ENABLE_MARKED
// enable ( 102 ) ;
24597: LD_INT 102
24599: ENABLE_MARKED
// end ;
24600: LD_VAR 0 1
24604: RET
// every 0 0$1 marked 102 do var i , j , pom ;
24605: GO 24607
24607: DISABLE
24608: LD_INT 0
24610: PPUSH
24611: PPUSH
24612: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
24613: LD_ADDR_VAR 0 3
24617: PUSH
24618: LD_INT 22
24620: PUSH
24621: LD_EXP 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 21
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: ST_TO_ADDR
// for i in Am_hlidka do
24649: LD_ADDR_VAR 0 1
24653: PUSH
24654: LD_LOC 25
24658: PUSH
24659: FOR_IN
24660: IFFALSE 24728
// if GetLives ( i ) < 1000 then
24662: LD_VAR 0 1
24666: PPUSH
24667: CALL_OW 256
24671: PUSH
24672: LD_INT 1000
24674: LESS
24675: IFFALSE 24726
// for j in pom do
24677: LD_ADDR_VAR 0 2
24681: PUSH
24682: LD_VAR 0 3
24686: PUSH
24687: FOR_IN
24688: IFFALSE 24724
// begin if See ( Amici , j ) then
24690: LD_EXP 4
24694: PPUSH
24695: LD_VAR 0 2
24699: PPUSH
24700: CALL_OW 292
24704: IFFALSE 24720
// ComAttackUnit ( Am_hlidka , j ) ;
24706: LD_LOC 25
24710: PPUSH
24711: LD_VAR 0 2
24715: PPUSH
24716: CALL_OW 115
// break ;
24720: GO 24724
// end ;
24722: GO 24687
24724: POP
24725: POP
24726: GO 24659
24728: POP
24729: POP
// end ;
24730: PPOPN 3
24732: END
// every 0 0$1 marked 101 do var i ; var jedn ; var posli ;
24733: GO 24735
24735: DISABLE
24736: LD_INT 0
24738: PPUSH
24739: PPUSH
24740: PPUSH
// begin jedn = [ ] ;
24741: LD_ADDR_VAR 0 2
24745: PUSH
24746: EMPTY
24747: ST_TO_ADDR
// posli = false ;
24748: LD_ADDR_VAR 0 3
24752: PUSH
24753: LD_INT 0
24755: ST_TO_ADDR
// for i in Am_hlidka do
24756: LD_ADDR_VAR 0 1
24760: PUSH
24761: LD_LOC 25
24765: PUSH
24766: FOR_IN
24767: IFFALSE 24802
// if GetLives ( i ) < 1000 then
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL_OW 256
24778: PUSH
24779: LD_INT 1000
24781: LESS
24782: IFFALSE 24800
// jedn = jedn ^ i ;
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_VAR 0 2
24793: PUSH
24794: LD_VAR 0 1
24798: ADD
24799: ST_TO_ADDR
24800: GO 24766
24802: POP
24803: POP
// if jedn > 0 then
24804: LD_VAR 0 2
24808: PUSH
24809: LD_INT 0
24811: GREATER
24812: IFFALSE 24857
// begin wait ( 0 0$7 ) ;
24814: LD_INT 245
24816: PPUSH
24817: CALL_OW 67
// for i in jedn do
24821: LD_ADDR_VAR 0 1
24825: PUSH
24826: LD_VAR 0 2
24830: PUSH
24831: FOR_IN
24832: IFFALSE 24855
// if IsOK ( i ) then
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 302
24843: IFFALSE 24853
// posli = true ;
24845: LD_ADDR_VAR 0 3
24849: PUSH
24850: LD_INT 1
24852: ST_TO_ADDR
24853: GO 24831
24855: POP
24856: POP
// end ; if posli then
24857: LD_VAR 0 3
24861: IFFALSE 24876
// americka_pomoc_hlidce ( jedn [ 1 ] ) ;
24863: LD_VAR 0 2
24867: PUSH
24868: LD_INT 1
24870: ARRAY
24871: PPUSH
24872: CALL 25035 0 1
// enable ;
24876: ENABLE
// end ;
24877: PPOPN 3
24879: END
// every 0 0$1 marked 102 do
24880: GO 24882
24882: DISABLE
// begin wait ( schol_find_amikama [ difficulty ] ) ;
24883: LD_EXP 12
24887: PUSH
24888: LD_OWVAR 67
24892: ARRAY
24893: PPUSH
24894: CALL_OW 67
// if GetSide ( schol ) = You or GetSide ( schol2 ) = You then
24898: LD_EXP 33
24902: PPUSH
24903: CALL_OW 255
24907: PUSH
24908: LD_EXP 1
24912: EQUAL
24913: PUSH
24914: LD_EXP 34
24918: PPUSH
24919: CALL_OW 255
24923: PUSH
24924: LD_EXP 1
24928: EQUAL
24929: OR
24930: IFFALSE 24936
// exit else
24932: GO 24965
24934: GO 24965
// begin ComAgressiveMove ( Am_hlidka , 38 , 2 ) ;
24936: LD_LOC 25
24940: PPUSH
24941: LD_INT 38
24943: PPUSH
24944: LD_INT 2
24946: PPUSH
24947: CALL_OW 114
// AddComAttackUnit ( Am_hlidka , schol2 ) ;
24951: LD_LOC 25
24955: PPUSH
24956: LD_EXP 34
24960: PPUSH
24961: CALL_OW 175
// end ; end ;
24965: END
// every 0 0$3 trigger scholtze_saved or IsDead ( schol2 ) do
24966: LD_EXP 37
24970: PUSH
24971: LD_EXP 34
24975: PPUSH
24976: CALL_OW 301
24980: OR
24981: IFFALSE 25034
24983: GO 24985
24985: DISABLE
// begin ComAgressiveMove ( Am_hlidka , 28 , 18 ) ;
24986: LD_LOC 25
24990: PPUSH
24991: LD_INT 28
24993: PPUSH
24994: LD_INT 18
24996: PPUSH
24997: CALL_OW 114
// AddComEnterUnit ( Am_hlidka , Am_bar2 ) ;
25001: LD_LOC 25
25005: PPUSH
25006: LD_INT 25
25008: PPUSH
25009: CALL_OW 180
// ComAgressiveMove ( Am_pomoc , 21 , 32 ) ;
25013: LD_LOC 26
25017: PPUSH
25018: LD_INT 21
25020: PPUSH
25021: LD_INT 32
25023: PPUSH
25024: CALL_OW 114
// disable ( 101 ) ;
25028: LD_INT 101
25030: DISABLE_MARKED
// disable ( 102 ) ;
25031: LD_INT 102
25033: DISABLE_MARKED
// end ;
25034: END
// function americka_pomoc_hlidce ( jedn ) ; var i ; begin
25035: LD_INT 0
25037: PPUSH
25038: PPUSH
// Am_pomoc = AMERICKA_POMOC_HLIDCE_LIST ;
25039: LD_ADDR_LOC 26
25043: PUSH
25044: LD_EXP 50
25048: ST_TO_ADDR
// while SeeArea ( Amici , Help_area ) > 0 do
25049: LD_EXP 4
25053: PPUSH
25054: LD_INT 3
25056: PPUSH
25057: CALL_OW 294
25061: PUSH
25062: LD_INT 0
25064: GREATER
25065: IFFALSE 25076
// wait ( 0 0$1 ) ;
25067: LD_INT 35
25069: PPUSH
25070: CALL_OW 67
25074: GO 25049
// for i in AMERICKA_POMOC_HLIDCE_LIST do
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_EXP 50
25085: PUSH
25086: FOR_IN
25087: IFFALSE 25106
// PlaceUnitArea ( i , Help_area , false ) ;
25089: LD_VAR 0 3
25093: PPUSH
25094: LD_INT 3
25096: PPUSH
25097: LD_INT 0
25099: PPUSH
25100: CALL_OW 49
25104: GO 25086
25106: POP
25107: POP
// wait ( 0 0$1 ) ;
25108: LD_INT 35
25110: PPUSH
25111: CALL_OW 67
// ComAgressiveMove ( Am_pomoc , GetX ( jedn ) , GetY ( jedn ) ) ;
25115: LD_LOC 26
25119: PPUSH
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL_OW 250
25129: PPUSH
25130: LD_VAR 0 1
25134: PPUSH
25135: CALL_OW 251
25139: PPUSH
25140: CALL_OW 114
// end ;
25144: LD_VAR 0 2
25148: RET
// every 0 0$10 do
25149: GO 25151
25151: DISABLE
// begin wait ( Rand ( 1 , 0 0$30 ) ) ;
25152: LD_INT 1
25154: PPUSH
25155: LD_INT 1050
25157: PPUSH
25158: CALL_OW 12
25162: PPUSH
25163: CALL_OW 67
// wait ( posily1 [ difficulty ] ) ;
25167: LD_EXP 14
25171: PUSH
25172: LD_OWVAR 67
25176: ARRAY
25177: PPUSH
25178: CALL_OW 67
// posli_posily ( 1 ) ;
25182: LD_INT 1
25184: PPUSH
25185: CALL 25278 0 1
// wait ( posily11 [ difficulty ] ) ;
25189: LD_EXP 15
25193: PUSH
25194: LD_OWVAR 67
25198: ARRAY
25199: PPUSH
25200: CALL_OW 67
// posli_posily ( 11 ) ;
25204: LD_INT 11
25206: PPUSH
25207: CALL 25278 0 1
// wait ( posily2 [ difficulty ] ) ;
25211: LD_EXP 16
25215: PUSH
25216: LD_OWVAR 67
25220: ARRAY
25221: PPUSH
25222: CALL_OW 67
// posli_posily ( 2 ) ;
25226: LD_INT 2
25228: PPUSH
25229: CALL 25278 0 1
// wait ( posily3 [ difficulty ] ) ;
25233: LD_EXP 17
25237: PUSH
25238: LD_OWVAR 67
25242: ARRAY
25243: PPUSH
25244: CALL_OW 67
// posli_posily ( 3 ) ;
25248: LD_INT 3
25250: PPUSH
25251: CALL 25278 0 1
// wait ( posily4 [ difficulty ] ) ;
25255: LD_EXP 18
25259: PUSH
25260: LD_OWVAR 67
25264: ARRAY
25265: PPUSH
25266: CALL_OW 67
// posli_posily ( 4 ) ;
25270: LD_INT 4
25272: PPUSH
25273: CALL 25278 0 1
// end ;
25277: END
// function posli_posily ( ktere ) ; var i , pom ; var poc ; begin
25278: LD_INT 0
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
// case ktere of 1 :
25284: LD_VAR 0 1
25288: PUSH
25289: LD_INT 1
25291: DOUBLE
25292: EQUAL
25293: IFTRUE 25297
25295: GO 25332
25297: POP
// for i in AMERICKE_POSILY1_LIST do
25298: LD_ADDR_VAR 0 3
25302: PUSH
25303: LD_EXP 51
25307: PUSH
25308: FOR_IN
25309: IFFALSE 25328
// PlaceUnitArea ( i , posily_1 , false ) ; 2 :
25311: LD_VAR 0 3
25315: PPUSH
25316: LD_INT 4
25318: PPUSH
25319: LD_INT 0
25321: PPUSH
25322: CALL_OW 49
25326: GO 25308
25328: POP
25329: POP
25330: GO 25505
25332: LD_INT 2
25334: DOUBLE
25335: EQUAL
25336: IFTRUE 25340
25338: GO 25375
25340: POP
// for i in AMERICKE_POSILY2_LIST do
25341: LD_ADDR_VAR 0 3
25345: PUSH
25346: LD_EXP 52
25350: PUSH
25351: FOR_IN
25352: IFFALSE 25371
// PlaceUnitArea ( i , posily_3 , false ) ; 3 :
25354: LD_VAR 0 3
25358: PPUSH
25359: LD_INT 5
25361: PPUSH
25362: LD_INT 0
25364: PPUSH
25365: CALL_OW 49
25369: GO 25351
25371: POP
25372: POP
25373: GO 25505
25375: LD_INT 3
25377: DOUBLE
25378: EQUAL
25379: IFTRUE 25383
25381: GO 25418
25383: POP
// for i in AMERICKE_POSILY3_LIST do
25384: LD_ADDR_VAR 0 3
25388: PUSH
25389: LD_EXP 53
25393: PUSH
25394: FOR_IN
25395: IFFALSE 25414
// PlaceUnitArea ( i , posily_1 , false ) ; 4 :
25397: LD_VAR 0 3
25401: PPUSH
25402: LD_INT 4
25404: PPUSH
25405: LD_INT 0
25407: PPUSH
25408: CALL_OW 49
25412: GO 25394
25414: POP
25415: POP
25416: GO 25505
25418: LD_INT 4
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25461
25426: POP
// for i in AMERICKE_POSILY4_LIST do
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_EXP 54
25436: PUSH
25437: FOR_IN
25438: IFFALSE 25457
// PlaceUnitArea ( i , posily_3 , false ) ; 11 :
25440: LD_VAR 0 3
25444: PPUSH
25445: LD_INT 5
25447: PPUSH
25448: LD_INT 0
25450: PPUSH
25451: CALL_OW 49
25455: GO 25437
25457: POP
25458: POP
25459: GO 25505
25461: LD_INT 11
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25504
25469: POP
// for i in AMERICKE_POSILY11_LIST do
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_EXP 55
25479: PUSH
25480: FOR_IN
25481: IFFALSE 25500
// PlaceUnitArea ( i , posily_1 , false ) ; end ;
25483: LD_VAR 0 3
25487: PPUSH
25488: LD_INT 4
25490: PPUSH
25491: LD_INT 0
25493: PPUSH
25494: CALL_OW 49
25498: GO 25480
25500: POP
25501: POP
25502: GO 25505
25504: POP
// case ktere of 1 :
25505: LD_VAR 0 1
25509: PUSH
25510: LD_INT 1
25512: DOUBLE
25513: EQUAL
25514: IFTRUE 25518
25516: GO 25576
25518: POP
// begin Am_posily = AMERICKE_POSILY1_LIST ;
25519: LD_ADDR_EXP 72
25523: PUSH
25524: LD_EXP 51
25528: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25529: LD_EXP 72
25533: PPUSH
25534: LD_INT 42
25536: PPUSH
25537: LD_INT 69
25539: PPUSH
25540: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25544: LD_EXP 72
25548: PPUSH
25549: LD_INT 28
25551: PPUSH
25552: LD_INT 47
25554: PPUSH
25555: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25559: LD_EXP 72
25563: PPUSH
25564: LD_INT 20
25566: PPUSH
25567: LD_INT 12
25569: PPUSH
25570: CALL_OW 174
// end ; 2 :
25574: GO 25871
25576: LD_INT 2
25578: DOUBLE
25579: EQUAL
25580: IFTRUE 25584
25582: GO 25657
25584: POP
// begin Am_posily = AMERICKE_POSILY2_LIST ;
25585: LD_ADDR_EXP 72
25589: PUSH
25590: LD_EXP 52
25594: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25595: LD_EXP 72
25599: PPUSH
25600: LD_INT 110
25602: PPUSH
25603: LD_INT 23
25605: PPUSH
25606: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25610: LD_EXP 72
25614: PPUSH
25615: LD_INT 87
25617: PPUSH
25618: LD_INT 19
25620: PPUSH
25621: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25625: LD_EXP 72
25629: PPUSH
25630: LD_INT 52
25632: PPUSH
25633: LD_INT 12
25635: PPUSH
25636: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
25640: LD_EXP 72
25644: PPUSH
25645: LD_INT 27
25647: PPUSH
25648: LD_INT 13
25650: PPUSH
25651: CALL_OW 174
// end ; 3 :
25655: GO 25871
25657: LD_INT 3
25659: DOUBLE
25660: EQUAL
25661: IFTRUE 25665
25663: GO 25723
25665: POP
// begin Am_posily = AMERICKE_POSILY3_LIST ;
25666: LD_ADDR_EXP 72
25670: PUSH
25671: LD_EXP 53
25675: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25676: LD_EXP 72
25680: PPUSH
25681: LD_INT 42
25683: PPUSH
25684: LD_INT 69
25686: PPUSH
25687: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25691: LD_EXP 72
25695: PPUSH
25696: LD_INT 28
25698: PPUSH
25699: LD_INT 47
25701: PPUSH
25702: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25706: LD_EXP 72
25710: PPUSH
25711: LD_INT 20
25713: PPUSH
25714: LD_INT 12
25716: PPUSH
25717: CALL_OW 174
// end ; 4 :
25721: GO 25871
25723: LD_INT 4
25725: DOUBLE
25726: EQUAL
25727: IFTRUE 25731
25729: GO 25804
25731: POP
// begin Am_posily = AMERICKE_POSILY4_LIST ;
25732: LD_ADDR_EXP 72
25736: PUSH
25737: LD_EXP 54
25741: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25742: LD_EXP 72
25746: PPUSH
25747: LD_INT 110
25749: PPUSH
25750: LD_INT 23
25752: PPUSH
25753: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25757: LD_EXP 72
25761: PPUSH
25762: LD_INT 87
25764: PPUSH
25765: LD_INT 19
25767: PPUSH
25768: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25772: LD_EXP 72
25776: PPUSH
25777: LD_INT 52
25779: PPUSH
25780: LD_INT 12
25782: PPUSH
25783: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
25787: LD_EXP 72
25791: PPUSH
25792: LD_INT 27
25794: PPUSH
25795: LD_INT 13
25797: PPUSH
25798: CALL_OW 174
// end ; 11 :
25802: GO 25871
25804: LD_INT 11
25806: DOUBLE
25807: EQUAL
25808: IFTRUE 25812
25810: GO 25870
25812: POP
// begin Am_posily = AMERICKE_POSILY11_LIST ;
25813: LD_ADDR_EXP 72
25817: PUSH
25818: LD_EXP 55
25822: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25823: LD_EXP 72
25827: PPUSH
25828: LD_INT 42
25830: PPUSH
25831: LD_INT 69
25833: PPUSH
25834: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25838: LD_EXP 72
25842: PPUSH
25843: LD_INT 28
25845: PPUSH
25846: LD_INT 47
25848: PPUSH
25849: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25853: LD_EXP 72
25857: PPUSH
25858: LD_INT 20
25860: PPUSH
25861: LD_INT 12
25863: PPUSH
25864: CALL_OW 174
// end ; end ;
25868: GO 25871
25870: POP
// end ;
25871: LD_VAR 0 2
25875: RET
// every 1 1$7 do
25876: GO 25878
25878: DISABLE
// begin if Researched ( Amici , tech_Weap1 ) then
25879: LD_EXP 4
25883: PPUSH
25884: LD_INT 51
25886: PPUSH
25887: CALL_OW 325
25891: IFFALSE 25918
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
25893: LD_INT 51
25895: PPUSH
25896: LD_EXP 4
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
25908: LD_INT 9
25910: PPUSH
25911: LD_INT 51
25913: PPUSH
25914: CALL_OW 124
// end ; enable ;
25918: ENABLE
// end ;
25919: END
// every 0 0$19 do
25920: GO 25922
25922: DISABLE
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
25923: LD_INT 51
25925: PPUSH
25926: LD_EXP 4
25930: PPUSH
25931: LD_INT 1
25933: PPUSH
25934: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
25938: LD_INT 9
25940: PPUSH
25941: LD_INT 51
25943: PPUSH
25944: CALL_OW 124
// end ;
25948: END
// every 0 0$1 do var i , temp_list ;
25949: GO 25951
25951: DISABLE
25952: LD_INT 0
25954: PPUSH
25955: PPUSH
// begin i = 1 ;
25956: LD_ADDR_VAR 0 1
25960: PUSH
25961: LD_INT 1
25963: ST_TO_ADDR
// while i <= Am_posily do
25964: LD_VAR 0 1
25968: PUSH
25969: LD_EXP 72
25973: LESSEQUAL
25974: IFFALSE 26113
// begin if IsInArea ( Am_posily [ i ] , Am_base ) or not IsLive ( i ) then
25976: LD_EXP 72
25980: PUSH
25981: LD_VAR 0 1
25985: ARRAY
25986: PPUSH
25987: LD_INT 6
25989: PPUSH
25990: CALL_OW 308
25994: PUSH
25995: LD_VAR 0 1
25999: PPUSH
26000: CALL_OW 300
26004: NOT
26005: OR
26006: IFFALSE 26097
// begin if IsInArea ( Am_posily [ i ] , Am_base ) then
26008: LD_EXP 72
26012: PUSH
26013: LD_VAR 0 1
26017: ARRAY
26018: PPUSH
26019: LD_INT 6
26021: PPUSH
26022: CALL_OW 308
26026: IFFALSE 26075
// begin Prezite_posily = Prezite_posily + 1 ;
26028: LD_ADDR_EXP 73
26032: PUSH
26033: LD_EXP 73
26037: PUSH
26038: LD_INT 1
26040: PLUS
26041: ST_TO_ADDR
// if Prezite_posily > muze_prezit_posil [ difficulty ] then
26042: LD_EXP 73
26046: PUSH
26047: LD_EXP 23
26051: PUSH
26052: LD_OWVAR 67
26056: ARRAY
26057: GREATER
26058: IFFALSE 26075
// DestroyUnit ( Am_posily [ i ] ) ;
26060: LD_EXP 72
26064: PUSH
26065: LD_VAR 0 1
26069: ARRAY
26070: PPUSH
26071: CALL_OW 65
// end ; Am_posily = Delete ( Am_posily , i ) ;
26075: LD_ADDR_EXP 72
26079: PUSH
26080: LD_EXP 72
26084: PPUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: CALL_OW 3
26094: ST_TO_ADDR
// continue ;
26095: GO 25964
// end ; i = i + 1 ;
26097: LD_ADDR_VAR 0 1
26101: PUSH
26102: LD_VAR 0 1
26106: PUSH
26107: LD_INT 1
26109: PLUS
26110: ST_TO_ADDR
// end ;
26111: GO 25964
// enable ;
26113: ENABLE
// end ;
26114: PPOPN 2
26116: END
// every 0 0$13 do var pom ;
26117: GO 26119
26119: DISABLE
26120: LD_INT 0
26122: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_mechanic ] ] ) ;
26123: LD_ADDR_VAR 0 1
26127: PUSH
26128: LD_INT 6
26130: PPUSH
26131: LD_INT 22
26133: PUSH
26134: LD_EXP 4
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 25
26145: PUSH
26146: LD_INT 3
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PPUSH
26157: CALL_OW 70
26161: ST_TO_ADDR
// if pom > 0 then
26162: LD_VAR 0 1
26166: PUSH
26167: LD_INT 0
26169: GREATER
26170: IFFALSE 26184
// ComEnterUnit ( pom , Am_fac ) ;
26172: LD_VAR 0 1
26176: PPUSH
26177: LD_INT 10
26179: PPUSH
26180: CALL_OW 120
// enable ;
26184: ENABLE
// end ;
26185: PPOPN 1
26187: END
// every 0 0$17 do var pom ;
26188: GO 26190
26190: DISABLE
26191: LD_INT 0
26193: PPUSH
// begin pom = UnitsInside ( Am_fac ) ;
26194: LD_ADDR_VAR 0 1
26198: PUSH
26199: LD_INT 10
26201: PPUSH
26202: CALL_OW 313
26206: ST_TO_ADDR
// if pom > 3 then
26207: LD_VAR 0 1
26211: PUSH
26212: LD_INT 3
26214: GREATER
26215: IFFALSE 26236
// ComConstruct ( Am_fac , us_light_wheeled , engine_solar , control_manual , us_machine_gun ) ;
26217: LD_INT 10
26219: PPUSH
26220: LD_INT 1
26222: PPUSH
26223: LD_INT 2
26225: PPUSH
26226: LD_INT 1
26228: PPUSH
26229: LD_INT 2
26231: PPUSH
26232: CALL_OW 125
// while UnitsInside ( Am_fac ) > 3 do
26236: LD_INT 10
26238: PPUSH
26239: CALL_OW 313
26243: PUSH
26244: LD_INT 3
26246: GREATER
26247: IFFALSE 26258
// wait ( 0 0$10 ) ;
26249: LD_INT 350
26251: PPUSH
26252: CALL_OW 67
26256: GO 26236
// enable ;
26258: ENABLE
// end ;
26259: PPOPN 1
26261: END
// export function am_posily_videny_rusakama ; var i ; var videli ; begin
26262: LD_INT 0
26264: PPUSH
26265: PPUSH
26266: PPUSH
// videli = false ;
26267: LD_ADDR_VAR 0 3
26271: PUSH
26272: LD_INT 0
26274: ST_TO_ADDR
// for i in Am_posily do
26275: LD_ADDR_VAR 0 2
26279: PUSH
26280: LD_EXP 72
26284: PUSH
26285: FOR_IN
26286: IFFALSE 26314
// if See ( You , i ) then
26288: LD_EXP 1
26292: PPUSH
26293: LD_VAR 0 2
26297: PPUSH
26298: CALL_OW 292
26302: IFFALSE 26312
// videli = true ;
26304: LD_ADDR_VAR 0 3
26308: PUSH
26309: LD_INT 1
26311: ST_TO_ADDR
26312: GO 26285
26314: POP
26315: POP
// result := videli ;
26316: LD_ADDR_VAR 0 1
26320: PUSH
26321: LD_VAR 0 3
26325: ST_TO_ADDR
// end ;
26326: LD_VAR 0 1
26330: RET
// export function omicron_half_destroyed ; var pom , i ; var zije ; var a ; begin
26331: LD_INT 0
26333: PPUSH
26334: PPUSH
26335: PPUSH
26336: PPUSH
26337: PPUSH
// a = false ;
26338: LD_ADDR_VAR 0 5
26342: PUSH
26343: LD_INT 0
26345: ST_TO_ADDR
// if ( ( not IsOK ( Am_bu1 ) ) or ( GetSide ( Am_bu1 ) <> Amici ) ) and ( ( not IsOK ( Am_bu2 ) ) or GetSide ( Am_bu2 ) <> Amici ) and ( ( not IsOK ( Am_bu3 ) ) or GetSide ( Am_bu3 ) <> Amici ) and ( ( not IsOK ( Am_bar1 ) ) or GetSide ( Am_bar1 ) <> Amici ) and ( ( not IsOK ( Am_bar2 ) ) or GetSide ( Am_bar2 ) <> Amici ) then
26346: LD_INT 7
26348: PPUSH
26349: CALL_OW 302
26353: NOT
26354: PUSH
26355: LD_INT 7
26357: PPUSH
26358: CALL_OW 255
26362: PUSH
26363: LD_EXP 4
26367: NONEQUAL
26368: OR
26369: PUSH
26370: LD_INT 8
26372: PPUSH
26373: CALL_OW 302
26377: NOT
26378: PUSH
26379: LD_INT 8
26381: PPUSH
26382: CALL_OW 255
26386: PUSH
26387: LD_EXP 4
26391: NONEQUAL
26392: OR
26393: AND
26394: PUSH
26395: LD_INT 19
26397: PPUSH
26398: CALL_OW 302
26402: NOT
26403: PUSH
26404: LD_INT 19
26406: PPUSH
26407: CALL_OW 255
26411: PUSH
26412: LD_EXP 4
26416: NONEQUAL
26417: OR
26418: AND
26419: PUSH
26420: LD_INT 11
26422: PPUSH
26423: CALL_OW 302
26427: NOT
26428: PUSH
26429: LD_INT 11
26431: PPUSH
26432: CALL_OW 255
26436: PUSH
26437: LD_EXP 4
26441: NONEQUAL
26442: OR
26443: AND
26444: PUSH
26445: LD_INT 25
26447: PPUSH
26448: CALL_OW 302
26452: NOT
26453: PUSH
26454: LD_INT 25
26456: PPUSH
26457: CALL_OW 255
26461: PUSH
26462: LD_EXP 4
26466: NONEQUAL
26467: OR
26468: AND
26469: IFFALSE 26479
// a = true ;
26471: LD_ADDR_VAR 0 5
26475: PUSH
26476: LD_INT 1
26478: ST_TO_ADDR
// result = a ;
26479: LD_ADDR_VAR 0 1
26483: PUSH
26484: LD_VAR 0 5
26488: ST_TO_ADDR
// end ;
26489: LD_VAR 0 1
26493: RET
// export function stahnuti_amiku ; var i ; var pom , pom1 , pom2 , pomx ; begin
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
26500: PPUSH
26501: PPUSH
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
26502: LD_ADDR_VAR 0 3
26506: PUSH
26507: LD_INT 6
26509: PPUSH
26510: LD_INT 22
26512: PUSH
26513: LD_EXP 4
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 21
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PPUSH
26536: CALL_OW 70
26540: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
26541: LD_ADDR_VAR 0 5
26545: PUSH
26546: LD_INT 6
26548: PPUSH
26549: LD_INT 22
26551: PUSH
26552: LD_EXP 4
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 21
26563: PUSH
26564: LD_INT 3
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PPUSH
26575: CALL_OW 70
26579: ST_TO_ADDR
// for i in pom2 do
26580: LD_ADDR_VAR 0 2
26584: PUSH
26585: LD_VAR 0 5
26589: PUSH
26590: FOR_IN
26591: IFFALSE 26631
// if UnitsInside ( i ) <> 0 then
26593: LD_VAR 0 2
26597: PPUSH
26598: CALL_OW 313
26602: PUSH
26603: LD_INT 0
26605: NONEQUAL
26606: IFFALSE 26629
// pom = pom ^ UnitsInside ( i ) ;
26608: LD_ADDR_VAR 0 3
26612: PUSH
26613: LD_VAR 0 3
26617: PUSH
26618: LD_VAR 0 2
26622: PPUSH
26623: CALL_OW 313
26627: ADD
26628: ST_TO_ADDR
26629: GO 26590
26631: POP
26632: POP
// ComExitBuilding ( pom ) ;
26633: LD_VAR 0 3
26637: PPUSH
26638: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
26642: LD_VAR 0 3
26646: PPUSH
26647: LD_INT 6
26649: PPUSH
26650: LD_INT 2
26652: PPUSH
26653: CALL_OW 171
// wait ( 0 0$1 ) ;
26657: LD_INT 35
26659: PPUSH
26660: CALL_OW 67
// while pom > 0 do
26664: LD_VAR 0 3
26668: PUSH
26669: LD_INT 0
26671: GREATER
26672: IFFALSE 26908
// begin pom1 = FilterUnitsInArea ( ODBER_AM2 , [ [ f_side , Amici ] ] ) ;
26674: LD_ADDR_VAR 0 4
26678: PUSH
26679: LD_INT 38
26681: PPUSH
26682: LD_INT 22
26684: PUSH
26685: LD_EXP 4
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: EMPTY
26695: LIST
26696: PPUSH
26697: CALL_OW 70
26701: ST_TO_ADDR
// for i in pom1 do
26702: LD_ADDR_VAR 0 2
26706: PUSH
26707: LD_VAR 0 4
26711: PUSH
26712: FOR_IN
26713: IFFALSE 26742
// begin RemoveUnit ( i ) ;
26715: LD_VAR 0 2
26719: PPUSH
26720: CALL_OW 64
// pom = pom diff i ;
26724: LD_ADDR_VAR 0 3
26728: PUSH
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 2
26738: DIFF
26739: ST_TO_ADDR
// end ;
26740: GO 26712
26742: POP
26743: POP
// wait ( 0 0$1 ) ;
26744: LD_INT 35
26746: PPUSH
26747: CALL_OW 67
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
26751: LD_ADDR_VAR 0 3
26755: PUSH
26756: LD_INT 6
26758: PPUSH
26759: LD_INT 22
26761: PUSH
26762: LD_EXP 4
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 21
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PPUSH
26785: CALL_OW 70
26789: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
26790: LD_ADDR_VAR 0 5
26794: PUSH
26795: LD_INT 6
26797: PPUSH
26798: LD_INT 22
26800: PUSH
26801: LD_EXP 4
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 21
26812: PUSH
26813: LD_INT 3
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 70
26828: ST_TO_ADDR
// for i in pom2 do
26829: LD_ADDR_VAR 0 2
26833: PUSH
26834: LD_VAR 0 5
26838: PUSH
26839: FOR_IN
26840: IFFALSE 26880
// if UnitsInside ( i ) <> 0 then
26842: LD_VAR 0 2
26846: PPUSH
26847: CALL_OW 313
26851: PUSH
26852: LD_INT 0
26854: NONEQUAL
26855: IFFALSE 26878
// pom = pom ^ UnitsInside ( i ) ;
26857: LD_ADDR_VAR 0 3
26861: PUSH
26862: LD_VAR 0 3
26866: PUSH
26867: LD_VAR 0 2
26871: PPUSH
26872: CALL_OW 313
26876: ADD
26877: ST_TO_ADDR
26878: GO 26839
26880: POP
26881: POP
// ComExitBuilding ( pom ) ;
26882: LD_VAR 0 3
26886: PPUSH
26887: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
26891: LD_VAR 0 3
26895: PPUSH
26896: LD_INT 6
26898: PPUSH
26899: LD_INT 2
26901: PPUSH
26902: CALL_OW 171
// end ;
26906: GO 26664
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
26908: LD_ADDR_VAR 0 3
26912: PUSH
26913: LD_INT 22
26915: PPUSH
26916: LD_INT 22
26918: PUSH
26919: LD_EXP 4
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 21
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PPUSH
26942: CALL_OW 70
26946: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
26947: LD_ADDR_VAR 0 5
26951: PUSH
26952: LD_INT 22
26954: PPUSH
26955: LD_INT 22
26957: PUSH
26958: LD_EXP 4
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 21
26969: PUSH
26970: LD_INT 3
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PPUSH
26981: CALL_OW 70
26985: ST_TO_ADDR
// for i in pom2 do
26986: LD_ADDR_VAR 0 2
26990: PUSH
26991: LD_VAR 0 5
26995: PUSH
26996: FOR_IN
26997: IFFALSE 27037
// if UnitsInside ( i ) <> 0 then
26999: LD_VAR 0 2
27003: PPUSH
27004: CALL_OW 313
27008: PUSH
27009: LD_INT 0
27011: NONEQUAL
27012: IFFALSE 27035
// pom = pom ^ UnitsInside ( i ) ;
27014: LD_ADDR_VAR 0 3
27018: PUSH
27019: LD_VAR 0 3
27023: PUSH
27024: LD_VAR 0 2
27028: PPUSH
27029: CALL_OW 313
27033: ADD
27034: ST_TO_ADDR
27035: GO 26996
27037: POP
27038: POP
// ComExitBuilding ( pom ) ;
27039: LD_VAR 0 3
27043: PPUSH
27044: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
27048: LD_VAR 0 3
27052: PPUSH
27053: LD_INT 138
27055: PPUSH
27056: LD_INT 40
27058: PPUSH
27059: CALL_OW 171
// wait ( 0 0$1 ) ;
27063: LD_INT 35
27065: PPUSH
27066: CALL_OW 67
// while pom + 0 > 0 do
27070: LD_VAR 0 3
27074: PUSH
27075: LD_INT 0
27077: PLUS
27078: PUSH
27079: LD_INT 0
27081: GREATER
27082: IFFALSE 27318
// begin pom1 = FilterUnitsInArea ( ODBER_AM , [ [ f_side , Amici ] ] ) ;
27084: LD_ADDR_VAR 0 4
27088: PUSH
27089: LD_INT 35
27091: PPUSH
27092: LD_INT 22
27094: PUSH
27095: LD_EXP 4
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: PPUSH
27107: CALL_OW 70
27111: ST_TO_ADDR
// for i in pom1 do
27112: LD_ADDR_VAR 0 2
27116: PUSH
27117: LD_VAR 0 4
27121: PUSH
27122: FOR_IN
27123: IFFALSE 27152
// begin RemoveUnit ( i ) ;
27125: LD_VAR 0 2
27129: PPUSH
27130: CALL_OW 64
// pom = pom diff i ;
27134: LD_ADDR_VAR 0 3
27138: PUSH
27139: LD_VAR 0 3
27143: PUSH
27144: LD_VAR 0 2
27148: DIFF
27149: ST_TO_ADDR
// end ;
27150: GO 27122
27152: POP
27153: POP
// wait ( 0 0$1 ) ;
27154: LD_INT 35
27156: PPUSH
27157: CALL_OW 67
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27161: LD_ADDR_VAR 0 3
27165: PUSH
27166: LD_INT 22
27168: PPUSH
27169: LD_INT 22
27171: PUSH
27172: LD_EXP 4
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 21
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PPUSH
27195: CALL_OW 70
27199: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27200: LD_ADDR_VAR 0 5
27204: PUSH
27205: LD_INT 22
27207: PPUSH
27208: LD_INT 22
27210: PUSH
27211: LD_EXP 4
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 21
27222: PUSH
27223: LD_INT 3
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PPUSH
27234: CALL_OW 70
27238: ST_TO_ADDR
// for i in pom2 do
27239: LD_ADDR_VAR 0 2
27243: PUSH
27244: LD_VAR 0 5
27248: PUSH
27249: FOR_IN
27250: IFFALSE 27290
// if UnitsInside ( i ) <> 0 then
27252: LD_VAR 0 2
27256: PPUSH
27257: CALL_OW 313
27261: PUSH
27262: LD_INT 0
27264: NONEQUAL
27265: IFFALSE 27288
// pom = pom ^ UnitsInside ( i ) ;
27267: LD_ADDR_VAR 0 3
27271: PUSH
27272: LD_VAR 0 3
27276: PUSH
27277: LD_VAR 0 2
27281: PPUSH
27282: CALL_OW 313
27286: ADD
27287: ST_TO_ADDR
27288: GO 27249
27290: POP
27291: POP
// ComExitBuilding ( pom ) ;
27292: LD_VAR 0 3
27296: PPUSH
27297: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
27301: LD_VAR 0 3
27305: PPUSH
27306: LD_INT 138
27308: PPUSH
27309: LD_INT 40
27311: PPUSH
27312: CALL_OW 171
// end ;
27316: GO 27070
// end ; end_of_file
27318: LD_VAR 0 1
27322: RET
// var arabsky_utok_zacal ; export posilani_arabskych_hlidek ; every 0 0$0.1 do
27323: GO 27325
27325: DISABLE
// begin posilani_arabskych_hlidek = false ;
27326: LD_ADDR_EXP 74
27330: PUSH
27331: LD_INT 0
27333: ST_TO_ADDR
// end ;
27334: END
// export function utok_arabu ; var i , pom ; begin
27335: LD_INT 0
27337: PPUSH
27338: PPUSH
27339: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
27340: LD_ADDR_VAR 0 3
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_EXP 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: PPUSH
27360: CALL_OW 69
27364: ST_TO_ADDR
// ArDontAttackPlayer ( true ) ;
27365: LD_INT 1
27367: PPUSH
27368: CALL 28372 0 1
// InGameOn ;
27372: CALL_OW 8
// ComStop ( pom ) ;
27376: LD_VAR 0 3
27380: PPUSH
27381: CALL_OW 141
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
27385: LD_ADDR_VAR 0 2
27389: PUSH
27390: LD_INT 22
27392: PUSH
27393: LD_INT 3
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 3
27402: PUSH
27403: LD_INT 21
27405: PUSH
27406: LD_INT 3
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PPUSH
27421: CALL_OW 69
27425: PUSH
27426: FOR_IN
27427: IFFALSE 27446
// ComMoveXY ( i , 59 , 12 ) ;
27429: LD_VAR 0 2
27433: PPUSH
27434: LD_INT 59
27436: PPUSH
27437: LD_INT 12
27439: PPUSH
27440: CALL_OW 111
27444: GO 27426
27446: POP
27447: POP
// EnableVideoExclamations ;
27448: CALL_OW 498
// CenterNowOnXY ( 142 , 80 ) ;
27452: LD_INT 142
27454: PPUSH
27455: LD_INT 80
27457: PPUSH
27458: CALL_OW 86
// arabsky_utok_zacal = true ;
27462: LD_ADDR_LOC 27
27466: PUSH
27467: LD_INT 1
27469: ST_TO_ADDR
// posli_rusy_pryc ;
27470: CALL 8116 0 0
// schovej_kurina ;
27474: CALL 9215 0 0
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 1 ] , Opoce1 , false ) ;
27478: LD_EXP 60
27482: PUSH
27483: LD_INT 1
27485: ARRAY
27486: PPUSH
27487: LD_INT 10
27489: PPUSH
27490: LD_INT 0
27492: PPUSH
27493: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 2 ] , Opoce2 , false ) ;
27497: LD_EXP 60
27501: PUSH
27502: LD_INT 2
27504: ARRAY
27505: PPUSH
27506: LD_INT 11
27508: PPUSH
27509: LD_INT 0
27511: PPUSH
27512: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 3 ] , Opoce2 , false ) ;
27516: LD_EXP 60
27520: PUSH
27521: LD_INT 3
27523: ARRAY
27524: PPUSH
27525: LD_INT 11
27527: PPUSH
27528: LD_INT 0
27530: PPUSH
27531: CALL_OW 49
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 134 , 62 ) ;
27535: LD_EXP 60
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: PPUSH
27544: LD_INT 134
27546: PPUSH
27547: LD_INT 62
27549: PPUSH
27550: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 133 , 69 ) ;
27554: LD_EXP 60
27558: PUSH
27559: LD_INT 1
27561: ARRAY
27562: PPUSH
27563: LD_INT 133
27565: PPUSH
27566: LD_INT 69
27568: PPUSH
27569: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_bu1 ) ;
27573: LD_EXP 60
27577: PUSH
27578: LD_INT 1
27580: ARRAY
27581: PPUSH
27582: LD_INT 3
27584: PPUSH
27585: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_fac ) ;
27589: LD_EXP 60
27593: PUSH
27594: LD_INT 1
27596: ARRAY
27597: PPUSH
27598: LD_INT 5
27600: PPUSH
27601: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_dep ) ;
27605: LD_EXP 60
27609: PUSH
27610: LD_INT 1
27612: ARRAY
27613: PPUSH
27614: LD_INT 1
27616: PPUSH
27617: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 142 , 94 ) ;
27621: LD_EXP 60
27625: PUSH
27626: LD_INT 2
27628: ARRAY
27629: PPUSH
27630: LD_INT 142
27632: PPUSH
27633: LD_INT 94
27635: PPUSH
27636: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 140 , 90 ) ;
27640: LD_EXP 60
27644: PUSH
27645: LD_INT 2
27647: ARRAY
27648: PPUSH
27649: LD_INT 140
27651: PPUSH
27652: LD_INT 90
27654: PPUSH
27655: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_el1 ) ;
27659: LD_EXP 60
27663: PUSH
27664: LD_INT 2
27666: ARRAY
27667: PPUSH
27668: LD_INT 14
27670: PPUSH
27671: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_fac ) ;
27675: LD_EXP 60
27679: PUSH
27680: LD_INT 2
27682: ARRAY
27683: PPUSH
27684: LD_INT 5
27686: PPUSH
27687: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_dep ) ;
27691: LD_EXP 60
27695: PUSH
27696: LD_INT 2
27698: ARRAY
27699: PPUSH
27700: LD_INT 1
27702: PPUSH
27703: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 143 , 94 ) ;
27707: LD_EXP 60
27711: PUSH
27712: LD_INT 3
27714: ARRAY
27715: PPUSH
27716: LD_INT 143
27718: PPUSH
27719: LD_INT 94
27721: PPUSH
27722: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 141 , 90 ) ;
27726: LD_EXP 60
27730: PUSH
27731: LD_INT 3
27733: ARRAY
27734: PPUSH
27735: LD_INT 141
27737: PPUSH
27738: LD_INT 90
27740: PPUSH
27741: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_bar1 ) ;
27745: LD_EXP 60
27749: PUSH
27750: LD_INT 3
27752: ARRAY
27753: PPUSH
27754: LD_INT 2
27756: PPUSH
27757: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_fac ) ;
27761: LD_EXP 60
27765: PUSH
27766: LD_INT 3
27768: ARRAY
27769: PPUSH
27770: LD_INT 5
27772: PPUSH
27773: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_dep ) ;
27777: LD_EXP 60
27781: PUSH
27782: LD_INT 3
27784: ARRAY
27785: PPUSH
27786: LD_INT 1
27788: PPUSH
27789: CALL_OW 175
// music_nat = nation_arabian ;
27793: LD_ADDR_OWVAR 71
27797: PUSH
27798: LD_INT 2
27800: ST_TO_ADDR
// CenterOnXY ( 142 , 80 ) ;
27801: LD_INT 142
27803: PPUSH
27804: LD_INT 80
27806: PPUSH
27807: CALL_OW 84
// for i in ARABI_SELF_AUTA do
27811: LD_ADDR_VAR 0 2
27815: PUSH
27816: LD_EXP 63
27820: PUSH
27821: FOR_IN
27822: IFFALSE 27841
// PlaceUnitArea ( i , Arabi2 , false ) ;
27824: LD_VAR 0 2
27828: PPUSH
27829: LD_INT 13
27831: PPUSH
27832: LD_INT 0
27834: PPUSH
27835: CALL_OW 49
27839: GO 27821
27841: POP
27842: POP
// ComAttackUnit ( ARABI_SELF_AUTA [ 1 ] , RU1_bar2 ) ;
27843: LD_EXP 63
27847: PUSH
27848: LD_INT 1
27850: ARRAY
27851: PPUSH
27852: LD_INT 17
27854: PPUSH
27855: CALL_OW 115
// ComWait ( ARABI_SELF_AUTA [ 2 ] , 0 0$1 ) ;
27859: LD_EXP 63
27863: PUSH
27864: LD_INT 2
27866: ARRAY
27867: PPUSH
27868: LD_INT 35
27870: PPUSH
27871: CALL_OW 142
// AddComAttackUnit ( ARABI_SELF_AUTA [ 2 ] , RU1_dep ) ;
27875: LD_EXP 63
27879: PUSH
27880: LD_INT 2
27882: ARRAY
27883: PPUSH
27884: LD_INT 1
27886: PPUSH
27887: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
27891: LD_INT 142
27893: PPUSH
27894: LD_INT 80
27896: PPUSH
27897: CALL_OW 84
// for i in ARABI_PRVNI_VLNA do
27901: LD_ADDR_VAR 0 2
27905: PUSH
27906: LD_EXP 61
27910: PUSH
27911: FOR_IN
27912: IFFALSE 27931
// PlaceUnitArea ( i , Arabi1 , false ) ;
27914: LD_VAR 0 2
27918: PPUSH
27919: LD_INT 12
27921: PPUSH
27922: LD_INT 0
27924: PPUSH
27925: CALL_OW 49
27929: GO 27911
27931: POP
27932: POP
// ComMoveXY ( ARABI_PRVNI_VLNA , 139 , 78 ) ;
27933: LD_EXP 61
27937: PPUSH
27938: LD_INT 139
27940: PPUSH
27941: LD_INT 78
27943: PPUSH
27944: CALL_OW 111
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bar1 ) ;
27948: LD_EXP 61
27952: PPUSH
27953: LD_INT 2
27955: PPUSH
27956: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu2 ) ;
27960: LD_EXP 61
27964: PPUSH
27965: LD_INT 4
27967: PPUSH
27968: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu1 ) ;
27972: LD_EXP 61
27976: PPUSH
27977: LD_INT 3
27979: PPUSH
27980: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab2 ) ;
27984: LD_EXP 61
27988: PPUSH
27989: LD_INT 16
27991: PPUSH
27992: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_dep ) ;
27996: LD_EXP 61
28000: PPUSH
28001: LD_INT 1
28003: PPUSH
28004: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab1 ) ;
28008: LD_EXP 61
28012: PPUSH
28013: LD_INT 6
28015: PPUSH
28016: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_fac ) ;
28020: LD_EXP 61
28024: PPUSH
28025: LD_INT 5
28027: PPUSH
28028: CALL_OW 175
// AddComAgressiveMove ( ARABI_PRVNI_VLNA , 143 , 79 ) ;
28032: LD_EXP 61
28036: PPUSH
28037: LD_INT 143
28039: PPUSH
28040: LD_INT 79
28042: PPUSH
28043: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28047: LD_INT 142
28049: PPUSH
28050: LD_INT 80
28052: PPUSH
28053: CALL_OW 84
// DisableVideoExclamations ;
28057: CALL_OW 499
// InGameOff ;
28061: CALL_OW 9
// interface_hidden := true ;
28065: LD_ADDR_OWVAR 54
28069: PUSH
28070: LD_INT 1
28072: ST_TO_ADDR
// kecy_behem_utoku_arabu ;
28073: CALL 13930 0 0
// InGameOn ;
28077: CALL_OW 8
// EnableVideoExclamations ;
28081: CALL_OW 498
// CenterOnXY ( 142 , 80 ) ;
28085: LD_INT 142
28087: PPUSH
28088: LD_INT 80
28090: PPUSH
28091: CALL_OW 84
// wait ( 0 0$4 ) ;
28095: LD_INT 140
28097: PPUSH
28098: CALL_OW 67
// posli_kurina_na_smrt ;
28102: CALL 9235 0 0
// for i in ARABI_FLAME_LIST do
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: LD_EXP 62
28115: PUSH
28116: FOR_IN
28117: IFFALSE 28136
// PlaceUnitArea ( i , Arabi2 , false ) ;
28119: LD_VAR 0 2
28123: PPUSH
28124: LD_INT 13
28126: PPUSH
28127: LD_INT 0
28129: PPUSH
28130: CALL_OW 49
28134: GO 28116
28136: POP
28137: POP
// ComMoveXY ( ARABI_FLAME_LIST , 139 , 78 ) ;
28138: LD_EXP 62
28142: PPUSH
28143: LD_INT 139
28145: PPUSH
28146: LD_INT 78
28148: PPUSH
28149: CALL_OW 111
// AddComAttackUnit ( ARABI_FLAME_LIST , RU1_bar1 ) ;
28153: LD_EXP 62
28157: PPUSH
28158: LD_INT 2
28160: PPUSH
28161: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
28165: LD_INT 142
28167: PPUSH
28168: LD_INT 80
28170: PPUSH
28171: CALL_OW 84
// for i in ARABI_VOJACI do
28175: LD_ADDR_VAR 0 2
28179: PUSH
28180: LD_EXP 64
28184: PUSH
28185: FOR_IN
28186: IFFALSE 28205
// PlaceUnitArea ( i , Arabi1 , false ) ;
28188: LD_VAR 0 2
28192: PPUSH
28193: LD_INT 12
28195: PPUSH
28196: LD_INT 0
28198: PPUSH
28199: CALL_OW 49
28203: GO 28185
28205: POP
28206: POP
// ComMoveXY ( ARABI_VOJACI , 153 , 84 ) ;
28207: LD_EXP 64
28211: PPUSH
28212: LD_INT 153
28214: PPUSH
28215: LD_INT 84
28217: PPUSH
28218: CALL_OW 111
// AddComAgressiveMove ( ARABI_VOJACI , 150 , 83 ) ;
28222: LD_EXP 64
28226: PPUSH
28227: LD_INT 150
28229: PPUSH
28230: LD_INT 83
28232: PPUSH
28233: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 78 ) ;
28237: LD_EXP 64
28241: PPUSH
28242: LD_INT 141
28244: PPUSH
28245: LD_INT 78
28247: PPUSH
28248: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 86 ) ;
28252: LD_EXP 64
28256: PPUSH
28257: LD_INT 141
28259: PPUSH
28260: LD_INT 86
28262: PPUSH
28263: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28267: LD_INT 142
28269: PPUSH
28270: LD_INT 80
28272: PPUSH
28273: CALL_OW 84
// wait ( 0 0$5 ) ;
28277: LD_INT 175
28279: PPUSH
28280: CALL_OW 67
// for i in ARABI_doraz do
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: LD_EXP 65
28293: PUSH
28294: FOR_IN
28295: IFFALSE 28314
// PlaceUnitArea ( i , Arabi1 , false ) ;
28297: LD_VAR 0 2
28301: PPUSH
28302: LD_INT 12
28304: PPUSH
28305: LD_INT 0
28307: PPUSH
28308: CALL_OW 49
28312: GO 28294
28314: POP
28315: POP
// ComMoveXY ( ARABI_doraz , 153 , 85 ) ;
28316: LD_EXP 65
28320: PPUSH
28321: LD_INT 153
28323: PPUSH
28324: LD_INT 85
28326: PPUSH
28327: CALL_OW 111
// AddComAttackUnit ( ARABI_doraz , RU1_dep ) ;
28331: LD_EXP 65
28335: PPUSH
28336: LD_INT 1
28338: PPUSH
28339: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab1 ) ;
28343: LD_EXP 65
28347: PPUSH
28348: LD_INT 6
28350: PPUSH
28351: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab2 ) ;
28355: LD_EXP 65
28359: PPUSH
28360: LD_INT 16
28362: PPUSH
28363: CALL_OW 175
// end ;
28367: LD_VAR 0 1
28371: RET
// export function ArDontAttackPlayer ( bol ) ; var i ; begin
28372: LD_INT 0
28374: PPUSH
28375: PPUSH
// for i in FilterAllUnits ( [ f_side , You ] ) do
28376: LD_ADDR_VAR 0 3
28380: PUSH
28381: LD_INT 22
28383: PUSH
28384: LD_EXP 1
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PPUSH
28393: CALL_OW 69
28397: PUSH
28398: FOR_IN
28399: IFFALSE 28439
// if bol then
28401: LD_VAR 0 1
28405: IFFALSE 28423
// DoNotAttack ( Arabi , i ) else
28407: LD_EXP 5
28411: PPUSH
28412: LD_VAR 0 3
28416: PPUSH
28417: CALL_OW 471
28421: GO 28437
// NormalAttack ( Arabi , i ) ;
28423: LD_EXP 5
28427: PPUSH
28428: LD_VAR 0 3
28432: PPUSH
28433: CALL_OW 472
28437: GO 28398
28439: POP
28440: POP
// end ;
28441: LD_VAR 0 2
28445: RET
// every 0 0$5 trigger arabsky_utok_zacal do var pom , pom1 , i ; var utek ;
28446: LD_LOC 27
28450: IFFALSE 28634
28452: GO 28454
28454: DISABLE
28455: LD_INT 0
28457: PPUSH
28458: PPUSH
28459: PPUSH
28460: PPUSH
// begin utek = [ ] ;
28461: LD_ADDR_VAR 0 4
28465: PUSH
28466: EMPTY
28467: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) ;
28468: LD_ADDR_VAR 0 1
28472: PUSH
28473: LD_INT 14
28475: PPUSH
28476: LD_INT 22
28478: PUSH
28479: LD_EXP 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 50
28490: PUSH
28491: EMPTY
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PPUSH
28498: CALL_OW 70
28502: ST_TO_ADDR
// if pom < 2 then
28503: LD_VAR 0 1
28507: PUSH
28508: LD_INT 2
28510: LESS
28511: IFFALSE 28608
// begin pom1 = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_ok ] ] ) ;
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_INT 22
28520: PUSH
28521: LD_EXP 5
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 50
28532: PUSH
28533: EMPTY
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PPUSH
28540: CALL_OW 69
28544: ST_TO_ADDR
// if pom1 > 0 then
28545: LD_VAR 0 2
28549: PUSH
28550: LD_INT 0
28552: GREATER
28553: IFFALSE 28608
// for i in pom1 do
28555: LD_ADDR_VAR 0 3
28559: PUSH
28560: LD_VAR 0 2
28564: PUSH
28565: FOR_IN
28566: IFFALSE 28606
// if utek < 3 then
28568: LD_VAR 0 4
28572: PUSH
28573: LD_INT 3
28575: LESS
28576: IFFALSE 28596
// utek = utek ^ i else
28578: LD_ADDR_VAR 0 4
28582: PUSH
28583: LD_VAR 0 4
28587: PUSH
28588: LD_VAR 0 3
28592: ADD
28593: ST_TO_ADDR
28594: GO 28604
// arabsky_utok_zacal = false ;
28596: LD_ADDR_LOC 27
28600: PUSH
28601: LD_INT 0
28603: ST_TO_ADDR
28604: GO 28565
28606: POP
28607: POP
// end ; if utek > 0 then
28608: LD_VAR 0 4
28612: PUSH
28613: LD_INT 0
28615: GREATER
28616: IFFALSE 28633
// ComMoveXY ( utek , 166 , 95 ) ;
28618: LD_VAR 0 4
28622: PPUSH
28623: LD_INT 166
28625: PPUSH
28626: LD_INT 95
28628: PPUSH
28629: CALL_OW 111
// enable ;
28633: ENABLE
// end ;
28634: PPOPN 4
28636: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) < 2 do var pom , i ;
28637: LD_INT 14
28639: PPUSH
28640: LD_INT 22
28642: PUSH
28643: LD_EXP 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 50
28654: PUSH
28655: EMPTY
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PPUSH
28662: CALL_OW 70
28666: PUSH
28667: LD_INT 2
28669: LESS
28670: IFFALSE 28734
28672: GO 28674
28674: DISABLE
28675: LD_INT 0
28677: PPUSH
28678: PPUSH
// begin pom = FilterUnitsInArea ( Arabi2 , [ [ f_side , Arabi ] ] ) ;
28679: LD_ADDR_VAR 0 1
28683: PUSH
28684: LD_INT 13
28686: PPUSH
28687: LD_INT 22
28689: PUSH
28690: LD_EXP 5
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: PPUSH
28702: CALL_OW 70
28706: ST_TO_ADDR
// for i in pom do
28707: LD_ADDR_VAR 0 2
28711: PUSH
28712: LD_VAR 0 1
28716: PUSH
28717: FOR_IN
28718: IFFALSE 28731
// RemoveUnit ( i ) ;
28720: LD_VAR 0 2
28724: PPUSH
28725: CALL_OW 64
28729: GO 28717
28731: POP
28732: POP
// enable ;
28733: ENABLE
// end ;
28734: PPOPN 2
28736: END
// every 0 0$4 trigger arabsky_utok_zacal do
28737: LD_LOC 27
28741: IFFALSE 28837
28743: GO 28745
28745: DISABLE
// begin if GetLives ( RU1_el1 ) < 1000 and GetLives ( RU1_el1 ) < 150 then
28746: LD_INT 14
28748: PPUSH
28749: CALL_OW 256
28753: PUSH
28754: LD_INT 1000
28756: LESS
28757: PUSH
28758: LD_INT 14
28760: PPUSH
28761: CALL_OW 256
28765: PUSH
28766: LD_INT 150
28768: LESS
28769: AND
28770: IFFALSE 28782
// SetLives ( RU1_el1 , 150 ) ;
28772: LD_INT 14
28774: PPUSH
28775: LD_INT 150
28777: PPUSH
28778: CALL_OW 234
// if GetLives ( RU1_el2 ) < 1000 and GetLives ( RU1_el2 ) < 150 then
28782: LD_INT 15
28784: PPUSH
28785: CALL_OW 256
28789: PUSH
28790: LD_INT 1000
28792: LESS
28793: PUSH
28794: LD_INT 15
28796: PPUSH
28797: CALL_OW 256
28801: PUSH
28802: LD_INT 150
28804: LESS
28805: AND
28806: IFFALSE 28818
// SetLives ( RU1_el2 , 150 ) ;
28808: LD_INT 15
28810: PPUSH
28811: LD_INT 150
28813: PPUSH
28814: CALL_OW 234
// if IsOK ( RU1_el1 ) or IsOK ( RU1_el2 ) then
28818: LD_INT 14
28820: PPUSH
28821: CALL_OW 302
28825: PUSH
28826: LD_INT 15
28828: PPUSH
28829: CALL_OW 302
28833: OR
28834: IFFALSE 28837
// enable ;
28836: ENABLE
// end ;
28837: END
// every 0 0$5 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) <= 3 do var i ;
28838: LD_INT 14
28840: PPUSH
28841: LD_INT 22
28843: PUSH
28844: LD_EXP 2
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 50
28855: PUSH
28856: EMPTY
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PPUSH
28863: CALL_OW 70
28867: PUSH
28868: LD_INT 3
28870: LESSEQUAL
28871: IFFALSE 28918
28873: GO 28875
28875: DISABLE
28876: LD_INT 0
28878: PPUSH
// begin ArDontAttackPlayer ( false ) ;
28879: LD_INT 0
28881: PPUSH
28882: CALL 28372 0 1
// arabi_kirov_posily_posli ;
28886: CALL 29005 0 0
// DisableVideoExclamations ;
28890: CALL_OW 499
// music_nat = 0 ;
28894: LD_ADDR_OWVAR 71
28898: PUSH
28899: LD_INT 0
28901: ST_TO_ADDR
// chmo_6 ;
28902: CALL 16627 0 0
// InGameOff ;
28906: CALL_OW 9
// stav_omikron = 8 ;
28910: LD_ADDR_EXP 39
28914: PUSH
28915: LD_INT 8
28917: ST_TO_ADDR
// end ;
28918: PPOPN 1
28920: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) > 2 do var pom ;
28921: LD_INT 14
28923: PPUSH
28924: LD_INT 22
28926: PUSH
28927: LD_EXP 2
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: PPUSH
28939: CALL_OW 70
28943: PUSH
28944: LD_INT 2
28946: GREATER
28947: IFFALSE 29002
28949: GO 28951
28951: DISABLE
28952: LD_INT 0
28954: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) ;
28955: LD_ADDR_VAR 0 1
28959: PUSH
28960: LD_INT 14
28962: PPUSH
28963: LD_INT 22
28965: PUSH
28966: LD_EXP 2
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: PPUSH
28978: CALL_OW 70
28982: ST_TO_ADDR
// ComAttackUnit ( ARABI_doraz , pom [ 1 ] ) ;
28983: LD_EXP 65
28987: PPUSH
28988: LD_VAR 0 1
28992: PUSH
28993: LD_INT 1
28995: ARRAY
28996: PPUSH
28997: CALL_OW 115
// enable ;
29001: ENABLE
// end ;
29002: PPOPN 1
29004: END
// function arabi_kirov_posily_posli ; var i ; begin
29005: LD_INT 0
29007: PPUSH
29008: PPUSH
// for i in ARABI_KIROV_POSILY do
29009: LD_ADDR_VAR 0 2
29013: PUSH
29014: LD_EXP 66
29018: PUSH
29019: FOR_IN
29020: IFFALSE 29039
// PlaceUnitArea ( i , Arabi3 , false ) ;
29022: LD_VAR 0 2
29026: PPUSH
29027: LD_INT 33
29029: PPUSH
29030: LD_INT 0
29032: PPUSH
29033: CALL_OW 49
29037: GO 29019
29039: POP
29040: POP
// ComAgressiveMove ( ARABI_KIROV_POSILY , 142 , 84 ) ;
29041: LD_EXP 66
29045: PPUSH
29046: LD_INT 142
29048: PPUSH
29049: LD_INT 84
29051: PPUSH
29052: CALL_OW 114
// end ;
29056: LD_VAR 0 1
29060: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 4 do var i ;
29061: LD_INT 22
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: LD_INT 24
29076: PUSH
29077: LD_INT 1000
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PPUSH
29092: CALL_OW 69
29096: PUSH
29097: LD_INT 4
29099: GREATER
29100: IFFALSE 29184
29102: GO 29104
29104: DISABLE
29105: LD_INT 0
29107: PPUSH
// begin enable ;
29108: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
29109: LD_ADDR_VAR 0 1
29113: PUSH
29114: LD_INT 22
29116: PUSH
29117: LD_INT 2
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 24
29129: PUSH
29130: LD_INT 1000
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: PUSH
29150: FOR_IN
29151: IFFALSE 29182
// if GetLives ( i ) > 500 then
29153: LD_VAR 0 1
29157: PPUSH
29158: CALL_OW 256
29162: PUSH
29163: LD_INT 500
29165: GREATER
29166: IFFALSE 29180
// SetLives ( i , 1000 ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_INT 1000
29175: PPUSH
29176: CALL_OW 234
29180: GO 29150
29182: POP
29183: POP
// end ; end_of_file
29184: PPOPN 1
29186: END
// export function SA_DontSaveScholtze ; begin
29187: LD_INT 0
29189: PPUSH
// SetAchievement ( ACH_EPR ) ;
29190: LD_STRING ACH_EPR
29192: PPUSH
29193: CALL_OW 543
// end ;
29197: LD_VAR 0 1
29201: RET
// export function SA_OneDepotWin ; begin
29202: LD_INT 0
29204: PPUSH
// SetAchievement ( ACH_PON ) ;
29205: LD_STRING ACH_PON
29207: PPUSH
29208: CALL_OW 543
// end ; end_of_file
29212: LD_VAR 0 1
29216: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
29217: LD_INT 0
29219: PPUSH
29220: PPUSH
// if not missionNumber then
29221: LD_VAR 0 2
29225: NOT
29226: IFFALSE 29230
// exit ;
29228: GO 29360
// achiv := false ;
29230: LD_ADDR_VAR 0 7
29234: PUSH
29235: LD_INT 0
29237: ST_TO_ADDR
// case campaignNumber of 1 :
29238: LD_VAR 0 1
29242: PUSH
29243: LD_INT 1
29245: DOUBLE
29246: EQUAL
29247: IFTRUE 29251
29249: GO 29262
29251: POP
// achiv := ACH_GOTA ; 2 :
29252: LD_ADDR_VAR 0 7
29256: PUSH
29257: LD_STRING ACH_GOTA
29259: ST_TO_ADDR
29260: GO 29312
29262: LD_INT 2
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29273
29270: POP
// ; 3 :
29271: GO 29312
29273: LD_INT 3
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29281
29279: GO 29292
29281: POP
// achiv := ACH_MOTSU ; 4 :
29282: LD_ADDR_VAR 0 7
29286: PUSH
29287: LD_STRING ACH_MOTSU
29289: ST_TO_ADDR
29290: GO 29312
29292: LD_INT 4
29294: DOUBLE
29295: EQUAL
29296: IFTRUE 29300
29298: GO 29311
29300: POP
// achiv := ACH_LOP ; end ;
29301: LD_ADDR_VAR 0 7
29305: PUSH
29306: LD_STRING ACH_LOP
29308: ST_TO_ADDR
29309: GO 29312
29311: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
29312: LD_OWVAR 67
29316: PUSH
29317: LD_INT 3
29319: EQUAL
29320: PUSH
29321: LD_VAR 0 7
29325: AND
29326: PUSH
29327: LD_VAR 0 3
29331: AND
29332: PUSH
29333: LD_VAR 0 4
29337: AND
29338: PUSH
29339: LD_VAR 0 5
29343: AND
29344: IFFALSE 29360
// SetAchievementEX ( achiv , missionNumber ) ;
29346: LD_VAR 0 7
29350: PPUSH
29351: LD_VAR 0 2
29355: PPUSH
29356: CALL_OW 564
// end ;
29360: LD_VAR 0 6
29364: RET
// export function SA_BehemothConstructed ; begin
29365: LD_INT 0
29367: PPUSH
// SetAchievement ( ACH_SMC ) ;
29368: LD_STRING ACH_SMC
29370: PPUSH
29371: CALL_OW 543
// end ;
29375: LD_VAR 0 1
29379: RET
