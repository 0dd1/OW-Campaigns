// var stReady , stRepair , stInCombat , stHelp , stNotReady , ImpatienceTreshold ; var vozKirov , vozKirovImpat , vozKirovState , vozKirovOut , vozHrace , mechKirov , mechKirovOut ; var targHrace , targAcquired ; every 0 0$1 marked 10 do var i ; var auta , autapom ; var poc ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// begin auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
   9: LD_ADDR_VAR 0 2
  13: PUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 21
  19: PUSH
  20: LD_INT 2
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: PUSH
  27: LD_INT 59
  29: PUSH
  30: EMPTY
  31: LIST
  32: PUSH
  33: EMPTY
  34: LIST
  35: LIST
  36: PPUSH
  37: CALL_OW 70
  41: ST_TO_ADDR
// for i in auta do
  42: LD_ADDR_VAR 0 1
  46: PUSH
  47: LD_VAR 0 2
  51: PUSH
  52: FOR_IN
  53: IFFALSE 132
// begin ComMoveToArea ( i , Zarea_utok ) ;
  55: LD_VAR 0 1
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: CALL_OW 113
// AddComAgressiveMove ( i , 28 , 15 ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: LD_INT 28
  74: PPUSH
  75: LD_INT 15
  77: PPUSH
  78: CALL_OW 174
// AddComAttackUnit ( i , Am_bu3 ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: LD_INT 19
  89: PPUSH
  90: CALL_OW 175
// AddComAgressiveMove ( i , 13 , 9 ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: LD_INT 13
 101: PPUSH
 102: LD_INT 9
 104: PPUSH
 105: CALL_OW 174
// RUSKE_POSILY_RIDICI_LIST = RUSKE_POSILY_RIDICI_LIST diff IsDrivenBy ( i ) ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_EXP 57
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 311
 128: DIFF
 129: ST_TO_ADDR
// end ;
 130: GO 52
 132: POP
 133: POP
// auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: PPUSH
 142: LD_INT 21
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 3
 154: PUSH
 155: LD_INT 59
 157: PUSH
 158: EMPTY
 159: LIST
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PPUSH
 166: CALL_OW 70
 170: ST_TO_ADDR
// poc = 1 ;
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 1
 178: ST_TO_ADDR
// for i in RUSKE_POSILY_RIDICI_LIST do
 179: LD_ADDR_VAR 0 1
 183: PUSH
 184: LD_EXP 57
 188: PUSH
 189: FOR_IN
 190: IFFALSE 244
// begin if auta + 0 >= poc then
 192: LD_VAR 0 2
 196: PUSH
 197: LD_INT 0
 199: PLUS
 200: PUSH
 201: LD_VAR 0 4
 205: GREATEREQUAL
 206: IFFALSE 228
// ComEnterUnit ( i , auta [ poc ] ) ;
 208: LD_VAR 0 1
 212: PPUSH
 213: LD_VAR 0 2
 217: PUSH
 218: LD_VAR 0 4
 222: ARRAY
 223: PPUSH
 224: CALL_OW 120
// poc = poc + 1 ;
 228: LD_ADDR_VAR 0 4
 232: PUSH
 233: LD_VAR 0 4
 237: PUSH
 238: LD_INT 1
 240: PLUS
 241: ST_TO_ADDR
// end ;
 242: GO 189
 244: POP
 245: POP
// if RUSKE_POSILY_RIDICI_LIST <> 0 then
 246: LD_EXP 57
 250: PUSH
 251: LD_INT 0
 253: NONEQUAL
 254: IFFALSE 257
// enable ;
 256: ENABLE
// end ;
 257: PPOPN 4
 259: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 260: LD_EXP 41
 264: PUSH
 265: LD_EXP 39
 269: PUSH
 270: LD_INT 7
 272: LESS
 273: AND
 274: IFFALSE 296
 276: GO 278
 278: DISABLE
// begin RepairVehicles ( 6 , Om_repair , 61 , 9 ) ;
 279: LD_INT 6
 281: PPUSH
 282: LD_INT 52
 284: PPUSH
 285: LD_INT 61
 287: PPUSH
 288: LD_INT 9
 290: PPUSH
 291: CALL 724 0 4
// enable ;
 295: ENABLE
// end ;
 296: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 297: LD_EXP 41
 301: PUSH
 302: LD_EXP 39
 306: PUSH
 307: LD_INT 7
 309: LESS
 310: AND
 311: IFFALSE 323
 313: GO 315
 315: DISABLE
// begin AttackVehicles ( 6 ) ;
 316: LD_INT 6
 318: PPUSH
 319: CALL 324 0 1
// end ;
 323: END
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= 0 then
 333: LD_INT 22
 335: PUSH
 336: LD_VAR 0 1
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 21
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 24
 357: PUSH
 358: LD_INT 1000
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: LD_INT 0
 377: GREATEREQUAL
 378: IFFALSE 719
// repeat wait ( 0 0$1 ) ;
 380: LD_INT 35
 382: PPUSH
 383: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_or , [ f_weapon , 42 ] , [ f_weapon , 43 ] , [ f_weapon , 44 ] ] ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 22
 394: PUSH
 395: LD_VAR 0 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 21
 406: PUSH
 407: LD_INT 2
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 24
 416: PUSH
 417: LD_INT 650
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 2
 426: PUSH
 427: LD_INT 34
 429: PUSH
 430: LD_INT 42
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: LD_INT 34
 439: PUSH
 440: LD_INT 43
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PUSH
 447: LD_INT 34
 449: PUSH
 450: LD_INT 44
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// for j in vehiclesOK do
 474: LD_ADDR_VAR 0 4
 478: PUSH
 479: LD_VAR 0 5
 483: PUSH
 484: FOR_IN
 485: IFFALSE 660
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , j ) ;
 487: LD_ADDR_VAR 0 6
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PPUSH
 510: LD_VAR 0 4
 514: PPUSH
 515: CALL_OW 74
 519: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
 520: LD_ADDR_VAR 0 7
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: LD_INT 59
 540: PUSH
 541: EMPTY
 542: LIST
 543: PUSH
 544: LD_INT 21
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 21
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PUSH
 574: EMPTY
 575: LIST
 576: PPUSH
 577: CALL_OW 69
 581: PPUSH
 582: LD_VAR 0 4
 586: PPUSH
 587: CALL_OW 74
 591: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
 592: LD_VAR 0 4
 596: PPUSH
 597: LD_VAR 0 6
 601: PPUSH
 602: CALL_OW 296
 606: PUSH
 607: LD_INT 8
 609: PLUS
 610: PUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_VAR 0 7
 620: PPUSH
 621: CALL_OW 296
 625: LESS
 626: IFFALSE 644
// ComAttackUnit ( j , target1 ) else
 628: LD_VAR 0 4
 632: PPUSH
 633: LD_VAR 0 6
 637: PPUSH
 638: CALL_OW 115
 642: GO 658
// ComAttackUnit ( j , target2 ) ;
 644: LD_VAR 0 4
 648: PPUSH
 649: LD_VAR 0 7
 653: PPUSH
 654: CALL_OW 115
// end ;
 658: GO 484
 660: POP
 661: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 or stav_omikron >= 7 ;
 662: LD_INT 22
 664: PUSH
 665: LD_VAR 0 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: LD_INT 1000
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: PUSH
 704: LD_INT 0
 706: EQUAL
 707: PUSH
 708: LD_EXP 39
 712: PUSH
 713: LD_INT 7
 715: GREATEREQUAL
 716: OR
 717: IFFALSE 380
// end ;
 719: LD_VAR 0 2
 723: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
 728: PPUSH
 729: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
 730: LD_ADDR_VAR 0 8
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_VAR 0 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 21
 749: PUSH
 750: LD_INT 2
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 24
 762: PUSH
 763: LD_INT 650
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: ST_TO_ADDR
// if damageVehicles > 0 then
 784: LD_VAR 0 8
 788: PUSH
 789: LD_INT 0
 791: GREATER
 792: IFFALSE 813
// ComMoveXY ( damageVehicles , repX , repY ) ;
 794: LD_VAR 0 8
 798: PPUSH
 799: LD_VAR 0 3
 803: PPUSH
 804: LD_VAR 0 4
 808: PPUSH
 809: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 813: LD_VAR 0 8
 817: PPUSH
 818: LD_INT 95
 820: PUSH
 821: LD_VAR 0 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 3
 832: PUSH
 833: LD_INT 58
 835: PUSH
 836: EMPTY
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 72
 851: PUSH
 852: LD_INT 0
 854: GREATER
 855: IFFALSE 922
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
 857: LD_ADDR_VAR 0 6
 861: PUSH
 862: LD_VAR 0 8
 866: PPUSH
 867: LD_INT 95
 869: PUSH
 870: LD_VAR 0 2
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: LD_INT 3
 881: PUSH
 882: LD_INT 58
 884: PUSH
 885: EMPTY
 886: LIST
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 72
 900: PUSH
 901: FOR_IN
 902: IFFALSE 920
// ComExitVehicle ( UnitsInside ( i ) ) ;
 904: LD_VAR 0 6
 908: PPUSH
 909: CALL_OW 313
 913: PPUSH
 914: CALL_OW 121
 918: GO 901
 920: POP
 921: POP
// end ;
 922: LD_VAR 0 5
 926: RET
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and GetSide ( human ) = 6 and IsOk ( vehicle ) then
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 255
 936: PUSH
 937: LD_INT 6
 939: EQUAL
 940: PUSH
 941: LD_VAR 0 2
 945: PPUSH
 946: CALL_OW 255
 950: PUSH
 951: LD_INT 6
 953: EQUAL
 954: AND
 955: PUSH
 956: LD_VAR 0 1
 960: PPUSH
 961: CALL_OW 302
 965: AND
 966: IFFALSE 1041
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
 968: LD_VAR 0 1
 972: PPUSH
 973: CALL_OW 264
 977: PUSH
 978: LD_INT 42
 980: EQUAL
 981: PUSH
 982: LD_VAR 0 1
 986: PPUSH
 987: CALL_OW 264
 991: PUSH
 992: LD_INT 43
 994: EQUAL
 995: OR
 996: PUSH
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 264
1006: PUSH
1007: LD_INT 44
1009: EQUAL
1010: OR
1011: IFFALSE 1041
// begin ComRepairVehicle ( human , vehicle ) ;
1013: LD_VAR 0 2
1017: PPUSH
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
1027: LD_VAR 0 2
1031: PPUSH
1032: LD_VAR 0 1
1036: PPUSH
1037: CALL_OW 180
// end ; end ;
1041: PPOPN 2
1043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do var i ;
1044: LD_INT 22
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 21
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: IFFALSE 1149
1074: GO 1076
1076: DISABLE
1077: LD_INT 0
1079: PPUSH
// begin enable ;
1080: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_INT 6
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 21
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PPUSH
1110: CALL_OW 69
1114: PUSH
1115: FOR_IN
1116: IFFALSE 1147
// if GetFuel ( i ) < 3 then
1118: LD_VAR 0 1
1122: PPUSH
1123: CALL_OW 261
1127: PUSH
1128: LD_INT 3
1130: LESS
1131: IFFALSE 1145
// SetFuel ( i , 3 ) ;
1133: LD_VAR 0 1
1137: PPUSH
1138: LD_INT 3
1140: PPUSH
1141: CALL_OW 240
1145: GO 1115
1147: POP
1148: POP
// end ; end_of_file
1149: PPOPN 1
1151: END
// export You , You2 , You3 , Amici , Arabi ; export KurinDialog ; export KurinAddTime ; starting begin RandomizeAll ;
1152: CALL_OW 11
// InitHc ;
1156: CALL_OW 19
// InitBc ;
1160: CALL_OW 21
// InitVc ;
1164: CALL_OW 20
// InitUc ;
1168: CALL_OW 18
// KurinDialog = 0 ;
1172: LD_ADDR_EXP 6
1176: PUSH
1177: LD_INT 0
1179: ST_TO_ADDR
// KurinAddTime = 0 ;
1180: LD_ADDR_EXP 7
1184: PUSH
1185: LD_INT 0
1187: ST_TO_ADDR
// set_difficulty ;
1188: CALL 4327 0 0
// load_postav ;
1192: CALL 2152 0 0
// load_promenne ;
1196: CALL 2304 0 0
// You = 3 ;
1200: LD_ADDR_EXP 1
1204: PUSH
1205: LD_INT 3
1207: ST_TO_ADDR
// You2 = 6 ;
1208: LD_ADDR_EXP 2
1212: PUSH
1213: LD_INT 6
1215: ST_TO_ADDR
// You3 = 5 ;
1216: LD_ADDR_EXP 3
1220: PUSH
1221: LD_INT 5
1223: ST_TO_ADDR
// Amici = 1 ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// Arabi = 2 ;
1232: LD_ADDR_EXP 5
1236: PUSH
1237: LD_INT 2
1239: ST_TO_ADDR
// placni_budovy_z_predesle_mise ;
1240: CALL 2706 0 0
// RevealFogArea ( You , CelaRU02 ) ;
1244: LD_EXP 1
1248: PPUSH
1249: LD_INT 36
1251: PPUSH
1252: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1256: LD_EXP 2
1260: PPUSH
1261: LD_INT 36
1263: PPUSH
1264: CALL_OW 332
// create_arabsky_utok ;
1268: CALL 18894 0 0
// create_americka_pomoc_hlidce ;
1272: CALL 16818 0 0
// create_americke_posily ;
1276: CALL 17687 0 0
// create_ruske_posily_na_omicron ;
1280: CALL 20043 0 0
// create_arabi_komanda ;
1284: CALL 21015 0 0
// create_ru_posily_ma_utek ;
1288: CALL 21861 0 0
// create_arabi_na_posily_kirovu ;
1292: CALL 22313 0 0
// create_cerpaci_ruske_auta ;
1296: CALL 22765 0 0
// create_am_jednotky ;
1300: CALL 20685 0 0
// set_skily_amikum ;
1304: CALL 17171 0 0
// uklid_rusu ;
1308: CALL 5095 0 0
// ChangeSideFog ( You , You ) ;
1312: LD_EXP 1
1316: PPUSH
1317: LD_EXP 1
1321: PPUSH
1322: CALL_OW 343
// ChangeSideFog ( You2 , You ) ;
1326: LD_EXP 2
1330: PPUSH
1331: LD_EXP 1
1335: PPUSH
1336: CALL_OW 343
// pojmenovani_zakladen ;
1340: CALL 4752 0 0
// InGameOn ;
1344: CALL_OW 8
// CenterOnXY ( 137 , 76 ) ;
1348: LD_INT 137
1350: PPUSH
1351: LD_INT 76
1353: PPUSH
1354: CALL_OW 84
// RevealFogArea ( You , CelaRU02 ) ;
1358: LD_EXP 1
1362: PPUSH
1363: LD_INT 36
1365: PPUSH
1366: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1370: LD_EXP 2
1374: PPUSH
1375: LD_INT 36
1377: PPUSH
1378: CALL_OW 332
// uvodni_pokec ;
1382: CALL 10203 0 0
// end ;
1386: END
// on UnitDestroyed ( un ) do begin if un = schol2 and GetSide ( un ) = 6 then
1387: LD_VAR 0 1
1391: PUSH
1392: LD_EXP 34
1396: EQUAL
1397: PUSH
1398: LD_VAR 0 1
1402: PPUSH
1403: CALL_OW 255
1407: PUSH
1408: LD_INT 6
1410: EQUAL
1411: AND
1412: IFFALSE 1418
// SA_DontSaveScholtze ;
1414: CALL 30327 0 0
// if un = bur then
1418: LD_VAR 0 1
1422: PUSH
1423: LD_EXP 29
1427: EQUAL
1428: IFFALSE 1437
// YouLost ( Burlak ) ;
1430: LD_STRING Burlak
1432: PPUSH
1433: CALL_OW 104
// end ;
1437: PPOPN 1
1439: END
// export function konec_mise_lhani ; begin
1440: LD_INT 0
1442: PPUSH
// hlaska_lhani ;
1443: CALL 15590 0 0
// YouLost ( Vehicles ) ;
1447: LD_STRING Vehicles
1449: PPUSH
1450: CALL_OW 104
// end ;
1454: LD_VAR 0 1
1458: RET
// export function konec_pred_omikronem ; begin
1459: LD_INT 0
1461: PPUSH
// YouLost ( Delay ) ;
1462: LD_STRING Delay
1464: PPUSH
1465: CALL_OW 104
// end ;
1469: LD_VAR 0 1
1473: RET
// export function konec_mise_utok ; begin
1474: LD_INT 0
1476: PPUSH
// YouLost ( SelfAttack ) ;
1477: LD_STRING SelfAttack
1479: PPUSH
1480: CALL_OW 104
// end ;
1484: LD_VAR 0 1
1488: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var mrtvi ; var all_people ; var medal1 , medal2 , medal3 ; begin
1489: LD_INT 0
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
// medal1 := false ;
1502: LD_ADDR_VAR 0 9
1506: PUSH
1507: LD_INT 0
1509: ST_TO_ADDR
// medal2 := false ;
1510: LD_ADDR_VAR 0 10
1514: PUSH
1515: LD_INT 0
1517: ST_TO_ADDR
// medal3 := false ;
1518: LD_ADDR_VAR 0 11
1522: PUSH
1523: LD_INT 0
1525: ST_TO_ADDR
// DisableExclamations ;
1526: CALL_OW 474
// gained_medals := [ ] ;
1530: LD_ADDR_OWVAR 61
1534: PUSH
1535: EMPTY
1536: ST_TO_ADDR
// missing_medals := [ ] ;
1537: LD_ADDR_OWVAR 62
1541: PUSH
1542: EMPTY
1543: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) = 1 then
1544: LD_INT 22
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: CALL_OW 69
1572: PUSH
1573: LD_INT 1
1575: EQUAL
1576: IFFALSE 1582
// SA_OneDepotWin ;
1578: CALL 30342 0 0
// if Prezite_posily >= muze_projit_posil [ difficulty ] then
1582: LD_EXP 73
1586: PUSH
1587: LD_EXP 22
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: GREATEREQUAL
1598: IFFALSE 1613
// AddMedal ( PreventReinforcements , - 1 ) else
1600: LD_STRING PreventReinforcements
1602: PPUSH
1603: LD_INT 1
1605: NEG
1606: PPUSH
1607: CALL_OW 101
1611: GO 1631
// begin medal1 := true ;
1613: LD_ADDR_VAR 0 9
1617: PUSH
1618: LD_INT 1
1620: ST_TO_ADDR
// AddMedal ( PreventReinforcements , 1 ) ;
1621: LD_STRING PreventReinforcements
1623: PPUSH
1624: LD_INT 1
1626: PPUSH
1627: CALL_OW 101
// end ; if scholtze_saved and IsOk ( schol ) and GetSide ( schol ) = 3 then
1631: LD_EXP 37
1635: PUSH
1636: LD_EXP 33
1640: PPUSH
1641: CALL_OW 302
1645: AND
1646: PUSH
1647: LD_EXP 33
1651: PPUSH
1652: CALL_OW 255
1656: PUSH
1657: LD_INT 3
1659: EQUAL
1660: AND
1661: IFFALSE 1683
// begin AddMedal ( Scholtze , 1 ) ;
1663: LD_STRING Scholtze
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 101
// medal2 := true ;
1673: LD_ADDR_VAR 0 10
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// end else
1681: GO 1694
// AddMedal ( Scholtze , - 1 ) ;
1683: LD_STRING Scholtze
1685: PPUSH
1686: LD_INT 1
1688: NEG
1689: PPUSH
1690: CALL_OW 101
// case stav_aut_new of 1 :
1694: LD_EXP 46
1698: PUSH
1699: LD_INT 1
1701: DOUBLE
1702: EQUAL
1703: IFTRUE 1707
1705: GO 1728
1707: POP
// begin AddMedal ( Surplus , 1 ) ;
1708: LD_STRING Surplus
1710: PPUSH
1711: LD_INT 1
1713: PPUSH
1714: CALL_OW 101
// medal3 := true ;
1718: LD_ADDR_VAR 0 11
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// end ; 2 :
1726: GO 1773
1728: LD_INT 2
1730: DOUBLE
1731: EQUAL
1732: IFTRUE 1736
1734: GO 1750
1736: POP
// AddMedal ( Surplus , - 1 ) ; 3 :
1737: LD_STRING Surplus
1739: PPUSH
1740: LD_INT 1
1742: NEG
1743: PPUSH
1744: CALL_OW 101
1748: GO 1773
1750: LD_INT 3
1752: DOUBLE
1753: EQUAL
1754: IFTRUE 1758
1756: GO 1772
1758: POP
// AddMedal ( Surplus , - 2 ) ; end ;
1759: LD_STRING Surplus
1761: PPUSH
1762: LD_INT 2
1764: NEG
1765: PPUSH
1766: CALL_OW 101
1770: GO 1773
1772: POP
// if not stav_aut_new then
1773: LD_EXP 46
1777: NOT
1778: IFFALSE 1791
// AddMedal ( Surplus , - 1 ) ;
1780: LD_STRING Surplus
1782: PPUSH
1783: LD_INT 1
1785: NEG
1786: PPUSH
1787: CALL_OW 101
// SA_EndMission ( 3 , 3 , medal1 , medal2 , medal3 ) ;
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: LD_VAR 0 9
1801: PPUSH
1802: LD_VAR 0 10
1806: PPUSH
1807: LD_VAR 0 11
1811: PPUSH
1812: CALL 30357 0 5
// GiveMedals ( Main ) ;
1816: LD_STRING Main
1818: PPUSH
1819: CALL_OW 102
// all_people := FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1823: LD_ADDR_VAR 0 8
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_EXP 1
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 21
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: ST_TO_ADDR
// RewardPeople ( all_people ) ;
1859: LD_VAR 0 8
1863: PPUSH
1864: CALL_OW 43
// if not ( bel in all_people ) then
1868: LD_EXP 32
1872: PUSH
1873: LD_VAR 0 8
1877: IN
1878: NOT
1879: IFFALSE 1890
// KillUnit ( bel ) ;
1881: LD_EXP 32
1885: PPUSH
1886: CALL_OW 66
// if not ( gny in all_people ) then
1890: LD_EXP 31
1894: PUSH
1895: LD_VAR 0 8
1899: IN
1900: NOT
1901: IFFALSE 1912
// KillUnit ( gny ) ;
1903: LD_EXP 31
1907: PPUSH
1908: CALL_OW 66
// if not ( kov in all_people ) then
1912: LD_EXP 30
1916: PUSH
1917: LD_VAR 0 8
1921: IN
1922: NOT
1923: IFFALSE 1934
// KillUnit ( kov ) ;
1925: LD_EXP 30
1929: PPUSH
1930: CALL_OW 66
// if not ( schol in all_people ) then
1934: LD_EXP 33
1938: PUSH
1939: LD_VAR 0 8
1943: IN
1944: NOT
1945: IFFALSE 1956
// KillUnit ( schol ) ;
1947: LD_EXP 33
1951: PPUSH
1952: CALL_OW 66
// SaveCharacters ( bur , Burlak ) ;
1956: LD_EXP 29
1960: PPUSH
1961: LD_STRING Burlak
1963: PPUSH
1964: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
1968: LD_EXP 32
1972: PPUSH
1973: LD_STRING Belkov
1975: PPUSH
1976: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
1980: LD_EXP 31
1984: PPUSH
1985: LD_STRING Gnyevko
1987: PPUSH
1988: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
1992: LD_EXP 30
1996: PPUSH
1997: LD_STRING Kovalyuk
1999: PPUSH
2000: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
2004: LD_EXP 33
2008: PPUSH
2009: LD_STRING Scholtze
2011: PPUSH
2012: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
2016: LD_EXP 28
2020: PPUSH
2021: LD_STRING Popov
2023: PPUSH
2024: CALL_OW 38
// pom := all_people diff [ bur , kur , bel , gny , kov , schol , schol2 , pop ] ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_VAR 0 8
2037: PUSH
2038: LD_EXP 29
2042: PUSH
2043: LD_EXP 27
2047: PUSH
2048: LD_EXP 32
2052: PUSH
2053: LD_EXP 31
2057: PUSH
2058: LD_EXP 30
2062: PUSH
2063: LD_EXP 33
2067: PUSH
2068: LD_EXP 34
2072: PUSH
2073: LD_EXP 28
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: DIFF
2088: ST_TO_ADDR
// SaveCharacters ( pom , survivors1 ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_STRING survivors1
2096: PPUSH
2097: CALL_OW 38
// SaveVariable ( BELKOV_SAVED , belkov_saved ) ;
2101: LD_EXP 24
2105: PPUSH
2106: LD_STRING belkov_saved
2108: PPUSH
2109: CALL_OW 39
// SaveVariable ( STAV_UTOKU , stav_utoku ) ;
2113: LD_EXP 25
2117: PPUSH
2118: LD_STRING stav_utoku
2120: PPUSH
2121: CALL_OW 39
// SaveVariable ( stav_aut , Surplus_vehicles ) ;
2125: LD_EXP 38
2129: PPUSH
2130: LD_STRING Surplus_vehicles
2132: PPUSH
2133: CALL_OW 39
// YouWin ;
2137: CALL_OW 103
// EnableExclamations ;
2141: CALL_OW 473
// exit ;
2145: GO 2147
// end ;
2147: LD_VAR 0 1
2151: RET
// function load_postav ; begin
2152: LD_INT 0
2154: PPUSH
// grishko = NewCharacter ( Grishko ) ;
2155: LD_ADDR_EXP 35
2159: PUSH
2160: LD_STRING Grishko
2162: PPUSH
2163: CALL_OW 25
2167: ST_TO_ADDR
// kur = nacti_osobu ( kurin ) ;
2168: LD_ADDR_EXP 27
2172: PUSH
2173: LD_STRING kurin
2175: PPUSH
2176: CALL 20971 0 1
2180: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
2181: LD_ADDR_EXP 32
2185: PUSH
2186: LD_STRING Belkov
2188: PPUSH
2189: CALL 20971 0 1
2193: ST_TO_ADDR
// kov = nacti_osobu ( Kovalyuk ) ;
2194: LD_ADDR_EXP 30
2198: PUSH
2199: LD_STRING Kovalyuk
2201: PPUSH
2202: CALL 20971 0 1
2206: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Burlak
2214: PPUSH
2215: CALL 20971 0 1
2219: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
2220: LD_ADDR_EXP 31
2224: PUSH
2225: LD_STRING Gnyevko
2227: PPUSH
2228: CALL 20971 0 1
2232: ST_TO_ADDR
// pop = NewCharacter ( Popov ) ;
2233: LD_ADDR_EXP 28
2237: PUSH
2238: LD_STRING Popov
2240: PPUSH
2241: CALL_OW 25
2245: ST_TO_ADDR
// if CheckCharacterSet ( survivors1 ) then
2246: LD_STRING survivors1
2248: PPUSH
2249: CALL_OW 29
2253: IFFALSE 2268
// other_survivors_mise_2 = CreateCharacterSet ( survivors1 ) ;
2255: LD_ADDR_EXP 71
2259: PUSH
2260: LD_STRING survivors1
2262: PPUSH
2263: CALL_OW 31
2267: ST_TO_ADDR
// if CheckCharacterSet ( amici_bw ) then
2268: LD_STRING amici_bw
2270: PPUSH
2271: CALL_OW 29
2275: IFFALSE 2292
// amici_bw_2 = CreateCharacter ( amici_bw ) else
2277: LD_ADDR_EXP 10
2281: PUSH
2282: LD_STRING amici_bw
2284: PPUSH
2285: CALL_OW 34
2289: ST_TO_ADDR
2290: GO 2299
// amici_bw_2 = [ ] ;
2292: LD_ADDR_EXP 10
2296: PUSH
2297: EMPTY
2298: ST_TO_ADDR
// end ;
2299: LD_VAR 0 1
2303: RET
// function load_promenne ; var default_budovy ; begin
2304: LD_INT 0
2306: PPUSH
2307: PPUSH
// default_budovy = [ [ 0 , 2 , 66 , 97 , 0 ] , [ 2 , 1 , 61 , 83 , 2 ] , [ 6 , 1 , 73 , 90 , 4 ] ] ;
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: LD_INT 0
2315: PUSH
2316: LD_INT 2
2318: PUSH
2319: LD_INT 66
2321: PUSH
2322: LD_INT 97
2324: PUSH
2325: LD_INT 0
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: LD_INT 61
2343: PUSH
2344: LD_INT 83
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 6
2359: PUSH
2360: LD_INT 1
2362: PUSH
2363: LD_INT 73
2365: PUSH
2366: LD_INT 90
2368: PUSH
2369: LD_INT 4
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: ST_TO_ADDR
// budovy_mise_2 = LoadVariable ( budovy , default_budovy ) ;
2384: LD_ADDR_EXP 8
2388: PUSH
2389: LD_STRING budovy
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 30
2401: ST_TO_ADDR
// breastworks_east = LoadVariable ( bw_east , 3 ) ;
2402: LD_ADDR_EXP 9
2406: PUSH
2407: LD_STRING bw_east
2409: PPUSH
2410: LD_INT 3
2412: PPUSH
2413: CALL_OW 30
2417: ST_TO_ADDR
// end ;
2418: LD_VAR 0 1
2422: RET
// export function create_scholtze ; var pom ; begin
2423: LD_INT 0
2425: PPUSH
2426: PPUSH
// pom = NewCharacter ( Scholtze ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_STRING Scholtze
2434: PPUSH
2435: CALL_OW 25
2439: ST_TO_ADDR
// SetSide ( pom , You2 ) ;
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_EXP 2
2449: PPUSH
2450: CALL_OW 235
// SetClass ( pom , class_scientistic ) ;
2454: LD_VAR 0 2
2458: PPUSH
2459: LD_INT 4
2461: PPUSH
2462: CALL_OW 336
// PlaceUnitXYR ( pom , 49 , 5 , 8 , true ) ;
2466: LD_VAR 0 2
2470: PPUSH
2471: LD_INT 49
2473: PPUSH
2474: LD_INT 5
2476: PPUSH
2477: LD_INT 8
2479: PPUSH
2480: LD_INT 1
2482: PPUSH
2483: CALL_OW 50
// result = pom ;
2487: LD_ADDR_VAR 0 1
2491: PUSH
2492: LD_VAR 0 2
2496: ST_TO_ADDR
// end ;
2497: LD_VAR 0 1
2501: RET
// on Command ( com ) do var i , j , temp ;
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
2506: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: LD_INT 22
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 21
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 69
2540: PUSH
2541: FOR_IN
2542: IFFALSE 2689
// if GetTaskList ( i ) > 0 then
2544: LD_VAR 0 2
2548: PPUSH
2549: CALL_OW 437
2553: PUSH
2554: LD_INT 0
2556: GREATER
2557: IFFALSE 2687
// for j = 1 to GetTaskList ( i ) do
2559: LD_ADDR_VAR 0 3
2563: PUSH
2564: DOUBLE
2565: LD_INT 1
2567: DEC
2568: ST_TO_ADDR
2569: LD_VAR 0 2
2573: PPUSH
2574: CALL_OW 437
2578: PUSH
2579: FOR_TO
2580: IFFALSE 2685
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 2
2591: PPUSH
2592: CALL_OW 437
2596: PUSH
2597: LD_VAR 0 3
2601: ARRAY
2602: PUSH
2603: LD_INT 4
2605: ARRAY
2606: ST_TO_ADDR
// if temp = RU1_dep or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
2607: LD_VAR 0 4
2611: PUSH
2612: LD_INT 1
2614: EQUAL
2615: PUSH
2616: LD_VAR 0 4
2620: PPUSH
2621: CALL_OW 255
2625: PUSH
2626: LD_INT 6
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 2
2634: PPUSH
2635: CALL_OW 437
2639: PUSH
2640: LD_VAR 0 3
2644: ARRAY
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_STRING e
2652: EQUAL
2653: AND
2654: PUSH
2655: LD_VAR 0 4
2659: PPUSH
2660: CALL_OW 247
2664: PUSH
2665: LD_INT 2
2667: EQUAL
2668: AND
2669: OR
2670: IFFALSE 2683
// SetTaskList ( i , [ ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: EMPTY
2678: PPUSH
2679: CALL_OW 446
// end ;
2683: GO 2579
2685: POP
2686: POP
2687: GO 2541
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 4
2693: END
// var konzervy_delay ; export budovy_mise_2 ; export breastworks_east ; export amici_bw_2 ; every 0 0$0.1 do
2694: GO 2696
2696: DISABLE
// begin konzervy_delay = 0 ;
2697: LD_ADDR_LOC 16
2701: PUSH
2702: LD_INT 0
2704: ST_TO_ADDR
// end ;
2705: END
// export function placni_budovy_z_predesle_mise ; var pom , i ; var ab ; var bw_e ; var vojaci ; var pocet ; begin
2706: LD_INT 0
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
2712: PPUSH
2713: PPUSH
2714: PPUSH
// uc_side = You ;
2715: LD_ADDR_OWVAR 20
2719: PUSH
2720: LD_EXP 1
2724: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
2725: LD_ADDR_OWVAR 44
2729: PUSH
2730: LD_INT 9
2732: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2733: LD_ADDR_OWVAR 45
2737: PUSH
2738: LD_INT 9
2740: ST_TO_ADDR
// for i in budovy_mise_2 do
2741: LD_ADDR_VAR 0 3
2745: PUSH
2746: LD_EXP 8
2750: PUSH
2751: FOR_IN
2752: IFFALSE 2900
// begin uc_nation = i [ 6 ] ;
2754: LD_ADDR_OWVAR 21
2758: PUSH
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 6
2766: ARRAY
2767: ST_TO_ADDR
// bc_type = i [ 1 ] ;
2768: LD_ADDR_OWVAR 42
2772: PUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 1
2780: ARRAY
2781: ST_TO_ADDR
// bc_level = i [ 2 ] ;
2782: LD_ADDR_OWVAR 43
2786: PUSH
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: ST_TO_ADDR
// pom = CreateAndPlaceBuildingXYD ( i [ 3 ] + 30 , i [ 4 ] - 20 , i [ 5 ] ) ;
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 3
2808: ARRAY
2809: PUSH
2810: LD_INT 30
2812: PLUS
2813: PPUSH
2814: LD_VAR 0 3
2818: PUSH
2819: LD_INT 4
2821: ARRAY
2822: PUSH
2823: LD_INT 20
2825: MINUS
2826: PPUSH
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 5
2834: ARRAY
2835: PPUSH
2836: CALL_OW 47
2840: ST_TO_ADDR
// if bc_type in [ b_depot , b_warehouse ] then
2841: LD_OWVAR 42
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 1
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: IN
2856: IFFALSE 2898
// begin SetResourceType ( GetBase ( pom ) , mat_cans , 100 ) ;
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 274
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 100
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( pom ) , mat_oil , 25 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 25
2893: PPUSH
2894: CALL_OW 277
// end ; end ;
2898: GO 2751
2900: POP
2901: POP
// bw_e = breastworks_east ;
2902: LD_ADDR_VAR 0 5
2906: PUSH
2907: LD_EXP 9
2911: ST_TO_ADDR
// uc_side = Amici ;
2912: LD_ADDR_OWVAR 20
2916: PUSH
2917: LD_EXP 4
2921: ST_TO_ADDR
// uc_nation = nation_american ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// bc_type = b_breastwork ;
2930: LD_ADDR_OWVAR 42
2934: PUSH
2935: LD_INT 31
2937: ST_TO_ADDR
// bc_level = level_bw_e [ difficulty ] ;
2938: LD_ADDR_OWVAR 43
2942: PUSH
2943: LD_EXP 11
2947: PUSH
2948: LD_OWVAR 67
2952: ARRAY
2953: ST_TO_ADDR
// if bw_e > 1 then
2954: LD_VAR 0 5
2958: PUSH
2959: LD_INT 1
2961: GREATER
2962: IFFALSE 2977
// CreateAndPlaceBuildingXYD ( 123 , 42 , 1 ) ;
2964: LD_INT 123
2966: PPUSH
2967: LD_INT 42
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: CALL_OW 47
// if bw_e = 1 or bw_e = 3 then
2977: LD_VAR 0 5
2981: PUSH
2982: LD_INT 1
2984: EQUAL
2985: PUSH
2986: LD_VAR 0 5
2990: PUSH
2991: LD_INT 3
2993: EQUAL
2994: OR
2995: IFFALSE 3010
// CreateAndPlaceBuildingXYD ( 120 , 36 , 1 ) ;
2997: LD_INT 120
2999: PPUSH
3000: LD_INT 36
3002: PPUSH
3003: LD_INT 1
3005: PPUSH
3006: CALL_OW 47
// vojaci = amici_bw_2 ;
3010: LD_ADDR_VAR 0 6
3014: PUSH
3015: LD_EXP 10
3019: ST_TO_ADDR
// if bw_e > 0 then
3020: LD_VAR 0 5
3024: PUSH
3025: LD_INT 0
3027: GREATER
3028: IFFALSE 3277
// begin if bw_e = 1 or bw_e = 2 then
3030: LD_VAR 0 5
3034: PUSH
3035: LD_INT 1
3037: EQUAL
3038: PUSH
3039: LD_VAR 0 5
3043: PUSH
3044: LD_INT 2
3046: EQUAL
3047: OR
3048: IFFALSE 3060
// pocet = 1 else
3050: LD_ADDR_VAR 0 7
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
3058: GO 3068
// pocet = 2 ;
3060: LD_ADDR_VAR 0 7
3064: PUSH
3065: LD_INT 2
3067: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
3068: LD_ADDR_VAR 0 6
3072: PUSH
3073: LD_VAR 0 6
3077: PUSH
3078: LD_INT 1
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 2
3086: PPUSH
3087: LD_STRING 
3089: PPUSH
3090: CALL 16771 0 4
3094: ADD
3095: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
3096: LD_ADDR_VAR 0 6
3100: PUSH
3101: LD_VAR 0 6
3105: PUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 1
3111: PPUSH
3112: LD_INT 2
3114: PPUSH
3115: LD_STRING 
3117: PPUSH
3118: CALL 16771 0 4
3122: ADD
3123: ST_TO_ADDR
// pom = FilterUnitsinArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
3124: LD_ADDR_VAR 0 2
3128: PUSH
3129: LD_INT 22
3131: PPUSH
3132: LD_INT 22
3134: PUSH
3135: LD_EXP 4
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 31
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 70
3162: ST_TO_ADDR
// if pocet >= 1 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 1
3170: GREATEREQUAL
3171: IFFALSE 3220
// begin PlaceUnitXYR ( vojaci [ 1 ] , 129 , 39 , 5 , false ) ;
3173: LD_VAR 0 6
3177: PUSH
3178: LD_INT 1
3180: ARRAY
3181: PPUSH
3182: LD_INT 129
3184: PPUSH
3185: LD_INT 39
3187: PPUSH
3188: LD_INT 5
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 50
// ComEnterUnit ( vojaci [ 1 ] , pom [ 1 ] ) ;
3198: LD_VAR 0 6
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: PPUSH
3207: LD_VAR 0 2
3211: PUSH
3212: LD_INT 1
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ; if pocet = 2 then
3220: LD_VAR 0 7
3224: PUSH
3225: LD_INT 2
3227: EQUAL
3228: IFFALSE 3277
// begin PlaceUnitXYR ( vojaci [ 2 ] , 129 , 39 , 5 , false ) ;
3230: LD_VAR 0 6
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PPUSH
3239: LD_INT 129
3241: PPUSH
3242: LD_INT 39
3244: PPUSH
3245: LD_INT 5
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 50
// ComEnterUnit ( vojaci [ 2 ] , pom [ 2 ] ) ;
3255: LD_VAR 0 6
3259: PUSH
3260: LD_INT 2
3262: ARRAY
3263: PPUSH
3264: LD_VAR 0 2
3268: PUSH
3269: LD_INT 2
3271: ARRAY
3272: PPUSH
3273: CALL_OW 120
// end ; end ; end ;
3277: LD_VAR 0 1
3281: RET
// export function vyber_characteru ; var pom ; var units_na_vyber ; var i ; var pocet ; var vyber ; var osurviv ; begin
3282: LD_INT 0
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// uc_side = You ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_EXP 1
3300: ST_TO_ADDR
// uc_nation = nation_russian ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 3
3308: ST_TO_ADDR
// pocet = 3 ;
3309: LD_ADDR_VAR 0 5
3313: PUSH
3314: LD_INT 3
3316: ST_TO_ADDR
// units_na_vyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
3317: LD_ADDR_VAR 0 3
3321: PUSH
3322: LD_INT -4
3324: PUSH
3325: LD_INT -1
3327: PUSH
3328: LD_INT -6
3330: PUSH
3331: LD_EXP 29
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_change_class ] ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PUSH
3352: LD_INT -5
3354: PUSH
3355: EMPTY
3356: LIST
3357: ADD
3358: ST_TO_ADDR
// if IsOK ( gny ) then
3359: LD_EXP 31
3363: PPUSH
3364: CALL_OW 302
3368: IFFALSE 3402
// begin SetSide ( gny , You ) ;
3370: LD_EXP 31
3374: PPUSH
3375: LD_EXP 1
3379: PPUSH
3380: CALL_OW 235
// units_na_vyber = units_na_vyber ^ gny end else
3384: LD_ADDR_VAR 0 3
3388: PUSH
3389: LD_VAR 0 3
3393: PUSH
3394: LD_EXP 31
3398: ADD
3399: ST_TO_ADDR
3400: GO 3416
// pocet = pocet + 1 ;
3402: LD_ADDR_VAR 0 5
3406: PUSH
3407: LD_VAR 0 5
3411: PUSH
3412: LD_INT 1
3414: PLUS
3415: ST_TO_ADDR
// if IsOK ( kov ) then
3416: LD_EXP 30
3420: PPUSH
3421: CALL_OW 302
3425: IFFALSE 3459
// begin SetSide ( kov , You ) ;
3427: LD_EXP 30
3431: PPUSH
3432: LD_EXP 1
3436: PPUSH
3437: CALL_OW 235
// units_na_vyber = units_na_vyber ^ kov end else
3441: LD_ADDR_VAR 0 3
3445: PUSH
3446: LD_VAR 0 3
3450: PUSH
3451: LD_EXP 30
3455: ADD
3456: ST_TO_ADDR
3457: GO 3473
// pocet = pocet + 1 ;
3459: LD_ADDR_VAR 0 5
3463: PUSH
3464: LD_VAR 0 5
3468: PUSH
3469: LD_INT 1
3471: PLUS
3472: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: LD_VAR 0 3
3482: PUSH
3483: LD_INT -2
3485: PUSH
3486: LD_INT -3
3488: PUSH
3489: LD_INT -5
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: ADD
3497: ST_TO_ADDR
// if IsOK ( bel ) then
3498: LD_EXP 32
3502: PPUSH
3503: CALL_OW 302
3507: IFFALSE 3539
// begin SetSide ( bel , You ) ;
3509: LD_EXP 32
3513: PPUSH
3514: LD_EXP 1
3518: PPUSH
3519: CALL_OW 235
// units_na_vyber = units_na_vyber ^ bel ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: LD_VAR 0 3
3532: PUSH
3533: LD_EXP 32
3537: ADD
3538: ST_TO_ADDR
// end ; osurviv = other_survivors_mise_2 ;
3539: LD_ADDR_VAR 0 7
3543: PUSH
3544: LD_EXP 71
3548: ST_TO_ADDR
// for i in osurviv do
3549: LD_ADDR_VAR 0 4
3553: PUSH
3554: LD_VAR 0 7
3558: PUSH
3559: FOR_IN
3560: IFFALSE 3578
// SetSide ( i , You ) ;
3562: LD_VAR 0 4
3566: PPUSH
3567: LD_EXP 1
3571: PPUSH
3572: CALL_OW 235
3576: GO 3559
3578: POP
3579: POP
// units_na_vyber = units_na_vyber ^ osurviv ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_VAR 0 3
3589: PUSH
3590: LD_VAR 0 7
3594: ADD
3595: ST_TO_ADDR
// uc_side = You ;
3596: LD_ADDR_OWVAR 20
3600: PUSH
3601: LD_EXP 1
3605: ST_TO_ADDR
// uc_nation = nation_russian ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_INT 3
3613: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_soldier , 2 ,  ) ;
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: LD_VAR 0 3
3623: PUSH
3624: CALL 16736 0 0
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: LD_STRING 
3637: PPUSH
3638: CALL 16771 0 4
3642: ADD
3643: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( sex_female , class_soldier , 3 ,  ) ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_VAR 0 3
3653: PUSH
3654: LD_INT 2
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 3
3662: PPUSH
3663: LD_STRING 
3665: PPUSH
3666: CALL 16771 0 4
3670: ADD
3671: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_VAR 0 3
3681: PUSH
3682: CALL 16736 0 0
3686: PPUSH
3687: LD_INT 2
3689: PPUSH
3690: LD_INT 2
3692: PPUSH
3693: LD_STRING 
3695: PPUSH
3696: CALL 16771 0 4
3700: ADD
3701: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_VAR 0 3
3711: PUSH
3712: CALL 16736 0 0
3716: PPUSH
3717: LD_INT 4
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_STRING 
3725: PPUSH
3726: CALL 16771 0 4
3730: ADD
3731: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: LD_VAR 0 3
3741: PUSH
3742: CALL 16736 0 0
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_INT 2
3752: PPUSH
3753: LD_STRING 
3755: PPUSH
3756: CALL 16771 0 4
3760: ADD
3761: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_VAR 0 3
3771: PUSH
3772: CALL 16736 0 0
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: LD_STRING 
3785: PPUSH
3786: CALL 16771 0 4
3790: ADD
3791: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3792: LD_ADDR_VAR 0 3
3796: PUSH
3797: LD_VAR 0 3
3801: PUSH
3802: CALL 16736 0 0
3806: PPUSH
3807: LD_INT 4
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: LD_STRING 
3815: PPUSH
3816: CALL 16771 0 4
3820: ADD
3821: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: LD_VAR 0 3
3831: PUSH
3832: CALL 16736 0 0
3836: PPUSH
3837: LD_INT 3
3839: PPUSH
3840: LD_INT 2
3842: PPUSH
3843: LD_STRING 
3845: PPUSH
3846: CALL 16771 0 4
3850: ADD
3851: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet , pocet , units_na_vyber , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
3852: LD_ADDR_VAR 0 2
3856: PUSH
3857: LD_STRING Vyber si peopliky
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 2
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 4
3887: PUSH
3888: LD_INT 1
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 0
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 1
3907: PUSH
3908: LD_INT 0
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 42
3925: ST_TO_ADDR
// vyber = [ bur ] ;
3926: LD_ADDR_VAR 0 6
3930: PUSH
3931: LD_EXP 29
3935: PUSH
3936: EMPTY
3937: LIST
3938: ST_TO_ADDR
// if IsOK ( gny ) then
3939: LD_EXP 31
3943: PPUSH
3944: CALL_OW 302
3948: IFFALSE 3966
// vyber = vyber ^ gny ;
3950: LD_ADDR_VAR 0 6
3954: PUSH
3955: LD_VAR 0 6
3959: PUSH
3960: LD_EXP 31
3964: ADD
3965: ST_TO_ADDR
// if IsOK ( kov ) then
3966: LD_EXP 30
3970: PPUSH
3971: CALL_OW 302
3975: IFFALSE 3993
// vyber = vyber ^ kov ;
3977: LD_ADDR_VAR 0 6
3981: PUSH
3982: LD_VAR 0 6
3986: PUSH
3987: LD_EXP 30
3991: ADD
3992: ST_TO_ADDR
// vyber = vyber ^ pom ;
3993: LD_ADDR_VAR 0 6
3997: PUSH
3998: LD_VAR 0 6
4002: PUSH
4003: LD_VAR 0 2
4007: ADD
4008: ST_TO_ADDR
// manage_zbytek ( osurviv diff vyber ) ;
4009: LD_VAR 0 7
4013: PUSH
4014: LD_VAR 0 6
4018: DIFF
4019: PPUSH
4020: CALL 4254 0 1
// result := vyber ;
4024: LD_ADDR_VAR 0 1
4028: PUSH
4029: LD_VAR 0 6
4033: ST_TO_ADDR
// end ;
4034: LD_VAR 0 1
4038: RET
// export function placni_unity ( unity ) ; var i ; begin
4039: LD_INT 0
4041: PPUSH
4042: PPUSH
// for i in unity do
4043: LD_ADDR_VAR 0 3
4047: PUSH
4048: LD_VAR 0 1
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4093
// begin SetSide ( i , You ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_EXP 1
4065: PPUSH
4066: CALL_OW 235
// PlaceUnitXYR ( i , 99 , 73 , 5 , false ) ;
4070: LD_VAR 0 3
4074: PPUSH
4075: LD_INT 99
4077: PPUSH
4078: LD_INT 73
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 50
// end ;
4091: GO 4053
4093: POP
4094: POP
// wait ( 0 0$0.5 ) ;
4095: LD_INT 18
4097: PPUSH
4098: CALL_OW 67
// SaveForQuickRestart ;
4102: CALL_OW 22
// end ;
4106: LD_VAR 0 2
4110: RET
// every 0 0$10 trigger stav_omikron < 3 do
4111: LD_EXP 39
4115: PUSH
4116: LD_INT 3
4118: LESS
4119: IFFALSE 4188
4121: GO 4123
4123: DISABLE
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
4124: LD_INT 50
4126: PPUSH
4127: LD_INT 4200
4129: PPUSH
4130: CALL_OW 12
4134: PPUSH
4135: CALL_OW 67
// wait ( konzervy_delay * 0 0$5 ) ;
4139: LD_LOC 16
4143: PUSH
4144: LD_INT 175
4146: MUL
4147: PPUSH
4148: CALL_OW 67
// konzervy_delay = konzervy_delay + 1 ;
4152: LD_ADDR_LOC 16
4156: PUSH
4157: LD_LOC 16
4161: PUSH
4162: LD_INT 1
4164: PLUS
4165: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 12
4176: PPUSH
4177: LD_INT 7
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: CALL_OW 55
// enable ;
4187: ENABLE
// end ;
4188: END
// every 0 0$30 do
4189: GO 4191
4191: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4192: LD_INT 3
4194: PPUSH
4195: LD_INT 5
4197: PPUSH
4198: CALL_OW 12
4202: PPUSH
4203: LD_INT 7
4205: PPUSH
4206: LD_INT 1
4208: PPUSH
4209: CALL_OW 55
// end ;
4213: END
// every 1 1$20 do
4214: GO 4216
4216: DISABLE
// begin wait ( Rand ( 1 , 0 0$40 ) ) ;
4217: LD_INT 1
4219: PPUSH
4220: LD_INT 1400
4222: PPUSH
4223: CALL_OW 12
4227: PPUSH
4228: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 4 ) , konzervy_all , true ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 4
4237: PPUSH
4238: CALL_OW 12
4242: PPUSH
4243: LD_INT 25
4245: PPUSH
4246: LD_INT 1
4248: PPUSH
4249: CALL_OW 55
// end ;
4253: END
// function manage_zbytek ( lidi ) ; var i ; begin
4254: LD_INT 0
4256: PPUSH
4257: PPUSH
// for i in lidi do
4258: LD_ADDR_VAR 0 3
4262: PUSH
4263: LD_VAR 0 1
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4308
// begin SetSide ( i , You2 ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_EXP 2
4280: PPUSH
4281: CALL_OW 235
// PlaceUnitXYR ( i , 144 , 79 , 3 , false ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 144
4292: PPUSH
4293: LD_INT 79
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL_OW 50
// end ;
4306: GO 4268
4308: POP
4309: POP
// ComEnterUnit ( lidi , RU1_dep ) ;
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 120
// end ; end_of_file
4322: LD_VAR 0 2
4326: RET
// export level_bw_e ; export schol_find_amikama ; export levely_amici ; export posily1 ; export posily11 ; export posily2 ; export posily3 ; export posily4 ; export utok_na_omikron ; export levely_ruske_posily ; export levely_am_budov ; export muze_projit_posil ; export muze_prezit_posil ; export BELKOV_SAVED ; export STAV_UTOKU ; export function set_difficulty ; begin
4327: LD_INT 0
4329: PPUSH
// BELKOV_SAVED = LoadVariable ( belkov_saved , 0 ) ;
4330: LD_ADDR_EXP 24
4334: PUSH
4335: LD_STRING belkov_saved
4337: PPUSH
4338: LD_INT 0
4340: PPUSH
4341: CALL_OW 30
4345: ST_TO_ADDR
// STAV_UTOKU = LoadVariable ( utok_stav , 3 ) ;
4346: LD_ADDR_EXP 25
4350: PUSH
4351: LD_STRING utok_stav
4353: PPUSH
4354: LD_INT 3
4356: PPUSH
4357: CALL_OW 30
4361: ST_TO_ADDR
// level_bw_e = [ 2 , 3 , 4 ] ;
4362: LD_ADDR_EXP 11
4366: PUSH
4367: LD_INT 2
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: ST_TO_ADDR
// schol_find_amikama = [ 11 11$0 , 9 9$0 , 7 7$0 ] ;
4381: LD_ADDR_EXP 12
4385: PUSH
4386: LD_INT 23100
4388: PUSH
4389: LD_INT 18900
4391: PUSH
4392: LD_INT 14700
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: ST_TO_ADDR
// levely_amici = [ 2 , 3 , 4 ] ;
4400: LD_ADDR_EXP 13
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: LD_INT 4
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: ST_TO_ADDR
// posily1 = [ 13 13$00 , 11 11$00 , 10 10$00 ] ;
4419: LD_ADDR_EXP 14
4423: PUSH
4424: LD_INT 27300
4426: PUSH
4427: LD_INT 23100
4429: PUSH
4430: LD_INT 21000
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// posily11 = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
4438: LD_ADDR_EXP 15
4442: PUSH
4443: LD_INT 10500
4445: PUSH
4446: LD_INT 8400
4448: PUSH
4449: LD_INT 6300
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: ST_TO_ADDR
// posily2 = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
4457: LD_ADDR_EXP 16
4461: PUSH
4462: LD_INT 21000
4464: PUSH
4465: LD_INT 16800
4467: PUSH
4468: LD_INT 10500
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: ST_TO_ADDR
// posily3 = [ 11 11$0 , 8 8$30 , 5 5$0 ] ;
4476: LD_ADDR_EXP 17
4480: PUSH
4481: LD_INT 23100
4483: PUSH
4484: LD_INT 17850
4486: PUSH
4487: LD_INT 10500
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// posily4 = [ 8 8$0 , 7 7$0 , 5 5$0 ] ;
4495: LD_ADDR_EXP 18
4499: PUSH
4500: LD_INT 16800
4502: PUSH
4503: LD_INT 14700
4505: PUSH
4506: LD_INT 10500
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: ST_TO_ADDR
// utok_na_omikron = [ 55 55$0 , 45 45$0 , 35 35$0 ] [ difficulty ] ;
4514: LD_ADDR_EXP 19
4518: PUSH
4519: LD_INT 115500
4521: PUSH
4522: LD_INT 94500
4524: PUSH
4525: LD_INT 73500
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: PUSH
4533: LD_OWVAR 67
4537: ARRAY
4538: ST_TO_ADDR
// levely_ruske_posily = [ 4 , 3 , 2 ] ;
4539: LD_ADDR_EXP 20
4543: PUSH
4544: LD_INT 4
4546: PUSH
4547: LD_INT 3
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
// levely_am_budov = [ 0 , 1 , 2 ] ;
4558: LD_ADDR_EXP 21
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// muze_projit_posil = [ 8 , 8 , 6 ] ;
4577: LD_ADDR_EXP 22
4581: PUSH
4582: LD_INT 8
4584: PUSH
4585: LD_INT 8
4587: PUSH
4588: LD_INT 6
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: ST_TO_ADDR
// muze_prezit_posil = [ 2 , 5 , 100 ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_INT 2
4603: PUSH
4604: LD_INT 5
4606: PUSH
4607: LD_INT 100
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
4615: LD_ADDR_EXP 26
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_STRING :
4625: PUSH
4626: LD_INT 0
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// end ;
4634: LD_VAR 0 1
4638: RET
// export cas ; every 0 0$10 do var pom ;
4639: GO 4641
4641: DISABLE
4642: LD_INT 0
4644: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
4645: LD_EXP 26
4649: PUSH
4650: LD_INT 3
4652: ARRAY
4653: PUSH
4654: LD_INT 10
4656: PLUS
4657: PUSH
4658: LD_INT 60
4660: EQUAL
4661: IFFALSE 4697
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
4663: LD_ADDR_EXP 26
4667: PUSH
4668: LD_EXP 26
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PUSH
4677: LD_INT 1
4679: PLUS
4680: PUSH
4681: LD_EXP 26
4685: PUSH
4686: LD_INT 2
4688: ARRAY
4689: ADD
4690: PUSH
4691: LD_INT 0
4693: ADD
4694: ST_TO_ADDR
4695: GO 4735
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
4697: LD_ADDR_EXP 26
4701: PUSH
4702: LD_EXP 26
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PUSH
4711: LD_EXP 26
4715: PUSH
4716: LD_INT 2
4718: ARRAY
4719: ADD
4720: PUSH
4721: LD_EXP 26
4725: PUSH
4726: LD_INT 3
4728: ARRAY
4729: PUSH
4730: LD_INT 10
4732: PLUS
4733: ADD
4734: ST_TO_ADDR
// debug_strings = [ cas ] ;
4735: LD_ADDR_OWVAR 48
4739: PUSH
4740: LD_EXP 26
4744: PUSH
4745: EMPTY
4746: LIST
4747: ST_TO_ADDR
// enable ;
4748: ENABLE
// end ;
4749: PPOPN 1
4751: END
// export function pojmenovani_zakladen ; var pom ; begin
4752: LD_INT 0
4754: PPUSH
4755: PPUSH
// SetBName ( RU1_dep , kirov ) ;
4756: LD_INT 1
4758: PPUSH
4759: LD_STRING kirov
4761: PPUSH
4762: CALL_OW 500
// pom = FilterUnitsInArea ( Ru2_base , [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
4766: LD_ADDR_VAR 0 2
4770: PUSH
4771: LD_INT 2
4773: PPUSH
4774: LD_INT 22
4776: PUSH
4777: LD_EXP 1
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: LD_INT 0
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 70
4804: ST_TO_ADDR
// if pom > 0 then
4805: LD_VAR 0 2
4809: PUSH
4810: LD_INT 0
4812: GREATER
4813: IFFALSE 4831
// SetBName ( pom [ 1 ] , beria ) ;
4815: LD_VAR 0 2
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: PPUSH
4824: LD_STRING beria
4826: PPUSH
4827: CALL_OW 500
// SetBName ( Am_dep , omikron ) ;
4831: LD_INT 12
4833: PPUSH
4834: LD_STRING omikron
4836: PPUSH
4837: CALL_OW 500
// end ;
4841: LD_VAR 0 1
4845: RET
// export function pojmenovani_kaganoviche ( base ) ; begin
4846: LD_INT 0
4848: PPUSH
// SetBName ( base , kagan ) ;
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_STRING kagan
4856: PPUSH
4857: CALL_OW 500
// end ; end_of_file
4861: LD_VAR 0 2
4865: RET
// export kur ; export pop ; export bur ; export kov ; export gny ; export bel ; export schol ; export schol2 ; export grishko ; export Rusi_enter ; export scholtze_saved ; export stav_aut ; export stav_omikron ; export RU_videl_oil ; var counter_zapnut ; export setkani_om ; var R_comp ; export Rusi_utekli ; export Rusi_save ; var dialog_probehnul ; var qrefuel_over ; export kecy_scholtze_nalezen ; export konec_counteru ; export stav_aut_new ; export postavenych_aut ; var TTime ; export special_time ; every 0 0$0.1 do var i ;
4866: GO 4868
4868: DISABLE
4869: LD_INT 0
4871: PPUSH
// begin schol = 0 ;
4872: LD_ADDR_EXP 33
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// scholtze_saved = false ;
4880: LD_ADDR_EXP 37
4884: PUSH
4885: LD_INT 0
4887: ST_TO_ADDR
// stav_omikron = 0 ;
4888: LD_ADDR_EXP 39
4892: PUSH
4893: LD_INT 0
4895: ST_TO_ADDR
// stav_aut = 0 ;
4896: LD_ADDR_EXP 38
4900: PUSH
4901: LD_INT 0
4903: ST_TO_ADDR
// RU_videl_oil = false ;
4904: LD_ADDR_EXP 40
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// counter_zapnut = false ;
4912: LD_ADDR_LOC 17
4916: PUSH
4917: LD_INT 0
4919: ST_TO_ADDR
// setkani_om = false ;
4920: LD_ADDR_EXP 41
4924: PUSH
4925: LD_INT 0
4927: ST_TO_ADDR
// R_comp = [ ] ;
4928: LD_ADDR_LOC 18
4932: PUSH
4933: EMPTY
4934: ST_TO_ADDR
// Rusi_utekli = [ ] ;
4935: LD_ADDR_EXP 42
4939: PUSH
4940: EMPTY
4941: ST_TO_ADDR
// Rusi_save = [ ] ;
4942: LD_ADDR_EXP 43
4946: PUSH
4947: EMPTY
4948: ST_TO_ADDR
// dialog_probehnul = false ;
4949: LD_ADDR_LOC 19
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// qrefuel_over = false ;
4957: LD_ADDR_LOC 20
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// kecy_scholtze_nalezen = false ;
4965: LD_ADDR_EXP 44
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// postavenych_aut = 0 ;
4973: LD_ADDR_EXP 47
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// TTime = 0 ;
4981: LD_ADDR_LOC 21
4985: PUSH
4986: LD_INT 0
4988: ST_TO_ADDR
// konec_counteru = false ;
4989: LD_ADDR_EXP 45
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// stav_aut_new = 0 ;
4997: LD_ADDR_EXP 46
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
// special_time = false ;
5005: LD_ADDR_EXP 48
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 6 , 7 , 8 , 9 , 10 , 51 , 52 , 53 , 200 , 201 , 202 , 203 ] do
5013: LD_ADDR_VAR 0 1
5017: PUSH
5018: LD_INT 1
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: LD_INT 6
5029: PUSH
5030: LD_INT 7
5032: PUSH
5033: LD_INT 8
5035: PUSH
5036: LD_INT 9
5038: PUSH
5039: LD_INT 10
5041: PUSH
5042: LD_INT 51
5044: PUSH
5045: LD_INT 52
5047: PUSH
5048: LD_INT 53
5050: PUSH
5051: LD_INT 200
5053: PUSH
5054: LD_INT 201
5056: PUSH
5057: LD_INT 202
5059: PUSH
5060: LD_INT 203
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5090
// disable ( i ) ;
5083: LD_VAR 0 1
5087: DISABLE_MARKED
5088: GO 5080
5090: POP
5091: POP
// end ;
5092: PPOPN 1
5094: END
// export function uklid_rusu ; begin
5095: LD_INT 0
5097: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
5098: LD_INT 42
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
5108: LD_INT 43
5110: PPUSH
5111: LD_INT 4
5113: PPUSH
5114: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab2 ) ;
5118: LD_INT 44
5120: PPUSH
5121: LD_INT 16
5123: PPUSH
5124: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab2 ) ;
5128: LD_INT 45
5130: PPUSH
5131: LD_INT 16
5133: PPUSH
5134: CALL_OW 120
// ComEnterUnit ( RU1_sci3 , RU1_lab2 ) ;
5138: LD_INT 46
5140: PPUSH
5141: LD_INT 16
5143: PPUSH
5144: CALL_OW 120
// ComEnterUnit ( RU1_sci4 , RU1_lab1 ) ;
5148: LD_INT 47
5150: PPUSH
5151: LD_INT 6
5153: PPUSH
5154: CALL_OW 120
// ComEnterUnit ( RU1_sci5 , RU1_lab1 ) ;
5158: LD_INT 48
5160: PPUSH
5161: LD_INT 6
5163: PPUSH
5164: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_fac ) ;
5168: LD_INT 49
5170: PPUSH
5171: LD_INT 5
5173: PPUSH
5174: CALL_OW 120
// ComEnterUnit ( RU1_me2 , RU1_fac ) ;
5178: LD_INT 50
5180: PPUSH
5181: LD_INT 5
5183: PPUSH
5184: CALL_OW 120
// ComEnterUnit ( RU1_me3 , RU1_fac ) ;
5188: LD_INT 51
5190: PPUSH
5191: LD_INT 5
5193: PPUSH
5194: CALL_OW 120
// ComEnterUnit ( pop , RU1_bar1 ) ;
5198: LD_EXP 28
5202: PPUSH
5203: LD_INT 2
5205: PPUSH
5206: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar1 ) ;
5210: LD_INT 52
5212: PPUSH
5213: LD_INT 2
5215: PPUSH
5216: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar1 ) ;
5220: LD_INT 53
5222: PPUSH
5223: LD_INT 2
5225: PPUSH
5226: CALL_OW 120
// ComEnterUnit ( RU1_sol3 , RU1_bar2 ) ;
5230: LD_INT 56
5232: PPUSH
5233: LD_INT 17
5235: PPUSH
5236: CALL_OW 120
// ComEnterUnit ( RU1_sol4 , RU1_bar2 ) ;
5240: LD_INT 54
5242: PPUSH
5243: LD_INT 17
5245: PPUSH
5246: CALL_OW 120
// ComEnterUnit ( RU1_sol5 , RU1_bar2 ) ;
5250: LD_INT 55
5252: PPUSH
5253: LD_INT 17
5255: PPUSH
5256: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
5260: LD_INT 57
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL_OW 120
// end ;
5270: LD_VAR 0 1
5274: RET
// every 5 5$30 do var pom ;
5275: GO 5277
5277: DISABLE
5278: LD_INT 0
5280: PPUSH
// begin schol2 = create_scholtze ;
5281: LD_ADDR_EXP 34
5285: PUSH
5286: CALL 2423 0 0
5290: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5291: LD_INT 70
5293: PPUSH
5294: CALL_OW 67
// CenterNowOnUnits ( schol2 ) ;
5298: LD_EXP 34
5302: PPUSH
5303: CALL_OW 87
// dialog_scholtze_enter ;
5307: CALL 11637 0 0
// ComMoveToArea ( schol2 , scholze_flee ) ;
5311: LD_EXP 34
5315: PPUSH
5316: LD_INT 45
5318: PPUSH
5319: CALL_OW 113
// AddComHold ( schol2 ) ;
5323: LD_EXP 34
5327: PPUSH
5328: CALL_OW 200
// wait ( 0 0$5 ) ;
5332: LD_INT 175
5334: PPUSH
5335: CALL_OW 67
// amici_hlidka ;
5339: CALL 23763 0 0
// enable ( 1 ) ;
5343: LD_INT 1
5345: ENABLE_MARKED
// end ;
5346: PPOPN 1
5348: END
// every 0 0$1 trigger FilterUnitsInArea ( Schol_les , [ [ f_side , You ] ] ) > 0 marked 1 do
5349: LD_INT 26
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_EXP 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: EMPTY
5365: LIST
5366: PPUSH
5367: CALL_OW 70
5371: PUSH
5372: LD_INT 0
5374: GREATER
5375: IFFALSE 5449
5377: GO 5379
5379: DISABLE
// begin kecy_scholtze_nalezen = true ;
5380: LD_ADDR_EXP 44
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// dialog_scholtze_nalezen ;
5388: CALL 11709 0 0
// SetSide ( schol2 , You ) ;
5392: LD_EXP 34
5396: PPUSH
5397: LD_EXP 1
5401: PPUSH
5402: CALL_OW 235
// schol = schol2 ;
5406: LD_ADDR_EXP 33
5410: PUSH
5411: LD_EXP 34
5415: ST_TO_ADDR
// ChangeMissionObjectives ( MScholtzeOut ) ;
5416: LD_STRING MScholtzeOut
5418: PPUSH
5419: CALL_OW 337
// wait ( 1 1$0 ) ;
5423: LD_INT 2100
5425: PPUSH
5426: CALL_OW 67
// if IsLive ( schol ) then
5430: LD_EXP 33
5434: PPUSH
5435: CALL_OW 300
5439: IFFALSE 5449
// scholtze_saved = true ;
5441: LD_ADDR_EXP 37
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// end ;
5449: END
// every 1 1$0 do
5450: GO 5452
5452: DISABLE
// begin if GetResourceType ( GetBase ( RU1_dep ) , mat_oil ) < 50 then
5453: LD_INT 1
5455: PPUSH
5456: CALL_OW 274
5460: PPUSH
5461: LD_INT 2
5463: PPUSH
5464: CALL_OW 275
5468: PUSH
5469: LD_INT 50
5471: LESS
5472: IFFALSE 5492
// AddResourceType ( GetBase ( RU1_dep ) , mat_oil , 100 ) ;
5474: LD_INT 1
5476: PPUSH
5477: CALL_OW 274
5481: PPUSH
5482: LD_INT 2
5484: PPUSH
5485: LD_INT 100
5487: PPUSH
5488: CALL_OW 276
// enable ;
5492: ENABLE
// end ;
5493: END
// every 1 1$7 do
5494: GO 5496
5496: DISABLE
// begin if Researched ( You2 , tech_Weap1 ) then
5497: LD_EXP 2
5501: PPUSH
5502: LD_INT 51
5504: PPUSH
5505: CALL_OW 325
5509: IFFALSE 5536
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5511: LD_INT 51
5513: PPUSH
5514: LD_EXP 2
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5526: LD_INT 6
5528: PPUSH
5529: LD_INT 51
5531: PPUSH
5532: CALL_OW 124
// end ; enable ;
5536: ENABLE
// end ;
5537: END
// every 0 0$19 do
5538: GO 5540
5540: DISABLE
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5541: LD_INT 51
5543: PPUSH
5544: LD_EXP 2
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5556: LD_INT 6
5558: PPUSH
5559: LD_INT 51
5561: PPUSH
5562: CALL_OW 124
// end ;
5566: END
// every 0 0$5 trigger stav_omikron = 2 do
5567: LD_EXP 39
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: IFFALSE 5618
5577: GO 5579
5579: DISABLE
// begin TTime = 7 7$0 ;
5580: LD_ADDR_LOC 21
5584: PUSH
5585: LD_INT 14700
5587: ST_TO_ADDR
// enable ( 53 ) ;
5588: LD_INT 53
5590: ENABLE_MARKED
// wait ( 7 7$0 ) ;
5591: LD_INT 14700
5593: PPUSH
5594: CALL_OW 67
// special_time = true ;
5598: LD_ADDR_EXP 48
5602: PUSH
5603: LD_INT 1
5605: ST_TO_ADDR
// hlaska_omicron ;
5606: CALL 13306 0 0
// stav_omikron = 3 ;
5610: LD_ADDR_EXP 39
5614: PUSH
5615: LD_INT 3
5617: ST_TO_ADDR
// end ;
5618: END
// export function popov_ven ; var i ; begin
5619: LD_INT 0
5621: PPUSH
5622: PPUSH
// for i = 1 to 8 do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_INT 8
5635: PUSH
5636: FOR_TO
5637: IFFALSE 5655
// DoNotAttack ( i , pop ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: LD_EXP 28
5648: PPUSH
5649: CALL_OW 471
5653: GO 5636
5655: POP
5656: POP
// while IsInUnit ( pop ) > 0 do
5657: LD_EXP 28
5661: PPUSH
5662: CALL_OW 310
5666: PUSH
5667: LD_INT 0
5669: GREATER
5670: IFFALSE 5737
// begin case GetType ( IsInUnit ( pop ) ) of unit_building :
5672: LD_EXP 28
5676: PPUSH
5677: CALL_OW 310
5681: PPUSH
5682: CALL_OW 247
5686: PUSH
5687: LD_INT 3
5689: DOUBLE
5690: EQUAL
5691: IFTRUE 5695
5693: GO 5707
5695: POP
// ComExitBuilding ( pop ) ; unit_vehicle :
5696: LD_EXP 28
5700: PPUSH
5701: CALL_OW 122
5705: GO 5728
5707: LD_INT 2
5709: DOUBLE
5710: EQUAL
5711: IFTRUE 5715
5713: GO 5727
5715: POP
// ComExitVehicle ( pop ) ; end ;
5716: LD_EXP 28
5720: PPUSH
5721: CALL_OW 121
5725: GO 5728
5727: POP
// wait ( 0 0$0.5 ) ;
5728: LD_INT 18
5730: PPUSH
5731: CALL_OW 67
// end ;
5735: GO 5657
// AddComMoveToArea ( pop , bst_2 ) ;
5737: LD_EXP 28
5741: PPUSH
5742: LD_INT 41
5744: PPUSH
5745: CALL_OW 173
// AddComMoveToArea ( pop , bst_3 ) ;
5749: LD_EXP 28
5753: PPUSH
5754: LD_INT 42
5756: PPUSH
5757: CALL_OW 173
// AddComHold ( pop ) ;
5761: LD_EXP 28
5765: PPUSH
5766: CALL_OW 200
// end ;
5770: LD_VAR 0 1
5774: RET
// every 0 0$5 trigger IsInArea ( pop , Exit_area ) do
5775: LD_EXP 28
5779: PPUSH
5780: LD_INT 16
5782: PPUSH
5783: CALL_OW 308
5787: IFFALSE 5801
5789: GO 5791
5791: DISABLE
// begin RemoveUnit ( pop ) ;
5792: LD_EXP 28
5796: PPUSH
5797: CALL_OW 64
// end ;
5801: END
// export function prebarveni_druhe_baze ; var pom , i ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You3 ] , [ f_type , unit_building ] ] ) ;
5807: LD_ADDR_VAR 0 2
5811: PUSH
5812: LD_INT 2
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_EXP 3
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 21
5829: PUSH
5830: LD_INT 3
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PPUSH
5841: CALL_OW 70
5845: ST_TO_ADDR
// for i in pom do
5846: LD_ADDR_VAR 0 3
5850: PUSH
5851: LD_VAR 0 2
5855: PUSH
5856: FOR_IN
5857: IFFALSE 5875
// SetSide ( i , You ) ;
5859: LD_VAR 0 3
5863: PPUSH
5864: LD_EXP 1
5868: PPUSH
5869: CALL_OW 235
5873: GO 5856
5875: POP
5876: POP
// end ;
5877: LD_VAR 0 1
5881: RET
// export function pomoc_pro_omikroni_utok ; var i ; begin
5882: LD_INT 0
5884: PPUSH
5885: PPUSH
// for i in RUSKE_POSILY_NA_OMICRON_LIST do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_EXP 56
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5916
// PlaceUnitArea ( i , Enterposil , false ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 49
5906: PPUSH
5907: LD_INT 0
5909: PPUSH
5910: CALL_OW 49
5914: GO 5896
5916: POP
5917: POP
// ComMoveToArea ( RUSKE_POSILY_NA_OMICRON_LIST , bst_4 ) ;
5918: LD_EXP 56
5922: PPUSH
5923: LD_INT 43
5925: PPUSH
5926: CALL_OW 113
// for i in RUSKE_POSILY_RIDICI_LIST do
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: LD_EXP 57
5939: PUSH
5940: FOR_IN
5941: IFFALSE 5960
// PlaceUnitArea ( i , Arabi1 , false ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 12
5950: PPUSH
5951: LD_INT 0
5953: PPUSH
5954: CALL_OW 49
5958: GO 5940
5960: POP
5961: POP
// ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , bst_1 ) ;
5962: LD_EXP 57
5966: PPUSH
5967: LD_INT 40
5969: PPUSH
5970: CALL_OW 113
// AddComEnterUnit ( RUSKE_POSILY_RIDICI_LIST , RU1_fac ) ;
5974: LD_EXP 57
5978: PPUSH
5979: LD_INT 5
5981: PPUSH
5982: CALL_OW 180
// end ;
5986: LD_VAR 0 1
5990: RET
// every 0 0$1 trigger stav_omikron = 3 and not special_time do
5991: LD_EXP 39
5995: PUSH
5996: LD_INT 3
5998: EQUAL
5999: PUSH
6000: LD_EXP 48
6004: NOT
6005: AND
6006: IFFALSE 6040
6008: GO 6010
6010: DISABLE
// begin disable ( 53 ) ;
6011: LD_INT 53
6013: DISABLE_MARKED
// TTime = 3 3$0 ;
6014: LD_ADDR_LOC 21
6018: PUSH
6019: LD_INT 6300
6021: ST_TO_ADDR
// enable ( 51 ) ;
6022: LD_INT 51
6024: ENABLE_MARKED
// counter_zapnut = true ;
6025: LD_ADDR_LOC 17
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// posli_ruske_posily ;
6033: CALL 6540 0 0
// enable ( 3 ) ;
6037: LD_INT 3
6039: ENABLE_MARKED
// end ;
6040: END
// every 0 0$1 trigger stav_omikron = 3 and special_time do
6041: LD_EXP 39
6045: PUSH
6046: LD_INT 3
6048: EQUAL
6049: PUSH
6050: LD_EXP 48
6054: AND
6055: IFFALSE 6089
6057: GO 6059
6059: DISABLE
// begin disable ( 53 ) ;
6060: LD_INT 53
6062: DISABLE_MARKED
// TTime = 2 2$0 ;
6063: LD_ADDR_LOC 21
6067: PUSH
6068: LD_INT 4200
6070: ST_TO_ADDR
// enable ( 51 ) ;
6071: LD_INT 51
6073: ENABLE_MARKED
// counter_zapnut = true ;
6074: LD_ADDR_LOC 17
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// posli_ruske_posily ;
6082: CALL 6540 0 0
// enable ( 3 ) ;
6086: LD_INT 3
6088: ENABLE_MARKED
// end ;
6089: END
// every 0 0$3 trigger stav_omikron = 3 do var i , pom , pom1 , pom2 , rpom ; var rusi_enter_new ; var poc ;
6090: LD_EXP 39
6094: PUSH
6095: LD_INT 3
6097: EQUAL
6098: IFFALSE 6292
6100: GO 6102
6102: DISABLE
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
6107: PPUSH
6108: PPUSH
6109: PPUSH
6110: PPUSH
6111: PPUSH
// begin if FilterUnitsInArea ( Om_zone , [ [ f_side , You ] ] ) then
6112: LD_INT 8
6114: PPUSH
6115: LD_INT 22
6117: PUSH
6118: LD_EXP 1
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: IFFALSE 6291
// begin rpom = FilterUnitsExceptArea ( Om_pom1 , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
6136: LD_ADDR_VAR 0 5
6140: PUSH
6141: LD_INT 23
6143: PPUSH
6144: LD_INT 22
6146: PUSH
6147: LD_EXP 1
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 1
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PPUSH
6170: CALL_OW 71
6174: ST_TO_ADDR
// if rpom = 0 then
6175: LD_VAR 0 5
6179: PUSH
6180: LD_INT 0
6182: EQUAL
6183: IFFALSE 6288
// begin disable ( 51 ) ;
6185: LD_INT 51
6187: DISABLE_MARKED
// disable ( 52 ) ;
6188: LD_INT 52
6190: DISABLE_MARKED
// konec_counteru = true ;
6191: LD_ADDR_EXP 45
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// poc = 0 ;
6199: LD_ADDR_VAR 0 7
6203: PUSH
6204: LD_INT 0
6206: ST_TO_ADDR
// while FilterUnitsInArea ( Om_zone , [ [ f_side , You2 ] ] ) = 0 and poc < 60 do
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 22
6212: PUSH
6213: LD_EXP 2
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: EMPTY
6223: LIST
6224: PPUSH
6225: CALL_OW 70
6229: PUSH
6230: LD_INT 0
6232: EQUAL
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: LD_INT 60
6241: LESS
6242: AND
6243: IFFALSE 6268
// begin wait ( 0 0$1 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// poc = poc + 1 ;
6252: LD_ADDR_VAR 0 7
6256: PUSH
6257: LD_VAR 0 7
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6207
// stav_omikron = 4 ;
6268: LD_ADDR_EXP 39
6272: PUSH
6273: LD_INT 4
6275: ST_TO_ADDR
// dialog_pred_omicronem ;
6276: CALL 13389 0 0
// enable ( 9 ) ;
6280: LD_INT 9
6282: ENABLE_MARKED
// disable ( 3 ) ;
6283: LD_INT 3
6285: DISABLE_MARKED
// end else
6286: GO 6289
// enable ;
6288: ENABLE
// end else
6289: GO 6292
// enable ;
6291: ENABLE
// end ;
6292: PPOPN 7
6294: END
// export function CheckVehicles ; var pom , pom1 , pom2 ; begin
6295: LD_INT 0
6297: PPUSH
6298: PPUSH
6299: PPUSH
6300: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6301: LD_ADDR_VAR 0 2
6305: PUSH
6306: LD_INT 22
6308: PUSH
6309: LD_EXP 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 21
6320: PUSH
6321: LD_INT 2
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 69
6336: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
6337: LD_ADDR_VAR 0 3
6341: PUSH
6342: LD_INT 22
6344: PUSH
6345: LD_EXP 1
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PUSH
6354: LD_INT 21
6356: PUSH
6357: LD_INT 1
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: PUSH
6364: LD_INT 51
6366: PUSH
6367: EMPTY
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: PPUSH
6375: CALL_OW 69
6379: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Ru2_base , [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
6380: LD_ADDR_VAR 0 4
6384: PUSH
6385: LD_INT 2
6387: PPUSH
6388: LD_INT 22
6390: PUSH
6391: LD_EXP 2
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 21
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 70
6418: ST_TO_ADDR
// pom = pom + pom2 ;
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: LD_VAR 0 2
6428: PUSH
6429: LD_VAR 0 4
6433: PLUS
6434: ST_TO_ADDR
// if pom < pom1 then
6435: LD_VAR 0 2
6439: PUSH
6440: LD_VAR 0 3
6444: LESS
6445: IFFALSE 6455
// stav_aut_new = 3 ;
6447: LD_ADDR_EXP 46
6451: PUSH
6452: LD_INT 3
6454: ST_TO_ADDR
// if pom = pom1 then
6455: LD_VAR 0 2
6459: PUSH
6460: LD_VAR 0 3
6464: EQUAL
6465: IFFALSE 6475
// stav_aut_new = 2 ;
6467: LD_ADDR_EXP 46
6471: PUSH
6472: LD_INT 2
6474: ST_TO_ADDR
// if pom > pom1 and KurinAddTime = 0 then
6475: LD_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: GREATER
6485: PUSH
6486: LD_EXP 7
6490: PUSH
6491: LD_INT 0
6493: EQUAL
6494: AND
6495: IFFALSE 6505
// stav_aut_new = 1 ;
6497: LD_ADDR_EXP 46
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// if pom >= pom1 and KurinAddTime = 1 then
6505: LD_VAR 0 2
6509: PUSH
6510: LD_VAR 0 3
6514: GREATEREQUAL
6515: PUSH
6516: LD_EXP 7
6520: PUSH
6521: LD_INT 1
6523: EQUAL
6524: AND
6525: IFFALSE 6535
// stav_aut_new = 2 ;
6527: LD_ADDR_EXP 46
6531: PUSH
6532: LD_INT 2
6534: ST_TO_ADDR
// end ;
6535: LD_VAR 0 1
6539: RET
// function posli_ruske_posily ; begin
6540: LD_INT 0
6542: PPUSH
// McMove ( 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , [ [ 109 , 54 ] , [ 102 , 38 ] , [ 90 , 22 ] , [ 54 , 10 ] ] , [ mc_move_dontcapture ] ) ;
6543: LD_INT 1
6545: PPUSH
6546: LD_INT 22
6548: PUSH
6549: LD_INT 6
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 21
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 69
6574: PPUSH
6575: LD_INT 109
6577: PUSH
6578: LD_INT 54
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 102
6587: PUSH
6588: LD_INT 38
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: LD_INT 90
6597: PUSH
6598: LD_INT 22
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 54
6607: PUSH
6608: LD_INT 10
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: PPUSH
6621: LD_INT 5
6623: PUSH
6624: EMPTY
6625: LIST
6626: PPUSH
6627: CALL_OW 398
// end ;
6631: LD_VAR 0 1
6635: RET
// every 0 0$7 marked 2 do var i , k , pom ;
6636: GO 6638
6638: DISABLE
6639: LD_INT 0
6641: PPUSH
6642: PPUSH
6643: PPUSH
// begin ComExitBuilding ( RUSKE_POSILY_RIDICI_LIST ) ;
6644: LD_EXP 57
6648: PPUSH
6649: CALL_OW 122
// while FilterUnitsInArea ( RU2_base , [ [ f_side , You2 ] ] ) < RUSKE_POSILY_RIDICI_LIST do
6653: LD_INT 2
6655: PPUSH
6656: LD_INT 22
6658: PUSH
6659: LD_EXP 2
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: PPUSH
6671: CALL_OW 70
6675: PUSH
6676: LD_EXP 57
6680: LESS
6681: IFFALSE 6704
// begin ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , drivers_enter ) ;
6683: LD_EXP 57
6687: PPUSH
6688: LD_INT 47
6690: PPUSH
6691: CALL_OW 113
// wait ( 0 0$1 ) ;
6695: LD_INT 35
6697: PPUSH
6698: CALL_OW 67
// end ;
6702: GO 6653
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_not , [ f_occupied ] ] ] ) ;
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: LD_INT 2
6711: PPUSH
6712: LD_INT 22
6714: PUSH
6715: LD_EXP 1
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 21
6726: PUSH
6727: LD_INT 2
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: LD_INT 59
6739: PUSH
6740: EMPTY
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: PPUSH
6752: CALL_OW 70
6756: ST_TO_ADDR
// if not pom then
6757: LD_VAR 0 3
6761: NOT
6762: IFFALSE 6768
// konec_mise_lhani ;
6764: CALL 1440 0 0
// if pom < RUSKE_POSILY_RIDICI_LIST then
6768: LD_VAR 0 3
6772: PUSH
6773: LD_EXP 57
6777: LESS
6778: IFFALSE 6792
// k := pom else
6780: LD_ADDR_VAR 0 2
6784: PUSH
6785: LD_VAR 0 3
6789: ST_TO_ADDR
6790: GO 6802
// k := RUSKE_POSILY_RIDICI_LIST ;
6792: LD_ADDR_VAR 0 2
6796: PUSH
6797: LD_EXP 57
6801: ST_TO_ADDR
// for i = 1 to k do
6802: LD_ADDR_VAR 0 1
6806: PUSH
6807: DOUBLE
6808: LD_INT 1
6810: DEC
6811: ST_TO_ADDR
6812: LD_VAR 0 2
6816: PUSH
6817: FOR_TO
6818: IFFALSE 6869
// begin ComEnterUnit ( RUSKE_POSILY_RIDICI_LIST [ i ] , pom [ i ] ) ;
6820: LD_EXP 57
6824: PUSH
6825: LD_VAR 0 1
6829: ARRAY
6830: PPUSH
6831: LD_VAR 0 3
6835: PUSH
6836: LD_VAR 0 1
6840: ARRAY
6841: PPUSH
6842: CALL_OW 120
// AddComMoveXY ( RUSKE_POSILY_RIDICI_LIST [ i ] , 60 , 13 ) ;
6846: LD_EXP 57
6850: PUSH
6851: LD_VAR 0 1
6855: ARRAY
6856: PPUSH
6857: LD_INT 60
6859: PPUSH
6860: LD_INT 13
6862: PPUSH
6863: CALL_OW 171
// end ;
6867: GO 6817
6869: POP
6870: POP
// end ;
6871: PPOPN 3
6873: END
// every 0 0$1 marked 3 do
6874: GO 6876
6876: DISABLE
// begin if special_time then
6877: LD_EXP 48
6881: IFFALSE 6892
// wait ( 2 2$0 ) else
6883: LD_INT 4200
6885: PPUSH
6886: CALL_OW 67
6890: GO 6899
// wait ( 3 3$0 ) ;
6892: LD_INT 6300
6894: PPUSH
6895: CALL_OW 67
// if not setkani_om then
6899: LD_EXP 41
6903: NOT
6904: IFFALSE 6942
// begin dialog_upoz ;
6906: CALL 15634 0 0
// TTime = 2 2$0 ;
6910: LD_ADDR_LOC 21
6914: PUSH
6915: LD_INT 4200
6917: ST_TO_ADDR
// disable ( 51 ) ;
6918: LD_INT 51
6920: DISABLE_MARKED
// enable ( 52 ) ;
6921: LD_INT 52
6923: ENABLE_MARKED
// wait ( 2 2$0 ) ;
6924: LD_INT 4200
6926: PPUSH
6927: CALL_OW 67
// if not setkani_om then
6931: LD_EXP 41
6935: NOT
6936: IFFALSE 6942
// konec_pred_omikronem ;
6938: CALL 1459 0 0
// end ; end ;
6942: END
// every 0 0$1 marked 4 do var pom ;
6943: GO 6945
6945: DISABLE
6946: LD_INT 0
6948: PPUSH
// begin wait ( utok_na_omikron - 5 5$0 ) ;
6949: LD_EXP 19
6953: PUSH
6954: LD_INT 10500
6956: MINUS
6957: PPUSH
6958: CALL_OW 67
// pomoc_pro_omikroni_utok ;
6962: CALL 5882 0 0
// wait ( 5 5$0 ) ;
6966: LD_INT 10500
6968: PPUSH
6969: CALL_OW 67
// disable ( 5 ) ;
6973: LD_INT 5
6975: DISABLE_MARKED
// if dialog_probehnul then
6976: LD_LOC 19
6980: IFFALSE 6986
// exit else
6982: GO 7094
6984: GO 6994
// dialog_probehnul := true ;
6986: LD_ADDR_LOC 19
6990: PUSH
6991: LD_INT 1
6993: ST_TO_ADDR
// pom = dialog_otazka_poctu_aut ;
6994: LD_ADDR_VAR 0 1
6998: PUSH
6999: CALL 13095 0 0
7003: ST_TO_ADDR
// case pom of 1 :
7004: LD_VAR 0 1
7008: PUSH
7009: LD_INT 1
7011: DOUBLE
7012: EQUAL
7013: IFTRUE 7017
7015: GO 7039
7017: POP
// begin stav_omikron = 3 ;
7018: LD_ADDR_EXP 39
7022: PUSH
7023: LD_INT 3
7025: ST_TO_ADDR
// stav_aut = 1 ;
7026: LD_ADDR_EXP 38
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// enable ( 2 ) ;
7034: LD_INT 2
7036: ENABLE_MARKED
// end ; 2 :
7037: GO 7094
7039: LD_INT 2
7041: DOUBLE
7042: EQUAL
7043: IFTRUE 7047
7045: GO 7066
7047: POP
// begin stav_omikron = 3 ;
7048: LD_ADDR_EXP 39
7052: PUSH
7053: LD_INT 3
7055: ST_TO_ADDR
// stav_aut = 2 ;
7056: LD_ADDR_EXP 38
7060: PUSH
7061: LD_INT 2
7063: ST_TO_ADDR
// end ; 3 :
7064: GO 7094
7066: LD_INT 3
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7093
7074: POP
// begin stav_omikron = 2 ;
7075: LD_ADDR_EXP 39
7079: PUSH
7080: LD_INT 2
7082: ST_TO_ADDR
// stav_aut = 3 ;
7083: LD_ADDR_EXP 38
7087: PUSH
7088: LD_INT 3
7090: ST_TO_ADDR
// end ; end ;
7091: GO 7094
7093: POP
// end ;
7094: PPOPN 1
7096: END
// every 0 0$17 trigger stav_omikron < 2 marked 5 do var un , veh ;
7097: LD_EXP 39
7101: PUSH
7102: LD_INT 2
7104: LESS
7105: IFFALSE 7337
7107: GO 7109
7109: DISABLE
7110: LD_INT 0
7112: PPUSH
7113: PPUSH
// begin un = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
7114: LD_ADDR_VAR 0 1
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_EXP 1
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 21
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PPUSH
7145: CALL_OW 69
7149: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7150: LD_ADDR_VAR 0 2
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_EXP 1
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: ST_TO_ADDR
// if veh >= ( un + 2 ) then
7186: LD_VAR 0 2
7190: PUSH
7191: LD_VAR 0 1
7195: PUSH
7196: LD_INT 2
7198: PLUS
7199: GREATEREQUAL
7200: IFFALSE 7336
// begin disable ( 4 ) ;
7202: LD_INT 4
7204: DISABLE_MARKED
// pomoc_pro_omikroni_utok ;
7205: CALL 5882 0 0
// if dialog_probehnul then
7209: LD_LOC 19
7213: IFFALSE 7219
// exit else
7215: GO 7337
7217: GO 7227
// dialog_probehnul = true ;
7219: LD_ADDR_LOC 19
7223: PUSH
7224: LD_INT 1
7226: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7227: LD_INT 350
7229: PPUSH
7230: CALL_OW 67
// un = dialog_otazka_poctu_aut ;
7234: LD_ADDR_VAR 0 1
7238: PUSH
7239: CALL 13095 0 0
7243: ST_TO_ADDR
// case un of 1 :
7244: LD_VAR 0 1
7248: PUSH
7249: LD_INT 1
7251: DOUBLE
7252: EQUAL
7253: IFTRUE 7257
7255: GO 7279
7257: POP
// begin stav_omikron = 3 ;
7258: LD_ADDR_EXP 39
7262: PUSH
7263: LD_INT 3
7265: ST_TO_ADDR
// stav_aut = 1 ;
7266: LD_ADDR_EXP 38
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// enable ( 2 ) ;
7274: LD_INT 2
7276: ENABLE_MARKED
// end ; 2 :
7277: GO 7334
7279: LD_INT 2
7281: DOUBLE
7282: EQUAL
7283: IFTRUE 7287
7285: GO 7306
7287: POP
// begin stav_omikron = 3 ;
7288: LD_ADDR_EXP 39
7292: PUSH
7293: LD_INT 3
7295: ST_TO_ADDR
// stav_aut = 2 ;
7296: LD_ADDR_EXP 38
7300: PUSH
7301: LD_INT 2
7303: ST_TO_ADDR
// end ; 3 :
7304: GO 7334
7306: LD_INT 3
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7333
7314: POP
// begin stav_omikron = 2 ;
7315: LD_ADDR_EXP 39
7319: PUSH
7320: LD_INT 2
7322: ST_TO_ADDR
// stav_aut = 3 ;
7323: LD_ADDR_EXP 38
7327: PUSH
7328: LD_INT 3
7330: ST_TO_ADDR
// end ; end ;
7331: GO 7334
7333: POP
// end else
7334: GO 7337
// enable ;
7336: ENABLE
// end ;
7337: PPOPN 2
7339: END
// export function manage_ruske_computery_zpet ; var pom ; begin
7340: LD_INT 0
7342: PPUSH
7343: PPUSH
// disable ( 200 ) ;
7344: LD_INT 200
7346: DISABLE_MARKED
// disable ( 201 ) ;
7347: LD_INT 201
7349: DISABLE_MARKED
// disable ( 202 ) ;
7350: LD_INT 202
7352: DISABLE_MARKED
// disable ( 203 ) ;
7353: LD_INT 203
7355: DISABLE_MARKED
// pom = FilterUnitsInArea ( Am_base , [ [ F_side , You2 ] ] ) ;
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: LD_INT 6
7363: PPUSH
7364: LD_INT 22
7366: PUSH
7367: LD_EXP 2
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: EMPTY
7377: LIST
7378: PPUSH
7379: CALL_OW 70
7383: ST_TO_ADDR
// McMove ( 2 , pom , [ [ 42 , 14 ] , [ 60 , 15 ] , [ 95 , 21 ] , [ 100 , 34 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7384: LD_INT 2
7386: PPUSH
7387: LD_VAR 0 2
7391: PPUSH
7392: LD_INT 42
7394: PUSH
7395: LD_INT 14
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 60
7404: PUSH
7405: LD_INT 15
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 95
7414: PUSH
7415: LD_INT 21
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 100
7424: PUSH
7425: LD_INT 34
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: PPUSH
7438: LD_INT 6
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: LD_INT 3
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: PPUSH
7452: CALL_OW 398
// enable ( 5 ) ;
7456: LD_INT 5
7458: ENABLE_MARKED
// R_comp = pom ;
7459: LD_ADDR_LOC 18
7463: PUSH
7464: LD_VAR 0 2
7468: ST_TO_ADDR
// end ;
7469: LD_VAR 0 1
7473: RET
// every 0 0$15 marked 5 do
7474: GO 7476
7476: DISABLE
// begin wait ( 1 1$0 ) ;
7477: LD_INT 2100
7479: PPUSH
7480: CALL_OW 67
// McMove ( 1 , R_comp , [ [ 110 , 59 ] , [ 129 , 75 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7484: LD_INT 1
7486: PPUSH
7487: LD_LOC 18
7491: PPUSH
7492: LD_INT 110
7494: PUSH
7495: LD_INT 59
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 129
7504: PUSH
7505: LD_INT 75
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 6
7518: PUSH
7519: LD_INT 1
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 398
// end ;
7534: END
// function split_ruske_jednotky ( jedn ) ; var i , pom ; var p1 , p2 , p3 , p4 ; var a ; begin
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
// p1 = [ ] ;
7545: LD_ADDR_VAR 0 5
7549: PUSH
7550: EMPTY
7551: ST_TO_ADDR
// p2 = [ ] ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: EMPTY
7558: ST_TO_ADDR
// p3 = [ ] ;
7559: LD_ADDR_VAR 0 7
7563: PUSH
7564: EMPTY
7565: ST_TO_ADDR
// p4 = [ ] ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: EMPTY
7572: ST_TO_ADDR
// for i in jedn do
7573: LD_ADDR_VAR 0 3
7577: PUSH
7578: LD_VAR 0 1
7582: PUSH
7583: FOR_IN
7584: IFFALSE 7718
// begin pom = Rand ( 1 , 4 ) ;
7586: LD_ADDR_VAR 0 4
7590: PUSH
7591: LD_INT 1
7593: PPUSH
7594: LD_INT 4
7596: PPUSH
7597: CALL_OW 12
7601: ST_TO_ADDR
// case pom of 1 :
7602: LD_VAR 0 4
7606: PUSH
7607: LD_INT 1
7609: DOUBLE
7610: EQUAL
7611: IFTRUE 7615
7613: GO 7634
7615: POP
// p1 = p1 ^ i ; 2 :
7616: LD_ADDR_VAR 0 5
7620: PUSH
7621: LD_VAR 0 5
7625: PUSH
7626: LD_VAR 0 3
7630: ADD
7631: ST_TO_ADDR
7632: GO 7716
7634: LD_INT 2
7636: DOUBLE
7637: EQUAL
7638: IFTRUE 7642
7640: GO 7661
7642: POP
// p2 = p2 ^ i ; 3 :
7643: LD_ADDR_VAR 0 6
7647: PUSH
7648: LD_VAR 0 6
7652: PUSH
7653: LD_VAR 0 3
7657: ADD
7658: ST_TO_ADDR
7659: GO 7716
7661: LD_INT 3
7663: DOUBLE
7664: EQUAL
7665: IFTRUE 7669
7667: GO 7688
7669: POP
// p3 = p3 ^ i ; 4 :
7670: LD_ADDR_VAR 0 7
7674: PUSH
7675: LD_VAR 0 7
7679: PUSH
7680: LD_VAR 0 3
7684: ADD
7685: ST_TO_ADDR
7686: GO 7716
7688: LD_INT 4
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7715
7696: POP
// p4 = p4 ^ i ; end ;
7697: LD_ADDR_VAR 0 8
7701: PUSH
7702: LD_VAR 0 8
7706: PUSH
7707: LD_VAR 0 3
7711: ADD
7712: ST_TO_ADDR
7713: GO 7716
7715: POP
// end ;
7716: GO 7583
7718: POP
7719: POP
// a = [ p1 , p2 , p3 , p4 ] ;
7720: LD_ADDR_VAR 0 9
7724: PUSH
7725: LD_VAR 0 5
7729: PUSH
7730: LD_VAR 0 6
7734: PUSH
7735: LD_VAR 0 7
7739: PUSH
7740: LD_VAR 0 8
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// result := a ;
7751: LD_ADDR_VAR 0 2
7755: PUSH
7756: LD_VAR 0 9
7760: ST_TO_ADDR
// end ;
7761: LD_VAR 0 2
7765: RET
// every 0 0$1 marked 6 do var pom , i ;
7766: GO 7768
7768: DISABLE
7769: LD_INT 0
7771: PPUSH
7772: PPUSH
// begin pom = FilterUnitsInArea ( RU_odber , [ [ f_side , You2 ] ] ) ;
7773: LD_ADDR_VAR 0 1
7777: PUSH
7778: LD_INT 27
7780: PPUSH
7781: LD_INT 22
7783: PUSH
7784: LD_EXP 2
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: PPUSH
7796: CALL_OW 70
7800: ST_TO_ADDR
// if pom > 0 then
7801: LD_VAR 0 1
7805: PUSH
7806: LD_INT 0
7808: GREATER
7809: IFFALSE 7853
// begin Rusi_utekli = Rusi_utekli ^ pom ;
7811: LD_ADDR_EXP 42
7815: PUSH
7816: LD_EXP 42
7820: PUSH
7821: LD_VAR 0 1
7825: ADD
7826: ST_TO_ADDR
// for i in pom do
7827: LD_ADDR_VAR 0 2
7831: PUSH
7832: LD_VAR 0 1
7836: PUSH
7837: FOR_IN
7838: IFFALSE 7851
// RemoveUnit ( i ) ;
7840: LD_VAR 0 2
7844: PPUSH
7845: CALL_OW 64
7849: GO 7837
7851: POP
7852: POP
// end ; enable ;
7853: ENABLE
// end ;
7854: PPOPN 2
7856: END
// every 25 25$0 do var i , pom ;
7857: GO 7859
7859: DISABLE
7860: LD_INT 0
7862: PPUSH
7863: PPUSH
// begin for i in RU_posily_na_utek do
7864: LD_ADDR_VAR 0 1
7868: PUSH
7869: LD_EXP 58
7873: PUSH
7874: FOR_IN
7875: IFFALSE 7894
// PlaceUnitArea ( i , Ru_posily , false ) ;
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_INT 28
7884: PPUSH
7885: LD_INT 0
7887: PPUSH
7888: CALL_OW 49
7892: GO 7874
7894: POP
7895: POP
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_type , unit_vehicle ] ] ) ;
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_EXP 58
7905: PPUSH
7906: LD_INT 21
7908: PUSH
7909: LD_INT 2
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: PPUSH
7919: CALL_OW 72
7923: ST_TO_ADDR
// ComMoveXY ( pom , 155 , 93 ) ;
7924: LD_VAR 0 2
7928: PPUSH
7929: LD_INT 155
7931: PPUSH
7932: LD_INT 93
7934: PPUSH
7935: CALL_OW 111
// Rusi_save = pom ;
7939: LD_ADDR_EXP 43
7943: PUSH
7944: LD_VAR 0 2
7948: ST_TO_ADDR
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_soldier ] ] ) ;
7949: LD_ADDR_VAR 0 2
7953: PUSH
7954: LD_EXP 58
7958: PPUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 1
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: PPUSH
7972: CALL_OW 72
7976: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_bar2 ) ;
7977: LD_VAR 0 2
7981: PPUSH
7982: LD_INT 17
7984: PPUSH
7985: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_mechanic ] ] ) ;
7989: LD_ADDR_VAR 0 2
7993: PUSH
7994: LD_EXP 58
7998: PPUSH
7999: LD_INT 25
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: PPUSH
8012: CALL_OW 72
8016: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_fac ) ;
8017: LD_VAR 0 2
8021: PPUSH
8022: LD_INT 5
8024: PPUSH
8025: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_engineer ] ] ) ;
8029: LD_ADDR_VAR 0 2
8033: PUSH
8034: LD_EXP 58
8038: PPUSH
8039: LD_INT 25
8041: PUSH
8042: LD_INT 2
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: EMPTY
8050: LIST
8051: PPUSH
8052: CALL_OW 72
8056: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_dep ) ;
8057: LD_VAR 0 2
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 120
// Rusi_save = Rusi_save ^ [ RU1_sol1 , RU1_me3 , Ru1_sci2 , RU1_sci5 , RU1_sci3 , RU1_sol5 , RU1_eng1 ] ;
8069: LD_ADDR_EXP 43
8073: PUSH
8074: LD_EXP 43
8078: PUSH
8079: LD_INT 52
8081: PUSH
8082: LD_INT 51
8084: PUSH
8085: LD_INT 45
8087: PUSH
8088: LD_INT 48
8090: PUSH
8091: LD_INT 46
8093: PUSH
8094: LD_INT 55
8096: PUSH
8097: LD_INT 57
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: ADD
8109: ST_TO_ADDR
// end ;
8110: PPOPN 2
8112: END
// export function posli_rusy_pryc ; var pom ; begin
8113: LD_INT 0
8115: PPUSH
8116: PPUSH
// SetLives ( Rusi_save , 800 ) ;
8117: LD_EXP 43
8121: PPUSH
8122: LD_INT 800
8124: PPUSH
8125: CALL_OW 234
// pom = split_ruske_jednotky ( Rusi_save ) ;
8129: LD_ADDR_VAR 0 2
8133: PUSH
8134: LD_EXP 43
8138: PPUSH
8139: CALL 7535 0 1
8143: ST_TO_ADDR
// ComExitBuilding ( Rusi_save ) ;
8144: LD_EXP 43
8148: PPUSH
8149: CALL_OW 122
// AddComMoveXY ( pom [ 1 ] , 110 , 45 ) ;
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: PPUSH
8162: LD_INT 110
8164: PPUSH
8165: LD_INT 45
8167: PPUSH
8168: CALL_OW 171
// AddComMoveXY ( pom [ 2 ] , 103 , 60 ) ;
8172: LD_VAR 0 2
8176: PUSH
8177: LD_INT 2
8179: ARRAY
8180: PPUSH
8181: LD_INT 103
8183: PPUSH
8184: LD_INT 60
8186: PPUSH
8187: CALL_OW 171
// AddComMoveXY ( pom [ 3 ] , 76 , 80 ) ;
8191: LD_VAR 0 2
8195: PUSH
8196: LD_INT 3
8198: ARRAY
8199: PPUSH
8200: LD_INT 76
8202: PPUSH
8203: LD_INT 80
8205: PPUSH
8206: CALL_OW 171
// AddComMoveXY ( pom [ 4 ] , 53 , 1 ) ;
8210: LD_VAR 0 2
8214: PUSH
8215: LD_INT 4
8217: ARRAY
8218: PPUSH
8219: LD_INT 53
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 171
// end ;
8229: LD_VAR 0 1
8233: RET
// export function posli_lidi_zpet_omicron ; var pom ; var pom1 , i ; begin
8234: LD_INT 0
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
// pom1 = [ ] ;
8240: LD_ADDR_VAR 0 3
8244: PUSH
8245: EMPTY
8246: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_building ] , [ f_side , You ] ] ) ;
8247: LD_ADDR_VAR 0 2
8251: PUSH
8252: LD_INT 20
8254: PPUSH
8255: LD_INT 21
8257: PUSH
8258: LD_INT 3
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_EXP 1
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PPUSH
8281: CALL_OW 70
8285: ST_TO_ADDR
// for i in pom do
8286: LD_ADDR_VAR 0 4
8290: PUSH
8291: LD_VAR 0 2
8295: PUSH
8296: FOR_IN
8297: IFFALSE 8322
// pom1 = pom1 ^ UnitsInside ( i ) ;
8299: LD_ADDR_VAR 0 3
8303: PUSH
8304: LD_VAR 0 3
8308: PUSH
8309: LD_VAR 0 4
8313: PPUSH
8314: CALL_OW 313
8318: ADD
8319: ST_TO_ADDR
8320: GO 8296
8322: POP
8323: POP
// ComExitBuilding ( pom1 ) ;
8324: LD_VAR 0 3
8328: PPUSH
8329: CALL_OW 122
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , You ] ] ) ;
8333: LD_ADDR_VAR 0 2
8337: PUSH
8338: LD_INT 20
8340: PPUSH
8341: LD_INT 21
8343: PUSH
8344: LD_INT 1
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: LD_INT 22
8353: PUSH
8354: LD_EXP 1
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 70
8371: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
8372: LD_ADDR_VAR 0 3
8376: PUSH
8377: LD_VAR 0 3
8381: PUSH
8382: LD_VAR 0 2
8386: ADD
8387: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , You ] ] ) ;
8388: LD_ADDR_VAR 0 2
8392: PUSH
8393: LD_INT 20
8395: PPUSH
8396: LD_INT 21
8398: PUSH
8399: LD_INT 2
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 22
8408: PUSH
8409: LD_EXP 1
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 70
8426: ST_TO_ADDR
// for i in pom do
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: LD_VAR 0 2
8436: PUSH
8437: FOR_IN
8438: IFFALSE 8490
// begin pom1 = pom ^ i ;
8440: LD_ADDR_VAR 0 3
8444: PUSH
8445: LD_VAR 0 2
8449: PUSH
8450: LD_VAR 0 4
8454: ADD
8455: ST_TO_ADDR
// if IsDrivenBy ( i ) then
8456: LD_VAR 0 4
8460: PPUSH
8461: CALL_OW 311
8465: IFFALSE 8488
// pom1 = pom1 ^ IsDrivenBy ( i ) ;
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_VAR 0 3
8476: PUSH
8477: LD_VAR 0 4
8481: PPUSH
8482: CALL_OW 311
8486: ADD
8487: ST_TO_ADDR
// end ;
8488: GO 8437
8490: POP
8491: POP
// SetSide ( pom1 , You3 ) ;
8492: LD_VAR 0 3
8496: PPUSH
8497: LD_EXP 3
8501: PPUSH
8502: CALL_OW 235
// pom = FilterUnitsInArea ( Om_ven_1 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8506: LD_ADDR_VAR 0 2
8510: PUSH
8511: LD_INT 29
8513: PPUSH
8514: LD_INT 22
8516: PUSH
8517: LD_EXP 3
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: LD_INT 21
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 21
8541: PUSH
8542: LD_INT 1
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 70
8562: ST_TO_ADDR
// ComMoveXY ( pom , 79 , 16 ) ;
8563: LD_VAR 0 2
8567: PPUSH
8568: LD_INT 79
8570: PPUSH
8571: LD_INT 16
8573: PPUSH
8574: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_2 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8578: LD_ADDR_VAR 0 2
8582: PUSH
8583: LD_INT 30
8585: PPUSH
8586: LD_INT 22
8588: PUSH
8589: LD_EXP 3
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 2
8600: PUSH
8601: LD_INT 21
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 21
8613: PUSH
8614: LD_INT 1
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PPUSH
8630: CALL_OW 70
8634: ST_TO_ADDR
// ComMoveXY ( pom , 67 , 40 ) ;
8635: LD_VAR 0 2
8639: PPUSH
8640: LD_INT 67
8642: PPUSH
8643: LD_INT 40
8645: PPUSH
8646: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_3 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8650: LD_ADDR_VAR 0 2
8654: PUSH
8655: LD_INT 31
8657: PPUSH
8658: LD_INT 22
8660: PUSH
8661: LD_EXP 3
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: LD_INT 21
8675: PUSH
8676: LD_INT 2
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 70
8706: ST_TO_ADDR
// ComMoveXY ( pom , 58 , 52 ) ;
8707: LD_VAR 0 2
8711: PPUSH
8712: LD_INT 58
8714: PPUSH
8715: LD_INT 52
8717: PPUSH
8718: CALL_OW 111
// end ;
8722: LD_VAR 0 1
8726: RET
// export function get_lidi_popov_area ; var pom , i ; var drv ; var a ; begin
8727: LD_INT 0
8729: PPUSH
8730: PPUSH
8731: PPUSH
8732: PPUSH
8733: PPUSH
// a = [ ] ;
8734: LD_ADDR_VAR 0 5
8738: PUSH
8739: EMPTY
8740: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
8741: LD_ADDR_VAR 0 2
8745: PUSH
8746: LD_INT 15
8748: PPUSH
8749: LD_INT 22
8751: PUSH
8752: LD_EXP 1
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_INT 21
8763: PUSH
8764: LD_INT 1
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PPUSH
8775: CALL_OW 70
8779: ST_TO_ADDR
// a = pom ;
8780: LD_ADDR_VAR 0 5
8784: PUSH
8785: LD_VAR 0 2
8789: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
8790: LD_ADDR_VAR 0 2
8794: PUSH
8795: LD_INT 15
8797: PPUSH
8798: LD_INT 22
8800: PUSH
8801: LD_EXP 1
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: LD_INT 21
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PPUSH
8824: CALL_OW 70
8828: ST_TO_ADDR
// for i in pom do
8829: LD_ADDR_VAR 0 3
8833: PUSH
8834: LD_VAR 0 2
8838: PUSH
8839: FOR_IN
8840: IFFALSE 8898
// begin drv = IsDrivenBy ( i ) ;
8842: LD_ADDR_VAR 0 4
8846: PUSH
8847: LD_VAR 0 3
8851: PPUSH
8852: CALL_OW 311
8856: ST_TO_ADDR
// if ( not ( drv in a ) ) and ( drv <> 0 ) then
8857: LD_VAR 0 4
8861: PUSH
8862: LD_VAR 0 5
8866: IN
8867: NOT
8868: PUSH
8869: LD_VAR 0 4
8873: PUSH
8874: LD_INT 0
8876: NONEQUAL
8877: AND
8878: IFFALSE 8896
// a = a ^ drv ;
8880: LD_ADDR_VAR 0 5
8884: PUSH
8885: LD_VAR 0 5
8889: PUSH
8890: LD_VAR 0 4
8894: ADD
8895: ST_TO_ADDR
// end ;
8896: GO 8839
8898: POP
8899: POP
// result := a ;
8900: LD_ADDR_VAR 0 1
8904: PUSH
8905: LD_VAR 0 5
8909: ST_TO_ADDR
// end ;
8910: LD_VAR 0 1
8914: RET
// export function totalni_ukonceni_mise_v_ingame_videu ; var pom ; begin
8915: LD_INT 0
8917: PPUSH
8918: PPUSH
// InGameOn ;
8919: CALL_OW 8
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8923: LD_ADDR_VAR 0 2
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_EXP 1
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 2
8942: PUSH
8943: LD_INT 21
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 1
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 69
8976: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8977: LD_INT 10
8979: PPUSH
8980: LD_VAR 0 2
8984: PPUSH
8985: LD_INT 108
8987: PUSH
8988: LD_INT 70
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 77
8997: PUSH
8998: LD_INT 65
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 53
9007: PUSH
9008: LD_INT 63
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 40
9017: PUSH
9018: LD_INT 64
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 51
9027: PUSH
9028: LD_INT 97
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: PPUSH
9042: LD_INT 10
9044: PUSH
9045: LD_INT 5
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 398
// pom = FilterAllUnits ( [ [ f_side , You2 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9056: LD_ADDR_VAR 0 2
9060: PUSH
9061: LD_INT 22
9063: PUSH
9064: LD_EXP 2
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 2
9075: PUSH
9076: LD_INT 21
9078: PUSH
9079: LD_INT 2
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 21
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PPUSH
9105: CALL_OW 69
9109: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
9110: LD_INT 10
9112: PPUSH
9113: LD_VAR 0 2
9117: PPUSH
9118: LD_INT 108
9120: PUSH
9121: LD_INT 70
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 77
9130: PUSH
9131: LD_INT 65
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 53
9140: PUSH
9141: LD_INT 63
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 40
9150: PUSH
9151: LD_INT 64
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 51
9160: PUSH
9161: LD_INT 97
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_INT 10
9177: PUSH
9178: LD_INT 5
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PPUSH
9185: CALL_OW 398
// enable ( 7 ) ;
9189: LD_INT 7
9191: ENABLE_MARKED
// wait ( 0 0$10 ) ;
9192: LD_INT 350
9194: PPUSH
9195: CALL_OW 67
// InGameOff ;
9199: CALL_OW 9
// konec_mise ;
9203: CALL 1489 0 0
// end ;
9207: LD_VAR 0 1
9211: RET
// export function schovej_kurina ; begin
9212: LD_INT 0
9214: PPUSH
// ComEnterUnit ( kur , RU1_dep ) ;
9215: LD_EXP 27
9219: PPUSH
9220: LD_INT 1
9222: PPUSH
9223: CALL_OW 120
// end ;
9227: LD_VAR 0 1
9231: RET
// export function posli_kurina_na_smrt ; begin
9232: LD_INT 0
9234: PPUSH
// ComExitBuilding ( kur ) ;
9235: LD_EXP 27
9239: PPUSH
9240: CALL_OW 122
// end ;
9244: LD_VAR 0 1
9248: RET
// every 0 0$2 do var pom ; var i ;
9249: GO 9251
9251: DISABLE
9252: LD_INT 0
9254: PPUSH
9255: PPUSH
// begin pom = FilterUnitsExceptArea ( Om_ven , [ [ f_side , You3 ] ] ) ;
9256: LD_ADDR_VAR 0 1
9260: PUSH
9261: LD_INT 20
9263: PPUSH
9264: LD_INT 22
9266: PUSH
9267: LD_EXP 3
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: EMPTY
9277: LIST
9278: PPUSH
9279: CALL_OW 71
9283: ST_TO_ADDR
// for i in pom do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: LD_VAR 0 1
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9358
// begin if GetType ( i ) = unit_vehicle then
9297: LD_VAR 0 2
9301: PPUSH
9302: CALL_OW 247
9306: PUSH
9307: LD_INT 2
9309: EQUAL
9310: IFFALSE 9342
// if IsDrivenBy ( i ) then
9312: LD_VAR 0 2
9316: PPUSH
9317: CALL_OW 311
9321: IFFALSE 9342
// SetSide ( IsDrivenBy ( i ) , You ) ;
9323: LD_VAR 0 2
9327: PPUSH
9328: CALL_OW 311
9332: PPUSH
9333: LD_EXP 1
9337: PPUSH
9338: CALL_OW 235
// SetSide ( i , You ) ;
9342: LD_VAR 0 2
9346: PPUSH
9347: LD_EXP 1
9351: PPUSH
9352: CALL_OW 235
// end ;
9356: GO 9294
9358: POP
9359: POP
// enable ;
9360: ENABLE
// end ;
9361: PPOPN 2
9363: END
// every 0 0$1 marked 9 do var i ; var ridici ; var mcm ;
9364: GO 9366
9366: DISABLE
9367: LD_INT 0
9369: PPUSH
9370: PPUSH
9371: PPUSH
// begin if FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) then
9372: LD_INT 56
9374: PPUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 70
9389: IFFALSE 9430
// for i in FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) do
9391: LD_ADDR_VAR 0 1
9395: PUSH
9396: LD_INT 56
9398: PPUSH
9399: LD_INT 22
9401: PUSH
9402: LD_INT 1
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PPUSH
9409: CALL_OW 70
9413: PUSH
9414: FOR_IN
9415: IFFALSE 9428
// RemoveUnit ( i ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: CALL_OW 64
9426: GO 9414
9428: POP
9429: POP
// ridici = [ ] ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: EMPTY
9436: ST_TO_ADDR
// for i in RUSI_CERPACI_AUTA_LIST do
9437: LD_ADDR_VAR 0 1
9441: PUSH
9442: LD_EXP 59
9446: PUSH
9447: FOR_IN
9448: IFFALSE 9488
// begin PlaceUnitArea ( i , cargoSpawn , false ) ;
9450: LD_VAR 0 1
9454: PPUSH
9455: LD_INT 55
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 49
// ridici = ridici ^ IsDrivenBy ( i ) ;
9465: LD_ADDR_VAR 0 2
9469: PUSH
9470: LD_VAR 0 2
9474: PUSH
9475: LD_VAR 0 1
9479: PPUSH
9480: CALL_OW 311
9484: ADD
9485: ST_TO_ADDR
// end ;
9486: GO 9447
9488: POP
9489: POP
// mcm = McMove ( 10 , RUSI_CERPACI_AUTA_LIST , [ [ 130 , 75 ] , [ 112 , 59 ] , [ 106 , 32 ] , [ 91 , 21 ] , [ 62 , 9 ] ] , [ mc_move_waitwp ] ) ;
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: LD_INT 10
9497: PPUSH
9498: LD_EXP 59
9502: PPUSH
9503: LD_INT 130
9505: PUSH
9506: LD_INT 75
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 112
9515: PUSH
9516: LD_INT 59
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 106
9525: PUSH
9526: LD_INT 32
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 91
9535: PUSH
9536: LD_INT 21
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 62
9545: PUSH
9546: LD_INT 9
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: PPUSH
9560: LD_INT 3
9562: PUSH
9563: EMPTY
9564: LIST
9565: PPUSH
9566: CALL_OW 398
9570: ST_TO_ADDR
// while UnitFilter ( RUSI_CERPACI_AUTA_LIST , [ [ f_inarea , benzina ] ] ) <> RUSI_CERPACI_AUTA_LIST do
9571: LD_EXP 59
9575: PPUSH
9576: LD_INT 95
9578: PUSH
9579: LD_INT 48
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: PPUSH
9589: CALL_OW 72
9593: PUSH
9594: LD_EXP 59
9598: NONEQUAL
9599: IFFALSE 9634
// begin KillMc ( mcm ) ;
9601: LD_VAR 0 3
9605: PPUSH
9606: CALL_OW 387
// wait ( 0 0$2 ) ;
9610: LD_INT 70
9612: PPUSH
9613: CALL_OW 67
// ComMoveXY ( RUSI_CERPACI_AUTA_LIST , 62 , 9 ) ;
9617: LD_EXP 59
9621: PPUSH
9622: LD_INT 62
9624: PPUSH
9625: LD_INT 9
9627: PPUSH
9628: CALL_OW 111
// end ;
9632: GO 9571
// hint_cerpaci_auta ;
9634: CALL 16721 0 0
// ComExitVehicle ( ridici ) ;
9638: LD_VAR 0 2
9642: PPUSH
9643: CALL_OW 121
// AddComAgressiveMove ( ridici , 45 , 6 ) ;
9647: LD_VAR 0 2
9651: PPUSH
9652: LD_INT 45
9654: PPUSH
9655: LD_INT 6
9657: PPUSH
9658: CALL_OW 174
// AddComAgressiveMove ( ridici , 15 , 10 ) ;
9662: LD_VAR 0 2
9666: PPUSH
9667: LD_INT 15
9669: PPUSH
9670: LD_INT 10
9672: PPUSH
9673: CALL_OW 174
// AddComAttackUnit ( ridici , Am_dep ) ;
9677: LD_VAR 0 2
9681: PPUSH
9682: LD_INT 12
9684: PPUSH
9685: CALL_OW 175
// end ;
9689: PPOPN 3
9691: END
// every 0 0$2 do var pom , i ; var ridic ;
9692: GO 9694
9694: DISABLE
9695: LD_INT 0
9697: PPUSH
9698: PPUSH
9699: PPUSH
// begin pom = FilterUnitsInArea ( Cauta , [ [ f_side , You2 ] , [ f_weapon , ru_cargo_bay ] ] ) ;
9700: LD_ADDR_VAR 0 1
9704: PUSH
9705: LD_INT 39
9707: PPUSH
9708: LD_INT 22
9710: PUSH
9711: LD_EXP 2
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 34
9722: PUSH
9723: LD_INT 51
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PPUSH
9734: CALL_OW 70
9738: ST_TO_ADDR
// if pom > 0 then
9739: LD_VAR 0 1
9743: PUSH
9744: LD_INT 0
9746: GREATER
9747: IFFALSE 9768
// begin if not qrefuel_over then
9749: LD_LOC 20
9753: NOT
9754: IFFALSE 9768
// begin qrefuel_over = true ;
9756: LD_ADDR_LOC 20
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
// query_refuel ;
9764: CALL 16639 0 0
// end ; end ; for i in pom do
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: LD_VAR 0 1
9777: PUSH
9778: FOR_IN
9779: IFFALSE 9833
// if IsDrivenBy ( i ) then
9781: LD_VAR 0 2
9785: PPUSH
9786: CALL_OW 311
9790: IFFALSE 9831
// begin ridic = IsDrivenBy ( i ) ;
9792: LD_ADDR_VAR 0 3
9796: PUSH
9797: LD_VAR 0 2
9801: PPUSH
9802: CALL_OW 311
9806: ST_TO_ADDR
// ComExitVehicle ( ridic ) ;
9807: LD_VAR 0 3
9811: PPUSH
9812: CALL_OW 121
// AddComAgressiveMove ( ridic , 21 , 14 ) ;
9816: LD_VAR 0 3
9820: PPUSH
9821: LD_INT 21
9823: PPUSH
9824: LD_INT 14
9826: PPUSH
9827: CALL_OW 174
// end ;
9831: GO 9778
9833: POP
9834: POP
// enable ;
9835: ENABLE
// end ;
9836: PPOPN 3
9838: END
// on VehicleConstructed ( v , fact ) do begin if GetSide ( fact ) = 3 then
9839: LD_VAR 0 2
9843: PPUSH
9844: CALL_OW 255
9848: PUSH
9849: LD_INT 3
9851: EQUAL
9852: IFFALSE 9868
// postavenych_aut = postavenych_aut + 1 ;
9854: LD_ADDR_EXP 47
9858: PUSH
9859: LD_EXP 47
9863: PUSH
9864: LD_INT 1
9866: PLUS
9867: ST_TO_ADDR
// if GetSide ( fact ) = 6 then
9868: LD_VAR 0 2
9872: PPUSH
9873: CALL_OW 255
9877: PUSH
9878: LD_INT 6
9880: EQUAL
9881: IFFALSE 9898
// ComMoveXY ( v , 125 , 70 ) ;
9883: LD_VAR 0 1
9887: PPUSH
9888: LD_INT 125
9890: PPUSH
9891: LD_INT 70
9893: PPUSH
9894: CALL_OW 111
// end ;
9898: PPOPN 2
9900: END
// every 0 0$1 marked 51 do
9901: GO 9903
9903: DISABLE
// begin if konec_counteru then
9904: LD_EXP 45
9908: IFFALSE 9919
// begin display_strings = [ ] ;
9910: LD_ADDR_OWVAR 47
9914: PUSH
9915: EMPTY
9916: ST_TO_ADDR
// exit ;
9917: GO 9970
// end ; display_strings = [ #Ru03-1 , TTime ] ;
9919: LD_ADDR_OWVAR 47
9923: PUSH
9924: LD_STRING #Ru03-1
9926: PUSH
9927: LD_LOC 21
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9936: LD_ADDR_LOC 21
9940: PUSH
9941: LD_LOC 21
9945: PUSH
9946: LD_INT 35
9948: MINUS
9949: ST_TO_ADDR
// if TTime > 0 then
9950: LD_LOC 21
9954: PUSH
9955: LD_INT 0
9957: GREATER
9958: IFFALSE 9963
// enable else
9960: ENABLE
9961: GO 9970
// display_strings = [ ] ;
9963: LD_ADDR_OWVAR 47
9967: PUSH
9968: EMPTY
9969: ST_TO_ADDR
// end ;
9970: END
// every 0 0$1 marked 52 do
9971: GO 9973
9973: DISABLE
// begin if konec_counteru then
9974: LD_EXP 45
9978: IFFALSE 9989
// begin display_strings = [ ] ;
9980: LD_ADDR_OWVAR 47
9984: PUSH
9985: EMPTY
9986: ST_TO_ADDR
// exit ;
9987: GO 10040
// end ; display_strings = [ #Ru03-2 , TTime ] ;
9989: LD_ADDR_OWVAR 47
9993: PUSH
9994: LD_STRING #Ru03-2
9996: PUSH
9997: LD_LOC 21
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
10006: LD_ADDR_LOC 21
10010: PUSH
10011: LD_LOC 21
10015: PUSH
10016: LD_INT 35
10018: MINUS
10019: ST_TO_ADDR
// if TTime > 0 then
10020: LD_LOC 21
10024: PUSH
10025: LD_INT 0
10027: GREATER
10028: IFFALSE 10033
// enable else
10030: ENABLE
10031: GO 10040
// display_strings = [ ] ;
10033: LD_ADDR_OWVAR 47
10037: PUSH
10038: EMPTY
10039: ST_TO_ADDR
// end ;
10040: END
// every 0 0$1 marked 53 do
10041: GO 10043
10043: DISABLE
// begin if konec_counteru then
10044: LD_EXP 45
10048: IFFALSE 10059
// begin display_strings = [ ] ;
10050: LD_ADDR_OWVAR 47
10054: PUSH
10055: EMPTY
10056: ST_TO_ADDR
// exit ;
10057: GO 10110
// end ; display_strings = [ #Ru03-3 , TTime ] ;
10059: LD_ADDR_OWVAR 47
10063: PUSH
10064: LD_STRING #Ru03-3
10066: PUSH
10067: LD_LOC 21
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
10076: LD_ADDR_LOC 21
10080: PUSH
10081: LD_LOC 21
10085: PUSH
10086: LD_INT 35
10088: MINUS
10089: ST_TO_ADDR
// if TTime > 0 then
10090: LD_LOC 21
10094: PUSH
10095: LD_INT 0
10097: GREATER
10098: IFFALSE 10103
// enable else
10100: ENABLE
10101: GO 10110
// display_strings = [ ] ;
10103: LD_ADDR_OWVAR 47
10107: PUSH
10108: EMPTY
10109: ST_TO_ADDR
// end ;
10110: END
// export function zastaveni_rusaku ; var pom ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
10115: LD_ADDR_VAR 0 2
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_EXP 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 2
10134: PUSH
10135: LD_INT 21
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 21
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PPUSH
10164: CALL_OW 69
10168: ST_TO_ADDR
// ComStand ( pom ) ;
10169: LD_VAR 0 2
10173: PPUSH
10174: CALL_OW 165
// end ; end_of_file
10178: LD_VAR 0 1
10182: RET
// export konstanta_utoceni ; var hint_bw ; every 0 0$0.1 do
10183: GO 10185
10185: DISABLE
// begin konstanta_utoceni = 0 ;
10186: LD_ADDR_EXP 49
10190: PUSH
10191: LD_INT 0
10193: ST_TO_ADDR
// hint_bw = false ;
10194: LD_ADDR_LOC 22
10198: PUSH
10199: LD_INT 0
10201: ST_TO_ADDR
// end ;
10202: END
// export function uvodni_pokec ; var vyber , eng ; begin
10203: LD_INT 0
10205: PPUSH
10206: PPUSH
10207: PPUSH
// wait ( 0 0$2 ) ;
10208: LD_INT 70
10210: PPUSH
10211: CALL_OW 67
// ComTurnUnit ( bur , kur ) ;
10215: LD_EXP 29
10219: PPUSH
10220: LD_EXP 27
10224: PPUSH
10225: CALL_OW 119
// ComTurnUnit ( kur , bur ) ;
10229: LD_EXP 27
10233: PPUSH
10234: LD_EXP 29
10238: PPUSH
10239: CALL_OW 119
// if BELKOV_SAVED then
10243: LD_EXP 24
10247: IFFALSE 10287
// begin Say ( kur , D1b-Kur-1 ) ;
10249: LD_EXP 27
10253: PPUSH
10254: LD_STRING D1b-Kur-1
10256: PPUSH
10257: CALL_OW 88
// Say ( bel , D1b-Bel-1 ) ;
10261: LD_EXP 32
10265: PPUSH
10266: LD_STRING D1b-Bel-1
10268: PPUSH
10269: CALL_OW 88
// Say ( kur , D1b-Kur-2 ) ;
10273: LD_EXP 27
10277: PPUSH
10278: LD_STRING D1b-Kur-2
10280: PPUSH
10281: CALL_OW 88
// end else
10285: GO 10371
// begin Say ( kur , D1a-Kur-1 ) ;
10287: LD_EXP 27
10291: PPUSH
10292: LD_STRING D1a-Kur-1
10294: PPUSH
10295: CALL_OW 88
// Say ( bur , D1a-Bur-1 ) ;
10299: LD_EXP 29
10303: PPUSH
10304: LD_STRING D1a-Bur-1
10306: PPUSH
10307: CALL_OW 88
// if STAV_UTOKU = 3 then
10311: LD_EXP 25
10315: PUSH
10316: LD_INT 3
10318: EQUAL
10319: IFFALSE 10335
// Say ( kur , D1a-Kur-2a ) else
10321: LD_EXP 27
10325: PPUSH
10326: LD_STRING D1a-Kur-2a
10328: PPUSH
10329: CALL_OW 88
10333: GO 10347
// Say ( kur , D1a-Kur-2 ) ;
10335: LD_EXP 27
10339: PPUSH
10340: LD_STRING D1a-Kur-2
10342: PPUSH
10343: CALL_OW 88
// Say ( kur , D1a-Kur-2b ) ;
10347: LD_EXP 27
10351: PPUSH
10352: LD_STRING D1a-Kur-2b
10354: PPUSH
10355: CALL_OW 88
// Say ( bur , D1a-Bur-2 ) ;
10359: LD_EXP 29
10363: PPUSH
10364: LD_STRING D1a-Bur-2
10366: PPUSH
10367: CALL_OW 88
// end ; Say ( kur , D2-Kur-1 ) ;
10371: LD_EXP 27
10375: PPUSH
10376: LD_STRING D2-Kur-1
10378: PPUSH
10379: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
10383: LD_EXP 29
10387: PPUSH
10388: LD_STRING D2-Bur-1
10390: PPUSH
10391: CALL_OW 88
// Say ( kur , D2-Kur-2 ) ;
10395: LD_EXP 27
10399: PPUSH
10400: LD_STRING D2-Kur-2
10402: PPUSH
10403: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
10407: LD_EXP 29
10411: PPUSH
10412: LD_STRING D2-Bur-2
10414: PPUSH
10415: CALL_OW 88
// Say ( kur , D2-Kur-3 ) ;
10419: LD_EXP 27
10423: PPUSH
10424: LD_STRING D2-Kur-3
10426: PPUSH
10427: CALL_OW 88
// Say ( pop , D2-Pop-3 ) ;
10431: LD_EXP 28
10435: PPUSH
10436: LD_STRING D2-Pop-3
10438: PPUSH
10439: CALL_OW 88
// Say ( kur , D2-Kur-4 ) ;
10443: LD_EXP 27
10447: PPUSH
10448: LD_STRING D2-Kur-4
10450: PPUSH
10451: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
10455: LD_EXP 29
10459: PPUSH
10460: LD_STRING D2-Bur-4
10462: PPUSH
10463: CALL_OW 88
// Say ( kur , D2-Kur-5 ) ;
10467: LD_EXP 27
10471: PPUSH
10472: LD_STRING D2-Kur-5
10474: PPUSH
10475: CALL_OW 88
// Say ( bur , D2-Bur-5 ) ;
10479: LD_EXP 29
10483: PPUSH
10484: LD_STRING D2-Bur-5
10486: PPUSH
10487: CALL_OW 88
// Say ( kur , D2-Kur-6 ) ;
10491: LD_EXP 27
10495: PPUSH
10496: LD_STRING D2-Kur-6
10498: PPUSH
10499: CALL_OW 88
// vyber = vyber_characteru ;
10503: LD_ADDR_VAR 0 2
10507: PUSH
10508: CALL 3282 0 0
10512: ST_TO_ADDR
// if bel in vyber then
10513: LD_EXP 32
10517: PUSH
10518: LD_VAR 0 2
10522: IN
10523: IFFALSE 10536
// RemoveUnit ( bel ) else
10525: LD_EXP 32
10529: PPUSH
10530: CALL_OW 64
10534: GO 10550
// Setside ( bel , You2 ) ;
10536: LD_EXP 32
10540: PPUSH
10541: LD_EXP 2
10545: PPUSH
10546: CALL_OW 235
// if IsOK ( kov ) then
10550: LD_EXP 30
10554: PPUSH
10555: CALL_OW 302
10559: IFFALSE 10570
// RemoveUnit ( kov ) ;
10561: LD_EXP 30
10565: PPUSH
10566: CALL_OW 64
// if IsOK ( gny ) then
10570: LD_EXP 31
10574: PPUSH
10575: CALL_OW 302
10579: IFFALSE 10590
// RemoveUnit ( gny ) ;
10581: LD_EXP 31
10585: PPUSH
10586: CALL_OW 64
// RemoveUnit ( bur ) ;
10590: LD_EXP 29
10594: PPUSH
10595: CALL_OW 64
// prebarveni_druhe_baze ;
10599: CALL 5802 0 0
// ChangeSideFog ( You3 , You ) ;
10603: LD_EXP 3
10607: PPUSH
10608: LD_EXP 1
10612: PPUSH
10613: CALL_OW 343
// placni_unity ( vyber ) ;
10617: LD_VAR 0 2
10621: PPUSH
10622: CALL 4039 0 1
// CenterOnUnits ( vyber ) ;
10626: LD_VAR 0 2
10630: PPUSH
10631: CALL_OW 85
// RevealFogArea ( You , Wth ) ;
10635: LD_EXP 1
10639: PPUSH
10640: LD_INT 24
10642: PPUSH
10643: CALL_OW 332
// wait ( 0 0$2 ) ;
10647: LD_INT 70
10649: PPUSH
10650: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10654: LD_STRING M1
10656: PPUSH
10657: CALL_OW 337
// hint_bw = true ;
10661: LD_ADDR_LOC 22
10665: PUSH
10666: LD_INT 1
10668: ST_TO_ADDR
// Hint ( Oil ) ;
10669: LD_STRING Oil
10671: PPUSH
10672: CALL_OW 339
// Hint ( Upgrading ) ;
10676: LD_STRING Upgrading
10678: PPUSH
10679: CALL_OW 339
// InGameOff ;
10683: CALL_OW 9
// wait ( 1 1$00 ) ;
10687: LD_INT 2100
10689: PPUSH
10690: CALL_OW 67
// eng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) ;
10694: LD_ADDR_VAR 0 3
10698: PUSH
10699: LD_INT 22
10701: PUSH
10702: LD_INT 6
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 25
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PPUSH
10723: CALL_OW 69
10727: ST_TO_ADDR
// if not eng then
10728: LD_VAR 0 3
10732: NOT
10733: IFFALSE 10737
// exit ;
10735: GO 10786
// ComExitBuilding ( eng ) ;
10737: LD_VAR 0 3
10741: PPUSH
10742: CALL_OW 122
// AddComBuild ( eng , b_oil_power , 140 , 69 , 0 ) ;
10746: LD_VAR 0 3
10750: PPUSH
10751: LD_INT 26
10753: PPUSH
10754: LD_INT 140
10756: PPUSH
10757: LD_INT 69
10759: PPUSH
10760: LD_INT 0
10762: PPUSH
10763: CALL_OW 205
// wait ( 2 2$30 ) ;
10767: LD_INT 5250
10769: PPUSH
10770: CALL_OW 67
// ComEnterUnit ( eng , RU1_dep ) ;
10774: LD_VAR 0 3
10778: PPUSH
10779: LD_INT 1
10781: PPUSH
10782: CALL_OW 120
// end ;
10786: LD_VAR 0 1
10790: RET
// every 0 0$1 trigger GetResourceVisibility ( 57 , 89 , You ) > 0 do
10791: LD_INT 57
10793: PPUSH
10794: LD_INT 89
10796: PPUSH
10797: LD_EXP 1
10801: PPUSH
10802: CALL_OW 440
10806: PUSH
10807: LD_INT 0
10809: GREATER
10810: IFFALSE 10914
10812: GO 10814
10814: DISABLE
// begin CenterOnXY ( 57 , 89 ) ;
10815: LD_INT 57
10817: PPUSH
10818: LD_INT 89
10820: PPUSH
10821: CALL_OW 84
// DialogueOn ;
10825: CALL_OW 6
// interface_hidden := true ;
10829: LD_ADDR_OWVAR 54
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// Say ( bur , D2a-Bur-1 ) ;
10837: LD_EXP 29
10841: PPUSH
10842: LD_STRING D2a-Bur-1
10844: PPUSH
10845: CALL_OW 88
// SayRadio ( kur , D2a-Kur-1 ) ;
10849: LD_EXP 27
10853: PPUSH
10854: LD_STRING D2a-Kur-1
10856: PPUSH
10857: CALL_OW 94
// RU_videl_oil = true ;
10861: LD_ADDR_EXP 40
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// interface_hidden := false ;
10869: LD_ADDR_OWVAR 54
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// Hint ( OilSpoted ) ;
10877: LD_STRING OilSpoted
10879: PPUSH
10880: CALL_OW 339
// DialogueOff ;
10884: CALL_OW 7
// wait ( 0 0$45 ) ;
10888: LD_INT 1575
10890: PPUSH
10891: CALL_OW 67
// ComConstruct ( Ru1_fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
10895: LD_INT 5
10897: PPUSH
10898: LD_INT 21
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: LD_INT 42
10909: PPUSH
10910: CALL_OW 125
// end ;
10914: END
// every 0 0$3 trigger RU_videl_oil and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ;
10915: LD_EXP 40
10919: PUSH
10920: LD_INT 22
10922: PUSH
10923: LD_EXP 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 30
10934: PUSH
10935: LD_INT 0
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PPUSH
10946: CALL_OW 69
10950: PUSH
10951: LD_INT 1
10953: GREATER
10954: AND
10955: IFFALSE 11119
10957: GO 10959
10959: DISABLE
10960: LD_INT 0
10962: PPUSH
10963: PPUSH
10964: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
10965: LD_ADDR_VAR 0 1
10969: PUSH
10970: LD_INT 22
10972: PUSH
10973: LD_EXP 1
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 30
10984: PUSH
10985: LD_INT 0
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 69
11000: ST_TO_ADDR
// pom1 = [ ] ;
11001: LD_ADDR_VAR 0 2
11005: PUSH
11006: EMPTY
11007: ST_TO_ADDR
// for i in pom do
11008: LD_ADDR_VAR 0 3
11012: PUSH
11013: LD_VAR 0 1
11017: PUSH
11018: FOR_IN
11019: IFFALSE 11060
// if GetDistUnitXY ( i , 56 , 88 ) < 30 then
11021: LD_VAR 0 3
11025: PPUSH
11026: LD_INT 56
11028: PPUSH
11029: LD_INT 88
11031: PPUSH
11032: CALL_OW 297
11036: PUSH
11037: LD_INT 30
11039: LESS
11040: IFFALSE 11058
// pom1 = pom1 ^ i ;
11042: LD_ADDR_VAR 0 2
11046: PUSH
11047: LD_VAR 0 2
11051: PUSH
11052: LD_VAR 0 3
11056: ADD
11057: ST_TO_ADDR
11058: GO 11018
11060: POP
11061: POP
// if pom1 > 0 then
11062: LD_VAR 0 2
11066: PUSH
11067: LD_INT 0
11069: GREATER
11070: IFFALSE 11118
// begin while IsConstructed ( pom1 [ 1 ] ) do
11072: LD_VAR 0 2
11076: PUSH
11077: LD_INT 1
11079: ARRAY
11080: PPUSH
11081: CALL_OW 304
11085: IFFALSE 11096
// wait ( 0 0$5 ) ;
11087: LD_INT 175
11089: PPUSH
11090: CALL_OW 67
11094: GO 11072
// ChangeMissionObjectives ( M2 ) ;
11096: LD_STRING M2
11098: PPUSH
11099: CALL_OW 337
// pojmenovani_kaganoviche ( pom1 [ 1 ] ) ;
11103: LD_VAR 0 2
11107: PUSH
11108: LD_INT 1
11110: ARRAY
11111: PPUSH
11112: CALL 4846 0 1
// end else
11116: GO 11119
// enable ;
11118: ENABLE
// end ;
11119: PPOPN 3
11121: END
// every 0 0$2 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) > 0 do var pom ;
11122: LD_INT 2
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_EXP 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 70
11155: PUSH
11156: LD_INT 0
11158: GREATER
11159: IFFALSE 11451
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) ;
11167: LD_ADDR_VAR 0 1
11171: PUSH
11172: LD_INT 2
11174: PPUSH
11175: LD_INT 22
11177: PUSH
11178: LD_EXP 1
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 30
11189: PUSH
11190: LD_INT 3
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PPUSH
11201: CALL_OW 70
11205: ST_TO_ADDR
// pom = pom [ 1 ] ;
11206: LD_ADDR_VAR 0 1
11210: PUSH
11211: LD_VAR 0 1
11215: PUSH
11216: LD_INT 1
11218: ARRAY
11219: ST_TO_ADDR
// while IsConstructed ( pom ) <> 0 do
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 304
11229: PUSH
11230: LD_INT 0
11232: NONEQUAL
11233: IFFALSE 11244
// wait ( 0 0$2 ) ;
11235: LD_INT 70
11237: PPUSH
11238: CALL_OW 67
11242: GO 11220
// CenterNowOnUnits ( pom ) ;
11244: LD_VAR 0 1
11248: PPUSH
11249: CALL_OW 87
// interface_hidden := true ;
11253: LD_ADDR_OWVAR 54
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) ;
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: LD_INT 2
11268: PPUSH
11269: LD_INT 22
11271: PUSH
11272: LD_EXP 1
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 30
11283: PUSH
11284: LD_INT 26
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 70
11299: ST_TO_ADDR
// if pom = 0 then
11300: LD_VAR 0 1
11304: PUSH
11305: LD_INT 0
11307: EQUAL
11308: IFFALSE 11425
// begin DialogueOn ;
11310: CALL_OW 6
// Say ( bur , D3aa-Bur-1 ) ;
11314: LD_EXP 29
11318: PPUSH
11319: LD_STRING D3aa-Bur-1
11321: PPUSH
11322: CALL_OW 88
// if IsOK ( schol ) then
11326: LD_EXP 33
11330: PPUSH
11331: CALL_OW 302
11335: IFFALSE 11363
// begin Say ( schol , D3aa-Sch-1 ) ;
11337: LD_EXP 33
11341: PPUSH
11342: LD_STRING D3aa-Sch-1
11344: PPUSH
11345: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11349: LD_EXP 29
11353: PPUSH
11354: LD_STRING D3aa-Bur-2
11356: PPUSH
11357: CALL_OW 88
// end else
11361: GO 11425
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
11363: LD_ADDR_VAR 0 1
11367: PUSH
11368: LD_INT 1
11370: PPUSH
11371: LD_INT 4
11373: PPUSH
11374: LD_EXP 29
11378: PUSH
11379: EMPTY
11380: LIST
11381: PPUSH
11382: CALL 11996 0 3
11386: ST_TO_ADDR
// if pom > 0 then
11387: LD_VAR 0 1
11391: PUSH
11392: LD_INT 0
11394: GREATER
11395: IFFALSE 11425
// begin Say ( pom [ 1 ] , D3aa-Sci1-1 ) ;
11397: LD_VAR 0 1
11401: PUSH
11402: LD_INT 1
11404: ARRAY
11405: PPUSH
11406: LD_STRING D3aa-Sci1-1
11408: PPUSH
11409: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11413: LD_EXP 29
11417: PPUSH
11418: LD_STRING D3aa-Bur-2
11420: PPUSH
11421: CALL_OW 88
// end ; end ; end ; ChangeMissionObjectives ( M3 ) ;
11425: LD_STRING M3
11427: PPUSH
11428: CALL_OW 337
// Hint ( Factory ) ;
11432: LD_STRING Factory
11434: PPUSH
11435: CALL_OW 339
// interface_hidden := false ;
11439: LD_ADDR_OWVAR 54
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// DialogueOff ;
11447: CALL_OW 7
// end ;
11451: PPOPN 1
11453: END
// every 0 0$5 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) > 0 do var pom ;
11454: LD_INT 2
11456: PPUSH
11457: LD_INT 22
11459: PUSH
11460: LD_EXP 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 30
11471: PUSH
11472: LD_INT 4
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 70
11487: PUSH
11488: LD_INT 0
11490: GREATER
11491: IFFALSE 11573
11493: GO 11495
11495: DISABLE
11496: LD_INT 0
11498: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) ;
11499: LD_ADDR_VAR 0 1
11503: PUSH
11504: LD_INT 2
11506: PPUSH
11507: LD_INT 22
11509: PUSH
11510: LD_EXP 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 30
11521: PUSH
11522: LD_INT 4
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 70
11537: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
11538: LD_VAR 0 1
11542: PUSH
11543: LD_INT 1
11545: ARRAY
11546: PPUSH
11547: CALL_OW 304
11551: PUSH
11552: LD_INT 0
11554: NONEQUAL
11555: IFFALSE 11566
// wait ( 0 0$5 ) ;
11557: LD_INT 175
11559: PPUSH
11560: CALL_OW 67
11564: GO 11538
// Hint ( Armoury ) ;
11566: LD_STRING Armoury
11568: PPUSH
11569: CALL_OW 339
// end ;
11573: PPOPN 1
11575: END
// every 0 0$3 trigger hint_bw do var pom ;
11576: LD_LOC 22
11580: IFFALSE 11634
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_breastwork ] ] ) ;
11588: LD_ADDR_VAR 0 1
11592: PUSH
11593: LD_INT 2
11595: PPUSH
11596: LD_INT 22
11598: PUSH
11599: LD_EXP 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 30
11610: PUSH
11611: LD_INT 31
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 70
11626: ST_TO_ADDR
// Hint ( bunkers ) ;
11627: LD_STRING bunkers
11629: PPUSH
11630: CALL_OW 339
// end ;
11634: PPOPN 1
11636: END
// export function dialog_scholtze_enter ; begin
11637: LD_INT 0
11639: PPUSH
// CenterOnUnits ( schol2 ) ;
11640: LD_EXP 34
11644: PPUSH
11645: CALL_OW 85
// DialogueOn ;
11649: CALL_OW 6
// interface_hidden := true ;
11653: LD_ADDR_OWVAR 54
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// SayRadio ( schol2 , D4-Sch-1 ) ;
11661: LD_EXP 34
11665: PPUSH
11666: LD_STRING D4-Sch-1
11668: PPUSH
11669: CALL_OW 94
// Say ( bur , D4-Bur-1 ) ;
11673: LD_EXP 29
11677: PPUSH
11678: LD_STRING D4-Bur-1
11680: PPUSH
11681: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
11685: LD_STRING M4
11687: PPUSH
11688: CALL_OW 337
// interface_hidden := false ;
11692: LD_ADDR_OWVAR 54
11696: PUSH
11697: LD_INT 0
11699: ST_TO_ADDR
// DialogueOff ;
11700: CALL_OW 7
// end ;
11704: LD_VAR 0 1
11708: RET
// export function dialog_scholtze_nalezen ; begin
11709: LD_INT 0
11711: PPUSH
// CenterOnUnits ( schol2 ) ;
11712: LD_EXP 34
11716: PPUSH
11717: CALL_OW 85
// DialogueOn ;
11721: CALL_OW 6
// interface_hidden := true ;
11725: LD_ADDR_OWVAR 54
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
// if IsOK ( schol2 ) then
11733: LD_EXP 34
11737: PPUSH
11738: CALL_OW 302
11742: IFFALSE 11787
// begin Say ( schol2 , D4a-Sch-1 ) ;
11744: LD_EXP 34
11748: PPUSH
11749: LD_STRING D4a-Sch-1
11751: PPUSH
11752: CALL_OW 88
// Say ( bur , D4a-Bur-1 ) ;
11756: LD_EXP 29
11760: PPUSH
11761: LD_STRING D4a-Bur-1
11763: PPUSH
11764: CALL_OW 88
// Say ( schol2 , D4a-Sch-2 ) ;
11768: LD_EXP 34
11772: PPUSH
11773: LD_STRING D4a-Sch-2
11775: PPUSH
11776: CALL_OW 88
// ChangeMissionObjectives ( MScholtzeOut ) ;
11780: LD_STRING MScholtzeOut
11782: PPUSH
11783: CALL_OW 337
// end ; interface_hidden := false ;
11787: LD_ADDR_OWVAR 54
11791: PUSH
11792: LD_INT 0
11794: ST_TO_ADDR
// DialogueOff ;
11795: CALL_OW 7
// end ;
11799: LD_VAR 0 1
11803: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) = 1 marked 201 do var pom ;
11804: CALL 27402 0 0
11808: PUSH
11809: LD_INT 22
11811: PUSH
11812: LD_EXP 1
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 30
11823: PUSH
11824: LD_INT 0
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PPUSH
11835: CALL_OW 69
11839: PUSH
11840: LD_INT 1
11842: EQUAL
11843: AND
11844: IFFALSE 11993
11846: GO 11848
11848: DISABLE
11849: LD_INT 0
11851: PPUSH
// begin DialogueOn ;
11852: CALL_OW 6
// interface_hidden := true ;
11856: LD_ADDR_OWVAR 54
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
11864: LD_EXP 72
11868: PPUSH
11869: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
11873: LD_ADDR_VAR 0 1
11877: PUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 1
11883: PPUSH
11884: LD_EXP 29
11888: PUSH
11889: LD_EXP 31
11893: PUSH
11894: LD_EXP 30
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL 11996 0 3
11908: ST_TO_ADDR
// if pom = 0 then
11909: LD_VAR 0 1
11913: PUSH
11914: LD_INT 0
11916: EQUAL
11917: IFFALSE 11943
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
11919: LD_ADDR_VAR 0 1
11923: PUSH
11924: LD_INT 1
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: LD_EXP 29
11934: PUSH
11935: EMPTY
11936: LIST
11937: PPUSH
11938: CALL 11996 0 3
11942: ST_TO_ADDR
// if pom > 0 then
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 0
11950: GREATER
11951: IFFALSE 11981
// begin Say ( pom [ 1 ] , D3a-RSol1-1 ) ;
11953: LD_VAR 0 1
11957: PUSH
11958: LD_INT 1
11960: ARRAY
11961: PPUSH
11962: LD_STRING D3a-RSol1-1
11964: PPUSH
11965: CALL_OW 88
// Say ( bur , D3a-Bur-1 ) ;
11969: LD_EXP 29
11973: PPUSH
11974: LD_STRING D3a-Bur-1
11976: PPUSH
11977: CALL_OW 88
// end ; interface_hidden := false ;
11981: LD_ADDR_OWVAR 54
11985: PUSH
11986: LD_INT 0
11988: ST_TO_ADDR
// DialogueOff ;
11989: CALL_OW 7
// end ;
11993: PPOPN 1
11995: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11996: LD_INT 0
11998: PPUSH
11999: PPUSH
12000: PPUSH
12001: PPUSH
12002: PPUSH
12003: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12004: LD_ADDR_VAR 0 6
12008: PUSH
12009: LD_INT 22
12011: PUSH
12012: LD_EXP 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 25
12023: PUSH
12024: LD_INT 4
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 26
12033: PUSH
12034: LD_VAR 0 1
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PPUSH
12048: CALL_OW 69
12052: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12053: LD_ADDR_VAR 0 7
12057: PUSH
12058: LD_INT 22
12060: PUSH
12061: LD_EXP 1
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 25
12072: PUSH
12073: LD_INT 3
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 26
12082: PUSH
12083: LD_VAR 0 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12102: LD_ADDR_VAR 0 8
12106: PUSH
12107: LD_INT 22
12109: PUSH
12110: LD_EXP 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 25
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 26
12131: PUSH
12132: LD_VAR 0 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 69
12150: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12151: LD_ADDR_VAR 0 9
12155: PUSH
12156: LD_INT 22
12158: PUSH
12159: LD_EXP 1
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 25
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 26
12180: PUSH
12181: LD_VAR 0 1
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: PPUSH
12195: CALL_OW 69
12199: ST_TO_ADDR
// case povolani of class_scientistic :
12200: LD_VAR 0 2
12204: PUSH
12205: LD_INT 4
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 12226
12213: POP
// pom = pom1 ; class_mechanic :
12214: LD_ADDR_VAR 0 5
12218: PUSH
12219: LD_VAR 0 6
12223: ST_TO_ADDR
12224: GO 12290
12226: LD_INT 3
12228: DOUBLE
12229: EQUAL
12230: IFTRUE 12234
12232: GO 12247
12234: POP
// pom = pom2 ; class_engineer :
12235: LD_ADDR_VAR 0 5
12239: PUSH
12240: LD_VAR 0 7
12244: ST_TO_ADDR
12245: GO 12290
12247: LD_INT 2
12249: DOUBLE
12250: EQUAL
12251: IFTRUE 12255
12253: GO 12268
12255: POP
// pom = pom3 ; class_soldier :
12256: LD_ADDR_VAR 0 5
12260: PUSH
12261: LD_VAR 0 8
12265: ST_TO_ADDR
12266: GO 12290
12268: LD_INT 1
12270: DOUBLE
12271: EQUAL
12272: IFTRUE 12276
12274: GO 12289
12276: POP
// pom = pom4 ; end ;
12277: LD_ADDR_VAR 0 5
12281: PUSH
12282: LD_VAR 0 9
12286: ST_TO_ADDR
12287: GO 12290
12289: POP
// if povolani <> class_scientistic then
12290: LD_VAR 0 2
12294: PUSH
12295: LD_INT 4
12297: NONEQUAL
12298: IFFALSE 12316
// pom = pom ^ pom1 ;
12300: LD_ADDR_VAR 0 5
12304: PUSH
12305: LD_VAR 0 5
12309: PUSH
12310: LD_VAR 0 6
12314: ADD
12315: ST_TO_ADDR
// if povolani <> class_mechanic then
12316: LD_VAR 0 2
12320: PUSH
12321: LD_INT 3
12323: NONEQUAL
12324: IFFALSE 12342
// pom = pom ^ pom2 ;
12326: LD_ADDR_VAR 0 5
12330: PUSH
12331: LD_VAR 0 5
12335: PUSH
12336: LD_VAR 0 7
12340: ADD
12341: ST_TO_ADDR
// if povolani <> class_engineer then
12342: LD_VAR 0 2
12346: PUSH
12347: LD_INT 2
12349: NONEQUAL
12350: IFFALSE 12368
// pom = pom ^ pom3 ;
12352: LD_ADDR_VAR 0 5
12356: PUSH
12357: LD_VAR 0 5
12361: PUSH
12362: LD_VAR 0 8
12366: ADD
12367: ST_TO_ADDR
// if povolani <> class_soldier then
12368: LD_VAR 0 2
12372: PUSH
12373: LD_INT 1
12375: NONEQUAL
12376: IFFALSE 12394
// pom = pom ^ pom4 ;
12378: LD_ADDR_VAR 0 5
12382: PUSH
12383: LD_VAR 0 5
12387: PUSH
12388: LD_VAR 0 9
12392: ADD
12393: ST_TO_ADDR
// result := pom diff diffseznam ;
12394: LD_ADDR_VAR 0 4
12398: PUSH
12399: LD_VAR 0 5
12403: PUSH
12404: LD_VAR 0 3
12408: DIFF
12409: ST_TO_ADDR
// end ;
12410: LD_VAR 0 4
12414: RET
// function GetPeopleSide ( side , sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
12422: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12423: LD_ADDR_VAR 0 7
12427: PUSH
12428: LD_INT 22
12430: PUSH
12431: LD_VAR 0 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 4
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 26
12452: PUSH
12453: LD_VAR 0 2
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: LIST
12466: PPUSH
12467: CALL_OW 69
12471: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12472: LD_ADDR_VAR 0 8
12476: PUSH
12477: LD_INT 22
12479: PUSH
12480: LD_VAR 0 1
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 25
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: LD_INT 26
12501: PUSH
12502: LD_VAR 0 2
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12521: LD_ADDR_VAR 0 9
12525: PUSH
12526: LD_INT 22
12528: PUSH
12529: LD_VAR 0 1
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 25
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 26
12550: PUSH
12551: LD_VAR 0 2
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12570: LD_ADDR_VAR 0 10
12574: PUSH
12575: LD_INT 22
12577: PUSH
12578: LD_VAR 0 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 26
12599: PUSH
12600: LD_VAR 0 2
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: PPUSH
12614: CALL_OW 69
12618: ST_TO_ADDR
// case povolani of class_scientistic :
12619: LD_VAR 0 3
12623: PUSH
12624: LD_INT 4
12626: DOUBLE
12627: EQUAL
12628: IFTRUE 12632
12630: GO 12645
12632: POP
// pom = pom1 ; class_mechanic :
12633: LD_ADDR_VAR 0 6
12637: PUSH
12638: LD_VAR 0 7
12642: ST_TO_ADDR
12643: GO 12709
12645: LD_INT 3
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 12666
12653: POP
// pom = pom2 ; class_engineer :
12654: LD_ADDR_VAR 0 6
12658: PUSH
12659: LD_VAR 0 8
12663: ST_TO_ADDR
12664: GO 12709
12666: LD_INT 2
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12687
12674: POP
// pom = pom3 ; class_soldier :
12675: LD_ADDR_VAR 0 6
12679: PUSH
12680: LD_VAR 0 9
12684: ST_TO_ADDR
12685: GO 12709
12687: LD_INT 1
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12708
12695: POP
// pom = pom4 ; end ;
12696: LD_ADDR_VAR 0 6
12700: PUSH
12701: LD_VAR 0 10
12705: ST_TO_ADDR
12706: GO 12709
12708: POP
// if povolani <> class_scientistic then
12709: LD_VAR 0 3
12713: PUSH
12714: LD_INT 4
12716: NONEQUAL
12717: IFFALSE 12735
// pom = pom ^ pom1 ;
12719: LD_ADDR_VAR 0 6
12723: PUSH
12724: LD_VAR 0 6
12728: PUSH
12729: LD_VAR 0 7
12733: ADD
12734: ST_TO_ADDR
// if povolani <> class_mechanic then
12735: LD_VAR 0 3
12739: PUSH
12740: LD_INT 3
12742: NONEQUAL
12743: IFFALSE 12761
// pom = pom ^ pom2 ;
12745: LD_ADDR_VAR 0 6
12749: PUSH
12750: LD_VAR 0 6
12754: PUSH
12755: LD_VAR 0 8
12759: ADD
12760: ST_TO_ADDR
// if povolani <> class_engineer then
12761: LD_VAR 0 3
12765: PUSH
12766: LD_INT 2
12768: NONEQUAL
12769: IFFALSE 12787
// pom = pom ^ pom3 ;
12771: LD_ADDR_VAR 0 6
12775: PUSH
12776: LD_VAR 0 6
12780: PUSH
12781: LD_VAR 0 9
12785: ADD
12786: ST_TO_ADDR
// if povolani <> class_soldier then
12787: LD_VAR 0 3
12791: PUSH
12792: LD_INT 1
12794: NONEQUAL
12795: IFFALSE 12813
// pom = pom ^ pom4 ;
12797: LD_ADDR_VAR 0 6
12801: PUSH
12802: LD_VAR 0 6
12806: PUSH
12807: LD_VAR 0 10
12811: ADD
12812: ST_TO_ADDR
// result := pom diff diffseznam ;
12813: LD_ADDR_VAR 0 5
12817: PUSH
12818: LD_VAR 0 6
12822: PUSH
12823: LD_VAR 0 4
12827: DIFF
12828: ST_TO_ADDR
// end ;
12829: LD_VAR 0 5
12833: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom ;
12834: CALL 27402 0 0
12838: PUSH
12839: LD_INT 22
12841: PUSH
12842: LD_EXP 1
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 30
12853: PUSH
12854: LD_INT 0
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: PUSH
12870: LD_INT 1
12872: GREATER
12873: AND
12874: IFFALSE 13092
12876: GO 12878
12878: DISABLE
12879: LD_INT 0
12881: PPUSH
// begin disable ( 201 ) ;
12882: LD_INT 201
12884: DISABLE_MARKED
// DialogueOn ;
12885: CALL_OW 6
// interface_hidden := true ;
12889: LD_ADDR_OWVAR 54
12893: PUSH
12894: LD_INT 1
12896: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
12897: LD_EXP 72
12901: PPUSH
12902: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
12906: LD_ADDR_VAR 0 1
12910: PUSH
12911: LD_INT 1
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: LD_EXP 29
12921: PUSH
12922: LD_EXP 31
12926: PUSH
12927: LD_EXP 30
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: LIST
12936: PPUSH
12937: CALL 11996 0 3
12941: ST_TO_ADDR
// if pom = 0 then
12942: LD_VAR 0 1
12946: PUSH
12947: LD_INT 0
12949: EQUAL
12950: IFFALSE 12976
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
12952: LD_ADDR_VAR 0 1
12956: PUSH
12957: LD_INT 1
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: LD_EXP 29
12967: PUSH
12968: EMPTY
12969: LIST
12970: PPUSH
12971: CALL 11996 0 3
12975: ST_TO_ADDR
// if pom > 0 then
12976: LD_VAR 0 1
12980: PUSH
12981: LD_INT 0
12983: GREATER
12984: IFFALSE 13080
// begin Say ( pom [ 1 ] , D3b-RSol1-1 ) ;
12986: LD_VAR 0 1
12990: PUSH
12991: LD_INT 1
12993: ARRAY
12994: PPUSH
12995: LD_STRING D3b-RSol1-1
12997: PPUSH
12998: CALL_OW 88
// if IsOK ( gny ) then
13002: LD_EXP 31
13006: PPUSH
13007: CALL_OW 302
13011: IFFALSE 13039
// begin Say ( gny , D3b-Gny-1 ) ;
13013: LD_EXP 31
13017: PPUSH
13018: LD_STRING D3b-Gny-1
13020: PPUSH
13021: CALL_OW 88
// Say ( bur , D3b-Bur-1 ) ;
13025: LD_EXP 29
13029: PPUSH
13030: LD_STRING D3b-Bur-1
13032: PPUSH
13033: CALL_OW 88
// end else
13037: GO 13080
// if ISOK ( kov ) then
13039: LD_EXP 30
13043: PPUSH
13044: CALL_OW 302
13048: IFFALSE 13064
// Say ( kov , D3b-Kov-1 ) else
13050: LD_EXP 30
13054: PPUSH
13055: LD_STRING D3b-Kov-1
13057: PPUSH
13058: CALL_OW 88
13062: GO 13080
// Say ( pom [ 1 ] , D3b-RSol1-2 ) ;
13064: LD_VAR 0 1
13068: PUSH
13069: LD_INT 1
13071: ARRAY
13072: PPUSH
13073: LD_STRING D3b-RSol1-2
13075: PPUSH
13076: CALL_OW 88
// end ; interface_hidden := false ;
13080: LD_ADDR_OWVAR 54
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// DialogueOff ;
13088: CALL_OW 7
// end ;
13092: PPOPN 1
13094: END
// export function dialog_otazka_poctu_aut ; var pom ; begin
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
// DialogueOn ;
13099: CALL_OW 6
// interface_hidden := true ;
13103: LD_ADDR_OWVAR 54
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// Say ( kur , D5-Kur-1 ) ;
13111: LD_EXP 27
13115: PPUSH
13116: LD_STRING D5-Kur-1
13118: PPUSH
13119: CALL_OW 88
// pom = Query ( QVehicles ) ;
13123: LD_ADDR_VAR 0 2
13127: PUSH
13128: LD_STRING QVehicles
13130: PPUSH
13131: CALL_OW 97
13135: ST_TO_ADDR
// case pom of 1 :
13136: LD_VAR 0 2
13140: PUSH
13141: LD_INT 1
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13176
13149: POP
// begin Say ( bur , D6a-Bur-1 ) ;
13150: LD_EXP 29
13154: PPUSH
13155: LD_STRING D6a-Bur-1
13157: PPUSH
13158: CALL_OW 88
// Say ( kur , D6a-Kur-1 ) ;
13162: LD_EXP 27
13166: PPUSH
13167: LD_STRING D6a-Kur-1
13169: PPUSH
13170: CALL_OW 88
// end ; 2 :
13174: GO 13279
13176: LD_INT 2
13178: DOUBLE
13179: EQUAL
13180: IFTRUE 13184
13182: GO 13223
13184: POP
// begin Say ( bur , D6b-Bur-1 ) ;
13185: LD_EXP 29
13189: PPUSH
13190: LD_STRING D6b-Bur-1
13192: PPUSH
13193: CALL_OW 88
// Say ( kur , D6b-Kur-1 ) ;
13197: LD_EXP 27
13201: PPUSH
13202: LD_STRING D6b-Kur-1
13204: PPUSH
13205: CALL_OW 88
// Say ( bur , D6b-Bur-2 ) ;
13209: LD_EXP 29
13213: PPUSH
13214: LD_STRING D6b-Bur-2
13216: PPUSH
13217: CALL_OW 88
// end ; 3 :
13221: GO 13279
13223: LD_INT 3
13225: DOUBLE
13226: EQUAL
13227: IFTRUE 13231
13229: GO 13278
13231: POP
// begin Say ( bur , D6c-Bur-1 ) ;
13232: LD_EXP 29
13236: PPUSH
13237: LD_STRING D6c-Bur-1
13239: PPUSH
13240: CALL_OW 88
// Say ( kur , D6c-Kur-1 ) ;
13244: LD_EXP 27
13248: PPUSH
13249: LD_STRING D6c-Kur-1
13251: PPUSH
13252: CALL_OW 88
// Say ( bur , D6c-Bur-2 ) ;
13256: LD_EXP 29
13260: PPUSH
13261: LD_STRING D6c-Bur-2
13263: PPUSH
13264: CALL_OW 88
// KurinAddTime = 1 ;
13268: LD_ADDR_EXP 7
13272: PUSH
13273: LD_INT 1
13275: ST_TO_ADDR
// end ; end ;
13276: GO 13279
13278: POP
// interface_hidden := false ;
13279: LD_ADDR_OWVAR 54
13283: PUSH
13284: LD_INT 0
13286: ST_TO_ADDR
// DialogueOff ;
13287: CALL_OW 7
// result := pom ;
13291: LD_ADDR_VAR 0 1
13295: PUSH
13296: LD_VAR 0 2
13300: ST_TO_ADDR
// end ;
13301: LD_VAR 0 1
13305: RET
// export function hlaska_omicron ; begin
13306: LD_INT 0
13308: PPUSH
// DialogueOn ;
13309: CALL_OW 6
// interface_hidden := true ;
13313: LD_ADDR_OWVAR 54
13317: PUSH
13318: LD_INT 1
13320: ST_TO_ADDR
// Say ( kur , D6c-Kur-2 ) ;
13321: LD_EXP 27
13325: PPUSH
13326: LD_STRING D6c-Kur-2
13328: PPUSH
13329: CALL_OW 88
// interface_hidden := false ;
13333: LD_ADDR_OWVAR 54
13337: PUSH
13338: LD_INT 0
13340: ST_TO_ADDR
// DialogueOff ;
13341: CALL_OW 7
// end ;
13345: LD_VAR 0 1
13349: RET
// every 0 0$1 trigger stav_omikron = 3 do
13350: LD_EXP 39
13354: PUSH
13355: LD_INT 3
13357: EQUAL
13358: IFFALSE 13388
13360: GO 13362
13362: DISABLE
// begin CheckVehicles ;
13363: CALL 6295 0 0
// ChangeMissionObjectives ( M5 ) ;
13367: LD_STRING M5
13369: PPUSH
13370: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 1 ) ;
13374: LD_INT 32
13376: PPUSH
13377: LD_INT 1
13379: PPUSH
13380: CALL_OW 424
// CheckVehicles ;
13384: CALL 6295 0 0
// end ;
13388: END
// export function dialog_pred_omicronem ; var pom ; begin
13389: LD_INT 0
13391: PPUSH
13392: PPUSH
// DialogueOn ;
13393: CALL_OW 6
// interface_hidden := true ;
13397: LD_ADDR_OWVAR 54
13401: PUSH
13402: LD_INT 1
13404: ST_TO_ADDR
// Say ( bur , D7-Bur-1 ) ;
13405: LD_EXP 29
13409: PPUSH
13410: LD_STRING D7-Bur-1
13412: PPUSH
13413: CALL_OW 88
// SayRadio ( kur , D7-Kur-1 ) ;
13417: LD_EXP 27
13421: PPUSH
13422: LD_STRING D7-Kur-1
13424: PPUSH
13425: CALL_OW 94
// setkani_om := true ;
13429: LD_ADDR_EXP 41
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// ChangeMissionObjectives ( M5a ) ;
13437: LD_STRING M5a
13439: PPUSH
13440: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 0 ) ;
13444: LD_INT 32
13446: PPUSH
13447: LD_INT 0
13449: PPUSH
13450: CALL_OW 424
// interface_hidden := false ;
13454: LD_ADDR_OWVAR 54
13458: PUSH
13459: LD_INT 0
13461: ST_TO_ADDR
// DialogueOff ;
13462: CALL_OW 7
// end ;
13466: LD_VAR 0 1
13470: RET
// every 0 0$5 trigger stav_omikron = 4 and omicron_half_destroyed do var pom ;
13471: LD_EXP 39
13475: PUSH
13476: LD_INT 4
13478: EQUAL
13479: PUSH
13480: CALL 27471 0 0
13484: AND
13485: IFFALSE 13752
13487: GO 13489
13489: DISABLE
13490: LD_INT 0
13492: PPUSH
// begin popov_ven ;
13493: CALL 5619 0 0
// DialogueOn ;
13497: CALL_OW 6
// interface_hidden := true ;
13501: LD_ADDR_OWVAR 54
13505: PUSH
13506: LD_INT 1
13508: ST_TO_ADDR
// pom = create_kecajici_amik ;
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: CALL 18733 0 0
13518: ST_TO_ADDR
// SayRadio ( pom , D8-Sol1-1 ) ;
13519: LD_VAR 0 1
13523: PPUSH
13524: LD_STRING D8-Sol1-1
13526: PPUSH
13527: CALL_OW 94
// if IsOK ( kov ) then
13531: LD_EXP 30
13535: PPUSH
13536: CALL_OW 302
13540: IFFALSE 13556
// Say ( kov , D8-Kov-1 ) else
13542: LD_EXP 30
13546: PPUSH
13547: LD_STRING D8-Kov-1
13549: PPUSH
13550: CALL_OW 88
13554: GO 13647
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13556: LD_ADDR_VAR 0 1
13560: PUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_INT 1
13566: PPUSH
13567: LD_EXP 29
13571: PUSH
13572: LD_EXP 31
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL 11996 0 3
13585: ST_TO_ADDR
// if pom = 0 then
13586: LD_VAR 0 1
13590: PUSH
13591: LD_INT 0
13593: EQUAL
13594: IFFALSE 13631
// GetPeopleSide ( You2 , sex_male , class_soldier , [ kur , pop , bel ] ) ;
13596: LD_EXP 2
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: LD_EXP 27
13611: PUSH
13612: LD_EXP 28
13616: PUSH
13617: LD_EXP 32
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: PPUSH
13627: CALL 12415 0 4
// Say ( pom [ 1 ] , D8-RSol1-1 ) ;
13631: LD_VAR 0 1
13635: PUSH
13636: LD_INT 1
13638: ARRAY
13639: PPUSH
13640: LD_STRING D8-RSol1-1
13642: PPUSH
13643: CALL_OW 88
// end ; if IsOK ( gny ) then
13647: LD_EXP 31
13651: PPUSH
13652: CALL_OW 302
13656: IFFALSE 13672
// Say ( gny , D8-Gny-1 ) else
13658: LD_EXP 31
13662: PPUSH
13663: LD_STRING D8-Gny-1
13665: PPUSH
13666: CALL_OW 88
13670: GO 13728
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13672: LD_ADDR_VAR 0 1
13676: PUSH
13677: LD_INT 1
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_EXP 29
13687: PUSH
13688: LD_EXP 31
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL 11996 0 3
13701: ST_TO_ADDR
// if pom > 1 then
13702: LD_VAR 0 1
13706: PUSH
13707: LD_INT 1
13709: GREATER
13710: IFFALSE 13728
// Say ( pom [ 2 ] , D8-RSol2-1 ) ;
13712: LD_VAR 0 1
13716: PUSH
13717: LD_INT 2
13719: ARRAY
13720: PPUSH
13721: LD_STRING D8-RSol2-1
13723: PPUSH
13724: CALL_OW 88
// end ; interface_hidden := false ;
13728: LD_ADDR_OWVAR 54
13732: PUSH
13733: LD_INT 0
13735: ST_TO_ADDR
// DialogueOff ;
13736: CALL_OW 7
// stahnuti_amiku ;
13740: CALL 27634 0 0
// stav_omikron = 5 ;
13744: LD_ADDR_EXP 39
13748: PUSH
13749: LD_INT 5
13751: ST_TO_ADDR
// end ;
13752: PPOPN 1
13754: END
// every 0 0$5 trigger stav_omikron = 5 do var gri ;
13755: LD_EXP 39
13759: PUSH
13760: LD_INT 5
13762: EQUAL
13763: IFFALSE 13924
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
// begin setkani_om = false ;
13771: LD_ADDR_EXP 41
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// gri = create_grishko ;
13779: LD_ADDR_VAR 0 1
13783: PUSH
13784: CALL 18792 0 0
13788: ST_TO_ADDR
// CenterOnUnits ( gri ) ;
13789: LD_VAR 0 1
13793: PPUSH
13794: CALL_OW 85
// DialogueOn ;
13798: CALL_OW 6
// interface_hidden := true ;
13802: LD_ADDR_OWVAR 54
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// SayRadio ( gri , D9-Gri-1 ) ;
13810: LD_VAR 0 1
13814: PPUSH
13815: LD_STRING D9-Gri-1
13817: PPUSH
13818: CALL_OW 94
// SayRadio ( kur , D9-Kur-1 ) ;
13822: LD_EXP 27
13826: PPUSH
13827: LD_STRING D9-Kur-1
13829: PPUSH
13830: CALL_OW 94
// wait ( 0 0$2 ) ;
13834: LD_INT 70
13836: PPUSH
13837: CALL_OW 67
// SayRadio ( gri , D9-Gri-2 ) ;
13841: LD_VAR 0 1
13845: PPUSH
13846: LD_STRING D9-Gri-2
13848: PPUSH
13849: CALL_OW 94
// SayRadio ( kur , D9-Kur-2 ) ;
13853: LD_EXP 27
13857: PPUSH
13858: LD_STRING D9-Kur-2
13860: PPUSH
13861: CALL_OW 94
// SayRadio ( gri , D9-Gri-3 ) ;
13865: LD_VAR 0 1
13869: PPUSH
13870: LD_STRING D9-Gri-3
13872: PPUSH
13873: CALL_OW 94
// SayRadio ( kur , D9-Kur-3 ) ;
13877: LD_EXP 27
13881: PPUSH
13882: LD_STRING D9-Kur-3
13884: PPUSH
13885: CALL_OW 94
// interface_hidden := false ;
13889: LD_ADDR_OWVAR 54
13893: PUSH
13894: LD_INT 0
13896: ST_TO_ADDR
// DialogueOff ;
13897: CALL_OW 7
// wait ( 0 0$20 ) ;
13901: LD_INT 700
13903: PPUSH
13904: CALL_OW 67
// stav_omikron = 6 ;
13908: LD_ADDR_EXP 39
13912: PUSH
13913: LD_INT 6
13915: ST_TO_ADDR
// zastaveni_rusaku ;
13916: CALL 10111 0 0
// utok_arabu ;
13920: CALL 28475 0 0
// end ;
13924: PPOPN 1
13926: END
// export function kecy_behem_utoku_arabu ; var i ; begin
13927: LD_INT 0
13929: PPUSH
13930: PPUSH
// stav_omikron = 7 ;
13931: LD_ADDR_EXP 39
13935: PUSH
13936: LD_INT 7
13938: ST_TO_ADDR
// SayRadio ( kur , D9a-Kur-1 ) ;
13939: LD_EXP 27
13943: PPUSH
13944: LD_STRING D9a-Kur-1
13946: PPUSH
13947: CALL_OW 94
// Say ( bur , D9a-Bur-1 ) ;
13951: LD_EXP 29
13955: PPUSH
13956: LD_STRING D9a-Bur-1
13958: PPUSH
13959: CALL_OW 88
// SayRadio ( kur , D9a-Kur-2 ) ;
13963: LD_EXP 27
13967: PPUSH
13968: LD_STRING D9a-Kur-2
13970: PPUSH
13971: CALL_OW 94
// posilani_arabskych_hlidek = true ;
13975: LD_ADDR_EXP 74
13979: PUSH
13980: LD_INT 1
13982: ST_TO_ADDR
// manage_ruske_computery_zpet ;
13983: CALL 7340 0 0
// end ;
13987: LD_VAR 0 1
13991: RET
// every 0 0$1 trigger stav_omikron = 8 and get_lidi_popov_area > 0 do var pom , pom1 ;
13992: LD_EXP 39
13996: PUSH
13997: LD_INT 8
13999: EQUAL
14000: PUSH
14001: CALL 8727 0 0
14005: PUSH
14006: LD_INT 0
14008: GREATER
14009: AND
14010: IFFALSE 14268
14012: GO 14014
14014: DISABLE
14015: LD_INT 0
14017: PPUSH
14018: PPUSH
// begin pom = get_lidi_popov_area ;
14019: LD_ADDR_VAR 0 1
14023: PUSH
14024: CALL 8727 0 0
14028: ST_TO_ADDR
// pom = pom [ 1 ] ;
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_VAR 0 1
14038: PUSH
14039: LD_INT 1
14041: ARRAY
14042: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14043: LD_ADDR_VAR 0 2
14047: PUSH
14048: LD_INT 22
14050: PUSH
14051: LD_EXP 1
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: LD_INT 21
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 2
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PPUSH
14092: CALL_OW 69
14096: ST_TO_ADDR
// ComStop ( pom1 ) ;
14097: LD_VAR 0 2
14101: PPUSH
14102: CALL_OW 141
// ArDontAttackPlayer ( true ) ;
14106: LD_INT 1
14108: PPUSH
14109: CALL 29512 0 1
// InGameOn ;
14113: CALL_OW 8
// CenterOnUnits ( [ pop ] ) ;
14117: LD_EXP 28
14121: PUSH
14122: EMPTY
14123: LIST
14124: PPUSH
14125: CALL_OW 85
// ComMoveUnit ( pop , pom ) ;
14129: LD_EXP 28
14133: PPUSH
14134: LD_VAR 0 1
14138: PPUSH
14139: CALL_OW 112
// while GetDistUnits ( pop , pom ) > 4 do
14143: LD_EXP 28
14147: PPUSH
14148: LD_VAR 0 1
14152: PPUSH
14153: CALL_OW 296
14157: PUSH
14158: LD_INT 4
14160: GREATER
14161: IFFALSE 14172
// wait ( 0 0$1 ) ;
14163: LD_INT 35
14165: PPUSH
14166: CALL_OW 67
14170: GO 14143
// ComTurnUnit ( pom , pop ) ;
14172: LD_VAR 0 1
14176: PPUSH
14177: LD_EXP 28
14181: PPUSH
14182: CALL_OW 119
// CenterOnUnits ( [ pop ] ) ;
14186: LD_EXP 28
14190: PUSH
14191: EMPTY
14192: LIST
14193: PPUSH
14194: CALL_OW 85
// InGameOff ;
14198: CALL_OW 9
// DialogueOn ;
14202: CALL_OW 6
// interface_hidden := true ;
14206: LD_ADDR_OWVAR 54
14210: PUSH
14211: LD_INT 1
14213: ST_TO_ADDR
// if GetDistUnits ( pop , bur ) <= 10 then
14214: LD_EXP 28
14218: PPUSH
14219: LD_EXP 29
14223: PPUSH
14224: CALL_OW 296
14228: PUSH
14229: LD_INT 10
14231: LESSEQUAL
14232: IFFALSE 14240
// dialog_popov_s_burlakem else
14234: CALL 14271 0 0
14238: GO 14244
// dialog_popov_bez_burlaka ;
14240: CALL 14399 0 0
// stav_omikron = 9 ;
14244: LD_ADDR_EXP 39
14248: PUSH
14249: LD_INT 9
14251: ST_TO_ADDR
// interface_hidden := false ;
14252: LD_ADDR_OWVAR 54
14256: PUSH
14257: LD_INT 0
14259: ST_TO_ADDR
// DialogueOff ;
14260: CALL_OW 7
// totalni_ukonceni_mise_v_ingame_videu ;
14264: CALL 8915 0 0
// end ;
14268: PPOPN 2
14270: END
// function dialog_popov_s_burlakem ; begin
14271: LD_INT 0
14273: PPUSH
// Say ( bur , D10a-Bur-1 ) ;
14274: LD_EXP 29
14278: PPUSH
14279: LD_STRING D10a-Bur-1
14281: PPUSH
14282: CALL_OW 88
// Say ( pop , D10a-Pop-1 ) ;
14286: LD_EXP 28
14290: PPUSH
14291: LD_STRING D10a-Pop-1
14293: PPUSH
14294: CALL_OW 88
// Say ( bur , D10a-Bur-2 ) ;
14298: LD_EXP 29
14302: PPUSH
14303: LD_STRING D10a-Bur-2
14305: PPUSH
14306: CALL_OW 88
// Say ( pop , D10a-Pop-2 ) ;
14310: LD_EXP 28
14314: PPUSH
14315: LD_STRING D10a-Pop-2
14317: PPUSH
14318: CALL_OW 88
// Say ( bur , D10a-Bur-3 ) ;
14322: LD_EXP 29
14326: PPUSH
14327: LD_STRING D10a-Bur-3
14329: PPUSH
14330: CALL_OW 88
// Say ( pop , D10a-Pop-3 ) ;
14334: LD_EXP 28
14338: PPUSH
14339: LD_STRING D10a-Pop-3
14341: PPUSH
14342: CALL_OW 88
// Say ( bur , D10a-Bur-4 ) ;
14346: LD_EXP 29
14350: PPUSH
14351: LD_STRING D10a-Bur-4
14353: PPUSH
14354: CALL_OW 88
// Say ( pop , D10a-Pop-4 ) ;
14358: LD_EXP 28
14362: PPUSH
14363: LD_STRING D10a-Pop-4
14365: PPUSH
14366: CALL_OW 88
// Say ( bur , D10a-Bur-5 ) ;
14370: LD_EXP 29
14374: PPUSH
14375: LD_STRING D10a-Bur-5
14377: PPUSH
14378: CALL_OW 88
// Say ( pop , D10a-Pop-5 ) ;
14382: LD_EXP 28
14386: PPUSH
14387: LD_STRING D10a-Pop-5
14389: PPUSH
14390: CALL_OW 88
// end ;
14394: LD_VAR 0 1
14398: RET
// function dialog_popov_bez_burlaka ; var pom ; begin
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14403: LD_ADDR_VAR 0 2
14407: PUSH
14408: LD_INT 15
14410: PPUSH
14411: LD_INT 22
14413: PUSH
14414: LD_EXP 1
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 21
14425: PUSH
14426: LD_INT 1
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 26
14435: PUSH
14436: LD_INT 1
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: PPUSH
14448: CALL_OW 70
14452: ST_TO_ADDR
// if pom = 0 then
14453: LD_VAR 0 2
14457: PUSH
14458: LD_INT 0
14460: EQUAL
14461: IFFALSE 14465
// exit ;
14463: GO 14585
// Say ( pom , D10b-RSol1-1 ) ;
14465: LD_VAR 0 2
14469: PPUSH
14470: LD_STRING D10b-RSol1-1
14472: PPUSH
14473: CALL_OW 88
// Say ( pop , D10b-Pop-1 ) ;
14477: LD_EXP 28
14481: PPUSH
14482: LD_STRING D10b-Pop-1
14484: PPUSH
14485: CALL_OW 88
// Say ( pom , D10b-RSol1-2 ) ;
14489: LD_VAR 0 2
14493: PPUSH
14494: LD_STRING D10b-RSol1-2
14496: PPUSH
14497: CALL_OW 88
// SayRadio ( pop , D10b-Pop-2 ) ;
14501: LD_EXP 28
14505: PPUSH
14506: LD_STRING D10b-Pop-2
14508: PPUSH
14509: CALL_OW 94
// Say ( bur , D10b-Bur-2 ) ;
14513: LD_EXP 29
14517: PPUSH
14518: LD_STRING D10b-Bur-2
14520: PPUSH
14521: CALL_OW 88
// SayRadio ( pop , D10b-Pop-3 ) ;
14525: LD_EXP 28
14529: PPUSH
14530: LD_STRING D10b-Pop-3
14532: PPUSH
14533: CALL_OW 94
// Say ( bur , D10b-Bur-3 ) ;
14537: LD_EXP 29
14541: PPUSH
14542: LD_STRING D10b-Bur-3
14544: PPUSH
14545: CALL_OW 88
// SayRadio ( pop , D10b-Pop-4 ) ;
14549: LD_EXP 28
14553: PPUSH
14554: LD_STRING D10b-Pop-4
14556: PPUSH
14557: CALL_OW 94
// Say ( bur , D10b-Bur-4 ) ;
14561: LD_EXP 29
14565: PPUSH
14566: LD_STRING D10b-Bur-4
14568: PPUSH
14569: CALL_OW 88
// SayRadio ( pop , D10b-Pop-5 ) ;
14573: LD_EXP 28
14577: PPUSH
14578: LD_STRING D10b-Pop-5
14580: PPUSH
14581: CALL_OW 94
// end ;
14585: LD_VAR 0 1
14589: RET
// every 0 0$1 trigger stav_omikron in [ 0 , 1 , 2 , 3 ] do var pom , i , upoz , pom1 , pom2 , pom3 ; var dr_pom1 , dr_pom2 , dr_pom3 ; var dr_pom ;
14590: LD_EXP 39
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: LD_INT 2
14603: PUSH
14604: LD_INT 3
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: IN
14613: IFFALSE 15405
14615: GO 14617
14617: DISABLE
14618: LD_INT 0
14620: PPUSH
14621: PPUSH
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
// begin upoz = false ;
14630: LD_ADDR_VAR 0 3
14634: PUSH
14635: LD_INT 0
14637: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , f_not , [ f_type , unit_building ] ] ) ;
14638: LD_ADDR_VAR 0 1
14642: PUSH
14643: LD_INT 17
14645: PPUSH
14646: LD_INT 22
14648: PUSH
14649: LD_EXP 1
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 3
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 3
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 70
14680: ST_TO_ADDR
// dr_pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
14681: LD_ADDR_VAR 0 10
14685: PUSH
14686: LD_INT 17
14688: PPUSH
14689: LD_INT 22
14691: PUSH
14692: LD_EXP 1
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 21
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 70
14719: ST_TO_ADDR
// for i in dr_pom do
14720: LD_ADDR_VAR 0 2
14724: PUSH
14725: LD_VAR 0 10
14729: PUSH
14730: FOR_IN
14731: IFFALSE 14756
// pom = pom union UnitsInside ( i ) ;
14733: LD_ADDR_VAR 0 1
14737: PUSH
14738: LD_VAR 0 1
14742: PUSH
14743: LD_VAR 0 2
14747: PPUSH
14748: CALL_OW 313
14752: UNION
14753: ST_TO_ADDR
14754: GO 14730
14756: POP
14757: POP
// if pom then
14758: LD_VAR 0 1
14762: IFFALSE 14811
// for i in pom do
14764: LD_ADDR_VAR 0 2
14768: PUSH
14769: LD_VAR 0 1
14773: PUSH
14774: FOR_IN
14775: IFFALSE 14809
// if Getside ( Attacks ( i ) ) = Amici then
14777: LD_VAR 0 2
14781: PPUSH
14782: CALL_OW 320
14786: PPUSH
14787: CALL_OW 255
14791: PUSH
14792: LD_EXP 4
14796: EQUAL
14797: IFFALSE 14807
// upoz = true ;
14799: LD_ADDR_VAR 0 3
14803: PUSH
14804: LD_INT 1
14806: ST_TO_ADDR
14807: GO 14774
14809: POP
14810: POP
// if upoz then
14811: LD_VAR 0 3
14815: IFFALSE 15404
// begin DialogueOn ;
14817: CALL_OW 6
// interface_hidden := true ;
14821: LD_ADDR_OWVAR 54
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// if IsOK ( gny ) then
14829: LD_EXP 31
14833: PPUSH
14834: CALL_OW 302
14838: IFFALSE 14866
// begin Say ( gny , D11-Gny-1 ) ;
14840: LD_EXP 31
14844: PPUSH
14845: LD_STRING D11-Gny-1
14847: PPUSH
14848: CALL_OW 88
// Say ( bur , D11-Bur-1 ) ;
14852: LD_EXP 29
14856: PPUSH
14857: LD_STRING D11-Bur-1
14859: PPUSH
14860: CALL_OW 88
// end else
14864: GO 14878
// SayRadio ( kur , D11-Kur-1 ) ;
14866: LD_EXP 27
14870: PPUSH
14871: LD_STRING D11-Kur-1
14873: PPUSH
14874: CALL_OW 94
// interface_hidden := true ;
14878: LD_ADDR_OWVAR 54
14882: PUSH
14883: LD_INT 1
14885: ST_TO_ADDR
// DialogueOff ;
14886: CALL_OW 7
// InGameOn ;
14890: CALL_OW 8
// repeat pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14894: LD_ADDR_VAR 0 4
14898: PUSH
14899: LD_INT 18
14901: PPUSH
14902: LD_INT 22
14904: PUSH
14905: LD_EXP 1
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 3
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: PPUSH
14932: CALL_OW 70
14936: ST_TO_ADDR
// dr_pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14937: LD_ADDR_VAR 0 7
14941: PUSH
14942: LD_INT 18
14944: PPUSH
14945: LD_INT 22
14947: PUSH
14948: LD_EXP 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 21
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 70
14975: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14976: LD_ADDR_VAR 0 5
14980: PUSH
14981: LD_INT 19
14983: PPUSH
14984: LD_INT 22
14986: PUSH
14987: LD_EXP 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 3
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 3
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 70
15018: ST_TO_ADDR
// dr_pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15019: LD_ADDR_VAR 0 8
15023: PUSH
15024: LD_INT 19
15026: PPUSH
15027: LD_INT 22
15029: PUSH
15030: LD_EXP 1
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 21
15041: PUSH
15042: LD_INT 3
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 70
15057: ST_TO_ADDR
// pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
15058: LD_ADDR_VAR 0 6
15062: PUSH
15063: LD_INT 37
15065: PPUSH
15066: LD_INT 22
15068: PUSH
15069: LD_EXP 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 3
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 3
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: PPUSH
15096: CALL_OW 70
15100: ST_TO_ADDR
// dr_pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15101: LD_ADDR_VAR 0 9
15105: PUSH
15106: LD_INT 37
15108: PPUSH
15109: LD_INT 22
15111: PUSH
15112: LD_EXP 1
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 21
15123: PUSH
15124: LD_INT 3
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 70
15139: ST_TO_ADDR
// ComMoveToArea ( pom1 , om_ven_3 ) ;
15140: LD_VAR 0 4
15144: PPUSH
15145: LD_INT 31
15147: PPUSH
15148: CALL_OW 113
// for i in dr_pom1 do
15152: LD_ADDR_VAR 0 2
15156: PUSH
15157: LD_VAR 0 7
15161: PUSH
15162: FOR_IN
15163: IFFALSE 15203
// begin dr_pom = UnitsInside ( i ) ;
15165: LD_ADDR_VAR 0 10
15169: PUSH
15170: LD_VAR 0 2
15174: PPUSH
15175: CALL_OW 313
15179: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15180: LD_VAR 0 10
15184: PPUSH
15185: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_1 ) ;
15189: LD_VAR 0 10
15193: PPUSH
15194: LD_INT 29
15196: PPUSH
15197: CALL_OW 173
// end ;
15201: GO 15162
15203: POP
15204: POP
// ComMoveToArea ( pom2 , om_zone ) ;
15205: LD_VAR 0 5
15209: PPUSH
15210: LD_INT 8
15212: PPUSH
15213: CALL_OW 113
// for i in dr_pom2 do
15217: LD_ADDR_VAR 0 2
15221: PUSH
15222: LD_VAR 0 8
15226: PUSH
15227: FOR_IN
15228: IFFALSE 15268
// begin dr_pom = UnitsInside ( i ) ;
15230: LD_ADDR_VAR 0 10
15234: PUSH
15235: LD_VAR 0 2
15239: PPUSH
15240: CALL_OW 313
15244: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15245: LD_VAR 0 10
15249: PPUSH
15250: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_2 ) ;
15254: LD_VAR 0 10
15258: PPUSH
15259: LD_INT 30
15261: PPUSH
15262: CALL_OW 173
// end ;
15266: GO 15227
15268: POP
15269: POP
// ComMoveToArea ( pom3 , om_zone ) ;
15270: LD_VAR 0 6
15274: PPUSH
15275: LD_INT 8
15277: PPUSH
15278: CALL_OW 113
// for i in dr_pom3 do
15282: LD_ADDR_VAR 0 2
15286: PUSH
15287: LD_VAR 0 9
15291: PUSH
15292: FOR_IN
15293: IFFALSE 15333
// begin dr_pom = UnitsInside ( i ) ;
15295: LD_ADDR_VAR 0 10
15299: PUSH
15300: LD_VAR 0 2
15304: PPUSH
15305: CALL_OW 313
15309: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15310: LD_VAR 0 10
15314: PPUSH
15315: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_3 ) ;
15319: LD_VAR 0 10
15323: PPUSH
15324: LD_INT 31
15326: PPUSH
15327: CALL_OW 173
// end ;
15331: GO 15292
15333: POP
15334: POP
// wait ( 0 0$3 ) ;
15335: LD_INT 105
15337: PPUSH
15338: CALL_OW 67
// until not ( pom1 or pom3 or pom3 ) ;
15342: LD_VAR 0 4
15346: PUSH
15347: LD_VAR 0 6
15351: OR
15352: PUSH
15353: LD_VAR 0 6
15357: OR
15358: NOT
15359: IFFALSE 14894
// wait ( 0 0$4 ) ;
15361: LD_INT 140
15363: PPUSH
15364: CALL_OW 67
// if dr_pom3 then
15368: LD_VAR 0 9
15372: IFFALSE 15400
// for i in dr_pom3 do
15374: LD_ADDR_VAR 0 2
15378: PUSH
15379: LD_VAR 0 9
15383: PUSH
15384: FOR_IN
15385: IFFALSE 15398
// KillUnit ( i ) ;
15387: LD_VAR 0 2
15391: PPUSH
15392: CALL_OW 66
15396: GO 15384
15398: POP
15399: POP
// InGameOff ;
15400: CALL_OW 9
// end ; enable ;
15404: ENABLE
// end ;
15405: PPOPN 10
15407: END
// every 1 trigger stav_omikron in [ 4 , 5 , 6 ] do var pom , pom1 , pom2 , i , AreaNotCleared , firstDialog ;
15408: LD_EXP 39
15412: PUSH
15413: LD_INT 4
15415: PUSH
15416: LD_INT 5
15418: PUSH
15419: LD_INT 6
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: IN
15427: IFFALSE 15587
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
// begin enable ;
15440: ENABLE
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , 3 ] ] ) ;
15441: LD_ADDR_VAR 0 1
15445: PUSH
15446: LD_INT 20
15448: PPUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_INT 3
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PPUSH
15473: CALL_OW 70
15477: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) ;
15478: LD_ADDR_VAR 0 3
15482: PUSH
15483: LD_INT 20
15485: PPUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 22
15498: PUSH
15499: LD_INT 3
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PPUSH
15510: CALL_OW 70
15514: ST_TO_ADDR
// if pom or pom2 then
15515: LD_VAR 0 1
15519: PUSH
15520: LD_VAR 0 3
15524: OR
15525: IFFALSE 15587
// begin ComMoveXY ( pom , 62 , 16 ) ;
15527: LD_VAR 0 1
15531: PPUSH
15532: LD_INT 62
15534: PPUSH
15535: LD_INT 16
15537: PPUSH
15538: CALL_OW 111
// ComMoveXY ( pom2 , 62 , 16 ) ;
15542: LD_VAR 0 3
15546: PPUSH
15547: LD_INT 62
15549: PPUSH
15550: LD_INT 16
15552: PPUSH
15553: CALL_OW 111
// if KurinDialog = 0 then
15557: LD_EXP 6
15561: PUSH
15562: LD_INT 0
15564: EQUAL
15565: IFFALSE 15587
// begin KurinDialog = 1 ;
15567: LD_ADDR_EXP 6
15571: PUSH
15572: LD_INT 1
15574: ST_TO_ADDR
// Say ( kur , D12-Kur-1 ) ;
15575: LD_EXP 27
15579: PPUSH
15580: LD_STRING D12-Kur-1
15582: PPUSH
15583: CALL_OW 88
// end ; end ; end ;
15587: PPOPN 6
15589: END
// export function hlaska_lhani ; begin
15590: LD_INT 0
15592: PPUSH
// DialogueOn ;
15593: CALL_OW 6
// interface_hidden := true ;
15597: LD_ADDR_OWVAR 54
15601: PUSH
15602: LD_INT 1
15604: ST_TO_ADDR
// Say ( kur , D6d-Kur-1 ) ;
15605: LD_EXP 27
15609: PPUSH
15610: LD_STRING D6d-Kur-1
15612: PPUSH
15613: CALL_OW 88
// interface_hidden := false ;
15617: LD_ADDR_OWVAR 54
15621: PUSH
15622: LD_INT 0
15624: ST_TO_ADDR
// DialogueOff ;
15625: CALL_OW 7
// end ;
15629: LD_VAR 0 1
15633: RET
// export function dialog_upoz ; begin
15634: LD_INT 0
15636: PPUSH
// DialogueOn ;
15637: CALL_OW 6
// interface_hidden := true ;
15641: LD_ADDR_OWVAR 54
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// SayRadio ( kur , D7a-Kur-1 ) ;
15649: LD_EXP 27
15653: PPUSH
15654: LD_STRING D7a-Kur-1
15656: PPUSH
15657: CALL_OW 94
// interface_hidden := false ;
15661: LD_ADDR_OWVAR 54
15665: PUSH
15666: LD_INT 0
15668: ST_TO_ADDR
// DialogueOff ;
15669: CALL_OW 7
// end ;
15673: LD_VAR 0 1
15677: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
15678: GO 15680
15680: DISABLE
15681: LD_INT 0
15683: PPUSH
15684: PPUSH
15685: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15686: LD_ADDR_VAR 0 3
15690: PUSH
15691: LD_INT 22
15693: PUSH
15694: LD_EXP 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: LD_INT 21
15708: PUSH
15709: LD_INT 1
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 21
15718: PUSH
15719: LD_INT 2
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 69
15739: ST_TO_ADDR
// for i in Ru_Units do
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_VAR 0 3
15749: PUSH
15750: FOR_IN
15751: IFFALSE 15858
// begin pom = Attacks ( i ) ;
15753: LD_ADDR_VAR 0 1
15757: PUSH
15758: LD_VAR 0 2
15762: PPUSH
15763: CALL_OW 320
15767: ST_TO_ADDR
// if pom <> 0 then
15768: LD_VAR 0 1
15772: PUSH
15773: LD_INT 0
15775: NONEQUAL
15776: IFFALSE 15818
// if Getside ( pom ) in [ You2 , You3 ] then
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 255
15787: PUSH
15788: LD_EXP 2
15792: PUSH
15793: LD_EXP 3
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: IN
15802: IFFALSE 15818
// konstanta_utoceni = konstanta_utoceni + 1 ;
15804: LD_ADDR_EXP 49
15808: PUSH
15809: LD_EXP 49
15813: PUSH
15814: LD_INT 1
15816: PLUS
15817: ST_TO_ADDR
// if pom = pop or pom = kur then
15818: LD_VAR 0 1
15822: PUSH
15823: LD_EXP 28
15827: EQUAL
15828: PUSH
15829: LD_VAR 0 1
15833: PUSH
15834: LD_EXP 27
15838: EQUAL
15839: OR
15840: IFFALSE 15856
// konstanta_utoceni = konstanta_utoceni + 10 ;
15842: LD_ADDR_EXP 49
15846: PUSH
15847: LD_EXP 49
15851: PUSH
15852: LD_INT 10
15854: PLUS
15855: ST_TO_ADDR
// end ;
15856: GO 15750
15858: POP
15859: POP
// if konstanta_utoceni < 10 then
15860: LD_EXP 49
15864: PUSH
15865: LD_INT 10
15867: LESS
15868: IFFALSE 15871
// enable ;
15870: ENABLE
// end ;
15871: PPOPN 3
15873: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
15874: LD_EXP 49
15878: PUSH
15879: LD_INT 10
15881: GREATEREQUAL
15882: IFFALSE 15891
15884: GO 15886
15886: DISABLE
// begin konec_mise_utok ;
15887: CALL 1474 0 0
// end ;
15891: END
// export function dialog_scholtze_umrel ; var i , pom , pom1 ; begin
15892: LD_INT 0
15894: PPUSH
15895: PPUSH
15896: PPUSH
15897: PPUSH
// pom = 0 ;
15898: LD_ADDR_VAR 0 3
15902: PUSH
15903: LD_INT 0
15905: ST_TO_ADDR
// DialogueOn ;
15906: CALL_OW 6
// interface_hidden := true ;
15910: LD_ADDR_OWVAR 54
15914: PUSH
15915: LD_INT 1
15917: ST_TO_ADDR
// ForceSay ( schol2 , D4b-Sch-1 ) ;
15918: LD_EXP 34
15922: PPUSH
15923: LD_STRING D4b-Sch-1
15925: PPUSH
15926: CALL_OW 91
// pom = FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
15930: LD_ADDR_VAR 0 3
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_EXP 4
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 21
15949: PUSH
15950: LD_INT 1
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PPUSH
15961: CALL_OW 69
15965: ST_TO_ADDR
// pom1 = NearestUnitToUnit ( pom , schol2 ) ;
15966: LD_ADDR_VAR 0 4
15970: PUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: LD_EXP 34
15980: PPUSH
15981: CALL_OW 74
15985: ST_TO_ADDR
// if pom1 <> 0 then
15986: LD_VAR 0 4
15990: PUSH
15991: LD_INT 0
15993: NONEQUAL
15994: IFFALSE 16008
// SayNoName ( pom1 , D4b-Sol1-1 ) ;
15996: LD_VAR 0 4
16000: PPUSH
16001: LD_STRING D4b-Sol1-1
16003: PPUSH
16004: CALL_OW 90
// pom1 = NearestUnitToUnit ( pom diff pom1 , pom1 ) ;
16008: LD_ADDR_VAR 0 4
16012: PUSH
16013: LD_VAR 0 3
16017: PUSH
16018: LD_VAR 0 4
16022: DIFF
16023: PPUSH
16024: LD_VAR 0 4
16028: PPUSH
16029: CALL_OW 74
16033: ST_TO_ADDR
// SayNoName ( pom1 , D4b-Sol2-1 ) ;
16034: LD_VAR 0 4
16038: PPUSH
16039: LD_STRING D4b-Sol2-1
16041: PPUSH
16042: CALL_OW 90
// ForceSay ( schol2 , D4b-Sch-2 ) ;
16046: LD_EXP 34
16050: PPUSH
16051: LD_STRING D4b-Sch-2
16053: PPUSH
16054: CALL_OW 91
// Say ( bur , D4b-Bur-2 ) ;
16058: LD_EXP 29
16062: PPUSH
16063: LD_STRING D4b-Bur-2
16065: PPUSH
16066: CALL_OW 88
// SetLives ( schol2 , 0 ) ;
16070: LD_EXP 34
16074: PPUSH
16075: LD_INT 0
16077: PPUSH
16078: CALL_OW 234
// ChangeMissionObjectives ( MScholtzeDel ) ;
16082: LD_STRING MScholtzeDel
16084: PPUSH
16085: CALL_OW 337
// interface_hidden := false ;
16089: LD_ADDR_OWVAR 54
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// DialogueOff ;
16097: CALL_OW 7
// end ;
16101: LD_VAR 0 1
16105: RET
// on UnitGoesToRed ( un ) do begin if un = schol2 then
16106: LD_VAR 0 1
16110: PUSH
16111: LD_EXP 34
16115: EQUAL
16116: IFFALSE 16132
// if kecy_scholtze_nalezen then
16118: LD_EXP 44
16122: IFFALSE 16128
// exit else
16124: GO 16132
16126: GO 16132
// dialog_scholtze_umrel ;
16128: CALL 15892 0 0
// end ;
16132: PPOPN 1
16134: END
// every 0 0$2 trigger FilterUnitsInArea ( noTracksArea , [ [ f_side , You ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] , [ f_chassis , us_light_wheeled ] , [ f_chassis , us_medium_wheeled ] ] ] ) and stav_omikron in [ 0 , 1 , 2 , 3 ] do
16135: LD_INT 53
16137: PPUSH
16138: LD_INT 22
16140: PUSH
16141: LD_EXP 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 2
16152: PUSH
16153: LD_INT 31
16155: PUSH
16156: LD_INT 21
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 31
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 31
16175: PUSH
16176: LD_INT 1
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 31
16185: PUSH
16186: LD_INT 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 70
16208: PUSH
16209: LD_EXP 39
16213: PUSH
16214: LD_INT 0
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: LD_INT 2
16222: PUSH
16223: LD_INT 3
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: IN
16232: AND
16233: IFFALSE 16260
16235: GO 16237
16237: DISABLE
// begin CenterOnXY ( 38 , 58 ) ;
16238: LD_INT 38
16240: PPUSH
16241: LD_INT 58
16243: PPUSH
16244: CALL_OW 84
// Say ( bur , D5a-Bur-1 ) ;
16248: LD_EXP 29
16252: PPUSH
16253: LD_STRING D5a-Bur-1
16255: PPUSH
16256: CALL_OW 88
// end ;
16260: END
// on BuildingStarted ( b , builder ) do begin if b in FilterUnitsInArea ( restrictedArea , [ f_side , 3 ] ) then
16261: LD_VAR 0 1
16265: PUSH
16266: LD_INT 54
16268: PPUSH
16269: LD_INT 22
16271: PUSH
16272: LD_INT 3
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PPUSH
16279: CALL_OW 70
16283: IN
16284: IFFALSE 16295
// RemoveUnit ( b ) ;
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 64
// end ;
16295: PPOPN 2
16297: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) > 0 do var pom ;
16298: LD_INT 22
16300: PUSH
16301: LD_EXP 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 30
16312: PUSH
16313: LD_INT 26
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PPUSH
16324: CALL_OW 69
16328: PUSH
16329: LD_INT 0
16331: GREATER
16332: IFFALSE 16424
16334: GO 16336
16336: DISABLE
16337: LD_INT 0
16339: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_mine ] ] ) ;
16340: LD_ADDR_VAR 0 1
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_EXP 1
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 30
16359: PUSH
16360: LD_INT 29
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if pom > 0 then
16376: LD_VAR 0 1
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16423
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
16386: LD_VAR 0 1
16390: PUSH
16391: LD_INT 1
16393: ARRAY
16394: PPUSH
16395: CALL_OW 304
16399: PUSH
16400: LD_INT 0
16402: NONEQUAL
16403: IFFALSE 16414
// wait ( 0 0$1 ) ;
16405: LD_INT 35
16407: PPUSH
16408: CALL_OW 67
16412: GO 16386
// Hint ( PowerPlant ) ;
16414: LD_STRING PowerPlant
16416: PPUSH
16417: CALL_OW 339
// end else
16421: GO 16424
// enable ;
16423: ENABLE
// end ;
16424: PPOPN 1
16426: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ; var pocet ;
16427: LD_INT 22
16429: PUSH
16430: LD_EXP 1
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 30
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PPUSH
16453: CALL_OW 69
16457: PUSH
16458: LD_INT 1
16460: GREATER
16461: IFFALSE 16621
16463: GO 16465
16465: DISABLE
16466: LD_INT 0
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
// begin pocet = 0 ;
16472: LD_ADDR_VAR 0 4
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_EXP 1
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 30
16499: PUSH
16500: LD_INT 0
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PPUSH
16511: CALL_OW 69
16515: ST_TO_ADDR
// pom1 = pom ;
16516: LD_ADDR_VAR 0 2
16520: PUSH
16521: LD_VAR 0 1
16525: ST_TO_ADDR
// while pocet < 2 do
16526: LD_VAR 0 4
16530: PUSH
16531: LD_INT 2
16533: LESS
16534: IFFALSE 16614
// begin for i in pom do
16536: LD_ADDR_VAR 0 3
16540: PUSH
16541: LD_VAR 0 1
16545: PUSH
16546: FOR_IN
16547: IFFALSE 16593
// if not IsConstructed ( i ) then
16549: LD_VAR 0 3
16553: PPUSH
16554: CALL_OW 304
16558: NOT
16559: IFFALSE 16591
// begin pocet = pocet + 1 ;
16561: LD_ADDR_VAR 0 4
16565: PUSH
16566: LD_VAR 0 4
16570: PUSH
16571: LD_INT 1
16573: PLUS
16574: ST_TO_ADDR
// pom1 = pom1 diff i ;
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_VAR 0 2
16584: PUSH
16585: LD_VAR 0 3
16589: DIFF
16590: ST_TO_ADDR
// end ;
16591: GO 16546
16593: POP
16594: POP
// pom = pom1 ;
16595: LD_ADDR_VAR 0 1
16599: PUSH
16600: LD_VAR 0 2
16604: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16605: LD_INT 70
16607: PPUSH
16608: CALL_OW 67
// end ;
16612: GO 16526
// Hint ( Transport1 ) ;
16614: LD_STRING Transport1
16616: PPUSH
16617: CALL_OW 339
// end ;
16621: PPOPN 4
16623: END
// export function chmo_6 ; begin
16624: LD_INT 0
16626: PPUSH
// ChangeMissionObjectives ( M6a ) ;
16627: LD_STRING M6a
16629: PPUSH
16630: CALL_OW 337
// end ;
16634: LD_VAR 0 1
16638: RET
// export function query_refuel ; begin
16639: LD_INT 0
16641: PPUSH
// Query ( QRefuel ) ;
16642: LD_STRING QRefuel
16644: PPUSH
16645: CALL_OW 97
// end ;
16649: LD_VAR 0 1
16653: RET
// every 0 0$6 do var pom ;
16654: GO 16656
16656: DISABLE
16657: LD_INT 0
16659: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_INT 22
16667: PUSH
16668: LD_EXP 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: ST_TO_ADDR
// if postavenych_aut >= pom then
16696: LD_EXP 47
16700: PUSH
16701: LD_VAR 0 1
16705: GREATEREQUAL
16706: IFFALSE 16717
// ChangeMissionObjectives ( M3a ) else
16708: LD_STRING M3a
16710: PPUSH
16711: CALL_OW 337
16715: GO 16718
// enable ;
16717: ENABLE
// end ;
16718: PPOPN 1
16720: END
// export function hint_cerpaci_auta ; begin
16721: LD_INT 0
16723: PPUSH
// Hint ( refuelingtrucks ) ;
16724: LD_STRING refuelingtrucks
16726: PPUSH
16727: CALL_OW 339
// end ; end_of_file
16731: LD_VAR 0 1
16735: RET
// export AMERICKA_POMOC_HLIDCE_LIST ; export AMERICKE_POSILY1_LIST ; export AMERICKE_POSILY2_LIST ; export AMERICKE_POSILY3_LIST ; export AMERICKE_POSILY4_LIST ; export AMERICKE_POSILY11_LIST ; export RUSKE_POSILY_NA_OMICRON_LIST ; export RUSKE_POSILY_RIDICI_LIST ; export RU_posily_na_utek ; export RUSI_CERPACI_AUTA_LIST ; export ARABI_KAMIKADZE_LIST ; export ARABI_PRVNI_VLNA ; export ARABI_FLAME_LIST ; export ARABI_SELF_AUTA ; export ARABI_VOJACI ; export ARABI_doraz ; export ARABI_KIROV_POSILY ; export Arabi_komanda1 ; export Arabi_komanda2 ; export Arabi_komanda3 ; export Arabi_komanda4 ; export other_survivors_mise_2 ; var ah , av ; export function get_sex ; begin
16736: LD_INT 0
16738: PPUSH
// if Prob ( 20 ) then
16739: LD_INT 20
16741: PPUSH
16742: CALL_OW 13
16746: IFFALSE 16758
// result = sex_female else
16748: LD_ADDR_VAR 0 1
16752: PUSH
16753: LD_INT 2
16755: ST_TO_ADDR
16756: GO 16766
// result = sex_male ;
16758: LD_ADDR_VAR 0 1
16762: PUSH
16763: LD_INT 1
16765: ST_TO_ADDR
// end ;
16766: LD_VAR 0 1
16770: RET
// export function get_human ( sex , clas , level , name ) ; begin
16771: LD_INT 0
16773: PPUSH
// PrepareHuman ( sex , clas , level ) ;
16774: LD_VAR 0 1
16778: PPUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: LD_VAR 0 3
16788: PPUSH
16789: CALL_OW 380
// hc_name := name ;
16793: LD_ADDR_OWVAR 26
16797: PUSH
16798: LD_VAR 0 4
16802: ST_TO_ADDR
// result := CreateHuman ;
16803: LD_ADDR_VAR 0 5
16807: PUSH
16808: CALL_OW 44
16812: ST_TO_ADDR
// end ;
16813: LD_VAR 0 5
16817: RET
// export function create_americka_pomoc_hlidce ; var pom ; begin
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
// pom = [ ] ;
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: EMPTY
16828: ST_TO_ADDR
// uc_side = Amici ;
16829: LD_ADDR_OWVAR 20
16833: PUSH
16834: LD_EXP 4
16838: ST_TO_ADDR
// uc_nation = nation_american ;
16839: LD_ADDR_OWVAR 21
16843: PUSH
16844: LD_INT 1
16846: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
16847: LD_ADDR_LOC 23
16851: PUSH
16852: CALL 16736 0 0
16856: PPUSH
16857: LD_INT 3
16859: PPUSH
16860: LD_EXP 13
16864: PUSH
16865: LD_OWVAR 67
16869: ARRAY
16870: PPUSH
16871: LD_STRING 
16873: PPUSH
16874: CALL 16771 0 4
16878: ST_TO_ADDR
// case difficulty of 1 :
16879: LD_OWVAR 67
16883: PUSH
16884: LD_INT 1
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 16927
16892: POP
// begin vc_chassis = us_light_wheeled ;
16893: LD_ADDR_OWVAR 37
16897: PUSH
16898: LD_INT 1
16900: ST_TO_ADDR
// vc_control = control_manual ;
16901: LD_ADDR_OWVAR 38
16905: PUSH
16906: LD_INT 1
16908: ST_TO_ADDR
// vc_engine = engine_solar ;
16909: LD_ADDR_OWVAR 39
16913: PUSH
16914: LD_INT 2
16916: ST_TO_ADDR
// vc_weapon = us_light_gun ;
16917: LD_ADDR_OWVAR 40
16921: PUSH
16922: LD_INT 3
16924: ST_TO_ADDR
// end ; 2 :
16925: GO 17014
16927: LD_INT 2
16929: DOUBLE
16930: EQUAL
16931: IFTRUE 16935
16933: GO 16970
16935: POP
// begin vc_chassis = us_light_wheeled ;
16936: LD_ADDR_OWVAR 37
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// vc_control = control_manual ;
16944: LD_ADDR_OWVAR 38
16948: PUSH
16949: LD_INT 1
16951: ST_TO_ADDR
// vc_engine = engine_solar ;
16952: LD_ADDR_OWVAR 39
16956: PUSH
16957: LD_INT 2
16959: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
16960: LD_ADDR_OWVAR 40
16964: PUSH
16965: LD_INT 2
16967: ST_TO_ADDR
// end ; 3 :
16968: GO 17014
16970: LD_INT 3
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 17013
16978: POP
// begin vc_chassis = us_medium_wheeled ;
16979: LD_ADDR_OWVAR 37
16983: PUSH
16984: LD_INT 2
16986: ST_TO_ADDR
// vc_control = control_manual ;
16987: LD_ADDR_OWVAR 38
16991: PUSH
16992: LD_INT 1
16994: ST_TO_ADDR
// vc_engine = engine_combustion ;
16995: LD_ADDR_OWVAR 39
16999: PUSH
17000: LD_INT 1
17002: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
17003: LD_ADDR_OWVAR 40
17007: PUSH
17008: LD_INT 4
17010: ST_TO_ADDR
// end ; end ;
17011: GO 17014
17013: POP
// av = CreateVehicle ;
17014: LD_ADDR_LOC 24
17018: PUSH
17019: CALL_OW 45
17023: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
17024: LD_LOC 23
17028: PPUSH
17029: LD_LOC 24
17033: PPUSH
17034: CALL_OW 52
// pom = pom ^ av ;
17038: LD_ADDR_VAR 0 2
17042: PUSH
17043: LD_VAR 0 2
17047: PUSH
17048: LD_LOC 24
17052: ADD
17053: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17054: LD_ADDR_LOC 23
17058: PUSH
17059: CALL 16736 0 0
17063: PPUSH
17064: LD_INT 1
17066: PPUSH
17067: LD_EXP 13
17071: PUSH
17072: LD_OWVAR 67
17076: ARRAY
17077: PPUSH
17078: LD_STRING 
17080: PPUSH
17081: CALL 16771 0 4
17085: ST_TO_ADDR
// pom = pom ^ ah ;
17086: LD_ADDR_VAR 0 2
17090: PUSH
17091: LD_VAR 0 2
17095: PUSH
17096: LD_LOC 23
17100: ADD
17101: ST_TO_ADDR
// if pom > 2 then
17102: LD_VAR 0 2
17106: PUSH
17107: LD_INT 2
17109: GREATER
17110: IFFALSE 17156
// pom = pom ^ ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17112: LD_ADDR_VAR 0 2
17116: PUSH
17117: LD_VAR 0 2
17121: PUSH
17122: LD_LOC 23
17126: ADD
17127: PUSH
17128: CALL 16736 0 0
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: LD_EXP 13
17140: PUSH
17141: LD_OWVAR 67
17145: ARRAY
17146: PPUSH
17147: LD_STRING 
17149: PPUSH
17150: CALL 16771 0 4
17154: EQUAL
17155: ST_TO_ADDR
// AMERICKA_POMOC_HLIDCE_LIST = pom ;
17156: LD_ADDR_EXP 50
17160: PUSH
17161: LD_VAR 0 2
17165: ST_TO_ADDR
// end ;
17166: LD_VAR 0 1
17170: RET
// export function set_skily_amikum ; var pom , i ; begin
17171: LD_INT 0
17173: PPUSH
17174: PPUSH
17175: PPUSH
// pom = [ Am_sol1 , Am_sol2 , Am_sol3 , Am_sol4 , Am_vb1 , Am_vb2 , Am_vb3 , Am_vb4 ] ;
17176: LD_ADDR_VAR 0 2
17180: PUSH
17181: LD_INT 38
17183: PUSH
17184: LD_INT 39
17186: PUSH
17187: LD_INT 40
17189: PUSH
17190: LD_INT 41
17192: PUSH
17193: LD_INT 29
17195: PUSH
17196: LD_INT 30
17198: PUSH
17199: LD_INT 31
17201: PUSH
17202: LD_INT 32
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: ST_TO_ADDR
// for i in pom do
17215: LD_ADDR_VAR 0 3
17219: PUSH
17220: LD_VAR 0 2
17224: PUSH
17225: FOR_IN
17226: IFFALSE 17253
// uprav_cloveka ( i , class_soldier , levely_amici [ difficulty ] ) ;
17228: LD_VAR 0 3
17232: PPUSH
17233: LD_INT 1
17235: PPUSH
17236: LD_EXP 13
17240: PUSH
17241: LD_OWVAR 67
17245: ARRAY
17246: PPUSH
17247: CALL 17568 0 3
17251: GO 17225
17253: POP
17254: POP
// pom = [ Am_me1 , Am_me2 , Am_me3 ] ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_INT 33
17262: PUSH
17263: LD_INT 34
17265: PUSH
17266: LD_INT 35
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: ST_TO_ADDR
// for i in pom do
17274: LD_ADDR_VAR 0 3
17278: PUSH
17279: LD_VAR 0 2
17283: PUSH
17284: FOR_IN
17285: IFFALSE 17312
// uprav_cloveka ( i , class_mechanic , levely_amici [ difficulty ] ) ;
17287: LD_VAR 0 3
17291: PPUSH
17292: LD_INT 3
17294: PPUSH
17295: LD_EXP 13
17299: PUSH
17300: LD_OWVAR 67
17304: ARRAY
17305: PPUSH
17306: CALL 17568 0 3
17310: GO 17284
17312: POP
17313: POP
// uprav_cloveka ( Am_sci1 , class_scientistic , levely_amici [ difficulty ] ) ;
17314: LD_INT 37
17316: PPUSH
17317: LD_INT 4
17319: PPUSH
17320: LD_EXP 13
17324: PUSH
17325: LD_OWVAR 67
17329: ARRAY
17330: PPUSH
17331: CALL 17568 0 3
// uprav_cloveka ( Am_eng1 , class_engineer , levely_amici [ difficulty ] ) ;
17335: LD_INT 36
17337: PPUSH
17338: LD_INT 2
17340: PPUSH
17341: LD_EXP 13
17345: PUSH
17346: LD_OWVAR 67
17350: ARRAY
17351: PPUSH
17352: CALL 17568 0 3
// end ;
17356: LD_VAR 0 1
17360: RET
// function set_skills ( un , skills ) ; begin
17361: LD_INT 0
17363: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
17364: LD_VAR 0 1
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: LD_VAR 0 2
17376: PUSH
17377: LD_INT 1
17379: ARRAY
17380: PPUSH
17381: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
17385: LD_VAR 0 1
17389: PPUSH
17390: LD_INT 2
17392: PPUSH
17393: LD_VAR 0 2
17397: PUSH
17398: LD_INT 2
17400: ARRAY
17401: PPUSH
17402: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
17406: LD_VAR 0 1
17410: PPUSH
17411: LD_INT 3
17413: PPUSH
17414: LD_VAR 0 2
17418: PUSH
17419: LD_INT 3
17421: ARRAY
17422: PPUSH
17423: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
17427: LD_VAR 0 1
17431: PPUSH
17432: LD_INT 4
17434: PPUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 4
17442: ARRAY
17443: PPUSH
17444: CALL_OW 237
// end ;
17448: LD_VAR 0 3
17452: RET
// function get_skills ( un ) ; var pom3 , pom4 , pom5 , pom6 ; begin
17453: LD_INT 0
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
// pom3 := GetSkill ( un , skill_combat ) ;
17460: LD_ADDR_VAR 0 3
17464: PUSH
17465: LD_VAR 0 1
17469: PPUSH
17470: LD_INT 1
17472: PPUSH
17473: CALL_OW 259
17477: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_engineering ) ;
17478: LD_ADDR_VAR 0 4
17482: PUSH
17483: LD_VAR 0 1
17487: PPUSH
17488: LD_INT 2
17490: PPUSH
17491: CALL_OW 259
17495: ST_TO_ADDR
// pom5 := GetSkill ( un , skill_mechanical ) ;
17496: LD_ADDR_VAR 0 5
17500: PUSH
17501: LD_VAR 0 1
17505: PPUSH
17506: LD_INT 3
17508: PPUSH
17509: CALL_OW 259
17513: ST_TO_ADDR
// pom6 := GetSkill ( un , skill_scientistic ) ;
17514: LD_ADDR_VAR 0 6
17518: PUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: LD_INT 4
17526: PPUSH
17527: CALL_OW 259
17531: ST_TO_ADDR
// result := [ pom3 , pom4 , pom5 , pom6 ] end ;
17532: LD_ADDR_VAR 0 2
17536: PUSH
17537: LD_VAR 0 3
17541: PUSH
17542: LD_VAR 0 4
17546: PUSH
17547: LD_VAR 0 5
17551: PUSH
17552: LD_VAR 0 6
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: ST_TO_ADDR
17563: LD_VAR 0 2
17567: RET
// function uprav_cloveka ( un , clas , lev ) ; var pom1 ; begin
17568: LD_INT 0
17570: PPUSH
17571: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
17572: LD_INT 1
17574: PPUSH
17575: LD_VAR 0 2
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: LD_STRING 
17587: PPUSH
17588: CALL 17650 0 4
// ah = CreateHuman ;
17592: LD_ADDR_LOC 23
17596: PUSH
17597: CALL_OW 44
17601: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
17602: LD_ADDR_VAR 0 5
17606: PUSH
17607: LD_LOC 23
17611: PPUSH
17612: CALL 17453 0 1
17616: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
17617: LD_VAR 0 1
17621: PPUSH
17622: LD_LOC 23
17626: PPUSH
17627: CALL 17453 0 1
17631: PPUSH
17632: CALL 17361 0 2
// DestroyUnit ( ah ) ;
17636: LD_LOC 23
17640: PPUSH
17641: CALL_OW 65
// end ;
17645: LD_VAR 0 4
17649: RET
// function prepare_human ( sex , clas , level , name ) ; begin
17650: LD_INT 0
17652: PPUSH
// PrepareHuman ( sex , clas , level ) ;
17653: LD_VAR 0 1
17657: PPUSH
17658: LD_VAR 0 2
17662: PPUSH
17663: LD_VAR 0 3
17667: PPUSH
17668: CALL_OW 380
// hc_name := name ;
17672: LD_ADDR_OWVAR 26
17676: PUSH
17677: LD_VAR 0 4
17681: ST_TO_ADDR
// end ;
17682: LD_VAR 0 5
17686: RET
// export function create_americke_posily ; var pom ; begin
17687: LD_INT 0
17689: PPUSH
17690: PPUSH
// uc_side = Amici ;
17691: LD_ADDR_OWVAR 20
17695: PUSH
17696: LD_EXP 4
17700: ST_TO_ADDR
// uc_nation = nation_american ;
17701: LD_ADDR_OWVAR 21
17705: PUSH
17706: LD_INT 1
17708: ST_TO_ADDR
// pom = [ ] ;
17709: LD_ADDR_VAR 0 2
17713: PUSH
17714: EMPTY
17715: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17716: LD_ADDR_VAR 0 2
17720: PUSH
17721: LD_VAR 0 2
17725: PUSH
17726: CALL 16736 0 0
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: LD_EXP 13
17738: PUSH
17739: LD_OWVAR 67
17743: ARRAY
17744: PPUSH
17745: LD_STRING 
17747: PPUSH
17748: CALL 16771 0 4
17752: ADD
17753: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17754: LD_ADDR_VAR 0 2
17758: PUSH
17759: LD_VAR 0 2
17763: PUSH
17764: CALL 16736 0 0
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: LD_EXP 13
17776: PUSH
17777: LD_OWVAR 67
17781: ARRAY
17782: PPUSH
17783: LD_STRING 
17785: PPUSH
17786: CALL 16771 0 4
17790: ADD
17791: ST_TO_ADDR
// AMERICKE_POSILY1_LIST = pom ;
17792: LD_ADDR_EXP 51
17796: PUSH
17797: LD_VAR 0 2
17801: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: CALL 16736 0 0
17811: PPUSH
17812: LD_INT 1
17814: PPUSH
17815: LD_EXP 13
17819: PUSH
17820: LD_OWVAR 67
17824: ARRAY
17825: PPUSH
17826: LD_STRING 
17828: PPUSH
17829: CALL 16771 0 4
17833: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: LD_VAR 0 2
17843: PUSH
17844: CALL 16736 0 0
17848: PPUSH
17849: LD_INT 3
17851: PPUSH
17852: LD_EXP 13
17856: PUSH
17857: LD_OWVAR 67
17861: ARRAY
17862: PPUSH
17863: LD_STRING 
17865: PPUSH
17866: CALL 16771 0 4
17870: ADD
17871: ST_TO_ADDR
// if pom > 1 then
17872: LD_VAR 0 2
17876: PUSH
17877: LD_INT 1
17879: GREATER
17880: IFFALSE 17920
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
17882: LD_ADDR_VAR 0 2
17886: PUSH
17887: LD_VAR 0 2
17891: PUSH
17892: CALL 16736 0 0
17896: PPUSH
17897: LD_INT 4
17899: PPUSH
17900: LD_EXP 13
17904: PUSH
17905: LD_OWVAR 67
17909: ARRAY
17910: PPUSH
17911: LD_STRING 
17913: PPUSH
17914: CALL 16771 0 4
17918: ADD
17919: ST_TO_ADDR
// if pom > 2 then
17920: LD_VAR 0 2
17924: PUSH
17925: LD_INT 2
17927: GREATER
17928: IFFALSE 17968
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_VAR 0 2
17939: PUSH
17940: CALL 16736 0 0
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: LD_EXP 13
17952: PUSH
17953: LD_OWVAR 67
17957: ARRAY
17958: PPUSH
17959: LD_STRING 
17961: PPUSH
17962: CALL 16771 0 4
17966: ADD
17967: ST_TO_ADDR
// AMERICKE_POSILY2_LIST = pom ;
17968: LD_ADDR_EXP 52
17972: PUSH
17973: LD_VAR 0 2
17977: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17978: LD_ADDR_VAR 0 2
17982: PUSH
17983: CALL 16736 0 0
17987: PPUSH
17988: LD_INT 1
17990: PPUSH
17991: LD_EXP 13
17995: PUSH
17996: LD_OWVAR 67
18000: ARRAY
18001: PPUSH
18002: LD_STRING 
18004: PPUSH
18005: CALL 16771 0 4
18009: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18010: LD_ADDR_VAR 0 2
18014: PUSH
18015: LD_VAR 0 2
18019: PUSH
18020: CALL 16736 0 0
18024: PPUSH
18025: LD_INT 1
18027: PPUSH
18028: LD_EXP 13
18032: PUSH
18033: LD_OWVAR 67
18037: ARRAY
18038: PPUSH
18039: LD_STRING 
18041: PPUSH
18042: CALL 16771 0 4
18046: ADD
18047: ST_TO_ADDR
// if pom = 1 then
18048: LD_VAR 0 2
18052: PUSH
18053: LD_INT 1
18055: EQUAL
18056: IFFALSE 18096
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18058: LD_ADDR_VAR 0 2
18062: PUSH
18063: LD_VAR 0 2
18067: PUSH
18068: CALL 16736 0 0
18072: PPUSH
18073: LD_INT 3
18075: PPUSH
18076: LD_EXP 13
18080: PUSH
18081: LD_OWVAR 67
18085: ARRAY
18086: PPUSH
18087: LD_STRING 
18089: PPUSH
18090: CALL 16771 0 4
18094: ADD
18095: ST_TO_ADDR
// if pom = 2 then
18096: LD_VAR 0 2
18100: PUSH
18101: LD_INT 2
18103: EQUAL
18104: IFFALSE 18210
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18106: LD_ADDR_LOC 23
18110: PUSH
18111: CALL 16736 0 0
18115: PPUSH
18116: LD_INT 3
18118: PPUSH
18119: LD_EXP 13
18123: PUSH
18124: LD_OWVAR 67
18128: ARRAY
18129: PPUSH
18130: LD_STRING 
18132: PPUSH
18133: CALL 16771 0 4
18137: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
18138: LD_ADDR_OWVAR 37
18142: PUSH
18143: LD_INT 1
18145: ST_TO_ADDR
// vc_control = control_manual ;
18146: LD_ADDR_OWVAR 38
18150: PUSH
18151: LD_INT 1
18153: ST_TO_ADDR
// vc_engine = engine_solar ;
18154: LD_ADDR_OWVAR 39
18158: PUSH
18159: LD_INT 2
18161: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18162: LD_ADDR_OWVAR 40
18166: PUSH
18167: LD_INT 2
18169: ST_TO_ADDR
// av = CreateVehicle ;
18170: LD_ADDR_LOC 24
18174: PUSH
18175: CALL_OW 45
18179: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18180: LD_LOC 23
18184: PPUSH
18185: LD_LOC 24
18189: PPUSH
18190: CALL_OW 52
// pom = pom ^ av ;
18194: LD_ADDR_VAR 0 2
18198: PUSH
18199: LD_VAR 0 2
18203: PUSH
18204: LD_LOC 24
18208: ADD
18209: ST_TO_ADDR
// end ; if pom = 3 then
18210: LD_VAR 0 2
18214: PUSH
18215: LD_INT 3
18217: EQUAL
18218: IFFALSE 18324
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18220: LD_ADDR_LOC 23
18224: PUSH
18225: CALL 16736 0 0
18229: PPUSH
18230: LD_INT 3
18232: PPUSH
18233: LD_EXP 13
18237: PUSH
18238: LD_OWVAR 67
18242: ARRAY
18243: PPUSH
18244: LD_STRING 
18246: PPUSH
18247: CALL 16771 0 4
18251: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
18252: LD_ADDR_OWVAR 37
18256: PUSH
18257: LD_INT 2
18259: ST_TO_ADDR
// vc_control = control_manual ;
18260: LD_ADDR_OWVAR 38
18264: PUSH
18265: LD_INT 1
18267: ST_TO_ADDR
// vc_engine = engine_solar ;
18268: LD_ADDR_OWVAR 39
18272: PUSH
18273: LD_INT 2
18275: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
18276: LD_ADDR_OWVAR 40
18280: PUSH
18281: LD_INT 4
18283: ST_TO_ADDR
// av = CreateVehicle ;
18284: LD_ADDR_LOC 24
18288: PUSH
18289: CALL_OW 45
18293: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18294: LD_LOC 23
18298: PPUSH
18299: LD_LOC 24
18303: PPUSH
18304: CALL_OW 52
// pom = pom ^ av ;
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_VAR 0 2
18317: PUSH
18318: LD_LOC 24
18322: ADD
18323: ST_TO_ADDR
// end ; AMERICKE_POSILY3_LIST = pom ;
18324: LD_ADDR_EXP 53
18328: PUSH
18329: LD_VAR 0 2
18333: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18334: LD_ADDR_VAR 0 2
18338: PUSH
18339: CALL 16736 0 0
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: LD_EXP 13
18351: PUSH
18352: LD_OWVAR 67
18356: ARRAY
18357: PPUSH
18358: LD_STRING 
18360: PPUSH
18361: CALL 16771 0 4
18365: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18366: LD_ADDR_VAR 0 2
18370: PUSH
18371: LD_VAR 0 2
18375: PUSH
18376: CALL 16736 0 0
18380: PPUSH
18381: LD_INT 1
18383: PPUSH
18384: LD_EXP 13
18388: PUSH
18389: LD_OWVAR 67
18393: ARRAY
18394: PPUSH
18395: LD_STRING 
18397: PPUSH
18398: CALL 16771 0 4
18402: ADD
18403: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18404: LD_ADDR_VAR 0 2
18408: PUSH
18409: LD_VAR 0 2
18413: PUSH
18414: CALL 16736 0 0
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: LD_EXP 13
18426: PUSH
18427: LD_OWVAR 67
18431: ARRAY
18432: PUSH
18433: LD_INT 1
18435: MINUS
18436: PPUSH
18437: LD_STRING 
18439: PPUSH
18440: CALL 16771 0 4
18444: ADD
18445: ST_TO_ADDR
// AMERICKE_POSILY4_LIST = pom ;
18446: LD_ADDR_EXP 54
18450: PUSH
18451: LD_VAR 0 2
18455: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18456: LD_ADDR_VAR 0 2
18460: PUSH
18461: CALL 16736 0 0
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: LD_EXP 13
18473: PUSH
18474: LD_OWVAR 67
18478: ARRAY
18479: PPUSH
18480: LD_STRING 
18482: PPUSH
18483: CALL 16771 0 4
18487: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: CALL 16736 0 0
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: LD_EXP 13
18510: PUSH
18511: LD_OWVAR 67
18515: ARRAY
18516: PUSH
18517: LD_INT 1
18519: MINUS
18520: PPUSH
18521: LD_STRING 
18523: PPUSH
18524: CALL 16771 0 4
18528: ADD
18529: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: LD_VAR 0 2
18539: PUSH
18540: CALL 16736 0 0
18544: PPUSH
18545: LD_INT 1
18547: PPUSH
18548: LD_EXP 13
18552: PUSH
18553: LD_OWVAR 67
18557: ARRAY
18558: PUSH
18559: LD_INT 1
18561: MINUS
18562: PPUSH
18563: LD_STRING 
18565: PPUSH
18566: CALL 16771 0 4
18570: ADD
18571: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] - 1 ,  ) ;
18572: LD_ADDR_VAR 0 2
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: CALL 16736 0 0
18586: PPUSH
18587: LD_INT 4
18589: PPUSH
18590: LD_EXP 13
18594: PUSH
18595: LD_OWVAR 67
18599: ARRAY
18600: PUSH
18601: LD_INT 1
18603: MINUS
18604: PPUSH
18605: LD_STRING 
18607: PPUSH
18608: CALL 16771 0 4
18612: ADD
18613: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18614: LD_ADDR_LOC 23
18618: PUSH
18619: CALL 16736 0 0
18623: PPUSH
18624: LD_INT 3
18626: PPUSH
18627: LD_EXP 13
18631: PUSH
18632: LD_OWVAR 67
18636: ARRAY
18637: PPUSH
18638: LD_STRING 
18640: PPUSH
18641: CALL 16771 0 4
18645: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
18646: LD_ADDR_OWVAR 37
18650: PUSH
18651: LD_INT 3
18653: ST_TO_ADDR
// vc_control = control_manual ;
18654: LD_ADDR_OWVAR 38
18658: PUSH
18659: LD_INT 1
18661: ST_TO_ADDR
// vc_engine = engine_combustion ;
18662: LD_ADDR_OWVAR 39
18666: PUSH
18667: LD_INT 1
18669: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18670: LD_ADDR_OWVAR 40
18674: PUSH
18675: LD_INT 2
18677: ST_TO_ADDR
// av = CreateVehicle ;
18678: LD_ADDR_LOC 24
18682: PUSH
18683: CALL_OW 45
18687: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18688: LD_LOC 23
18692: PPUSH
18693: LD_LOC 24
18697: PPUSH
18698: CALL_OW 52
// pom = pom ^ av ;
18702: LD_ADDR_VAR 0 2
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: LD_LOC 24
18716: ADD
18717: ST_TO_ADDR
// AMERICKE_POSILY11_LIST = pom ;
18718: LD_ADDR_EXP 55
18722: PUSH
18723: LD_VAR 0 2
18727: ST_TO_ADDR
// end ;
18728: LD_VAR 0 1
18732: RET
// export function create_kecajici_amik ; var pom ; begin
18733: LD_INT 0
18735: PPUSH
18736: PPUSH
// uc_side = Amici ;
18737: LD_ADDR_OWVAR 20
18741: PUSH
18742: LD_EXP 4
18746: ST_TO_ADDR
// uc_nation = nation_american ;
18747: LD_ADDR_OWVAR 21
18751: PUSH
18752: LD_INT 1
18754: ST_TO_ADDR
// pom = get_human ( sex_male , class_soldier , 4 , Mike Damme ) ;
18755: LD_ADDR_VAR 0 2
18759: PUSH
18760: LD_INT 1
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: LD_INT 4
18768: PPUSH
18769: LD_STRING Mike Damme
18771: PPUSH
18772: CALL 16771 0 4
18776: ST_TO_ADDR
// result := pom ;
18777: LD_ADDR_VAR 0 1
18781: PUSH
18782: LD_VAR 0 2
18786: ST_TO_ADDR
// end ;
18787: LD_VAR 0 1
18791: RET
// export function create_grishko ; var pom ; begin
18792: LD_INT 0
18794: PPUSH
18795: PPUSH
// pom = grishko ;
18796: LD_ADDR_VAR 0 2
18800: PUSH
18801: LD_EXP 35
18805: ST_TO_ADDR
// if pom = 0 then
18806: LD_VAR 0 2
18810: PUSH
18811: LD_INT 0
18813: EQUAL
18814: IFFALSE 18838
// pom = get_human ( sex_male , class_soldier , 4 , Piotr Grishko ) ;
18816: LD_ADDR_VAR 0 2
18820: PUSH
18821: LD_INT 1
18823: PPUSH
18824: LD_INT 1
18826: PPUSH
18827: LD_INT 4
18829: PPUSH
18830: LD_STRING Piotr Grishko
18832: PPUSH
18833: CALL 16771 0 4
18837: ST_TO_ADDR
// if pom > 0 then
18838: LD_VAR 0 2
18842: PUSH
18843: LD_INT 0
18845: GREATER
18846: IFFALSE 18882
// begin SetSide ( pom [ 1 ] , You2 ) ;
18848: LD_VAR 0 2
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: PPUSH
18857: LD_EXP 2
18861: PPUSH
18862: CALL_OW 235
// result = pom [ 1 ] ;
18866: LD_ADDR_VAR 0 1
18870: PUSH
18871: LD_VAR 0 2
18875: PUSH
18876: LD_INT 1
18878: ARRAY
18879: ST_TO_ADDR
// end else
18880: GO 18889
// msg ( ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril ) ;
18882: LD_STRING ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril
18884: PPUSH
18885: CALL_OW 100
// end ;
18889: LD_VAR 0 1
18893: RET
// export function create_arabsky_utok ; var pom , i ; begin
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
18898: PPUSH
// pom = FilterUnitsInArea ( Ar_jedn , [ [ f_side , Arabi ] , [ f_class , class_apeman_kamikaze ] ] ) ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 9
18906: PPUSH
18907: LD_INT 22
18909: PUSH
18910: LD_EXP 5
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 25
18921: PUSH
18922: LD_INT 17
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 70
18937: ST_TO_ADDR
// ARABI_KAMIKADZE_LIST = pom ;
18938: LD_ADDR_EXP 60
18942: PUSH
18943: LD_VAR 0 2
18947: ST_TO_ADDR
// for i in pom do
18948: LD_ADDR_VAR 0 3
18952: PUSH
18953: LD_VAR 0 2
18957: PUSH
18958: FOR_IN
18959: IFFALSE 18972
// RemoveUnit ( i ) ;
18961: LD_VAR 0 3
18965: PPUSH
18966: CALL_OW 64
18970: GO 18958
18972: POP
18973: POP
// pom = [ ] ;
18974: LD_ADDR_VAR 0 2
18978: PUSH
18979: EMPTY
18980: ST_TO_ADDR
// uc_side = Arabi ;
18981: LD_ADDR_OWVAR 20
18985: PUSH
18986: LD_EXP 5
18990: ST_TO_ADDR
// uc_nation = nation_arabian ;
18991: LD_ADDR_OWVAR 21
18995: PUSH
18996: LD_INT 2
18998: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18999: LD_ADDR_LOC 23
19003: PUSH
19004: CALL 16736 0 0
19008: PPUSH
19009: LD_INT 3
19011: PPUSH
19012: LD_INT 9
19014: PPUSH
19015: LD_STRING 
19017: PPUSH
19018: CALL 16771 0 4
19022: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19023: LD_ADDR_OWVAR 37
19027: PUSH
19028: LD_INT 14
19030: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
19031: LD_ADDR_OWVAR 40
19035: PUSH
19036: LD_INT 26
19038: ST_TO_ADDR
// vc_control = control_manual ;
19039: LD_ADDR_OWVAR 38
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// vc_engine = engine_combustion ;
19047: LD_ADDR_OWVAR 39
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// av = CreateVehicle ;
19055: LD_ADDR_LOC 24
19059: PUSH
19060: CALL_OW 45
19064: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19065: LD_LOC 23
19069: PPUSH
19070: LD_LOC 24
19074: PPUSH
19075: CALL_OW 52
// pom = pom ^ av ;
19079: LD_ADDR_VAR 0 2
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: LD_LOC 24
19093: ADD
19094: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19095: LD_ADDR_LOC 23
19099: PUSH
19100: CALL 16736 0 0
19104: PPUSH
19105: LD_INT 3
19107: PPUSH
19108: LD_INT 9
19110: PPUSH
19111: LD_STRING 
19113: PPUSH
19114: CALL 16771 0 4
19118: ST_TO_ADDR
// av = CreateVehicle ;
19119: LD_ADDR_LOC 24
19123: PUSH
19124: CALL_OW 45
19128: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19129: LD_LOC 23
19133: PPUSH
19134: LD_LOC 24
19138: PPUSH
19139: CALL_OW 52
// pom = pom ^ av ;
19143: LD_ADDR_VAR 0 2
19147: PUSH
19148: LD_VAR 0 2
19152: PUSH
19153: LD_LOC 24
19157: ADD
19158: ST_TO_ADDR
// ARABI_FLAME_LIST = pom ;
19159: LD_ADDR_EXP 62
19163: PUSH
19164: LD_VAR 0 2
19168: ST_TO_ADDR
// pom = [ ] ;
19169: LD_ADDR_VAR 0 2
19173: PUSH
19174: EMPTY
19175: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19176: LD_ADDR_LOC 23
19180: PUSH
19181: CALL 16736 0 0
19185: PPUSH
19186: LD_INT 3
19188: PPUSH
19189: LD_INT 9
19191: PPUSH
19192: LD_STRING 
19194: PPUSH
19195: CALL 16771 0 4
19199: ST_TO_ADDR
// vc_weapon = ar_gun ;
19200: LD_ADDR_OWVAR 40
19204: PUSH
19205: LD_INT 27
19207: ST_TO_ADDR
// av = CreateVehicle ;
19208: LD_ADDR_LOC 24
19212: PUSH
19213: CALL_OW 45
19217: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19218: LD_LOC 23
19222: PPUSH
19223: LD_LOC 24
19227: PPUSH
19228: CALL_OW 52
// pom = av ;
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: LD_LOC 24
19241: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19242: LD_ADDR_LOC 23
19246: PUSH
19247: CALL 16736 0 0
19251: PPUSH
19252: LD_INT 3
19254: PPUSH
19255: LD_INT 9
19257: PPUSH
19258: LD_STRING 
19260: PPUSH
19261: CALL 16771 0 4
19265: ST_TO_ADDR
// av = CreateVehicle ;
19266: LD_ADDR_LOC 24
19270: PUSH
19271: CALL_OW 45
19275: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19276: LD_LOC 23
19280: PPUSH
19281: LD_LOC 24
19285: PPUSH
19286: CALL_OW 52
// pom = pom ^ av ;
19290: LD_ADDR_VAR 0 2
19294: PUSH
19295: LD_VAR 0 2
19299: PUSH
19300: LD_LOC 24
19304: ADD
19305: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19306: LD_ADDR_LOC 23
19310: PUSH
19311: CALL 16736 0 0
19315: PPUSH
19316: LD_INT 3
19318: PPUSH
19319: LD_INT 9
19321: PPUSH
19322: LD_STRING 
19324: PPUSH
19325: CALL 16771 0 4
19329: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
19330: LD_ADDR_OWVAR 40
19334: PUSH
19335: LD_INT 25
19337: ST_TO_ADDR
// av = CreateVehicle ;
19338: LD_ADDR_LOC 24
19342: PUSH
19343: CALL_OW 45
19347: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19348: LD_LOC 23
19352: PPUSH
19353: LD_LOC 24
19357: PPUSH
19358: CALL_OW 52
// pom = pom ^ av ;
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: LD_VAR 0 2
19371: PUSH
19372: LD_LOC 24
19376: ADD
19377: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19378: LD_ADDR_LOC 23
19382: PUSH
19383: CALL 16736 0 0
19387: PPUSH
19388: LD_INT 3
19390: PPUSH
19391: LD_INT 9
19393: PPUSH
19394: LD_STRING 
19396: PPUSH
19397: CALL 16771 0 4
19401: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19402: LD_ADDR_OWVAR 40
19406: PUSH
19407: LD_INT 28
19409: ST_TO_ADDR
// av = CreateVehicle ;
19410: LD_ADDR_LOC 24
19414: PUSH
19415: CALL_OW 45
19419: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19420: LD_LOC 23
19424: PPUSH
19425: LD_LOC 24
19429: PPUSH
19430: CALL_OW 52
// pom = pom ^ av ;
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: LD_VAR 0 2
19443: PUSH
19444: LD_LOC 24
19448: ADD
19449: ST_TO_ADDR
// ARABI_PRVNI_VLNA = pom ;
19450: LD_ADDR_EXP 61
19454: PUSH
19455: LD_VAR 0 2
19459: ST_TO_ADDR
// pom = [ ] ;
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: EMPTY
19466: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
19467: LD_ADDR_OWVAR 40
19471: PUSH
19472: LD_INT 29
19474: ST_TO_ADDR
// vc_control = control_apeman ;
19475: LD_ADDR_OWVAR 38
19479: PUSH
19480: LD_INT 5
19482: ST_TO_ADDR
// ah = CreateVehicle ;
19483: LD_ADDR_LOC 23
19487: PUSH
19488: CALL_OW 45
19492: ST_TO_ADDR
// pom = ah ;
19493: LD_ADDR_VAR 0 2
19497: PUSH
19498: LD_LOC 23
19502: ST_TO_ADDR
// pom = pom ^ CreateVehicle ;
19503: LD_ADDR_VAR 0 2
19507: PUSH
19508: LD_VAR 0 2
19512: PUSH
19513: CALL_OW 45
19517: ADD
19518: ST_TO_ADDR
// ARABI_SELF_AUTA = pom ;
19519: LD_ADDR_EXP 63
19523: PUSH
19524: LD_VAR 0 2
19528: ST_TO_ADDR
// pom = [ ] ;
19529: LD_ADDR_VAR 0 2
19533: PUSH
19534: EMPTY
19535: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 9 ,  ) ;
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: CALL 16736 0 0
19545: PPUSH
19546: LD_INT 1
19548: PPUSH
19549: LD_INT 9
19551: PPUSH
19552: LD_STRING 
19554: PPUSH
19555: CALL 16771 0 4
19559: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19560: LD_ADDR_VAR 0 2
19564: PUSH
19565: LD_VAR 0 2
19569: PUSH
19570: CALL 16736 0 0
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: LD_INT 9
19580: PPUSH
19581: LD_STRING 
19583: PPUSH
19584: CALL 16771 0 4
19588: ADD
19589: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19590: LD_ADDR_VAR 0 2
19594: PUSH
19595: LD_VAR 0 2
19599: PUSH
19600: CALL 16736 0 0
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: LD_INT 9
19610: PPUSH
19611: LD_STRING 
19613: PPUSH
19614: CALL 16771 0 4
19618: ADD
19619: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19620: LD_ADDR_VAR 0 2
19624: PUSH
19625: LD_VAR 0 2
19629: PUSH
19630: CALL 16736 0 0
19634: PPUSH
19635: LD_INT 1
19637: PPUSH
19638: LD_INT 9
19640: PPUSH
19641: LD_STRING 
19643: PPUSH
19644: CALL 16771 0 4
19648: ADD
19649: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19650: LD_ADDR_VAR 0 2
19654: PUSH
19655: LD_VAR 0 2
19659: PUSH
19660: CALL 16736 0 0
19664: PPUSH
19665: LD_INT 8
19667: PPUSH
19668: LD_INT 9
19670: PPUSH
19671: LD_STRING 
19673: PPUSH
19674: CALL 16771 0 4
19678: ADD
19679: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_VAR 0 2
19689: PUSH
19690: CALL 16736 0 0
19694: PPUSH
19695: LD_INT 8
19697: PPUSH
19698: LD_INT 9
19700: PPUSH
19701: LD_STRING 
19703: PPUSH
19704: CALL 16771 0 4
19708: ADD
19709: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19710: LD_ADDR_VAR 0 2
19714: PUSH
19715: LD_VAR 0 2
19719: PUSH
19720: CALL 16736 0 0
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: LD_INT 9
19730: PPUSH
19731: LD_STRING 
19733: PPUSH
19734: CALL 16771 0 4
19738: ADD
19739: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: LD_VAR 0 2
19749: PUSH
19750: CALL 16736 0 0
19754: PPUSH
19755: LD_INT 8
19757: PPUSH
19758: LD_INT 9
19760: PPUSH
19761: LD_STRING 
19763: PPUSH
19764: CALL 16771 0 4
19768: ADD
19769: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19770: LD_ADDR_VAR 0 2
19774: PUSH
19775: LD_VAR 0 2
19779: PUSH
19780: CALL 16736 0 0
19784: PPUSH
19785: LD_INT 8
19787: PPUSH
19788: LD_INT 9
19790: PPUSH
19791: LD_STRING 
19793: PPUSH
19794: CALL 16771 0 4
19798: ADD
19799: ST_TO_ADDR
// ARABI_VOJACI = pom ;
19800: LD_ADDR_EXP 64
19804: PUSH
19805: LD_VAR 0 2
19809: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19810: LD_ADDR_OWVAR 40
19814: PUSH
19815: LD_INT 28
19817: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19818: LD_ADDR_OWVAR 37
19822: PUSH
19823: LD_INT 14
19825: ST_TO_ADDR
// vc_control = control_manual ;
19826: LD_ADDR_OWVAR 38
19830: PUSH
19831: LD_INT 1
19833: ST_TO_ADDR
// vc_engine = engine_combustion ;
19834: LD_ADDR_OWVAR 39
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// av = CreateVehicle ;
19842: LD_ADDR_LOC 24
19846: PUSH
19847: CALL_OW 45
19851: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19852: LD_ADDR_LOC 23
19856: PUSH
19857: CALL 16736 0 0
19861: PPUSH
19862: LD_INT 3
19864: PPUSH
19865: LD_INT 9
19867: PPUSH
19868: LD_STRING 
19870: PPUSH
19871: CALL 16771 0 4
19875: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19876: LD_LOC 23
19880: PPUSH
19881: LD_LOC 24
19885: PPUSH
19886: CALL_OW 52
// pom = av ;
19890: LD_ADDR_VAR 0 2
19894: PUSH
19895: LD_LOC 24
19899: ST_TO_ADDR
// av = CreateVehicle ;
19900: LD_ADDR_LOC 24
19904: PUSH
19905: CALL_OW 45
19909: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19910: LD_ADDR_LOC 23
19914: PUSH
19915: CALL 16736 0 0
19919: PPUSH
19920: LD_INT 3
19922: PPUSH
19923: LD_INT 8
19925: PPUSH
19926: LD_STRING 
19928: PPUSH
19929: CALL 16771 0 4
19933: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19934: LD_LOC 23
19938: PPUSH
19939: LD_LOC 24
19943: PPUSH
19944: CALL_OW 52
// pom = pom ^ av ;
19948: LD_ADDR_VAR 0 2
19952: PUSH
19953: LD_VAR 0 2
19957: PUSH
19958: LD_LOC 24
19962: ADD
19963: ST_TO_ADDR
// av = CreateVehicle ;
19964: LD_ADDR_LOC 24
19968: PUSH
19969: CALL_OW 45
19973: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19974: LD_ADDR_LOC 23
19978: PUSH
19979: CALL 16736 0 0
19983: PPUSH
19984: LD_INT 3
19986: PPUSH
19987: LD_INT 8
19989: PPUSH
19990: LD_STRING 
19992: PPUSH
19993: CALL 16771 0 4
19997: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19998: LD_LOC 23
20002: PPUSH
20003: LD_LOC 24
20007: PPUSH
20008: CALL_OW 52
// pom = pom ^ av ;
20012: LD_ADDR_VAR 0 2
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: LD_LOC 24
20026: ADD
20027: ST_TO_ADDR
// ARABI_doraz = pom ;
20028: LD_ADDR_EXP 65
20032: PUSH
20033: LD_VAR 0 2
20037: ST_TO_ADDR
// end ;
20038: LD_VAR 0 1
20042: RET
// export function create_ruske_posily_na_omicron ; var pom ; begin
20043: LD_INT 0
20045: PPUSH
20046: PPUSH
// pom = [ ] ;
20047: LD_ADDR_VAR 0 2
20051: PUSH
20052: EMPTY
20053: ST_TO_ADDR
// uc_side = You2 ;
20054: LD_ADDR_OWVAR 20
20058: PUSH
20059: LD_EXP 2
20063: ST_TO_ADDR
// uc_nation = nation_russian ;
20064: LD_ADDR_OWVAR 21
20068: PUSH
20069: LD_INT 3
20071: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
20072: LD_ADDR_OWVAR 37
20076: PUSH
20077: LD_INT 23
20079: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
20080: LD_ADDR_OWVAR 40
20084: PUSH
20085: LD_INT 43
20087: ST_TO_ADDR
// vc_control = control_manual ;
20088: LD_ADDR_OWVAR 38
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// vc_engine = engine_combustion ;
20096: LD_ADDR_OWVAR 39
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20104: LD_ADDR_LOC 23
20108: PUSH
20109: CALL 16736 0 0
20113: PPUSH
20114: LD_INT 3
20116: PPUSH
20117: LD_EXP 20
20121: PUSH
20122: LD_OWVAR 67
20126: ARRAY
20127: PPUSH
20128: LD_STRING 
20130: PPUSH
20131: CALL 16771 0 4
20135: ST_TO_ADDR
// av = CreateVehicle ;
20136: LD_ADDR_LOC 24
20140: PUSH
20141: CALL_OW 45
20145: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20146: LD_LOC 23
20150: PPUSH
20151: LD_LOC 24
20155: PPUSH
20156: CALL_OW 52
// pom = pom ^ av ;
20160: LD_ADDR_VAR 0 2
20164: PUSH
20165: LD_VAR 0 2
20169: PUSH
20170: LD_LOC 24
20174: ADD
20175: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] + 1 ,  ) ;
20176: LD_ADDR_LOC 23
20180: PUSH
20181: CALL 16736 0 0
20185: PPUSH
20186: LD_INT 3
20188: PPUSH
20189: LD_EXP 20
20193: PUSH
20194: LD_OWVAR 67
20198: ARRAY
20199: PUSH
20200: LD_INT 1
20202: PLUS
20203: PPUSH
20204: LD_STRING 
20206: PPUSH
20207: CALL 16771 0 4
20211: ST_TO_ADDR
// av = CreateVehicle ;
20212: LD_ADDR_LOC 24
20216: PUSH
20217: CALL_OW 45
20221: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20222: LD_LOC 23
20226: PPUSH
20227: LD_LOC 24
20231: PPUSH
20232: CALL_OW 52
// pom = pom ^ av ;
20236: LD_ADDR_VAR 0 2
20240: PUSH
20241: LD_VAR 0 2
20245: PUSH
20246: LD_LOC 24
20250: ADD
20251: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20252: LD_ADDR_LOC 23
20256: PUSH
20257: CALL 16736 0 0
20261: PPUSH
20262: LD_INT 3
20264: PPUSH
20265: LD_EXP 20
20269: PUSH
20270: LD_OWVAR 67
20274: ARRAY
20275: PPUSH
20276: LD_STRING 
20278: PPUSH
20279: CALL 16771 0 4
20283: ST_TO_ADDR
// vc_weapon = ru_gun ;
20284: LD_ADDR_OWVAR 40
20288: PUSH
20289: LD_INT 44
20291: ST_TO_ADDR
// av = CreateVehicle ;
20292: LD_ADDR_LOC 24
20296: PUSH
20297: CALL_OW 45
20301: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20302: LD_LOC 23
20306: PPUSH
20307: LD_LOC 24
20311: PPUSH
20312: CALL_OW 52
// pom = pom ^ av ;
20316: LD_ADDR_VAR 0 2
20320: PUSH
20321: LD_VAR 0 2
20325: PUSH
20326: LD_LOC 24
20330: ADD
20331: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] - 1 ,  ) ;
20332: LD_ADDR_LOC 23
20336: PUSH
20337: CALL 16736 0 0
20341: PPUSH
20342: LD_INT 3
20344: PPUSH
20345: LD_EXP 20
20349: PUSH
20350: LD_OWVAR 67
20354: ARRAY
20355: PUSH
20356: LD_INT 1
20358: MINUS
20359: PPUSH
20360: LD_STRING 
20362: PPUSH
20363: CALL 16771 0 4
20367: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
20368: LD_ADDR_OWVAR 37
20372: PUSH
20373: LD_INT 22
20375: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
20376: LD_ADDR_OWVAR 40
20380: PUSH
20381: LD_INT 42
20383: ST_TO_ADDR
// av = CreateVehicle ;
20384: LD_ADDR_LOC 24
20388: PUSH
20389: CALL_OW 45
20393: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20394: LD_LOC 23
20398: PPUSH
20399: LD_LOC 24
20403: PPUSH
20404: CALL_OW 52
// pom = pom ^ av ;
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_VAR 0 2
20417: PUSH
20418: LD_LOC 24
20422: ADD
20423: ST_TO_ADDR
// RUSKE_POSILY_NA_OMICRON_LIST = pom ;
20424: LD_ADDR_EXP 56
20428: PUSH
20429: LD_VAR 0 2
20433: ST_TO_ADDR
// pom = [ ] ;
20434: LD_ADDR_VAR 0 2
20438: PUSH
20439: EMPTY
20440: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20441: LD_ADDR_LOC 23
20445: PUSH
20446: CALL 16736 0 0
20450: PPUSH
20451: LD_INT 3
20453: PPUSH
20454: LD_EXP 20
20458: PUSH
20459: LD_OWVAR 67
20463: ARRAY
20464: PPUSH
20465: LD_STRING 
20467: PPUSH
20468: CALL 16771 0 4
20472: ST_TO_ADDR
// pom = pom ^ ah ;
20473: LD_ADDR_VAR 0 2
20477: PUSH
20478: LD_VAR 0 2
20482: PUSH
20483: LD_LOC 23
20487: ADD
20488: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20489: LD_ADDR_LOC 23
20493: PUSH
20494: CALL 16736 0 0
20498: PPUSH
20499: LD_INT 3
20501: PPUSH
20502: LD_EXP 20
20506: PUSH
20507: LD_OWVAR 67
20511: ARRAY
20512: PPUSH
20513: LD_STRING 
20515: PPUSH
20516: CALL 16771 0 4
20520: ST_TO_ADDR
// pom = pom ^ ah ;
20521: LD_ADDR_VAR 0 2
20525: PUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_LOC 23
20535: ADD
20536: ST_TO_ADDR
// RUSKE_POSILY_RIDICI_LIST = pom ;
20537: LD_ADDR_EXP 57
20541: PUSH
20542: LD_VAR 0 2
20546: ST_TO_ADDR
// end ;
20547: LD_VAR 0 1
20551: RET
// export function create_dalsi_ridici ( auta ) ; var i , pom ; var poc ; begin
20552: LD_INT 0
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
// uc_side = You2 ;
20558: LD_ADDR_OWVAR 20
20562: PUSH
20563: LD_EXP 2
20567: ST_TO_ADDR
// uc_nation = nation_russian ;
20568: LD_ADDR_OWVAR 21
20572: PUSH
20573: LD_INT 3
20575: ST_TO_ADDR
// pom = [ ] ;
20576: LD_ADDR_VAR 0 4
20580: PUSH
20581: EMPTY
20582: ST_TO_ADDR
// poc = 0 ;
20583: LD_ADDR_VAR 0 5
20587: PUSH
20588: LD_INT 0
20590: ST_TO_ADDR
// for i in auta do
20591: LD_ADDR_VAR 0 3
20595: PUSH
20596: LD_VAR 0 1
20600: PUSH
20601: FOR_IN
20602: IFFALSE 20668
// begin poc = poc + 1 ;
20604: LD_ADDR_VAR 0 5
20608: PUSH
20609: LD_VAR 0 5
20613: PUSH
20614: LD_INT 1
20616: PLUS
20617: ST_TO_ADDR
// if poc < 3 then
20618: LD_VAR 0 5
20622: PUSH
20623: LD_INT 3
20625: LESS
20626: IFFALSE 20666
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20628: LD_ADDR_VAR 0 4
20632: PUSH
20633: LD_VAR 0 4
20637: PUSH
20638: CALL 16736 0 0
20642: PPUSH
20643: LD_INT 3
20645: PPUSH
20646: LD_EXP 20
20650: PUSH
20651: LD_OWVAR 67
20655: ARRAY
20656: PPUSH
20657: LD_STRING 
20659: PPUSH
20660: CALL 16771 0 4
20664: ADD
20665: ST_TO_ADDR
// end ;
20666: GO 20601
20668: POP
20669: POP
// result := pom ;
20670: LD_ADDR_VAR 0 2
20674: PUSH
20675: LD_VAR 0 4
20679: ST_TO_ADDR
// end ;
20680: LD_VAR 0 2
20684: RET
// export function create_am_jednotky ; begin
20685: LD_INT 0
20687: PPUSH
// SetSide ( kur , You2 ) ;
20688: LD_EXP 27
20692: PPUSH
20693: LD_EXP 2
20697: PPUSH
20698: CALL_OW 235
// PlaceUnitXY ( kur , 149 , 79 , false ) ;
20702: LD_EXP 27
20706: PPUSH
20707: LD_INT 149
20709: PPUSH
20710: LD_INT 79
20712: PPUSH
20713: LD_INT 0
20715: PPUSH
20716: CALL_OW 48
// if BELKOV_SAVED then
20720: LD_EXP 24
20724: IFFALSE 20770
// begin SetSide ( bel , You2 ) ;
20726: LD_EXP 32
20730: PPUSH
20731: LD_EXP 2
20735: PPUSH
20736: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
20740: LD_EXP 32
20744: PPUSH
20745: LD_INT 1
20747: PPUSH
20748: CALL_OW 336
// PlaceUnitXY ( bel , 141 , 80 , false ) ;
20752: LD_EXP 32
20756: PPUSH
20757: LD_INT 141
20759: PPUSH
20760: LD_INT 80
20762: PPUSH
20763: LD_INT 0
20765: PPUSH
20766: CALL_OW 48
// end ; if kov <> 0 then
20770: LD_EXP 30
20774: PUSH
20775: LD_INT 0
20777: NONEQUAL
20778: IFFALSE 20824
// begin SetSide ( kov , You ) ;
20780: LD_EXP 30
20784: PPUSH
20785: LD_EXP 1
20789: PPUSH
20790: CALL_OW 235
// SetClass ( kov , class_soldier ) ;
20794: LD_EXP 30
20798: PPUSH
20799: LD_INT 1
20801: PPUSH
20802: CALL_OW 336
// PlaceUnitXY ( kov , 142 , 80 , false ) ;
20806: LD_EXP 30
20810: PPUSH
20811: LD_INT 142
20813: PPUSH
20814: LD_INT 80
20816: PPUSH
20817: LD_INT 0
20819: PPUSH
20820: CALL_OW 48
// end ; SetClass ( bur , class_mechanic ) ;
20824: LD_EXP 29
20828: PPUSH
20829: LD_INT 3
20831: PPUSH
20832: CALL_OW 336
// SetSide ( bur , You ) ;
20836: LD_EXP 29
20840: PPUSH
20841: LD_EXP 1
20845: PPUSH
20846: CALL_OW 235
// PlaceUnitXY ( bur , 144 , 80 , false ) ;
20850: LD_EXP 29
20854: PPUSH
20855: LD_INT 144
20857: PPUSH
20858: LD_INT 80
20860: PPUSH
20861: LD_INT 0
20863: PPUSH
20864: CALL_OW 48
// if gny <> 0 then
20868: LD_EXP 31
20872: PUSH
20873: LD_INT 0
20875: NONEQUAL
20876: IFFALSE 20934
// begin SetClass ( gny , class_soldier ) ;
20878: LD_EXP 31
20882: PPUSH
20883: LD_INT 1
20885: PPUSH
20886: CALL_OW 336
// SetSide ( gny , You ) ;
20890: LD_EXP 31
20894: PPUSH
20895: LD_EXP 1
20899: PPUSH
20900: CALL_OW 235
// SetClass ( gny , class_mechanic ) ;
20904: LD_EXP 31
20908: PPUSH
20909: LD_INT 3
20911: PPUSH
20912: CALL_OW 336
// PlaceUnitXY ( gny , 142 , 79 , false ) ;
20916: LD_EXP 31
20920: PPUSH
20921: LD_INT 142
20923: PPUSH
20924: LD_INT 79
20926: PPUSH
20927: LD_INT 0
20929: PPUSH
20930: CALL_OW 48
// end ; SetSide ( pop , You2 ) ;
20934: LD_EXP 28
20938: PPUSH
20939: LD_EXP 2
20943: PPUSH
20944: CALL_OW 235
// PlaceUnitXY ( pop , 136 , 79 , false ) ;
20948: LD_EXP 28
20952: PPUSH
20953: LD_INT 136
20955: PPUSH
20956: LD_INT 79
20958: PPUSH
20959: LD_INT 0
20961: PPUSH
20962: CALL_OW 48
// end ;
20966: LD_VAR 0 1
20970: RET
// export function nacti_osobu ( ident ) ; begin
20971: LD_INT 0
20973: PPUSH
// if CheckCharacterSet ( ident ) then
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL_OW 29
20983: IFFALSE 21002
// result := CreateCharacter ( ident ) else
20985: LD_ADDR_VAR 0 2
20989: PUSH
20990: LD_VAR 0 1
20994: PPUSH
20995: CALL_OW 34
20999: ST_TO_ADDR
21000: GO 21010
// result := 0 ;
21002: LD_ADDR_VAR 0 2
21006: PUSH
21007: LD_INT 0
21009: ST_TO_ADDR
// end ;
21010: LD_VAR 0 2
21014: RET
// export function create_arabi_komanda ; var pom ; begin
21015: LD_INT 0
21017: PPUSH
21018: PPUSH
// uc_side = Arabi ;
21019: LD_ADDR_OWVAR 20
21023: PUSH
21024: LD_EXP 5
21028: ST_TO_ADDR
// uc_nation = nation_arabian ;
21029: LD_ADDR_OWVAR 21
21033: PUSH
21034: LD_INT 2
21036: ST_TO_ADDR
// pom = [ ] ;
21037: LD_ADDR_VAR 0 2
21041: PUSH
21042: EMPTY
21043: ST_TO_ADDR
// pom = get_human ( sex_female , class_soldier , 8 ,  ) ;
21044: LD_ADDR_VAR 0 2
21048: PUSH
21049: LD_INT 2
21051: PPUSH
21052: LD_INT 1
21054: PPUSH
21055: LD_INT 8
21057: PPUSH
21058: LD_STRING 
21060: PPUSH
21061: CALL 16771 0 4
21065: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21066: LD_ADDR_VAR 0 2
21070: PUSH
21071: LD_VAR 0 2
21075: PUSH
21076: CALL 16736 0 0
21080: PPUSH
21081: LD_INT 1
21083: PPUSH
21084: LD_INT 6
21086: PPUSH
21087: LD_STRING 
21089: PPUSH
21090: CALL 16771 0 4
21094: ADD
21095: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21096: LD_ADDR_VAR 0 2
21100: PUSH
21101: LD_VAR 0 2
21105: PUSH
21106: CALL 16736 0 0
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: LD_INT 6
21116: PPUSH
21117: LD_STRING 
21119: PPUSH
21120: CALL 16771 0 4
21124: ADD
21125: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21126: LD_ADDR_VAR 0 2
21130: PUSH
21131: LD_VAR 0 2
21135: PUSH
21136: CALL 16736 0 0
21140: PPUSH
21141: LD_INT 1
21143: PPUSH
21144: LD_INT 6
21146: PPUSH
21147: LD_STRING 
21149: PPUSH
21150: CALL 16771 0 4
21154: ADD
21155: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21156: LD_ADDR_LOC 23
21160: PUSH
21161: CALL 16736 0 0
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: LD_INT 6
21171: PPUSH
21172: LD_STRING 
21174: PPUSH
21175: CALL 16771 0 4
21179: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
21180: LD_ADDR_OWVAR 40
21184: PUSH
21185: LD_INT 25
21187: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21188: LD_ADDR_OWVAR 37
21192: PUSH
21193: LD_INT 13
21195: ST_TO_ADDR
// vc_control = control_manual ;
21196: LD_ADDR_OWVAR 38
21200: PUSH
21201: LD_INT 1
21203: ST_TO_ADDR
// vc_engine = engine_solar ;
21204: LD_ADDR_OWVAR 39
21208: PUSH
21209: LD_INT 2
21211: ST_TO_ADDR
// av = CreateVehicle ;
21212: LD_ADDR_LOC 24
21216: PUSH
21217: CALL_OW 45
21221: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21222: LD_LOC 23
21226: PPUSH
21227: LD_LOC 24
21231: PPUSH
21232: CALL_OW 52
// pom = pom ^ av ;
21236: LD_ADDR_VAR 0 2
21240: PUSH
21241: LD_VAR 0 2
21245: PUSH
21246: LD_LOC 24
21250: ADD
21251: ST_TO_ADDR
// vc_weapon = ar_gun ;
21252: LD_ADDR_OWVAR 40
21256: PUSH
21257: LD_INT 27
21259: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21260: LD_ADDR_OWVAR 37
21264: PUSH
21265: LD_INT 14
21267: ST_TO_ADDR
// vc_control = control_apeman ;
21268: LD_ADDR_OWVAR 38
21272: PUSH
21273: LD_INT 5
21275: ST_TO_ADDR
// vc_engine = engine_combustion ;
21276: LD_ADDR_OWVAR 39
21280: PUSH
21281: LD_INT 1
21283: ST_TO_ADDR
// av = CreateVehicle ;
21284: LD_ADDR_LOC 24
21288: PUSH
21289: CALL_OW 45
21293: ST_TO_ADDR
// pom = pom ^ av ;
21294: LD_ADDR_VAR 0 2
21298: PUSH
21299: LD_VAR 0 2
21303: PUSH
21304: LD_LOC 24
21308: ADD
21309: ST_TO_ADDR
// vc_weapon = ar_gun ;
21310: LD_ADDR_OWVAR 40
21314: PUSH
21315: LD_INT 27
21317: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21318: LD_ADDR_OWVAR 37
21322: PUSH
21323: LD_INT 14
21325: ST_TO_ADDR
// vc_control = control_apeman ;
21326: LD_ADDR_OWVAR 38
21330: PUSH
21331: LD_INT 5
21333: ST_TO_ADDR
// vc_engine = engine_combustion ;
21334: LD_ADDR_OWVAR 39
21338: PUSH
21339: LD_INT 1
21341: ST_TO_ADDR
// av = CreateVehicle ;
21342: LD_ADDR_LOC 24
21346: PUSH
21347: CALL_OW 45
21351: ST_TO_ADDR
// pom = pom ^ av ;
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_VAR 0 2
21361: PUSH
21362: LD_LOC 24
21366: ADD
21367: ST_TO_ADDR
// Arabi_komanda1 = pom ;
21368: LD_ADDR_EXP 67
21372: PUSH
21373: LD_VAR 0 2
21377: ST_TO_ADDR
// Arabi_komanda2 = pom ;
21378: LD_ADDR_EXP 68
21382: PUSH
21383: LD_VAR 0 2
21387: ST_TO_ADDR
// vc_weapon = ar_gun ;
21388: LD_ADDR_OWVAR 40
21392: PUSH
21393: LD_INT 27
21395: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21396: LD_ADDR_OWVAR 37
21400: PUSH
21401: LD_INT 14
21403: ST_TO_ADDR
// vc_control = control_apeman ;
21404: LD_ADDR_OWVAR 38
21408: PUSH
21409: LD_INT 5
21411: ST_TO_ADDR
// vc_engine = engine_combustion ;
21412: LD_ADDR_OWVAR 39
21416: PUSH
21417: LD_INT 1
21419: ST_TO_ADDR
// av = CreateVehicle ;
21420: LD_ADDR_LOC 24
21424: PUSH
21425: CALL_OW 45
21429: ST_TO_ADDR
// pom = pom ^ av ;
21430: LD_ADDR_VAR 0 2
21434: PUSH
21435: LD_VAR 0 2
21439: PUSH
21440: LD_LOC 24
21444: ADD
21445: ST_TO_ADDR
// av = CreateVehicle ;
21446: LD_ADDR_LOC 24
21450: PUSH
21451: CALL_OW 45
21455: ST_TO_ADDR
// pom = pom ^ av ;
21456: LD_ADDR_VAR 0 2
21460: PUSH
21461: LD_VAR 0 2
21465: PUSH
21466: LD_LOC 24
21470: ADD
21471: ST_TO_ADDR
// vc_weapon = ar_gun ;
21472: LD_ADDR_OWVAR 40
21476: PUSH
21477: LD_INT 27
21479: ST_TO_ADDR
// av = CreateVehicle ;
21480: LD_ADDR_LOC 24
21484: PUSH
21485: CALL_OW 45
21489: ST_TO_ADDR
// pom = pom ^ av ;
21490: LD_ADDR_VAR 0 2
21494: PUSH
21495: LD_VAR 0 2
21499: PUSH
21500: LD_LOC 24
21504: ADD
21505: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21506: LD_ADDR_VAR 0 2
21510: PUSH
21511: LD_VAR 0 2
21515: PUSH
21516: CALL 16736 0 0
21520: PPUSH
21521: LD_INT 1
21523: PPUSH
21524: LD_INT 6
21526: PPUSH
21527: LD_STRING 
21529: PPUSH
21530: CALL 16771 0 4
21534: ADD
21535: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21536: LD_ADDR_VAR 0 2
21540: PUSH
21541: LD_VAR 0 2
21545: PUSH
21546: CALL 16736 0 0
21550: PPUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_INT 6
21556: PPUSH
21557: LD_STRING 
21559: PPUSH
21560: CALL 16771 0 4
21564: ADD
21565: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21566: LD_ADDR_LOC 23
21570: PUSH
21571: CALL 16736 0 0
21575: PPUSH
21576: LD_INT 3
21578: PPUSH
21579: LD_INT 6
21581: PPUSH
21582: LD_STRING 
21584: PPUSH
21585: CALL 16771 0 4
21589: ST_TO_ADDR
// vc_weapon = ar_gun ;
21590: LD_ADDR_OWVAR 40
21594: PUSH
21595: LD_INT 27
21597: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21598: LD_ADDR_OWVAR 37
21602: PUSH
21603: LD_INT 13
21605: ST_TO_ADDR
// vc_control = control_manual ;
21606: LD_ADDR_OWVAR 38
21610: PUSH
21611: LD_INT 1
21613: ST_TO_ADDR
// vc_engine = engine_siberite ;
21614: LD_ADDR_OWVAR 39
21618: PUSH
21619: LD_INT 3
21621: ST_TO_ADDR
// av = CreateVehicle ;
21622: LD_ADDR_LOC 24
21626: PUSH
21627: CALL_OW 45
21631: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21632: LD_LOC 23
21636: PPUSH
21637: LD_LOC 24
21641: PPUSH
21642: CALL_OW 52
// pom = pom ^ av ;
21646: LD_ADDR_VAR 0 2
21650: PUSH
21651: LD_VAR 0 2
21655: PUSH
21656: LD_LOC 24
21660: ADD
21661: ST_TO_ADDR
// Arabi_komanda3 = pom ;
21662: LD_ADDR_EXP 69
21666: PUSH
21667: LD_VAR 0 2
21671: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 8 ,  ) ;
21672: LD_ADDR_VAR 0 2
21676: PUSH
21677: CALL 16736 0 0
21681: PPUSH
21682: LD_INT 1
21684: PPUSH
21685: LD_INT 8
21687: PPUSH
21688: LD_STRING 
21690: PPUSH
21691: CALL 16771 0 4
21695: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_VAR 0 2
21705: PUSH
21706: CALL 16736 0 0
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: LD_INT 6
21716: PPUSH
21717: LD_STRING 
21719: PPUSH
21720: CALL 16771 0 4
21724: ADD
21725: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21726: LD_ADDR_VAR 0 2
21730: PUSH
21731: LD_VAR 0 2
21735: PUSH
21736: CALL 16736 0 0
21740: PPUSH
21741: LD_INT 1
21743: PPUSH
21744: LD_INT 6
21746: PPUSH
21747: LD_STRING 
21749: PPUSH
21750: CALL 16771 0 4
21754: ADD
21755: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21756: LD_ADDR_VAR 0 2
21760: PUSH
21761: LD_VAR 0 2
21765: PUSH
21766: CALL 16736 0 0
21770: PPUSH
21771: LD_INT 8
21773: PPUSH
21774: LD_INT 6
21776: PPUSH
21777: LD_STRING 
21779: PPUSH
21780: CALL 16771 0 4
21784: ADD
21785: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_VAR 0 2
21795: PUSH
21796: CALL 16736 0 0
21800: PPUSH
21801: LD_INT 8
21803: PPUSH
21804: LD_INT 6
21806: PPUSH
21807: LD_STRING 
21809: PPUSH
21810: CALL 16771 0 4
21814: ADD
21815: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , 6 ,  ) ;
21816: LD_ADDR_VAR 0 2
21820: PUSH
21821: LD_VAR 0 2
21825: PUSH
21826: CALL 16736 0 0
21830: PPUSH
21831: LD_INT 4
21833: PPUSH
21834: LD_INT 6
21836: PPUSH
21837: LD_STRING 
21839: PPUSH
21840: CALL 16771 0 4
21844: ADD
21845: ST_TO_ADDR
// Arabi_komanda4 = pom ;
21846: LD_ADDR_EXP 70
21850: PUSH
21851: LD_VAR 0 2
21855: ST_TO_ADDR
// end ;
21856: LD_VAR 0 1
21860: RET
// export function create_ru_posily_ma_utek ; var pom ; begin
21861: LD_INT 0
21863: PPUSH
21864: PPUSH
// uc_side = You2 ;
21865: LD_ADDR_OWVAR 20
21869: PUSH
21870: LD_EXP 2
21874: ST_TO_ADDR
// uc_nation = nation_russian ;
21875: LD_ADDR_OWVAR 21
21879: PUSH
21880: LD_INT 3
21882: ST_TO_ADDR
// pom = [ ] ;
21883: LD_ADDR_VAR 0 2
21887: PUSH
21888: EMPTY
21889: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21890: LD_ADDR_LOC 23
21894: PUSH
21895: CALL 16736 0 0
21899: PPUSH
21900: LD_INT 3
21902: PPUSH
21903: LD_INT 3
21905: PPUSH
21906: LD_STRING 
21908: PPUSH
21909: CALL 16771 0 4
21913: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
21914: LD_ADDR_OWVAR 40
21918: PUSH
21919: LD_INT 42
21921: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
21922: LD_ADDR_OWVAR 37
21926: PUSH
21927: LD_INT 23
21929: ST_TO_ADDR
// vc_control = control_manual ;
21930: LD_ADDR_OWVAR 38
21934: PUSH
21935: LD_INT 1
21937: ST_TO_ADDR
// vc_engine = engine_combustion ;
21938: LD_ADDR_OWVAR 39
21942: PUSH
21943: LD_INT 1
21945: ST_TO_ADDR
// av = CreateVehicle ;
21946: LD_ADDR_LOC 24
21950: PUSH
21951: CALL_OW 45
21955: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21956: LD_LOC 23
21960: PPUSH
21961: LD_LOC 24
21965: PPUSH
21966: CALL_OW 52
// pom = pom ^ av ;
21970: LD_ADDR_VAR 0 2
21974: PUSH
21975: LD_VAR 0 2
21979: PUSH
21980: LD_LOC 24
21984: ADD
21985: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21986: LD_ADDR_LOC 23
21990: PUSH
21991: CALL 16736 0 0
21995: PPUSH
21996: LD_INT 3
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: LD_STRING 
22004: PPUSH
22005: CALL 16771 0 4
22009: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22010: LD_ADDR_OWVAR 37
22014: PUSH
22015: LD_INT 21
22017: ST_TO_ADDR
// av = CreateVehicle ;
22018: LD_ADDR_LOC 24
22022: PUSH
22023: CALL_OW 45
22027: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22028: LD_LOC 23
22032: PPUSH
22033: LD_LOC 24
22037: PPUSH
22038: CALL_OW 52
// pom = pom ^ av ;
22042: LD_ADDR_VAR 0 2
22046: PUSH
22047: LD_VAR 0 2
22051: PUSH
22052: LD_LOC 24
22056: ADD
22057: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22058: LD_ADDR_VAR 0 2
22062: PUSH
22063: LD_VAR 0 2
22067: PUSH
22068: CALL 16736 0 0
22072: PPUSH
22073: LD_INT 1
22075: PPUSH
22076: LD_INT 3
22078: PPUSH
22079: LD_STRING 
22081: PPUSH
22082: CALL 16771 0 4
22086: ADD
22087: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22088: LD_ADDR_VAR 0 2
22092: PUSH
22093: LD_VAR 0 2
22097: PUSH
22098: CALL 16736 0 0
22102: PPUSH
22103: LD_INT 1
22105: PPUSH
22106: LD_INT 3
22108: PPUSH
22109: LD_STRING 
22111: PPUSH
22112: CALL 16771 0 4
22116: ADD
22117: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22118: LD_ADDR_VAR 0 2
22122: PUSH
22123: LD_VAR 0 2
22127: PUSH
22128: CALL 16736 0 0
22132: PPUSH
22133: LD_INT 1
22135: PPUSH
22136: LD_INT 3
22138: PPUSH
22139: LD_STRING 
22141: PPUSH
22142: CALL 16771 0 4
22146: ADD
22147: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22148: LD_ADDR_VAR 0 2
22152: PUSH
22153: LD_VAR 0 2
22157: PUSH
22158: CALL 16736 0 0
22162: PPUSH
22163: LD_INT 3
22165: PPUSH
22166: LD_INT 3
22168: PPUSH
22169: LD_STRING 
22171: PPUSH
22172: CALL 16771 0 4
22176: ADD
22177: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22178: LD_ADDR_VAR 0 2
22182: PUSH
22183: LD_VAR 0 2
22187: PUSH
22188: CALL 16736 0 0
22192: PPUSH
22193: LD_INT 3
22195: PPUSH
22196: LD_INT 3
22198: PPUSH
22199: LD_STRING 
22201: PPUSH
22202: CALL 16771 0 4
22206: ADD
22207: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22208: LD_ADDR_VAR 0 2
22212: PUSH
22213: LD_VAR 0 2
22217: PUSH
22218: CALL 16736 0 0
22222: PPUSH
22223: LD_INT 3
22225: PPUSH
22226: LD_INT 3
22228: PPUSH
22229: LD_STRING 
22231: PPUSH
22232: CALL 16771 0 4
22236: ADD
22237: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_VAR 0 2
22247: PUSH
22248: CALL 16736 0 0
22252: PPUSH
22253: LD_INT 2
22255: PPUSH
22256: LD_INT 3
22258: PPUSH
22259: LD_STRING 
22261: PPUSH
22262: CALL 16771 0 4
22266: ADD
22267: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22268: LD_ADDR_VAR 0 2
22272: PUSH
22273: LD_VAR 0 2
22277: PUSH
22278: CALL 16736 0 0
22282: PPUSH
22283: LD_INT 2
22285: PPUSH
22286: LD_INT 3
22288: PPUSH
22289: LD_STRING 
22291: PPUSH
22292: CALL 16771 0 4
22296: ADD
22297: ST_TO_ADDR
// RU_posily_na_utek = pom ;
22298: LD_ADDR_EXP 58
22302: PUSH
22303: LD_VAR 0 2
22307: ST_TO_ADDR
// end ;
22308: LD_VAR 0 1
22312: RET
// export function create_arabi_na_posily_kirovu ; var pom ; begin
22313: LD_INT 0
22315: PPUSH
22316: PPUSH
// pom = [ ] ;
22317: LD_ADDR_VAR 0 2
22321: PUSH
22322: EMPTY
22323: ST_TO_ADDR
// uc_side = Arabi ;
22324: LD_ADDR_OWVAR 20
22328: PUSH
22329: LD_EXP 5
22333: ST_TO_ADDR
// uc_nation = nation_arabian ;
22334: LD_ADDR_OWVAR 21
22338: PUSH
22339: LD_INT 2
22341: ST_TO_ADDR
// vc_weapon = ar_gun ;
22342: LD_ADDR_OWVAR 40
22346: PUSH
22347: LD_INT 27
22349: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
22350: LD_ADDR_OWVAR 37
22354: PUSH
22355: LD_INT 14
22357: ST_TO_ADDR
// vc_control = control_apeman ;
22358: LD_ADDR_OWVAR 38
22362: PUSH
22363: LD_INT 5
22365: ST_TO_ADDR
// vc_engine = engine_combustion ;
22366: LD_ADDR_OWVAR 39
22370: PUSH
22371: LD_INT 1
22373: ST_TO_ADDR
// av = CreateVehicle ;
22374: LD_ADDR_LOC 24
22378: PUSH
22379: CALL_OW 45
22383: ST_TO_ADDR
// pom = pom ^ av ;
22384: LD_ADDR_VAR 0 2
22388: PUSH
22389: LD_VAR 0 2
22393: PUSH
22394: LD_LOC 24
22398: ADD
22399: ST_TO_ADDR
// av = CreateVehicle ;
22400: LD_ADDR_LOC 24
22404: PUSH
22405: CALL_OW 45
22409: ST_TO_ADDR
// pom = pom ^ av ;
22410: LD_ADDR_VAR 0 2
22414: PUSH
22415: LD_VAR 0 2
22419: PUSH
22420: LD_LOC 24
22424: ADD
22425: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22426: LD_ADDR_LOC 23
22430: PUSH
22431: CALL 16736 0 0
22435: PPUSH
22436: LD_INT 3
22438: PPUSH
22439: LD_INT 5
22441: PPUSH
22442: LD_STRING 
22444: PPUSH
22445: CALL 16771 0 4
22449: ST_TO_ADDR
// vc_control = control_manual ;
22450: LD_ADDR_OWVAR 38
22454: PUSH
22455: LD_INT 1
22457: ST_TO_ADDR
// av = CreateVehicle ;
22458: LD_ADDR_LOC 24
22462: PUSH
22463: CALL_OW 45
22467: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22468: LD_LOC 23
22472: PPUSH
22473: LD_LOC 24
22477: PPUSH
22478: CALL_OW 52
// pom = pom ^ av ;
22482: LD_ADDR_VAR 0 2
22486: PUSH
22487: LD_VAR 0 2
22491: PUSH
22492: LD_LOC 24
22496: ADD
22497: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22498: LD_ADDR_LOC 23
22502: PUSH
22503: CALL 16736 0 0
22507: PPUSH
22508: LD_INT 3
22510: PPUSH
22511: LD_INT 5
22513: PPUSH
22514: LD_STRING 
22516: PPUSH
22517: CALL 16771 0 4
22521: ST_TO_ADDR
// vc_control = control_manual ;
22522: LD_ADDR_OWVAR 38
22526: PUSH
22527: LD_INT 1
22529: ST_TO_ADDR
// av = CreateVehicle ;
22530: LD_ADDR_LOC 24
22534: PUSH
22535: CALL_OW 45
22539: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22540: LD_LOC 23
22544: PPUSH
22545: LD_LOC 24
22549: PPUSH
22550: CALL_OW 52
// pom = pom ^ av ;
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_VAR 0 2
22563: PUSH
22564: LD_LOC 24
22568: ADD
22569: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22570: LD_ADDR_VAR 0 2
22574: PUSH
22575: LD_VAR 0 2
22579: PUSH
22580: CALL 16736 0 0
22584: PPUSH
22585: LD_INT 1
22587: PPUSH
22588: LD_INT 7
22590: PPUSH
22591: LD_STRING 
22593: PPUSH
22594: CALL 16771 0 4
22598: ADD
22599: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22600: LD_ADDR_VAR 0 2
22604: PUSH
22605: LD_VAR 0 2
22609: PUSH
22610: CALL 16736 0 0
22614: PPUSH
22615: LD_INT 1
22617: PPUSH
22618: LD_INT 7
22620: PPUSH
22621: LD_STRING 
22623: PPUSH
22624: CALL 16771 0 4
22628: ADD
22629: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22630: LD_ADDR_VAR 0 2
22634: PUSH
22635: LD_VAR 0 2
22639: PUSH
22640: CALL 16736 0 0
22644: PPUSH
22645: LD_INT 8
22647: PPUSH
22648: LD_INT 7
22650: PPUSH
22651: LD_STRING 
22653: PPUSH
22654: CALL 16771 0 4
22658: ADD
22659: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22660: LD_ADDR_VAR 0 2
22664: PUSH
22665: LD_VAR 0 2
22669: PUSH
22670: CALL 16736 0 0
22674: PPUSH
22675: LD_INT 8
22677: PPUSH
22678: LD_INT 7
22680: PPUSH
22681: LD_STRING 
22683: PPUSH
22684: CALL 16771 0 4
22688: ADD
22689: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22690: LD_ADDR_VAR 0 2
22694: PUSH
22695: LD_VAR 0 2
22699: PUSH
22700: CALL 16736 0 0
22704: PPUSH
22705: LD_INT 8
22707: PPUSH
22708: LD_INT 7
22710: PPUSH
22711: LD_STRING 
22713: PPUSH
22714: CALL 16771 0 4
22718: ADD
22719: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22720: LD_ADDR_VAR 0 2
22724: PUSH
22725: LD_VAR 0 2
22729: PUSH
22730: CALL 16736 0 0
22734: PPUSH
22735: LD_INT 8
22737: PPUSH
22738: LD_INT 7
22740: PPUSH
22741: LD_STRING 
22743: PPUSH
22744: CALL 16771 0 4
22748: ADD
22749: ST_TO_ADDR
// ARABI_KIROV_POSILY = pom ;
22750: LD_ADDR_EXP 66
22754: PUSH
22755: LD_VAR 0 2
22759: ST_TO_ADDR
// end ;
22760: LD_VAR 0 1
22764: RET
// export function create_cerpaci_ruske_auta ; var pom ; begin
22765: LD_INT 0
22767: PPUSH
22768: PPUSH
// pom = [ ] ;
22769: LD_ADDR_VAR 0 2
22773: PUSH
22774: EMPTY
22775: ST_TO_ADDR
// uc_nation = nation_russian ;
22776: LD_ADDR_OWVAR 21
22780: PUSH
22781: LD_INT 3
22783: ST_TO_ADDR
// uc_side = You2 ;
22784: LD_ADDR_OWVAR 20
22788: PUSH
22789: LD_EXP 2
22793: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
22794: LD_ADDR_OWVAR 40
22798: PUSH
22799: LD_INT 51
22801: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22802: LD_ADDR_OWVAR 37
22806: PUSH
22807: LD_INT 21
22809: ST_TO_ADDR
// vc_control = control_manual ;
22810: LD_ADDR_OWVAR 38
22814: PUSH
22815: LD_INT 1
22817: ST_TO_ADDR
// vc_engine = engine_combustion ;
22818: LD_ADDR_OWVAR 39
22822: PUSH
22823: LD_INT 1
22825: ST_TO_ADDR
// av = CreateVehicle ;
22826: LD_ADDR_LOC 24
22830: PUSH
22831: CALL_OW 45
22835: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22836: LD_ADDR_LOC 23
22840: PUSH
22841: CALL 16736 0 0
22845: PPUSH
22846: LD_INT 1
22848: PPUSH
22849: LD_INT 4
22851: PPUSH
22852: LD_STRING 
22854: PPUSH
22855: CALL 16771 0 4
22859: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22860: LD_LOC 23
22864: PPUSH
22865: LD_LOC 24
22869: PPUSH
22870: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22874: LD_LOC 24
22878: PPUSH
22879: LD_INT 2
22881: PPUSH
22882: LD_INT 100
22884: PPUSH
22885: CALL_OW 290
// pom = pom ^ av ;
22889: LD_ADDR_VAR 0 2
22893: PUSH
22894: LD_VAR 0 2
22898: PUSH
22899: LD_LOC 24
22903: ADD
22904: ST_TO_ADDR
// av = CreateVehicle ;
22905: LD_ADDR_LOC 24
22909: PUSH
22910: CALL_OW 45
22914: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22915: LD_ADDR_LOC 23
22919: PUSH
22920: CALL 16736 0 0
22924: PPUSH
22925: LD_INT 1
22927: PPUSH
22928: LD_INT 4
22930: PPUSH
22931: LD_STRING 
22933: PPUSH
22934: CALL 16771 0 4
22938: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22939: LD_LOC 23
22943: PPUSH
22944: LD_LOC 24
22948: PPUSH
22949: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22953: LD_LOC 24
22957: PPUSH
22958: LD_INT 2
22960: PPUSH
22961: LD_INT 100
22963: PPUSH
22964: CALL_OW 290
// pom = pom ^ av ;
22968: LD_ADDR_VAR 0 2
22972: PUSH
22973: LD_VAR 0 2
22977: PUSH
22978: LD_LOC 24
22982: ADD
22983: ST_TO_ADDR
// av = CreateVehicle ;
22984: LD_ADDR_LOC 24
22988: PUSH
22989: CALL_OW 45
22993: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22994: LD_ADDR_LOC 23
22998: PUSH
22999: CALL 16736 0 0
23003: PPUSH
23004: LD_INT 1
23006: PPUSH
23007: LD_INT 4
23009: PPUSH
23010: LD_STRING 
23012: PPUSH
23013: CALL 16771 0 4
23017: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
23018: LD_LOC 23
23022: PPUSH
23023: LD_LOC 24
23027: PPUSH
23028: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
23032: LD_LOC 24
23036: PPUSH
23037: LD_INT 2
23039: PPUSH
23040: LD_INT 100
23042: PPUSH
23043: CALL_OW 290
// pom = pom ^ av ;
23047: LD_ADDR_VAR 0 2
23051: PUSH
23052: LD_VAR 0 2
23056: PUSH
23057: LD_LOC 24
23061: ADD
23062: ST_TO_ADDR
// RUSI_CERPACI_AUTA_LIST = pom ;
23063: LD_ADDR_EXP 59
23067: PUSH
23068: LD_VAR 0 2
23072: ST_TO_ADDR
// end ; end_of_file
23073: LD_VAR 0 1
23077: RET
// var Am_hlidka ; var Am_pomoc ; export Am_posily ; export Prezite_posily ; every 0 0$0.1 do var i ;
23078: GO 23080
23080: DISABLE
23081: LD_INT 0
23083: PPUSH
// begin Am_hlidka = [ ] ;
23084: LD_ADDR_LOC 25
23088: PUSH
23089: EMPTY
23090: ST_TO_ADDR
// Am_pomoc = [ ] ;
23091: LD_ADDR_LOC 26
23095: PUSH
23096: EMPTY
23097: ST_TO_ADDR
// Prezite_posily = 0 ;
23098: LD_ADDR_EXP 73
23102: PUSH
23103: LD_INT 0
23105: ST_TO_ADDR
// for i in [ 101 , 102 , 103 ] do
23106: LD_ADDR_VAR 0 1
23110: PUSH
23111: LD_INT 101
23113: PUSH
23114: LD_INT 102
23116: PUSH
23117: LD_INT 103
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23135
// enable ( i ) end ;
23128: LD_VAR 0 1
23132: ENABLE_MARKED
23133: GO 23125
23135: POP
23136: POP
23137: PPOPN 1
23139: END
// export function PrepareOmicron ; var i , skill ; begin
23140: LD_INT 0
23142: PPUSH
23143: PPUSH
23144: PPUSH
// uc_side := 1 ;
23145: LD_ADDR_OWVAR 20
23149: PUSH
23150: LD_INT 1
23152: ST_TO_ADDR
// uc_nation := 1 ;
23153: LD_ADDR_OWVAR 21
23157: PUSH
23158: LD_INT 1
23160: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
23161: LD_ADDR_VAR 0 3
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: LD_INT 4
23171: PUSH
23172: LD_INT 5
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: PUSH
23180: LD_OWVAR 67
23184: ARRAY
23185: ST_TO_ADDR
// for i = 1 to Difficulty do
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: DOUBLE
23192: LD_INT 1
23194: DEC
23195: ST_TO_ADDR
23196: LD_OWVAR 67
23200: PUSH
23201: FOR_TO
23202: IFFALSE 23242
// begin PrepareHuman ( false , 2 , skill ) ;
23204: LD_INT 0
23206: PPUSH
23207: LD_INT 2
23209: PPUSH
23210: LD_VAR 0 3
23214: PPUSH
23215: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 20 , 13 , 6 , false ) ;
23219: CALL_OW 44
23223: PPUSH
23224: LD_INT 20
23226: PPUSH
23227: LD_INT 13
23229: PPUSH
23230: LD_INT 6
23232: PPUSH
23233: LD_INT 0
23235: PPUSH
23236: CALL_OW 50
// end ;
23240: GO 23201
23242: POP
23243: POP
// if Difficulty > 1 then
23244: LD_OWVAR 67
23248: PUSH
23249: LD_INT 1
23251: GREATER
23252: IFFALSE 23264
// begin PlaceWeaponTurret ( Am_bu1 , us_gatling_gun ) ;
23254: LD_INT 7
23256: PPUSH
23257: LD_INT 4
23259: PPUSH
23260: CALL_OW 431
// end ; end ;
23264: LD_VAR 0 1
23268: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var i , engs , buildings ;
23269: LD_INT 22
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 25
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 69
23297: IFFALSE 23502
23299: GO 23301
23301: DISABLE
23302: LD_INT 0
23304: PPUSH
23305: PPUSH
23306: PPUSH
// begin enable ;
23307: ENABLE
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: LD_INT 22
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 30
23325: PUSH
23326: LD_INT 4
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 3
23335: PUSH
23336: LD_INT 24
23338: PUSH
23339: LD_INT 1000
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: PPUSH
23355: CALL_OW 69
23359: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
23360: LD_ADDR_VAR 0 2
23364: PUSH
23365: LD_INT 22
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 25
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PPUSH
23389: CALL_OW 69
23393: ST_TO_ADDR
// for i in engs do
23394: LD_ADDR_VAR 0 1
23398: PUSH
23399: LD_VAR 0 2
23403: PUSH
23404: FOR_IN
23405: IFFALSE 23500
// if not HasTask ( i ) and not IsInUnit ( i ) and not buildings then
23407: LD_VAR 0 1
23411: PPUSH
23412: CALL_OW 314
23416: NOT
23417: PUSH
23418: LD_VAR 0 1
23422: PPUSH
23423: CALL_OW 310
23427: NOT
23428: AND
23429: PUSH
23430: LD_VAR 0 3
23434: NOT
23435: AND
23436: IFFALSE 23452
// ComEnterUnit ( i , Am_dep ) else
23438: LD_VAR 0 1
23442: PPUSH
23443: LD_INT 12
23445: PPUSH
23446: CALL_OW 120
23450: GO 23498
// if buildings then
23452: LD_VAR 0 3
23456: IFFALSE 23498
// if IsInUnit ( i ) then
23458: LD_VAR 0 1
23462: PPUSH
23463: CALL_OW 310
23467: IFFALSE 23480
// ComExitBuilding ( i ) else
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 122
23478: GO 23498
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
23480: LD_VAR 0 1
23484: PPUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_INT 1
23492: ARRAY
23493: PPUSH
23494: CALL_OW 130
23498: GO 23404
23500: POP
23501: POP
// end ;
23502: PPOPN 3
23504: END
// every 0 0$1 do var budovy ;
23505: GO 23507
23507: DISABLE
23508: LD_INT 0
23510: PPUSH
// begin PrepareOmicron ;
23511: CALL 23140 0 0
// ComEnterUnit ( Am_pru1 , Am_bar2 ) ;
23515: LD_INT 26
23517: PPUSH
23518: LD_INT 25
23520: PPUSH
23521: CALL_OW 120
// ComEnterUnit ( Am_pru2 , Am_bar2 ) ;
23525: LD_INT 27
23527: PPUSH
23528: LD_INT 25
23530: PPUSH
23531: CALL_OW 120
// ComEnterUnit ( Am_pru3 , Am_bar2 ) ;
23535: LD_INT 28
23537: PPUSH
23538: LD_INT 25
23540: PPUSH
23541: CALL_OW 120
// ComEnterUnit ( Am_vb1 , Am_bu1 ) ;
23545: LD_INT 29
23547: PPUSH
23548: LD_INT 7
23550: PPUSH
23551: CALL_OW 120
// ComEnterUnit ( Am_vb2 , Am_bu2 ) ;
23555: LD_INT 30
23557: PPUSH
23558: LD_INT 8
23560: PPUSH
23561: CALL_OW 120
// ComEnterUnit ( Am_vb3 , Am_bu3 ) ;
23565: LD_INT 31
23567: PPUSH
23568: LD_INT 19
23570: PPUSH
23571: CALL_OW 120
// ComEnterUnit ( Am_vb4 , Am_bu4 ) ;
23575: LD_INT 32
23577: PPUSH
23578: LD_INT 18
23580: PPUSH
23581: CALL_OW 120
// ComEnterUnit ( Am_sol1 , Am_bar1 ) ;
23585: LD_INT 38
23587: PPUSH
23588: LD_INT 11
23590: PPUSH
23591: CALL_OW 120
// ComEnterUnit ( Am_sol2 , Am_bar1 ) ;
23595: LD_INT 39
23597: PPUSH
23598: LD_INT 11
23600: PPUSH
23601: CALL_OW 120
// ComEnterUnit ( Am_sol3 , Am_bar1 ) ;
23605: LD_INT 40
23607: PPUSH
23608: LD_INT 11
23610: PPUSH
23611: CALL_OW 120
// ComEnterUnit ( pitomec , Am_bar2 ) ;
23615: LD_INT 63
23617: PPUSH
23618: LD_INT 25
23620: PPUSH
23621: CALL_OW 120
// ComEnterUnit ( Am_sol4 , Am_dep ) ;
23625: LD_INT 41
23627: PPUSH
23628: LD_INT 12
23630: PPUSH
23631: CALL_OW 120
// ComEnterUnit ( Am_eng1 , Am_dep ) ;
23635: LD_INT 36
23637: PPUSH
23638: LD_INT 12
23640: PPUSH
23641: CALL_OW 120
// ComEnterUnit ( Am_sci1 , Am_lab ) ;
23645: LD_INT 37
23647: PPUSH
23648: LD_INT 9
23650: PPUSH
23651: CALL_OW 120
// ComEnterUnit ( Am_me1 , Am_fac ) ;
23655: LD_INT 33
23657: PPUSH
23658: LD_INT 10
23660: PPUSH
23661: CALL_OW 120
// ComEnterUnit ( Am_me2 , Am_fac ) ;
23665: LD_INT 34
23667: PPUSH
23668: LD_INT 10
23670: PPUSH
23671: CALL_OW 120
// ComEnterUnit ( Am_me3 , Am_fac ) ;
23675: LD_INT 35
23677: PPUSH
23678: LD_INT 10
23680: PPUSH
23681: CALL_OW 120
// budovy = [ Am_bu1 , Am_bu2 , Am_bu3 , Am_bu4 , Am_el1 , Am_el2 , Am_lab , Am_fac , Am_mine , Am_dep , Am_bar1 , Am_bar2 ] ;
23685: LD_ADDR_VAR 0 1
23689: PUSH
23690: LD_INT 7
23692: PUSH
23693: LD_INT 8
23695: PUSH
23696: LD_INT 19
23698: PUSH
23699: LD_INT 18
23701: PUSH
23702: LD_INT 22
23704: PUSH
23705: LD_INT 23
23707: PUSH
23708: LD_INT 9
23710: PUSH
23711: LD_INT 10
23713: PUSH
23714: LD_INT 24
23716: PUSH
23717: LD_INT 12
23719: PUSH
23720: LD_INT 11
23722: PUSH
23723: LD_INT 25
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: ST_TO_ADDR
// SetBLevel ( budovy , levely_am_budov [ difficulty ] ) ;
23740: LD_VAR 0 1
23744: PPUSH
23745: LD_EXP 21
23749: PUSH
23750: LD_OWVAR 67
23754: ARRAY
23755: PPUSH
23756: CALL_OW 241
// end ;
23760: PPOPN 1
23762: END
// export function amici_hlidka ; begin
23763: LD_INT 0
23765: PPUSH
// case difficulty of 1 :
23766: LD_OWVAR 67
23770: PUSH
23771: LD_INT 1
23773: DOUBLE
23774: EQUAL
23775: IFTRUE 23779
23777: GO 23793
23779: POP
// Am_hlidka = [ Am_pru1 ] ; 2 :
23780: LD_ADDR_LOC 25
23784: PUSH
23785: LD_INT 26
23787: PUSH
23788: EMPTY
23789: LIST
23790: ST_TO_ADDR
23791: GO 23850
23793: LD_INT 2
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 23819
23801: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 ] ; 3 :
23802: LD_ADDR_LOC 25
23806: PUSH
23807: LD_INT 26
23809: PUSH
23810: LD_INT 27
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: ST_TO_ADDR
23817: GO 23850
23819: LD_INT 3
23821: DOUBLE
23822: EQUAL
23823: IFTRUE 23827
23825: GO 23849
23827: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 , Am_pru3 ] ; end ;
23828: LD_ADDR_LOC 25
23832: PUSH
23833: LD_INT 26
23835: PUSH
23836: LD_INT 27
23838: PUSH
23839: LD_INT 28
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: ST_TO_ADDR
23847: GO 23850
23849: POP
// ComExitBuilding ( Am_hlidka ) ;
23850: LD_LOC 25
23854: PPUSH
23855: CALL_OW 122
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23859: LD_LOC 25
23863: PPUSH
23864: LD_INT 34
23866: PPUSH
23867: LD_INT 16
23869: PPUSH
23870: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23874: LD_LOC 25
23878: PPUSH
23879: LD_INT 245
23881: PPUSH
23882: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23886: LD_LOC 25
23890: PPUSH
23891: LD_INT 51
23893: PPUSH
23894: LD_INT 19
23896: PPUSH
23897: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23901: LD_LOC 25
23905: PPUSH
23906: LD_INT 245
23908: PPUSH
23909: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23913: LD_LOC 25
23917: PPUSH
23918: LD_INT 54
23920: PPUSH
23921: LD_INT 5
23923: PPUSH
23924: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23928: LD_LOC 25
23932: PPUSH
23933: LD_INT 245
23935: PPUSH
23936: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23940: LD_LOC 25
23944: PPUSH
23945: LD_INT 77
23947: PPUSH
23948: LD_INT 16
23950: PPUSH
23951: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23955: LD_LOC 25
23959: PPUSH
23960: LD_INT 245
23962: PPUSH
23963: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23967: LD_LOC 25
23971: PPUSH
23972: LD_INT 81
23974: PPUSH
23975: LD_INT 32
23977: PPUSH
23978: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23982: LD_LOC 25
23986: PPUSH
23987: LD_INT 245
23989: PPUSH
23990: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23994: LD_LOC 25
23998: PPUSH
23999: LD_INT 73
24001: PPUSH
24002: LD_INT 32
24004: PPUSH
24005: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24009: LD_LOC 25
24013: PPUSH
24014: LD_INT 245
24016: PPUSH
24017: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24021: LD_LOC 25
24025: PPUSH
24026: LD_INT 57
24028: PPUSH
24029: LD_INT 33
24031: PPUSH
24032: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24036: LD_LOC 25
24040: PPUSH
24041: LD_INT 245
24043: PPUSH
24044: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24048: LD_LOC 25
24052: PPUSH
24053: LD_INT 45
24055: PPUSH
24056: LD_INT 24
24058: PPUSH
24059: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24063: LD_LOC 25
24067: PPUSH
24068: LD_INT 245
24070: PPUSH
24071: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24075: LD_LOC 25
24079: PPUSH
24080: LD_INT 34
24082: PPUSH
24083: LD_INT 13
24085: PPUSH
24086: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24090: LD_LOC 25
24094: PPUSH
24095: LD_INT 245
24097: PPUSH
24098: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24102: LD_LOC 25
24106: PPUSH
24107: LD_INT 34
24109: PPUSH
24110: LD_INT 16
24112: PPUSH
24113: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24117: LD_LOC 25
24121: PPUSH
24122: LD_INT 245
24124: PPUSH
24125: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24129: LD_LOC 25
24133: PPUSH
24134: LD_INT 51
24136: PPUSH
24137: LD_INT 19
24139: PPUSH
24140: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24144: LD_LOC 25
24148: PPUSH
24149: LD_INT 245
24151: PPUSH
24152: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24156: LD_LOC 25
24160: PPUSH
24161: LD_INT 54
24163: PPUSH
24164: LD_INT 5
24166: PPUSH
24167: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24171: LD_LOC 25
24175: PPUSH
24176: LD_INT 245
24178: PPUSH
24179: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24183: LD_LOC 25
24187: PPUSH
24188: LD_INT 77
24190: PPUSH
24191: LD_INT 16
24193: PPUSH
24194: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24198: LD_LOC 25
24202: PPUSH
24203: LD_INT 245
24205: PPUSH
24206: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24210: LD_LOC 25
24214: PPUSH
24215: LD_INT 81
24217: PPUSH
24218: LD_INT 32
24220: PPUSH
24221: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24225: LD_LOC 25
24229: PPUSH
24230: LD_INT 245
24232: PPUSH
24233: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24237: LD_LOC 25
24241: PPUSH
24242: LD_INT 73
24244: PPUSH
24245: LD_INT 32
24247: PPUSH
24248: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24252: LD_LOC 25
24256: PPUSH
24257: LD_INT 245
24259: PPUSH
24260: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24264: LD_LOC 25
24268: PPUSH
24269: LD_INT 57
24271: PPUSH
24272: LD_INT 33
24274: PPUSH
24275: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24279: LD_LOC 25
24283: PPUSH
24284: LD_INT 245
24286: PPUSH
24287: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24291: LD_LOC 25
24295: PPUSH
24296: LD_INT 45
24298: PPUSH
24299: LD_INT 24
24301: PPUSH
24302: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24306: LD_LOC 25
24310: PPUSH
24311: LD_INT 245
24313: PPUSH
24314: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24318: LD_LOC 25
24322: PPUSH
24323: LD_INT 34
24325: PPUSH
24326: LD_INT 13
24328: PPUSH
24329: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24333: LD_LOC 25
24337: PPUSH
24338: LD_INT 245
24340: PPUSH
24341: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24345: LD_LOC 25
24349: PPUSH
24350: LD_INT 34
24352: PPUSH
24353: LD_INT 16
24355: PPUSH
24356: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24360: LD_LOC 25
24364: PPUSH
24365: LD_INT 245
24367: PPUSH
24368: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24372: LD_LOC 25
24376: PPUSH
24377: LD_INT 51
24379: PPUSH
24380: LD_INT 19
24382: PPUSH
24383: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24387: LD_LOC 25
24391: PPUSH
24392: LD_INT 245
24394: PPUSH
24395: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24399: LD_LOC 25
24403: PPUSH
24404: LD_INT 54
24406: PPUSH
24407: LD_INT 5
24409: PPUSH
24410: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24414: LD_LOC 25
24418: PPUSH
24419: LD_INT 245
24421: PPUSH
24422: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24426: LD_LOC 25
24430: PPUSH
24431: LD_INT 77
24433: PPUSH
24434: LD_INT 16
24436: PPUSH
24437: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24441: LD_LOC 25
24445: PPUSH
24446: LD_INT 245
24448: PPUSH
24449: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24453: LD_LOC 25
24457: PPUSH
24458: LD_INT 81
24460: PPUSH
24461: LD_INT 32
24463: PPUSH
24464: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24468: LD_LOC 25
24472: PPUSH
24473: LD_INT 245
24475: PPUSH
24476: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24480: LD_LOC 25
24484: PPUSH
24485: LD_INT 73
24487: PPUSH
24488: LD_INT 32
24490: PPUSH
24491: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24495: LD_LOC 25
24499: PPUSH
24500: LD_INT 245
24502: PPUSH
24503: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24507: LD_LOC 25
24511: PPUSH
24512: LD_INT 57
24514: PPUSH
24515: LD_INT 33
24517: PPUSH
24518: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24522: LD_LOC 25
24526: PPUSH
24527: LD_INT 245
24529: PPUSH
24530: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24534: LD_LOC 25
24538: PPUSH
24539: LD_INT 45
24541: PPUSH
24542: LD_INT 24
24544: PPUSH
24545: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24549: LD_LOC 25
24553: PPUSH
24554: LD_INT 245
24556: PPUSH
24557: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24561: LD_LOC 25
24565: PPUSH
24566: LD_INT 34
24568: PPUSH
24569: LD_INT 13
24571: PPUSH
24572: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24576: LD_LOC 25
24580: PPUSH
24581: LD_INT 245
24583: PPUSH
24584: CALL_OW 202
// enable ( 101 ) ;
24588: LD_INT 101
24590: ENABLE_MARKED
// enable ( 103 ) ;
24591: LD_INT 103
24593: ENABLE_MARKED
// enable ( 102 ) ;
24594: LD_INT 102
24596: ENABLE_MARKED
// end ;
24597: LD_VAR 0 1
24601: RET
// every 0 0$1 marked 102 do var i , j , pom ;
24602: GO 24604
24604: DISABLE
24605: LD_INT 0
24607: PPUSH
24608: PPUSH
24609: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
24610: LD_ADDR_VAR 0 3
24614: PUSH
24615: LD_INT 22
24617: PUSH
24618: LD_EXP 1
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 21
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL_OW 69
24645: ST_TO_ADDR
// for i in Am_hlidka do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: LD_LOC 25
24655: PUSH
24656: FOR_IN
24657: IFFALSE 24725
// if GetLives ( i ) < 1000 then
24659: LD_VAR 0 1
24663: PPUSH
24664: CALL_OW 256
24668: PUSH
24669: LD_INT 1000
24671: LESS
24672: IFFALSE 24723
// for j in pom do
24674: LD_ADDR_VAR 0 2
24678: PUSH
24679: LD_VAR 0 3
24683: PUSH
24684: FOR_IN
24685: IFFALSE 24721
// begin if See ( Amici , j ) then
24687: LD_EXP 4
24691: PPUSH
24692: LD_VAR 0 2
24696: PPUSH
24697: CALL_OW 292
24701: IFFALSE 24717
// ComAttackUnit ( Am_hlidka , j ) ;
24703: LD_LOC 25
24707: PPUSH
24708: LD_VAR 0 2
24712: PPUSH
24713: CALL_OW 115
// break ;
24717: GO 24721
// end ;
24719: GO 24684
24721: POP
24722: POP
24723: GO 24656
24725: POP
24726: POP
// end ;
24727: PPOPN 3
24729: END
// every 0 0$1 marked 101 do var i ; var jedn ; var posli ;
24730: GO 24732
24732: DISABLE
24733: LD_INT 0
24735: PPUSH
24736: PPUSH
24737: PPUSH
// begin jedn = [ ] ;
24738: LD_ADDR_VAR 0 2
24742: PUSH
24743: EMPTY
24744: ST_TO_ADDR
// posli = false ;
24745: LD_ADDR_VAR 0 3
24749: PUSH
24750: LD_INT 0
24752: ST_TO_ADDR
// for i in Am_hlidka do
24753: LD_ADDR_VAR 0 1
24757: PUSH
24758: LD_LOC 25
24762: PUSH
24763: FOR_IN
24764: IFFALSE 24799
// if GetLives ( i ) < 1000 then
24766: LD_VAR 0 1
24770: PPUSH
24771: CALL_OW 256
24775: PUSH
24776: LD_INT 1000
24778: LESS
24779: IFFALSE 24797
// jedn = jedn ^ i ;
24781: LD_ADDR_VAR 0 2
24785: PUSH
24786: LD_VAR 0 2
24790: PUSH
24791: LD_VAR 0 1
24795: ADD
24796: ST_TO_ADDR
24797: GO 24763
24799: POP
24800: POP
// if jedn > 0 then
24801: LD_VAR 0 2
24805: PUSH
24806: LD_INT 0
24808: GREATER
24809: IFFALSE 24854
// begin wait ( 0 0$7 ) ;
24811: LD_INT 245
24813: PPUSH
24814: CALL_OW 67
// for i in jedn do
24818: LD_ADDR_VAR 0 1
24822: PUSH
24823: LD_VAR 0 2
24827: PUSH
24828: FOR_IN
24829: IFFALSE 24852
// if IsOK ( i ) then
24831: LD_VAR 0 1
24835: PPUSH
24836: CALL_OW 302
24840: IFFALSE 24850
// posli = true ;
24842: LD_ADDR_VAR 0 3
24846: PUSH
24847: LD_INT 1
24849: ST_TO_ADDR
24850: GO 24828
24852: POP
24853: POP
// end ; if posli then
24854: LD_VAR 0 3
24858: IFFALSE 24873
// americka_pomoc_hlidce ( jedn [ 1 ] ) ;
24860: LD_VAR 0 2
24864: PUSH
24865: LD_INT 1
24867: ARRAY
24868: PPUSH
24869: CALL 25032 0 1
// enable ;
24873: ENABLE
// end ;
24874: PPOPN 3
24876: END
// every 0 0$1 marked 102 do
24877: GO 24879
24879: DISABLE
// begin wait ( schol_find_amikama [ difficulty ] ) ;
24880: LD_EXP 12
24884: PUSH
24885: LD_OWVAR 67
24889: ARRAY
24890: PPUSH
24891: CALL_OW 67
// if GetSide ( schol ) = You or GetSide ( schol2 ) = You then
24895: LD_EXP 33
24899: PPUSH
24900: CALL_OW 255
24904: PUSH
24905: LD_EXP 1
24909: EQUAL
24910: PUSH
24911: LD_EXP 34
24915: PPUSH
24916: CALL_OW 255
24920: PUSH
24921: LD_EXP 1
24925: EQUAL
24926: OR
24927: IFFALSE 24933
// exit else
24929: GO 24962
24931: GO 24962
// begin ComAgressiveMove ( Am_hlidka , 38 , 2 ) ;
24933: LD_LOC 25
24937: PPUSH
24938: LD_INT 38
24940: PPUSH
24941: LD_INT 2
24943: PPUSH
24944: CALL_OW 114
// AddComAttackUnit ( Am_hlidka , schol2 ) ;
24948: LD_LOC 25
24952: PPUSH
24953: LD_EXP 34
24957: PPUSH
24958: CALL_OW 175
// end ; end ;
24962: END
// every 0 0$3 trigger scholtze_saved or IsDead ( schol2 ) do
24963: LD_EXP 37
24967: PUSH
24968: LD_EXP 34
24972: PPUSH
24973: CALL_OW 301
24977: OR
24978: IFFALSE 25031
24980: GO 24982
24982: DISABLE
// begin ComAgressiveMove ( Am_hlidka , 28 , 18 ) ;
24983: LD_LOC 25
24987: PPUSH
24988: LD_INT 28
24990: PPUSH
24991: LD_INT 18
24993: PPUSH
24994: CALL_OW 114
// AddComEnterUnit ( Am_hlidka , Am_bar2 ) ;
24998: LD_LOC 25
25002: PPUSH
25003: LD_INT 25
25005: PPUSH
25006: CALL_OW 180
// ComAgressiveMove ( Am_pomoc , 21 , 32 ) ;
25010: LD_LOC 26
25014: PPUSH
25015: LD_INT 21
25017: PPUSH
25018: LD_INT 32
25020: PPUSH
25021: CALL_OW 114
// disable ( 101 ) ;
25025: LD_INT 101
25027: DISABLE_MARKED
// disable ( 102 ) ;
25028: LD_INT 102
25030: DISABLE_MARKED
// end ;
25031: END
// function americka_pomoc_hlidce ( jedn ) ; var i ; begin
25032: LD_INT 0
25034: PPUSH
25035: PPUSH
// Am_pomoc = AMERICKA_POMOC_HLIDCE_LIST ;
25036: LD_ADDR_LOC 26
25040: PUSH
25041: LD_EXP 50
25045: ST_TO_ADDR
// while SeeArea ( Amici , Help_area ) > 0 do
25046: LD_EXP 4
25050: PPUSH
25051: LD_INT 3
25053: PPUSH
25054: CALL_OW 294
25058: PUSH
25059: LD_INT 0
25061: GREATER
25062: IFFALSE 25073
// wait ( 0 0$1 ) ;
25064: LD_INT 35
25066: PPUSH
25067: CALL_OW 67
25071: GO 25046
// for i in AMERICKA_POMOC_HLIDCE_LIST do
25073: LD_ADDR_VAR 0 3
25077: PUSH
25078: LD_EXP 50
25082: PUSH
25083: FOR_IN
25084: IFFALSE 25103
// PlaceUnitArea ( i , Help_area , false ) ;
25086: LD_VAR 0 3
25090: PPUSH
25091: LD_INT 3
25093: PPUSH
25094: LD_INT 0
25096: PPUSH
25097: CALL_OW 49
25101: GO 25083
25103: POP
25104: POP
// wait ( 0 0$1 ) ;
25105: LD_INT 35
25107: PPUSH
25108: CALL_OW 67
// ComAgressiveMove ( Am_pomoc , GetX ( jedn ) , GetY ( jedn ) ) ;
25112: LD_LOC 26
25116: PPUSH
25117: LD_VAR 0 1
25121: PPUSH
25122: CALL_OW 250
25126: PPUSH
25127: LD_VAR 0 1
25131: PPUSH
25132: CALL_OW 251
25136: PPUSH
25137: CALL_OW 114
// end ;
25141: LD_VAR 0 2
25145: RET
// every 0 0$10 do
25146: GO 25148
25148: DISABLE
// begin wait ( Rand ( 1 , 0 0$30 ) ) ;
25149: LD_INT 1
25151: PPUSH
25152: LD_INT 1050
25154: PPUSH
25155: CALL_OW 12
25159: PPUSH
25160: CALL_OW 67
// wait ( posily1 [ difficulty ] ) ;
25164: LD_EXP 14
25168: PUSH
25169: LD_OWVAR 67
25173: ARRAY
25174: PPUSH
25175: CALL_OW 67
// posli_posily ( 1 ) ;
25179: LD_INT 1
25181: PPUSH
25182: CALL 25275 0 1
// wait ( posily11 [ difficulty ] ) ;
25186: LD_EXP 15
25190: PUSH
25191: LD_OWVAR 67
25195: ARRAY
25196: PPUSH
25197: CALL_OW 67
// posli_posily ( 11 ) ;
25201: LD_INT 11
25203: PPUSH
25204: CALL 25275 0 1
// wait ( posily2 [ difficulty ] ) ;
25208: LD_EXP 16
25212: PUSH
25213: LD_OWVAR 67
25217: ARRAY
25218: PPUSH
25219: CALL_OW 67
// posli_posily ( 2 ) ;
25223: LD_INT 2
25225: PPUSH
25226: CALL 25275 0 1
// wait ( posily3 [ difficulty ] ) ;
25230: LD_EXP 17
25234: PUSH
25235: LD_OWVAR 67
25239: ARRAY
25240: PPUSH
25241: CALL_OW 67
// posli_posily ( 3 ) ;
25245: LD_INT 3
25247: PPUSH
25248: CALL 25275 0 1
// wait ( posily4 [ difficulty ] ) ;
25252: LD_EXP 18
25256: PUSH
25257: LD_OWVAR 67
25261: ARRAY
25262: PPUSH
25263: CALL_OW 67
// posli_posily ( 4 ) ;
25267: LD_INT 4
25269: PPUSH
25270: CALL 25275 0 1
// end ;
25274: END
// function posli_posily ( ktere ) ; var i , pom ; var poc ; begin
25275: LD_INT 0
25277: PPUSH
25278: PPUSH
25279: PPUSH
25280: PPUSH
// case ktere of 1 :
25281: LD_VAR 0 1
25285: PUSH
25286: LD_INT 1
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25329
25294: POP
// for i in AMERICKE_POSILY1_LIST do
25295: LD_ADDR_VAR 0 3
25299: PUSH
25300: LD_EXP 51
25304: PUSH
25305: FOR_IN
25306: IFFALSE 25325
// PlaceUnitArea ( i , posily_1 , false ) ; 2 :
25308: LD_VAR 0 3
25312: PPUSH
25313: LD_INT 4
25315: PPUSH
25316: LD_INT 0
25318: PPUSH
25319: CALL_OW 49
25323: GO 25305
25325: POP
25326: POP
25327: GO 25502
25329: LD_INT 2
25331: DOUBLE
25332: EQUAL
25333: IFTRUE 25337
25335: GO 25372
25337: POP
// for i in AMERICKE_POSILY2_LIST do
25338: LD_ADDR_VAR 0 3
25342: PUSH
25343: LD_EXP 52
25347: PUSH
25348: FOR_IN
25349: IFFALSE 25368
// PlaceUnitArea ( i , posily_3 , false ) ; 3 :
25351: LD_VAR 0 3
25355: PPUSH
25356: LD_INT 5
25358: PPUSH
25359: LD_INT 0
25361: PPUSH
25362: CALL_OW 49
25366: GO 25348
25368: POP
25369: POP
25370: GO 25502
25372: LD_INT 3
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25415
25380: POP
// for i in AMERICKE_POSILY3_LIST do
25381: LD_ADDR_VAR 0 3
25385: PUSH
25386: LD_EXP 53
25390: PUSH
25391: FOR_IN
25392: IFFALSE 25411
// PlaceUnitArea ( i , posily_1 , false ) ; 4 :
25394: LD_VAR 0 3
25398: PPUSH
25399: LD_INT 4
25401: PPUSH
25402: LD_INT 0
25404: PPUSH
25405: CALL_OW 49
25409: GO 25391
25411: POP
25412: POP
25413: GO 25502
25415: LD_INT 4
25417: DOUBLE
25418: EQUAL
25419: IFTRUE 25423
25421: GO 25458
25423: POP
// for i in AMERICKE_POSILY4_LIST do
25424: LD_ADDR_VAR 0 3
25428: PUSH
25429: LD_EXP 54
25433: PUSH
25434: FOR_IN
25435: IFFALSE 25454
// PlaceUnitArea ( i , posily_3 , false ) ; 11 :
25437: LD_VAR 0 3
25441: PPUSH
25442: LD_INT 5
25444: PPUSH
25445: LD_INT 0
25447: PPUSH
25448: CALL_OW 49
25452: GO 25434
25454: POP
25455: POP
25456: GO 25502
25458: LD_INT 11
25460: DOUBLE
25461: EQUAL
25462: IFTRUE 25466
25464: GO 25501
25466: POP
// for i in AMERICKE_POSILY11_LIST do
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: LD_EXP 55
25476: PUSH
25477: FOR_IN
25478: IFFALSE 25497
// PlaceUnitArea ( i , posily_1 , false ) ; end ;
25480: LD_VAR 0 3
25484: PPUSH
25485: LD_INT 4
25487: PPUSH
25488: LD_INT 0
25490: PPUSH
25491: CALL_OW 49
25495: GO 25477
25497: POP
25498: POP
25499: GO 25502
25501: POP
// case ktere of 1 :
25502: LD_VAR 0 1
25506: PUSH
25507: LD_INT 1
25509: DOUBLE
25510: EQUAL
25511: IFTRUE 25515
25513: GO 25732
25515: POP
// begin Am_posily = AMERICKE_POSILY1_LIST ;
25516: LD_ADDR_EXP 72
25520: PUSH
25521: LD_EXP 51
25525: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25526: LD_EXP 72
25530: PPUSH
25531: LD_INT 42
25533: PPUSH
25534: LD_INT 69
25536: PPUSH
25537: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25541: LD_EXP 72
25545: PPUSH
25546: LD_INT 35
25548: PPUSH
25549: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25553: LD_EXP 72
25557: PPUSH
25558: LD_INT 42
25560: PPUSH
25561: LD_INT 69
25563: PPUSH
25564: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25568: LD_EXP 72
25572: PPUSH
25573: LD_INT 35
25575: PPUSH
25576: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25580: LD_EXP 72
25584: PPUSH
25585: LD_INT 42
25587: PPUSH
25588: LD_INT 69
25590: PPUSH
25591: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25595: LD_EXP 72
25599: PPUSH
25600: LD_INT 35
25602: PPUSH
25603: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25607: LD_EXP 72
25611: PPUSH
25612: LD_INT 28
25614: PPUSH
25615: LD_INT 47
25617: PPUSH
25618: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25622: LD_EXP 72
25626: PPUSH
25627: LD_INT 35
25629: PPUSH
25630: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25634: LD_EXP 72
25638: PPUSH
25639: LD_INT 28
25641: PPUSH
25642: LD_INT 47
25644: PPUSH
25645: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25649: LD_EXP 72
25653: PPUSH
25654: LD_INT 35
25656: PPUSH
25657: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25661: LD_EXP 72
25665: PPUSH
25666: LD_INT 28
25668: PPUSH
25669: LD_INT 47
25671: PPUSH
25672: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25676: LD_EXP 72
25680: PPUSH
25681: LD_INT 35
25683: PPUSH
25684: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25688: LD_EXP 72
25692: PPUSH
25693: LD_INT 28
25695: PPUSH
25696: LD_INT 47
25698: PPUSH
25699: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25703: LD_EXP 72
25707: PPUSH
25708: LD_INT 35
25710: PPUSH
25711: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25715: LD_EXP 72
25719: PPUSH
25720: LD_INT 20
25722: PPUSH
25723: LD_INT 12
25725: PPUSH
25726: CALL_OW 174
// end ; 2 :
25730: GO 27011
25732: LD_INT 2
25734: DOUBLE
25735: EQUAL
25736: IFTRUE 25740
25738: GO 25876
25740: POP
// begin Am_posily = AMERICKE_POSILY2_LIST ;
25741: LD_ADDR_EXP 72
25745: PUSH
25746: LD_EXP 52
25750: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 112 , 22 ) ;
25751: LD_EXP 72
25755: PPUSH
25756: LD_INT 112
25758: PPUSH
25759: LD_INT 22
25761: PPUSH
25762: CALL_OW 114
// AddComWait ( Am_posily , 0 0$2 ) ;
25766: LD_EXP 72
25770: PPUSH
25771: LD_INT 70
25773: PPUSH
25774: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 86 , 18 ) ;
25778: LD_EXP 72
25782: PPUSH
25783: LD_INT 86
25785: PPUSH
25786: LD_INT 18
25788: PPUSH
25789: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25793: LD_EXP 72
25797: PPUSH
25798: LD_INT 70
25800: PPUSH
25801: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 77 , 34 ) ;
25805: LD_EXP 72
25809: PPUSH
25810: LD_INT 77
25812: PPUSH
25813: LD_INT 34
25815: PPUSH
25816: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25820: LD_EXP 72
25824: PPUSH
25825: LD_INT 70
25827: PPUSH
25828: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 51 , 37 ) ;
25832: LD_EXP 72
25836: PPUSH
25837: LD_INT 51
25839: PPUSH
25840: LD_INT 37
25842: PPUSH
25843: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25847: LD_EXP 72
25851: PPUSH
25852: LD_INT 35
25854: PPUSH
25855: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 23 , 12 ) ;
25859: LD_EXP 72
25863: PPUSH
25864: LD_INT 23
25866: PPUSH
25867: LD_INT 12
25869: PPUSH
25870: CALL_OW 174
// end ; 3 :
25874: GO 27011
25876: LD_INT 3
25878: DOUBLE
25879: EQUAL
25880: IFTRUE 25884
25882: GO 26101
25884: POP
// begin Am_posily = AMERICKE_POSILY3_LIST ;
25885: LD_ADDR_EXP 72
25889: PUSH
25890: LD_EXP 53
25894: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25895: LD_EXP 72
25899: PPUSH
25900: LD_INT 42
25902: PPUSH
25903: LD_INT 69
25905: PPUSH
25906: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25910: LD_EXP 72
25914: PPUSH
25915: LD_INT 35
25917: PPUSH
25918: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25922: LD_EXP 72
25926: PPUSH
25927: LD_INT 42
25929: PPUSH
25930: LD_INT 69
25932: PPUSH
25933: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25937: LD_EXP 72
25941: PPUSH
25942: LD_INT 35
25944: PPUSH
25945: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25949: LD_EXP 72
25953: PPUSH
25954: LD_INT 42
25956: PPUSH
25957: LD_INT 69
25959: PPUSH
25960: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25964: LD_EXP 72
25968: PPUSH
25969: LD_INT 35
25971: PPUSH
25972: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25976: LD_EXP 72
25980: PPUSH
25981: LD_INT 28
25983: PPUSH
25984: LD_INT 47
25986: PPUSH
25987: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25991: LD_EXP 72
25995: PPUSH
25996: LD_INT 35
25998: PPUSH
25999: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
26003: LD_EXP 72
26007: PPUSH
26008: LD_INT 28
26010: PPUSH
26011: LD_INT 47
26013: PPUSH
26014: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26018: LD_EXP 72
26022: PPUSH
26023: LD_INT 35
26025: PPUSH
26026: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
26030: LD_EXP 72
26034: PPUSH
26035: LD_INT 28
26037: PPUSH
26038: LD_INT 47
26040: PPUSH
26041: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26045: LD_EXP 72
26049: PPUSH
26050: LD_INT 35
26052: PPUSH
26053: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
26057: LD_EXP 72
26061: PPUSH
26062: LD_INT 28
26064: PPUSH
26065: LD_INT 47
26067: PPUSH
26068: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26072: LD_EXP 72
26076: PPUSH
26077: LD_INT 35
26079: PPUSH
26080: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
26084: LD_EXP 72
26088: PPUSH
26089: LD_INT 20
26091: PPUSH
26092: LD_INT 12
26094: PPUSH
26095: CALL_OW 174
// end ; 4 :
26099: GO 27011
26101: LD_INT 4
26103: DOUBLE
26104: EQUAL
26105: IFTRUE 26109
26107: GO 26542
26109: POP
// begin Am_posily = AMERICKE_POSILY4_LIST ;
26110: LD_ADDR_EXP 72
26114: PUSH
26115: LD_EXP 54
26119: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26120: LD_EXP 72
26124: PPUSH
26125: LD_INT 110
26127: PPUSH
26128: LD_INT 23
26130: PPUSH
26131: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26135: LD_EXP 72
26139: PPUSH
26140: LD_INT 35
26142: PPUSH
26143: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26147: LD_EXP 72
26151: PPUSH
26152: LD_INT 110
26154: PPUSH
26155: LD_INT 23
26157: PPUSH
26158: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26162: LD_EXP 72
26166: PPUSH
26167: LD_INT 35
26169: PPUSH
26170: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26174: LD_EXP 72
26178: PPUSH
26179: LD_INT 110
26181: PPUSH
26182: LD_INT 23
26184: PPUSH
26185: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26189: LD_EXP 72
26193: PPUSH
26194: LD_INT 35
26196: PPUSH
26197: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26201: LD_EXP 72
26205: PPUSH
26206: LD_INT 110
26208: PPUSH
26209: LD_INT 23
26211: PPUSH
26212: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26216: LD_EXP 72
26220: PPUSH
26221: LD_INT 35
26223: PPUSH
26224: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26228: LD_EXP 72
26232: PPUSH
26233: LD_INT 87
26235: PPUSH
26236: LD_INT 19
26238: PPUSH
26239: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26243: LD_EXP 72
26247: PPUSH
26248: LD_INT 35
26250: PPUSH
26251: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26255: LD_EXP 72
26259: PPUSH
26260: LD_INT 87
26262: PPUSH
26263: LD_INT 19
26265: PPUSH
26266: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26270: LD_EXP 72
26274: PPUSH
26275: LD_INT 35
26277: PPUSH
26278: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26282: LD_EXP 72
26286: PPUSH
26287: LD_INT 87
26289: PPUSH
26290: LD_INT 19
26292: PPUSH
26293: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26297: LD_EXP 72
26301: PPUSH
26302: LD_INT 35
26304: PPUSH
26305: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26309: LD_EXP 72
26313: PPUSH
26314: LD_INT 87
26316: PPUSH
26317: LD_INT 19
26319: PPUSH
26320: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26324: LD_EXP 72
26328: PPUSH
26329: LD_INT 35
26331: PPUSH
26332: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26336: LD_EXP 72
26340: PPUSH
26341: LD_INT 52
26343: PPUSH
26344: LD_INT 12
26346: PPUSH
26347: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26351: LD_EXP 72
26355: PPUSH
26356: LD_INT 35
26358: PPUSH
26359: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26363: LD_EXP 72
26367: PPUSH
26368: LD_INT 52
26370: PPUSH
26371: LD_INT 12
26373: PPUSH
26374: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26378: LD_EXP 72
26382: PPUSH
26383: LD_INT 35
26385: PPUSH
26386: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26390: LD_EXP 72
26394: PPUSH
26395: LD_INT 52
26397: PPUSH
26398: LD_INT 12
26400: PPUSH
26401: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26405: LD_EXP 72
26409: PPUSH
26410: LD_INT 35
26412: PPUSH
26413: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26417: LD_EXP 72
26421: PPUSH
26422: LD_INT 52
26424: PPUSH
26425: LD_INT 12
26427: PPUSH
26428: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26432: LD_EXP 72
26436: PPUSH
26437: LD_INT 35
26439: PPUSH
26440: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26444: LD_EXP 72
26448: PPUSH
26449: LD_INT 52
26451: PPUSH
26452: LD_INT 12
26454: PPUSH
26455: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26459: LD_EXP 72
26463: PPUSH
26464: LD_INT 35
26466: PPUSH
26467: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26471: LD_EXP 72
26475: PPUSH
26476: LD_INT 52
26478: PPUSH
26479: LD_INT 12
26481: PPUSH
26482: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26486: LD_EXP 72
26490: PPUSH
26491: LD_INT 35
26493: PPUSH
26494: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26498: LD_EXP 72
26502: PPUSH
26503: LD_INT 52
26505: PPUSH
26506: LD_INT 12
26508: PPUSH
26509: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26513: LD_EXP 72
26517: PPUSH
26518: LD_INT 35
26520: PPUSH
26521: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26525: LD_EXP 72
26529: PPUSH
26530: LD_INT 27
26532: PPUSH
26533: LD_INT 13
26535: PPUSH
26536: CALL_OW 174
// end ; 11 :
26540: GO 27011
26542: LD_INT 11
26544: DOUBLE
26545: EQUAL
26546: IFTRUE 26550
26548: GO 27010
26550: POP
// begin Am_posily = AMERICKE_POSILY11_LIST ;
26551: LD_ADDR_EXP 72
26555: PUSH
26556: LD_EXP 55
26560: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26561: LD_EXP 72
26565: PPUSH
26566: LD_INT 110
26568: PPUSH
26569: LD_INT 23
26571: PPUSH
26572: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26576: LD_EXP 72
26580: PPUSH
26581: LD_INT 35
26583: PPUSH
26584: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26588: LD_EXP 72
26592: PPUSH
26593: LD_INT 110
26595: PPUSH
26596: LD_INT 23
26598: PPUSH
26599: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26603: LD_EXP 72
26607: PPUSH
26608: LD_INT 35
26610: PPUSH
26611: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26615: LD_EXP 72
26619: PPUSH
26620: LD_INT 110
26622: PPUSH
26623: LD_INT 23
26625: PPUSH
26626: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26630: LD_EXP 72
26634: PPUSH
26635: LD_INT 35
26637: PPUSH
26638: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26642: LD_EXP 72
26646: PPUSH
26647: LD_INT 110
26649: PPUSH
26650: LD_INT 23
26652: PPUSH
26653: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26657: LD_EXP 72
26661: PPUSH
26662: LD_INT 35
26664: PPUSH
26665: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26669: LD_EXP 72
26673: PPUSH
26674: LD_INT 87
26676: PPUSH
26677: LD_INT 19
26679: PPUSH
26680: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26684: LD_EXP 72
26688: PPUSH
26689: LD_INT 35
26691: PPUSH
26692: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26696: LD_EXP 72
26700: PPUSH
26701: LD_INT 87
26703: PPUSH
26704: LD_INT 19
26706: PPUSH
26707: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26711: LD_EXP 72
26715: PPUSH
26716: LD_INT 35
26718: PPUSH
26719: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26723: LD_EXP 72
26727: PPUSH
26728: LD_INT 87
26730: PPUSH
26731: LD_INT 19
26733: PPUSH
26734: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26738: LD_EXP 72
26742: PPUSH
26743: LD_INT 35
26745: PPUSH
26746: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26750: LD_EXP 72
26754: PPUSH
26755: LD_INT 87
26757: PPUSH
26758: LD_INT 19
26760: PPUSH
26761: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26765: LD_EXP 72
26769: PPUSH
26770: LD_INT 35
26772: PPUSH
26773: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26777: LD_EXP 72
26781: PPUSH
26782: LD_INT 52
26784: PPUSH
26785: LD_INT 12
26787: PPUSH
26788: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26792: LD_EXP 72
26796: PPUSH
26797: LD_INT 35
26799: PPUSH
26800: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26804: LD_EXP 72
26808: PPUSH
26809: LD_INT 52
26811: PPUSH
26812: LD_INT 12
26814: PPUSH
26815: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26819: LD_EXP 72
26823: PPUSH
26824: LD_INT 35
26826: PPUSH
26827: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26831: LD_EXP 72
26835: PPUSH
26836: LD_INT 52
26838: PPUSH
26839: LD_INT 12
26841: PPUSH
26842: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26846: LD_EXP 72
26850: PPUSH
26851: LD_INT 35
26853: PPUSH
26854: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26858: LD_EXP 72
26862: PPUSH
26863: LD_INT 52
26865: PPUSH
26866: LD_INT 12
26868: PPUSH
26869: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26873: LD_EXP 72
26877: PPUSH
26878: LD_INT 35
26880: PPUSH
26881: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26885: LD_EXP 72
26889: PPUSH
26890: LD_INT 52
26892: PPUSH
26893: LD_INT 12
26895: PPUSH
26896: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26900: LD_EXP 72
26904: PPUSH
26905: LD_INT 35
26907: PPUSH
26908: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26912: LD_EXP 72
26916: PPUSH
26917: LD_INT 52
26919: PPUSH
26920: LD_INT 12
26922: PPUSH
26923: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26927: LD_EXP 72
26931: PPUSH
26932: LD_INT 35
26934: PPUSH
26935: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26939: LD_EXP 72
26943: PPUSH
26944: LD_INT 52
26946: PPUSH
26947: LD_INT 12
26949: PPUSH
26950: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26954: LD_EXP 72
26958: PPUSH
26959: LD_INT 35
26961: PPUSH
26962: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26966: LD_EXP 72
26970: PPUSH
26971: LD_INT 52
26973: PPUSH
26974: LD_INT 12
26976: PPUSH
26977: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26981: LD_EXP 72
26985: PPUSH
26986: LD_INT 35
26988: PPUSH
26989: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26993: LD_EXP 72
26997: PPUSH
26998: LD_INT 27
27000: PPUSH
27001: LD_INT 13
27003: PPUSH
27004: CALL_OW 174
// end ; end ;
27008: GO 27011
27010: POP
// end ;
27011: LD_VAR 0 2
27015: RET
// every 1 1$7 do
27016: GO 27018
27018: DISABLE
// begin if Researched ( Amici , tech_Weap1 ) then
27019: LD_EXP 4
27023: PPUSH
27024: LD_INT 51
27026: PPUSH
27027: CALL_OW 325
27031: IFFALSE 27058
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
27033: LD_INT 51
27035: PPUSH
27036: LD_EXP 4
27040: PPUSH
27041: LD_INT 1
27043: PPUSH
27044: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
27048: LD_INT 9
27050: PPUSH
27051: LD_INT 51
27053: PPUSH
27054: CALL_OW 124
// end ; enable ;
27058: ENABLE
// end ;
27059: END
// every 0 0$19 do
27060: GO 27062
27062: DISABLE
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
27063: LD_INT 51
27065: PPUSH
27066: LD_EXP 4
27070: PPUSH
27071: LD_INT 1
27073: PPUSH
27074: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
27078: LD_INT 9
27080: PPUSH
27081: LD_INT 51
27083: PPUSH
27084: CALL_OW 124
// end ;
27088: END
// every 0 0$1 do var i , temp_list ;
27089: GO 27091
27091: DISABLE
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
// begin i = 1 ;
27096: LD_ADDR_VAR 0 1
27100: PUSH
27101: LD_INT 1
27103: ST_TO_ADDR
// while i <= Am_posily do
27104: LD_VAR 0 1
27108: PUSH
27109: LD_EXP 72
27113: LESSEQUAL
27114: IFFALSE 27253
// begin if IsInArea ( Am_posily [ i ] , Am_base ) or not IsLive ( i ) then
27116: LD_EXP 72
27120: PUSH
27121: LD_VAR 0 1
27125: ARRAY
27126: PPUSH
27127: LD_INT 6
27129: PPUSH
27130: CALL_OW 308
27134: PUSH
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL_OW 300
27144: NOT
27145: OR
27146: IFFALSE 27237
// begin if IsInArea ( Am_posily [ i ] , Am_base ) then
27148: LD_EXP 72
27152: PUSH
27153: LD_VAR 0 1
27157: ARRAY
27158: PPUSH
27159: LD_INT 6
27161: PPUSH
27162: CALL_OW 308
27166: IFFALSE 27215
// begin Prezite_posily = Prezite_posily + 1 ;
27168: LD_ADDR_EXP 73
27172: PUSH
27173: LD_EXP 73
27177: PUSH
27178: LD_INT 1
27180: PLUS
27181: ST_TO_ADDR
// if Prezite_posily > muze_prezit_posil [ difficulty ] then
27182: LD_EXP 73
27186: PUSH
27187: LD_EXP 23
27191: PUSH
27192: LD_OWVAR 67
27196: ARRAY
27197: GREATER
27198: IFFALSE 27215
// DestroyUnit ( Am_posily [ i ] ) ;
27200: LD_EXP 72
27204: PUSH
27205: LD_VAR 0 1
27209: ARRAY
27210: PPUSH
27211: CALL_OW 65
// end ; Am_posily = Delete ( Am_posily , i ) ;
27215: LD_ADDR_EXP 72
27219: PUSH
27220: LD_EXP 72
27224: PPUSH
27225: LD_VAR 0 1
27229: PPUSH
27230: CALL_OW 3
27234: ST_TO_ADDR
// continue ;
27235: GO 27104
// end ; i = i + 1 ;
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_VAR 0 1
27246: PUSH
27247: LD_INT 1
27249: PLUS
27250: ST_TO_ADDR
// end ;
27251: GO 27104
// enable ;
27253: ENABLE
// end ;
27254: PPOPN 2
27256: END
// every 0 0$13 do var pom ;
27257: GO 27259
27259: DISABLE
27260: LD_INT 0
27262: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_mechanic ] ] ) ;
27263: LD_ADDR_VAR 0 1
27267: PUSH
27268: LD_INT 6
27270: PPUSH
27271: LD_INT 22
27273: PUSH
27274: LD_EXP 4
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 25
27285: PUSH
27286: LD_INT 3
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PPUSH
27297: CALL_OW 70
27301: ST_TO_ADDR
// if pom > 0 then
27302: LD_VAR 0 1
27306: PUSH
27307: LD_INT 0
27309: GREATER
27310: IFFALSE 27324
// ComEnterUnit ( pom , Am_fac ) ;
27312: LD_VAR 0 1
27316: PPUSH
27317: LD_INT 10
27319: PPUSH
27320: CALL_OW 120
// enable ;
27324: ENABLE
// end ;
27325: PPOPN 1
27327: END
// every 0 0$17 do var pom ;
27328: GO 27330
27330: DISABLE
27331: LD_INT 0
27333: PPUSH
// begin pom = UnitsInside ( Am_fac ) ;
27334: LD_ADDR_VAR 0 1
27338: PUSH
27339: LD_INT 10
27341: PPUSH
27342: CALL_OW 313
27346: ST_TO_ADDR
// if pom > 3 then
27347: LD_VAR 0 1
27351: PUSH
27352: LD_INT 3
27354: GREATER
27355: IFFALSE 27376
// ComConstruct ( Am_fac , us_light_wheeled , engine_solar , control_manual , us_machine_gun ) ;
27357: LD_INT 10
27359: PPUSH
27360: LD_INT 1
27362: PPUSH
27363: LD_INT 2
27365: PPUSH
27366: LD_INT 1
27368: PPUSH
27369: LD_INT 2
27371: PPUSH
27372: CALL_OW 125
// while UnitsInside ( Am_fac ) > 3 do
27376: LD_INT 10
27378: PPUSH
27379: CALL_OW 313
27383: PUSH
27384: LD_INT 3
27386: GREATER
27387: IFFALSE 27398
// wait ( 0 0$10 ) ;
27389: LD_INT 350
27391: PPUSH
27392: CALL_OW 67
27396: GO 27376
// enable ;
27398: ENABLE
// end ;
27399: PPOPN 1
27401: END
// export function am_posily_videny_rusakama ; var i ; var videli ; begin
27402: LD_INT 0
27404: PPUSH
27405: PPUSH
27406: PPUSH
// videli = false ;
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: LD_INT 0
27414: ST_TO_ADDR
// for i in Am_posily do
27415: LD_ADDR_VAR 0 2
27419: PUSH
27420: LD_EXP 72
27424: PUSH
27425: FOR_IN
27426: IFFALSE 27454
// if See ( You , i ) then
27428: LD_EXP 1
27432: PPUSH
27433: LD_VAR 0 2
27437: PPUSH
27438: CALL_OW 292
27442: IFFALSE 27452
// videli = true ;
27444: LD_ADDR_VAR 0 3
27448: PUSH
27449: LD_INT 1
27451: ST_TO_ADDR
27452: GO 27425
27454: POP
27455: POP
// result := videli ;
27456: LD_ADDR_VAR 0 1
27460: PUSH
27461: LD_VAR 0 3
27465: ST_TO_ADDR
// end ;
27466: LD_VAR 0 1
27470: RET
// export function omicron_half_destroyed ; var pom , i ; var zije ; var a ; begin
27471: LD_INT 0
27473: PPUSH
27474: PPUSH
27475: PPUSH
27476: PPUSH
27477: PPUSH
// a = false ;
27478: LD_ADDR_VAR 0 5
27482: PUSH
27483: LD_INT 0
27485: ST_TO_ADDR
// if ( ( not IsOK ( Am_bu1 ) ) or ( GetSide ( Am_bu1 ) <> Amici ) ) and ( ( not IsOK ( Am_bu2 ) ) or GetSide ( Am_bu2 ) <> Amici ) and ( ( not IsOK ( Am_bu3 ) ) or GetSide ( Am_bu3 ) <> Amici ) and ( ( not IsOK ( Am_bar1 ) ) or GetSide ( Am_bar1 ) <> Amici ) and ( ( not IsOK ( Am_bar2 ) ) or GetSide ( Am_bar2 ) <> Amici ) then
27486: LD_INT 7
27488: PPUSH
27489: CALL_OW 302
27493: NOT
27494: PUSH
27495: LD_INT 7
27497: PPUSH
27498: CALL_OW 255
27502: PUSH
27503: LD_EXP 4
27507: NONEQUAL
27508: OR
27509: PUSH
27510: LD_INT 8
27512: PPUSH
27513: CALL_OW 302
27517: NOT
27518: PUSH
27519: LD_INT 8
27521: PPUSH
27522: CALL_OW 255
27526: PUSH
27527: LD_EXP 4
27531: NONEQUAL
27532: OR
27533: AND
27534: PUSH
27535: LD_INT 19
27537: PPUSH
27538: CALL_OW 302
27542: NOT
27543: PUSH
27544: LD_INT 19
27546: PPUSH
27547: CALL_OW 255
27551: PUSH
27552: LD_EXP 4
27556: NONEQUAL
27557: OR
27558: AND
27559: PUSH
27560: LD_INT 11
27562: PPUSH
27563: CALL_OW 302
27567: NOT
27568: PUSH
27569: LD_INT 11
27571: PPUSH
27572: CALL_OW 255
27576: PUSH
27577: LD_EXP 4
27581: NONEQUAL
27582: OR
27583: AND
27584: PUSH
27585: LD_INT 25
27587: PPUSH
27588: CALL_OW 302
27592: NOT
27593: PUSH
27594: LD_INT 25
27596: PPUSH
27597: CALL_OW 255
27601: PUSH
27602: LD_EXP 4
27606: NONEQUAL
27607: OR
27608: AND
27609: IFFALSE 27619
// a = true ;
27611: LD_ADDR_VAR 0 5
27615: PUSH
27616: LD_INT 1
27618: ST_TO_ADDR
// result = a ;
27619: LD_ADDR_VAR 0 1
27623: PUSH
27624: LD_VAR 0 5
27628: ST_TO_ADDR
// end ;
27629: LD_VAR 0 1
27633: RET
// export function stahnuti_amiku ; var i ; var pom , pom1 , pom2 , pomx ; begin
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
27641: PPUSH
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27642: LD_ADDR_VAR 0 3
27646: PUSH
27647: LD_INT 6
27649: PPUSH
27650: LD_INT 22
27652: PUSH
27653: LD_EXP 4
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 21
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PPUSH
27676: CALL_OW 70
27680: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27681: LD_ADDR_VAR 0 5
27685: PUSH
27686: LD_INT 6
27688: PPUSH
27689: LD_INT 22
27691: PUSH
27692: LD_EXP 4
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 21
27703: PUSH
27704: LD_INT 3
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PPUSH
27715: CALL_OW 70
27719: ST_TO_ADDR
// for i in pom2 do
27720: LD_ADDR_VAR 0 2
27724: PUSH
27725: LD_VAR 0 5
27729: PUSH
27730: FOR_IN
27731: IFFALSE 27771
// if UnitsInside ( i ) <> 0 then
27733: LD_VAR 0 2
27737: PPUSH
27738: CALL_OW 313
27742: PUSH
27743: LD_INT 0
27745: NONEQUAL
27746: IFFALSE 27769
// pom = pom ^ UnitsInside ( i ) ;
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_VAR 0 3
27757: PUSH
27758: LD_VAR 0 2
27762: PPUSH
27763: CALL_OW 313
27767: ADD
27768: ST_TO_ADDR
27769: GO 27730
27771: POP
27772: POP
// ComExitBuilding ( pom ) ;
27773: LD_VAR 0 3
27777: PPUSH
27778: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27782: LD_VAR 0 3
27786: PPUSH
27787: LD_INT 6
27789: PPUSH
27790: LD_INT 2
27792: PPUSH
27793: CALL_OW 171
// wait ( 0 0$1 ) ;
27797: LD_INT 35
27799: PPUSH
27800: CALL_OW 67
// while pom > 0 do
27804: LD_VAR 0 3
27808: PUSH
27809: LD_INT 0
27811: GREATER
27812: IFFALSE 28048
// begin pom1 = FilterUnitsInArea ( ODBER_AM2 , [ [ f_side , Amici ] ] ) ;
27814: LD_ADDR_VAR 0 4
27818: PUSH
27819: LD_INT 38
27821: PPUSH
27822: LD_INT 22
27824: PUSH
27825: LD_EXP 4
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: PPUSH
27837: CALL_OW 70
27841: ST_TO_ADDR
// for i in pom1 do
27842: LD_ADDR_VAR 0 2
27846: PUSH
27847: LD_VAR 0 4
27851: PUSH
27852: FOR_IN
27853: IFFALSE 27882
// begin RemoveUnit ( i ) ;
27855: LD_VAR 0 2
27859: PPUSH
27860: CALL_OW 64
// pom = pom diff i ;
27864: LD_ADDR_VAR 0 3
27868: PUSH
27869: LD_VAR 0 3
27873: PUSH
27874: LD_VAR 0 2
27878: DIFF
27879: ST_TO_ADDR
// end ;
27880: GO 27852
27882: POP
27883: POP
// wait ( 0 0$1 ) ;
27884: LD_INT 35
27886: PPUSH
27887: CALL_OW 67
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27891: LD_ADDR_VAR 0 3
27895: PUSH
27896: LD_INT 6
27898: PPUSH
27899: LD_INT 22
27901: PUSH
27902: LD_EXP 4
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 21
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PPUSH
27925: CALL_OW 70
27929: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27930: LD_ADDR_VAR 0 5
27934: PUSH
27935: LD_INT 6
27937: PPUSH
27938: LD_INT 22
27940: PUSH
27941: LD_EXP 4
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 21
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PPUSH
27964: CALL_OW 70
27968: ST_TO_ADDR
// for i in pom2 do
27969: LD_ADDR_VAR 0 2
27973: PUSH
27974: LD_VAR 0 5
27978: PUSH
27979: FOR_IN
27980: IFFALSE 28020
// if UnitsInside ( i ) <> 0 then
27982: LD_VAR 0 2
27986: PPUSH
27987: CALL_OW 313
27991: PUSH
27992: LD_INT 0
27994: NONEQUAL
27995: IFFALSE 28018
// pom = pom ^ UnitsInside ( i ) ;
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_VAR 0 3
28006: PUSH
28007: LD_VAR 0 2
28011: PPUSH
28012: CALL_OW 313
28016: ADD
28017: ST_TO_ADDR
28018: GO 27979
28020: POP
28021: POP
// ComExitBuilding ( pom ) ;
28022: LD_VAR 0 3
28026: PPUSH
28027: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
28031: LD_VAR 0 3
28035: PPUSH
28036: LD_INT 6
28038: PPUSH
28039: LD_INT 2
28041: PPUSH
28042: CALL_OW 171
// end ;
28046: GO 27804
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
28048: LD_ADDR_VAR 0 3
28052: PUSH
28053: LD_INT 22
28055: PPUSH
28056: LD_INT 22
28058: PUSH
28059: LD_EXP 4
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 70
28086: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
28087: LD_ADDR_VAR 0 5
28091: PUSH
28092: LD_INT 22
28094: PPUSH
28095: LD_INT 22
28097: PUSH
28098: LD_EXP 4
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 21
28109: PUSH
28110: LD_INT 3
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PPUSH
28121: CALL_OW 70
28125: ST_TO_ADDR
// for i in pom2 do
28126: LD_ADDR_VAR 0 2
28130: PUSH
28131: LD_VAR 0 5
28135: PUSH
28136: FOR_IN
28137: IFFALSE 28177
// if UnitsInside ( i ) <> 0 then
28139: LD_VAR 0 2
28143: PPUSH
28144: CALL_OW 313
28148: PUSH
28149: LD_INT 0
28151: NONEQUAL
28152: IFFALSE 28175
// pom = pom ^ UnitsInside ( i ) ;
28154: LD_ADDR_VAR 0 3
28158: PUSH
28159: LD_VAR 0 3
28163: PUSH
28164: LD_VAR 0 2
28168: PPUSH
28169: CALL_OW 313
28173: ADD
28174: ST_TO_ADDR
28175: GO 28136
28177: POP
28178: POP
// ComExitBuilding ( pom ) ;
28179: LD_VAR 0 3
28183: PPUSH
28184: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
28188: LD_VAR 0 3
28192: PPUSH
28193: LD_INT 138
28195: PPUSH
28196: LD_INT 40
28198: PPUSH
28199: CALL_OW 171
// wait ( 0 0$1 ) ;
28203: LD_INT 35
28205: PPUSH
28206: CALL_OW 67
// while pom + 0 > 0 do
28210: LD_VAR 0 3
28214: PUSH
28215: LD_INT 0
28217: PLUS
28218: PUSH
28219: LD_INT 0
28221: GREATER
28222: IFFALSE 28458
// begin pom1 = FilterUnitsInArea ( ODBER_AM , [ [ f_side , Amici ] ] ) ;
28224: LD_ADDR_VAR 0 4
28228: PUSH
28229: LD_INT 35
28231: PPUSH
28232: LD_INT 22
28234: PUSH
28235: LD_EXP 4
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: PPUSH
28247: CALL_OW 70
28251: ST_TO_ADDR
// for i in pom1 do
28252: LD_ADDR_VAR 0 2
28256: PUSH
28257: LD_VAR 0 4
28261: PUSH
28262: FOR_IN
28263: IFFALSE 28292
// begin RemoveUnit ( i ) ;
28265: LD_VAR 0 2
28269: PPUSH
28270: CALL_OW 64
// pom = pom diff i ;
28274: LD_ADDR_VAR 0 3
28278: PUSH
28279: LD_VAR 0 3
28283: PUSH
28284: LD_VAR 0 2
28288: DIFF
28289: ST_TO_ADDR
// end ;
28290: GO 28262
28292: POP
28293: POP
// wait ( 0 0$1 ) ;
28294: LD_INT 35
28296: PPUSH
28297: CALL_OW 67
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_INT 22
28308: PPUSH
28309: LD_INT 22
28311: PUSH
28312: LD_EXP 4
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 21
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PPUSH
28335: CALL_OW 70
28339: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
28340: LD_ADDR_VAR 0 5
28344: PUSH
28345: LD_INT 22
28347: PPUSH
28348: LD_INT 22
28350: PUSH
28351: LD_EXP 4
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 21
28362: PUSH
28363: LD_INT 3
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PPUSH
28374: CALL_OW 70
28378: ST_TO_ADDR
// for i in pom2 do
28379: LD_ADDR_VAR 0 2
28383: PUSH
28384: LD_VAR 0 5
28388: PUSH
28389: FOR_IN
28390: IFFALSE 28430
// if UnitsInside ( i ) <> 0 then
28392: LD_VAR 0 2
28396: PPUSH
28397: CALL_OW 313
28401: PUSH
28402: LD_INT 0
28404: NONEQUAL
28405: IFFALSE 28428
// pom = pom ^ UnitsInside ( i ) ;
28407: LD_ADDR_VAR 0 3
28411: PUSH
28412: LD_VAR 0 3
28416: PUSH
28417: LD_VAR 0 2
28421: PPUSH
28422: CALL_OW 313
28426: ADD
28427: ST_TO_ADDR
28428: GO 28389
28430: POP
28431: POP
// ComExitBuilding ( pom ) ;
28432: LD_VAR 0 3
28436: PPUSH
28437: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
28441: LD_VAR 0 3
28445: PPUSH
28446: LD_INT 138
28448: PPUSH
28449: LD_INT 40
28451: PPUSH
28452: CALL_OW 171
// end ;
28456: GO 28210
// end ; end_of_file
28458: LD_VAR 0 1
28462: RET
// var arabsky_utok_zacal ; export posilani_arabskych_hlidek ; every 0 0$0.1 do
28463: GO 28465
28465: DISABLE
// begin posilani_arabskych_hlidek = false ;
28466: LD_ADDR_EXP 74
28470: PUSH
28471: LD_INT 0
28473: ST_TO_ADDR
// end ;
28474: END
// export function utok_arabu ; var i , pom ; begin
28475: LD_INT 0
28477: PPUSH
28478: PPUSH
28479: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
28480: LD_ADDR_VAR 0 3
28484: PUSH
28485: LD_INT 22
28487: PUSH
28488: LD_EXP 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: EMPTY
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: ST_TO_ADDR
// ArDontAttackPlayer ( true ) ;
28505: LD_INT 1
28507: PPUSH
28508: CALL 29512 0 1
// InGameOn ;
28512: CALL_OW 8
// ComStop ( pom ) ;
28516: LD_VAR 0 3
28520: PPUSH
28521: CALL_OW 141
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
28525: LD_ADDR_VAR 0 2
28529: PUSH
28530: LD_INT 22
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 3
28542: PUSH
28543: LD_INT 21
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PPUSH
28561: CALL_OW 69
28565: PUSH
28566: FOR_IN
28567: IFFALSE 28586
// ComMoveXY ( i , 59 , 12 ) ;
28569: LD_VAR 0 2
28573: PPUSH
28574: LD_INT 59
28576: PPUSH
28577: LD_INT 12
28579: PPUSH
28580: CALL_OW 111
28584: GO 28566
28586: POP
28587: POP
// EnableVideoExclamations ;
28588: CALL_OW 498
// CenterNowOnXY ( 142 , 80 ) ;
28592: LD_INT 142
28594: PPUSH
28595: LD_INT 80
28597: PPUSH
28598: CALL_OW 86
// arabsky_utok_zacal = true ;
28602: LD_ADDR_LOC 27
28606: PUSH
28607: LD_INT 1
28609: ST_TO_ADDR
// posli_rusy_pryc ;
28610: CALL 8113 0 0
// schovej_kurina ;
28614: CALL 9212 0 0
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 1 ] , Opoce1 , false ) ;
28618: LD_EXP 60
28622: PUSH
28623: LD_INT 1
28625: ARRAY
28626: PPUSH
28627: LD_INT 10
28629: PPUSH
28630: LD_INT 0
28632: PPUSH
28633: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 2 ] , Opoce2 , false ) ;
28637: LD_EXP 60
28641: PUSH
28642: LD_INT 2
28644: ARRAY
28645: PPUSH
28646: LD_INT 11
28648: PPUSH
28649: LD_INT 0
28651: PPUSH
28652: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 3 ] , Opoce2 , false ) ;
28656: LD_EXP 60
28660: PUSH
28661: LD_INT 3
28663: ARRAY
28664: PPUSH
28665: LD_INT 11
28667: PPUSH
28668: LD_INT 0
28670: PPUSH
28671: CALL_OW 49
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 134 , 62 ) ;
28675: LD_EXP 60
28679: PUSH
28680: LD_INT 1
28682: ARRAY
28683: PPUSH
28684: LD_INT 134
28686: PPUSH
28687: LD_INT 62
28689: PPUSH
28690: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 133 , 69 ) ;
28694: LD_EXP 60
28698: PUSH
28699: LD_INT 1
28701: ARRAY
28702: PPUSH
28703: LD_INT 133
28705: PPUSH
28706: LD_INT 69
28708: PPUSH
28709: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_bu1 ) ;
28713: LD_EXP 60
28717: PUSH
28718: LD_INT 1
28720: ARRAY
28721: PPUSH
28722: LD_INT 3
28724: PPUSH
28725: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_fac ) ;
28729: LD_EXP 60
28733: PUSH
28734: LD_INT 1
28736: ARRAY
28737: PPUSH
28738: LD_INT 5
28740: PPUSH
28741: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_dep ) ;
28745: LD_EXP 60
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: PPUSH
28754: LD_INT 1
28756: PPUSH
28757: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 142 , 94 ) ;
28761: LD_EXP 60
28765: PUSH
28766: LD_INT 2
28768: ARRAY
28769: PPUSH
28770: LD_INT 142
28772: PPUSH
28773: LD_INT 94
28775: PPUSH
28776: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 140 , 90 ) ;
28780: LD_EXP 60
28784: PUSH
28785: LD_INT 2
28787: ARRAY
28788: PPUSH
28789: LD_INT 140
28791: PPUSH
28792: LD_INT 90
28794: PPUSH
28795: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_el1 ) ;
28799: LD_EXP 60
28803: PUSH
28804: LD_INT 2
28806: ARRAY
28807: PPUSH
28808: LD_INT 14
28810: PPUSH
28811: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_fac ) ;
28815: LD_EXP 60
28819: PUSH
28820: LD_INT 2
28822: ARRAY
28823: PPUSH
28824: LD_INT 5
28826: PPUSH
28827: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_dep ) ;
28831: LD_EXP 60
28835: PUSH
28836: LD_INT 2
28838: ARRAY
28839: PPUSH
28840: LD_INT 1
28842: PPUSH
28843: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 143 , 94 ) ;
28847: LD_EXP 60
28851: PUSH
28852: LD_INT 3
28854: ARRAY
28855: PPUSH
28856: LD_INT 143
28858: PPUSH
28859: LD_INT 94
28861: PPUSH
28862: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 141 , 90 ) ;
28866: LD_EXP 60
28870: PUSH
28871: LD_INT 3
28873: ARRAY
28874: PPUSH
28875: LD_INT 141
28877: PPUSH
28878: LD_INT 90
28880: PPUSH
28881: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_bar1 ) ;
28885: LD_EXP 60
28889: PUSH
28890: LD_INT 3
28892: ARRAY
28893: PPUSH
28894: LD_INT 2
28896: PPUSH
28897: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_fac ) ;
28901: LD_EXP 60
28905: PUSH
28906: LD_INT 3
28908: ARRAY
28909: PPUSH
28910: LD_INT 5
28912: PPUSH
28913: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_dep ) ;
28917: LD_EXP 60
28921: PUSH
28922: LD_INT 3
28924: ARRAY
28925: PPUSH
28926: LD_INT 1
28928: PPUSH
28929: CALL_OW 175
// music_nat = nation_arabian ;
28933: LD_ADDR_OWVAR 71
28937: PUSH
28938: LD_INT 2
28940: ST_TO_ADDR
// CenterOnXY ( 142 , 80 ) ;
28941: LD_INT 142
28943: PPUSH
28944: LD_INT 80
28946: PPUSH
28947: CALL_OW 84
// for i in ARABI_SELF_AUTA do
28951: LD_ADDR_VAR 0 2
28955: PUSH
28956: LD_EXP 63
28960: PUSH
28961: FOR_IN
28962: IFFALSE 28981
// PlaceUnitArea ( i , Arabi2 , false ) ;
28964: LD_VAR 0 2
28968: PPUSH
28969: LD_INT 13
28971: PPUSH
28972: LD_INT 0
28974: PPUSH
28975: CALL_OW 49
28979: GO 28961
28981: POP
28982: POP
// ComAttackUnit ( ARABI_SELF_AUTA [ 1 ] , RU1_bar2 ) ;
28983: LD_EXP 63
28987: PUSH
28988: LD_INT 1
28990: ARRAY
28991: PPUSH
28992: LD_INT 17
28994: PPUSH
28995: CALL_OW 115
// ComWait ( ARABI_SELF_AUTA [ 2 ] , 0 0$1 ) ;
28999: LD_EXP 63
29003: PUSH
29004: LD_INT 2
29006: ARRAY
29007: PPUSH
29008: LD_INT 35
29010: PPUSH
29011: CALL_OW 142
// AddComAttackUnit ( ARABI_SELF_AUTA [ 2 ] , RU1_dep ) ;
29015: LD_EXP 63
29019: PUSH
29020: LD_INT 2
29022: ARRAY
29023: PPUSH
29024: LD_INT 1
29026: PPUSH
29027: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
29031: LD_INT 142
29033: PPUSH
29034: LD_INT 80
29036: PPUSH
29037: CALL_OW 84
// for i in ARABI_PRVNI_VLNA do
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_EXP 61
29050: PUSH
29051: FOR_IN
29052: IFFALSE 29071
// PlaceUnitArea ( i , Arabi1 , false ) ;
29054: LD_VAR 0 2
29058: PPUSH
29059: LD_INT 12
29061: PPUSH
29062: LD_INT 0
29064: PPUSH
29065: CALL_OW 49
29069: GO 29051
29071: POP
29072: POP
// ComMoveXY ( ARABI_PRVNI_VLNA , 139 , 78 ) ;
29073: LD_EXP 61
29077: PPUSH
29078: LD_INT 139
29080: PPUSH
29081: LD_INT 78
29083: PPUSH
29084: CALL_OW 111
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bar1 ) ;
29088: LD_EXP 61
29092: PPUSH
29093: LD_INT 2
29095: PPUSH
29096: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu2 ) ;
29100: LD_EXP 61
29104: PPUSH
29105: LD_INT 4
29107: PPUSH
29108: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu1 ) ;
29112: LD_EXP 61
29116: PPUSH
29117: LD_INT 3
29119: PPUSH
29120: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab2 ) ;
29124: LD_EXP 61
29128: PPUSH
29129: LD_INT 16
29131: PPUSH
29132: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_dep ) ;
29136: LD_EXP 61
29140: PPUSH
29141: LD_INT 1
29143: PPUSH
29144: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab1 ) ;
29148: LD_EXP 61
29152: PPUSH
29153: LD_INT 6
29155: PPUSH
29156: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_fac ) ;
29160: LD_EXP 61
29164: PPUSH
29165: LD_INT 5
29167: PPUSH
29168: CALL_OW 175
// AddComAgressiveMove ( ARABI_PRVNI_VLNA , 143 , 79 ) ;
29172: LD_EXP 61
29176: PPUSH
29177: LD_INT 143
29179: PPUSH
29180: LD_INT 79
29182: PPUSH
29183: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
29187: LD_INT 142
29189: PPUSH
29190: LD_INT 80
29192: PPUSH
29193: CALL_OW 84
// DisableVideoExclamations ;
29197: CALL_OW 499
// InGameOff ;
29201: CALL_OW 9
// interface_hidden := true ;
29205: LD_ADDR_OWVAR 54
29209: PUSH
29210: LD_INT 1
29212: ST_TO_ADDR
// kecy_behem_utoku_arabu ;
29213: CALL 13927 0 0
// InGameOn ;
29217: CALL_OW 8
// EnableVideoExclamations ;
29221: CALL_OW 498
// CenterOnXY ( 142 , 80 ) ;
29225: LD_INT 142
29227: PPUSH
29228: LD_INT 80
29230: PPUSH
29231: CALL_OW 84
// wait ( 0 0$4 ) ;
29235: LD_INT 140
29237: PPUSH
29238: CALL_OW 67
// posli_kurina_na_smrt ;
29242: CALL 9232 0 0
// for i in ARABI_FLAME_LIST do
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: LD_EXP 62
29255: PUSH
29256: FOR_IN
29257: IFFALSE 29276
// PlaceUnitArea ( i , Arabi2 , false ) ;
29259: LD_VAR 0 2
29263: PPUSH
29264: LD_INT 13
29266: PPUSH
29267: LD_INT 0
29269: PPUSH
29270: CALL_OW 49
29274: GO 29256
29276: POP
29277: POP
// ComMoveXY ( ARABI_FLAME_LIST , 139 , 78 ) ;
29278: LD_EXP 62
29282: PPUSH
29283: LD_INT 139
29285: PPUSH
29286: LD_INT 78
29288: PPUSH
29289: CALL_OW 111
// AddComAttackUnit ( ARABI_FLAME_LIST , RU1_bar1 ) ;
29293: LD_EXP 62
29297: PPUSH
29298: LD_INT 2
29300: PPUSH
29301: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
29305: LD_INT 142
29307: PPUSH
29308: LD_INT 80
29310: PPUSH
29311: CALL_OW 84
// for i in ARABI_VOJACI do
29315: LD_ADDR_VAR 0 2
29319: PUSH
29320: LD_EXP 64
29324: PUSH
29325: FOR_IN
29326: IFFALSE 29345
// PlaceUnitArea ( i , Arabi1 , false ) ;
29328: LD_VAR 0 2
29332: PPUSH
29333: LD_INT 12
29335: PPUSH
29336: LD_INT 0
29338: PPUSH
29339: CALL_OW 49
29343: GO 29325
29345: POP
29346: POP
// ComMoveXY ( ARABI_VOJACI , 153 , 84 ) ;
29347: LD_EXP 64
29351: PPUSH
29352: LD_INT 153
29354: PPUSH
29355: LD_INT 84
29357: PPUSH
29358: CALL_OW 111
// AddComAgressiveMove ( ARABI_VOJACI , 150 , 83 ) ;
29362: LD_EXP 64
29366: PPUSH
29367: LD_INT 150
29369: PPUSH
29370: LD_INT 83
29372: PPUSH
29373: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 78 ) ;
29377: LD_EXP 64
29381: PPUSH
29382: LD_INT 141
29384: PPUSH
29385: LD_INT 78
29387: PPUSH
29388: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 86 ) ;
29392: LD_EXP 64
29396: PPUSH
29397: LD_INT 141
29399: PPUSH
29400: LD_INT 86
29402: PPUSH
29403: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
29407: LD_INT 142
29409: PPUSH
29410: LD_INT 80
29412: PPUSH
29413: CALL_OW 84
// wait ( 0 0$5 ) ;
29417: LD_INT 175
29419: PPUSH
29420: CALL_OW 67
// for i in ARABI_doraz do
29424: LD_ADDR_VAR 0 2
29428: PUSH
29429: LD_EXP 65
29433: PUSH
29434: FOR_IN
29435: IFFALSE 29454
// PlaceUnitArea ( i , Arabi1 , false ) ;
29437: LD_VAR 0 2
29441: PPUSH
29442: LD_INT 12
29444: PPUSH
29445: LD_INT 0
29447: PPUSH
29448: CALL_OW 49
29452: GO 29434
29454: POP
29455: POP
// ComMoveXY ( ARABI_doraz , 153 , 85 ) ;
29456: LD_EXP 65
29460: PPUSH
29461: LD_INT 153
29463: PPUSH
29464: LD_INT 85
29466: PPUSH
29467: CALL_OW 111
// AddComAttackUnit ( ARABI_doraz , RU1_dep ) ;
29471: LD_EXP 65
29475: PPUSH
29476: LD_INT 1
29478: PPUSH
29479: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab1 ) ;
29483: LD_EXP 65
29487: PPUSH
29488: LD_INT 6
29490: PPUSH
29491: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab2 ) ;
29495: LD_EXP 65
29499: PPUSH
29500: LD_INT 16
29502: PPUSH
29503: CALL_OW 175
// end ;
29507: LD_VAR 0 1
29511: RET
// export function ArDontAttackPlayer ( bol ) ; var i ; begin
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
// for i in FilterAllUnits ( [ f_side , You ] ) do
29516: LD_ADDR_VAR 0 3
29520: PUSH
29521: LD_INT 22
29523: PUSH
29524: LD_EXP 1
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PPUSH
29533: CALL_OW 69
29537: PUSH
29538: FOR_IN
29539: IFFALSE 29579
// if bol then
29541: LD_VAR 0 1
29545: IFFALSE 29563
// DoNotAttack ( Arabi , i ) else
29547: LD_EXP 5
29551: PPUSH
29552: LD_VAR 0 3
29556: PPUSH
29557: CALL_OW 471
29561: GO 29577
// NormalAttack ( Arabi , i ) ;
29563: LD_EXP 5
29567: PPUSH
29568: LD_VAR 0 3
29572: PPUSH
29573: CALL_OW 472
29577: GO 29538
29579: POP
29580: POP
// end ;
29581: LD_VAR 0 2
29585: RET
// every 0 0$5 trigger arabsky_utok_zacal do var pom , pom1 , i ; var utek ;
29586: LD_LOC 27
29590: IFFALSE 29774
29592: GO 29594
29594: DISABLE
29595: LD_INT 0
29597: PPUSH
29598: PPUSH
29599: PPUSH
29600: PPUSH
// begin utek = [ ] ;
29601: LD_ADDR_VAR 0 4
29605: PUSH
29606: EMPTY
29607: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) ;
29608: LD_ADDR_VAR 0 1
29612: PUSH
29613: LD_INT 14
29615: PPUSH
29616: LD_INT 22
29618: PUSH
29619: LD_EXP 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 50
29630: PUSH
29631: EMPTY
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PPUSH
29638: CALL_OW 70
29642: ST_TO_ADDR
// if pom < 2 then
29643: LD_VAR 0 1
29647: PUSH
29648: LD_INT 2
29650: LESS
29651: IFFALSE 29748
// begin pom1 = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_ok ] ] ) ;
29653: LD_ADDR_VAR 0 2
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_EXP 5
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 50
29672: PUSH
29673: EMPTY
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 69
29684: ST_TO_ADDR
// if pom1 > 0 then
29685: LD_VAR 0 2
29689: PUSH
29690: LD_INT 0
29692: GREATER
29693: IFFALSE 29748
// for i in pom1 do
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: LD_VAR 0 2
29704: PUSH
29705: FOR_IN
29706: IFFALSE 29746
// if utek < 3 then
29708: LD_VAR 0 4
29712: PUSH
29713: LD_INT 3
29715: LESS
29716: IFFALSE 29736
// utek = utek ^ i else
29718: LD_ADDR_VAR 0 4
29722: PUSH
29723: LD_VAR 0 4
29727: PUSH
29728: LD_VAR 0 3
29732: ADD
29733: ST_TO_ADDR
29734: GO 29744
// arabsky_utok_zacal = false ;
29736: LD_ADDR_LOC 27
29740: PUSH
29741: LD_INT 0
29743: ST_TO_ADDR
29744: GO 29705
29746: POP
29747: POP
// end ; if utek > 0 then
29748: LD_VAR 0 4
29752: PUSH
29753: LD_INT 0
29755: GREATER
29756: IFFALSE 29773
// ComMoveXY ( utek , 166 , 95 ) ;
29758: LD_VAR 0 4
29762: PPUSH
29763: LD_INT 166
29765: PPUSH
29766: LD_INT 95
29768: PPUSH
29769: CALL_OW 111
// enable ;
29773: ENABLE
// end ;
29774: PPOPN 4
29776: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) < 2 do var pom , i ;
29777: LD_INT 14
29779: PPUSH
29780: LD_INT 22
29782: PUSH
29783: LD_EXP 2
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 50
29794: PUSH
29795: EMPTY
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PPUSH
29802: CALL_OW 70
29806: PUSH
29807: LD_INT 2
29809: LESS
29810: IFFALSE 29874
29812: GO 29814
29814: DISABLE
29815: LD_INT 0
29817: PPUSH
29818: PPUSH
// begin pom = FilterUnitsInArea ( Arabi2 , [ [ f_side , Arabi ] ] ) ;
29819: LD_ADDR_VAR 0 1
29823: PUSH
29824: LD_INT 13
29826: PPUSH
29827: LD_INT 22
29829: PUSH
29830: LD_EXP 5
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: PPUSH
29842: CALL_OW 70
29846: ST_TO_ADDR
// for i in pom do
29847: LD_ADDR_VAR 0 2
29851: PUSH
29852: LD_VAR 0 1
29856: PUSH
29857: FOR_IN
29858: IFFALSE 29871
// RemoveUnit ( i ) ;
29860: LD_VAR 0 2
29864: PPUSH
29865: CALL_OW 64
29869: GO 29857
29871: POP
29872: POP
// enable ;
29873: ENABLE
// end ;
29874: PPOPN 2
29876: END
// every 0 0$4 trigger arabsky_utok_zacal do
29877: LD_LOC 27
29881: IFFALSE 29977
29883: GO 29885
29885: DISABLE
// begin if GetLives ( RU1_el1 ) < 1000 and GetLives ( RU1_el1 ) < 150 then
29886: LD_INT 14
29888: PPUSH
29889: CALL_OW 256
29893: PUSH
29894: LD_INT 1000
29896: LESS
29897: PUSH
29898: LD_INT 14
29900: PPUSH
29901: CALL_OW 256
29905: PUSH
29906: LD_INT 150
29908: LESS
29909: AND
29910: IFFALSE 29922
// SetLives ( RU1_el1 , 150 ) ;
29912: LD_INT 14
29914: PPUSH
29915: LD_INT 150
29917: PPUSH
29918: CALL_OW 234
// if GetLives ( RU1_el2 ) < 1000 and GetLives ( RU1_el2 ) < 150 then
29922: LD_INT 15
29924: PPUSH
29925: CALL_OW 256
29929: PUSH
29930: LD_INT 1000
29932: LESS
29933: PUSH
29934: LD_INT 15
29936: PPUSH
29937: CALL_OW 256
29941: PUSH
29942: LD_INT 150
29944: LESS
29945: AND
29946: IFFALSE 29958
// SetLives ( RU1_el2 , 150 ) ;
29948: LD_INT 15
29950: PPUSH
29951: LD_INT 150
29953: PPUSH
29954: CALL_OW 234
// if IsOK ( RU1_el1 ) or IsOK ( RU1_el2 ) then
29958: LD_INT 14
29960: PPUSH
29961: CALL_OW 302
29965: PUSH
29966: LD_INT 15
29968: PPUSH
29969: CALL_OW 302
29973: OR
29974: IFFALSE 29977
// enable ;
29976: ENABLE
// end ;
29977: END
// every 0 0$5 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) <= 3 do var i ;
29978: LD_INT 14
29980: PPUSH
29981: LD_INT 22
29983: PUSH
29984: LD_EXP 2
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 50
29995: PUSH
29996: EMPTY
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PPUSH
30003: CALL_OW 70
30007: PUSH
30008: LD_INT 3
30010: LESSEQUAL
30011: IFFALSE 30058
30013: GO 30015
30015: DISABLE
30016: LD_INT 0
30018: PPUSH
// begin ArDontAttackPlayer ( false ) ;
30019: LD_INT 0
30021: PPUSH
30022: CALL 29512 0 1
// arabi_kirov_posily_posli ;
30026: CALL 30145 0 0
// DisableVideoExclamations ;
30030: CALL_OW 499
// music_nat = 0 ;
30034: LD_ADDR_OWVAR 71
30038: PUSH
30039: LD_INT 0
30041: ST_TO_ADDR
// chmo_6 ;
30042: CALL 16624 0 0
// InGameOff ;
30046: CALL_OW 9
// stav_omikron = 8 ;
30050: LD_ADDR_EXP 39
30054: PUSH
30055: LD_INT 8
30057: ST_TO_ADDR
// end ;
30058: PPOPN 1
30060: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) > 2 do var pom ;
30061: LD_INT 14
30063: PPUSH
30064: LD_INT 22
30066: PUSH
30067: LD_EXP 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: EMPTY
30077: LIST
30078: PPUSH
30079: CALL_OW 70
30083: PUSH
30084: LD_INT 2
30086: GREATER
30087: IFFALSE 30142
30089: GO 30091
30091: DISABLE
30092: LD_INT 0
30094: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) ;
30095: LD_ADDR_VAR 0 1
30099: PUSH
30100: LD_INT 14
30102: PPUSH
30103: LD_INT 22
30105: PUSH
30106: LD_EXP 2
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: PPUSH
30118: CALL_OW 70
30122: ST_TO_ADDR
// ComAttackUnit ( ARABI_doraz , pom [ 1 ] ) ;
30123: LD_EXP 65
30127: PPUSH
30128: LD_VAR 0 1
30132: PUSH
30133: LD_INT 1
30135: ARRAY
30136: PPUSH
30137: CALL_OW 115
// enable ;
30141: ENABLE
// end ;
30142: PPOPN 1
30144: END
// function arabi_kirov_posily_posli ; var i ; begin
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
// for i in ARABI_KIROV_POSILY do
30149: LD_ADDR_VAR 0 2
30153: PUSH
30154: LD_EXP 66
30158: PUSH
30159: FOR_IN
30160: IFFALSE 30179
// PlaceUnitArea ( i , Arabi3 , false ) ;
30162: LD_VAR 0 2
30166: PPUSH
30167: LD_INT 33
30169: PPUSH
30170: LD_INT 0
30172: PPUSH
30173: CALL_OW 49
30177: GO 30159
30179: POP
30180: POP
// ComAgressiveMove ( ARABI_KIROV_POSILY , 142 , 84 ) ;
30181: LD_EXP 66
30185: PPUSH
30186: LD_INT 142
30188: PPUSH
30189: LD_INT 84
30191: PPUSH
30192: CALL_OW 114
// end ;
30196: LD_VAR 0 1
30200: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 4 do var i ;
30201: LD_INT 22
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: LD_INT 24
30216: PUSH
30217: LD_INT 1000
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PPUSH
30232: CALL_OW 69
30236: PUSH
30237: LD_INT 4
30239: GREATER
30240: IFFALSE 30324
30242: GO 30244
30244: DISABLE
30245: LD_INT 0
30247: PPUSH
// begin enable ;
30248: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
30249: LD_ADDR_VAR 0 1
30253: PUSH
30254: LD_INT 22
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: LD_INT 24
30269: PUSH
30270: LD_INT 1000
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PPUSH
30285: CALL_OW 69
30289: PUSH
30290: FOR_IN
30291: IFFALSE 30322
// if GetLives ( i ) > 500 then
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL_OW 256
30302: PUSH
30303: LD_INT 500
30305: GREATER
30306: IFFALSE 30320
// SetLives ( i , 1000 ) ;
30308: LD_VAR 0 1
30312: PPUSH
30313: LD_INT 1000
30315: PPUSH
30316: CALL_OW 234
30320: GO 30290
30322: POP
30323: POP
// end ; end_of_file
30324: PPOPN 1
30326: END
// export function SA_DontSaveScholtze ; begin
30327: LD_INT 0
30329: PPUSH
// SetAchievement ( ACH_EPR ) ;
30330: LD_STRING ACH_EPR
30332: PPUSH
30333: CALL_OW 543
// end ;
30337: LD_VAR 0 1
30341: RET
// export function SA_OneDepotWin ; begin
30342: LD_INT 0
30344: PPUSH
// SetAchievement ( ACH_PON ) ;
30345: LD_STRING ACH_PON
30347: PPUSH
30348: CALL_OW 543
// end ; end_of_file
30352: LD_VAR 0 1
30356: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
30357: LD_INT 0
30359: PPUSH
30360: PPUSH
// if not missionNumber then
30361: LD_VAR 0 2
30365: NOT
30366: IFFALSE 30370
// exit ;
30368: GO 30500
// achiv := false ;
30370: LD_ADDR_VAR 0 7
30374: PUSH
30375: LD_INT 0
30377: ST_TO_ADDR
// case campaignNumber of 1 :
30378: LD_VAR 0 1
30382: PUSH
30383: LD_INT 1
30385: DOUBLE
30386: EQUAL
30387: IFTRUE 30391
30389: GO 30402
30391: POP
// achiv := ACH_GOTA ; 2 :
30392: LD_ADDR_VAR 0 7
30396: PUSH
30397: LD_STRING ACH_GOTA
30399: ST_TO_ADDR
30400: GO 30452
30402: LD_INT 2
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30413
30410: POP
// ; 3 :
30411: GO 30452
30413: LD_INT 3
30415: DOUBLE
30416: EQUAL
30417: IFTRUE 30421
30419: GO 30432
30421: POP
// achiv := ACH_MOTSU ; 4 :
30422: LD_ADDR_VAR 0 7
30426: PUSH
30427: LD_STRING ACH_MOTSU
30429: ST_TO_ADDR
30430: GO 30452
30432: LD_INT 4
30434: DOUBLE
30435: EQUAL
30436: IFTRUE 30440
30438: GO 30451
30440: POP
// achiv := ACH_LOP ; end ;
30441: LD_ADDR_VAR 0 7
30445: PUSH
30446: LD_STRING ACH_LOP
30448: ST_TO_ADDR
30449: GO 30452
30451: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
30452: LD_OWVAR 67
30456: PUSH
30457: LD_INT 3
30459: EQUAL
30460: PUSH
30461: LD_VAR 0 7
30465: AND
30466: PUSH
30467: LD_VAR 0 3
30471: AND
30472: PUSH
30473: LD_VAR 0 4
30477: AND
30478: PUSH
30479: LD_VAR 0 5
30483: AND
30484: IFFALSE 30500
// SetAchievementEX ( achiv , missionNumber ) ;
30486: LD_VAR 0 7
30490: PPUSH
30491: LD_VAR 0 2
30495: PPUSH
30496: CALL_OW 564
// end ;
30500: LD_VAR 0 6
30504: RET
