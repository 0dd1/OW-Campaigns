// var stReady , stRepair , stInCombat , stHelp , stNotReady , ImpatienceTreshold ; var vozKirov , vozKirovImpat , vozKirovState , vozKirovOut , vozHrace , mechKirov , mechKirovOut ; var targHrace , targAcquired ; every 0 0$1 marked 10 do var i ; var auta , autapom ; var poc ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// begin auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
   9: LD_ADDR_VAR 0 2
  13: PUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 21
  19: PUSH
  20: LD_INT 2
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: PUSH
  27: LD_INT 59
  29: PUSH
  30: EMPTY
  31: LIST
  32: PUSH
  33: EMPTY
  34: LIST
  35: LIST
  36: PPUSH
  37: CALL_OW 70
  41: ST_TO_ADDR
// for i in auta do
  42: LD_ADDR_VAR 0 1
  46: PUSH
  47: LD_VAR 0 2
  51: PUSH
  52: FOR_IN
  53: IFFALSE 132
// begin ComMoveToArea ( i , Zarea_utok ) ;
  55: LD_VAR 0 1
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: CALL_OW 113
// AddComAgressiveMove ( i , 28 , 15 ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: LD_INT 28
  74: PPUSH
  75: LD_INT 15
  77: PPUSH
  78: CALL_OW 174
// AddComAttackUnit ( i , Am_bu3 ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: LD_INT 19
  89: PPUSH
  90: CALL_OW 175
// AddComAgressiveMove ( i , 13 , 9 ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: LD_INT 13
 101: PPUSH
 102: LD_INT 9
 104: PPUSH
 105: CALL_OW 174
// RUSKE_POSILY_RIDICI_LIST = RUSKE_POSILY_RIDICI_LIST diff IsDrivenBy ( i ) ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_EXP 57
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 311
 128: DIFF
 129: ST_TO_ADDR
// end ;
 130: GO 52
 132: POP
 133: POP
// auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: PPUSH
 142: LD_INT 21
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 3
 154: PUSH
 155: LD_INT 59
 157: PUSH
 158: EMPTY
 159: LIST
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PPUSH
 166: CALL_OW 70
 170: ST_TO_ADDR
// poc = 1 ;
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 1
 178: ST_TO_ADDR
// for i in RUSKE_POSILY_RIDICI_LIST do
 179: LD_ADDR_VAR 0 1
 183: PUSH
 184: LD_EXP 57
 188: PUSH
 189: FOR_IN
 190: IFFALSE 244
// begin if auta + 0 >= poc then
 192: LD_VAR 0 2
 196: PUSH
 197: LD_INT 0
 199: PLUS
 200: PUSH
 201: LD_VAR 0 4
 205: GREATEREQUAL
 206: IFFALSE 228
// ComEnterUnit ( i , auta [ poc ] ) ;
 208: LD_VAR 0 1
 212: PPUSH
 213: LD_VAR 0 2
 217: PUSH
 218: LD_VAR 0 4
 222: ARRAY
 223: PPUSH
 224: CALL_OW 120
// poc = poc + 1 ;
 228: LD_ADDR_VAR 0 4
 232: PUSH
 233: LD_VAR 0 4
 237: PUSH
 238: LD_INT 1
 240: PLUS
 241: ST_TO_ADDR
// end ;
 242: GO 189
 244: POP
 245: POP
// if RUSKE_POSILY_RIDICI_LIST <> 0 then
 246: LD_EXP 57
 250: PUSH
 251: LD_INT 0
 253: NONEQUAL
 254: IFFALSE 257
// enable ;
 256: ENABLE
// end ;
 257: PPOPN 4
 259: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 260: LD_EXP 41
 264: PUSH
 265: LD_EXP 39
 269: PUSH
 270: LD_INT 7
 272: LESS
 273: AND
 274: IFFALSE 296
 276: GO 278
 278: DISABLE
// begin RepairVehicles ( 6 , Om_repair , 61 , 9 ) ;
 279: LD_INT 6
 281: PPUSH
 282: LD_INT 52
 284: PPUSH
 285: LD_INT 61
 287: PPUSH
 288: LD_INT 9
 290: PPUSH
 291: CALL 715 0 4
// enable ;
 295: ENABLE
// end ;
 296: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 297: LD_EXP 41
 301: PUSH
 302: LD_EXP 39
 306: PUSH
 307: LD_INT 7
 309: LESS
 310: AND
 311: IFFALSE 324
 313: GO 315
 315: DISABLE
// begin AttackVehicles ( 6 ) ;
 316: LD_INT 6
 318: PPUSH
 319: CALL 325 0 1
// enable ;
 323: ENABLE
// end ;
 324: END
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= 0 then
 334: LD_INT 22
 336: PUSH
 337: LD_VAR 0 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 21
 348: PUSH
 349: LD_INT 2
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 24
 358: PUSH
 359: LD_INT 1000
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PPUSH
 371: CALL_OW 69
 375: PUSH
 376: LD_INT 0
 378: GREATEREQUAL
 379: IFFALSE 710
// repeat wait ( 0 0$1 ) ;
 381: LD_INT 35
 383: PPUSH
 384: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_or , [ f_weapon , 42 ] , [ f_weapon , 43 ] , [ f_weapon , 44 ] ] ] ) ;
 388: LD_ADDR_VAR 0 5
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_VAR 0 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 21
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 24
 417: PUSH
 418: LD_INT 650
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 34
 430: PUSH
 431: LD_INT 42
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 34
 440: PUSH
 441: LD_INT 43
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: LIST
 469: PPUSH
 470: CALL_OW 69
 474: ST_TO_ADDR
// for j in vehiclesOK do
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_VAR 0 5
 484: PUSH
 485: FOR_IN
 486: IFFALSE 661
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , j ) ;
 488: LD_ADDR_VAR 0 6
 492: PUSH
 493: LD_INT 22
 495: PUSH
 496: LD_INT 1
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: EMPTY
 504: LIST
 505: PPUSH
 506: CALL_OW 69
 510: PPUSH
 511: LD_VAR 0 4
 515: PPUSH
 516: CALL_OW 74
 520: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
 521: LD_ADDR_VAR 0 7
 525: PUSH
 526: LD_INT 22
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: LD_INT 59
 541: PUSH
 542: EMPTY
 543: LIST
 544: PUSH
 545: LD_INT 21
 547: PUSH
 548: LD_INT 1
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 21
 557: PUSH
 558: LD_INT 2
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PUSH
 575: EMPTY
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: PPUSH
 583: LD_VAR 0 4
 587: PPUSH
 588: CALL_OW 74
 592: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
 593: LD_VAR 0 4
 597: PPUSH
 598: LD_VAR 0 6
 602: PPUSH
 603: CALL_OW 296
 607: PUSH
 608: LD_INT 8
 610: PLUS
 611: PUSH
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_VAR 0 7
 621: PPUSH
 622: CALL_OW 296
 626: LESS
 627: IFFALSE 645
// ComAttackUnit ( j , target1 ) else
 629: LD_VAR 0 4
 633: PPUSH
 634: LD_VAR 0 6
 638: PPUSH
 639: CALL_OW 115
 643: GO 659
// ComAttackUnit ( j , target2 ) ;
 645: LD_VAR 0 4
 649: PPUSH
 650: LD_VAR 0 7
 654: PPUSH
 655: CALL_OW 115
// end ;
 659: GO 485
 661: POP
 662: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
 663: LD_INT 22
 665: PUSH
 666: LD_VAR 0 1
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 21
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 24
 687: PUSH
 688: LD_INT 1000
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: LIST
 699: PPUSH
 700: CALL_OW 69
 704: PUSH
 705: LD_INT 0
 707: EQUAL
 708: IFFALSE 381
// end ;
 710: LD_VAR 0 2
 714: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
 715: LD_INT 0
 717: PPUSH
 718: PPUSH
 719: PPUSH
 720: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
 721: LD_ADDR_VAR 0 8
 725: PUSH
 726: LD_INT 22
 728: PUSH
 729: LD_VAR 0 1
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 21
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 24
 753: PUSH
 754: LD_INT 650
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: PPUSH
 770: CALL_OW 69
 774: ST_TO_ADDR
// if damageVehicles > 0 then
 775: LD_VAR 0 8
 779: PUSH
 780: LD_INT 0
 782: GREATER
 783: IFFALSE 804
// ComMoveXY ( damageVehicles , repX , repY ) ;
 785: LD_VAR 0 8
 789: PPUSH
 790: LD_VAR 0 3
 794: PPUSH
 795: LD_VAR 0 4
 799: PPUSH
 800: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 804: LD_VAR 0 8
 808: PPUSH
 809: LD_INT 95
 811: PUSH
 812: LD_VAR 0 2
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 3
 823: PUSH
 824: LD_INT 58
 826: PUSH
 827: EMPTY
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 72
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: IFFALSE 913
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
 848: LD_ADDR_VAR 0 6
 852: PUSH
 853: LD_VAR 0 8
 857: PPUSH
 858: LD_INT 95
 860: PUSH
 861: LD_VAR 0 2
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 58
 875: PUSH
 876: EMPTY
 877: LIST
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: PPUSH
 887: CALL_OW 72
 891: PUSH
 892: FOR_IN
 893: IFFALSE 911
// ComExitVehicle ( UnitsInside ( i ) ) ;
 895: LD_VAR 0 6
 899: PPUSH
 900: CALL_OW 313
 904: PPUSH
 905: CALL_OW 121
 909: GO 892
 911: POP
 912: POP
// end ;
 913: LD_VAR 0 5
 917: RET
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and GetSide ( human ) = 6 and IsOk ( vehicle ) then
 918: LD_VAR 0 1
 922: PPUSH
 923: CALL_OW 255
 927: PUSH
 928: LD_INT 6
 930: EQUAL
 931: PUSH
 932: LD_VAR 0 2
 936: PPUSH
 937: CALL_OW 255
 941: PUSH
 942: LD_INT 6
 944: EQUAL
 945: AND
 946: PUSH
 947: LD_VAR 0 1
 951: PPUSH
 952: CALL_OW 302
 956: AND
 957: IFFALSE 1032
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
 959: LD_VAR 0 1
 963: PPUSH
 964: CALL_OW 264
 968: PUSH
 969: LD_INT 42
 971: EQUAL
 972: PUSH
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 264
 982: PUSH
 983: LD_INT 43
 985: EQUAL
 986: OR
 987: PUSH
 988: LD_VAR 0 1
 992: PPUSH
 993: CALL_OW 264
 997: PUSH
 998: LD_INT 44
1000: EQUAL
1001: OR
1002: IFFALSE 1032
// begin ComRepairVehicle ( human , vehicle ) ;
1004: LD_VAR 0 2
1008: PPUSH
1009: LD_VAR 0 1
1013: PPUSH
1014: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
1018: LD_VAR 0 2
1022: PPUSH
1023: LD_VAR 0 1
1027: PPUSH
1028: CALL_OW 180
// end ; end ;
1032: PPOPN 2
1034: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do var i ;
1035: LD_INT 22
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 21
1047: PUSH
1048: LD_INT 2
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PPUSH
1059: CALL_OW 69
1063: IFFALSE 1140
1065: GO 1067
1067: DISABLE
1068: LD_INT 0
1070: PPUSH
// begin enable ;
1071: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
1072: LD_ADDR_VAR 0 1
1076: PUSH
1077: LD_INT 22
1079: PUSH
1080: LD_INT 6
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: PUSH
1087: LD_INT 21
1089: PUSH
1090: LD_INT 2
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PPUSH
1101: CALL_OW 69
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1138
// if GetFuel ( i ) < 3 then
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 261
1118: PUSH
1119: LD_INT 3
1121: LESS
1122: IFFALSE 1136
// SetFuel ( i , 3 ) ;
1124: LD_VAR 0 1
1128: PPUSH
1129: LD_INT 3
1131: PPUSH
1132: CALL_OW 240
1136: GO 1106
1138: POP
1139: POP
// end ; end_of_file
1140: PPOPN 1
1142: END
// export You , You2 , You3 , Amici , Arabi ; export KurinDialog ; export KurinAddTime ; starting begin RandomizeAll ;
1143: CALL_OW 11
// InitHc ;
1147: CALL_OW 19
// InitBc ;
1151: CALL_OW 21
// InitVc ;
1155: CALL_OW 20
// InitUc ;
1159: CALL_OW 18
// KurinDialog = 0 ;
1163: LD_ADDR_EXP 6
1167: PUSH
1168: LD_INT 0
1170: ST_TO_ADDR
// KurinAddTime = 0 ;
1171: LD_ADDR_EXP 7
1175: PUSH
1176: LD_INT 0
1178: ST_TO_ADDR
// set_difficulty ;
1179: CALL 4146 0 0
// load_postav ;
1183: CALL 1999 0 0
// load_promenne ;
1187: CALL 2151 0 0
// You = 3 ;
1191: LD_ADDR_EXP 1
1195: PUSH
1196: LD_INT 3
1198: ST_TO_ADDR
// You2 = 6 ;
1199: LD_ADDR_EXP 2
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
// You3 = 5 ;
1207: LD_ADDR_EXP 3
1211: PUSH
1212: LD_INT 5
1214: ST_TO_ADDR
// Amici = 1 ;
1215: LD_ADDR_EXP 4
1219: PUSH
1220: LD_INT 1
1222: ST_TO_ADDR
// Arabi = 2 ;
1223: LD_ADDR_EXP 5
1227: PUSH
1228: LD_INT 2
1230: ST_TO_ADDR
// placni_budovy_z_predesle_mise ;
1231: CALL 2525 0 0
// RevealFogArea ( You , CelaRU02 ) ;
1235: LD_EXP 1
1239: PPUSH
1240: LD_INT 36
1242: PPUSH
1243: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1247: LD_EXP 2
1251: PPUSH
1252: LD_INT 36
1254: PPUSH
1255: CALL_OW 332
// create_arabsky_utok ;
1259: CALL 18542 0 0
// create_americka_pomoc_hlidce ;
1263: CALL 16466 0 0
// create_americke_posily ;
1267: CALL 17335 0 0
// create_ruske_posily_na_omicron ;
1271: CALL 19691 0 0
// create_arabi_komanda ;
1275: CALL 20663 0 0
// create_ru_posily_ma_utek ;
1279: CALL 21509 0 0
// create_arabi_na_posily_kirovu ;
1283: CALL 21961 0 0
// create_cerpaci_ruske_auta ;
1287: CALL 22413 0 0
// create_am_jednotky ;
1291: CALL 20333 0 0
// set_skily_amikum ;
1295: CALL 16819 0 0
// uklid_rusu ;
1299: CALL 4914 0 0
// ChangeSideFog ( You , You ) ;
1303: LD_EXP 1
1307: PPUSH
1308: LD_EXP 1
1312: PPUSH
1313: CALL_OW 343
// ChangeSideFog ( You2 , You ) ;
1317: LD_EXP 2
1321: PPUSH
1322: LD_EXP 1
1326: PPUSH
1327: CALL_OW 343
// pojmenovani_zakladen ;
1331: CALL 4571 0 0
// InGameOn ;
1335: CALL_OW 8
// CenterOnXY ( 137 , 76 ) ;
1339: LD_INT 137
1341: PPUSH
1342: LD_INT 76
1344: PPUSH
1345: CALL_OW 84
// RevealFogArea ( You , CelaRU02 ) ;
1349: LD_EXP 1
1353: PPUSH
1354: LD_INT 36
1356: PPUSH
1357: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1361: LD_EXP 2
1365: PPUSH
1366: LD_INT 36
1368: PPUSH
1369: CALL_OW 332
// uvodni_pokec ;
1373: CALL 9978 0 0
// end ;
1377: END
// on UnitDestroyed ( un ) do begin if un = bur then
1378: LD_VAR 0 1
1382: PUSH
1383: LD_EXP 29
1387: EQUAL
1388: IFFALSE 1397
// YouLost ( Burlak ) ;
1390: LD_STRING Burlak
1392: PPUSH
1393: CALL_OW 104
// enable ;
1397: ENABLE
// end ;
1398: PPOPN 1
1400: END
// export function konec_mise_lhani ; begin
1401: LD_INT 0
1403: PPUSH
// hlaska_lhani ;
1404: CALL 15238 0 0
// YouLost ( Vehicles ) ;
1408: LD_STRING Vehicles
1410: PPUSH
1411: CALL_OW 104
// end ;
1415: LD_VAR 0 1
1419: RET
// export function konec_pred_omikronem ; begin
1420: LD_INT 0
1422: PPUSH
// YouLost ( Delay ) ;
1423: LD_STRING Delay
1425: PPUSH
1426: CALL_OW 104
// end ;
1430: LD_VAR 0 1
1434: RET
// export function konec_mise_utok ; begin
1435: LD_INT 0
1437: PPUSH
// YouLost ( SelfAttack ) ;
1438: LD_STRING SelfAttack
1440: PPUSH
1441: CALL_OW 104
// end ;
1445: LD_VAR 0 1
1449: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var mrtvi ; var all_people ; begin
1450: LD_INT 0
1452: PPUSH
1453: PPUSH
1454: PPUSH
1455: PPUSH
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
// DisableExclamations ;
1460: CALL_OW 474
// gained_medals := [ ] ;
1464: LD_ADDR_OWVAR 61
1468: PUSH
1469: EMPTY
1470: ST_TO_ADDR
// missing_medals := [ ] ;
1471: LD_ADDR_OWVAR 62
1475: PUSH
1476: EMPTY
1477: ST_TO_ADDR
// if Prezite_posily >= muze_projit_posil [ difficulty ] then
1478: LD_EXP 73
1482: PUSH
1483: LD_EXP 22
1487: PUSH
1488: LD_OWVAR 67
1492: ARRAY
1493: GREATEREQUAL
1494: IFFALSE 1509
// AddMedal ( PreventReinforcements , - 1 ) else
1496: LD_STRING PreventReinforcements
1498: PPUSH
1499: LD_INT 1
1501: NEG
1502: PPUSH
1503: CALL_OW 101
1507: GO 1519
// AddMedal ( PreventReinforcements , 1 ) ;
1509: LD_STRING PreventReinforcements
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL_OW 101
// if scholtze_saved and IsOk ( schol ) and GetSide ( schol ) = 3 then
1519: LD_EXP 37
1523: PUSH
1524: LD_EXP 33
1528: PPUSH
1529: CALL_OW 302
1533: AND
1534: PUSH
1535: LD_EXP 33
1539: PPUSH
1540: CALL_OW 255
1544: PUSH
1545: LD_INT 3
1547: EQUAL
1548: AND
1549: IFFALSE 1563
// AddMedal ( Scholtze , 1 ) else
1551: LD_STRING Scholtze
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 101
1561: GO 1574
// AddMedal ( Scholtze , - 1 ) ;
1563: LD_STRING Scholtze
1565: PPUSH
1566: LD_INT 1
1568: NEG
1569: PPUSH
1570: CALL_OW 101
// case stav_aut_new of 1 :
1574: LD_EXP 46
1578: PUSH
1579: LD_INT 1
1581: DOUBLE
1582: EQUAL
1583: IFTRUE 1587
1585: GO 1600
1587: POP
// AddMedal ( Surplus , 1 ) ; 2 :
1588: LD_STRING Surplus
1590: PPUSH
1591: LD_INT 1
1593: PPUSH
1594: CALL_OW 101
1598: GO 1645
1600: LD_INT 2
1602: DOUBLE
1603: EQUAL
1604: IFTRUE 1608
1606: GO 1622
1608: POP
// AddMedal ( Surplus , - 1 ) ; 3 :
1609: LD_STRING Surplus
1611: PPUSH
1612: LD_INT 1
1614: NEG
1615: PPUSH
1616: CALL_OW 101
1620: GO 1645
1622: LD_INT 3
1624: DOUBLE
1625: EQUAL
1626: IFTRUE 1630
1628: GO 1644
1630: POP
// AddMedal ( Surplus , - 2 ) ; end ;
1631: LD_STRING Surplus
1633: PPUSH
1634: LD_INT 2
1636: NEG
1637: PPUSH
1638: CALL_OW 101
1642: GO 1645
1644: POP
// if not stav_aut_new then
1645: LD_EXP 46
1649: NOT
1650: IFFALSE 1663
// AddMedal ( Surplus , - 1 ) ;
1652: LD_STRING Surplus
1654: PPUSH
1655: LD_INT 1
1657: NEG
1658: PPUSH
1659: CALL_OW 101
// GiveMedals ( Main ) ;
1663: LD_STRING Main
1665: PPUSH
1666: CALL_OW 102
// all_people := FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1670: LD_ADDR_VAR 0 8
1674: PUSH
1675: LD_INT 22
1677: PUSH
1678: LD_EXP 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 21
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 69
1705: ST_TO_ADDR
// RewardPeople ( all_people ) ;
1706: LD_VAR 0 8
1710: PPUSH
1711: CALL_OW 43
// if not ( bel in all_people ) then
1715: LD_EXP 32
1719: PUSH
1720: LD_VAR 0 8
1724: IN
1725: NOT
1726: IFFALSE 1737
// KillUnit ( bel ) ;
1728: LD_EXP 32
1732: PPUSH
1733: CALL_OW 66
// if not ( gny in all_people ) then
1737: LD_EXP 31
1741: PUSH
1742: LD_VAR 0 8
1746: IN
1747: NOT
1748: IFFALSE 1759
// KillUnit ( gny ) ;
1750: LD_EXP 31
1754: PPUSH
1755: CALL_OW 66
// if not ( kov in all_people ) then
1759: LD_EXP 30
1763: PUSH
1764: LD_VAR 0 8
1768: IN
1769: NOT
1770: IFFALSE 1781
// KillUnit ( kov ) ;
1772: LD_EXP 30
1776: PPUSH
1777: CALL_OW 66
// if not ( schol in all_people ) then
1781: LD_EXP 33
1785: PUSH
1786: LD_VAR 0 8
1790: IN
1791: NOT
1792: IFFALSE 1803
// KillUnit ( schol ) ;
1794: LD_EXP 33
1798: PPUSH
1799: CALL_OW 66
// SaveCharacters ( bur , Burlak ) ;
1803: LD_EXP 29
1807: PPUSH
1808: LD_STRING Burlak
1810: PPUSH
1811: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
1815: LD_EXP 32
1819: PPUSH
1820: LD_STRING Belkov
1822: PPUSH
1823: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
1827: LD_EXP 31
1831: PPUSH
1832: LD_STRING Gnyevko
1834: PPUSH
1835: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
1839: LD_EXP 30
1843: PPUSH
1844: LD_STRING Kovalyuk
1846: PPUSH
1847: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
1851: LD_EXP 33
1855: PPUSH
1856: LD_STRING Scholtze
1858: PPUSH
1859: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
1863: LD_EXP 28
1867: PPUSH
1868: LD_STRING Popov
1870: PPUSH
1871: CALL_OW 38
// pom := all_people diff [ bur , kur , bel , gny , kov , schol , schol2 , pop ] ;
1875: LD_ADDR_VAR 0 3
1879: PUSH
1880: LD_VAR 0 8
1884: PUSH
1885: LD_EXP 29
1889: PUSH
1890: LD_EXP 27
1894: PUSH
1895: LD_EXP 32
1899: PUSH
1900: LD_EXP 31
1904: PUSH
1905: LD_EXP 30
1909: PUSH
1910: LD_EXP 33
1914: PUSH
1915: LD_EXP 34
1919: PUSH
1920: LD_EXP 28
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: DIFF
1935: ST_TO_ADDR
// SaveCharacters ( pom , survivors1 ) ;
1936: LD_VAR 0 3
1940: PPUSH
1941: LD_STRING survivors1
1943: PPUSH
1944: CALL_OW 38
// SaveVariable ( BELKOV_SAVED , belkov_saved ) ;
1948: LD_EXP 24
1952: PPUSH
1953: LD_STRING belkov_saved
1955: PPUSH
1956: CALL_OW 39
// SaveVariable ( STAV_UTOKU , stav_utoku ) ;
1960: LD_EXP 25
1964: PPUSH
1965: LD_STRING stav_utoku
1967: PPUSH
1968: CALL_OW 39
// SaveVariable ( stav_aut , Surplus_vehicles ) ;
1972: LD_EXP 38
1976: PPUSH
1977: LD_STRING Surplus_vehicles
1979: PPUSH
1980: CALL_OW 39
// YouWin ;
1984: CALL_OW 103
// EnableExclamations ;
1988: CALL_OW 473
// exit ;
1992: GO 1994
// end ;
1994: LD_VAR 0 1
1998: RET
// function load_postav ; begin
1999: LD_INT 0
2001: PPUSH
// grishko = NewCharacter ( Grishko ) ;
2002: LD_ADDR_EXP 35
2006: PUSH
2007: LD_STRING Grishko
2009: PPUSH
2010: CALL_OW 25
2014: ST_TO_ADDR
// kur = nacti_osobu ( kurin ) ;
2015: LD_ADDR_EXP 27
2019: PUSH
2020: LD_STRING kurin
2022: PPUSH
2023: CALL 20619 0 1
2027: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
2028: LD_ADDR_EXP 32
2032: PUSH
2033: LD_STRING Belkov
2035: PPUSH
2036: CALL 20619 0 1
2040: ST_TO_ADDR
// kov = nacti_osobu ( Kovalyuk ) ;
2041: LD_ADDR_EXP 30
2045: PUSH
2046: LD_STRING Kovalyuk
2048: PPUSH
2049: CALL 20619 0 1
2053: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
2054: LD_ADDR_EXP 29
2058: PUSH
2059: LD_STRING Burlak
2061: PPUSH
2062: CALL 20619 0 1
2066: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
2067: LD_ADDR_EXP 31
2071: PUSH
2072: LD_STRING Gnyevko
2074: PPUSH
2075: CALL 20619 0 1
2079: ST_TO_ADDR
// pop = NewCharacter ( Popov ) ;
2080: LD_ADDR_EXP 28
2084: PUSH
2085: LD_STRING Popov
2087: PPUSH
2088: CALL_OW 25
2092: ST_TO_ADDR
// if CheckCharacterSet ( survivors1 ) then
2093: LD_STRING survivors1
2095: PPUSH
2096: CALL_OW 29
2100: IFFALSE 2115
// other_survivors_mise_2 = CreateCharacterSet ( survivors1 ) ;
2102: LD_ADDR_EXP 71
2106: PUSH
2107: LD_STRING survivors1
2109: PPUSH
2110: CALL_OW 31
2114: ST_TO_ADDR
// if CheckCharacterSet ( amici_bw ) then
2115: LD_STRING amici_bw
2117: PPUSH
2118: CALL_OW 29
2122: IFFALSE 2139
// amici_bw_2 = CreateCharacter ( amici_bw ) else
2124: LD_ADDR_EXP 10
2128: PUSH
2129: LD_STRING amici_bw
2131: PPUSH
2132: CALL_OW 34
2136: ST_TO_ADDR
2137: GO 2146
// amici_bw_2 = [ ] ;
2139: LD_ADDR_EXP 10
2143: PUSH
2144: EMPTY
2145: ST_TO_ADDR
// end ;
2146: LD_VAR 0 1
2150: RET
// function load_promenne ; var default_budovy ; begin
2151: LD_INT 0
2153: PPUSH
2154: PPUSH
// default_budovy = [ [ 0 , 2 , 66 , 97 , 0 ] , [ 2 , 1 , 61 , 83 , 2 ] , [ 6 , 1 , 73 , 90 , 4 ] ] ;
2155: LD_ADDR_VAR 0 2
2159: PUSH
2160: LD_INT 0
2162: PUSH
2163: LD_INT 2
2165: PUSH
2166: LD_INT 66
2168: PUSH
2169: LD_INT 97
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PUSH
2182: LD_INT 2
2184: PUSH
2185: LD_INT 1
2187: PUSH
2188: LD_INT 61
2190: PUSH
2191: LD_INT 83
2193: PUSH
2194: LD_INT 2
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 6
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: LD_INT 73
2212: PUSH
2213: LD_INT 90
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: ST_TO_ADDR
// budovy_mise_2 = LoadVariable ( budovy , default_budovy ) ;
2231: LD_ADDR_EXP 8
2235: PUSH
2236: LD_STRING budovy
2238: PPUSH
2239: LD_VAR 0 2
2243: PPUSH
2244: CALL_OW 30
2248: ST_TO_ADDR
// breastworks_east = LoadVariable ( bw_east , 3 ) ;
2249: LD_ADDR_EXP 9
2253: PUSH
2254: LD_STRING bw_east
2256: PPUSH
2257: LD_INT 3
2259: PPUSH
2260: CALL_OW 30
2264: ST_TO_ADDR
// end ;
2265: LD_VAR 0 1
2269: RET
// export function create_scholtze ; var pom ; begin
2270: LD_INT 0
2272: PPUSH
2273: PPUSH
// pom = NewCharacter ( Scholtze ) ;
2274: LD_ADDR_VAR 0 2
2278: PUSH
2279: LD_STRING Scholtze
2281: PPUSH
2282: CALL_OW 25
2286: ST_TO_ADDR
// SetSide ( pom , You2 ) ;
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_EXP 2
2296: PPUSH
2297: CALL_OW 235
// SetClass ( pom , class_scientistic ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 4
2308: PPUSH
2309: CALL_OW 336
// PlaceUnitXY ( pom , 49 , 5 , true ) ;
2313: LD_VAR 0 2
2317: PPUSH
2318: LD_INT 49
2320: PPUSH
2321: LD_INT 5
2323: PPUSH
2324: LD_INT 1
2326: PPUSH
2327: CALL_OW 48
// result = pom ;
2331: LD_ADDR_VAR 0 1
2335: PUSH
2336: LD_VAR 0 2
2340: ST_TO_ADDR
// end ;
2341: LD_VAR 0 1
2345: RET
// on Command ( com ) do var i , j , temp ;
2346: LD_INT 0
2348: PPUSH
2349: PPUSH
2350: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2351: LD_ADDR_VAR 0 2
2355: PUSH
2356: LD_INT 22
2358: PUSH
2359: LD_INT 3
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 21
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PPUSH
2380: CALL_OW 69
2384: PUSH
2385: FOR_IN
2386: IFFALSE 2508
// if GetTaskList ( i ) > 0 then
2388: LD_VAR 0 2
2392: PPUSH
2393: CALL_OW 437
2397: PUSH
2398: LD_INT 0
2400: GREATER
2401: IFFALSE 2506
// for j = 1 to GetTaskList ( i ) do
2403: LD_ADDR_VAR 0 3
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_VAR 0 2
2417: PPUSH
2418: CALL_OW 437
2422: PUSH
2423: FOR_TO
2424: IFFALSE 2504
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_VAR 0 2
2435: PPUSH
2436: CALL_OW 437
2440: PUSH
2441: LD_VAR 0 3
2445: ARRAY
2446: PUSH
2447: LD_INT 4
2449: ARRAY
2450: ST_TO_ADDR
// if temp = RU1_dep or ( GetSide ( temp ) = 6 and GetType ( temp ) = unit_vehicle ) then
2451: LD_VAR 0 4
2455: PUSH
2456: LD_INT 1
2458: EQUAL
2459: PUSH
2460: LD_VAR 0 4
2464: PPUSH
2465: CALL_OW 255
2469: PUSH
2470: LD_INT 6
2472: EQUAL
2473: PUSH
2474: LD_VAR 0 4
2478: PPUSH
2479: CALL_OW 247
2483: PUSH
2484: LD_INT 2
2486: EQUAL
2487: AND
2488: OR
2489: IFFALSE 2502
// SetTaskList ( i , [ ] ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: EMPTY
2497: PPUSH
2498: CALL_OW 446
// end ;
2502: GO 2423
2504: POP
2505: POP
2506: GO 2385
2508: POP
2509: POP
// end ; end_of_file
2510: PPOPN 4
2512: END
// var konzervy_delay ; export budovy_mise_2 ; export breastworks_east ; export amici_bw_2 ; every 0 0$0.1 do
2513: GO 2515
2515: DISABLE
// begin konzervy_delay = 0 ;
2516: LD_ADDR_LOC 16
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// end ;
2524: END
// export function placni_budovy_z_predesle_mise ; var pom , i ; var ab ; var bw_e ; var vojaci ; var pocet ; begin
2525: LD_INT 0
2527: PPUSH
2528: PPUSH
2529: PPUSH
2530: PPUSH
2531: PPUSH
2532: PPUSH
2533: PPUSH
// uc_side = You ;
2534: LD_ADDR_OWVAR 20
2538: PUSH
2539: LD_EXP 1
2543: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
2544: LD_ADDR_OWVAR 44
2548: PUSH
2549: LD_INT 9
2551: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2552: LD_ADDR_OWVAR 45
2556: PUSH
2557: LD_INT 9
2559: ST_TO_ADDR
// for i in budovy_mise_2 do
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: LD_EXP 8
2569: PUSH
2570: FOR_IN
2571: IFFALSE 2719
// begin uc_nation = i [ 6 ] ;
2573: LD_ADDR_OWVAR 21
2577: PUSH
2578: LD_VAR 0 3
2582: PUSH
2583: LD_INT 6
2585: ARRAY
2586: ST_TO_ADDR
// bc_type = i [ 1 ] ;
2587: LD_ADDR_OWVAR 42
2591: PUSH
2592: LD_VAR 0 3
2596: PUSH
2597: LD_INT 1
2599: ARRAY
2600: ST_TO_ADDR
// bc_level = i [ 2 ] ;
2601: LD_ADDR_OWVAR 43
2605: PUSH
2606: LD_VAR 0 3
2610: PUSH
2611: LD_INT 2
2613: ARRAY
2614: ST_TO_ADDR
// pom = CreateAndPlaceBuildingXYD ( i [ 3 ] + 30 , i [ 4 ] - 20 , i [ 5 ] ) ;
2615: LD_ADDR_VAR 0 2
2619: PUSH
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 3
2627: ARRAY
2628: PUSH
2629: LD_INT 30
2631: PLUS
2632: PPUSH
2633: LD_VAR 0 3
2637: PUSH
2638: LD_INT 4
2640: ARRAY
2641: PUSH
2642: LD_INT 20
2644: MINUS
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 5
2653: ARRAY
2654: PPUSH
2655: CALL_OW 47
2659: ST_TO_ADDR
// if bc_type in [ b_depot , b_warehouse ] then
2660: LD_OWVAR 42
2664: PUSH
2665: LD_INT 0
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: IN
2675: IFFALSE 2717
// begin SetResourceType ( GetBase ( pom ) , mat_cans , 100 ) ;
2677: LD_VAR 0 2
2681: PPUSH
2682: CALL_OW 274
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: LD_INT 100
2692: PPUSH
2693: CALL_OW 277
// SetResourceType ( GetBase ( pom ) , mat_oil , 25 ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: CALL_OW 274
2706: PPUSH
2707: LD_INT 2
2709: PPUSH
2710: LD_INT 25
2712: PPUSH
2713: CALL_OW 277
// end ; end ;
2717: GO 2570
2719: POP
2720: POP
// bw_e = breastworks_east ;
2721: LD_ADDR_VAR 0 5
2725: PUSH
2726: LD_EXP 9
2730: ST_TO_ADDR
// uc_side = Amici ;
2731: LD_ADDR_OWVAR 20
2735: PUSH
2736: LD_EXP 4
2740: ST_TO_ADDR
// uc_nation = nation_american ;
2741: LD_ADDR_OWVAR 21
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
// bc_type = b_breastwork ;
2749: LD_ADDR_OWVAR 42
2753: PUSH
2754: LD_INT 31
2756: ST_TO_ADDR
// bc_level = level_bw_e [ difficulty ] ;
2757: LD_ADDR_OWVAR 43
2761: PUSH
2762: LD_EXP 11
2766: PUSH
2767: LD_OWVAR 67
2771: ARRAY
2772: ST_TO_ADDR
// if bw_e > 1 then
2773: LD_VAR 0 5
2777: PUSH
2778: LD_INT 1
2780: GREATER
2781: IFFALSE 2796
// CreateAndPlaceBuildingXYD ( 123 , 42 , 1 ) ;
2783: LD_INT 123
2785: PPUSH
2786: LD_INT 42
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: CALL_OW 47
// if bw_e = 1 or bw_e = 3 then
2796: LD_VAR 0 5
2800: PUSH
2801: LD_INT 1
2803: EQUAL
2804: PUSH
2805: LD_VAR 0 5
2809: PUSH
2810: LD_INT 3
2812: EQUAL
2813: OR
2814: IFFALSE 2829
// CreateAndPlaceBuildingXYD ( 120 , 36 , 1 ) ;
2816: LD_INT 120
2818: PPUSH
2819: LD_INT 36
2821: PPUSH
2822: LD_INT 1
2824: PPUSH
2825: CALL_OW 47
// vojaci = amici_bw_2 ;
2829: LD_ADDR_VAR 0 6
2833: PUSH
2834: LD_EXP 10
2838: ST_TO_ADDR
// if bw_e > 0 then
2839: LD_VAR 0 5
2843: PUSH
2844: LD_INT 0
2846: GREATER
2847: IFFALSE 3096
// begin if bw_e = 1 or bw_e = 2 then
2849: LD_VAR 0 5
2853: PUSH
2854: LD_INT 1
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 5
2862: PUSH
2863: LD_INT 2
2865: EQUAL
2866: OR
2867: IFFALSE 2879
// pocet = 1 else
2869: LD_ADDR_VAR 0 7
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
2877: GO 2887
// pocet = 2 ;
2879: LD_ADDR_VAR 0 7
2883: PUSH
2884: LD_INT 2
2886: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2887: LD_ADDR_VAR 0 6
2891: PUSH
2892: LD_VAR 0 6
2896: PUSH
2897: LD_INT 1
2899: PPUSH
2900: LD_INT 1
2902: PPUSH
2903: LD_INT 2
2905: PPUSH
2906: LD_STRING 
2908: PPUSH
2909: CALL 16419 0 4
2913: ADD
2914: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
2915: LD_ADDR_VAR 0 6
2919: PUSH
2920: LD_VAR 0 6
2924: PUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: LD_INT 2
2933: PPUSH
2934: LD_STRING 
2936: PPUSH
2937: CALL 16419 0 4
2941: ADD
2942: ST_TO_ADDR
// pom = FilterUnitsinArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: LD_INT 22
2950: PPUSH
2951: LD_INT 22
2953: PUSH
2954: LD_EXP 4
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 30
2965: PUSH
2966: LD_INT 31
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PPUSH
2977: CALL_OW 70
2981: ST_TO_ADDR
// if pocet >= 1 then
2982: LD_VAR 0 7
2986: PUSH
2987: LD_INT 1
2989: GREATEREQUAL
2990: IFFALSE 3039
// begin PlaceUnitXYR ( vojaci [ 1 ] , 129 , 39 , 5 , false ) ;
2992: LD_VAR 0 6
2996: PUSH
2997: LD_INT 1
2999: ARRAY
3000: PPUSH
3001: LD_INT 129
3003: PPUSH
3004: LD_INT 39
3006: PPUSH
3007: LD_INT 5
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 50
// ComEnterUnit ( vojaci [ 1 ] , pom [ 1 ] ) ;
3017: LD_VAR 0 6
3021: PUSH
3022: LD_INT 1
3024: ARRAY
3025: PPUSH
3026: LD_VAR 0 2
3030: PUSH
3031: LD_INT 1
3033: ARRAY
3034: PPUSH
3035: CALL_OW 120
// end ; if pocet = 2 then
3039: LD_VAR 0 7
3043: PUSH
3044: LD_INT 2
3046: EQUAL
3047: IFFALSE 3096
// begin PlaceUnitXYR ( vojaci [ 2 ] , 129 , 39 , 5 , false ) ;
3049: LD_VAR 0 6
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: LD_INT 129
3060: PPUSH
3061: LD_INT 39
3063: PPUSH
3064: LD_INT 5
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: CALL_OW 50
// ComEnterUnit ( vojaci [ 2 ] , pom [ 2 ] ) ;
3074: LD_VAR 0 6
3078: PUSH
3079: LD_INT 2
3081: ARRAY
3082: PPUSH
3083: LD_VAR 0 2
3087: PUSH
3088: LD_INT 2
3090: ARRAY
3091: PPUSH
3092: CALL_OW 120
// end ; end ; end ;
3096: LD_VAR 0 1
3100: RET
// export function vyber_characteru ; var pom ; var units_na_vyber ; var i ; var pocet ; var vyber ; var osurviv ; begin
3101: LD_INT 0
3103: PPUSH
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// uc_side = You ;
3110: LD_ADDR_OWVAR 20
3114: PUSH
3115: LD_EXP 1
3119: ST_TO_ADDR
// uc_nation = nation_russian ;
3120: LD_ADDR_OWVAR 21
3124: PUSH
3125: LD_INT 3
3127: ST_TO_ADDR
// pocet = 3 ;
3128: LD_ADDR_VAR 0 5
3132: PUSH
3133: LD_INT 3
3135: ST_TO_ADDR
// units_na_vyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
3136: LD_ADDR_VAR 0 3
3140: PUSH
3141: LD_INT -4
3143: PUSH
3144: LD_INT -1
3146: PUSH
3147: LD_INT -6
3149: PUSH
3150: LD_EXP 29
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_change_class ] ;
3161: LD_ADDR_VAR 0 3
3165: PUSH
3166: LD_VAR 0 3
3170: PUSH
3171: LD_INT -5
3173: PUSH
3174: EMPTY
3175: LIST
3176: ADD
3177: ST_TO_ADDR
// if IsOK ( gny ) then
3178: LD_EXP 31
3182: PPUSH
3183: CALL_OW 302
3187: IFFALSE 3221
// begin SetSide ( gny , You ) ;
3189: LD_EXP 31
3193: PPUSH
3194: LD_EXP 1
3198: PPUSH
3199: CALL_OW 235
// units_na_vyber = units_na_vyber ^ gny end else
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: LD_VAR 0 3
3212: PUSH
3213: LD_EXP 31
3217: ADD
3218: ST_TO_ADDR
3219: GO 3235
// pocet = pocet + 1 ;
3221: LD_ADDR_VAR 0 5
3225: PUSH
3226: LD_VAR 0 5
3230: PUSH
3231: LD_INT 1
3233: PLUS
3234: ST_TO_ADDR
// if IsOK ( kov ) then
3235: LD_EXP 30
3239: PPUSH
3240: CALL_OW 302
3244: IFFALSE 3278
// begin SetSide ( kov , You ) ;
3246: LD_EXP 30
3250: PPUSH
3251: LD_EXP 1
3255: PPUSH
3256: CALL_OW 235
// units_na_vyber = units_na_vyber ^ kov end else
3260: LD_ADDR_VAR 0 3
3264: PUSH
3265: LD_VAR 0 3
3269: PUSH
3270: LD_EXP 30
3274: ADD
3275: ST_TO_ADDR
3276: GO 3292
// pocet = pocet + 1 ;
3278: LD_ADDR_VAR 0 5
3282: PUSH
3283: LD_VAR 0 5
3287: PUSH
3288: LD_INT 1
3290: PLUS
3291: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
3292: LD_ADDR_VAR 0 3
3296: PUSH
3297: LD_VAR 0 3
3301: PUSH
3302: LD_INT -2
3304: PUSH
3305: LD_INT -3
3307: PUSH
3308: LD_INT -5
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: LIST
3315: ADD
3316: ST_TO_ADDR
// if IsOK ( bel ) then
3317: LD_EXP 32
3321: PPUSH
3322: CALL_OW 302
3326: IFFALSE 3358
// begin SetSide ( bel , You ) ;
3328: LD_EXP 32
3332: PPUSH
3333: LD_EXP 1
3337: PPUSH
3338: CALL_OW 235
// units_na_vyber = units_na_vyber ^ bel ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PUSH
3352: LD_EXP 32
3356: ADD
3357: ST_TO_ADDR
// end ; osurviv = other_survivors_mise_2 ;
3358: LD_ADDR_VAR 0 7
3362: PUSH
3363: LD_EXP 71
3367: ST_TO_ADDR
// for i in osurviv do
3368: LD_ADDR_VAR 0 4
3372: PUSH
3373: LD_VAR 0 7
3377: PUSH
3378: FOR_IN
3379: IFFALSE 3397
// SetSide ( i , You ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: LD_EXP 1
3390: PPUSH
3391: CALL_OW 235
3395: GO 3378
3397: POP
3398: POP
// units_na_vyber = units_na_vyber ^ osurviv ;
3399: LD_ADDR_VAR 0 3
3403: PUSH
3404: LD_VAR 0 3
3408: PUSH
3409: LD_VAR 0 7
3413: ADD
3414: ST_TO_ADDR
// uc_side = You ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_EXP 1
3424: ST_TO_ADDR
// uc_nation = nation_russian ;
3425: LD_ADDR_OWVAR 21
3429: PUSH
3430: LD_INT 3
3432: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_soldier , 2 ,  ) ;
3433: LD_ADDR_VAR 0 3
3437: PUSH
3438: LD_VAR 0 3
3442: PUSH
3443: CALL 16384 0 0
3447: PPUSH
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 2
3453: PPUSH
3454: LD_STRING 
3456: PPUSH
3457: CALL 16419 0 4
3461: ADD
3462: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( sex_female , class_soldier , 3 ,  ) ;
3463: LD_ADDR_VAR 0 3
3467: PUSH
3468: LD_VAR 0 3
3472: PUSH
3473: LD_INT 2
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 3
3481: PPUSH
3482: LD_STRING 
3484: PPUSH
3485: CALL 16419 0 4
3489: ADD
3490: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3491: LD_ADDR_VAR 0 3
3495: PUSH
3496: LD_VAR 0 3
3500: PUSH
3501: CALL 16384 0 0
3505: PPUSH
3506: LD_INT 2
3508: PPUSH
3509: LD_INT 2
3511: PPUSH
3512: LD_STRING 
3514: PPUSH
3515: CALL 16419 0 4
3519: ADD
3520: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3521: LD_ADDR_VAR 0 3
3525: PUSH
3526: LD_VAR 0 3
3530: PUSH
3531: CALL 16384 0 0
3535: PPUSH
3536: LD_INT 4
3538: PPUSH
3539: LD_INT 2
3541: PPUSH
3542: LD_STRING 
3544: PPUSH
3545: CALL 16419 0 4
3549: ADD
3550: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: LD_VAR 0 3
3560: PUSH
3561: CALL 16384 0 0
3565: PPUSH
3566: LD_INT 3
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: LD_STRING 
3574: PPUSH
3575: CALL 16419 0 4
3579: ADD
3580: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: LD_VAR 0 3
3590: PUSH
3591: CALL 16384 0 0
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: LD_INT 2
3601: PPUSH
3602: LD_STRING 
3604: PPUSH
3605: CALL 16419 0 4
3609: ADD
3610: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_VAR 0 3
3620: PUSH
3621: CALL 16384 0 0
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: LD_INT 2
3631: PPUSH
3632: LD_STRING 
3634: PPUSH
3635: CALL 16419 0 4
3639: ADD
3640: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_VAR 0 3
3650: PUSH
3651: CALL 16384 0 0
3655: PPUSH
3656: LD_INT 3
3658: PPUSH
3659: LD_INT 2
3661: PPUSH
3662: LD_STRING 
3664: PPUSH
3665: CALL 16419 0 4
3669: ADD
3670: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet , pocet , units_na_vyber , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: LD_STRING Vyber si peopliky
3678: PPUSH
3679: LD_VAR 0 5
3683: PPUSH
3684: LD_VAR 0 5
3688: PPUSH
3689: LD_VAR 0 3
3693: PPUSH
3694: LD_INT 2
3696: PUSH
3697: LD_INT 1
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 4
3706: PUSH
3707: LD_INT 1
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 3
3716: PUSH
3717: LD_INT 0
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 1
3726: PUSH
3727: LD_INT 0
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PPUSH
3740: CALL_OW 42
3744: ST_TO_ADDR
// vyber = [ bur ] ;
3745: LD_ADDR_VAR 0 6
3749: PUSH
3750: LD_EXP 29
3754: PUSH
3755: EMPTY
3756: LIST
3757: ST_TO_ADDR
// if IsOK ( gny ) then
3758: LD_EXP 31
3762: PPUSH
3763: CALL_OW 302
3767: IFFALSE 3785
// vyber = vyber ^ gny ;
3769: LD_ADDR_VAR 0 6
3773: PUSH
3774: LD_VAR 0 6
3778: PUSH
3779: LD_EXP 31
3783: ADD
3784: ST_TO_ADDR
// if IsOK ( kov ) then
3785: LD_EXP 30
3789: PPUSH
3790: CALL_OW 302
3794: IFFALSE 3812
// vyber = vyber ^ kov ;
3796: LD_ADDR_VAR 0 6
3800: PUSH
3801: LD_VAR 0 6
3805: PUSH
3806: LD_EXP 30
3810: ADD
3811: ST_TO_ADDR
// vyber = vyber ^ pom ;
3812: LD_ADDR_VAR 0 6
3816: PUSH
3817: LD_VAR 0 6
3821: PUSH
3822: LD_VAR 0 2
3826: ADD
3827: ST_TO_ADDR
// manage_zbytek ( osurviv diff vyber ) ;
3828: LD_VAR 0 7
3832: PUSH
3833: LD_VAR 0 6
3837: DIFF
3838: PPUSH
3839: CALL 4073 0 1
// result := vyber ;
3843: LD_ADDR_VAR 0 1
3847: PUSH
3848: LD_VAR 0 6
3852: ST_TO_ADDR
// end ;
3853: LD_VAR 0 1
3857: RET
// export function placni_unity ( unity ) ; var i ; begin
3858: LD_INT 0
3860: PPUSH
3861: PPUSH
// for i in unity do
3862: LD_ADDR_VAR 0 3
3866: PUSH
3867: LD_VAR 0 1
3871: PUSH
3872: FOR_IN
3873: IFFALSE 3912
// begin SetSide ( i , You ) ;
3875: LD_VAR 0 3
3879: PPUSH
3880: LD_EXP 1
3884: PPUSH
3885: CALL_OW 235
// PlaceUnitXYR ( i , 99 , 73 , 5 , false ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 99
3896: PPUSH
3897: LD_INT 73
3899: PPUSH
3900: LD_INT 5
3902: PPUSH
3903: LD_INT 0
3905: PPUSH
3906: CALL_OW 50
// end ;
3910: GO 3872
3912: POP
3913: POP
// wait ( 0 0$0.5 ) ;
3914: LD_INT 18
3916: PPUSH
3917: CALL_OW 67
// SaveForQuickRestart ;
3921: CALL_OW 22
// end ;
3925: LD_VAR 0 2
3929: RET
// every 0 0$10 trigger stav_omikron < 3 do
3930: LD_EXP 39
3934: PUSH
3935: LD_INT 3
3937: LESS
3938: IFFALSE 4007
3940: GO 3942
3942: DISABLE
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
3943: LD_INT 50
3945: PPUSH
3946: LD_INT 4200
3948: PPUSH
3949: CALL_OW 12
3953: PPUSH
3954: CALL_OW 67
// wait ( konzervy_delay * 0 0$5 ) ;
3958: LD_LOC 16
3962: PUSH
3963: LD_INT 175
3965: MUL
3966: PPUSH
3967: CALL_OW 67
// konzervy_delay = konzervy_delay + 1 ;
3971: LD_ADDR_LOC 16
3975: PUSH
3976: LD_LOC 16
3980: PUSH
3981: LD_INT 1
3983: PLUS
3984: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
3985: LD_INT 3
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: CALL_OW 12
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL_OW 55
// enable ;
4006: ENABLE
// end ;
4007: END
// every 0 0$30 do
4008: GO 4010
4010: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4011: LD_INT 3
4013: PPUSH
4014: LD_INT 5
4016: PPUSH
4017: CALL_OW 12
4021: PPUSH
4022: LD_INT 7
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: CALL_OW 55
// end ;
4032: END
// every 1 1$20 do
4033: GO 4035
4035: DISABLE
// begin wait ( Rand ( 1 , 0 0$40 ) ) ;
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 1400
4041: PPUSH
4042: CALL_OW 12
4046: PPUSH
4047: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 4 ) , konzervy_all , true ) ;
4051: LD_INT 1
4053: PPUSH
4054: LD_INT 4
4056: PPUSH
4057: CALL_OW 12
4061: PPUSH
4062: LD_INT 25
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 55
// end ;
4072: END
// function manage_zbytek ( lidi ) ; var i ; begin
4073: LD_INT 0
4075: PPUSH
4076: PPUSH
// for i in lidi do
4077: LD_ADDR_VAR 0 3
4081: PUSH
4082: LD_VAR 0 1
4086: PUSH
4087: FOR_IN
4088: IFFALSE 4127
// begin SetSide ( i , You2 ) ;
4090: LD_VAR 0 3
4094: PPUSH
4095: LD_EXP 2
4099: PPUSH
4100: CALL_OW 235
// PlaceUnitXYR ( i , 144 , 79 , 3 , false ) ;
4104: LD_VAR 0 3
4108: PPUSH
4109: LD_INT 144
4111: PPUSH
4112: LD_INT 79
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 50
// end ;
4125: GO 4087
4127: POP
4128: POP
// ComEnterUnit ( lidi , RU1_dep ) ;
4129: LD_VAR 0 1
4133: PPUSH
4134: LD_INT 1
4136: PPUSH
4137: CALL_OW 120
// end ; end_of_file
4141: LD_VAR 0 2
4145: RET
// export level_bw_e ; export schol_find_amikama ; export levely_amici ; export posily1 ; export posily11 ; export posily2 ; export posily3 ; export posily4 ; export utok_na_omikron ; export levely_ruske_posily ; export levely_am_budov ; export muze_projit_posil ; export muze_prezit_posil ; export BELKOV_SAVED ; export STAV_UTOKU ; export function set_difficulty ; begin
4146: LD_INT 0
4148: PPUSH
// BELKOV_SAVED = LoadVariable ( belkov_saved , 0 ) ;
4149: LD_ADDR_EXP 24
4153: PUSH
4154: LD_STRING belkov_saved
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 30
4164: ST_TO_ADDR
// STAV_UTOKU = LoadVariable ( utok_stav , 3 ) ;
4165: LD_ADDR_EXP 25
4169: PUSH
4170: LD_STRING utok_stav
4172: PPUSH
4173: LD_INT 3
4175: PPUSH
4176: CALL_OW 30
4180: ST_TO_ADDR
// level_bw_e = [ 2 , 3 , 4 ] ;
4181: LD_ADDR_EXP 11
4185: PUSH
4186: LD_INT 2
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: LD_INT 4
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: ST_TO_ADDR
// schol_find_amikama = [ 11 11$0 , 9 9$0 , 7 7$0 ] ;
4200: LD_ADDR_EXP 12
4204: PUSH
4205: LD_INT 23100
4207: PUSH
4208: LD_INT 18900
4210: PUSH
4211: LD_INT 14700
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// levely_amici = [ 2 , 3 , 4 ] ;
4219: LD_ADDR_EXP 13
4223: PUSH
4224: LD_INT 2
4226: PUSH
4227: LD_INT 3
4229: PUSH
4230: LD_INT 4
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: ST_TO_ADDR
// posily1 = [ 13 13$00 , 11 11$00 , 10 10$00 ] ;
4238: LD_ADDR_EXP 14
4242: PUSH
4243: LD_INT 27300
4245: PUSH
4246: LD_INT 23100
4248: PUSH
4249: LD_INT 21000
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
// posily11 = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
4257: LD_ADDR_EXP 15
4261: PUSH
4262: LD_INT 10500
4264: PUSH
4265: LD_INT 8400
4267: PUSH
4268: LD_INT 6300
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: ST_TO_ADDR
// posily2 = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
4276: LD_ADDR_EXP 16
4280: PUSH
4281: LD_INT 21000
4283: PUSH
4284: LD_INT 16800
4286: PUSH
4287: LD_INT 10500
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: ST_TO_ADDR
// posily3 = [ 11 11$0 , 8 8$30 , 5 5$0 ] ;
4295: LD_ADDR_EXP 17
4299: PUSH
4300: LD_INT 23100
4302: PUSH
4303: LD_INT 17850
4305: PUSH
4306: LD_INT 10500
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: LIST
4313: ST_TO_ADDR
// posily4 = [ 8 8$0 , 7 7$0 , 5 5$0 ] ;
4314: LD_ADDR_EXP 18
4318: PUSH
4319: LD_INT 16800
4321: PUSH
4322: LD_INT 14700
4324: PUSH
4325: LD_INT 10500
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: ST_TO_ADDR
// utok_na_omikron = [ 55 55$0 , 45 45$0 , 35 35$0 ] [ difficulty ] ;
4333: LD_ADDR_EXP 19
4337: PUSH
4338: LD_INT 115500
4340: PUSH
4341: LD_INT 94500
4343: PUSH
4344: LD_INT 73500
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: PUSH
4352: LD_OWVAR 67
4356: ARRAY
4357: ST_TO_ADDR
// levely_ruske_posily = [ 4 , 3 , 2 ] ;
4358: LD_ADDR_EXP 20
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: LD_INT 2
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: ST_TO_ADDR
// levely_am_budov = [ 0 , 1 , 2 ] ;
4377: LD_ADDR_EXP 21
4381: PUSH
4382: LD_INT 0
4384: PUSH
4385: LD_INT 1
4387: PUSH
4388: LD_INT 2
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: ST_TO_ADDR
// muze_projit_posil = [ 8 , 8 , 6 ] ;
4396: LD_ADDR_EXP 22
4400: PUSH
4401: LD_INT 8
4403: PUSH
4404: LD_INT 8
4406: PUSH
4407: LD_INT 6
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: ST_TO_ADDR
// muze_prezit_posil = [ 2 , 5 , 100 ] ;
4415: LD_ADDR_EXP 23
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: LD_INT 100
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
4434: LD_ADDR_EXP 26
4438: PUSH
4439: LD_INT 0
4441: PUSH
4442: LD_STRING :
4444: PUSH
4445: LD_INT 0
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: LIST
4452: ST_TO_ADDR
// end ;
4453: LD_VAR 0 1
4457: RET
// export cas ; every 0 0$10 do var pom ;
4458: GO 4460
4460: DISABLE
4461: LD_INT 0
4463: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
4464: LD_EXP 26
4468: PUSH
4469: LD_INT 3
4471: ARRAY
4472: PUSH
4473: LD_INT 10
4475: PLUS
4476: PUSH
4477: LD_INT 60
4479: EQUAL
4480: IFFALSE 4516
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
4482: LD_ADDR_EXP 26
4486: PUSH
4487: LD_EXP 26
4491: PUSH
4492: LD_INT 1
4494: ARRAY
4495: PUSH
4496: LD_INT 1
4498: PLUS
4499: PUSH
4500: LD_EXP 26
4504: PUSH
4505: LD_INT 2
4507: ARRAY
4508: ADD
4509: PUSH
4510: LD_INT 0
4512: ADD
4513: ST_TO_ADDR
4514: GO 4554
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
4516: LD_ADDR_EXP 26
4520: PUSH
4521: LD_EXP 26
4525: PUSH
4526: LD_INT 1
4528: ARRAY
4529: PUSH
4530: LD_EXP 26
4534: PUSH
4535: LD_INT 2
4537: ARRAY
4538: ADD
4539: PUSH
4540: LD_EXP 26
4544: PUSH
4545: LD_INT 3
4547: ARRAY
4548: PUSH
4549: LD_INT 10
4551: PLUS
4552: ADD
4553: ST_TO_ADDR
// debug_strings = [ cas ] ;
4554: LD_ADDR_OWVAR 48
4558: PUSH
4559: LD_EXP 26
4563: PUSH
4564: EMPTY
4565: LIST
4566: ST_TO_ADDR
// enable ;
4567: ENABLE
// end ;
4568: PPOPN 1
4570: END
// export function pojmenovani_zakladen ; var pom ; begin
4571: LD_INT 0
4573: PPUSH
4574: PPUSH
// SetBName ( RU1_dep , kirov ) ;
4575: LD_INT 1
4577: PPUSH
4578: LD_STRING kirov
4580: PPUSH
4581: CALL_OW 500
// pom = FilterUnitsInArea ( Ru2_base , [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
4585: LD_ADDR_VAR 0 2
4589: PUSH
4590: LD_INT 2
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_EXP 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PPUSH
4619: CALL_OW 70
4623: ST_TO_ADDR
// if pom > 0 then
4624: LD_VAR 0 2
4628: PUSH
4629: LD_INT 0
4631: GREATER
4632: IFFALSE 4650
// SetBName ( pom [ 1 ] , beria ) ;
4634: LD_VAR 0 2
4638: PUSH
4639: LD_INT 1
4641: ARRAY
4642: PPUSH
4643: LD_STRING beria
4645: PPUSH
4646: CALL_OW 500
// SetBName ( Am_dep , omikron ) ;
4650: LD_INT 12
4652: PPUSH
4653: LD_STRING omikron
4655: PPUSH
4656: CALL_OW 500
// end ;
4660: LD_VAR 0 1
4664: RET
// export function pojmenovani_kaganoviche ( base ) ; begin
4665: LD_INT 0
4667: PPUSH
// SetBName ( base , kagan ) ;
4668: LD_VAR 0 1
4672: PPUSH
4673: LD_STRING kagan
4675: PPUSH
4676: CALL_OW 500
// end ; end_of_file
4680: LD_VAR 0 2
4684: RET
// export kur ; export pop ; export bur ; export kov ; export gny ; export bel ; export schol ; export schol2 ; export grishko ; export Rusi_enter ; export scholtze_saved ; export stav_aut ; export stav_omikron ; export RU_videl_oil ; var counter_zapnut ; export setkani_om ; var R_comp ; export Rusi_utekli ; export Rusi_save ; var dialog_probehnul ; var qrefuel_over ; export kecy_scholtze_nalezen ; export konec_counteru ; export stav_aut_new ; export postavenych_aut ; var TTime ; export special_time ; every 0 0$0.1 do var i ;
4685: GO 4687
4687: DISABLE
4688: LD_INT 0
4690: PPUSH
// begin schol = 0 ;
4691: LD_ADDR_EXP 33
4695: PUSH
4696: LD_INT 0
4698: ST_TO_ADDR
// scholtze_saved = false ;
4699: LD_ADDR_EXP 37
4703: PUSH
4704: LD_INT 0
4706: ST_TO_ADDR
// stav_omikron = 0 ;
4707: LD_ADDR_EXP 39
4711: PUSH
4712: LD_INT 0
4714: ST_TO_ADDR
// stav_aut = 0 ;
4715: LD_ADDR_EXP 38
4719: PUSH
4720: LD_INT 0
4722: ST_TO_ADDR
// RU_videl_oil = false ;
4723: LD_ADDR_EXP 40
4727: PUSH
4728: LD_INT 0
4730: ST_TO_ADDR
// counter_zapnut = false ;
4731: LD_ADDR_LOC 17
4735: PUSH
4736: LD_INT 0
4738: ST_TO_ADDR
// setkani_om = false ;
4739: LD_ADDR_EXP 41
4743: PUSH
4744: LD_INT 0
4746: ST_TO_ADDR
// R_comp = [ ] ;
4747: LD_ADDR_LOC 18
4751: PUSH
4752: EMPTY
4753: ST_TO_ADDR
// Rusi_utekli = [ ] ;
4754: LD_ADDR_EXP 42
4758: PUSH
4759: EMPTY
4760: ST_TO_ADDR
// Rusi_save = [ ] ;
4761: LD_ADDR_EXP 43
4765: PUSH
4766: EMPTY
4767: ST_TO_ADDR
// dialog_probehnul = false ;
4768: LD_ADDR_LOC 19
4772: PUSH
4773: LD_INT 0
4775: ST_TO_ADDR
// qrefuel_over = false ;
4776: LD_ADDR_LOC 20
4780: PUSH
4781: LD_INT 0
4783: ST_TO_ADDR
// kecy_scholtze_nalezen = false ;
4784: LD_ADDR_EXP 44
4788: PUSH
4789: LD_INT 0
4791: ST_TO_ADDR
// postavenych_aut = 0 ;
4792: LD_ADDR_EXP 47
4796: PUSH
4797: LD_INT 0
4799: ST_TO_ADDR
// TTime = 0 ;
4800: LD_ADDR_LOC 21
4804: PUSH
4805: LD_INT 0
4807: ST_TO_ADDR
// konec_counteru = false ;
4808: LD_ADDR_EXP 45
4812: PUSH
4813: LD_INT 0
4815: ST_TO_ADDR
// stav_aut_new = 0 ;
4816: LD_ADDR_EXP 46
4820: PUSH
4821: LD_INT 0
4823: ST_TO_ADDR
// special_time = false ;
4824: LD_ADDR_EXP 48
4828: PUSH
4829: LD_INT 0
4831: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 6 , 7 , 8 , 9 , 10 , 51 , 52 , 53 , 200 , 201 , 202 , 203 ] do
4832: LD_ADDR_VAR 0 1
4836: PUSH
4837: LD_INT 1
4839: PUSH
4840: LD_INT 2
4842: PUSH
4843: LD_INT 3
4845: PUSH
4846: LD_INT 6
4848: PUSH
4849: LD_INT 7
4851: PUSH
4852: LD_INT 8
4854: PUSH
4855: LD_INT 9
4857: PUSH
4858: LD_INT 10
4860: PUSH
4861: LD_INT 51
4863: PUSH
4864: LD_INT 52
4866: PUSH
4867: LD_INT 53
4869: PUSH
4870: LD_INT 200
4872: PUSH
4873: LD_INT 201
4875: PUSH
4876: LD_INT 202
4878: PUSH
4879: LD_INT 203
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4909
// disable ( i ) ;
4902: LD_VAR 0 1
4906: DISABLE_MARKED
4907: GO 4899
4909: POP
4910: POP
// end ;
4911: PPOPN 1
4913: END
// export function uklid_rusu ; begin
4914: LD_INT 0
4916: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
4917: LD_INT 42
4919: PPUSH
4920: LD_INT 3
4922: PPUSH
4923: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
4927: LD_INT 43
4929: PPUSH
4930: LD_INT 4
4932: PPUSH
4933: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab2 ) ;
4937: LD_INT 44
4939: PPUSH
4940: LD_INT 16
4942: PPUSH
4943: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab2 ) ;
4947: LD_INT 45
4949: PPUSH
4950: LD_INT 16
4952: PPUSH
4953: CALL_OW 120
// ComEnterUnit ( RU1_sci3 , RU1_lab2 ) ;
4957: LD_INT 46
4959: PPUSH
4960: LD_INT 16
4962: PPUSH
4963: CALL_OW 120
// ComEnterUnit ( RU1_sci4 , RU1_lab1 ) ;
4967: LD_INT 47
4969: PPUSH
4970: LD_INT 6
4972: PPUSH
4973: CALL_OW 120
// ComEnterUnit ( RU1_sci5 , RU1_lab1 ) ;
4977: LD_INT 48
4979: PPUSH
4980: LD_INT 6
4982: PPUSH
4983: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_fac ) ;
4987: LD_INT 49
4989: PPUSH
4990: LD_INT 5
4992: PPUSH
4993: CALL_OW 120
// ComEnterUnit ( RU1_me2 , RU1_fac ) ;
4997: LD_INT 50
4999: PPUSH
5000: LD_INT 5
5002: PPUSH
5003: CALL_OW 120
// ComEnterUnit ( RU1_me3 , RU1_fac ) ;
5007: LD_INT 51
5009: PPUSH
5010: LD_INT 5
5012: PPUSH
5013: CALL_OW 120
// ComEnterUnit ( pop , RU1_bar1 ) ;
5017: LD_EXP 28
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar1 ) ;
5029: LD_INT 52
5031: PPUSH
5032: LD_INT 2
5034: PPUSH
5035: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar1 ) ;
5039: LD_INT 53
5041: PPUSH
5042: LD_INT 2
5044: PPUSH
5045: CALL_OW 120
// ComEnterUnit ( RU1_sol3 , RU1_bar2 ) ;
5049: LD_INT 56
5051: PPUSH
5052: LD_INT 17
5054: PPUSH
5055: CALL_OW 120
// ComEnterUnit ( RU1_sol4 , RU1_bar2 ) ;
5059: LD_INT 54
5061: PPUSH
5062: LD_INT 17
5064: PPUSH
5065: CALL_OW 120
// ComEnterUnit ( RU1_sol5 , RU1_bar2 ) ;
5069: LD_INT 55
5071: PPUSH
5072: LD_INT 17
5074: PPUSH
5075: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
5079: LD_INT 57
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: CALL_OW 120
// end ;
5089: LD_VAR 0 1
5093: RET
// every 5 5$30 do var pom ;
5094: GO 5096
5096: DISABLE
5097: LD_INT 0
5099: PPUSH
// begin schol2 = create_scholtze ;
5100: LD_ADDR_EXP 34
5104: PUSH
5105: CALL 2270 0 0
5109: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5110: LD_INT 70
5112: PPUSH
5113: CALL_OW 67
// CenterNowOnUnits ( schol2 ) ;
5117: LD_EXP 34
5121: PPUSH
5122: CALL_OW 87
// dialog_scholtze_enter ;
5126: CALL 11286 0 0
// ComMoveToArea ( schol2 , scholze_flee ) ;
5130: LD_EXP 34
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 113
// AddComHold ( schol2 ) ;
5142: LD_EXP 34
5146: PPUSH
5147: CALL_OW 200
// wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// amici_hlidka ;
5158: CALL 23411 0 0
// enable ( 1 ) ;
5162: LD_INT 1
5164: ENABLE_MARKED
// end ;
5165: PPOPN 1
5167: END
// every 0 0$1 trigger FilterUnitsInArea ( Schol_les , [ [ f_side , You ] ] ) > 0 marked 1 do
5168: LD_INT 26
5170: PPUSH
5171: LD_INT 22
5173: PUSH
5174: LD_EXP 1
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: PPUSH
5186: CALL_OW 70
5190: PUSH
5191: LD_INT 0
5193: GREATER
5194: IFFALSE 5268
5196: GO 5198
5198: DISABLE
// begin kecy_scholtze_nalezen = true ;
5199: LD_ADDR_EXP 44
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// dialog_scholtze_nalezen ;
5207: CALL 11358 0 0
// SetSide ( schol2 , You ) ;
5211: LD_EXP 34
5215: PPUSH
5216: LD_EXP 1
5220: PPUSH
5221: CALL_OW 235
// schol = schol2 ;
5225: LD_ADDR_EXP 33
5229: PUSH
5230: LD_EXP 34
5234: ST_TO_ADDR
// ChangeMissionObjectives ( MScholtzeOut ) ;
5235: LD_STRING MScholtzeOut
5237: PPUSH
5238: CALL_OW 337
// wait ( 1 1$0 ) ;
5242: LD_INT 2100
5244: PPUSH
5245: CALL_OW 67
// if IsLive ( schol ) then
5249: LD_EXP 33
5253: PPUSH
5254: CALL_OW 300
5258: IFFALSE 5268
// scholtze_saved = true ;
5260: LD_ADDR_EXP 37
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// end ;
5268: END
// every 1 1$0 do
5269: GO 5271
5271: DISABLE
// begin if GetResourceType ( GetBase ( RU1_dep ) , mat_oil ) < 50 then
5272: LD_INT 1
5274: PPUSH
5275: CALL_OW 274
5279: PPUSH
5280: LD_INT 2
5282: PPUSH
5283: CALL_OW 275
5287: PUSH
5288: LD_INT 50
5290: LESS
5291: IFFALSE 5311
// AddResourceType ( GetBase ( RU1_dep ) , mat_oil , 100 ) ;
5293: LD_INT 1
5295: PPUSH
5296: CALL_OW 274
5300: PPUSH
5301: LD_INT 2
5303: PPUSH
5304: LD_INT 100
5306: PPUSH
5307: CALL_OW 276
// enable ;
5311: ENABLE
// end ;
5312: END
// every 1 1$7 do
5313: GO 5315
5315: DISABLE
// begin if Researched ( You2 , tech_Weap1 ) then
5316: LD_EXP 2
5320: PPUSH
5321: LD_INT 51
5323: PPUSH
5324: CALL_OW 325
5328: IFFALSE 5355
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5330: LD_INT 51
5332: PPUSH
5333: LD_EXP 2
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5345: LD_INT 6
5347: PPUSH
5348: LD_INT 51
5350: PPUSH
5351: CALL_OW 124
// end ; enable ;
5355: ENABLE
// end ;
5356: END
// every 0 0$19 do
5357: GO 5359
5359: DISABLE
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5360: LD_INT 51
5362: PPUSH
5363: LD_EXP 2
5367: PPUSH
5368: LD_INT 1
5370: PPUSH
5371: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5375: LD_INT 6
5377: PPUSH
5378: LD_INT 51
5380: PPUSH
5381: CALL_OW 124
// end ;
5385: END
// every 0 0$5 trigger stav_omikron = 2 do
5386: LD_EXP 39
5390: PUSH
5391: LD_INT 2
5393: EQUAL
5394: IFFALSE 5437
5396: GO 5398
5398: DISABLE
// begin TTime = 7 7$0 ;
5399: LD_ADDR_LOC 21
5403: PUSH
5404: LD_INT 14700
5406: ST_TO_ADDR
// enable ( 53 ) ;
5407: LD_INT 53
5409: ENABLE_MARKED
// wait ( 7 7$0 ) ;
5410: LD_INT 14700
5412: PPUSH
5413: CALL_OW 67
// special_time = true ;
5417: LD_ADDR_EXP 48
5421: PUSH
5422: LD_INT 1
5424: ST_TO_ADDR
// hlaska_omicron ;
5425: CALL 12955 0 0
// stav_omikron = 3 ;
5429: LD_ADDR_EXP 39
5433: PUSH
5434: LD_INT 3
5436: ST_TO_ADDR
// end ;
5437: END
// export function popov_ven ; var i ; begin
5438: LD_INT 0
5440: PPUSH
5441: PPUSH
// for i = 1 to 8 do
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: DOUBLE
5448: LD_INT 1
5450: DEC
5451: ST_TO_ADDR
5452: LD_INT 8
5454: PUSH
5455: FOR_TO
5456: IFFALSE 5474
// DoNotAttack ( i , pop ) ;
5458: LD_VAR 0 2
5462: PPUSH
5463: LD_EXP 28
5467: PPUSH
5468: CALL_OW 471
5472: GO 5455
5474: POP
5475: POP
// while IsInUnit ( pop ) > 0 do
5476: LD_EXP 28
5480: PPUSH
5481: CALL_OW 310
5485: PUSH
5486: LD_INT 0
5488: GREATER
5489: IFFALSE 5556
// begin case GetType ( IsInUnit ( pop ) ) of unit_building :
5491: LD_EXP 28
5495: PPUSH
5496: CALL_OW 310
5500: PPUSH
5501: CALL_OW 247
5505: PUSH
5506: LD_INT 3
5508: DOUBLE
5509: EQUAL
5510: IFTRUE 5514
5512: GO 5526
5514: POP
// ComExitBuilding ( pop ) ; unit_vehicle :
5515: LD_EXP 28
5519: PPUSH
5520: CALL_OW 122
5524: GO 5547
5526: LD_INT 2
5528: DOUBLE
5529: EQUAL
5530: IFTRUE 5534
5532: GO 5546
5534: POP
// ComExitVehicle ( pop ) ; end ;
5535: LD_EXP 28
5539: PPUSH
5540: CALL_OW 121
5544: GO 5547
5546: POP
// wait ( 0 0$0.5 ) ;
5547: LD_INT 18
5549: PPUSH
5550: CALL_OW 67
// end ;
5554: GO 5476
// AddComMoveToArea ( pop , bst_2 ) ;
5556: LD_EXP 28
5560: PPUSH
5561: LD_INT 41
5563: PPUSH
5564: CALL_OW 173
// AddComMoveToArea ( pop , bst_3 ) ;
5568: LD_EXP 28
5572: PPUSH
5573: LD_INT 42
5575: PPUSH
5576: CALL_OW 173
// AddComHold ( pop ) ;
5580: LD_EXP 28
5584: PPUSH
5585: CALL_OW 200
// end ;
5589: LD_VAR 0 1
5593: RET
// every 0 0$5 trigger IsInArea ( pop , Exit_area ) do
5594: LD_EXP 28
5598: PPUSH
5599: LD_INT 16
5601: PPUSH
5602: CALL_OW 308
5606: IFFALSE 5620
5608: GO 5610
5610: DISABLE
// begin RemoveUnit ( pop ) ;
5611: LD_EXP 28
5615: PPUSH
5616: CALL_OW 64
// end ;
5620: END
// export function prebarveni_druhe_baze ; var pom , i ; begin
5621: LD_INT 0
5623: PPUSH
5624: PPUSH
5625: PPUSH
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You3 ] , [ f_type , unit_building ] ] ) ;
5626: LD_ADDR_VAR 0 2
5630: PUSH
5631: LD_INT 2
5633: PPUSH
5634: LD_INT 22
5636: PUSH
5637: LD_EXP 3
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 70
5664: ST_TO_ADDR
// for i in pom do
5665: LD_ADDR_VAR 0 3
5669: PUSH
5670: LD_VAR 0 2
5674: PUSH
5675: FOR_IN
5676: IFFALSE 5694
// SetSide ( i , You ) ;
5678: LD_VAR 0 3
5682: PPUSH
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 235
5692: GO 5675
5694: POP
5695: POP
// end ;
5696: LD_VAR 0 1
5700: RET
// export function pomoc_pro_omikroni_utok ; var i ; begin
5701: LD_INT 0
5703: PPUSH
5704: PPUSH
// for i in RUSKE_POSILY_NA_OMICRON_LIST do
5705: LD_ADDR_VAR 0 2
5709: PUSH
5710: LD_EXP 56
5714: PUSH
5715: FOR_IN
5716: IFFALSE 5735
// PlaceUnitArea ( i , Enterposil , false ) ;
5718: LD_VAR 0 2
5722: PPUSH
5723: LD_INT 49
5725: PPUSH
5726: LD_INT 0
5728: PPUSH
5729: CALL_OW 49
5733: GO 5715
5735: POP
5736: POP
// ComMoveToArea ( RUSKE_POSILY_NA_OMICRON_LIST , bst_4 ) ;
5737: LD_EXP 56
5741: PPUSH
5742: LD_INT 43
5744: PPUSH
5745: CALL_OW 113
// for i in RUSKE_POSILY_RIDICI_LIST do
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: LD_EXP 57
5758: PUSH
5759: FOR_IN
5760: IFFALSE 5779
// PlaceUnitArea ( i , Arabi1 , false ) ;
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 12
5769: PPUSH
5770: LD_INT 0
5772: PPUSH
5773: CALL_OW 49
5777: GO 5759
5779: POP
5780: POP
// ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , bst_1 ) ;
5781: LD_EXP 57
5785: PPUSH
5786: LD_INT 40
5788: PPUSH
5789: CALL_OW 113
// AddComEnterUnit ( RUSKE_POSILY_RIDICI_LIST , RU1_fac ) ;
5793: LD_EXP 57
5797: PPUSH
5798: LD_INT 5
5800: PPUSH
5801: CALL_OW 180
// end ;
5805: LD_VAR 0 1
5809: RET
// every 0 0$1 trigger stav_omikron = 3 and not special_time do
5810: LD_EXP 39
5814: PUSH
5815: LD_INT 3
5817: EQUAL
5818: PUSH
5819: LD_EXP 48
5823: NOT
5824: AND
5825: IFFALSE 5859
5827: GO 5829
5829: DISABLE
// begin disable ( 53 ) ;
5830: LD_INT 53
5832: DISABLE_MARKED
// TTime = 3 3$0 ;
5833: LD_ADDR_LOC 21
5837: PUSH
5838: LD_INT 6300
5840: ST_TO_ADDR
// enable ( 51 ) ;
5841: LD_INT 51
5843: ENABLE_MARKED
// counter_zapnut = true ;
5844: LD_ADDR_LOC 17
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// posli_ruske_posily ;
5852: CALL 6359 0 0
// enable ( 3 ) ;
5856: LD_INT 3
5858: ENABLE_MARKED
// end ;
5859: END
// every 0 0$1 trigger stav_omikron = 3 and special_time do
5860: LD_EXP 39
5864: PUSH
5865: LD_INT 3
5867: EQUAL
5868: PUSH
5869: LD_EXP 48
5873: AND
5874: IFFALSE 5908
5876: GO 5878
5878: DISABLE
// begin disable ( 53 ) ;
5879: LD_INT 53
5881: DISABLE_MARKED
// TTime = 2 2$0 ;
5882: LD_ADDR_LOC 21
5886: PUSH
5887: LD_INT 4200
5889: ST_TO_ADDR
// enable ( 51 ) ;
5890: LD_INT 51
5892: ENABLE_MARKED
// counter_zapnut = true ;
5893: LD_ADDR_LOC 17
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
// posli_ruske_posily ;
5901: CALL 6359 0 0
// enable ( 3 ) ;
5905: LD_INT 3
5907: ENABLE_MARKED
// end ;
5908: END
// every 0 0$3 trigger stav_omikron = 3 do var i , pom , pom1 , pom2 , rpom ; var rusi_enter_new ; var poc ;
5909: LD_EXP 39
5913: PUSH
5914: LD_INT 3
5916: EQUAL
5917: IFFALSE 6111
5919: GO 5921
5921: DISABLE
5922: LD_INT 0
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
5930: PPUSH
// begin if FilterUnitsInArea ( Om_zone , [ [ f_side , You ] ] ) then
5931: LD_INT 8
5933: PPUSH
5934: LD_INT 22
5936: PUSH
5937: LD_EXP 1
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: PPUSH
5949: CALL_OW 70
5953: IFFALSE 6110
// begin rpom = FilterUnitsExceptArea ( Om_pom1 , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: LD_INT 23
5962: PPUSH
5963: LD_INT 22
5965: PUSH
5966: LD_EXP 1
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 21
5977: PUSH
5978: LD_INT 1
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 71
5993: ST_TO_ADDR
// if rpom = 0 then
5994: LD_VAR 0 5
5998: PUSH
5999: LD_INT 0
6001: EQUAL
6002: IFFALSE 6107
// begin disable ( 51 ) ;
6004: LD_INT 51
6006: DISABLE_MARKED
// disable ( 52 ) ;
6007: LD_INT 52
6009: DISABLE_MARKED
// konec_counteru = true ;
6010: LD_ADDR_EXP 45
6014: PUSH
6015: LD_INT 1
6017: ST_TO_ADDR
// poc = 0 ;
6018: LD_ADDR_VAR 0 7
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// while FilterUnitsInArea ( Om_zone , [ [ f_side , You2 ] ] ) = 0 and poc < 60 do
6026: LD_INT 8
6028: PPUSH
6029: LD_INT 22
6031: PUSH
6032: LD_EXP 2
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: EMPTY
6042: LIST
6043: PPUSH
6044: CALL_OW 70
6048: PUSH
6049: LD_INT 0
6051: EQUAL
6052: PUSH
6053: LD_VAR 0 7
6057: PUSH
6058: LD_INT 60
6060: LESS
6061: AND
6062: IFFALSE 6087
// begin wait ( 0 0$1 ) ;
6064: LD_INT 35
6066: PPUSH
6067: CALL_OW 67
// poc = poc + 1 ;
6071: LD_ADDR_VAR 0 7
6075: PUSH
6076: LD_VAR 0 7
6080: PUSH
6081: LD_INT 1
6083: PLUS
6084: ST_TO_ADDR
// end ;
6085: GO 6026
// stav_omikron = 4 ;
6087: LD_ADDR_EXP 39
6091: PUSH
6092: LD_INT 4
6094: ST_TO_ADDR
// dialog_pred_omicronem ;
6095: CALL 13038 0 0
// enable ( 9 ) ;
6099: LD_INT 9
6101: ENABLE_MARKED
// disable ( 3 ) ;
6102: LD_INT 3
6104: DISABLE_MARKED
// end else
6105: GO 6108
// enable ;
6107: ENABLE
// end else
6108: GO 6111
// enable ;
6110: ENABLE
// end ;
6111: PPOPN 7
6113: END
// export function CheckVehicles ; var pom , pom1 , pom2 ; begin
6114: LD_INT 0
6116: PPUSH
6117: PPUSH
6118: PPUSH
6119: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6120: LD_ADDR_VAR 0 2
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_EXP 1
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 21
6139: PUSH
6140: LD_INT 2
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PPUSH
6151: CALL_OW 69
6155: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
6156: LD_ADDR_VAR 0 3
6160: PUSH
6161: LD_INT 22
6163: PUSH
6164: LD_EXP 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 21
6175: PUSH
6176: LD_INT 1
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 51
6185: PUSH
6186: EMPTY
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: PPUSH
6194: CALL_OW 69
6198: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Ru2_base , [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
6199: LD_ADDR_VAR 0 4
6203: PUSH
6204: LD_INT 2
6206: PPUSH
6207: LD_INT 22
6209: PUSH
6210: LD_EXP 2
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 21
6221: PUSH
6222: LD_INT 2
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 70
6237: ST_TO_ADDR
// pom = pom + pom2 ;
6238: LD_ADDR_VAR 0 2
6242: PUSH
6243: LD_VAR 0 2
6247: PUSH
6248: LD_VAR 0 4
6252: PLUS
6253: ST_TO_ADDR
// if pom < pom1 then
6254: LD_VAR 0 2
6258: PUSH
6259: LD_VAR 0 3
6263: LESS
6264: IFFALSE 6274
// stav_aut_new = 3 ;
6266: LD_ADDR_EXP 46
6270: PUSH
6271: LD_INT 3
6273: ST_TO_ADDR
// if pom = pom1 then
6274: LD_VAR 0 2
6278: PUSH
6279: LD_VAR 0 3
6283: EQUAL
6284: IFFALSE 6294
// stav_aut_new = 2 ;
6286: LD_ADDR_EXP 46
6290: PUSH
6291: LD_INT 2
6293: ST_TO_ADDR
// if pom > pom1 and KurinAddTime = 0 then
6294: LD_VAR 0 2
6298: PUSH
6299: LD_VAR 0 3
6303: GREATER
6304: PUSH
6305: LD_EXP 7
6309: PUSH
6310: LD_INT 0
6312: EQUAL
6313: AND
6314: IFFALSE 6324
// stav_aut_new = 1 ;
6316: LD_ADDR_EXP 46
6320: PUSH
6321: LD_INT 1
6323: ST_TO_ADDR
// if pom >= pom1 and KurinAddTime = 1 then
6324: LD_VAR 0 2
6328: PUSH
6329: LD_VAR 0 3
6333: GREATEREQUAL
6334: PUSH
6335: LD_EXP 7
6339: PUSH
6340: LD_INT 1
6342: EQUAL
6343: AND
6344: IFFALSE 6354
// stav_aut_new = 2 ;
6346: LD_ADDR_EXP 46
6350: PUSH
6351: LD_INT 2
6353: ST_TO_ADDR
// end ;
6354: LD_VAR 0 1
6358: RET
// function posli_ruske_posily ; begin
6359: LD_INT 0
6361: PPUSH
// McMove ( 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , [ [ 109 , 54 ] , [ 102 , 38 ] , [ 90 , 22 ] , [ 54 , 10 ] ] , [ mc_move_dontcapture ] ) ;
6362: LD_INT 1
6364: PPUSH
6365: LD_INT 22
6367: PUSH
6368: LD_INT 6
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 21
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PPUSH
6389: CALL_OW 69
6393: PPUSH
6394: LD_INT 109
6396: PUSH
6397: LD_INT 54
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 102
6406: PUSH
6407: LD_INT 38
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: LD_INT 90
6416: PUSH
6417: LD_INT 22
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 54
6426: PUSH
6427: LD_INT 10
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PPUSH
6440: LD_INT 5
6442: PUSH
6443: EMPTY
6444: LIST
6445: PPUSH
6446: CALL_OW 398
// end ;
6450: LD_VAR 0 1
6454: RET
// every 0 0$7 marked 2 do var i , k , pom ;
6455: GO 6457
6457: DISABLE
6458: LD_INT 0
6460: PPUSH
6461: PPUSH
6462: PPUSH
// begin ComExitBuilding ( RUSKE_POSILY_RIDICI_LIST ) ;
6463: LD_EXP 57
6467: PPUSH
6468: CALL_OW 122
// while FilterUnitsInArea ( RU2_base , [ [ f_side , You2 ] ] ) < RUSKE_POSILY_RIDICI_LIST do
6472: LD_INT 2
6474: PPUSH
6475: LD_INT 22
6477: PUSH
6478: LD_EXP 2
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: PPUSH
6490: CALL_OW 70
6494: PUSH
6495: LD_EXP 57
6499: LESS
6500: IFFALSE 6523
// begin ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , drivers_enter ) ;
6502: LD_EXP 57
6506: PPUSH
6507: LD_INT 47
6509: PPUSH
6510: CALL_OW 113
// wait ( 0 0$1 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// end ;
6521: GO 6472
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_not , [ f_occupied ] ] ] ) ;
6523: LD_ADDR_VAR 0 3
6527: PUSH
6528: LD_INT 2
6530: PPUSH
6531: LD_INT 22
6533: PUSH
6534: LD_EXP 1
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 21
6545: PUSH
6546: LD_INT 2
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 3
6555: PUSH
6556: LD_INT 59
6558: PUSH
6559: EMPTY
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 70
6575: ST_TO_ADDR
// if not pom then
6576: LD_VAR 0 3
6580: NOT
6581: IFFALSE 6587
// konec_mise_lhani ;
6583: CALL 1401 0 0
// if pom < RUSKE_POSILY_RIDICI_LIST then
6587: LD_VAR 0 3
6591: PUSH
6592: LD_EXP 57
6596: LESS
6597: IFFALSE 6611
// k := pom else
6599: LD_ADDR_VAR 0 2
6603: PUSH
6604: LD_VAR 0 3
6608: ST_TO_ADDR
6609: GO 6621
// k := RUSKE_POSILY_RIDICI_LIST ;
6611: LD_ADDR_VAR 0 2
6615: PUSH
6616: LD_EXP 57
6620: ST_TO_ADDR
// for i = 1 to k do
6621: LD_ADDR_VAR 0 1
6625: PUSH
6626: DOUBLE
6627: LD_INT 1
6629: DEC
6630: ST_TO_ADDR
6631: LD_VAR 0 2
6635: PUSH
6636: FOR_TO
6637: IFFALSE 6688
// begin ComEnterUnit ( RUSKE_POSILY_RIDICI_LIST [ i ] , pom [ i ] ) ;
6639: LD_EXP 57
6643: PUSH
6644: LD_VAR 0 1
6648: ARRAY
6649: PPUSH
6650: LD_VAR 0 3
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: PPUSH
6661: CALL_OW 120
// AddComMoveXY ( RUSKE_POSILY_RIDICI_LIST [ i ] , 60 , 13 ) ;
6665: LD_EXP 57
6669: PUSH
6670: LD_VAR 0 1
6674: ARRAY
6675: PPUSH
6676: LD_INT 60
6678: PPUSH
6679: LD_INT 13
6681: PPUSH
6682: CALL_OW 171
// end ;
6686: GO 6636
6688: POP
6689: POP
// end ;
6690: PPOPN 3
6692: END
// every 0 0$1 marked 3 do
6693: GO 6695
6695: DISABLE
// begin if special_time then
6696: LD_EXP 48
6700: IFFALSE 6711
// wait ( 2 2$0 ) else
6702: LD_INT 4200
6704: PPUSH
6705: CALL_OW 67
6709: GO 6718
// wait ( 3 3$0 ) ;
6711: LD_INT 6300
6713: PPUSH
6714: CALL_OW 67
// if not setkani_om then
6718: LD_EXP 41
6722: NOT
6723: IFFALSE 6761
// begin dialog_upoz ;
6725: CALL 15282 0 0
// TTime = 2 2$0 ;
6729: LD_ADDR_LOC 21
6733: PUSH
6734: LD_INT 4200
6736: ST_TO_ADDR
// disable ( 51 ) ;
6737: LD_INT 51
6739: DISABLE_MARKED
// enable ( 52 ) ;
6740: LD_INT 52
6742: ENABLE_MARKED
// wait ( 2 2$0 ) ;
6743: LD_INT 4200
6745: PPUSH
6746: CALL_OW 67
// if not setkani_om then
6750: LD_EXP 41
6754: NOT
6755: IFFALSE 6761
// konec_pred_omikronem ;
6757: CALL 1420 0 0
// end ; end ;
6761: END
// every 0 0$1 marked 4 do var pom ;
6762: GO 6764
6764: DISABLE
6765: LD_INT 0
6767: PPUSH
// begin wait ( utok_na_omikron - 5 5$0 ) ;
6768: LD_EXP 19
6772: PUSH
6773: LD_INT 10500
6775: MINUS
6776: PPUSH
6777: CALL_OW 67
// pomoc_pro_omikroni_utok ;
6781: CALL 5701 0 0
// wait ( 5 5$0 ) ;
6785: LD_INT 10500
6787: PPUSH
6788: CALL_OW 67
// disable ( 5 ) ;
6792: LD_INT 5
6794: DISABLE_MARKED
// if dialog_probehnul then
6795: LD_LOC 19
6799: IFFALSE 6805
// exit else
6801: GO 6913
6803: GO 6813
// dialog_probehnul := true ;
6805: LD_ADDR_LOC 19
6809: PUSH
6810: LD_INT 1
6812: ST_TO_ADDR
// pom = dialog_otazka_poctu_aut ;
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: CALL 12744 0 0
6822: ST_TO_ADDR
// case pom of 1 :
6823: LD_VAR 0 1
6827: PUSH
6828: LD_INT 1
6830: DOUBLE
6831: EQUAL
6832: IFTRUE 6836
6834: GO 6858
6836: POP
// begin stav_omikron = 3 ;
6837: LD_ADDR_EXP 39
6841: PUSH
6842: LD_INT 3
6844: ST_TO_ADDR
// stav_aut = 1 ;
6845: LD_ADDR_EXP 38
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// enable ( 2 ) ;
6853: LD_INT 2
6855: ENABLE_MARKED
// end ; 2 :
6856: GO 6913
6858: LD_INT 2
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6885
6866: POP
// begin stav_omikron = 3 ;
6867: LD_ADDR_EXP 39
6871: PUSH
6872: LD_INT 3
6874: ST_TO_ADDR
// stav_aut = 2 ;
6875: LD_ADDR_EXP 38
6879: PUSH
6880: LD_INT 2
6882: ST_TO_ADDR
// end ; 3 :
6883: GO 6913
6885: LD_INT 3
6887: DOUBLE
6888: EQUAL
6889: IFTRUE 6893
6891: GO 6912
6893: POP
// begin stav_omikron = 2 ;
6894: LD_ADDR_EXP 39
6898: PUSH
6899: LD_INT 2
6901: ST_TO_ADDR
// stav_aut = 3 ;
6902: LD_ADDR_EXP 38
6906: PUSH
6907: LD_INT 3
6909: ST_TO_ADDR
// end ; end ;
6910: GO 6913
6912: POP
// end ;
6913: PPOPN 1
6915: END
// every 0 0$17 trigger stav_omikron < 2 marked 5 do var un , veh ;
6916: LD_EXP 39
6920: PUSH
6921: LD_INT 2
6923: LESS
6924: IFFALSE 7156
6926: GO 6928
6928: DISABLE
6929: LD_INT 0
6931: PPUSH
6932: PPUSH
// begin un = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
6933: LD_ADDR_VAR 0 1
6937: PUSH
6938: LD_INT 22
6940: PUSH
6941: LD_EXP 1
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 21
6952: PUSH
6953: LD_INT 1
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 69
6968: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6969: LD_ADDR_VAR 0 2
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_EXP 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 21
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 69
7004: ST_TO_ADDR
// if veh >= ( un + 2 ) then
7005: LD_VAR 0 2
7009: PUSH
7010: LD_VAR 0 1
7014: PUSH
7015: LD_INT 2
7017: PLUS
7018: GREATEREQUAL
7019: IFFALSE 7155
// begin disable ( 4 ) ;
7021: LD_INT 4
7023: DISABLE_MARKED
// pomoc_pro_omikroni_utok ;
7024: CALL 5701 0 0
// if dialog_probehnul then
7028: LD_LOC 19
7032: IFFALSE 7038
// exit else
7034: GO 7156
7036: GO 7046
// dialog_probehnul = true ;
7038: LD_ADDR_LOC 19
7042: PUSH
7043: LD_INT 1
7045: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7046: LD_INT 350
7048: PPUSH
7049: CALL_OW 67
// un = dialog_otazka_poctu_aut ;
7053: LD_ADDR_VAR 0 1
7057: PUSH
7058: CALL 12744 0 0
7062: ST_TO_ADDR
// case un of 1 :
7063: LD_VAR 0 1
7067: PUSH
7068: LD_INT 1
7070: DOUBLE
7071: EQUAL
7072: IFTRUE 7076
7074: GO 7098
7076: POP
// begin stav_omikron = 3 ;
7077: LD_ADDR_EXP 39
7081: PUSH
7082: LD_INT 3
7084: ST_TO_ADDR
// stav_aut = 1 ;
7085: LD_ADDR_EXP 38
7089: PUSH
7090: LD_INT 1
7092: ST_TO_ADDR
// enable ( 2 ) ;
7093: LD_INT 2
7095: ENABLE_MARKED
// end ; 2 :
7096: GO 7153
7098: LD_INT 2
7100: DOUBLE
7101: EQUAL
7102: IFTRUE 7106
7104: GO 7125
7106: POP
// begin stav_omikron = 3 ;
7107: LD_ADDR_EXP 39
7111: PUSH
7112: LD_INT 3
7114: ST_TO_ADDR
// stav_aut = 2 ;
7115: LD_ADDR_EXP 38
7119: PUSH
7120: LD_INT 2
7122: ST_TO_ADDR
// end ; 3 :
7123: GO 7153
7125: LD_INT 3
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7152
7133: POP
// begin stav_omikron = 2 ;
7134: LD_ADDR_EXP 39
7138: PUSH
7139: LD_INT 2
7141: ST_TO_ADDR
// stav_aut = 3 ;
7142: LD_ADDR_EXP 38
7146: PUSH
7147: LD_INT 3
7149: ST_TO_ADDR
// end ; end ;
7150: GO 7153
7152: POP
// end else
7153: GO 7156
// enable ;
7155: ENABLE
// end ;
7156: PPOPN 2
7158: END
// export function manage_ruske_computery_zpet ; var pom ; begin
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
// disable ( 200 ) ;
7163: LD_INT 200
7165: DISABLE_MARKED
// disable ( 201 ) ;
7166: LD_INT 201
7168: DISABLE_MARKED
// disable ( 202 ) ;
7169: LD_INT 202
7171: DISABLE_MARKED
// disable ( 203 ) ;
7172: LD_INT 203
7174: DISABLE_MARKED
// pom = FilterUnitsInArea ( Am_base , [ [ F_side , You2 ] ] ) ;
7175: LD_ADDR_VAR 0 2
7179: PUSH
7180: LD_INT 6
7182: PPUSH
7183: LD_INT 22
7185: PUSH
7186: LD_EXP 2
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: PPUSH
7198: CALL_OW 70
7202: ST_TO_ADDR
// McMove ( 2 , pom , [ [ 42 , 14 ] , [ 60 , 15 ] , [ 95 , 21 ] , [ 100 , 34 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7203: LD_INT 2
7205: PPUSH
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_INT 42
7213: PUSH
7214: LD_INT 14
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 60
7223: PUSH
7224: LD_INT 15
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 95
7233: PUSH
7234: LD_INT 21
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 100
7243: PUSH
7244: LD_INT 34
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: PPUSH
7257: LD_INT 6
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 398
// enable ( 5 ) ;
7275: LD_INT 5
7277: ENABLE_MARKED
// R_comp = pom ;
7278: LD_ADDR_LOC 18
7282: PUSH
7283: LD_VAR 0 2
7287: ST_TO_ADDR
// end ;
7288: LD_VAR 0 1
7292: RET
// every 0 0$15 marked 5 do
7293: GO 7295
7295: DISABLE
// begin wait ( 1 1$0 ) ;
7296: LD_INT 2100
7298: PPUSH
7299: CALL_OW 67
// McMove ( 1 , R_comp , [ [ 110 , 59 ] , [ 129 , 75 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7303: LD_INT 1
7305: PPUSH
7306: LD_LOC 18
7310: PPUSH
7311: LD_INT 110
7313: PUSH
7314: LD_INT 59
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: LD_INT 129
7323: PUSH
7324: LD_INT 75
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PPUSH
7335: LD_INT 6
7337: PUSH
7338: LD_INT 1
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: PPUSH
7349: CALL_OW 398
// end ;
7353: END
// function split_ruske_jednotky ( jedn ) ; var i , pom ; var p1 , p2 , p3 , p4 ; var a ; begin
7354: LD_INT 0
7356: PPUSH
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
7363: PPUSH
// p1 = [ ] ;
7364: LD_ADDR_VAR 0 5
7368: PUSH
7369: EMPTY
7370: ST_TO_ADDR
// p2 = [ ] ;
7371: LD_ADDR_VAR 0 6
7375: PUSH
7376: EMPTY
7377: ST_TO_ADDR
// p3 = [ ] ;
7378: LD_ADDR_VAR 0 7
7382: PUSH
7383: EMPTY
7384: ST_TO_ADDR
// p4 = [ ] ;
7385: LD_ADDR_VAR 0 8
7389: PUSH
7390: EMPTY
7391: ST_TO_ADDR
// for i in jedn do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_VAR 0 1
7401: PUSH
7402: FOR_IN
7403: IFFALSE 7537
// begin pom = Rand ( 1 , 4 ) ;
7405: LD_ADDR_VAR 0 4
7409: PUSH
7410: LD_INT 1
7412: PPUSH
7413: LD_INT 4
7415: PPUSH
7416: CALL_OW 12
7420: ST_TO_ADDR
// case pom of 1 :
7421: LD_VAR 0 4
7425: PUSH
7426: LD_INT 1
7428: DOUBLE
7429: EQUAL
7430: IFTRUE 7434
7432: GO 7453
7434: POP
// p1 = p1 ^ i ; 2 :
7435: LD_ADDR_VAR 0 5
7439: PUSH
7440: LD_VAR 0 5
7444: PUSH
7445: LD_VAR 0 3
7449: ADD
7450: ST_TO_ADDR
7451: GO 7535
7453: LD_INT 2
7455: DOUBLE
7456: EQUAL
7457: IFTRUE 7461
7459: GO 7480
7461: POP
// p2 = p2 ^ i ; 3 :
7462: LD_ADDR_VAR 0 6
7466: PUSH
7467: LD_VAR 0 6
7471: PUSH
7472: LD_VAR 0 3
7476: ADD
7477: ST_TO_ADDR
7478: GO 7535
7480: LD_INT 3
7482: DOUBLE
7483: EQUAL
7484: IFTRUE 7488
7486: GO 7507
7488: POP
// p3 = p3 ^ i ; 4 :
7489: LD_ADDR_VAR 0 7
7493: PUSH
7494: LD_VAR 0 7
7498: PUSH
7499: LD_VAR 0 3
7503: ADD
7504: ST_TO_ADDR
7505: GO 7535
7507: LD_INT 4
7509: DOUBLE
7510: EQUAL
7511: IFTRUE 7515
7513: GO 7534
7515: POP
// p4 = p4 ^ i ; end ;
7516: LD_ADDR_VAR 0 8
7520: PUSH
7521: LD_VAR 0 8
7525: PUSH
7526: LD_VAR 0 3
7530: ADD
7531: ST_TO_ADDR
7532: GO 7535
7534: POP
// end ;
7535: GO 7402
7537: POP
7538: POP
// a = [ p1 , p2 , p3 , p4 ] ;
7539: LD_ADDR_VAR 0 9
7543: PUSH
7544: LD_VAR 0 5
7548: PUSH
7549: LD_VAR 0 6
7553: PUSH
7554: LD_VAR 0 7
7558: PUSH
7559: LD_VAR 0 8
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: ST_TO_ADDR
// result := a ;
7570: LD_ADDR_VAR 0 2
7574: PUSH
7575: LD_VAR 0 9
7579: ST_TO_ADDR
// end ;
7580: LD_VAR 0 2
7584: RET
// every 0 0$1 marked 6 do var pom , i ;
7585: GO 7587
7587: DISABLE
7588: LD_INT 0
7590: PPUSH
7591: PPUSH
// begin pom = FilterUnitsInArea ( RU_odber , [ [ f_side , You2 ] ] ) ;
7592: LD_ADDR_VAR 0 1
7596: PUSH
7597: LD_INT 27
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_EXP 2
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: EMPTY
7613: LIST
7614: PPUSH
7615: CALL_OW 70
7619: ST_TO_ADDR
// if pom > 0 then
7620: LD_VAR 0 1
7624: PUSH
7625: LD_INT 0
7627: GREATER
7628: IFFALSE 7672
// begin Rusi_utekli = Rusi_utekli ^ pom ;
7630: LD_ADDR_EXP 42
7634: PUSH
7635: LD_EXP 42
7639: PUSH
7640: LD_VAR 0 1
7644: ADD
7645: ST_TO_ADDR
// for i in pom do
7646: LD_ADDR_VAR 0 2
7650: PUSH
7651: LD_VAR 0 1
7655: PUSH
7656: FOR_IN
7657: IFFALSE 7670
// RemoveUnit ( i ) ;
7659: LD_VAR 0 2
7663: PPUSH
7664: CALL_OW 64
7668: GO 7656
7670: POP
7671: POP
// end ; enable ;
7672: ENABLE
// end ;
7673: PPOPN 2
7675: END
// every 25 25$0 do var i , pom ;
7676: GO 7678
7678: DISABLE
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
// begin for i in RU_posily_na_utek do
7683: LD_ADDR_VAR 0 1
7687: PUSH
7688: LD_EXP 58
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7713
// PlaceUnitArea ( i , Ru_posily , false ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: LD_INT 28
7703: PPUSH
7704: LD_INT 0
7706: PPUSH
7707: CALL_OW 49
7711: GO 7693
7713: POP
7714: POP
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_type , unit_vehicle ] ] ) ;
7715: LD_ADDR_VAR 0 2
7719: PUSH
7720: LD_EXP 58
7724: PPUSH
7725: LD_INT 21
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: EMPTY
7736: LIST
7737: PPUSH
7738: CALL_OW 72
7742: ST_TO_ADDR
// ComMoveXY ( pom , 155 , 93 ) ;
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_INT 155
7750: PPUSH
7751: LD_INT 93
7753: PPUSH
7754: CALL_OW 111
// Rusi_save = pom ;
7758: LD_ADDR_EXP 43
7762: PUSH
7763: LD_VAR 0 2
7767: ST_TO_ADDR
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_soldier ] ] ) ;
7768: LD_ADDR_VAR 0 2
7772: PUSH
7773: LD_EXP 58
7777: PPUSH
7778: LD_INT 25
7780: PUSH
7781: LD_INT 1
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: PPUSH
7791: CALL_OW 72
7795: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_bar2 ) ;
7796: LD_VAR 0 2
7800: PPUSH
7801: LD_INT 17
7803: PPUSH
7804: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_mechanic ] ] ) ;
7808: LD_ADDR_VAR 0 2
7812: PUSH
7813: LD_EXP 58
7817: PPUSH
7818: LD_INT 25
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: PPUSH
7831: CALL_OW 72
7835: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_fac ) ;
7836: LD_VAR 0 2
7840: PPUSH
7841: LD_INT 5
7843: PPUSH
7844: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_engineer ] ] ) ;
7848: LD_ADDR_VAR 0 2
7852: PUSH
7853: LD_EXP 58
7857: PPUSH
7858: LD_INT 25
7860: PUSH
7861: LD_INT 2
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: PPUSH
7871: CALL_OW 72
7875: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_dep ) ;
7876: LD_VAR 0 2
7880: PPUSH
7881: LD_INT 1
7883: PPUSH
7884: CALL_OW 120
// Rusi_save = Rusi_save ^ [ RU1_sol1 , RU1_me3 , Ru1_sci2 , RU1_sci5 , RU1_sci3 , RU1_sol5 , RU1_eng1 ] ;
7888: LD_ADDR_EXP 43
7892: PUSH
7893: LD_EXP 43
7897: PUSH
7898: LD_INT 52
7900: PUSH
7901: LD_INT 51
7903: PUSH
7904: LD_INT 45
7906: PUSH
7907: LD_INT 48
7909: PUSH
7910: LD_INT 46
7912: PUSH
7913: LD_INT 55
7915: PUSH
7916: LD_INT 57
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: ADD
7928: ST_TO_ADDR
// end ;
7929: PPOPN 2
7931: END
// export function posli_rusy_pryc ; var pom ; begin
7932: LD_INT 0
7934: PPUSH
7935: PPUSH
// SetLives ( Rusi_save , 800 ) ;
7936: LD_EXP 43
7940: PPUSH
7941: LD_INT 800
7943: PPUSH
7944: CALL_OW 234
// pom = split_ruske_jednotky ( Rusi_save ) ;
7948: LD_ADDR_VAR 0 2
7952: PUSH
7953: LD_EXP 43
7957: PPUSH
7958: CALL 7354 0 1
7962: ST_TO_ADDR
// ComExitBuilding ( Rusi_save ) ;
7963: LD_EXP 43
7967: PPUSH
7968: CALL_OW 122
// AddComMoveXY ( pom [ 1 ] , 110 , 45 ) ;
7972: LD_VAR 0 2
7976: PUSH
7977: LD_INT 1
7979: ARRAY
7980: PPUSH
7981: LD_INT 110
7983: PPUSH
7984: LD_INT 45
7986: PPUSH
7987: CALL_OW 171
// AddComMoveXY ( pom [ 2 ] , 103 , 60 ) ;
7991: LD_VAR 0 2
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PPUSH
8000: LD_INT 103
8002: PPUSH
8003: LD_INT 60
8005: PPUSH
8006: CALL_OW 171
// AddComMoveXY ( pom [ 3 ] , 76 , 80 ) ;
8010: LD_VAR 0 2
8014: PUSH
8015: LD_INT 3
8017: ARRAY
8018: PPUSH
8019: LD_INT 76
8021: PPUSH
8022: LD_INT 80
8024: PPUSH
8025: CALL_OW 171
// AddComMoveXY ( pom [ 4 ] , 53 , 1 ) ;
8029: LD_VAR 0 2
8033: PUSH
8034: LD_INT 4
8036: ARRAY
8037: PPUSH
8038: LD_INT 53
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 171
// end ;
8048: LD_VAR 0 1
8052: RET
// export function posli_lidi_zpet_omicron ; var pom ; var pom1 , i ; begin
8053: LD_INT 0
8055: PPUSH
8056: PPUSH
8057: PPUSH
8058: PPUSH
// pom1 = [ ] ;
8059: LD_ADDR_VAR 0 3
8063: PUSH
8064: EMPTY
8065: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_building ] , [ f_side , You ] ] ) ;
8066: LD_ADDR_VAR 0 2
8070: PUSH
8071: LD_INT 20
8073: PPUSH
8074: LD_INT 21
8076: PUSH
8077: LD_INT 3
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: LD_INT 22
8086: PUSH
8087: LD_EXP 1
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 70
8104: ST_TO_ADDR
// for i in pom do
8105: LD_ADDR_VAR 0 4
8109: PUSH
8110: LD_VAR 0 2
8114: PUSH
8115: FOR_IN
8116: IFFALSE 8141
// pom1 = pom1 ^ UnitsInside ( i ) ;
8118: LD_ADDR_VAR 0 3
8122: PUSH
8123: LD_VAR 0 3
8127: PUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 313
8137: ADD
8138: ST_TO_ADDR
8139: GO 8115
8141: POP
8142: POP
// ComExitBuilding ( pom1 ) ;
8143: LD_VAR 0 3
8147: PPUSH
8148: CALL_OW 122
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , You ] ] ) ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 20
8159: PPUSH
8160: LD_INT 21
8162: PUSH
8163: LD_INT 1
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 22
8172: PUSH
8173: LD_EXP 1
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PPUSH
8186: CALL_OW 70
8190: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
8191: LD_ADDR_VAR 0 3
8195: PUSH
8196: LD_VAR 0 3
8200: PUSH
8201: LD_VAR 0 2
8205: ADD
8206: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , You ] ] ) ;
8207: LD_ADDR_VAR 0 2
8211: PUSH
8212: LD_INT 20
8214: PPUSH
8215: LD_INT 21
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 22
8227: PUSH
8228: LD_EXP 1
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: ST_TO_ADDR
// for i in pom do
8246: LD_ADDR_VAR 0 4
8250: PUSH
8251: LD_VAR 0 2
8255: PUSH
8256: FOR_IN
8257: IFFALSE 8309
// begin pom1 = pom ^ i ;
8259: LD_ADDR_VAR 0 3
8263: PUSH
8264: LD_VAR 0 2
8268: PUSH
8269: LD_VAR 0 4
8273: ADD
8274: ST_TO_ADDR
// if IsDrivenBy ( i ) then
8275: LD_VAR 0 4
8279: PPUSH
8280: CALL_OW 311
8284: IFFALSE 8307
// pom1 = pom1 ^ IsDrivenBy ( i ) ;
8286: LD_ADDR_VAR 0 3
8290: PUSH
8291: LD_VAR 0 3
8295: PUSH
8296: LD_VAR 0 4
8300: PPUSH
8301: CALL_OW 311
8305: ADD
8306: ST_TO_ADDR
// end ;
8307: GO 8256
8309: POP
8310: POP
// SetSide ( pom1 , You3 ) ;
8311: LD_VAR 0 3
8315: PPUSH
8316: LD_EXP 3
8320: PPUSH
8321: CALL_OW 235
// pom = FilterUnitsInArea ( Om_ven_1 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8325: LD_ADDR_VAR 0 2
8329: PUSH
8330: LD_INT 29
8332: PPUSH
8333: LD_INT 22
8335: PUSH
8336: LD_EXP 3
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 2
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: LD_INT 21
8360: PUSH
8361: LD_INT 1
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 70
8381: ST_TO_ADDR
// ComMoveXY ( pom , 79 , 16 ) ;
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_INT 79
8389: PPUSH
8390: LD_INT 16
8392: PPUSH
8393: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_2 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8397: LD_ADDR_VAR 0 2
8401: PUSH
8402: LD_INT 30
8404: PPUSH
8405: LD_INT 22
8407: PUSH
8408: LD_EXP 3
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: LD_INT 21
8422: PUSH
8423: LD_INT 2
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 21
8432: PUSH
8433: LD_INT 1
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PPUSH
8449: CALL_OW 70
8453: ST_TO_ADDR
// ComMoveXY ( pom , 67 , 40 ) ;
8454: LD_VAR 0 2
8458: PPUSH
8459: LD_INT 67
8461: PPUSH
8462: LD_INT 40
8464: PPUSH
8465: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_3 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8469: LD_ADDR_VAR 0 2
8473: PUSH
8474: LD_INT 31
8476: PPUSH
8477: LD_INT 22
8479: PUSH
8480: LD_EXP 3
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 2
8491: PUSH
8492: LD_INT 21
8494: PUSH
8495: LD_INT 2
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 21
8504: PUSH
8505: LD_INT 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 70
8525: ST_TO_ADDR
// ComMoveXY ( pom , 58 , 52 ) ;
8526: LD_VAR 0 2
8530: PPUSH
8531: LD_INT 58
8533: PPUSH
8534: LD_INT 52
8536: PPUSH
8537: CALL_OW 111
// end ;
8541: LD_VAR 0 1
8545: RET
// export function get_lidi_popov_area ; var pom , i ; var drv ; var a ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
// a = [ ] ;
8553: LD_ADDR_VAR 0 5
8557: PUSH
8558: EMPTY
8559: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
8560: LD_ADDR_VAR 0 2
8564: PUSH
8565: LD_INT 15
8567: PPUSH
8568: LD_INT 22
8570: PUSH
8571: LD_EXP 1
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 21
8582: PUSH
8583: LD_INT 1
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PPUSH
8594: CALL_OW 70
8598: ST_TO_ADDR
// a = pom ;
8599: LD_ADDR_VAR 0 5
8603: PUSH
8604: LD_VAR 0 2
8608: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
8609: LD_ADDR_VAR 0 2
8613: PUSH
8614: LD_INT 15
8616: PPUSH
8617: LD_INT 22
8619: PUSH
8620: LD_EXP 1
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 2
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PPUSH
8643: CALL_OW 70
8647: ST_TO_ADDR
// for i in pom do
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 2
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8717
// begin drv = IsDrivenBy ( i ) ;
8661: LD_ADDR_VAR 0 4
8665: PUSH
8666: LD_VAR 0 3
8670: PPUSH
8671: CALL_OW 311
8675: ST_TO_ADDR
// if ( not ( drv in a ) ) and ( drv <> 0 ) then
8676: LD_VAR 0 4
8680: PUSH
8681: LD_VAR 0 5
8685: IN
8686: NOT
8687: PUSH
8688: LD_VAR 0 4
8692: PUSH
8693: LD_INT 0
8695: NONEQUAL
8696: AND
8697: IFFALSE 8715
// a = a ^ drv ;
8699: LD_ADDR_VAR 0 5
8703: PUSH
8704: LD_VAR 0 5
8708: PUSH
8709: LD_VAR 0 4
8713: ADD
8714: ST_TO_ADDR
// end ;
8715: GO 8658
8717: POP
8718: POP
// result := a ;
8719: LD_ADDR_VAR 0 1
8723: PUSH
8724: LD_VAR 0 5
8728: ST_TO_ADDR
// end ;
8729: LD_VAR 0 1
8733: RET
// export function totalni_ukonceni_mise_v_ingame_videu ; var pom ; begin
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
// InGameOn ;
8738: CALL_OW 8
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8742: LD_ADDR_VAR 0 2
8746: PUSH
8747: LD_INT 22
8749: PUSH
8750: LD_EXP 1
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 2
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 21
8774: PUSH
8775: LD_INT 1
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PPUSH
8791: CALL_OW 69
8795: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8796: LD_INT 10
8798: PPUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: LD_INT 108
8806: PUSH
8807: LD_INT 70
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 77
8816: PUSH
8817: LD_INT 65
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 53
8826: PUSH
8827: LD_INT 63
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 40
8836: PUSH
8837: LD_INT 64
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 51
8846: PUSH
8847: LD_INT 97
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PPUSH
8861: LD_INT 10
8863: PUSH
8864: LD_INT 5
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PPUSH
8871: CALL_OW 398
// pom = FilterAllUnits ( [ [ f_side , You2 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8875: LD_ADDR_VAR 0 2
8879: PUSH
8880: LD_INT 22
8882: PUSH
8883: LD_EXP 2
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 2
8894: PUSH
8895: LD_INT 21
8897: PUSH
8898: LD_INT 2
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 21
8907: PUSH
8908: LD_INT 1
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8929: LD_INT 10
8931: PPUSH
8932: LD_VAR 0 2
8936: PPUSH
8937: LD_INT 108
8939: PUSH
8940: LD_INT 70
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 77
8949: PUSH
8950: LD_INT 65
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 53
8959: PUSH
8960: LD_INT 63
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 40
8969: PUSH
8970: LD_INT 64
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 51
8979: PUSH
8980: LD_INT 97
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PPUSH
8994: LD_INT 10
8996: PUSH
8997: LD_INT 5
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PPUSH
9004: CALL_OW 398
// enable ( 7 ) ;
9008: LD_INT 7
9010: ENABLE_MARKED
// wait ( 0 0$10 ) ;
9011: LD_INT 350
9013: PPUSH
9014: CALL_OW 67
// InGameOff ;
9018: CALL_OW 9
// konec_mise ;
9022: CALL 1450 0 0
// end ;
9026: LD_VAR 0 1
9030: RET
// export function schovej_kurina ; begin
9031: LD_INT 0
9033: PPUSH
// ComEnterUnit ( kur , RU1_dep ) ;
9034: LD_EXP 27
9038: PPUSH
9039: LD_INT 1
9041: PPUSH
9042: CALL_OW 120
// end ;
9046: LD_VAR 0 1
9050: RET
// export function posli_kurina_na_smrt ; begin
9051: LD_INT 0
9053: PPUSH
// ComExitBuilding ( kur ) ;
9054: LD_EXP 27
9058: PPUSH
9059: CALL_OW 122
// end ;
9063: LD_VAR 0 1
9067: RET
// every 0 0$2 do var pom ; var i ;
9068: GO 9070
9070: DISABLE
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
// begin pom = FilterUnitsExceptArea ( Om_ven , [ [ f_side , You3 ] ] ) ;
9075: LD_ADDR_VAR 0 1
9079: PUSH
9080: LD_INT 20
9082: PPUSH
9083: LD_INT 22
9085: PUSH
9086: LD_EXP 3
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: EMPTY
9096: LIST
9097: PPUSH
9098: CALL_OW 71
9102: ST_TO_ADDR
// for i in pom do
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: LD_VAR 0 1
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9177
// begin if GetType ( i ) = unit_vehicle then
9116: LD_VAR 0 2
9120: PPUSH
9121: CALL_OW 247
9125: PUSH
9126: LD_INT 2
9128: EQUAL
9129: IFFALSE 9161
// if IsDrivenBy ( i ) then
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 311
9140: IFFALSE 9161
// SetSide ( IsDrivenBy ( i ) , You ) ;
9142: LD_VAR 0 2
9146: PPUSH
9147: CALL_OW 311
9151: PPUSH
9152: LD_EXP 1
9156: PPUSH
9157: CALL_OW 235
// SetSide ( i , You ) ;
9161: LD_VAR 0 2
9165: PPUSH
9166: LD_EXP 1
9170: PPUSH
9171: CALL_OW 235
// end ;
9175: GO 9113
9177: POP
9178: POP
// enable ;
9179: ENABLE
// end ;
9180: PPOPN 2
9182: END
// every 0 0$1 marked 9 do var i ; var ridici ; var mcm ;
9183: GO 9185
9185: DISABLE
9186: LD_INT 0
9188: PPUSH
9189: PPUSH
9190: PPUSH
// begin if FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) then
9191: LD_INT 56
9193: PPUSH
9194: LD_INT 22
9196: PUSH
9197: LD_INT 1
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PPUSH
9204: CALL_OW 70
9208: IFFALSE 9249
// for i in FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) do
9210: LD_ADDR_VAR 0 1
9214: PUSH
9215: LD_INT 56
9217: PPUSH
9218: LD_INT 22
9220: PUSH
9221: LD_INT 1
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PPUSH
9228: CALL_OW 70
9232: PUSH
9233: FOR_IN
9234: IFFALSE 9247
// RemoveUnit ( i ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: CALL_OW 64
9245: GO 9233
9247: POP
9248: POP
// ridici = [ ] ;
9249: LD_ADDR_VAR 0 2
9253: PUSH
9254: EMPTY
9255: ST_TO_ADDR
// for i in RUSI_CERPACI_AUTA_LIST do
9256: LD_ADDR_VAR 0 1
9260: PUSH
9261: LD_EXP 59
9265: PUSH
9266: FOR_IN
9267: IFFALSE 9307
// begin PlaceUnitArea ( i , cargoSpawn , false ) ;
9269: LD_VAR 0 1
9273: PPUSH
9274: LD_INT 55
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 49
// ridici = ridici ^ IsDrivenBy ( i ) ;
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: LD_VAR 0 2
9293: PUSH
9294: LD_VAR 0 1
9298: PPUSH
9299: CALL_OW 311
9303: ADD
9304: ST_TO_ADDR
// end ;
9305: GO 9266
9307: POP
9308: POP
// mcm = McMove ( 10 , RUSI_CERPACI_AUTA_LIST , [ [ 130 , 75 ] , [ 112 , 59 ] , [ 106 , 32 ] , [ 91 , 21 ] , [ 62 , 9 ] ] , [ mc_move_waitwp ] ) ;
9309: LD_ADDR_VAR 0 3
9313: PUSH
9314: LD_INT 10
9316: PPUSH
9317: LD_EXP 59
9321: PPUSH
9322: LD_INT 130
9324: PUSH
9325: LD_INT 75
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 112
9334: PUSH
9335: LD_INT 59
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 106
9344: PUSH
9345: LD_INT 32
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 91
9354: PUSH
9355: LD_INT 21
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 62
9364: PUSH
9365: LD_INT 9
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PPUSH
9379: LD_INT 3
9381: PUSH
9382: EMPTY
9383: LIST
9384: PPUSH
9385: CALL_OW 398
9389: ST_TO_ADDR
// while UnitFilter ( RUSI_CERPACI_AUTA_LIST , [ [ f_inarea , benzina ] ] ) <> RUSI_CERPACI_AUTA_LIST do
9390: LD_EXP 59
9394: PPUSH
9395: LD_INT 95
9397: PUSH
9398: LD_INT 48
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: EMPTY
9406: LIST
9407: PPUSH
9408: CALL_OW 72
9412: PUSH
9413: LD_EXP 59
9417: NONEQUAL
9418: IFFALSE 9453
// begin KillMc ( mcm ) ;
9420: LD_VAR 0 3
9424: PPUSH
9425: CALL_OW 387
// wait ( 0 0$2 ) ;
9429: LD_INT 70
9431: PPUSH
9432: CALL_OW 67
// ComMoveXY ( RUSI_CERPACI_AUTA_LIST , 62 , 9 ) ;
9436: LD_EXP 59
9440: PPUSH
9441: LD_INT 62
9443: PPUSH
9444: LD_INT 9
9446: PPUSH
9447: CALL_OW 111
// end ;
9451: GO 9390
// hint_cerpaci_auta ;
9453: CALL 16369 0 0
// ComExitVehicle ( ridici ) ;
9457: LD_VAR 0 2
9461: PPUSH
9462: CALL_OW 121
// AddComAgressiveMove ( ridici , 45 , 6 ) ;
9466: LD_VAR 0 2
9470: PPUSH
9471: LD_INT 45
9473: PPUSH
9474: LD_INT 6
9476: PPUSH
9477: CALL_OW 174
// AddComAgressiveMove ( ridici , 15 , 10 ) ;
9481: LD_VAR 0 2
9485: PPUSH
9486: LD_INT 15
9488: PPUSH
9489: LD_INT 10
9491: PPUSH
9492: CALL_OW 174
// AddComAttackUnit ( ridici , Am_dep ) ;
9496: LD_VAR 0 2
9500: PPUSH
9501: LD_INT 12
9503: PPUSH
9504: CALL_OW 175
// end ;
9508: PPOPN 3
9510: END
// every 0 0$2 do var pom , i ; var ridic ;
9511: GO 9513
9513: DISABLE
9514: LD_INT 0
9516: PPUSH
9517: PPUSH
9518: PPUSH
// begin pom = FilterUnitsInArea ( Cauta , [ [ f_side , You2 ] , [ f_weapon , ru_cargo_bay ] ] ) ;
9519: LD_ADDR_VAR 0 1
9523: PUSH
9524: LD_INT 39
9526: PPUSH
9527: LD_INT 22
9529: PUSH
9530: LD_EXP 2
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 34
9541: PUSH
9542: LD_INT 51
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 70
9557: ST_TO_ADDR
// if pom > 0 then
9558: LD_VAR 0 1
9562: PUSH
9563: LD_INT 0
9565: GREATER
9566: IFFALSE 9587
// begin if not qrefuel_over then
9568: LD_LOC 20
9572: NOT
9573: IFFALSE 9587
// begin qrefuel_over = true ;
9575: LD_ADDR_LOC 20
9579: PUSH
9580: LD_INT 1
9582: ST_TO_ADDR
// query_refuel ;
9583: CALL 16287 0 0
// end ; end ; for i in pom do
9587: LD_ADDR_VAR 0 2
9591: PUSH
9592: LD_VAR 0 1
9596: PUSH
9597: FOR_IN
9598: IFFALSE 9652
// if IsDrivenBy ( i ) then
9600: LD_VAR 0 2
9604: PPUSH
9605: CALL_OW 311
9609: IFFALSE 9650
// begin ridic = IsDrivenBy ( i ) ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_VAR 0 2
9620: PPUSH
9621: CALL_OW 311
9625: ST_TO_ADDR
// ComExitVehicle ( ridic ) ;
9626: LD_VAR 0 3
9630: PPUSH
9631: CALL_OW 121
// AddComAgressiveMove ( ridic , 21 , 14 ) ;
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_INT 21
9642: PPUSH
9643: LD_INT 14
9645: PPUSH
9646: CALL_OW 174
// end ;
9650: GO 9597
9652: POP
9653: POP
// enable ;
9654: ENABLE
// end ;
9655: PPOPN 3
9657: END
// on VehicleConstructed ( v , fact ) do begin postavenych_aut = postavenych_aut + 1 ;
9658: LD_ADDR_EXP 47
9662: PUSH
9663: LD_EXP 47
9667: PUSH
9668: LD_INT 1
9670: PLUS
9671: ST_TO_ADDR
// enable ;
9672: ENABLE
// end ;
9673: PPOPN 2
9675: END
// every 0 0$1 marked 51 do
9676: GO 9678
9678: DISABLE
// begin if konec_counteru then
9679: LD_EXP 45
9683: IFFALSE 9694
// begin display_strings = [ ] ;
9685: LD_ADDR_OWVAR 47
9689: PUSH
9690: EMPTY
9691: ST_TO_ADDR
// exit ;
9692: GO 9745
// end ; display_strings = [ #Ru03-1 , TTime ] ;
9694: LD_ADDR_OWVAR 47
9698: PUSH
9699: LD_STRING #Ru03-1
9701: PUSH
9702: LD_LOC 21
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9711: LD_ADDR_LOC 21
9715: PUSH
9716: LD_LOC 21
9720: PUSH
9721: LD_INT 35
9723: MINUS
9724: ST_TO_ADDR
// if TTime > 0 then
9725: LD_LOC 21
9729: PUSH
9730: LD_INT 0
9732: GREATER
9733: IFFALSE 9738
// enable else
9735: ENABLE
9736: GO 9745
// display_strings = [ ] ;
9738: LD_ADDR_OWVAR 47
9742: PUSH
9743: EMPTY
9744: ST_TO_ADDR
// end ;
9745: END
// every 0 0$1 marked 52 do
9746: GO 9748
9748: DISABLE
// begin if konec_counteru then
9749: LD_EXP 45
9753: IFFALSE 9764
// begin display_strings = [ ] ;
9755: LD_ADDR_OWVAR 47
9759: PUSH
9760: EMPTY
9761: ST_TO_ADDR
// exit ;
9762: GO 9815
// end ; display_strings = [ #Ru03-2 , TTime ] ;
9764: LD_ADDR_OWVAR 47
9768: PUSH
9769: LD_STRING #Ru03-2
9771: PUSH
9772: LD_LOC 21
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9781: LD_ADDR_LOC 21
9785: PUSH
9786: LD_LOC 21
9790: PUSH
9791: LD_INT 35
9793: MINUS
9794: ST_TO_ADDR
// if TTime > 0 then
9795: LD_LOC 21
9799: PUSH
9800: LD_INT 0
9802: GREATER
9803: IFFALSE 9808
// enable else
9805: ENABLE
9806: GO 9815
// display_strings = [ ] ;
9808: LD_ADDR_OWVAR 47
9812: PUSH
9813: EMPTY
9814: ST_TO_ADDR
// end ;
9815: END
// every 0 0$1 marked 53 do
9816: GO 9818
9818: DISABLE
// begin if konec_counteru then
9819: LD_EXP 45
9823: IFFALSE 9834
// begin display_strings = [ ] ;
9825: LD_ADDR_OWVAR 47
9829: PUSH
9830: EMPTY
9831: ST_TO_ADDR
// exit ;
9832: GO 9885
// end ; display_strings = [ #Ru03-3 , TTime ] ;
9834: LD_ADDR_OWVAR 47
9838: PUSH
9839: LD_STRING #Ru03-3
9841: PUSH
9842: LD_LOC 21
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9851: LD_ADDR_LOC 21
9855: PUSH
9856: LD_LOC 21
9860: PUSH
9861: LD_INT 35
9863: MINUS
9864: ST_TO_ADDR
// if TTime > 0 then
9865: LD_LOC 21
9869: PUSH
9870: LD_INT 0
9872: GREATER
9873: IFFALSE 9878
// enable else
9875: ENABLE
9876: GO 9885
// display_strings = [ ] ;
9878: LD_ADDR_OWVAR 47
9882: PUSH
9883: EMPTY
9884: ST_TO_ADDR
// end ;
9885: END
// export function zastaveni_rusaku ; var pom ; begin
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9890: LD_ADDR_VAR 0 2
9894: PUSH
9895: LD_INT 22
9897: PUSH
9898: LD_EXP 1
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 21
9922: PUSH
9923: LD_INT 1
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PPUSH
9939: CALL_OW 69
9943: ST_TO_ADDR
// ComStand ( pom ) ;
9944: LD_VAR 0 2
9948: PPUSH
9949: CALL_OW 165
// end ; end_of_file
9953: LD_VAR 0 1
9957: RET
// export konstanta_utoceni ; var hint_bw ; every 0 0$0.1 do
9958: GO 9960
9960: DISABLE
// begin konstanta_utoceni = 0 ;
9961: LD_ADDR_EXP 49
9965: PUSH
9966: LD_INT 0
9968: ST_TO_ADDR
// hint_bw = false ;
9969: LD_ADDR_LOC 22
9973: PUSH
9974: LD_INT 0
9976: ST_TO_ADDR
// end ;
9977: END
// export function uvodni_pokec ; var vyber ; begin
9978: LD_INT 0
9980: PPUSH
9981: PPUSH
// wait ( 0 0$2 ) ;
9982: LD_INT 70
9984: PPUSH
9985: CALL_OW 67
// ComTurnUnit ( bur , kur ) ;
9989: LD_EXP 29
9993: PPUSH
9994: LD_EXP 27
9998: PPUSH
9999: CALL_OW 119
// ComTurnUnit ( kur , bur ) ;
10003: LD_EXP 27
10007: PPUSH
10008: LD_EXP 29
10012: PPUSH
10013: CALL_OW 119
// if BELKOV_SAVED then
10017: LD_EXP 24
10021: IFFALSE 10061
// begin Say ( kur , D1b-Kur-1 ) ;
10023: LD_EXP 27
10027: PPUSH
10028: LD_STRING D1b-Kur-1
10030: PPUSH
10031: CALL_OW 88
// Say ( bel , D1b-Bel-1 ) ;
10035: LD_EXP 32
10039: PPUSH
10040: LD_STRING D1b-Bel-1
10042: PPUSH
10043: CALL_OW 88
// Say ( kur , D1b-Kur-2 ) ;
10047: LD_EXP 27
10051: PPUSH
10052: LD_STRING D1b-Kur-2
10054: PPUSH
10055: CALL_OW 88
// end else
10059: GO 10145
// begin Say ( kur , D1a-Kur-1 ) ;
10061: LD_EXP 27
10065: PPUSH
10066: LD_STRING D1a-Kur-1
10068: PPUSH
10069: CALL_OW 88
// Say ( bur , D1a-Bur-1 ) ;
10073: LD_EXP 29
10077: PPUSH
10078: LD_STRING D1a-Bur-1
10080: PPUSH
10081: CALL_OW 88
// if STAV_UTOKU = 3 then
10085: LD_EXP 25
10089: PUSH
10090: LD_INT 3
10092: EQUAL
10093: IFFALSE 10109
// Say ( kur , D1a-Kur-2a ) else
10095: LD_EXP 27
10099: PPUSH
10100: LD_STRING D1a-Kur-2a
10102: PPUSH
10103: CALL_OW 88
10107: GO 10121
// Say ( kur , D1a-Kur-2 ) ;
10109: LD_EXP 27
10113: PPUSH
10114: LD_STRING D1a-Kur-2
10116: PPUSH
10117: CALL_OW 88
// Say ( kur , D1a-Kur-2b ) ;
10121: LD_EXP 27
10125: PPUSH
10126: LD_STRING D1a-Kur-2b
10128: PPUSH
10129: CALL_OW 88
// Say ( bur , D1a-Bur-2 ) ;
10133: LD_EXP 29
10137: PPUSH
10138: LD_STRING D1a-Bur-2
10140: PPUSH
10141: CALL_OW 88
// end ; Say ( kur , D2-Kur-1 ) ;
10145: LD_EXP 27
10149: PPUSH
10150: LD_STRING D2-Kur-1
10152: PPUSH
10153: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
10157: LD_EXP 29
10161: PPUSH
10162: LD_STRING D2-Bur-1
10164: PPUSH
10165: CALL_OW 88
// Say ( kur , D2-Kur-2 ) ;
10169: LD_EXP 27
10173: PPUSH
10174: LD_STRING D2-Kur-2
10176: PPUSH
10177: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
10181: LD_EXP 29
10185: PPUSH
10186: LD_STRING D2-Bur-2
10188: PPUSH
10189: CALL_OW 88
// Say ( kur , D2-Kur-3 ) ;
10193: LD_EXP 27
10197: PPUSH
10198: LD_STRING D2-Kur-3
10200: PPUSH
10201: CALL_OW 88
// Say ( pop , D2-Pop-3 ) ;
10205: LD_EXP 28
10209: PPUSH
10210: LD_STRING D2-Pop-3
10212: PPUSH
10213: CALL_OW 88
// Say ( kur , D2-Kur-4 ) ;
10217: LD_EXP 27
10221: PPUSH
10222: LD_STRING D2-Kur-4
10224: PPUSH
10225: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
10229: LD_EXP 29
10233: PPUSH
10234: LD_STRING D2-Bur-4
10236: PPUSH
10237: CALL_OW 88
// Say ( kur , D2-Kur-5 ) ;
10241: LD_EXP 27
10245: PPUSH
10246: LD_STRING D2-Kur-5
10248: PPUSH
10249: CALL_OW 88
// Say ( bur , D2-Bur-5 ) ;
10253: LD_EXP 29
10257: PPUSH
10258: LD_STRING D2-Bur-5
10260: PPUSH
10261: CALL_OW 88
// Say ( kur , D2-Kur-6 ) ;
10265: LD_EXP 27
10269: PPUSH
10270: LD_STRING D2-Kur-6
10272: PPUSH
10273: CALL_OW 88
// vyber = vyber_characteru ;
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: CALL 3101 0 0
10286: ST_TO_ADDR
// if bel in vyber then
10287: LD_EXP 32
10291: PUSH
10292: LD_VAR 0 2
10296: IN
10297: IFFALSE 10310
// RemoveUnit ( bel ) else
10299: LD_EXP 32
10303: PPUSH
10304: CALL_OW 64
10308: GO 10324
// Setside ( bel , You2 ) ;
10310: LD_EXP 32
10314: PPUSH
10315: LD_EXP 2
10319: PPUSH
10320: CALL_OW 235
// if IsOK ( kov ) then
10324: LD_EXP 30
10328: PPUSH
10329: CALL_OW 302
10333: IFFALSE 10344
// RemoveUnit ( kov ) ;
10335: LD_EXP 30
10339: PPUSH
10340: CALL_OW 64
// if IsOK ( gny ) then
10344: LD_EXP 31
10348: PPUSH
10349: CALL_OW 302
10353: IFFALSE 10364
// RemoveUnit ( gny ) ;
10355: LD_EXP 31
10359: PPUSH
10360: CALL_OW 64
// RemoveUnit ( bur ) ;
10364: LD_EXP 29
10368: PPUSH
10369: CALL_OW 64
// prebarveni_druhe_baze ;
10373: CALL 5621 0 0
// ChangeSideFog ( You3 , You ) ;
10377: LD_EXP 3
10381: PPUSH
10382: LD_EXP 1
10386: PPUSH
10387: CALL_OW 343
// placni_unity ( vyber ) ;
10391: LD_VAR 0 2
10395: PPUSH
10396: CALL 3858 0 1
// CenterOnUnits ( vyber ) ;
10400: LD_VAR 0 2
10404: PPUSH
10405: CALL_OW 85
// RevealFogArea ( You , Wth ) ;
10409: LD_EXP 1
10413: PPUSH
10414: LD_INT 24
10416: PPUSH
10417: CALL_OW 332
// wait ( 0 0$2 ) ;
10421: LD_INT 70
10423: PPUSH
10424: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10428: LD_STRING M1
10430: PPUSH
10431: CALL_OW 337
// hint_bw = true ;
10435: LD_ADDR_LOC 22
10439: PUSH
10440: LD_INT 1
10442: ST_TO_ADDR
// Hint ( Oil ) ;
10443: LD_STRING Oil
10445: PPUSH
10446: CALL_OW 339
// Hint ( Upgrading ) ;
10450: LD_STRING Upgrading
10452: PPUSH
10453: CALL_OW 339
// InGameOff ;
10457: CALL_OW 9
// end ;
10461: LD_VAR 0 1
10465: RET
// every 0 0$1 trigger GetResourceVisibility ( 57 , 89 , You ) > 0 do
10466: LD_INT 57
10468: PPUSH
10469: LD_INT 89
10471: PPUSH
10472: LD_EXP 1
10476: PPUSH
10477: CALL_OW 440
10481: PUSH
10482: LD_INT 0
10484: GREATER
10485: IFFALSE 10563
10487: GO 10489
10489: DISABLE
// begin CenterOnXY ( 57 , 89 ) ;
10490: LD_INT 57
10492: PPUSH
10493: LD_INT 89
10495: PPUSH
10496: CALL_OW 84
// DialogueOn ;
10500: CALL_OW 6
// interface_hidden := true ;
10504: LD_ADDR_OWVAR 54
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// Say ( bur , D2a-Bur-1 ) ;
10512: LD_EXP 29
10516: PPUSH
10517: LD_STRING D2a-Bur-1
10519: PPUSH
10520: CALL_OW 88
// SayRadio ( kur , D2a-Kur-1 ) ;
10524: LD_EXP 27
10528: PPUSH
10529: LD_STRING D2a-Kur-1
10531: PPUSH
10532: CALL_OW 94
// RU_videl_oil = true ;
10536: LD_ADDR_EXP 40
10540: PUSH
10541: LD_INT 1
10543: ST_TO_ADDR
// interface_hidden := false ;
10544: LD_ADDR_OWVAR 54
10548: PUSH
10549: LD_INT 0
10551: ST_TO_ADDR
// Hint ( OilSpoted ) ;
10552: LD_STRING OilSpoted
10554: PPUSH
10555: CALL_OW 339
// DialogueOff ;
10559: CALL_OW 7
// end ;
10563: END
// every 0 0$3 trigger RU_videl_oil and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ;
10564: LD_EXP 40
10568: PUSH
10569: LD_INT 22
10571: PUSH
10572: LD_EXP 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 30
10583: PUSH
10584: LD_INT 0
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: PUSH
10600: LD_INT 1
10602: GREATER
10603: AND
10604: IFFALSE 10768
10606: GO 10608
10608: DISABLE
10609: LD_INT 0
10611: PPUSH
10612: PPUSH
10613: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
10614: LD_ADDR_VAR 0 1
10618: PUSH
10619: LD_INT 22
10621: PUSH
10622: LD_EXP 1
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 30
10633: PUSH
10634: LD_INT 0
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PPUSH
10645: CALL_OW 69
10649: ST_TO_ADDR
// pom1 = [ ] ;
10650: LD_ADDR_VAR 0 2
10654: PUSH
10655: EMPTY
10656: ST_TO_ADDR
// for i in pom do
10657: LD_ADDR_VAR 0 3
10661: PUSH
10662: LD_VAR 0 1
10666: PUSH
10667: FOR_IN
10668: IFFALSE 10709
// if GetDistUnitXY ( i , 56 , 88 ) < 30 then
10670: LD_VAR 0 3
10674: PPUSH
10675: LD_INT 56
10677: PPUSH
10678: LD_INT 88
10680: PPUSH
10681: CALL_OW 297
10685: PUSH
10686: LD_INT 30
10688: LESS
10689: IFFALSE 10707
// pom1 = pom1 ^ i ;
10691: LD_ADDR_VAR 0 2
10695: PUSH
10696: LD_VAR 0 2
10700: PUSH
10701: LD_VAR 0 3
10705: ADD
10706: ST_TO_ADDR
10707: GO 10667
10709: POP
10710: POP
// if pom1 > 0 then
10711: LD_VAR 0 2
10715: PUSH
10716: LD_INT 0
10718: GREATER
10719: IFFALSE 10767
// begin while IsConstructed ( pom1 [ 1 ] ) do
10721: LD_VAR 0 2
10725: PUSH
10726: LD_INT 1
10728: ARRAY
10729: PPUSH
10730: CALL_OW 304
10734: IFFALSE 10745
// wait ( 0 0$5 ) ;
10736: LD_INT 175
10738: PPUSH
10739: CALL_OW 67
10743: GO 10721
// ChangeMissionObjectives ( M2 ) ;
10745: LD_STRING M2
10747: PPUSH
10748: CALL_OW 337
// pojmenovani_kaganoviche ( pom1 [ 1 ] ) ;
10752: LD_VAR 0 2
10756: PUSH
10757: LD_INT 1
10759: ARRAY
10760: PPUSH
10761: CALL 4665 0 1
// end else
10765: GO 10768
// enable ;
10767: ENABLE
// end ;
10768: PPOPN 3
10770: END
// every 0 0$2 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) > 0 do var pom ;
10771: LD_INT 2
10773: PPUSH
10774: LD_INT 22
10776: PUSH
10777: LD_EXP 1
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 30
10788: PUSH
10789: LD_INT 3
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 70
10804: PUSH
10805: LD_INT 0
10807: GREATER
10808: IFFALSE 11100
10810: GO 10812
10812: DISABLE
10813: LD_INT 0
10815: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) ;
10816: LD_ADDR_VAR 0 1
10820: PUSH
10821: LD_INT 2
10823: PPUSH
10824: LD_INT 22
10826: PUSH
10827: LD_EXP 1
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 30
10838: PUSH
10839: LD_INT 3
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 70
10854: ST_TO_ADDR
// pom = pom [ 1 ] ;
10855: LD_ADDR_VAR 0 1
10859: PUSH
10860: LD_VAR 0 1
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: ST_TO_ADDR
// while IsConstructed ( pom ) <> 0 do
10869: LD_VAR 0 1
10873: PPUSH
10874: CALL_OW 304
10878: PUSH
10879: LD_INT 0
10881: NONEQUAL
10882: IFFALSE 10893
// wait ( 0 0$2 ) ;
10884: LD_INT 70
10886: PPUSH
10887: CALL_OW 67
10891: GO 10869
// CenterNowOnUnits ( pom ) ;
10893: LD_VAR 0 1
10897: PPUSH
10898: CALL_OW 87
// interface_hidden := true ;
10902: LD_ADDR_OWVAR 54
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) ;
10910: LD_ADDR_VAR 0 1
10914: PUSH
10915: LD_INT 2
10917: PPUSH
10918: LD_INT 22
10920: PUSH
10921: LD_EXP 1
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 30
10932: PUSH
10933: LD_INT 26
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 70
10948: ST_TO_ADDR
// if pom = 0 then
10949: LD_VAR 0 1
10953: PUSH
10954: LD_INT 0
10956: EQUAL
10957: IFFALSE 11074
// begin DialogueOn ;
10959: CALL_OW 6
// Say ( bur , D3aa-Bur-1 ) ;
10963: LD_EXP 29
10967: PPUSH
10968: LD_STRING D3aa-Bur-1
10970: PPUSH
10971: CALL_OW 88
// if IsOK ( schol ) then
10975: LD_EXP 33
10979: PPUSH
10980: CALL_OW 302
10984: IFFALSE 11012
// begin Say ( schol , D3aa-Sch-1 ) ;
10986: LD_EXP 33
10990: PPUSH
10991: LD_STRING D3aa-Sch-1
10993: PPUSH
10994: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
10998: LD_EXP 29
11002: PPUSH
11003: LD_STRING D3aa-Bur-2
11005: PPUSH
11006: CALL_OW 88
// end else
11010: GO 11074
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
11012: LD_ADDR_VAR 0 1
11016: PUSH
11017: LD_INT 1
11019: PPUSH
11020: LD_INT 4
11022: PPUSH
11023: LD_EXP 29
11027: PUSH
11028: EMPTY
11029: LIST
11030: PPUSH
11031: CALL 11645 0 3
11035: ST_TO_ADDR
// if pom > 0 then
11036: LD_VAR 0 1
11040: PUSH
11041: LD_INT 0
11043: GREATER
11044: IFFALSE 11074
// begin Say ( pom [ 1 ] , D3aa-Sci1-1 ) ;
11046: LD_VAR 0 1
11050: PUSH
11051: LD_INT 1
11053: ARRAY
11054: PPUSH
11055: LD_STRING D3aa-Sci1-1
11057: PPUSH
11058: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11062: LD_EXP 29
11066: PPUSH
11067: LD_STRING D3aa-Bur-2
11069: PPUSH
11070: CALL_OW 88
// end ; end ; end ; ChangeMissionObjectives ( M3 ) ;
11074: LD_STRING M3
11076: PPUSH
11077: CALL_OW 337
// Hint ( Factory ) ;
11081: LD_STRING Factory
11083: PPUSH
11084: CALL_OW 339
// interface_hidden := false ;
11088: LD_ADDR_OWVAR 54
11092: PUSH
11093: LD_INT 0
11095: ST_TO_ADDR
// DialogueOff ;
11096: CALL_OW 7
// end ;
11100: PPOPN 1
11102: END
// every 0 0$5 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) > 0 do var pom ;
11103: LD_INT 2
11105: PPUSH
11106: LD_INT 22
11108: PUSH
11109: LD_EXP 1
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 30
11120: PUSH
11121: LD_INT 4
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PPUSH
11132: CALL_OW 70
11136: PUSH
11137: LD_INT 0
11139: GREATER
11140: IFFALSE 11222
11142: GO 11144
11144: DISABLE
11145: LD_INT 0
11147: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) ;
11148: LD_ADDR_VAR 0 1
11152: PUSH
11153: LD_INT 2
11155: PPUSH
11156: LD_INT 22
11158: PUSH
11159: LD_EXP 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 30
11170: PUSH
11171: LD_INT 4
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 70
11186: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: PPUSH
11196: CALL_OW 304
11200: PUSH
11201: LD_INT 0
11203: NONEQUAL
11204: IFFALSE 11215
// wait ( 0 0$5 ) ;
11206: LD_INT 175
11208: PPUSH
11209: CALL_OW 67
11213: GO 11187
// Hint ( Armoury ) ;
11215: LD_STRING Armoury
11217: PPUSH
11218: CALL_OW 339
// end ;
11222: PPOPN 1
11224: END
// every 0 0$3 trigger hint_bw do var pom ;
11225: LD_LOC 22
11229: IFFALSE 11283
11231: GO 11233
11233: DISABLE
11234: LD_INT 0
11236: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_breastwork ] ] ) ;
11237: LD_ADDR_VAR 0 1
11241: PUSH
11242: LD_INT 2
11244: PPUSH
11245: LD_INT 22
11247: PUSH
11248: LD_EXP 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 30
11259: PUSH
11260: LD_INT 31
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 70
11275: ST_TO_ADDR
// Hint ( bunkers ) ;
11276: LD_STRING bunkers
11278: PPUSH
11279: CALL_OW 339
// end ;
11283: PPOPN 1
11285: END
// export function dialog_scholtze_enter ; begin
11286: LD_INT 0
11288: PPUSH
// CenterOnUnits ( schol2 ) ;
11289: LD_EXP 34
11293: PPUSH
11294: CALL_OW 85
// DialogueOn ;
11298: CALL_OW 6
// interface_hidden := true ;
11302: LD_ADDR_OWVAR 54
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// SayRadio ( schol2 , D4-Sch-1 ) ;
11310: LD_EXP 34
11314: PPUSH
11315: LD_STRING D4-Sch-1
11317: PPUSH
11318: CALL_OW 94
// Say ( bur , D4-Bur-1 ) ;
11322: LD_EXP 29
11326: PPUSH
11327: LD_STRING D4-Bur-1
11329: PPUSH
11330: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
11334: LD_STRING M4
11336: PPUSH
11337: CALL_OW 337
// interface_hidden := false ;
11341: LD_ADDR_OWVAR 54
11345: PUSH
11346: LD_INT 0
11348: ST_TO_ADDR
// DialogueOff ;
11349: CALL_OW 7
// end ;
11353: LD_VAR 0 1
11357: RET
// export function dialog_scholtze_nalezen ; begin
11358: LD_INT 0
11360: PPUSH
// CenterOnUnits ( schol2 ) ;
11361: LD_EXP 34
11365: PPUSH
11366: CALL_OW 85
// DialogueOn ;
11370: CALL_OW 6
// interface_hidden := true ;
11374: LD_ADDR_OWVAR 54
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// if IsOK ( schol2 ) then
11382: LD_EXP 34
11386: PPUSH
11387: CALL_OW 302
11391: IFFALSE 11436
// begin Say ( schol2 , D4a-Sch-1 ) ;
11393: LD_EXP 34
11397: PPUSH
11398: LD_STRING D4a-Sch-1
11400: PPUSH
11401: CALL_OW 88
// Say ( bur , D4a-Bur-1 ) ;
11405: LD_EXP 29
11409: PPUSH
11410: LD_STRING D4a-Bur-1
11412: PPUSH
11413: CALL_OW 88
// Say ( schol2 , D4a-Sch-2 ) ;
11417: LD_EXP 34
11421: PPUSH
11422: LD_STRING D4a-Sch-2
11424: PPUSH
11425: CALL_OW 88
// ChangeMissionObjectives ( MScholtzeOut ) ;
11429: LD_STRING MScholtzeOut
11431: PPUSH
11432: CALL_OW 337
// end ; interface_hidden := false ;
11436: LD_ADDR_OWVAR 54
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// DialogueOff ;
11444: CALL_OW 7
// end ;
11448: LD_VAR 0 1
11452: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) = 1 marked 201 do var pom ;
11453: CALL 27050 0 0
11457: PUSH
11458: LD_INT 22
11460: PUSH
11461: LD_EXP 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 30
11472: PUSH
11473: LD_INT 0
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PPUSH
11484: CALL_OW 69
11488: PUSH
11489: LD_INT 1
11491: EQUAL
11492: AND
11493: IFFALSE 11642
11495: GO 11497
11497: DISABLE
11498: LD_INT 0
11500: PPUSH
// begin DialogueOn ;
11501: CALL_OW 6
// interface_hidden := true ;
11505: LD_ADDR_OWVAR 54
11509: PUSH
11510: LD_INT 1
11512: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
11513: LD_EXP 72
11517: PPUSH
11518: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
11522: LD_ADDR_VAR 0 1
11526: PUSH
11527: LD_INT 1
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: LD_EXP 29
11537: PUSH
11538: LD_EXP 31
11542: PUSH
11543: LD_EXP 30
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: PPUSH
11553: CALL 11645 0 3
11557: ST_TO_ADDR
// if pom = 0 then
11558: LD_VAR 0 1
11562: PUSH
11563: LD_INT 0
11565: EQUAL
11566: IFFALSE 11592
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
11568: LD_ADDR_VAR 0 1
11572: PUSH
11573: LD_INT 1
11575: PPUSH
11576: LD_INT 1
11578: PPUSH
11579: LD_EXP 29
11583: PUSH
11584: EMPTY
11585: LIST
11586: PPUSH
11587: CALL 11645 0 3
11591: ST_TO_ADDR
// if pom > 0 then
11592: LD_VAR 0 1
11596: PUSH
11597: LD_INT 0
11599: GREATER
11600: IFFALSE 11630
// begin Say ( pom [ 1 ] , D3a-RSol1-1 ) ;
11602: LD_VAR 0 1
11606: PUSH
11607: LD_INT 1
11609: ARRAY
11610: PPUSH
11611: LD_STRING D3a-RSol1-1
11613: PPUSH
11614: CALL_OW 88
// Say ( bur , D3a-Bur-1 ) ;
11618: LD_EXP 29
11622: PPUSH
11623: LD_STRING D3a-Bur-1
11625: PPUSH
11626: CALL_OW 88
// end ; interface_hidden := false ;
11630: LD_ADDR_OWVAR 54
11634: PUSH
11635: LD_INT 0
11637: ST_TO_ADDR
// DialogueOff ;
11638: CALL_OW 7
// end ;
11642: PPOPN 1
11644: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11645: LD_INT 0
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
11652: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
11653: LD_ADDR_VAR 0 6
11657: PUSH
11658: LD_INT 22
11660: PUSH
11661: LD_EXP 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 25
11672: PUSH
11673: LD_INT 4
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_VAR 0 1
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: LIST
11696: PPUSH
11697: CALL_OW 69
11701: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
11702: LD_ADDR_VAR 0 7
11706: PUSH
11707: LD_INT 22
11709: PUSH
11710: LD_EXP 1
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 25
11721: PUSH
11722: LD_INT 3
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 26
11731: PUSH
11732: LD_VAR 0 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 69
11750: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
11751: LD_ADDR_VAR 0 8
11755: PUSH
11756: LD_INT 22
11758: PUSH
11759: LD_EXP 1
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 25
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 26
11780: PUSH
11781: LD_VAR 0 1
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 69
11799: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
11800: LD_ADDR_VAR 0 9
11804: PUSH
11805: LD_INT 22
11807: PUSH
11808: LD_EXP 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 26
11829: PUSH
11830: LD_VAR 0 1
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PPUSH
11844: CALL_OW 69
11848: ST_TO_ADDR
// case povolani of class_scientistic :
11849: LD_VAR 0 2
11853: PUSH
11854: LD_INT 4
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11875
11862: POP
// pom = pom1 ; class_mechanic :
11863: LD_ADDR_VAR 0 5
11867: PUSH
11868: LD_VAR 0 6
11872: ST_TO_ADDR
11873: GO 11939
11875: LD_INT 3
11877: DOUBLE
11878: EQUAL
11879: IFTRUE 11883
11881: GO 11896
11883: POP
// pom = pom2 ; class_engineer :
11884: LD_ADDR_VAR 0 5
11888: PUSH
11889: LD_VAR 0 7
11893: ST_TO_ADDR
11894: GO 11939
11896: LD_INT 2
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 11917
11904: POP
// pom = pom3 ; class_soldier :
11905: LD_ADDR_VAR 0 5
11909: PUSH
11910: LD_VAR 0 8
11914: ST_TO_ADDR
11915: GO 11939
11917: LD_INT 1
11919: DOUBLE
11920: EQUAL
11921: IFTRUE 11925
11923: GO 11938
11925: POP
// pom = pom4 ; end ;
11926: LD_ADDR_VAR 0 5
11930: PUSH
11931: LD_VAR 0 9
11935: ST_TO_ADDR
11936: GO 11939
11938: POP
// if povolani <> class_scientistic then
11939: LD_VAR 0 2
11943: PUSH
11944: LD_INT 4
11946: NONEQUAL
11947: IFFALSE 11965
// pom = pom ^ pom1 ;
11949: LD_ADDR_VAR 0 5
11953: PUSH
11954: LD_VAR 0 5
11958: PUSH
11959: LD_VAR 0 6
11963: ADD
11964: ST_TO_ADDR
// if povolani <> class_mechanic then
11965: LD_VAR 0 2
11969: PUSH
11970: LD_INT 3
11972: NONEQUAL
11973: IFFALSE 11991
// pom = pom ^ pom2 ;
11975: LD_ADDR_VAR 0 5
11979: PUSH
11980: LD_VAR 0 5
11984: PUSH
11985: LD_VAR 0 7
11989: ADD
11990: ST_TO_ADDR
// if povolani <> class_engineer then
11991: LD_VAR 0 2
11995: PUSH
11996: LD_INT 2
11998: NONEQUAL
11999: IFFALSE 12017
// pom = pom ^ pom3 ;
12001: LD_ADDR_VAR 0 5
12005: PUSH
12006: LD_VAR 0 5
12010: PUSH
12011: LD_VAR 0 8
12015: ADD
12016: ST_TO_ADDR
// if povolani <> class_soldier then
12017: LD_VAR 0 2
12021: PUSH
12022: LD_INT 1
12024: NONEQUAL
12025: IFFALSE 12043
// pom = pom ^ pom4 ;
12027: LD_ADDR_VAR 0 5
12031: PUSH
12032: LD_VAR 0 5
12036: PUSH
12037: LD_VAR 0 9
12041: ADD
12042: ST_TO_ADDR
// result := pom diff diffseznam ;
12043: LD_ADDR_VAR 0 4
12047: PUSH
12048: LD_VAR 0 5
12052: PUSH
12053: LD_VAR 0 3
12057: DIFF
12058: ST_TO_ADDR
// end ;
12059: LD_VAR 0 4
12063: RET
// function GetPeopleSide ( side , sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
12064: LD_INT 0
12066: PPUSH
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
12071: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12072: LD_ADDR_VAR 0 7
12076: PUSH
12077: LD_INT 22
12079: PUSH
12080: LD_VAR 0 1
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 25
12091: PUSH
12092: LD_INT 4
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_VAR 0 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 69
12120: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12121: LD_ADDR_VAR 0 8
12125: PUSH
12126: LD_INT 22
12128: PUSH
12129: LD_VAR 0 1
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 25
12140: PUSH
12141: LD_INT 3
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 26
12150: PUSH
12151: LD_VAR 0 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12170: LD_ADDR_VAR 0 9
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_VAR 0 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 25
12189: PUSH
12190: LD_INT 2
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 26
12199: PUSH
12200: LD_VAR 0 2
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 69
12218: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12219: LD_ADDR_VAR 0 10
12223: PUSH
12224: LD_INT 22
12226: PUSH
12227: LD_VAR 0 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 25
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 26
12248: PUSH
12249: LD_VAR 0 2
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: PPUSH
12263: CALL_OW 69
12267: ST_TO_ADDR
// case povolani of class_scientistic :
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 4
12275: DOUBLE
12276: EQUAL
12277: IFTRUE 12281
12279: GO 12294
12281: POP
// pom = pom1 ; class_mechanic :
12282: LD_ADDR_VAR 0 6
12286: PUSH
12287: LD_VAR 0 7
12291: ST_TO_ADDR
12292: GO 12358
12294: LD_INT 3
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12315
12302: POP
// pom = pom2 ; class_engineer :
12303: LD_ADDR_VAR 0 6
12307: PUSH
12308: LD_VAR 0 8
12312: ST_TO_ADDR
12313: GO 12358
12315: LD_INT 2
12317: DOUBLE
12318: EQUAL
12319: IFTRUE 12323
12321: GO 12336
12323: POP
// pom = pom3 ; class_soldier :
12324: LD_ADDR_VAR 0 6
12328: PUSH
12329: LD_VAR 0 9
12333: ST_TO_ADDR
12334: GO 12358
12336: LD_INT 1
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12357
12344: POP
// pom = pom4 ; end ;
12345: LD_ADDR_VAR 0 6
12349: PUSH
12350: LD_VAR 0 10
12354: ST_TO_ADDR
12355: GO 12358
12357: POP
// if povolani <> class_scientistic then
12358: LD_VAR 0 3
12362: PUSH
12363: LD_INT 4
12365: NONEQUAL
12366: IFFALSE 12384
// pom = pom ^ pom1 ;
12368: LD_ADDR_VAR 0 6
12372: PUSH
12373: LD_VAR 0 6
12377: PUSH
12378: LD_VAR 0 7
12382: ADD
12383: ST_TO_ADDR
// if povolani <> class_mechanic then
12384: LD_VAR 0 3
12388: PUSH
12389: LD_INT 3
12391: NONEQUAL
12392: IFFALSE 12410
// pom = pom ^ pom2 ;
12394: LD_ADDR_VAR 0 6
12398: PUSH
12399: LD_VAR 0 6
12403: PUSH
12404: LD_VAR 0 8
12408: ADD
12409: ST_TO_ADDR
// if povolani <> class_engineer then
12410: LD_VAR 0 3
12414: PUSH
12415: LD_INT 2
12417: NONEQUAL
12418: IFFALSE 12436
// pom = pom ^ pom3 ;
12420: LD_ADDR_VAR 0 6
12424: PUSH
12425: LD_VAR 0 6
12429: PUSH
12430: LD_VAR 0 9
12434: ADD
12435: ST_TO_ADDR
// if povolani <> class_soldier then
12436: LD_VAR 0 3
12440: PUSH
12441: LD_INT 1
12443: NONEQUAL
12444: IFFALSE 12462
// pom = pom ^ pom4 ;
12446: LD_ADDR_VAR 0 6
12450: PUSH
12451: LD_VAR 0 6
12455: PUSH
12456: LD_VAR 0 10
12460: ADD
12461: ST_TO_ADDR
// result := pom diff diffseznam ;
12462: LD_ADDR_VAR 0 5
12466: PUSH
12467: LD_VAR 0 6
12471: PUSH
12472: LD_VAR 0 4
12476: DIFF
12477: ST_TO_ADDR
// end ;
12478: LD_VAR 0 5
12482: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom ;
12483: CALL 27050 0 0
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_EXP 1
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 30
12502: PUSH
12503: LD_INT 0
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_INT 1
12521: GREATER
12522: AND
12523: IFFALSE 12741
12525: GO 12527
12527: DISABLE
12528: LD_INT 0
12530: PPUSH
// begin disable ( 201 ) ;
12531: LD_INT 201
12533: DISABLE_MARKED
// DialogueOn ;
12534: CALL_OW 6
// interface_hidden := true ;
12538: LD_ADDR_OWVAR 54
12542: PUSH
12543: LD_INT 1
12545: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
12546: LD_EXP 72
12550: PPUSH
12551: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
12555: LD_ADDR_VAR 0 1
12559: PUSH
12560: LD_INT 1
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: LD_EXP 29
12570: PUSH
12571: LD_EXP 31
12575: PUSH
12576: LD_EXP 30
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL 11645 0 3
12590: ST_TO_ADDR
// if pom = 0 then
12591: LD_VAR 0 1
12595: PUSH
12596: LD_INT 0
12598: EQUAL
12599: IFFALSE 12625
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: LD_EXP 29
12616: PUSH
12617: EMPTY
12618: LIST
12619: PPUSH
12620: CALL 11645 0 3
12624: ST_TO_ADDR
// if pom > 0 then
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 0
12632: GREATER
12633: IFFALSE 12729
// begin Say ( pom [ 1 ] , D3b-RSol1-1 ) ;
12635: LD_VAR 0 1
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: LD_STRING D3b-RSol1-1
12646: PPUSH
12647: CALL_OW 88
// if IsOK ( gny ) then
12651: LD_EXP 31
12655: PPUSH
12656: CALL_OW 302
12660: IFFALSE 12688
// begin Say ( gny , D3b-Gny-1 ) ;
12662: LD_EXP 31
12666: PPUSH
12667: LD_STRING D3b-Gny-1
12669: PPUSH
12670: CALL_OW 88
// Say ( bur , D3b-Bur-1 ) ;
12674: LD_EXP 29
12678: PPUSH
12679: LD_STRING D3b-Bur-1
12681: PPUSH
12682: CALL_OW 88
// end else
12686: GO 12729
// if ISOK ( kov ) then
12688: LD_EXP 30
12692: PPUSH
12693: CALL_OW 302
12697: IFFALSE 12713
// Say ( kov , D3b-Kov-1 ) else
12699: LD_EXP 30
12703: PPUSH
12704: LD_STRING D3b-Kov-1
12706: PPUSH
12707: CALL_OW 88
12711: GO 12729
// Say ( pom [ 1 ] , D3b-RSol1-2 ) ;
12713: LD_VAR 0 1
12717: PUSH
12718: LD_INT 1
12720: ARRAY
12721: PPUSH
12722: LD_STRING D3b-RSol1-2
12724: PPUSH
12725: CALL_OW 88
// end ; interface_hidden := false ;
12729: LD_ADDR_OWVAR 54
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// DialogueOff ;
12737: CALL_OW 7
// end ;
12741: PPOPN 1
12743: END
// export function dialog_otazka_poctu_aut ; var pom ; begin
12744: LD_INT 0
12746: PPUSH
12747: PPUSH
// DialogueOn ;
12748: CALL_OW 6
// interface_hidden := true ;
12752: LD_ADDR_OWVAR 54
12756: PUSH
12757: LD_INT 1
12759: ST_TO_ADDR
// Say ( kur , D5-Kur-1 ) ;
12760: LD_EXP 27
12764: PPUSH
12765: LD_STRING D5-Kur-1
12767: PPUSH
12768: CALL_OW 88
// pom = Query ( QVehicles ) ;
12772: LD_ADDR_VAR 0 2
12776: PUSH
12777: LD_STRING QVehicles
12779: PPUSH
12780: CALL_OW 97
12784: ST_TO_ADDR
// case pom of 1 :
12785: LD_VAR 0 2
12789: PUSH
12790: LD_INT 1
12792: DOUBLE
12793: EQUAL
12794: IFTRUE 12798
12796: GO 12825
12798: POP
// begin Say ( bur , D6a-Bur-1 ) ;
12799: LD_EXP 29
12803: PPUSH
12804: LD_STRING D6a-Bur-1
12806: PPUSH
12807: CALL_OW 88
// Say ( kur , D6a-Kur-1 ) ;
12811: LD_EXP 27
12815: PPUSH
12816: LD_STRING D6a-Kur-1
12818: PPUSH
12819: CALL_OW 88
// end ; 2 :
12823: GO 12928
12825: LD_INT 2
12827: DOUBLE
12828: EQUAL
12829: IFTRUE 12833
12831: GO 12872
12833: POP
// begin Say ( bur , D6b-Bur-1 ) ;
12834: LD_EXP 29
12838: PPUSH
12839: LD_STRING D6b-Bur-1
12841: PPUSH
12842: CALL_OW 88
// Say ( kur , D6b-Kur-1 ) ;
12846: LD_EXP 27
12850: PPUSH
12851: LD_STRING D6b-Kur-1
12853: PPUSH
12854: CALL_OW 88
// Say ( bur , D6b-Bur-2 ) ;
12858: LD_EXP 29
12862: PPUSH
12863: LD_STRING D6b-Bur-2
12865: PPUSH
12866: CALL_OW 88
// end ; 3 :
12870: GO 12928
12872: LD_INT 3
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12927
12880: POP
// begin Say ( bur , D6c-Bur-1 ) ;
12881: LD_EXP 29
12885: PPUSH
12886: LD_STRING D6c-Bur-1
12888: PPUSH
12889: CALL_OW 88
// Say ( kur , D6c-Kur-1 ) ;
12893: LD_EXP 27
12897: PPUSH
12898: LD_STRING D6c-Kur-1
12900: PPUSH
12901: CALL_OW 88
// Say ( bur , D6c-Bur-2 ) ;
12905: LD_EXP 29
12909: PPUSH
12910: LD_STRING D6c-Bur-2
12912: PPUSH
12913: CALL_OW 88
// KurinAddTime = 1 ;
12917: LD_ADDR_EXP 7
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
// end ; end ;
12925: GO 12928
12927: POP
// interface_hidden := false ;
12928: LD_ADDR_OWVAR 54
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// DialogueOff ;
12936: CALL_OW 7
// result := pom ;
12940: LD_ADDR_VAR 0 1
12944: PUSH
12945: LD_VAR 0 2
12949: ST_TO_ADDR
// end ;
12950: LD_VAR 0 1
12954: RET
// export function hlaska_omicron ; begin
12955: LD_INT 0
12957: PPUSH
// DialogueOn ;
12958: CALL_OW 6
// interface_hidden := true ;
12962: LD_ADDR_OWVAR 54
12966: PUSH
12967: LD_INT 1
12969: ST_TO_ADDR
// Say ( kur , D6c-Kur-2 ) ;
12970: LD_EXP 27
12974: PPUSH
12975: LD_STRING D6c-Kur-2
12977: PPUSH
12978: CALL_OW 88
// interface_hidden := false ;
12982: LD_ADDR_OWVAR 54
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// DialogueOff ;
12990: CALL_OW 7
// end ;
12994: LD_VAR 0 1
12998: RET
// every 0 0$1 trigger stav_omikron = 3 do
12999: LD_EXP 39
13003: PUSH
13004: LD_INT 3
13006: EQUAL
13007: IFFALSE 13037
13009: GO 13011
13011: DISABLE
// begin CheckVehicles ;
13012: CALL 6114 0 0
// ChangeMissionObjectives ( M5 ) ;
13016: LD_STRING M5
13018: PPUSH
13019: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 1 ) ;
13023: LD_INT 32
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 424
// CheckVehicles ;
13033: CALL 6114 0 0
// end ;
13037: END
// export function dialog_pred_omicronem ; var pom ; begin
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
// DialogueOn ;
13042: CALL_OW 6
// interface_hidden := true ;
13046: LD_ADDR_OWVAR 54
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// Say ( bur , D7-Bur-1 ) ;
13054: LD_EXP 29
13058: PPUSH
13059: LD_STRING D7-Bur-1
13061: PPUSH
13062: CALL_OW 88
// SayRadio ( kur , D7-Kur-1 ) ;
13066: LD_EXP 27
13070: PPUSH
13071: LD_STRING D7-Kur-1
13073: PPUSH
13074: CALL_OW 94
// setkani_om := true ;
13078: LD_ADDR_EXP 41
13082: PUSH
13083: LD_INT 1
13085: ST_TO_ADDR
// ChangeMissionObjectives ( M5a ) ;
13086: LD_STRING M5a
13088: PPUSH
13089: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 0 ) ;
13093: LD_INT 32
13095: PPUSH
13096: LD_INT 0
13098: PPUSH
13099: CALL_OW 424
// interface_hidden := false ;
13103: LD_ADDR_OWVAR 54
13107: PUSH
13108: LD_INT 0
13110: ST_TO_ADDR
// DialogueOff ;
13111: CALL_OW 7
// end ;
13115: LD_VAR 0 1
13119: RET
// every 0 0$5 trigger stav_omikron = 4 and omicron_half_destroyed do var pom ;
13120: LD_EXP 39
13124: PUSH
13125: LD_INT 4
13127: EQUAL
13128: PUSH
13129: CALL 27119 0 0
13133: AND
13134: IFFALSE 13401
13136: GO 13138
13138: DISABLE
13139: LD_INT 0
13141: PPUSH
// begin popov_ven ;
13142: CALL 5438 0 0
// DialogueOn ;
13146: CALL_OW 6
// interface_hidden := true ;
13150: LD_ADDR_OWVAR 54
13154: PUSH
13155: LD_INT 1
13157: ST_TO_ADDR
// pom = create_kecajici_amik ;
13158: LD_ADDR_VAR 0 1
13162: PUSH
13163: CALL 18381 0 0
13167: ST_TO_ADDR
// SayRadio ( pom , D8-Sol1-1 ) ;
13168: LD_VAR 0 1
13172: PPUSH
13173: LD_STRING D8-Sol1-1
13175: PPUSH
13176: CALL_OW 94
// if IsOK ( kov ) then
13180: LD_EXP 30
13184: PPUSH
13185: CALL_OW 302
13189: IFFALSE 13205
// Say ( kov , D8-Kov-1 ) else
13191: LD_EXP 30
13195: PPUSH
13196: LD_STRING D8-Kov-1
13198: PPUSH
13199: CALL_OW 88
13203: GO 13296
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13205: LD_ADDR_VAR 0 1
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: LD_EXP 29
13220: PUSH
13221: LD_EXP 31
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL 11645 0 3
13234: ST_TO_ADDR
// if pom = 0 then
13235: LD_VAR 0 1
13239: PUSH
13240: LD_INT 0
13242: EQUAL
13243: IFFALSE 13280
// GetPeopleSide ( You2 , sex_male , class_soldier , [ kur , pop , bel ] ) ;
13245: LD_EXP 2
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: LD_INT 1
13255: PPUSH
13256: LD_EXP 27
13260: PUSH
13261: LD_EXP 28
13265: PUSH
13266: LD_EXP 32
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: PPUSH
13276: CALL 12064 0 4
// Say ( pom [ 1 ] , D8-RSol1-1 ) ;
13280: LD_VAR 0 1
13284: PUSH
13285: LD_INT 1
13287: ARRAY
13288: PPUSH
13289: LD_STRING D8-RSol1-1
13291: PPUSH
13292: CALL_OW 88
// end ; if IsOK ( gny ) then
13296: LD_EXP 31
13300: PPUSH
13301: CALL_OW 302
13305: IFFALSE 13321
// Say ( gny , D8-Gny-1 ) else
13307: LD_EXP 31
13311: PPUSH
13312: LD_STRING D8-Gny-1
13314: PPUSH
13315: CALL_OW 88
13319: GO 13377
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13321: LD_ADDR_VAR 0 1
13325: PUSH
13326: LD_INT 1
13328: PPUSH
13329: LD_INT 1
13331: PPUSH
13332: LD_EXP 29
13336: PUSH
13337: LD_EXP 31
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL 11645 0 3
13350: ST_TO_ADDR
// if pom > 1 then
13351: LD_VAR 0 1
13355: PUSH
13356: LD_INT 1
13358: GREATER
13359: IFFALSE 13377
// Say ( pom [ 2 ] , D8-RSol2-1 ) ;
13361: LD_VAR 0 1
13365: PUSH
13366: LD_INT 2
13368: ARRAY
13369: PPUSH
13370: LD_STRING D8-RSol2-1
13372: PPUSH
13373: CALL_OW 88
// end ; interface_hidden := false ;
13377: LD_ADDR_OWVAR 54
13381: PUSH
13382: LD_INT 0
13384: ST_TO_ADDR
// DialogueOff ;
13385: CALL_OW 7
// stahnuti_amiku ;
13389: CALL 27282 0 0
// stav_omikron = 5 ;
13393: LD_ADDR_EXP 39
13397: PUSH
13398: LD_INT 5
13400: ST_TO_ADDR
// end ;
13401: PPOPN 1
13403: END
// every 0 0$5 trigger stav_omikron = 5 do var gri ;
13404: LD_EXP 39
13408: PUSH
13409: LD_INT 5
13411: EQUAL
13412: IFFALSE 13573
13414: GO 13416
13416: DISABLE
13417: LD_INT 0
13419: PPUSH
// begin setkani_om = false ;
13420: LD_ADDR_EXP 41
13424: PUSH
13425: LD_INT 0
13427: ST_TO_ADDR
// gri = create_grishko ;
13428: LD_ADDR_VAR 0 1
13432: PUSH
13433: CALL 18440 0 0
13437: ST_TO_ADDR
// CenterOnUnits ( gri ) ;
13438: LD_VAR 0 1
13442: PPUSH
13443: CALL_OW 85
// DialogueOn ;
13447: CALL_OW 6
// interface_hidden := true ;
13451: LD_ADDR_OWVAR 54
13455: PUSH
13456: LD_INT 1
13458: ST_TO_ADDR
// SayRadio ( gri , D9-Gri-1 ) ;
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_STRING D9-Gri-1
13466: PPUSH
13467: CALL_OW 94
// SayRadio ( kur , D9-Kur-1 ) ;
13471: LD_EXP 27
13475: PPUSH
13476: LD_STRING D9-Kur-1
13478: PPUSH
13479: CALL_OW 94
// wait ( 0 0$2 ) ;
13483: LD_INT 70
13485: PPUSH
13486: CALL_OW 67
// SayRadio ( gri , D9-Gri-2 ) ;
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_STRING D9-Gri-2
13497: PPUSH
13498: CALL_OW 94
// SayRadio ( kur , D9-Kur-2 ) ;
13502: LD_EXP 27
13506: PPUSH
13507: LD_STRING D9-Kur-2
13509: PPUSH
13510: CALL_OW 94
// SayRadio ( gri , D9-Gri-3 ) ;
13514: LD_VAR 0 1
13518: PPUSH
13519: LD_STRING D9-Gri-3
13521: PPUSH
13522: CALL_OW 94
// SayRadio ( kur , D9-Kur-3 ) ;
13526: LD_EXP 27
13530: PPUSH
13531: LD_STRING D9-Kur-3
13533: PPUSH
13534: CALL_OW 94
// interface_hidden := false ;
13538: LD_ADDR_OWVAR 54
13542: PUSH
13543: LD_INT 0
13545: ST_TO_ADDR
// DialogueOff ;
13546: CALL_OW 7
// wait ( 0 0$20 ) ;
13550: LD_INT 700
13552: PPUSH
13553: CALL_OW 67
// stav_omikron = 6 ;
13557: LD_ADDR_EXP 39
13561: PUSH
13562: LD_INT 6
13564: ST_TO_ADDR
// zastaveni_rusaku ;
13565: CALL 9886 0 0
// utok_arabu ;
13569: CALL 28123 0 0
// end ;
13573: PPOPN 1
13575: END
// export function kecy_behem_utoku_arabu ; begin
13576: LD_INT 0
13578: PPUSH
// stav_omikron = 7 ;
13579: LD_ADDR_EXP 39
13583: PUSH
13584: LD_INT 7
13586: ST_TO_ADDR
// SayRadio ( kur , D9a-Kur-1 ) ;
13587: LD_EXP 27
13591: PPUSH
13592: LD_STRING D9a-Kur-1
13594: PPUSH
13595: CALL_OW 94
// Say ( bur , D9a-Bur-1 ) ;
13599: LD_EXP 29
13603: PPUSH
13604: LD_STRING D9a-Bur-1
13606: PPUSH
13607: CALL_OW 88
// SayRadio ( kur , D9a-Kur-2 ) ;
13611: LD_EXP 27
13615: PPUSH
13616: LD_STRING D9a-Kur-2
13618: PPUSH
13619: CALL_OW 94
// posilani_arabskych_hlidek = true ;
13623: LD_ADDR_EXP 74
13627: PUSH
13628: LD_INT 1
13630: ST_TO_ADDR
// manage_ruske_computery_zpet ;
13631: CALL 7159 0 0
// end ;
13635: LD_VAR 0 1
13639: RET
// every 0 0$1 trigger stav_omikron = 8 and get_lidi_popov_area > 0 do var pom , pom1 ;
13640: LD_EXP 39
13644: PUSH
13645: LD_INT 8
13647: EQUAL
13648: PUSH
13649: CALL 8546 0 0
13653: PUSH
13654: LD_INT 0
13656: GREATER
13657: AND
13658: IFFALSE 13916
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
// begin pom = get_lidi_popov_area ;
13667: LD_ADDR_VAR 0 1
13671: PUSH
13672: CALL 8546 0 0
13676: ST_TO_ADDR
// pom = pom [ 1 ] ;
13677: LD_ADDR_VAR 0 1
13681: PUSH
13682: LD_VAR 0 1
13686: PUSH
13687: LD_INT 1
13689: ARRAY
13690: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13691: LD_ADDR_VAR 0 2
13695: PUSH
13696: LD_INT 22
13698: PUSH
13699: LD_EXP 1
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 2
13710: PUSH
13711: LD_INT 21
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 21
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PPUSH
13740: CALL_OW 69
13744: ST_TO_ADDR
// ComStop ( pom1 ) ;
13745: LD_VAR 0 2
13749: PPUSH
13750: CALL_OW 141
// ArDontAttackPlayer ( true ) ;
13754: LD_INT 1
13756: PPUSH
13757: CALL 29001 0 1
// InGameOn ;
13761: CALL_OW 8
// CenterOnUnits ( [ pop ] ) ;
13765: LD_EXP 28
13769: PUSH
13770: EMPTY
13771: LIST
13772: PPUSH
13773: CALL_OW 85
// ComMoveUnit ( pop , pom ) ;
13777: LD_EXP 28
13781: PPUSH
13782: LD_VAR 0 1
13786: PPUSH
13787: CALL_OW 112
// while GetDistUnits ( pop , pom ) > 4 do
13791: LD_EXP 28
13795: PPUSH
13796: LD_VAR 0 1
13800: PPUSH
13801: CALL_OW 296
13805: PUSH
13806: LD_INT 4
13808: GREATER
13809: IFFALSE 13820
// wait ( 0 0$1 ) ;
13811: LD_INT 35
13813: PPUSH
13814: CALL_OW 67
13818: GO 13791
// ComTurnUnit ( pom , pop ) ;
13820: LD_VAR 0 1
13824: PPUSH
13825: LD_EXP 28
13829: PPUSH
13830: CALL_OW 119
// CenterOnUnits ( [ pop ] ) ;
13834: LD_EXP 28
13838: PUSH
13839: EMPTY
13840: LIST
13841: PPUSH
13842: CALL_OW 85
// InGameOff ;
13846: CALL_OW 9
// DialogueOn ;
13850: CALL_OW 6
// interface_hidden := true ;
13854: LD_ADDR_OWVAR 54
13858: PUSH
13859: LD_INT 1
13861: ST_TO_ADDR
// if GetDistUnits ( pop , bur ) <= 10 then
13862: LD_EXP 28
13866: PPUSH
13867: LD_EXP 29
13871: PPUSH
13872: CALL_OW 296
13876: PUSH
13877: LD_INT 10
13879: LESSEQUAL
13880: IFFALSE 13888
// dialog_popov_s_burlakem else
13882: CALL 13919 0 0
13886: GO 13892
// dialog_popov_bez_burlaka ;
13888: CALL 14047 0 0
// stav_omikron = 9 ;
13892: LD_ADDR_EXP 39
13896: PUSH
13897: LD_INT 9
13899: ST_TO_ADDR
// interface_hidden := false ;
13900: LD_ADDR_OWVAR 54
13904: PUSH
13905: LD_INT 0
13907: ST_TO_ADDR
// DialogueOff ;
13908: CALL_OW 7
// totalni_ukonceni_mise_v_ingame_videu ;
13912: CALL 8734 0 0
// end ;
13916: PPOPN 2
13918: END
// function dialog_popov_s_burlakem ; begin
13919: LD_INT 0
13921: PPUSH
// Say ( bur , D10a-Bur-1 ) ;
13922: LD_EXP 29
13926: PPUSH
13927: LD_STRING D10a-Bur-1
13929: PPUSH
13930: CALL_OW 88
// Say ( pop , D10a-Pop-1 ) ;
13934: LD_EXP 28
13938: PPUSH
13939: LD_STRING D10a-Pop-1
13941: PPUSH
13942: CALL_OW 88
// Say ( bur , D10a-Bur-2 ) ;
13946: LD_EXP 29
13950: PPUSH
13951: LD_STRING D10a-Bur-2
13953: PPUSH
13954: CALL_OW 88
// Say ( pop , D10a-Pop-2 ) ;
13958: LD_EXP 28
13962: PPUSH
13963: LD_STRING D10a-Pop-2
13965: PPUSH
13966: CALL_OW 88
// Say ( bur , D10a-Bur-3 ) ;
13970: LD_EXP 29
13974: PPUSH
13975: LD_STRING D10a-Bur-3
13977: PPUSH
13978: CALL_OW 88
// Say ( pop , D10a-Pop-3 ) ;
13982: LD_EXP 28
13986: PPUSH
13987: LD_STRING D10a-Pop-3
13989: PPUSH
13990: CALL_OW 88
// Say ( bur , D10a-Bur-4 ) ;
13994: LD_EXP 29
13998: PPUSH
13999: LD_STRING D10a-Bur-4
14001: PPUSH
14002: CALL_OW 88
// Say ( pop , D10a-Pop-4 ) ;
14006: LD_EXP 28
14010: PPUSH
14011: LD_STRING D10a-Pop-4
14013: PPUSH
14014: CALL_OW 88
// Say ( bur , D10a-Bur-5 ) ;
14018: LD_EXP 29
14022: PPUSH
14023: LD_STRING D10a-Bur-5
14025: PPUSH
14026: CALL_OW 88
// Say ( pop , D10a-Pop-5 ) ;
14030: LD_EXP 28
14034: PPUSH
14035: LD_STRING D10a-Pop-5
14037: PPUSH
14038: CALL_OW 88
// end ;
14042: LD_VAR 0 1
14046: RET
// function dialog_popov_bez_burlaka ; var pom ; begin
14047: LD_INT 0
14049: PPUSH
14050: PPUSH
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14051: LD_ADDR_VAR 0 2
14055: PUSH
14056: LD_INT 15
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_EXP 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 21
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 26
14083: PUSH
14084: LD_INT 1
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 70
14100: ST_TO_ADDR
// if pom = 0 then
14101: LD_VAR 0 2
14105: PUSH
14106: LD_INT 0
14108: EQUAL
14109: IFFALSE 14113
// exit ;
14111: GO 14233
// Say ( pom , D10b-RSol1-1 ) ;
14113: LD_VAR 0 2
14117: PPUSH
14118: LD_STRING D10b-RSol1-1
14120: PPUSH
14121: CALL_OW 88
// Say ( pop , D10b-Pop-1 ) ;
14125: LD_EXP 28
14129: PPUSH
14130: LD_STRING D10b-Pop-1
14132: PPUSH
14133: CALL_OW 88
// Say ( pom , D10b-RSol1-2 ) ;
14137: LD_VAR 0 2
14141: PPUSH
14142: LD_STRING D10b-RSol1-2
14144: PPUSH
14145: CALL_OW 88
// SayRadio ( pop , D10b-Pop-2 ) ;
14149: LD_EXP 28
14153: PPUSH
14154: LD_STRING D10b-Pop-2
14156: PPUSH
14157: CALL_OW 94
// Say ( bur , D10b-Bur-2 ) ;
14161: LD_EXP 29
14165: PPUSH
14166: LD_STRING D10b-Bur-2
14168: PPUSH
14169: CALL_OW 88
// SayRadio ( pop , D10b-Pop-3 ) ;
14173: LD_EXP 28
14177: PPUSH
14178: LD_STRING D10b-Pop-3
14180: PPUSH
14181: CALL_OW 94
// Say ( bur , D10b-Bur-3 ) ;
14185: LD_EXP 29
14189: PPUSH
14190: LD_STRING D10b-Bur-3
14192: PPUSH
14193: CALL_OW 88
// SayRadio ( pop , D10b-Pop-4 ) ;
14197: LD_EXP 28
14201: PPUSH
14202: LD_STRING D10b-Pop-4
14204: PPUSH
14205: CALL_OW 94
// Say ( bur , D10b-Bur-4 ) ;
14209: LD_EXP 29
14213: PPUSH
14214: LD_STRING D10b-Bur-4
14216: PPUSH
14217: CALL_OW 88
// SayRadio ( pop , D10b-Pop-5 ) ;
14221: LD_EXP 28
14225: PPUSH
14226: LD_STRING D10b-Pop-5
14228: PPUSH
14229: CALL_OW 94
// end ;
14233: LD_VAR 0 1
14237: RET
// every 0 0$1 trigger stav_omikron in [ 0 , 1 , 2 , 3 ] do var pom , i , upoz , pom1 , pom2 , pom3 ; var dr_pom1 , dr_pom2 , dr_pom3 ; var dr_pom ;
14238: LD_EXP 39
14242: PUSH
14243: LD_INT 0
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: LD_INT 2
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: IN
14261: IFFALSE 15053
14263: GO 14265
14265: DISABLE
14266: LD_INT 0
14268: PPUSH
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
// begin upoz = false ;
14278: LD_ADDR_VAR 0 3
14282: PUSH
14283: LD_INT 0
14285: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , f_not , [ f_type , unit_building ] ] ) ;
14286: LD_ADDR_VAR 0 1
14290: PUSH
14291: LD_INT 17
14293: PPUSH
14294: LD_INT 22
14296: PUSH
14297: LD_EXP 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 3
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 3
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 70
14328: ST_TO_ADDR
// dr_pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
14329: LD_ADDR_VAR 0 10
14333: PUSH
14334: LD_INT 17
14336: PPUSH
14337: LD_INT 22
14339: PUSH
14340: LD_EXP 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 70
14367: ST_TO_ADDR
// for i in dr_pom do
14368: LD_ADDR_VAR 0 2
14372: PUSH
14373: LD_VAR 0 10
14377: PUSH
14378: FOR_IN
14379: IFFALSE 14404
// pom = pom union UnitsInside ( i ) ;
14381: LD_ADDR_VAR 0 1
14385: PUSH
14386: LD_VAR 0 1
14390: PUSH
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 313
14400: UNION
14401: ST_TO_ADDR
14402: GO 14378
14404: POP
14405: POP
// if pom then
14406: LD_VAR 0 1
14410: IFFALSE 14459
// for i in pom do
14412: LD_ADDR_VAR 0 2
14416: PUSH
14417: LD_VAR 0 1
14421: PUSH
14422: FOR_IN
14423: IFFALSE 14457
// if Getside ( Attacks ( i ) ) = Amici then
14425: LD_VAR 0 2
14429: PPUSH
14430: CALL_OW 320
14434: PPUSH
14435: CALL_OW 255
14439: PUSH
14440: LD_EXP 4
14444: EQUAL
14445: IFFALSE 14455
// upoz = true ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: LD_INT 1
14454: ST_TO_ADDR
14455: GO 14422
14457: POP
14458: POP
// if upoz then
14459: LD_VAR 0 3
14463: IFFALSE 15052
// begin DialogueOn ;
14465: CALL_OW 6
// interface_hidden := true ;
14469: LD_ADDR_OWVAR 54
14473: PUSH
14474: LD_INT 1
14476: ST_TO_ADDR
// if IsOK ( gny ) then
14477: LD_EXP 31
14481: PPUSH
14482: CALL_OW 302
14486: IFFALSE 14514
// begin Say ( gny , D11-Gny-1 ) ;
14488: LD_EXP 31
14492: PPUSH
14493: LD_STRING D11-Gny-1
14495: PPUSH
14496: CALL_OW 88
// Say ( bur , D11-Bur-1 ) ;
14500: LD_EXP 29
14504: PPUSH
14505: LD_STRING D11-Bur-1
14507: PPUSH
14508: CALL_OW 88
// end else
14512: GO 14526
// SayRadio ( kur , D11-Kur-1 ) ;
14514: LD_EXP 27
14518: PPUSH
14519: LD_STRING D11-Kur-1
14521: PPUSH
14522: CALL_OW 94
// interface_hidden := true ;
14526: LD_ADDR_OWVAR 54
14530: PUSH
14531: LD_INT 1
14533: ST_TO_ADDR
// DialogueOff ;
14534: CALL_OW 7
// InGameOn ;
14538: CALL_OW 8
// repeat pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14542: LD_ADDR_VAR 0 4
14546: PUSH
14547: LD_INT 18
14549: PPUSH
14550: LD_INT 22
14552: PUSH
14553: LD_EXP 1
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: LD_INT 21
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 70
14584: ST_TO_ADDR
// dr_pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14585: LD_ADDR_VAR 0 7
14589: PUSH
14590: LD_INT 18
14592: PPUSH
14593: LD_INT 22
14595: PUSH
14596: LD_EXP 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 21
14607: PUSH
14608: LD_INT 3
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PPUSH
14619: CALL_OW 70
14623: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14624: LD_ADDR_VAR 0 5
14628: PUSH
14629: LD_INT 19
14631: PPUSH
14632: LD_INT 22
14634: PUSH
14635: LD_EXP 1
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 3
14646: PUSH
14647: LD_INT 21
14649: PUSH
14650: LD_INT 3
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: PPUSH
14662: CALL_OW 70
14666: ST_TO_ADDR
// dr_pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14667: LD_ADDR_VAR 0 8
14671: PUSH
14672: LD_INT 19
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_EXP 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 21
14689: PUSH
14690: LD_INT 3
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PPUSH
14701: CALL_OW 70
14705: ST_TO_ADDR
// pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14706: LD_ADDR_VAR 0 6
14710: PUSH
14711: LD_INT 37
14713: PPUSH
14714: LD_INT 22
14716: PUSH
14717: LD_EXP 1
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 3
14728: PUSH
14729: LD_INT 21
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: PPUSH
14744: CALL_OW 70
14748: ST_TO_ADDR
// dr_pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14749: LD_ADDR_VAR 0 9
14753: PUSH
14754: LD_INT 37
14756: PPUSH
14757: LD_INT 22
14759: PUSH
14760: LD_EXP 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 21
14771: PUSH
14772: LD_INT 3
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 70
14787: ST_TO_ADDR
// ComMoveToArea ( pom1 , om_ven_3 ) ;
14788: LD_VAR 0 4
14792: PPUSH
14793: LD_INT 31
14795: PPUSH
14796: CALL_OW 113
// for i in dr_pom1 do
14800: LD_ADDR_VAR 0 2
14804: PUSH
14805: LD_VAR 0 7
14809: PUSH
14810: FOR_IN
14811: IFFALSE 14851
// begin dr_pom = UnitsInside ( i ) ;
14813: LD_ADDR_VAR 0 10
14817: PUSH
14818: LD_VAR 0 2
14822: PPUSH
14823: CALL_OW 313
14827: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
14828: LD_VAR 0 10
14832: PPUSH
14833: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_1 ) ;
14837: LD_VAR 0 10
14841: PPUSH
14842: LD_INT 29
14844: PPUSH
14845: CALL_OW 173
// end ;
14849: GO 14810
14851: POP
14852: POP
// ComMoveToArea ( pom2 , om_zone ) ;
14853: LD_VAR 0 5
14857: PPUSH
14858: LD_INT 8
14860: PPUSH
14861: CALL_OW 113
// for i in dr_pom2 do
14865: LD_ADDR_VAR 0 2
14869: PUSH
14870: LD_VAR 0 8
14874: PUSH
14875: FOR_IN
14876: IFFALSE 14916
// begin dr_pom = UnitsInside ( i ) ;
14878: LD_ADDR_VAR 0 10
14882: PUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: CALL_OW 313
14892: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
14893: LD_VAR 0 10
14897: PPUSH
14898: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_2 ) ;
14902: LD_VAR 0 10
14906: PPUSH
14907: LD_INT 30
14909: PPUSH
14910: CALL_OW 173
// end ;
14914: GO 14875
14916: POP
14917: POP
// ComMoveToArea ( pom3 , om_zone ) ;
14918: LD_VAR 0 6
14922: PPUSH
14923: LD_INT 8
14925: PPUSH
14926: CALL_OW 113
// for i in dr_pom3 do
14930: LD_ADDR_VAR 0 2
14934: PUSH
14935: LD_VAR 0 9
14939: PUSH
14940: FOR_IN
14941: IFFALSE 14981
// begin dr_pom = UnitsInside ( i ) ;
14943: LD_ADDR_VAR 0 10
14947: PUSH
14948: LD_VAR 0 2
14952: PPUSH
14953: CALL_OW 313
14957: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
14958: LD_VAR 0 10
14962: PPUSH
14963: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_3 ) ;
14967: LD_VAR 0 10
14971: PPUSH
14972: LD_INT 31
14974: PPUSH
14975: CALL_OW 173
// end ;
14979: GO 14940
14981: POP
14982: POP
// wait ( 0 0$3 ) ;
14983: LD_INT 105
14985: PPUSH
14986: CALL_OW 67
// until not ( pom1 or pom3 or pom3 ) ;
14990: LD_VAR 0 4
14994: PUSH
14995: LD_VAR 0 6
14999: OR
15000: PUSH
15001: LD_VAR 0 6
15005: OR
15006: NOT
15007: IFFALSE 14542
// wait ( 0 0$4 ) ;
15009: LD_INT 140
15011: PPUSH
15012: CALL_OW 67
// if dr_pom3 then
15016: LD_VAR 0 9
15020: IFFALSE 15048
// for i in dr_pom3 do
15022: LD_ADDR_VAR 0 2
15026: PUSH
15027: LD_VAR 0 9
15031: PUSH
15032: FOR_IN
15033: IFFALSE 15046
// KillUnit ( i ) ;
15035: LD_VAR 0 2
15039: PPUSH
15040: CALL_OW 66
15044: GO 15032
15046: POP
15047: POP
// InGameOff ;
15048: CALL_OW 9
// end ; enable ;
15052: ENABLE
// end ;
15053: PPOPN 10
15055: END
// every 1 trigger stav_omikron in [ 4 , 5 , 6 ] do var pom , pom1 , pom2 , i , AreaNotCleared , firstDialog ;
15056: LD_EXP 39
15060: PUSH
15061: LD_INT 4
15063: PUSH
15064: LD_INT 5
15066: PUSH
15067: LD_INT 6
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: IN
15075: IFFALSE 15235
15077: GO 15079
15079: DISABLE
15080: LD_INT 0
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
// begin enable ;
15088: ENABLE
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , 3 ] ] ) ;
15089: LD_ADDR_VAR 0 1
15093: PUSH
15094: LD_INT 20
15096: PPUSH
15097: LD_INT 21
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 22
15109: PUSH
15110: LD_INT 3
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PPUSH
15121: CALL_OW 70
15125: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) ;
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_INT 20
15133: PPUSH
15134: LD_INT 21
15136: PUSH
15137: LD_INT 2
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 22
15146: PUSH
15147: LD_INT 3
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 70
15162: ST_TO_ADDR
// if pom or pom2 then
15163: LD_VAR 0 1
15167: PUSH
15168: LD_VAR 0 3
15172: OR
15173: IFFALSE 15235
// begin ComMoveXY ( pom , 62 , 16 ) ;
15175: LD_VAR 0 1
15179: PPUSH
15180: LD_INT 62
15182: PPUSH
15183: LD_INT 16
15185: PPUSH
15186: CALL_OW 111
// ComMoveXY ( pom2 , 62 , 16 ) ;
15190: LD_VAR 0 3
15194: PPUSH
15195: LD_INT 62
15197: PPUSH
15198: LD_INT 16
15200: PPUSH
15201: CALL_OW 111
// if KurinDialog = 0 then
15205: LD_EXP 6
15209: PUSH
15210: LD_INT 0
15212: EQUAL
15213: IFFALSE 15235
// begin KurinDialog = 1 ;
15215: LD_ADDR_EXP 6
15219: PUSH
15220: LD_INT 1
15222: ST_TO_ADDR
// Say ( kur , D12-Kur-1 ) ;
15223: LD_EXP 27
15227: PPUSH
15228: LD_STRING D12-Kur-1
15230: PPUSH
15231: CALL_OW 88
// end ; end ; end ;
15235: PPOPN 6
15237: END
// export function hlaska_lhani ; begin
15238: LD_INT 0
15240: PPUSH
// DialogueOn ;
15241: CALL_OW 6
// interface_hidden := true ;
15245: LD_ADDR_OWVAR 54
15249: PUSH
15250: LD_INT 1
15252: ST_TO_ADDR
// Say ( kur , D6d-Kur-1 ) ;
15253: LD_EXP 27
15257: PPUSH
15258: LD_STRING D6d-Kur-1
15260: PPUSH
15261: CALL_OW 88
// interface_hidden := false ;
15265: LD_ADDR_OWVAR 54
15269: PUSH
15270: LD_INT 0
15272: ST_TO_ADDR
// DialogueOff ;
15273: CALL_OW 7
// end ;
15277: LD_VAR 0 1
15281: RET
// export function dialog_upoz ; begin
15282: LD_INT 0
15284: PPUSH
// DialogueOn ;
15285: CALL_OW 6
// interface_hidden := true ;
15289: LD_ADDR_OWVAR 54
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// SayRadio ( kur , D7a-Kur-1 ) ;
15297: LD_EXP 27
15301: PPUSH
15302: LD_STRING D7a-Kur-1
15304: PPUSH
15305: CALL_OW 94
// interface_hidden := false ;
15309: LD_ADDR_OWVAR 54
15313: PUSH
15314: LD_INT 0
15316: ST_TO_ADDR
// DialogueOff ;
15317: CALL_OW 7
// end ;
15321: LD_VAR 0 1
15325: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
15326: GO 15328
15328: DISABLE
15329: LD_INT 0
15331: PPUSH
15332: PPUSH
15333: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_INT 22
15341: PUSH
15342: LD_EXP 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 21
15366: PUSH
15367: LD_INT 2
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: ST_TO_ADDR
// for i in Ru_Units do
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: LD_VAR 0 3
15397: PUSH
15398: FOR_IN
15399: IFFALSE 15506
// begin pom = Attacks ( i ) ;
15401: LD_ADDR_VAR 0 1
15405: PUSH
15406: LD_VAR 0 2
15410: PPUSH
15411: CALL_OW 320
15415: ST_TO_ADDR
// if pom <> 0 then
15416: LD_VAR 0 1
15420: PUSH
15421: LD_INT 0
15423: NONEQUAL
15424: IFFALSE 15466
// if Getside ( pom ) in [ You2 , You3 ] then
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 255
15435: PUSH
15436: LD_EXP 2
15440: PUSH
15441: LD_EXP 3
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: IN
15450: IFFALSE 15466
// konstanta_utoceni = konstanta_utoceni + 1 ;
15452: LD_ADDR_EXP 49
15456: PUSH
15457: LD_EXP 49
15461: PUSH
15462: LD_INT 1
15464: PLUS
15465: ST_TO_ADDR
// if pom = pop or pom = kur then
15466: LD_VAR 0 1
15470: PUSH
15471: LD_EXP 28
15475: EQUAL
15476: PUSH
15477: LD_VAR 0 1
15481: PUSH
15482: LD_EXP 27
15486: EQUAL
15487: OR
15488: IFFALSE 15504
// konstanta_utoceni = konstanta_utoceni + 10 ;
15490: LD_ADDR_EXP 49
15494: PUSH
15495: LD_EXP 49
15499: PUSH
15500: LD_INT 10
15502: PLUS
15503: ST_TO_ADDR
// end ;
15504: GO 15398
15506: POP
15507: POP
// if konstanta_utoceni < 10 then
15508: LD_EXP 49
15512: PUSH
15513: LD_INT 10
15515: LESS
15516: IFFALSE 15519
// enable ;
15518: ENABLE
// end ;
15519: PPOPN 3
15521: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
15522: LD_EXP 49
15526: PUSH
15527: LD_INT 10
15529: GREATEREQUAL
15530: IFFALSE 15539
15532: GO 15534
15534: DISABLE
// begin konec_mise_utok ;
15535: CALL 1435 0 0
// end ;
15539: END
// export function dialog_scholtze_umrel ; var i , pom , pom1 ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
// pom = 0 ;
15546: LD_ADDR_VAR 0 3
15550: PUSH
15551: LD_INT 0
15553: ST_TO_ADDR
// DialogueOn ;
15554: CALL_OW 6
// interface_hidden := true ;
15558: LD_ADDR_OWVAR 54
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// ForceSay ( schol2 , D4b-Sch-1 ) ;
15566: LD_EXP 34
15570: PPUSH
15571: LD_STRING D4b-Sch-1
15573: PPUSH
15574: CALL_OW 91
// pom = FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
15578: LD_ADDR_VAR 0 3
15582: PUSH
15583: LD_INT 22
15585: PUSH
15586: LD_EXP 4
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 21
15597: PUSH
15598: LD_INT 1
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PPUSH
15609: CALL_OW 69
15613: ST_TO_ADDR
// pom1 = NearestUnitToUnit ( pom , schol2 ) ;
15614: LD_ADDR_VAR 0 4
15618: PUSH
15619: LD_VAR 0 3
15623: PPUSH
15624: LD_EXP 34
15628: PPUSH
15629: CALL_OW 74
15633: ST_TO_ADDR
// if pom1 <> 0 then
15634: LD_VAR 0 4
15638: PUSH
15639: LD_INT 0
15641: NONEQUAL
15642: IFFALSE 15656
// SayNoName ( pom1 , D4b-Sol1-1 ) ;
15644: LD_VAR 0 4
15648: PPUSH
15649: LD_STRING D4b-Sol1-1
15651: PPUSH
15652: CALL_OW 90
// pom1 = NearestUnitToUnit ( pom diff pom1 , pom1 ) ;
15656: LD_ADDR_VAR 0 4
15660: PUSH
15661: LD_VAR 0 3
15665: PUSH
15666: LD_VAR 0 4
15670: DIFF
15671: PPUSH
15672: LD_VAR 0 4
15676: PPUSH
15677: CALL_OW 74
15681: ST_TO_ADDR
// SayNoName ( pom1 , D4b-Sol2-1 ) ;
15682: LD_VAR 0 4
15686: PPUSH
15687: LD_STRING D4b-Sol2-1
15689: PPUSH
15690: CALL_OW 90
// ForceSay ( schol2 , D4b-Sch-2 ) ;
15694: LD_EXP 34
15698: PPUSH
15699: LD_STRING D4b-Sch-2
15701: PPUSH
15702: CALL_OW 91
// Say ( bur , D4b-Bur-2 ) ;
15706: LD_EXP 29
15710: PPUSH
15711: LD_STRING D4b-Bur-2
15713: PPUSH
15714: CALL_OW 88
// SetLives ( schol2 , 0 ) ;
15718: LD_EXP 34
15722: PPUSH
15723: LD_INT 0
15725: PPUSH
15726: CALL_OW 234
// ChangeMissionObjectives ( MScholtzeDel ) ;
15730: LD_STRING MScholtzeDel
15732: PPUSH
15733: CALL_OW 337
// interface_hidden := false ;
15737: LD_ADDR_OWVAR 54
15741: PUSH
15742: LD_INT 0
15744: ST_TO_ADDR
// DialogueOff ;
15745: CALL_OW 7
// end ;
15749: LD_VAR 0 1
15753: RET
// on UnitGoesToRed ( un ) do begin if un = schol2 then
15754: LD_VAR 0 1
15758: PUSH
15759: LD_EXP 34
15763: EQUAL
15764: IFFALSE 15780
// if kecy_scholtze_nalezen then
15766: LD_EXP 44
15770: IFFALSE 15776
// exit else
15772: GO 15780
15774: GO 15780
// dialog_scholtze_umrel ;
15776: CALL 15540 0 0
// end ;
15780: PPOPN 1
15782: END
// every 0 0$2 trigger FilterUnitsInArea ( noTracksArea , [ [ f_side , You ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] , [ f_chassis , us_light_wheeled ] , [ f_chassis , us_medium_wheeled ] ] ] ) and stav_omikron in [ 0 , 1 , 2 , 3 ] do
15783: LD_INT 53
15785: PPUSH
15786: LD_INT 22
15788: PUSH
15789: LD_EXP 1
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 2
15800: PUSH
15801: LD_INT 31
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 31
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 31
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 31
15833: PUSH
15834: LD_INT 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 70
15856: PUSH
15857: LD_EXP 39
15861: PUSH
15862: LD_INT 0
15864: PUSH
15865: LD_INT 1
15867: PUSH
15868: LD_INT 2
15870: PUSH
15871: LD_INT 3
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: IN
15880: AND
15881: IFFALSE 15908
15883: GO 15885
15885: DISABLE
// begin CenterOnXY ( 38 , 58 ) ;
15886: LD_INT 38
15888: PPUSH
15889: LD_INT 58
15891: PPUSH
15892: CALL_OW 84
// Say ( bur , D5a-Bur-1 ) ;
15896: LD_EXP 29
15900: PPUSH
15901: LD_STRING D5a-Bur-1
15903: PPUSH
15904: CALL_OW 88
// end ;
15908: END
// on BuildingStarted ( b , builder ) do begin if b in FilterUnitsInArea ( restrictedArea , [ f_side , 3 ] ) then
15909: LD_VAR 0 1
15913: PUSH
15914: LD_INT 54
15916: PPUSH
15917: LD_INT 22
15919: PUSH
15920: LD_INT 3
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PPUSH
15927: CALL_OW 70
15931: IN
15932: IFFALSE 15943
// RemoveUnit ( b ) ;
15934: LD_VAR 0 1
15938: PPUSH
15939: CALL_OW 64
// end ;
15943: PPOPN 2
15945: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) > 0 do var pom ;
15946: LD_INT 22
15948: PUSH
15949: LD_EXP 1
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 30
15960: PUSH
15961: LD_INT 26
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: PUSH
15977: LD_INT 0
15979: GREATER
15980: IFFALSE 16072
15982: GO 15984
15984: DISABLE
15985: LD_INT 0
15987: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_mine ] ] ) ;
15988: LD_ADDR_VAR 0 1
15992: PUSH
15993: LD_INT 22
15995: PUSH
15996: LD_EXP 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 30
16007: PUSH
16008: LD_INT 29
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PPUSH
16019: CALL_OW 69
16023: ST_TO_ADDR
// if pom > 0 then
16024: LD_VAR 0 1
16028: PUSH
16029: LD_INT 0
16031: GREATER
16032: IFFALSE 16071
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
16034: LD_VAR 0 1
16038: PUSH
16039: LD_INT 1
16041: ARRAY
16042: PPUSH
16043: CALL_OW 304
16047: PUSH
16048: LD_INT 0
16050: NONEQUAL
16051: IFFALSE 16062
// wait ( 0 0$1 ) ;
16053: LD_INT 35
16055: PPUSH
16056: CALL_OW 67
16060: GO 16034
// Hint ( PowerPlant ) ;
16062: LD_STRING PowerPlant
16064: PPUSH
16065: CALL_OW 339
// end else
16069: GO 16072
// enable ;
16071: ENABLE
// end ;
16072: PPOPN 1
16074: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ; var pocet ;
16075: LD_INT 22
16077: PUSH
16078: LD_EXP 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 30
16089: PUSH
16090: LD_INT 0
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 69
16105: PUSH
16106: LD_INT 1
16108: GREATER
16109: IFFALSE 16269
16111: GO 16113
16113: DISABLE
16114: LD_INT 0
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
// begin pocet = 0 ;
16120: LD_ADDR_VAR 0 4
16124: PUSH
16125: LD_INT 0
16127: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
16128: LD_ADDR_VAR 0 1
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_EXP 1
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 30
16147: PUSH
16148: LD_INT 0
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 69
16163: ST_TO_ADDR
// pom1 = pom ;
16164: LD_ADDR_VAR 0 2
16168: PUSH
16169: LD_VAR 0 1
16173: ST_TO_ADDR
// while pocet < 2 do
16174: LD_VAR 0 4
16178: PUSH
16179: LD_INT 2
16181: LESS
16182: IFFALSE 16262
// begin for i in pom do
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_VAR 0 1
16193: PUSH
16194: FOR_IN
16195: IFFALSE 16241
// if not IsConstructed ( i ) then
16197: LD_VAR 0 3
16201: PPUSH
16202: CALL_OW 304
16206: NOT
16207: IFFALSE 16239
// begin pocet = pocet + 1 ;
16209: LD_ADDR_VAR 0 4
16213: PUSH
16214: LD_VAR 0 4
16218: PUSH
16219: LD_INT 1
16221: PLUS
16222: ST_TO_ADDR
// pom1 = pom1 diff i ;
16223: LD_ADDR_VAR 0 2
16227: PUSH
16228: LD_VAR 0 2
16232: PUSH
16233: LD_VAR 0 3
16237: DIFF
16238: ST_TO_ADDR
// end ;
16239: GO 16194
16241: POP
16242: POP
// pom = pom1 ;
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_VAR 0 2
16252: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16253: LD_INT 70
16255: PPUSH
16256: CALL_OW 67
// end ;
16260: GO 16174
// Hint ( Transport1 ) ;
16262: LD_STRING Transport1
16264: PPUSH
16265: CALL_OW 339
// end ;
16269: PPOPN 4
16271: END
// export function chmo_6 ; begin
16272: LD_INT 0
16274: PPUSH
// ChangeMissionObjectives ( M6a ) ;
16275: LD_STRING M6a
16277: PPUSH
16278: CALL_OW 337
// end ;
16282: LD_VAR 0 1
16286: RET
// export function query_refuel ; begin
16287: LD_INT 0
16289: PPUSH
// Query ( QRefuel ) ;
16290: LD_STRING QRefuel
16292: PPUSH
16293: CALL_OW 97
// end ;
16297: LD_VAR 0 1
16301: RET
// every 0 0$6 do var pom ;
16302: GO 16304
16304: DISABLE
16305: LD_INT 0
16307: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
16308: LD_ADDR_VAR 0 1
16312: PUSH
16313: LD_INT 22
16315: PUSH
16316: LD_EXP 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 21
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 69
16343: ST_TO_ADDR
// if postavenych_aut >= pom then
16344: LD_EXP 47
16348: PUSH
16349: LD_VAR 0 1
16353: GREATEREQUAL
16354: IFFALSE 16365
// ChangeMissionObjectives ( M3a ) else
16356: LD_STRING M3a
16358: PPUSH
16359: CALL_OW 337
16363: GO 16366
// enable ;
16365: ENABLE
// end ;
16366: PPOPN 1
16368: END
// export function hint_cerpaci_auta ; begin
16369: LD_INT 0
16371: PPUSH
// Hint ( refuelingtrucks ) ;
16372: LD_STRING refuelingtrucks
16374: PPUSH
16375: CALL_OW 339
// end ; end_of_file
16379: LD_VAR 0 1
16383: RET
// export AMERICKA_POMOC_HLIDCE_LIST ; export AMERICKE_POSILY1_LIST ; export AMERICKE_POSILY2_LIST ; export AMERICKE_POSILY3_LIST ; export AMERICKE_POSILY4_LIST ; export AMERICKE_POSILY11_LIST ; export RUSKE_POSILY_NA_OMICRON_LIST ; export RUSKE_POSILY_RIDICI_LIST ; export RU_posily_na_utek ; export RUSI_CERPACI_AUTA_LIST ; export ARABI_KAMIKADZE_LIST ; export ARABI_PRVNI_VLNA ; export ARABI_FLAME_LIST ; export ARABI_SELF_AUTA ; export ARABI_VOJACI ; export ARABI_doraz ; export ARABI_KIROV_POSILY ; export Arabi_komanda1 ; export Arabi_komanda2 ; export Arabi_komanda3 ; export Arabi_komanda4 ; export other_survivors_mise_2 ; var ah , av ; export function get_sex ; begin
16384: LD_INT 0
16386: PPUSH
// if Prob ( 20 ) then
16387: LD_INT 20
16389: PPUSH
16390: CALL_OW 13
16394: IFFALSE 16406
// result = sex_female else
16396: LD_ADDR_VAR 0 1
16400: PUSH
16401: LD_INT 2
16403: ST_TO_ADDR
16404: GO 16414
// result = sex_male ;
16406: LD_ADDR_VAR 0 1
16410: PUSH
16411: LD_INT 1
16413: ST_TO_ADDR
// end ;
16414: LD_VAR 0 1
16418: RET
// export function get_human ( sex , clas , level , name ) ; begin
16419: LD_INT 0
16421: PPUSH
// PrepareHuman ( sex , clas , level ) ;
16422: LD_VAR 0 1
16426: PPUSH
16427: LD_VAR 0 2
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: CALL_OW 380
// hc_name := name ;
16441: LD_ADDR_OWVAR 26
16445: PUSH
16446: LD_VAR 0 4
16450: ST_TO_ADDR
// result := CreateHuman ;
16451: LD_ADDR_VAR 0 5
16455: PUSH
16456: CALL_OW 44
16460: ST_TO_ADDR
// end ;
16461: LD_VAR 0 5
16465: RET
// export function create_americka_pomoc_hlidce ; var pom ; begin
16466: LD_INT 0
16468: PPUSH
16469: PPUSH
// pom = [ ] ;
16470: LD_ADDR_VAR 0 2
16474: PUSH
16475: EMPTY
16476: ST_TO_ADDR
// uc_side = Amici ;
16477: LD_ADDR_OWVAR 20
16481: PUSH
16482: LD_EXP 4
16486: ST_TO_ADDR
// uc_nation = nation_american ;
16487: LD_ADDR_OWVAR 21
16491: PUSH
16492: LD_INT 1
16494: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
16495: LD_ADDR_LOC 23
16499: PUSH
16500: CALL 16384 0 0
16504: PPUSH
16505: LD_INT 3
16507: PPUSH
16508: LD_EXP 13
16512: PUSH
16513: LD_OWVAR 67
16517: ARRAY
16518: PPUSH
16519: LD_STRING 
16521: PPUSH
16522: CALL 16419 0 4
16526: ST_TO_ADDR
// case difficulty of 1 :
16527: LD_OWVAR 67
16531: PUSH
16532: LD_INT 1
16534: DOUBLE
16535: EQUAL
16536: IFTRUE 16540
16538: GO 16575
16540: POP
// begin vc_chassis = us_light_wheeled ;
16541: LD_ADDR_OWVAR 37
16545: PUSH
16546: LD_INT 1
16548: ST_TO_ADDR
// vc_control = control_manual ;
16549: LD_ADDR_OWVAR 38
16553: PUSH
16554: LD_INT 1
16556: ST_TO_ADDR
// vc_engine = engine_solar ;
16557: LD_ADDR_OWVAR 39
16561: PUSH
16562: LD_INT 2
16564: ST_TO_ADDR
// vc_weapon = us_light_gun ;
16565: LD_ADDR_OWVAR 40
16569: PUSH
16570: LD_INT 3
16572: ST_TO_ADDR
// end ; 2 :
16573: GO 16662
16575: LD_INT 2
16577: DOUBLE
16578: EQUAL
16579: IFTRUE 16583
16581: GO 16618
16583: POP
// begin vc_chassis = us_light_wheeled ;
16584: LD_ADDR_OWVAR 37
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// vc_control = control_manual ;
16592: LD_ADDR_OWVAR 38
16596: PUSH
16597: LD_INT 1
16599: ST_TO_ADDR
// vc_engine = engine_solar ;
16600: LD_ADDR_OWVAR 39
16604: PUSH
16605: LD_INT 2
16607: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
16608: LD_ADDR_OWVAR 40
16612: PUSH
16613: LD_INT 2
16615: ST_TO_ADDR
// end ; 3 :
16616: GO 16662
16618: LD_INT 3
16620: DOUBLE
16621: EQUAL
16622: IFTRUE 16626
16624: GO 16661
16626: POP
// begin vc_chassis = us_medium_wheeled ;
16627: LD_ADDR_OWVAR 37
16631: PUSH
16632: LD_INT 2
16634: ST_TO_ADDR
// vc_control = control_manual ;
16635: LD_ADDR_OWVAR 38
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
// vc_engine = engine_combustion ;
16643: LD_ADDR_OWVAR 39
16647: PUSH
16648: LD_INT 1
16650: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
16651: LD_ADDR_OWVAR 40
16655: PUSH
16656: LD_INT 4
16658: ST_TO_ADDR
// end ; end ;
16659: GO 16662
16661: POP
// av = CreateVehicle ;
16662: LD_ADDR_LOC 24
16666: PUSH
16667: CALL_OW 45
16671: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
16672: LD_LOC 23
16676: PPUSH
16677: LD_LOC 24
16681: PPUSH
16682: CALL_OW 52
// pom = pom ^ av ;
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: LD_VAR 0 2
16695: PUSH
16696: LD_LOC 24
16700: ADD
16701: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
16702: LD_ADDR_LOC 23
16706: PUSH
16707: CALL 16384 0 0
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: LD_EXP 13
16719: PUSH
16720: LD_OWVAR 67
16724: ARRAY
16725: PPUSH
16726: LD_STRING 
16728: PPUSH
16729: CALL 16419 0 4
16733: ST_TO_ADDR
// pom = pom ^ ah ;
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: LD_VAR 0 2
16743: PUSH
16744: LD_LOC 23
16748: ADD
16749: ST_TO_ADDR
// if pom > 2 then
16750: LD_VAR 0 2
16754: PUSH
16755: LD_INT 2
16757: GREATER
16758: IFFALSE 16804
// pom = pom ^ ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
16760: LD_ADDR_VAR 0 2
16764: PUSH
16765: LD_VAR 0 2
16769: PUSH
16770: LD_LOC 23
16774: ADD
16775: PUSH
16776: CALL 16384 0 0
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: LD_EXP 13
16788: PUSH
16789: LD_OWVAR 67
16793: ARRAY
16794: PPUSH
16795: LD_STRING 
16797: PPUSH
16798: CALL 16419 0 4
16802: EQUAL
16803: ST_TO_ADDR
// AMERICKA_POMOC_HLIDCE_LIST = pom ;
16804: LD_ADDR_EXP 50
16808: PUSH
16809: LD_VAR 0 2
16813: ST_TO_ADDR
// end ;
16814: LD_VAR 0 1
16818: RET
// export function set_skily_amikum ; var pom , i ; begin
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
16823: PPUSH
// pom = [ Am_sol1 , Am_sol2 , Am_sol3 , Am_sol4 , Am_vb1 , Am_vb2 , Am_vb3 , Am_vb4 ] ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 38
16831: PUSH
16832: LD_INT 39
16834: PUSH
16835: LD_INT 40
16837: PUSH
16838: LD_INT 41
16840: PUSH
16841: LD_INT 29
16843: PUSH
16844: LD_INT 30
16846: PUSH
16847: LD_INT 31
16849: PUSH
16850: LD_INT 32
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: ST_TO_ADDR
// for i in pom do
16863: LD_ADDR_VAR 0 3
16867: PUSH
16868: LD_VAR 0 2
16872: PUSH
16873: FOR_IN
16874: IFFALSE 16901
// uprav_cloveka ( i , class_soldier , levely_amici [ difficulty ] ) ;
16876: LD_VAR 0 3
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: LD_EXP 13
16888: PUSH
16889: LD_OWVAR 67
16893: ARRAY
16894: PPUSH
16895: CALL 17216 0 3
16899: GO 16873
16901: POP
16902: POP
// pom = [ Am_me1 , Am_me2 , Am_me3 ] ;
16903: LD_ADDR_VAR 0 2
16907: PUSH
16908: LD_INT 33
16910: PUSH
16911: LD_INT 34
16913: PUSH
16914: LD_INT 35
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: ST_TO_ADDR
// for i in pom do
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_VAR 0 2
16931: PUSH
16932: FOR_IN
16933: IFFALSE 16960
// uprav_cloveka ( i , class_mechanic , levely_amici [ difficulty ] ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 3
16942: PPUSH
16943: LD_EXP 13
16947: PUSH
16948: LD_OWVAR 67
16952: ARRAY
16953: PPUSH
16954: CALL 17216 0 3
16958: GO 16932
16960: POP
16961: POP
// uprav_cloveka ( Am_sci1 , class_scientistic , levely_amici [ difficulty ] ) ;
16962: LD_INT 37
16964: PPUSH
16965: LD_INT 4
16967: PPUSH
16968: LD_EXP 13
16972: PUSH
16973: LD_OWVAR 67
16977: ARRAY
16978: PPUSH
16979: CALL 17216 0 3
// uprav_cloveka ( Am_eng1 , class_engineer , levely_amici [ difficulty ] ) ;
16983: LD_INT 36
16985: PPUSH
16986: LD_INT 2
16988: PPUSH
16989: LD_EXP 13
16993: PUSH
16994: LD_OWVAR 67
16998: ARRAY
16999: PPUSH
17000: CALL 17216 0 3
// end ;
17004: LD_VAR 0 1
17008: RET
// function set_skills ( un , skills ) ; begin
17009: LD_INT 0
17011: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
17012: LD_VAR 0 1
17016: PPUSH
17017: LD_INT 1
17019: PPUSH
17020: LD_VAR 0 2
17024: PUSH
17025: LD_INT 1
17027: ARRAY
17028: PPUSH
17029: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
17033: LD_VAR 0 1
17037: PPUSH
17038: LD_INT 2
17040: PPUSH
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 2
17048: ARRAY
17049: PPUSH
17050: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_INT 3
17061: PPUSH
17062: LD_VAR 0 2
17066: PUSH
17067: LD_INT 3
17069: ARRAY
17070: PPUSH
17071: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: LD_INT 4
17082: PPUSH
17083: LD_VAR 0 2
17087: PUSH
17088: LD_INT 4
17090: ARRAY
17091: PPUSH
17092: CALL_OW 237
// end ;
17096: LD_VAR 0 3
17100: RET
// function get_skills ( un ) ; var pom3 , pom4 , pom5 , pom6 ; begin
17101: LD_INT 0
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
// pom3 := GetSkill ( un , skill_combat ) ;
17108: LD_ADDR_VAR 0 3
17112: PUSH
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_INT 1
17120: PPUSH
17121: CALL_OW 259
17125: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_engineering ) ;
17126: LD_ADDR_VAR 0 4
17130: PUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: LD_INT 2
17138: PPUSH
17139: CALL_OW 259
17143: ST_TO_ADDR
// pom5 := GetSkill ( un , skill_mechanical ) ;
17144: LD_ADDR_VAR 0 5
17148: PUSH
17149: LD_VAR 0 1
17153: PPUSH
17154: LD_INT 3
17156: PPUSH
17157: CALL_OW 259
17161: ST_TO_ADDR
// pom6 := GetSkill ( un , skill_scientistic ) ;
17162: LD_ADDR_VAR 0 6
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: LD_INT 4
17174: PPUSH
17175: CALL_OW 259
17179: ST_TO_ADDR
// result := [ pom3 , pom4 , pom5 , pom6 ] end ;
17180: LD_ADDR_VAR 0 2
17184: PUSH
17185: LD_VAR 0 3
17189: PUSH
17190: LD_VAR 0 4
17194: PUSH
17195: LD_VAR 0 5
17199: PUSH
17200: LD_VAR 0 6
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: ST_TO_ADDR
17211: LD_VAR 0 2
17215: RET
// function uprav_cloveka ( un , clas , lev ) ; var pom1 ; begin
17216: LD_INT 0
17218: PPUSH
17219: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
17220: LD_INT 1
17222: PPUSH
17223: LD_VAR 0 2
17227: PPUSH
17228: LD_VAR 0 3
17232: PPUSH
17233: LD_STRING 
17235: PPUSH
17236: CALL 17298 0 4
// ah = CreateHuman ;
17240: LD_ADDR_LOC 23
17244: PUSH
17245: CALL_OW 44
17249: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
17250: LD_ADDR_VAR 0 5
17254: PUSH
17255: LD_LOC 23
17259: PPUSH
17260: CALL 17101 0 1
17264: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
17265: LD_VAR 0 1
17269: PPUSH
17270: LD_LOC 23
17274: PPUSH
17275: CALL 17101 0 1
17279: PPUSH
17280: CALL 17009 0 2
// DestroyUnit ( ah ) ;
17284: LD_LOC 23
17288: PPUSH
17289: CALL_OW 65
// end ;
17293: LD_VAR 0 4
17297: RET
// function prepare_human ( sex , clas , level , name ) ; begin
17298: LD_INT 0
17300: PPUSH
// PrepareHuman ( sex , clas , level ) ;
17301: LD_VAR 0 1
17305: PPUSH
17306: LD_VAR 0 2
17310: PPUSH
17311: LD_VAR 0 3
17315: PPUSH
17316: CALL_OW 380
// hc_name := name ;
17320: LD_ADDR_OWVAR 26
17324: PUSH
17325: LD_VAR 0 4
17329: ST_TO_ADDR
// end ;
17330: LD_VAR 0 5
17334: RET
// export function create_americke_posily ; var pom ; begin
17335: LD_INT 0
17337: PPUSH
17338: PPUSH
// uc_side = Amici ;
17339: LD_ADDR_OWVAR 20
17343: PUSH
17344: LD_EXP 4
17348: ST_TO_ADDR
// uc_nation = nation_american ;
17349: LD_ADDR_OWVAR 21
17353: PUSH
17354: LD_INT 1
17356: ST_TO_ADDR
// pom = [ ] ;
17357: LD_ADDR_VAR 0 2
17361: PUSH
17362: EMPTY
17363: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_VAR 0 2
17373: PUSH
17374: CALL 16384 0 0
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: LD_EXP 13
17386: PUSH
17387: LD_OWVAR 67
17391: ARRAY
17392: PPUSH
17393: LD_STRING 
17395: PPUSH
17396: CALL 16419 0 4
17400: ADD
17401: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17402: LD_ADDR_VAR 0 2
17406: PUSH
17407: LD_VAR 0 2
17411: PUSH
17412: CALL 16384 0 0
17416: PPUSH
17417: LD_INT 1
17419: PPUSH
17420: LD_EXP 13
17424: PUSH
17425: LD_OWVAR 67
17429: ARRAY
17430: PPUSH
17431: LD_STRING 
17433: PPUSH
17434: CALL 16419 0 4
17438: ADD
17439: ST_TO_ADDR
// AMERICKE_POSILY1_LIST = pom ;
17440: LD_ADDR_EXP 51
17444: PUSH
17445: LD_VAR 0 2
17449: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17450: LD_ADDR_VAR 0 2
17454: PUSH
17455: CALL 16384 0 0
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: LD_EXP 13
17467: PUSH
17468: LD_OWVAR 67
17472: ARRAY
17473: PPUSH
17474: LD_STRING 
17476: PPUSH
17477: CALL 16419 0 4
17481: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17482: LD_ADDR_VAR 0 2
17486: PUSH
17487: LD_VAR 0 2
17491: PUSH
17492: CALL 16384 0 0
17496: PPUSH
17497: LD_INT 3
17499: PPUSH
17500: LD_EXP 13
17504: PUSH
17505: LD_OWVAR 67
17509: ARRAY
17510: PPUSH
17511: LD_STRING 
17513: PPUSH
17514: CALL 16419 0 4
17518: ADD
17519: ST_TO_ADDR
// if pom > 1 then
17520: LD_VAR 0 2
17524: PUSH
17525: LD_INT 1
17527: GREATER
17528: IFFALSE 17568
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
17530: LD_ADDR_VAR 0 2
17534: PUSH
17535: LD_VAR 0 2
17539: PUSH
17540: CALL 16384 0 0
17544: PPUSH
17545: LD_INT 4
17547: PPUSH
17548: LD_EXP 13
17552: PUSH
17553: LD_OWVAR 67
17557: ARRAY
17558: PPUSH
17559: LD_STRING 
17561: PPUSH
17562: CALL 16419 0 4
17566: ADD
17567: ST_TO_ADDR
// if pom > 2 then
17568: LD_VAR 0 2
17572: PUSH
17573: LD_INT 2
17575: GREATER
17576: IFFALSE 17616
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17578: LD_ADDR_VAR 0 2
17582: PUSH
17583: LD_VAR 0 2
17587: PUSH
17588: CALL 16384 0 0
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_EXP 13
17600: PUSH
17601: LD_OWVAR 67
17605: ARRAY
17606: PPUSH
17607: LD_STRING 
17609: PPUSH
17610: CALL 16419 0 4
17614: ADD
17615: ST_TO_ADDR
// AMERICKE_POSILY2_LIST = pom ;
17616: LD_ADDR_EXP 52
17620: PUSH
17621: LD_VAR 0 2
17625: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17626: LD_ADDR_VAR 0 2
17630: PUSH
17631: CALL 16384 0 0
17635: PPUSH
17636: LD_INT 1
17638: PPUSH
17639: LD_EXP 13
17643: PUSH
17644: LD_OWVAR 67
17648: ARRAY
17649: PPUSH
17650: LD_STRING 
17652: PPUSH
17653: CALL 16419 0 4
17657: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17658: LD_ADDR_VAR 0 2
17662: PUSH
17663: LD_VAR 0 2
17667: PUSH
17668: CALL 16384 0 0
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: LD_EXP 13
17680: PUSH
17681: LD_OWVAR 67
17685: ARRAY
17686: PPUSH
17687: LD_STRING 
17689: PPUSH
17690: CALL 16419 0 4
17694: ADD
17695: ST_TO_ADDR
// if pom = 1 then
17696: LD_VAR 0 2
17700: PUSH
17701: LD_INT 1
17703: EQUAL
17704: IFFALSE 17744
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_VAR 0 2
17715: PUSH
17716: CALL 16384 0 0
17720: PPUSH
17721: LD_INT 3
17723: PPUSH
17724: LD_EXP 13
17728: PUSH
17729: LD_OWVAR 67
17733: ARRAY
17734: PPUSH
17735: LD_STRING 
17737: PPUSH
17738: CALL 16419 0 4
17742: ADD
17743: ST_TO_ADDR
// if pom = 2 then
17744: LD_VAR 0 2
17748: PUSH
17749: LD_INT 2
17751: EQUAL
17752: IFFALSE 17858
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17754: LD_ADDR_LOC 23
17758: PUSH
17759: CALL 16384 0 0
17763: PPUSH
17764: LD_INT 3
17766: PPUSH
17767: LD_EXP 13
17771: PUSH
17772: LD_OWVAR 67
17776: ARRAY
17777: PPUSH
17778: LD_STRING 
17780: PPUSH
17781: CALL 16419 0 4
17785: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
17786: LD_ADDR_OWVAR 37
17790: PUSH
17791: LD_INT 1
17793: ST_TO_ADDR
// vc_control = control_manual ;
17794: LD_ADDR_OWVAR 38
17798: PUSH
17799: LD_INT 1
17801: ST_TO_ADDR
// vc_engine = engine_solar ;
17802: LD_ADDR_OWVAR 39
17806: PUSH
17807: LD_INT 2
17809: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
17810: LD_ADDR_OWVAR 40
17814: PUSH
17815: LD_INT 2
17817: ST_TO_ADDR
// av = CreateVehicle ;
17818: LD_ADDR_LOC 24
17822: PUSH
17823: CALL_OW 45
17827: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
17828: LD_LOC 23
17832: PPUSH
17833: LD_LOC 24
17837: PPUSH
17838: CALL_OW 52
// pom = pom ^ av ;
17842: LD_ADDR_VAR 0 2
17846: PUSH
17847: LD_VAR 0 2
17851: PUSH
17852: LD_LOC 24
17856: ADD
17857: ST_TO_ADDR
// end ; if pom = 3 then
17858: LD_VAR 0 2
17862: PUSH
17863: LD_INT 3
17865: EQUAL
17866: IFFALSE 17972
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17868: LD_ADDR_LOC 23
17872: PUSH
17873: CALL 16384 0 0
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_EXP 13
17885: PUSH
17886: LD_OWVAR 67
17890: ARRAY
17891: PPUSH
17892: LD_STRING 
17894: PPUSH
17895: CALL 16419 0 4
17899: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
17900: LD_ADDR_OWVAR 37
17904: PUSH
17905: LD_INT 2
17907: ST_TO_ADDR
// vc_control = control_manual ;
17908: LD_ADDR_OWVAR 38
17912: PUSH
17913: LD_INT 1
17915: ST_TO_ADDR
// vc_engine = engine_solar ;
17916: LD_ADDR_OWVAR 39
17920: PUSH
17921: LD_INT 2
17923: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
17924: LD_ADDR_OWVAR 40
17928: PUSH
17929: LD_INT 4
17931: ST_TO_ADDR
// av = CreateVehicle ;
17932: LD_ADDR_LOC 24
17936: PUSH
17937: CALL_OW 45
17941: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
17942: LD_LOC 23
17946: PPUSH
17947: LD_LOC 24
17951: PPUSH
17952: CALL_OW 52
// pom = pom ^ av ;
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_VAR 0 2
17965: PUSH
17966: LD_LOC 24
17970: ADD
17971: ST_TO_ADDR
// end ; AMERICKE_POSILY3_LIST = pom ;
17972: LD_ADDR_EXP 53
17976: PUSH
17977: LD_VAR 0 2
17981: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17982: LD_ADDR_VAR 0 2
17986: PUSH
17987: CALL 16384 0 0
17991: PPUSH
17992: LD_INT 1
17994: PPUSH
17995: LD_EXP 13
17999: PUSH
18000: LD_OWVAR 67
18004: ARRAY
18005: PPUSH
18006: LD_STRING 
18008: PPUSH
18009: CALL 16419 0 4
18013: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18014: LD_ADDR_VAR 0 2
18018: PUSH
18019: LD_VAR 0 2
18023: PUSH
18024: CALL 16384 0 0
18028: PPUSH
18029: LD_INT 1
18031: PPUSH
18032: LD_EXP 13
18036: PUSH
18037: LD_OWVAR 67
18041: ARRAY
18042: PPUSH
18043: LD_STRING 
18045: PPUSH
18046: CALL 16419 0 4
18050: ADD
18051: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18052: LD_ADDR_VAR 0 2
18056: PUSH
18057: LD_VAR 0 2
18061: PUSH
18062: CALL 16384 0 0
18066: PPUSH
18067: LD_INT 1
18069: PPUSH
18070: LD_EXP 13
18074: PUSH
18075: LD_OWVAR 67
18079: ARRAY
18080: PUSH
18081: LD_INT 1
18083: MINUS
18084: PPUSH
18085: LD_STRING 
18087: PPUSH
18088: CALL 16419 0 4
18092: ADD
18093: ST_TO_ADDR
// AMERICKE_POSILY4_LIST = pom ;
18094: LD_ADDR_EXP 54
18098: PUSH
18099: LD_VAR 0 2
18103: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18104: LD_ADDR_VAR 0 2
18108: PUSH
18109: CALL 16384 0 0
18113: PPUSH
18114: LD_INT 1
18116: PPUSH
18117: LD_EXP 13
18121: PUSH
18122: LD_OWVAR 67
18126: ARRAY
18127: PPUSH
18128: LD_STRING 
18130: PPUSH
18131: CALL 16419 0 4
18135: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18136: LD_ADDR_VAR 0 2
18140: PUSH
18141: LD_VAR 0 2
18145: PUSH
18146: CALL 16384 0 0
18150: PPUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_EXP 13
18158: PUSH
18159: LD_OWVAR 67
18163: ARRAY
18164: PUSH
18165: LD_INT 1
18167: MINUS
18168: PPUSH
18169: LD_STRING 
18171: PPUSH
18172: CALL 16419 0 4
18176: ADD
18177: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18178: LD_ADDR_VAR 0 2
18182: PUSH
18183: LD_VAR 0 2
18187: PUSH
18188: CALL 16384 0 0
18192: PPUSH
18193: LD_INT 1
18195: PPUSH
18196: LD_EXP 13
18200: PUSH
18201: LD_OWVAR 67
18205: ARRAY
18206: PUSH
18207: LD_INT 1
18209: MINUS
18210: PPUSH
18211: LD_STRING 
18213: PPUSH
18214: CALL 16419 0 4
18218: ADD
18219: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] - 1 ,  ) ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_VAR 0 2
18229: PUSH
18230: CALL 16384 0 0
18234: PPUSH
18235: LD_INT 4
18237: PPUSH
18238: LD_EXP 13
18242: PUSH
18243: LD_OWVAR 67
18247: ARRAY
18248: PUSH
18249: LD_INT 1
18251: MINUS
18252: PPUSH
18253: LD_STRING 
18255: PPUSH
18256: CALL 16419 0 4
18260: ADD
18261: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18262: LD_ADDR_LOC 23
18266: PUSH
18267: CALL 16384 0 0
18271: PPUSH
18272: LD_INT 3
18274: PPUSH
18275: LD_EXP 13
18279: PUSH
18280: LD_OWVAR 67
18284: ARRAY
18285: PPUSH
18286: LD_STRING 
18288: PPUSH
18289: CALL 16419 0 4
18293: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
18294: LD_ADDR_OWVAR 37
18298: PUSH
18299: LD_INT 3
18301: ST_TO_ADDR
// vc_control = control_manual ;
18302: LD_ADDR_OWVAR 38
18306: PUSH
18307: LD_INT 1
18309: ST_TO_ADDR
// vc_engine = engine_combustion ;
18310: LD_ADDR_OWVAR 39
18314: PUSH
18315: LD_INT 1
18317: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18318: LD_ADDR_OWVAR 40
18322: PUSH
18323: LD_INT 2
18325: ST_TO_ADDR
// av = CreateVehicle ;
18326: LD_ADDR_LOC 24
18330: PUSH
18331: CALL_OW 45
18335: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18336: LD_LOC 23
18340: PPUSH
18341: LD_LOC 24
18345: PPUSH
18346: CALL_OW 52
// pom = pom ^ av ;
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: LD_VAR 0 2
18359: PUSH
18360: LD_LOC 24
18364: ADD
18365: ST_TO_ADDR
// AMERICKE_POSILY11_LIST = pom ;
18366: LD_ADDR_EXP 55
18370: PUSH
18371: LD_VAR 0 2
18375: ST_TO_ADDR
// end ;
18376: LD_VAR 0 1
18380: RET
// export function create_kecajici_amik ; var pom ; begin
18381: LD_INT 0
18383: PPUSH
18384: PPUSH
// uc_side = Amici ;
18385: LD_ADDR_OWVAR 20
18389: PUSH
18390: LD_EXP 4
18394: ST_TO_ADDR
// uc_nation = nation_american ;
18395: LD_ADDR_OWVAR 21
18399: PUSH
18400: LD_INT 1
18402: ST_TO_ADDR
// pom = get_human ( sex_male , class_soldier , 4 , Mike Damme ) ;
18403: LD_ADDR_VAR 0 2
18407: PUSH
18408: LD_INT 1
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: LD_INT 4
18416: PPUSH
18417: LD_STRING Mike Damme
18419: PPUSH
18420: CALL 16419 0 4
18424: ST_TO_ADDR
// result := pom ;
18425: LD_ADDR_VAR 0 1
18429: PUSH
18430: LD_VAR 0 2
18434: ST_TO_ADDR
// end ;
18435: LD_VAR 0 1
18439: RET
// export function create_grishko ; var pom ; begin
18440: LD_INT 0
18442: PPUSH
18443: PPUSH
// pom = grishko ;
18444: LD_ADDR_VAR 0 2
18448: PUSH
18449: LD_EXP 35
18453: ST_TO_ADDR
// if pom = 0 then
18454: LD_VAR 0 2
18458: PUSH
18459: LD_INT 0
18461: EQUAL
18462: IFFALSE 18486
// pom = get_human ( sex_male , class_soldier , 4 , Piotr Grishko ) ;
18464: LD_ADDR_VAR 0 2
18468: PUSH
18469: LD_INT 1
18471: PPUSH
18472: LD_INT 1
18474: PPUSH
18475: LD_INT 4
18477: PPUSH
18478: LD_STRING Piotr Grishko
18480: PPUSH
18481: CALL 16419 0 4
18485: ST_TO_ADDR
// if pom > 0 then
18486: LD_VAR 0 2
18490: PUSH
18491: LD_INT 0
18493: GREATER
18494: IFFALSE 18530
// begin SetSide ( pom [ 1 ] , You2 ) ;
18496: LD_VAR 0 2
18500: PUSH
18501: LD_INT 1
18503: ARRAY
18504: PPUSH
18505: LD_EXP 2
18509: PPUSH
18510: CALL_OW 235
// result = pom [ 1 ] ;
18514: LD_ADDR_VAR 0 1
18518: PUSH
18519: LD_VAR 0 2
18523: PUSH
18524: LD_INT 1
18526: ARRAY
18527: ST_TO_ADDR
// end else
18528: GO 18537
// msg ( ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril ) ;
18530: LD_STRING ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril
18532: PPUSH
18533: CALL_OW 100
// end ;
18537: LD_VAR 0 1
18541: RET
// export function create_arabsky_utok ; var pom , i ; begin
18542: LD_INT 0
18544: PPUSH
18545: PPUSH
18546: PPUSH
// pom = FilterUnitsInArea ( Ar_jedn , [ [ f_side , Arabi ] , [ f_class , class_apeman_kamikaze ] ] ) ;
18547: LD_ADDR_VAR 0 2
18551: PUSH
18552: LD_INT 9
18554: PPUSH
18555: LD_INT 22
18557: PUSH
18558: LD_EXP 5
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 25
18569: PUSH
18570: LD_INT 17
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 70
18585: ST_TO_ADDR
// ARABI_KAMIKADZE_LIST = pom ;
18586: LD_ADDR_EXP 60
18590: PUSH
18591: LD_VAR 0 2
18595: ST_TO_ADDR
// for i in pom do
18596: LD_ADDR_VAR 0 3
18600: PUSH
18601: LD_VAR 0 2
18605: PUSH
18606: FOR_IN
18607: IFFALSE 18620
// RemoveUnit ( i ) ;
18609: LD_VAR 0 3
18613: PPUSH
18614: CALL_OW 64
18618: GO 18606
18620: POP
18621: POP
// pom = [ ] ;
18622: LD_ADDR_VAR 0 2
18626: PUSH
18627: EMPTY
18628: ST_TO_ADDR
// uc_side = Arabi ;
18629: LD_ADDR_OWVAR 20
18633: PUSH
18634: LD_EXP 5
18638: ST_TO_ADDR
// uc_nation = nation_arabian ;
18639: LD_ADDR_OWVAR 21
18643: PUSH
18644: LD_INT 2
18646: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18647: LD_ADDR_LOC 23
18651: PUSH
18652: CALL 16384 0 0
18656: PPUSH
18657: LD_INT 3
18659: PPUSH
18660: LD_INT 9
18662: PPUSH
18663: LD_STRING 
18665: PPUSH
18666: CALL 16419 0 4
18670: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
18671: LD_ADDR_OWVAR 37
18675: PUSH
18676: LD_INT 14
18678: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
18679: LD_ADDR_OWVAR 40
18683: PUSH
18684: LD_INT 26
18686: ST_TO_ADDR
// vc_control = control_manual ;
18687: LD_ADDR_OWVAR 38
18691: PUSH
18692: LD_INT 1
18694: ST_TO_ADDR
// vc_engine = engine_combustion ;
18695: LD_ADDR_OWVAR 39
18699: PUSH
18700: LD_INT 1
18702: ST_TO_ADDR
// av = CreateVehicle ;
18703: LD_ADDR_LOC 24
18707: PUSH
18708: CALL_OW 45
18712: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18713: LD_LOC 23
18717: PPUSH
18718: LD_LOC 24
18722: PPUSH
18723: CALL_OW 52
// pom = pom ^ av ;
18727: LD_ADDR_VAR 0 2
18731: PUSH
18732: LD_VAR 0 2
18736: PUSH
18737: LD_LOC 24
18741: ADD
18742: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18743: LD_ADDR_LOC 23
18747: PUSH
18748: CALL 16384 0 0
18752: PPUSH
18753: LD_INT 3
18755: PPUSH
18756: LD_INT 9
18758: PPUSH
18759: LD_STRING 
18761: PPUSH
18762: CALL 16419 0 4
18766: ST_TO_ADDR
// av = CreateVehicle ;
18767: LD_ADDR_LOC 24
18771: PUSH
18772: CALL_OW 45
18776: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18777: LD_LOC 23
18781: PPUSH
18782: LD_LOC 24
18786: PPUSH
18787: CALL_OW 52
// pom = pom ^ av ;
18791: LD_ADDR_VAR 0 2
18795: PUSH
18796: LD_VAR 0 2
18800: PUSH
18801: LD_LOC 24
18805: ADD
18806: ST_TO_ADDR
// ARABI_FLAME_LIST = pom ;
18807: LD_ADDR_EXP 62
18811: PUSH
18812: LD_VAR 0 2
18816: ST_TO_ADDR
// pom = [ ] ;
18817: LD_ADDR_VAR 0 2
18821: PUSH
18822: EMPTY
18823: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18824: LD_ADDR_LOC 23
18828: PUSH
18829: CALL 16384 0 0
18833: PPUSH
18834: LD_INT 3
18836: PPUSH
18837: LD_INT 9
18839: PPUSH
18840: LD_STRING 
18842: PPUSH
18843: CALL 16419 0 4
18847: ST_TO_ADDR
// vc_weapon = ar_gun ;
18848: LD_ADDR_OWVAR 40
18852: PUSH
18853: LD_INT 27
18855: ST_TO_ADDR
// av = CreateVehicle ;
18856: LD_ADDR_LOC 24
18860: PUSH
18861: CALL_OW 45
18865: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18866: LD_LOC 23
18870: PPUSH
18871: LD_LOC 24
18875: PPUSH
18876: CALL_OW 52
// pom = av ;
18880: LD_ADDR_VAR 0 2
18884: PUSH
18885: LD_LOC 24
18889: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18890: LD_ADDR_LOC 23
18894: PUSH
18895: CALL 16384 0 0
18899: PPUSH
18900: LD_INT 3
18902: PPUSH
18903: LD_INT 9
18905: PPUSH
18906: LD_STRING 
18908: PPUSH
18909: CALL 16419 0 4
18913: ST_TO_ADDR
// av = CreateVehicle ;
18914: LD_ADDR_LOC 24
18918: PUSH
18919: CALL_OW 45
18923: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18924: LD_LOC 23
18928: PPUSH
18929: LD_LOC 24
18933: PPUSH
18934: CALL_OW 52
// pom = pom ^ av ;
18938: LD_ADDR_VAR 0 2
18942: PUSH
18943: LD_VAR 0 2
18947: PUSH
18948: LD_LOC 24
18952: ADD
18953: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
18954: LD_ADDR_LOC 23
18958: PUSH
18959: CALL 16384 0 0
18963: PPUSH
18964: LD_INT 3
18966: PPUSH
18967: LD_INT 9
18969: PPUSH
18970: LD_STRING 
18972: PPUSH
18973: CALL 16419 0 4
18977: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
18978: LD_ADDR_OWVAR 40
18982: PUSH
18983: LD_INT 25
18985: ST_TO_ADDR
// av = CreateVehicle ;
18986: LD_ADDR_LOC 24
18990: PUSH
18991: CALL_OW 45
18995: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18996: LD_LOC 23
19000: PPUSH
19001: LD_LOC 24
19005: PPUSH
19006: CALL_OW 52
// pom = pom ^ av ;
19010: LD_ADDR_VAR 0 2
19014: PUSH
19015: LD_VAR 0 2
19019: PUSH
19020: LD_LOC 24
19024: ADD
19025: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19026: LD_ADDR_LOC 23
19030: PUSH
19031: CALL 16384 0 0
19035: PPUSH
19036: LD_INT 3
19038: PPUSH
19039: LD_INT 9
19041: PPUSH
19042: LD_STRING 
19044: PPUSH
19045: CALL 16419 0 4
19049: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19050: LD_ADDR_OWVAR 40
19054: PUSH
19055: LD_INT 28
19057: ST_TO_ADDR
// av = CreateVehicle ;
19058: LD_ADDR_LOC 24
19062: PUSH
19063: CALL_OW 45
19067: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19068: LD_LOC 23
19072: PPUSH
19073: LD_LOC 24
19077: PPUSH
19078: CALL_OW 52
// pom = pom ^ av ;
19082: LD_ADDR_VAR 0 2
19086: PUSH
19087: LD_VAR 0 2
19091: PUSH
19092: LD_LOC 24
19096: ADD
19097: ST_TO_ADDR
// ARABI_PRVNI_VLNA = pom ;
19098: LD_ADDR_EXP 61
19102: PUSH
19103: LD_VAR 0 2
19107: ST_TO_ADDR
// pom = [ ] ;
19108: LD_ADDR_VAR 0 2
19112: PUSH
19113: EMPTY
19114: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
19115: LD_ADDR_OWVAR 40
19119: PUSH
19120: LD_INT 29
19122: ST_TO_ADDR
// vc_control = control_apeman ;
19123: LD_ADDR_OWVAR 38
19127: PUSH
19128: LD_INT 5
19130: ST_TO_ADDR
// ah = CreateVehicle ;
19131: LD_ADDR_LOC 23
19135: PUSH
19136: CALL_OW 45
19140: ST_TO_ADDR
// pom = ah ;
19141: LD_ADDR_VAR 0 2
19145: PUSH
19146: LD_LOC 23
19150: ST_TO_ADDR
// pom = pom ^ CreateVehicle ;
19151: LD_ADDR_VAR 0 2
19155: PUSH
19156: LD_VAR 0 2
19160: PUSH
19161: CALL_OW 45
19165: ADD
19166: ST_TO_ADDR
// ARABI_SELF_AUTA = pom ;
19167: LD_ADDR_EXP 63
19171: PUSH
19172: LD_VAR 0 2
19176: ST_TO_ADDR
// pom = [ ] ;
19177: LD_ADDR_VAR 0 2
19181: PUSH
19182: EMPTY
19183: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 9 ,  ) ;
19184: LD_ADDR_VAR 0 2
19188: PUSH
19189: CALL 16384 0 0
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: LD_INT 9
19199: PPUSH
19200: LD_STRING 
19202: PPUSH
19203: CALL 16419 0 4
19207: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19208: LD_ADDR_VAR 0 2
19212: PUSH
19213: LD_VAR 0 2
19217: PUSH
19218: CALL 16384 0 0
19222: PPUSH
19223: LD_INT 1
19225: PPUSH
19226: LD_INT 9
19228: PPUSH
19229: LD_STRING 
19231: PPUSH
19232: CALL 16419 0 4
19236: ADD
19237: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19238: LD_ADDR_VAR 0 2
19242: PUSH
19243: LD_VAR 0 2
19247: PUSH
19248: CALL 16384 0 0
19252: PPUSH
19253: LD_INT 1
19255: PPUSH
19256: LD_INT 9
19258: PPUSH
19259: LD_STRING 
19261: PPUSH
19262: CALL 16419 0 4
19266: ADD
19267: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19268: LD_ADDR_VAR 0 2
19272: PUSH
19273: LD_VAR 0 2
19277: PUSH
19278: CALL 16384 0 0
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: LD_INT 9
19288: PPUSH
19289: LD_STRING 
19291: PPUSH
19292: CALL 16419 0 4
19296: ADD
19297: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19298: LD_ADDR_VAR 0 2
19302: PUSH
19303: LD_VAR 0 2
19307: PUSH
19308: CALL 16384 0 0
19312: PPUSH
19313: LD_INT 8
19315: PPUSH
19316: LD_INT 9
19318: PPUSH
19319: LD_STRING 
19321: PPUSH
19322: CALL 16419 0 4
19326: ADD
19327: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19328: LD_ADDR_VAR 0 2
19332: PUSH
19333: LD_VAR 0 2
19337: PUSH
19338: CALL 16384 0 0
19342: PPUSH
19343: LD_INT 8
19345: PPUSH
19346: LD_INT 9
19348: PPUSH
19349: LD_STRING 
19351: PPUSH
19352: CALL 16419 0 4
19356: ADD
19357: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19358: LD_ADDR_VAR 0 2
19362: PUSH
19363: LD_VAR 0 2
19367: PUSH
19368: CALL 16384 0 0
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: LD_INT 9
19378: PPUSH
19379: LD_STRING 
19381: PPUSH
19382: CALL 16419 0 4
19386: ADD
19387: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19388: LD_ADDR_VAR 0 2
19392: PUSH
19393: LD_VAR 0 2
19397: PUSH
19398: CALL 16384 0 0
19402: PPUSH
19403: LD_INT 8
19405: PPUSH
19406: LD_INT 9
19408: PPUSH
19409: LD_STRING 
19411: PPUSH
19412: CALL 16419 0 4
19416: ADD
19417: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19418: LD_ADDR_VAR 0 2
19422: PUSH
19423: LD_VAR 0 2
19427: PUSH
19428: CALL 16384 0 0
19432: PPUSH
19433: LD_INT 8
19435: PPUSH
19436: LD_INT 9
19438: PPUSH
19439: LD_STRING 
19441: PPUSH
19442: CALL 16419 0 4
19446: ADD
19447: ST_TO_ADDR
// ARABI_VOJACI = pom ;
19448: LD_ADDR_EXP 64
19452: PUSH
19453: LD_VAR 0 2
19457: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19458: LD_ADDR_OWVAR 40
19462: PUSH
19463: LD_INT 28
19465: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19466: LD_ADDR_OWVAR 37
19470: PUSH
19471: LD_INT 14
19473: ST_TO_ADDR
// vc_control = control_manual ;
19474: LD_ADDR_OWVAR 38
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// vc_engine = engine_siberite ;
19482: LD_ADDR_OWVAR 39
19486: PUSH
19487: LD_INT 3
19489: ST_TO_ADDR
// av = CreateVehicle ;
19490: LD_ADDR_LOC 24
19494: PUSH
19495: CALL_OW 45
19499: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19500: LD_ADDR_LOC 23
19504: PUSH
19505: CALL 16384 0 0
19509: PPUSH
19510: LD_INT 3
19512: PPUSH
19513: LD_INT 9
19515: PPUSH
19516: LD_STRING 
19518: PPUSH
19519: CALL 16419 0 4
19523: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19524: LD_LOC 23
19528: PPUSH
19529: LD_LOC 24
19533: PPUSH
19534: CALL_OW 52
// pom = av ;
19538: LD_ADDR_VAR 0 2
19542: PUSH
19543: LD_LOC 24
19547: ST_TO_ADDR
// av = CreateVehicle ;
19548: LD_ADDR_LOC 24
19552: PUSH
19553: CALL_OW 45
19557: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19558: LD_ADDR_LOC 23
19562: PUSH
19563: CALL 16384 0 0
19567: PPUSH
19568: LD_INT 3
19570: PPUSH
19571: LD_INT 8
19573: PPUSH
19574: LD_STRING 
19576: PPUSH
19577: CALL 16419 0 4
19581: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19582: LD_LOC 23
19586: PPUSH
19587: LD_LOC 24
19591: PPUSH
19592: CALL_OW 52
// pom = pom ^ av ;
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: LD_VAR 0 2
19605: PUSH
19606: LD_LOC 24
19610: ADD
19611: ST_TO_ADDR
// av = CreateVehicle ;
19612: LD_ADDR_LOC 24
19616: PUSH
19617: CALL_OW 45
19621: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
19622: LD_ADDR_LOC 23
19626: PUSH
19627: CALL 16384 0 0
19631: PPUSH
19632: LD_INT 3
19634: PPUSH
19635: LD_INT 8
19637: PPUSH
19638: LD_STRING 
19640: PPUSH
19641: CALL 16419 0 4
19645: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19646: LD_LOC 23
19650: PPUSH
19651: LD_LOC 24
19655: PPUSH
19656: CALL_OW 52
// pom = pom ^ av ;
19660: LD_ADDR_VAR 0 2
19664: PUSH
19665: LD_VAR 0 2
19669: PUSH
19670: LD_LOC 24
19674: ADD
19675: ST_TO_ADDR
// ARABI_doraz = pom ;
19676: LD_ADDR_EXP 65
19680: PUSH
19681: LD_VAR 0 2
19685: ST_TO_ADDR
// end ;
19686: LD_VAR 0 1
19690: RET
// export function create_ruske_posily_na_omicron ; var pom ; begin
19691: LD_INT 0
19693: PPUSH
19694: PPUSH
// pom = [ ] ;
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: EMPTY
19701: ST_TO_ADDR
// uc_side = You2 ;
19702: LD_ADDR_OWVAR 20
19706: PUSH
19707: LD_EXP 2
19711: ST_TO_ADDR
// uc_nation = nation_russian ;
19712: LD_ADDR_OWVAR 21
19716: PUSH
19717: LD_INT 3
19719: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
19720: LD_ADDR_OWVAR 37
19724: PUSH
19725: LD_INT 23
19727: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
19728: LD_ADDR_OWVAR 40
19732: PUSH
19733: LD_INT 43
19735: ST_TO_ADDR
// vc_control = control_manual ;
19736: LD_ADDR_OWVAR 38
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// vc_engine = engine_combustion ;
19744: LD_ADDR_OWVAR 39
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
19752: LD_ADDR_LOC 23
19756: PUSH
19757: CALL 16384 0 0
19761: PPUSH
19762: LD_INT 3
19764: PPUSH
19765: LD_EXP 20
19769: PUSH
19770: LD_OWVAR 67
19774: ARRAY
19775: PPUSH
19776: LD_STRING 
19778: PPUSH
19779: CALL 16419 0 4
19783: ST_TO_ADDR
// av = CreateVehicle ;
19784: LD_ADDR_LOC 24
19788: PUSH
19789: CALL_OW 45
19793: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19794: LD_LOC 23
19798: PPUSH
19799: LD_LOC 24
19803: PPUSH
19804: CALL_OW 52
// pom = pom ^ av ;
19808: LD_ADDR_VAR 0 2
19812: PUSH
19813: LD_VAR 0 2
19817: PUSH
19818: LD_LOC 24
19822: ADD
19823: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] + 1 ,  ) ;
19824: LD_ADDR_LOC 23
19828: PUSH
19829: CALL 16384 0 0
19833: PPUSH
19834: LD_INT 3
19836: PPUSH
19837: LD_EXP 20
19841: PUSH
19842: LD_OWVAR 67
19846: ARRAY
19847: PUSH
19848: LD_INT 1
19850: PLUS
19851: PPUSH
19852: LD_STRING 
19854: PPUSH
19855: CALL 16419 0 4
19859: ST_TO_ADDR
// av = CreateVehicle ;
19860: LD_ADDR_LOC 24
19864: PUSH
19865: CALL_OW 45
19869: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19870: LD_LOC 23
19874: PPUSH
19875: LD_LOC 24
19879: PPUSH
19880: CALL_OW 52
// pom = pom ^ av ;
19884: LD_ADDR_VAR 0 2
19888: PUSH
19889: LD_VAR 0 2
19893: PUSH
19894: LD_LOC 24
19898: ADD
19899: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
19900: LD_ADDR_LOC 23
19904: PUSH
19905: CALL 16384 0 0
19909: PPUSH
19910: LD_INT 3
19912: PPUSH
19913: LD_EXP 20
19917: PUSH
19918: LD_OWVAR 67
19922: ARRAY
19923: PPUSH
19924: LD_STRING 
19926: PPUSH
19927: CALL 16419 0 4
19931: ST_TO_ADDR
// vc_weapon = ru_gun ;
19932: LD_ADDR_OWVAR 40
19936: PUSH
19937: LD_INT 44
19939: ST_TO_ADDR
// av = CreateVehicle ;
19940: LD_ADDR_LOC 24
19944: PUSH
19945: CALL_OW 45
19949: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19950: LD_LOC 23
19954: PPUSH
19955: LD_LOC 24
19959: PPUSH
19960: CALL_OW 52
// pom = pom ^ av ;
19964: LD_ADDR_VAR 0 2
19968: PUSH
19969: LD_VAR 0 2
19973: PUSH
19974: LD_LOC 24
19978: ADD
19979: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] - 1 ,  ) ;
19980: LD_ADDR_LOC 23
19984: PUSH
19985: CALL 16384 0 0
19989: PPUSH
19990: LD_INT 3
19992: PPUSH
19993: LD_EXP 20
19997: PUSH
19998: LD_OWVAR 67
20002: ARRAY
20003: PUSH
20004: LD_INT 1
20006: MINUS
20007: PPUSH
20008: LD_STRING 
20010: PPUSH
20011: CALL 16419 0 4
20015: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
20016: LD_ADDR_OWVAR 37
20020: PUSH
20021: LD_INT 22
20023: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
20024: LD_ADDR_OWVAR 40
20028: PUSH
20029: LD_INT 42
20031: ST_TO_ADDR
// av = CreateVehicle ;
20032: LD_ADDR_LOC 24
20036: PUSH
20037: CALL_OW 45
20041: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20042: LD_LOC 23
20046: PPUSH
20047: LD_LOC 24
20051: PPUSH
20052: CALL_OW 52
// pom = pom ^ av ;
20056: LD_ADDR_VAR 0 2
20060: PUSH
20061: LD_VAR 0 2
20065: PUSH
20066: LD_LOC 24
20070: ADD
20071: ST_TO_ADDR
// RUSKE_POSILY_NA_OMICRON_LIST = pom ;
20072: LD_ADDR_EXP 56
20076: PUSH
20077: LD_VAR 0 2
20081: ST_TO_ADDR
// pom = [ ] ;
20082: LD_ADDR_VAR 0 2
20086: PUSH
20087: EMPTY
20088: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20089: LD_ADDR_LOC 23
20093: PUSH
20094: CALL 16384 0 0
20098: PPUSH
20099: LD_INT 3
20101: PPUSH
20102: LD_EXP 20
20106: PUSH
20107: LD_OWVAR 67
20111: ARRAY
20112: PPUSH
20113: LD_STRING 
20115: PPUSH
20116: CALL 16419 0 4
20120: ST_TO_ADDR
// pom = pom ^ ah ;
20121: LD_ADDR_VAR 0 2
20125: PUSH
20126: LD_VAR 0 2
20130: PUSH
20131: LD_LOC 23
20135: ADD
20136: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20137: LD_ADDR_LOC 23
20141: PUSH
20142: CALL 16384 0 0
20146: PPUSH
20147: LD_INT 3
20149: PPUSH
20150: LD_EXP 20
20154: PUSH
20155: LD_OWVAR 67
20159: ARRAY
20160: PPUSH
20161: LD_STRING 
20163: PPUSH
20164: CALL 16419 0 4
20168: ST_TO_ADDR
// pom = pom ^ ah ;
20169: LD_ADDR_VAR 0 2
20173: PUSH
20174: LD_VAR 0 2
20178: PUSH
20179: LD_LOC 23
20183: ADD
20184: ST_TO_ADDR
// RUSKE_POSILY_RIDICI_LIST = pom ;
20185: LD_ADDR_EXP 57
20189: PUSH
20190: LD_VAR 0 2
20194: ST_TO_ADDR
// end ;
20195: LD_VAR 0 1
20199: RET
// export function create_dalsi_ridici ( auta ) ; var i , pom ; var poc ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
20204: PPUSH
20205: PPUSH
// uc_side = You2 ;
20206: LD_ADDR_OWVAR 20
20210: PUSH
20211: LD_EXP 2
20215: ST_TO_ADDR
// uc_nation = nation_russian ;
20216: LD_ADDR_OWVAR 21
20220: PUSH
20221: LD_INT 3
20223: ST_TO_ADDR
// pom = [ ] ;
20224: LD_ADDR_VAR 0 4
20228: PUSH
20229: EMPTY
20230: ST_TO_ADDR
// poc = 0 ;
20231: LD_ADDR_VAR 0 5
20235: PUSH
20236: LD_INT 0
20238: ST_TO_ADDR
// for i in auta do
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: LD_VAR 0 1
20248: PUSH
20249: FOR_IN
20250: IFFALSE 20316
// begin poc = poc + 1 ;
20252: LD_ADDR_VAR 0 5
20256: PUSH
20257: LD_VAR 0 5
20261: PUSH
20262: LD_INT 1
20264: PLUS
20265: ST_TO_ADDR
// if poc < 3 then
20266: LD_VAR 0 5
20270: PUSH
20271: LD_INT 3
20273: LESS
20274: IFFALSE 20314
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20276: LD_ADDR_VAR 0 4
20280: PUSH
20281: LD_VAR 0 4
20285: PUSH
20286: CALL 16384 0 0
20290: PPUSH
20291: LD_INT 3
20293: PPUSH
20294: LD_EXP 20
20298: PUSH
20299: LD_OWVAR 67
20303: ARRAY
20304: PPUSH
20305: LD_STRING 
20307: PPUSH
20308: CALL 16419 0 4
20312: ADD
20313: ST_TO_ADDR
// end ;
20314: GO 20249
20316: POP
20317: POP
// result := pom ;
20318: LD_ADDR_VAR 0 2
20322: PUSH
20323: LD_VAR 0 4
20327: ST_TO_ADDR
// end ;
20328: LD_VAR 0 2
20332: RET
// export function create_am_jednotky ; begin
20333: LD_INT 0
20335: PPUSH
// SetSide ( kur , You2 ) ;
20336: LD_EXP 27
20340: PPUSH
20341: LD_EXP 2
20345: PPUSH
20346: CALL_OW 235
// PlaceUnitXY ( kur , 149 , 79 , false ) ;
20350: LD_EXP 27
20354: PPUSH
20355: LD_INT 149
20357: PPUSH
20358: LD_INT 79
20360: PPUSH
20361: LD_INT 0
20363: PPUSH
20364: CALL_OW 48
// if BELKOV_SAVED then
20368: LD_EXP 24
20372: IFFALSE 20418
// begin SetSide ( bel , You2 ) ;
20374: LD_EXP 32
20378: PPUSH
20379: LD_EXP 2
20383: PPUSH
20384: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
20388: LD_EXP 32
20392: PPUSH
20393: LD_INT 1
20395: PPUSH
20396: CALL_OW 336
// PlaceUnitXY ( bel , 141 , 80 , false ) ;
20400: LD_EXP 32
20404: PPUSH
20405: LD_INT 141
20407: PPUSH
20408: LD_INT 80
20410: PPUSH
20411: LD_INT 0
20413: PPUSH
20414: CALL_OW 48
// end ; if kov <> 0 then
20418: LD_EXP 30
20422: PUSH
20423: LD_INT 0
20425: NONEQUAL
20426: IFFALSE 20472
// begin SetSide ( kov , You ) ;
20428: LD_EXP 30
20432: PPUSH
20433: LD_EXP 1
20437: PPUSH
20438: CALL_OW 235
// SetClass ( kov , class_soldier ) ;
20442: LD_EXP 30
20446: PPUSH
20447: LD_INT 1
20449: PPUSH
20450: CALL_OW 336
// PlaceUnitXY ( kov , 142 , 80 , false ) ;
20454: LD_EXP 30
20458: PPUSH
20459: LD_INT 142
20461: PPUSH
20462: LD_INT 80
20464: PPUSH
20465: LD_INT 0
20467: PPUSH
20468: CALL_OW 48
// end ; SetClass ( bur , class_mechanic ) ;
20472: LD_EXP 29
20476: PPUSH
20477: LD_INT 3
20479: PPUSH
20480: CALL_OW 336
// SetSide ( bur , You ) ;
20484: LD_EXP 29
20488: PPUSH
20489: LD_EXP 1
20493: PPUSH
20494: CALL_OW 235
// PlaceUnitXY ( bur , 144 , 80 , false ) ;
20498: LD_EXP 29
20502: PPUSH
20503: LD_INT 144
20505: PPUSH
20506: LD_INT 80
20508: PPUSH
20509: LD_INT 0
20511: PPUSH
20512: CALL_OW 48
// if gny <> 0 then
20516: LD_EXP 31
20520: PUSH
20521: LD_INT 0
20523: NONEQUAL
20524: IFFALSE 20582
// begin SetClass ( gny , class_soldier ) ;
20526: LD_EXP 31
20530: PPUSH
20531: LD_INT 1
20533: PPUSH
20534: CALL_OW 336
// SetSide ( gny , You ) ;
20538: LD_EXP 31
20542: PPUSH
20543: LD_EXP 1
20547: PPUSH
20548: CALL_OW 235
// SetClass ( gny , class_mechanic ) ;
20552: LD_EXP 31
20556: PPUSH
20557: LD_INT 3
20559: PPUSH
20560: CALL_OW 336
// PlaceUnitXY ( gny , 142 , 79 , false ) ;
20564: LD_EXP 31
20568: PPUSH
20569: LD_INT 142
20571: PPUSH
20572: LD_INT 79
20574: PPUSH
20575: LD_INT 0
20577: PPUSH
20578: CALL_OW 48
// end ; SetSide ( pop , You2 ) ;
20582: LD_EXP 28
20586: PPUSH
20587: LD_EXP 2
20591: PPUSH
20592: CALL_OW 235
// PlaceUnitXY ( pop , 136 , 79 , false ) ;
20596: LD_EXP 28
20600: PPUSH
20601: LD_INT 136
20603: PPUSH
20604: LD_INT 79
20606: PPUSH
20607: LD_INT 0
20609: PPUSH
20610: CALL_OW 48
// end ;
20614: LD_VAR 0 1
20618: RET
// export function nacti_osobu ( ident ) ; begin
20619: LD_INT 0
20621: PPUSH
// if CheckCharacterSet ( ident ) then
20622: LD_VAR 0 1
20626: PPUSH
20627: CALL_OW 29
20631: IFFALSE 20650
// result := CreateCharacter ( ident ) else
20633: LD_ADDR_VAR 0 2
20637: PUSH
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 34
20647: ST_TO_ADDR
20648: GO 20658
// result := 0 ;
20650: LD_ADDR_VAR 0 2
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// end ;
20658: LD_VAR 0 2
20662: RET
// export function create_arabi_komanda ; var pom ; begin
20663: LD_INT 0
20665: PPUSH
20666: PPUSH
// uc_side = Arabi ;
20667: LD_ADDR_OWVAR 20
20671: PUSH
20672: LD_EXP 5
20676: ST_TO_ADDR
// uc_nation = nation_arabian ;
20677: LD_ADDR_OWVAR 21
20681: PUSH
20682: LD_INT 2
20684: ST_TO_ADDR
// pom = [ ] ;
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: EMPTY
20691: ST_TO_ADDR
// pom = get_human ( sex_female , class_soldier , 8 ,  ) ;
20692: LD_ADDR_VAR 0 2
20696: PUSH
20697: LD_INT 2
20699: PPUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_INT 8
20705: PPUSH
20706: LD_STRING 
20708: PPUSH
20709: CALL 16419 0 4
20713: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20714: LD_ADDR_VAR 0 2
20718: PUSH
20719: LD_VAR 0 2
20723: PUSH
20724: CALL 16384 0 0
20728: PPUSH
20729: LD_INT 1
20731: PPUSH
20732: LD_INT 6
20734: PPUSH
20735: LD_STRING 
20737: PPUSH
20738: CALL 16419 0 4
20742: ADD
20743: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20744: LD_ADDR_VAR 0 2
20748: PUSH
20749: LD_VAR 0 2
20753: PUSH
20754: CALL 16384 0 0
20758: PPUSH
20759: LD_INT 1
20761: PPUSH
20762: LD_INT 6
20764: PPUSH
20765: LD_STRING 
20767: PPUSH
20768: CALL 16419 0 4
20772: ADD
20773: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
20774: LD_ADDR_VAR 0 2
20778: PUSH
20779: LD_VAR 0 2
20783: PUSH
20784: CALL 16384 0 0
20788: PPUSH
20789: LD_INT 1
20791: PPUSH
20792: LD_INT 6
20794: PPUSH
20795: LD_STRING 
20797: PPUSH
20798: CALL 16419 0 4
20802: ADD
20803: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
20804: LD_ADDR_LOC 23
20808: PUSH
20809: CALL 16384 0 0
20813: PPUSH
20814: LD_INT 3
20816: PPUSH
20817: LD_INT 6
20819: PPUSH
20820: LD_STRING 
20822: PPUSH
20823: CALL 16419 0 4
20827: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
20828: LD_ADDR_OWVAR 40
20832: PUSH
20833: LD_INT 25
20835: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
20836: LD_ADDR_OWVAR 37
20840: PUSH
20841: LD_INT 13
20843: ST_TO_ADDR
// vc_control = control_manual ;
20844: LD_ADDR_OWVAR 38
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// vc_engine = engine_solar ;
20852: LD_ADDR_OWVAR 39
20856: PUSH
20857: LD_INT 2
20859: ST_TO_ADDR
// av = CreateVehicle ;
20860: LD_ADDR_LOC 24
20864: PUSH
20865: CALL_OW 45
20869: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20870: LD_LOC 23
20874: PPUSH
20875: LD_LOC 24
20879: PPUSH
20880: CALL_OW 52
// pom = pom ^ av ;
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: LD_VAR 0 2
20893: PUSH
20894: LD_LOC 24
20898: ADD
20899: ST_TO_ADDR
// vc_weapon = ar_gun ;
20900: LD_ADDR_OWVAR 40
20904: PUSH
20905: LD_INT 27
20907: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
20908: LD_ADDR_OWVAR 37
20912: PUSH
20913: LD_INT 14
20915: ST_TO_ADDR
// vc_control = control_apeman ;
20916: LD_ADDR_OWVAR 38
20920: PUSH
20921: LD_INT 5
20923: ST_TO_ADDR
// vc_engine = engine_combustion ;
20924: LD_ADDR_OWVAR 39
20928: PUSH
20929: LD_INT 1
20931: ST_TO_ADDR
// av = CreateVehicle ;
20932: LD_ADDR_LOC 24
20936: PUSH
20937: CALL_OW 45
20941: ST_TO_ADDR
// pom = pom ^ av ;
20942: LD_ADDR_VAR 0 2
20946: PUSH
20947: LD_VAR 0 2
20951: PUSH
20952: LD_LOC 24
20956: ADD
20957: ST_TO_ADDR
// vc_weapon = ar_gun ;
20958: LD_ADDR_OWVAR 40
20962: PUSH
20963: LD_INT 27
20965: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
20966: LD_ADDR_OWVAR 37
20970: PUSH
20971: LD_INT 14
20973: ST_TO_ADDR
// vc_control = control_apeman ;
20974: LD_ADDR_OWVAR 38
20978: PUSH
20979: LD_INT 5
20981: ST_TO_ADDR
// vc_engine = engine_combustion ;
20982: LD_ADDR_OWVAR 39
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// av = CreateVehicle ;
20990: LD_ADDR_LOC 24
20994: PUSH
20995: CALL_OW 45
20999: ST_TO_ADDR
// pom = pom ^ av ;
21000: LD_ADDR_VAR 0 2
21004: PUSH
21005: LD_VAR 0 2
21009: PUSH
21010: LD_LOC 24
21014: ADD
21015: ST_TO_ADDR
// Arabi_komanda1 = pom ;
21016: LD_ADDR_EXP 67
21020: PUSH
21021: LD_VAR 0 2
21025: ST_TO_ADDR
// Arabi_komanda2 = pom ;
21026: LD_ADDR_EXP 68
21030: PUSH
21031: LD_VAR 0 2
21035: ST_TO_ADDR
// vc_weapon = ar_gun ;
21036: LD_ADDR_OWVAR 40
21040: PUSH
21041: LD_INT 27
21043: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21044: LD_ADDR_OWVAR 37
21048: PUSH
21049: LD_INT 14
21051: ST_TO_ADDR
// vc_control = control_apeman ;
21052: LD_ADDR_OWVAR 38
21056: PUSH
21057: LD_INT 5
21059: ST_TO_ADDR
// vc_engine = engine_combustion ;
21060: LD_ADDR_OWVAR 39
21064: PUSH
21065: LD_INT 1
21067: ST_TO_ADDR
// av = CreateVehicle ;
21068: LD_ADDR_LOC 24
21072: PUSH
21073: CALL_OW 45
21077: ST_TO_ADDR
// pom = pom ^ av ;
21078: LD_ADDR_VAR 0 2
21082: PUSH
21083: LD_VAR 0 2
21087: PUSH
21088: LD_LOC 24
21092: ADD
21093: ST_TO_ADDR
// av = CreateVehicle ;
21094: LD_ADDR_LOC 24
21098: PUSH
21099: CALL_OW 45
21103: ST_TO_ADDR
// pom = pom ^ av ;
21104: LD_ADDR_VAR 0 2
21108: PUSH
21109: LD_VAR 0 2
21113: PUSH
21114: LD_LOC 24
21118: ADD
21119: ST_TO_ADDR
// vc_weapon = ar_gun ;
21120: LD_ADDR_OWVAR 40
21124: PUSH
21125: LD_INT 27
21127: ST_TO_ADDR
// av = CreateVehicle ;
21128: LD_ADDR_LOC 24
21132: PUSH
21133: CALL_OW 45
21137: ST_TO_ADDR
// pom = pom ^ av ;
21138: LD_ADDR_VAR 0 2
21142: PUSH
21143: LD_VAR 0 2
21147: PUSH
21148: LD_LOC 24
21152: ADD
21153: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21154: LD_ADDR_VAR 0 2
21158: PUSH
21159: LD_VAR 0 2
21163: PUSH
21164: CALL 16384 0 0
21168: PPUSH
21169: LD_INT 1
21171: PPUSH
21172: LD_INT 6
21174: PPUSH
21175: LD_STRING 
21177: PPUSH
21178: CALL 16419 0 4
21182: ADD
21183: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21184: LD_ADDR_VAR 0 2
21188: PUSH
21189: LD_VAR 0 2
21193: PUSH
21194: CALL 16384 0 0
21198: PPUSH
21199: LD_INT 1
21201: PPUSH
21202: LD_INT 6
21204: PPUSH
21205: LD_STRING 
21207: PPUSH
21208: CALL 16419 0 4
21212: ADD
21213: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21214: LD_ADDR_LOC 23
21218: PUSH
21219: CALL 16384 0 0
21223: PPUSH
21224: LD_INT 3
21226: PPUSH
21227: LD_INT 6
21229: PPUSH
21230: LD_STRING 
21232: PPUSH
21233: CALL 16419 0 4
21237: ST_TO_ADDR
// vc_weapon = ar_gun ;
21238: LD_ADDR_OWVAR 40
21242: PUSH
21243: LD_INT 27
21245: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21246: LD_ADDR_OWVAR 37
21250: PUSH
21251: LD_INT 13
21253: ST_TO_ADDR
// vc_control = control_manual ;
21254: LD_ADDR_OWVAR 38
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// vc_engine = engine_siberite ;
21262: LD_ADDR_OWVAR 39
21266: PUSH
21267: LD_INT 3
21269: ST_TO_ADDR
// av = CreateVehicle ;
21270: LD_ADDR_LOC 24
21274: PUSH
21275: CALL_OW 45
21279: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21280: LD_LOC 23
21284: PPUSH
21285: LD_LOC 24
21289: PPUSH
21290: CALL_OW 52
// pom = pom ^ av ;
21294: LD_ADDR_VAR 0 2
21298: PUSH
21299: LD_VAR 0 2
21303: PUSH
21304: LD_LOC 24
21308: ADD
21309: ST_TO_ADDR
// Arabi_komanda3 = pom ;
21310: LD_ADDR_EXP 69
21314: PUSH
21315: LD_VAR 0 2
21319: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 8 ,  ) ;
21320: LD_ADDR_VAR 0 2
21324: PUSH
21325: CALL 16384 0 0
21329: PPUSH
21330: LD_INT 1
21332: PPUSH
21333: LD_INT 8
21335: PPUSH
21336: LD_STRING 
21338: PPUSH
21339: CALL 16419 0 4
21343: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21344: LD_ADDR_VAR 0 2
21348: PUSH
21349: LD_VAR 0 2
21353: PUSH
21354: CALL 16384 0 0
21358: PPUSH
21359: LD_INT 1
21361: PPUSH
21362: LD_INT 6
21364: PPUSH
21365: LD_STRING 
21367: PPUSH
21368: CALL 16419 0 4
21372: ADD
21373: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21374: LD_ADDR_VAR 0 2
21378: PUSH
21379: LD_VAR 0 2
21383: PUSH
21384: CALL 16384 0 0
21388: PPUSH
21389: LD_INT 1
21391: PPUSH
21392: LD_INT 6
21394: PPUSH
21395: LD_STRING 
21397: PPUSH
21398: CALL 16419 0 4
21402: ADD
21403: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21404: LD_ADDR_VAR 0 2
21408: PUSH
21409: LD_VAR 0 2
21413: PUSH
21414: CALL 16384 0 0
21418: PPUSH
21419: LD_INT 8
21421: PPUSH
21422: LD_INT 6
21424: PPUSH
21425: LD_STRING 
21427: PPUSH
21428: CALL 16419 0 4
21432: ADD
21433: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_VAR 0 2
21443: PUSH
21444: CALL 16384 0 0
21448: PPUSH
21449: LD_INT 8
21451: PPUSH
21452: LD_INT 6
21454: PPUSH
21455: LD_STRING 
21457: PPUSH
21458: CALL 16419 0 4
21462: ADD
21463: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , 6 ,  ) ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_VAR 0 2
21473: PUSH
21474: CALL 16384 0 0
21478: PPUSH
21479: LD_INT 4
21481: PPUSH
21482: LD_INT 6
21484: PPUSH
21485: LD_STRING 
21487: PPUSH
21488: CALL 16419 0 4
21492: ADD
21493: ST_TO_ADDR
// Arabi_komanda4 = pom ;
21494: LD_ADDR_EXP 70
21498: PUSH
21499: LD_VAR 0 2
21503: ST_TO_ADDR
// end ;
21504: LD_VAR 0 1
21508: RET
// export function create_ru_posily_ma_utek ; var pom ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
// uc_side = You2 ;
21513: LD_ADDR_OWVAR 20
21517: PUSH
21518: LD_EXP 2
21522: ST_TO_ADDR
// uc_nation = nation_russian ;
21523: LD_ADDR_OWVAR 21
21527: PUSH
21528: LD_INT 3
21530: ST_TO_ADDR
// pom = [ ] ;
21531: LD_ADDR_VAR 0 2
21535: PUSH
21536: EMPTY
21537: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21538: LD_ADDR_LOC 23
21542: PUSH
21543: CALL 16384 0 0
21547: PPUSH
21548: LD_INT 3
21550: PPUSH
21551: LD_INT 3
21553: PPUSH
21554: LD_STRING 
21556: PPUSH
21557: CALL 16419 0 4
21561: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
21562: LD_ADDR_OWVAR 40
21566: PUSH
21567: LD_INT 42
21569: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
21570: LD_ADDR_OWVAR 37
21574: PUSH
21575: LD_INT 23
21577: ST_TO_ADDR
// vc_control = control_manual ;
21578: LD_ADDR_OWVAR 38
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// vc_engine = engine_combustion ;
21586: LD_ADDR_OWVAR 39
21590: PUSH
21591: LD_INT 1
21593: ST_TO_ADDR
// av = CreateVehicle ;
21594: LD_ADDR_LOC 24
21598: PUSH
21599: CALL_OW 45
21603: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21604: LD_LOC 23
21608: PPUSH
21609: LD_LOC 24
21613: PPUSH
21614: CALL_OW 52
// pom = pom ^ av ;
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_VAR 0 2
21627: PUSH
21628: LD_LOC 24
21632: ADD
21633: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21634: LD_ADDR_LOC 23
21638: PUSH
21639: CALL 16384 0 0
21643: PPUSH
21644: LD_INT 3
21646: PPUSH
21647: LD_INT 3
21649: PPUSH
21650: LD_STRING 
21652: PPUSH
21653: CALL 16419 0 4
21657: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
21658: LD_ADDR_OWVAR 37
21662: PUSH
21663: LD_INT 21
21665: ST_TO_ADDR
// av = CreateVehicle ;
21666: LD_ADDR_LOC 24
21670: PUSH
21671: CALL_OW 45
21675: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21676: LD_LOC 23
21680: PPUSH
21681: LD_LOC 24
21685: PPUSH
21686: CALL_OW 52
// pom = pom ^ av ;
21690: LD_ADDR_VAR 0 2
21694: PUSH
21695: LD_VAR 0 2
21699: PUSH
21700: LD_LOC 24
21704: ADD
21705: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21706: LD_ADDR_VAR 0 2
21710: PUSH
21711: LD_VAR 0 2
21715: PUSH
21716: CALL 16384 0 0
21720: PPUSH
21721: LD_INT 1
21723: PPUSH
21724: LD_INT 3
21726: PPUSH
21727: LD_STRING 
21729: PPUSH
21730: CALL 16419 0 4
21734: ADD
21735: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21736: LD_ADDR_VAR 0 2
21740: PUSH
21741: LD_VAR 0 2
21745: PUSH
21746: CALL 16384 0 0
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: LD_INT 3
21756: PPUSH
21757: LD_STRING 
21759: PPUSH
21760: CALL 16419 0 4
21764: ADD
21765: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_VAR 0 2
21775: PUSH
21776: CALL 16384 0 0
21780: PPUSH
21781: LD_INT 1
21783: PPUSH
21784: LD_INT 3
21786: PPUSH
21787: LD_STRING 
21789: PPUSH
21790: CALL 16419 0 4
21794: ADD
21795: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_VAR 0 2
21805: PUSH
21806: CALL 16384 0 0
21810: PPUSH
21811: LD_INT 3
21813: PPUSH
21814: LD_INT 3
21816: PPUSH
21817: LD_STRING 
21819: PPUSH
21820: CALL 16419 0 4
21824: ADD
21825: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
21826: LD_ADDR_VAR 0 2
21830: PUSH
21831: LD_VAR 0 2
21835: PUSH
21836: CALL 16384 0 0
21840: PPUSH
21841: LD_INT 3
21843: PPUSH
21844: LD_INT 3
21846: PPUSH
21847: LD_STRING 
21849: PPUSH
21850: CALL 16419 0 4
21854: ADD
21855: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
21856: LD_ADDR_VAR 0 2
21860: PUSH
21861: LD_VAR 0 2
21865: PUSH
21866: CALL 16384 0 0
21870: PPUSH
21871: LD_INT 3
21873: PPUSH
21874: LD_INT 3
21876: PPUSH
21877: LD_STRING 
21879: PPUSH
21880: CALL 16419 0 4
21884: ADD
21885: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_VAR 0 2
21895: PUSH
21896: CALL 16384 0 0
21900: PPUSH
21901: LD_INT 2
21903: PPUSH
21904: LD_INT 3
21906: PPUSH
21907: LD_STRING 
21909: PPUSH
21910: CALL 16419 0 4
21914: ADD
21915: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
21916: LD_ADDR_VAR 0 2
21920: PUSH
21921: LD_VAR 0 2
21925: PUSH
21926: CALL 16384 0 0
21930: PPUSH
21931: LD_INT 2
21933: PPUSH
21934: LD_INT 3
21936: PPUSH
21937: LD_STRING 
21939: PPUSH
21940: CALL 16419 0 4
21944: ADD
21945: ST_TO_ADDR
// RU_posily_na_utek = pom ;
21946: LD_ADDR_EXP 58
21950: PUSH
21951: LD_VAR 0 2
21955: ST_TO_ADDR
// end ;
21956: LD_VAR 0 1
21960: RET
// export function create_arabi_na_posily_kirovu ; var pom ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
// pom = [ ] ;
21965: LD_ADDR_VAR 0 2
21969: PUSH
21970: EMPTY
21971: ST_TO_ADDR
// uc_side = Arabi ;
21972: LD_ADDR_OWVAR 20
21976: PUSH
21977: LD_EXP 5
21981: ST_TO_ADDR
// uc_nation = nation_arabian ;
21982: LD_ADDR_OWVAR 21
21986: PUSH
21987: LD_INT 2
21989: ST_TO_ADDR
// vc_weapon = ar_gun ;
21990: LD_ADDR_OWVAR 40
21994: PUSH
21995: LD_INT 27
21997: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21998: LD_ADDR_OWVAR 37
22002: PUSH
22003: LD_INT 14
22005: ST_TO_ADDR
// vc_control = control_apeman ;
22006: LD_ADDR_OWVAR 38
22010: PUSH
22011: LD_INT 5
22013: ST_TO_ADDR
// vc_engine = engine_combustion ;
22014: LD_ADDR_OWVAR 39
22018: PUSH
22019: LD_INT 1
22021: ST_TO_ADDR
// av = CreateVehicle ;
22022: LD_ADDR_LOC 24
22026: PUSH
22027: CALL_OW 45
22031: ST_TO_ADDR
// pom = pom ^ av ;
22032: LD_ADDR_VAR 0 2
22036: PUSH
22037: LD_VAR 0 2
22041: PUSH
22042: LD_LOC 24
22046: ADD
22047: ST_TO_ADDR
// av = CreateVehicle ;
22048: LD_ADDR_LOC 24
22052: PUSH
22053: CALL_OW 45
22057: ST_TO_ADDR
// pom = pom ^ av ;
22058: LD_ADDR_VAR 0 2
22062: PUSH
22063: LD_VAR 0 2
22067: PUSH
22068: LD_LOC 24
22072: ADD
22073: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22074: LD_ADDR_LOC 23
22078: PUSH
22079: CALL 16384 0 0
22083: PPUSH
22084: LD_INT 3
22086: PPUSH
22087: LD_INT 5
22089: PPUSH
22090: LD_STRING 
22092: PPUSH
22093: CALL 16419 0 4
22097: ST_TO_ADDR
// vc_control = control_manual ;
22098: LD_ADDR_OWVAR 38
22102: PUSH
22103: LD_INT 1
22105: ST_TO_ADDR
// av = CreateVehicle ;
22106: LD_ADDR_LOC 24
22110: PUSH
22111: CALL_OW 45
22115: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22116: LD_LOC 23
22120: PPUSH
22121: LD_LOC 24
22125: PPUSH
22126: CALL_OW 52
// pom = pom ^ av ;
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_VAR 0 2
22139: PUSH
22140: LD_LOC 24
22144: ADD
22145: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22146: LD_ADDR_LOC 23
22150: PUSH
22151: CALL 16384 0 0
22155: PPUSH
22156: LD_INT 3
22158: PPUSH
22159: LD_INT 5
22161: PPUSH
22162: LD_STRING 
22164: PPUSH
22165: CALL 16419 0 4
22169: ST_TO_ADDR
// vc_control = control_manual ;
22170: LD_ADDR_OWVAR 38
22174: PUSH
22175: LD_INT 1
22177: ST_TO_ADDR
// av = CreateVehicle ;
22178: LD_ADDR_LOC 24
22182: PUSH
22183: CALL_OW 45
22187: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22188: LD_LOC 23
22192: PPUSH
22193: LD_LOC 24
22197: PPUSH
22198: CALL_OW 52
// pom = pom ^ av ;
22202: LD_ADDR_VAR 0 2
22206: PUSH
22207: LD_VAR 0 2
22211: PUSH
22212: LD_LOC 24
22216: ADD
22217: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22218: LD_ADDR_VAR 0 2
22222: PUSH
22223: LD_VAR 0 2
22227: PUSH
22228: CALL 16384 0 0
22232: PPUSH
22233: LD_INT 1
22235: PPUSH
22236: LD_INT 7
22238: PPUSH
22239: LD_STRING 
22241: PPUSH
22242: CALL 16419 0 4
22246: ADD
22247: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22248: LD_ADDR_VAR 0 2
22252: PUSH
22253: LD_VAR 0 2
22257: PUSH
22258: CALL 16384 0 0
22262: PPUSH
22263: LD_INT 1
22265: PPUSH
22266: LD_INT 7
22268: PPUSH
22269: LD_STRING 
22271: PPUSH
22272: CALL 16419 0 4
22276: ADD
22277: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22278: LD_ADDR_VAR 0 2
22282: PUSH
22283: LD_VAR 0 2
22287: PUSH
22288: CALL 16384 0 0
22292: PPUSH
22293: LD_INT 8
22295: PPUSH
22296: LD_INT 7
22298: PPUSH
22299: LD_STRING 
22301: PPUSH
22302: CALL 16419 0 4
22306: ADD
22307: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22308: LD_ADDR_VAR 0 2
22312: PUSH
22313: LD_VAR 0 2
22317: PUSH
22318: CALL 16384 0 0
22322: PPUSH
22323: LD_INT 8
22325: PPUSH
22326: LD_INT 7
22328: PPUSH
22329: LD_STRING 
22331: PPUSH
22332: CALL 16419 0 4
22336: ADD
22337: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22338: LD_ADDR_VAR 0 2
22342: PUSH
22343: LD_VAR 0 2
22347: PUSH
22348: CALL 16384 0 0
22352: PPUSH
22353: LD_INT 8
22355: PPUSH
22356: LD_INT 7
22358: PPUSH
22359: LD_STRING 
22361: PPUSH
22362: CALL 16419 0 4
22366: ADD
22367: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22368: LD_ADDR_VAR 0 2
22372: PUSH
22373: LD_VAR 0 2
22377: PUSH
22378: CALL 16384 0 0
22382: PPUSH
22383: LD_INT 8
22385: PPUSH
22386: LD_INT 7
22388: PPUSH
22389: LD_STRING 
22391: PPUSH
22392: CALL 16419 0 4
22396: ADD
22397: ST_TO_ADDR
// ARABI_KIROV_POSILY = pom ;
22398: LD_ADDR_EXP 66
22402: PUSH
22403: LD_VAR 0 2
22407: ST_TO_ADDR
// end ;
22408: LD_VAR 0 1
22412: RET
// export function create_cerpaci_ruske_auta ; var pom ; begin
22413: LD_INT 0
22415: PPUSH
22416: PPUSH
// pom = [ ] ;
22417: LD_ADDR_VAR 0 2
22421: PUSH
22422: EMPTY
22423: ST_TO_ADDR
// uc_nation = nation_russian ;
22424: LD_ADDR_OWVAR 21
22428: PUSH
22429: LD_INT 3
22431: ST_TO_ADDR
// uc_side = You2 ;
22432: LD_ADDR_OWVAR 20
22436: PUSH
22437: LD_EXP 2
22441: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
22442: LD_ADDR_OWVAR 40
22446: PUSH
22447: LD_INT 51
22449: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22450: LD_ADDR_OWVAR 37
22454: PUSH
22455: LD_INT 21
22457: ST_TO_ADDR
// vc_control = control_manual ;
22458: LD_ADDR_OWVAR 38
22462: PUSH
22463: LD_INT 1
22465: ST_TO_ADDR
// vc_engine = engine_combustion ;
22466: LD_ADDR_OWVAR 39
22470: PUSH
22471: LD_INT 1
22473: ST_TO_ADDR
// av = CreateVehicle ;
22474: LD_ADDR_LOC 24
22478: PUSH
22479: CALL_OW 45
22483: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22484: LD_ADDR_LOC 23
22488: PUSH
22489: CALL 16384 0 0
22493: PPUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 4
22499: PPUSH
22500: LD_STRING 
22502: PPUSH
22503: CALL 16419 0 4
22507: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22508: LD_LOC 23
22512: PPUSH
22513: LD_LOC 24
22517: PPUSH
22518: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22522: LD_LOC 24
22526: PPUSH
22527: LD_INT 2
22529: PPUSH
22530: LD_INT 100
22532: PPUSH
22533: CALL_OW 290
// pom = pom ^ av ;
22537: LD_ADDR_VAR 0 2
22541: PUSH
22542: LD_VAR 0 2
22546: PUSH
22547: LD_LOC 24
22551: ADD
22552: ST_TO_ADDR
// av = CreateVehicle ;
22553: LD_ADDR_LOC 24
22557: PUSH
22558: CALL_OW 45
22562: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22563: LD_ADDR_LOC 23
22567: PUSH
22568: CALL 16384 0 0
22572: PPUSH
22573: LD_INT 1
22575: PPUSH
22576: LD_INT 4
22578: PPUSH
22579: LD_STRING 
22581: PPUSH
22582: CALL 16419 0 4
22586: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22587: LD_LOC 23
22591: PPUSH
22592: LD_LOC 24
22596: PPUSH
22597: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22601: LD_LOC 24
22605: PPUSH
22606: LD_INT 2
22608: PPUSH
22609: LD_INT 100
22611: PPUSH
22612: CALL_OW 290
// pom = pom ^ av ;
22616: LD_ADDR_VAR 0 2
22620: PUSH
22621: LD_VAR 0 2
22625: PUSH
22626: LD_LOC 24
22630: ADD
22631: ST_TO_ADDR
// av = CreateVehicle ;
22632: LD_ADDR_LOC 24
22636: PUSH
22637: CALL_OW 45
22641: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22642: LD_ADDR_LOC 23
22646: PUSH
22647: CALL 16384 0 0
22651: PPUSH
22652: LD_INT 1
22654: PPUSH
22655: LD_INT 4
22657: PPUSH
22658: LD_STRING 
22660: PPUSH
22661: CALL 16419 0 4
22665: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22666: LD_LOC 23
22670: PPUSH
22671: LD_LOC 24
22675: PPUSH
22676: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22680: LD_LOC 24
22684: PPUSH
22685: LD_INT 2
22687: PPUSH
22688: LD_INT 100
22690: PPUSH
22691: CALL_OW 290
// pom = pom ^ av ;
22695: LD_ADDR_VAR 0 2
22699: PUSH
22700: LD_VAR 0 2
22704: PUSH
22705: LD_LOC 24
22709: ADD
22710: ST_TO_ADDR
// RUSI_CERPACI_AUTA_LIST = pom ;
22711: LD_ADDR_EXP 59
22715: PUSH
22716: LD_VAR 0 2
22720: ST_TO_ADDR
// end ; end_of_file
22721: LD_VAR 0 1
22725: RET
// var Am_hlidka ; var Am_pomoc ; export Am_posily ; export Prezite_posily ; every 0 0$0.1 do var i ;
22726: GO 22728
22728: DISABLE
22729: LD_INT 0
22731: PPUSH
// begin Am_hlidka = [ ] ;
22732: LD_ADDR_LOC 25
22736: PUSH
22737: EMPTY
22738: ST_TO_ADDR
// Am_pomoc = [ ] ;
22739: LD_ADDR_LOC 26
22743: PUSH
22744: EMPTY
22745: ST_TO_ADDR
// Prezite_posily = 0 ;
22746: LD_ADDR_EXP 73
22750: PUSH
22751: LD_INT 0
22753: ST_TO_ADDR
// for i in [ 101 , 102 , 103 ] do
22754: LD_ADDR_VAR 0 1
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: FOR_IN
22774: IFFALSE 22783
// enable ( i ) end ;
22776: LD_VAR 0 1
22780: ENABLE_MARKED
22781: GO 22773
22783: POP
22784: POP
22785: PPOPN 1
22787: END
// export function PrepareOmicron ; var i , skill ; begin
22788: LD_INT 0
22790: PPUSH
22791: PPUSH
22792: PPUSH
// uc_side := 1 ;
22793: LD_ADDR_OWVAR 20
22797: PUSH
22798: LD_INT 1
22800: ST_TO_ADDR
// uc_nation := 1 ;
22801: LD_ADDR_OWVAR 21
22805: PUSH
22806: LD_INT 1
22808: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
22809: LD_ADDR_VAR 0 3
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: LD_INT 4
22819: PUSH
22820: LD_INT 5
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: LD_OWVAR 67
22832: ARRAY
22833: ST_TO_ADDR
// for i = 1 to Difficulty do
22834: LD_ADDR_VAR 0 2
22838: PUSH
22839: DOUBLE
22840: LD_INT 1
22842: DEC
22843: ST_TO_ADDR
22844: LD_OWVAR 67
22848: PUSH
22849: FOR_TO
22850: IFFALSE 22890
// begin PrepareHuman ( false , 2 , skill ) ;
22852: LD_INT 0
22854: PPUSH
22855: LD_INT 2
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 20 , 13 , 6 , false ) ;
22867: CALL_OW 44
22871: PPUSH
22872: LD_INT 20
22874: PPUSH
22875: LD_INT 13
22877: PPUSH
22878: LD_INT 6
22880: PPUSH
22881: LD_INT 0
22883: PPUSH
22884: CALL_OW 50
// end ;
22888: GO 22849
22890: POP
22891: POP
// if Difficulty > 1 then
22892: LD_OWVAR 67
22896: PUSH
22897: LD_INT 1
22899: GREATER
22900: IFFALSE 22912
// begin PlaceWeaponTurret ( Am_bu1 , us_gatling_gun ) ;
22902: LD_INT 7
22904: PPUSH
22905: LD_INT 4
22907: PPUSH
22908: CALL_OW 431
// end ; end ;
22912: LD_VAR 0 1
22916: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var i , engs , buildings ;
22917: LD_INT 22
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL_OW 69
22945: IFFALSE 23150
22947: GO 22949
22949: DISABLE
22950: LD_INT 0
22952: PPUSH
22953: PPUSH
22954: PPUSH
// begin enable ;
22955: ENABLE
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
22956: LD_ADDR_VAR 0 3
22960: PUSH
22961: LD_INT 22
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 30
22973: PUSH
22974: LD_INT 4
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 3
22983: PUSH
22984: LD_INT 24
22986: PUSH
22987: LD_INT 1000
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: LIST
23002: PPUSH
23003: CALL_OW 69
23007: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
23008: LD_ADDR_VAR 0 2
23012: PUSH
23013: LD_INT 22
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 25
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PPUSH
23037: CALL_OW 69
23041: ST_TO_ADDR
// for i in engs do
23042: LD_ADDR_VAR 0 1
23046: PUSH
23047: LD_VAR 0 2
23051: PUSH
23052: FOR_IN
23053: IFFALSE 23148
// if not HasTask ( i ) and not IsInUnit ( i ) and not buildings then
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 314
23064: NOT
23065: PUSH
23066: LD_VAR 0 1
23070: PPUSH
23071: CALL_OW 310
23075: NOT
23076: AND
23077: PUSH
23078: LD_VAR 0 3
23082: NOT
23083: AND
23084: IFFALSE 23100
// ComEnterUnit ( i , Am_dep ) else
23086: LD_VAR 0 1
23090: PPUSH
23091: LD_INT 12
23093: PPUSH
23094: CALL_OW 120
23098: GO 23146
// if buildings then
23100: LD_VAR 0 3
23104: IFFALSE 23146
// if IsInUnit ( i ) then
23106: LD_VAR 0 1
23110: PPUSH
23111: CALL_OW 310
23115: IFFALSE 23128
// ComExitBuilding ( i ) else
23117: LD_VAR 0 1
23121: PPUSH
23122: CALL_OW 122
23126: GO 23146
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
23128: LD_VAR 0 1
23132: PPUSH
23133: LD_VAR 0 3
23137: PUSH
23138: LD_INT 1
23140: ARRAY
23141: PPUSH
23142: CALL_OW 130
23146: GO 23052
23148: POP
23149: POP
// end ;
23150: PPOPN 3
23152: END
// every 0 0$1 do var budovy ;
23153: GO 23155
23155: DISABLE
23156: LD_INT 0
23158: PPUSH
// begin PrepareOmicron ;
23159: CALL 22788 0 0
// ComEnterUnit ( Am_pru1 , Am_bar2 ) ;
23163: LD_INT 26
23165: PPUSH
23166: LD_INT 25
23168: PPUSH
23169: CALL_OW 120
// ComEnterUnit ( Am_pru2 , Am_bar2 ) ;
23173: LD_INT 27
23175: PPUSH
23176: LD_INT 25
23178: PPUSH
23179: CALL_OW 120
// ComEnterUnit ( Am_pru3 , Am_bar2 ) ;
23183: LD_INT 28
23185: PPUSH
23186: LD_INT 25
23188: PPUSH
23189: CALL_OW 120
// ComEnterUnit ( Am_vb1 , Am_bu1 ) ;
23193: LD_INT 29
23195: PPUSH
23196: LD_INT 7
23198: PPUSH
23199: CALL_OW 120
// ComEnterUnit ( Am_vb2 , Am_bu2 ) ;
23203: LD_INT 30
23205: PPUSH
23206: LD_INT 8
23208: PPUSH
23209: CALL_OW 120
// ComEnterUnit ( Am_vb3 , Am_bu3 ) ;
23213: LD_INT 31
23215: PPUSH
23216: LD_INT 19
23218: PPUSH
23219: CALL_OW 120
// ComEnterUnit ( Am_vb4 , Am_bu4 ) ;
23223: LD_INT 32
23225: PPUSH
23226: LD_INT 18
23228: PPUSH
23229: CALL_OW 120
// ComEnterUnit ( Am_sol1 , Am_bar1 ) ;
23233: LD_INT 38
23235: PPUSH
23236: LD_INT 11
23238: PPUSH
23239: CALL_OW 120
// ComEnterUnit ( Am_sol2 , Am_bar1 ) ;
23243: LD_INT 39
23245: PPUSH
23246: LD_INT 11
23248: PPUSH
23249: CALL_OW 120
// ComEnterUnit ( Am_sol3 , Am_bar1 ) ;
23253: LD_INT 40
23255: PPUSH
23256: LD_INT 11
23258: PPUSH
23259: CALL_OW 120
// ComEnterUnit ( pitomec , Am_bar2 ) ;
23263: LD_INT 63
23265: PPUSH
23266: LD_INT 25
23268: PPUSH
23269: CALL_OW 120
// ComEnterUnit ( Am_sol4 , Am_dep ) ;
23273: LD_INT 41
23275: PPUSH
23276: LD_INT 12
23278: PPUSH
23279: CALL_OW 120
// ComEnterUnit ( Am_eng1 , Am_dep ) ;
23283: LD_INT 36
23285: PPUSH
23286: LD_INT 12
23288: PPUSH
23289: CALL_OW 120
// ComEnterUnit ( Am_sci1 , Am_lab ) ;
23293: LD_INT 37
23295: PPUSH
23296: LD_INT 9
23298: PPUSH
23299: CALL_OW 120
// ComEnterUnit ( Am_me1 , Am_fac ) ;
23303: LD_INT 33
23305: PPUSH
23306: LD_INT 10
23308: PPUSH
23309: CALL_OW 120
// ComEnterUnit ( Am_me2 , Am_fac ) ;
23313: LD_INT 34
23315: PPUSH
23316: LD_INT 10
23318: PPUSH
23319: CALL_OW 120
// ComEnterUnit ( Am_me3 , Am_fac ) ;
23323: LD_INT 35
23325: PPUSH
23326: LD_INT 10
23328: PPUSH
23329: CALL_OW 120
// budovy = [ Am_bu1 , Am_bu2 , Am_bu3 , Am_bu4 , Am_el1 , Am_el2 , Am_lab , Am_fac , Am_mine , Am_dep , Am_bar1 , Am_bar2 ] ;
23333: LD_ADDR_VAR 0 1
23337: PUSH
23338: LD_INT 7
23340: PUSH
23341: LD_INT 8
23343: PUSH
23344: LD_INT 19
23346: PUSH
23347: LD_INT 18
23349: PUSH
23350: LD_INT 22
23352: PUSH
23353: LD_INT 23
23355: PUSH
23356: LD_INT 9
23358: PUSH
23359: LD_INT 10
23361: PUSH
23362: LD_INT 24
23364: PUSH
23365: LD_INT 12
23367: PUSH
23368: LD_INT 11
23370: PUSH
23371: LD_INT 25
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: ST_TO_ADDR
// SetBLevel ( budovy , levely_am_budov [ difficulty ] ) ;
23388: LD_VAR 0 1
23392: PPUSH
23393: LD_EXP 21
23397: PUSH
23398: LD_OWVAR 67
23402: ARRAY
23403: PPUSH
23404: CALL_OW 241
// end ;
23408: PPOPN 1
23410: END
// export function amici_hlidka ; begin
23411: LD_INT 0
23413: PPUSH
// case difficulty of 1 :
23414: LD_OWVAR 67
23418: PUSH
23419: LD_INT 1
23421: DOUBLE
23422: EQUAL
23423: IFTRUE 23427
23425: GO 23441
23427: POP
// Am_hlidka = [ Am_pru1 ] ; 2 :
23428: LD_ADDR_LOC 25
23432: PUSH
23433: LD_INT 26
23435: PUSH
23436: EMPTY
23437: LIST
23438: ST_TO_ADDR
23439: GO 23498
23441: LD_INT 2
23443: DOUBLE
23444: EQUAL
23445: IFTRUE 23449
23447: GO 23467
23449: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 ] ; 3 :
23450: LD_ADDR_LOC 25
23454: PUSH
23455: LD_INT 26
23457: PUSH
23458: LD_INT 27
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: ST_TO_ADDR
23465: GO 23498
23467: LD_INT 3
23469: DOUBLE
23470: EQUAL
23471: IFTRUE 23475
23473: GO 23497
23475: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 , Am_pru3 ] ; end ;
23476: LD_ADDR_LOC 25
23480: PUSH
23481: LD_INT 26
23483: PUSH
23484: LD_INT 27
23486: PUSH
23487: LD_INT 28
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: LIST
23494: ST_TO_ADDR
23495: GO 23498
23497: POP
// ComExitBuilding ( Am_hlidka ) ;
23498: LD_LOC 25
23502: PPUSH
23503: CALL_OW 122
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23507: LD_LOC 25
23511: PPUSH
23512: LD_INT 34
23514: PPUSH
23515: LD_INT 16
23517: PPUSH
23518: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23522: LD_LOC 25
23526: PPUSH
23527: LD_INT 245
23529: PPUSH
23530: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23534: LD_LOC 25
23538: PPUSH
23539: LD_INT 51
23541: PPUSH
23542: LD_INT 19
23544: PPUSH
23545: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23549: LD_LOC 25
23553: PPUSH
23554: LD_INT 245
23556: PPUSH
23557: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23561: LD_LOC 25
23565: PPUSH
23566: LD_INT 54
23568: PPUSH
23569: LD_INT 5
23571: PPUSH
23572: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23576: LD_LOC 25
23580: PPUSH
23581: LD_INT 245
23583: PPUSH
23584: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23588: LD_LOC 25
23592: PPUSH
23593: LD_INT 77
23595: PPUSH
23596: LD_INT 16
23598: PPUSH
23599: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23603: LD_LOC 25
23607: PPUSH
23608: LD_INT 245
23610: PPUSH
23611: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23615: LD_LOC 25
23619: PPUSH
23620: LD_INT 81
23622: PPUSH
23623: LD_INT 32
23625: PPUSH
23626: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23630: LD_LOC 25
23634: PPUSH
23635: LD_INT 245
23637: PPUSH
23638: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23642: LD_LOC 25
23646: PPUSH
23647: LD_INT 73
23649: PPUSH
23650: LD_INT 32
23652: PPUSH
23653: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23657: LD_LOC 25
23661: PPUSH
23662: LD_INT 245
23664: PPUSH
23665: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
23669: LD_LOC 25
23673: PPUSH
23674: LD_INT 57
23676: PPUSH
23677: LD_INT 33
23679: PPUSH
23680: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23684: LD_LOC 25
23688: PPUSH
23689: LD_INT 245
23691: PPUSH
23692: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
23696: LD_LOC 25
23700: PPUSH
23701: LD_INT 45
23703: PPUSH
23704: LD_INT 24
23706: PPUSH
23707: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23711: LD_LOC 25
23715: PPUSH
23716: LD_INT 245
23718: PPUSH
23719: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
23723: LD_LOC 25
23727: PPUSH
23728: LD_INT 34
23730: PPUSH
23731: LD_INT 13
23733: PPUSH
23734: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23738: LD_LOC 25
23742: PPUSH
23743: LD_INT 245
23745: PPUSH
23746: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23750: LD_LOC 25
23754: PPUSH
23755: LD_INT 34
23757: PPUSH
23758: LD_INT 16
23760: PPUSH
23761: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23765: LD_LOC 25
23769: PPUSH
23770: LD_INT 245
23772: PPUSH
23773: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23777: LD_LOC 25
23781: PPUSH
23782: LD_INT 51
23784: PPUSH
23785: LD_INT 19
23787: PPUSH
23788: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23792: LD_LOC 25
23796: PPUSH
23797: LD_INT 245
23799: PPUSH
23800: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
23804: LD_LOC 25
23808: PPUSH
23809: LD_INT 54
23811: PPUSH
23812: LD_INT 5
23814: PPUSH
23815: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23819: LD_LOC 25
23823: PPUSH
23824: LD_INT 245
23826: PPUSH
23827: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
23831: LD_LOC 25
23835: PPUSH
23836: LD_INT 77
23838: PPUSH
23839: LD_INT 16
23841: PPUSH
23842: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23846: LD_LOC 25
23850: PPUSH
23851: LD_INT 245
23853: PPUSH
23854: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
23858: LD_LOC 25
23862: PPUSH
23863: LD_INT 81
23865: PPUSH
23866: LD_INT 32
23868: PPUSH
23869: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23873: LD_LOC 25
23877: PPUSH
23878: LD_INT 245
23880: PPUSH
23881: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
23885: LD_LOC 25
23889: PPUSH
23890: LD_INT 73
23892: PPUSH
23893: LD_INT 32
23895: PPUSH
23896: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23900: LD_LOC 25
23904: PPUSH
23905: LD_INT 245
23907: PPUSH
23908: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
23912: LD_LOC 25
23916: PPUSH
23917: LD_INT 57
23919: PPUSH
23920: LD_INT 33
23922: PPUSH
23923: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23927: LD_LOC 25
23931: PPUSH
23932: LD_INT 245
23934: PPUSH
23935: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
23939: LD_LOC 25
23943: PPUSH
23944: LD_INT 45
23946: PPUSH
23947: LD_INT 24
23949: PPUSH
23950: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23954: LD_LOC 25
23958: PPUSH
23959: LD_INT 245
23961: PPUSH
23962: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
23966: LD_LOC 25
23970: PPUSH
23971: LD_INT 34
23973: PPUSH
23974: LD_INT 13
23976: PPUSH
23977: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23981: LD_LOC 25
23985: PPUSH
23986: LD_INT 245
23988: PPUSH
23989: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23993: LD_LOC 25
23997: PPUSH
23998: LD_INT 34
24000: PPUSH
24001: LD_INT 16
24003: PPUSH
24004: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24008: LD_LOC 25
24012: PPUSH
24013: LD_INT 245
24015: PPUSH
24016: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24020: LD_LOC 25
24024: PPUSH
24025: LD_INT 51
24027: PPUSH
24028: LD_INT 19
24030: PPUSH
24031: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24035: LD_LOC 25
24039: PPUSH
24040: LD_INT 245
24042: PPUSH
24043: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24047: LD_LOC 25
24051: PPUSH
24052: LD_INT 54
24054: PPUSH
24055: LD_INT 5
24057: PPUSH
24058: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24062: LD_LOC 25
24066: PPUSH
24067: LD_INT 245
24069: PPUSH
24070: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24074: LD_LOC 25
24078: PPUSH
24079: LD_INT 77
24081: PPUSH
24082: LD_INT 16
24084: PPUSH
24085: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24089: LD_LOC 25
24093: PPUSH
24094: LD_INT 245
24096: PPUSH
24097: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24101: LD_LOC 25
24105: PPUSH
24106: LD_INT 81
24108: PPUSH
24109: LD_INT 32
24111: PPUSH
24112: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24116: LD_LOC 25
24120: PPUSH
24121: LD_INT 245
24123: PPUSH
24124: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24128: LD_LOC 25
24132: PPUSH
24133: LD_INT 73
24135: PPUSH
24136: LD_INT 32
24138: PPUSH
24139: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24143: LD_LOC 25
24147: PPUSH
24148: LD_INT 245
24150: PPUSH
24151: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24155: LD_LOC 25
24159: PPUSH
24160: LD_INT 57
24162: PPUSH
24163: LD_INT 33
24165: PPUSH
24166: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24170: LD_LOC 25
24174: PPUSH
24175: LD_INT 245
24177: PPUSH
24178: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24182: LD_LOC 25
24186: PPUSH
24187: LD_INT 45
24189: PPUSH
24190: LD_INT 24
24192: PPUSH
24193: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24197: LD_LOC 25
24201: PPUSH
24202: LD_INT 245
24204: PPUSH
24205: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24209: LD_LOC 25
24213: PPUSH
24214: LD_INT 34
24216: PPUSH
24217: LD_INT 13
24219: PPUSH
24220: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24224: LD_LOC 25
24228: PPUSH
24229: LD_INT 245
24231: PPUSH
24232: CALL_OW 202
// enable ( 101 ) ;
24236: LD_INT 101
24238: ENABLE_MARKED
// enable ( 103 ) ;
24239: LD_INT 103
24241: ENABLE_MARKED
// enable ( 102 ) ;
24242: LD_INT 102
24244: ENABLE_MARKED
// end ;
24245: LD_VAR 0 1
24249: RET
// every 0 0$1 marked 102 do var i , j , pom ;
24250: GO 24252
24252: DISABLE
24253: LD_INT 0
24255: PPUSH
24256: PPUSH
24257: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
24258: LD_ADDR_VAR 0 3
24262: PUSH
24263: LD_INT 22
24265: PUSH
24266: LD_EXP 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 21
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PPUSH
24289: CALL_OW 69
24293: ST_TO_ADDR
// for i in Am_hlidka do
24294: LD_ADDR_VAR 0 1
24298: PUSH
24299: LD_LOC 25
24303: PUSH
24304: FOR_IN
24305: IFFALSE 24373
// if GetLives ( i ) < 1000 then
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 256
24316: PUSH
24317: LD_INT 1000
24319: LESS
24320: IFFALSE 24371
// for j in pom do
24322: LD_ADDR_VAR 0 2
24326: PUSH
24327: LD_VAR 0 3
24331: PUSH
24332: FOR_IN
24333: IFFALSE 24369
// begin if See ( Amici , j ) then
24335: LD_EXP 4
24339: PPUSH
24340: LD_VAR 0 2
24344: PPUSH
24345: CALL_OW 292
24349: IFFALSE 24365
// ComAttackUnit ( Am_hlidka , j ) ;
24351: LD_LOC 25
24355: PPUSH
24356: LD_VAR 0 2
24360: PPUSH
24361: CALL_OW 115
// break ;
24365: GO 24369
// end ;
24367: GO 24332
24369: POP
24370: POP
24371: GO 24304
24373: POP
24374: POP
// end ;
24375: PPOPN 3
24377: END
// every 0 0$1 marked 101 do var i ; var jedn ; var posli ;
24378: GO 24380
24380: DISABLE
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
24385: PPUSH
// begin jedn = [ ] ;
24386: LD_ADDR_VAR 0 2
24390: PUSH
24391: EMPTY
24392: ST_TO_ADDR
// posli = false ;
24393: LD_ADDR_VAR 0 3
24397: PUSH
24398: LD_INT 0
24400: ST_TO_ADDR
// for i in Am_hlidka do
24401: LD_ADDR_VAR 0 1
24405: PUSH
24406: LD_LOC 25
24410: PUSH
24411: FOR_IN
24412: IFFALSE 24447
// if GetLives ( i ) < 1000 then
24414: LD_VAR 0 1
24418: PPUSH
24419: CALL_OW 256
24423: PUSH
24424: LD_INT 1000
24426: LESS
24427: IFFALSE 24445
// jedn = jedn ^ i ;
24429: LD_ADDR_VAR 0 2
24433: PUSH
24434: LD_VAR 0 2
24438: PUSH
24439: LD_VAR 0 1
24443: ADD
24444: ST_TO_ADDR
24445: GO 24411
24447: POP
24448: POP
// if jedn > 0 then
24449: LD_VAR 0 2
24453: PUSH
24454: LD_INT 0
24456: GREATER
24457: IFFALSE 24502
// begin wait ( 0 0$7 ) ;
24459: LD_INT 245
24461: PPUSH
24462: CALL_OW 67
// for i in jedn do
24466: LD_ADDR_VAR 0 1
24470: PUSH
24471: LD_VAR 0 2
24475: PUSH
24476: FOR_IN
24477: IFFALSE 24500
// if IsOK ( i ) then
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 302
24488: IFFALSE 24498
// posli = true ;
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: LD_INT 1
24497: ST_TO_ADDR
24498: GO 24476
24500: POP
24501: POP
// end ; if posli then
24502: LD_VAR 0 3
24506: IFFALSE 24521
// americka_pomoc_hlidce ( jedn [ 1 ] ) ;
24508: LD_VAR 0 2
24512: PUSH
24513: LD_INT 1
24515: ARRAY
24516: PPUSH
24517: CALL 24680 0 1
// enable ;
24521: ENABLE
// end ;
24522: PPOPN 3
24524: END
// every 0 0$1 marked 102 do
24525: GO 24527
24527: DISABLE
// begin wait ( schol_find_amikama [ difficulty ] ) ;
24528: LD_EXP 12
24532: PUSH
24533: LD_OWVAR 67
24537: ARRAY
24538: PPUSH
24539: CALL_OW 67
// if GetSide ( schol ) = You or GetSide ( schol2 ) = You then
24543: LD_EXP 33
24547: PPUSH
24548: CALL_OW 255
24552: PUSH
24553: LD_EXP 1
24557: EQUAL
24558: PUSH
24559: LD_EXP 34
24563: PPUSH
24564: CALL_OW 255
24568: PUSH
24569: LD_EXP 1
24573: EQUAL
24574: OR
24575: IFFALSE 24581
// exit else
24577: GO 24610
24579: GO 24610
// begin ComAgressiveMove ( Am_hlidka , 38 , 2 ) ;
24581: LD_LOC 25
24585: PPUSH
24586: LD_INT 38
24588: PPUSH
24589: LD_INT 2
24591: PPUSH
24592: CALL_OW 114
// AddComAttackUnit ( Am_hlidka , schol2 ) ;
24596: LD_LOC 25
24600: PPUSH
24601: LD_EXP 34
24605: PPUSH
24606: CALL_OW 175
// end ; end ;
24610: END
// every 0 0$3 trigger scholtze_saved or IsDead ( schol2 ) do
24611: LD_EXP 37
24615: PUSH
24616: LD_EXP 34
24620: PPUSH
24621: CALL_OW 301
24625: OR
24626: IFFALSE 24679
24628: GO 24630
24630: DISABLE
// begin ComAgressiveMove ( Am_hlidka , 28 , 18 ) ;
24631: LD_LOC 25
24635: PPUSH
24636: LD_INT 28
24638: PPUSH
24639: LD_INT 18
24641: PPUSH
24642: CALL_OW 114
// AddComEnterUnit ( Am_hlidka , Am_bar2 ) ;
24646: LD_LOC 25
24650: PPUSH
24651: LD_INT 25
24653: PPUSH
24654: CALL_OW 180
// ComAgressiveMove ( Am_pomoc , 21 , 32 ) ;
24658: LD_LOC 26
24662: PPUSH
24663: LD_INT 21
24665: PPUSH
24666: LD_INT 32
24668: PPUSH
24669: CALL_OW 114
// disable ( 101 ) ;
24673: LD_INT 101
24675: DISABLE_MARKED
// disable ( 102 ) ;
24676: LD_INT 102
24678: DISABLE_MARKED
// end ;
24679: END
// function americka_pomoc_hlidce ( jedn ) ; var i ; begin
24680: LD_INT 0
24682: PPUSH
24683: PPUSH
// Am_pomoc = AMERICKA_POMOC_HLIDCE_LIST ;
24684: LD_ADDR_LOC 26
24688: PUSH
24689: LD_EXP 50
24693: ST_TO_ADDR
// while SeeArea ( Amici , Help_area ) > 0 do
24694: LD_EXP 4
24698: PPUSH
24699: LD_INT 3
24701: PPUSH
24702: CALL_OW 294
24706: PUSH
24707: LD_INT 0
24709: GREATER
24710: IFFALSE 24721
// wait ( 0 0$1 ) ;
24712: LD_INT 35
24714: PPUSH
24715: CALL_OW 67
24719: GO 24694
// for i in AMERICKA_POMOC_HLIDCE_LIST do
24721: LD_ADDR_VAR 0 3
24725: PUSH
24726: LD_EXP 50
24730: PUSH
24731: FOR_IN
24732: IFFALSE 24751
// PlaceUnitArea ( i , Help_area , false ) ;
24734: LD_VAR 0 3
24738: PPUSH
24739: LD_INT 3
24741: PPUSH
24742: LD_INT 0
24744: PPUSH
24745: CALL_OW 49
24749: GO 24731
24751: POP
24752: POP
// wait ( 0 0$1 ) ;
24753: LD_INT 35
24755: PPUSH
24756: CALL_OW 67
// ComAgressiveMove ( Am_pomoc , GetX ( jedn ) , GetY ( jedn ) ) ;
24760: LD_LOC 26
24764: PPUSH
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 250
24774: PPUSH
24775: LD_VAR 0 1
24779: PPUSH
24780: CALL_OW 251
24784: PPUSH
24785: CALL_OW 114
// end ;
24789: LD_VAR 0 2
24793: RET
// every 0 0$10 do
24794: GO 24796
24796: DISABLE
// begin wait ( Rand ( 1 , 0 0$30 ) ) ;
24797: LD_INT 1
24799: PPUSH
24800: LD_INT 1050
24802: PPUSH
24803: CALL_OW 12
24807: PPUSH
24808: CALL_OW 67
// wait ( posily1 [ difficulty ] ) ;
24812: LD_EXP 14
24816: PUSH
24817: LD_OWVAR 67
24821: ARRAY
24822: PPUSH
24823: CALL_OW 67
// posli_posily ( 1 ) ;
24827: LD_INT 1
24829: PPUSH
24830: CALL 24923 0 1
// wait ( posily11 [ difficulty ] ) ;
24834: LD_EXP 15
24838: PUSH
24839: LD_OWVAR 67
24843: ARRAY
24844: PPUSH
24845: CALL_OW 67
// posli_posily ( 11 ) ;
24849: LD_INT 11
24851: PPUSH
24852: CALL 24923 0 1
// wait ( posily2 [ difficulty ] ) ;
24856: LD_EXP 16
24860: PUSH
24861: LD_OWVAR 67
24865: ARRAY
24866: PPUSH
24867: CALL_OW 67
// posli_posily ( 2 ) ;
24871: LD_INT 2
24873: PPUSH
24874: CALL 24923 0 1
// wait ( posily3 [ difficulty ] ) ;
24878: LD_EXP 17
24882: PUSH
24883: LD_OWVAR 67
24887: ARRAY
24888: PPUSH
24889: CALL_OW 67
// posli_posily ( 3 ) ;
24893: LD_INT 3
24895: PPUSH
24896: CALL 24923 0 1
// wait ( posily4 [ difficulty ] ) ;
24900: LD_EXP 18
24904: PUSH
24905: LD_OWVAR 67
24909: ARRAY
24910: PPUSH
24911: CALL_OW 67
// posli_posily ( 4 ) ;
24915: LD_INT 4
24917: PPUSH
24918: CALL 24923 0 1
// end ;
24922: END
// function posli_posily ( ktere ) ; var i , pom ; var poc ; begin
24923: LD_INT 0
24925: PPUSH
24926: PPUSH
24927: PPUSH
24928: PPUSH
// case ktere of 1 :
24929: LD_VAR 0 1
24933: PUSH
24934: LD_INT 1
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 24977
24942: POP
// for i in AMERICKE_POSILY1_LIST do
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_EXP 51
24952: PUSH
24953: FOR_IN
24954: IFFALSE 24973
// PlaceUnitArea ( i , posily_1 , false ) ; 2 :
24956: LD_VAR 0 3
24960: PPUSH
24961: LD_INT 4
24963: PPUSH
24964: LD_INT 0
24966: PPUSH
24967: CALL_OW 49
24971: GO 24953
24973: POP
24974: POP
24975: GO 25150
24977: LD_INT 2
24979: DOUBLE
24980: EQUAL
24981: IFTRUE 24985
24983: GO 25020
24985: POP
// for i in AMERICKE_POSILY2_LIST do
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: LD_EXP 52
24995: PUSH
24996: FOR_IN
24997: IFFALSE 25016
// PlaceUnitArea ( i , posily_3 , false ) ; 3 :
24999: LD_VAR 0 3
25003: PPUSH
25004: LD_INT 5
25006: PPUSH
25007: LD_INT 0
25009: PPUSH
25010: CALL_OW 49
25014: GO 24996
25016: POP
25017: POP
25018: GO 25150
25020: LD_INT 3
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25063
25028: POP
// for i in AMERICKE_POSILY3_LIST do
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: LD_EXP 53
25038: PUSH
25039: FOR_IN
25040: IFFALSE 25059
// PlaceUnitArea ( i , posily_1 , false ) ; 4 :
25042: LD_VAR 0 3
25046: PPUSH
25047: LD_INT 4
25049: PPUSH
25050: LD_INT 0
25052: PPUSH
25053: CALL_OW 49
25057: GO 25039
25059: POP
25060: POP
25061: GO 25150
25063: LD_INT 4
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25106
25071: POP
// for i in AMERICKE_POSILY4_LIST do
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: LD_EXP 54
25081: PUSH
25082: FOR_IN
25083: IFFALSE 25102
// PlaceUnitArea ( i , posily_3 , false ) ; 11 :
25085: LD_VAR 0 3
25089: PPUSH
25090: LD_INT 5
25092: PPUSH
25093: LD_INT 0
25095: PPUSH
25096: CALL_OW 49
25100: GO 25082
25102: POP
25103: POP
25104: GO 25150
25106: LD_INT 11
25108: DOUBLE
25109: EQUAL
25110: IFTRUE 25114
25112: GO 25149
25114: POP
// for i in AMERICKE_POSILY11_LIST do
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_EXP 55
25124: PUSH
25125: FOR_IN
25126: IFFALSE 25145
// PlaceUnitArea ( i , posily_1 , false ) ; end ;
25128: LD_VAR 0 3
25132: PPUSH
25133: LD_INT 4
25135: PPUSH
25136: LD_INT 0
25138: PPUSH
25139: CALL_OW 49
25143: GO 25125
25145: POP
25146: POP
25147: GO 25150
25149: POP
// case ktere of 1 :
25150: LD_VAR 0 1
25154: PUSH
25155: LD_INT 1
25157: DOUBLE
25158: EQUAL
25159: IFTRUE 25163
25161: GO 25380
25163: POP
// begin Am_posily = AMERICKE_POSILY1_LIST ;
25164: LD_ADDR_EXP 72
25168: PUSH
25169: LD_EXP 51
25173: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25174: LD_EXP 72
25178: PPUSH
25179: LD_INT 42
25181: PPUSH
25182: LD_INT 69
25184: PPUSH
25185: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25189: LD_EXP 72
25193: PPUSH
25194: LD_INT 35
25196: PPUSH
25197: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25201: LD_EXP 72
25205: PPUSH
25206: LD_INT 42
25208: PPUSH
25209: LD_INT 69
25211: PPUSH
25212: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25216: LD_EXP 72
25220: PPUSH
25221: LD_INT 35
25223: PPUSH
25224: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 42 , 69 ) ;
25228: LD_EXP 72
25232: PPUSH
25233: LD_INT 42
25235: PPUSH
25236: LD_INT 69
25238: PPUSH
25239: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25243: LD_EXP 72
25247: PPUSH
25248: LD_INT 35
25250: PPUSH
25251: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25255: LD_EXP 72
25259: PPUSH
25260: LD_INT 28
25262: PPUSH
25263: LD_INT 47
25265: PPUSH
25266: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25270: LD_EXP 72
25274: PPUSH
25275: LD_INT 35
25277: PPUSH
25278: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25282: LD_EXP 72
25286: PPUSH
25287: LD_INT 28
25289: PPUSH
25290: LD_INT 47
25292: PPUSH
25293: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25297: LD_EXP 72
25301: PPUSH
25302: LD_INT 35
25304: PPUSH
25305: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25309: LD_EXP 72
25313: PPUSH
25314: LD_INT 28
25316: PPUSH
25317: LD_INT 47
25319: PPUSH
25320: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25324: LD_EXP 72
25328: PPUSH
25329: LD_INT 35
25331: PPUSH
25332: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25336: LD_EXP 72
25340: PPUSH
25341: LD_INT 28
25343: PPUSH
25344: LD_INT 47
25346: PPUSH
25347: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25351: LD_EXP 72
25355: PPUSH
25356: LD_INT 35
25358: PPUSH
25359: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25363: LD_EXP 72
25367: PPUSH
25368: LD_INT 20
25370: PPUSH
25371: LD_INT 12
25373: PPUSH
25374: CALL_OW 174
// end ; 2 :
25378: GO 26659
25380: LD_INT 2
25382: DOUBLE
25383: EQUAL
25384: IFTRUE 25388
25386: GO 25524
25388: POP
// begin Am_posily = AMERICKE_POSILY2_LIST ;
25389: LD_ADDR_EXP 72
25393: PUSH
25394: LD_EXP 52
25398: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 112 , 22 ) ;
25399: LD_EXP 72
25403: PPUSH
25404: LD_INT 112
25406: PPUSH
25407: LD_INT 22
25409: PPUSH
25410: CALL_OW 114
// AddComWait ( Am_posily , 0 0$2 ) ;
25414: LD_EXP 72
25418: PPUSH
25419: LD_INT 70
25421: PPUSH
25422: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 86 , 18 ) ;
25426: LD_EXP 72
25430: PPUSH
25431: LD_INT 86
25433: PPUSH
25434: LD_INT 18
25436: PPUSH
25437: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25441: LD_EXP 72
25445: PPUSH
25446: LD_INT 70
25448: PPUSH
25449: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 77 , 34 ) ;
25453: LD_EXP 72
25457: PPUSH
25458: LD_INT 77
25460: PPUSH
25461: LD_INT 34
25463: PPUSH
25464: CALL_OW 174
// AddComWait ( Am_posily , 0 0$2 ) ;
25468: LD_EXP 72
25472: PPUSH
25473: LD_INT 70
25475: PPUSH
25476: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 51 , 37 ) ;
25480: LD_EXP 72
25484: PPUSH
25485: LD_INT 51
25487: PPUSH
25488: LD_INT 37
25490: PPUSH
25491: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25495: LD_EXP 72
25499: PPUSH
25500: LD_INT 35
25502: PPUSH
25503: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 23 , 12 ) ;
25507: LD_EXP 72
25511: PPUSH
25512: LD_INT 23
25514: PPUSH
25515: LD_INT 12
25517: PPUSH
25518: CALL_OW 174
// end ; 3 :
25522: GO 26659
25524: LD_INT 3
25526: DOUBLE
25527: EQUAL
25528: IFTRUE 25532
25530: GO 25749
25532: POP
// begin Am_posily = AMERICKE_POSILY3_LIST ;
25533: LD_ADDR_EXP 72
25537: PUSH
25538: LD_EXP 53
25542: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25543: LD_EXP 72
25547: PPUSH
25548: LD_INT 42
25550: PPUSH
25551: LD_INT 69
25553: PPUSH
25554: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25558: LD_EXP 72
25562: PPUSH
25563: LD_INT 35
25565: PPUSH
25566: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25570: LD_EXP 72
25574: PPUSH
25575: LD_INT 42
25577: PPUSH
25578: LD_INT 69
25580: PPUSH
25581: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25585: LD_EXP 72
25589: PPUSH
25590: LD_INT 35
25592: PPUSH
25593: CALL_OW 202
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25597: LD_EXP 72
25601: PPUSH
25602: LD_INT 42
25604: PPUSH
25605: LD_INT 69
25607: PPUSH
25608: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25612: LD_EXP 72
25616: PPUSH
25617: LD_INT 35
25619: PPUSH
25620: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25624: LD_EXP 72
25628: PPUSH
25629: LD_INT 28
25631: PPUSH
25632: LD_INT 47
25634: PPUSH
25635: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25639: LD_EXP 72
25643: PPUSH
25644: LD_INT 35
25646: PPUSH
25647: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25651: LD_EXP 72
25655: PPUSH
25656: LD_INT 28
25658: PPUSH
25659: LD_INT 47
25661: PPUSH
25662: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25666: LD_EXP 72
25670: PPUSH
25671: LD_INT 35
25673: PPUSH
25674: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25678: LD_EXP 72
25682: PPUSH
25683: LD_INT 28
25685: PPUSH
25686: LD_INT 47
25688: PPUSH
25689: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25693: LD_EXP 72
25697: PPUSH
25698: LD_INT 35
25700: PPUSH
25701: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25705: LD_EXP 72
25709: PPUSH
25710: LD_INT 28
25712: PPUSH
25713: LD_INT 47
25715: PPUSH
25716: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25720: LD_EXP 72
25724: PPUSH
25725: LD_INT 35
25727: PPUSH
25728: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25732: LD_EXP 72
25736: PPUSH
25737: LD_INT 20
25739: PPUSH
25740: LD_INT 12
25742: PPUSH
25743: CALL_OW 174
// end ; 4 :
25747: GO 26659
25749: LD_INT 4
25751: DOUBLE
25752: EQUAL
25753: IFTRUE 25757
25755: GO 26190
25757: POP
// begin Am_posily = AMERICKE_POSILY4_LIST ;
25758: LD_ADDR_EXP 72
25762: PUSH
25763: LD_EXP 54
25767: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25768: LD_EXP 72
25772: PPUSH
25773: LD_INT 110
25775: PPUSH
25776: LD_INT 23
25778: PPUSH
25779: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25783: LD_EXP 72
25787: PPUSH
25788: LD_INT 35
25790: PPUSH
25791: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25795: LD_EXP 72
25799: PPUSH
25800: LD_INT 110
25802: PPUSH
25803: LD_INT 23
25805: PPUSH
25806: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25810: LD_EXP 72
25814: PPUSH
25815: LD_INT 35
25817: PPUSH
25818: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25822: LD_EXP 72
25826: PPUSH
25827: LD_INT 110
25829: PPUSH
25830: LD_INT 23
25832: PPUSH
25833: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25837: LD_EXP 72
25841: PPUSH
25842: LD_INT 35
25844: PPUSH
25845: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25849: LD_EXP 72
25853: PPUSH
25854: LD_INT 110
25856: PPUSH
25857: LD_INT 23
25859: PPUSH
25860: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
25864: LD_EXP 72
25868: PPUSH
25869: LD_INT 35
25871: PPUSH
25872: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25876: LD_EXP 72
25880: PPUSH
25881: LD_INT 87
25883: PPUSH
25884: LD_INT 19
25886: PPUSH
25887: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25891: LD_EXP 72
25895: PPUSH
25896: LD_INT 35
25898: PPUSH
25899: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25903: LD_EXP 72
25907: PPUSH
25908: LD_INT 87
25910: PPUSH
25911: LD_INT 19
25913: PPUSH
25914: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25918: LD_EXP 72
25922: PPUSH
25923: LD_INT 35
25925: PPUSH
25926: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25930: LD_EXP 72
25934: PPUSH
25935: LD_INT 87
25937: PPUSH
25938: LD_INT 19
25940: PPUSH
25941: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25945: LD_EXP 72
25949: PPUSH
25950: LD_INT 35
25952: PPUSH
25953: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25957: LD_EXP 72
25961: PPUSH
25962: LD_INT 87
25964: PPUSH
25965: LD_INT 19
25967: PPUSH
25968: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25972: LD_EXP 72
25976: PPUSH
25977: LD_INT 35
25979: PPUSH
25980: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25984: LD_EXP 72
25988: PPUSH
25989: LD_INT 52
25991: PPUSH
25992: LD_INT 12
25994: PPUSH
25995: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
25999: LD_EXP 72
26003: PPUSH
26004: LD_INT 35
26006: PPUSH
26007: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26011: LD_EXP 72
26015: PPUSH
26016: LD_INT 52
26018: PPUSH
26019: LD_INT 12
26021: PPUSH
26022: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26026: LD_EXP 72
26030: PPUSH
26031: LD_INT 35
26033: PPUSH
26034: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26038: LD_EXP 72
26042: PPUSH
26043: LD_INT 52
26045: PPUSH
26046: LD_INT 12
26048: PPUSH
26049: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26053: LD_EXP 72
26057: PPUSH
26058: LD_INT 35
26060: PPUSH
26061: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26065: LD_EXP 72
26069: PPUSH
26070: LD_INT 52
26072: PPUSH
26073: LD_INT 12
26075: PPUSH
26076: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26080: LD_EXP 72
26084: PPUSH
26085: LD_INT 35
26087: PPUSH
26088: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26092: LD_EXP 72
26096: PPUSH
26097: LD_INT 52
26099: PPUSH
26100: LD_INT 12
26102: PPUSH
26103: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26107: LD_EXP 72
26111: PPUSH
26112: LD_INT 35
26114: PPUSH
26115: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26119: LD_EXP 72
26123: PPUSH
26124: LD_INT 52
26126: PPUSH
26127: LD_INT 12
26129: PPUSH
26130: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26134: LD_EXP 72
26138: PPUSH
26139: LD_INT 35
26141: PPUSH
26142: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26146: LD_EXP 72
26150: PPUSH
26151: LD_INT 52
26153: PPUSH
26154: LD_INT 12
26156: PPUSH
26157: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26161: LD_EXP 72
26165: PPUSH
26166: LD_INT 35
26168: PPUSH
26169: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26173: LD_EXP 72
26177: PPUSH
26178: LD_INT 27
26180: PPUSH
26181: LD_INT 13
26183: PPUSH
26184: CALL_OW 174
// end ; 11 :
26188: GO 26659
26190: LD_INT 11
26192: DOUBLE
26193: EQUAL
26194: IFTRUE 26198
26196: GO 26658
26198: POP
// begin Am_posily = AMERICKE_POSILY11_LIST ;
26199: LD_ADDR_EXP 72
26203: PUSH
26204: LD_EXP 55
26208: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26209: LD_EXP 72
26213: PPUSH
26214: LD_INT 110
26216: PPUSH
26217: LD_INT 23
26219: PPUSH
26220: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26224: LD_EXP 72
26228: PPUSH
26229: LD_INT 35
26231: PPUSH
26232: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26236: LD_EXP 72
26240: PPUSH
26241: LD_INT 110
26243: PPUSH
26244: LD_INT 23
26246: PPUSH
26247: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26251: LD_EXP 72
26255: PPUSH
26256: LD_INT 35
26258: PPUSH
26259: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26263: LD_EXP 72
26267: PPUSH
26268: LD_INT 110
26270: PPUSH
26271: LD_INT 23
26273: PPUSH
26274: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26278: LD_EXP 72
26282: PPUSH
26283: LD_INT 35
26285: PPUSH
26286: CALL_OW 202
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
26290: LD_EXP 72
26294: PPUSH
26295: LD_INT 110
26297: PPUSH
26298: LD_INT 23
26300: PPUSH
26301: CALL_OW 114
// AddComWait ( Am_posily , 0 0$1 ) ;
26305: LD_EXP 72
26309: PPUSH
26310: LD_INT 35
26312: PPUSH
26313: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26317: LD_EXP 72
26321: PPUSH
26322: LD_INT 87
26324: PPUSH
26325: LD_INT 19
26327: PPUSH
26328: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26332: LD_EXP 72
26336: PPUSH
26337: LD_INT 35
26339: PPUSH
26340: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26344: LD_EXP 72
26348: PPUSH
26349: LD_INT 87
26351: PPUSH
26352: LD_INT 19
26354: PPUSH
26355: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26359: LD_EXP 72
26363: PPUSH
26364: LD_INT 35
26366: PPUSH
26367: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26371: LD_EXP 72
26375: PPUSH
26376: LD_INT 87
26378: PPUSH
26379: LD_INT 19
26381: PPUSH
26382: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26386: LD_EXP 72
26390: PPUSH
26391: LD_INT 35
26393: PPUSH
26394: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
26398: LD_EXP 72
26402: PPUSH
26403: LD_INT 87
26405: PPUSH
26406: LD_INT 19
26408: PPUSH
26409: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26413: LD_EXP 72
26417: PPUSH
26418: LD_INT 35
26420: PPUSH
26421: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26425: LD_EXP 72
26429: PPUSH
26430: LD_INT 52
26432: PPUSH
26433: LD_INT 12
26435: PPUSH
26436: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26440: LD_EXP 72
26444: PPUSH
26445: LD_INT 35
26447: PPUSH
26448: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26452: LD_EXP 72
26456: PPUSH
26457: LD_INT 52
26459: PPUSH
26460: LD_INT 12
26462: PPUSH
26463: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26467: LD_EXP 72
26471: PPUSH
26472: LD_INT 35
26474: PPUSH
26475: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26479: LD_EXP 72
26483: PPUSH
26484: LD_INT 52
26486: PPUSH
26487: LD_INT 12
26489: PPUSH
26490: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26494: LD_EXP 72
26498: PPUSH
26499: LD_INT 35
26501: PPUSH
26502: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26506: LD_EXP 72
26510: PPUSH
26511: LD_INT 52
26513: PPUSH
26514: LD_INT 12
26516: PPUSH
26517: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26521: LD_EXP 72
26525: PPUSH
26526: LD_INT 35
26528: PPUSH
26529: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26533: LD_EXP 72
26537: PPUSH
26538: LD_INT 52
26540: PPUSH
26541: LD_INT 12
26543: PPUSH
26544: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26548: LD_EXP 72
26552: PPUSH
26553: LD_INT 35
26555: PPUSH
26556: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26560: LD_EXP 72
26564: PPUSH
26565: LD_INT 52
26567: PPUSH
26568: LD_INT 12
26570: PPUSH
26571: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26575: LD_EXP 72
26579: PPUSH
26580: LD_INT 35
26582: PPUSH
26583: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26587: LD_EXP 72
26591: PPUSH
26592: LD_INT 52
26594: PPUSH
26595: LD_INT 12
26597: PPUSH
26598: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26602: LD_EXP 72
26606: PPUSH
26607: LD_INT 35
26609: PPUSH
26610: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
26614: LD_EXP 72
26618: PPUSH
26619: LD_INT 52
26621: PPUSH
26622: LD_INT 12
26624: PPUSH
26625: CALL_OW 174
// AddComWait ( Am_posily , 0 0$1 ) ;
26629: LD_EXP 72
26633: PPUSH
26634: LD_INT 35
26636: PPUSH
26637: CALL_OW 202
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
26641: LD_EXP 72
26645: PPUSH
26646: LD_INT 27
26648: PPUSH
26649: LD_INT 13
26651: PPUSH
26652: CALL_OW 174
// end ; end ;
26656: GO 26659
26658: POP
// end ;
26659: LD_VAR 0 2
26663: RET
// every 1 1$7 do
26664: GO 26666
26666: DISABLE
// begin if Researched ( Amici , tech_Weap1 ) then
26667: LD_EXP 4
26671: PPUSH
26672: LD_INT 51
26674: PPUSH
26675: CALL_OW 325
26679: IFFALSE 26706
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26681: LD_INT 51
26683: PPUSH
26684: LD_EXP 4
26688: PPUSH
26689: LD_INT 1
26691: PPUSH
26692: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26696: LD_INT 9
26698: PPUSH
26699: LD_INT 51
26701: PPUSH
26702: CALL_OW 124
// end ; enable ;
26706: ENABLE
// end ;
26707: END
// every 0 0$19 do
26708: GO 26710
26710: DISABLE
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26711: LD_INT 51
26713: PPUSH
26714: LD_EXP 4
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26726: LD_INT 9
26728: PPUSH
26729: LD_INT 51
26731: PPUSH
26732: CALL_OW 124
// end ;
26736: END
// every 0 0$1 do var i , temp_list ;
26737: GO 26739
26739: DISABLE
26740: LD_INT 0
26742: PPUSH
26743: PPUSH
// begin i = 1 ;
26744: LD_ADDR_VAR 0 1
26748: PUSH
26749: LD_INT 1
26751: ST_TO_ADDR
// while i <= Am_posily do
26752: LD_VAR 0 1
26756: PUSH
26757: LD_EXP 72
26761: LESSEQUAL
26762: IFFALSE 26901
// begin if IsInArea ( Am_posily [ i ] , Am_base ) or not IsLive ( i ) then
26764: LD_EXP 72
26768: PUSH
26769: LD_VAR 0 1
26773: ARRAY
26774: PPUSH
26775: LD_INT 6
26777: PPUSH
26778: CALL_OW 308
26782: PUSH
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 300
26792: NOT
26793: OR
26794: IFFALSE 26885
// begin if IsInArea ( Am_posily [ i ] , Am_base ) then
26796: LD_EXP 72
26800: PUSH
26801: LD_VAR 0 1
26805: ARRAY
26806: PPUSH
26807: LD_INT 6
26809: PPUSH
26810: CALL_OW 308
26814: IFFALSE 26863
// begin Prezite_posily = Prezite_posily + 1 ;
26816: LD_ADDR_EXP 73
26820: PUSH
26821: LD_EXP 73
26825: PUSH
26826: LD_INT 1
26828: PLUS
26829: ST_TO_ADDR
// if Prezite_posily > muze_prezit_posil [ difficulty ] then
26830: LD_EXP 73
26834: PUSH
26835: LD_EXP 23
26839: PUSH
26840: LD_OWVAR 67
26844: ARRAY
26845: GREATER
26846: IFFALSE 26863
// DestroyUnit ( Am_posily [ i ] ) ;
26848: LD_EXP 72
26852: PUSH
26853: LD_VAR 0 1
26857: ARRAY
26858: PPUSH
26859: CALL_OW 65
// end ; Am_posily = Delete ( Am_posily , i ) ;
26863: LD_ADDR_EXP 72
26867: PUSH
26868: LD_EXP 72
26872: PPUSH
26873: LD_VAR 0 1
26877: PPUSH
26878: CALL_OW 3
26882: ST_TO_ADDR
// continue ;
26883: GO 26752
// end ; i = i + 1 ;
26885: LD_ADDR_VAR 0 1
26889: PUSH
26890: LD_VAR 0 1
26894: PUSH
26895: LD_INT 1
26897: PLUS
26898: ST_TO_ADDR
// end ;
26899: GO 26752
// enable ;
26901: ENABLE
// end ;
26902: PPOPN 2
26904: END
// every 0 0$13 do var pom ;
26905: GO 26907
26907: DISABLE
26908: LD_INT 0
26910: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_mechanic ] ] ) ;
26911: LD_ADDR_VAR 0 1
26915: PUSH
26916: LD_INT 6
26918: PPUSH
26919: LD_INT 22
26921: PUSH
26922: LD_EXP 4
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 25
26933: PUSH
26934: LD_INT 3
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 70
26949: ST_TO_ADDR
// if pom > 0 then
26950: LD_VAR 0 1
26954: PUSH
26955: LD_INT 0
26957: GREATER
26958: IFFALSE 26972
// ComEnterUnit ( pom , Am_fac ) ;
26960: LD_VAR 0 1
26964: PPUSH
26965: LD_INT 10
26967: PPUSH
26968: CALL_OW 120
// enable ;
26972: ENABLE
// end ;
26973: PPOPN 1
26975: END
// every 0 0$17 do var pom ;
26976: GO 26978
26978: DISABLE
26979: LD_INT 0
26981: PPUSH
// begin pom = UnitsInside ( Am_fac ) ;
26982: LD_ADDR_VAR 0 1
26986: PUSH
26987: LD_INT 10
26989: PPUSH
26990: CALL_OW 313
26994: ST_TO_ADDR
// if pom > 3 then
26995: LD_VAR 0 1
26999: PUSH
27000: LD_INT 3
27002: GREATER
27003: IFFALSE 27024
// ComConstruct ( Am_fac , us_light_wheeled , engine_solar , control_manual , us_machine_gun ) ;
27005: LD_INT 10
27007: PPUSH
27008: LD_INT 1
27010: PPUSH
27011: LD_INT 2
27013: PPUSH
27014: LD_INT 1
27016: PPUSH
27017: LD_INT 2
27019: PPUSH
27020: CALL_OW 125
// while UnitsInside ( Am_fac ) > 3 do
27024: LD_INT 10
27026: PPUSH
27027: CALL_OW 313
27031: PUSH
27032: LD_INT 3
27034: GREATER
27035: IFFALSE 27046
// wait ( 0 0$10 ) ;
27037: LD_INT 350
27039: PPUSH
27040: CALL_OW 67
27044: GO 27024
// enable ;
27046: ENABLE
// end ;
27047: PPOPN 1
27049: END
// export function am_posily_videny_rusakama ; var i ; var videli ; begin
27050: LD_INT 0
27052: PPUSH
27053: PPUSH
27054: PPUSH
// videli = false ;
27055: LD_ADDR_VAR 0 3
27059: PUSH
27060: LD_INT 0
27062: ST_TO_ADDR
// for i in Am_posily do
27063: LD_ADDR_VAR 0 2
27067: PUSH
27068: LD_EXP 72
27072: PUSH
27073: FOR_IN
27074: IFFALSE 27102
// if See ( You , i ) then
27076: LD_EXP 1
27080: PPUSH
27081: LD_VAR 0 2
27085: PPUSH
27086: CALL_OW 292
27090: IFFALSE 27100
// videli = true ;
27092: LD_ADDR_VAR 0 3
27096: PUSH
27097: LD_INT 1
27099: ST_TO_ADDR
27100: GO 27073
27102: POP
27103: POP
// result := videli ;
27104: LD_ADDR_VAR 0 1
27108: PUSH
27109: LD_VAR 0 3
27113: ST_TO_ADDR
// end ;
27114: LD_VAR 0 1
27118: RET
// export function omicron_half_destroyed ; var pom , i ; var zije ; var a ; begin
27119: LD_INT 0
27121: PPUSH
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
// a = false ;
27126: LD_ADDR_VAR 0 5
27130: PUSH
27131: LD_INT 0
27133: ST_TO_ADDR
// if ( ( not IsOK ( Am_bu1 ) ) or ( GetSide ( Am_bu1 ) <> Amici ) ) and ( ( not IsOK ( Am_bu2 ) ) or GetSide ( Am_bu2 ) <> Amici ) and ( ( not IsOK ( Am_bu3 ) ) or GetSide ( Am_bu3 ) <> Amici ) and ( ( not IsOK ( Am_bar1 ) ) or GetSide ( Am_bar1 ) <> Amici ) and ( ( not IsOK ( Am_bar2 ) ) or GetSide ( Am_bar2 ) <> Amici ) then
27134: LD_INT 7
27136: PPUSH
27137: CALL_OW 302
27141: NOT
27142: PUSH
27143: LD_INT 7
27145: PPUSH
27146: CALL_OW 255
27150: PUSH
27151: LD_EXP 4
27155: NONEQUAL
27156: OR
27157: PUSH
27158: LD_INT 8
27160: PPUSH
27161: CALL_OW 302
27165: NOT
27166: PUSH
27167: LD_INT 8
27169: PPUSH
27170: CALL_OW 255
27174: PUSH
27175: LD_EXP 4
27179: NONEQUAL
27180: OR
27181: AND
27182: PUSH
27183: LD_INT 19
27185: PPUSH
27186: CALL_OW 302
27190: NOT
27191: PUSH
27192: LD_INT 19
27194: PPUSH
27195: CALL_OW 255
27199: PUSH
27200: LD_EXP 4
27204: NONEQUAL
27205: OR
27206: AND
27207: PUSH
27208: LD_INT 11
27210: PPUSH
27211: CALL_OW 302
27215: NOT
27216: PUSH
27217: LD_INT 11
27219: PPUSH
27220: CALL_OW 255
27224: PUSH
27225: LD_EXP 4
27229: NONEQUAL
27230: OR
27231: AND
27232: PUSH
27233: LD_INT 25
27235: PPUSH
27236: CALL_OW 302
27240: NOT
27241: PUSH
27242: LD_INT 25
27244: PPUSH
27245: CALL_OW 255
27249: PUSH
27250: LD_EXP 4
27254: NONEQUAL
27255: OR
27256: AND
27257: IFFALSE 27267
// a = true ;
27259: LD_ADDR_VAR 0 5
27263: PUSH
27264: LD_INT 1
27266: ST_TO_ADDR
// result = a ;
27267: LD_ADDR_VAR 0 1
27271: PUSH
27272: LD_VAR 0 5
27276: ST_TO_ADDR
// end ;
27277: LD_VAR 0 1
27281: RET
// export function stahnuti_amiku ; var i ; var pom , pom1 , pom2 , pomx ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
27289: PPUSH
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_INT 6
27297: PPUSH
27298: LD_INT 22
27300: PUSH
27301: LD_EXP 4
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 21
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PPUSH
27324: CALL_OW 70
27328: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27329: LD_ADDR_VAR 0 5
27333: PUSH
27334: LD_INT 6
27336: PPUSH
27337: LD_INT 22
27339: PUSH
27340: LD_EXP 4
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 21
27351: PUSH
27352: LD_INT 3
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PPUSH
27363: CALL_OW 70
27367: ST_TO_ADDR
// for i in pom2 do
27368: LD_ADDR_VAR 0 2
27372: PUSH
27373: LD_VAR 0 5
27377: PUSH
27378: FOR_IN
27379: IFFALSE 27419
// if UnitsInside ( i ) <> 0 then
27381: LD_VAR 0 2
27385: PPUSH
27386: CALL_OW 313
27390: PUSH
27391: LD_INT 0
27393: NONEQUAL
27394: IFFALSE 27417
// pom = pom ^ UnitsInside ( i ) ;
27396: LD_ADDR_VAR 0 3
27400: PUSH
27401: LD_VAR 0 3
27405: PUSH
27406: LD_VAR 0 2
27410: PPUSH
27411: CALL_OW 313
27415: ADD
27416: ST_TO_ADDR
27417: GO 27378
27419: POP
27420: POP
// ComExitBuilding ( pom ) ;
27421: LD_VAR 0 3
27425: PPUSH
27426: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27430: LD_VAR 0 3
27434: PPUSH
27435: LD_INT 6
27437: PPUSH
27438: LD_INT 2
27440: PPUSH
27441: CALL_OW 171
// wait ( 0 0$1 ) ;
27445: LD_INT 35
27447: PPUSH
27448: CALL_OW 67
// while pom > 0 do
27452: LD_VAR 0 3
27456: PUSH
27457: LD_INT 0
27459: GREATER
27460: IFFALSE 27696
// begin pom1 = FilterUnitsInArea ( ODBER_AM2 , [ [ f_side , Amici ] ] ) ;
27462: LD_ADDR_VAR 0 4
27466: PUSH
27467: LD_INT 38
27469: PPUSH
27470: LD_INT 22
27472: PUSH
27473: LD_EXP 4
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: EMPTY
27483: LIST
27484: PPUSH
27485: CALL_OW 70
27489: ST_TO_ADDR
// for i in pom1 do
27490: LD_ADDR_VAR 0 2
27494: PUSH
27495: LD_VAR 0 4
27499: PUSH
27500: FOR_IN
27501: IFFALSE 27530
// begin RemoveUnit ( i ) ;
27503: LD_VAR 0 2
27507: PPUSH
27508: CALL_OW 64
// pom = pom diff i ;
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_VAR 0 3
27521: PUSH
27522: LD_VAR 0 2
27526: DIFF
27527: ST_TO_ADDR
// end ;
27528: GO 27500
27530: POP
27531: POP
// wait ( 0 0$1 ) ;
27532: LD_INT 35
27534: PPUSH
27535: CALL_OW 67
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27539: LD_ADDR_VAR 0 3
27543: PUSH
27544: LD_INT 6
27546: PPUSH
27547: LD_INT 22
27549: PUSH
27550: LD_EXP 4
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 21
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PPUSH
27573: CALL_OW 70
27577: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27578: LD_ADDR_VAR 0 5
27582: PUSH
27583: LD_INT 6
27585: PPUSH
27586: LD_INT 22
27588: PUSH
27589: LD_EXP 4
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 21
27600: PUSH
27601: LD_INT 3
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PPUSH
27612: CALL_OW 70
27616: ST_TO_ADDR
// for i in pom2 do
27617: LD_ADDR_VAR 0 2
27621: PUSH
27622: LD_VAR 0 5
27626: PUSH
27627: FOR_IN
27628: IFFALSE 27668
// if UnitsInside ( i ) <> 0 then
27630: LD_VAR 0 2
27634: PPUSH
27635: CALL_OW 313
27639: PUSH
27640: LD_INT 0
27642: NONEQUAL
27643: IFFALSE 27666
// pom = pom ^ UnitsInside ( i ) ;
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_VAR 0 3
27654: PUSH
27655: LD_VAR 0 2
27659: PPUSH
27660: CALL_OW 313
27664: ADD
27665: ST_TO_ADDR
27666: GO 27627
27668: POP
27669: POP
// ComExitBuilding ( pom ) ;
27670: LD_VAR 0 3
27674: PPUSH
27675: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
27679: LD_VAR 0 3
27683: PPUSH
27684: LD_INT 6
27686: PPUSH
27687: LD_INT 2
27689: PPUSH
27690: CALL_OW 171
// end ;
27694: GO 27452
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_INT 22
27703: PPUSH
27704: LD_INT 22
27706: PUSH
27707: LD_EXP 4
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 21
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PPUSH
27730: CALL_OW 70
27734: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27735: LD_ADDR_VAR 0 5
27739: PUSH
27740: LD_INT 22
27742: PPUSH
27743: LD_INT 22
27745: PUSH
27746: LD_EXP 4
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 21
27757: PUSH
27758: LD_INT 3
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 70
27773: ST_TO_ADDR
// for i in pom2 do
27774: LD_ADDR_VAR 0 2
27778: PUSH
27779: LD_VAR 0 5
27783: PUSH
27784: FOR_IN
27785: IFFALSE 27825
// if UnitsInside ( i ) <> 0 then
27787: LD_VAR 0 2
27791: PPUSH
27792: CALL_OW 313
27796: PUSH
27797: LD_INT 0
27799: NONEQUAL
27800: IFFALSE 27823
// pom = pom ^ UnitsInside ( i ) ;
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_VAR 0 3
27811: PUSH
27812: LD_VAR 0 2
27816: PPUSH
27817: CALL_OW 313
27821: ADD
27822: ST_TO_ADDR
27823: GO 27784
27825: POP
27826: POP
// ComExitBuilding ( pom ) ;
27827: LD_VAR 0 3
27831: PPUSH
27832: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
27836: LD_VAR 0 3
27840: PPUSH
27841: LD_INT 138
27843: PPUSH
27844: LD_INT 40
27846: PPUSH
27847: CALL_OW 171
// wait ( 0 0$1 ) ;
27851: LD_INT 35
27853: PPUSH
27854: CALL_OW 67
// while pom + 0 > 0 do
27858: LD_VAR 0 3
27862: PUSH
27863: LD_INT 0
27865: PLUS
27866: PUSH
27867: LD_INT 0
27869: GREATER
27870: IFFALSE 28106
// begin pom1 = FilterUnitsInArea ( ODBER_AM , [ [ f_side , Amici ] ] ) ;
27872: LD_ADDR_VAR 0 4
27876: PUSH
27877: LD_INT 35
27879: PPUSH
27880: LD_INT 22
27882: PUSH
27883: LD_EXP 4
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: EMPTY
27893: LIST
27894: PPUSH
27895: CALL_OW 70
27899: ST_TO_ADDR
// for i in pom1 do
27900: LD_ADDR_VAR 0 2
27904: PUSH
27905: LD_VAR 0 4
27909: PUSH
27910: FOR_IN
27911: IFFALSE 27940
// begin RemoveUnit ( i ) ;
27913: LD_VAR 0 2
27917: PPUSH
27918: CALL_OW 64
// pom = pom diff i ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_VAR 0 3
27931: PUSH
27932: LD_VAR 0 2
27936: DIFF
27937: ST_TO_ADDR
// end ;
27938: GO 27910
27940: POP
27941: POP
// wait ( 0 0$1 ) ;
27942: LD_INT 35
27944: PPUSH
27945: CALL_OW 67
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27949: LD_ADDR_VAR 0 3
27953: PUSH
27954: LD_INT 22
27956: PPUSH
27957: LD_INT 22
27959: PUSH
27960: LD_EXP 4
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 21
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PPUSH
27983: CALL_OW 70
27987: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27988: LD_ADDR_VAR 0 5
27992: PUSH
27993: LD_INT 22
27995: PPUSH
27996: LD_INT 22
27998: PUSH
27999: LD_EXP 4
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 21
28010: PUSH
28011: LD_INT 3
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PPUSH
28022: CALL_OW 70
28026: ST_TO_ADDR
// for i in pom2 do
28027: LD_ADDR_VAR 0 2
28031: PUSH
28032: LD_VAR 0 5
28036: PUSH
28037: FOR_IN
28038: IFFALSE 28078
// if UnitsInside ( i ) <> 0 then
28040: LD_VAR 0 2
28044: PPUSH
28045: CALL_OW 313
28049: PUSH
28050: LD_INT 0
28052: NONEQUAL
28053: IFFALSE 28076
// pom = pom ^ UnitsInside ( i ) ;
28055: LD_ADDR_VAR 0 3
28059: PUSH
28060: LD_VAR 0 3
28064: PUSH
28065: LD_VAR 0 2
28069: PPUSH
28070: CALL_OW 313
28074: ADD
28075: ST_TO_ADDR
28076: GO 28037
28078: POP
28079: POP
// ComExitBuilding ( pom ) ;
28080: LD_VAR 0 3
28084: PPUSH
28085: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
28089: LD_VAR 0 3
28093: PPUSH
28094: LD_INT 138
28096: PPUSH
28097: LD_INT 40
28099: PPUSH
28100: CALL_OW 171
// end ;
28104: GO 27858
// end ; end_of_file
28106: LD_VAR 0 1
28110: RET
// var arabsky_utok_zacal ; export posilani_arabskych_hlidek ; every 0 0$0.1 do
28111: GO 28113
28113: DISABLE
// begin posilani_arabskych_hlidek = false ;
28114: LD_ADDR_EXP 74
28118: PUSH
28119: LD_INT 0
28121: ST_TO_ADDR
// end ;
28122: END
// export function utok_arabu ; var i , pom ; begin
28123: LD_INT 0
28125: PPUSH
28126: PPUSH
28127: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
28128: LD_ADDR_VAR 0 3
28132: PUSH
28133: LD_INT 22
28135: PUSH
28136: LD_EXP 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: EMPTY
28146: LIST
28147: PPUSH
28148: CALL_OW 69
28152: ST_TO_ADDR
// ArDontAttackPlayer ( true ) ;
28153: LD_INT 1
28155: PPUSH
28156: CALL 29001 0 1
// InGameOn ;
28160: CALL_OW 8
// ComStop ( pom ) ;
28164: LD_VAR 0 3
28168: PPUSH
28169: CALL_OW 141
// EnableVideoExclamations ;
28173: CALL_OW 498
// CenterNowOnXY ( 142 , 80 ) ;
28177: LD_INT 142
28179: PPUSH
28180: LD_INT 80
28182: PPUSH
28183: CALL_OW 86
// arabsky_utok_zacal = true ;
28187: LD_ADDR_LOC 27
28191: PUSH
28192: LD_INT 1
28194: ST_TO_ADDR
// posli_rusy_pryc ;
28195: CALL 7932 0 0
// schovej_kurina ;
28199: CALL 9031 0 0
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 1 ] , Opoce1 , false ) ;
28203: LD_EXP 60
28207: PUSH
28208: LD_INT 1
28210: ARRAY
28211: PPUSH
28212: LD_INT 10
28214: PPUSH
28215: LD_INT 0
28217: PPUSH
28218: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 2 ] , Opoce2 , false ) ;
28222: LD_EXP 60
28226: PUSH
28227: LD_INT 2
28229: ARRAY
28230: PPUSH
28231: LD_INT 11
28233: PPUSH
28234: LD_INT 0
28236: PPUSH
28237: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 3 ] , Opoce2 , false ) ;
28241: LD_EXP 60
28245: PUSH
28246: LD_INT 3
28248: ARRAY
28249: PPUSH
28250: LD_INT 11
28252: PPUSH
28253: LD_INT 0
28255: PPUSH
28256: CALL_OW 49
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 134 , 62 ) ;
28260: LD_EXP 60
28264: PUSH
28265: LD_INT 1
28267: ARRAY
28268: PPUSH
28269: LD_INT 134
28271: PPUSH
28272: LD_INT 62
28274: PPUSH
28275: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 133 , 69 ) ;
28279: LD_EXP 60
28283: PUSH
28284: LD_INT 1
28286: ARRAY
28287: PPUSH
28288: LD_INT 133
28290: PPUSH
28291: LD_INT 69
28293: PPUSH
28294: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_bu1 ) ;
28298: LD_EXP 60
28302: PUSH
28303: LD_INT 1
28305: ARRAY
28306: PPUSH
28307: LD_INT 3
28309: PPUSH
28310: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 142 , 94 ) ;
28314: LD_EXP 60
28318: PUSH
28319: LD_INT 2
28321: ARRAY
28322: PPUSH
28323: LD_INT 142
28325: PPUSH
28326: LD_INT 94
28328: PPUSH
28329: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 140 , 90 ) ;
28333: LD_EXP 60
28337: PUSH
28338: LD_INT 2
28340: ARRAY
28341: PPUSH
28342: LD_INT 140
28344: PPUSH
28345: LD_INT 90
28347: PPUSH
28348: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_el1 ) ;
28352: LD_EXP 60
28356: PUSH
28357: LD_INT 2
28359: ARRAY
28360: PPUSH
28361: LD_INT 14
28363: PPUSH
28364: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 143 , 94 ) ;
28368: LD_EXP 60
28372: PUSH
28373: LD_INT 3
28375: ARRAY
28376: PPUSH
28377: LD_INT 143
28379: PPUSH
28380: LD_INT 94
28382: PPUSH
28383: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 141 , 90 ) ;
28387: LD_EXP 60
28391: PUSH
28392: LD_INT 3
28394: ARRAY
28395: PPUSH
28396: LD_INT 141
28398: PPUSH
28399: LD_INT 90
28401: PPUSH
28402: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_el1 ) ;
28406: LD_EXP 60
28410: PUSH
28411: LD_INT 3
28413: ARRAY
28414: PPUSH
28415: LD_INT 14
28417: PPUSH
28418: CALL_OW 175
// music_nat = nation_arabian ;
28422: LD_ADDR_OWVAR 71
28426: PUSH
28427: LD_INT 2
28429: ST_TO_ADDR
// CenterOnXY ( 142 , 80 ) ;
28430: LD_INT 142
28432: PPUSH
28433: LD_INT 80
28435: PPUSH
28436: CALL_OW 84
// for i in ARABI_SELF_AUTA do
28440: LD_ADDR_VAR 0 2
28444: PUSH
28445: LD_EXP 63
28449: PUSH
28450: FOR_IN
28451: IFFALSE 28470
// PlaceUnitArea ( i , Arabi2 , false ) ;
28453: LD_VAR 0 2
28457: PPUSH
28458: LD_INT 13
28460: PPUSH
28461: LD_INT 0
28463: PPUSH
28464: CALL_OW 49
28468: GO 28450
28470: POP
28471: POP
// ComAttackUnit ( ARABI_SELF_AUTA [ 1 ] , RU1_bar2 ) ;
28472: LD_EXP 63
28476: PUSH
28477: LD_INT 1
28479: ARRAY
28480: PPUSH
28481: LD_INT 17
28483: PPUSH
28484: CALL_OW 115
// ComWait ( ARABI_SELF_AUTA [ 2 ] , 0 0$3 ) ;
28488: LD_EXP 63
28492: PUSH
28493: LD_INT 2
28495: ARRAY
28496: PPUSH
28497: LD_INT 105
28499: PPUSH
28500: CALL_OW 142
// AddComAttackUnit ( ARABI_SELF_AUTA [ 2 ] , RU1_bar2 ) ;
28504: LD_EXP 63
28508: PUSH
28509: LD_INT 2
28511: ARRAY
28512: PPUSH
28513: LD_INT 17
28515: PPUSH
28516: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
28520: LD_INT 142
28522: PPUSH
28523: LD_INT 80
28525: PPUSH
28526: CALL_OW 84
// for i in ARABI_PRVNI_VLNA do
28530: LD_ADDR_VAR 0 2
28534: PUSH
28535: LD_EXP 61
28539: PUSH
28540: FOR_IN
28541: IFFALSE 28560
// PlaceUnitArea ( i , Arabi1 , false ) ;
28543: LD_VAR 0 2
28547: PPUSH
28548: LD_INT 12
28550: PPUSH
28551: LD_INT 0
28553: PPUSH
28554: CALL_OW 49
28558: GO 28540
28560: POP
28561: POP
// ComMoveXY ( ARABI_PRVNI_VLNA , 139 , 78 ) ;
28562: LD_EXP 61
28566: PPUSH
28567: LD_INT 139
28569: PPUSH
28570: LD_INT 78
28572: PPUSH
28573: CALL_OW 111
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bar1 ) ;
28577: LD_EXP 61
28581: PPUSH
28582: LD_INT 2
28584: PPUSH
28585: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu2 ) ;
28589: LD_EXP 61
28593: PPUSH
28594: LD_INT 4
28596: PPUSH
28597: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu1 ) ;
28601: LD_EXP 61
28605: PPUSH
28606: LD_INT 3
28608: PPUSH
28609: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab2 ) ;
28613: LD_EXP 61
28617: PPUSH
28618: LD_INT 16
28620: PPUSH
28621: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_dep ) ;
28625: LD_EXP 61
28629: PPUSH
28630: LD_INT 1
28632: PPUSH
28633: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab1 ) ;
28637: LD_EXP 61
28641: PPUSH
28642: LD_INT 6
28644: PPUSH
28645: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_fac ) ;
28649: LD_EXP 61
28653: PPUSH
28654: LD_INT 5
28656: PPUSH
28657: CALL_OW 175
// AddComAgressiveMove ( ARABI_PRVNI_VLNA , 143 , 79 ) ;
28661: LD_EXP 61
28665: PPUSH
28666: LD_INT 143
28668: PPUSH
28669: LD_INT 79
28671: PPUSH
28672: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28676: LD_INT 142
28678: PPUSH
28679: LD_INT 80
28681: PPUSH
28682: CALL_OW 84
// DisableVideoExclamations ;
28686: CALL_OW 499
// InGameOff ;
28690: CALL_OW 9
// interface_hidden := true ;
28694: LD_ADDR_OWVAR 54
28698: PUSH
28699: LD_INT 1
28701: ST_TO_ADDR
// kecy_behem_utoku_arabu ;
28702: CALL 13576 0 0
// InGameOn ;
28706: CALL_OW 8
// EnableVideoExclamations ;
28710: CALL_OW 498
// CenterOnXY ( 142 , 80 ) ;
28714: LD_INT 142
28716: PPUSH
28717: LD_INT 80
28719: PPUSH
28720: CALL_OW 84
// wait ( 0 0$4 ) ;
28724: LD_INT 140
28726: PPUSH
28727: CALL_OW 67
// posli_kurina_na_smrt ;
28731: CALL 9051 0 0
// for i in ARABI_FLAME_LIST do
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: LD_EXP 62
28744: PUSH
28745: FOR_IN
28746: IFFALSE 28765
// PlaceUnitArea ( i , Arabi2 , false ) ;
28748: LD_VAR 0 2
28752: PPUSH
28753: LD_INT 13
28755: PPUSH
28756: LD_INT 0
28758: PPUSH
28759: CALL_OW 49
28763: GO 28745
28765: POP
28766: POP
// ComMoveXY ( ARABI_FLAME_LIST , 139 , 78 ) ;
28767: LD_EXP 62
28771: PPUSH
28772: LD_INT 139
28774: PPUSH
28775: LD_INT 78
28777: PPUSH
28778: CALL_OW 111
// AddComAttackUnit ( ARABI_FLAME_LIST , RU1_bar1 ) ;
28782: LD_EXP 62
28786: PPUSH
28787: LD_INT 2
28789: PPUSH
28790: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
28794: LD_INT 142
28796: PPUSH
28797: LD_INT 80
28799: PPUSH
28800: CALL_OW 84
// for i in ARABI_VOJACI do
28804: LD_ADDR_VAR 0 2
28808: PUSH
28809: LD_EXP 64
28813: PUSH
28814: FOR_IN
28815: IFFALSE 28834
// PlaceUnitArea ( i , Arabi1 , false ) ;
28817: LD_VAR 0 2
28821: PPUSH
28822: LD_INT 12
28824: PPUSH
28825: LD_INT 0
28827: PPUSH
28828: CALL_OW 49
28832: GO 28814
28834: POP
28835: POP
// ComMoveXY ( ARABI_VOJACI , 153 , 84 ) ;
28836: LD_EXP 64
28840: PPUSH
28841: LD_INT 153
28843: PPUSH
28844: LD_INT 84
28846: PPUSH
28847: CALL_OW 111
// AddComAgressiveMove ( ARABI_VOJACI , 150 , 83 ) ;
28851: LD_EXP 64
28855: PPUSH
28856: LD_INT 150
28858: PPUSH
28859: LD_INT 83
28861: PPUSH
28862: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 78 ) ;
28866: LD_EXP 64
28870: PPUSH
28871: LD_INT 141
28873: PPUSH
28874: LD_INT 78
28876: PPUSH
28877: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 86 ) ;
28881: LD_EXP 64
28885: PPUSH
28886: LD_INT 141
28888: PPUSH
28889: LD_INT 86
28891: PPUSH
28892: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28896: LD_INT 142
28898: PPUSH
28899: LD_INT 80
28901: PPUSH
28902: CALL_OW 84
// wait ( 0 0$5 ) ;
28906: LD_INT 175
28908: PPUSH
28909: CALL_OW 67
// for i in ARABI_doraz do
28913: LD_ADDR_VAR 0 2
28917: PUSH
28918: LD_EXP 65
28922: PUSH
28923: FOR_IN
28924: IFFALSE 28943
// PlaceUnitArea ( i , Arabi1 , false ) ;
28926: LD_VAR 0 2
28930: PPUSH
28931: LD_INT 12
28933: PPUSH
28934: LD_INT 0
28936: PPUSH
28937: CALL_OW 49
28941: GO 28923
28943: POP
28944: POP
// ComMoveXY ( ARABI_doraz , 153 , 85 ) ;
28945: LD_EXP 65
28949: PPUSH
28950: LD_INT 153
28952: PPUSH
28953: LD_INT 85
28955: PPUSH
28956: CALL_OW 111
// AddComAttackUnit ( ARABI_doraz , RU1_dep ) ;
28960: LD_EXP 65
28964: PPUSH
28965: LD_INT 1
28967: PPUSH
28968: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab1 ) ;
28972: LD_EXP 65
28976: PPUSH
28977: LD_INT 6
28979: PPUSH
28980: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab2 ) ;
28984: LD_EXP 65
28988: PPUSH
28989: LD_INT 16
28991: PPUSH
28992: CALL_OW 175
// end ;
28996: LD_VAR 0 1
29000: RET
// export function ArDontAttackPlayer ( bol ) ; var i ; begin
29001: LD_INT 0
29003: PPUSH
29004: PPUSH
// for i in FilterAllUnits ( [ f_side , You ] ) do
29005: LD_ADDR_VAR 0 3
29009: PUSH
29010: LD_INT 22
29012: PUSH
29013: LD_EXP 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PPUSH
29022: CALL_OW 69
29026: PUSH
29027: FOR_IN
29028: IFFALSE 29068
// if bol then
29030: LD_VAR 0 1
29034: IFFALSE 29052
// DoNotAttack ( Arabi , i ) else
29036: LD_EXP 5
29040: PPUSH
29041: LD_VAR 0 3
29045: PPUSH
29046: CALL_OW 471
29050: GO 29066
// NormalAttack ( Arabi , i ) ;
29052: LD_EXP 5
29056: PPUSH
29057: LD_VAR 0 3
29061: PPUSH
29062: CALL_OW 472
29066: GO 29027
29068: POP
29069: POP
// end ;
29070: LD_VAR 0 2
29074: RET
// every 0 0$5 trigger arabsky_utok_zacal do var pom , pom1 , i ; var utek ;
29075: LD_LOC 27
29079: IFFALSE 29263
29081: GO 29083
29083: DISABLE
29084: LD_INT 0
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
// begin utek = [ ] ;
29090: LD_ADDR_VAR 0 4
29094: PUSH
29095: EMPTY
29096: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) ;
29097: LD_ADDR_VAR 0 1
29101: PUSH
29102: LD_INT 14
29104: PPUSH
29105: LD_INT 22
29107: PUSH
29108: LD_EXP 2
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 50
29119: PUSH
29120: EMPTY
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PPUSH
29127: CALL_OW 70
29131: ST_TO_ADDR
// if pom < 2 then
29132: LD_VAR 0 1
29136: PUSH
29137: LD_INT 2
29139: LESS
29140: IFFALSE 29237
// begin pom1 = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_ok ] ] ) ;
29142: LD_ADDR_VAR 0 2
29146: PUSH
29147: LD_INT 22
29149: PUSH
29150: LD_EXP 5
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 50
29161: PUSH
29162: EMPTY
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PPUSH
29169: CALL_OW 69
29173: ST_TO_ADDR
// if pom1 > 0 then
29174: LD_VAR 0 2
29178: PUSH
29179: LD_INT 0
29181: GREATER
29182: IFFALSE 29237
// for i in pom1 do
29184: LD_ADDR_VAR 0 3
29188: PUSH
29189: LD_VAR 0 2
29193: PUSH
29194: FOR_IN
29195: IFFALSE 29235
// if utek < 3 then
29197: LD_VAR 0 4
29201: PUSH
29202: LD_INT 3
29204: LESS
29205: IFFALSE 29225
// utek = utek ^ i else
29207: LD_ADDR_VAR 0 4
29211: PUSH
29212: LD_VAR 0 4
29216: PUSH
29217: LD_VAR 0 3
29221: ADD
29222: ST_TO_ADDR
29223: GO 29233
// arabsky_utok_zacal = false ;
29225: LD_ADDR_LOC 27
29229: PUSH
29230: LD_INT 0
29232: ST_TO_ADDR
29233: GO 29194
29235: POP
29236: POP
// end ; if utek > 0 then
29237: LD_VAR 0 4
29241: PUSH
29242: LD_INT 0
29244: GREATER
29245: IFFALSE 29262
// ComMoveXY ( utek , 166 , 95 ) ;
29247: LD_VAR 0 4
29251: PPUSH
29252: LD_INT 166
29254: PPUSH
29255: LD_INT 95
29257: PPUSH
29258: CALL_OW 111
// enable ;
29262: ENABLE
// end ;
29263: PPOPN 4
29265: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) < 2 do var pom , i ;
29266: LD_INT 14
29268: PPUSH
29269: LD_INT 22
29271: PUSH
29272: LD_EXP 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 50
29283: PUSH
29284: EMPTY
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PPUSH
29291: CALL_OW 70
29295: PUSH
29296: LD_INT 2
29298: LESS
29299: IFFALSE 29363
29301: GO 29303
29303: DISABLE
29304: LD_INT 0
29306: PPUSH
29307: PPUSH
// begin pom = FilterUnitsInArea ( Arabi2 , [ [ f_side , Arabi ] ] ) ;
29308: LD_ADDR_VAR 0 1
29312: PUSH
29313: LD_INT 13
29315: PPUSH
29316: LD_INT 22
29318: PUSH
29319: LD_EXP 5
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: PPUSH
29331: CALL_OW 70
29335: ST_TO_ADDR
// for i in pom do
29336: LD_ADDR_VAR 0 2
29340: PUSH
29341: LD_VAR 0 1
29345: PUSH
29346: FOR_IN
29347: IFFALSE 29360
// RemoveUnit ( i ) ;
29349: LD_VAR 0 2
29353: PPUSH
29354: CALL_OW 64
29358: GO 29346
29360: POP
29361: POP
// enable ;
29362: ENABLE
// end ;
29363: PPOPN 2
29365: END
// every 0 0$4 trigger arabsky_utok_zacal do
29366: LD_LOC 27
29370: IFFALSE 29466
29372: GO 29374
29374: DISABLE
// begin if GetLives ( RU1_el1 ) < 1000 and GetLives ( RU1_el1 ) < 150 then
29375: LD_INT 14
29377: PPUSH
29378: CALL_OW 256
29382: PUSH
29383: LD_INT 1000
29385: LESS
29386: PUSH
29387: LD_INT 14
29389: PPUSH
29390: CALL_OW 256
29394: PUSH
29395: LD_INT 150
29397: LESS
29398: AND
29399: IFFALSE 29411
// SetLives ( RU1_el1 , 150 ) ;
29401: LD_INT 14
29403: PPUSH
29404: LD_INT 150
29406: PPUSH
29407: CALL_OW 234
// if GetLives ( RU1_el2 ) < 1000 and GetLives ( RU1_el2 ) < 150 then
29411: LD_INT 15
29413: PPUSH
29414: CALL_OW 256
29418: PUSH
29419: LD_INT 1000
29421: LESS
29422: PUSH
29423: LD_INT 15
29425: PPUSH
29426: CALL_OW 256
29430: PUSH
29431: LD_INT 150
29433: LESS
29434: AND
29435: IFFALSE 29447
// SetLives ( RU1_el2 , 150 ) ;
29437: LD_INT 15
29439: PPUSH
29440: LD_INT 150
29442: PPUSH
29443: CALL_OW 234
// if IsOK ( RU1_el1 ) or IsOK ( RU1_el2 ) then
29447: LD_INT 14
29449: PPUSH
29450: CALL_OW 302
29454: PUSH
29455: LD_INT 15
29457: PPUSH
29458: CALL_OW 302
29462: OR
29463: IFFALSE 29466
// enable ;
29465: ENABLE
// end ;
29466: END
// every 0 0$5 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) <= 3 do
29467: LD_INT 14
29469: PPUSH
29470: LD_INT 22
29472: PUSH
29473: LD_EXP 2
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 50
29484: PUSH
29485: EMPTY
29486: LIST
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PPUSH
29492: CALL_OW 70
29496: PUSH
29497: LD_INT 3
29499: LESSEQUAL
29500: IFFALSE 29544
29502: GO 29504
29504: DISABLE
// begin ArDontAttackPlayer ( false ) ;
29505: LD_INT 0
29507: PPUSH
29508: CALL 29001 0 1
// arabi_kirov_posily_posli ;
29512: CALL 29629 0 0
// DisableVideoExclamations ;
29516: CALL_OW 499
// music_nat = 0 ;
29520: LD_ADDR_OWVAR 71
29524: PUSH
29525: LD_INT 0
29527: ST_TO_ADDR
// chmo_6 ;
29528: CALL 16272 0 0
// InGameOff ;
29532: CALL_OW 9
// stav_omikron = 8 ;
29536: LD_ADDR_EXP 39
29540: PUSH
29541: LD_INT 8
29543: ST_TO_ADDR
// end ;
29544: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) > 2 do var pom ;
29545: LD_INT 14
29547: PPUSH
29548: LD_INT 22
29550: PUSH
29551: LD_EXP 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: PPUSH
29563: CALL_OW 70
29567: PUSH
29568: LD_INT 2
29570: GREATER
29571: IFFALSE 29626
29573: GO 29575
29575: DISABLE
29576: LD_INT 0
29578: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) ;
29579: LD_ADDR_VAR 0 1
29583: PUSH
29584: LD_INT 14
29586: PPUSH
29587: LD_INT 22
29589: PUSH
29590: LD_EXP 2
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: PPUSH
29602: CALL_OW 70
29606: ST_TO_ADDR
// ComAttackUnit ( ARABI_doraz , pom [ 1 ] ) ;
29607: LD_EXP 65
29611: PPUSH
29612: LD_VAR 0 1
29616: PUSH
29617: LD_INT 1
29619: ARRAY
29620: PPUSH
29621: CALL_OW 115
// enable ;
29625: ENABLE
// end ;
29626: PPOPN 1
29628: END
// function arabi_kirov_posily_posli ; var i ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// for i in ARABI_KIROV_POSILY do
29633: LD_ADDR_VAR 0 2
29637: PUSH
29638: LD_EXP 66
29642: PUSH
29643: FOR_IN
29644: IFFALSE 29663
// PlaceUnitArea ( i , Arabi3 , false ) ;
29646: LD_VAR 0 2
29650: PPUSH
29651: LD_INT 33
29653: PPUSH
29654: LD_INT 0
29656: PPUSH
29657: CALL_OW 49
29661: GO 29643
29663: POP
29664: POP
// ComAgressiveMove ( ARABI_KIROV_POSILY , 142 , 84 ) ;
29665: LD_EXP 66
29669: PPUSH
29670: LD_INT 142
29672: PPUSH
29673: LD_INT 84
29675: PPUSH
29676: CALL_OW 114
// end ;
29680: LD_VAR 0 1
29684: RET
