// export ru , ru2 , am ; export ams0 , ams1 , ams2 , ams3 , ams4 , ams5 , ams6 , ams7 , ams8 , ams9 , amsa , amsb , amsc ; export ams0_sk , ams1_sk , ams2_sk , ams3_sk , ams4_sk , ams5_sk , ams6_sk , ams7_sk , ams8_sk , ams9_sk , amsa_sk , amsb_sk , amsc_sk ; export ams_1 , ams_2 , ams_3 , ams_4 , ams_5 , ams_6 ; export ams_1_sk , ams_2_sk , ams_3_sk , ams_4_sk , ams_5_sk , ams_6_sk ; export amm0 , amm0_sk , amm1 , amm1_sk , amm2 , amm2_sk , amm3 , amm3_sk , amm4 , amm4_sk , amm5 , amm5_sk , amm6 , amm6_sk , amm7 , amm7_sk ; export amv1 , amv1_ch , amv1_wp , amv2 , amv2_ch , amv2_wp , amv3 , amv3_ch , amv3_wp , amv4 , amv4_ch , amv4_wp , amv5 , amv5_ch , amv5_wp , amv6 , amv6_ch , amv6_wp , amv7 , amv7_ch , amv7_wp ; export amsn0 , amsn0_sk , amsn1 , amsn1_sk ; export ame0 , ame0_sk , ame1 , ame1_sk , ame2 , ame2_sk , ame3 , ame3_sk , ame4 , ame4_sk , ame5 , ame5_sk ; export chcipli , telepused , zdrhame , rychlik ; export dontGoOutSideArea ; var supply ; function setvars ; var tmp , tmp1 , tmp2 ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// ru = 3 ;
   6: LD_ADDR_EXP 1
  10: PUSH
  11: LD_INT 3
  13: ST_TO_ADDR
// ru2 = 6 ;
  14: LD_ADDR_EXP 2
  18: PUSH
  19: LD_INT 6
  21: ST_TO_ADDR
// am = 1 ;
  22: LD_ADDR_EXP 3
  26: PUSH
  27: LD_INT 1
  29: ST_TO_ADDR
// dontGoOutSideArea := false ;
  30: LD_ADDR_EXP 99
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// chcipli = 0 ;
  38: LD_ADDR_EXP 95
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// telepused = 0 ;
  46: LD_ADDR_EXP 96
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// supply = 19 ;
  54: LD_ADDR_LOC 1
  58: PUSH
  59: LD_INT 19
  61: ST_TO_ADDR
// lastsay = 0 ;
  62: LD_ADDR_EXP 126
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// nesahat = true ;
  70: LD_ADDR_EXP 127
  74: PUSH
  75: LD_INT 1
  77: ST_TO_ADDR
// rychlik = false ;
  78: LD_ADDR_EXP 98
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// zdrhame = 750 ;
  86: LD_ADDR_EXP 97
  90: PUSH
  91: LD_INT 750
  93: ST_TO_ADDR
// supply = [ 30 , 24 , 20 ] [ difficulty ] ;
  94: LD_ADDR_LOC 1
  98: PUSH
  99: LD_INT 30
 101: PUSH
 102: LD_INT 24
 104: PUSH
 105: LD_INT 20
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: LIST
 112: PUSH
 113: LD_OWVAR 67
 117: ARRAY
 118: ST_TO_ADDR
// ams0_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 119: LD_ADDR_EXP 17
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 5
 129: PUSH
 130: LD_INT 7
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: ST_TO_ADDR
// ams1_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 144: LD_ADDR_EXP 18
 148: PUSH
 149: LD_INT 3
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: EMPTY
 159: LIST
 160: LIST
 161: LIST
 162: PUSH
 163: LD_OWVAR 67
 167: ARRAY
 168: ST_TO_ADDR
// ams2_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 169: LD_ADDR_EXP 19
 173: PUSH
 174: LD_INT 5
 176: PUSH
 177: LD_INT 7
 179: PUSH
 180: LD_INT 9
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_OWVAR 67
 192: ARRAY
 193: ST_TO_ADDR
// ams3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 194: LD_ADDR_EXP 20
 198: PUSH
 199: LD_INT 5
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: LD_INT 9
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: LD_OWVAR 67
 217: ARRAY
 218: ST_TO_ADDR
// ams4_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 219: LD_ADDR_EXP 21
 223: PUSH
 224: LD_INT 5
 226: PUSH
 227: LD_INT 7
 229: PUSH
 230: LD_INT 9
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: PUSH
 238: LD_OWVAR 67
 242: ARRAY
 243: ST_TO_ADDR
// ams5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 7
 254: PUSH
 255: LD_INT 9
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: PUSH
 263: LD_OWVAR 67
 267: ARRAY
 268: ST_TO_ADDR
// ams6_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 5
 276: PUSH
 277: LD_INT 7
 279: PUSH
 280: LD_INT 9
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: LIST
 287: PUSH
 288: LD_OWVAR 67
 292: ARRAY
 293: ST_TO_ADDR
// ams7_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 294: LD_ADDR_EXP 24
 298: PUSH
 299: LD_INT 3
 301: PUSH
 302: LD_INT 5
 304: PUSH
 305: LD_INT 7
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: PUSH
 313: LD_OWVAR 67
 317: ARRAY
 318: ST_TO_ADDR
// ams8_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 319: LD_ADDR_EXP 25
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: LD_INT 5
 329: PUSH
 330: LD_INT 7
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PUSH
 338: LD_OWVAR 67
 342: ARRAY
 343: ST_TO_ADDR
// ams9_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 344: LD_ADDR_EXP 26
 348: PUSH
 349: LD_INT 3
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: LD_INT 7
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: PUSH
 363: LD_OWVAR 67
 367: ARRAY
 368: ST_TO_ADDR
// amsa_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 369: LD_ADDR_EXP 27
 373: PUSH
 374: LD_INT 3
 376: PUSH
 377: LD_INT 5
 379: PUSH
 380: LD_INT 7
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: LD_OWVAR 67
 392: ARRAY
 393: ST_TO_ADDR
// amsb_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 394: LD_ADDR_EXP 28
 398: PUSH
 399: LD_INT 3
 401: PUSH
 402: LD_INT 5
 404: PUSH
 405: LD_INT 7
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: PUSH
 413: LD_OWVAR 67
 417: ARRAY
 418: ST_TO_ADDR
// amsc_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 419: LD_ADDR_EXP 29
 423: PUSH
 424: LD_INT 3
 426: PUSH
 427: LD_INT 5
 429: PUSH
 430: LD_INT 7
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// ams_1_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 444: LD_ADDR_EXP 36
 448: PUSH
 449: LD_INT 5
 451: PUSH
 452: LD_INT 7
 454: PUSH
 455: LD_INT 9
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: LIST
 462: PUSH
 463: LD_OWVAR 67
 467: ARRAY
 468: ST_TO_ADDR
// ams_2_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 469: LD_ADDR_EXP 37
 473: PUSH
 474: LD_INT 5
 476: PUSH
 477: LD_INT 7
 479: PUSH
 480: LD_INT 9
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: LIST
 487: PUSH
 488: LD_OWVAR 67
 492: ARRAY
 493: ST_TO_ADDR
// ams_3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 494: LD_ADDR_EXP 38
 498: PUSH
 499: LD_INT 5
 501: PUSH
 502: LD_INT 7
 504: PUSH
 505: LD_INT 9
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// ams_4_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 519: LD_ADDR_EXP 39
 523: PUSH
 524: LD_INT 5
 526: PUSH
 527: LD_INT 7
 529: PUSH
 530: LD_INT 9
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PUSH
 538: LD_OWVAR 67
 542: ARRAY
 543: ST_TO_ADDR
// ams_5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 544: LD_ADDR_EXP 40
 548: PUSH
 549: LD_INT 5
 551: PUSH
 552: LD_INT 7
 554: PUSH
 555: LD_INT 9
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: PUSH
 563: LD_OWVAR 67
 567: ARRAY
 568: ST_TO_ADDR
// ams_6_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 569: LD_ADDR_EXP 41
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: LD_INT 7
 579: PUSH
 580: LD_INT 9
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: PUSH
 588: LD_OWVAR 67
 592: ARRAY
 593: ST_TO_ADDR
// amm0_sk = [ 8 , 8 , 9 ] [ difficulty ] ;
 594: LD_ADDR_EXP 43
 598: PUSH
 599: LD_INT 8
 601: PUSH
 602: LD_INT 8
 604: PUSH
 605: LD_INT 9
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: LD_OWVAR 67
 617: ARRAY
 618: ST_TO_ADDR
// amm1_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 619: LD_ADDR_EXP 45
 623: PUSH
 624: LD_INT 5
 626: PUSH
 627: LD_INT 7
 629: PUSH
 630: LD_INT 9
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_OWVAR 67
 642: ARRAY
 643: ST_TO_ADDR
// amm2_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 644: LD_ADDR_EXP 47
 648: PUSH
 649: LD_INT 5
 651: PUSH
 652: LD_INT 7
 654: PUSH
 655: LD_INT 9
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_OWVAR 67
 667: ARRAY
 668: ST_TO_ADDR
// amm3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 669: LD_ADDR_EXP 49
 673: PUSH
 674: LD_INT 5
 676: PUSH
 677: LD_INT 7
 679: PUSH
 680: LD_INT 9
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_OWVAR 67
 692: ARRAY
 693: ST_TO_ADDR
// amm4_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 694: LD_ADDR_EXP 51
 698: PUSH
 699: LD_INT 5
 701: PUSH
 702: LD_INT 7
 704: PUSH
 705: LD_INT 9
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_OWVAR 67
 717: ARRAY
 718: ST_TO_ADDR
// amm5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 719: LD_ADDR_EXP 53
 723: PUSH
 724: LD_INT 5
 726: PUSH
 727: LD_INT 7
 729: PUSH
 730: LD_INT 9
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: PUSH
 738: LD_OWVAR 67
 742: ARRAY
 743: ST_TO_ADDR
// amm6_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 744: LD_ADDR_EXP 55
 748: PUSH
 749: LD_INT 5
 751: PUSH
 752: LD_INT 7
 754: PUSH
 755: LD_INT 9
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: ST_TO_ADDR
// amm7_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 769: LD_ADDR_EXP 57
 773: PUSH
 774: LD_INT 5
 776: PUSH
 777: LD_INT 7
 779: PUSH
 780: LD_INT 9
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_OWVAR 67
 792: ARRAY
 793: ST_TO_ADDR
// amv1_ch = [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ difficulty ] ;
 794: LD_ADDR_EXP 59
 798: PUSH
 799: LD_INT 3
 801: PUSH
 802: LD_INT 4
 804: PUSH
 805: LD_INT 4
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: PUSH
 813: LD_OWVAR 67
 817: ARRAY
 818: ST_TO_ADDR
// amv1_wp = [ us_double_gun , us_heavy_gun , us_heavy_gun ] [ difficulty ] ;
 819: LD_ADDR_EXP 60
 823: PUSH
 824: LD_INT 5
 826: PUSH
 827: LD_INT 6
 829: PUSH
 830: LD_INT 6
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_OWVAR 67
 842: ARRAY
 843: ST_TO_ADDR
// amv2_ch = [ us_medium_tracked , us_medium_tracked , us_medium_tracked ] [ difficulty ] ;
 844: LD_ADDR_EXP 62
 848: PUSH
 849: LD_INT 3
 851: PUSH
 852: LD_INT 3
 854: PUSH
 855: LD_INT 3
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: LD_OWVAR 67
 867: ARRAY
 868: ST_TO_ADDR
// amv2_wp = [ us_rocket_launcher , us_laser , us_laser ] [ difficulty ] ;
 869: LD_ADDR_EXP 63
 873: PUSH
 874: LD_INT 7
 876: PUSH
 877: LD_INT 9
 879: PUSH
 880: LD_INT 9
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: LIST
 887: PUSH
 888: LD_OWVAR 67
 892: ARRAY
 893: ST_TO_ADDR
// amv3_ch = [ us_medium_tracked , us_medium_tracked , us_medium_tracked ] [ difficulty ] ;
 894: LD_ADDR_EXP 65
 898: PUSH
 899: LD_INT 3
 901: PUSH
 902: LD_INT 3
 904: PUSH
 905: LD_INT 3
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_OWVAR 67
 917: ARRAY
 918: ST_TO_ADDR
// amv3_wp = [ us_laser , us_laser , us_laser ] [ difficulty ] ;
 919: LD_ADDR_EXP 66
 923: PUSH
 924: LD_INT 9
 926: PUSH
 927: LD_INT 9
 929: PUSH
 930: LD_INT 9
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_OWVAR 67
 942: ARRAY
 943: ST_TO_ADDR
// amv4_ch = [ us_medium_tracked , us_medium_tracked , us_medium_tracked ] [ difficulty ] ;
 944: LD_ADDR_EXP 68
 948: PUSH
 949: LD_INT 3
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 3
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: LIST
 962: PUSH
 963: LD_OWVAR 67
 967: ARRAY
 968: ST_TO_ADDR
// amv4_wp = [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ difficulty ] ;
 969: LD_ADDR_EXP 69
 973: PUSH
 974: LD_INT 7
 976: PUSH
 977: LD_INT 7
 979: PUSH
 980: LD_INT 9
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_OWVAR 67
 992: ARRAY
 993: ST_TO_ADDR
// amv5_ch = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
 994: LD_ADDR_EXP 71
 998: PUSH
 999: LD_INT 3
1001: PUSH
1002: LD_INT 3
1004: PUSH
1005: LD_INT 4
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_OWVAR 67
1017: ARRAY
1018: ST_TO_ADDR
// amv5_wp = [ us_machine_gun , us_gatling_gun , us_gatling_gun ] [ difficulty ] ;
1019: LD_ADDR_EXP 72
1023: PUSH
1024: LD_INT 2
1026: PUSH
1027: LD_INT 4
1029: PUSH
1030: LD_INT 4
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_OWVAR 67
1042: ARRAY
1043: ST_TO_ADDR
// amv6_ch = [ us_medium_tracked , us_medium_tracked , us_morphling ] [ difficulty ] ;
1044: LD_ADDR_EXP 74
1048: PUSH
1049: LD_INT 3
1051: PUSH
1052: LD_INT 3
1054: PUSH
1055: LD_INT 5
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: ST_TO_ADDR
// amv6_wp = [ us_rocket_launcher , us_laser , us_laser ] [ difficulty ] ;
1069: LD_ADDR_EXP 75
1073: PUSH
1074: LD_INT 7
1076: PUSH
1077: LD_INT 9
1079: PUSH
1080: LD_INT 9
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: ST_TO_ADDR
// amv7_ch = [ us_medium_wheeled , us_medium_tracked , us_morphling ] [ difficulty ] ;
1094: LD_ADDR_EXP 77
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: LD_INT 3
1104: PUSH
1105: LD_INT 5
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: ST_TO_ADDR
// amv7_wp = [ us_gatling_gun , us_gatling_gun , us_gatling_gun ] [ difficulty ] ;
1119: LD_ADDR_EXP 78
1123: PUSH
1124: LD_INT 4
1126: PUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 4
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: PUSH
1138: LD_OWVAR 67
1142: ARRAY
1143: ST_TO_ADDR
// amsn0_sk = [ 4 , 7 , 9 ] [ difficulty ] ;
1144: LD_ADDR_EXP 80
1148: PUSH
1149: LD_INT 4
1151: PUSH
1152: LD_INT 7
1154: PUSH
1155: LD_INT 9
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_OWVAR 67
1167: ARRAY
1168: ST_TO_ADDR
// amsn1_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1169: LD_ADDR_EXP 82
1173: PUSH
1174: LD_INT 4
1176: PUSH
1177: LD_INT 6
1179: PUSH
1180: LD_INT 8
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_OWVAR 67
1192: ARRAY
1193: ST_TO_ADDR
// ame0_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1194: LD_ADDR_EXP 84
1198: PUSH
1199: LD_INT 4
1201: PUSH
1202: LD_INT 6
1204: PUSH
1205: LD_INT 8
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_OWVAR 67
1217: ARRAY
1218: ST_TO_ADDR
// ame1_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1219: LD_ADDR_EXP 86
1223: PUSH
1224: LD_INT 4
1226: PUSH
1227: LD_INT 6
1229: PUSH
1230: LD_INT 8
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: PUSH
1238: LD_OWVAR 67
1242: ARRAY
1243: ST_TO_ADDR
// ame2_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1244: LD_ADDR_EXP 88
1248: PUSH
1249: LD_INT 4
1251: PUSH
1252: LD_INT 6
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_OWVAR 67
1267: ARRAY
1268: ST_TO_ADDR
// ame3_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1269: LD_ADDR_EXP 90
1273: PUSH
1274: LD_INT 4
1276: PUSH
1277: LD_INT 6
1279: PUSH
1280: LD_INT 8
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_OWVAR 67
1292: ARRAY
1293: ST_TO_ADDR
// ame4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1294: LD_ADDR_EXP 92
1298: PUSH
1299: LD_INT 4
1301: PUSH
1302: LD_INT 6
1304: PUSH
1305: LD_INT 8
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_OWVAR 67
1317: ARRAY
1318: ST_TO_ADDR
// ame5_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1319: LD_ADDR_EXP 94
1323: PUSH
1324: LD_INT 4
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 8
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: PUSH
1338: LD_OWVAR 67
1342: ARRAY
1343: ST_TO_ADDR
// tmp2 = [ 4 , 6 , 8 ] [ difficulty ] ;
1344: LD_ADDR_VAR 0 4
1348: PUSH
1349: LD_INT 4
1351: PUSH
1352: LD_INT 6
1354: PUSH
1355: LD_INT 8
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_OWVAR 67
1367: ARRAY
1368: ST_TO_ADDR
// tmp = filterallunits ( [ [ f_side , am ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1369: LD_ADDR_VAR 0 2
1373: PUSH
1374: LD_INT 22
1376: PUSH
1377: LD_EXP 3
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: LD_INT 30
1391: PUSH
1392: LD_INT 32
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 30
1401: PUSH
1402: LD_INT 33
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PPUSH
1418: CALL_OW 69
1422: ST_TO_ADDR
// for tmp1 in tmp do
1423: LD_ADDR_VAR 0 3
1427: PUSH
1428: LD_VAR 0 2
1432: PUSH
1433: FOR_IN
1434: IFFALSE 1455
// setblevel ( [ tmp1 ] , tmp2 ) ;
1436: LD_VAR 0 3
1440: PUSH
1441: EMPTY
1442: LIST
1443: PPUSH
1444: LD_VAR 0 4
1448: PPUSH
1449: CALL_OW 241
1453: GO 1433
1455: POP
1456: POP
// tmp = [ ambunk2 , ambunk3 , ambunk4 , ambunk5 , ambunk6 ] ;
1457: LD_ADDR_VAR 0 2
1461: PUSH
1462: LD_INT 15
1464: PUSH
1465: LD_INT 14
1467: PUSH
1468: LD_INT 6
1470: PUSH
1471: LD_INT 7
1473: PUSH
1474: LD_INT 13
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: ST_TO_ADDR
// for tmp1 in tmp do
1484: LD_ADDR_VAR 0 3
1488: PUSH
1489: LD_VAR 0 2
1493: PUSH
1494: FOR_IN
1495: IFFALSE 1514
// setblevel ( [ tmp1 ] , 6 ) ;
1497: LD_VAR 0 3
1501: PUSH
1502: EMPTY
1503: LIST
1504: PPUSH
1505: LD_INT 6
1507: PPUSH
1508: CALL_OW 241
1512: GO 1494
1514: POP
1515: POP
// end ;
1516: LD_VAR 0 1
1520: RET
// export debug ; starting begin debug = false ;
1521: LD_ADDR_EXP 100
1525: PUSH
1526: LD_INT 0
1528: ST_TO_ADDR
// randomizeall ;
1529: CALL_OW 11
// disable ( 01 ) ;
1533: LD_INT 1
1535: DISABLE_MARKED
// disable ( 02 ) ;
1536: LD_INT 2
1538: DISABLE_MARKED
// disable ( 03 ) ;
1539: LD_INT 3
1541: DISABLE_MARKED
// disable ( 04 ) ;
1542: LD_INT 4
1544: DISABLE_MARKED
// disable ( 05 ) ;
1545: LD_INT 5
1547: DISABLE_MARKED
// disable ( 08 ) ;
1548: LD_INT 8
1550: DISABLE_MARKED
// disable ( 09 ) ;
1551: LD_INT 9
1553: DISABLE_MARKED
// disable ( 10 ) ;
1554: LD_INT 10
1556: DISABLE_MARKED
// setvars ;
1557: CALL 0 0 0
// prepare_americans ;
1561: CALL 12657 0 0
// prepare_russians ;
1565: CALL 2207 0 0
// end ;
1569: END
// on buildingcomplete ( un ) do var tmp ;
1570: LD_INT 0
1572: PPUSH
// if ( getside ( un ) = ru ) and ( getbtype ( un ) = b_lab ) then
1573: LD_VAR 0 1
1577: PPUSH
1578: CALL_OW 255
1582: PUSH
1583: LD_EXP 1
1587: EQUAL
1588: PUSH
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 266
1598: PUSH
1599: LD_INT 6
1601: EQUAL
1602: AND
1603: IFFALSE 1779
// begin disable ;
1605: DISABLE
// dialogueon ;
1606: CALL_OW 6
// if isok ( kiril ) then
1610: LD_EXP 111
1614: PPUSH
1615: CALL_OW 302
1619: IFFALSE 1635
// say ( kiril , DTeleportStart-Kir-1 ) else
1621: LD_EXP 111
1625: PPUSH
1626: LD_STRING DTeleportStart-Kir-1
1628: PPUSH
1629: CALL_OW 88
1633: GO 1775
// if isok ( kapitsova ) then
1635: LD_EXP 112
1639: PPUSH
1640: CALL_OW 302
1644: IFFALSE 1660
// say ( kapitsova , DTeleportStart-Kap-1 ) else
1646: LD_EXP 112
1650: PPUSH
1651: LD_STRING DTeleportStart-Kap-1
1653: PPUSH
1654: CALL_OW 88
1658: GO 1775
// if isok ( petrosyan ) then
1660: LD_EXP 113
1664: PPUSH
1665: CALL_OW 302
1669: IFFALSE 1685
// say ( petrosyan , DTeleportStart-Pty-1 ) else
1671: LD_EXP 113
1675: PPUSH
1676: LD_STRING DTeleportStart-Pty-1
1678: PPUSH
1679: CALL_OW 88
1683: GO 1775
// if isok ( scholtze ) then
1685: LD_EXP 114
1689: PPUSH
1690: CALL_OW 302
1694: IFFALSE 1710
// say ( scholtze , DTeleportStart-Sch-1 ) else
1696: LD_EXP 114
1700: PPUSH
1701: LD_STRING DTeleportStart-Sch-1
1703: PPUSH
1704: CALL_OW 88
1708: GO 1775
// begin tmp = filterallunits ( [ [ f_side , ru ] , [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1710: LD_ADDR_VAR 0 2
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_EXP 1
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 25
1729: PUSH
1730: LD_INT 4
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 50
1739: PUSH
1740: EMPTY
1741: LIST
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PPUSH
1748: CALL_OW 69
1752: ST_TO_ADDR
// if tmp then
1753: LD_VAR 0 2
1757: IFFALSE 1775
// say ( tmp [ 1 ] , DTeleportStart-Rsol1-1 ) ;
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_STRING DTeleportStart-Rsol1-1
1770: PPUSH
1771: CALL_OW 88
// end ; dialogueoff ;
1775: CALL_OW 7
// end ;
1779: PPOPN 2
1781: END
// on researchcomplete ( tech , lab ) do var tmp ;
1782: LD_INT 0
1784: PPUSH
// if tech = tech_targteleport then
1785: LD_VAR 0 1
1789: PUSH
1790: LD_INT 38
1792: EQUAL
1793: IFFALSE 1982
// begin dialogueon ;
1795: CALL_OW 6
// if isok ( kiril ) then
1799: LD_EXP 111
1803: PPUSH
1804: CALL_OW 302
1808: IFFALSE 1824
// say ( kiril , DTeleportEnd-Kir-1 ) else
1810: LD_EXP 111
1814: PPUSH
1815: LD_STRING DTeleportEnd-Kir-1
1817: PPUSH
1818: CALL_OW 88
1822: GO 1964
// if isok ( kapitsova ) then
1824: LD_EXP 112
1828: PPUSH
1829: CALL_OW 302
1833: IFFALSE 1849
// say ( kapitsova , DTeleportEnd-Kap-1 ) else
1835: LD_EXP 112
1839: PPUSH
1840: LD_STRING DTeleportEnd-Kap-1
1842: PPUSH
1843: CALL_OW 88
1847: GO 1964
// if isok ( petrosyan ) then
1849: LD_EXP 113
1853: PPUSH
1854: CALL_OW 302
1858: IFFALSE 1874
// say ( petrosyan , DTeleportEnd-Pty-1 ) else
1860: LD_EXP 113
1864: PPUSH
1865: LD_STRING DTeleportEnd-Pty-1
1867: PPUSH
1868: CALL_OW 88
1872: GO 1964
// if isok ( scholtze ) then
1874: LD_EXP 114
1878: PPUSH
1879: CALL_OW 302
1883: IFFALSE 1899
// say ( scholtze , DTeleportEnd-Sch-1 ) else
1885: LD_EXP 114
1889: PPUSH
1890: LD_STRING DTeleportEnd-Sch-1
1892: PPUSH
1893: CALL_OW 88
1897: GO 1964
// begin tmp = filterallunits ( [ [ f_side , ru ] , [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1899: LD_ADDR_VAR 0 3
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_EXP 1
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 25
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: LD_INT 50
1928: PUSH
1929: EMPTY
1930: LIST
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PPUSH
1937: CALL_OW 69
1941: ST_TO_ADDR
// if tmp then
1942: LD_VAR 0 3
1946: IFFALSE 1964
// say ( tmp [ 1 ] , DTeleportEnd-Rsol1-1 ) ;
1948: LD_VAR 0 3
1952: PUSH
1953: LD_INT 1
1955: ARRAY
1956: PPUSH
1957: LD_STRING DTeleportEnd-Rsol1-1
1959: PPUSH
1960: CALL_OW 88
// end ; dialogueoff ;
1964: CALL_OW 7
// wait ( 0 0$2 ) ;
1968: LD_INT 70
1970: PPUSH
1971: CALL_OW 67
// hint ( Teleport ) ;
1975: LD_STRING Teleport
1977: PPUSH
1978: CALL_OW 339
// end ;
1982: PPOPN 3
1984: END
// every 1 1$0 + 0 0$15 do
1985: GO 1987
1987: DISABLE
// begin createcratesarea ( 5 , targetarea , true ) ;
1988: LD_INT 5
1990: PPUSH
1991: LD_INT 9
1993: PPUSH
1994: LD_INT 1
1996: PPUSH
1997: CALL_OW 55
// if supply < 10 then
2001: LD_LOC 1
2005: PUSH
2006: LD_INT 10
2008: LESS
2009: IFFALSE 2028
// begin supply = supply - 1 ;
2011: LD_ADDR_LOC 1
2015: PUSH
2016: LD_LOC 1
2020: PUSH
2021: LD_INT 1
2023: MINUS
2024: ST_TO_ADDR
// enable ;
2025: ENABLE
// end else
2026: GO 2031
// enable ( 04 ) ;
2028: LD_INT 4
2030: ENABLE_MARKED
// end ;
2031: END
// every 2 2$0 marked 04 do
2032: GO 2034
2034: DISABLE
// begin createcratesarea ( 5 , targetarea , true ) ;
2035: LD_INT 5
2037: PPUSH
2038: LD_INT 9
2040: PPUSH
2041: LD_INT 1
2043: PPUSH
2044: CALL_OW 55
// if supply then
2048: LD_LOC 1
2052: IFFALSE 2069
// begin supply = supply - 1 ;
2054: LD_ADDR_LOC 1
2058: PUSH
2059: LD_LOC 1
2063: PUSH
2064: LD_INT 1
2066: MINUS
2067: ST_TO_ADDR
// enable ;
2068: ENABLE
// end ; end ;
2069: END
// every 0 0$7 do
2070: GO 2072
2072: DISABLE
// begin randomize ;
2073: CALL_OW 10
// enable ;
2077: ENABLE
// end ; end_of_file
2078: END
// export vsevol , popov , gaydar , yashin , titov , belkov , kuzmov , gnyevko , kozlov , furmanov , kiril , kapitsova , petrosyan , scholtze , dolgov , kovalyuk , karamazov , petrovova , oblukov , burlak , platonov , jmm ; export masha ; var obeti , obeti2 , survivors , ostatni , nedoboje ; export vs ; function myisinarea ( list , area , x , y ) ; var tmp , tmp1 ; begin
2079: LD_INT 0
2081: PPUSH
2082: PPUSH
2083: PPUSH
// tmp1 = [ ] ;
2084: LD_ADDR_VAR 0 7
2088: PUSH
2089: EMPTY
2090: ST_TO_ADDR
// for tmp in list do
2091: LD_ADDR_VAR 0 6
2095: PUSH
2096: LD_VAR 0 1
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2142
// if not isinarea ( tmp , area ) then
2104: LD_VAR 0 6
2108: PPUSH
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 308
2118: NOT
2119: IFFALSE 2140
// begin tmp1 = tmp1 ^ [ tmp ] ;
2121: LD_ADDR_VAR 0 7
2125: PUSH
2126: LD_VAR 0 7
2130: PUSH
2131: LD_VAR 0 6
2135: PUSH
2136: EMPTY
2137: LIST
2138: ADD
2139: ST_TO_ADDR
// end ;
2140: GO 2101
2142: POP
2143: POP
// if tmp1 then
2144: LD_VAR 0 7
2148: IFFALSE 2194
// begin comstop ( list diff tmp1 ) ;
2150: LD_VAR 0 1
2154: PUSH
2155: LD_VAR 0 7
2159: DIFF
2160: PPUSH
2161: CALL_OW 141
// commovexy ( tmp1 , x , y ) ;
2165: LD_VAR 0 7
2169: PPUSH
2170: LD_VAR 0 3
2174: PPUSH
2175: LD_VAR 0 4
2179: PPUSH
2180: CALL_OW 111
// result = false ;
2184: LD_ADDR_VAR 0 5
2188: PUSH
2189: LD_INT 0
2191: ST_TO_ADDR
// end else
2192: GO 2202
// result = true ;
2194: LD_ADDR_VAR 0 5
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// end ;
2202: LD_VAR 0 5
2206: RET
// export surv3 ; var vsevol_v , popov_v , gaydar_v , yashin_v , vehikly , vehiklyo , vehiklys ; export function prepare_russians ; var tmp , tmp2 , tmp3 , na , na2 , veh ; begin
2207: LD_INT 0
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
// centernowonxy ( 99 , 102 ) ;
2216: LD_INT 99
2218: PPUSH
2219: LD_INT 102
2221: PPUSH
2222: CALL_OW 86
// na = 0 ;
2226: LD_ADDR_VAR 0 5
2230: PUSH
2231: LD_INT 0
2233: ST_TO_ADDR
// na2 = 0 ;
2234: LD_ADDR_VAR 0 6
2238: PUSH
2239: LD_INT 0
2241: ST_TO_ADDR
// uc_side = ru ;
2242: LD_ADDR_OWVAR 20
2246: PUSH
2247: LD_EXP 1
2251: ST_TO_ADDR
// if testcharacters ( Burlak ) then
2252: LD_STRING Burlak
2254: PPUSH
2255: CALL_OW 28
2259: IFFALSE 2297
// if checkcharacterset ( Burlak ) then
2261: LD_STRING Burlak
2263: PPUSH
2264: CALL_OW 29
2268: IFFALSE 2288
// burlak = createcharacterwithclass ( Burlak , class_engineer ) else
2270: LD_ADDR_EXP 120
2274: PUSH
2275: LD_STRING Burlak
2277: PPUSH
2278: LD_INT 2
2280: PPUSH
2281: CALL_OW 35
2285: ST_TO_ADDR
2286: GO 2295
// msg ( jakto ze Burlak je chciplej?! ) else
2288: LD_STRING jakto ze Burlak je chciplej?!
2290: PPUSH
2291: CALL_OW 100
2295: GO 2304
// msg ( neny Burlak ) ;
2297: LD_STRING neny Burlak
2299: PPUSH
2300: CALL_OW 100
// platonov = newcharacter ( Platonov ) ;
2304: LD_ADDR_EXP 121
2308: PUSH
2309: LD_STRING Platonov
2311: PPUSH
2312: CALL_OW 25
2316: ST_TO_ADDR
// if not platonov then
2317: LD_EXP 121
2321: NOT
2322: IFFALSE 2331
// msg ( neny Platonov ) ;
2324: LD_STRING neny Platonov
2326: PPUSH
2327: CALL_OW 100
// uc_side = am ;
2331: LD_ADDR_OWVAR 20
2335: PUSH
2336: LD_EXP 3
2340: ST_TO_ADDR
// jmm = newcharacter ( Macmillan ) ;
2341: LD_ADDR_EXP 122
2345: PUSH
2346: LD_STRING Macmillan
2348: PPUSH
2349: CALL_OW 25
2353: ST_TO_ADDR
// if not jmm then
2354: LD_EXP 122
2358: NOT
2359: IFFALSE 2368
// msg ( neny Macmillan ) ;
2361: LD_STRING neny Macmillan
2363: PPUSH
2364: CALL_OW 100
// uc_side = ru2 ;
2368: LD_ADDR_OWVAR 20
2372: PUSH
2373: LD_EXP 2
2377: ST_TO_ADDR
// vs = false ;
2378: LD_ADDR_EXP 124
2382: PUSH
2383: LD_INT 0
2385: ST_TO_ADDR
// if testcharacters ( Vsevolod ) then
2386: LD_STRING Vsevolod
2388: PPUSH
2389: CALL_OW 28
2393: IFFALSE 2459
// if checkcharacterset ( Vsevolod ) then
2395: LD_STRING Vsevolod
2397: PPUSH
2398: CALL_OW 29
2402: IFFALSE 2430
// begin vs = true ;
2404: LD_ADDR_EXP 124
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// vsevol = createcharacterwithclass ( Vsevolod , class_soldier ) ;
2412: LD_ADDR_EXP 101
2416: PUSH
2417: LD_STRING Vsevolod
2419: PPUSH
2420: LD_INT 1
2422: PPUSH
2423: CALL_OW 35
2427: ST_TO_ADDR
// end else
2428: GO 2457
// begin vsevol = newcharacter ( Stolypin ) ;
2430: LD_ADDR_EXP 101
2434: PUSH
2435: LD_STRING Stolypin
2437: PPUSH
2438: CALL_OW 25
2442: ST_TO_ADDR
// if not vsevol then
2443: LD_EXP 101
2447: NOT
2448: IFFALSE 2457
// msg ( neny Stolypin ) ;
2450: LD_STRING neny Stolypin
2452: PPUSH
2453: CALL_OW 100
// end else
2457: GO 2466
// msg ( neny Vsevolod ) ;
2459: LD_STRING neny Vsevolod
2461: PPUSH
2462: CALL_OW 100
// popov = newcharacter ( Popov ) ;
2466: LD_ADDR_EXP 102
2470: PUSH
2471: LD_STRING Popov
2473: PPUSH
2474: CALL_OW 25
2478: ST_TO_ADDR
// if not popov then
2479: LD_EXP 102
2483: NOT
2484: IFFALSE 2493
// msg ( neny Popov ) ;
2486: LD_STRING neny Popov
2488: PPUSH
2489: CALL_OW 100
// if testcharacters ( Gaydar ) then
2493: LD_STRING Gaydar
2495: PPUSH
2496: CALL_OW 28
2500: IFFALSE 2553
// if checkcharacterset ( Gaydar ) then
2502: LD_STRING Gaydar
2504: PPUSH
2505: CALL_OW 29
2509: IFFALSE 2529
// gaydar = createcharacterwithclass ( Gaydar , class_soldier ) else
2511: LD_ADDR_EXP 103
2515: PUSH
2516: LD_STRING Gaydar
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: CALL_OW 35
2526: ST_TO_ADDR
2527: GO 2551
// begin gaydar = 0 ;
2529: LD_ADDR_EXP 103
2533: PUSH
2534: LD_INT 0
2536: ST_TO_ADDR
// na2 = na2 + 1 ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 1
2549: PLUS
2550: ST_TO_ADDR
// end else
2551: GO 2560
// msg ( neny Gaydar ) ;
2553: LD_STRING neny Gaydar
2555: PPUSH
2556: CALL_OW 100
// yashin = newcharacter ( Yashin ) ;
2560: LD_ADDR_EXP 104
2564: PUSH
2565: LD_STRING Yashin
2567: PPUSH
2568: CALL_OW 25
2572: ST_TO_ADDR
// if not yashin then
2573: LD_EXP 104
2577: NOT
2578: IFFALSE 2587
// msg ( neny Yashin ) ;
2580: LD_STRING neny Yashin
2582: PPUSH
2583: CALL_OW 100
// if testcharacters ( Titov ) then
2587: LD_STRING Titov
2589: PPUSH
2590: CALL_OW 28
2594: IFFALSE 2647
// if checkcharacterset ( Titov ) then
2596: LD_STRING Titov
2598: PPUSH
2599: CALL_OW 29
2603: IFFALSE 2623
// titov = createcharacterwithclass ( Titov , class_soldier ) else
2605: LD_ADDR_EXP 105
2609: PUSH
2610: LD_STRING Titov
2612: PPUSH
2613: LD_INT 1
2615: PPUSH
2616: CALL_OW 35
2620: ST_TO_ADDR
2621: GO 2645
// begin titov = 0 ;
2623: LD_ADDR_EXP 105
2627: PUSH
2628: LD_INT 0
2630: ST_TO_ADDR
// na2 = na2 + 1 ;
2631: LD_ADDR_VAR 0 6
2635: PUSH
2636: LD_VAR 0 6
2640: PUSH
2641: LD_INT 1
2643: PLUS
2644: ST_TO_ADDR
// end else
2645: GO 2654
// msg ( neny Titov ) ;
2647: LD_STRING neny Titov
2649: PPUSH
2650: CALL_OW 100
// if testcharacters ( Belkov ) then
2654: LD_STRING Belkov
2656: PPUSH
2657: CALL_OW 28
2661: IFFALSE 2714
// if checkcharacterset ( Belkov ) then
2663: LD_STRING Belkov
2665: PPUSH
2666: CALL_OW 29
2670: IFFALSE 2690
// belkov = createcharacterwithclass ( Belkov , class_soldier ) else
2672: LD_ADDR_EXP 106
2676: PUSH
2677: LD_STRING Belkov
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 35
2687: ST_TO_ADDR
2688: GO 2712
// begin belkov = 0 ;
2690: LD_ADDR_EXP 106
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// na2 = na2 + 1 ;
2698: LD_ADDR_VAR 0 6
2702: PUSH
2703: LD_VAR 0 6
2707: PUSH
2708: LD_INT 1
2710: PLUS
2711: ST_TO_ADDR
// end else
2712: GO 2721
// msg ( neny Belkov ) ;
2714: LD_STRING neny Belkov
2716: PPUSH
2717: CALL_OW 100
// if testcharacters ( Kuzmov ) then
2721: LD_STRING Kuzmov
2723: PPUSH
2724: CALL_OW 28
2728: IFFALSE 2781
// if checkcharacterset ( Kuzmov ) then
2730: LD_STRING Kuzmov
2732: PPUSH
2733: CALL_OW 29
2737: IFFALSE 2757
// kuzmov = createcharacterwithclass ( Kuzmov , class_soldier ) else
2739: LD_ADDR_EXP 107
2743: PUSH
2744: LD_STRING Kuzmov
2746: PPUSH
2747: LD_INT 1
2749: PPUSH
2750: CALL_OW 35
2754: ST_TO_ADDR
2755: GO 2779
// begin kuzmov = 0 ;
2757: LD_ADDR_EXP 107
2761: PUSH
2762: LD_INT 0
2764: ST_TO_ADDR
// na2 = na2 + 1 ;
2765: LD_ADDR_VAR 0 6
2769: PUSH
2770: LD_VAR 0 6
2774: PUSH
2775: LD_INT 1
2777: PLUS
2778: ST_TO_ADDR
// end else
2779: GO 2788
// msg ( neny Kuzmov ) ;
2781: LD_STRING neny Kuzmov
2783: PPUSH
2784: CALL_OW 100
// if testcharacters ( Gnyevko ) then
2788: LD_STRING Gnyevko
2790: PPUSH
2791: CALL_OW 28
2795: IFFALSE 2848
// if checkcharacterset ( Gnyevko ) then
2797: LD_STRING Gnyevko
2799: PPUSH
2800: CALL_OW 29
2804: IFFALSE 2824
// gnyevko = createcharacterwithclass ( Gnyevko , class_soldier ) else
2806: LD_ADDR_EXP 108
2810: PUSH
2811: LD_STRING Gnyevko
2813: PPUSH
2814: LD_INT 1
2816: PPUSH
2817: CALL_OW 35
2821: ST_TO_ADDR
2822: GO 2846
// begin gnyevko = 0 ;
2824: LD_ADDR_EXP 108
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// na2 = na2 + 1 ;
2832: LD_ADDR_VAR 0 6
2836: PUSH
2837: LD_VAR 0 6
2841: PUSH
2842: LD_INT 1
2844: PLUS
2845: ST_TO_ADDR
// end else
2846: GO 2855
// msg ( neny Gnyevko ) ;
2848: LD_STRING neny Gnyevko
2850: PPUSH
2851: CALL_OW 100
// if testcharacters ( Kozlov ) then
2855: LD_STRING Kozlov
2857: PPUSH
2858: CALL_OW 28
2862: IFFALSE 2915
// if checkcharacterset ( Kozlov ) then
2864: LD_STRING Kozlov
2866: PPUSH
2867: CALL_OW 29
2871: IFFALSE 2891
// kozlov = createcharacterwithclass ( Kozlov , class_soldier ) else
2873: LD_ADDR_EXP 109
2877: PUSH
2878: LD_STRING Kozlov
2880: PPUSH
2881: LD_INT 1
2883: PPUSH
2884: CALL_OW 35
2888: ST_TO_ADDR
2889: GO 2913
// begin kozlov = 0 ;
2891: LD_ADDR_EXP 109
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// na2 = na2 + 1 ;
2899: LD_ADDR_VAR 0 6
2903: PUSH
2904: LD_VAR 0 6
2908: PUSH
2909: LD_INT 1
2911: PLUS
2912: ST_TO_ADDR
// end else
2913: GO 2922
// msg ( neny Kozlov ) ;
2915: LD_STRING neny Kozlov
2917: PPUSH
2918: CALL_OW 100
// uc_side = ru ;
2922: LD_ADDR_OWVAR 20
2926: PUSH
2927: LD_EXP 1
2931: ST_TO_ADDR
// furmanov = newcharacter ( Furmanov ) ;
2932: LD_ADDR_EXP 110
2936: PUSH
2937: LD_STRING Furmanov
2939: PPUSH
2940: CALL_OW 25
2944: ST_TO_ADDR
// if not furmanov then
2945: LD_EXP 110
2949: NOT
2950: IFFALSE 2959
// msg ( neny Furmanov ) ;
2952: LD_STRING neny Furmanov
2954: PPUSH
2955: CALL_OW 100
// if testcharacters ( Kirilenkova ) then
2959: LD_STRING Kirilenkova
2961: PPUSH
2962: CALL_OW 28
2966: IFFALSE 3019
// if checkcharacterset ( Kirilenkova ) then
2968: LD_STRING Kirilenkova
2970: PPUSH
2971: CALL_OW 29
2975: IFFALSE 2995
// kiril = createcharacterwithclass ( Kirilenkova , class_scientistic ) else
2977: LD_ADDR_EXP 111
2981: PUSH
2982: LD_STRING Kirilenkova
2984: PPUSH
2985: LD_INT 4
2987: PPUSH
2988: CALL_OW 35
2992: ST_TO_ADDR
2993: GO 3017
// begin kiril = 0 ;
2995: LD_ADDR_EXP 111
2999: PUSH
3000: LD_INT 0
3002: ST_TO_ADDR
// na = na + 1 ;
3003: LD_ADDR_VAR 0 5
3007: PUSH
3008: LD_VAR 0 5
3012: PUSH
3013: LD_INT 1
3015: PLUS
3016: ST_TO_ADDR
// end else
3017: GO 3026
// msg ( neny Kirilenkova ) ;
3019: LD_STRING neny Kirilenkova
3021: PPUSH
3022: CALL_OW 100
// if testcharacters ( Kapitsova ) then
3026: LD_STRING Kapitsova
3028: PPUSH
3029: CALL_OW 28
3033: IFFALSE 3086
// if checkcharacterset ( Kapitsova ) then
3035: LD_STRING Kapitsova
3037: PPUSH
3038: CALL_OW 29
3042: IFFALSE 3062
// kapitsova = createcharacterwithclass ( Kapitsova , class_scientistic ) else
3044: LD_ADDR_EXP 112
3048: PUSH
3049: LD_STRING Kapitsova
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: CALL_OW 35
3059: ST_TO_ADDR
3060: GO 3084
// begin kapitsova = 0 ;
3062: LD_ADDR_EXP 112
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// na = na + 1 ;
3070: LD_ADDR_VAR 0 5
3074: PUSH
3075: LD_VAR 0 5
3079: PUSH
3080: LD_INT 1
3082: PLUS
3083: ST_TO_ADDR
// end else
3084: GO 3093
// msg ( neny Kapitsova ) ;
3086: LD_STRING neny Kapitsova
3088: PPUSH
3089: CALL_OW 100
// if testcharacters ( Petrosyan ) then
3093: LD_STRING Petrosyan
3095: PPUSH
3096: CALL_OW 28
3100: IFFALSE 3153
// if checkcharacterset ( Petrosyan ) then
3102: LD_STRING Petrosyan
3104: PPUSH
3105: CALL_OW 29
3109: IFFALSE 3129
// petrosyan = createcharacterwithclass ( Petrosyan , class_scientistic ) else
3111: LD_ADDR_EXP 113
3115: PUSH
3116: LD_STRING Petrosyan
3118: PPUSH
3119: LD_INT 4
3121: PPUSH
3122: CALL_OW 35
3126: ST_TO_ADDR
3127: GO 3151
// begin petrosyan = 0 ;
3129: LD_ADDR_EXP 113
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// na = na + 1 ;
3137: LD_ADDR_VAR 0 5
3141: PUSH
3142: LD_VAR 0 5
3146: PUSH
3147: LD_INT 1
3149: PLUS
3150: ST_TO_ADDR
// end else
3151: GO 3160
// msg ( neny Petrosyan ) ;
3153: LD_STRING neny Petrosyan
3155: PPUSH
3156: CALL_OW 100
// if testcharacters ( Scholtze ) then
3160: LD_STRING Scholtze
3162: PPUSH
3163: CALL_OW 28
3167: IFFALSE 3220
// if checkcharacterset ( Scholtze ) then
3169: LD_STRING Scholtze
3171: PPUSH
3172: CALL_OW 29
3176: IFFALSE 3196
// scholtze = createcharacterwithclass ( Scholtze , class_scientistic ) else
3178: LD_ADDR_EXP 114
3182: PUSH
3183: LD_STRING Scholtze
3185: PPUSH
3186: LD_INT 4
3188: PPUSH
3189: CALL_OW 35
3193: ST_TO_ADDR
3194: GO 3218
// begin scholtze = 0 ;
3196: LD_ADDR_EXP 114
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// na = na + 1 ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_VAR 0 5
3213: PUSH
3214: LD_INT 1
3216: PLUS
3217: ST_TO_ADDR
// end else
3218: GO 3227
// msg ( neny Scholtze ) ;
3220: LD_STRING neny Scholtze
3222: PPUSH
3223: CALL_OW 100
// uc_side = ru2 ;
3227: LD_ADDR_OWVAR 20
3231: PUSH
3232: LD_EXP 2
3236: ST_TO_ADDR
// if testcharacters ( Dolgov ) then
3237: LD_STRING Dolgov
3239: PPUSH
3240: CALL_OW 28
3244: IFFALSE 3297
// if checkcharacterset ( Dolgov ) then
3246: LD_STRING Dolgov
3248: PPUSH
3249: CALL_OW 29
3253: IFFALSE 3273
// dolgov = createcharacterwithclass ( Dolgov , class_soldier ) else
3255: LD_ADDR_EXP 115
3259: PUSH
3260: LD_STRING Dolgov
3262: PPUSH
3263: LD_INT 1
3265: PPUSH
3266: CALL_OW 35
3270: ST_TO_ADDR
3271: GO 3295
// begin dolgov = 0 ;
3273: LD_ADDR_EXP 115
3277: PUSH
3278: LD_INT 0
3280: ST_TO_ADDR
// na2 = na2 + 1 ;
3281: LD_ADDR_VAR 0 6
3285: PUSH
3286: LD_VAR 0 6
3290: PUSH
3291: LD_INT 1
3293: PLUS
3294: ST_TO_ADDR
// end else
3295: GO 3304
// msg ( neny Dolgov ) ;
3297: LD_STRING neny Dolgov
3299: PPUSH
3300: CALL_OW 100
// if testcharacters ( Kovalyuk ) then
3304: LD_STRING Kovalyuk
3306: PPUSH
3307: CALL_OW 28
3311: IFFALSE 3364
// if checkcharacterset ( Kovalyuk ) then
3313: LD_STRING Kovalyuk
3315: PPUSH
3316: CALL_OW 29
3320: IFFALSE 3340
// kovalyuk = createcharacterwithclass ( Kovalyuk , class_soldier ) else
3322: LD_ADDR_EXP 116
3326: PUSH
3327: LD_STRING Kovalyuk
3329: PPUSH
3330: LD_INT 1
3332: PPUSH
3333: CALL_OW 35
3337: ST_TO_ADDR
3338: GO 3362
// begin kovalyuk = 0 ;
3340: LD_ADDR_EXP 116
3344: PUSH
3345: LD_INT 0
3347: ST_TO_ADDR
// na2 = na2 + 1 ;
3348: LD_ADDR_VAR 0 6
3352: PUSH
3353: LD_VAR 0 6
3357: PUSH
3358: LD_INT 1
3360: PLUS
3361: ST_TO_ADDR
// end else
3362: GO 3371
// msg ( neny Kovalyuk ) ;
3364: LD_STRING neny Kovalyuk
3366: PPUSH
3367: CALL_OW 100
// if testcharacters ( Karamazov ) then
3371: LD_STRING Karamazov
3373: PPUSH
3374: CALL_OW 28
3378: IFFALSE 3431
// if checkcharacterset ( Karamazov ) then
3380: LD_STRING Karamazov
3382: PPUSH
3383: CALL_OW 29
3387: IFFALSE 3407
// karamazov = createcharacterwithclass ( Karamazov , class_soldier ) else
3389: LD_ADDR_EXP 117
3393: PUSH
3394: LD_STRING Karamazov
3396: PPUSH
3397: LD_INT 1
3399: PPUSH
3400: CALL_OW 35
3404: ST_TO_ADDR
3405: GO 3429
// begin karamazov = 0 ;
3407: LD_ADDR_EXP 117
3411: PUSH
3412: LD_INT 0
3414: ST_TO_ADDR
// na2 = na2 + 1 ;
3415: LD_ADDR_VAR 0 6
3419: PUSH
3420: LD_VAR 0 6
3424: PUSH
3425: LD_INT 1
3427: PLUS
3428: ST_TO_ADDR
// end else
3429: GO 3438
// msg ( neny Karamazov ) ;
3431: LD_STRING neny Karamazov
3433: PPUSH
3434: CALL_OW 100
// if testcharacters ( Petrovova ) then
3438: LD_STRING Petrovova
3440: PPUSH
3441: CALL_OW 28
3445: IFFALSE 3498
// if checkcharacterset ( Petrovova ) then
3447: LD_STRING Petrovova
3449: PPUSH
3450: CALL_OW 29
3454: IFFALSE 3474
// petrovova = createcharacterwithclass ( Petrovova , class_soldier ) else
3456: LD_ADDR_EXP 118
3460: PUSH
3461: LD_STRING Petrovova
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 35
3471: ST_TO_ADDR
3472: GO 3496
// begin petrovova = 0 ;
3474: LD_ADDR_EXP 118
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
// na2 = na2 + 1 ;
3482: LD_ADDR_VAR 0 6
3486: PUSH
3487: LD_VAR 0 6
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: ST_TO_ADDR
// end else
3496: GO 3505
// msg ( neny Petrovova ) ;
3498: LD_STRING neny Petrovova
3500: PPUSH
3501: CALL_OW 100
// if testcharacters ( Oblukov ) then
3505: LD_STRING Oblukov
3507: PPUSH
3508: CALL_OW 28
3512: IFFALSE 3565
// if checkcharacterset ( Oblukov ) then
3514: LD_STRING Oblukov
3516: PPUSH
3517: CALL_OW 29
3521: IFFALSE 3541
// oblukov = createcharacterwithclass ( Oblukov , class_soldier ) else
3523: LD_ADDR_EXP 119
3527: PUSH
3528: LD_STRING Oblukov
3530: PPUSH
3531: LD_INT 1
3533: PPUSH
3534: CALL_OW 35
3538: ST_TO_ADDR
3539: GO 3563
// begin oblukov = 0 ;
3541: LD_ADDR_EXP 119
3545: PUSH
3546: LD_INT 0
3548: ST_TO_ADDR
// na2 = na2 + 1 ;
3549: LD_ADDR_VAR 0 6
3553: PUSH
3554: LD_VAR 0 6
3558: PUSH
3559: LD_INT 1
3561: PLUS
3562: ST_TO_ADDR
// end else
3563: GO 3572
// msg ( neny Oblukov ) ;
3565: LD_STRING neny Oblukov
3567: PPUSH
3568: CALL_OW 100
// uc_side := ru ;
3572: LD_ADDR_OWVAR 20
3576: PUSH
3577: LD_EXP 1
3581: ST_TO_ADDR
// if testcharacters ( survivors3 ) then
3582: LD_STRING survivors3
3584: PPUSH
3585: CALL_OW 28
3589: IFFALSE 3617
// if checkcharacterset ( survivors3 ) then
3591: LD_STRING survivors3
3593: PPUSH
3594: CALL_OW 29
3598: IFFALSE 3615
// surv3 = createcharacterset ( survivors3 ) else
3600: LD_ADDR_EXP 125
3604: PUSH
3605: LD_STRING survivors3
3607: PPUSH
3608: CALL_OW 31
3612: ST_TO_ADDR
3613: GO 3615
// else
3615: GO 3624
// msg ( neny survivors3 ) ;
3617: LD_STRING neny survivors3
3619: PPUSH
3620: CALL_OW 100
// uc_nation = nation_russian ;
3624: LD_ADDR_OWVAR 21
3628: PUSH
3629: LD_INT 3
3631: ST_TO_ADDR
// if not testvariable ( Masha ) then
3632: LD_STRING Masha
3634: PPUSH
3635: CALL_OW 27
3639: NOT
3640: IFFALSE 3649
// msg ( neny Masha ) ;
3642: LD_STRING neny Masha
3644: PPUSH
3645: CALL_OW 100
// veh = loadvariable ( Masha , [ ] ) ;
3649: LD_ADDR_VAR 0 7
3653: PUSH
3654: LD_STRING Masha
3656: PPUSH
3657: EMPTY
3658: PPUSH
3659: CALL_OW 30
3663: ST_TO_ADDR
// if veh then
3664: LD_VAR 0 7
3668: IFFALSE 3750
// begin vc_chassis = veh [ 1 ] ;
3670: LD_ADDR_OWVAR 37
3674: PUSH
3675: LD_VAR 0 7
3679: PUSH
3680: LD_INT 1
3682: ARRAY
3683: ST_TO_ADDR
// vc_engine = veh [ 2 ] ;
3684: LD_ADDR_OWVAR 39
3688: PUSH
3689: LD_VAR 0 7
3693: PUSH
3694: LD_INT 2
3696: ARRAY
3697: ST_TO_ADDR
// vc_control = veh [ 3 ] ;
3698: LD_ADDR_OWVAR 38
3702: PUSH
3703: LD_VAR 0 7
3707: PUSH
3708: LD_INT 3
3710: ARRAY
3711: ST_TO_ADDR
// vc_weapon = veh [ 4 ] ;
3712: LD_ADDR_OWVAR 40
3716: PUSH
3717: LD_VAR 0 7
3721: PUSH
3722: LD_INT 4
3724: ARRAY
3725: ST_TO_ADDR
// masha = createvehicle ;
3726: LD_ADDR_EXP 123
3730: PUSH
3731: CALL_OW 45
3735: ST_TO_ADDR
// setmark ( masha , 1 ) ;
3736: LD_EXP 123
3740: PPUSH
3741: LD_INT 1
3743: PPUSH
3744: CALL_OW 242
// end else
3748: GO 3758
// masha = 0 ;
3750: LD_ADDR_EXP 123
3754: PUSH
3755: LD_INT 0
3757: ST_TO_ADDR
// uc_side = ru2 ;
3758: LD_ADDR_OWVAR 20
3762: PUSH
3763: LD_EXP 2
3767: ST_TO_ADDR
// ostatni = [ ] ;
3768: LD_ADDR_LOC 5
3772: PUSH
3773: EMPTY
3774: ST_TO_ADDR
// tmp2 = na + na2 ;
3775: LD_ADDR_VAR 0 3
3779: PUSH
3780: LD_VAR 0 5
3784: PUSH
3785: LD_VAR 0 6
3789: PLUS
3790: ST_TO_ADDR
// for tmp = 1 to tmp2 do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_VAR 0 3
3805: PUSH
3806: FOR_TO
3807: IFFALSE 3859
// begin preparehuman ( rand ( 1 , 2 ) , rand ( 1 , 4 ) , 7 ) ;
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: CALL_OW 12
3819: PPUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 4
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 7
3833: PPUSH
3834: CALL_OW 380
// ostatni = ostatni ^ [ createhuman ] ;
3838: LD_ADDR_LOC 5
3842: PUSH
3843: LD_LOC 5
3847: PUSH
3848: CALL_OW 44
3852: PUSH
3853: EMPTY
3854: LIST
3855: ADD
3856: ST_TO_ADDR
// end ;
3857: GO 3806
3859: POP
3860: POP
// obeti = [ vsevol , popov , gaydar , yashin ] ;
3861: LD_ADDR_LOC 2
3865: PUSH
3866: LD_EXP 101
3870: PUSH
3871: LD_EXP 102
3875: PUSH
3876: LD_EXP 103
3880: PUSH
3881: LD_EXP 104
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: ST_TO_ADDR
// survivors = [ belkov , petrovova , titov , oblukov , kuzmov , gnyevko , kozlov ] diff [ 0 ] ;
3892: LD_ADDR_LOC 4
3896: PUSH
3897: LD_EXP 106
3901: PUSH
3902: LD_EXP 118
3906: PUSH
3907: LD_EXP 105
3911: PUSH
3912: LD_EXP 119
3916: PUSH
3917: LD_EXP 107
3921: PUSH
3922: LD_EXP 108
3926: PUSH
3927: LD_EXP 109
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 0
3943: PUSH
3944: EMPTY
3945: LIST
3946: DIFF
3947: ST_TO_ADDR
// obeti2 = [ dolgov , kovalyuk , karamazov ] diff [ 0 ] ;
3948: LD_ADDR_LOC 3
3952: PUSH
3953: LD_EXP 115
3957: PUSH
3958: LD_EXP 116
3962: PUSH
3963: LD_EXP 117
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: DIFF
3979: ST_TO_ADDR
// nedoboje = [ kiril , kapitsova , petrosyan , scholtze , furmanov ] diff [ 0 ] ;
3980: LD_ADDR_LOC 6
3984: PUSH
3985: LD_EXP 111
3989: PUSH
3990: LD_EXP 112
3994: PUSH
3995: LD_EXP 113
3999: PUSH
4000: LD_EXP 114
4004: PUSH
4005: LD_EXP 110
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_INT 0
4019: PUSH
4020: EMPTY
4021: LIST
4022: DIFF
4023: ST_TO_ADDR
// tmp2 = 7 - survivors ;
4024: LD_ADDR_VAR 0 3
4028: PUSH
4029: LD_INT 7
4031: PUSH
4032: LD_LOC 4
4036: MINUS
4037: ST_TO_ADDR
// for tmp = 1 to tmp2 do
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: DOUBLE
4044: LD_INT 1
4046: DEC
4047: ST_TO_ADDR
4048: LD_VAR 0 3
4052: PUSH
4053: FOR_TO
4054: IFFALSE 4173
// if surv3 then
4056: LD_EXP 125
4060: IFFALSE 4128
// begin survivors = survivors ^ [ surv3 [ 1 ] ] ;
4062: LD_ADDR_LOC 4
4066: PUSH
4067: LD_LOC 4
4071: PUSH
4072: LD_EXP 125
4076: PUSH
4077: LD_INT 1
4079: ARRAY
4080: PUSH
4081: EMPTY
4082: LIST
4083: ADD
4084: ST_TO_ADDR
// setside ( [ surv3 [ 1 ] ] , ru2 ) ;
4085: LD_EXP 125
4089: PUSH
4090: LD_INT 1
4092: ARRAY
4093: PUSH
4094: EMPTY
4095: LIST
4096: PPUSH
4097: LD_EXP 2
4101: PPUSH
4102: CALL_OW 235
// surv3 = surv3 diff surv3 [ 1 ] ;
4106: LD_ADDR_EXP 125
4110: PUSH
4111: LD_EXP 125
4115: PUSH
4116: LD_EXP 125
4120: PUSH
4121: LD_INT 1
4123: ARRAY
4124: DIFF
4125: ST_TO_ADDR
// end else
4126: GO 4171
// begin survivors = survivors ^ [ ostatni [ 1 ] ] ;
4128: LD_ADDR_LOC 4
4132: PUSH
4133: LD_LOC 4
4137: PUSH
4138: LD_LOC 5
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: EMPTY
4148: LIST
4149: ADD
4150: ST_TO_ADDR
// ostatni = ostatni diff ostatni [ 1 ] ;
4151: LD_ADDR_LOC 5
4155: PUSH
4156: LD_LOC 5
4160: PUSH
4161: LD_LOC 5
4165: PUSH
4166: LD_INT 1
4168: ARRAY
4169: DIFF
4170: ST_TO_ADDR
// end ;
4171: GO 4053
4173: POP
4174: POP
// tmp2 = 3 - obeti2 ;
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: LD_INT 3
4182: PUSH
4183: LD_LOC 3
4187: MINUS
4188: ST_TO_ADDR
// for tmp = 1 to tmp2 do
4189: LD_ADDR_VAR 0 2
4193: PUSH
4194: DOUBLE
4195: LD_INT 1
4197: DEC
4198: ST_TO_ADDR
4199: LD_VAR 0 3
4203: PUSH
4204: FOR_TO
4205: IFFALSE 4252
// begin obeti2 = obeti2 ^ [ ostatni [ 1 ] ] ;
4207: LD_ADDR_LOC 3
4211: PUSH
4212: LD_LOC 3
4216: PUSH
4217: LD_LOC 5
4221: PUSH
4222: LD_INT 1
4224: ARRAY
4225: PUSH
4226: EMPTY
4227: LIST
4228: ADD
4229: ST_TO_ADDR
// ostatni = ostatni diff ostatni [ 1 ] ;
4230: LD_ADDR_LOC 5
4234: PUSH
4235: LD_LOC 5
4239: PUSH
4240: LD_LOC 5
4244: PUSH
4245: LD_INT 1
4247: ARRAY
4248: DIFF
4249: ST_TO_ADDR
// end ;
4250: GO 4204
4252: POP
4253: POP
// tmp2 = 5 - nedoboje ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: LD_INT 5
4261: PUSH
4262: LD_LOC 6
4266: MINUS
4267: ST_TO_ADDR
// for tmp = 1 to tmp2 do
4268: LD_ADDR_VAR 0 2
4272: PUSH
4273: DOUBLE
4274: LD_INT 1
4276: DEC
4277: ST_TO_ADDR
4278: LD_VAR 0 3
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4403
// if surv3 then
4286: LD_EXP 125
4290: IFFALSE 4337
// begin nedoboje = nedoboje ^ [ surv3 [ 1 ] ] ;
4292: LD_ADDR_LOC 6
4296: PUSH
4297: LD_LOC 6
4301: PUSH
4302: LD_EXP 125
4306: PUSH
4307: LD_INT 1
4309: ARRAY
4310: PUSH
4311: EMPTY
4312: LIST
4313: ADD
4314: ST_TO_ADDR
// surv3 = surv3 diff surv3 [ 1 ] ;
4315: LD_ADDR_EXP 125
4319: PUSH
4320: LD_EXP 125
4324: PUSH
4325: LD_EXP 125
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: DIFF
4334: ST_TO_ADDR
// end else
4335: GO 4401
// begin nedoboje = nedoboje ^ [ ostatni [ 1 ] ] ;
4337: LD_ADDR_LOC 6
4341: PUSH
4342: LD_LOC 6
4346: PUSH
4347: LD_LOC 5
4351: PUSH
4352: LD_INT 1
4354: ARRAY
4355: PUSH
4356: EMPTY
4357: LIST
4358: ADD
4359: ST_TO_ADDR
// setside ( [ ostatni [ 1 ] ] , ru ) ;
4360: LD_LOC 5
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PUSH
4369: EMPTY
4370: LIST
4371: PPUSH
4372: LD_EXP 1
4376: PPUSH
4377: CALL_OW 235
// ostatni = ostatni diff ostatni [ 1 ] ;
4381: LD_ADDR_LOC 5
4385: PUSH
4386: LD_LOC 5
4390: PUSH
4391: LD_LOC 5
4395: PUSH
4396: LD_INT 1
4398: ARRAY
4399: DIFF
4400: ST_TO_ADDR
// end ;
4401: GO 4283
4403: POP
4404: POP
// tmp3 = obeti ^ obeti2 ^ survivors ;
4405: LD_ADDR_VAR 0 4
4409: PUSH
4410: LD_LOC 2
4414: PUSH
4415: LD_LOC 3
4419: ADD
4420: PUSH
4421: LD_LOC 4
4425: ADD
4426: ST_TO_ADDR
// vehikly = [ ] ;
4427: LD_ADDR_LOC 11
4431: PUSH
4432: EMPTY
4433: ST_TO_ADDR
// vc_control = control_manual ;
4434: LD_ADDR_OWVAR 38
4438: PUSH
4439: LD_INT 1
4441: ST_TO_ADDR
// vc_engine = engine_siberite ;
4442: LD_ADDR_OWVAR 39
4446: PUSH
4447: LD_INT 3
4449: ST_TO_ADDR
// uc_side = ru ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_EXP 1
4459: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
4460: LD_ADDR_OWVAR 40
4464: PUSH
4465: LD_INT 51
4467: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
4468: LD_ADDR_OWVAR 37
4472: PUSH
4473: LD_INT 21
4475: ST_TO_ADDR
// for tmp = 1 to 3 do
4476: LD_ADDR_VAR 0 2
4480: PUSH
4481: DOUBLE
4482: LD_INT 1
4484: DEC
4485: ST_TO_ADDR
4486: LD_INT 3
4488: PUSH
4489: FOR_TO
4490: IFFALSE 4602
// begin tmp2 = createvehicle ;
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: CALL_OW 45
4501: ST_TO_ADDR
// if tmp = 1 then
4502: LD_VAR 0 2
4506: PUSH
4507: LD_INT 1
4509: EQUAL
4510: IFFALSE 4544
// begin setcargo ( tmp2 , mat_oil , 90 ) ;
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: LD_INT 90
4522: PPUSH
4523: CALL_OW 290
// addcargo ( tmp2 , mat_cans , 10 ) ;
4527: LD_VAR 0 3
4531: PPUSH
4532: LD_INT 1
4534: PPUSH
4535: LD_INT 10
4537: PPUSH
4538: CALL_OW 291
// end else
4542: GO 4559
// setcargo ( tmp2 , mat_cans , 100 ) ;
4544: LD_VAR 0 3
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: LD_INT 100
4554: PPUSH
4555: CALL_OW 290
// placehumaninunit ( nedoboje [ tmp ] , tmp2 ) ;
4559: LD_LOC 6
4563: PUSH
4564: LD_VAR 0 2
4568: ARRAY
4569: PPUSH
4570: LD_VAR 0 3
4574: PPUSH
4575: CALL_OW 52
// placeunitxyr ( tmp2 , 105 , 115 , 15 , false ) ;
4579: LD_VAR 0 3
4583: PPUSH
4584: LD_INT 105
4586: PPUSH
4587: LD_INT 115
4589: PPUSH
4590: LD_INT 15
4592: PPUSH
4593: LD_INT 0
4595: PPUSH
4596: CALL_OW 50
// end ;
4600: GO 4489
4602: POP
4603: POP
// placeunitxyr ( nedoboje [ 4 ] , 105 , 115 , 15 , false ) ;
4604: LD_LOC 6
4608: PUSH
4609: LD_INT 4
4611: ARRAY
4612: PPUSH
4613: LD_INT 105
4615: PPUSH
4616: LD_INT 115
4618: PPUSH
4619: LD_INT 15
4621: PPUSH
4622: LD_INT 0
4624: PPUSH
4625: CALL_OW 50
// placeunitxyr ( nedoboje [ 5 ] , 105 , 115 , 15 , false ) ;
4629: LD_LOC 6
4633: PUSH
4634: LD_INT 5
4636: ARRAY
4637: PPUSH
4638: LD_INT 105
4640: PPUSH
4641: LD_INT 115
4643: PPUSH
4644: LD_INT 15
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
// if masha then
4654: LD_EXP 123
4658: IFFALSE 4697
// begin placehumaninunit ( burlak , masha ) ;
4660: LD_EXP 120
4664: PPUSH
4665: LD_EXP 123
4669: PPUSH
4670: CALL_OW 52
// placeunitxyr ( masha , 105 , 115 , 15 , false ) ;
4674: LD_EXP 123
4678: PPUSH
4679: LD_INT 105
4681: PPUSH
4682: LD_INT 115
4684: PPUSH
4685: LD_INT 15
4687: PPUSH
4688: LD_INT 0
4690: PPUSH
4691: CALL_OW 50
// end else
4695: GO 4718
// placeunitxyr ( burlak , 105 , 115 , 15 , false ) ;
4697: LD_EXP 120
4701: PPUSH
4702: LD_INT 105
4704: PPUSH
4705: LD_INT 115
4707: PPUSH
4708: LD_INT 15
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// uc_side = ru2 ;
4718: LD_ADDR_OWVAR 20
4722: PUSH
4723: LD_EXP 2
4727: ST_TO_ADDR
// tmp2 = [ [ ru_medium_tracked , ru_gatling_gun ] , [ ru_medium_tracked , ru_gatling_gun ] , [ ru_medium_tracked , ru_gatling_gun ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_heavy_tracked , ru_heavy_gun ] , [ ru_heavy_tracked , ru_heavy_gun ] , [ ru_heavy_tracked , ru_heavy_gun ] ] ;
4728: LD_ADDR_VAR 0 3
4732: PUSH
4733: LD_INT 22
4735: PUSH
4736: LD_INT 43
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 22
4745: PUSH
4746: LD_INT 43
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 43
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 22
4765: PUSH
4766: LD_INT 45
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 22
4775: PUSH
4776: LD_INT 45
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 45
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 22
4795: PUSH
4796: LD_INT 44
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 44
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 22
4815: PUSH
4816: LD_INT 44
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 22
4825: PUSH
4826: LD_INT 44
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: PUSH
4833: LD_INT 22
4835: PUSH
4836: LD_INT 45
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 24
4845: PUSH
4846: LD_INT 46
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 24
4855: PUSH
4856: LD_INT 46
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 24
4865: PUSH
4866: LD_INT 46
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// for tmp = 1 to 14 do
4889: LD_ADDR_VAR 0 2
4893: PUSH
4894: DOUBLE
4895: LD_INT 1
4897: DEC
4898: ST_TO_ADDR
4899: LD_INT 14
4901: PUSH
4902: FOR_TO
4903: IFFALSE 5019
// begin vc_weapon = tmp2 [ tmp ] [ 2 ] ;
4905: LD_ADDR_OWVAR 40
4909: PUSH
4910: LD_VAR 0 3
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PUSH
4921: LD_INT 2
4923: ARRAY
4924: ST_TO_ADDR
// vc_chassis = tmp2 [ tmp ] [ 1 ] ;
4925: LD_ADDR_OWVAR 37
4929: PUSH
4930: LD_VAR 0 3
4934: PUSH
4935: LD_VAR 0 2
4939: ARRAY
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: ST_TO_ADDR
// vehikly = vehikly ^ [ createvehicle ] ;
4945: LD_ADDR_LOC 11
4949: PUSH
4950: LD_LOC 11
4954: PUSH
4955: CALL_OW 45
4959: PUSH
4960: EMPTY
4961: LIST
4962: ADD
4963: ST_TO_ADDR
// placehumaninunit ( tmp3 [ tmp ] , vehikly [ tmp ] ) ;
4964: LD_VAR 0 4
4968: PUSH
4969: LD_VAR 0 2
4973: ARRAY
4974: PPUSH
4975: LD_LOC 11
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: PPUSH
4986: CALL_OW 52
// placeunitxyr ( vehikly [ tmp ] , 105 , 115 , 15 , false ) ;
4990: LD_LOC 11
4994: PUSH
4995: LD_VAR 0 2
4999: ARRAY
5000: PPUSH
5001: LD_INT 105
5003: PPUSH
5004: LD_INT 115
5006: PPUSH
5007: LD_INT 15
5009: PPUSH
5010: LD_INT 0
5012: PPUSH
5013: CALL_OW 50
// end ;
5017: GO 4902
5019: POP
5020: POP
// vehiklyo = vehikly [ 1 ] ^ vehikly [ 2 ] ^ vehikly [ 3 ] ^ vehikly [ 4 ] ^ vehikly [ 5 ] ^ vehikly [ 6 ] ^ vehikly [ 7 ] ;
5021: LD_ADDR_LOC 12
5025: PUSH
5026: LD_LOC 11
5030: PUSH
5031: LD_INT 1
5033: ARRAY
5034: PUSH
5035: LD_LOC 11
5039: PUSH
5040: LD_INT 2
5042: ARRAY
5043: ADD
5044: PUSH
5045: LD_LOC 11
5049: PUSH
5050: LD_INT 3
5052: ARRAY
5053: ADD
5054: PUSH
5055: LD_LOC 11
5059: PUSH
5060: LD_INT 4
5062: ARRAY
5063: ADD
5064: PUSH
5065: LD_LOC 11
5069: PUSH
5070: LD_INT 5
5072: ARRAY
5073: ADD
5074: PUSH
5075: LD_LOC 11
5079: PUSH
5080: LD_INT 6
5082: ARRAY
5083: ADD
5084: PUSH
5085: LD_LOC 11
5089: PUSH
5090: LD_INT 7
5092: ARRAY
5093: ADD
5094: ST_TO_ADDR
// vehiklys = vehikly [ 8 ] ^ vehikly [ 9 ] ^ vehikly [ 10 ] ^ vehikly [ 11 ] ^ vehikly [ 12 ] ^ vehikly [ 13 ] ^ vehikly [ 14 ] ;
5095: LD_ADDR_LOC 13
5099: PUSH
5100: LD_LOC 11
5104: PUSH
5105: LD_INT 8
5107: ARRAY
5108: PUSH
5109: LD_LOC 11
5113: PUSH
5114: LD_INT 9
5116: ARRAY
5117: ADD
5118: PUSH
5119: LD_LOC 11
5123: PUSH
5124: LD_INT 10
5126: ARRAY
5127: ADD
5128: PUSH
5129: LD_LOC 11
5133: PUSH
5134: LD_INT 11
5136: ARRAY
5137: ADD
5138: PUSH
5139: LD_LOC 11
5143: PUSH
5144: LD_INT 12
5146: ARRAY
5147: ADD
5148: PUSH
5149: LD_LOC 11
5153: PUSH
5154: LD_INT 13
5156: ARRAY
5157: ADD
5158: PUSH
5159: LD_LOC 11
5163: PUSH
5164: LD_INT 14
5166: ARRAY
5167: ADD
5168: ST_TO_ADDR
// tmp = game_speed ;
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: LD_OWVAR 65
5178: ST_TO_ADDR
// game_speed = 2 ;
5179: LD_ADDR_OWVAR 65
5183: PUSH
5184: LD_INT 2
5186: ST_TO_ADDR
// commovexy ( vehikly , 95 , 98 ) ;
5187: LD_LOC 11
5191: PPUSH
5192: LD_INT 95
5194: PPUSH
5195: LD_INT 98
5197: PPUSH
5198: CALL_OW 111
// ingameon ;
5202: CALL_OW 8
// wait ( 0 0$7 ) ;
5206: LD_INT 245
5208: PPUSH
5209: CALL_OW 67
// while not myisinarea ( vehikly , arrival , 95 , 98 ) do
5213: LD_LOC 11
5217: PPUSH
5218: LD_INT 4
5220: PPUSH
5221: LD_INT 95
5223: PPUSH
5224: LD_INT 98
5226: PPUSH
5227: CALL 2079 0 4
5231: NOT
5232: IFFALSE 5243
// wait ( 0 0$1 ) ;
5234: LD_INT 35
5236: PPUSH
5237: CALL_OW 67
5241: GO 5213
// vsevol_v = isinunit ( vsevol ) ;
5243: LD_ADDR_LOC 7
5247: PUSH
5248: LD_EXP 101
5252: PPUSH
5253: CALL_OW 310
5257: ST_TO_ADDR
// popov_v = isinunit ( popov ) ;
5258: LD_ADDR_LOC 8
5262: PUSH
5263: LD_EXP 102
5267: PPUSH
5268: CALL_OW 310
5272: ST_TO_ADDR
// gaydar_v = isinunit ( gaydar ) ;
5273: LD_ADDR_LOC 9
5277: PUSH
5278: LD_EXP 103
5282: PPUSH
5283: CALL_OW 310
5287: ST_TO_ADDR
// yashin_v = isinunit ( yashin ) ;
5288: LD_ADDR_LOC 10
5292: PUSH
5293: LD_EXP 104
5297: PPUSH
5298: CALL_OW 310
5302: ST_TO_ADDR
// comexitvehicle ( [ yashin , popov , gaydar , vsevol ] ) ;
5303: LD_EXP 104
5307: PUSH
5308: LD_EXP 102
5312: PUSH
5313: LD_EXP 103
5317: PUSH
5318: LD_EXP 101
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PPUSH
5329: CALL_OW 121
// wait ( 0 0$0.5 ) ;
5333: LD_INT 18
5335: PPUSH
5336: CALL_OW 67
// game_speed = tmp ;
5340: LD_ADDR_OWVAR 65
5344: PUSH
5345: LD_VAR 0 2
5349: ST_TO_ADDR
// centernowonunits ( [ burlak , yashin ] ) ;
5350: LD_EXP 120
5354: PUSH
5355: LD_EXP 104
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PPUSH
5364: CALL_OW 87
// comstop ( vehikly ) ;
5368: LD_LOC 11
5372: PPUSH
5373: CALL_OW 141
// say ( yashin , DBetaStart-Yas-1 ) ;
5377: LD_EXP 104
5381: PPUSH
5382: LD_STRING DBetaStart-Yas-1
5384: PPUSH
5385: CALL_OW 88
// if vs then
5389: LD_EXP 124
5393: IFFALSE 5409
// say ( yashin , DBetaStart-Yas-1a ) else
5395: LD_EXP 104
5399: PPUSH
5400: LD_STRING DBetaStart-Yas-1a
5402: PPUSH
5403: CALL_OW 88
5407: GO 5421
// say ( yashin , DBetaStart-Yas-1b ) ;
5409: LD_EXP 104
5413: PPUSH
5414: LD_STRING DBetaStart-Yas-1b
5416: PPUSH
5417: CALL_OW 88
// say ( yashin , DBetaStart-Yas-1c ) ;
5421: LD_EXP 104
5425: PPUSH
5426: LD_STRING DBetaStart-Yas-1c
5428: PPUSH
5429: CALL_OW 88
// sayeffect ( DBetaStart-All-1 ) ;
5433: LD_STRING DBetaStart-All-1
5435: PPUSH
5436: CALL_OW 96
// while not myisinarea ( [ vsevol , popov , gaydar ] , arrival , 95 , 98 ) do
5440: LD_EXP 101
5444: PUSH
5445: LD_EXP 102
5449: PUSH
5450: LD_EXP 103
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PPUSH
5460: LD_INT 4
5462: PPUSH
5463: LD_INT 95
5465: PPUSH
5466: LD_INT 98
5468: PPUSH
5469: CALL 2079 0 4
5473: NOT
5474: IFFALSE 5485
// wait ( 0 0$0.5 ) ;
5476: LD_INT 18
5478: PPUSH
5479: CALL_OW 67
5483: GO 5440
// DoNotAttack ( am , vsevol ) ;
5485: LD_EXP 3
5489: PPUSH
5490: LD_EXP 101
5494: PPUSH
5495: CALL_OW 471
// DoNotAttack ( am , popov ) ;
5499: LD_EXP 3
5503: PPUSH
5504: LD_EXP 102
5508: PPUSH
5509: CALL_OW 471
// DoNotAttack ( am , gaydar ) ;
5513: LD_EXP 3
5517: PPUSH
5518: LD_EXP 103
5522: PPUSH
5523: CALL_OW 471
// comremember ( [ vsevol , popov , gaydar ] ) ;
5527: LD_EXP 101
5531: PUSH
5532: LD_EXP 102
5536: PUSH
5537: LD_EXP 103
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: PPUSH
5547: CALL_OW 143
// commovexy ( vsevol , 135 , 90 ) ;
5551: LD_EXP 101
5555: PPUSH
5556: LD_INT 135
5558: PPUSH
5559: LD_INT 90
5561: PPUSH
5562: CALL_OW 111
// addcommovexy ( vsevol , 130 , 66 ) ;
5566: LD_EXP 101
5570: PPUSH
5571: LD_INT 130
5573: PPUSH
5574: LD_INT 66
5576: PPUSH
5577: CALL_OW 171
// addcommovexy ( vsevol , 124 , 65 ) ;
5581: LD_EXP 101
5585: PPUSH
5586: LD_INT 124
5588: PPUSH
5589: LD_INT 65
5591: PPUSH
5592: CALL_OW 171
// addcomwait ( vsevol , 0 0$0.5 ) ;
5596: LD_EXP 101
5600: PPUSH
5601: LD_INT 18
5603: PPUSH
5604: CALL_OW 202
// addcommovexy ( vsevol , 131 , 73 ) ;
5608: LD_EXP 101
5612: PPUSH
5613: LD_INT 131
5615: PPUSH
5616: LD_INT 73
5618: PPUSH
5619: CALL_OW 171
// addcomwait ( vsevol , 2 2$15 ) ;
5623: LD_EXP 101
5627: PPUSH
5628: LD_INT 4725
5630: PPUSH
5631: CALL_OW 202
// addcomreturn ( vsevol ) ;
5635: LD_EXP 101
5639: PPUSH
5640: CALL_OW 204
// commovexy ( popov , 66 , 88 ) ;
5644: LD_EXP 102
5648: PPUSH
5649: LD_INT 66
5651: PPUSH
5652: LD_INT 88
5654: PPUSH
5655: CALL_OW 111
// addcommovexy ( popov , 44 , 62 ) ;
5659: LD_EXP 102
5663: PPUSH
5664: LD_INT 44
5666: PPUSH
5667: LD_INT 62
5669: PPUSH
5670: CALL_OW 171
// addcommovexy ( popov , 45 , 68 ) ;
5674: LD_EXP 102
5678: PPUSH
5679: LD_INT 45
5681: PPUSH
5682: LD_INT 68
5684: PPUSH
5685: CALL_OW 171
// addcomwait ( popov , 3 3$15 ) ;
5689: LD_EXP 102
5693: PPUSH
5694: LD_INT 6825
5696: PPUSH
5697: CALL_OW 202
// addcomreturn ( popov ) ;
5701: LD_EXP 102
5705: PPUSH
5706: CALL_OW 204
// commovexy ( gaydar , 83 , 72 ) ;
5710: LD_EXP 103
5714: PPUSH
5715: LD_INT 83
5717: PPUSH
5718: LD_INT 72
5720: PPUSH
5721: CALL_OW 111
// addcomreturn ( gaydar ) ;
5725: LD_EXP 103
5729: PPUSH
5730: CALL_OW 204
// wait ( 0 0$7 ) ;
5734: LD_INT 245
5736: PPUSH
5737: CALL_OW 67
// comstop ( vehikly ) ;
5741: LD_LOC 11
5745: PPUSH
5746: CALL_OW 141
// say ( yashin , DBetaStart-Yas-2 ) ;
5750: LD_EXP 104
5754: PPUSH
5755: LD_STRING DBetaStart-Yas-2
5757: PPUSH
5758: CALL_OW 88
// say ( yashin , DBetaStart-Yas-2a ) ;
5762: LD_EXP 104
5766: PPUSH
5767: LD_STRING DBetaStart-Yas-2a
5769: PPUSH
5770: CALL_OW 88
// say ( burlak , DBetaStart-Bur-2 ) ;
5774: LD_EXP 120
5778: PPUSH
5779: LD_STRING DBetaStart-Bur-2
5781: PPUSH
5782: CALL_OW 88
// ingameoff ;
5786: CALL_OW 9
// saveforquickrestart ;
5790: CALL_OW 22
// wait ( 11 ) ;
5794: LD_INT 11
5796: PPUSH
5797: CALL_OW 67
// changemissionobjectives ( MStart ) ;
5801: LD_STRING MStart
5803: PPUSH
5804: CALL_OW 337
// dontGoOutSideArea := true ;
5808: LD_ADDR_EXP 99
5812: PUSH
5813: LD_INT 1
5815: ST_TO_ADDR
// wait ( 0 0$17 ) ;
5816: LD_INT 595
5818: PPUSH
5819: CALL_OW 67
// enable ( 01 ) ;
5823: LD_INT 1
5825: ENABLE_MARKED
// end ;
5826: LD_VAR 0 1
5830: RET
// every 0 0$1 trigger dontGoOutSideArea do var tmp ;
5831: LD_EXP 99
5835: IFFALSE 5911
5837: GO 5839
5839: DISABLE
5840: LD_INT 0
5842: PPUSH
// begin enable ;
5843: ENABLE
// tmp := FilterUnitsExceptArea ( arrival , [ f_side , ru2 ] ) diff [ vsevol , gaydar , popov ] ;
5844: LD_ADDR_VAR 0 1
5848: PUSH
5849: LD_INT 4
5851: PPUSH
5852: LD_INT 22
5854: PUSH
5855: LD_EXP 2
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 71
5868: PUSH
5869: LD_EXP 101
5873: PUSH
5874: LD_EXP 103
5878: PUSH
5879: LD_EXP 102
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: DIFF
5889: ST_TO_ADDR
// if not tmp then
5890: LD_VAR 0 1
5894: NOT
5895: IFFALSE 5899
// exit ;
5897: GO 5911
// ComMoveToArea ( tmp , arrival ) ;
5899: LD_VAR 0 1
5903: PPUSH
5904: LD_INT 4
5906: PPUSH
5907: CALL_OW 113
// end ;
5911: PPOPN 1
5913: END
// var basedone ; every 0 0$1 trigger isinarea ( vsevol , arrival ) and isinarea ( popov , arrival ) and isinarea ( gaydar , arrival ) marked 01 do
5914: LD_EXP 101
5918: PPUSH
5919: LD_INT 4
5921: PPUSH
5922: CALL_OW 308
5926: PUSH
5927: LD_EXP 102
5931: PPUSH
5932: LD_INT 4
5934: PPUSH
5935: CALL_OW 308
5939: AND
5940: PUSH
5941: LD_EXP 103
5945: PPUSH
5946: LD_INT 4
5948: PPUSH
5949: CALL_OW 308
5953: AND
5954: IFFALSE 6434
5956: GO 5958
5958: DISABLE
// begin NormalAttack ( am , vsevol ) ;
5959: LD_EXP 3
5963: PPUSH
5964: LD_EXP 101
5968: PPUSH
5969: CALL_OW 472
// NormalAttack ( am , popov ) ;
5973: LD_EXP 3
5977: PPUSH
5978: LD_EXP 102
5982: PPUSH
5983: CALL_OW 472
// NormalAttack ( am , gaydar ) ;
5987: LD_EXP 3
5991: PPUSH
5992: LD_EXP 103
5996: PPUSH
5997: CALL_OW 472
// centernowonunits ( [ yashin , popov , vsevol , gaydar ] ) ;
6001: LD_EXP 104
6005: PUSH
6006: LD_EXP 102
6010: PUSH
6011: LD_EXP 101
6015: PUSH
6016: LD_EXP 103
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PPUSH
6027: CALL_OW 87
// dialogueon ;
6031: CALL_OW 6
// say ( yashin , DBetaAttack-Yas-1 ) ;
6035: LD_EXP 104
6039: PPUSH
6040: LD_STRING DBetaAttack-Yas-1
6042: PPUSH
6043: CALL_OW 88
// centernowonxy ( 123 , 64 ) ;
6047: LD_INT 123
6049: PPUSH
6050: LD_INT 64
6052: PPUSH
6053: CALL_OW 86
// say ( vsevol , DBetaAttack-Vse-1 ) ;
6057: LD_EXP 101
6061: PPUSH
6062: LD_STRING DBetaAttack-Vse-1
6064: PPUSH
6065: CALL_OW 88
// centernowonxy ( 48 , 62 ) ;
6069: LD_INT 48
6071: PPUSH
6072: LD_INT 62
6074: PPUSH
6075: CALL_OW 86
// say ( popov , DBetaAttack-Pop-1 ) ;
6079: LD_EXP 102
6083: PPUSH
6084: LD_STRING DBetaAttack-Pop-1
6086: PPUSH
6087: CALL_OW 88
// centernowonxy ( 83 , 72 ) ;
6091: LD_INT 83
6093: PPUSH
6094: LD_INT 72
6096: PPUSH
6097: CALL_OW 86
// say ( gaydar , DBetaAttack-Gay-1 ) ;
6101: LD_EXP 103
6105: PPUSH
6106: LD_STRING DBetaAttack-Gay-1
6108: PPUSH
6109: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-2 ) ;
6113: LD_EXP 104
6117: PPUSH
6118: LD_STRING DBetaAttack-Yas-2
6120: PPUSH
6121: CALL_OW 88
// basedone = false ;
6125: LD_ADDR_LOC 14
6129: PUSH
6130: LD_INT 0
6132: ST_TO_ADDR
// if filterallunits ( [ [ f_side , ru ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) and filterallunits ( [ [ f_side , ru ] , [ f_btype , b_factory ] ] ) then
6133: LD_INT 22
6135: PUSH
6136: LD_EXP 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 30
6150: PUSH
6151: LD_INT 26
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 30
6160: PUSH
6161: LD_INT 28
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PPUSH
6177: CALL_OW 69
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_EXP 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 30
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PPUSH
6208: CALL_OW 69
6212: AND
6213: IFFALSE 6271
// begin say ( burlak , DBetaAttack-Bur-2 ) ;
6215: LD_EXP 120
6219: PPUSH
6220: LD_STRING DBetaAttack-Bur-2
6222: PPUSH
6223: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-3 ) ;
6227: LD_EXP 104
6231: PPUSH
6232: LD_STRING DBetaAttack-Yas-3
6234: PPUSH
6235: CALL_OW 88
// changemissionobjectives ( MStarta ) ;
6239: LD_STRING MStarta
6241: PPUSH
6242: CALL_OW 337
// changemissionobjectives ( MfastOut ) ;
6246: LD_STRING MfastOut
6248: PPUSH
6249: CALL_OW 337
// basedone = true ;
6253: LD_ADDR_LOC 14
6257: PUSH
6258: LD_INT 1
6260: ST_TO_ADDR
// rychlik = true ;
6261: LD_ADDR_EXP 98
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// end else
6269: GO 6302
// begin say ( burlak , DBetaAttack-Bur-3 ) ;
6271: LD_EXP 120
6275: PPUSH
6276: LD_STRING DBetaAttack-Bur-3
6278: PPUSH
6279: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-4 ) ;
6283: LD_EXP 104
6287: PPUSH
6288: LD_STRING DBetaAttack-Yas-4
6290: PPUSH
6291: CALL_OW 88
// changemissionobjectives ( MFastDel ) ;
6295: LD_STRING MFastDel
6297: PPUSH
6298: CALL_OW 337
// end ; say ( burlak , DBetaAttack-Bur-4 ) ;
6302: LD_EXP 120
6306: PPUSH
6307: LD_STRING DBetaAttack-Bur-4
6309: PPUSH
6310: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-5 ) ;
6314: LD_EXP 104
6318: PPUSH
6319: LD_STRING DBetaAttack-Yas-5
6321: PPUSH
6322: CALL_OW 88
// if filterallunits ( [ [ f_side , ru ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) then
6326: LD_INT 22
6328: PUSH
6329: LD_EXP 1
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 2
6340: PUSH
6341: LD_INT 30
6343: PUSH
6344: LD_INT 6
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 30
6353: PUSH
6354: LD_INT 7
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 30
6363: PUSH
6364: LD_INT 8
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PPUSH
6381: CALL_OW 69
6385: IFFALSE 6411
// begin say ( burlak , DBetaAttack-Bur-5 ) ;
6387: LD_EXP 120
6391: PPUSH
6392: LD_STRING DBetaAttack-Bur-5
6394: PPUSH
6395: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-6 ) ;
6399: LD_EXP 104
6403: PPUSH
6404: LD_STRING DBetaAttack-Yas-6
6406: PPUSH
6407: CALL_OW 88
// end ; say ( burlak , DBetaAttack-Bur-6 ) ;
6411: LD_EXP 120
6415: PPUSH
6416: LD_STRING DBetaAttack-Bur-6
6418: PPUSH
6419: CALL_OW 88
// dialogueoff ;
6423: CALL_OW 7
// changemissionobjectives ( MBull ) ;
6427: LD_STRING MBull
6429: PPUSH
6430: CALL_OW 337
// end ;
6434: END
// var lesnik ; function jevlese ; begin
6435: LD_INT 0
6437: PPUSH
// lesnik = filterunitsinarea ( les , [ [ f_side , ru ] , [ f_ok ] ] ) ;
6438: LD_ADDR_LOC 15
6442: PUSH
6443: LD_INT 5
6445: PPUSH
6446: LD_INT 22
6448: PUSH
6449: LD_EXP 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 50
6460: PUSH
6461: EMPTY
6462: LIST
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 70
6472: ST_TO_ADDR
// result = 0 + lesnik ;
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_INT 0
6480: PUSH
6481: LD_LOC 15
6485: PLUS
6486: ST_TO_ADDR
// end ;
6487: LD_VAR 0 1
6491: RET
// export lastsay ; every 0 0$1.1 trigger jevlese marked 06 do
6492: CALL 6435 0 0
6496: IFFALSE 6560
6498: GO 6500
6500: DISABLE
// begin enable ;
6501: ENABLE
// commovetoarea ( lesnik , targetarea ) ;
6502: LD_LOC 15
6506: PPUSH
6507: LD_INT 9
6509: PPUSH
6510: CALL_OW 113
// if ( tick - lastsay ) > ( 0 0$7 ) then
6514: LD_OWVAR 1
6518: PUSH
6519: LD_EXP 126
6523: MINUS
6524: PUSH
6525: LD_INT 245
6527: GREATER
6528: IFFALSE 6560
// begin dialogueon ;
6530: CALL_OW 6
// say ( yashin , DSpoil-Yas-1 ) ;
6534: LD_EXP 104
6538: PPUSH
6539: LD_STRING DSpoil-Yas-1
6541: PPUSH
6542: CALL_OW 88
// dialogueoff ;
6546: CALL_OW 7
// lastsay = tick ;
6550: LD_ADDR_EXP 126
6554: PUSH
6555: LD_OWVAR 1
6559: ST_TO_ADDR
// end ; end ;
6560: END
// var buldoz1 , buldoz2 ; function buldozery ; var buldoz ; begin
6561: LD_INT 0
6563: PPUSH
6564: PPUSH
// buldoz = filterallunits ( [ [ f_side , ru ] , [ f_weapon , ru_bulldozer ] ] ) ;
6565: LD_ADDR_VAR 0 2
6569: PUSH
6570: LD_INT 22
6572: PUSH
6573: LD_EXP 1
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 34
6584: PUSH
6585: LD_INT 53
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PPUSH
6596: CALL_OW 69
6600: ST_TO_ADDR
// result = 0 + buldoz ;
6601: LD_ADDR_VAR 0 1
6605: PUSH
6606: LD_INT 0
6608: PUSH
6609: LD_VAR 0 2
6613: PLUS
6614: ST_TO_ADDR
// if result > 1 then
6615: LD_VAR 0 1
6619: PUSH
6620: LD_INT 1
6622: GREATER
6623: IFFALSE 6653
// begin buldoz1 = buldoz [ 1 ] ;
6625: LD_ADDR_LOC 16
6629: PUSH
6630: LD_VAR 0 2
6634: PUSH
6635: LD_INT 1
6637: ARRAY
6638: ST_TO_ADDR
// buldoz2 = buldoz [ 2 ] ;
6639: LD_ADDR_LOC 17
6643: PUSH
6644: LD_VAR 0 2
6648: PUSH
6649: LD_INT 2
6651: ARRAY
6652: ST_TO_ADDR
// end ; end ;
6653: LD_VAR 0 1
6657: RET
// function jsou_zpatky ; var tmp ; begin
6658: LD_INT 0
6660: PPUSH
6661: PPUSH
// result = true ;
6662: LD_ADDR_VAR 0 1
6666: PUSH
6667: LD_INT 1
6669: ST_TO_ADDR
// for tmp in survivors do
6670: LD_ADDR_VAR 0 2
6674: PUSH
6675: LD_LOC 4
6679: PUSH
6680: FOR_IN
6681: IFFALSE 6724
// if not isinarea ( tmp , uketar ) and not isdead ( tmp ) then
6683: LD_VAR 0 2
6687: PPUSH
6688: LD_INT 7
6690: PPUSH
6691: CALL_OW 308
6695: NOT
6696: PUSH
6697: LD_VAR 0 2
6701: PPUSH
6702: CALL_OW 301
6706: NOT
6707: AND
6708: IFFALSE 6722
// begin result = false ;
6710: LD_ADDR_VAR 0 1
6714: PUSH
6715: LD_INT 0
6717: ST_TO_ADDR
// exit ;
6718: POP
6719: POP
6720: GO 6726
// end ;
6722: GO 6680
6724: POP
6725: POP
// end ;
6726: LD_VAR 0 1
6730: RET
// var nenicit , poskoz ; every 0 0$0.3 marked 10 do var tmp ;
6731: GO 6733
6733: DISABLE
6734: LD_INT 0
6736: PPUSH
// begin if nenicit then
6737: LD_LOC 18
6741: IFFALSE 6744
// enable ;
6743: ENABLE
// for tmp in [ ambunk2 , ambunk3 , ambunk4 , ambunk5 , ambunk6 ] do
6744: LD_ADDR_VAR 0 1
6748: PUSH
6749: LD_INT 15
6751: PUSH
6752: LD_INT 14
6754: PUSH
6755: LD_INT 6
6757: PUSH
6758: LD_INT 7
6760: PUSH
6761: LD_INT 13
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: FOR_IN
6772: IFFALSE 6886
// if getlives ( tmp ) <= 500 then
6774: LD_VAR 0 1
6778: PPUSH
6779: CALL_OW 256
6783: PUSH
6784: LD_INT 500
6786: LESSEQUAL
6787: IFFALSE 6824
// begin donotattack ( ru2 , tmp ) ;
6789: LD_EXP 2
6793: PPUSH
6794: LD_VAR 0 1
6798: PPUSH
6799: CALL_OW 471
// poskoz = poskoz union [ tmp ] ;
6803: LD_ADDR_LOC 19
6807: PUSH
6808: LD_LOC 19
6812: PUSH
6813: LD_VAR 0 1
6817: PUSH
6818: EMPTY
6819: LIST
6820: UNION
6821: ST_TO_ADDR
// end else
6822: GO 6884
// if ( getlives ( tmp ) > 800 ) and ( tmp in poskoz ) then
6824: LD_VAR 0 1
6828: PPUSH
6829: CALL_OW 256
6833: PUSH
6834: LD_INT 800
6836: GREATER
6837: PUSH
6838: LD_VAR 0 1
6842: PUSH
6843: LD_LOC 19
6847: IN
6848: AND
6849: IFFALSE 6884
// begin poskoz = poskoz diff [ tmp ] ;
6851: LD_ADDR_LOC 19
6855: PUSH
6856: LD_LOC 19
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: EMPTY
6867: LIST
6868: DIFF
6869: ST_TO_ADDR
// normalattack ( ru2 , tmp ) ;
6870: LD_EXP 2
6874: PPUSH
6875: LD_VAR 0 1
6879: PPUSH
6880: CALL_OW 472
// end ;
6884: GO 6771
6886: POP
6887: POP
// end ;
6888: PPOPN 1
6890: END
// var devet , dva , center_o ; every 0 0$0.9 trigger buldozery >= 2 do var popin , gayin , tmp , tmp2 , tspeed , oldbl1 , oldbl2 ; var b1 , b2 ;
6891: CALL 6561 0 0
6895: PUSH
6896: LD_INT 2
6898: GREATEREQUAL
6899: IFFALSE 9943
6901: GO 6903
6903: DISABLE
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// begin dontGoOutSideArea := false ;
6915: LD_ADDR_EXP 99
6919: PUSH
6920: LD_INT 0
6922: ST_TO_ADDR
// changemissionobjectives ( MReady ) ;
6923: LD_STRING MReady
6925: PPUSH
6926: CALL_OW 337
// if not basedone then
6930: LD_LOC 14
6934: NOT
6935: IFFALSE 6944
// changemissionobjectives ( MStarta ) ;
6937: LD_STRING MStarta
6939: PPUSH
6940: CALL_OW 337
// popin = false ;
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: LD_INT 0
6951: ST_TO_ADDR
// gayin = false ;
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_INT 0
6959: ST_TO_ADDR
// setside ( [ buldoz1 , buldoz2 ] , ru2 ) ;
6960: LD_LOC 16
6964: PUSH
6965: LD_LOC 17
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PPUSH
6974: LD_EXP 2
6978: PPUSH
6979: CALL_OW 235
// if getcontrol ( buldoz1 ) = control_manual then
6983: LD_LOC 16
6987: PPUSH
6988: CALL_OW 263
6992: PUSH
6993: LD_INT 1
6995: EQUAL
6996: IFFALSE 7036
// begin comexitvehicle ( buldoz1 ) ;
6998: LD_LOC 16
7002: PPUSH
7003: CALL_OW 121
// wait ( 0 0$1 ) ;
7007: LD_INT 35
7009: PPUSH
7010: CALL_OW 67
// comenterunit ( popov , buldoz1 ) ;
7014: LD_EXP 102
7018: PPUSH
7019: LD_LOC 16
7023: PPUSH
7024: CALL_OW 120
// popin = true ;
7028: LD_ADDR_VAR 0 1
7032: PUSH
7033: LD_INT 1
7035: ST_TO_ADDR
// end ; if getcontrol ( buldoz2 ) = control_manual then
7036: LD_LOC 17
7040: PPUSH
7041: CALL_OW 263
7045: PUSH
7046: LD_INT 1
7048: EQUAL
7049: IFFALSE 7089
// begin comexitvehicle ( buldoz2 ) ;
7051: LD_LOC 17
7055: PPUSH
7056: CALL_OW 121
// wait ( 0 0$1 ) ;
7060: LD_INT 35
7062: PPUSH
7063: CALL_OW 67
// comenterunit ( gaydar , buldoz2 ) ;
7067: LD_EXP 103
7071: PPUSH
7072: LD_LOC 17
7076: PPUSH
7077: CALL_OW 120
// gayin = true ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: ST_TO_ADDR
// end ; if popin then
7089: LD_VAR 0 1
7093: IFFALSE 7150
// while not isinunit ( popov ) do
7095: LD_EXP 102
7099: PPUSH
7100: CALL_OW 310
7104: NOT
7105: IFFALSE 7150
// begin if isdrivenby ( buldoz1 ) then
7107: LD_LOC 16
7111: PPUSH
7112: CALL_OW 311
7116: IFFALSE 7127
// comexitvehicle ( buldoz1 ) ;
7118: LD_LOC 16
7122: PPUSH
7123: CALL_OW 121
// wait ( 0 0$0.3 ) ;
7127: LD_INT 10
7129: PPUSH
7130: CALL_OW 67
// comenterunit ( popov , buldoz1 ) ;
7134: LD_EXP 102
7138: PPUSH
7139: LD_LOC 16
7143: PPUSH
7144: CALL_OW 120
// end ;
7148: GO 7095
// if gayin then
7150: LD_VAR 0 2
7154: IFFALSE 7211
// while not isinunit ( gaydar ) do
7156: LD_EXP 103
7160: PPUSH
7161: CALL_OW 310
7165: NOT
7166: IFFALSE 7211
// begin if isdrivenby ( buldoz2 ) then
7168: LD_LOC 17
7172: PPUSH
7173: CALL_OW 311
7177: IFFALSE 7188
// comexitvehicle ( buldoz2 ) ;
7179: LD_LOC 17
7183: PPUSH
7184: CALL_OW 121
// wait ( 0 0$0.3 ) ;
7188: LD_INT 10
7190: PPUSH
7191: CALL_OW 67
// comenterunit ( gaydar , buldoz2 ) ;
7195: LD_EXP 103
7199: PPUSH
7200: LD_LOC 17
7204: PPUSH
7205: CALL_OW 120
// end ;
7209: GO 7156
// setattitude ( ru2 , am , att_neutral , true ) ;
7211: LD_EXP 2
7215: PPUSH
7216: LD_EXP 3
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: CALL_OW 80
// centernowonunits ( [ buldoz1 , buldoz2 ] ) ;
7231: LD_LOC 16
7235: PUSH
7236: LD_LOC 17
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PPUSH
7245: CALL_OW 87
// center_buld = true ;
7249: LD_ADDR_LOC 23
7253: PUSH
7254: LD_INT 1
7256: ST_TO_ADDR
// enable ( 05 ) ;
7257: LD_INT 5
7259: ENABLE_MARKED
// comfree ( filterallunits ( [ [ f_side , ru2 ] , [ f_type , unit_vehicle ] ] ) ) ;
7260: LD_INT 22
7262: PUSH
7263: LD_EXP 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PPUSH
7291: CALL_OW 139
// ingame_video = true ;
7295: LD_ADDR_OWVAR 52
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// interface_hidden = true ;
7303: LD_ADDR_OWVAR 54
7307: PUSH
7308: LD_INT 1
7310: ST_TO_ADDR
// disable ( 06 ) ;
7311: LD_INT 6
7313: DISABLE_MARKED
// commovexy ( buldoz1 , 87 , 86 ) ;
7314: LD_LOC 16
7318: PPUSH
7319: LD_INT 87
7321: PPUSH
7322: LD_INT 86
7324: PPUSH
7325: CALL_OW 111
// commovexy ( buldoz2 , 91 , 85 ) ;
7329: LD_LOC 17
7333: PPUSH
7334: LD_INT 91
7336: PPUSH
7337: LD_INT 85
7339: PPUSH
7340: CALL_OW 111
// commovexy ( buldoz2 , 91 , 84 ) ;
7344: LD_LOC 17
7348: PPUSH
7349: LD_INT 91
7351: PPUSH
7352: LD_INT 84
7354: PPUSH
7355: CALL_OW 111
// addcommovexy ( buldoz1 , 85 , 82 ) ;
7359: LD_LOC 16
7363: PPUSH
7364: LD_INT 85
7366: PPUSH
7367: LD_INT 82
7369: PPUSH
7370: CALL_OW 171
// addcommovexy ( buldoz2 , 89 , 81 ) ;
7374: LD_LOC 17
7378: PPUSH
7379: LD_INT 89
7381: PPUSH
7382: LD_INT 81
7384: PPUSH
7385: CALL_OW 171
// addcommovexy ( buldoz2 , 88 , 81 ) ;
7389: LD_LOC 17
7393: PPUSH
7394: LD_INT 88
7396: PPUSH
7397: LD_INT 81
7399: PPUSH
7400: CALL_OW 171
// addcommovexy ( buldoz1 , 83 , 78 ) ;
7404: LD_LOC 16
7408: PPUSH
7409: LD_INT 83
7411: PPUSH
7412: LD_INT 78
7414: PPUSH
7415: CALL_OW 171
// addcommovexy ( buldoz1 , 82 , 77 ) ;
7419: LD_LOC 16
7423: PPUSH
7424: LD_INT 82
7426: PPUSH
7427: LD_INT 77
7429: PPUSH
7430: CALL_OW 171
// addcommovexy ( buldoz1 , 82 , 76 ) ;
7434: LD_LOC 16
7438: PPUSH
7439: LD_INT 82
7441: PPUSH
7442: LD_INT 76
7444: PPUSH
7445: CALL_OW 171
// addcommovexy ( buldoz2 , 87 , 79 ) ;
7449: LD_LOC 17
7453: PPUSH
7454: LD_INT 87
7456: PPUSH
7457: LD_INT 79
7459: PPUSH
7460: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 74 ) ;
7464: LD_LOC 16
7468: PPUSH
7469: LD_INT 81
7471: PPUSH
7472: LD_INT 74
7474: PPUSH
7475: CALL_OW 171
// addcommovexy ( buldoz2 , 85 , 74 ) ;
7479: LD_LOC 17
7483: PPUSH
7484: LD_INT 85
7486: PPUSH
7487: LD_INT 74
7489: PPUSH
7490: CALL_OW 171
// addcommovexy ( buldoz1 , 79 , 69 ) ;
7494: LD_LOC 16
7498: PPUSH
7499: LD_INT 79
7501: PPUSH
7502: LD_INT 69
7504: PPUSH
7505: CALL_OW 171
// addcommovexy ( buldoz1 , 78 , 68 ) ;
7509: LD_LOC 16
7513: PPUSH
7514: LD_INT 78
7516: PPUSH
7517: LD_INT 68
7519: PPUSH
7520: CALL_OW 171
// addcommovexy ( buldoz1 , 79 , 67 ) ;
7524: LD_LOC 16
7528: PPUSH
7529: LD_INT 79
7531: PPUSH
7532: LD_INT 67
7534: PPUSH
7535: CALL_OW 171
// addcommovexy ( buldoz1 , 78 , 66 ) ;
7539: LD_LOC 16
7543: PPUSH
7544: LD_INT 78
7546: PPUSH
7547: LD_INT 66
7549: PPUSH
7550: CALL_OW 171
// addcommovexy ( buldoz2 , 83 , 70 ) ;
7554: LD_LOC 17
7558: PPUSH
7559: LD_INT 83
7561: PPUSH
7562: LD_INT 70
7564: PPUSH
7565: CALL_OW 171
// addcommovexy ( buldoz2 , 81 , 69 ) ;
7569: LD_LOC 17
7573: PPUSH
7574: LD_INT 81
7576: PPUSH
7577: LD_INT 69
7579: PPUSH
7580: CALL_OW 171
// addcommovexy ( buldoz2 , 80 , 66 ) ;
7584: LD_LOC 17
7588: PPUSH
7589: LD_INT 80
7591: PPUSH
7592: LD_INT 66
7594: PPUSH
7595: CALL_OW 171
// addcommovexy ( buldoz1 , 76 , 71 ) ;
7599: LD_LOC 16
7603: PPUSH
7604: LD_INT 76
7606: PPUSH
7607: LD_INT 71
7609: PPUSH
7610: CALL_OW 171
// addcommovexy ( buldoz2 , 86 , 71 ) ;
7614: LD_LOC 17
7618: PPUSH
7619: LD_INT 86
7621: PPUSH
7622: LD_INT 71
7624: PPUSH
7625: CALL_OW 171
// addcommovexy ( buldoz1 , 78 , 75 ) ;
7629: LD_LOC 16
7633: PPUSH
7634: LD_INT 78
7636: PPUSH
7637: LD_INT 75
7639: PPUSH
7640: CALL_OW 171
// addcommovexy ( buldoz2 , 88 , 73 ) ;
7644: LD_LOC 17
7648: PPUSH
7649: LD_INT 88
7651: PPUSH
7652: LD_INT 73
7654: PPUSH
7655: CALL_OW 171
// addcommovexy ( buldoz2 , 89 , 75 ) ;
7659: LD_LOC 17
7663: PPUSH
7664: LD_INT 89
7666: PPUSH
7667: LD_INT 75
7669: PPUSH
7670: CALL_OW 171
// addcommovexy ( buldoz1 , 80 , 78 ) ;
7674: LD_LOC 16
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: LD_INT 78
7684: PPUSH
7685: CALL_OW 171
// addcommovexy ( buldoz2 , 90 , 78 ) ;
7689: LD_LOC 17
7693: PPUSH
7694: LD_INT 90
7696: PPUSH
7697: LD_INT 78
7699: PPUSH
7700: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 81 ) ;
7704: LD_LOC 16
7708: PPUSH
7709: LD_INT 81
7711: PPUSH
7712: LD_INT 81
7714: PPUSH
7715: CALL_OW 171
// addcommovexy ( buldoz1 , 82 , 83 ) ;
7719: LD_LOC 16
7723: PPUSH
7724: LD_INT 82
7726: PPUSH
7727: LD_INT 83
7729: PPUSH
7730: CALL_OW 171
// addcommovexy ( buldoz1 , 83 , 84 ) ;
7734: LD_LOC 16
7738: PPUSH
7739: LD_INT 83
7741: PPUSH
7742: LD_INT 84
7744: PPUSH
7745: CALL_OW 171
// addcommovexy ( buldoz2 , 93 , 82 ) ;
7749: LD_LOC 17
7753: PPUSH
7754: LD_INT 93
7756: PPUSH
7757: LD_INT 82
7759: PPUSH
7760: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 84 ) ;
7764: LD_LOC 16
7768: PPUSH
7769: LD_INT 81
7771: PPUSH
7772: LD_INT 84
7774: PPUSH
7775: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 85 ) ;
7779: LD_LOC 16
7783: PPUSH
7784: LD_INT 81
7786: PPUSH
7787: LD_INT 85
7789: PPUSH
7790: CALL_OW 171
// addcommovexy ( buldoz2 , 95 , 85 ) ;
7794: LD_LOC 17
7798: PPUSH
7799: LD_INT 95
7801: PPUSH
7802: LD_INT 85
7804: PPUSH
7805: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 89 ) ;
7809: LD_LOC 16
7813: PPUSH
7814: LD_INT 81
7816: PPUSH
7817: LD_INT 89
7819: PPUSH
7820: CALL_OW 171
// addcommovexy ( buldoz2 , 104 , 89 ) ;
7824: LD_LOC 17
7828: PPUSH
7829: LD_INT 104
7831: PPUSH
7832: LD_INT 89
7834: PPUSH
7835: CALL_OW 171
// wait ( 0 0$1 ) ;
7839: LD_INT 35
7841: PPUSH
7842: CALL_OW 67
// b1 = false ;
7846: LD_ADDR_VAR 0 8
7850: PUSH
7851: LD_INT 0
7853: ST_TO_ADDR
// b2 = false ;
7854: LD_ADDR_VAR 0 9
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// while not ( b1 and b2 ) do
7862: LD_VAR 0 8
7866: PUSH
7867: LD_VAR 0 9
7871: AND
7872: NOT
7873: IFFALSE 8172
// begin if not b1 and not HasTask ( buldoz1 ) then
7875: LD_VAR 0 8
7879: NOT
7880: PUSH
7881: LD_LOC 16
7885: PPUSH
7886: CALL_OW 314
7890: NOT
7891: AND
7892: IFFALSE 7985
// begin if FreeHex ( 83 , 91 ) then
7894: LD_INT 83
7896: PPUSH
7897: LD_INT 91
7899: PPUSH
7900: CALL 9946 0 2
7904: IFFALSE 7948
// begin if not IsInArea ( buldoz1 , bulcile ) then
7906: LD_LOC 16
7910: PPUSH
7911: LD_INT 10
7913: PPUSH
7914: CALL_OW 308
7918: NOT
7919: IFFALSE 7938
// ComMoveXY ( buldoz1 , 83 , 91 ) else
7921: LD_LOC 16
7925: PPUSH
7926: LD_INT 83
7928: PPUSH
7929: LD_INT 91
7931: PPUSH
7932: CALL_OW 111
7936: GO 7946
// b1 = true ;
7938: LD_ADDR_VAR 0 8
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// end else
7946: GO 7985
// if GetY ( buldoz1 ) < 100 then
7948: LD_LOC 16
7952: PPUSH
7953: CALL_OW 251
7957: PUSH
7958: LD_INT 100
7960: LESS
7961: IFFALSE 7977
// ComMoveToArea ( buldoz1 , south_area ) else
7963: LD_LOC 16
7967: PPUSH
7968: LD_INT 11
7970: PPUSH
7971: CALL_OW 113
7975: GO 7985
// b1 = true ;
7977: LD_ADDR_VAR 0 8
7981: PUSH
7982: LD_INT 1
7984: ST_TO_ADDR
// end ; if not b2 and not HasTask ( buldoz2 ) then
7985: LD_VAR 0 9
7989: NOT
7990: PUSH
7991: LD_LOC 17
7995: PPUSH
7996: CALL_OW 314
8000: NOT
8001: AND
8002: IFFALSE 8095
// begin if FreeHex ( 106 , 91 ) then
8004: LD_INT 106
8006: PPUSH
8007: LD_INT 91
8009: PPUSH
8010: CALL 9946 0 2
8014: IFFALSE 8058
// begin if not IsInArea ( buldoz2 , bulcile ) then
8016: LD_LOC 17
8020: PPUSH
8021: LD_INT 10
8023: PPUSH
8024: CALL_OW 308
8028: NOT
8029: IFFALSE 8048
// ComMoveXY ( buldoz2 , 106 , 91 ) else
8031: LD_LOC 17
8035: PPUSH
8036: LD_INT 106
8038: PPUSH
8039: LD_INT 91
8041: PPUSH
8042: CALL_OW 111
8046: GO 8056
// b2 = true ;
8048: LD_ADDR_VAR 0 9
8052: PUSH
8053: LD_INT 1
8055: ST_TO_ADDR
// end else
8056: GO 8095
// if GetY ( buldoz2 ) < 100 then
8058: LD_LOC 17
8062: PPUSH
8063: CALL_OW 251
8067: PUSH
8068: LD_INT 100
8070: LESS
8071: IFFALSE 8087
// ComMoveToArea ( buldoz2 , south_area ) else
8073: LD_LOC 17
8077: PPUSH
8078: LD_INT 11
8080: PPUSH
8081: CALL_OW 113
8085: GO 8095
// b2 = true ;
8087: LD_ADDR_VAR 0 9
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// end ; for tmp in [ buldoz1 , buldoz2 ] do
8095: LD_ADDR_VAR 0 3
8099: PUSH
8100: LD_LOC 16
8104: PUSH
8105: LD_LOC 17
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: FOR_IN
8115: IFFALSE 8161
// if GetEngine ( tmp ) = engine_combustion and GetFuel ( tmp ) < 10 then
8117: LD_VAR 0 3
8121: PPUSH
8122: CALL_OW 262
8126: PUSH
8127: LD_INT 1
8129: EQUAL
8130: PUSH
8131: LD_VAR 0 3
8135: PPUSH
8136: CALL_OW 261
8140: PUSH
8141: LD_INT 10
8143: LESS
8144: AND
8145: IFFALSE 8159
// SetFuel ( tmp , 10 ) ;
8147: LD_VAR 0 3
8151: PPUSH
8152: LD_INT 10
8154: PPUSH
8155: CALL_OW 240
8159: GO 8114
8161: POP
8162: POP
// wait ( 0 0$1 ) ;
8163: LD_INT 35
8165: PPUSH
8166: CALL_OW 67
// end ;
8170: GO 7862
// disable ( 05 ) ;
8172: LD_INT 5
8174: DISABLE_MARKED
// center_buld = false ;
8175: LD_ADDR_LOC 23
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// center_o = true ;
8183: LD_ADDR_LOC 22
8187: PUSH
8188: LD_INT 1
8190: ST_TO_ADDR
// enable ( 08 ) ;
8191: LD_INT 8
8193: ENABLE_MARKED
// setattitude ( ru2 , am , att_enemy , true ) ;
8194: LD_EXP 2
8198: PPUSH
8199: LD_EXP 3
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: LD_INT 1
8209: PPUSH
8210: CALL_OW 80
// if popin then
8214: LD_VAR 0 1
8218: IFFALSE 8229
// comexitvehicle ( popov ) ;
8220: LD_EXP 102
8224: PPUSH
8225: CALL_OW 121
// if gayin then
8229: LD_VAR 0 2
8233: IFFALSE 8244
// comexitvehicle ( gaydar ) ;
8235: LD_EXP 103
8239: PPUSH
8240: CALL_OW 121
// while ( popin and isinunit ( popov ) ) or ( gayin and isinunit ( gaydar ) ) do
8244: LD_VAR 0 1
8248: PUSH
8249: LD_EXP 102
8253: PPUSH
8254: CALL_OW 310
8258: AND
8259: PUSH
8260: LD_VAR 0 2
8264: PUSH
8265: LD_EXP 103
8269: PPUSH
8270: CALL_OW 310
8274: AND
8275: OR
8276: IFFALSE 8287
// wait ( 0 0$0.5 ) ;
8278: LD_INT 18
8280: PPUSH
8281: CALL_OW 67
8285: GO 8244
// comenterunit ( vsevol , vsevol_v ) ;
8287: LD_EXP 101
8291: PPUSH
8292: LD_LOC 7
8296: PPUSH
8297: CALL_OW 120
// comenterunit ( popov , popov_v ) ;
8301: LD_EXP 102
8305: PPUSH
8306: LD_LOC 8
8310: PPUSH
8311: CALL_OW 120
// comenterunit ( gaydar , gaydar_v ) ;
8315: LD_EXP 103
8319: PPUSH
8320: LD_LOC 9
8324: PPUSH
8325: CALL_OW 120
// comenterunit ( yashin , yashin_v ) ;
8329: LD_EXP 104
8333: PPUSH
8334: LD_LOC 10
8338: PPUSH
8339: CALL_OW 120
// while not isinunit ( vsevol ) or not isinunit ( popov ) or not isinunit ( gaydar ) or not isinunit ( yashin ) do
8343: LD_EXP 101
8347: PPUSH
8348: CALL_OW 310
8352: NOT
8353: PUSH
8354: LD_EXP 102
8358: PPUSH
8359: CALL_OW 310
8363: NOT
8364: OR
8365: PUSH
8366: LD_EXP 103
8370: PPUSH
8371: CALL_OW 310
8375: NOT
8376: OR
8377: PUSH
8378: LD_EXP 104
8382: PPUSH
8383: CALL_OW 310
8387: NOT
8388: OR
8389: IFFALSE 8624
// begin wait ( 0 0$0.3 ) ;
8391: LD_INT 10
8393: PPUSH
8394: CALL_OW 67
// tmp = isinunit ( vsevol_v ) ;
8398: LD_ADDR_VAR 0 3
8402: PUSH
8403: LD_LOC 7
8407: PPUSH
8408: CALL_OW 310
8412: ST_TO_ADDR
// if tmp and tmp <> vsevol then
8413: LD_VAR 0 3
8417: PUSH
8418: LD_VAR 0 3
8422: PUSH
8423: LD_EXP 101
8427: NONEQUAL
8428: AND
8429: IFFALSE 8454
// begin comexitvehicle ( vsevol_v ) ;
8431: LD_LOC 7
8435: PPUSH
8436: CALL_OW 121
// comenterunit ( vsevol , vsevol_v ) ;
8440: LD_EXP 101
8444: PPUSH
8445: LD_LOC 7
8449: PPUSH
8450: CALL_OW 120
// end ; tmp = isinunit ( popov_v ) ;
8454: LD_ADDR_VAR 0 3
8458: PUSH
8459: LD_LOC 8
8463: PPUSH
8464: CALL_OW 310
8468: ST_TO_ADDR
// if tmp and tmp <> popov then
8469: LD_VAR 0 3
8473: PUSH
8474: LD_VAR 0 3
8478: PUSH
8479: LD_EXP 102
8483: NONEQUAL
8484: AND
8485: IFFALSE 8510
// begin comexitvehicle ( popov_v ) ;
8487: LD_LOC 8
8491: PPUSH
8492: CALL_OW 121
// comenterunit ( popov , popov_v ) ;
8496: LD_EXP 102
8500: PPUSH
8501: LD_LOC 8
8505: PPUSH
8506: CALL_OW 120
// end ; tmp = isinunit ( gaydar_v ) ;
8510: LD_ADDR_VAR 0 3
8514: PUSH
8515: LD_LOC 9
8519: PPUSH
8520: CALL_OW 310
8524: ST_TO_ADDR
// if tmp and tmp <> gaydar then
8525: LD_VAR 0 3
8529: PUSH
8530: LD_VAR 0 3
8534: PUSH
8535: LD_EXP 103
8539: NONEQUAL
8540: AND
8541: IFFALSE 8566
// begin comexitvehicle ( gaydar_v ) ;
8543: LD_LOC 9
8547: PPUSH
8548: CALL_OW 121
// comenterunit ( gaydar , gaydar_v ) ;
8552: LD_EXP 103
8556: PPUSH
8557: LD_LOC 9
8561: PPUSH
8562: CALL_OW 120
// end ; tmp = isinunit ( yashin_v ) ;
8566: LD_ADDR_VAR 0 3
8570: PUSH
8571: LD_LOC 10
8575: PPUSH
8576: CALL_OW 310
8580: ST_TO_ADDR
// if tmp and tmp <> yashin then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_VAR 0 3
8590: PUSH
8591: LD_EXP 104
8595: NONEQUAL
8596: AND
8597: IFFALSE 8622
// begin comexitvehicle ( yashin_v ) ;
8599: LD_LOC 10
8603: PPUSH
8604: CALL_OW 121
// comenterunit ( yashin , yashin_v ) ;
8608: LD_EXP 104
8612: PPUSH
8613: LD_LOC 10
8617: PPUSH
8618: CALL_OW 120
// end ; end ;
8622: GO 8343
// for tmp in survivors do
8624: LD_ADDR_VAR 0 3
8628: PUSH
8629: LD_LOC 4
8633: PUSH
8634: FOR_IN
8635: IFFALSE 8653
// donotattack ( am , tmp ) ;
8637: LD_EXP 3
8641: PPUSH
8642: LD_VAR 0 3
8646: PPUSH
8647: CALL_OW 471
8651: GO 8634
8653: POP
8654: POP
// tspeed = game_speed ;
8655: LD_ADDR_VAR 0 5
8659: PUSH
8660: LD_OWVAR 65
8664: ST_TO_ADDR
// game_speed = 2 ;
8665: LD_ADDR_OWVAR 65
8669: PUSH
8670: LD_INT 2
8672: ST_TO_ADDR
// nesahat = false ;
8673: LD_ADDR_EXP 127
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// donotattack ( ru2 , ame1 ) ;
8681: LD_EXP 2
8685: PPUSH
8686: LD_EXP 85
8690: PPUSH
8691: CALL_OW 471
// donotattack ( ru2 , ame2 ) ;
8695: LD_EXP 2
8699: PPUSH
8700: LD_EXP 87
8704: PPUSH
8705: CALL_OW 471
// oldbl1 = getblevel ( ambunk3 ) ;
8709: LD_ADDR_VAR 0 6
8713: PUSH
8714: LD_INT 14
8716: PPUSH
8717: CALL_OW 267
8721: ST_TO_ADDR
// oldbl2 = getblevel ( ambunk5 ) ;
8722: LD_ADDR_VAR 0 7
8726: PUSH
8727: LD_INT 7
8729: PPUSH
8730: CALL_OW 267
8734: ST_TO_ADDR
// setblevel ( [ ambunk3 , ambunk5 ] , 10 ) ;
8735: LD_INT 14
8737: PUSH
8738: LD_INT 7
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: LD_INT 10
8747: PPUSH
8748: CALL_OW 241
// nenicit = true ;
8752: LD_ADDR_LOC 18
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// poskoz = [ ] ;
8760: LD_ADDR_LOC 19
8764: PUSH
8765: EMPTY
8766: ST_TO_ADDR
// enable ( 10 ) ;
8767: LD_INT 10
8769: ENABLE_MARKED
// commovexy ( vehiklyo , 73 , 49 ) ;
8770: LD_LOC 12
8774: PPUSH
8775: LD_INT 73
8777: PPUSH
8778: LD_INT 49
8780: PPUSH
8781: CALL_OW 111
// wait ( 0 0$9 ) ;
8785: LD_INT 315
8787: PPUSH
8788: CALL_OW 67
// comagressivemove ( vehiklys , 74 , 54 ) ;
8792: LD_LOC 13
8796: PPUSH
8797: LD_INT 74
8799: PPUSH
8800: LD_INT 54
8802: PPUSH
8803: CALL_OW 114
// tmp2 = [ 1 , 2 , 3 , 4 ] ;
8807: LD_ADDR_VAR 0 4
8811: PUSH
8812: LD_INT 1
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: LD_INT 3
8820: PUSH
8821: LD_INT 4
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: ST_TO_ADDR
// tmp = rand ( 1 , 4 ) ;
8830: LD_ADDR_VAR 0 3
8834: PUSH
8835: LD_INT 1
8837: PPUSH
8838: LD_INT 4
8840: PPUSH
8841: CALL_OW 12
8845: ST_TO_ADDR
// tmp2 = tmp2 diff [ tmp ] ;
8846: LD_ADDR_VAR 0 4
8850: PUSH
8851: LD_VAR 0 4
8855: PUSH
8856: LD_VAR 0 3
8860: PUSH
8861: EMPTY
8862: LIST
8863: DIFF
8864: ST_TO_ADDR
// case tmp of 1 :
8865: LD_VAR 0 3
8869: PUSH
8870: LD_INT 1
8872: DOUBLE
8873: EQUAL
8874: IFTRUE 8878
8876: GO 8893
8878: POP
// say ( vsevol , DDeath-Vse-1 ) ; 2 :
8879: LD_EXP 101
8883: PPUSH
8884: LD_STRING DDeath-Vse-1
8886: PPUSH
8887: CALL_OW 88
8891: GO 8963
8893: LD_INT 2
8895: DOUBLE
8896: EQUAL
8897: IFTRUE 8901
8899: GO 8916
8901: POP
// say ( yashin , DDeath-Yas-1 ) ; 3 :
8902: LD_EXP 104
8906: PPUSH
8907: LD_STRING DDeath-Yas-1
8909: PPUSH
8910: CALL_OW 88
8914: GO 8963
8916: LD_INT 3
8918: DOUBLE
8919: EQUAL
8920: IFTRUE 8924
8922: GO 8939
8924: POP
// say ( popov , DDeath-Pop-1 ) ; 4 :
8925: LD_EXP 102
8929: PPUSH
8930: LD_STRING DDeath-Pop-1
8932: PPUSH
8933: CALL_OW 88
8937: GO 8963
8939: LD_INT 4
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 8962
8947: POP
// say ( gaydar , DDeath-Gay-1 ) ; end ;
8948: LD_EXP 103
8952: PPUSH
8953: LD_STRING DDeath-Gay-1
8955: PPUSH
8956: CALL_OW 88
8960: GO 8963
8962: POP
// tmp = rand ( 1 , 3 ) ;
8963: LD_ADDR_VAR 0 3
8967: PUSH
8968: LD_INT 1
8970: PPUSH
8971: LD_INT 3
8973: PPUSH
8974: CALL_OW 12
8978: ST_TO_ADDR
// case tmp2 [ tmp ] of 1 :
8979: LD_VAR 0 4
8983: PUSH
8984: LD_VAR 0 3
8988: ARRAY
8989: PUSH
8990: LD_INT 1
8992: DOUBLE
8993: EQUAL
8994: IFTRUE 8998
8996: GO 9013
8998: POP
// say ( vsevol , DDeath-Vse-1 ) ; 2 :
8999: LD_EXP 101
9003: PPUSH
9004: LD_STRING DDeath-Vse-1
9006: PPUSH
9007: CALL_OW 88
9011: GO 9083
9013: LD_INT 2
9015: DOUBLE
9016: EQUAL
9017: IFTRUE 9021
9019: GO 9036
9021: POP
// say ( yashin , DDeath-Yas-1 ) ; 3 :
9022: LD_EXP 104
9026: PPUSH
9027: LD_STRING DDeath-Yas-1
9029: PPUSH
9030: CALL_OW 88
9034: GO 9083
9036: LD_INT 3
9038: DOUBLE
9039: EQUAL
9040: IFTRUE 9044
9042: GO 9059
9044: POP
// say ( popov , DDeath-Pop-1 ) ; 4 :
9045: LD_EXP 102
9049: PPUSH
9050: LD_STRING DDeath-Pop-1
9052: PPUSH
9053: CALL_OW 88
9057: GO 9083
9059: LD_INT 4
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9082
9067: POP
// say ( gaydar , DDeath-Gay-1 ) ; end ;
9068: LD_EXP 103
9072: PPUSH
9073: LD_STRING DDeath-Gay-1
9075: PPUSH
9076: CALL_OW 88
9080: GO 9083
9082: POP
// zdrhaci = [ ] ;
9083: LD_ADDR_LOC 24
9087: PUSH
9088: EMPTY
9089: ST_TO_ADDR
// dva = true ;
9090: LD_ADDR_LOC 21
9094: PUSH
9095: LD_INT 1
9097: ST_TO_ADDR
// enable ( 02 ) ;
9098: LD_INT 2
9100: ENABLE_MARKED
// while filterunitsinarea ( attckar , [ [ f_side , ru2 ] ] ) < 1 do
9101: LD_INT 8
9103: PPUSH
9104: LD_INT 22
9106: PUSH
9107: LD_EXP 2
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: PPUSH
9119: CALL_OW 70
9123: PUSH
9124: LD_INT 1
9126: LESS
9127: IFFALSE 9138
// wait ( 0 0$0.3 ) ;
9129: LD_INT 10
9131: PPUSH
9132: CALL_OW 67
9136: GO 9101
// disable ( 08 ) ;
9138: LD_INT 8
9140: DISABLE_MARKED
// center_o = false ;
9141: LD_ADDR_LOC 22
9145: PUSH
9146: LD_INT 0
9148: ST_TO_ADDR
// centeronxy ( 74 , 51 ) ;
9149: LD_INT 74
9151: PPUSH
9152: LD_INT 51
9154: PPUSH
9155: CALL_OW 84
// while filterunitsinarea ( attckar , [ [ f_side , ru2 ] ] ) < 2 do
9159: LD_INT 8
9161: PPUSH
9162: LD_INT 22
9164: PUSH
9165: LD_EXP 2
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: EMPTY
9175: LIST
9176: PPUSH
9177: CALL_OW 70
9181: PUSH
9182: LD_INT 2
9184: LESS
9185: IFFALSE 9196
// wait ( 0 0$0.3 ) ;
9187: LD_INT 10
9189: PPUSH
9190: CALL_OW 67
9194: GO 9159
// tmp2 = [ 1 , 2 , 3 , 4 ] ;
9196: LD_ADDR_VAR 0 4
9200: PUSH
9201: LD_INT 1
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: LD_INT 3
9209: PUSH
9210: LD_INT 4
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: ST_TO_ADDR
// tmp = rand ( 1 , 4 ) ;
9219: LD_ADDR_VAR 0 3
9223: PUSH
9224: LD_INT 1
9226: PPUSH
9227: LD_INT 4
9229: PPUSH
9230: CALL_OW 12
9234: ST_TO_ADDR
// tmp2 = tmp2 diff [ tmp ] ;
9235: LD_ADDR_VAR 0 4
9239: PUSH
9240: LD_VAR 0 4
9244: PUSH
9245: LD_VAR 0 3
9249: PUSH
9250: EMPTY
9251: LIST
9252: DIFF
9253: ST_TO_ADDR
// case tmp of 1 :
9254: LD_VAR 0 3
9258: PUSH
9259: LD_INT 1
9261: DOUBLE
9262: EQUAL
9263: IFTRUE 9267
9265: GO 9282
9267: POP
// say ( vsevol , DDeath-Vse-2 ) ; 2 :
9268: LD_EXP 101
9272: PPUSH
9273: LD_STRING DDeath-Vse-2
9275: PPUSH
9276: CALL_OW 88
9280: GO 9352
9282: LD_INT 2
9284: DOUBLE
9285: EQUAL
9286: IFTRUE 9290
9288: GO 9305
9290: POP
// say ( yashin , DDeath-Yas-2 ) ; 3 :
9291: LD_EXP 104
9295: PPUSH
9296: LD_STRING DDeath-Yas-2
9298: PPUSH
9299: CALL_OW 88
9303: GO 9352
9305: LD_INT 3
9307: DOUBLE
9308: EQUAL
9309: IFTRUE 9313
9311: GO 9328
9313: POP
// say ( popov , DDeath-Pop-2 ) ; 4 :
9314: LD_EXP 102
9318: PPUSH
9319: LD_STRING DDeath-Pop-2
9321: PPUSH
9322: CALL_OW 88
9326: GO 9352
9328: LD_INT 4
9330: DOUBLE
9331: EQUAL
9332: IFTRUE 9336
9334: GO 9351
9336: POP
// say ( gaydar , DDeath-Gay-2 ) ; end ;
9337: LD_EXP 103
9341: PPUSH
9342: LD_STRING DDeath-Gay-2
9344: PPUSH
9345: CALL_OW 88
9349: GO 9352
9351: POP
// tmp = rand ( 1 , 3 ) ;
9352: LD_ADDR_VAR 0 3
9356: PUSH
9357: LD_INT 1
9359: PPUSH
9360: LD_INT 3
9362: PPUSH
9363: CALL_OW 12
9367: ST_TO_ADDR
// case tmp2 [ tmp ] of 1 :
9368: LD_VAR 0 4
9372: PUSH
9373: LD_VAR 0 3
9377: ARRAY
9378: PUSH
9379: LD_INT 1
9381: DOUBLE
9382: EQUAL
9383: IFTRUE 9387
9385: GO 9402
9387: POP
// say ( vsevol , DDeath-Vse-2 ) ; 2 :
9388: LD_EXP 101
9392: PPUSH
9393: LD_STRING DDeath-Vse-2
9395: PPUSH
9396: CALL_OW 88
9400: GO 9472
9402: LD_INT 2
9404: DOUBLE
9405: EQUAL
9406: IFTRUE 9410
9408: GO 9425
9410: POP
// say ( yashin , DDeath-Yas-2 ) ; 3 :
9411: LD_EXP 104
9415: PPUSH
9416: LD_STRING DDeath-Yas-2
9418: PPUSH
9419: CALL_OW 88
9423: GO 9472
9425: LD_INT 3
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9448
9433: POP
// say ( popov , DDeath-Pop-2 ) ; 4 :
9434: LD_EXP 102
9438: PPUSH
9439: LD_STRING DDeath-Pop-2
9441: PPUSH
9442: CALL_OW 88
9446: GO 9472
9448: LD_INT 4
9450: DOUBLE
9451: EQUAL
9452: IFTRUE 9456
9454: GO 9471
9456: POP
// say ( gaydar , DDeath-Gay-2 ) ; end ;
9457: LD_EXP 103
9461: PPUSH
9462: LD_STRING DDeath-Gay-2
9464: PPUSH
9465: CALL_OW 88
9469: GO 9472
9471: POP
// while not jsou_zpatky do
9472: CALL 6658 0 0
9476: NOT
9477: IFFALSE 9488
// wait ( 0 0$0.5 ) ;
9479: LD_INT 18
9481: PPUSH
9482: CALL_OW 67
9486: GO 9472
// nenicit = false ;
9488: LD_ADDR_LOC 18
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// disable ( 10 ) ;
9496: LD_INT 10
9498: DISABLE_MARKED
// disable ( 02 ) ;
9499: LD_INT 2
9501: DISABLE_MARKED
// dva = false ;
9502: LD_ADDR_LOC 21
9506: PUSH
9507: LD_INT 0
9509: ST_TO_ADDR
// disable ( 09 ) ;
9510: LD_INT 9
9512: DISABLE_MARKED
// devet = false ;
9513: LD_ADDR_LOC 20
9517: PUSH
9518: LD_INT 0
9520: ST_TO_ADDR
// setblevel ( [ ambunk3 ] , oldbl1 ) ;
9521: LD_INT 14
9523: PUSH
9524: EMPTY
9525: LIST
9526: PPUSH
9527: LD_VAR 0 6
9531: PPUSH
9532: CALL_OW 241
// setblevel ( [ ambunk5 ] , oldbl2 ) ;
9536: LD_INT 7
9538: PUSH
9539: EMPTY
9540: LIST
9541: PPUSH
9542: LD_VAR 0 7
9546: PPUSH
9547: CALL_OW 241
// game_speed = tspeed ;
9551: LD_ADDR_OWVAR 65
9555: PUSH
9556: LD_VAR 0 5
9560: ST_TO_ADDR
// centernowonxy ( 94 , 98 ) ;
9561: LD_INT 94
9563: PPUSH
9564: LD_INT 98
9566: PPUSH
9567: CALL_OW 86
// for tmp in survivors do
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: LD_LOC 4
9580: PUSH
9581: FOR_IN
9582: IFFALSE 9619
// if isinunit ( tmp ) then
9584: LD_VAR 0 3
9588: PPUSH
9589: CALL_OW 310
9593: IFFALSE 9617
// setside ( [ isinunit ( tmp ) ] , ru ) ;
9595: LD_VAR 0 3
9599: PPUSH
9600: CALL_OW 310
9604: PUSH
9605: EMPTY
9606: LIST
9607: PPUSH
9608: LD_EXP 1
9612: PPUSH
9613: CALL_OW 235
9617: GO 9581
9619: POP
9620: POP
// setside ( survivors , ru ) ;
9621: LD_LOC 4
9625: PPUSH
9626: LD_EXP 1
9630: PPUSH
9631: CALL_OW 235
// setside ( [ buldoz1 , buldoz2 ] , ru ) ;
9635: LD_LOC 16
9639: PUSH
9640: LD_LOC 17
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PPUSH
9649: LD_EXP 1
9653: PPUSH
9654: CALL_OW 235
// for tmp in survivors do
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: LD_LOC 4
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9687
// normalattack ( am , tmp ) ;
9671: LD_EXP 3
9675: PPUSH
9676: LD_VAR 0 3
9680: PPUSH
9681: CALL_OW 472
9685: GO 9668
9687: POP
9688: POP
// ingame_video = false ;
9689: LD_ADDR_OWVAR 52
9693: PUSH
9694: LD_INT 0
9696: ST_TO_ADDR
// interface_hidden = false ;
9697: LD_ADDR_OWVAR 54
9701: PUSH
9702: LD_INT 0
9704: ST_TO_ADDR
// dialogueon ;
9705: CALL_OW 6
// say ( burlak , DAftermath-Bur-1 ) ;
9709: LD_EXP 120
9713: PPUSH
9714: LD_STRING DAftermath-Bur-1
9716: PPUSH
9717: CALL_OW 88
// if isok ( titov ) then
9721: LD_EXP 105
9725: PPUSH
9726: CALL_OW 302
9730: IFFALSE 9744
// say ( titov , DAftermath-Tit-1 ) ;
9732: LD_EXP 105
9736: PPUSH
9737: LD_STRING DAftermath-Tit-1
9739: PPUSH
9740: CALL_OW 88
// if isok ( belkov ) then
9744: LD_EXP 106
9748: PPUSH
9749: CALL_OW 302
9753: IFFALSE 9767
// say ( belkov , DAftermath-Bel-1 ) ;
9755: LD_EXP 106
9759: PPUSH
9760: LD_STRING DAftermath-Bel-1
9762: PPUSH
9763: CALL_OW 88
// if isok ( kuzmov ) then
9767: LD_EXP 107
9771: PPUSH
9772: CALL_OW 302
9776: IFFALSE 9790
// say ( kuzmov , DAftermath-Kuz-1 ) ;
9778: LD_EXP 107
9782: PPUSH
9783: LD_STRING DAftermath-Kuz-1
9785: PPUSH
9786: CALL_OW 88
// if isok ( gnyevko ) then
9790: LD_EXP 108
9794: PPUSH
9795: CALL_OW 302
9799: IFFALSE 9813
// say ( gnyevko , DAftermath-Gny-1 ) ;
9801: LD_EXP 108
9805: PPUSH
9806: LD_STRING DAftermath-Gny-1
9808: PPUSH
9809: CALL_OW 88
// if isok ( belkov ) then
9813: LD_EXP 106
9817: PPUSH
9818: CALL_OW 302
9822: IFFALSE 9836
// say ( belkov , DAftermath-Bel-2 ) ;
9824: LD_EXP 106
9828: PPUSH
9829: LD_STRING DAftermath-Bel-2
9831: PPUSH
9832: CALL_OW 88
// if isok ( kozlov ) then
9836: LD_EXP 109
9840: PPUSH
9841: CALL_OW 302
9845: IFFALSE 9859
// say ( kozlov , DAftermath-Koz-2 ) ;
9847: LD_EXP 109
9851: PPUSH
9852: LD_STRING DAftermath-Koz-2
9854: PPUSH
9855: CALL_OW 88
// say ( furmanov , DAftermath-Fur-2 ) ;
9859: LD_EXP 110
9863: PPUSH
9864: LD_STRING DAftermath-Fur-2
9866: PPUSH
9867: CALL_OW 88
// say ( burlak , DAftermath-Bur-2 ) ;
9871: LD_EXP 120
9875: PPUSH
9876: LD_STRING DAftermath-Bur-2
9878: PPUSH
9879: CALL_OW 88
// say ( furmanov , DAftermath-Fur-3 ) ;
9883: LD_EXP 110
9887: PPUSH
9888: LD_STRING DAftermath-Fur-3
9890: PPUSH
9891: CALL_OW 88
// say ( burlak , DAftermath-Bur-3 ) ;
9895: LD_EXP 120
9899: PPUSH
9900: LD_STRING DAftermath-Bur-3
9902: PPUSH
9903: CALL_OW 88
// say ( burlak , DAftermath-Bur-3a ) ;
9907: LD_EXP 120
9911: PPUSH
9912: LD_STRING DAftermath-Bur-3a
9914: PPUSH
9915: CALL_OW 88
// dialogueoff ;
9919: CALL_OW 7
// changemissionobjectives ( MDest ) ;
9923: LD_STRING MDest
9925: PPUSH
9926: CALL_OW 337
// wait ( 0 0$15 ) ;
9930: LD_INT 525
9932: PPUSH
9933: CALL_OW 67
// enable ( 03 ) ;
9937: LD_INT 3
9939: ENABLE_MARKED
// disable ( 07 ) ;
9940: LD_INT 7
9942: DISABLE_MARKED
// end ;
9943: PPOPN 9
9945: END
// function FreeHex ( x , y ) ; var un ; begin
9946: LD_INT 0
9948: PPUSH
9949: PPUSH
// un = HexInfo ( x , y ) ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_VAR 0 1
9959: PPUSH
9960: LD_VAR 0 2
9964: PPUSH
9965: CALL_OW 428
9969: ST_TO_ADDR
// if un = 0 then
9970: LD_VAR 0 4
9974: PUSH
9975: LD_INT 0
9977: EQUAL
9978: IFFALSE 9990
// begin result = true ;
9980: LD_ADDR_VAR 0 3
9984: PUSH
9985: LD_INT 1
9987: ST_TO_ADDR
// exit ;
9988: GO 10119
// end ; if un = - 1 then
9990: LD_VAR 0 4
9994: PUSH
9995: LD_INT 1
9997: NEG
9998: EQUAL
9999: IFFALSE 10011
// begin result = false ;
10001: LD_ADDR_VAR 0 3
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// exit ;
10009: GO 10119
// end ; if GetType ( un ) = unit_building or ( GetType ( un ) = unit_vehicle and ( ( GetControl ( un ) = control_manual and IsDrivenBy ( un ) = 0 ) or ( GetControl ( un ) = control_remote and IsControledBy ( un ) = 0 ) ) ) then
10011: LD_VAR 0 4
10015: PPUSH
10016: CALL_OW 247
10020: PUSH
10021: LD_INT 3
10023: EQUAL
10024: PUSH
10025: LD_VAR 0 4
10029: PPUSH
10030: CALL_OW 247
10034: PUSH
10035: LD_INT 2
10037: EQUAL
10038: PUSH
10039: LD_VAR 0 4
10043: PPUSH
10044: CALL_OW 263
10048: PUSH
10049: LD_INT 1
10051: EQUAL
10052: PUSH
10053: LD_VAR 0 4
10057: PPUSH
10058: CALL_OW 311
10062: PUSH
10063: LD_INT 0
10065: EQUAL
10066: AND
10067: PUSH
10068: LD_VAR 0 4
10072: PPUSH
10073: CALL_OW 263
10077: PUSH
10078: LD_INT 2
10080: EQUAL
10081: PUSH
10082: LD_VAR 0 4
10086: PPUSH
10087: CALL_OW 312
10091: PUSH
10092: LD_INT 0
10094: EQUAL
10095: AND
10096: OR
10097: AND
10098: OR
10099: IFFALSE 10111
// result = false else
10101: LD_ADDR_VAR 0 3
10105: PUSH
10106: LD_INT 0
10108: ST_TO_ADDR
10109: GO 10119
// result = true ;
10111: LD_ADDR_VAR 0 3
10115: PUSH
10116: LD_INT 1
10118: ST_TO_ADDR
// end ;
10119: LD_VAR 0 3
10123: RET
// on vehiclecaptured ( new , old , origside , by ) marked 07 do var tmp ;
10124: LD_INT 0
10126: PPUSH
// case old of vsevol_v :
10127: LD_VAR 0 2
10131: PUSH
10132: LD_LOC 7
10136: DOUBLE
10137: EQUAL
10138: IFTRUE 10142
10140: GO 10320
10142: POP
// begin comexitvehicle ( new ) ;
10143: LD_VAR 0 1
10147: PPUSH
10148: CALL_OW 121
// setside ( new , ru2 ) ;
10152: LD_VAR 0 1
10156: PPUSH
10157: LD_EXP 2
10161: PPUSH
10162: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
10166: LD_ADDR_VAR 0 5
10170: PUSH
10171: DOUBLE
10172: LD_INT 1
10174: DEC
10175: ST_TO_ADDR
10176: LD_INT 0
10178: PUSH
10179: LD_LOC 11
10183: PLUS
10184: PUSH
10185: FOR_TO
10186: IFFALSE 10210
// if vehikly [ tmp ] = vsevol_v then
10188: LD_LOC 11
10192: PUSH
10193: LD_VAR 0 5
10197: ARRAY
10198: PUSH
10199: LD_LOC 7
10203: EQUAL
10204: IFFALSE 10208
// break ;
10206: GO 10210
10208: GO 10185
10210: POP
10211: POP
// vehikly = replace ( vehikly , tmp , new ) ;
10212: LD_ADDR_LOC 11
10216: PUSH
10217: LD_LOC 11
10221: PPUSH
10222: LD_VAR 0 5
10226: PPUSH
10227: LD_VAR 0 1
10231: PPUSH
10232: CALL_OW 1
10236: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
10237: LD_ADDR_VAR 0 5
10241: PUSH
10242: DOUBLE
10243: LD_INT 1
10245: DEC
10246: ST_TO_ADDR
10247: LD_INT 0
10249: PUSH
10250: LD_LOC 12
10254: PLUS
10255: PUSH
10256: FOR_TO
10257: IFFALSE 10281
// if vehiklyo [ tmp ] = vsevol_v then
10259: LD_LOC 12
10263: PUSH
10264: LD_VAR 0 5
10268: ARRAY
10269: PUSH
10270: LD_LOC 7
10274: EQUAL
10275: IFFALSE 10279
// break ;
10277: GO 10281
10279: GO 10256
10281: POP
10282: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
10283: LD_ADDR_LOC 12
10287: PUSH
10288: LD_LOC 12
10292: PPUSH
10293: LD_VAR 0 5
10297: PPUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 1
10307: ST_TO_ADDR
// vsevol_v = new ;
10308: LD_ADDR_LOC 7
10312: PUSH
10313: LD_VAR 0 1
10317: ST_TO_ADDR
// end ; yashin_v :
10318: GO 10931
10320: LD_LOC 10
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10508
10330: POP
// begin comexitvehicle ( new ) ;
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 121
// setside ( new , ru2 ) ;
10340: LD_VAR 0 1
10344: PPUSH
10345: LD_EXP 2
10349: PPUSH
10350: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
10354: LD_ADDR_VAR 0 5
10358: PUSH
10359: DOUBLE
10360: LD_INT 1
10362: DEC
10363: ST_TO_ADDR
10364: LD_INT 0
10366: PUSH
10367: LD_LOC 11
10371: PLUS
10372: PUSH
10373: FOR_TO
10374: IFFALSE 10398
// if vehikly [ tmp ] = yashin_v then
10376: LD_LOC 11
10380: PUSH
10381: LD_VAR 0 5
10385: ARRAY
10386: PUSH
10387: LD_LOC 10
10391: EQUAL
10392: IFFALSE 10396
// break ;
10394: GO 10398
10396: GO 10373
10398: POP
10399: POP
// vehikly = replace ( vehikly , tmp , new ) ;
10400: LD_ADDR_LOC 11
10404: PUSH
10405: LD_LOC 11
10409: PPUSH
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 1
10424: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
10425: LD_ADDR_VAR 0 5
10429: PUSH
10430: DOUBLE
10431: LD_INT 1
10433: DEC
10434: ST_TO_ADDR
10435: LD_INT 0
10437: PUSH
10438: LD_LOC 12
10442: PLUS
10443: PUSH
10444: FOR_TO
10445: IFFALSE 10469
// if vehiklyo [ tmp ] = yashin_v then
10447: LD_LOC 12
10451: PUSH
10452: LD_VAR 0 5
10456: ARRAY
10457: PUSH
10458: LD_LOC 10
10462: EQUAL
10463: IFFALSE 10467
// break ;
10465: GO 10469
10467: GO 10444
10469: POP
10470: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
10471: LD_ADDR_LOC 12
10475: PUSH
10476: LD_LOC 12
10480: PPUSH
10481: LD_VAR 0 5
10485: PPUSH
10486: LD_VAR 0 1
10490: PPUSH
10491: CALL_OW 1
10495: ST_TO_ADDR
// yashin_v = new ;
10496: LD_ADDR_LOC 10
10500: PUSH
10501: LD_VAR 0 1
10505: ST_TO_ADDR
// end ; popov_v :
10506: GO 10931
10508: LD_LOC 8
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10696
10518: POP
// begin comexitvehicle ( new ) ;
10519: LD_VAR 0 1
10523: PPUSH
10524: CALL_OW 121
// setside ( new , ru2 ) ;
10528: LD_VAR 0 1
10532: PPUSH
10533: LD_EXP 2
10537: PPUSH
10538: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
10542: LD_ADDR_VAR 0 5
10546: PUSH
10547: DOUBLE
10548: LD_INT 1
10550: DEC
10551: ST_TO_ADDR
10552: LD_INT 0
10554: PUSH
10555: LD_LOC 11
10559: PLUS
10560: PUSH
10561: FOR_TO
10562: IFFALSE 10586
// if vehikly [ tmp ] = popov_v then
10564: LD_LOC 11
10568: PUSH
10569: LD_VAR 0 5
10573: ARRAY
10574: PUSH
10575: LD_LOC 8
10579: EQUAL
10580: IFFALSE 10584
// break ;
10582: GO 10586
10584: GO 10561
10586: POP
10587: POP
// vehikly = replace ( vehikly , tmp , new ) ;
10588: LD_ADDR_LOC 11
10592: PUSH
10593: LD_LOC 11
10597: PPUSH
10598: LD_VAR 0 5
10602: PPUSH
10603: LD_VAR 0 1
10607: PPUSH
10608: CALL_OW 1
10612: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
10613: LD_ADDR_VAR 0 5
10617: PUSH
10618: DOUBLE
10619: LD_INT 1
10621: DEC
10622: ST_TO_ADDR
10623: LD_INT 0
10625: PUSH
10626: LD_LOC 12
10630: PLUS
10631: PUSH
10632: FOR_TO
10633: IFFALSE 10657
// if vehiklyo [ tmp ] = popov_v then
10635: LD_LOC 12
10639: PUSH
10640: LD_VAR 0 5
10644: ARRAY
10645: PUSH
10646: LD_LOC 8
10650: EQUAL
10651: IFFALSE 10655
// break ;
10653: GO 10657
10655: GO 10632
10657: POP
10658: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
10659: LD_ADDR_LOC 12
10663: PUSH
10664: LD_LOC 12
10668: PPUSH
10669: LD_VAR 0 5
10673: PPUSH
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 1
10683: ST_TO_ADDR
// popov_v = new ;
10684: LD_ADDR_LOC 8
10688: PUSH
10689: LD_VAR 0 1
10693: ST_TO_ADDR
// end ; gaydar_v :
10694: GO 10931
10696: LD_LOC 9
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10884
10706: POP
// begin comexitvehicle ( new ) ;
10707: LD_VAR 0 1
10711: PPUSH
10712: CALL_OW 121
// setside ( new , ru2 ) ;
10716: LD_VAR 0 1
10720: PPUSH
10721: LD_EXP 2
10725: PPUSH
10726: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
10730: LD_ADDR_VAR 0 5
10734: PUSH
10735: DOUBLE
10736: LD_INT 1
10738: DEC
10739: ST_TO_ADDR
10740: LD_INT 0
10742: PUSH
10743: LD_LOC 11
10747: PLUS
10748: PUSH
10749: FOR_TO
10750: IFFALSE 10774
// if vehikly [ tmp ] = gaydar_v then
10752: LD_LOC 11
10756: PUSH
10757: LD_VAR 0 5
10761: ARRAY
10762: PUSH
10763: LD_LOC 9
10767: EQUAL
10768: IFFALSE 10772
// break ;
10770: GO 10774
10772: GO 10749
10774: POP
10775: POP
// vehikly = replace ( vehikly , tmp , new ) ;
10776: LD_ADDR_LOC 11
10780: PUSH
10781: LD_LOC 11
10785: PPUSH
10786: LD_VAR 0 5
10790: PPUSH
10791: LD_VAR 0 1
10795: PPUSH
10796: CALL_OW 1
10800: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
10801: LD_ADDR_VAR 0 5
10805: PUSH
10806: DOUBLE
10807: LD_INT 1
10809: DEC
10810: ST_TO_ADDR
10811: LD_INT 0
10813: PUSH
10814: LD_LOC 12
10818: PLUS
10819: PUSH
10820: FOR_TO
10821: IFFALSE 10845
// if vehiklyo [ tmp ] = gaydar_v then
10823: LD_LOC 12
10827: PUSH
10828: LD_VAR 0 5
10832: ARRAY
10833: PUSH
10834: LD_LOC 9
10838: EQUAL
10839: IFFALSE 10843
// break ;
10841: GO 10845
10843: GO 10820
10845: POP
10846: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
10847: LD_ADDR_LOC 12
10851: PUSH
10852: LD_LOC 12
10856: PPUSH
10857: LD_VAR 0 5
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 1
10871: ST_TO_ADDR
// gaydar_v = new ;
10872: LD_ADDR_LOC 9
10876: PUSH
10877: LD_VAR 0 1
10881: ST_TO_ADDR
// end ; buldoz1 :
10882: GO 10931
10884: LD_LOC 16
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 10907
10894: POP
// buldoz1 = new ; buldoz2 :
10895: LD_ADDR_LOC 16
10899: PUSH
10900: LD_VAR 0 1
10904: ST_TO_ADDR
10905: GO 10931
10907: LD_LOC 17
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 10930
10917: POP
// buldoz2 = new ; end ;
10918: LD_ADDR_LOC 17
10922: PUSH
10923: LD_VAR 0 1
10927: ST_TO_ADDR
10928: GO 10931
10930: POP
10931: PPOPN 5
10933: END
// var center_buld ; every 0 0$2 marked 05 do
10934: GO 10936
10936: DISABLE
// begin if center_buld then
10937: LD_LOC 23
10941: IFFALSE 10944
// enable ;
10943: ENABLE
// centeronunits ( [ buldoz1 , buldoz2 ] ) ;
10944: LD_LOC 16
10948: PUSH
10949: LD_LOC 17
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 85
// end ;
10962: END
// every 0 0$1 + 0 0$0.1 marked 08 do
10963: GO 10965
10965: DISABLE
// begin if center_o then
10966: LD_LOC 22
10970: IFFALSE 10973
// enable ;
10972: ENABLE
// centeronunits ( nearestunittoxy ( vehiklyo , 73 , 49 ) ) ;
10973: LD_LOC 12
10977: PPUSH
10978: LD_INT 73
10980: PPUSH
10981: LD_INT 49
10983: PPUSH
10984: CALL_OW 73
10988: PPUSH
10989: CALL_OW 85
// end ;
10993: END
// every 0 0$1 + 0 0$0.2 marked 09 do
10994: GO 10996
10996: DISABLE
// begin if devet then
10997: LD_LOC 20
11001: IFFALSE 11004
// enable ;
11003: ENABLE
// centeronunits ( nearestunittoxy ( vehiklys , 74 , 54 ) ) ;
11004: LD_LOC 13
11008: PPUSH
11009: LD_INT 74
11011: PPUSH
11012: LD_INT 54
11014: PPUSH
11015: CALL_OW 73
11019: PPUSH
11020: CALL_OW 85
// end ;
11024: END
// var zdrhaci ; every 0 0$0.1 marked 02 do var tmp ;
11025: GO 11027
11027: DISABLE
11028: LD_INT 0
11030: PPUSH
// begin if not dva then
11031: LD_LOC 21
11035: NOT
11036: IFFALSE 11040
// exit ;
11038: GO 11266
// for tmp in vehiklys do
11040: LD_ADDR_VAR 0 1
11044: PUSH
11045: LD_LOC 13
11049: PUSH
11050: FOR_IN
11051: IFFALSE 11134
// if ( getlives ( tmp ) < zdrhame ) and not ( tmp in zdrhaci ) then
11053: LD_VAR 0 1
11057: PPUSH
11058: CALL_OW 256
11062: PUSH
11063: LD_EXP 97
11067: LESS
11068: PUSH
11069: LD_VAR 0 1
11073: PUSH
11074: LD_LOC 24
11078: IN
11079: NOT
11080: AND
11081: IFFALSE 11132
// begin commovexy ( tmp , 88 , 86 ) ;
11083: LD_VAR 0 1
11087: PPUSH
11088: LD_INT 88
11090: PPUSH
11091: LD_INT 86
11093: PPUSH
11094: CALL_OW 111
// addcommovexy ( tmp , 97 , 99 ) ;
11098: LD_VAR 0 1
11102: PPUSH
11103: LD_INT 97
11105: PPUSH
11106: LD_INT 99
11108: PPUSH
11109: CALL_OW 171
// zdrhaci = zdrhaci ^ [ tmp ] ;
11113: LD_ADDR_LOC 24
11117: PUSH
11118: LD_LOC 24
11122: PUSH
11123: LD_VAR 0 1
11127: PUSH
11128: EMPTY
11129: LIST
11130: ADD
11131: ST_TO_ADDR
// end ;
11132: GO 11050
11134: POP
11135: POP
// for tmp in survivors do
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: LD_LOC 4
11145: PUSH
11146: FOR_IN
11147: IFFALSE 11225
// if not isinunit ( tmp ) and not ( tmp in zdrhaci ) then
11149: LD_VAR 0 1
11153: PPUSH
11154: CALL_OW 310
11158: NOT
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: LD_LOC 24
11169: IN
11170: NOT
11171: AND
11172: IFFALSE 11223
// begin commovexy ( tmp , 88 , 86 ) ;
11174: LD_VAR 0 1
11178: PPUSH
11179: LD_INT 88
11181: PPUSH
11182: LD_INT 86
11184: PPUSH
11185: CALL_OW 111
// addcommovexy ( tmp , 97 , 99 ) ;
11189: LD_VAR 0 1
11193: PPUSH
11194: LD_INT 97
11196: PPUSH
11197: LD_INT 99
11199: PPUSH
11200: CALL_OW 171
// zdrhaci = zdrhaci ^ [ tmp ] ;
11204: LD_ADDR_LOC 24
11208: PUSH
11209: LD_LOC 24
11213: PUSH
11214: LD_VAR 0 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: ADD
11222: ST_TO_ADDR
// end ;
11223: GO 11146
11225: POP
11226: POP
// if ( ( 0 + zdrhaci ) > 2 ) and not devet then
11227: LD_INT 0
11229: PUSH
11230: LD_LOC 24
11234: PLUS
11235: PUSH
11236: LD_INT 2
11238: GREATER
11239: PUSH
11240: LD_LOC 20
11244: NOT
11245: AND
11246: IFFALSE 11259
// begin devet = true ;
11248: LD_ADDR_LOC 20
11252: PUSH
11253: LD_INT 1
11255: ST_TO_ADDR
// enable ( 09 ) ;
11256: LD_INT 9
11258: ENABLE_MARKED
// end ; if dva then
11259: LD_LOC 21
11263: IFFALSE 11266
// enable ;
11265: ENABLE
// end ;
11266: PPOPN 1
11268: END
// export nesahat ; on unitgoestored ( un ) do case un of vsevol :
11269: LD_VAR 0 1
11273: PUSH
11274: LD_EXP 101
11278: DOUBLE
11279: EQUAL
11280: IFTRUE 11284
11282: GO 11345
11284: POP
// if vs then
11285: LD_EXP 124
11289: IFFALSE 11331
// begin forcesay ( vsevol , DDeath-Vse-3 ) ;
11291: LD_EXP 101
11295: PPUSH
11296: LD_STRING DDeath-Vse-3
11298: PPUSH
11299: CALL_OW 91
// say ( burlak , DDeath-Bur-3 ) ;
11303: LD_EXP 120
11307: PPUSH
11308: LD_STRING DDeath-Bur-3
11310: PPUSH
11311: CALL_OW 88
// priorityattack ( am , vsevol ) ;
11315: LD_EXP 3
11319: PPUSH
11320: LD_EXP 101
11324: PPUSH
11325: CALL_OW 470
// end else
11329: GO 11343
// forcesay ( vsevol , DDeath-Sto-3 ) ; yashin :
11331: LD_EXP 101
11335: PPUSH
11336: LD_STRING DDeath-Sto-3
11338: PPUSH
11339: CALL_OW 91
11343: GO 11805
11345: LD_EXP 104
11349: DOUBLE
11350: EQUAL
11351: IFTRUE 11355
11353: GO 11384
11355: POP
// begin forcesay ( yashin , DDeath-Yas-3 ) ;
11356: LD_EXP 104
11360: PPUSH
11361: LD_STRING DDeath-Yas-3
11363: PPUSH
11364: CALL_OW 91
// priorityattack ( am , yashin ) ;
11368: LD_EXP 3
11372: PPUSH
11373: LD_EXP 104
11377: PPUSH
11378: CALL_OW 470
// end ; popov :
11382: GO 11805
11384: LD_EXP 102
11388: DOUBLE
11389: EQUAL
11390: IFTRUE 11394
11392: GO 11423
11394: POP
// begin forcesay ( popov , DDeath-Pop-3 ) ;
11395: LD_EXP 102
11399: PPUSH
11400: LD_STRING DDeath-Pop-3
11402: PPUSH
11403: CALL_OW 91
// priorityattack ( am , popov ) ;
11407: LD_EXP 3
11411: PPUSH
11412: LD_EXP 102
11416: PPUSH
11417: CALL_OW 470
// end ; gaydar :
11421: GO 11805
11423: LD_EXP 103
11427: DOUBLE
11428: EQUAL
11429: IFTRUE 11433
11431: GO 11462
11433: POP
// begin forcesay ( gaydar , DDeath-Gay-3 ) ;
11434: LD_EXP 103
11438: PPUSH
11439: LD_STRING DDeath-Gay-3
11441: PPUSH
11442: CALL_OW 91
// priorityattack ( am , gaydar ) ;
11446: LD_EXP 3
11450: PPUSH
11451: LD_EXP 103
11455: PPUSH
11456: CALL_OW 470
// end ; else
11460: GO 11805
11462: POP
// if ( getside ( un ) = ru2 ) and nesahat then
11463: LD_VAR 0 1
11467: PPUSH
11468: CALL_OW 255
11472: PUSH
11473: LD_EXP 2
11477: EQUAL
11478: PUSH
11479: LD_EXP 127
11483: AND
11484: IFFALSE 11495
// youlost ( Mad ) else
11486: LD_STRING Mad
11488: PPUSH
11489: CALL_OW 104
11493: GO 11805
// if ( getside ( un ) = am ) then
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 255
11504: PUSH
11505: LD_EXP 3
11509: EQUAL
11510: IFFALSE 11805
// case un of amv1 :
11512: LD_VAR 0 1
11516: PUSH
11517: LD_EXP 58
11521: DOUBLE
11522: EQUAL
11523: IFTRUE 11527
11525: GO 11558
11527: POP
// begin comrepairvehicle ( amm1 , amv1 ) ;
11528: LD_EXP 44
11532: PPUSH
11533: LD_EXP 58
11537: PPUSH
11538: CALL_OW 129
// addcomenterunit ( amm1 , amv1 ) ;
11542: LD_EXP 44
11546: PPUSH
11547: LD_EXP 58
11551: PPUSH
11552: CALL_OW 180
// end ; amv2 :
11556: GO 11805
11558: LD_EXP 61
11562: DOUBLE
11563: EQUAL
11564: IFTRUE 11568
11566: GO 11599
11568: POP
// begin comrepairvehicle ( amm2 , amv2 ) ;
11569: LD_EXP 46
11573: PPUSH
11574: LD_EXP 61
11578: PPUSH
11579: CALL_OW 129
// addcomenterunit ( amm2 , amv2 ) ;
11583: LD_EXP 46
11587: PPUSH
11588: LD_EXP 61
11592: PPUSH
11593: CALL_OW 180
// end ; amv3 :
11597: GO 11805
11599: LD_EXP 64
11603: DOUBLE
11604: EQUAL
11605: IFTRUE 11609
11607: GO 11640
11609: POP
// begin comrepairvehicle ( amm3 , amv3 ) ;
11610: LD_EXP 48
11614: PPUSH
11615: LD_EXP 64
11619: PPUSH
11620: CALL_OW 129
// addcomenterunit ( amm3 , amv3 ) ;
11624: LD_EXP 48
11628: PPUSH
11629: LD_EXP 64
11633: PPUSH
11634: CALL_OW 180
// end ; amv4 :
11638: GO 11805
11640: LD_EXP 67
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11681
11650: POP
// begin comrepairvehicle ( amm4 , amv4 ) ;
11651: LD_EXP 50
11655: PPUSH
11656: LD_EXP 67
11660: PPUSH
11661: CALL_OW 129
// addcomenterunit ( amm4 , amv4 ) ;
11665: LD_EXP 50
11669: PPUSH
11670: LD_EXP 67
11674: PPUSH
11675: CALL_OW 180
// end ; amv5 :
11679: GO 11805
11681: LD_EXP 70
11685: DOUBLE
11686: EQUAL
11687: IFTRUE 11691
11689: GO 11722
11691: POP
// begin comrepairvehicle ( amm4 , amv5 ) ;
11692: LD_EXP 50
11696: PPUSH
11697: LD_EXP 70
11701: PPUSH
11702: CALL_OW 129
// addcomenterunit ( amm4 , amv5 ) ;
11706: LD_EXP 50
11710: PPUSH
11711: LD_EXP 70
11715: PPUSH
11716: CALL_OW 180
// end ; amv6 :
11720: GO 11805
11722: LD_EXP 73
11726: DOUBLE
11727: EQUAL
11728: IFTRUE 11732
11730: GO 11763
11732: POP
// begin comrepairvehicle ( amm6 , amv6 ) ;
11733: LD_EXP 54
11737: PPUSH
11738: LD_EXP 73
11742: PPUSH
11743: CALL_OW 129
// addcomenterunit ( amm6 , amv6 ) ;
11747: LD_EXP 54
11751: PPUSH
11752: LD_EXP 73
11756: PPUSH
11757: CALL_OW 180
// end ; amv7 :
11761: GO 11805
11763: LD_EXP 76
11767: DOUBLE
11768: EQUAL
11769: IFTRUE 11773
11771: GO 11804
11773: POP
// begin comrepairvehicle ( amm7 , amv7 ) ;
11774: LD_EXP 56
11778: PPUSH
11779: LD_EXP 76
11783: PPUSH
11784: CALL_OW 129
// addcomenterunit ( amm7 , amv7 ) ;
11788: LD_EXP 56
11792: PPUSH
11793: LD_EXP 76
11797: PPUSH
11798: CALL_OW 180
// end ; end ; end ;
11802: GO 11805
11804: POP
11805: PPOPN 1
11807: END
// on unitdestroyed ( un ) do if un = burlak then
11808: LD_VAR 0 1
11812: PUSH
11813: LD_EXP 120
11817: EQUAL
11818: IFFALSE 11829
// youlost ( Burlak ) else
11820: LD_STRING Burlak
11822: PPUSH
11823: CALL_OW 104
11827: GO 11875
// if ( getside ( un ) = ru ) and ( gettype ( un ) = unit_human ) then
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 255
11838: PUSH
11839: LD_EXP 1
11843: EQUAL
11844: PUSH
11845: LD_VAR 0 1
11849: PPUSH
11850: CALL_OW 247
11854: PUSH
11855: LD_INT 1
11857: EQUAL
11858: AND
11859: IFFALSE 11875
// chcipli = chcipli + 1 ;
11861: LD_ADDR_EXP 95
11865: PUSH
11866: LD_EXP 95
11870: PUSH
11871: LD_INT 1
11873: PLUS
11874: ST_TO_ADDR
11875: PPOPN 1
11877: END
// on unitteleported ( tel , un ) do begin telepused = 1 ;
11878: LD_ADDR_EXP 96
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// disable ;
11886: DISABLE
// end ;
11887: PPOPN 2
11889: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
11890: LD_VAR 0 1
11894: PUSH
11895: LD_INT 3
11897: EQUAL
11898: PUSH
11899: LD_VAR 0 2
11903: PUSH
11904: LD_INT 6
11906: EQUAL
11907: AND
11908: IFFALSE 11917
// YouLost ( Mad ) ;
11910: LD_STRING Mad
11912: PPUSH
11913: CALL_OW 104
// end ;
11917: PPOPN 2
11919: END
// every 0 0$1 trigger ( not filterallunits ( [ [ f_side , am ] , [ f_alive ] , [ f_type , unit_human ] ] ) ) marked 03 do var tmp ;
11920: LD_INT 22
11922: PUSH
11923: LD_EXP 3
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 51
11934: PUSH
11935: EMPTY
11936: LIST
11937: PUSH
11938: LD_INT 21
11940: PUSH
11941: LD_INT 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: PPUSH
11953: CALL_OW 69
11957: NOT
11958: IFFALSE 12201
11960: GO 11962
11962: DISABLE
11963: LD_INT 0
11965: PPUSH
// begin dialogueon ;
11966: CALL_OW 6
// say ( burlak , DBetaCaptured-Bur-1 ) ;
11970: LD_EXP 120
11974: PPUSH
11975: LD_STRING DBetaCaptured-Bur-1
11977: PPUSH
11978: CALL_OW 88
// say ( jmm , DBetaCaptured-JMM-1 ) ;
11982: LD_EXP 122
11986: PPUSH
11987: LD_STRING DBetaCaptured-JMM-1
11989: PPUSH
11990: CALL_OW 88
// say ( burlak , DBetaCaptured-Bur-2 ) ;
11994: LD_EXP 120
11998: PPUSH
11999: LD_STRING DBetaCaptured-Bur-2
12001: PPUSH
12002: CALL_OW 88
// dwait ( 0 0$1 ) ;
12006: LD_INT 35
12008: PPUSH
12009: CALL_OW 68
// sayradio ( platonov , DReturn-Pla-1 ) ;
12013: LD_EXP 121
12017: PPUSH
12018: LD_STRING DReturn-Pla-1
12020: PPUSH
12021: CALL_OW 94
// say ( burlak , DReturn-Bur-1 ) ;
12025: LD_EXP 120
12029: PPUSH
12030: LD_STRING DReturn-Bur-1
12032: PPUSH
12033: CALL_OW 88
// sayradio ( platonov , DReturn-Pla-2 ) ;
12037: LD_EXP 121
12041: PPUSH
12042: LD_STRING DReturn-Pla-2
12044: PPUSH
12045: CALL_OW 94
// dialogueoff ;
12049: CALL_OW 7
// if chcipli > 4 then
12053: LD_EXP 95
12057: PUSH
12058: LD_INT 4
12060: GREATER
12061: IFFALSE 12076
// addmedal ( LittleLosses , - 1 ) else
12063: LD_STRING LittleLosses
12065: PPUSH
12066: LD_INT 1
12068: NEG
12069: PPUSH
12070: CALL_OW 101
12074: GO 12086
// addmedal ( LittleLosses , 1 ) ;
12076: LD_STRING LittleLosses
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 101
// if rychlik then
12086: LD_EXP 98
12090: IFFALSE 12104
// addmedal ( Quick , 1 ) else
12092: LD_STRING Quick
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 101
12102: GO 12115
// addmedal ( Quick , - 1 ) ;
12104: LD_STRING Quick
12106: PPUSH
12107: LD_INT 1
12109: NEG
12110: PPUSH
12111: CALL_OW 101
// if telepused then
12115: LD_EXP 96
12119: IFFALSE 12133
// addmedal ( Teleport , 1 ) else
12121: LD_STRING Teleport
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 101
12131: GO 12144
// addmedal ( Teleport , - 1 ) ;
12133: LD_STRING Teleport
12135: PPUSH
12136: LD_INT 1
12138: NEG
12139: PPUSH
12140: CALL_OW 101
// givemedals ( Main ) ;
12144: LD_STRING Main
12146: PPUSH
12147: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , ru ] , [ f_type , unit_human ] ] ) ) ;
12151: LD_INT 51
12153: PUSH
12154: EMPTY
12155: LIST
12156: PUSH
12157: LD_INT 22
12159: PUSH
12160: LD_EXP 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 21
12171: PUSH
12172: LD_INT 1
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: LIST
12183: PPUSH
12184: CALL_OW 69
12188: PPUSH
12189: CALL_OW 43
// saveitall ;
12193: CALL 12204 0 0
// youwin ;
12197: CALL_OW 103
// end ;
12201: PPOPN 1
12203: END
// function saveitall ; var tmp ; begin
12204: LD_INT 0
12206: PPUSH
12207: PPUSH
// savecharacters ( burlak , Burlak ) ;
12208: LD_EXP 120
12212: PPUSH
12213: LD_STRING Burlak
12215: PPUSH
12216: CALL_OW 38
// if vs then
12220: LD_EXP 124
12224: IFFALSE 12240
// savecharacters ( vsevol , Vsevolod ) else
12226: LD_EXP 101
12230: PPUSH
12231: LD_STRING Vsevolod
12233: PPUSH
12234: CALL_OW 38
12238: GO 12252
// savecharacters ( vsevol , Stolypin ) ;
12240: LD_EXP 101
12244: PPUSH
12245: LD_STRING Stolypin
12247: PPUSH
12248: CALL_OW 38
// savecharacters ( popov , Popov ) ;
12252: LD_EXP 102
12256: PPUSH
12257: LD_STRING Popov
12259: PPUSH
12260: CALL_OW 38
// savecharacters ( gaydar , Gaydar ) ;
12264: LD_EXP 103
12268: PPUSH
12269: LD_STRING Gaydar
12271: PPUSH
12272: CALL_OW 38
// savecharacters ( yashin , Yashin ) ;
12276: LD_EXP 104
12280: PPUSH
12281: LD_STRING Yashin
12283: PPUSH
12284: CALL_OW 38
// savecharacters ( titov , Titov ) ;
12288: LD_EXP 105
12292: PPUSH
12293: LD_STRING Titov
12295: PPUSH
12296: CALL_OW 38
// savecharacters ( belkov , Belkov ) ;
12300: LD_EXP 106
12304: PPUSH
12305: LD_STRING Belkov
12307: PPUSH
12308: CALL_OW 38
// savecharacters ( kuzmov , Kuzmov ) ;
12312: LD_EXP 107
12316: PPUSH
12317: LD_STRING Kuzmov
12319: PPUSH
12320: CALL_OW 38
// savecharacters ( gnyevko , Gnyevko ) ;
12324: LD_EXP 108
12328: PPUSH
12329: LD_STRING Gnyevko
12331: PPUSH
12332: CALL_OW 38
// savecharacters ( kozlov , Kozlov ) ;
12336: LD_EXP 109
12340: PPUSH
12341: LD_STRING Kozlov
12343: PPUSH
12344: CALL_OW 38
// savecharacters ( furmanov , Furmanov ) ;
12348: LD_EXP 110
12352: PPUSH
12353: LD_STRING Furmanov
12355: PPUSH
12356: CALL_OW 38
// savecharacters ( kiril , Kirilenkova ) ;
12360: LD_EXP 111
12364: PPUSH
12365: LD_STRING Kirilenkova
12367: PPUSH
12368: CALL_OW 38
// savecharacters ( kapitsova , Kapitsova ) ;
12372: LD_EXP 112
12376: PPUSH
12377: LD_STRING Kapitsova
12379: PPUSH
12380: CALL_OW 38
// savecharacters ( petrosyan , Petrosyan ) ;
12384: LD_EXP 113
12388: PPUSH
12389: LD_STRING Petrosyan
12391: PPUSH
12392: CALL_OW 38
// savecharacters ( scholtze , Scholtze ) ;
12396: LD_EXP 114
12400: PPUSH
12401: LD_STRING Scholtze
12403: PPUSH
12404: CALL_OW 38
// savecharacters ( dolgov , Dolgov ) ;
12408: LD_EXP 115
12412: PPUSH
12413: LD_STRING Dolgov
12415: PPUSH
12416: CALL_OW 38
// savecharacters ( kovalyuk , Kovalyuk ) ;
12420: LD_EXP 116
12424: PPUSH
12425: LD_STRING Kovalyuk
12427: PPUSH
12428: CALL_OW 38
// savecharacters ( karamazov , Karamazov ) ;
12432: LD_EXP 117
12436: PPUSH
12437: LD_STRING Karamazov
12439: PPUSH
12440: CALL_OW 38
// savecharacters ( petrovova , Petrovova ) ;
12444: LD_EXP 118
12448: PPUSH
12449: LD_STRING Petrovova
12451: PPUSH
12452: CALL_OW 38
// savecharacters ( oblukov , Oblukov ) ;
12456: LD_EXP 119
12460: PPUSH
12461: LD_STRING Oblukov
12463: PPUSH
12464: CALL_OW 38
// tmp = filterallunits ( [ [ f_alive ] , [ f_side , ru ] , [ f_type , unit_human ] ] ) ;
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_INT 51
12475: PUSH
12476: EMPTY
12477: LIST
12478: PUSH
12479: LD_INT 22
12481: PUSH
12482: LD_EXP 1
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 21
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: PPUSH
12506: CALL_OW 69
12510: ST_TO_ADDR
// savecharacters ( tmp ^ surv3 diff [ burlak , vsevol , popov , gaydar , yashin , titov , belkov , kuzmov , gnyevko , kozlov , furmanov , kiril , kapitsova , petrosyan , scholtze , dolgov , kovalyuk , karamazov , petrovova , oblukov ] , survivors3 ) ;
12511: LD_VAR 0 2
12515: PUSH
12516: LD_EXP 125
12520: ADD
12521: PUSH
12522: LD_EXP 120
12526: PUSH
12527: LD_EXP 101
12531: PUSH
12532: LD_EXP 102
12536: PUSH
12537: LD_EXP 103
12541: PUSH
12542: LD_EXP 104
12546: PUSH
12547: LD_EXP 105
12551: PUSH
12552: LD_EXP 106
12556: PUSH
12557: LD_EXP 107
12561: PUSH
12562: LD_EXP 108
12566: PUSH
12567: LD_EXP 109
12571: PUSH
12572: LD_EXP 110
12576: PUSH
12577: LD_EXP 111
12581: PUSH
12582: LD_EXP 112
12586: PUSH
12587: LD_EXP 113
12591: PUSH
12592: LD_EXP 114
12596: PUSH
12597: LD_EXP 115
12601: PUSH
12602: LD_EXP 116
12606: PUSH
12607: LD_EXP 117
12611: PUSH
12612: LD_EXP 118
12616: PUSH
12617: LD_EXP 119
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: DIFF
12644: PPUSH
12645: LD_STRING survivors3
12647: PPUSH
12648: CALL_OW 38
// end ;
12652: LD_VAR 0 1
12656: RET
// export function prepare_americans ; var tmp ; begin
12657: LD_INT 0
12659: PPUSH
12660: PPUSH
// uc_side = am ;
12661: LD_ADDR_OWVAR 20
12665: PUSH
12666: LD_EXP 3
12670: ST_TO_ADDR
// uc_nation = nation_american ;
12671: LD_ADDR_OWVAR 21
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// preparesoldier ( sex_male , ams0_sk ) ;
12679: LD_INT 1
12681: PPUSH
12682: LD_EXP 17
12686: PPUSH
12687: CALL_OW 381
// tmp = createhuman ;
12691: LD_ADDR_VAR 0 2
12695: PUSH
12696: CALL_OW 44
12700: ST_TO_ADDR
// placeunitxyr ( tmp , 34 , 38 , 1 , false ) ;
12701: LD_VAR 0 2
12705: PPUSH
12706: LD_INT 34
12708: PPUSH
12709: LD_INT 38
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: LD_INT 0
12717: PPUSH
12718: CALL_OW 50
// comenterunit ( tmp , ambunk0 ) ;
12722: LD_VAR 0 2
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 120
// ams0 = tmp ;
12734: LD_ADDR_EXP 4
12738: PUSH
12739: LD_VAR 0 2
12743: ST_TO_ADDR
// preparesoldier ( sex_male , ams1_sk ) ;
12744: LD_INT 1
12746: PPUSH
12747: LD_EXP 18
12751: PPUSH
12752: CALL_OW 381
// tmp = createhuman ;
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: CALL_OW 44
12765: ST_TO_ADDR
// placeunitxyr ( tmp , 54 , 46 , 1 , false ) ;
12766: LD_VAR 0 2
12770: PPUSH
12771: LD_INT 54
12773: PPUSH
12774: LD_INT 46
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_INT 0
12782: PPUSH
12783: CALL_OW 50
// comenterunit ( tmp , ambunk1 ) ;
12787: LD_VAR 0 2
12791: PPUSH
12792: LD_INT 5
12794: PPUSH
12795: CALL_OW 120
// ams1 = tmp ;
12799: LD_ADDR_EXP 5
12803: PUSH
12804: LD_VAR 0 2
12808: ST_TO_ADDR
// preparesoldier ( sex_male , ams2_sk ) ;
12809: LD_INT 1
12811: PPUSH
12812: LD_EXP 19
12816: PPUSH
12817: CALL_OW 381
// tmp = createhuman ;
12821: LD_ADDR_VAR 0 2
12825: PUSH
12826: CALL_OW 44
12830: ST_TO_ADDR
// placeunitxyr ( tmp , 58 , 47 , 1 , false ) ;
12831: LD_VAR 0 2
12835: PPUSH
12836: LD_INT 58
12838: PPUSH
12839: LD_INT 47
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: LD_INT 0
12847: PPUSH
12848: CALL_OW 50
// comenterunit ( tmp , ambunk2 ) ;
12852: LD_VAR 0 2
12856: PPUSH
12857: LD_INT 15
12859: PPUSH
12860: CALL_OW 120
// ams2 = tmp ;
12864: LD_ADDR_EXP 6
12868: PUSH
12869: LD_VAR 0 2
12873: ST_TO_ADDR
// preparesoldier ( sex_male , ams3_sk ) ;
12874: LD_INT 1
12876: PPUSH
12877: LD_EXP 20
12881: PPUSH
12882: CALL_OW 381
// tmp = createhuman ;
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// placeunitxyr ( tmp , 62 , 48 , 1 , false ) ;
12896: LD_VAR 0 2
12900: PPUSH
12901: LD_INT 62
12903: PPUSH
12904: LD_INT 48
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: LD_INT 0
12912: PPUSH
12913: CALL_OW 50
// comenterunit ( tmp , ambunk3 ) ;
12917: LD_VAR 0 2
12921: PPUSH
12922: LD_INT 14
12924: PPUSH
12925: CALL_OW 120
// ams3 = tmp ;
12929: LD_ADDR_EXP 7
12933: PUSH
12934: LD_VAR 0 2
12938: ST_TO_ADDR
// preparesoldier ( sex_male , ams4_sk ) ;
12939: LD_INT 1
12941: PPUSH
12942: LD_EXP 21
12946: PPUSH
12947: CALL_OW 381
// tmp = createhuman ;
12951: LD_ADDR_VAR 0 2
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// placeunitxyr ( tmp , 60 , 44 , 1 , false ) ;
12961: LD_VAR 0 2
12965: PPUSH
12966: LD_INT 60
12968: PPUSH
12969: LD_INT 44
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 50
// comenterunit ( tmp , ambunk4 ) ;
12982: LD_VAR 0 2
12986: PPUSH
12987: LD_INT 6
12989: PPUSH
12990: CALL_OW 120
// ams4 = tmp ;
12994: LD_ADDR_EXP 8
12998: PUSH
12999: LD_VAR 0 2
13003: ST_TO_ADDR
// preparesoldier ( sex_male , ams5_sk ) ;
13004: LD_INT 1
13006: PPUSH
13007: LD_EXP 22
13011: PPUSH
13012: CALL_OW 381
// tmp = createhuman ;
13016: LD_ADDR_VAR 0 2
13020: PUSH
13021: CALL_OW 44
13025: ST_TO_ADDR
// placeunitxyr ( tmp , 83 , 50 , 1 , false ) ;
13026: LD_VAR 0 2
13030: PPUSH
13031: LD_INT 83
13033: PPUSH
13034: LD_INT 50
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: LD_INT 0
13042: PPUSH
13043: CALL_OW 50
// comenterunit ( tmp , ambunk5 ) ;
13047: LD_VAR 0 2
13051: PPUSH
13052: LD_INT 7
13054: PPUSH
13055: CALL_OW 120
// ams5 = tmp ;
13059: LD_ADDR_EXP 9
13063: PUSH
13064: LD_VAR 0 2
13068: ST_TO_ADDR
// preparesoldier ( sex_male , ams6_sk ) ;
13069: LD_INT 1
13071: PPUSH
13072: LD_EXP 23
13076: PPUSH
13077: CALL_OW 381
// tmp = createhuman ;
13081: LD_ADDR_VAR 0 2
13085: PUSH
13086: CALL_OW 44
13090: ST_TO_ADDR
// placeunitxyr ( tmp , 83 , 47 , 1 , false ) ;
13091: LD_VAR 0 2
13095: PPUSH
13096: LD_INT 83
13098: PPUSH
13099: LD_INT 47
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: LD_INT 0
13107: PPUSH
13108: CALL_OW 50
// comenterunit ( tmp , ambunk6 ) ;
13112: LD_VAR 0 2
13116: PPUSH
13117: LD_INT 13
13119: PPUSH
13120: CALL_OW 120
// ams6 = tmp ;
13124: LD_ADDR_EXP 10
13128: PUSH
13129: LD_VAR 0 2
13133: ST_TO_ADDR
// preparesoldier ( sex_male , ams7_sk ) ;
13134: LD_INT 1
13136: PPUSH
13137: LD_EXP 24
13141: PPUSH
13142: CALL_OW 381
// tmp = createhuman ;
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: CALL_OW 44
13155: ST_TO_ADDR
// placeunitxyr ( tmp , 100 , 47 , 1 , false ) ;
13156: LD_VAR 0 2
13160: PPUSH
13161: LD_INT 100
13163: PPUSH
13164: LD_INT 47
13166: PPUSH
13167: LD_INT 1
13169: PPUSH
13170: LD_INT 0
13172: PPUSH
13173: CALL_OW 50
// comenterunit ( tmp , ambunk7 ) ;
13177: LD_VAR 0 2
13181: PPUSH
13182: LD_INT 8
13184: PPUSH
13185: CALL_OW 120
// ams7 = tmp ;
13189: LD_ADDR_EXP 11
13193: PUSH
13194: LD_VAR 0 2
13198: ST_TO_ADDR
// preparesoldier ( sex_male , ams8_sk ) ;
13199: LD_INT 1
13201: PPUSH
13202: LD_EXP 25
13206: PPUSH
13207: CALL_OW 381
// tmp = createhuman ;
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: CALL_OW 44
13220: ST_TO_ADDR
// placeunitxyr ( tmp , 96 , 30 , 1 , false ) ;
13221: LD_VAR 0 2
13225: PPUSH
13226: LD_INT 96
13228: PPUSH
13229: LD_INT 30
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: LD_INT 0
13237: PPUSH
13238: CALL_OW 50
// comenterunit ( tmp , ambunk8 ) ;
13242: LD_VAR 0 2
13246: PPUSH
13247: LD_INT 9
13249: PPUSH
13250: CALL_OW 120
// ams8 = tmp ;
13254: LD_ADDR_EXP 12
13258: PUSH
13259: LD_VAR 0 2
13263: ST_TO_ADDR
// preparesoldier ( sex_male , ams9_sk ) ;
13264: LD_INT 1
13266: PPUSH
13267: LD_EXP 26
13271: PPUSH
13272: CALL_OW 381
// tmp = createhuman ;
13276: LD_ADDR_VAR 0 2
13280: PUSH
13281: CALL_OW 44
13285: ST_TO_ADDR
// placeunitxyr ( tmp , 94 , 30 , 1 , false ) ;
13286: LD_VAR 0 2
13290: PPUSH
13291: LD_INT 94
13293: PPUSH
13294: LD_INT 30
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: LD_INT 0
13302: PPUSH
13303: CALL_OW 50
// comenterunit ( tmp , ambunk9 ) ;
13307: LD_VAR 0 2
13311: PPUSH
13312: LD_INT 17
13314: PPUSH
13315: CALL_OW 120
// ams9 = tmp ;
13319: LD_ADDR_EXP 13
13323: PUSH
13324: LD_VAR 0 2
13328: ST_TO_ADDR
// preparesoldier ( sex_male , amsa_sk ) ;
13329: LD_INT 1
13331: PPUSH
13332: LD_EXP 27
13336: PPUSH
13337: CALL_OW 381
// tmp = createhuman ;
13341: LD_ADDR_VAR 0 2
13345: PUSH
13346: CALL_OW 44
13350: ST_TO_ADDR
// placeunitxyr ( tmp , 84 , 17 , 1 , false ) ;
13351: LD_VAR 0 2
13355: PPUSH
13356: LD_INT 84
13358: PPUSH
13359: LD_INT 17
13361: PPUSH
13362: LD_INT 1
13364: PPUSH
13365: LD_INT 0
13367: PPUSH
13368: CALL_OW 50
// comenterunit ( tmp , ambunka ) ;
13372: LD_VAR 0 2
13376: PPUSH
13377: LD_INT 12
13379: PPUSH
13380: CALL_OW 120
// amsa = tmp ;
13384: LD_ADDR_EXP 14
13388: PUSH
13389: LD_VAR 0 2
13393: ST_TO_ADDR
// preparesoldier ( sex_male , amsb_sk ) ;
13394: LD_INT 1
13396: PPUSH
13397: LD_EXP 28
13401: PPUSH
13402: CALL_OW 381
// tmp = createhuman ;
13406: LD_ADDR_VAR 0 2
13410: PUSH
13411: CALL_OW 44
13415: ST_TO_ADDR
// placeunitxyr ( tmp , 91 , 10 , 1 , false ) ;
13416: LD_VAR 0 2
13420: PPUSH
13421: LD_INT 91
13423: PPUSH
13424: LD_INT 10
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: LD_INT 0
13432: PPUSH
13433: CALL_OW 50
// comenterunit ( tmp , ambunkb ) ;
13437: LD_VAR 0 2
13441: PPUSH
13442: LD_INT 11
13444: PPUSH
13445: CALL_OW 120
// amsb = tmp ;
13449: LD_ADDR_EXP 15
13453: PUSH
13454: LD_VAR 0 2
13458: ST_TO_ADDR
// preparesoldier ( sex_male , amsc_sk ) ;
13459: LD_INT 1
13461: PPUSH
13462: LD_EXP 29
13466: PPUSH
13467: CALL_OW 381
// tmp = createhuman ;
13471: LD_ADDR_VAR 0 2
13475: PUSH
13476: CALL_OW 44
13480: ST_TO_ADDR
// placeunitxyr ( tmp , 95 , 9 , 1 , false ) ;
13481: LD_VAR 0 2
13485: PPUSH
13486: LD_INT 95
13488: PPUSH
13489: LD_INT 9
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 50
// comenterunit ( tmp , ambunkc ) ;
13502: LD_VAR 0 2
13506: PPUSH
13507: LD_INT 10
13509: PPUSH
13510: CALL_OW 120
// amsc = tmp ;
13514: LD_ADDR_EXP 16
13518: PUSH
13519: LD_VAR 0 2
13523: ST_TO_ADDR
// preparesoldier ( sex_male , ams_1_sk ) ;
13524: LD_INT 1
13526: PPUSH
13527: LD_EXP 36
13531: PPUSH
13532: CALL_OW 381
// tmp = createhuman ;
13536: LD_ADDR_VAR 0 2
13540: PUSH
13541: CALL_OW 44
13545: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 69
13553: PPUSH
13554: LD_INT 33
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: LD_INT 0
13562: PPUSH
13563: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13567: LD_VAR 0 2
13571: PPUSH
13572: LD_INT 26
13574: PPUSH
13575: CALL_OW 120
// ams_1 = tmp ;
13579: LD_ADDR_EXP 30
13583: PUSH
13584: LD_VAR 0 2
13588: ST_TO_ADDR
// preparesoldier ( sex_male , ams_2_sk ) ;
13589: LD_INT 1
13591: PPUSH
13592: LD_EXP 37
13596: PPUSH
13597: CALL_OW 381
// tmp = createhuman ;
13601: LD_ADDR_VAR 0 2
13605: PUSH
13606: CALL_OW 44
13610: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13611: LD_VAR 0 2
13615: PPUSH
13616: LD_INT 69
13618: PPUSH
13619: LD_INT 33
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: LD_INT 0
13627: PPUSH
13628: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_INT 26
13639: PPUSH
13640: CALL_OW 120
// ams_2 = tmp ;
13644: LD_ADDR_EXP 31
13648: PUSH
13649: LD_VAR 0 2
13653: ST_TO_ADDR
// preparesoldier ( sex_male , ams_3_sk ) ;
13654: LD_INT 1
13656: PPUSH
13657: LD_EXP 38
13661: PPUSH
13662: CALL_OW 381
// tmp = createhuman ;
13666: LD_ADDR_VAR 0 2
13670: PUSH
13671: CALL_OW 44
13675: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13676: LD_VAR 0 2
13680: PPUSH
13681: LD_INT 69
13683: PPUSH
13684: LD_INT 33
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: LD_INT 0
13692: PPUSH
13693: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13697: LD_VAR 0 2
13701: PPUSH
13702: LD_INT 26
13704: PPUSH
13705: CALL_OW 120
// ams_3 = tmp ;
13709: LD_ADDR_EXP 32
13713: PUSH
13714: LD_VAR 0 2
13718: ST_TO_ADDR
// preparesoldier ( sex_male , ams_4_sk ) ;
13719: LD_INT 1
13721: PPUSH
13722: LD_EXP 39
13726: PPUSH
13727: CALL_OW 381
// tmp = createhuman ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: CALL_OW 44
13740: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13741: LD_VAR 0 2
13745: PPUSH
13746: LD_INT 69
13748: PPUSH
13749: LD_INT 33
13751: PPUSH
13752: LD_INT 1
13754: PPUSH
13755: LD_INT 0
13757: PPUSH
13758: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13762: LD_VAR 0 2
13766: PPUSH
13767: LD_INT 26
13769: PPUSH
13770: CALL_OW 120
// ams_4 = tmp ;
13774: LD_ADDR_EXP 33
13778: PUSH
13779: LD_VAR 0 2
13783: ST_TO_ADDR
// preparesoldier ( sex_male , ams_5_sk ) ;
13784: LD_INT 1
13786: PPUSH
13787: LD_EXP 40
13791: PPUSH
13792: CALL_OW 381
// tmp = createhuman ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: CALL_OW 44
13805: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 69
13813: PPUSH
13814: LD_INT 33
13816: PPUSH
13817: LD_INT 1
13819: PPUSH
13820: LD_INT 0
13822: PPUSH
13823: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13827: LD_VAR 0 2
13831: PPUSH
13832: LD_INT 26
13834: PPUSH
13835: CALL_OW 120
// ams_5 = tmp ;
13839: LD_ADDR_EXP 34
13843: PUSH
13844: LD_VAR 0 2
13848: ST_TO_ADDR
// preparesoldier ( sex_male , ams_6_sk ) ;
13849: LD_INT 1
13851: PPUSH
13852: LD_EXP 41
13856: PPUSH
13857: CALL_OW 381
// tmp = createhuman ;
13861: LD_ADDR_VAR 0 2
13865: PUSH
13866: CALL_OW 44
13870: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13871: LD_VAR 0 2
13875: PPUSH
13876: LD_INT 69
13878: PPUSH
13879: LD_INT 33
13881: PPUSH
13882: LD_INT 1
13884: PPUSH
13885: LD_INT 0
13887: PPUSH
13888: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13892: LD_VAR 0 2
13896: PPUSH
13897: LD_INT 26
13899: PPUSH
13900: CALL_OW 120
// ams_6 = tmp ;
13904: LD_ADDR_EXP 35
13908: PUSH
13909: LD_VAR 0 2
13913: ST_TO_ADDR
// preparemechanic ( sex_female , amm0_sk ) ;
13914: LD_INT 2
13916: PPUSH
13917: LD_EXP 43
13921: PPUSH
13922: CALL_OW 383
// amm0 = createhuman ;
13926: LD_ADDR_EXP 42
13930: PUSH
13931: CALL_OW 44
13935: ST_TO_ADDR
// placeunitxyr ( amm0 , 45 , 15 , 1 , false ) ;
13936: LD_EXP 42
13940: PPUSH
13941: LD_INT 45
13943: PPUSH
13944: LD_INT 15
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: LD_INT 0
13952: PPUSH
13953: CALL_OW 50
// comenterunit ( amm0 , amcntltwr ) ;
13957: LD_EXP 42
13961: PPUSH
13962: LD_INT 30
13964: PPUSH
13965: CALL_OW 120
// vc_control = control_manual ;
13969: LD_ADDR_OWVAR 38
13973: PUSH
13974: LD_INT 1
13976: ST_TO_ADDR
// vc_engine = engine_siberite ;
13977: LD_ADDR_OWVAR 39
13981: PUSH
13982: LD_INT 3
13984: ST_TO_ADDR
// vc_chassis = amv1_ch ;
13985: LD_ADDR_OWVAR 37
13989: PUSH
13990: LD_EXP 59
13994: ST_TO_ADDR
// vc_weapon = amv1_wp ;
13995: LD_ADDR_OWVAR 40
13999: PUSH
14000: LD_EXP 60
14004: ST_TO_ADDR
// amv1 = createvehicle ;
14005: LD_ADDR_EXP 58
14009: PUSH
14010: CALL_OW 45
14014: ST_TO_ADDR
// setdir ( amv1 , 2 ) ;
14015: LD_EXP 58
14019: PPUSH
14020: LD_INT 2
14022: PPUSH
14023: CALL_OW 233
// placeunitxy ( amv1 , 61 , 32 , false ) ;
14027: LD_EXP 58
14031: PPUSH
14032: LD_INT 61
14034: PPUSH
14035: LD_INT 32
14037: PPUSH
14038: LD_INT 0
14040: PPUSH
14041: CALL_OW 48
// preparemechanic ( sex_male , amm1_sk ) ;
14045: LD_INT 1
14047: PPUSH
14048: LD_EXP 45
14052: PPUSH
14053: CALL_OW 383
// amm1 = createhuman ;
14057: LD_ADDR_EXP 44
14061: PUSH
14062: CALL_OW 44
14066: ST_TO_ADDR
// placehumaninunit ( amm1 , amv1 ) ;
14067: LD_EXP 44
14071: PPUSH
14072: LD_EXP 58
14076: PPUSH
14077: CALL_OW 52
// vc_chassis = amv2_ch ;
14081: LD_ADDR_OWVAR 37
14085: PUSH
14086: LD_EXP 62
14090: ST_TO_ADDR
// vc_weapon = amv2_wp ;
14091: LD_ADDR_OWVAR 40
14095: PUSH
14096: LD_EXP 63
14100: ST_TO_ADDR
// amv2 = createvehicle ;
14101: LD_ADDR_EXP 61
14105: PUSH
14106: CALL_OW 45
14110: ST_TO_ADDR
// setdir ( amv2 , 3 ) ;
14111: LD_EXP 61
14115: PPUSH
14116: LD_INT 3
14118: PPUSH
14119: CALL_OW 233
// placeunitxy ( amv2 , 75 , 34 , false ) ;
14123: LD_EXP 61
14127: PPUSH
14128: LD_INT 75
14130: PPUSH
14131: LD_INT 34
14133: PPUSH
14134: LD_INT 0
14136: PPUSH
14137: CALL_OW 48
// preparemechanic ( sex_male , amm2_sk ) ;
14141: LD_INT 1
14143: PPUSH
14144: LD_EXP 47
14148: PPUSH
14149: CALL_OW 383
// amm2 = createhuman ;
14153: LD_ADDR_EXP 46
14157: PUSH
14158: CALL_OW 44
14162: ST_TO_ADDR
// placehumaninunit ( amm2 , amv2 ) ;
14163: LD_EXP 46
14167: PPUSH
14168: LD_EXP 61
14172: PPUSH
14173: CALL_OW 52
// vc_chassis = amv3_ch ;
14177: LD_ADDR_OWVAR 37
14181: PUSH
14182: LD_EXP 65
14186: ST_TO_ADDR
// vc_weapon = amv3_wp ;
14187: LD_ADDR_OWVAR 40
14191: PUSH
14192: LD_EXP 66
14196: ST_TO_ADDR
// amv3 = createvehicle ;
14197: LD_ADDR_EXP 64
14201: PUSH
14202: CALL_OW 45
14206: ST_TO_ADDR
// setdir ( amv3 , 2 ) ;
14207: LD_EXP 64
14211: PPUSH
14212: LD_INT 2
14214: PPUSH
14215: CALL_OW 233
// placeunitxy ( amv3 , 38 , 31 , false ) ;
14219: LD_EXP 64
14223: PPUSH
14224: LD_INT 38
14226: PPUSH
14227: LD_INT 31
14229: PPUSH
14230: LD_INT 0
14232: PPUSH
14233: CALL_OW 48
// preparemechanic ( sex_male , amm3_sk ) ;
14237: LD_INT 1
14239: PPUSH
14240: LD_EXP 49
14244: PPUSH
14245: CALL_OW 383
// amm3 = createhuman ;
14249: LD_ADDR_EXP 48
14253: PUSH
14254: CALL_OW 44
14258: ST_TO_ADDR
// placehumaninunit ( amm3 , amv3 ) ;
14259: LD_EXP 48
14263: PPUSH
14264: LD_EXP 64
14268: PPUSH
14269: CALL_OW 52
// vc_chassis = amv4_ch ;
14273: LD_ADDR_OWVAR 37
14277: PUSH
14278: LD_EXP 68
14282: ST_TO_ADDR
// vc_weapon = amv4_wp ;
14283: LD_ADDR_OWVAR 40
14287: PUSH
14288: LD_EXP 69
14292: ST_TO_ADDR
// amv4 = createvehicle ;
14293: LD_ADDR_EXP 67
14297: PUSH
14298: CALL_OW 45
14302: ST_TO_ADDR
// setdir ( amv4 , 3 ) ;
14303: LD_EXP 67
14307: PPUSH
14308: LD_INT 3
14310: PPUSH
14311: CALL_OW 233
// placeunitxy ( amv4 , 47 , 35 , false ) ;
14315: LD_EXP 67
14319: PPUSH
14320: LD_INT 47
14322: PPUSH
14323: LD_INT 35
14325: PPUSH
14326: LD_INT 0
14328: PPUSH
14329: CALL_OW 48
// preparemechanic ( sex_male , amm4_sk ) ;
14333: LD_INT 1
14335: PPUSH
14336: LD_EXP 51
14340: PPUSH
14341: CALL_OW 383
// amm4 = createhuman ;
14345: LD_ADDR_EXP 50
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// placehumaninunit ( amm4 , amv4 ) ;
14355: LD_EXP 50
14359: PPUSH
14360: LD_EXP 67
14364: PPUSH
14365: CALL_OW 52
// vc_chassis = amv5_ch ;
14369: LD_ADDR_OWVAR 37
14373: PUSH
14374: LD_EXP 71
14378: ST_TO_ADDR
// vc_weapon = amv5_wp ;
14379: LD_ADDR_OWVAR 40
14383: PUSH
14384: LD_EXP 72
14388: ST_TO_ADDR
// amv5 = createvehicle ;
14389: LD_ADDR_EXP 70
14393: PUSH
14394: CALL_OW 45
14398: ST_TO_ADDR
// setdir ( amv5 , 1 ) ;
14399: LD_EXP 70
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 233
// placeunitxy ( amv5 , 83 , 23 , false ) ;
14411: LD_EXP 70
14415: PPUSH
14416: LD_INT 83
14418: PPUSH
14419: LD_INT 23
14421: PPUSH
14422: LD_INT 0
14424: PPUSH
14425: CALL_OW 48
// preparemechanic ( sex_male , amm5_sk ) ;
14429: LD_INT 1
14431: PPUSH
14432: LD_EXP 53
14436: PPUSH
14437: CALL_OW 383
// amm5 = createhuman ;
14441: LD_ADDR_EXP 52
14445: PUSH
14446: CALL_OW 44
14450: ST_TO_ADDR
// placehumaninunit ( amm5 , amv5 ) ;
14451: LD_EXP 52
14455: PPUSH
14456: LD_EXP 70
14460: PPUSH
14461: CALL_OW 52
// vc_chassis = amv6_ch ;
14465: LD_ADDR_OWVAR 37
14469: PUSH
14470: LD_EXP 74
14474: ST_TO_ADDR
// vc_weapon = amv6_wp ;
14475: LD_ADDR_OWVAR 40
14479: PUSH
14480: LD_EXP 75
14484: ST_TO_ADDR
// amv6 = createvehicle ;
14485: LD_ADDR_EXP 73
14489: PUSH
14490: CALL_OW 45
14494: ST_TO_ADDR
// setdir ( amv6 , 2 ) ;
14495: LD_EXP 73
14499: PPUSH
14500: LD_INT 2
14502: PPUSH
14503: CALL_OW 233
// placeunitxy ( amv6 , 80 , 8 , false ) ;
14507: LD_EXP 73
14511: PPUSH
14512: LD_INT 80
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 48
// preparemechanic ( sex_male , amm6_sk ) ;
14525: LD_INT 1
14527: PPUSH
14528: LD_EXP 55
14532: PPUSH
14533: CALL_OW 383
// amm6 = createhuman ;
14537: LD_ADDR_EXP 54
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// placehumaninunit ( amm6 , amv6 ) ;
14547: LD_EXP 54
14551: PPUSH
14552: LD_EXP 73
14556: PPUSH
14557: CALL_OW 52
// vc_chassis = amv7_ch ;
14561: LD_ADDR_OWVAR 37
14565: PUSH
14566: LD_EXP 77
14570: ST_TO_ADDR
// vc_weapon = amv7_wp ;
14571: LD_ADDR_OWVAR 40
14575: PUSH
14576: LD_EXP 78
14580: ST_TO_ADDR
// amv7 = createvehicle ;
14581: LD_ADDR_EXP 76
14585: PUSH
14586: CALL_OW 45
14590: ST_TO_ADDR
// setdir ( amv7 , 3 ) ;
14591: LD_EXP 76
14595: PPUSH
14596: LD_INT 3
14598: PPUSH
14599: CALL_OW 233
// placeunitxy ( amv7 , 43 , 31 , false ) ;
14603: LD_EXP 76
14607: PPUSH
14608: LD_INT 43
14610: PPUSH
14611: LD_INT 31
14613: PPUSH
14614: LD_INT 0
14616: PPUSH
14617: CALL_OW 48
// preparemechanic ( sex_male , amm7_sk ) ;
14621: LD_INT 1
14623: PPUSH
14624: LD_EXP 57
14628: PPUSH
14629: CALL_OW 383
// amm7 = createhuman ;
14633: LD_ADDR_EXP 56
14637: PUSH
14638: CALL_OW 44
14642: ST_TO_ADDR
// placehumaninunit ( amm7 , amv7 ) ;
14643: LD_EXP 56
14647: PPUSH
14648: LD_EXP 76
14652: PPUSH
14653: CALL_OW 52
// preparehuman ( sex_male , class_sniper , amsn0_sk ) ;
14657: LD_INT 1
14659: PPUSH
14660: LD_INT 5
14662: PPUSH
14663: LD_EXP 80
14667: PPUSH
14668: CALL_OW 380
// amsn0 = createhuman ;
14672: LD_ADDR_EXP 79
14676: PUSH
14677: CALL_OW 44
14681: ST_TO_ADDR
// placeunitxyr ( amsn0 , 99 , 40 , 1 , false ) ;
14682: LD_EXP 79
14686: PPUSH
14687: LD_INT 99
14689: PPUSH
14690: LD_INT 40
14692: PPUSH
14693: LD_INT 1
14695: PPUSH
14696: LD_INT 0
14698: PPUSH
14699: CALL_OW 50
// comhold ( amsn0 ) ;
14703: LD_EXP 79
14707: PPUSH
14708: CALL_OW 140
// preparehuman ( sex_male , class_sniper , amsn1_sk ) ;
14712: LD_INT 1
14714: PPUSH
14715: LD_INT 5
14717: PPUSH
14718: LD_EXP 82
14722: PPUSH
14723: CALL_OW 380
// amsn1 = createhuman ;
14727: LD_ADDR_EXP 81
14731: PUSH
14732: CALL_OW 44
14736: ST_TO_ADDR
// placeunitxyr ( amsn1 , 94 , 11 , 1 , false ) ;
14737: LD_EXP 81
14741: PPUSH
14742: LD_INT 94
14744: PPUSH
14745: LD_INT 11
14747: PPUSH
14748: LD_INT 1
14750: PPUSH
14751: LD_INT 0
14753: PPUSH
14754: CALL_OW 50
// comhold ( amsn1 ) ;
14758: LD_EXP 81
14762: PPUSH
14763: CALL_OW 140
// prepareengineer ( sex_female , 7 ) ;
14767: LD_INT 2
14769: PPUSH
14770: LD_INT 7
14772: PPUSH
14773: CALL_OW 382
// tmp = createhuman ;
14777: LD_ADDR_VAR 0 2
14781: PUSH
14782: CALL_OW 44
14786: ST_TO_ADDR
// placeunitxyr ( tmp , 78 , 23 , 2 , false ) ;
14787: LD_VAR 0 2
14791: PPUSH
14792: LD_INT 78
14794: PPUSH
14795: LD_INT 23
14797: PPUSH
14798: LD_INT 2
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: CALL_OW 50
// comenterunit ( tmp , amwareh ) ;
14808: LD_VAR 0 2
14812: PPUSH
14813: LD_INT 3
14815: PPUSH
14816: CALL_OW 120
// prepareengineer ( sex_male , ame0_sk ) ;
14820: LD_INT 1
14822: PPUSH
14823: LD_EXP 84
14827: PPUSH
14828: CALL_OW 382
// ame0 = createhuman ;
14832: LD_ADDR_EXP 83
14836: PUSH
14837: CALL_OW 44
14841: ST_TO_ADDR
// placeunitxyr ( ame0 , 31 , 37 , 1 , false ) ;
14842: LD_EXP 83
14846: PPUSH
14847: LD_INT 31
14849: PPUSH
14850: LD_INT 37
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 50
// comhold ( ame0 ) ;
14863: LD_EXP 83
14867: PPUSH
14868: CALL_OW 140
// prepareengineer ( sex_male , ame1_sk ) ;
14872: LD_INT 1
14874: PPUSH
14875: LD_EXP 86
14879: PPUSH
14880: CALL_OW 382
// ame1 = createhuman ;
14884: LD_ADDR_EXP 85
14888: PUSH
14889: CALL_OW 44
14893: ST_TO_ADDR
// placeunitxyr ( ame1 , 58 , 45 , 1 , false ) ;
14894: LD_EXP 85
14898: PPUSH
14899: LD_INT 58
14901: PPUSH
14902: LD_INT 45
14904: PPUSH
14905: LD_INT 1
14907: PPUSH
14908: LD_INT 0
14910: PPUSH
14911: CALL_OW 50
// comhold ( ame1 ) ;
14915: LD_EXP 85
14919: PPUSH
14920: CALL_OW 140
// prepareengineer ( sex_male , ame2_sk ) ;
14924: LD_INT 1
14926: PPUSH
14927: LD_EXP 88
14931: PPUSH
14932: CALL_OW 382
// ame2 = createhuman ;
14936: LD_ADDR_EXP 87
14940: PUSH
14941: CALL_OW 44
14945: ST_TO_ADDR
// placeunitxyr ( ame2 , 86 , 48 , 1 , false ) ;
14946: LD_EXP 87
14950: PPUSH
14951: LD_INT 86
14953: PPUSH
14954: LD_INT 48
14956: PPUSH
14957: LD_INT 1
14959: PPUSH
14960: LD_INT 0
14962: PPUSH
14963: CALL_OW 50
// comhold ( ame2 ) ;
14967: LD_EXP 87
14971: PPUSH
14972: CALL_OW 140
// prepareengineer ( sex_male , ame3_sk ) ;
14976: LD_INT 1
14978: PPUSH
14979: LD_EXP 90
14983: PPUSH
14984: CALL_OW 382
// ame3 = createhuman ;
14988: LD_ADDR_EXP 89
14992: PUSH
14993: CALL_OW 44
14997: ST_TO_ADDR
// placeunitxyr ( ame3 , 96 , 33 , 1 , false ) ;
14998: LD_EXP 89
15002: PPUSH
15003: LD_INT 96
15005: PPUSH
15006: LD_INT 33
15008: PPUSH
15009: LD_INT 1
15011: PPUSH
15012: LD_INT 0
15014: PPUSH
15015: CALL_OW 50
// comhold ( ame3 ) ;
15019: LD_EXP 89
15023: PPUSH
15024: CALL_OW 140
// prepareengineer ( sex_male , ame4_sk ) ;
15028: LD_INT 1
15030: PPUSH
15031: LD_EXP 92
15035: PPUSH
15036: CALL_OW 382
// ame4 = createhuman ;
15040: LD_ADDR_EXP 91
15044: PUSH
15045: CALL_OW 44
15049: ST_TO_ADDR
// placeunitxyr ( ame4 , 81 , 29 , 1 , false ) ;
15050: LD_EXP 91
15054: PPUSH
15055: LD_INT 81
15057: PPUSH
15058: LD_INT 29
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: LD_INT 0
15066: PPUSH
15067: CALL_OW 50
// comhold ( ame4 ) ;
15071: LD_EXP 91
15075: PPUSH
15076: CALL_OW 140
// prepareengineer ( sex_male , ame5_sk ) ;
15080: LD_INT 1
15082: PPUSH
15083: LD_EXP 94
15087: PPUSH
15088: CALL_OW 382
// ame5 = createhuman ;
15092: LD_ADDR_EXP 93
15096: PUSH
15097: CALL_OW 44
15101: ST_TO_ADDR
// placeunitxyr ( ame5 , 93 , 8 , 1 , false ) ;
15102: LD_EXP 93
15106: PPUSH
15107: LD_INT 93
15109: PPUSH
15110: LD_INT 8
15112: PPUSH
15113: LD_INT 1
15115: PPUSH
15116: LD_INT 0
15118: PPUSH
15119: CALL_OW 50
// comhold ( ame5 ) ;
15123: LD_EXP 93
15127: PPUSH
15128: CALL_OW 140
// inzinyri = [ ame0 , ame1 , ame2 , ame3 , ame4 , ame5 ] ;
15132: LD_ADDR_LOC 27
15136: PUSH
15137: LD_EXP 83
15141: PUSH
15142: LD_EXP 85
15146: PUSH
15147: LD_EXP 87
15151: PUSH
15152: LD_EXP 89
15156: PUSH
15157: LD_EXP 91
15161: PUSH
15162: LD_EXP 93
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: ST_TO_ADDR
// comremember ( inzinyri ) ;
15175: LD_LOC 27
15179: PPUSH
15180: CALL_OW 143
// opravujte = [ [ ambunk0 ] , [ ambunk1 , ambunk2 , ambunk3 , ambunk4 ] , [ ambunk5 , ambunk6 , ambunk7 ] , [ ambunk7 , ambunk8 , ambunk9 ] , [ ambarr , ambunka ] , [ ambunkb , ambunkc ] ] ;
15184: LD_ADDR_LOC 25
15188: PUSH
15189: LD_INT 1
15191: PUSH
15192: EMPTY
15193: LIST
15194: PUSH
15195: LD_INT 5
15197: PUSH
15198: LD_INT 15
15200: PUSH
15201: LD_INT 14
15203: PUSH
15204: LD_INT 6
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 7
15215: PUSH
15216: LD_INT 13
15218: PUSH
15219: LD_INT 8
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 8
15229: PUSH
15230: LD_INT 9
15232: PUSH
15233: LD_INT 17
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 26
15243: PUSH
15244: LD_INT 12
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 11
15253: PUSH
15254: LD_INT 10
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: ST_TO_ADDR
// end ;
15269: LD_VAR 0 1
15273: RET
// var opravujte ; var opravujese ; var inzinyri ; every 0 0$3 do var tmp , tmp2 , tmp3 , oprav , buds , lives ;
15274: GO 15276
15276: DISABLE
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
// begin for tmp = 1 to 0 + opravujte do
15285: LD_ADDR_VAR 0 1
15289: PUSH
15290: DOUBLE
15291: LD_INT 1
15293: DEC
15294: ST_TO_ADDR
15295: LD_INT 0
15297: PUSH
15298: LD_LOC 25
15302: PLUS
15303: PUSH
15304: FOR_TO
15305: IFFALSE 15536
// begin buds = [ ] ;
15307: LD_ADDR_VAR 0 5
15311: PUSH
15312: EMPTY
15313: ST_TO_ADDR
// lives = [ ] ;
15314: LD_ADDR_VAR 0 6
15318: PUSH
15319: EMPTY
15320: ST_TO_ADDR
// for tmp2 in opravujte [ tmp ] do
15321: LD_ADDR_VAR 0 2
15325: PUSH
15326: LD_LOC 25
15330: PUSH
15331: LD_VAR 0 1
15335: ARRAY
15336: PUSH
15337: FOR_IN
15338: IFFALSE 15400
// if ( getlives ( tmp2 ) < hranice_zdravi ) then
15340: LD_VAR 0 2
15344: PPUSH
15345: CALL_OW 256
15349: PUSH
15350: LD_INT 1000
15352: LESS
15353: IFFALSE 15398
// begin buds = buds ^ [ tmp2 ] ;
15355: LD_ADDR_VAR 0 5
15359: PUSH
15360: LD_VAR 0 5
15364: PUSH
15365: LD_VAR 0 2
15369: PUSH
15370: EMPTY
15371: LIST
15372: ADD
15373: ST_TO_ADDR
// lives = lives ^ [ getlives ( tmp2 ) ] ;
15374: LD_ADDR_VAR 0 6
15378: PUSH
15379: LD_VAR 0 6
15383: PUSH
15384: LD_VAR 0 2
15388: PPUSH
15389: CALL_OW 256
15393: PUSH
15394: EMPTY
15395: LIST
15396: ADD
15397: ST_TO_ADDR
// end ;
15398: GO 15337
15400: POP
15401: POP
// tmp2 = sortlistbylistasc ( buds , lives ) ;
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: LD_VAR 0 5
15411: PPUSH
15412: LD_VAR 0 6
15416: PPUSH
15417: CALL_OW 76
15421: ST_TO_ADDR
// if tmp2 then
15422: LD_VAR 0 2
15426: IFFALSE 15534
// begin comrepairbuilding ( inzinyri [ tmp ] , tmp2 [ 1 ] ) ;
15428: LD_LOC 27
15432: PUSH
15433: LD_VAR 0 1
15437: ARRAY
15438: PPUSH
15439: LD_VAR 0 2
15443: PUSH
15444: LD_INT 1
15446: ARRAY
15447: PPUSH
15448: CALL_OW 130
// for tmp3 = 2 to 0 + tmp2 do
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: DOUBLE
15458: LD_INT 2
15460: DEC
15461: ST_TO_ADDR
15462: LD_INT 0
15464: PUSH
15465: LD_VAR 0 2
15469: PLUS
15470: PUSH
15471: FOR_TO
15472: IFFALSE 15502
// addcomrepairbuilding ( inzinyri [ tmp ] , tmp2 [ tmp3 ] ) ;
15474: LD_LOC 27
15478: PUSH
15479: LD_VAR 0 1
15483: ARRAY
15484: PPUSH
15485: LD_VAR 0 2
15489: PUSH
15490: LD_VAR 0 3
15494: ARRAY
15495: PPUSH
15496: CALL_OW 190
15500: GO 15471
15502: POP
15503: POP
// addcomreturn ( inzinyri [ tmp ] ) ;
15504: LD_LOC 27
15508: PUSH
15509: LD_VAR 0 1
15513: ARRAY
15514: PPUSH
15515: CALL_OW 204
// addcomhold ( inzinyri [ tmp ] ) ;
15519: LD_LOC 27
15523: PUSH
15524: LD_VAR 0 1
15528: ARRAY
15529: PPUSH
15530: CALL_OW 200
// end ; end ;
15534: GO 15304
15536: POP
15537: POP
// enable ;
15538: ENABLE
// end ; end_of_file
15539: PPOPN 6
15541: END
// every 0 0$2 + 0 0$0.1 do
15542: GO 15544
15544: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
15545: LD_INT 22
15547: PUSH
15548: LD_INT 3
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 2
15557: PUSH
15558: LD_INT 25
15560: PUSH
15561: LD_INT 12
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 25
15570: PUSH
15571: LD_INT 16
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 15
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 25
15590: PUSH
15591: LD_INT 17
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PPUSH
15609: CALL_OW 69
15613: PUSH
15614: LD_INT 22
15616: PUSH
15617: LD_INT 3
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 21
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: LD_INT 2
15639: PUSH
15640: LD_INT 25
15642: PUSH
15643: LD_INT 12
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 25
15652: PUSH
15653: LD_INT 16
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 25
15662: PUSH
15663: LD_INT 15
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 25
15672: PUSH
15673: LD_INT 17
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: GREATER
15701: IFFALSE 15712
// begin SetAchievement ( ACH_POTA ) ;
15703: LD_STRING ACH_POTA
15705: PPUSH
15706: CALL_OW 543
// exit ;
15710: GO 15713
// end ; enable ;
15712: ENABLE
// end ;
15713: END
