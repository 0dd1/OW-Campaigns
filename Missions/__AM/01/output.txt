// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin am = 1 ;
   0: LD_ADDR_LOC 1
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// oth = 4 ;
   8: LD_ADDR_LOC 2
  12: PUSH
  13: LD_INT 4
  15: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  16: LD_LOC 1
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: CALL_OW 332
// debug = false ;
  28: LD_ADDR_LOC 19
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// follow = true ;
  36: LD_ADDR_LOC 20
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// joanok = true ;
  44: LD_ADDR_LOC 13
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// oothersok = true ;
  52: LD_ADDR_LOC 14
  56: PUSH
  57: LD_INT 1
  59: ST_TO_ADDR
// buildingsok = true ;
  60: LD_ADDR_LOC 15
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// killhim = false ;
  68: LD_ADDR_LOC 16
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  76: LD_ADDR_LOC 12
  80: PUSH
  81: LD_INT 9
  83: PUSH
  84: LD_INT 10
  86: PUSH
  87: LD_INT 11
  89: PUSH
  90: LD_INT 8
  92: PUSH
  93: LD_INT 12
  95: PUSH
  96: LD_INT 13
  98: PUSH
  99: LD_INT 14
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// disable ( 01 ) ;
 111: LD_INT 1
 113: DISABLE_MARKED
// disable ( 02 ) ;
 114: LD_INT 2
 116: DISABLE_MARKED
// disable ( 03 ) ;
 117: LD_INT 3
 119: DISABLE_MARKED
// disable ( 04 ) ;
 120: LD_INT 4
 122: DISABLE_MARKED
// disable ( 05 ) ;
 123: LD_INT 5
 125: DISABLE_MARKED
// disable_07 = false ;
 126: LD_ADDR_LOC 18
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// uc_side = am ;
 134: LD_ADDR_OWVAR 20
 138: PUSH
 139: LD_LOC 1
 143: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 144: LD_ADDR_LOC 3
 148: PUSH
 149: LD_STRING JMM
 151: PPUSH
 152: CALL_OW 25
 156: ST_TO_ADDR
// uc_side = oth ;
 157: LD_ADDR_OWVAR 20
 161: PUSH
 162: LD_LOC 2
 166: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 167: LD_ADDR_LOC 4
 171: PUSH
 172: LD_STRING Joan
 174: PPUSH
 175: CALL_OW 25
 179: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 180: LD_ADDR_LOC 6
 184: PUSH
 185: LD_STRING Donaldson
 187: PPUSH
 188: CALL_OW 25
 192: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 193: LD_ADDR_LOC 7
 197: PUSH
 198: LD_STRING Gary
 200: PPUSH
 201: CALL_OW 25
 205: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 206: LD_ADDR_LOC 5
 210: PUSH
 211: LD_STRING Sikorski
 213: PPUSH
 214: CALL_OW 25
 218: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 219: LD_ADDR_LOC 8
 223: PUSH
 224: LD_STRING Williams
 226: PPUSH
 227: CALL_OW 25
 231: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 232: LD_ADDR_LOC 9
 236: PUSH
 237: LD_STRING Phillips
 239: PPUSH
 240: CALL_OW 25
 244: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 245: LD_ADDR_LOC 10
 249: PUSH
 250: LD_STRING Officer
 252: PPUSH
 253: CALL_OW 25
 257: ST_TO_ADDR
// others = [ lucy , grant , sik , will , phi ] ;
 258: LD_ADDR_LOC 11
 262: PUSH
 263: LD_LOC 6
 267: PUSH
 268: LD_LOC 7
 272: PUSH
 273: LD_LOC 5
 277: PUSH
 278: LD_LOC 8
 282: PUSH
 283: LD_LOC 9
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: ST_TO_ADDR
// placeunitxy ( off , 52 , 39 , false ) ;
 295: LD_LOC 10
 299: PPUSH
 300: LD_INT 52
 302: PPUSH
 303: LD_INT 39
 305: PPUSH
 306: LD_INT 0
 308: PPUSH
 309: CALL_OW 48
// placeunitxyr ( lucy , 47 , 38 , 3 , false ) ;
 313: LD_LOC 6
 317: PPUSH
 318: LD_INT 47
 320: PPUSH
 321: LD_INT 38
 323: PPUSH
 324: LD_INT 3
 326: PPUSH
 327: LD_INT 0
 329: PPUSH
 330: CALL_OW 50
// placeunitxyr ( grant , 47 , 38 , 3 , false ) ;
 334: LD_LOC 7
 338: PPUSH
 339: LD_INT 47
 341: PPUSH
 342: LD_INT 38
 344: PPUSH
 345: LD_INT 3
 347: PPUSH
 348: LD_INT 0
 350: PPUSH
 351: CALL_OW 50
// placeunitxyr ( sik , 47 , 38 , 3 , false ) ;
 355: LD_LOC 5
 359: PPUSH
 360: LD_INT 47
 362: PPUSH
 363: LD_INT 38
 365: PPUSH
 366: LD_INT 3
 368: PPUSH
 369: LD_INT 0
 371: PPUSH
 372: CALL_OW 50
// placeunitxyr ( will , 47 , 38 , 3 , false ) ;
 376: LD_LOC 8
 380: PPUSH
 381: LD_INT 47
 383: PPUSH
 384: LD_INT 38
 386: PPUSH
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 50
// placeunitxyr ( phi , 47 , 38 , 3 , false ) ;
 397: LD_LOC 9
 401: PPUSH
 402: LD_INT 47
 404: PPUSH
 405: LD_INT 38
 407: PPUSH
 408: LD_INT 3
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: CALL_OW 50
// comhold ( others ^ [ off ] ) ;
 418: LD_LOC 11
 422: PUSH
 423: LD_LOC 10
 427: PUSH
 428: EMPTY
 429: LIST
 430: ADD
 431: PPUSH
 432: CALL_OW 140
// placeunitxy ( john , 24 , 26 , false ) ;
 436: LD_LOC 3
 440: PPUSH
 441: LD_INT 24
 443: PPUSH
 444: LD_INT 26
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 48
// placeunitxy ( joan , 25 , 24 , false ) ;
 454: LD_LOC 4
 458: PPUSH
 459: LD_INT 25
 461: PPUSH
 462: LD_INT 24
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 472: LD_LOC 4
 476: PUSH
 477: LD_LOC 3
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 140
// centernowonunits ( john ) ;
 490: LD_LOC 3
 494: PPUSH
 495: CALL_OW 87
// dialogueon ;
 499: CALL_OW 6
// say ( off , DX1-Off-1 ) ;
 503: LD_LOC 10
 507: PPUSH
 508: LD_STRING DX1-Off-1
 510: PPUSH
 511: CALL_OW 88
// say ( john , DX1-JMM-1 ) ;
 515: LD_LOC 3
 519: PPUSH
 520: LD_STRING DX1-JMM-1
 522: PPUSH
 523: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 527: LD_LOC 4
 531: PPUSH
 532: LD_STRING DX1-Joan-1
 534: PPUSH
 535: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 539: LD_LOC 3
 543: PPUSH
 544: LD_STRING DX1-JMM-2
 546: PPUSH
 547: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 551: LD_LOC 4
 555: PPUSH
 556: LD_STRING DX1-Joan-2
 558: PPUSH
 559: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 563: LD_LOC 3
 567: PPUSH
 568: LD_STRING DX1-JMM-3
 570: PPUSH
 571: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 575: LD_LOC 4
 579: PPUSH
 580: LD_STRING DX1-Joan-3
 582: PPUSH
 583: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 587: LD_LOC 3
 591: PPUSH
 592: LD_STRING DX1-JMM-4
 594: PPUSH
 595: CALL_OW 88
// dialogueoff ;
 599: CALL_OW 7
// commovexy ( others , 75 , 35 ) ;
 603: LD_LOC 11
 607: PPUSH
 608: LD_INT 75
 610: PPUSH
 611: LD_INT 35
 613: PPUSH
 614: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 618: LD_LOC 10
 622: PPUSH
 623: LD_INT 71
 625: PPUSH
 626: LD_INT 34
 628: PPUSH
 629: CALL_OW 111
// wait ( 0 0$0.3 ) ;
 633: LD_INT 10
 635: PPUSH
 636: CALL_OW 67
// changemissionobjectives ( M0 ) ;
 640: LD_STRING M0
 642: PPUSH
 643: CALL_OW 337
// hintSpec ( Hints , 3 ) ;
 647: LD_STRING Hints
 649: PPUSH
 650: LD_INT 3
 652: PPUSH
 653: CALL_OW 338
// wait ( 0 0$1 ) ;
 657: LD_INT 35
 659: PPUSH
 660: CALL_OW 67
// hint ( Character ) ;
 664: LD_STRING Character
 666: PPUSH
 667: CALL_OW 339
// wait ( 0 0$1 ) ;
 671: LD_INT 35
 673: PPUSH
 674: CALL_OW 67
// enable ( 01 ) ;
 678: LD_INT 1
 680: ENABLE_MARKED
// enable ( 02 ) ;
 681: LD_INT 2
 683: ENABLE_MARKED
// enable ( 03 ) ;
 684: LD_INT 3
 686: ENABLE_MARKED
// enable ( 04 ) ;
 687: LD_INT 4
 689: ENABLE_MARKED
// enable ( 05 ) ;
 690: LD_INT 5
 692: ENABLE_MARKED
// end ;
 693: END
// every 3 trigger isselected ( john ) marked 01 do
 694: LD_LOC 3
 698: PPUSH
 699: CALL_OW 306
 703: IFFALSE 729
 705: GO 707
 707: DISABLE
// begin hint ( Selection ) ;
 708: LD_STRING Selection
 710: PPUSH
 711: CALL_OW 339
// wait ( 0 0$1 ) ;
 715: LD_INT 35
 717: PPUSH
 718: CALL_OW 67
// hint ( Commands ) ;
 722: LD_STRING Commands
 724: PPUSH
 725: CALL_OW 339
// end ;
 729: END
// every 3 + 1 trigger isselected ( others ^ [ joan , off ] ) marked 02 do
 730: LD_LOC 11
 734: PUSH
 735: LD_LOC 4
 739: PUSH
 740: LD_LOC 10
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: ADD
 749: PPUSH
 750: CALL_OW 306
 754: IFFALSE 766
 756: GO 758
 758: DISABLE
// hint ( NPC ) ;
 759: LD_STRING NPC
 761: PPUSH
 762: CALL_OW 339
 766: END
// every 5 trigger isinarea ( john , vis ) marked 03 do
 767: LD_LOC 3
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL_OW 308
 779: IFFALSE 791
 781: GO 783
 783: DISABLE
// hint ( Visibility ) ;
 784: LD_STRING Visibility
 786: PPUSH
 787: CALL_OW 339
 791: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
 792: LD_LOC 16
 796: NOT
 797: PUSH
 798: LD_LOC 20
 802: AND
 803: IFFALSE 1096
 805: GO 807
 807: DISABLE
 808: LD_INT 0
 810: PPUSH
 811: PPUSH
 812: PPUSH
 813: PPUSH
 814: PPUSH
 815: PPUSH
 816: PPUSH
 817: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
 818: LD_ADDR_VAR 0 1
 822: PUSH
 823: LD_LOC 3
 827: PPUSH
 828: LD_LOC 4
 832: PPUSH
 833: CALL_OW 296
 837: ST_TO_ADDR
// x = getx ( john ) ;
 838: LD_ADDR_VAR 0 4
 842: PUSH
 843: LD_LOC 3
 847: PPUSH
 848: CALL_OW 250
 852: ST_TO_ADDR
// y = gety ( john ) ;
 853: LD_ADDR_VAR 0 5
 857: PUSH
 858: LD_LOC 3
 862: PPUSH
 863: CALL_OW 251
 867: ST_TO_ADDR
// tmp2 = [ ] ;
 868: LD_ADDR_VAR 0 2
 872: PUSH
 873: EMPTY
 874: ST_TO_ADDR
// tmp3 = [ ] ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: EMPTY
 881: ST_TO_ADDR
// if tmp >= 7 then
 882: LD_VAR 0 1
 886: PUSH
 887: LD_INT 7
 889: GREATEREQUAL
 890: IFFALSE 1095
// begin for dir = 0 to 5 do
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: DOUBLE
 898: LD_INT 0
 900: DEC
 901: ST_TO_ADDR
 902: LD_INT 5
 904: PUSH
 905: FOR_TO
 906: IFFALSE 1046
// begin px = shiftx ( x , dir , tmp - 2 ) ;
 908: LD_ADDR_VAR 0 6
 912: PUSH
 913: LD_VAR 0 4
 917: PPUSH
 918: LD_VAR 0 8
 922: PPUSH
 923: LD_VAR 0 1
 927: PUSH
 928: LD_INT 2
 930: MINUS
 931: PPUSH
 932: CALL_OW 272
 936: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
 937: LD_ADDR_VAR 0 7
 941: PUSH
 942: LD_VAR 0 5
 946: PPUSH
 947: LD_VAR 0 8
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 2
 959: MINUS
 960: PPUSH
 961: CALL_OW 273
 965: ST_TO_ADDR
// if ValidHex ( px , py ) then
 966: LD_VAR 0 6
 970: PPUSH
 971: LD_VAR 0 7
 975: PPUSH
 976: CALL_OW 488
 980: IFFALSE 1044
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
 982: LD_ADDR_VAR 0 2
 986: PUSH
 987: LD_VAR 0 2
 991: PUSH
 992: LD_VAR 0 6
 996: PUSH
 997: LD_VAR 0 7
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: ADD
1009: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1010: LD_ADDR_VAR 0 3
1014: PUSH
1015: LD_VAR 0 3
1019: PUSH
1020: LD_LOC 4
1024: PPUSH
1025: LD_VAR 0 6
1029: PPUSH
1030: LD_VAR 0 7
1034: PPUSH
1035: CALL_OW 297
1039: PUSH
1040: EMPTY
1041: LIST
1042: ADD
1043: ST_TO_ADDR
// end end ;
1044: GO 905
1046: POP
1047: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1048: LD_ADDR_VAR 0 1
1052: PUSH
1053: LD_VAR 0 2
1057: PPUSH
1058: LD_VAR 0 3
1062: PPUSH
1063: CALL_OW 79
1067: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1068: LD_LOC 4
1072: PPUSH
1073: LD_VAR 0 1
1077: PUSH
1078: LD_INT 1
1080: ARRAY
1081: PPUSH
1082: LD_VAR 0 1
1086: PUSH
1087: LD_INT 2
1089: ARRAY
1090: PPUSH
1091: CALL_OW 111
// end ; enable ;
1095: ENABLE
// end ;
1096: PPOPN 8
1098: END
// on destinationunreachable ( un ) do if un = joan then
1099: LD_VAR 0 1
1103: PUSH
1104: LD_LOC 4
1108: EQUAL
1109: IFFALSE 1140
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1111: LD_LOC 4
1115: PPUSH
1116: LD_LOC 3
1120: PPUSH
1121: CALL_OW 250
1125: PPUSH
1126: LD_LOC 3
1130: PPUSH
1131: CALL_OW 251
1135: PPUSH
1136: CALL_OW 111
1140: PPOPN 1
1142: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1143: LD_LOC 3
1147: PPUSH
1148: CALL_OW 318
1152: IFFALSE 1176
1154: GO 1156
1156: DISABLE
// begin if not killhim then
1157: LD_LOC 16
1161: NOT
1162: IFFALSE 1176
// say ( joan , DXComments-Joan-1 ) ;
1164: LD_LOC 4
1168: PPUSH
1169: LD_STRING DXComments-Joan-1
1171: PPUSH
1172: CALL_OW 88
// end ;
1176: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1177: LD_LOC 3
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 308
1189: IFFALSE 1213
1191: GO 1193
1193: DISABLE
// begin if not killhim then
1194: LD_LOC 16
1198: NOT
1199: IFFALSE 1213
// say ( joan , DXComments-Joan-1a ) ;
1201: LD_LOC 4
1205: PPUSH
1206: LD_STRING DXComments-Joan-1a
1208: PPUSH
1209: CALL_OW 88
// end ;
1213: END
// every 0 0$1 + 1 1$10 marked 29 do
1214: GO 1216
1216: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1217: LD_LOC 3
1221: PPUSH
1222: LD_INT 3
1224: PPUSH
1225: CALL_OW 308
1229: NOT
1230: IFFALSE 1253
// begin if not killhim then
1232: LD_LOC 16
1236: NOT
1237: IFFALSE 1251
// say ( joan , DXComments-Joan-1b ) ;
1239: LD_LOC 4
1243: PPUSH
1244: LD_STRING DXComments-Joan-1b
1246: PPUSH
1247: CALL_OW 88
// end else
1251: GO 1254
// enable ;
1253: ENABLE
// end ;
1254: END
// every 0 0$0.3 trigger not killhim marked 097 do
1255: LD_LOC 16
1259: NOT
1260: IFFALSE 1766
1262: GO 1264
1264: DISABLE
// begin if joanok then
1265: LD_LOC 13
1269: IFFALSE 1450
// if getlives ( joan ) < 1000 then
1271: LD_LOC 4
1275: PPUSH
1276: CALL_OW 256
1280: PUSH
1281: LD_INT 1000
1283: LESS
1284: IFFALSE 1450
// begin if debug then
1286: LD_LOC 19
1290: IFFALSE 1310
// msg ( joan:  & getlives ( joan ) ) ;
1292: LD_STRING joan: 
1294: PUSH
1295: LD_LOC 4
1299: PPUSH
1300: CALL_OW 256
1304: STR
1305: PPUSH
1306: CALL_OW 100
// comhold ( joan ) ;
1310: LD_LOC 4
1314: PPUSH
1315: CALL_OW 140
// dialogueon ;
1319: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1323: LD_LOC 4
1327: PPUSH
1328: LD_STRING DXAttack-Joan-1
1330: PPUSH
1331: CALL_OW 88
// killhim = true ;
1335: LD_ADDR_LOC 16
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// SA_OnAttackFriends ;
1343: CALL 2419 0 0
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1347: LD_LOC 4
1351: PPUSH
1352: LD_LOC 5
1356: PPUSH
1357: CALL_OW 250
1361: PPUSH
1362: LD_LOC 5
1366: PPUSH
1367: CALL_OW 251
1371: PPUSH
1372: CALL_OW 111
// wait ( 0 0$1 ) ;
1376: LD_INT 35
1378: PPUSH
1379: CALL_OW 67
// say ( sik , DXAttack-Sik-1 ) ;
1383: LD_LOC 5
1387: PPUSH
1388: LD_STRING DXAttack-Sik-1
1390: PPUSH
1391: CALL_OW 88
// dialogueoff ;
1395: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1399: LD_LOC 1
1403: PPUSH
1404: LD_LOC 2
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: CALL_OW 80
// comattackunit ( others ^ [ off ] , john ) ;
1419: LD_LOC 11
1423: PUSH
1424: LD_LOC 10
1428: PUSH
1429: EMPTY
1430: LIST
1431: ADD
1432: PPUSH
1433: LD_LOC 3
1437: PPUSH
1438: CALL_OW 115
// joanok = false ;
1442: LD_ADDR_LOC 13
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// end ; if oothersok then
1450: LD_LOC 14
1454: IFFALSE 1633
// if getlives ( others ^ [ off ] ) < 1000 then
1456: LD_LOC 11
1460: PUSH
1461: LD_LOC 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: ADD
1469: PPUSH
1470: CALL_OW 256
1474: PUSH
1475: LD_INT 1000
1477: LESS
1478: IFFALSE 1633
// begin if debug then
1480: LD_LOC 19
1484: IFFALSE 1513
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1486: LD_STRING others+off: 
1488: PUSH
1489: LD_LOC 11
1493: PUSH
1494: LD_LOC 10
1498: PUSH
1499: EMPTY
1500: LIST
1501: ADD
1502: PPUSH
1503: CALL_OW 256
1507: STR
1508: PPUSH
1509: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1513: LD_LOC 11
1517: PUSH
1518: LD_LOC 10
1522: PUSH
1523: EMPTY
1524: LIST
1525: ADD
1526: PPUSH
1527: CALL_OW 140
// dialogueon ;
1531: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1535: LD_LOC 4
1539: PPUSH
1540: LD_STRING DXAttack-Joan-1a
1542: PPUSH
1543: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1547: LD_INT 24
1549: PPUSH
1550: CALL_OW 67
// killhim = true ;
1554: LD_ADDR_LOC 16
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// SA_OnAttackFriends ;
1562: CALL 2419 0 0
// say ( sik , DXAttack-Sik-1 ) ;
1566: LD_LOC 5
1570: PPUSH
1571: LD_STRING DXAttack-Sik-1
1573: PPUSH
1574: CALL_OW 88
// dialogueoff ;
1578: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1582: LD_LOC 1
1586: PPUSH
1587: LD_LOC 2
1591: PPUSH
1592: LD_INT 2
1594: PPUSH
1595: LD_INT 1
1597: PPUSH
1598: CALL_OW 80
// comattackunit ( others ^ [ off ] , john ) ;
1602: LD_LOC 11
1606: PUSH
1607: LD_LOC 10
1611: PUSH
1612: EMPTY
1613: LIST
1614: ADD
1615: PPUSH
1616: LD_LOC 3
1620: PPUSH
1621: CALL_OW 115
// oothersok = false ;
1625: LD_ADDR_LOC 14
1629: PUSH
1630: LD_INT 0
1632: ST_TO_ADDR
// end ; if buildingsok then
1633: LD_LOC 15
1637: IFFALSE 1758
// if getlives ( budovy ) < 1000 then
1639: LD_LOC 12
1643: PPUSH
1644: CALL_OW 256
1648: PUSH
1649: LD_INT 1000
1651: LESS
1652: IFFALSE 1758
// begin if debug then
1654: LD_LOC 19
1658: IFFALSE 1678
// msg ( budovy:  & getlives ( budovy ) ) ;
1660: LD_STRING budovy: 
1662: PUSH
1663: LD_LOC 12
1667: PPUSH
1668: CALL_OW 256
1672: STR
1673: PPUSH
1674: CALL_OW 100
// dialogueon ;
1678: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
1682: LD_LOC 4
1686: PPUSH
1687: LD_STRING DXAttack-Joan-1b
1689: PPUSH
1690: CALL_OW 88
// dialogueoff ;
1694: CALL_OW 7
// follow = false ;
1698: LD_ADDR_LOC 20
1702: PUSH
1703: LD_INT 0
1705: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1706: LD_LOC 4
1710: PPUSH
1711: LD_LOC 5
1715: PPUSH
1716: CALL_OW 250
1720: PPUSH
1721: LD_LOC 5
1725: PPUSH
1726: CALL_OW 251
1730: PPUSH
1731: CALL_OW 111
// buildingsok = false ;
1735: LD_ADDR_LOC 15
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
1743: LD_ADDR_LOC 17
1747: PUSH
1748: LD_LOC 12
1752: PPUSH
1753: CALL_OW 256
1757: ST_TO_ADDR
// end ; if not killhim then
1758: LD_LOC 16
1762: NOT
1763: IFFALSE 1766
// enable ;
1765: ENABLE
// end ;
1766: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
1767: LD_LOC 15
1771: NOT
1772: PUSH
1773: LD_LOC 16
1777: NOT
1778: AND
1779: IFFALSE 1892
1781: GO 1783
1783: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
1784: LD_LOC 17
1788: PUSH
1789: LD_LOC 12
1793: PPUSH
1794: CALL_OW 256
1798: MINUS
1799: PUSH
1800: LD_INT 7
1802: GREATER
1803: IFFALSE 1891
// begin disable ( 097 ) ;
1805: LD_INT 97
1807: DISABLE_MARKED
// disable_07 = true ;
1808: LD_ADDR_LOC 18
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// dialogueon ;
1816: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
1820: LD_LOC 5
1824: PPUSH
1825: LD_STRING DXAttack-Sik-1
1827: PPUSH
1828: CALL_OW 88
// dialogueoff ;
1832: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1836: LD_LOC 1
1840: PPUSH
1841: LD_LOC 2
1845: PPUSH
1846: LD_INT 2
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL_OW 80
// comattackunit ( others ^ [ off ] , john ) ;
1856: LD_LOC 11
1860: PUSH
1861: LD_LOC 10
1865: PUSH
1866: EMPTY
1867: LIST
1868: ADD
1869: PPUSH
1870: LD_LOC 3
1874: PPUSH
1875: CALL_OW 115
// killhim = true ;
1879: LD_ADDR_LOC 16
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// SA_OnAttackFriends ;
1887: CALL 2419 0 0
// end ; enable ;
1891: ENABLE
// end ;
1892: END
// on unitgoestored ( un ) do if un = john then
1893: LD_VAR 0 1
1897: PUSH
1898: LD_LOC 3
1902: EQUAL
1903: IFFALSE 1970
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
1905: LD_LOC 10
1909: PPUSH
1910: LD_LOC 3
1914: PPUSH
1915: CALL_OW 250
1919: PPUSH
1920: LD_LOC 3
1924: PPUSH
1925: CALL_OW 251
1929: PPUSH
1930: CALL_OW 111
// wait ( 0 0$1 ) ;
1934: LD_INT 35
1936: PPUSH
1937: CALL_OW 67
// dialogueon ;
1941: CALL_OW 6
// say ( off , DXAttack-Off-1 ) ;
1945: LD_LOC 10
1949: PPUSH
1950: LD_STRING DXAttack-Off-1
1952: PPUSH
1953: CALL_OW 88
// dialogueoff ;
1957: CALL_OW 7
// youlost ( Dissmiss ) ;
1961: LD_STRING Dissmiss
1963: PPUSH
1964: CALL_OW 104
// end else
1968: GO 2084
// if not disable_07 then
1970: LD_LOC 18
1974: NOT
1975: IFFALSE 2084
// if ( not killhim ) then
1977: LD_LOC 16
1981: NOT
1982: IFFALSE 2084
// if ( gettype ( un ) = unit_human ) then
1984: LD_VAR 0 1
1988: PPUSH
1989: CALL_OW 247
1993: PUSH
1994: LD_INT 1
1996: EQUAL
1997: IFFALSE 2084
// begin disable ( 06 ) ;
1999: LD_INT 6
2001: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2002: LD_INT 18
2004: PPUSH
2005: CALL_OW 67
// dialogueon ;
2009: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
2013: LD_LOC 5
2017: PPUSH
2018: LD_STRING DXAttack-Sik-1
2020: PPUSH
2021: CALL_OW 88
// dialogueoff ;
2025: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2029: LD_LOC 1
2033: PPUSH
2034: LD_LOC 2
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: CALL_OW 80
// comattackunit ( others ^ [ off ] , john ) ;
2049: LD_LOC 11
2053: PUSH
2054: LD_LOC 10
2058: PUSH
2059: EMPTY
2060: LIST
2061: ADD
2062: PPUSH
2063: LD_LOC 3
2067: PPUSH
2068: CALL_OW 115
// killhim = true ;
2072: LD_ADDR_LOC 16
2076: PUSH
2077: LD_INT 1
2079: ST_TO_ADDR
// SA_OnAttackFriends ;
2080: CALL 2419 0 0
// end ;
2084: PPOPN 1
2086: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2087: LD_LOC 3
2091: PPUSH
2092: LD_INT 4
2094: PPUSH
2095: CALL_OW 308
2099: PUSH
2100: LD_LOC 16
2104: NOT
2105: AND
2106: IFFALSE 2298
2108: GO 2110
2110: DISABLE
// begin follow = false ;
2111: LD_ADDR_LOC 20
2115: PUSH
2116: LD_INT 0
2118: ST_TO_ADDR
// centernowonunits ( [ eon ] ) ;
2119: LD_INT 14
2121: PUSH
2122: EMPTY
2123: LIST
2124: PPUSH
2125: CALL_OW 87
// dialogueon ;
2129: CALL_OW 6
// say ( off , DXReady-Off-1 ) ;
2133: LD_LOC 10
2137: PPUSH
2138: LD_STRING DXReady-Off-1
2140: PPUSH
2141: CALL_OW 88
// say ( sik , DXReady-Sik-1 ) ;
2145: LD_LOC 5
2149: PPUSH
2150: LD_STRING DXReady-Sik-1
2152: PPUSH
2153: CALL_OW 88
// say ( lucy , DXReady-Don-1 ) ;
2157: LD_LOC 6
2161: PPUSH
2162: LD_STRING DXReady-Don-1
2164: PPUSH
2165: CALL_OW 88
// dialogueoff ;
2169: CALL_OW 7
// ingameon ;
2173: CALL_OW 8
// comstop ( john ) ;
2177: LD_LOC 3
2181: PPUSH
2182: CALL_OW 141
// comenterunit ( sik , eon ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_INT 14
2193: PPUSH
2194: CALL_OW 120
// wait ( 0 0$1.5 ) ;
2198: LD_INT 52
2200: PPUSH
2201: CALL_OW 67
// comenterunit ( lucy , eon ) ;
2205: LD_LOC 6
2209: PPUSH
2210: LD_INT 14
2212: PPUSH
2213: CALL_OW 120
// wait ( 0 0$2 ) ;
2217: LD_INT 70
2219: PPUSH
2220: CALL_OW 67
// case query ( QQuit ) of 1 :
2224: LD_STRING QQuit
2226: PPUSH
2227: CALL_OW 97
2231: PUSH
2232: LD_INT 1
2234: DOUBLE
2235: EQUAL
2236: IFTRUE 2240
2238: GO 2255
2240: POP
// begin SA_OnNotEonEnter ;
2241: CALL 2449 0 0
// ingameoff ;
2245: CALL_OW 9
// YouDidSomethingExtraordinary ;
2249: CALL_OW 105
// end ; 2 :
2253: GO 2298
2255: LD_INT 2
2257: DOUBLE
2258: EQUAL
2259: IFTRUE 2263
2261: GO 2297
2263: POP
// begin SA_OnEonEnter ;
2264: CALL 2434 0 0
// disable ( 29 ) ;
2268: LD_INT 29
2270: DISABLE_MARKED
// say ( john , DQrQuit#2-JMM-1 ) ;
2271: LD_LOC 3
2275: PPUSH
2276: LD_STRING DQrQuit#2-JMM-1
2278: PPUSH
2279: CALL_OW 88
// comenterunit ( john , eon ) ;
2283: LD_LOC 3
2287: PPUSH
2288: LD_INT 14
2290: PPUSH
2291: CALL_OW 120
// end ; end ;
2295: GO 2298
2297: POP
// end ;
2298: END
// on enterbuilding ( b , un ) do begin if b = eon then
2299: LD_VAR 0 1
2303: PUSH
2304: LD_INT 14
2306: EQUAL
2307: IFFALSE 2416
// case un of john :
2309: LD_VAR 0 2
2313: PUSH
2314: LD_LOC 3
2318: DOUBLE
2319: EQUAL
2320: IFTRUE 2324
2322: GO 2406
2324: POP
// if not killhim then
2325: LD_LOC 16
2329: NOT
2330: IFFALSE 2363
// begin wait ( 0 0$1.3 ) ;
2332: LD_INT 46
2334: PPUSH
2335: CALL_OW 67
// savecharacters ( john , JMM ) ;
2339: LD_LOC 3
2343: PPUSH
2344: LD_STRING JMM
2346: PPUSH
2347: CALL_OW 38
// changemap ( 1 , %_cont ) ;
2351: LD_STRING 1
2353: PPUSH
2354: LD_STRING %_cont
2356: PPUSH
2357: CALL_OW 340
// end else
2361: GO 2404
// begin placeunitxy ( john , 76 , 34 , false ) ;
2363: LD_LOC 3
2367: PPUSH
2368: LD_INT 76
2370: PPUSH
2371: LD_INT 34
2373: PPUSH
2374: LD_INT 0
2376: PPUSH
2377: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
2381: LD_LOC 11
2385: PUSH
2386: LD_LOC 10
2390: PUSH
2391: EMPTY
2392: LIST
2393: ADD
2394: PPUSH
2395: LD_LOC 3
2399: PPUSH
2400: CALL_OW 115
// end ; else
2404: GO 2416
2406: POP
// RemoveUnit ( un ) ; end ;
2407: LD_VAR 0 2
2411: PPUSH
2412: CALL_OW 64
// end ; end_of_file
2416: PPOPN 2
2418: END
// export function SA_OnAttackFriends ; begin
2419: LD_INT 0
2421: PPUSH
// SetAchievement ( ACH_MAD ) ;
2422: LD_STRING ACH_MAD
2424: PPUSH
2425: CALL_OW 543
// end ;
2429: LD_VAR 0 1
2433: RET
// export function SA_OnEonEnter ; begin
2434: LD_INT 0
2436: PPUSH
// SetAchievement ( ACH_EON ) ;
2437: LD_STRING ACH_EON
2439: PPUSH
2440: CALL_OW 543
// end ;
2444: LD_VAR 0 1
2448: RET
// export function SA_OnNotEonEnter ; begin
2449: LD_INT 0
2451: PPUSH
// SetAchievement ( ACH_CF ) ;
2452: LD_STRING ACH_CF
2454: PPUSH
2455: CALL_OW 543
// end ;
2459: LD_VAR 0 1
2463: RET
