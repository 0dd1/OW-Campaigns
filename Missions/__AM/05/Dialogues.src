export all, other, used;
export Gamma2;
export Gamma2Commander;
export you;
export Lisa,Cyrus,Bobby,Frank,Donaldson,Brown;
export JMM,Gladstone,Harisson;
export nic_nerikaji;
export car1, car2, car3, car4, car5;

starting
begin
     you:=1;
     load;
     dialogue;
     save;
     ChangeMap('%_cont','%_cont');
end;

function load;
var i, tmp, blds;
begin
    InitUc;
    InitHc;
    InitVc;
    uc_side:=you;
    uc_nation:=nation_american;

    JMM:=CreateCharacter('JMM');
    Gladstone:=NewCharacter('Gladstone');
    Harisson:=NewCharacter('Harisson');

    if TestCharacters('otherGamma2') then
      other:=CreateCharacterSet('otherGamma2')
    else
      other:=[];

    // potreba na kecani
    PrepareEngineer(1,-3);
    other:=other^CreateHuman;

    Lisa:=0;
    if CheckCharacterSet('Lisa') then
      if LoadVariable('LisaLoc', 0)=2 then
          Lisa:=CreateCharacter('Lisa');
    Cyrus:=0;
    if CheckCharacterSet('Cyrus') then
      if LoadVariable('CyrusLoc', 0)=2 then
          Cyrus:=CreateCharacter('Cyrus');
    Bobby:=0;
    if CheckCharacterSet('Bobby') then
      if LoadVariable('BobbyLoc', 0)=2 then
          Bobby:=CreateCharacter('Bobby');
    Frank:=0;
    if CheckCharacterSet('Frank') then
      if LoadVariable('FrankLoc', 0)=2 then
          Frank:=CreateCharacter('Frank');
    Donaldson:=0;
    if CheckCharacterSet('Donaldson') then
      if LoadVariable('DonaldsonLoc', 0)=2 then
        Donaldson:=CreateCharacter('Donaldson');
    Brown:=0;
    if CheckCharacterSet('Brown') then
      if LoadVariable('BrownLoc', 0)=2 then
        Brown:=CreateCharacter('Brown');
    all:=([Lisa,Cyrus,Bobby,Frank,Donaldson,Brown] diff [0])^other;

  //jeste promena Gamma2 - schileny seznam budov
  //prvky jsou seznamy tvaru [x,y,direction,building_type,level]
    Gamma2:=LoadVariable('Gamma2',[]);
    blds:=[];
    for i in Gamma2 do begin
      if not InArea(i[1], i[2], prostor) then begin
        bc_type:=i[4];
        bc_level:=i[5];
        uc_nation:=i[6];
        case bc_type of
             b_lab,b_lab_half,b_lab_full: begin
                                             bc_kind1:=i[7];
                                             bc_kind2:=i[8];
                                          end;
        end;
        tmp:=CreateAndPlaceBuildingXYD(i[1], i[2], i[3]);
        if GetBType(tmp)=b_bunker or GetBType(tmp)=b_turret then
          PlaceWeaponTurret(tmp, i[7]);
        if GetBType(tmp)=b_depot or GetBType(tmp)=b_warehouse then
          SetBName(tmp,'gamma');
        blds:=blds^tmp;
      end;
    end;

    for i in all do begin
        PlaceUnitXYR(i, 45,10,15,false);
    end;
    vc_chassis:=us_light_wheeled;
    vc_weapon:=us_machine_gun;
    vc_control:=control_manual;
    vc_engine:=engine_solar;
    vc_fuel_battery:=100;
    Car3:=CreateVehicle;
    Car4:=CreateVehicle;
    PlaceUnitXYR(Car3, 50,10,5, false);
    PlaceUnitXYR(Car4, 50,10,5,false);
    vc_weapon:=us_cargo_bay;
    Car5:=CreateVehicle;
    SetCargo(Car5, mat_cans, 100);
    PlaceUnitXYR(Car5, 50,10,10,false);

    vc_chassis:=us_light_wheeled;
    vc_weapon:=us_machine_gun;
    vc_control:=control_manual;
    vc_engine:=engine_combustion;
    vc_fuel_battery:=30;
    Car1:=CreateVehicle;
    Car2:=CreateVehicle;
    PlaceHumanInUnit(JMM, Car1);
    PlaceHumanInUnit(Gladstone, Car2);
    SetDir(Car1,1);
    SetDir(Car2,1);
    PlaceUnitXYR(Car1, 33,26,6,false);
    PlaceUnitXYR(Car2, 33,26,6,false);
{    PlaceUnitXYR(Car1, 14,1,6,false);
    PlaceUnitXYR(Car2, 14,1,6,false);
    ComMoveXY([car1, car2],23,10);
    AddComMoveXY([car1, car2],28,20);
    AddComMoveXY([car1, car2],33,26);}
    AddComMoveXY([car1, car2],42,27);
    AddComMoveXY([car1, car2],53,24);
    AddComMoveXY([car1, car2],52,17);
end;

function dialogue;
var qr, sol1, i, mytick, mechs, sols;
begin
     nic_nerikaji:=other;

     InGameOn;
     mytick:=tick+0$13;
     while tick<mytick and GetDistUnitXY(Car1, 48,15)>8 do begin
        CenterOnUnits(car1);
        wait(0$3);
     end;
     while UnitsInside(car1)^UnitsInside(car2) do begin
       ComExitVehicle([car1, car2]);
       wait(0$1);
     end;
     wait(0$2);
     AddComRemember(all_units);
     AddComMoveXY(JMM,46,15);

     CenterOnXY(48,14);
     sol1:=WhoSayAny(nic_nerikaji, you, sex_male, 0, 0);
     AddComMoveUnit([Lisa, Frank, sol1], JMM);
     AddComMoveXY(Gladstone,46,15);

     wait(0$3);
     ComHold(JMM);

     if Lisa then      Say(Lisa, 'D1-Lisa-1');
                       SayAny(nic_nerikaji, 'D1-Sol1-1', you, sex_male, 0, 0);
                       Say(JMM, 'D1-JMM-1');
                       Say(JMM, 'D1-JMM-1a');
     if Frank then     Say(Frank, 'D1-Frank-1')
              else
              if Lisa then
                       Say(Lisa, 'D1-Lisa-2')
                 else  SayAny(nic_nerikaji, 'D1-Sol1-2', you, sex_male, 0, 0);
                       Say(Gladstone, 'D1-Glad-2');
                       Say(JMM, 'D1-JMM-2');

                       Say(Gladstone, 'D1-Glad-3');
                       Say(JMM, 'D1-JMM-3');
                       Say(Gladstone, 'D1-Glad-4');
     if Frank then     Say(Frank, 'D1-Frank-4');
                       Say(JMM, 'D1-JMM-4');
     if Lisa then begin
                    if Say(Lisa, 'D1-Lisa-4') then
                       if Frank then
                          Say(Frank, 'D1-Frank-5');
     end
     else              SayAny(nic_nerikaji, 'D1-Sol1-5', you, sex_male, 0, 0);

                       Say(JMM, 'D1-JMM-5');
                       Say(Gladstone, 'D1-Glad-5');
     if Frank then     Say(Frank, 'D1-Frank-6');
                       Say(JMM, 'D1-JMM-6');

     if Brown and Donaldson then begin
         qr:=Query('QCommander');
     end
     else begin
         qr:=3;
         if Donaldson then
            qr:=1;
         if Brown then
            qr:=2;
     end;
     case qr of
        1: begin
           Say(JMM, 'D1a-JMM-1');
           ComMoveUnit(Donaldson, JMM);
           AddComHold(Donaldson);
           Say(Donaldson, 'D1a-Don-1');
           Say(JMM, 'D1a-JMM-2');
           Say(Donaldson, 'D1a-Don-2');
           wait(0$2);
           ComReturn(Donaldson);
        end;
        2: begin
           Say(JMM, 'D1b-JMM-1');
           ComMoveUnit(Brown, JMM);
           AddComHold(Brown);
           Say(Brown, 'D1b-Brown-1');
           Say(JMM, 'D1b-JMM-2');
           Say(Brown, 'D1b-Brown-2');
           wait(0$2);
           ComReturn(Brown);
        end;
        3: begin
           Say(JMM, 'D1c-JMM-1');
        end;
     end;
     Say(JMM, 'D1d-JMM-1');
     Gamma2Commander:=qr;

     InitUc;
     InitHc;
     InitVc;
     uc_side:=you;
     uc_nation:=nation_american;

//character selecion
     all:=all diff [Donaldson, Brown, 0][qr];

     for i:=all+1 to 12 do begin
         uc_side:=you;
         PrepareHuman(0,0,Rand(-2,-4));
         all:=all^CreateHuman;
     end;

     if qr=1 then
       used:=CharacterSelection('1',5,5,
                [sel_change_class,JMM,
                sel_dont_change_class,Gladstone,
                sel_not_hired,sel_changeable,sel_change_class]^all^
                [sel_dont_change_class,sel_not_changeable,Donaldson],
                [class_soldier, class_mechanic, [class_engineer,1], class_scientistic]);
     if qr=2 then
       used:=CharacterSelection('1',5,5,
                [sel_change_class,JMM,
                sel_dont_change_class,Gladstone,
                sel_not_hired,sel_changeable,sel_change_class]^all^
                [sel_dont_change_class,sel_not_changeable,Brown],
                [class_soldier, class_mechanic, [class_engineer,1], class_scientistic]);
     if qr=3 then
       used:=CharacterSelection('1',5,5,
                [sel_change_class,JMM,sel_dont_change_class,Gladstone,sel_changeable,sel_change_class,sel_not_hired]^all,
                [class_soldier, class_mechanic, [class_engineer,1], class_scientistic]);

     used:=[JMM,Gladstone]^used;
     ComStop(all_units);
     mechs:=UnitFilter(used, [[f_class, class_mechanic]]);
     sols:=UnitFilter(used, [[f_class, class_soldier]]);
     used:=mechs^sols^(used diff (mechs^sols));
     ComEnterUnit(used[1], Car1);
     ComEnterUnit(used[2], Car2);
     ComEnterUnit(used[3], Car5);
     ComHold(Car5);
     mytick:=tick+0$20;
     while mytick<tick and (UnitsInside(car1) ^ UnitsInside(car2) ^ UnitsInside(car5))<3 do
        wait(0$1);

     ComMoveXY(used^[car1,car2,car5], 74,28);
     AddComMoveXY(used^[car1,car2,car5], 92,25);
     while mytick<tick and GetDistUnitXY(Car1, 92,25)>14 and GetDistUnitXY(Car2, 92,25)>14 and GetDistUnitXY(Car3, 92,25)>14 do begin
        CenterOnUnits(Car1);
        wait(0$3);
     end;
     InGameOff;
end;


function save;
begin
    SaveVariable(Gamma2Commander, 'Gamma2Commander');
    SaveCharacters(other diff used, 'otherGamma2');
    SaveCharacters(used diff [JMM, Gladstone, Lisa, Cyrus, Bobby, Frank, Donaldson, Brown, 0], 'otherDelta');

    SaveCharacters(JMM, 'JMM');
    SaveCharacters(Harisson, 'Harisson');
    SaveCharacters(Gladstone, 'Gladstone');
//Lisa,Cyrus,Bobby,Frank,Donaldson,Brown;
//JMM,Gladstone,Harisson;
    if Lisa in used then SaveVariable(3, 'LisaLoc');
    if Lisa then SaveCharacters(Lisa, 'Lisa');

    if Cyrus in used then SaveVariable(3, 'CyrusLoc');
    if Cyrus then SaveCharacters(Cyrus, 'Cyrus');

    if Bobby in used then SaveVariable(3, 'BobbyLoc');
    if Bobby then SaveCharacters(Bobby, 'Bobby');

    if Frank in used then SaveVariable(3, 'FrankLoc');
    if Frank then SaveCharacters(Frank, 'Frank');

    if Donaldson in used then SaveVariable(3, 'DonaldsonLoc');
    if Donaldson then SaveCharacters(Donaldson, 'Donaldson');

    if Brown in used then SaveVariable(3, 'BrownLoc');
    if Brown then SaveCharacters(Brown, 'Brown');
end;


//vynecha apemany
//vybere prvniho z skupiny lidi se zadanym pohlavim sex (0=obe)
//a zadanym Hclass (0=jakykoliv)
export function SayAny(lidi, ident, side, sex, Hclass, index);
var kdo;
begin
     kdo:=WhoSayAny(lidi, side, sex, Hclass, index);
     if kdo then
        result:=Say(kdo, ident)
     else
        result:=false;
end;
export function WhoSayAny(lidi, side, sex, Hclass, index);
begin
     lidi:=UnitFilter(lidi, [[f_type,unit_human],[f_side,side],f_not,[f_nation,nation_nature]]);
     if sex<>0 then
        lidi:=UnitFilter(lidi, [f_sex,sex]);

     if Hclass<>0 then
        lidi:=UnitFilter(lidi, [f_class,Hclass]);

     if index<=0 then index:=1;

     if lidi>=index then
        result:=lidi[index]
     else
        result:=0;
end;

