// export JMM , Powell , Bobby , Cyrus , Lisa , Frank , Brown , Donaldson , Gladstone , Cornell ; export Denis , Joan , Kurt , Yamoko , Gary , Simms , Stevens , Coonie , Burlak , Roth ; export Friend , Kozlov , Baker , VanHouten , Vsevolod , Platonov , Kovaljuk ; export Omar , Heike ; export OtherWithJMM , OtherNotJMM ; export legion_cheated , kappa_saved , woman_saved , kappa_delayed , Woman_in_am14 ; export JMM_woman , Woman_alive , Initial_JMM_vehicle , Initial_Woman_vehicle ; export BobbyLoc , CyrusLoc , LisaLoc , FrankLoc , BrownLoc , DonaldsonLoc ; export VanHoutenLoc , GladstoneLoc , JoanLoc , YamokoLoc ; export GaryLoc , DenisLoc , CornellLoc ; export Roth_Captured ; export Russian_project_canceled ; export No_Looses ; export JMM_veh , Woman_veh ; export Am1_vehicles ; export Captured_vehicles ; export All_americans , Named_americans ; export Remaining_Named , Remaining_Powells , Carriers ; export End_of_journey ; export JMM_Helpers ; export CenterJMM ; export Number_of_JMM_Helpers ; export True_Americans ; export Not_True_Americans ; export Omar_Soldiers ; export Omar_Scientists ; export Omar_Vehicles ; export Number_of_Omar_Soldiers ; export Number_of_Omar_Hovercrafts ; export Number_of_Omar_Flamethrowers ; export Number_of_Omar_RocketLaunchers ; export All_arabians ; export Arabian_soldiers ; export Arabian_Engineers ; export Arabian_scientists ; export Arabian_mechanics ; export Arabian_apemens ; export Control_Driver ; export Arabian_Outside ; export New_ArRu_Fact ; export Arabian_buildings ; export Number_of_Arabian_Soldiers ; export Number_of_Arabian_scientists ; export Number_of_Arabian_mechanics ; export Number_of_Arabian_Engineers ; export All_alliances ; export Alliance_rus_soldiers ; export Alliance_am_soldiers ; export Alliance_rus_scientists ; export Alliance_am_scientists ; export Alliance_Explorers ; export Captured_Units_of_Alliance ; export Explorer1 , Explorer2 ; export Alliance_Doctors ; export Number_of_AllAm_Soldiers ; export Number_of_AllAm_Scientists ; export Number_of_AllRu_Soldiers ; export Number_of_AllRu_Scientists ; export Russian_soldiers ; export Russian_scientists ; export Russian_engineers ; export Russian_mechanics ; export All_russians ; export Rus_doctors ; export Russian_Buildings ; export R1_Attack_Time ; export R_attack_time ; export R1_Attack_counter ; export R_Attack_counter ; export R1_Attack_group ; export Main_R1_Attack_group ; export Main_R_Attack_Group ; export R_Attack_Group ; export New_Patrol_Group , R1Patrol_group ; export R_Patrol_group ; export R_Constructed_Attack ; export R_Constructed_Patrol ; export Behemot_Engineers ; export Russian_Behemots ; export New_Behemots ; export Rus_Attack_Time ; export R_New_Attack ; export R_New_Patrol ; export Number_of_russian_soldiers ; export Number_of_russian_scientists ; export Number_of_russian_mechanics ; export Number_of_russian_engineers ; export First_JMM_Task ; export out_of_base ; export Great_ingame_video ; export R1_attack ; export Protect_Powell ; export Talk_Bomba ; export Center_on_fight ; export JMM_Is_Ready ; export Ingame_Run_over ; export Game_Continue ; export Vsevolod_Comes ; export Woman_Comes ; export Matherlod_Contamined1 ; export Matherlod_Contamined2 ; export Matherlod_Contamined3 ; export Alliance_Captured ; export Explorers_Can_Go ; export Not_End_of_Alliance ; export JMM_has_surrounded ; export Friend_Escapes ; export Not_Ingame_Run_over ; export End_of_m ; export Timer ; export JMM_Captured ; export Map_am_base , Map_rus_attack , Send_Helpers ; export Start_Am1_Base ; export Send_Material ; export Capture_JMM_Vehicles ; export First_Powells_Attack ; export Second_Powells_Attack ; export Run_JMM_Vehicles ; export Rus1_Attack ; export Rus_Attack ; export Retreat_Report ; export JMM_Talk ; export Send_Arabian_Back ; export Link_Bombs ; export americans , americans1 , russians , russians1 , arabians , arabians1 , alliance , Explorers_Side ; export human_difficulty_skill , apeman_difficulty_skill ; export Skip ; export Powell_Warning ; export Warning_Time ; export Time_of_Ingame_Run_Over ; export First_ingame_done ; export R1_Attack_Overflow ; export Powell_vehicle ; export Powell_Attack_Counter ; export Center_To_Powell ; export Debug_Constant ; export R1_Attack_Continues ; export Number_of_crates ; export Construction_of_Arabian_rocket ; export Number_of_Arabian_rocket ; export Stevens_Coming_Time ; export Woman_Coming_Time ; export Alliance_broadcast ; export Behemots_broadcast ; export Time_of_first_capture ; export Really_Kurt ; export Time_of_capturing ; export Alliance_def_buildings ; export Way_of_Explorers ; export Step_On_The_Way ; export Explorer_Way_Number ; export Number_of_captured_americans ; export Alaskite_Bomb_Time ; export Arabian_siberite_attack_time ; export R_Attack_Overflow ; export Russian_Siberite_Attack ; export Russian_Siberite_rockets ; export Time_to_Think_Over ; export The_Last_Time ; export Friend_Accepted ; export Friend_Escaped ; export Number_of_Behemots ; export Time_Of_Crates ; export Number_of_complete_Behemots ; export Behemot_Places ; export Behemot_attack_time ; export Friend_has_come ; export The_Last_Arabian_Attack_Begun ; export Friend_has_to_escape ; export Wood_registry ; export Add_Legion_Objectives ; export Starting_Construction_Time ; export Heike_Last_Words ; export Joan_semafor ; export Arabian_reg_id ; export Arabian_def_id ; export Arabian_build_id ; export Russian1_reg_id ; export Russian1_att_id ; export Russian1_reg1_id ; export Russian1_patr_id ; export Russian_reg_id ; export Russian_att_id ; export Russian_patr_id ; export Russian_reg_def_id ; export Russian_def_id ; export Russian_build_id ; export Alliance_reg_id ; export Alliance_def_id ; export Alliance_wood_reg_id ; function Set_variables ; begin
   0: LD_INT 0
   2: PPUSH
// CenterJMM = false ;
   3: LD_ADDR_EXP 68
   7: PUSH
   8: LD_INT 0
  10: ST_TO_ADDR
// End_of_journey = false ;
  11: LD_ADDR_EXP 66
  15: PUSH
  16: LD_INT 0
  18: ST_TO_ADDR
// Skip = false ;
  19: LD_ADDR_EXP 186
  23: PUSH
  24: LD_INT 0
  26: ST_TO_ADDR
// Captured_vehicles = [ ] ;
  27: LD_ADDR_EXP 60
  31: PUSH
  32: EMPTY
  33: ST_TO_ADDR
// R1_Attack_time = 0 ;
  34: LD_ADDR_EXP 114
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// R1_Attack_counter = 0 ;
  42: LD_ADDR_EXP 116
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// R1_Attack_group = [ ] ;
  50: LD_ADDR_EXP 118
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// Main_R1_Attack_group = [ ] ;
  57: LD_ADDR_EXP 119
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// Main_R_Attack_Group = [ ] ;
  64: LD_ADDR_EXP 120
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// Powell_warning = 0 ;
  71: LD_ADDR_EXP 187
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// Warning_Time = 0 ;
  79: LD_ADDR_EXP 188
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// Time_of_Ingame_Run_Over = 100 100$0 ;
  87: LD_ADDR_EXP 189
  91: PUSH
  92: LD_INT 210000
  94: ST_TO_ADDR
// First_ingame_done = false ;
  95: LD_ADDR_EXP 190
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// Rus_doctors = [ ] ;
 103: LD_ADDR_EXP 112
 107: PUSH
 108: EMPTY
 109: ST_TO_ADDR
// R1_Attack_Overflow = 0 ;
 110: LD_ADDR_EXP 191
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// New_Patrol_Group = 0 ;
 118: LD_ADDR_EXP 122
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// R1Patrol_group = 0 ;
 126: LD_ADDR_EXP 123
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// R_Patrol_group = 0 ;
 134: LD_ADDR_EXP 124
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// Arabian_Outside = 0 ;
 142: LD_ADDR_EXP 86
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// Powell_vehicle = 0 ;
 150: LD_ADDR_EXP 192
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// Powell_Attack_Counter = 1 ;
 158: LD_ADDR_EXP 193
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Center_To_Powell = false ;
 166: LD_ADDR_EXP 194
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// R1_Attack_Continues = false ;
 174: LD_ADDR_EXP 196
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// New_ArRu_Fact = 0 ;
 182: LD_ADDR_EXP 87
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Construction_of_Arabian_rocket = false ;
 190: LD_ADDR_EXP 198
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// Number_of_Arabian_rocket = 1 ;
 198: LD_ADDR_EXP 199
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// Alliance_def_buildings = [ AllT1 , AllT2 , AllT3 , AllT4 , AllT5 , AllT7 , AllT8 ] ;
 206: LD_ADDR_EXP 207
 210: PUSH
 211: LD_INT 50
 213: PUSH
 214: LD_INT 54
 216: PUSH
 217: LD_INT 51
 219: PUSH
 220: LD_INT 52
 222: PUSH
 223: LD_INT 53
 225: PUSH
 226: LD_INT 38
 228: PUSH
 229: LD_INT 44
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: ST_TO_ADDR
// True_Americans = [ ] ;
 241: LD_ADDR_EXP 70
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// Not_True_Americans = [ ] ;
 248: LD_ADDR_EXP 71
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// Roth_Captured = false ;
 255: LD_ADDR_EXP 54
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// Russian_project_canceled = true ;
 263: LD_ADDR_EXP 55
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// No_Looses = true ;
 271: LD_ADDR_EXP 56
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// Captured_Units_of_Alliance = [ ] ;
 279: LD_ADDR_EXP 99
 283: PUSH
 284: EMPTY
 285: ST_TO_ADDR
// Way_of_Explorers = [ [ [ 183 , 160 ] , [ 142 , 131 ] , [ 120 , 104 ] , [ 95 , 71 ] , [ 78 , 62 ] ] , [ [ 182 , 155 ] , [ 173 , 136 ] , [ 156 , 94 ] , [ 126 , 73 ] , [ 95 , 71 ] , [ 78 , 62 ] ] ] ;
 286: LD_ADDR_EXP 208
 290: PUSH
 291: LD_INT 183
 293: PUSH
 294: LD_INT 160
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 142
 303: PUSH
 304: LD_INT 131
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 120
 313: PUSH
 314: LD_INT 104
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 95
 323: PUSH
 324: LD_INT 71
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 78
 333: PUSH
 334: LD_INT 62
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 182
 350: PUSH
 351: LD_INT 155
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: LD_INT 173
 360: PUSH
 361: LD_INT 136
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: LD_INT 156
 370: PUSH
 371: LD_INT 94
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 126
 380: PUSH
 381: LD_INT 73
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 95
 390: PUSH
 391: LD_INT 71
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 78
 400: PUSH
 401: LD_INT 62
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: ST_TO_ADDR
// Explorer1 = 0 ;
 420: LD_ADDR_EXP 100
 424: PUSH
 425: LD_INT 0
 427: ST_TO_ADDR
// Explorer2 = 0 ;
 428: LD_ADDR_EXP 101
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// Step_On_The_Way = 1 ;
 436: LD_ADDR_EXP 209
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// Explorer_Way_Number = 1 ;
 444: LD_ADDR_EXP 210
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// Number_of_captured_americans = 0 ;
 452: LD_ADDR_EXP 211
 456: PUSH
 457: LD_INT 0
 459: ST_TO_ADDR
// R_Attack_Group = [ ] ;
 460: LD_ADDR_EXP 121
 464: PUSH
 465: EMPTY
 466: ST_TO_ADDR
// R_Attack_Overflow = 0 ;
 467: LD_ADDR_EXP 214
 471: PUSH
 472: LD_INT 0
 474: ST_TO_ADDR
// R_Constructed_Attack = [ ] ;
 475: LD_ADDR_EXP 125
 479: PUSH
 480: EMPTY
 481: ST_TO_ADDR
// R_Constructed_Patrol = [ ] ;
 482: LD_ADDR_EXP 126
 486: PUSH
 487: EMPTY
 488: ST_TO_ADDR
// Russian_Siberite_Attack = false ;
 489: LD_ADDR_EXP 215
 493: PUSH
 494: LD_INT 0
 496: ST_TO_ADDR
// Russian_Siberite_rockets = [ RR1 ] ;
 497: LD_ADDR_EXP 216
 501: PUSH
 502: LD_INT 146
 504: PUSH
 505: EMPTY
 506: LIST
 507: ST_TO_ADDR
// Time_to_Think_Over = 0 ;
 508: LD_ADDR_EXP 217
 512: PUSH
 513: LD_INT 0
 515: ST_TO_ADDR
// The_Last_Time = 0 ;
 516: LD_ADDR_EXP 218
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// Friend_Accepted = false ;
 524: LD_ADDR_EXP 219
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// Friend_Escaped = false ;
 532: LD_ADDR_EXP 220
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// Time_Of_Crates = 0 ;
 540: LD_ADDR_EXP 222
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// Behemot_Engineers = [ ] ;
 548: LD_ADDR_EXP 127
 552: PUSH
 553: EMPTY
 554: ST_TO_ADDR
// Behemot_Places = [ [ 191 , 117 ] , [ 194 , 124 ] , [ 197 , 117 ] , [ 200 , 122 ] , [ 203 , 118 ] , [ 206 , 126 ] , [ 210 , 127 ] , [ 208 , 122 ] , [ 213 , 124 ] ] ;
 555: LD_ADDR_EXP 224
 559: PUSH
 560: LD_INT 191
 562: PUSH
 563: LD_INT 117
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 194
 572: PUSH
 573: LD_INT 124
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 197
 582: PUSH
 583: LD_INT 117
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 200
 592: PUSH
 593: LD_INT 122
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 203
 602: PUSH
 603: LD_INT 118
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 206
 612: PUSH
 613: LD_INT 126
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 210
 622: PUSH
 623: LD_INT 127
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 208
 632: PUSH
 633: LD_INT 122
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 213
 642: PUSH
 643: LD_INT 124
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: ST_TO_ADDR
// Number_of_complete_Behemots = 0 ;
 661: LD_ADDR_EXP 223
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// Russian_Behemots = [ ] ;
 669: LD_ADDR_EXP 128
 673: PUSH
 674: EMPTY
 675: ST_TO_ADDR
// New_Behemots = [ ] ;
 676: LD_ADDR_EXP 129
 680: PUSH
 681: EMPTY
 682: ST_TO_ADDR
// JMM_Helpers = [ ] ;
 683: LD_ADDR_EXP 67
 687: PUSH
 688: EMPTY
 689: ST_TO_ADDR
// R_New_Attack = [ ] ;
 690: LD_ADDR_EXP 131
 694: PUSH
 695: EMPTY
 696: ST_TO_ADDR
// R_New_Patrol = [ ] ;
 697: LD_ADDR_EXP 132
 701: PUSH
 702: EMPTY
 703: ST_TO_ADDR
// Friend_has_come = false ;
 704: LD_ADDR_EXP 226
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// The_Last_Arabian_Attack_Begun = false ;
 712: LD_ADDR_EXP 227
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// Friend_has_to_escape = false ;
 720: LD_ADDR_EXP 228
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// Wood_registry = false ;
 728: LD_ADDR_EXP 229
 732: PUSH
 733: LD_INT 0
 735: ST_TO_ADDR
// Add_Legion_Objectives = false ;
 736: LD_ADDR_EXP 230
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// Starting_Construction_Time = 0 ;
 744: LD_ADDR_EXP 231
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// Heike_Last_Words = false ;
 752: LD_ADDR_EXP 232
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// Joan_semafor = false ;
 760: LD_ADDR_EXP 233
 764: PUSH
 765: LD_INT 0
 767: ST_TO_ADDR
// Arabian_reg_id = - 1 ;
 768: LD_ADDR_EXP 234
 772: PUSH
 773: LD_INT 1
 775: NEG
 776: ST_TO_ADDR
// Arabian_def_id = - 1 ;
 777: LD_ADDR_EXP 235
 781: PUSH
 782: LD_INT 1
 784: NEG
 785: ST_TO_ADDR
// Russian1_reg_id = - 1 ;
 786: LD_ADDR_EXP 237
 790: PUSH
 791: LD_INT 1
 793: NEG
 794: ST_TO_ADDR
// Russian1_att_id = - 1 ;
 795: LD_ADDR_EXP 238
 799: PUSH
 800: LD_INT 1
 802: NEG
 803: ST_TO_ADDR
// Russian1_reg1_id = - 1 ;
 804: LD_ADDR_EXP 239
 808: PUSH
 809: LD_INT 1
 811: NEG
 812: ST_TO_ADDR
// Russian1_patr_id = - 1 ;
 813: LD_ADDR_EXP 240
 817: PUSH
 818: LD_INT 1
 820: NEG
 821: ST_TO_ADDR
// Russian_reg_def_id = - 1 ;
 822: LD_ADDR_EXP 244
 826: PUSH
 827: LD_INT 1
 829: NEG
 830: ST_TO_ADDR
// Russian_def_id = - 1 ;
 831: LD_ADDR_EXP 245
 835: PUSH
 836: LD_INT 1
 838: NEG
 839: ST_TO_ADDR
// Russian_reg_id = - 1 ;
 840: LD_ADDR_EXP 241
 844: PUSH
 845: LD_INT 1
 847: NEG
 848: ST_TO_ADDR
// Russian_att_id = - 1 ;
 849: LD_ADDR_EXP 242
 853: PUSH
 854: LD_INT 1
 856: NEG
 857: ST_TO_ADDR
// Russian_patr_id = - 1 ;
 858: LD_ADDR_EXP 243
 862: PUSH
 863: LD_INT 1
 865: NEG
 866: ST_TO_ADDR
// Russian_build_id = - 1 ;
 867: LD_ADDR_EXP 246
 871: PUSH
 872: LD_INT 1
 874: NEG
 875: ST_TO_ADDR
// Alliance_reg_id = - 1 ;
 876: LD_ADDR_EXP 247
 880: PUSH
 881: LD_INT 1
 883: NEG
 884: ST_TO_ADDR
// Alliance_def_id = - 1 ;
 885: LD_ADDR_EXP 248
 889: PUSH
 890: LD_INT 1
 892: NEG
 893: ST_TO_ADDR
// Alliance_wood_reg_id = - 1 ;
 894: LD_ADDR_EXP 249
 898: PUSH
 899: LD_INT 1
 901: NEG
 902: ST_TO_ADDR
// legion_cheated = LoadVariable ( legion_cheated , true ) ;
 903: LD_ADDR_EXP 32
 907: PUSH
 908: LD_STRING legion_cheated
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL_OW 30
 918: ST_TO_ADDR
// kappa_saved = LoadVariable ( kappa_saved , false ) ;
 919: LD_ADDR_EXP 33
 923: PUSH
 924: LD_STRING kappa_saved
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL_OW 30
 934: ST_TO_ADDR
// kappa_delayed = LoadVariable ( kappa_delayed , true ) ;
 935: LD_ADDR_EXP 35
 939: PUSH
 940: LD_STRING kappa_delayed
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: CALL_OW 30
 950: ST_TO_ADDR
// Woman_alive = LoadVariable ( woman_alive , false ) ;
 951: LD_ADDR_EXP 38
 955: PUSH
 956: LD_STRING woman_alive
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 30
 966: ST_TO_ADDR
// Initial_JMM_vehicle = LoadVariable ( veh_jmm , 0 ) ;
 967: LD_ADDR_EXP 39
 971: PUSH
 972: LD_STRING veh_jmm
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: ST_TO_ADDR
// Initial_Woman_vehicle = LoadVariable ( veh_surv , 0 ) ;
 983: LD_ADDR_EXP 40
 987: PUSH
 988: LD_STRING veh_surv
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 30
 998: ST_TO_ADDR
// Woman_in_am14 = LoadVariable ( woman_in_am14 , 1 ) ;
 999: LD_ADDR_EXP 36
1003: PUSH
1004: LD_STRING woman_in_am14
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 30
1014: ST_TO_ADDR
// if Initial_Woman_vehicle > 0 then
1015: LD_EXP 40
1019: PUSH
1020: LD_INT 0
1022: GREATER
1023: IFFALSE 1035
// Woman_saved = true else
1025: LD_ADDR_EXP 34
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
1033: GO 1043
// Woman_saved = false ;
1035: LD_ADDR_EXP 34
1039: PUSH
1040: LD_INT 0
1042: ST_TO_ADDR
// americans = 1 ;
1043: LD_ADDR_EXP 176
1047: PUSH
1048: LD_INT 1
1050: ST_TO_ADDR
// americans1 = 4 ;
1051: LD_ADDR_EXP 177
1055: PUSH
1056: LD_INT 4
1058: ST_TO_ADDR
// russians = 3 ;
1059: LD_ADDR_EXP 178
1063: PUSH
1064: LD_INT 3
1066: ST_TO_ADDR
// russians1 = 6 ;
1067: LD_ADDR_EXP 179
1071: PUSH
1072: LD_INT 6
1074: ST_TO_ADDR
// arabians = 8 ;
1075: LD_ADDR_EXP 180
1079: PUSH
1080: LD_INT 8
1082: ST_TO_ADDR
// arabians1 = 2 ;
1083: LD_ADDR_EXP 181
1087: PUSH
1088: LD_INT 2
1090: ST_TO_ADDR
// alliance = 7 ;
1091: LD_ADDR_EXP 182
1095: PUSH
1096: LD_INT 7
1098: ST_TO_ADDR
// Explorers_Side = 5 ;
1099: LD_ADDR_EXP 183
1103: PUSH
1104: LD_INT 5
1106: ST_TO_ADDR
// uc_side := americans1 ;
1107: LD_ADDR_OWVAR 20
1111: PUSH
1112: LD_EXP 177
1116: ST_TO_ADDR
// OtherWithJMM = CreateCharacterSet ( OtherWithJMM ) ;
1117: LD_ADDR_EXP 30
1121: PUSH
1122: LD_STRING OtherWithJMM
1124: PPUSH
1125: CALL_OW 31
1129: ST_TO_ADDR
// OtherNotJMM = CreateCharacterSet ( OtherNotJMM ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING OtherNotJMM
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// BobbyLoc = LoadVariable ( BobbyLoc , 1 ) ;
1143: LD_ADDR_EXP 41
1147: PUSH
1148: LD_STRING BobbyLoc
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: CALL_OW 30
1158: ST_TO_ADDR
// CyrusLoc = LoadVariable ( CyrusLoc , 1 ) ;
1159: LD_ADDR_EXP 42
1163: PUSH
1164: LD_STRING CyrusLoc
1166: PPUSH
1167: LD_INT 1
1169: PPUSH
1170: CALL_OW 30
1174: ST_TO_ADDR
// LisaLoc = LoadVariable ( LisaLoc , 1 ) ;
1175: LD_ADDR_EXP 43
1179: PUSH
1180: LD_STRING LisaLoc
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: CALL_OW 30
1190: ST_TO_ADDR
// FrankLoc = LoadVariable ( FrankLoc , 1 ) ;
1191: LD_ADDR_EXP 44
1195: PUSH
1196: LD_STRING FrankLoc
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 30
1206: ST_TO_ADDR
// BrownLoc = LoadVariable ( BrownLoc , 1 ) ;
1207: LD_ADDR_EXP 45
1211: PUSH
1212: LD_STRING BrownLoc
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: CALL_OW 30
1222: ST_TO_ADDR
// DonaldsonLoc = LoadVariable ( DonaldsonLoc , 1 ) ;
1223: LD_ADDR_EXP 46
1227: PUSH
1228: LD_STRING DonaldsonLoc
1230: PPUSH
1231: LD_INT 1
1233: PPUSH
1234: CALL_OW 30
1238: ST_TO_ADDR
// VanHoutenLoc = LoadVariable ( VanHoutenLoc , 1 ) ;
1239: LD_ADDR_EXP 47
1243: PUSH
1244: LD_STRING VanHoutenLoc
1246: PPUSH
1247: LD_INT 1
1249: PPUSH
1250: CALL_OW 30
1254: ST_TO_ADDR
// GladstoneLoc = LoadVariable ( GladstoneLoc , 1 ) ;
1255: LD_ADDR_EXP 48
1259: PUSH
1260: LD_STRING GladstoneLoc
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 30
1270: ST_TO_ADDR
// JoanLoc = LoadVariable ( JoanLoc , 1 ) ;
1271: LD_ADDR_EXP 49
1275: PUSH
1276: LD_STRING JoanLoc
1278: PPUSH
1279: LD_INT 1
1281: PPUSH
1282: CALL_OW 30
1286: ST_TO_ADDR
// YamokoLoc = LoadVariable ( YamokoLoc , 1 ) ;
1287: LD_ADDR_EXP 50
1291: PUSH
1292: LD_STRING YamokoLoc
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL_OW 30
1302: ST_TO_ADDR
// GaryLoc = LoadVariable ( GaryLoc , 1 ) ;
1303: LD_ADDR_EXP 51
1307: PUSH
1308: LD_STRING GaryLoc
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: CALL_OW 30
1318: ST_TO_ADDR
// DenisLoc = LoadVariable ( DenisLoc , 1 ) ;
1319: LD_ADDR_EXP 52
1323: PUSH
1324: LD_STRING DenisLoc
1326: PPUSH
1327: LD_INT 1
1329: PPUSH
1330: CALL_OW 30
1334: ST_TO_ADDR
// CornellLoc = LoadVariable ( CornellLoc , 1 ) ;
1335: LD_ADDR_EXP 53
1339: PUSH
1340: LD_STRING CornellLoc
1342: PPUSH
1343: LD_INT 1
1345: PPUSH
1346: CALL_OW 30
1350: ST_TO_ADDR
// Map_am_base = 1 ;
1351: LD_ADDR_EXP 161
1355: PUSH
1356: LD_INT 1
1358: ST_TO_ADDR
// Map_rus_attack = 2 ;
1359: LD_ADDR_EXP 162
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// Send_Helpers = 3 ;
1367: LD_ADDR_EXP 163
1371: PUSH
1372: LD_INT 3
1374: ST_TO_ADDR
// Send_Material = 4 ;
1375: LD_ADDR_EXP 165
1379: PUSH
1380: LD_INT 4
1382: ST_TO_ADDR
// Capture_JMM_Vehicles = 5 ;
1383: LD_ADDR_EXP 166
1387: PUSH
1388: LD_INT 5
1390: ST_TO_ADDR
// First_Powells_Attack = 6 ;
1391: LD_ADDR_EXP 167
1395: PUSH
1396: LD_INT 6
1398: ST_TO_ADDR
// Second_Powells_Attack = 7 ;
1399: LD_ADDR_EXP 168
1403: PUSH
1404: LD_INT 7
1406: ST_TO_ADDR
// Run_JMM_Vehicles = 8 ;
1407: LD_ADDR_EXP 169
1411: PUSH
1412: LD_INT 8
1414: ST_TO_ADDR
// Rus1_Attack = 9 ;
1415: LD_ADDR_EXP 170
1419: PUSH
1420: LD_INT 9
1422: ST_TO_ADDR
// Retreat_Report = 10 ;
1423: LD_ADDR_EXP 172
1427: PUSH
1428: LD_INT 10
1430: ST_TO_ADDR
// JMM_Talk = 11 ;
1431: LD_ADDR_EXP 173
1435: PUSH
1436: LD_INT 11
1438: ST_TO_ADDR
// Send_Arabian_Back = 12 ;
1439: LD_ADDR_EXP 174
1443: PUSH
1444: LD_INT 12
1446: ST_TO_ADDR
// Link_Bombs = 13 ;
1447: LD_ADDR_EXP 175
1451: PUSH
1452: LD_INT 13
1454: ST_TO_ADDR
// Rus_Attack = 14 ;
1455: LD_ADDR_EXP 171
1459: PUSH
1460: LD_INT 14
1462: ST_TO_ADDR
// JMM_Is_Ready = 15 ;
1463: LD_ADDR_EXP 144
1467: PUSH
1468: LD_INT 15
1470: ST_TO_ADDR
// First_JMM_Task = 1 ;
1471: LD_ADDR_EXP 137
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// disable ( First_JMM_Task ) ;
1479: LD_EXP 137
1483: DISABLE_MARKED
// out_of_base = 2 ;
1484: LD_ADDR_EXP 138
1488: PUSH
1489: LD_INT 2
1491: ST_TO_ADDR
// disable ( out_of_base ) ;
1492: LD_EXP 138
1496: DISABLE_MARKED
// Great_ingame_video = 3 ;
1497: LD_ADDR_EXP 139
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// disable ( Great_ingame_video ) ;
1505: LD_EXP 139
1509: DISABLE_MARKED
// R1_attack = 4 ;
1510: LD_ADDR_EXP 140
1514: PUSH
1515: LD_INT 4
1517: ST_TO_ADDR
// disable ( R1_attack ) ;
1518: LD_EXP 140
1522: DISABLE_MARKED
// Protect_Powell = 5 ;
1523: LD_ADDR_EXP 141
1527: PUSH
1528: LD_INT 5
1530: ST_TO_ADDR
// disable ( Protect_Powell ) ;
1531: LD_EXP 141
1535: DISABLE_MARKED
// Talk_Bomba = 6 ;
1536: LD_ADDR_EXP 142
1540: PUSH
1541: LD_INT 6
1543: ST_TO_ADDR
// disable ( Talk_Bomba ) ;
1544: LD_EXP 142
1548: DISABLE_MARKED
// Center_on_fight = 7 ;
1549: LD_ADDR_EXP 143
1553: PUSH
1554: LD_INT 7
1556: ST_TO_ADDR
// disable ( Center_on_fight ) ;
1557: LD_EXP 143
1561: DISABLE_MARKED
// Not_Ingame_Run_over = 8 ;
1562: LD_ADDR_EXP 157
1566: PUSH
1567: LD_INT 8
1569: ST_TO_ADDR
// enable ( Not_Ingame_Run_over ) ;
1570: LD_EXP 157
1574: ENABLE_MARKED
// Ingame_Run_over = 9 ;
1575: LD_ADDR_EXP 145
1579: PUSH
1580: LD_INT 9
1582: ST_TO_ADDR
// disable ( Ingame_Run_over ) ;
1583: LD_EXP 145
1587: DISABLE_MARKED
// Game_Continue = 10 ;
1588: LD_ADDR_EXP 146
1592: PUSH
1593: LD_INT 10
1595: ST_TO_ADDR
// disable ( Game_Continue ) ;
1596: LD_EXP 146
1600: DISABLE_MARKED
// Woman_Comes = 11 ;
1601: LD_ADDR_EXP 148
1605: PUSH
1606: LD_INT 11
1608: ST_TO_ADDR
// Vsevolod_Comes = 12 ;
1609: LD_ADDR_EXP 147
1613: PUSH
1614: LD_INT 12
1616: ST_TO_ADDR
// if ( Woman_alive and kappa_saved and woman_saved = false ) then
1617: LD_EXP 38
1621: PUSH
1622: LD_EXP 33
1626: AND
1627: PUSH
1628: LD_EXP 34
1632: PUSH
1633: LD_INT 0
1635: EQUAL
1636: AND
1637: IFFALSE 1651
// begin disable ( Vsevolod_Comes ) ;
1639: LD_EXP 147
1643: DISABLE_MARKED
// enable ( Woman_Comes ) ;
1644: LD_EXP 148
1648: ENABLE_MARKED
// end else
1649: GO 1680
// if not ( kappa_saved ) then
1651: LD_EXP 33
1655: NOT
1656: IFFALSE 1670
// begin enable ( Vsevolod_Comes ) ;
1658: LD_EXP 147
1662: ENABLE_MARKED
// disable ( Woman_Comes ) ;
1663: LD_EXP 148
1667: DISABLE_MARKED
// end else
1668: GO 1680
// begin disable ( Vsevolod_Comes ) ;
1670: LD_EXP 147
1674: DISABLE_MARKED
// disable ( Woman_Comes ) ;
1675: LD_EXP 148
1679: DISABLE_MARKED
// end ; Matherlod_Contamined1 = 13 ;
1680: LD_ADDR_EXP 149
1684: PUSH
1685: LD_INT 13
1687: ST_TO_ADDR
// disable ( Matherlod_Contamined1 ) ;
1688: LD_EXP 149
1692: DISABLE_MARKED
// Matherlod_Contamined2 = 14 ;
1693: LD_ADDR_EXP 150
1697: PUSH
1698: LD_INT 14
1700: ST_TO_ADDR
// disable ( Matherlod_Contamined2 ) ;
1701: LD_EXP 150
1705: DISABLE_MARKED
// Matherlod_Contamined3 = 15 ;
1706: LD_ADDR_EXP 151
1710: PUSH
1711: LD_INT 15
1713: ST_TO_ADDR
// disable ( Matherlod_Contamined3 ) ;
1714: LD_EXP 151
1718: DISABLE_MARKED
// Alliance_Captured = 16 ;
1719: LD_ADDR_EXP 152
1723: PUSH
1724: LD_INT 16
1726: ST_TO_ADDR
// disable ( Alliance_Captured ) ;
1727: LD_EXP 152
1731: DISABLE_MARKED
// Explorers_Can_Go = 17 ;
1732: LD_ADDR_EXP 153
1736: PUSH
1737: LD_INT 17
1739: ST_TO_ADDR
// disable ( Explorers_Can_Go ) ;
1740: LD_EXP 153
1744: DISABLE_MARKED
// Not_End_of_Alliance = 18 ;
1745: LD_ADDR_EXP 154
1749: PUSH
1750: LD_INT 18
1752: ST_TO_ADDR
// enable ( Not_End_of_Alliance ) ;
1753: LD_EXP 154
1757: ENABLE_MARKED
// JMM_has_surrounded = 19 ;
1758: LD_ADDR_EXP 155
1762: PUSH
1763: LD_INT 19
1765: ST_TO_ADDR
// disable ( JMM_has_surrounded ) ;
1766: LD_EXP 155
1770: DISABLE_MARKED
// Friend_Escapes = 20 ;
1771: LD_ADDR_EXP 156
1775: PUSH
1776: LD_INT 20
1778: ST_TO_ADDR
// disable ( Friend_Escapes ) ;
1779: LD_EXP 156
1783: DISABLE_MARKED
// JMM_Captured = 22 ;
1784: LD_ADDR_EXP 160
1788: PUSH
1789: LD_INT 22
1791: ST_TO_ADDR
// disable ( JMM_Captured ) ;
1792: LD_EXP 160
1796: DISABLE_MARKED
// End_of_m = 23 ;
1797: LD_ADDR_EXP 158
1801: PUSH
1802: LD_INT 23
1804: ST_TO_ADDR
// disable ( End_of_m ) ;
1805: LD_EXP 158
1809: DISABLE_MARKED
// Timer = 24 ;
1810: LD_ADDR_EXP 159
1814: PUSH
1815: LD_INT 24
1817: ST_TO_ADDR
// disable ( Timer ) ;
1818: LD_EXP 159
1822: DISABLE_MARKED
// Arabian_buildings = [ [ b_bunker , 56 , 28 , 0 , [ ar_rocket_launcher ] ] , [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] , [ b_bunker , 59 , 28 , 5 , [ ar_radar ] ] , [ b_bunker , 35 , 4 , 0 , [ ar_radar ] ] , [ b_bunker , 68 , 20 , 0 , [ ar_radar ] ] , [ b_depot , 53 , 7 , 3 , [ ] ] , [ b_siberite_power , 42 , 5 , 0 , [ ] ] , [ b_siberite_power , 44 , 3 , 0 , [ ] ] , [ b_siberite_power , 93 , 7 , 0 , [ ] ] , [ b_siberite_power , 91 , 3 , 0 , [ ] ] , [ b_barracks , 49 , 9 , 1 , [ ] ] , [ b_bunker , 66 , 26 , 0 , [ ar_rocket_launcher ] ] , [ b_bunker , 69 , 26 , 0 , [ ar_gun ] ] , [ b_bunker , 57 , 13 , 0 , [ ar_flame_thrower ] ] , [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] , [ b_bunker , 83 , 24 , 0 , [ ar_gun ] ] , [ b_bunker , 88 , 27 , 0 , [ ar_rocket_launcher ] ] , [ b_lab_full , 68 , 13 , 5 , [ b_lab_siberium , b_lab_weapon ] ] , [ b_factory , 89 , 21 , 4 , [ ] ] , [ b_barracks , 84 , 10 , 0 , [ ] ] , [ b_bunker , 88 , 13 , 0 , [ ar_gun ] ] , [ b_bunker , 59 , 10 , 0 , [ ar_gun ] ] , [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] , [ b_warehouse , 84 , 4 , 2 , [ ] ] , [ b_ext_rocket , 93 , 21 , 4 , [ ] ] , [ b_ext_radar , 89 , 18 , 3 , [ ] ] , [ b_ext_gun , 92 , 24 , 5 , [ ] ] , [ b_bunker , 93 , 27 , 1 , [ ar_radar ] ] , [ b_bunker , 90 , 11 , 0 , [ ar_radar ] ] ] ;
1823: LD_ADDR_EXP 88
1827: PUSH
1828: LD_INT 32
1830: PUSH
1831: LD_INT 56
1833: PUSH
1834: LD_INT 28
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 28
1842: PUSH
1843: EMPTY
1844: LIST
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 32
1855: PUSH
1856: LD_INT 53
1858: PUSH
1859: LD_INT 25
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: LD_INT 27
1867: PUSH
1868: EMPTY
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 32
1880: PUSH
1881: LD_INT 59
1883: PUSH
1884: LD_INT 28
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: LD_INT 30
1892: PUSH
1893: EMPTY
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 32
1905: PUSH
1906: LD_INT 35
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: LD_INT 0
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: EMPTY
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 32
1930: PUSH
1931: LD_INT 68
1933: PUSH
1934: LD_INT 20
1936: PUSH
1937: LD_INT 0
1939: PUSH
1940: LD_INT 30
1942: PUSH
1943: EMPTY
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 0
1955: PUSH
1956: LD_INT 53
1958: PUSH
1959: LD_INT 7
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: EMPTY
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 28
1976: PUSH
1977: LD_INT 42
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: EMPTY
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 28
1997: PUSH
1998: LD_INT 44
2000: PUSH
2001: LD_INT 3
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: EMPTY
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 28
2018: PUSH
2019: LD_INT 93
2021: PUSH
2022: LD_INT 7
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: EMPTY
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 28
2039: PUSH
2040: LD_INT 91
2042: PUSH
2043: LD_INT 3
2045: PUSH
2046: LD_INT 0
2048: PUSH
2049: EMPTY
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 5
2060: PUSH
2061: LD_INT 49
2063: PUSH
2064: LD_INT 9
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 32
2081: PUSH
2082: LD_INT 66
2084: PUSH
2085: LD_INT 26
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: LD_INT 28
2093: PUSH
2094: EMPTY
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 32
2106: PUSH
2107: LD_INT 69
2109: PUSH
2110: LD_INT 26
2112: PUSH
2113: LD_INT 0
2115: PUSH
2116: LD_INT 27
2118: PUSH
2119: EMPTY
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 32
2131: PUSH
2132: LD_INT 57
2134: PUSH
2135: LD_INT 13
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: LD_INT 26
2143: PUSH
2144: EMPTY
2145: LIST
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 32
2156: PUSH
2157: LD_INT 70
2159: PUSH
2160: LD_INT 10
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: LD_INT 27
2168: PUSH
2169: EMPTY
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 32
2181: PUSH
2182: LD_INT 83
2184: PUSH
2185: LD_INT 24
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: LD_INT 27
2193: PUSH
2194: EMPTY
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 32
2206: PUSH
2207: LD_INT 88
2209: PUSH
2210: LD_INT 27
2212: PUSH
2213: LD_INT 0
2215: PUSH
2216: LD_INT 28
2218: PUSH
2219: EMPTY
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: LD_INT 68
2234: PUSH
2235: LD_INT 13
2237: PUSH
2238: LD_INT 5
2240: PUSH
2241: LD_INT 11
2243: PUSH
2244: LD_INT 10
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: LD_INT 89
2263: PUSH
2264: LD_INT 21
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: EMPTY
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: LD_INT 5
2281: PUSH
2282: LD_INT 84
2284: PUSH
2285: LD_INT 10
2287: PUSH
2288: LD_INT 0
2290: PUSH
2291: EMPTY
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 32
2302: PUSH
2303: LD_INT 88
2305: PUSH
2306: LD_INT 13
2308: PUSH
2309: LD_INT 0
2311: PUSH
2312: LD_INT 27
2314: PUSH
2315: EMPTY
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: LD_INT 59
2330: PUSH
2331: LD_INT 10
2333: PUSH
2334: LD_INT 0
2336: PUSH
2337: LD_INT 27
2339: PUSH
2340: EMPTY
2341: LIST
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 79
2355: PUSH
2356: LD_INT 4
2358: PUSH
2359: LD_INT 5
2361: PUSH
2362: LD_INT 28
2364: PUSH
2365: EMPTY
2366: LIST
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 1
2377: PUSH
2378: LD_INT 84
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: LD_INT 2
2386: PUSH
2387: EMPTY
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 18
2398: PUSH
2399: LD_INT 93
2401: PUSH
2402: LD_INT 21
2404: PUSH
2405: LD_INT 4
2407: PUSH
2408: EMPTY
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 20
2419: PUSH
2420: LD_INT 89
2422: PUSH
2423: LD_INT 18
2425: PUSH
2426: LD_INT 3
2428: PUSH
2429: EMPTY
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: LD_INT 17
2440: PUSH
2441: LD_INT 92
2443: PUSH
2444: LD_INT 24
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: EMPTY
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 32
2461: PUSH
2462: LD_INT 93
2464: PUSH
2465: LD_INT 27
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: LD_INT 30
2473: PUSH
2474: EMPTY
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 32
2486: PUSH
2487: LD_INT 90
2489: PUSH
2490: LD_INT 11
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: LD_INT 30
2498: PUSH
2499: EMPTY
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: ST_TO_ADDR
// Russian_Buildings = [ [ b_lab_full , 202 , 95 , 5 , [ b_lab_siberium , b_lab_weapon ] ] , [ b_barracks , 170 , 45 , 2 , [ ] ] , [ b_factory , 195 , 84 , 4 , [ ] ] , [ b_ext_rocket , 191 , 80 , 2 , [ ] ] , [ b_ext_siberium , 195 , 81 , 3 , [ ] ] , [ b_ext_computer , 199 , 84 , 4 , [ ] ] , [ b_ext_gun , 198 , 87 , 5 , [ ] ] , [ b_ext_track , 195 , 88 , 0 , [ ] ] , [ b_siberite_power , 190 , 66 , 1 , [ ] ] , [ b_turret , 182 , 58 , 1 , [ ru_rocket ] ] , [ b_turret , 188 , 70 , 1 , [ ru_rocket ] ] , [ b_turret , 183 , 61 , 1 , [ ru_time_lapser ] ] , [ b_turret , 186 , 67 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 185 , 64 , 1 , [ ru_gatling_gun ] ] , [ b_warehouse , 175 , 56 , 3 , [ ] ] , [ b_teleport , 182 , 87 , 0 , [ ] ] , [ b_teleport , 165 , 60 , 3 , [ ] ] , [ b_warehouse , 175 , 81 , 3 , [ ] ] , [ b_barracks , 155 , 44 , 5 , [ ] ] , [ b_turret , 156 , 73 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] , [ b_turret , 156 , 78 , 1 , [ ru_rocket ] ] , [ b_turret , 160 , 86 , 0 , [ ru_heavy_gun ] ] , [ b_bunker , 158 , 82 , 1 , [ ru_gatling_gun ] ] , [ b_bunker , 164 , 86 , 1 , [ ru_rocket ] ] , [ b_bunker , 161 , 81 , 1 , [ ru_rocket_launcher ] ] , [ b_turret , 161 , 75 , 1 , [ ru_time_lapser ] ] , [ b_siberite_power , 163 , 79 , 0 , [ ] ] , [ b_turret , 182 , 105 , 0 , [ ru_gatling_gun ] ] , [ b_turret , 161 , 93 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 164 , 98 , 1 , [ ru_time_lapser ] ] , [ b_turret , 188 , 98 , 3 , [ ru_rocket_launcher ] ] , [ b_turret , 200 , 98 , 0 , [ ru_gatling_gun ] ] , [ b_siberite_power , 166 , 96 , 0 , [ ] ] , [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] , [ b_turret , 208 , 106 , 0 , [ ru_gatling_gun ] ] , [ b_turret , 196 , 107 , 0 , [ ru_rocket ] ] , [ b_siberite_power , 186 , 101 , 4 , [ ] ] , [ b_siberite_power , 193 , 101 , 3 , [ ] ] , [ b_siberite_power , 182 , 50 , 1 , [ ] ] , [ b_siberite_power , 153 , 28 , 4 , [ ] ] , [ b_siberite_power , 201 , 89 , 1 , [ ] ] , [ b_turret , 150 , 25 , 0 , [ ru_rocket_launcher ] ] , [ b_turret , 151 , 31 , 0 , [ ru_heavy_gun ] ] , [ b_bunker , 153 , 39 , 0 , [ ru_heavy_gun ] ] , [ b_turret , 157 , 41 , 1 , [ ru_time_lapser ] ] , [ b_bunker , 158 , 54 , 1 , [ ru_time_lapser ] ] , [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] , [ b_turret , 190 , 106 , 0 , [ ru_time_lapser ] ] , [ b_turret , 201 , 106 , 0 , [ ru_time_lapser ] ] , [ b_turret , 154 , 63 , 1 , [ ru_time_lapser ] ] , [ b_turret , 158 , 67 , 1 , [ ru_gatling_gun ] ] , [ b_bunker , 155 , 57 , 1 , [ ru_heavy_gun ] ] , [ b_bunker , 158 , 62 , 1 , [ ru_rocket ] ] , [ b_turret , 164 , 89 , 4 , [ ru_time_lapser ] ] ] ;
2540: LD_ADDR_EXP 113
2544: PUSH
2545: LD_INT 8
2547: PUSH
2548: LD_INT 202
2550: PUSH
2551: LD_INT 95
2553: PUSH
2554: LD_INT 5
2556: PUSH
2557: LD_INT 11
2559: PUSH
2560: LD_INT 10
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 5
2576: PUSH
2577: LD_INT 170
2579: PUSH
2580: LD_INT 45
2582: PUSH
2583: LD_INT 2
2585: PUSH
2586: EMPTY
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 195
2600: PUSH
2601: LD_INT 84
2603: PUSH
2604: LD_INT 4
2606: PUSH
2607: EMPTY
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 18
2618: PUSH
2619: LD_INT 191
2621: PUSH
2622: LD_INT 80
2624: PUSH
2625: LD_INT 2
2627: PUSH
2628: EMPTY
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 21
2639: PUSH
2640: LD_INT 195
2642: PUSH
2643: LD_INT 81
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: EMPTY
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 199
2663: PUSH
2664: LD_INT 84
2666: PUSH
2667: LD_INT 4
2669: PUSH
2670: EMPTY
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 17
2681: PUSH
2682: LD_INT 198
2684: PUSH
2685: LD_INT 87
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 16
2702: PUSH
2703: LD_INT 195
2705: PUSH
2706: LD_INT 88
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 28
2723: PUSH
2724: LD_INT 190
2726: PUSH
2727: LD_INT 66
2729: PUSH
2730: LD_INT 1
2732: PUSH
2733: EMPTY
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 33
2744: PUSH
2745: LD_INT 182
2747: PUSH
2748: LD_INT 58
2750: PUSH
2751: LD_INT 1
2753: PUSH
2754: LD_INT 47
2756: PUSH
2757: EMPTY
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 188
2772: PUSH
2773: LD_INT 70
2775: PUSH
2776: LD_INT 1
2778: PUSH
2779: LD_INT 47
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 33
2794: PUSH
2795: LD_INT 183
2797: PUSH
2798: LD_INT 61
2800: PUSH
2801: LD_INT 1
2803: PUSH
2804: LD_INT 49
2806: PUSH
2807: EMPTY
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 33
2819: PUSH
2820: LD_INT 186
2822: PUSH
2823: LD_INT 67
2825: PUSH
2826: LD_INT 1
2828: PUSH
2829: LD_INT 46
2831: PUSH
2832: EMPTY
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 33
2844: PUSH
2845: LD_INT 185
2847: PUSH
2848: LD_INT 64
2850: PUSH
2851: LD_INT 1
2853: PUSH
2854: LD_INT 43
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 175
2872: PUSH
2873: LD_INT 56
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: EMPTY
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 34
2890: PUSH
2891: LD_INT 182
2893: PUSH
2894: LD_INT 87
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: EMPTY
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 34
2911: PUSH
2912: LD_INT 165
2914: PUSH
2915: LD_INT 60
2917: PUSH
2918: LD_INT 3
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: LD_INT 175
2935: PUSH
2936: LD_INT 81
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: EMPTY
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 5
2953: PUSH
2954: LD_INT 155
2956: PUSH
2957: LD_INT 44
2959: PUSH
2960: LD_INT 5
2962: PUSH
2963: EMPTY
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 33
2974: PUSH
2975: LD_INT 156
2977: PUSH
2978: LD_INT 73
2980: PUSH
2981: LD_INT 1
2983: PUSH
2984: LD_INT 46
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 33
2999: PUSH
3000: LD_INT 158
3002: PUSH
3003: LD_INT 76
3005: PUSH
3006: LD_INT 0
3008: PUSH
3009: LD_INT 45
3011: PUSH
3012: EMPTY
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 33
3024: PUSH
3025: LD_INT 156
3027: PUSH
3028: LD_INT 78
3030: PUSH
3031: LD_INT 1
3033: PUSH
3034: LD_INT 47
3036: PUSH
3037: EMPTY
3038: LIST
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 33
3049: PUSH
3050: LD_INT 160
3052: PUSH
3053: LD_INT 86
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: LD_INT 46
3061: PUSH
3062: EMPTY
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 32
3074: PUSH
3075: LD_INT 158
3077: PUSH
3078: LD_INT 82
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: LD_INT 43
3086: PUSH
3087: EMPTY
3088: LIST
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 32
3099: PUSH
3100: LD_INT 164
3102: PUSH
3103: LD_INT 86
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: LD_INT 47
3111: PUSH
3112: EMPTY
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 32
3124: PUSH
3125: LD_INT 161
3127: PUSH
3128: LD_INT 81
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: LD_INT 45
3136: PUSH
3137: EMPTY
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 33
3149: PUSH
3150: LD_INT 161
3152: PUSH
3153: LD_INT 75
3155: PUSH
3156: LD_INT 1
3158: PUSH
3159: LD_INT 49
3161: PUSH
3162: EMPTY
3163: LIST
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 163
3177: PUSH
3178: LD_INT 79
3180: PUSH
3181: LD_INT 0
3183: PUSH
3184: EMPTY
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 33
3195: PUSH
3196: LD_INT 182
3198: PUSH
3199: LD_INT 105
3201: PUSH
3202: LD_INT 0
3204: PUSH
3205: LD_INT 43
3207: PUSH
3208: EMPTY
3209: LIST
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 33
3220: PUSH
3221: LD_INT 161
3223: PUSH
3224: LD_INT 93
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: LD_INT 46
3232: PUSH
3233: EMPTY
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 33
3245: PUSH
3246: LD_INT 164
3248: PUSH
3249: LD_INT 98
3251: PUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 49
3257: PUSH
3258: EMPTY
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 33
3270: PUSH
3271: LD_INT 188
3273: PUSH
3274: LD_INT 98
3276: PUSH
3277: LD_INT 3
3279: PUSH
3280: LD_INT 45
3282: PUSH
3283: EMPTY
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 33
3295: PUSH
3296: LD_INT 200
3298: PUSH
3299: LD_INT 98
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 43
3307: PUSH
3308: EMPTY
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: PUSH
3318: LD_INT 28
3320: PUSH
3321: LD_INT 166
3323: PUSH
3324: LD_INT 96
3326: PUSH
3327: LD_INT 0
3329: PUSH
3330: EMPTY
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 33
3341: PUSH
3342: LD_INT 169
3344: PUSH
3345: LD_INT 100
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: LD_INT 47
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 33
3366: PUSH
3367: LD_INT 208
3369: PUSH
3370: LD_INT 106
3372: PUSH
3373: LD_INT 0
3375: PUSH
3376: LD_INT 43
3378: PUSH
3379: EMPTY
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 33
3391: PUSH
3392: LD_INT 196
3394: PUSH
3395: LD_INT 107
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 47
3403: PUSH
3404: EMPTY
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_INT 28
3416: PUSH
3417: LD_INT 186
3419: PUSH
3420: LD_INT 101
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: EMPTY
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 28
3437: PUSH
3438: LD_INT 193
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 3
3446: PUSH
3447: EMPTY
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 28
3458: PUSH
3459: LD_INT 182
3461: PUSH
3462: LD_INT 50
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: EMPTY
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 28
3479: PUSH
3480: LD_INT 153
3482: PUSH
3483: LD_INT 28
3485: PUSH
3486: LD_INT 4
3488: PUSH
3489: EMPTY
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_INT 28
3500: PUSH
3501: LD_INT 201
3503: PUSH
3504: LD_INT 89
3506: PUSH
3507: LD_INT 1
3509: PUSH
3510: EMPTY
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: PUSH
3519: LD_INT 33
3521: PUSH
3522: LD_INT 150
3524: PUSH
3525: LD_INT 25
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 45
3533: PUSH
3534: EMPTY
3535: LIST
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 33
3546: PUSH
3547: LD_INT 151
3549: PUSH
3550: LD_INT 31
3552: PUSH
3553: LD_INT 0
3555: PUSH
3556: LD_INT 46
3558: PUSH
3559: EMPTY
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 32
3571: PUSH
3572: LD_INT 153
3574: PUSH
3575: LD_INT 39
3577: PUSH
3578: LD_INT 0
3580: PUSH
3581: LD_INT 46
3583: PUSH
3584: EMPTY
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 157
3599: PUSH
3600: LD_INT 41
3602: PUSH
3603: LD_INT 1
3605: PUSH
3606: LD_INT 49
3608: PUSH
3609: EMPTY
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 32
3621: PUSH
3622: LD_INT 158
3624: PUSH
3625: LD_INT 54
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 49
3633: PUSH
3634: EMPTY
3635: LIST
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 33
3646: PUSH
3647: LD_INT 155
3649: PUSH
3650: LD_INT 35
3652: PUSH
3653: LD_INT 0
3655: PUSH
3656: LD_INT 47
3658: PUSH
3659: EMPTY
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_INT 33
3671: PUSH
3672: LD_INT 190
3674: PUSH
3675: LD_INT 106
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 49
3683: PUSH
3684: EMPTY
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 33
3696: PUSH
3697: LD_INT 201
3699: PUSH
3700: LD_INT 106
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 49
3708: PUSH
3709: EMPTY
3710: LIST
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: PUSH
3719: LD_INT 33
3721: PUSH
3722: LD_INT 154
3724: PUSH
3725: LD_INT 63
3727: PUSH
3728: LD_INT 1
3730: PUSH
3731: LD_INT 49
3733: PUSH
3734: EMPTY
3735: LIST
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 33
3746: PUSH
3747: LD_INT 158
3749: PUSH
3750: LD_INT 67
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 43
3758: PUSH
3759: EMPTY
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 32
3771: PUSH
3772: LD_INT 155
3774: PUSH
3775: LD_INT 57
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 46
3783: PUSH
3784: EMPTY
3785: LIST
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 32
3796: PUSH
3797: LD_INT 158
3799: PUSH
3800: LD_INT 62
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 47
3808: PUSH
3809: EMPTY
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 33
3821: PUSH
3822: LD_INT 164
3824: PUSH
3825: LD_INT 89
3827: PUSH
3828: LD_INT 4
3830: PUSH
3831: LD_INT 49
3833: PUSH
3834: EMPTY
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// SetTech ( tech_SibFiss , americans , state_disabled ) ;
3901: LD_INT 25
3903: PPUSH
3904: LD_EXP 176
3908: PPUSH
3909: LD_INT 0
3911: PPUSH
3912: CALL_OW 322
// end ;
3916: LD_VAR 0 1
3920: RET
// function Prepare_difficulty ; var i ; begin
3921: LD_INT 0
3923: PPUSH
3924: PPUSH
// human_difficulty_skill = [ 6 , 7 , 8 ] [ Difficulty ] ;
3925: LD_ADDR_EXP 184
3929: PUSH
3930: LD_INT 6
3932: PUSH
3933: LD_INT 7
3935: PUSH
3936: LD_INT 8
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_OWVAR 67
3948: ARRAY
3949: ST_TO_ADDR
// apeman_difficulty_skill = [ 3 , 4 , 5 ] [ Difficulty ] ;
3950: LD_ADDR_EXP 185
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: LD_INT 4
3960: PUSH
3961: LD_INT 5
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: PUSH
3969: LD_OWVAR 67
3973: ARRAY
3974: ST_TO_ADDR
// Number_of_crates = [ 7 , 5 , 4 ] [ Difficulty ] ;
3975: LD_ADDR_EXP 197
3979: PUSH
3980: LD_INT 7
3982: PUSH
3983: LD_INT 5
3985: PUSH
3986: LD_INT 4
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: LD_OWVAR 67
3998: ARRAY
3999: ST_TO_ADDR
// Number_of_JMM_Helpers = 5 ;
4000: LD_ADDR_EXP 69
4004: PUSH
4005: LD_INT 5
4007: ST_TO_ADDR
// Number_Of_Omar_Soldiers = [ 2 , 4 , 5 ] [ Difficulty ] ;
4008: LD_ADDR_EXP 75
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: PUSH
4027: LD_OWVAR 67
4031: ARRAY
4032: ST_TO_ADDR
// Number_of_Omar_Hovercrafts = [ 1 , 1 , 2 ] [ Difficulty ] ;
4033: LD_ADDR_EXP 76
4037: PUSH
4038: LD_INT 1
4040: PUSH
4041: LD_INT 1
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_OWVAR 67
4056: ARRAY
4057: ST_TO_ADDR
// Number_of_Omar_Flamethrowers = [ 0 , 1 , 1 ] [ Difficulty ] ;
4058: LD_ADDR_EXP 77
4062: PUSH
4063: LD_INT 0
4065: PUSH
4066: LD_INT 1
4068: PUSH
4069: LD_INT 1
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: LD_OWVAR 67
4081: ARRAY
4082: ST_TO_ADDR
// Number_of_Omar_RocketLaunchers = [ 0 , 0 , 1 ] [ Difficulty ] ;
4083: LD_ADDR_EXP 78
4087: PUSH
4088: LD_INT 0
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_OWVAR 67
4106: ARRAY
4107: ST_TO_ADDR
// Number_of_russian_soldiers = [ 3 , 5 , 6 ] [ Difficulty ] ;
4108: LD_ADDR_EXP 133
4112: PUSH
4113: LD_INT 3
4115: PUSH
4116: LD_INT 5
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_OWVAR 67
4131: ARRAY
4132: ST_TO_ADDR
// Number_of_russian_scientists = [ 6 , 6 , 6 ] [ Difficulty ] ;
4133: LD_ADDR_EXP 134
4137: PUSH
4138: LD_INT 6
4140: PUSH
4141: LD_INT 6
4143: PUSH
4144: LD_INT 6
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_OWVAR 67
4156: ARRAY
4157: ST_TO_ADDR
// Number_of_russian_mechanics = [ 6 , 6 , 6 ] [ Difficulty ] ;
4158: LD_ADDR_EXP 135
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: LD_INT 6
4168: PUSH
4169: LD_INT 6
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PUSH
4177: LD_OWVAR 67
4181: ARRAY
4182: ST_TO_ADDR
// Number_of_russian_engineers = [ 2 , 3 , 4 ] [ Difficulty ] ;
4183: LD_ADDR_EXP 136
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: PUSH
4202: LD_OWVAR 67
4206: ARRAY
4207: ST_TO_ADDR
// Number_of_Behemots = [ 2 , 3 , 4 ] [ Difficulty ] ;
4208: LD_ADDR_EXP 221
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 3
4218: PUSH
4219: LD_INT 4
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PUSH
4227: LD_OWVAR 67
4231: ARRAY
4232: ST_TO_ADDR
// Number_of_Arabian_Engineers = [ 1 , 1 , 2 ] [ Difficulty ] ;
4233: LD_ADDR_EXP 92
4237: PUSH
4238: LD_INT 1
4240: PUSH
4241: LD_INT 1
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: PUSH
4252: LD_OWVAR 67
4256: ARRAY
4257: ST_TO_ADDR
// Number_of_Arabian_Soldiers = [ 3 , 4 , 5 ] [ Difficulty ] ;
4258: LD_ADDR_EXP 89
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: LD_INT 4
4268: PUSH
4269: LD_INT 5
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: PUSH
4277: LD_OWVAR 67
4281: ARRAY
4282: ST_TO_ADDR
// Number_of_Arabian_scientists = [ 1 , 2 , 2 ] [ Difficulty ] ;
4283: LD_ADDR_EXP 90
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 2
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: ST_TO_ADDR
// Number_of_Arabian_mechanics = [ 1 , 2 , 3 ] [ Difficulty ] ;
4308: LD_ADDR_EXP 91
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: LD_OWVAR 67
4331: ARRAY
4332: ST_TO_ADDR
// Number_of_AllAm_Soldiers = [ 4 , 4 , 4 ] [ Difficulty ] ;
4333: LD_ADDR_EXP 103
4337: PUSH
4338: LD_INT 4
4340: PUSH
4341: LD_INT 4
4343: PUSH
4344: LD_INT 4
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: PUSH
4352: LD_OWVAR 67
4356: ARRAY
4357: ST_TO_ADDR
// Number_of_AllAm_Scientists = [ 4 , 4 , 4 ] [ Difficulty ] ;
4358: LD_ADDR_EXP 104
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: LD_INT 4
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: LD_OWVAR 67
4381: ARRAY
4382: ST_TO_ADDR
// Number_of_AllRu_Soldiers = [ 1 , 2 , 3 ] [ Difficulty ] ;
4383: LD_ADDR_EXP 105
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: LD_INT 2
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_OWVAR 67
4406: ARRAY
4407: ST_TO_ADDR
// Number_of_AllRu_Scientists = [ 4 , 4 , 4 ] [ Difficulty ] ;
4408: LD_ADDR_EXP 106
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: LD_INT 4
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: ST_TO_ADDR
// Woman_Coming_Time = [ 18 18$0 , 18 18$0 , 18 18$0 ] [ Difficulty ] ;
4433: LD_ADDR_EXP 201
4437: PUSH
4438: LD_INT 37800
4440: PUSH
4441: LD_INT 37800
4443: PUSH
4444: LD_INT 37800
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_OWVAR 67
4456: ARRAY
4457: ST_TO_ADDR
// Rus_Attack_Time = [ 35 35$0 , 30 30$0 , 28 28$0 ] [ Difficulty ] ;
4458: LD_ADDR_EXP 130
4462: PUSH
4463: LD_INT 73500
4465: PUSH
4466: LD_INT 63000
4468: PUSH
4469: LD_INT 58800
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_OWVAR 67
4481: ARRAY
4482: ST_TO_ADDR
// Stevens_Coming_Time = [ 35 35$0 , 35 35$0 , 32 32$0 ] [ Difficulty ] ;
4483: LD_ADDR_EXP 200
4487: PUSH
4488: LD_INT 73500
4490: PUSH
4491: LD_INT 73500
4493: PUSH
4494: LD_INT 67200
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: PUSH
4502: LD_OWVAR 67
4506: ARRAY
4507: ST_TO_ADDR
// Alliance_broadcast = [ 45 45$0 , 40 40$0 , 35 35$0 ] [ Difficulty ] ;
4508: LD_ADDR_EXP 202
4512: PUSH
4513: LD_INT 94500
4515: PUSH
4516: LD_INT 84000
4518: PUSH
4519: LD_INT 73500
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: PUSH
4527: LD_OWVAR 67
4531: ARRAY
4532: ST_TO_ADDR
// Arabian_siberite_attack_time = [ 50 50$0 , 45 45$0 , 40 40$0 ] [ Difficulty ] ;
4533: LD_ADDR_EXP 213
4537: PUSH
4538: LD_INT 105000
4540: PUSH
4541: LD_INT 94500
4543: PUSH
4544: LD_INT 84000
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: PUSH
4552: LD_OWVAR 67
4556: ARRAY
4557: ST_TO_ADDR
// Behemots_broadcast = [ 55 55$0 , 50 50$0 , 45 45$0 ] [ Difficulty ] ;
4558: LD_ADDR_EXP 203
4562: PUSH
4563: LD_INT 115500
4565: PUSH
4566: LD_INT 105000
4568: PUSH
4569: LD_INT 94500
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_OWVAR 67
4581: ARRAY
4582: ST_TO_ADDR
// Alaskite_Bomb_Time = [ 60 60$0 , 55 55$0 , 50 50$0 ] [ Difficulty ] ;
4583: LD_ADDR_EXP 212
4587: PUSH
4588: LD_INT 126000
4590: PUSH
4591: LD_INT 115500
4593: PUSH
4594: LD_INT 105000
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_OWVAR 67
4606: ARRAY
4607: ST_TO_ADDR
// Time_of_first_capture = [ 65 65$0 , 60 60$0 , 55 55$0 ] [ Difficulty ] ;
4608: LD_ADDR_EXP 204
4612: PUSH
4613: LD_INT 136500
4615: PUSH
4616: LD_INT 126000
4618: PUSH
4619: LD_INT 115500
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_OWVAR 67
4631: ARRAY
4632: ST_TO_ADDR
// Behemot_attack_time = [ 70 70$0 , 65 65$0 , 60 60$0 ] [ Difficulty ] ;
4633: LD_ADDR_EXP 225
4637: PUSH
4638: LD_INT 147000
4640: PUSH
4641: LD_INT 136500
4643: PUSH
4644: LD_INT 126000
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: LIST
4651: PUSH
4652: LD_OWVAR 67
4656: ARRAY
4657: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 222 , 179 ) ) ;
4658: LD_INT 222
4660: PPUSH
4661: LD_INT 179
4663: PPUSH
4664: CALL_OW 438
4668: PPUSH
4669: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 226 , 183 ) ) ;
4673: LD_INT 226
4675: PPUSH
4676: LD_INT 183
4678: PPUSH
4679: CALL_OW 438
4683: PPUSH
4684: CALL_OW 65
// case Difficulty of 1 :
4688: LD_OWVAR 67
4692: PUSH
4693: LD_INT 1
4695: DOUBLE
4696: EQUAL
4697: IFTRUE 4701
4699: GO 5579
4701: POP
// begin DestroyUnit ( GetUnitNumber ( 229 , 176 ) ) ;
4702: LD_INT 229
4704: PPUSH
4705: LD_INT 176
4707: PPUSH
4708: CALL_OW 438
4712: PPUSH
4713: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 53 , 25 ) ) ;
4717: LD_INT 53
4719: PPUSH
4720: LD_INT 25
4722: PPUSH
4723: CALL_OW 438
4727: PPUSH
4728: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] ] ;
4732: LD_ADDR_EXP 88
4736: PUSH
4737: LD_EXP 88
4741: PUSH
4742: LD_INT 32
4744: PUSH
4745: LD_INT 53
4747: PUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 0
4753: PUSH
4754: LD_INT 27
4756: PUSH
4757: EMPTY
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: DIFF
4770: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 70 , 10 ) ) ;
4771: LD_INT 70
4773: PPUSH
4774: LD_INT 10
4776: PPUSH
4777: CALL_OW 438
4781: PPUSH
4782: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] ] ;
4786: LD_ADDR_EXP 88
4790: PUSH
4791: LD_EXP 88
4795: PUSH
4796: LD_INT 32
4798: PUSH
4799: LD_INT 70
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: LD_INT 0
4807: PUSH
4808: LD_INT 27
4810: PUSH
4811: EMPTY
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: PUSH
4821: EMPTY
4822: LIST
4823: DIFF
4824: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 79 , 4 ) ) ;
4825: LD_INT 79
4827: PPUSH
4828: LD_INT 4
4830: PPUSH
4831: CALL_OW 438
4835: PPUSH
4836: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] ] ;
4840: LD_ADDR_EXP 88
4844: PUSH
4845: LD_EXP 88
4849: PUSH
4850: LD_INT 32
4852: PUSH
4853: LD_INT 79
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: LD_INT 28
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: DIFF
4878: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 49 , 9 ) ) ;
4879: LD_INT 49
4881: PPUSH
4882: LD_INT 9
4884: PPUSH
4885: CALL_OW 438
4889: PPUSH
4890: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_barracks , 49 , 9 , 1 , [ ] ] ] ;
4894: LD_ADDR_EXP 88
4898: PUSH
4899: LD_EXP 88
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 49
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: EMPTY
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: DIFF
4928: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 150 , 25 ) ) ;
4929: LD_INT 150
4931: PPUSH
4932: LD_INT 25
4934: PPUSH
4935: CALL_OW 438
4939: PPUSH
4940: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 150 , 25 , 0 , [ ru_rocket_launcher ] ] ] ;
4944: LD_ADDR_EXP 113
4948: PUSH
4949: LD_EXP 113
4953: PUSH
4954: LD_INT 33
4956: PUSH
4957: LD_INT 150
4959: PUSH
4960: LD_INT 25
4962: PUSH
4963: LD_INT 0
4965: PUSH
4966: LD_INT 45
4968: PUSH
4969: EMPTY
4970: LIST
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: DIFF
4982: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 35 ) ) ;
4983: LD_INT 155
4985: PPUSH
4986: LD_INT 35
4988: PPUSH
4989: CALL_OW 438
4993: PPUSH
4994: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] ] ;
4998: LD_ADDR_EXP 113
5002: PUSH
5003: LD_EXP 113
5007: PUSH
5008: LD_INT 33
5010: PUSH
5011: LD_INT 155
5013: PUSH
5014: LD_INT 35
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 47
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: PUSH
5033: EMPTY
5034: LIST
5035: DIFF
5036: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 153 , 39 ) ) ;
5037: LD_INT 153
5039: PPUSH
5040: LD_INT 39
5042: PPUSH
5043: CALL_OW 438
5047: PPUSH
5048: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 153 , 39 , 0 , [ ru_heavy_gun ] ] ] ;
5052: LD_ADDR_EXP 113
5056: PUSH
5057: LD_EXP 113
5061: PUSH
5062: LD_INT 32
5064: PUSH
5065: LD_INT 153
5067: PUSH
5068: LD_INT 39
5070: PUSH
5071: LD_INT 0
5073: PUSH
5074: LD_INT 46
5076: PUSH
5077: EMPTY
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: PUSH
5087: EMPTY
5088: LIST
5089: DIFF
5090: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 188 , 70 ) ) ;
5091: LD_INT 188
5093: PPUSH
5094: LD_INT 70
5096: PPUSH
5097: CALL_OW 438
5101: PPUSH
5102: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 188 , 70 , 1 , [ ru_rocket ] ] ] ;
5106: LD_ADDR_EXP 113
5110: PUSH
5111: LD_EXP 113
5115: PUSH
5116: LD_INT 33
5118: PUSH
5119: LD_INT 188
5121: PUSH
5122: LD_INT 70
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: LD_INT 47
5130: PUSH
5131: EMPTY
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: DIFF
5144: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 188 , 98 ) ) ;
5145: LD_INT 188
5147: PPUSH
5148: LD_INT 98
5150: PPUSH
5151: CALL_OW 438
5155: PPUSH
5156: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 188 , 98 , 3 , [ ru_rocket_launcher ] ] ] ;
5160: LD_ADDR_EXP 113
5164: PUSH
5165: LD_EXP 113
5169: PUSH
5170: LD_INT 33
5172: PUSH
5173: LD_INT 188
5175: PUSH
5176: LD_INT 98
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: LD_INT 45
5184: PUSH
5185: EMPTY
5186: LIST
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: DIFF
5198: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 200 , 98 ) ) ;
5199: LD_INT 200
5201: PPUSH
5202: LD_INT 98
5204: PPUSH
5205: CALL_OW 438
5209: PPUSH
5210: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 200 , 98 , 0 , [ ru_gatling_gun ] ] ] ;
5214: LD_ADDR_EXP 113
5218: PUSH
5219: LD_EXP 113
5223: PUSH
5224: LD_INT 33
5226: PUSH
5227: LD_INT 200
5229: PUSH
5230: LD_INT 98
5232: PUSH
5233: LD_INT 0
5235: PUSH
5236: LD_INT 43
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: DIFF
5252: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 169 , 100 ) ) ;
5253: LD_INT 169
5255: PPUSH
5256: LD_INT 100
5258: PPUSH
5259: CALL_OW 438
5263: PPUSH
5264: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] ] ;
5268: LD_ADDR_EXP 113
5272: PUSH
5273: LD_EXP 113
5277: PUSH
5278: LD_INT 33
5280: PUSH
5281: LD_INT 169
5283: PUSH
5284: LD_INT 100
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: LD_INT 47
5292: PUSH
5293: EMPTY
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: DIFF
5306: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 164 , 86 ) ) ;
5307: LD_INT 164
5309: PPUSH
5310: LD_INT 86
5312: PPUSH
5313: CALL_OW 438
5317: PPUSH
5318: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 164 , 86 , 1 , [ ru_rocket ] ] ] ;
5322: LD_ADDR_EXP 113
5326: PUSH
5327: LD_EXP 113
5331: PUSH
5332: LD_INT 32
5334: PUSH
5335: LD_INT 164
5337: PUSH
5338: LD_INT 86
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: LD_INT 47
5346: PUSH
5347: EMPTY
5348: LIST
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: EMPTY
5358: LIST
5359: DIFF
5360: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 160 , 86 ) ) ;
5361: LD_INT 160
5363: PPUSH
5364: LD_INT 86
5366: PPUSH
5367: CALL_OW 438
5371: PPUSH
5372: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 160 , 86 , 0 , [ ru_heavy_gun ] ] ] ;
5376: LD_ADDR_EXP 113
5380: PUSH
5381: LD_EXP 113
5385: PUSH
5386: LD_INT 33
5388: PUSH
5389: LD_INT 160
5391: PUSH
5392: LD_INT 86
5394: PUSH
5395: LD_INT 0
5397: PUSH
5398: LD_INT 46
5400: PUSH
5401: EMPTY
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: DIFF
5414: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 76 ) ) ;
5415: LD_INT 158
5417: PPUSH
5418: LD_INT 76
5420: PPUSH
5421: CALL_OW 438
5425: PPUSH
5426: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] ] ;
5430: LD_ADDR_EXP 113
5434: PUSH
5435: LD_EXP 113
5439: PUSH
5440: LD_INT 33
5442: PUSH
5443: LD_INT 158
5445: PUSH
5446: LD_INT 76
5448: PUSH
5449: LD_INT 0
5451: PUSH
5452: LD_INT 45
5454: PUSH
5455: EMPTY
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: DIFF
5468: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 62 ) ) ;
5469: LD_INT 158
5471: PPUSH
5472: LD_INT 62
5474: PPUSH
5475: CALL_OW 438
5479: PPUSH
5480: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 158 , 62 , 1 , [ ru_rocket ] ] ] ;
5484: LD_ADDR_EXP 113
5488: PUSH
5489: LD_EXP 113
5493: PUSH
5494: LD_INT 32
5496: PUSH
5497: LD_INT 158
5499: PUSH
5500: LD_INT 62
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: LD_INT 47
5508: PUSH
5509: EMPTY
5510: LIST
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: DIFF
5522: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 57 ) ) ;
5523: LD_INT 155
5525: PPUSH
5526: LD_INT 57
5528: PPUSH
5529: CALL_OW 438
5533: PPUSH
5534: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 155 , 57 , 1 , [ ru_heavy_gun ] ] ] ;
5538: LD_ADDR_EXP 113
5542: PUSH
5543: LD_EXP 113
5547: PUSH
5548: LD_INT 32
5550: PUSH
5551: LD_INT 155
5553: PUSH
5554: LD_INT 57
5556: PUSH
5557: LD_INT 1
5559: PUSH
5560: LD_INT 46
5562: PUSH
5563: EMPTY
5564: LIST
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: DIFF
5576: ST_TO_ADDR
// end ; 2 :
5577: GO 6049
5579: LD_INT 2
5581: DOUBLE
5582: EQUAL
5583: IFTRUE 5587
5585: GO 6037
5587: POP
// begin DestroyUnit ( GetUnitNumber ( 224 , 176 ) ) ;
5588: LD_INT 224
5590: PPUSH
5591: LD_INT 176
5593: PPUSH
5594: CALL_OW 438
5598: PPUSH
5599: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 53 , 25 ) ) ;
5603: LD_INT 53
5605: PPUSH
5606: LD_INT 25
5608: PPUSH
5609: CALL_OW 438
5613: PPUSH
5614: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] ] ;
5618: LD_ADDR_EXP 88
5622: PUSH
5623: LD_EXP 88
5627: PUSH
5628: LD_INT 32
5630: PUSH
5631: LD_INT 53
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: LD_INT 27
5642: PUSH
5643: EMPTY
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: DIFF
5656: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 70 , 10 ) ) ;
5657: LD_INT 70
5659: PPUSH
5660: LD_INT 10
5662: PPUSH
5663: CALL_OW 438
5667: PPUSH
5668: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] ] ;
5672: LD_ADDR_EXP 88
5676: PUSH
5677: LD_EXP 88
5681: PUSH
5682: LD_INT 32
5684: PUSH
5685: LD_INT 70
5687: PUSH
5688: LD_INT 10
5690: PUSH
5691: LD_INT 0
5693: PUSH
5694: LD_INT 27
5696: PUSH
5697: EMPTY
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: DIFF
5710: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 79 , 4 ) ) ;
5711: LD_INT 79
5713: PPUSH
5714: LD_INT 4
5716: PPUSH
5717: CALL_OW 438
5721: PPUSH
5722: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] ] ;
5726: LD_ADDR_EXP 88
5730: PUSH
5731: LD_EXP 88
5735: PUSH
5736: LD_INT 32
5738: PUSH
5739: LD_INT 79
5741: PUSH
5742: LD_INT 4
5744: PUSH
5745: LD_INT 5
5747: PUSH
5748: LD_INT 28
5750: PUSH
5751: EMPTY
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: DIFF
5764: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 35 ) ) ;
5765: LD_INT 155
5767: PPUSH
5768: LD_INT 35
5770: PPUSH
5771: CALL_OW 438
5775: PPUSH
5776: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] ] ;
5780: LD_ADDR_EXP 113
5784: PUSH
5785: LD_EXP 113
5789: PUSH
5790: LD_INT 33
5792: PUSH
5793: LD_INT 155
5795: PUSH
5796: LD_INT 35
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: LD_INT 47
5804: PUSH
5805: EMPTY
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: DIFF
5818: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 151 , 31 ) ) ;
5819: LD_INT 151
5821: PPUSH
5822: LD_INT 31
5824: PPUSH
5825: CALL_OW 438
5829: PPUSH
5830: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 151 , 31 , 0 , [ ru_heavy_gun ] ] ] ;
5834: LD_ADDR_EXP 113
5838: PUSH
5839: LD_EXP 113
5843: PUSH
5844: LD_INT 33
5846: PUSH
5847: LD_INT 151
5849: PUSH
5850: LD_INT 31
5852: PUSH
5853: LD_INT 0
5855: PUSH
5856: LD_INT 46
5858: PUSH
5859: EMPTY
5860: LIST
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: DIFF
5872: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 169 , 100 ) ) ;
5873: LD_INT 169
5875: PPUSH
5876: LD_INT 100
5878: PPUSH
5879: CALL_OW 438
5883: PPUSH
5884: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] ] ;
5888: LD_ADDR_EXP 113
5892: PUSH
5893: LD_EXP 113
5897: PUSH
5898: LD_INT 33
5900: PUSH
5901: LD_INT 169
5903: PUSH
5904: LD_INT 100
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: LD_INT 47
5912: PUSH
5913: EMPTY
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: DIFF
5926: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 76 ) ) ;
5927: LD_INT 158
5929: PPUSH
5930: LD_INT 76
5932: PPUSH
5933: CALL_OW 438
5937: PPUSH
5938: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] ] ;
5942: LD_ADDR_EXP 113
5946: PUSH
5947: LD_EXP 113
5951: PUSH
5952: LD_INT 33
5954: PUSH
5955: LD_INT 158
5957: PUSH
5958: LD_INT 76
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 45
5966: PUSH
5967: EMPTY
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: DIFF
5980: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 156 , 73 ) ) ;
5981: LD_INT 156
5983: PPUSH
5984: LD_INT 73
5986: PPUSH
5987: CALL_OW 438
5991: PPUSH
5992: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 156 , 73 , 1 , [ ru_heavy_gun ] ] ] ;
5996: LD_ADDR_EXP 113
6000: PUSH
6001: LD_EXP 113
6005: PUSH
6006: LD_INT 33
6008: PUSH
6009: LD_INT 156
6011: PUSH
6012: LD_INT 73
6014: PUSH
6015: LD_INT 1
6017: PUSH
6018: LD_INT 46
6020: PUSH
6021: EMPTY
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: DIFF
6034: ST_TO_ADDR
// end ; 3 :
6035: GO 6049
6037: LD_INT 3
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6048
6045: POP
// begin end ; end ;
6046: GO 6049
6048: POP
// end ;
6049: LD_VAR 0 1
6053: RET
// export function LinkBombs ; begin
6054: LD_INT 0
6056: PPUSH
// ComEnterUnit ( Control_Driver , ArControl ) ;
6057: LD_EXP 85
6061: PPUSH
6062: LD_INT 140
6064: PPUSH
6065: CALL_OW 120
// Wait ( 1 ) ;
6069: LD_INT 1
6071: PPUSH
6072: CALL_OW 67
// WaitTask ( Control_Driver , 1 ) ;
6076: LD_EXP 85
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: CALL 17876 0 2
// LinkVehicleToHuman ( ArBomb1 , Control_Driver ) ;
6088: LD_INT 139
6090: PPUSH
6091: LD_EXP 85
6095: PPUSH
6096: CALL_OW 53
// LinkVehicleToHuman ( ArBomb2 , Control_Driver ) ;
6100: LD_INT 138
6102: PPUSH
6103: LD_EXP 85
6107: PPUSH
6108: CALL_OW 53
// end ;
6112: LD_VAR 0 1
6116: RET
// function Prepare_Characters ; var i , Un , hlp , Gamma2Comander , Alpha , New_person , Drivers , Other , Number_of_all , Selected_Unit , New_vehicle ; begin
6117: LD_INT 0
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
6129: PPUSH
6130: PPUSH
// uc_nation = nation_american ;
6131: LD_ADDR_OWVAR 21
6135: PUSH
6136: LD_INT 1
6138: ST_TO_ADDR
// uc_side = americans ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_EXP 176
6148: ST_TO_ADDR
// if not debug_constant then
6149: LD_EXP 195
6153: NOT
6154: IFFALSE 6171
// JMM = CreateCharacter ( JMM ) else
6156: LD_ADDR_EXP 1
6160: PUSH
6161: LD_STRING JMM
6163: PPUSH
6164: CALL_OW 34
6168: ST_TO_ADDR
6169: GO 6193
// begin hc_name = JMM ;
6171: LD_ADDR_OWVAR 26
6175: PUSH
6176: LD_STRING JMM
6178: ST_TO_ADDR
// JMM = CreateHuman ;
6179: LD_ADDR_EXP 1
6183: PUSH
6184: CALL_OW 44
6188: ST_TO_ADDR
// InitHc ;
6189: CALL_OW 19
// end ; if not JMM then
6193: LD_EXP 1
6197: NOT
6198: IFFALSE 6213
// BuildQuery ( Error: John Macmillan not found!!! , [ OK ] ) ;
6200: LD_STRING Error: John Macmillan not found!!!
6202: PPUSH
6203: LD_STRING OK
6205: PUSH
6206: EMPTY
6207: LIST
6208: PPUSH
6209: CALL_OW 99
// uc_side = americans1 ;
6213: LD_ADDR_OWVAR 20
6217: PUSH
6218: LD_EXP 177
6222: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
6223: LD_ADDR_EXP 2
6227: PUSH
6228: LD_STRING Powell
6230: PPUSH
6231: CALL_OW 25
6235: ST_TO_ADDR
// if not Powell then
6236: LD_EXP 2
6240: NOT
6241: IFFALSE 6258
// BuildQuery ( Error: Powell not found!!! , [ OK ] ) else
6243: LD_STRING Error: Powell not found!!!
6245: PPUSH
6246: LD_STRING OK
6248: PUSH
6249: EMPTY
6250: LIST
6251: PPUSH
6252: CALL_OW 99
6256: GO 6363
// begin SetSkill ( Powell , skill_combat , 10 ) ;
6258: LD_EXP 2
6262: PPUSH
6263: LD_INT 1
6265: PPUSH
6266: LD_INT 10
6268: PPUSH
6269: CALL_OW 237
// SetSkill ( Powell , skill_mechanical , 10 ) ;
6273: LD_EXP 2
6277: PPUSH
6278: LD_INT 3
6280: PPUSH
6281: LD_INT 10
6283: PPUSH
6284: CALL_OW 237
// SetSkill ( Powell , skill_engineering , 8 ) ;
6288: LD_EXP 2
6292: PPUSH
6293: LD_INT 2
6295: PPUSH
6296: LD_INT 8
6298: PPUSH
6299: CALL_OW 237
// SetSkill ( Powell , skill_scientistic , 4 ) ;
6303: LD_EXP 2
6307: PPUSH
6308: LD_INT 4
6310: PPUSH
6311: LD_INT 4
6313: PPUSH
6314: CALL_OW 237
// SetAttr ( Powell , attr_speed , 11 ) ;
6318: LD_EXP 2
6322: PPUSH
6323: LD_INT 2
6325: PPUSH
6326: LD_INT 11
6328: PPUSH
6329: CALL_OW 239
// SetAttr ( Powell , attr_stamina , 13 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 13
6343: PPUSH
6344: CALL_OW 239
// PlaceUnitArea ( Powell , Center_am_b , false ) ;
6348: LD_EXP 2
6352: PPUSH
6353: LD_INT 13
6355: PPUSH
6356: LD_INT 0
6358: PPUSH
6359: CALL_OW 49
// end ; Bobby = CreateCharacter ( Bobby ) ;
6363: LD_ADDR_EXP 3
6367: PUSH
6368: LD_STRING Bobby
6370: PPUSH
6371: CALL_OW 34
6375: ST_TO_ADDR
// if Bobby then
6376: LD_EXP 3
6380: IFFALSE 6407
// begin if BobbyLoc <> 6 then
6382: LD_EXP 41
6386: PUSH
6387: LD_INT 6
6389: NONEQUAL
6390: IFFALSE 6407
// PlaceUnitArea ( Bobby , Center_am_b , false ) ;
6392: LD_EXP 3
6396: PPUSH
6397: LD_INT 13
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 49
// end ; Cyrus = CreateCharacter ( Cyrus ) ;
6407: LD_ADDR_EXP 4
6411: PUSH
6412: LD_STRING Cyrus
6414: PPUSH
6415: CALL_OW 34
6419: ST_TO_ADDR
// if Cyrus then
6420: LD_EXP 4
6424: IFFALSE 6451
// begin if CyrusLoc <> 6 then
6426: LD_EXP 42
6430: PUSH
6431: LD_INT 6
6433: NONEQUAL
6434: IFFALSE 6451
// PlaceUnitArea ( Cyrus , Center_am_b , false ) ;
6436: LD_EXP 4
6440: PPUSH
6441: LD_INT 13
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL_OW 49
// end ; Lisa = CreateCharacter ( Lisa ) ;
6451: LD_ADDR_EXP 5
6455: PUSH
6456: LD_STRING Lisa
6458: PPUSH
6459: CALL_OW 34
6463: ST_TO_ADDR
// if Lisa and Woman_in_am14 <> 2 then
6464: LD_EXP 5
6468: PUSH
6469: LD_EXP 36
6473: PUSH
6474: LD_INT 2
6476: NONEQUAL
6477: AND
6478: IFFALSE 6505
// begin if LisaLoc <> 6 then
6480: LD_EXP 43
6484: PUSH
6485: LD_INT 6
6487: NONEQUAL
6488: IFFALSE 6505
// PlaceUnitArea ( Lisa , Center_am_b , false ) ;
6490: LD_EXP 5
6494: PPUSH
6495: LD_INT 13
6497: PPUSH
6498: LD_INT 0
6500: PPUSH
6501: CALL_OW 49
// end ; Frank = CreateCharacter ( Frank ) ;
6505: LD_ADDR_EXP 6
6509: PUSH
6510: LD_STRING Frank
6512: PPUSH
6513: CALL_OW 34
6517: ST_TO_ADDR
// if Frank then
6518: LD_EXP 6
6522: IFFALSE 6549
// begin if FrankLoc <> 6 then
6524: LD_EXP 44
6528: PUSH
6529: LD_INT 6
6531: NONEQUAL
6532: IFFALSE 6549
// PlaceUnitArea ( Frank , Center_am_b , false ) ;
6534: LD_EXP 6
6538: PPUSH
6539: LD_INT 13
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 49
// end ; Brown = CreateCharacter ( Brown ) ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_STRING Brown
6556: PPUSH
6557: CALL_OW 34
6561: ST_TO_ADDR
// if Brown then
6562: LD_EXP 7
6566: IFFALSE 6593
// begin if BrownLoc <> 6 then
6568: LD_EXP 45
6572: PUSH
6573: LD_INT 6
6575: NONEQUAL
6576: IFFALSE 6593
// PlaceUnitArea ( Brown , Center_am_b , false ) ;
6578: LD_EXP 7
6582: PPUSH
6583: LD_INT 13
6585: PPUSH
6586: LD_INT 0
6588: PPUSH
6589: CALL_OW 49
// end ; Donaldson = CreateCharacter ( Donaldson ) ;
6593: LD_ADDR_EXP 8
6597: PUSH
6598: LD_STRING Donaldson
6600: PPUSH
6601: CALL_OW 34
6605: ST_TO_ADDR
// if Donaldson then
6606: LD_EXP 8
6610: IFFALSE 6637
// begin if DonaldsonLoc <> 6 then
6612: LD_EXP 46
6616: PUSH
6617: LD_INT 6
6619: NONEQUAL
6620: IFFALSE 6637
// PlaceUnitArea ( Donaldson , Center_am_b , false ) ;
6622: LD_EXP 8
6626: PPUSH
6627: LD_INT 13
6629: PPUSH
6630: LD_INT 0
6632: PPUSH
6633: CALL_OW 49
// end ; Gladstone = CreateCharacter ( Gladstone ) ;
6637: LD_ADDR_EXP 9
6641: PUSH
6642: LD_STRING Gladstone
6644: PPUSH
6645: CALL_OW 34
6649: ST_TO_ADDR
// if Gladstone then
6650: LD_EXP 9
6654: IFFALSE 6681
// begin if GladstoneLoc <> 6 then
6656: LD_EXP 48
6660: PUSH
6661: LD_INT 6
6663: NONEQUAL
6664: IFFALSE 6681
// PlaceUnitArea ( Gladstone , Center_am_b , false ) ;
6666: LD_EXP 9
6670: PPUSH
6671: LD_INT 13
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 49
// end ; Denis = CreateCharacter ( Denis ) ;
6681: LD_ADDR_EXP 11
6685: PUSH
6686: LD_STRING Denis
6688: PPUSH
6689: CALL_OW 34
6693: ST_TO_ADDR
// if Denis then
6694: LD_EXP 11
6698: IFFALSE 6725
// begin if DenisLoc <> 6 then
6700: LD_EXP 52
6704: PUSH
6705: LD_INT 6
6707: NONEQUAL
6708: IFFALSE 6725
// PlaceUnitArea ( Denis , Center_am_b , false ) ;
6710: LD_EXP 11
6714: PPUSH
6715: LD_INT 13
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 49
// end ; Cornell = CreateCharacter ( Cornell ) ;
6725: LD_ADDR_EXP 10
6729: PUSH
6730: LD_STRING Cornell
6732: PPUSH
6733: CALL_OW 34
6737: ST_TO_ADDR
// if Cornell then
6738: LD_EXP 10
6742: IFFALSE 6769
// begin if CornellLoc <> 6 then
6744: LD_EXP 53
6748: PUSH
6749: LD_INT 6
6751: NONEQUAL
6752: IFFALSE 6769
// PlaceUnitArea ( Cornell , Center_am_b , false ) ;
6754: LD_EXP 10
6758: PPUSH
6759: LD_INT 13
6761: PPUSH
6762: LD_INT 0
6764: PPUSH
6765: CALL_OW 49
// end ; Yamoko = CreateCharacter ( Yamoko ) ;
6769: LD_ADDR_EXP 14
6773: PUSH
6774: LD_STRING Yamoko
6776: PPUSH
6777: CALL_OW 34
6781: ST_TO_ADDR
// if Yamoko then
6782: LD_EXP 14
6786: IFFALSE 6813
// begin if YamokoLoc <> 6 then
6788: LD_EXP 50
6792: PUSH
6793: LD_INT 6
6795: NONEQUAL
6796: IFFALSE 6813
// PlaceUnitArea ( Yamoko , Center_am_b , false ) ;
6798: LD_EXP 14
6802: PPUSH
6803: LD_INT 13
6805: PPUSH
6806: LD_INT 0
6808: PPUSH
6809: CALL_OW 49
// end ; Gary = CreateCharacter ( Gary ) ;
6813: LD_ADDR_EXP 15
6817: PUSH
6818: LD_STRING Gary
6820: PPUSH
6821: CALL_OW 34
6825: ST_TO_ADDR
// if Gary then
6826: LD_EXP 15
6830: IFFALSE 6857
// begin if GaryLoc <> 6 then
6832: LD_EXP 51
6836: PUSH
6837: LD_INT 6
6839: NONEQUAL
6840: IFFALSE 6857
// PlaceUnitArea ( Gary , Center_am_b , false ) ;
6842: LD_EXP 15
6846: PPUSH
6847: LD_INT 13
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: CALL_OW 49
// end ; VanHouten = CreateCharacter ( VanHouten ) ;
6857: LD_ADDR_EXP 24
6861: PUSH
6862: LD_STRING VanHouten
6864: PPUSH
6865: CALL_OW 34
6869: ST_TO_ADDR
// if VanHouten then
6870: LD_EXP 24
6874: IFFALSE 6901
// begin if VanHoutenLoc <> 6 then
6876: LD_EXP 47
6880: PUSH
6881: LD_INT 6
6883: NONEQUAL
6884: IFFALSE 6901
// PlaceUnitArea ( VanHoutenLoc , Center_am_b , false ) ;
6886: LD_EXP 47
6890: PPUSH
6891: LD_INT 13
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// end ; Stevens = CreateCharacter ( Stevens ) ;
6901: LD_ADDR_EXP 17
6905: PUSH
6906: LD_STRING Stevens
6908: PPUSH
6909: CALL_OW 34
6913: ST_TO_ADDR
// if not ( Stevens ) then
6914: LD_EXP 17
6918: NOT
6919: IFFALSE 6972
// begin PrepareScientist ( 1 , 9 ) ;
6921: LD_INT 1
6923: PPUSH
6924: LD_INT 9
6926: PPUSH
6927: CALL_OW 384
// hc_name = Baker Smith ;
6931: LD_ADDR_OWVAR 26
6935: PUSH
6936: LD_STRING Baker Smith
6938: ST_TO_ADDR
// Baker = CreateHuman ;
6939: LD_ADDR_EXP 23
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// SetSkill ( Baker , skill_scientistic , 8 ) ;
6949: LD_EXP 23
6953: PPUSH
6954: LD_INT 4
6956: PPUSH
6957: LD_INT 8
6959: PPUSH
6960: CALL_OW 237
// hc_name =  ;
6964: LD_ADDR_OWVAR 26
6968: PUSH
6969: LD_STRING 
6971: ST_TO_ADDR
// end ; Coonie = CreateCharacter ( Coonie ) ;
6972: LD_ADDR_EXP 18
6976: PUSH
6977: LD_STRING Coonie
6979: PPUSH
6980: CALL_OW 34
6984: ST_TO_ADDR
// if Coonie and Woman_in_am14 <> 3 then
6985: LD_EXP 18
6989: PUSH
6990: LD_EXP 36
6994: PUSH
6995: LD_INT 3
6997: NONEQUAL
6998: AND
6999: IFFALSE 7010
// begin DestroyUnit ( Coonie ) ;
7001: LD_EXP 18
7005: PPUSH
7006: CALL_OW 65
// end ; if not debug_constant then
7010: LD_EXP 195
7014: NOT
7015: IFFALSE 7032
// Joan = CreateCharacter ( Joan ) else
7017: LD_ADDR_EXP 12
7021: PUSH
7022: LD_STRING Joan
7024: PPUSH
7025: CALL_OW 34
7029: ST_TO_ADDR
7030: GO 7062
// begin hc_name = Joan ;
7032: LD_ADDR_OWVAR 26
7036: PUSH
7037: LD_STRING Joan
7039: ST_TO_ADDR
// hc_sex = sex_female ;
7040: LD_ADDR_OWVAR 27
7044: PUSH
7045: LD_INT 2
7047: ST_TO_ADDR
// Joan = CreateHuman ;
7048: LD_ADDR_EXP 12
7052: PUSH
7053: CALL_OW 44
7057: ST_TO_ADDR
// InitHC ;
7058: CALL_OW 19
// end ; All_americans = FilterAllUnits ( [ [ f_side , americans1 ] , [ f_type , unit_human ] ] ) diff Powell ;
7062: LD_ADDR_EXP 61
7066: PUSH
7067: LD_INT 22
7069: PUSH
7070: LD_EXP 177
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 21
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL_OW 69
7097: PUSH
7098: LD_EXP 2
7102: DIFF
7103: ST_TO_ADDR
// Named_americans = All_americans ;
7104: LD_ADDR_EXP 62
7108: PUSH
7109: LD_EXP 61
7113: ST_TO_ADDR
// if Named_americans > 12 then
7114: LD_EXP 62
7118: PUSH
7119: LD_INT 12
7121: GREATER
7122: IFFALSE 7140
// Number_of_all = Named_americans + 8 else
7124: LD_ADDR_VAR 0 10
7128: PUSH
7129: LD_EXP 62
7133: PUSH
7134: LD_INT 8
7136: PLUS
7137: ST_TO_ADDR
7138: GO 7148
// Number_of_all = 20 ;
7140: LD_ADDR_VAR 0 10
7144: PUSH
7145: LD_INT 20
7147: ST_TO_ADDR
// while ( OtherNotJMM <> 0 ) and ( All_Americans < Number_of_all ) do
7148: LD_EXP 31
7152: PUSH
7153: LD_INT 0
7155: NONEQUAL
7156: PUSH
7157: LD_EXP 61
7161: PUSH
7162: LD_VAR 0 10
7166: LESS
7167: AND
7168: IFFALSE 7254
// begin Selected_unit = FindMaxSumSkill ( OtherNotJMM , 0 ) ;
7170: LD_ADDR_VAR 0 11
7174: PUSH
7175: LD_EXP 31
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL 18088 0 2
7187: ST_TO_ADDR
// OtherNotJMM = OtherNotJMM diff Selected_unit ;
7188: LD_ADDR_EXP 31
7192: PUSH
7193: LD_EXP 31
7197: PUSH
7198: LD_VAR 0 11
7202: DIFF
7203: ST_TO_ADDR
// if GetNation ( Selected_unit ) <> 1 then
7204: LD_VAR 0 11
7208: PPUSH
7209: CALL_OW 248
7213: PUSH
7214: LD_INT 1
7216: NONEQUAL
7217: IFFALSE 7221
// continue ;
7219: GO 7148
// All_Americans = All_americans ^ Selected_unit ;
7221: LD_ADDR_EXP 61
7225: PUSH
7226: LD_EXP 61
7230: PUSH
7231: LD_VAR 0 11
7235: ADD
7236: ST_TO_ADDR
// PlaceUnitArea ( Selected_unit , Center_am_b , false ) ;
7237: LD_VAR 0 11
7241: PPUSH
7242: LD_INT 13
7244: PPUSH
7245: LD_INT 0
7247: PPUSH
7248: CALL_OW 49
// end ;
7252: GO 7148
// if All_americans < Number_of_all then
7254: LD_EXP 61
7258: PUSH
7259: LD_VAR 0 10
7263: LESS
7264: IFFALSE 7429
// for i = All_americans + 1 to Number_of_all do
7266: LD_ADDR_VAR 0 2
7270: PUSH
7271: DOUBLE
7272: LD_EXP 61
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: DEC
7281: ST_TO_ADDR
7282: LD_VAR 0 10
7286: PUSH
7287: FOR_TO
7288: IFFALSE 7427
// begin case ( i mod 4 ) of 0 :
7290: LD_VAR 0 2
7294: PUSH
7295: LD_INT 4
7297: MOD
7298: PUSH
7299: LD_INT 0
7301: DOUBLE
7302: EQUAL
7303: IFTRUE 7307
7305: GO 7320
7307: POP
// begin PrepareSoldier ( sex_male , 7 ) ;
7308: LD_INT 1
7310: PPUSH
7311: LD_INT 7
7313: PPUSH
7314: CALL_OW 381
// end ; 1 :
7318: GO 7384
7320: LD_INT 1
7322: DOUBLE
7323: EQUAL
7324: IFTRUE 7328
7326: GO 7341
7328: POP
// begin PrepareScientist ( sex_male , 7 ) ;
7329: LD_INT 1
7331: PPUSH
7332: LD_INT 7
7334: PPUSH
7335: CALL_OW 384
// end ; 2 :
7339: GO 7384
7341: LD_INT 2
7343: DOUBLE
7344: EQUAL
7345: IFTRUE 7349
7347: GO 7362
7349: POP
// begin PrepareMechanic ( sex_male , 7 ) ;
7350: LD_INT 1
7352: PPUSH
7353: LD_INT 7
7355: PPUSH
7356: CALL_OW 383
// end ; 3 :
7360: GO 7384
7362: LD_INT 3
7364: DOUBLE
7365: EQUAL
7366: IFTRUE 7370
7368: GO 7383
7370: POP
// begin PrepareEngineer ( sex_male , 7 ) ;
7371: LD_INT 1
7373: PPUSH
7374: LD_INT 7
7376: PPUSH
7377: CALL_OW 382
// end ; end ;
7381: GO 7384
7383: POP
// New_person = CreateHuman ;
7384: LD_ADDR_VAR 0 7
7388: PUSH
7389: CALL_OW 44
7393: ST_TO_ADDR
// All_americans = All_americans ^ New_person ;
7394: LD_ADDR_EXP 61
7398: PUSH
7399: LD_EXP 61
7403: PUSH
7404: LD_VAR 0 7
7408: ADD
7409: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_am_b , false ) ;
7410: LD_VAR 0 7
7414: PPUSH
7415: LD_INT 13
7417: PPUSH
7418: LD_INT 0
7420: PPUSH
7421: CALL_OW 49
// end ;
7425: GO 7287
7427: POP
7428: POP
// Remaining_Powells = All_americans ;
7429: LD_ADDR_EXP 64
7433: PUSH
7434: LD_EXP 61
7438: ST_TO_ADDR
// uc_nation = nation_russian ;
7439: LD_ADDR_OWVAR 21
7443: PUSH
7444: LD_INT 3
7446: ST_TO_ADDR
// uc_side = russians ;
7447: LD_ADDR_OWVAR 20
7451: PUSH
7452: LD_EXP 178
7456: ST_TO_ADDR
// uc_nation = nation_russian ;
7457: LD_ADDR_OWVAR 21
7461: PUSH
7462: LD_INT 3
7464: ST_TO_ADDR
// Platonov = NewCharacter ( Platonov ) ;
7465: LD_ADDR_EXP 26
7469: PUSH
7470: LD_STRING Platonov
7472: PPUSH
7473: CALL_OW 25
7477: ST_TO_ADDR
// if Platonov then
7478: LD_EXP 26
7482: IFFALSE 7546
// begin SetSkill ( Platonov , skill_combat , 10 ) ;
7484: LD_EXP 26
7488: PPUSH
7489: LD_INT 1
7491: PPUSH
7492: LD_INT 10
7494: PPUSH
7495: CALL_OW 237
// SetSkill ( Platonov , skill_engineering , 6 ) ;
7499: LD_EXP 26
7503: PPUSH
7504: LD_INT 2
7506: PPUSH
7507: LD_INT 6
7509: PPUSH
7510: CALL_OW 237
// SetSkill ( Platonov , skill_mechanical , 10 ) ;
7514: LD_EXP 26
7518: PPUSH
7519: LD_INT 3
7521: PPUSH
7522: LD_INT 10
7524: PPUSH
7525: CALL_OW 237
// SetSkill ( Platonov , skill_scientistic , 2 ) ;
7529: LD_EXP 26
7533: PPUSH
7534: LD_INT 4
7536: PPUSH
7537: LD_INT 2
7539: PPUSH
7540: CALL_OW 237
// end else
7544: GO 7634
// begin hc_sex = sex_male ;
7546: LD_ADDR_OWVAR 27
7550: PUSH
7551: LD_INT 1
7553: ST_TO_ADDR
// hc_class = class_soldier ;
7554: LD_ADDR_OWVAR 28
7558: PUSH
7559: LD_INT 1
7561: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 10 , 3 ] ;
7562: LD_ADDR_OWVAR 31
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 6
7572: PUSH
7573: LD_INT 10
7575: PUSH
7576: LD_INT 3
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
7585: LD_ADDR_OWVAR 29
7589: PUSH
7590: LD_INT 10
7592: PUSH
7593: LD_INT 10
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: ST_TO_ADDR
// hc_name = Platonov ;
7600: LD_ADDR_OWVAR 26
7604: PUSH
7605: LD_STRING Platonov
7607: ST_TO_ADDR
// Platonov = CreateHuman ;
7608: LD_ADDR_EXP 26
7612: PUSH
7613: CALL_OW 44
7617: ST_TO_ADDR
// hc_name =  ;
7618: LD_ADDR_OWVAR 26
7622: PUSH
7623: LD_STRING 
7625: ST_TO_ADDR
// hc_gallery =  ;
7626: LD_ADDR_OWVAR 33
7630: PUSH
7631: LD_STRING 
7633: ST_TO_ADDR
// end ; uc_nation = nation_russian ;
7634: LD_ADDR_OWVAR 21
7638: PUSH
7639: LD_INT 3
7641: ST_TO_ADDR
// Kovaljuk = NewCharacter ( Kovaljuk ) ;
7642: LD_ADDR_EXP 27
7646: PUSH
7647: LD_STRING Kovaljuk
7649: PPUSH
7650: CALL_OW 25
7654: ST_TO_ADDR
// if Kovaljuk then
7655: LD_EXP 27
7659: IFFALSE 7723
// begin SetSkill ( Kovaljuk , skill_combat , 8 ) ;
7661: LD_EXP 27
7665: PPUSH
7666: LD_INT 1
7668: PPUSH
7669: LD_INT 8
7671: PPUSH
7672: CALL_OW 237
// SetSkill ( Kovaljuk , skill_engineering , 10 ) ;
7676: LD_EXP 27
7680: PPUSH
7681: LD_INT 2
7683: PPUSH
7684: LD_INT 10
7686: PPUSH
7687: CALL_OW 237
// SetSkill ( Kovaljuk , skill_mechanical , 4 ) ;
7691: LD_EXP 27
7695: PPUSH
7696: LD_INT 3
7698: PPUSH
7699: LD_INT 4
7701: PPUSH
7702: CALL_OW 237
// SetSkill ( Kovaljuk , skill_scientistic , 3 ) ;
7706: LD_EXP 27
7710: PPUSH
7711: LD_INT 4
7713: PPUSH
7714: LD_INT 3
7716: PPUSH
7717: CALL_OW 237
// end else
7721: GO 7827
// begin hc_sex = sex_male ;
7723: LD_ADDR_OWVAR 27
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// hc_class = class_soldier ;
7731: LD_ADDR_OWVAR 28
7735: PUSH
7736: LD_INT 1
7738: ST_TO_ADDR
// hc_skills = [ 8 , 10 , 4 , 3 ] ;
7739: LD_ADDR_OWVAR 31
7743: PUSH
7744: LD_INT 8
7746: PUSH
7747: LD_INT 10
7749: PUSH
7750: LD_INT 4
7752: PUSH
7753: LD_INT 3
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
7762: LD_ADDR_OWVAR 29
7766: PUSH
7767: LD_INT 10
7769: PUSH
7770: LD_INT 10
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: ST_TO_ADDR
// hc_name = Kovaljuk ;
7777: LD_ADDR_OWVAR 26
7781: PUSH
7782: LD_STRING Kovaljuk
7784: ST_TO_ADDR
// hc_gallery := ru ;
7785: LD_ADDR_OWVAR 33
7789: PUSH
7790: LD_STRING ru
7792: ST_TO_ADDR
// hc_face_number := 6 ;
7793: LD_ADDR_OWVAR 34
7797: PUSH
7798: LD_INT 6
7800: ST_TO_ADDR
// Kovaljuk = CreateHuman ;
7801: LD_ADDR_EXP 27
7805: PUSH
7806: CALL_OW 44
7810: ST_TO_ADDR
// hc_name =  ;
7811: LD_ADDR_OWVAR 26
7815: PUSH
7816: LD_STRING 
7818: ST_TO_ADDR
// hc_gallery =  ;
7819: LD_ADDR_OWVAR 33
7823: PUSH
7824: LD_STRING 
7826: ST_TO_ADDR
// end ; for Un = 1 to Number_of_russian_soldiers do
7827: LD_ADDR_VAR 0 3
7831: PUSH
7832: DOUBLE
7833: LD_INT 1
7835: DEC
7836: ST_TO_ADDR
7837: LD_EXP 133
7841: PUSH
7842: FOR_TO
7843: IFFALSE 7931
// begin if i in [ 1 , 2 ] then
7845: LD_VAR 0 2
7849: PUSH
7850: LD_INT 1
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: IN
7860: IFFALSE 7876
// PrepareSoldier ( sex_male , human_difficulty_skill ) else
7862: LD_INT 1
7864: PPUSH
7865: LD_EXP 184
7869: PPUSH
7870: CALL_OW 381
7874: GO 7888
// PrepareSoldier ( 0 , human_difficulty_skill ) ;
7876: LD_INT 0
7878: PPUSH
7879: LD_EXP 184
7883: PPUSH
7884: CALL_OW 381
// New_person = CreateHuman ;
7888: LD_ADDR_VAR 0 7
7892: PUSH
7893: CALL_OW 44
7897: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ New_person ;
7898: LD_ADDR_EXP 107
7902: PUSH
7903: LD_EXP 107
7907: PUSH
7908: LD_VAR 0 7
7912: ADD
7913: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
7914: LD_VAR 0 7
7918: PPUSH
7919: LD_INT 16
7921: PPUSH
7922: LD_INT 0
7924: PPUSH
7925: CALL_OW 49
// end ;
7929: GO 7842
7931: POP
7932: POP
// for Un = 1 to Number_of_russian_scientists do
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: DOUBLE
7939: LD_INT 1
7941: DEC
7942: ST_TO_ADDR
7943: LD_EXP 134
7947: PUSH
7948: FOR_TO
7949: IFFALSE 8006
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
7951: LD_INT 0
7953: PPUSH
7954: LD_EXP 184
7958: PPUSH
7959: CALL_OW 384
// New_person = CreateHuman ;
7963: LD_ADDR_VAR 0 7
7967: PUSH
7968: CALL_OW 44
7972: ST_TO_ADDR
// Russian_scientists = Russian_scientists ^ New_person ;
7973: LD_ADDR_EXP 108
7977: PUSH
7978: LD_EXP 108
7982: PUSH
7983: LD_VAR 0 7
7987: ADD
7988: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
7989: LD_VAR 0 7
7993: PPUSH
7994: LD_INT 16
7996: PPUSH
7997: LD_INT 0
7999: PPUSH
8000: CALL_OW 49
// end ;
8004: GO 7948
8006: POP
8007: POP
// for Un = 1 to Number_of_russian_engineers do
8008: LD_ADDR_VAR 0 3
8012: PUSH
8013: DOUBLE
8014: LD_INT 1
8016: DEC
8017: ST_TO_ADDR
8018: LD_EXP 136
8022: PUSH
8023: FOR_TO
8024: IFFALSE 8081
// begin PrepareEngineer ( 0 , human_difficulty_skill ) ;
8026: LD_INT 0
8028: PPUSH
8029: LD_EXP 184
8033: PPUSH
8034: CALL_OW 382
// New_person = CreateHuman ;
8038: LD_ADDR_VAR 0 7
8042: PUSH
8043: CALL_OW 44
8047: ST_TO_ADDR
// Russian_engineers = Russian_engineers ^ New_person ;
8048: LD_ADDR_EXP 109
8052: PUSH
8053: LD_EXP 109
8057: PUSH
8058: LD_VAR 0 7
8062: ADD
8063: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
8064: LD_VAR 0 7
8068: PPUSH
8069: LD_INT 16
8071: PPUSH
8072: LD_INT 0
8074: PPUSH
8075: CALL_OW 49
// end ;
8079: GO 8023
8081: POP
8082: POP
// for Un = 1 to Number_of_russian_mechanics do
8083: LD_ADDR_VAR 0 3
8087: PUSH
8088: DOUBLE
8089: LD_INT 1
8091: DEC
8092: ST_TO_ADDR
8093: LD_EXP 135
8097: PUSH
8098: FOR_TO
8099: IFFALSE 8156
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
8101: LD_INT 0
8103: PPUSH
8104: LD_EXP 184
8108: PPUSH
8109: CALL_OW 383
// New_person = CreateHuman ;
8113: LD_ADDR_VAR 0 7
8117: PUSH
8118: CALL_OW 44
8122: ST_TO_ADDR
// Russian_Mechanics = Russian_Mechanics ^ New_person ;
8123: LD_ADDR_EXP 110
8127: PUSH
8128: LD_EXP 110
8132: PUSH
8133: LD_VAR 0 7
8137: ADD
8138: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_INT 16
8146: PPUSH
8147: LD_INT 0
8149: PPUSH
8150: CALL_OW 49
// end ;
8154: GO 8098
8156: POP
8157: POP
// All_russians = Russian_soldiers ^ Russian_scientists ^ Russian_Engineers ^ Russian_mechanics ;
8158: LD_ADDR_EXP 111
8162: PUSH
8163: LD_EXP 107
8167: PUSH
8168: LD_EXP 108
8172: ADD
8173: PUSH
8174: LD_EXP 109
8178: ADD
8179: PUSH
8180: LD_EXP 110
8184: ADD
8185: ST_TO_ADDR
// uc_nation = nation_arabian ;
8186: LD_ADDR_OWVAR 21
8190: PUSH
8191: LD_INT 2
8193: ST_TO_ADDR
// uc_side = arabians1 ;
8194: LD_ADDR_OWVAR 20
8198: PUSH
8199: LD_EXP 181
8203: ST_TO_ADDR
// Omar = NewCharacter ( Omar ) ;
8204: LD_ADDR_EXP 28
8208: PUSH
8209: LD_STRING Omar
8211: PPUSH
8212: CALL_OW 25
8216: ST_TO_ADDR
// if not ( Omar ) then
8217: LD_EXP 28
8221: NOT
8222: IFFALSE 8224
// begin end ; RemoveUnit ( Masto ) ;
8224: LD_INT 147
8226: PPUSH
8227: CALL_OW 64
// PlaceHumanInUnit ( Omar , Masto ) ;
8231: LD_EXP 28
8235: PPUSH
8236: LD_INT 147
8238: PPUSH
8239: CALL_OW 52
// Heike = NewCharacter ( Heike ) ;
8243: LD_ADDR_EXP 29
8247: PUSH
8248: LD_STRING Heike
8250: PPUSH
8251: CALL_OW 25
8255: ST_TO_ADDR
// if Heike then
8256: LD_EXP 29
8260: IFFALSE 8276
// begin SetClass ( Heike , class_mortar ) ;
8262: LD_EXP 29
8266: PPUSH
8267: LD_INT 8
8269: PPUSH
8270: CALL_OW 336
// end else
8274: GO 8276
// begin end ; Omar_Scientists = [ ] ;
8276: LD_ADDR_EXP 73
8280: PUSH
8281: EMPTY
8282: ST_TO_ADDR
// for i = 1 to 2 do
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: DOUBLE
8289: LD_INT 1
8291: DEC
8292: ST_TO_ADDR
8293: LD_INT 2
8295: PUSH
8296: FOR_TO
8297: IFFALSE 8339
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
8299: LD_INT 0
8301: PPUSH
8302: LD_EXP 184
8306: PPUSH
8307: CALL_OW 384
// New_Person = CreateHuman ;
8311: LD_ADDR_VAR 0 7
8315: PUSH
8316: CALL_OW 44
8320: ST_TO_ADDR
// Omar_Scientists = Omar_Scientists ^ New_Person ;
8321: LD_ADDR_EXP 73
8325: PUSH
8326: LD_EXP 73
8330: PUSH
8331: LD_VAR 0 7
8335: ADD
8336: ST_TO_ADDR
// end ;
8337: GO 8296
8339: POP
8340: POP
// Omar_Soldiers = [ ] ;
8341: LD_ADDR_EXP 72
8345: PUSH
8346: EMPTY
8347: ST_TO_ADDR
// for i = 1 to Number_Of_Omar_Soldiers do
8348: LD_ADDR_VAR 0 2
8352: PUSH
8353: DOUBLE
8354: LD_INT 1
8356: DEC
8357: ST_TO_ADDR
8358: LD_EXP 75
8362: PUSH
8363: FOR_TO
8364: IFFALSE 8428
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
8366: LD_INT 0
8368: PPUSH
8369: LD_EXP 184
8373: PPUSH
8374: CALL_OW 381
// New_Person = CreateHuman ;
8378: LD_ADDR_VAR 0 7
8382: PUSH
8383: CALL_OW 44
8387: ST_TO_ADDR
// if i = 1 then
8388: LD_VAR 0 2
8392: PUSH
8393: LD_INT 1
8395: EQUAL
8396: IFFALSE 8410
// SetClass ( New_Person , class_mortar ) ;
8398: LD_VAR 0 7
8402: PPUSH
8403: LD_INT 8
8405: PPUSH
8406: CALL_OW 336
// Omar_Soldiers = Omar_Soldiers ^ New_Person ;
8410: LD_ADDR_EXP 72
8414: PUSH
8415: LD_EXP 72
8419: PUSH
8420: LD_VAR 0 7
8424: ADD
8425: ST_TO_ADDR
// end ;
8426: GO 8363
8428: POP
8429: POP
// for i = 1 to Number_of_Omar_Hovercrafts do
8430: LD_ADDR_VAR 0 2
8434: PUSH
8435: DOUBLE
8436: LD_INT 1
8438: DEC
8439: ST_TO_ADDR
8440: LD_EXP 76
8444: PUSH
8445: FOR_TO
8446: IFFALSE 8534
// begin uc_side = arabians1 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_EXP 181
8457: ST_TO_ADDR
// uc_nation = nation_arabian ;
8458: LD_ADDR_OWVAR 21
8462: PUSH
8463: LD_INT 2
8465: ST_TO_ADDR
// uc_direction = 2 ;
8466: LD_ADDR_OWVAR 24
8470: PUSH
8471: LD_INT 2
8473: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
8474: LD_ADDR_OWVAR 37
8478: PUSH
8479: LD_INT 11
8481: ST_TO_ADDR
// vc_engine = engine_combustion ;
8482: LD_ADDR_OWVAR 39
8486: PUSH
8487: LD_INT 1
8489: ST_TO_ADDR
// vc_control = control_manual ;
8490: LD_ADDR_OWVAR 38
8494: PUSH
8495: LD_INT 1
8497: ST_TO_ADDR
// vc_weapon = ar_double_machine_gun ;
8498: LD_ADDR_OWVAR 40
8502: PUSH
8503: LD_INT 24
8505: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8506: LD_ADDR_VAR 0 12
8510: PUSH
8511: CALL_OW 45
8515: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8516: LD_ADDR_EXP 74
8520: PUSH
8521: LD_EXP 74
8525: PUSH
8526: LD_VAR 0 12
8530: ADD
8531: ST_TO_ADDR
// end ;
8532: GO 8445
8534: POP
8535: POP
// for i = 1 to Number_of_Omar_Flamethrowers do
8536: LD_ADDR_VAR 0 2
8540: PUSH
8541: DOUBLE
8542: LD_INT 1
8544: DEC
8545: ST_TO_ADDR
8546: LD_EXP 77
8550: PUSH
8551: FOR_TO
8552: IFFALSE 8614
// begin vc_chassis = ar_half_tracked ;
8554: LD_ADDR_OWVAR 37
8558: PUSH
8559: LD_INT 14
8561: ST_TO_ADDR
// vc_engine = engine_combustion ;
8562: LD_ADDR_OWVAR 39
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// vc_control = control_manual ;
8570: LD_ADDR_OWVAR 38
8574: PUSH
8575: LD_INT 1
8577: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
8578: LD_ADDR_OWVAR 40
8582: PUSH
8583: LD_INT 26
8585: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8586: LD_ADDR_VAR 0 12
8590: PUSH
8591: CALL_OW 45
8595: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8596: LD_ADDR_EXP 74
8600: PUSH
8601: LD_EXP 74
8605: PUSH
8606: LD_VAR 0 12
8610: ADD
8611: ST_TO_ADDR
// end ;
8612: GO 8551
8614: POP
8615: POP
// for i = 1 to Number_of_Omar_RocketLaunchers do
8616: LD_ADDR_VAR 0 2
8620: PUSH
8621: DOUBLE
8622: LD_INT 1
8624: DEC
8625: ST_TO_ADDR
8626: LD_EXP 78
8630: PUSH
8631: FOR_TO
8632: IFFALSE 8694
// begin vc_chassis = ar_half_tracked ;
8634: LD_ADDR_OWVAR 37
8638: PUSH
8639: LD_INT 14
8641: ST_TO_ADDR
// vc_engine = engine_combustion ;
8642: LD_ADDR_OWVAR 39
8646: PUSH
8647: LD_INT 1
8649: ST_TO_ADDR
// vc_control = control_manual ;
8650: LD_ADDR_OWVAR 38
8654: PUSH
8655: LD_INT 1
8657: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
8658: LD_ADDR_OWVAR 40
8662: PUSH
8663: LD_INT 28
8665: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8666: LD_ADDR_VAR 0 12
8670: PUSH
8671: CALL_OW 45
8675: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8676: LD_ADDR_EXP 74
8680: PUSH
8681: LD_EXP 74
8685: PUSH
8686: LD_VAR 0 12
8690: ADD
8691: ST_TO_ADDR
// end ;
8692: GO 8631
8694: POP
8695: POP
// for Un in Omar_vehicles do
8696: LD_ADDR_VAR 0 3
8700: PUSH
8701: LD_EXP 74
8705: PUSH
8706: FOR_IN
8707: IFFALSE 8747
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
8709: LD_INT 0
8711: PPUSH
8712: LD_EXP 184
8716: PPUSH
8717: CALL_OW 383
// New_Person = CreateHuman ;
8721: LD_ADDR_VAR 0 7
8725: PUSH
8726: CALL_OW 44
8730: ST_TO_ADDR
// PlaceHumanInUnit ( New_Person , Un ) ;
8731: LD_VAR 0 7
8735: PPUSH
8736: LD_VAR 0 3
8740: PPUSH
8741: CALL_OW 52
// end ;
8745: GO 8706
8747: POP
8748: POP
// uc_nation = nation_arabian ;
8749: LD_ADDR_OWVAR 21
8753: PUSH
8754: LD_INT 2
8756: ST_TO_ADDR
// uc_side = arabians ;
8757: LD_ADDR_OWVAR 20
8761: PUSH
8762: LD_EXP 180
8766: ST_TO_ADDR
// Kurt = CreateCharacter ( Kurt ) ;
8767: LD_ADDR_EXP 13
8771: PUSH
8772: LD_STRING Kurt
8774: PPUSH
8775: CALL_OW 34
8779: ST_TO_ADDR
// if Kurt then
8780: LD_EXP 13
8784: IFFALSE 8856
// begin Really_Kurt = true ;
8786: LD_ADDR_EXP 205
8790: PUSH
8791: LD_INT 1
8793: ST_TO_ADDR
// SetSkill ( Kurt , skill_combat , 8 ) ;
8794: LD_EXP 13
8798: PPUSH
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 8
8804: PPUSH
8805: CALL_OW 237
// SetSkill ( Kurt , skill_engineering , 4 ) ;
8809: LD_EXP 13
8813: PPUSH
8814: LD_INT 2
8816: PPUSH
8817: LD_INT 4
8819: PPUSH
8820: CALL_OW 237
// SetSkill ( Kurt , skill_mechanical , 3 ) ;
8824: LD_EXP 13
8828: PPUSH
8829: LD_INT 3
8831: PPUSH
8832: LD_INT 3
8834: PPUSH
8835: CALL_OW 237
// SetSkill ( Kurt , skill_scientistic , 5 ) ;
8839: LD_EXP 13
8843: PPUSH
8844: LD_INT 4
8846: PPUSH
8847: LD_INT 5
8849: PPUSH
8850: CALL_OW 237
// end else
8854: GO 8928
// begin Really_Kurt = false ;
8856: LD_ADDR_EXP 205
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// hc_sex = sex_male ;
8864: LD_ADDR_OWVAR 27
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// hc_class = class_mechanic ;
8872: LD_ADDR_OWVAR 28
8876: PUSH
8877: LD_INT 3
8879: ST_TO_ADDR
// hc_skills = [ 8 , 4 , 3 , 5 ] ;
8880: LD_ADDR_OWVAR 31
8884: PUSH
8885: LD_INT 8
8887: PUSH
8888: LD_INT 4
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: LD_INT 5
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
8903: LD_ADDR_OWVAR 29
8907: PUSH
8908: LD_INT 10
8910: PUSH
8911: LD_INT 10
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: ST_TO_ADDR
// Kurt = CreateHuman ;
8918: LD_ADDR_EXP 13
8922: PUSH
8923: CALL_OW 44
8927: ST_TO_ADDR
// end ; hc_sex = sex_male ;
8928: LD_ADDR_OWVAR 27
8932: PUSH
8933: LD_INT 1
8935: ST_TO_ADDR
// hc_class = class_mechanic ;
8936: LD_ADDR_OWVAR 28
8940: PUSH
8941: LD_INT 3
8943: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 7 , 3 ] ;
8944: LD_ADDR_OWVAR 31
8948: PUSH
8949: LD_INT 4
8951: PUSH
8952: LD_INT 2
8954: PUSH
8955: LD_INT 7
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
8967: LD_ADDR_OWVAR 29
8971: PUSH
8972: LD_INT 10
8974: PUSH
8975: LD_INT 10
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: ST_TO_ADDR
// hc_name = Ali Hadarach ;
8982: LD_ADDR_OWVAR 26
8986: PUSH
8987: LD_STRING Ali Hadarach
8989: ST_TO_ADDR
// Friend = CreateHuman ;
8990: LD_ADDR_EXP 21
8994: PUSH
8995: CALL_OW 44
8999: ST_TO_ADDR
// hc_name =  ;
9000: LD_ADDR_OWVAR 26
9004: PUSH
9005: LD_STRING 
9007: ST_TO_ADDR
// uc_nation = nation_russian ;
9008: LD_ADDR_OWVAR 21
9012: PUSH
9013: LD_INT 3
9015: ST_TO_ADDR
// Kozlov = NewCharacter ( Kozlov ) ;
9016: LD_ADDR_EXP 22
9020: PUSH
9021: LD_STRING Kozlov
9023: PPUSH
9024: CALL_OW 25
9028: ST_TO_ADDR
// if Kozlov then
9029: LD_EXP 22
9033: IFFALSE 9097
// begin SetSkill ( Kozlov , skill_combat , 2 ) ;
9035: LD_EXP 22
9039: PPUSH
9040: LD_INT 1
9042: PPUSH
9043: LD_INT 2
9045: PPUSH
9046: CALL_OW 237
// SetSkill ( Kozlov , skill_engineering , 8 ) ;
9050: LD_EXP 22
9054: PPUSH
9055: LD_INT 2
9057: PPUSH
9058: LD_INT 8
9060: PPUSH
9061: CALL_OW 237
// SetSkill ( Kozlov , skill_mechanical , 3 ) ;
9065: LD_EXP 22
9069: PPUSH
9070: LD_INT 3
9072: PPUSH
9073: LD_INT 3
9075: PPUSH
9076: CALL_OW 237
// SetSkill ( Kozlov , skill_scientistic , 10 ) ;
9080: LD_EXP 22
9084: PPUSH
9085: LD_INT 4
9087: PPUSH
9088: LD_INT 10
9090: PPUSH
9091: CALL_OW 237
// end else
9095: GO 9201
// begin hc_gallery = ru ;
9097: LD_ADDR_OWVAR 33
9101: PUSH
9102: LD_STRING ru
9104: ST_TO_ADDR
// hc_face_number = 34 ;
9105: LD_ADDR_OWVAR 34
9109: PUSH
9110: LD_INT 34
9112: ST_TO_ADDR
// hc_sex = sex_male ;
9113: LD_ADDR_OWVAR 27
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// hc_class = class_engineer ;
9121: LD_ADDR_OWVAR 28
9125: PUSH
9126: LD_INT 2
9128: ST_TO_ADDR
// hc_skills = [ 2 , 8 , 3 , 10 ] ;
9129: LD_ADDR_OWVAR 31
9133: PUSH
9134: LD_INT 2
9136: PUSH
9137: LD_INT 8
9139: PUSH
9140: LD_INT 3
9142: PUSH
9143: LD_INT 10
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
9152: LD_ADDR_OWVAR 29
9156: PUSH
9157: LD_INT 10
9159: PUSH
9160: LD_INT 10
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: ST_TO_ADDR
// hc_name = Nikita S. Kozlov ;
9167: LD_ADDR_OWVAR 26
9171: PUSH
9172: LD_STRING Nikita S. Kozlov
9174: ST_TO_ADDR
// Kozlov = CreateHuman ;
9175: LD_ADDR_EXP 22
9179: PUSH
9180: CALL_OW 44
9184: ST_TO_ADDR
// hc_name =  ;
9185: LD_ADDR_OWVAR 26
9189: PUSH
9190: LD_STRING 
9192: ST_TO_ADDR
// hc_gallery =  ;
9193: LD_ADDR_OWVAR 33
9197: PUSH
9198: LD_STRING 
9200: ST_TO_ADDR
// end ; uc_nation = nation_arabian ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 2
9208: ST_TO_ADDR
// for Un = 1 to Number_of_Arabian_Soldiers do
9209: LD_ADDR_VAR 0 3
9213: PUSH
9214: DOUBLE
9215: LD_INT 1
9217: DEC
9218: ST_TO_ADDR
9219: LD_EXP 89
9223: PUSH
9224: FOR_TO
9225: IFFALSE 9325
// begin if i in [ 1 , 2 , 3 ] then
9227: LD_VAR 0 2
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: LD_INT 3
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: IN
9246: IFFALSE 9266
// PrepareSoldier ( sex_male , human_difficulty_skill - 1 ) else
9248: LD_INT 1
9250: PPUSH
9251: LD_EXP 184
9255: PUSH
9256: LD_INT 1
9258: MINUS
9259: PPUSH
9260: CALL_OW 381
9264: GO 9282
// PrepareSoldier ( 0 , human_difficulty_skill - 1 ) ;
9266: LD_INT 0
9268: PPUSH
9269: LD_EXP 184
9273: PUSH
9274: LD_INT 1
9276: MINUS
9277: PPUSH
9278: CALL_OW 381
// New_person = CreateHuman ;
9282: LD_ADDR_VAR 0 7
9286: PUSH
9287: CALL_OW 44
9291: ST_TO_ADDR
// Arabian_soldiers = Arabian_soldiers ^ New_person ;
9292: LD_ADDR_EXP 80
9296: PUSH
9297: LD_EXP 80
9301: PUSH
9302: LD_VAR 0 7
9306: ADD
9307: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9308: LD_VAR 0 7
9312: PPUSH
9313: LD_INT 14
9315: PPUSH
9316: LD_INT 0
9318: PPUSH
9319: CALL_OW 49
// end ;
9323: GO 9224
9325: POP
9326: POP
// for Un = 1 to Number_of_Arabian_Engineers do
9327: LD_ADDR_VAR 0 3
9331: PUSH
9332: DOUBLE
9333: LD_INT 1
9335: DEC
9336: ST_TO_ADDR
9337: LD_EXP 92
9341: PUSH
9342: FOR_TO
9343: IFFALSE 9443
// begin PrepareEngineer ( 0 , human_difficulty_skill ) ;
9345: LD_INT 0
9347: PPUSH
9348: LD_EXP 184
9352: PPUSH
9353: CALL_OW 382
// New_person = CreateHuman ;
9357: LD_ADDR_VAR 0 7
9361: PUSH
9362: CALL_OW 44
9366: ST_TO_ADDR
// SetSkill ( New_person , class_engineer , human_difficulty_skill ) ;
9367: LD_VAR 0 7
9371: PPUSH
9372: LD_INT 2
9374: PPUSH
9375: LD_EXP 184
9379: PPUSH
9380: CALL_OW 237
// Arabian_Engineers = Arabian_Engineers ^ New_person ;
9384: LD_ADDR_EXP 81
9388: PUSH
9389: LD_EXP 81
9393: PUSH
9394: LD_VAR 0 7
9398: ADD
9399: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9400: LD_VAR 0 7
9404: PPUSH
9405: LD_INT 14
9407: PPUSH
9408: LD_INT 0
9410: PPUSH
9411: CALL_OW 49
// ComEnterUnit ( New_person , ArDep2 ) ;
9415: LD_VAR 0 7
9419: PPUSH
9420: LD_INT 99
9422: PPUSH
9423: CALL_OW 120
// DoNotAttack ( americans1 , New_person ) ;
9427: LD_EXP 177
9431: PPUSH
9432: LD_VAR 0 7
9436: PPUSH
9437: CALL_OW 471
// end ;
9441: GO 9342
9443: POP
9444: POP
// for Un = 1 to Number_of_Arabian_Mechanics do
9445: LD_ADDR_VAR 0 3
9449: PUSH
9450: DOUBLE
9451: LD_INT 1
9453: DEC
9454: ST_TO_ADDR
9455: LD_EXP 91
9459: PUSH
9460: FOR_TO
9461: IFFALSE 9530
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
9463: LD_INT 0
9465: PPUSH
9466: LD_EXP 184
9470: PPUSH
9471: CALL_OW 383
// New_person = CreateHuman ;
9475: LD_ADDR_VAR 0 7
9479: PUSH
9480: CALL_OW 44
9484: ST_TO_ADDR
// Arabian_mechanics = Arabian_mechanics ^ New_person ;
9485: LD_ADDR_EXP 83
9489: PUSH
9490: LD_EXP 83
9494: PUSH
9495: LD_VAR 0 7
9499: ADD
9500: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9501: LD_VAR 0 7
9505: PPUSH
9506: LD_INT 14
9508: PPUSH
9509: LD_INT 0
9511: PPUSH
9512: CALL_OW 49
// ComEnterUnit ( New_person , ArFact ) ;
9516: LD_VAR 0 7
9520: PPUSH
9521: LD_INT 117
9523: PPUSH
9524: CALL_OW 120
// end ;
9528: GO 9460
9530: POP
9531: POP
// PrepareMechanic ( 0 , human_difficulty_skill ) ;
9532: LD_INT 0
9534: PPUSH
9535: LD_EXP 184
9539: PPUSH
9540: CALL_OW 383
// New_person = CreateHuman ;
9544: LD_ADDR_VAR 0 7
9548: PUSH
9549: CALL_OW 44
9553: ST_TO_ADDR
// Control_Driver = New_person ;
9554: LD_ADDR_EXP 85
9558: PUSH
9559: LD_VAR 0 7
9563: ST_TO_ADDR
// PlaceUnitArea ( Control_Driver , Center_ar_b , false ) ;
9564: LD_EXP 85
9568: PPUSH
9569: LD_INT 14
9571: PPUSH
9572: LD_INT 0
9574: PPUSH
9575: CALL_OW 49
// SetSkill ( Control_Driver , class_mechanic , 3 ) ;
9579: LD_EXP 85
9583: PPUSH
9584: LD_INT 3
9586: PPUSH
9587: LD_INT 3
9589: PPUSH
9590: CALL_OW 237
// RaiseSailEvent ( Link_Bombs ) ;
9594: LD_EXP 175
9598: PPUSH
9599: CALL_OW 427
// for Un = 1 to Number_of_Arabian_Scientists do
9603: LD_ADDR_VAR 0 3
9607: PUSH
9608: DOUBLE
9609: LD_INT 1
9611: DEC
9612: ST_TO_ADDR
9613: LD_EXP 90
9617: PUSH
9618: FOR_TO
9619: IFFALSE 9676
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
9621: LD_INT 0
9623: PPUSH
9624: LD_EXP 184
9628: PPUSH
9629: CALL_OW 384
// New_person = CreateHuman ;
9633: LD_ADDR_VAR 0 7
9637: PUSH
9638: CALL_OW 44
9642: ST_TO_ADDR
// Arabian_scientists = Arabian_scientists ^ New_person ;
9643: LD_ADDR_EXP 82
9647: PUSH
9648: LD_EXP 82
9652: PUSH
9653: LD_VAR 0 7
9657: ADD
9658: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9659: LD_VAR 0 7
9663: PPUSH
9664: LD_INT 14
9666: PPUSH
9667: LD_INT 0
9669: PPUSH
9670: CALL_OW 49
// end ;
9674: GO 9618
9676: POP
9677: POP
// uc_nation = nation_nature ;
9678: LD_ADDR_OWVAR 21
9682: PUSH
9683: LD_INT 0
9685: ST_TO_ADDR
// for Un = 1 to 4 do
9686: LD_ADDR_VAR 0 3
9690: PUSH
9691: DOUBLE
9692: LD_INT 1
9694: DEC
9695: ST_TO_ADDR
9696: LD_INT 4
9698: PUSH
9699: FOR_TO
9700: IFFALSE 9863
// begin PrepareSoldier ( 0 , apeman_difficulty_skill ) ;
9702: LD_INT 0
9704: PPUSH
9705: LD_EXP 185
9709: PPUSH
9710: CALL_OW 381
// hc_class = class_apeman_soldier ;
9714: LD_ADDR_OWVAR 28
9718: PUSH
9719: LD_INT 15
9721: ST_TO_ADDR
// New_person = CreateHuman ;
9722: LD_ADDR_VAR 0 7
9726: PUSH
9727: CALL_OW 44
9731: ST_TO_ADDR
// Arabian_apemens = Arabian_apemens ^ New_person ;
9732: LD_ADDR_EXP 84
9736: PUSH
9737: LD_EXP 84
9741: PUSH
9742: LD_VAR 0 7
9746: ADD
9747: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9748: LD_VAR 0 7
9752: PPUSH
9753: LD_INT 14
9755: PPUSH
9756: LD_INT 0
9758: PPUSH
9759: CALL_OW 49
// case Un of 1 :
9763: LD_VAR 0 3
9767: PUSH
9768: LD_INT 1
9770: DOUBLE
9771: EQUAL
9772: IFTRUE 9776
9774: GO 9791
9776: POP
// ComEnterUnit ( New_person , ArRad1 ) ; 2 :
9777: LD_VAR 0 7
9781: PPUSH
9782: LD_INT 97
9784: PPUSH
9785: CALL_OW 120
9789: GO 9861
9791: LD_INT 2
9793: DOUBLE
9794: EQUAL
9795: IFTRUE 9799
9797: GO 9814
9799: POP
// ComEnterUnit ( New_person , ArRad2 ) ; 3 :
9800: LD_VAR 0 7
9804: PPUSH
9805: LD_INT 88
9807: PPUSH
9808: CALL_OW 120
9812: GO 9861
9814: LD_INT 3
9816: DOUBLE
9817: EQUAL
9818: IFTRUE 9822
9820: GO 9837
9822: POP
// ComEnterUnit ( New_person , ArRad3 ) ; 4 :
9823: LD_VAR 0 7
9827: PPUSH
9828: LD_INT 98
9830: PPUSH
9831: CALL_OW 120
9835: GO 9861
9837: LD_INT 4
9839: DOUBLE
9840: EQUAL
9841: IFTRUE 9845
9843: GO 9860
9845: POP
// ComEnterUnit ( New_person , ArRad4 ) ; end ;
9846: LD_VAR 0 7
9850: PPUSH
9851: LD_INT 127
9853: PPUSH
9854: CALL_OW 120
9858: GO 9861
9860: POP
// end ;
9861: GO 9699
9863: POP
9864: POP
// All_arabians = Arabian_soldiers ^ Arabian_scientists ^ Arabian_apemens ^ Control_Driver ;
9865: LD_ADDR_EXP 79
9869: PUSH
9870: LD_EXP 80
9874: PUSH
9875: LD_EXP 82
9879: ADD
9880: PUSH
9881: LD_EXP 84
9885: ADD
9886: PUSH
9887: LD_EXP 85
9891: ADD
9892: ST_TO_ADDR
// uc_side = alliance ;
9893: LD_ADDR_OWVAR 20
9897: PUSH
9898: LD_EXP 182
9902: ST_TO_ADDR
// uc_nation = nation_american ;
9903: LD_ADDR_OWVAR 21
9907: PUSH
9908: LD_INT 1
9910: ST_TO_ADDR
// Roth = NewCharacter ( Roth ) ;
9911: LD_ADDR_EXP 20
9915: PUSH
9916: LD_STRING Roth
9918: PPUSH
9919: CALL_OW 25
9923: ST_TO_ADDR
// if not Roth then
9924: LD_EXP 20
9928: NOT
9929: IFFALSE 9946
// BuildQuery ( Error: Roth not found!!! , [ OK ] ) else
9931: LD_STRING Error: Roth not found!!!
9933: PPUSH
9934: LD_STRING OK
9936: PUSH
9937: EMPTY
9938: LIST
9939: PPUSH
9940: CALL_OW 99
9944: GO 9991
// begin PlaceUnitArea ( Roth , Center_al_b , false ) ;
9946: LD_EXP 20
9950: PPUSH
9951: LD_INT 15
9953: PPUSH
9954: LD_INT 0
9956: PPUSH
9957: CALL_OW 49
// ComMoveXY ( Roth , 249 , 187 ) ;
9961: LD_EXP 20
9965: PPUSH
9966: LD_INT 249
9968: PPUSH
9969: LD_INT 187
9971: PPUSH
9972: CALL_OW 111
// AddComTurnXY ( Roth , 245 , 187 ) ;
9976: LD_EXP 20
9980: PPUSH
9981: LD_INT 245
9983: PPUSH
9984: LD_INT 187
9986: PPUSH
9987: CALL_OW 178
// end ; Simms = CreateCharacter ( Simms ) ;
9991: LD_ADDR_EXP 16
9995: PUSH
9996: LD_STRING Simms
9998: PPUSH
9999: CALL_OW 34
10003: ST_TO_ADDR
// if not ( Simms ) then
10004: LD_EXP 16
10008: NOT
10009: IFFALSE 10031
// begin PrepareScientist ( sex_female , 7 ) ;
10011: LD_INT 2
10013: PPUSH
10014: LD_INT 7
10016: PPUSH
10017: CALL_OW 384
// Simms = CreateHuman ;
10021: LD_ADDR_EXP 16
10025: PUSH
10026: CALL_OW 44
10030: ST_TO_ADDR
// end ; PlaceUnitArea ( Simms , Center_al_b , false ) ;
10031: LD_EXP 16
10035: PPUSH
10036: LD_INT 15
10038: PPUSH
10039: LD_INT 0
10041: PPUSH
10042: CALL_OW 49
// ComMoveXY ( Simms , 243 , 187 ) ;
10046: LD_EXP 16
10050: PPUSH
10051: LD_INT 243
10053: PPUSH
10054: LD_INT 187
10056: PPUSH
10057: CALL_OW 111
// AddComTurnXY ( Simms , 245 , 187 ) ;
10061: LD_EXP 16
10065: PPUSH
10066: LD_INT 245
10068: PPUSH
10069: LD_INT 187
10071: PPUSH
10072: CALL_OW 178
// uc_side = alliance ;
10076: LD_ADDR_OWVAR 20
10080: PUSH
10081: LD_EXP 182
10085: ST_TO_ADDR
// uc_nation = nation_american ;
10086: LD_ADDR_OWVAR 21
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// Alliance_am_soldiers = [ ] ;
10094: LD_ADDR_EXP 95
10098: PUSH
10099: EMPTY
10100: ST_TO_ADDR
// for Un = 1 to Number_of_AllAm_Soldiers do
10101: LD_ADDR_VAR 0 3
10105: PUSH
10106: DOUBLE
10107: LD_INT 1
10109: DEC
10110: ST_TO_ADDR
10111: LD_EXP 103
10115: PUSH
10116: FOR_TO
10117: IFFALSE 10174
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
10119: LD_INT 0
10121: PPUSH
10122: LD_EXP 184
10126: PPUSH
10127: CALL_OW 381
// New_person = CreateHuman ;
10131: LD_ADDR_VAR 0 7
10135: PUSH
10136: CALL_OW 44
10140: ST_TO_ADDR
// Alliance_am_soldiers = Alliance_am_soldiers ^ New_person ;
10141: LD_ADDR_EXP 95
10145: PUSH
10146: LD_EXP 95
10150: PUSH
10151: LD_VAR 0 7
10155: ADD
10156: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10157: LD_VAR 0 7
10161: PPUSH
10162: LD_INT 15
10164: PPUSH
10165: LD_INT 0
10167: PPUSH
10168: CALL_OW 49
// end ;
10172: GO 10116
10174: POP
10175: POP
// uc_side = alliance ;
10176: LD_ADDR_OWVAR 20
10180: PUSH
10181: LD_EXP 182
10185: ST_TO_ADDR
// uc_nation = nation_american ;
10186: LD_ADDR_OWVAR 21
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// Alliance_am_scientists = [ ] ;
10194: LD_ADDR_EXP 97
10198: PUSH
10199: EMPTY
10200: ST_TO_ADDR
// for Un = 1 to Number_of_AllAm_Scientists do
10201: LD_ADDR_VAR 0 3
10205: PUSH
10206: DOUBLE
10207: LD_INT 1
10209: DEC
10210: ST_TO_ADDR
10211: LD_EXP 104
10215: PUSH
10216: FOR_TO
10217: IFFALSE 10274
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
10219: LD_INT 0
10221: PPUSH
10222: LD_EXP 184
10226: PPUSH
10227: CALL_OW 384
// New_person = CreateHuman ;
10231: LD_ADDR_VAR 0 7
10235: PUSH
10236: CALL_OW 44
10240: ST_TO_ADDR
// Alliance_am_scientists = Alliance_am_scientists ^ New_person ;
10241: LD_ADDR_EXP 97
10245: PUSH
10246: LD_EXP 97
10250: PUSH
10251: LD_VAR 0 7
10255: ADD
10256: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10257: LD_VAR 0 7
10261: PPUSH
10262: LD_INT 15
10264: PPUSH
10265: LD_INT 0
10267: PPUSH
10268: CALL_OW 49
// end ;
10272: GO 10216
10274: POP
10275: POP
// uc_side = alliance ;
10276: LD_ADDR_OWVAR 20
10280: PUSH
10281: LD_EXP 182
10285: ST_TO_ADDR
// uc_nation = nation_russian ;
10286: LD_ADDR_OWVAR 21
10290: PUSH
10291: LD_INT 3
10293: ST_TO_ADDR
// Alliance_rus_soldiers = [ ] ;
10294: LD_ADDR_EXP 94
10298: PUSH
10299: EMPTY
10300: ST_TO_ADDR
// for Un = 1 to Number_of_AllRu_Soldiers do
10301: LD_ADDR_VAR 0 3
10305: PUSH
10306: DOUBLE
10307: LD_INT 1
10309: DEC
10310: ST_TO_ADDR
10311: LD_EXP 105
10315: PUSH
10316: FOR_TO
10317: IFFALSE 10374
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
10319: LD_INT 0
10321: PPUSH
10322: LD_EXP 184
10326: PPUSH
10327: CALL_OW 381
// New_person = CreateHuman ;
10331: LD_ADDR_VAR 0 7
10335: PUSH
10336: CALL_OW 44
10340: ST_TO_ADDR
// Alliance_rus_soldiers = Alliance_rus_soldiers ^ New_person ;
10341: LD_ADDR_EXP 94
10345: PUSH
10346: LD_EXP 94
10350: PUSH
10351: LD_VAR 0 7
10355: ADD
10356: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10357: LD_VAR 0 7
10361: PPUSH
10362: LD_INT 15
10364: PPUSH
10365: LD_INT 0
10367: PPUSH
10368: CALL_OW 49
// end ;
10372: GO 10316
10374: POP
10375: POP
// uc_side = alliance ;
10376: LD_ADDR_OWVAR 20
10380: PUSH
10381: LD_EXP 182
10385: ST_TO_ADDR
// uc_nation = nation_russian ;
10386: LD_ADDR_OWVAR 21
10390: PUSH
10391: LD_INT 3
10393: ST_TO_ADDR
// Alliance_rus_scientists = [ ] ;
10394: LD_ADDR_EXP 96
10398: PUSH
10399: EMPTY
10400: ST_TO_ADDR
// for Un = 1 to Number_of_AllRu_Scientists do
10401: LD_ADDR_VAR 0 3
10405: PUSH
10406: DOUBLE
10407: LD_INT 1
10409: DEC
10410: ST_TO_ADDR
10411: LD_EXP 106
10415: PUSH
10416: FOR_TO
10417: IFFALSE 10474
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
10419: LD_INT 0
10421: PPUSH
10422: LD_EXP 184
10426: PPUSH
10427: CALL_OW 384
// New_person = CreateHuman ;
10431: LD_ADDR_VAR 0 7
10435: PUSH
10436: CALL_OW 44
10440: ST_TO_ADDR
// Alliance_rus_scientists = Alliance_rus_scientists ^ New_person ;
10441: LD_ADDR_EXP 96
10445: PUSH
10446: LD_EXP 96
10450: PUSH
10451: LD_VAR 0 7
10455: ADD
10456: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10457: LD_VAR 0 7
10461: PPUSH
10462: LD_INT 15
10464: PPUSH
10465: LD_INT 0
10467: PPUSH
10468: CALL_OW 49
// end ;
10472: GO 10416
10474: POP
10475: POP
// uc_side = russians1 ;
10476: LD_ADDR_OWVAR 20
10480: PUSH
10481: LD_EXP 179
10485: ST_TO_ADDR
// uc_nation = nation_russian ;
10486: LD_ADDR_OWVAR 21
10490: PUSH
10491: LD_INT 3
10493: ST_TO_ADDR
// Vsevolod = NewCharacter ( Vsevolod ) ;
10494: LD_ADDR_EXP 25
10498: PUSH
10499: LD_STRING Vsevolod
10501: PPUSH
10502: CALL_OW 25
10506: ST_TO_ADDR
// if Vsevolod then
10507: LD_EXP 25
10511: IFFALSE 10587
// begin SetSkill ( Vsevolod , skill_combat , 6 ) ;
10513: LD_EXP 25
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: LD_INT 6
10523: PPUSH
10524: CALL_OW 237
// SetSkill ( Vsevolod , skill_engineering , 4 ) ;
10528: LD_EXP 25
10532: PPUSH
10533: LD_INT 2
10535: PPUSH
10536: LD_INT 4
10538: PPUSH
10539: CALL_OW 237
// SetSkill ( Vsevolod , skill_mechanical , 10 ) ;
10543: LD_EXP 25
10547: PPUSH
10548: LD_INT 3
10550: PPUSH
10551: LD_INT 10
10553: PPUSH
10554: CALL_OW 237
// SetSkill ( Vsevolod , skill_scientistic , 2 ) ;
10558: LD_EXP 25
10562: PPUSH
10563: LD_INT 4
10565: PPUSH
10566: LD_INT 2
10568: PPUSH
10569: CALL_OW 237
// SetClass ( Vsevolod , class_mechanic ) ;
10573: LD_EXP 25
10577: PPUSH
10578: LD_INT 3
10580: PPUSH
10581: CALL_OW 336
// end else
10585: GO 10675
// begin hc_sex = sex_male ;
10587: LD_ADDR_OWVAR 27
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// hc_class = class_mechanic ;
10595: LD_ADDR_OWVAR 28
10599: PUSH
10600: LD_INT 3
10602: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 10 , 2 ] ;
10603: LD_ADDR_OWVAR 31
10607: PUSH
10608: LD_INT 6
10610: PUSH
10611: LD_INT 4
10613: PUSH
10614: LD_INT 10
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
10626: LD_ADDR_OWVAR 29
10630: PUSH
10631: LD_INT 10
10633: PUSH
10634: LD_INT 10
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: ST_TO_ADDR
// hc_name = Vsevolod I. Gorki ;
10641: LD_ADDR_OWVAR 26
10645: PUSH
10646: LD_STRING Vsevolod I. Gorki
10648: ST_TO_ADDR
// Vsevolod = CreateHuman ;
10649: LD_ADDR_EXP 25
10653: PUSH
10654: CALL_OW 44
10658: ST_TO_ADDR
// hc_name =  ;
10659: LD_ADDR_OWVAR 26
10663: PUSH
10664: LD_STRING 
10666: ST_TO_ADDR
// hc_gallery =  ;
10667: LD_ADDR_OWVAR 33
10671: PUSH
10672: LD_STRING 
10674: ST_TO_ADDR
// end ; RevealFogArea ( americans , way ) ;
10675: LD_EXP 176
10679: PPUSH
10680: LD_INT 22
10682: PPUSH
10683: CALL_OW 332
// uc_side = americans ;
10687: LD_ADDR_OWVAR 20
10691: PUSH
10692: LD_EXP 176
10696: ST_TO_ADDR
// uc_nation = nation_american ;
10697: LD_ADDR_OWVAR 21
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// uc_direction = 0 ;
10705: LD_ADDR_OWVAR 24
10709: PUSH
10710: LD_INT 0
10712: ST_TO_ADDR
// if Initial_JMM_vehicle <> 0 then
10713: LD_EXP 39
10717: PUSH
10718: LD_INT 0
10720: NONEQUAL
10721: IFFALSE 10781
// begin vc_chassis = Initial_JMM_vehicle [ 1 ] ;
10723: LD_ADDR_OWVAR 37
10727: PUSH
10728: LD_EXP 39
10732: PUSH
10733: LD_INT 1
10735: ARRAY
10736: ST_TO_ADDR
// vc_engine = Initial_JMM_vehicle [ 2 ] ;
10737: LD_ADDR_OWVAR 39
10741: PUSH
10742: LD_EXP 39
10746: PUSH
10747: LD_INT 2
10749: ARRAY
10750: ST_TO_ADDR
// vc_control = Initial_JMM_vehicle [ 3 ] ;
10751: LD_ADDR_OWVAR 38
10755: PUSH
10756: LD_EXP 39
10760: PUSH
10761: LD_INT 3
10763: ARRAY
10764: ST_TO_ADDR
// vc_weapon = Initial_JMM_vehicle [ 4 ] ;
10765: LD_ADDR_OWVAR 40
10769: PUSH
10770: LD_EXP 39
10774: PUSH
10775: LD_INT 4
10777: ARRAY
10778: ST_TO_ADDR
// end else
10779: GO 10813
// begin vc_chassis = us_medium_tracked ;
10781: LD_ADDR_OWVAR 37
10785: PUSH
10786: LD_INT 3
10788: ST_TO_ADDR
// vc_engine = engine_siberite ;
10789: LD_ADDR_OWVAR 39
10793: PUSH
10794: LD_INT 3
10796: ST_TO_ADDR
// vc_control = control_manual ;
10797: LD_ADDR_OWVAR 38
10801: PUSH
10802: LD_INT 1
10804: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10805: LD_ADDR_OWVAR 40
10809: PUSH
10810: LD_INT 3
10812: ST_TO_ADDR
// end ; JMM_veh = CreateVehicle ;
10813: LD_ADDR_EXP 57
10817: PUSH
10818: CALL_OW 45
10822: ST_TO_ADDR
// SetFuel ( Jmm_veh , 100 ) ;
10823: LD_EXP 57
10827: PPUSH
10828: LD_INT 100
10830: PPUSH
10831: CALL_OW 240
// PlaceHumanInUnit ( JMM , JMM_veh ) ;
10835: LD_EXP 1
10839: PPUSH
10840: LD_EXP 57
10844: PPUSH
10845: CALL_OW 52
// PlaceUnitXY ( JMM_veh , 100 , 151 , false ) ;
10849: LD_EXP 57
10853: PPUSH
10854: LD_INT 100
10856: PPUSH
10857: LD_INT 151
10859: PPUSH
10860: LD_INT 0
10862: PPUSH
10863: CALL_OW 48
// if woman_alive then
10867: LD_EXP 38
10871: IFFALSE 10906
// JMM_woman = [ Joan , Lisa , Coonie ] [ Woman_in_am14 ] else
10873: LD_ADDR_EXP 37
10877: PUSH
10878: LD_EXP 12
10882: PUSH
10883: LD_EXP 5
10887: PUSH
10888: LD_EXP 18
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_EXP 36
10902: ARRAY
10903: ST_TO_ADDR
10904: GO 10914
// JMM_Woman = 0 ;
10906: LD_ADDR_EXP 37
10910: PUSH
10911: LD_INT 0
10913: ST_TO_ADDR
// if woman_saved then
10914: LD_EXP 34
10918: IFFALSE 11088
// begin if Initial_Woman_vehicle <> 0 then
10920: LD_EXP 40
10924: PUSH
10925: LD_INT 0
10927: NONEQUAL
10928: IFFALSE 10988
// begin vc_chassis = Initial_Woman_vehicle [ 1 ] ;
10930: LD_ADDR_OWVAR 37
10934: PUSH
10935: LD_EXP 40
10939: PUSH
10940: LD_INT 1
10942: ARRAY
10943: ST_TO_ADDR
// vc_engine = Initial_Woman_vehicle [ 2 ] ;
10944: LD_ADDR_OWVAR 39
10948: PUSH
10949: LD_EXP 40
10953: PUSH
10954: LD_INT 2
10956: ARRAY
10957: ST_TO_ADDR
// vc_control = Initial_Woman_vehicle [ 3 ] ;
10958: LD_ADDR_OWVAR 38
10962: PUSH
10963: LD_EXP 40
10967: PUSH
10968: LD_INT 3
10970: ARRAY
10971: ST_TO_ADDR
// vc_weapon = Initial_Woman_vehicle [ 4 ] ;
10972: LD_ADDR_OWVAR 40
10976: PUSH
10977: LD_EXP 40
10981: PUSH
10982: LD_INT 4
10984: ARRAY
10985: ST_TO_ADDR
// end else
10986: GO 11020
// begin vc_chassis = us_medium_tracked ;
10988: LD_ADDR_OWVAR 37
10992: PUSH
10993: LD_INT 3
10995: ST_TO_ADDR
// vc_engine = engine_siberite ;
10996: LD_ADDR_OWVAR 39
11000: PUSH
11001: LD_INT 3
11003: ST_TO_ADDR
// vc_control = control_manual ;
11004: LD_ADDR_OWVAR 38
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// vc_weapon = us_light_gun ;
11012: LD_ADDR_OWVAR 40
11016: PUSH
11017: LD_INT 3
11019: ST_TO_ADDR
// end ; Woman_veh = CreateVehicle ;
11020: LD_ADDR_EXP 58
11024: PUSH
11025: CALL_OW 45
11029: ST_TO_ADDR
// SetFuel ( Woman_veh , 100 ) ;
11030: LD_EXP 58
11034: PPUSH
11035: LD_INT 100
11037: PPUSH
11038: CALL_OW 240
// SetSide ( JMM_woman , americans ) ;
11042: LD_EXP 37
11046: PPUSH
11047: LD_EXP 176
11051: PPUSH
11052: CALL_OW 235
// PlaceUnitXY ( Woman_veh , 101 , 156 , false ) ;
11056: LD_EXP 58
11060: PPUSH
11061: LD_INT 101
11063: PPUSH
11064: LD_INT 156
11066: PPUSH
11067: LD_INT 0
11069: PPUSH
11070: CALL_OW 48
// PlaceHumanInUnit ( JMM_woman , Woman_veh ) ;
11074: LD_EXP 37
11078: PPUSH
11079: LD_EXP 58
11083: PPUSH
11084: CALL_OW 52
// end ; end ;
11088: LD_VAR 0 1
11092: RET
// function Set_marks ; begin
11093: LD_INT 0
11095: PPUSH
// end ;
11096: LD_VAR 0 1
11100: RET
// function Set_attitudes ; begin
11101: LD_INT 0
11103: PPUSH
// SetAttitude ( americans , americans1 , att_friend , true ) ;
11104: LD_EXP 176
11108: PPUSH
11109: LD_EXP 177
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: LD_INT 1
11119: PPUSH
11120: CALL_OW 80
// SetAttitude ( russians , russians1 , att_friend , true ) ;
11124: LD_EXP 178
11128: PPUSH
11129: LD_EXP 179
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: CALL_OW 80
// SetAttitude ( arabians , arabians1 , att_friend , true ) ;
11144: LD_EXP 180
11148: PPUSH
11149: LD_EXP 181
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 80
// SetAttitude ( arabians , russians , att_neutral , true ) ;
11164: LD_EXP 180
11168: PPUSH
11169: LD_EXP 178
11173: PPUSH
11174: LD_INT 0
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 80
// SetAttitude ( arabians , russians1 , att_neutral , true ) ;
11184: LD_EXP 180
11188: PPUSH
11189: LD_EXP 179
11193: PPUSH
11194: LD_INT 0
11196: PPUSH
11197: LD_INT 1
11199: PPUSH
11200: CALL_OW 80
// SetAttitude ( arabians , alliance , att_neutral , true ) ;
11204: LD_EXP 180
11208: PPUSH
11209: LD_EXP 182
11213: PPUSH
11214: LD_INT 0
11216: PPUSH
11217: LD_INT 1
11219: PPUSH
11220: CALL_OW 80
// SetAttitude ( russians , alliance , att_neutral , true ) ;
11224: LD_EXP 178
11228: PPUSH
11229: LD_EXP 182
11233: PPUSH
11234: LD_INT 0
11236: PPUSH
11237: LD_INT 1
11239: PPUSH
11240: CALL_OW 80
// SetAttitude ( russians1 , alliance , att_neutral , true ) ;
11244: LD_EXP 179
11248: PPUSH
11249: LD_EXP 182
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
11264: LD_EXP 176
11268: PPUSH
11269: LD_EXP 178
11273: PPUSH
11274: LD_INT 2
11276: PPUSH
11277: LD_INT 1
11279: PPUSH
11280: CALL_OW 80
// SetAttitude ( americans , arabians , att_enemy , true ) ;
11284: LD_EXP 176
11288: PPUSH
11289: LD_EXP 180
11293: PPUSH
11294: LD_INT 2
11296: PPUSH
11297: LD_INT 1
11299: PPUSH
11300: CALL_OW 80
// SetAttitude ( americans , alliance , att_enemy , true ) ;
11304: LD_EXP 176
11308: PPUSH
11309: LD_EXP 182
11313: PPUSH
11314: LD_INT 2
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 80
// SetAttitude ( americans1 , russians , att_enemy , true ) ;
11324: LD_EXP 177
11328: PPUSH
11329: LD_EXP 178
11333: PPUSH
11334: LD_INT 2
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: CALL_OW 80
// SetAttitude ( americans1 , arabians , att_enemy , true ) ;
11344: LD_EXP 177
11348: PPUSH
11349: LD_EXP 180
11353: PPUSH
11354: LD_INT 2
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 80
// SetAttitude ( americans1 , alliance , att_friend , true ) ;
11364: LD_EXP 177
11368: PPUSH
11369: LD_EXP 182
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 80
// SetAttitude ( Explorers_side , alliance , att_friend , true ) ;
11384: LD_EXP 183
11388: PPUSH
11389: LD_EXP 182
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 80
// SetAttitude ( Explorers_Side , americans , att_friend , false ) ;
11404: LD_EXP 183
11408: PPUSH
11409: LD_EXP 176
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: LD_INT 0
11419: PPUSH
11420: CALL_OW 80
// SetAttitude ( americans , Explorers_side , att_neutral , false ) ;
11424: LD_EXP 176
11428: PPUSH
11429: LD_EXP 183
11433: PPUSH
11434: LD_INT 0
11436: PPUSH
11437: LD_INT 0
11439: PPUSH
11440: CALL_OW 80
// SetAttitude ( Explorers_side , russians , att_neutral , true ) ;
11444: LD_EXP 183
11448: PPUSH
11449: LD_EXP 178
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL_OW 80
// SetAttitude ( Explorers_side , russians1 , att_neutral , true ) ;
11464: LD_EXP 183
11468: PPUSH
11469: LD_EXP 179
11473: PPUSH
11474: LD_INT 0
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 80
// SetAttitude ( Explorers_side , arabians , att_neutral , true ) ;
11484: LD_EXP 183
11488: PPUSH
11489: LD_EXP 180
11493: PPUSH
11494: LD_INT 0
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 80
// end ;
11504: LD_VAR 0 1
11508: RET
// function Send_units_to_initial_position ; begin
11509: LD_INT 0
11511: PPUSH
// end ;
11512: LD_VAR 0 1
11516: RET
// function Init ; begin
11517: LD_INT 0
11519: PPUSH
// RandomizeAll ;
11520: CALL_OW 11
// Set_variables ;
11524: CALL 0 0 0
// Prepare_difficulty ;
11528: CALL 3921 0 0
// Set_marks ;
11532: CALL 11093 0 0
// Set_attitudes ;
11536: CALL 11101 0 0
// Prepare_characters ;
11540: CALL 6117 0 0
// Send_units_to_initial_position ;
11544: CALL 11509 0 0
// end ;
11548: LD_VAR 0 1
11552: RET
// starting begin CenterNowOnXY ( 123 , 190 ) ;
11553: LD_INT 123
11555: PPUSH
11556: LD_INT 190
11558: PPUSH
11559: CALL_OW 86
// Debug_Constant = false ;
11563: LD_ADDR_EXP 195
11567: PUSH
11568: LD_INT 0
11570: ST_TO_ADDR
// InGameOn ;
11571: CALL_OW 8
// Init ;
11575: CALL 11517 0 0
// CenterJMM = true ;
11579: LD_ADDR_EXP 68
11583: PUSH
11584: LD_INT 1
11586: ST_TO_ADDR
// end ; end_of_file
11587: END
// function FirstTalk ; var list_of_q , selection , V ; begin
11588: LD_INT 0
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// RaiseSailEvent ( Run_JMM_Vehicles ) ;
11594: LD_EXP 169
11598: PPUSH
11599: CALL_OW 427
// if kappa_delayed then
11603: LD_EXP 35
11607: IFFALSE 11831
// begin Say ( JMM , D1T-JMM-1 ) ;
11609: LD_EXP 1
11613: PPUSH
11614: LD_STRING D1T-JMM-1
11616: PPUSH
11617: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
11621: LD_EXP 2
11625: PPUSH
11626: LD_STRING D1T-Pow-1
11628: PPUSH
11629: CALL_OW 88
// if kappa_saved then
11633: LD_EXP 33
11637: IFFALSE 11665
// begin Say ( JMM , D1T-JMM-2 ) ;
11639: LD_EXP 1
11643: PPUSH
11644: LD_STRING D1T-JMM-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Powell , D1T-Pow-2 ) ;
11651: LD_EXP 2
11655: PPUSH
11656: LD_STRING D1T-Pow-2
11658: PPUSH
11659: CALL_OW 88
// end else
11663: GO 11829
// if not ( kappa_saved ) and Woman_saved then
11665: LD_EXP 33
11669: NOT
11670: PUSH
11671: LD_EXP 34
11675: AND
11676: IFFALSE 11791
// begin Say ( JMM , D1T-JMM-3 ) ;
11678: LD_EXP 1
11682: PPUSH
11683: LD_STRING D1T-JMM-3
11685: PPUSH
11686: CALL_OW 88
// Say ( Powell , D1T-Pow-3 ) ;
11690: LD_EXP 2
11694: PPUSH
11695: LD_STRING D1T-Pow-3
11697: PPUSH
11698: CALL_OW 88
// case Woman_in_am14 of 1 :
11702: LD_EXP 36
11706: PUSH
11707: LD_INT 1
11709: DOUBLE
11710: EQUAL
11711: IFTRUE 11715
11713: GO 11730
11715: POP
// Say ( Joan , D1T-Joan-3 ) ; 2 :
11716: LD_EXP 12
11720: PPUSH
11721: LD_STRING D1T-Joan-3
11723: PPUSH
11724: CALL_OW 88
11728: GO 11777
11730: LD_INT 2
11732: DOUBLE
11733: EQUAL
11734: IFTRUE 11738
11736: GO 11753
11738: POP
// Say ( Lisa , D1T-Lisa-3 ) ; 3 :
11739: LD_EXP 5
11743: PPUSH
11744: LD_STRING D1T-Lisa-3
11746: PPUSH
11747: CALL_OW 88
11751: GO 11777
11753: LD_INT 3
11755: DOUBLE
11756: EQUAL
11757: IFTRUE 11761
11759: GO 11776
11761: POP
// Say ( Coonie , D1T-Con-3 ) ; end ;
11762: LD_EXP 18
11766: PPUSH
11767: LD_STRING D1T-Con-3
11769: PPUSH
11770: CALL_OW 88
11774: GO 11777
11776: POP
// Say ( Powell , D1T-Pow-4 ) ;
11777: LD_EXP 2
11781: PPUSH
11782: LD_STRING D1T-Pow-4
11784: PPUSH
11785: CALL_OW 88
// end else
11789: GO 11829
// if not ( kappa_saved ) and not ( Woman_saved ) then
11791: LD_EXP 33
11795: NOT
11796: PUSH
11797: LD_EXP 34
11801: NOT
11802: AND
11803: IFFALSE 11829
// begin Say ( JMM , D1T-JMM-4 ) ;
11805: LD_EXP 1
11809: PPUSH
11810: LD_STRING D1T-JMM-4
11812: PPUSH
11813: CALL_OW 88
// Say ( Powell , D1T-Pow-5 ) ;
11817: LD_EXP 2
11821: PPUSH
11822: LD_STRING D1T-Pow-5
11824: PPUSH
11825: CALL_OW 88
// end ; end else
11829: GO 11855
// begin Say ( JMM , D1nT-JMM-1 ) ;
11831: LD_EXP 1
11835: PPUSH
11836: LD_STRING D1nT-JMM-1
11838: PPUSH
11839: CALL_OW 88
// Say ( Powell , D1nT-Pow-1 ) ;
11843: LD_EXP 2
11847: PPUSH
11848: LD_STRING D1nT-Pow-1
11850: PPUSH
11851: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
11855: LD_EXP 1
11859: PPUSH
11860: LD_STRING D1-JMM-1
11862: PPUSH
11863: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
11867: LD_EXP 2
11871: PPUSH
11872: LD_STRING D1-Pow-1
11874: PPUSH
11875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_STRING D1-JMM-2
11886: PPUSH
11887: CALL_OW 88
// CenterJMM = false ;
11891: LD_ADDR_EXP 68
11895: PUSH
11896: LD_INT 0
11898: ST_TO_ADDR
// if not ( Skip ) then
11899: LD_EXP 186
11903: NOT
11904: IFFALSE 11915
// RaiseSailEvent ( Map_am_base ) ;
11906: LD_EXP 161
11910: PPUSH
11911: CALL_OW 427
// Say ( Powell , D1-Pow-2 ) ;
11915: LD_EXP 2
11919: PPUSH
11920: LD_STRING D1-Pow-2
11922: PPUSH
11923: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11927: LD_EXP 1
11931: PPUSH
11932: LD_STRING D1-JMM-3
11934: PPUSH
11935: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
11939: LD_EXP 2
11943: PPUSH
11944: LD_STRING D1-Pow-3
11946: PPUSH
11947: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
11951: LD_EXP 1
11955: PPUSH
11956: LD_STRING D1-JMM-4
11958: PPUSH
11959: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
11963: LD_EXP 2
11967: PPUSH
11968: LD_STRING D1-Pow-4
11970: PPUSH
11971: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
11975: LD_EXP 1
11979: PPUSH
11980: LD_STRING D1-JMM-5
11982: PPUSH
11983: CALL_OW 88
// CenterJMM = false ;
11987: LD_ADDR_EXP 68
11991: PUSH
11992: LD_INT 0
11994: ST_TO_ADDR
// if not ( Skip ) then
11995: LD_EXP 186
11999: NOT
12000: IFFALSE 12011
// RaiseSailEvent ( Map_rus_attack ) ;
12002: LD_EXP 162
12006: PPUSH
12007: CALL_OW 427
// Say ( Powell , D1-Pow-5 ) ;
12011: LD_EXP 2
12015: PPUSH
12016: LD_STRING D1-Pow-5
12018: PPUSH
12019: CALL_OW 88
// if not ( Skip ) then
12023: LD_EXP 186
12027: NOT
12028: IFFALSE 12195
// begin list_of_q = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
12030: LD_ADDR_VAR 0 2
12034: PUSH
12035: LD_INT 1
12037: PUSH
12038: LD_INT 2
12040: PUSH
12041: LD_INT 3
12043: PUSH
12044: LD_INT 4
12046: PUSH
12047: LD_INT 5
12049: PUSH
12050: LD_INT 6
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: ST_TO_ADDR
// repeat selection = SelectiveQuery ( Q1 , list_of_q ) ;
12061: LD_ADDR_VAR 0 3
12065: PUSH
12066: LD_STRING Q1
12068: PPUSH
12069: LD_VAR 0 2
12073: PPUSH
12074: CALL_OW 98
12078: ST_TO_ADDR
// list_of_q = list_of_q diff selection ;
12079: LD_ADDR_VAR 0 2
12083: PUSH
12084: LD_VAR 0 2
12088: PUSH
12089: LD_VAR 0 3
12093: DIFF
12094: ST_TO_ADDR
// ResolveQuery ( selection , list_of_q ) ;
12095: LD_VAR 0 3
12099: PPUSH
12100: LD_VAR 0 2
12104: PPUSH
12105: CALL 12200 0 2
// until ( selection in [ 5 , 6 ] ) or list_of_q = 2 ;
12109: LD_VAR 0 3
12113: PUSH
12114: LD_INT 5
12116: PUSH
12117: LD_INT 6
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: IN
12124: PUSH
12125: LD_VAR 0 2
12129: PUSH
12130: LD_INT 2
12132: EQUAL
12133: OR
12134: IFFALSE 12061
// if not ( selection in [ 5 , 6 ] ) then
12136: LD_VAR 0 3
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: LD_INT 6
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: IN
12151: NOT
12152: IFFALSE 12195
// begin selection = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
12154: LD_ADDR_VAR 0 3
12158: PUSH
12159: LD_STRING Q1a
12161: PPUSH
12162: LD_INT 1
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 98
12176: ST_TO_ADDR
// ResolveQuery ( selection + 4 , list_of_q ) ;
12177: LD_VAR 0 3
12181: PUSH
12182: LD_INT 4
12184: PLUS
12185: PPUSH
12186: LD_VAR 0 2
12190: PPUSH
12191: CALL 12200 0 2
// end ; end ; end ;
12195: LD_VAR 0 1
12199: RET
// function ResolveQuery ( question , list_of_q ) ; begin
12200: LD_INT 0
12202: PPUSH
// case question of 1 :
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 1
12210: DOUBLE
12211: EQUAL
12212: IFTRUE 12216
12214: GO 12267
12216: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
12217: LD_EXP 1
12221: PPUSH
12222: LD_STRING D2Mot-JMM-1
12224: PPUSH
12225: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
12229: LD_EXP 2
12233: PPUSH
12234: LD_STRING D2Mot-Pow-1
12236: PPUSH
12237: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
12241: LD_EXP 1
12245: PPUSH
12246: LD_STRING D2Mot-JMM-2
12248: PPUSH
12249: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
12253: LD_EXP 2
12257: PPUSH
12258: LD_STRING D2Mot-Pow-2
12260: PPUSH
12261: CALL_OW 88
// end ; 2 :
12265: GO 12618
12267: LD_INT 2
12269: DOUBLE
12270: EQUAL
12271: IFTRUE 12275
12273: GO 12351
12275: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
12276: LD_EXP 1
12280: PPUSH
12281: LD_STRING D2Rus-JMM-1
12283: PPUSH
12284: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
12288: LD_EXP 2
12292: PPUSH
12293: LD_STRING D2Rus-Pow-1
12295: PPUSH
12296: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
12300: LD_EXP 1
12304: PPUSH
12305: LD_STRING D2Rus-JMM-2
12307: PPUSH
12308: CALL_OW 88
// if not ( 3 in list_of_q ) then
12312: LD_INT 3
12314: PUSH
12315: LD_VAR 0 2
12319: IN
12320: NOT
12321: IFFALSE 12337
// Say ( Powell , D2Rus-Pow-2 ) else
12323: LD_EXP 2
12327: PPUSH
12328: LD_STRING D2Rus-Pow-2
12330: PPUSH
12331: CALL_OW 88
12335: GO 12349
// Say ( Powell , D2Rus-Pow-2a ) ;
12337: LD_EXP 2
12341: PPUSH
12342: LD_STRING D2Rus-Pow-2a
12344: PPUSH
12345: CALL_OW 88
// end ; 3 :
12349: GO 12618
12351: LD_INT 3
12353: DOUBLE
12354: EQUAL
12355: IFTRUE 12359
12357: GO 12452
12359: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
12360: LD_EXP 1
12364: PPUSH
12365: LD_STRING D2Leg-JMM-1
12367: PPUSH
12368: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
12372: LD_EXP 2
12376: PPUSH
12377: LD_STRING D2Leg-Pow-1
12379: PPUSH
12380: CALL_OW 88
// if ( 2 in list_of_q ) then
12384: LD_INT 2
12386: PUSH
12387: LD_VAR 0 2
12391: IN
12392: IFFALSE 12418
// begin Say ( JMM , D2Leg-JMM-2 ) ;
12394: LD_EXP 1
12398: PPUSH
12399: LD_STRING D2Leg-JMM-2
12401: PPUSH
12402: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
12406: LD_EXP 2
12410: PPUSH
12411: LD_STRING D2Leg-Pow-2
12413: PPUSH
12414: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
12418: LD_EXP 1
12422: PPUSH
12423: LD_STRING D2Leg-JMM-3
12425: PPUSH
12426: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
12430: LD_EXP 2
12434: PPUSH
12435: LD_STRING D2Leg-Pow-3
12437: PPUSH
12438: CALL_OW 88
// Add_Legion_Objectives = true ;
12442: LD_ADDR_EXP 230
12446: PUSH
12447: LD_INT 1
12449: ST_TO_ADDR
// end ; 4 :
12450: GO 12618
12452: LD_INT 4
12454: DOUBLE
12455: EQUAL
12456: IFTRUE 12460
12458: GO 12535
12460: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
12461: LD_EXP 1
12465: PPUSH
12466: LD_STRING D2Ar-JMM-1
12468: PPUSH
12469: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
12473: LD_EXP 2
12477: PPUSH
12478: LD_STRING D2Ar-Pow-1
12480: PPUSH
12481: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
12485: LD_EXP 1
12489: PPUSH
12490: LD_STRING D2Ar-JMM-2
12492: PPUSH
12493: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
12497: LD_EXP 2
12501: PPUSH
12502: LD_STRING D2Ar-Pow-2
12504: PPUSH
12505: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
12509: LD_EXP 1
12513: PPUSH
12514: LD_STRING D2Ar-JMM-3
12516: PPUSH
12517: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
12521: LD_EXP 2
12525: PPUSH
12526: LD_STRING D2Ar-Pow-3
12528: PPUSH
12529: CALL_OW 88
// end ; 5 :
12533: GO 12618
12535: LD_INT 5
12537: DOUBLE
12538: EQUAL
12539: IFTRUE 12543
12541: GO 12558
12543: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
12544: LD_EXP 1
12548: PPUSH
12549: LD_STRING D2Conf-JMM-1
12551: PPUSH
12552: CALL_OW 88
// end ; 6 :
12556: GO 12618
12558: LD_INT 6
12560: DOUBLE
12561: EQUAL
12562: IFTRUE 12566
12564: GO 12617
12566: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
12567: LD_EXP 1
12571: PPUSH
12572: LD_STRING D2Com-JMM-1
12574: PPUSH
12575: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
12579: LD_EXP 2
12583: PPUSH
12584: LD_STRING D2Com-Pow-1
12586: PPUSH
12587: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
12591: LD_EXP 1
12595: PPUSH
12596: LD_STRING D2Com-JMM-2
12598: PPUSH
12599: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
12603: LD_EXP 2
12607: PPUSH
12608: LD_STRING D2Com-Pow-2
12610: PPUSH
12611: CALL_OW 88
// end ; end ;
12615: GO 12618
12617: POP
// end ;
12618: LD_VAR 0 3
12622: RET
// export function SecondTalk ; begin
12623: LD_INT 0
12625: PPUSH
// Joan_semafor = true ;
12626: LD_ADDR_EXP 233
12630: PUSH
12631: LD_INT 1
12633: ST_TO_ADDR
// if Woman_saved > 0 then
12634: LD_EXP 34
12638: PUSH
12639: LD_INT 0
12641: GREATER
12642: IFFALSE 12743
// begin case Woman_saved of 1 :
12644: LD_EXP 34
12648: PUSH
12649: LD_INT 1
12651: DOUBLE
12652: EQUAL
12653: IFTRUE 12657
12655: GO 12672
12657: POP
// Say ( Joan , D3W-Joan-1 ) ; 2 :
12658: LD_EXP 12
12662: PPUSH
12663: LD_STRING D3W-Joan-1
12665: PPUSH
12666: CALL_OW 88
12670: GO 12719
12672: LD_INT 2
12674: DOUBLE
12675: EQUAL
12676: IFTRUE 12680
12678: GO 12695
12680: POP
// Say ( Lisa , D3W-Lisa-1 ) ; 3 :
12681: LD_EXP 5
12685: PPUSH
12686: LD_STRING D3W-Lisa-1
12688: PPUSH
12689: CALL_OW 88
12693: GO 12719
12695: LD_INT 3
12697: DOUBLE
12698: EQUAL
12699: IFTRUE 12703
12701: GO 12718
12703: POP
// Say ( Coonie , D3W-Con-1 ) ; end ;
12704: LD_EXP 18
12708: PPUSH
12709: LD_STRING D3W-Con-1
12711: PPUSH
12712: CALL_OW 88
12716: GO 12719
12718: POP
// Say ( JMM , D3W-JMM-1 ) ;
12719: LD_EXP 1
12723: PPUSH
12724: LD_STRING D3W-JMM-1
12726: PPUSH
12727: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
12731: LD_EXP 1
12735: PPUSH
12736: LD_STRING D3nW-JMM-1a
12738: PPUSH
12739: CALL_OW 88
// end ; Joan_semafor = false ;
12743: LD_ADDR_EXP 233
12747: PUSH
12748: LD_INT 0
12750: ST_TO_ADDR
// end ;
12751: LD_VAR 0 1
12755: RET
// every 0 0$1 do var hlp ;
12756: GO 12758
12758: DISABLE
12759: LD_INT 0
12761: PPUSH
// begin ingame_video = true ;
12762: LD_ADDR_OWVAR 52
12766: PUSH
12767: LD_INT 1
12769: ST_TO_ADDR
// interface_hidden = true ;
12770: LD_ADDR_OWVAR 54
12774: PUSH
12775: LD_INT 1
12777: ST_TO_ADDR
// FirstTalk ;
12778: CALL 11588 0 0
// WaitTask ( JMM_veh , 1 ) ;
12782: LD_EXP 57
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL 17876 0 2
// if IsInUnit ( JMM ) then
12794: LD_EXP 1
12798: PPUSH
12799: CALL_OW 310
12803: IFFALSE 12829
// begin ComExitVehicle ( JMM ) ;
12805: LD_EXP 1
12809: PPUSH
12810: CALL_OW 121
// if JMM_Woman then
12814: LD_EXP 37
12818: IFFALSE 12829
// ComExitVehicle ( JMM_Woman ) ;
12820: LD_EXP 37
12824: PPUSH
12825: CALL_OW 121
// end ; Wait ( 0 0$1 ) ;
12829: LD_INT 35
12831: PPUSH
12832: CALL_OW 67
// Skip = false ;
12836: LD_ADDR_EXP 186
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// CenterJMM = false ;
12844: LD_ADDR_EXP 68
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// Wait ( 0 0$1 ) ;
12852: LD_INT 35
12854: PPUSH
12855: CALL_OW 67
// ComMoveXY ( [ JMM , JMM_woman ] , 68 , 105 ) ;
12859: LD_EXP 1
12863: PUSH
12864: LD_EXP 37
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PPUSH
12873: LD_INT 68
12875: PPUSH
12876: LD_INT 105
12878: PPUSH
12879: CALL_OW 111
// ComMoveXY ( Powell , 47 , 64 ) ;
12883: LD_EXP 2
12887: PPUSH
12888: LD_INT 47
12890: PPUSH
12891: LD_INT 64
12893: PPUSH
12894: CALL_OW 111
// RaiseSailEvent ( Send_Helpers ) ;
12898: LD_EXP 163
12902: PPUSH
12903: CALL_OW 427
// CenterOnXY ( 64 , 99 ) ;
12907: LD_INT 64
12909: PPUSH
12910: LD_INT 99
12912: PPUSH
12913: CALL_OW 84
// WaitTask ( [ JMM , JMM_woman ] , 0.5 ) ;
12917: LD_EXP 1
12921: PUSH
12922: LD_EXP 37
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: LD_REAL  5.00000000000000E-0001
12934: PPUSH
12935: CALL 17876 0 2
// end ;
12939: PPOPN 1
12941: END
// every 0 0$2 trigger Time_of_Ingame_Run_Over + 0 0$15 < tick marked 10 do
12942: LD_EXP 189
12946: PUSH
12947: LD_INT 525
12949: PLUS
12950: PUSH
12951: LD_OWVAR 1
12955: LESS
12956: IFFALSE 13120
12958: GO 12960
12960: DISABLE
// begin DialogueOn ;
12961: CALL_OW 6
// SayRadioNoName ( Friend , D7-Friend-1 ) ;
12965: LD_EXP 21
12969: PPUSH
12970: LD_STRING D7-Friend-1
12972: PPUSH
12973: CALL_OW 95
// Say ( JMM , D7-JMM-1 ) ;
12977: LD_EXP 1
12981: PPUSH
12982: LD_STRING D7-JMM-1
12984: PPUSH
12985: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-2 ) ;
12989: LD_EXP 21
12993: PPUSH
12994: LD_STRING D7-Friend-2
12996: PPUSH
12997: CALL_OW 95
// Say ( JMM , D7-JMM-2 ) ;
13001: LD_EXP 1
13005: PPUSH
13006: LD_STRING D7-JMM-2
13008: PPUSH
13009: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-3 ) ;
13013: LD_EXP 21
13017: PPUSH
13018: LD_STRING D7-Friend-3
13020: PPUSH
13021: CALL_OW 95
// Say ( JMM , D7-JMM-3 ) ;
13025: LD_EXP 1
13029: PPUSH
13030: LD_STRING D7-JMM-3
13032: PPUSH
13033: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-4 ) ;
13037: LD_EXP 21
13041: PPUSH
13042: LD_STRING D7-Friend-4
13044: PPUSH
13045: CALL_OW 95
// Say ( JMM , D7-JMM-4 ) ;
13049: LD_EXP 1
13053: PPUSH
13054: LD_STRING D7-JMM-4
13056: PPUSH
13057: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-5 ) ;
13061: LD_EXP 21
13065: PPUSH
13066: LD_STRING D7-Friend-5
13068: PPUSH
13069: CALL_OW 95
// Say ( JMM , D7-JMM-5 ) ;
13073: LD_EXP 1
13077: PPUSH
13078: LD_STRING D7-JMM-5
13080: PPUSH
13081: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-6 ) ;
13085: LD_EXP 21
13089: PPUSH
13090: LD_STRING D7-Friend-6
13092: PPUSH
13093: CALL_OW 95
// Say ( JMM , D7-JMM-6 ) ;
13097: LD_EXP 1
13101: PPUSH
13102: LD_STRING D7-JMM-6
13104: PPUSH
13105: CALL_OW 88
// DialogueOff ;
13109: CALL_OW 7
// ChangeMissionObjectives ( Mlegion ) ;
13113: LD_STRING Mlegion
13115: PPUSH
13116: CALL_OW 337
// end ;
13120: END
// every 0 0$1 trigger tick > Stevens_Coming_Time marked 10 do var Stevens_people , Un , New_vehicle , Stev_vehicles ;
13121: LD_OWVAR 1
13125: PUSH
13126: LD_EXP 200
13130: GREATER
13131: IFFALSE 13915
13133: GO 13135
13135: DISABLE
13136: LD_INT 0
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
// begin Stevens_people = [ ] ;
13142: LD_ADDR_VAR 0 1
13146: PUSH
13147: EMPTY
13148: ST_TO_ADDR
// if BobbyLoc = 6 then
13149: LD_EXP 41
13153: PUSH
13154: LD_INT 6
13156: EQUAL
13157: IFFALSE 13175
// Stevens_people = Stevens_people ^ Bobby ;
13159: LD_ADDR_VAR 0 1
13163: PUSH
13164: LD_VAR 0 1
13168: PUSH
13169: LD_EXP 3
13173: ADD
13174: ST_TO_ADDR
// if CyrusLoc = 6 then
13175: LD_EXP 42
13179: PUSH
13180: LD_INT 6
13182: EQUAL
13183: IFFALSE 13201
// Stevens_people = Stevens_people ^ Cyrus ;
13185: LD_ADDR_VAR 0 1
13189: PUSH
13190: LD_VAR 0 1
13194: PUSH
13195: LD_EXP 4
13199: ADD
13200: ST_TO_ADDR
// if LisaLoc = 6 then
13201: LD_EXP 43
13205: PUSH
13206: LD_INT 6
13208: EQUAL
13209: IFFALSE 13227
// Stevens_people = Stevens_people ^ Lisa ;
13211: LD_ADDR_VAR 0 1
13215: PUSH
13216: LD_VAR 0 1
13220: PUSH
13221: LD_EXP 5
13225: ADD
13226: ST_TO_ADDR
// if FrankLoc = 6 then
13227: LD_EXP 44
13231: PUSH
13232: LD_INT 6
13234: EQUAL
13235: IFFALSE 13253
// Stevens_people = Stevens_people ^ Frank ;
13237: LD_ADDR_VAR 0 1
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: LD_EXP 6
13251: ADD
13252: ST_TO_ADDR
// if BrownLoc = 6 then
13253: LD_EXP 45
13257: PUSH
13258: LD_INT 6
13260: EQUAL
13261: IFFALSE 13279
// Stevens_people = Stevens_people ^ Brown ;
13263: LD_ADDR_VAR 0 1
13267: PUSH
13268: LD_VAR 0 1
13272: PUSH
13273: LD_EXP 7
13277: ADD
13278: ST_TO_ADDR
// if DonaldsonLoc = 6 then
13279: LD_EXP 46
13283: PUSH
13284: LD_INT 6
13286: EQUAL
13287: IFFALSE 13305
// Stevens_people = Stevens_people ^ Donaldson ;
13289: LD_ADDR_VAR 0 1
13293: PUSH
13294: LD_VAR 0 1
13298: PUSH
13299: LD_EXP 8
13303: ADD
13304: ST_TO_ADDR
// if VanHoutenLoc = 6 then
13305: LD_EXP 47
13309: PUSH
13310: LD_INT 6
13312: EQUAL
13313: IFFALSE 13331
// Stevens_people = Stevens_people ^ VanHouten ;
13315: LD_ADDR_VAR 0 1
13319: PUSH
13320: LD_VAR 0 1
13324: PUSH
13325: LD_EXP 24
13329: ADD
13330: ST_TO_ADDR
// if GladstoneLoc = 6 then
13331: LD_EXP 48
13335: PUSH
13336: LD_INT 6
13338: EQUAL
13339: IFFALSE 13357
// Stevens_people = Stevens_people ^ Gladstone ;
13341: LD_ADDR_VAR 0 1
13345: PUSH
13346: LD_VAR 0 1
13350: PUSH
13351: LD_EXP 9
13355: ADD
13356: ST_TO_ADDR
// if YamokoLoc = 6 then
13357: LD_EXP 50
13361: PUSH
13362: LD_INT 6
13364: EQUAL
13365: IFFALSE 13383
// Stevens_people = Stevens_people ^ Yamoko ;
13367: LD_ADDR_VAR 0 1
13371: PUSH
13372: LD_VAR 0 1
13376: PUSH
13377: LD_EXP 14
13381: ADD
13382: ST_TO_ADDR
// if GaryLoc = 6 then
13383: LD_EXP 51
13387: PUSH
13388: LD_INT 6
13390: EQUAL
13391: IFFALSE 13409
// Stevens_people = Stevens_people ^ Gary ;
13393: LD_ADDR_VAR 0 1
13397: PUSH
13398: LD_VAR 0 1
13402: PUSH
13403: LD_EXP 15
13407: ADD
13408: ST_TO_ADDR
// if DenisLoc = 6 then
13409: LD_EXP 52
13413: PUSH
13414: LD_INT 6
13416: EQUAL
13417: IFFALSE 13435
// Stevens_people = Stevens_people ^ Denis ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_VAR 0 1
13428: PUSH
13429: LD_EXP 11
13433: ADD
13434: ST_TO_ADDR
// if CornellLoc = 6 then
13435: LD_EXP 53
13439: PUSH
13440: LD_INT 6
13442: EQUAL
13443: IFFALSE 13461
// Stevens_people = Stevens_people ^ Cornell ;
13445: LD_ADDR_VAR 0 1
13449: PUSH
13450: LD_VAR 0 1
13454: PUSH
13455: LD_EXP 10
13459: ADD
13460: ST_TO_ADDR
// if Stevens then
13461: LD_EXP 17
13465: IFFALSE 13485
// Stevens_people = Stevens_people ^ Stevens else
13467: LD_ADDR_VAR 0 1
13471: PUSH
13472: LD_VAR 0 1
13476: PUSH
13477: LD_EXP 17
13481: ADD
13482: ST_TO_ADDR
13483: GO 13501
// Stevens_people = Stevens_people ^ Baker ;
13485: LD_ADDR_VAR 0 1
13489: PUSH
13490: LD_VAR 0 1
13494: PUSH
13495: LD_EXP 23
13499: ADD
13500: ST_TO_ADDR
// Stevens_people = Stevens_people ^ OtherWithJMM diff [ 0 ] ;
13501: LD_ADDR_VAR 0 1
13505: PUSH
13506: LD_VAR 0 1
13510: PUSH
13511: LD_EXP 30
13515: ADD
13516: PUSH
13517: LD_INT 0
13519: PUSH
13520: EMPTY
13521: LIST
13522: DIFF
13523: ST_TO_ADDR
// for Un in Stevens_people do
13524: LD_ADDR_VAR 0 2
13528: PUSH
13529: LD_VAR 0 1
13533: PUSH
13534: FOR_IN
13535: IFFALSE 13666
// begin SetSide ( Un , americans ) ;
13537: LD_VAR 0 2
13541: PPUSH
13542: LD_EXP 176
13546: PPUSH
13547: CALL_OW 235
// uc_side = americans ;
13551: LD_ADDR_OWVAR 20
13555: PUSH
13556: LD_EXP 176
13560: ST_TO_ADDR
// uc_nation = nation_american ;
13561: LD_ADDR_OWVAR 21
13565: PUSH
13566: LD_INT 1
13568: ST_TO_ADDR
// uc_direction = 1 ;
13569: LD_ADDR_OWVAR 24
13573: PUSH
13574: LD_INT 1
13576: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
13577: LD_ADDR_OWVAR 37
13581: PUSH
13582: LD_INT 1
13584: ST_TO_ADDR
// vc_engine = engine_combustion ;
13585: LD_ADDR_OWVAR 39
13589: PUSH
13590: LD_INT 1
13592: ST_TO_ADDR
// vc_control = control_manual ;
13593: LD_ADDR_OWVAR 38
13597: PUSH
13598: LD_INT 1
13600: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
13601: LD_ADDR_OWVAR 40
13605: PUSH
13606: LD_INT 2
13608: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: CALL_OW 45
13618: ST_TO_ADDR
// Stev_vehicles = Stev_vehicles ^ New_vehicle ;
13619: LD_ADDR_VAR 0 4
13623: PUSH
13624: LD_VAR 0 4
13628: PUSH
13629: LD_VAR 0 3
13633: ADD
13634: ST_TO_ADDR
// PlaceHumanInUnit ( Un , New_vehicle ) ;
13635: LD_VAR 0 2
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: CALL_OW 52
// PlaceUnitArea ( New_vehicle , Stev_place , false ) ;
13649: LD_VAR 0 3
13653: PPUSH
13654: LD_INT 35
13656: PPUSH
13657: LD_INT 0
13659: PPUSH
13660: CALL_OW 49
// end ;
13664: GO 13534
13666: POP
13667: POP
// DialogueON ;
13668: CALL_OW 6
// CenterOnUnits ( Stev_vehicles ) ;
13672: LD_VAR 0 4
13676: PPUSH
13677: CALL_OW 85
// if Stevens then
13681: LD_EXP 17
13685: IFFALSE 13785
// begin SayRadio ( Stevens , D8-Huck-1 ) ;
13687: LD_EXP 17
13691: PPUSH
13692: LD_STRING D8-Huck-1
13694: PPUSH
13695: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
13699: LD_EXP 1
13703: PPUSH
13704: LD_STRING D8-JMM-1
13706: PPUSH
13707: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
13711: LD_EXP 17
13715: PPUSH
13716: LD_STRING D8-Huck-2
13718: PPUSH
13719: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
13723: LD_EXP 1
13727: PPUSH
13728: LD_STRING D8-JMM-2
13730: PPUSH
13731: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
13735: LD_EXP 17
13739: PPUSH
13740: LD_STRING D8-Huck-3
13742: PPUSH
13743: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
13747: LD_EXP 1
13751: PPUSH
13752: LD_STRING D8-JMM-3
13754: PPUSH
13755: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
13759: LD_EXP 17
13763: PPUSH
13764: LD_STRING D8-Huck-4
13766: PPUSH
13767: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
13771: LD_EXP 1
13775: PPUSH
13776: LD_STRING D8-JMM-4
13778: PPUSH
13779: CALL_OW 88
// end else
13783: GO 13881
// begin SayRadio ( Baker , D8-Huck-1 ) ;
13785: LD_EXP 23
13789: PPUSH
13790: LD_STRING D8-Huck-1
13792: PPUSH
13793: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
13797: LD_EXP 1
13801: PPUSH
13802: LD_STRING D8-JMM-1a
13804: PPUSH
13805: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
13809: LD_EXP 23
13813: PPUSH
13814: LD_STRING D8-Huck-2
13816: PPUSH
13817: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
13821: LD_EXP 1
13825: PPUSH
13826: LD_STRING D8-JMM-2
13828: PPUSH
13829: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
13833: LD_EXP 23
13837: PPUSH
13838: LD_STRING D8-Huck-3
13840: PPUSH
13841: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
13845: LD_EXP 1
13849: PPUSH
13850: LD_STRING D8-JMM-3
13852: PPUSH
13853: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
13857: LD_EXP 23
13861: PPUSH
13862: LD_STRING D8-Huck-4
13864: PPUSH
13865: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
13869: LD_EXP 1
13873: PPUSH
13874: LD_STRING D8-JMM-4
13876: PPUSH
13877: CALL_OW 88
// end ; DialogueOFF ;
13881: CALL_OW 7
// SetTech ( tech_SibFiss , americans , state_enabled ) ;
13885: LD_INT 25
13887: PPUSH
13888: LD_EXP 176
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: CALL_OW 322
// ComMoveXY ( Stev_vehicles , 47 , 63 ) ;
13900: LD_VAR 0 4
13904: PPUSH
13905: LD_INT 47
13907: PPUSH
13908: LD_INT 63
13910: PPUSH
13911: CALL_OW 111
// end ;
13915: PPOPN 4
13917: END
// function CCreateVehicle ( nat , side , dir , chassis , engine , control , weapon ) ; var veh , i , person ; begin
13918: LD_INT 0
13920: PPUSH
13921: PPUSH
13922: PPUSH
13923: PPUSH
// uc_side = side ;
13924: LD_ADDR_OWVAR 20
13928: PUSH
13929: LD_VAR 0 2
13933: ST_TO_ADDR
// uc_direction = dir ;
13934: LD_ADDR_OWVAR 24
13938: PUSH
13939: LD_VAR 0 3
13943: ST_TO_ADDR
// uc_nation = nat ;
13944: LD_ADDR_OWVAR 21
13948: PUSH
13949: LD_VAR 0 1
13953: ST_TO_ADDR
// vc_chassis = chassis ;
13954: LD_ADDR_OWVAR 37
13958: PUSH
13959: LD_VAR 0 4
13963: ST_TO_ADDR
// vc_control = control ;
13964: LD_ADDR_OWVAR 38
13968: PUSH
13969: LD_VAR 0 6
13973: ST_TO_ADDR
// vc_engine = engine ;
13974: LD_ADDR_OWVAR 39
13978: PUSH
13979: LD_VAR 0 5
13983: ST_TO_ADDR
// vc_weapon = weapon ;
13984: LD_ADDR_OWVAR 40
13988: PUSH
13989: LD_VAR 0 7
13993: ST_TO_ADDR
// veh = CreateVehicle ;
13994: LD_ADDR_VAR 0 9
13998: PUSH
13999: CALL_OW 45
14003: ST_TO_ADDR
// result = veh ;
14004: LD_ADDR_VAR 0 8
14008: PUSH
14009: LD_VAR 0 9
14013: ST_TO_ADDR
// end ;
14014: LD_VAR 0 8
14018: RET
// every 0 0$2 trigger ( tick > Woman_Coming_Time ) and ( tick > Time_of_Ingame_Run_Over ) marked 11 do var New_veh , i , Un , Woman_vehs ;
14019: LD_OWVAR 1
14023: PUSH
14024: LD_EXP 201
14028: GREATER
14029: PUSH
14030: LD_OWVAR 1
14034: PUSH
14035: LD_EXP 189
14039: GREATER
14040: AND
14041: IFFALSE 14525
14043: GO 14045
14045: DISABLE
14046: LD_INT 0
14048: PPUSH
14049: PPUSH
14050: PPUSH
14051: PPUSH
// begin Woman_vehs = [ ] ;
14052: LD_ADDR_VAR 0 4
14056: PUSH
14057: EMPTY
14058: ST_TO_ADDR
// for i = 1 to 3 do
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: DOUBLE
14065: LD_INT 1
14067: DEC
14068: ST_TO_ADDR
14069: LD_INT 3
14071: PUSH
14072: FOR_TO
14073: IFFALSE 14126
// begin New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_computer , us_laser ) ;
14075: LD_ADDR_VAR 0 1
14079: PUSH
14080: LD_INT 1
14082: PPUSH
14083: LD_EXP 176
14087: PPUSH
14088: LD_INT 1
14090: PPUSH
14091: LD_INT 3
14093: PPUSH
14094: LD_INT 3
14096: PPUSH
14097: LD_INT 3
14099: PPUSH
14100: LD_INT 9
14102: PPUSH
14103: CALL 13918 0 7
14107: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14108: LD_ADDR_VAR 0 4
14112: PUSH
14113: LD_VAR 0 4
14117: PUSH
14118: LD_VAR 0 1
14122: ADD
14123: ST_TO_ADDR
// end ;
14124: GO 14072
14126: POP
14127: POP
// New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_computer , us_rocket_launcher ) ;
14128: LD_ADDR_VAR 0 1
14132: PUSH
14133: LD_INT 1
14135: PPUSH
14136: LD_EXP 176
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 3
14146: PPUSH
14147: LD_INT 3
14149: PPUSH
14150: LD_INT 3
14152: PPUSH
14153: LD_INT 7
14155: PPUSH
14156: CALL 13918 0 7
14160: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14161: LD_ADDR_VAR 0 4
14165: PUSH
14166: LD_VAR 0 4
14170: PUSH
14171: LD_VAR 0 1
14175: ADD
14176: ST_TO_ADDR
// New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_manual , us_rocket_launcher ) ;
14177: LD_ADDR_VAR 0 1
14181: PUSH
14182: LD_INT 1
14184: PPUSH
14185: LD_EXP 176
14189: PPUSH
14190: LD_INT 1
14192: PPUSH
14193: LD_INT 3
14195: PPUSH
14196: LD_INT 3
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: LD_INT 7
14204: PPUSH
14205: CALL 13918 0 7
14209: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14210: LD_ADDR_VAR 0 4
14214: PUSH
14215: LD_VAR 0 4
14219: PUSH
14220: LD_VAR 0 1
14224: ADD
14225: ST_TO_ADDR
// SetSide ( JMM_Woman , americans ) ;
14226: LD_EXP 37
14230: PPUSH
14231: LD_EXP 176
14235: PPUSH
14236: CALL_OW 235
// PlaceHumanInUnit ( JMM_Woman , New_veh ) ;
14240: LD_EXP 37
14244: PPUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 52
// for Un in Woman_vehs do
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: LD_VAR 0 4
14263: PUSH
14264: FOR_IN
14265: IFFALSE 14284
// PlaceUnitArea ( Un , Stev_place , false ) ;
14267: LD_VAR 0 3
14271: PPUSH
14272: LD_INT 35
14274: PPUSH
14275: LD_INT 0
14277: PPUSH
14278: CALL_OW 49
14282: GO 14264
14284: POP
14285: POP
// Wait ( 0 0$1 ) ;
14286: LD_INT 35
14288: PPUSH
14289: CALL_OW 67
// DialogueON ;
14293: CALL_OW 6
// case woman_in_am14 of 1 :
14297: LD_EXP 36
14301: PUSH
14302: LD_INT 1
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14334
14310: POP
// begin CenterOnUnits ( Joan ) ;
14311: LD_EXP 12
14315: PPUSH
14316: CALL_OW 85
// SayRadio ( Joan , D10BW-Joan-1 ) ;
14320: LD_EXP 12
14324: PPUSH
14325: LD_STRING D10BW-Joan-1
14327: PPUSH
14328: CALL_OW 94
// end ; 2 :
14332: GO 14399
14334: LD_INT 2
14336: DOUBLE
14337: EQUAL
14338: IFTRUE 14342
14340: GO 14366
14342: POP
// begin CenterOnUnits ( Lisa ) ;
14343: LD_EXP 5
14347: PPUSH
14348: CALL_OW 85
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
14352: LD_EXP 5
14356: PPUSH
14357: LD_STRING D10BW-Lisa-1
14359: PPUSH
14360: CALL_OW 94
// end ; 3 :
14364: GO 14399
14366: LD_INT 3
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14398
14374: POP
// begin CenterOnUnits ( Coonie ) ;
14375: LD_EXP 18
14379: PPUSH
14380: CALL_OW 85
// SayRadio ( Coonie , D10BW-Con-1 ) ;
14384: LD_EXP 18
14388: PPUSH
14389: LD_STRING D10BW-Con-1
14391: PPUSH
14392: CALL_OW 94
// end ; end ;
14396: GO 14399
14398: POP
// DialogueOFF ;
14399: CALL_OW 7
// Named_Americans = Named_Americans ^ JMM_woman ;
14403: LD_ADDR_EXP 62
14407: PUSH
14408: LD_EXP 62
14412: PUSH
14413: LD_EXP 37
14417: ADD
14418: ST_TO_ADDR
// All_americans = All_americans ^ JMM_woman ;
14419: LD_ADDR_EXP 61
14423: PUSH
14424: LD_EXP 61
14428: PUSH
14429: LD_EXP 37
14433: ADD
14434: ST_TO_ADDR
// ComMoveXY ( Woman_vehs , 97 , 167 ) ;
14435: LD_VAR 0 4
14439: PPUSH
14440: LD_INT 97
14442: PPUSH
14443: LD_INT 167
14445: PPUSH
14446: CALL_OW 111
// AddComMoveXY ( Woman_vehs , 102 , 147 ) ;
14450: LD_VAR 0 4
14454: PPUSH
14455: LD_INT 102
14457: PPUSH
14458: LD_INT 147
14460: PPUSH
14461: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 96 , 128 ) ;
14465: LD_VAR 0 4
14469: PPUSH
14470: LD_INT 96
14472: PPUSH
14473: LD_INT 128
14475: PPUSH
14476: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 80 , 108 ) ;
14480: LD_VAR 0 4
14484: PPUSH
14485: LD_INT 80
14487: PPUSH
14488: LD_INT 108
14490: PPUSH
14491: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 63 , 92 ) ;
14495: LD_VAR 0 4
14499: PPUSH
14500: LD_INT 63
14502: PPUSH
14503: LD_INT 92
14505: PPUSH
14506: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 47 , 63 ) ;
14510: LD_VAR 0 4
14514: PPUSH
14515: LD_INT 47
14517: PPUSH
14518: LD_INT 63
14520: PPUSH
14521: CALL_OW 171
// end ;
14525: PPOPN 4
14527: END
// every 0 0$2 trigger ( tick > Woman_Coming_Time ) and ( tick > Time_of_Ingame_Run_Over ) marked 12 do var New_veh , i , Un , Vsevolod_vehs ;
14528: LD_OWVAR 1
14532: PUSH
14533: LD_EXP 201
14537: GREATER
14538: PUSH
14539: LD_OWVAR 1
14543: PUSH
14544: LD_EXP 189
14548: GREATER
14549: AND
14550: IFFALSE 15304
14552: GO 14554
14554: DISABLE
14555: LD_INT 0
14557: PPUSH
14558: PPUSH
14559: PPUSH
14560: PPUSH
// begin Vsevolod_vehs = [ ] ;
14561: LD_ADDR_VAR 0 4
14565: PUSH
14566: EMPTY
14567: ST_TO_ADDR
// for i = 1 to 4 do
14568: LD_ADDR_VAR 0 2
14572: PUSH
14573: DOUBLE
14574: LD_INT 1
14576: DEC
14577: ST_TO_ADDR
14578: LD_INT 4
14580: PUSH
14581: FOR_TO
14582: IFFALSE 14635
// begin New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_computer , us_laser ) ;
14584: LD_ADDR_VAR 0 1
14588: PUSH
14589: LD_INT 1
14591: PPUSH
14592: LD_EXP 179
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: LD_INT 3
14602: PPUSH
14603: LD_INT 3
14605: PPUSH
14606: LD_INT 3
14608: PPUSH
14609: LD_INT 9
14611: PPUSH
14612: CALL 13918 0 7
14616: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14617: LD_ADDR_VAR 0 4
14621: PUSH
14622: LD_VAR 0 4
14626: PUSH
14627: LD_VAR 0 1
14631: ADD
14632: ST_TO_ADDR
// end ;
14633: GO 14581
14635: POP
14636: POP
// for i = 1 to 3 do
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: DOUBLE
14643: LD_INT 1
14645: DEC
14646: ST_TO_ADDR
14647: LD_INT 3
14649: PUSH
14650: FOR_TO
14651: IFFALSE 14704
// begin New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_computer , us_rocket_launcher ) ;
14653: LD_ADDR_VAR 0 1
14657: PUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_EXP 179
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: LD_INT 3
14671: PPUSH
14672: LD_INT 3
14674: PPUSH
14675: LD_INT 3
14677: PPUSH
14678: LD_INT 7
14680: PPUSH
14681: CALL 13918 0 7
14685: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14686: LD_ADDR_VAR 0 4
14690: PUSH
14691: LD_VAR 0 4
14695: PUSH
14696: LD_VAR 0 1
14700: ADD
14701: ST_TO_ADDR
// end ;
14702: GO 14650
14704: POP
14705: POP
// New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_manual , us_rocket_launcher ) ;
14706: LD_ADDR_VAR 0 1
14710: PUSH
14711: LD_INT 1
14713: PPUSH
14714: LD_EXP 179
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: LD_INT 3
14724: PPUSH
14725: LD_INT 3
14727: PPUSH
14728: LD_INT 1
14730: PPUSH
14731: LD_INT 7
14733: PPUSH
14734: CALL 13918 0 7
14738: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14739: LD_ADDR_VAR 0 4
14743: PUSH
14744: LD_VAR 0 4
14748: PUSH
14749: LD_VAR 0 1
14753: ADD
14754: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , New_veh ) ;
14755: LD_EXP 25
14759: PPUSH
14760: LD_VAR 0 1
14764: PPUSH
14765: CALL_OW 52
// for Un in Vsevolod_vehs do
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: LD_VAR 0 4
14778: PUSH
14779: FOR_IN
14780: IFFALSE 14799
// PlaceUnitArea ( Un , Stev_place , false ) ;
14782: LD_VAR 0 3
14786: PPUSH
14787: LD_INT 35
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 49
14797: GO 14779
14799: POP
14800: POP
// ComMoveXY ( Vsevolod_vehs , 135 , 180 ) ;
14801: LD_VAR 0 4
14805: PPUSH
14806: LD_INT 135
14808: PPUSH
14809: LD_INT 180
14811: PPUSH
14812: CALL_OW 111
// AddComMoveXY ( Vsevolod_vehs , 159 , 179 ) ;
14816: LD_VAR 0 4
14820: PPUSH
14821: LD_INT 159
14823: PPUSH
14824: LD_INT 179
14826: PPUSH
14827: CALL_OW 171
// WaitPos ( 159 , 179 , 10 , Vsevolod_vehs , 1 ) ;
14831: LD_INT 159
14833: PPUSH
14834: LD_INT 179
14836: PPUSH
14837: LD_INT 10
14839: PPUSH
14840: LD_VAR 0 4
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: CALL 17974 0 5
// AddComMoveXY ( Vsevolod_vehs , 174 , 170 ) ;
14852: LD_VAR 0 4
14856: PPUSH
14857: LD_INT 174
14859: PPUSH
14860: LD_INT 170
14862: PPUSH
14863: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 170 , 149 ) ;
14867: LD_VAR 0 4
14871: PPUSH
14872: LD_INT 170
14874: PPUSH
14875: LD_INT 149
14877: PPUSH
14878: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 156 , 134 ) ;
14882: LD_VAR 0 4
14886: PPUSH
14887: LD_INT 156
14889: PPUSH
14890: LD_INT 134
14892: PPUSH
14893: CALL_OW 171
// WaitPos ( 156 , 134 , 10 , Vsevolod_vehs , 1 ) ;
14897: LD_INT 156
14899: PPUSH
14900: LD_INT 134
14902: PPUSH
14903: LD_INT 10
14905: PPUSH
14906: LD_VAR 0 4
14910: PPUSH
14911: LD_INT 1
14913: PPUSH
14914: CALL 17974 0 5
// AddComMoveXY ( Vsevolod_vehs , 132 , 118 ) ;
14918: LD_VAR 0 4
14922: PPUSH
14923: LD_INT 132
14925: PPUSH
14926: LD_INT 118
14928: PPUSH
14929: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 113 , 97 ) ;
14933: LD_VAR 0 4
14937: PPUSH
14938: LD_INT 113
14940: PPUSH
14941: LD_INT 97
14943: PPUSH
14944: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 103 , 79 ) ;
14948: LD_VAR 0 4
14952: PPUSH
14953: LD_INT 103
14955: PPUSH
14956: LD_INT 79
14958: PPUSH
14959: CALL_OW 171
// WaitPos ( 103 , 79 , 10 , Vsevolod_vehs , 1 ) ;
14963: LD_INT 103
14965: PPUSH
14966: LD_INT 79
14968: PPUSH
14969: LD_INT 10
14971: PPUSH
14972: LD_VAR 0 4
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL 17974 0 5
// AddComMoveXY ( Vsevolod_vehs , 73 , 62 ) ;
14984: LD_VAR 0 4
14988: PPUSH
14989: LD_INT 73
14991: PPUSH
14992: LD_INT 62
14994: PPUSH
14995: CALL_OW 171
// WaitPos ( 73 , 62 , 10 , Vsevolod_vehs , 1 ) ;
14999: LD_INT 73
15001: PPUSH
15002: LD_INT 62
15004: PPUSH
15005: LD_INT 10
15007: PPUSH
15008: LD_VAR 0 4
15012: PPUSH
15013: LD_INT 1
15015: PPUSH
15016: CALL 17974 0 5
// placeseeing ( 73 , 62 , americans , - 8 ) ;
15020: LD_INT 73
15022: PPUSH
15023: LD_INT 62
15025: PPUSH
15026: LD_EXP 176
15030: PPUSH
15031: LD_INT 8
15033: NEG
15034: PPUSH
15035: CALL_OW 330
// CenterOnXY ( 73 , 62 ) ;
15039: LD_INT 73
15041: PPUSH
15042: LD_INT 62
15044: PPUSH
15045: CALL_OW 84
// Wait ( 0 0$3 ) ;
15049: LD_INT 105
15051: PPUSH
15052: CALL_OW 67
// SA_OnVsevolodAppear ;
15056: CALL 56314 0 0
// DialogueON ;
15060: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
15064: LD_EXP 1
15068: PPUSH
15069: LD_STRING D10nB-JMM-1
15071: PPUSH
15072: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-1 ) ;
15076: LD_EXP 25
15080: PPUSH
15081: LD_STRING D10nB-Vse-1
15083: PPUSH
15084: CALL_OW 88
// if not ( IsOk ( Burlak ) ) then
15088: LD_EXP 19
15092: PPUSH
15093: CALL_OW 302
15097: NOT
15098: IFFALSE 15112
// Say ( Vsevolod ,  ) ;
15100: LD_EXP 25
15104: PPUSH
15105: LD_STRING 
15107: PPUSH
15108: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
15112: LD_EXP 1
15116: PPUSH
15117: LD_STRING D10nB-JMM-2
15119: PPUSH
15120: CALL_OW 88
// case Woman_in_am14 of 1 :
15124: LD_EXP 36
15128: PUSH
15129: LD_INT 1
15131: DOUBLE
15132: EQUAL
15133: IFTRUE 15137
15135: GO 15188
15137: POP
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
15138: LD_EXP 25
15142: PPUSH
15143: LD_STRING D10nB-Vse-2
15145: PPUSH
15146: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
15150: LD_EXP 1
15154: PPUSH
15155: LD_STRING D10nB-JMM-3
15157: PPUSH
15158: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
15162: LD_EXP 25
15166: PPUSH
15167: LD_STRING D10nB-Vse-3
15169: PPUSH
15170: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
15174: LD_EXP 1
15178: PPUSH
15179: LD_STRING D10nB-JMM-4
15181: PPUSH
15182: CALL_OW 88
// end ; 2 :
15186: GO 15271
15188: LD_INT 2
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15235
15196: POP
// begin Say ( JMM , D10nB-Vse-4 ) ;
15197: LD_EXP 1
15201: PPUSH
15202: LD_STRING D10nB-Vse-4
15204: PPUSH
15205: CALL_OW 88
// Say ( Vsevolod , D10nB-JMM-5 ) ;
15209: LD_EXP 25
15213: PPUSH
15214: LD_STRING D10nB-JMM-5
15216: PPUSH
15217: CALL_OW 88
// Say ( JMM , D10nB-Vse-5 ) ;
15221: LD_EXP 1
15225: PPUSH
15226: LD_STRING D10nB-Vse-5
15228: PPUSH
15229: CALL_OW 88
// end ; 3 :
15233: GO 15271
15235: LD_INT 3
15237: DOUBLE
15238: EQUAL
15239: IFTRUE 15243
15241: GO 15270
15243: POP
// begin Say ( Vsevolod , D10nB-Vse-5a ) ;
15244: LD_EXP 25
15248: PPUSH
15249: LD_STRING D10nB-Vse-5a
15251: PPUSH
15252: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
15256: LD_EXP 1
15260: PPUSH
15261: LD_STRING D10nB-JMM-6
15263: PPUSH
15264: CALL_OW 88
// end ; end ;
15268: GO 15271
15270: POP
// DialogueOFF ;
15271: CALL_OW 7
// removeseeing ( 73 , 62 , americans ) ;
15275: LD_INT 73
15277: PPUSH
15278: LD_INT 62
15280: PPUSH
15281: LD_EXP 176
15285: PPUSH
15286: CALL_OW 331
// AddMcUnits ( Russian1_reg_id , Vsevolod_vehs ) ;
15290: LD_EXP 237
15294: PPUSH
15295: LD_VAR 0 4
15299: PPUSH
15300: CALL_OW 390
// end ;
15304: PPOPN 4
15306: END
// every 0 0$1 trigger tick > Alliance_broadcast marked 10 do var list_of_q , selection ;
15307: LD_OWVAR 1
15311: PUSH
15312: LD_EXP 202
15316: GREATER
15317: IFFALSE 15723
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
15325: PPUSH
// begin DialogueON ;
15326: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
15330: LD_EXP 20
15334: PPUSH
15335: LD_STRING D9-Roth-1
15337: PPUSH
15338: CALL_OW 94
// CenterOnUnits ( JMM ) ;
15342: LD_EXP 1
15346: PPUSH
15347: CALL_OW 85
// Say ( JMM , D9-JMM-1 ) ;
15351: LD_EXP 1
15355: PPUSH
15356: LD_STRING D9-JMM-1
15358: PPUSH
15359: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
15363: LD_EXP 20
15367: PPUSH
15368: LD_STRING D9-Roth-2
15370: PPUSH
15371: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
15375: LD_EXP 20
15379: PPUSH
15380: LD_STRING D9-Roth-2a
15382: PPUSH
15383: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
15387: LD_EXP 26
15391: PPUSH
15392: LD_STRING D9-Pla-2
15394: PPUSH
15395: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
15399: LD_EXP 20
15403: PPUSH
15404: LD_STRING D9-Roth-3
15406: PPUSH
15407: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
15411: LD_EXP 26
15415: PPUSH
15416: LD_STRING D9-Pla-3
15418: PPUSH
15419: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
15423: LD_EXP 20
15427: PPUSH
15428: LD_STRING D9-Roth-4
15430: PPUSH
15431: CALL_OW 94
// list_of_q = [ 1 , 2 , 3 ] ;
15435: LD_ADDR_VAR 0 1
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: LD_INT 3
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// selection = SelectiveQuery ( Q9 , list_of_q ) ;
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_STRING Q9
15461: PPUSH
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 98
15471: ST_TO_ADDR
// case selection of 1 :
15472: LD_VAR 0 2
15476: PUSH
15477: LD_INT 1
15479: DOUBLE
15480: EQUAL
15481: IFTRUE 15485
15483: GO 15507
15485: POP
// begin Wait ( 0 0$3 ) ;
15486: LD_INT 105
15488: PPUSH
15489: CALL_OW 67
// SayRadio ( Roth , D9a-Roth-1 ) ;
15493: LD_EXP 20
15497: PPUSH
15498: LD_STRING D9a-Roth-1
15500: PPUSH
15501: CALL_OW 94
// end ; 2 :
15505: GO 15640
15507: LD_INT 2
15509: DOUBLE
15510: EQUAL
15511: IFTRUE 15515
15513: GO 15549
15515: POP
// begin Wait ( 0 0$0.5 ) ;
15516: LD_INT 18
15518: PPUSH
15519: CALL_OW 67
// Say ( JMM , D9b-JMM-1 ) ;
15523: LD_EXP 1
15527: PPUSH
15528: LD_STRING D9b-JMM-1
15530: PPUSH
15531: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
15535: LD_EXP 20
15539: PPUSH
15540: LD_STRING D9b-Roth-1
15542: PPUSH
15543: CALL_OW 94
// end ; 3 :
15547: GO 15640
15549: LD_INT 3
15551: DOUBLE
15552: EQUAL
15553: IFTRUE 15557
15555: GO 15639
15557: POP
// begin Wait ( 0 0$2 ) ;
15558: LD_INT 70
15560: PPUSH
15561: CALL_OW 67
// Say ( JMM , D9c-JMM-1 ) ;
15565: LD_EXP 1
15569: PPUSH
15570: LD_STRING D9c-JMM-1
15572: PPUSH
15573: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
15577: LD_EXP 20
15581: PPUSH
15582: LD_STRING D9c-Roth-1
15584: PPUSH
15585: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
15589: LD_EXP 1
15593: PPUSH
15594: LD_STRING D9c-JMM-2
15596: PPUSH
15597: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
15601: LD_EXP 20
15605: PPUSH
15606: LD_STRING D9c-Roth-2
15608: PPUSH
15609: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
15613: LD_EXP 1
15617: PPUSH
15618: LD_STRING D9c-JMM-3
15620: PPUSH
15621: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-3 ) ;
15625: LD_EXP 20
15629: PPUSH
15630: LD_STRING D9c-Roth-3
15632: PPUSH
15633: CALL_OW 94
// end ; end ;
15637: GO 15640
15639: POP
// SayRadio ( Roth , D9cont-Roth-1 ) ;
15640: LD_EXP 20
15644: PPUSH
15645: LD_STRING D9cont-Roth-1
15647: PPUSH
15648: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
15652: LD_EXP 1
15656: PPUSH
15657: LD_STRING D9cont-JMM-1
15659: PPUSH
15660: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
15664: LD_EXP 20
15668: PPUSH
15669: LD_STRING D9cont-Roth-2
15671: PPUSH
15672: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
15676: LD_EXP 1
15680: PPUSH
15681: LD_STRING D9cont-JMM-2
15683: PPUSH
15684: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
15688: LD_EXP 20
15692: PPUSH
15693: LD_STRING D9cont-Roth-3
15695: PPUSH
15696: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
15700: LD_EXP 1
15704: PPUSH
15705: LD_STRING D9cont-JMM-3
15707: PPUSH
15708: CALL_OW 88
// DialogueOFF ;
15712: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
15716: LD_STRING M3
15718: PPUSH
15719: CALL_OW 337
// end ;
15723: PPOPN 2
15725: END
// every 0 0$1 trigger Behemots_broadcast < tick marked 10 do var Sold1 , list_of_all_males , UnNamed_males , Named_males ;
15726: LD_EXP 203
15730: PUSH
15731: LD_OWVAR 1
15735: LESS
15736: IFFALSE 16184
15738: GO 15740
15740: DISABLE
15741: LD_INT 0
15743: PPUSH
15744: PPUSH
15745: PPUSH
15746: PPUSH
// begin Sold1 = 0 ;
15747: LD_ADDR_VAR 0 1
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// BuildBehemots ;
15755: CALL 48078 0 0
// list_of_all_males = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) ;
15759: LD_ADDR_VAR 0 2
15763: PUSH
15764: LD_INT 22
15766: PUSH
15767: LD_EXP 176
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 21
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 26
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 50
15798: PUSH
15799: EMPTY
15800: LIST
15801: PUSH
15802: LD_INT 3
15804: PUSH
15805: LD_INT 2
15807: PUSH
15808: LD_INT 25
15810: PUSH
15811: LD_INT 12
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 16
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 25
15830: PUSH
15831: LD_INT 17
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 25
15840: PUSH
15841: LD_INT 15
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 25
15850: PUSH
15851: LD_INT 17
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: PPUSH
15877: CALL_OW 69
15881: ST_TO_ADDR
// UnNamed_males = list_of_all_males diff [ JMM , Powell , Bobby , Cyrus , Frank , Brown , Gladstone , Cornell , Denis , Gary , Stevens ] ;
15882: LD_ADDR_VAR 0 3
15886: PUSH
15887: LD_VAR 0 2
15891: PUSH
15892: LD_EXP 1
15896: PUSH
15897: LD_EXP 2
15901: PUSH
15902: LD_EXP 3
15906: PUSH
15907: LD_EXP 4
15911: PUSH
15912: LD_EXP 6
15916: PUSH
15917: LD_EXP 7
15921: PUSH
15922: LD_EXP 9
15926: PUSH
15927: LD_EXP 10
15931: PUSH
15932: LD_EXP 11
15936: PUSH
15937: LD_EXP 15
15941: PUSH
15942: LD_EXP 17
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: DIFF
15960: ST_TO_ADDR
// if UnNamed_males <> 0 then
15961: LD_VAR 0 3
15965: PUSH
15966: LD_INT 0
15968: NONEQUAL
15969: IFFALSE 15997
// begin Sold1 = UnNamed_males [ Rand ( 1 , UnNamed_males ) ] ;
15971: LD_ADDR_VAR 0 1
15975: PUSH
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 1
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: CALL_OW 12
15993: ARRAY
15994: ST_TO_ADDR
// end else
15995: GO 16071
// if list_of_all_males diff [ JMM , Powell ] <> 0 then
15997: LD_VAR 0 2
16001: PUSH
16002: LD_EXP 1
16006: PUSH
16007: LD_EXP 2
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 0
16018: NONEQUAL
16019: DIFF
16020: IFFALSE 16071
// begin list_of_all_males = list_of_all_males diff [ JMM , Powell ] ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: LD_EXP 1
16036: PUSH
16037: LD_EXP 2
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: DIFF
16046: ST_TO_ADDR
// Sold1 = list_of_all_males [ Rand ( 1 , list_of_all_males ) ] ;
16047: LD_ADDR_VAR 0 1
16051: PUSH
16052: LD_VAR 0 2
16056: PUSH
16057: LD_INT 1
16059: PPUSH
16060: LD_VAR 0 2
16064: PPUSH
16065: CALL_OW 12
16069: ARRAY
16070: ST_TO_ADDR
// end ; if Sold1 <> 0 then
16071: LD_VAR 0 1
16075: PUSH
16076: LD_INT 0
16078: NONEQUAL
16079: IFFALSE 16184
// begin CenterNowOnUnits ( JMM ) ;
16081: LD_EXP 1
16085: PPUSH
16086: CALL_OW 87
// DialogueON ;
16090: CALL_OW 6
// Wait ( 0 0$1 ) ;
16094: LD_INT 35
16096: PPUSH
16097: CALL_OW 67
// Say ( Sold1 , D11-Sol1-1 ) ;
16101: LD_VAR 0 1
16105: PPUSH
16106: LD_STRING D11-Sol1-1
16108: PPUSH
16109: CALL_OW 88
// SayRadio ( Platonov , D11-Pla-1 ) ;
16113: LD_EXP 26
16117: PPUSH
16118: LD_STRING D11-Pla-1
16120: PPUSH
16121: CALL_OW 94
// SayRadio ( Kovaljuk , D11-Kov-1 ) ;
16125: LD_EXP 27
16129: PPUSH
16130: LD_STRING D11-Kov-1
16132: PPUSH
16133: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
16137: LD_EXP 26
16141: PPUSH
16142: LD_STRING D11-Pla-2
16144: PPUSH
16145: CALL_OW 94
// Say ( Sold1 , D11-Sol1-2 ) ;
16149: LD_VAR 0 1
16153: PPUSH
16154: LD_STRING D11-Sol1-2
16156: PPUSH
16157: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
16161: LD_EXP 1
16165: PPUSH
16166: LD_STRING D11-JMM-2
16168: PPUSH
16169: CALL_OW 88
// DialogueOff ;
16173: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
16177: LD_STRING M4
16179: PPUSH
16180: CALL_OW 337
// end ; end ;
16184: PPOPN 4
16186: END
// every 0 0$1 trigger Alaskite_Bomb_Time < tick marked 10 do var list_of_q , selection , Americans_has_sib_rocket ;
16187: LD_EXP 212
16191: PUSH
16192: LD_OWVAR 1
16196: LESS
16197: IFFALSE 16532
16199: GO 16201
16201: DISABLE
16202: LD_INT 0
16204: PPUSH
16205: PPUSH
16206: PPUSH
// begin DialogueON ;
16207: CALL_OW 6
// Say ( Platonov , D15-Pla-1 ) ;
16211: LD_EXP 26
16215: PPUSH
16216: LD_STRING D15-Pla-1
16218: PPUSH
16219: CALL_OW 88
// list_of_q = [ 1 , 2 , 3 , 4 ] ;
16223: LD_ADDR_VAR 0 1
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: LD_INT 2
16233: PUSH
16234: LD_INT 3
16236: PUSH
16237: LD_INT 4
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: ST_TO_ADDR
// selection = SelectiveQuery ( Q15a , list_of_q ) ;
16246: LD_ADDR_VAR 0 2
16250: PUSH
16251: LD_STRING Q15a
16253: PPUSH
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 98
16263: ST_TO_ADDR
// case selection of 1 :
16264: LD_VAR 0 2
16268: PUSH
16269: LD_INT 1
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16305
16277: POP
// begin Say ( JMM , D15a-JMM-1 ) ;
16278: LD_EXP 1
16282: PPUSH
16283: LD_STRING D15a-JMM-1
16285: PPUSH
16286: CALL_OW 88
// enable ( JMM_has_surrounded ) ;
16290: LD_EXP 155
16294: ENABLE_MARKED
// Friend_has_to_escape = true ;
16295: LD_ADDR_EXP 228
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// end ; 2 :
16303: GO 16528
16305: LD_INT 2
16307: DOUBLE
16308: EQUAL
16309: IFTRUE 16313
16311: GO 16354
16313: POP
// begin Say ( JMM , D15b-JMM-1 ) ;
16314: LD_EXP 1
16318: PPUSH
16319: LD_STRING D15b-JMM-1
16321: PPUSH
16322: CALL_OW 88
// Say ( Platonov , D15b-Pla-1 ) ;
16326: LD_EXP 26
16330: PPUSH
16331: LD_STRING D15b-Pla-1
16333: PPUSH
16334: CALL_OW 88
// Time_to_Think_Over = tick + 3 3$0 ;
16338: LD_ADDR_EXP 217
16342: PUSH
16343: LD_OWVAR 1
16347: PUSH
16348: LD_INT 6300
16350: PLUS
16351: ST_TO_ADDR
// end ; 3 :
16352: GO 16528
16354: LD_INT 3
16356: DOUBLE
16357: EQUAL
16358: IFTRUE 16362
16360: GO 16405
16362: POP
// begin Say ( JMM , D15c-JMM-1 ) ;
16363: LD_EXP 1
16367: PPUSH
16368: LD_STRING D15c-JMM-1
16370: PPUSH
16371: CALL_OW 88
// Say ( Platonov , D15c-Pla-1 ) ;
16375: LD_EXP 26
16379: PPUSH
16380: LD_STRING D15c-Pla-1
16382: PPUSH
16383: CALL_OW 88
// Russian_Siberite_Attack = true ;
16387: LD_ADDR_EXP 215
16391: PUSH
16392: LD_INT 1
16394: ST_TO_ADDR
// Friend_has_to_escape = true ;
16395: LD_ADDR_EXP 228
16399: PUSH
16400: LD_INT 1
16402: ST_TO_ADDR
// end ; 4 :
16403: GO 16528
16405: LD_INT 4
16407: DOUBLE
16408: EQUAL
16409: IFTRUE 16413
16411: GO 16527
16413: POP
// begin Say ( JMM , D15d-JMM-1 ) ;
16414: LD_EXP 1
16418: PPUSH
16419: LD_STRING D15d-JMM-1
16421: PPUSH
16422: CALL_OW 88
// Say ( Platonov , D15d-Pla-1 ) ;
16426: LD_EXP 26
16430: PPUSH
16431: LD_STRING D15d-Pla-1
16433: PPUSH
16434: CALL_OW 88
// if Friend_Accepted then
16438: LD_EXP 219
16442: IFFALSE 16460
// The_Last_Time = tick + 1 1$0 else
16444: LD_ADDR_EXP 218
16448: PUSH
16449: LD_OWVAR 1
16453: PUSH
16454: LD_INT 2100
16456: PLUS
16457: ST_TO_ADDR
16458: GO 16474
// The_Last_Time = tick + 5 5$0 ;
16460: LD_ADDR_EXP 218
16464: PUSH
16465: LD_OWVAR 1
16469: PUSH
16470: LD_INT 10500
16472: PLUS
16473: ST_TO_ADDR
// Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
16474: LD_ADDR_VAR 0 3
16478: PUSH
16479: LD_INT 22
16481: PUSH
16482: LD_EXP 176
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 34
16493: PUSH
16494: LD_INT 8
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 69
16509: ST_TO_ADDR
// if not ( Americans_has_sib_rocket ) then
16510: LD_VAR 0 3
16514: NOT
16515: IFFALSE 16525
// Friend_has_to_escape = true ;
16517: LD_ADDR_EXP 228
16521: PUSH
16522: LD_INT 1
16524: ST_TO_ADDR
// end ; end ;
16525: GO 16528
16527: POP
// DialogueOFF ;
16528: CALL_OW 7
// end ;
16532: PPOPN 3
16534: END
// every 0 0$1 trigger ( Time_to_Think_Over <> 0 ) and ( Time_to_Think_Over < tick ) marked 10 do var selection , list_of_q , Americans_has_sib_rocket ;
16535: LD_EXP 217
16539: PUSH
16540: LD_INT 0
16542: NONEQUAL
16543: PUSH
16544: LD_EXP 217
16548: PUSH
16549: LD_OWVAR 1
16553: LESS
16554: AND
16555: IFFALSE 16825
16557: GO 16559
16559: DISABLE
16560: LD_INT 0
16562: PPUSH
16563: PPUSH
16564: PPUSH
// begin DialogueON ;
16565: CALL_OW 6
// list_of_q = [ 1 , 3 , 4 ] ;
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: LD_INT 4
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: ST_TO_ADDR
// selection = SelectiveQuery ( Q15a , list_of_q ) ;
16588: LD_ADDR_VAR 0 1
16592: PUSH
16593: LD_STRING Q15a
16595: PPUSH
16596: LD_VAR 0 2
16600: PPUSH
16601: CALL_OW 98
16605: ST_TO_ADDR
// case selection of 1 :
16606: LD_VAR 0 1
16610: PUSH
16611: LD_INT 1
16613: DOUBLE
16614: EQUAL
16615: IFTRUE 16619
16617: GO 16647
16619: POP
// begin Say ( JMM , D15a-JMM-1 ) ;
16620: LD_EXP 1
16624: PPUSH
16625: LD_STRING D15a-JMM-1
16627: PPUSH
16628: CALL_OW 88
// enable ( JMM_has_surrounded ) ;
16632: LD_EXP 155
16636: ENABLE_MARKED
// Friend_has_to_escape = true ;
16637: LD_ADDR_EXP 228
16641: PUSH
16642: LD_INT 1
16644: ST_TO_ADDR
// end ; 3 :
16645: GO 16821
16647: LD_INT 3
16649: DOUBLE
16650: EQUAL
16651: IFTRUE 16655
16653: GO 16698
16655: POP
// begin Say ( JMM , D15c-JMM-1 ) ;
16656: LD_EXP 1
16660: PPUSH
16661: LD_STRING D15c-JMM-1
16663: PPUSH
16664: CALL_OW 88
// Say ( Platonov , D15c-Pla-1 ) ;
16668: LD_EXP 26
16672: PPUSH
16673: LD_STRING D15c-Pla-1
16675: PPUSH
16676: CALL_OW 88
// Russian_Siberite_Attack = true ;
16680: LD_ADDR_EXP 215
16684: PUSH
16685: LD_INT 1
16687: ST_TO_ADDR
// Friend_has_to_escape = true ;
16688: LD_ADDR_EXP 228
16692: PUSH
16693: LD_INT 1
16695: ST_TO_ADDR
// end ; 4 :
16696: GO 16821
16698: LD_INT 4
16700: DOUBLE
16701: EQUAL
16702: IFTRUE 16706
16704: GO 16820
16706: POP
// begin Say ( JMM , D15d-JMM-1a ) ;
16707: LD_EXP 1
16711: PPUSH
16712: LD_STRING D15d-JMM-1a
16714: PPUSH
16715: CALL_OW 88
// Say ( Platonov , D15d-Pla-1 ) ;
16719: LD_EXP 26
16723: PPUSH
16724: LD_STRING D15d-Pla-1
16726: PPUSH
16727: CALL_OW 88
// if Friend_Accepted then
16731: LD_EXP 219
16735: IFFALSE 16753
// The_Last_Time = tick + 1 1$0 else
16737: LD_ADDR_EXP 218
16741: PUSH
16742: LD_OWVAR 1
16746: PUSH
16747: LD_INT 2100
16749: PLUS
16750: ST_TO_ADDR
16751: GO 16767
// The_Last_Time = tick + 5 5$0 ;
16753: LD_ADDR_EXP 218
16757: PUSH
16758: LD_OWVAR 1
16762: PUSH
16763: LD_INT 10500
16765: PLUS
16766: ST_TO_ADDR
// Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
16767: LD_ADDR_VAR 0 3
16771: PUSH
16772: LD_INT 22
16774: PUSH
16775: LD_EXP 176
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 34
16786: PUSH
16787: LD_INT 8
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PPUSH
16798: CALL_OW 69
16802: ST_TO_ADDR
// if not ( Americans_has_sib_rocket ) then
16803: LD_VAR 0 3
16807: NOT
16808: IFFALSE 16818
// Friend_has_to_escape = true ;
16810: LD_ADDR_EXP 228
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// end ; end ;
16818: GO 16821
16820: POP
// DialogueOFF ;
16821: CALL_OW 7
// end ;
16825: PPOPN 3
16827: END
// function FriendSelectedDialogue ; begin
16828: LD_INT 0
16830: PPUSH
// ComStop ( Friend ) ;
16831: LD_EXP 21
16835: PPUSH
16836: CALL_OW 141
// CenterNowOnUnits ( Friend ) ;
16840: LD_EXP 21
16844: PPUSH
16845: CALL_OW 87
// DialogueON ;
16849: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
16853: LD_EXP 1
16857: PPUSH
16858: LD_STRING D16-JMM-1
16860: PPUSH
16861: CALL_OW 88
// Say ( Friend , D16-Friend-1 ) ;
16865: LD_EXP 21
16869: PPUSH
16870: LD_STRING D16-Friend-1
16872: PPUSH
16873: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
16877: LD_EXP 1
16881: PPUSH
16882: LD_STRING D16-JMM-2
16884: PPUSH
16885: CALL_OW 88
// DialogueOFF ;
16889: CALL_OW 7
// end ;
16893: LD_VAR 0 1
16897: RET
// every 0 0$1 trigger ( Friend_has_to_escape ) and IsOk ( Friend ) do
16898: LD_EXP 228
16902: PUSH
16903: LD_EXP 21
16907: PPUSH
16908: CALL_OW 302
16912: AND
16913: IFFALSE 17060
16915: GO 16917
16917: DISABLE
// begin disable ;
16918: DISABLE
// if ( Alaskite_Bomb_Time + 0 0$15 < tick ) then
16919: LD_EXP 212
16923: PUSH
16924: LD_INT 525
16926: PLUS
16927: PUSH
16928: LD_OWVAR 1
16932: LESS
16933: IFFALSE 17059
// begin if IsSelected ( Friend ) then
16935: LD_EXP 21
16939: PPUSH
16940: CALL_OW 306
16944: IFFALSE 16955
// DeselectUnits ( Friend ) ;
16946: LD_EXP 21
16950: PPUSH
16951: CALL_OW 491
// enable ( Friend_Escapes ) ;
16955: LD_EXP 156
16959: ENABLE_MARKED
// ComMoveXY ( Friend , 20 , 2 ) ;
16960: LD_EXP 21
16964: PPUSH
16965: LD_INT 20
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: CALL_OW 111
// AddComHold ( Friend ) ;
16975: LD_EXP 21
16979: PPUSH
16980: CALL_OW 200
// Wait ( 0 0$0.5 ) ;
16984: LD_INT 18
16986: PPUSH
16987: CALL_OW 67
// while ( HasTask ( Friend ) and not ( IsSelected ( Friend ) ) ) do
16991: LD_EXP 21
16995: PPUSH
16996: CALL_OW 314
17000: PUSH
17001: LD_EXP 21
17005: PPUSH
17006: CALL_OW 306
17010: NOT
17011: AND
17012: IFFALSE 17023
// Wait ( 0 0$1 ) ;
17014: LD_INT 35
17016: PPUSH
17017: CALL_OW 67
17021: GO 16991
// if IsSelected ( Friend ) then
17023: LD_EXP 21
17027: PPUSH
17028: CALL_OW 306
17032: IFFALSE 17040
// FriendSelectedDialogue else
17034: CALL 16828 0 0
17038: GO 17057
// begin DestroyUnit ( Friend ) ;
17040: LD_EXP 21
17044: PPUSH
17045: CALL_OW 65
// Friend_escaped = true ;
17049: LD_ADDR_EXP 220
17053: PUSH
17054: LD_INT 1
17056: ST_TO_ADDR
// end ; end else
17057: GO 17060
// enable ;
17059: ENABLE
// end ;
17060: END
// every 0 0$1 trigger ( The_Last_Time <> 0 ) and ( The_Last_Time < tick ) marked 10 do var Americans_has_sib_rocket , Sold1 , list_of_all_males , UnNamed_males , Named_males ;
17061: LD_EXP 218
17065: PUSH
17066: LD_INT 0
17068: NONEQUAL
17069: PUSH
17070: LD_EXP 218
17074: PUSH
17075: LD_OWVAR 1
17079: LESS
17080: AND
17081: IFFALSE 17639
17083: GO 17085
17085: DISABLE
17086: LD_INT 0
17088: PPUSH
17089: PPUSH
17090: PPUSH
17091: PPUSH
17092: PPUSH
// begin Named_males = [ Bobby , Cyrus , Frank , Brown , Gladstone , Cornell , Denis , Gary , Stevens ] ;
17093: LD_ADDR_VAR 0 5
17097: PUSH
17098: LD_EXP 3
17102: PUSH
17103: LD_EXP 4
17107: PUSH
17108: LD_EXP 6
17112: PUSH
17113: LD_EXP 7
17117: PUSH
17118: LD_EXP 9
17122: PUSH
17123: LD_EXP 10
17127: PUSH
17128: LD_EXP 11
17132: PUSH
17133: LD_EXP 15
17137: PUSH
17138: LD_EXP 17
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: ST_TO_ADDR
// list_of_all_males = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) ;
17154: LD_ADDR_VAR 0 3
17158: PUSH
17159: LD_INT 22
17161: PUSH
17162: LD_EXP 176
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 21
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 26
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 50
17193: PUSH
17194: EMPTY
17195: LIST
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 25
17205: PUSH
17206: LD_INT 12
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 25
17215: PUSH
17216: LD_INT 16
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 25
17225: PUSH
17226: LD_INT 17
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 25
17235: PUSH
17236: LD_INT 15
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 25
17245: PUSH
17246: LD_INT 17
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: ST_TO_ADDR
// UnNamed_males = list_of_all_males diff ( [ JMM , Powell ] ^ Named_males ) ;
17277: LD_ADDR_VAR 0 4
17281: PUSH
17282: LD_VAR 0 3
17286: PUSH
17287: LD_EXP 1
17291: PUSH
17292: LD_EXP 2
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_VAR 0 5
17305: ADD
17306: DIFF
17307: ST_TO_ADDR
// if UnNamed_males <> 0 then
17308: LD_VAR 0 4
17312: PUSH
17313: LD_INT 0
17315: NONEQUAL
17316: IFFALSE 17344
// begin Sold1 = list_of_all_males [ Rand ( 1 , list_of_all_males ) ] ;
17318: LD_ADDR_VAR 0 2
17322: PUSH
17323: LD_VAR 0 3
17327: PUSH
17328: LD_INT 1
17330: PPUSH
17331: LD_VAR 0 3
17335: PPUSH
17336: CALL_OW 12
17340: ARRAY
17341: ST_TO_ADDR
// end else
17342: GO 17413
// begin Named_males = UnitFilter ( Named_males , [ [ f_ok ] , [ f_sex , sex_male ] ] ) ;
17344: LD_ADDR_VAR 0 5
17348: PUSH
17349: LD_VAR 0 5
17353: PPUSH
17354: LD_INT 50
17356: PUSH
17357: EMPTY
17358: LIST
17359: PUSH
17360: LD_INT 26
17362: PUSH
17363: LD_INT 1
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PPUSH
17374: CALL_OW 72
17378: ST_TO_ADDR
// if named_males <> 0 then
17379: LD_VAR 0 5
17383: PUSH
17384: LD_INT 0
17386: NONEQUAL
17387: IFFALSE 17413
// Sold1 = Named_males [ Rand ( 1 , Named_males ) ] ;
17389: LD_ADDR_VAR 0 2
17393: PUSH
17394: LD_VAR 0 5
17398: PUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_VAR 0 5
17406: PPUSH
17407: CALL_OW 12
17411: ARRAY
17412: ST_TO_ADDR
// end ; Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
17413: LD_ADDR_VAR 0 1
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_EXP 176
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 34
17432: PUSH
17433: LD_INT 8
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PPUSH
17444: CALL_OW 69
17448: ST_TO_ADDR
// DialogueON ;
17449: CALL_OW 6
// if ( Americans_has_sib_rocket = 0 ) and Friend_Accepted then
17453: LD_VAR 0 1
17457: PUSH
17458: LD_INT 0
17460: EQUAL
17461: PUSH
17462: LD_EXP 219
17466: AND
17467: IFFALSE 17572
// begin Say ( Platonov , D16a-Pla-1 ) ;
17469: LD_EXP 26
17473: PPUSH
17474: LD_STRING D16a-Pla-1
17476: PPUSH
17477: CALL_OW 88
// if IsOk ( Stevens ) then
17481: LD_EXP 17
17485: PPUSH
17486: CALL_OW 302
17490: IFFALSE 17506
// Say ( Stevens , D16a-Huck-1 ) else
17492: LD_EXP 17
17496: PPUSH
17497: LD_STRING D16a-Huck-1
17499: PPUSH
17500: CALL_OW 88
17504: GO 17518
// Say ( Sold1 , D16a-Sol1-1 ) ;
17506: LD_VAR 0 2
17510: PPUSH
17511: LD_STRING D16a-Sol1-1
17513: PPUSH
17514: CALL_OW 88
// if Friend_Escaped then
17518: LD_EXP 220
17522: IFFALSE 17538
// Say ( JMM , D16a-JMM-1 ) else
17524: LD_EXP 1
17528: PPUSH
17529: LD_STRING D16a-JMM-1
17531: PPUSH
17532: CALL_OW 88
17536: GO 17562
// begin Say ( JMM , D16a-JMM-1a ) ;
17538: LD_EXP 1
17542: PPUSH
17543: LD_STRING D16a-JMM-1a
17545: PPUSH
17546: CALL_OW 88
// Say ( Friend , D16a-Friend-1 ) ;
17550: LD_EXP 21
17554: PPUSH
17555: LD_STRING D16a-Friend-1
17557: PPUSH
17558: CALL_OW 88
// end ; Russian_Siberite_Attack = true ;
17562: LD_ADDR_EXP 215
17566: PUSH
17567: LD_INT 1
17569: ST_TO_ADDR
// end else
17570: GO 17635
// if ( Americans_has_sib_rocket = 0 ) and not ( Friend_Accepted ) then
17572: LD_VAR 0 1
17576: PUSH
17577: LD_INT 0
17579: EQUAL
17580: PUSH
17581: LD_EXP 219
17585: NOT
17586: AND
17587: IFFALSE 17623
// begin Say ( Platonov , D16b-Pla-1 ) ;
17589: LD_EXP 26
17593: PPUSH
17594: LD_STRING D16b-Pla-1
17596: PPUSH
17597: CALL_OW 88
// Say ( JMM , D16b-JMM-1 ) ;
17601: LD_EXP 1
17605: PPUSH
17606: LD_STRING D16b-JMM-1
17608: PPUSH
17609: CALL_OW 88
// Russian_Siberite_Attack = true ;
17613: LD_ADDR_EXP 215
17617: PUSH
17618: LD_INT 1
17620: ST_TO_ADDR
// end else
17621: GO 17635
// begin Say ( Platonov , D16c-Pla-1 ) ;
17623: LD_EXP 26
17627: PPUSH
17628: LD_STRING D16c-Pla-1
17630: PPUSH
17631: CALL_OW 88
// end ; DialogueOFF ;
17635: CALL_OW 7
// end ;
17639: PPOPN 5
17641: END
// every 0 0$2 trigger CenterJMM do var X , Y , NewX , NewY ;
17642: LD_EXP 68
17646: IFFALSE 17807
17648: GO 17650
17650: DISABLE
17651: LD_INT 0
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
// begin if IsInUnit ( JMM ) = JMM_veh then
17657: LD_EXP 1
17661: PPUSH
17662: CALL_OW 310
17666: PUSH
17667: LD_EXP 57
17671: EQUAL
17672: IFFALSE 17762
// begin X = GetX ( JMM_veh ) ;
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: LD_EXP 57
17683: PPUSH
17684: CALL_OW 250
17688: ST_TO_ADDR
// Y = GetY ( Jmm_veh ) ;
17689: LD_ADDR_VAR 0 2
17693: PUSH
17694: LD_EXP 57
17698: PPUSH
17699: CALL_OW 251
17703: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( JMM_veh ) , 5 ) ;
17704: LD_ADDR_VAR 0 3
17708: PUSH
17709: LD_VAR 0 1
17713: PPUSH
17714: LD_EXP 57
17718: PPUSH
17719: CALL_OW 254
17723: PPUSH
17724: LD_INT 5
17726: PPUSH
17727: CALL_OW 272
17731: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( JMM_veh ) , 5 ) ;
17732: LD_ADDR_VAR 0 4
17736: PUSH
17737: LD_VAR 0 2
17741: PPUSH
17742: LD_EXP 57
17746: PPUSH
17747: CALL_OW 254
17751: PPUSH
17752: LD_INT 5
17754: PPUSH
17755: CALL_OW 273
17759: ST_TO_ADDR
// end else
17760: GO 17792
// begin NewX = GetX ( JMM ) ;
17762: LD_ADDR_VAR 0 3
17766: PUSH
17767: LD_EXP 1
17771: PPUSH
17772: CALL_OW 250
17776: ST_TO_ADDR
// NewY = GetY ( JMM ) ;
17777: LD_ADDR_VAR 0 4
17781: PUSH
17782: LD_EXP 1
17786: PPUSH
17787: CALL_OW 251
17791: ST_TO_ADDR
// end ; CenterOnXY ( NewX , NewY ) ;
17792: LD_VAR 0 3
17796: PPUSH
17797: LD_VAR 0 4
17801: PPUSH
17802: CALL_OW 84
// enable ;
17806: ENABLE
// end ; end_of_file
17807: PPOPN 4
17809: END
// var taken ; export function ComMoveXYR ( Un , x , y , r , b ) ; var Hex ; begin
17810: LD_INT 0
17812: PPUSH
17813: PPUSH
// Hex = RandHexXYR ( x , y , r , b ) ;
17814: LD_ADDR_VAR 0 7
17818: PUSH
17819: LD_VAR 0 2
17823: PPUSH
17824: LD_VAR 0 3
17828: PPUSH
17829: LD_VAR 0 4
17833: PPUSH
17834: LD_VAR 0 5
17838: PPUSH
17839: CALL_OW 17
17843: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) end ;
17844: LD_VAR 0 1
17848: PPUSH
17849: LD_VAR 0 7
17853: PUSH
17854: LD_INT 1
17856: ARRAY
17857: PPUSH
17858: LD_VAR 0 7
17862: PUSH
17863: LD_INT 2
17865: ARRAY
17866: PPUSH
17867: CALL_OW 111
17871: LD_VAR 0 6
17875: RET
// export function WaitTask ( list_of_units , reaction ) ; var i , busy ; begin
17876: LD_INT 0
17878: PPUSH
17879: PPUSH
17880: PPUSH
// wait ( 2 ) ;
17881: LD_INT 2
17883: PPUSH
17884: CALL_OW 67
// repeat busy = false ;
17888: LD_ADDR_VAR 0 5
17892: PUSH
17893: LD_INT 0
17895: ST_TO_ADDR
// for i in list_of_units do
17896: LD_ADDR_VAR 0 4
17900: PUSH
17901: LD_VAR 0 1
17905: PUSH
17906: FOR_IN
17907: IFFALSE 17941
// if IsOk ( i ) then
17909: LD_VAR 0 4
17913: PPUSH
17914: CALL_OW 302
17918: IFFALSE 17939
// if HasTask ( i ) then
17920: LD_VAR 0 4
17924: PPUSH
17925: CALL_OW 314
17929: IFFALSE 17939
// begin busy = true ;
17931: LD_ADDR_VAR 0 5
17935: PUSH
17936: LD_INT 1
17938: ST_TO_ADDR
// end ;
17939: GO 17906
17941: POP
17942: POP
// if busy then
17943: LD_VAR 0 5
17947: IFFALSE 17962
// wait ( 0 0$1 * reaction ) ;
17949: LD_INT 35
17951: PUSH
17952: LD_VAR 0 2
17956: MUL
17957: PPUSH
17958: CALL_OW 67
// until not ( busy ) ;
17962: LD_VAR 0 5
17966: NOT
17967: IFFALSE 17888
// end ;
17969: LD_VAR 0 3
17973: RET
// export function WaitPos ( x_pos , y_pos , dist , list_of_units , reaction ) ; var i , are_at_position ; begin
17974: LD_INT 0
17976: PPUSH
17977: PPUSH
17978: PPUSH
// wait ( 2 ) ;
17979: LD_INT 2
17981: PPUSH
17982: CALL_OW 67
// repeat are_at_position = true ;
17986: LD_ADDR_VAR 0 8
17990: PUSH
17991: LD_INT 1
17993: ST_TO_ADDR
// for i in list_of_units do
17994: LD_ADDR_VAR 0 7
17998: PUSH
17999: LD_VAR 0 4
18003: PUSH
18004: FOR_IN
18005: IFFALSE 18055
// if IsOk ( i ) then
18007: LD_VAR 0 7
18011: PPUSH
18012: CALL_OW 302
18016: IFFALSE 18053
// if GetDistUnitXY ( i , x_pos , y_pos ) > dist then
18018: LD_VAR 0 7
18022: PPUSH
18023: LD_VAR 0 1
18027: PPUSH
18028: LD_VAR 0 2
18032: PPUSH
18033: CALL_OW 297
18037: PUSH
18038: LD_VAR 0 3
18042: GREATER
18043: IFFALSE 18053
// are_at_position = false ;
18045: LD_ADDR_VAR 0 8
18049: PUSH
18050: LD_INT 0
18052: ST_TO_ADDR
18053: GO 18004
18055: POP
18056: POP
// if not ( are_at_position ) then
18057: LD_VAR 0 8
18061: NOT
18062: IFFALSE 18077
// wait ( 0 0$1 * reaction ) ;
18064: LD_INT 35
18066: PUSH
18067: LD_VAR 0 5
18071: MUL
18072: PPUSH
18073: CALL_OW 67
// until are_at_position ;
18077: LD_VAR 0 8
18081: IFFALSE 17986
// end ;
18083: LD_VAR 0 6
18087: RET
// export function FindMaxSumSkill ( Uns , sex ) ; var Skill_Sum , Selected_unit , New_Skill_Sum , i ; begin
18088: LD_INT 0
18090: PPUSH
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
// Skill_Sum = - 1 ;
18095: LD_ADDR_VAR 0 4
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: ST_TO_ADDR
// Selected_unit = 0 ;
18104: LD_ADDR_VAR 0 5
18108: PUSH
18109: LD_INT 0
18111: ST_TO_ADDR
// for i = 1 to Uns do
18112: LD_ADDR_VAR 0 7
18116: PUSH
18117: DOUBLE
18118: LD_INT 1
18120: DEC
18121: ST_TO_ADDR
18122: LD_VAR 0 1
18126: PUSH
18127: FOR_TO
18128: IFFALSE 18287
// begin New_Skill_Sum = GetSkill ( Uns [ i ] , skill_combat ) + GetSkill ( Uns [ i ] , skill_engineering ) + GetSkill ( Uns [ i ] , skill_mechanical ) + GetSkill ( Uns [ i ] , skill_scientistic ) ;
18130: LD_ADDR_VAR 0 6
18134: PUSH
18135: LD_VAR 0 1
18139: PUSH
18140: LD_VAR 0 7
18144: ARRAY
18145: PPUSH
18146: LD_INT 1
18148: PPUSH
18149: CALL_OW 259
18153: PUSH
18154: LD_VAR 0 1
18158: PUSH
18159: LD_VAR 0 7
18163: ARRAY
18164: PPUSH
18165: LD_INT 2
18167: PPUSH
18168: CALL_OW 259
18172: PLUS
18173: PUSH
18174: LD_VAR 0 1
18178: PUSH
18179: LD_VAR 0 7
18183: ARRAY
18184: PPUSH
18185: LD_INT 3
18187: PPUSH
18188: CALL_OW 259
18192: PLUS
18193: PUSH
18194: LD_VAR 0 1
18198: PUSH
18199: LD_VAR 0 7
18203: ARRAY
18204: PPUSH
18205: LD_INT 4
18207: PPUSH
18208: CALL_OW 259
18212: PLUS
18213: ST_TO_ADDR
// if New_Skill_Sum > Skill_Sum and ( ( sex = 0 ) or ( sex = GetSex ( Uns [ i ] ) ) ) then
18214: LD_VAR 0 6
18218: PUSH
18219: LD_VAR 0 4
18223: GREATER
18224: PUSH
18225: LD_VAR 0 2
18229: PUSH
18230: LD_INT 0
18232: EQUAL
18233: PUSH
18234: LD_VAR 0 2
18238: PUSH
18239: LD_VAR 0 1
18243: PUSH
18244: LD_VAR 0 7
18248: ARRAY
18249: PPUSH
18250: CALL_OW 258
18254: EQUAL
18255: OR
18256: AND
18257: IFFALSE 18285
// begin Skill_Sum = New_Skill_Sum ;
18259: LD_ADDR_VAR 0 4
18263: PUSH
18264: LD_VAR 0 6
18268: ST_TO_ADDR
// Selected_unit = Uns [ i ] ;
18269: LD_ADDR_VAR 0 5
18273: PUSH
18274: LD_VAR 0 1
18278: PUSH
18279: LD_VAR 0 7
18283: ARRAY
18284: ST_TO_ADDR
// end ; end ;
18285: GO 18127
18287: POP
18288: POP
// result = Selected_unit ;
18289: LD_ADDR_VAR 0 3
18293: PUSH
18294: LD_VAR 0 5
18298: ST_TO_ADDR
// end ;
18299: LD_VAR 0 3
18303: RET
// export function FindMinSumSkill ( Uns , sex ) ; var Skill_Sum , Selected_unit , New_Skill_Sum , i ; begin
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
18308: PPUSH
18309: PPUSH
18310: PPUSH
// Skill_Sum = 100 ;
18311: LD_ADDR_VAR 0 4
18315: PUSH
18316: LD_INT 100
18318: ST_TO_ADDR
// Selected_unit = 0 ;
18319: LD_ADDR_VAR 0 5
18323: PUSH
18324: LD_INT 0
18326: ST_TO_ADDR
// for i = 1 to Uns do
18327: LD_ADDR_VAR 0 7
18331: PUSH
18332: DOUBLE
18333: LD_INT 1
18335: DEC
18336: ST_TO_ADDR
18337: LD_VAR 0 1
18341: PUSH
18342: FOR_TO
18343: IFFALSE 18502
// begin New_Skill_Sum = GetSkill ( Uns [ i ] , skill_combat ) + GetSkill ( Uns [ i ] , skill_engineering ) + GetSkill ( Uns [ i ] , skill_mechanical ) + GetSkill ( Uns [ i ] , skill_scientistic ) ;
18345: LD_ADDR_VAR 0 6
18349: PUSH
18350: LD_VAR 0 1
18354: PUSH
18355: LD_VAR 0 7
18359: ARRAY
18360: PPUSH
18361: LD_INT 1
18363: PPUSH
18364: CALL_OW 259
18368: PUSH
18369: LD_VAR 0 1
18373: PUSH
18374: LD_VAR 0 7
18378: ARRAY
18379: PPUSH
18380: LD_INT 2
18382: PPUSH
18383: CALL_OW 259
18387: PLUS
18388: PUSH
18389: LD_VAR 0 1
18393: PUSH
18394: LD_VAR 0 7
18398: ARRAY
18399: PPUSH
18400: LD_INT 3
18402: PPUSH
18403: CALL_OW 259
18407: PLUS
18408: PUSH
18409: LD_VAR 0 1
18413: PUSH
18414: LD_VAR 0 7
18418: ARRAY
18419: PPUSH
18420: LD_INT 4
18422: PPUSH
18423: CALL_OW 259
18427: PLUS
18428: ST_TO_ADDR
// if New_Skill_Sum < Skill_Sum and ( ( sex = 0 ) or ( sex = GetSex ( Uns [ i ] ) ) ) then
18429: LD_VAR 0 6
18433: PUSH
18434: LD_VAR 0 4
18438: LESS
18439: PUSH
18440: LD_VAR 0 2
18444: PUSH
18445: LD_INT 0
18447: EQUAL
18448: PUSH
18449: LD_VAR 0 2
18453: PUSH
18454: LD_VAR 0 1
18458: PUSH
18459: LD_VAR 0 7
18463: ARRAY
18464: PPUSH
18465: CALL_OW 258
18469: EQUAL
18470: OR
18471: AND
18472: IFFALSE 18500
// begin Skill_Sum = New_Skill_Sum ;
18474: LD_ADDR_VAR 0 4
18478: PUSH
18479: LD_VAR 0 6
18483: ST_TO_ADDR
// Selected_unit = Uns [ i ] ;
18484: LD_ADDR_VAR 0 5
18488: PUSH
18489: LD_VAR 0 1
18493: PUSH
18494: LD_VAR 0 7
18498: ARRAY
18499: ST_TO_ADDR
// end ; end ;
18500: GO 18342
18502: POP
18503: POP
// result = Selected_unit ;
18504: LD_ADDR_VAR 0 3
18508: PUSH
18509: LD_VAR 0 5
18513: ST_TO_ADDR
// end ;
18514: LD_VAR 0 3
18518: RET
// export function RSiberiteAttack ( Rocket ) ; var American_units , Selected_unit , Factories , Teleport1 , Teleport2 , Un ; begin
18519: LD_INT 0
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
// Selected_unit = 0 ;
18528: LD_ADDR_VAR 0 4
18532: PUSH
18533: LD_INT 0
18535: ST_TO_ADDR
// American_units = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) ;
18536: LD_ADDR_VAR 0 3
18540: PUSH
18541: LD_INT 22
18543: PUSH
18544: LD_EXP 176
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 21
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 69
18571: ST_TO_ADDR
// Factories = UnitFilter ( American_units , [ f_btype , b_factory ] ) ;
18572: LD_ADDR_VAR 0 5
18576: PUSH
18577: LD_VAR 0 3
18581: PPUSH
18582: LD_INT 30
18584: PUSH
18585: LD_INT 3
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 72
18596: ST_TO_ADDR
// if Factories then
18597: LD_VAR 0 5
18601: IFFALSE 18668
// begin Selected_unit = Factories [ 1 ] ;
18603: LD_ADDR_VAR 0 4
18607: PUSH
18608: LD_VAR 0 5
18612: PUSH
18613: LD_INT 1
18615: ARRAY
18616: ST_TO_ADDR
// for Un in Factories do
18617: LD_ADDR_VAR 0 8
18621: PUSH
18622: LD_VAR 0 5
18626: PUSH
18627: FOR_IN
18628: IFFALSE 18664
// if UnitsInside ( Un ) > UnitsInside ( Selected_unit ) then
18630: LD_VAR 0 8
18634: PPUSH
18635: CALL_OW 313
18639: PUSH
18640: LD_VAR 0 4
18644: PPUSH
18645: CALL_OW 313
18649: GREATER
18650: IFFALSE 18662
// Selected_unit = Un ;
18652: LD_ADDR_VAR 0 4
18656: PUSH
18657: LD_VAR 0 8
18661: ST_TO_ADDR
18662: GO 18627
18664: POP
18665: POP
// end else
18666: GO 18698
// if American_units then
18668: LD_VAR 0 3
18672: IFFALSE 18698
// begin Selected_unit = American_units [ Rand ( 1 , American_units ) ] ;
18674: LD_ADDR_VAR 0 4
18678: PUSH
18679: LD_VAR 0 3
18683: PUSH
18684: LD_INT 1
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: CALL_OW 12
18696: ARRAY
18697: ST_TO_ADDR
// end ; if Rand ( 1 , 2 ) = 1 then
18698: LD_INT 1
18700: PPUSH
18701: LD_INT 2
18703: PPUSH
18704: CALL_OW 12
18708: PUSH
18709: LD_INT 1
18711: EQUAL
18712: IFFALSE 18868
// begin Teleport1 = GetUnitNumber ( 165 , 60 ) ;
18714: LD_ADDR_VAR 0 6
18718: PUSH
18719: LD_INT 165
18721: PPUSH
18722: LD_INT 60
18724: PPUSH
18725: CALL_OW 438
18729: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
18730: LD_ADDR_VAR 0 7
18734: PUSH
18735: LD_INT 182
18737: PPUSH
18738: LD_INT 87
18740: PPUSH
18741: CALL_OW 438
18745: ST_TO_ADDR
// if Rand ( 1 , 2 ) = 1 then
18746: LD_INT 1
18748: PPUSH
18749: LD_INT 2
18751: PPUSH
18752: CALL_OW 12
18756: PUSH
18757: LD_INT 1
18759: EQUAL
18760: IFFALSE 18816
// begin if IsOk ( Teleport1 ) then
18762: LD_VAR 0 6
18766: PPUSH
18767: CALL_OW 302
18771: IFFALSE 18789
// ComEnterUnit ( Rocket , Teleport1 ) else
18773: LD_VAR 0 1
18777: PPUSH
18778: LD_VAR 0 6
18782: PPUSH
18783: CALL_OW 120
18787: GO 18814
// if IsOk ( Teleport2 ) then
18789: LD_VAR 0 7
18793: PPUSH
18794: CALL_OW 302
18798: IFFALSE 18814
// ComEnterUnit ( Rocket , Teleport2 ) end else
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_VAR 0 7
18809: PPUSH
18810: CALL_OW 120
18814: GO 18868
// begin if IsOk ( Teleport2 ) then
18816: LD_VAR 0 7
18820: PPUSH
18821: CALL_OW 302
18825: IFFALSE 18843
// ComEnterUnit ( Rocket , Teleport2 ) else
18827: LD_VAR 0 1
18831: PPUSH
18832: LD_VAR 0 7
18836: PPUSH
18837: CALL_OW 120
18841: GO 18868
// if IsOk ( Teleport1 ) then
18843: LD_VAR 0 6
18847: PPUSH
18848: CALL_OW 302
18852: IFFALSE 18868
// ComEnterUnit ( Rocket , Teleport1 ) end ;
18854: LD_VAR 0 1
18858: PPUSH
18859: LD_VAR 0 6
18863: PPUSH
18864: CALL_OW 120
// end ; AddComAttackPlace ( Rocket , GetX ( Selected_unit ) , GetY ( Selected_unit ) ) ;
18868: LD_VAR 0 1
18872: PPUSH
18873: LD_VAR 0 4
18877: PPUSH
18878: CALL_OW 250
18882: PPUSH
18883: LD_VAR 0 4
18887: PPUSH
18888: CALL_OW 251
18892: PPUSH
18893: CALL_OW 176
// end ;
18897: LD_VAR 0 2
18901: RET
// on SailEvent ( Event ) do begin case Event of Map_am_base :
18902: LD_VAR 0 1
18906: PUSH
18907: LD_EXP 161
18911: DOUBLE
18912: EQUAL
18913: IFTRUE 18917
18915: GO 18964
18917: POP
// begin Wait ( 0 0$1 ) ;
18918: LD_INT 35
18920: PPUSH
18921: CALL_OW 67
// RevealFogArea ( americans , Map_am ) ;
18925: LD_EXP 176
18929: PPUSH
18930: LD_INT 20
18932: PPUSH
18933: CALL_OW 332
// CenterOnXY ( 60 , 88 ) ;
18937: LD_INT 60
18939: PPUSH
18940: LD_INT 88
18942: PPUSH
18943: CALL_OW 84
// Wait ( 0 0$4 ) ;
18947: LD_INT 140
18949: PPUSH
18950: CALL_OW 67
// CenterJMM = true ;
18954: LD_ADDR_EXP 68
18958: PUSH
18959: LD_INT 1
18961: ST_TO_ADDR
// end ; Map_rus_attack :
18962: GO 19312
18964: LD_EXP 162
18968: DOUBLE
18969: EQUAL
18970: IFTRUE 18974
18972: GO 19068
18974: POP
// begin Wait ( 0 0$4 ) ;
18975: LD_INT 140
18977: PPUSH
18978: CALL_OW 67
// CenterOnXY ( 118 , 180 ) ;
18982: LD_INT 118
18984: PPUSH
18985: LD_INT 180
18987: PPUSH
18988: CALL_OW 84
// Wait ( 0 0$4 ) ;
18992: LD_INT 140
18994: PPUSH
18995: CALL_OW 67
// CenterOnXY ( 76 , 133 ) ;
18999: LD_INT 76
19001: PPUSH
19002: LD_INT 133
19004: PPUSH
19005: CALL_OW 84
// Wait ( 0 0$3 ) ;
19009: LD_INT 105
19011: PPUSH
19012: CALL_OW 67
// if IsInUnit ( JMM ) <> 0 then
19016: LD_EXP 1
19020: PPUSH
19021: CALL_OW 310
19025: PUSH
19026: LD_INT 0
19028: NONEQUAL
19029: IFFALSE 19042
// CenterOnUnits ( JMM_veh ) else
19031: LD_EXP 57
19035: PPUSH
19036: CALL_OW 85
19040: GO 19051
// CenterOnUnits ( JMM ) ;
19042: LD_EXP 1
19046: PPUSH
19047: CALL_OW 85
// if not ( End_of_journey ) then
19051: LD_EXP 66
19055: NOT
19056: IFFALSE 19066
// CenterJMM = true ;
19058: LD_ADDR_EXP 68
19062: PUSH
19063: LD_INT 1
19065: ST_TO_ADDR
// end ; Send_Helpers :
19066: GO 19312
19068: LD_EXP 163
19072: DOUBLE
19073: EQUAL
19074: IFTRUE 19078
19076: GO 19085
19078: POP
// SendHelpers ; Start_Am1_Base :
19079: CALL 21801 0 0
19083: GO 19312
19085: LD_EXP 164
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19102
19095: POP
// StartAm1Base ; Send_Material :
19096: CALL 23218 0 0
19100: GO 19312
19102: LD_EXP 165
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19119
19112: POP
// SendMaterial ; Capture_JMM_Vehicles :
19113: CALL 22764 0 0
19117: GO 19312
19119: LD_EXP 166
19123: DOUBLE
19124: EQUAL
19125: IFTRUE 19129
19127: GO 19136
19129: POP
// CaptureJMMVehicles ; First_Powells_Attack :
19130: CALL 21222 0 0
19134: GO 19312
19136: LD_EXP 167
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19153
19146: POP
// FirstPowellsAttack ; Second_Powells_Attack :
19147: CALL 24835 0 0
19151: GO 19312
19153: LD_EXP 168
19157: DOUBLE
19158: EQUAL
19159: IFTRUE 19163
19161: GO 19170
19163: POP
// SecondPowellsAttack ; Run_JMM_Vehicles :
19164: CALL 25809 0 0
19168: GO 19312
19170: LD_EXP 169
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19187
19180: POP
// RunJMMVehicles ; Rus1_Attack :
19181: CALL 20948 0 0
19185: GO 19312
19187: LD_EXP 170
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19204
19197: POP
// Rus1Attack ; Rus_Attack :
19198: CALL 38329 0 0
19202: GO 19312
19204: LD_EXP 171
19208: DOUBLE
19209: EQUAL
19210: IFTRUE 19214
19212: GO 19221
19214: POP
// RusAttack ; Retreat_Report :
19215: CALL 47333 0 0
19219: GO 19312
19221: LD_EXP 172
19225: DOUBLE
19226: EQUAL
19227: IFTRUE 19231
19229: GO 19238
19231: POP
// RetreatReport ; JMM_Talk :
19232: CALL 24765 0 0
19236: GO 19312
19238: LD_EXP 173
19242: DOUBLE
19243: EQUAL
19244: IFTRUE 19248
19246: GO 19255
19248: POP
// JMMTalk ; Send_Arabian_Back :
19249: CALL 21563 0 0
19253: GO 19312
19255: LD_EXP 174
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19277
19265: POP
// SendArabianBack ( Arabian_Outside ) ; Link_Bombs :
19266: LD_EXP 86
19270: PPUSH
19271: CALL 31450 0 1
19275: GO 19312
19277: LD_EXP 175
19281: DOUBLE
19282: EQUAL
19283: IFTRUE 19287
19285: GO 19294
19287: POP
// LinkBombs ; JMM_Is_Ready :
19288: CALL 6054 0 0
19292: GO 19312
19294: LD_EXP 144
19298: DOUBLE
19299: EQUAL
19300: IFTRUE 19304
19302: GO 19311
19304: POP
// JMMIsReady ; end ;
19305: CALL 30261 0 0
19309: GO 19312
19311: POP
// end ;
19312: PPOPN 1
19314: END
// on DialogueSkipped ( i ) do begin Skip = true ;
19315: LD_ADDR_EXP 186
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// end ;
19323: PPOPN 1
19325: END
// on VehicleConstructed ( veh , fact ) do begin case GetSide ( veh ) of americans1 :
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 255
19335: PUSH
19336: LD_EXP 177
19340: DOUBLE
19341: EQUAL
19342: IFTRUE 19346
19344: GO 19358
19346: POP
// Am1VehicleConstructed ( veh ) ; arabians :
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL 24246 0 1
19356: GO 19403
19358: LD_EXP 180
19362: DOUBLE
19363: EQUAL
19364: IFTRUE 19368
19366: GO 19380
19368: POP
// ArVehicleConstructed ( veh ) ; russians :
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL 35218 0 1
19378: GO 19403
19380: LD_EXP 178
19384: DOUBLE
19385: EQUAL
19386: IFTRUE 19390
19388: GO 19402
19390: POP
// BuildGroups ( veh ) ; end ;
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL 45139 0 1
19400: GO 19403
19402: POP
// end ;
19403: PPOPN 2
19405: END
// on VehicleCaptured ( VehNew , VehOld , OrigSide , Hum ) do begin if VehOld = JMM_veh then
19406: LD_VAR 0 2
19410: PUSH
19411: LD_EXP 57
19415: EQUAL
19416: IFFALSE 19434
// Captured_vehicles = Captured_vehicles ^ VehNew ;
19418: LD_ADDR_EXP 60
19422: PUSH
19423: LD_EXP 60
19427: PUSH
19428: LD_VAR 0 1
19432: ADD
19433: ST_TO_ADDR
// if VehOld = Woman_veh then
19434: LD_VAR 0 2
19438: PUSH
19439: LD_EXP 58
19443: EQUAL
19444: IFFALSE 19462
// Captured_vehicles = Captured_vehicles ^ VehNew ;
19446: LD_ADDR_EXP 60
19450: PUSH
19451: LD_EXP 60
19455: PUSH
19456: LD_VAR 0 1
19460: ADD
19461: ST_TO_ADDR
// end ;
19462: PPOPN 4
19464: END
// on BuildingCaptured ( build , origside , eng ) do begin case origside of americans1 :
19465: LD_VAR 0 2
19469: PUSH
19470: LD_EXP 177
19474: DOUBLE
19475: EQUAL
19476: IFTRUE 19480
19478: GO 19500
19480: POP
// begin Say ( Powell , DBack3-Pow-1 ) ;
19481: LD_EXP 2
19485: PPUSH
19486: LD_STRING DBack3-Pow-1
19488: PPUSH
19489: CALL_OW 88
// enable ( out_of_base ) ;
19493: LD_EXP 138
19497: ENABLE_MARKED
// end ; alliance :
19498: GO 19518
19500: LD_EXP 182
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19517
19510: POP
// begin AllianceBuildingInRed ;
19511: CALL 50936 0 0
// end ; end ;
19515: GO 19518
19517: POP
// end ;
19518: PPOPN 3
19520: END
// on ResearchComplete ( tech , lab ) do var Uns ;
19521: LD_INT 0
19523: PPUSH
// begin if lab in [ RusLab1 , RusLab2 ] then
19524: LD_VAR 0 2
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: IN
19539: IFFALSE 19558
// SetTech ( tech , Russians1 , state_researched ) ;
19541: LD_VAR 0 1
19545: PPUSH
19546: LD_EXP 179
19550: PPUSH
19551: LD_INT 2
19553: PPUSH
19554: CALL_OW 322
// if ( tech = tech_ST3 ) and ( lab = RusLab1 ) then
19558: LD_VAR 0 1
19562: PUSH
19563: LD_INT 65
19565: EQUAL
19566: PUSH
19567: LD_VAR 0 2
19571: PUSH
19572: LD_INT 2
19574: EQUAL
19575: AND
19576: IFFALSE 19600
// begin Uns = UnitsInside ( RusLab1 ) ;
19578: LD_ADDR_VAR 0 3
19582: PUSH
19583: LD_INT 2
19585: PPUSH
19586: CALL_OW 313
19590: ST_TO_ADDR
// ChangeScientists ( Uns ) ;
19591: LD_VAR 0 3
19595: PPUSH
19596: CALL 42737 0 1
// end ; if ( tech = tech_Sib3 ) and ( lab = RusLab2 ) then
19600: LD_VAR 0 1
19604: PUSH
19605: LD_INT 56
19607: EQUAL
19608: PUSH
19609: LD_VAR 0 2
19613: PUSH
19614: LD_INT 1
19616: EQUAL
19617: AND
19618: IFFALSE 19642
// begin Uns = UnitsInside ( RusLab2 ) ;
19620: LD_ADDR_VAR 0 3
19624: PUSH
19625: LD_INT 1
19627: PPUSH
19628: CALL_OW 313
19632: ST_TO_ADDR
// ChangeScientists ( Uns ) ;
19633: LD_VAR 0 3
19637: PPUSH
19638: CALL 42737 0 1
// end ; if ( tech = tech_ST3 ) and ( lab = AllLabR1 ) then
19642: LD_VAR 0 1
19646: PUSH
19647: LD_INT 65
19649: EQUAL
19650: PUSH
19651: LD_VAR 0 2
19655: PUSH
19656: LD_INT 39
19658: EQUAL
19659: AND
19660: IFFALSE 19677
// begin ComEnterUnit ( UnitsInside ( AllLabR1 ) , AllLabR2 ) ;
19662: LD_INT 39
19664: PPUSH
19665: CALL_OW 313
19669: PPUSH
19670: LD_INT 133
19672: PPUSH
19673: CALL_OW 120
// end ; if ( tech = tech_Weap3 ) and ( lab = AllLabR2 ) then
19677: LD_VAR 0 1
19681: PUSH
19682: LD_INT 53
19684: EQUAL
19685: PUSH
19686: LD_VAR 0 2
19690: PUSH
19691: LD_INT 133
19693: EQUAL
19694: AND
19695: IFFALSE 19697
// begin end ; if ( tech = tech_Sib3 ) and ( lab = AllLabA ) then
19697: LD_VAR 0 1
19701: PUSH
19702: LD_INT 56
19704: EQUAL
19705: PUSH
19706: LD_VAR 0 2
19710: PUSH
19711: LD_INT 46
19713: EQUAL
19714: AND
19715: IFFALSE 19717
// begin end ; end ;
19717: PPOPN 3
19719: END
// on UnitGoesToRed ( Un ) do var i ;
19720: LD_INT 0
19722: PPUSH
// begin case GetSide ( Un ) of Americans :
19723: LD_VAR 0 1
19727: PPUSH
19728: CALL_OW 255
19732: PUSH
19733: LD_EXP 176
19737: DOUBLE
19738: EQUAL
19739: IFTRUE 19743
19741: GO 19746
19743: POP
// begin end ; Americans1 :
19744: GO 20226
19746: LD_EXP 177
19750: DOUBLE
19751: EQUAL
19752: IFTRUE 19756
19754: GO 19759
19756: POP
// begin end ; Russians :
19757: GO 20226
19759: LD_EXP 178
19763: DOUBLE
19764: EQUAL
19765: IFTRUE 19769
19767: GO 19772
19769: POP
// begin end ; Russians1 :
19770: GO 20226
19772: LD_EXP 179
19776: DOUBLE
19777: EQUAL
19778: IFTRUE 19782
19780: GO 19859
19782: POP
// begin if ( GetType ( Un ) = unit_vehicle ) then
19783: LD_VAR 0 1
19787: PPUSH
19788: CALL_OW 247
19792: PUSH
19793: LD_INT 2
19795: EQUAL
19796: IFFALSE 19857
// if ( GetControl ( Un ) = control_manual ) and ( ( GetWeapon ( Un ) = ru_rocket ) or ( GetWeapon ( Un ) = ru_time_lapser ) ) then
19798: LD_VAR 0 1
19802: PPUSH
19803: CALL_OW 263
19807: PUSH
19808: LD_INT 1
19810: EQUAL
19811: PUSH
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 264
19821: PUSH
19822: LD_INT 47
19824: EQUAL
19825: PUSH
19826: LD_VAR 0 1
19830: PPUSH
19831: CALL_OW 264
19835: PUSH
19836: LD_INT 49
19838: EQUAL
19839: OR
19840: AND
19841: IFFALSE 19857
// begin PriorityAttack ( Russians1 , Un ) ;
19843: LD_EXP 179
19847: PPUSH
19848: LD_VAR 0 1
19852: PPUSH
19853: CALL_OW 470
// end ; end ; Arabians :
19857: GO 20226
19859: LD_EXP 180
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 20180
19869: POP
// begin if Un = ArDep1 then
19870: LD_VAR 0 1
19874: PUSH
19875: LD_INT 122
19877: EQUAL
19878: IFFALSE 19897
// begin SetLives ( [ ArRuFact , ArRuSibExt ] , 0 ) ;
19880: LD_INT 105
19882: PUSH
19883: LD_INT 116
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PPUSH
19890: LD_INT 0
19892: PPUSH
19893: CALL_OW 234
// end ; if GetBType ( Un ) = b_turret then
19897: LD_VAR 0 1
19901: PPUSH
19902: CALL_OW 266
19906: PUSH
19907: LD_INT 33
19909: EQUAL
19910: IFFALSE 20067
// begin i = UnitsInside ( Un ) ;
19912: LD_ADDR_VAR 0 2
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 313
19926: ST_TO_ADDR
// if ( i ^ [ ] ) = 1 then
19927: LD_VAR 0 2
19931: PUSH
19932: EMPTY
19933: ADD
19934: PUSH
19935: LD_INT 1
19937: EQUAL
19938: IFFALSE 20067
// if GetNation ( Un ) = nation_nature then
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL_OW 248
19949: PUSH
19950: LD_INT 0
19952: EQUAL
19953: IFFALSE 20067
// begin ComMoveXYR ( Un , 48 , 4 , 3 , false ) ;
19955: LD_VAR 0 1
19959: PPUSH
19960: LD_INT 48
19962: PPUSH
19963: LD_INT 4
19965: PPUSH
19966: LD_INT 3
19968: PPUSH
19969: LD_INT 0
19971: PPUSH
19972: CALL 17810 0 5
// AddComHold ( Un ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 200
// while ( R1_Attack_Continues = false ) or not ( ExistMc ( Arabian_def_id ) ) do
19985: LD_EXP 196
19989: PUSH
19990: LD_INT 0
19992: EQUAL
19993: PUSH
19994: LD_EXP 235
19998: PPUSH
19999: CALL_OW 386
20003: NOT
20004: OR
20005: IFFALSE 20016
// Wait ( 0 0$1 ) ;
20007: LD_INT 35
20009: PPUSH
20010: CALL_OW 67
20014: GO 19985
// ComMoveXYR ( Un , 63 , 16 , 3 , true ) ;
20016: LD_VAR 0 1
20020: PPUSH
20021: LD_INT 63
20023: PPUSH
20024: LD_INT 16
20026: PPUSH
20027: LD_INT 3
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL 17810 0 5
// AddMcUnits ( Arabian_def_id , Un ) ;
20037: LD_EXP 235
20041: PPUSH
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 390
// All_arabians = Arabian_soldiers ^ Un ;
20051: LD_ADDR_EXP 79
20055: PUSH
20056: LD_EXP 80
20060: PUSH
20061: LD_VAR 0 1
20065: ADD
20066: ST_TO_ADDR
// end ; end ; if ( Un = New_ArRu_Fact ) and IsOk ( Kozlov ) then
20067: LD_VAR 0 1
20071: PUSH
20072: LD_EXP 87
20076: EQUAL
20077: PUSH
20078: LD_EXP 22
20082: PPUSH
20083: CALL_OW 302
20087: AND
20088: IFFALSE 20178
// begin if GetClass ( Kozlov ) <> class_engineer then
20090: LD_EXP 22
20094: PPUSH
20095: CALL_OW 257
20099: PUSH
20100: LD_INT 2
20102: NONEQUAL
20103: IFFALSE 20138
// begin ComEnterUnit ( Kozlov , ArDep1 ) ;
20105: LD_EXP 22
20109: PPUSH
20110: LD_INT 122
20112: PPUSH
20113: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_engineer ) ;
20117: LD_EXP 22
20121: PPUSH
20122: LD_INT 2
20124: PPUSH
20125: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
20129: LD_EXP 22
20133: PPUSH
20134: CALL_OW 182
// end ; AddComRepairBuilding ( Kozlov , New_ArRu_Fact ) ;
20138: LD_EXP 22
20142: PPUSH
20143: LD_EXP 87
20147: PPUSH
20148: CALL_OW 190
// AddComEnterUnit ( Kozlov , New_ArRu_Fact ) ;
20152: LD_EXP 22
20156: PPUSH
20157: LD_EXP 87
20161: PPUSH
20162: CALL_OW 180
// AddComChangeProfession ( Kozlov , class_mechanic ) ;
20166: LD_EXP 22
20170: PPUSH
20171: LD_INT 3
20173: PPUSH
20174: CALL_OW 183
// end ; end ; Arabians1 :
20178: GO 20226
20180: LD_EXP 181
20184: DOUBLE
20185: EQUAL
20186: IFTRUE 20190
20188: GO 20193
20190: POP
// begin end ; Alliance :
20191: GO 20226
20193: LD_EXP 182
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20225
20203: POP
// begin if ( GetType ( Un ) = unit_building ) then
20204: LD_VAR 0 1
20208: PPUSH
20209: CALL_OW 247
20213: PUSH
20214: LD_INT 3
20216: EQUAL
20217: IFFALSE 20223
// AllianceBuildingInRed ;
20219: CALL 50936 0 0
// end ; end ;
20223: GO 20226
20225: POP
// end ;
20226: PPOPN 2
20228: END
// on HumanDestroyed ( un , side , nation , x , y , direction , sex , class ) do var i ;
20229: LD_INT 0
20231: PPUSH
// begin Wait ( 1 ) ;
20232: LD_INT 1
20234: PPUSH
20235: CALL_OW 67
// case side of americans :
20239: LD_VAR 0 2
20243: PUSH
20244: LD_EXP 176
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20275
20254: POP
// begin if nation <> nation_nature then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 0
20262: NONEQUAL
20263: IFFALSE 20273
// No_Looses = false ;
20265: LD_ADDR_EXP 56
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// end ; arabians :
20273: GO 20478
20275: LD_EXP 180
20279: DOUBLE
20280: EQUAL
20281: IFTRUE 20285
20283: GO 20292
20285: POP
// begin ArabianPersonIsDead ;
20286: CALL 33865 0 0
// end ; arabians1 :
20290: GO 20478
20292: LD_EXP 181
20296: DOUBLE
20297: EQUAL
20298: IFTRUE 20302
20300: GO 20313
20302: POP
// begin HeikeLastWords ;
20303: CALL 50062 0 0
// TestForEndOfMission ;
20307: CALL 50134 0 0
// end ; alliance :
20311: GO 20478
20313: LD_EXP 182
20317: DOUBLE
20318: EQUAL
20319: IFTRUE 20323
20321: GO 20351
20323: POP
// begin if ( un = Roth ) then
20324: LD_VAR 0 1
20328: PUSH
20329: LD_EXP 20
20333: EQUAL
20334: IFFALSE 20345
// ChangeMissionObjectives ( M3b ) else
20336: LD_STRING M3b
20338: PPUSH
20339: CALL_OW 337
20343: GO 20349
// AlliancePersonIsDead ;
20345: CALL 50853 0 0
// end ; russians :
20349: GO 20478
20351: LD_EXP 178
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20477
20361: POP
// begin if Un in Behemot_Engineers then
20362: LD_VAR 0 1
20366: PUSH
20367: LD_EXP 127
20371: IN
20372: IFFALSE 20475
// begin Behemot_Engineers = Behemot_Engineers diff Un ;
20374: LD_ADDR_EXP 127
20378: PUSH
20379: LD_EXP 127
20383: PUSH
20384: LD_VAR 0 1
20388: DIFF
20389: ST_TO_ADDR
// if Behemot_Engineers = [ ] then
20390: LD_EXP 127
20394: PUSH
20395: EMPTY
20396: EQUAL
20397: IFFALSE 20424
// begin if Russian_project_canceled then
20399: LD_EXP 55
20403: IFFALSE 20412
// ChangeMissionObjectives ( M4a ) ;
20405: LD_STRING M4a
20407: PPUSH
20408: CALL_OW 337
// Number_of_complete_Behemots = 0 ;
20412: LD_ADDR_EXP 223
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// BehemotsAttack ;
20420: CALL 48310 0 0
// end ; Wait ( 1 ) ;
20424: LD_INT 1
20426: PPUSH
20427: CALL_OW 67
// for i in Behemot_Engineers do
20431: LD_ADDR_VAR 0 9
20435: PUSH
20436: LD_EXP 127
20440: PUSH
20441: FOR_IN
20442: IFFALSE 20461
// if HasTask ( i ) then
20444: LD_VAR 0 9
20448: PPUSH
20449: CALL_OW 314
20453: IFFALSE 20459
// exit ;
20455: POP
20456: POP
20457: GO 20478
20459: GO 20441
20461: POP
20462: POP
// Number_of_complete_Behemots = 0 ;
20463: LD_ADDR_EXP 223
20467: PUSH
20468: LD_INT 0
20470: ST_TO_ADDR
// BehemotsAttack ;
20471: CALL 48310 0 0
// end ; end ; end ;
20475: GO 20478
20477: POP
// end ;
20478: PPOPN 9
20480: END
// on SiberiteRocketExploded ( Un , x , y ) do begin SA_OnSiberiteRocketExploded ( Un ) ;
20481: LD_VAR 0 1
20485: PPUSH
20486: CALL 56254 0 1
// if InArea ( x , y , Rus_Base ) then
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_VAR 0 3
20499: PPUSH
20500: LD_INT 5
20502: PPUSH
20503: CALL_OW 309
20507: IFFALSE 20555
// begin if GetSide ( Un ) = arabians then
20509: LD_VAR 0 1
20513: PPUSH
20514: CALL_OW 255
20518: PUSH
20519: LD_EXP 180
20523: EQUAL
20524: IFFALSE 20533
// enable ( Matherlod_Contamined1 ) else
20526: LD_EXP 149
20530: ENABLE_MARKED
20531: GO 20555
// if GetSide ( Un ) = americans then
20533: LD_VAR 0 1
20537: PPUSH
20538: CALL_OW 255
20542: PUSH
20543: LD_EXP 176
20547: EQUAL
20548: IFFALSE 20555
// enable ( Matherlod_Contamined2 ) ;
20550: LD_EXP 150
20554: ENABLE_MARKED
// end ; if GetSide ( Un ) = russians then
20555: LD_VAR 0 1
20559: PPUSH
20560: CALL_OW 255
20564: PUSH
20565: LD_EXP 178
20569: EQUAL
20570: IFFALSE 20591
// begin Wait ( 0 0$5 ) ;
20572: LD_INT 175
20574: PPUSH
20575: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
20579: LD_EXP 26
20583: PPUSH
20584: LD_STRING D18-Pla-1
20586: PPUSH
20587: CALL_OW 88
// end ; end ;
20591: PPOPN 3
20593: END
// on BuildingStarted ( build , hum ) do begin if GetBType ( build ) = b_behemoth then
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL_OW 266
20603: PUSH
20604: LD_INT 37
20606: EQUAL
20607: IFFALSE 20625
// Russian_Behemots = Russian_Behemots ^ build ;
20609: LD_ADDR_EXP 128
20613: PUSH
20614: LD_EXP 128
20618: PUSH
20619: LD_VAR 0 1
20623: ADD
20624: ST_TO_ADDR
// end ;
20625: PPOPN 2
20627: END
// on BehemothConstructed ( behemot ) do var i ;
20628: LD_INT 0
20630: PPUSH
// begin if GetSide ( behemot ) = 1 then
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 255
20640: PUSH
20641: LD_INT 1
20643: EQUAL
20644: IFFALSE 20648
// exit ;
20646: GO 20774
// Russian_Behemots = UnitFilter ( ( Russian_Behemots ^ behemot ) diff [ 0 ] , [ f_alive ] ) ;
20648: LD_ADDR_EXP 128
20652: PUSH
20653: LD_EXP 128
20657: PUSH
20658: LD_VAR 0 1
20662: ADD
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: DIFF
20670: PPUSH
20671: LD_INT 51
20673: PUSH
20674: EMPTY
20675: LIST
20676: PPUSH
20677: CALL_OW 72
20681: ST_TO_ADDR
// New_Behemots = New_Behemots ^ behemot ;
20682: LD_ADDR_EXP 129
20686: PUSH
20687: LD_EXP 129
20691: PUSH
20692: LD_VAR 0 1
20696: ADD
20697: ST_TO_ADDR
// if Russian_project_canceled = true then
20698: LD_EXP 55
20702: PUSH
20703: LD_INT 1
20705: EQUAL
20706: IFFALSE 20723
// begin Russian_project_canceled = false ;
20708: LD_ADDR_EXP 55
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
20716: LD_STRING M4b
20718: PPUSH
20719: CALL_OW 337
// end ; Wait ( 1 ) ;
20723: LD_INT 1
20725: PPUSH
20726: CALL_OW 67
// for i in Behemot_Engineers do
20730: LD_ADDR_VAR 0 2
20734: PUSH
20735: LD_EXP 127
20739: PUSH
20740: FOR_IN
20741: IFFALSE 20760
// if HasTask ( i ) then
20743: LD_VAR 0 2
20747: PPUSH
20748: CALL_OW 314
20752: IFFALSE 20758
// exit ;
20754: POP
20755: POP
20756: GO 20774
20758: GO 20740
20760: POP
20761: POP
// Number_of_complete_Behemots = 0 ;
20762: LD_ADDR_EXP 223
20766: PUSH
20767: LD_INT 0
20769: ST_TO_ADDR
// BehemotsAttack ;
20770: CALL 48310 0 0
// end ;
20774: PPOPN 2
20776: END
// on SibDepositContaminated ( Un , X , Y ) do begin if InArea ( X , Y , R_base ) then
20777: LD_VAR 0 2
20781: PPUSH
20782: LD_VAR 0 3
20786: PPUSH
20787: LD_INT 36
20789: PPUSH
20790: CALL_OW 309
20794: IFFALSE 20855
// begin if GetSide ( Un ) = arabians1 then
20796: LD_VAR 0 1
20800: PPUSH
20801: CALL_OW 255
20805: PUSH
20806: LD_EXP 181
20810: EQUAL
20811: IFFALSE 20855
// begin CenterOnXY ( X , Y ) ;
20813: LD_VAR 0 2
20817: PPUSH
20818: LD_VAR 0 3
20822: PPUSH
20823: CALL_OW 84
// placeseeing ( X , Y , americans , - 12 ) ;
20827: LD_VAR 0 2
20831: PPUSH
20832: LD_VAR 0 3
20836: PPUSH
20837: LD_EXP 176
20841: PPUSH
20842: LD_INT 12
20844: NEG
20845: PPUSH
20846: CALL_OW 330
// enable ( Matherlod_Contamined3 ) ;
20850: LD_EXP 151
20854: ENABLE_MARKED
// end ; end ; end ;
20855: PPOPN 3
20857: END
// var reg_res ; on McRegistryResultChanges ( mcid , count , strength ) do begin case mcid of Alliance_wood_reg_id :
20858: LD_VAR 0 1
20862: PUSH
20863: LD_EXP 249
20867: DOUBLE
20868: EQUAL
20869: IFTRUE 20873
20871: GO 20880
20873: POP
// GuardAllianceWood ; end ;
20874: CALL 55330 0 0
20878: GO 20881
20880: POP
// reg_res = count &    & strength ;
20881: LD_ADDR_LOC 2
20885: PUSH
20886: LD_VAR 0 2
20890: PUSH
20891: LD_STRING   
20893: STR
20894: PUSH
20895: LD_VAR 0 3
20899: STR
20900: ST_TO_ADDR
// end ;
20901: PPOPN 3
20903: END
// on McDefendTakesUnit ( mcid , un ) do begin taken := taken ^ [ un ] ;
20904: LD_ADDR_LOC 1
20908: PUSH
20909: LD_LOC 1
20913: PUSH
20914: LD_VAR 0 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: ADD
20922: ST_TO_ADDR
// end ;
20923: PPOPN 2
20925: END
// on McDefendReturnsUnit ( mcid , un ) do begin taken := taken diff [ un ] ;
20926: LD_ADDR_LOC 1
20930: PUSH
20931: LD_LOC 1
20935: PUSH
20936: LD_VAR 0 2
20940: PUSH
20941: EMPTY
20942: LIST
20943: DIFF
20944: ST_TO_ADDR
// end ; end_of_file
20945: PPOPN 2
20947: END
// var driver1 , driver2 , Selected_Sold ; var soldiers , soldiers1 , Retreat_Boy ; var driver , developer ; var R1_Attacking_Units , R1_Patroling_Units ; var The_original_mechanical_Skill ; export function RunJMMVehicles ; var V ; begin
20948: LD_INT 0
20950: PPUSH
20951: PPUSH
// RevealFogArea ( americans , map_ar ) ;
20952: LD_EXP 176
20956: PPUSH
20957: LD_INT 19
20959: PPUSH
20960: CALL_OW 332
// V = [ JMM_veh ] ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_EXP 57
20973: PUSH
20974: EMPTY
20975: LIST
20976: ST_TO_ADDR
// if JMM_Woman then
20977: LD_EXP 37
20981: IFFALSE 21002
// V = V ^ [ Woman_veh ] ;
20983: LD_ADDR_VAR 0 2
20987: PUSH
20988: LD_VAR 0 2
20992: PUSH
20993: LD_EXP 58
20997: PUSH
20998: EMPTY
20999: LIST
21000: ADD
21001: ST_TO_ADDR
// AddComMoveXY ( V , 94 , 124 ) ;
21002: LD_VAR 0 2
21006: PPUSH
21007: LD_INT 94
21009: PPUSH
21010: LD_INT 124
21012: PPUSH
21013: CALL_OW 171
// AddComMoveXY ( V , 47 , 79 ) ;
21017: LD_VAR 0 2
21021: PPUSH
21022: LD_INT 47
21024: PPUSH
21025: LD_INT 79
21027: PPUSH
21028: CALL_OW 171
// WaitTask ( V , 0.5 ) ;
21032: LD_VAR 0 2
21036: PPUSH
21037: LD_REAL  5.00000000000000E-0001
21040: PPUSH
21041: CALL 17876 0 2
// ComExitVehicle ( V ) ;
21045: LD_VAR 0 2
21049: PPUSH
21050: CALL_OW 121
// if not ( Skip ) then
21054: LD_EXP 186
21058: NOT
21059: IFFALSE 21069
// CenterJMM = false ;
21061: LD_ADDR_EXP 68
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// End_of_journey = true ;
21069: LD_ADDR_EXP 66
21073: PUSH
21074: LD_INT 1
21076: ST_TO_ADDR
// RaiseSailEvent ( Capture_JMM_Vehicles ) ;
21077: LD_EXP 166
21081: PPUSH
21082: CALL_OW 427
// Wait ( 2 ) ;
21086: LD_INT 2
21088: PPUSH
21089: CALL_OW 67
// if not ( Skip ) then
21093: LD_EXP 186
21097: NOT
21098: IFFALSE 21115
// ComMoveXY ( JMM , 48 , 63 ) ;
21100: LD_EXP 1
21104: PPUSH
21105: LD_INT 48
21107: PPUSH
21108: LD_INT 63
21110: PPUSH
21111: CALL_OW 111
// if not ( Skip ) then
21115: LD_EXP 186
21119: NOT
21120: IFFALSE 21136
// AddComTurnUnit ( JMM , Powell ) ;
21122: LD_EXP 1
21126: PPUSH
21127: LD_EXP 2
21131: PPUSH
21132: CALL_OW 179
// if not ( Skip ) then
21136: LD_EXP 186
21140: NOT
21141: IFFALSE 21158
// ComMoveXY ( JMM_Woman , 47 , 68 ) ;
21143: LD_EXP 37
21147: PPUSH
21148: LD_INT 47
21150: PPUSH
21151: LD_INT 68
21153: PPUSH
21154: CALL_OW 111
// if not ( Skip ) then
21158: LD_EXP 186
21162: NOT
21163: IFFALSE 21180
// ComMoveXY ( Powell , 43 , 63 ) ;
21165: LD_EXP 2
21169: PPUSH
21170: LD_INT 43
21172: PPUSH
21173: LD_INT 63
21175: PPUSH
21176: CALL_OW 111
// if not ( Skip ) then
21180: LD_EXP 186
21184: NOT
21185: IFFALSE 21201
// AddComTurnUnit ( Powell , JMM ) ;
21187: LD_EXP 2
21191: PPUSH
21192: LD_EXP 1
21196: PPUSH
21197: CALL_OW 179
// if not ( Skip ) then
21201: LD_EXP 186
21205: NOT
21206: IFFALSE 21217
// CenterOnUnits ( Powell ) ;
21208: LD_EXP 2
21212: PPUSH
21213: CALL_OW 85
// end ;
21217: LD_VAR 0 1
21221: RET
// export function CaptureJMMVehicles ; var possible_drivers , hex ; begin
21222: LD_INT 0
21224: PPUSH
21225: PPUSH
21226: PPUSH
// possible_drivers = Remaining_Powells diff Named_americans ;
21227: LD_ADDR_VAR 0 2
21231: PUSH
21232: LD_EXP 64
21236: PUSH
21237: LD_EXP 62
21241: DIFF
21242: ST_TO_ADDR
// driver1 = possible_drivers [ 1 ] ;
21243: LD_ADDR_LOC 3
21247: PUSH
21248: LD_VAR 0 2
21252: PUSH
21253: LD_INT 1
21255: ARRAY
21256: ST_TO_ADDR
// driver2 = possible_drivers [ 2 ] ;
21257: LD_ADDR_LOC 4
21261: PUSH
21262: LD_VAR 0 2
21266: PUSH
21267: LD_INT 2
21269: ARRAY
21270: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff ( driver1 ^ driver2 ) ;
21271: LD_ADDR_EXP 64
21275: PUSH
21276: LD_EXP 64
21280: PUSH
21281: LD_LOC 3
21285: PUSH
21286: LD_LOC 4
21290: ADD
21291: DIFF
21292: ST_TO_ADDR
// ComEnterUnit ( driver1 , JMM_veh ) ;
21293: LD_LOC 3
21297: PPUSH
21298: LD_EXP 57
21302: PPUSH
21303: CALL_OW 120
// hex = RandHexArea ( Am1_parking , true ) ;
21307: LD_ADDR_VAR 0 3
21311: PUSH
21312: LD_INT 21
21314: PPUSH
21315: LD_INT 1
21317: PPUSH
21318: CALL_OW 16
21322: ST_TO_ADDR
// AddComMoveXY ( driver1 , hex [ 1 ] , hex [ 2 ] ) ;
21323: LD_LOC 3
21327: PPUSH
21328: LD_VAR 0 3
21332: PUSH
21333: LD_INT 1
21335: ARRAY
21336: PPUSH
21337: LD_VAR 0 3
21341: PUSH
21342: LD_INT 2
21344: ARRAY
21345: PPUSH
21346: CALL_OW 171
// AddComExitVehicle ( driver1 ) ;
21350: LD_LOC 3
21354: PPUSH
21355: CALL_OW 181
// AddComEnterUnit ( driver1 , AmArm ) ;
21359: LD_LOC 3
21363: PPUSH
21364: LD_INT 92
21366: PPUSH
21367: CALL_OW 180
// AddComChangeProfession ( driver1 , class_soldier ) ;
21371: LD_LOC 3
21375: PPUSH
21376: LD_INT 1
21378: PPUSH
21379: CALL_OW 183
// if Woman_veh then
21383: LD_EXP 58
21387: IFFALSE 21524
// begin ComEnterUnit ( driver2 , Woman_veh ) ;
21389: LD_LOC 4
21393: PPUSH
21394: LD_EXP 58
21398: PPUSH
21399: CALL_OW 120
// hex = RandHexArea ( Am1_parking , true ) ;
21403: LD_ADDR_VAR 0 3
21407: PUSH
21408: LD_INT 21
21410: PPUSH
21411: LD_INT 1
21413: PPUSH
21414: CALL_OW 16
21418: ST_TO_ADDR
// AddComMoveXY ( driver2 , hex [ 1 ] , hex [ 2 ] ) ;
21419: LD_LOC 4
21423: PPUSH
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 1
21431: ARRAY
21432: PPUSH
21433: LD_VAR 0 3
21437: PUSH
21438: LD_INT 2
21440: ARRAY
21441: PPUSH
21442: CALL_OW 171
// AddComExitVehicle ( driver2 ) ;
21446: LD_LOC 4
21450: PPUSH
21451: CALL_OW 181
// AddComEnterUnit ( driver2 , AmArm ) ;
21455: LD_LOC 4
21459: PPUSH
21460: LD_INT 92
21462: PPUSH
21463: CALL_OW 180
// AddComChangeProfession ( driver2 , class_soldier ) ;
21467: LD_LOC 4
21471: PPUSH
21472: LD_INT 1
21474: PPUSH
21475: CALL_OW 183
// WaitTask ( [ driver1 , driver2 ] , 1 ) ;
21479: LD_LOC 3
21483: PUSH
21484: LD_LOC 4
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: LD_INT 1
21495: PPUSH
21496: CALL 17876 0 2
// Remaining_Powells = Remaining_Powells ^ driver1 ^ driver2 ;
21500: LD_ADDR_EXP 64
21504: PUSH
21505: LD_EXP 64
21509: PUSH
21510: LD_LOC 3
21514: ADD
21515: PUSH
21516: LD_LOC 4
21520: ADD
21521: ST_TO_ADDR
// end else
21522: GO 21558
// begin WaitTask ( driver1 , 1 ) ;
21524: LD_LOC 3
21528: PPUSH
21529: LD_INT 1
21531: PPUSH
21532: CALL 17876 0 2
// Remaining_Powells = Remaining_Powells ^ driver1 ^ driver2 ;
21536: LD_ADDR_EXP 64
21540: PUSH
21541: LD_EXP 64
21545: PUSH
21546: LD_LOC 3
21550: ADD
21551: PUSH
21552: LD_LOC 4
21556: ADD
21557: ST_TO_ADDR
// end ; end ;
21558: LD_VAR 0 1
21562: RET
// export function JMMTalk ; begin
21563: LD_INT 0
21565: PPUSH
// while Joan_semafor do
21566: LD_EXP 233
21570: IFFALSE 21581
// Wait ( 0 0$1 ) ;
21572: LD_INT 35
21574: PPUSH
21575: CALL_OW 67
21579: GO 21566
// case Selected_Sold of Lisa :
21581: LD_LOC 5
21585: PUSH
21586: LD_EXP 5
21590: DOUBLE
21591: EQUAL
21592: IFTRUE 21596
21594: GO 21611
21596: POP
// Say ( Lisa , D3nW-Lisa-1 ) ; Cyrus :
21597: LD_EXP 5
21601: PPUSH
21602: LD_STRING D3nW-Lisa-1
21604: PPUSH
21605: CALL_OW 88
21609: GO 21762
21611: LD_EXP 4
21615: DOUBLE
21616: EQUAL
21617: IFTRUE 21621
21619: GO 21636
21621: POP
// Say ( Cyrus , D3nW-Cyrus-1 ) ; Bobby :
21622: LD_EXP 4
21626: PPUSH
21627: LD_STRING D3nW-Cyrus-1
21629: PPUSH
21630: CALL_OW 88
21634: GO 21762
21636: LD_EXP 3
21640: DOUBLE
21641: EQUAL
21642: IFTRUE 21646
21644: GO 21661
21646: POP
// Say ( Bobby , D3nW-Bobby-1 ) ; Gary :
21647: LD_EXP 3
21651: PPUSH
21652: LD_STRING D3nW-Bobby-1
21654: PPUSH
21655: CALL_OW 88
21659: GO 21762
21661: LD_EXP 15
21665: DOUBLE
21666: EQUAL
21667: IFTRUE 21671
21669: GO 21686
21671: POP
// Say ( Gary , D3nW-Gary-1 ) ; Donaldson :
21672: LD_EXP 15
21676: PPUSH
21677: LD_STRING D3nW-Gary-1
21679: PPUSH
21680: CALL_OW 88
21684: GO 21762
21686: LD_EXP 8
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21711
21696: POP
// Say ( Donaldson , D3nW-Don-1 ) ; Frank :
21697: LD_EXP 8
21701: PPUSH
21702: LD_STRING D3nW-Don-1
21704: PPUSH
21705: CALL_OW 88
21709: GO 21762
21711: LD_EXP 6
21715: DOUBLE
21716: EQUAL
21717: IFTRUE 21721
21719: GO 21736
21721: POP
// Say ( Frank , D3nW-Frank-1 ) ; Cornell :
21722: LD_EXP 6
21726: PPUSH
21727: LD_STRING D3nW-Frank-1
21729: PPUSH
21730: CALL_OW 88
21734: GO 21762
21736: LD_EXP 10
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21761
21746: POP
// Say ( Cornell , D3nW-Corn-1 ) ; end ;
21747: LD_EXP 10
21751: PPUSH
21752: LD_STRING D3nW-Corn-1
21754: PPUSH
21755: CALL_OW 88
21759: GO 21762
21761: POP
// if Selected_Sold > 0 then
21762: LD_LOC 5
21766: PUSH
21767: LD_INT 0
21769: GREATER
21770: IFFALSE 21796
// begin Say ( JMM , D3nW-JMM-1 ) ;
21772: LD_EXP 1
21776: PPUSH
21777: LD_STRING D3nW-JMM-1
21779: PPUSH
21780: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
21784: LD_EXP 1
21788: PPUSH
21789: LD_STRING D3nW-JMM-1a
21791: PPUSH
21792: CALL_OW 88
// end ; end ;
21796: LD_VAR 0 1
21800: RET
// export function SendHelpers ; var Named_without_woman , Un , Uns , i , Possible_Units ; begin
21801: LD_INT 0
21803: PPUSH
21804: PPUSH
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
// JMM_Helpers = Named_Americans ;
21809: LD_ADDR_EXP 67
21813: PUSH
21814: LD_EXP 62
21818: ST_TO_ADDR
// if Named_Americans > Number_of_JMM_Helpers then
21819: LD_EXP 62
21823: PUSH
21824: LD_EXP 69
21828: GREATER
21829: IFFALSE 22021
// begin Uns = FindMaxSkill ( JMM_Helpers , skill_engineering ) ;
21831: LD_ADDR_VAR 0 4
21835: PUSH
21836: LD_EXP 67
21840: PPUSH
21841: LD_INT 2
21843: PPUSH
21844: CALL_OW 433
21848: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21849: LD_ADDR_EXP 67
21853: PUSH
21854: LD_EXP 67
21858: PUSH
21859: LD_VAR 0 4
21863: DIFF
21864: ST_TO_ADDR
// Uns = Uns ^ FindMaxSkill ( JMM_Helpers , skill_scientistic ) ;
21865: LD_ADDR_VAR 0 4
21869: PUSH
21870: LD_VAR 0 4
21874: PUSH
21875: LD_EXP 67
21879: PPUSH
21880: LD_INT 4
21882: PPUSH
21883: CALL_OW 433
21887: ADD
21888: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21889: LD_ADDR_EXP 67
21893: PUSH
21894: LD_EXP 67
21898: PUSH
21899: LD_VAR 0 4
21903: DIFF
21904: ST_TO_ADDR
// Uns = Uns ^ FindMaxSkill ( JMM_Helpers , skill_combat ) ;
21905: LD_ADDR_VAR 0 4
21909: PUSH
21910: LD_VAR 0 4
21914: PUSH
21915: LD_EXP 67
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: CALL_OW 433
21927: ADD
21928: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21929: LD_ADDR_EXP 67
21933: PUSH
21934: LD_EXP 67
21938: PUSH
21939: LD_VAR 0 4
21943: DIFF
21944: ST_TO_ADDR
// for Un = Number_of_JMM_Helpers to Named_Americans - 1 do
21945: LD_ADDR_VAR 0 3
21949: PUSH
21950: DOUBLE
21951: LD_EXP 69
21955: DEC
21956: ST_TO_ADDR
21957: LD_EXP 62
21961: PUSH
21962: LD_INT 1
21964: MINUS
21965: PUSH
21966: FOR_TO
21967: IFFALSE 22001
// begin JMM_Helpers = JMM_Helpers diff JMM_Helpers [ Rand ( 1 , JMM_Helpers ) ] ;
21969: LD_ADDR_EXP 67
21973: PUSH
21974: LD_EXP 67
21978: PUSH
21979: LD_EXP 67
21983: PUSH
21984: LD_INT 1
21986: PPUSH
21987: LD_EXP 67
21991: PPUSH
21992: CALL_OW 12
21996: ARRAY
21997: DIFF
21998: ST_TO_ADDR
// end ;
21999: GO 21966
22001: POP
22002: POP
// JMM_Helpers = JMM_Helpers ^ Uns ;
22003: LD_ADDR_EXP 67
22007: PUSH
22008: LD_EXP 67
22012: PUSH
22013: LD_VAR 0 4
22017: ADD
22018: ST_TO_ADDR
// end else
22019: GO 22133
// if Named_Americans < Number_of_JMM_Helpers then
22021: LD_EXP 62
22025: PUSH
22026: LD_EXP 69
22030: LESS
22031: IFFALSE 22133
// begin JMM_Helpers = JMM_Helpers ^ FindMaxSkill ( ( All_americans diff ( JMM_Helpers ^ JMM_Woman ) ) , skill_engineering ) ;
22033: LD_ADDR_EXP 67
22037: PUSH
22038: LD_EXP 67
22042: PUSH
22043: LD_EXP 61
22047: PUSH
22048: LD_EXP 67
22052: PUSH
22053: LD_EXP 37
22057: ADD
22058: DIFF
22059: PPUSH
22060: LD_INT 2
22062: PPUSH
22063: CALL_OW 433
22067: ADD
22068: ST_TO_ADDR
// for Un = Named_Americans + 2 to Number_of_JMM_Helpers do
22069: LD_ADDR_VAR 0 3
22073: PUSH
22074: DOUBLE
22075: LD_EXP 62
22079: PUSH
22080: LD_INT 2
22082: PLUS
22083: DEC
22084: ST_TO_ADDR
22085: LD_EXP 69
22089: PUSH
22090: FOR_TO
22091: IFFALSE 22131
// begin JMM_Helpers = JMM_Helpers ^ FindMaxSkill ( ( All_americans diff ( JMM_Helpers ^ JMM_Woman ) ) , skill_combat ) ;
22093: LD_ADDR_EXP 67
22097: PUSH
22098: LD_EXP 67
22102: PUSH
22103: LD_EXP 61
22107: PUSH
22108: LD_EXP 67
22112: PUSH
22113: LD_EXP 37
22117: ADD
22118: DIFF
22119: PPUSH
22120: LD_INT 1
22122: PPUSH
22123: CALL_OW 433
22127: ADD
22128: ST_TO_ADDR
// end ;
22129: GO 22090
22131: POP
22132: POP
// end ; Uns = JMM_Helpers ;
22133: LD_ADDR_VAR 0 4
22137: PUSH
22138: LD_EXP 67
22142: ST_TO_ADDR
// Un = FindMaxSkill ( Uns , skill_engineering ) ;
22143: LD_ADDR_VAR 0 3
22147: PUSH
22148: LD_VAR 0 4
22152: PPUSH
22153: LD_INT 2
22155: PPUSH
22156: CALL_OW 433
22160: ST_TO_ADDR
// Uns = Uns diff Un ;
22161: LD_ADDR_VAR 0 4
22165: PUSH
22166: LD_VAR 0 4
22170: PUSH
22171: LD_VAR 0 3
22175: DIFF
22176: ST_TO_ADDR
// if GetClass ( Un ) <> class_engineer then
22177: LD_VAR 0 3
22181: PPUSH
22182: CALL_OW 257
22186: PUSH
22187: LD_INT 2
22189: NONEQUAL
22190: IFFALSE 22233
// begin ComEnterUnit ( Un , AmDep ) ;
22192: LD_VAR 0 3
22196: PPUSH
22197: LD_INT 84
22199: PPUSH
22200: CALL_OW 120
// AddComChangeProfession ( Un , class_engineer ) ;
22204: LD_VAR 0 3
22208: PPUSH
22209: LD_INT 2
22211: PPUSH
22212: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22216: LD_VAR 0 3
22220: PPUSH
22221: LD_INT 68
22223: PPUSH
22224: LD_INT 107
22226: PPUSH
22227: CALL_OW 171
// end else
22231: GO 22248
// ComMoveXY ( Un , 68 , 107 ) ;
22233: LD_VAR 0 3
22237: PPUSH
22238: LD_INT 68
22240: PPUSH
22241: LD_INT 107
22243: PPUSH
22244: CALL_OW 111
// for i = 1 to 1 do
22248: LD_ADDR_VAR 0 5
22252: PUSH
22253: DOUBLE
22254: LD_INT 1
22256: DEC
22257: ST_TO_ADDR
22258: LD_INT 1
22260: PUSH
22261: FOR_TO
22262: IFFALSE 22371
// begin Un = FindMaxSkill ( Uns , skill_scientistic ) ;
22264: LD_ADDR_VAR 0 3
22268: PUSH
22269: LD_VAR 0 4
22273: PPUSH
22274: LD_INT 4
22276: PPUSH
22277: CALL_OW 433
22281: ST_TO_ADDR
// Uns = Uns diff Un ;
22282: LD_ADDR_VAR 0 4
22286: PUSH
22287: LD_VAR 0 4
22291: PUSH
22292: LD_VAR 0 3
22296: DIFF
22297: ST_TO_ADDR
// if GetClass ( Un ) <> class_scientistic then
22298: LD_VAR 0 3
22302: PPUSH
22303: CALL_OW 257
22307: PUSH
22308: LD_INT 4
22310: NONEQUAL
22311: IFFALSE 22354
// begin ComEnterUnit ( Un , AmLab ) ;
22313: LD_VAR 0 3
22317: PPUSH
22318: LD_INT 91
22320: PPUSH
22321: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
22325: LD_VAR 0 3
22329: PPUSH
22330: LD_INT 4
22332: PPUSH
22333: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22337: LD_VAR 0 3
22341: PPUSH
22342: LD_INT 68
22344: PPUSH
22345: LD_INT 107
22347: PPUSH
22348: CALL_OW 171
// end else
22352: GO 22369
// ComMoveXY ( Un , 68 , 107 ) ;
22354: LD_VAR 0 3
22358: PPUSH
22359: LD_INT 68
22361: PPUSH
22362: LD_INT 107
22364: PPUSH
22365: CALL_OW 111
// end ;
22369: GO 22261
22371: POP
22372: POP
// for Un in Uns do
22373: LD_ADDR_VAR 0 3
22377: PUSH
22378: LD_VAR 0 4
22382: PUSH
22383: FOR_IN
22384: IFFALSE 22459
// begin if GetClass ( Un ) <> class_soldier then
22386: LD_VAR 0 3
22390: PPUSH
22391: CALL_OW 257
22395: PUSH
22396: LD_INT 1
22398: NONEQUAL
22399: IFFALSE 22442
// begin ComEnterUnit ( Un , AmArm ) ;
22401: LD_VAR 0 3
22405: PPUSH
22406: LD_INT 92
22408: PPUSH
22409: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
22413: LD_VAR 0 3
22417: PPUSH
22418: LD_INT 1
22420: PPUSH
22421: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_INT 68
22432: PPUSH
22433: LD_INT 107
22435: PPUSH
22436: CALL_OW 171
// end else
22440: GO 22457
// ComMoveXY ( Un , 68 , 107 ) ;
22442: LD_VAR 0 3
22446: PPUSH
22447: LD_INT 68
22449: PPUSH
22450: LD_INT 107
22452: PPUSH
22453: CALL_OW 111
// end ;
22457: GO 22383
22459: POP
22460: POP
// Uns = JMM_Helpers ;
22461: LD_ADDR_VAR 0 4
22465: PUSH
22466: LD_EXP 67
22470: ST_TO_ADDR
// while Uns > 0 do
22471: LD_VAR 0 4
22475: PUSH
22476: LD_INT 0
22478: GREATER
22479: IFFALSE 22558
// begin for Un in Uns do
22481: LD_ADDR_VAR 0 3
22485: PUSH
22486: LD_VAR 0 4
22490: PUSH
22491: FOR_IN
22492: IFFALSE 22547
// if GetDistUnitXY ( Un , 68 , 107 ) < 6 then
22494: LD_VAR 0 3
22498: PPUSH
22499: LD_INT 68
22501: PPUSH
22502: LD_INT 107
22504: PPUSH
22505: CALL_OW 297
22509: PUSH
22510: LD_INT 6
22512: LESS
22513: IFFALSE 22545
// begin SetSide ( Un , americans ) ;
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_EXP 176
22524: PPUSH
22525: CALL_OW 235
// Uns = Uns diff Un ;
22529: LD_ADDR_VAR 0 4
22533: PUSH
22534: LD_VAR 0 4
22538: PUSH
22539: LD_VAR 0 3
22543: DIFF
22544: ST_TO_ADDR
// end ;
22545: GO 22491
22547: POP
22548: POP
// Wait ( 0 0$1 ) ;
22549: LD_INT 35
22551: PPUSH
22552: CALL_OW 67
// end ;
22556: GO 22471
// tick = 0 ;
22558: LD_ADDR_OWVAR 1
22562: PUSH
22563: LD_INT 0
22565: ST_TO_ADDR
// ingame_video = false ;
22566: LD_ADDR_OWVAR 52
22570: PUSH
22571: LD_INT 0
22573: ST_TO_ADDR
// interface_hidden = false ;
22574: LD_ADDR_OWVAR 54
22578: PUSH
22579: LD_INT 0
22581: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
22582: LD_STRING M1
22584: PPUSH
22585: CALL_OW 337
// SaveForQuickRestart ;
22589: CALL_OW 22
// Wait ( 0 0$2 ) ;
22593: LD_INT 70
22595: PPUSH
22596: CALL_OW 67
// RandomizeAll ;
22600: CALL_OW 11
// SecondTalk ;
22604: CALL 12623 0 0
// StartRussianBase ;
22608: CALL 41824 0 0
// StartAllianceBase ;
22612: CALL 50225 0 0
// StartArabianBase ;
22616: CALL 31246 0 0
// R1_Attack_Continues = true ;
22620: LD_ADDR_EXP 196
22624: PUSH
22625: LD_INT 1
22627: ST_TO_ADDR
// enable ( R1_attack ) ;
22628: LD_EXP 140
22632: ENABLE_MARKED
// enable ( First_JMM_Task ) ;
22633: LD_EXP 137
22637: ENABLE_MARKED
// Possible_Units = 0 ;
22638: LD_ADDR_VAR 0 6
22642: PUSH
22643: LD_INT 0
22645: ST_TO_ADDR
// Possible_Units = JMM_Helpers isect [ Lisa , Cyrus , Bobby , Gary , Donaldson , Frank , Cornell ] ;
22646: LD_ADDR_VAR 0 6
22650: PUSH
22651: LD_EXP 67
22655: PUSH
22656: LD_EXP 5
22660: PUSH
22661: LD_EXP 4
22665: PUSH
22666: LD_EXP 3
22670: PUSH
22671: LD_EXP 15
22675: PUSH
22676: LD_EXP 8
22680: PUSH
22681: LD_EXP 6
22685: PUSH
22686: LD_EXP 10
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: ISECT
22700: ST_TO_ADDR
// Selected_Sold = Possible_Units [ Rand ( 1 , Possible_Units ) ] ;
22701: LD_ADDR_LOC 5
22705: PUSH
22706: LD_VAR 0 6
22710: PUSH
22711: LD_INT 1
22713: PPUSH
22714: LD_VAR 0 6
22718: PPUSH
22719: CALL_OW 12
22723: ARRAY
22724: ST_TO_ADDR
// RaiseSailEvent ( JMM_Talk ) ;
22725: LD_EXP 173
22729: PPUSH
22730: CALL_OW 427
// Remaining_Powells = Remaining_Powells diff JMM_Helpers ;
22734: LD_ADDR_EXP 64
22738: PUSH
22739: LD_EXP 64
22743: PUSH
22744: LD_EXP 67
22748: DIFF
22749: ST_TO_ADDR
// RaiseSailEvent ( Start_Am1_Base ) ;
22750: LD_EXP 164
22754: PPUSH
22755: CALL_OW 427
// end ;
22759: LD_VAR 0 1
22763: RET
// export function SendMaterial ; var Un , i , Cans_Positions , Free_Place ; begin
22764: LD_INT 0
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
// ComEnterUnit ( Carriers , AmDep ) ;
22771: LD_EXP 65
22775: PPUSH
22776: LD_INT 84
22778: PPUSH
22779: CALL_OW 120
// for Un in Carriers do
22783: LD_ADDR_VAR 0 2
22787: PUSH
22788: LD_EXP 65
22792: PUSH
22793: FOR_IN
22794: IFFALSE 22810
// begin AddComChangeProfession ( Un , class_engineer ) ;
22796: LD_VAR 0 2
22800: PPUSH
22801: LD_INT 2
22803: PPUSH
22804: CALL_OW 183
// end ;
22808: GO 22793
22810: POP
22811: POP
// WaitTask ( Carriers , 0.5 ) ;
22812: LD_EXP 65
22816: PPUSH
22817: LD_REAL  5.00000000000000E-0001
22820: PPUSH
22821: CALL 17876 0 2
// Cans_Positions = [ [ 63 , 103 ] , [ 68 , 101 ] , [ 66 , 96 ] , [ 64 , 99 ] , [ 59 , 99 ] , [ 67 , 104 ] , [ 69 , 95 ] ] ;
22825: LD_ADDR_VAR 0 4
22829: PUSH
22830: LD_INT 63
22832: PUSH
22833: LD_INT 103
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 68
22842: PUSH
22843: LD_INT 101
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 66
22852: PUSH
22853: LD_INT 96
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 64
22862: PUSH
22863: LD_INT 99
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 59
22872: PUSH
22873: LD_INT 99
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 67
22882: PUSH
22883: LD_INT 104
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 69
22892: PUSH
22893: LD_INT 95
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: ST_TO_ADDR
// for i = 1 to Number_of_crates do
22909: LD_ADDR_VAR 0 3
22913: PUSH
22914: DOUBLE
22915: LD_INT 1
22917: DEC
22918: ST_TO_ADDR
22919: LD_EXP 197
22923: PUSH
22924: FOR_TO
22925: IFFALSE 23019
// begin if i = 1 then
22927: LD_VAR 0 3
22931: PUSH
22932: LD_INT 1
22934: EQUAL
22935: IFFALSE 22954
// ComTransport ( Carriers , AmDep , mat_cans ) else
22937: LD_EXP 65
22941: PPUSH
22942: LD_INT 84
22944: PPUSH
22945: LD_INT 1
22947: PPUSH
22948: CALL_OW 151
22952: GO 22969
// AddComTransport ( Carriers , AmDep , mat_cans ) ;
22954: LD_EXP 65
22958: PPUSH
22959: LD_INT 84
22961: PPUSH
22962: LD_INT 1
22964: PPUSH
22965: CALL_OW 211
// AddComMoveXY ( Carriers , Cans_Positions [ i ] [ 1 ] , Cans_Positions [ i ] [ 2 ] ) ;
22969: LD_EXP 65
22973: PPUSH
22974: LD_VAR 0 4
22978: PUSH
22979: LD_VAR 0 3
22983: ARRAY
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: PPUSH
22989: LD_VAR 0 4
22993: PUSH
22994: LD_VAR 0 3
22998: ARRAY
22999: PUSH
23000: LD_INT 2
23002: ARRAY
23003: PPUSH
23004: CALL_OW 171
// AddComUnload ( Carriers ) ;
23008: LD_EXP 65
23012: PPUSH
23013: CALL_OW 219
// end ;
23017: GO 22924
23019: POP
23020: POP
// AddComMoveXY ( Carriers , 48 , 73 ) ;
23021: LD_EXP 65
23025: PPUSH
23026: LD_INT 48
23028: PPUSH
23029: LD_INT 73
23031: PPUSH
23032: CALL_OW 171
// WaitTask ( Carriers , 1 ) ;
23036: LD_EXP 65
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL 17876 0 2
// Free_Place = 6 - UnitsInside ( AmArm ) ;
23048: LD_ADDR_VAR 0 5
23052: PUSH
23053: LD_INT 6
23055: PUSH
23056: LD_INT 92
23058: PPUSH
23059: CALL_OW 313
23063: MINUS
23064: ST_TO_ADDR
// if Free_Place > 2 then
23065: LD_VAR 0 5
23069: PUSH
23070: LD_INT 2
23072: GREATER
23073: IFFALSE 23089
// AddComEnterUnit ( Carriers , AmArm ) else
23075: LD_EXP 65
23079: PPUSH
23080: LD_INT 92
23082: PPUSH
23083: CALL_OW 180
23087: GO 23185
// begin for i = 1 to Free_Place do
23089: LD_ADDR_VAR 0 3
23093: PUSH
23094: DOUBLE
23095: LD_INT 1
23097: DEC
23098: ST_TO_ADDR
23099: LD_VAR 0 5
23103: PUSH
23104: FOR_TO
23105: IFFALSE 23139
// begin AddComEnterUnit ( Carriers [ i ] , AmArm ) ;
23107: LD_EXP 65
23111: PUSH
23112: LD_VAR 0 3
23116: ARRAY
23117: PPUSH
23118: LD_INT 92
23120: PPUSH
23121: CALL_OW 180
// AddComChangeProfession ( Carriers , class_soldier ) ;
23125: LD_EXP 65
23129: PPUSH
23130: LD_INT 1
23132: PPUSH
23133: CALL_OW 183
// end ;
23137: GO 23104
23139: POP
23140: POP
// for i = Free_Place + 1 to 3 do
23141: LD_ADDR_VAR 0 3
23145: PUSH
23146: DOUBLE
23147: LD_VAR 0 5
23151: PUSH
23152: LD_INT 1
23154: PLUS
23155: DEC
23156: ST_TO_ADDR
23157: LD_INT 3
23159: PUSH
23160: FOR_TO
23161: IFFALSE 23183
// AddComEnterUnit ( Carriers [ i ] , AmLab ) ;
23163: LD_EXP 65
23167: PUSH
23168: LD_VAR 0 3
23172: ARRAY
23173: PPUSH
23174: LD_INT 91
23176: PPUSH
23177: CALL_OW 180
23181: GO 23160
23183: POP
23184: POP
// end ; WaitTask ( Carriers , 1 ) ;
23185: LD_EXP 65
23189: PPUSH
23190: LD_INT 1
23192: PPUSH
23193: CALL 17876 0 2
// Remaining_Powells = Remaining_Powells ^ Carriers ;
23197: LD_ADDR_EXP 64
23201: PUSH
23202: LD_EXP 64
23206: PUSH
23207: LD_EXP 65
23211: ADD
23212: ST_TO_ADDR
// end ;
23213: LD_VAR 0 1
23217: RET
// export function StartAm1Base ; var i , Un , Uns ; begin
23218: LD_INT 0
23220: PPUSH
23221: PPUSH
23222: PPUSH
23223: PPUSH
// Remaining_Named = ( Remaining_Powells diff JMM_Helpers ) isect Named_americans ;
23224: LD_ADDR_EXP 63
23228: PUSH
23229: LD_EXP 64
23233: PUSH
23234: LD_EXP 67
23238: DIFF
23239: PUSH
23240: LD_EXP 62
23244: ISECT
23245: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Named_americans ;
23246: LD_ADDR_EXP 64
23250: PUSH
23251: LD_EXP 64
23255: PUSH
23256: LD_EXP 62
23260: DIFF
23261: ST_TO_ADDR
// Carriers = [ ] ;
23262: LD_ADDR_EXP 65
23266: PUSH
23267: EMPTY
23268: ST_TO_ADDR
// for i = 1 to 3 do
23269: LD_ADDR_VAR 0 2
23273: PUSH
23274: DOUBLE
23275: LD_INT 1
23277: DEC
23278: ST_TO_ADDR
23279: LD_INT 3
23281: PUSH
23282: FOR_TO
23283: IFFALSE 23327
// begin Carriers = Carriers ^ Remaining_Powells [ 1 ] ;
23285: LD_ADDR_EXP 65
23289: PUSH
23290: LD_EXP 65
23294: PUSH
23295: LD_EXP 64
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: ADD
23304: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Remaining_Powells [ 1 ] ;
23305: LD_ADDR_EXP 64
23309: PUSH
23310: LD_EXP 64
23314: PUSH
23315: LD_EXP 64
23319: PUSH
23320: LD_INT 1
23322: ARRAY
23323: DIFF
23324: ST_TO_ADDR
// end ;
23325: GO 23282
23327: POP
23328: POP
// RaiseSailEvent ( Send_material ) ;
23329: LD_EXP 165
23333: PPUSH
23334: CALL_OW 427
// while UnitFilter ( Carriers , [ f_not , [ f_class , class_engineer ] ] ) do
23338: LD_EXP 65
23342: PPUSH
23343: LD_INT 3
23345: PUSH
23346: LD_INT 25
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PPUSH
23360: CALL_OW 72
23364: IFFALSE 23375
// Wait ( 0 0$1 ) ;
23366: LD_INT 35
23368: PPUSH
23369: CALL_OW 67
23373: GO 23338
// i = 0 ;
23375: LD_ADDR_VAR 0 2
23379: PUSH
23380: LD_INT 0
23382: ST_TO_ADDR
// Uns = Remaining_Powells ;
23383: LD_ADDR_VAR 0 4
23387: PUSH
23388: LD_EXP 64
23392: ST_TO_ADDR
// repeat i = i + 1 ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_VAR 0 2
23402: PUSH
23403: LD_INT 1
23405: PLUS
23406: ST_TO_ADDR
// case i of 1 :
23407: LD_VAR 0 2
23411: PUSH
23412: LD_INT 1
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23420
23418: GO 23493
23420: POP
// begin Un = FindMaxSkill ( Uns , skill_combat ) ;
23421: LD_ADDR_VAR 0 3
23425: PUSH
23426: LD_VAR 0 4
23430: PPUSH
23431: LD_INT 1
23433: PPUSH
23434: CALL_OW 433
23438: ST_TO_ADDR
// Uns = Uns diff Un ;
23439: LD_ADDR_VAR 0 4
23443: PUSH
23444: LD_VAR 0 4
23448: PUSH
23449: LD_VAR 0 3
23453: DIFF
23454: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23455: LD_VAR 0 3
23459: PPUSH
23460: LD_INT 92
23462: PPUSH
23463: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23467: LD_VAR 0 3
23471: PPUSH
23472: LD_INT 1
23474: PPUSH
23475: CALL_OW 183
// AddComEnterUnit ( Un , AmB1 ) ;
23479: LD_VAR 0 3
23483: PPUSH
23484: LD_INT 89
23486: PPUSH
23487: CALL_OW 180
// end ; 2 :
23491: GO 23890
23493: LD_INT 2
23495: DOUBLE
23496: EQUAL
23497: IFTRUE 23501
23499: GO 23574
23501: POP
// begin Un = FindMaxSkill ( Uns , skill_combat ) ;
23502: LD_ADDR_VAR 0 3
23506: PUSH
23507: LD_VAR 0 4
23511: PPUSH
23512: LD_INT 1
23514: PPUSH
23515: CALL_OW 433
23519: ST_TO_ADDR
// Uns = Uns diff Un ;
23520: LD_ADDR_VAR 0 4
23524: PUSH
23525: LD_VAR 0 4
23529: PUSH
23530: LD_VAR 0 3
23534: DIFF
23535: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23536: LD_VAR 0 3
23540: PPUSH
23541: LD_INT 92
23543: PPUSH
23544: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23548: LD_VAR 0 3
23552: PPUSH
23553: LD_INT 1
23555: PPUSH
23556: CALL_OW 183
// AddComEnterUnit ( Un , AmB2 ) ;
23560: LD_VAR 0 3
23564: PPUSH
23565: LD_INT 90
23567: PPUSH
23568: CALL_OW 180
// end ; 3 :
23572: GO 23890
23574: LD_INT 3
23576: DOUBLE
23577: EQUAL
23578: IFTRUE 23582
23580: GO 23676
23582: POP
// begin Un = FindMinSkill ( Uns , skill_mechanical ) ;
23583: LD_ADDR_VAR 0 3
23587: PUSH
23588: LD_VAR 0 4
23592: PPUSH
23593: LD_INT 3
23595: PPUSH
23596: CALL_OW 443
23600: ST_TO_ADDR
// The_original_mechanical_Skill = GetSkill ( Un , skill_mechanical ) ;
23601: LD_ADDR_LOC 13
23605: PUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: LD_INT 3
23613: PPUSH
23614: CALL_OW 259
23618: ST_TO_ADDR
// SetSkill ( Un , skill_mechanical , 5 ) ;
23619: LD_VAR 0 3
23623: PPUSH
23624: LD_INT 3
23626: PPUSH
23627: LD_INT 5
23629: PPUSH
23630: CALL_OW 237
// Uns = Uns diff Un ;
23634: LD_ADDR_VAR 0 4
23638: PUSH
23639: LD_VAR 0 4
23643: PUSH
23644: LD_VAR 0 3
23648: DIFF
23649: ST_TO_ADDR
// ComEnterUnit ( Un , AmFact ) ;
23650: LD_VAR 0 3
23654: PPUSH
23655: LD_INT 85
23657: PPUSH
23658: CALL_OW 120
// AddComChangeProfession ( Un , class_mechanic ) ;
23662: LD_VAR 0 3
23666: PPUSH
23667: LD_INT 3
23669: PPUSH
23670: CALL_OW 183
// end ; 4 :
23674: GO 23890
23676: LD_INT 4
23678: DOUBLE
23679: EQUAL
23680: IFTRUE 23684
23682: GO 23755
23684: POP
// begin Un = FindMinSkill ( Uns , skill_scientistic ) ;
23685: LD_ADDR_VAR 0 3
23689: PUSH
23690: LD_VAR 0 4
23694: PPUSH
23695: LD_INT 4
23697: PPUSH
23698: CALL_OW 443
23702: ST_TO_ADDR
// Uns = Uns diff Un ;
23703: LD_ADDR_VAR 0 4
23707: PUSH
23708: LD_VAR 0 4
23712: PUSH
23713: LD_VAR 0 3
23717: DIFF
23718: ST_TO_ADDR
// ComEnterUnit ( Un , AmLab ) ;
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 91
23726: PPUSH
23727: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
23731: LD_VAR 0 3
23735: PPUSH
23736: LD_INT 4
23738: PPUSH
23739: CALL_OW 183
// Developer = Un ;
23743: LD_ADDR_LOC 10
23747: PUSH
23748: LD_VAR 0 3
23752: ST_TO_ADDR
// end ; else
23753: GO 23890
23755: POP
// begin if ( i mod 2 = 1 ) and ( i > 2 ) then
23756: LD_VAR 0 2
23760: PUSH
23761: LD_INT 2
23763: MOD
23764: PUSH
23765: LD_INT 1
23767: EQUAL
23768: PUSH
23769: LD_VAR 0 2
23773: PUSH
23774: LD_INT 2
23776: GREATER
23777: AND
23778: IFFALSE 23836
// begin Un = Uns [ 1 ] ;
23780: LD_ADDR_VAR 0 3
23784: PUSH
23785: LD_VAR 0 4
23789: PUSH
23790: LD_INT 1
23792: ARRAY
23793: ST_TO_ADDR
// Uns = Uns diff Un ;
23794: LD_ADDR_VAR 0 4
23798: PUSH
23799: LD_VAR 0 4
23803: PUSH
23804: LD_VAR 0 3
23808: DIFF
23809: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23810: LD_VAR 0 3
23814: PPUSH
23815: LD_INT 92
23817: PPUSH
23818: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23822: LD_VAR 0 3
23826: PPUSH
23827: LD_INT 1
23829: PPUSH
23830: CALL_OW 183
// end else
23834: GO 23890
// begin Un = Uns [ 1 ] ;
23836: LD_ADDR_VAR 0 3
23840: PUSH
23841: LD_VAR 0 4
23845: PUSH
23846: LD_INT 1
23848: ARRAY
23849: ST_TO_ADDR
// Uns = Uns diff Un ;
23850: LD_ADDR_VAR 0 4
23854: PUSH
23855: LD_VAR 0 4
23859: PUSH
23860: LD_VAR 0 3
23864: DIFF
23865: ST_TO_ADDR
// ComEnterUnit ( Un , AmDep ) ;
23866: LD_VAR 0 3
23870: PPUSH
23871: LD_INT 84
23873: PPUSH
23874: CALL_OW 120
// AddComChangeProfession ( Un , class_engineer ) ;
23878: LD_VAR 0 3
23882: PPUSH
23883: LD_INT 2
23885: PPUSH
23886: CALL_OW 183
// end ; end ; end ; until Uns = 0 ;
23890: LD_VAR 0 4
23894: PUSH
23895: LD_INT 0
23897: EQUAL
23898: IFFALSE 23393
// ComResearch ( AmLab , tech_Tech1 ) ;
23900: LD_INT 91
23902: PPUSH
23903: LD_INT 48
23905: PPUSH
23906: CALL_OW 124
// AddComResearch ( AmLab , tech_Tech2 ) ;
23910: LD_INT 91
23912: PPUSH
23913: LD_INT 49
23915: PPUSH
23916: CALL_OW 184
// AddComResearch ( AmLab , tech_Tech3 ) ;
23920: LD_INT 91
23922: PPUSH
23923: LD_INT 50
23925: PPUSH
23926: CALL_OW 184
// AddComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
23930: LD_INT 85
23932: PPUSH
23933: LD_INT 3
23935: PPUSH
23936: LD_INT 2
23938: PPUSH
23939: LD_INT 1
23941: PPUSH
23942: LD_INT 3
23944: PPUSH
23945: CALL_OW 185
// if Remaining_Named <> 0 then
23949: LD_EXP 63
23953: PUSH
23954: LD_INT 0
23956: NONEQUAL
23957: IFFALSE 24241
// begin ComEnterUnit ( Remaining_Named [ 1 ] , AmLab ) ;
23959: LD_EXP 63
23963: PUSH
23964: LD_INT 1
23966: ARRAY
23967: PPUSH
23968: LD_INT 91
23970: PPUSH
23971: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ 1 ] , class_scientistic ) ;
23975: LD_EXP 63
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: LD_INT 4
23986: PPUSH
23987: CALL_OW 183
// while ( GetClass ( Carriers [ 1 ] ) <> class_engineer or GetClass ( Carriers [ 2 ] ) <> class_engineer or GetClass ( Carriers [ 3 ] ) <> class_engineer ) do
23991: LD_EXP 65
23995: PUSH
23996: LD_INT 1
23998: ARRAY
23999: PPUSH
24000: CALL_OW 257
24004: PUSH
24005: LD_INT 2
24007: NONEQUAL
24008: PUSH
24009: LD_EXP 65
24013: PUSH
24014: LD_INT 2
24016: ARRAY
24017: PPUSH
24018: CALL_OW 257
24022: PUSH
24023: LD_INT 2
24025: NONEQUAL
24026: OR
24027: PUSH
24028: LD_EXP 65
24032: PUSH
24033: LD_INT 3
24035: ARRAY
24036: PPUSH
24037: CALL_OW 257
24041: PUSH
24042: LD_INT 2
24044: NONEQUAL
24045: OR
24046: IFFALSE 24057
// Wait ( 0 0$1 ) ;
24048: LD_INT 35
24050: PPUSH
24051: CALL_OW 67
24055: GO 23991
// if Remaining_Named > 7 then
24057: LD_EXP 63
24061: PUSH
24062: LD_INT 7
24064: GREATER
24065: IFFALSE 24183
// begin for i = 2 to 7 do
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: DOUBLE
24073: LD_INT 2
24075: DEC
24076: ST_TO_ADDR
24077: LD_INT 7
24079: PUSH
24080: FOR_TO
24081: IFFALSE 24121
// begin ComEnterUnit ( Remaining_Named [ i ] , AmDep ) ;
24083: LD_EXP 63
24087: PUSH
24088: LD_VAR 0 2
24092: ARRAY
24093: PPUSH
24094: LD_INT 84
24096: PPUSH
24097: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_engineer ) ;
24101: LD_EXP 63
24105: PUSH
24106: LD_VAR 0 2
24110: ARRAY
24111: PPUSH
24112: LD_INT 2
24114: PPUSH
24115: CALL_OW 183
// end ;
24119: GO 24080
24121: POP
24122: POP
// for i = 8 to Remaining_Named do
24123: LD_ADDR_VAR 0 2
24127: PUSH
24128: DOUBLE
24129: LD_INT 8
24131: DEC
24132: ST_TO_ADDR
24133: LD_EXP 63
24137: PUSH
24138: FOR_TO
24139: IFFALSE 24179
// begin ComEnterUnit ( Remaining_Named [ i ] , AmArm ) ;
24141: LD_EXP 63
24145: PUSH
24146: LD_VAR 0 2
24150: ARRAY
24151: PPUSH
24152: LD_INT 92
24154: PPUSH
24155: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_soldier ) ;
24159: LD_EXP 63
24163: PUSH
24164: LD_VAR 0 2
24168: ARRAY
24169: PPUSH
24170: LD_INT 1
24172: PPUSH
24173: CALL_OW 183
// end ;
24177: GO 24138
24179: POP
24180: POP
// end else
24181: GO 24241
// for i = 2 to Remaining_Named do
24183: LD_ADDR_VAR 0 2
24187: PUSH
24188: DOUBLE
24189: LD_INT 2
24191: DEC
24192: ST_TO_ADDR
24193: LD_EXP 63
24197: PUSH
24198: FOR_TO
24199: IFFALSE 24239
// begin ComEnterUnit ( Remaining_Named [ i ] , AmDep ) ;
24201: LD_EXP 63
24205: PUSH
24206: LD_VAR 0 2
24210: ARRAY
24211: PPUSH
24212: LD_INT 84
24214: PPUSH
24215: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_engineer ) ;
24219: LD_EXP 63
24223: PUSH
24224: LD_VAR 0 2
24228: ARRAY
24229: PPUSH
24230: LD_INT 2
24232: PPUSH
24233: CALL_OW 183
// end ;
24237: GO 24198
24239: POP
24240: POP
// end ; end ;
24241: LD_VAR 0 1
24245: RET
// export function Am1VehicleConstructed ( veh ) ; var hex ; begin
24246: LD_INT 0
24248: PPUSH
24249: PPUSH
// driver = UnitsInside ( veh ) [ 1 ] ;
24250: LD_ADDR_LOC 9
24254: PUSH
24255: LD_VAR 0 1
24259: PPUSH
24260: CALL_OW 313
24264: PUSH
24265: LD_INT 1
24267: ARRAY
24268: ST_TO_ADDR
// Am1_vehicles = Am1_vehicles ^ veh ;
24269: LD_ADDR_EXP 59
24273: PUSH
24274: LD_EXP 59
24278: PUSH
24279: LD_VAR 0 1
24283: ADD
24284: ST_TO_ADDR
// if Am1_vehicles < 4 then
24285: LD_EXP 59
24289: PUSH
24290: LD_INT 4
24292: LESS
24293: IFFALSE 24416
// begin hex = RandHexArea ( Am1_parking , true ) ;
24295: LD_ADDR_VAR 0 3
24299: PUSH
24300: LD_INT 21
24302: PPUSH
24303: LD_INT 1
24305: PPUSH
24306: CALL_OW 16
24310: ST_TO_ADDR
// ComMoveXY ( driver , hex [ 1 ] , hex [ 2 ] ) ;
24311: LD_LOC 9
24315: PPUSH
24316: LD_VAR 0 3
24320: PUSH
24321: LD_INT 1
24323: ARRAY
24324: PPUSH
24325: LD_VAR 0 3
24329: PUSH
24330: LD_INT 2
24332: ARRAY
24333: PPUSH
24334: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24338: LD_LOC 9
24342: PPUSH
24343: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24347: LD_LOC 9
24351: PPUSH
24352: LD_INT 85
24354: PPUSH
24355: CALL_OW 180
// if Powell_Attack_Counter in [ 1 , 3 ] then
24359: LD_EXP 193
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 3
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: IN
24374: IFFALSE 24414
// ComConstruct ( Amfact , us_medium_tracked , engine_solar , control_manual , [ us_light_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ) ;
24376: LD_INT 85
24378: PPUSH
24379: LD_INT 3
24381: PPUSH
24382: LD_INT 2
24384: PPUSH
24385: LD_INT 1
24387: PPUSH
24388: LD_INT 3
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: PPUSH
24401: LD_INT 2
24403: PPUSH
24404: CALL_OW 12
24408: ARRAY
24409: PPUSH
24410: CALL_OW 125
// end else
24414: GO 24760
// if Powell_Attack_Counter = 1 then
24416: LD_EXP 193
24420: PUSH
24421: LD_INT 1
24423: EQUAL
24424: IFFALSE 24554
// begin Powell_Attack_Counter = 2 ;
24426: LD_ADDR_EXP 193
24430: PUSH
24431: LD_INT 2
24433: ST_TO_ADDR
// ComMoveXY ( driver , 52 , 64 ) ;
24434: LD_LOC 9
24438: PPUSH
24439: LD_INT 52
24441: PPUSH
24442: LD_INT 64
24444: PPUSH
24445: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24449: LD_LOC 9
24453: PPUSH
24454: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24458: LD_LOC 9
24462: PPUSH
24463: LD_INT 85
24465: PPUSH
24466: CALL_OW 180
// Wait ( 1 ) ;
24470: LD_INT 1
24472: PPUSH
24473: CALL_OW 67
// WaitTask ( driver , 1 ) ;
24477: LD_LOC 9
24481: PPUSH
24482: LD_INT 1
24484: PPUSH
24485: CALL 17876 0 2
// Remaining_Powells = Remaining_Powells diff driver ;
24489: LD_ADDR_EXP 64
24493: PUSH
24494: LD_EXP 64
24498: PUSH
24499: LD_LOC 9
24503: DIFF
24504: ST_TO_ADDR
// FirstPowellsAttack ;
24505: CALL 24835 0 0
// Powell_Attack_Counter = 3 ;
24509: LD_ADDR_EXP 193
24513: PUSH
24514: LD_INT 3
24516: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells ^ driver ;
24517: LD_ADDR_EXP 64
24521: PUSH
24522: LD_EXP 64
24526: PUSH
24527: LD_LOC 9
24531: ADD
24532: ST_TO_ADDR
// ComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
24533: LD_INT 85
24535: PPUSH
24536: LD_INT 3
24538: PPUSH
24539: LD_INT 2
24541: PPUSH
24542: LD_INT 1
24544: PPUSH
24545: LD_INT 3
24547: PPUSH
24548: CALL_OW 125
// end else
24552: GO 24760
// if Powell_Attack_Counter = 3 then
24554: LD_EXP 193
24558: PUSH
24559: LD_INT 3
24561: EQUAL
24562: IFFALSE 24657
// begin Powell_Attack_Counter = 4 ;
24564: LD_ADDR_EXP 193
24568: PUSH
24569: LD_INT 4
24571: ST_TO_ADDR
// ComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
24572: LD_INT 85
24574: PPUSH
24575: LD_INT 3
24577: PPUSH
24578: LD_INT 2
24580: PPUSH
24581: LD_INT 1
24583: PPUSH
24584: LD_INT 3
24586: PPUSH
24587: CALL_OW 125
// hex = RandHexArea ( Am1_parking , true ) ;
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_INT 21
24598: PPUSH
24599: LD_INT 1
24601: PPUSH
24602: CALL_OW 16
24606: ST_TO_ADDR
// ComMoveXY ( driver , hex [ 1 ] , hex [ 2 ] ) ;
24607: LD_LOC 9
24611: PPUSH
24612: LD_VAR 0 3
24616: PUSH
24617: LD_INT 1
24619: ARRAY
24620: PPUSH
24621: LD_VAR 0 3
24625: PUSH
24626: LD_INT 2
24628: ARRAY
24629: PPUSH
24630: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24634: LD_LOC 9
24638: PPUSH
24639: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24643: LD_LOC 9
24647: PPUSH
24648: LD_INT 85
24650: PPUSH
24651: CALL_OW 180
// end else
24655: GO 24760
// if Powell_Attack_Counter = 4 then
24657: LD_EXP 193
24661: PUSH
24662: LD_INT 4
24664: EQUAL
24665: IFFALSE 24760
// begin Powell_Attack_Counter = 5 ;
24667: LD_ADDR_EXP 193
24671: PUSH
24672: LD_INT 5
24674: ST_TO_ADDR
// Am1_vehicles = Am1_vehicles diff veh ;
24675: LD_ADDR_EXP 59
24679: PUSH
24680: LD_EXP 59
24684: PUSH
24685: LD_VAR 0 1
24689: DIFF
24690: ST_TO_ADDR
// Powell_vehicle = veh ;
24691: LD_ADDR_EXP 192
24695: PUSH
24696: LD_VAR 0 1
24700: ST_TO_ADDR
// ComMoveXY ( driver , 52 , 64 ) ;
24701: LD_LOC 9
24705: PPUSH
24706: LD_INT 52
24708: PPUSH
24709: LD_INT 64
24711: PPUSH
24712: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24716: LD_LOC 9
24720: PPUSH
24721: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24725: LD_LOC 9
24729: PPUSH
24730: LD_INT 85
24732: PPUSH
24733: CALL_OW 180
// Wait ( 1 ) ;
24737: LD_INT 1
24739: PPUSH
24740: CALL_OW 67
// WaitTask ( driver , 1 ) ;
24744: LD_LOC 9
24748: PPUSH
24749: LD_INT 1
24751: PPUSH
24752: CALL 17876 0 2
// SecondPowellsAttack ;
24756: CALL 25809 0 0
// end ; end ;
24760: LD_VAR 0 2
24764: RET
// export function RetreatReport ; begin
24765: LD_INT 0
24767: PPUSH
// Say ( Retreat_Boy , D4a-Sol1-1 ) ;
24768: LD_LOC 8
24772: PPUSH
24773: LD_STRING D4a-Sol1-1
24775: PPUSH
24776: CALL_OW 88
// Wait ( 0 0$4 ) ;
24780: LD_INT 140
24782: PPUSH
24783: CALL_OW 67
// Say ( Powell , D4a-Pow-1 ) ;
24787: LD_EXP 2
24791: PPUSH
24792: LD_STRING D4a-Pow-1
24794: PPUSH
24795: CALL_OW 88
// Wait ( 0 0$2 ) ;
24799: LD_INT 70
24801: PPUSH
24802: CALL_OW 67
// Say ( Retreat_Boy , D4a-Sol1-2 ) ;
24806: LD_LOC 8
24810: PPUSH
24811: LD_STRING D4a-Sol1-2
24813: PPUSH
24814: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
24818: LD_EXP 2
24822: PPUSH
24823: LD_STRING D4a-Pow-2
24825: PPUSH
24826: CALL_OW 88
// end ;
24830: LD_VAR 0 1
24834: RET
// export function FirstPowellsAttack ; var i , Un , ret , first_ret , InsideArm ; begin
24835: LD_INT 0
24837: PPUSH
24838: PPUSH
24839: PPUSH
24840: PPUSH
24841: PPUSH
24842: PPUSH
// soldiers = [ ] ;
24843: LD_ADDR_LOC 6
24847: PUSH
24848: EMPTY
24849: ST_TO_ADDR
// ret = [ 0 , 0 , 0 , 0 ] ;
24850: LD_ADDR_VAR 0 4
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: ST_TO_ADDR
// first_ret = true ;
24873: LD_ADDR_VAR 0 5
24877: PUSH
24878: LD_INT 1
24880: ST_TO_ADDR
// InsideArm = UnitsInside ( AmArm ) ;
24881: LD_ADDR_VAR 0 6
24885: PUSH
24886: LD_INT 92
24888: PPUSH
24889: CALL_OW 313
24893: ST_TO_ADDR
// ComExitBuilding ( InsideArm ) ;
24894: LD_VAR 0 6
24898: PPUSH
24899: CALL_OW 122
// ComMoveXY ( InsideArm , 55 , 69 ) ;
24903: LD_VAR 0 6
24907: PPUSH
24908: LD_INT 55
24910: PPUSH
24911: LD_INT 69
24913: PPUSH
24914: CALL_OW 111
// for i = 1 to 4 do
24918: LD_ADDR_VAR 0 2
24922: PUSH
24923: DOUBLE
24924: LD_INT 1
24926: DEC
24927: ST_TO_ADDR
24928: LD_INT 4
24930: PUSH
24931: FOR_TO
24932: IFFALSE 25108
// begin Un = 0 ;
24934: LD_ADDR_VAR 0 3
24938: PUSH
24939: LD_INT 0
24941: ST_TO_ADDR
// Un = FindMinSumSkill ( Remaining_Powells diff [ driver , developer ] , sex_male ) ;
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_EXP 64
24951: PUSH
24952: LD_LOC 9
24956: PUSH
24957: LD_LOC 10
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: DIFF
24966: PPUSH
24967: LD_INT 1
24969: PPUSH
24970: CALL 18304 0 2
24974: ST_TO_ADDR
// if Un = 0 then
24975: LD_VAR 0 3
24979: PUSH
24980: LD_INT 0
24982: EQUAL
24983: IFFALSE 25003
// Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
24985: LD_ADDR_VAR 0 3
24989: PUSH
24990: LD_EXP 64
24994: PPUSH
24995: LD_INT 0
24997: PPUSH
24998: CALL 18304 0 2
25002: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
25003: LD_ADDR_EXP 64
25007: PUSH
25008: LD_EXP 64
25012: PUSH
25013: LD_VAR 0 3
25017: DIFF
25018: ST_TO_ADDR
// soldiers = soldiers ^ Un ;
25019: LD_ADDR_LOC 6
25023: PUSH
25024: LD_LOC 6
25028: PUSH
25029: LD_VAR 0 3
25033: ADD
25034: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
25035: LD_VAR 0 3
25039: PPUSH
25040: CALL_OW 257
25044: PUSH
25045: LD_INT 1
25047: NONEQUAL
25048: IFFALSE 25091
// begin ComEnterUnit ( Un , AmArm ) ;
25050: LD_VAR 0 3
25054: PPUSH
25055: LD_INT 92
25057: PPUSH
25058: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
25062: LD_VAR 0 3
25066: PPUSH
25067: LD_INT 1
25069: PPUSH
25070: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
25074: LD_VAR 0 3
25078: PPUSH
25079: LD_INT 45
25081: PPUSH
25082: LD_INT 64
25084: PPUSH
25085: CALL_OW 171
// end else
25089: GO 25106
// ComMoveXY ( Un , 45 , 64 ) ;
25091: LD_VAR 0 3
25095: PPUSH
25096: LD_INT 45
25098: PPUSH
25099: LD_INT 64
25101: PPUSH
25102: CALL_OW 111
// end ;
25106: GO 24931
25108: POP
25109: POP
// WaitTask ( soldiers , 1 ) ;
25110: LD_LOC 6
25114: PPUSH
25115: LD_INT 1
25117: PPUSH
25118: CALL 17876 0 2
// ComEnterUnit ( InsideArm diff soldiers , AmArm ) ;
25122: LD_VAR 0 6
25126: PUSH
25127: LD_LOC 6
25131: DIFF
25132: PPUSH
25133: LD_INT 92
25135: PPUSH
25136: CALL_OW 120
// if not ( Debug_Constant ) then
25140: LD_EXP 195
25144: NOT
25145: IFFALSE 25166
// begin while tick < 12 12$0 do
25147: LD_OWVAR 1
25151: PUSH
25152: LD_INT 25200
25154: LESS
25155: IFFALSE 25166
// Wait ( 0 0$1 ) ;
25157: LD_INT 35
25159: PPUSH
25160: CALL_OW 67
25164: GO 25147
// end ; Say ( Powell , D4-Pow-1 ) ;
25166: LD_EXP 2
25170: PPUSH
25171: LD_STRING D4-Pow-1
25173: PPUSH
25174: CALL_OW 88
// Say ( soldiers [ 1 ] , D4-Sol1-1 ) ;
25178: LD_LOC 6
25182: PUSH
25183: LD_INT 1
25185: ARRAY
25186: PPUSH
25187: LD_STRING D4-Sol1-1
25189: PPUSH
25190: CALL_OW 88
// Say ( Powell , D4-Pow-2 ) ;
25194: LD_EXP 2
25198: PPUSH
25199: LD_STRING D4-Pow-2
25201: PPUSH
25202: CALL_OW 88
// for i = 1 to 4 do
25206: LD_ADDR_VAR 0 2
25210: PUSH
25211: DOUBLE
25212: LD_INT 1
25214: DEC
25215: ST_TO_ADDR
25216: LD_INT 4
25218: PUSH
25219: FOR_TO
25220: IFFALSE 25271
// begin ComEnterUnit ( soldiers [ i ] , Am1_vehicles [ i ] ) ;
25222: LD_LOC 6
25226: PUSH
25227: LD_VAR 0 2
25231: ARRAY
25232: PPUSH
25233: LD_EXP 59
25237: PUSH
25238: LD_VAR 0 2
25242: ARRAY
25243: PPUSH
25244: CALL_OW 120
// AddComMoveXY ( soldiers [ i ] , 66 , 61 ) ;
25248: LD_LOC 6
25252: PUSH
25253: LD_VAR 0 2
25257: ARRAY
25258: PPUSH
25259: LD_INT 66
25261: PPUSH
25262: LD_INT 61
25264: PPUSH
25265: CALL_OW 171
// end ;
25269: GO 25219
25271: POP
25272: POP
// WaitPos ( 66 , 61 , 6 , Am1_vehicles , 1 ) ;
25273: LD_INT 66
25275: PPUSH
25276: LD_INT 61
25278: PPUSH
25279: LD_INT 6
25281: PPUSH
25282: LD_EXP 59
25286: PPUSH
25287: LD_INT 1
25289: PPUSH
25290: CALL 17974 0 5
// ComAgressiveMove ( Am1_vehicles , 76 , 22 ) ;
25294: LD_EXP 59
25298: PPUSH
25299: LD_INT 76
25301: PPUSH
25302: LD_INT 22
25304: PPUSH
25305: CALL_OW 114
// while not ( IsInArea ( soldiers [ 1 ] , Am_Base ) and IsInArea ( soldiers [ 2 ] , Am_Base ) and IsInArea ( soldiers [ 3 ] , Am_Base ) and IsInArea ( soldiers [ 4 ] , Am_Base ) ) do
25309: LD_LOC 6
25313: PUSH
25314: LD_INT 1
25316: ARRAY
25317: PPUSH
25318: LD_INT 1
25320: PPUSH
25321: CALL_OW 308
25325: PUSH
25326: LD_LOC 6
25330: PUSH
25331: LD_INT 2
25333: ARRAY
25334: PPUSH
25335: LD_INT 1
25337: PPUSH
25338: CALL_OW 308
25342: AND
25343: PUSH
25344: LD_LOC 6
25348: PUSH
25349: LD_INT 3
25351: ARRAY
25352: PPUSH
25353: LD_INT 1
25355: PPUSH
25356: CALL_OW 308
25360: AND
25361: PUSH
25362: LD_LOC 6
25366: PUSH
25367: LD_INT 4
25369: ARRAY
25370: PPUSH
25371: LD_INT 1
25373: PPUSH
25374: CALL_OW 308
25378: AND
25379: NOT
25380: IFFALSE 25580
// begin for i = 1 to 4 do
25382: LD_ADDR_VAR 0 2
25386: PUSH
25387: DOUBLE
25388: LD_INT 1
25390: DEC
25391: ST_TO_ADDR
25392: LD_INT 4
25394: PUSH
25395: FOR_TO
25396: IFFALSE 25569
// begin if not ( IsInUnit ( soldiers [ i ] ) ) and not ( ret [ i ] ) then
25398: LD_LOC 6
25402: PUSH
25403: LD_VAR 0 2
25407: ARRAY
25408: PPUSH
25409: CALL_OW 310
25413: NOT
25414: PUSH
25415: LD_VAR 0 4
25419: PUSH
25420: LD_VAR 0 2
25424: ARRAY
25425: NOT
25426: AND
25427: IFFALSE 25534
// begin if first_ret then
25429: LD_VAR 0 5
25433: IFFALSE 25468
// begin first_ret = false ;
25435: LD_ADDR_VAR 0 5
25439: PUSH
25440: LD_INT 0
25442: ST_TO_ADDR
// Retreat_Boy = soldiers [ i ] ;
25443: LD_ADDR_LOC 8
25447: PUSH
25448: LD_LOC 6
25452: PUSH
25453: LD_VAR 0 2
25457: ARRAY
25458: ST_TO_ADDR
// RaiseSailEvent ( Retreat_Report ) ;
25459: LD_EXP 172
25463: PPUSH
25464: CALL_OW 427
// end ; ret = replace ( ret , i , 1 ) ;
25468: LD_ADDR_VAR 0 4
25472: PUSH
25473: LD_VAR 0 4
25477: PPUSH
25478: LD_VAR 0 2
25482: PPUSH
25483: LD_INT 1
25485: PPUSH
25486: CALL_OW 1
25490: ST_TO_ADDR
// ComMoveXY ( soldiers [ i ] , 51 , 65 ) ;
25491: LD_LOC 6
25495: PUSH
25496: LD_VAR 0 2
25500: ARRAY
25501: PPUSH
25502: LD_INT 51
25504: PPUSH
25505: LD_INT 65
25507: PPUSH
25508: CALL_OW 111
// DoNotAttack ( arabians , soldiers [ i ] ) ;
25512: LD_EXP 180
25516: PPUSH
25517: LD_LOC 6
25521: PUSH
25522: LD_VAR 0 2
25526: ARRAY
25527: PPUSH
25528: CALL_OW 471
// end else
25532: GO 25567
// if ret [ i ] then
25534: LD_VAR 0 4
25538: PUSH
25539: LD_VAR 0 2
25543: ARRAY
25544: IFFALSE 25567
// ComMoveXY ( soldiers [ i ] , 51 , 65 ) ;
25546: LD_LOC 6
25550: PUSH
25551: LD_VAR 0 2
25555: ARRAY
25556: PPUSH
25557: LD_INT 51
25559: PPUSH
25560: LD_INT 65
25562: PPUSH
25563: CALL_OW 111
// end ;
25567: GO 25395
25569: POP
25570: POP
// Wait ( 0 0$0.2 ) ;
25571: LD_INT 7
25573: PPUSH
25574: CALL_OW 67
// end ;
25578: GO 25309
// for Un in soldiers do
25580: LD_ADDR_VAR 0 3
25584: PUSH
25585: LD_LOC 6
25589: PUSH
25590: FOR_IN
25591: IFFALSE 25609
// NormalAttack ( arabians , Un ) ;
25593: LD_EXP 180
25597: PPUSH
25598: LD_VAR 0 3
25602: PPUSH
25603: CALL_OW 472
25607: GO 25590
25609: POP
25610: POP
// if UnitsInside ( AmB1 ) = 0 then
25611: LD_INT 89
25613: PPUSH
25614: CALL_OW 313
25618: PUSH
25619: LD_INT 0
25621: EQUAL
25622: IFFALSE 25680
// begin ComEnterUnit ( soldiers [ 1 ] , AmB1 ) ;
25624: LD_LOC 6
25628: PUSH
25629: LD_INT 1
25631: ARRAY
25632: PPUSH
25633: LD_INT 89
25635: PPUSH
25636: CALL_OW 120
// Remaining_Powells = Remaining_Powells ^ soldiers [ 1 ] ;
25640: LD_ADDR_EXP 64
25644: PUSH
25645: LD_EXP 64
25649: PUSH
25650: LD_LOC 6
25654: PUSH
25655: LD_INT 1
25657: ARRAY
25658: ADD
25659: ST_TO_ADDR
// soldiers = soldiers diff soldiers [ 1 ] ;
25660: LD_ADDR_LOC 6
25664: PUSH
25665: LD_LOC 6
25669: PUSH
25670: LD_LOC 6
25674: PUSH
25675: LD_INT 1
25677: ARRAY
25678: DIFF
25679: ST_TO_ADDR
// end ; if UnitsInside ( AmB2 ) = 0 then
25680: LD_INT 90
25682: PPUSH
25683: CALL_OW 313
25687: PUSH
25688: LD_INT 0
25690: EQUAL
25691: IFFALSE 25749
// begin ComEnterUnit ( soldiers [ 2 ] , AmB2 ) ;
25693: LD_LOC 6
25697: PUSH
25698: LD_INT 2
25700: ARRAY
25701: PPUSH
25702: LD_INT 90
25704: PPUSH
25705: CALL_OW 120
// Remaining_Powells = Remaining_Powells ^ soldiers [ 2 ] ;
25709: LD_ADDR_EXP 64
25713: PUSH
25714: LD_EXP 64
25718: PUSH
25719: LD_LOC 6
25723: PUSH
25724: LD_INT 2
25726: ARRAY
25727: ADD
25728: ST_TO_ADDR
// soldiers = soldiers diff soldiers [ 2 ] ;
25729: LD_ADDR_LOC 6
25733: PUSH
25734: LD_LOC 6
25738: PUSH
25739: LD_LOC 6
25743: PUSH
25744: LD_INT 2
25746: ARRAY
25747: DIFF
25748: ST_TO_ADDR
// end ; for Un in soldiers do
25749: LD_ADDR_VAR 0 3
25753: PUSH
25754: LD_LOC 6
25758: PUSH
25759: FOR_IN
25760: IFFALSE 25792
// begin Remaining_Powells = Remaining_Powells ^ Un ;
25762: LD_ADDR_EXP 64
25766: PUSH
25767: LD_EXP 64
25771: PUSH
25772: LD_VAR 0 3
25776: ADD
25777: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
25778: LD_VAR 0 3
25782: PPUSH
25783: LD_INT 92
25785: PPUSH
25786: CALL_OW 120
// end ;
25790: GO 25759
25792: POP
25793: POP
// Am1_vehicles = Captured_vehicles ;
25794: LD_ADDR_EXP 59
25798: PUSH
25799: LD_EXP 60
25803: ST_TO_ADDR
// end ;
25804: LD_VAR 0 1
25808: RET
// export function SecondPowellsAttack ; var i , Un , Un1 , Initial_lives , InsideArm , Hex , JMM_Labs ; begin
25809: LD_INT 0
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
// soldiers = [ ] ;
25819: LD_ADDR_LOC 6
25823: PUSH
25824: EMPTY
25825: ST_TO_ADDR
// soldiers1 = [ ] ;
25826: LD_ADDR_LOC 7
25830: PUSH
25831: EMPTY
25832: ST_TO_ADDR
// if not ( Debug_Constant ) then
25833: LD_EXP 195
25837: NOT
25838: IFFALSE 26036
// begin while tick < 20 20$0 do
25840: LD_OWVAR 1
25844: PUSH
25845: LD_INT 42000
25847: LESS
25848: IFFALSE 25859
// Wait ( 0 0$1 ) ;
25850: LD_INT 35
25852: PPUSH
25853: CALL_OW 67
25857: GO 25840
// disable ( R1_attack ) ;
25859: LD_EXP 140
25863: DISABLE_MARKED
// R1_Attack_Continues = false ;
25864: LD_ADDR_EXP 196
25868: PUSH
25869: LD_INT 0
25871: ST_TO_ADDR
// while tick < 23 23$30 do
25872: LD_OWVAR 1
25876: PUSH
25877: LD_INT 49350
25879: LESS
25880: IFFALSE 25891
// Wait ( 0 0$1 ) ;
25882: LD_INT 35
25884: PPUSH
25885: CALL_OW 67
25889: GO 25872
// R1_Attacking_Units = GetMcUnits ( Russian1_att_id ) ;
25891: LD_ADDR_LOC 11
25895: PUSH
25896: LD_EXP 238
25900: PPUSH
25901: CALL_OW 389
25905: ST_TO_ADDR
// RemoveMcUnits ( Russian1_att_id , R1_Attacking_Units ) ;
25906: LD_EXP 238
25910: PPUSH
25911: LD_LOC 11
25915: PPUSH
25916: CALL_OW 391
// ComMoveXY ( R1_Attacking_Units , 93 , 173 ) ;
25920: LD_LOC 11
25924: PPUSH
25925: LD_INT 93
25927: PPUSH
25928: LD_INT 173
25930: PPUSH
25931: CALL_OW 111
// AddComHold ( R1_Attacking_Units ) ;
25935: LD_LOC 11
25939: PPUSH
25940: CALL_OW 200
// R1_Patroling_Units = GetMcUnits ( Russian1_patr_id ) ;
25944: LD_ADDR_LOC 12
25948: PUSH
25949: LD_EXP 240
25953: PPUSH
25954: CALL_OW 389
25958: ST_TO_ADDR
// RemoveMcUnits ( Russian1_patr_id , R1_Patroling_Units ) ;
25959: LD_EXP 240
25963: PPUSH
25964: LD_LOC 12
25968: PPUSH
25969: CALL_OW 391
// ComMoveXY ( R1_Patroling_Units , 93 , 173 ) ;
25973: LD_LOC 12
25977: PPUSH
25978: LD_INT 93
25980: PPUSH
25981: LD_INT 173
25983: PPUSH
25984: CALL_OW 111
// AddComHold ( R1_Patroling_Units ) ;
25988: LD_LOC 12
25992: PPUSH
25993: CALL_OW 200
// while tick < 24 24$0 do
25997: LD_OWVAR 1
26001: PUSH
26002: LD_INT 50400
26004: LESS
26005: IFFALSE 26016
// Wait ( 0 0$1 ) ;
26007: LD_INT 35
26009: PPUSH
26010: CALL_OW 67
26014: GO 25997
// SetAttitude ( russians1 , americans , att_friend , true ) ;
26016: LD_EXP 179
26020: PPUSH
26021: LD_EXP 176
26025: PPUSH
26026: LD_INT 1
26028: PPUSH
26029: LD_INT 1
26031: PPUSH
26032: CALL_OW 80
// end ; disable ( Not_Ingame_Run_over ) ;
26036: LD_EXP 157
26040: DISABLE_MARKED
// if Remaining_Powells > 8 then
26041: LD_EXP 64
26045: PUSH
26046: LD_INT 8
26048: GREATER
26049: IFFALSE 26104
// begin Remaining_Powells = Remaining_Powells diff Driver ;
26051: LD_ADDR_EXP 64
26055: PUSH
26056: LD_EXP 64
26060: PUSH
26061: LD_LOC 9
26065: DIFF
26066: ST_TO_ADDR
// SetSkill ( Driver , skill_mechanical , The_original_mechanical_Skill + GetSkill ( Driver , skill_mechanical ) - 5 ) ;
26067: LD_LOC 9
26071: PPUSH
26072: LD_INT 3
26074: PPUSH
26075: LD_LOC 13
26079: PUSH
26080: LD_LOC 9
26084: PPUSH
26085: LD_INT 3
26087: PPUSH
26088: CALL_OW 259
26092: PLUS
26093: PUSH
26094: LD_INT 5
26096: MINUS
26097: PPUSH
26098: CALL_OW 237
// end else
26102: GO 26112
// Driver = 0 ;
26104: LD_ADDR_LOC 9
26108: PUSH
26109: LD_INT 0
26111: ST_TO_ADDR
// for i = 1 to 4 do
26112: LD_ADDR_VAR 0 2
26116: PUSH
26117: DOUBLE
26118: LD_INT 1
26120: DEC
26121: ST_TO_ADDR
26122: LD_INT 4
26124: PUSH
26125: FOR_TO
26126: IFFALSE 26251
// begin Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
26128: LD_ADDR_VAR 0 3
26132: PUSH
26133: LD_EXP 64
26137: PPUSH
26138: LD_INT 0
26140: PPUSH
26141: CALL 18304 0 2
26145: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
26146: LD_ADDR_EXP 64
26150: PUSH
26151: LD_EXP 64
26155: PUSH
26156: LD_VAR 0 3
26160: DIFF
26161: ST_TO_ADDR
// soldiers = soldiers ^ Un ;
26162: LD_ADDR_LOC 6
26166: PUSH
26167: LD_LOC 6
26171: PUSH
26172: LD_VAR 0 3
26176: ADD
26177: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
26178: LD_VAR 0 3
26182: PPUSH
26183: CALL_OW 257
26187: PUSH
26188: LD_INT 1
26190: NONEQUAL
26191: IFFALSE 26234
// begin ComEnterUnit ( Un , AmArm ) ;
26193: LD_VAR 0 3
26197: PPUSH
26198: LD_INT 92
26200: PPUSH
26201: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26205: LD_VAR 0 3
26209: PPUSH
26210: LD_INT 1
26212: PPUSH
26213: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
26217: LD_VAR 0 3
26221: PPUSH
26222: LD_INT 45
26224: PPUSH
26225: LD_INT 64
26227: PPUSH
26228: CALL_OW 171
// end else
26232: GO 26249
// ComMoveXY ( Un , 45 , 64 ) ;
26234: LD_VAR 0 3
26238: PPUSH
26239: LD_INT 45
26241: PPUSH
26242: LD_INT 64
26244: PPUSH
26245: CALL_OW 111
// end ;
26249: GO 26125
26251: POP
26252: POP
// WaitTask ( soldiers , 1 ) ;
26253: LD_LOC 6
26257: PPUSH
26258: LD_INT 1
26260: PPUSH
26261: CALL 17876 0 2
// for i = 1 to 4 do
26265: LD_ADDR_VAR 0 2
26269: PUSH
26270: DOUBLE
26271: LD_INT 1
26273: DEC
26274: ST_TO_ADDR
26275: LD_INT 4
26277: PUSH
26278: FOR_TO
26279: IFFALSE 26444
// begin if ( ( i = 1 ) or ( i = 2 ) ) then
26281: LD_VAR 0 2
26285: PUSH
26286: LD_INT 1
26288: EQUAL
26289: PUSH
26290: LD_VAR 0 2
26294: PUSH
26295: LD_INT 2
26297: EQUAL
26298: OR
26299: IFFALSE 26321
// Un = FindMinSumSkill ( Remaining_Powells , sex_male ) else
26301: LD_ADDR_VAR 0 3
26305: PUSH
26306: LD_EXP 64
26310: PPUSH
26311: LD_INT 1
26313: PPUSH
26314: CALL 18304 0 2
26318: ST_TO_ADDR
26319: GO 26339
// Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
26321: LD_ADDR_VAR 0 3
26325: PUSH
26326: LD_EXP 64
26330: PPUSH
26331: LD_INT 0
26333: PPUSH
26334: CALL 18304 0 2
26338: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
26339: LD_ADDR_EXP 64
26343: PUSH
26344: LD_EXP 64
26348: PUSH
26349: LD_VAR 0 3
26353: DIFF
26354: ST_TO_ADDR
// soldiers1 = soldiers1 ^ Un ;
26355: LD_ADDR_LOC 7
26359: PUSH
26360: LD_LOC 7
26364: PUSH
26365: LD_VAR 0 3
26369: ADD
26370: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
26371: LD_VAR 0 3
26375: PPUSH
26376: CALL_OW 257
26380: PUSH
26381: LD_INT 1
26383: NONEQUAL
26384: IFFALSE 26427
// begin ComEnterUnit ( Un , AmArm ) ;
26386: LD_VAR 0 3
26390: PPUSH
26391: LD_INT 92
26393: PPUSH
26394: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26398: LD_VAR 0 3
26402: PPUSH
26403: LD_INT 1
26405: PPUSH
26406: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
26410: LD_VAR 0 3
26414: PPUSH
26415: LD_INT 45
26417: PPUSH
26418: LD_INT 64
26420: PPUSH
26421: CALL_OW 171
// end else
26425: GO 26442
// ComMoveXY ( Un , 45 , 64 ) ;
26427: LD_VAR 0 3
26431: PPUSH
26432: LD_INT 45
26434: PPUSH
26435: LD_INT 64
26437: PPUSH
26438: CALL_OW 111
// end ;
26442: GO 26278
26444: POP
26445: POP
// if Driver <> 0 then
26446: LD_LOC 9
26450: PUSH
26451: LD_INT 0
26453: NONEQUAL
26454: IFFALSE 26479
// Remaining_Powells = Insert ( Remaining_Powells , 1 , Driver ) ;
26456: LD_ADDR_EXP 64
26460: PUSH
26461: LD_EXP 64
26465: PPUSH
26466: LD_INT 1
26468: PPUSH
26469: LD_LOC 9
26473: PPUSH
26474: CALL_OW 2
26478: ST_TO_ADDR
// ingame_video = true ;
26479: LD_ADDR_OWVAR 52
26483: PUSH
26484: LD_INT 1
26486: ST_TO_ADDR
// interface_hidden = true ;
26487: LD_ADDR_OWVAR 54
26491: PUSH
26492: LD_INT 1
26494: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_hastask ] ] ) do
26495: LD_ADDR_VAR 0 2
26499: PUSH
26500: LD_INT 22
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 21
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 60
26522: PUSH
26523: EMPTY
26524: LIST
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: PUSH
26536: FOR_IN
26537: IFFALSE 26550
// ComStop ( i ) ;
26539: LD_VAR 0 2
26543: PPUSH
26544: CALL_OW 141
26548: GO 26536
26550: POP
26551: POP
// CenterOnXY ( 48 , 63 ) ;
26552: LD_INT 48
26554: PPUSH
26555: LD_INT 63
26557: PPUSH
26558: CALL_OW 84
// JMM_Labs = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
26562: LD_ADDR_VAR 0 8
26566: PUSH
26567: LD_INT 22
26569: PUSH
26570: LD_EXP 176
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: LD_INT 30
26584: PUSH
26585: LD_INT 6
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 30
26594: PUSH
26595: LD_INT 8
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 30
26604: PUSH
26605: LD_INT 7
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 69
26626: ST_TO_ADDR
// ComExitBuilding ( JMM_Labs ) ;
26627: LD_VAR 0 8
26631: PPUSH
26632: CALL_OW 122
// WaitTask ( soldiers1 , 1 ) ;
26636: LD_LOC 7
26640: PPUSH
26641: LD_INT 1
26643: PPUSH
26644: CALL 17876 0 2
// if UnitsInside ( AmB1 ) = 0 then
26648: LD_INT 89
26650: PPUSH
26651: CALL_OW 313
26655: PUSH
26656: LD_INT 0
26658: EQUAL
26659: IFFALSE 26752
// begin Un = FindMaxSkill ( Remaining_Named ^ Remaining_Powells , skill_combat ) ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_EXP 63
26670: PUSH
26671: LD_EXP 64
26675: ADD
26676: PPUSH
26677: LD_INT 1
26679: PPUSH
26680: CALL_OW 433
26684: ST_TO_ADDR
// if GetClass ( Un ) = class_soldier then
26685: LD_VAR 0 3
26689: PPUSH
26690: CALL_OW 257
26694: PUSH
26695: LD_INT 1
26697: EQUAL
26698: IFFALSE 26714
// ComEnterUnit ( Un , AmB1 ) else
26700: LD_VAR 0 3
26704: PPUSH
26705: LD_INT 89
26707: PPUSH
26708: CALL_OW 120
26712: GO 26750
// begin ComEnterUnit ( Un , AmArm ) ;
26714: LD_VAR 0 3
26718: PPUSH
26719: LD_INT 92
26721: PPUSH
26722: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26726: LD_VAR 0 3
26730: PPUSH
26731: LD_INT 1
26733: PPUSH
26734: CALL_OW 183
// AddComEnterUnit ( Un , AmB1 ) ;
26738: LD_VAR 0 3
26742: PPUSH
26743: LD_INT 89
26745: PPUSH
26746: CALL_OW 180
// end ; end else
26750: GO 26765
// Un = UnitsInside ( AmB1 ) ;
26752: LD_ADDR_VAR 0 3
26756: PUSH
26757: LD_INT 89
26759: PPUSH
26760: CALL_OW 313
26764: ST_TO_ADDR
// if UnitsInside ( AmB2 ) = 0 then
26765: LD_INT 90
26767: PPUSH
26768: CALL_OW 313
26772: PUSH
26773: LD_INT 0
26775: EQUAL
26776: IFFALSE 26875
// begin Un1 = FindMaxSkill ( ( Remaining_Named ^ Remaining_Powells ) diff Un , skill_combat ) ;
26778: LD_ADDR_VAR 0 4
26782: PUSH
26783: LD_EXP 63
26787: PUSH
26788: LD_EXP 64
26792: ADD
26793: PUSH
26794: LD_VAR 0 3
26798: DIFF
26799: PPUSH
26800: LD_INT 1
26802: PPUSH
26803: CALL_OW 433
26807: ST_TO_ADDR
// if GetClass ( Un1 ) = class_soldier then
26808: LD_VAR 0 4
26812: PPUSH
26813: CALL_OW 257
26817: PUSH
26818: LD_INT 1
26820: EQUAL
26821: IFFALSE 26837
// ComEnterUnit ( Un1 , AmB2 ) else
26823: LD_VAR 0 4
26827: PPUSH
26828: LD_INT 90
26830: PPUSH
26831: CALL_OW 120
26835: GO 26873
// begin ComEnterUnit ( Un1 , AmArm ) ;
26837: LD_VAR 0 4
26841: PPUSH
26842: LD_INT 92
26844: PPUSH
26845: CALL_OW 120
// AddComChangeProfession ( Un1 , class_soldier ) ;
26849: LD_VAR 0 4
26853: PPUSH
26854: LD_INT 1
26856: PPUSH
26857: CALL_OW 183
// AddComEnterUnit ( Un1 , AmB2 ) ;
26861: LD_VAR 0 4
26865: PPUSH
26866: LD_INT 90
26868: PPUSH
26869: CALL_OW 180
// end ; end else
26873: GO 26888
// Un1 = UnitsInside ( AmB2 ) ;
26875: LD_ADDR_VAR 0 4
26879: PUSH
26880: LD_INT 90
26882: PPUSH
26883: CALL_OW 313
26887: ST_TO_ADDR
// ComEnterUnit ( Remaining_Powells diff ( Un ^ Un1 ) , AmArm ) ;
26888: LD_EXP 64
26892: PUSH
26893: LD_VAR 0 3
26897: PUSH
26898: LD_VAR 0 4
26902: ADD
26903: DIFF
26904: PPUSH
26905: LD_INT 92
26907: PPUSH
26908: CALL_OW 120
// AddComChangeProfession ( Remaining_Powells diff ( Un ^ Un1 ) , class_soldier ) ;
26912: LD_EXP 64
26916: PUSH
26917: LD_VAR 0 3
26921: PUSH
26922: LD_VAR 0 4
26926: ADD
26927: DIFF
26928: PPUSH
26929: LD_INT 1
26931: PPUSH
26932: CALL_OW 183
// game_speed = 4 ;
26936: LD_ADDR_OWVAR 65
26940: PUSH
26941: LD_INT 4
26943: ST_TO_ADDR
// Say ( Powell , D5-Pow-1 ) ;
26944: LD_EXP 2
26948: PPUSH
26949: LD_STRING D5-Pow-1
26951: PPUSH
26952: CALL_OW 88
// Say ( Soldiers1 [ 1 ] , D5-Sol2-1 ) ;
26956: LD_LOC 7
26960: PUSH
26961: LD_INT 1
26963: ARRAY
26964: PPUSH
26965: LD_STRING D5-Sol2-1
26967: PPUSH
26968: CALL_OW 88
// Say ( Powell , D5-Pow-2 ) ;
26972: LD_EXP 2
26976: PPUSH
26977: LD_STRING D5-Pow-2
26979: PPUSH
26980: CALL_OW 88
// Say ( Soldiers1 [ 2 ] , D5-Sol2-2 ) ;
26984: LD_LOC 7
26988: PUSH
26989: LD_INT 2
26991: ARRAY
26992: PPUSH
26993: LD_STRING D5-Sol2-2
26995: PPUSH
26996: CALL_OW 88
// Say ( Powell , D5-Pow-3 ) ;
27000: LD_EXP 2
27004: PPUSH
27005: LD_STRING D5-Pow-3
27007: PPUSH
27008: CALL_OW 88
// disable ( First_JMM_Task ) ;
27012: LD_EXP 137
27016: DISABLE_MARKED
// EnableVideoExclamations ;
27017: CALL_OW 498
// for i = 1 to 4 do
27021: LD_ADDR_VAR 0 2
27025: PUSH
27026: DOUBLE
27027: LD_INT 1
27029: DEC
27030: ST_TO_ADDR
27031: LD_INT 4
27033: PUSH
27034: FOR_TO
27035: IFFALSE 27086
// begin ComEnterUnit ( soldiers [ i ] , Am1_vehicles [ i ] ) ;
27037: LD_LOC 6
27041: PUSH
27042: LD_VAR 0 2
27046: ARRAY
27047: PPUSH
27048: LD_EXP 59
27052: PUSH
27053: LD_VAR 0 2
27057: ARRAY
27058: PPUSH
27059: CALL_OW 120
// AddComMoveXY ( soldiers [ i ] , 68 , 64 ) ;
27063: LD_LOC 6
27067: PUSH
27068: LD_VAR 0 2
27072: ARRAY
27073: PPUSH
27074: LD_INT 68
27076: PPUSH
27077: LD_INT 64
27079: PPUSH
27080: CALL_OW 171
// end ;
27084: GO 27034
27086: POP
27087: POP
// for i = 1 to 4 do
27088: LD_ADDR_VAR 0 2
27092: PUSH
27093: DOUBLE
27094: LD_INT 1
27096: DEC
27097: ST_TO_ADDR
27098: LD_INT 4
27100: PUSH
27101: FOR_TO
27102: IFFALSE 27127
// begin ComMoveXY ( soldiers1 [ i ] , 68 , 64 ) ;
27104: LD_LOC 7
27108: PUSH
27109: LD_VAR 0 2
27113: ARRAY
27114: PPUSH
27115: LD_INT 68
27117: PPUSH
27118: LD_INT 64
27120: PPUSH
27121: CALL_OW 111
// end ;
27125: GO 27101
27127: POP
27128: POP
// enable ( Center_on_fight ) ;
27129: LD_EXP 143
27133: ENABLE_MARKED
// WaitPos ( 68 , 64 , 8 , Am1_vehicles ^ soldiers1 ^ soldiers , 1 ) ;
27134: LD_INT 68
27136: PPUSH
27137: LD_INT 64
27139: PPUSH
27140: LD_INT 8
27142: PPUSH
27143: LD_EXP 59
27147: PUSH
27148: LD_LOC 7
27152: ADD
27153: PUSH
27154: LD_LOC 6
27158: ADD
27159: PPUSH
27160: LD_INT 1
27162: PPUSH
27163: CALL 17974 0 5
// ComAgressiveMove ( Am1_vehicles ^ soldiers1 ^ soldiers , 76 , 22 ) ;
27167: LD_EXP 59
27171: PUSH
27172: LD_LOC 7
27176: ADD
27177: PUSH
27178: LD_LOC 6
27182: ADD
27183: PPUSH
27184: LD_INT 76
27186: PPUSH
27187: LD_INT 22
27189: PPUSH
27190: CALL_OW 114
// Initial_lives = GetLives ( Am1_vehicles ^ soldiers1 ^ soldiers ) ;
27194: LD_ADDR_VAR 0 5
27198: PUSH
27199: LD_EXP 59
27203: PUSH
27204: LD_LOC 7
27208: ADD
27209: PUSH
27210: LD_LOC 6
27214: ADD
27215: PPUSH
27216: CALL_OW 256
27220: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
27221: LD_INT 35
27223: PPUSH
27224: CALL_OW 67
// until Initial_lives > GetLives ( Am1_vehicles ^ soldiers1 ^ soldiers ) + 1 ;
27228: LD_VAR 0 5
27232: PUSH
27233: LD_EXP 59
27237: PUSH
27238: LD_LOC 7
27242: ADD
27243: PUSH
27244: LD_LOC 6
27248: ADD
27249: PPUSH
27250: CALL_OW 256
27254: PUSH
27255: LD_INT 1
27257: PLUS
27258: GREATER
27259: IFFALSE 27221
// Say ( Powell , D5a-Pow-1 ) ;
27261: LD_EXP 2
27265: PPUSH
27266: LD_STRING D5a-Pow-1
27268: PPUSH
27269: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
27273: LD_EXP 2
27277: PPUSH
27278: LD_STRING D5a-Pow-1a
27280: PPUSH
27281: CALL_OW 88
// Wait ( 0 0$1 ) ;
27285: LD_INT 35
27287: PPUSH
27288: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
27292: LD_EXP 2
27296: PPUSH
27297: LD_STRING D5a-Pow-1b
27299: PPUSH
27300: CALL_OW 88
// Wait ( 0 0$1 ) ;
27304: LD_INT 35
27306: PPUSH
27307: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
27311: LD_EXP 2
27315: PPUSH
27316: LD_STRING D5a-Pow-1c
27318: PPUSH
27319: CALL_OW 88
// Say ( Powell , D5a-Pow-1d ) ;
27323: LD_EXP 2
27327: PPUSH
27328: LD_STRING D5a-Pow-1d
27330: PPUSH
27331: CALL_OW 88
// while ( GetLives ( soldiers ^ soldiers1 ) > 0 ) do
27335: LD_LOC 6
27339: PUSH
27340: LD_LOC 7
27344: ADD
27345: PPUSH
27346: CALL_OW 256
27350: PUSH
27351: LD_INT 0
27353: GREATER
27354: IFFALSE 27365
// Wait ( 0 0$0.5 ) ;
27356: LD_INT 18
27358: PPUSH
27359: CALL_OW 67
27363: GO 27335
// DisableVideoExclamations ;
27365: CALL_OW 499
// disable ( Center_on_fight ) ;
27369: LD_EXP 143
27373: DISABLE_MARKED
// enable ( Great_Ingame_Video ) ;
27374: LD_EXP 139
27378: ENABLE_MARKED
// end ;
27379: LD_VAR 0 1
27383: RET
// every 0 0$1 marked 3 do var Units_Outside , All_A1 , Sold , Arabian1 , Arabian2 , Arabian3 , Arabian_Buildings , Alive , Un , Remaining_named_males , Remaining_named_females , Uns , i , Hex ;
27384: GO 27386
27386: DISABLE
27387: LD_INT 0
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
27394: PPUSH
27395: PPUSH
27396: PPUSH
27397: PPUSH
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
// begin Uns = [ ] ;
27403: LD_ADDR_VAR 0 12
27407: PUSH
27408: EMPTY
27409: ST_TO_ADDR
// Remaining_named_males = UnitFilter ( Remaining_named , [ f_sex , sex_male ] ) ;
27410: LD_ADDR_VAR 0 10
27414: PUSH
27415: LD_EXP 63
27419: PPUSH
27420: LD_INT 26
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PPUSH
27430: CALL_OW 72
27434: ST_TO_ADDR
// Remaining_named_females = UnitFilter ( Remaining_named , [ f_sex , sex_female ] ) ;
27435: LD_ADDR_VAR 0 11
27439: PUSH
27440: LD_EXP 63
27444: PPUSH
27445: LD_INT 26
27447: PUSH
27448: LD_INT 2
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PPUSH
27455: CALL_OW 72
27459: ST_TO_ADDR
// for i = Remaining_named_males + 1 to 3 do
27460: LD_ADDR_VAR 0 13
27464: PUSH
27465: DOUBLE
27466: LD_VAR 0 10
27470: PUSH
27471: LD_INT 1
27473: PLUS
27474: DEC
27475: ST_TO_ADDR
27476: LD_INT 3
27478: PUSH
27479: FOR_TO
27480: IFFALSE 27530
// if ( Remaining_named_females >= ( i - Remaining_named_males ) ) then
27482: LD_VAR 0 11
27486: PUSH
27487: LD_VAR 0 13
27491: PUSH
27492: LD_VAR 0 10
27496: MINUS
27497: GREATEREQUAL
27498: IFFALSE 27528
// Uns = Uns ^ Remaining_named_females [ i - Remaining_named_males ] ;
27500: LD_ADDR_VAR 0 12
27504: PUSH
27505: LD_VAR 0 12
27509: PUSH
27510: LD_VAR 0 11
27514: PUSH
27515: LD_VAR 0 13
27519: PUSH
27520: LD_VAR 0 10
27524: MINUS
27525: ARRAY
27526: ADD
27527: ST_TO_ADDR
27528: GO 27479
27530: POP
27531: POP
// Remaining_named_males = Remaining_named_males ^ Uns ;
27532: LD_ADDR_VAR 0 10
27536: PUSH
27537: LD_VAR 0 10
27541: PUSH
27542: LD_VAR 0 12
27546: ADD
27547: ST_TO_ADDR
// Sold = [ ] ;
27548: LD_ADDR_VAR 0 3
27552: PUSH
27553: EMPTY
27554: ST_TO_ADDR
// for i = 1 to 3 do
27555: LD_ADDR_VAR 0 13
27559: PUSH
27560: DOUBLE
27561: LD_INT 1
27563: DEC
27564: ST_TO_ADDR
27565: LD_INT 3
27567: PUSH
27568: FOR_TO
27569: IFFALSE 27687
// begin Un = FindMaxSumSkill ( Remaining_Powells diff Sold , sex_male ) ;
27571: LD_ADDR_VAR 0 9
27575: PUSH
27576: LD_EXP 64
27580: PUSH
27581: LD_VAR 0 3
27585: DIFF
27586: PPUSH
27587: LD_INT 1
27589: PPUSH
27590: CALL 18088 0 2
27594: ST_TO_ADDR
// if Un = 0 then
27595: LD_VAR 0 9
27599: PUSH
27600: LD_INT 0
27602: EQUAL
27603: IFFALSE 27629
// Un = FindMaxSumSkill ( Remaining_named_males diff Sold , sex_male ) ;
27605: LD_ADDR_VAR 0 9
27609: PUSH
27610: LD_VAR 0 10
27614: PUSH
27615: LD_VAR 0 3
27619: DIFF
27620: PPUSH
27621: LD_INT 1
27623: PPUSH
27624: CALL 18088 0 2
27628: ST_TO_ADDR
// if Un = 0 then
27629: LD_VAR 0 9
27633: PUSH
27634: LD_INT 0
27636: EQUAL
27637: IFFALSE 27669
// Un = FindMaxSumSkill ( ( Remaining_Powells ^ Remaining_named_males ) diff Sold , sex_male ) ;
27639: LD_ADDR_VAR 0 9
27643: PUSH
27644: LD_EXP 64
27648: PUSH
27649: LD_VAR 0 10
27653: ADD
27654: PUSH
27655: LD_VAR 0 3
27659: DIFF
27660: PPUSH
27661: LD_INT 1
27663: PPUSH
27664: CALL 18088 0 2
27668: ST_TO_ADDR
// Sold = Sold ^ Un ;
27669: LD_ADDR_VAR 0 3
27673: PUSH
27674: LD_VAR 0 3
27678: PUSH
27679: LD_VAR 0 9
27683: ADD
27684: ST_TO_ADDR
// end ;
27685: GO 27568
27687: POP
27688: POP
// Uns = UnitFilter ( Arabian_soldiers , [ f_sex , sex_male ] ) ;
27689: LD_ADDR_VAR 0 12
27693: PUSH
27694: LD_EXP 80
27698: PPUSH
27699: LD_INT 26
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PPUSH
27709: CALL_OW 72
27713: ST_TO_ADDR
// Arabian1 = Uns [ 1 ] ;
27714: LD_ADDR_VAR 0 4
27718: PUSH
27719: LD_VAR 0 12
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: ST_TO_ADDR
// Arabian2 = Uns [ 2 ] ;
27728: LD_ADDR_VAR 0 5
27732: PUSH
27733: LD_VAR 0 12
27737: PUSH
27738: LD_INT 2
27740: ARRAY
27741: ST_TO_ADDR
// Arabian3 = Uns [ 3 ] ;
27742: LD_ADDR_VAR 0 6
27746: PUSH
27747: LD_VAR 0 12
27751: PUSH
27752: LD_INT 3
27754: ARRAY
27755: ST_TO_ADDR
// if GetLives ( ArT1 ) > 0 and GetLives ( ArT1 ) < 500 then
27756: LD_INT 107
27758: PPUSH
27759: CALL_OW 256
27763: PUSH
27764: LD_INT 0
27766: GREATER
27767: PUSH
27768: LD_INT 107
27770: PPUSH
27771: CALL_OW 256
27775: PUSH
27776: LD_INT 500
27778: LESS
27779: AND
27780: IFFALSE 27792
// SetLives ( ArT1 , 500 ) ;
27782: LD_INT 107
27784: PPUSH
27785: LD_INT 500
27787: PPUSH
27788: CALL_OW 234
// RemoveMcUnits ( Arabian_def_id , Arabian_soldiers ^ ArT1 ) ;
27792: LD_EXP 235
27796: PPUSH
27797: LD_EXP 80
27801: PUSH
27802: LD_INT 107
27804: ADD
27805: PPUSH
27806: CALL_OW 391
// ComMoveXY ( Arabian_soldiers , 52 , 15 ) ;
27810: LD_EXP 80
27814: PPUSH
27815: LD_INT 52
27817: PPUSH
27818: LD_INT 15
27820: PPUSH
27821: CALL_OW 111
// AddComHold ( Arabian_soldiers ) ;
27825: LD_EXP 80
27829: PPUSH
27830: CALL_OW 200
// Wait ( 0 0$0.5 ) ;
27834: LD_INT 18
27836: PPUSH
27837: CALL_OW 67
// ComEnterUnit ( Arabian1 , ArT1 ) ;
27841: LD_VAR 0 4
27845: PPUSH
27846: LD_INT 107
27848: PPUSH
27849: CALL_OW 120
// ComMoveXY ( Arabian2 , 71 , 18 ) ;
27853: LD_VAR 0 5
27857: PPUSH
27858: LD_INT 71
27860: PPUSH
27861: LD_INT 18
27863: PPUSH
27864: CALL_OW 111
// AddComHold ( Arabian2 ) ;
27868: LD_VAR 0 5
27872: PPUSH
27873: CALL_OW 200
// ComMoveXY ( Arabian_mechanics [ 1 ] , 83 , 15 ) ;
27877: LD_EXP 83
27881: PUSH
27882: LD_INT 1
27884: ARRAY
27885: PPUSH
27886: LD_INT 83
27888: PPUSH
27889: LD_INT 15
27891: PPUSH
27892: CALL_OW 111
// AddComHold ( Arabian_mechanics [ 1 ] ) ;
27896: LD_EXP 83
27900: PUSH
27901: LD_INT 1
27903: ARRAY
27904: PPUSH
27905: CALL_OW 200
// ComMoveXY ( Arabian3 , 85 , 26 ) ;
27909: LD_VAR 0 6
27913: PPUSH
27914: LD_INT 85
27916: PPUSH
27917: LD_INT 26
27919: PPUSH
27920: CALL_OW 111
// AddComHold ( Arabian3 ) ;
27924: LD_VAR 0 6
27928: PPUSH
27929: CALL_OW 200
// RemoveMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
27933: LD_EXP 236
27937: PPUSH
27938: LD_EXP 81
27942: PPUSH
27943: CALL_OW 391
// ComEnterUnit ( Arabian_Engineers , GetUnitNumber ( 53 , 7 ) ) ;
27947: LD_EXP 81
27951: PPUSH
27952: LD_INT 53
27954: PPUSH
27955: LD_INT 7
27957: PPUSH
27958: CALL_OW 438
27962: PPUSH
27963: CALL_OW 120
// CenterOnXY ( 60 , 62 ) ;
27967: LD_INT 60
27969: PPUSH
27970: LD_INT 62
27972: PPUSH
27973: CALL_OW 84
// Say ( Sold [ 3 ] , D6-Sol3-1 ) ;
27977: LD_VAR 0 3
27981: PUSH
27982: LD_INT 3
27984: ARRAY
27985: PPUSH
27986: LD_STRING D6-Sol3-1
27988: PPUSH
27989: CALL_OW 88
// ComMoveXY ( ArBomb1 , 71 , 61 ) ;
27993: LD_INT 139
27995: PPUSH
27996: LD_INT 71
27998: PPUSH
27999: LD_INT 61
28001: PPUSH
28002: CALL_OW 111
// ComMoveXY ( ArBomb2 , 74 , 61 ) ;
28006: LD_INT 138
28008: PPUSH
28009: LD_INT 74
28011: PPUSH
28012: LD_INT 61
28014: PPUSH
28015: CALL_OW 111
// Say ( Powell , D6-Pow-1 ) ;
28019: LD_EXP 2
28023: PPUSH
28024: LD_STRING D6-Pow-1
28026: PPUSH
28027: CALL_OW 88
// WaitPos ( 71 , 61 , 6 , [ ArBomb1 , ArBomb2 ] , 1 ) ;
28031: LD_INT 71
28033: PPUSH
28034: LD_INT 61
28036: PPUSH
28037: LD_INT 6
28039: PPUSH
28040: LD_INT 139
28042: PUSH
28043: LD_INT 138
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PPUSH
28050: LD_INT 1
28052: PPUSH
28053: CALL 17974 0 5
// Say ( Sold [ 1 ] , D6-Sol3-2 ) ;
28057: LD_VAR 0 3
28061: PUSH
28062: LD_INT 1
28064: ARRAY
28065: PPUSH
28066: LD_STRING D6-Sol3-2
28068: PPUSH
28069: CALL_OW 88
// ComMoveXY ( ArBomb1 , 50 , 56 ) ;
28073: LD_INT 139
28075: PPUSH
28076: LD_INT 50
28078: PPUSH
28079: LD_INT 56
28081: PPUSH
28082: CALL_OW 111
// AddComMoveXY ( ArBomb1 , 46 , 52 ) ;
28086: LD_INT 139
28088: PPUSH
28089: LD_INT 46
28091: PPUSH
28092: LD_INT 52
28094: PPUSH
28095: CALL_OW 171
// PriorityAttack ( americans1 , ArBomb1 ) ;
28099: LD_EXP 177
28103: PPUSH
28104: LD_INT 139
28106: PPUSH
28107: CALL_OW 470
// ComMoveXY ( ArBomb2 , 48 , 60 ) ;
28111: LD_INT 138
28113: PPUSH
28114: LD_INT 48
28116: PPUSH
28117: LD_INT 60
28119: PPUSH
28120: CALL_OW 111
// AddComMoveXY ( ArBomb2 , 45 , 57 ) ;
28124: LD_INT 138
28126: PPUSH
28127: LD_INT 45
28129: PPUSH
28130: LD_INT 57
28132: PPUSH
28133: CALL_OW 171
// AddComAttackUnit ( ArBomb2 , AmFact ) ;
28137: LD_INT 138
28139: PPUSH
28140: LD_INT 85
28142: PPUSH
28143: CALL_OW 175
// DoNotAttack ( americans1 , ArBomb2 ) ;
28147: LD_EXP 177
28151: PPUSH
28152: LD_INT 138
28154: PPUSH
28155: CALL_OW 471
// ComMoveXY ( Powell , 58 , 68 ) ;
28159: LD_EXP 2
28163: PPUSH
28164: LD_INT 58
28166: PPUSH
28167: LD_INT 68
28169: PPUSH
28170: CALL_OW 111
// AddComHold ( Powell ) ;
28174: LD_EXP 2
28178: PPUSH
28179: CALL_OW 200
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
28183: LD_INT 92
28185: PPUSH
28186: CALL_OW 313
28190: PPUSH
28191: CALL_OW 122
// ComExitBuilding ( UnitsInside ( AmFact ) ) ;
28195: LD_INT 85
28197: PPUSH
28198: CALL_OW 313
28202: PPUSH
28203: CALL_OW 122
// Wait ( 1 ) ;
28207: LD_INT 1
28209: PPUSH
28210: CALL_OW 67
// while UnitsInside ( AmArm ) <> 0 do
28214: LD_INT 92
28216: PPUSH
28217: CALL_OW 313
28221: PUSH
28222: LD_INT 0
28224: NONEQUAL
28225: IFFALSE 28236
// Wait ( 2 ) ;
28227: LD_INT 2
28229: PPUSH
28230: CALL_OW 67
28234: GO 28214
// Units_Outside = FilterUnitsInArea ( Am_Base , [ [ f_side , americans1 ] , [ f_type , unit_human ] ] ) diff ( soldiers1 ^ soldiers ^ Powell ) ;
28236: LD_ADDR_VAR 0 1
28240: PUSH
28241: LD_INT 1
28243: PPUSH
28244: LD_INT 22
28246: PUSH
28247: LD_EXP 177
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 21
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PPUSH
28270: CALL_OW 70
28274: PUSH
28275: LD_LOC 7
28279: PUSH
28280: LD_LOC 6
28284: ADD
28285: PUSH
28286: LD_EXP 2
28290: ADD
28291: DIFF
28292: ST_TO_ADDR
// for Un in Units_Outside do
28293: LD_ADDR_VAR 0 9
28297: PUSH
28298: LD_VAR 0 1
28302: PUSH
28303: FOR_IN
28304: IFFALSE 28366
// begin Hex = RandHexXYR ( 56 , 69 , 2 , false ) ;
28306: LD_ADDR_VAR 0 14
28310: PUSH
28311: LD_INT 56
28313: PPUSH
28314: LD_INT 69
28316: PPUSH
28317: LD_INT 2
28319: PPUSH
28320: LD_INT 0
28322: PPUSH
28323: CALL_OW 17
28327: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
28328: LD_VAR 0 9
28332: PPUSH
28333: LD_VAR 0 14
28337: PUSH
28338: LD_INT 1
28340: ARRAY
28341: PPUSH
28342: LD_VAR 0 14
28346: PUSH
28347: LD_INT 2
28349: ARRAY
28350: PPUSH
28351: CALL_OW 111
// AddComHold ( Un ) ;
28355: LD_VAR 0 9
28359: PPUSH
28360: CALL_OW 200
// end ;
28364: GO 28303
28366: POP
28367: POP
// enable ( Talk_Bomba ) ;
28368: LD_EXP 142
28372: ENABLE_MARKED
// while ( IsOk ( ArBomb1 ) or IsOk ( ArBomb2 ) ) do
28373: LD_INT 139
28375: PPUSH
28376: CALL_OW 302
28380: PUSH
28381: LD_INT 138
28383: PPUSH
28384: CALL_OW 302
28388: OR
28389: IFFALSE 28475
// begin if ( GetDistUnitXY ( ArBomb1 , 41 , 54 ) <= 7 ) and ( GetLives ( ArBomb1 ) > 250 ) then
28391: LD_INT 139
28393: PPUSH
28394: LD_INT 41
28396: PPUSH
28397: LD_INT 54
28399: PPUSH
28400: CALL_OW 297
28404: PUSH
28405: LD_INT 7
28407: LESSEQUAL
28408: PUSH
28409: LD_INT 139
28411: PPUSH
28412: CALL_OW 256
28416: PUSH
28417: LD_INT 250
28419: GREATER
28420: AND
28421: IFFALSE 28433
// SetLives ( ArBomb1 , 200 ) ;
28423: LD_INT 139
28425: PPUSH
28426: LD_INT 200
28428: PPUSH
28429: CALL_OW 234
// if not ( IsOk ( ArBomb2 ) ) then
28433: LD_INT 138
28435: PPUSH
28436: CALL_OW 302
28440: NOT
28441: IFFALSE 28466
// if GetLives ( AmFact ) > 0 then
28443: LD_INT 85
28445: PPUSH
28446: CALL_OW 256
28450: PUSH
28451: LD_INT 0
28453: GREATER
28454: IFFALSE 28466
// SetLives ( AmFact , 0 ) ;
28456: LD_INT 85
28458: PPUSH
28459: LD_INT 0
28461: PPUSH
28462: CALL_OW 234
// Wait ( 4 ) ;
28466: LD_INT 4
28468: PPUSH
28469: CALL_OW 67
// end ;
28473: GO 28373
// Wait ( 0 0$2 ) ;
28475: LD_INT 70
28477: PPUSH
28478: CALL_OW 67
// Say ( Powell , D6a-Pow-1 ) ;
28482: LD_EXP 2
28486: PPUSH
28487: LD_STRING D6a-Pow-1
28489: PPUSH
28490: CALL_OW 88
// Say ( Sold [ 1 ] , D6a-Sol3-1 ) ;
28494: LD_VAR 0 3
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: PPUSH
28503: LD_STRING D6a-Sol3-1
28505: PPUSH
28506: CALL_OW 88
// Say ( Powell , D6a-Pow-2 ) ;
28510: LD_EXP 2
28514: PPUSH
28515: LD_STRING D6a-Pow-2
28517: PPUSH
28518: CALL_OW 88
// Say ( Sold [ 1 ] , D6a-Sol3-2 ) ;
28522: LD_VAR 0 3
28526: PUSH
28527: LD_INT 1
28529: ARRAY
28530: PPUSH
28531: LD_STRING D6a-Sol3-2
28533: PPUSH
28534: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
28538: LD_EXP 2
28542: PPUSH
28543: LD_STRING D6a-Pow-3
28545: PPUSH
28546: CALL_OW 88
// Center_To_Powell = true ;
28550: LD_ADDR_EXP 194
28554: PUSH
28555: LD_INT 1
28557: ST_TO_ADDR
// enable ( Protect_Powell ) ;
28558: LD_EXP 141
28562: ENABLE_MARKED
// ComEnterUnit ( Powell , Powell_vehicle ) ;
28563: LD_EXP 2
28567: PPUSH
28568: LD_EXP 192
28572: PPUSH
28573: CALL_OW 120
// AddComMoveXY ( Powell , 66 , 62 ) ;
28577: LD_EXP 2
28581: PPUSH
28582: LD_INT 66
28584: PPUSH
28585: LD_INT 62
28587: PPUSH
28588: CALL_OW 171
// AddComMoveXY ( Powell , 81 , 61 ) ;
28592: LD_EXP 2
28596: PPUSH
28597: LD_INT 81
28599: PPUSH
28600: LD_INT 61
28602: PPUSH
28603: CALL_OW 171
// AddComMoveXY ( Powell , 86 , 56 ) ;
28607: LD_EXP 2
28611: PPUSH
28612: LD_INT 86
28614: PPUSH
28615: LD_INT 56
28617: PPUSH
28618: CALL_OW 171
// AddComMoveXY ( Powell , 74 , 24 ) ;
28622: LD_EXP 2
28626: PPUSH
28627: LD_INT 74
28629: PPUSH
28630: LD_INT 24
28632: PPUSH
28633: CALL_OW 171
// while GetDistUnitXY ( Powell_vehicle , 74 , 24 ) > 12 do
28637: LD_EXP 192
28641: PPUSH
28642: LD_INT 74
28644: PPUSH
28645: LD_INT 24
28647: PPUSH
28648: CALL_OW 297
28652: PUSH
28653: LD_INT 12
28655: GREATER
28656: IFFALSE 28667
// Wait ( 0 0$0.1 ) ;
28658: LD_INT 4
28660: PPUSH
28661: CALL_OW 67
28665: GO 28637
// Say ( Powell , D6b-Pow-1 ) ;
28667: LD_EXP 2
28671: PPUSH
28672: LD_STRING D6b-Pow-1
28674: PPUSH
28675: CALL_OW 88
// game_speed = 3 ;
28679: LD_ADDR_OWVAR 65
28683: PUSH
28684: LD_INT 3
28686: ST_TO_ADDR
// while GetDistUnitXY ( Powell_vehicle , 74 , 24 ) > 5 do
28687: LD_EXP 192
28691: PPUSH
28692: LD_INT 74
28694: PPUSH
28695: LD_INT 24
28697: PPUSH
28698: CALL_OW 297
28702: PUSH
28703: LD_INT 5
28705: GREATER
28706: IFFALSE 28717
// Wait ( 0 0$0.1 ) ;
28708: LD_INT 4
28710: PPUSH
28711: CALL_OW 67
28715: GO 28687
// SetLives ( Powell_vehicle , 251 ) ;
28717: LD_EXP 192
28721: PPUSH
28722: LD_INT 251
28724: PPUSH
28725: CALL_OW 234
// while IsInUnit ( Powell ) do
28729: LD_EXP 2
28733: PPUSH
28734: CALL_OW 310
28738: IFFALSE 28749
// Wait ( 2 ) ;
28740: LD_INT 2
28742: PPUSH
28743: CALL_OW 67
28747: GO 28729
// SetAttr ( Powell , attr_speed , 14 ) ;
28749: LD_EXP 2
28753: PPUSH
28754: LD_INT 2
28756: PPUSH
28757: LD_INT 14
28759: PPUSH
28760: CALL_OW 239
// ComEnterUnit ( Powell , PowBomb ) ;
28764: LD_EXP 2
28768: PPUSH
28769: LD_INT 137
28771: PPUSH
28772: CALL_OW 120
// Say ( Powell , D6b-Pow-1a ) ;
28776: LD_EXP 2
28780: PPUSH
28781: LD_STRING D6b-Pow-1a
28783: PPUSH
28784: CALL_OW 88
// repeat wait ( 2 ) ;
28788: LD_INT 2
28790: PPUSH
28791: CALL_OW 67
// until IsInUnit ( Powell ) ;
28795: LD_EXP 2
28799: PPUSH
28800: CALL_OW 310
28804: IFFALSE 28788
// AddComMoveXY ( Powell , 81 , 21 ) ;
28806: LD_EXP 2
28810: PPUSH
28811: LD_INT 81
28813: PPUSH
28814: LD_INT 21
28816: PPUSH
28817: CALL_OW 171
// AddComMoveXY ( Powell , 73 , 16 ) ;
28821: LD_EXP 2
28825: PPUSH
28826: LD_INT 73
28828: PPUSH
28829: LD_INT 16
28831: PPUSH
28832: CALL_OW 171
// AddComMoveXY ( Powell , 76 , 21 ) ;
28836: LD_EXP 2
28840: PPUSH
28841: LD_INT 76
28843: PPUSH
28844: LD_INT 21
28846: PPUSH
28847: CALL_OW 171
// AddComMoveXY ( Powell , 78 , 15 ) ;
28851: LD_EXP 2
28855: PPUSH
28856: LD_INT 78
28858: PPUSH
28859: LD_INT 15
28861: PPUSH
28862: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28866: LD_EXP 2
28870: PPUSH
28871: LD_STRING D6b-Pow-1b
28873: PPUSH
28874: CALL_OW 88
// ComMoveXY ( Arabian_soldiers , 48 , 14 ) ;
28878: LD_EXP 80
28882: PPUSH
28883: LD_INT 48
28885: PPUSH
28886: LD_INT 14
28888: PPUSH
28889: CALL_OW 111
// AddComHold ( Arabian_soldiers ) ;
28893: LD_EXP 80
28897: PPUSH
28898: CALL_OW 200
// ComEnterUnit ( Arabian_mechanics [ 1 ] , ArFact ) ;
28902: LD_EXP 83
28906: PUSH
28907: LD_INT 1
28909: ARRAY
28910: PPUSH
28911: LD_INT 117
28913: PPUSH
28914: CALL_OW 120
// ComMoveXY ( Arabian3 , 96 , 29 ) ;
28918: LD_VAR 0 6
28922: PPUSH
28923: LD_INT 96
28925: PPUSH
28926: LD_INT 29
28928: PPUSH
28929: CALL_OW 111
// async ;
28933: ASYNC
// Say ( Arabian1 , D6b-ArSol1-1 ) ;
28934: LD_VAR 0 4
28938: PPUSH
28939: LD_STRING D6b-ArSol1-1
28941: PPUSH
28942: CALL_OW 88
// wait ( 0 0$1 ) ;
28946: LD_INT 35
28948: PPUSH
28949: CALL_OW 67
// Say ( Arabian2 , D6b-ArSol2-1 ) ;
28953: LD_VAR 0 5
28957: PPUSH
28958: LD_STRING D6b-ArSol2-1
28960: PPUSH
28961: CALL_OW 88
// wait ( 0 0$0.5 ) ;
28965: LD_INT 18
28967: PPUSH
28968: CALL_OW 67
// sync ;
28972: SYNC
// Say ( Powell , D6b-Pow-2 ) ;
28973: LD_EXP 2
28977: PPUSH
28978: LD_STRING D6b-Pow-2
28980: PPUSH
28981: CALL_OW 88
// WaitTask ( Powell , 0.1 ) ;
28985: LD_EXP 2
28989: PPUSH
28990: LD_REAL  1.00000000000000E-0001
28993: PPUSH
28994: CALL 17876 0 2
// if IsInUnit ( Powell ) then
28998: LD_EXP 2
29002: PPUSH
29003: CALL_OW 310
29007: IFFALSE 29027
// WaitTask ( IsInUnit ( Powell ) , 0.1 ) ;
29009: LD_EXP 2
29013: PPUSH
29014: CALL_OW 310
29018: PPUSH
29019: LD_REAL  1.00000000000000E-0001
29022: PPUSH
29023: CALL 17876 0 2
// DialogueOn ;
29027: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
29031: LD_EXP 2
29035: PPUSH
29036: LD_STRING D6b-Pow-2a
29038: PPUSH
29039: CALL_OW 88
// DialogueOff ;
29043: CALL_OW 7
// disable ( Protect_Powell ) ;
29047: LD_EXP 141
29051: DISABLE_MARKED
// ComAttackUnit ( IsInUnit ( Powell ) , ArRuFact ) ;
29052: LD_EXP 2
29056: PPUSH
29057: CALL_OW 310
29061: PPUSH
29062: LD_INT 105
29064: PPUSH
29065: CALL_OW 115
// placeseeing ( 78 , 12 , americans , - 8 ) ;
29069: LD_INT 78
29071: PPUSH
29072: LD_INT 12
29074: PPUSH
29075: LD_EXP 176
29079: PPUSH
29080: LD_INT 8
29082: NEG
29083: PPUSH
29084: CALL_OW 330
// while IsOk ( IsInUnit ( Powell ) ) do
29088: LD_EXP 2
29092: PPUSH
29093: CALL_OW 310
29097: PPUSH
29098: CALL_OW 302
29102: IFFALSE 29113
// Wait ( 0 0$0.5 ) ;
29104: LD_INT 18
29106: PPUSH
29107: CALL_OW 67
29111: GO 29088
// if GetLives ( ArRuFact ) > 0 then
29113: LD_INT 105
29115: PPUSH
29116: CALL_OW 256
29120: PUSH
29121: LD_INT 0
29123: GREATER
29124: IFFALSE 29136
// SetLives ( ArRuFact , 0 ) ;
29126: LD_INT 105
29128: PPUSH
29129: LD_INT 0
29131: PPUSH
29132: CALL_OW 234
// Center_To_Powell = false ;
29136: LD_ADDR_EXP 194
29140: PUSH
29141: LD_INT 0
29143: ST_TO_ADDR
// Wait ( 0 0$5 ) ;
29144: LD_INT 175
29146: PPUSH
29147: CALL_OW 67
// removeseeing ( 78 , 12 , americans ) ;
29151: LD_INT 78
29153: PPUSH
29154: LD_INT 12
29156: PPUSH
29157: LD_EXP 176
29161: PPUSH
29162: CALL_OW 331
// CenterOnUnits ( JMM ) ;
29166: LD_EXP 1
29170: PPUSH
29171: CALL_OW 85
// RepairArabExtensions ;
29175: CALL 31892 0 0
// AddMcUnits ( Arabian_def_id , Arabian_soldiers ^ ArT1 ) ;
29179: LD_EXP 235
29183: PPUSH
29184: LD_EXP 80
29188: PUSH
29189: LD_INT 107
29191: ADD
29192: PPUSH
29193: CALL_OW 390
// for Un in Arabian_Soldiers do
29197: LD_ADDR_VAR 0 9
29201: PUSH
29202: LD_EXP 80
29206: PUSH
29207: FOR_IN
29208: IFFALSE 29255
// begin Hex = RandHexArea ( Ar_Base , false ) ;
29210: LD_ADDR_VAR 0 14
29214: PUSH
29215: LD_INT 17
29217: PPUSH
29218: LD_INT 0
29220: PPUSH
29221: CALL_OW 16
29225: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
29226: LD_VAR 0 9
29230: PPUSH
29231: LD_VAR 0 14
29235: PUSH
29236: LD_INT 1
29238: ARRAY
29239: PPUSH
29240: LD_VAR 0 14
29244: PUSH
29245: LD_INT 2
29247: ARRAY
29248: PPUSH
29249: CALL_OW 111
// end ;
29253: GO 29207
29255: POP
29256: POP
// Say ( Sold [ 1 ] , D6c-Sol3-1 ) ;
29257: LD_VAR 0 3
29261: PUSH
29262: LD_INT 1
29264: ARRAY
29265: PPUSH
29266: LD_STRING D6c-Sol3-1
29268: PPUSH
29269: CALL_OW 88
// Say ( Jmm , D6c-JMM-1 ) ;
29273: LD_EXP 1
29277: PPUSH
29278: LD_STRING D6c-JMM-1
29280: PPUSH
29281: CALL_OW 88
// Alive = UnitFilter ( [ Cyrus , Bobby , Cornell ] , [ f_ok ] ) ;
29285: LD_ADDR_VAR 0 8
29289: PUSH
29290: LD_EXP 4
29294: PUSH
29295: LD_EXP 3
29299: PUSH
29300: LD_EXP 10
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: PPUSH
29310: LD_INT 50
29312: PUSH
29313: EMPTY
29314: LIST
29315: PPUSH
29316: CALL_OW 72
29320: ST_TO_ADDR
// if Alive > 0 then
29321: LD_VAR 0 8
29325: PUSH
29326: LD_INT 0
29328: GREATER
29329: IFFALSE 29357
// Un = Alive [ Rand ( 1 , Alive ) ] else
29331: LD_ADDR_VAR 0 9
29335: PUSH
29336: LD_VAR 0 8
29340: PUSH
29341: LD_INT 1
29343: PPUSH
29344: LD_VAR 0 8
29348: PPUSH
29349: CALL_OW 12
29353: ARRAY
29354: ST_TO_ADDR
29355: GO 29371
// Un = Sold [ 3 ] ;
29357: LD_ADDR_VAR 0 9
29361: PUSH
29362: LD_VAR 0 3
29366: PUSH
29367: LD_INT 3
29369: ARRAY
29370: ST_TO_ADDR
// case Un of Cyrus :
29371: LD_VAR 0 9
29375: PUSH
29376: LD_EXP 4
29380: DOUBLE
29381: EQUAL
29382: IFTRUE 29386
29384: GO 29401
29386: POP
// Say ( Cyrus , D6c-Cyrus-1 ) ; Bobby :
29387: LD_EXP 4
29391: PPUSH
29392: LD_STRING D6c-Cyrus-1
29394: PPUSH
29395: CALL_OW 88
29399: GO 29485
29401: LD_EXP 3
29405: DOUBLE
29406: EQUAL
29407: IFTRUE 29411
29409: GO 29426
29411: POP
// Say ( Bobby , D6c-Bobby-1 ) ; Cornell :
29412: LD_EXP 3
29416: PPUSH
29417: LD_STRING D6c-Bobby-1
29419: PPUSH
29420: CALL_OW 88
29424: GO 29485
29426: LD_EXP 10
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 29451
29436: POP
// Say ( Cornell , D6c-Corn-1 ) ; Sold [ 3 ] :
29437: LD_EXP 10
29441: PPUSH
29442: LD_STRING D6c-Corn-1
29444: PPUSH
29445: CALL_OW 88
29449: GO 29485
29451: LD_VAR 0 3
29455: PUSH
29456: LD_INT 3
29458: ARRAY
29459: DOUBLE
29460: EQUAL
29461: IFTRUE 29465
29463: GO 29484
29465: POP
// Say ( Sold [ 3 ] , D6c-Sol1-1 ) ; end ;
29466: LD_VAR 0 3
29470: PUSH
29471: LD_INT 3
29473: ARRAY
29474: PPUSH
29475: LD_STRING D6c-Sol1-1
29477: PPUSH
29478: CALL_OW 88
29482: GO 29485
29484: POP
// Alive = UnitFilter ( [ Lisa , Gary , Donaldson ] , [ f_ok ] ) ;
29485: LD_ADDR_VAR 0 8
29489: PUSH
29490: LD_EXP 5
29494: PUSH
29495: LD_EXP 15
29499: PUSH
29500: LD_EXP 8
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: PPUSH
29510: LD_INT 50
29512: PUSH
29513: EMPTY
29514: LIST
29515: PPUSH
29516: CALL_OW 72
29520: ST_TO_ADDR
// if Alive > 0 then
29521: LD_VAR 0 8
29525: PUSH
29526: LD_INT 0
29528: GREATER
29529: IFFALSE 29557
// Un = Alive [ Rand ( 1 , Alive ) ] else
29531: LD_ADDR_VAR 0 9
29535: PUSH
29536: LD_VAR 0 8
29540: PUSH
29541: LD_INT 1
29543: PPUSH
29544: LD_VAR 0 8
29548: PPUSH
29549: CALL_OW 12
29553: ARRAY
29554: ST_TO_ADDR
29555: GO 29571
// Un = Sold [ 2 ] ;
29557: LD_ADDR_VAR 0 9
29561: PUSH
29562: LD_VAR 0 3
29566: PUSH
29567: LD_INT 2
29569: ARRAY
29570: ST_TO_ADDR
// case Un of Lisa :
29571: LD_VAR 0 9
29575: PUSH
29576: LD_EXP 5
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29601
29586: POP
// Say ( Lisa , D6c-Lisa-1 ) ; Gary :
29587: LD_EXP 5
29591: PPUSH
29592: LD_STRING D6c-Lisa-1
29594: PPUSH
29595: CALL_OW 88
29599: GO 29685
29601: LD_EXP 15
29605: DOUBLE
29606: EQUAL
29607: IFTRUE 29611
29609: GO 29626
29611: POP
// Say ( Gary , D6c-Gary-1 ) ; Donaldson :
29612: LD_EXP 15
29616: PPUSH
29617: LD_STRING D6c-Gary-1
29619: PPUSH
29620: CALL_OW 88
29624: GO 29685
29626: LD_EXP 8
29630: DOUBLE
29631: EQUAL
29632: IFTRUE 29636
29634: GO 29651
29636: POP
// Say ( Donaldson , D6c-Don-1 ) ; Sold [ 2 ] :
29637: LD_EXP 8
29641: PPUSH
29642: LD_STRING D6c-Don-1
29644: PPUSH
29645: CALL_OW 88
29649: GO 29685
29651: LD_VAR 0 3
29655: PUSH
29656: LD_INT 2
29658: ARRAY
29659: DOUBLE
29660: EQUAL
29661: IFTRUE 29665
29663: GO 29684
29665: POP
// Say ( Sold [ 2 ] , D6c-Sol2-1 ) ; end ;
29666: LD_VAR 0 3
29670: PUSH
29671: LD_INT 2
29673: ARRAY
29674: PPUSH
29675: LD_STRING D6c-Sol2-1
29677: PPUSH
29678: CALL_OW 88
29682: GO 29685
29684: POP
// Say ( Sold [ 1 ] , D6c-Sol3-2 ) ;
29685: LD_VAR 0 3
29689: PUSH
29690: LD_INT 1
29692: ARRAY
29693: PPUSH
29694: LD_STRING D6c-Sol3-2
29696: PPUSH
29697: CALL_OW 88
// Wait ( 0 0$2 ) ;
29701: LD_INT 70
29703: PPUSH
29704: CALL_OW 67
// Say ( JMM , D6c-JMM-2 ) ;
29708: LD_EXP 1
29712: PPUSH
29713: LD_STRING D6c-JMM-2
29715: PPUSH
29716: CALL_OW 88
// SetSide ( FilterAllUnits ( [ f_side , Americans1 ] ) , americans ) ;
29720: LD_INT 22
29722: PUSH
29723: LD_EXP 177
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PPUSH
29732: CALL_OW 69
29736: PPUSH
29737: LD_EXP 176
29741: PPUSH
29742: CALL_OW 235
// ingame_video = false ;
29746: LD_ADDR_OWVAR 52
29750: PUSH
29751: LD_INT 0
29753: ST_TO_ADDR
// interface_hidden = false ;
29754: LD_ADDR_OWVAR 54
29758: PUSH
29759: LD_INT 0
29761: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
29762: LD_STRING M2
29764: PPUSH
29765: CALL_OW 337
// Wait ( 0 0$1 ) ;
29769: LD_INT 35
29771: PPUSH
29772: CALL_OW 67
// enable ( R1_attack ) ;
29776: LD_EXP 140
29780: ENABLE_MARKED
// R1_Attack_Continues = true ;
29781: LD_ADDR_EXP 196
29785: PUSH
29786: LD_INT 1
29788: ST_TO_ADDR
// ComMoveXY ( R1_Attacking_Units , 101 , 147 ) ;
29789: LD_LOC 11
29793: PPUSH
29794: LD_INT 101
29796: PPUSH
29797: LD_INT 147
29799: PPUSH
29800: CALL_OW 111
// AddMcUnits ( Russian1_att_id , R1_Attacking_Units ) ;
29804: LD_EXP 238
29808: PPUSH
29809: LD_LOC 11
29813: PPUSH
29814: CALL_OW 390
// ComMoveXY ( R1_Patroling_Units , 101 , 147 ) ;
29818: LD_LOC 12
29822: PPUSH
29823: LD_INT 101
29825: PPUSH
29826: LD_INT 147
29828: PPUSH
29829: CALL_OW 111
// AddMcUnits ( Russian1_patr_id , R1_Patroling_Units ) ;
29833: LD_EXP 240
29837: PPUSH
29838: LD_LOC 12
29842: PPUSH
29843: CALL_OW 390
// SetAttitude ( russians1 , americans , att_enemy , true ) ;
29847: LD_EXP 179
29851: PPUSH
29852: LD_EXP 176
29856: PPUSH
29857: LD_INT 2
29859: PPUSH
29860: LD_INT 1
29862: PPUSH
29863: CALL_OW 80
// Arabian_Buildings = FilterUnitsInArea ( Ar_Base , [ f_type , unit_building ] ) ;
29867: LD_ADDR_VAR 0 7
29871: PUSH
29872: LD_INT 17
29874: PPUSH
29875: LD_INT 21
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PPUSH
29885: CALL_OW 70
29889: ST_TO_ADDR
// for Un in Arabian_Buildings do
29890: LD_ADDR_VAR 0 9
29894: PUSH
29895: LD_VAR 0 7
29899: PUSH
29900: FOR_IN
29901: IFFALSE 29947
// if ( GetLives ( Un ) > 0 ) and ( GetLives ( Un ) < 250 ) then
29903: LD_VAR 0 9
29907: PPUSH
29908: CALL_OW 256
29912: PUSH
29913: LD_INT 0
29915: GREATER
29916: PUSH
29917: LD_VAR 0 9
29921: PPUSH
29922: CALL_OW 256
29926: PUSH
29927: LD_INT 250
29929: LESS
29930: AND
29931: IFFALSE 29945
// SetLives ( Un , 400 ) ;
29933: LD_VAR 0 9
29937: PPUSH
29938: LD_INT 400
29940: PPUSH
29941: CALL_OW 234
29945: GO 29900
29947: POP
29948: POP
// AddMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
29949: LD_EXP 236
29953: PPUSH
29954: LD_EXP 81
29958: PPUSH
29959: CALL_OW 390
// ComExitBuilding ( Arabian_Engineers ) ;
29963: LD_EXP 81
29967: PPUSH
29968: CALL_OW 122
// enable ( Ingame_Run_over ) ;
29972: LD_EXP 145
29976: ENABLE_MARKED
// Time_of_Ingame_Run_Over = tick ;
29977: LD_ADDR_EXP 189
29981: PUSH
29982: LD_OWVAR 1
29986: ST_TO_ADDR
// Woman_Coming_Time = Woman_Coming_Time + tick ;
29987: LD_ADDR_EXP 201
29991: PUSH
29992: LD_EXP 201
29996: PUSH
29997: LD_OWVAR 1
30001: PLUS
30002: ST_TO_ADDR
// Rus_Attack_time = Rus_Attack_time + tick ;
30003: LD_ADDR_EXP 130
30007: PUSH
30008: LD_EXP 130
30012: PUSH
30013: LD_OWVAR 1
30017: PLUS
30018: ST_TO_ADDR
// Stevens_Coming_Time = Stevens_Coming_Time + tick ;
30019: LD_ADDR_EXP 200
30023: PUSH
30024: LD_EXP 200
30028: PUSH
30029: LD_OWVAR 1
30033: PLUS
30034: ST_TO_ADDR
// Alliance_broadcast = Alliance_broadcast + tick ;
30035: LD_ADDR_EXP 202
30039: PUSH
30040: LD_EXP 202
30044: PUSH
30045: LD_OWVAR 1
30049: PLUS
30050: ST_TO_ADDR
// Arabian_siberite_attack_time = Arabian_siberite_attack_time + tick ;
30051: LD_ADDR_EXP 213
30055: PUSH
30056: LD_EXP 213
30060: PUSH
30061: LD_OWVAR 1
30065: PLUS
30066: ST_TO_ADDR
// Behemots_broadcast = Behemots_broadcast + tick ;
30067: LD_ADDR_EXP 203
30071: PUSH
30072: LD_EXP 203
30076: PUSH
30077: LD_OWVAR 1
30081: PLUS
30082: ST_TO_ADDR
// Alaskite_Bomb_Time = Alaskite_Bomb_Time + tick ;
30083: LD_ADDR_EXP 212
30087: PUSH
30088: LD_EXP 212
30092: PUSH
30093: LD_OWVAR 1
30097: PLUS
30098: ST_TO_ADDR
// Time_of_first_capture = Time_of_first_capture + tick ;
30099: LD_ADDR_EXP 204
30103: PUSH
30104: LD_EXP 204
30108: PUSH
30109: LD_OWVAR 1
30113: PLUS
30114: ST_TO_ADDR
// Behemot_attack_time = Behemot_attack_time + tick ;
30115: LD_ADDR_EXP 225
30119: PUSH
30120: LD_EXP 225
30124: PUSH
30125: LD_OWVAR 1
30129: PLUS
30130: ST_TO_ADDR
// enable ( Game_Continue ) ;
30131: LD_EXP 146
30135: ENABLE_MARKED
// enable ( Timer ) ;
30136: LD_EXP 159
30140: ENABLE_MARKED
// SetTech ( tech_Gun , americans , state_researched ) ;
30141: LD_INT 39
30143: PPUSH
30144: LD_EXP 176
30148: PPUSH
30149: LD_INT 2
30151: PPUSH
30152: CALL_OW 322
// SetTech ( tech_SolPow , americans , state_researched ) ;
30156: LD_INT 35
30158: PPUSH
30159: LD_EXP 176
30163: PPUSH
30164: LD_INT 2
30166: PPUSH
30167: CALL_OW 322
// SetTech ( tech_SolEng , americans , state_researched ) ;
30171: LD_INT 45
30173: PPUSH
30174: LD_EXP 176
30178: PPUSH
30179: LD_INT 2
30181: PPUSH
30182: CALL_OW 322
// All_americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
30186: LD_ADDR_EXP 61
30190: PUSH
30191: LD_INT 22
30193: PUSH
30194: LD_EXP 176
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 21
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PPUSH
30217: CALL_OW 69
30221: ST_TO_ADDR
// All_russians = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_human ] ] ) ;
30222: LD_ADDR_EXP 111
30226: PUSH
30227: LD_INT 22
30229: PUSH
30230: LD_EXP 178
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 21
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PPUSH
30253: CALL_OW 69
30257: ST_TO_ADDR
// end ;
30258: PPOPN 14
30260: END
// export function JMMIsReady ; begin
30261: LD_INT 0
30263: PPUSH
// Say ( JMM , D6c-JMM-2 ) ;
30264: LD_EXP 1
30268: PPUSH
30269: LD_STRING D6c-JMM-2
30271: PPUSH
30272: CALL_OW 88
// end ;
30276: LD_VAR 0 1
30280: RET
// every 0 0$0.2 marked 6 do
30281: GO 30283
30283: DISABLE
// begin Say ( Powell , D6-Pow-2 ) ;
30284: LD_EXP 2
30288: PPUSH
30289: LD_STRING D6-Pow-2
30291: PPUSH
30292: CALL_OW 88
// end ;
30296: END
// every 0 0$0.1 marked 5 do
30297: GO 30299
30299: DISABLE
// begin if IsInUnit ( Powell ) = 0 then
30300: LD_EXP 2
30304: PPUSH
30305: CALL_OW 310
30309: PUSH
30310: LD_INT 0
30312: EQUAL
30313: IFFALSE 30342
// begin if GetLives ( Powell ) < 900 then
30315: LD_EXP 2
30319: PPUSH
30320: CALL_OW 256
30324: PUSH
30325: LD_INT 900
30327: LESS
30328: IFFALSE 30342
// SetLives ( Powell , 1000 ) ;
30330: LD_EXP 2
30334: PPUSH
30335: LD_INT 1000
30337: PPUSH
30338: CALL_OW 234
// end ; if ( IsInUnit ( Powell ) <> 0 ) and ( IsInUnit ( Powell ) <> Powell_vehicle ) then
30342: LD_EXP 2
30346: PPUSH
30347: CALL_OW 310
30351: PUSH
30352: LD_INT 0
30354: NONEQUAL
30355: PUSH
30356: LD_EXP 2
30360: PPUSH
30361: CALL_OW 310
30365: PUSH
30366: LD_EXP 192
30370: NONEQUAL
30371: AND
30372: IFFALSE 30438
// begin if GetLives ( IsInUnit ( Powell ) ) < 400 then
30374: LD_EXP 2
30378: PPUSH
30379: CALL_OW 310
30383: PPUSH
30384: CALL_OW 256
30388: PUSH
30389: LD_INT 400
30391: LESS
30392: IFFALSE 30411
// SetLives ( IsInUnit ( Powell ) , 400 ) ;
30394: LD_EXP 2
30398: PPUSH
30399: CALL_OW 310
30403: PPUSH
30404: LD_INT 400
30406: PPUSH
30407: CALL_OW 234
// if GetLives ( Powell ) < 400 then
30411: LD_EXP 2
30415: PPUSH
30416: CALL_OW 256
30420: PUSH
30421: LD_INT 400
30423: LESS
30424: IFFALSE 30438
// SetLives ( Powell , 400 ) ;
30426: LD_EXP 2
30430: PPUSH
30431: LD_INT 400
30433: PPUSH
30434: CALL_OW 234
// end ; enable ;
30438: ENABLE
// end ;
30439: END
// every 0 0$2 trigger Center_To_Powell do var X , Y , NewX , NewY ;
30440: LD_EXP 194
30444: IFFALSE 30675
30446: GO 30448
30448: DISABLE
30449: LD_INT 0
30451: PPUSH
30452: PPUSH
30453: PPUSH
30454: PPUSH
// begin if IsInUnit ( Powell ) = Powell_vehicle then
30455: LD_EXP 2
30459: PPUSH
30460: CALL_OW 310
30464: PUSH
30465: LD_EXP 192
30469: EQUAL
30470: IFFALSE 30574
// begin X = GetX ( Powell_vehicle ) ;
30472: LD_ADDR_VAR 0 1
30476: PUSH
30477: LD_EXP 192
30481: PPUSH
30482: CALL_OW 250
30486: ST_TO_ADDR
// Y = GetY ( Powell_vehicle ) ;
30487: LD_ADDR_VAR 0 2
30491: PUSH
30492: LD_EXP 192
30496: PPUSH
30497: CALL_OW 251
30501: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( Powell_vehicle ) , 5 ) ;
30502: LD_ADDR_VAR 0 3
30506: PUSH
30507: LD_VAR 0 1
30511: PPUSH
30512: LD_EXP 192
30516: PPUSH
30517: CALL_OW 254
30521: PPUSH
30522: LD_INT 5
30524: PPUSH
30525: CALL_OW 272
30529: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( Powell_vehicle ) , 5 ) ;
30530: LD_ADDR_VAR 0 4
30534: PUSH
30535: LD_VAR 0 2
30539: PPUSH
30540: LD_EXP 192
30544: PPUSH
30545: CALL_OW 254
30549: PPUSH
30550: LD_INT 5
30552: PPUSH
30553: CALL_OW 273
30557: ST_TO_ADDR
// CenterOnXY ( NewX , NewY ) ;
30558: LD_VAR 0 3
30562: PPUSH
30563: LD_VAR 0 4
30567: PPUSH
30568: CALL_OW 84
// end else
30572: GO 30674
// begin X = GetX ( Powell ) ;
30574: LD_ADDR_VAR 0 1
30578: PUSH
30579: LD_EXP 2
30583: PPUSH
30584: CALL_OW 250
30588: ST_TO_ADDR
// Y = GetY ( Powell ) ;
30589: LD_ADDR_VAR 0 2
30593: PUSH
30594: LD_EXP 2
30598: PPUSH
30599: CALL_OW 251
30603: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( Powell ) , 2 ) ;
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_VAR 0 1
30613: PPUSH
30614: LD_EXP 2
30618: PPUSH
30619: CALL_OW 254
30623: PPUSH
30624: LD_INT 2
30626: PPUSH
30627: CALL_OW 272
30631: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( Powell ) , 2 ) ;
30632: LD_ADDR_VAR 0 4
30636: PUSH
30637: LD_VAR 0 2
30641: PPUSH
30642: LD_EXP 2
30646: PPUSH
30647: CALL_OW 254
30651: PPUSH
30652: LD_INT 2
30654: PPUSH
30655: CALL_OW 273
30659: ST_TO_ADDR
// CenterOnXY ( NewX , NewY ) ;
30660: LD_VAR 0 3
30664: PPUSH
30665: LD_VAR 0 4
30669: PPUSH
30670: CALL_OW 84
// end ; enable ;
30674: ENABLE
// end ;
30675: PPOPN 4
30677: END
// every 0 0$1 marked 1 do var Un , Count ;
30678: GO 30680
30680: DISABLE
30681: LD_INT 0
30683: PPUSH
30684: PPUSH
// begin if GetLives ( Powell ) < 950 then
30685: LD_EXP 2
30689: PPUSH
30690: CALL_OW 256
30694: PUSH
30695: LD_INT 950
30697: LESS
30698: IFFALSE 30707
// begin enable ( out_of_base ) ;
30700: LD_EXP 138
30704: ENABLE_MARKED
// exit ;
30705: GO 31006
// end ; Count = 0 ;
30707: LD_ADDR_VAR 0 2
30711: PUSH
30712: LD_INT 0
30714: ST_TO_ADDR
// for Un in ( JMM_Helpers ^ Joan ^ JMM ) do
30715: LD_ADDR_VAR 0 1
30719: PUSH
30720: LD_EXP 67
30724: PUSH
30725: LD_EXP 12
30729: ADD
30730: PUSH
30731: LD_EXP 1
30735: ADD
30736: PUSH
30737: FOR_IN
30738: IFFALSE 30813
// if ( not ( IsInArea ( Un , JMM_Hill ) ) and IsOk ( Un ) and ( Warning_Time + 0 0$15 ) < tick ) then
30740: LD_VAR 0 1
30744: PPUSH
30745: LD_INT 2
30747: PPUSH
30748: CALL_OW 308
30752: NOT
30753: PUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 302
30763: AND
30764: PUSH
30765: LD_EXP 188
30769: PUSH
30770: LD_INT 525
30772: PLUS
30773: PUSH
30774: LD_OWVAR 1
30778: LESS
30779: AND
30780: IFFALSE 30811
// begin Count = Count + 1 ;
30782: LD_ADDR_VAR 0 2
30786: PUSH
30787: LD_VAR 0 2
30791: PUSH
30792: LD_INT 1
30794: PLUS
30795: ST_TO_ADDR
// ComMoveXY ( Un , 68 , 107 ) ;
30796: LD_VAR 0 1
30800: PPUSH
30801: LD_INT 68
30803: PPUSH
30804: LD_INT 107
30806: PPUSH
30807: CALL_OW 111
// end ;
30811: GO 30737
30813: POP
30814: POP
// if Count then
30815: LD_VAR 0 2
30819: IFFALSE 31005
// begin Powell_warning = Powell_warning + 1 ;
30821: LD_ADDR_EXP 187
30825: PUSH
30826: LD_EXP 187
30830: PUSH
30831: LD_INT 1
30833: PLUS
30834: ST_TO_ADDR
// case Powell_warning of 1 :
30835: LD_EXP 187
30839: PUSH
30840: LD_INT 1
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30873
30848: POP
// begin Warning_Time = tick ;
30849: LD_ADDR_EXP 188
30853: PUSH
30854: LD_OWVAR 1
30858: ST_TO_ADDR
// Say ( Powell , DBack1-Pow-1 ) ;
30859: LD_EXP 2
30863: PPUSH
30864: LD_STRING DBack1-Pow-1
30866: PPUSH
30867: CALL_OW 88
// end ; 2 :
30871: GO 30935
30873: LD_INT 2
30875: DOUBLE
30876: EQUAL
30877: IFTRUE 30881
30879: GO 30906
30881: POP
// begin Warning_Time = tick ;
30882: LD_ADDR_EXP 188
30886: PUSH
30887: LD_OWVAR 1
30891: ST_TO_ADDR
// Say ( Powell , DBack2-Pow-1 ) ;
30892: LD_EXP 2
30896: PPUSH
30897: LD_STRING DBack2-Pow-1
30899: PPUSH
30900: CALL_OW 88
// end ; 3 :
30904: GO 30935
30906: LD_INT 3
30908: DOUBLE
30909: EQUAL
30910: IFTRUE 30914
30912: GO 30934
30914: POP
// begin Say ( Powell , DBack3-Pow-1 ) ;
30915: LD_EXP 2
30919: PPUSH
30920: LD_STRING DBack3-Pow-1
30922: PPUSH
30923: CALL_OW 88
// enable ( out_of_base ) ;
30927: LD_EXP 138
30931: ENABLE_MARKED
// end ; end ;
30932: GO 30935
30934: POP
// for Un in ( JMM_Helpers ^ Joan ^ JMM ) do
30935: LD_ADDR_VAR 0 1
30939: PUSH
30940: LD_EXP 67
30944: PUSH
30945: LD_EXP 12
30949: ADD
30950: PUSH
30951: LD_EXP 1
30955: ADD
30956: PUSH
30957: FOR_IN
30958: IFFALSE 31003
// if ( not ( IsInArea ( Un , JMM_Hill ) ) and IsOk ( Un ) ) then
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_INT 2
30967: PPUSH
30968: CALL_OW 308
30972: NOT
30973: PUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL_OW 302
30983: AND
30984: IFFALSE 31001
// begin ComMoveXY ( Un , 68 , 107 ) ;
30986: LD_VAR 0 1
30990: PPUSH
30991: LD_INT 68
30993: PPUSH
30994: LD_INT 107
30996: PPUSH
30997: CALL_OW 111
// end ;
31001: GO 30957
31003: POP
31004: POP
// end ; enable ;
31005: ENABLE
// end ;
31006: PPOPN 2
31008: END
// every 0 0$2 marked 7 do var Sum_X , Sum_Y , New_X , New_Y , Number , Un ;
31009: GO 31011
31011: DISABLE
31012: LD_INT 0
31014: PPUSH
31015: PPUSH
31016: PPUSH
31017: PPUSH
31018: PPUSH
31019: PPUSH
// begin Number = UnitFilter ( Soldiers ^ Soldiers1 , [ f_alive ] ) ;
31020: LD_ADDR_VAR 0 5
31024: PUSH
31025: LD_LOC 6
31029: PUSH
31030: LD_LOC 7
31034: ADD
31035: PPUSH
31036: LD_INT 51
31038: PUSH
31039: EMPTY
31040: LIST
31041: PPUSH
31042: CALL_OW 72
31046: ST_TO_ADDR
// if Number > 0 then
31047: LD_VAR 0 5
31051: PUSH
31052: LD_INT 0
31054: GREATER
31055: IFFALSE 31214
// begin for Un in ( Soldiers ^ Soldiers1 ) do
31057: LD_ADDR_VAR 0 6
31061: PUSH
31062: LD_LOC 6
31066: PUSH
31067: LD_LOC 7
31071: ADD
31072: PUSH
31073: FOR_IN
31074: IFFALSE 31142
// begin if IsLive ( Un ) then
31076: LD_VAR 0 6
31080: PPUSH
31081: CALL_OW 300
31085: IFFALSE 31108
// Sum_X = Sum_X + GetX ( Un ) ;
31087: LD_ADDR_VAR 0 1
31091: PUSH
31092: LD_VAR 0 1
31096: PUSH
31097: LD_VAR 0 6
31101: PPUSH
31102: CALL_OW 250
31106: PLUS
31107: ST_TO_ADDR
// if IsLive ( Un ) then
31108: LD_VAR 0 6
31112: PPUSH
31113: CALL_OW 300
31117: IFFALSE 31140
// Sum_Y = Sum_Y + GetY ( Un ) ;
31119: LD_ADDR_VAR 0 2
31123: PUSH
31124: LD_VAR 0 2
31128: PUSH
31129: LD_VAR 0 6
31133: PPUSH
31134: CALL_OW 251
31138: PLUS
31139: ST_TO_ADDR
// end ;
31140: GO 31073
31142: POP
31143: POP
// New_X = ( Sum_X + Number / 2 ) div Number ;
31144: LD_ADDR_VAR 0 3
31148: PUSH
31149: LD_VAR 0 1
31153: PUSH
31154: LD_VAR 0 5
31158: PUSH
31159: LD_INT 2
31161: DIVREAL
31162: PLUS
31163: PUSH
31164: LD_VAR 0 5
31168: DIV
31169: ST_TO_ADDR
// New_Y = ( ( Sum_Y + Number / 2 ) div Number ) - 5 ;
31170: LD_ADDR_VAR 0 4
31174: PUSH
31175: LD_VAR 0 2
31179: PUSH
31180: LD_VAR 0 5
31184: PUSH
31185: LD_INT 2
31187: DIVREAL
31188: PLUS
31189: PUSH
31190: LD_VAR 0 5
31194: DIV
31195: PUSH
31196: LD_INT 5
31198: MINUS
31199: ST_TO_ADDR
// CenterOnXY ( New_X , New_Y ) ;
31200: LD_VAR 0 3
31204: PPUSH
31205: LD_VAR 0 4
31209: PPUSH
31210: CALL_OW 84
// end ; enable ;
31214: ENABLE
// end ;
31215: PPOPN 6
31217: END
// every 0 0$1 marked 24 do
31218: GO 31220
31220: DISABLE
// begin display_strings = [ #Am15-1 , tick - Time_of_Ingame_Run_Over ] ;
31221: LD_ADDR_OWVAR 47
31225: PUSH
31226: LD_STRING #Am15-1
31228: PUSH
31229: LD_OWVAR 1
31233: PUSH
31234: LD_EXP 189
31238: MINUS
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: ST_TO_ADDR
// enable ;
31244: ENABLE
// end ; end_of_file
31245: END
// export function StartArabianBase ; var units_to_protect ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
// units_to_protect = FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_building ] ] ) ;
31250: LD_ADDR_VAR 0 2
31254: PUSH
31255: LD_INT 22
31257: PUSH
31258: LD_EXP 180
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 21
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PPUSH
31281: CALL_OW 69
31285: ST_TO_ADDR
// Arabian_reg_id = McRegistry ( arabians , [ [ mc_reg_area_to_guard , Arabians_Base ] , [ mc_reg_area_to_protect , Arabians_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
31286: LD_ADDR_EXP 234
31290: PUSH
31291: LD_EXP 180
31295: PPUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 4
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: PUSH
31309: LD_INT 4
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 4
31318: PUSH
31319: LD_VAR 0 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 8
31330: NEG
31331: PUSH
31332: LD_INT 7
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: PPUSH
31343: CALL_OW 399
31347: ST_TO_ADDR
// Arabian_def_id = McDefend ( 100 , Arabian_reg_id , Arabian_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Ar_Base ] , [ mc_retreat_area_people , Ar_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
31348: LD_ADDR_EXP 235
31352: PUSH
31353: LD_INT 100
31355: PPUSH
31356: LD_EXP 234
31360: PPUSH
31361: LD_EXP 80
31365: PUSH
31366: LD_VAR 0 2
31370: ADD
31371: PPUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 17
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 7
31384: PUSH
31385: LD_INT 23
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 5
31394: PUSH
31395: LD_INT 550
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: PPUSH
31407: CALL_OW 401
31411: ST_TO_ADDR
// Arabian_build_id = McBase ( 50 , Arabian_Engineers , Arabian_Buildings , [ ] , [ ] , [ mc_base_cont ] ) ;
31412: LD_ADDR_EXP 236
31416: PUSH
31417: LD_INT 50
31419: PPUSH
31420: LD_EXP 81
31424: PPUSH
31425: LD_EXP 88
31429: PPUSH
31430: EMPTY
31431: PPUSH
31432: EMPTY
31433: PPUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: PPUSH
31440: CALL_OW 397
31444: ST_TO_ADDR
// end ;
31445: LD_VAR 0 1
31449: RET
// export function SendArabianBack ( Un ) ; var Hex , New_Hex , i ; begin
31450: LD_INT 0
31452: PPUSH
31453: PPUSH
31454: PPUSH
31455: PPUSH
// if GetClass ( Un ) = class_scientistic then
31456: LD_VAR 0 1
31460: PPUSH
31461: CALL_OW 257
31465: PUSH
31466: LD_INT 4
31468: EQUAL
31469: IFFALSE 31489
// Hex = RandHexArea ( Ar_Heal , false ) else
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: LD_INT 23
31478: PPUSH
31479: LD_INT 0
31481: PPUSH
31482: CALL_OW 16
31486: ST_TO_ADDR
31487: GO 31505
// Hex = RandHexArea ( Ar_Base , false ) ;
31489: LD_ADDR_VAR 0 3
31493: PUSH
31494: LD_INT 17
31496: PPUSH
31497: LD_INT 0
31499: PPUSH
31500: CALL_OW 16
31504: ST_TO_ADDR
// for i = 1 to 10 do
31505: LD_ADDR_VAR 0 5
31509: PUSH
31510: DOUBLE
31511: LD_INT 1
31513: DEC
31514: ST_TO_ADDR
31515: LD_INT 10
31517: PUSH
31518: FOR_TO
31519: IFFALSE 31640
// begin if GetClass ( Un ) = class_scientistic then
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 257
31530: PUSH
31531: LD_INT 4
31533: EQUAL
31534: IFFALSE 31554
// New_Hex = RandHexArea ( Ar_Heal , false ) else
31536: LD_ADDR_VAR 0 4
31540: PUSH
31541: LD_INT 23
31543: PPUSH
31544: LD_INT 0
31546: PPUSH
31547: CALL_OW 16
31551: ST_TO_ADDR
31552: GO 31570
// New_Hex = RandHexArea ( Ar_Base , false ) ;
31554: LD_ADDR_VAR 0 4
31558: PUSH
31559: LD_INT 17
31561: PPUSH
31562: LD_INT 0
31564: PPUSH
31565: CALL_OW 16
31569: ST_TO_ADDR
// if GetDistUnitXY ( Un , New_Hex [ 1 ] , New_Hex [ 2 ] ) < GetDistUnitXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) then
31570: LD_VAR 0 1
31574: PPUSH
31575: LD_VAR 0 4
31579: PUSH
31580: LD_INT 1
31582: ARRAY
31583: PPUSH
31584: LD_VAR 0 4
31588: PUSH
31589: LD_INT 2
31591: ARRAY
31592: PPUSH
31593: CALL_OW 297
31597: PUSH
31598: LD_VAR 0 1
31602: PPUSH
31603: LD_VAR 0 3
31607: PUSH
31608: LD_INT 1
31610: ARRAY
31611: PPUSH
31612: LD_VAR 0 3
31616: PUSH
31617: LD_INT 2
31619: ARRAY
31620: PPUSH
31621: CALL_OW 297
31625: LESS
31626: IFFALSE 31638
// Hex = New_Hex ;
31628: LD_ADDR_VAR 0 3
31632: PUSH
31633: LD_VAR 0 4
31637: ST_TO_ADDR
// end ;
31638: GO 31518
31640: POP
31641: POP
// if GetUnitMc ( Un ) = Arabian_def_id then
31642: LD_VAR 0 1
31646: PPUSH
31647: CALL_OW 388
31651: PUSH
31652: LD_EXP 235
31656: EQUAL
31657: IFFALSE 31728
// begin RemoveMcUnits ( Arabian_def_id , Un ) ;
31659: LD_EXP 235
31663: PPUSH
31664: LD_VAR 0 1
31668: PPUSH
31669: CALL_OW 391
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
31673: LD_VAR 0 1
31677: PPUSH
31678: LD_VAR 0 3
31682: PUSH
31683: LD_INT 1
31685: ARRAY
31686: PPUSH
31687: LD_VAR 0 3
31691: PUSH
31692: LD_INT 2
31694: ARRAY
31695: PPUSH
31696: CALL_OW 111
// WaitTask ( Un , 1 ) ;
31700: LD_VAR 0 1
31704: PPUSH
31705: LD_INT 1
31707: PPUSH
31708: CALL 17876 0 2
// AddMcUnits ( Arabian_def_id , Un ) ;
31712: LD_EXP 235
31716: PPUSH
31717: LD_VAR 0 1
31721: PPUSH
31722: CALL_OW 390
// end else
31726: GO 31767
// begin ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
31728: LD_VAR 0 1
31732: PPUSH
31733: LD_VAR 0 3
31737: PUSH
31738: LD_INT 1
31740: ARRAY
31741: PPUSH
31742: LD_VAR 0 3
31746: PUSH
31747: LD_INT 2
31749: ARRAY
31750: PPUSH
31751: CALL_OW 111
// WaitTask ( Un , 1 ) ;
31755: LD_VAR 0 1
31759: PPUSH
31760: LD_INT 1
31762: PPUSH
31763: CALL 17876 0 2
// end ; end ;
31767: LD_VAR 0 2
31771: RET
// every 0 0$10 trigger not ( Friend_has_come ) do var Un ;
31772: LD_EXP 226
31776: NOT
31777: IFFALSE 31889
31779: GO 31781
31781: DISABLE
31782: LD_INT 0
31784: PPUSH
// begin for Un in All_Arabians do
31785: LD_ADDR_VAR 0 1
31789: PUSH
31790: LD_EXP 79
31794: PUSH
31795: FOR_IN
31796: IFFALSE 31886
// begin if ( ( GetClass ( Un ) = class_scientistic ) and not ( IsInArea ( Un , Ar_Heal ) ) or ( GetClass ( Un ) <> class_scientistic ) and not ( IsInArea ( Un , Ar_Base ) ) ) then
31798: LD_VAR 0 1
31802: PPUSH
31803: CALL_OW 257
31807: PUSH
31808: LD_INT 4
31810: EQUAL
31811: PUSH
31812: LD_VAR 0 1
31816: PPUSH
31817: LD_INT 23
31819: PPUSH
31820: CALL_OW 308
31824: NOT
31825: AND
31826: PUSH
31827: LD_VAR 0 1
31831: PPUSH
31832: CALL_OW 257
31836: PUSH
31837: LD_INT 4
31839: NONEQUAL
31840: PUSH
31841: LD_VAR 0 1
31845: PPUSH
31846: LD_INT 17
31848: PPUSH
31849: CALL_OW 308
31853: NOT
31854: AND
31855: OR
31856: IFFALSE 31884
// begin Arabian_Outside = Un ;
31858: LD_ADDR_EXP 86
31862: PUSH
31863: LD_VAR 0 1
31867: ST_TO_ADDR
// RaiseSailEvent ( Send_Arabian_Back ) ;
31868: LD_EXP 174
31872: PPUSH
31873: CALL_OW 427
// Wait ( 1 ) ;
31877: LD_INT 1
31879: PPUSH
31880: CALL_OW 67
// end end ;
31884: GO 31795
31886: POP
31887: POP
// enable ;
31888: ENABLE
// end ;
31889: PPOPN 1
31891: END
// export function RepairArabExtensions ; begin
31892: LD_INT 0
31894: PPUSH
// uc_nation = nation_russian ;
31895: LD_ADDR_OWVAR 21
31899: PUSH
31900: LD_INT 3
31902: ST_TO_ADDR
// uc_side = arabians ;
31903: LD_ADDR_OWVAR 20
31907: PUSH
31908: LD_EXP 180
31912: ST_TO_ADDR
// if not ( IsDead ( ArRuSibExt ) ) and GetLives ( ArRuSibExt ) < 1000 then
31913: LD_INT 116
31915: PPUSH
31916: CALL_OW 301
31920: NOT
31921: PUSH
31922: LD_INT 116
31924: PPUSH
31925: CALL_OW 256
31929: PUSH
31930: LD_INT 1000
31932: LESS
31933: AND
31934: IFFALSE 31946
// SetLives ( ArRuSibExt , 1000 ) ;
31936: LD_INT 116
31938: PPUSH
31939: LD_INT 1000
31941: PPUSH
31942: CALL_OW 234
// if not ( IsDead ( ArRuRoExt ) ) and GetLives ( ArRuRoExt ) < 1000 then
31946: LD_INT 115
31948: PPUSH
31949: CALL_OW 301
31953: NOT
31954: PUSH
31955: LD_INT 115
31957: PPUSH
31958: CALL_OW 256
31962: PUSH
31963: LD_INT 1000
31965: LESS
31966: AND
31967: IFFALSE 31979
// SetLives ( ArRuRoExt , 1000 ) ;
31969: LD_INT 115
31971: PPUSH
31972: LD_INT 1000
31974: PPUSH
31975: CALL_OW 234
// if not ( IsDead ( ArRuTrackExt ) ) and GetLives ( ArRuTrackExt ) < 1000 then
31979: LD_INT 141
31981: PPUSH
31982: CALL_OW 301
31986: NOT
31987: PUSH
31988: LD_INT 141
31990: PPUSH
31991: CALL_OW 256
31995: PUSH
31996: LD_INT 1000
31998: LESS
31999: AND
32000: IFFALSE 32012
// SetLives ( ArRuTrackExt , 1000 ) ;
32002: LD_INT 141
32004: PPUSH
32005: LD_INT 1000
32007: PPUSH
32008: CALL_OW 234
// if not ( IsDead ( ArRuCompExt ) ) and GetLives ( ArRuTrackExt ) < 1000 then
32012: LD_INT 142
32014: PPUSH
32015: CALL_OW 301
32019: NOT
32020: PUSH
32021: LD_INT 141
32023: PPUSH
32024: CALL_OW 256
32028: PUSH
32029: LD_INT 1000
32031: LESS
32032: AND
32033: IFFALSE 32045
// SetLives ( ArRuTrackExt , 1000 ) ;
32035: LD_INT 141
32037: PPUSH
32038: LD_INT 1000
32040: PPUSH
32041: CALL_OW 234
// end ;
32045: LD_VAR 0 1
32049: RET
// every 0 0$1 marked 9 do
32050: GO 32052
32052: DISABLE
// begin disable ;
32053: DISABLE
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
32054: LD_INT 84
32056: PPUSH
32057: LD_INT 4
32059: PPUSH
32060: CALL_OW 438
32064: PPUSH
32065: CALL_OW 274
32069: PPUSH
32070: LD_INT 1
32072: PPUSH
32073: LD_INT 200
32075: PPUSH
32076: CALL_OW 277
// PlaceUnitArea ( Kozlov , Ar_Base , false ) ;
32080: LD_EXP 22
32084: PPUSH
32085: LD_INT 17
32087: PPUSH
32088: LD_INT 0
32090: PPUSH
32091: CALL_OW 49
// Wait ( 1 ) ;
32095: LD_INT 1
32097: PPUSH
32098: CALL_OW 67
// ComEnterUnit ( Kozlov , ArDep1 ) ;
32102: LD_EXP 22
32106: PPUSH
32107: LD_INT 122
32109: PPUSH
32110: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_engineer ) ;
32114: LD_EXP 22
32118: PPUSH
32119: LD_INT 2
32121: PPUSH
32122: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
32126: LD_EXP 22
32130: PPUSH
32131: CALL_OW 182
// AddComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
32135: LD_EXP 22
32139: PPUSH
32140: LD_INT 2
32142: PPUSH
32143: LD_INT 78
32145: PPUSH
32146: LD_INT 12
32148: PPUSH
32149: LD_INT 3
32151: PPUSH
32152: CALL_OW 205
// while GetBType ( GetUnitNumber ( 78 , 12 ) ) <> b_workshop do
32156: LD_INT 78
32158: PPUSH
32159: LD_INT 12
32161: PPUSH
32162: CALL_OW 438
32166: PPUSH
32167: CALL_OW 266
32171: PUSH
32172: LD_INT 2
32174: NONEQUAL
32175: IFFALSE 32186
// begin Wait ( 0 0$1 ) ;
32177: LD_INT 35
32179: PPUSH
32180: CALL_OW 67
// end ;
32184: GO 32156
// RemoveMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
32186: LD_EXP 236
32190: PPUSH
32191: LD_EXP 81
32195: PPUSH
32196: CALL_OW 391
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 78 , 12 ) ) ;
32200: LD_EXP 81
32204: PPUSH
32205: LD_INT 78
32207: PPUSH
32208: LD_INT 12
32210: PPUSH
32211: CALL_OW 438
32215: PPUSH
32216: CALL_OW 130
// WaitTask ( Kozlov , 1 ) ;
32220: LD_EXP 22
32224: PPUSH
32225: LD_INT 1
32227: PPUSH
32228: CALL 17876 0 2
// ComUpgrade ( GetUnitNumber ( 78 , 12 ) ) ;
32232: LD_INT 78
32234: PPUSH
32235: LD_INT 12
32237: PPUSH
32238: CALL_OW 438
32242: PPUSH
32243: CALL_OW 146
// repeat Wait ( 1 ) ;
32247: LD_INT 1
32249: PPUSH
32250: CALL_OW 67
// until GetBType ( GetUnitNumber ( 78 , 12 ) ) = b_factory ;
32254: LD_INT 78
32256: PPUSH
32257: LD_INT 12
32259: PPUSH
32260: CALL_OW 438
32264: PPUSH
32265: CALL_OW 266
32269: PUSH
32270: LD_INT 3
32272: EQUAL
32273: IFFALSE 32247
// ComRepairBuilding ( Kozlov ^ Arabian_Engineers , GetUnitNumber ( 78 , 12 ) ) ;
32275: LD_EXP 22
32279: PUSH
32280: LD_EXP 81
32284: ADD
32285: PPUSH
32286: LD_INT 78
32288: PPUSH
32289: LD_INT 12
32291: PPUSH
32292: CALL_OW 438
32296: PPUSH
32297: CALL_OW 130
// WaitTask ( Kozlov , 1 ) ;
32301: LD_EXP 22
32305: PPUSH
32306: LD_INT 1
32308: PPUSH
32309: CALL 17876 0 2
// if IsDead ( ArRuSibExt ) then
32313: LD_INT 116
32315: PPUSH
32316: CALL_OW 301
32320: IFFALSE 32446
// begin SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_siberit , 200 ) ;
32322: LD_INT 84
32324: PPUSH
32325: LD_INT 4
32327: PPUSH
32328: CALL_OW 438
32332: PPUSH
32333: CALL_OW 274
32337: PPUSH
32338: LD_INT 3
32340: PPUSH
32341: LD_INT 200
32343: PPUSH
32344: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
32348: LD_INT 84
32350: PPUSH
32351: LD_INT 4
32353: PPUSH
32354: CALL_OW 438
32358: PPUSH
32359: CALL_OW 274
32363: PPUSH
32364: LD_INT 1
32366: PPUSH
32367: LD_INT 200
32369: PPUSH
32370: CALL_OW 277
// while GetBType ( GetUnitNumber ( 74 , 12 ) ) <> b_ext_siberium do
32374: LD_INT 74
32376: PPUSH
32377: LD_INT 12
32379: PPUSH
32380: CALL_OW 438
32384: PPUSH
32385: CALL_OW 266
32389: PUSH
32390: LD_INT 21
32392: NONEQUAL
32393: IFFALSE 32426
// begin ComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
32395: LD_EXP 22
32399: PPUSH
32400: LD_INT 21
32402: PPUSH
32403: LD_INT 74
32405: PPUSH
32406: LD_INT 12
32408: PPUSH
32409: LD_INT 1
32411: PPUSH
32412: CALL_OW 145
// Wait ( 0.5 ) ;
32416: LD_REAL  5.00000000000000E-0001
32419: PPUSH
32420: CALL_OW 67
// end ;
32424: GO 32374
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 74 , 12 ) ) ;
32426: LD_EXP 81
32430: PPUSH
32431: LD_INT 74
32433: PPUSH
32434: LD_INT 12
32436: PPUSH
32437: CALL_OW 438
32441: PPUSH
32442: CALL_OW 130
// end ; repeat Wait ( 2 ) ;
32446: LD_INT 2
32448: PPUSH
32449: CALL_OW 67
// until not ( HasTask ( Kozlov ) ) ;
32453: LD_EXP 22
32457: PPUSH
32458: CALL_OW 314
32462: NOT
32463: IFFALSE 32446
// WaitTask ( Kozlov , 1 ) ;
32465: LD_EXP 22
32469: PPUSH
32470: LD_INT 1
32472: PPUSH
32473: CALL 17876 0 2
// if IsDead ( ArRuTrackExt ) then
32477: LD_INT 141
32479: PPUSH
32480: CALL_OW 301
32484: IFFALSE 32610
// begin SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_siberit , 200 ) ;
32486: LD_INT 84
32488: PPUSH
32489: LD_INT 4
32491: PPUSH
32492: CALL_OW 438
32496: PPUSH
32497: CALL_OW 274
32501: PPUSH
32502: LD_INT 3
32504: PPUSH
32505: LD_INT 200
32507: PPUSH
32508: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
32512: LD_INT 84
32514: PPUSH
32515: LD_INT 4
32517: PPUSH
32518: CALL_OW 438
32522: PPUSH
32523: CALL_OW 274
32527: PPUSH
32528: LD_INT 1
32530: PPUSH
32531: LD_INT 200
32533: PPUSH
32534: CALL_OW 277
// while GetBType ( GetUnitNumber ( 81 , 12 ) ) <> b_ext_track do
32538: LD_INT 81
32540: PPUSH
32541: LD_INT 12
32543: PPUSH
32544: CALL_OW 438
32548: PPUSH
32549: CALL_OW 266
32553: PUSH
32554: LD_INT 16
32556: NONEQUAL
32557: IFFALSE 32590
// begin ComBuild ( Kozlov , b_ext_track , 81 , 12 , 4 ) ;
32559: LD_EXP 22
32563: PPUSH
32564: LD_INT 16
32566: PPUSH
32567: LD_INT 81
32569: PPUSH
32570: LD_INT 12
32572: PPUSH
32573: LD_INT 4
32575: PPUSH
32576: CALL_OW 145
// Wait ( 0.5 ) ;
32580: LD_REAL  5.00000000000000E-0001
32583: PPUSH
32584: CALL_OW 67
// end ;
32588: GO 32538
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 81 , 12 ) ) ;
32590: LD_EXP 81
32594: PPUSH
32595: LD_INT 81
32597: PPUSH
32598: LD_INT 12
32600: PPUSH
32601: CALL_OW 438
32605: PPUSH
32606: CALL_OW 130
// end ; repeat Wait ( 2 ) ;
32610: LD_INT 2
32612: PPUSH
32613: CALL_OW 67
// until not ( HasTask ( Kozlov ) ) ;
32617: LD_EXP 22
32621: PPUSH
32622: CALL_OW 314
32626: NOT
32627: IFFALSE 32610
// WaitTask ( Kozlov , 1 ) ;
32629: LD_EXP 22
32633: PPUSH
32634: LD_INT 1
32636: PPUSH
32637: CALL 17876 0 2
// SetResourceType ( GetBase ( GetUnitNumber ( 78 , 12 ) ) , mat_siberit , 200 ) ;
32641: LD_INT 78
32643: PPUSH
32644: LD_INT 12
32646: PPUSH
32647: CALL_OW 438
32651: PPUSH
32652: CALL_OW 274
32656: PPUSH
32657: LD_INT 3
32659: PPUSH
32660: LD_INT 200
32662: PPUSH
32663: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 78 , 12 ) ) , mat_cans , 200 ) ;
32667: LD_INT 78
32669: PPUSH
32670: LD_INT 12
32672: PPUSH
32673: CALL_OW 438
32677: PPUSH
32678: CALL_OW 274
32682: PPUSH
32683: LD_INT 1
32685: PPUSH
32686: LD_INT 200
32688: PPUSH
32689: CALL_OW 277
// ComEnterUnit ( Kozlov , GetUnitNumber ( 78 , 12 ) ) ;
32693: LD_EXP 22
32697: PPUSH
32698: LD_INT 78
32700: PPUSH
32701: LD_INT 12
32703: PPUSH
32704: CALL_OW 438
32708: PPUSH
32709: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_mechanic ) ;
32713: LD_EXP 22
32717: PPUSH
32718: LD_INT 3
32720: PPUSH
32721: CALL_OW 183
// AddComConstruct ( GetUnitNumber ( 78 , 12 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) ;
32725: LD_INT 78
32727: PPUSH
32728: LD_INT 12
32730: PPUSH
32731: CALL_OW 438
32735: PPUSH
32736: LD_INT 24
32738: PPUSH
32739: LD_INT 3
32741: PPUSH
32742: LD_INT 3
32744: PPUSH
32745: LD_INT 48
32747: PPUSH
32748: CALL_OW 185
// AddMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
32752: LD_EXP 236
32756: PPUSH
32757: LD_EXP 81
32761: PPUSH
32762: CALL_OW 390
// Wait ( 0 0$10 ) ;
32766: LD_INT 350
32768: PPUSH
32769: CALL_OW 67
// Starting_Construction_Time = tick ;
32773: LD_ADDR_EXP 231
32777: PUSH
32778: LD_OWVAR 1
32782: ST_TO_ADDR
// Construction_of_Arabian_rocket = true ;
32783: LD_ADDR_EXP 198
32787: PUSH
32788: LD_INT 1
32790: ST_TO_ADDR
// end ;
32791: END
// every 0 0$1 trigger Construction_of_Arabian_rocket and IsOk ( GetUnitNumber ( 78 , 12 ) ) marked 10 do var progress ;
32792: LD_EXP 198
32796: PUSH
32797: LD_INT 78
32799: PPUSH
32800: LD_INT 12
32802: PPUSH
32803: CALL_OW 438
32807: PPUSH
32808: CALL_OW 302
32812: AND
32813: IFFALSE 33023
32815: GO 32817
32817: DISABLE
32818: LD_INT 0
32820: PPUSH
// begin if ( tick < Arabian_siberite_attack_time ) and ( Number_of_Arabian_rocket = 1 ) and IsOk ( GetUnitNumber ( 78 , 12 ) ) and GetSide ( GetUnitNumber ( 78 , 12 ) ) = arabians then
32821: LD_OWVAR 1
32825: PUSH
32826: LD_EXP 213
32830: LESS
32831: PUSH
32832: LD_EXP 199
32836: PUSH
32837: LD_INT 1
32839: EQUAL
32840: AND
32841: PUSH
32842: LD_INT 78
32844: PPUSH
32845: LD_INT 12
32847: PPUSH
32848: CALL_OW 438
32852: PPUSH
32853: CALL_OW 302
32857: AND
32858: PUSH
32859: LD_INT 78
32861: PPUSH
32862: LD_INT 12
32864: PPUSH
32865: CALL_OW 438
32869: PPUSH
32870: CALL_OW 255
32874: PUSH
32875: LD_EXP 180
32879: EQUAL
32880: AND
32881: IFFALSE 32966
// begin progress = 100 * ( tick - Starting_Construction_Time ) / ( Arabian_siberite_attack_time - Starting_Construction_Time ) div 1 ;
32883: LD_ADDR_VAR 0 1
32887: PUSH
32888: LD_INT 100
32890: PUSH
32891: LD_OWVAR 1
32895: PUSH
32896: LD_EXP 231
32900: MINUS
32901: MUL
32902: PUSH
32903: LD_EXP 213
32907: PUSH
32908: LD_EXP 231
32912: MINUS
32913: DIVREAL
32914: PUSH
32915: LD_INT 1
32917: DIV
32918: ST_TO_ADDR
// if progress > 0 then
32919: LD_VAR 0 1
32923: PUSH
32924: LD_INT 0
32926: GREATER
32927: IFFALSE 32943
// progress = progress - 1 ;
32929: LD_ADDR_VAR 0 1
32933: PUSH
32934: LD_VAR 0 1
32938: PUSH
32939: LD_INT 1
32941: MINUS
32942: ST_TO_ADDR
// SetWorkingProgress ( GetUnitNumber ( 78 , 12 ) , progress ) ;
32943: LD_INT 78
32945: PPUSH
32946: LD_INT 12
32948: PPUSH
32949: CALL_OW 438
32953: PPUSH
32954: LD_VAR 0 1
32958: PPUSH
32959: CALL_OW 329
// enable ;
32963: ENABLE
// end else
32964: GO 33023
// if ( tick >= Arabian_siberite_attack_time ) and ( Number_of_Arabian_rocket = 1 ) and IsOk ( GetUnitNumber ( 78 , 12 ) ) then
32966: LD_OWVAR 1
32970: PUSH
32971: LD_EXP 213
32975: GREATEREQUAL
32976: PUSH
32977: LD_EXP 199
32981: PUSH
32982: LD_INT 1
32984: EQUAL
32985: AND
32986: PUSH
32987: LD_INT 78
32989: PPUSH
32990: LD_INT 12
32992: PPUSH
32993: CALL_OW 438
32997: PPUSH
32998: CALL_OW 302
33002: AND
33003: IFFALSE 33023
// begin SetWorkingProgress ( GetUnitNumber ( 78 , 12 ) , 99 ) ;
33005: LD_INT 78
33007: PPUSH
33008: LD_INT 12
33010: PPUSH
33011: CALL_OW 438
33015: PPUSH
33016: LD_INT 99
33018: PPUSH
33019: CALL_OW 329
// end ; end ;
33023: PPOPN 1
33025: END
// function SiberiteRocketAttack ( rocket , X , Y , Num_of_rocket ) ; var RocketDriver ; begin
33026: LD_INT 0
33028: PPUSH
33029: PPUSH
// ComAttackPlace ( rocket , X , Y ) ;
33030: LD_VAR 0 1
33034: PPUSH
33035: LD_VAR 0 2
33039: PPUSH
33040: LD_VAR 0 3
33044: PPUSH
33045: CALL_OW 116
// case Num_of_rocket of 1 :
33049: LD_VAR 0 4
33053: PUSH
33054: LD_INT 1
33056: DOUBLE
33057: EQUAL
33058: IFTRUE 33062
33060: GO 33077
33062: POP
// Say ( Kurt , D12-Kurt-1 ) ; 2 :
33063: LD_EXP 13
33067: PPUSH
33068: LD_STRING D12-Kurt-1
33070: PPUSH
33071: CALL_OW 88
33075: GO 33113
33077: LD_INT 2
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33112
33085: POP
// begin Say ( Kurt , D12a-Kurt-1 ) ;
33086: LD_EXP 13
33090: PPUSH
33091: LD_STRING D12a-Kurt-1
33093: PPUSH
33094: CALL_OW 88
// Say ( Roth , D12a-Roth-1 ) ;
33098: LD_EXP 20
33102: PPUSH
33103: LD_STRING D12a-Roth-1
33105: PPUSH
33106: CALL_OW 88
// end ; end ;
33110: GO 33113
33112: POP
// end ;
33113: LD_VAR 0 5
33117: RET
// function FriendComing ; var list_of_q , selection ; begin
33118: LD_INT 0
33120: PPUSH
33121: PPUSH
33122: PPUSH
// if Add_Legion_Objectives then
33123: LD_EXP 230
33127: IFFALSE 33163
// begin Add_Legion_Objectives = false ;
33129: LD_ADDR_EXP 230
33133: PUSH
33134: LD_INT 0
33136: ST_TO_ADDR
// if Number_of_Arabian_rocket = 1 then
33137: LD_EXP 199
33141: PUSH
33142: LD_INT 1
33144: EQUAL
33145: IFFALSE 33156
// ChangeMissionObjectives ( MlegionOut ) else
33147: LD_STRING MlegionOut
33149: PPUSH
33150: CALL_OW 337
33154: GO 33163
// ChangeMissionObjectives ( MlegionDel ) ;
33156: LD_STRING MlegionDel
33158: PPUSH
33159: CALL_OW 337
// end ; Friend_has_come = true ;
33163: LD_ADDR_EXP 226
33167: PUSH
33168: LD_INT 1
33170: ST_TO_ADDR
// KillMc ( Arabian_reg_id ) ;
33171: LD_EXP 234
33175: PPUSH
33176: CALL_OW 387
// KillMc ( Arabian_def_id ) ;
33180: LD_EXP 235
33184: PPUSH
33185: CALL_OW 387
// KillMc ( Arabian_build_id ) ;
33189: LD_EXP 236
33193: PPUSH
33194: CALL_OW 387
// if SeeXY ( americans , 31 , 4 ) and not ( GetUnitNumber ( 31 , 4 ) > 0 ) then
33198: LD_EXP 176
33202: PPUSH
33203: LD_INT 31
33205: PPUSH
33206: LD_INT 4
33208: PPUSH
33209: CALL_OW 293
33213: PUSH
33214: LD_INT 31
33216: PPUSH
33217: LD_INT 4
33219: PPUSH
33220: CALL_OW 438
33224: PUSH
33225: LD_INT 0
33227: GREATER
33228: NOT
33229: AND
33230: IFFALSE 33252
// PlaceUnitXY ( Friend , 31 , 4 , false ) else
33232: LD_EXP 21
33236: PPUSH
33237: LD_INT 31
33239: PPUSH
33240: LD_INT 4
33242: PPUSH
33243: LD_INT 0
33245: PPUSH
33246: CALL_OW 48
33250: GO 33381
// if SeeXY ( americans , 88 , 7 ) and not ( GetUnitNumber ( 88 , 7 ) > 0 ) then
33252: LD_EXP 176
33256: PPUSH
33257: LD_INT 88
33259: PPUSH
33260: LD_INT 7
33262: PPUSH
33263: CALL_OW 293
33267: PUSH
33268: LD_INT 88
33270: PPUSH
33271: LD_INT 7
33273: PPUSH
33274: CALL_OW 438
33278: PUSH
33279: LD_INT 0
33281: GREATER
33282: NOT
33283: AND
33284: IFFALSE 33306
// PlaceUnitXY ( Friend , 88 , 7 , false ) else
33286: LD_EXP 21
33290: PPUSH
33291: LD_INT 88
33293: PPUSH
33294: LD_INT 7
33296: PPUSH
33297: LD_INT 0
33299: PPUSH
33300: CALL_OW 48
33304: GO 33381
// if SeeXY ( americans , 101 , 23 ) and not ( GetUnitNumber ( 101 , 23 ) > 0 ) then
33306: LD_EXP 176
33310: PPUSH
33311: LD_INT 101
33313: PPUSH
33314: LD_INT 23
33316: PPUSH
33317: CALL_OW 293
33321: PUSH
33322: LD_INT 101
33324: PPUSH
33325: LD_INT 23
33327: PPUSH
33328: CALL_OW 438
33332: PUSH
33333: LD_INT 0
33335: GREATER
33336: NOT
33337: AND
33338: IFFALSE 33360
// PlaceUnitXY ( Friend , 101 , 23 , false ) else
33340: LD_EXP 21
33344: PPUSH
33345: LD_INT 101
33347: PPUSH
33348: LD_INT 23
33350: PPUSH
33351: LD_INT 0
33353: PPUSH
33354: CALL_OW 48
33358: GO 33381
// PlaceUnitXYR ( Friend , 6 , 4 , 3 , false ) ;
33360: LD_EXP 21
33364: PPUSH
33365: LD_INT 6
33367: PPUSH
33368: LD_INT 4
33370: PPUSH
33371: LD_INT 3
33373: PPUSH
33374: LD_INT 0
33376: PPUSH
33377: CALL_OW 50
// ComMoveUnit ( Friend , JMM ) ;
33381: LD_EXP 21
33385: PPUSH
33386: LD_EXP 1
33390: PPUSH
33391: CALL_OW 112
// SetAttitude ( americans , arabians , att_friend , true ) ;
33395: LD_EXP 176
33399: PPUSH
33400: LD_EXP 180
33404: PPUSH
33405: LD_INT 1
33407: PPUSH
33408: LD_INT 1
33410: PPUSH
33411: CALL_OW 80
// All_Americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
33415: LD_ADDR_EXP 61
33419: PUSH
33420: LD_INT 22
33422: PUSH
33423: LD_EXP 176
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 21
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PPUSH
33446: CALL_OW 69
33450: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
33451: LD_INT 35
33453: PPUSH
33454: CALL_OW 67
// until UnitFilter ( All_Americans , [ f_dist , Friend , 4 ] ) > 0 ;
33458: LD_EXP 61
33462: PPUSH
33463: LD_INT 91
33465: PUSH
33466: LD_EXP 21
33470: PUSH
33471: LD_INT 4
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: PPUSH
33479: CALL_OW 72
33483: PUSH
33484: LD_INT 0
33486: GREATER
33487: IFFALSE 33451
// ComHold ( Friend ) ;
33489: LD_EXP 21
33493: PPUSH
33494: CALL_OW 140
// CenterNowOnUnits ( Friend ) ;
33498: LD_EXP 21
33502: PPUSH
33503: CALL_OW 87
// Wait ( 0 0$0.5 ) ;
33507: LD_INT 18
33509: PPUSH
33510: CALL_OW 67
// DialogueON ;
33514: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
33518: LD_EXP 1
33522: PPUSH
33523: LD_STRING D14-JMM-1
33525: PPUSH
33526: CALL_OW 88
// Say ( Friend , D14-Friend-1 ) ;
33530: LD_EXP 21
33534: PPUSH
33535: LD_STRING D14-Friend-1
33537: PPUSH
33538: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
33542: LD_EXP 1
33546: PPUSH
33547: LD_STRING D14-JMM-2
33549: PPUSH
33550: CALL_OW 88
// Say ( Friend , D14-Friend-2 ) ;
33554: LD_EXP 21
33558: PPUSH
33559: LD_STRING D14-Friend-2
33561: PPUSH
33562: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
33566: LD_EXP 1
33570: PPUSH
33571: LD_STRING D14-JMM-3
33573: PPUSH
33574: CALL_OW 88
// Say ( Friend , D14-Friend-3 ) ;
33578: LD_EXP 21
33582: PPUSH
33583: LD_STRING D14-Friend-3
33585: PPUSH
33586: CALL_OW 88
// list_of_q = [ 1 , 2 , 3 ] ;
33590: LD_ADDR_VAR 0 2
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 3
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: ST_TO_ADDR
// selection = SelectiveQuery ( Q14 , list_of_q ) ;
33609: LD_ADDR_VAR 0 3
33613: PUSH
33614: LD_STRING Q14
33616: PPUSH
33617: LD_VAR 0 2
33621: PPUSH
33622: CALL_OW 98
33626: ST_TO_ADDR
// case selection of 1 :
33627: LD_VAR 0 3
33631: PUSH
33632: LD_INT 1
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33696
33640: POP
// begin Say ( JMM , D14a-JMM-1 ) ;
33641: LD_EXP 1
33645: PPUSH
33646: LD_STRING D14a-JMM-1
33648: PPUSH
33649: CALL_OW 88
// SetSide ( Friend , americans ) ;
33653: LD_EXP 21
33657: PPUSH
33658: LD_EXP 176
33662: PPUSH
33663: CALL_OW 235
// All_americans = All_americans ^ [ Friend ] ;
33667: LD_ADDR_EXP 61
33671: PUSH
33672: LD_EXP 61
33676: PUSH
33677: LD_EXP 21
33681: PUSH
33682: EMPTY
33683: LIST
33684: ADD
33685: ST_TO_ADDR
// Friend_Accepted = true ;
33686: LD_ADDR_EXP 219
33690: PUSH
33691: LD_INT 1
33693: ST_TO_ADDR
// end ; 2 :
33694: GO 33794
33696: LD_INT 2
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33726
33704: POP
// begin Say ( JMM , D14b-JMM-1 ) ;
33705: LD_EXP 1
33709: PPUSH
33710: LD_STRING D14b-JMM-1
33712: PPUSH
33713: CALL_OW 88
// Wait ( 0 0$1 ) ;
33717: LD_INT 35
33719: PPUSH
33720: CALL_OW 67
// end ; 3 :
33724: GO 33794
33726: LD_INT 3
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 33793
33734: POP
// begin Say ( JMM , D14c-JMM-1 ) ;
33735: LD_EXP 1
33739: PPUSH
33740: LD_STRING D14c-JMM-1
33742: PPUSH
33743: CALL_OW 88
// Say ( Friend , D14c-Friend-1 ) ;
33747: LD_EXP 21
33751: PPUSH
33752: LD_STRING D14c-Friend-1
33754: PPUSH
33755: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
33759: LD_EXP 1
33763: PPUSH
33764: LD_STRING D14c-JMM-2
33766: PPUSH
33767: CALL_OW 88
// SetAttitude ( americans , arabians , att_enemy , true ) ;
33771: LD_EXP 176
33775: PPUSH
33776: LD_EXP 180
33780: PPUSH
33781: LD_INT 2
33783: PPUSH
33784: LD_INT 1
33786: PPUSH
33787: CALL_OW 80
// end ; end ;
33791: GO 33794
33793: POP
// DialogueOFF ;
33794: CALL_OW 7
// if GetSide ( Friend ) = arabians then
33798: LD_EXP 21
33802: PPUSH
33803: CALL_OW 255
33807: PUSH
33808: LD_EXP 180
33812: EQUAL
33813: IFFALSE 33860
// begin ComMoveXY ( Friend , 4 , 3 ) ;
33815: LD_EXP 21
33819: PPUSH
33820: LD_INT 4
33822: PPUSH
33823: LD_INT 3
33825: PPUSH
33826: CALL_OW 111
// AddComHold ( Friend ) ;
33830: LD_EXP 21
33834: PPUSH
33835: CALL_OW 200
// WaitTask ( Friend , 1 ) ;
33839: LD_EXP 21
33843: PPUSH
33844: LD_INT 1
33846: PPUSH
33847: CALL 17876 0 2
// DestroyUnit ( Friend ) ;
33851: LD_EXP 21
33855: PPUSH
33856: CALL_OW 65
// end ; end ;
33860: LD_VAR 0 1
33864: RET
// export function ArabianPersonIsDead ; var unit_lives , Un , Unit_with_max_lives , X , Y , dir , cl , InUn , Units_to_stop , Mech_in_fact , ar_units ; begin
33865: LD_INT 0
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
// ar_units = FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] , f_not , [ f_nation , nation_nature ] ] ) diff [ Kozlov , Friend , Kurt ] ;
33879: LD_ADDR_VAR 0 12
33883: PUSH
33884: LD_INT 22
33886: PUSH
33887: LD_EXP 180
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 21
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 51
33908: PUSH
33909: EMPTY
33910: LIST
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: LD_INT 23
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: PPUSH
33932: CALL_OW 69
33936: PUSH
33937: LD_EXP 22
33941: PUSH
33942: LD_EXP 21
33946: PUSH
33947: LD_EXP 13
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: DIFF
33957: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] ] ) = 0 and not ( Friend_has_come ) then
33958: LD_INT 22
33960: PUSH
33961: LD_EXP 180
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 21
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 51
33982: PUSH
33983: EMPTY
33984: LIST
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: PPUSH
33991: CALL_OW 69
33995: PUSH
33996: LD_INT 0
33998: EQUAL
33999: PUSH
34000: LD_EXP 226
34004: NOT
34005: AND
34006: IFFALSE 34012
// FriendComing ;
34008: CALL 33118 0 0
// if ar_units = 8 then
34012: LD_VAR 0 12
34016: PUSH
34017: LD_INT 8
34019: EQUAL
34020: IFFALSE 34151
// begin Mech_in_fact = UnitsInside ( ArFact ) ;
34022: LD_ADDR_VAR 0 11
34026: PUSH
34027: LD_INT 117
34029: PPUSH
34030: CALL_OW 313
34034: ST_TO_ADDR
// ComExitBuilding ( Mech_in_fact ) ;
34035: LD_VAR 0 11
34039: PPUSH
34040: CALL_OW 122
// AddMcUnits ( Arabian_def_id , Mech_in_fact ) ;
34044: LD_EXP 235
34048: PPUSH
34049: LD_VAR 0 11
34053: PPUSH
34054: CALL_OW 390
// Wait ( 0 0$2 ) ;
34058: LD_INT 70
34060: PPUSH
34061: CALL_OW 67
// SetLives ( UnitFilter ( [ GetUnitNumber ( 89 , 21 ) , GetUnitNumber ( 93 , 21 ) , GetUnitNumber ( 89 , 18 ) , GetUnitNumber ( 92 , 24 ) , GetUnitNumber ( 44 , 3 ) , ] , [ f_side , arabians ] ) , 0 ) ;
34065: LD_INT 89
34067: PPUSH
34068: LD_INT 21
34070: PPUSH
34071: CALL_OW 438
34075: PUSH
34076: LD_INT 93
34078: PPUSH
34079: LD_INT 21
34081: PPUSH
34082: CALL_OW 438
34086: PUSH
34087: LD_INT 89
34089: PPUSH
34090: LD_INT 18
34092: PPUSH
34093: CALL_OW 438
34097: PUSH
34098: LD_INT 92
34100: PPUSH
34101: LD_INT 24
34103: PPUSH
34104: CALL_OW 438
34108: PUSH
34109: LD_INT 44
34111: PPUSH
34112: LD_INT 3
34114: PPUSH
34115: CALL_OW 438
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: PPUSH
34127: LD_INT 22
34129: PUSH
34130: LD_EXP 180
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PPUSH
34139: CALL_OW 72
34143: PPUSH
34144: LD_INT 0
34146: PPUSH
34147: CALL_OW 234
// end ; if ar_units = 4 then
34151: LD_VAR 0 12
34155: PUSH
34156: LD_INT 4
34158: EQUAL
34159: IFFALSE 35213
// begin SetAttitude ( arabians , russians , att_friend , true ) ;
34161: LD_EXP 180
34165: PPUSH
34166: LD_EXP 178
34170: PPUSH
34171: LD_INT 1
34173: PPUSH
34174: LD_INT 1
34176: PPUSH
34177: CALL_OW 80
// Units_to_stop = FilterAllUnits ( [ [ f_side , americans ] , [ f_side , arabians ] , [ f_ok ] ] ) ;
34181: LD_ADDR_VAR 0 10
34185: PUSH
34186: LD_INT 22
34188: PUSH
34189: LD_EXP 176
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 22
34200: PUSH
34201: LD_EXP 180
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 50
34212: PUSH
34213: EMPTY
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: PPUSH
34221: CALL_OW 69
34225: ST_TO_ADDR
// ComStop ( Units_to_stop ) ;
34226: LD_VAR 0 10
34230: PPUSH
34231: CALL_OW 141
// SetLives ( [ GetUnitNumber ( 78 , 12 ) , Kozlov ] ^ UnitFilter ( [ GetUnitNumber ( 91 , 3 ) , GetUnitNumber ( 93 , 7 ) ] , [ f_side , arabians ] ) , 0 ) ;
34235: LD_INT 78
34237: PPUSH
34238: LD_INT 12
34240: PPUSH
34241: CALL_OW 438
34245: PUSH
34246: LD_EXP 22
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 91
34257: PPUSH
34258: LD_INT 3
34260: PPUSH
34261: CALL_OW 438
34265: PUSH
34266: LD_INT 93
34268: PPUSH
34269: LD_INT 7
34271: PPUSH
34272: CALL_OW 438
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PPUSH
34281: LD_INT 22
34283: PUSH
34284: LD_EXP 180
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PPUSH
34293: CALL_OW 72
34297: ADD
34298: PPUSH
34299: LD_INT 0
34301: PPUSH
34302: CALL_OW 234
// SetResourceType ( GetBase ( ArDep1 ) , mat_cans , 20 ) ;
34306: LD_INT 122
34308: PPUSH
34309: CALL_OW 274
34313: PPUSH
34314: LD_INT 1
34316: PPUSH
34317: LD_INT 20
34319: PPUSH
34320: CALL_OW 277
// SetResourceType ( GetBase ( ArDep1 ) , mat_siberit , 10 ) ;
34324: LD_INT 122
34326: PPUSH
34327: CALL_OW 274
34331: PPUSH
34332: LD_INT 3
34334: PPUSH
34335: LD_INT 10
34337: PPUSH
34338: CALL_OW 277
// SetResourceType ( GetBase ( ArDep2 ) , mat_cans , 15 ) ;
34342: LD_INT 99
34344: PPUSH
34345: CALL_OW 274
34349: PPUSH
34350: LD_INT 1
34352: PPUSH
34353: LD_INT 15
34355: PPUSH
34356: CALL_OW 277
// SetResourceType ( GetBase ( ArDep2 ) , mat_siberit , 15 ) ;
34360: LD_INT 99
34362: PPUSH
34363: CALL_OW 274
34367: PPUSH
34368: LD_INT 3
34370: PPUSH
34371: LD_INT 15
34373: PPUSH
34374: CALL_OW 277
// Wait ( 1 ) ;
34378: LD_INT 1
34380: PPUSH
34381: CALL_OW 67
// unit_lives = GetLives ( ar_units [ 1 ] ) ;
34385: LD_ADDR_VAR 0 2
34389: PUSH
34390: LD_VAR 0 12
34394: PUSH
34395: LD_INT 1
34397: ARRAY
34398: PPUSH
34399: CALL_OW 256
34403: ST_TO_ADDR
// Unit_with_max_lives = ar_units [ 1 ] ;
34404: LD_ADDR_VAR 0 4
34408: PUSH
34409: LD_VAR 0 12
34413: PUSH
34414: LD_INT 1
34416: ARRAY
34417: ST_TO_ADDR
// for Un in ar_units do
34418: LD_ADDR_VAR 0 3
34422: PUSH
34423: LD_VAR 0 12
34427: PUSH
34428: FOR_IN
34429: IFFALSE 34475
// if GetLives ( Un ) > unit_lives then
34431: LD_VAR 0 3
34435: PPUSH
34436: CALL_OW 256
34440: PUSH
34441: LD_VAR 0 2
34445: GREATER
34446: IFFALSE 34473
// begin Unit_with_max_lives = Un ;
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: LD_VAR 0 3
34457: ST_TO_ADDR
// unit_lives = GetLives ( Un ) ;
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_VAR 0 3
34467: PPUSH
34468: CALL_OW 256
34472: ST_TO_ADDR
// end ;
34473: GO 34428
34475: POP
34476: POP
// X = GetX ( Unit_with_max_lives ) ;
34477: LD_ADDR_VAR 0 5
34481: PUSH
34482: LD_VAR 0 4
34486: PPUSH
34487: CALL_OW 250
34491: ST_TO_ADDR
// Y = GetY ( Unit_with_max_lives ) ;
34492: LD_ADDR_VAR 0 6
34496: PUSH
34497: LD_VAR 0 4
34501: PPUSH
34502: CALL_OW 251
34506: ST_TO_ADDR
// dir = GetDir ( Unit_with_max_lives ) ;
34507: LD_ADDR_VAR 0 7
34511: PUSH
34512: LD_VAR 0 4
34516: PPUSH
34517: CALL_OW 254
34521: ST_TO_ADDR
// cl = GetClass ( Unit_with_max_lives ) ;
34522: LD_ADDR_VAR 0 8
34526: PUSH
34527: LD_VAR 0 4
34531: PPUSH
34532: CALL_OW 257
34536: ST_TO_ADDR
// if IsInUnit ( Unit_with_max_lives ) = 0 then
34537: LD_VAR 0 4
34541: PPUSH
34542: CALL_OW 310
34546: PUSH
34547: LD_INT 0
34549: EQUAL
34550: IFFALSE 34627
// begin DestroyUnit ( Unit_with_max_lives ) ;
34552: LD_VAR 0 4
34556: PPUSH
34557: CALL_OW 65
// SetLives ( Kurt , unit_lives ) ;
34561: LD_EXP 13
34565: PPUSH
34566: LD_VAR 0 2
34570: PPUSH
34571: CALL_OW 234
// SetClass ( Kurt , cl ) ;
34575: LD_EXP 13
34579: PPUSH
34580: LD_VAR 0 8
34584: PPUSH
34585: CALL_OW 336
// SetDir ( Kurt , dir ) ;
34589: LD_EXP 13
34593: PPUSH
34594: LD_VAR 0 7
34598: PPUSH
34599: CALL_OW 233
// PlaceUnitXY ( Kurt , X , Y , false ) ;
34603: LD_EXP 13
34607: PPUSH
34608: LD_VAR 0 5
34612: PPUSH
34613: LD_VAR 0 6
34617: PPUSH
34618: LD_INT 0
34620: PPUSH
34621: CALL_OW 48
// end else
34625: GO 34693
// begin InUn = IsInUnit ( Unit_with_max_lives ) ;
34627: LD_ADDR_VAR 0 9
34631: PUSH
34632: LD_VAR 0 4
34636: PPUSH
34637: CALL_OW 310
34641: ST_TO_ADDR
// DestroyUnit ( Unit_with_max_lives ) ;
34642: LD_VAR 0 4
34646: PPUSH
34647: CALL_OW 65
// SetLives ( Kurt , unit_lives ) ;
34651: LD_EXP 13
34655: PPUSH
34656: LD_VAR 0 2
34660: PPUSH
34661: CALL_OW 234
// SetClass ( Kurt , cl ) ;
34665: LD_EXP 13
34669: PPUSH
34670: LD_VAR 0 8
34674: PPUSH
34675: CALL_OW 336
// PlaceHumanInUnit ( Kurt , InUn ) ;
34679: LD_EXP 13
34683: PPUSH
34684: LD_VAR 0 9
34688: PPUSH
34689: CALL_OW 52
// end ; DialogueON ;
34693: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
34697: LD_EXP 1
34701: PPUSH
34702: LD_STRING D13-JMM-1
34704: PPUSH
34705: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
34709: LD_EXP 13
34713: PPUSH
34714: LD_STRING D13-Kurt-1
34716: PPUSH
34717: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
34721: LD_EXP 1
34725: PPUSH
34726: LD_STRING D13-JMM-2
34728: PPUSH
34729: CALL_OW 88
// if legion_cheated then
34733: LD_EXP 32
34737: IFFALSE 34773
// begin Say ( Kurt , D13-Kurt-2 ) ;
34739: LD_EXP 13
34743: PPUSH
34744: LD_STRING D13-Kurt-2
34746: PPUSH
34747: CALL_OW 88
// SetAttitude ( arabians , russians , att_enemy , true ) ;
34751: LD_EXP 180
34755: PPUSH
34756: LD_EXP 178
34760: PPUSH
34761: LD_INT 2
34763: PPUSH
34764: LD_INT 1
34766: PPUSH
34767: CALL_OW 80
// end else
34771: GO 35209
// begin if Really_Kurt then
34773: LD_EXP 205
34777: IFFALSE 34793
// Say ( Kurt , D13-Kurt-2a ) else
34779: LD_EXP 13
34783: PPUSH
34784: LD_STRING D13-Kurt-2a
34786: PPUSH
34787: CALL_OW 88
34791: GO 34805
// Say ( Kurt , D13-Kurt-2b ) ;
34793: LD_EXP 13
34797: PPUSH
34798: LD_STRING D13-Kurt-2b
34800: PPUSH
34801: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
34805: LD_EXP 1
34809: PPUSH
34810: LD_STRING D13-JMM-3
34812: PPUSH
34813: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
34817: LD_EXP 13
34821: PPUSH
34822: LD_STRING D13-Kurt-3
34824: PPUSH
34825: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
34829: LD_EXP 1
34833: PPUSH
34834: LD_STRING D13-JMM-4
34836: PPUSH
34837: CALL_OW 88
// ar_units = Kurt ^ ( FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] ] ) diff Kozlov ) ;
34841: LD_ADDR_VAR 0 12
34845: PUSH
34846: LD_EXP 13
34850: PUSH
34851: LD_INT 22
34853: PUSH
34854: LD_EXP 180
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 21
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 51
34875: PUSH
34876: EMPTY
34877: LIST
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: PPUSH
34884: CALL_OW 69
34888: PUSH
34889: LD_EXP 22
34893: DIFF
34894: ADD
34895: ST_TO_ADDR
// for Un in ar_units do
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_VAR 0 12
34905: PUSH
34906: FOR_IN
34907: IFFALSE 35089
// begin if GetLives ( Un ) < 300 then
34909: LD_VAR 0 3
34913: PPUSH
34914: CALL_OW 256
34918: PUSH
34919: LD_INT 300
34921: LESS
34922: IFFALSE 34936
// SetLives ( Un , 300 ) ;
34924: LD_VAR 0 3
34928: PPUSH
34929: LD_INT 300
34931: PPUSH
34932: CALL_OW 234
// SetSide ( Un , americans ) ;
34936: LD_VAR 0 3
34940: PPUSH
34941: LD_EXP 176
34945: PPUSH
34946: CALL_OW 235
// if GetType ( IsInUnit ( Un ) ) = unit_vehicle then
34950: LD_VAR 0 3
34954: PPUSH
34955: CALL_OW 310
34959: PPUSH
34960: CALL_OW 247
34964: PUSH
34965: LD_INT 2
34967: EQUAL
34968: IFFALSE 34981
// ComExitVehicle ( Un ) else
34970: LD_VAR 0 3
34974: PPUSH
34975: CALL_OW 121
34979: GO 35010
// if GetType ( IsInUnit ( Un ) ) = unit_building then
34981: LD_VAR 0 3
34985: PPUSH
34986: CALL_OW 310
34990: PPUSH
34991: CALL_OW 247
34995: PUSH
34996: LD_INT 3
34998: EQUAL
34999: IFFALSE 35010
// ComExitBuilding ( Un ) ;
35001: LD_VAR 0 3
35005: PPUSH
35006: CALL_OW 122
// if not ( ( GetClass ( Un ) = class_apeman ) or ( GetClass ( Un ) = class_apeman_engineer ) or ( GetClass ( Un ) = class_apeman_kamikaze ) or ( GetClass ( Un ) = class_apeman_soldier ) ) then
35010: LD_VAR 0 3
35014: PPUSH
35015: CALL_OW 257
35019: PUSH
35020: LD_INT 12
35022: EQUAL
35023: PUSH
35024: LD_VAR 0 3
35028: PPUSH
35029: CALL_OW 257
35033: PUSH
35034: LD_INT 16
35036: EQUAL
35037: OR
35038: PUSH
35039: LD_VAR 0 3
35043: PPUSH
35044: CALL_OW 257
35048: PUSH
35049: LD_INT 17
35051: EQUAL
35052: OR
35053: PUSH
35054: LD_VAR 0 3
35058: PPUSH
35059: CALL_OW 257
35063: PUSH
35064: LD_INT 15
35066: EQUAL
35067: OR
35068: NOT
35069: IFFALSE 35087
// All_americans = All_americans ^ Un ;
35071: LD_ADDR_EXP 61
35075: PUSH
35076: LD_EXP 61
35080: PUSH
35081: LD_VAR 0 3
35085: ADD
35086: ST_TO_ADDR
// end ;
35087: GO 34906
35089: POP
35090: POP
// for Un in Arabian_buildings do
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: LD_EXP 88
35100: PUSH
35101: FOR_IN
35102: IFFALSE 35167
// begin if IsOk ( GetUnitNumber ( Un [ 2 ] , Un [ 3 ] ) ) then
35104: LD_VAR 0 3
35108: PUSH
35109: LD_INT 2
35111: ARRAY
35112: PPUSH
35113: LD_VAR 0 3
35117: PUSH
35118: LD_INT 3
35120: ARRAY
35121: PPUSH
35122: CALL_OW 438
35126: PPUSH
35127: CALL_OW 302
35131: IFFALSE 35165
// SetSide ( GetUnitNumber ( Un [ 2 ] , Un [ 3 ] ) , americans ) ;
35133: LD_VAR 0 3
35137: PUSH
35138: LD_INT 2
35140: ARRAY
35141: PPUSH
35142: LD_VAR 0 3
35146: PUSH
35147: LD_INT 3
35149: ARRAY
35150: PPUSH
35151: CALL_OW 438
35155: PPUSH
35156: LD_EXP 176
35160: PPUSH
35161: CALL_OW 235
// end ;
35165: GO 35101
35167: POP
35168: POP
// DialogueOFF ;
35169: CALL_OW 7
// SA_OnLegionJoin ;
35173: CALL 56284 0 0
// Hint ( Legion ) ;
35177: LD_STRING Legion
35179: PPUSH
35180: CALL_OW 339
// ChangeMissionObjectives ( MlegionOut ) ;
35184: LD_STRING MlegionOut
35186: PPUSH
35187: CALL_OW 337
// Wait ( 0 0$5 ) ;
35191: LD_INT 175
35193: PPUSH
35194: CALL_OW 67
// if not ( Friend_has_come ) then
35198: LD_EXP 226
35202: NOT
35203: IFFALSE 35209
// FriendComing ;
35205: CALL 33118 0 0
// end ; DialogueOFF ;
35209: CALL_OW 7
// end ; end ;
35213: LD_VAR 0 1
35217: RET
// export function ArVehicleConstructed ( veh ) ; begin
35218: LD_INT 0
35220: PPUSH
// if ( GetWeapon ( veh ) = ru_siberium_rocket ) then
35221: LD_VAR 0 1
35225: PPUSH
35226: CALL_OW 264
35230: PUSH
35231: LD_INT 48
35233: EQUAL
35234: IFFALSE 35392
// begin Wait ( 0 0$2 ) ;
35236: LD_INT 70
35238: PPUSH
35239: CALL_OW 67
// ComExitVehicle ( Kozlov ) ;
35243: LD_EXP 22
35247: PPUSH
35248: CALL_OW 121
// Wait ( 2 ) ;
35252: LD_INT 2
35254: PPUSH
35255: CALL_OW 67
// ComEnterUnit ( Kozlov , GetUnitNumber ( 78 , 12 ) ) ;
35259: LD_EXP 22
35263: PPUSH
35264: LD_INT 78
35266: PPUSH
35267: LD_INT 12
35269: PPUSH
35270: CALL_OW 438
35274: PPUSH
35275: CALL_OW 120
// AddComConstruct ( GetUnitNumber ( 78 , 12 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) ;
35279: LD_INT 78
35281: PPUSH
35282: LD_INT 12
35284: PPUSH
35285: CALL_OW 438
35289: PPUSH
35290: LD_INT 24
35292: PPUSH
35293: LD_INT 3
35295: PPUSH
35296: LD_INT 3
35298: PPUSH
35299: LD_INT 48
35301: PPUSH
35302: CALL_OW 185
// case Number_of_Arabian_rocket of 1 :
35306: LD_EXP 199
35310: PUSH
35311: LD_INT 1
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35319
35317: GO 35362
35319: POP
// begin Construction_of_Arabian_rocket = false ;
35320: LD_ADDR_EXP 198
35324: PUSH
35325: LD_INT 0
35327: ST_TO_ADDR
// Number_of_Arabian_rocket = Number_of_Arabian_rocket + 1 ;
35328: LD_ADDR_EXP 199
35332: PUSH
35333: LD_EXP 199
35337: PUSH
35338: LD_INT 1
35340: PLUS
35341: ST_TO_ADDR
// SiberiteRocketAttack ( veh , 46 , 64 , 1 ) ;
35342: LD_VAR 0 1
35346: PPUSH
35347: LD_INT 46
35349: PPUSH
35350: LD_INT 64
35352: PPUSH
35353: LD_INT 1
35355: PPUSH
35356: CALL 33026 0 4
// end ; 2 :
35360: GO 35392
35362: LD_INT 2
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35370
35368: GO 35391
35370: POP
// SiberiteRocketAttack ( veh , 155 , 60 , 2 ) ; end ;
35371: LD_VAR 0 1
35375: PPUSH
35376: LD_INT 155
35378: PPUSH
35379: LD_INT 60
35381: PPUSH
35382: LD_INT 2
35384: PPUSH
35385: CALL 33026 0 4
35389: GO 35392
35391: POP
// end ; end ; end_of_file
35392: LD_VAR 0 2
35396: RET
// function PrepareAndCreateVehicleR1P ( number , chassis , engine , control , weapon ) ; var veh , i , person ; begin
35397: LD_INT 0
35399: PPUSH
35400: PPUSH
35401: PPUSH
35402: PPUSH
// uc_side = russians1 ;
35403: LD_ADDR_OWVAR 20
35407: PUSH
35408: LD_EXP 179
35412: ST_TO_ADDR
// uc_direction = 0 ;
35413: LD_ADDR_OWVAR 24
35417: PUSH
35418: LD_INT 0
35420: ST_TO_ADDR
// uc_nation = nation_russian ;
35421: LD_ADDR_OWVAR 21
35425: PUSH
35426: LD_INT 3
35428: ST_TO_ADDR
// for i = 1 to number do
35429: LD_ADDR_VAR 0 8
35433: PUSH
35434: DOUBLE
35435: LD_INT 1
35437: DEC
35438: ST_TO_ADDR
35439: LD_VAR 0 1
35443: PUSH
35444: FOR_TO
35445: IFFALSE 35581
// begin vc_chassis = chassis ;
35447: LD_ADDR_OWVAR 37
35451: PUSH
35452: LD_VAR 0 2
35456: ST_TO_ADDR
// vc_control = control ;
35457: LD_ADDR_OWVAR 38
35461: PUSH
35462: LD_VAR 0 4
35466: ST_TO_ADDR
// vc_engine = engine ;
35467: LD_ADDR_OWVAR 39
35471: PUSH
35472: LD_VAR 0 3
35476: ST_TO_ADDR
// vc_weapon = weapon ;
35477: LD_ADDR_OWVAR 40
35481: PUSH
35482: LD_VAR 0 5
35486: ST_TO_ADDR
// veh = CreateVehicle ;
35487: LD_ADDR_VAR 0 7
35491: PUSH
35492: CALL_OW 45
35496: ST_TO_ADDR
// New_Patrol_Group = New_Patrol_Group ^ veh ;
35497: LD_ADDR_EXP 122
35501: PUSH
35502: LD_EXP 122
35506: PUSH
35507: LD_VAR 0 7
35511: ADD
35512: ST_TO_ADDR
// if control = control_manual then
35513: LD_VAR 0 4
35517: PUSH
35518: LD_INT 1
35520: EQUAL
35521: IFFALSE 35579
// begin PrepareMechanic ( 0 , 7 + Difficulty ) ;
35523: LD_INT 0
35525: PPUSH
35526: LD_INT 7
35528: PUSH
35529: LD_OWVAR 67
35533: PLUS
35534: PPUSH
35535: CALL_OW 383
// Person = CreateHuman ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: CALL_OW 44
35548: ST_TO_ADDR
// PlaceHumanInUnit ( Person , veh ) ;
35549: LD_VAR 0 9
35553: PPUSH
35554: LD_VAR 0 7
35558: PPUSH
35559: CALL_OW 52
// New_Patrol_Group = New_Patrol_Group ^ Person ;
35563: LD_ADDR_EXP 122
35567: PUSH
35568: LD_EXP 122
35572: PUSH
35573: LD_VAR 0 9
35577: ADD
35578: ST_TO_ADDR
// end ; end ;
35579: GO 35444
35581: POP
35582: POP
// end ;
35583: LD_VAR 0 6
35587: RET
// function PrepareAndCreateVehicleR1 ( number , chassis , engine , control , weapon ) ; var veh , i , person ; begin
35588: LD_INT 0
35590: PPUSH
35591: PPUSH
35592: PPUSH
35593: PPUSH
// uc_side = russians1 ;
35594: LD_ADDR_OWVAR 20
35598: PUSH
35599: LD_EXP 179
35603: ST_TO_ADDR
// uc_direction = 0 ;
35604: LD_ADDR_OWVAR 24
35608: PUSH
35609: LD_INT 0
35611: ST_TO_ADDR
// uc_nation = nation_russian ;
35612: LD_ADDR_OWVAR 21
35616: PUSH
35617: LD_INT 3
35619: ST_TO_ADDR
// for i = 1 to number do
35620: LD_ADDR_VAR 0 8
35624: PUSH
35625: DOUBLE
35626: LD_INT 1
35628: DEC
35629: ST_TO_ADDR
35630: LD_VAR 0 1
35634: PUSH
35635: FOR_TO
35636: IFFALSE 35772
// begin vc_chassis = chassis ;
35638: LD_ADDR_OWVAR 37
35642: PUSH
35643: LD_VAR 0 2
35647: ST_TO_ADDR
// vc_control = control ;
35648: LD_ADDR_OWVAR 38
35652: PUSH
35653: LD_VAR 0 4
35657: ST_TO_ADDR
// vc_engine = engine ;
35658: LD_ADDR_OWVAR 39
35662: PUSH
35663: LD_VAR 0 3
35667: ST_TO_ADDR
// vc_weapon = weapon ;
35668: LD_ADDR_OWVAR 40
35672: PUSH
35673: LD_VAR 0 5
35677: ST_TO_ADDR
// veh = CreateVehicle ;
35678: LD_ADDR_VAR 0 7
35682: PUSH
35683: CALL_OW 45
35687: ST_TO_ADDR
// R1_Attack_Group = R1_Attack_Group ^ veh ;
35688: LD_ADDR_EXP 118
35692: PUSH
35693: LD_EXP 118
35697: PUSH
35698: LD_VAR 0 7
35702: ADD
35703: ST_TO_ADDR
// if control = control_manual then
35704: LD_VAR 0 4
35708: PUSH
35709: LD_INT 1
35711: EQUAL
35712: IFFALSE 35770
// begin PrepareMechanic ( 0 , 7 + Difficulty ) ;
35714: LD_INT 0
35716: PPUSH
35717: LD_INT 7
35719: PUSH
35720: LD_OWVAR 67
35724: PLUS
35725: PPUSH
35726: CALL_OW 383
// Person = CreateHuman ;
35730: LD_ADDR_VAR 0 9
35734: PUSH
35735: CALL_OW 44
35739: ST_TO_ADDR
// PlaceHumanInUnit ( Person , veh ) ;
35740: LD_VAR 0 9
35744: PPUSH
35745: LD_VAR 0 7
35749: PPUSH
35750: CALL_OW 52
// R1_Attack_Group = R1_Attack_Group ^ Person ;
35754: LD_ADDR_EXP 118
35758: PUSH
35759: LD_EXP 118
35763: PUSH
35764: LD_VAR 0 9
35768: ADD
35769: ST_TO_ADDR
// end ; end ;
35770: GO 35635
35772: POP
35773: POP
// end ;
35774: LD_VAR 0 6
35778: RET
// function GetRandomVehicle ( time ) ; var Rand_Veh , Selected , Credits , Probab , engine ; begin
35779: LD_INT 0
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
// Selected = false ;
35787: LD_ADDR_VAR 0 4
35791: PUSH
35792: LD_INT 0
35794: ST_TO_ADDR
// if time <= 2 then
35795: LD_VAR 0 1
35799: PUSH
35800: LD_INT 2
35802: LESSEQUAL
35803: IFFALSE 35815
// engine = engine_combustion else
35805: LD_ADDR_VAR 0 7
35809: PUSH
35810: LD_INT 1
35812: ST_TO_ADDR
35813: GO 35823
// engine = engine_siberite ;
35815: LD_ADDR_VAR 0 7
35819: PUSH
35820: LD_INT 3
35822: ST_TO_ADDR
// repeat Probab = Rand ( 1 , 100 ) ;
35823: LD_ADDR_VAR 0 6
35827: PUSH
35828: LD_INT 1
35830: PPUSH
35831: LD_INT 100
35833: PPUSH
35834: CALL_OW 12
35838: ST_TO_ADDR
// case time of 1 :
35839: LD_VAR 0 1
35843: PUSH
35844: LD_INT 1
35846: DOUBLE
35847: EQUAL
35848: IFTRUE 35852
35850: GO 35890
35852: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ; 2 :
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 3
35866: PUSH
35867: LD_INT 4
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PPUSH
35879: LD_INT 4
35881: PPUSH
35882: CALL_OW 12
35886: ARRAY
35887: ST_TO_ADDR
35888: GO 36165
35890: LD_INT 2
35892: DOUBLE
35893: EQUAL
35894: IFTRUE 35898
35896: GO 35944
35898: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 , 5 , 6 ] [ Rand ( 1 , 6 ) ] ; 3 :
35899: LD_ADDR_VAR 0 3
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: LD_INT 4
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: LD_INT 6
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PPUSH
35933: LD_INT 6
35935: PPUSH
35936: CALL_OW 12
35940: ARRAY
35941: ST_TO_ADDR
35942: GO 36165
35944: LD_INT 3
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 35994
35952: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 ] [ Rand ( 1 , 5 ) ] ; 4 :
35953: LD_ADDR_VAR 0 3
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: LD_INT 4
35963: PUSH
35964: LD_INT 5
35966: PUSH
35967: LD_INT 6
35969: PUSH
35970: LD_INT 7
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: PPUSH
35983: LD_INT 5
35985: PPUSH
35986: CALL_OW 12
35990: ARRAY
35991: ST_TO_ADDR
35992: GO 36165
35994: LD_INT 4
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36002
36000: GO 36048
36002: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 , 8 ] [ Rand ( 1 , 6 ) ] ; 5 :
36003: LD_ADDR_VAR 0 3
36007: PUSH
36008: LD_INT 3
36010: PUSH
36011: LD_INT 4
36013: PUSH
36014: LD_INT 5
36016: PUSH
36017: LD_INT 6
36019: PUSH
36020: LD_INT 7
36022: PUSH
36023: LD_INT 8
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: PPUSH
36037: LD_INT 6
36039: PPUSH
36040: CALL_OW 12
36044: ARRAY
36045: ST_TO_ADDR
36046: GO 36165
36048: LD_INT 5
36050: DOUBLE
36051: EQUAL
36052: IFTRUE 36056
36054: GO 36102
36056: POP
// Rand_Veh = [ 4 , 5 , 6 , 7 , 8 , 9 ] [ Rand ( 1 , 6 ) ] ; 6 :
36057: LD_ADDR_VAR 0 3
36061: PUSH
36062: LD_INT 4
36064: PUSH
36065: LD_INT 5
36067: PUSH
36068: LD_INT 6
36070: PUSH
36071: LD_INT 7
36073: PUSH
36074: LD_INT 8
36076: PUSH
36077: LD_INT 9
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PPUSH
36091: LD_INT 6
36093: PPUSH
36094: CALL_OW 12
36098: ARRAY
36099: ST_TO_ADDR
36100: GO 36165
36102: LD_INT 6
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36110
36108: GO 36164
36110: POP
// Rand_Veh = [ 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] [ Rand ( 1 , 8 ) ] ; end ;
36111: LD_ADDR_VAR 0 3
36115: PUSH
36116: LD_INT 5
36118: PUSH
36119: LD_INT 6
36121: PUSH
36122: LD_INT 7
36124: PUSH
36125: LD_INT 8
36127: PUSH
36128: LD_INT 9
36130: PUSH
36131: LD_INT 10
36133: PUSH
36134: LD_INT 11
36136: PUSH
36137: LD_INT 12
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: PPUSH
36153: LD_INT 8
36155: PPUSH
36156: CALL_OW 12
36160: ARRAY
36161: ST_TO_ADDR
36162: GO 36165
36164: POP
// case Rand_Veh of 1 :
36165: LD_VAR 0 3
36169: PUSH
36170: LD_INT 1
36172: DOUBLE
36173: EQUAL
36174: IFTRUE 36178
36176: GO 36258
36178: POP
// begin if ( time <= 1 and Probab < 60 ) or ( time <= 3 and Probab < 20 ) then
36179: LD_VAR 0 1
36183: PUSH
36184: LD_INT 1
36186: LESSEQUAL
36187: PUSH
36188: LD_VAR 0 6
36192: PUSH
36193: LD_INT 60
36195: LESS
36196: AND
36197: PUSH
36198: LD_VAR 0 1
36202: PUSH
36203: LD_INT 3
36205: LESSEQUAL
36206: PUSH
36207: LD_VAR 0 6
36211: PUSH
36212: LD_INT 20
36214: LESS
36215: AND
36216: OR
36217: IFFALSE 36256
// begin Selected = true ;
36219: LD_ADDR_VAR 0 4
36223: PUSH
36224: LD_INT 1
36226: ST_TO_ADDR
// Credits = 3 ;
36227: LD_ADDR_VAR 0 5
36231: PUSH
36232: LD_INT 3
36234: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_heavy_machine_gun ) ;
36235: LD_INT 1
36237: PPUSH
36238: LD_INT 22
36240: PPUSH
36241: LD_VAR 0 7
36245: PPUSH
36246: LD_INT 3
36248: PPUSH
36249: LD_INT 42
36251: PPUSH
36252: CALL 35588 0 5
// end ; end ; 2 :
36256: GO 36945
36258: LD_INT 2
36260: DOUBLE
36261: EQUAL
36262: IFTRUE 36266
36264: GO 36346
36266: POP
// begin if ( time <= 1 and Probab < 80 ) or ( time <= 3 and Probab < 30 ) then
36267: LD_VAR 0 1
36271: PUSH
36272: LD_INT 1
36274: LESSEQUAL
36275: PUSH
36276: LD_VAR 0 6
36280: PUSH
36281: LD_INT 80
36283: LESS
36284: AND
36285: PUSH
36286: LD_VAR 0 1
36290: PUSH
36291: LD_INT 3
36293: LESSEQUAL
36294: PUSH
36295: LD_VAR 0 6
36299: PUSH
36300: LD_INT 30
36302: LESS
36303: AND
36304: OR
36305: IFFALSE 36344
// begin Selected = true ;
36307: LD_ADDR_VAR 0 4
36311: PUSH
36312: LD_INT 1
36314: ST_TO_ADDR
// Credits = 4 ;
36315: LD_ADDR_VAR 0 5
36319: PUSH
36320: LD_INT 4
36322: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_heavy_machine_gun ) ;
36323: LD_INT 1
36325: PPUSH
36326: LD_INT 24
36328: PPUSH
36329: LD_VAR 0 7
36333: PPUSH
36334: LD_INT 3
36336: PPUSH
36337: LD_INT 42
36339: PPUSH
36340: CALL 35588 0 5
// end ; end ; 4 :
36344: GO 36945
36346: LD_INT 4
36348: DOUBLE
36349: EQUAL
36350: IFTRUE 36354
36352: GO 36454
36354: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 80 ) or ( time > 3 and Probab < 40 ) then
36355: LD_VAR 0 1
36359: PUSH
36360: LD_INT 1
36362: LESSEQUAL
36363: PUSH
36364: LD_VAR 0 6
36368: PUSH
36369: LD_INT 100
36371: LESS
36372: AND
36373: PUSH
36374: LD_VAR 0 1
36378: PUSH
36379: LD_INT 3
36381: LESSEQUAL
36382: PUSH
36383: LD_VAR 0 6
36387: PUSH
36388: LD_INT 80
36390: LESS
36391: AND
36392: OR
36393: PUSH
36394: LD_VAR 0 1
36398: PUSH
36399: LD_INT 3
36401: GREATER
36402: PUSH
36403: LD_VAR 0 6
36407: PUSH
36408: LD_INT 40
36410: LESS
36411: AND
36412: OR
36413: IFFALSE 36452
// begin Selected = true ;
36415: LD_ADDR_VAR 0 4
36419: PUSH
36420: LD_INT 1
36422: ST_TO_ADDR
// Credits = 5 ;
36423: LD_ADDR_VAR 0 5
36427: PUSH
36428: LD_INT 5
36430: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_gatling_gun ) end ;
36431: LD_INT 1
36433: PPUSH
36434: LD_INT 22
36436: PPUSH
36437: LD_VAR 0 7
36441: PPUSH
36442: LD_INT 3
36444: PPUSH
36445: LD_INT 43
36447: PPUSH
36448: CALL 35588 0 5
// end ; 3 :
36452: GO 36945
36454: LD_INT 3
36456: DOUBLE
36457: EQUAL
36458: IFTRUE 36462
36460: GO 36542
36462: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 40 ) then
36463: LD_VAR 0 1
36467: PUSH
36468: LD_INT 1
36470: LESSEQUAL
36471: PUSH
36472: LD_VAR 0 6
36476: PUSH
36477: LD_INT 100
36479: LESS
36480: AND
36481: PUSH
36482: LD_VAR 0 1
36486: PUSH
36487: LD_INT 3
36489: LESSEQUAL
36490: PUSH
36491: LD_VAR 0 6
36495: PUSH
36496: LD_INT 40
36498: LESS
36499: AND
36500: OR
36501: IFFALSE 36540
// begin Selected = true ;
36503: LD_ADDR_VAR 0 4
36507: PUSH
36508: LD_INT 1
36510: ST_TO_ADDR
// Credits = 5 ;
36511: LD_ADDR_VAR 0 5
36515: PUSH
36516: LD_INT 5
36518: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_gun ) end ;
36519: LD_INT 1
36521: PPUSH
36522: LD_INT 22
36524: PPUSH
36525: LD_VAR 0 7
36529: PPUSH
36530: LD_INT 3
36532: PPUSH
36533: LD_INT 44
36535: PPUSH
36536: CALL 35588 0 5
// end ; 5 :
36540: GO 36945
36542: LD_INT 5
36544: DOUBLE
36545: EQUAL
36546: IFTRUE 36550
36548: GO 36590
36550: POP
// begin Selected = true ;
36551: LD_ADDR_VAR 0 4
36555: PUSH
36556: LD_INT 1
36558: ST_TO_ADDR
// Credits = 7 ;
36559: LD_ADDR_VAR 0 5
36563: PUSH
36564: LD_INT 7
36566: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_gatling_gun ) end ; 6 :
36567: LD_INT 1
36569: PPUSH
36570: LD_INT 24
36572: PPUSH
36573: LD_VAR 0 7
36577: PPUSH
36578: LD_INT 3
36580: PPUSH
36581: LD_INT 43
36583: PPUSH
36584: CALL 35588 0 5
36588: GO 36945
36590: LD_INT 6
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36598
36596: GO 36698
36598: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 60 ) or ( time > 3 and Probab < 20 ) then
36599: LD_VAR 0 1
36603: PUSH
36604: LD_INT 1
36606: LESSEQUAL
36607: PUSH
36608: LD_VAR 0 6
36612: PUSH
36613: LD_INT 100
36615: LESS
36616: AND
36617: PUSH
36618: LD_VAR 0 1
36622: PUSH
36623: LD_INT 3
36625: LESSEQUAL
36626: PUSH
36627: LD_VAR 0 6
36631: PUSH
36632: LD_INT 60
36634: LESS
36635: AND
36636: OR
36637: PUSH
36638: LD_VAR 0 1
36642: PUSH
36643: LD_INT 3
36645: GREATER
36646: PUSH
36647: LD_VAR 0 6
36651: PUSH
36652: LD_INT 20
36654: LESS
36655: AND
36656: OR
36657: IFFALSE 36696
// begin Selected = true ;
36659: LD_ADDR_VAR 0 4
36663: PUSH
36664: LD_INT 1
36666: ST_TO_ADDR
// Credits = 7 ;
36667: LD_ADDR_VAR 0 5
36671: PUSH
36672: LD_INT 7
36674: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_gun ) end ;
36675: LD_INT 1
36677: PPUSH
36678: LD_INT 24
36680: PPUSH
36681: LD_VAR 0 7
36685: PPUSH
36686: LD_INT 3
36688: PPUSH
36689: LD_INT 44
36691: PPUSH
36692: CALL 35588 0 5
// end ; 7 :
36696: GO 36945
36698: LD_INT 7
36700: DOUBLE
36701: EQUAL
36702: IFTRUE 36706
36704: GO 36746
36706: POP
// begin Selected = true ;
36707: LD_ADDR_VAR 0 4
36711: PUSH
36712: LD_INT 1
36714: ST_TO_ADDR
// Credits = 11 ;
36715: LD_ADDR_VAR 0 5
36719: PUSH
36720: LD_INT 11
36722: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_heavy_gun ) ;
36723: LD_INT 1
36725: PPUSH
36726: LD_INT 24
36728: PPUSH
36729: LD_VAR 0 7
36733: PPUSH
36734: LD_INT 3
36736: PPUSH
36737: LD_INT 46
36739: PPUSH
36740: CALL 35588 0 5
// end ; 8 :
36744: GO 36945
36746: LD_INT 8
36748: DOUBLE
36749: EQUAL
36750: IFTRUE 36754
36752: GO 36794
36754: POP
// begin Selected = true ;
36755: LD_ADDR_VAR 0 4
36759: PUSH
36760: LD_INT 1
36762: ST_TO_ADDR
// Credits = 9 ;
36763: LD_ADDR_VAR 0 5
36767: PUSH
36768: LD_INT 9
36770: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_rocket_launcher ) ;
36771: LD_INT 1
36773: PPUSH
36774: LD_INT 22
36776: PPUSH
36777: LD_VAR 0 7
36781: PPUSH
36782: LD_INT 3
36784: PPUSH
36785: LD_INT 45
36787: PPUSH
36788: CALL 35588 0 5
// end ; 9 :
36792: GO 36945
36794: LD_INT 9
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36802
36800: GO 36842
36802: POP
// begin Selected = true ;
36803: LD_ADDR_VAR 0 4
36807: PUSH
36808: LD_INT 1
36810: ST_TO_ADDR
// Credits = 11 ;
36811: LD_ADDR_VAR 0 5
36815: PUSH
36816: LD_INT 11
36818: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket_launcher ) ;
36819: LD_INT 1
36821: PPUSH
36822: LD_INT 24
36824: PPUSH
36825: LD_VAR 0 7
36829: PPUSH
36830: LD_INT 3
36832: PPUSH
36833: LD_INT 45
36835: PPUSH
36836: CALL 35588 0 5
// end ; 10 , 11 :
36840: GO 36945
36842: LD_INT 10
36844: DOUBLE
36845: EQUAL
36846: IFTRUE 36856
36848: LD_INT 11
36850: DOUBLE
36851: EQUAL
36852: IFTRUE 36856
36854: GO 36896
36856: POP
// begin Selected = true ;
36857: LD_ADDR_VAR 0 4
36861: PUSH
36862: LD_INT 1
36864: ST_TO_ADDR
// Credits = 15 ;
36865: LD_ADDR_VAR 0 5
36869: PUSH
36870: LD_INT 15
36872: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket ) ;
36873: LD_INT 1
36875: PPUSH
36876: LD_INT 24
36878: PPUSH
36879: LD_VAR 0 7
36883: PPUSH
36884: LD_INT 3
36886: PPUSH
36887: LD_INT 47
36889: PPUSH
36890: CALL 35588 0 5
// end ; 12 :
36894: GO 36945
36896: LD_INT 12
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36944
36904: POP
// begin Selected = true ;
36905: LD_ADDR_VAR 0 4
36909: PUSH
36910: LD_INT 1
36912: ST_TO_ADDR
// Credits = 15 ;
36913: LD_ADDR_VAR 0 5
36917: PUSH
36918: LD_INT 15
36920: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket ) ;
36921: LD_INT 1
36923: PPUSH
36924: LD_INT 24
36926: PPUSH
36927: LD_VAR 0 7
36931: PPUSH
36932: LD_INT 3
36934: PPUSH
36935: LD_INT 47
36937: PPUSH
36938: CALL 35588 0 5
// end ; end ;
36942: GO 36945
36944: POP
// until Selected ;
36945: LD_VAR 0 4
36949: IFFALSE 35823
// Result = Credits ;
36951: LD_ADDR_VAR 0 2
36955: PUSH
36956: LD_VAR 0 5
36960: ST_TO_ADDR
// end ;
36961: LD_VAR 0 2
36965: RET
// function GenerateGroup ( Credits , time ) ; var Used_Credits ; begin
36966: LD_INT 0
36968: PPUSH
36969: PPUSH
// repeat Used_Credits = Used_Credits + GetRandomVehicle ( time ) ;
36970: LD_ADDR_VAR 0 4
36974: PUSH
36975: LD_VAR 0 4
36979: PUSH
36980: LD_VAR 0 2
36984: PPUSH
36985: CALL 35779 0 1
36989: PLUS
36990: ST_TO_ADDR
// until Credits < Used_Credits ;
36991: LD_VAR 0 1
36995: PUSH
36996: LD_VAR 0 4
37000: LESS
37001: IFFALSE 36970
// result = Used_Credits ;
37003: LD_ADDR_VAR 0 3
37007: PUSH
37008: LD_VAR 0 4
37012: ST_TO_ADDR
// end ;
37013: LD_VAR 0 3
37017: RET
// function GenerateAttackingGroup ; var Power , Next_time , Number_of_units , Person , veh , i , Used_Credits , Credits , Strength_of_attack ; begin
37018: LD_INT 0
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
37029: PPUSH
// Power = Rand ( 1 , 3 ) ;
37030: LD_ADDR_VAR 0 2
37034: PUSH
37035: LD_INT 1
37037: PPUSH
37038: LD_INT 3
37040: PPUSH
37041: CALL_OW 12
37045: ST_TO_ADDR
// Number_of_units = Rand ( 1 , 2 ) ;
37046: LD_ADDR_VAR 0 4
37050: PUSH
37051: LD_INT 1
37053: PPUSH
37054: LD_INT 2
37056: PPUSH
37057: CALL_OW 12
37061: ST_TO_ADDR
// R1_Attack_Group = [ ] ;
37062: LD_ADDR_EXP 118
37066: PUSH
37067: EMPTY
37068: ST_TO_ADDR
// if tick < 6 6$0 then
37069: LD_OWVAR 1
37073: PUSH
37074: LD_INT 12600
37076: LESS
37077: IFFALSE 37421
// begin case R1_Attack_Counter of 1 :
37079: LD_EXP 116
37083: PUSH
37084: LD_INT 1
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37092
37090: GO 37158
37092: POP
// begin PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gun ) ;
37093: LD_INT 1
37095: PPUSH
37096: LD_INT 22
37098: PPUSH
37099: LD_INT 1
37101: PPUSH
37102: LD_INT 3
37104: PPUSH
37105: LD_INT 44
37107: PPUSH
37108: CALL 35588 0 5
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
37112: LD_INT 1
37114: PPUSH
37115: LD_INT 22
37117: PPUSH
37118: LD_INT 1
37120: PPUSH
37121: LD_INT 3
37123: PPUSH
37124: LD_INT 43
37126: PPUSH
37127: CALL 35588 0 5
// R1_attack_time = [ 0 0$40 , 0 0$30 , 0 0$20 ] [ Difficulty ] ;
37131: LD_ADDR_EXP 114
37135: PUSH
37136: LD_INT 1400
37138: PUSH
37139: LD_INT 1050
37141: PUSH
37142: LD_INT 700
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: PUSH
37150: LD_OWVAR 67
37154: ARRAY
37155: ST_TO_ADDR
// end ; 2 :
37156: GO 37419
37158: LD_INT 2
37160: DOUBLE
37161: EQUAL
37162: IFTRUE 37166
37164: GO 37230
37166: POP
// begin PrepareAndCreateVehicleR1 ( [ 2 , 3 , 4 ] [ Difficulty ] , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
37167: LD_INT 2
37169: PUSH
37170: LD_INT 3
37172: PUSH
37173: LD_INT 4
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: PUSH
37181: LD_OWVAR 67
37185: ARRAY
37186: PPUSH
37187: LD_INT 22
37189: PPUSH
37190: LD_INT 1
37192: PPUSH
37193: LD_INT 3
37195: PPUSH
37196: LD_INT 43
37198: PPUSH
37199: CALL 35588 0 5
// R1_attack_time = [ 3 3$0 , 3 3$00 , 3 3$00 ] [ Difficulty ] ;
37203: LD_ADDR_EXP 114
37207: PUSH
37208: LD_INT 6300
37210: PUSH
37211: LD_INT 6300
37213: PUSH
37214: LD_INT 6300
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: PUSH
37222: LD_OWVAR 67
37226: ARRAY
37227: ST_TO_ADDR
// end ; 3 :
37228: GO 37419
37230: LD_INT 3
37232: DOUBLE
37233: EQUAL
37234: IFTRUE 37238
37236: GO 37304
37238: POP
// begin PrepareAndCreateVehicleR1 ( 2 , ru_heavy_tracked , engine_combustion , control_computer , ru_gun ) ;
37239: LD_INT 2
37241: PPUSH
37242: LD_INT 24
37244: PPUSH
37245: LD_INT 1
37247: PPUSH
37248: LD_INT 3
37250: PPUSH
37251: LD_INT 44
37253: PPUSH
37254: CALL 35588 0 5
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
37258: LD_INT 1
37260: PPUSH
37261: LD_INT 22
37263: PPUSH
37264: LD_INT 1
37266: PPUSH
37267: LD_INT 3
37269: PPUSH
37270: LD_INT 43
37272: PPUSH
37273: CALL 35588 0 5
// R1_attack_time = [ 2 2$50 , 2 2$20 , 2 2$0 ] [ Difficulty ] ;
37277: LD_ADDR_EXP 114
37281: PUSH
37282: LD_INT 5950
37284: PUSH
37285: LD_INT 4900
37287: PUSH
37288: LD_INT 4200
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: PUSH
37296: LD_OWVAR 67
37300: ARRAY
37301: ST_TO_ADDR
// end ; else
37302: GO 37419
37304: POP
// begin Credits = [ 8 , 11 , 14 ] [ Difficulty ] ;
37305: LD_ADDR_VAR 0 9
37309: PUSH
37310: LD_INT 8
37312: PUSH
37313: LD_INT 11
37315: PUSH
37316: LD_INT 14
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: PUSH
37324: LD_OWVAR 67
37328: ARRAY
37329: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 1 ) ;
37330: LD_ADDR_VAR 0 8
37334: PUSH
37335: LD_VAR 0 9
37339: PUSH
37340: LD_EXP 191
37344: PLUS
37345: PPUSH
37346: LD_INT 1
37348: PPUSH
37349: CALL 36966 0 2
37353: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37354: LD_ADDR_EXP 191
37358: PUSH
37359: LD_VAR 0 9
37363: PUSH
37364: LD_EXP 191
37368: PLUS
37369: PUSH
37370: LD_VAR 0 8
37374: MINUS
37375: ST_TO_ADDR
// R1_attack_time = [ 2 2$50 , 2 2$20 , 2 2$0 ] [ Difficulty ] ;
37376: LD_ADDR_EXP 114
37380: PUSH
37381: LD_INT 5950
37383: PUSH
37384: LD_INT 4900
37386: PUSH
37387: LD_INT 4200
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: PUSH
37395: LD_OWVAR 67
37399: ARRAY
37400: ST_TO_ADDR
// if R1_attack_time > 6 6$0 then
37401: LD_EXP 114
37405: PUSH
37406: LD_INT 12600
37408: GREATER
37409: IFFALSE 37419
// R1_Attack_Counter = 0 ;
37411: LD_ADDR_EXP 116
37415: PUSH
37416: LD_INT 0
37418: ST_TO_ADDR
// end ; end ; end else
37419: GO 38253
// if tick < 14 14$0 then
37421: LD_OWVAR 1
37425: PUSH
37426: LD_INT 29400
37428: LESS
37429: IFFALSE 37661
// begin case R1_Attack_Counter of 1 :
37431: LD_EXP 116
37435: PUSH
37436: LD_INT 1
37438: DOUBLE
37439: EQUAL
37440: IFTRUE 37444
37442: GO 37544
37444: POP
// begin case Difficulty of 1 , 2 :
37445: LD_OWVAR 67
37449: PUSH
37450: LD_INT 1
37452: DOUBLE
37453: EQUAL
37454: IFTRUE 37464
37456: LD_INT 2
37458: DOUBLE
37459: EQUAL
37460: IFTRUE 37464
37462: GO 37486
37464: POP
// PrepareAndCreateVehicleR1 ( 3 , ru_heavy_tracked , engine_siberite , control_computer , ru_gun ) ; 3 :
37465: LD_INT 3
37467: PPUSH
37468: LD_INT 24
37470: PPUSH
37471: LD_INT 3
37473: PPUSH
37474: LD_INT 3
37476: PPUSH
37477: LD_INT 44
37479: PPUSH
37480: CALL 35588 0 5
37484: GO 37517
37486: LD_INT 3
37488: DOUBLE
37489: EQUAL
37490: IFTRUE 37494
37492: GO 37516
37494: POP
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ) ; end ;
37495: LD_INT 1
37497: PPUSH
37498: LD_INT 22
37500: PPUSH
37501: LD_INT 3
37503: PPUSH
37504: LD_INT 3
37506: PPUSH
37507: LD_INT 45
37509: PPUSH
37510: CALL 35588 0 5
37514: GO 37517
37516: POP
// R1_attack_time = [ 1 1$50 , 1 1$20 , 1 1$30 ] [ Difficulty ] ;
37517: LD_ADDR_EXP 114
37521: PUSH
37522: LD_INT 3850
37524: PUSH
37525: LD_INT 2800
37527: PUSH
37528: LD_INT 3150
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: PUSH
37536: LD_OWVAR 67
37540: ARRAY
37541: ST_TO_ADDR
// end ; else
37542: GO 37659
37544: POP
// begin Credits = [ 14 , 18 , 22 ] [ Difficulty ] ;
37545: LD_ADDR_VAR 0 9
37549: PUSH
37550: LD_INT 14
37552: PUSH
37553: LD_INT 18
37555: PUSH
37556: LD_INT 22
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: PUSH
37564: LD_OWVAR 67
37568: ARRAY
37569: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 2 ) ;
37570: LD_ADDR_VAR 0 8
37574: PUSH
37575: LD_VAR 0 9
37579: PUSH
37580: LD_EXP 191
37584: PLUS
37585: PPUSH
37586: LD_INT 2
37588: PPUSH
37589: CALL 36966 0 2
37593: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37594: LD_ADDR_EXP 191
37598: PUSH
37599: LD_VAR 0 9
37603: PUSH
37604: LD_EXP 191
37608: PLUS
37609: PUSH
37610: LD_VAR 0 8
37614: MINUS
37615: ST_TO_ADDR
// R1_attack_time = [ 3 3$30 , 3 3$0 , 2 2$40 ] [ Difficulty ] ;
37616: LD_ADDR_EXP 114
37620: PUSH
37621: LD_INT 7350
37623: PUSH
37624: LD_INT 6300
37626: PUSH
37627: LD_INT 5600
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: PUSH
37635: LD_OWVAR 67
37639: ARRAY
37640: ST_TO_ADDR
// if R1_attack_time > 14 14$0 then
37641: LD_EXP 114
37645: PUSH
37646: LD_INT 29400
37648: GREATER
37649: IFFALSE 37659
// R1_Attack_Counter = 0 ;
37651: LD_ADDR_EXP 116
37655: PUSH
37656: LD_INT 0
37658: ST_TO_ADDR
// end ; end ; end else
37659: GO 38253
// if tick < 25 25$0 then
37661: LD_OWVAR 1
37665: PUSH
37666: LD_INT 52500
37668: LESS
37669: IFFALSE 37787
// begin Credits = [ 8 , 10 , 12 ] [ Difficulty ] ;
37671: LD_ADDR_VAR 0 9
37675: PUSH
37676: LD_INT 8
37678: PUSH
37679: LD_INT 10
37681: PUSH
37682: LD_INT 12
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: PUSH
37690: LD_OWVAR 67
37694: ARRAY
37695: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 3 ) ;
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: LD_VAR 0 9
37705: PUSH
37706: LD_EXP 191
37710: PLUS
37711: PPUSH
37712: LD_INT 3
37714: PPUSH
37715: CALL 36966 0 2
37719: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37720: LD_ADDR_EXP 191
37724: PUSH
37725: LD_VAR 0 9
37729: PUSH
37730: LD_EXP 191
37734: PLUS
37735: PUSH
37736: LD_VAR 0 8
37740: MINUS
37741: ST_TO_ADDR
// R1_attack_time = [ 2 2$0 , 1 1$50 , 1 1$40 ] [ Difficulty ] ;
37742: LD_ADDR_EXP 114
37746: PUSH
37747: LD_INT 4200
37749: PUSH
37750: LD_INT 3850
37752: PUSH
37753: LD_INT 3500
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: PUSH
37761: LD_OWVAR 67
37765: ARRAY
37766: ST_TO_ADDR
// if R1_attack_time > 25 25$0 then
37767: LD_EXP 114
37771: PUSH
37772: LD_INT 52500
37774: GREATER
37775: IFFALSE 37785
// R1_Attack_Counter = 0 ;
37777: LD_ADDR_EXP 116
37781: PUSH
37782: LD_INT 0
37784: ST_TO_ADDR
// end else
37785: GO 38253
// if tick < Rus_Attack_time then
37787: LD_OWVAR 1
37791: PUSH
37792: LD_EXP 130
37796: LESS
37797: IFFALSE 37897
// begin Credits = [ 14 , 18 , 22 ] [ Difficulty ] ;
37799: LD_ADDR_VAR 0 9
37803: PUSH
37804: LD_INT 14
37806: PUSH
37807: LD_INT 18
37809: PUSH
37810: LD_INT 22
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: PUSH
37818: LD_OWVAR 67
37822: ARRAY
37823: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 4 ) ;
37824: LD_ADDR_VAR 0 8
37828: PUSH
37829: LD_VAR 0 9
37833: PUSH
37834: LD_EXP 191
37838: PLUS
37839: PPUSH
37840: LD_INT 4
37842: PPUSH
37843: CALL 36966 0 2
37847: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37848: LD_ADDR_EXP 191
37852: PUSH
37853: LD_VAR 0 9
37857: PUSH
37858: LD_EXP 191
37862: PLUS
37863: PUSH
37864: LD_VAR 0 8
37868: MINUS
37869: ST_TO_ADDR
// R1_attack_time = [ 4 4$0 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
37870: LD_ADDR_EXP 114
37874: PUSH
37875: LD_INT 8400
37877: PUSH
37878: LD_INT 7350
37880: PUSH
37881: LD_INT 6650
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: PUSH
37889: LD_OWVAR 67
37893: ARRAY
37894: ST_TO_ADDR
// end else
37895: GO 38253
// if tick < Stevens_Coming_Time then
37897: LD_OWVAR 1
37901: PUSH
37902: LD_EXP 200
37906: LESS
37907: IFFALSE 38007
// begin Credits = [ 18 , 22 , 26 ] [ Difficulty ] ;
37909: LD_ADDR_VAR 0 9
37913: PUSH
37914: LD_INT 18
37916: PUSH
37917: LD_INT 22
37919: PUSH
37920: LD_INT 26
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: LD_OWVAR 67
37932: ARRAY
37933: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 5 ) ;
37934: LD_ADDR_VAR 0 8
37938: PUSH
37939: LD_VAR 0 9
37943: PUSH
37944: LD_EXP 191
37948: PLUS
37949: PPUSH
37950: LD_INT 5
37952: PPUSH
37953: CALL 36966 0 2
37957: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37958: LD_ADDR_EXP 191
37962: PUSH
37963: LD_VAR 0 9
37967: PUSH
37968: LD_EXP 191
37972: PLUS
37973: PUSH
37974: LD_VAR 0 8
37978: MINUS
37979: ST_TO_ADDR
// R1_attack_time = [ 4 4$3 , 4 4$0 , 3 3$30 ] [ Difficulty ] ;
37980: LD_ADDR_EXP 114
37984: PUSH
37985: LD_INT 8505
37987: PUSH
37988: LD_INT 8400
37990: PUSH
37991: LD_INT 7350
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: PUSH
37999: LD_OWVAR 67
38003: ARRAY
38004: ST_TO_ADDR
// end else
38005: GO 38253
// if tick < Alaskite_Bomb_Time then
38007: LD_OWVAR 1
38011: PUSH
38012: LD_EXP 212
38016: LESS
38017: IFFALSE 38117
// begin Credits = [ 22 , 27 , 32 ] [ Difficulty ] ;
38019: LD_ADDR_VAR 0 9
38023: PUSH
38024: LD_INT 22
38026: PUSH
38027: LD_INT 27
38029: PUSH
38030: LD_INT 32
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: LIST
38037: PUSH
38038: LD_OWVAR 67
38042: ARRAY
38043: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 5 ) ;
38044: LD_ADDR_VAR 0 8
38048: PUSH
38049: LD_VAR 0 9
38053: PUSH
38054: LD_EXP 191
38058: PLUS
38059: PPUSH
38060: LD_INT 5
38062: PPUSH
38063: CALL 36966 0 2
38067: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
38068: LD_ADDR_EXP 191
38072: PUSH
38073: LD_VAR 0 9
38077: PUSH
38078: LD_EXP 191
38082: PLUS
38083: PUSH
38084: LD_VAR 0 8
38088: MINUS
38089: ST_TO_ADDR
// R1_attack_time = [ 4 4$0 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
38090: LD_ADDR_EXP 114
38094: PUSH
38095: LD_INT 8400
38097: PUSH
38098: LD_INT 7350
38100: PUSH
38101: LD_INT 6650
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: PUSH
38109: LD_OWVAR 67
38113: ARRAY
38114: ST_TO_ADDR
// end else
38115: GO 38253
// if tick > Alaskite_Bomb_Time then
38117: LD_OWVAR 1
38121: PUSH
38122: LD_EXP 212
38126: GREATER
38127: IFFALSE 38253
// begin Strength_of_attack = Rand ( 1 , 7 ) ;
38129: LD_ADDR_VAR 0 10
38133: PUSH
38134: LD_INT 1
38136: PPUSH
38137: LD_INT 7
38139: PPUSH
38140: CALL_OW 12
38144: ST_TO_ADDR
// Credits = [ 6 , 8 , 10 ] [ Difficulty ] * Strength_of_attack ;
38145: LD_ADDR_VAR 0 9
38149: PUSH
38150: LD_INT 6
38152: PUSH
38153: LD_INT 8
38155: PUSH
38156: LD_INT 10
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: PUSH
38164: LD_OWVAR 67
38168: ARRAY
38169: PUSH
38170: LD_VAR 0 10
38174: MUL
38175: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 6 ) ;
38176: LD_ADDR_VAR 0 8
38180: PUSH
38181: LD_VAR 0 9
38185: PUSH
38186: LD_EXP 191
38190: PLUS
38191: PPUSH
38192: LD_INT 6
38194: PPUSH
38195: CALL 36966 0 2
38199: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
38200: LD_ADDR_EXP 191
38204: PUSH
38205: LD_VAR 0 9
38209: PUSH
38210: LD_EXP 191
38214: PLUS
38215: PUSH
38216: LD_VAR 0 8
38220: MINUS
38221: ST_TO_ADDR
// R1_attack_time = [ 1 1$0 , 1 1$0 , 1 1$0 ] [ Difficulty ] * Strength_of_attack ;
38222: LD_ADDR_EXP 114
38226: PUSH
38227: LD_INT 2100
38229: PUSH
38230: LD_INT 2100
38232: PUSH
38233: LD_INT 2100
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: PUSH
38241: LD_OWVAR 67
38245: ARRAY
38246: PUSH
38247: LD_VAR 0 10
38251: MUL
38252: ST_TO_ADDR
// end ; end ;
38253: LD_VAR 0 1
38257: RET
// function GeneratePatrolingGroup ; begin
38258: LD_INT 0
38260: PPUSH
// New_Patrol_Group = [ ] ;
38261: LD_ADDR_EXP 122
38265: PUSH
38266: EMPTY
38267: ST_TO_ADDR
// if R1_Attack_Counter > 2 then
38268: LD_EXP 116
38272: PUSH
38273: LD_INT 2
38275: GREATER
38276: IFFALSE 38324
// begin R1Patrol_group = UnitFilter ( R1Patrol_group , [ f_alive ] ) ;
38278: LD_ADDR_EXP 123
38282: PUSH
38283: LD_EXP 123
38287: PPUSH
38288: LD_INT 51
38290: PUSH
38291: EMPTY
38292: LIST
38293: PPUSH
38294: CALL_OW 72
38298: ST_TO_ADDR
// PrepareAndCreateVehicleR1P ( 1 - R1Patrol_Group , ru_medium_tracked , engine_siberite , control_computer , ru_heavy_machine_gun ) ;
38299: LD_INT 1
38301: PUSH
38302: LD_EXP 123
38306: MINUS
38307: PPUSH
38308: LD_INT 22
38310: PPUSH
38311: LD_INT 3
38313: PPUSH
38314: LD_INT 3
38316: PPUSH
38317: LD_INT 42
38319: PPUSH
38320: CALL 35397 0 5
// end ; end ;
38324: LD_VAR 0 1
38328: RET
// export function Rus1Attack ; var Un , Am_units , Attack_area , Area_changed , Hlp_R1_Attack_Group , Hlp_New_Patrol_Group , temp_list , spawn_at_Arrival1 ; begin
38329: LD_INT 0
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
// Hlp_R1_Attack_Group = R1_Attack_Group ;
38340: LD_ADDR_VAR 0 6
38344: PUSH
38345: LD_EXP 118
38349: ST_TO_ADDR
// Hlp_New_Patrol_Group = New_Patrol_Group ;
38350: LD_ADDR_VAR 0 7
38354: PUSH
38355: LD_EXP 122
38359: ST_TO_ADDR
// if tick < 12 12$0 then
38360: LD_OWVAR 1
38364: PUSH
38365: LD_INT 25200
38367: LESS
38368: IFFALSE 38444
// begin for Un in Hlp_R1_Attack_Group do
38370: LD_ADDR_VAR 0 2
38374: PUSH
38375: LD_VAR 0 6
38379: PUSH
38380: FOR_IN
38381: IFFALSE 38400
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38383: LD_VAR 0 2
38387: PPUSH
38388: LD_INT 24
38390: PPUSH
38391: LD_INT 0
38393: PPUSH
38394: CALL_OW 49
38398: GO 38380
38400: POP
38401: POP
// for Un in Hlp_New_Patrol_Group do
38402: LD_ADDR_VAR 0 2
38406: PUSH
38407: LD_VAR 0 7
38411: PUSH
38412: FOR_IN
38413: IFFALSE 38432
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38415: LD_VAR 0 2
38419: PPUSH
38420: LD_INT 24
38422: PPUSH
38423: LD_INT 0
38425: PPUSH
38426: CALL_OW 49
38430: GO 38412
38432: POP
38433: POP
// spawn_at_Arrival1 = true ;
38434: LD_ADDR_VAR 0 9
38438: PUSH
38439: LD_INT 1
38441: ST_TO_ADDR
// end else
38442: GO 38602
// begin if Rand ( 0 , 1 ) then
38444: LD_INT 0
38446: PPUSH
38447: LD_INT 1
38449: PPUSH
38450: CALL_OW 12
38454: IFFALSE 38530
// begin for Un in Hlp_R1_Attack_Group do
38456: LD_ADDR_VAR 0 2
38460: PUSH
38461: LD_VAR 0 6
38465: PUSH
38466: FOR_IN
38467: IFFALSE 38486
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38469: LD_VAR 0 2
38473: PPUSH
38474: LD_INT 24
38476: PPUSH
38477: LD_INT 0
38479: PPUSH
38480: CALL_OW 49
38484: GO 38466
38486: POP
38487: POP
// for Un in Hlp_New_Patrol_Group do
38488: LD_ADDR_VAR 0 2
38492: PUSH
38493: LD_VAR 0 7
38497: PUSH
38498: FOR_IN
38499: IFFALSE 38518
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38501: LD_VAR 0 2
38505: PPUSH
38506: LD_INT 24
38508: PPUSH
38509: LD_INT 0
38511: PPUSH
38512: CALL_OW 49
38516: GO 38498
38518: POP
38519: POP
// spawn_at_Arrival1 = true ;
38520: LD_ADDR_VAR 0 9
38524: PUSH
38525: LD_INT 1
38527: ST_TO_ADDR
// end else
38528: GO 38602
// begin for Un in Hlp_R1_Attack_Group do
38530: LD_ADDR_VAR 0 2
38534: PUSH
38535: LD_VAR 0 6
38539: PUSH
38540: FOR_IN
38541: IFFALSE 38560
// PlaceUnitArea ( Un , Arrival2 , false ) ;
38543: LD_VAR 0 2
38547: PPUSH
38548: LD_INT 25
38550: PPUSH
38551: LD_INT 0
38553: PPUSH
38554: CALL_OW 49
38558: GO 38540
38560: POP
38561: POP
// for Un in Hlp_New_Patrol_Group do
38562: LD_ADDR_VAR 0 2
38566: PUSH
38567: LD_VAR 0 7
38571: PUSH
38572: FOR_IN
38573: IFFALSE 38592
// PlaceUnitArea ( Un , Arrival2 , false ) ;
38575: LD_VAR 0 2
38579: PPUSH
38580: LD_INT 25
38582: PPUSH
38583: LD_INT 0
38585: PPUSH
38586: CALL_OW 49
38590: GO 38572
38592: POP
38593: POP
// spawn_at_Arrival1 = false ;
38594: LD_ADDR_VAR 0 9
38598: PUSH
38599: LD_INT 0
38601: ST_TO_ADDR
// end ; end ; Main_R1_Attack_Group = Main_R1_Attack_Group ^ Hlp_R1_Attack_Group ;
38602: LD_ADDR_EXP 119
38606: PUSH
38607: LD_EXP 119
38611: PUSH
38612: LD_VAR 0 6
38616: ADD
38617: ST_TO_ADDR
// Main_R1_Attack_Group = UnitFilter ( Main_R1_Attack_Group , [ f_alive ] ) ;
38618: LD_ADDR_EXP 119
38622: PUSH
38623: LD_EXP 119
38627: PPUSH
38628: LD_INT 51
38630: PUSH
38631: EMPTY
38632: LIST
38633: PPUSH
38634: CALL_OW 72
38638: ST_TO_ADDR
// Area_changed = false ;
38639: LD_ADDR_VAR 0 5
38643: PUSH
38644: LD_INT 0
38646: ST_TO_ADDR
// if FilterUnitsInArea ( JMM_Hill , [ f_side , americans ] ) > 0 then
38647: LD_INT 2
38649: PPUSH
38650: LD_INT 22
38652: PUSH
38653: LD_EXP 176
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PPUSH
38662: CALL_OW 70
38666: PUSH
38667: LD_INT 0
38669: GREATER
38670: IFFALSE 38690
// begin Area_changed = true ;
38672: LD_ADDR_VAR 0 5
38676: PUSH
38677: LD_INT 1
38679: ST_TO_ADDR
// attack_area = JMM_Hill ;
38680: LD_ADDR_VAR 0 4
38684: PUSH
38685: LD_INT 2
38687: ST_TO_ADDR
// end else
38688: GO 39075
// if FilterUnitsInArea ( Am_Base , [ f_side , americans ] ) > 0 then
38690: LD_INT 1
38692: PPUSH
38693: LD_INT 22
38695: PUSH
38696: LD_EXP 176
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PPUSH
38705: CALL_OW 70
38709: PUSH
38710: LD_INT 0
38712: GREATER
38713: IFFALSE 38733
// begin Area_changed = true ;
38715: LD_ADDR_VAR 0 5
38719: PUSH
38720: LD_INT 1
38722: ST_TO_ADDR
// attack_area = Am_Base ;
38723: LD_ADDR_VAR 0 4
38727: PUSH
38728: LD_INT 1
38730: ST_TO_ADDR
// end else
38731: GO 39075
// if FilterUnitsInArea ( Ar_Base , [ f_side , americans ] ) > 0 then
38733: LD_INT 17
38735: PPUSH
38736: LD_INT 22
38738: PUSH
38739: LD_EXP 176
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PPUSH
38748: CALL_OW 70
38752: PUSH
38753: LD_INT 0
38755: GREATER
38756: IFFALSE 38776
// begin Area_changed = true ;
38758: LD_ADDR_VAR 0 5
38762: PUSH
38763: LD_INT 1
38765: ST_TO_ADDR
// attack_area = Ar_Base ;
38766: LD_ADDR_VAR 0 4
38770: PUSH
38771: LD_INT 17
38773: ST_TO_ADDR
// end else
38774: GO 39075
// if FilterUnitsInArea ( Plan3 , [ f_side , americans ] ) > 0 then
38776: LD_INT 31
38778: PPUSH
38779: LD_INT 22
38781: PUSH
38782: LD_EXP 176
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PPUSH
38791: CALL_OW 70
38795: PUSH
38796: LD_INT 0
38798: GREATER
38799: IFFALSE 38819
// begin Area_changed = true ;
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_INT 1
38808: ST_TO_ADDR
// attack_area = Plan3 ;
38809: LD_ADDR_VAR 0 4
38813: PUSH
38814: LD_INT 31
38816: ST_TO_ADDR
// end else
38817: GO 39075
// if FilterUnitsInArea ( Plan1 , [ f_side , americans ] ) > 0 then
38819: LD_INT 29
38821: PPUSH
38822: LD_INT 22
38824: PUSH
38825: LD_EXP 176
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PPUSH
38834: CALL_OW 70
38838: PUSH
38839: LD_INT 0
38841: GREATER
38842: IFFALSE 38862
// begin Area_changed = true ;
38844: LD_ADDR_VAR 0 5
38848: PUSH
38849: LD_INT 1
38851: ST_TO_ADDR
// attack_area = Plan1 ;
38852: LD_ADDR_VAR 0 4
38856: PUSH
38857: LD_INT 29
38859: ST_TO_ADDR
// end else
38860: GO 39075
// if FilterUnitsInArea ( Plan5 , [ f_side , americans ] ) > 0 then
38862: LD_INT 33
38864: PPUSH
38865: LD_INT 22
38867: PUSH
38868: LD_EXP 176
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PPUSH
38877: CALL_OW 70
38881: PUSH
38882: LD_INT 0
38884: GREATER
38885: IFFALSE 38905
// begin Area_changed = true ;
38887: LD_ADDR_VAR 0 5
38891: PUSH
38892: LD_INT 1
38894: ST_TO_ADDR
// attack_area = Plan5 ;
38895: LD_ADDR_VAR 0 4
38899: PUSH
38900: LD_INT 33
38902: ST_TO_ADDR
// end else
38903: GO 39075
// if FilterUnitsInArea ( Plan2 , [ f_side , americans ] ) > 0 then
38905: LD_INT 30
38907: PPUSH
38908: LD_INT 22
38910: PUSH
38911: LD_EXP 176
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PPUSH
38920: CALL_OW 70
38924: PUSH
38925: LD_INT 0
38927: GREATER
38928: IFFALSE 38948
// begin Area_changed = true ;
38930: LD_ADDR_VAR 0 5
38934: PUSH
38935: LD_INT 1
38937: ST_TO_ADDR
// attack_area = Plan2 ;
38938: LD_ADDR_VAR 0 4
38942: PUSH
38943: LD_INT 30
38945: ST_TO_ADDR
// end else
38946: GO 39075
// if FilterUnitsInArea ( Plan4 , [ f_side , americans ] ) > 0 then
38948: LD_INT 32
38950: PPUSH
38951: LD_INT 22
38953: PUSH
38954: LD_EXP 176
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PPUSH
38963: CALL_OW 70
38967: PUSH
38968: LD_INT 0
38970: GREATER
38971: IFFALSE 38991
// begin Area_changed = true ;
38973: LD_ADDR_VAR 0 5
38977: PUSH
38978: LD_INT 1
38980: ST_TO_ADDR
// attack_area = Plan4 ;
38981: LD_ADDR_VAR 0 4
38985: PUSH
38986: LD_INT 32
38988: ST_TO_ADDR
// end else
38989: GO 39075
// if FilterUnitsInArea ( Plan6 , [ f_side , americans ] ) > 0 then
38991: LD_INT 34
38993: PPUSH
38994: LD_INT 22
38996: PUSH
38997: LD_EXP 176
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PPUSH
39006: CALL_OW 70
39010: PUSH
39011: LD_INT 0
39013: GREATER
39014: IFFALSE 39034
// begin Area_changed = true ;
39016: LD_ADDR_VAR 0 5
39020: PUSH
39021: LD_INT 1
39023: ST_TO_ADDR
// attack_area = Plan6 ;
39024: LD_ADDR_VAR 0 4
39028: PUSH
39029: LD_INT 34
39031: ST_TO_ADDR
// end else
39032: GO 39075
// if FilterUnitsInArea ( Aliance_Base , [ f_side , americans ] ) > 0 then
39034: LD_INT 7
39036: PPUSH
39037: LD_INT 22
39039: PUSH
39040: LD_EXP 176
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PPUSH
39049: CALL_OW 70
39053: PUSH
39054: LD_INT 0
39056: GREATER
39057: IFFALSE 39075
// begin Area_changed = true ;
39059: LD_ADDR_VAR 0 5
39063: PUSH
39064: LD_INT 1
39066: ST_TO_ADDR
// attack_area = Aliance_Base ;
39067: LD_ADDR_VAR 0 4
39071: PUSH
39072: LD_INT 7
39074: ST_TO_ADDR
// end ; temp_list = Hlp_R1_Attack_Group ^ Hlp_New_Patrol_Group ;
39075: LD_ADDR_VAR 0 8
39079: PUSH
39080: LD_VAR 0 6
39084: PUSH
39085: LD_VAR 0 7
39089: ADD
39090: ST_TO_ADDR
// case attack_area of JMM_Hill :
39091: LD_VAR 0 4
39095: PUSH
39096: LD_INT 2
39098: DOUBLE
39099: EQUAL
39100: IFTRUE 39104
39102: GO 39190
39104: POP
// begin if spawn_at_Arrival1 then
39105: LD_VAR 0 9
39109: IFFALSE 39113
// begin end else
39111: GO 39188
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39113: LD_VAR 0 8
39117: PPUSH
39118: LD_INT 163
39120: PPUSH
39121: LD_INT 181
39123: PPUSH
39124: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39128: LD_VAR 0 8
39132: PPUSH
39133: LD_INT 175
39135: PPUSH
39136: LD_INT 165
39138: PPUSH
39139: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39143: LD_VAR 0 8
39147: PPUSH
39148: LD_INT 160
39150: PPUSH
39151: LD_INT 138
39153: PPUSH
39154: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39158: LD_VAR 0 8
39162: PPUSH
39163: LD_INT 138
39165: PPUSH
39166: LD_INT 121
39168: PPUSH
39169: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39173: LD_VAR 0 8
39177: PPUSH
39178: LD_INT 113
39180: PPUSH
39181: LD_INT 105
39183: PPUSH
39184: CALL_OW 174
// end ; end ; Am_Base :
39188: GO 39608
39190: LD_INT 1
39192: DOUBLE
39193: EQUAL
39194: IFTRUE 39198
39196: GO 39329
39198: POP
// begin if spawn_at_Arrival1 then
39199: LD_VAR 0 9
39203: IFFALSE 39222
// begin ComAgressiveMove ( temp_list , 86 , 123 ) ;
39205: LD_VAR 0 8
39209: PPUSH
39210: LD_INT 86
39212: PPUSH
39213: LD_INT 123
39215: PPUSH
39216: CALL_OW 114
// end else
39220: GO 39327
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39222: LD_VAR 0 8
39226: PPUSH
39227: LD_INT 163
39229: PPUSH
39230: LD_INT 181
39232: PPUSH
39233: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39237: LD_VAR 0 8
39241: PPUSH
39242: LD_INT 175
39244: PPUSH
39245: LD_INT 165
39247: PPUSH
39248: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39252: LD_VAR 0 8
39256: PPUSH
39257: LD_INT 160
39259: PPUSH
39260: LD_INT 138
39262: PPUSH
39263: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39267: LD_VAR 0 8
39271: PPUSH
39272: LD_INT 138
39274: PPUSH
39275: LD_INT 121
39277: PPUSH
39278: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39282: LD_VAR 0 8
39286: PPUSH
39287: LD_INT 113
39289: PPUSH
39290: LD_INT 105
39292: PPUSH
39293: CALL_OW 174
// AddComAgressiveMove ( temp_list , 99 , 83 ) ;
39297: LD_VAR 0 8
39301: PPUSH
39302: LD_INT 99
39304: PPUSH
39305: LD_INT 83
39307: PPUSH
39308: CALL_OW 174
// AddComAgressiveMove ( temp_list , 83 , 62 ) ;
39312: LD_VAR 0 8
39316: PPUSH
39317: LD_INT 83
39319: PPUSH
39320: LD_INT 62
39322: PPUSH
39323: CALL_OW 174
// end ; end ; Ar_Base :
39327: GO 39608
39329: LD_INT 17
39331: DOUBLE
39332: EQUAL
39333: IFTRUE 39337
39335: GO 39513
39337: POP
// begin if spawn_at_Arrival1 then
39338: LD_VAR 0 9
39342: IFFALSE 39406
// begin ComAgressiveMove ( temp_list , 86 , 123 ) ;
39344: LD_VAR 0 8
39348: PPUSH
39349: LD_INT 86
39351: PPUSH
39352: LD_INT 123
39354: PPUSH
39355: CALL_OW 114
// AddComAgressiveMove ( temp_list , 71 , 101 ) ;
39359: LD_VAR 0 8
39363: PPUSH
39364: LD_INT 71
39366: PPUSH
39367: LD_INT 101
39369: PPUSH
39370: CALL_OW 174
// AddComAgressiveMove ( temp_list , 58 , 77 ) ;
39374: LD_VAR 0 8
39378: PPUSH
39379: LD_INT 58
39381: PPUSH
39382: LD_INT 77
39384: PPUSH
39385: CALL_OW 174
// AddComAgressiveMove ( temp_list , 66 , 61 ) ;
39389: LD_VAR 0 8
39393: PPUSH
39394: LD_INT 66
39396: PPUSH
39397: LD_INT 61
39399: PPUSH
39400: CALL_OW 174
// end else
39404: GO 39511
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39406: LD_VAR 0 8
39410: PPUSH
39411: LD_INT 163
39413: PPUSH
39414: LD_INT 181
39416: PPUSH
39417: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39421: LD_VAR 0 8
39425: PPUSH
39426: LD_INT 175
39428: PPUSH
39429: LD_INT 165
39431: PPUSH
39432: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39436: LD_VAR 0 8
39440: PPUSH
39441: LD_INT 160
39443: PPUSH
39444: LD_INT 138
39446: PPUSH
39447: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39451: LD_VAR 0 8
39455: PPUSH
39456: LD_INT 138
39458: PPUSH
39459: LD_INT 121
39461: PPUSH
39462: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39466: LD_VAR 0 8
39470: PPUSH
39471: LD_INT 113
39473: PPUSH
39474: LD_INT 105
39476: PPUSH
39477: CALL_OW 174
// AddComAgressiveMove ( temp_list , 108 , 82 ) ;
39481: LD_VAR 0 8
39485: PPUSH
39486: LD_INT 108
39488: PPUSH
39489: LD_INT 82
39491: PPUSH
39492: CALL_OW 174
// AddComAgressiveMove ( temp_list , 99 , 59 ) ;
39496: LD_VAR 0 8
39500: PPUSH
39501: LD_INT 99
39503: PPUSH
39504: LD_INT 59
39506: PPUSH
39507: CALL_OW 174
// end ; end ; Aliance_Base :
39511: GO 39608
39513: LD_INT 7
39515: DOUBLE
39516: EQUAL
39517: IFTRUE 39521
39519: GO 39607
39521: POP
// begin if spawn_at_Arrival1 then
39522: LD_VAR 0 9
39526: IFFALSE 39590
// begin ComAgressiveMove ( temp_list , 96 , 163 ) ;
39528: LD_VAR 0 8
39532: PPUSH
39533: LD_INT 96
39535: PPUSH
39536: LD_INT 163
39538: PPUSH
39539: CALL_OW 114
// AddComAgressiveMove ( temp_list , 120 , 179 ) ;
39543: LD_VAR 0 8
39547: PPUSH
39548: LD_INT 120
39550: PPUSH
39551: LD_INT 179
39553: PPUSH
39554: CALL_OW 174
// AddComAgressiveMove ( temp_list , 141 , 179 ) ;
39558: LD_VAR 0 8
39562: PPUSH
39563: LD_INT 141
39565: PPUSH
39566: LD_INT 179
39568: PPUSH
39569: CALL_OW 174
// AddComAgressiveMove ( temp_list , 163 , 179 ) ;
39573: LD_VAR 0 8
39577: PPUSH
39578: LD_INT 163
39580: PPUSH
39581: LD_INT 179
39583: PPUSH
39584: CALL_OW 174
// end else
39588: GO 39605
// begin ComAgressiveMove ( temp_list , 163 , 179 ) ;
39590: LD_VAR 0 8
39594: PPUSH
39595: LD_INT 163
39597: PPUSH
39598: LD_INT 179
39600: PPUSH
39601: CALL_OW 114
// end ; end ; end ;
39605: GO 39608
39607: POP
// WaitTask ( temp_list , 1 ) ;
39608: LD_VAR 0 8
39612: PPUSH
39613: LD_INT 1
39615: PPUSH
39616: CALL 17876 0 2
// if not ( ExistMc ( Russian1_reg_id ) ) then
39620: LD_EXP 237
39624: PPUSH
39625: CALL_OW 386
39629: NOT
39630: IFFALSE 39688
// begin Russian1_reg_id = McRegistry ( russians1 , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important , mc_reg_ignore_fog , mc_reg_buildings ] ) ;
39632: LD_ADDR_EXP 237
39636: PUSH
39637: LD_EXP 179
39641: PPUSH
39642: LD_INT 1
39644: PUSH
39645: LD_INT 70
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: LD_VAR 0 4
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 8
39666: NEG
39667: PUSH
39668: LD_INT 7
39670: PUSH
39671: LD_INT 9
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: PPUSH
39681: CALL_OW 399
39685: ST_TO_ADDR
// end else
39686: GO 39718
// if Area_changed then
39688: LD_VAR 0 5
39692: IFFALSE 39718
// begin McRegistryChangeOptions ( Russian1_reg_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
39694: LD_EXP 237
39698: PPUSH
39699: LD_INT 2
39701: PUSH
39702: LD_VAR 0 4
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: EMPTY
39712: LIST
39713: PPUSH
39714: CALL_OW 400
// end ; if not ( ExistMc ( Russian1_att_id ) ) then
39718: LD_EXP 238
39722: PPUSH
39723: CALL_OW 386
39727: NOT
39728: IFFALSE 39805
// begin Russian1_att_id = McAttack ( 100 , Russian1_reg_id , Main_R1_Attack_Group , [ [ mc_retreat_area_vehicles , retreat1 ] , [ mc_retreat_area_people , retreat1 ] , [ mc_retreat_lives_vehicles , 600 ] , [ mc_retreat_lives_people , 600 ] , mc_no_stop ] ) ;
39730: LD_ADDR_EXP 238
39734: PUSH
39735: LD_INT 100
39737: PPUSH
39738: LD_EXP 237
39742: PPUSH
39743: LD_EXP 119
39747: PPUSH
39748: LD_INT 8
39750: PUSH
39751: LD_INT 40
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 7
39760: PUSH
39761: LD_INT 40
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 6
39770: PUSH
39771: LD_INT 600
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 5
39780: PUSH
39781: LD_INT 600
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 10
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: PPUSH
39798: CALL_OW 402
39802: ST_TO_ADDR
// end else
39803: GO 39819
// begin AddMcUnits ( Russian1_att_id , Hlp_R1_Attack_Group ) ;
39805: LD_EXP 238
39809: PPUSH
39810: LD_VAR 0 6
39814: PPUSH
39815: CALL_OW 390
// end ; if not ( ExistMc ( Russian1_reg1_id ) ) then
39819: LD_EXP 239
39823: PPUSH
39824: CALL_OW 386
39828: NOT
39829: IFFALSE 39879
// begin Russian1_reg1_id = McRegistry ( russians1 , [ [ mc_reg_refresh_time , 0 0$4 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important ] ) ;
39831: LD_ADDR_EXP 239
39835: PUSH
39836: LD_EXP 179
39840: PPUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 140
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_VAR 0 4
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 8
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: LIST
39871: PPUSH
39872: CALL_OW 399
39876: ST_TO_ADDR
// end else
39877: GO 39909
// if Area_changed then
39879: LD_VAR 0 5
39883: IFFALSE 39909
// begin McRegistryChangeOptions ( Russian1_reg1_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
39885: LD_EXP 239
39889: PPUSH
39890: LD_INT 2
39892: PUSH
39893: LD_VAR 0 4
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: EMPTY
39903: LIST
39904: PPUSH
39905: CALL_OW 400
// end ; if not ( ExistMc ( Russian1_patr_id ) ) and ( Hlp_New_Patrol_Group <> 0 ) then
39909: LD_EXP 240
39913: PPUSH
39914: CALL_OW 386
39918: NOT
39919: PUSH
39920: LD_VAR 0 7
39924: PUSH
39925: LD_INT 0
39927: NONEQUAL
39928: AND
39929: IFFALSE 39972
// begin R1Patrol_group = Hlp_New_Patrol_Group ;
39931: LD_ADDR_EXP 123
39935: PUSH
39936: LD_VAR 0 7
39940: ST_TO_ADDR
// Russian1_patr_id = McPatrol ( 100 , Russian1_reg1_id , Hlp_New_Patrol_Group , [ mc_no_stop ] ) ;
39941: LD_ADDR_EXP 240
39945: PUSH
39946: LD_INT 100
39948: PPUSH
39949: LD_EXP 239
39953: PPUSH
39954: LD_VAR 0 7
39958: PPUSH
39959: LD_INT 10
39961: PUSH
39962: EMPTY
39963: LIST
39964: PPUSH
39965: CALL_OW 403
39969: ST_TO_ADDR
// end else
39970: GO 40012
// begin R1Patrol_group = R1Patrol_group ^ Hlp_New_Patrol_Group ;
39972: LD_ADDR_EXP 123
39976: PUSH
39977: LD_EXP 123
39981: PUSH
39982: LD_VAR 0 7
39986: ADD
39987: ST_TO_ADDR
// if Hlp_New_Patrol_Group <> 0 then
39988: LD_VAR 0 7
39992: PUSH
39993: LD_INT 0
39995: NONEQUAL
39996: IFFALSE 40012
// AddMcUnits ( Russian1_patr_id , Hlp_New_Patrol_Group ) ;
39998: LD_EXP 240
40002: PPUSH
40003: LD_VAR 0 7
40007: PPUSH
40008: CALL_OW 390
// end ; end ;
40012: LD_VAR 0 1
40016: RET
// every 0 0$1 do var Un , ill ;
40017: GO 40019
40019: DISABLE
40020: LD_INT 0
40022: PPUSH
40023: PPUSH
// begin ill = FilterUnitsInArea ( OutComming , [ [ f_side , russians1 ] , f_not , [ f_lives , 600 ] ] ) ;
40024: LD_ADDR_VAR 0 2
40028: PUSH
40029: LD_INT 41
40031: PPUSH
40032: LD_INT 22
40034: PUSH
40035: LD_EXP 179
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 3
40046: PUSH
40047: LD_INT 24
40049: PUSH
40050: LD_INT 600
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: PPUSH
40062: CALL_OW 70
40066: ST_TO_ADDR
// ill = ill ^ FilterUnitsInArea ( arrival2 , [ [ f_side , russians1 ] , f_not , [ f_lives , 600 ] ] ) ;
40067: LD_ADDR_VAR 0 2
40071: PUSH
40072: LD_VAR 0 2
40076: PUSH
40077: LD_INT 25
40079: PPUSH
40080: LD_INT 22
40082: PUSH
40083: LD_EXP 179
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 3
40094: PUSH
40095: LD_INT 24
40097: PUSH
40098: LD_INT 600
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: PPUSH
40110: CALL_OW 70
40114: ADD
40115: ST_TO_ADDR
// if ill > 0 then
40116: LD_VAR 0 2
40120: PUSH
40121: LD_INT 0
40123: GREATER
40124: IFFALSE 40182
// begin Main_R1_Attack_Group = Main_R1_Attack_Group diff ill ;
40126: LD_ADDR_EXP 119
40130: PUSH
40131: LD_EXP 119
40135: PUSH
40136: LD_VAR 0 2
40140: DIFF
40141: ST_TO_ADDR
// RemoveMcUnits ( Russian1_att_id , ill ) ;
40142: LD_EXP 238
40146: PPUSH
40147: LD_VAR 0 2
40151: PPUSH
40152: CALL_OW 391
// for Un in ill do
40156: LD_ADDR_VAR 0 1
40160: PUSH
40161: LD_VAR 0 2
40165: PUSH
40166: FOR_IN
40167: IFFALSE 40180
// DestroyUnit ( Un ) ;
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 65
40178: GO 40166
40180: POP
40181: POP
// end ; enable ;
40182: ENABLE
// end ;
40183: PPOPN 2
40185: END
// every 0 0$1 marked 4 do
40186: GO 40188
40188: DISABLE
// begin disable ;
40189: DISABLE
// if Main_R1_Attack_Group < 50 then
40190: LD_EXP 119
40194: PUSH
40195: LD_INT 50
40197: LESS
40198: IFFALSE 40266
// begin R1_Attack_Counter = R1_Attack_Counter + 1 ;
40200: LD_ADDR_EXP 116
40204: PUSH
40205: LD_EXP 116
40209: PUSH
40210: LD_INT 1
40212: PLUS
40213: ST_TO_ADDR
// GenerateAttackingGroup ;
40214: CALL 37018 0 0
// GeneratePatrolingGroup ;
40218: CALL 38258 0 0
// Wait ( R1_attack_time ) ;
40222: LD_EXP 114
40226: PPUSH
40227: CALL_OW 67
// while R1_Attack_Continues = false do
40231: LD_EXP 196
40235: PUSH
40236: LD_INT 0
40238: EQUAL
40239: IFFALSE 40250
// Wait ( 0 0$1 ) ;
40241: LD_INT 35
40243: PPUSH
40244: CALL_OW 67
40248: GO 40231
// RaiseSailEvent ( Rus1_Attack ) ;
40250: LD_EXP 170
40254: PPUSH
40255: CALL_OW 427
// Wait ( 1 ) ;
40259: LD_INT 1
40261: PPUSH
40262: CALL_OW 67
// end ; enable ;
40266: ENABLE
// end ; end_of_file
40267: END
// every 0 0$1 trigger IsDead ( Powell ) marked 8 do
40268: LD_EXP 2
40272: PPUSH
40273: CALL_OW 301
40277: IFFALSE 40293
40279: GO 40281
40281: DISABLE
// begin YouLost ( Surrender ) ;
40282: LD_STRING Surrender
40284: PPUSH
40285: CALL_OW 104
// ExitGame ;
40289: CALL_OW 341
// end ;
40293: END
// every 0 0$1 marked 22 do
40294: GO 40296
40296: DISABLE
// begin YouLost ( JMMCaptured ) ;
40297: LD_STRING JMMCaptured
40299: PPUSH
40300: CALL_OW 104
// ExitGame ;
40304: CALL_OW 341
// end ;
40308: END
// every 0 0$1 marked 19 do
40309: GO 40311
40311: DISABLE
// begin YouLost ( Surrender ) ;
40312: LD_STRING Surrender
40314: PPUSH
40315: CALL_OW 104
// ExitGame ;
40319: CALL_OW 341
// end ;
40323: END
// every 0 0$1 marked 2 do
40324: GO 40326
40326: DISABLE
// begin YouLost ( Dismissed ) ;
40327: LD_STRING Dismissed
40329: PPUSH
40330: CALL_OW 104
// ExitGame ;
40334: CALL_OW 341
// end ;
40338: END
// every 0 0$5 trigger IsDead ( JMM ) do
40339: LD_EXP 1
40343: PPUSH
40344: CALL_OW 301
40348: IFFALSE 40364
40350: GO 40352
40352: DISABLE
// begin YouLost ( JMM ) ;
40353: LD_STRING JMM
40355: PPUSH
40356: CALL_OW 104
// ExitGame ;
40360: CALL_OW 341
// end ;
40364: END
// on UnitKamikazed ( un ) do begin if un = JMM then
40365: LD_VAR 0 1
40369: PUSH
40370: LD_EXP 1
40374: EQUAL
40375: IFFALSE 40384
// YouLost ( JMM ) ;
40377: LD_STRING JMM
40379: PPUSH
40380: CALL_OW 104
// end ;
40384: PPOPN 1
40386: END
// every 0 0$5 marked 13 do
40387: GO 40389
40389: DISABLE
// begin Wait ( 0 0$5 ) ;
40390: LD_INT 175
40392: PPUSH
40393: CALL_OW 67
// YouLost ( Motherlode1 ) ;
40397: LD_STRING Motherlode1
40399: PPUSH
40400: CALL_OW 104
// ExitGame ;
40404: CALL_OW 341
// end ;
40408: END
// every 0 0$5 marked 14 do
40409: GO 40411
40411: DISABLE
// begin Wait ( 0 0$5 ) ;
40412: LD_INT 175
40414: PPUSH
40415: CALL_OW 67
// YouLost ( Motherlode2 ) ;
40419: LD_STRING Motherlode2
40421: PPUSH
40422: CALL_OW 104
// ExitGame ;
40426: CALL_OW 341
// end ;
40430: END
// every 0 0$5 marked 15 do
40431: GO 40433
40433: DISABLE
// begin Wait ( 0 0$7 ) ;
40434: LD_INT 245
40436: PPUSH
40437: CALL_OW 67
// YouLost ( Motherlode3 ) ;
40441: LD_STRING Motherlode3
40443: PPUSH
40444: CALL_OW 104
// ExitGame ;
40448: CALL_OW 341
// end ;
40452: END
// every 0 0$1 marked 23 do var medal1 , medal2 , medal3 ;
40453: GO 40455
40455: DISABLE
40456: LD_INT 0
40458: PPUSH
40459: PPUSH
40460: PPUSH
// begin medal1 := false ;
40461: LD_ADDR_VAR 0 1
40465: PUSH
40466: LD_INT 0
40468: ST_TO_ADDR
// medal2 := false ;
40469: LD_ADDR_VAR 0 2
40473: PUSH
40474: LD_INT 0
40476: ST_TO_ADDR
// medal3 := false ;
40477: LD_ADDR_VAR 0 3
40481: PUSH
40482: LD_INT 0
40484: ST_TO_ADDR
// DialogueON ;
40485: CALL_OW 6
// Say ( JMM , D20-JMM-1 ) ;
40489: LD_EXP 1
40493: PPUSH
40494: LD_STRING D20-JMM-1
40496: PPUSH
40497: CALL_OW 88
// if IsOk ( Joan ) and GetSide ( Joan ) = americans then
40501: LD_EXP 12
40505: PPUSH
40506: CALL_OW 302
40510: PUSH
40511: LD_EXP 12
40515: PPUSH
40516: CALL_OW 255
40520: PUSH
40521: LD_EXP 176
40525: EQUAL
40526: AND
40527: IFFALSE 40541
// Say ( Joan , D20-Joan-1 ) ;
40529: LD_EXP 12
40533: PPUSH
40534: LD_STRING D20-Joan-1
40536: PPUSH
40537: CALL_OW 88
// if IsOk ( Lisa ) and GetSide ( Lisa ) = americans then
40541: LD_EXP 5
40545: PPUSH
40546: CALL_OW 302
40550: PUSH
40551: LD_EXP 5
40555: PPUSH
40556: CALL_OW 255
40560: PUSH
40561: LD_EXP 176
40565: EQUAL
40566: AND
40567: IFFALSE 40581
// Say ( Lisa , D20-Lisa-1 ) ;
40569: LD_EXP 5
40573: PPUSH
40574: LD_STRING D20-Lisa-1
40576: PPUSH
40577: CALL_OW 88
// if IsOk ( Donaldson ) and GetSide ( Donaldson ) = americans then
40581: LD_EXP 8
40585: PPUSH
40586: CALL_OW 302
40590: PUSH
40591: LD_EXP 8
40595: PPUSH
40596: CALL_OW 255
40600: PUSH
40601: LD_EXP 176
40605: EQUAL
40606: AND
40607: IFFALSE 40621
// Say ( Donaldson , D20-Don-1 ) ;
40609: LD_EXP 8
40613: PPUSH
40614: LD_STRING D20-Don-1
40616: PPUSH
40617: CALL_OW 88
// if IsOk ( Cornell ) and GetSide ( Cornell ) = americans then
40621: LD_EXP 10
40625: PPUSH
40626: CALL_OW 302
40630: PUSH
40631: LD_EXP 10
40635: PPUSH
40636: CALL_OW 255
40640: PUSH
40641: LD_EXP 176
40645: EQUAL
40646: AND
40647: IFFALSE 40661
// Say ( Cornell , D20-Corn-1 ) ;
40649: LD_EXP 10
40653: PPUSH
40654: LD_STRING D20-Corn-1
40656: PPUSH
40657: CALL_OW 88
// if IsOk ( Denis ) and GetSide ( Denis ) = americans then
40661: LD_EXP 11
40665: PPUSH
40666: CALL_OW 302
40670: PUSH
40671: LD_EXP 11
40675: PPUSH
40676: CALL_OW 255
40680: PUSH
40681: LD_EXP 176
40685: EQUAL
40686: AND
40687: IFFALSE 40701
// Say ( Denis , D20-Den-1 ) ;
40689: LD_EXP 11
40693: PPUSH
40694: LD_STRING D20-Den-1
40696: PPUSH
40697: CALL_OW 88
// if IsOk ( Bobby ) and GetSide ( Bobby ) = americans then
40701: LD_EXP 3
40705: PPUSH
40706: CALL_OW 302
40710: PUSH
40711: LD_EXP 3
40715: PPUSH
40716: CALL_OW 255
40720: PUSH
40721: LD_EXP 176
40725: EQUAL
40726: AND
40727: IFFALSE 40741
// Say ( Bobby , D20-Bobby-1 ) ;
40729: LD_EXP 3
40733: PPUSH
40734: LD_STRING D20-Bobby-1
40736: PPUSH
40737: CALL_OW 88
// if IsOk ( Gladstone ) and GetSide ( Gladstone ) = americans then
40741: LD_EXP 9
40745: PPUSH
40746: CALL_OW 302
40750: PUSH
40751: LD_EXP 9
40755: PPUSH
40756: CALL_OW 255
40760: PUSH
40761: LD_EXP 176
40765: EQUAL
40766: AND
40767: IFFALSE 40781
// Say ( Gladstone , D20-Glad-1 ) ;
40769: LD_EXP 9
40773: PPUSH
40774: LD_STRING D20-Glad-1
40776: PPUSH
40777: CALL_OW 88
// if IsOk ( Cyrus ) and GetSide ( Cyrus ) = americans then
40781: LD_EXP 4
40785: PPUSH
40786: CALL_OW 302
40790: PUSH
40791: LD_EXP 4
40795: PPUSH
40796: CALL_OW 255
40800: PUSH
40801: LD_EXP 176
40805: EQUAL
40806: AND
40807: IFFALSE 40821
// Say ( Cyrus , D20-Cyrus-1 ) ;
40809: LD_EXP 4
40813: PPUSH
40814: LD_STRING D20-Cyrus-1
40816: PPUSH
40817: CALL_OW 88
// if IsOk ( Stevens ) and GetSide ( Stevens ) = americans then
40821: LD_EXP 17
40825: PPUSH
40826: CALL_OW 302
40830: PUSH
40831: LD_EXP 17
40835: PPUSH
40836: CALL_OW 255
40840: PUSH
40841: LD_EXP 176
40845: EQUAL
40846: AND
40847: IFFALSE 40861
// Say ( Stevens , D20-Huck-1 ) ;
40849: LD_EXP 17
40853: PPUSH
40854: LD_STRING D20-Huck-1
40856: PPUSH
40857: CALL_OW 88
// if IsOk ( Brown ) and GetSide ( Brown ) = americans then
40861: LD_EXP 7
40865: PPUSH
40866: CALL_OW 302
40870: PUSH
40871: LD_EXP 7
40875: PPUSH
40876: CALL_OW 255
40880: PUSH
40881: LD_EXP 176
40885: EQUAL
40886: AND
40887: IFFALSE 40901
// Say ( Brown , D20-Brown-1 ) ;
40889: LD_EXP 7
40893: PPUSH
40894: LD_STRING D20-Brown-1
40896: PPUSH
40897: CALL_OW 88
// if IsOk ( Gary ) and GetSide ( Gary ) = americans then
40901: LD_EXP 15
40905: PPUSH
40906: CALL_OW 302
40910: PUSH
40911: LD_EXP 15
40915: PPUSH
40916: CALL_OW 255
40920: PUSH
40921: LD_EXP 176
40925: EQUAL
40926: AND
40927: IFFALSE 40941
// Say ( Gary , D20-Gary-1 ) ;
40929: LD_EXP 15
40933: PPUSH
40934: LD_STRING D20-Gary-1
40936: PPUSH
40937: CALL_OW 88
// if IsOk ( Coonie ) and GetSide ( Coonie ) = americans then
40941: LD_EXP 18
40945: PPUSH
40946: CALL_OW 302
40950: PUSH
40951: LD_EXP 18
40955: PPUSH
40956: CALL_OW 255
40960: PUSH
40961: LD_EXP 176
40965: EQUAL
40966: AND
40967: IFFALSE 40981
// Say ( Coonie , D20-Con-1 ) ;
40969: LD_EXP 18
40973: PPUSH
40974: LD_STRING D20-Con-1
40976: PPUSH
40977: CALL_OW 88
// if IsOk ( Kurt ) and GetSide ( Kurt ) = americans then
40981: LD_EXP 13
40985: PPUSH
40986: CALL_OW 302
40990: PUSH
40991: LD_EXP 13
40995: PPUSH
40996: CALL_OW 255
41000: PUSH
41001: LD_EXP 176
41005: EQUAL
41006: AND
41007: IFFALSE 41021
// Say ( Kurt , D20-Kurt-1 ) ;
41009: LD_EXP 13
41013: PPUSH
41014: LD_STRING D20-Kurt-1
41016: PPUSH
41017: CALL_OW 88
// if IsOk ( Yamoko ) and GetSide ( Yamoko ) = americans then
41021: LD_EXP 14
41025: PPUSH
41026: CALL_OW 302
41030: PUSH
41031: LD_EXP 14
41035: PPUSH
41036: CALL_OW 255
41040: PUSH
41041: LD_EXP 176
41045: EQUAL
41046: AND
41047: IFFALSE 41061
// Say ( Yamoko , D20-Yam-1 ) ;
41049: LD_EXP 14
41053: PPUSH
41054: LD_STRING D20-Yam-1
41056: PPUSH
41057: CALL_OW 88
// if IsOk ( Frank ) and GetSide ( Frank ) = americans then
41061: LD_EXP 6
41065: PPUSH
41066: CALL_OW 302
41070: PUSH
41071: LD_EXP 6
41075: PPUSH
41076: CALL_OW 255
41080: PUSH
41081: LD_EXP 176
41085: EQUAL
41086: AND
41087: IFFALSE 41101
// Say ( Frank , D20-Frank-1 ) ;
41089: LD_EXP 6
41093: PPUSH
41094: LD_STRING D20-Frank-1
41096: PPUSH
41097: CALL_OW 88
// DialogueOFF ;
41101: CALL_OW 7
// if Roth_Captured then
41105: LD_EXP 54
41109: IFFALSE 41131
// begin medal1 := true ;
41111: LD_ADDR_VAR 0 1
41115: PUSH
41116: LD_INT 1
41118: ST_TO_ADDR
// AddMedal ( Roth , 1 ) ;
41119: LD_STRING Roth
41121: PPUSH
41122: LD_INT 1
41124: PPUSH
41125: CALL_OW 101
// end else
41129: GO 41166
// begin if IsOk ( Roth ) then
41131: LD_EXP 20
41135: PPUSH
41136: CALL_OW 302
41140: IFFALSE 41155
// AddMedal ( Roth , - 2 ) else
41142: LD_STRING Roth
41144: PPUSH
41145: LD_INT 2
41147: NEG
41148: PPUSH
41149: CALL_OW 101
41153: GO 41166
// AddMedal ( Roth , - 1 ) ;
41155: LD_STRING Roth
41157: PPUSH
41158: LD_INT 1
41160: NEG
41161: PPUSH
41162: CALL_OW 101
// end ; AddMedal ( Project , Russian_project_canceled ) ;
41166: LD_STRING Project
41168: PPUSH
41169: LD_EXP 55
41173: PPUSH
41174: CALL_OW 101
// if Russian_project_canceled then
41178: LD_EXP 55
41182: IFFALSE 41192
// medal2 := true ;
41184: LD_ADDR_VAR 0 2
41188: PUSH
41189: LD_INT 1
41191: ST_TO_ADDR
// AddMedal ( NoLosses , No_Looses ) ;
41192: LD_STRING NoLosses
41194: PPUSH
41195: LD_EXP 56
41199: PPUSH
41200: CALL_OW 101
// if No_Looses then
41204: LD_EXP 56
41208: IFFALSE 41218
// medal3 := true ;
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_INT 1
41217: ST_TO_ADDR
// SA_EndMission ( 1 , 15 , medal1 , medal2 , medal3 ) ;
41218: LD_INT 1
41220: PPUSH
41221: LD_INT 15
41223: PPUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: LD_VAR 0 2
41233: PPUSH
41234: LD_VAR 0 3
41238: PPUSH
41239: CALL 56329 0 5
// SA_OnMissionComplete ;
41243: CALL 56299 0 0
// GiveMedals ( MAIN ) ;
41247: LD_STRING MAIN
41249: PPUSH
41250: CALL_OW 102
// SaveCharacters ( JMM , JMM ) ;
41254: LD_EXP 1
41258: PPUSH
41259: LD_STRING JMM
41261: PPUSH
41262: CALL_OW 38
// if IsLive ( Cyrus ) then
41266: LD_EXP 4
41270: PPUSH
41271: CALL_OW 300
41275: IFFALSE 41289
// SaveCharacters ( Cyrus , Cyrus ) ;
41277: LD_EXP 4
41281: PPUSH
41282: LD_STRING Cyrus
41284: PPUSH
41285: CALL_OW 38
// if IsLive ( Bobby ) then
41289: LD_EXP 3
41293: PPUSH
41294: CALL_OW 300
41298: IFFALSE 41312
// SaveCharacters ( Bobby , Bobby ) ;
41300: LD_EXP 3
41304: PPUSH
41305: LD_STRING Bobby
41307: PPUSH
41308: CALL_OW 38
// if IsLive ( Lisa ) then
41312: LD_EXP 5
41316: PPUSH
41317: CALL_OW 300
41321: IFFALSE 41335
// SaveCharacters ( Lisa , Lisa ) ;
41323: LD_EXP 5
41327: PPUSH
41328: LD_STRING Lisa
41330: PPUSH
41331: CALL_OW 38
// if IsLive ( Frank ) then
41335: LD_EXP 6
41339: PPUSH
41340: CALL_OW 300
41344: IFFALSE 41358
// SaveCharacters ( Frank , Frank ) ;
41346: LD_EXP 6
41350: PPUSH
41351: LD_STRING Frank
41353: PPUSH
41354: CALL_OW 38
// if IsLive ( Donaldson ) then
41358: LD_EXP 8
41362: PPUSH
41363: CALL_OW 300
41367: IFFALSE 41381
// SaveCharacters ( Donaldson , Donaldson ) ;
41369: LD_EXP 8
41373: PPUSH
41374: LD_STRING Donaldson
41376: PPUSH
41377: CALL_OW 38
// if IsLive ( Brown ) then
41381: LD_EXP 7
41385: PPUSH
41386: CALL_OW 300
41390: IFFALSE 41404
// SaveCharacters ( Brown , Brown ) ;
41392: LD_EXP 7
41396: PPUSH
41397: LD_STRING Brown
41399: PPUSH
41400: CALL_OW 38
// if IsLive ( Denis ) then
41404: LD_EXP 11
41408: PPUSH
41409: CALL_OW 300
41413: IFFALSE 41427
// SaveCharacters ( Denis , Denis ) ;
41415: LD_EXP 11
41419: PPUSH
41420: LD_STRING Denis
41422: PPUSH
41423: CALL_OW 38
// if IsLive ( Gladstone ) then
41427: LD_EXP 9
41431: PPUSH
41432: CALL_OW 300
41436: IFFALSE 41450
// SaveCharacters ( Gladstone , Gladstone ) ;
41438: LD_EXP 9
41442: PPUSH
41443: LD_STRING Gladstone
41445: PPUSH
41446: CALL_OW 38
// if IsLive ( Yamoko ) then
41450: LD_EXP 14
41454: PPUSH
41455: CALL_OW 300
41459: IFFALSE 41473
// SaveCharacters ( Yamoko , Yamoko ) ;
41461: LD_EXP 14
41465: PPUSH
41466: LD_STRING Yamoko
41468: PPUSH
41469: CALL_OW 38
// if IsLive ( Cornell ) then
41473: LD_EXP 10
41477: PPUSH
41478: CALL_OW 300
41482: IFFALSE 41496
// SaveCharacters ( Cornell , Cornell ) ;
41484: LD_EXP 10
41488: PPUSH
41489: LD_STRING Cornell
41491: PPUSH
41492: CALL_OW 38
// if IsLive ( Joan ) then
41496: LD_EXP 12
41500: PPUSH
41501: CALL_OW 300
41505: IFFALSE 41519
// SaveCharacters ( Joan , Joan ) ;
41507: LD_EXP 12
41511: PPUSH
41512: LD_STRING Joan
41514: PPUSH
41515: CALL_OW 38
// if IsLive ( Kurt ) then
41519: LD_EXP 13
41523: PPUSH
41524: CALL_OW 300
41528: IFFALSE 41542
// SaveCharacters ( Kurt , Kurt ) ;
41530: LD_EXP 13
41534: PPUSH
41535: LD_STRING Kurt
41537: PPUSH
41538: CALL_OW 38
// if IsLive ( Gary ) then
41542: LD_EXP 15
41546: PPUSH
41547: CALL_OW 300
41551: IFFALSE 41565
// SaveCharacters ( Gary , Gary ) ;
41553: LD_EXP 15
41557: PPUSH
41558: LD_STRING Gary
41560: PPUSH
41561: CALL_OW 38
// if IsLive ( Stevens ) then
41565: LD_EXP 17
41569: PPUSH
41570: CALL_OW 300
41574: IFFALSE 41588
// SaveCharacters ( Stevens , Stevens ) ;
41576: LD_EXP 17
41580: PPUSH
41581: LD_STRING Stevens
41583: PPUSH
41584: CALL_OW 38
// if IsLive ( Coonie ) then
41588: LD_EXP 18
41592: PPUSH
41593: CALL_OW 300
41597: IFFALSE 41611
// SaveCharacters ( Coonie , Coonie ) ;
41599: LD_EXP 18
41603: PPUSH
41604: LD_STRING Coonie
41606: PPUSH
41607: CALL_OW 38
// if IsLive ( Baker ) then
41611: LD_EXP 23
41615: PPUSH
41616: CALL_OW 300
41620: IFFALSE 41634
// SaveCharacters ( Baker , Baker ) ;
41622: LD_EXP 23
41626: PPUSH
41627: LD_STRING Baker
41629: PPUSH
41630: CALL_OW 38
// if IsLive ( VanHouten ) then
41634: LD_EXP 24
41638: PPUSH
41639: CALL_OW 300
41643: IFFALSE 41657
// SaveCharacters ( VanHouten , VanHouten ) ;
41645: LD_EXP 24
41649: PPUSH
41650: LD_STRING VanHouten
41652: PPUSH
41653: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_alive ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) diff [ JMM , Cyrus , Bobby , Lisa , Frank , Donaldson , Brown , Denis , Gladstone , Yamoko , Cornell , Joan , Kurt , Gary , Stevens , Coonie , Baker , VanHouten ] , Am15Winners ) ;
41657: LD_INT 51
41659: PUSH
41660: EMPTY
41661: LIST
41662: PUSH
41663: LD_INT 22
41665: PUSH
41666: LD_EXP 176
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 21
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: PPUSH
41690: CALL_OW 69
41694: PUSH
41695: LD_EXP 1
41699: PUSH
41700: LD_EXP 4
41704: PUSH
41705: LD_EXP 3
41709: PUSH
41710: LD_EXP 5
41714: PUSH
41715: LD_EXP 6
41719: PUSH
41720: LD_EXP 8
41724: PUSH
41725: LD_EXP 7
41729: PUSH
41730: LD_EXP 11
41734: PUSH
41735: LD_EXP 9
41739: PUSH
41740: LD_EXP 14
41744: PUSH
41745: LD_EXP 10
41749: PUSH
41750: LD_EXP 12
41754: PUSH
41755: LD_EXP 13
41759: PUSH
41760: LD_EXP 15
41764: PUSH
41765: LD_EXP 17
41769: PUSH
41770: LD_EXP 18
41774: PUSH
41775: LD_EXP 23
41779: PUSH
41780: LD_EXP 24
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: DIFF
41805: PPUSH
41806: LD_STRING Am15Winners
41808: PPUSH
41809: CALL_OW 38
// YouWin ;
41813: CALL_OW 103
// ExitGame ;
41817: CALL_OW 341
// end ; end_of_file
41821: PPOPN 3
41823: END
// export function StartRussianBase ; var i , Bunkers , Turrets , units_to_protect , Teleport1 , Teleport2 , R_Eng ; begin
41824: LD_INT 0
41826: PPUSH
41827: PPUSH
41828: PPUSH
41829: PPUSH
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
// Teleport1 = GetUnitNumber ( 165 , 60 ) ;
41834: LD_ADDR_VAR 0 6
41838: PUSH
41839: LD_INT 165
41841: PPUSH
41842: LD_INT 60
41844: PPUSH
41845: CALL_OW 438
41849: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
41850: LD_ADDR_VAR 0 7
41854: PUSH
41855: LD_INT 182
41857: PPUSH
41858: LD_INT 87
41860: PPUSH
41861: CALL_OW 438
41865: ST_TO_ADDR
// TeleportExit ( Teleport1 , 90 , 71 ) ;
41866: LD_VAR 0 6
41870: PPUSH
41871: LD_INT 90
41873: PPUSH
41874: LD_INT 71
41876: PPUSH
41877: CALL_OW 243
// TeleportExit ( Teleport2 , 147 , 109 ) ;
41881: LD_VAR 0 7
41885: PPUSH
41886: LD_INT 147
41888: PPUSH
41889: LD_INT 109
41891: PPUSH
41892: CALL_OW 243
// for i = 3 to 4 do
41896: LD_ADDR_VAR 0 2
41900: PUSH
41901: DOUBLE
41902: LD_INT 3
41904: DEC
41905: ST_TO_ADDR
41906: LD_INT 4
41908: PUSH
41909: FOR_TO
41910: IFFALSE 41932
// ComEnterUnit ( Russian_scientists [ i ] , RusLab1 ) ;
41912: LD_EXP 108
41916: PUSH
41917: LD_VAR 0 2
41921: ARRAY
41922: PPUSH
41923: LD_INT 2
41925: PPUSH
41926: CALL_OW 120
41930: GO 41909
41932: POP
41933: POP
// for i = 5 to 6 do
41934: LD_ADDR_VAR 0 2
41938: PUSH
41939: DOUBLE
41940: LD_INT 5
41942: DEC
41943: ST_TO_ADDR
41944: LD_INT 6
41946: PUSH
41947: FOR_TO
41948: IFFALSE 41970
// ComEnterUnit ( Russian_scientists [ i ] , RusLab2 ) ;
41950: LD_EXP 108
41954: PUSH
41955: LD_VAR 0 2
41959: ARRAY
41960: PPUSH
41961: LD_INT 1
41963: PPUSH
41964: CALL_OW 120
41968: GO 41947
41970: POP
41971: POP
// for i = 3 to Number_of_Russian_Engineers do
41972: LD_ADDR_VAR 0 2
41976: PUSH
41977: DOUBLE
41978: LD_INT 3
41980: DEC
41981: ST_TO_ADDR
41982: LD_EXP 136
41986: PUSH
41987: FOR_TO
41988: IFFALSE 42028
// begin ComEnterUnit ( Russian_engineers [ i ] , RusLab2 ) ;
41990: LD_EXP 109
41994: PUSH
41995: LD_VAR 0 2
41999: ARRAY
42000: PPUSH
42001: LD_INT 1
42003: PPUSH
42004: CALL_OW 120
// AddComChangeProfession ( Russian_engineers [ i ] , class_scientistic ) ;
42008: LD_EXP 109
42012: PUSH
42013: LD_VAR 0 2
42017: ARRAY
42018: PPUSH
42019: LD_INT 4
42021: PPUSH
42022: CALL_OW 183
// end ;
42026: GO 41987
42028: POP
42029: POP
// ComResearch ( RusLab1 , tech_Comp1 ) ;
42030: LD_INT 2
42032: PPUSH
42033: LD_INT 57
42035: PPUSH
42036: CALL_OW 124
// ComResearch ( RusLab1 , tech_Comp2 ) ;
42040: LD_INT 2
42042: PPUSH
42043: LD_INT 58
42045: PPUSH
42046: CALL_OW 124
// AddComResearch ( RusLab1 , tech_Comp3 ) ;
42050: LD_INT 2
42052: PPUSH
42053: LD_INT 59
42055: PPUSH
42056: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST1 ) ;
42060: LD_INT 2
42062: PPUSH
42063: LD_INT 63
42065: PPUSH
42066: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST2 ) ;
42070: LD_INT 2
42072: PPUSH
42073: LD_INT 64
42075: PPUSH
42076: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST3 ) ;
42080: LD_INT 2
42082: PPUSH
42083: LD_INT 65
42085: PPUSH
42086: CALL_OW 184
// ComResearch ( RusLab2 , tech_Weap1 ) ;
42090: LD_INT 1
42092: PPUSH
42093: LD_INT 51
42095: PPUSH
42096: CALL_OW 124
// AddComResearch ( RusLab2 , tech_Weap2 ) ;
42100: LD_INT 1
42102: PPUSH
42103: LD_INT 52
42105: PPUSH
42106: CALL_OW 184
// AddComResearch ( RusLab2 , tech_SibFiss ) ;
42110: LD_INT 1
42112: PPUSH
42113: LD_INT 25
42115: PPUSH
42116: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Weap3 ) ;
42120: LD_INT 1
42122: PPUSH
42123: LD_INT 53
42125: PPUSH
42126: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib1 ) ;
42130: LD_INT 1
42132: PPUSH
42133: LD_INT 54
42135: PPUSH
42136: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib2 ) ;
42140: LD_INT 1
42142: PPUSH
42143: LD_INT 55
42145: PPUSH
42146: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib3 ) ;
42150: LD_INT 1
42152: PPUSH
42153: LD_INT 56
42155: PPUSH
42156: CALL_OW 184
// for i = 1 to 3 do
42160: LD_ADDR_VAR 0 2
42164: PUSH
42165: DOUBLE
42166: LD_INT 1
42168: DEC
42169: ST_TO_ADDR
42170: LD_INT 3
42172: PUSH
42173: FOR_TO
42174: IFFALSE 42204
// ComEnterUnit ( Russian_mechanics [ i ] , GetUnitNumber ( 195 , 84 ) ) ;
42176: LD_EXP 110
42180: PUSH
42181: LD_VAR 0 2
42185: ARRAY
42186: PPUSH
42187: LD_INT 195
42189: PPUSH
42190: LD_INT 84
42192: PPUSH
42193: CALL_OW 438
42197: PPUSH
42198: CALL_OW 120
42202: GO 42173
42204: POP
42205: POP
// for i = 4 to 6 do
42206: LD_ADDR_VAR 0 2
42210: PUSH
42211: DOUBLE
42212: LD_INT 4
42214: DEC
42215: ST_TO_ADDR
42216: LD_INT 6
42218: PUSH
42219: FOR_TO
42220: IFFALSE 42250
// ComEnterUnit ( Russian_mechanics [ i ] , GetUnitNumber ( 170 , 35 ) ) ;
42222: LD_EXP 110
42226: PUSH
42227: LD_VAR 0 2
42231: ARRAY
42232: PPUSH
42233: LD_INT 170
42235: PPUSH
42236: LD_INT 35
42238: PPUSH
42239: CALL_OW 438
42243: PPUSH
42244: CALL_OW 120
42248: GO 42219
42250: POP
42251: POP
// Bunkers = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
42252: LD_ADDR_VAR 0 3
42256: PUSH
42257: LD_INT 22
42259: PUSH
42260: LD_EXP 178
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 21
42271: PUSH
42272: LD_INT 3
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 30
42281: PUSH
42282: LD_INT 32
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: PPUSH
42294: CALL_OW 69
42298: ST_TO_ADDR
// if Bunkers <= Russian_soldiers then
42299: LD_VAR 0 3
42303: PUSH
42304: LD_EXP 107
42308: LESSEQUAL
42309: IFFALSE 42407
// begin for i = 1 to Bunkers do
42311: LD_ADDR_VAR 0 2
42315: PUSH
42316: DOUBLE
42317: LD_INT 1
42319: DEC
42320: ST_TO_ADDR
42321: LD_VAR 0 3
42325: PUSH
42326: FOR_TO
42327: IFFALSE 42357
// ComEnterUnit ( Russian_soldiers [ i ] , Bunkers [ i ] ) ;
42329: LD_EXP 107
42333: PUSH
42334: LD_VAR 0 2
42338: ARRAY
42339: PPUSH
42340: LD_VAR 0 3
42344: PUSH
42345: LD_VAR 0 2
42349: ARRAY
42350: PPUSH
42351: CALL_OW 120
42355: GO 42326
42357: POP
42358: POP
// for i = Bunkers + 1 to Russian_soldiers do
42359: LD_ADDR_VAR 0 2
42363: PUSH
42364: DOUBLE
42365: LD_VAR 0 3
42369: PUSH
42370: LD_INT 1
42372: PLUS
42373: DEC
42374: ST_TO_ADDR
42375: LD_EXP 107
42379: PUSH
42380: FOR_TO
42381: IFFALSE 42403
// ComEnterUnit ( Russian_soldiers [ i ] , RusBarr1 ) ;
42383: LD_EXP 107
42387: PUSH
42388: LD_VAR 0 2
42392: ARRAY
42393: PPUSH
42394: LD_INT 27
42396: PPUSH
42397: CALL_OW 120
42401: GO 42380
42403: POP
42404: POP
// end else
42405: GO 42455
// begin for i = 1 to Russian_soldiers do
42407: LD_ADDR_VAR 0 2
42411: PUSH
42412: DOUBLE
42413: LD_INT 1
42415: DEC
42416: ST_TO_ADDR
42417: LD_EXP 107
42421: PUSH
42422: FOR_TO
42423: IFFALSE 42453
// ComEnterUnit ( Russian_soldiers [ i ] , Bunkers [ i ] ) ;
42425: LD_EXP 107
42429: PUSH
42430: LD_VAR 0 2
42434: ARRAY
42435: PPUSH
42436: LD_VAR 0 3
42440: PUSH
42441: LD_VAR 0 2
42445: ARRAY
42446: PPUSH
42447: CALL_OW 120
42451: GO 42422
42453: POP
42454: POP
// end ; Turrets = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_building ] , [ f_btype , b_turret ] ] ) ;
42455: LD_ADDR_VAR 0 4
42459: PUSH
42460: LD_INT 22
42462: PUSH
42463: LD_EXP 178
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 21
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 30
42484: PUSH
42485: LD_INT 33
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: PPUSH
42497: CALL_OW 69
42501: ST_TO_ADDR
// units_to_protect = Bunkers ^ Turrets ^ RusBarr1 ^ RusBarr2 ;
42502: LD_ADDR_VAR 0 5
42506: PUSH
42507: LD_VAR 0 3
42511: PUSH
42512: LD_VAR 0 4
42516: ADD
42517: PUSH
42518: LD_INT 27
42520: ADD
42521: PUSH
42522: LD_INT 3
42524: ADD
42525: ST_TO_ADDR
// Russian_reg_def_id = McRegistry ( russians , [ [ mc_reg_area_to_guard , Rus_Base ] , [ mc_reg_area_to_protect , Rus_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
42526: LD_ADDR_EXP 244
42530: PUSH
42531: LD_EXP 178
42535: PPUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 5
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 5
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 4
42558: PUSH
42559: LD_VAR 0 5
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 8
42570: NEG
42571: PUSH
42572: LD_INT 7
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: PPUSH
42583: CALL_OW 399
42587: ST_TO_ADDR
// Russian_def_id = McDefend ( 100 , Russian_reg_def_id , Russian_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Rus_Base ] , [ mc_retreat_area_people , Rus_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
42588: LD_ADDR_EXP 245
42592: PUSH
42593: LD_INT 100
42595: PPUSH
42596: LD_EXP 244
42600: PPUSH
42601: LD_EXP 107
42605: PUSH
42606: LD_VAR 0 5
42610: ADD
42611: PPUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 5
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 7
42624: PUSH
42625: LD_INT 27
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 5
42634: PUSH
42635: LD_INT 550
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PPUSH
42647: CALL_OW 401
42651: ST_TO_ADDR
// R_Eng = [ ] ;
42652: LD_ADDR_VAR 0 8
42656: PUSH
42657: EMPTY
42658: ST_TO_ADDR
// for i = 3 to Russian_Engineers do
42659: LD_ADDR_VAR 0 2
42663: PUSH
42664: DOUBLE
42665: LD_INT 3
42667: DEC
42668: ST_TO_ADDR
42669: LD_EXP 109
42673: PUSH
42674: FOR_TO
42675: IFFALSE 42701
// R_Eng = R_Eng ^ Russian_Engineers [ i ] ;
42677: LD_ADDR_VAR 0 8
42681: PUSH
42682: LD_VAR 0 8
42686: PUSH
42687: LD_EXP 109
42691: PUSH
42692: LD_VAR 0 2
42696: ARRAY
42697: ADD
42698: ST_TO_ADDR
42699: GO 42674
42701: POP
42702: POP
// McBase ( Russian_build_id , R_Eng , Russian_Buildings , [ ] , [ ] , [ mc_base_cont ] ) ;
42703: LD_EXP 246
42707: PPUSH
42708: LD_VAR 0 8
42712: PPUSH
42713: LD_EXP 113
42717: PPUSH
42718: EMPTY
42719: PPUSH
42720: EMPTY
42721: PPUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: PPUSH
42728: CALL_OW 397
// end ;
42732: LD_VAR 0 1
42736: RET
// export function ChangeScientists ( Uns ) ; var Un , hex , InBarr1 , InBarr2 , eng , i ; begin
42737: LD_INT 0
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
// eng = Uns isect Russian_engineers ;
42746: LD_ADDR_VAR 0 7
42750: PUSH
42751: LD_VAR 0 1
42755: PUSH
42756: LD_EXP 109
42760: ISECT
42761: ST_TO_ADDR
// Uns = Uns diff ( Uns isect Russian_engineers ) ;
42762: LD_ADDR_VAR 0 1
42766: PUSH
42767: LD_VAR 0 1
42771: PUSH
42772: LD_VAR 0 1
42776: PUSH
42777: LD_EXP 109
42781: ISECT
42782: DIFF
42783: ST_TO_ADDR
// AddMcUnits ( Russian_build_id , eng ) ;
42784: LD_EXP 246
42788: PPUSH
42789: LD_VAR 0 7
42793: PPUSH
42794: CALL_OW 390
// for i = 1 to 2 do
42798: LD_ADDR_VAR 0 8
42802: PUSH
42803: DOUBLE
42804: LD_INT 1
42806: DEC
42807: ST_TO_ADDR
42808: LD_INT 2
42810: PUSH
42811: FOR_TO
42812: IFFALSE 42866
// if Uns <> 0 then
42814: LD_VAR 0 1
42818: PUSH
42819: LD_INT 0
42821: NONEQUAL
42822: IFFALSE 42864
// begin Rus_Doctors = Rus_Doctors ^ Russian_engineers [ 1 ] ;
42824: LD_ADDR_EXP 112
42828: PUSH
42829: LD_EXP 112
42833: PUSH
42834: LD_EXP 109
42838: PUSH
42839: LD_INT 1
42841: ARRAY
42842: ADD
42843: ST_TO_ADDR
// Uns = Uns diff Russian_engineers [ 1 ] ;
42844: LD_ADDR_VAR 0 1
42848: PUSH
42849: LD_VAR 0 1
42853: PUSH
42854: LD_EXP 109
42858: PUSH
42859: LD_INT 1
42861: ARRAY
42862: DIFF
42863: ST_TO_ADDR
// end ;
42864: GO 42811
42866: POP
42867: POP
// for Un in Rus_Doctors do
42868: LD_ADDR_VAR 0 3
42872: PUSH
42873: LD_EXP 112
42877: PUSH
42878: FOR_IN
42879: IFFALSE 42935
// begin hex = RandHexArea ( Rus_Heal , true ) ;
42881: LD_ADDR_VAR 0 4
42885: PUSH
42886: LD_INT 27
42888: PPUSH
42889: LD_INT 1
42891: PPUSH
42892: CALL_OW 16
42896: ST_TO_ADDR
// SetRememberedX ( Un , hex [ 1 ] ) ;
42897: LD_VAR 0 3
42901: PPUSH
42902: LD_VAR 0 4
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: PPUSH
42911: CALL_OW 231
// SetRememberedY ( Un , hex [ 2 ] ) ;
42915: LD_VAR 0 3
42919: PPUSH
42920: LD_VAR 0 4
42924: PUSH
42925: LD_INT 2
42927: ARRAY
42928: PPUSH
42929: CALL_OW 232
// end ;
42933: GO 42878
42935: POP
42936: POP
// ComReturn ( Rus_Doctors ) ;
42937: LD_EXP 112
42941: PPUSH
42942: CALL_OW 144
// InBarr1 = UnitsInside ( RusBarr1 ) ;
42946: LD_ADDR_VAR 0 5
42950: PUSH
42951: LD_INT 27
42953: PPUSH
42954: CALL_OW 313
42958: ST_TO_ADDR
// InBarr2 = UnitsInside ( RusBarr2 ) ;
42959: LD_ADDR_VAR 0 6
42963: PUSH
42964: LD_INT 3
42966: PPUSH
42967: CALL_OW 313
42971: ST_TO_ADDR
// for Un in Uns do
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_VAR 0 1
42981: PUSH
42982: FOR_IN
42983: IFFALSE 43153
// begin if InBarr1 < 6 then
42985: LD_VAR 0 5
42989: PUSH
42990: LD_INT 6
42992: LESS
42993: IFFALSE 43053
// begin InBarr1 = InBarr1 + 1 ;
42995: LD_ADDR_VAR 0 5
42999: PUSH
43000: LD_VAR 0 5
43004: PUSH
43005: LD_INT 1
43007: PLUS
43008: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ Un ;
43009: LD_ADDR_EXP 107
43013: PUSH
43014: LD_EXP 107
43018: PUSH
43019: LD_VAR 0 3
43023: ADD
43024: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
43025: LD_EXP 245
43029: PPUSH
43030: LD_VAR 0 3
43034: PPUSH
43035: CALL_OW 390
// ComEnterUnit ( Un , RusBarr1 ) ;
43039: LD_VAR 0 3
43043: PPUSH
43044: LD_INT 27
43046: PPUSH
43047: CALL_OW 120
// end else
43051: GO 43151
// if InBarr2 < 6 then
43053: LD_VAR 0 6
43057: PUSH
43058: LD_INT 6
43060: LESS
43061: IFFALSE 43121
// begin InBarr2 = InBarr2 + 1 ;
43063: LD_ADDR_VAR 0 6
43067: PUSH
43068: LD_VAR 0 6
43072: PUSH
43073: LD_INT 1
43075: PLUS
43076: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ Un ;
43077: LD_ADDR_EXP 107
43081: PUSH
43082: LD_EXP 107
43086: PUSH
43087: LD_VAR 0 3
43091: ADD
43092: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
43093: LD_EXP 245
43097: PPUSH
43098: LD_VAR 0 3
43102: PPUSH
43103: CALL_OW 390
// ComEnterUnit ( Un , RusBarr2 ) ;
43107: LD_VAR 0 3
43111: PPUSH
43112: LD_INT 3
43114: PPUSH
43115: CALL_OW 120
// end else
43119: GO 43151
// begin Russian_soldiers = Russian_soldiers ^ Un ;
43121: LD_ADDR_EXP 107
43125: PUSH
43126: LD_EXP 107
43130: PUSH
43131: LD_VAR 0 3
43135: ADD
43136: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
43137: LD_EXP 245
43141: PPUSH
43142: LD_VAR 0 3
43146: PPUSH
43147: CALL_OW 390
// end ; end ;
43151: GO 42982
43153: POP
43154: POP
// end ;
43155: LD_VAR 0 2
43159: RET
// every 0 0$5 do var Un ;
43160: GO 43162
43162: DISABLE
43163: LD_INT 0
43165: PPUSH
// begin for Un in Rus_Doctors do
43166: LD_ADDR_VAR 0 1
43170: PUSH
43171: LD_EXP 112
43175: PUSH
43176: FOR_IN
43177: IFFALSE 43267
// begin if not ( HasTask ( Un ) ) then
43179: LD_VAR 0 1
43183: PPUSH
43184: CALL_OW 314
43188: NOT
43189: IFFALSE 43265
// if ( GetClass ( Un ) <> class_scientistic ) then
43191: LD_VAR 0 1
43195: PPUSH
43196: CALL_OW 257
43200: PUSH
43201: LD_INT 4
43203: NONEQUAL
43204: IFFALSE 43241
// begin ComEnterUnit ( Un , RusLab2 ) ;
43206: LD_VAR 0 1
43210: PPUSH
43211: LD_INT 1
43213: PPUSH
43214: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
43218: LD_VAR 0 1
43222: PPUSH
43223: LD_INT 4
43225: PPUSH
43226: CALL_OW 183
// AddComReturn ( Un ) ;
43230: LD_VAR 0 1
43234: PPUSH
43235: CALL_OW 204
// end else
43239: GO 43265
// if not ( IsInArea ( Un , Rus_Heal ) ) then
43241: LD_VAR 0 1
43245: PPUSH
43246: LD_INT 27
43248: PPUSH
43249: CALL_OW 308
43253: NOT
43254: IFFALSE 43265
// ComReturn ( Un ) ;
43256: LD_VAR 0 1
43260: PPUSH
43261: CALL_OW 144
// end ;
43265: GO 43176
43267: POP
43268: POP
// end ;
43269: PPOPN 1
43271: END
// function GetRandomVehicle ( time ) ; var Rand_Veh , Selected , Credits , Probab , engine ; begin
43272: LD_INT 0
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
// Selected = false ;
43280: LD_ADDR_VAR 0 4
43284: PUSH
43285: LD_INT 0
43287: ST_TO_ADDR
// engine = engine_siberite ;
43288: LD_ADDR_VAR 0 7
43292: PUSH
43293: LD_INT 3
43295: ST_TO_ADDR
// repeat Probab = Rand ( 1 , 100 ) ;
43296: LD_ADDR_VAR 0 6
43300: PUSH
43301: LD_INT 1
43303: PPUSH
43304: LD_INT 100
43306: PPUSH
43307: CALL_OW 12
43311: ST_TO_ADDR
// case time of 1 :
43312: LD_VAR 0 1
43316: PUSH
43317: LD_INT 1
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43371
43325: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 , 5 , 6 ] [ Rand ( 1 , 6 ) ] ; 2 :
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: LD_INT 4
43342: PUSH
43343: LD_INT 5
43345: PUSH
43346: LD_INT 6
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PPUSH
43360: LD_INT 6
43362: PPUSH
43363: CALL_OW 12
43367: ARRAY
43368: ST_TO_ADDR
43369: GO 43488
43371: LD_INT 2
43373: DOUBLE
43374: EQUAL
43375: IFTRUE 43379
43377: GO 43425
43379: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 , 8 ] [ Rand ( 1 , 6 ) ] ; 3 :
43380: LD_ADDR_VAR 0 3
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 4
43390: PUSH
43391: LD_INT 5
43393: PUSH
43394: LD_INT 6
43396: PUSH
43397: LD_INT 7
43399: PUSH
43400: LD_INT 8
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PPUSH
43414: LD_INT 6
43416: PPUSH
43417: CALL_OW 12
43421: ARRAY
43422: ST_TO_ADDR
43423: GO 43488
43425: LD_INT 3
43427: DOUBLE
43428: EQUAL
43429: IFTRUE 43433
43431: GO 43487
43433: POP
// Rand_Veh = [ 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] [ Rand ( 1 , 8 ) ] ; end ;
43434: LD_ADDR_VAR 0 3
43438: PUSH
43439: LD_INT 5
43441: PUSH
43442: LD_INT 6
43444: PUSH
43445: LD_INT 7
43447: PUSH
43448: LD_INT 8
43450: PUSH
43451: LD_INT 9
43453: PUSH
43454: LD_INT 10
43456: PUSH
43457: LD_INT 11
43459: PUSH
43460: LD_INT 12
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PPUSH
43476: LD_INT 8
43478: PPUSH
43479: CALL_OW 12
43483: ARRAY
43484: ST_TO_ADDR
43485: GO 43488
43487: POP
// case Rand_Veh of 1 :
43488: LD_VAR 0 3
43492: PUSH
43493: LD_INT 1
43495: DOUBLE
43496: EQUAL
43497: IFTRUE 43501
43499: GO 43594
43501: POP
// begin if ( time <= 1 and Probab < 60 ) or ( time <= 3 and Probab < 20 ) then
43502: LD_VAR 0 1
43506: PUSH
43507: LD_INT 1
43509: LESSEQUAL
43510: PUSH
43511: LD_VAR 0 6
43515: PUSH
43516: LD_INT 60
43518: LESS
43519: AND
43520: PUSH
43521: LD_VAR 0 1
43525: PUSH
43526: LD_INT 3
43528: LESSEQUAL
43529: PUSH
43530: LD_VAR 0 6
43534: PUSH
43535: LD_INT 20
43537: LESS
43538: AND
43539: OR
43540: IFFALSE 43592
// begin Selected = true ;
43542: LD_ADDR_VAR 0 4
43546: PUSH
43547: LD_INT 1
43549: ST_TO_ADDR
// Credits = 3 ;
43550: LD_ADDR_VAR 0 5
43554: PUSH
43555: LD_INT 3
43557: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_heavy_machine_gun ] ] ;
43558: LD_ADDR_EXP 121
43562: PUSH
43563: LD_EXP 121
43567: PUSH
43568: LD_INT 22
43570: PUSH
43571: LD_VAR 0 7
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: LD_INT 42
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: ADD
43591: ST_TO_ADDR
// end ; end ; 2 :
43592: GO 44411
43594: LD_INT 2
43596: DOUBLE
43597: EQUAL
43598: IFTRUE 43602
43600: GO 43695
43602: POP
// begin if ( time <= 1 and Probab < 80 ) or ( time <= 3 and Probab < 30 ) then
43603: LD_VAR 0 1
43607: PUSH
43608: LD_INT 1
43610: LESSEQUAL
43611: PUSH
43612: LD_VAR 0 6
43616: PUSH
43617: LD_INT 80
43619: LESS
43620: AND
43621: PUSH
43622: LD_VAR 0 1
43626: PUSH
43627: LD_INT 3
43629: LESSEQUAL
43630: PUSH
43631: LD_VAR 0 6
43635: PUSH
43636: LD_INT 30
43638: LESS
43639: AND
43640: OR
43641: IFFALSE 43693
// begin Selected = true ;
43643: LD_ADDR_VAR 0 4
43647: PUSH
43648: LD_INT 1
43650: ST_TO_ADDR
// Credits = 4 ;
43651: LD_ADDR_VAR 0 5
43655: PUSH
43656: LD_INT 4
43658: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_heavy_machine_gun ] ] ;
43659: LD_ADDR_EXP 121
43663: PUSH
43664: LD_EXP 121
43668: PUSH
43669: LD_INT 24
43671: PUSH
43672: LD_VAR 0 7
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 42
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: PUSH
43689: EMPTY
43690: LIST
43691: ADD
43692: ST_TO_ADDR
// end ; end ; 4 :
43693: GO 44411
43695: LD_INT 4
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43703
43701: GO 43816
43703: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 80 ) or ( time > 3 and Probab < 50 ) then
43704: LD_VAR 0 1
43708: PUSH
43709: LD_INT 1
43711: LESSEQUAL
43712: PUSH
43713: LD_VAR 0 6
43717: PUSH
43718: LD_INT 100
43720: LESS
43721: AND
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: LD_INT 3
43730: LESSEQUAL
43731: PUSH
43732: LD_VAR 0 6
43736: PUSH
43737: LD_INT 80
43739: LESS
43740: AND
43741: OR
43742: PUSH
43743: LD_VAR 0 1
43747: PUSH
43748: LD_INT 3
43750: GREATER
43751: PUSH
43752: LD_VAR 0 6
43756: PUSH
43757: LD_INT 50
43759: LESS
43760: AND
43761: OR
43762: IFFALSE 43814
// begin Selected = true ;
43764: LD_ADDR_VAR 0 4
43768: PUSH
43769: LD_INT 1
43771: ST_TO_ADDR
// Credits = 5 ;
43772: LD_ADDR_VAR 0 5
43776: PUSH
43777: LD_INT 5
43779: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_gatling_gun ] ] ;
43780: LD_ADDR_EXP 121
43784: PUSH
43785: LD_EXP 121
43789: PUSH
43790: LD_INT 22
43792: PUSH
43793: LD_VAR 0 7
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: LD_INT 43
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: PUSH
43810: EMPTY
43811: LIST
43812: ADD
43813: ST_TO_ADDR
// end ; end ; 3 :
43814: GO 44411
43816: LD_INT 3
43818: DOUBLE
43819: EQUAL
43820: IFTRUE 43824
43822: GO 43917
43824: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 40 ) then
43825: LD_VAR 0 1
43829: PUSH
43830: LD_INT 1
43832: LESSEQUAL
43833: PUSH
43834: LD_VAR 0 6
43838: PUSH
43839: LD_INT 100
43841: LESS
43842: AND
43843: PUSH
43844: LD_VAR 0 1
43848: PUSH
43849: LD_INT 3
43851: LESSEQUAL
43852: PUSH
43853: LD_VAR 0 6
43857: PUSH
43858: LD_INT 40
43860: LESS
43861: AND
43862: OR
43863: IFFALSE 43915
// begin Selected = true ;
43865: LD_ADDR_VAR 0 4
43869: PUSH
43870: LD_INT 1
43872: ST_TO_ADDR
// Credits = 5 ;
43873: LD_ADDR_VAR 0 5
43877: PUSH
43878: LD_INT 5
43880: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_gun ] ] ;
43881: LD_ADDR_EXP 121
43885: PUSH
43886: LD_EXP 121
43890: PUSH
43891: LD_INT 22
43893: PUSH
43894: LD_VAR 0 7
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: LD_INT 44
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: PUSH
43911: EMPTY
43912: LIST
43913: ADD
43914: ST_TO_ADDR
// end ; end ; 5 :
43915: GO 44411
43917: LD_INT 5
43919: DOUBLE
43920: EQUAL
43921: IFTRUE 43925
43923: GO 43978
43925: POP
// begin Selected = true ;
43926: LD_ADDR_VAR 0 4
43930: PUSH
43931: LD_INT 1
43933: ST_TO_ADDR
// Credits = 7 ;
43934: LD_ADDR_VAR 0 5
43938: PUSH
43939: LD_INT 7
43941: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_gatling_gun ] ] ;
43942: LD_ADDR_EXP 121
43946: PUSH
43947: LD_EXP 121
43951: PUSH
43952: LD_INT 24
43954: PUSH
43955: LD_VAR 0 7
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: LD_INT 43
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: ADD
43975: ST_TO_ADDR
// end ; 6 :
43976: GO 44411
43978: LD_INT 6
43980: DOUBLE
43981: EQUAL
43982: IFTRUE 43986
43984: GO 44099
43986: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 60 ) or ( time > 3 and Probab < 20 ) then
43987: LD_VAR 0 1
43991: PUSH
43992: LD_INT 1
43994: LESSEQUAL
43995: PUSH
43996: LD_VAR 0 6
44000: PUSH
44001: LD_INT 100
44003: LESS
44004: AND
44005: PUSH
44006: LD_VAR 0 1
44010: PUSH
44011: LD_INT 3
44013: LESSEQUAL
44014: PUSH
44015: LD_VAR 0 6
44019: PUSH
44020: LD_INT 60
44022: LESS
44023: AND
44024: OR
44025: PUSH
44026: LD_VAR 0 1
44030: PUSH
44031: LD_INT 3
44033: GREATER
44034: PUSH
44035: LD_VAR 0 6
44039: PUSH
44040: LD_INT 20
44042: LESS
44043: AND
44044: OR
44045: IFFALSE 44097
// begin Selected = true ;
44047: LD_ADDR_VAR 0 4
44051: PUSH
44052: LD_INT 1
44054: ST_TO_ADDR
// Credits = 7 ;
44055: LD_ADDR_VAR 0 5
44059: PUSH
44060: LD_INT 7
44062: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_gun ] ] ;
44063: LD_ADDR_EXP 121
44067: PUSH
44068: LD_EXP 121
44072: PUSH
44073: LD_INT 24
44075: PUSH
44076: LD_VAR 0 7
44080: PUSH
44081: LD_INT 3
44083: PUSH
44084: LD_INT 44
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: ADD
44096: ST_TO_ADDR
// end ; end ; 7 :
44097: GO 44411
44099: LD_INT 7
44101: DOUBLE
44102: EQUAL
44103: IFTRUE 44107
44105: GO 44160
44107: POP
// begin Selected = true ;
44108: LD_ADDR_VAR 0 4
44112: PUSH
44113: LD_INT 1
44115: ST_TO_ADDR
// Credits = 9 ;
44116: LD_ADDR_VAR 0 5
44120: PUSH
44121: LD_INT 9
44123: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_rocket_launcher ] ] ;
44124: LD_ADDR_EXP 121
44128: PUSH
44129: LD_EXP 121
44133: PUSH
44134: LD_INT 22
44136: PUSH
44137: LD_VAR 0 7
44141: PUSH
44142: LD_INT 3
44144: PUSH
44145: LD_INT 45
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: PUSH
44154: EMPTY
44155: LIST
44156: ADD
44157: ST_TO_ADDR
// end ; 8 :
44158: GO 44411
44160: LD_INT 8
44162: DOUBLE
44163: EQUAL
44164: IFTRUE 44168
44166: GO 44221
44168: POP
// begin Selected = true ;
44169: LD_ADDR_VAR 0 4
44173: PUSH
44174: LD_INT 1
44176: ST_TO_ADDR
// Credits = 11 ;
44177: LD_ADDR_VAR 0 5
44181: PUSH
44182: LD_INT 11
44184: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_rocket_launcher ] ] ;
44185: LD_ADDR_EXP 121
44189: PUSH
44190: LD_EXP 121
44194: PUSH
44195: LD_INT 24
44197: PUSH
44198: LD_VAR 0 7
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: LD_INT 45
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: PUSH
44215: EMPTY
44216: LIST
44217: ADD
44218: ST_TO_ADDR
// end ; 9 :
44219: GO 44411
44221: LD_INT 9
44223: DOUBLE
44224: EQUAL
44225: IFTRUE 44229
44227: GO 44282
44229: POP
// begin Selected = true ;
44230: LD_ADDR_VAR 0 4
44234: PUSH
44235: LD_INT 1
44237: ST_TO_ADDR
// Credits = 11 ;
44238: LD_ADDR_VAR 0 5
44242: PUSH
44243: LD_INT 11
44245: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_heavy_gun ] ] ;
44246: LD_ADDR_EXP 121
44250: PUSH
44251: LD_EXP 121
44255: PUSH
44256: LD_INT 24
44258: PUSH
44259: LD_VAR 0 7
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: LD_INT 46
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: ADD
44279: ST_TO_ADDR
// end ; 10 , 11 :
44280: GO 44411
44282: LD_INT 10
44284: DOUBLE
44285: EQUAL
44286: IFTRUE 44296
44288: LD_INT 11
44290: DOUBLE
44291: EQUAL
44292: IFTRUE 44296
44294: GO 44349
44296: POP
// begin Selected = true ;
44297: LD_ADDR_VAR 0 4
44301: PUSH
44302: LD_INT 1
44304: ST_TO_ADDR
// Credits = 15 ;
44305: LD_ADDR_VAR 0 5
44309: PUSH
44310: LD_INT 15
44312: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_rocket ] ] ;
44313: LD_ADDR_EXP 121
44317: PUSH
44318: LD_EXP 121
44322: PUSH
44323: LD_INT 24
44325: PUSH
44326: LD_VAR 0 7
44330: PUSH
44331: LD_INT 3
44333: PUSH
44334: LD_INT 47
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: ADD
44346: ST_TO_ADDR
// end ; 12 :
44347: GO 44411
44349: LD_INT 12
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44357
44355: GO 44410
44357: POP
// begin Selected = true ;
44358: LD_ADDR_VAR 0 4
44362: PUSH
44363: LD_INT 1
44365: ST_TO_ADDR
// Credits = 4 ;
44366: LD_ADDR_VAR 0 5
44370: PUSH
44371: LD_INT 4
44373: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_time_lapser ] ] ;
44374: LD_ADDR_EXP 121
44378: PUSH
44379: LD_EXP 121
44383: PUSH
44384: LD_INT 24
44386: PUSH
44387: LD_VAR 0 7
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: LD_INT 49
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: ADD
44407: ST_TO_ADDR
// end ; end ;
44408: GO 44411
44410: POP
// until Selected ;
44411: LD_VAR 0 4
44415: IFFALSE 43296
// Result = Credits ;
44417: LD_ADDR_VAR 0 2
44421: PUSH
44422: LD_VAR 0 5
44426: ST_TO_ADDR
// end ;
44427: LD_VAR 0 2
44431: RET
// function GenerateGroup ( Credits , time ) ; var Used_Credits , i ; begin
44432: LD_INT 0
44434: PPUSH
44435: PPUSH
44436: PPUSH
// Used_Credits = 0 ;
44437: LD_ADDR_VAR 0 4
44441: PUSH
44442: LD_INT 0
44444: ST_TO_ADDR
// if Russian_Siberite_Attack then
44445: LD_EXP 215
44449: IFFALSE 44561
// begin if CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) or CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) then
44451: LD_INT 195
44453: PPUSH
44454: LD_INT 84
44456: PPUSH
44457: CALL_OW 438
44461: PPUSH
44462: LD_INT 24
44464: PPUSH
44465: LD_INT 3
44467: PPUSH
44468: LD_INT 3
44470: PPUSH
44471: LD_INT 48
44473: PPUSH
44474: CALL_OW 448
44478: PUSH
44479: LD_INT 170
44481: PPUSH
44482: LD_INT 35
44484: PPUSH
44485: CALL_OW 438
44489: PPUSH
44490: LD_INT 24
44492: PPUSH
44493: LD_INT 3
44495: PPUSH
44496: LD_INT 3
44498: PPUSH
44499: LD_INT 48
44501: PPUSH
44502: CALL_OW 448
44506: OR
44507: IFFALSE 44561
// begin for i = 1 to 2 do
44509: LD_ADDR_VAR 0 5
44513: PUSH
44514: DOUBLE
44515: LD_INT 1
44517: DEC
44518: ST_TO_ADDR
44519: LD_INT 2
44521: PUSH
44522: FOR_TO
44523: IFFALSE 44559
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ] ] ;
44525: LD_ADDR_EXP 121
44529: PUSH
44530: LD_EXP 121
44534: PUSH
44535: LD_INT 24
44537: PUSH
44538: LD_INT 3
44540: PUSH
44541: LD_INT 3
44543: PUSH
44544: LD_INT 48
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: PUSH
44553: EMPTY
44554: LIST
44555: ADD
44556: ST_TO_ADDR
44557: GO 44522
44559: POP
44560: POP
// end ; end ; repeat Used_Credits = Used_Credits + GetRandomVehicle ( time ) ;
44561: LD_ADDR_VAR 0 4
44565: PUSH
44566: LD_VAR 0 4
44570: PUSH
44571: LD_VAR 0 2
44575: PPUSH
44576: CALL 43272 0 1
44580: PLUS
44581: ST_TO_ADDR
// until Credits < Used_Credits ;
44582: LD_VAR 0 1
44586: PUSH
44587: LD_VAR 0 4
44591: LESS
44592: IFFALSE 44561
// result = Used_Credits ;
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: LD_VAR 0 4
44603: ST_TO_ADDR
// end ;
44604: LD_VAR 0 3
44608: RET
// function GenerateAttackingGroup ; var Power , Next_time , Number_of_units , Person , veh , i , Used_Credits , Credits , Strength_of_attack ; begin
44609: LD_INT 0
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
// Power = Rand ( 1 , 3 ) ;
44621: LD_ADDR_VAR 0 2
44625: PUSH
44626: LD_INT 1
44628: PPUSH
44629: LD_INT 3
44631: PPUSH
44632: CALL_OW 12
44636: ST_TO_ADDR
// Number_of_units = Rand ( 1 , 2 ) ;
44637: LD_ADDR_VAR 0 4
44641: PUSH
44642: LD_INT 1
44644: PPUSH
44645: LD_INT 2
44647: PPUSH
44648: CALL_OW 12
44652: ST_TO_ADDR
// R_Attack_Group = [ ] ;
44653: LD_ADDR_EXP 121
44657: PUSH
44658: EMPTY
44659: ST_TO_ADDR
// if tick < Rus_Attack_Time + 10 10$0 then
44660: LD_OWVAR 1
44664: PUSH
44665: LD_EXP 130
44669: PUSH
44670: LD_INT 21000
44672: PLUS
44673: LESS
44674: IFFALSE 44836
// begin case R_Attack_Counter of 1 :
44676: LD_EXP 117
44680: PUSH
44681: LD_INT 1
44683: DOUBLE
44684: EQUAL
44685: IFTRUE 44689
44687: GO 44754
44689: POP
// begin R_Attack_Group = R_Attack_Group ;
44690: LD_ADDR_EXP 121
44694: PUSH
44695: LD_EXP 121
44699: ST_TO_ADDR
// for i = 1 to 3 do
44700: LD_ADDR_VAR 0 7
44704: PUSH
44705: DOUBLE
44706: LD_INT 1
44708: DEC
44709: ST_TO_ADDR
44710: LD_INT 3
44712: PUSH
44713: FOR_TO
44714: IFFALSE 44750
// begin R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ;
44716: LD_ADDR_EXP 121
44720: PUSH
44721: LD_EXP 121
44725: PUSH
44726: LD_INT 22
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: LD_INT 44
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: PUSH
44744: EMPTY
44745: LIST
44746: ADD
44747: ST_TO_ADDR
// end ;
44748: GO 44713
44750: POP
44751: POP
// end ; else
44752: GO 44834
44754: POP
// begin Credits = 20 ;
44755: LD_ADDR_VAR 0 9
44759: PUSH
44760: LD_INT 20
44762: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R_Attack_Overflow , 1 ) ;
44763: LD_ADDR_VAR 0 8
44767: PUSH
44768: LD_VAR 0 9
44772: PUSH
44773: LD_EXP 214
44777: PLUS
44778: PPUSH
44779: LD_INT 1
44781: PPUSH
44782: CALL 44432 0 2
44786: ST_TO_ADDR
// R_Attack_Overflow = ( Credits + R_Attack_Overflow ) - Used_Credits ;
44787: LD_ADDR_EXP 214
44791: PUSH
44792: LD_VAR 0 9
44796: PUSH
44797: LD_EXP 214
44801: PLUS
44802: PUSH
44803: LD_VAR 0 8
44807: MINUS
44808: ST_TO_ADDR
// R_attack_time = [ 5 5$0 , 4 4$30 , 4 4$0 ] [ Difficulty ] ;
44809: LD_ADDR_EXP 115
44813: PUSH
44814: LD_INT 10500
44816: PUSH
44817: LD_INT 9450
44819: PUSH
44820: LD_INT 8400
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: PUSH
44828: LD_OWVAR 67
44832: ARRAY
44833: ST_TO_ADDR
// end ; end ; end else
44834: GO 45057
// if tick < Rus_Attack_Time + 30 30$0 then
44836: LD_OWVAR 1
44840: PUSH
44841: LD_EXP 130
44845: PUSH
44846: LD_INT 63000
44848: PLUS
44849: LESS
44850: IFFALSE 44933
// begin Credits = 20 ;
44852: LD_ADDR_VAR 0 9
44856: PUSH
44857: LD_INT 20
44859: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R_Attack_Overflow , 2 ) ;
44860: LD_ADDR_VAR 0 8
44864: PUSH
44865: LD_VAR 0 9
44869: PUSH
44870: LD_EXP 214
44874: PLUS
44875: PPUSH
44876: LD_INT 2
44878: PPUSH
44879: CALL 44432 0 2
44883: ST_TO_ADDR
// R_Attack_Overflow = ( Credits + R_Attack_Overflow ) - Used_Credits ;
44884: LD_ADDR_EXP 214
44888: PUSH
44889: LD_VAR 0 9
44893: PUSH
44894: LD_EXP 214
44898: PLUS
44899: PUSH
44900: LD_VAR 0 8
44904: MINUS
44905: ST_TO_ADDR
// R_attack_time = [ 7 7$0 , 6 6$30 , 6 6$0 ] [ Difficulty ] ;
44906: LD_ADDR_EXP 115
44910: PUSH
44911: LD_INT 14700
44913: PUSH
44914: LD_INT 13650
44916: PUSH
44917: LD_INT 12600
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: PUSH
44925: LD_OWVAR 67
44929: ARRAY
44930: ST_TO_ADDR
// end else
44931: GO 45057
// begin Strength_of_attack = Rand ( 1 , 7 ) ;
44933: LD_ADDR_VAR 0 10
44937: PUSH
44938: LD_INT 1
44940: PPUSH
44941: LD_INT 7
44943: PPUSH
44944: CALL_OW 12
44948: ST_TO_ADDR
// Credits = [ 6 , 8 , 10 ] [ Difficulty ] * Strength_of_attack ;
44949: LD_ADDR_VAR 0 9
44953: PUSH
44954: LD_INT 6
44956: PUSH
44957: LD_INT 8
44959: PUSH
44960: LD_INT 10
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: PUSH
44968: LD_OWVAR 67
44972: ARRAY
44973: PUSH
44974: LD_VAR 0 10
44978: MUL
44979: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 3 ) ;
44980: LD_ADDR_VAR 0 8
44984: PUSH
44985: LD_VAR 0 9
44989: PUSH
44990: LD_EXP 191
44994: PLUS
44995: PPUSH
44996: LD_INT 3
44998: PPUSH
44999: CALL 44432 0 2
45003: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
45004: LD_ADDR_EXP 191
45008: PUSH
45009: LD_VAR 0 9
45013: PUSH
45014: LD_EXP 191
45018: PLUS
45019: PUSH
45020: LD_VAR 0 8
45024: MINUS
45025: ST_TO_ADDR
// R1_attack_time = [ 0 0$30 , 0 0$25 , 0 0$20 ] [ Difficulty ] * Strength_of_attack ;
45026: LD_ADDR_EXP 114
45030: PUSH
45031: LD_INT 1050
45033: PUSH
45034: LD_INT 875
45036: PUSH
45037: LD_INT 700
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: PUSH
45045: LD_OWVAR 67
45049: ARRAY
45050: PUSH
45051: LD_VAR 0 10
45055: MUL
45056: ST_TO_ADDR
// end ; end ;
45057: LD_VAR 0 1
45061: RET
// function GeneratePatrolingGroup ; var i ; begin
45062: LD_INT 0
45064: PPUSH
45065: PPUSH
// R_Patrol_group = [ ] ;
45066: LD_ADDR_EXP 124
45070: PUSH
45071: EMPTY
45072: ST_TO_ADDR
// for i = 1 to 1 - ( R_Patrol_Group ^ [ ] ) do
45073: LD_ADDR_VAR 0 2
45077: PUSH
45078: DOUBLE
45079: LD_INT 1
45081: DEC
45082: ST_TO_ADDR
45083: LD_INT 1
45085: PUSH
45086: LD_EXP 124
45090: PUSH
45091: EMPTY
45092: ADD
45093: MINUS
45094: PUSH
45095: FOR_TO
45096: IFFALSE 45132
// R_Patrol_Group = R_Patrol_Group ^ [ [ ru_medium_tracked , engine_siberite , control_computer , ru_heavy_machine_gun ] ] ;
45098: LD_ADDR_EXP 124
45102: PUSH
45103: LD_EXP 124
45107: PUSH
45108: LD_INT 22
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: LD_INT 42
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: ADD
45129: ST_TO_ADDR
45130: GO 45095
45132: POP
45133: POP
// end ;
45134: LD_VAR 0 1
45138: RET
// export function BuildGroups ( Constructed_vehicle ) ; var Un , i ; begin
45139: LD_INT 0
45141: PPUSH
45142: PPUSH
45143: PPUSH
// if Constructed_vehicle <> 0 then
45144: LD_VAR 0 1
45148: PUSH
45149: LD_INT 0
45151: NONEQUAL
45152: IFFALSE 45264
// begin if ( GetWeapon ( Constructed_vehicle ) = ru_heavy_machine_gun ) then
45154: LD_VAR 0 1
45158: PPUSH
45159: CALL_OW 264
45163: PUSH
45164: LD_INT 42
45166: EQUAL
45167: IFFALSE 45201
// begin R_Constructed_Patrol = R_Constructed_Patrol ^ Constructed_vehicle ;
45169: LD_ADDR_EXP 126
45173: PUSH
45174: LD_EXP 126
45178: PUSH
45179: LD_VAR 0 1
45183: ADD
45184: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Constructed_vehicle ) end else
45185: LD_EXP 245
45189: PPUSH
45190: LD_VAR 0 1
45194: PPUSH
45195: CALL_OW 390
45199: GO 45264
// if ( GetWeapon ( Constructed_vehicle ) = ru_siberium_rocket ) then
45201: LD_VAR 0 1
45205: PPUSH
45206: CALL_OW 264
45210: PUSH
45211: LD_INT 48
45213: EQUAL
45214: IFFALSE 45234
// begin Russian_Siberite_rockets = Russian_Siberite_rockets ^ Constructed_vehicle ;
45216: LD_ADDR_EXP 216
45220: PUSH
45221: LD_EXP 216
45225: PUSH
45226: LD_VAR 0 1
45230: ADD
45231: ST_TO_ADDR
// end else
45232: GO 45264
// begin R_Constructed_Attack = R_Constructed_Attack ^ Constructed_vehicle ;
45234: LD_ADDR_EXP 125
45238: PUSH
45239: LD_EXP 125
45243: PUSH
45244: LD_VAR 0 1
45248: ADD
45249: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Constructed_vehicle ) ;
45250: LD_EXP 245
45254: PPUSH
45255: LD_VAR 0 1
45259: PPUSH
45260: CALL_OW 390
// end end ; i = 1 ;
45264: LD_ADDR_VAR 0 4
45268: PUSH
45269: LD_INT 1
45271: ST_TO_ADDR
// while i <= R_Attack_Group do
45272: LD_VAR 0 4
45276: PUSH
45277: LD_EXP 121
45281: LESSEQUAL
45282: IFFALSE 45478
// begin if not ( CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ i ] [ 1 ] , R_Attack_Group [ i ] [ 2 ] , R_Attack_Group [ i ] [ 3 ] , R_Attack_Group [ i ] [ 4 ] ) ) and not ( CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ i ] [ 1 ] , R_Attack_Group [ i ] [ 2 ] , R_Attack_Group [ i ] [ 3 ] , R_Attack_Group [ i ] [ 4 ] ) ) then
45284: LD_INT 195
45286: PPUSH
45287: LD_INT 84
45289: PPUSH
45290: CALL_OW 438
45294: PPUSH
45295: LD_EXP 121
45299: PUSH
45300: LD_VAR 0 4
45304: ARRAY
45305: PUSH
45306: LD_INT 1
45308: ARRAY
45309: PPUSH
45310: LD_EXP 121
45314: PUSH
45315: LD_VAR 0 4
45319: ARRAY
45320: PUSH
45321: LD_INT 2
45323: ARRAY
45324: PPUSH
45325: LD_EXP 121
45329: PUSH
45330: LD_VAR 0 4
45334: ARRAY
45335: PUSH
45336: LD_INT 3
45338: ARRAY
45339: PPUSH
45340: LD_EXP 121
45344: PUSH
45345: LD_VAR 0 4
45349: ARRAY
45350: PUSH
45351: LD_INT 4
45353: ARRAY
45354: PPUSH
45355: CALL_OW 448
45359: NOT
45360: PUSH
45361: LD_INT 170
45363: PPUSH
45364: LD_INT 35
45366: PPUSH
45367: CALL_OW 438
45371: PPUSH
45372: LD_EXP 121
45376: PUSH
45377: LD_VAR 0 4
45381: ARRAY
45382: PUSH
45383: LD_INT 1
45385: ARRAY
45386: PPUSH
45387: LD_EXP 121
45391: PUSH
45392: LD_VAR 0 4
45396: ARRAY
45397: PUSH
45398: LD_INT 2
45400: ARRAY
45401: PPUSH
45402: LD_EXP 121
45406: PUSH
45407: LD_VAR 0 4
45411: ARRAY
45412: PUSH
45413: LD_INT 3
45415: ARRAY
45416: PPUSH
45417: LD_EXP 121
45421: PUSH
45422: LD_VAR 0 4
45426: ARRAY
45427: PUSH
45428: LD_INT 4
45430: ARRAY
45431: PPUSH
45432: CALL_OW 448
45436: NOT
45437: AND
45438: IFFALSE 45462
// R_Attack_Group = Delete ( R_Attack_Group , i ) else
45440: LD_ADDR_EXP 121
45444: PUSH
45445: LD_EXP 121
45449: PPUSH
45450: LD_VAR 0 4
45454: PPUSH
45455: CALL_OW 3
45459: ST_TO_ADDR
45460: GO 45476
// i = i + 1 ;
45462: LD_ADDR_VAR 0 4
45466: PUSH
45467: LD_VAR 0 4
45471: PUSH
45472: LD_INT 1
45474: PLUS
45475: ST_TO_ADDR
// end ;
45476: GO 45272
// i = 1 ;
45478: LD_ADDR_VAR 0 4
45482: PUSH
45483: LD_INT 1
45485: ST_TO_ADDR
// while i <= R_Patrol_Group do
45486: LD_VAR 0 4
45490: PUSH
45491: LD_EXP 124
45495: LESSEQUAL
45496: IFFALSE 45692
// begin if not ( CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ i ] [ 1 ] , R_Patrol_Group [ i ] [ 2 ] , R_Patrol_Group [ i ] [ 3 ] , R_Patrol_Group [ i ] [ 4 ] ) ) and not ( CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ i ] [ 1 ] , R_Patrol_Group [ i ] [ 2 ] , R_Patrol_Group [ i ] [ 3 ] , R_Patrol_Group [ i ] [ 4 ] ) ) then
45498: LD_INT 195
45500: PPUSH
45501: LD_INT 84
45503: PPUSH
45504: CALL_OW 438
45508: PPUSH
45509: LD_EXP 124
45513: PUSH
45514: LD_VAR 0 4
45518: ARRAY
45519: PUSH
45520: LD_INT 1
45522: ARRAY
45523: PPUSH
45524: LD_EXP 124
45528: PUSH
45529: LD_VAR 0 4
45533: ARRAY
45534: PUSH
45535: LD_INT 2
45537: ARRAY
45538: PPUSH
45539: LD_EXP 124
45543: PUSH
45544: LD_VAR 0 4
45548: ARRAY
45549: PUSH
45550: LD_INT 3
45552: ARRAY
45553: PPUSH
45554: LD_EXP 124
45558: PUSH
45559: LD_VAR 0 4
45563: ARRAY
45564: PUSH
45565: LD_INT 4
45567: ARRAY
45568: PPUSH
45569: CALL_OW 448
45573: NOT
45574: PUSH
45575: LD_INT 170
45577: PPUSH
45578: LD_INT 35
45580: PPUSH
45581: CALL_OW 438
45585: PPUSH
45586: LD_EXP 124
45590: PUSH
45591: LD_VAR 0 4
45595: ARRAY
45596: PUSH
45597: LD_INT 1
45599: ARRAY
45600: PPUSH
45601: LD_EXP 124
45605: PUSH
45606: LD_VAR 0 4
45610: ARRAY
45611: PUSH
45612: LD_INT 2
45614: ARRAY
45615: PPUSH
45616: LD_EXP 124
45620: PUSH
45621: LD_VAR 0 4
45625: ARRAY
45626: PUSH
45627: LD_INT 3
45629: ARRAY
45630: PPUSH
45631: LD_EXP 124
45635: PUSH
45636: LD_VAR 0 4
45640: ARRAY
45641: PUSH
45642: LD_INT 4
45644: ARRAY
45645: PPUSH
45646: CALL_OW 448
45650: NOT
45651: AND
45652: IFFALSE 45676
// R_Patrol_Group = Delete ( R_Patrol_Group , i ) else
45654: LD_ADDR_EXP 124
45658: PUSH
45659: LD_EXP 124
45663: PPUSH
45664: LD_VAR 0 4
45668: PPUSH
45669: CALL_OW 3
45673: ST_TO_ADDR
45674: GO 45690
// i = i + 1 ;
45676: LD_ADDR_VAR 0 4
45680: PUSH
45681: LD_VAR 0 4
45685: PUSH
45686: LD_INT 1
45688: PLUS
45689: ST_TO_ADDR
// end ;
45690: GO 45486
// if ( R_Attack_Group > 0 ) then
45692: LD_EXP 121
45696: PUSH
45697: LD_INT 0
45699: GREATER
45700: IFFALSE 45885
// if not ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) then
45702: LD_INT 195
45704: PPUSH
45705: LD_INT 84
45707: PPUSH
45708: CALL_OW 438
45712: PPUSH
45713: CALL_OW 461
45717: PUSH
45718: LD_INT 3
45720: EQUAL
45721: NOT
45722: PUSH
45723: LD_INT 195
45725: PPUSH
45726: LD_INT 84
45728: PPUSH
45729: CALL_OW 438
45733: PPUSH
45734: LD_EXP 121
45738: PUSH
45739: LD_INT 1
45741: ARRAY
45742: PUSH
45743: LD_INT 1
45745: ARRAY
45746: PPUSH
45747: LD_EXP 121
45751: PUSH
45752: LD_INT 1
45754: ARRAY
45755: PUSH
45756: LD_INT 2
45758: ARRAY
45759: PPUSH
45760: LD_EXP 121
45764: PUSH
45765: LD_INT 1
45767: ARRAY
45768: PUSH
45769: LD_INT 3
45771: ARRAY
45772: PPUSH
45773: LD_EXP 121
45777: PUSH
45778: LD_INT 1
45780: ARRAY
45781: PUSH
45782: LD_INT 4
45784: ARRAY
45785: PPUSH
45786: CALL_OW 448
45790: AND
45791: IFFALSE 45885
// begin ComConstruct ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) ;
45793: LD_INT 195
45795: PPUSH
45796: LD_INT 84
45798: PPUSH
45799: CALL_OW 438
45803: PPUSH
45804: LD_EXP 121
45808: PUSH
45809: LD_INT 1
45811: ARRAY
45812: PUSH
45813: LD_INT 1
45815: ARRAY
45816: PPUSH
45817: LD_EXP 121
45821: PUSH
45822: LD_INT 1
45824: ARRAY
45825: PUSH
45826: LD_INT 2
45828: ARRAY
45829: PPUSH
45830: LD_EXP 121
45834: PUSH
45835: LD_INT 1
45837: ARRAY
45838: PUSH
45839: LD_INT 3
45841: ARRAY
45842: PPUSH
45843: LD_EXP 121
45847: PUSH
45848: LD_INT 1
45850: ARRAY
45851: PUSH
45852: LD_INT 4
45854: ARRAY
45855: PPUSH
45856: CALL_OW 125
// R_Attack_Group = Delete ( R_Attack_Group , 1 ) ;
45860: LD_ADDR_EXP 121
45864: PUSH
45865: LD_EXP 121
45869: PPUSH
45870: LD_INT 1
45872: PPUSH
45873: CALL_OW 3
45877: ST_TO_ADDR
// Wait ( 1 ) ;
45878: LD_INT 1
45880: PPUSH
45881: CALL_OW 67
// end ; if ( R_Attack_Group > 0 ) then
45885: LD_EXP 121
45889: PUSH
45890: LD_INT 0
45892: GREATER
45893: IFFALSE 46078
// if not ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) then
45895: LD_INT 170
45897: PPUSH
45898: LD_INT 35
45900: PPUSH
45901: CALL_OW 438
45905: PPUSH
45906: CALL_OW 461
45910: PUSH
45911: LD_INT 3
45913: EQUAL
45914: NOT
45915: PUSH
45916: LD_INT 170
45918: PPUSH
45919: LD_INT 35
45921: PPUSH
45922: CALL_OW 438
45926: PPUSH
45927: LD_EXP 121
45931: PUSH
45932: LD_INT 1
45934: ARRAY
45935: PUSH
45936: LD_INT 1
45938: ARRAY
45939: PPUSH
45940: LD_EXP 121
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PUSH
45949: LD_INT 2
45951: ARRAY
45952: PPUSH
45953: LD_EXP 121
45957: PUSH
45958: LD_INT 1
45960: ARRAY
45961: PUSH
45962: LD_INT 3
45964: ARRAY
45965: PPUSH
45966: LD_EXP 121
45970: PUSH
45971: LD_INT 1
45973: ARRAY
45974: PUSH
45975: LD_INT 4
45977: ARRAY
45978: PPUSH
45979: CALL_OW 448
45983: AND
45984: IFFALSE 46078
// begin ComConstruct ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) ;
45986: LD_INT 170
45988: PPUSH
45989: LD_INT 35
45991: PPUSH
45992: CALL_OW 438
45996: PPUSH
45997: LD_EXP 121
46001: PUSH
46002: LD_INT 1
46004: ARRAY
46005: PUSH
46006: LD_INT 1
46008: ARRAY
46009: PPUSH
46010: LD_EXP 121
46014: PUSH
46015: LD_INT 1
46017: ARRAY
46018: PUSH
46019: LD_INT 2
46021: ARRAY
46022: PPUSH
46023: LD_EXP 121
46027: PUSH
46028: LD_INT 1
46030: ARRAY
46031: PUSH
46032: LD_INT 3
46034: ARRAY
46035: PPUSH
46036: LD_EXP 121
46040: PUSH
46041: LD_INT 1
46043: ARRAY
46044: PUSH
46045: LD_INT 4
46047: ARRAY
46048: PPUSH
46049: CALL_OW 125
// R_Attack_Group = Delete ( R_Attack_Group , 1 ) ;
46053: LD_ADDR_EXP 121
46057: PUSH
46058: LD_EXP 121
46062: PPUSH
46063: LD_INT 1
46065: PPUSH
46066: CALL_OW 3
46070: ST_TO_ADDR
// Wait ( 1 ) ;
46071: LD_INT 1
46073: PPUSH
46074: CALL_OW 67
// end ; if ( R_Patrol_Group > 0 ) then
46078: LD_EXP 124
46082: PUSH
46083: LD_INT 0
46085: GREATER
46086: IFFALSE 46271
// if not ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) then
46088: LD_INT 195
46090: PPUSH
46091: LD_INT 84
46093: PPUSH
46094: CALL_OW 438
46098: PPUSH
46099: CALL_OW 461
46103: PUSH
46104: LD_INT 3
46106: EQUAL
46107: NOT
46108: PUSH
46109: LD_INT 195
46111: PPUSH
46112: LD_INT 84
46114: PPUSH
46115: CALL_OW 438
46119: PPUSH
46120: LD_EXP 124
46124: PUSH
46125: LD_INT 1
46127: ARRAY
46128: PUSH
46129: LD_INT 1
46131: ARRAY
46132: PPUSH
46133: LD_EXP 124
46137: PUSH
46138: LD_INT 1
46140: ARRAY
46141: PUSH
46142: LD_INT 2
46144: ARRAY
46145: PPUSH
46146: LD_EXP 124
46150: PUSH
46151: LD_INT 1
46153: ARRAY
46154: PUSH
46155: LD_INT 3
46157: ARRAY
46158: PPUSH
46159: LD_EXP 124
46163: PUSH
46164: LD_INT 1
46166: ARRAY
46167: PUSH
46168: LD_INT 4
46170: ARRAY
46171: PPUSH
46172: CALL_OW 448
46176: AND
46177: IFFALSE 46271
// begin ComConstruct ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) ;
46179: LD_INT 195
46181: PPUSH
46182: LD_INT 84
46184: PPUSH
46185: CALL_OW 438
46189: PPUSH
46190: LD_EXP 124
46194: PUSH
46195: LD_INT 1
46197: ARRAY
46198: PUSH
46199: LD_INT 1
46201: ARRAY
46202: PPUSH
46203: LD_EXP 124
46207: PUSH
46208: LD_INT 1
46210: ARRAY
46211: PUSH
46212: LD_INT 2
46214: ARRAY
46215: PPUSH
46216: LD_EXP 124
46220: PUSH
46221: LD_INT 1
46223: ARRAY
46224: PUSH
46225: LD_INT 3
46227: ARRAY
46228: PPUSH
46229: LD_EXP 124
46233: PUSH
46234: LD_INT 1
46236: ARRAY
46237: PUSH
46238: LD_INT 4
46240: ARRAY
46241: PPUSH
46242: CALL_OW 125
// R_Patrol_Group = Delete ( R_Patrol_Group , 1 ) ;
46246: LD_ADDR_EXP 124
46250: PUSH
46251: LD_EXP 124
46255: PPUSH
46256: LD_INT 1
46258: PPUSH
46259: CALL_OW 3
46263: ST_TO_ADDR
// Wait ( 1 ) ;
46264: LD_INT 1
46266: PPUSH
46267: CALL_OW 67
// end ; if ( R_Patrol_Group > 0 ) then
46271: LD_EXP 124
46275: PUSH
46276: LD_INT 0
46278: GREATER
46279: IFFALSE 46464
// if not ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) then
46281: LD_INT 170
46283: PPUSH
46284: LD_INT 35
46286: PPUSH
46287: CALL_OW 438
46291: PPUSH
46292: CALL_OW 461
46296: PUSH
46297: LD_INT 3
46299: EQUAL
46300: NOT
46301: PUSH
46302: LD_INT 170
46304: PPUSH
46305: LD_INT 35
46307: PPUSH
46308: CALL_OW 438
46312: PPUSH
46313: LD_EXP 124
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: PPUSH
46326: LD_EXP 124
46330: PUSH
46331: LD_INT 1
46333: ARRAY
46334: PUSH
46335: LD_INT 2
46337: ARRAY
46338: PPUSH
46339: LD_EXP 124
46343: PUSH
46344: LD_INT 1
46346: ARRAY
46347: PUSH
46348: LD_INT 3
46350: ARRAY
46351: PPUSH
46352: LD_EXP 124
46356: PUSH
46357: LD_INT 1
46359: ARRAY
46360: PUSH
46361: LD_INT 4
46363: ARRAY
46364: PPUSH
46365: CALL_OW 448
46369: AND
46370: IFFALSE 46464
// begin ComConstruct ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) ;
46372: LD_INT 170
46374: PPUSH
46375: LD_INT 35
46377: PPUSH
46378: CALL_OW 438
46382: PPUSH
46383: LD_EXP 124
46387: PUSH
46388: LD_INT 1
46390: ARRAY
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: PPUSH
46396: LD_EXP 124
46400: PUSH
46401: LD_INT 1
46403: ARRAY
46404: PUSH
46405: LD_INT 2
46407: ARRAY
46408: PPUSH
46409: LD_EXP 124
46413: PUSH
46414: LD_INT 1
46416: ARRAY
46417: PUSH
46418: LD_INT 3
46420: ARRAY
46421: PPUSH
46422: LD_EXP 124
46426: PUSH
46427: LD_INT 1
46429: ARRAY
46430: PUSH
46431: LD_INT 4
46433: ARRAY
46434: PPUSH
46435: CALL_OW 125
// R_Patrol_Group = Delete ( R_Patrol_Group , 1 ) ;
46439: LD_ADDR_EXP 124
46443: PUSH
46444: LD_EXP 124
46448: PPUSH
46449: LD_INT 1
46451: PPUSH
46452: CALL_OW 3
46456: ST_TO_ADDR
// Wait ( 1 ) ;
46457: LD_INT 1
46459: PPUSH
46460: CALL_OW 67
// end ; end ;
46464: LD_VAR 0 2
46468: RET
// function SetAttackArea ; var Attack_Area ; begin
46469: LD_INT 0
46471: PPUSH
46472: PPUSH
// if FilterUnitsInArea ( Plan4 , [ f_side , americans ] ) > 0 then
46473: LD_INT 32
46475: PPUSH
46476: LD_INT 22
46478: PUSH
46479: LD_EXP 176
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PPUSH
46488: CALL_OW 70
46492: PUSH
46493: LD_INT 0
46495: GREATER
46496: IFFALSE 46508
// attack_area = Plan4 else
46498: LD_ADDR_VAR 0 2
46502: PUSH
46503: LD_INT 32
46505: ST_TO_ADDR
46506: GO 46839
// if FilterUnitsInArea ( Plan6 , [ [ f_side , americans ] , f_not , [ f_type , unit_human ] ] ) > 0 then
46508: LD_INT 34
46510: PPUSH
46511: LD_INT 22
46513: PUSH
46514: LD_EXP 176
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: LD_INT 21
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: PPUSH
46541: CALL_OW 70
46545: PUSH
46546: LD_INT 0
46548: GREATER
46549: IFFALSE 46561
// attack_area = Plan6 else
46551: LD_ADDR_VAR 0 2
46555: PUSH
46556: LD_INT 34
46558: ST_TO_ADDR
46559: GO 46839
// if FilterUnitsInArea ( Am_Base , [ f_side , americans ] ) > 0 then
46561: LD_INT 1
46563: PPUSH
46564: LD_INT 22
46566: PUSH
46567: LD_EXP 176
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PPUSH
46576: CALL_OW 70
46580: PUSH
46581: LD_INT 0
46583: GREATER
46584: IFFALSE 46596
// attack_area = Am_Base else
46586: LD_ADDR_VAR 0 2
46590: PUSH
46591: LD_INT 1
46593: ST_TO_ADDR
46594: GO 46839
// if FilterUnitsInArea ( JMM_Hill , [ f_side , americans ] ) > 0 then
46596: LD_INT 2
46598: PPUSH
46599: LD_INT 22
46601: PUSH
46602: LD_EXP 176
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PPUSH
46611: CALL_OW 70
46615: PUSH
46616: LD_INT 0
46618: GREATER
46619: IFFALSE 46631
// attack_area = JMM_Hill else
46621: LD_ADDR_VAR 0 2
46625: PUSH
46626: LD_INT 2
46628: ST_TO_ADDR
46629: GO 46839
// if FilterUnitsInArea ( Plan3 , [ f_side , americans ] ) > 0 then
46631: LD_INT 31
46633: PPUSH
46634: LD_INT 22
46636: PUSH
46637: LD_EXP 176
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PPUSH
46646: CALL_OW 70
46650: PUSH
46651: LD_INT 0
46653: GREATER
46654: IFFALSE 46666
// attack_area = Plan3 else
46656: LD_ADDR_VAR 0 2
46660: PUSH
46661: LD_INT 31
46663: ST_TO_ADDR
46664: GO 46839
// if FilterUnitsInArea ( Ar_Base , [ f_side , americans ] ) > 0 then
46666: LD_INT 17
46668: PPUSH
46669: LD_INT 22
46671: PUSH
46672: LD_EXP 176
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PPUSH
46681: CALL_OW 70
46685: PUSH
46686: LD_INT 0
46688: GREATER
46689: IFFALSE 46701
// attack_area = Ar_Base else
46691: LD_ADDR_VAR 0 2
46695: PUSH
46696: LD_INT 17
46698: ST_TO_ADDR
46699: GO 46839
// if FilterUnitsInArea ( Plan5 , [ f_side , americans ] ) > 0 then
46701: LD_INT 33
46703: PPUSH
46704: LD_INT 22
46706: PUSH
46707: LD_EXP 176
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PPUSH
46716: CALL_OW 70
46720: PUSH
46721: LD_INT 0
46723: GREATER
46724: IFFALSE 46736
// attack_area = Plan5 else
46726: LD_ADDR_VAR 0 2
46730: PUSH
46731: LD_INT 33
46733: ST_TO_ADDR
46734: GO 46839
// if FilterUnitsInArea ( Aliance_Base , [ f_side , americans ] ) > 0 then
46736: LD_INT 7
46738: PPUSH
46739: LD_INT 22
46741: PUSH
46742: LD_EXP 176
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PPUSH
46751: CALL_OW 70
46755: PUSH
46756: LD_INT 0
46758: GREATER
46759: IFFALSE 46771
// attack_area = Aliance_Base else
46761: LD_ADDR_VAR 0 2
46765: PUSH
46766: LD_INT 7
46768: ST_TO_ADDR
46769: GO 46839
// if FilterUnitsInArea ( Plan1 , [ f_side , americans ] ) > 0 then
46771: LD_INT 29
46773: PPUSH
46774: LD_INT 22
46776: PUSH
46777: LD_EXP 176
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PPUSH
46786: CALL_OW 70
46790: PUSH
46791: LD_INT 0
46793: GREATER
46794: IFFALSE 46806
// attack_area = Plan1 else
46796: LD_ADDR_VAR 0 2
46800: PUSH
46801: LD_INT 29
46803: ST_TO_ADDR
46804: GO 46839
// if FilterUnitsInArea ( Plan2 , [ f_side , americans ] ) > 0 then
46806: LD_INT 30
46808: PPUSH
46809: LD_INT 22
46811: PUSH
46812: LD_EXP 176
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PPUSH
46821: CALL_OW 70
46825: PUSH
46826: LD_INT 0
46828: GREATER
46829: IFFALSE 46839
// attack_area = Plan2 ;
46831: LD_ADDR_VAR 0 2
46835: PUSH
46836: LD_INT 30
46838: ST_TO_ADDR
// result = Attack_Area ;
46839: LD_ADDR_VAR 0 1
46843: PUSH
46844: LD_VAR 0 2
46848: ST_TO_ADDR
// end ;
46849: LD_VAR 0 1
46853: RET
// function GoThroughTeleport ( Attack_Area ) ; var Teleport1 , Teleport2 ; begin
46854: LD_INT 0
46856: PPUSH
46857: PPUSH
46858: PPUSH
// Teleport1 = GetUnitNumber ( 165 , 60 ) ;
46859: LD_ADDR_VAR 0 3
46863: PUSH
46864: LD_INT 165
46866: PPUSH
46867: LD_INT 60
46869: PPUSH
46870: CALL_OW 438
46874: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
46875: LD_ADDR_VAR 0 4
46879: PUSH
46880: LD_INT 182
46882: PPUSH
46883: LD_INT 87
46885: PPUSH
46886: CALL_OW 438
46890: ST_TO_ADDR
// if Attack_Area in [ Am_Base , JMM_Hill , Plan3 , Ar_Base , Plan1 ] then
46891: LD_VAR 0 1
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: LD_INT 31
46904: PUSH
46905: LD_INT 17
46907: PUSH
46908: LD_INT 29
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: IN
46918: IFFALSE 46986
// begin if IsOk ( Teleport1 ) then
46920: LD_VAR 0 3
46924: PPUSH
46925: CALL_OW 302
46929: IFFALSE 46953
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport1 ) else
46931: LD_EXP 131
46935: PUSH
46936: LD_EXP 132
46940: ADD
46941: PPUSH
46942: LD_VAR 0 3
46946: PPUSH
46947: CALL_OW 120
46951: GO 46984
// if IsOk ( Teleport2 ) then
46953: LD_VAR 0 4
46957: PPUSH
46958: CALL_OW 302
46962: IFFALSE 46984
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport2 ) end else
46964: LD_EXP 131
46968: PUSH
46969: LD_EXP 132
46973: ADD
46974: PPUSH
46975: LD_VAR 0 4
46979: PPUSH
46980: CALL_OW 120
46984: GO 47050
// begin if IsOk ( Teleport2 ) then
46986: LD_VAR 0 4
46990: PPUSH
46991: CALL_OW 302
46995: IFFALSE 47019
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport2 ) else
46997: LD_EXP 131
47001: PUSH
47002: LD_EXP 132
47006: ADD
47007: PPUSH
47008: LD_VAR 0 4
47012: PPUSH
47013: CALL_OW 120
47017: GO 47050
// if IsOk ( Teleport1 ) then
47019: LD_VAR 0 3
47023: PPUSH
47024: CALL_OW 302
47028: IFFALSE 47050
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport1 ) end ;
47030: LD_EXP 131
47034: PUSH
47035: LD_EXP 132
47039: ADD
47040: PPUSH
47041: LD_VAR 0 3
47045: PPUSH
47046: CALL_OW 120
// WaitTask ( R_New_Attack ^ R_New_Patrol , 1 ) ;
47050: LD_EXP 131
47054: PUSH
47055: LD_EXP 132
47059: ADD
47060: PPUSH
47061: LD_INT 1
47063: PPUSH
47064: CALL 17876 0 2
// end ;
47068: LD_VAR 0 2
47072: RET
// function StartOfRusAttack ( Attack_Area ) ; var Un ; begin
47073: LD_INT 0
47075: PPUSH
47076: PPUSH
// if Russian_Siberite_Attack then
47077: LD_EXP 215
47081: IFFALSE 47109
// for Un in Russian_Siberite_rockets do
47083: LD_ADDR_VAR 0 3
47087: PUSH
47088: LD_EXP 216
47092: PUSH
47093: FOR_IN
47094: IFFALSE 47107
// RSiberiteAttack ( Un ) ;
47096: LD_VAR 0 3
47100: PPUSH
47101: CALL 18519 0 1
47105: GO 47093
47107: POP
47108: POP
// if not ( ExistMc ( Russian_reg_id ) ) then
47109: LD_EXP 241
47113: PPUSH
47114: CALL_OW 386
47118: NOT
47119: IFFALSE 47177
// begin Russian_reg_id = McRegistry ( russians , [ [ mc_reg_refresh_time , 0 0$5 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important , mc_reg_ignore_fog , mc_reg_buildings ] ) ;
47121: LD_ADDR_EXP 241
47125: PUSH
47126: LD_EXP 178
47130: PPUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 175
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_VAR 0 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 8
47155: NEG
47156: PUSH
47157: LD_INT 7
47159: PUSH
47160: LD_INT 9
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: PPUSH
47170: CALL_OW 399
47174: ST_TO_ADDR
// end else
47175: GO 47201
// begin McRegistryChangeOptions ( Russian_reg_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
47177: LD_EXP 241
47181: PPUSH
47182: LD_INT 2
47184: PUSH
47185: LD_VAR 0 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: PPUSH
47197: CALL_OW 400
// end ; if not ( ExistMc ( Russian_att_id ) ) then
47201: LD_EXP 242
47205: PPUSH
47206: CALL_OW 386
47210: NOT
47211: IFFALSE 47288
// begin Russian_att_id = McAttack ( 100 , Russian_reg_id , Main_R_Attack_Group , [ [ mc_retreat_area_vehicles , retreat1 ] , [ mc_retreat_area_people , retreat1 ] , [ mc_retreat_lives_vehicles , 600 ] , [ mc_retreat_lives_people , 600 ] , mc_no_stop ] ) ;
47213: LD_ADDR_EXP 242
47217: PUSH
47218: LD_INT 100
47220: PPUSH
47221: LD_EXP 241
47225: PPUSH
47226: LD_EXP 120
47230: PPUSH
47231: LD_INT 8
47233: PUSH
47234: LD_INT 40
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 7
47243: PUSH
47244: LD_INT 40
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 6
47253: PUSH
47254: LD_INT 600
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 5
47263: PUSH
47264: LD_INT 600
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 10
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: PPUSH
47281: CALL_OW 402
47285: ST_TO_ADDR
// end else
47286: GO 47308
// begin AddMcUnits ( Russian_att_id , R_New_Attack ^ R_New_Patrol ) ;
47288: LD_EXP 242
47292: PPUSH
47293: LD_EXP 131
47297: PUSH
47298: LD_EXP 132
47302: ADD
47303: PPUSH
47304: CALL_OW 390
// end ; RemoveMcUnits ( Russian_def_id , R_New_Attack ^ R_New_Patrol ) ;
47308: LD_EXP 245
47312: PPUSH
47313: LD_EXP 131
47317: PUSH
47318: LD_EXP 132
47322: ADD
47323: PPUSH
47324: CALL_OW 391
// end ;
47328: LD_VAR 0 2
47332: RET
// export function RusAttack ; var Attack_Area ; begin
47333: LD_INT 0
47335: PPUSH
47336: PPUSH
// while ( FilterUnitsInArea ( R_base , [ [ f_side , americans ] , [ f_ok ] ] ) > 0 ) do
47337: LD_INT 36
47339: PPUSH
47340: LD_INT 22
47342: PUSH
47343: LD_EXP 176
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 50
47354: PUSH
47355: EMPTY
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PPUSH
47362: CALL_OW 70
47366: PUSH
47367: LD_INT 0
47369: GREATER
47370: IFFALSE 47381
// Wait ( 0 0$10 ) ;
47372: LD_INT 350
47374: PPUSH
47375: CALL_OW 67
47379: GO 47337
// Main_R_Attack_Group = Main_R_Attack_Group ^ R_New_Attack ^ R_New_Patrol ;
47381: LD_ADDR_EXP 120
47385: PUSH
47386: LD_EXP 120
47390: PUSH
47391: LD_EXP 131
47395: ADD
47396: PUSH
47397: LD_EXP 132
47401: ADD
47402: ST_TO_ADDR
// Main_R_Attack_Group = UnitFilter ( Main_R_Attack_Group , [ f_ok ] ) ;
47403: LD_ADDR_EXP 120
47407: PUSH
47408: LD_EXP 120
47412: PPUSH
47413: LD_INT 50
47415: PUSH
47416: EMPTY
47417: LIST
47418: PPUSH
47419: CALL_OW 72
47423: ST_TO_ADDR
// Attack_Area = SetAttackArea ;
47424: LD_ADDR_VAR 0 2
47428: PUSH
47429: CALL 46469 0 0
47433: ST_TO_ADDR
// if ( R_New_Attack ^ R_New_Patrol <> 0 ) then
47434: LD_EXP 131
47438: PUSH
47439: LD_EXP 132
47443: ADD
47444: PUSH
47445: LD_INT 0
47447: NONEQUAL
47448: IFFALSE 47459
// GoThroughTeleport ( Attack_Area ) ;
47450: LD_VAR 0 2
47454: PPUSH
47455: CALL 46854 0 1
// StartOfRusAttack ( Attack_Area ) ;
47459: LD_VAR 0 2
47463: PPUSH
47464: CALL 47073 0 1
// end ;
47468: LD_VAR 0 1
47472: RET
// every 0 0$1 trigger tick > Rus_Attack_Time marked 10 do
47473: LD_OWVAR 1
47477: PUSH
47478: LD_EXP 130
47482: GREATER
47483: IFFALSE 47724
47485: GO 47487
47487: DISABLE
// begin disable ;
47488: DISABLE
// while true do
47489: LD_INT 1
47491: IFFALSE 47724
// begin if Main_R_Attack_Group < 40 then
47493: LD_EXP 120
47497: PUSH
47498: LD_INT 40
47500: LESS
47501: IFFALSE 47532
// begin R_Attack_counter = R_Attack_counter + 1 ;
47503: LD_ADDR_EXP 117
47507: PUSH
47508: LD_EXP 117
47512: PUSH
47513: LD_INT 1
47515: PLUS
47516: ST_TO_ADDR
// GenerateAttackingGroup ;
47517: CALL 44609 0 0
// GeneratePatrolingGroup ;
47521: CALL 45062 0 0
// BuildGroups ( 0 ) ;
47525: LD_INT 0
47527: PPUSH
47528: CALL 45139 0 1
// end ; while ( R_Attack_Group <> 0 ) or ( R_Patrol_Group <> 0 ) or ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) or ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) do
47532: LD_EXP 121
47536: PUSH
47537: LD_INT 0
47539: NONEQUAL
47540: PUSH
47541: LD_EXP 124
47545: PUSH
47546: LD_INT 0
47548: NONEQUAL
47549: OR
47550: PUSH
47551: LD_INT 170
47553: PPUSH
47554: LD_INT 35
47556: PPUSH
47557: CALL_OW 438
47561: PPUSH
47562: CALL_OW 461
47566: PUSH
47567: LD_INT 3
47569: EQUAL
47570: OR
47571: PUSH
47572: LD_INT 195
47574: PPUSH
47575: LD_INT 84
47577: PPUSH
47578: CALL_OW 438
47582: PPUSH
47583: CALL_OW 461
47587: PUSH
47588: LD_INT 3
47590: EQUAL
47591: OR
47592: IFFALSE 47603
// Wait ( 1 1$0 ) ;
47594: LD_INT 2100
47596: PPUSH
47597: CALL_OW 67
47601: GO 47532
// if ( R_New_Attack ^ R_New_Patrol ) = 0 then
47603: LD_EXP 131
47607: PUSH
47608: LD_EXP 132
47612: ADD
47613: PUSH
47614: LD_INT 0
47616: EQUAL
47617: IFFALSE 47628
// Wait ( 0 0$15 ) else
47619: LD_INT 525
47621: PPUSH
47622: CALL_OW 67
47626: GO 47679
// begin while R_attack_time > 0 0$15 do
47628: LD_EXP 115
47632: PUSH
47633: LD_INT 525
47635: GREATER
47636: IFFALSE 47670
// begin R_attack_time = R_attack_time - 0 0$15 ;
47638: LD_ADDR_EXP 115
47642: PUSH
47643: LD_EXP 115
47647: PUSH
47648: LD_INT 525
47650: MINUS
47651: ST_TO_ADDR
// RaiseSailEvent ( Rus_Attack ) ;
47652: LD_EXP 171
47656: PPUSH
47657: CALL_OW 427
// Wait ( 0 0$15 ) ;
47661: LD_INT 525
47663: PPUSH
47664: CALL_OW 67
// end ;
47668: GO 47628
// Wait ( R_attack_time ) ;
47670: LD_EXP 115
47674: PPUSH
47675: CALL_OW 67
// end ; R_New_Attack = R_Constructed_Attack ;
47679: LD_ADDR_EXP 131
47683: PUSH
47684: LD_EXP 125
47688: ST_TO_ADDR
// R_Constructed_Attack = [ ] ;
47689: LD_ADDR_EXP 125
47693: PUSH
47694: EMPTY
47695: ST_TO_ADDR
// R_New_Patrol = R_Constructed_Patrol ;
47696: LD_ADDR_EXP 132
47700: PUSH
47701: LD_EXP 126
47705: ST_TO_ADDR
// R_Constructed_Patrol = [ ] ;
47706: LD_ADDR_EXP 126
47710: PUSH
47711: EMPTY
47712: ST_TO_ADDR
// RaiseSailEvent ( Rus_Attack ) ;
47713: LD_EXP 171
47717: PPUSH
47718: CALL_OW 427
// end ;
47722: GO 47489
// end ;
47724: END
// every 0 0$1 trigger Russian_Siberite_Attack do var Un ;
47725: LD_EXP 215
47729: IFFALSE 47763
47731: GO 47733
47733: DISABLE
47734: LD_INT 0
47736: PPUSH
// begin for Un in Russian_Siberite_rockets do
47737: LD_ADDR_VAR 0 1
47741: PUSH
47742: LD_EXP 216
47746: PUSH
47747: FOR_IN
47748: IFFALSE 47761
// RSiberiteAttack ( Un ) ;
47750: LD_VAR 0 1
47754: PPUSH
47755: CALL 18519 0 1
47759: GO 47747
47761: POP
47762: POP
// end ;
47763: PPOPN 1
47765: END
// every 0 0$30 do var Dep1 , Dep2 , Dep3 ;
47766: GO 47768
47768: DISABLE
47769: LD_INT 0
47771: PPUSH
47772: PPUSH
47773: PPUSH
// begin Dep1 = GetUnitNumber ( 175 , 56 ) ;
47774: LD_ADDR_VAR 0 1
47778: PUSH
47779: LD_INT 175
47781: PPUSH
47782: LD_INT 56
47784: PPUSH
47785: CALL_OW 438
47789: ST_TO_ADDR
// Dep2 = GetUnitNumber ( 175 , 81 ) ;
47790: LD_ADDR_VAR 0 2
47794: PUSH
47795: LD_INT 175
47797: PPUSH
47798: LD_INT 81
47800: PPUSH
47801: CALL_OW 438
47805: ST_TO_ADDR
// Dep3 = GetUnitNumber ( 213 , 117 ) ;
47806: LD_ADDR_VAR 0 3
47810: PUSH
47811: LD_INT 213
47813: PPUSH
47814: LD_INT 117
47816: PPUSH
47817: CALL_OW 438
47821: ST_TO_ADDR
// if IsOk ( Dep1 ) and GetSide ( Dep1 ) = russians then
47822: LD_VAR 0 1
47826: PPUSH
47827: CALL_OW 302
47831: PUSH
47832: LD_VAR 0 1
47836: PPUSH
47837: CALL_OW 255
47841: PUSH
47842: LD_EXP 178
47846: EQUAL
47847: AND
47848: IFFALSE 47906
// begin SetResourceType ( GetBase ( Dep1 ) , mat_siberit , rand ( 1500 , 2000 ) ) ;
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 274
47859: PPUSH
47860: LD_INT 3
47862: PPUSH
47863: LD_INT 1500
47865: PPUSH
47866: LD_INT 2000
47868: PPUSH
47869: CALL_OW 12
47873: PPUSH
47874: CALL_OW 277
// SetResourceType ( GetBase ( Dep1 ) , mat_cans , rand ( 1500 , 2000 ) ) ;
47878: LD_VAR 0 1
47882: PPUSH
47883: CALL_OW 274
47887: PPUSH
47888: LD_INT 1
47890: PPUSH
47891: LD_INT 1500
47893: PPUSH
47894: LD_INT 2000
47896: PPUSH
47897: CALL_OW 12
47901: PPUSH
47902: CALL_OW 277
// end ; if IsOk ( Dep2 ) and GetSide ( Dep2 ) = russians then
47906: LD_VAR 0 2
47910: PPUSH
47911: CALL_OW 302
47915: PUSH
47916: LD_VAR 0 2
47920: PPUSH
47921: CALL_OW 255
47925: PUSH
47926: LD_EXP 178
47930: EQUAL
47931: AND
47932: IFFALSE 47990
// begin SetResourceType ( GetBase ( Dep2 ) , mat_siberit , rand ( 1500 , 2000 ) ) ;
47934: LD_VAR 0 2
47938: PPUSH
47939: CALL_OW 274
47943: PPUSH
47944: LD_INT 3
47946: PPUSH
47947: LD_INT 1500
47949: PPUSH
47950: LD_INT 2000
47952: PPUSH
47953: CALL_OW 12
47957: PPUSH
47958: CALL_OW 277
// SetResourceType ( GetBase ( Dep2 ) , mat_cans , rand ( 1500 , 2000 ) ) ;
47962: LD_VAR 0 2
47966: PPUSH
47967: CALL_OW 274
47971: PPUSH
47972: LD_INT 1
47974: PPUSH
47975: LD_INT 1500
47977: PPUSH
47978: LD_INT 2000
47980: PPUSH
47981: CALL_OW 12
47985: PPUSH
47986: CALL_OW 277
// end ; if IsOk ( Dep3 ) and GetSide ( Dep3 ) = russians then
47990: LD_VAR 0 3
47994: PPUSH
47995: CALL_OW 302
47999: PUSH
48000: LD_VAR 0 3
48004: PPUSH
48005: CALL_OW 255
48009: PUSH
48010: LD_EXP 178
48014: EQUAL
48015: AND
48016: IFFALSE 48074
// begin SetResourceType ( GetBase ( Dep3 ) , mat_siberit , rand ( 500 , 600 ) ) ;
48018: LD_VAR 0 3
48022: PPUSH
48023: CALL_OW 274
48027: PPUSH
48028: LD_INT 3
48030: PPUSH
48031: LD_INT 500
48033: PPUSH
48034: LD_INT 600
48036: PPUSH
48037: CALL_OW 12
48041: PPUSH
48042: CALL_OW 277
// SetResourceType ( GetBase ( Dep3 ) , mat_cans , rand ( 2000 , 2200 ) ) ;
48046: LD_VAR 0 3
48050: PPUSH
48051: CALL_OW 274
48055: PPUSH
48056: LD_INT 1
48058: PPUSH
48059: LD_INT 2000
48061: PPUSH
48062: LD_INT 2200
48064: PPUSH
48065: CALL_OW 12
48069: PPUSH
48070: CALL_OW 277
// end ; enable ;
48074: ENABLE
// end ;
48075: PPOPN 3
48077: END
// export function BuildBehemots ; var i , Un , New_Person ; begin
48078: LD_INT 0
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
// uc_side = russians ;
48084: LD_ADDR_OWVAR 20
48088: PUSH
48089: LD_EXP 178
48093: ST_TO_ADDR
// uc_nation = nation_russian ;
48094: LD_ADDR_OWVAR 21
48098: PUSH
48099: LD_INT 3
48101: ST_TO_ADDR
// for i = 1 to Number_of_Behemots do
48102: LD_ADDR_VAR 0 2
48106: PUSH
48107: DOUBLE
48108: LD_INT 1
48110: DEC
48111: ST_TO_ADDR
48112: LD_EXP 221
48116: PUSH
48117: FOR_TO
48118: IFFALSE 48202
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
48120: LD_INT 0
48122: PPUSH
48123: LD_EXP 184
48127: PPUSH
48128: CALL_OW 383
// New_Person = CreateHuman ;
48132: LD_ADDR_VAR 0 4
48136: PUSH
48137: CALL_OW 44
48141: ST_TO_ADDR
// PlaceHumanInUnit ( New_Person , GetUnitNumber ( 175 , 81 ) ) ;
48142: LD_VAR 0 4
48146: PPUSH
48147: LD_INT 175
48149: PPUSH
48150: LD_INT 81
48152: PPUSH
48153: CALL_OW 438
48157: PPUSH
48158: CALL_OW 52
// AddComExitBuilding ( New_Person ) ;
48162: LD_VAR 0 4
48166: PPUSH
48167: CALL_OW 182
// Behemot_Engineers = Behemot_Engineers ^ New_Person ;
48171: LD_ADDR_EXP 127
48175: PUSH
48176: LD_EXP 127
48180: PUSH
48181: LD_VAR 0 4
48185: ADD
48186: ST_TO_ADDR
// WaitTask ( New_Person , 0.2 ) ;
48187: LD_VAR 0 4
48191: PPUSH
48192: LD_REAL  2.00000000000000E-0001
48195: PPUSH
48196: CALL 17876 0 2
// end ;
48200: GO 48117
48202: POP
48203: POP
// SetSkill ( Behemot_Engineers , skill_engineering , Human_difficulty_skill ) ;
48204: LD_EXP 127
48208: PPUSH
48209: LD_INT 2
48211: PPUSH
48212: LD_EXP 184
48216: PPUSH
48217: CALL_OW 237
// i = 1 ;
48221: LD_ADDR_VAR 0 2
48225: PUSH
48226: LD_INT 1
48228: ST_TO_ADDR
// for Un in Behemot_Engineers do
48229: LD_ADDR_VAR 0 3
48233: PUSH
48234: LD_EXP 127
48238: PUSH
48239: FOR_IN
48240: IFFALSE 48303
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48242: LD_VAR 0 3
48246: PPUSH
48247: LD_INT 37
48249: PPUSH
48250: LD_EXP 224
48254: PUSH
48255: LD_VAR 0 2
48259: ARRAY
48260: PUSH
48261: LD_INT 1
48263: ARRAY
48264: PPUSH
48265: LD_EXP 224
48269: PUSH
48270: LD_VAR 0 2
48274: ARRAY
48275: PUSH
48276: LD_INT 2
48278: ARRAY
48279: PPUSH
48280: LD_INT 5
48282: PPUSH
48283: CALL_OW 170
// i = i + 1 ;
48287: LD_ADDR_VAR 0 2
48291: PUSH
48292: LD_VAR 0 2
48296: PUSH
48297: LD_INT 1
48299: PLUS
48300: ST_TO_ADDR
// end ;
48301: GO 48239
48303: POP
48304: POP
// end ;
48305: LD_VAR 0 1
48309: RET
// export function BehemotsAttack ; var i , Un ; begin
48310: LD_INT 0
48312: PPUSH
48313: PPUSH
48314: PPUSH
// while tick < Behemot_attack_time do
48315: LD_OWVAR 1
48319: PUSH
48320: LD_EXP 225
48324: LESS
48325: IFFALSE 48336
// Wait ( 0 0$2 ) ;
48327: LD_INT 70
48329: PPUSH
48330: CALL_OW 67
48334: GO 48315
// AddMcUnits ( Russian_att_id , New_Behemots ) ;
48336: LD_EXP 242
48340: PPUSH
48341: LD_EXP 129
48345: PPUSH
48346: CALL_OW 390
// New_Behemots = [ ] ;
48350: LD_ADDR_EXP 129
48354: PUSH
48355: EMPTY
48356: ST_TO_ADDR
// i = 1 ;
48357: LD_ADDR_VAR 0 2
48361: PUSH
48362: LD_INT 1
48364: ST_TO_ADDR
// for Un in Behemot_Engineers do
48365: LD_ADDR_VAR 0 3
48369: PUSH
48370: LD_EXP 127
48374: PUSH
48375: FOR_IN
48376: IFFALSE 48439
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48378: LD_VAR 0 3
48382: PPUSH
48383: LD_INT 37
48385: PPUSH
48386: LD_EXP 224
48390: PUSH
48391: LD_VAR 0 2
48395: ARRAY
48396: PUSH
48397: LD_INT 1
48399: ARRAY
48400: PPUSH
48401: LD_EXP 224
48405: PUSH
48406: LD_VAR 0 2
48410: ARRAY
48411: PUSH
48412: LD_INT 2
48414: ARRAY
48415: PPUSH
48416: LD_INT 5
48418: PPUSH
48419: CALL_OW 170
// i = i + 1 ;
48423: LD_ADDR_VAR 0 2
48427: PUSH
48428: LD_VAR 0 2
48432: PUSH
48433: LD_INT 1
48435: PLUS
48436: ST_TO_ADDR
// end ;
48437: GO 48375
48439: POP
48440: POP
// i = 1 ;
48441: LD_ADDR_VAR 0 2
48445: PUSH
48446: LD_INT 1
48448: ST_TO_ADDR
// for Un in Behemot_Engineers do
48449: LD_ADDR_VAR 0 3
48453: PUSH
48454: LD_EXP 127
48458: PUSH
48459: FOR_IN
48460: IFFALSE 48589
// begin while IsOk ( Un ) and not ( GetBType ( GetUnitNumber ( Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] ) ) = b_behemoth ) do
48462: LD_VAR 0 3
48466: PPUSH
48467: CALL_OW 302
48471: PUSH
48472: LD_EXP 224
48476: PUSH
48477: LD_VAR 0 2
48481: ARRAY
48482: PUSH
48483: LD_INT 1
48485: ARRAY
48486: PPUSH
48487: LD_EXP 224
48491: PUSH
48492: LD_VAR 0 2
48496: ARRAY
48497: PUSH
48498: LD_INT 2
48500: ARRAY
48501: PPUSH
48502: CALL_OW 438
48506: PPUSH
48507: CALL_OW 266
48511: PUSH
48512: LD_INT 37
48514: EQUAL
48515: NOT
48516: AND
48517: IFFALSE 48573
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48519: LD_VAR 0 3
48523: PPUSH
48524: LD_INT 37
48526: PPUSH
48527: LD_EXP 224
48531: PUSH
48532: LD_VAR 0 2
48536: ARRAY
48537: PUSH
48538: LD_INT 1
48540: ARRAY
48541: PPUSH
48542: LD_EXP 224
48546: PUSH
48547: LD_VAR 0 2
48551: ARRAY
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: PPUSH
48557: LD_INT 5
48559: PPUSH
48560: CALL_OW 170
// Wait ( 0 0$0.5 ) ;
48564: LD_INT 18
48566: PPUSH
48567: CALL_OW 67
// end ;
48571: GO 48462
// i = i + 1 ;
48573: LD_ADDR_VAR 0 2
48577: PUSH
48578: LD_VAR 0 2
48582: PUSH
48583: LD_INT 1
48585: PLUS
48586: ST_TO_ADDR
// end ;
48587: GO 48459
48589: POP
48590: POP
// end ;
48591: LD_VAR 0 1
48595: RET
// every 0 0$2 trigger Russian_Behemots <> 0 do var Un ;
48596: LD_EXP 128
48600: PUSH
48601: LD_INT 0
48603: NONEQUAL
48604: IFFALSE 48712
48606: GO 48608
48608: DISABLE
48609: LD_INT 0
48611: PPUSH
// begin for Un in Russian_Behemots do
48612: LD_ADDR_VAR 0 1
48616: PUSH
48617: LD_EXP 128
48621: PUSH
48622: FOR_IN
48623: IFFALSE 48709
// if See ( americans , Un ) then
48625: LD_EXP 176
48629: PPUSH
48630: LD_VAR 0 1
48634: PPUSH
48635: CALL_OW 292
48639: IFFALSE 48707
// begin if IsInArea ( Un , Plan6 ) then
48641: LD_VAR 0 1
48645: PPUSH
48646: LD_INT 34
48648: PPUSH
48649: CALL_OW 308
48653: IFFALSE 48682
// begin CenterOnUnits ( Un ) ;
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 85
// Say ( JMM , D17a-JMM-1 ) ;
48664: LD_EXP 1
48668: PPUSH
48669: LD_STRING D17a-JMM-1
48671: PPUSH
48672: CALL_OW 88
// exit ;
48676: POP
48677: POP
48678: GO 48712
// end else
48680: GO 48707
// begin CenterOnUnits ( Un ) ;
48682: LD_VAR 0 1
48686: PPUSH
48687: CALL_OW 85
// Say ( JMM , D17b-JMM-1 ) ;
48691: LD_EXP 1
48695: PPUSH
48696: LD_STRING D17b-JMM-1
48698: PPUSH
48699: CALL_OW 88
// exit ;
48703: POP
48704: POP
48705: GO 48712
// end ; end ;
48707: GO 48622
48709: POP
48710: POP
// enable ;
48711: ENABLE
// end ;
48712: PPOPN 1
48714: END
// every 0 0$10 trigger ( not ( Russian_Siberite_Attack ) or not ( The_Last_Arabian_Attack_Begun ) ) do var Teleport1 , Teleport2 , Un , i , hex , sib_r , rus_remaind ;
48715: LD_EXP 215
48719: NOT
48720: PUSH
48721: LD_EXP 227
48725: NOT
48726: OR
48727: IFFALSE 48952
48729: GO 48731
48731: DISABLE
48732: LD_INT 0
48734: PPUSH
48735: PPUSH
48736: PPUSH
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
// begin rus_remaind = UnitFilter ( All_Russians , [ f_ok ] ) ;
48741: LD_ADDR_VAR 0 7
48745: PUSH
48746: LD_EXP 111
48750: PPUSH
48751: LD_INT 50
48753: PUSH
48754: EMPTY
48755: LIST
48756: PPUSH
48757: CALL_OW 72
48761: ST_TO_ADDR
// if ( rus_remaind < 3 ) and not ( The_Last_Arabian_Attack_Begun ) then
48762: LD_VAR 0 7
48766: PUSH
48767: LD_INT 3
48769: LESS
48770: PUSH
48771: LD_EXP 227
48775: NOT
48776: AND
48777: IFFALSE 48791
// begin The_Last_Arabian_Attack_Begun = true ;
48779: LD_ADDR_EXP 227
48783: PUSH
48784: LD_INT 1
48786: ST_TO_ADDR
// TheLastArabianAttack ;
48787: CALL 50194 0 0
// end ; if ( rus_remaind < 10 ) and not ( Russian_Siberite_Attack ) then
48791: LD_VAR 0 7
48795: PUSH
48796: LD_INT 10
48798: LESS
48799: PUSH
48800: LD_EXP 215
48804: NOT
48805: AND
48806: IFFALSE 48937
// begin if ( FilterUnitsInArea ( R_base , [ [ f_side , americans ] , [ f_ok ] ] ) <> 0 ) then
48808: LD_INT 36
48810: PPUSH
48811: LD_INT 22
48813: PUSH
48814: LD_EXP 176
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 50
48825: PUSH
48826: EMPTY
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PPUSH
48833: CALL_OW 70
48837: PUSH
48838: LD_INT 0
48840: NONEQUAL
48841: IFFALSE 48937
// begin sib_r = FilterAllUnits ( [ [ f_side , Russians ] , [ f_ok ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
48843: LD_ADDR_VAR 0 6
48847: PUSH
48848: LD_INT 22
48850: PUSH
48851: LD_EXP 178
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 50
48862: PUSH
48863: EMPTY
48864: LIST
48865: PUSH
48866: LD_INT 34
48868: PUSH
48869: LD_INT 48
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: PPUSH
48881: CALL_OW 69
48885: ST_TO_ADDR
// if ( sib_r <> 0 ) and not ( Russian_Siberite_Attack ) then
48886: LD_VAR 0 6
48890: PUSH
48891: LD_INT 0
48893: NONEQUAL
48894: PUSH
48895: LD_EXP 215
48899: NOT
48900: AND
48901: IFFALSE 48937
// begin Russian_Siberite_Attack = true ;
48903: LD_ADDR_EXP 215
48907: PUSH
48908: LD_INT 1
48910: ST_TO_ADDR
// for Un in sib_r do
48911: LD_ADDR_VAR 0 3
48915: PUSH
48916: LD_VAR 0 6
48920: PUSH
48921: FOR_IN
48922: IFFALSE 48935
// RSiberiteAttack ( Un ) ;
48924: LD_VAR 0 3
48928: PPUSH
48929: CALL 18519 0 1
48933: GO 48921
48935: POP
48936: POP
// end ; end ; end ; if not ( Russian_Siberite_Attack ) or not ( The_Last_Arabian_Attack_Begun ) then
48937: LD_EXP 215
48941: NOT
48942: PUSH
48943: LD_EXP 227
48947: NOT
48948: OR
48949: IFFALSE 48952
// enable ;
48951: ENABLE
// end ; end_of_file
48952: PPOPN 7
48954: END
// function PlaceAttackingUnits ; var Un ; begin
48955: LD_INT 0
48957: PPUSH
48958: PPUSH
// for Un in Omar_vehicles do
48959: LD_ADDR_VAR 0 2
48963: PUSH
48964: LD_EXP 74
48968: PUSH
48969: FOR_IN
48970: IFFALSE 48989
// PlaceUnitArea ( Un , ArStart1 , false ) ;
48972: LD_VAR 0 2
48976: PPUSH
48977: LD_INT 38
48979: PPUSH
48980: LD_INT 0
48982: PPUSH
48983: CALL_OW 49
48987: GO 48969
48989: POP
48990: POP
// PlaceUnitArea ( Masto , ArStart , false ) ;
48991: LD_INT 147
48993: PPUSH
48994: LD_INT 37
48996: PPUSH
48997: LD_INT 0
48999: PPUSH
49000: CALL_OW 49
// PlaceUnitArea ( Heike , ArStart , false ) ;
49004: LD_EXP 29
49008: PPUSH
49009: LD_INT 37
49011: PPUSH
49012: LD_INT 0
49014: PPUSH
49015: CALL_OW 49
// for Un in Omar_Soldiers do
49019: LD_ADDR_VAR 0 2
49023: PUSH
49024: LD_EXP 72
49028: PUSH
49029: FOR_IN
49030: IFFALSE 49049
// PlaceUnitArea ( Un , ArStart , false ) ;
49032: LD_VAR 0 2
49036: PPUSH
49037: LD_INT 37
49039: PPUSH
49040: LD_INT 0
49042: PPUSH
49043: CALL_OW 49
49047: GO 49029
49049: POP
49050: POP
// for Un in Omar_Scientists do
49051: LD_ADDR_VAR 0 2
49055: PUSH
49056: LD_EXP 73
49060: PUSH
49061: FOR_IN
49062: IFFALSE 49081
// PlaceUnitArea ( Un , ArStart , false ) ;
49064: LD_VAR 0 2
49068: PPUSH
49069: LD_INT 37
49071: PPUSH
49072: LD_INT 0
49074: PPUSH
49075: CALL_OW 49
49079: GO 49061
49081: POP
49082: POP
// end ;
49083: LD_VAR 0 1
49087: RET
// function JMM_warns ; var Remaining_americans , Remaining_unnamed_males , sold ; begin
49088: LD_INT 0
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
// placeseeing ( 157 , 7 , americans , - 15 ) ;
49094: LD_INT 157
49096: PPUSH
49097: LD_INT 7
49099: PPUSH
49100: LD_EXP 176
49104: PPUSH
49105: LD_INT 15
49107: NEG
49108: PPUSH
49109: CALL_OW 330
// placeseeing ( 165 , 21 , americans , - 15 ) ;
49113: LD_INT 165
49115: PPUSH
49116: LD_INT 21
49118: PPUSH
49119: LD_EXP 176
49123: PPUSH
49124: LD_INT 15
49126: NEG
49127: PPUSH
49128: CALL_OW 330
// CenterNowOnUnits ( [ Omar , Heike ] ) ;
49132: LD_EXP 28
49136: PUSH
49137: LD_EXP 29
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PPUSH
49146: CALL_OW 87
// Wait ( 0 0$0.5 ) ;
49150: LD_INT 18
49152: PPUSH
49153: CALL_OW 67
// Remaining_americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_sex , sex_male ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) diff JMM ;
49157: LD_ADDR_VAR 0 2
49161: PUSH
49162: LD_INT 22
49164: PUSH
49165: LD_EXP 176
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 26
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 3
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 25
49192: PUSH
49193: LD_INT 12
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 25
49202: PUSH
49203: LD_INT 16
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 25
49212: PUSH
49213: LD_INT 17
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 25
49222: PUSH
49223: LD_INT 15
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 25
49232: PUSH
49233: LD_INT 17
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: PUSH
49248: EMPTY
49249: LIST
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: PPUSH
49257: CALL_OW 69
49261: PUSH
49262: LD_EXP 1
49266: DIFF
49267: ST_TO_ADDR
// Remaining_unnamed_males = Remaining_americans diff [ JMM , Powell , Bobby , Cyrus , Lisa , Frank , Brown , Donaldson , Gladstone , Cornell , Denis , Joan , Kurt , Yamoko , Gary , Simms , Stevens , Coonie , Friend ] ;
49268: LD_ADDR_VAR 0 3
49272: PUSH
49273: LD_VAR 0 2
49277: PUSH
49278: LD_EXP 1
49282: PUSH
49283: LD_EXP 2
49287: PUSH
49288: LD_EXP 3
49292: PUSH
49293: LD_EXP 4
49297: PUSH
49298: LD_EXP 5
49302: PUSH
49303: LD_EXP 6
49307: PUSH
49308: LD_EXP 7
49312: PUSH
49313: LD_EXP 8
49317: PUSH
49318: LD_EXP 9
49322: PUSH
49323: LD_EXP 10
49327: PUSH
49328: LD_EXP 11
49332: PUSH
49333: LD_EXP 12
49337: PUSH
49338: LD_EXP 13
49342: PUSH
49343: LD_EXP 14
49347: PUSH
49348: LD_EXP 15
49352: PUSH
49353: LD_EXP 16
49357: PUSH
49358: LD_EXP 17
49362: PUSH
49363: LD_EXP 18
49367: PUSH
49368: LD_EXP 21
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: DIFF
49394: ST_TO_ADDR
// Sold = 0 ;
49395: LD_ADDR_VAR 0 4
49399: PUSH
49400: LD_INT 0
49402: ST_TO_ADDR
// if Remaining_unnamed_males <> 0 then
49403: LD_VAR 0 3
49407: PUSH
49408: LD_INT 0
49410: NONEQUAL
49411: IFFALSE 49439
// Sold = Remaining_unnamed_males [ Rand ( 1 , Remaining_unnamed_males ) ] else
49413: LD_ADDR_VAR 0 4
49417: PUSH
49418: LD_VAR 0 3
49422: PUSH
49423: LD_INT 1
49425: PPUSH
49426: LD_VAR 0 3
49430: PPUSH
49431: CALL_OW 12
49435: ARRAY
49436: ST_TO_ADDR
49437: GO 49473
// if Sold <> 0 then
49439: LD_VAR 0 4
49443: PUSH
49444: LD_INT 0
49446: NONEQUAL
49447: IFFALSE 49473
// Sold = Remaining_americans [ Rand ( 1 , Remaining_americans ) ] ;
49449: LD_ADDR_VAR 0 4
49453: PUSH
49454: LD_VAR 0 2
49458: PUSH
49459: LD_INT 1
49461: PPUSH
49462: LD_VAR 0 2
49466: PPUSH
49467: CALL_OW 12
49471: ARRAY
49472: ST_TO_ADDR
// DialogueON ;
49473: CALL_OW 6
// Say ( JMM , D19-JMM-1 ) ;
49477: LD_EXP 1
49481: PPUSH
49482: LD_STRING D19-JMM-1
49484: PPUSH
49485: CALL_OW 88
// Say ( Sold , D19-Sol1-1 ) ;
49489: LD_VAR 0 4
49493: PPUSH
49494: LD_STRING D19-Sol1-1
49496: PPUSH
49497: CALL_OW 88
// Say ( JMM , D19-JMM-2 ) ;
49501: LD_EXP 1
49505: PPUSH
49506: LD_STRING D19-JMM-2
49508: PPUSH
49509: CALL_OW 88
// DialogueOFF ;
49513: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
49517: LD_STRING M5
49519: PPUSH
49520: CALL_OW 337
// end ;
49524: LD_VAR 0 1
49528: RET
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
49529: LD_INT 0
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
49536: LD_ADDR_VAR 0 2
49540: PUSH
49541: LD_INT 168
49543: PUSH
49544: LD_INT 18
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 169
49553: PUSH
49554: LD_INT 20
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 167
49563: PUSH
49564: LD_INT 20
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 164
49573: PUSH
49574: LD_INT 18
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 164
49583: PUSH
49584: LD_INT 19
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 163
49593: PUSH
49594: LD_INT 19
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 164
49603: PUSH
49604: LD_INT 21
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 165
49613: PUSH
49614: LD_INT 21
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 163
49623: PUSH
49624: LD_INT 20
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 164
49633: PUSH
49634: LD_INT 22
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 162
49643: PUSH
49644: LD_INT 20
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
49664: LD_ADDR_VAR 0 3
49668: PUSH
49669: LD_INT 169
49671: PUSH
49672: LD_INT 34
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 169
49681: PUSH
49682: LD_INT 35
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 167
49691: PUSH
49692: LD_INT 32
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 170
49701: PUSH
49702: LD_INT 31
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 173
49711: PUSH
49712: LD_INT 35
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 174
49721: PUSH
49722: LD_INT 39
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: ST_TO_ADDR
// for i = 1 to mines_pos do
49737: LD_ADDR_VAR 0 4
49741: PUSH
49742: DOUBLE
49743: LD_INT 1
49745: DEC
49746: ST_TO_ADDR
49747: LD_VAR 0 2
49751: PUSH
49752: FOR_TO
49753: IFFALSE 49965
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
49755: LD_VAR 0 2
49759: PUSH
49760: LD_VAR 0 4
49764: ARRAY
49765: PUSH
49766: LD_INT 1
49768: ARRAY
49769: PPUSH
49770: LD_VAR 0 2
49774: PUSH
49775: LD_VAR 0 4
49779: ARRAY
49780: PUSH
49781: LD_INT 2
49783: ARRAY
49784: PPUSH
49785: LD_INT 1
49787: PPUSH
49788: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
49792: LD_INT 1
49794: PPUSH
49795: LD_INT 3
49797: PPUSH
49798: CALL_OW 12
49802: PPUSH
49803: CALL_OW 67
// if i < mines_pos then
49807: LD_VAR 0 4
49811: PUSH
49812: LD_VAR 0 2
49816: LESS
49817: IFFALSE 49855
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
49819: LD_VAR 0 2
49823: PUSH
49824: LD_VAR 0 4
49828: ARRAY
49829: PUSH
49830: LD_INT 1
49832: ARRAY
49833: PPUSH
49834: LD_VAR 0 2
49838: PUSH
49839: LD_VAR 0 4
49843: ARRAY
49844: PUSH
49845: LD_INT 2
49847: ARRAY
49848: PPUSH
49849: CALL_OW 348
49853: GO 49963
// begin for j = 1 to mines_pos1 do
49855: LD_ADDR_VAR 0 5
49859: PUSH
49860: DOUBLE
49861: LD_INT 1
49863: DEC
49864: ST_TO_ADDR
49865: LD_VAR 0 3
49869: PUSH
49870: FOR_TO
49871: IFFALSE 49927
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
49873: LD_VAR 0 3
49877: PUSH
49878: LD_VAR 0 5
49882: ARRAY
49883: PUSH
49884: LD_INT 1
49886: ARRAY
49887: PPUSH
49888: LD_VAR 0 3
49892: PUSH
49893: LD_VAR 0 5
49897: ARRAY
49898: PUSH
49899: LD_INT 2
49901: ARRAY
49902: PPUSH
49903: LD_INT 1
49905: PPUSH
49906: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
49910: LD_INT 1
49912: PPUSH
49913: LD_INT 3
49915: PPUSH
49916: CALL_OW 12
49920: PPUSH
49921: CALL_OW 67
// end ;
49925: GO 49870
49927: POP
49928: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
49929: LD_VAR 0 2
49933: PUSH
49934: LD_VAR 0 4
49938: ARRAY
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PPUSH
49944: LD_VAR 0 2
49948: PUSH
49949: LD_VAR 0 4
49953: ARRAY
49954: PUSH
49955: LD_INT 2
49957: ARRAY
49958: PPUSH
49959: CALL_OW 347
// end ; end ;
49963: GO 49752
49965: POP
49966: POP
// end ;
49967: LD_VAR 0 1
49971: RET
// function StartTheAttack ; begin
49972: LD_INT 0
49974: PPUSH
// ComMoveXY ( Omar_vehicles ^ Masto , 184 , 82 ) ;
49975: LD_EXP 74
49979: PUSH
49980: LD_INT 147
49982: ADD
49983: PPUSH
49984: LD_INT 184
49986: PPUSH
49987: LD_INT 82
49989: PPUSH
49990: CALL_OW 111
// Wait ( 0 0$3 ) ;
49994: LD_INT 105
49996: PPUSH
49997: CALL_OW 67
// McMove ( 100 , Heike ^ Omar_Soldiers , [ [ 184 , 82 ] ] , mc_no_stop ) ;
50001: LD_INT 100
50003: PPUSH
50004: LD_EXP 29
50008: PUSH
50009: LD_EXP 72
50013: ADD
50014: PPUSH
50015: LD_INT 184
50017: PUSH
50018: LD_INT 82
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: EMPTY
50026: LIST
50027: PPUSH
50028: LD_INT 10
50030: PPUSH
50031: CALL_OW 398
// Wait ( 0 0$5 ) ;
50035: LD_INT 175
50037: PPUSH
50038: CALL_OW 67
// ComContaminate ( Omar_Scientists , 177 , 69 ) ;
50042: LD_EXP 73
50046: PPUSH
50047: LD_INT 177
50049: PPUSH
50050: LD_INT 69
50052: PPUSH
50053: CALL_OW 158
// end ;
50057: LD_VAR 0 1
50061: RET
// export function HeikeLastWords ; begin
50062: LD_INT 0
50064: PPUSH
// if IsDead ( Omar ) and ( Heike_Last_Words = false ) then
50065: LD_EXP 28
50069: PPUSH
50070: CALL_OW 301
50074: PUSH
50075: LD_EXP 232
50079: PUSH
50080: LD_INT 0
50082: EQUAL
50083: AND
50084: IFFALSE 50129
// begin Heike_Last_Words = true ;
50086: LD_ADDR_EXP 232
50090: PUSH
50091: LD_INT 1
50093: ST_TO_ADDR
// Say ( JMM , D19a-JMM-1 ) ;
50094: LD_EXP 1
50098: PPUSH
50099: LD_STRING D19a-JMM-1
50101: PPUSH
50102: CALL_OW 88
// if IsOk ( Heike ) then
50106: LD_EXP 29
50110: PPUSH
50111: CALL_OW 302
50115: IFFALSE 50129
// Say ( Heike , D19a-Hke-1 ) ;
50117: LD_EXP 29
50121: PPUSH
50122: LD_STRING D19a-Hke-1
50124: PPUSH
50125: CALL_OW 88
// end end ;
50129: LD_VAR 0 1
50133: RET
// export function TestForEndOfMission ; var Last_enemies ; begin
50134: LD_INT 0
50136: PPUSH
50137: PPUSH
// Last_enemies = FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , arabians1 ] ] ) ;
50138: LD_ADDR_VAR 0 2
50142: PUSH
50143: LD_INT 21
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 22
50155: PUSH
50156: LD_EXP 181
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PPUSH
50169: CALL_OW 69
50173: ST_TO_ADDR
// if Last_enemies = 0 then
50174: LD_VAR 0 2
50178: PUSH
50179: LD_INT 0
50181: EQUAL
50182: IFFALSE 50189
// enable ( End_of_m ) ;
50184: LD_EXP 158
50188: ENABLE_MARKED
// end ;
50189: LD_VAR 0 1
50193: RET
// export function TheLastArabianAttack ; begin
50194: LD_INT 0
50196: PPUSH
// Wait ( 0 0$10 ) ;
50197: LD_INT 350
50199: PPUSH
50200: CALL_OW 67
// PlaceAttackingUnits ;
50204: CALL 48955 0 0
// JMM_warns ;
50208: CALL 49088 0 0
// LaunchMines ;
50212: CALL 49529 0 0
// StartTheAttack ;
50216: CALL 49972 0 0
// end ; end_of_file
50220: LD_VAR 0 1
50224: RET
// export function StartAllianceBase ; var i , Bunkers , Turrets , units_to_protect ; begin
50225: LD_INT 0
50227: PPUSH
50228: PPUSH
50229: PPUSH
50230: PPUSH
50231: PPUSH
// SetResourceType ( GetBase ( AllDep ) , mat_siberit , 200 ) ;
50232: LD_INT 45
50234: PPUSH
50235: CALL_OW 274
50239: PPUSH
50240: LD_INT 3
50242: PPUSH
50243: LD_INT 200
50245: PPUSH
50246: CALL_OW 277
// SetResourceType ( GetBase ( AllDep ) , mat_cans , 400 ) ;
50250: LD_INT 45
50252: PPUSH
50253: CALL_OW 274
50257: PPUSH
50258: LD_INT 1
50260: PPUSH
50261: LD_INT 400
50263: PPUSH
50264: CALL_OW 277
// Alliance_Doctors = Alliance_am_scientists [ 1 ] ;
50268: LD_ADDR_EXP 102
50272: PUSH
50273: LD_EXP 97
50277: PUSH
50278: LD_INT 1
50280: ARRAY
50281: ST_TO_ADDR
// Alliance_am_scientists = Alliance_am_scientists diff Alliance_am_scientists [ 1 ] ;
50282: LD_ADDR_EXP 97
50286: PUSH
50287: LD_EXP 97
50291: PUSH
50292: LD_EXP 97
50296: PUSH
50297: LD_INT 1
50299: ARRAY
50300: DIFF
50301: ST_TO_ADDR
// ComEnterUnit ( Alliance_am_scientists , AllLabA ) ;
50302: LD_EXP 97
50306: PPUSH
50307: LD_INT 46
50309: PPUSH
50310: CALL_OW 120
// Alliance_Doctors = Alliance_rus_scientists [ 1 ] ;
50314: LD_ADDR_EXP 102
50318: PUSH
50319: LD_EXP 96
50323: PUSH
50324: LD_INT 1
50326: ARRAY
50327: ST_TO_ADDR
// Alliance_rus_scientists = Alliance_rus_scientists diff Alliance_rus_scientists [ 1 ] ;
50328: LD_ADDR_EXP 96
50332: PUSH
50333: LD_EXP 96
50337: PUSH
50338: LD_EXP 96
50342: PUSH
50343: LD_INT 1
50345: ARRAY
50346: DIFF
50347: ST_TO_ADDR
// ComEnterUnit ( Alliance_rus_scientists , AllLabR1 ) ;
50348: LD_EXP 96
50352: PPUSH
50353: LD_INT 39
50355: PPUSH
50356: CALL_OW 120
// ComResearch ( AllLabA , tech_Comp1 ) ;
50360: LD_INT 46
50362: PPUSH
50363: LD_INT 57
50365: PPUSH
50366: CALL_OW 124
// AddComResearch ( AllLabA , tech_Opto1 ) ;
50370: LD_INT 46
50372: PPUSH
50373: LD_INT 60
50375: PPUSH
50376: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib1 ) ;
50380: LD_INT 46
50382: PPUSH
50383: LD_INT 54
50385: PPUSH
50386: CALL_OW 184
// AddComResearch ( AllLabA , tech_Opto2 ) ;
50390: LD_INT 46
50392: PPUSH
50393: LD_INT 61
50395: PPUSH
50396: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib2 ) ;
50400: LD_INT 46
50402: PPUSH
50403: LD_INT 55
50405: PPUSH
50406: CALL_OW 184
// AddComResearch ( AllLabA , tech_Opto3 ) ;
50410: LD_INT 46
50412: PPUSH
50413: LD_INT 62
50415: PPUSH
50416: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib3 ) ;
50420: LD_INT 46
50422: PPUSH
50423: LD_INT 56
50425: PPUSH
50426: CALL_OW 184
// ComResearch ( AllLabR1 , tech_ST1 ) ;
50430: LD_INT 39
50432: PPUSH
50433: LD_INT 63
50435: PPUSH
50436: CALL_OW 124
// AddComResearch ( AllLabR1 , tech_ST2 ) ;
50440: LD_INT 39
50442: PPUSH
50443: LD_INT 64
50445: PPUSH
50446: CALL_OW 184
// AddComResearch ( AllLabR1 , tech_ST3 ) ;
50450: LD_INT 39
50452: PPUSH
50453: LD_INT 65
50455: PPUSH
50456: CALL_OW 184
// ComResearch ( AllLabR2 , tech_Comp1 ) ;
50460: LD_INT 133
50462: PPUSH
50463: LD_INT 57
50465: PPUSH
50466: CALL_OW 124
// AddComResearch ( AllLabR2 , tech_Weap1 ) ;
50470: LD_INT 133
50472: PPUSH
50473: LD_INT 51
50475: PPUSH
50476: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Comp2 ) ;
50480: LD_INT 133
50482: PPUSH
50483: LD_INT 58
50485: PPUSH
50486: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Weap2 ) ;
50490: LD_INT 133
50492: PPUSH
50493: LD_INT 52
50495: PPUSH
50496: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Comp3 ) ;
50500: LD_INT 133
50502: PPUSH
50503: LD_INT 59
50505: PPUSH
50506: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Weap3 ) ;
50510: LD_INT 133
50512: PPUSH
50513: LD_INT 53
50515: PPUSH
50516: CALL_OW 184
// ComEnterUnit ( Alliance_am_soldiers , AllBarrA ) ;
50520: LD_EXP 95
50524: PPUSH
50525: LD_INT 41
50527: PPUSH
50528: CALL_OW 120
// ComEnterUnit ( Alliance_rus_soldiers , AllBarrR ) ;
50532: LD_EXP 94
50536: PPUSH
50537: LD_INT 48
50539: PPUSH
50540: CALL_OW 120
// Bunkers = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
50544: LD_ADDR_VAR 0 3
50548: PUSH
50549: LD_INT 22
50551: PUSH
50552: LD_EXP 182
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 21
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 30
50573: PUSH
50574: LD_INT 32
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: PPUSH
50586: CALL_OW 69
50590: ST_TO_ADDR
// Turrets = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_building ] , [ f_btype , b_turret ] ] ) ;
50591: LD_ADDR_VAR 0 4
50595: PUSH
50596: LD_INT 22
50598: PUSH
50599: LD_EXP 182
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 21
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 30
50620: PUSH
50621: LD_INT 33
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: PPUSH
50633: CALL_OW 69
50637: ST_TO_ADDR
// units_to_protect = Bunkers ^ Turrets ^ AllBarrA ^ AllBarrR ;
50638: LD_ADDR_VAR 0 5
50642: PUSH
50643: LD_VAR 0 3
50647: PUSH
50648: LD_VAR 0 4
50652: ADD
50653: PUSH
50654: LD_INT 41
50656: ADD
50657: PUSH
50658: LD_INT 48
50660: ADD
50661: ST_TO_ADDR
// Alliance_reg_id = McRegistry ( alliance , [ [ mc_reg_area_to_guard , Al_Base ] , [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_protect , Al_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
50662: LD_ADDR_EXP 247
50666: PUSH
50667: LD_EXP 182
50671: PPUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 18
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 70
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: LD_INT 18
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 4
50704: PUSH
50705: LD_VAR 0 5
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 8
50716: NEG
50717: PUSH
50718: LD_INT 7
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: PPUSH
50730: CALL_OW 399
50734: ST_TO_ADDR
// Alliance_wood_reg_id = McRegistry ( alliance , [ [ mc_reg_area_to_guard , Ali_wood ] , [ mc_reg_refresh_time , 0 0$5 ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
50735: LD_ADDR_EXP 249
50739: PUSH
50740: LD_EXP 182
50744: PPUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 9
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 175
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 8
50767: NEG
50768: PUSH
50769: LD_INT 7
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: PPUSH
50779: CALL_OW 399
50783: ST_TO_ADDR
// McDefend ( 100 , Alliance_reg_id , Alliance_am_soldiers ^ Alliance_rus_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Al_Base ] , [ mc_retreat_area_people , Al_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
50784: LD_INT 100
50786: PPUSH
50787: LD_EXP 247
50791: PPUSH
50792: LD_EXP 95
50796: PUSH
50797: LD_EXP 94
50801: ADD
50802: PUSH
50803: LD_VAR 0 5
50807: ADD
50808: PPUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 18
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 7
50821: PUSH
50822: LD_INT 28
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 5
50831: PUSH
50832: LD_INT 550
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: PPUSH
50844: CALL_OW 401
// end ;
50848: LD_VAR 0 1
50852: RET
// export function AlliancePersonIsDead ; begin
50853: LD_INT 0
50855: PPUSH
// if FilterAllUnits ( [ [ f_side , alliance ] , [ f_alive ] , [ f_type , unit_human ] ] ) = 0 then
50856: LD_INT 22
50858: PUSH
50859: LD_EXP 182
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 51
50870: PUSH
50871: EMPTY
50872: LIST
50873: PUSH
50874: LD_INT 21
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: PPUSH
50889: CALL_OW 69
50893: PUSH
50894: LD_INT 0
50896: EQUAL
50897: IFFALSE 50931
// begin KillMc ( Alliance_reg_id ) ;
50899: LD_EXP 247
50903: PPUSH
50904: CALL_OW 387
// KillMc ( Alliance_def_id ) ;
50908: LD_EXP 248
50912: PPUSH
50913: CALL_OW 387
// KillMc ( Alliance_wood_reg_id ) ;
50917: LD_EXP 249
50921: PPUSH
50922: CALL_OW 387
// disable ( Not_end_of_alliance ) ;
50926: LD_EXP 154
50930: DISABLE_MARKED
// end ; end ;
50931: LD_VAR 0 1
50935: RET
// export function AllianceBuildingInRed ; var All_Alliance_Units , Un ; begin
50936: LD_INT 0
50938: PPUSH
50939: PPUSH
50940: PPUSH
// if not ( IsOk ( AllDep ) ) or GetSide ( AllDep ) <> alliance or not ( IsOk ( AllLabA ) ) or GetSide ( AllLabA ) <> alliance then
50941: LD_INT 45
50943: PPUSH
50944: CALL_OW 302
50948: NOT
50949: PUSH
50950: LD_INT 45
50952: PPUSH
50953: CALL_OW 255
50957: PUSH
50958: LD_EXP 182
50962: NONEQUAL
50963: OR
50964: PUSH
50965: LD_INT 46
50967: PPUSH
50968: CALL_OW 302
50972: NOT
50973: OR
50974: PUSH
50975: LD_INT 46
50977: PPUSH
50978: CALL_OW 255
50982: PUSH
50983: LD_EXP 182
50987: NONEQUAL
50988: OR
50989: IFFALSE 51025
// begin ComStop ( [ Explorer1 , Explorer2 ] ) ;
50991: LD_EXP 100
50995: PUSH
50996: LD_EXP 101
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PPUSH
51005: CALL_OW 141
// Explorer1 = 0 ;
51009: LD_ADDR_EXP 100
51013: PUSH
51014: LD_INT 0
51016: ST_TO_ADDR
// Explorer2 = 0 ;
51017: LD_ADDR_EXP 101
51021: PUSH
51022: LD_INT 0
51024: ST_TO_ADDR
// end ; if ( ( UnitFilter ( Alliance_def_buildings , [ [ f_ok ] , [ f_side , alliance ] ] ) = 0 ) or not ( IsOk ( AllDep ) ) or GetSide ( AllDep ) <> alliance ) then
51025: LD_EXP 207
51029: PPUSH
51030: LD_INT 50
51032: PUSH
51033: EMPTY
51034: LIST
51035: PUSH
51036: LD_INT 22
51038: PUSH
51039: LD_EXP 182
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PPUSH
51052: CALL_OW 72
51056: PUSH
51057: LD_INT 0
51059: EQUAL
51060: PUSH
51061: LD_INT 45
51063: PPUSH
51064: CALL_OW 302
51068: NOT
51069: OR
51070: PUSH
51071: LD_INT 45
51073: PPUSH
51074: CALL_OW 255
51078: PUSH
51079: LD_EXP 182
51083: NONEQUAL
51084: OR
51085: IFFALSE 51724
// begin if IsOk ( Roth ) and GetAttitude ( alliance , americans ) <> att_friend then
51087: LD_EXP 20
51091: PPUSH
51092: CALL_OW 302
51096: PUSH
51097: LD_EXP 182
51101: PPUSH
51102: LD_EXP 176
51106: PPUSH
51107: CALL_OW 81
51111: PUSH
51112: LD_INT 1
51114: NONEQUAL
51115: AND
51116: IFFALSE 51724
// begin disable ( Explorers_Can_Go ) ;
51118: LD_EXP 153
51122: DISABLE_MARKED
// disable ( Not_End_of_Alliance ) ;
51123: LD_EXP 154
51127: DISABLE_MARKED
// SetSide ( FilterAllUnits ( [ f_side , Explorers_Side ] ) , alliance ) ;
51128: LD_INT 22
51130: PUSH
51131: LD_EXP 183
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PPUSH
51140: CALL_OW 69
51144: PPUSH
51145: LD_EXP 182
51149: PPUSH
51150: CALL_OW 235
// KillMc ( Alliance_reg_id ) ;
51154: LD_EXP 247
51158: PPUSH
51159: CALL_OW 387
// KillMc ( Alliance_def_id ) ;
51163: LD_EXP 248
51167: PPUSH
51168: CALL_OW 387
// KillMc ( Alliance_wood_reg_id ) ;
51172: LD_EXP 249
51176: PPUSH
51177: CALL_OW 387
// Roth_Captured = true ;
51181: LD_ADDR_EXP 54
51185: PUSH
51186: LD_INT 1
51188: ST_TO_ADDR
// SetAttitude ( Alliance , Americans , att_friend , true ) ;
51189: LD_EXP 182
51193: PPUSH
51194: LD_EXP 176
51198: PPUSH
51199: LD_INT 1
51201: PPUSH
51202: LD_INT 1
51204: PPUSH
51205: CALL_OW 80
// All_Alliance_Units = FilterAllUnits ( [ f_side , Alliance ] ) ;
51209: LD_ADDR_VAR 0 2
51213: PUSH
51214: LD_INT 22
51216: PUSH
51217: LD_EXP 182
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PPUSH
51226: CALL_OW 69
51230: ST_TO_ADDR
// ComExitBuilding ( All_Alliance_Units ) ;
51231: LD_VAR 0 2
51235: PPUSH
51236: CALL_OW 122
// ComStop ( All_Alliance_Units ) ;
51240: LD_VAR 0 2
51244: PPUSH
51245: CALL_OW 141
// ComStop ( FilterUnitsInArea ( Al_Base , [ f_side , americans ] ) ) ;
51249: LD_INT 18
51251: PPUSH
51252: LD_INT 22
51254: PUSH
51255: LD_EXP 176
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PPUSH
51264: CALL_OW 70
51268: PPUSH
51269: CALL_OW 141
// Wait ( 0 0$1 ) ;
51273: LD_INT 35
51275: PPUSH
51276: CALL_OW 67
// CenterNowOnXY ( 233 , 181 ) ;
51280: LD_INT 233
51282: PPUSH
51283: LD_INT 181
51285: PPUSH
51286: CALL_OW 86
// DialogueON ;
51290: CALL_OW 6
// Say ( JMM , DAb-JMM-1 ) ;
51294: LD_EXP 1
51298: PPUSH
51299: LD_STRING DAb-JMM-1
51301: PPUSH
51302: CALL_OW 88
// if ( True_Americans ^ [ ] ) = 1 then
51306: LD_EXP 70
51310: PUSH
51311: EMPTY
51312: ADD
51313: PUSH
51314: LD_INT 1
51316: EQUAL
51317: IFFALSE 51333
// Say ( JMM , DAb-JMM-1a ) else
51319: LD_EXP 1
51323: PPUSH
51324: LD_STRING DAb-JMM-1a
51326: PPUSH
51327: CALL_OW 88
51331: GO 51355
// if True_Americans > 1 then
51333: LD_EXP 70
51337: PUSH
51338: LD_INT 1
51340: GREATER
51341: IFFALSE 51355
// Say ( JMM , DAb-JMM-1b ) ;
51343: LD_EXP 1
51347: PPUSH
51348: LD_STRING DAb-JMM-1b
51350: PPUSH
51351: CALL_OW 88
// DialogueOFF ;
51355: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
51359: LD_STRING M3a
51361: PPUSH
51362: CALL_OW 337
// Captured_Units_of_Alliance = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
51366: LD_ADDR_EXP 99
51370: PUSH
51371: LD_INT 22
51373: PUSH
51374: LD_EXP 182
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 21
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 51
51395: PUSH
51396: EMPTY
51397: LIST
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: PPUSH
51404: CALL_OW 69
51408: ST_TO_ADDR
// ComMoveXY ( Captured_Units_of_Alliance , 226 , 197 ) ;
51409: LD_EXP 99
51413: PPUSH
51414: LD_INT 226
51416: PPUSH
51417: LD_INT 197
51419: PPUSH
51420: CALL_OW 111
// enable ( Alliance_Captured ) ;
51424: LD_EXP 152
51428: ENABLE_MARKED
// if IsOk ( AllDep ) then
51429: LD_INT 45
51431: PPUSH
51432: CALL_OW 302
51436: IFFALSE 51499
// begin for Un in True_Americans do
51438: LD_ADDR_VAR 0 3
51442: PUSH
51443: LD_EXP 70
51447: PUSH
51448: FOR_IN
51449: IFFALSE 51495
// begin SetSide ( Un , americans ) ;
51451: LD_VAR 0 3
51455: PPUSH
51456: LD_EXP 176
51460: PPUSH
51461: CALL_OW 235
// PlaceHumanInUnit ( Un , AllDep ) ;
51465: LD_VAR 0 3
51469: PPUSH
51470: LD_INT 45
51472: PPUSH
51473: CALL_OW 52
// ComExitBuilding ( Un ) ;
51477: LD_VAR 0 3
51481: PPUSH
51482: CALL_OW 122
// Wait ( 1 ) ;
51486: LD_INT 1
51488: PPUSH
51489: CALL_OW 67
// end ;
51493: GO 51448
51495: POP
51496: POP
// end else
51497: GO 51724
// if IsOk ( AllLabR2 ) then
51499: LD_INT 133
51501: PPUSH
51502: CALL_OW 302
51506: IFFALSE 51569
// begin for Un in True_Americans do
51508: LD_ADDR_VAR 0 3
51512: PUSH
51513: LD_EXP 70
51517: PUSH
51518: FOR_IN
51519: IFFALSE 51565
// begin SetSide ( Un , americans ) ;
51521: LD_VAR 0 3
51525: PPUSH
51526: LD_EXP 176
51530: PPUSH
51531: CALL_OW 235
// PlaceHumanInUnit ( Un , AllLabR2 ) ;
51535: LD_VAR 0 3
51539: PPUSH
51540: LD_INT 133
51542: PPUSH
51543: CALL_OW 52
// ComExitBuilding ( Un ) ;
51547: LD_VAR 0 3
51551: PPUSH
51552: CALL_OW 122
// Wait ( 1 ) ;
51556: LD_INT 1
51558: PPUSH
51559: CALL_OW 67
// end ;
51563: GO 51518
51565: POP
51566: POP
// end else
51567: GO 51724
// if IsOk ( AllLabR1 ) then
51569: LD_INT 39
51571: PPUSH
51572: CALL_OW 302
51576: IFFALSE 51639
// begin for Un in True_Americans do
51578: LD_ADDR_VAR 0 3
51582: PUSH
51583: LD_EXP 70
51587: PUSH
51588: FOR_IN
51589: IFFALSE 51635
// begin SetSide ( Un , americans ) ;
51591: LD_VAR 0 3
51595: PPUSH
51596: LD_EXP 176
51600: PPUSH
51601: CALL_OW 235
// PlaceHumanInUnit ( Un , AllLabR1 ) ;
51605: LD_VAR 0 3
51609: PPUSH
51610: LD_INT 39
51612: PPUSH
51613: CALL_OW 52
// ComExitBuilding ( Un ) ;
51617: LD_VAR 0 3
51621: PPUSH
51622: CALL_OW 122
// Wait ( 1 ) ;
51626: LD_INT 1
51628: PPUSH
51629: CALL_OW 67
// end ;
51633: GO 51588
51635: POP
51636: POP
// end else
51637: GO 51724
// begin for Un in True_Americans do
51639: LD_ADDR_VAR 0 3
51643: PUSH
51644: LD_EXP 70
51648: PUSH
51649: FOR_IN
51650: IFFALSE 51705
// begin SetSide ( Un , americans ) ;
51652: LD_VAR 0 3
51656: PPUSH
51657: LD_EXP 176
51661: PPUSH
51662: CALL_OW 235
// All_americans = All_americans ^ Un ;
51666: LD_ADDR_EXP 61
51670: PUSH
51671: LD_EXP 61
51675: PUSH
51676: LD_VAR 0 3
51680: ADD
51681: ST_TO_ADDR
// PlaceUnitXYR ( Un , 250 , 195 , 3 , false ) ;
51682: LD_VAR 0 3
51686: PPUSH
51687: LD_INT 250
51689: PPUSH
51690: LD_INT 195
51692: PPUSH
51693: LD_INT 3
51695: PPUSH
51696: LD_INT 0
51698: PPUSH
51699: CALL_OW 50
// end ;
51703: GO 51649
51705: POP
51706: POP
// All_americans = All_americans diff [ 0 ] ;
51707: LD_ADDR_EXP 61
51711: PUSH
51712: LD_EXP 61
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: DIFF
51723: ST_TO_ADDR
// end ; end ; end ; end ;
51724: LD_VAR 0 1
51728: RET
// function SelectExplorer ; var R , Un ; begin
51729: LD_INT 0
51731: PPUSH
51732: PPUSH
51733: PPUSH
// R = 0 ;
51734: LD_ADDR_VAR 0 2
51738: PUSH
51739: LD_INT 0
51741: ST_TO_ADDR
// for Un in Alliance_am_soldiers ^ Alliance_am_scientists do
51742: LD_ADDR_VAR 0 3
51746: PUSH
51747: LD_EXP 95
51751: PUSH
51752: LD_EXP 97
51756: ADD
51757: PUSH
51758: FOR_IN
51759: IFFALSE 51907
// if IsOk ( Un ) then
51761: LD_VAR 0 3
51765: PPUSH
51766: CALL_OW 302
51770: IFFALSE 51905
// begin if Un in Alliance_am_soldiers then
51772: LD_VAR 0 3
51776: PUSH
51777: LD_EXP 95
51781: IN
51782: IFFALSE 51802
// Alliance_am_soldiers = Alliance_am_soldiers diff Un else
51784: LD_ADDR_EXP 95
51788: PUSH
51789: LD_EXP 95
51793: PUSH
51794: LD_VAR 0 3
51798: DIFF
51799: ST_TO_ADDR
51800: GO 51818
// Alliance_am_scientists = Alliance_am_scientists diff Un ;
51802: LD_ADDR_EXP 97
51806: PUSH
51807: LD_EXP 97
51811: PUSH
51812: LD_VAR 0 3
51816: DIFF
51817: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
51818: LD_VAR 0 3
51822: PPUSH
51823: CALL_OW 257
51827: PUSH
51828: LD_INT 1
51830: NONEQUAL
51831: IFFALSE 51879
// begin ComEnterUnit ( Un , AllBarrA ) ;
51833: LD_VAR 0 3
51837: PPUSH
51838: LD_INT 41
51840: PPUSH
51841: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
51845: LD_VAR 0 3
51849: PPUSH
51850: LD_INT 1
51852: PPUSH
51853: CALL_OW 183
// AddComExitBuilding ( Un ) ;
51857: LD_VAR 0 3
51861: PPUSH
51862: CALL_OW 182
// WaitTask ( Un , 0.5 ) ;
51866: LD_VAR 0 3
51870: PPUSH
51871: LD_REAL  5.00000000000000E-0001
51874: PPUSH
51875: CALL 17876 0 2
// end ; SetSide ( Un , Explorers_Side ) ;
51879: LD_VAR 0 3
51883: PPUSH
51884: LD_EXP 183
51888: PPUSH
51889: CALL_OW 235
// R = Un ;
51893: LD_ADDR_VAR 0 2
51897: PUSH
51898: LD_VAR 0 3
51902: ST_TO_ADDR
// break ;
51903: GO 51907
// end ;
51905: GO 51758
51907: POP
51908: POP
// Result = R ;
51909: LD_ADDR_VAR 0 1
51913: PUSH
51914: LD_VAR 0 2
51918: ST_TO_ADDR
// end ;
51919: LD_VAR 0 1
51923: RET
// function SelectExplorers ; begin
51924: LD_INT 0
51926: PPUSH
// if not ( IsLive ( Explorer1 ) ) then
51927: LD_EXP 100
51931: PPUSH
51932: CALL_OW 300
51936: NOT
51937: IFFALSE 51949
// Explorer1 = SelectExplorer ;
51939: LD_ADDR_EXP 100
51943: PUSH
51944: CALL 51729 0 0
51948: ST_TO_ADDR
// if not ( IsLive ( Explorer2 ) ) then
51949: LD_EXP 101
51953: PPUSH
51954: CALL_OW 300
51958: NOT
51959: IFFALSE 51971
// Explorer2 = SelectExplorer ;
51961: LD_ADDR_EXP 101
51965: PUSH
51966: CALL 51729 0 0
51970: ST_TO_ADDR
// end ;
51971: LD_VAR 0 1
51975: RET
// function CaptureDialogue ( Captured_american ) ; var Join ; begin
51976: LD_INT 0
51978: PPUSH
51979: PPUSH
// Join = 0 ;
51980: LD_ADDR_VAR 0 3
51984: PUSH
51985: LD_INT 0
51987: ST_TO_ADDR
// DialogueON ;
51988: CALL_OW 6
// case Captured_american of JMM :
51992: LD_VAR 0 1
51996: PUSH
51997: LD_EXP 1
52001: DOUBLE
52002: EQUAL
52003: IFTRUE 52007
52005: GO 52022
52007: POP
// ForceSay ( JMM , DA1-JMM-1 ) ; Joan :
52008: LD_EXP 1
52012: PPUSH
52013: LD_STRING DA1-JMM-1
52015: PPUSH
52016: CALL_OW 91
52020: GO 52439
52022: LD_EXP 12
52026: DOUBLE
52027: EQUAL
52028: IFTRUE 52032
52030: GO 52047
52032: POP
// ForceSay ( Joan , DA1-Joan-1 ) ; Lisa :
52033: LD_EXP 12
52037: PPUSH
52038: LD_STRING DA1-Joan-1
52040: PPUSH
52041: CALL_OW 91
52045: GO 52439
52047: LD_EXP 5
52051: DOUBLE
52052: EQUAL
52053: IFTRUE 52057
52055: GO 52072
52057: POP
// ForceSay ( Lisa , DA1-Lisa-1 ) ; Donaldson :
52058: LD_EXP 5
52062: PPUSH
52063: LD_STRING DA1-Lisa-1
52065: PPUSH
52066: CALL_OW 91
52070: GO 52439
52072: LD_EXP 8
52076: DOUBLE
52077: EQUAL
52078: IFTRUE 52082
52080: GO 52097
52082: POP
// ForceSay ( Donaldson , DA1-Don-1 ) ; Cornell :
52083: LD_EXP 8
52087: PPUSH
52088: LD_STRING DA1-Don-1
52090: PPUSH
52091: CALL_OW 91
52095: GO 52439
52097: LD_EXP 10
52101: DOUBLE
52102: EQUAL
52103: IFTRUE 52107
52105: GO 52122
52107: POP
// ForceSay ( Cornell , DA1-Corn-1 ) ; Denis :
52108: LD_EXP 10
52112: PPUSH
52113: LD_STRING DA1-Corn-1
52115: PPUSH
52116: CALL_OW 91
52120: GO 52439
52122: LD_EXP 11
52126: DOUBLE
52127: EQUAL
52128: IFTRUE 52132
52130: GO 52147
52132: POP
// ForceSay ( Denis , DA1-Den-1 ) ; Bobby :
52133: LD_EXP 11
52137: PPUSH
52138: LD_STRING DA1-Den-1
52140: PPUSH
52141: CALL_OW 91
52145: GO 52439
52147: LD_EXP 3
52151: DOUBLE
52152: EQUAL
52153: IFTRUE 52157
52155: GO 52172
52157: POP
// ForceSay ( Bobby , DA1-Bobby-1 ) ; Gladstone :
52158: LD_EXP 3
52162: PPUSH
52163: LD_STRING DA1-Bobby-1
52165: PPUSH
52166: CALL_OW 91
52170: GO 52439
52172: LD_EXP 9
52176: DOUBLE
52177: EQUAL
52178: IFTRUE 52182
52180: GO 52197
52182: POP
// ForceSay ( Gladstone , DA1-Glad-1 ) ; Cyrus :
52183: LD_EXP 9
52187: PPUSH
52188: LD_STRING DA1-Glad-1
52190: PPUSH
52191: CALL_OW 91
52195: GO 52439
52197: LD_EXP 4
52201: DOUBLE
52202: EQUAL
52203: IFTRUE 52207
52205: GO 52222
52207: POP
// ForceSay ( Cyrus , DA1-Cyrus-1 ) ; Stevens :
52208: LD_EXP 4
52212: PPUSH
52213: LD_STRING DA1-Cyrus-1
52215: PPUSH
52216: CALL_OW 91
52220: GO 52439
52222: LD_EXP 17
52226: DOUBLE
52227: EQUAL
52228: IFTRUE 52232
52230: GO 52247
52232: POP
// ForceSay ( Stevens , DA1-Huck-1 ) ; Brown :
52233: LD_EXP 17
52237: PPUSH
52238: LD_STRING DA1-Huck-1
52240: PPUSH
52241: CALL_OW 91
52245: GO 52439
52247: LD_EXP 7
52251: DOUBLE
52252: EQUAL
52253: IFTRUE 52257
52255: GO 52272
52257: POP
// ForceSay ( Brown , DA1-Brown-1 ) ; Gary :
52258: LD_EXP 7
52262: PPUSH
52263: LD_STRING DA1-Brown-1
52265: PPUSH
52266: CALL_OW 91
52270: GO 52439
52272: LD_EXP 15
52276: DOUBLE
52277: EQUAL
52278: IFTRUE 52282
52280: GO 52297
52282: POP
// ForceSay ( Gary , DA1-Gary-1 ) ; Coonie :
52283: LD_EXP 15
52287: PPUSH
52288: LD_STRING DA1-Gary-1
52290: PPUSH
52291: CALL_OW 91
52295: GO 52439
52297: LD_EXP 18
52301: DOUBLE
52302: EQUAL
52303: IFTRUE 52307
52305: GO 52322
52307: POP
// ForceSay ( Coonie , DA1-Con-1 ) ; Kurt :
52308: LD_EXP 18
52312: PPUSH
52313: LD_STRING DA1-Con-1
52315: PPUSH
52316: CALL_OW 91
52320: GO 52439
52322: LD_EXP 13
52326: DOUBLE
52327: EQUAL
52328: IFTRUE 52332
52330: GO 52347
52332: POP
// ForceSay ( Kurt , DA1-Kurt-1 ) ; Yamoko :
52333: LD_EXP 13
52337: PPUSH
52338: LD_STRING DA1-Kurt-1
52340: PPUSH
52341: CALL_OW 91
52345: GO 52439
52347: LD_EXP 14
52351: DOUBLE
52352: EQUAL
52353: IFTRUE 52357
52355: GO 52372
52357: POP
// ForceSay ( Yamoko , DA1-Yam-1 ) ; Frank :
52358: LD_EXP 14
52362: PPUSH
52363: LD_STRING DA1-Yam-1
52365: PPUSH
52366: CALL_OW 91
52370: GO 52439
52372: LD_EXP 6
52376: DOUBLE
52377: EQUAL
52378: IFTRUE 52382
52380: GO 52397
52382: POP
// ForceSay ( Frank , DA1-Frank-1 ) ; else
52383: LD_EXP 6
52387: PPUSH
52388: LD_STRING DA1-Frank-1
52390: PPUSH
52391: CALL_OW 91
52395: GO 52439
52397: POP
// begin if GetSex ( Captured_american ) = sex_male then
52398: LD_VAR 0 1
52402: PPUSH
52403: CALL_OW 258
52407: PUSH
52408: LD_INT 1
52410: EQUAL
52411: IFFALSE 52427
// ForceSay ( Captured_american , DA1-Sol1-1 ) else
52413: LD_VAR 0 1
52417: PPUSH
52418: LD_STRING DA1-Sol1-1
52420: PPUSH
52421: CALL_OW 91
52425: GO 52439
// ForceSay ( Captured_american , DA1-FSol1-1 ) ;
52427: LD_VAR 0 1
52431: PPUSH
52432: LD_STRING DA1-FSol1-1
52434: PPUSH
52435: CALL_OW 91
// end ; end ; Say ( Roth , DA-Roth-1 ) ;
52439: LD_EXP 20
52443: PPUSH
52444: LD_STRING DA-Roth-1
52446: PPUSH
52447: CALL_OW 88
// if Number_of_captured_americans = 1 then
52451: LD_EXP 211
52455: PUSH
52456: LD_INT 1
52458: EQUAL
52459: IFFALSE 52487
// begin Say ( Simms , DA-Sim-1 ) ;
52461: LD_EXP 16
52465: PPUSH
52466: LD_STRING DA-Sim-1
52468: PPUSH
52469: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
52473: LD_EXP 20
52477: PPUSH
52478: LD_STRING DA-Roth-2
52480: PPUSH
52481: CALL_OW 88
// end else
52485: GO 52499
// Say ( Simms , DA-Sim-2 ) ;
52487: LD_EXP 16
52491: PPUSH
52492: LD_STRING DA-Sim-2
52494: PPUSH
52495: CALL_OW 88
// case Captured_american of JMM :
52499: LD_VAR 0 1
52503: PUSH
52504: LD_EXP 1
52508: DOUBLE
52509: EQUAL
52510: IFTRUE 52514
52512: GO 52529
52514: POP
// ForceSay ( JMM , DA1-JMM-1a ) ; Joan :
52515: LD_EXP 1
52519: PPUSH
52520: LD_STRING DA1-JMM-1a
52522: PPUSH
52523: CALL_OW 91
52527: GO 53011
52529: LD_EXP 12
52533: DOUBLE
52534: EQUAL
52535: IFTRUE 52539
52537: GO 52554
52539: POP
// ForceSay ( Joan , DA1-Joan-1a ) ; Lisa :
52540: LD_EXP 12
52544: PPUSH
52545: LD_STRING DA1-Joan-1a
52547: PPUSH
52548: CALL_OW 91
52552: GO 53011
52554: LD_EXP 5
52558: DOUBLE
52559: EQUAL
52560: IFTRUE 52564
52562: GO 52579
52564: POP
// ForceSay ( Lisa , DA1-Lisa-1a ) ; Donaldson :
52565: LD_EXP 5
52569: PPUSH
52570: LD_STRING DA1-Lisa-1a
52572: PPUSH
52573: CALL_OW 91
52577: GO 53011
52579: LD_EXP 8
52583: DOUBLE
52584: EQUAL
52585: IFTRUE 52589
52587: GO 52604
52589: POP
// ForceSay ( Donaldson , DA1-Don-1a ) ; Cornell :
52590: LD_EXP 8
52594: PPUSH
52595: LD_STRING DA1-Don-1a
52597: PPUSH
52598: CALL_OW 91
52602: GO 53011
52604: LD_EXP 10
52608: DOUBLE
52609: EQUAL
52610: IFTRUE 52614
52612: GO 52629
52614: POP
// ForceSay ( Cornell , DA1-Corn-1a ) ; Denis :
52615: LD_EXP 10
52619: PPUSH
52620: LD_STRING DA1-Corn-1a
52622: PPUSH
52623: CALL_OW 91
52627: GO 53011
52629: LD_EXP 11
52633: DOUBLE
52634: EQUAL
52635: IFTRUE 52639
52637: GO 52654
52639: POP
// ForceSay ( Denis , DA1-Den-1a ) ; Bobby :
52640: LD_EXP 11
52644: PPUSH
52645: LD_STRING DA1-Den-1a
52647: PPUSH
52648: CALL_OW 91
52652: GO 53011
52654: LD_EXP 3
52658: DOUBLE
52659: EQUAL
52660: IFTRUE 52664
52662: GO 52679
52664: POP
// ForceSay ( Bobby , DA1-Bobby-1a ) ; Gladstone :
52665: LD_EXP 3
52669: PPUSH
52670: LD_STRING DA1-Bobby-1a
52672: PPUSH
52673: CALL_OW 91
52677: GO 53011
52679: LD_EXP 9
52683: DOUBLE
52684: EQUAL
52685: IFTRUE 52689
52687: GO 52704
52689: POP
// ForceSay ( Gladstone , DA1-Glad-1a ) ; Cyrus :
52690: LD_EXP 9
52694: PPUSH
52695: LD_STRING DA1-Glad-1a
52697: PPUSH
52698: CALL_OW 91
52702: GO 53011
52704: LD_EXP 4
52708: DOUBLE
52709: EQUAL
52710: IFTRUE 52714
52712: GO 52729
52714: POP
// ForceSay ( Cyrus , DA1-Cyrus-1a ) ; Stevens :
52715: LD_EXP 4
52719: PPUSH
52720: LD_STRING DA1-Cyrus-1a
52722: PPUSH
52723: CALL_OW 91
52727: GO 53011
52729: LD_EXP 17
52733: DOUBLE
52734: EQUAL
52735: IFTRUE 52739
52737: GO 52754
52739: POP
// ForceSay ( Stevens , DA1-Huck-1a ) ; Brown :
52740: LD_EXP 17
52744: PPUSH
52745: LD_STRING DA1-Huck-1a
52747: PPUSH
52748: CALL_OW 91
52752: GO 53011
52754: LD_EXP 7
52758: DOUBLE
52759: EQUAL
52760: IFTRUE 52764
52762: GO 52779
52764: POP
// ForceSay ( Brown , DA1-Brown-1a ) ; Gary :
52765: LD_EXP 7
52769: PPUSH
52770: LD_STRING DA1-Brown-1a
52772: PPUSH
52773: CALL_OW 91
52777: GO 53011
52779: LD_EXP 15
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52789
52787: GO 52804
52789: POP
// ForceSay ( Gary , DA1-Gary-1a ) ; Coonie :
52790: LD_EXP 15
52794: PPUSH
52795: LD_STRING DA1-Gary-1a
52797: PPUSH
52798: CALL_OW 91
52802: GO 53011
52804: LD_EXP 18
52808: DOUBLE
52809: EQUAL
52810: IFTRUE 52814
52812: GO 52829
52814: POP
// ForceSay ( Coonie , DA1-Con-1a ) ; Kurt :
52815: LD_EXP 18
52819: PPUSH
52820: LD_STRING DA1-Con-1a
52822: PPUSH
52823: CALL_OW 91
52827: GO 53011
52829: LD_EXP 13
52833: DOUBLE
52834: EQUAL
52835: IFTRUE 52839
52837: GO 52854
52839: POP
// ForceSay ( Kurt , DA1-Kurt-1a ) ; Yamoko :
52840: LD_EXP 13
52844: PPUSH
52845: LD_STRING DA1-Kurt-1a
52847: PPUSH
52848: CALL_OW 91
52852: GO 53011
52854: LD_EXP 14
52858: DOUBLE
52859: EQUAL
52860: IFTRUE 52864
52862: GO 52879
52864: POP
// ForceSay ( Yamoko , DA1-Yam-1a ) ; Frank :
52865: LD_EXP 14
52869: PPUSH
52870: LD_STRING DA1-Yam-1a
52872: PPUSH
52873: CALL_OW 91
52877: GO 53011
52879: LD_EXP 6
52883: DOUBLE
52884: EQUAL
52885: IFTRUE 52889
52887: GO 52904
52889: POP
// ForceSay ( Frank , DA1-Frank-1a ) ; else
52890: LD_EXP 6
52894: PPUSH
52895: LD_STRING DA1-Frank-1a
52897: PPUSH
52898: CALL_OW 91
52902: GO 53011
52904: POP
// begin Join = Rand ( 0 , 1 ) ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_INT 0
52912: PPUSH
52913: LD_INT 1
52915: PPUSH
52916: CALL_OW 12
52920: ST_TO_ADDR
// if Join then
52921: LD_VAR 0 3
52925: IFFALSE 52970
// begin if GetSex ( Captured_american ) = sex_male then
52927: LD_VAR 0 1
52931: PPUSH
52932: CALL_OW 258
52936: PUSH
52937: LD_INT 1
52939: EQUAL
52940: IFFALSE 52956
// ForceSay ( Captured_american , DA1-Sol1-1b ) else
52942: LD_VAR 0 1
52946: PPUSH
52947: LD_STRING DA1-Sol1-1b
52949: PPUSH
52950: CALL_OW 91
52954: GO 52968
// ForceSay ( Captured_american , DA1-FSol1-1b ) ;
52956: LD_VAR 0 1
52960: PPUSH
52961: LD_STRING DA1-FSol1-1b
52963: PPUSH
52964: CALL_OW 91
// end else
52968: GO 53011
// begin if GetSex ( Captured_american ) = sex_male then
52970: LD_VAR 0 1
52974: PPUSH
52975: CALL_OW 258
52979: PUSH
52980: LD_INT 1
52982: EQUAL
52983: IFFALSE 52999
// ForceSay ( Captured_american , DA1-Sol1-1a ) else
52985: LD_VAR 0 1
52989: PPUSH
52990: LD_STRING DA1-Sol1-1a
52992: PPUSH
52993: CALL_OW 91
52997: GO 53011
// ForceSay ( Captured_american , DA1-FSol1-1a ) ;
52999: LD_VAR 0 1
53003: PPUSH
53004: LD_STRING DA1-FSol1-1a
53006: PPUSH
53007: CALL_OW 91
// end ; end ; end ; if ( Captured_american in [ Donaldson , Denis , Bobby , Stevens , Brown , Yamoko ] ) or Join then
53011: LD_VAR 0 1
53015: PUSH
53016: LD_EXP 8
53020: PUSH
53021: LD_EXP 11
53025: PUSH
53026: LD_EXP 3
53030: PUSH
53031: LD_EXP 17
53035: PUSH
53036: LD_EXP 7
53040: PUSH
53041: LD_EXP 14
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: IN
53054: PUSH
53055: LD_VAR 0 3
53059: OR
53060: IFFALSE 53122
// begin Say ( Roth , DA-Roth-3 ) ;
53062: LD_EXP 20
53066: PPUSH
53067: LD_STRING DA-Roth-3
53069: PPUSH
53070: CALL_OW 88
// SetSide ( Captured_american , alliance ) ;
53074: LD_VAR 0 1
53078: PPUSH
53079: LD_EXP 182
53083: PPUSH
53084: CALL_OW 235
// Alliance_am_soldiers = Alliance_am_soldiers ^ Captured_american ;
53088: LD_ADDR_EXP 95
53092: PUSH
53093: LD_EXP 95
53097: PUSH
53098: LD_VAR 0 1
53102: ADD
53103: ST_TO_ADDR
// All_americans = All_americans diff Captured_american ;
53104: LD_ADDR_EXP 61
53108: PUSH
53109: LD_EXP 61
53113: PUSH
53114: LD_VAR 0 1
53118: DIFF
53119: ST_TO_ADDR
// end else
53120: GO 53159
// begin Say ( Roth , DA-Roth-3a ) ;
53122: LD_EXP 20
53126: PPUSH
53127: LD_STRING DA-Roth-3a
53129: PPUSH
53130: CALL_OW 88
// RemoveUnit ( Captured_american ) ;
53134: LD_VAR 0 1
53138: PPUSH
53139: CALL_OW 64
// True_americans = True_americans ^ Captured_american ;
53143: LD_ADDR_EXP 70
53147: PUSH
53148: LD_EXP 70
53152: PUSH
53153: LD_VAR 0 1
53157: ADD
53158: ST_TO_ADDR
// end ; SetLives ( Captured_american , 1000 ) ;
53159: LD_VAR 0 1
53163: PPUSH
53164: LD_INT 1000
53166: PPUSH
53167: CALL_OW 234
// if ( Captured_american = JMM ) then
53171: LD_VAR 0 1
53175: PUSH
53176: LD_EXP 1
53180: EQUAL
53181: IFFALSE 53188
// enable ( JMM_Captured ) ;
53183: LD_EXP 160
53187: ENABLE_MARKED
// DialogueOFF ;
53188: CALL_OW 7
// end ;
53192: LD_VAR 0 2
53196: RET
// function HealExplorers ; begin
53197: LD_INT 0
53199: PPUSH
// if ( IsLive ( Explorer1 ) and not ( See ( americans , Explorer1 ) ) ) then
53200: LD_EXP 100
53204: PPUSH
53205: CALL_OW 300
53209: PUSH
53210: LD_EXP 176
53214: PPUSH
53215: LD_EXP 100
53219: PPUSH
53220: CALL_OW 292
53224: NOT
53225: AND
53226: IFFALSE 53240
// SetLives ( Explorer1 , 1000 ) ;
53228: LD_EXP 100
53232: PPUSH
53233: LD_INT 1000
53235: PPUSH
53236: CALL_OW 234
// if ( IsLive ( Explorer2 ) and not ( See ( americans , Explorer2 ) ) ) then
53240: LD_EXP 101
53244: PPUSH
53245: CALL_OW 300
53249: PUSH
53250: LD_EXP 176
53254: PPUSH
53255: LD_EXP 101
53259: PPUSH
53260: CALL_OW 292
53264: NOT
53265: AND
53266: IFFALSE 53280
// SetLives ( Explorer2 , 1000 ) ;
53268: LD_EXP 101
53272: PPUSH
53273: LD_INT 1000
53275: PPUSH
53276: CALL_OW 234
// end ;
53280: LD_VAR 0 1
53284: RET
// function SohwCaptureToPlayer ( Captured_american , Explorer1 , Explorer2 ) ; var AmToAr , ArToAm , Un , Units_to_stop ; begin
53285: LD_INT 0
53287: PPUSH
53288: PPUSH
53289: PPUSH
53290: PPUSH
53291: PPUSH
// AmToAr = GetAttitude ( americans , arabians ) ;
53292: LD_ADDR_VAR 0 5
53296: PUSH
53297: LD_EXP 176
53301: PPUSH
53302: LD_EXP 180
53306: PPUSH
53307: CALL_OW 81
53311: ST_TO_ADDR
// ArToAm = GetAttitude ( arabians , americans ) ;
53312: LD_ADDR_VAR 0 6
53316: PUSH
53317: LD_EXP 180
53321: PPUSH
53322: LD_EXP 176
53326: PPUSH
53327: CALL_OW 81
53331: ST_TO_ADDR
// SetAttitude ( americans , russians , att_friend , true ) ;
53332: LD_EXP 176
53336: PPUSH
53337: LD_EXP 178
53341: PPUSH
53342: LD_INT 1
53344: PPUSH
53345: LD_INT 1
53347: PPUSH
53348: CALL_OW 80
// SetAttitude ( americans , russians1 , att_friend , true ) ;
53352: LD_EXP 176
53356: PPUSH
53357: LD_EXP 179
53361: PPUSH
53362: LD_INT 1
53364: PPUSH
53365: LD_INT 1
53367: PPUSH
53368: CALL_OW 80
// SetAttitude ( americans , arabians , att_friend , true ) ;
53372: LD_EXP 176
53376: PPUSH
53377: LD_EXP 180
53381: PPUSH
53382: LD_INT 1
53384: PPUSH
53385: LD_INT 1
53387: PPUSH
53388: CALL_OW 80
// Units_to_stop = FilterAllUnits ( [ [ f_or , [ f_side , russians ] , [ f_side , russians1 ] , [ f_side , arabians ] , [ f_side , americans ] ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53392: LD_ADDR_VAR 0 8
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: LD_INT 22
53402: PUSH
53403: LD_EXP 178
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 22
53414: PUSH
53415: LD_EXP 179
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 22
53426: PUSH
53427: LD_EXP 180
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 22
53438: PUSH
53439: LD_EXP 176
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 21
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 21
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PPUSH
53487: CALL_OW 69
53491: ST_TO_ADDR
// for Un in Units_to_stop do
53492: LD_ADDR_VAR 0 7
53496: PUSH
53497: LD_VAR 0 8
53501: PUSH
53502: FOR_IN
53503: IFFALSE 53531
// begin if Attacks ( Un ) <> 0 then
53505: LD_VAR 0 7
53509: PPUSH
53510: CALL_OW 320
53514: PUSH
53515: LD_INT 0
53517: NONEQUAL
53518: IFFALSE 53529
// ComStop ( Un ) ;
53520: LD_VAR 0 7
53524: PPUSH
53525: CALL_OW 141
// end ;
53529: GO 53502
53531: POP
53532: POP
// while IsInUnit ( Captured_american ) <> 0 do
53533: LD_VAR 0 1
53537: PPUSH
53538: CALL_OW 310
53542: PUSH
53543: LD_INT 0
53545: NONEQUAL
53546: IFFALSE 53571
// begin ComExitVehicle ( IsInUnit ( Captured_american ) ) ;
53548: LD_VAR 0 1
53552: PPUSH
53553: CALL_OW 310
53557: PPUSH
53558: CALL_OW 121
// Wait ( 1 ) ;
53562: LD_INT 1
53564: PPUSH
53565: CALL_OW 67
// end ;
53569: GO 53533
// SetSide ( Captured_american , americans1 ) ;
53571: LD_VAR 0 1
53575: PPUSH
53576: LD_EXP 177
53580: PPUSH
53581: CALL_OW 235
// ComStop ( Captured_american ) ;
53585: LD_VAR 0 1
53589: PPUSH
53590: CALL_OW 141
// DoNotAttack ( alliance , Captured_american ) ;
53594: LD_EXP 182
53598: PPUSH
53599: LD_VAR 0 1
53603: PPUSH
53604: CALL_OW 471
// DoNotAttack ( Explorers_side , Captured_american ) ;
53608: LD_EXP 183
53612: PPUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL_OW 471
// if ( Explorer1 <> 0 ) and ( Explorer2 <> 0 ) then
53622: LD_VAR 0 2
53626: PUSH
53627: LD_INT 0
53629: NONEQUAL
53630: PUSH
53631: LD_VAR 0 3
53635: PUSH
53636: LD_INT 0
53638: NONEQUAL
53639: AND
53640: IFFALSE 53668
// CenterNowOnUnits ( [ Explorer1 , Explorer2 , Captured_american ] ) else
53642: LD_VAR 0 2
53646: PUSH
53647: LD_VAR 0 3
53651: PUSH
53652: LD_VAR 0 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: PPUSH
53662: CALL_OW 87
53666: GO 53677
// CenterNowOnUnits ( Captured_american ) ;
53668: LD_VAR 0 1
53672: PPUSH
53673: CALL_OW 87
// ingame_video = true ;
53677: LD_ADDR_OWVAR 52
53681: PUSH
53682: LD_INT 1
53684: ST_TO_ADDR
// if Explorer1 <> 0 then
53685: LD_VAR 0 2
53689: PUSH
53690: LD_INT 0
53692: NONEQUAL
53693: IFFALSE 53716
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
53695: LD_VAR 0 2
53699: PPUSH
53700: LD_INT 245
53702: PPUSH
53703: LD_INT 186
53705: PPUSH
53706: LD_INT 3
53708: PPUSH
53709: LD_INT 1
53711: PPUSH
53712: CALL_OW 483
// if Explorer2 <> 0 then
53716: LD_VAR 0 3
53720: PUSH
53721: LD_INT 0
53723: NONEQUAL
53724: IFFALSE 53747
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
53726: LD_VAR 0 3
53730: PPUSH
53731: LD_INT 245
53733: PPUSH
53734: LD_INT 186
53736: PPUSH
53737: LD_INT 3
53739: PPUSH
53740: LD_INT 1
53742: PPUSH
53743: CALL_OW 483
// TeleportUnit ( Captured_american , 245 , 186 , 3 , true ) ;
53747: LD_VAR 0 1
53751: PPUSH
53752: LD_INT 245
53754: PPUSH
53755: LD_INT 186
53757: PPUSH
53758: LD_INT 3
53760: PPUSH
53761: LD_INT 1
53763: PPUSH
53764: CALL_OW 483
// Wait ( 0 0$3 ) ;
53768: LD_INT 105
53770: PPUSH
53771: CALL_OW 67
// CenterNowOnUnits ( Captured_american ) ;
53775: LD_VAR 0 1
53779: PPUSH
53780: CALL_OW 87
// Wait ( 0 0$1 ) ;
53784: LD_INT 35
53786: PPUSH
53787: CALL_OW 67
// ingame_video = false ;
53791: LD_ADDR_OWVAR 52
53795: PUSH
53796: LD_INT 0
53798: ST_TO_ADDR
// CaptureDialogue ( Captured_american ) ;
53799: LD_VAR 0 1
53803: PPUSH
53804: CALL 51976 0 1
// HealExplorers ;
53808: CALL 53197 0 0
// SetAttitude ( americans , russians , att_enemy , true ) ;
53812: LD_EXP 176
53816: PPUSH
53817: LD_EXP 178
53821: PPUSH
53822: LD_INT 2
53824: PPUSH
53825: LD_INT 1
53827: PPUSH
53828: CALL_OW 80
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
53832: LD_EXP 176
53836: PPUSH
53837: LD_EXP 179
53841: PPUSH
53842: LD_INT 2
53844: PPUSH
53845: LD_INT 1
53847: PPUSH
53848: CALL_OW 80
// SetAttitude ( americans , arabians , AmToAr , false ) ;
53852: LD_EXP 176
53856: PPUSH
53857: LD_EXP 180
53861: PPUSH
53862: LD_VAR 0 5
53866: PPUSH
53867: LD_INT 0
53869: PPUSH
53870: CALL_OW 80
// SetAttitude ( arabians , americans , ArToAm , false ) ;
53874: LD_EXP 180
53878: PPUSH
53879: LD_EXP 176
53883: PPUSH
53884: LD_VAR 0 6
53888: PPUSH
53889: LD_INT 0
53891: PPUSH
53892: CALL_OW 80
// NormalAttack ( alliance , Captured_american ) ;
53896: LD_EXP 182
53900: PPUSH
53901: LD_VAR 0 1
53905: PPUSH
53906: CALL_OW 472
// NormalAttack ( Explorers_side , Captured_american ) ;
53910: LD_EXP 183
53914: PPUSH
53915: LD_VAR 0 1
53919: PPUSH
53920: CALL_OW 472
// if Captured_american <> JMM then
53924: LD_VAR 0 1
53928: PUSH
53929: LD_EXP 1
53933: NONEQUAL
53934: IFFALSE 53999
// begin DialogueOn ;
53936: CALL_OW 6
// Wait ( 0 0$2 ) ;
53940: LD_INT 70
53942: PPUSH
53943: CALL_OW 67
// Say ( JMM , DAa-JMM-1 ) ;
53947: LD_EXP 1
53951: PPUSH
53952: LD_STRING DAa-JMM-1
53954: PPUSH
53955: CALL_OW 88
// if tick > Alliance_broadcast then
53959: LD_OWVAR 1
53963: PUSH
53964: LD_EXP 202
53968: GREATER
53969: IFFALSE 53983
// Say ( JMM , DAa-JMM-1a ) ;
53971: LD_EXP 1
53975: PPUSH
53976: LD_STRING DAa-JMM-1a
53978: PPUSH
53979: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
53983: LD_EXP 1
53987: PPUSH
53988: LD_STRING DAa-JMM-1b
53990: PPUSH
53991: CALL_OW 88
// DialogueOff ;
53995: CALL_OW 7
// end ; end ;
53999: LD_VAR 0 4
54003: RET
// function CapturewWithoutShow ( Captured_american , Explorer1 , Explorer2 ) ; begin
54004: LD_INT 0
54006: PPUSH
// while IsInUnit ( Captured_american ) <> 0 do
54007: LD_VAR 0 1
54011: PPUSH
54012: CALL_OW 310
54016: PUSH
54017: LD_INT 0
54019: NONEQUAL
54020: IFFALSE 54045
// begin ComExitVehicle ( IsInUnit ( Captured_american ) ) ;
54022: LD_VAR 0 1
54026: PPUSH
54027: CALL_OW 310
54031: PPUSH
54032: CALL_OW 121
// Wait ( 1 ) ;
54036: LD_INT 1
54038: PPUSH
54039: CALL_OW 67
// end ;
54043: GO 54007
// SetSide ( Captured_american , americans1 ) ;
54045: LD_VAR 0 1
54049: PPUSH
54050: LD_EXP 177
54054: PPUSH
54055: CALL_OW 235
// ComStop ( Captured_american ) ;
54059: LD_VAR 0 1
54063: PPUSH
54064: CALL_OW 141
// DoNotAttack ( alliance , Captured_american ) ;
54068: LD_EXP 182
54072: PPUSH
54073: LD_VAR 0 1
54077: PPUSH
54078: CALL_OW 471
// DoNotAttack ( Explorers_side , Captured_american ) ;
54082: LD_EXP 183
54086: PPUSH
54087: LD_VAR 0 1
54091: PPUSH
54092: CALL_OW 471
// if Explorer1 <> 0 then
54096: LD_VAR 0 2
54100: PUSH
54101: LD_INT 0
54103: NONEQUAL
54104: IFFALSE 54127
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
54106: LD_VAR 0 2
54110: PPUSH
54111: LD_INT 245
54113: PPUSH
54114: LD_INT 186
54116: PPUSH
54117: LD_INT 3
54119: PPUSH
54120: LD_INT 1
54122: PPUSH
54123: CALL_OW 483
// if Explorer2 <> 0 then
54127: LD_VAR 0 3
54131: PUSH
54132: LD_INT 0
54134: NONEQUAL
54135: IFFALSE 54158
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
54137: LD_VAR 0 3
54141: PPUSH
54142: LD_INT 245
54144: PPUSH
54145: LD_INT 186
54147: PPUSH
54148: LD_INT 3
54150: PPUSH
54151: LD_INT 1
54153: PPUSH
54154: CALL_OW 483
// TeleportUnit ( Captured_american , 245 , 186 , 3 , true ) ;
54158: LD_VAR 0 1
54162: PPUSH
54163: LD_INT 245
54165: PPUSH
54166: LD_INT 186
54168: PPUSH
54169: LD_INT 3
54171: PPUSH
54172: LD_INT 1
54174: PPUSH
54175: CALL_OW 483
// Wait ( 0 0$3 ) ;
54179: LD_INT 105
54181: PPUSH
54182: CALL_OW 67
// CaptureDialogue ( Captured_american ) ;
54186: LD_VAR 0 1
54190: PPUSH
54191: CALL 51976 0 1
// NormalAttack ( alliance , Captured_american ) ;
54195: LD_EXP 182
54199: PPUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: CALL_OW 472
// NormalAttack ( Explorers_side , Captured_american ) ;
54209: LD_EXP 183
54213: PPUSH
54214: LD_VAR 0 1
54218: PPUSH
54219: CALL_OW 472
// HealExplorers ;
54223: CALL 53197 0 0
// end ;
54227: LD_VAR 0 4
54231: RET
// function SetExplorerWayNumber ; var WayNumber ; begin
54232: LD_INT 0
54234: PPUSH
54235: PPUSH
// if GetAttitude ( russians , Explorers_Side ) = att_enemy then
54236: LD_EXP 178
54240: PPUSH
54241: LD_EXP 183
54245: PPUSH
54246: CALL_OW 81
54250: PUSH
54251: LD_INT 2
54253: EQUAL
54254: IFFALSE 54292
// begin Explorer_Way_Number = Rand ( 1 , 4 ) ;
54256: LD_ADDR_EXP 210
54260: PUSH
54261: LD_INT 1
54263: PPUSH
54264: LD_INT 4
54266: PPUSH
54267: CALL_OW 12
54271: ST_TO_ADDR
// if Explorer_Way_Number > 1 then
54272: LD_EXP 210
54276: PUSH
54277: LD_INT 1
54279: GREATER
54280: IFFALSE 54290
// Explorer_Way_Number = 2 ;
54282: LD_ADDR_EXP 210
54286: PUSH
54287: LD_INT 2
54289: ST_TO_ADDR
// end else
54290: GO 54308
// Explorer_Way_Number = Rand ( 1 , 2 ) ;
54292: LD_ADDR_EXP 210
54296: PUSH
54297: LD_INT 1
54299: PPUSH
54300: LD_INT 2
54302: PPUSH
54303: CALL_OW 12
54307: ST_TO_ADDR
// end ;
54308: LD_VAR 0 1
54312: RET
// every 0 0$0.5 marked 17 do var Americans_to_capture , Captured_american , AmToAr , ArToAm , Units_to_stop , Un , Uns ;
54313: GO 54315
54315: DISABLE
54316: LD_INT 0
54318: PPUSH
54319: PPUSH
54320: PPUSH
54321: PPUSH
54322: PPUSH
54323: PPUSH
54324: PPUSH
// begin if not ( Wood_registry ) then
54325: LD_EXP 229
54329: NOT
54330: IFFALSE 55326
// begin Wood_registry = true ;
54332: LD_ADDR_EXP 229
54336: PUSH
54337: LD_INT 1
54339: ST_TO_ADDR
// Americans_to_capture = [ ] ;
54340: LD_ADDR_VAR 0 1
54344: PUSH
54345: EMPTY
54346: ST_TO_ADDR
// Captured_american = 0 ;
54347: LD_ADDR_VAR 0 2
54351: PUSH
54352: LD_INT 0
54354: ST_TO_ADDR
// if IsOk ( AllDep ) then
54355: LD_INT 45
54357: PPUSH
54358: CALL_OW 302
54362: IFFALSE 55315
// begin disable ;
54364: DISABLE
// if IsLive ( Explorer1 ) and IsLive ( Explorer2 ) then
54365: LD_EXP 100
54369: PPUSH
54370: CALL_OW 300
54374: PUSH
54375: LD_EXP 101
54379: PPUSH
54380: CALL_OW 300
54384: AND
54385: IFFALSE 55198
// begin if ( ( GetLives ( Explorer1 ) < 700 ) or ( GetLives ( Explorer2 ) < 700 ) ) then
54387: LD_EXP 100
54391: PPUSH
54392: CALL_OW 256
54396: PUSH
54397: LD_INT 700
54399: LESS
54400: PUSH
54401: LD_EXP 101
54405: PPUSH
54406: CALL_OW 256
54410: PUSH
54411: LD_INT 700
54413: LESS
54414: OR
54415: IFFALSE 54566
// begin if not ( IsInArea ( Explorer1 , Al_Base ) ) then
54417: LD_EXP 100
54421: PPUSH
54422: LD_INT 18
54424: PPUSH
54425: CALL_OW 308
54429: NOT
54430: IFFALSE 54453
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
54432: LD_EXP 100
54436: PPUSH
54437: LD_INT 245
54439: PPUSH
54440: LD_INT 186
54442: PPUSH
54443: LD_INT 3
54445: PPUSH
54446: LD_INT 1
54448: PPUSH
54449: CALL_OW 483
// if not ( IsInArea ( Explorer2 , Al_Base ) ) then
54453: LD_EXP 101
54457: PPUSH
54458: LD_INT 18
54460: PPUSH
54461: CALL_OW 308
54465: NOT
54466: IFFALSE 54489
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
54468: LD_EXP 101
54472: PPUSH
54473: LD_INT 245
54475: PPUSH
54476: LD_INT 186
54478: PPUSH
54479: LD_INT 3
54481: PPUSH
54482: LD_INT 1
54484: PPUSH
54485: CALL_OW 483
// HealExplorers ;
54489: CALL 53197 0 0
// Step_On_The_Way = 1 ;
54493: LD_ADDR_EXP 209
54497: PUSH
54498: LD_INT 1
54500: ST_TO_ADDR
// SetExplorerWayNumber ;
54501: CALL 54232 0 0
// Wait ( 0 0$3 ) ;
54505: LD_INT 105
54507: PPUSH
54508: CALL_OW 67
// for Un in All_americans do
54512: LD_ADDR_VAR 0 6
54516: PUSH
54517: LD_EXP 61
54521: PUSH
54522: FOR_IN
54523: IFFALSE 54562
// if ( Attacks ( Un ) in [ Explorer1 , Explorer2 ] ) then
54525: LD_VAR 0 6
54529: PPUSH
54530: CALL_OW 320
54534: PUSH
54535: LD_EXP 100
54539: PUSH
54540: LD_EXP 101
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: IN
54549: IFFALSE 54560
// ComStop ( Un ) ;
54551: LD_VAR 0 6
54555: PPUSH
54556: CALL_OW 141
54560: GO 54522
54562: POP
54563: POP
// end else
54564: GO 55196
// begin Uns = UnitFilter ( All_americans , [ f_or , [ f_dist , Explorer1 , 15 ] , [ f_dist , Explorer2 , 15 ] ] ) ;
54566: LD_ADDR_VAR 0 7
54570: PUSH
54571: LD_EXP 61
54575: PPUSH
54576: LD_INT 2
54578: PUSH
54579: LD_INT 91
54581: PUSH
54582: LD_EXP 100
54586: PUSH
54587: LD_INT 15
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 91
54597: PUSH
54598: LD_EXP 101
54602: PUSH
54603: LD_INT 15
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: PPUSH
54616: CALL_OW 72
54620: ST_TO_ADDR
// for Un in Uns do
54621: LD_ADDR_VAR 0 6
54625: PUSH
54626: LD_VAR 0 7
54630: PUSH
54631: FOR_IN
54632: IFFALSE 54652
// Americans_to_capture = Americans_to_capture ^ Un ;
54634: LD_ADDR_VAR 0 1
54638: PUSH
54639: LD_VAR 0 1
54643: PUSH
54644: LD_VAR 0 6
54648: ADD
54649: ST_TO_ADDR
54650: GO 54631
54652: POP
54653: POP
// if Americans_to_capture > 0 then
54654: LD_VAR 0 1
54658: PUSH
54659: LD_INT 0
54661: GREATER
54662: IFFALSE 54925
// begin if ( Americans_to_capture [ 1 ] <> JMM ) or ( Americans_to_capture ^ [ ] = 1 ) then
54664: LD_VAR 0 1
54668: PUSH
54669: LD_INT 1
54671: ARRAY
54672: PUSH
54673: LD_EXP 1
54677: NONEQUAL
54678: PUSH
54679: LD_VAR 0 1
54683: PUSH
54684: EMPTY
54685: ADD
54686: PUSH
54687: LD_INT 1
54689: EQUAL
54690: OR
54691: IFFALSE 54709
// Captured_american = Americans_to_capture [ 1 ] else
54693: LD_ADDR_VAR 0 2
54697: PUSH
54698: LD_VAR 0 1
54702: PUSH
54703: LD_INT 1
54705: ARRAY
54706: ST_TO_ADDR
54707: GO 54736
// if ( Americans_to_capture ^ [ ] ) > 1 then
54709: LD_VAR 0 1
54713: PUSH
54714: EMPTY
54715: ADD
54716: PUSH
54717: LD_INT 1
54719: GREATER
54720: IFFALSE 54736
// Captured_american = Americans_to_capture [ 2 ] ;
54722: LD_ADDR_VAR 0 2
54726: PUSH
54727: LD_VAR 0 1
54731: PUSH
54732: LD_INT 2
54734: ARRAY
54735: ST_TO_ADDR
// if ( Captured_american <> JMM ) or ( Number_of_captured_americans <> 0 ) then
54736: LD_VAR 0 2
54740: PUSH
54741: LD_EXP 1
54745: NONEQUAL
54746: PUSH
54747: LD_EXP 211
54751: PUSH
54752: LD_INT 0
54754: NONEQUAL
54755: OR
54756: IFFALSE 54915
// begin Number_of_captured_americans = Number_of_captured_americans + 1 ;
54758: LD_ADDR_EXP 211
54762: PUSH
54763: LD_EXP 211
54767: PUSH
54768: LD_INT 1
54770: PLUS
54771: ST_TO_ADDR
// if ( Number_of_captured_americans = 1 ) or ( Captured_american = JMM ) then
54772: LD_EXP 211
54776: PUSH
54777: LD_INT 1
54779: EQUAL
54780: PUSH
54781: LD_VAR 0 2
54785: PUSH
54786: LD_EXP 1
54790: EQUAL
54791: OR
54792: IFFALSE 54815
// begin SohwCaptureToPlayer ( Captured_american , Explorer1 , Explorer2 ) ;
54794: LD_VAR 0 2
54798: PPUSH
54799: LD_EXP 100
54803: PPUSH
54804: LD_EXP 101
54808: PPUSH
54809: CALL 53285 0 3
// end else
54813: GO 54834
// begin CapturewWithoutShow ( Captured_american , Explorer1 , Explorer2 ) ;
54815: LD_VAR 0 2
54819: PPUSH
54820: LD_EXP 100
54824: PPUSH
54825: LD_EXP 101
54829: PPUSH
54830: CALL 54004 0 3
// end ; SetExplorerWayNumber ;
54834: CALL 54232 0 0
// Step_On_The_Way = 1 ;
54838: LD_ADDR_EXP 209
54842: PUSH
54843: LD_INT 1
54845: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
54846: LD_INT 35
54848: PPUSH
54849: CALL_OW 67
// until ( not ( IsLive ( Explorer1 ) ) or not ( IsLive ( Explorer2 ) ) or ( GetLives ( Explorer1 ) = 1000 and GetLives ( Explorer2 ) = 1000 ) or Roth_Captured ) ;
54853: LD_EXP 100
54857: PPUSH
54858: CALL_OW 300
54862: NOT
54863: PUSH
54864: LD_EXP 101
54868: PPUSH
54869: CALL_OW 300
54873: NOT
54874: OR
54875: PUSH
54876: LD_EXP 100
54880: PPUSH
54881: CALL_OW 256
54885: PUSH
54886: LD_INT 1000
54888: EQUAL
54889: PUSH
54890: LD_EXP 101
54894: PPUSH
54895: CALL_OW 256
54899: PUSH
54900: LD_INT 1000
54902: EQUAL
54903: AND
54904: OR
54905: PUSH
54906: LD_EXP 54
54910: OR
54911: IFFALSE 54846
// end else
54913: GO 54923
// Captured_american = 0 ;
54915: LD_ADDR_VAR 0 2
54919: PUSH
54920: LD_INT 0
54922: ST_TO_ADDR
// end else
54923: GO 55196
// if not ( HasTask ( Explorer1 ) ) and not ( HasTask ( Explorer2 ) ) and ( Step_On_The_Way < Way_of_Explorers [ Explorer_Way_Number ] ) then
54925: LD_EXP 100
54929: PPUSH
54930: CALL_OW 314
54934: NOT
54935: PUSH
54936: LD_EXP 101
54940: PPUSH
54941: CALL_OW 314
54945: NOT
54946: AND
54947: PUSH
54948: LD_EXP 209
54952: PUSH
54953: LD_EXP 208
54957: PUSH
54958: LD_EXP 210
54962: ARRAY
54963: LESS
54964: AND
54965: IFFALSE 55196
// begin Wait ( 0 0$2 ) ;
54967: LD_INT 70
54969: PPUSH
54970: CALL_OW 67
// if not ( SeeXY ( americans , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ) or ( Rand ( 1 , 20 ) = 1 ) then
54974: LD_EXP 176
54978: PPUSH
54979: LD_EXP 208
54983: PUSH
54984: LD_EXP 210
54988: ARRAY
54989: PUSH
54990: LD_EXP 209
54994: ARRAY
54995: PUSH
54996: LD_INT 1
54998: ARRAY
54999: PPUSH
55000: LD_EXP 208
55004: PUSH
55005: LD_EXP 210
55009: ARRAY
55010: PUSH
55011: LD_EXP 209
55015: ARRAY
55016: PUSH
55017: LD_INT 2
55019: ARRAY
55020: PPUSH
55021: CALL_OW 293
55025: NOT
55026: PUSH
55027: LD_INT 1
55029: PPUSH
55030: LD_INT 20
55032: PPUSH
55033: CALL_OW 12
55037: PUSH
55038: LD_INT 1
55040: EQUAL
55041: OR
55042: IFFALSE 55196
// begin ComMoveXY ( Explorer1 , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ;
55044: LD_EXP 100
55048: PPUSH
55049: LD_EXP 208
55053: PUSH
55054: LD_EXP 210
55058: ARRAY
55059: PUSH
55060: LD_EXP 209
55064: ARRAY
55065: PUSH
55066: LD_INT 1
55068: ARRAY
55069: PPUSH
55070: LD_EXP 208
55074: PUSH
55075: LD_EXP 210
55079: ARRAY
55080: PUSH
55081: LD_EXP 209
55085: ARRAY
55086: PUSH
55087: LD_INT 2
55089: ARRAY
55090: PPUSH
55091: CALL_OW 111
// AddComHold ( Explorer1 ) ;
55095: LD_EXP 100
55099: PPUSH
55100: CALL_OW 200
// AddComForceInvisible ( Explorer1 ) ;
55104: LD_EXP 100
55108: PPUSH
55109: CALL_OW 497
// ComMoveXY ( Explorer2 , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ;
55113: LD_EXP 101
55117: PPUSH
55118: LD_EXP 208
55122: PUSH
55123: LD_EXP 210
55127: ARRAY
55128: PUSH
55129: LD_EXP 209
55133: ARRAY
55134: PUSH
55135: LD_INT 1
55137: ARRAY
55138: PPUSH
55139: LD_EXP 208
55143: PUSH
55144: LD_EXP 210
55148: ARRAY
55149: PUSH
55150: LD_EXP 209
55154: ARRAY
55155: PUSH
55156: LD_INT 2
55158: ARRAY
55159: PPUSH
55160: CALL_OW 111
// AddComHold ( Explorer2 ) ;
55164: LD_EXP 101
55168: PPUSH
55169: CALL_OW 200
// AddComForceInvisible ( Explorer2 ) ;
55173: LD_EXP 101
55177: PPUSH
55178: CALL_OW 497
// Step_On_The_Way = Step_On_The_Way + 1 ;
55182: LD_ADDR_EXP 209
55186: PUSH
55187: LD_EXP 209
55191: PUSH
55192: LD_INT 1
55194: PLUS
55195: ST_TO_ADDR
// end ; end ; end ; end else
55196: GO 55312
// begin if IsLive ( Explorer1 ) and not ( IsInArea ( Explorer1 , Al_Base ) ) then
55198: LD_EXP 100
55202: PPUSH
55203: CALL_OW 300
55207: PUSH
55208: LD_EXP 100
55212: PPUSH
55213: LD_INT 18
55215: PPUSH
55216: CALL_OW 308
55220: NOT
55221: AND
55222: IFFALSE 55245
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
55224: LD_EXP 100
55228: PPUSH
55229: LD_INT 245
55231: PPUSH
55232: LD_INT 186
55234: PPUSH
55235: LD_INT 3
55237: PPUSH
55238: LD_INT 1
55240: PPUSH
55241: CALL_OW 483
// if IsLive ( Explorer2 ) and not ( IsInArea ( Explorer2 , Al_Base ) ) then
55245: LD_EXP 101
55249: PPUSH
55250: CALL_OW 300
55254: PUSH
55255: LD_EXP 101
55259: PPUSH
55260: LD_INT 18
55262: PPUSH
55263: CALL_OW 308
55267: NOT
55268: AND
55269: IFFALSE 55292
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
55271: LD_EXP 101
55275: PPUSH
55276: LD_INT 245
55278: PPUSH
55279: LD_INT 186
55281: PPUSH
55282: LD_INT 3
55284: PPUSH
55285: LD_INT 1
55287: PPUSH
55288: CALL_OW 483
// HealExplorers ;
55292: CALL 53197 0 0
// SelectExplorers ;
55296: CALL 51924 0 0
// Step_On_The_Way = 1 ;
55300: LD_ADDR_EXP 209
55304: PUSH
55305: LD_INT 1
55307: ST_TO_ADDR
// SetExplorerWayNumber ;
55308: CALL 54232 0 0
// end ; enable ;
55312: ENABLE
// end else
55313: GO 55316
// disable ;
55315: DISABLE
// Wood_registry = false ;
55316: LD_ADDR_EXP 229
55320: PUSH
55321: LD_INT 0
55323: ST_TO_ADDR
// end else
55324: GO 55327
// enable ;
55326: ENABLE
// end ;
55327: PPOPN 7
55329: END
// export function GuardAllianceWood ; var Uns , Un , Americans_to_capture , Captured_american ; begin
55330: LD_INT 0
55332: PPUSH
55333: PPUSH
55334: PPUSH
55335: PPUSH
55336: PPUSH
// if not ( Wood_registry ) then
55337: LD_EXP 229
55341: NOT
55342: IFFALSE 55567
// begin Wood_registry = true ;
55344: LD_ADDR_EXP 229
55348: PUSH
55349: LD_INT 1
55351: ST_TO_ADDR
// Americans_to_capture = [ ] ;
55352: LD_ADDR_VAR 0 4
55356: PUSH
55357: EMPTY
55358: ST_TO_ADDR
// for Un in All_americans do
55359: LD_ADDR_VAR 0 3
55363: PUSH
55364: LD_EXP 61
55368: PUSH
55369: FOR_IN
55370: IFFALSE 55472
// if IsInArea ( Un , Ali_wood ) then
55372: LD_VAR 0 3
55376: PPUSH
55377: LD_INT 9
55379: PPUSH
55380: CALL_OW 308
55384: IFFALSE 55470
// begin if ( GetType ( Un ) = unit_human ) then
55386: LD_VAR 0 3
55390: PPUSH
55391: CALL_OW 247
55395: PUSH
55396: LD_INT 1
55398: EQUAL
55399: IFFALSE 55419
// Americans_to_capture = Americans_to_capture ^ Un else
55401: LD_ADDR_VAR 0 4
55405: PUSH
55406: LD_VAR 0 4
55410: PUSH
55411: LD_VAR 0 3
55415: ADD
55416: ST_TO_ADDR
55417: GO 55470
// if ( GetType ( Un ) = unit_vehicle ) and ( UnitsInside ( Un ) <> 0 ) then
55419: LD_VAR 0 3
55423: PPUSH
55424: CALL_OW 247
55428: PUSH
55429: LD_INT 2
55431: EQUAL
55432: PUSH
55433: LD_VAR 0 3
55437: PPUSH
55438: CALL_OW 313
55442: PUSH
55443: LD_INT 0
55445: NONEQUAL
55446: AND
55447: IFFALSE 55470
// Americans_to_capture = Americans_to_capture ^ UnitsInside ( Un ) ;
55449: LD_ADDR_VAR 0 4
55453: PUSH
55454: LD_VAR 0 4
55458: PUSH
55459: LD_VAR 0 3
55463: PPUSH
55464: CALL_OW 313
55468: ADD
55469: ST_TO_ADDR
// end ;
55470: GO 55369
55472: POP
55473: POP
// for Captured_american in Americans_to_capture do
55474: LD_ADDR_VAR 0 5
55478: PUSH
55479: LD_VAR 0 4
55483: PUSH
55484: FOR_IN
55485: IFFALSE 55557
// begin Number_of_captured_americans = Number_of_captured_americans + 1 ;
55487: LD_ADDR_EXP 211
55491: PUSH
55492: LD_EXP 211
55496: PUSH
55497: LD_INT 1
55499: PLUS
55500: ST_TO_ADDR
// if ( Number_of_captured_americans = 1 ) or ( Captured_american = JMM ) then
55501: LD_EXP 211
55505: PUSH
55506: LD_INT 1
55508: EQUAL
55509: PUSH
55510: LD_VAR 0 5
55514: PUSH
55515: LD_EXP 1
55519: EQUAL
55520: OR
55521: IFFALSE 55540
// begin SohwCaptureToPlayer ( Captured_american , 0 , 0 ) ;
55523: LD_VAR 0 5
55527: PPUSH
55528: LD_INT 0
55530: PPUSH
55531: LD_INT 0
55533: PPUSH
55534: CALL 53285 0 3
// end else
55538: GO 55555
// begin CapturewWithoutShow ( Captured_american , 0 , 0 ) ;
55540: LD_VAR 0 5
55544: PPUSH
55545: LD_INT 0
55547: PPUSH
55548: LD_INT 0
55550: PPUSH
55551: CALL 54004 0 3
// end ; end ;
55555: GO 55484
55557: POP
55558: POP
// Wood_registry = false ;
55559: LD_ADDR_EXP 229
55563: PUSH
55564: LD_INT 0
55566: ST_TO_ADDR
// end ; end ;
55567: LD_VAR 0 1
55571: RET
// every 0 0$1 marked 16 do var Un ;
55572: GO 55574
55574: DISABLE
55575: LD_INT 0
55577: PPUSH
// begin for Un in Captured_Units_of_Alliance do
55578: LD_ADDR_VAR 0 1
55582: PUSH
55583: LD_EXP 99
55587: PUSH
55588: FOR_IN
55589: IFFALSE 55639
// if GetDistUnitXY ( Un , 226 , 197 ) < 2 then
55591: LD_VAR 0 1
55595: PPUSH
55596: LD_INT 226
55598: PPUSH
55599: LD_INT 197
55601: PPUSH
55602: CALL_OW 297
55606: PUSH
55607: LD_INT 2
55609: LESS
55610: IFFALSE 55637
// begin RemoveUnit ( Un ) ;
55612: LD_VAR 0 1
55616: PPUSH
55617: CALL_OW 64
// Captured_Units_of_Alliance = Captured_Units_of_Alliance diff Un ;
55621: LD_ADDR_EXP 99
55625: PUSH
55626: LD_EXP 99
55630: PUSH
55631: LD_VAR 0 1
55635: DIFF
55636: ST_TO_ADDR
// end ;
55637: GO 55588
55639: POP
55640: POP
// if Captured_Units_of_Alliance > 0 then
55641: LD_EXP 99
55645: PUSH
55646: LD_INT 0
55648: GREATER
55649: IFFALSE 55684
// begin enable ;
55651: ENABLE
// for Un in Captured_Units_of_Alliance do
55652: LD_ADDR_VAR 0 1
55656: PUSH
55657: LD_EXP 99
55661: PUSH
55662: FOR_IN
55663: IFFALSE 55682
// ComMoveXY ( Un , 226 , 197 ) ;
55665: LD_VAR 0 1
55669: PPUSH
55670: LD_INT 226
55672: PPUSH
55673: LD_INT 197
55675: PPUSH
55676: CALL_OW 111
55680: GO 55662
55682: POP
55683: POP
// end ; end ;
55684: PPOPN 1
55686: END
// every 0 0$1 trigger ( Tick > Time_of_first_capture ) marked 10 do
55687: LD_OWVAR 1
55691: PUSH
55692: LD_EXP 204
55696: GREATER
55697: IFFALSE 55707
55699: GO 55701
55701: DISABLE
// begin enable ( Explorers_Can_Go ) ;
55702: LD_EXP 153
55706: ENABLE_MARKED
// end ; end_of_file
55707: END
// function CratesInArea ( area ) ; begin
55708: LD_INT 0
55710: PPUSH
// result = GetResourceArea ( area , mat_cans ) ;
55711: LD_ADDR_VAR 0 2
55715: PUSH
55716: LD_VAR 0 1
55720: PPUSH
55721: LD_INT 1
55723: PPUSH
55724: CALL_OW 287
55728: ST_TO_ADDR
// end ;
55729: LD_VAR 0 2
55733: RET
// function ln ( numb ) ; var i ; begin
55734: LD_INT 0
55736: PPUSH
55737: PPUSH
// i = 0 ;
55738: LD_ADDR_VAR 0 3
55742: PUSH
55743: LD_INT 0
55745: ST_TO_ADDR
// while ( i < 10 ) and ( numb > 1 ) do
55746: LD_VAR 0 3
55750: PUSH
55751: LD_INT 10
55753: LESS
55754: PUSH
55755: LD_VAR 0 1
55759: PUSH
55760: LD_INT 1
55762: GREATER
55763: AND
55764: IFFALSE 55796
// begin numb = numb div 2 ;
55766: LD_ADDR_VAR 0 1
55770: PUSH
55771: LD_VAR 0 1
55775: PUSH
55776: LD_INT 2
55778: DIV
55779: ST_TO_ADDR
// i = i + 1 ;
55780: LD_ADDR_VAR 0 3
55784: PUSH
55785: LD_VAR 0 3
55789: PUSH
55790: LD_INT 1
55792: PLUS
55793: ST_TO_ADDR
// end ;
55794: GO 55746
// result = i ;
55796: LD_ADDR_VAR 0 2
55800: PUSH
55801: LD_VAR 0 3
55805: ST_TO_ADDR
// end ;
55806: LD_VAR 0 2
55810: RET
// function TimeStep ; var r , hlp ; begin
55811: LD_INT 0
55813: PPUSH
55814: PPUSH
55815: PPUSH
// r = tick div 400 ;
55816: LD_ADDR_VAR 0 2
55820: PUSH
55821: LD_OWVAR 1
55825: PUSH
55826: LD_INT 400
55828: DIV
55829: ST_TO_ADDR
// hlp = ln ( r ) + 1 ;
55830: LD_ADDR_VAR 0 3
55834: PUSH
55835: LD_VAR 0 2
55839: PPUSH
55840: CALL 55734 0 1
55844: PUSH
55845: LD_INT 1
55847: PLUS
55848: ST_TO_ADDR
// if r > 8 then
55849: LD_VAR 0 2
55853: PUSH
55854: LD_INT 8
55856: GREATER
55857: IFFALSE 55869
// hlp = 8 else
55859: LD_ADDR_VAR 0 3
55863: PUSH
55864: LD_INT 8
55866: ST_TO_ADDR
55867: GO 55879
// hlp = r ;
55869: LD_ADDR_VAR 0 3
55873: PUSH
55874: LD_VAR 0 2
55878: ST_TO_ADDR
// result = hlp ;
55879: LD_ADDR_VAR 0 1
55883: PUSH
55884: LD_VAR 0 3
55888: ST_TO_ADDR
// end ;
55889: LD_VAR 0 1
55893: RET
// function CreateNewCrates ( Number ) ; var Old_Crates , area ; begin
55894: LD_INT 0
55896: PPUSH
55897: PPUSH
55898: PPUSH
// area = Plan3 ;
55899: LD_ADDR_VAR 0 4
55903: PUSH
55904: LD_INT 31
55906: ST_TO_ADDR
// Old_Crates = ln ( CratesInArea ( area ) ) ;
55907: LD_ADDR_VAR 0 3
55911: PUSH
55912: LD_VAR 0 4
55916: PPUSH
55917: CALL 55708 0 1
55921: PPUSH
55922: CALL 55734 0 1
55926: ST_TO_ADDR
// if Old_Crates < 10 then
55927: LD_VAR 0 3
55931: PUSH
55932: LD_INT 10
55934: LESS
55935: IFFALSE 55988
// if rand ( 1 , 100 ) < 25 + ( 15 * ( 10 - Old_Crates ) ) / 2 then
55937: LD_INT 1
55939: PPUSH
55940: LD_INT 100
55942: PPUSH
55943: CALL_OW 12
55947: PUSH
55948: LD_INT 25
55950: PUSH
55951: LD_INT 15
55953: PUSH
55954: LD_INT 10
55956: PUSH
55957: LD_VAR 0 3
55961: MINUS
55962: MUL
55963: PUSH
55964: LD_INT 2
55966: DIVREAL
55967: PLUS
55968: LESS
55969: IFFALSE 55988
// CreateCratesArea ( Number , area , true ) ;
55971: LD_VAR 0 1
55975: PPUSH
55976: LD_VAR 0 4
55980: PPUSH
55981: LD_INT 1
55983: PPUSH
55984: CALL_OW 55
// end ;
55988: LD_VAR 0 2
55992: RET
// every 0 0$5 trigger tick > Time_Of_Crates do var Step ;
55993: LD_OWVAR 1
55997: PUSH
55998: LD_EXP 222
56002: GREATER
56003: IFFALSE 56079
56005: GO 56007
56007: DISABLE
56008: LD_INT 0
56010: PPUSH
// begin Step = TimeStep ;
56011: LD_ADDR_VAR 0 1
56015: PUSH
56016: CALL 55811 0 0
56020: ST_TO_ADDR
// Time_Of_Crates = Time_Of_Crates + 0 0$10 + Rand ( 0 0$6 * Step , 0 0$05 + 0 0$12 * Step ) ;
56021: LD_ADDR_EXP 222
56025: PUSH
56026: LD_EXP 222
56030: PUSH
56031: LD_INT 350
56033: PLUS
56034: PUSH
56035: LD_INT 210
56037: PUSH
56038: LD_VAR 0 1
56042: MUL
56043: PPUSH
56044: LD_INT 175
56046: PUSH
56047: LD_INT 420
56049: PUSH
56050: LD_VAR 0 1
56054: MUL
56055: PLUS
56056: PPUSH
56057: CALL_OW 12
56061: PLUS
56062: ST_TO_ADDR
// CreateNewCrates ( Rand ( 3 , 5 ) ) ;
56063: LD_INT 3
56065: PPUSH
56066: LD_INT 5
56068: PPUSH
56069: CALL_OW 12
56073: PPUSH
56074: CALL 55894 0 1
// enable ;
56078: ENABLE
// end ; end_of_file
56079: PPOPN 1
56081: END
// every 0 0$2 + 0 0$0.1 do
56082: GO 56084
56084: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
56085: LD_INT 22
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 25
56100: PUSH
56101: LD_INT 12
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 25
56110: PUSH
56111: LD_INT 16
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 25
56120: PUSH
56121: LD_INT 15
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 25
56130: PUSH
56131: LD_INT 17
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PPUSH
56149: CALL_OW 69
56153: PUSH
56154: LD_INT 22
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 21
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: LD_INT 25
56182: PUSH
56183: LD_INT 12
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 25
56192: PUSH
56193: LD_INT 16
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 25
56202: PUSH
56203: LD_INT 15
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 25
56212: PUSH
56213: LD_INT 17
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: PPUSH
56236: CALL_OW 69
56240: GREATER
56241: IFFALSE 56252
// begin SetAchievement ( ACH_POTA ) ;
56243: LD_STRING ACH_POTA
56245: PPUSH
56246: CALL_OW 543
// exit ;
56250: GO 56253
// end ; enable ;
56252: ENABLE
// end ;
56253: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle ) ; begin
56254: LD_INT 0
56256: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = 1 then
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 255
56266: PUSH
56267: LD_INT 1
56269: EQUAL
56270: IFFALSE 56279
// SetAchievement ( ACH_RAD ) ;
56272: LD_STRING ACH_RAD
56274: PPUSH
56275: CALL_OW 543
// end ;
56279: LD_VAR 0 2
56283: RET
// export function SA_OnLegionJoin ; begin
56284: LD_INT 0
56286: PPUSH
// SetAchievement ( ACH_LS ) ;
56287: LD_STRING ACH_LS
56289: PPUSH
56290: CALL_OW 543
// end ;
56294: LD_VAR 0 1
56298: RET
// export function SA_OnMissionComplete ; begin
56299: LD_INT 0
56301: PPUSH
// SetAchievement ( ACH_GBA ) ;
56302: LD_STRING ACH_GBA
56304: PPUSH
56305: CALL_OW 543
// end ;
56309: LD_VAR 0 1
56313: RET
// export function SA_OnVsevolodAppear ; begin
56314: LD_INT 0
56316: PPUSH
// SetAchievement ( ACH_MMB ) ;
56317: LD_STRING ACH_MMB
56319: PPUSH
56320: CALL_OW 543
// end ; end_of_file
56324: LD_VAR 0 1
56328: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
56329: LD_INT 0
56331: PPUSH
56332: PPUSH
// if not missionNumber then
56333: LD_VAR 0 2
56337: NOT
56338: IFFALSE 56342
// exit ;
56340: GO 56472
// achiv := false ;
56342: LD_ADDR_VAR 0 7
56346: PUSH
56347: LD_INT 0
56349: ST_TO_ADDR
// case campaignNumber of 1 :
56350: LD_VAR 0 1
56354: PUSH
56355: LD_INT 1
56357: DOUBLE
56358: EQUAL
56359: IFTRUE 56363
56361: GO 56374
56363: POP
// achiv := ACH_GOTA ; 2 :
56364: LD_ADDR_VAR 0 7
56368: PUSH
56369: LD_STRING ACH_GOTA
56371: ST_TO_ADDR
56372: GO 56424
56374: LD_INT 2
56376: DOUBLE
56377: EQUAL
56378: IFTRUE 56382
56380: GO 56385
56382: POP
// ; 3 :
56383: GO 56424
56385: LD_INT 3
56387: DOUBLE
56388: EQUAL
56389: IFTRUE 56393
56391: GO 56404
56393: POP
// achiv := ACH_MOTSU ; 4 :
56394: LD_ADDR_VAR 0 7
56398: PUSH
56399: LD_STRING ACH_MOTSU
56401: ST_TO_ADDR
56402: GO 56424
56404: LD_INT 4
56406: DOUBLE
56407: EQUAL
56408: IFTRUE 56412
56410: GO 56423
56412: POP
// achiv := ACH_LOP ; end ;
56413: LD_ADDR_VAR 0 7
56417: PUSH
56418: LD_STRING ACH_LOP
56420: ST_TO_ADDR
56421: GO 56424
56423: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
56424: LD_OWVAR 67
56428: PUSH
56429: LD_INT 3
56431: EQUAL
56432: PUSH
56433: LD_VAR 0 7
56437: AND
56438: PUSH
56439: LD_VAR 0 3
56443: AND
56444: PUSH
56445: LD_VAR 0 4
56449: AND
56450: PUSH
56451: LD_VAR 0 5
56455: AND
56456: IFFALSE 56472
// SetAchievementEX ( achiv , missionNumber ) ;
56458: LD_VAR 0 7
56462: PPUSH
56463: LD_VAR 0 2
56467: PPUSH
56468: CALL_OW 564
// end ;
56472: LD_VAR 0 6
56476: RET
// export function SA_BehemothConstructed ; begin
56477: LD_INT 0
56479: PPUSH
// SetAchievement ( ACH_SMC ) ;
56480: LD_STRING ACH_SMC
56482: PPUSH
56483: CALL_OW 543
// end ;
56487: LD_VAR 0 1
56491: RET
