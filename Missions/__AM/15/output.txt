// export JMM , Powell , Bobby , Cyrus , Lisa , Frank , Brown , Donaldson , Gladstone , Cornell ; export Denis , Joan , Kurt , Yamoko , Gary , Simms , Stevens , Coonie , Burlak , Roth ; export Friend , Kozlov , Baker , VanHouten , Vsevolod , Platonov , Kovaljuk ; export Omar , Heike ; export OtherWithJMM , OtherNotJMM ; export legion_cheated , kappa_saved , woman_saved , kappa_delayed , Woman_in_am14 ; export JMM_woman , Woman_alive , Initial_JMM_vehicle , Initial_Woman_vehicle ; export BobbyLoc , CyrusLoc , LisaLoc , FrankLoc , BrownLoc , DonaldsonLoc ; export VanHoutenLoc , GladstoneLoc , JoanLoc , YamokoLoc ; export GaryLoc , DenisLoc , CornellLoc ; export Roth_Captured ; export Russian_project_canceled ; export No_Looses ; export JMM_veh , Woman_veh ; export Am1_vehicles ; export Captured_vehicles ; export All_americans , Named_americans ; export Remaining_Named , Remaining_Powells , Carriers ; export End_of_journey ; export JMM_Helpers ; export CenterJMM ; export Number_of_JMM_Helpers ; export True_Americans ; export Not_True_Americans ; export Omar_Soldiers ; export Omar_Scientists ; export Omar_Vehicles ; export Number_of_Omar_Soldiers ; export Number_of_Omar_Hovercrafts ; export Number_of_Omar_Flamethrowers ; export Number_of_Omar_RocketLaunchers ; export All_arabians ; export Arabian_soldiers ; export Arabian_Engineers ; export Arabian_scientists ; export Arabian_mechanics ; export Arabian_apemens ; export Control_Driver ; export Arabian_Outside ; export New_ArRu_Fact ; export Arabian_buildings ; export Number_of_Arabian_Soldiers ; export Number_of_Arabian_scientists ; export Number_of_Arabian_mechanics ; export Number_of_Arabian_Engineers ; export All_alliances ; export Alliance_rus_soldiers ; export Alliance_am_soldiers ; export Alliance_rus_scientists ; export Alliance_am_scientists ; export Alliance_Explorers ; export Captured_Units_of_Alliance ; export Explorer1 , Explorer2 ; export Alliance_Doctors ; export Number_of_AllAm_Soldiers ; export Number_of_AllAm_Scientists ; export Number_of_AllRu_Soldiers ; export Number_of_AllRu_Scientists ; export Russian_soldiers ; export Russian_scientists ; export Russian_engineers ; export Russian_mechanics ; export All_russians ; export Rus_doctors ; export Russian_Buildings ; export R1_Attack_Time ; export R_attack_time ; export R1_Attack_counter ; export R_Attack_counter ; export R1_Attack_group ; export Main_R1_Attack_group ; export Main_R_Attack_Group ; export R_Attack_Group ; export New_Patrol_Group , R1Patrol_group ; export R_Patrol_group ; export R_Constructed_Attack ; export R_Constructed_Patrol ; export Behemot_Engineers ; export Russian_Behemots ; export New_Behemots ; export Rus_Attack_Time ; export R_New_Attack ; export R_New_Patrol ; export Number_of_russian_soldiers ; export Number_of_russian_scientists ; export Number_of_russian_mechanics ; export Number_of_russian_engineers ; export First_JMM_Task ; export out_of_base ; export Great_ingame_video ; export R1_attack ; export Protect_Powell ; export Talk_Bomba ; export Center_on_fight ; export JMM_Is_Ready ; export Ingame_Run_over ; export Game_Continue ; export Vsevolod_Comes ; export Woman_Comes ; export Matherlod_Contamined1 ; export Matherlod_Contamined2 ; export Matherlod_Contamined3 ; export Alliance_Captured ; export Explorers_Can_Go ; export Not_End_of_Alliance ; export JMM_has_surrounded ; export Friend_Escapes ; export Not_Ingame_Run_over ; export End_of_m ; export Timer ; export JMM_Captured ; export Map_am_base , Map_rus_attack , Send_Helpers ; export Start_Am1_Base ; export Send_Material ; export Capture_JMM_Vehicles ; export First_Powells_Attack ; export Second_Powells_Attack ; export Run_JMM_Vehicles ; export Rus1_Attack ; export Rus_Attack ; export Retreat_Report ; export JMM_Talk ; export Send_Arabian_Back ; export Link_Bombs ; export americans , americans1 , russians , russians1 , arabians , arabians1 , alliance , Explorers_Side ; export human_difficulty_skill , apeman_difficulty_skill ; export Skip ; export Powell_Warning ; export Warning_Time ; export Time_of_Ingame_Run_Over ; export First_ingame_done ; export R1_Attack_Overflow ; export Powell_vehicle ; export Powell_Attack_Counter ; export Center_To_Powell ; export Debug_Constant ; export R1_Attack_Continues ; export Number_of_crates ; export Construction_of_Arabian_rocket ; export Number_of_Arabian_rocket ; export Stevens_Coming_Time ; export Woman_Coming_Time ; export Alliance_broadcast ; export Behemots_broadcast ; export Time_of_first_capture ; export Really_Kurt ; export Time_of_capturing ; export Alliance_def_buildings ; export Way_of_Explorers ; export Step_On_The_Way ; export Explorer_Way_Number ; export Number_of_captured_americans ; export Alaskite_Bomb_Time ; export Arabian_siberite_attack_time ; export R_Attack_Overflow ; export Russian_Siberite_Attack ; export Russian_Siberite_rockets ; export Time_to_Think_Over ; export The_Last_Time ; export Friend_Accepted ; export Friend_Escaped ; export Number_of_Behemots ; export Time_Of_Crates ; export Number_of_complete_Behemots ; export Behemot_Places ; export Behemot_attack_time ; export Friend_has_come ; export The_Last_Arabian_Attack_Begun ; export Friend_has_to_escape ; export Wood_registry ; export Add_Legion_Objectives ; export Starting_Construction_Time ; export Heike_Last_Words ; export Joan_semafor ; export Arabian_reg_id ; export Arabian_def_id ; export Arabian_build_id ; export Russian1_reg_id ; export Russian1_att_id ; export Russian1_reg1_id ; export Russian1_patr_id ; export Russian_reg_id ; export Russian_att_id ; export Russian_patr_id ; export Russian_reg_def_id ; export Russian_def_id ; export Russian_build_id ; export Alliance_reg_id ; export Alliance_def_id ; export Alliance_wood_reg_id ; function Set_variables ; begin
   0: LD_INT 0
   2: PPUSH
// CenterJMM = false ;
   3: LD_ADDR_EXP 68
   7: PUSH
   8: LD_INT 0
  10: ST_TO_ADDR
// End_of_journey = false ;
  11: LD_ADDR_EXP 66
  15: PUSH
  16: LD_INT 0
  18: ST_TO_ADDR
// Skip = false ;
  19: LD_ADDR_EXP 186
  23: PUSH
  24: LD_INT 0
  26: ST_TO_ADDR
// Captured_vehicles = [ ] ;
  27: LD_ADDR_EXP 60
  31: PUSH
  32: EMPTY
  33: ST_TO_ADDR
// R1_Attack_time = 0 ;
  34: LD_ADDR_EXP 114
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// R1_Attack_counter = 0 ;
  42: LD_ADDR_EXP 116
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// R1_Attack_group = [ ] ;
  50: LD_ADDR_EXP 118
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// Main_R1_Attack_group = [ ] ;
  57: LD_ADDR_EXP 119
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// Main_R_Attack_Group = [ ] ;
  64: LD_ADDR_EXP 120
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// Powell_warning = 0 ;
  71: LD_ADDR_EXP 187
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// Warning_Time = 0 ;
  79: LD_ADDR_EXP 188
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// Time_of_Ingame_Run_Over = 100 100$0 ;
  87: LD_ADDR_EXP 189
  91: PUSH
  92: LD_INT 210000
  94: ST_TO_ADDR
// First_ingame_done = false ;
  95: LD_ADDR_EXP 190
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// Rus_doctors = [ ] ;
 103: LD_ADDR_EXP 112
 107: PUSH
 108: EMPTY
 109: ST_TO_ADDR
// R1_Attack_Overflow = 0 ;
 110: LD_ADDR_EXP 191
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// New_Patrol_Group = 0 ;
 118: LD_ADDR_EXP 122
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// R1Patrol_group = 0 ;
 126: LD_ADDR_EXP 123
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// R_Patrol_group = 0 ;
 134: LD_ADDR_EXP 124
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// Arabian_Outside = 0 ;
 142: LD_ADDR_EXP 86
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// Powell_vehicle = 0 ;
 150: LD_ADDR_EXP 192
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// Powell_Attack_Counter = 1 ;
 158: LD_ADDR_EXP 193
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Center_To_Powell = false ;
 166: LD_ADDR_EXP 194
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// R1_Attack_Continues = false ;
 174: LD_ADDR_EXP 196
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// New_ArRu_Fact = 0 ;
 182: LD_ADDR_EXP 87
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Construction_of_Arabian_rocket = false ;
 190: LD_ADDR_EXP 198
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// Number_of_Arabian_rocket = 1 ;
 198: LD_ADDR_EXP 199
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// Alliance_def_buildings = [ AllT1 , AllT2 , AllT3 , AllT4 , AllT5 , AllT7 , AllT8 ] ;
 206: LD_ADDR_EXP 207
 210: PUSH
 211: LD_INT 50
 213: PUSH
 214: LD_INT 54
 216: PUSH
 217: LD_INT 51
 219: PUSH
 220: LD_INT 52
 222: PUSH
 223: LD_INT 53
 225: PUSH
 226: LD_INT 38
 228: PUSH
 229: LD_INT 44
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: ST_TO_ADDR
// True_Americans = [ ] ;
 241: LD_ADDR_EXP 70
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// Not_True_Americans = [ ] ;
 248: LD_ADDR_EXP 71
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// Roth_Captured = false ;
 255: LD_ADDR_EXP 54
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// Russian_project_canceled = true ;
 263: LD_ADDR_EXP 55
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// No_Looses = true ;
 271: LD_ADDR_EXP 56
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// Captured_Units_of_Alliance = [ ] ;
 279: LD_ADDR_EXP 99
 283: PUSH
 284: EMPTY
 285: ST_TO_ADDR
// Way_of_Explorers = [ [ [ 183 , 160 ] , [ 142 , 131 ] , [ 120 , 104 ] , [ 95 , 71 ] , [ 78 , 62 ] ] , [ [ 182 , 155 ] , [ 173 , 136 ] , [ 156 , 94 ] , [ 126 , 73 ] , [ 95 , 71 ] , [ 78 , 62 ] ] ] ;
 286: LD_ADDR_EXP 208
 290: PUSH
 291: LD_INT 183
 293: PUSH
 294: LD_INT 160
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 142
 303: PUSH
 304: LD_INT 131
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 120
 313: PUSH
 314: LD_INT 104
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 95
 323: PUSH
 324: LD_INT 71
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 78
 333: PUSH
 334: LD_INT 62
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 182
 350: PUSH
 351: LD_INT 155
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: LD_INT 173
 360: PUSH
 361: LD_INT 136
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: LD_INT 156
 370: PUSH
 371: LD_INT 94
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 126
 380: PUSH
 381: LD_INT 73
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 95
 390: PUSH
 391: LD_INT 71
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 78
 400: PUSH
 401: LD_INT 62
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: ST_TO_ADDR
// Explorer1 = 0 ;
 420: LD_ADDR_EXP 100
 424: PUSH
 425: LD_INT 0
 427: ST_TO_ADDR
// Explorer2 = 0 ;
 428: LD_ADDR_EXP 101
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// Step_On_The_Way = 1 ;
 436: LD_ADDR_EXP 209
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// Explorer_Way_Number = 1 ;
 444: LD_ADDR_EXP 210
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// Number_of_captured_americans = 0 ;
 452: LD_ADDR_EXP 211
 456: PUSH
 457: LD_INT 0
 459: ST_TO_ADDR
// R_Attack_Group = [ ] ;
 460: LD_ADDR_EXP 121
 464: PUSH
 465: EMPTY
 466: ST_TO_ADDR
// R_Attack_Overflow = 0 ;
 467: LD_ADDR_EXP 214
 471: PUSH
 472: LD_INT 0
 474: ST_TO_ADDR
// R_Constructed_Attack = [ ] ;
 475: LD_ADDR_EXP 125
 479: PUSH
 480: EMPTY
 481: ST_TO_ADDR
// R_Constructed_Patrol = [ ] ;
 482: LD_ADDR_EXP 126
 486: PUSH
 487: EMPTY
 488: ST_TO_ADDR
// Russian_Siberite_Attack = false ;
 489: LD_ADDR_EXP 215
 493: PUSH
 494: LD_INT 0
 496: ST_TO_ADDR
// Russian_Siberite_rockets = [ RR1 ] ;
 497: LD_ADDR_EXP 216
 501: PUSH
 502: LD_INT 146
 504: PUSH
 505: EMPTY
 506: LIST
 507: ST_TO_ADDR
// Time_to_Think_Over = 0 ;
 508: LD_ADDR_EXP 217
 512: PUSH
 513: LD_INT 0
 515: ST_TO_ADDR
// The_Last_Time = 0 ;
 516: LD_ADDR_EXP 218
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// Friend_Accepted = false ;
 524: LD_ADDR_EXP 219
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// Friend_Escaped = false ;
 532: LD_ADDR_EXP 220
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// Time_Of_Crates = 0 ;
 540: LD_ADDR_EXP 222
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// Behemot_Engineers = [ ] ;
 548: LD_ADDR_EXP 127
 552: PUSH
 553: EMPTY
 554: ST_TO_ADDR
// Behemot_Places = [ [ 191 , 117 ] , [ 194 , 124 ] , [ 197 , 117 ] , [ 200 , 122 ] , [ 203 , 118 ] , [ 206 , 126 ] , [ 210 , 127 ] , [ 208 , 122 ] , [ 213 , 124 ] ] ;
 555: LD_ADDR_EXP 224
 559: PUSH
 560: LD_INT 191
 562: PUSH
 563: LD_INT 117
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 194
 572: PUSH
 573: LD_INT 124
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 197
 582: PUSH
 583: LD_INT 117
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 200
 592: PUSH
 593: LD_INT 122
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 203
 602: PUSH
 603: LD_INT 118
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 206
 612: PUSH
 613: LD_INT 126
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 210
 622: PUSH
 623: LD_INT 127
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 208
 632: PUSH
 633: LD_INT 122
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 213
 642: PUSH
 643: LD_INT 124
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: ST_TO_ADDR
// Number_of_complete_Behemots = 0 ;
 661: LD_ADDR_EXP 223
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// Russian_Behemots = [ ] ;
 669: LD_ADDR_EXP 128
 673: PUSH
 674: EMPTY
 675: ST_TO_ADDR
// New_Behemots = [ ] ;
 676: LD_ADDR_EXP 129
 680: PUSH
 681: EMPTY
 682: ST_TO_ADDR
// JMM_Helpers = [ ] ;
 683: LD_ADDR_EXP 67
 687: PUSH
 688: EMPTY
 689: ST_TO_ADDR
// R_New_Attack = [ ] ;
 690: LD_ADDR_EXP 131
 694: PUSH
 695: EMPTY
 696: ST_TO_ADDR
// R_New_Patrol = [ ] ;
 697: LD_ADDR_EXP 132
 701: PUSH
 702: EMPTY
 703: ST_TO_ADDR
// Friend_has_come = false ;
 704: LD_ADDR_EXP 226
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// The_Last_Arabian_Attack_Begun = false ;
 712: LD_ADDR_EXP 227
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// Friend_has_to_escape = false ;
 720: LD_ADDR_EXP 228
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// Wood_registry = false ;
 728: LD_ADDR_EXP 229
 732: PUSH
 733: LD_INT 0
 735: ST_TO_ADDR
// Add_Legion_Objectives = false ;
 736: LD_ADDR_EXP 230
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// Starting_Construction_Time = 0 ;
 744: LD_ADDR_EXP 231
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// Heike_Last_Words = false ;
 752: LD_ADDR_EXP 232
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// Joan_semafor = false ;
 760: LD_ADDR_EXP 233
 764: PUSH
 765: LD_INT 0
 767: ST_TO_ADDR
// Arabian_reg_id = - 1 ;
 768: LD_ADDR_EXP 234
 772: PUSH
 773: LD_INT 1
 775: NEG
 776: ST_TO_ADDR
// Arabian_def_id = - 1 ;
 777: LD_ADDR_EXP 235
 781: PUSH
 782: LD_INT 1
 784: NEG
 785: ST_TO_ADDR
// Russian1_reg_id = - 1 ;
 786: LD_ADDR_EXP 237
 790: PUSH
 791: LD_INT 1
 793: NEG
 794: ST_TO_ADDR
// Russian1_att_id = - 1 ;
 795: LD_ADDR_EXP 238
 799: PUSH
 800: LD_INT 1
 802: NEG
 803: ST_TO_ADDR
// Russian1_reg1_id = - 1 ;
 804: LD_ADDR_EXP 239
 808: PUSH
 809: LD_INT 1
 811: NEG
 812: ST_TO_ADDR
// Russian1_patr_id = - 1 ;
 813: LD_ADDR_EXP 240
 817: PUSH
 818: LD_INT 1
 820: NEG
 821: ST_TO_ADDR
// Russian_reg_def_id = - 1 ;
 822: LD_ADDR_EXP 244
 826: PUSH
 827: LD_INT 1
 829: NEG
 830: ST_TO_ADDR
// Russian_def_id = - 1 ;
 831: LD_ADDR_EXP 245
 835: PUSH
 836: LD_INT 1
 838: NEG
 839: ST_TO_ADDR
// Russian_reg_id = - 1 ;
 840: LD_ADDR_EXP 241
 844: PUSH
 845: LD_INT 1
 847: NEG
 848: ST_TO_ADDR
// Russian_att_id = - 1 ;
 849: LD_ADDR_EXP 242
 853: PUSH
 854: LD_INT 1
 856: NEG
 857: ST_TO_ADDR
// Russian_patr_id = - 1 ;
 858: LD_ADDR_EXP 243
 862: PUSH
 863: LD_INT 1
 865: NEG
 866: ST_TO_ADDR
// Russian_build_id = - 1 ;
 867: LD_ADDR_EXP 246
 871: PUSH
 872: LD_INT 1
 874: NEG
 875: ST_TO_ADDR
// Alliance_reg_id = - 1 ;
 876: LD_ADDR_EXP 247
 880: PUSH
 881: LD_INT 1
 883: NEG
 884: ST_TO_ADDR
// Alliance_def_id = - 1 ;
 885: LD_ADDR_EXP 248
 889: PUSH
 890: LD_INT 1
 892: NEG
 893: ST_TO_ADDR
// Alliance_wood_reg_id = - 1 ;
 894: LD_ADDR_EXP 249
 898: PUSH
 899: LD_INT 1
 901: NEG
 902: ST_TO_ADDR
// legion_cheated = LoadVariable ( legion_cheated , true ) ;
 903: LD_ADDR_EXP 32
 907: PUSH
 908: LD_STRING legion_cheated
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL_OW 30
 918: ST_TO_ADDR
// kappa_saved = LoadVariable ( kappa_saved , false ) ;
 919: LD_ADDR_EXP 33
 923: PUSH
 924: LD_STRING kappa_saved
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL_OW 30
 934: ST_TO_ADDR
// kappa_delayed = LoadVariable ( kappa_delayed , true ) ;
 935: LD_ADDR_EXP 35
 939: PUSH
 940: LD_STRING kappa_delayed
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: CALL_OW 30
 950: ST_TO_ADDR
// Woman_alive = LoadVariable ( woman_alive , false ) ;
 951: LD_ADDR_EXP 38
 955: PUSH
 956: LD_STRING woman_alive
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 30
 966: ST_TO_ADDR
// Initial_JMM_vehicle = LoadVariable ( veh_jmm , 0 ) ;
 967: LD_ADDR_EXP 39
 971: PUSH
 972: LD_STRING veh_jmm
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: ST_TO_ADDR
// Initial_Woman_vehicle = LoadVariable ( veh_surv , 0 ) ;
 983: LD_ADDR_EXP 40
 987: PUSH
 988: LD_STRING veh_surv
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 30
 998: ST_TO_ADDR
// Woman_in_am14 = LoadVariable ( woman_in_am14 , 1 ) ;
 999: LD_ADDR_EXP 36
1003: PUSH
1004: LD_STRING woman_in_am14
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 30
1014: ST_TO_ADDR
// if Initial_Woman_vehicle > 0 then
1015: LD_EXP 40
1019: PUSH
1020: LD_INT 0
1022: GREATER
1023: IFFALSE 1035
// Woman_saved = true else
1025: LD_ADDR_EXP 34
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
1033: GO 1043
// Woman_saved = false ;
1035: LD_ADDR_EXP 34
1039: PUSH
1040: LD_INT 0
1042: ST_TO_ADDR
// americans = 1 ;
1043: LD_ADDR_EXP 176
1047: PUSH
1048: LD_INT 1
1050: ST_TO_ADDR
// americans1 = 4 ;
1051: LD_ADDR_EXP 177
1055: PUSH
1056: LD_INT 4
1058: ST_TO_ADDR
// russians = 3 ;
1059: LD_ADDR_EXP 178
1063: PUSH
1064: LD_INT 3
1066: ST_TO_ADDR
// russians1 = 6 ;
1067: LD_ADDR_EXP 179
1071: PUSH
1072: LD_INT 6
1074: ST_TO_ADDR
// arabians = 8 ;
1075: LD_ADDR_EXP 180
1079: PUSH
1080: LD_INT 8
1082: ST_TO_ADDR
// arabians1 = 2 ;
1083: LD_ADDR_EXP 181
1087: PUSH
1088: LD_INT 2
1090: ST_TO_ADDR
// alliance = 7 ;
1091: LD_ADDR_EXP 182
1095: PUSH
1096: LD_INT 7
1098: ST_TO_ADDR
// Explorers_Side = 5 ;
1099: LD_ADDR_EXP 183
1103: PUSH
1104: LD_INT 5
1106: ST_TO_ADDR
// uc_side := americans1 ;
1107: LD_ADDR_OWVAR 20
1111: PUSH
1112: LD_EXP 177
1116: ST_TO_ADDR
// OtherWithJMM = CreateCharacterSet ( OtherWithJMM ) ;
1117: LD_ADDR_EXP 30
1121: PUSH
1122: LD_STRING OtherWithJMM
1124: PPUSH
1125: CALL_OW 31
1129: ST_TO_ADDR
// OtherNotJMM = CreateCharacterSet ( OtherNotJMM ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING OtherNotJMM
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// BobbyLoc = LoadVariable ( BobbyLoc , 1 ) ;
1143: LD_ADDR_EXP 41
1147: PUSH
1148: LD_STRING BobbyLoc
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: CALL_OW 30
1158: ST_TO_ADDR
// CyrusLoc = LoadVariable ( CyrusLoc , 1 ) ;
1159: LD_ADDR_EXP 42
1163: PUSH
1164: LD_STRING CyrusLoc
1166: PPUSH
1167: LD_INT 1
1169: PPUSH
1170: CALL_OW 30
1174: ST_TO_ADDR
// LisaLoc = LoadVariable ( LisaLoc , 1 ) ;
1175: LD_ADDR_EXP 43
1179: PUSH
1180: LD_STRING LisaLoc
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: CALL_OW 30
1190: ST_TO_ADDR
// FrankLoc = LoadVariable ( FrankLoc , 1 ) ;
1191: LD_ADDR_EXP 44
1195: PUSH
1196: LD_STRING FrankLoc
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 30
1206: ST_TO_ADDR
// BrownLoc = LoadVariable ( BrownLoc , 1 ) ;
1207: LD_ADDR_EXP 45
1211: PUSH
1212: LD_STRING BrownLoc
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: CALL_OW 30
1222: ST_TO_ADDR
// DonaldsonLoc = LoadVariable ( DonaldsonLoc , 1 ) ;
1223: LD_ADDR_EXP 46
1227: PUSH
1228: LD_STRING DonaldsonLoc
1230: PPUSH
1231: LD_INT 1
1233: PPUSH
1234: CALL_OW 30
1238: ST_TO_ADDR
// VanHoutenLoc = LoadVariable ( VanHoutenLoc , 1 ) ;
1239: LD_ADDR_EXP 47
1243: PUSH
1244: LD_STRING VanHoutenLoc
1246: PPUSH
1247: LD_INT 1
1249: PPUSH
1250: CALL_OW 30
1254: ST_TO_ADDR
// GladstoneLoc = LoadVariable ( GladstoneLoc , 1 ) ;
1255: LD_ADDR_EXP 48
1259: PUSH
1260: LD_STRING GladstoneLoc
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 30
1270: ST_TO_ADDR
// JoanLoc = LoadVariable ( JoanLoc , 1 ) ;
1271: LD_ADDR_EXP 49
1275: PUSH
1276: LD_STRING JoanLoc
1278: PPUSH
1279: LD_INT 1
1281: PPUSH
1282: CALL_OW 30
1286: ST_TO_ADDR
// YamokoLoc = LoadVariable ( YamokoLoc , 1 ) ;
1287: LD_ADDR_EXP 50
1291: PUSH
1292: LD_STRING YamokoLoc
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL_OW 30
1302: ST_TO_ADDR
// GaryLoc = LoadVariable ( GaryLoc , 1 ) ;
1303: LD_ADDR_EXP 51
1307: PUSH
1308: LD_STRING GaryLoc
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: CALL_OW 30
1318: ST_TO_ADDR
// DenisLoc = LoadVariable ( DenisLoc , 1 ) ;
1319: LD_ADDR_EXP 52
1323: PUSH
1324: LD_STRING DenisLoc
1326: PPUSH
1327: LD_INT 1
1329: PPUSH
1330: CALL_OW 30
1334: ST_TO_ADDR
// CornellLoc = LoadVariable ( CornellLoc , 1 ) ;
1335: LD_ADDR_EXP 53
1339: PUSH
1340: LD_STRING CornellLoc
1342: PPUSH
1343: LD_INT 1
1345: PPUSH
1346: CALL_OW 30
1350: ST_TO_ADDR
// Map_am_base = 1 ;
1351: LD_ADDR_EXP 161
1355: PUSH
1356: LD_INT 1
1358: ST_TO_ADDR
// Map_rus_attack = 2 ;
1359: LD_ADDR_EXP 162
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// Send_Helpers = 3 ;
1367: LD_ADDR_EXP 163
1371: PUSH
1372: LD_INT 3
1374: ST_TO_ADDR
// Send_Material = 4 ;
1375: LD_ADDR_EXP 165
1379: PUSH
1380: LD_INT 4
1382: ST_TO_ADDR
// Capture_JMM_Vehicles = 5 ;
1383: LD_ADDR_EXP 166
1387: PUSH
1388: LD_INT 5
1390: ST_TO_ADDR
// First_Powells_Attack = 6 ;
1391: LD_ADDR_EXP 167
1395: PUSH
1396: LD_INT 6
1398: ST_TO_ADDR
// Second_Powells_Attack = 7 ;
1399: LD_ADDR_EXP 168
1403: PUSH
1404: LD_INT 7
1406: ST_TO_ADDR
// Run_JMM_Vehicles = 8 ;
1407: LD_ADDR_EXP 169
1411: PUSH
1412: LD_INT 8
1414: ST_TO_ADDR
// Rus1_Attack = 9 ;
1415: LD_ADDR_EXP 170
1419: PUSH
1420: LD_INT 9
1422: ST_TO_ADDR
// Retreat_Report = 10 ;
1423: LD_ADDR_EXP 172
1427: PUSH
1428: LD_INT 10
1430: ST_TO_ADDR
// JMM_Talk = 11 ;
1431: LD_ADDR_EXP 173
1435: PUSH
1436: LD_INT 11
1438: ST_TO_ADDR
// Send_Arabian_Back = 12 ;
1439: LD_ADDR_EXP 174
1443: PUSH
1444: LD_INT 12
1446: ST_TO_ADDR
// Link_Bombs = 13 ;
1447: LD_ADDR_EXP 175
1451: PUSH
1452: LD_INT 13
1454: ST_TO_ADDR
// Rus_Attack = 14 ;
1455: LD_ADDR_EXP 171
1459: PUSH
1460: LD_INT 14
1462: ST_TO_ADDR
// JMM_Is_Ready = 15 ;
1463: LD_ADDR_EXP 144
1467: PUSH
1468: LD_INT 15
1470: ST_TO_ADDR
// First_JMM_Task = 1 ;
1471: LD_ADDR_EXP 137
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// disable ( First_JMM_Task ) ;
1479: LD_EXP 137
1483: DISABLE_MARKED
// out_of_base = 2 ;
1484: LD_ADDR_EXP 138
1488: PUSH
1489: LD_INT 2
1491: ST_TO_ADDR
// disable ( out_of_base ) ;
1492: LD_EXP 138
1496: DISABLE_MARKED
// Great_ingame_video = 3 ;
1497: LD_ADDR_EXP 139
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// disable ( Great_ingame_video ) ;
1505: LD_EXP 139
1509: DISABLE_MARKED
// R1_attack = 4 ;
1510: LD_ADDR_EXP 140
1514: PUSH
1515: LD_INT 4
1517: ST_TO_ADDR
// disable ( R1_attack ) ;
1518: LD_EXP 140
1522: DISABLE_MARKED
// Protect_Powell = 5 ;
1523: LD_ADDR_EXP 141
1527: PUSH
1528: LD_INT 5
1530: ST_TO_ADDR
// disable ( Protect_Powell ) ;
1531: LD_EXP 141
1535: DISABLE_MARKED
// Talk_Bomba = 6 ;
1536: LD_ADDR_EXP 142
1540: PUSH
1541: LD_INT 6
1543: ST_TO_ADDR
// disable ( Talk_Bomba ) ;
1544: LD_EXP 142
1548: DISABLE_MARKED
// Center_on_fight = 7 ;
1549: LD_ADDR_EXP 143
1553: PUSH
1554: LD_INT 7
1556: ST_TO_ADDR
// disable ( Center_on_fight ) ;
1557: LD_EXP 143
1561: DISABLE_MARKED
// Not_Ingame_Run_over = 8 ;
1562: LD_ADDR_EXP 157
1566: PUSH
1567: LD_INT 8
1569: ST_TO_ADDR
// enable ( Not_Ingame_Run_over ) ;
1570: LD_EXP 157
1574: ENABLE_MARKED
// Ingame_Run_over = 9 ;
1575: LD_ADDR_EXP 145
1579: PUSH
1580: LD_INT 9
1582: ST_TO_ADDR
// disable ( Ingame_Run_over ) ;
1583: LD_EXP 145
1587: DISABLE_MARKED
// Game_Continue = 10 ;
1588: LD_ADDR_EXP 146
1592: PUSH
1593: LD_INT 10
1595: ST_TO_ADDR
// disable ( Game_Continue ) ;
1596: LD_EXP 146
1600: DISABLE_MARKED
// Woman_Comes = 11 ;
1601: LD_ADDR_EXP 148
1605: PUSH
1606: LD_INT 11
1608: ST_TO_ADDR
// Vsevolod_Comes = 12 ;
1609: LD_ADDR_EXP 147
1613: PUSH
1614: LD_INT 12
1616: ST_TO_ADDR
// if ( Woman_alive and kappa_saved and woman_saved = false ) then
1617: LD_EXP 38
1621: PUSH
1622: LD_EXP 33
1626: AND
1627: PUSH
1628: LD_EXP 34
1632: PUSH
1633: LD_INT 0
1635: EQUAL
1636: AND
1637: IFFALSE 1651
// begin disable ( Vsevolod_Comes ) ;
1639: LD_EXP 147
1643: DISABLE_MARKED
// enable ( Woman_Comes ) ;
1644: LD_EXP 148
1648: ENABLE_MARKED
// end else
1649: GO 1680
// if not ( kappa_saved ) then
1651: LD_EXP 33
1655: NOT
1656: IFFALSE 1670
// begin enable ( Vsevolod_Comes ) ;
1658: LD_EXP 147
1662: ENABLE_MARKED
// disable ( Woman_Comes ) ;
1663: LD_EXP 148
1667: DISABLE_MARKED
// end else
1668: GO 1680
// begin disable ( Vsevolod_Comes ) ;
1670: LD_EXP 147
1674: DISABLE_MARKED
// disable ( Woman_Comes ) ;
1675: LD_EXP 148
1679: DISABLE_MARKED
// end ; Matherlod_Contamined1 = 13 ;
1680: LD_ADDR_EXP 149
1684: PUSH
1685: LD_INT 13
1687: ST_TO_ADDR
// disable ( Matherlod_Contamined1 ) ;
1688: LD_EXP 149
1692: DISABLE_MARKED
// Matherlod_Contamined2 = 14 ;
1693: LD_ADDR_EXP 150
1697: PUSH
1698: LD_INT 14
1700: ST_TO_ADDR
// disable ( Matherlod_Contamined2 ) ;
1701: LD_EXP 150
1705: DISABLE_MARKED
// Matherlod_Contamined3 = 15 ;
1706: LD_ADDR_EXP 151
1710: PUSH
1711: LD_INT 15
1713: ST_TO_ADDR
// disable ( Matherlod_Contamined3 ) ;
1714: LD_EXP 151
1718: DISABLE_MARKED
// Alliance_Captured = 16 ;
1719: LD_ADDR_EXP 152
1723: PUSH
1724: LD_INT 16
1726: ST_TO_ADDR
// disable ( Alliance_Captured ) ;
1727: LD_EXP 152
1731: DISABLE_MARKED
// Explorers_Can_Go = 17 ;
1732: LD_ADDR_EXP 153
1736: PUSH
1737: LD_INT 17
1739: ST_TO_ADDR
// disable ( Explorers_Can_Go ) ;
1740: LD_EXP 153
1744: DISABLE_MARKED
// Not_End_of_Alliance = 18 ;
1745: LD_ADDR_EXP 154
1749: PUSH
1750: LD_INT 18
1752: ST_TO_ADDR
// enable ( Not_End_of_Alliance ) ;
1753: LD_EXP 154
1757: ENABLE_MARKED
// JMM_has_surrounded = 19 ;
1758: LD_ADDR_EXP 155
1762: PUSH
1763: LD_INT 19
1765: ST_TO_ADDR
// disable ( JMM_has_surrounded ) ;
1766: LD_EXP 155
1770: DISABLE_MARKED
// Friend_Escapes = 20 ;
1771: LD_ADDR_EXP 156
1775: PUSH
1776: LD_INT 20
1778: ST_TO_ADDR
// disable ( Friend_Escapes ) ;
1779: LD_EXP 156
1783: DISABLE_MARKED
// JMM_Captured = 22 ;
1784: LD_ADDR_EXP 160
1788: PUSH
1789: LD_INT 22
1791: ST_TO_ADDR
// disable ( JMM_Captured ) ;
1792: LD_EXP 160
1796: DISABLE_MARKED
// End_of_m = 23 ;
1797: LD_ADDR_EXP 158
1801: PUSH
1802: LD_INT 23
1804: ST_TO_ADDR
// disable ( End_of_m ) ;
1805: LD_EXP 158
1809: DISABLE_MARKED
// Timer = 24 ;
1810: LD_ADDR_EXP 159
1814: PUSH
1815: LD_INT 24
1817: ST_TO_ADDR
// disable ( Timer ) ;
1818: LD_EXP 159
1822: DISABLE_MARKED
// Arabian_buildings = [ [ b_bunker , 56 , 28 , 0 , [ ar_rocket_launcher ] ] , [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] , [ b_bunker , 59 , 28 , 5 , [ ar_radar ] ] , [ b_bunker , 35 , 4 , 0 , [ ar_radar ] ] , [ b_bunker , 68 , 20 , 0 , [ ar_radar ] ] , [ b_depot , 53 , 7 , 3 , [ ] ] , [ b_siberite_power , 42 , 5 , 0 , [ ] ] , [ b_siberite_power , 44 , 3 , 0 , [ ] ] , [ b_siberite_power , 93 , 7 , 0 , [ ] ] , [ b_siberite_power , 91 , 3 , 0 , [ ] ] , [ b_barracks , 49 , 9 , 1 , [ ] ] , [ b_bunker , 66 , 26 , 0 , [ ar_rocket_launcher ] ] , [ b_bunker , 69 , 26 , 0 , [ ar_gun ] ] , [ b_bunker , 57 , 13 , 0 , [ ar_flame_thrower ] ] , [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] , [ b_bunker , 83 , 24 , 0 , [ ar_gun ] ] , [ b_bunker , 88 , 27 , 0 , [ ar_rocket_launcher ] ] , [ b_lab_full , 68 , 13 , 5 , [ b_lab_siberium , b_lab_weapon ] ] , [ b_factory , 89 , 21 , 4 , [ ] ] , [ b_barracks , 84 , 10 , 0 , [ ] ] , [ b_bunker , 88 , 13 , 0 , [ ar_gun ] ] , [ b_bunker , 59 , 10 , 0 , [ ar_gun ] ] , [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] , [ b_warehouse , 84 , 4 , 2 , [ ] ] , [ b_ext_rocket , 93 , 21 , 4 , [ ] ] , [ b_ext_radar , 89 , 18 , 3 , [ ] ] , [ b_ext_gun , 92 , 24 , 5 , [ ] ] , [ b_bunker , 93 , 27 , 1 , [ ar_radar ] ] , [ b_bunker , 90 , 11 , 0 , [ ar_radar ] ] ] ;
1823: LD_ADDR_EXP 88
1827: PUSH
1828: LD_INT 32
1830: PUSH
1831: LD_INT 56
1833: PUSH
1834: LD_INT 28
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 28
1842: PUSH
1843: EMPTY
1844: LIST
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 32
1855: PUSH
1856: LD_INT 53
1858: PUSH
1859: LD_INT 25
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: LD_INT 27
1867: PUSH
1868: EMPTY
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 32
1880: PUSH
1881: LD_INT 59
1883: PUSH
1884: LD_INT 28
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: LD_INT 30
1892: PUSH
1893: EMPTY
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 32
1905: PUSH
1906: LD_INT 35
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: LD_INT 0
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: EMPTY
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 32
1930: PUSH
1931: LD_INT 68
1933: PUSH
1934: LD_INT 20
1936: PUSH
1937: LD_INT 0
1939: PUSH
1940: LD_INT 30
1942: PUSH
1943: EMPTY
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 0
1955: PUSH
1956: LD_INT 53
1958: PUSH
1959: LD_INT 7
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: EMPTY
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 28
1976: PUSH
1977: LD_INT 42
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: EMPTY
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 28
1997: PUSH
1998: LD_INT 44
2000: PUSH
2001: LD_INT 3
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: EMPTY
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 28
2018: PUSH
2019: LD_INT 93
2021: PUSH
2022: LD_INT 7
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: EMPTY
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 28
2039: PUSH
2040: LD_INT 91
2042: PUSH
2043: LD_INT 3
2045: PUSH
2046: LD_INT 0
2048: PUSH
2049: EMPTY
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 5
2060: PUSH
2061: LD_INT 49
2063: PUSH
2064: LD_INT 9
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 32
2081: PUSH
2082: LD_INT 66
2084: PUSH
2085: LD_INT 26
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: LD_INT 28
2093: PUSH
2094: EMPTY
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 32
2106: PUSH
2107: LD_INT 69
2109: PUSH
2110: LD_INT 26
2112: PUSH
2113: LD_INT 0
2115: PUSH
2116: LD_INT 27
2118: PUSH
2119: EMPTY
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 32
2131: PUSH
2132: LD_INT 57
2134: PUSH
2135: LD_INT 13
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: LD_INT 26
2143: PUSH
2144: EMPTY
2145: LIST
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 32
2156: PUSH
2157: LD_INT 70
2159: PUSH
2160: LD_INT 10
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: LD_INT 27
2168: PUSH
2169: EMPTY
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 32
2181: PUSH
2182: LD_INT 83
2184: PUSH
2185: LD_INT 24
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: LD_INT 27
2193: PUSH
2194: EMPTY
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 32
2206: PUSH
2207: LD_INT 88
2209: PUSH
2210: LD_INT 27
2212: PUSH
2213: LD_INT 0
2215: PUSH
2216: LD_INT 28
2218: PUSH
2219: EMPTY
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: LD_INT 68
2234: PUSH
2235: LD_INT 13
2237: PUSH
2238: LD_INT 5
2240: PUSH
2241: LD_INT 11
2243: PUSH
2244: LD_INT 10
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: LD_INT 89
2263: PUSH
2264: LD_INT 21
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: EMPTY
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: LD_INT 5
2281: PUSH
2282: LD_INT 84
2284: PUSH
2285: LD_INT 10
2287: PUSH
2288: LD_INT 0
2290: PUSH
2291: EMPTY
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 32
2302: PUSH
2303: LD_INT 88
2305: PUSH
2306: LD_INT 13
2308: PUSH
2309: LD_INT 0
2311: PUSH
2312: LD_INT 27
2314: PUSH
2315: EMPTY
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: LD_INT 59
2330: PUSH
2331: LD_INT 10
2333: PUSH
2334: LD_INT 0
2336: PUSH
2337: LD_INT 27
2339: PUSH
2340: EMPTY
2341: LIST
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 79
2355: PUSH
2356: LD_INT 4
2358: PUSH
2359: LD_INT 5
2361: PUSH
2362: LD_INT 28
2364: PUSH
2365: EMPTY
2366: LIST
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 1
2377: PUSH
2378: LD_INT 84
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: LD_INT 2
2386: PUSH
2387: EMPTY
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 18
2398: PUSH
2399: LD_INT 93
2401: PUSH
2402: LD_INT 21
2404: PUSH
2405: LD_INT 4
2407: PUSH
2408: EMPTY
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 20
2419: PUSH
2420: LD_INT 89
2422: PUSH
2423: LD_INT 18
2425: PUSH
2426: LD_INT 3
2428: PUSH
2429: EMPTY
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: LD_INT 17
2440: PUSH
2441: LD_INT 92
2443: PUSH
2444: LD_INT 24
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: EMPTY
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 32
2461: PUSH
2462: LD_INT 93
2464: PUSH
2465: LD_INT 27
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: LD_INT 30
2473: PUSH
2474: EMPTY
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 32
2486: PUSH
2487: LD_INT 90
2489: PUSH
2490: LD_INT 11
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: LD_INT 30
2498: PUSH
2499: EMPTY
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: ST_TO_ADDR
// Russian_Buildings = [ [ b_lab_full , 202 , 95 , 5 , [ b_lab_siberium , b_lab_weapon ] ] , [ b_barracks , 170 , 45 , 2 , [ ] ] , [ b_factory , 195 , 84 , 4 , [ ] ] , [ b_ext_rocket , 191 , 80 , 2 , [ ] ] , [ b_ext_siberium , 195 , 81 , 3 , [ ] ] , [ b_ext_computer , 199 , 84 , 4 , [ ] ] , [ b_ext_gun , 198 , 87 , 5 , [ ] ] , [ b_ext_track , 195 , 88 , 0 , [ ] ] , [ b_siberite_power , 190 , 66 , 1 , [ ] ] , [ b_turret , 182 , 58 , 1 , [ ru_rocket ] ] , [ b_turret , 188 , 70 , 1 , [ ru_rocket ] ] , [ b_turret , 183 , 61 , 1 , [ ru_time_lapser ] ] , [ b_turret , 186 , 67 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 185 , 64 , 1 , [ ru_gatling_gun ] ] , [ b_warehouse , 175 , 56 , 3 , [ ] ] , [ b_teleport , 182 , 87 , 0 , [ ] ] , [ b_teleport , 165 , 60 , 3 , [ ] ] , [ b_warehouse , 175 , 81 , 3 , [ ] ] , [ b_barracks , 155 , 44 , 5 , [ ] ] , [ b_turret , 156 , 73 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] , [ b_turret , 156 , 78 , 1 , [ ru_rocket ] ] , [ b_turret , 160 , 86 , 0 , [ ru_heavy_gun ] ] , [ b_bunker , 158 , 82 , 1 , [ ru_gatling_gun ] ] , [ b_bunker , 164 , 86 , 1 , [ ru_rocket ] ] , [ b_bunker , 161 , 81 , 1 , [ ru_rocket_launcher ] ] , [ b_turret , 161 , 75 , 1 , [ ru_time_lapser ] ] , [ b_siberite_power , 163 , 79 , 0 , [ ] ] , [ b_turret , 182 , 105 , 0 , [ ru_gatling_gun ] ] , [ b_turret , 161 , 93 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 164 , 98 , 1 , [ ru_time_lapser ] ] , [ b_turret , 188 , 98 , 3 , [ ru_rocket_launcher ] ] , [ b_turret , 200 , 98 , 0 , [ ru_gatling_gun ] ] , [ b_siberite_power , 166 , 96 , 0 , [ ] ] , [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] , [ b_turret , 208 , 106 , 0 , [ ru_gatling_gun ] ] , [ b_turret , 196 , 107 , 0 , [ ru_rocket ] ] , [ b_siberite_power , 186 , 101 , 4 , [ ] ] , [ b_siberite_power , 193 , 101 , 3 , [ ] ] , [ b_siberite_power , 182 , 50 , 1 , [ ] ] , [ b_siberite_power , 153 , 28 , 4 , [ ] ] , [ b_siberite_power , 201 , 89 , 1 , [ ] ] , [ b_turret , 150 , 25 , 0 , [ ru_rocket_launcher ] ] , [ b_turret , 151 , 31 , 0 , [ ru_heavy_gun ] ] , [ b_bunker , 153 , 39 , 0 , [ ru_heavy_gun ] ] , [ b_turret , 157 , 41 , 1 , [ ru_time_lapser ] ] , [ b_bunker , 158 , 54 , 1 , [ ru_time_lapser ] ] , [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] , [ b_turret , 190 , 106 , 0 , [ ru_time_lapser ] ] , [ b_turret , 201 , 106 , 0 , [ ru_time_lapser ] ] , [ b_turret , 154 , 63 , 1 , [ ru_time_lapser ] ] , [ b_turret , 158 , 67 , 1 , [ ru_gatling_gun ] ] , [ b_bunker , 155 , 57 , 1 , [ ru_heavy_gun ] ] , [ b_bunker , 158 , 62 , 1 , [ ru_rocket ] ] , [ b_turret , 164 , 89 , 4 , [ ru_time_lapser ] ] ] ;
2540: LD_ADDR_EXP 113
2544: PUSH
2545: LD_INT 8
2547: PUSH
2548: LD_INT 202
2550: PUSH
2551: LD_INT 95
2553: PUSH
2554: LD_INT 5
2556: PUSH
2557: LD_INT 11
2559: PUSH
2560: LD_INT 10
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 5
2576: PUSH
2577: LD_INT 170
2579: PUSH
2580: LD_INT 45
2582: PUSH
2583: LD_INT 2
2585: PUSH
2586: EMPTY
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 195
2600: PUSH
2601: LD_INT 84
2603: PUSH
2604: LD_INT 4
2606: PUSH
2607: EMPTY
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 18
2618: PUSH
2619: LD_INT 191
2621: PUSH
2622: LD_INT 80
2624: PUSH
2625: LD_INT 2
2627: PUSH
2628: EMPTY
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 21
2639: PUSH
2640: LD_INT 195
2642: PUSH
2643: LD_INT 81
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: EMPTY
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 199
2663: PUSH
2664: LD_INT 84
2666: PUSH
2667: LD_INT 4
2669: PUSH
2670: EMPTY
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 17
2681: PUSH
2682: LD_INT 198
2684: PUSH
2685: LD_INT 87
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 16
2702: PUSH
2703: LD_INT 195
2705: PUSH
2706: LD_INT 88
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 28
2723: PUSH
2724: LD_INT 190
2726: PUSH
2727: LD_INT 66
2729: PUSH
2730: LD_INT 1
2732: PUSH
2733: EMPTY
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 33
2744: PUSH
2745: LD_INT 182
2747: PUSH
2748: LD_INT 58
2750: PUSH
2751: LD_INT 1
2753: PUSH
2754: LD_INT 47
2756: PUSH
2757: EMPTY
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 188
2772: PUSH
2773: LD_INT 70
2775: PUSH
2776: LD_INT 1
2778: PUSH
2779: LD_INT 47
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 33
2794: PUSH
2795: LD_INT 183
2797: PUSH
2798: LD_INT 61
2800: PUSH
2801: LD_INT 1
2803: PUSH
2804: LD_INT 49
2806: PUSH
2807: EMPTY
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 33
2819: PUSH
2820: LD_INT 186
2822: PUSH
2823: LD_INT 67
2825: PUSH
2826: LD_INT 1
2828: PUSH
2829: LD_INT 46
2831: PUSH
2832: EMPTY
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 33
2844: PUSH
2845: LD_INT 185
2847: PUSH
2848: LD_INT 64
2850: PUSH
2851: LD_INT 1
2853: PUSH
2854: LD_INT 43
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 175
2872: PUSH
2873: LD_INT 56
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: EMPTY
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 34
2890: PUSH
2891: LD_INT 182
2893: PUSH
2894: LD_INT 87
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: EMPTY
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 34
2911: PUSH
2912: LD_INT 165
2914: PUSH
2915: LD_INT 60
2917: PUSH
2918: LD_INT 3
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: LD_INT 175
2935: PUSH
2936: LD_INT 81
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: EMPTY
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 5
2953: PUSH
2954: LD_INT 155
2956: PUSH
2957: LD_INT 44
2959: PUSH
2960: LD_INT 5
2962: PUSH
2963: EMPTY
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 33
2974: PUSH
2975: LD_INT 156
2977: PUSH
2978: LD_INT 73
2980: PUSH
2981: LD_INT 1
2983: PUSH
2984: LD_INT 46
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 33
2999: PUSH
3000: LD_INT 158
3002: PUSH
3003: LD_INT 76
3005: PUSH
3006: LD_INT 0
3008: PUSH
3009: LD_INT 45
3011: PUSH
3012: EMPTY
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 33
3024: PUSH
3025: LD_INT 156
3027: PUSH
3028: LD_INT 78
3030: PUSH
3031: LD_INT 1
3033: PUSH
3034: LD_INT 47
3036: PUSH
3037: EMPTY
3038: LIST
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 33
3049: PUSH
3050: LD_INT 160
3052: PUSH
3053: LD_INT 86
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: LD_INT 46
3061: PUSH
3062: EMPTY
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 32
3074: PUSH
3075: LD_INT 158
3077: PUSH
3078: LD_INT 82
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: LD_INT 43
3086: PUSH
3087: EMPTY
3088: LIST
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 32
3099: PUSH
3100: LD_INT 164
3102: PUSH
3103: LD_INT 86
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: LD_INT 47
3111: PUSH
3112: EMPTY
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 32
3124: PUSH
3125: LD_INT 161
3127: PUSH
3128: LD_INT 81
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: LD_INT 45
3136: PUSH
3137: EMPTY
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 33
3149: PUSH
3150: LD_INT 161
3152: PUSH
3153: LD_INT 75
3155: PUSH
3156: LD_INT 1
3158: PUSH
3159: LD_INT 49
3161: PUSH
3162: EMPTY
3163: LIST
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 163
3177: PUSH
3178: LD_INT 79
3180: PUSH
3181: LD_INT 0
3183: PUSH
3184: EMPTY
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 33
3195: PUSH
3196: LD_INT 182
3198: PUSH
3199: LD_INT 105
3201: PUSH
3202: LD_INT 0
3204: PUSH
3205: LD_INT 43
3207: PUSH
3208: EMPTY
3209: LIST
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 33
3220: PUSH
3221: LD_INT 161
3223: PUSH
3224: LD_INT 93
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: LD_INT 46
3232: PUSH
3233: EMPTY
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 33
3245: PUSH
3246: LD_INT 164
3248: PUSH
3249: LD_INT 98
3251: PUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 49
3257: PUSH
3258: EMPTY
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 33
3270: PUSH
3271: LD_INT 188
3273: PUSH
3274: LD_INT 98
3276: PUSH
3277: LD_INT 3
3279: PUSH
3280: LD_INT 45
3282: PUSH
3283: EMPTY
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 33
3295: PUSH
3296: LD_INT 200
3298: PUSH
3299: LD_INT 98
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 43
3307: PUSH
3308: EMPTY
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: PUSH
3318: LD_INT 28
3320: PUSH
3321: LD_INT 166
3323: PUSH
3324: LD_INT 96
3326: PUSH
3327: LD_INT 0
3329: PUSH
3330: EMPTY
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 33
3341: PUSH
3342: LD_INT 169
3344: PUSH
3345: LD_INT 100
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: LD_INT 47
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 33
3366: PUSH
3367: LD_INT 208
3369: PUSH
3370: LD_INT 106
3372: PUSH
3373: LD_INT 0
3375: PUSH
3376: LD_INT 43
3378: PUSH
3379: EMPTY
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 33
3391: PUSH
3392: LD_INT 196
3394: PUSH
3395: LD_INT 107
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 47
3403: PUSH
3404: EMPTY
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_INT 28
3416: PUSH
3417: LD_INT 186
3419: PUSH
3420: LD_INT 101
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: EMPTY
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 28
3437: PUSH
3438: LD_INT 193
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 3
3446: PUSH
3447: EMPTY
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 28
3458: PUSH
3459: LD_INT 182
3461: PUSH
3462: LD_INT 50
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: EMPTY
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 28
3479: PUSH
3480: LD_INT 153
3482: PUSH
3483: LD_INT 28
3485: PUSH
3486: LD_INT 4
3488: PUSH
3489: EMPTY
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_INT 28
3500: PUSH
3501: LD_INT 201
3503: PUSH
3504: LD_INT 89
3506: PUSH
3507: LD_INT 1
3509: PUSH
3510: EMPTY
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: PUSH
3519: LD_INT 33
3521: PUSH
3522: LD_INT 150
3524: PUSH
3525: LD_INT 25
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 45
3533: PUSH
3534: EMPTY
3535: LIST
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 33
3546: PUSH
3547: LD_INT 151
3549: PUSH
3550: LD_INT 31
3552: PUSH
3553: LD_INT 0
3555: PUSH
3556: LD_INT 46
3558: PUSH
3559: EMPTY
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 32
3571: PUSH
3572: LD_INT 153
3574: PUSH
3575: LD_INT 39
3577: PUSH
3578: LD_INT 0
3580: PUSH
3581: LD_INT 46
3583: PUSH
3584: EMPTY
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 157
3599: PUSH
3600: LD_INT 41
3602: PUSH
3603: LD_INT 1
3605: PUSH
3606: LD_INT 49
3608: PUSH
3609: EMPTY
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 32
3621: PUSH
3622: LD_INT 158
3624: PUSH
3625: LD_INT 54
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 49
3633: PUSH
3634: EMPTY
3635: LIST
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 33
3646: PUSH
3647: LD_INT 155
3649: PUSH
3650: LD_INT 35
3652: PUSH
3653: LD_INT 0
3655: PUSH
3656: LD_INT 47
3658: PUSH
3659: EMPTY
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_INT 33
3671: PUSH
3672: LD_INT 190
3674: PUSH
3675: LD_INT 106
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 49
3683: PUSH
3684: EMPTY
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 33
3696: PUSH
3697: LD_INT 201
3699: PUSH
3700: LD_INT 106
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 49
3708: PUSH
3709: EMPTY
3710: LIST
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: PUSH
3719: LD_INT 33
3721: PUSH
3722: LD_INT 154
3724: PUSH
3725: LD_INT 63
3727: PUSH
3728: LD_INT 1
3730: PUSH
3731: LD_INT 49
3733: PUSH
3734: EMPTY
3735: LIST
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 33
3746: PUSH
3747: LD_INT 158
3749: PUSH
3750: LD_INT 67
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 43
3758: PUSH
3759: EMPTY
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 32
3771: PUSH
3772: LD_INT 155
3774: PUSH
3775: LD_INT 57
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 46
3783: PUSH
3784: EMPTY
3785: LIST
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 32
3796: PUSH
3797: LD_INT 158
3799: PUSH
3800: LD_INT 62
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 47
3808: PUSH
3809: EMPTY
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 33
3821: PUSH
3822: LD_INT 164
3824: PUSH
3825: LD_INT 89
3827: PUSH
3828: LD_INT 4
3830: PUSH
3831: LD_INT 49
3833: PUSH
3834: EMPTY
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// SetTech ( tech_SibFiss , americans , state_disabled ) ;
3901: LD_INT 25
3903: PPUSH
3904: LD_EXP 176
3908: PPUSH
3909: LD_INT 0
3911: PPUSH
3912: CALL_OW 322
// end ;
3916: LD_VAR 0 1
3920: RET
// function Prepare_difficulty ; var i ; begin
3921: LD_INT 0
3923: PPUSH
3924: PPUSH
// human_difficulty_skill = [ 6 , 7 , 8 ] [ Difficulty ] ;
3925: LD_ADDR_EXP 184
3929: PUSH
3930: LD_INT 6
3932: PUSH
3933: LD_INT 7
3935: PUSH
3936: LD_INT 8
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_OWVAR 67
3948: ARRAY
3949: ST_TO_ADDR
// apeman_difficulty_skill = [ 3 , 4 , 5 ] [ Difficulty ] ;
3950: LD_ADDR_EXP 185
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: LD_INT 4
3960: PUSH
3961: LD_INT 5
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: PUSH
3969: LD_OWVAR 67
3973: ARRAY
3974: ST_TO_ADDR
// Number_of_crates = [ 7 , 5 , 4 ] [ Difficulty ] ;
3975: LD_ADDR_EXP 197
3979: PUSH
3980: LD_INT 7
3982: PUSH
3983: LD_INT 5
3985: PUSH
3986: LD_INT 4
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: LD_OWVAR 67
3998: ARRAY
3999: ST_TO_ADDR
// Number_of_JMM_Helpers = 5 ;
4000: LD_ADDR_EXP 69
4004: PUSH
4005: LD_INT 5
4007: ST_TO_ADDR
// Number_Of_Omar_Soldiers = [ 2 , 4 , 5 ] [ Difficulty ] ;
4008: LD_ADDR_EXP 75
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: PUSH
4027: LD_OWVAR 67
4031: ARRAY
4032: ST_TO_ADDR
// Number_of_Omar_Hovercrafts = [ 1 , 1 , 2 ] [ Difficulty ] ;
4033: LD_ADDR_EXP 76
4037: PUSH
4038: LD_INT 1
4040: PUSH
4041: LD_INT 1
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_OWVAR 67
4056: ARRAY
4057: ST_TO_ADDR
// Number_of_Omar_Flamethrowers = [ 0 , 1 , 1 ] [ Difficulty ] ;
4058: LD_ADDR_EXP 77
4062: PUSH
4063: LD_INT 0
4065: PUSH
4066: LD_INT 1
4068: PUSH
4069: LD_INT 1
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: LD_OWVAR 67
4081: ARRAY
4082: ST_TO_ADDR
// Number_of_Omar_RocketLaunchers = [ 0 , 0 , 1 ] [ Difficulty ] ;
4083: LD_ADDR_EXP 78
4087: PUSH
4088: LD_INT 0
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_OWVAR 67
4106: ARRAY
4107: ST_TO_ADDR
// Number_of_russian_soldiers = [ 3 , 5 , 6 ] [ Difficulty ] ;
4108: LD_ADDR_EXP 133
4112: PUSH
4113: LD_INT 3
4115: PUSH
4116: LD_INT 5
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_OWVAR 67
4131: ARRAY
4132: ST_TO_ADDR
// Number_of_russian_scientists = [ 6 , 6 , 6 ] [ Difficulty ] ;
4133: LD_ADDR_EXP 134
4137: PUSH
4138: LD_INT 6
4140: PUSH
4141: LD_INT 6
4143: PUSH
4144: LD_INT 6
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_OWVAR 67
4156: ARRAY
4157: ST_TO_ADDR
// Number_of_russian_mechanics = [ 6 , 6 , 6 ] [ Difficulty ] ;
4158: LD_ADDR_EXP 135
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: LD_INT 6
4168: PUSH
4169: LD_INT 6
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PUSH
4177: LD_OWVAR 67
4181: ARRAY
4182: ST_TO_ADDR
// Number_of_russian_engineers = [ 2 , 3 , 4 ] [ Difficulty ] ;
4183: LD_ADDR_EXP 136
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: PUSH
4202: LD_OWVAR 67
4206: ARRAY
4207: ST_TO_ADDR
// Number_of_Behemots = [ 2 , 3 , 4 ] [ Difficulty ] ;
4208: LD_ADDR_EXP 221
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 3
4218: PUSH
4219: LD_INT 4
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PUSH
4227: LD_OWVAR 67
4231: ARRAY
4232: ST_TO_ADDR
// Number_of_Arabian_Engineers = [ 1 , 1 , 2 ] [ Difficulty ] ;
4233: LD_ADDR_EXP 92
4237: PUSH
4238: LD_INT 1
4240: PUSH
4241: LD_INT 1
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: PUSH
4252: LD_OWVAR 67
4256: ARRAY
4257: ST_TO_ADDR
// Number_of_Arabian_Soldiers = [ 3 , 4 , 5 ] [ Difficulty ] ;
4258: LD_ADDR_EXP 89
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: LD_INT 4
4268: PUSH
4269: LD_INT 5
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: PUSH
4277: LD_OWVAR 67
4281: ARRAY
4282: ST_TO_ADDR
// Number_of_Arabian_scientists = [ 1 , 2 , 2 ] [ Difficulty ] ;
4283: LD_ADDR_EXP 90
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 2
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: ST_TO_ADDR
// Number_of_Arabian_mechanics = [ 1 , 2 , 3 ] [ Difficulty ] ;
4308: LD_ADDR_EXP 91
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: LD_OWVAR 67
4331: ARRAY
4332: ST_TO_ADDR
// Number_of_AllAm_Soldiers = [ 4 , 4 , 4 ] [ Difficulty ] ;
4333: LD_ADDR_EXP 103
4337: PUSH
4338: LD_INT 4
4340: PUSH
4341: LD_INT 4
4343: PUSH
4344: LD_INT 4
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: PUSH
4352: LD_OWVAR 67
4356: ARRAY
4357: ST_TO_ADDR
// Number_of_AllAm_Scientists = [ 4 , 4 , 4 ] [ Difficulty ] ;
4358: LD_ADDR_EXP 104
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: LD_INT 4
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: LD_OWVAR 67
4381: ARRAY
4382: ST_TO_ADDR
// Number_of_AllRu_Soldiers = [ 1 , 2 , 3 ] [ Difficulty ] ;
4383: LD_ADDR_EXP 105
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: LD_INT 2
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_OWVAR 67
4406: ARRAY
4407: ST_TO_ADDR
// Number_of_AllRu_Scientists = [ 4 , 4 , 4 ] [ Difficulty ] ;
4408: LD_ADDR_EXP 106
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: LD_INT 4
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: ST_TO_ADDR
// Woman_Coming_Time = [ 18 18$0 , 18 18$0 , 18 18$0 ] [ Difficulty ] ;
4433: LD_ADDR_EXP 201
4437: PUSH
4438: LD_INT 37800
4440: PUSH
4441: LD_INT 37800
4443: PUSH
4444: LD_INT 37800
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_OWVAR 67
4456: ARRAY
4457: ST_TO_ADDR
// Rus_Attack_Time = [ 35 35$0 , 30 30$0 , 28 28$0 ] [ Difficulty ] ;
4458: LD_ADDR_EXP 130
4462: PUSH
4463: LD_INT 73500
4465: PUSH
4466: LD_INT 63000
4468: PUSH
4469: LD_INT 58800
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_OWVAR 67
4481: ARRAY
4482: ST_TO_ADDR
// Stevens_Coming_Time = [ 35 35$0 , 35 35$0 , 32 32$0 ] [ Difficulty ] ;
4483: LD_ADDR_EXP 200
4487: PUSH
4488: LD_INT 73500
4490: PUSH
4491: LD_INT 73500
4493: PUSH
4494: LD_INT 67200
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: PUSH
4502: LD_OWVAR 67
4506: ARRAY
4507: ST_TO_ADDR
// Alliance_broadcast = [ 45 45$0 , 40 40$0 , 35 35$0 ] [ Difficulty ] ;
4508: LD_ADDR_EXP 202
4512: PUSH
4513: LD_INT 94500
4515: PUSH
4516: LD_INT 84000
4518: PUSH
4519: LD_INT 73500
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: PUSH
4527: LD_OWVAR 67
4531: ARRAY
4532: ST_TO_ADDR
// Arabian_siberite_attack_time = [ 50 50$0 , 45 45$0 , 40 40$0 ] [ Difficulty ] ;
4533: LD_ADDR_EXP 213
4537: PUSH
4538: LD_INT 105000
4540: PUSH
4541: LD_INT 94500
4543: PUSH
4544: LD_INT 84000
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: PUSH
4552: LD_OWVAR 67
4556: ARRAY
4557: ST_TO_ADDR
// Behemots_broadcast = [ 55 55$0 , 50 50$0 , 45 45$0 ] [ Difficulty ] ;
4558: LD_ADDR_EXP 203
4562: PUSH
4563: LD_INT 115500
4565: PUSH
4566: LD_INT 105000
4568: PUSH
4569: LD_INT 94500
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_OWVAR 67
4581: ARRAY
4582: ST_TO_ADDR
// Alaskite_Bomb_Time = [ 60 60$0 , 55 55$0 , 50 50$0 ] [ Difficulty ] ;
4583: LD_ADDR_EXP 212
4587: PUSH
4588: LD_INT 126000
4590: PUSH
4591: LD_INT 115500
4593: PUSH
4594: LD_INT 105000
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_OWVAR 67
4606: ARRAY
4607: ST_TO_ADDR
// Time_of_first_capture = [ 65 65$0 , 60 60$0 , 55 55$0 ] [ Difficulty ] ;
4608: LD_ADDR_EXP 204
4612: PUSH
4613: LD_INT 136500
4615: PUSH
4616: LD_INT 126000
4618: PUSH
4619: LD_INT 115500
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_OWVAR 67
4631: ARRAY
4632: ST_TO_ADDR
// Behemot_attack_time = [ 70 70$0 , 65 65$0 , 60 60$0 ] [ Difficulty ] ;
4633: LD_ADDR_EXP 225
4637: PUSH
4638: LD_INT 147000
4640: PUSH
4641: LD_INT 136500
4643: PUSH
4644: LD_INT 126000
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: LIST
4651: PUSH
4652: LD_OWVAR 67
4656: ARRAY
4657: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 222 , 179 ) ) ;
4658: LD_INT 222
4660: PPUSH
4661: LD_INT 179
4663: PPUSH
4664: CALL_OW 438
4668: PPUSH
4669: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 226 , 183 ) ) ;
4673: LD_INT 226
4675: PPUSH
4676: LD_INT 183
4678: PPUSH
4679: CALL_OW 438
4683: PPUSH
4684: CALL_OW 65
// case Difficulty of 1 :
4688: LD_OWVAR 67
4692: PUSH
4693: LD_INT 1
4695: DOUBLE
4696: EQUAL
4697: IFTRUE 4701
4699: GO 5579
4701: POP
// begin DestroyUnit ( GetUnitNumber ( 229 , 176 ) ) ;
4702: LD_INT 229
4704: PPUSH
4705: LD_INT 176
4707: PPUSH
4708: CALL_OW 438
4712: PPUSH
4713: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 53 , 25 ) ) ;
4717: LD_INT 53
4719: PPUSH
4720: LD_INT 25
4722: PPUSH
4723: CALL_OW 438
4727: PPUSH
4728: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] ] ;
4732: LD_ADDR_EXP 88
4736: PUSH
4737: LD_EXP 88
4741: PUSH
4742: LD_INT 32
4744: PUSH
4745: LD_INT 53
4747: PUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 0
4753: PUSH
4754: LD_INT 27
4756: PUSH
4757: EMPTY
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: DIFF
4770: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 70 , 10 ) ) ;
4771: LD_INT 70
4773: PPUSH
4774: LD_INT 10
4776: PPUSH
4777: CALL_OW 438
4781: PPUSH
4782: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] ] ;
4786: LD_ADDR_EXP 88
4790: PUSH
4791: LD_EXP 88
4795: PUSH
4796: LD_INT 32
4798: PUSH
4799: LD_INT 70
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: LD_INT 0
4807: PUSH
4808: LD_INT 27
4810: PUSH
4811: EMPTY
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: PUSH
4821: EMPTY
4822: LIST
4823: DIFF
4824: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 79 , 4 ) ) ;
4825: LD_INT 79
4827: PPUSH
4828: LD_INT 4
4830: PPUSH
4831: CALL_OW 438
4835: PPUSH
4836: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] ] ;
4840: LD_ADDR_EXP 88
4844: PUSH
4845: LD_EXP 88
4849: PUSH
4850: LD_INT 32
4852: PUSH
4853: LD_INT 79
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: LD_INT 28
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: DIFF
4878: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 49 , 9 ) ) ;
4879: LD_INT 49
4881: PPUSH
4882: LD_INT 9
4884: PPUSH
4885: CALL_OW 438
4889: PPUSH
4890: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_barracks , 49 , 9 , 1 , [ ] ] ] ;
4894: LD_ADDR_EXP 88
4898: PUSH
4899: LD_EXP 88
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 49
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: EMPTY
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: DIFF
4928: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 150 , 25 ) ) ;
4929: LD_INT 150
4931: PPUSH
4932: LD_INT 25
4934: PPUSH
4935: CALL_OW 438
4939: PPUSH
4940: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 150 , 25 , 0 , [ ru_rocket_launcher ] ] ] ;
4944: LD_ADDR_EXP 113
4948: PUSH
4949: LD_EXP 113
4953: PUSH
4954: LD_INT 33
4956: PUSH
4957: LD_INT 150
4959: PUSH
4960: LD_INT 25
4962: PUSH
4963: LD_INT 0
4965: PUSH
4966: LD_INT 45
4968: PUSH
4969: EMPTY
4970: LIST
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: DIFF
4982: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 35 ) ) ;
4983: LD_INT 155
4985: PPUSH
4986: LD_INT 35
4988: PPUSH
4989: CALL_OW 438
4993: PPUSH
4994: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] ] ;
4998: LD_ADDR_EXP 113
5002: PUSH
5003: LD_EXP 113
5007: PUSH
5008: LD_INT 33
5010: PUSH
5011: LD_INT 155
5013: PUSH
5014: LD_INT 35
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 47
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: PUSH
5033: EMPTY
5034: LIST
5035: DIFF
5036: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 153 , 39 ) ) ;
5037: LD_INT 153
5039: PPUSH
5040: LD_INT 39
5042: PPUSH
5043: CALL_OW 438
5047: PPUSH
5048: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 153 , 39 , 0 , [ ru_heavy_gun ] ] ] ;
5052: LD_ADDR_EXP 113
5056: PUSH
5057: LD_EXP 113
5061: PUSH
5062: LD_INT 32
5064: PUSH
5065: LD_INT 153
5067: PUSH
5068: LD_INT 39
5070: PUSH
5071: LD_INT 0
5073: PUSH
5074: LD_INT 46
5076: PUSH
5077: EMPTY
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: PUSH
5087: EMPTY
5088: LIST
5089: DIFF
5090: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 188 , 70 ) ) ;
5091: LD_INT 188
5093: PPUSH
5094: LD_INT 70
5096: PPUSH
5097: CALL_OW 438
5101: PPUSH
5102: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 188 , 70 , 1 , [ ru_rocket ] ] ] ;
5106: LD_ADDR_EXP 113
5110: PUSH
5111: LD_EXP 113
5115: PUSH
5116: LD_INT 33
5118: PUSH
5119: LD_INT 188
5121: PUSH
5122: LD_INT 70
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: LD_INT 47
5130: PUSH
5131: EMPTY
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: DIFF
5144: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 188 , 98 ) ) ;
5145: LD_INT 188
5147: PPUSH
5148: LD_INT 98
5150: PPUSH
5151: CALL_OW 438
5155: PPUSH
5156: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 188 , 98 , 3 , [ ru_rocket_launcher ] ] ] ;
5160: LD_ADDR_EXP 113
5164: PUSH
5165: LD_EXP 113
5169: PUSH
5170: LD_INT 33
5172: PUSH
5173: LD_INT 188
5175: PUSH
5176: LD_INT 98
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: LD_INT 45
5184: PUSH
5185: EMPTY
5186: LIST
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: DIFF
5198: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 200 , 98 ) ) ;
5199: LD_INT 200
5201: PPUSH
5202: LD_INT 98
5204: PPUSH
5205: CALL_OW 438
5209: PPUSH
5210: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 200 , 98 , 0 , [ ru_gatling_gun ] ] ] ;
5214: LD_ADDR_EXP 113
5218: PUSH
5219: LD_EXP 113
5223: PUSH
5224: LD_INT 33
5226: PUSH
5227: LD_INT 200
5229: PUSH
5230: LD_INT 98
5232: PUSH
5233: LD_INT 0
5235: PUSH
5236: LD_INT 43
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: DIFF
5252: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 169 , 100 ) ) ;
5253: LD_INT 169
5255: PPUSH
5256: LD_INT 100
5258: PPUSH
5259: CALL_OW 438
5263: PPUSH
5264: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] ] ;
5268: LD_ADDR_EXP 113
5272: PUSH
5273: LD_EXP 113
5277: PUSH
5278: LD_INT 33
5280: PUSH
5281: LD_INT 169
5283: PUSH
5284: LD_INT 100
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: LD_INT 47
5292: PUSH
5293: EMPTY
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: DIFF
5306: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 164 , 86 ) ) ;
5307: LD_INT 164
5309: PPUSH
5310: LD_INT 86
5312: PPUSH
5313: CALL_OW 438
5317: PPUSH
5318: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 164 , 86 , 1 , [ ru_rocket ] ] ] ;
5322: LD_ADDR_EXP 113
5326: PUSH
5327: LD_EXP 113
5331: PUSH
5332: LD_INT 32
5334: PUSH
5335: LD_INT 164
5337: PUSH
5338: LD_INT 86
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: LD_INT 47
5346: PUSH
5347: EMPTY
5348: LIST
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: EMPTY
5358: LIST
5359: DIFF
5360: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 160 , 86 ) ) ;
5361: LD_INT 160
5363: PPUSH
5364: LD_INT 86
5366: PPUSH
5367: CALL_OW 438
5371: PPUSH
5372: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 160 , 86 , 0 , [ ru_heavy_gun ] ] ] ;
5376: LD_ADDR_EXP 113
5380: PUSH
5381: LD_EXP 113
5385: PUSH
5386: LD_INT 33
5388: PUSH
5389: LD_INT 160
5391: PUSH
5392: LD_INT 86
5394: PUSH
5395: LD_INT 0
5397: PUSH
5398: LD_INT 46
5400: PUSH
5401: EMPTY
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: DIFF
5414: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 76 ) ) ;
5415: LD_INT 158
5417: PPUSH
5418: LD_INT 76
5420: PPUSH
5421: CALL_OW 438
5425: PPUSH
5426: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] ] ;
5430: LD_ADDR_EXP 113
5434: PUSH
5435: LD_EXP 113
5439: PUSH
5440: LD_INT 33
5442: PUSH
5443: LD_INT 158
5445: PUSH
5446: LD_INT 76
5448: PUSH
5449: LD_INT 0
5451: PUSH
5452: LD_INT 45
5454: PUSH
5455: EMPTY
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: DIFF
5468: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 62 ) ) ;
5469: LD_INT 158
5471: PPUSH
5472: LD_INT 62
5474: PPUSH
5475: CALL_OW 438
5479: PPUSH
5480: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 158 , 62 , 1 , [ ru_rocket ] ] ] ;
5484: LD_ADDR_EXP 113
5488: PUSH
5489: LD_EXP 113
5493: PUSH
5494: LD_INT 32
5496: PUSH
5497: LD_INT 158
5499: PUSH
5500: LD_INT 62
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: LD_INT 47
5508: PUSH
5509: EMPTY
5510: LIST
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: DIFF
5522: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 57 ) ) ;
5523: LD_INT 155
5525: PPUSH
5526: LD_INT 57
5528: PPUSH
5529: CALL_OW 438
5533: PPUSH
5534: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 155 , 57 , 1 , [ ru_heavy_gun ] ] ] ;
5538: LD_ADDR_EXP 113
5542: PUSH
5543: LD_EXP 113
5547: PUSH
5548: LD_INT 32
5550: PUSH
5551: LD_INT 155
5553: PUSH
5554: LD_INT 57
5556: PUSH
5557: LD_INT 1
5559: PUSH
5560: LD_INT 46
5562: PUSH
5563: EMPTY
5564: LIST
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: DIFF
5576: ST_TO_ADDR
// end ; 2 :
5577: GO 6049
5579: LD_INT 2
5581: DOUBLE
5582: EQUAL
5583: IFTRUE 5587
5585: GO 6037
5587: POP
// begin DestroyUnit ( GetUnitNumber ( 224 , 176 ) ) ;
5588: LD_INT 224
5590: PPUSH
5591: LD_INT 176
5593: PPUSH
5594: CALL_OW 438
5598: PPUSH
5599: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 53 , 25 ) ) ;
5603: LD_INT 53
5605: PPUSH
5606: LD_INT 25
5608: PPUSH
5609: CALL_OW 438
5613: PPUSH
5614: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] ] ;
5618: LD_ADDR_EXP 88
5622: PUSH
5623: LD_EXP 88
5627: PUSH
5628: LD_INT 32
5630: PUSH
5631: LD_INT 53
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: LD_INT 27
5642: PUSH
5643: EMPTY
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: DIFF
5656: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 70 , 10 ) ) ;
5657: LD_INT 70
5659: PPUSH
5660: LD_INT 10
5662: PPUSH
5663: CALL_OW 438
5667: PPUSH
5668: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] ] ;
5672: LD_ADDR_EXP 88
5676: PUSH
5677: LD_EXP 88
5681: PUSH
5682: LD_INT 32
5684: PUSH
5685: LD_INT 70
5687: PUSH
5688: LD_INT 10
5690: PUSH
5691: LD_INT 0
5693: PUSH
5694: LD_INT 27
5696: PUSH
5697: EMPTY
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: DIFF
5710: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 79 , 4 ) ) ;
5711: LD_INT 79
5713: PPUSH
5714: LD_INT 4
5716: PPUSH
5717: CALL_OW 438
5721: PPUSH
5722: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] ] ;
5726: LD_ADDR_EXP 88
5730: PUSH
5731: LD_EXP 88
5735: PUSH
5736: LD_INT 32
5738: PUSH
5739: LD_INT 79
5741: PUSH
5742: LD_INT 4
5744: PUSH
5745: LD_INT 5
5747: PUSH
5748: LD_INT 28
5750: PUSH
5751: EMPTY
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: DIFF
5764: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 35 ) ) ;
5765: LD_INT 155
5767: PPUSH
5768: LD_INT 35
5770: PPUSH
5771: CALL_OW 438
5775: PPUSH
5776: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] ] ;
5780: LD_ADDR_EXP 113
5784: PUSH
5785: LD_EXP 113
5789: PUSH
5790: LD_INT 33
5792: PUSH
5793: LD_INT 155
5795: PUSH
5796: LD_INT 35
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: LD_INT 47
5804: PUSH
5805: EMPTY
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: DIFF
5818: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 151 , 31 ) ) ;
5819: LD_INT 151
5821: PPUSH
5822: LD_INT 31
5824: PPUSH
5825: CALL_OW 438
5829: PPUSH
5830: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 151 , 31 , 0 , [ ru_heavy_gun ] ] ] ;
5834: LD_ADDR_EXP 113
5838: PUSH
5839: LD_EXP 113
5843: PUSH
5844: LD_INT 33
5846: PUSH
5847: LD_INT 151
5849: PUSH
5850: LD_INT 31
5852: PUSH
5853: LD_INT 0
5855: PUSH
5856: LD_INT 46
5858: PUSH
5859: EMPTY
5860: LIST
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: DIFF
5872: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 169 , 100 ) ) ;
5873: LD_INT 169
5875: PPUSH
5876: LD_INT 100
5878: PPUSH
5879: CALL_OW 438
5883: PPUSH
5884: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] ] ;
5888: LD_ADDR_EXP 113
5892: PUSH
5893: LD_EXP 113
5897: PUSH
5898: LD_INT 33
5900: PUSH
5901: LD_INT 169
5903: PUSH
5904: LD_INT 100
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: LD_INT 47
5912: PUSH
5913: EMPTY
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: DIFF
5926: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 76 ) ) ;
5927: LD_INT 158
5929: PPUSH
5930: LD_INT 76
5932: PPUSH
5933: CALL_OW 438
5937: PPUSH
5938: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] ] ;
5942: LD_ADDR_EXP 113
5946: PUSH
5947: LD_EXP 113
5951: PUSH
5952: LD_INT 33
5954: PUSH
5955: LD_INT 158
5957: PUSH
5958: LD_INT 76
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 45
5966: PUSH
5967: EMPTY
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: DIFF
5980: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 156 , 73 ) ) ;
5981: LD_INT 156
5983: PPUSH
5984: LD_INT 73
5986: PPUSH
5987: CALL_OW 438
5991: PPUSH
5992: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 156 , 73 , 1 , [ ru_heavy_gun ] ] ] ;
5996: LD_ADDR_EXP 113
6000: PUSH
6001: LD_EXP 113
6005: PUSH
6006: LD_INT 33
6008: PUSH
6009: LD_INT 156
6011: PUSH
6012: LD_INT 73
6014: PUSH
6015: LD_INT 1
6017: PUSH
6018: LD_INT 46
6020: PUSH
6021: EMPTY
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: DIFF
6034: ST_TO_ADDR
// end ; 3 :
6035: GO 6049
6037: LD_INT 3
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6048
6045: POP
// begin end ; end ;
6046: GO 6049
6048: POP
// end ;
6049: LD_VAR 0 1
6053: RET
// export function LinkBombs ; begin
6054: LD_INT 0
6056: PPUSH
// ComEnterUnit ( Control_Driver , ArControl ) ;
6057: LD_EXP 85
6061: PPUSH
6062: LD_INT 140
6064: PPUSH
6065: CALL_OW 120
// Wait ( 1 ) ;
6069: LD_INT 1
6071: PPUSH
6072: CALL_OW 67
// WaitTask ( Control_Driver , 1 ) ;
6076: LD_EXP 85
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: CALL 17888 0 2
// LinkVehicleToHuman ( ArBomb1 , Control_Driver ) ;
6088: LD_INT 139
6090: PPUSH
6091: LD_EXP 85
6095: PPUSH
6096: CALL_OW 53
// LinkVehicleToHuman ( ArBomb2 , Control_Driver ) ;
6100: LD_INT 138
6102: PPUSH
6103: LD_EXP 85
6107: PPUSH
6108: CALL_OW 53
// end ;
6112: LD_VAR 0 1
6116: RET
// function Prepare_Characters ; var i , Un , hlp , Gamma2Comander , Alpha , New_person , Drivers , Other , Number_of_all , Selected_Unit , New_vehicle ; begin
6117: LD_INT 0
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
6129: PPUSH
6130: PPUSH
// uc_nation = nation_american ;
6131: LD_ADDR_OWVAR 21
6135: PUSH
6136: LD_INT 1
6138: ST_TO_ADDR
// uc_side = americans ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_EXP 176
6148: ST_TO_ADDR
// if not debug_constant then
6149: LD_EXP 195
6153: NOT
6154: IFFALSE 6171
// JMM = CreateCharacter ( JMM ) else
6156: LD_ADDR_EXP 1
6160: PUSH
6161: LD_STRING JMM
6163: PPUSH
6164: CALL_OW 34
6168: ST_TO_ADDR
6169: GO 6193
// begin hc_name = JMM ;
6171: LD_ADDR_OWVAR 26
6175: PUSH
6176: LD_STRING JMM
6178: ST_TO_ADDR
// JMM = CreateHuman ;
6179: LD_ADDR_EXP 1
6183: PUSH
6184: CALL_OW 44
6188: ST_TO_ADDR
// InitHc ;
6189: CALL_OW 19
// end ; if not JMM then
6193: LD_EXP 1
6197: NOT
6198: IFFALSE 6213
// BuildQuery ( Error: John Macmillan not found!!! , [ OK ] ) ;
6200: LD_STRING Error: John Macmillan not found!!!
6202: PPUSH
6203: LD_STRING OK
6205: PUSH
6206: EMPTY
6207: LIST
6208: PPUSH
6209: CALL_OW 99
// uc_side = americans1 ;
6213: LD_ADDR_OWVAR 20
6217: PUSH
6218: LD_EXP 177
6222: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
6223: LD_ADDR_EXP 2
6227: PUSH
6228: LD_STRING Powell
6230: PPUSH
6231: CALL_OW 25
6235: ST_TO_ADDR
// if not Powell then
6236: LD_EXP 2
6240: NOT
6241: IFFALSE 6258
// BuildQuery ( Error: Powell not found!!! , [ OK ] ) else
6243: LD_STRING Error: Powell not found!!!
6245: PPUSH
6246: LD_STRING OK
6248: PUSH
6249: EMPTY
6250: LIST
6251: PPUSH
6252: CALL_OW 99
6256: GO 6363
// begin SetSkill ( Powell , skill_combat , 10 ) ;
6258: LD_EXP 2
6262: PPUSH
6263: LD_INT 1
6265: PPUSH
6266: LD_INT 10
6268: PPUSH
6269: CALL_OW 237
// SetSkill ( Powell , skill_mechanical , 10 ) ;
6273: LD_EXP 2
6277: PPUSH
6278: LD_INT 3
6280: PPUSH
6281: LD_INT 10
6283: PPUSH
6284: CALL_OW 237
// SetSkill ( Powell , skill_engineering , 8 ) ;
6288: LD_EXP 2
6292: PPUSH
6293: LD_INT 2
6295: PPUSH
6296: LD_INT 8
6298: PPUSH
6299: CALL_OW 237
// SetSkill ( Powell , skill_scientistic , 4 ) ;
6303: LD_EXP 2
6307: PPUSH
6308: LD_INT 4
6310: PPUSH
6311: LD_INT 4
6313: PPUSH
6314: CALL_OW 237
// SetAttr ( Powell , attr_speed , 11 ) ;
6318: LD_EXP 2
6322: PPUSH
6323: LD_INT 2
6325: PPUSH
6326: LD_INT 11
6328: PPUSH
6329: CALL_OW 239
// SetAttr ( Powell , attr_stamina , 13 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 13
6343: PPUSH
6344: CALL_OW 239
// PlaceUnitArea ( Powell , Center_am_b , false ) ;
6348: LD_EXP 2
6352: PPUSH
6353: LD_INT 13
6355: PPUSH
6356: LD_INT 0
6358: PPUSH
6359: CALL_OW 49
// end ; Bobby = CreateCharacter ( Bobby ) ;
6363: LD_ADDR_EXP 3
6367: PUSH
6368: LD_STRING Bobby
6370: PPUSH
6371: CALL_OW 34
6375: ST_TO_ADDR
// if Bobby then
6376: LD_EXP 3
6380: IFFALSE 6407
// begin if BobbyLoc <> 6 then
6382: LD_EXP 41
6386: PUSH
6387: LD_INT 6
6389: NONEQUAL
6390: IFFALSE 6407
// PlaceUnitArea ( Bobby , Center_am_b , false ) ;
6392: LD_EXP 3
6396: PPUSH
6397: LD_INT 13
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 49
// end ; Cyrus = CreateCharacter ( Cyrus ) ;
6407: LD_ADDR_EXP 4
6411: PUSH
6412: LD_STRING Cyrus
6414: PPUSH
6415: CALL_OW 34
6419: ST_TO_ADDR
// if Cyrus then
6420: LD_EXP 4
6424: IFFALSE 6451
// begin if CyrusLoc <> 6 then
6426: LD_EXP 42
6430: PUSH
6431: LD_INT 6
6433: NONEQUAL
6434: IFFALSE 6451
// PlaceUnitArea ( Cyrus , Center_am_b , false ) ;
6436: LD_EXP 4
6440: PPUSH
6441: LD_INT 13
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL_OW 49
// end ; Lisa = CreateCharacter ( Lisa ) ;
6451: LD_ADDR_EXP 5
6455: PUSH
6456: LD_STRING Lisa
6458: PPUSH
6459: CALL_OW 34
6463: ST_TO_ADDR
// if Lisa and Woman_in_am14 <> 2 then
6464: LD_EXP 5
6468: PUSH
6469: LD_EXP 36
6473: PUSH
6474: LD_INT 2
6476: NONEQUAL
6477: AND
6478: IFFALSE 6505
// begin if LisaLoc <> 6 then
6480: LD_EXP 43
6484: PUSH
6485: LD_INT 6
6487: NONEQUAL
6488: IFFALSE 6505
// PlaceUnitArea ( Lisa , Center_am_b , false ) ;
6490: LD_EXP 5
6494: PPUSH
6495: LD_INT 13
6497: PPUSH
6498: LD_INT 0
6500: PPUSH
6501: CALL_OW 49
// end ; Frank = CreateCharacter ( Frank ) ;
6505: LD_ADDR_EXP 6
6509: PUSH
6510: LD_STRING Frank
6512: PPUSH
6513: CALL_OW 34
6517: ST_TO_ADDR
// if Frank then
6518: LD_EXP 6
6522: IFFALSE 6549
// begin if FrankLoc <> 6 then
6524: LD_EXP 44
6528: PUSH
6529: LD_INT 6
6531: NONEQUAL
6532: IFFALSE 6549
// PlaceUnitArea ( Frank , Center_am_b , false ) ;
6534: LD_EXP 6
6538: PPUSH
6539: LD_INT 13
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 49
// end ; Brown = CreateCharacter ( Brown ) ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_STRING Brown
6556: PPUSH
6557: CALL_OW 34
6561: ST_TO_ADDR
// if Brown then
6562: LD_EXP 7
6566: IFFALSE 6593
// begin if BrownLoc <> 6 then
6568: LD_EXP 45
6572: PUSH
6573: LD_INT 6
6575: NONEQUAL
6576: IFFALSE 6593
// PlaceUnitArea ( Brown , Center_am_b , false ) ;
6578: LD_EXP 7
6582: PPUSH
6583: LD_INT 13
6585: PPUSH
6586: LD_INT 0
6588: PPUSH
6589: CALL_OW 49
// end ; Donaldson = CreateCharacter ( Donaldson ) ;
6593: LD_ADDR_EXP 8
6597: PUSH
6598: LD_STRING Donaldson
6600: PPUSH
6601: CALL_OW 34
6605: ST_TO_ADDR
// if Donaldson then
6606: LD_EXP 8
6610: IFFALSE 6637
// begin if DonaldsonLoc <> 6 then
6612: LD_EXP 46
6616: PUSH
6617: LD_INT 6
6619: NONEQUAL
6620: IFFALSE 6637
// PlaceUnitArea ( Donaldson , Center_am_b , false ) ;
6622: LD_EXP 8
6626: PPUSH
6627: LD_INT 13
6629: PPUSH
6630: LD_INT 0
6632: PPUSH
6633: CALL_OW 49
// end ; Gladstone = CreateCharacter ( Gladstone ) ;
6637: LD_ADDR_EXP 9
6641: PUSH
6642: LD_STRING Gladstone
6644: PPUSH
6645: CALL_OW 34
6649: ST_TO_ADDR
// if Gladstone then
6650: LD_EXP 9
6654: IFFALSE 6681
// begin if GladstoneLoc <> 6 then
6656: LD_EXP 48
6660: PUSH
6661: LD_INT 6
6663: NONEQUAL
6664: IFFALSE 6681
// PlaceUnitArea ( Gladstone , Center_am_b , false ) ;
6666: LD_EXP 9
6670: PPUSH
6671: LD_INT 13
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 49
// end ; Denis = CreateCharacter ( Denis ) ;
6681: LD_ADDR_EXP 11
6685: PUSH
6686: LD_STRING Denis
6688: PPUSH
6689: CALL_OW 34
6693: ST_TO_ADDR
// if Denis then
6694: LD_EXP 11
6698: IFFALSE 6725
// begin if DenisLoc <> 6 then
6700: LD_EXP 52
6704: PUSH
6705: LD_INT 6
6707: NONEQUAL
6708: IFFALSE 6725
// PlaceUnitArea ( Denis , Center_am_b , false ) ;
6710: LD_EXP 11
6714: PPUSH
6715: LD_INT 13
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 49
// end ; Cornell = CreateCharacter ( Cornell ) ;
6725: LD_ADDR_EXP 10
6729: PUSH
6730: LD_STRING Cornell
6732: PPUSH
6733: CALL_OW 34
6737: ST_TO_ADDR
// if Cornell then
6738: LD_EXP 10
6742: IFFALSE 6769
// begin if CornellLoc <> 6 then
6744: LD_EXP 53
6748: PUSH
6749: LD_INT 6
6751: NONEQUAL
6752: IFFALSE 6769
// PlaceUnitArea ( Cornell , Center_am_b , false ) ;
6754: LD_EXP 10
6758: PPUSH
6759: LD_INT 13
6761: PPUSH
6762: LD_INT 0
6764: PPUSH
6765: CALL_OW 49
// end ; Yamoko = CreateCharacter ( Yamoko ) ;
6769: LD_ADDR_EXP 14
6773: PUSH
6774: LD_STRING Yamoko
6776: PPUSH
6777: CALL_OW 34
6781: ST_TO_ADDR
// if Yamoko then
6782: LD_EXP 14
6786: IFFALSE 6813
// begin if YamokoLoc <> 6 then
6788: LD_EXP 50
6792: PUSH
6793: LD_INT 6
6795: NONEQUAL
6796: IFFALSE 6813
// PlaceUnitArea ( Yamoko , Center_am_b , false ) ;
6798: LD_EXP 14
6802: PPUSH
6803: LD_INT 13
6805: PPUSH
6806: LD_INT 0
6808: PPUSH
6809: CALL_OW 49
// end ; Gary = CreateCharacter ( Gary ) ;
6813: LD_ADDR_EXP 15
6817: PUSH
6818: LD_STRING Gary
6820: PPUSH
6821: CALL_OW 34
6825: ST_TO_ADDR
// if Gary then
6826: LD_EXP 15
6830: IFFALSE 6857
// begin if GaryLoc <> 6 then
6832: LD_EXP 51
6836: PUSH
6837: LD_INT 6
6839: NONEQUAL
6840: IFFALSE 6857
// PlaceUnitArea ( Gary , Center_am_b , false ) ;
6842: LD_EXP 15
6846: PPUSH
6847: LD_INT 13
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: CALL_OW 49
// end ; VanHouten = CreateCharacter ( VanHouten ) ;
6857: LD_ADDR_EXP 24
6861: PUSH
6862: LD_STRING VanHouten
6864: PPUSH
6865: CALL_OW 34
6869: ST_TO_ADDR
// if VanHouten then
6870: LD_EXP 24
6874: IFFALSE 6901
// begin if VanHoutenLoc <> 6 then
6876: LD_EXP 47
6880: PUSH
6881: LD_INT 6
6883: NONEQUAL
6884: IFFALSE 6901
// PlaceUnitArea ( VanHoutenLoc , Center_am_b , false ) ;
6886: LD_EXP 47
6890: PPUSH
6891: LD_INT 13
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// end ; Stevens = CreateCharacter ( Stevens ) ;
6901: LD_ADDR_EXP 17
6905: PUSH
6906: LD_STRING Stevens
6908: PPUSH
6909: CALL_OW 34
6913: ST_TO_ADDR
// if not ( Stevens ) then
6914: LD_EXP 17
6918: NOT
6919: IFFALSE 6972
// begin PrepareScientist ( 1 , 9 ) ;
6921: LD_INT 1
6923: PPUSH
6924: LD_INT 9
6926: PPUSH
6927: CALL_OW 384
// hc_name = Baker Smith ;
6931: LD_ADDR_OWVAR 26
6935: PUSH
6936: LD_STRING Baker Smith
6938: ST_TO_ADDR
// Baker = CreateHuman ;
6939: LD_ADDR_EXP 23
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// SetSkill ( Baker , skill_scientistic , 8 ) ;
6949: LD_EXP 23
6953: PPUSH
6954: LD_INT 4
6956: PPUSH
6957: LD_INT 8
6959: PPUSH
6960: CALL_OW 237
// hc_name =  ;
6964: LD_ADDR_OWVAR 26
6968: PUSH
6969: LD_STRING 
6971: ST_TO_ADDR
// end ; Coonie = CreateCharacter ( Coonie ) ;
6972: LD_ADDR_EXP 18
6976: PUSH
6977: LD_STRING Coonie
6979: PPUSH
6980: CALL_OW 34
6984: ST_TO_ADDR
// if Coonie and Woman_in_am14 <> 3 then
6985: LD_EXP 18
6989: PUSH
6990: LD_EXP 36
6994: PUSH
6995: LD_INT 3
6997: NONEQUAL
6998: AND
6999: IFFALSE 7010
// begin DestroyUnit ( Coonie ) ;
7001: LD_EXP 18
7005: PPUSH
7006: CALL_OW 65
// end ; if not debug_constant then
7010: LD_EXP 195
7014: NOT
7015: IFFALSE 7032
// Joan = CreateCharacter ( Joan ) else
7017: LD_ADDR_EXP 12
7021: PUSH
7022: LD_STRING Joan
7024: PPUSH
7025: CALL_OW 34
7029: ST_TO_ADDR
7030: GO 7062
// begin hc_name = Joan ;
7032: LD_ADDR_OWVAR 26
7036: PUSH
7037: LD_STRING Joan
7039: ST_TO_ADDR
// hc_sex = sex_female ;
7040: LD_ADDR_OWVAR 27
7044: PUSH
7045: LD_INT 2
7047: ST_TO_ADDR
// Joan = CreateHuman ;
7048: LD_ADDR_EXP 12
7052: PUSH
7053: CALL_OW 44
7057: ST_TO_ADDR
// InitHC ;
7058: CALL_OW 19
// end ; All_americans = FilterAllUnits ( [ [ f_side , americans1 ] , [ f_type , unit_human ] ] ) diff Powell ;
7062: LD_ADDR_EXP 61
7066: PUSH
7067: LD_INT 22
7069: PUSH
7070: LD_EXP 177
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 21
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL_OW 69
7097: PUSH
7098: LD_EXP 2
7102: DIFF
7103: ST_TO_ADDR
// Named_americans = All_americans ;
7104: LD_ADDR_EXP 62
7108: PUSH
7109: LD_EXP 61
7113: ST_TO_ADDR
// if Named_americans > 12 then
7114: LD_EXP 62
7118: PUSH
7119: LD_INT 12
7121: GREATER
7122: IFFALSE 7140
// Number_of_all = Named_americans + 8 else
7124: LD_ADDR_VAR 0 10
7128: PUSH
7129: LD_EXP 62
7133: PUSH
7134: LD_INT 8
7136: PLUS
7137: ST_TO_ADDR
7138: GO 7148
// Number_of_all = 20 ;
7140: LD_ADDR_VAR 0 10
7144: PUSH
7145: LD_INT 20
7147: ST_TO_ADDR
// while ( OtherNotJMM <> 0 ) and ( All_Americans < Number_of_all ) do
7148: LD_EXP 31
7152: PUSH
7153: LD_INT 0
7155: NONEQUAL
7156: PUSH
7157: LD_EXP 61
7161: PUSH
7162: LD_VAR 0 10
7166: LESS
7167: AND
7168: IFFALSE 7237
// begin Selected_unit = FindMaxSumSkill ( OtherNotJMM , 0 ) ;
7170: LD_ADDR_VAR 0 11
7174: PUSH
7175: LD_EXP 31
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL 18100 0 2
7187: ST_TO_ADDR
// OtherNotJMM = OtherNotJMM diff Selected_unit ;
7188: LD_ADDR_EXP 31
7192: PUSH
7193: LD_EXP 31
7197: PUSH
7198: LD_VAR 0 11
7202: DIFF
7203: ST_TO_ADDR
// All_Americans = All_americans ^ Selected_unit ;
7204: LD_ADDR_EXP 61
7208: PUSH
7209: LD_EXP 61
7213: PUSH
7214: LD_VAR 0 11
7218: ADD
7219: ST_TO_ADDR
// PlaceUnitArea ( Selected_unit , Center_am_b , false ) ;
7220: LD_VAR 0 11
7224: PPUSH
7225: LD_INT 13
7227: PPUSH
7228: LD_INT 0
7230: PPUSH
7231: CALL_OW 49
// end ;
7235: GO 7148
// if All_americans < Number_of_all then
7237: LD_EXP 61
7241: PUSH
7242: LD_VAR 0 10
7246: LESS
7247: IFFALSE 7412
// for i = All_americans + 1 to Number_of_all do
7249: LD_ADDR_VAR 0 2
7253: PUSH
7254: DOUBLE
7255: LD_EXP 61
7259: PUSH
7260: LD_INT 1
7262: PLUS
7263: DEC
7264: ST_TO_ADDR
7265: LD_VAR 0 10
7269: PUSH
7270: FOR_TO
7271: IFFALSE 7410
// begin case ( i mod 4 ) of 0 :
7273: LD_VAR 0 2
7277: PUSH
7278: LD_INT 4
7280: MOD
7281: PUSH
7282: LD_INT 0
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7303
7290: POP
// begin PrepareSoldier ( sex_male , 7 ) ;
7291: LD_INT 1
7293: PPUSH
7294: LD_INT 7
7296: PPUSH
7297: CALL_OW 381
// end ; 1 :
7301: GO 7367
7303: LD_INT 1
7305: DOUBLE
7306: EQUAL
7307: IFTRUE 7311
7309: GO 7324
7311: POP
// begin PrepareScientist ( sex_male , 7 ) ;
7312: LD_INT 1
7314: PPUSH
7315: LD_INT 7
7317: PPUSH
7318: CALL_OW 384
// end ; 2 :
7322: GO 7367
7324: LD_INT 2
7326: DOUBLE
7327: EQUAL
7328: IFTRUE 7332
7330: GO 7345
7332: POP
// begin PrepareMechanic ( sex_male , 7 ) ;
7333: LD_INT 1
7335: PPUSH
7336: LD_INT 7
7338: PPUSH
7339: CALL_OW 383
// end ; 3 :
7343: GO 7367
7345: LD_INT 3
7347: DOUBLE
7348: EQUAL
7349: IFTRUE 7353
7351: GO 7366
7353: POP
// begin PrepareEngineer ( sex_male , 7 ) ;
7354: LD_INT 1
7356: PPUSH
7357: LD_INT 7
7359: PPUSH
7360: CALL_OW 382
// end ; end ;
7364: GO 7367
7366: POP
// New_person = CreateHuman ;
7367: LD_ADDR_VAR 0 7
7371: PUSH
7372: CALL_OW 44
7376: ST_TO_ADDR
// All_americans = All_americans ^ New_person ;
7377: LD_ADDR_EXP 61
7381: PUSH
7382: LD_EXP 61
7386: PUSH
7387: LD_VAR 0 7
7391: ADD
7392: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_am_b , false ) ;
7393: LD_VAR 0 7
7397: PPUSH
7398: LD_INT 13
7400: PPUSH
7401: LD_INT 0
7403: PPUSH
7404: CALL_OW 49
// end ;
7408: GO 7270
7410: POP
7411: POP
// Remaining_Powells = All_americans ;
7412: LD_ADDR_EXP 64
7416: PUSH
7417: LD_EXP 61
7421: ST_TO_ADDR
// uc_nation = nation_russian ;
7422: LD_ADDR_OWVAR 21
7426: PUSH
7427: LD_INT 3
7429: ST_TO_ADDR
// uc_side = russians ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_EXP 178
7439: ST_TO_ADDR
// uc_nation = nation_russian ;
7440: LD_ADDR_OWVAR 21
7444: PUSH
7445: LD_INT 3
7447: ST_TO_ADDR
// Platonov = NewCharacter ( Platonov ) ;
7448: LD_ADDR_EXP 26
7452: PUSH
7453: LD_STRING Platonov
7455: PPUSH
7456: CALL_OW 25
7460: ST_TO_ADDR
// if Platonov then
7461: LD_EXP 26
7465: IFFALSE 7529
// begin SetSkill ( Platonov , skill_combat , 10 ) ;
7467: LD_EXP 26
7471: PPUSH
7472: LD_INT 1
7474: PPUSH
7475: LD_INT 10
7477: PPUSH
7478: CALL_OW 237
// SetSkill ( Platonov , skill_engineering , 6 ) ;
7482: LD_EXP 26
7486: PPUSH
7487: LD_INT 2
7489: PPUSH
7490: LD_INT 6
7492: PPUSH
7493: CALL_OW 237
// SetSkill ( Platonov , skill_mechanical , 10 ) ;
7497: LD_EXP 26
7501: PPUSH
7502: LD_INT 3
7504: PPUSH
7505: LD_INT 10
7507: PPUSH
7508: CALL_OW 237
// SetSkill ( Platonov , skill_scientistic , 2 ) ;
7512: LD_EXP 26
7516: PPUSH
7517: LD_INT 4
7519: PPUSH
7520: LD_INT 2
7522: PPUSH
7523: CALL_OW 237
// end else
7527: GO 7617
// begin hc_sex = sex_male ;
7529: LD_ADDR_OWVAR 27
7533: PUSH
7534: LD_INT 1
7536: ST_TO_ADDR
// hc_class = class_soldier ;
7537: LD_ADDR_OWVAR 28
7541: PUSH
7542: LD_INT 1
7544: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 10 , 3 ] ;
7545: LD_ADDR_OWVAR 31
7549: PUSH
7550: LD_INT 10
7552: PUSH
7553: LD_INT 6
7555: PUSH
7556: LD_INT 10
7558: PUSH
7559: LD_INT 3
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
7568: LD_ADDR_OWVAR 29
7572: PUSH
7573: LD_INT 10
7575: PUSH
7576: LD_INT 10
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: ST_TO_ADDR
// hc_name = Platonov ;
7583: LD_ADDR_OWVAR 26
7587: PUSH
7588: LD_STRING Platonov
7590: ST_TO_ADDR
// Platonov = CreateHuman ;
7591: LD_ADDR_EXP 26
7595: PUSH
7596: CALL_OW 44
7600: ST_TO_ADDR
// hc_name =  ;
7601: LD_ADDR_OWVAR 26
7605: PUSH
7606: LD_STRING 
7608: ST_TO_ADDR
// hc_gallery =  ;
7609: LD_ADDR_OWVAR 33
7613: PUSH
7614: LD_STRING 
7616: ST_TO_ADDR
// end ; uc_nation = nation_russian ;
7617: LD_ADDR_OWVAR 21
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// Kovaljuk = NewCharacter ( Kovaljuk ) ;
7625: LD_ADDR_EXP 27
7629: PUSH
7630: LD_STRING Kovaljuk
7632: PPUSH
7633: CALL_OW 25
7637: ST_TO_ADDR
// if Kovaljuk then
7638: LD_EXP 27
7642: IFFALSE 7706
// begin SetSkill ( Kovaljuk , skill_combat , 8 ) ;
7644: LD_EXP 27
7648: PPUSH
7649: LD_INT 1
7651: PPUSH
7652: LD_INT 8
7654: PPUSH
7655: CALL_OW 237
// SetSkill ( Kovaljuk , skill_engineering , 10 ) ;
7659: LD_EXP 27
7663: PPUSH
7664: LD_INT 2
7666: PPUSH
7667: LD_INT 10
7669: PPUSH
7670: CALL_OW 237
// SetSkill ( Kovaljuk , skill_mechanical , 4 ) ;
7674: LD_EXP 27
7678: PPUSH
7679: LD_INT 3
7681: PPUSH
7682: LD_INT 4
7684: PPUSH
7685: CALL_OW 237
// SetSkill ( Kovaljuk , skill_scientistic , 3 ) ;
7689: LD_EXP 27
7693: PPUSH
7694: LD_INT 4
7696: PPUSH
7697: LD_INT 3
7699: PPUSH
7700: CALL_OW 237
// end else
7704: GO 7794
// begin hc_sex = sex_male ;
7706: LD_ADDR_OWVAR 27
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// hc_class = class_soldier ;
7714: LD_ADDR_OWVAR 28
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// hc_skills = [ 8 , 10 , 4 , 3 ] ;
7722: LD_ADDR_OWVAR 31
7726: PUSH
7727: LD_INT 8
7729: PUSH
7730: LD_INT 10
7732: PUSH
7733: LD_INT 4
7735: PUSH
7736: LD_INT 3
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
7745: LD_ADDR_OWVAR 29
7749: PUSH
7750: LD_INT 10
7752: PUSH
7753: LD_INT 10
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: ST_TO_ADDR
// hc_name = Kovaljuk ;
7760: LD_ADDR_OWVAR 26
7764: PUSH
7765: LD_STRING Kovaljuk
7767: ST_TO_ADDR
// Kovaljuk = CreateHuman ;
7768: LD_ADDR_EXP 27
7772: PUSH
7773: CALL_OW 44
7777: ST_TO_ADDR
// hc_name =  ;
7778: LD_ADDR_OWVAR 26
7782: PUSH
7783: LD_STRING 
7785: ST_TO_ADDR
// hc_gallery =  ;
7786: LD_ADDR_OWVAR 33
7790: PUSH
7791: LD_STRING 
7793: ST_TO_ADDR
// end ; for Un = 1 to Number_of_russian_soldiers do
7794: LD_ADDR_VAR 0 3
7798: PUSH
7799: DOUBLE
7800: LD_INT 1
7802: DEC
7803: ST_TO_ADDR
7804: LD_EXP 133
7808: PUSH
7809: FOR_TO
7810: IFFALSE 7898
// begin if i in [ 1 , 2 ] then
7812: LD_VAR 0 2
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: LD_INT 2
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: IN
7827: IFFALSE 7843
// PrepareSoldier ( sex_male , human_difficulty_skill ) else
7829: LD_INT 1
7831: PPUSH
7832: LD_EXP 184
7836: PPUSH
7837: CALL_OW 381
7841: GO 7855
// PrepareSoldier ( 0 , human_difficulty_skill ) ;
7843: LD_INT 0
7845: PPUSH
7846: LD_EXP 184
7850: PPUSH
7851: CALL_OW 381
// New_person = CreateHuman ;
7855: LD_ADDR_VAR 0 7
7859: PUSH
7860: CALL_OW 44
7864: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ New_person ;
7865: LD_ADDR_EXP 107
7869: PUSH
7870: LD_EXP 107
7874: PUSH
7875: LD_VAR 0 7
7879: ADD
7880: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
7881: LD_VAR 0 7
7885: PPUSH
7886: LD_INT 16
7888: PPUSH
7889: LD_INT 0
7891: PPUSH
7892: CALL_OW 49
// end ;
7896: GO 7809
7898: POP
7899: POP
// for Un = 1 to Number_of_russian_scientists do
7900: LD_ADDR_VAR 0 3
7904: PUSH
7905: DOUBLE
7906: LD_INT 1
7908: DEC
7909: ST_TO_ADDR
7910: LD_EXP 134
7914: PUSH
7915: FOR_TO
7916: IFFALSE 7973
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
7918: LD_INT 0
7920: PPUSH
7921: LD_EXP 184
7925: PPUSH
7926: CALL_OW 384
// New_person = CreateHuman ;
7930: LD_ADDR_VAR 0 7
7934: PUSH
7935: CALL_OW 44
7939: ST_TO_ADDR
// Russian_scientists = Russian_scientists ^ New_person ;
7940: LD_ADDR_EXP 108
7944: PUSH
7945: LD_EXP 108
7949: PUSH
7950: LD_VAR 0 7
7954: ADD
7955: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
7956: LD_VAR 0 7
7960: PPUSH
7961: LD_INT 16
7963: PPUSH
7964: LD_INT 0
7966: PPUSH
7967: CALL_OW 49
// end ;
7971: GO 7915
7973: POP
7974: POP
// for Un = 1 to Number_of_russian_engineers do
7975: LD_ADDR_VAR 0 3
7979: PUSH
7980: DOUBLE
7981: LD_INT 1
7983: DEC
7984: ST_TO_ADDR
7985: LD_EXP 136
7989: PUSH
7990: FOR_TO
7991: IFFALSE 8048
// begin PrepareEngineer ( 0 , human_difficulty_skill ) ;
7993: LD_INT 0
7995: PPUSH
7996: LD_EXP 184
8000: PPUSH
8001: CALL_OW 382
// New_person = CreateHuman ;
8005: LD_ADDR_VAR 0 7
8009: PUSH
8010: CALL_OW 44
8014: ST_TO_ADDR
// Russian_engineers = Russian_engineers ^ New_person ;
8015: LD_ADDR_EXP 109
8019: PUSH
8020: LD_EXP 109
8024: PUSH
8025: LD_VAR 0 7
8029: ADD
8030: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
8031: LD_VAR 0 7
8035: PPUSH
8036: LD_INT 16
8038: PPUSH
8039: LD_INT 0
8041: PPUSH
8042: CALL_OW 49
// end ;
8046: GO 7990
8048: POP
8049: POP
// for Un = 1 to Number_of_russian_mechanics do
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: DOUBLE
8056: LD_INT 1
8058: DEC
8059: ST_TO_ADDR
8060: LD_EXP 135
8064: PUSH
8065: FOR_TO
8066: IFFALSE 8123
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
8068: LD_INT 0
8070: PPUSH
8071: LD_EXP 184
8075: PPUSH
8076: CALL_OW 383
// New_person = CreateHuman ;
8080: LD_ADDR_VAR 0 7
8084: PUSH
8085: CALL_OW 44
8089: ST_TO_ADDR
// Russian_Mechanics = Russian_Mechanics ^ New_person ;
8090: LD_ADDR_EXP 110
8094: PUSH
8095: LD_EXP 110
8099: PUSH
8100: LD_VAR 0 7
8104: ADD
8105: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
8106: LD_VAR 0 7
8110: PPUSH
8111: LD_INT 16
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 49
// end ;
8121: GO 8065
8123: POP
8124: POP
// All_russians = Russian_soldiers ^ Russian_scientists ^ Russian_Engineers ^ Russian_mechanics ;
8125: LD_ADDR_EXP 111
8129: PUSH
8130: LD_EXP 107
8134: PUSH
8135: LD_EXP 108
8139: ADD
8140: PUSH
8141: LD_EXP 109
8145: ADD
8146: PUSH
8147: LD_EXP 110
8151: ADD
8152: ST_TO_ADDR
// uc_nation = nation_arabian ;
8153: LD_ADDR_OWVAR 21
8157: PUSH
8158: LD_INT 2
8160: ST_TO_ADDR
// uc_side = arabians1 ;
8161: LD_ADDR_OWVAR 20
8165: PUSH
8166: LD_EXP 181
8170: ST_TO_ADDR
// Omar = NewCharacter ( Omar ) ;
8171: LD_ADDR_EXP 28
8175: PUSH
8176: LD_STRING Omar
8178: PPUSH
8179: CALL_OW 25
8183: ST_TO_ADDR
// if not ( Omar ) then
8184: LD_EXP 28
8188: NOT
8189: IFFALSE 8191
// begin end ; RemoveUnit ( Masto ) ;
8191: LD_INT 147
8193: PPUSH
8194: CALL_OW 64
// PlaceHumanInUnit ( Omar , Masto ) ;
8198: LD_EXP 28
8202: PPUSH
8203: LD_INT 147
8205: PPUSH
8206: CALL_OW 52
// Heike = NewCharacter ( Heike ) ;
8210: LD_ADDR_EXP 29
8214: PUSH
8215: LD_STRING Heike
8217: PPUSH
8218: CALL_OW 25
8222: ST_TO_ADDR
// if Heike then
8223: LD_EXP 29
8227: IFFALSE 8243
// begin SetClass ( Heike , class_mortar ) ;
8229: LD_EXP 29
8233: PPUSH
8234: LD_INT 8
8236: PPUSH
8237: CALL_OW 336
// end else
8241: GO 8243
// begin end ; Omar_Scientists = [ ] ;
8243: LD_ADDR_EXP 73
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// for i = 1 to 2 do
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_INT 2
8262: PUSH
8263: FOR_TO
8264: IFFALSE 8306
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
8266: LD_INT 0
8268: PPUSH
8269: LD_EXP 184
8273: PPUSH
8274: CALL_OW 384
// New_Person = CreateHuman ;
8278: LD_ADDR_VAR 0 7
8282: PUSH
8283: CALL_OW 44
8287: ST_TO_ADDR
// Omar_Scientists = Omar_Scientists ^ New_Person ;
8288: LD_ADDR_EXP 73
8292: PUSH
8293: LD_EXP 73
8297: PUSH
8298: LD_VAR 0 7
8302: ADD
8303: ST_TO_ADDR
// end ;
8304: GO 8263
8306: POP
8307: POP
// Omar_Soldiers = [ ] ;
8308: LD_ADDR_EXP 72
8312: PUSH
8313: EMPTY
8314: ST_TO_ADDR
// for i = 1 to Number_Of_Omar_Soldiers do
8315: LD_ADDR_VAR 0 2
8319: PUSH
8320: DOUBLE
8321: LD_INT 1
8323: DEC
8324: ST_TO_ADDR
8325: LD_EXP 75
8329: PUSH
8330: FOR_TO
8331: IFFALSE 8395
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
8333: LD_INT 0
8335: PPUSH
8336: LD_EXP 184
8340: PPUSH
8341: CALL_OW 381
// New_Person = CreateHuman ;
8345: LD_ADDR_VAR 0 7
8349: PUSH
8350: CALL_OW 44
8354: ST_TO_ADDR
// if i = 1 then
8355: LD_VAR 0 2
8359: PUSH
8360: LD_INT 1
8362: EQUAL
8363: IFFALSE 8377
// SetClass ( New_Person , class_mortar ) ;
8365: LD_VAR 0 7
8369: PPUSH
8370: LD_INT 8
8372: PPUSH
8373: CALL_OW 336
// Omar_Soldiers = Omar_Soldiers ^ New_Person ;
8377: LD_ADDR_EXP 72
8381: PUSH
8382: LD_EXP 72
8386: PUSH
8387: LD_VAR 0 7
8391: ADD
8392: ST_TO_ADDR
// end ;
8393: GO 8330
8395: POP
8396: POP
// for i = 1 to Number_of_Omar_Hovercrafts do
8397: LD_ADDR_VAR 0 2
8401: PUSH
8402: DOUBLE
8403: LD_INT 1
8405: DEC
8406: ST_TO_ADDR
8407: LD_EXP 76
8411: PUSH
8412: FOR_TO
8413: IFFALSE 8501
// begin uc_side = arabians1 ;
8415: LD_ADDR_OWVAR 20
8419: PUSH
8420: LD_EXP 181
8424: ST_TO_ADDR
// uc_nation = nation_arabian ;
8425: LD_ADDR_OWVAR 21
8429: PUSH
8430: LD_INT 2
8432: ST_TO_ADDR
// uc_direction = 2 ;
8433: LD_ADDR_OWVAR 24
8437: PUSH
8438: LD_INT 2
8440: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
8441: LD_ADDR_OWVAR 37
8445: PUSH
8446: LD_INT 11
8448: ST_TO_ADDR
// vc_engine = engine_combustion ;
8449: LD_ADDR_OWVAR 39
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// vc_control = control_manual ;
8457: LD_ADDR_OWVAR 38
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// vc_weapon = ar_double_machine_gun ;
8465: LD_ADDR_OWVAR 40
8469: PUSH
8470: LD_INT 24
8472: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8473: LD_ADDR_VAR 0 12
8477: PUSH
8478: CALL_OW 45
8482: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8483: LD_ADDR_EXP 74
8487: PUSH
8488: LD_EXP 74
8492: PUSH
8493: LD_VAR 0 12
8497: ADD
8498: ST_TO_ADDR
// end ;
8499: GO 8412
8501: POP
8502: POP
// for i = 1 to Number_of_Omar_Flamethrowers do
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_EXP 77
8517: PUSH
8518: FOR_TO
8519: IFFALSE 8581
// begin vc_chassis = ar_half_tracked ;
8521: LD_ADDR_OWVAR 37
8525: PUSH
8526: LD_INT 14
8528: ST_TO_ADDR
// vc_engine = engine_combustion ;
8529: LD_ADDR_OWVAR 39
8533: PUSH
8534: LD_INT 1
8536: ST_TO_ADDR
// vc_control = control_manual ;
8537: LD_ADDR_OWVAR 38
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
8545: LD_ADDR_OWVAR 40
8549: PUSH
8550: LD_INT 26
8552: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8553: LD_ADDR_VAR 0 12
8557: PUSH
8558: CALL_OW 45
8562: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8563: LD_ADDR_EXP 74
8567: PUSH
8568: LD_EXP 74
8572: PUSH
8573: LD_VAR 0 12
8577: ADD
8578: ST_TO_ADDR
// end ;
8579: GO 8518
8581: POP
8582: POP
// for i = 1 to Number_of_Omar_RocketLaunchers do
8583: LD_ADDR_VAR 0 2
8587: PUSH
8588: DOUBLE
8589: LD_INT 1
8591: DEC
8592: ST_TO_ADDR
8593: LD_EXP 78
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8661
// begin vc_chassis = ar_half_tracked ;
8601: LD_ADDR_OWVAR 37
8605: PUSH
8606: LD_INT 14
8608: ST_TO_ADDR
// vc_engine = engine_combustion ;
8609: LD_ADDR_OWVAR 39
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// vc_control = control_manual ;
8617: LD_ADDR_OWVAR 38
8621: PUSH
8622: LD_INT 1
8624: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
8625: LD_ADDR_OWVAR 40
8629: PUSH
8630: LD_INT 28
8632: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8633: LD_ADDR_VAR 0 12
8637: PUSH
8638: CALL_OW 45
8642: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8643: LD_ADDR_EXP 74
8647: PUSH
8648: LD_EXP 74
8652: PUSH
8653: LD_VAR 0 12
8657: ADD
8658: ST_TO_ADDR
// end ;
8659: GO 8598
8661: POP
8662: POP
// for Un in Omar_vehicles do
8663: LD_ADDR_VAR 0 3
8667: PUSH
8668: LD_EXP 74
8672: PUSH
8673: FOR_IN
8674: IFFALSE 8714
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
8676: LD_INT 0
8678: PPUSH
8679: LD_EXP 184
8683: PPUSH
8684: CALL_OW 383
// New_Person = CreateHuman ;
8688: LD_ADDR_VAR 0 7
8692: PUSH
8693: CALL_OW 44
8697: ST_TO_ADDR
// PlaceHumanInUnit ( New_Person , Un ) ;
8698: LD_VAR 0 7
8702: PPUSH
8703: LD_VAR 0 3
8707: PPUSH
8708: CALL_OW 52
// end ;
8712: GO 8673
8714: POP
8715: POP
// uc_nation = nation_arabian ;
8716: LD_ADDR_OWVAR 21
8720: PUSH
8721: LD_INT 2
8723: ST_TO_ADDR
// uc_side = arabians ;
8724: LD_ADDR_OWVAR 20
8728: PUSH
8729: LD_EXP 180
8733: ST_TO_ADDR
// Kurt = CreateCharacter ( Kurt ) ;
8734: LD_ADDR_EXP 13
8738: PUSH
8739: LD_STRING Kurt
8741: PPUSH
8742: CALL_OW 34
8746: ST_TO_ADDR
// if Kurt then
8747: LD_EXP 13
8751: IFFALSE 8823
// begin Really_Kurt = true ;
8753: LD_ADDR_EXP 205
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// SetSkill ( Kurt , skill_combat , 8 ) ;
8761: LD_EXP 13
8765: PPUSH
8766: LD_INT 1
8768: PPUSH
8769: LD_INT 8
8771: PPUSH
8772: CALL_OW 237
// SetSkill ( Kurt , skill_engineering , 4 ) ;
8776: LD_EXP 13
8780: PPUSH
8781: LD_INT 2
8783: PPUSH
8784: LD_INT 4
8786: PPUSH
8787: CALL_OW 237
// SetSkill ( Kurt , skill_mechanical , 3 ) ;
8791: LD_EXP 13
8795: PPUSH
8796: LD_INT 3
8798: PPUSH
8799: LD_INT 3
8801: PPUSH
8802: CALL_OW 237
// SetSkill ( Kurt , skill_scientistic , 5 ) ;
8806: LD_EXP 13
8810: PPUSH
8811: LD_INT 4
8813: PPUSH
8814: LD_INT 5
8816: PPUSH
8817: CALL_OW 237
// end else
8821: GO 8895
// begin Really_Kurt = false ;
8823: LD_ADDR_EXP 205
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// hc_sex = sex_male ;
8831: LD_ADDR_OWVAR 27
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
// hc_class = class_mechanic ;
8839: LD_ADDR_OWVAR 28
8843: PUSH
8844: LD_INT 3
8846: ST_TO_ADDR
// hc_skills = [ 8 , 4 , 3 , 5 ] ;
8847: LD_ADDR_OWVAR 31
8851: PUSH
8852: LD_INT 8
8854: PUSH
8855: LD_INT 4
8857: PUSH
8858: LD_INT 3
8860: PUSH
8861: LD_INT 5
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
8870: LD_ADDR_OWVAR 29
8874: PUSH
8875: LD_INT 10
8877: PUSH
8878: LD_INT 10
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: ST_TO_ADDR
// Kurt = CreateHuman ;
8885: LD_ADDR_EXP 13
8889: PUSH
8890: CALL_OW 44
8894: ST_TO_ADDR
// end ; hc_sex = sex_male ;
8895: LD_ADDR_OWVAR 27
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// hc_class = class_mechanic ;
8903: LD_ADDR_OWVAR 28
8907: PUSH
8908: LD_INT 3
8910: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 7 , 3 ] ;
8911: LD_ADDR_OWVAR 31
8915: PUSH
8916: LD_INT 4
8918: PUSH
8919: LD_INT 2
8921: PUSH
8922: LD_INT 7
8924: PUSH
8925: LD_INT 3
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
8934: LD_ADDR_OWVAR 29
8938: PUSH
8939: LD_INT 10
8941: PUSH
8942: LD_INT 10
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: ST_TO_ADDR
// hc_name = Ali Hadarach ;
8949: LD_ADDR_OWVAR 26
8953: PUSH
8954: LD_STRING Ali Hadarach
8956: ST_TO_ADDR
// Friend = CreateHuman ;
8957: LD_ADDR_EXP 21
8961: PUSH
8962: CALL_OW 44
8966: ST_TO_ADDR
// hc_name =  ;
8967: LD_ADDR_OWVAR 26
8971: PUSH
8972: LD_STRING 
8974: ST_TO_ADDR
// uc_nation = nation_russian ;
8975: LD_ADDR_OWVAR 21
8979: PUSH
8980: LD_INT 3
8982: ST_TO_ADDR
// Kozlov = NewCharacter ( Kozlov ) ;
8983: LD_ADDR_EXP 22
8987: PUSH
8988: LD_STRING Kozlov
8990: PPUSH
8991: CALL_OW 25
8995: ST_TO_ADDR
// if Kozlov then
8996: LD_EXP 22
9000: IFFALSE 9064
// begin SetSkill ( Kozlov , skill_combat , 2 ) ;
9002: LD_EXP 22
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 2
9012: PPUSH
9013: CALL_OW 237
// SetSkill ( Kozlov , skill_engineering , 8 ) ;
9017: LD_EXP 22
9021: PPUSH
9022: LD_INT 2
9024: PPUSH
9025: LD_INT 8
9027: PPUSH
9028: CALL_OW 237
// SetSkill ( Kozlov , skill_mechanical , 3 ) ;
9032: LD_EXP 22
9036: PPUSH
9037: LD_INT 3
9039: PPUSH
9040: LD_INT 3
9042: PPUSH
9043: CALL_OW 237
// SetSkill ( Kozlov , skill_scientistic , 10 ) ;
9047: LD_EXP 22
9051: PPUSH
9052: LD_INT 4
9054: PPUSH
9055: LD_INT 10
9057: PPUSH
9058: CALL_OW 237
// end else
9062: GO 9168
// begin hc_gallery = ru ;
9064: LD_ADDR_OWVAR 33
9068: PUSH
9069: LD_STRING ru
9071: ST_TO_ADDR
// hc_face_number = 34 ;
9072: LD_ADDR_OWVAR 34
9076: PUSH
9077: LD_INT 34
9079: ST_TO_ADDR
// hc_sex = sex_male ;
9080: LD_ADDR_OWVAR 27
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// hc_class = class_engineer ;
9088: LD_ADDR_OWVAR 28
9092: PUSH
9093: LD_INT 2
9095: ST_TO_ADDR
// hc_skills = [ 2 , 8 , 3 , 10 ] ;
9096: LD_ADDR_OWVAR 31
9100: PUSH
9101: LD_INT 2
9103: PUSH
9104: LD_INT 8
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: LD_INT 10
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
9119: LD_ADDR_OWVAR 29
9123: PUSH
9124: LD_INT 10
9126: PUSH
9127: LD_INT 10
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: ST_TO_ADDR
// hc_name = Nikita S. Kozlov ;
9134: LD_ADDR_OWVAR 26
9138: PUSH
9139: LD_STRING Nikita S. Kozlov
9141: ST_TO_ADDR
// Kozlov = CreateHuman ;
9142: LD_ADDR_EXP 22
9146: PUSH
9147: CALL_OW 44
9151: ST_TO_ADDR
// hc_name =  ;
9152: LD_ADDR_OWVAR 26
9156: PUSH
9157: LD_STRING 
9159: ST_TO_ADDR
// hc_gallery =  ;
9160: LD_ADDR_OWVAR 33
9164: PUSH
9165: LD_STRING 
9167: ST_TO_ADDR
// end ; uc_nation = nation_arabian ;
9168: LD_ADDR_OWVAR 21
9172: PUSH
9173: LD_INT 2
9175: ST_TO_ADDR
// for Un = 1 to Number_of_Arabian_Soldiers do
9176: LD_ADDR_VAR 0 3
9180: PUSH
9181: DOUBLE
9182: LD_INT 1
9184: DEC
9185: ST_TO_ADDR
9186: LD_EXP 89
9190: PUSH
9191: FOR_TO
9192: IFFALSE 9292
// begin if i in [ 1 , 2 , 3 ] then
9194: LD_VAR 0 2
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: LD_INT 2
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: IN
9213: IFFALSE 9233
// PrepareSoldier ( sex_male , human_difficulty_skill - 1 ) else
9215: LD_INT 1
9217: PPUSH
9218: LD_EXP 184
9222: PUSH
9223: LD_INT 1
9225: MINUS
9226: PPUSH
9227: CALL_OW 381
9231: GO 9249
// PrepareSoldier ( 0 , human_difficulty_skill - 1 ) ;
9233: LD_INT 0
9235: PPUSH
9236: LD_EXP 184
9240: PUSH
9241: LD_INT 1
9243: MINUS
9244: PPUSH
9245: CALL_OW 381
// New_person = CreateHuman ;
9249: LD_ADDR_VAR 0 7
9253: PUSH
9254: CALL_OW 44
9258: ST_TO_ADDR
// Arabian_soldiers = Arabian_soldiers ^ New_person ;
9259: LD_ADDR_EXP 80
9263: PUSH
9264: LD_EXP 80
9268: PUSH
9269: LD_VAR 0 7
9273: ADD
9274: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9275: LD_VAR 0 7
9279: PPUSH
9280: LD_INT 14
9282: PPUSH
9283: LD_INT 0
9285: PPUSH
9286: CALL_OW 49
// end ;
9290: GO 9191
9292: POP
9293: POP
// for Un = 1 to Number_of_Arabian_Engineers do
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: DOUBLE
9300: LD_INT 1
9302: DEC
9303: ST_TO_ADDR
9304: LD_EXP 92
9308: PUSH
9309: FOR_TO
9310: IFFALSE 9410
// begin PrepareEngineer ( 0 , human_difficulty_skill ) ;
9312: LD_INT 0
9314: PPUSH
9315: LD_EXP 184
9319: PPUSH
9320: CALL_OW 382
// New_person = CreateHuman ;
9324: LD_ADDR_VAR 0 7
9328: PUSH
9329: CALL_OW 44
9333: ST_TO_ADDR
// SetSkill ( New_person , class_engineer , human_difficulty_skill ) ;
9334: LD_VAR 0 7
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: LD_EXP 184
9346: PPUSH
9347: CALL_OW 237
// Arabian_Engineers = Arabian_Engineers ^ New_person ;
9351: LD_ADDR_EXP 81
9355: PUSH
9356: LD_EXP 81
9360: PUSH
9361: LD_VAR 0 7
9365: ADD
9366: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9367: LD_VAR 0 7
9371: PPUSH
9372: LD_INT 14
9374: PPUSH
9375: LD_INT 0
9377: PPUSH
9378: CALL_OW 49
// ComEnterUnit ( New_person , ArDep2 ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 99
9389: PPUSH
9390: CALL_OW 120
// DoNotAttack ( americans1 , New_person ) ;
9394: LD_EXP 177
9398: PPUSH
9399: LD_VAR 0 7
9403: PPUSH
9404: CALL_OW 471
// end ;
9408: GO 9309
9410: POP
9411: POP
// for Un = 1 to Number_of_Arabian_Mechanics do
9412: LD_ADDR_VAR 0 3
9416: PUSH
9417: DOUBLE
9418: LD_INT 1
9420: DEC
9421: ST_TO_ADDR
9422: LD_EXP 91
9426: PUSH
9427: FOR_TO
9428: IFFALSE 9497
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
9430: LD_INT 0
9432: PPUSH
9433: LD_EXP 184
9437: PPUSH
9438: CALL_OW 383
// New_person = CreateHuman ;
9442: LD_ADDR_VAR 0 7
9446: PUSH
9447: CALL_OW 44
9451: ST_TO_ADDR
// Arabian_mechanics = Arabian_mechanics ^ New_person ;
9452: LD_ADDR_EXP 83
9456: PUSH
9457: LD_EXP 83
9461: PUSH
9462: LD_VAR 0 7
9466: ADD
9467: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9468: LD_VAR 0 7
9472: PPUSH
9473: LD_INT 14
9475: PPUSH
9476: LD_INT 0
9478: PPUSH
9479: CALL_OW 49
// ComEnterUnit ( New_person , ArFact ) ;
9483: LD_VAR 0 7
9487: PPUSH
9488: LD_INT 117
9490: PPUSH
9491: CALL_OW 120
// end ;
9495: GO 9427
9497: POP
9498: POP
// PrepareMechanic ( 0 , human_difficulty_skill ) ;
9499: LD_INT 0
9501: PPUSH
9502: LD_EXP 184
9506: PPUSH
9507: CALL_OW 383
// New_person = CreateHuman ;
9511: LD_ADDR_VAR 0 7
9515: PUSH
9516: CALL_OW 44
9520: ST_TO_ADDR
// Control_Driver = New_person ;
9521: LD_ADDR_EXP 85
9525: PUSH
9526: LD_VAR 0 7
9530: ST_TO_ADDR
// PlaceUnitArea ( Control_Driver , Center_ar_b , false ) ;
9531: LD_EXP 85
9535: PPUSH
9536: LD_INT 14
9538: PPUSH
9539: LD_INT 0
9541: PPUSH
9542: CALL_OW 49
// SetSkill ( Control_Driver , class_mechanic , 3 ) ;
9546: LD_EXP 85
9550: PPUSH
9551: LD_INT 3
9553: PPUSH
9554: LD_INT 3
9556: PPUSH
9557: CALL_OW 237
// RaiseSailEvent ( Link_Bombs ) ;
9561: LD_EXP 175
9565: PPUSH
9566: CALL_OW 427
// for Un = 1 to Number_of_Arabian_Scientists do
9570: LD_ADDR_VAR 0 3
9574: PUSH
9575: DOUBLE
9576: LD_INT 1
9578: DEC
9579: ST_TO_ADDR
9580: LD_EXP 90
9584: PUSH
9585: FOR_TO
9586: IFFALSE 9643
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
9588: LD_INT 0
9590: PPUSH
9591: LD_EXP 184
9595: PPUSH
9596: CALL_OW 384
// New_person = CreateHuman ;
9600: LD_ADDR_VAR 0 7
9604: PUSH
9605: CALL_OW 44
9609: ST_TO_ADDR
// Arabian_scientists = Arabian_scientists ^ New_person ;
9610: LD_ADDR_EXP 82
9614: PUSH
9615: LD_EXP 82
9619: PUSH
9620: LD_VAR 0 7
9624: ADD
9625: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9626: LD_VAR 0 7
9630: PPUSH
9631: LD_INT 14
9633: PPUSH
9634: LD_INT 0
9636: PPUSH
9637: CALL_OW 49
// end ;
9641: GO 9585
9643: POP
9644: POP
// uc_nation = nation_nature ;
9645: LD_ADDR_OWVAR 21
9649: PUSH
9650: LD_INT 0
9652: ST_TO_ADDR
// for Un = 1 to 4 do
9653: LD_ADDR_VAR 0 3
9657: PUSH
9658: DOUBLE
9659: LD_INT 1
9661: DEC
9662: ST_TO_ADDR
9663: LD_INT 4
9665: PUSH
9666: FOR_TO
9667: IFFALSE 9830
// begin PrepareSoldier ( 0 , apeman_difficulty_skill ) ;
9669: LD_INT 0
9671: PPUSH
9672: LD_EXP 185
9676: PPUSH
9677: CALL_OW 381
// hc_class = class_apeman_soldier ;
9681: LD_ADDR_OWVAR 28
9685: PUSH
9686: LD_INT 15
9688: ST_TO_ADDR
// New_person = CreateHuman ;
9689: LD_ADDR_VAR 0 7
9693: PUSH
9694: CALL_OW 44
9698: ST_TO_ADDR
// Arabian_apemens = Arabian_apemens ^ New_person ;
9699: LD_ADDR_EXP 84
9703: PUSH
9704: LD_EXP 84
9708: PUSH
9709: LD_VAR 0 7
9713: ADD
9714: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9715: LD_VAR 0 7
9719: PPUSH
9720: LD_INT 14
9722: PPUSH
9723: LD_INT 0
9725: PPUSH
9726: CALL_OW 49
// case Un of 1 :
9730: LD_VAR 0 3
9734: PUSH
9735: LD_INT 1
9737: DOUBLE
9738: EQUAL
9739: IFTRUE 9743
9741: GO 9758
9743: POP
// ComEnterUnit ( New_person , ArRad1 ) ; 2 :
9744: LD_VAR 0 7
9748: PPUSH
9749: LD_INT 97
9751: PPUSH
9752: CALL_OW 120
9756: GO 9828
9758: LD_INT 2
9760: DOUBLE
9761: EQUAL
9762: IFTRUE 9766
9764: GO 9781
9766: POP
// ComEnterUnit ( New_person , ArRad2 ) ; 3 :
9767: LD_VAR 0 7
9771: PPUSH
9772: LD_INT 88
9774: PPUSH
9775: CALL_OW 120
9779: GO 9828
9781: LD_INT 3
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9804
9789: POP
// ComEnterUnit ( New_person , ArRad3 ) ; 4 :
9790: LD_VAR 0 7
9794: PPUSH
9795: LD_INT 98
9797: PPUSH
9798: CALL_OW 120
9802: GO 9828
9804: LD_INT 4
9806: DOUBLE
9807: EQUAL
9808: IFTRUE 9812
9810: GO 9827
9812: POP
// ComEnterUnit ( New_person , ArRad4 ) ; end ;
9813: LD_VAR 0 7
9817: PPUSH
9818: LD_INT 127
9820: PPUSH
9821: CALL_OW 120
9825: GO 9828
9827: POP
// end ;
9828: GO 9666
9830: POP
9831: POP
// All_arabians = Arabian_soldiers ^ Arabian_scientists ^ Arabian_apemens ^ Control_Driver ;
9832: LD_ADDR_EXP 79
9836: PUSH
9837: LD_EXP 80
9841: PUSH
9842: LD_EXP 82
9846: ADD
9847: PUSH
9848: LD_EXP 84
9852: ADD
9853: PUSH
9854: LD_EXP 85
9858: ADD
9859: ST_TO_ADDR
// uc_side = alliance ;
9860: LD_ADDR_OWVAR 20
9864: PUSH
9865: LD_EXP 182
9869: ST_TO_ADDR
// uc_nation = nation_american ;
9870: LD_ADDR_OWVAR 21
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// Roth = NewCharacter ( Roth ) ;
9878: LD_ADDR_EXP 20
9882: PUSH
9883: LD_STRING Roth
9885: PPUSH
9886: CALL_OW 25
9890: ST_TO_ADDR
// if not Roth then
9891: LD_EXP 20
9895: NOT
9896: IFFALSE 9913
// BuildQuery ( Error: Roth not found!!! , [ OK ] ) else
9898: LD_STRING Error: Roth not found!!!
9900: PPUSH
9901: LD_STRING OK
9903: PUSH
9904: EMPTY
9905: LIST
9906: PPUSH
9907: CALL_OW 99
9911: GO 9958
// begin PlaceUnitArea ( Roth , Center_al_b , false ) ;
9913: LD_EXP 20
9917: PPUSH
9918: LD_INT 15
9920: PPUSH
9921: LD_INT 0
9923: PPUSH
9924: CALL_OW 49
// ComMoveXY ( Roth , 249 , 187 ) ;
9928: LD_EXP 20
9932: PPUSH
9933: LD_INT 249
9935: PPUSH
9936: LD_INT 187
9938: PPUSH
9939: CALL_OW 111
// AddComTurnXY ( Roth , 245 , 187 ) ;
9943: LD_EXP 20
9947: PPUSH
9948: LD_INT 245
9950: PPUSH
9951: LD_INT 187
9953: PPUSH
9954: CALL_OW 178
// end ; Simms = CreateCharacter ( Simms ) ;
9958: LD_ADDR_EXP 16
9962: PUSH
9963: LD_STRING Simms
9965: PPUSH
9966: CALL_OW 34
9970: ST_TO_ADDR
// if not ( Simms ) then
9971: LD_EXP 16
9975: NOT
9976: IFFALSE 9998
// begin PrepareScientist ( sex_female , 7 ) ;
9978: LD_INT 2
9980: PPUSH
9981: LD_INT 7
9983: PPUSH
9984: CALL_OW 384
// Simms = CreateHuman ;
9988: LD_ADDR_EXP 16
9992: PUSH
9993: CALL_OW 44
9997: ST_TO_ADDR
// end ; PlaceUnitArea ( Simms , Center_al_b , false ) ;
9998: LD_EXP 16
10002: PPUSH
10003: LD_INT 15
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: CALL_OW 49
// ComMoveXY ( Simms , 243 , 187 ) ;
10013: LD_EXP 16
10017: PPUSH
10018: LD_INT 243
10020: PPUSH
10021: LD_INT 187
10023: PPUSH
10024: CALL_OW 111
// AddComTurnXY ( Simms , 245 , 187 ) ;
10028: LD_EXP 16
10032: PPUSH
10033: LD_INT 245
10035: PPUSH
10036: LD_INT 187
10038: PPUSH
10039: CALL_OW 178
// uc_side = alliance ;
10043: LD_ADDR_OWVAR 20
10047: PUSH
10048: LD_EXP 182
10052: ST_TO_ADDR
// uc_nation = nation_american ;
10053: LD_ADDR_OWVAR 21
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// Alliance_am_soldiers = [ ] ;
10061: LD_ADDR_EXP 95
10065: PUSH
10066: EMPTY
10067: ST_TO_ADDR
// for Un = 1 to Number_of_AllAm_Soldiers do
10068: LD_ADDR_VAR 0 3
10072: PUSH
10073: DOUBLE
10074: LD_INT 1
10076: DEC
10077: ST_TO_ADDR
10078: LD_EXP 103
10082: PUSH
10083: FOR_TO
10084: IFFALSE 10141
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
10086: LD_INT 0
10088: PPUSH
10089: LD_EXP 184
10093: PPUSH
10094: CALL_OW 381
// New_person = CreateHuman ;
10098: LD_ADDR_VAR 0 7
10102: PUSH
10103: CALL_OW 44
10107: ST_TO_ADDR
// Alliance_am_soldiers = Alliance_am_soldiers ^ New_person ;
10108: LD_ADDR_EXP 95
10112: PUSH
10113: LD_EXP 95
10117: PUSH
10118: LD_VAR 0 7
10122: ADD
10123: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10124: LD_VAR 0 7
10128: PPUSH
10129: LD_INT 15
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL_OW 49
// end ;
10139: GO 10083
10141: POP
10142: POP
// uc_side = alliance ;
10143: LD_ADDR_OWVAR 20
10147: PUSH
10148: LD_EXP 182
10152: ST_TO_ADDR
// uc_nation = nation_american ;
10153: LD_ADDR_OWVAR 21
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// Alliance_am_scientists = [ ] ;
10161: LD_ADDR_EXP 97
10165: PUSH
10166: EMPTY
10167: ST_TO_ADDR
// for Un = 1 to Number_of_AllAm_Scientists do
10168: LD_ADDR_VAR 0 3
10172: PUSH
10173: DOUBLE
10174: LD_INT 1
10176: DEC
10177: ST_TO_ADDR
10178: LD_EXP 104
10182: PUSH
10183: FOR_TO
10184: IFFALSE 10241
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
10186: LD_INT 0
10188: PPUSH
10189: LD_EXP 184
10193: PPUSH
10194: CALL_OW 384
// New_person = CreateHuman ;
10198: LD_ADDR_VAR 0 7
10202: PUSH
10203: CALL_OW 44
10207: ST_TO_ADDR
// Alliance_am_scientists = Alliance_am_scientists ^ New_person ;
10208: LD_ADDR_EXP 97
10212: PUSH
10213: LD_EXP 97
10217: PUSH
10218: LD_VAR 0 7
10222: ADD
10223: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10224: LD_VAR 0 7
10228: PPUSH
10229: LD_INT 15
10231: PPUSH
10232: LD_INT 0
10234: PPUSH
10235: CALL_OW 49
// end ;
10239: GO 10183
10241: POP
10242: POP
// uc_side = alliance ;
10243: LD_ADDR_OWVAR 20
10247: PUSH
10248: LD_EXP 182
10252: ST_TO_ADDR
// uc_nation = nation_russian ;
10253: LD_ADDR_OWVAR 21
10257: PUSH
10258: LD_INT 3
10260: ST_TO_ADDR
// Alliance_rus_soldiers = [ ] ;
10261: LD_ADDR_EXP 94
10265: PUSH
10266: EMPTY
10267: ST_TO_ADDR
// for Un = 1 to Number_of_AllRu_Soldiers do
10268: LD_ADDR_VAR 0 3
10272: PUSH
10273: DOUBLE
10274: LD_INT 1
10276: DEC
10277: ST_TO_ADDR
10278: LD_EXP 105
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10341
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
10286: LD_INT 0
10288: PPUSH
10289: LD_EXP 184
10293: PPUSH
10294: CALL_OW 381
// New_person = CreateHuman ;
10298: LD_ADDR_VAR 0 7
10302: PUSH
10303: CALL_OW 44
10307: ST_TO_ADDR
// Alliance_rus_soldiers = Alliance_rus_soldiers ^ New_person ;
10308: LD_ADDR_EXP 94
10312: PUSH
10313: LD_EXP 94
10317: PUSH
10318: LD_VAR 0 7
10322: ADD
10323: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_INT 15
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// end ;
10339: GO 10283
10341: POP
10342: POP
// uc_side = alliance ;
10343: LD_ADDR_OWVAR 20
10347: PUSH
10348: LD_EXP 182
10352: ST_TO_ADDR
// uc_nation = nation_russian ;
10353: LD_ADDR_OWVAR 21
10357: PUSH
10358: LD_INT 3
10360: ST_TO_ADDR
// Alliance_rus_scientists = [ ] ;
10361: LD_ADDR_EXP 96
10365: PUSH
10366: EMPTY
10367: ST_TO_ADDR
// for Un = 1 to Number_of_AllRu_Scientists do
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: DOUBLE
10374: LD_INT 1
10376: DEC
10377: ST_TO_ADDR
10378: LD_EXP 106
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10441
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
10386: LD_INT 0
10388: PPUSH
10389: LD_EXP 184
10393: PPUSH
10394: CALL_OW 384
// New_person = CreateHuman ;
10398: LD_ADDR_VAR 0 7
10402: PUSH
10403: CALL_OW 44
10407: ST_TO_ADDR
// Alliance_rus_scientists = Alliance_rus_scientists ^ New_person ;
10408: LD_ADDR_EXP 96
10412: PUSH
10413: LD_EXP 96
10417: PUSH
10418: LD_VAR 0 7
10422: ADD
10423: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10424: LD_VAR 0 7
10428: PPUSH
10429: LD_INT 15
10431: PPUSH
10432: LD_INT 0
10434: PPUSH
10435: CALL_OW 49
// end ;
10439: GO 10383
10441: POP
10442: POP
// uc_side = russians1 ;
10443: LD_ADDR_OWVAR 20
10447: PUSH
10448: LD_EXP 179
10452: ST_TO_ADDR
// uc_nation = nation_russian ;
10453: LD_ADDR_OWVAR 21
10457: PUSH
10458: LD_INT 3
10460: ST_TO_ADDR
// Vsevolod = NewCharacter ( Vsevolod ) ;
10461: LD_ADDR_EXP 25
10465: PUSH
10466: LD_STRING Vsevolod
10468: PPUSH
10469: CALL_OW 25
10473: ST_TO_ADDR
// if Vsevolod then
10474: LD_EXP 25
10478: IFFALSE 10554
// begin SetSkill ( Vsevolod , skill_combat , 6 ) ;
10480: LD_EXP 25
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: LD_INT 6
10490: PPUSH
10491: CALL_OW 237
// SetSkill ( Vsevolod , skill_engineering , 4 ) ;
10495: LD_EXP 25
10499: PPUSH
10500: LD_INT 2
10502: PPUSH
10503: LD_INT 4
10505: PPUSH
10506: CALL_OW 237
// SetSkill ( Vsevolod , skill_mechanical , 10 ) ;
10510: LD_EXP 25
10514: PPUSH
10515: LD_INT 3
10517: PPUSH
10518: LD_INT 10
10520: PPUSH
10521: CALL_OW 237
// SetSkill ( Vsevolod , skill_scientistic , 2 ) ;
10525: LD_EXP 25
10529: PPUSH
10530: LD_INT 4
10532: PPUSH
10533: LD_INT 2
10535: PPUSH
10536: CALL_OW 237
// SetClass ( Vsevolod , class_mechanic ) ;
10540: LD_EXP 25
10544: PPUSH
10545: LD_INT 3
10547: PPUSH
10548: CALL_OW 336
// end else
10552: GO 10642
// begin hc_sex = sex_male ;
10554: LD_ADDR_OWVAR 27
10558: PUSH
10559: LD_INT 1
10561: ST_TO_ADDR
// hc_class = class_mechanic ;
10562: LD_ADDR_OWVAR 28
10566: PUSH
10567: LD_INT 3
10569: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 10 , 2 ] ;
10570: LD_ADDR_OWVAR 31
10574: PUSH
10575: LD_INT 6
10577: PUSH
10578: LD_INT 4
10580: PUSH
10581: LD_INT 10
10583: PUSH
10584: LD_INT 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
10593: LD_ADDR_OWVAR 29
10597: PUSH
10598: LD_INT 10
10600: PUSH
10601: LD_INT 10
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: ST_TO_ADDR
// hc_name = Vsevolod I. Gorki ;
10608: LD_ADDR_OWVAR 26
10612: PUSH
10613: LD_STRING Vsevolod I. Gorki
10615: ST_TO_ADDR
// Vsevolod = CreateHuman ;
10616: LD_ADDR_EXP 25
10620: PUSH
10621: CALL_OW 44
10625: ST_TO_ADDR
// hc_name =  ;
10626: LD_ADDR_OWVAR 26
10630: PUSH
10631: LD_STRING 
10633: ST_TO_ADDR
// hc_gallery =  ;
10634: LD_ADDR_OWVAR 33
10638: PUSH
10639: LD_STRING 
10641: ST_TO_ADDR
// end ; RevealFogArea ( americans , way ) ;
10642: LD_EXP 176
10646: PPUSH
10647: LD_INT 22
10649: PPUSH
10650: CALL_OW 332
// uc_side = americans ;
10654: LD_ADDR_OWVAR 20
10658: PUSH
10659: LD_EXP 176
10663: ST_TO_ADDR
// uc_nation = nation_american ;
10664: LD_ADDR_OWVAR 21
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// uc_direction = 0 ;
10672: LD_ADDR_OWVAR 24
10676: PUSH
10677: LD_INT 0
10679: ST_TO_ADDR
// if Initial_JMM_vehicle <> 0 then
10680: LD_EXP 39
10684: PUSH
10685: LD_INT 0
10687: NONEQUAL
10688: IFFALSE 10748
// begin vc_chassis = Initial_JMM_vehicle [ 1 ] ;
10690: LD_ADDR_OWVAR 37
10694: PUSH
10695: LD_EXP 39
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: ST_TO_ADDR
// vc_engine = Initial_JMM_vehicle [ 2 ] ;
10704: LD_ADDR_OWVAR 39
10708: PUSH
10709: LD_EXP 39
10713: PUSH
10714: LD_INT 2
10716: ARRAY
10717: ST_TO_ADDR
// vc_control = Initial_JMM_vehicle [ 3 ] ;
10718: LD_ADDR_OWVAR 38
10722: PUSH
10723: LD_EXP 39
10727: PUSH
10728: LD_INT 3
10730: ARRAY
10731: ST_TO_ADDR
// vc_weapon = Initial_JMM_vehicle [ 4 ] ;
10732: LD_ADDR_OWVAR 40
10736: PUSH
10737: LD_EXP 39
10741: PUSH
10742: LD_INT 4
10744: ARRAY
10745: ST_TO_ADDR
// end else
10746: GO 10780
// begin vc_chassis = us_medium_tracked ;
10748: LD_ADDR_OWVAR 37
10752: PUSH
10753: LD_INT 3
10755: ST_TO_ADDR
// vc_engine = engine_siberite ;
10756: LD_ADDR_OWVAR 39
10760: PUSH
10761: LD_INT 3
10763: ST_TO_ADDR
// vc_control = control_manual ;
10764: LD_ADDR_OWVAR 38
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10772: LD_ADDR_OWVAR 40
10776: PUSH
10777: LD_INT 3
10779: ST_TO_ADDR
// end ; JMM_veh = CreateVehicle ;
10780: LD_ADDR_EXP 57
10784: PUSH
10785: CALL_OW 45
10789: ST_TO_ADDR
// SetFuel ( Jmm_veh , 100 ) ;
10790: LD_EXP 57
10794: PPUSH
10795: LD_INT 100
10797: PPUSH
10798: CALL_OW 240
// PlaceHumanInUnit ( JMM , JMM_veh ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_EXP 57
10811: PPUSH
10812: CALL_OW 52
// PlaceUnitXY ( JMM_veh , 100 , 151 , false ) ;
10816: LD_EXP 57
10820: PPUSH
10821: LD_INT 100
10823: PPUSH
10824: LD_INT 151
10826: PPUSH
10827: LD_INT 0
10829: PPUSH
10830: CALL_OW 48
// if woman_alive then
10834: LD_EXP 38
10838: IFFALSE 10873
// JMM_woman = [ Joan , Lisa , Coonie ] [ Woman_in_am14 ] else
10840: LD_ADDR_EXP 37
10844: PUSH
10845: LD_EXP 12
10849: PUSH
10850: LD_EXP 5
10854: PUSH
10855: LD_EXP 18
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: PUSH
10865: LD_EXP 36
10869: ARRAY
10870: ST_TO_ADDR
10871: GO 10881
// JMM_Woman = 0 ;
10873: LD_ADDR_EXP 37
10877: PUSH
10878: LD_INT 0
10880: ST_TO_ADDR
// if woman_saved then
10881: LD_EXP 34
10885: IFFALSE 11055
// begin if Initial_Woman_vehicle <> 0 then
10887: LD_EXP 40
10891: PUSH
10892: LD_INT 0
10894: NONEQUAL
10895: IFFALSE 10955
// begin vc_chassis = Initial_Woman_vehicle [ 1 ] ;
10897: LD_ADDR_OWVAR 37
10901: PUSH
10902: LD_EXP 40
10906: PUSH
10907: LD_INT 1
10909: ARRAY
10910: ST_TO_ADDR
// vc_engine = Initial_Woman_vehicle [ 2 ] ;
10911: LD_ADDR_OWVAR 39
10915: PUSH
10916: LD_EXP 40
10920: PUSH
10921: LD_INT 2
10923: ARRAY
10924: ST_TO_ADDR
// vc_control = Initial_Woman_vehicle [ 3 ] ;
10925: LD_ADDR_OWVAR 38
10929: PUSH
10930: LD_EXP 40
10934: PUSH
10935: LD_INT 3
10937: ARRAY
10938: ST_TO_ADDR
// vc_weapon = Initial_Woman_vehicle [ 4 ] ;
10939: LD_ADDR_OWVAR 40
10943: PUSH
10944: LD_EXP 40
10948: PUSH
10949: LD_INT 4
10951: ARRAY
10952: ST_TO_ADDR
// end else
10953: GO 10987
// begin vc_chassis = us_medium_tracked ;
10955: LD_ADDR_OWVAR 37
10959: PUSH
10960: LD_INT 3
10962: ST_TO_ADDR
// vc_engine = engine_siberite ;
10963: LD_ADDR_OWVAR 39
10967: PUSH
10968: LD_INT 3
10970: ST_TO_ADDR
// vc_control = control_manual ;
10971: LD_ADDR_OWVAR 38
10975: PUSH
10976: LD_INT 1
10978: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10979: LD_ADDR_OWVAR 40
10983: PUSH
10984: LD_INT 3
10986: ST_TO_ADDR
// end ; Woman_veh = CreateVehicle ;
10987: LD_ADDR_EXP 58
10991: PUSH
10992: CALL_OW 45
10996: ST_TO_ADDR
// SetFuel ( Woman_veh , 100 ) ;
10997: LD_EXP 58
11001: PPUSH
11002: LD_INT 100
11004: PPUSH
11005: CALL_OW 240
// SetSide ( JMM_woman , americans ) ;
11009: LD_EXP 37
11013: PPUSH
11014: LD_EXP 176
11018: PPUSH
11019: CALL_OW 235
// PlaceUnitXY ( Woman_veh , 101 , 156 , false ) ;
11023: LD_EXP 58
11027: PPUSH
11028: LD_INT 101
11030: PPUSH
11031: LD_INT 156
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 48
// PlaceHumanInUnit ( JMM_woman , Woman_veh ) ;
11041: LD_EXP 37
11045: PPUSH
11046: LD_EXP 58
11050: PPUSH
11051: CALL_OW 52
// end ; end ;
11055: LD_VAR 0 1
11059: RET
// function Set_marks ; begin
11060: LD_INT 0
11062: PPUSH
// end ;
11063: LD_VAR 0 1
11067: RET
// function Set_attitudes ; begin
11068: LD_INT 0
11070: PPUSH
// SetAttitude ( americans , americans1 , att_friend , true ) ;
11071: LD_EXP 176
11075: PPUSH
11076: LD_EXP 177
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: CALL_OW 80
// SetAttitude ( russians , russians1 , att_friend , true ) ;
11091: LD_EXP 178
11095: PPUSH
11096: LD_EXP 179
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 80
// SetAttitude ( arabians , arabians1 , att_friend , true ) ;
11111: LD_EXP 180
11115: PPUSH
11116: LD_EXP 181
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 80
// SetAttitude ( arabians , russians , att_neutral , true ) ;
11131: LD_EXP 180
11135: PPUSH
11136: LD_EXP 178
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 80
// SetAttitude ( arabians , russians1 , att_neutral , true ) ;
11151: LD_EXP 180
11155: PPUSH
11156: LD_EXP 179
11160: PPUSH
11161: LD_INT 0
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 80
// SetAttitude ( arabians , alliance , att_neutral , true ) ;
11171: LD_EXP 180
11175: PPUSH
11176: LD_EXP 182
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 80
// SetAttitude ( russians , alliance , att_neutral , true ) ;
11191: LD_EXP 178
11195: PPUSH
11196: LD_EXP 182
11200: PPUSH
11201: LD_INT 0
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 80
// SetAttitude ( russians1 , alliance , att_neutral , true ) ;
11211: LD_EXP 179
11215: PPUSH
11216: LD_EXP 182
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
11231: LD_EXP 176
11235: PPUSH
11236: LD_EXP 178
11240: PPUSH
11241: LD_INT 2
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: CALL_OW 80
// SetAttitude ( americans , arabians , att_enemy , true ) ;
11251: LD_EXP 176
11255: PPUSH
11256: LD_EXP 180
11260: PPUSH
11261: LD_INT 2
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 80
// SetAttitude ( americans , alliance , att_enemy , true ) ;
11271: LD_EXP 176
11275: PPUSH
11276: LD_EXP 182
11280: PPUSH
11281: LD_INT 2
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 80
// SetAttitude ( americans1 , russians , att_enemy , true ) ;
11291: LD_EXP 177
11295: PPUSH
11296: LD_EXP 178
11300: PPUSH
11301: LD_INT 2
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 80
// SetAttitude ( americans1 , arabians , att_enemy , true ) ;
11311: LD_EXP 177
11315: PPUSH
11316: LD_EXP 180
11320: PPUSH
11321: LD_INT 2
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: CALL_OW 80
// SetAttitude ( americans1 , alliance , att_friend , true ) ;
11331: LD_EXP 177
11335: PPUSH
11336: LD_EXP 182
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 80
// SetAttitude ( Explorers_side , alliance , att_friend , true ) ;
11351: LD_EXP 183
11355: PPUSH
11356: LD_EXP 182
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 80
// SetAttitude ( Explorers_Side , americans , att_friend , false ) ;
11371: LD_EXP 183
11375: PPUSH
11376: LD_EXP 176
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 80
// SetAttitude ( americans , Explorers_side , att_neutral , false ) ;
11391: LD_EXP 176
11395: PPUSH
11396: LD_EXP 183
11400: PPUSH
11401: LD_INT 0
11403: PPUSH
11404: LD_INT 0
11406: PPUSH
11407: CALL_OW 80
// SetAttitude ( Explorers_side , russians , att_neutral , true ) ;
11411: LD_EXP 183
11415: PPUSH
11416: LD_EXP 178
11420: PPUSH
11421: LD_INT 0
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 80
// SetAttitude ( Explorers_side , russians1 , att_neutral , true ) ;
11431: LD_EXP 183
11435: PPUSH
11436: LD_EXP 179
11440: PPUSH
11441: LD_INT 0
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 80
// SetAttitude ( Explorers_side , arabians , att_neutral , true ) ;
11451: LD_EXP 183
11455: PPUSH
11456: LD_EXP 180
11460: PPUSH
11461: LD_INT 0
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 80
// end ;
11471: LD_VAR 0 1
11475: RET
// function Send_units_to_initial_position ; begin
11476: LD_INT 0
11478: PPUSH
// end ;
11479: LD_VAR 0 1
11483: RET
// function Init ; begin
11484: LD_INT 0
11486: PPUSH
// RandomizeAll ;
11487: CALL_OW 11
// Set_variables ;
11491: CALL 0 0 0
// Prepare_difficulty ;
11495: CALL 3921 0 0
// Set_marks ;
11499: CALL 11060 0 0
// Set_attitudes ;
11503: CALL 11068 0 0
// Prepare_characters ;
11507: CALL 6117 0 0
// Send_units_to_initial_position ;
11511: CALL 11476 0 0
// end ;
11515: LD_VAR 0 1
11519: RET
// starting begin Debug_Constant = false ;
11520: LD_ADDR_EXP 195
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// Init ;
11528: CALL 11484 0 0
// CenterNowOnXY ( 135 , 194 ) ;
11532: LD_INT 135
11534: PPUSH
11535: LD_INT 194
11537: PPUSH
11538: CALL_OW 86
// Wait ( 0 0$2 ) ;
11542: LD_INT 70
11544: PPUSH
11545: CALL_OW 67
// CenterJMM = true ;
11549: LD_ADDR_EXP 68
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// end ; end_of_file
11557: END
// function FirstTalk ; var list_of_q , selection , V ; begin
11558: LD_INT 0
11560: PPUSH
11561: PPUSH
11562: PPUSH
11563: PPUSH
// RaiseSailEvent ( Run_JMM_Vehicles ) ;
11564: LD_EXP 169
11568: PPUSH
11569: CALL_OW 427
// if kappa_delayed then
11573: LD_EXP 35
11577: IFFALSE 11801
// begin Say ( JMM , D1T-JMM-1 ) ;
11579: LD_EXP 1
11583: PPUSH
11584: LD_STRING D1T-JMM-1
11586: PPUSH
11587: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
11591: LD_EXP 2
11595: PPUSH
11596: LD_STRING D1T-Pow-1
11598: PPUSH
11599: CALL_OW 88
// if kappa_saved then
11603: LD_EXP 33
11607: IFFALSE 11635
// begin Say ( JMM , D1T-JMM-2 ) ;
11609: LD_EXP 1
11613: PPUSH
11614: LD_STRING D1T-JMM-2
11616: PPUSH
11617: CALL_OW 88
// Say ( Powell , D1T-Pow-2 ) ;
11621: LD_EXP 2
11625: PPUSH
11626: LD_STRING D1T-Pow-2
11628: PPUSH
11629: CALL_OW 88
// end else
11633: GO 11799
// if not ( kappa_saved ) and Woman_saved then
11635: LD_EXP 33
11639: NOT
11640: PUSH
11641: LD_EXP 34
11645: AND
11646: IFFALSE 11761
// begin Say ( JMM , D1T-JMM-3 ) ;
11648: LD_EXP 1
11652: PPUSH
11653: LD_STRING D1T-JMM-3
11655: PPUSH
11656: CALL_OW 88
// Say ( Powell , D1T-Pow-3 ) ;
11660: LD_EXP 2
11664: PPUSH
11665: LD_STRING D1T-Pow-3
11667: PPUSH
11668: CALL_OW 88
// case Woman_in_am14 of 1 :
11672: LD_EXP 36
11676: PUSH
11677: LD_INT 1
11679: DOUBLE
11680: EQUAL
11681: IFTRUE 11685
11683: GO 11700
11685: POP
// Say ( Joan , D1T-Joan-3 ) ; 2 :
11686: LD_EXP 12
11690: PPUSH
11691: LD_STRING D1T-Joan-3
11693: PPUSH
11694: CALL_OW 88
11698: GO 11747
11700: LD_INT 2
11702: DOUBLE
11703: EQUAL
11704: IFTRUE 11708
11706: GO 11723
11708: POP
// Say ( Lisa , D1T-Lisa-3 ) ; 3 :
11709: LD_EXP 5
11713: PPUSH
11714: LD_STRING D1T-Lisa-3
11716: PPUSH
11717: CALL_OW 88
11721: GO 11747
11723: LD_INT 3
11725: DOUBLE
11726: EQUAL
11727: IFTRUE 11731
11729: GO 11746
11731: POP
// Say ( Coonie , D1T-Con-3 ) ; end ;
11732: LD_EXP 18
11736: PPUSH
11737: LD_STRING D1T-Con-3
11739: PPUSH
11740: CALL_OW 88
11744: GO 11747
11746: POP
// Say ( Powell , D1T-Pow-4 ) ;
11747: LD_EXP 2
11751: PPUSH
11752: LD_STRING D1T-Pow-4
11754: PPUSH
11755: CALL_OW 88
// end else
11759: GO 11799
// if not ( kappa_saved ) and not ( Woman_saved ) then
11761: LD_EXP 33
11765: NOT
11766: PUSH
11767: LD_EXP 34
11771: NOT
11772: AND
11773: IFFALSE 11799
// begin Say ( JMM , D1T-JMM-4 ) ;
11775: LD_EXP 1
11779: PPUSH
11780: LD_STRING D1T-JMM-4
11782: PPUSH
11783: CALL_OW 88
// Say ( Powell , D1T-Pow-5 ) ;
11787: LD_EXP 2
11791: PPUSH
11792: LD_STRING D1T-Pow-5
11794: PPUSH
11795: CALL_OW 88
// end ; end else
11799: GO 11825
// begin Say ( JMM , D1nT-JMM-1 ) ;
11801: LD_EXP 1
11805: PPUSH
11806: LD_STRING D1nT-JMM-1
11808: PPUSH
11809: CALL_OW 88
// Say ( Powell , D1nT-Pow-1 ) ;
11813: LD_EXP 2
11817: PPUSH
11818: LD_STRING D1nT-Pow-1
11820: PPUSH
11821: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
11825: LD_EXP 1
11829: PPUSH
11830: LD_STRING D1-JMM-1
11832: PPUSH
11833: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
11837: LD_EXP 2
11841: PPUSH
11842: LD_STRING D1-Pow-1
11844: PPUSH
11845: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11849: LD_EXP 1
11853: PPUSH
11854: LD_STRING D1-JMM-2
11856: PPUSH
11857: CALL_OW 88
// CenterJMM = false ;
11861: LD_ADDR_EXP 68
11865: PUSH
11866: LD_INT 0
11868: ST_TO_ADDR
// if not ( Skip ) then
11869: LD_EXP 186
11873: NOT
11874: IFFALSE 11885
// RaiseSailEvent ( Map_am_base ) ;
11876: LD_EXP 161
11880: PPUSH
11881: CALL_OW 427
// Say ( Powell , D1-Pow-2 ) ;
11885: LD_EXP 2
11889: PPUSH
11890: LD_STRING D1-Pow-2
11892: PPUSH
11893: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11897: LD_EXP 1
11901: PPUSH
11902: LD_STRING D1-JMM-3
11904: PPUSH
11905: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
11909: LD_EXP 2
11913: PPUSH
11914: LD_STRING D1-Pow-3
11916: PPUSH
11917: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
11921: LD_EXP 1
11925: PPUSH
11926: LD_STRING D1-JMM-4
11928: PPUSH
11929: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
11933: LD_EXP 2
11937: PPUSH
11938: LD_STRING D1-Pow-4
11940: PPUSH
11941: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
11945: LD_EXP 1
11949: PPUSH
11950: LD_STRING D1-JMM-5
11952: PPUSH
11953: CALL_OW 88
// CenterJMM = false ;
11957: LD_ADDR_EXP 68
11961: PUSH
11962: LD_INT 0
11964: ST_TO_ADDR
// if not ( Skip ) then
11965: LD_EXP 186
11969: NOT
11970: IFFALSE 11981
// RaiseSailEvent ( Map_rus_attack ) ;
11972: LD_EXP 162
11976: PPUSH
11977: CALL_OW 427
// Say ( Powell , D1-Pow-5 ) ;
11981: LD_EXP 2
11985: PPUSH
11986: LD_STRING D1-Pow-5
11988: PPUSH
11989: CALL_OW 88
// if not ( Skip ) then
11993: LD_EXP 186
11997: NOT
11998: IFFALSE 12165
// begin list_of_q = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
12000: LD_ADDR_VAR 0 2
12004: PUSH
12005: LD_INT 1
12007: PUSH
12008: LD_INT 2
12010: PUSH
12011: LD_INT 3
12013: PUSH
12014: LD_INT 4
12016: PUSH
12017: LD_INT 5
12019: PUSH
12020: LD_INT 6
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: ST_TO_ADDR
// repeat selection = SelectiveQuery ( Q1 , list_of_q ) ;
12031: LD_ADDR_VAR 0 3
12035: PUSH
12036: LD_STRING Q1
12038: PPUSH
12039: LD_VAR 0 2
12043: PPUSH
12044: CALL_OW 98
12048: ST_TO_ADDR
// list_of_q = list_of_q diff selection ;
12049: LD_ADDR_VAR 0 2
12053: PUSH
12054: LD_VAR 0 2
12058: PUSH
12059: LD_VAR 0 3
12063: DIFF
12064: ST_TO_ADDR
// ResolveQuery ( selection , list_of_q ) ;
12065: LD_VAR 0 3
12069: PPUSH
12070: LD_VAR 0 2
12074: PPUSH
12075: CALL 12170 0 2
// until ( selection in [ 5 , 6 ] ) or list_of_q = 2 ;
12079: LD_VAR 0 3
12083: PUSH
12084: LD_INT 5
12086: PUSH
12087: LD_INT 6
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: IN
12094: PUSH
12095: LD_VAR 0 2
12099: PUSH
12100: LD_INT 2
12102: EQUAL
12103: OR
12104: IFFALSE 12031
// if not ( selection in [ 5 , 6 ] ) then
12106: LD_VAR 0 3
12110: PUSH
12111: LD_INT 5
12113: PUSH
12114: LD_INT 6
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: IN
12121: NOT
12122: IFFALSE 12165
// begin selection = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
12124: LD_ADDR_VAR 0 3
12128: PUSH
12129: LD_STRING Q1a
12131: PPUSH
12132: LD_INT 1
12134: PUSH
12135: LD_INT 2
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 98
12146: ST_TO_ADDR
// ResolveQuery ( selection + 4 , list_of_q ) ;
12147: LD_VAR 0 3
12151: PUSH
12152: LD_INT 4
12154: PLUS
12155: PPUSH
12156: LD_VAR 0 2
12160: PPUSH
12161: CALL 12170 0 2
// end ; end ; end ;
12165: LD_VAR 0 1
12169: RET
// function ResolveQuery ( question , list_of_q ) ; begin
12170: LD_INT 0
12172: PPUSH
// case question of 1 :
12173: LD_VAR 0 1
12177: PUSH
12178: LD_INT 1
12180: DOUBLE
12181: EQUAL
12182: IFTRUE 12186
12184: GO 12237
12186: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
12187: LD_EXP 1
12191: PPUSH
12192: LD_STRING D2Mot-JMM-1
12194: PPUSH
12195: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
12199: LD_EXP 2
12203: PPUSH
12204: LD_STRING D2Mot-Pow-1
12206: PPUSH
12207: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
12211: LD_EXP 1
12215: PPUSH
12216: LD_STRING D2Mot-JMM-2
12218: PPUSH
12219: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
12223: LD_EXP 2
12227: PPUSH
12228: LD_STRING D2Mot-Pow-2
12230: PPUSH
12231: CALL_OW 88
// end ; 2 :
12235: GO 12588
12237: LD_INT 2
12239: DOUBLE
12240: EQUAL
12241: IFTRUE 12245
12243: GO 12321
12245: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
12246: LD_EXP 1
12250: PPUSH
12251: LD_STRING D2Rus-JMM-1
12253: PPUSH
12254: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
12258: LD_EXP 2
12262: PPUSH
12263: LD_STRING D2Rus-Pow-1
12265: PPUSH
12266: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
12270: LD_EXP 1
12274: PPUSH
12275: LD_STRING D2Rus-JMM-2
12277: PPUSH
12278: CALL_OW 88
// if not ( 3 in list_of_q ) then
12282: LD_INT 3
12284: PUSH
12285: LD_VAR 0 2
12289: IN
12290: NOT
12291: IFFALSE 12307
// Say ( Powell , D2Rus-Pow-2 ) else
12293: LD_EXP 2
12297: PPUSH
12298: LD_STRING D2Rus-Pow-2
12300: PPUSH
12301: CALL_OW 88
12305: GO 12319
// Say ( Powell , D2Rus-Pow-2a ) ;
12307: LD_EXP 2
12311: PPUSH
12312: LD_STRING D2Rus-Pow-2a
12314: PPUSH
12315: CALL_OW 88
// end ; 3 :
12319: GO 12588
12321: LD_INT 3
12323: DOUBLE
12324: EQUAL
12325: IFTRUE 12329
12327: GO 12422
12329: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
12330: LD_EXP 1
12334: PPUSH
12335: LD_STRING D2Leg-JMM-1
12337: PPUSH
12338: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
12342: LD_EXP 2
12346: PPUSH
12347: LD_STRING D2Leg-Pow-1
12349: PPUSH
12350: CALL_OW 88
// if ( 2 in list_of_q ) then
12354: LD_INT 2
12356: PUSH
12357: LD_VAR 0 2
12361: IN
12362: IFFALSE 12388
// begin Say ( JMM , D2Leg-JMM-2 ) ;
12364: LD_EXP 1
12368: PPUSH
12369: LD_STRING D2Leg-JMM-2
12371: PPUSH
12372: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
12376: LD_EXP 2
12380: PPUSH
12381: LD_STRING D2Leg-Pow-2
12383: PPUSH
12384: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
12388: LD_EXP 1
12392: PPUSH
12393: LD_STRING D2Leg-JMM-3
12395: PPUSH
12396: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
12400: LD_EXP 2
12404: PPUSH
12405: LD_STRING D2Leg-Pow-3
12407: PPUSH
12408: CALL_OW 88
// Add_Legion_Objectives = true ;
12412: LD_ADDR_EXP 230
12416: PUSH
12417: LD_INT 1
12419: ST_TO_ADDR
// end ; 4 :
12420: GO 12588
12422: LD_INT 4
12424: DOUBLE
12425: EQUAL
12426: IFTRUE 12430
12428: GO 12505
12430: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
12431: LD_EXP 1
12435: PPUSH
12436: LD_STRING D2Ar-JMM-1
12438: PPUSH
12439: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
12443: LD_EXP 2
12447: PPUSH
12448: LD_STRING D2Ar-Pow-1
12450: PPUSH
12451: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
12455: LD_EXP 1
12459: PPUSH
12460: LD_STRING D2Ar-JMM-2
12462: PPUSH
12463: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
12467: LD_EXP 2
12471: PPUSH
12472: LD_STRING D2Ar-Pow-2
12474: PPUSH
12475: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
12479: LD_EXP 1
12483: PPUSH
12484: LD_STRING D2Ar-JMM-3
12486: PPUSH
12487: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
12491: LD_EXP 2
12495: PPUSH
12496: LD_STRING D2Ar-Pow-3
12498: PPUSH
12499: CALL_OW 88
// end ; 5 :
12503: GO 12588
12505: LD_INT 5
12507: DOUBLE
12508: EQUAL
12509: IFTRUE 12513
12511: GO 12528
12513: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
12514: LD_EXP 1
12518: PPUSH
12519: LD_STRING D2Conf-JMM-1
12521: PPUSH
12522: CALL_OW 88
// end ; 6 :
12526: GO 12588
12528: LD_INT 6
12530: DOUBLE
12531: EQUAL
12532: IFTRUE 12536
12534: GO 12587
12536: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
12537: LD_EXP 1
12541: PPUSH
12542: LD_STRING D2Com-JMM-1
12544: PPUSH
12545: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
12549: LD_EXP 2
12553: PPUSH
12554: LD_STRING D2Com-Pow-1
12556: PPUSH
12557: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
12561: LD_EXP 1
12565: PPUSH
12566: LD_STRING D2Com-JMM-2
12568: PPUSH
12569: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
12573: LD_EXP 2
12577: PPUSH
12578: LD_STRING D2Com-Pow-2
12580: PPUSH
12581: CALL_OW 88
// end ; end ;
12585: GO 12588
12587: POP
// end ;
12588: LD_VAR 0 3
12592: RET
// function SecondTalk ; begin
12593: LD_INT 0
12595: PPUSH
// Joan_semafor = true ;
12596: LD_ADDR_EXP 233
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// if Woman_saved > 0 then
12604: LD_EXP 34
12608: PUSH
12609: LD_INT 0
12611: GREATER
12612: IFFALSE 12713
// begin case Woman_saved of 1 :
12614: LD_EXP 34
12618: PUSH
12619: LD_INT 1
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 12642
12627: POP
// Say ( Joan , D3W-Joan-1 ) ; 2 :
12628: LD_EXP 12
12632: PPUSH
12633: LD_STRING D3W-Joan-1
12635: PPUSH
12636: CALL_OW 88
12640: GO 12689
12642: LD_INT 2
12644: DOUBLE
12645: EQUAL
12646: IFTRUE 12650
12648: GO 12665
12650: POP
// Say ( Lisa , D3W-Lisa-1 ) ; 3 :
12651: LD_EXP 5
12655: PPUSH
12656: LD_STRING D3W-Lisa-1
12658: PPUSH
12659: CALL_OW 88
12663: GO 12689
12665: LD_INT 3
12667: DOUBLE
12668: EQUAL
12669: IFTRUE 12673
12671: GO 12688
12673: POP
// Say ( Coonie , D3W-Con-1 ) ; end ;
12674: LD_EXP 18
12678: PPUSH
12679: LD_STRING D3W-Con-1
12681: PPUSH
12682: CALL_OW 88
12686: GO 12689
12688: POP
// Say ( JMM , D3W-JMM-1 ) ;
12689: LD_EXP 1
12693: PPUSH
12694: LD_STRING D3W-JMM-1
12696: PPUSH
12697: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
12701: LD_EXP 1
12705: PPUSH
12706: LD_STRING D3nW-JMM-1a
12708: PPUSH
12709: CALL_OW 88
// end ; Joan_semafor = false ;
12713: LD_ADDR_EXP 233
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// end ;
12721: LD_VAR 0 1
12725: RET
// every 0 0$1 do var hlp ;
12726: GO 12728
12728: DISABLE
12729: LD_INT 0
12731: PPUSH
// begin ingame_video = true ;
12732: LD_ADDR_OWVAR 52
12736: PUSH
12737: LD_INT 1
12739: ST_TO_ADDR
// interface_hidden = true ;
12740: LD_ADDR_OWVAR 54
12744: PUSH
12745: LD_INT 1
12747: ST_TO_ADDR
// FirstTalk ;
12748: CALL 11558 0 0
// WaitTask ( JMM_veh , 1 ) ;
12752: LD_EXP 57
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL 17888 0 2
// if IsInUnit ( JMM ) then
12764: LD_EXP 1
12768: PPUSH
12769: CALL_OW 310
12773: IFFALSE 12799
// begin ComExitVehicle ( JMM ) ;
12775: LD_EXP 1
12779: PPUSH
12780: CALL_OW 121
// if JMM_Woman then
12784: LD_EXP 37
12788: IFFALSE 12799
// ComExitVehicle ( JMM_Woman ) ;
12790: LD_EXP 37
12794: PPUSH
12795: CALL_OW 121
// end ; Wait ( 0 0$1 ) ;
12799: LD_INT 35
12801: PPUSH
12802: CALL_OW 67
// Skip = false ;
12806: LD_ADDR_EXP 186
12810: PUSH
12811: LD_INT 0
12813: ST_TO_ADDR
// CenterJMM = false ;
12814: LD_ADDR_EXP 68
12818: PUSH
12819: LD_INT 0
12821: ST_TO_ADDR
// Wait ( 0 0$1 ) ;
12822: LD_INT 35
12824: PPUSH
12825: CALL_OW 67
// ComMoveXY ( [ JMM , JMM_woman ] , 68 , 105 ) ;
12829: LD_EXP 1
12833: PUSH
12834: LD_EXP 37
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PPUSH
12843: LD_INT 68
12845: PPUSH
12846: LD_INT 105
12848: PPUSH
12849: CALL_OW 111
// ComMoveXY ( Powell , 47 , 64 ) ;
12853: LD_EXP 2
12857: PPUSH
12858: LD_INT 47
12860: PPUSH
12861: LD_INT 64
12863: PPUSH
12864: CALL_OW 111
// RaiseSailEvent ( Send_Helpers ) ;
12868: LD_EXP 163
12872: PPUSH
12873: CALL_OW 427
// CenterOnXY ( 64 , 99 ) ;
12877: LD_INT 64
12879: PPUSH
12880: LD_INT 99
12882: PPUSH
12883: CALL_OW 84
// WaitTask ( [ JMM , JMM_woman ] , 0.5 ) ;
12887: LD_EXP 1
12891: PUSH
12892: LD_EXP 37
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PPUSH
12901: LD_REAL  5.00000000000000E-0001
12904: PPUSH
12905: CALL 17888 0 2
// ChangeMissionObjectives ( M1 ) ;
12909: LD_STRING M1
12911: PPUSH
12912: CALL_OW 337
// ingame_video = false ;
12916: LD_ADDR_OWVAR 52
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// interface_hidden = false ;
12924: LD_ADDR_OWVAR 54
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// SaveForQuickRestart ;
12932: CALL_OW 22
// Wait ( 0 0$2 ) ;
12936: LD_INT 70
12938: PPUSH
12939: CALL_OW 67
// RandomizeAll ;
12943: CALL_OW 11
// SecondTalk ;
12947: CALL 12593 0 0
// end ;
12951: PPOPN 1
12953: END
// every 0 0$2 trigger Time_of_Ingame_Run_Over + 0 0$15 < tick marked 10 do
12954: LD_EXP 189
12958: PUSH
12959: LD_INT 525
12961: PLUS
12962: PUSH
12963: LD_OWVAR 1
12967: LESS
12968: IFFALSE 13132
12970: GO 12972
12972: DISABLE
// begin DialogueOn ;
12973: CALL_OW 6
// SayRadioNoName ( Friend , D7-Friend-1 ) ;
12977: LD_EXP 21
12981: PPUSH
12982: LD_STRING D7-Friend-1
12984: PPUSH
12985: CALL_OW 95
// Say ( JMM , D7-JMM-1 ) ;
12989: LD_EXP 1
12993: PPUSH
12994: LD_STRING D7-JMM-1
12996: PPUSH
12997: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-2 ) ;
13001: LD_EXP 21
13005: PPUSH
13006: LD_STRING D7-Friend-2
13008: PPUSH
13009: CALL_OW 95
// Say ( JMM , D7-JMM-2 ) ;
13013: LD_EXP 1
13017: PPUSH
13018: LD_STRING D7-JMM-2
13020: PPUSH
13021: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-3 ) ;
13025: LD_EXP 21
13029: PPUSH
13030: LD_STRING D7-Friend-3
13032: PPUSH
13033: CALL_OW 95
// Say ( JMM , D7-JMM-3 ) ;
13037: LD_EXP 1
13041: PPUSH
13042: LD_STRING D7-JMM-3
13044: PPUSH
13045: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-4 ) ;
13049: LD_EXP 21
13053: PPUSH
13054: LD_STRING D7-Friend-4
13056: PPUSH
13057: CALL_OW 95
// Say ( JMM , D7-JMM-4 ) ;
13061: LD_EXP 1
13065: PPUSH
13066: LD_STRING D7-JMM-4
13068: PPUSH
13069: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-5 ) ;
13073: LD_EXP 21
13077: PPUSH
13078: LD_STRING D7-Friend-5
13080: PPUSH
13081: CALL_OW 95
// Say ( JMM , D7-JMM-5 ) ;
13085: LD_EXP 1
13089: PPUSH
13090: LD_STRING D7-JMM-5
13092: PPUSH
13093: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-6 ) ;
13097: LD_EXP 21
13101: PPUSH
13102: LD_STRING D7-Friend-6
13104: PPUSH
13105: CALL_OW 95
// Say ( JMM , D7-JMM-6 ) ;
13109: LD_EXP 1
13113: PPUSH
13114: LD_STRING D7-JMM-6
13116: PPUSH
13117: CALL_OW 88
// DialogueOff ;
13121: CALL_OW 7
// ChangeMissionObjectives ( Mlegion ) ;
13125: LD_STRING Mlegion
13127: PPUSH
13128: CALL_OW 337
// end ;
13132: END
// every 0 0$1 trigger tick > Stevens_Coming_Time marked 10 do var Stevens_people , Un , New_vehicle , Stev_vehicles ;
13133: LD_OWVAR 1
13137: PUSH
13138: LD_EXP 200
13142: GREATER
13143: IFFALSE 13927
13145: GO 13147
13147: DISABLE
13148: LD_INT 0
13150: PPUSH
13151: PPUSH
13152: PPUSH
13153: PPUSH
// begin Stevens_people = [ ] ;
13154: LD_ADDR_VAR 0 1
13158: PUSH
13159: EMPTY
13160: ST_TO_ADDR
// if BobbyLoc = 6 then
13161: LD_EXP 41
13165: PUSH
13166: LD_INT 6
13168: EQUAL
13169: IFFALSE 13187
// Stevens_people = Stevens_people ^ Bobby ;
13171: LD_ADDR_VAR 0 1
13175: PUSH
13176: LD_VAR 0 1
13180: PUSH
13181: LD_EXP 3
13185: ADD
13186: ST_TO_ADDR
// if CyrusLoc = 6 then
13187: LD_EXP 42
13191: PUSH
13192: LD_INT 6
13194: EQUAL
13195: IFFALSE 13213
// Stevens_people = Stevens_people ^ Cyrus ;
13197: LD_ADDR_VAR 0 1
13201: PUSH
13202: LD_VAR 0 1
13206: PUSH
13207: LD_EXP 4
13211: ADD
13212: ST_TO_ADDR
// if LisaLoc = 6 then
13213: LD_EXP 43
13217: PUSH
13218: LD_INT 6
13220: EQUAL
13221: IFFALSE 13239
// Stevens_people = Stevens_people ^ Lisa ;
13223: LD_ADDR_VAR 0 1
13227: PUSH
13228: LD_VAR 0 1
13232: PUSH
13233: LD_EXP 5
13237: ADD
13238: ST_TO_ADDR
// if FrankLoc = 6 then
13239: LD_EXP 44
13243: PUSH
13244: LD_INT 6
13246: EQUAL
13247: IFFALSE 13265
// Stevens_people = Stevens_people ^ Frank ;
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: LD_VAR 0 1
13258: PUSH
13259: LD_EXP 6
13263: ADD
13264: ST_TO_ADDR
// if BrownLoc = 6 then
13265: LD_EXP 45
13269: PUSH
13270: LD_INT 6
13272: EQUAL
13273: IFFALSE 13291
// Stevens_people = Stevens_people ^ Brown ;
13275: LD_ADDR_VAR 0 1
13279: PUSH
13280: LD_VAR 0 1
13284: PUSH
13285: LD_EXP 7
13289: ADD
13290: ST_TO_ADDR
// if DonaldsonLoc = 6 then
13291: LD_EXP 46
13295: PUSH
13296: LD_INT 6
13298: EQUAL
13299: IFFALSE 13317
// Stevens_people = Stevens_people ^ Donaldson ;
13301: LD_ADDR_VAR 0 1
13305: PUSH
13306: LD_VAR 0 1
13310: PUSH
13311: LD_EXP 8
13315: ADD
13316: ST_TO_ADDR
// if VanHoutenLoc = 6 then
13317: LD_EXP 47
13321: PUSH
13322: LD_INT 6
13324: EQUAL
13325: IFFALSE 13343
// Stevens_people = Stevens_people ^ VanHouten ;
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_VAR 0 1
13336: PUSH
13337: LD_EXP 24
13341: ADD
13342: ST_TO_ADDR
// if GladstoneLoc = 6 then
13343: LD_EXP 48
13347: PUSH
13348: LD_INT 6
13350: EQUAL
13351: IFFALSE 13369
// Stevens_people = Stevens_people ^ Gladstone ;
13353: LD_ADDR_VAR 0 1
13357: PUSH
13358: LD_VAR 0 1
13362: PUSH
13363: LD_EXP 9
13367: ADD
13368: ST_TO_ADDR
// if YamokoLoc = 6 then
13369: LD_EXP 50
13373: PUSH
13374: LD_INT 6
13376: EQUAL
13377: IFFALSE 13395
// Stevens_people = Stevens_people ^ Yamoko ;
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_VAR 0 1
13388: PUSH
13389: LD_EXP 14
13393: ADD
13394: ST_TO_ADDR
// if GaryLoc = 6 then
13395: LD_EXP 51
13399: PUSH
13400: LD_INT 6
13402: EQUAL
13403: IFFALSE 13421
// Stevens_people = Stevens_people ^ Gary ;
13405: LD_ADDR_VAR 0 1
13409: PUSH
13410: LD_VAR 0 1
13414: PUSH
13415: LD_EXP 15
13419: ADD
13420: ST_TO_ADDR
// if DenisLoc = 6 then
13421: LD_EXP 52
13425: PUSH
13426: LD_INT 6
13428: EQUAL
13429: IFFALSE 13447
// Stevens_people = Stevens_people ^ Denis ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_VAR 0 1
13440: PUSH
13441: LD_EXP 11
13445: ADD
13446: ST_TO_ADDR
// if CornellLoc = 6 then
13447: LD_EXP 53
13451: PUSH
13452: LD_INT 6
13454: EQUAL
13455: IFFALSE 13473
// Stevens_people = Stevens_people ^ Cornell ;
13457: LD_ADDR_VAR 0 1
13461: PUSH
13462: LD_VAR 0 1
13466: PUSH
13467: LD_EXP 10
13471: ADD
13472: ST_TO_ADDR
// if Stevens then
13473: LD_EXP 17
13477: IFFALSE 13497
// Stevens_people = Stevens_people ^ Stevens else
13479: LD_ADDR_VAR 0 1
13483: PUSH
13484: LD_VAR 0 1
13488: PUSH
13489: LD_EXP 17
13493: ADD
13494: ST_TO_ADDR
13495: GO 13513
// Stevens_people = Stevens_people ^ Baker ;
13497: LD_ADDR_VAR 0 1
13501: PUSH
13502: LD_VAR 0 1
13506: PUSH
13507: LD_EXP 23
13511: ADD
13512: ST_TO_ADDR
// Stevens_people = Stevens_people ^ OtherWithJMM diff [ 0 ] ;
13513: LD_ADDR_VAR 0 1
13517: PUSH
13518: LD_VAR 0 1
13522: PUSH
13523: LD_EXP 30
13527: ADD
13528: PUSH
13529: LD_INT 0
13531: PUSH
13532: EMPTY
13533: LIST
13534: DIFF
13535: ST_TO_ADDR
// for Un in Stevens_people do
13536: LD_ADDR_VAR 0 2
13540: PUSH
13541: LD_VAR 0 1
13545: PUSH
13546: FOR_IN
13547: IFFALSE 13678
// begin SetSide ( Un , americans ) ;
13549: LD_VAR 0 2
13553: PPUSH
13554: LD_EXP 176
13558: PPUSH
13559: CALL_OW 235
// uc_side = americans ;
13563: LD_ADDR_OWVAR 20
13567: PUSH
13568: LD_EXP 176
13572: ST_TO_ADDR
// uc_nation = nation_american ;
13573: LD_ADDR_OWVAR 21
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// uc_direction = 1 ;
13581: LD_ADDR_OWVAR 24
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
13589: LD_ADDR_OWVAR 37
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// vc_engine = engine_combustion ;
13597: LD_ADDR_OWVAR 39
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// vc_control = control_manual ;
13605: LD_ADDR_OWVAR 38
13609: PUSH
13610: LD_INT 1
13612: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
13613: LD_ADDR_OWVAR 40
13617: PUSH
13618: LD_INT 2
13620: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
13621: LD_ADDR_VAR 0 3
13625: PUSH
13626: CALL_OW 45
13630: ST_TO_ADDR
// Stev_vehicles = Stev_vehicles ^ New_vehicle ;
13631: LD_ADDR_VAR 0 4
13635: PUSH
13636: LD_VAR 0 4
13640: PUSH
13641: LD_VAR 0 3
13645: ADD
13646: ST_TO_ADDR
// PlaceHumanInUnit ( Un , New_vehicle ) ;
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: CALL_OW 52
// PlaceUnitArea ( New_vehicle , Stev_place , false ) ;
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_INT 35
13668: PPUSH
13669: LD_INT 0
13671: PPUSH
13672: CALL_OW 49
// end ;
13676: GO 13546
13678: POP
13679: POP
// DialogueON ;
13680: CALL_OW 6
// CenterOnUnits ( Stev_vehicles ) ;
13684: LD_VAR 0 4
13688: PPUSH
13689: CALL_OW 85
// if Stevens then
13693: LD_EXP 17
13697: IFFALSE 13797
// begin SayRadio ( Stevens , D8-Huck-1 ) ;
13699: LD_EXP 17
13703: PPUSH
13704: LD_STRING D8-Huck-1
13706: PPUSH
13707: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
13711: LD_EXP 1
13715: PPUSH
13716: LD_STRING D8-JMM-1
13718: PPUSH
13719: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
13723: LD_EXP 17
13727: PPUSH
13728: LD_STRING D8-Huck-2
13730: PPUSH
13731: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
13735: LD_EXP 1
13739: PPUSH
13740: LD_STRING D8-JMM-2
13742: PPUSH
13743: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
13747: LD_EXP 17
13751: PPUSH
13752: LD_STRING D8-Huck-3
13754: PPUSH
13755: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
13759: LD_EXP 1
13763: PPUSH
13764: LD_STRING D8-JMM-3
13766: PPUSH
13767: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
13771: LD_EXP 17
13775: PPUSH
13776: LD_STRING D8-Huck-4
13778: PPUSH
13779: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
13783: LD_EXP 1
13787: PPUSH
13788: LD_STRING D8-JMM-4
13790: PPUSH
13791: CALL_OW 88
// end else
13795: GO 13893
// begin SayRadio ( Baker , D8-Huck-1 ) ;
13797: LD_EXP 23
13801: PPUSH
13802: LD_STRING D8-Huck-1
13804: PPUSH
13805: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
13809: LD_EXP 1
13813: PPUSH
13814: LD_STRING D8-JMM-1a
13816: PPUSH
13817: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
13821: LD_EXP 23
13825: PPUSH
13826: LD_STRING D8-Huck-2
13828: PPUSH
13829: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
13833: LD_EXP 1
13837: PPUSH
13838: LD_STRING D8-JMM-2
13840: PPUSH
13841: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
13845: LD_EXP 23
13849: PPUSH
13850: LD_STRING D8-Huck-3
13852: PPUSH
13853: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
13857: LD_EXP 1
13861: PPUSH
13862: LD_STRING D8-JMM-3
13864: PPUSH
13865: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
13869: LD_EXP 23
13873: PPUSH
13874: LD_STRING D8-Huck-4
13876: PPUSH
13877: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
13881: LD_EXP 1
13885: PPUSH
13886: LD_STRING D8-JMM-4
13888: PPUSH
13889: CALL_OW 88
// end ; DialogueOFF ;
13893: CALL_OW 7
// SetTech ( tech_SibFiss , americans , state_enabled ) ;
13897: LD_INT 25
13899: PPUSH
13900: LD_EXP 176
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 322
// ComMoveXY ( Stev_vehicles , 47 , 63 ) ;
13912: LD_VAR 0 4
13916: PPUSH
13917: LD_INT 47
13919: PPUSH
13920: LD_INT 63
13922: PPUSH
13923: CALL_OW 111
// end ;
13927: PPOPN 4
13929: END
// function CCreateVehicle ( nat , side , dir , chassis , engine , control , weapon ) ; var veh , i , person ; begin
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
13934: PPUSH
13935: PPUSH
// uc_side = side ;
13936: LD_ADDR_OWVAR 20
13940: PUSH
13941: LD_VAR 0 2
13945: ST_TO_ADDR
// uc_direction = dir ;
13946: LD_ADDR_OWVAR 24
13950: PUSH
13951: LD_VAR 0 3
13955: ST_TO_ADDR
// uc_nation = nat ;
13956: LD_ADDR_OWVAR 21
13960: PUSH
13961: LD_VAR 0 1
13965: ST_TO_ADDR
// vc_chassis = chassis ;
13966: LD_ADDR_OWVAR 37
13970: PUSH
13971: LD_VAR 0 4
13975: ST_TO_ADDR
// vc_control = control ;
13976: LD_ADDR_OWVAR 38
13980: PUSH
13981: LD_VAR 0 6
13985: ST_TO_ADDR
// vc_engine = engine ;
13986: LD_ADDR_OWVAR 39
13990: PUSH
13991: LD_VAR 0 5
13995: ST_TO_ADDR
// vc_weapon = weapon ;
13996: LD_ADDR_OWVAR 40
14000: PUSH
14001: LD_VAR 0 7
14005: ST_TO_ADDR
// veh = CreateVehicle ;
14006: LD_ADDR_VAR 0 9
14010: PUSH
14011: CALL_OW 45
14015: ST_TO_ADDR
// result = veh ;
14016: LD_ADDR_VAR 0 8
14020: PUSH
14021: LD_VAR 0 9
14025: ST_TO_ADDR
// end ;
14026: LD_VAR 0 8
14030: RET
// every 0 0$2 trigger ( tick > Woman_Coming_Time ) and ( tick > Time_of_Ingame_Run_Over ) marked 11 do var New_veh , i , Un , Woman_vehs ;
14031: LD_OWVAR 1
14035: PUSH
14036: LD_EXP 201
14040: GREATER
14041: PUSH
14042: LD_OWVAR 1
14046: PUSH
14047: LD_EXP 189
14051: GREATER
14052: AND
14053: IFFALSE 14537
14055: GO 14057
14057: DISABLE
14058: LD_INT 0
14060: PPUSH
14061: PPUSH
14062: PPUSH
14063: PPUSH
// begin Woman_vehs = [ ] ;
14064: LD_ADDR_VAR 0 4
14068: PUSH
14069: EMPTY
14070: ST_TO_ADDR
// for i = 1 to 3 do
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: DOUBLE
14077: LD_INT 1
14079: DEC
14080: ST_TO_ADDR
14081: LD_INT 3
14083: PUSH
14084: FOR_TO
14085: IFFALSE 14138
// begin New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_computer , us_laser ) ;
14087: LD_ADDR_VAR 0 1
14091: PUSH
14092: LD_INT 1
14094: PPUSH
14095: LD_EXP 176
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: LD_INT 3
14105: PPUSH
14106: LD_INT 3
14108: PPUSH
14109: LD_INT 3
14111: PPUSH
14112: LD_INT 9
14114: PPUSH
14115: CALL 13930 0 7
14119: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14120: LD_ADDR_VAR 0 4
14124: PUSH
14125: LD_VAR 0 4
14129: PUSH
14130: LD_VAR 0 1
14134: ADD
14135: ST_TO_ADDR
// end ;
14136: GO 14084
14138: POP
14139: POP
// New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_computer , us_rocket_launcher ) ;
14140: LD_ADDR_VAR 0 1
14144: PUSH
14145: LD_INT 1
14147: PPUSH
14148: LD_EXP 176
14152: PPUSH
14153: LD_INT 1
14155: PPUSH
14156: LD_INT 3
14158: PPUSH
14159: LD_INT 3
14161: PPUSH
14162: LD_INT 3
14164: PPUSH
14165: LD_INT 7
14167: PPUSH
14168: CALL 13930 0 7
14172: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14173: LD_ADDR_VAR 0 4
14177: PUSH
14178: LD_VAR 0 4
14182: PUSH
14183: LD_VAR 0 1
14187: ADD
14188: ST_TO_ADDR
// New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_manual , us_rocket_launcher ) ;
14189: LD_ADDR_VAR 0 1
14193: PUSH
14194: LD_INT 1
14196: PPUSH
14197: LD_EXP 176
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: LD_INT 3
14207: PPUSH
14208: LD_INT 3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_INT 7
14216: PPUSH
14217: CALL 13930 0 7
14221: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14222: LD_ADDR_VAR 0 4
14226: PUSH
14227: LD_VAR 0 4
14231: PUSH
14232: LD_VAR 0 1
14236: ADD
14237: ST_TO_ADDR
// SetSide ( JMM_Woman , americans ) ;
14238: LD_EXP 37
14242: PPUSH
14243: LD_EXP 176
14247: PPUSH
14248: CALL_OW 235
// PlaceHumanInUnit ( JMM_Woman , New_veh ) ;
14252: LD_EXP 37
14256: PPUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 52
// for Un in Woman_vehs do
14266: LD_ADDR_VAR 0 3
14270: PUSH
14271: LD_VAR 0 4
14275: PUSH
14276: FOR_IN
14277: IFFALSE 14296
// PlaceUnitArea ( Un , Stev_place , false ) ;
14279: LD_VAR 0 3
14283: PPUSH
14284: LD_INT 35
14286: PPUSH
14287: LD_INT 0
14289: PPUSH
14290: CALL_OW 49
14294: GO 14276
14296: POP
14297: POP
// Wait ( 0 0$1 ) ;
14298: LD_INT 35
14300: PPUSH
14301: CALL_OW 67
// DialogueON ;
14305: CALL_OW 6
// case woman_in_am14 of 1 :
14309: LD_EXP 36
14313: PUSH
14314: LD_INT 1
14316: DOUBLE
14317: EQUAL
14318: IFTRUE 14322
14320: GO 14346
14322: POP
// begin CenterOnUnits ( Joan ) ;
14323: LD_EXP 12
14327: PPUSH
14328: CALL_OW 85
// SayRadio ( Joan , D10BW-Joan-1 ) ;
14332: LD_EXP 12
14336: PPUSH
14337: LD_STRING D10BW-Joan-1
14339: PPUSH
14340: CALL_OW 94
// end ; 2 :
14344: GO 14411
14346: LD_INT 2
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14378
14354: POP
// begin CenterOnUnits ( Lisa ) ;
14355: LD_EXP 5
14359: PPUSH
14360: CALL_OW 85
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
14364: LD_EXP 5
14368: PPUSH
14369: LD_STRING D10BW-Lisa-1
14371: PPUSH
14372: CALL_OW 94
// end ; 3 :
14376: GO 14411
14378: LD_INT 3
14380: DOUBLE
14381: EQUAL
14382: IFTRUE 14386
14384: GO 14410
14386: POP
// begin CenterOnUnits ( Coonie ) ;
14387: LD_EXP 18
14391: PPUSH
14392: CALL_OW 85
// SayRadio ( Coonie , D10BW-Con-1 ) ;
14396: LD_EXP 18
14400: PPUSH
14401: LD_STRING D10BW-Con-1
14403: PPUSH
14404: CALL_OW 94
// end ; end ;
14408: GO 14411
14410: POP
// DialogueOFF ;
14411: CALL_OW 7
// Named_Americans = Named_Americans ^ JMM_woman ;
14415: LD_ADDR_EXP 62
14419: PUSH
14420: LD_EXP 62
14424: PUSH
14425: LD_EXP 37
14429: ADD
14430: ST_TO_ADDR
// All_americans = All_americans ^ JMM_woman ;
14431: LD_ADDR_EXP 61
14435: PUSH
14436: LD_EXP 61
14440: PUSH
14441: LD_EXP 37
14445: ADD
14446: ST_TO_ADDR
// ComMoveXY ( Woman_vehs , 97 , 167 ) ;
14447: LD_VAR 0 4
14451: PPUSH
14452: LD_INT 97
14454: PPUSH
14455: LD_INT 167
14457: PPUSH
14458: CALL_OW 111
// AddComMoveXY ( Woman_vehs , 102 , 147 ) ;
14462: LD_VAR 0 4
14466: PPUSH
14467: LD_INT 102
14469: PPUSH
14470: LD_INT 147
14472: PPUSH
14473: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 96 , 128 ) ;
14477: LD_VAR 0 4
14481: PPUSH
14482: LD_INT 96
14484: PPUSH
14485: LD_INT 128
14487: PPUSH
14488: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 80 , 108 ) ;
14492: LD_VAR 0 4
14496: PPUSH
14497: LD_INT 80
14499: PPUSH
14500: LD_INT 108
14502: PPUSH
14503: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 63 , 92 ) ;
14507: LD_VAR 0 4
14511: PPUSH
14512: LD_INT 63
14514: PPUSH
14515: LD_INT 92
14517: PPUSH
14518: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 47 , 63 ) ;
14522: LD_VAR 0 4
14526: PPUSH
14527: LD_INT 47
14529: PPUSH
14530: LD_INT 63
14532: PPUSH
14533: CALL_OW 171
// end ;
14537: PPOPN 4
14539: END
// every 0 0$2 trigger ( tick > Woman_Coming_Time ) and ( tick > Time_of_Ingame_Run_Over ) marked 12 do var New_veh , i , Un , Vsevolod_vehs ;
14540: LD_OWVAR 1
14544: PUSH
14545: LD_EXP 201
14549: GREATER
14550: PUSH
14551: LD_OWVAR 1
14555: PUSH
14556: LD_EXP 189
14560: GREATER
14561: AND
14562: IFFALSE 15316
14564: GO 14566
14566: DISABLE
14567: LD_INT 0
14569: PPUSH
14570: PPUSH
14571: PPUSH
14572: PPUSH
// begin Vsevolod_vehs = [ ] ;
14573: LD_ADDR_VAR 0 4
14577: PUSH
14578: EMPTY
14579: ST_TO_ADDR
// for i = 1 to 4 do
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: DOUBLE
14586: LD_INT 1
14588: DEC
14589: ST_TO_ADDR
14590: LD_INT 4
14592: PUSH
14593: FOR_TO
14594: IFFALSE 14647
// begin New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_computer , us_laser ) ;
14596: LD_ADDR_VAR 0 1
14600: PUSH
14601: LD_INT 1
14603: PPUSH
14604: LD_EXP 179
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_INT 3
14614: PPUSH
14615: LD_INT 3
14617: PPUSH
14618: LD_INT 3
14620: PPUSH
14621: LD_INT 9
14623: PPUSH
14624: CALL 13930 0 7
14628: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14629: LD_ADDR_VAR 0 4
14633: PUSH
14634: LD_VAR 0 4
14638: PUSH
14639: LD_VAR 0 1
14643: ADD
14644: ST_TO_ADDR
// end ;
14645: GO 14593
14647: POP
14648: POP
// for i = 1 to 3 do
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: DOUBLE
14655: LD_INT 1
14657: DEC
14658: ST_TO_ADDR
14659: LD_INT 3
14661: PUSH
14662: FOR_TO
14663: IFFALSE 14716
// begin New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_computer , us_rocket_launcher ) ;
14665: LD_ADDR_VAR 0 1
14669: PUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_EXP 179
14677: PPUSH
14678: LD_INT 1
14680: PPUSH
14681: LD_INT 3
14683: PPUSH
14684: LD_INT 3
14686: PPUSH
14687: LD_INT 3
14689: PPUSH
14690: LD_INT 7
14692: PPUSH
14693: CALL 13930 0 7
14697: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14698: LD_ADDR_VAR 0 4
14702: PUSH
14703: LD_VAR 0 4
14707: PUSH
14708: LD_VAR 0 1
14712: ADD
14713: ST_TO_ADDR
// end ;
14714: GO 14662
14716: POP
14717: POP
// New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_manual , us_rocket_launcher ) ;
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: LD_INT 1
14725: PPUSH
14726: LD_EXP 179
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: LD_INT 3
14736: PPUSH
14737: LD_INT 3
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: LD_INT 7
14745: PPUSH
14746: CALL 13930 0 7
14750: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14751: LD_ADDR_VAR 0 4
14755: PUSH
14756: LD_VAR 0 4
14760: PUSH
14761: LD_VAR 0 1
14765: ADD
14766: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , New_veh ) ;
14767: LD_EXP 25
14771: PPUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 52
// for Un in Vsevolod_vehs do
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_VAR 0 4
14790: PUSH
14791: FOR_IN
14792: IFFALSE 14811
// PlaceUnitArea ( Un , Stev_place , false ) ;
14794: LD_VAR 0 3
14798: PPUSH
14799: LD_INT 35
14801: PPUSH
14802: LD_INT 0
14804: PPUSH
14805: CALL_OW 49
14809: GO 14791
14811: POP
14812: POP
// ComMoveXY ( Vsevolod_vehs , 135 , 180 ) ;
14813: LD_VAR 0 4
14817: PPUSH
14818: LD_INT 135
14820: PPUSH
14821: LD_INT 180
14823: PPUSH
14824: CALL_OW 111
// AddComMoveXY ( Vsevolod_vehs , 159 , 179 ) ;
14828: LD_VAR 0 4
14832: PPUSH
14833: LD_INT 159
14835: PPUSH
14836: LD_INT 179
14838: PPUSH
14839: CALL_OW 171
// WaitPos ( 159 , 179 , 10 , Vsevolod_vehs , 1 ) ;
14843: LD_INT 159
14845: PPUSH
14846: LD_INT 179
14848: PPUSH
14849: LD_INT 10
14851: PPUSH
14852: LD_VAR 0 4
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL 17986 0 5
// AddComMoveXY ( Vsevolod_vehs , 174 , 170 ) ;
14864: LD_VAR 0 4
14868: PPUSH
14869: LD_INT 174
14871: PPUSH
14872: LD_INT 170
14874: PPUSH
14875: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 170 , 149 ) ;
14879: LD_VAR 0 4
14883: PPUSH
14884: LD_INT 170
14886: PPUSH
14887: LD_INT 149
14889: PPUSH
14890: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 156 , 134 ) ;
14894: LD_VAR 0 4
14898: PPUSH
14899: LD_INT 156
14901: PPUSH
14902: LD_INT 134
14904: PPUSH
14905: CALL_OW 171
// WaitPos ( 156 , 134 , 10 , Vsevolod_vehs , 1 ) ;
14909: LD_INT 156
14911: PPUSH
14912: LD_INT 134
14914: PPUSH
14915: LD_INT 10
14917: PPUSH
14918: LD_VAR 0 4
14922: PPUSH
14923: LD_INT 1
14925: PPUSH
14926: CALL 17986 0 5
// AddComMoveXY ( Vsevolod_vehs , 132 , 118 ) ;
14930: LD_VAR 0 4
14934: PPUSH
14935: LD_INT 132
14937: PPUSH
14938: LD_INT 118
14940: PPUSH
14941: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 113 , 97 ) ;
14945: LD_VAR 0 4
14949: PPUSH
14950: LD_INT 113
14952: PPUSH
14953: LD_INT 97
14955: PPUSH
14956: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 103 , 79 ) ;
14960: LD_VAR 0 4
14964: PPUSH
14965: LD_INT 103
14967: PPUSH
14968: LD_INT 79
14970: PPUSH
14971: CALL_OW 171
// WaitPos ( 103 , 79 , 10 , Vsevolod_vehs , 1 ) ;
14975: LD_INT 103
14977: PPUSH
14978: LD_INT 79
14980: PPUSH
14981: LD_INT 10
14983: PPUSH
14984: LD_VAR 0 4
14988: PPUSH
14989: LD_INT 1
14991: PPUSH
14992: CALL 17986 0 5
// AddComMoveXY ( Vsevolod_vehs , 73 , 62 ) ;
14996: LD_VAR 0 4
15000: PPUSH
15001: LD_INT 73
15003: PPUSH
15004: LD_INT 62
15006: PPUSH
15007: CALL_OW 171
// WaitPos ( 73 , 62 , 10 , Vsevolod_vehs , 1 ) ;
15011: LD_INT 73
15013: PPUSH
15014: LD_INT 62
15016: PPUSH
15017: LD_INT 10
15019: PPUSH
15020: LD_VAR 0 4
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: CALL 17986 0 5
// placeseeing ( 73 , 62 , americans , - 8 ) ;
15032: LD_INT 73
15034: PPUSH
15035: LD_INT 62
15037: PPUSH
15038: LD_EXP 176
15042: PPUSH
15043: LD_INT 8
15045: NEG
15046: PPUSH
15047: CALL_OW 330
// CenterOnXY ( 73 , 62 ) ;
15051: LD_INT 73
15053: PPUSH
15054: LD_INT 62
15056: PPUSH
15057: CALL_OW 84
// Wait ( 0 0$3 ) ;
15061: LD_INT 105
15063: PPUSH
15064: CALL_OW 67
// SA_OnVsevolodAppear ;
15068: CALL 56113 0 0
// DialogueON ;
15072: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
15076: LD_EXP 1
15080: PPUSH
15081: LD_STRING D10nB-JMM-1
15083: PPUSH
15084: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-1 ) ;
15088: LD_EXP 25
15092: PPUSH
15093: LD_STRING D10nB-Vse-1
15095: PPUSH
15096: CALL_OW 88
// if not ( IsOk ( Burlak ) ) then
15100: LD_EXP 19
15104: PPUSH
15105: CALL_OW 302
15109: NOT
15110: IFFALSE 15124
// Say ( Vsevolod ,  ) ;
15112: LD_EXP 25
15116: PPUSH
15117: LD_STRING 
15119: PPUSH
15120: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
15124: LD_EXP 1
15128: PPUSH
15129: LD_STRING D10nB-JMM-2
15131: PPUSH
15132: CALL_OW 88
// case Woman_in_am14 of 1 :
15136: LD_EXP 36
15140: PUSH
15141: LD_INT 1
15143: DOUBLE
15144: EQUAL
15145: IFTRUE 15149
15147: GO 15200
15149: POP
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
15150: LD_EXP 25
15154: PPUSH
15155: LD_STRING D10nB-Vse-2
15157: PPUSH
15158: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
15162: LD_EXP 1
15166: PPUSH
15167: LD_STRING D10nB-JMM-3
15169: PPUSH
15170: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
15174: LD_EXP 25
15178: PPUSH
15179: LD_STRING D10nB-Vse-3
15181: PPUSH
15182: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
15186: LD_EXP 1
15190: PPUSH
15191: LD_STRING D10nB-JMM-4
15193: PPUSH
15194: CALL_OW 88
// end ; 2 :
15198: GO 15283
15200: LD_INT 2
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15247
15208: POP
// begin Say ( JMM , D10nB-Vse-4 ) ;
15209: LD_EXP 1
15213: PPUSH
15214: LD_STRING D10nB-Vse-4
15216: PPUSH
15217: CALL_OW 88
// Say ( Vsevolod , D10nB-JMM-5 ) ;
15221: LD_EXP 25
15225: PPUSH
15226: LD_STRING D10nB-JMM-5
15228: PPUSH
15229: CALL_OW 88
// Say ( JMM , D10nB-Vse-5 ) ;
15233: LD_EXP 1
15237: PPUSH
15238: LD_STRING D10nB-Vse-5
15240: PPUSH
15241: CALL_OW 88
// end ; 3 :
15245: GO 15283
15247: LD_INT 3
15249: DOUBLE
15250: EQUAL
15251: IFTRUE 15255
15253: GO 15282
15255: POP
// begin Say ( Vsevolod , D10nB-Vse-5a ) ;
15256: LD_EXP 25
15260: PPUSH
15261: LD_STRING D10nB-Vse-5a
15263: PPUSH
15264: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
15268: LD_EXP 1
15272: PPUSH
15273: LD_STRING D10nB-JMM-6
15275: PPUSH
15276: CALL_OW 88
// end ; end ;
15280: GO 15283
15282: POP
// DialogueOFF ;
15283: CALL_OW 7
// removeseeing ( 73 , 62 , americans ) ;
15287: LD_INT 73
15289: PPUSH
15290: LD_INT 62
15292: PPUSH
15293: LD_EXP 176
15297: PPUSH
15298: CALL_OW 331
// AddMcUnits ( Russian1_reg_id , Vsevolod_vehs ) ;
15302: LD_EXP 237
15306: PPUSH
15307: LD_VAR 0 4
15311: PPUSH
15312: CALL_OW 390
// end ;
15316: PPOPN 4
15318: END
// every 0 0$1 trigger tick > Alliance_broadcast marked 10 do var list_of_q , selection ;
15319: LD_OWVAR 1
15323: PUSH
15324: LD_EXP 202
15328: GREATER
15329: IFFALSE 15735
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
// begin DialogueON ;
15338: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
15342: LD_EXP 20
15346: PPUSH
15347: LD_STRING D9-Roth-1
15349: PPUSH
15350: CALL_OW 94
// CenterOnUnits ( JMM ) ;
15354: LD_EXP 1
15358: PPUSH
15359: CALL_OW 85
// Say ( JMM , D9-JMM-1 ) ;
15363: LD_EXP 1
15367: PPUSH
15368: LD_STRING D9-JMM-1
15370: PPUSH
15371: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
15375: LD_EXP 20
15379: PPUSH
15380: LD_STRING D9-Roth-2
15382: PPUSH
15383: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
15387: LD_EXP 20
15391: PPUSH
15392: LD_STRING D9-Roth-2a
15394: PPUSH
15395: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
15399: LD_EXP 26
15403: PPUSH
15404: LD_STRING D9-Pla-2
15406: PPUSH
15407: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
15411: LD_EXP 20
15415: PPUSH
15416: LD_STRING D9-Roth-3
15418: PPUSH
15419: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
15423: LD_EXP 26
15427: PPUSH
15428: LD_STRING D9-Pla-3
15430: PPUSH
15431: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
15435: LD_EXP 20
15439: PPUSH
15440: LD_STRING D9-Roth-4
15442: PPUSH
15443: CALL_OW 94
// list_of_q = [ 1 , 2 , 3 ] ;
15447: LD_ADDR_VAR 0 1
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: LD_INT 2
15457: PUSH
15458: LD_INT 3
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: ST_TO_ADDR
// selection = SelectiveQuery ( Q9 , list_of_q ) ;
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_STRING Q9
15473: PPUSH
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 98
15483: ST_TO_ADDR
// case selection of 1 :
15484: LD_VAR 0 2
15488: PUSH
15489: LD_INT 1
15491: DOUBLE
15492: EQUAL
15493: IFTRUE 15497
15495: GO 15519
15497: POP
// begin Wait ( 0 0$3 ) ;
15498: LD_INT 105
15500: PPUSH
15501: CALL_OW 67
// SayRadio ( Roth , D9a-Roth-1 ) ;
15505: LD_EXP 20
15509: PPUSH
15510: LD_STRING D9a-Roth-1
15512: PPUSH
15513: CALL_OW 94
// end ; 2 :
15517: GO 15652
15519: LD_INT 2
15521: DOUBLE
15522: EQUAL
15523: IFTRUE 15527
15525: GO 15561
15527: POP
// begin Wait ( 0 0$0.5 ) ;
15528: LD_INT 18
15530: PPUSH
15531: CALL_OW 67
// Say ( JMM , D9b-JMM-1 ) ;
15535: LD_EXP 1
15539: PPUSH
15540: LD_STRING D9b-JMM-1
15542: PPUSH
15543: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
15547: LD_EXP 20
15551: PPUSH
15552: LD_STRING D9b-Roth-1
15554: PPUSH
15555: CALL_OW 94
// end ; 3 :
15559: GO 15652
15561: LD_INT 3
15563: DOUBLE
15564: EQUAL
15565: IFTRUE 15569
15567: GO 15651
15569: POP
// begin Wait ( 0 0$2 ) ;
15570: LD_INT 70
15572: PPUSH
15573: CALL_OW 67
// Say ( JMM , D9c-JMM-1 ) ;
15577: LD_EXP 1
15581: PPUSH
15582: LD_STRING D9c-JMM-1
15584: PPUSH
15585: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
15589: LD_EXP 20
15593: PPUSH
15594: LD_STRING D9c-Roth-1
15596: PPUSH
15597: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
15601: LD_EXP 1
15605: PPUSH
15606: LD_STRING D9c-JMM-2
15608: PPUSH
15609: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
15613: LD_EXP 20
15617: PPUSH
15618: LD_STRING D9c-Roth-2
15620: PPUSH
15621: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
15625: LD_EXP 1
15629: PPUSH
15630: LD_STRING D9c-JMM-3
15632: PPUSH
15633: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-3 ) ;
15637: LD_EXP 20
15641: PPUSH
15642: LD_STRING D9c-Roth-3
15644: PPUSH
15645: CALL_OW 94
// end ; end ;
15649: GO 15652
15651: POP
// SayRadio ( Roth , D9cont-Roth-1 ) ;
15652: LD_EXP 20
15656: PPUSH
15657: LD_STRING D9cont-Roth-1
15659: PPUSH
15660: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
15664: LD_EXP 1
15668: PPUSH
15669: LD_STRING D9cont-JMM-1
15671: PPUSH
15672: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
15676: LD_EXP 20
15680: PPUSH
15681: LD_STRING D9cont-Roth-2
15683: PPUSH
15684: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
15688: LD_EXP 1
15692: PPUSH
15693: LD_STRING D9cont-JMM-2
15695: PPUSH
15696: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
15700: LD_EXP 20
15704: PPUSH
15705: LD_STRING D9cont-Roth-3
15707: PPUSH
15708: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
15712: LD_EXP 1
15716: PPUSH
15717: LD_STRING D9cont-JMM-3
15719: PPUSH
15720: CALL_OW 88
// DialogueOFF ;
15724: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
15728: LD_STRING M3
15730: PPUSH
15731: CALL_OW 337
// end ;
15735: PPOPN 2
15737: END
// every 0 0$1 trigger Behemots_broadcast < tick marked 10 do var Sold1 , list_of_all_males , UnNamed_males , Named_males ;
15738: LD_EXP 203
15742: PUSH
15743: LD_OWVAR 1
15747: LESS
15748: IFFALSE 16196
15750: GO 15752
15752: DISABLE
15753: LD_INT 0
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
// begin Sold1 = 0 ;
15759: LD_ADDR_VAR 0 1
15763: PUSH
15764: LD_INT 0
15766: ST_TO_ADDR
// BuildBehemots ;
15767: CALL 47877 0 0
// list_of_all_males = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) ;
15771: LD_ADDR_VAR 0 2
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_EXP 176
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 21
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 26
15800: PUSH
15801: LD_INT 1
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 50
15810: PUSH
15811: EMPTY
15812: LIST
15813: PUSH
15814: LD_INT 3
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 12
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 16
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 25
15842: PUSH
15843: LD_INT 17
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 25
15852: PUSH
15853: LD_INT 15
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 25
15862: PUSH
15863: LD_INT 17
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: ST_TO_ADDR
// UnNamed_males = list_of_all_males diff [ JMM , Powell , Bobby , Cyrus , Frank , Brown , Gladstone , Cornell , Denis , Gary , Stevens ] ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 2
15903: PUSH
15904: LD_EXP 1
15908: PUSH
15909: LD_EXP 2
15913: PUSH
15914: LD_EXP 3
15918: PUSH
15919: LD_EXP 4
15923: PUSH
15924: LD_EXP 6
15928: PUSH
15929: LD_EXP 7
15933: PUSH
15934: LD_EXP 9
15938: PUSH
15939: LD_EXP 10
15943: PUSH
15944: LD_EXP 11
15948: PUSH
15949: LD_EXP 15
15953: PUSH
15954: LD_EXP 17
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: DIFF
15972: ST_TO_ADDR
// if UnNamed_males <> 0 then
15973: LD_VAR 0 3
15977: PUSH
15978: LD_INT 0
15980: NONEQUAL
15981: IFFALSE 16009
// begin Sold1 = UnNamed_males [ Rand ( 1 , UnNamed_males ) ] ;
15983: LD_ADDR_VAR 0 1
15987: PUSH
15988: LD_VAR 0 3
15992: PUSH
15993: LD_INT 1
15995: PPUSH
15996: LD_VAR 0 3
16000: PPUSH
16001: CALL_OW 12
16005: ARRAY
16006: ST_TO_ADDR
// end else
16007: GO 16083
// if list_of_all_males diff [ JMM , Powell ] <> 0 then
16009: LD_VAR 0 2
16013: PUSH
16014: LD_EXP 1
16018: PUSH
16019: LD_EXP 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 0
16030: NONEQUAL
16031: DIFF
16032: IFFALSE 16083
// begin list_of_all_males = list_of_all_males diff [ JMM , Powell ] ;
16034: LD_ADDR_VAR 0 2
16038: PUSH
16039: LD_VAR 0 2
16043: PUSH
16044: LD_EXP 1
16048: PUSH
16049: LD_EXP 2
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: DIFF
16058: ST_TO_ADDR
// Sold1 = list_of_all_males [ Rand ( 1 , list_of_all_males ) ] ;
16059: LD_ADDR_VAR 0 1
16063: PUSH
16064: LD_VAR 0 2
16068: PUSH
16069: LD_INT 1
16071: PPUSH
16072: LD_VAR 0 2
16076: PPUSH
16077: CALL_OW 12
16081: ARRAY
16082: ST_TO_ADDR
// end ; if Sold1 <> 0 then
16083: LD_VAR 0 1
16087: PUSH
16088: LD_INT 0
16090: NONEQUAL
16091: IFFALSE 16196
// begin CenterNowOnUnits ( JMM ) ;
16093: LD_EXP 1
16097: PPUSH
16098: CALL_OW 87
// DialogueON ;
16102: CALL_OW 6
// Wait ( 0 0$1 ) ;
16106: LD_INT 35
16108: PPUSH
16109: CALL_OW 67
// Say ( Sold1 , D11-Sol1-1 ) ;
16113: LD_VAR 0 1
16117: PPUSH
16118: LD_STRING D11-Sol1-1
16120: PPUSH
16121: CALL_OW 88
// SayRadio ( Platonov , D11-Pla-1 ) ;
16125: LD_EXP 26
16129: PPUSH
16130: LD_STRING D11-Pla-1
16132: PPUSH
16133: CALL_OW 94
// SayRadio ( Kovaljuk , D11-Kov-1 ) ;
16137: LD_EXP 27
16141: PPUSH
16142: LD_STRING D11-Kov-1
16144: PPUSH
16145: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
16149: LD_EXP 26
16153: PPUSH
16154: LD_STRING D11-Pla-2
16156: PPUSH
16157: CALL_OW 94
// Say ( Sold1 , D11-Sol1-2 ) ;
16161: LD_VAR 0 1
16165: PPUSH
16166: LD_STRING D11-Sol1-2
16168: PPUSH
16169: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
16173: LD_EXP 1
16177: PPUSH
16178: LD_STRING D11-JMM-2
16180: PPUSH
16181: CALL_OW 88
// DialogueOff ;
16185: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
16189: LD_STRING M4
16191: PPUSH
16192: CALL_OW 337
// end ; end ;
16196: PPOPN 4
16198: END
// every 0 0$1 trigger Alaskite_Bomb_Time < tick marked 10 do var list_of_q , selection , Americans_has_sib_rocket ;
16199: LD_EXP 212
16203: PUSH
16204: LD_OWVAR 1
16208: LESS
16209: IFFALSE 16544
16211: GO 16213
16213: DISABLE
16214: LD_INT 0
16216: PPUSH
16217: PPUSH
16218: PPUSH
// begin DialogueON ;
16219: CALL_OW 6
// Say ( Platonov , D15-Pla-1 ) ;
16223: LD_EXP 26
16227: PPUSH
16228: LD_STRING D15-Pla-1
16230: PPUSH
16231: CALL_OW 88
// list_of_q = [ 1 , 2 , 3 , 4 ] ;
16235: LD_ADDR_VAR 0 1
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: LD_INT 3
16248: PUSH
16249: LD_INT 4
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: ST_TO_ADDR
// selection = SelectiveQuery ( Q15a , list_of_q ) ;
16258: LD_ADDR_VAR 0 2
16262: PUSH
16263: LD_STRING Q15a
16265: PPUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 98
16275: ST_TO_ADDR
// case selection of 1 :
16276: LD_VAR 0 2
16280: PUSH
16281: LD_INT 1
16283: DOUBLE
16284: EQUAL
16285: IFTRUE 16289
16287: GO 16317
16289: POP
// begin Say ( JMM , D15a-JMM-1 ) ;
16290: LD_EXP 1
16294: PPUSH
16295: LD_STRING D15a-JMM-1
16297: PPUSH
16298: CALL_OW 88
// enable ( JMM_has_surrounded ) ;
16302: LD_EXP 155
16306: ENABLE_MARKED
// Friend_has_to_escape = true ;
16307: LD_ADDR_EXP 228
16311: PUSH
16312: LD_INT 1
16314: ST_TO_ADDR
// end ; 2 :
16315: GO 16540
16317: LD_INT 2
16319: DOUBLE
16320: EQUAL
16321: IFTRUE 16325
16323: GO 16366
16325: POP
// begin Say ( JMM , D15b-JMM-1 ) ;
16326: LD_EXP 1
16330: PPUSH
16331: LD_STRING D15b-JMM-1
16333: PPUSH
16334: CALL_OW 88
// Say ( Platonov , D15b-Pla-1 ) ;
16338: LD_EXP 26
16342: PPUSH
16343: LD_STRING D15b-Pla-1
16345: PPUSH
16346: CALL_OW 88
// Time_to_Think_Over = tick + 3 3$0 ;
16350: LD_ADDR_EXP 217
16354: PUSH
16355: LD_OWVAR 1
16359: PUSH
16360: LD_INT 6300
16362: PLUS
16363: ST_TO_ADDR
// end ; 3 :
16364: GO 16540
16366: LD_INT 3
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16374
16372: GO 16417
16374: POP
// begin Say ( JMM , D15c-JMM-1 ) ;
16375: LD_EXP 1
16379: PPUSH
16380: LD_STRING D15c-JMM-1
16382: PPUSH
16383: CALL_OW 88
// Say ( Platonov , D15c-Pla-1 ) ;
16387: LD_EXP 26
16391: PPUSH
16392: LD_STRING D15c-Pla-1
16394: PPUSH
16395: CALL_OW 88
// Russian_Siberite_Attack = true ;
16399: LD_ADDR_EXP 215
16403: PUSH
16404: LD_INT 1
16406: ST_TO_ADDR
// Friend_has_to_escape = true ;
16407: LD_ADDR_EXP 228
16411: PUSH
16412: LD_INT 1
16414: ST_TO_ADDR
// end ; 4 :
16415: GO 16540
16417: LD_INT 4
16419: DOUBLE
16420: EQUAL
16421: IFTRUE 16425
16423: GO 16539
16425: POP
// begin Say ( JMM , D15d-JMM-1 ) ;
16426: LD_EXP 1
16430: PPUSH
16431: LD_STRING D15d-JMM-1
16433: PPUSH
16434: CALL_OW 88
// Say ( Platonov , D15d-Pla-1 ) ;
16438: LD_EXP 26
16442: PPUSH
16443: LD_STRING D15d-Pla-1
16445: PPUSH
16446: CALL_OW 88
// if Friend_Accepted then
16450: LD_EXP 219
16454: IFFALSE 16472
// The_Last_Time = tick + 1 1$0 else
16456: LD_ADDR_EXP 218
16460: PUSH
16461: LD_OWVAR 1
16465: PUSH
16466: LD_INT 2100
16468: PLUS
16469: ST_TO_ADDR
16470: GO 16486
// The_Last_Time = tick + 5 5$0 ;
16472: LD_ADDR_EXP 218
16476: PUSH
16477: LD_OWVAR 1
16481: PUSH
16482: LD_INT 10500
16484: PLUS
16485: ST_TO_ADDR
// Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
16486: LD_ADDR_VAR 0 3
16490: PUSH
16491: LD_INT 22
16493: PUSH
16494: LD_EXP 176
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 34
16505: PUSH
16506: LD_INT 8
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PPUSH
16517: CALL_OW 69
16521: ST_TO_ADDR
// if not ( Americans_has_sib_rocket ) then
16522: LD_VAR 0 3
16526: NOT
16527: IFFALSE 16537
// Friend_has_to_escape = true ;
16529: LD_ADDR_EXP 228
16533: PUSH
16534: LD_INT 1
16536: ST_TO_ADDR
// end ; end ;
16537: GO 16540
16539: POP
// DialogueOFF ;
16540: CALL_OW 7
// end ;
16544: PPOPN 3
16546: END
// every 0 0$1 trigger ( Time_to_Think_Over <> 0 ) and ( Time_to_Think_Over < tick ) marked 10 do var selection , list_of_q , Americans_has_sib_rocket ;
16547: LD_EXP 217
16551: PUSH
16552: LD_INT 0
16554: NONEQUAL
16555: PUSH
16556: LD_EXP 217
16560: PUSH
16561: LD_OWVAR 1
16565: LESS
16566: AND
16567: IFFALSE 16837
16569: GO 16571
16571: DISABLE
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
16576: PPUSH
// begin DialogueON ;
16577: CALL_OW 6
// list_of_q = [ 1 , 3 , 4 ] ;
16581: LD_ADDR_VAR 0 2
16585: PUSH
16586: LD_INT 1
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 4
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: ST_TO_ADDR
// selection = SelectiveQuery ( Q15a , list_of_q ) ;
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_STRING Q15a
16607: PPUSH
16608: LD_VAR 0 2
16612: PPUSH
16613: CALL_OW 98
16617: ST_TO_ADDR
// case selection of 1 :
16618: LD_VAR 0 1
16622: PUSH
16623: LD_INT 1
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 16659
16631: POP
// begin Say ( JMM , D15a-JMM-1 ) ;
16632: LD_EXP 1
16636: PPUSH
16637: LD_STRING D15a-JMM-1
16639: PPUSH
16640: CALL_OW 88
// enable ( JMM_has_surrounded ) ;
16644: LD_EXP 155
16648: ENABLE_MARKED
// Friend_has_to_escape = true ;
16649: LD_ADDR_EXP 228
16653: PUSH
16654: LD_INT 1
16656: ST_TO_ADDR
// end ; 3 :
16657: GO 16833
16659: LD_INT 3
16661: DOUBLE
16662: EQUAL
16663: IFTRUE 16667
16665: GO 16710
16667: POP
// begin Say ( JMM , D15c-JMM-1 ) ;
16668: LD_EXP 1
16672: PPUSH
16673: LD_STRING D15c-JMM-1
16675: PPUSH
16676: CALL_OW 88
// Say ( Platonov , D15c-Pla-1 ) ;
16680: LD_EXP 26
16684: PPUSH
16685: LD_STRING D15c-Pla-1
16687: PPUSH
16688: CALL_OW 88
// Russian_Siberite_Attack = true ;
16692: LD_ADDR_EXP 215
16696: PUSH
16697: LD_INT 1
16699: ST_TO_ADDR
// Friend_has_to_escape = true ;
16700: LD_ADDR_EXP 228
16704: PUSH
16705: LD_INT 1
16707: ST_TO_ADDR
// end ; 4 :
16708: GO 16833
16710: LD_INT 4
16712: DOUBLE
16713: EQUAL
16714: IFTRUE 16718
16716: GO 16832
16718: POP
// begin Say ( JMM , D15d-JMM-1a ) ;
16719: LD_EXP 1
16723: PPUSH
16724: LD_STRING D15d-JMM-1a
16726: PPUSH
16727: CALL_OW 88
// Say ( Platonov , D15d-Pla-1 ) ;
16731: LD_EXP 26
16735: PPUSH
16736: LD_STRING D15d-Pla-1
16738: PPUSH
16739: CALL_OW 88
// if Friend_Accepted then
16743: LD_EXP 219
16747: IFFALSE 16765
// The_Last_Time = tick + 1 1$0 else
16749: LD_ADDR_EXP 218
16753: PUSH
16754: LD_OWVAR 1
16758: PUSH
16759: LD_INT 2100
16761: PLUS
16762: ST_TO_ADDR
16763: GO 16779
// The_Last_Time = tick + 5 5$0 ;
16765: LD_ADDR_EXP 218
16769: PUSH
16770: LD_OWVAR 1
16774: PUSH
16775: LD_INT 10500
16777: PLUS
16778: ST_TO_ADDR
// Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
16779: LD_ADDR_VAR 0 3
16783: PUSH
16784: LD_INT 22
16786: PUSH
16787: LD_EXP 176
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 34
16798: PUSH
16799: LD_INT 8
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PPUSH
16810: CALL_OW 69
16814: ST_TO_ADDR
// if not ( Americans_has_sib_rocket ) then
16815: LD_VAR 0 3
16819: NOT
16820: IFFALSE 16830
// Friend_has_to_escape = true ;
16822: LD_ADDR_EXP 228
16826: PUSH
16827: LD_INT 1
16829: ST_TO_ADDR
// end ; end ;
16830: GO 16833
16832: POP
// DialogueOFF ;
16833: CALL_OW 7
// end ;
16837: PPOPN 3
16839: END
// function FriendSelectedDialogue ; begin
16840: LD_INT 0
16842: PPUSH
// ComStop ( Friend ) ;
16843: LD_EXP 21
16847: PPUSH
16848: CALL_OW 141
// CenterNowOnUnits ( Friend ) ;
16852: LD_EXP 21
16856: PPUSH
16857: CALL_OW 87
// DialogueON ;
16861: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
16865: LD_EXP 1
16869: PPUSH
16870: LD_STRING D16-JMM-1
16872: PPUSH
16873: CALL_OW 88
// Say ( Friend , D16-Friend-1 ) ;
16877: LD_EXP 21
16881: PPUSH
16882: LD_STRING D16-Friend-1
16884: PPUSH
16885: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
16889: LD_EXP 1
16893: PPUSH
16894: LD_STRING D16-JMM-2
16896: PPUSH
16897: CALL_OW 88
// DialogueOFF ;
16901: CALL_OW 7
// end ;
16905: LD_VAR 0 1
16909: RET
// every 0 0$1 trigger ( Friend_has_to_escape ) and IsOk ( Friend ) do
16910: LD_EXP 228
16914: PUSH
16915: LD_EXP 21
16919: PPUSH
16920: CALL_OW 302
16924: AND
16925: IFFALSE 17072
16927: GO 16929
16929: DISABLE
// begin disable ;
16930: DISABLE
// if ( Alaskite_Bomb_Time + 0 0$15 < tick ) then
16931: LD_EXP 212
16935: PUSH
16936: LD_INT 525
16938: PLUS
16939: PUSH
16940: LD_OWVAR 1
16944: LESS
16945: IFFALSE 17071
// begin if IsSelected ( Friend ) then
16947: LD_EXP 21
16951: PPUSH
16952: CALL_OW 306
16956: IFFALSE 16967
// DeselectUnits ( Friend ) ;
16958: LD_EXP 21
16962: PPUSH
16963: CALL_OW 491
// enable ( Friend_Escapes ) ;
16967: LD_EXP 156
16971: ENABLE_MARKED
// ComMoveXY ( Friend , 20 , 2 ) ;
16972: LD_EXP 21
16976: PPUSH
16977: LD_INT 20
16979: PPUSH
16980: LD_INT 2
16982: PPUSH
16983: CALL_OW 111
// AddComHold ( Friend ) ;
16987: LD_EXP 21
16991: PPUSH
16992: CALL_OW 200
// Wait ( 0 0$0.5 ) ;
16996: LD_INT 18
16998: PPUSH
16999: CALL_OW 67
// while ( HasTask ( Friend ) and not ( IsSelected ( Friend ) ) ) do
17003: LD_EXP 21
17007: PPUSH
17008: CALL_OW 314
17012: PUSH
17013: LD_EXP 21
17017: PPUSH
17018: CALL_OW 306
17022: NOT
17023: AND
17024: IFFALSE 17035
// Wait ( 0 0$1 ) ;
17026: LD_INT 35
17028: PPUSH
17029: CALL_OW 67
17033: GO 17003
// if IsSelected ( Friend ) then
17035: LD_EXP 21
17039: PPUSH
17040: CALL_OW 306
17044: IFFALSE 17052
// FriendSelectedDialogue else
17046: CALL 16840 0 0
17050: GO 17069
// begin DestroyUnit ( Friend ) ;
17052: LD_EXP 21
17056: PPUSH
17057: CALL_OW 65
// Friend_escaped = true ;
17061: LD_ADDR_EXP 220
17065: PUSH
17066: LD_INT 1
17068: ST_TO_ADDR
// end ; end else
17069: GO 17072
// enable ;
17071: ENABLE
// end ;
17072: END
// every 0 0$1 trigger ( The_Last_Time <> 0 ) and ( The_Last_Time < tick ) marked 10 do var Americans_has_sib_rocket , Sold1 , list_of_all_males , UnNamed_males , Named_males ;
17073: LD_EXP 218
17077: PUSH
17078: LD_INT 0
17080: NONEQUAL
17081: PUSH
17082: LD_EXP 218
17086: PUSH
17087: LD_OWVAR 1
17091: LESS
17092: AND
17093: IFFALSE 17651
17095: GO 17097
17097: DISABLE
17098: LD_INT 0
17100: PPUSH
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
// begin Named_males = [ Bobby , Cyrus , Frank , Brown , Gladstone , Cornell , Denis , Gary , Stevens ] ;
17105: LD_ADDR_VAR 0 5
17109: PUSH
17110: LD_EXP 3
17114: PUSH
17115: LD_EXP 4
17119: PUSH
17120: LD_EXP 6
17124: PUSH
17125: LD_EXP 7
17129: PUSH
17130: LD_EXP 9
17134: PUSH
17135: LD_EXP 10
17139: PUSH
17140: LD_EXP 11
17144: PUSH
17145: LD_EXP 15
17149: PUSH
17150: LD_EXP 17
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: ST_TO_ADDR
// list_of_all_males = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) ;
17166: LD_ADDR_VAR 0 3
17170: PUSH
17171: LD_INT 22
17173: PUSH
17174: LD_EXP 176
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 21
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 26
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 50
17205: PUSH
17206: EMPTY
17207: LIST
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: LD_INT 25
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 25
17227: PUSH
17228: LD_INT 16
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 25
17237: PUSH
17238: LD_INT 17
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 25
17247: PUSH
17248: LD_INT 15
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 25
17257: PUSH
17258: LD_INT 17
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL_OW 69
17288: ST_TO_ADDR
// UnNamed_males = list_of_all_males diff ( [ JMM , Powell ] ^ Named_males ) ;
17289: LD_ADDR_VAR 0 4
17293: PUSH
17294: LD_VAR 0 3
17298: PUSH
17299: LD_EXP 1
17303: PUSH
17304: LD_EXP 2
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_VAR 0 5
17317: ADD
17318: DIFF
17319: ST_TO_ADDR
// if UnNamed_males <> 0 then
17320: LD_VAR 0 4
17324: PUSH
17325: LD_INT 0
17327: NONEQUAL
17328: IFFALSE 17356
// begin Sold1 = list_of_all_males [ Rand ( 1 , list_of_all_males ) ] ;
17330: LD_ADDR_VAR 0 2
17334: PUSH
17335: LD_VAR 0 3
17339: PUSH
17340: LD_INT 1
17342: PPUSH
17343: LD_VAR 0 3
17347: PPUSH
17348: CALL_OW 12
17352: ARRAY
17353: ST_TO_ADDR
// end else
17354: GO 17425
// begin Named_males = UnitFilter ( Named_males , [ [ f_ok ] , [ f_sex , sex_male ] ] ) ;
17356: LD_ADDR_VAR 0 5
17360: PUSH
17361: LD_VAR 0 5
17365: PPUSH
17366: LD_INT 50
17368: PUSH
17369: EMPTY
17370: LIST
17371: PUSH
17372: LD_INT 26
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PPUSH
17386: CALL_OW 72
17390: ST_TO_ADDR
// if named_males <> 0 then
17391: LD_VAR 0 5
17395: PUSH
17396: LD_INT 0
17398: NONEQUAL
17399: IFFALSE 17425
// Sold1 = Named_males [ Rand ( 1 , Named_males ) ] ;
17401: LD_ADDR_VAR 0 2
17405: PUSH
17406: LD_VAR 0 5
17410: PUSH
17411: LD_INT 1
17413: PPUSH
17414: LD_VAR 0 5
17418: PPUSH
17419: CALL_OW 12
17423: ARRAY
17424: ST_TO_ADDR
// end ; Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
17425: LD_ADDR_VAR 0 1
17429: PUSH
17430: LD_INT 22
17432: PUSH
17433: LD_EXP 176
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 34
17444: PUSH
17445: LD_INT 8
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 69
17460: ST_TO_ADDR
// DialogueON ;
17461: CALL_OW 6
// if ( Americans_has_sib_rocket = 0 ) and Friend_Accepted then
17465: LD_VAR 0 1
17469: PUSH
17470: LD_INT 0
17472: EQUAL
17473: PUSH
17474: LD_EXP 219
17478: AND
17479: IFFALSE 17584
// begin Say ( Platonov , D16a-Pla-1 ) ;
17481: LD_EXP 26
17485: PPUSH
17486: LD_STRING D16a-Pla-1
17488: PPUSH
17489: CALL_OW 88
// if IsOk ( Stevens ) then
17493: LD_EXP 17
17497: PPUSH
17498: CALL_OW 302
17502: IFFALSE 17518
// Say ( Stevens , D16a-Huck-1 ) else
17504: LD_EXP 17
17508: PPUSH
17509: LD_STRING D16a-Huck-1
17511: PPUSH
17512: CALL_OW 88
17516: GO 17530
// Say ( Sold1 , D16a-Sol1-1 ) ;
17518: LD_VAR 0 2
17522: PPUSH
17523: LD_STRING D16a-Sol1-1
17525: PPUSH
17526: CALL_OW 88
// if Friend_Escaped then
17530: LD_EXP 220
17534: IFFALSE 17550
// Say ( JMM , D16a-JMM-1 ) else
17536: LD_EXP 1
17540: PPUSH
17541: LD_STRING D16a-JMM-1
17543: PPUSH
17544: CALL_OW 88
17548: GO 17574
// begin Say ( JMM , D16a-JMM-1a ) ;
17550: LD_EXP 1
17554: PPUSH
17555: LD_STRING D16a-JMM-1a
17557: PPUSH
17558: CALL_OW 88
// Say ( Friend , D16a-Friend-1 ) ;
17562: LD_EXP 21
17566: PPUSH
17567: LD_STRING D16a-Friend-1
17569: PPUSH
17570: CALL_OW 88
// end ; Russian_Siberite_Attack = true ;
17574: LD_ADDR_EXP 215
17578: PUSH
17579: LD_INT 1
17581: ST_TO_ADDR
// end else
17582: GO 17647
// if ( Americans_has_sib_rocket = 0 ) and not ( Friend_Accepted ) then
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 0
17591: EQUAL
17592: PUSH
17593: LD_EXP 219
17597: NOT
17598: AND
17599: IFFALSE 17635
// begin Say ( Platonov , D16b-Pla-1 ) ;
17601: LD_EXP 26
17605: PPUSH
17606: LD_STRING D16b-Pla-1
17608: PPUSH
17609: CALL_OW 88
// Say ( JMM , D16b-JMM-1 ) ;
17613: LD_EXP 1
17617: PPUSH
17618: LD_STRING D16b-JMM-1
17620: PPUSH
17621: CALL_OW 88
// Russian_Siberite_Attack = true ;
17625: LD_ADDR_EXP 215
17629: PUSH
17630: LD_INT 1
17632: ST_TO_ADDR
// end else
17633: GO 17647
// begin Say ( Platonov , D16c-Pla-1 ) ;
17635: LD_EXP 26
17639: PPUSH
17640: LD_STRING D16c-Pla-1
17642: PPUSH
17643: CALL_OW 88
// end ; DialogueOFF ;
17647: CALL_OW 7
// end ;
17651: PPOPN 5
17653: END
// every 0 0$2 trigger CenterJMM do var X , Y , NewX , NewY ;
17654: LD_EXP 68
17658: IFFALSE 17819
17660: GO 17662
17662: DISABLE
17663: LD_INT 0
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
// begin if IsInUnit ( JMM ) = JMM_veh then
17669: LD_EXP 1
17673: PPUSH
17674: CALL_OW 310
17678: PUSH
17679: LD_EXP 57
17683: EQUAL
17684: IFFALSE 17774
// begin X = GetX ( JMM_veh ) ;
17686: LD_ADDR_VAR 0 1
17690: PUSH
17691: LD_EXP 57
17695: PPUSH
17696: CALL_OW 250
17700: ST_TO_ADDR
// Y = GetY ( Jmm_veh ) ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_EXP 57
17710: PPUSH
17711: CALL_OW 251
17715: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( JMM_veh ) , 5 ) ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: LD_EXP 57
17730: PPUSH
17731: CALL_OW 254
17735: PPUSH
17736: LD_INT 5
17738: PPUSH
17739: CALL_OW 272
17743: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( JMM_veh ) , 5 ) ;
17744: LD_ADDR_VAR 0 4
17748: PUSH
17749: LD_VAR 0 2
17753: PPUSH
17754: LD_EXP 57
17758: PPUSH
17759: CALL_OW 254
17763: PPUSH
17764: LD_INT 5
17766: PPUSH
17767: CALL_OW 273
17771: ST_TO_ADDR
// end else
17772: GO 17804
// begin NewX = GetX ( JMM ) ;
17774: LD_ADDR_VAR 0 3
17778: PUSH
17779: LD_EXP 1
17783: PPUSH
17784: CALL_OW 250
17788: ST_TO_ADDR
// NewY = GetY ( JMM ) ;
17789: LD_ADDR_VAR 0 4
17793: PUSH
17794: LD_EXP 1
17798: PPUSH
17799: CALL_OW 251
17803: ST_TO_ADDR
// end ; CenterOnXY ( NewX , NewY ) ;
17804: LD_VAR 0 3
17808: PPUSH
17809: LD_VAR 0 4
17813: PPUSH
17814: CALL_OW 84
// enable ;
17818: ENABLE
// end ; end_of_file
17819: PPOPN 4
17821: END
// var taken ; export function ComMoveXYR ( Un , x , y , r , b ) ; var Hex ; begin
17822: LD_INT 0
17824: PPUSH
17825: PPUSH
// Hex = RandHexXYR ( x , y , r , b ) ;
17826: LD_ADDR_VAR 0 7
17830: PUSH
17831: LD_VAR 0 2
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_VAR 0 4
17845: PPUSH
17846: LD_VAR 0 5
17850: PPUSH
17851: CALL_OW 17
17855: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) end ;
17856: LD_VAR 0 1
17860: PPUSH
17861: LD_VAR 0 7
17865: PUSH
17866: LD_INT 1
17868: ARRAY
17869: PPUSH
17870: LD_VAR 0 7
17874: PUSH
17875: LD_INT 2
17877: ARRAY
17878: PPUSH
17879: CALL_OW 111
17883: LD_VAR 0 6
17887: RET
// export function WaitTask ( list_of_units , reaction ) ; var i , busy ; begin
17888: LD_INT 0
17890: PPUSH
17891: PPUSH
17892: PPUSH
// wait ( 2 ) ;
17893: LD_INT 2
17895: PPUSH
17896: CALL_OW 67
// repeat busy = false ;
17900: LD_ADDR_VAR 0 5
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// for i in list_of_units do
17908: LD_ADDR_VAR 0 4
17912: PUSH
17913: LD_VAR 0 1
17917: PUSH
17918: FOR_IN
17919: IFFALSE 17953
// if IsOk ( i ) then
17921: LD_VAR 0 4
17925: PPUSH
17926: CALL_OW 302
17930: IFFALSE 17951
// if HasTask ( i ) then
17932: LD_VAR 0 4
17936: PPUSH
17937: CALL_OW 314
17941: IFFALSE 17951
// begin busy = true ;
17943: LD_ADDR_VAR 0 5
17947: PUSH
17948: LD_INT 1
17950: ST_TO_ADDR
// end ;
17951: GO 17918
17953: POP
17954: POP
// if busy then
17955: LD_VAR 0 5
17959: IFFALSE 17974
// wait ( 0 0$1 * reaction ) ;
17961: LD_INT 35
17963: PUSH
17964: LD_VAR 0 2
17968: MUL
17969: PPUSH
17970: CALL_OW 67
// until not ( busy ) ;
17974: LD_VAR 0 5
17978: NOT
17979: IFFALSE 17900
// end ;
17981: LD_VAR 0 3
17985: RET
// export function WaitPos ( x_pos , y_pos , dist , list_of_units , reaction ) ; var i , are_at_position ; begin
17986: LD_INT 0
17988: PPUSH
17989: PPUSH
17990: PPUSH
// wait ( 2 ) ;
17991: LD_INT 2
17993: PPUSH
17994: CALL_OW 67
// repeat are_at_position = true ;
17998: LD_ADDR_VAR 0 8
18002: PUSH
18003: LD_INT 1
18005: ST_TO_ADDR
// for i in list_of_units do
18006: LD_ADDR_VAR 0 7
18010: PUSH
18011: LD_VAR 0 4
18015: PUSH
18016: FOR_IN
18017: IFFALSE 18067
// if IsOk ( i ) then
18019: LD_VAR 0 7
18023: PPUSH
18024: CALL_OW 302
18028: IFFALSE 18065
// if GetDistUnitXY ( i , x_pos , y_pos ) > dist then
18030: LD_VAR 0 7
18034: PPUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: LD_VAR 0 2
18044: PPUSH
18045: CALL_OW 297
18049: PUSH
18050: LD_VAR 0 3
18054: GREATER
18055: IFFALSE 18065
// are_at_position = false ;
18057: LD_ADDR_VAR 0 8
18061: PUSH
18062: LD_INT 0
18064: ST_TO_ADDR
18065: GO 18016
18067: POP
18068: POP
// if not ( are_at_position ) then
18069: LD_VAR 0 8
18073: NOT
18074: IFFALSE 18089
// wait ( 0 0$1 * reaction ) ;
18076: LD_INT 35
18078: PUSH
18079: LD_VAR 0 5
18083: MUL
18084: PPUSH
18085: CALL_OW 67
// until are_at_position ;
18089: LD_VAR 0 8
18093: IFFALSE 17998
// end ;
18095: LD_VAR 0 6
18099: RET
// export function FindMaxSumSkill ( Uns , sex ) ; var Skill_Sum , Selected_unit , New_Skill_Sum , i ; begin
18100: LD_INT 0
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
18106: PPUSH
// Skill_Sum = - 1 ;
18107: LD_ADDR_VAR 0 4
18111: PUSH
18112: LD_INT 1
18114: NEG
18115: ST_TO_ADDR
// Selected_unit = 0 ;
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// for i = 1 to Uns do
18124: LD_ADDR_VAR 0 7
18128: PUSH
18129: DOUBLE
18130: LD_INT 1
18132: DEC
18133: ST_TO_ADDR
18134: LD_VAR 0 1
18138: PUSH
18139: FOR_TO
18140: IFFALSE 18299
// begin New_Skill_Sum = GetSkill ( Uns [ i ] , skill_combat ) + GetSkill ( Uns [ i ] , skill_engineering ) + GetSkill ( Uns [ i ] , skill_mechanical ) + GetSkill ( Uns [ i ] , skill_scientistic ) ;
18142: LD_ADDR_VAR 0 6
18146: PUSH
18147: LD_VAR 0 1
18151: PUSH
18152: LD_VAR 0 7
18156: ARRAY
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: CALL_OW 259
18165: PUSH
18166: LD_VAR 0 1
18170: PUSH
18171: LD_VAR 0 7
18175: ARRAY
18176: PPUSH
18177: LD_INT 2
18179: PPUSH
18180: CALL_OW 259
18184: PLUS
18185: PUSH
18186: LD_VAR 0 1
18190: PUSH
18191: LD_VAR 0 7
18195: ARRAY
18196: PPUSH
18197: LD_INT 3
18199: PPUSH
18200: CALL_OW 259
18204: PLUS
18205: PUSH
18206: LD_VAR 0 1
18210: PUSH
18211: LD_VAR 0 7
18215: ARRAY
18216: PPUSH
18217: LD_INT 4
18219: PPUSH
18220: CALL_OW 259
18224: PLUS
18225: ST_TO_ADDR
// if New_Skill_Sum > Skill_Sum and ( ( sex = 0 ) or ( sex = GetSex ( Uns [ i ] ) ) ) then
18226: LD_VAR 0 6
18230: PUSH
18231: LD_VAR 0 4
18235: GREATER
18236: PUSH
18237: LD_VAR 0 2
18241: PUSH
18242: LD_INT 0
18244: EQUAL
18245: PUSH
18246: LD_VAR 0 2
18250: PUSH
18251: LD_VAR 0 1
18255: PUSH
18256: LD_VAR 0 7
18260: ARRAY
18261: PPUSH
18262: CALL_OW 258
18266: EQUAL
18267: OR
18268: AND
18269: IFFALSE 18297
// begin Skill_Sum = New_Skill_Sum ;
18271: LD_ADDR_VAR 0 4
18275: PUSH
18276: LD_VAR 0 6
18280: ST_TO_ADDR
// Selected_unit = Uns [ i ] ;
18281: LD_ADDR_VAR 0 5
18285: PUSH
18286: LD_VAR 0 1
18290: PUSH
18291: LD_VAR 0 7
18295: ARRAY
18296: ST_TO_ADDR
// end ; end ;
18297: GO 18139
18299: POP
18300: POP
// result = Selected_unit ;
18301: LD_ADDR_VAR 0 3
18305: PUSH
18306: LD_VAR 0 5
18310: ST_TO_ADDR
// end ;
18311: LD_VAR 0 3
18315: RET
// export function FindMinSumSkill ( Uns , sex ) ; var Skill_Sum , Selected_unit , New_Skill_Sum , i ; begin
18316: LD_INT 0
18318: PPUSH
18319: PPUSH
18320: PPUSH
18321: PPUSH
18322: PPUSH
// Skill_Sum = 100 ;
18323: LD_ADDR_VAR 0 4
18327: PUSH
18328: LD_INT 100
18330: ST_TO_ADDR
// Selected_unit = 0 ;
18331: LD_ADDR_VAR 0 5
18335: PUSH
18336: LD_INT 0
18338: ST_TO_ADDR
// for i = 1 to Uns do
18339: LD_ADDR_VAR 0 7
18343: PUSH
18344: DOUBLE
18345: LD_INT 1
18347: DEC
18348: ST_TO_ADDR
18349: LD_VAR 0 1
18353: PUSH
18354: FOR_TO
18355: IFFALSE 18514
// begin New_Skill_Sum = GetSkill ( Uns [ i ] , skill_combat ) + GetSkill ( Uns [ i ] , skill_engineering ) + GetSkill ( Uns [ i ] , skill_mechanical ) + GetSkill ( Uns [ i ] , skill_scientistic ) ;
18357: LD_ADDR_VAR 0 6
18361: PUSH
18362: LD_VAR 0 1
18366: PUSH
18367: LD_VAR 0 7
18371: ARRAY
18372: PPUSH
18373: LD_INT 1
18375: PPUSH
18376: CALL_OW 259
18380: PUSH
18381: LD_VAR 0 1
18385: PUSH
18386: LD_VAR 0 7
18390: ARRAY
18391: PPUSH
18392: LD_INT 2
18394: PPUSH
18395: CALL_OW 259
18399: PLUS
18400: PUSH
18401: LD_VAR 0 1
18405: PUSH
18406: LD_VAR 0 7
18410: ARRAY
18411: PPUSH
18412: LD_INT 3
18414: PPUSH
18415: CALL_OW 259
18419: PLUS
18420: PUSH
18421: LD_VAR 0 1
18425: PUSH
18426: LD_VAR 0 7
18430: ARRAY
18431: PPUSH
18432: LD_INT 4
18434: PPUSH
18435: CALL_OW 259
18439: PLUS
18440: ST_TO_ADDR
// if New_Skill_Sum < Skill_Sum and ( ( sex = 0 ) or ( sex = GetSex ( Uns [ i ] ) ) ) then
18441: LD_VAR 0 6
18445: PUSH
18446: LD_VAR 0 4
18450: LESS
18451: PUSH
18452: LD_VAR 0 2
18456: PUSH
18457: LD_INT 0
18459: EQUAL
18460: PUSH
18461: LD_VAR 0 2
18465: PUSH
18466: LD_VAR 0 1
18470: PUSH
18471: LD_VAR 0 7
18475: ARRAY
18476: PPUSH
18477: CALL_OW 258
18481: EQUAL
18482: OR
18483: AND
18484: IFFALSE 18512
// begin Skill_Sum = New_Skill_Sum ;
18486: LD_ADDR_VAR 0 4
18490: PUSH
18491: LD_VAR 0 6
18495: ST_TO_ADDR
// Selected_unit = Uns [ i ] ;
18496: LD_ADDR_VAR 0 5
18500: PUSH
18501: LD_VAR 0 1
18505: PUSH
18506: LD_VAR 0 7
18510: ARRAY
18511: ST_TO_ADDR
// end ; end ;
18512: GO 18354
18514: POP
18515: POP
// result = Selected_unit ;
18516: LD_ADDR_VAR 0 3
18520: PUSH
18521: LD_VAR 0 5
18525: ST_TO_ADDR
// end ;
18526: LD_VAR 0 3
18530: RET
// export function RSiberiteAttack ( Rocket ) ; var American_units , Selected_unit , Factories , Teleport1 , Teleport2 , Un ; begin
18531: LD_INT 0
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
// Selected_unit = 0 ;
18540: LD_ADDR_VAR 0 4
18544: PUSH
18545: LD_INT 0
18547: ST_TO_ADDR
// American_units = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) ;
18548: LD_ADDR_VAR 0 3
18552: PUSH
18553: LD_INT 22
18555: PUSH
18556: LD_EXP 176
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 21
18567: PUSH
18568: LD_INT 3
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PPUSH
18579: CALL_OW 69
18583: ST_TO_ADDR
// Factories = UnitFilter ( American_units , [ f_btype , b_factory ] ) ;
18584: LD_ADDR_VAR 0 5
18588: PUSH
18589: LD_VAR 0 3
18593: PPUSH
18594: LD_INT 30
18596: PUSH
18597: LD_INT 3
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PPUSH
18604: CALL_OW 72
18608: ST_TO_ADDR
// if Factories then
18609: LD_VAR 0 5
18613: IFFALSE 18680
// begin Selected_unit = Factories [ 1 ] ;
18615: LD_ADDR_VAR 0 4
18619: PUSH
18620: LD_VAR 0 5
18624: PUSH
18625: LD_INT 1
18627: ARRAY
18628: ST_TO_ADDR
// for Un in Factories do
18629: LD_ADDR_VAR 0 8
18633: PUSH
18634: LD_VAR 0 5
18638: PUSH
18639: FOR_IN
18640: IFFALSE 18676
// if UnitsInside ( Un ) > UnitsInside ( Selected_unit ) then
18642: LD_VAR 0 8
18646: PPUSH
18647: CALL_OW 313
18651: PUSH
18652: LD_VAR 0 4
18656: PPUSH
18657: CALL_OW 313
18661: GREATER
18662: IFFALSE 18674
// Selected_unit = Un ;
18664: LD_ADDR_VAR 0 4
18668: PUSH
18669: LD_VAR 0 8
18673: ST_TO_ADDR
18674: GO 18639
18676: POP
18677: POP
// end else
18678: GO 18710
// if American_units then
18680: LD_VAR 0 3
18684: IFFALSE 18710
// begin Selected_unit = American_units [ Rand ( 1 , American_units ) ] ;
18686: LD_ADDR_VAR 0 4
18690: PUSH
18691: LD_VAR 0 3
18695: PUSH
18696: LD_INT 1
18698: PPUSH
18699: LD_VAR 0 3
18703: PPUSH
18704: CALL_OW 12
18708: ARRAY
18709: ST_TO_ADDR
// end ; if Rand ( 1 , 2 ) = 1 then
18710: LD_INT 1
18712: PPUSH
18713: LD_INT 2
18715: PPUSH
18716: CALL_OW 12
18720: PUSH
18721: LD_INT 1
18723: EQUAL
18724: IFFALSE 18880
// begin Teleport1 = GetUnitNumber ( 165 , 60 ) ;
18726: LD_ADDR_VAR 0 6
18730: PUSH
18731: LD_INT 165
18733: PPUSH
18734: LD_INT 60
18736: PPUSH
18737: CALL_OW 438
18741: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
18742: LD_ADDR_VAR 0 7
18746: PUSH
18747: LD_INT 182
18749: PPUSH
18750: LD_INT 87
18752: PPUSH
18753: CALL_OW 438
18757: ST_TO_ADDR
// if Rand ( 1 , 2 ) = 1 then
18758: LD_INT 1
18760: PPUSH
18761: LD_INT 2
18763: PPUSH
18764: CALL_OW 12
18768: PUSH
18769: LD_INT 1
18771: EQUAL
18772: IFFALSE 18828
// begin if IsOk ( Teleport1 ) then
18774: LD_VAR 0 6
18778: PPUSH
18779: CALL_OW 302
18783: IFFALSE 18801
// ComEnterUnit ( Rocket , Teleport1 ) else
18785: LD_VAR 0 1
18789: PPUSH
18790: LD_VAR 0 6
18794: PPUSH
18795: CALL_OW 120
18799: GO 18826
// if IsOk ( Teleport2 ) then
18801: LD_VAR 0 7
18805: PPUSH
18806: CALL_OW 302
18810: IFFALSE 18826
// ComEnterUnit ( Rocket , Teleport2 ) end else
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_VAR 0 7
18821: PPUSH
18822: CALL_OW 120
18826: GO 18880
// begin if IsOk ( Teleport2 ) then
18828: LD_VAR 0 7
18832: PPUSH
18833: CALL_OW 302
18837: IFFALSE 18855
// ComEnterUnit ( Rocket , Teleport2 ) else
18839: LD_VAR 0 1
18843: PPUSH
18844: LD_VAR 0 7
18848: PPUSH
18849: CALL_OW 120
18853: GO 18880
// if IsOk ( Teleport1 ) then
18855: LD_VAR 0 6
18859: PPUSH
18860: CALL_OW 302
18864: IFFALSE 18880
// ComEnterUnit ( Rocket , Teleport1 ) end ;
18866: LD_VAR 0 1
18870: PPUSH
18871: LD_VAR 0 6
18875: PPUSH
18876: CALL_OW 120
// end ; AddComAttackPlace ( Rocket , GetX ( Selected_unit ) , GetY ( Selected_unit ) ) ;
18880: LD_VAR 0 1
18884: PPUSH
18885: LD_VAR 0 4
18889: PPUSH
18890: CALL_OW 250
18894: PPUSH
18895: LD_VAR 0 4
18899: PPUSH
18900: CALL_OW 251
18904: PPUSH
18905: CALL_OW 176
// end ;
18909: LD_VAR 0 2
18913: RET
// on SailEvent ( Event ) do begin case Event of Map_am_base :
18914: LD_VAR 0 1
18918: PUSH
18919: LD_EXP 161
18923: DOUBLE
18924: EQUAL
18925: IFTRUE 18929
18927: GO 18976
18929: POP
// begin Wait ( 0 0$1 ) ;
18930: LD_INT 35
18932: PPUSH
18933: CALL_OW 67
// RevealFogArea ( americans , Map_am ) ;
18937: LD_EXP 176
18941: PPUSH
18942: LD_INT 20
18944: PPUSH
18945: CALL_OW 332
// CenterOnXY ( 60 , 88 ) ;
18949: LD_INT 60
18951: PPUSH
18952: LD_INT 88
18954: PPUSH
18955: CALL_OW 84
// Wait ( 0 0$4 ) ;
18959: LD_INT 140
18961: PPUSH
18962: CALL_OW 67
// CenterJMM = true ;
18966: LD_ADDR_EXP 68
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// end ; Map_rus_attack :
18974: GO 19324
18976: LD_EXP 162
18980: DOUBLE
18981: EQUAL
18982: IFTRUE 18986
18984: GO 19080
18986: POP
// begin Wait ( 0 0$4 ) ;
18987: LD_INT 140
18989: PPUSH
18990: CALL_OW 67
// CenterOnXY ( 118 , 180 ) ;
18994: LD_INT 118
18996: PPUSH
18997: LD_INT 180
18999: PPUSH
19000: CALL_OW 84
// Wait ( 0 0$4 ) ;
19004: LD_INT 140
19006: PPUSH
19007: CALL_OW 67
// CenterOnXY ( 76 , 133 ) ;
19011: LD_INT 76
19013: PPUSH
19014: LD_INT 133
19016: PPUSH
19017: CALL_OW 84
// Wait ( 0 0$3 ) ;
19021: LD_INT 105
19023: PPUSH
19024: CALL_OW 67
// if IsInUnit ( JMM ) <> 0 then
19028: LD_EXP 1
19032: PPUSH
19033: CALL_OW 310
19037: PUSH
19038: LD_INT 0
19040: NONEQUAL
19041: IFFALSE 19054
// CenterOnUnits ( JMM_veh ) else
19043: LD_EXP 57
19047: PPUSH
19048: CALL_OW 85
19052: GO 19063
// CenterOnUnits ( JMM ) ;
19054: LD_EXP 1
19058: PPUSH
19059: CALL_OW 85
// if not ( End_of_journey ) then
19063: LD_EXP 66
19067: NOT
19068: IFFALSE 19078
// CenterJMM = true ;
19070: LD_ADDR_EXP 68
19074: PUSH
19075: LD_INT 1
19077: ST_TO_ADDR
// end ; Send_Helpers :
19078: GO 19324
19080: LD_EXP 163
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19097
19090: POP
// SendHelpers ; Start_Am1_Base :
19091: CALL 21813 0 0
19095: GO 19324
19097: LD_EXP 164
19101: DOUBLE
19102: EQUAL
19103: IFTRUE 19107
19105: GO 19114
19107: POP
// StartAm1Base ; Send_Material :
19108: CALL 23188 0 0
19112: GO 19324
19114: LD_EXP 165
19118: DOUBLE
19119: EQUAL
19120: IFTRUE 19124
19122: GO 19131
19124: POP
// SendMaterial ; Capture_JMM_Vehicles :
19125: CALL 22734 0 0
19129: GO 19324
19131: LD_EXP 166
19135: DOUBLE
19136: EQUAL
19137: IFTRUE 19141
19139: GO 19148
19141: POP
// CaptureJMMVehicles ; First_Powells_Attack :
19142: CALL 21234 0 0
19146: GO 19324
19148: LD_EXP 167
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19165
19158: POP
// FirstPowellsAttack ; Second_Powells_Attack :
19159: CALL 24805 0 0
19163: GO 19324
19165: LD_EXP 168
19169: DOUBLE
19170: EQUAL
19171: IFTRUE 19175
19173: GO 19182
19175: POP
// SecondPowellsAttack ; Run_JMM_Vehicles :
19176: CALL 25779 0 0
19180: GO 19324
19182: LD_EXP 169
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19199
19192: POP
// RunJMMVehicles ; Rus1_Attack :
19193: CALL 20960 0 0
19197: GO 19324
19199: LD_EXP 170
19203: DOUBLE
19204: EQUAL
19205: IFTRUE 19209
19207: GO 19216
19209: POP
// Rus1Attack ; Rus_Attack :
19210: CALL 38242 0 0
19214: GO 19324
19216: LD_EXP 171
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19226
19224: GO 19233
19226: POP
// RusAttack ; Retreat_Report :
19227: CALL 47132 0 0
19231: GO 19324
19233: LD_EXP 172
19237: DOUBLE
19238: EQUAL
19239: IFTRUE 19243
19241: GO 19250
19243: POP
// RetreatReport ; JMM_Talk :
19244: CALL 24735 0 0
19248: GO 19324
19250: LD_EXP 173
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19267
19260: POP
// JMMTalk ; Send_Arabian_Back :
19261: CALL 21575 0 0
19265: GO 19324
19267: LD_EXP 174
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19289
19277: POP
// SendArabianBack ( Arabian_Outside ) ; Link_Bombs :
19278: LD_EXP 86
19282: PPUSH
19283: CALL 31363 0 1
19287: GO 19324
19289: LD_EXP 175
19293: DOUBLE
19294: EQUAL
19295: IFTRUE 19299
19297: GO 19306
19299: POP
// LinkBombs ; JMM_Is_Ready :
19300: CALL 6054 0 0
19304: GO 19324
19306: LD_EXP 144
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19323
19316: POP
// JMMIsReady ; end ;
19317: CALL 30174 0 0
19321: GO 19324
19323: POP
// end ;
19324: PPOPN 1
19326: END
// on DialogueSkipped ( i ) do begin Skip = true ;
19327: LD_ADDR_EXP 186
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// end ;
19335: PPOPN 1
19337: END
// on VehicleConstructed ( veh , fact ) do begin case GetSide ( veh ) of americans1 :
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 255
19347: PUSH
19348: LD_EXP 177
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19370
19358: POP
// Am1VehicleConstructed ( veh ) ; arabians :
19359: LD_VAR 0 1
19363: PPUSH
19364: CALL 24216 0 1
19368: GO 19415
19370: LD_EXP 180
19374: DOUBLE
19375: EQUAL
19376: IFTRUE 19380
19378: GO 19392
19380: POP
// ArVehicleConstructed ( veh ) ; russians :
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL 35131 0 1
19390: GO 19415
19392: LD_EXP 178
19396: DOUBLE
19397: EQUAL
19398: IFTRUE 19402
19400: GO 19414
19402: POP
// BuildGroups ( veh ) ; end ;
19403: LD_VAR 0 1
19407: PPUSH
19408: CALL 44938 0 1
19412: GO 19415
19414: POP
// end ;
19415: PPOPN 2
19417: END
// on VehicleCaptured ( VehNew , VehOld , OrigSide , Hum ) do begin if VehOld = JMM_veh then
19418: LD_VAR 0 2
19422: PUSH
19423: LD_EXP 57
19427: EQUAL
19428: IFFALSE 19446
// Captured_vehicles = Captured_vehicles ^ VehNew ;
19430: LD_ADDR_EXP 60
19434: PUSH
19435: LD_EXP 60
19439: PUSH
19440: LD_VAR 0 1
19444: ADD
19445: ST_TO_ADDR
// if VehOld = Woman_veh then
19446: LD_VAR 0 2
19450: PUSH
19451: LD_EXP 58
19455: EQUAL
19456: IFFALSE 19474
// Captured_vehicles = Captured_vehicles ^ VehNew ;
19458: LD_ADDR_EXP 60
19462: PUSH
19463: LD_EXP 60
19467: PUSH
19468: LD_VAR 0 1
19472: ADD
19473: ST_TO_ADDR
// end ;
19474: PPOPN 4
19476: END
// on BuildingCaptured ( build , origside , eng ) do begin case origside of americans1 :
19477: LD_VAR 0 2
19481: PUSH
19482: LD_EXP 177
19486: DOUBLE
19487: EQUAL
19488: IFTRUE 19492
19490: GO 19512
19492: POP
// begin Say ( Powell , DBack3-Pow-1 ) ;
19493: LD_EXP 2
19497: PPUSH
19498: LD_STRING DBack3-Pow-1
19500: PPUSH
19501: CALL_OW 88
// enable ( out_of_base ) ;
19505: LD_EXP 138
19509: ENABLE_MARKED
// end ; alliance :
19510: GO 19530
19512: LD_EXP 182
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19529
19522: POP
// begin AllianceBuildingInRed ;
19523: CALL 50735 0 0
// end ; end ;
19527: GO 19530
19529: POP
// end ;
19530: PPOPN 3
19532: END
// on ResearchComplete ( tech , lab ) do var Uns ;
19533: LD_INT 0
19535: PPUSH
// begin if lab in [ RusLab1 , RusLab2 ] then
19536: LD_VAR 0 2
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: IN
19551: IFFALSE 19570
// SetTech ( tech , Russians1 , state_researched ) ;
19553: LD_VAR 0 1
19557: PPUSH
19558: LD_EXP 179
19562: PPUSH
19563: LD_INT 2
19565: PPUSH
19566: CALL_OW 322
// if ( tech = tech_ST3 ) and ( lab = RusLab1 ) then
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 65
19577: EQUAL
19578: PUSH
19579: LD_VAR 0 2
19583: PUSH
19584: LD_INT 2
19586: EQUAL
19587: AND
19588: IFFALSE 19612
// begin Uns = UnitsInside ( RusLab1 ) ;
19590: LD_ADDR_VAR 0 3
19594: PUSH
19595: LD_INT 2
19597: PPUSH
19598: CALL_OW 313
19602: ST_TO_ADDR
// ChangeScientists ( Uns ) ;
19603: LD_VAR 0 3
19607: PPUSH
19608: CALL 42536 0 1
// end ; if ( tech = tech_Sib3 ) and ( lab = RusLab2 ) then
19612: LD_VAR 0 1
19616: PUSH
19617: LD_INT 56
19619: EQUAL
19620: PUSH
19621: LD_VAR 0 2
19625: PUSH
19626: LD_INT 1
19628: EQUAL
19629: AND
19630: IFFALSE 19654
// begin Uns = UnitsInside ( RusLab2 ) ;
19632: LD_ADDR_VAR 0 3
19636: PUSH
19637: LD_INT 1
19639: PPUSH
19640: CALL_OW 313
19644: ST_TO_ADDR
// ChangeScientists ( Uns ) ;
19645: LD_VAR 0 3
19649: PPUSH
19650: CALL 42536 0 1
// end ; if ( tech = tech_ST3 ) and ( lab = AllLabR1 ) then
19654: LD_VAR 0 1
19658: PUSH
19659: LD_INT 65
19661: EQUAL
19662: PUSH
19663: LD_VAR 0 2
19667: PUSH
19668: LD_INT 39
19670: EQUAL
19671: AND
19672: IFFALSE 19689
// begin ComEnterUnit ( UnitsInside ( AllLabR1 ) , AllLabR2 ) ;
19674: LD_INT 39
19676: PPUSH
19677: CALL_OW 313
19681: PPUSH
19682: LD_INT 133
19684: PPUSH
19685: CALL_OW 120
// end ; if ( tech = tech_Weap3 ) and ( lab = AllLabR2 ) then
19689: LD_VAR 0 1
19693: PUSH
19694: LD_INT 53
19696: EQUAL
19697: PUSH
19698: LD_VAR 0 2
19702: PUSH
19703: LD_INT 133
19705: EQUAL
19706: AND
19707: IFFALSE 19709
// begin end ; if ( tech = tech_Sib3 ) and ( lab = AllLabA ) then
19709: LD_VAR 0 1
19713: PUSH
19714: LD_INT 56
19716: EQUAL
19717: PUSH
19718: LD_VAR 0 2
19722: PUSH
19723: LD_INT 46
19725: EQUAL
19726: AND
19727: IFFALSE 19729
// begin end ; end ;
19729: PPOPN 3
19731: END
// on UnitGoesToRed ( Un ) do var i ;
19732: LD_INT 0
19734: PPUSH
// begin case GetSide ( Un ) of Americans :
19735: LD_VAR 0 1
19739: PPUSH
19740: CALL_OW 255
19744: PUSH
19745: LD_EXP 176
19749: DOUBLE
19750: EQUAL
19751: IFTRUE 19755
19753: GO 19758
19755: POP
// begin end ; Americans1 :
19756: GO 20238
19758: LD_EXP 177
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19771
19768: POP
// begin end ; Russians :
19769: GO 20238
19771: LD_EXP 178
19775: DOUBLE
19776: EQUAL
19777: IFTRUE 19781
19779: GO 19784
19781: POP
// begin end ; Russians1 :
19782: GO 20238
19784: LD_EXP 179
19788: DOUBLE
19789: EQUAL
19790: IFTRUE 19794
19792: GO 19871
19794: POP
// begin if ( GetType ( Un ) = unit_vehicle ) then
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 247
19804: PUSH
19805: LD_INT 2
19807: EQUAL
19808: IFFALSE 19869
// if ( GetControl ( Un ) = control_manual ) and ( ( GetWeapon ( Un ) = ru_rocket ) or ( GetWeapon ( Un ) = ru_time_lapser ) ) then
19810: LD_VAR 0 1
19814: PPUSH
19815: CALL_OW 263
19819: PUSH
19820: LD_INT 1
19822: EQUAL
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 264
19833: PUSH
19834: LD_INT 47
19836: EQUAL
19837: PUSH
19838: LD_VAR 0 1
19842: PPUSH
19843: CALL_OW 264
19847: PUSH
19848: LD_INT 49
19850: EQUAL
19851: OR
19852: AND
19853: IFFALSE 19869
// begin PriorityAttack ( Russians1 , Un ) ;
19855: LD_EXP 179
19859: PPUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 470
// end ; end ; Arabians :
19869: GO 20238
19871: LD_EXP 180
19875: DOUBLE
19876: EQUAL
19877: IFTRUE 19881
19879: GO 20192
19881: POP
// begin if Un = ArDep1 then
19882: LD_VAR 0 1
19886: PUSH
19887: LD_INT 122
19889: EQUAL
19890: IFFALSE 19909
// begin SetLives ( [ ArRuFact , ArRuSibExt ] , 0 ) ;
19892: LD_INT 105
19894: PUSH
19895: LD_INT 116
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PPUSH
19902: LD_INT 0
19904: PPUSH
19905: CALL_OW 234
// end ; if GetBType ( Un ) = b_turret then
19909: LD_VAR 0 1
19913: PPUSH
19914: CALL_OW 266
19918: PUSH
19919: LD_INT 33
19921: EQUAL
19922: IFFALSE 20079
// begin i = UnitsInside ( Un ) ;
19924: LD_ADDR_VAR 0 2
19928: PUSH
19929: LD_VAR 0 1
19933: PPUSH
19934: CALL_OW 313
19938: ST_TO_ADDR
// if ( i ^ [ ] ) = 1 then
19939: LD_VAR 0 2
19943: PUSH
19944: EMPTY
19945: ADD
19946: PUSH
19947: LD_INT 1
19949: EQUAL
19950: IFFALSE 20079
// if GetNation ( Un ) = nation_nature then
19952: LD_VAR 0 1
19956: PPUSH
19957: CALL_OW 248
19961: PUSH
19962: LD_INT 0
19964: EQUAL
19965: IFFALSE 20079
// begin ComMoveXYR ( Un , 48 , 4 , 3 , false ) ;
19967: LD_VAR 0 1
19971: PPUSH
19972: LD_INT 48
19974: PPUSH
19975: LD_INT 4
19977: PPUSH
19978: LD_INT 3
19980: PPUSH
19981: LD_INT 0
19983: PPUSH
19984: CALL 17822 0 5
// AddComHold ( Un ) ;
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL_OW 200
// while ( R1_Attack_Continues = false ) or not ( ExistMc ( Arabian_def_id ) ) do
19997: LD_EXP 196
20001: PUSH
20002: LD_INT 0
20004: EQUAL
20005: PUSH
20006: LD_EXP 235
20010: PPUSH
20011: CALL_OW 386
20015: NOT
20016: OR
20017: IFFALSE 20028
// Wait ( 0 0$1 ) ;
20019: LD_INT 35
20021: PPUSH
20022: CALL_OW 67
20026: GO 19997
// ComMoveXYR ( Un , 63 , 16 , 3 , true ) ;
20028: LD_VAR 0 1
20032: PPUSH
20033: LD_INT 63
20035: PPUSH
20036: LD_INT 16
20038: PPUSH
20039: LD_INT 3
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: CALL 17822 0 5
// AddMcUnits ( Arabian_def_id , Un ) ;
20049: LD_EXP 235
20053: PPUSH
20054: LD_VAR 0 1
20058: PPUSH
20059: CALL_OW 390
// All_arabians = Arabian_soldiers ^ Un ;
20063: LD_ADDR_EXP 79
20067: PUSH
20068: LD_EXP 80
20072: PUSH
20073: LD_VAR 0 1
20077: ADD
20078: ST_TO_ADDR
// end ; end ; if ( Un = New_ArRu_Fact ) and IsOk ( Kozlov ) then
20079: LD_VAR 0 1
20083: PUSH
20084: LD_EXP 87
20088: EQUAL
20089: PUSH
20090: LD_EXP 22
20094: PPUSH
20095: CALL_OW 302
20099: AND
20100: IFFALSE 20190
// begin if GetClass ( Kozlov ) <> class_engineer then
20102: LD_EXP 22
20106: PPUSH
20107: CALL_OW 257
20111: PUSH
20112: LD_INT 2
20114: NONEQUAL
20115: IFFALSE 20150
// begin ComEnterUnit ( Kozlov , ArDep1 ) ;
20117: LD_EXP 22
20121: PPUSH
20122: LD_INT 122
20124: PPUSH
20125: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_engineer ) ;
20129: LD_EXP 22
20133: PPUSH
20134: LD_INT 2
20136: PPUSH
20137: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
20141: LD_EXP 22
20145: PPUSH
20146: CALL_OW 182
// end ; AddComRepairBuilding ( Kozlov , New_ArRu_Fact ) ;
20150: LD_EXP 22
20154: PPUSH
20155: LD_EXP 87
20159: PPUSH
20160: CALL_OW 190
// AddComEnterUnit ( Kozlov , New_ArRu_Fact ) ;
20164: LD_EXP 22
20168: PPUSH
20169: LD_EXP 87
20173: PPUSH
20174: CALL_OW 180
// AddComChangeProfession ( Kozlov , class_mechanic ) ;
20178: LD_EXP 22
20182: PPUSH
20183: LD_INT 3
20185: PPUSH
20186: CALL_OW 183
// end ; end ; Arabians1 :
20190: GO 20238
20192: LD_EXP 181
20196: DOUBLE
20197: EQUAL
20198: IFTRUE 20202
20200: GO 20205
20202: POP
// begin end ; Alliance :
20203: GO 20238
20205: LD_EXP 182
20209: DOUBLE
20210: EQUAL
20211: IFTRUE 20215
20213: GO 20237
20215: POP
// begin if ( GetType ( Un ) = unit_building ) then
20216: LD_VAR 0 1
20220: PPUSH
20221: CALL_OW 247
20225: PUSH
20226: LD_INT 3
20228: EQUAL
20229: IFFALSE 20235
// AllianceBuildingInRed ;
20231: CALL 50735 0 0
// end ; end ;
20235: GO 20238
20237: POP
// end ;
20238: PPOPN 2
20240: END
// on HumanDestroyed ( un , side , nation , x , y , direction , sex , class ) do var i ;
20241: LD_INT 0
20243: PPUSH
// begin Wait ( 1 ) ;
20244: LD_INT 1
20246: PPUSH
20247: CALL_OW 67
// case side of americans :
20251: LD_VAR 0 2
20255: PUSH
20256: LD_EXP 176
20260: DOUBLE
20261: EQUAL
20262: IFTRUE 20266
20264: GO 20287
20266: POP
// begin if nation <> nation_nature then
20267: LD_VAR 0 3
20271: PUSH
20272: LD_INT 0
20274: NONEQUAL
20275: IFFALSE 20285
// No_Looses = false ;
20277: LD_ADDR_EXP 56
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// end ; arabians :
20285: GO 20490
20287: LD_EXP 180
20291: DOUBLE
20292: EQUAL
20293: IFTRUE 20297
20295: GO 20304
20297: POP
// begin ArabianPersonIsDead ;
20298: CALL 33778 0 0
// end ; arabians1 :
20302: GO 20490
20304: LD_EXP 181
20308: DOUBLE
20309: EQUAL
20310: IFTRUE 20314
20312: GO 20325
20314: POP
// begin HeikeLastWords ;
20315: CALL 49861 0 0
// TestForEndOfMission ;
20319: CALL 49933 0 0
// end ; alliance :
20323: GO 20490
20325: LD_EXP 182
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20363
20335: POP
// begin if ( un = Roth ) then
20336: LD_VAR 0 1
20340: PUSH
20341: LD_EXP 20
20345: EQUAL
20346: IFFALSE 20357
// ChangeMissionObjectives ( M3b ) else
20348: LD_STRING M3b
20350: PPUSH
20351: CALL_OW 337
20355: GO 20361
// AlliancePersonIsDead ;
20357: CALL 50652 0 0
// end ; russians :
20361: GO 20490
20363: LD_EXP 178
20367: DOUBLE
20368: EQUAL
20369: IFTRUE 20373
20371: GO 20489
20373: POP
// begin if Un in Behemot_Engineers then
20374: LD_VAR 0 1
20378: PUSH
20379: LD_EXP 127
20383: IN
20384: IFFALSE 20487
// begin Behemot_Engineers = Behemot_Engineers diff Un ;
20386: LD_ADDR_EXP 127
20390: PUSH
20391: LD_EXP 127
20395: PUSH
20396: LD_VAR 0 1
20400: DIFF
20401: ST_TO_ADDR
// if Behemot_Engineers = [ ] then
20402: LD_EXP 127
20406: PUSH
20407: EMPTY
20408: EQUAL
20409: IFFALSE 20436
// begin if Russian_project_canceled then
20411: LD_EXP 55
20415: IFFALSE 20424
// ChangeMissionObjectives ( M4a ) ;
20417: LD_STRING M4a
20419: PPUSH
20420: CALL_OW 337
// Number_of_complete_Behemots = 0 ;
20424: LD_ADDR_EXP 223
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// BehemotsAttack ;
20432: CALL 48109 0 0
// end ; Wait ( 1 ) ;
20436: LD_INT 1
20438: PPUSH
20439: CALL_OW 67
// for i in Behemot_Engineers do
20443: LD_ADDR_VAR 0 9
20447: PUSH
20448: LD_EXP 127
20452: PUSH
20453: FOR_IN
20454: IFFALSE 20473
// if HasTask ( i ) then
20456: LD_VAR 0 9
20460: PPUSH
20461: CALL_OW 314
20465: IFFALSE 20471
// exit ;
20467: POP
20468: POP
20469: GO 20490
20471: GO 20453
20473: POP
20474: POP
// Number_of_complete_Behemots = 0 ;
20475: LD_ADDR_EXP 223
20479: PUSH
20480: LD_INT 0
20482: ST_TO_ADDR
// BehemotsAttack ;
20483: CALL 48109 0 0
// end ; end ; end ;
20487: GO 20490
20489: POP
// end ;
20490: PPOPN 9
20492: END
// on SiberiteRocketExploded ( Un , x , y ) do begin SA_OnSiberiteRocketExploded ( Un ) ;
20493: LD_VAR 0 1
20497: PPUSH
20498: CALL 56053 0 1
// if InArea ( x , y , Rus_Base ) then
20502: LD_VAR 0 2
20506: PPUSH
20507: LD_VAR 0 3
20511: PPUSH
20512: LD_INT 5
20514: PPUSH
20515: CALL_OW 309
20519: IFFALSE 20567
// begin if GetSide ( Un ) = arabians then
20521: LD_VAR 0 1
20525: PPUSH
20526: CALL_OW 255
20530: PUSH
20531: LD_EXP 180
20535: EQUAL
20536: IFFALSE 20545
// enable ( Matherlod_Contamined1 ) else
20538: LD_EXP 149
20542: ENABLE_MARKED
20543: GO 20567
// if GetSide ( Un ) = americans then
20545: LD_VAR 0 1
20549: PPUSH
20550: CALL_OW 255
20554: PUSH
20555: LD_EXP 176
20559: EQUAL
20560: IFFALSE 20567
// enable ( Matherlod_Contamined2 ) ;
20562: LD_EXP 150
20566: ENABLE_MARKED
// end ; if GetSide ( Un ) = russians then
20567: LD_VAR 0 1
20571: PPUSH
20572: CALL_OW 255
20576: PUSH
20577: LD_EXP 178
20581: EQUAL
20582: IFFALSE 20603
// begin Wait ( 0 0$5 ) ;
20584: LD_INT 175
20586: PPUSH
20587: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
20591: LD_EXP 26
20595: PPUSH
20596: LD_STRING D18-Pla-1
20598: PPUSH
20599: CALL_OW 88
// end ; end ;
20603: PPOPN 3
20605: END
// on BuildingStarted ( build , hum ) do begin if GetBType ( build ) = b_behemoth then
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 266
20615: PUSH
20616: LD_INT 37
20618: EQUAL
20619: IFFALSE 20637
// Russian_Behemots = Russian_Behemots ^ build ;
20621: LD_ADDR_EXP 128
20625: PUSH
20626: LD_EXP 128
20630: PUSH
20631: LD_VAR 0 1
20635: ADD
20636: ST_TO_ADDR
// end ;
20637: PPOPN 2
20639: END
// on BehemothConstructed ( behemot ) do var i ;
20640: LD_INT 0
20642: PPUSH
// begin if GetSide ( behemot ) = 1 then
20643: LD_VAR 0 1
20647: PPUSH
20648: CALL_OW 255
20652: PUSH
20653: LD_INT 1
20655: EQUAL
20656: IFFALSE 20660
// exit ;
20658: GO 20786
// Russian_Behemots = UnitFilter ( ( Russian_Behemots ^ behemot ) diff [ 0 ] , [ f_alive ] ) ;
20660: LD_ADDR_EXP 128
20664: PUSH
20665: LD_EXP 128
20669: PUSH
20670: LD_VAR 0 1
20674: ADD
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: DIFF
20682: PPUSH
20683: LD_INT 51
20685: PUSH
20686: EMPTY
20687: LIST
20688: PPUSH
20689: CALL_OW 72
20693: ST_TO_ADDR
// New_Behemots = New_Behemots ^ behemot ;
20694: LD_ADDR_EXP 129
20698: PUSH
20699: LD_EXP 129
20703: PUSH
20704: LD_VAR 0 1
20708: ADD
20709: ST_TO_ADDR
// if Russian_project_canceled = true then
20710: LD_EXP 55
20714: PUSH
20715: LD_INT 1
20717: EQUAL
20718: IFFALSE 20735
// begin Russian_project_canceled = false ;
20720: LD_ADDR_EXP 55
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
20728: LD_STRING M4b
20730: PPUSH
20731: CALL_OW 337
// end ; Wait ( 1 ) ;
20735: LD_INT 1
20737: PPUSH
20738: CALL_OW 67
// for i in Behemot_Engineers do
20742: LD_ADDR_VAR 0 2
20746: PUSH
20747: LD_EXP 127
20751: PUSH
20752: FOR_IN
20753: IFFALSE 20772
// if HasTask ( i ) then
20755: LD_VAR 0 2
20759: PPUSH
20760: CALL_OW 314
20764: IFFALSE 20770
// exit ;
20766: POP
20767: POP
20768: GO 20786
20770: GO 20752
20772: POP
20773: POP
// Number_of_complete_Behemots = 0 ;
20774: LD_ADDR_EXP 223
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// BehemotsAttack ;
20782: CALL 48109 0 0
// end ;
20786: PPOPN 2
20788: END
// on SibDepositContaminated ( Un , X , Y ) do begin if InArea ( X , Y , R_base ) then
20789: LD_VAR 0 2
20793: PPUSH
20794: LD_VAR 0 3
20798: PPUSH
20799: LD_INT 36
20801: PPUSH
20802: CALL_OW 309
20806: IFFALSE 20867
// begin if GetSide ( Un ) = arabians1 then
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 255
20817: PUSH
20818: LD_EXP 181
20822: EQUAL
20823: IFFALSE 20867
// begin CenterOnXY ( X , Y ) ;
20825: LD_VAR 0 2
20829: PPUSH
20830: LD_VAR 0 3
20834: PPUSH
20835: CALL_OW 84
// placeseeing ( X , Y , americans , - 12 ) ;
20839: LD_VAR 0 2
20843: PPUSH
20844: LD_VAR 0 3
20848: PPUSH
20849: LD_EXP 176
20853: PPUSH
20854: LD_INT 12
20856: NEG
20857: PPUSH
20858: CALL_OW 330
// enable ( Matherlod_Contamined3 ) ;
20862: LD_EXP 151
20866: ENABLE_MARKED
// end ; end ; end ;
20867: PPOPN 3
20869: END
// var reg_res ; on McRegistryResultChanges ( mcid , count , strength ) do begin case mcid of Alliance_wood_reg_id :
20870: LD_VAR 0 1
20874: PUSH
20875: LD_EXP 249
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20892
20885: POP
// GuardAllianceWood ; end ;
20886: CALL 55129 0 0
20890: GO 20893
20892: POP
// reg_res = count &    & strength ;
20893: LD_ADDR_LOC 2
20897: PUSH
20898: LD_VAR 0 2
20902: PUSH
20903: LD_STRING   
20905: STR
20906: PUSH
20907: LD_VAR 0 3
20911: STR
20912: ST_TO_ADDR
// end ;
20913: PPOPN 3
20915: END
// on McDefendTakesUnit ( mcid , un ) do begin taken := taken ^ [ un ] ;
20916: LD_ADDR_LOC 1
20920: PUSH
20921: LD_LOC 1
20925: PUSH
20926: LD_VAR 0 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: ADD
20934: ST_TO_ADDR
// end ;
20935: PPOPN 2
20937: END
// on McDefendReturnsUnit ( mcid , un ) do begin taken := taken diff [ un ] ;
20938: LD_ADDR_LOC 1
20942: PUSH
20943: LD_LOC 1
20947: PUSH
20948: LD_VAR 0 2
20952: PUSH
20953: EMPTY
20954: LIST
20955: DIFF
20956: ST_TO_ADDR
// end ; end_of_file
20957: PPOPN 2
20959: END
// var driver1 , driver2 , Selected_Sold ; var soldiers , soldiers1 , Retreat_Boy ; var driver , developer ; var R1_Attacking_Units , R1_Patroling_Units ; var The_original_mechanical_Skill ; export function RunJMMVehicles ; var V ; begin
20960: LD_INT 0
20962: PPUSH
20963: PPUSH
// RevealFogArea ( americans , map_ar ) ;
20964: LD_EXP 176
20968: PPUSH
20969: LD_INT 19
20971: PPUSH
20972: CALL_OW 332
// V = [ JMM_veh ] ;
20976: LD_ADDR_VAR 0 2
20980: PUSH
20981: LD_EXP 57
20985: PUSH
20986: EMPTY
20987: LIST
20988: ST_TO_ADDR
// if JMM_Woman then
20989: LD_EXP 37
20993: IFFALSE 21014
// V = V ^ [ Woman_veh ] ;
20995: LD_ADDR_VAR 0 2
20999: PUSH
21000: LD_VAR 0 2
21004: PUSH
21005: LD_EXP 58
21009: PUSH
21010: EMPTY
21011: LIST
21012: ADD
21013: ST_TO_ADDR
// AddComMoveXY ( V , 94 , 124 ) ;
21014: LD_VAR 0 2
21018: PPUSH
21019: LD_INT 94
21021: PPUSH
21022: LD_INT 124
21024: PPUSH
21025: CALL_OW 171
// AddComMoveXY ( V , 47 , 79 ) ;
21029: LD_VAR 0 2
21033: PPUSH
21034: LD_INT 47
21036: PPUSH
21037: LD_INT 79
21039: PPUSH
21040: CALL_OW 171
// WaitTask ( V , 0.5 ) ;
21044: LD_VAR 0 2
21048: PPUSH
21049: LD_REAL  5.00000000000000E-0001
21052: PPUSH
21053: CALL 17888 0 2
// ComExitVehicle ( V ) ;
21057: LD_VAR 0 2
21061: PPUSH
21062: CALL_OW 121
// if not ( Skip ) then
21066: LD_EXP 186
21070: NOT
21071: IFFALSE 21081
// CenterJMM = false ;
21073: LD_ADDR_EXP 68
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
// End_of_journey = true ;
21081: LD_ADDR_EXP 66
21085: PUSH
21086: LD_INT 1
21088: ST_TO_ADDR
// RaiseSailEvent ( Capture_JMM_Vehicles ) ;
21089: LD_EXP 166
21093: PPUSH
21094: CALL_OW 427
// Wait ( 2 ) ;
21098: LD_INT 2
21100: PPUSH
21101: CALL_OW 67
// if not ( Skip ) then
21105: LD_EXP 186
21109: NOT
21110: IFFALSE 21127
// ComMoveXY ( JMM , 48 , 63 ) ;
21112: LD_EXP 1
21116: PPUSH
21117: LD_INT 48
21119: PPUSH
21120: LD_INT 63
21122: PPUSH
21123: CALL_OW 111
// if not ( Skip ) then
21127: LD_EXP 186
21131: NOT
21132: IFFALSE 21148
// AddComTurnUnit ( JMM , Powell ) ;
21134: LD_EXP 1
21138: PPUSH
21139: LD_EXP 2
21143: PPUSH
21144: CALL_OW 179
// if not ( Skip ) then
21148: LD_EXP 186
21152: NOT
21153: IFFALSE 21170
// ComMoveXY ( JMM_Woman , 47 , 68 ) ;
21155: LD_EXP 37
21159: PPUSH
21160: LD_INT 47
21162: PPUSH
21163: LD_INT 68
21165: PPUSH
21166: CALL_OW 111
// if not ( Skip ) then
21170: LD_EXP 186
21174: NOT
21175: IFFALSE 21192
// ComMoveXY ( Powell , 43 , 63 ) ;
21177: LD_EXP 2
21181: PPUSH
21182: LD_INT 43
21184: PPUSH
21185: LD_INT 63
21187: PPUSH
21188: CALL_OW 111
// if not ( Skip ) then
21192: LD_EXP 186
21196: NOT
21197: IFFALSE 21213
// AddComTurnUnit ( Powell , JMM ) ;
21199: LD_EXP 2
21203: PPUSH
21204: LD_EXP 1
21208: PPUSH
21209: CALL_OW 179
// if not ( Skip ) then
21213: LD_EXP 186
21217: NOT
21218: IFFALSE 21229
// CenterOnUnits ( Powell ) ;
21220: LD_EXP 2
21224: PPUSH
21225: CALL_OW 85
// end ;
21229: LD_VAR 0 1
21233: RET
// export function CaptureJMMVehicles ; var possible_drivers , hex ; begin
21234: LD_INT 0
21236: PPUSH
21237: PPUSH
21238: PPUSH
// possible_drivers = Remaining_Powells diff Named_americans ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_EXP 64
21248: PUSH
21249: LD_EXP 62
21253: DIFF
21254: ST_TO_ADDR
// driver1 = possible_drivers [ 1 ] ;
21255: LD_ADDR_LOC 3
21259: PUSH
21260: LD_VAR 0 2
21264: PUSH
21265: LD_INT 1
21267: ARRAY
21268: ST_TO_ADDR
// driver2 = possible_drivers [ 2 ] ;
21269: LD_ADDR_LOC 4
21273: PUSH
21274: LD_VAR 0 2
21278: PUSH
21279: LD_INT 2
21281: ARRAY
21282: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff ( driver1 ^ driver2 ) ;
21283: LD_ADDR_EXP 64
21287: PUSH
21288: LD_EXP 64
21292: PUSH
21293: LD_LOC 3
21297: PUSH
21298: LD_LOC 4
21302: ADD
21303: DIFF
21304: ST_TO_ADDR
// ComEnterUnit ( driver1 , JMM_veh ) ;
21305: LD_LOC 3
21309: PPUSH
21310: LD_EXP 57
21314: PPUSH
21315: CALL_OW 120
// hex = RandHexArea ( Am1_parking , true ) ;
21319: LD_ADDR_VAR 0 3
21323: PUSH
21324: LD_INT 21
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 16
21334: ST_TO_ADDR
// AddComMoveXY ( driver1 , hex [ 1 ] , hex [ 2 ] ) ;
21335: LD_LOC 3
21339: PPUSH
21340: LD_VAR 0 3
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PPUSH
21349: LD_VAR 0 3
21353: PUSH
21354: LD_INT 2
21356: ARRAY
21357: PPUSH
21358: CALL_OW 171
// AddComExitVehicle ( driver1 ) ;
21362: LD_LOC 3
21366: PPUSH
21367: CALL_OW 181
// AddComEnterUnit ( driver1 , AmArm ) ;
21371: LD_LOC 3
21375: PPUSH
21376: LD_INT 92
21378: PPUSH
21379: CALL_OW 180
// AddComChangeProfession ( driver1 , class_soldier ) ;
21383: LD_LOC 3
21387: PPUSH
21388: LD_INT 1
21390: PPUSH
21391: CALL_OW 183
// if Woman_veh then
21395: LD_EXP 58
21399: IFFALSE 21536
// begin ComEnterUnit ( driver2 , Woman_veh ) ;
21401: LD_LOC 4
21405: PPUSH
21406: LD_EXP 58
21410: PPUSH
21411: CALL_OW 120
// hex = RandHexArea ( Am1_parking , true ) ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_INT 21
21422: PPUSH
21423: LD_INT 1
21425: PPUSH
21426: CALL_OW 16
21430: ST_TO_ADDR
// AddComMoveXY ( driver2 , hex [ 1 ] , hex [ 2 ] ) ;
21431: LD_LOC 4
21435: PPUSH
21436: LD_VAR 0 3
21440: PUSH
21441: LD_INT 1
21443: ARRAY
21444: PPUSH
21445: LD_VAR 0 3
21449: PUSH
21450: LD_INT 2
21452: ARRAY
21453: PPUSH
21454: CALL_OW 171
// AddComExitVehicle ( driver2 ) ;
21458: LD_LOC 4
21462: PPUSH
21463: CALL_OW 181
// AddComEnterUnit ( driver2 , AmArm ) ;
21467: LD_LOC 4
21471: PPUSH
21472: LD_INT 92
21474: PPUSH
21475: CALL_OW 180
// AddComChangeProfession ( driver2 , class_soldier ) ;
21479: LD_LOC 4
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: CALL_OW 183
// WaitTask ( [ driver1 , driver2 ] , 1 ) ;
21491: LD_LOC 3
21495: PUSH
21496: LD_LOC 4
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PPUSH
21505: LD_INT 1
21507: PPUSH
21508: CALL 17888 0 2
// Remaining_Powells = Remaining_Powells ^ driver1 ^ driver2 ;
21512: LD_ADDR_EXP 64
21516: PUSH
21517: LD_EXP 64
21521: PUSH
21522: LD_LOC 3
21526: ADD
21527: PUSH
21528: LD_LOC 4
21532: ADD
21533: ST_TO_ADDR
// end else
21534: GO 21570
// begin WaitTask ( driver1 , 1 ) ;
21536: LD_LOC 3
21540: PPUSH
21541: LD_INT 1
21543: PPUSH
21544: CALL 17888 0 2
// Remaining_Powells = Remaining_Powells ^ driver1 ^ driver2 ;
21548: LD_ADDR_EXP 64
21552: PUSH
21553: LD_EXP 64
21557: PUSH
21558: LD_LOC 3
21562: ADD
21563: PUSH
21564: LD_LOC 4
21568: ADD
21569: ST_TO_ADDR
// end ; end ;
21570: LD_VAR 0 1
21574: RET
// export function JMMTalk ; begin
21575: LD_INT 0
21577: PPUSH
// while Joan_semafor do
21578: LD_EXP 233
21582: IFFALSE 21593
// Wait ( 0 0$1 ) ;
21584: LD_INT 35
21586: PPUSH
21587: CALL_OW 67
21591: GO 21578
// case Selected_Sold of Lisa :
21593: LD_LOC 5
21597: PUSH
21598: LD_EXP 5
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21623
21608: POP
// Say ( Lisa , D3nW-Lisa-1 ) ; Cyrus :
21609: LD_EXP 5
21613: PPUSH
21614: LD_STRING D3nW-Lisa-1
21616: PPUSH
21617: CALL_OW 88
21621: GO 21774
21623: LD_EXP 4
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21648
21633: POP
// Say ( Cyrus , D3nW-Cyrus-1 ) ; Bobby :
21634: LD_EXP 4
21638: PPUSH
21639: LD_STRING D3nW-Cyrus-1
21641: PPUSH
21642: CALL_OW 88
21646: GO 21774
21648: LD_EXP 3
21652: DOUBLE
21653: EQUAL
21654: IFTRUE 21658
21656: GO 21673
21658: POP
// Say ( Bobby , D3nW-Bobby-1 ) ; Gary :
21659: LD_EXP 3
21663: PPUSH
21664: LD_STRING D3nW-Bobby-1
21666: PPUSH
21667: CALL_OW 88
21671: GO 21774
21673: LD_EXP 15
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21698
21683: POP
// Say ( Gary , D3nW-Gary-1 ) ; Donaldson :
21684: LD_EXP 15
21688: PPUSH
21689: LD_STRING D3nW-Gary-1
21691: PPUSH
21692: CALL_OW 88
21696: GO 21774
21698: LD_EXP 8
21702: DOUBLE
21703: EQUAL
21704: IFTRUE 21708
21706: GO 21723
21708: POP
// Say ( Donaldson , D3nW-Don-1 ) ; Frank :
21709: LD_EXP 8
21713: PPUSH
21714: LD_STRING D3nW-Don-1
21716: PPUSH
21717: CALL_OW 88
21721: GO 21774
21723: LD_EXP 6
21727: DOUBLE
21728: EQUAL
21729: IFTRUE 21733
21731: GO 21748
21733: POP
// Say ( Frank , D3nW-Frank-1 ) ; Cornell :
21734: LD_EXP 6
21738: PPUSH
21739: LD_STRING D3nW-Frank-1
21741: PPUSH
21742: CALL_OW 88
21746: GO 21774
21748: LD_EXP 10
21752: DOUBLE
21753: EQUAL
21754: IFTRUE 21758
21756: GO 21773
21758: POP
// Say ( Cornell , D3nW-Corn-1 ) ; end ;
21759: LD_EXP 10
21763: PPUSH
21764: LD_STRING D3nW-Corn-1
21766: PPUSH
21767: CALL_OW 88
21771: GO 21774
21773: POP
// if Selected_Sold > 0 then
21774: LD_LOC 5
21778: PUSH
21779: LD_INT 0
21781: GREATER
21782: IFFALSE 21808
// begin Say ( JMM , D3nW-JMM-1 ) ;
21784: LD_EXP 1
21788: PPUSH
21789: LD_STRING D3nW-JMM-1
21791: PPUSH
21792: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
21796: LD_EXP 1
21800: PPUSH
21801: LD_STRING D3nW-JMM-1a
21803: PPUSH
21804: CALL_OW 88
// end ; end ;
21808: LD_VAR 0 1
21812: RET
// export function SendHelpers ; var Named_without_woman , Un , Uns , i , Possible_Units ; begin
21813: LD_INT 0
21815: PPUSH
21816: PPUSH
21817: PPUSH
21818: PPUSH
21819: PPUSH
21820: PPUSH
// JMM_Helpers = Named_Americans ;
21821: LD_ADDR_EXP 67
21825: PUSH
21826: LD_EXP 62
21830: ST_TO_ADDR
// if Named_Americans > Number_of_JMM_Helpers then
21831: LD_EXP 62
21835: PUSH
21836: LD_EXP 69
21840: GREATER
21841: IFFALSE 22033
// begin Uns = FindMaxSkill ( JMM_Helpers , skill_engineering ) ;
21843: LD_ADDR_VAR 0 4
21847: PUSH
21848: LD_EXP 67
21852: PPUSH
21853: LD_INT 2
21855: PPUSH
21856: CALL_OW 433
21860: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21861: LD_ADDR_EXP 67
21865: PUSH
21866: LD_EXP 67
21870: PUSH
21871: LD_VAR 0 4
21875: DIFF
21876: ST_TO_ADDR
// Uns = Uns ^ FindMaxSkill ( JMM_Helpers , skill_scientistic ) ;
21877: LD_ADDR_VAR 0 4
21881: PUSH
21882: LD_VAR 0 4
21886: PUSH
21887: LD_EXP 67
21891: PPUSH
21892: LD_INT 4
21894: PPUSH
21895: CALL_OW 433
21899: ADD
21900: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21901: LD_ADDR_EXP 67
21905: PUSH
21906: LD_EXP 67
21910: PUSH
21911: LD_VAR 0 4
21915: DIFF
21916: ST_TO_ADDR
// Uns = Uns ^ FindMaxSkill ( JMM_Helpers , skill_combat ) ;
21917: LD_ADDR_VAR 0 4
21921: PUSH
21922: LD_VAR 0 4
21926: PUSH
21927: LD_EXP 67
21931: PPUSH
21932: LD_INT 1
21934: PPUSH
21935: CALL_OW 433
21939: ADD
21940: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21941: LD_ADDR_EXP 67
21945: PUSH
21946: LD_EXP 67
21950: PUSH
21951: LD_VAR 0 4
21955: DIFF
21956: ST_TO_ADDR
// for Un = Number_of_JMM_Helpers to Named_Americans - 1 do
21957: LD_ADDR_VAR 0 3
21961: PUSH
21962: DOUBLE
21963: LD_EXP 69
21967: DEC
21968: ST_TO_ADDR
21969: LD_EXP 62
21973: PUSH
21974: LD_INT 1
21976: MINUS
21977: PUSH
21978: FOR_TO
21979: IFFALSE 22013
// begin JMM_Helpers = JMM_Helpers diff JMM_Helpers [ Rand ( 1 , JMM_Helpers ) ] ;
21981: LD_ADDR_EXP 67
21985: PUSH
21986: LD_EXP 67
21990: PUSH
21991: LD_EXP 67
21995: PUSH
21996: LD_INT 1
21998: PPUSH
21999: LD_EXP 67
22003: PPUSH
22004: CALL_OW 12
22008: ARRAY
22009: DIFF
22010: ST_TO_ADDR
// end ;
22011: GO 21978
22013: POP
22014: POP
// JMM_Helpers = JMM_Helpers ^ Uns ;
22015: LD_ADDR_EXP 67
22019: PUSH
22020: LD_EXP 67
22024: PUSH
22025: LD_VAR 0 4
22029: ADD
22030: ST_TO_ADDR
// end else
22031: GO 22145
// if Named_Americans < Number_of_JMM_Helpers then
22033: LD_EXP 62
22037: PUSH
22038: LD_EXP 69
22042: LESS
22043: IFFALSE 22145
// begin JMM_Helpers = JMM_Helpers ^ FindMaxSkill ( ( All_americans diff ( JMM_Helpers ^ JMM_Woman ) ) , skill_engineering ) ;
22045: LD_ADDR_EXP 67
22049: PUSH
22050: LD_EXP 67
22054: PUSH
22055: LD_EXP 61
22059: PUSH
22060: LD_EXP 67
22064: PUSH
22065: LD_EXP 37
22069: ADD
22070: DIFF
22071: PPUSH
22072: LD_INT 2
22074: PPUSH
22075: CALL_OW 433
22079: ADD
22080: ST_TO_ADDR
// for Un = Named_Americans + 2 to Number_of_JMM_Helpers do
22081: LD_ADDR_VAR 0 3
22085: PUSH
22086: DOUBLE
22087: LD_EXP 62
22091: PUSH
22092: LD_INT 2
22094: PLUS
22095: DEC
22096: ST_TO_ADDR
22097: LD_EXP 69
22101: PUSH
22102: FOR_TO
22103: IFFALSE 22143
// begin JMM_Helpers = JMM_Helpers ^ FindMaxSkill ( ( All_americans diff ( JMM_Helpers ^ JMM_Woman ) ) , skill_combat ) ;
22105: LD_ADDR_EXP 67
22109: PUSH
22110: LD_EXP 67
22114: PUSH
22115: LD_EXP 61
22119: PUSH
22120: LD_EXP 67
22124: PUSH
22125: LD_EXP 37
22129: ADD
22130: DIFF
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL_OW 433
22139: ADD
22140: ST_TO_ADDR
// end ;
22141: GO 22102
22143: POP
22144: POP
// end ; Uns = JMM_Helpers ;
22145: LD_ADDR_VAR 0 4
22149: PUSH
22150: LD_EXP 67
22154: ST_TO_ADDR
// Un = FindMaxSkill ( Uns , skill_engineering ) ;
22155: LD_ADDR_VAR 0 3
22159: PUSH
22160: LD_VAR 0 4
22164: PPUSH
22165: LD_INT 2
22167: PPUSH
22168: CALL_OW 433
22172: ST_TO_ADDR
// Uns = Uns diff Un ;
22173: LD_ADDR_VAR 0 4
22177: PUSH
22178: LD_VAR 0 4
22182: PUSH
22183: LD_VAR 0 3
22187: DIFF
22188: ST_TO_ADDR
// if GetClass ( Un ) <> class_engineer then
22189: LD_VAR 0 3
22193: PPUSH
22194: CALL_OW 257
22198: PUSH
22199: LD_INT 2
22201: NONEQUAL
22202: IFFALSE 22245
// begin ComEnterUnit ( Un , AmDep ) ;
22204: LD_VAR 0 3
22208: PPUSH
22209: LD_INT 84
22211: PPUSH
22212: CALL_OW 120
// AddComChangeProfession ( Un , class_engineer ) ;
22216: LD_VAR 0 3
22220: PPUSH
22221: LD_INT 2
22223: PPUSH
22224: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 68
22235: PPUSH
22236: LD_INT 107
22238: PPUSH
22239: CALL_OW 171
// end else
22243: GO 22260
// ComMoveXY ( Un , 68 , 107 ) ;
22245: LD_VAR 0 3
22249: PPUSH
22250: LD_INT 68
22252: PPUSH
22253: LD_INT 107
22255: PPUSH
22256: CALL_OW 111
// for i = 1 to 1 do
22260: LD_ADDR_VAR 0 5
22264: PUSH
22265: DOUBLE
22266: LD_INT 1
22268: DEC
22269: ST_TO_ADDR
22270: LD_INT 1
22272: PUSH
22273: FOR_TO
22274: IFFALSE 22383
// begin Un = FindMaxSkill ( Uns , skill_scientistic ) ;
22276: LD_ADDR_VAR 0 3
22280: PUSH
22281: LD_VAR 0 4
22285: PPUSH
22286: LD_INT 4
22288: PPUSH
22289: CALL_OW 433
22293: ST_TO_ADDR
// Uns = Uns diff Un ;
22294: LD_ADDR_VAR 0 4
22298: PUSH
22299: LD_VAR 0 4
22303: PUSH
22304: LD_VAR 0 3
22308: DIFF
22309: ST_TO_ADDR
// if GetClass ( Un ) <> class_scientistic then
22310: LD_VAR 0 3
22314: PPUSH
22315: CALL_OW 257
22319: PUSH
22320: LD_INT 4
22322: NONEQUAL
22323: IFFALSE 22366
// begin ComEnterUnit ( Un , AmLab ) ;
22325: LD_VAR 0 3
22329: PPUSH
22330: LD_INT 91
22332: PPUSH
22333: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
22337: LD_VAR 0 3
22341: PPUSH
22342: LD_INT 4
22344: PPUSH
22345: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22349: LD_VAR 0 3
22353: PPUSH
22354: LD_INT 68
22356: PPUSH
22357: LD_INT 107
22359: PPUSH
22360: CALL_OW 171
// end else
22364: GO 22381
// ComMoveXY ( Un , 68 , 107 ) ;
22366: LD_VAR 0 3
22370: PPUSH
22371: LD_INT 68
22373: PPUSH
22374: LD_INT 107
22376: PPUSH
22377: CALL_OW 111
// end ;
22381: GO 22273
22383: POP
22384: POP
// for Un in Uns do
22385: LD_ADDR_VAR 0 3
22389: PUSH
22390: LD_VAR 0 4
22394: PUSH
22395: FOR_IN
22396: IFFALSE 22471
// begin if GetClass ( Un ) <> class_soldier then
22398: LD_VAR 0 3
22402: PPUSH
22403: CALL_OW 257
22407: PUSH
22408: LD_INT 1
22410: NONEQUAL
22411: IFFALSE 22454
// begin ComEnterUnit ( Un , AmArm ) ;
22413: LD_VAR 0 3
22417: PPUSH
22418: LD_INT 92
22420: PPUSH
22421: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22437: LD_VAR 0 3
22441: PPUSH
22442: LD_INT 68
22444: PPUSH
22445: LD_INT 107
22447: PPUSH
22448: CALL_OW 171
// end else
22452: GO 22469
// ComMoveXY ( Un , 68 , 107 ) ;
22454: LD_VAR 0 3
22458: PPUSH
22459: LD_INT 68
22461: PPUSH
22462: LD_INT 107
22464: PPUSH
22465: CALL_OW 111
// end ;
22469: GO 22395
22471: POP
22472: POP
// Uns = JMM_Helpers ;
22473: LD_ADDR_VAR 0 4
22477: PUSH
22478: LD_EXP 67
22482: ST_TO_ADDR
// while Uns > 0 do
22483: LD_VAR 0 4
22487: PUSH
22488: LD_INT 0
22490: GREATER
22491: IFFALSE 22570
// begin for Un in Uns do
22493: LD_ADDR_VAR 0 3
22497: PUSH
22498: LD_VAR 0 4
22502: PUSH
22503: FOR_IN
22504: IFFALSE 22559
// if GetDistUnitXY ( Un , 68 , 107 ) < 6 then
22506: LD_VAR 0 3
22510: PPUSH
22511: LD_INT 68
22513: PPUSH
22514: LD_INT 107
22516: PPUSH
22517: CALL_OW 297
22521: PUSH
22522: LD_INT 6
22524: LESS
22525: IFFALSE 22557
// begin SetSide ( Un , americans ) ;
22527: LD_VAR 0 3
22531: PPUSH
22532: LD_EXP 176
22536: PPUSH
22537: CALL_OW 235
// Uns = Uns diff Un ;
22541: LD_ADDR_VAR 0 4
22545: PUSH
22546: LD_VAR 0 4
22550: PUSH
22551: LD_VAR 0 3
22555: DIFF
22556: ST_TO_ADDR
// end ;
22557: GO 22503
22559: POP
22560: POP
// Wait ( 0 0$1 ) ;
22561: LD_INT 35
22563: PPUSH
22564: CALL_OW 67
// end ;
22568: GO 22483
// tick = 0 ;
22570: LD_ADDR_OWVAR 1
22574: PUSH
22575: LD_INT 0
22577: ST_TO_ADDR
// StartRussianBase ;
22578: CALL 41623 0 0
// StartAllianceBase ;
22582: CALL 50024 0 0
// StartArabianBase ;
22586: CALL 31159 0 0
// R1_Attack_Continues = true ;
22590: LD_ADDR_EXP 196
22594: PUSH
22595: LD_INT 1
22597: ST_TO_ADDR
// enable ( R1_attack ) ;
22598: LD_EXP 140
22602: ENABLE_MARKED
// enable ( First_JMM_Task ) ;
22603: LD_EXP 137
22607: ENABLE_MARKED
// Possible_Units = 0 ;
22608: LD_ADDR_VAR 0 6
22612: PUSH
22613: LD_INT 0
22615: ST_TO_ADDR
// Possible_Units = JMM_Helpers isect [ Lisa , Cyrus , Bobby , Gary , Donaldson , Frank , Cornell ] ;
22616: LD_ADDR_VAR 0 6
22620: PUSH
22621: LD_EXP 67
22625: PUSH
22626: LD_EXP 5
22630: PUSH
22631: LD_EXP 4
22635: PUSH
22636: LD_EXP 3
22640: PUSH
22641: LD_EXP 15
22645: PUSH
22646: LD_EXP 8
22650: PUSH
22651: LD_EXP 6
22655: PUSH
22656: LD_EXP 10
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: ISECT
22670: ST_TO_ADDR
// Selected_Sold = Possible_Units [ Rand ( 1 , Possible_Units ) ] ;
22671: LD_ADDR_LOC 5
22675: PUSH
22676: LD_VAR 0 6
22680: PUSH
22681: LD_INT 1
22683: PPUSH
22684: LD_VAR 0 6
22688: PPUSH
22689: CALL_OW 12
22693: ARRAY
22694: ST_TO_ADDR
// RaiseSailEvent ( JMM_Talk ) ;
22695: LD_EXP 173
22699: PPUSH
22700: CALL_OW 427
// Remaining_Powells = Remaining_Powells diff JMM_Helpers ;
22704: LD_ADDR_EXP 64
22708: PUSH
22709: LD_EXP 64
22713: PUSH
22714: LD_EXP 67
22718: DIFF
22719: ST_TO_ADDR
// RaiseSailEvent ( Start_Am1_Base ) ;
22720: LD_EXP 164
22724: PPUSH
22725: CALL_OW 427
// end ;
22729: LD_VAR 0 1
22733: RET
// export function SendMaterial ; var Un , i , Cans_Positions , Free_Place ; begin
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
22738: PPUSH
22739: PPUSH
22740: PPUSH
// ComEnterUnit ( Carriers , AmDep ) ;
22741: LD_EXP 65
22745: PPUSH
22746: LD_INT 84
22748: PPUSH
22749: CALL_OW 120
// for Un in Carriers do
22753: LD_ADDR_VAR 0 2
22757: PUSH
22758: LD_EXP 65
22762: PUSH
22763: FOR_IN
22764: IFFALSE 22780
// begin AddComChangeProfession ( Un , class_engineer ) ;
22766: LD_VAR 0 2
22770: PPUSH
22771: LD_INT 2
22773: PPUSH
22774: CALL_OW 183
// end ;
22778: GO 22763
22780: POP
22781: POP
// WaitTask ( Carriers , 0.5 ) ;
22782: LD_EXP 65
22786: PPUSH
22787: LD_REAL  5.00000000000000E-0001
22790: PPUSH
22791: CALL 17888 0 2
// Cans_Positions = [ [ 63 , 103 ] , [ 68 , 101 ] , [ 66 , 96 ] , [ 64 , 99 ] , [ 59 , 99 ] , [ 67 , 104 ] , [ 69 , 95 ] ] ;
22795: LD_ADDR_VAR 0 4
22799: PUSH
22800: LD_INT 63
22802: PUSH
22803: LD_INT 103
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 68
22812: PUSH
22813: LD_INT 101
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 66
22822: PUSH
22823: LD_INT 96
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 64
22832: PUSH
22833: LD_INT 99
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 59
22842: PUSH
22843: LD_INT 99
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 67
22852: PUSH
22853: LD_INT 104
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 69
22862: PUSH
22863: LD_INT 95
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: ST_TO_ADDR
// for i = 1 to Number_of_crates do
22879: LD_ADDR_VAR 0 3
22883: PUSH
22884: DOUBLE
22885: LD_INT 1
22887: DEC
22888: ST_TO_ADDR
22889: LD_EXP 197
22893: PUSH
22894: FOR_TO
22895: IFFALSE 22989
// begin if i = 1 then
22897: LD_VAR 0 3
22901: PUSH
22902: LD_INT 1
22904: EQUAL
22905: IFFALSE 22924
// ComTransport ( Carriers , AmDep , mat_cans ) else
22907: LD_EXP 65
22911: PPUSH
22912: LD_INT 84
22914: PPUSH
22915: LD_INT 1
22917: PPUSH
22918: CALL_OW 151
22922: GO 22939
// AddComTransport ( Carriers , AmDep , mat_cans ) ;
22924: LD_EXP 65
22928: PPUSH
22929: LD_INT 84
22931: PPUSH
22932: LD_INT 1
22934: PPUSH
22935: CALL_OW 211
// AddComMoveXY ( Carriers , Cans_Positions [ i ] [ 1 ] , Cans_Positions [ i ] [ 2 ] ) ;
22939: LD_EXP 65
22943: PPUSH
22944: LD_VAR 0 4
22948: PUSH
22949: LD_VAR 0 3
22953: ARRAY
22954: PUSH
22955: LD_INT 1
22957: ARRAY
22958: PPUSH
22959: LD_VAR 0 4
22963: PUSH
22964: LD_VAR 0 3
22968: ARRAY
22969: PUSH
22970: LD_INT 2
22972: ARRAY
22973: PPUSH
22974: CALL_OW 171
// AddComUnload ( Carriers ) ;
22978: LD_EXP 65
22982: PPUSH
22983: CALL_OW 219
// end ;
22987: GO 22894
22989: POP
22990: POP
// AddComMoveXY ( Carriers , 48 , 73 ) ;
22991: LD_EXP 65
22995: PPUSH
22996: LD_INT 48
22998: PPUSH
22999: LD_INT 73
23001: PPUSH
23002: CALL_OW 171
// WaitTask ( Carriers , 1 ) ;
23006: LD_EXP 65
23010: PPUSH
23011: LD_INT 1
23013: PPUSH
23014: CALL 17888 0 2
// Free_Place = 6 - UnitsInside ( AmArm ) ;
23018: LD_ADDR_VAR 0 5
23022: PUSH
23023: LD_INT 6
23025: PUSH
23026: LD_INT 92
23028: PPUSH
23029: CALL_OW 313
23033: MINUS
23034: ST_TO_ADDR
// if Free_Place > 2 then
23035: LD_VAR 0 5
23039: PUSH
23040: LD_INT 2
23042: GREATER
23043: IFFALSE 23059
// AddComEnterUnit ( Carriers , AmArm ) else
23045: LD_EXP 65
23049: PPUSH
23050: LD_INT 92
23052: PPUSH
23053: CALL_OW 180
23057: GO 23155
// begin for i = 1 to Free_Place do
23059: LD_ADDR_VAR 0 3
23063: PUSH
23064: DOUBLE
23065: LD_INT 1
23067: DEC
23068: ST_TO_ADDR
23069: LD_VAR 0 5
23073: PUSH
23074: FOR_TO
23075: IFFALSE 23109
// begin AddComEnterUnit ( Carriers [ i ] , AmArm ) ;
23077: LD_EXP 65
23081: PUSH
23082: LD_VAR 0 3
23086: ARRAY
23087: PPUSH
23088: LD_INT 92
23090: PPUSH
23091: CALL_OW 180
// AddComChangeProfession ( Carriers , class_soldier ) ;
23095: LD_EXP 65
23099: PPUSH
23100: LD_INT 1
23102: PPUSH
23103: CALL_OW 183
// end ;
23107: GO 23074
23109: POP
23110: POP
// for i = Free_Place + 1 to 3 do
23111: LD_ADDR_VAR 0 3
23115: PUSH
23116: DOUBLE
23117: LD_VAR 0 5
23121: PUSH
23122: LD_INT 1
23124: PLUS
23125: DEC
23126: ST_TO_ADDR
23127: LD_INT 3
23129: PUSH
23130: FOR_TO
23131: IFFALSE 23153
// AddComEnterUnit ( Carriers [ i ] , AmLab ) ;
23133: LD_EXP 65
23137: PUSH
23138: LD_VAR 0 3
23142: ARRAY
23143: PPUSH
23144: LD_INT 91
23146: PPUSH
23147: CALL_OW 180
23151: GO 23130
23153: POP
23154: POP
// end ; WaitTask ( Carriers , 1 ) ;
23155: LD_EXP 65
23159: PPUSH
23160: LD_INT 1
23162: PPUSH
23163: CALL 17888 0 2
// Remaining_Powells = Remaining_Powells ^ Carriers ;
23167: LD_ADDR_EXP 64
23171: PUSH
23172: LD_EXP 64
23176: PUSH
23177: LD_EXP 65
23181: ADD
23182: ST_TO_ADDR
// end ;
23183: LD_VAR 0 1
23187: RET
// export function StartAm1Base ; var i , Un , Uns ; begin
23188: LD_INT 0
23190: PPUSH
23191: PPUSH
23192: PPUSH
23193: PPUSH
// Remaining_Named = ( Remaining_Powells diff JMM_Helpers ) isect Named_americans ;
23194: LD_ADDR_EXP 63
23198: PUSH
23199: LD_EXP 64
23203: PUSH
23204: LD_EXP 67
23208: DIFF
23209: PUSH
23210: LD_EXP 62
23214: ISECT
23215: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Named_americans ;
23216: LD_ADDR_EXP 64
23220: PUSH
23221: LD_EXP 64
23225: PUSH
23226: LD_EXP 62
23230: DIFF
23231: ST_TO_ADDR
// Carriers = [ ] ;
23232: LD_ADDR_EXP 65
23236: PUSH
23237: EMPTY
23238: ST_TO_ADDR
// for i = 1 to 3 do
23239: LD_ADDR_VAR 0 2
23243: PUSH
23244: DOUBLE
23245: LD_INT 1
23247: DEC
23248: ST_TO_ADDR
23249: LD_INT 3
23251: PUSH
23252: FOR_TO
23253: IFFALSE 23297
// begin Carriers = Carriers ^ Remaining_Powells [ 1 ] ;
23255: LD_ADDR_EXP 65
23259: PUSH
23260: LD_EXP 65
23264: PUSH
23265: LD_EXP 64
23269: PUSH
23270: LD_INT 1
23272: ARRAY
23273: ADD
23274: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Remaining_Powells [ 1 ] ;
23275: LD_ADDR_EXP 64
23279: PUSH
23280: LD_EXP 64
23284: PUSH
23285: LD_EXP 64
23289: PUSH
23290: LD_INT 1
23292: ARRAY
23293: DIFF
23294: ST_TO_ADDR
// end ;
23295: GO 23252
23297: POP
23298: POP
// RaiseSailEvent ( Send_material ) ;
23299: LD_EXP 165
23303: PPUSH
23304: CALL_OW 427
// while UnitFilter ( Carriers , [ f_not , [ f_class , class_engineer ] ] ) do
23308: LD_EXP 65
23312: PPUSH
23313: LD_INT 3
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PPUSH
23330: CALL_OW 72
23334: IFFALSE 23345
// Wait ( 0 0$1 ) ;
23336: LD_INT 35
23338: PPUSH
23339: CALL_OW 67
23343: GO 23308
// i = 0 ;
23345: LD_ADDR_VAR 0 2
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// Uns = Remaining_Powells ;
23353: LD_ADDR_VAR 0 4
23357: PUSH
23358: LD_EXP 64
23362: ST_TO_ADDR
// repeat i = i + 1 ;
23363: LD_ADDR_VAR 0 2
23367: PUSH
23368: LD_VAR 0 2
23372: PUSH
23373: LD_INT 1
23375: PLUS
23376: ST_TO_ADDR
// case i of 1 :
23377: LD_VAR 0 2
23381: PUSH
23382: LD_INT 1
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23463
23390: POP
// begin Un = FindMaxSkill ( Uns , skill_combat ) ;
23391: LD_ADDR_VAR 0 3
23395: PUSH
23396: LD_VAR 0 4
23400: PPUSH
23401: LD_INT 1
23403: PPUSH
23404: CALL_OW 433
23408: ST_TO_ADDR
// Uns = Uns diff Un ;
23409: LD_ADDR_VAR 0 4
23413: PUSH
23414: LD_VAR 0 4
23418: PUSH
23419: LD_VAR 0 3
23423: DIFF
23424: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23425: LD_VAR 0 3
23429: PPUSH
23430: LD_INT 92
23432: PPUSH
23433: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23437: LD_VAR 0 3
23441: PPUSH
23442: LD_INT 1
23444: PPUSH
23445: CALL_OW 183
// AddComEnterUnit ( Un , AmB1 ) ;
23449: LD_VAR 0 3
23453: PPUSH
23454: LD_INT 89
23456: PPUSH
23457: CALL_OW 180
// end ; 2 :
23461: GO 23860
23463: LD_INT 2
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23544
23471: POP
// begin Un = FindMaxSkill ( Uns , skill_combat ) ;
23472: LD_ADDR_VAR 0 3
23476: PUSH
23477: LD_VAR 0 4
23481: PPUSH
23482: LD_INT 1
23484: PPUSH
23485: CALL_OW 433
23489: ST_TO_ADDR
// Uns = Uns diff Un ;
23490: LD_ADDR_VAR 0 4
23494: PUSH
23495: LD_VAR 0 4
23499: PUSH
23500: LD_VAR 0 3
23504: DIFF
23505: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23506: LD_VAR 0 3
23510: PPUSH
23511: LD_INT 92
23513: PPUSH
23514: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23518: LD_VAR 0 3
23522: PPUSH
23523: LD_INT 1
23525: PPUSH
23526: CALL_OW 183
// AddComEnterUnit ( Un , AmB2 ) ;
23530: LD_VAR 0 3
23534: PPUSH
23535: LD_INT 90
23537: PPUSH
23538: CALL_OW 180
// end ; 3 :
23542: GO 23860
23544: LD_INT 3
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23646
23552: POP
// begin Un = FindMinSkill ( Uns , skill_mechanical ) ;
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: LD_VAR 0 4
23562: PPUSH
23563: LD_INT 3
23565: PPUSH
23566: CALL_OW 443
23570: ST_TO_ADDR
// The_original_mechanical_Skill = GetSkill ( Un , skill_mechanical ) ;
23571: LD_ADDR_LOC 13
23575: PUSH
23576: LD_VAR 0 3
23580: PPUSH
23581: LD_INT 3
23583: PPUSH
23584: CALL_OW 259
23588: ST_TO_ADDR
// SetSkill ( Un , skill_mechanical , 5 ) ;
23589: LD_VAR 0 3
23593: PPUSH
23594: LD_INT 3
23596: PPUSH
23597: LD_INT 5
23599: PPUSH
23600: CALL_OW 237
// Uns = Uns diff Un ;
23604: LD_ADDR_VAR 0 4
23608: PUSH
23609: LD_VAR 0 4
23613: PUSH
23614: LD_VAR 0 3
23618: DIFF
23619: ST_TO_ADDR
// ComEnterUnit ( Un , AmFact ) ;
23620: LD_VAR 0 3
23624: PPUSH
23625: LD_INT 85
23627: PPUSH
23628: CALL_OW 120
// AddComChangeProfession ( Un , class_mechanic ) ;
23632: LD_VAR 0 3
23636: PPUSH
23637: LD_INT 3
23639: PPUSH
23640: CALL_OW 183
// end ; 4 :
23644: GO 23860
23646: LD_INT 4
23648: DOUBLE
23649: EQUAL
23650: IFTRUE 23654
23652: GO 23725
23654: POP
// begin Un = FindMinSkill ( Uns , skill_scientistic ) ;
23655: LD_ADDR_VAR 0 3
23659: PUSH
23660: LD_VAR 0 4
23664: PPUSH
23665: LD_INT 4
23667: PPUSH
23668: CALL_OW 443
23672: ST_TO_ADDR
// Uns = Uns diff Un ;
23673: LD_ADDR_VAR 0 4
23677: PUSH
23678: LD_VAR 0 4
23682: PUSH
23683: LD_VAR 0 3
23687: DIFF
23688: ST_TO_ADDR
// ComEnterUnit ( Un , AmLab ) ;
23689: LD_VAR 0 3
23693: PPUSH
23694: LD_INT 91
23696: PPUSH
23697: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
23701: LD_VAR 0 3
23705: PPUSH
23706: LD_INT 4
23708: PPUSH
23709: CALL_OW 183
// Developer = Un ;
23713: LD_ADDR_LOC 10
23717: PUSH
23718: LD_VAR 0 3
23722: ST_TO_ADDR
// end ; else
23723: GO 23860
23725: POP
// begin if ( i mod 2 = 1 ) and ( i > 2 ) then
23726: LD_VAR 0 2
23730: PUSH
23731: LD_INT 2
23733: MOD
23734: PUSH
23735: LD_INT 1
23737: EQUAL
23738: PUSH
23739: LD_VAR 0 2
23743: PUSH
23744: LD_INT 2
23746: GREATER
23747: AND
23748: IFFALSE 23806
// begin Un = Uns [ 1 ] ;
23750: LD_ADDR_VAR 0 3
23754: PUSH
23755: LD_VAR 0 4
23759: PUSH
23760: LD_INT 1
23762: ARRAY
23763: ST_TO_ADDR
// Uns = Uns diff Un ;
23764: LD_ADDR_VAR 0 4
23768: PUSH
23769: LD_VAR 0 4
23773: PUSH
23774: LD_VAR 0 3
23778: DIFF
23779: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23780: LD_VAR 0 3
23784: PPUSH
23785: LD_INT 92
23787: PPUSH
23788: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23792: LD_VAR 0 3
23796: PPUSH
23797: LD_INT 1
23799: PPUSH
23800: CALL_OW 183
// end else
23804: GO 23860
// begin Un = Uns [ 1 ] ;
23806: LD_ADDR_VAR 0 3
23810: PUSH
23811: LD_VAR 0 4
23815: PUSH
23816: LD_INT 1
23818: ARRAY
23819: ST_TO_ADDR
// Uns = Uns diff Un ;
23820: LD_ADDR_VAR 0 4
23824: PUSH
23825: LD_VAR 0 4
23829: PUSH
23830: LD_VAR 0 3
23834: DIFF
23835: ST_TO_ADDR
// ComEnterUnit ( Un , AmDep ) ;
23836: LD_VAR 0 3
23840: PPUSH
23841: LD_INT 84
23843: PPUSH
23844: CALL_OW 120
// AddComChangeProfession ( Un , class_engineer ) ;
23848: LD_VAR 0 3
23852: PPUSH
23853: LD_INT 2
23855: PPUSH
23856: CALL_OW 183
// end ; end ; end ; until Uns = 0 ;
23860: LD_VAR 0 4
23864: PUSH
23865: LD_INT 0
23867: EQUAL
23868: IFFALSE 23363
// ComResearch ( AmLab , tech_Tech1 ) ;
23870: LD_INT 91
23872: PPUSH
23873: LD_INT 48
23875: PPUSH
23876: CALL_OW 124
// AddComResearch ( AmLab , tech_Tech2 ) ;
23880: LD_INT 91
23882: PPUSH
23883: LD_INT 49
23885: PPUSH
23886: CALL_OW 184
// AddComResearch ( AmLab , tech_Tech3 ) ;
23890: LD_INT 91
23892: PPUSH
23893: LD_INT 50
23895: PPUSH
23896: CALL_OW 184
// AddComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
23900: LD_INT 85
23902: PPUSH
23903: LD_INT 3
23905: PPUSH
23906: LD_INT 2
23908: PPUSH
23909: LD_INT 1
23911: PPUSH
23912: LD_INT 3
23914: PPUSH
23915: CALL_OW 185
// if Remaining_Named <> 0 then
23919: LD_EXP 63
23923: PUSH
23924: LD_INT 0
23926: NONEQUAL
23927: IFFALSE 24211
// begin ComEnterUnit ( Remaining_Named [ 1 ] , AmLab ) ;
23929: LD_EXP 63
23933: PUSH
23934: LD_INT 1
23936: ARRAY
23937: PPUSH
23938: LD_INT 91
23940: PPUSH
23941: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ 1 ] , class_scientistic ) ;
23945: LD_EXP 63
23949: PUSH
23950: LD_INT 1
23952: ARRAY
23953: PPUSH
23954: LD_INT 4
23956: PPUSH
23957: CALL_OW 183
// while ( GetClass ( Carriers [ 1 ] ) <> class_engineer or GetClass ( Carriers [ 2 ] ) <> class_engineer or GetClass ( Carriers [ 3 ] ) <> class_engineer ) do
23961: LD_EXP 65
23965: PUSH
23966: LD_INT 1
23968: ARRAY
23969: PPUSH
23970: CALL_OW 257
23974: PUSH
23975: LD_INT 2
23977: NONEQUAL
23978: PUSH
23979: LD_EXP 65
23983: PUSH
23984: LD_INT 2
23986: ARRAY
23987: PPUSH
23988: CALL_OW 257
23992: PUSH
23993: LD_INT 2
23995: NONEQUAL
23996: OR
23997: PUSH
23998: LD_EXP 65
24002: PUSH
24003: LD_INT 3
24005: ARRAY
24006: PPUSH
24007: CALL_OW 257
24011: PUSH
24012: LD_INT 2
24014: NONEQUAL
24015: OR
24016: IFFALSE 24027
// Wait ( 0 0$1 ) ;
24018: LD_INT 35
24020: PPUSH
24021: CALL_OW 67
24025: GO 23961
// if Remaining_Named > 7 then
24027: LD_EXP 63
24031: PUSH
24032: LD_INT 7
24034: GREATER
24035: IFFALSE 24153
// begin for i = 2 to 7 do
24037: LD_ADDR_VAR 0 2
24041: PUSH
24042: DOUBLE
24043: LD_INT 2
24045: DEC
24046: ST_TO_ADDR
24047: LD_INT 7
24049: PUSH
24050: FOR_TO
24051: IFFALSE 24091
// begin ComEnterUnit ( Remaining_Named [ i ] , AmDep ) ;
24053: LD_EXP 63
24057: PUSH
24058: LD_VAR 0 2
24062: ARRAY
24063: PPUSH
24064: LD_INT 84
24066: PPUSH
24067: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_engineer ) ;
24071: LD_EXP 63
24075: PUSH
24076: LD_VAR 0 2
24080: ARRAY
24081: PPUSH
24082: LD_INT 2
24084: PPUSH
24085: CALL_OW 183
// end ;
24089: GO 24050
24091: POP
24092: POP
// for i = 8 to Remaining_Named do
24093: LD_ADDR_VAR 0 2
24097: PUSH
24098: DOUBLE
24099: LD_INT 8
24101: DEC
24102: ST_TO_ADDR
24103: LD_EXP 63
24107: PUSH
24108: FOR_TO
24109: IFFALSE 24149
// begin ComEnterUnit ( Remaining_Named [ i ] , AmArm ) ;
24111: LD_EXP 63
24115: PUSH
24116: LD_VAR 0 2
24120: ARRAY
24121: PPUSH
24122: LD_INT 92
24124: PPUSH
24125: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_soldier ) ;
24129: LD_EXP 63
24133: PUSH
24134: LD_VAR 0 2
24138: ARRAY
24139: PPUSH
24140: LD_INT 1
24142: PPUSH
24143: CALL_OW 183
// end ;
24147: GO 24108
24149: POP
24150: POP
// end else
24151: GO 24211
// for i = 2 to Remaining_Named do
24153: LD_ADDR_VAR 0 2
24157: PUSH
24158: DOUBLE
24159: LD_INT 2
24161: DEC
24162: ST_TO_ADDR
24163: LD_EXP 63
24167: PUSH
24168: FOR_TO
24169: IFFALSE 24209
// begin ComEnterUnit ( Remaining_Named [ i ] , AmDep ) ;
24171: LD_EXP 63
24175: PUSH
24176: LD_VAR 0 2
24180: ARRAY
24181: PPUSH
24182: LD_INT 84
24184: PPUSH
24185: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_engineer ) ;
24189: LD_EXP 63
24193: PUSH
24194: LD_VAR 0 2
24198: ARRAY
24199: PPUSH
24200: LD_INT 2
24202: PPUSH
24203: CALL_OW 183
// end ;
24207: GO 24168
24209: POP
24210: POP
// end ; end ;
24211: LD_VAR 0 1
24215: RET
// export function Am1VehicleConstructed ( veh ) ; var hex ; begin
24216: LD_INT 0
24218: PPUSH
24219: PPUSH
// driver = UnitsInside ( veh ) [ 1 ] ;
24220: LD_ADDR_LOC 9
24224: PUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: CALL_OW 313
24234: PUSH
24235: LD_INT 1
24237: ARRAY
24238: ST_TO_ADDR
// Am1_vehicles = Am1_vehicles ^ veh ;
24239: LD_ADDR_EXP 59
24243: PUSH
24244: LD_EXP 59
24248: PUSH
24249: LD_VAR 0 1
24253: ADD
24254: ST_TO_ADDR
// if Am1_vehicles < 4 then
24255: LD_EXP 59
24259: PUSH
24260: LD_INT 4
24262: LESS
24263: IFFALSE 24386
// begin hex = RandHexArea ( Am1_parking , true ) ;
24265: LD_ADDR_VAR 0 3
24269: PUSH
24270: LD_INT 21
24272: PPUSH
24273: LD_INT 1
24275: PPUSH
24276: CALL_OW 16
24280: ST_TO_ADDR
// ComMoveXY ( driver , hex [ 1 ] , hex [ 2 ] ) ;
24281: LD_LOC 9
24285: PPUSH
24286: LD_VAR 0 3
24290: PUSH
24291: LD_INT 1
24293: ARRAY
24294: PPUSH
24295: LD_VAR 0 3
24299: PUSH
24300: LD_INT 2
24302: ARRAY
24303: PPUSH
24304: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24308: LD_LOC 9
24312: PPUSH
24313: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24317: LD_LOC 9
24321: PPUSH
24322: LD_INT 85
24324: PPUSH
24325: CALL_OW 180
// if Powell_Attack_Counter in [ 1 , 3 ] then
24329: LD_EXP 193
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: LD_INT 3
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: IN
24344: IFFALSE 24384
// ComConstruct ( Amfact , us_medium_tracked , engine_solar , control_manual , [ us_light_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ) ;
24346: LD_INT 85
24348: PPUSH
24349: LD_INT 3
24351: PPUSH
24352: LD_INT 2
24354: PPUSH
24355: LD_INT 1
24357: PPUSH
24358: LD_INT 3
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: PPUSH
24371: LD_INT 2
24373: PPUSH
24374: CALL_OW 12
24378: ARRAY
24379: PPUSH
24380: CALL_OW 125
// end else
24384: GO 24730
// if Powell_Attack_Counter = 1 then
24386: LD_EXP 193
24390: PUSH
24391: LD_INT 1
24393: EQUAL
24394: IFFALSE 24524
// begin Powell_Attack_Counter = 2 ;
24396: LD_ADDR_EXP 193
24400: PUSH
24401: LD_INT 2
24403: ST_TO_ADDR
// ComMoveXY ( driver , 52 , 64 ) ;
24404: LD_LOC 9
24408: PPUSH
24409: LD_INT 52
24411: PPUSH
24412: LD_INT 64
24414: PPUSH
24415: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24419: LD_LOC 9
24423: PPUSH
24424: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24428: LD_LOC 9
24432: PPUSH
24433: LD_INT 85
24435: PPUSH
24436: CALL_OW 180
// Wait ( 1 ) ;
24440: LD_INT 1
24442: PPUSH
24443: CALL_OW 67
// WaitTask ( driver , 1 ) ;
24447: LD_LOC 9
24451: PPUSH
24452: LD_INT 1
24454: PPUSH
24455: CALL 17888 0 2
// Remaining_Powells = Remaining_Powells diff driver ;
24459: LD_ADDR_EXP 64
24463: PUSH
24464: LD_EXP 64
24468: PUSH
24469: LD_LOC 9
24473: DIFF
24474: ST_TO_ADDR
// FirstPowellsAttack ;
24475: CALL 24805 0 0
// Powell_Attack_Counter = 3 ;
24479: LD_ADDR_EXP 193
24483: PUSH
24484: LD_INT 3
24486: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells ^ driver ;
24487: LD_ADDR_EXP 64
24491: PUSH
24492: LD_EXP 64
24496: PUSH
24497: LD_LOC 9
24501: ADD
24502: ST_TO_ADDR
// ComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
24503: LD_INT 85
24505: PPUSH
24506: LD_INT 3
24508: PPUSH
24509: LD_INT 2
24511: PPUSH
24512: LD_INT 1
24514: PPUSH
24515: LD_INT 3
24517: PPUSH
24518: CALL_OW 125
// end else
24522: GO 24730
// if Powell_Attack_Counter = 3 then
24524: LD_EXP 193
24528: PUSH
24529: LD_INT 3
24531: EQUAL
24532: IFFALSE 24627
// begin Powell_Attack_Counter = 4 ;
24534: LD_ADDR_EXP 193
24538: PUSH
24539: LD_INT 4
24541: ST_TO_ADDR
// ComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
24542: LD_INT 85
24544: PPUSH
24545: LD_INT 3
24547: PPUSH
24548: LD_INT 2
24550: PPUSH
24551: LD_INT 1
24553: PPUSH
24554: LD_INT 3
24556: PPUSH
24557: CALL_OW 125
// hex = RandHexArea ( Am1_parking , true ) ;
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: LD_INT 21
24568: PPUSH
24569: LD_INT 1
24571: PPUSH
24572: CALL_OW 16
24576: ST_TO_ADDR
// ComMoveXY ( driver , hex [ 1 ] , hex [ 2 ] ) ;
24577: LD_LOC 9
24581: PPUSH
24582: LD_VAR 0 3
24586: PUSH
24587: LD_INT 1
24589: ARRAY
24590: PPUSH
24591: LD_VAR 0 3
24595: PUSH
24596: LD_INT 2
24598: ARRAY
24599: PPUSH
24600: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24604: LD_LOC 9
24608: PPUSH
24609: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24613: LD_LOC 9
24617: PPUSH
24618: LD_INT 85
24620: PPUSH
24621: CALL_OW 180
// end else
24625: GO 24730
// if Powell_Attack_Counter = 4 then
24627: LD_EXP 193
24631: PUSH
24632: LD_INT 4
24634: EQUAL
24635: IFFALSE 24730
// begin Powell_Attack_Counter = 5 ;
24637: LD_ADDR_EXP 193
24641: PUSH
24642: LD_INT 5
24644: ST_TO_ADDR
// Am1_vehicles = Am1_vehicles diff veh ;
24645: LD_ADDR_EXP 59
24649: PUSH
24650: LD_EXP 59
24654: PUSH
24655: LD_VAR 0 1
24659: DIFF
24660: ST_TO_ADDR
// Powell_vehicle = veh ;
24661: LD_ADDR_EXP 192
24665: PUSH
24666: LD_VAR 0 1
24670: ST_TO_ADDR
// ComMoveXY ( driver , 52 , 64 ) ;
24671: LD_LOC 9
24675: PPUSH
24676: LD_INT 52
24678: PPUSH
24679: LD_INT 64
24681: PPUSH
24682: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24686: LD_LOC 9
24690: PPUSH
24691: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24695: LD_LOC 9
24699: PPUSH
24700: LD_INT 85
24702: PPUSH
24703: CALL_OW 180
// Wait ( 1 ) ;
24707: LD_INT 1
24709: PPUSH
24710: CALL_OW 67
// WaitTask ( driver , 1 ) ;
24714: LD_LOC 9
24718: PPUSH
24719: LD_INT 1
24721: PPUSH
24722: CALL 17888 0 2
// SecondPowellsAttack ;
24726: CALL 25779 0 0
// end ; end ;
24730: LD_VAR 0 2
24734: RET
// export function RetreatReport ; begin
24735: LD_INT 0
24737: PPUSH
// Say ( Retreat_Boy , D4a-Sol1-1 ) ;
24738: LD_LOC 8
24742: PPUSH
24743: LD_STRING D4a-Sol1-1
24745: PPUSH
24746: CALL_OW 88
// Wait ( 0 0$4 ) ;
24750: LD_INT 140
24752: PPUSH
24753: CALL_OW 67
// Say ( Powell , D4a-Pow-1 ) ;
24757: LD_EXP 2
24761: PPUSH
24762: LD_STRING D4a-Pow-1
24764: PPUSH
24765: CALL_OW 88
// Wait ( 0 0$2 ) ;
24769: LD_INT 70
24771: PPUSH
24772: CALL_OW 67
// Say ( Retreat_Boy , D4a-Sol1-2 ) ;
24776: LD_LOC 8
24780: PPUSH
24781: LD_STRING D4a-Sol1-2
24783: PPUSH
24784: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
24788: LD_EXP 2
24792: PPUSH
24793: LD_STRING D4a-Pow-2
24795: PPUSH
24796: CALL_OW 88
// end ;
24800: LD_VAR 0 1
24804: RET
// export function FirstPowellsAttack ; var i , Un , ret , first_ret , InsideArm ; begin
24805: LD_INT 0
24807: PPUSH
24808: PPUSH
24809: PPUSH
24810: PPUSH
24811: PPUSH
24812: PPUSH
// soldiers = [ ] ;
24813: LD_ADDR_LOC 6
24817: PUSH
24818: EMPTY
24819: ST_TO_ADDR
// ret = [ 0 , 0 , 0 , 0 ] ;
24820: LD_ADDR_VAR 0 4
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: ST_TO_ADDR
// first_ret = true ;
24843: LD_ADDR_VAR 0 5
24847: PUSH
24848: LD_INT 1
24850: ST_TO_ADDR
// InsideArm = UnitsInside ( AmArm ) ;
24851: LD_ADDR_VAR 0 6
24855: PUSH
24856: LD_INT 92
24858: PPUSH
24859: CALL_OW 313
24863: ST_TO_ADDR
// ComExitBuilding ( InsideArm ) ;
24864: LD_VAR 0 6
24868: PPUSH
24869: CALL_OW 122
// ComMoveXY ( InsideArm , 55 , 69 ) ;
24873: LD_VAR 0 6
24877: PPUSH
24878: LD_INT 55
24880: PPUSH
24881: LD_INT 69
24883: PPUSH
24884: CALL_OW 111
// for i = 1 to 4 do
24888: LD_ADDR_VAR 0 2
24892: PUSH
24893: DOUBLE
24894: LD_INT 1
24896: DEC
24897: ST_TO_ADDR
24898: LD_INT 4
24900: PUSH
24901: FOR_TO
24902: IFFALSE 25078
// begin Un = 0 ;
24904: LD_ADDR_VAR 0 3
24908: PUSH
24909: LD_INT 0
24911: ST_TO_ADDR
// Un = FindMinSumSkill ( Remaining_Powells diff [ driver , developer ] , sex_male ) ;
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_EXP 64
24921: PUSH
24922: LD_LOC 9
24926: PUSH
24927: LD_LOC 10
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: DIFF
24936: PPUSH
24937: LD_INT 1
24939: PPUSH
24940: CALL 18316 0 2
24944: ST_TO_ADDR
// if Un = 0 then
24945: LD_VAR 0 3
24949: PUSH
24950: LD_INT 0
24952: EQUAL
24953: IFFALSE 24973
// Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_EXP 64
24964: PPUSH
24965: LD_INT 0
24967: PPUSH
24968: CALL 18316 0 2
24972: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
24973: LD_ADDR_EXP 64
24977: PUSH
24978: LD_EXP 64
24982: PUSH
24983: LD_VAR 0 3
24987: DIFF
24988: ST_TO_ADDR
// soldiers = soldiers ^ Un ;
24989: LD_ADDR_LOC 6
24993: PUSH
24994: LD_LOC 6
24998: PUSH
24999: LD_VAR 0 3
25003: ADD
25004: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
25005: LD_VAR 0 3
25009: PPUSH
25010: CALL_OW 257
25014: PUSH
25015: LD_INT 1
25017: NONEQUAL
25018: IFFALSE 25061
// begin ComEnterUnit ( Un , AmArm ) ;
25020: LD_VAR 0 3
25024: PPUSH
25025: LD_INT 92
25027: PPUSH
25028: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
25032: LD_VAR 0 3
25036: PPUSH
25037: LD_INT 1
25039: PPUSH
25040: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
25044: LD_VAR 0 3
25048: PPUSH
25049: LD_INT 45
25051: PPUSH
25052: LD_INT 64
25054: PPUSH
25055: CALL_OW 171
// end else
25059: GO 25076
// ComMoveXY ( Un , 45 , 64 ) ;
25061: LD_VAR 0 3
25065: PPUSH
25066: LD_INT 45
25068: PPUSH
25069: LD_INT 64
25071: PPUSH
25072: CALL_OW 111
// end ;
25076: GO 24901
25078: POP
25079: POP
// WaitTask ( soldiers , 1 ) ;
25080: LD_LOC 6
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL 17888 0 2
// ComEnterUnit ( InsideArm diff soldiers , AmArm ) ;
25092: LD_VAR 0 6
25096: PUSH
25097: LD_LOC 6
25101: DIFF
25102: PPUSH
25103: LD_INT 92
25105: PPUSH
25106: CALL_OW 120
// if not ( Debug_Constant ) then
25110: LD_EXP 195
25114: NOT
25115: IFFALSE 25136
// begin while tick < 12 12$0 do
25117: LD_OWVAR 1
25121: PUSH
25122: LD_INT 25200
25124: LESS
25125: IFFALSE 25136
// Wait ( 0 0$1 ) ;
25127: LD_INT 35
25129: PPUSH
25130: CALL_OW 67
25134: GO 25117
// end ; Say ( Powell , D4-Pow-1 ) ;
25136: LD_EXP 2
25140: PPUSH
25141: LD_STRING D4-Pow-1
25143: PPUSH
25144: CALL_OW 88
// Say ( soldiers [ 1 ] , D4-Sol1-1 ) ;
25148: LD_LOC 6
25152: PUSH
25153: LD_INT 1
25155: ARRAY
25156: PPUSH
25157: LD_STRING D4-Sol1-1
25159: PPUSH
25160: CALL_OW 88
// Say ( Powell , D4-Pow-2 ) ;
25164: LD_EXP 2
25168: PPUSH
25169: LD_STRING D4-Pow-2
25171: PPUSH
25172: CALL_OW 88
// for i = 1 to 4 do
25176: LD_ADDR_VAR 0 2
25180: PUSH
25181: DOUBLE
25182: LD_INT 1
25184: DEC
25185: ST_TO_ADDR
25186: LD_INT 4
25188: PUSH
25189: FOR_TO
25190: IFFALSE 25241
// begin ComEnterUnit ( soldiers [ i ] , Am1_vehicles [ i ] ) ;
25192: LD_LOC 6
25196: PUSH
25197: LD_VAR 0 2
25201: ARRAY
25202: PPUSH
25203: LD_EXP 59
25207: PUSH
25208: LD_VAR 0 2
25212: ARRAY
25213: PPUSH
25214: CALL_OW 120
// AddComMoveXY ( soldiers [ i ] , 66 , 61 ) ;
25218: LD_LOC 6
25222: PUSH
25223: LD_VAR 0 2
25227: ARRAY
25228: PPUSH
25229: LD_INT 66
25231: PPUSH
25232: LD_INT 61
25234: PPUSH
25235: CALL_OW 171
// end ;
25239: GO 25189
25241: POP
25242: POP
// WaitPos ( 66 , 61 , 6 , Am1_vehicles , 1 ) ;
25243: LD_INT 66
25245: PPUSH
25246: LD_INT 61
25248: PPUSH
25249: LD_INT 6
25251: PPUSH
25252: LD_EXP 59
25256: PPUSH
25257: LD_INT 1
25259: PPUSH
25260: CALL 17986 0 5
// ComAgressiveMove ( Am1_vehicles , 76 , 22 ) ;
25264: LD_EXP 59
25268: PPUSH
25269: LD_INT 76
25271: PPUSH
25272: LD_INT 22
25274: PPUSH
25275: CALL_OW 114
// while not ( IsInArea ( soldiers [ 1 ] , Am_Base ) and IsInArea ( soldiers [ 2 ] , Am_Base ) and IsInArea ( soldiers [ 3 ] , Am_Base ) and IsInArea ( soldiers [ 4 ] , Am_Base ) ) do
25279: LD_LOC 6
25283: PUSH
25284: LD_INT 1
25286: ARRAY
25287: PPUSH
25288: LD_INT 1
25290: PPUSH
25291: CALL_OW 308
25295: PUSH
25296: LD_LOC 6
25300: PUSH
25301: LD_INT 2
25303: ARRAY
25304: PPUSH
25305: LD_INT 1
25307: PPUSH
25308: CALL_OW 308
25312: AND
25313: PUSH
25314: LD_LOC 6
25318: PUSH
25319: LD_INT 3
25321: ARRAY
25322: PPUSH
25323: LD_INT 1
25325: PPUSH
25326: CALL_OW 308
25330: AND
25331: PUSH
25332: LD_LOC 6
25336: PUSH
25337: LD_INT 4
25339: ARRAY
25340: PPUSH
25341: LD_INT 1
25343: PPUSH
25344: CALL_OW 308
25348: AND
25349: NOT
25350: IFFALSE 25550
// begin for i = 1 to 4 do
25352: LD_ADDR_VAR 0 2
25356: PUSH
25357: DOUBLE
25358: LD_INT 1
25360: DEC
25361: ST_TO_ADDR
25362: LD_INT 4
25364: PUSH
25365: FOR_TO
25366: IFFALSE 25539
// begin if not ( IsInUnit ( soldiers [ i ] ) ) and not ( ret [ i ] ) then
25368: LD_LOC 6
25372: PUSH
25373: LD_VAR 0 2
25377: ARRAY
25378: PPUSH
25379: CALL_OW 310
25383: NOT
25384: PUSH
25385: LD_VAR 0 4
25389: PUSH
25390: LD_VAR 0 2
25394: ARRAY
25395: NOT
25396: AND
25397: IFFALSE 25504
// begin if first_ret then
25399: LD_VAR 0 5
25403: IFFALSE 25438
// begin first_ret = false ;
25405: LD_ADDR_VAR 0 5
25409: PUSH
25410: LD_INT 0
25412: ST_TO_ADDR
// Retreat_Boy = soldiers [ i ] ;
25413: LD_ADDR_LOC 8
25417: PUSH
25418: LD_LOC 6
25422: PUSH
25423: LD_VAR 0 2
25427: ARRAY
25428: ST_TO_ADDR
// RaiseSailEvent ( Retreat_Report ) ;
25429: LD_EXP 172
25433: PPUSH
25434: CALL_OW 427
// end ; ret = replace ( ret , i , 1 ) ;
25438: LD_ADDR_VAR 0 4
25442: PUSH
25443: LD_VAR 0 4
25447: PPUSH
25448: LD_VAR 0 2
25452: PPUSH
25453: LD_INT 1
25455: PPUSH
25456: CALL_OW 1
25460: ST_TO_ADDR
// ComMoveXY ( soldiers [ i ] , 51 , 65 ) ;
25461: LD_LOC 6
25465: PUSH
25466: LD_VAR 0 2
25470: ARRAY
25471: PPUSH
25472: LD_INT 51
25474: PPUSH
25475: LD_INT 65
25477: PPUSH
25478: CALL_OW 111
// DoNotAttack ( arabians , soldiers [ i ] ) ;
25482: LD_EXP 180
25486: PPUSH
25487: LD_LOC 6
25491: PUSH
25492: LD_VAR 0 2
25496: ARRAY
25497: PPUSH
25498: CALL_OW 471
// end else
25502: GO 25537
// if ret [ i ] then
25504: LD_VAR 0 4
25508: PUSH
25509: LD_VAR 0 2
25513: ARRAY
25514: IFFALSE 25537
// ComMoveXY ( soldiers [ i ] , 51 , 65 ) ;
25516: LD_LOC 6
25520: PUSH
25521: LD_VAR 0 2
25525: ARRAY
25526: PPUSH
25527: LD_INT 51
25529: PPUSH
25530: LD_INT 65
25532: PPUSH
25533: CALL_OW 111
// end ;
25537: GO 25365
25539: POP
25540: POP
// Wait ( 0 0$0.2 ) ;
25541: LD_INT 7
25543: PPUSH
25544: CALL_OW 67
// end ;
25548: GO 25279
// for Un in soldiers do
25550: LD_ADDR_VAR 0 3
25554: PUSH
25555: LD_LOC 6
25559: PUSH
25560: FOR_IN
25561: IFFALSE 25579
// NormalAttack ( arabians , Un ) ;
25563: LD_EXP 180
25567: PPUSH
25568: LD_VAR 0 3
25572: PPUSH
25573: CALL_OW 472
25577: GO 25560
25579: POP
25580: POP
// if UnitsInside ( AmB1 ) = 0 then
25581: LD_INT 89
25583: PPUSH
25584: CALL_OW 313
25588: PUSH
25589: LD_INT 0
25591: EQUAL
25592: IFFALSE 25650
// begin ComEnterUnit ( soldiers [ 1 ] , AmB1 ) ;
25594: LD_LOC 6
25598: PUSH
25599: LD_INT 1
25601: ARRAY
25602: PPUSH
25603: LD_INT 89
25605: PPUSH
25606: CALL_OW 120
// Remaining_Powells = Remaining_Powells ^ soldiers [ 1 ] ;
25610: LD_ADDR_EXP 64
25614: PUSH
25615: LD_EXP 64
25619: PUSH
25620: LD_LOC 6
25624: PUSH
25625: LD_INT 1
25627: ARRAY
25628: ADD
25629: ST_TO_ADDR
// soldiers = soldiers diff soldiers [ 1 ] ;
25630: LD_ADDR_LOC 6
25634: PUSH
25635: LD_LOC 6
25639: PUSH
25640: LD_LOC 6
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: DIFF
25649: ST_TO_ADDR
// end ; if UnitsInside ( AmB2 ) = 0 then
25650: LD_INT 90
25652: PPUSH
25653: CALL_OW 313
25657: PUSH
25658: LD_INT 0
25660: EQUAL
25661: IFFALSE 25719
// begin ComEnterUnit ( soldiers [ 2 ] , AmB2 ) ;
25663: LD_LOC 6
25667: PUSH
25668: LD_INT 2
25670: ARRAY
25671: PPUSH
25672: LD_INT 90
25674: PPUSH
25675: CALL_OW 120
// Remaining_Powells = Remaining_Powells ^ soldiers [ 2 ] ;
25679: LD_ADDR_EXP 64
25683: PUSH
25684: LD_EXP 64
25688: PUSH
25689: LD_LOC 6
25693: PUSH
25694: LD_INT 2
25696: ARRAY
25697: ADD
25698: ST_TO_ADDR
// soldiers = soldiers diff soldiers [ 2 ] ;
25699: LD_ADDR_LOC 6
25703: PUSH
25704: LD_LOC 6
25708: PUSH
25709: LD_LOC 6
25713: PUSH
25714: LD_INT 2
25716: ARRAY
25717: DIFF
25718: ST_TO_ADDR
// end ; for Un in soldiers do
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_LOC 6
25728: PUSH
25729: FOR_IN
25730: IFFALSE 25762
// begin Remaining_Powells = Remaining_Powells ^ Un ;
25732: LD_ADDR_EXP 64
25736: PUSH
25737: LD_EXP 64
25741: PUSH
25742: LD_VAR 0 3
25746: ADD
25747: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
25748: LD_VAR 0 3
25752: PPUSH
25753: LD_INT 92
25755: PPUSH
25756: CALL_OW 120
// end ;
25760: GO 25729
25762: POP
25763: POP
// Am1_vehicles = Captured_vehicles ;
25764: LD_ADDR_EXP 59
25768: PUSH
25769: LD_EXP 60
25773: ST_TO_ADDR
// end ;
25774: LD_VAR 0 1
25778: RET
// export function SecondPowellsAttack ; var i , Un , Un1 , Initial_lives , InsideArm , Hex , JMM_Labs ; begin
25779: LD_INT 0
25781: PPUSH
25782: PPUSH
25783: PPUSH
25784: PPUSH
25785: PPUSH
25786: PPUSH
25787: PPUSH
25788: PPUSH
// soldiers = [ ] ;
25789: LD_ADDR_LOC 6
25793: PUSH
25794: EMPTY
25795: ST_TO_ADDR
// soldiers1 = [ ] ;
25796: LD_ADDR_LOC 7
25800: PUSH
25801: EMPTY
25802: ST_TO_ADDR
// if not ( Debug_Constant ) then
25803: LD_EXP 195
25807: NOT
25808: IFFALSE 26006
// begin while tick < 20 20$0 do
25810: LD_OWVAR 1
25814: PUSH
25815: LD_INT 42000
25817: LESS
25818: IFFALSE 25829
// Wait ( 0 0$1 ) ;
25820: LD_INT 35
25822: PPUSH
25823: CALL_OW 67
25827: GO 25810
// disable ( R1_attack ) ;
25829: LD_EXP 140
25833: DISABLE_MARKED
// R1_Attack_Continues = false ;
25834: LD_ADDR_EXP 196
25838: PUSH
25839: LD_INT 0
25841: ST_TO_ADDR
// while tick < 23 23$30 do
25842: LD_OWVAR 1
25846: PUSH
25847: LD_INT 49350
25849: LESS
25850: IFFALSE 25861
// Wait ( 0 0$1 ) ;
25852: LD_INT 35
25854: PPUSH
25855: CALL_OW 67
25859: GO 25842
// R1_Attacking_Units = GetMcUnits ( Russian1_att_id ) ;
25861: LD_ADDR_LOC 11
25865: PUSH
25866: LD_EXP 238
25870: PPUSH
25871: CALL_OW 389
25875: ST_TO_ADDR
// RemoveMcUnits ( Russian1_att_id , R1_Attacking_Units ) ;
25876: LD_EXP 238
25880: PPUSH
25881: LD_LOC 11
25885: PPUSH
25886: CALL_OW 391
// ComMoveXY ( R1_Attacking_Units , 93 , 173 ) ;
25890: LD_LOC 11
25894: PPUSH
25895: LD_INT 93
25897: PPUSH
25898: LD_INT 173
25900: PPUSH
25901: CALL_OW 111
// AddComHold ( R1_Attacking_Units ) ;
25905: LD_LOC 11
25909: PPUSH
25910: CALL_OW 200
// R1_Patroling_Units = GetMcUnits ( Russian1_patr_id ) ;
25914: LD_ADDR_LOC 12
25918: PUSH
25919: LD_EXP 240
25923: PPUSH
25924: CALL_OW 389
25928: ST_TO_ADDR
// RemoveMcUnits ( Russian1_patr_id , R1_Patroling_Units ) ;
25929: LD_EXP 240
25933: PPUSH
25934: LD_LOC 12
25938: PPUSH
25939: CALL_OW 391
// ComMoveXY ( R1_Patroling_Units , 93 , 173 ) ;
25943: LD_LOC 12
25947: PPUSH
25948: LD_INT 93
25950: PPUSH
25951: LD_INT 173
25953: PPUSH
25954: CALL_OW 111
// AddComHold ( R1_Patroling_Units ) ;
25958: LD_LOC 12
25962: PPUSH
25963: CALL_OW 200
// while tick < 24 24$0 do
25967: LD_OWVAR 1
25971: PUSH
25972: LD_INT 50400
25974: LESS
25975: IFFALSE 25986
// Wait ( 0 0$1 ) ;
25977: LD_INT 35
25979: PPUSH
25980: CALL_OW 67
25984: GO 25967
// SetAttitude ( russians1 , americans , att_friend , true ) ;
25986: LD_EXP 179
25990: PPUSH
25991: LD_EXP 176
25995: PPUSH
25996: LD_INT 1
25998: PPUSH
25999: LD_INT 1
26001: PPUSH
26002: CALL_OW 80
// end ; disable ( Not_Ingame_Run_over ) ;
26006: LD_EXP 157
26010: DISABLE_MARKED
// if Remaining_Powells > 8 then
26011: LD_EXP 64
26015: PUSH
26016: LD_INT 8
26018: GREATER
26019: IFFALSE 26074
// begin Remaining_Powells = Remaining_Powells diff Driver ;
26021: LD_ADDR_EXP 64
26025: PUSH
26026: LD_EXP 64
26030: PUSH
26031: LD_LOC 9
26035: DIFF
26036: ST_TO_ADDR
// SetSkill ( Driver , skill_mechanical , The_original_mechanical_Skill + GetSkill ( Driver , skill_mechanical ) - 5 ) ;
26037: LD_LOC 9
26041: PPUSH
26042: LD_INT 3
26044: PPUSH
26045: LD_LOC 13
26049: PUSH
26050: LD_LOC 9
26054: PPUSH
26055: LD_INT 3
26057: PPUSH
26058: CALL_OW 259
26062: PLUS
26063: PUSH
26064: LD_INT 5
26066: MINUS
26067: PPUSH
26068: CALL_OW 237
// end else
26072: GO 26082
// Driver = 0 ;
26074: LD_ADDR_LOC 9
26078: PUSH
26079: LD_INT 0
26081: ST_TO_ADDR
// for i = 1 to 4 do
26082: LD_ADDR_VAR 0 2
26086: PUSH
26087: DOUBLE
26088: LD_INT 1
26090: DEC
26091: ST_TO_ADDR
26092: LD_INT 4
26094: PUSH
26095: FOR_TO
26096: IFFALSE 26221
// begin Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
26098: LD_ADDR_VAR 0 3
26102: PUSH
26103: LD_EXP 64
26107: PPUSH
26108: LD_INT 0
26110: PPUSH
26111: CALL 18316 0 2
26115: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
26116: LD_ADDR_EXP 64
26120: PUSH
26121: LD_EXP 64
26125: PUSH
26126: LD_VAR 0 3
26130: DIFF
26131: ST_TO_ADDR
// soldiers = soldiers ^ Un ;
26132: LD_ADDR_LOC 6
26136: PUSH
26137: LD_LOC 6
26141: PUSH
26142: LD_VAR 0 3
26146: ADD
26147: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
26148: LD_VAR 0 3
26152: PPUSH
26153: CALL_OW 257
26157: PUSH
26158: LD_INT 1
26160: NONEQUAL
26161: IFFALSE 26204
// begin ComEnterUnit ( Un , AmArm ) ;
26163: LD_VAR 0 3
26167: PPUSH
26168: LD_INT 92
26170: PPUSH
26171: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26175: LD_VAR 0 3
26179: PPUSH
26180: LD_INT 1
26182: PPUSH
26183: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
26187: LD_VAR 0 3
26191: PPUSH
26192: LD_INT 45
26194: PPUSH
26195: LD_INT 64
26197: PPUSH
26198: CALL_OW 171
// end else
26202: GO 26219
// ComMoveXY ( Un , 45 , 64 ) ;
26204: LD_VAR 0 3
26208: PPUSH
26209: LD_INT 45
26211: PPUSH
26212: LD_INT 64
26214: PPUSH
26215: CALL_OW 111
// end ;
26219: GO 26095
26221: POP
26222: POP
// WaitTask ( soldiers , 1 ) ;
26223: LD_LOC 6
26227: PPUSH
26228: LD_INT 1
26230: PPUSH
26231: CALL 17888 0 2
// for i = 1 to 4 do
26235: LD_ADDR_VAR 0 2
26239: PUSH
26240: DOUBLE
26241: LD_INT 1
26243: DEC
26244: ST_TO_ADDR
26245: LD_INT 4
26247: PUSH
26248: FOR_TO
26249: IFFALSE 26414
// begin if ( ( i = 1 ) or ( i = 2 ) ) then
26251: LD_VAR 0 2
26255: PUSH
26256: LD_INT 1
26258: EQUAL
26259: PUSH
26260: LD_VAR 0 2
26264: PUSH
26265: LD_INT 2
26267: EQUAL
26268: OR
26269: IFFALSE 26291
// Un = FindMinSumSkill ( Remaining_Powells , sex_male ) else
26271: LD_ADDR_VAR 0 3
26275: PUSH
26276: LD_EXP 64
26280: PPUSH
26281: LD_INT 1
26283: PPUSH
26284: CALL 18316 0 2
26288: ST_TO_ADDR
26289: GO 26309
// Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: LD_EXP 64
26300: PPUSH
26301: LD_INT 0
26303: PPUSH
26304: CALL 18316 0 2
26308: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
26309: LD_ADDR_EXP 64
26313: PUSH
26314: LD_EXP 64
26318: PUSH
26319: LD_VAR 0 3
26323: DIFF
26324: ST_TO_ADDR
// soldiers1 = soldiers1 ^ Un ;
26325: LD_ADDR_LOC 7
26329: PUSH
26330: LD_LOC 7
26334: PUSH
26335: LD_VAR 0 3
26339: ADD
26340: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 257
26350: PUSH
26351: LD_INT 1
26353: NONEQUAL
26354: IFFALSE 26397
// begin ComEnterUnit ( Un , AmArm ) ;
26356: LD_VAR 0 3
26360: PPUSH
26361: LD_INT 92
26363: PPUSH
26364: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26368: LD_VAR 0 3
26372: PPUSH
26373: LD_INT 1
26375: PPUSH
26376: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
26380: LD_VAR 0 3
26384: PPUSH
26385: LD_INT 45
26387: PPUSH
26388: LD_INT 64
26390: PPUSH
26391: CALL_OW 171
// end else
26395: GO 26412
// ComMoveXY ( Un , 45 , 64 ) ;
26397: LD_VAR 0 3
26401: PPUSH
26402: LD_INT 45
26404: PPUSH
26405: LD_INT 64
26407: PPUSH
26408: CALL_OW 111
// end ;
26412: GO 26248
26414: POP
26415: POP
// if Driver <> 0 then
26416: LD_LOC 9
26420: PUSH
26421: LD_INT 0
26423: NONEQUAL
26424: IFFALSE 26449
// Remaining_Powells = Insert ( Remaining_Powells , 1 , Driver ) ;
26426: LD_ADDR_EXP 64
26430: PUSH
26431: LD_EXP 64
26435: PPUSH
26436: LD_INT 1
26438: PPUSH
26439: LD_LOC 9
26443: PPUSH
26444: CALL_OW 2
26448: ST_TO_ADDR
// ingame_video = true ;
26449: LD_ADDR_OWVAR 52
26453: PUSH
26454: LD_INT 1
26456: ST_TO_ADDR
// interface_hidden = true ;
26457: LD_ADDR_OWVAR 54
26461: PUSH
26462: LD_INT 1
26464: ST_TO_ADDR
// CenterOnXY ( 48 , 63 ) ;
26465: LD_INT 48
26467: PPUSH
26468: LD_INT 63
26470: PPUSH
26471: CALL_OW 84
// JMM_Labs = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
26475: LD_ADDR_VAR 0 8
26479: PUSH
26480: LD_INT 22
26482: PUSH
26483: LD_EXP 176
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 30
26497: PUSH
26498: LD_INT 6
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 30
26507: PUSH
26508: LD_INT 8
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: LD_INT 7
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PPUSH
26535: CALL_OW 69
26539: ST_TO_ADDR
// ComExitBuilding ( JMM_Labs ) ;
26540: LD_VAR 0 8
26544: PPUSH
26545: CALL_OW 122
// WaitTask ( soldiers1 , 1 ) ;
26549: LD_LOC 7
26553: PPUSH
26554: LD_INT 1
26556: PPUSH
26557: CALL 17888 0 2
// if UnitsInside ( AmB1 ) = 0 then
26561: LD_INT 89
26563: PPUSH
26564: CALL_OW 313
26568: PUSH
26569: LD_INT 0
26571: EQUAL
26572: IFFALSE 26665
// begin Un = FindMaxSkill ( Remaining_Named ^ Remaining_Powells , skill_combat ) ;
26574: LD_ADDR_VAR 0 3
26578: PUSH
26579: LD_EXP 63
26583: PUSH
26584: LD_EXP 64
26588: ADD
26589: PPUSH
26590: LD_INT 1
26592: PPUSH
26593: CALL_OW 433
26597: ST_TO_ADDR
// if GetClass ( Un ) = class_soldier then
26598: LD_VAR 0 3
26602: PPUSH
26603: CALL_OW 257
26607: PUSH
26608: LD_INT 1
26610: EQUAL
26611: IFFALSE 26627
// ComEnterUnit ( Un , AmB1 ) else
26613: LD_VAR 0 3
26617: PPUSH
26618: LD_INT 89
26620: PPUSH
26621: CALL_OW 120
26625: GO 26663
// begin ComEnterUnit ( Un , AmArm ) ;
26627: LD_VAR 0 3
26631: PPUSH
26632: LD_INT 92
26634: PPUSH
26635: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26639: LD_VAR 0 3
26643: PPUSH
26644: LD_INT 1
26646: PPUSH
26647: CALL_OW 183
// AddComEnterUnit ( Un , AmB1 ) ;
26651: LD_VAR 0 3
26655: PPUSH
26656: LD_INT 89
26658: PPUSH
26659: CALL_OW 180
// end ; end else
26663: GO 26678
// Un = UnitsInside ( AmB1 ) ;
26665: LD_ADDR_VAR 0 3
26669: PUSH
26670: LD_INT 89
26672: PPUSH
26673: CALL_OW 313
26677: ST_TO_ADDR
// if UnitsInside ( AmB2 ) = 0 then
26678: LD_INT 90
26680: PPUSH
26681: CALL_OW 313
26685: PUSH
26686: LD_INT 0
26688: EQUAL
26689: IFFALSE 26788
// begin Un1 = FindMaxSkill ( ( Remaining_Named ^ Remaining_Powells ) diff Un , skill_combat ) ;
26691: LD_ADDR_VAR 0 4
26695: PUSH
26696: LD_EXP 63
26700: PUSH
26701: LD_EXP 64
26705: ADD
26706: PUSH
26707: LD_VAR 0 3
26711: DIFF
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: CALL_OW 433
26720: ST_TO_ADDR
// if GetClass ( Un1 ) = class_soldier then
26721: LD_VAR 0 4
26725: PPUSH
26726: CALL_OW 257
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: IFFALSE 26750
// ComEnterUnit ( Un1 , AmB2 ) else
26736: LD_VAR 0 4
26740: PPUSH
26741: LD_INT 90
26743: PPUSH
26744: CALL_OW 120
26748: GO 26786
// begin ComEnterUnit ( Un1 , AmArm ) ;
26750: LD_VAR 0 4
26754: PPUSH
26755: LD_INT 92
26757: PPUSH
26758: CALL_OW 120
// AddComChangeProfession ( Un1 , class_soldier ) ;
26762: LD_VAR 0 4
26766: PPUSH
26767: LD_INT 1
26769: PPUSH
26770: CALL_OW 183
// AddComEnterUnit ( Un1 , AmB2 ) ;
26774: LD_VAR 0 4
26778: PPUSH
26779: LD_INT 90
26781: PPUSH
26782: CALL_OW 180
// end ; end else
26786: GO 26801
// Un1 = UnitsInside ( AmB2 ) ;
26788: LD_ADDR_VAR 0 4
26792: PUSH
26793: LD_INT 90
26795: PPUSH
26796: CALL_OW 313
26800: ST_TO_ADDR
// ComEnterUnit ( Remaining_Powells diff ( Un ^ Un1 ) , AmArm ) ;
26801: LD_EXP 64
26805: PUSH
26806: LD_VAR 0 3
26810: PUSH
26811: LD_VAR 0 4
26815: ADD
26816: DIFF
26817: PPUSH
26818: LD_INT 92
26820: PPUSH
26821: CALL_OW 120
// AddComChangeProfession ( Remaining_Powells diff ( Un ^ Un1 ) , class_soldier ) ;
26825: LD_EXP 64
26829: PUSH
26830: LD_VAR 0 3
26834: PUSH
26835: LD_VAR 0 4
26839: ADD
26840: DIFF
26841: PPUSH
26842: LD_INT 1
26844: PPUSH
26845: CALL_OW 183
// game_speed = 4 ;
26849: LD_ADDR_OWVAR 65
26853: PUSH
26854: LD_INT 4
26856: ST_TO_ADDR
// Say ( Powell , D5-Pow-1 ) ;
26857: LD_EXP 2
26861: PPUSH
26862: LD_STRING D5-Pow-1
26864: PPUSH
26865: CALL_OW 88
// Say ( Soldiers1 [ 1 ] , D5-Sol2-1 ) ;
26869: LD_LOC 7
26873: PUSH
26874: LD_INT 1
26876: ARRAY
26877: PPUSH
26878: LD_STRING D5-Sol2-1
26880: PPUSH
26881: CALL_OW 88
// Say ( Powell , D5-Pow-2 ) ;
26885: LD_EXP 2
26889: PPUSH
26890: LD_STRING D5-Pow-2
26892: PPUSH
26893: CALL_OW 88
// Say ( Soldiers1 [ 2 ] , D5-Sol2-2 ) ;
26897: LD_LOC 7
26901: PUSH
26902: LD_INT 2
26904: ARRAY
26905: PPUSH
26906: LD_STRING D5-Sol2-2
26908: PPUSH
26909: CALL_OW 88
// Say ( Powell , D5-Pow-3 ) ;
26913: LD_EXP 2
26917: PPUSH
26918: LD_STRING D5-Pow-3
26920: PPUSH
26921: CALL_OW 88
// disable ( First_JMM_Task ) ;
26925: LD_EXP 137
26929: DISABLE_MARKED
// EnableVideoExclamations ;
26930: CALL_OW 498
// for i = 1 to 4 do
26934: LD_ADDR_VAR 0 2
26938: PUSH
26939: DOUBLE
26940: LD_INT 1
26942: DEC
26943: ST_TO_ADDR
26944: LD_INT 4
26946: PUSH
26947: FOR_TO
26948: IFFALSE 26999
// begin ComEnterUnit ( soldiers [ i ] , Am1_vehicles [ i ] ) ;
26950: LD_LOC 6
26954: PUSH
26955: LD_VAR 0 2
26959: ARRAY
26960: PPUSH
26961: LD_EXP 59
26965: PUSH
26966: LD_VAR 0 2
26970: ARRAY
26971: PPUSH
26972: CALL_OW 120
// AddComMoveXY ( soldiers [ i ] , 68 , 64 ) ;
26976: LD_LOC 6
26980: PUSH
26981: LD_VAR 0 2
26985: ARRAY
26986: PPUSH
26987: LD_INT 68
26989: PPUSH
26990: LD_INT 64
26992: PPUSH
26993: CALL_OW 171
// end ;
26997: GO 26947
26999: POP
27000: POP
// for i = 1 to 4 do
27001: LD_ADDR_VAR 0 2
27005: PUSH
27006: DOUBLE
27007: LD_INT 1
27009: DEC
27010: ST_TO_ADDR
27011: LD_INT 4
27013: PUSH
27014: FOR_TO
27015: IFFALSE 27040
// begin ComMoveXY ( soldiers1 [ i ] , 68 , 64 ) ;
27017: LD_LOC 7
27021: PUSH
27022: LD_VAR 0 2
27026: ARRAY
27027: PPUSH
27028: LD_INT 68
27030: PPUSH
27031: LD_INT 64
27033: PPUSH
27034: CALL_OW 111
// end ;
27038: GO 27014
27040: POP
27041: POP
// enable ( Center_on_fight ) ;
27042: LD_EXP 143
27046: ENABLE_MARKED
// WaitPos ( 68 , 64 , 8 , Am1_vehicles ^ soldiers1 ^ soldiers , 1 ) ;
27047: LD_INT 68
27049: PPUSH
27050: LD_INT 64
27052: PPUSH
27053: LD_INT 8
27055: PPUSH
27056: LD_EXP 59
27060: PUSH
27061: LD_LOC 7
27065: ADD
27066: PUSH
27067: LD_LOC 6
27071: ADD
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: CALL 17986 0 5
// ComAgressiveMove ( Am1_vehicles ^ soldiers1 ^ soldiers , 76 , 22 ) ;
27080: LD_EXP 59
27084: PUSH
27085: LD_LOC 7
27089: ADD
27090: PUSH
27091: LD_LOC 6
27095: ADD
27096: PPUSH
27097: LD_INT 76
27099: PPUSH
27100: LD_INT 22
27102: PPUSH
27103: CALL_OW 114
// Initial_lives = GetLives ( Am1_vehicles ^ soldiers1 ^ soldiers ) ;
27107: LD_ADDR_VAR 0 5
27111: PUSH
27112: LD_EXP 59
27116: PUSH
27117: LD_LOC 7
27121: ADD
27122: PUSH
27123: LD_LOC 6
27127: ADD
27128: PPUSH
27129: CALL_OW 256
27133: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
27134: LD_INT 35
27136: PPUSH
27137: CALL_OW 67
// until Initial_lives > GetLives ( Am1_vehicles ^ soldiers1 ^ soldiers ) + 1 ;
27141: LD_VAR 0 5
27145: PUSH
27146: LD_EXP 59
27150: PUSH
27151: LD_LOC 7
27155: ADD
27156: PUSH
27157: LD_LOC 6
27161: ADD
27162: PPUSH
27163: CALL_OW 256
27167: PUSH
27168: LD_INT 1
27170: PLUS
27171: GREATER
27172: IFFALSE 27134
// Say ( Powell , D5a-Pow-1 ) ;
27174: LD_EXP 2
27178: PPUSH
27179: LD_STRING D5a-Pow-1
27181: PPUSH
27182: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
27186: LD_EXP 2
27190: PPUSH
27191: LD_STRING D5a-Pow-1a
27193: PPUSH
27194: CALL_OW 88
// Wait ( 0 0$1 ) ;
27198: LD_INT 35
27200: PPUSH
27201: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
27205: LD_EXP 2
27209: PPUSH
27210: LD_STRING D5a-Pow-1b
27212: PPUSH
27213: CALL_OW 88
// Wait ( 0 0$1 ) ;
27217: LD_INT 35
27219: PPUSH
27220: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
27224: LD_EXP 2
27228: PPUSH
27229: LD_STRING D5a-Pow-1c
27231: PPUSH
27232: CALL_OW 88
// Say ( Powell , D5a-Pow-1d ) ;
27236: LD_EXP 2
27240: PPUSH
27241: LD_STRING D5a-Pow-1d
27243: PPUSH
27244: CALL_OW 88
// while ( GetLives ( soldiers ^ soldiers1 ) > 0 ) do
27248: LD_LOC 6
27252: PUSH
27253: LD_LOC 7
27257: ADD
27258: PPUSH
27259: CALL_OW 256
27263: PUSH
27264: LD_INT 0
27266: GREATER
27267: IFFALSE 27278
// Wait ( 0 0$0.5 ) ;
27269: LD_INT 18
27271: PPUSH
27272: CALL_OW 67
27276: GO 27248
// DisableVideoExclamations ;
27278: CALL_OW 499
// disable ( Center_on_fight ) ;
27282: LD_EXP 143
27286: DISABLE_MARKED
// enable ( Great_Ingame_Video ) ;
27287: LD_EXP 139
27291: ENABLE_MARKED
// end ;
27292: LD_VAR 0 1
27296: RET
// every 0 0$1 marked 3 do var Units_Outside , All_A1 , Sold , Arabian1 , Arabian2 , Arabian3 , Arabian_Buildings , Alive , Un , Remaining_named_males , Remaining_named_females , Uns , i , Hex ;
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
27315: PPUSH
// begin Uns = [ ] ;
27316: LD_ADDR_VAR 0 12
27320: PUSH
27321: EMPTY
27322: ST_TO_ADDR
// Remaining_named_males = UnitFilter ( Remaining_named , [ f_sex , sex_male ] ) ;
27323: LD_ADDR_VAR 0 10
27327: PUSH
27328: LD_EXP 63
27332: PPUSH
27333: LD_INT 26
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PPUSH
27343: CALL_OW 72
27347: ST_TO_ADDR
// Remaining_named_females = UnitFilter ( Remaining_named , [ f_sex , sex_female ] ) ;
27348: LD_ADDR_VAR 0 11
27352: PUSH
27353: LD_EXP 63
27357: PPUSH
27358: LD_INT 26
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PPUSH
27368: CALL_OW 72
27372: ST_TO_ADDR
// for i = Remaining_named_males + 1 to 3 do
27373: LD_ADDR_VAR 0 13
27377: PUSH
27378: DOUBLE
27379: LD_VAR 0 10
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: DEC
27388: ST_TO_ADDR
27389: LD_INT 3
27391: PUSH
27392: FOR_TO
27393: IFFALSE 27443
// if ( Remaining_named_females >= ( i - Remaining_named_males ) ) then
27395: LD_VAR 0 11
27399: PUSH
27400: LD_VAR 0 13
27404: PUSH
27405: LD_VAR 0 10
27409: MINUS
27410: GREATEREQUAL
27411: IFFALSE 27441
// Uns = Uns ^ Remaining_named_females [ i - Remaining_named_males ] ;
27413: LD_ADDR_VAR 0 12
27417: PUSH
27418: LD_VAR 0 12
27422: PUSH
27423: LD_VAR 0 11
27427: PUSH
27428: LD_VAR 0 13
27432: PUSH
27433: LD_VAR 0 10
27437: MINUS
27438: ARRAY
27439: ADD
27440: ST_TO_ADDR
27441: GO 27392
27443: POP
27444: POP
// Remaining_named_males = Remaining_named_males ^ Uns ;
27445: LD_ADDR_VAR 0 10
27449: PUSH
27450: LD_VAR 0 10
27454: PUSH
27455: LD_VAR 0 12
27459: ADD
27460: ST_TO_ADDR
// Sold = [ ] ;
27461: LD_ADDR_VAR 0 3
27465: PUSH
27466: EMPTY
27467: ST_TO_ADDR
// for i = 1 to 3 do
27468: LD_ADDR_VAR 0 13
27472: PUSH
27473: DOUBLE
27474: LD_INT 1
27476: DEC
27477: ST_TO_ADDR
27478: LD_INT 3
27480: PUSH
27481: FOR_TO
27482: IFFALSE 27600
// begin Un = FindMaxSumSkill ( Remaining_Powells diff Sold , sex_male ) ;
27484: LD_ADDR_VAR 0 9
27488: PUSH
27489: LD_EXP 64
27493: PUSH
27494: LD_VAR 0 3
27498: DIFF
27499: PPUSH
27500: LD_INT 1
27502: PPUSH
27503: CALL 18100 0 2
27507: ST_TO_ADDR
// if Un = 0 then
27508: LD_VAR 0 9
27512: PUSH
27513: LD_INT 0
27515: EQUAL
27516: IFFALSE 27542
// Un = FindMaxSumSkill ( Remaining_named_males diff Sold , sex_male ) ;
27518: LD_ADDR_VAR 0 9
27522: PUSH
27523: LD_VAR 0 10
27527: PUSH
27528: LD_VAR 0 3
27532: DIFF
27533: PPUSH
27534: LD_INT 1
27536: PPUSH
27537: CALL 18100 0 2
27541: ST_TO_ADDR
// if Un = 0 then
27542: LD_VAR 0 9
27546: PUSH
27547: LD_INT 0
27549: EQUAL
27550: IFFALSE 27582
// Un = FindMaxSumSkill ( ( Remaining_Powells ^ Remaining_named_males ) diff Sold , sex_male ) ;
27552: LD_ADDR_VAR 0 9
27556: PUSH
27557: LD_EXP 64
27561: PUSH
27562: LD_VAR 0 10
27566: ADD
27567: PUSH
27568: LD_VAR 0 3
27572: DIFF
27573: PPUSH
27574: LD_INT 1
27576: PPUSH
27577: CALL 18100 0 2
27581: ST_TO_ADDR
// Sold = Sold ^ Un ;
27582: LD_ADDR_VAR 0 3
27586: PUSH
27587: LD_VAR 0 3
27591: PUSH
27592: LD_VAR 0 9
27596: ADD
27597: ST_TO_ADDR
// end ;
27598: GO 27481
27600: POP
27601: POP
// Uns = UnitFilter ( Arabian_soldiers , [ f_sex , sex_male ] ) ;
27602: LD_ADDR_VAR 0 12
27606: PUSH
27607: LD_EXP 80
27611: PPUSH
27612: LD_INT 26
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PPUSH
27622: CALL_OW 72
27626: ST_TO_ADDR
// Arabian1 = Uns [ 1 ] ;
27627: LD_ADDR_VAR 0 4
27631: PUSH
27632: LD_VAR 0 12
27636: PUSH
27637: LD_INT 1
27639: ARRAY
27640: ST_TO_ADDR
// Arabian2 = Uns [ 2 ] ;
27641: LD_ADDR_VAR 0 5
27645: PUSH
27646: LD_VAR 0 12
27650: PUSH
27651: LD_INT 2
27653: ARRAY
27654: ST_TO_ADDR
// Arabian3 = Uns [ 3 ] ;
27655: LD_ADDR_VAR 0 6
27659: PUSH
27660: LD_VAR 0 12
27664: PUSH
27665: LD_INT 3
27667: ARRAY
27668: ST_TO_ADDR
// if GetLives ( ArT1 ) > 0 and GetLives ( ArT1 ) < 500 then
27669: LD_INT 107
27671: PPUSH
27672: CALL_OW 256
27676: PUSH
27677: LD_INT 0
27679: GREATER
27680: PUSH
27681: LD_INT 107
27683: PPUSH
27684: CALL_OW 256
27688: PUSH
27689: LD_INT 500
27691: LESS
27692: AND
27693: IFFALSE 27705
// SetLives ( ArT1 , 500 ) ;
27695: LD_INT 107
27697: PPUSH
27698: LD_INT 500
27700: PPUSH
27701: CALL_OW 234
// RemoveMcUnits ( Arabian_def_id , Arabian_soldiers ^ ArT1 ) ;
27705: LD_EXP 235
27709: PPUSH
27710: LD_EXP 80
27714: PUSH
27715: LD_INT 107
27717: ADD
27718: PPUSH
27719: CALL_OW 391
// ComMoveXY ( Arabian_soldiers , 52 , 15 ) ;
27723: LD_EXP 80
27727: PPUSH
27728: LD_INT 52
27730: PPUSH
27731: LD_INT 15
27733: PPUSH
27734: CALL_OW 111
// AddComHold ( Arabian_soldiers ) ;
27738: LD_EXP 80
27742: PPUSH
27743: CALL_OW 200
// Wait ( 0 0$0.5 ) ;
27747: LD_INT 18
27749: PPUSH
27750: CALL_OW 67
// ComEnterUnit ( Arabian1 , ArT1 ) ;
27754: LD_VAR 0 4
27758: PPUSH
27759: LD_INT 107
27761: PPUSH
27762: CALL_OW 120
// ComMoveXY ( Arabian2 , 71 , 18 ) ;
27766: LD_VAR 0 5
27770: PPUSH
27771: LD_INT 71
27773: PPUSH
27774: LD_INT 18
27776: PPUSH
27777: CALL_OW 111
// AddComHold ( Arabian2 ) ;
27781: LD_VAR 0 5
27785: PPUSH
27786: CALL_OW 200
// ComMoveXY ( Arabian_mechanics [ 1 ] , 83 , 15 ) ;
27790: LD_EXP 83
27794: PUSH
27795: LD_INT 1
27797: ARRAY
27798: PPUSH
27799: LD_INT 83
27801: PPUSH
27802: LD_INT 15
27804: PPUSH
27805: CALL_OW 111
// AddComHold ( Arabian_mechanics [ 1 ] ) ;
27809: LD_EXP 83
27813: PUSH
27814: LD_INT 1
27816: ARRAY
27817: PPUSH
27818: CALL_OW 200
// ComMoveXY ( Arabian3 , 85 , 26 ) ;
27822: LD_VAR 0 6
27826: PPUSH
27827: LD_INT 85
27829: PPUSH
27830: LD_INT 26
27832: PPUSH
27833: CALL_OW 111
// AddComHold ( Arabian3 ) ;
27837: LD_VAR 0 6
27841: PPUSH
27842: CALL_OW 200
// RemoveMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
27846: LD_EXP 236
27850: PPUSH
27851: LD_EXP 81
27855: PPUSH
27856: CALL_OW 391
// ComEnterUnit ( Arabian_Engineers , GetUnitNumber ( 53 , 7 ) ) ;
27860: LD_EXP 81
27864: PPUSH
27865: LD_INT 53
27867: PPUSH
27868: LD_INT 7
27870: PPUSH
27871: CALL_OW 438
27875: PPUSH
27876: CALL_OW 120
// CenterOnXY ( 60 , 62 ) ;
27880: LD_INT 60
27882: PPUSH
27883: LD_INT 62
27885: PPUSH
27886: CALL_OW 84
// Say ( Sold [ 3 ] , D6-Sol3-1 ) ;
27890: LD_VAR 0 3
27894: PUSH
27895: LD_INT 3
27897: ARRAY
27898: PPUSH
27899: LD_STRING D6-Sol3-1
27901: PPUSH
27902: CALL_OW 88
// ComMoveXY ( ArBomb1 , 71 , 61 ) ;
27906: LD_INT 139
27908: PPUSH
27909: LD_INT 71
27911: PPUSH
27912: LD_INT 61
27914: PPUSH
27915: CALL_OW 111
// ComMoveXY ( ArBomb2 , 74 , 61 ) ;
27919: LD_INT 138
27921: PPUSH
27922: LD_INT 74
27924: PPUSH
27925: LD_INT 61
27927: PPUSH
27928: CALL_OW 111
// Say ( Powell , D6-Pow-1 ) ;
27932: LD_EXP 2
27936: PPUSH
27937: LD_STRING D6-Pow-1
27939: PPUSH
27940: CALL_OW 88
// WaitPos ( 71 , 61 , 6 , [ ArBomb1 , ArBomb2 ] , 1 ) ;
27944: LD_INT 71
27946: PPUSH
27947: LD_INT 61
27949: PPUSH
27950: LD_INT 6
27952: PPUSH
27953: LD_INT 139
27955: PUSH
27956: LD_INT 138
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PPUSH
27963: LD_INT 1
27965: PPUSH
27966: CALL 17986 0 5
// Say ( Sold [ 1 ] , D6-Sol3-2 ) ;
27970: LD_VAR 0 3
27974: PUSH
27975: LD_INT 1
27977: ARRAY
27978: PPUSH
27979: LD_STRING D6-Sol3-2
27981: PPUSH
27982: CALL_OW 88
// ComMoveXY ( ArBomb1 , 50 , 56 ) ;
27986: LD_INT 139
27988: PPUSH
27989: LD_INT 50
27991: PPUSH
27992: LD_INT 56
27994: PPUSH
27995: CALL_OW 111
// AddComMoveXY ( ArBomb1 , 46 , 52 ) ;
27999: LD_INT 139
28001: PPUSH
28002: LD_INT 46
28004: PPUSH
28005: LD_INT 52
28007: PPUSH
28008: CALL_OW 171
// PriorityAttack ( americans1 , ArBomb1 ) ;
28012: LD_EXP 177
28016: PPUSH
28017: LD_INT 139
28019: PPUSH
28020: CALL_OW 470
// ComMoveXY ( ArBomb2 , 48 , 60 ) ;
28024: LD_INT 138
28026: PPUSH
28027: LD_INT 48
28029: PPUSH
28030: LD_INT 60
28032: PPUSH
28033: CALL_OW 111
// AddComMoveXY ( ArBomb2 , 45 , 57 ) ;
28037: LD_INT 138
28039: PPUSH
28040: LD_INT 45
28042: PPUSH
28043: LD_INT 57
28045: PPUSH
28046: CALL_OW 171
// AddComAttackUnit ( ArBomb2 , AmFact ) ;
28050: LD_INT 138
28052: PPUSH
28053: LD_INT 85
28055: PPUSH
28056: CALL_OW 175
// DoNotAttack ( americans1 , ArBomb2 ) ;
28060: LD_EXP 177
28064: PPUSH
28065: LD_INT 138
28067: PPUSH
28068: CALL_OW 471
// ComMoveXY ( Powell , 58 , 68 ) ;
28072: LD_EXP 2
28076: PPUSH
28077: LD_INT 58
28079: PPUSH
28080: LD_INT 68
28082: PPUSH
28083: CALL_OW 111
// AddComHold ( Powell ) ;
28087: LD_EXP 2
28091: PPUSH
28092: CALL_OW 200
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
28096: LD_INT 92
28098: PPUSH
28099: CALL_OW 313
28103: PPUSH
28104: CALL_OW 122
// ComExitBuilding ( UnitsInside ( AmFact ) ) ;
28108: LD_INT 85
28110: PPUSH
28111: CALL_OW 313
28115: PPUSH
28116: CALL_OW 122
// Wait ( 1 ) ;
28120: LD_INT 1
28122: PPUSH
28123: CALL_OW 67
// while UnitsInside ( AmArm ) <> 0 do
28127: LD_INT 92
28129: PPUSH
28130: CALL_OW 313
28134: PUSH
28135: LD_INT 0
28137: NONEQUAL
28138: IFFALSE 28149
// Wait ( 2 ) ;
28140: LD_INT 2
28142: PPUSH
28143: CALL_OW 67
28147: GO 28127
// Units_Outside = FilterUnitsInArea ( Am_Base , [ [ f_side , americans1 ] , [ f_type , unit_human ] ] ) diff ( soldiers1 ^ soldiers ^ Powell ) ;
28149: LD_ADDR_VAR 0 1
28153: PUSH
28154: LD_INT 1
28156: PPUSH
28157: LD_INT 22
28159: PUSH
28160: LD_EXP 177
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 21
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PPUSH
28183: CALL_OW 70
28187: PUSH
28188: LD_LOC 7
28192: PUSH
28193: LD_LOC 6
28197: ADD
28198: PUSH
28199: LD_EXP 2
28203: ADD
28204: DIFF
28205: ST_TO_ADDR
// for Un in Units_Outside do
28206: LD_ADDR_VAR 0 9
28210: PUSH
28211: LD_VAR 0 1
28215: PUSH
28216: FOR_IN
28217: IFFALSE 28279
// begin Hex = RandHexXYR ( 56 , 69 , 2 , false ) ;
28219: LD_ADDR_VAR 0 14
28223: PUSH
28224: LD_INT 56
28226: PPUSH
28227: LD_INT 69
28229: PPUSH
28230: LD_INT 2
28232: PPUSH
28233: LD_INT 0
28235: PPUSH
28236: CALL_OW 17
28240: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
28241: LD_VAR 0 9
28245: PPUSH
28246: LD_VAR 0 14
28250: PUSH
28251: LD_INT 1
28253: ARRAY
28254: PPUSH
28255: LD_VAR 0 14
28259: PUSH
28260: LD_INT 2
28262: ARRAY
28263: PPUSH
28264: CALL_OW 111
// AddComHold ( Un ) ;
28268: LD_VAR 0 9
28272: PPUSH
28273: CALL_OW 200
// end ;
28277: GO 28216
28279: POP
28280: POP
// enable ( Talk_Bomba ) ;
28281: LD_EXP 142
28285: ENABLE_MARKED
// while ( IsOk ( ArBomb1 ) or IsOk ( ArBomb2 ) ) do
28286: LD_INT 139
28288: PPUSH
28289: CALL_OW 302
28293: PUSH
28294: LD_INT 138
28296: PPUSH
28297: CALL_OW 302
28301: OR
28302: IFFALSE 28388
// begin if ( GetDistUnitXY ( ArBomb1 , 41 , 54 ) <= 7 ) and ( GetLives ( ArBomb1 ) > 250 ) then
28304: LD_INT 139
28306: PPUSH
28307: LD_INT 41
28309: PPUSH
28310: LD_INT 54
28312: PPUSH
28313: CALL_OW 297
28317: PUSH
28318: LD_INT 7
28320: LESSEQUAL
28321: PUSH
28322: LD_INT 139
28324: PPUSH
28325: CALL_OW 256
28329: PUSH
28330: LD_INT 250
28332: GREATER
28333: AND
28334: IFFALSE 28346
// SetLives ( ArBomb1 , 200 ) ;
28336: LD_INT 139
28338: PPUSH
28339: LD_INT 200
28341: PPUSH
28342: CALL_OW 234
// if not ( IsOk ( ArBomb2 ) ) then
28346: LD_INT 138
28348: PPUSH
28349: CALL_OW 302
28353: NOT
28354: IFFALSE 28379
// if GetLives ( AmFact ) > 0 then
28356: LD_INT 85
28358: PPUSH
28359: CALL_OW 256
28363: PUSH
28364: LD_INT 0
28366: GREATER
28367: IFFALSE 28379
// SetLives ( AmFact , 0 ) ;
28369: LD_INT 85
28371: PPUSH
28372: LD_INT 0
28374: PPUSH
28375: CALL_OW 234
// Wait ( 4 ) ;
28379: LD_INT 4
28381: PPUSH
28382: CALL_OW 67
// end ;
28386: GO 28286
// Wait ( 0 0$2 ) ;
28388: LD_INT 70
28390: PPUSH
28391: CALL_OW 67
// Say ( Powell , D6a-Pow-1 ) ;
28395: LD_EXP 2
28399: PPUSH
28400: LD_STRING D6a-Pow-1
28402: PPUSH
28403: CALL_OW 88
// Say ( Sold [ 1 ] , D6a-Sol3-1 ) ;
28407: LD_VAR 0 3
28411: PUSH
28412: LD_INT 1
28414: ARRAY
28415: PPUSH
28416: LD_STRING D6a-Sol3-1
28418: PPUSH
28419: CALL_OW 88
// Say ( Powell , D6a-Pow-2 ) ;
28423: LD_EXP 2
28427: PPUSH
28428: LD_STRING D6a-Pow-2
28430: PPUSH
28431: CALL_OW 88
// Say ( Sold [ 1 ] , D6a-Sol3-2 ) ;
28435: LD_VAR 0 3
28439: PUSH
28440: LD_INT 1
28442: ARRAY
28443: PPUSH
28444: LD_STRING D6a-Sol3-2
28446: PPUSH
28447: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
28451: LD_EXP 2
28455: PPUSH
28456: LD_STRING D6a-Pow-3
28458: PPUSH
28459: CALL_OW 88
// Center_To_Powell = true ;
28463: LD_ADDR_EXP 194
28467: PUSH
28468: LD_INT 1
28470: ST_TO_ADDR
// enable ( Protect_Powell ) ;
28471: LD_EXP 141
28475: ENABLE_MARKED
// ComEnterUnit ( Powell , Powell_vehicle ) ;
28476: LD_EXP 2
28480: PPUSH
28481: LD_EXP 192
28485: PPUSH
28486: CALL_OW 120
// AddComMoveXY ( Powell , 66 , 62 ) ;
28490: LD_EXP 2
28494: PPUSH
28495: LD_INT 66
28497: PPUSH
28498: LD_INT 62
28500: PPUSH
28501: CALL_OW 171
// AddComMoveXY ( Powell , 81 , 61 ) ;
28505: LD_EXP 2
28509: PPUSH
28510: LD_INT 81
28512: PPUSH
28513: LD_INT 61
28515: PPUSH
28516: CALL_OW 171
// AddComMoveXY ( Powell , 86 , 56 ) ;
28520: LD_EXP 2
28524: PPUSH
28525: LD_INT 86
28527: PPUSH
28528: LD_INT 56
28530: PPUSH
28531: CALL_OW 171
// AddComMoveXY ( Powell , 74 , 24 ) ;
28535: LD_EXP 2
28539: PPUSH
28540: LD_INT 74
28542: PPUSH
28543: LD_INT 24
28545: PPUSH
28546: CALL_OW 171
// while GetDistUnitXY ( Powell_vehicle , 74 , 24 ) > 12 do
28550: LD_EXP 192
28554: PPUSH
28555: LD_INT 74
28557: PPUSH
28558: LD_INT 24
28560: PPUSH
28561: CALL_OW 297
28565: PUSH
28566: LD_INT 12
28568: GREATER
28569: IFFALSE 28580
// Wait ( 0 0$0.1 ) ;
28571: LD_INT 4
28573: PPUSH
28574: CALL_OW 67
28578: GO 28550
// Say ( Powell , D6b-Pow-1 ) ;
28580: LD_EXP 2
28584: PPUSH
28585: LD_STRING D6b-Pow-1
28587: PPUSH
28588: CALL_OW 88
// game_speed = 3 ;
28592: LD_ADDR_OWVAR 65
28596: PUSH
28597: LD_INT 3
28599: ST_TO_ADDR
// while GetDistUnitXY ( Powell_vehicle , 74 , 24 ) > 5 do
28600: LD_EXP 192
28604: PPUSH
28605: LD_INT 74
28607: PPUSH
28608: LD_INT 24
28610: PPUSH
28611: CALL_OW 297
28615: PUSH
28616: LD_INT 5
28618: GREATER
28619: IFFALSE 28630
// Wait ( 0 0$0.1 ) ;
28621: LD_INT 4
28623: PPUSH
28624: CALL_OW 67
28628: GO 28600
// SetLives ( Powell_vehicle , 251 ) ;
28630: LD_EXP 192
28634: PPUSH
28635: LD_INT 251
28637: PPUSH
28638: CALL_OW 234
// while IsInUnit ( Powell ) do
28642: LD_EXP 2
28646: PPUSH
28647: CALL_OW 310
28651: IFFALSE 28662
// Wait ( 2 ) ;
28653: LD_INT 2
28655: PPUSH
28656: CALL_OW 67
28660: GO 28642
// SetAttr ( Powell , attr_speed , 14 ) ;
28662: LD_EXP 2
28666: PPUSH
28667: LD_INT 2
28669: PPUSH
28670: LD_INT 14
28672: PPUSH
28673: CALL_OW 239
// ComEnterUnit ( Powell , PowBomb ) ;
28677: LD_EXP 2
28681: PPUSH
28682: LD_INT 137
28684: PPUSH
28685: CALL_OW 120
// Say ( Powell , D6b-Pow-1a ) ;
28689: LD_EXP 2
28693: PPUSH
28694: LD_STRING D6b-Pow-1a
28696: PPUSH
28697: CALL_OW 88
// repeat wait ( 2 ) ;
28701: LD_INT 2
28703: PPUSH
28704: CALL_OW 67
// until IsInUnit ( Powell ) ;
28708: LD_EXP 2
28712: PPUSH
28713: CALL_OW 310
28717: IFFALSE 28701
// AddComMoveXY ( Powell , 81 , 21 ) ;
28719: LD_EXP 2
28723: PPUSH
28724: LD_INT 81
28726: PPUSH
28727: LD_INT 21
28729: PPUSH
28730: CALL_OW 171
// AddComMoveXY ( Powell , 73 , 16 ) ;
28734: LD_EXP 2
28738: PPUSH
28739: LD_INT 73
28741: PPUSH
28742: LD_INT 16
28744: PPUSH
28745: CALL_OW 171
// AddComMoveXY ( Powell , 76 , 21 ) ;
28749: LD_EXP 2
28753: PPUSH
28754: LD_INT 76
28756: PPUSH
28757: LD_INT 21
28759: PPUSH
28760: CALL_OW 171
// AddComMoveXY ( Powell , 78 , 15 ) ;
28764: LD_EXP 2
28768: PPUSH
28769: LD_INT 78
28771: PPUSH
28772: LD_INT 15
28774: PPUSH
28775: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28779: LD_EXP 2
28783: PPUSH
28784: LD_STRING D6b-Pow-1b
28786: PPUSH
28787: CALL_OW 88
// ComMoveXY ( Arabian_soldiers , 48 , 14 ) ;
28791: LD_EXP 80
28795: PPUSH
28796: LD_INT 48
28798: PPUSH
28799: LD_INT 14
28801: PPUSH
28802: CALL_OW 111
// AddComHold ( Arabian_soldiers ) ;
28806: LD_EXP 80
28810: PPUSH
28811: CALL_OW 200
// ComEnterUnit ( Arabian_mechanics [ 1 ] , ArFact ) ;
28815: LD_EXP 83
28819: PUSH
28820: LD_INT 1
28822: ARRAY
28823: PPUSH
28824: LD_INT 117
28826: PPUSH
28827: CALL_OW 120
// ComMoveXY ( Arabian3 , 96 , 29 ) ;
28831: LD_VAR 0 6
28835: PPUSH
28836: LD_INT 96
28838: PPUSH
28839: LD_INT 29
28841: PPUSH
28842: CALL_OW 111
// async ;
28846: ASYNC
// Say ( Arabian1 , D6b-ArSol1-1 ) ;
28847: LD_VAR 0 4
28851: PPUSH
28852: LD_STRING D6b-ArSol1-1
28854: PPUSH
28855: CALL_OW 88
// wait ( 0 0$1 ) ;
28859: LD_INT 35
28861: PPUSH
28862: CALL_OW 67
// Say ( Arabian2 , D6b-ArSol2-1 ) ;
28866: LD_VAR 0 5
28870: PPUSH
28871: LD_STRING D6b-ArSol2-1
28873: PPUSH
28874: CALL_OW 88
// wait ( 0 0$0.5 ) ;
28878: LD_INT 18
28880: PPUSH
28881: CALL_OW 67
// sync ;
28885: SYNC
// Say ( Powell , D6b-Pow-2 ) ;
28886: LD_EXP 2
28890: PPUSH
28891: LD_STRING D6b-Pow-2
28893: PPUSH
28894: CALL_OW 88
// WaitTask ( Powell , 0.1 ) ;
28898: LD_EXP 2
28902: PPUSH
28903: LD_REAL  1.00000000000000E-0001
28906: PPUSH
28907: CALL 17888 0 2
// if IsInUnit ( Powell ) then
28911: LD_EXP 2
28915: PPUSH
28916: CALL_OW 310
28920: IFFALSE 28940
// WaitTask ( IsInUnit ( Powell ) , 0.1 ) ;
28922: LD_EXP 2
28926: PPUSH
28927: CALL_OW 310
28931: PPUSH
28932: LD_REAL  1.00000000000000E-0001
28935: PPUSH
28936: CALL 17888 0 2
// DialogueOn ;
28940: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28944: LD_EXP 2
28948: PPUSH
28949: LD_STRING D6b-Pow-2a
28951: PPUSH
28952: CALL_OW 88
// DialogueOff ;
28956: CALL_OW 7
// disable ( Protect_Powell ) ;
28960: LD_EXP 141
28964: DISABLE_MARKED
// ComAttackUnit ( IsInUnit ( Powell ) , ArRuFact ) ;
28965: LD_EXP 2
28969: PPUSH
28970: CALL_OW 310
28974: PPUSH
28975: LD_INT 105
28977: PPUSH
28978: CALL_OW 115
// placeseeing ( 78 , 12 , americans , - 8 ) ;
28982: LD_INT 78
28984: PPUSH
28985: LD_INT 12
28987: PPUSH
28988: LD_EXP 176
28992: PPUSH
28993: LD_INT 8
28995: NEG
28996: PPUSH
28997: CALL_OW 330
// while IsOk ( IsInUnit ( Powell ) ) do
29001: LD_EXP 2
29005: PPUSH
29006: CALL_OW 310
29010: PPUSH
29011: CALL_OW 302
29015: IFFALSE 29026
// Wait ( 0 0$0.5 ) ;
29017: LD_INT 18
29019: PPUSH
29020: CALL_OW 67
29024: GO 29001
// if GetLives ( ArRuFact ) > 0 then
29026: LD_INT 105
29028: PPUSH
29029: CALL_OW 256
29033: PUSH
29034: LD_INT 0
29036: GREATER
29037: IFFALSE 29049
// SetLives ( ArRuFact , 0 ) ;
29039: LD_INT 105
29041: PPUSH
29042: LD_INT 0
29044: PPUSH
29045: CALL_OW 234
// Center_To_Powell = false ;
29049: LD_ADDR_EXP 194
29053: PUSH
29054: LD_INT 0
29056: ST_TO_ADDR
// Wait ( 0 0$5 ) ;
29057: LD_INT 175
29059: PPUSH
29060: CALL_OW 67
// removeseeing ( 78 , 12 , americans ) ;
29064: LD_INT 78
29066: PPUSH
29067: LD_INT 12
29069: PPUSH
29070: LD_EXP 176
29074: PPUSH
29075: CALL_OW 331
// CenterOnUnits ( JMM ) ;
29079: LD_EXP 1
29083: PPUSH
29084: CALL_OW 85
// RepairArabExtensions ;
29088: CALL 31805 0 0
// AddMcUnits ( Arabian_def_id , Arabian_soldiers ^ ArT1 ) ;
29092: LD_EXP 235
29096: PPUSH
29097: LD_EXP 80
29101: PUSH
29102: LD_INT 107
29104: ADD
29105: PPUSH
29106: CALL_OW 390
// for Un in Arabian_Soldiers do
29110: LD_ADDR_VAR 0 9
29114: PUSH
29115: LD_EXP 80
29119: PUSH
29120: FOR_IN
29121: IFFALSE 29168
// begin Hex = RandHexArea ( Ar_Base , false ) ;
29123: LD_ADDR_VAR 0 14
29127: PUSH
29128: LD_INT 17
29130: PPUSH
29131: LD_INT 0
29133: PPUSH
29134: CALL_OW 16
29138: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
29139: LD_VAR 0 9
29143: PPUSH
29144: LD_VAR 0 14
29148: PUSH
29149: LD_INT 1
29151: ARRAY
29152: PPUSH
29153: LD_VAR 0 14
29157: PUSH
29158: LD_INT 2
29160: ARRAY
29161: PPUSH
29162: CALL_OW 111
// end ;
29166: GO 29120
29168: POP
29169: POP
// Say ( Sold [ 1 ] , D6c-Sol3-1 ) ;
29170: LD_VAR 0 3
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: PPUSH
29179: LD_STRING D6c-Sol3-1
29181: PPUSH
29182: CALL_OW 88
// Say ( Jmm , D6c-JMM-1 ) ;
29186: LD_EXP 1
29190: PPUSH
29191: LD_STRING D6c-JMM-1
29193: PPUSH
29194: CALL_OW 88
// Alive = UnitFilter ( [ Cyrus , Bobby , Cornell ] , [ f_ok ] ) ;
29198: LD_ADDR_VAR 0 8
29202: PUSH
29203: LD_EXP 4
29207: PUSH
29208: LD_EXP 3
29212: PUSH
29213: LD_EXP 10
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: PPUSH
29223: LD_INT 50
29225: PUSH
29226: EMPTY
29227: LIST
29228: PPUSH
29229: CALL_OW 72
29233: ST_TO_ADDR
// if Alive > 0 then
29234: LD_VAR 0 8
29238: PUSH
29239: LD_INT 0
29241: GREATER
29242: IFFALSE 29270
// Un = Alive [ Rand ( 1 , Alive ) ] else
29244: LD_ADDR_VAR 0 9
29248: PUSH
29249: LD_VAR 0 8
29253: PUSH
29254: LD_INT 1
29256: PPUSH
29257: LD_VAR 0 8
29261: PPUSH
29262: CALL_OW 12
29266: ARRAY
29267: ST_TO_ADDR
29268: GO 29284
// Un = Sold [ 3 ] ;
29270: LD_ADDR_VAR 0 9
29274: PUSH
29275: LD_VAR 0 3
29279: PUSH
29280: LD_INT 3
29282: ARRAY
29283: ST_TO_ADDR
// case Un of Cyrus :
29284: LD_VAR 0 9
29288: PUSH
29289: LD_EXP 4
29293: DOUBLE
29294: EQUAL
29295: IFTRUE 29299
29297: GO 29314
29299: POP
// Say ( Cyrus , D6c-Cyrus-1 ) ; Bobby :
29300: LD_EXP 4
29304: PPUSH
29305: LD_STRING D6c-Cyrus-1
29307: PPUSH
29308: CALL_OW 88
29312: GO 29398
29314: LD_EXP 3
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29324
29322: GO 29339
29324: POP
// Say ( Bobby , D6c-Bobby-1 ) ; Cornell :
29325: LD_EXP 3
29329: PPUSH
29330: LD_STRING D6c-Bobby-1
29332: PPUSH
29333: CALL_OW 88
29337: GO 29398
29339: LD_EXP 10
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 29364
29349: POP
// Say ( Cornell , D6c-Corn-1 ) ; Sold [ 3 ] :
29350: LD_EXP 10
29354: PPUSH
29355: LD_STRING D6c-Corn-1
29357: PPUSH
29358: CALL_OW 88
29362: GO 29398
29364: LD_VAR 0 3
29368: PUSH
29369: LD_INT 3
29371: ARRAY
29372: DOUBLE
29373: EQUAL
29374: IFTRUE 29378
29376: GO 29397
29378: POP
// Say ( Sold [ 3 ] , D6c-Sol1-1 ) ; end ;
29379: LD_VAR 0 3
29383: PUSH
29384: LD_INT 3
29386: ARRAY
29387: PPUSH
29388: LD_STRING D6c-Sol1-1
29390: PPUSH
29391: CALL_OW 88
29395: GO 29398
29397: POP
// Alive = UnitFilter ( [ Lisa , Gary , Donaldson ] , [ f_ok ] ) ;
29398: LD_ADDR_VAR 0 8
29402: PUSH
29403: LD_EXP 5
29407: PUSH
29408: LD_EXP 15
29412: PUSH
29413: LD_EXP 8
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: PPUSH
29423: LD_INT 50
29425: PUSH
29426: EMPTY
29427: LIST
29428: PPUSH
29429: CALL_OW 72
29433: ST_TO_ADDR
// if Alive > 0 then
29434: LD_VAR 0 8
29438: PUSH
29439: LD_INT 0
29441: GREATER
29442: IFFALSE 29470
// Un = Alive [ Rand ( 1 , Alive ) ] else
29444: LD_ADDR_VAR 0 9
29448: PUSH
29449: LD_VAR 0 8
29453: PUSH
29454: LD_INT 1
29456: PPUSH
29457: LD_VAR 0 8
29461: PPUSH
29462: CALL_OW 12
29466: ARRAY
29467: ST_TO_ADDR
29468: GO 29484
// Un = Sold [ 2 ] ;
29470: LD_ADDR_VAR 0 9
29474: PUSH
29475: LD_VAR 0 3
29479: PUSH
29480: LD_INT 2
29482: ARRAY
29483: ST_TO_ADDR
// case Un of Lisa :
29484: LD_VAR 0 9
29488: PUSH
29489: LD_EXP 5
29493: DOUBLE
29494: EQUAL
29495: IFTRUE 29499
29497: GO 29514
29499: POP
// Say ( Lisa , D6c-Lisa-1 ) ; Gary :
29500: LD_EXP 5
29504: PPUSH
29505: LD_STRING D6c-Lisa-1
29507: PPUSH
29508: CALL_OW 88
29512: GO 29598
29514: LD_EXP 15
29518: DOUBLE
29519: EQUAL
29520: IFTRUE 29524
29522: GO 29539
29524: POP
// Say ( Gary , D6c-Gary-1 ) ; Donaldson :
29525: LD_EXP 15
29529: PPUSH
29530: LD_STRING D6c-Gary-1
29532: PPUSH
29533: CALL_OW 88
29537: GO 29598
29539: LD_EXP 8
29543: DOUBLE
29544: EQUAL
29545: IFTRUE 29549
29547: GO 29564
29549: POP
// Say ( Donaldson , D6c-Don-1 ) ; Sold [ 2 ] :
29550: LD_EXP 8
29554: PPUSH
29555: LD_STRING D6c-Don-1
29557: PPUSH
29558: CALL_OW 88
29562: GO 29598
29564: LD_VAR 0 3
29568: PUSH
29569: LD_INT 2
29571: ARRAY
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29597
29578: POP
// Say ( Sold [ 2 ] , D6c-Sol2-1 ) ; end ;
29579: LD_VAR 0 3
29583: PUSH
29584: LD_INT 2
29586: ARRAY
29587: PPUSH
29588: LD_STRING D6c-Sol2-1
29590: PPUSH
29591: CALL_OW 88
29595: GO 29598
29597: POP
// Say ( Sold [ 1 ] , D6c-Sol3-2 ) ;
29598: LD_VAR 0 3
29602: PUSH
29603: LD_INT 1
29605: ARRAY
29606: PPUSH
29607: LD_STRING D6c-Sol3-2
29609: PPUSH
29610: CALL_OW 88
// Wait ( 0 0$2 ) ;
29614: LD_INT 70
29616: PPUSH
29617: CALL_OW 67
// Say ( JMM , D6c-JMM-2 ) ;
29621: LD_EXP 1
29625: PPUSH
29626: LD_STRING D6c-JMM-2
29628: PPUSH
29629: CALL_OW 88
// SetSide ( FilterAllUnits ( [ f_side , Americans1 ] ) , americans ) ;
29633: LD_INT 22
29635: PUSH
29636: LD_EXP 177
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PPUSH
29645: CALL_OW 69
29649: PPUSH
29650: LD_EXP 176
29654: PPUSH
29655: CALL_OW 235
// ingame_video = false ;
29659: LD_ADDR_OWVAR 52
29663: PUSH
29664: LD_INT 0
29666: ST_TO_ADDR
// interface_hidden = false ;
29667: LD_ADDR_OWVAR 54
29671: PUSH
29672: LD_INT 0
29674: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
29675: LD_STRING M2
29677: PPUSH
29678: CALL_OW 337
// Wait ( 0 0$1 ) ;
29682: LD_INT 35
29684: PPUSH
29685: CALL_OW 67
// enable ( R1_attack ) ;
29689: LD_EXP 140
29693: ENABLE_MARKED
// R1_Attack_Continues = true ;
29694: LD_ADDR_EXP 196
29698: PUSH
29699: LD_INT 1
29701: ST_TO_ADDR
// ComMoveXY ( R1_Attacking_Units , 101 , 147 ) ;
29702: LD_LOC 11
29706: PPUSH
29707: LD_INT 101
29709: PPUSH
29710: LD_INT 147
29712: PPUSH
29713: CALL_OW 111
// AddMcUnits ( Russian1_att_id , R1_Attacking_Units ) ;
29717: LD_EXP 238
29721: PPUSH
29722: LD_LOC 11
29726: PPUSH
29727: CALL_OW 390
// ComMoveXY ( R1_Patroling_Units , 101 , 147 ) ;
29731: LD_LOC 12
29735: PPUSH
29736: LD_INT 101
29738: PPUSH
29739: LD_INT 147
29741: PPUSH
29742: CALL_OW 111
// AddMcUnits ( Russian1_patr_id , R1_Patroling_Units ) ;
29746: LD_EXP 240
29750: PPUSH
29751: LD_LOC 12
29755: PPUSH
29756: CALL_OW 390
// SetAttitude ( russians1 , americans , att_enemy , true ) ;
29760: LD_EXP 179
29764: PPUSH
29765: LD_EXP 176
29769: PPUSH
29770: LD_INT 2
29772: PPUSH
29773: LD_INT 1
29775: PPUSH
29776: CALL_OW 80
// Arabian_Buildings = FilterUnitsInArea ( Ar_Base , [ f_type , unit_building ] ) ;
29780: LD_ADDR_VAR 0 7
29784: PUSH
29785: LD_INT 17
29787: PPUSH
29788: LD_INT 21
29790: PUSH
29791: LD_INT 3
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PPUSH
29798: CALL_OW 70
29802: ST_TO_ADDR
// for Un in Arabian_Buildings do
29803: LD_ADDR_VAR 0 9
29807: PUSH
29808: LD_VAR 0 7
29812: PUSH
29813: FOR_IN
29814: IFFALSE 29860
// if ( GetLives ( Un ) > 0 ) and ( GetLives ( Un ) < 250 ) then
29816: LD_VAR 0 9
29820: PPUSH
29821: CALL_OW 256
29825: PUSH
29826: LD_INT 0
29828: GREATER
29829: PUSH
29830: LD_VAR 0 9
29834: PPUSH
29835: CALL_OW 256
29839: PUSH
29840: LD_INT 250
29842: LESS
29843: AND
29844: IFFALSE 29858
// SetLives ( Un , 400 ) ;
29846: LD_VAR 0 9
29850: PPUSH
29851: LD_INT 400
29853: PPUSH
29854: CALL_OW 234
29858: GO 29813
29860: POP
29861: POP
// AddMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
29862: LD_EXP 236
29866: PPUSH
29867: LD_EXP 81
29871: PPUSH
29872: CALL_OW 390
// ComExitBuilding ( Arabian_Engineers ) ;
29876: LD_EXP 81
29880: PPUSH
29881: CALL_OW 122
// enable ( Ingame_Run_over ) ;
29885: LD_EXP 145
29889: ENABLE_MARKED
// Time_of_Ingame_Run_Over = tick ;
29890: LD_ADDR_EXP 189
29894: PUSH
29895: LD_OWVAR 1
29899: ST_TO_ADDR
// Woman_Coming_Time = Woman_Coming_Time + tick ;
29900: LD_ADDR_EXP 201
29904: PUSH
29905: LD_EXP 201
29909: PUSH
29910: LD_OWVAR 1
29914: PLUS
29915: ST_TO_ADDR
// Rus_Attack_time = Rus_Attack_time + tick ;
29916: LD_ADDR_EXP 130
29920: PUSH
29921: LD_EXP 130
29925: PUSH
29926: LD_OWVAR 1
29930: PLUS
29931: ST_TO_ADDR
// Stevens_Coming_Time = Stevens_Coming_Time + tick ;
29932: LD_ADDR_EXP 200
29936: PUSH
29937: LD_EXP 200
29941: PUSH
29942: LD_OWVAR 1
29946: PLUS
29947: ST_TO_ADDR
// Alliance_broadcast = Alliance_broadcast + tick ;
29948: LD_ADDR_EXP 202
29952: PUSH
29953: LD_EXP 202
29957: PUSH
29958: LD_OWVAR 1
29962: PLUS
29963: ST_TO_ADDR
// Arabian_siberite_attack_time = Arabian_siberite_attack_time + tick ;
29964: LD_ADDR_EXP 213
29968: PUSH
29969: LD_EXP 213
29973: PUSH
29974: LD_OWVAR 1
29978: PLUS
29979: ST_TO_ADDR
// Behemots_broadcast = Behemots_broadcast + tick ;
29980: LD_ADDR_EXP 203
29984: PUSH
29985: LD_EXP 203
29989: PUSH
29990: LD_OWVAR 1
29994: PLUS
29995: ST_TO_ADDR
// Alaskite_Bomb_Time = Alaskite_Bomb_Time + tick ;
29996: LD_ADDR_EXP 212
30000: PUSH
30001: LD_EXP 212
30005: PUSH
30006: LD_OWVAR 1
30010: PLUS
30011: ST_TO_ADDR
// Time_of_first_capture = Time_of_first_capture + tick ;
30012: LD_ADDR_EXP 204
30016: PUSH
30017: LD_EXP 204
30021: PUSH
30022: LD_OWVAR 1
30026: PLUS
30027: ST_TO_ADDR
// Behemot_attack_time = Behemot_attack_time + tick ;
30028: LD_ADDR_EXP 225
30032: PUSH
30033: LD_EXP 225
30037: PUSH
30038: LD_OWVAR 1
30042: PLUS
30043: ST_TO_ADDR
// enable ( Game_Continue ) ;
30044: LD_EXP 146
30048: ENABLE_MARKED
// enable ( Timer ) ;
30049: LD_EXP 159
30053: ENABLE_MARKED
// SetTech ( tech_Gun , americans , state_researched ) ;
30054: LD_INT 39
30056: PPUSH
30057: LD_EXP 176
30061: PPUSH
30062: LD_INT 2
30064: PPUSH
30065: CALL_OW 322
// SetTech ( tech_SolPow , americans , state_researched ) ;
30069: LD_INT 35
30071: PPUSH
30072: LD_EXP 176
30076: PPUSH
30077: LD_INT 2
30079: PPUSH
30080: CALL_OW 322
// SetTech ( tech_SolEng , americans , state_researched ) ;
30084: LD_INT 45
30086: PPUSH
30087: LD_EXP 176
30091: PPUSH
30092: LD_INT 2
30094: PPUSH
30095: CALL_OW 322
// All_americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
30099: LD_ADDR_EXP 61
30103: PUSH
30104: LD_INT 22
30106: PUSH
30107: LD_EXP 176
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 21
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PPUSH
30130: CALL_OW 69
30134: ST_TO_ADDR
// All_russians = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_human ] ] ) ;
30135: LD_ADDR_EXP 111
30139: PUSH
30140: LD_INT 22
30142: PUSH
30143: LD_EXP 178
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 21
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PPUSH
30166: CALL_OW 69
30170: ST_TO_ADDR
// end ;
30171: PPOPN 14
30173: END
// export function JMMIsReady ; begin
30174: LD_INT 0
30176: PPUSH
// Say ( JMM , D6c-JMM-2 ) ;
30177: LD_EXP 1
30181: PPUSH
30182: LD_STRING D6c-JMM-2
30184: PPUSH
30185: CALL_OW 88
// end ;
30189: LD_VAR 0 1
30193: RET
// every 0 0$0.2 marked 6 do
30194: GO 30196
30196: DISABLE
// begin Say ( Powell , D6-Pow-2 ) ;
30197: LD_EXP 2
30201: PPUSH
30202: LD_STRING D6-Pow-2
30204: PPUSH
30205: CALL_OW 88
// end ;
30209: END
// every 0 0$0.1 marked 5 do
30210: GO 30212
30212: DISABLE
// begin if IsInUnit ( Powell ) = 0 then
30213: LD_EXP 2
30217: PPUSH
30218: CALL_OW 310
30222: PUSH
30223: LD_INT 0
30225: EQUAL
30226: IFFALSE 30255
// begin if GetLives ( Powell ) < 900 then
30228: LD_EXP 2
30232: PPUSH
30233: CALL_OW 256
30237: PUSH
30238: LD_INT 900
30240: LESS
30241: IFFALSE 30255
// SetLives ( Powell , 1000 ) ;
30243: LD_EXP 2
30247: PPUSH
30248: LD_INT 1000
30250: PPUSH
30251: CALL_OW 234
// end ; if ( IsInUnit ( Powell ) <> 0 ) and ( IsInUnit ( Powell ) <> Powell_vehicle ) then
30255: LD_EXP 2
30259: PPUSH
30260: CALL_OW 310
30264: PUSH
30265: LD_INT 0
30267: NONEQUAL
30268: PUSH
30269: LD_EXP 2
30273: PPUSH
30274: CALL_OW 310
30278: PUSH
30279: LD_EXP 192
30283: NONEQUAL
30284: AND
30285: IFFALSE 30351
// begin if GetLives ( IsInUnit ( Powell ) ) < 400 then
30287: LD_EXP 2
30291: PPUSH
30292: CALL_OW 310
30296: PPUSH
30297: CALL_OW 256
30301: PUSH
30302: LD_INT 400
30304: LESS
30305: IFFALSE 30324
// SetLives ( IsInUnit ( Powell ) , 400 ) ;
30307: LD_EXP 2
30311: PPUSH
30312: CALL_OW 310
30316: PPUSH
30317: LD_INT 400
30319: PPUSH
30320: CALL_OW 234
// if GetLives ( Powell ) < 400 then
30324: LD_EXP 2
30328: PPUSH
30329: CALL_OW 256
30333: PUSH
30334: LD_INT 400
30336: LESS
30337: IFFALSE 30351
// SetLives ( Powell , 400 ) ;
30339: LD_EXP 2
30343: PPUSH
30344: LD_INT 400
30346: PPUSH
30347: CALL_OW 234
// end ; enable ;
30351: ENABLE
// end ;
30352: END
// every 0 0$2 trigger Center_To_Powell do var X , Y , NewX , NewY ;
30353: LD_EXP 194
30357: IFFALSE 30588
30359: GO 30361
30361: DISABLE
30362: LD_INT 0
30364: PPUSH
30365: PPUSH
30366: PPUSH
30367: PPUSH
// begin if IsInUnit ( Powell ) = Powell_vehicle then
30368: LD_EXP 2
30372: PPUSH
30373: CALL_OW 310
30377: PUSH
30378: LD_EXP 192
30382: EQUAL
30383: IFFALSE 30487
// begin X = GetX ( Powell_vehicle ) ;
30385: LD_ADDR_VAR 0 1
30389: PUSH
30390: LD_EXP 192
30394: PPUSH
30395: CALL_OW 250
30399: ST_TO_ADDR
// Y = GetY ( Powell_vehicle ) ;
30400: LD_ADDR_VAR 0 2
30404: PUSH
30405: LD_EXP 192
30409: PPUSH
30410: CALL_OW 251
30414: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( Powell_vehicle ) , 5 ) ;
30415: LD_ADDR_VAR 0 3
30419: PUSH
30420: LD_VAR 0 1
30424: PPUSH
30425: LD_EXP 192
30429: PPUSH
30430: CALL_OW 254
30434: PPUSH
30435: LD_INT 5
30437: PPUSH
30438: CALL_OW 272
30442: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( Powell_vehicle ) , 5 ) ;
30443: LD_ADDR_VAR 0 4
30447: PUSH
30448: LD_VAR 0 2
30452: PPUSH
30453: LD_EXP 192
30457: PPUSH
30458: CALL_OW 254
30462: PPUSH
30463: LD_INT 5
30465: PPUSH
30466: CALL_OW 273
30470: ST_TO_ADDR
// CenterOnXY ( NewX , NewY ) ;
30471: LD_VAR 0 3
30475: PPUSH
30476: LD_VAR 0 4
30480: PPUSH
30481: CALL_OW 84
// end else
30485: GO 30587
// begin X = GetX ( Powell ) ;
30487: LD_ADDR_VAR 0 1
30491: PUSH
30492: LD_EXP 2
30496: PPUSH
30497: CALL_OW 250
30501: ST_TO_ADDR
// Y = GetY ( Powell ) ;
30502: LD_ADDR_VAR 0 2
30506: PUSH
30507: LD_EXP 2
30511: PPUSH
30512: CALL_OW 251
30516: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( Powell ) , 2 ) ;
30517: LD_ADDR_VAR 0 3
30521: PUSH
30522: LD_VAR 0 1
30526: PPUSH
30527: LD_EXP 2
30531: PPUSH
30532: CALL_OW 254
30536: PPUSH
30537: LD_INT 2
30539: PPUSH
30540: CALL_OW 272
30544: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( Powell ) , 2 ) ;
30545: LD_ADDR_VAR 0 4
30549: PUSH
30550: LD_VAR 0 2
30554: PPUSH
30555: LD_EXP 2
30559: PPUSH
30560: CALL_OW 254
30564: PPUSH
30565: LD_INT 2
30567: PPUSH
30568: CALL_OW 273
30572: ST_TO_ADDR
// CenterOnXY ( NewX , NewY ) ;
30573: LD_VAR 0 3
30577: PPUSH
30578: LD_VAR 0 4
30582: PPUSH
30583: CALL_OW 84
// end ; enable ;
30587: ENABLE
// end ;
30588: PPOPN 4
30590: END
// every 0 0$1 marked 1 do var Un , Count ;
30591: GO 30593
30593: DISABLE
30594: LD_INT 0
30596: PPUSH
30597: PPUSH
// begin if GetLives ( Powell ) < 950 then
30598: LD_EXP 2
30602: PPUSH
30603: CALL_OW 256
30607: PUSH
30608: LD_INT 950
30610: LESS
30611: IFFALSE 30620
// begin enable ( out_of_base ) ;
30613: LD_EXP 138
30617: ENABLE_MARKED
// exit ;
30618: GO 30919
// end ; Count = 0 ;
30620: LD_ADDR_VAR 0 2
30624: PUSH
30625: LD_INT 0
30627: ST_TO_ADDR
// for Un in ( JMM_Helpers ^ Joan ^ JMM ) do
30628: LD_ADDR_VAR 0 1
30632: PUSH
30633: LD_EXP 67
30637: PUSH
30638: LD_EXP 12
30642: ADD
30643: PUSH
30644: LD_EXP 1
30648: ADD
30649: PUSH
30650: FOR_IN
30651: IFFALSE 30726
// if ( not ( IsInArea ( Un , JMM_Hill ) ) and IsOk ( Un ) and ( Warning_Time + 0 0$15 ) < tick ) then
30653: LD_VAR 0 1
30657: PPUSH
30658: LD_INT 2
30660: PPUSH
30661: CALL_OW 308
30665: NOT
30666: PUSH
30667: LD_VAR 0 1
30671: PPUSH
30672: CALL_OW 302
30676: AND
30677: PUSH
30678: LD_EXP 188
30682: PUSH
30683: LD_INT 525
30685: PLUS
30686: PUSH
30687: LD_OWVAR 1
30691: LESS
30692: AND
30693: IFFALSE 30724
// begin Count = Count + 1 ;
30695: LD_ADDR_VAR 0 2
30699: PUSH
30700: LD_VAR 0 2
30704: PUSH
30705: LD_INT 1
30707: PLUS
30708: ST_TO_ADDR
// ComMoveXY ( Un , 68 , 107 ) ;
30709: LD_VAR 0 1
30713: PPUSH
30714: LD_INT 68
30716: PPUSH
30717: LD_INT 107
30719: PPUSH
30720: CALL_OW 111
// end ;
30724: GO 30650
30726: POP
30727: POP
// if Count then
30728: LD_VAR 0 2
30732: IFFALSE 30918
// begin Powell_warning = Powell_warning + 1 ;
30734: LD_ADDR_EXP 187
30738: PUSH
30739: LD_EXP 187
30743: PUSH
30744: LD_INT 1
30746: PLUS
30747: ST_TO_ADDR
// case Powell_warning of 1 :
30748: LD_EXP 187
30752: PUSH
30753: LD_INT 1
30755: DOUBLE
30756: EQUAL
30757: IFTRUE 30761
30759: GO 30786
30761: POP
// begin Warning_Time = tick ;
30762: LD_ADDR_EXP 188
30766: PUSH
30767: LD_OWVAR 1
30771: ST_TO_ADDR
// Say ( Powell , DBack1-Pow-1 ) ;
30772: LD_EXP 2
30776: PPUSH
30777: LD_STRING DBack1-Pow-1
30779: PPUSH
30780: CALL_OW 88
// end ; 2 :
30784: GO 30848
30786: LD_INT 2
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 30819
30794: POP
// begin Warning_Time = tick ;
30795: LD_ADDR_EXP 188
30799: PUSH
30800: LD_OWVAR 1
30804: ST_TO_ADDR
// Say ( Powell , DBack2-Pow-1 ) ;
30805: LD_EXP 2
30809: PPUSH
30810: LD_STRING DBack2-Pow-1
30812: PPUSH
30813: CALL_OW 88
// end ; 3 :
30817: GO 30848
30819: LD_INT 3
30821: DOUBLE
30822: EQUAL
30823: IFTRUE 30827
30825: GO 30847
30827: POP
// begin Say ( Powell , DBack3-Pow-1 ) ;
30828: LD_EXP 2
30832: PPUSH
30833: LD_STRING DBack3-Pow-1
30835: PPUSH
30836: CALL_OW 88
// enable ( out_of_base ) ;
30840: LD_EXP 138
30844: ENABLE_MARKED
// end ; end ;
30845: GO 30848
30847: POP
// for Un in ( JMM_Helpers ^ Joan ^ JMM ) do
30848: LD_ADDR_VAR 0 1
30852: PUSH
30853: LD_EXP 67
30857: PUSH
30858: LD_EXP 12
30862: ADD
30863: PUSH
30864: LD_EXP 1
30868: ADD
30869: PUSH
30870: FOR_IN
30871: IFFALSE 30916
// if ( not ( IsInArea ( Un , JMM_Hill ) ) and IsOk ( Un ) ) then
30873: LD_VAR 0 1
30877: PPUSH
30878: LD_INT 2
30880: PPUSH
30881: CALL_OW 308
30885: NOT
30886: PUSH
30887: LD_VAR 0 1
30891: PPUSH
30892: CALL_OW 302
30896: AND
30897: IFFALSE 30914
// begin ComMoveXY ( Un , 68 , 107 ) ;
30899: LD_VAR 0 1
30903: PPUSH
30904: LD_INT 68
30906: PPUSH
30907: LD_INT 107
30909: PPUSH
30910: CALL_OW 111
// end ;
30914: GO 30870
30916: POP
30917: POP
// end ; enable ;
30918: ENABLE
// end ;
30919: PPOPN 2
30921: END
// every 0 0$2 marked 7 do var Sum_X , Sum_Y , New_X , New_Y , Number , Un ;
30922: GO 30924
30924: DISABLE
30925: LD_INT 0
30927: PPUSH
30928: PPUSH
30929: PPUSH
30930: PPUSH
30931: PPUSH
30932: PPUSH
// begin Number = UnitFilter ( Soldiers ^ Soldiers1 , [ f_alive ] ) ;
30933: LD_ADDR_VAR 0 5
30937: PUSH
30938: LD_LOC 6
30942: PUSH
30943: LD_LOC 7
30947: ADD
30948: PPUSH
30949: LD_INT 51
30951: PUSH
30952: EMPTY
30953: LIST
30954: PPUSH
30955: CALL_OW 72
30959: ST_TO_ADDR
// if Number > 0 then
30960: LD_VAR 0 5
30964: PUSH
30965: LD_INT 0
30967: GREATER
30968: IFFALSE 31127
// begin for Un in ( Soldiers ^ Soldiers1 ) do
30970: LD_ADDR_VAR 0 6
30974: PUSH
30975: LD_LOC 6
30979: PUSH
30980: LD_LOC 7
30984: ADD
30985: PUSH
30986: FOR_IN
30987: IFFALSE 31055
// begin if IsLive ( Un ) then
30989: LD_VAR 0 6
30993: PPUSH
30994: CALL_OW 300
30998: IFFALSE 31021
// Sum_X = Sum_X + GetX ( Un ) ;
31000: LD_ADDR_VAR 0 1
31004: PUSH
31005: LD_VAR 0 1
31009: PUSH
31010: LD_VAR 0 6
31014: PPUSH
31015: CALL_OW 250
31019: PLUS
31020: ST_TO_ADDR
// if IsLive ( Un ) then
31021: LD_VAR 0 6
31025: PPUSH
31026: CALL_OW 300
31030: IFFALSE 31053
// Sum_Y = Sum_Y + GetY ( Un ) ;
31032: LD_ADDR_VAR 0 2
31036: PUSH
31037: LD_VAR 0 2
31041: PUSH
31042: LD_VAR 0 6
31046: PPUSH
31047: CALL_OW 251
31051: PLUS
31052: ST_TO_ADDR
// end ;
31053: GO 30986
31055: POP
31056: POP
// New_X = ( Sum_X + Number / 2 ) div Number ;
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_VAR 0 1
31066: PUSH
31067: LD_VAR 0 5
31071: PUSH
31072: LD_INT 2
31074: DIVREAL
31075: PLUS
31076: PUSH
31077: LD_VAR 0 5
31081: DIV
31082: ST_TO_ADDR
// New_Y = ( ( Sum_Y + Number / 2 ) div Number ) - 5 ;
31083: LD_ADDR_VAR 0 4
31087: PUSH
31088: LD_VAR 0 2
31092: PUSH
31093: LD_VAR 0 5
31097: PUSH
31098: LD_INT 2
31100: DIVREAL
31101: PLUS
31102: PUSH
31103: LD_VAR 0 5
31107: DIV
31108: PUSH
31109: LD_INT 5
31111: MINUS
31112: ST_TO_ADDR
// CenterOnXY ( New_X , New_Y ) ;
31113: LD_VAR 0 3
31117: PPUSH
31118: LD_VAR 0 4
31122: PPUSH
31123: CALL_OW 84
// end ; enable ;
31127: ENABLE
// end ;
31128: PPOPN 6
31130: END
// every 0 0$1 marked 24 do
31131: GO 31133
31133: DISABLE
// begin display_strings = [ #Am15-1 , tick - Time_of_Ingame_Run_Over ] ;
31134: LD_ADDR_OWVAR 47
31138: PUSH
31139: LD_STRING #Am15-1
31141: PUSH
31142: LD_OWVAR 1
31146: PUSH
31147: LD_EXP 189
31151: MINUS
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: ST_TO_ADDR
// enable ;
31157: ENABLE
// end ; end_of_file
31158: END
// export function StartArabianBase ; var units_to_protect ; begin
31159: LD_INT 0
31161: PPUSH
31162: PPUSH
// units_to_protect = FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_building ] ] ) ;
31163: LD_ADDR_VAR 0 2
31167: PUSH
31168: LD_INT 22
31170: PUSH
31171: LD_EXP 180
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 21
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PPUSH
31194: CALL_OW 69
31198: ST_TO_ADDR
// Arabian_reg_id = McRegistry ( arabians , [ [ mc_reg_area_to_guard , Arabians_Base ] , [ mc_reg_area_to_protect , Arabians_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
31199: LD_ADDR_EXP 234
31203: PUSH
31204: LD_EXP 180
31208: PPUSH
31209: LD_INT 2
31211: PUSH
31212: LD_INT 4
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: LD_INT 4
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 4
31231: PUSH
31232: LD_VAR 0 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 8
31243: NEG
31244: PUSH
31245: LD_INT 7
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 399
31260: ST_TO_ADDR
// Arabian_def_id = McDefend ( 100 , Arabian_reg_id , Arabian_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Ar_Base ] , [ mc_retreat_area_people , Ar_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
31261: LD_ADDR_EXP 235
31265: PUSH
31266: LD_INT 100
31268: PPUSH
31269: LD_EXP 234
31273: PPUSH
31274: LD_EXP 80
31278: PUSH
31279: LD_VAR 0 2
31283: ADD
31284: PPUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 17
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 7
31297: PUSH
31298: LD_INT 23
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 5
31307: PUSH
31308: LD_INT 550
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: PPUSH
31320: CALL_OW 401
31324: ST_TO_ADDR
// Arabian_build_id = McBase ( 50 , Arabian_Engineers , Arabian_Buildings , [ ] , [ ] , [ mc_base_cont ] ) ;
31325: LD_ADDR_EXP 236
31329: PUSH
31330: LD_INT 50
31332: PPUSH
31333: LD_EXP 81
31337: PPUSH
31338: LD_EXP 88
31342: PPUSH
31343: EMPTY
31344: PPUSH
31345: EMPTY
31346: PPUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: PPUSH
31353: CALL_OW 397
31357: ST_TO_ADDR
// end ;
31358: LD_VAR 0 1
31362: RET
// export function SendArabianBack ( Un ) ; var Hex , New_Hex , i ; begin
31363: LD_INT 0
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
// if GetClass ( Un ) = class_scientistic then
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL_OW 257
31378: PUSH
31379: LD_INT 4
31381: EQUAL
31382: IFFALSE 31402
// Hex = RandHexArea ( Ar_Heal , false ) else
31384: LD_ADDR_VAR 0 3
31388: PUSH
31389: LD_INT 23
31391: PPUSH
31392: LD_INT 0
31394: PPUSH
31395: CALL_OW 16
31399: ST_TO_ADDR
31400: GO 31418
// Hex = RandHexArea ( Ar_Base , false ) ;
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_INT 17
31409: PPUSH
31410: LD_INT 0
31412: PPUSH
31413: CALL_OW 16
31417: ST_TO_ADDR
// for i = 1 to 10 do
31418: LD_ADDR_VAR 0 5
31422: PUSH
31423: DOUBLE
31424: LD_INT 1
31426: DEC
31427: ST_TO_ADDR
31428: LD_INT 10
31430: PUSH
31431: FOR_TO
31432: IFFALSE 31553
// begin if GetClass ( Un ) = class_scientistic then
31434: LD_VAR 0 1
31438: PPUSH
31439: CALL_OW 257
31443: PUSH
31444: LD_INT 4
31446: EQUAL
31447: IFFALSE 31467
// New_Hex = RandHexArea ( Ar_Heal , false ) else
31449: LD_ADDR_VAR 0 4
31453: PUSH
31454: LD_INT 23
31456: PPUSH
31457: LD_INT 0
31459: PPUSH
31460: CALL_OW 16
31464: ST_TO_ADDR
31465: GO 31483
// New_Hex = RandHexArea ( Ar_Base , false ) ;
31467: LD_ADDR_VAR 0 4
31471: PUSH
31472: LD_INT 17
31474: PPUSH
31475: LD_INT 0
31477: PPUSH
31478: CALL_OW 16
31482: ST_TO_ADDR
// if GetDistUnitXY ( Un , New_Hex [ 1 ] , New_Hex [ 2 ] ) < GetDistUnitXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) then
31483: LD_VAR 0 1
31487: PPUSH
31488: LD_VAR 0 4
31492: PUSH
31493: LD_INT 1
31495: ARRAY
31496: PPUSH
31497: LD_VAR 0 4
31501: PUSH
31502: LD_INT 2
31504: ARRAY
31505: PPUSH
31506: CALL_OW 297
31510: PUSH
31511: LD_VAR 0 1
31515: PPUSH
31516: LD_VAR 0 3
31520: PUSH
31521: LD_INT 1
31523: ARRAY
31524: PPUSH
31525: LD_VAR 0 3
31529: PUSH
31530: LD_INT 2
31532: ARRAY
31533: PPUSH
31534: CALL_OW 297
31538: LESS
31539: IFFALSE 31551
// Hex = New_Hex ;
31541: LD_ADDR_VAR 0 3
31545: PUSH
31546: LD_VAR 0 4
31550: ST_TO_ADDR
// end ;
31551: GO 31431
31553: POP
31554: POP
// if GetUnitMc ( Un ) = Arabian_def_id then
31555: LD_VAR 0 1
31559: PPUSH
31560: CALL_OW 388
31564: PUSH
31565: LD_EXP 235
31569: EQUAL
31570: IFFALSE 31641
// begin RemoveMcUnits ( Arabian_def_id , Un ) ;
31572: LD_EXP 235
31576: PPUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 391
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
31586: LD_VAR 0 1
31590: PPUSH
31591: LD_VAR 0 3
31595: PUSH
31596: LD_INT 1
31598: ARRAY
31599: PPUSH
31600: LD_VAR 0 3
31604: PUSH
31605: LD_INT 2
31607: ARRAY
31608: PPUSH
31609: CALL_OW 111
// WaitTask ( Un , 1 ) ;
31613: LD_VAR 0 1
31617: PPUSH
31618: LD_INT 1
31620: PPUSH
31621: CALL 17888 0 2
// AddMcUnits ( Arabian_def_id , Un ) ;
31625: LD_EXP 235
31629: PPUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 390
// end else
31639: GO 31680
// begin ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
31641: LD_VAR 0 1
31645: PPUSH
31646: LD_VAR 0 3
31650: PUSH
31651: LD_INT 1
31653: ARRAY
31654: PPUSH
31655: LD_VAR 0 3
31659: PUSH
31660: LD_INT 2
31662: ARRAY
31663: PPUSH
31664: CALL_OW 111
// WaitTask ( Un , 1 ) ;
31668: LD_VAR 0 1
31672: PPUSH
31673: LD_INT 1
31675: PPUSH
31676: CALL 17888 0 2
// end ; end ;
31680: LD_VAR 0 2
31684: RET
// every 0 0$10 trigger not ( Friend_has_come ) do var Un ;
31685: LD_EXP 226
31689: NOT
31690: IFFALSE 31802
31692: GO 31694
31694: DISABLE
31695: LD_INT 0
31697: PPUSH
// begin for Un in All_Arabians do
31698: LD_ADDR_VAR 0 1
31702: PUSH
31703: LD_EXP 79
31707: PUSH
31708: FOR_IN
31709: IFFALSE 31799
// begin if ( ( GetClass ( Un ) = class_scientistic ) and not ( IsInArea ( Un , Ar_Heal ) ) or ( GetClass ( Un ) <> class_scientistic ) and not ( IsInArea ( Un , Ar_Base ) ) ) then
31711: LD_VAR 0 1
31715: PPUSH
31716: CALL_OW 257
31720: PUSH
31721: LD_INT 4
31723: EQUAL
31724: PUSH
31725: LD_VAR 0 1
31729: PPUSH
31730: LD_INT 23
31732: PPUSH
31733: CALL_OW 308
31737: NOT
31738: AND
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 257
31749: PUSH
31750: LD_INT 4
31752: NONEQUAL
31753: PUSH
31754: LD_VAR 0 1
31758: PPUSH
31759: LD_INT 17
31761: PPUSH
31762: CALL_OW 308
31766: NOT
31767: AND
31768: OR
31769: IFFALSE 31797
// begin Arabian_Outside = Un ;
31771: LD_ADDR_EXP 86
31775: PUSH
31776: LD_VAR 0 1
31780: ST_TO_ADDR
// RaiseSailEvent ( Send_Arabian_Back ) ;
31781: LD_EXP 174
31785: PPUSH
31786: CALL_OW 427
// Wait ( 1 ) ;
31790: LD_INT 1
31792: PPUSH
31793: CALL_OW 67
// end end ;
31797: GO 31708
31799: POP
31800: POP
// enable ;
31801: ENABLE
// end ;
31802: PPOPN 1
31804: END
// export function RepairArabExtensions ; begin
31805: LD_INT 0
31807: PPUSH
// uc_nation = nation_russian ;
31808: LD_ADDR_OWVAR 21
31812: PUSH
31813: LD_INT 3
31815: ST_TO_ADDR
// uc_side = arabians ;
31816: LD_ADDR_OWVAR 20
31820: PUSH
31821: LD_EXP 180
31825: ST_TO_ADDR
// if not ( IsDead ( ArRuSibExt ) ) and GetLives ( ArRuSibExt ) < 1000 then
31826: LD_INT 116
31828: PPUSH
31829: CALL_OW 301
31833: NOT
31834: PUSH
31835: LD_INT 116
31837: PPUSH
31838: CALL_OW 256
31842: PUSH
31843: LD_INT 1000
31845: LESS
31846: AND
31847: IFFALSE 31859
// SetLives ( ArRuSibExt , 1000 ) ;
31849: LD_INT 116
31851: PPUSH
31852: LD_INT 1000
31854: PPUSH
31855: CALL_OW 234
// if not ( IsDead ( ArRuRoExt ) ) and GetLives ( ArRuRoExt ) < 1000 then
31859: LD_INT 115
31861: PPUSH
31862: CALL_OW 301
31866: NOT
31867: PUSH
31868: LD_INT 115
31870: PPUSH
31871: CALL_OW 256
31875: PUSH
31876: LD_INT 1000
31878: LESS
31879: AND
31880: IFFALSE 31892
// SetLives ( ArRuRoExt , 1000 ) ;
31882: LD_INT 115
31884: PPUSH
31885: LD_INT 1000
31887: PPUSH
31888: CALL_OW 234
// if not ( IsDead ( ArRuTrackExt ) ) and GetLives ( ArRuTrackExt ) < 1000 then
31892: LD_INT 141
31894: PPUSH
31895: CALL_OW 301
31899: NOT
31900: PUSH
31901: LD_INT 141
31903: PPUSH
31904: CALL_OW 256
31908: PUSH
31909: LD_INT 1000
31911: LESS
31912: AND
31913: IFFALSE 31925
// SetLives ( ArRuTrackExt , 1000 ) ;
31915: LD_INT 141
31917: PPUSH
31918: LD_INT 1000
31920: PPUSH
31921: CALL_OW 234
// if not ( IsDead ( ArRuCompExt ) ) and GetLives ( ArRuTrackExt ) < 1000 then
31925: LD_INT 142
31927: PPUSH
31928: CALL_OW 301
31932: NOT
31933: PUSH
31934: LD_INT 141
31936: PPUSH
31937: CALL_OW 256
31941: PUSH
31942: LD_INT 1000
31944: LESS
31945: AND
31946: IFFALSE 31958
// SetLives ( ArRuTrackExt , 1000 ) ;
31948: LD_INT 141
31950: PPUSH
31951: LD_INT 1000
31953: PPUSH
31954: CALL_OW 234
// end ;
31958: LD_VAR 0 1
31962: RET
// every 0 0$1 marked 9 do
31963: GO 31965
31965: DISABLE
// begin disable ;
31966: DISABLE
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
31967: LD_INT 84
31969: PPUSH
31970: LD_INT 4
31972: PPUSH
31973: CALL_OW 438
31977: PPUSH
31978: CALL_OW 274
31982: PPUSH
31983: LD_INT 1
31985: PPUSH
31986: LD_INT 200
31988: PPUSH
31989: CALL_OW 277
// PlaceUnitArea ( Kozlov , Ar_Base , false ) ;
31993: LD_EXP 22
31997: PPUSH
31998: LD_INT 17
32000: PPUSH
32001: LD_INT 0
32003: PPUSH
32004: CALL_OW 49
// Wait ( 1 ) ;
32008: LD_INT 1
32010: PPUSH
32011: CALL_OW 67
// ComEnterUnit ( Kozlov , ArDep1 ) ;
32015: LD_EXP 22
32019: PPUSH
32020: LD_INT 122
32022: PPUSH
32023: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_engineer ) ;
32027: LD_EXP 22
32031: PPUSH
32032: LD_INT 2
32034: PPUSH
32035: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
32039: LD_EXP 22
32043: PPUSH
32044: CALL_OW 182
// AddComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
32048: LD_EXP 22
32052: PPUSH
32053: LD_INT 2
32055: PPUSH
32056: LD_INT 78
32058: PPUSH
32059: LD_INT 12
32061: PPUSH
32062: LD_INT 3
32064: PPUSH
32065: CALL_OW 205
// while GetBType ( GetUnitNumber ( 78 , 12 ) ) <> b_workshop do
32069: LD_INT 78
32071: PPUSH
32072: LD_INT 12
32074: PPUSH
32075: CALL_OW 438
32079: PPUSH
32080: CALL_OW 266
32084: PUSH
32085: LD_INT 2
32087: NONEQUAL
32088: IFFALSE 32099
// begin Wait ( 0 0$1 ) ;
32090: LD_INT 35
32092: PPUSH
32093: CALL_OW 67
// end ;
32097: GO 32069
// RemoveMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
32099: LD_EXP 236
32103: PPUSH
32104: LD_EXP 81
32108: PPUSH
32109: CALL_OW 391
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 78 , 12 ) ) ;
32113: LD_EXP 81
32117: PPUSH
32118: LD_INT 78
32120: PPUSH
32121: LD_INT 12
32123: PPUSH
32124: CALL_OW 438
32128: PPUSH
32129: CALL_OW 130
// WaitTask ( Kozlov , 1 ) ;
32133: LD_EXP 22
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: CALL 17888 0 2
// ComUpgrade ( GetUnitNumber ( 78 , 12 ) ) ;
32145: LD_INT 78
32147: PPUSH
32148: LD_INT 12
32150: PPUSH
32151: CALL_OW 438
32155: PPUSH
32156: CALL_OW 146
// repeat Wait ( 1 ) ;
32160: LD_INT 1
32162: PPUSH
32163: CALL_OW 67
// until GetBType ( GetUnitNumber ( 78 , 12 ) ) = b_factory ;
32167: LD_INT 78
32169: PPUSH
32170: LD_INT 12
32172: PPUSH
32173: CALL_OW 438
32177: PPUSH
32178: CALL_OW 266
32182: PUSH
32183: LD_INT 3
32185: EQUAL
32186: IFFALSE 32160
// ComRepairBuilding ( Kozlov ^ Arabian_Engineers , GetUnitNumber ( 78 , 12 ) ) ;
32188: LD_EXP 22
32192: PUSH
32193: LD_EXP 81
32197: ADD
32198: PPUSH
32199: LD_INT 78
32201: PPUSH
32202: LD_INT 12
32204: PPUSH
32205: CALL_OW 438
32209: PPUSH
32210: CALL_OW 130
// WaitTask ( Kozlov , 1 ) ;
32214: LD_EXP 22
32218: PPUSH
32219: LD_INT 1
32221: PPUSH
32222: CALL 17888 0 2
// if IsDead ( ArRuSibExt ) then
32226: LD_INT 116
32228: PPUSH
32229: CALL_OW 301
32233: IFFALSE 32359
// begin SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_siberit , 200 ) ;
32235: LD_INT 84
32237: PPUSH
32238: LD_INT 4
32240: PPUSH
32241: CALL_OW 438
32245: PPUSH
32246: CALL_OW 274
32250: PPUSH
32251: LD_INT 3
32253: PPUSH
32254: LD_INT 200
32256: PPUSH
32257: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
32261: LD_INT 84
32263: PPUSH
32264: LD_INT 4
32266: PPUSH
32267: CALL_OW 438
32271: PPUSH
32272: CALL_OW 274
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: LD_INT 200
32282: PPUSH
32283: CALL_OW 277
// while GetBType ( GetUnitNumber ( 74 , 12 ) ) <> b_ext_siberium do
32287: LD_INT 74
32289: PPUSH
32290: LD_INT 12
32292: PPUSH
32293: CALL_OW 438
32297: PPUSH
32298: CALL_OW 266
32302: PUSH
32303: LD_INT 21
32305: NONEQUAL
32306: IFFALSE 32339
// begin ComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
32308: LD_EXP 22
32312: PPUSH
32313: LD_INT 21
32315: PPUSH
32316: LD_INT 74
32318: PPUSH
32319: LD_INT 12
32321: PPUSH
32322: LD_INT 1
32324: PPUSH
32325: CALL_OW 145
// Wait ( 0.5 ) ;
32329: LD_REAL  5.00000000000000E-0001
32332: PPUSH
32333: CALL_OW 67
// end ;
32337: GO 32287
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 74 , 12 ) ) ;
32339: LD_EXP 81
32343: PPUSH
32344: LD_INT 74
32346: PPUSH
32347: LD_INT 12
32349: PPUSH
32350: CALL_OW 438
32354: PPUSH
32355: CALL_OW 130
// end ; repeat Wait ( 2 ) ;
32359: LD_INT 2
32361: PPUSH
32362: CALL_OW 67
// until not ( HasTask ( Kozlov ) ) ;
32366: LD_EXP 22
32370: PPUSH
32371: CALL_OW 314
32375: NOT
32376: IFFALSE 32359
// WaitTask ( Kozlov , 1 ) ;
32378: LD_EXP 22
32382: PPUSH
32383: LD_INT 1
32385: PPUSH
32386: CALL 17888 0 2
// if IsDead ( ArRuTrackExt ) then
32390: LD_INT 141
32392: PPUSH
32393: CALL_OW 301
32397: IFFALSE 32523
// begin SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_siberit , 200 ) ;
32399: LD_INT 84
32401: PPUSH
32402: LD_INT 4
32404: PPUSH
32405: CALL_OW 438
32409: PPUSH
32410: CALL_OW 274
32414: PPUSH
32415: LD_INT 3
32417: PPUSH
32418: LD_INT 200
32420: PPUSH
32421: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
32425: LD_INT 84
32427: PPUSH
32428: LD_INT 4
32430: PPUSH
32431: CALL_OW 438
32435: PPUSH
32436: CALL_OW 274
32440: PPUSH
32441: LD_INT 1
32443: PPUSH
32444: LD_INT 200
32446: PPUSH
32447: CALL_OW 277
// while GetBType ( GetUnitNumber ( 81 , 12 ) ) <> b_ext_track do
32451: LD_INT 81
32453: PPUSH
32454: LD_INT 12
32456: PPUSH
32457: CALL_OW 438
32461: PPUSH
32462: CALL_OW 266
32466: PUSH
32467: LD_INT 16
32469: NONEQUAL
32470: IFFALSE 32503
// begin ComBuild ( Kozlov , b_ext_track , 81 , 12 , 4 ) ;
32472: LD_EXP 22
32476: PPUSH
32477: LD_INT 16
32479: PPUSH
32480: LD_INT 81
32482: PPUSH
32483: LD_INT 12
32485: PPUSH
32486: LD_INT 4
32488: PPUSH
32489: CALL_OW 145
// Wait ( 0.5 ) ;
32493: LD_REAL  5.00000000000000E-0001
32496: PPUSH
32497: CALL_OW 67
// end ;
32501: GO 32451
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 81 , 12 ) ) ;
32503: LD_EXP 81
32507: PPUSH
32508: LD_INT 81
32510: PPUSH
32511: LD_INT 12
32513: PPUSH
32514: CALL_OW 438
32518: PPUSH
32519: CALL_OW 130
// end ; repeat Wait ( 2 ) ;
32523: LD_INT 2
32525: PPUSH
32526: CALL_OW 67
// until not ( HasTask ( Kozlov ) ) ;
32530: LD_EXP 22
32534: PPUSH
32535: CALL_OW 314
32539: NOT
32540: IFFALSE 32523
// WaitTask ( Kozlov , 1 ) ;
32542: LD_EXP 22
32546: PPUSH
32547: LD_INT 1
32549: PPUSH
32550: CALL 17888 0 2
// SetResourceType ( GetBase ( GetUnitNumber ( 78 , 12 ) ) , mat_siberit , 200 ) ;
32554: LD_INT 78
32556: PPUSH
32557: LD_INT 12
32559: PPUSH
32560: CALL_OW 438
32564: PPUSH
32565: CALL_OW 274
32569: PPUSH
32570: LD_INT 3
32572: PPUSH
32573: LD_INT 200
32575: PPUSH
32576: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 78 , 12 ) ) , mat_cans , 200 ) ;
32580: LD_INT 78
32582: PPUSH
32583: LD_INT 12
32585: PPUSH
32586: CALL_OW 438
32590: PPUSH
32591: CALL_OW 274
32595: PPUSH
32596: LD_INT 1
32598: PPUSH
32599: LD_INT 200
32601: PPUSH
32602: CALL_OW 277
// ComEnterUnit ( Kozlov , GetUnitNumber ( 78 , 12 ) ) ;
32606: LD_EXP 22
32610: PPUSH
32611: LD_INT 78
32613: PPUSH
32614: LD_INT 12
32616: PPUSH
32617: CALL_OW 438
32621: PPUSH
32622: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_mechanic ) ;
32626: LD_EXP 22
32630: PPUSH
32631: LD_INT 3
32633: PPUSH
32634: CALL_OW 183
// AddComConstruct ( GetUnitNumber ( 78 , 12 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) ;
32638: LD_INT 78
32640: PPUSH
32641: LD_INT 12
32643: PPUSH
32644: CALL_OW 438
32648: PPUSH
32649: LD_INT 24
32651: PPUSH
32652: LD_INT 3
32654: PPUSH
32655: LD_INT 3
32657: PPUSH
32658: LD_INT 48
32660: PPUSH
32661: CALL_OW 185
// AddMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
32665: LD_EXP 236
32669: PPUSH
32670: LD_EXP 81
32674: PPUSH
32675: CALL_OW 390
// Wait ( 0 0$10 ) ;
32679: LD_INT 350
32681: PPUSH
32682: CALL_OW 67
// Starting_Construction_Time = tick ;
32686: LD_ADDR_EXP 231
32690: PUSH
32691: LD_OWVAR 1
32695: ST_TO_ADDR
// Construction_of_Arabian_rocket = true ;
32696: LD_ADDR_EXP 198
32700: PUSH
32701: LD_INT 1
32703: ST_TO_ADDR
// end ;
32704: END
// every 0 0$1 trigger Construction_of_Arabian_rocket and IsOk ( GetUnitNumber ( 78 , 12 ) ) marked 10 do var progress ;
32705: LD_EXP 198
32709: PUSH
32710: LD_INT 78
32712: PPUSH
32713: LD_INT 12
32715: PPUSH
32716: CALL_OW 438
32720: PPUSH
32721: CALL_OW 302
32725: AND
32726: IFFALSE 32936
32728: GO 32730
32730: DISABLE
32731: LD_INT 0
32733: PPUSH
// begin if ( tick < Arabian_siberite_attack_time ) and ( Number_of_Arabian_rocket = 1 ) and IsOk ( GetUnitNumber ( 78 , 12 ) ) and GetSide ( GetUnitNumber ( 78 , 12 ) ) = arabians then
32734: LD_OWVAR 1
32738: PUSH
32739: LD_EXP 213
32743: LESS
32744: PUSH
32745: LD_EXP 199
32749: PUSH
32750: LD_INT 1
32752: EQUAL
32753: AND
32754: PUSH
32755: LD_INT 78
32757: PPUSH
32758: LD_INT 12
32760: PPUSH
32761: CALL_OW 438
32765: PPUSH
32766: CALL_OW 302
32770: AND
32771: PUSH
32772: LD_INT 78
32774: PPUSH
32775: LD_INT 12
32777: PPUSH
32778: CALL_OW 438
32782: PPUSH
32783: CALL_OW 255
32787: PUSH
32788: LD_EXP 180
32792: EQUAL
32793: AND
32794: IFFALSE 32879
// begin progress = 100 * ( tick - Starting_Construction_Time ) / ( Arabian_siberite_attack_time - Starting_Construction_Time ) div 1 ;
32796: LD_ADDR_VAR 0 1
32800: PUSH
32801: LD_INT 100
32803: PUSH
32804: LD_OWVAR 1
32808: PUSH
32809: LD_EXP 231
32813: MINUS
32814: MUL
32815: PUSH
32816: LD_EXP 213
32820: PUSH
32821: LD_EXP 231
32825: MINUS
32826: DIVREAL
32827: PUSH
32828: LD_INT 1
32830: DIV
32831: ST_TO_ADDR
// if progress > 0 then
32832: LD_VAR 0 1
32836: PUSH
32837: LD_INT 0
32839: GREATER
32840: IFFALSE 32856
// progress = progress - 1 ;
32842: LD_ADDR_VAR 0 1
32846: PUSH
32847: LD_VAR 0 1
32851: PUSH
32852: LD_INT 1
32854: MINUS
32855: ST_TO_ADDR
// SetWorkingProgress ( GetUnitNumber ( 78 , 12 ) , progress ) ;
32856: LD_INT 78
32858: PPUSH
32859: LD_INT 12
32861: PPUSH
32862: CALL_OW 438
32866: PPUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL_OW 329
// enable ;
32876: ENABLE
// end else
32877: GO 32936
// if ( tick >= Arabian_siberite_attack_time ) and ( Number_of_Arabian_rocket = 1 ) and IsOk ( GetUnitNumber ( 78 , 12 ) ) then
32879: LD_OWVAR 1
32883: PUSH
32884: LD_EXP 213
32888: GREATEREQUAL
32889: PUSH
32890: LD_EXP 199
32894: PUSH
32895: LD_INT 1
32897: EQUAL
32898: AND
32899: PUSH
32900: LD_INT 78
32902: PPUSH
32903: LD_INT 12
32905: PPUSH
32906: CALL_OW 438
32910: PPUSH
32911: CALL_OW 302
32915: AND
32916: IFFALSE 32936
// begin SetWorkingProgress ( GetUnitNumber ( 78 , 12 ) , 99 ) ;
32918: LD_INT 78
32920: PPUSH
32921: LD_INT 12
32923: PPUSH
32924: CALL_OW 438
32928: PPUSH
32929: LD_INT 99
32931: PPUSH
32932: CALL_OW 329
// end ; end ;
32936: PPOPN 1
32938: END
// function SiberiteRocketAttack ( rocket , X , Y , Num_of_rocket ) ; var RocketDriver ; begin
32939: LD_INT 0
32941: PPUSH
32942: PPUSH
// ComAttackPlace ( rocket , X , Y ) ;
32943: LD_VAR 0 1
32947: PPUSH
32948: LD_VAR 0 2
32952: PPUSH
32953: LD_VAR 0 3
32957: PPUSH
32958: CALL_OW 116
// case Num_of_rocket of 1 :
32962: LD_VAR 0 4
32966: PUSH
32967: LD_INT 1
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 32990
32975: POP
// Say ( Kurt , D12-Kurt-1 ) ; 2 :
32976: LD_EXP 13
32980: PPUSH
32981: LD_STRING D12-Kurt-1
32983: PPUSH
32984: CALL_OW 88
32988: GO 33026
32990: LD_INT 2
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33025
32998: POP
// begin Say ( Kurt , D12a-Kurt-1 ) ;
32999: LD_EXP 13
33003: PPUSH
33004: LD_STRING D12a-Kurt-1
33006: PPUSH
33007: CALL_OW 88
// Say ( Roth , D12a-Roth-1 ) ;
33011: LD_EXP 20
33015: PPUSH
33016: LD_STRING D12a-Roth-1
33018: PPUSH
33019: CALL_OW 88
// end ; end ;
33023: GO 33026
33025: POP
// end ;
33026: LD_VAR 0 5
33030: RET
// function FriendComing ; var list_of_q , selection ; begin
33031: LD_INT 0
33033: PPUSH
33034: PPUSH
33035: PPUSH
// if Add_Legion_Objectives then
33036: LD_EXP 230
33040: IFFALSE 33076
// begin Add_Legion_Objectives = false ;
33042: LD_ADDR_EXP 230
33046: PUSH
33047: LD_INT 0
33049: ST_TO_ADDR
// if Number_of_Arabian_rocket = 1 then
33050: LD_EXP 199
33054: PUSH
33055: LD_INT 1
33057: EQUAL
33058: IFFALSE 33069
// ChangeMissionObjectives ( MlegionOut ) else
33060: LD_STRING MlegionOut
33062: PPUSH
33063: CALL_OW 337
33067: GO 33076
// ChangeMissionObjectives ( MlegionDel ) ;
33069: LD_STRING MlegionDel
33071: PPUSH
33072: CALL_OW 337
// end ; Friend_has_come = true ;
33076: LD_ADDR_EXP 226
33080: PUSH
33081: LD_INT 1
33083: ST_TO_ADDR
// KillMc ( Arabian_reg_id ) ;
33084: LD_EXP 234
33088: PPUSH
33089: CALL_OW 387
// KillMc ( Arabian_def_id ) ;
33093: LD_EXP 235
33097: PPUSH
33098: CALL_OW 387
// KillMc ( Arabian_build_id ) ;
33102: LD_EXP 236
33106: PPUSH
33107: CALL_OW 387
// if SeeXY ( americans , 31 , 4 ) and not ( GetUnitNumber ( 31 , 4 ) > 0 ) then
33111: LD_EXP 176
33115: PPUSH
33116: LD_INT 31
33118: PPUSH
33119: LD_INT 4
33121: PPUSH
33122: CALL_OW 293
33126: PUSH
33127: LD_INT 31
33129: PPUSH
33130: LD_INT 4
33132: PPUSH
33133: CALL_OW 438
33137: PUSH
33138: LD_INT 0
33140: GREATER
33141: NOT
33142: AND
33143: IFFALSE 33165
// PlaceUnitXY ( Friend , 31 , 4 , false ) else
33145: LD_EXP 21
33149: PPUSH
33150: LD_INT 31
33152: PPUSH
33153: LD_INT 4
33155: PPUSH
33156: LD_INT 0
33158: PPUSH
33159: CALL_OW 48
33163: GO 33294
// if SeeXY ( americans , 88 , 7 ) and not ( GetUnitNumber ( 88 , 7 ) > 0 ) then
33165: LD_EXP 176
33169: PPUSH
33170: LD_INT 88
33172: PPUSH
33173: LD_INT 7
33175: PPUSH
33176: CALL_OW 293
33180: PUSH
33181: LD_INT 88
33183: PPUSH
33184: LD_INT 7
33186: PPUSH
33187: CALL_OW 438
33191: PUSH
33192: LD_INT 0
33194: GREATER
33195: NOT
33196: AND
33197: IFFALSE 33219
// PlaceUnitXY ( Friend , 88 , 7 , false ) else
33199: LD_EXP 21
33203: PPUSH
33204: LD_INT 88
33206: PPUSH
33207: LD_INT 7
33209: PPUSH
33210: LD_INT 0
33212: PPUSH
33213: CALL_OW 48
33217: GO 33294
// if SeeXY ( americans , 101 , 23 ) and not ( GetUnitNumber ( 101 , 23 ) > 0 ) then
33219: LD_EXP 176
33223: PPUSH
33224: LD_INT 101
33226: PPUSH
33227: LD_INT 23
33229: PPUSH
33230: CALL_OW 293
33234: PUSH
33235: LD_INT 101
33237: PPUSH
33238: LD_INT 23
33240: PPUSH
33241: CALL_OW 438
33245: PUSH
33246: LD_INT 0
33248: GREATER
33249: NOT
33250: AND
33251: IFFALSE 33273
// PlaceUnitXY ( Friend , 101 , 23 , false ) else
33253: LD_EXP 21
33257: PPUSH
33258: LD_INT 101
33260: PPUSH
33261: LD_INT 23
33263: PPUSH
33264: LD_INT 0
33266: PPUSH
33267: CALL_OW 48
33271: GO 33294
// PlaceUnitXYR ( Friend , 6 , 4 , 3 , false ) ;
33273: LD_EXP 21
33277: PPUSH
33278: LD_INT 6
33280: PPUSH
33281: LD_INT 4
33283: PPUSH
33284: LD_INT 3
33286: PPUSH
33287: LD_INT 0
33289: PPUSH
33290: CALL_OW 50
// ComMoveUnit ( Friend , JMM ) ;
33294: LD_EXP 21
33298: PPUSH
33299: LD_EXP 1
33303: PPUSH
33304: CALL_OW 112
// SetAttitude ( americans , arabians , att_friend , true ) ;
33308: LD_EXP 176
33312: PPUSH
33313: LD_EXP 180
33317: PPUSH
33318: LD_INT 1
33320: PPUSH
33321: LD_INT 1
33323: PPUSH
33324: CALL_OW 80
// All_Americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
33328: LD_ADDR_EXP 61
33332: PUSH
33333: LD_INT 22
33335: PUSH
33336: LD_EXP 176
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 21
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PPUSH
33359: CALL_OW 69
33363: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
33364: LD_INT 35
33366: PPUSH
33367: CALL_OW 67
// until UnitFilter ( All_Americans , [ f_dist , Friend , 4 ] ) > 0 ;
33371: LD_EXP 61
33375: PPUSH
33376: LD_INT 91
33378: PUSH
33379: LD_EXP 21
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: PPUSH
33392: CALL_OW 72
33396: PUSH
33397: LD_INT 0
33399: GREATER
33400: IFFALSE 33364
// ComHold ( Friend ) ;
33402: LD_EXP 21
33406: PPUSH
33407: CALL_OW 140
// CenterNowOnUnits ( Friend ) ;
33411: LD_EXP 21
33415: PPUSH
33416: CALL_OW 87
// Wait ( 0 0$0.5 ) ;
33420: LD_INT 18
33422: PPUSH
33423: CALL_OW 67
// DialogueON ;
33427: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
33431: LD_EXP 1
33435: PPUSH
33436: LD_STRING D14-JMM-1
33438: PPUSH
33439: CALL_OW 88
// Say ( Friend , D14-Friend-1 ) ;
33443: LD_EXP 21
33447: PPUSH
33448: LD_STRING D14-Friend-1
33450: PPUSH
33451: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
33455: LD_EXP 1
33459: PPUSH
33460: LD_STRING D14-JMM-2
33462: PPUSH
33463: CALL_OW 88
// Say ( Friend , D14-Friend-2 ) ;
33467: LD_EXP 21
33471: PPUSH
33472: LD_STRING D14-Friend-2
33474: PPUSH
33475: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
33479: LD_EXP 1
33483: PPUSH
33484: LD_STRING D14-JMM-3
33486: PPUSH
33487: CALL_OW 88
// Say ( Friend , D14-Friend-3 ) ;
33491: LD_EXP 21
33495: PPUSH
33496: LD_STRING D14-Friend-3
33498: PPUSH
33499: CALL_OW 88
// list_of_q = [ 1 , 2 , 3 ] ;
33503: LD_ADDR_VAR 0 2
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
// selection = SelectiveQuery ( Q14 , list_of_q ) ;
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_STRING Q14
33529: PPUSH
33530: LD_VAR 0 2
33534: PPUSH
33535: CALL_OW 98
33539: ST_TO_ADDR
// case selection of 1 :
33540: LD_VAR 0 3
33544: PUSH
33545: LD_INT 1
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33553
33551: GO 33609
33553: POP
// begin Say ( JMM , D14a-JMM-1 ) ;
33554: LD_EXP 1
33558: PPUSH
33559: LD_STRING D14a-JMM-1
33561: PPUSH
33562: CALL_OW 88
// SetSide ( Friend , americans ) ;
33566: LD_EXP 21
33570: PPUSH
33571: LD_EXP 176
33575: PPUSH
33576: CALL_OW 235
// All_americans = All_americans ^ [ Friend ] ;
33580: LD_ADDR_EXP 61
33584: PUSH
33585: LD_EXP 61
33589: PUSH
33590: LD_EXP 21
33594: PUSH
33595: EMPTY
33596: LIST
33597: ADD
33598: ST_TO_ADDR
// Friend_Accepted = true ;
33599: LD_ADDR_EXP 219
33603: PUSH
33604: LD_INT 1
33606: ST_TO_ADDR
// end ; 2 :
33607: GO 33707
33609: LD_INT 2
33611: DOUBLE
33612: EQUAL
33613: IFTRUE 33617
33615: GO 33639
33617: POP
// begin Say ( JMM , D14b-JMM-1 ) ;
33618: LD_EXP 1
33622: PPUSH
33623: LD_STRING D14b-JMM-1
33625: PPUSH
33626: CALL_OW 88
// Wait ( 0 0$1 ) ;
33630: LD_INT 35
33632: PPUSH
33633: CALL_OW 67
// end ; 3 :
33637: GO 33707
33639: LD_INT 3
33641: DOUBLE
33642: EQUAL
33643: IFTRUE 33647
33645: GO 33706
33647: POP
// begin Say ( JMM , D14c-JMM-1 ) ;
33648: LD_EXP 1
33652: PPUSH
33653: LD_STRING D14c-JMM-1
33655: PPUSH
33656: CALL_OW 88
// Say ( Friend , D14c-Friend-1 ) ;
33660: LD_EXP 21
33664: PPUSH
33665: LD_STRING D14c-Friend-1
33667: PPUSH
33668: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
33672: LD_EXP 1
33676: PPUSH
33677: LD_STRING D14c-JMM-2
33679: PPUSH
33680: CALL_OW 88
// SetAttitude ( americans , arabians , att_enemy , true ) ;
33684: LD_EXP 176
33688: PPUSH
33689: LD_EXP 180
33693: PPUSH
33694: LD_INT 2
33696: PPUSH
33697: LD_INT 1
33699: PPUSH
33700: CALL_OW 80
// end ; end ;
33704: GO 33707
33706: POP
// DialogueOFF ;
33707: CALL_OW 7
// if GetSide ( Friend ) = arabians then
33711: LD_EXP 21
33715: PPUSH
33716: CALL_OW 255
33720: PUSH
33721: LD_EXP 180
33725: EQUAL
33726: IFFALSE 33773
// begin ComMoveXY ( Friend , 4 , 3 ) ;
33728: LD_EXP 21
33732: PPUSH
33733: LD_INT 4
33735: PPUSH
33736: LD_INT 3
33738: PPUSH
33739: CALL_OW 111
// AddComHold ( Friend ) ;
33743: LD_EXP 21
33747: PPUSH
33748: CALL_OW 200
// WaitTask ( Friend , 1 ) ;
33752: LD_EXP 21
33756: PPUSH
33757: LD_INT 1
33759: PPUSH
33760: CALL 17888 0 2
// DestroyUnit ( Friend ) ;
33764: LD_EXP 21
33768: PPUSH
33769: CALL_OW 65
// end ; end ;
33773: LD_VAR 0 1
33777: RET
// export function ArabianPersonIsDead ; var unit_lives , Un , Unit_with_max_lives , X , Y , dir , cl , InUn , Units_to_stop , Mech_in_fact , ar_units ; begin
33778: LD_INT 0
33780: PPUSH
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
33790: PPUSH
33791: PPUSH
// ar_units = FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] , f_not , [ f_nation , nation_nature ] ] ) diff [ Kozlov , Friend , Kurt ] ;
33792: LD_ADDR_VAR 0 12
33796: PUSH
33797: LD_INT 22
33799: PUSH
33800: LD_EXP 180
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 21
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 51
33821: PUSH
33822: EMPTY
33823: LIST
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: LD_INT 23
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: PPUSH
33845: CALL_OW 69
33849: PUSH
33850: LD_EXP 22
33854: PUSH
33855: LD_EXP 21
33859: PUSH
33860: LD_EXP 13
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: DIFF
33870: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] ] ) = 0 and not ( Friend_has_come ) then
33871: LD_INT 22
33873: PUSH
33874: LD_EXP 180
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 21
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 51
33895: PUSH
33896: EMPTY
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 69
33908: PUSH
33909: LD_INT 0
33911: EQUAL
33912: PUSH
33913: LD_EXP 226
33917: NOT
33918: AND
33919: IFFALSE 33925
// FriendComing ;
33921: CALL 33031 0 0
// if ar_units = 8 then
33925: LD_VAR 0 12
33929: PUSH
33930: LD_INT 8
33932: EQUAL
33933: IFFALSE 34064
// begin Mech_in_fact = UnitsInside ( ArFact ) ;
33935: LD_ADDR_VAR 0 11
33939: PUSH
33940: LD_INT 117
33942: PPUSH
33943: CALL_OW 313
33947: ST_TO_ADDR
// ComExitBuilding ( Mech_in_fact ) ;
33948: LD_VAR 0 11
33952: PPUSH
33953: CALL_OW 122
// AddMcUnits ( Arabian_def_id , Mech_in_fact ) ;
33957: LD_EXP 235
33961: PPUSH
33962: LD_VAR 0 11
33966: PPUSH
33967: CALL_OW 390
// Wait ( 0 0$2 ) ;
33971: LD_INT 70
33973: PPUSH
33974: CALL_OW 67
// SetLives ( UnitFilter ( [ GetUnitNumber ( 89 , 21 ) , GetUnitNumber ( 93 , 21 ) , GetUnitNumber ( 89 , 18 ) , GetUnitNumber ( 92 , 24 ) , GetUnitNumber ( 44 , 3 ) , ] , [ f_side , arabians ] ) , 0 ) ;
33978: LD_INT 89
33980: PPUSH
33981: LD_INT 21
33983: PPUSH
33984: CALL_OW 438
33988: PUSH
33989: LD_INT 93
33991: PPUSH
33992: LD_INT 21
33994: PPUSH
33995: CALL_OW 438
33999: PUSH
34000: LD_INT 89
34002: PPUSH
34003: LD_INT 18
34005: PPUSH
34006: CALL_OW 438
34010: PUSH
34011: LD_INT 92
34013: PPUSH
34014: LD_INT 24
34016: PPUSH
34017: CALL_OW 438
34021: PUSH
34022: LD_INT 44
34024: PPUSH
34025: LD_INT 3
34027: PPUSH
34028: CALL_OW 438
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: PPUSH
34040: LD_INT 22
34042: PUSH
34043: LD_EXP 180
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PPUSH
34052: CALL_OW 72
34056: PPUSH
34057: LD_INT 0
34059: PPUSH
34060: CALL_OW 234
// end ; if ar_units = 4 then
34064: LD_VAR 0 12
34068: PUSH
34069: LD_INT 4
34071: EQUAL
34072: IFFALSE 35126
// begin SetAttitude ( arabians , russians , att_friend , true ) ;
34074: LD_EXP 180
34078: PPUSH
34079: LD_EXP 178
34083: PPUSH
34084: LD_INT 1
34086: PPUSH
34087: LD_INT 1
34089: PPUSH
34090: CALL_OW 80
// Units_to_stop = FilterAllUnits ( [ [ f_side , americans ] , [ f_side , arabians ] , [ f_ok ] ] ) ;
34094: LD_ADDR_VAR 0 10
34098: PUSH
34099: LD_INT 22
34101: PUSH
34102: LD_EXP 176
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 22
34113: PUSH
34114: LD_EXP 180
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 50
34125: PUSH
34126: EMPTY
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: PPUSH
34134: CALL_OW 69
34138: ST_TO_ADDR
// ComStop ( Units_to_stop ) ;
34139: LD_VAR 0 10
34143: PPUSH
34144: CALL_OW 141
// SetLives ( [ GetUnitNumber ( 78 , 12 ) , Kozlov ] ^ UnitFilter ( [ GetUnitNumber ( 91 , 3 ) , GetUnitNumber ( 93 , 7 ) ] , [ f_side , arabians ] ) , 0 ) ;
34148: LD_INT 78
34150: PPUSH
34151: LD_INT 12
34153: PPUSH
34154: CALL_OW 438
34158: PUSH
34159: LD_EXP 22
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 91
34170: PPUSH
34171: LD_INT 3
34173: PPUSH
34174: CALL_OW 438
34178: PUSH
34179: LD_INT 93
34181: PPUSH
34182: LD_INT 7
34184: PPUSH
34185: CALL_OW 438
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PPUSH
34194: LD_INT 22
34196: PUSH
34197: LD_EXP 180
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PPUSH
34206: CALL_OW 72
34210: ADD
34211: PPUSH
34212: LD_INT 0
34214: PPUSH
34215: CALL_OW 234
// SetResourceType ( GetBase ( ArDep1 ) , mat_cans , 20 ) ;
34219: LD_INT 122
34221: PPUSH
34222: CALL_OW 274
34226: PPUSH
34227: LD_INT 1
34229: PPUSH
34230: LD_INT 20
34232: PPUSH
34233: CALL_OW 277
// SetResourceType ( GetBase ( ArDep1 ) , mat_siberit , 10 ) ;
34237: LD_INT 122
34239: PPUSH
34240: CALL_OW 274
34244: PPUSH
34245: LD_INT 3
34247: PPUSH
34248: LD_INT 10
34250: PPUSH
34251: CALL_OW 277
// SetResourceType ( GetBase ( ArDep2 ) , mat_cans , 15 ) ;
34255: LD_INT 99
34257: PPUSH
34258: CALL_OW 274
34262: PPUSH
34263: LD_INT 1
34265: PPUSH
34266: LD_INT 15
34268: PPUSH
34269: CALL_OW 277
// SetResourceType ( GetBase ( ArDep2 ) , mat_siberit , 15 ) ;
34273: LD_INT 99
34275: PPUSH
34276: CALL_OW 274
34280: PPUSH
34281: LD_INT 3
34283: PPUSH
34284: LD_INT 15
34286: PPUSH
34287: CALL_OW 277
// Wait ( 1 ) ;
34291: LD_INT 1
34293: PPUSH
34294: CALL_OW 67
// unit_lives = GetLives ( ar_units [ 1 ] ) ;
34298: LD_ADDR_VAR 0 2
34302: PUSH
34303: LD_VAR 0 12
34307: PUSH
34308: LD_INT 1
34310: ARRAY
34311: PPUSH
34312: CALL_OW 256
34316: ST_TO_ADDR
// Unit_with_max_lives = ar_units [ 1 ] ;
34317: LD_ADDR_VAR 0 4
34321: PUSH
34322: LD_VAR 0 12
34326: PUSH
34327: LD_INT 1
34329: ARRAY
34330: ST_TO_ADDR
// for Un in ar_units do
34331: LD_ADDR_VAR 0 3
34335: PUSH
34336: LD_VAR 0 12
34340: PUSH
34341: FOR_IN
34342: IFFALSE 34388
// if GetLives ( Un ) > unit_lives then
34344: LD_VAR 0 3
34348: PPUSH
34349: CALL_OW 256
34353: PUSH
34354: LD_VAR 0 2
34358: GREATER
34359: IFFALSE 34386
// begin Unit_with_max_lives = Un ;
34361: LD_ADDR_VAR 0 4
34365: PUSH
34366: LD_VAR 0 3
34370: ST_TO_ADDR
// unit_lives = GetLives ( Un ) ;
34371: LD_ADDR_VAR 0 2
34375: PUSH
34376: LD_VAR 0 3
34380: PPUSH
34381: CALL_OW 256
34385: ST_TO_ADDR
// end ;
34386: GO 34341
34388: POP
34389: POP
// X = GetX ( Unit_with_max_lives ) ;
34390: LD_ADDR_VAR 0 5
34394: PUSH
34395: LD_VAR 0 4
34399: PPUSH
34400: CALL_OW 250
34404: ST_TO_ADDR
// Y = GetY ( Unit_with_max_lives ) ;
34405: LD_ADDR_VAR 0 6
34409: PUSH
34410: LD_VAR 0 4
34414: PPUSH
34415: CALL_OW 251
34419: ST_TO_ADDR
// dir = GetDir ( Unit_with_max_lives ) ;
34420: LD_ADDR_VAR 0 7
34424: PUSH
34425: LD_VAR 0 4
34429: PPUSH
34430: CALL_OW 254
34434: ST_TO_ADDR
// cl = GetClass ( Unit_with_max_lives ) ;
34435: LD_ADDR_VAR 0 8
34439: PUSH
34440: LD_VAR 0 4
34444: PPUSH
34445: CALL_OW 257
34449: ST_TO_ADDR
// if IsInUnit ( Unit_with_max_lives ) = 0 then
34450: LD_VAR 0 4
34454: PPUSH
34455: CALL_OW 310
34459: PUSH
34460: LD_INT 0
34462: EQUAL
34463: IFFALSE 34540
// begin DestroyUnit ( Unit_with_max_lives ) ;
34465: LD_VAR 0 4
34469: PPUSH
34470: CALL_OW 65
// SetLives ( Kurt , unit_lives ) ;
34474: LD_EXP 13
34478: PPUSH
34479: LD_VAR 0 2
34483: PPUSH
34484: CALL_OW 234
// SetClass ( Kurt , cl ) ;
34488: LD_EXP 13
34492: PPUSH
34493: LD_VAR 0 8
34497: PPUSH
34498: CALL_OW 336
// SetDir ( Kurt , dir ) ;
34502: LD_EXP 13
34506: PPUSH
34507: LD_VAR 0 7
34511: PPUSH
34512: CALL_OW 233
// PlaceUnitXY ( Kurt , X , Y , false ) ;
34516: LD_EXP 13
34520: PPUSH
34521: LD_VAR 0 5
34525: PPUSH
34526: LD_VAR 0 6
34530: PPUSH
34531: LD_INT 0
34533: PPUSH
34534: CALL_OW 48
// end else
34538: GO 34606
// begin InUn = IsInUnit ( Unit_with_max_lives ) ;
34540: LD_ADDR_VAR 0 9
34544: PUSH
34545: LD_VAR 0 4
34549: PPUSH
34550: CALL_OW 310
34554: ST_TO_ADDR
// DestroyUnit ( Unit_with_max_lives ) ;
34555: LD_VAR 0 4
34559: PPUSH
34560: CALL_OW 65
// SetLives ( Kurt , unit_lives ) ;
34564: LD_EXP 13
34568: PPUSH
34569: LD_VAR 0 2
34573: PPUSH
34574: CALL_OW 234
// SetClass ( Kurt , cl ) ;
34578: LD_EXP 13
34582: PPUSH
34583: LD_VAR 0 8
34587: PPUSH
34588: CALL_OW 336
// PlaceHumanInUnit ( Kurt , InUn ) ;
34592: LD_EXP 13
34596: PPUSH
34597: LD_VAR 0 9
34601: PPUSH
34602: CALL_OW 52
// end ; DialogueON ;
34606: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
34610: LD_EXP 1
34614: PPUSH
34615: LD_STRING D13-JMM-1
34617: PPUSH
34618: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
34622: LD_EXP 13
34626: PPUSH
34627: LD_STRING D13-Kurt-1
34629: PPUSH
34630: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
34634: LD_EXP 1
34638: PPUSH
34639: LD_STRING D13-JMM-2
34641: PPUSH
34642: CALL_OW 88
// if legion_cheated then
34646: LD_EXP 32
34650: IFFALSE 34686
// begin Say ( Kurt , D13-Kurt-2 ) ;
34652: LD_EXP 13
34656: PPUSH
34657: LD_STRING D13-Kurt-2
34659: PPUSH
34660: CALL_OW 88
// SetAttitude ( arabians , russians , att_enemy , true ) ;
34664: LD_EXP 180
34668: PPUSH
34669: LD_EXP 178
34673: PPUSH
34674: LD_INT 2
34676: PPUSH
34677: LD_INT 1
34679: PPUSH
34680: CALL_OW 80
// end else
34684: GO 35122
// begin if Really_Kurt then
34686: LD_EXP 205
34690: IFFALSE 34706
// Say ( Kurt , D13-Kurt-2a ) else
34692: LD_EXP 13
34696: PPUSH
34697: LD_STRING D13-Kurt-2a
34699: PPUSH
34700: CALL_OW 88
34704: GO 34718
// Say ( Kurt , D13-Kurt-2b ) ;
34706: LD_EXP 13
34710: PPUSH
34711: LD_STRING D13-Kurt-2b
34713: PPUSH
34714: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
34718: LD_EXP 1
34722: PPUSH
34723: LD_STRING D13-JMM-3
34725: PPUSH
34726: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
34730: LD_EXP 13
34734: PPUSH
34735: LD_STRING D13-Kurt-3
34737: PPUSH
34738: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
34742: LD_EXP 1
34746: PPUSH
34747: LD_STRING D13-JMM-4
34749: PPUSH
34750: CALL_OW 88
// ar_units = Kurt ^ ( FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] ] ) diff Kozlov ) ;
34754: LD_ADDR_VAR 0 12
34758: PUSH
34759: LD_EXP 13
34763: PUSH
34764: LD_INT 22
34766: PUSH
34767: LD_EXP 180
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 21
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 51
34788: PUSH
34789: EMPTY
34790: LIST
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: PPUSH
34797: CALL_OW 69
34801: PUSH
34802: LD_EXP 22
34806: DIFF
34807: ADD
34808: ST_TO_ADDR
// for Un in ar_units do
34809: LD_ADDR_VAR 0 3
34813: PUSH
34814: LD_VAR 0 12
34818: PUSH
34819: FOR_IN
34820: IFFALSE 35002
// begin if GetLives ( Un ) < 300 then
34822: LD_VAR 0 3
34826: PPUSH
34827: CALL_OW 256
34831: PUSH
34832: LD_INT 300
34834: LESS
34835: IFFALSE 34849
// SetLives ( Un , 300 ) ;
34837: LD_VAR 0 3
34841: PPUSH
34842: LD_INT 300
34844: PPUSH
34845: CALL_OW 234
// SetSide ( Un , americans ) ;
34849: LD_VAR 0 3
34853: PPUSH
34854: LD_EXP 176
34858: PPUSH
34859: CALL_OW 235
// if GetType ( IsInUnit ( Un ) ) = unit_vehicle then
34863: LD_VAR 0 3
34867: PPUSH
34868: CALL_OW 310
34872: PPUSH
34873: CALL_OW 247
34877: PUSH
34878: LD_INT 2
34880: EQUAL
34881: IFFALSE 34894
// ComExitVehicle ( Un ) else
34883: LD_VAR 0 3
34887: PPUSH
34888: CALL_OW 121
34892: GO 34923
// if GetType ( IsInUnit ( Un ) ) = unit_building then
34894: LD_VAR 0 3
34898: PPUSH
34899: CALL_OW 310
34903: PPUSH
34904: CALL_OW 247
34908: PUSH
34909: LD_INT 3
34911: EQUAL
34912: IFFALSE 34923
// ComExitBuilding ( Un ) ;
34914: LD_VAR 0 3
34918: PPUSH
34919: CALL_OW 122
// if not ( ( GetClass ( Un ) = class_apeman ) or ( GetClass ( Un ) = class_apeman_engineer ) or ( GetClass ( Un ) = class_apeman_kamikaze ) or ( GetClass ( Un ) = class_apeman_soldier ) ) then
34923: LD_VAR 0 3
34927: PPUSH
34928: CALL_OW 257
34932: PUSH
34933: LD_INT 12
34935: EQUAL
34936: PUSH
34937: LD_VAR 0 3
34941: PPUSH
34942: CALL_OW 257
34946: PUSH
34947: LD_INT 16
34949: EQUAL
34950: OR
34951: PUSH
34952: LD_VAR 0 3
34956: PPUSH
34957: CALL_OW 257
34961: PUSH
34962: LD_INT 17
34964: EQUAL
34965: OR
34966: PUSH
34967: LD_VAR 0 3
34971: PPUSH
34972: CALL_OW 257
34976: PUSH
34977: LD_INT 15
34979: EQUAL
34980: OR
34981: NOT
34982: IFFALSE 35000
// All_americans = All_americans ^ Un ;
34984: LD_ADDR_EXP 61
34988: PUSH
34989: LD_EXP 61
34993: PUSH
34994: LD_VAR 0 3
34998: ADD
34999: ST_TO_ADDR
// end ;
35000: GO 34819
35002: POP
35003: POP
// for Un in Arabian_buildings do
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_EXP 88
35013: PUSH
35014: FOR_IN
35015: IFFALSE 35080
// begin if IsOk ( GetUnitNumber ( Un [ 2 ] , Un [ 3 ] ) ) then
35017: LD_VAR 0 3
35021: PUSH
35022: LD_INT 2
35024: ARRAY
35025: PPUSH
35026: LD_VAR 0 3
35030: PUSH
35031: LD_INT 3
35033: ARRAY
35034: PPUSH
35035: CALL_OW 438
35039: PPUSH
35040: CALL_OW 302
35044: IFFALSE 35078
// SetSide ( GetUnitNumber ( Un [ 2 ] , Un [ 3 ] ) , americans ) ;
35046: LD_VAR 0 3
35050: PUSH
35051: LD_INT 2
35053: ARRAY
35054: PPUSH
35055: LD_VAR 0 3
35059: PUSH
35060: LD_INT 3
35062: ARRAY
35063: PPUSH
35064: CALL_OW 438
35068: PPUSH
35069: LD_EXP 176
35073: PPUSH
35074: CALL_OW 235
// end ;
35078: GO 35014
35080: POP
35081: POP
// DialogueOFF ;
35082: CALL_OW 7
// SA_OnLegionJoin ;
35086: CALL 56083 0 0
// Hint ( Legion ) ;
35090: LD_STRING Legion
35092: PPUSH
35093: CALL_OW 339
// ChangeMissionObjectives ( MlegionOut ) ;
35097: LD_STRING MlegionOut
35099: PPUSH
35100: CALL_OW 337
// Wait ( 0 0$5 ) ;
35104: LD_INT 175
35106: PPUSH
35107: CALL_OW 67
// if not ( Friend_has_come ) then
35111: LD_EXP 226
35115: NOT
35116: IFFALSE 35122
// FriendComing ;
35118: CALL 33031 0 0
// end ; DialogueOFF ;
35122: CALL_OW 7
// end ; end ;
35126: LD_VAR 0 1
35130: RET
// export function ArVehicleConstructed ( veh ) ; begin
35131: LD_INT 0
35133: PPUSH
// if ( GetWeapon ( veh ) = ru_siberium_rocket ) then
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 264
35143: PUSH
35144: LD_INT 48
35146: EQUAL
35147: IFFALSE 35305
// begin Wait ( 0 0$2 ) ;
35149: LD_INT 70
35151: PPUSH
35152: CALL_OW 67
// ComExitVehicle ( Kozlov ) ;
35156: LD_EXP 22
35160: PPUSH
35161: CALL_OW 121
// Wait ( 2 ) ;
35165: LD_INT 2
35167: PPUSH
35168: CALL_OW 67
// ComEnterUnit ( Kozlov , GetUnitNumber ( 78 , 12 ) ) ;
35172: LD_EXP 22
35176: PPUSH
35177: LD_INT 78
35179: PPUSH
35180: LD_INT 12
35182: PPUSH
35183: CALL_OW 438
35187: PPUSH
35188: CALL_OW 120
// AddComConstruct ( GetUnitNumber ( 78 , 12 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) ;
35192: LD_INT 78
35194: PPUSH
35195: LD_INT 12
35197: PPUSH
35198: CALL_OW 438
35202: PPUSH
35203: LD_INT 24
35205: PPUSH
35206: LD_INT 3
35208: PPUSH
35209: LD_INT 3
35211: PPUSH
35212: LD_INT 48
35214: PPUSH
35215: CALL_OW 185
// case Number_of_Arabian_rocket of 1 :
35219: LD_EXP 199
35223: PUSH
35224: LD_INT 1
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35275
35232: POP
// begin Construction_of_Arabian_rocket = false ;
35233: LD_ADDR_EXP 198
35237: PUSH
35238: LD_INT 0
35240: ST_TO_ADDR
// Number_of_Arabian_rocket = Number_of_Arabian_rocket + 1 ;
35241: LD_ADDR_EXP 199
35245: PUSH
35246: LD_EXP 199
35250: PUSH
35251: LD_INT 1
35253: PLUS
35254: ST_TO_ADDR
// SiberiteRocketAttack ( veh , 46 , 64 , 1 ) ;
35255: LD_VAR 0 1
35259: PPUSH
35260: LD_INT 46
35262: PPUSH
35263: LD_INT 64
35265: PPUSH
35266: LD_INT 1
35268: PPUSH
35269: CALL 32939 0 4
// end ; 2 :
35273: GO 35305
35275: LD_INT 2
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35304
35283: POP
// SiberiteRocketAttack ( veh , 155 , 60 , 2 ) ; end ;
35284: LD_VAR 0 1
35288: PPUSH
35289: LD_INT 155
35291: PPUSH
35292: LD_INT 60
35294: PPUSH
35295: LD_INT 2
35297: PPUSH
35298: CALL 32939 0 4
35302: GO 35305
35304: POP
// end ; end ; end_of_file
35305: LD_VAR 0 2
35309: RET
// function PrepareAndCreateVehicleR1P ( number , chassis , engine , control , weapon ) ; var veh , i , person ; begin
35310: LD_INT 0
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
// uc_side = russians1 ;
35316: LD_ADDR_OWVAR 20
35320: PUSH
35321: LD_EXP 179
35325: ST_TO_ADDR
// uc_direction = 0 ;
35326: LD_ADDR_OWVAR 24
35330: PUSH
35331: LD_INT 0
35333: ST_TO_ADDR
// uc_nation = nation_russian ;
35334: LD_ADDR_OWVAR 21
35338: PUSH
35339: LD_INT 3
35341: ST_TO_ADDR
// for i = 1 to number do
35342: LD_ADDR_VAR 0 8
35346: PUSH
35347: DOUBLE
35348: LD_INT 1
35350: DEC
35351: ST_TO_ADDR
35352: LD_VAR 0 1
35356: PUSH
35357: FOR_TO
35358: IFFALSE 35494
// begin vc_chassis = chassis ;
35360: LD_ADDR_OWVAR 37
35364: PUSH
35365: LD_VAR 0 2
35369: ST_TO_ADDR
// vc_control = control ;
35370: LD_ADDR_OWVAR 38
35374: PUSH
35375: LD_VAR 0 4
35379: ST_TO_ADDR
// vc_engine = engine ;
35380: LD_ADDR_OWVAR 39
35384: PUSH
35385: LD_VAR 0 3
35389: ST_TO_ADDR
// vc_weapon = weapon ;
35390: LD_ADDR_OWVAR 40
35394: PUSH
35395: LD_VAR 0 5
35399: ST_TO_ADDR
// veh = CreateVehicle ;
35400: LD_ADDR_VAR 0 7
35404: PUSH
35405: CALL_OW 45
35409: ST_TO_ADDR
// New_Patrol_Group = New_Patrol_Group ^ veh ;
35410: LD_ADDR_EXP 122
35414: PUSH
35415: LD_EXP 122
35419: PUSH
35420: LD_VAR 0 7
35424: ADD
35425: ST_TO_ADDR
// if control = control_manual then
35426: LD_VAR 0 4
35430: PUSH
35431: LD_INT 1
35433: EQUAL
35434: IFFALSE 35492
// begin PrepareMechanic ( 0 , 7 + Difficulty ) ;
35436: LD_INT 0
35438: PPUSH
35439: LD_INT 7
35441: PUSH
35442: LD_OWVAR 67
35446: PLUS
35447: PPUSH
35448: CALL_OW 383
// Person = CreateHuman ;
35452: LD_ADDR_VAR 0 9
35456: PUSH
35457: CALL_OW 44
35461: ST_TO_ADDR
// PlaceHumanInUnit ( Person , veh ) ;
35462: LD_VAR 0 9
35466: PPUSH
35467: LD_VAR 0 7
35471: PPUSH
35472: CALL_OW 52
// New_Patrol_Group = New_Patrol_Group ^ Person ;
35476: LD_ADDR_EXP 122
35480: PUSH
35481: LD_EXP 122
35485: PUSH
35486: LD_VAR 0 9
35490: ADD
35491: ST_TO_ADDR
// end ; end ;
35492: GO 35357
35494: POP
35495: POP
// end ;
35496: LD_VAR 0 6
35500: RET
// function PrepareAndCreateVehicleR1 ( number , chassis , engine , control , weapon ) ; var veh , i , person ; begin
35501: LD_INT 0
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
// uc_side = russians1 ;
35507: LD_ADDR_OWVAR 20
35511: PUSH
35512: LD_EXP 179
35516: ST_TO_ADDR
// uc_direction = 0 ;
35517: LD_ADDR_OWVAR 24
35521: PUSH
35522: LD_INT 0
35524: ST_TO_ADDR
// uc_nation = nation_russian ;
35525: LD_ADDR_OWVAR 21
35529: PUSH
35530: LD_INT 3
35532: ST_TO_ADDR
// for i = 1 to number do
35533: LD_ADDR_VAR 0 8
35537: PUSH
35538: DOUBLE
35539: LD_INT 1
35541: DEC
35542: ST_TO_ADDR
35543: LD_VAR 0 1
35547: PUSH
35548: FOR_TO
35549: IFFALSE 35685
// begin vc_chassis = chassis ;
35551: LD_ADDR_OWVAR 37
35555: PUSH
35556: LD_VAR 0 2
35560: ST_TO_ADDR
// vc_control = control ;
35561: LD_ADDR_OWVAR 38
35565: PUSH
35566: LD_VAR 0 4
35570: ST_TO_ADDR
// vc_engine = engine ;
35571: LD_ADDR_OWVAR 39
35575: PUSH
35576: LD_VAR 0 3
35580: ST_TO_ADDR
// vc_weapon = weapon ;
35581: LD_ADDR_OWVAR 40
35585: PUSH
35586: LD_VAR 0 5
35590: ST_TO_ADDR
// veh = CreateVehicle ;
35591: LD_ADDR_VAR 0 7
35595: PUSH
35596: CALL_OW 45
35600: ST_TO_ADDR
// R1_Attack_Group = R1_Attack_Group ^ veh ;
35601: LD_ADDR_EXP 118
35605: PUSH
35606: LD_EXP 118
35610: PUSH
35611: LD_VAR 0 7
35615: ADD
35616: ST_TO_ADDR
// if control = control_manual then
35617: LD_VAR 0 4
35621: PUSH
35622: LD_INT 1
35624: EQUAL
35625: IFFALSE 35683
// begin PrepareMechanic ( 0 , 7 + Difficulty ) ;
35627: LD_INT 0
35629: PPUSH
35630: LD_INT 7
35632: PUSH
35633: LD_OWVAR 67
35637: PLUS
35638: PPUSH
35639: CALL_OW 383
// Person = CreateHuman ;
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: CALL_OW 44
35652: ST_TO_ADDR
// PlaceHumanInUnit ( Person , veh ) ;
35653: LD_VAR 0 9
35657: PPUSH
35658: LD_VAR 0 7
35662: PPUSH
35663: CALL_OW 52
// R1_Attack_Group = R1_Attack_Group ^ Person ;
35667: LD_ADDR_EXP 118
35671: PUSH
35672: LD_EXP 118
35676: PUSH
35677: LD_VAR 0 9
35681: ADD
35682: ST_TO_ADDR
// end ; end ;
35683: GO 35548
35685: POP
35686: POP
// end ;
35687: LD_VAR 0 6
35691: RET
// function GetRandomVehicle ( time ) ; var Rand_Veh , Selected , Credits , Probab , engine ; begin
35692: LD_INT 0
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
// Selected = false ;
35700: LD_ADDR_VAR 0 4
35704: PUSH
35705: LD_INT 0
35707: ST_TO_ADDR
// if time <= 2 then
35708: LD_VAR 0 1
35712: PUSH
35713: LD_INT 2
35715: LESSEQUAL
35716: IFFALSE 35728
// engine = engine_combustion else
35718: LD_ADDR_VAR 0 7
35722: PUSH
35723: LD_INT 1
35725: ST_TO_ADDR
35726: GO 35736
// engine = engine_siberite ;
35728: LD_ADDR_VAR 0 7
35732: PUSH
35733: LD_INT 3
35735: ST_TO_ADDR
// repeat Probab = Rand ( 1 , 100 ) ;
35736: LD_ADDR_VAR 0 6
35740: PUSH
35741: LD_INT 1
35743: PPUSH
35744: LD_INT 100
35746: PPUSH
35747: CALL_OW 12
35751: ST_TO_ADDR
// case time of 1 :
35752: LD_VAR 0 1
35756: PUSH
35757: LD_INT 1
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35765
35763: GO 35803
35765: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ; 2 :
35766: LD_ADDR_VAR 0 3
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: LD_INT 4
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PPUSH
35792: LD_INT 4
35794: PPUSH
35795: CALL_OW 12
35799: ARRAY
35800: ST_TO_ADDR
35801: GO 36078
35803: LD_INT 2
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35811
35809: GO 35857
35811: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 , 5 , 6 ] [ Rand ( 1 , 6 ) ] ; 3 :
35812: LD_ADDR_VAR 0 3
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 3
35825: PUSH
35826: LD_INT 4
35828: PUSH
35829: LD_INT 5
35831: PUSH
35832: LD_INT 6
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: PPUSH
35846: LD_INT 6
35848: PPUSH
35849: CALL_OW 12
35853: ARRAY
35854: ST_TO_ADDR
35855: GO 36078
35857: LD_INT 3
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 35907
35865: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 ] [ Rand ( 1 , 5 ) ] ; 4 :
35866: LD_ADDR_VAR 0 3
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: LD_INT 4
35876: PUSH
35877: LD_INT 5
35879: PUSH
35880: LD_INT 6
35882: PUSH
35883: LD_INT 7
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PPUSH
35896: LD_INT 5
35898: PPUSH
35899: CALL_OW 12
35903: ARRAY
35904: ST_TO_ADDR
35905: GO 36078
35907: LD_INT 4
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35915
35913: GO 35961
35915: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 , 8 ] [ Rand ( 1 , 6 ) ] ; 5 :
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_INT 3
35923: PUSH
35924: LD_INT 4
35926: PUSH
35927: LD_INT 5
35929: PUSH
35930: LD_INT 6
35932: PUSH
35933: LD_INT 7
35935: PUSH
35936: LD_INT 8
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: PPUSH
35950: LD_INT 6
35952: PPUSH
35953: CALL_OW 12
35957: ARRAY
35958: ST_TO_ADDR
35959: GO 36078
35961: LD_INT 5
35963: DOUBLE
35964: EQUAL
35965: IFTRUE 35969
35967: GO 36015
35969: POP
// Rand_Veh = [ 4 , 5 , 6 , 7 , 8 , 9 ] [ Rand ( 1 , 6 ) ] ; 6 :
35970: LD_ADDR_VAR 0 3
35974: PUSH
35975: LD_INT 4
35977: PUSH
35978: LD_INT 5
35980: PUSH
35981: LD_INT 6
35983: PUSH
35984: LD_INT 7
35986: PUSH
35987: LD_INT 8
35989: PUSH
35990: LD_INT 9
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: PPUSH
36004: LD_INT 6
36006: PPUSH
36007: CALL_OW 12
36011: ARRAY
36012: ST_TO_ADDR
36013: GO 36078
36015: LD_INT 6
36017: DOUBLE
36018: EQUAL
36019: IFTRUE 36023
36021: GO 36077
36023: POP
// Rand_Veh = [ 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] [ Rand ( 1 , 8 ) ] ; end ;
36024: LD_ADDR_VAR 0 3
36028: PUSH
36029: LD_INT 5
36031: PUSH
36032: LD_INT 6
36034: PUSH
36035: LD_INT 7
36037: PUSH
36038: LD_INT 8
36040: PUSH
36041: LD_INT 9
36043: PUSH
36044: LD_INT 10
36046: PUSH
36047: LD_INT 11
36049: PUSH
36050: LD_INT 12
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PPUSH
36066: LD_INT 8
36068: PPUSH
36069: CALL_OW 12
36073: ARRAY
36074: ST_TO_ADDR
36075: GO 36078
36077: POP
// case Rand_Veh of 1 :
36078: LD_VAR 0 3
36082: PUSH
36083: LD_INT 1
36085: DOUBLE
36086: EQUAL
36087: IFTRUE 36091
36089: GO 36171
36091: POP
// begin if ( time <= 1 and Probab < 60 ) or ( time <= 3 and Probab < 20 ) then
36092: LD_VAR 0 1
36096: PUSH
36097: LD_INT 1
36099: LESSEQUAL
36100: PUSH
36101: LD_VAR 0 6
36105: PUSH
36106: LD_INT 60
36108: LESS
36109: AND
36110: PUSH
36111: LD_VAR 0 1
36115: PUSH
36116: LD_INT 3
36118: LESSEQUAL
36119: PUSH
36120: LD_VAR 0 6
36124: PUSH
36125: LD_INT 20
36127: LESS
36128: AND
36129: OR
36130: IFFALSE 36169
// begin Selected = true ;
36132: LD_ADDR_VAR 0 4
36136: PUSH
36137: LD_INT 1
36139: ST_TO_ADDR
// Credits = 3 ;
36140: LD_ADDR_VAR 0 5
36144: PUSH
36145: LD_INT 3
36147: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_heavy_machine_gun ) ;
36148: LD_INT 1
36150: PPUSH
36151: LD_INT 22
36153: PPUSH
36154: LD_VAR 0 7
36158: PPUSH
36159: LD_INT 3
36161: PPUSH
36162: LD_INT 42
36164: PPUSH
36165: CALL 35501 0 5
// end ; end ; 2 :
36169: GO 36858
36171: LD_INT 2
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36179
36177: GO 36259
36179: POP
// begin if ( time <= 1 and Probab < 80 ) or ( time <= 3 and Probab < 30 ) then
36180: LD_VAR 0 1
36184: PUSH
36185: LD_INT 1
36187: LESSEQUAL
36188: PUSH
36189: LD_VAR 0 6
36193: PUSH
36194: LD_INT 80
36196: LESS
36197: AND
36198: PUSH
36199: LD_VAR 0 1
36203: PUSH
36204: LD_INT 3
36206: LESSEQUAL
36207: PUSH
36208: LD_VAR 0 6
36212: PUSH
36213: LD_INT 30
36215: LESS
36216: AND
36217: OR
36218: IFFALSE 36257
// begin Selected = true ;
36220: LD_ADDR_VAR 0 4
36224: PUSH
36225: LD_INT 1
36227: ST_TO_ADDR
// Credits = 4 ;
36228: LD_ADDR_VAR 0 5
36232: PUSH
36233: LD_INT 4
36235: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_heavy_machine_gun ) ;
36236: LD_INT 1
36238: PPUSH
36239: LD_INT 24
36241: PPUSH
36242: LD_VAR 0 7
36246: PPUSH
36247: LD_INT 3
36249: PPUSH
36250: LD_INT 42
36252: PPUSH
36253: CALL 35501 0 5
// end ; end ; 4 :
36257: GO 36858
36259: LD_INT 4
36261: DOUBLE
36262: EQUAL
36263: IFTRUE 36267
36265: GO 36367
36267: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 80 ) or ( time > 3 and Probab < 40 ) then
36268: LD_VAR 0 1
36272: PUSH
36273: LD_INT 1
36275: LESSEQUAL
36276: PUSH
36277: LD_VAR 0 6
36281: PUSH
36282: LD_INT 100
36284: LESS
36285: AND
36286: PUSH
36287: LD_VAR 0 1
36291: PUSH
36292: LD_INT 3
36294: LESSEQUAL
36295: PUSH
36296: LD_VAR 0 6
36300: PUSH
36301: LD_INT 80
36303: LESS
36304: AND
36305: OR
36306: PUSH
36307: LD_VAR 0 1
36311: PUSH
36312: LD_INT 3
36314: GREATER
36315: PUSH
36316: LD_VAR 0 6
36320: PUSH
36321: LD_INT 40
36323: LESS
36324: AND
36325: OR
36326: IFFALSE 36365
// begin Selected = true ;
36328: LD_ADDR_VAR 0 4
36332: PUSH
36333: LD_INT 1
36335: ST_TO_ADDR
// Credits = 5 ;
36336: LD_ADDR_VAR 0 5
36340: PUSH
36341: LD_INT 5
36343: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_gatling_gun ) end ;
36344: LD_INT 1
36346: PPUSH
36347: LD_INT 22
36349: PPUSH
36350: LD_VAR 0 7
36354: PPUSH
36355: LD_INT 3
36357: PPUSH
36358: LD_INT 43
36360: PPUSH
36361: CALL 35501 0 5
// end ; 3 :
36365: GO 36858
36367: LD_INT 3
36369: DOUBLE
36370: EQUAL
36371: IFTRUE 36375
36373: GO 36455
36375: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 40 ) then
36376: LD_VAR 0 1
36380: PUSH
36381: LD_INT 1
36383: LESSEQUAL
36384: PUSH
36385: LD_VAR 0 6
36389: PUSH
36390: LD_INT 100
36392: LESS
36393: AND
36394: PUSH
36395: LD_VAR 0 1
36399: PUSH
36400: LD_INT 3
36402: LESSEQUAL
36403: PUSH
36404: LD_VAR 0 6
36408: PUSH
36409: LD_INT 40
36411: LESS
36412: AND
36413: OR
36414: IFFALSE 36453
// begin Selected = true ;
36416: LD_ADDR_VAR 0 4
36420: PUSH
36421: LD_INT 1
36423: ST_TO_ADDR
// Credits = 5 ;
36424: LD_ADDR_VAR 0 5
36428: PUSH
36429: LD_INT 5
36431: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_gun ) end ;
36432: LD_INT 1
36434: PPUSH
36435: LD_INT 22
36437: PPUSH
36438: LD_VAR 0 7
36442: PPUSH
36443: LD_INT 3
36445: PPUSH
36446: LD_INT 44
36448: PPUSH
36449: CALL 35501 0 5
// end ; 5 :
36453: GO 36858
36455: LD_INT 5
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36463
36461: GO 36503
36463: POP
// begin Selected = true ;
36464: LD_ADDR_VAR 0 4
36468: PUSH
36469: LD_INT 1
36471: ST_TO_ADDR
// Credits = 7 ;
36472: LD_ADDR_VAR 0 5
36476: PUSH
36477: LD_INT 7
36479: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_gatling_gun ) end ; 6 :
36480: LD_INT 1
36482: PPUSH
36483: LD_INT 24
36485: PPUSH
36486: LD_VAR 0 7
36490: PPUSH
36491: LD_INT 3
36493: PPUSH
36494: LD_INT 43
36496: PPUSH
36497: CALL 35501 0 5
36501: GO 36858
36503: LD_INT 6
36505: DOUBLE
36506: EQUAL
36507: IFTRUE 36511
36509: GO 36611
36511: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 60 ) or ( time > 3 and Probab < 20 ) then
36512: LD_VAR 0 1
36516: PUSH
36517: LD_INT 1
36519: LESSEQUAL
36520: PUSH
36521: LD_VAR 0 6
36525: PUSH
36526: LD_INT 100
36528: LESS
36529: AND
36530: PUSH
36531: LD_VAR 0 1
36535: PUSH
36536: LD_INT 3
36538: LESSEQUAL
36539: PUSH
36540: LD_VAR 0 6
36544: PUSH
36545: LD_INT 60
36547: LESS
36548: AND
36549: OR
36550: PUSH
36551: LD_VAR 0 1
36555: PUSH
36556: LD_INT 3
36558: GREATER
36559: PUSH
36560: LD_VAR 0 6
36564: PUSH
36565: LD_INT 20
36567: LESS
36568: AND
36569: OR
36570: IFFALSE 36609
// begin Selected = true ;
36572: LD_ADDR_VAR 0 4
36576: PUSH
36577: LD_INT 1
36579: ST_TO_ADDR
// Credits = 7 ;
36580: LD_ADDR_VAR 0 5
36584: PUSH
36585: LD_INT 7
36587: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_gun ) end ;
36588: LD_INT 1
36590: PPUSH
36591: LD_INT 24
36593: PPUSH
36594: LD_VAR 0 7
36598: PPUSH
36599: LD_INT 3
36601: PPUSH
36602: LD_INT 44
36604: PPUSH
36605: CALL 35501 0 5
// end ; 7 :
36609: GO 36858
36611: LD_INT 7
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36659
36619: POP
// begin Selected = true ;
36620: LD_ADDR_VAR 0 4
36624: PUSH
36625: LD_INT 1
36627: ST_TO_ADDR
// Credits = 11 ;
36628: LD_ADDR_VAR 0 5
36632: PUSH
36633: LD_INT 11
36635: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_heavy_gun ) ;
36636: LD_INT 1
36638: PPUSH
36639: LD_INT 24
36641: PPUSH
36642: LD_VAR 0 7
36646: PPUSH
36647: LD_INT 3
36649: PPUSH
36650: LD_INT 46
36652: PPUSH
36653: CALL 35501 0 5
// end ; 8 :
36657: GO 36858
36659: LD_INT 8
36661: DOUBLE
36662: EQUAL
36663: IFTRUE 36667
36665: GO 36707
36667: POP
// begin Selected = true ;
36668: LD_ADDR_VAR 0 4
36672: PUSH
36673: LD_INT 1
36675: ST_TO_ADDR
// Credits = 9 ;
36676: LD_ADDR_VAR 0 5
36680: PUSH
36681: LD_INT 9
36683: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_rocket_launcher ) ;
36684: LD_INT 1
36686: PPUSH
36687: LD_INT 22
36689: PPUSH
36690: LD_VAR 0 7
36694: PPUSH
36695: LD_INT 3
36697: PPUSH
36698: LD_INT 45
36700: PPUSH
36701: CALL 35501 0 5
// end ; 9 :
36705: GO 36858
36707: LD_INT 9
36709: DOUBLE
36710: EQUAL
36711: IFTRUE 36715
36713: GO 36755
36715: POP
// begin Selected = true ;
36716: LD_ADDR_VAR 0 4
36720: PUSH
36721: LD_INT 1
36723: ST_TO_ADDR
// Credits = 11 ;
36724: LD_ADDR_VAR 0 5
36728: PUSH
36729: LD_INT 11
36731: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket_launcher ) ;
36732: LD_INT 1
36734: PPUSH
36735: LD_INT 24
36737: PPUSH
36738: LD_VAR 0 7
36742: PPUSH
36743: LD_INT 3
36745: PPUSH
36746: LD_INT 45
36748: PPUSH
36749: CALL 35501 0 5
// end ; 10 , 11 :
36753: GO 36858
36755: LD_INT 10
36757: DOUBLE
36758: EQUAL
36759: IFTRUE 36769
36761: LD_INT 11
36763: DOUBLE
36764: EQUAL
36765: IFTRUE 36769
36767: GO 36809
36769: POP
// begin Selected = true ;
36770: LD_ADDR_VAR 0 4
36774: PUSH
36775: LD_INT 1
36777: ST_TO_ADDR
// Credits = 15 ;
36778: LD_ADDR_VAR 0 5
36782: PUSH
36783: LD_INT 15
36785: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket ) ;
36786: LD_INT 1
36788: PPUSH
36789: LD_INT 24
36791: PPUSH
36792: LD_VAR 0 7
36796: PPUSH
36797: LD_INT 3
36799: PPUSH
36800: LD_INT 47
36802: PPUSH
36803: CALL 35501 0 5
// end ; 12 :
36807: GO 36858
36809: LD_INT 12
36811: DOUBLE
36812: EQUAL
36813: IFTRUE 36817
36815: GO 36857
36817: POP
// begin Selected = true ;
36818: LD_ADDR_VAR 0 4
36822: PUSH
36823: LD_INT 1
36825: ST_TO_ADDR
// Credits = 15 ;
36826: LD_ADDR_VAR 0 5
36830: PUSH
36831: LD_INT 15
36833: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket ) ;
36834: LD_INT 1
36836: PPUSH
36837: LD_INT 24
36839: PPUSH
36840: LD_VAR 0 7
36844: PPUSH
36845: LD_INT 3
36847: PPUSH
36848: LD_INT 47
36850: PPUSH
36851: CALL 35501 0 5
// end ; end ;
36855: GO 36858
36857: POP
// until Selected ;
36858: LD_VAR 0 4
36862: IFFALSE 35736
// Result = Credits ;
36864: LD_ADDR_VAR 0 2
36868: PUSH
36869: LD_VAR 0 5
36873: ST_TO_ADDR
// end ;
36874: LD_VAR 0 2
36878: RET
// function GenerateGroup ( Credits , time ) ; var Used_Credits ; begin
36879: LD_INT 0
36881: PPUSH
36882: PPUSH
// repeat Used_Credits = Used_Credits + GetRandomVehicle ( time ) ;
36883: LD_ADDR_VAR 0 4
36887: PUSH
36888: LD_VAR 0 4
36892: PUSH
36893: LD_VAR 0 2
36897: PPUSH
36898: CALL 35692 0 1
36902: PLUS
36903: ST_TO_ADDR
// until Credits < Used_Credits ;
36904: LD_VAR 0 1
36908: PUSH
36909: LD_VAR 0 4
36913: LESS
36914: IFFALSE 36883
// result = Used_Credits ;
36916: LD_ADDR_VAR 0 3
36920: PUSH
36921: LD_VAR 0 4
36925: ST_TO_ADDR
// end ;
36926: LD_VAR 0 3
36930: RET
// function GenerateAttackingGroup ; var Power , Next_time , Number_of_units , Person , veh , i , Used_Credits , Credits , Strength_of_attack ; begin
36931: LD_INT 0
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
36939: PPUSH
36940: PPUSH
36941: PPUSH
36942: PPUSH
// Power = Rand ( 1 , 3 ) ;
36943: LD_ADDR_VAR 0 2
36947: PUSH
36948: LD_INT 1
36950: PPUSH
36951: LD_INT 3
36953: PPUSH
36954: CALL_OW 12
36958: ST_TO_ADDR
// Number_of_units = Rand ( 1 , 2 ) ;
36959: LD_ADDR_VAR 0 4
36963: PUSH
36964: LD_INT 1
36966: PPUSH
36967: LD_INT 2
36969: PPUSH
36970: CALL_OW 12
36974: ST_TO_ADDR
// R1_Attack_Group = [ ] ;
36975: LD_ADDR_EXP 118
36979: PUSH
36980: EMPTY
36981: ST_TO_ADDR
// if tick < 6 6$0 then
36982: LD_OWVAR 1
36986: PUSH
36987: LD_INT 12600
36989: LESS
36990: IFFALSE 37334
// begin case R1_Attack_Counter of 1 :
36992: LD_EXP 116
36996: PUSH
36997: LD_INT 1
36999: DOUBLE
37000: EQUAL
37001: IFTRUE 37005
37003: GO 37071
37005: POP
// begin PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gun ) ;
37006: LD_INT 1
37008: PPUSH
37009: LD_INT 22
37011: PPUSH
37012: LD_INT 1
37014: PPUSH
37015: LD_INT 3
37017: PPUSH
37018: LD_INT 44
37020: PPUSH
37021: CALL 35501 0 5
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
37025: LD_INT 1
37027: PPUSH
37028: LD_INT 22
37030: PPUSH
37031: LD_INT 1
37033: PPUSH
37034: LD_INT 3
37036: PPUSH
37037: LD_INT 43
37039: PPUSH
37040: CALL 35501 0 5
// R1_attack_time = [ 0 0$40 , 0 0$30 , 0 0$20 ] [ Difficulty ] ;
37044: LD_ADDR_EXP 114
37048: PUSH
37049: LD_INT 1400
37051: PUSH
37052: LD_INT 1050
37054: PUSH
37055: LD_INT 700
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: PUSH
37063: LD_OWVAR 67
37067: ARRAY
37068: ST_TO_ADDR
// end ; 2 :
37069: GO 37332
37071: LD_INT 2
37073: DOUBLE
37074: EQUAL
37075: IFTRUE 37079
37077: GO 37143
37079: POP
// begin PrepareAndCreateVehicleR1 ( [ 2 , 3 , 4 ] [ Difficulty ] , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
37080: LD_INT 2
37082: PUSH
37083: LD_INT 3
37085: PUSH
37086: LD_INT 4
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: PUSH
37094: LD_OWVAR 67
37098: ARRAY
37099: PPUSH
37100: LD_INT 22
37102: PPUSH
37103: LD_INT 1
37105: PPUSH
37106: LD_INT 3
37108: PPUSH
37109: LD_INT 43
37111: PPUSH
37112: CALL 35501 0 5
// R1_attack_time = [ 3 3$0 , 3 3$00 , 3 3$00 ] [ Difficulty ] ;
37116: LD_ADDR_EXP 114
37120: PUSH
37121: LD_INT 6300
37123: PUSH
37124: LD_INT 6300
37126: PUSH
37127: LD_INT 6300
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: PUSH
37135: LD_OWVAR 67
37139: ARRAY
37140: ST_TO_ADDR
// end ; 3 :
37141: GO 37332
37143: LD_INT 3
37145: DOUBLE
37146: EQUAL
37147: IFTRUE 37151
37149: GO 37217
37151: POP
// begin PrepareAndCreateVehicleR1 ( 2 , ru_heavy_tracked , engine_combustion , control_computer , ru_gun ) ;
37152: LD_INT 2
37154: PPUSH
37155: LD_INT 24
37157: PPUSH
37158: LD_INT 1
37160: PPUSH
37161: LD_INT 3
37163: PPUSH
37164: LD_INT 44
37166: PPUSH
37167: CALL 35501 0 5
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
37171: LD_INT 1
37173: PPUSH
37174: LD_INT 22
37176: PPUSH
37177: LD_INT 1
37179: PPUSH
37180: LD_INT 3
37182: PPUSH
37183: LD_INT 43
37185: PPUSH
37186: CALL 35501 0 5
// R1_attack_time = [ 2 2$50 , 2 2$20 , 2 2$0 ] [ Difficulty ] ;
37190: LD_ADDR_EXP 114
37194: PUSH
37195: LD_INT 5950
37197: PUSH
37198: LD_INT 4900
37200: PUSH
37201: LD_INT 4200
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: PUSH
37209: LD_OWVAR 67
37213: ARRAY
37214: ST_TO_ADDR
// end ; else
37215: GO 37332
37217: POP
// begin Credits = [ 8 , 11 , 14 ] [ Difficulty ] ;
37218: LD_ADDR_VAR 0 9
37222: PUSH
37223: LD_INT 8
37225: PUSH
37226: LD_INT 11
37228: PUSH
37229: LD_INT 14
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: PUSH
37237: LD_OWVAR 67
37241: ARRAY
37242: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 1 ) ;
37243: LD_ADDR_VAR 0 8
37247: PUSH
37248: LD_VAR 0 9
37252: PUSH
37253: LD_EXP 191
37257: PLUS
37258: PPUSH
37259: LD_INT 1
37261: PPUSH
37262: CALL 36879 0 2
37266: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37267: LD_ADDR_EXP 191
37271: PUSH
37272: LD_VAR 0 9
37276: PUSH
37277: LD_EXP 191
37281: PLUS
37282: PUSH
37283: LD_VAR 0 8
37287: MINUS
37288: ST_TO_ADDR
// R1_attack_time = [ 2 2$50 , 2 2$20 , 2 2$0 ] [ Difficulty ] ;
37289: LD_ADDR_EXP 114
37293: PUSH
37294: LD_INT 5950
37296: PUSH
37297: LD_INT 4900
37299: PUSH
37300: LD_INT 4200
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: PUSH
37308: LD_OWVAR 67
37312: ARRAY
37313: ST_TO_ADDR
// if R1_attack_time > 6 6$0 then
37314: LD_EXP 114
37318: PUSH
37319: LD_INT 12600
37321: GREATER
37322: IFFALSE 37332
// R1_Attack_Counter = 0 ;
37324: LD_ADDR_EXP 116
37328: PUSH
37329: LD_INT 0
37331: ST_TO_ADDR
// end ; end ; end else
37332: GO 38166
// if tick < 14 14$0 then
37334: LD_OWVAR 1
37338: PUSH
37339: LD_INT 29400
37341: LESS
37342: IFFALSE 37574
// begin case R1_Attack_Counter of 1 :
37344: LD_EXP 116
37348: PUSH
37349: LD_INT 1
37351: DOUBLE
37352: EQUAL
37353: IFTRUE 37357
37355: GO 37457
37357: POP
// begin case Difficulty of 1 , 2 :
37358: LD_OWVAR 67
37362: PUSH
37363: LD_INT 1
37365: DOUBLE
37366: EQUAL
37367: IFTRUE 37377
37369: LD_INT 2
37371: DOUBLE
37372: EQUAL
37373: IFTRUE 37377
37375: GO 37399
37377: POP
// PrepareAndCreateVehicleR1 ( 3 , ru_heavy_tracked , engine_siberite , control_computer , ru_gun ) ; 3 :
37378: LD_INT 3
37380: PPUSH
37381: LD_INT 24
37383: PPUSH
37384: LD_INT 3
37386: PPUSH
37387: LD_INT 3
37389: PPUSH
37390: LD_INT 44
37392: PPUSH
37393: CALL 35501 0 5
37397: GO 37430
37399: LD_INT 3
37401: DOUBLE
37402: EQUAL
37403: IFTRUE 37407
37405: GO 37429
37407: POP
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ) ; end ;
37408: LD_INT 1
37410: PPUSH
37411: LD_INT 22
37413: PPUSH
37414: LD_INT 3
37416: PPUSH
37417: LD_INT 3
37419: PPUSH
37420: LD_INT 45
37422: PPUSH
37423: CALL 35501 0 5
37427: GO 37430
37429: POP
// R1_attack_time = [ 1 1$50 , 1 1$20 , 1 1$30 ] [ Difficulty ] ;
37430: LD_ADDR_EXP 114
37434: PUSH
37435: LD_INT 3850
37437: PUSH
37438: LD_INT 2800
37440: PUSH
37441: LD_INT 3150
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: PUSH
37449: LD_OWVAR 67
37453: ARRAY
37454: ST_TO_ADDR
// end ; else
37455: GO 37572
37457: POP
// begin Credits = [ 14 , 18 , 22 ] [ Difficulty ] ;
37458: LD_ADDR_VAR 0 9
37462: PUSH
37463: LD_INT 14
37465: PUSH
37466: LD_INT 18
37468: PUSH
37469: LD_INT 22
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: PUSH
37477: LD_OWVAR 67
37481: ARRAY
37482: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 2 ) ;
37483: LD_ADDR_VAR 0 8
37487: PUSH
37488: LD_VAR 0 9
37492: PUSH
37493: LD_EXP 191
37497: PLUS
37498: PPUSH
37499: LD_INT 2
37501: PPUSH
37502: CALL 36879 0 2
37506: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37507: LD_ADDR_EXP 191
37511: PUSH
37512: LD_VAR 0 9
37516: PUSH
37517: LD_EXP 191
37521: PLUS
37522: PUSH
37523: LD_VAR 0 8
37527: MINUS
37528: ST_TO_ADDR
// R1_attack_time = [ 3 3$30 , 3 3$0 , 2 2$40 ] [ Difficulty ] ;
37529: LD_ADDR_EXP 114
37533: PUSH
37534: LD_INT 7350
37536: PUSH
37537: LD_INT 6300
37539: PUSH
37540: LD_INT 5600
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: PUSH
37548: LD_OWVAR 67
37552: ARRAY
37553: ST_TO_ADDR
// if R1_attack_time > 14 14$0 then
37554: LD_EXP 114
37558: PUSH
37559: LD_INT 29400
37561: GREATER
37562: IFFALSE 37572
// R1_Attack_Counter = 0 ;
37564: LD_ADDR_EXP 116
37568: PUSH
37569: LD_INT 0
37571: ST_TO_ADDR
// end ; end ; end else
37572: GO 38166
// if tick < 25 25$0 then
37574: LD_OWVAR 1
37578: PUSH
37579: LD_INT 52500
37581: LESS
37582: IFFALSE 37700
// begin Credits = [ 8 , 10 , 12 ] [ Difficulty ] ;
37584: LD_ADDR_VAR 0 9
37588: PUSH
37589: LD_INT 8
37591: PUSH
37592: LD_INT 10
37594: PUSH
37595: LD_INT 12
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: PUSH
37603: LD_OWVAR 67
37607: ARRAY
37608: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 3 ) ;
37609: LD_ADDR_VAR 0 8
37613: PUSH
37614: LD_VAR 0 9
37618: PUSH
37619: LD_EXP 191
37623: PLUS
37624: PPUSH
37625: LD_INT 3
37627: PPUSH
37628: CALL 36879 0 2
37632: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37633: LD_ADDR_EXP 191
37637: PUSH
37638: LD_VAR 0 9
37642: PUSH
37643: LD_EXP 191
37647: PLUS
37648: PUSH
37649: LD_VAR 0 8
37653: MINUS
37654: ST_TO_ADDR
// R1_attack_time = [ 2 2$0 , 1 1$50 , 1 1$40 ] [ Difficulty ] ;
37655: LD_ADDR_EXP 114
37659: PUSH
37660: LD_INT 4200
37662: PUSH
37663: LD_INT 3850
37665: PUSH
37666: LD_INT 3500
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: PUSH
37674: LD_OWVAR 67
37678: ARRAY
37679: ST_TO_ADDR
// if R1_attack_time > 25 25$0 then
37680: LD_EXP 114
37684: PUSH
37685: LD_INT 52500
37687: GREATER
37688: IFFALSE 37698
// R1_Attack_Counter = 0 ;
37690: LD_ADDR_EXP 116
37694: PUSH
37695: LD_INT 0
37697: ST_TO_ADDR
// end else
37698: GO 38166
// if tick < Rus_Attack_time then
37700: LD_OWVAR 1
37704: PUSH
37705: LD_EXP 130
37709: LESS
37710: IFFALSE 37810
// begin Credits = [ 14 , 18 , 22 ] [ Difficulty ] ;
37712: LD_ADDR_VAR 0 9
37716: PUSH
37717: LD_INT 14
37719: PUSH
37720: LD_INT 18
37722: PUSH
37723: LD_INT 22
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: PUSH
37731: LD_OWVAR 67
37735: ARRAY
37736: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 4 ) ;
37737: LD_ADDR_VAR 0 8
37741: PUSH
37742: LD_VAR 0 9
37746: PUSH
37747: LD_EXP 191
37751: PLUS
37752: PPUSH
37753: LD_INT 4
37755: PPUSH
37756: CALL 36879 0 2
37760: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37761: LD_ADDR_EXP 191
37765: PUSH
37766: LD_VAR 0 9
37770: PUSH
37771: LD_EXP 191
37775: PLUS
37776: PUSH
37777: LD_VAR 0 8
37781: MINUS
37782: ST_TO_ADDR
// R1_attack_time = [ 4 4$0 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
37783: LD_ADDR_EXP 114
37787: PUSH
37788: LD_INT 8400
37790: PUSH
37791: LD_INT 7350
37793: PUSH
37794: LD_INT 6650
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: PUSH
37802: LD_OWVAR 67
37806: ARRAY
37807: ST_TO_ADDR
// end else
37808: GO 38166
// if tick < Stevens_Coming_Time then
37810: LD_OWVAR 1
37814: PUSH
37815: LD_EXP 200
37819: LESS
37820: IFFALSE 37920
// begin Credits = [ 18 , 22 , 26 ] [ Difficulty ] ;
37822: LD_ADDR_VAR 0 9
37826: PUSH
37827: LD_INT 18
37829: PUSH
37830: LD_INT 22
37832: PUSH
37833: LD_INT 26
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: PUSH
37841: LD_OWVAR 67
37845: ARRAY
37846: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 5 ) ;
37847: LD_ADDR_VAR 0 8
37851: PUSH
37852: LD_VAR 0 9
37856: PUSH
37857: LD_EXP 191
37861: PLUS
37862: PPUSH
37863: LD_INT 5
37865: PPUSH
37866: CALL 36879 0 2
37870: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37871: LD_ADDR_EXP 191
37875: PUSH
37876: LD_VAR 0 9
37880: PUSH
37881: LD_EXP 191
37885: PLUS
37886: PUSH
37887: LD_VAR 0 8
37891: MINUS
37892: ST_TO_ADDR
// R1_attack_time = [ 4 4$3 , 4 4$0 , 3 3$30 ] [ Difficulty ] ;
37893: LD_ADDR_EXP 114
37897: PUSH
37898: LD_INT 8505
37900: PUSH
37901: LD_INT 8400
37903: PUSH
37904: LD_INT 7350
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: PUSH
37912: LD_OWVAR 67
37916: ARRAY
37917: ST_TO_ADDR
// end else
37918: GO 38166
// if tick < Alaskite_Bomb_Time then
37920: LD_OWVAR 1
37924: PUSH
37925: LD_EXP 212
37929: LESS
37930: IFFALSE 38030
// begin Credits = [ 22 , 27 , 32 ] [ Difficulty ] ;
37932: LD_ADDR_VAR 0 9
37936: PUSH
37937: LD_INT 22
37939: PUSH
37940: LD_INT 27
37942: PUSH
37943: LD_INT 32
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: PUSH
37951: LD_OWVAR 67
37955: ARRAY
37956: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 5 ) ;
37957: LD_ADDR_VAR 0 8
37961: PUSH
37962: LD_VAR 0 9
37966: PUSH
37967: LD_EXP 191
37971: PLUS
37972: PPUSH
37973: LD_INT 5
37975: PPUSH
37976: CALL 36879 0 2
37980: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37981: LD_ADDR_EXP 191
37985: PUSH
37986: LD_VAR 0 9
37990: PUSH
37991: LD_EXP 191
37995: PLUS
37996: PUSH
37997: LD_VAR 0 8
38001: MINUS
38002: ST_TO_ADDR
// R1_attack_time = [ 4 4$0 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
38003: LD_ADDR_EXP 114
38007: PUSH
38008: LD_INT 8400
38010: PUSH
38011: LD_INT 7350
38013: PUSH
38014: LD_INT 6650
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: PUSH
38022: LD_OWVAR 67
38026: ARRAY
38027: ST_TO_ADDR
// end else
38028: GO 38166
// if tick > Alaskite_Bomb_Time then
38030: LD_OWVAR 1
38034: PUSH
38035: LD_EXP 212
38039: GREATER
38040: IFFALSE 38166
// begin Strength_of_attack = Rand ( 1 , 7 ) ;
38042: LD_ADDR_VAR 0 10
38046: PUSH
38047: LD_INT 1
38049: PPUSH
38050: LD_INT 7
38052: PPUSH
38053: CALL_OW 12
38057: ST_TO_ADDR
// Credits = [ 6 , 8 , 10 ] [ Difficulty ] * Strength_of_attack ;
38058: LD_ADDR_VAR 0 9
38062: PUSH
38063: LD_INT 6
38065: PUSH
38066: LD_INT 8
38068: PUSH
38069: LD_INT 10
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: PUSH
38077: LD_OWVAR 67
38081: ARRAY
38082: PUSH
38083: LD_VAR 0 10
38087: MUL
38088: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 6 ) ;
38089: LD_ADDR_VAR 0 8
38093: PUSH
38094: LD_VAR 0 9
38098: PUSH
38099: LD_EXP 191
38103: PLUS
38104: PPUSH
38105: LD_INT 6
38107: PPUSH
38108: CALL 36879 0 2
38112: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
38113: LD_ADDR_EXP 191
38117: PUSH
38118: LD_VAR 0 9
38122: PUSH
38123: LD_EXP 191
38127: PLUS
38128: PUSH
38129: LD_VAR 0 8
38133: MINUS
38134: ST_TO_ADDR
// R1_attack_time = [ 1 1$0 , 1 1$0 , 1 1$0 ] [ Difficulty ] * Strength_of_attack ;
38135: LD_ADDR_EXP 114
38139: PUSH
38140: LD_INT 2100
38142: PUSH
38143: LD_INT 2100
38145: PUSH
38146: LD_INT 2100
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: PUSH
38154: LD_OWVAR 67
38158: ARRAY
38159: PUSH
38160: LD_VAR 0 10
38164: MUL
38165: ST_TO_ADDR
// end ; end ;
38166: LD_VAR 0 1
38170: RET
// function GeneratePatrolingGroup ; begin
38171: LD_INT 0
38173: PPUSH
// New_Patrol_Group = [ ] ;
38174: LD_ADDR_EXP 122
38178: PUSH
38179: EMPTY
38180: ST_TO_ADDR
// if R1_Attack_Counter > 2 then
38181: LD_EXP 116
38185: PUSH
38186: LD_INT 2
38188: GREATER
38189: IFFALSE 38237
// begin R1Patrol_group = UnitFilter ( R1Patrol_group , [ f_alive ] ) ;
38191: LD_ADDR_EXP 123
38195: PUSH
38196: LD_EXP 123
38200: PPUSH
38201: LD_INT 51
38203: PUSH
38204: EMPTY
38205: LIST
38206: PPUSH
38207: CALL_OW 72
38211: ST_TO_ADDR
// PrepareAndCreateVehicleR1P ( 1 - R1Patrol_Group , ru_medium_tracked , engine_siberite , control_computer , ru_heavy_machine_gun ) ;
38212: LD_INT 1
38214: PUSH
38215: LD_EXP 123
38219: MINUS
38220: PPUSH
38221: LD_INT 22
38223: PPUSH
38224: LD_INT 3
38226: PPUSH
38227: LD_INT 3
38229: PPUSH
38230: LD_INT 42
38232: PPUSH
38233: CALL 35310 0 5
// end ; end ;
38237: LD_VAR 0 1
38241: RET
// export function Rus1Attack ; var Un , Am_units , Attack_area , Area_changed , Hlp_R1_Attack_Group , Hlp_New_Patrol_Group , temp_list , spawn_at_Arrival1 ; begin
38242: LD_INT 0
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
// Hlp_R1_Attack_Group = R1_Attack_Group ;
38253: LD_ADDR_VAR 0 6
38257: PUSH
38258: LD_EXP 118
38262: ST_TO_ADDR
// Hlp_New_Patrol_Group = New_Patrol_Group ;
38263: LD_ADDR_VAR 0 7
38267: PUSH
38268: LD_EXP 122
38272: ST_TO_ADDR
// if tick < 12 12$0 then
38273: LD_OWVAR 1
38277: PUSH
38278: LD_INT 25200
38280: LESS
38281: IFFALSE 38357
// begin for Un in Hlp_R1_Attack_Group do
38283: LD_ADDR_VAR 0 2
38287: PUSH
38288: LD_VAR 0 6
38292: PUSH
38293: FOR_IN
38294: IFFALSE 38313
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38296: LD_VAR 0 2
38300: PPUSH
38301: LD_INT 24
38303: PPUSH
38304: LD_INT 0
38306: PPUSH
38307: CALL_OW 49
38311: GO 38293
38313: POP
38314: POP
// for Un in Hlp_New_Patrol_Group do
38315: LD_ADDR_VAR 0 2
38319: PUSH
38320: LD_VAR 0 7
38324: PUSH
38325: FOR_IN
38326: IFFALSE 38345
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38328: LD_VAR 0 2
38332: PPUSH
38333: LD_INT 24
38335: PPUSH
38336: LD_INT 0
38338: PPUSH
38339: CALL_OW 49
38343: GO 38325
38345: POP
38346: POP
// spawn_at_Arrival1 = true ;
38347: LD_ADDR_VAR 0 9
38351: PUSH
38352: LD_INT 1
38354: ST_TO_ADDR
// end else
38355: GO 38515
// begin if Rand ( 0 , 1 ) then
38357: LD_INT 0
38359: PPUSH
38360: LD_INT 1
38362: PPUSH
38363: CALL_OW 12
38367: IFFALSE 38443
// begin for Un in Hlp_R1_Attack_Group do
38369: LD_ADDR_VAR 0 2
38373: PUSH
38374: LD_VAR 0 6
38378: PUSH
38379: FOR_IN
38380: IFFALSE 38399
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38382: LD_VAR 0 2
38386: PPUSH
38387: LD_INT 24
38389: PPUSH
38390: LD_INT 0
38392: PPUSH
38393: CALL_OW 49
38397: GO 38379
38399: POP
38400: POP
// for Un in Hlp_New_Patrol_Group do
38401: LD_ADDR_VAR 0 2
38405: PUSH
38406: LD_VAR 0 7
38410: PUSH
38411: FOR_IN
38412: IFFALSE 38431
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38414: LD_VAR 0 2
38418: PPUSH
38419: LD_INT 24
38421: PPUSH
38422: LD_INT 0
38424: PPUSH
38425: CALL_OW 49
38429: GO 38411
38431: POP
38432: POP
// spawn_at_Arrival1 = true ;
38433: LD_ADDR_VAR 0 9
38437: PUSH
38438: LD_INT 1
38440: ST_TO_ADDR
// end else
38441: GO 38515
// begin for Un in Hlp_R1_Attack_Group do
38443: LD_ADDR_VAR 0 2
38447: PUSH
38448: LD_VAR 0 6
38452: PUSH
38453: FOR_IN
38454: IFFALSE 38473
// PlaceUnitArea ( Un , Arrival2 , false ) ;
38456: LD_VAR 0 2
38460: PPUSH
38461: LD_INT 25
38463: PPUSH
38464: LD_INT 0
38466: PPUSH
38467: CALL_OW 49
38471: GO 38453
38473: POP
38474: POP
// for Un in Hlp_New_Patrol_Group do
38475: LD_ADDR_VAR 0 2
38479: PUSH
38480: LD_VAR 0 7
38484: PUSH
38485: FOR_IN
38486: IFFALSE 38505
// PlaceUnitArea ( Un , Arrival2 , false ) ;
38488: LD_VAR 0 2
38492: PPUSH
38493: LD_INT 25
38495: PPUSH
38496: LD_INT 0
38498: PPUSH
38499: CALL_OW 49
38503: GO 38485
38505: POP
38506: POP
// spawn_at_Arrival1 = false ;
38507: LD_ADDR_VAR 0 9
38511: PUSH
38512: LD_INT 0
38514: ST_TO_ADDR
// end ; end ; Main_R1_Attack_Group = Main_R1_Attack_Group ^ Hlp_R1_Attack_Group ;
38515: LD_ADDR_EXP 119
38519: PUSH
38520: LD_EXP 119
38524: PUSH
38525: LD_VAR 0 6
38529: ADD
38530: ST_TO_ADDR
// Main_R1_Attack_Group = UnitFilter ( Main_R1_Attack_Group , [ f_alive ] ) ;
38531: LD_ADDR_EXP 119
38535: PUSH
38536: LD_EXP 119
38540: PPUSH
38541: LD_INT 51
38543: PUSH
38544: EMPTY
38545: LIST
38546: PPUSH
38547: CALL_OW 72
38551: ST_TO_ADDR
// Area_changed = false ;
38552: LD_ADDR_VAR 0 5
38556: PUSH
38557: LD_INT 0
38559: ST_TO_ADDR
// if FilterUnitsInArea ( JMM_Hill , [ f_side , americans ] ) > 0 then
38560: LD_INT 2
38562: PPUSH
38563: LD_INT 22
38565: PUSH
38566: LD_EXP 176
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PPUSH
38575: CALL_OW 70
38579: PUSH
38580: LD_INT 0
38582: GREATER
38583: IFFALSE 38603
// begin Area_changed = true ;
38585: LD_ADDR_VAR 0 5
38589: PUSH
38590: LD_INT 1
38592: ST_TO_ADDR
// attack_area = JMM_Hill ;
38593: LD_ADDR_VAR 0 4
38597: PUSH
38598: LD_INT 2
38600: ST_TO_ADDR
// end else
38601: GO 38988
// if FilterUnitsInArea ( Am_Base , [ f_side , americans ] ) > 0 then
38603: LD_INT 1
38605: PPUSH
38606: LD_INT 22
38608: PUSH
38609: LD_EXP 176
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PPUSH
38618: CALL_OW 70
38622: PUSH
38623: LD_INT 0
38625: GREATER
38626: IFFALSE 38646
// begin Area_changed = true ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_INT 1
38635: ST_TO_ADDR
// attack_area = Am_Base ;
38636: LD_ADDR_VAR 0 4
38640: PUSH
38641: LD_INT 1
38643: ST_TO_ADDR
// end else
38644: GO 38988
// if FilterUnitsInArea ( Ar_Base , [ f_side , americans ] ) > 0 then
38646: LD_INT 17
38648: PPUSH
38649: LD_INT 22
38651: PUSH
38652: LD_EXP 176
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PPUSH
38661: CALL_OW 70
38665: PUSH
38666: LD_INT 0
38668: GREATER
38669: IFFALSE 38689
// begin Area_changed = true ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_INT 1
38678: ST_TO_ADDR
// attack_area = Ar_Base ;
38679: LD_ADDR_VAR 0 4
38683: PUSH
38684: LD_INT 17
38686: ST_TO_ADDR
// end else
38687: GO 38988
// if FilterUnitsInArea ( Plan3 , [ f_side , americans ] ) > 0 then
38689: LD_INT 31
38691: PPUSH
38692: LD_INT 22
38694: PUSH
38695: LD_EXP 176
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PPUSH
38704: CALL_OW 70
38708: PUSH
38709: LD_INT 0
38711: GREATER
38712: IFFALSE 38732
// begin Area_changed = true ;
38714: LD_ADDR_VAR 0 5
38718: PUSH
38719: LD_INT 1
38721: ST_TO_ADDR
// attack_area = Plan3 ;
38722: LD_ADDR_VAR 0 4
38726: PUSH
38727: LD_INT 31
38729: ST_TO_ADDR
// end else
38730: GO 38988
// if FilterUnitsInArea ( Plan1 , [ f_side , americans ] ) > 0 then
38732: LD_INT 29
38734: PPUSH
38735: LD_INT 22
38737: PUSH
38738: LD_EXP 176
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PPUSH
38747: CALL_OW 70
38751: PUSH
38752: LD_INT 0
38754: GREATER
38755: IFFALSE 38775
// begin Area_changed = true ;
38757: LD_ADDR_VAR 0 5
38761: PUSH
38762: LD_INT 1
38764: ST_TO_ADDR
// attack_area = Plan1 ;
38765: LD_ADDR_VAR 0 4
38769: PUSH
38770: LD_INT 29
38772: ST_TO_ADDR
// end else
38773: GO 38988
// if FilterUnitsInArea ( Plan5 , [ f_side , americans ] ) > 0 then
38775: LD_INT 33
38777: PPUSH
38778: LD_INT 22
38780: PUSH
38781: LD_EXP 176
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PPUSH
38790: CALL_OW 70
38794: PUSH
38795: LD_INT 0
38797: GREATER
38798: IFFALSE 38818
// begin Area_changed = true ;
38800: LD_ADDR_VAR 0 5
38804: PUSH
38805: LD_INT 1
38807: ST_TO_ADDR
// attack_area = Plan5 ;
38808: LD_ADDR_VAR 0 4
38812: PUSH
38813: LD_INT 33
38815: ST_TO_ADDR
// end else
38816: GO 38988
// if FilterUnitsInArea ( Plan2 , [ f_side , americans ] ) > 0 then
38818: LD_INT 30
38820: PPUSH
38821: LD_INT 22
38823: PUSH
38824: LD_EXP 176
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PPUSH
38833: CALL_OW 70
38837: PUSH
38838: LD_INT 0
38840: GREATER
38841: IFFALSE 38861
// begin Area_changed = true ;
38843: LD_ADDR_VAR 0 5
38847: PUSH
38848: LD_INT 1
38850: ST_TO_ADDR
// attack_area = Plan2 ;
38851: LD_ADDR_VAR 0 4
38855: PUSH
38856: LD_INT 30
38858: ST_TO_ADDR
// end else
38859: GO 38988
// if FilterUnitsInArea ( Plan4 , [ f_side , americans ] ) > 0 then
38861: LD_INT 32
38863: PPUSH
38864: LD_INT 22
38866: PUSH
38867: LD_EXP 176
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PPUSH
38876: CALL_OW 70
38880: PUSH
38881: LD_INT 0
38883: GREATER
38884: IFFALSE 38904
// begin Area_changed = true ;
38886: LD_ADDR_VAR 0 5
38890: PUSH
38891: LD_INT 1
38893: ST_TO_ADDR
// attack_area = Plan4 ;
38894: LD_ADDR_VAR 0 4
38898: PUSH
38899: LD_INT 32
38901: ST_TO_ADDR
// end else
38902: GO 38988
// if FilterUnitsInArea ( Plan6 , [ f_side , americans ] ) > 0 then
38904: LD_INT 34
38906: PPUSH
38907: LD_INT 22
38909: PUSH
38910: LD_EXP 176
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PPUSH
38919: CALL_OW 70
38923: PUSH
38924: LD_INT 0
38926: GREATER
38927: IFFALSE 38947
// begin Area_changed = true ;
38929: LD_ADDR_VAR 0 5
38933: PUSH
38934: LD_INT 1
38936: ST_TO_ADDR
// attack_area = Plan6 ;
38937: LD_ADDR_VAR 0 4
38941: PUSH
38942: LD_INT 34
38944: ST_TO_ADDR
// end else
38945: GO 38988
// if FilterUnitsInArea ( Aliance_Base , [ f_side , americans ] ) > 0 then
38947: LD_INT 7
38949: PPUSH
38950: LD_INT 22
38952: PUSH
38953: LD_EXP 176
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PPUSH
38962: CALL_OW 70
38966: PUSH
38967: LD_INT 0
38969: GREATER
38970: IFFALSE 38988
// begin Area_changed = true ;
38972: LD_ADDR_VAR 0 5
38976: PUSH
38977: LD_INT 1
38979: ST_TO_ADDR
// attack_area = Aliance_Base ;
38980: LD_ADDR_VAR 0 4
38984: PUSH
38985: LD_INT 7
38987: ST_TO_ADDR
// end ; temp_list = Hlp_R1_Attack_Group ^ Hlp_New_Patrol_Group ;
38988: LD_ADDR_VAR 0 8
38992: PUSH
38993: LD_VAR 0 6
38997: PUSH
38998: LD_VAR 0 7
39002: ADD
39003: ST_TO_ADDR
// case attack_area of JMM_Hill :
39004: LD_VAR 0 4
39008: PUSH
39009: LD_INT 2
39011: DOUBLE
39012: EQUAL
39013: IFTRUE 39017
39015: GO 39103
39017: POP
// begin if spawn_at_Arrival1 then
39018: LD_VAR 0 9
39022: IFFALSE 39026
// begin end else
39024: GO 39101
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39026: LD_VAR 0 8
39030: PPUSH
39031: LD_INT 163
39033: PPUSH
39034: LD_INT 181
39036: PPUSH
39037: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39041: LD_VAR 0 8
39045: PPUSH
39046: LD_INT 175
39048: PPUSH
39049: LD_INT 165
39051: PPUSH
39052: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39056: LD_VAR 0 8
39060: PPUSH
39061: LD_INT 160
39063: PPUSH
39064: LD_INT 138
39066: PPUSH
39067: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39071: LD_VAR 0 8
39075: PPUSH
39076: LD_INT 138
39078: PPUSH
39079: LD_INT 121
39081: PPUSH
39082: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39086: LD_VAR 0 8
39090: PPUSH
39091: LD_INT 113
39093: PPUSH
39094: LD_INT 105
39096: PPUSH
39097: CALL_OW 174
// end ; end ; Am_Base :
39101: GO 39521
39103: LD_INT 1
39105: DOUBLE
39106: EQUAL
39107: IFTRUE 39111
39109: GO 39242
39111: POP
// begin if spawn_at_Arrival1 then
39112: LD_VAR 0 9
39116: IFFALSE 39135
// begin ComAgressiveMove ( temp_list , 86 , 123 ) ;
39118: LD_VAR 0 8
39122: PPUSH
39123: LD_INT 86
39125: PPUSH
39126: LD_INT 123
39128: PPUSH
39129: CALL_OW 114
// end else
39133: GO 39240
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39135: LD_VAR 0 8
39139: PPUSH
39140: LD_INT 163
39142: PPUSH
39143: LD_INT 181
39145: PPUSH
39146: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39150: LD_VAR 0 8
39154: PPUSH
39155: LD_INT 175
39157: PPUSH
39158: LD_INT 165
39160: PPUSH
39161: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39165: LD_VAR 0 8
39169: PPUSH
39170: LD_INT 160
39172: PPUSH
39173: LD_INT 138
39175: PPUSH
39176: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39180: LD_VAR 0 8
39184: PPUSH
39185: LD_INT 138
39187: PPUSH
39188: LD_INT 121
39190: PPUSH
39191: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39195: LD_VAR 0 8
39199: PPUSH
39200: LD_INT 113
39202: PPUSH
39203: LD_INT 105
39205: PPUSH
39206: CALL_OW 174
// AddComAgressiveMove ( temp_list , 99 , 83 ) ;
39210: LD_VAR 0 8
39214: PPUSH
39215: LD_INT 99
39217: PPUSH
39218: LD_INT 83
39220: PPUSH
39221: CALL_OW 174
// AddComAgressiveMove ( temp_list , 83 , 62 ) ;
39225: LD_VAR 0 8
39229: PPUSH
39230: LD_INT 83
39232: PPUSH
39233: LD_INT 62
39235: PPUSH
39236: CALL_OW 174
// end ; end ; Ar_Base :
39240: GO 39521
39242: LD_INT 17
39244: DOUBLE
39245: EQUAL
39246: IFTRUE 39250
39248: GO 39426
39250: POP
// begin if spawn_at_Arrival1 then
39251: LD_VAR 0 9
39255: IFFALSE 39319
// begin ComAgressiveMove ( temp_list , 86 , 123 ) ;
39257: LD_VAR 0 8
39261: PPUSH
39262: LD_INT 86
39264: PPUSH
39265: LD_INT 123
39267: PPUSH
39268: CALL_OW 114
// AddComAgressiveMove ( temp_list , 71 , 101 ) ;
39272: LD_VAR 0 8
39276: PPUSH
39277: LD_INT 71
39279: PPUSH
39280: LD_INT 101
39282: PPUSH
39283: CALL_OW 174
// AddComAgressiveMove ( temp_list , 58 , 77 ) ;
39287: LD_VAR 0 8
39291: PPUSH
39292: LD_INT 58
39294: PPUSH
39295: LD_INT 77
39297: PPUSH
39298: CALL_OW 174
// AddComAgressiveMove ( temp_list , 66 , 61 ) ;
39302: LD_VAR 0 8
39306: PPUSH
39307: LD_INT 66
39309: PPUSH
39310: LD_INT 61
39312: PPUSH
39313: CALL_OW 174
// end else
39317: GO 39424
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39319: LD_VAR 0 8
39323: PPUSH
39324: LD_INT 163
39326: PPUSH
39327: LD_INT 181
39329: PPUSH
39330: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39334: LD_VAR 0 8
39338: PPUSH
39339: LD_INT 175
39341: PPUSH
39342: LD_INT 165
39344: PPUSH
39345: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39349: LD_VAR 0 8
39353: PPUSH
39354: LD_INT 160
39356: PPUSH
39357: LD_INT 138
39359: PPUSH
39360: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39364: LD_VAR 0 8
39368: PPUSH
39369: LD_INT 138
39371: PPUSH
39372: LD_INT 121
39374: PPUSH
39375: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39379: LD_VAR 0 8
39383: PPUSH
39384: LD_INT 113
39386: PPUSH
39387: LD_INT 105
39389: PPUSH
39390: CALL_OW 174
// AddComAgressiveMove ( temp_list , 108 , 82 ) ;
39394: LD_VAR 0 8
39398: PPUSH
39399: LD_INT 108
39401: PPUSH
39402: LD_INT 82
39404: PPUSH
39405: CALL_OW 174
// AddComAgressiveMove ( temp_list , 99 , 59 ) ;
39409: LD_VAR 0 8
39413: PPUSH
39414: LD_INT 99
39416: PPUSH
39417: LD_INT 59
39419: PPUSH
39420: CALL_OW 174
// end ; end ; Aliance_Base :
39424: GO 39521
39426: LD_INT 7
39428: DOUBLE
39429: EQUAL
39430: IFTRUE 39434
39432: GO 39520
39434: POP
// begin if spawn_at_Arrival1 then
39435: LD_VAR 0 9
39439: IFFALSE 39503
// begin ComAgressiveMove ( temp_list , 96 , 163 ) ;
39441: LD_VAR 0 8
39445: PPUSH
39446: LD_INT 96
39448: PPUSH
39449: LD_INT 163
39451: PPUSH
39452: CALL_OW 114
// AddComAgressiveMove ( temp_list , 120 , 179 ) ;
39456: LD_VAR 0 8
39460: PPUSH
39461: LD_INT 120
39463: PPUSH
39464: LD_INT 179
39466: PPUSH
39467: CALL_OW 174
// AddComAgressiveMove ( temp_list , 141 , 179 ) ;
39471: LD_VAR 0 8
39475: PPUSH
39476: LD_INT 141
39478: PPUSH
39479: LD_INT 179
39481: PPUSH
39482: CALL_OW 174
// AddComAgressiveMove ( temp_list , 163 , 179 ) ;
39486: LD_VAR 0 8
39490: PPUSH
39491: LD_INT 163
39493: PPUSH
39494: LD_INT 179
39496: PPUSH
39497: CALL_OW 174
// end else
39501: GO 39518
// begin ComAgressiveMove ( temp_list , 163 , 179 ) ;
39503: LD_VAR 0 8
39507: PPUSH
39508: LD_INT 163
39510: PPUSH
39511: LD_INT 179
39513: PPUSH
39514: CALL_OW 114
// end ; end ; end ;
39518: GO 39521
39520: POP
// WaitTask ( temp_list , 1 ) ;
39521: LD_VAR 0 8
39525: PPUSH
39526: LD_INT 1
39528: PPUSH
39529: CALL 17888 0 2
// if not ( ExistMc ( Russian1_reg_id ) ) then
39533: LD_EXP 237
39537: PPUSH
39538: CALL_OW 386
39542: NOT
39543: IFFALSE 39601
// begin Russian1_reg_id = McRegistry ( russians1 , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important , mc_reg_ignore_fog , mc_reg_buildings ] ) ;
39545: LD_ADDR_EXP 237
39549: PUSH
39550: LD_EXP 179
39554: PPUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 70
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 2
39567: PUSH
39568: LD_VAR 0 4
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 8
39579: NEG
39580: PUSH
39581: LD_INT 7
39583: PUSH
39584: LD_INT 9
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: PPUSH
39594: CALL_OW 399
39598: ST_TO_ADDR
// end else
39599: GO 39631
// if Area_changed then
39601: LD_VAR 0 5
39605: IFFALSE 39631
// begin McRegistryChangeOptions ( Russian1_reg_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
39607: LD_EXP 237
39611: PPUSH
39612: LD_INT 2
39614: PUSH
39615: LD_VAR 0 4
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: PPUSH
39627: CALL_OW 400
// end ; if not ( ExistMc ( Russian1_att_id ) ) then
39631: LD_EXP 238
39635: PPUSH
39636: CALL_OW 386
39640: NOT
39641: IFFALSE 39718
// begin Russian1_att_id = McAttack ( 100 , Russian1_reg_id , Main_R1_Attack_Group , [ [ mc_retreat_area_vehicles , retreat1 ] , [ mc_retreat_area_people , retreat1 ] , [ mc_retreat_lives_vehicles , 600 ] , [ mc_retreat_lives_people , 600 ] , mc_no_stop ] ) ;
39643: LD_ADDR_EXP 238
39647: PUSH
39648: LD_INT 100
39650: PPUSH
39651: LD_EXP 237
39655: PPUSH
39656: LD_EXP 119
39660: PPUSH
39661: LD_INT 8
39663: PUSH
39664: LD_INT 40
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 7
39673: PUSH
39674: LD_INT 40
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 6
39683: PUSH
39684: LD_INT 600
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 5
39693: PUSH
39694: LD_INT 600
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 10
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: PPUSH
39711: CALL_OW 402
39715: ST_TO_ADDR
// end else
39716: GO 39732
// begin AddMcUnits ( Russian1_att_id , Hlp_R1_Attack_Group ) ;
39718: LD_EXP 238
39722: PPUSH
39723: LD_VAR 0 6
39727: PPUSH
39728: CALL_OW 390
// end ; if not ( ExistMc ( Russian1_reg1_id ) ) then
39732: LD_EXP 239
39736: PPUSH
39737: CALL_OW 386
39741: NOT
39742: IFFALSE 39792
// begin Russian1_reg1_id = McRegistry ( russians1 , [ [ mc_reg_refresh_time , 0 0$4 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important ] ) ;
39744: LD_ADDR_EXP 239
39748: PUSH
39749: LD_EXP 179
39753: PPUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 140
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_VAR 0 4
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 8
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: PPUSH
39785: CALL_OW 399
39789: ST_TO_ADDR
// end else
39790: GO 39822
// if Area_changed then
39792: LD_VAR 0 5
39796: IFFALSE 39822
// begin McRegistryChangeOptions ( Russian1_reg1_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
39798: LD_EXP 239
39802: PPUSH
39803: LD_INT 2
39805: PUSH
39806: LD_VAR 0 4
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: EMPTY
39816: LIST
39817: PPUSH
39818: CALL_OW 400
// end ; if not ( ExistMc ( Russian1_patr_id ) ) and ( Hlp_New_Patrol_Group <> 0 ) then
39822: LD_EXP 240
39826: PPUSH
39827: CALL_OW 386
39831: NOT
39832: PUSH
39833: LD_VAR 0 7
39837: PUSH
39838: LD_INT 0
39840: NONEQUAL
39841: AND
39842: IFFALSE 39885
// begin R1Patrol_group = Hlp_New_Patrol_Group ;
39844: LD_ADDR_EXP 123
39848: PUSH
39849: LD_VAR 0 7
39853: ST_TO_ADDR
// Russian1_patr_id = McPatrol ( 100 , Russian1_reg1_id , Hlp_New_Patrol_Group , [ mc_no_stop ] ) ;
39854: LD_ADDR_EXP 240
39858: PUSH
39859: LD_INT 100
39861: PPUSH
39862: LD_EXP 239
39866: PPUSH
39867: LD_VAR 0 7
39871: PPUSH
39872: LD_INT 10
39874: PUSH
39875: EMPTY
39876: LIST
39877: PPUSH
39878: CALL_OW 403
39882: ST_TO_ADDR
// end else
39883: GO 39925
// begin R1Patrol_group = R1Patrol_group ^ Hlp_New_Patrol_Group ;
39885: LD_ADDR_EXP 123
39889: PUSH
39890: LD_EXP 123
39894: PUSH
39895: LD_VAR 0 7
39899: ADD
39900: ST_TO_ADDR
// if Hlp_New_Patrol_Group <> 0 then
39901: LD_VAR 0 7
39905: PUSH
39906: LD_INT 0
39908: NONEQUAL
39909: IFFALSE 39925
// AddMcUnits ( Russian1_patr_id , Hlp_New_Patrol_Group ) ;
39911: LD_EXP 240
39915: PPUSH
39916: LD_VAR 0 7
39920: PPUSH
39921: CALL_OW 390
// end ; end ;
39925: LD_VAR 0 1
39929: RET
// every 0 0$1 do var Un , ill ;
39930: GO 39932
39932: DISABLE
39933: LD_INT 0
39935: PPUSH
39936: PPUSH
// begin ill = FilterUnitsInArea ( OutComming , [ [ f_side , russians1 ] , f_not , [ f_lives , 600 ] ] ) ;
39937: LD_ADDR_VAR 0 2
39941: PUSH
39942: LD_INT 41
39944: PPUSH
39945: LD_INT 22
39947: PUSH
39948: LD_EXP 179
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: LD_INT 24
39962: PUSH
39963: LD_INT 600
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: PPUSH
39975: CALL_OW 70
39979: ST_TO_ADDR
// ill = ill ^ FilterUnitsInArea ( arrival2 , [ [ f_side , russians1 ] , f_not , [ f_lives , 600 ] ] ) ;
39980: LD_ADDR_VAR 0 2
39984: PUSH
39985: LD_VAR 0 2
39989: PUSH
39990: LD_INT 25
39992: PPUSH
39993: LD_INT 22
39995: PUSH
39996: LD_EXP 179
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 3
40007: PUSH
40008: LD_INT 24
40010: PUSH
40011: LD_INT 600
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: PPUSH
40023: CALL_OW 70
40027: ADD
40028: ST_TO_ADDR
// if ill > 0 then
40029: LD_VAR 0 2
40033: PUSH
40034: LD_INT 0
40036: GREATER
40037: IFFALSE 40095
// begin Main_R1_Attack_Group = Main_R1_Attack_Group diff ill ;
40039: LD_ADDR_EXP 119
40043: PUSH
40044: LD_EXP 119
40048: PUSH
40049: LD_VAR 0 2
40053: DIFF
40054: ST_TO_ADDR
// RemoveMcUnits ( Russian1_att_id , ill ) ;
40055: LD_EXP 238
40059: PPUSH
40060: LD_VAR 0 2
40064: PPUSH
40065: CALL_OW 391
// for Un in ill do
40069: LD_ADDR_VAR 0 1
40073: PUSH
40074: LD_VAR 0 2
40078: PUSH
40079: FOR_IN
40080: IFFALSE 40093
// DestroyUnit ( Un ) ;
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 65
40091: GO 40079
40093: POP
40094: POP
// end ; enable ;
40095: ENABLE
// end ;
40096: PPOPN 2
40098: END
// every 0 0$1 marked 4 do
40099: GO 40101
40101: DISABLE
// begin disable ;
40102: DISABLE
// if Main_R1_Attack_Group < 50 then
40103: LD_EXP 119
40107: PUSH
40108: LD_INT 50
40110: LESS
40111: IFFALSE 40179
// begin R1_Attack_Counter = R1_Attack_Counter + 1 ;
40113: LD_ADDR_EXP 116
40117: PUSH
40118: LD_EXP 116
40122: PUSH
40123: LD_INT 1
40125: PLUS
40126: ST_TO_ADDR
// GenerateAttackingGroup ;
40127: CALL 36931 0 0
// GeneratePatrolingGroup ;
40131: CALL 38171 0 0
// Wait ( R1_attack_time ) ;
40135: LD_EXP 114
40139: PPUSH
40140: CALL_OW 67
// while R1_Attack_Continues = false do
40144: LD_EXP 196
40148: PUSH
40149: LD_INT 0
40151: EQUAL
40152: IFFALSE 40163
// Wait ( 0 0$1 ) ;
40154: LD_INT 35
40156: PPUSH
40157: CALL_OW 67
40161: GO 40144
// RaiseSailEvent ( Rus1_Attack ) ;
40163: LD_EXP 170
40167: PPUSH
40168: CALL_OW 427
// Wait ( 1 ) ;
40172: LD_INT 1
40174: PPUSH
40175: CALL_OW 67
// end ; enable ;
40179: ENABLE
// end ; end_of_file
40180: END
// every 0 0$1 trigger IsDead ( Powell ) marked 8 do
40181: LD_EXP 2
40185: PPUSH
40186: CALL_OW 301
40190: IFFALSE 40206
40192: GO 40194
40194: DISABLE
// begin YouLost ( Surrender ) ;
40195: LD_STRING Surrender
40197: PPUSH
40198: CALL_OW 104
// ExitGame ;
40202: CALL_OW 341
// end ;
40206: END
// every 0 0$1 marked 22 do
40207: GO 40209
40209: DISABLE
// begin YouLost ( JMMCaptured ) ;
40210: LD_STRING JMMCaptured
40212: PPUSH
40213: CALL_OW 104
// ExitGame ;
40217: CALL_OW 341
// end ;
40221: END
// every 0 0$1 marked 19 do
40222: GO 40224
40224: DISABLE
// begin YouLost ( Surrender ) ;
40225: LD_STRING Surrender
40227: PPUSH
40228: CALL_OW 104
// ExitGame ;
40232: CALL_OW 341
// end ;
40236: END
// every 0 0$1 marked 2 do
40237: GO 40239
40239: DISABLE
// begin YouLost ( Dismissed ) ;
40240: LD_STRING Dismissed
40242: PPUSH
40243: CALL_OW 104
// ExitGame ;
40247: CALL_OW 341
// end ;
40251: END
// every 0 0$5 trigger IsDead ( JMM ) do
40252: LD_EXP 1
40256: PPUSH
40257: CALL_OW 301
40261: IFFALSE 40277
40263: GO 40265
40265: DISABLE
// begin YouLost ( JMM ) ;
40266: LD_STRING JMM
40268: PPUSH
40269: CALL_OW 104
// ExitGame ;
40273: CALL_OW 341
// end ;
40277: END
// every 0 0$5 marked 13 do
40278: GO 40280
40280: DISABLE
// begin Wait ( 0 0$5 ) ;
40281: LD_INT 175
40283: PPUSH
40284: CALL_OW 67
// YouLost ( Motherlode1 ) ;
40288: LD_STRING Motherlode1
40290: PPUSH
40291: CALL_OW 104
// ExitGame ;
40295: CALL_OW 341
// end ;
40299: END
// every 0 0$5 marked 14 do
40300: GO 40302
40302: DISABLE
// begin Wait ( 0 0$5 ) ;
40303: LD_INT 175
40305: PPUSH
40306: CALL_OW 67
// YouLost ( Motherlode2 ) ;
40310: LD_STRING Motherlode2
40312: PPUSH
40313: CALL_OW 104
// ExitGame ;
40317: CALL_OW 341
// end ;
40321: END
// every 0 0$5 marked 15 do
40322: GO 40324
40324: DISABLE
// begin Wait ( 0 0$7 ) ;
40325: LD_INT 245
40327: PPUSH
40328: CALL_OW 67
// YouLost ( Motherlode3 ) ;
40332: LD_STRING Motherlode3
40334: PPUSH
40335: CALL_OW 104
// ExitGame ;
40339: CALL_OW 341
// end ;
40343: END
// every 0 0$1 marked 23 do
40344: GO 40346
40346: DISABLE
// begin DialogueON ;
40347: CALL_OW 6
// Say ( JMM , D20-JMM-1 ) ;
40351: LD_EXP 1
40355: PPUSH
40356: LD_STRING D20-JMM-1
40358: PPUSH
40359: CALL_OW 88
// if IsOk ( Joan ) and GetSide ( Joan ) = americans then
40363: LD_EXP 12
40367: PPUSH
40368: CALL_OW 302
40372: PUSH
40373: LD_EXP 12
40377: PPUSH
40378: CALL_OW 255
40382: PUSH
40383: LD_EXP 176
40387: EQUAL
40388: AND
40389: IFFALSE 40403
// Say ( Joan , D20-Joan-1 ) ;
40391: LD_EXP 12
40395: PPUSH
40396: LD_STRING D20-Joan-1
40398: PPUSH
40399: CALL_OW 88
// if IsOk ( Lisa ) and GetSide ( Lisa ) = americans then
40403: LD_EXP 5
40407: PPUSH
40408: CALL_OW 302
40412: PUSH
40413: LD_EXP 5
40417: PPUSH
40418: CALL_OW 255
40422: PUSH
40423: LD_EXP 176
40427: EQUAL
40428: AND
40429: IFFALSE 40443
// Say ( Lisa , D20-Lisa-1 ) ;
40431: LD_EXP 5
40435: PPUSH
40436: LD_STRING D20-Lisa-1
40438: PPUSH
40439: CALL_OW 88
// if IsOk ( Donaldson ) and GetSide ( Donaldson ) = americans then
40443: LD_EXP 8
40447: PPUSH
40448: CALL_OW 302
40452: PUSH
40453: LD_EXP 8
40457: PPUSH
40458: CALL_OW 255
40462: PUSH
40463: LD_EXP 176
40467: EQUAL
40468: AND
40469: IFFALSE 40483
// Say ( Donaldson , D20-Don-1 ) ;
40471: LD_EXP 8
40475: PPUSH
40476: LD_STRING D20-Don-1
40478: PPUSH
40479: CALL_OW 88
// if IsOk ( Cornell ) and GetSide ( Cornell ) = americans then
40483: LD_EXP 10
40487: PPUSH
40488: CALL_OW 302
40492: PUSH
40493: LD_EXP 10
40497: PPUSH
40498: CALL_OW 255
40502: PUSH
40503: LD_EXP 176
40507: EQUAL
40508: AND
40509: IFFALSE 40523
// Say ( Cornell , D20-Corn-1 ) ;
40511: LD_EXP 10
40515: PPUSH
40516: LD_STRING D20-Corn-1
40518: PPUSH
40519: CALL_OW 88
// if IsOk ( Denis ) and GetSide ( Denis ) = americans then
40523: LD_EXP 11
40527: PPUSH
40528: CALL_OW 302
40532: PUSH
40533: LD_EXP 11
40537: PPUSH
40538: CALL_OW 255
40542: PUSH
40543: LD_EXP 176
40547: EQUAL
40548: AND
40549: IFFALSE 40563
// Say ( Denis , D20-Den-1 ) ;
40551: LD_EXP 11
40555: PPUSH
40556: LD_STRING D20-Den-1
40558: PPUSH
40559: CALL_OW 88
// if IsOk ( Bobby ) and GetSide ( Bobby ) = americans then
40563: LD_EXP 3
40567: PPUSH
40568: CALL_OW 302
40572: PUSH
40573: LD_EXP 3
40577: PPUSH
40578: CALL_OW 255
40582: PUSH
40583: LD_EXP 176
40587: EQUAL
40588: AND
40589: IFFALSE 40603
// Say ( Bobby , D20-Bobby-1 ) ;
40591: LD_EXP 3
40595: PPUSH
40596: LD_STRING D20-Bobby-1
40598: PPUSH
40599: CALL_OW 88
// if IsOk ( Gladstone ) and GetSide ( Gladstone ) = americans then
40603: LD_EXP 9
40607: PPUSH
40608: CALL_OW 302
40612: PUSH
40613: LD_EXP 9
40617: PPUSH
40618: CALL_OW 255
40622: PUSH
40623: LD_EXP 176
40627: EQUAL
40628: AND
40629: IFFALSE 40643
// Say ( Gladstone , D20-Glad-1 ) ;
40631: LD_EXP 9
40635: PPUSH
40636: LD_STRING D20-Glad-1
40638: PPUSH
40639: CALL_OW 88
// if IsOk ( Cyrus ) and GetSide ( Cyrus ) = americans then
40643: LD_EXP 4
40647: PPUSH
40648: CALL_OW 302
40652: PUSH
40653: LD_EXP 4
40657: PPUSH
40658: CALL_OW 255
40662: PUSH
40663: LD_EXP 176
40667: EQUAL
40668: AND
40669: IFFALSE 40683
// Say ( Cyrus , D20-Cyrus-1 ) ;
40671: LD_EXP 4
40675: PPUSH
40676: LD_STRING D20-Cyrus-1
40678: PPUSH
40679: CALL_OW 88
// if IsOk ( Stevens ) and GetSide ( Stevens ) = americans then
40683: LD_EXP 17
40687: PPUSH
40688: CALL_OW 302
40692: PUSH
40693: LD_EXP 17
40697: PPUSH
40698: CALL_OW 255
40702: PUSH
40703: LD_EXP 176
40707: EQUAL
40708: AND
40709: IFFALSE 40723
// Say ( Stevens , D20-Huck-1 ) ;
40711: LD_EXP 17
40715: PPUSH
40716: LD_STRING D20-Huck-1
40718: PPUSH
40719: CALL_OW 88
// if IsOk ( Brown ) and GetSide ( Brown ) = americans then
40723: LD_EXP 7
40727: PPUSH
40728: CALL_OW 302
40732: PUSH
40733: LD_EXP 7
40737: PPUSH
40738: CALL_OW 255
40742: PUSH
40743: LD_EXP 176
40747: EQUAL
40748: AND
40749: IFFALSE 40763
// Say ( Brown , D20-Brown-1 ) ;
40751: LD_EXP 7
40755: PPUSH
40756: LD_STRING D20-Brown-1
40758: PPUSH
40759: CALL_OW 88
// if IsOk ( Gary ) and GetSide ( Gary ) = americans then
40763: LD_EXP 15
40767: PPUSH
40768: CALL_OW 302
40772: PUSH
40773: LD_EXP 15
40777: PPUSH
40778: CALL_OW 255
40782: PUSH
40783: LD_EXP 176
40787: EQUAL
40788: AND
40789: IFFALSE 40803
// Say ( Gary , D20-Gary-1 ) ;
40791: LD_EXP 15
40795: PPUSH
40796: LD_STRING D20-Gary-1
40798: PPUSH
40799: CALL_OW 88
// if IsOk ( Coonie ) and GetSide ( Coonie ) = americans then
40803: LD_EXP 18
40807: PPUSH
40808: CALL_OW 302
40812: PUSH
40813: LD_EXP 18
40817: PPUSH
40818: CALL_OW 255
40822: PUSH
40823: LD_EXP 176
40827: EQUAL
40828: AND
40829: IFFALSE 40843
// Say ( Coonie , D20-Con-1 ) ;
40831: LD_EXP 18
40835: PPUSH
40836: LD_STRING D20-Con-1
40838: PPUSH
40839: CALL_OW 88
// if IsOk ( Kurt ) and GetSide ( Kurt ) = americans then
40843: LD_EXP 13
40847: PPUSH
40848: CALL_OW 302
40852: PUSH
40853: LD_EXP 13
40857: PPUSH
40858: CALL_OW 255
40862: PUSH
40863: LD_EXP 176
40867: EQUAL
40868: AND
40869: IFFALSE 40883
// Say ( Kurt , D20-Kurt-1 ) ;
40871: LD_EXP 13
40875: PPUSH
40876: LD_STRING D20-Kurt-1
40878: PPUSH
40879: CALL_OW 88
// if IsOk ( Yamoko ) and GetSide ( Yamoko ) = americans then
40883: LD_EXP 14
40887: PPUSH
40888: CALL_OW 302
40892: PUSH
40893: LD_EXP 14
40897: PPUSH
40898: CALL_OW 255
40902: PUSH
40903: LD_EXP 176
40907: EQUAL
40908: AND
40909: IFFALSE 40923
// Say ( Yamoko , D20-Yam-1 ) ;
40911: LD_EXP 14
40915: PPUSH
40916: LD_STRING D20-Yam-1
40918: PPUSH
40919: CALL_OW 88
// if IsOk ( Frank ) and GetSide ( Frank ) = americans then
40923: LD_EXP 6
40927: PPUSH
40928: CALL_OW 302
40932: PUSH
40933: LD_EXP 6
40937: PPUSH
40938: CALL_OW 255
40942: PUSH
40943: LD_EXP 176
40947: EQUAL
40948: AND
40949: IFFALSE 40963
// Say ( Frank , D20-Frank-1 ) ;
40951: LD_EXP 6
40955: PPUSH
40956: LD_STRING D20-Frank-1
40958: PPUSH
40959: CALL_OW 88
// DialogueOFF ;
40963: CALL_OW 7
// if Roth_Captured then
40967: LD_EXP 54
40971: IFFALSE 40985
// AddMedal ( Roth , 1 ) else
40973: LD_STRING Roth
40975: PPUSH
40976: LD_INT 1
40978: PPUSH
40979: CALL_OW 101
40983: GO 41020
// begin if IsOk ( Roth ) then
40985: LD_EXP 20
40989: PPUSH
40990: CALL_OW 302
40994: IFFALSE 41009
// AddMedal ( Roth , - 2 ) else
40996: LD_STRING Roth
40998: PPUSH
40999: LD_INT 2
41001: NEG
41002: PPUSH
41003: CALL_OW 101
41007: GO 41020
// AddMedal ( Roth , - 1 ) ;
41009: LD_STRING Roth
41011: PPUSH
41012: LD_INT 1
41014: NEG
41015: PPUSH
41016: CALL_OW 101
// end ; AddMedal ( Project , Russian_project_canceled ) ;
41020: LD_STRING Project
41022: PPUSH
41023: LD_EXP 55
41027: PPUSH
41028: CALL_OW 101
// AddMedal ( NoLosses , No_Looses ) ;
41032: LD_STRING NoLosses
41034: PPUSH
41035: LD_EXP 56
41039: PPUSH
41040: CALL_OW 101
// SA_OnMissionComplete ;
41044: CALL 56098 0 0
// GiveMedals ( MAIN ) ;
41048: LD_STRING MAIN
41050: PPUSH
41051: CALL_OW 102
// SaveCharacters ( JMM , JMM ) ;
41055: LD_EXP 1
41059: PPUSH
41060: LD_STRING JMM
41062: PPUSH
41063: CALL_OW 38
// if IsLive ( Cyrus ) then
41067: LD_EXP 4
41071: PPUSH
41072: CALL_OW 300
41076: IFFALSE 41090
// SaveCharacters ( Cyrus , Cyrus ) ;
41078: LD_EXP 4
41082: PPUSH
41083: LD_STRING Cyrus
41085: PPUSH
41086: CALL_OW 38
// if IsLive ( Bobby ) then
41090: LD_EXP 3
41094: PPUSH
41095: CALL_OW 300
41099: IFFALSE 41113
// SaveCharacters ( Bobby , Bobby ) ;
41101: LD_EXP 3
41105: PPUSH
41106: LD_STRING Bobby
41108: PPUSH
41109: CALL_OW 38
// if IsLive ( Lisa ) then
41113: LD_EXP 5
41117: PPUSH
41118: CALL_OW 300
41122: IFFALSE 41136
// SaveCharacters ( Lisa , Lisa ) ;
41124: LD_EXP 5
41128: PPUSH
41129: LD_STRING Lisa
41131: PPUSH
41132: CALL_OW 38
// if IsLive ( Frank ) then
41136: LD_EXP 6
41140: PPUSH
41141: CALL_OW 300
41145: IFFALSE 41159
// SaveCharacters ( Frank , Frank ) ;
41147: LD_EXP 6
41151: PPUSH
41152: LD_STRING Frank
41154: PPUSH
41155: CALL_OW 38
// if IsLive ( Donaldson ) then
41159: LD_EXP 8
41163: PPUSH
41164: CALL_OW 300
41168: IFFALSE 41182
// SaveCharacters ( Donaldson , Donaldson ) ;
41170: LD_EXP 8
41174: PPUSH
41175: LD_STRING Donaldson
41177: PPUSH
41178: CALL_OW 38
// if IsLive ( Brown ) then
41182: LD_EXP 7
41186: PPUSH
41187: CALL_OW 300
41191: IFFALSE 41205
// SaveCharacters ( Brown , Brown ) ;
41193: LD_EXP 7
41197: PPUSH
41198: LD_STRING Brown
41200: PPUSH
41201: CALL_OW 38
// if IsLive ( Denis ) then
41205: LD_EXP 11
41209: PPUSH
41210: CALL_OW 300
41214: IFFALSE 41228
// SaveCharacters ( Denis , Denis ) ;
41216: LD_EXP 11
41220: PPUSH
41221: LD_STRING Denis
41223: PPUSH
41224: CALL_OW 38
// if IsLive ( Gladstone ) then
41228: LD_EXP 9
41232: PPUSH
41233: CALL_OW 300
41237: IFFALSE 41251
// SaveCharacters ( Gladstone , Gladstone ) ;
41239: LD_EXP 9
41243: PPUSH
41244: LD_STRING Gladstone
41246: PPUSH
41247: CALL_OW 38
// if IsLive ( Yamoko ) then
41251: LD_EXP 14
41255: PPUSH
41256: CALL_OW 300
41260: IFFALSE 41274
// SaveCharacters ( Yamoko , Yamoko ) ;
41262: LD_EXP 14
41266: PPUSH
41267: LD_STRING Yamoko
41269: PPUSH
41270: CALL_OW 38
// if IsLive ( Cornell ) then
41274: LD_EXP 10
41278: PPUSH
41279: CALL_OW 300
41283: IFFALSE 41297
// SaveCharacters ( Cornell , Cornell ) ;
41285: LD_EXP 10
41289: PPUSH
41290: LD_STRING Cornell
41292: PPUSH
41293: CALL_OW 38
// if IsLive ( Joan ) then
41297: LD_EXP 12
41301: PPUSH
41302: CALL_OW 300
41306: IFFALSE 41320
// SaveCharacters ( Joan , Joan ) ;
41308: LD_EXP 12
41312: PPUSH
41313: LD_STRING Joan
41315: PPUSH
41316: CALL_OW 38
// if IsLive ( Kurt ) then
41320: LD_EXP 13
41324: PPUSH
41325: CALL_OW 300
41329: IFFALSE 41343
// SaveCharacters ( Kurt , Kurt ) ;
41331: LD_EXP 13
41335: PPUSH
41336: LD_STRING Kurt
41338: PPUSH
41339: CALL_OW 38
// if IsLive ( Gary ) then
41343: LD_EXP 15
41347: PPUSH
41348: CALL_OW 300
41352: IFFALSE 41366
// SaveCharacters ( Gary , Gary ) ;
41354: LD_EXP 15
41358: PPUSH
41359: LD_STRING Gary
41361: PPUSH
41362: CALL_OW 38
// if IsLive ( Stevens ) then
41366: LD_EXP 17
41370: PPUSH
41371: CALL_OW 300
41375: IFFALSE 41389
// SaveCharacters ( Stevens , Stevens ) ;
41377: LD_EXP 17
41381: PPUSH
41382: LD_STRING Stevens
41384: PPUSH
41385: CALL_OW 38
// if IsLive ( Coonie ) then
41389: LD_EXP 18
41393: PPUSH
41394: CALL_OW 300
41398: IFFALSE 41412
// SaveCharacters ( Coonie , Coonie ) ;
41400: LD_EXP 18
41404: PPUSH
41405: LD_STRING Coonie
41407: PPUSH
41408: CALL_OW 38
// if IsLive ( Baker ) then
41412: LD_EXP 23
41416: PPUSH
41417: CALL_OW 300
41421: IFFALSE 41435
// SaveCharacters ( Baker , Baker ) ;
41423: LD_EXP 23
41427: PPUSH
41428: LD_STRING Baker
41430: PPUSH
41431: CALL_OW 38
// if IsLive ( VanHouten ) then
41435: LD_EXP 24
41439: PPUSH
41440: CALL_OW 300
41444: IFFALSE 41458
// SaveCharacters ( VanHouten , VanHouten ) ;
41446: LD_EXP 24
41450: PPUSH
41451: LD_STRING VanHouten
41453: PPUSH
41454: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_alive ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) diff [ JMM , Cyrus , Bobby , Lisa , Frank , Donaldson , Brown , Denis , Gladstone , Yamoko , Cornell , Joan , Kurt , Gary , Stevens , Coonie , Baker , VanHouten ] , Am15Winners ) ;
41458: LD_INT 51
41460: PUSH
41461: EMPTY
41462: LIST
41463: PUSH
41464: LD_INT 22
41466: PUSH
41467: LD_EXP 176
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 21
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: PPUSH
41491: CALL_OW 69
41495: PUSH
41496: LD_EXP 1
41500: PUSH
41501: LD_EXP 4
41505: PUSH
41506: LD_EXP 3
41510: PUSH
41511: LD_EXP 5
41515: PUSH
41516: LD_EXP 6
41520: PUSH
41521: LD_EXP 8
41525: PUSH
41526: LD_EXP 7
41530: PUSH
41531: LD_EXP 11
41535: PUSH
41536: LD_EXP 9
41540: PUSH
41541: LD_EXP 14
41545: PUSH
41546: LD_EXP 10
41550: PUSH
41551: LD_EXP 12
41555: PUSH
41556: LD_EXP 13
41560: PUSH
41561: LD_EXP 15
41565: PUSH
41566: LD_EXP 17
41570: PUSH
41571: LD_EXP 18
41575: PUSH
41576: LD_EXP 23
41580: PUSH
41581: LD_EXP 24
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: DIFF
41606: PPUSH
41607: LD_STRING Am15Winners
41609: PPUSH
41610: CALL_OW 38
// YouWin ;
41614: CALL_OW 103
// ExitGame ;
41618: CALL_OW 341
// end ; end_of_file
41622: END
// export function StartRussianBase ; var i , Bunkers , Turrets , units_to_protect , Teleport1 , Teleport2 , R_Eng ; begin
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
// Teleport1 = GetUnitNumber ( 165 , 60 ) ;
41633: LD_ADDR_VAR 0 6
41637: PUSH
41638: LD_INT 165
41640: PPUSH
41641: LD_INT 60
41643: PPUSH
41644: CALL_OW 438
41648: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
41649: LD_ADDR_VAR 0 7
41653: PUSH
41654: LD_INT 182
41656: PPUSH
41657: LD_INT 87
41659: PPUSH
41660: CALL_OW 438
41664: ST_TO_ADDR
// TeleportExit ( Teleport1 , 90 , 71 ) ;
41665: LD_VAR 0 6
41669: PPUSH
41670: LD_INT 90
41672: PPUSH
41673: LD_INT 71
41675: PPUSH
41676: CALL_OW 243
// TeleportExit ( Teleport2 , 147 , 109 ) ;
41680: LD_VAR 0 7
41684: PPUSH
41685: LD_INT 147
41687: PPUSH
41688: LD_INT 109
41690: PPUSH
41691: CALL_OW 243
// for i = 3 to 4 do
41695: LD_ADDR_VAR 0 2
41699: PUSH
41700: DOUBLE
41701: LD_INT 3
41703: DEC
41704: ST_TO_ADDR
41705: LD_INT 4
41707: PUSH
41708: FOR_TO
41709: IFFALSE 41731
// ComEnterUnit ( Russian_scientists [ i ] , RusLab1 ) ;
41711: LD_EXP 108
41715: PUSH
41716: LD_VAR 0 2
41720: ARRAY
41721: PPUSH
41722: LD_INT 2
41724: PPUSH
41725: CALL_OW 120
41729: GO 41708
41731: POP
41732: POP
// for i = 5 to 6 do
41733: LD_ADDR_VAR 0 2
41737: PUSH
41738: DOUBLE
41739: LD_INT 5
41741: DEC
41742: ST_TO_ADDR
41743: LD_INT 6
41745: PUSH
41746: FOR_TO
41747: IFFALSE 41769
// ComEnterUnit ( Russian_scientists [ i ] , RusLab2 ) ;
41749: LD_EXP 108
41753: PUSH
41754: LD_VAR 0 2
41758: ARRAY
41759: PPUSH
41760: LD_INT 1
41762: PPUSH
41763: CALL_OW 120
41767: GO 41746
41769: POP
41770: POP
// for i = 3 to Number_of_Russian_Engineers do
41771: LD_ADDR_VAR 0 2
41775: PUSH
41776: DOUBLE
41777: LD_INT 3
41779: DEC
41780: ST_TO_ADDR
41781: LD_EXP 136
41785: PUSH
41786: FOR_TO
41787: IFFALSE 41827
// begin ComEnterUnit ( Russian_engineers [ i ] , RusLab2 ) ;
41789: LD_EXP 109
41793: PUSH
41794: LD_VAR 0 2
41798: ARRAY
41799: PPUSH
41800: LD_INT 1
41802: PPUSH
41803: CALL_OW 120
// AddComChangeProfession ( Russian_engineers [ i ] , class_scientistic ) ;
41807: LD_EXP 109
41811: PUSH
41812: LD_VAR 0 2
41816: ARRAY
41817: PPUSH
41818: LD_INT 4
41820: PPUSH
41821: CALL_OW 183
// end ;
41825: GO 41786
41827: POP
41828: POP
// ComResearch ( RusLab1 , tech_Comp1 ) ;
41829: LD_INT 2
41831: PPUSH
41832: LD_INT 57
41834: PPUSH
41835: CALL_OW 124
// ComResearch ( RusLab1 , tech_Comp2 ) ;
41839: LD_INT 2
41841: PPUSH
41842: LD_INT 58
41844: PPUSH
41845: CALL_OW 124
// AddComResearch ( RusLab1 , tech_Comp3 ) ;
41849: LD_INT 2
41851: PPUSH
41852: LD_INT 59
41854: PPUSH
41855: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST1 ) ;
41859: LD_INT 2
41861: PPUSH
41862: LD_INT 63
41864: PPUSH
41865: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST2 ) ;
41869: LD_INT 2
41871: PPUSH
41872: LD_INT 64
41874: PPUSH
41875: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST3 ) ;
41879: LD_INT 2
41881: PPUSH
41882: LD_INT 65
41884: PPUSH
41885: CALL_OW 184
// ComResearch ( RusLab2 , tech_Weap1 ) ;
41889: LD_INT 1
41891: PPUSH
41892: LD_INT 51
41894: PPUSH
41895: CALL_OW 124
// AddComResearch ( RusLab2 , tech_Weap2 ) ;
41899: LD_INT 1
41901: PPUSH
41902: LD_INT 52
41904: PPUSH
41905: CALL_OW 184
// AddComResearch ( RusLab2 , tech_SibFiss ) ;
41909: LD_INT 1
41911: PPUSH
41912: LD_INT 25
41914: PPUSH
41915: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Weap3 ) ;
41919: LD_INT 1
41921: PPUSH
41922: LD_INT 53
41924: PPUSH
41925: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib1 ) ;
41929: LD_INT 1
41931: PPUSH
41932: LD_INT 54
41934: PPUSH
41935: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib2 ) ;
41939: LD_INT 1
41941: PPUSH
41942: LD_INT 55
41944: PPUSH
41945: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib3 ) ;
41949: LD_INT 1
41951: PPUSH
41952: LD_INT 56
41954: PPUSH
41955: CALL_OW 184
// for i = 1 to 3 do
41959: LD_ADDR_VAR 0 2
41963: PUSH
41964: DOUBLE
41965: LD_INT 1
41967: DEC
41968: ST_TO_ADDR
41969: LD_INT 3
41971: PUSH
41972: FOR_TO
41973: IFFALSE 42003
// ComEnterUnit ( Russian_mechanics [ i ] , GetUnitNumber ( 195 , 84 ) ) ;
41975: LD_EXP 110
41979: PUSH
41980: LD_VAR 0 2
41984: ARRAY
41985: PPUSH
41986: LD_INT 195
41988: PPUSH
41989: LD_INT 84
41991: PPUSH
41992: CALL_OW 438
41996: PPUSH
41997: CALL_OW 120
42001: GO 41972
42003: POP
42004: POP
// for i = 4 to 6 do
42005: LD_ADDR_VAR 0 2
42009: PUSH
42010: DOUBLE
42011: LD_INT 4
42013: DEC
42014: ST_TO_ADDR
42015: LD_INT 6
42017: PUSH
42018: FOR_TO
42019: IFFALSE 42049
// ComEnterUnit ( Russian_mechanics [ i ] , GetUnitNumber ( 170 , 35 ) ) ;
42021: LD_EXP 110
42025: PUSH
42026: LD_VAR 0 2
42030: ARRAY
42031: PPUSH
42032: LD_INT 170
42034: PPUSH
42035: LD_INT 35
42037: PPUSH
42038: CALL_OW 438
42042: PPUSH
42043: CALL_OW 120
42047: GO 42018
42049: POP
42050: POP
// Bunkers = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
42051: LD_ADDR_VAR 0 3
42055: PUSH
42056: LD_INT 22
42058: PUSH
42059: LD_EXP 178
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 21
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 30
42080: PUSH
42081: LD_INT 32
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: PPUSH
42093: CALL_OW 69
42097: ST_TO_ADDR
// if Bunkers <= Russian_soldiers then
42098: LD_VAR 0 3
42102: PUSH
42103: LD_EXP 107
42107: LESSEQUAL
42108: IFFALSE 42206
// begin for i = 1 to Bunkers do
42110: LD_ADDR_VAR 0 2
42114: PUSH
42115: DOUBLE
42116: LD_INT 1
42118: DEC
42119: ST_TO_ADDR
42120: LD_VAR 0 3
42124: PUSH
42125: FOR_TO
42126: IFFALSE 42156
// ComEnterUnit ( Russian_soldiers [ i ] , Bunkers [ i ] ) ;
42128: LD_EXP 107
42132: PUSH
42133: LD_VAR 0 2
42137: ARRAY
42138: PPUSH
42139: LD_VAR 0 3
42143: PUSH
42144: LD_VAR 0 2
42148: ARRAY
42149: PPUSH
42150: CALL_OW 120
42154: GO 42125
42156: POP
42157: POP
// for i = Bunkers + 1 to Russian_soldiers do
42158: LD_ADDR_VAR 0 2
42162: PUSH
42163: DOUBLE
42164: LD_VAR 0 3
42168: PUSH
42169: LD_INT 1
42171: PLUS
42172: DEC
42173: ST_TO_ADDR
42174: LD_EXP 107
42178: PUSH
42179: FOR_TO
42180: IFFALSE 42202
// ComEnterUnit ( Russian_soldiers [ i ] , RusBarr1 ) ;
42182: LD_EXP 107
42186: PUSH
42187: LD_VAR 0 2
42191: ARRAY
42192: PPUSH
42193: LD_INT 27
42195: PPUSH
42196: CALL_OW 120
42200: GO 42179
42202: POP
42203: POP
// end else
42204: GO 42254
// begin for i = 1 to Russian_soldiers do
42206: LD_ADDR_VAR 0 2
42210: PUSH
42211: DOUBLE
42212: LD_INT 1
42214: DEC
42215: ST_TO_ADDR
42216: LD_EXP 107
42220: PUSH
42221: FOR_TO
42222: IFFALSE 42252
// ComEnterUnit ( Russian_soldiers [ i ] , Bunkers [ i ] ) ;
42224: LD_EXP 107
42228: PUSH
42229: LD_VAR 0 2
42233: ARRAY
42234: PPUSH
42235: LD_VAR 0 3
42239: PUSH
42240: LD_VAR 0 2
42244: ARRAY
42245: PPUSH
42246: CALL_OW 120
42250: GO 42221
42252: POP
42253: POP
// end ; Turrets = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_building ] , [ f_btype , b_turret ] ] ) ;
42254: LD_ADDR_VAR 0 4
42258: PUSH
42259: LD_INT 22
42261: PUSH
42262: LD_EXP 178
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 21
42273: PUSH
42274: LD_INT 3
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 30
42283: PUSH
42284: LD_INT 33
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: LIST
42295: PPUSH
42296: CALL_OW 69
42300: ST_TO_ADDR
// units_to_protect = Bunkers ^ Turrets ^ RusBarr1 ^ RusBarr2 ;
42301: LD_ADDR_VAR 0 5
42305: PUSH
42306: LD_VAR 0 3
42310: PUSH
42311: LD_VAR 0 4
42315: ADD
42316: PUSH
42317: LD_INT 27
42319: ADD
42320: PUSH
42321: LD_INT 3
42323: ADD
42324: ST_TO_ADDR
// Russian_reg_def_id = McRegistry ( russians , [ [ mc_reg_area_to_guard , Rus_Base ] , [ mc_reg_area_to_protect , Rus_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
42325: LD_ADDR_EXP 244
42329: PUSH
42330: LD_EXP 178
42334: PPUSH
42335: LD_INT 2
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 5
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 4
42357: PUSH
42358: LD_VAR 0 5
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 8
42369: NEG
42370: PUSH
42371: LD_INT 7
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: PPUSH
42382: CALL_OW 399
42386: ST_TO_ADDR
// Russian_def_id = McDefend ( 100 , Russian_reg_def_id , Russian_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Rus_Base ] , [ mc_retreat_area_people , Rus_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
42387: LD_ADDR_EXP 245
42391: PUSH
42392: LD_INT 100
42394: PPUSH
42395: LD_EXP 244
42399: PPUSH
42400: LD_EXP 107
42404: PUSH
42405: LD_VAR 0 5
42409: ADD
42410: PPUSH
42411: LD_INT 2
42413: PUSH
42414: LD_INT 5
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 7
42423: PUSH
42424: LD_INT 27
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 5
42433: PUSH
42434: LD_INT 550
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: PPUSH
42446: CALL_OW 401
42450: ST_TO_ADDR
// R_Eng = [ ] ;
42451: LD_ADDR_VAR 0 8
42455: PUSH
42456: EMPTY
42457: ST_TO_ADDR
// for i = 3 to Russian_Engineers do
42458: LD_ADDR_VAR 0 2
42462: PUSH
42463: DOUBLE
42464: LD_INT 3
42466: DEC
42467: ST_TO_ADDR
42468: LD_EXP 109
42472: PUSH
42473: FOR_TO
42474: IFFALSE 42500
// R_Eng = R_Eng ^ Russian_Engineers [ i ] ;
42476: LD_ADDR_VAR 0 8
42480: PUSH
42481: LD_VAR 0 8
42485: PUSH
42486: LD_EXP 109
42490: PUSH
42491: LD_VAR 0 2
42495: ARRAY
42496: ADD
42497: ST_TO_ADDR
42498: GO 42473
42500: POP
42501: POP
// McBase ( Russian_build_id , R_Eng , Russian_Buildings , [ ] , [ ] , [ mc_base_cont ] ) ;
42502: LD_EXP 246
42506: PPUSH
42507: LD_VAR 0 8
42511: PPUSH
42512: LD_EXP 113
42516: PPUSH
42517: EMPTY
42518: PPUSH
42519: EMPTY
42520: PPUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: PPUSH
42527: CALL_OW 397
// end ;
42531: LD_VAR 0 1
42535: RET
// export function ChangeScientists ( Uns ) ; var Un , hex , InBarr1 , InBarr2 , eng , i ; begin
42536: LD_INT 0
42538: PPUSH
42539: PPUSH
42540: PPUSH
42541: PPUSH
42542: PPUSH
42543: PPUSH
42544: PPUSH
// eng = Uns isect Russian_engineers ;
42545: LD_ADDR_VAR 0 7
42549: PUSH
42550: LD_VAR 0 1
42554: PUSH
42555: LD_EXP 109
42559: ISECT
42560: ST_TO_ADDR
// Uns = Uns diff ( Uns isect Russian_engineers ) ;
42561: LD_ADDR_VAR 0 1
42565: PUSH
42566: LD_VAR 0 1
42570: PUSH
42571: LD_VAR 0 1
42575: PUSH
42576: LD_EXP 109
42580: ISECT
42581: DIFF
42582: ST_TO_ADDR
// AddMcUnits ( Russian_build_id , eng ) ;
42583: LD_EXP 246
42587: PPUSH
42588: LD_VAR 0 7
42592: PPUSH
42593: CALL_OW 390
// for i = 1 to 2 do
42597: LD_ADDR_VAR 0 8
42601: PUSH
42602: DOUBLE
42603: LD_INT 1
42605: DEC
42606: ST_TO_ADDR
42607: LD_INT 2
42609: PUSH
42610: FOR_TO
42611: IFFALSE 42665
// if Uns <> 0 then
42613: LD_VAR 0 1
42617: PUSH
42618: LD_INT 0
42620: NONEQUAL
42621: IFFALSE 42663
// begin Rus_Doctors = Rus_Doctors ^ Russian_engineers [ 1 ] ;
42623: LD_ADDR_EXP 112
42627: PUSH
42628: LD_EXP 112
42632: PUSH
42633: LD_EXP 109
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: ADD
42642: ST_TO_ADDR
// Uns = Uns diff Russian_engineers [ 1 ] ;
42643: LD_ADDR_VAR 0 1
42647: PUSH
42648: LD_VAR 0 1
42652: PUSH
42653: LD_EXP 109
42657: PUSH
42658: LD_INT 1
42660: ARRAY
42661: DIFF
42662: ST_TO_ADDR
// end ;
42663: GO 42610
42665: POP
42666: POP
// for Un in Rus_Doctors do
42667: LD_ADDR_VAR 0 3
42671: PUSH
42672: LD_EXP 112
42676: PUSH
42677: FOR_IN
42678: IFFALSE 42734
// begin hex = RandHexArea ( Rus_Heal , true ) ;
42680: LD_ADDR_VAR 0 4
42684: PUSH
42685: LD_INT 27
42687: PPUSH
42688: LD_INT 1
42690: PPUSH
42691: CALL_OW 16
42695: ST_TO_ADDR
// SetRememberedX ( Un , hex [ 1 ] ) ;
42696: LD_VAR 0 3
42700: PPUSH
42701: LD_VAR 0 4
42705: PUSH
42706: LD_INT 1
42708: ARRAY
42709: PPUSH
42710: CALL_OW 231
// SetRememberedY ( Un , hex [ 2 ] ) ;
42714: LD_VAR 0 3
42718: PPUSH
42719: LD_VAR 0 4
42723: PUSH
42724: LD_INT 2
42726: ARRAY
42727: PPUSH
42728: CALL_OW 232
// end ;
42732: GO 42677
42734: POP
42735: POP
// ComReturn ( Rus_Doctors ) ;
42736: LD_EXP 112
42740: PPUSH
42741: CALL_OW 144
// InBarr1 = UnitsInside ( RusBarr1 ) ;
42745: LD_ADDR_VAR 0 5
42749: PUSH
42750: LD_INT 27
42752: PPUSH
42753: CALL_OW 313
42757: ST_TO_ADDR
// InBarr2 = UnitsInside ( RusBarr2 ) ;
42758: LD_ADDR_VAR 0 6
42762: PUSH
42763: LD_INT 3
42765: PPUSH
42766: CALL_OW 313
42770: ST_TO_ADDR
// for Un in Uns do
42771: LD_ADDR_VAR 0 3
42775: PUSH
42776: LD_VAR 0 1
42780: PUSH
42781: FOR_IN
42782: IFFALSE 42952
// begin if InBarr1 < 6 then
42784: LD_VAR 0 5
42788: PUSH
42789: LD_INT 6
42791: LESS
42792: IFFALSE 42852
// begin InBarr1 = InBarr1 + 1 ;
42794: LD_ADDR_VAR 0 5
42798: PUSH
42799: LD_VAR 0 5
42803: PUSH
42804: LD_INT 1
42806: PLUS
42807: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ Un ;
42808: LD_ADDR_EXP 107
42812: PUSH
42813: LD_EXP 107
42817: PUSH
42818: LD_VAR 0 3
42822: ADD
42823: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
42824: LD_EXP 245
42828: PPUSH
42829: LD_VAR 0 3
42833: PPUSH
42834: CALL_OW 390
// ComEnterUnit ( Un , RusBarr1 ) ;
42838: LD_VAR 0 3
42842: PPUSH
42843: LD_INT 27
42845: PPUSH
42846: CALL_OW 120
// end else
42850: GO 42950
// if InBarr2 < 6 then
42852: LD_VAR 0 6
42856: PUSH
42857: LD_INT 6
42859: LESS
42860: IFFALSE 42920
// begin InBarr2 = InBarr2 + 1 ;
42862: LD_ADDR_VAR 0 6
42866: PUSH
42867: LD_VAR 0 6
42871: PUSH
42872: LD_INT 1
42874: PLUS
42875: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ Un ;
42876: LD_ADDR_EXP 107
42880: PUSH
42881: LD_EXP 107
42885: PUSH
42886: LD_VAR 0 3
42890: ADD
42891: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
42892: LD_EXP 245
42896: PPUSH
42897: LD_VAR 0 3
42901: PPUSH
42902: CALL_OW 390
// ComEnterUnit ( Un , RusBarr2 ) ;
42906: LD_VAR 0 3
42910: PPUSH
42911: LD_INT 3
42913: PPUSH
42914: CALL_OW 120
// end else
42918: GO 42950
// begin Russian_soldiers = Russian_soldiers ^ Un ;
42920: LD_ADDR_EXP 107
42924: PUSH
42925: LD_EXP 107
42929: PUSH
42930: LD_VAR 0 3
42934: ADD
42935: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
42936: LD_EXP 245
42940: PPUSH
42941: LD_VAR 0 3
42945: PPUSH
42946: CALL_OW 390
// end ; end ;
42950: GO 42781
42952: POP
42953: POP
// end ;
42954: LD_VAR 0 2
42958: RET
// every 0 0$5 do var Un ;
42959: GO 42961
42961: DISABLE
42962: LD_INT 0
42964: PPUSH
// begin for Un in Rus_Doctors do
42965: LD_ADDR_VAR 0 1
42969: PUSH
42970: LD_EXP 112
42974: PUSH
42975: FOR_IN
42976: IFFALSE 43066
// begin if not ( HasTask ( Un ) ) then
42978: LD_VAR 0 1
42982: PPUSH
42983: CALL_OW 314
42987: NOT
42988: IFFALSE 43064
// if ( GetClass ( Un ) <> class_scientistic ) then
42990: LD_VAR 0 1
42994: PPUSH
42995: CALL_OW 257
42999: PUSH
43000: LD_INT 4
43002: NONEQUAL
43003: IFFALSE 43040
// begin ComEnterUnit ( Un , RusLab2 ) ;
43005: LD_VAR 0 1
43009: PPUSH
43010: LD_INT 1
43012: PPUSH
43013: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
43017: LD_VAR 0 1
43021: PPUSH
43022: LD_INT 4
43024: PPUSH
43025: CALL_OW 183
// AddComReturn ( Un ) ;
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 204
// end else
43038: GO 43064
// if not ( IsInArea ( Un , Rus_Heal ) ) then
43040: LD_VAR 0 1
43044: PPUSH
43045: LD_INT 27
43047: PPUSH
43048: CALL_OW 308
43052: NOT
43053: IFFALSE 43064
// ComReturn ( Un ) ;
43055: LD_VAR 0 1
43059: PPUSH
43060: CALL_OW 144
// end ;
43064: GO 42975
43066: POP
43067: POP
// end ;
43068: PPOPN 1
43070: END
// function GetRandomVehicle ( time ) ; var Rand_Veh , Selected , Credits , Probab , engine ; begin
43071: LD_INT 0
43073: PPUSH
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
// Selected = false ;
43079: LD_ADDR_VAR 0 4
43083: PUSH
43084: LD_INT 0
43086: ST_TO_ADDR
// engine = engine_siberite ;
43087: LD_ADDR_VAR 0 7
43091: PUSH
43092: LD_INT 3
43094: ST_TO_ADDR
// repeat Probab = Rand ( 1 , 100 ) ;
43095: LD_ADDR_VAR 0 6
43099: PUSH
43100: LD_INT 1
43102: PPUSH
43103: LD_INT 100
43105: PPUSH
43106: CALL_OW 12
43110: ST_TO_ADDR
// case time of 1 :
43111: LD_VAR 0 1
43115: PUSH
43116: LD_INT 1
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43170
43124: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 , 5 , 6 ] [ Rand ( 1 , 6 ) ] ; 2 :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 4
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: LD_INT 6
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PPUSH
43159: LD_INT 6
43161: PPUSH
43162: CALL_OW 12
43166: ARRAY
43167: ST_TO_ADDR
43168: GO 43287
43170: LD_INT 2
43172: DOUBLE
43173: EQUAL
43174: IFTRUE 43178
43176: GO 43224
43178: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 , 8 ] [ Rand ( 1 , 6 ) ] ; 3 :
43179: LD_ADDR_VAR 0 3
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: LD_INT 5
43192: PUSH
43193: LD_INT 6
43195: PUSH
43196: LD_INT 7
43198: PUSH
43199: LD_INT 8
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PPUSH
43213: LD_INT 6
43215: PPUSH
43216: CALL_OW 12
43220: ARRAY
43221: ST_TO_ADDR
43222: GO 43287
43224: LD_INT 3
43226: DOUBLE
43227: EQUAL
43228: IFTRUE 43232
43230: GO 43286
43232: POP
// Rand_Veh = [ 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] [ Rand ( 1 , 8 ) ] ; end ;
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_INT 5
43240: PUSH
43241: LD_INT 6
43243: PUSH
43244: LD_INT 7
43246: PUSH
43247: LD_INT 8
43249: PUSH
43250: LD_INT 9
43252: PUSH
43253: LD_INT 10
43255: PUSH
43256: LD_INT 11
43258: PUSH
43259: LD_INT 12
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PPUSH
43275: LD_INT 8
43277: PPUSH
43278: CALL_OW 12
43282: ARRAY
43283: ST_TO_ADDR
43284: GO 43287
43286: POP
// case Rand_Veh of 1 :
43287: LD_VAR 0 3
43291: PUSH
43292: LD_INT 1
43294: DOUBLE
43295: EQUAL
43296: IFTRUE 43300
43298: GO 43393
43300: POP
// begin if ( time <= 1 and Probab < 60 ) or ( time <= 3 and Probab < 20 ) then
43301: LD_VAR 0 1
43305: PUSH
43306: LD_INT 1
43308: LESSEQUAL
43309: PUSH
43310: LD_VAR 0 6
43314: PUSH
43315: LD_INT 60
43317: LESS
43318: AND
43319: PUSH
43320: LD_VAR 0 1
43324: PUSH
43325: LD_INT 3
43327: LESSEQUAL
43328: PUSH
43329: LD_VAR 0 6
43333: PUSH
43334: LD_INT 20
43336: LESS
43337: AND
43338: OR
43339: IFFALSE 43391
// begin Selected = true ;
43341: LD_ADDR_VAR 0 4
43345: PUSH
43346: LD_INT 1
43348: ST_TO_ADDR
// Credits = 3 ;
43349: LD_ADDR_VAR 0 5
43353: PUSH
43354: LD_INT 3
43356: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_heavy_machine_gun ] ] ;
43357: LD_ADDR_EXP 121
43361: PUSH
43362: LD_EXP 121
43366: PUSH
43367: LD_INT 22
43369: PUSH
43370: LD_VAR 0 7
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 42
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: ADD
43390: ST_TO_ADDR
// end ; end ; 2 :
43391: GO 44210
43393: LD_INT 2
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43401
43399: GO 43494
43401: POP
// begin if ( time <= 1 and Probab < 80 ) or ( time <= 3 and Probab < 30 ) then
43402: LD_VAR 0 1
43406: PUSH
43407: LD_INT 1
43409: LESSEQUAL
43410: PUSH
43411: LD_VAR 0 6
43415: PUSH
43416: LD_INT 80
43418: LESS
43419: AND
43420: PUSH
43421: LD_VAR 0 1
43425: PUSH
43426: LD_INT 3
43428: LESSEQUAL
43429: PUSH
43430: LD_VAR 0 6
43434: PUSH
43435: LD_INT 30
43437: LESS
43438: AND
43439: OR
43440: IFFALSE 43492
// begin Selected = true ;
43442: LD_ADDR_VAR 0 4
43446: PUSH
43447: LD_INT 1
43449: ST_TO_ADDR
// Credits = 4 ;
43450: LD_ADDR_VAR 0 5
43454: PUSH
43455: LD_INT 4
43457: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_heavy_machine_gun ] ] ;
43458: LD_ADDR_EXP 121
43462: PUSH
43463: LD_EXP 121
43467: PUSH
43468: LD_INT 24
43470: PUSH
43471: LD_VAR 0 7
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: LD_INT 42
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: PUSH
43488: EMPTY
43489: LIST
43490: ADD
43491: ST_TO_ADDR
// end ; end ; 4 :
43492: GO 44210
43494: LD_INT 4
43496: DOUBLE
43497: EQUAL
43498: IFTRUE 43502
43500: GO 43615
43502: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 80 ) or ( time > 3 and Probab < 50 ) then
43503: LD_VAR 0 1
43507: PUSH
43508: LD_INT 1
43510: LESSEQUAL
43511: PUSH
43512: LD_VAR 0 6
43516: PUSH
43517: LD_INT 100
43519: LESS
43520: AND
43521: PUSH
43522: LD_VAR 0 1
43526: PUSH
43527: LD_INT 3
43529: LESSEQUAL
43530: PUSH
43531: LD_VAR 0 6
43535: PUSH
43536: LD_INT 80
43538: LESS
43539: AND
43540: OR
43541: PUSH
43542: LD_VAR 0 1
43546: PUSH
43547: LD_INT 3
43549: GREATER
43550: PUSH
43551: LD_VAR 0 6
43555: PUSH
43556: LD_INT 50
43558: LESS
43559: AND
43560: OR
43561: IFFALSE 43613
// begin Selected = true ;
43563: LD_ADDR_VAR 0 4
43567: PUSH
43568: LD_INT 1
43570: ST_TO_ADDR
// Credits = 5 ;
43571: LD_ADDR_VAR 0 5
43575: PUSH
43576: LD_INT 5
43578: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_gatling_gun ] ] ;
43579: LD_ADDR_EXP 121
43583: PUSH
43584: LD_EXP 121
43588: PUSH
43589: LD_INT 22
43591: PUSH
43592: LD_VAR 0 7
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 43
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: ADD
43612: ST_TO_ADDR
// end ; end ; 3 :
43613: GO 44210
43615: LD_INT 3
43617: DOUBLE
43618: EQUAL
43619: IFTRUE 43623
43621: GO 43716
43623: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 40 ) then
43624: LD_VAR 0 1
43628: PUSH
43629: LD_INT 1
43631: LESSEQUAL
43632: PUSH
43633: LD_VAR 0 6
43637: PUSH
43638: LD_INT 100
43640: LESS
43641: AND
43642: PUSH
43643: LD_VAR 0 1
43647: PUSH
43648: LD_INT 3
43650: LESSEQUAL
43651: PUSH
43652: LD_VAR 0 6
43656: PUSH
43657: LD_INT 40
43659: LESS
43660: AND
43661: OR
43662: IFFALSE 43714
// begin Selected = true ;
43664: LD_ADDR_VAR 0 4
43668: PUSH
43669: LD_INT 1
43671: ST_TO_ADDR
// Credits = 5 ;
43672: LD_ADDR_VAR 0 5
43676: PUSH
43677: LD_INT 5
43679: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_gun ] ] ;
43680: LD_ADDR_EXP 121
43684: PUSH
43685: LD_EXP 121
43689: PUSH
43690: LD_INT 22
43692: PUSH
43693: LD_VAR 0 7
43697: PUSH
43698: LD_INT 3
43700: PUSH
43701: LD_INT 44
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: ADD
43713: ST_TO_ADDR
// end ; end ; 5 :
43714: GO 44210
43716: LD_INT 5
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 43777
43724: POP
// begin Selected = true ;
43725: LD_ADDR_VAR 0 4
43729: PUSH
43730: LD_INT 1
43732: ST_TO_ADDR
// Credits = 7 ;
43733: LD_ADDR_VAR 0 5
43737: PUSH
43738: LD_INT 7
43740: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_gatling_gun ] ] ;
43741: LD_ADDR_EXP 121
43745: PUSH
43746: LD_EXP 121
43750: PUSH
43751: LD_INT 24
43753: PUSH
43754: LD_VAR 0 7
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 43
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: ADD
43774: ST_TO_ADDR
// end ; 6 :
43775: GO 44210
43777: LD_INT 6
43779: DOUBLE
43780: EQUAL
43781: IFTRUE 43785
43783: GO 43898
43785: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 60 ) or ( time > 3 and Probab < 20 ) then
43786: LD_VAR 0 1
43790: PUSH
43791: LD_INT 1
43793: LESSEQUAL
43794: PUSH
43795: LD_VAR 0 6
43799: PUSH
43800: LD_INT 100
43802: LESS
43803: AND
43804: PUSH
43805: LD_VAR 0 1
43809: PUSH
43810: LD_INT 3
43812: LESSEQUAL
43813: PUSH
43814: LD_VAR 0 6
43818: PUSH
43819: LD_INT 60
43821: LESS
43822: AND
43823: OR
43824: PUSH
43825: LD_VAR 0 1
43829: PUSH
43830: LD_INT 3
43832: GREATER
43833: PUSH
43834: LD_VAR 0 6
43838: PUSH
43839: LD_INT 20
43841: LESS
43842: AND
43843: OR
43844: IFFALSE 43896
// begin Selected = true ;
43846: LD_ADDR_VAR 0 4
43850: PUSH
43851: LD_INT 1
43853: ST_TO_ADDR
// Credits = 7 ;
43854: LD_ADDR_VAR 0 5
43858: PUSH
43859: LD_INT 7
43861: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_gun ] ] ;
43862: LD_ADDR_EXP 121
43866: PUSH
43867: LD_EXP 121
43871: PUSH
43872: LD_INT 24
43874: PUSH
43875: LD_VAR 0 7
43879: PUSH
43880: LD_INT 3
43882: PUSH
43883: LD_INT 44
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: PUSH
43892: EMPTY
43893: LIST
43894: ADD
43895: ST_TO_ADDR
// end ; end ; 7 :
43896: GO 44210
43898: LD_INT 7
43900: DOUBLE
43901: EQUAL
43902: IFTRUE 43906
43904: GO 43959
43906: POP
// begin Selected = true ;
43907: LD_ADDR_VAR 0 4
43911: PUSH
43912: LD_INT 1
43914: ST_TO_ADDR
// Credits = 9 ;
43915: LD_ADDR_VAR 0 5
43919: PUSH
43920: LD_INT 9
43922: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_rocket_launcher ] ] ;
43923: LD_ADDR_EXP 121
43927: PUSH
43928: LD_EXP 121
43932: PUSH
43933: LD_INT 22
43935: PUSH
43936: LD_VAR 0 7
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: LD_INT 45
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: ADD
43956: ST_TO_ADDR
// end ; 8 :
43957: GO 44210
43959: LD_INT 8
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43967
43965: GO 44020
43967: POP
// begin Selected = true ;
43968: LD_ADDR_VAR 0 4
43972: PUSH
43973: LD_INT 1
43975: ST_TO_ADDR
// Credits = 11 ;
43976: LD_ADDR_VAR 0 5
43980: PUSH
43981: LD_INT 11
43983: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_rocket_launcher ] ] ;
43984: LD_ADDR_EXP 121
43988: PUSH
43989: LD_EXP 121
43993: PUSH
43994: LD_INT 24
43996: PUSH
43997: LD_VAR 0 7
44001: PUSH
44002: LD_INT 3
44004: PUSH
44005: LD_INT 45
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: ADD
44017: ST_TO_ADDR
// end ; 9 :
44018: GO 44210
44020: LD_INT 9
44022: DOUBLE
44023: EQUAL
44024: IFTRUE 44028
44026: GO 44081
44028: POP
// begin Selected = true ;
44029: LD_ADDR_VAR 0 4
44033: PUSH
44034: LD_INT 1
44036: ST_TO_ADDR
// Credits = 11 ;
44037: LD_ADDR_VAR 0 5
44041: PUSH
44042: LD_INT 11
44044: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_heavy_gun ] ] ;
44045: LD_ADDR_EXP 121
44049: PUSH
44050: LD_EXP 121
44054: PUSH
44055: LD_INT 24
44057: PUSH
44058: LD_VAR 0 7
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: LD_INT 46
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: PUSH
44075: EMPTY
44076: LIST
44077: ADD
44078: ST_TO_ADDR
// end ; 10 , 11 :
44079: GO 44210
44081: LD_INT 10
44083: DOUBLE
44084: EQUAL
44085: IFTRUE 44095
44087: LD_INT 11
44089: DOUBLE
44090: EQUAL
44091: IFTRUE 44095
44093: GO 44148
44095: POP
// begin Selected = true ;
44096: LD_ADDR_VAR 0 4
44100: PUSH
44101: LD_INT 1
44103: ST_TO_ADDR
// Credits = 15 ;
44104: LD_ADDR_VAR 0 5
44108: PUSH
44109: LD_INT 15
44111: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_rocket ] ] ;
44112: LD_ADDR_EXP 121
44116: PUSH
44117: LD_EXP 121
44121: PUSH
44122: LD_INT 24
44124: PUSH
44125: LD_VAR 0 7
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 47
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: ADD
44145: ST_TO_ADDR
// end ; 12 :
44146: GO 44210
44148: LD_INT 12
44150: DOUBLE
44151: EQUAL
44152: IFTRUE 44156
44154: GO 44209
44156: POP
// begin Selected = true ;
44157: LD_ADDR_VAR 0 4
44161: PUSH
44162: LD_INT 1
44164: ST_TO_ADDR
// Credits = 4 ;
44165: LD_ADDR_VAR 0 5
44169: PUSH
44170: LD_INT 4
44172: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_time_lapser ] ] ;
44173: LD_ADDR_EXP 121
44177: PUSH
44178: LD_EXP 121
44182: PUSH
44183: LD_INT 24
44185: PUSH
44186: LD_VAR 0 7
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: LD_INT 49
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: PUSH
44203: EMPTY
44204: LIST
44205: ADD
44206: ST_TO_ADDR
// end ; end ;
44207: GO 44210
44209: POP
// until Selected ;
44210: LD_VAR 0 4
44214: IFFALSE 43095
// Result = Credits ;
44216: LD_ADDR_VAR 0 2
44220: PUSH
44221: LD_VAR 0 5
44225: ST_TO_ADDR
// end ;
44226: LD_VAR 0 2
44230: RET
// function GenerateGroup ( Credits , time ) ; var Used_Credits , i ; begin
44231: LD_INT 0
44233: PPUSH
44234: PPUSH
44235: PPUSH
// Used_Credits = 0 ;
44236: LD_ADDR_VAR 0 4
44240: PUSH
44241: LD_INT 0
44243: ST_TO_ADDR
// if Russian_Siberite_Attack then
44244: LD_EXP 215
44248: IFFALSE 44360
// begin if CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) or CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) then
44250: LD_INT 195
44252: PPUSH
44253: LD_INT 84
44255: PPUSH
44256: CALL_OW 438
44260: PPUSH
44261: LD_INT 24
44263: PPUSH
44264: LD_INT 3
44266: PPUSH
44267: LD_INT 3
44269: PPUSH
44270: LD_INT 48
44272: PPUSH
44273: CALL_OW 448
44277: PUSH
44278: LD_INT 170
44280: PPUSH
44281: LD_INT 35
44283: PPUSH
44284: CALL_OW 438
44288: PPUSH
44289: LD_INT 24
44291: PPUSH
44292: LD_INT 3
44294: PPUSH
44295: LD_INT 3
44297: PPUSH
44298: LD_INT 48
44300: PPUSH
44301: CALL_OW 448
44305: OR
44306: IFFALSE 44360
// begin for i = 1 to 2 do
44308: LD_ADDR_VAR 0 5
44312: PUSH
44313: DOUBLE
44314: LD_INT 1
44316: DEC
44317: ST_TO_ADDR
44318: LD_INT 2
44320: PUSH
44321: FOR_TO
44322: IFFALSE 44358
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ] ] ;
44324: LD_ADDR_EXP 121
44328: PUSH
44329: LD_EXP 121
44333: PUSH
44334: LD_INT 24
44336: PUSH
44337: LD_INT 3
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 48
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: ADD
44355: ST_TO_ADDR
44356: GO 44321
44358: POP
44359: POP
// end ; end ; repeat Used_Credits = Used_Credits + GetRandomVehicle ( time ) ;
44360: LD_ADDR_VAR 0 4
44364: PUSH
44365: LD_VAR 0 4
44369: PUSH
44370: LD_VAR 0 2
44374: PPUSH
44375: CALL 43071 0 1
44379: PLUS
44380: ST_TO_ADDR
// until Credits < Used_Credits ;
44381: LD_VAR 0 1
44385: PUSH
44386: LD_VAR 0 4
44390: LESS
44391: IFFALSE 44360
// result = Used_Credits ;
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_VAR 0 4
44402: ST_TO_ADDR
// end ;
44403: LD_VAR 0 3
44407: RET
// function GenerateAttackingGroup ; var Power , Next_time , Number_of_units , Person , veh , i , Used_Credits , Credits , Strength_of_attack ; begin
44408: LD_INT 0
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
44419: PPUSH
// Power = Rand ( 1 , 3 ) ;
44420: LD_ADDR_VAR 0 2
44424: PUSH
44425: LD_INT 1
44427: PPUSH
44428: LD_INT 3
44430: PPUSH
44431: CALL_OW 12
44435: ST_TO_ADDR
// Number_of_units = Rand ( 1 , 2 ) ;
44436: LD_ADDR_VAR 0 4
44440: PUSH
44441: LD_INT 1
44443: PPUSH
44444: LD_INT 2
44446: PPUSH
44447: CALL_OW 12
44451: ST_TO_ADDR
// R_Attack_Group = [ ] ;
44452: LD_ADDR_EXP 121
44456: PUSH
44457: EMPTY
44458: ST_TO_ADDR
// if tick < Rus_Attack_Time + 10 10$0 then
44459: LD_OWVAR 1
44463: PUSH
44464: LD_EXP 130
44468: PUSH
44469: LD_INT 21000
44471: PLUS
44472: LESS
44473: IFFALSE 44635
// begin case R_Attack_Counter of 1 :
44475: LD_EXP 117
44479: PUSH
44480: LD_INT 1
44482: DOUBLE
44483: EQUAL
44484: IFTRUE 44488
44486: GO 44553
44488: POP
// begin R_Attack_Group = R_Attack_Group ;
44489: LD_ADDR_EXP 121
44493: PUSH
44494: LD_EXP 121
44498: ST_TO_ADDR
// for i = 1 to 3 do
44499: LD_ADDR_VAR 0 7
44503: PUSH
44504: DOUBLE
44505: LD_INT 1
44507: DEC
44508: ST_TO_ADDR
44509: LD_INT 3
44511: PUSH
44512: FOR_TO
44513: IFFALSE 44549
// begin R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ;
44515: LD_ADDR_EXP 121
44519: PUSH
44520: LD_EXP 121
44524: PUSH
44525: LD_INT 22
44527: PUSH
44528: LD_INT 3
44530: PUSH
44531: LD_INT 3
44533: PUSH
44534: LD_INT 44
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: PUSH
44543: EMPTY
44544: LIST
44545: ADD
44546: ST_TO_ADDR
// end ;
44547: GO 44512
44549: POP
44550: POP
// end ; else
44551: GO 44633
44553: POP
// begin Credits = 20 ;
44554: LD_ADDR_VAR 0 9
44558: PUSH
44559: LD_INT 20
44561: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R_Attack_Overflow , 1 ) ;
44562: LD_ADDR_VAR 0 8
44566: PUSH
44567: LD_VAR 0 9
44571: PUSH
44572: LD_EXP 214
44576: PLUS
44577: PPUSH
44578: LD_INT 1
44580: PPUSH
44581: CALL 44231 0 2
44585: ST_TO_ADDR
// R_Attack_Overflow = ( Credits + R_Attack_Overflow ) - Used_Credits ;
44586: LD_ADDR_EXP 214
44590: PUSH
44591: LD_VAR 0 9
44595: PUSH
44596: LD_EXP 214
44600: PLUS
44601: PUSH
44602: LD_VAR 0 8
44606: MINUS
44607: ST_TO_ADDR
// R_attack_time = [ 5 5$0 , 4 4$30 , 4 4$0 ] [ Difficulty ] ;
44608: LD_ADDR_EXP 115
44612: PUSH
44613: LD_INT 10500
44615: PUSH
44616: LD_INT 9450
44618: PUSH
44619: LD_INT 8400
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: PUSH
44627: LD_OWVAR 67
44631: ARRAY
44632: ST_TO_ADDR
// end ; end ; end else
44633: GO 44856
// if tick < Rus_Attack_Time + 30 30$0 then
44635: LD_OWVAR 1
44639: PUSH
44640: LD_EXP 130
44644: PUSH
44645: LD_INT 63000
44647: PLUS
44648: LESS
44649: IFFALSE 44732
// begin Credits = 20 ;
44651: LD_ADDR_VAR 0 9
44655: PUSH
44656: LD_INT 20
44658: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R_Attack_Overflow , 2 ) ;
44659: LD_ADDR_VAR 0 8
44663: PUSH
44664: LD_VAR 0 9
44668: PUSH
44669: LD_EXP 214
44673: PLUS
44674: PPUSH
44675: LD_INT 2
44677: PPUSH
44678: CALL 44231 0 2
44682: ST_TO_ADDR
// R_Attack_Overflow = ( Credits + R_Attack_Overflow ) - Used_Credits ;
44683: LD_ADDR_EXP 214
44687: PUSH
44688: LD_VAR 0 9
44692: PUSH
44693: LD_EXP 214
44697: PLUS
44698: PUSH
44699: LD_VAR 0 8
44703: MINUS
44704: ST_TO_ADDR
// R_attack_time = [ 7 7$0 , 6 6$30 , 6 6$0 ] [ Difficulty ] ;
44705: LD_ADDR_EXP 115
44709: PUSH
44710: LD_INT 14700
44712: PUSH
44713: LD_INT 13650
44715: PUSH
44716: LD_INT 12600
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: PUSH
44724: LD_OWVAR 67
44728: ARRAY
44729: ST_TO_ADDR
// end else
44730: GO 44856
// begin Strength_of_attack = Rand ( 1 , 7 ) ;
44732: LD_ADDR_VAR 0 10
44736: PUSH
44737: LD_INT 1
44739: PPUSH
44740: LD_INT 7
44742: PPUSH
44743: CALL_OW 12
44747: ST_TO_ADDR
// Credits = [ 6 , 8 , 10 ] [ Difficulty ] * Strength_of_attack ;
44748: LD_ADDR_VAR 0 9
44752: PUSH
44753: LD_INT 6
44755: PUSH
44756: LD_INT 8
44758: PUSH
44759: LD_INT 10
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: PUSH
44767: LD_OWVAR 67
44771: ARRAY
44772: PUSH
44773: LD_VAR 0 10
44777: MUL
44778: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 3 ) ;
44779: LD_ADDR_VAR 0 8
44783: PUSH
44784: LD_VAR 0 9
44788: PUSH
44789: LD_EXP 191
44793: PLUS
44794: PPUSH
44795: LD_INT 3
44797: PPUSH
44798: CALL 44231 0 2
44802: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
44803: LD_ADDR_EXP 191
44807: PUSH
44808: LD_VAR 0 9
44812: PUSH
44813: LD_EXP 191
44817: PLUS
44818: PUSH
44819: LD_VAR 0 8
44823: MINUS
44824: ST_TO_ADDR
// R1_attack_time = [ 0 0$30 , 0 0$25 , 0 0$20 ] [ Difficulty ] * Strength_of_attack ;
44825: LD_ADDR_EXP 114
44829: PUSH
44830: LD_INT 1050
44832: PUSH
44833: LD_INT 875
44835: PUSH
44836: LD_INT 700
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: PUSH
44844: LD_OWVAR 67
44848: ARRAY
44849: PUSH
44850: LD_VAR 0 10
44854: MUL
44855: ST_TO_ADDR
// end ; end ;
44856: LD_VAR 0 1
44860: RET
// function GeneratePatrolingGroup ; var i ; begin
44861: LD_INT 0
44863: PPUSH
44864: PPUSH
// R_Patrol_group = [ ] ;
44865: LD_ADDR_EXP 124
44869: PUSH
44870: EMPTY
44871: ST_TO_ADDR
// for i = 1 to 1 - ( R_Patrol_Group ^ [ ] ) do
44872: LD_ADDR_VAR 0 2
44876: PUSH
44877: DOUBLE
44878: LD_INT 1
44880: DEC
44881: ST_TO_ADDR
44882: LD_INT 1
44884: PUSH
44885: LD_EXP 124
44889: PUSH
44890: EMPTY
44891: ADD
44892: MINUS
44893: PUSH
44894: FOR_TO
44895: IFFALSE 44931
// R_Patrol_Group = R_Patrol_Group ^ [ [ ru_medium_tracked , engine_siberite , control_computer , ru_heavy_machine_gun ] ] ;
44897: LD_ADDR_EXP 124
44901: PUSH
44902: LD_EXP 124
44906: PUSH
44907: LD_INT 22
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: LD_INT 42
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: PUSH
44925: EMPTY
44926: LIST
44927: ADD
44928: ST_TO_ADDR
44929: GO 44894
44931: POP
44932: POP
// end ;
44933: LD_VAR 0 1
44937: RET
// export function BuildGroups ( Constructed_vehicle ) ; var Un , i ; begin
44938: LD_INT 0
44940: PPUSH
44941: PPUSH
44942: PPUSH
// if Constructed_vehicle <> 0 then
44943: LD_VAR 0 1
44947: PUSH
44948: LD_INT 0
44950: NONEQUAL
44951: IFFALSE 45063
// begin if ( GetWeapon ( Constructed_vehicle ) = ru_heavy_machine_gun ) then
44953: LD_VAR 0 1
44957: PPUSH
44958: CALL_OW 264
44962: PUSH
44963: LD_INT 42
44965: EQUAL
44966: IFFALSE 45000
// begin R_Constructed_Patrol = R_Constructed_Patrol ^ Constructed_vehicle ;
44968: LD_ADDR_EXP 126
44972: PUSH
44973: LD_EXP 126
44977: PUSH
44978: LD_VAR 0 1
44982: ADD
44983: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Constructed_vehicle ) end else
44984: LD_EXP 245
44988: PPUSH
44989: LD_VAR 0 1
44993: PPUSH
44994: CALL_OW 390
44998: GO 45063
// if ( GetWeapon ( Constructed_vehicle ) = ru_siberium_rocket ) then
45000: LD_VAR 0 1
45004: PPUSH
45005: CALL_OW 264
45009: PUSH
45010: LD_INT 48
45012: EQUAL
45013: IFFALSE 45033
// begin Russian_Siberite_rockets = Russian_Siberite_rockets ^ Constructed_vehicle ;
45015: LD_ADDR_EXP 216
45019: PUSH
45020: LD_EXP 216
45024: PUSH
45025: LD_VAR 0 1
45029: ADD
45030: ST_TO_ADDR
// end else
45031: GO 45063
// begin R_Constructed_Attack = R_Constructed_Attack ^ Constructed_vehicle ;
45033: LD_ADDR_EXP 125
45037: PUSH
45038: LD_EXP 125
45042: PUSH
45043: LD_VAR 0 1
45047: ADD
45048: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Constructed_vehicle ) ;
45049: LD_EXP 245
45053: PPUSH
45054: LD_VAR 0 1
45058: PPUSH
45059: CALL_OW 390
// end end ; i = 1 ;
45063: LD_ADDR_VAR 0 4
45067: PUSH
45068: LD_INT 1
45070: ST_TO_ADDR
// while i <= R_Attack_Group do
45071: LD_VAR 0 4
45075: PUSH
45076: LD_EXP 121
45080: LESSEQUAL
45081: IFFALSE 45277
// begin if not ( CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ i ] [ 1 ] , R_Attack_Group [ i ] [ 2 ] , R_Attack_Group [ i ] [ 3 ] , R_Attack_Group [ i ] [ 4 ] ) ) and not ( CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ i ] [ 1 ] , R_Attack_Group [ i ] [ 2 ] , R_Attack_Group [ i ] [ 3 ] , R_Attack_Group [ i ] [ 4 ] ) ) then
45083: LD_INT 195
45085: PPUSH
45086: LD_INT 84
45088: PPUSH
45089: CALL_OW 438
45093: PPUSH
45094: LD_EXP 121
45098: PUSH
45099: LD_VAR 0 4
45103: ARRAY
45104: PUSH
45105: LD_INT 1
45107: ARRAY
45108: PPUSH
45109: LD_EXP 121
45113: PUSH
45114: LD_VAR 0 4
45118: ARRAY
45119: PUSH
45120: LD_INT 2
45122: ARRAY
45123: PPUSH
45124: LD_EXP 121
45128: PUSH
45129: LD_VAR 0 4
45133: ARRAY
45134: PUSH
45135: LD_INT 3
45137: ARRAY
45138: PPUSH
45139: LD_EXP 121
45143: PUSH
45144: LD_VAR 0 4
45148: ARRAY
45149: PUSH
45150: LD_INT 4
45152: ARRAY
45153: PPUSH
45154: CALL_OW 448
45158: NOT
45159: PUSH
45160: LD_INT 170
45162: PPUSH
45163: LD_INT 35
45165: PPUSH
45166: CALL_OW 438
45170: PPUSH
45171: LD_EXP 121
45175: PUSH
45176: LD_VAR 0 4
45180: ARRAY
45181: PUSH
45182: LD_INT 1
45184: ARRAY
45185: PPUSH
45186: LD_EXP 121
45190: PUSH
45191: LD_VAR 0 4
45195: ARRAY
45196: PUSH
45197: LD_INT 2
45199: ARRAY
45200: PPUSH
45201: LD_EXP 121
45205: PUSH
45206: LD_VAR 0 4
45210: ARRAY
45211: PUSH
45212: LD_INT 3
45214: ARRAY
45215: PPUSH
45216: LD_EXP 121
45220: PUSH
45221: LD_VAR 0 4
45225: ARRAY
45226: PUSH
45227: LD_INT 4
45229: ARRAY
45230: PPUSH
45231: CALL_OW 448
45235: NOT
45236: AND
45237: IFFALSE 45261
// R_Attack_Group = Delete ( R_Attack_Group , i ) else
45239: LD_ADDR_EXP 121
45243: PUSH
45244: LD_EXP 121
45248: PPUSH
45249: LD_VAR 0 4
45253: PPUSH
45254: CALL_OW 3
45258: ST_TO_ADDR
45259: GO 45275
// i = i + 1 ;
45261: LD_ADDR_VAR 0 4
45265: PUSH
45266: LD_VAR 0 4
45270: PUSH
45271: LD_INT 1
45273: PLUS
45274: ST_TO_ADDR
// end ;
45275: GO 45071
// i = 1 ;
45277: LD_ADDR_VAR 0 4
45281: PUSH
45282: LD_INT 1
45284: ST_TO_ADDR
// while i <= R_Patrol_Group do
45285: LD_VAR 0 4
45289: PUSH
45290: LD_EXP 124
45294: LESSEQUAL
45295: IFFALSE 45491
// begin if not ( CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ i ] [ 1 ] , R_Patrol_Group [ i ] [ 2 ] , R_Patrol_Group [ i ] [ 3 ] , R_Patrol_Group [ i ] [ 4 ] ) ) and not ( CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ i ] [ 1 ] , R_Patrol_Group [ i ] [ 2 ] , R_Patrol_Group [ i ] [ 3 ] , R_Patrol_Group [ i ] [ 4 ] ) ) then
45297: LD_INT 195
45299: PPUSH
45300: LD_INT 84
45302: PPUSH
45303: CALL_OW 438
45307: PPUSH
45308: LD_EXP 124
45312: PUSH
45313: LD_VAR 0 4
45317: ARRAY
45318: PUSH
45319: LD_INT 1
45321: ARRAY
45322: PPUSH
45323: LD_EXP 124
45327: PUSH
45328: LD_VAR 0 4
45332: ARRAY
45333: PUSH
45334: LD_INT 2
45336: ARRAY
45337: PPUSH
45338: LD_EXP 124
45342: PUSH
45343: LD_VAR 0 4
45347: ARRAY
45348: PUSH
45349: LD_INT 3
45351: ARRAY
45352: PPUSH
45353: LD_EXP 124
45357: PUSH
45358: LD_VAR 0 4
45362: ARRAY
45363: PUSH
45364: LD_INT 4
45366: ARRAY
45367: PPUSH
45368: CALL_OW 448
45372: NOT
45373: PUSH
45374: LD_INT 170
45376: PPUSH
45377: LD_INT 35
45379: PPUSH
45380: CALL_OW 438
45384: PPUSH
45385: LD_EXP 124
45389: PUSH
45390: LD_VAR 0 4
45394: ARRAY
45395: PUSH
45396: LD_INT 1
45398: ARRAY
45399: PPUSH
45400: LD_EXP 124
45404: PUSH
45405: LD_VAR 0 4
45409: ARRAY
45410: PUSH
45411: LD_INT 2
45413: ARRAY
45414: PPUSH
45415: LD_EXP 124
45419: PUSH
45420: LD_VAR 0 4
45424: ARRAY
45425: PUSH
45426: LD_INT 3
45428: ARRAY
45429: PPUSH
45430: LD_EXP 124
45434: PUSH
45435: LD_VAR 0 4
45439: ARRAY
45440: PUSH
45441: LD_INT 4
45443: ARRAY
45444: PPUSH
45445: CALL_OW 448
45449: NOT
45450: AND
45451: IFFALSE 45475
// R_Patrol_Group = Delete ( R_Patrol_Group , i ) else
45453: LD_ADDR_EXP 124
45457: PUSH
45458: LD_EXP 124
45462: PPUSH
45463: LD_VAR 0 4
45467: PPUSH
45468: CALL_OW 3
45472: ST_TO_ADDR
45473: GO 45489
// i = i + 1 ;
45475: LD_ADDR_VAR 0 4
45479: PUSH
45480: LD_VAR 0 4
45484: PUSH
45485: LD_INT 1
45487: PLUS
45488: ST_TO_ADDR
// end ;
45489: GO 45285
// if ( R_Attack_Group > 0 ) then
45491: LD_EXP 121
45495: PUSH
45496: LD_INT 0
45498: GREATER
45499: IFFALSE 45684
// if not ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) then
45501: LD_INT 195
45503: PPUSH
45504: LD_INT 84
45506: PPUSH
45507: CALL_OW 438
45511: PPUSH
45512: CALL_OW 461
45516: PUSH
45517: LD_INT 3
45519: EQUAL
45520: NOT
45521: PUSH
45522: LD_INT 195
45524: PPUSH
45525: LD_INT 84
45527: PPUSH
45528: CALL_OW 438
45532: PPUSH
45533: LD_EXP 121
45537: PUSH
45538: LD_INT 1
45540: ARRAY
45541: PUSH
45542: LD_INT 1
45544: ARRAY
45545: PPUSH
45546: LD_EXP 121
45550: PUSH
45551: LD_INT 1
45553: ARRAY
45554: PUSH
45555: LD_INT 2
45557: ARRAY
45558: PPUSH
45559: LD_EXP 121
45563: PUSH
45564: LD_INT 1
45566: ARRAY
45567: PUSH
45568: LD_INT 3
45570: ARRAY
45571: PPUSH
45572: LD_EXP 121
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: PUSH
45581: LD_INT 4
45583: ARRAY
45584: PPUSH
45585: CALL_OW 448
45589: AND
45590: IFFALSE 45684
// begin ComConstruct ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) ;
45592: LD_INT 195
45594: PPUSH
45595: LD_INT 84
45597: PPUSH
45598: CALL_OW 438
45602: PPUSH
45603: LD_EXP 121
45607: PUSH
45608: LD_INT 1
45610: ARRAY
45611: PUSH
45612: LD_INT 1
45614: ARRAY
45615: PPUSH
45616: LD_EXP 121
45620: PUSH
45621: LD_INT 1
45623: ARRAY
45624: PUSH
45625: LD_INT 2
45627: ARRAY
45628: PPUSH
45629: LD_EXP 121
45633: PUSH
45634: LD_INT 1
45636: ARRAY
45637: PUSH
45638: LD_INT 3
45640: ARRAY
45641: PPUSH
45642: LD_EXP 121
45646: PUSH
45647: LD_INT 1
45649: ARRAY
45650: PUSH
45651: LD_INT 4
45653: ARRAY
45654: PPUSH
45655: CALL_OW 125
// R_Attack_Group = Delete ( R_Attack_Group , 1 ) ;
45659: LD_ADDR_EXP 121
45663: PUSH
45664: LD_EXP 121
45668: PPUSH
45669: LD_INT 1
45671: PPUSH
45672: CALL_OW 3
45676: ST_TO_ADDR
// Wait ( 1 ) ;
45677: LD_INT 1
45679: PPUSH
45680: CALL_OW 67
// end ; if ( R_Attack_Group > 0 ) then
45684: LD_EXP 121
45688: PUSH
45689: LD_INT 0
45691: GREATER
45692: IFFALSE 45877
// if not ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) then
45694: LD_INT 170
45696: PPUSH
45697: LD_INT 35
45699: PPUSH
45700: CALL_OW 438
45704: PPUSH
45705: CALL_OW 461
45709: PUSH
45710: LD_INT 3
45712: EQUAL
45713: NOT
45714: PUSH
45715: LD_INT 170
45717: PPUSH
45718: LD_INT 35
45720: PPUSH
45721: CALL_OW 438
45725: PPUSH
45726: LD_EXP 121
45730: PUSH
45731: LD_INT 1
45733: ARRAY
45734: PUSH
45735: LD_INT 1
45737: ARRAY
45738: PPUSH
45739: LD_EXP 121
45743: PUSH
45744: LD_INT 1
45746: ARRAY
45747: PUSH
45748: LD_INT 2
45750: ARRAY
45751: PPUSH
45752: LD_EXP 121
45756: PUSH
45757: LD_INT 1
45759: ARRAY
45760: PUSH
45761: LD_INT 3
45763: ARRAY
45764: PPUSH
45765: LD_EXP 121
45769: PUSH
45770: LD_INT 1
45772: ARRAY
45773: PUSH
45774: LD_INT 4
45776: ARRAY
45777: PPUSH
45778: CALL_OW 448
45782: AND
45783: IFFALSE 45877
// begin ComConstruct ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) ;
45785: LD_INT 170
45787: PPUSH
45788: LD_INT 35
45790: PPUSH
45791: CALL_OW 438
45795: PPUSH
45796: LD_EXP 121
45800: PUSH
45801: LD_INT 1
45803: ARRAY
45804: PUSH
45805: LD_INT 1
45807: ARRAY
45808: PPUSH
45809: LD_EXP 121
45813: PUSH
45814: LD_INT 1
45816: ARRAY
45817: PUSH
45818: LD_INT 2
45820: ARRAY
45821: PPUSH
45822: LD_EXP 121
45826: PUSH
45827: LD_INT 1
45829: ARRAY
45830: PUSH
45831: LD_INT 3
45833: ARRAY
45834: PPUSH
45835: LD_EXP 121
45839: PUSH
45840: LD_INT 1
45842: ARRAY
45843: PUSH
45844: LD_INT 4
45846: ARRAY
45847: PPUSH
45848: CALL_OW 125
// R_Attack_Group = Delete ( R_Attack_Group , 1 ) ;
45852: LD_ADDR_EXP 121
45856: PUSH
45857: LD_EXP 121
45861: PPUSH
45862: LD_INT 1
45864: PPUSH
45865: CALL_OW 3
45869: ST_TO_ADDR
// Wait ( 1 ) ;
45870: LD_INT 1
45872: PPUSH
45873: CALL_OW 67
// end ; if ( R_Patrol_Group > 0 ) then
45877: LD_EXP 124
45881: PUSH
45882: LD_INT 0
45884: GREATER
45885: IFFALSE 46070
// if not ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) then
45887: LD_INT 195
45889: PPUSH
45890: LD_INT 84
45892: PPUSH
45893: CALL_OW 438
45897: PPUSH
45898: CALL_OW 461
45902: PUSH
45903: LD_INT 3
45905: EQUAL
45906: NOT
45907: PUSH
45908: LD_INT 195
45910: PPUSH
45911: LD_INT 84
45913: PPUSH
45914: CALL_OW 438
45918: PPUSH
45919: LD_EXP 124
45923: PUSH
45924: LD_INT 1
45926: ARRAY
45927: PUSH
45928: LD_INT 1
45930: ARRAY
45931: PPUSH
45932: LD_EXP 124
45936: PUSH
45937: LD_INT 1
45939: ARRAY
45940: PUSH
45941: LD_INT 2
45943: ARRAY
45944: PPUSH
45945: LD_EXP 124
45949: PUSH
45950: LD_INT 1
45952: ARRAY
45953: PUSH
45954: LD_INT 3
45956: ARRAY
45957: PPUSH
45958: LD_EXP 124
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: PUSH
45967: LD_INT 4
45969: ARRAY
45970: PPUSH
45971: CALL_OW 448
45975: AND
45976: IFFALSE 46070
// begin ComConstruct ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) ;
45978: LD_INT 195
45980: PPUSH
45981: LD_INT 84
45983: PPUSH
45984: CALL_OW 438
45988: PPUSH
45989: LD_EXP 124
45993: PUSH
45994: LD_INT 1
45996: ARRAY
45997: PUSH
45998: LD_INT 1
46000: ARRAY
46001: PPUSH
46002: LD_EXP 124
46006: PUSH
46007: LD_INT 1
46009: ARRAY
46010: PUSH
46011: LD_INT 2
46013: ARRAY
46014: PPUSH
46015: LD_EXP 124
46019: PUSH
46020: LD_INT 1
46022: ARRAY
46023: PUSH
46024: LD_INT 3
46026: ARRAY
46027: PPUSH
46028: LD_EXP 124
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PUSH
46037: LD_INT 4
46039: ARRAY
46040: PPUSH
46041: CALL_OW 125
// R_Patrol_Group = Delete ( R_Patrol_Group , 1 ) ;
46045: LD_ADDR_EXP 124
46049: PUSH
46050: LD_EXP 124
46054: PPUSH
46055: LD_INT 1
46057: PPUSH
46058: CALL_OW 3
46062: ST_TO_ADDR
// Wait ( 1 ) ;
46063: LD_INT 1
46065: PPUSH
46066: CALL_OW 67
// end ; if ( R_Patrol_Group > 0 ) then
46070: LD_EXP 124
46074: PUSH
46075: LD_INT 0
46077: GREATER
46078: IFFALSE 46263
// if not ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) then
46080: LD_INT 170
46082: PPUSH
46083: LD_INT 35
46085: PPUSH
46086: CALL_OW 438
46090: PPUSH
46091: CALL_OW 461
46095: PUSH
46096: LD_INT 3
46098: EQUAL
46099: NOT
46100: PUSH
46101: LD_INT 170
46103: PPUSH
46104: LD_INT 35
46106: PPUSH
46107: CALL_OW 438
46111: PPUSH
46112: LD_EXP 124
46116: PUSH
46117: LD_INT 1
46119: ARRAY
46120: PUSH
46121: LD_INT 1
46123: ARRAY
46124: PPUSH
46125: LD_EXP 124
46129: PUSH
46130: LD_INT 1
46132: ARRAY
46133: PUSH
46134: LD_INT 2
46136: ARRAY
46137: PPUSH
46138: LD_EXP 124
46142: PUSH
46143: LD_INT 1
46145: ARRAY
46146: PUSH
46147: LD_INT 3
46149: ARRAY
46150: PPUSH
46151: LD_EXP 124
46155: PUSH
46156: LD_INT 1
46158: ARRAY
46159: PUSH
46160: LD_INT 4
46162: ARRAY
46163: PPUSH
46164: CALL_OW 448
46168: AND
46169: IFFALSE 46263
// begin ComConstruct ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) ;
46171: LD_INT 170
46173: PPUSH
46174: LD_INT 35
46176: PPUSH
46177: CALL_OW 438
46181: PPUSH
46182: LD_EXP 124
46186: PUSH
46187: LD_INT 1
46189: ARRAY
46190: PUSH
46191: LD_INT 1
46193: ARRAY
46194: PPUSH
46195: LD_EXP 124
46199: PUSH
46200: LD_INT 1
46202: ARRAY
46203: PUSH
46204: LD_INT 2
46206: ARRAY
46207: PPUSH
46208: LD_EXP 124
46212: PUSH
46213: LD_INT 1
46215: ARRAY
46216: PUSH
46217: LD_INT 3
46219: ARRAY
46220: PPUSH
46221: LD_EXP 124
46225: PUSH
46226: LD_INT 1
46228: ARRAY
46229: PUSH
46230: LD_INT 4
46232: ARRAY
46233: PPUSH
46234: CALL_OW 125
// R_Patrol_Group = Delete ( R_Patrol_Group , 1 ) ;
46238: LD_ADDR_EXP 124
46242: PUSH
46243: LD_EXP 124
46247: PPUSH
46248: LD_INT 1
46250: PPUSH
46251: CALL_OW 3
46255: ST_TO_ADDR
// Wait ( 1 ) ;
46256: LD_INT 1
46258: PPUSH
46259: CALL_OW 67
// end ; end ;
46263: LD_VAR 0 2
46267: RET
// function SetAttackArea ; var Attack_Area ; begin
46268: LD_INT 0
46270: PPUSH
46271: PPUSH
// if FilterUnitsInArea ( Plan4 , [ f_side , americans ] ) > 0 then
46272: LD_INT 32
46274: PPUSH
46275: LD_INT 22
46277: PUSH
46278: LD_EXP 176
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PPUSH
46287: CALL_OW 70
46291: PUSH
46292: LD_INT 0
46294: GREATER
46295: IFFALSE 46307
// attack_area = Plan4 else
46297: LD_ADDR_VAR 0 2
46301: PUSH
46302: LD_INT 32
46304: ST_TO_ADDR
46305: GO 46638
// if FilterUnitsInArea ( Plan6 , [ [ f_side , americans ] , f_not , [ f_type , unit_human ] ] ) > 0 then
46307: LD_INT 34
46309: PPUSH
46310: LD_INT 22
46312: PUSH
46313: LD_EXP 176
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 3
46324: PUSH
46325: LD_INT 21
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: PPUSH
46340: CALL_OW 70
46344: PUSH
46345: LD_INT 0
46347: GREATER
46348: IFFALSE 46360
// attack_area = Plan6 else
46350: LD_ADDR_VAR 0 2
46354: PUSH
46355: LD_INT 34
46357: ST_TO_ADDR
46358: GO 46638
// if FilterUnitsInArea ( Am_Base , [ f_side , americans ] ) > 0 then
46360: LD_INT 1
46362: PPUSH
46363: LD_INT 22
46365: PUSH
46366: LD_EXP 176
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PPUSH
46375: CALL_OW 70
46379: PUSH
46380: LD_INT 0
46382: GREATER
46383: IFFALSE 46395
// attack_area = Am_Base else
46385: LD_ADDR_VAR 0 2
46389: PUSH
46390: LD_INT 1
46392: ST_TO_ADDR
46393: GO 46638
// if FilterUnitsInArea ( JMM_Hill , [ f_side , americans ] ) > 0 then
46395: LD_INT 2
46397: PPUSH
46398: LD_INT 22
46400: PUSH
46401: LD_EXP 176
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PPUSH
46410: CALL_OW 70
46414: PUSH
46415: LD_INT 0
46417: GREATER
46418: IFFALSE 46430
// attack_area = JMM_Hill else
46420: LD_ADDR_VAR 0 2
46424: PUSH
46425: LD_INT 2
46427: ST_TO_ADDR
46428: GO 46638
// if FilterUnitsInArea ( Plan3 , [ f_side , americans ] ) > 0 then
46430: LD_INT 31
46432: PPUSH
46433: LD_INT 22
46435: PUSH
46436: LD_EXP 176
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PPUSH
46445: CALL_OW 70
46449: PUSH
46450: LD_INT 0
46452: GREATER
46453: IFFALSE 46465
// attack_area = Plan3 else
46455: LD_ADDR_VAR 0 2
46459: PUSH
46460: LD_INT 31
46462: ST_TO_ADDR
46463: GO 46638
// if FilterUnitsInArea ( Ar_Base , [ f_side , americans ] ) > 0 then
46465: LD_INT 17
46467: PPUSH
46468: LD_INT 22
46470: PUSH
46471: LD_EXP 176
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PPUSH
46480: CALL_OW 70
46484: PUSH
46485: LD_INT 0
46487: GREATER
46488: IFFALSE 46500
// attack_area = Ar_Base else
46490: LD_ADDR_VAR 0 2
46494: PUSH
46495: LD_INT 17
46497: ST_TO_ADDR
46498: GO 46638
// if FilterUnitsInArea ( Plan5 , [ f_side , americans ] ) > 0 then
46500: LD_INT 33
46502: PPUSH
46503: LD_INT 22
46505: PUSH
46506: LD_EXP 176
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PPUSH
46515: CALL_OW 70
46519: PUSH
46520: LD_INT 0
46522: GREATER
46523: IFFALSE 46535
// attack_area = Plan5 else
46525: LD_ADDR_VAR 0 2
46529: PUSH
46530: LD_INT 33
46532: ST_TO_ADDR
46533: GO 46638
// if FilterUnitsInArea ( Aliance_Base , [ f_side , americans ] ) > 0 then
46535: LD_INT 7
46537: PPUSH
46538: LD_INT 22
46540: PUSH
46541: LD_EXP 176
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PPUSH
46550: CALL_OW 70
46554: PUSH
46555: LD_INT 0
46557: GREATER
46558: IFFALSE 46570
// attack_area = Aliance_Base else
46560: LD_ADDR_VAR 0 2
46564: PUSH
46565: LD_INT 7
46567: ST_TO_ADDR
46568: GO 46638
// if FilterUnitsInArea ( Plan1 , [ f_side , americans ] ) > 0 then
46570: LD_INT 29
46572: PPUSH
46573: LD_INT 22
46575: PUSH
46576: LD_EXP 176
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PPUSH
46585: CALL_OW 70
46589: PUSH
46590: LD_INT 0
46592: GREATER
46593: IFFALSE 46605
// attack_area = Plan1 else
46595: LD_ADDR_VAR 0 2
46599: PUSH
46600: LD_INT 29
46602: ST_TO_ADDR
46603: GO 46638
// if FilterUnitsInArea ( Plan2 , [ f_side , americans ] ) > 0 then
46605: LD_INT 30
46607: PPUSH
46608: LD_INT 22
46610: PUSH
46611: LD_EXP 176
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PPUSH
46620: CALL_OW 70
46624: PUSH
46625: LD_INT 0
46627: GREATER
46628: IFFALSE 46638
// attack_area = Plan2 ;
46630: LD_ADDR_VAR 0 2
46634: PUSH
46635: LD_INT 30
46637: ST_TO_ADDR
// result = Attack_Area ;
46638: LD_ADDR_VAR 0 1
46642: PUSH
46643: LD_VAR 0 2
46647: ST_TO_ADDR
// end ;
46648: LD_VAR 0 1
46652: RET
// function GoThroughTeleport ( Attack_Area ) ; var Teleport1 , Teleport2 ; begin
46653: LD_INT 0
46655: PPUSH
46656: PPUSH
46657: PPUSH
// Teleport1 = GetUnitNumber ( 165 , 60 ) ;
46658: LD_ADDR_VAR 0 3
46662: PUSH
46663: LD_INT 165
46665: PPUSH
46666: LD_INT 60
46668: PPUSH
46669: CALL_OW 438
46673: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
46674: LD_ADDR_VAR 0 4
46678: PUSH
46679: LD_INT 182
46681: PPUSH
46682: LD_INT 87
46684: PPUSH
46685: CALL_OW 438
46689: ST_TO_ADDR
// if Attack_Area in [ Am_Base , JMM_Hill , Plan3 , Ar_Base , Plan1 ] then
46690: LD_VAR 0 1
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 31
46703: PUSH
46704: LD_INT 17
46706: PUSH
46707: LD_INT 29
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: IN
46717: IFFALSE 46785
// begin if IsOk ( Teleport1 ) then
46719: LD_VAR 0 3
46723: PPUSH
46724: CALL_OW 302
46728: IFFALSE 46752
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport1 ) else
46730: LD_EXP 131
46734: PUSH
46735: LD_EXP 132
46739: ADD
46740: PPUSH
46741: LD_VAR 0 3
46745: PPUSH
46746: CALL_OW 120
46750: GO 46783
// if IsOk ( Teleport2 ) then
46752: LD_VAR 0 4
46756: PPUSH
46757: CALL_OW 302
46761: IFFALSE 46783
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport2 ) end else
46763: LD_EXP 131
46767: PUSH
46768: LD_EXP 132
46772: ADD
46773: PPUSH
46774: LD_VAR 0 4
46778: PPUSH
46779: CALL_OW 120
46783: GO 46849
// begin if IsOk ( Teleport2 ) then
46785: LD_VAR 0 4
46789: PPUSH
46790: CALL_OW 302
46794: IFFALSE 46818
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport2 ) else
46796: LD_EXP 131
46800: PUSH
46801: LD_EXP 132
46805: ADD
46806: PPUSH
46807: LD_VAR 0 4
46811: PPUSH
46812: CALL_OW 120
46816: GO 46849
// if IsOk ( Teleport1 ) then
46818: LD_VAR 0 3
46822: PPUSH
46823: CALL_OW 302
46827: IFFALSE 46849
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport1 ) end ;
46829: LD_EXP 131
46833: PUSH
46834: LD_EXP 132
46838: ADD
46839: PPUSH
46840: LD_VAR 0 3
46844: PPUSH
46845: CALL_OW 120
// WaitTask ( R_New_Attack ^ R_New_Patrol , 1 ) ;
46849: LD_EXP 131
46853: PUSH
46854: LD_EXP 132
46858: ADD
46859: PPUSH
46860: LD_INT 1
46862: PPUSH
46863: CALL 17888 0 2
// end ;
46867: LD_VAR 0 2
46871: RET
// function StartOfRusAttack ( Attack_Area ) ; var Un ; begin
46872: LD_INT 0
46874: PPUSH
46875: PPUSH
// if Russian_Siberite_Attack then
46876: LD_EXP 215
46880: IFFALSE 46908
// for Un in Russian_Siberite_rockets do
46882: LD_ADDR_VAR 0 3
46886: PUSH
46887: LD_EXP 216
46891: PUSH
46892: FOR_IN
46893: IFFALSE 46906
// RSiberiteAttack ( Un ) ;
46895: LD_VAR 0 3
46899: PPUSH
46900: CALL 18531 0 1
46904: GO 46892
46906: POP
46907: POP
// if not ( ExistMc ( Russian_reg_id ) ) then
46908: LD_EXP 241
46912: PPUSH
46913: CALL_OW 386
46917: NOT
46918: IFFALSE 46976
// begin Russian_reg_id = McRegistry ( russians , [ [ mc_reg_refresh_time , 0 0$5 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important , mc_reg_ignore_fog , mc_reg_buildings ] ) ;
46920: LD_ADDR_EXP 241
46924: PUSH
46925: LD_EXP 178
46929: PPUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 175
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_VAR 0 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 8
46954: NEG
46955: PUSH
46956: LD_INT 7
46958: PUSH
46959: LD_INT 9
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: PPUSH
46969: CALL_OW 399
46973: ST_TO_ADDR
// end else
46974: GO 47000
// begin McRegistryChangeOptions ( Russian_reg_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
46976: LD_EXP 241
46980: PPUSH
46981: LD_INT 2
46983: PUSH
46984: LD_VAR 0 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: PPUSH
46996: CALL_OW 400
// end ; if not ( ExistMc ( Russian_att_id ) ) then
47000: LD_EXP 242
47004: PPUSH
47005: CALL_OW 386
47009: NOT
47010: IFFALSE 47087
// begin Russian_att_id = McAttack ( 100 , Russian_reg_id , Main_R_Attack_Group , [ [ mc_retreat_area_vehicles , retreat1 ] , [ mc_retreat_area_people , retreat1 ] , [ mc_retreat_lives_vehicles , 600 ] , [ mc_retreat_lives_people , 600 ] , mc_no_stop ] ) ;
47012: LD_ADDR_EXP 242
47016: PUSH
47017: LD_INT 100
47019: PPUSH
47020: LD_EXP 241
47024: PPUSH
47025: LD_EXP 120
47029: PPUSH
47030: LD_INT 8
47032: PUSH
47033: LD_INT 40
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 7
47042: PUSH
47043: LD_INT 40
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 6
47052: PUSH
47053: LD_INT 600
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 5
47062: PUSH
47063: LD_INT 600
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 10
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: PPUSH
47080: CALL_OW 402
47084: ST_TO_ADDR
// end else
47085: GO 47107
// begin AddMcUnits ( Russian_att_id , R_New_Attack ^ R_New_Patrol ) ;
47087: LD_EXP 242
47091: PPUSH
47092: LD_EXP 131
47096: PUSH
47097: LD_EXP 132
47101: ADD
47102: PPUSH
47103: CALL_OW 390
// end ; RemoveMcUnits ( Russian_def_id , R_New_Attack ^ R_New_Patrol ) ;
47107: LD_EXP 245
47111: PPUSH
47112: LD_EXP 131
47116: PUSH
47117: LD_EXP 132
47121: ADD
47122: PPUSH
47123: CALL_OW 391
// end ;
47127: LD_VAR 0 2
47131: RET
// export function RusAttack ; var Attack_Area ; begin
47132: LD_INT 0
47134: PPUSH
47135: PPUSH
// while ( FilterUnitsInArea ( R_base , [ [ f_side , americans ] , [ f_ok ] ] ) > 0 ) do
47136: LD_INT 36
47138: PPUSH
47139: LD_INT 22
47141: PUSH
47142: LD_EXP 176
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 50
47153: PUSH
47154: EMPTY
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PPUSH
47161: CALL_OW 70
47165: PUSH
47166: LD_INT 0
47168: GREATER
47169: IFFALSE 47180
// Wait ( 0 0$10 ) ;
47171: LD_INT 350
47173: PPUSH
47174: CALL_OW 67
47178: GO 47136
// Main_R_Attack_Group = Main_R_Attack_Group ^ R_New_Attack ^ R_New_Patrol ;
47180: LD_ADDR_EXP 120
47184: PUSH
47185: LD_EXP 120
47189: PUSH
47190: LD_EXP 131
47194: ADD
47195: PUSH
47196: LD_EXP 132
47200: ADD
47201: ST_TO_ADDR
// Main_R_Attack_Group = UnitFilter ( Main_R_Attack_Group , [ f_ok ] ) ;
47202: LD_ADDR_EXP 120
47206: PUSH
47207: LD_EXP 120
47211: PPUSH
47212: LD_INT 50
47214: PUSH
47215: EMPTY
47216: LIST
47217: PPUSH
47218: CALL_OW 72
47222: ST_TO_ADDR
// Attack_Area = SetAttackArea ;
47223: LD_ADDR_VAR 0 2
47227: PUSH
47228: CALL 46268 0 0
47232: ST_TO_ADDR
// if ( R_New_Attack ^ R_New_Patrol <> 0 ) then
47233: LD_EXP 131
47237: PUSH
47238: LD_EXP 132
47242: ADD
47243: PUSH
47244: LD_INT 0
47246: NONEQUAL
47247: IFFALSE 47258
// GoThroughTeleport ( Attack_Area ) ;
47249: LD_VAR 0 2
47253: PPUSH
47254: CALL 46653 0 1
// StartOfRusAttack ( Attack_Area ) ;
47258: LD_VAR 0 2
47262: PPUSH
47263: CALL 46872 0 1
// end ;
47267: LD_VAR 0 1
47271: RET
// every 0 0$1 trigger tick > Rus_Attack_Time marked 10 do
47272: LD_OWVAR 1
47276: PUSH
47277: LD_EXP 130
47281: GREATER
47282: IFFALSE 47523
47284: GO 47286
47286: DISABLE
// begin disable ;
47287: DISABLE
// while true do
47288: LD_INT 1
47290: IFFALSE 47523
// begin if Main_R_Attack_Group < 40 then
47292: LD_EXP 120
47296: PUSH
47297: LD_INT 40
47299: LESS
47300: IFFALSE 47331
// begin R_Attack_counter = R_Attack_counter + 1 ;
47302: LD_ADDR_EXP 117
47306: PUSH
47307: LD_EXP 117
47311: PUSH
47312: LD_INT 1
47314: PLUS
47315: ST_TO_ADDR
// GenerateAttackingGroup ;
47316: CALL 44408 0 0
// GeneratePatrolingGroup ;
47320: CALL 44861 0 0
// BuildGroups ( 0 ) ;
47324: LD_INT 0
47326: PPUSH
47327: CALL 44938 0 1
// end ; while ( R_Attack_Group <> 0 ) or ( R_Patrol_Group <> 0 ) or ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) or ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) do
47331: LD_EXP 121
47335: PUSH
47336: LD_INT 0
47338: NONEQUAL
47339: PUSH
47340: LD_EXP 124
47344: PUSH
47345: LD_INT 0
47347: NONEQUAL
47348: OR
47349: PUSH
47350: LD_INT 170
47352: PPUSH
47353: LD_INT 35
47355: PPUSH
47356: CALL_OW 438
47360: PPUSH
47361: CALL_OW 461
47365: PUSH
47366: LD_INT 3
47368: EQUAL
47369: OR
47370: PUSH
47371: LD_INT 195
47373: PPUSH
47374: LD_INT 84
47376: PPUSH
47377: CALL_OW 438
47381: PPUSH
47382: CALL_OW 461
47386: PUSH
47387: LD_INT 3
47389: EQUAL
47390: OR
47391: IFFALSE 47402
// Wait ( 1 1$0 ) ;
47393: LD_INT 2100
47395: PPUSH
47396: CALL_OW 67
47400: GO 47331
// if ( R_New_Attack ^ R_New_Patrol ) = 0 then
47402: LD_EXP 131
47406: PUSH
47407: LD_EXP 132
47411: ADD
47412: PUSH
47413: LD_INT 0
47415: EQUAL
47416: IFFALSE 47427
// Wait ( 0 0$15 ) else
47418: LD_INT 525
47420: PPUSH
47421: CALL_OW 67
47425: GO 47478
// begin while R_attack_time > 0 0$15 do
47427: LD_EXP 115
47431: PUSH
47432: LD_INT 525
47434: GREATER
47435: IFFALSE 47469
// begin R_attack_time = R_attack_time - 0 0$15 ;
47437: LD_ADDR_EXP 115
47441: PUSH
47442: LD_EXP 115
47446: PUSH
47447: LD_INT 525
47449: MINUS
47450: ST_TO_ADDR
// RaiseSailEvent ( Rus_Attack ) ;
47451: LD_EXP 171
47455: PPUSH
47456: CALL_OW 427
// Wait ( 0 0$15 ) ;
47460: LD_INT 525
47462: PPUSH
47463: CALL_OW 67
// end ;
47467: GO 47427
// Wait ( R_attack_time ) ;
47469: LD_EXP 115
47473: PPUSH
47474: CALL_OW 67
// end ; R_New_Attack = R_Constructed_Attack ;
47478: LD_ADDR_EXP 131
47482: PUSH
47483: LD_EXP 125
47487: ST_TO_ADDR
// R_Constructed_Attack = [ ] ;
47488: LD_ADDR_EXP 125
47492: PUSH
47493: EMPTY
47494: ST_TO_ADDR
// R_New_Patrol = R_Constructed_Patrol ;
47495: LD_ADDR_EXP 132
47499: PUSH
47500: LD_EXP 126
47504: ST_TO_ADDR
// R_Constructed_Patrol = [ ] ;
47505: LD_ADDR_EXP 126
47509: PUSH
47510: EMPTY
47511: ST_TO_ADDR
// RaiseSailEvent ( Rus_Attack ) ;
47512: LD_EXP 171
47516: PPUSH
47517: CALL_OW 427
// end ;
47521: GO 47288
// end ;
47523: END
// every 0 0$1 trigger Russian_Siberite_Attack do var Un ;
47524: LD_EXP 215
47528: IFFALSE 47562
47530: GO 47532
47532: DISABLE
47533: LD_INT 0
47535: PPUSH
// begin for Un in Russian_Siberite_rockets do
47536: LD_ADDR_VAR 0 1
47540: PUSH
47541: LD_EXP 216
47545: PUSH
47546: FOR_IN
47547: IFFALSE 47560
// RSiberiteAttack ( Un ) ;
47549: LD_VAR 0 1
47553: PPUSH
47554: CALL 18531 0 1
47558: GO 47546
47560: POP
47561: POP
// end ;
47562: PPOPN 1
47564: END
// every 0 0$30 do var Dep1 , Dep2 , Dep3 ;
47565: GO 47567
47567: DISABLE
47568: LD_INT 0
47570: PPUSH
47571: PPUSH
47572: PPUSH
// begin Dep1 = GetUnitNumber ( 175 , 56 ) ;
47573: LD_ADDR_VAR 0 1
47577: PUSH
47578: LD_INT 175
47580: PPUSH
47581: LD_INT 56
47583: PPUSH
47584: CALL_OW 438
47588: ST_TO_ADDR
// Dep2 = GetUnitNumber ( 175 , 81 ) ;
47589: LD_ADDR_VAR 0 2
47593: PUSH
47594: LD_INT 175
47596: PPUSH
47597: LD_INT 81
47599: PPUSH
47600: CALL_OW 438
47604: ST_TO_ADDR
// Dep3 = GetUnitNumber ( 213 , 117 ) ;
47605: LD_ADDR_VAR 0 3
47609: PUSH
47610: LD_INT 213
47612: PPUSH
47613: LD_INT 117
47615: PPUSH
47616: CALL_OW 438
47620: ST_TO_ADDR
// if IsOk ( Dep1 ) and GetSide ( Dep1 ) = russians then
47621: LD_VAR 0 1
47625: PPUSH
47626: CALL_OW 302
47630: PUSH
47631: LD_VAR 0 1
47635: PPUSH
47636: CALL_OW 255
47640: PUSH
47641: LD_EXP 178
47645: EQUAL
47646: AND
47647: IFFALSE 47705
// begin SetResourceType ( GetBase ( Dep1 ) , mat_siberit , rand ( 1500 , 2000 ) ) ;
47649: LD_VAR 0 1
47653: PPUSH
47654: CALL_OW 274
47658: PPUSH
47659: LD_INT 3
47661: PPUSH
47662: LD_INT 1500
47664: PPUSH
47665: LD_INT 2000
47667: PPUSH
47668: CALL_OW 12
47672: PPUSH
47673: CALL_OW 277
// SetResourceType ( GetBase ( Dep1 ) , mat_cans , rand ( 1500 , 2000 ) ) ;
47677: LD_VAR 0 1
47681: PPUSH
47682: CALL_OW 274
47686: PPUSH
47687: LD_INT 1
47689: PPUSH
47690: LD_INT 1500
47692: PPUSH
47693: LD_INT 2000
47695: PPUSH
47696: CALL_OW 12
47700: PPUSH
47701: CALL_OW 277
// end ; if IsOk ( Dep2 ) and GetSide ( Dep2 ) = russians then
47705: LD_VAR 0 2
47709: PPUSH
47710: CALL_OW 302
47714: PUSH
47715: LD_VAR 0 2
47719: PPUSH
47720: CALL_OW 255
47724: PUSH
47725: LD_EXP 178
47729: EQUAL
47730: AND
47731: IFFALSE 47789
// begin SetResourceType ( GetBase ( Dep2 ) , mat_siberit , rand ( 1500 , 2000 ) ) ;
47733: LD_VAR 0 2
47737: PPUSH
47738: CALL_OW 274
47742: PPUSH
47743: LD_INT 3
47745: PPUSH
47746: LD_INT 1500
47748: PPUSH
47749: LD_INT 2000
47751: PPUSH
47752: CALL_OW 12
47756: PPUSH
47757: CALL_OW 277
// SetResourceType ( GetBase ( Dep2 ) , mat_cans , rand ( 1500 , 2000 ) ) ;
47761: LD_VAR 0 2
47765: PPUSH
47766: CALL_OW 274
47770: PPUSH
47771: LD_INT 1
47773: PPUSH
47774: LD_INT 1500
47776: PPUSH
47777: LD_INT 2000
47779: PPUSH
47780: CALL_OW 12
47784: PPUSH
47785: CALL_OW 277
// end ; if IsOk ( Dep3 ) and GetSide ( Dep3 ) = russians then
47789: LD_VAR 0 3
47793: PPUSH
47794: CALL_OW 302
47798: PUSH
47799: LD_VAR 0 3
47803: PPUSH
47804: CALL_OW 255
47808: PUSH
47809: LD_EXP 178
47813: EQUAL
47814: AND
47815: IFFALSE 47873
// begin SetResourceType ( GetBase ( Dep3 ) , mat_siberit , rand ( 500 , 600 ) ) ;
47817: LD_VAR 0 3
47821: PPUSH
47822: CALL_OW 274
47826: PPUSH
47827: LD_INT 3
47829: PPUSH
47830: LD_INT 500
47832: PPUSH
47833: LD_INT 600
47835: PPUSH
47836: CALL_OW 12
47840: PPUSH
47841: CALL_OW 277
// SetResourceType ( GetBase ( Dep3 ) , mat_cans , rand ( 2000 , 2200 ) ) ;
47845: LD_VAR 0 3
47849: PPUSH
47850: CALL_OW 274
47854: PPUSH
47855: LD_INT 1
47857: PPUSH
47858: LD_INT 2000
47860: PPUSH
47861: LD_INT 2200
47863: PPUSH
47864: CALL_OW 12
47868: PPUSH
47869: CALL_OW 277
// end ; enable ;
47873: ENABLE
// end ;
47874: PPOPN 3
47876: END
// export function BuildBehemots ; var i , Un , New_Person ; begin
47877: LD_INT 0
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
// uc_side = russians ;
47883: LD_ADDR_OWVAR 20
47887: PUSH
47888: LD_EXP 178
47892: ST_TO_ADDR
// uc_nation = nation_russian ;
47893: LD_ADDR_OWVAR 21
47897: PUSH
47898: LD_INT 3
47900: ST_TO_ADDR
// for i = 1 to Number_of_Behemots do
47901: LD_ADDR_VAR 0 2
47905: PUSH
47906: DOUBLE
47907: LD_INT 1
47909: DEC
47910: ST_TO_ADDR
47911: LD_EXP 221
47915: PUSH
47916: FOR_TO
47917: IFFALSE 48001
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
47919: LD_INT 0
47921: PPUSH
47922: LD_EXP 184
47926: PPUSH
47927: CALL_OW 383
// New_Person = CreateHuman ;
47931: LD_ADDR_VAR 0 4
47935: PUSH
47936: CALL_OW 44
47940: ST_TO_ADDR
// PlaceHumanInUnit ( New_Person , GetUnitNumber ( 175 , 81 ) ) ;
47941: LD_VAR 0 4
47945: PPUSH
47946: LD_INT 175
47948: PPUSH
47949: LD_INT 81
47951: PPUSH
47952: CALL_OW 438
47956: PPUSH
47957: CALL_OW 52
// AddComExitBuilding ( New_Person ) ;
47961: LD_VAR 0 4
47965: PPUSH
47966: CALL_OW 182
// Behemot_Engineers = Behemot_Engineers ^ New_Person ;
47970: LD_ADDR_EXP 127
47974: PUSH
47975: LD_EXP 127
47979: PUSH
47980: LD_VAR 0 4
47984: ADD
47985: ST_TO_ADDR
// WaitTask ( New_Person , 0.2 ) ;
47986: LD_VAR 0 4
47990: PPUSH
47991: LD_REAL  2.00000000000000E-0001
47994: PPUSH
47995: CALL 17888 0 2
// end ;
47999: GO 47916
48001: POP
48002: POP
// SetSkill ( Behemot_Engineers , skill_engineering , Human_difficulty_skill ) ;
48003: LD_EXP 127
48007: PPUSH
48008: LD_INT 2
48010: PPUSH
48011: LD_EXP 184
48015: PPUSH
48016: CALL_OW 237
// i = 1 ;
48020: LD_ADDR_VAR 0 2
48024: PUSH
48025: LD_INT 1
48027: ST_TO_ADDR
// for Un in Behemot_Engineers do
48028: LD_ADDR_VAR 0 3
48032: PUSH
48033: LD_EXP 127
48037: PUSH
48038: FOR_IN
48039: IFFALSE 48102
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48041: LD_VAR 0 3
48045: PPUSH
48046: LD_INT 37
48048: PPUSH
48049: LD_EXP 224
48053: PUSH
48054: LD_VAR 0 2
48058: ARRAY
48059: PUSH
48060: LD_INT 1
48062: ARRAY
48063: PPUSH
48064: LD_EXP 224
48068: PUSH
48069: LD_VAR 0 2
48073: ARRAY
48074: PUSH
48075: LD_INT 2
48077: ARRAY
48078: PPUSH
48079: LD_INT 5
48081: PPUSH
48082: CALL_OW 170
// i = i + 1 ;
48086: LD_ADDR_VAR 0 2
48090: PUSH
48091: LD_VAR 0 2
48095: PUSH
48096: LD_INT 1
48098: PLUS
48099: ST_TO_ADDR
// end ;
48100: GO 48038
48102: POP
48103: POP
// end ;
48104: LD_VAR 0 1
48108: RET
// export function BehemotsAttack ; var i , Un ; begin
48109: LD_INT 0
48111: PPUSH
48112: PPUSH
48113: PPUSH
// while tick < Behemot_attack_time do
48114: LD_OWVAR 1
48118: PUSH
48119: LD_EXP 225
48123: LESS
48124: IFFALSE 48135
// Wait ( 0 0$2 ) ;
48126: LD_INT 70
48128: PPUSH
48129: CALL_OW 67
48133: GO 48114
// AddMcUnits ( Russian_att_id , New_Behemots ) ;
48135: LD_EXP 242
48139: PPUSH
48140: LD_EXP 129
48144: PPUSH
48145: CALL_OW 390
// New_Behemots = [ ] ;
48149: LD_ADDR_EXP 129
48153: PUSH
48154: EMPTY
48155: ST_TO_ADDR
// i = 1 ;
48156: LD_ADDR_VAR 0 2
48160: PUSH
48161: LD_INT 1
48163: ST_TO_ADDR
// for Un in Behemot_Engineers do
48164: LD_ADDR_VAR 0 3
48168: PUSH
48169: LD_EXP 127
48173: PUSH
48174: FOR_IN
48175: IFFALSE 48238
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48177: LD_VAR 0 3
48181: PPUSH
48182: LD_INT 37
48184: PPUSH
48185: LD_EXP 224
48189: PUSH
48190: LD_VAR 0 2
48194: ARRAY
48195: PUSH
48196: LD_INT 1
48198: ARRAY
48199: PPUSH
48200: LD_EXP 224
48204: PUSH
48205: LD_VAR 0 2
48209: ARRAY
48210: PUSH
48211: LD_INT 2
48213: ARRAY
48214: PPUSH
48215: LD_INT 5
48217: PPUSH
48218: CALL_OW 170
// i = i + 1 ;
48222: LD_ADDR_VAR 0 2
48226: PUSH
48227: LD_VAR 0 2
48231: PUSH
48232: LD_INT 1
48234: PLUS
48235: ST_TO_ADDR
// end ;
48236: GO 48174
48238: POP
48239: POP
// i = 1 ;
48240: LD_ADDR_VAR 0 2
48244: PUSH
48245: LD_INT 1
48247: ST_TO_ADDR
// for Un in Behemot_Engineers do
48248: LD_ADDR_VAR 0 3
48252: PUSH
48253: LD_EXP 127
48257: PUSH
48258: FOR_IN
48259: IFFALSE 48388
// begin while IsOk ( Un ) and not ( GetBType ( GetUnitNumber ( Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] ) ) = b_behemoth ) do
48261: LD_VAR 0 3
48265: PPUSH
48266: CALL_OW 302
48270: PUSH
48271: LD_EXP 224
48275: PUSH
48276: LD_VAR 0 2
48280: ARRAY
48281: PUSH
48282: LD_INT 1
48284: ARRAY
48285: PPUSH
48286: LD_EXP 224
48290: PUSH
48291: LD_VAR 0 2
48295: ARRAY
48296: PUSH
48297: LD_INT 2
48299: ARRAY
48300: PPUSH
48301: CALL_OW 438
48305: PPUSH
48306: CALL_OW 266
48310: PUSH
48311: LD_INT 37
48313: EQUAL
48314: NOT
48315: AND
48316: IFFALSE 48372
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48318: LD_VAR 0 3
48322: PPUSH
48323: LD_INT 37
48325: PPUSH
48326: LD_EXP 224
48330: PUSH
48331: LD_VAR 0 2
48335: ARRAY
48336: PUSH
48337: LD_INT 1
48339: ARRAY
48340: PPUSH
48341: LD_EXP 224
48345: PUSH
48346: LD_VAR 0 2
48350: ARRAY
48351: PUSH
48352: LD_INT 2
48354: ARRAY
48355: PPUSH
48356: LD_INT 5
48358: PPUSH
48359: CALL_OW 170
// Wait ( 0 0$0.5 ) ;
48363: LD_INT 18
48365: PPUSH
48366: CALL_OW 67
// end ;
48370: GO 48261
// i = i + 1 ;
48372: LD_ADDR_VAR 0 2
48376: PUSH
48377: LD_VAR 0 2
48381: PUSH
48382: LD_INT 1
48384: PLUS
48385: ST_TO_ADDR
// end ;
48386: GO 48258
48388: POP
48389: POP
// end ;
48390: LD_VAR 0 1
48394: RET
// every 0 0$2 trigger Russian_Behemots <> 0 do var Un ;
48395: LD_EXP 128
48399: PUSH
48400: LD_INT 0
48402: NONEQUAL
48403: IFFALSE 48511
48405: GO 48407
48407: DISABLE
48408: LD_INT 0
48410: PPUSH
// begin for Un in Russian_Behemots do
48411: LD_ADDR_VAR 0 1
48415: PUSH
48416: LD_EXP 128
48420: PUSH
48421: FOR_IN
48422: IFFALSE 48508
// if See ( americans , Un ) then
48424: LD_EXP 176
48428: PPUSH
48429: LD_VAR 0 1
48433: PPUSH
48434: CALL_OW 292
48438: IFFALSE 48506
// begin if IsInArea ( Un , Plan6 ) then
48440: LD_VAR 0 1
48444: PPUSH
48445: LD_INT 34
48447: PPUSH
48448: CALL_OW 308
48452: IFFALSE 48481
// begin CenterOnUnits ( Un ) ;
48454: LD_VAR 0 1
48458: PPUSH
48459: CALL_OW 85
// Say ( JMM , D17a-JMM-1 ) ;
48463: LD_EXP 1
48467: PPUSH
48468: LD_STRING D17a-JMM-1
48470: PPUSH
48471: CALL_OW 88
// exit ;
48475: POP
48476: POP
48477: GO 48511
// end else
48479: GO 48506
// begin CenterOnUnits ( Un ) ;
48481: LD_VAR 0 1
48485: PPUSH
48486: CALL_OW 85
// Say ( JMM , D17b-JMM-1 ) ;
48490: LD_EXP 1
48494: PPUSH
48495: LD_STRING D17b-JMM-1
48497: PPUSH
48498: CALL_OW 88
// exit ;
48502: POP
48503: POP
48504: GO 48511
// end ; end ;
48506: GO 48421
48508: POP
48509: POP
// enable ;
48510: ENABLE
// end ;
48511: PPOPN 1
48513: END
// every 0 0$10 trigger ( not ( Russian_Siberite_Attack ) or not ( The_Last_Arabian_Attack_Begun ) ) do var Teleport1 , Teleport2 , Un , i , hex , sib_r , rus_remaind ;
48514: LD_EXP 215
48518: NOT
48519: PUSH
48520: LD_EXP 227
48524: NOT
48525: OR
48526: IFFALSE 48751
48528: GO 48530
48530: DISABLE
48531: LD_INT 0
48533: PPUSH
48534: PPUSH
48535: PPUSH
48536: PPUSH
48537: PPUSH
48538: PPUSH
48539: PPUSH
// begin rus_remaind = UnitFilter ( All_Russians , [ f_ok ] ) ;
48540: LD_ADDR_VAR 0 7
48544: PUSH
48545: LD_EXP 111
48549: PPUSH
48550: LD_INT 50
48552: PUSH
48553: EMPTY
48554: LIST
48555: PPUSH
48556: CALL_OW 72
48560: ST_TO_ADDR
// if ( rus_remaind < 3 ) and not ( The_Last_Arabian_Attack_Begun ) then
48561: LD_VAR 0 7
48565: PUSH
48566: LD_INT 3
48568: LESS
48569: PUSH
48570: LD_EXP 227
48574: NOT
48575: AND
48576: IFFALSE 48590
// begin The_Last_Arabian_Attack_Begun = true ;
48578: LD_ADDR_EXP 227
48582: PUSH
48583: LD_INT 1
48585: ST_TO_ADDR
// TheLastArabianAttack ;
48586: CALL 49993 0 0
// end ; if ( rus_remaind < 10 ) and not ( Russian_Siberite_Attack ) then
48590: LD_VAR 0 7
48594: PUSH
48595: LD_INT 10
48597: LESS
48598: PUSH
48599: LD_EXP 215
48603: NOT
48604: AND
48605: IFFALSE 48736
// begin if ( FilterUnitsInArea ( R_base , [ [ f_side , americans ] , [ f_ok ] ] ) <> 0 ) then
48607: LD_INT 36
48609: PPUSH
48610: LD_INT 22
48612: PUSH
48613: LD_EXP 176
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 50
48624: PUSH
48625: EMPTY
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PPUSH
48632: CALL_OW 70
48636: PUSH
48637: LD_INT 0
48639: NONEQUAL
48640: IFFALSE 48736
// begin sib_r = FilterAllUnits ( [ [ f_side , Russians ] , [ f_ok ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
48642: LD_ADDR_VAR 0 6
48646: PUSH
48647: LD_INT 22
48649: PUSH
48650: LD_EXP 178
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 50
48661: PUSH
48662: EMPTY
48663: LIST
48664: PUSH
48665: LD_INT 34
48667: PUSH
48668: LD_INT 48
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: PPUSH
48680: CALL_OW 69
48684: ST_TO_ADDR
// if ( sib_r <> 0 ) and not ( Russian_Siberite_Attack ) then
48685: LD_VAR 0 6
48689: PUSH
48690: LD_INT 0
48692: NONEQUAL
48693: PUSH
48694: LD_EXP 215
48698: NOT
48699: AND
48700: IFFALSE 48736
// begin Russian_Siberite_Attack = true ;
48702: LD_ADDR_EXP 215
48706: PUSH
48707: LD_INT 1
48709: ST_TO_ADDR
// for Un in sib_r do
48710: LD_ADDR_VAR 0 3
48714: PUSH
48715: LD_VAR 0 6
48719: PUSH
48720: FOR_IN
48721: IFFALSE 48734
// RSiberiteAttack ( Un ) ;
48723: LD_VAR 0 3
48727: PPUSH
48728: CALL 18531 0 1
48732: GO 48720
48734: POP
48735: POP
// end ; end ; end ; if not ( Russian_Siberite_Attack ) or not ( The_Last_Arabian_Attack_Begun ) then
48736: LD_EXP 215
48740: NOT
48741: PUSH
48742: LD_EXP 227
48746: NOT
48747: OR
48748: IFFALSE 48751
// enable ;
48750: ENABLE
// end ; end_of_file
48751: PPOPN 7
48753: END
// function PlaceAttackingUnits ; var Un ; begin
48754: LD_INT 0
48756: PPUSH
48757: PPUSH
// for Un in Omar_vehicles do
48758: LD_ADDR_VAR 0 2
48762: PUSH
48763: LD_EXP 74
48767: PUSH
48768: FOR_IN
48769: IFFALSE 48788
// PlaceUnitArea ( Un , ArStart1 , false ) ;
48771: LD_VAR 0 2
48775: PPUSH
48776: LD_INT 38
48778: PPUSH
48779: LD_INT 0
48781: PPUSH
48782: CALL_OW 49
48786: GO 48768
48788: POP
48789: POP
// PlaceUnitArea ( Masto , ArStart , false ) ;
48790: LD_INT 147
48792: PPUSH
48793: LD_INT 37
48795: PPUSH
48796: LD_INT 0
48798: PPUSH
48799: CALL_OW 49
// PlaceUnitArea ( Heike , ArStart , false ) ;
48803: LD_EXP 29
48807: PPUSH
48808: LD_INT 37
48810: PPUSH
48811: LD_INT 0
48813: PPUSH
48814: CALL_OW 49
// for Un in Omar_Soldiers do
48818: LD_ADDR_VAR 0 2
48822: PUSH
48823: LD_EXP 72
48827: PUSH
48828: FOR_IN
48829: IFFALSE 48848
// PlaceUnitArea ( Un , ArStart , false ) ;
48831: LD_VAR 0 2
48835: PPUSH
48836: LD_INT 37
48838: PPUSH
48839: LD_INT 0
48841: PPUSH
48842: CALL_OW 49
48846: GO 48828
48848: POP
48849: POP
// for Un in Omar_Scientists do
48850: LD_ADDR_VAR 0 2
48854: PUSH
48855: LD_EXP 73
48859: PUSH
48860: FOR_IN
48861: IFFALSE 48880
// PlaceUnitArea ( Un , ArStart , false ) ;
48863: LD_VAR 0 2
48867: PPUSH
48868: LD_INT 37
48870: PPUSH
48871: LD_INT 0
48873: PPUSH
48874: CALL_OW 49
48878: GO 48860
48880: POP
48881: POP
// end ;
48882: LD_VAR 0 1
48886: RET
// function JMM_warns ; var Remaining_americans , Remaining_unnamed_males , sold ; begin
48887: LD_INT 0
48889: PPUSH
48890: PPUSH
48891: PPUSH
48892: PPUSH
// placeseeing ( 157 , 7 , americans , - 15 ) ;
48893: LD_INT 157
48895: PPUSH
48896: LD_INT 7
48898: PPUSH
48899: LD_EXP 176
48903: PPUSH
48904: LD_INT 15
48906: NEG
48907: PPUSH
48908: CALL_OW 330
// placeseeing ( 165 , 21 , americans , - 15 ) ;
48912: LD_INT 165
48914: PPUSH
48915: LD_INT 21
48917: PPUSH
48918: LD_EXP 176
48922: PPUSH
48923: LD_INT 15
48925: NEG
48926: PPUSH
48927: CALL_OW 330
// CenterNowOnUnits ( [ Omar , Heike ] ) ;
48931: LD_EXP 28
48935: PUSH
48936: LD_EXP 29
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PPUSH
48945: CALL_OW 87
// Wait ( 0 0$0.5 ) ;
48949: LD_INT 18
48951: PPUSH
48952: CALL_OW 67
// Remaining_americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_sex , sex_male ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) diff JMM ;
48956: LD_ADDR_VAR 0 2
48960: PUSH
48961: LD_INT 22
48963: PUSH
48964: LD_EXP 176
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 26
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 25
48991: PUSH
48992: LD_INT 12
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 25
49001: PUSH
49002: LD_INT 16
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 25
49011: PUSH
49012: LD_INT 17
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 25
49021: PUSH
49022: LD_INT 15
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 25
49031: PUSH
49032: LD_INT 17
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: PUSH
49047: EMPTY
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: PPUSH
49056: CALL_OW 69
49060: PUSH
49061: LD_EXP 1
49065: DIFF
49066: ST_TO_ADDR
// Remaining_unnamed_males = Remaining_americans diff [ JMM , Powell , Bobby , Cyrus , Lisa , Frank , Brown , Donaldson , Gladstone , Cornell , Denis , Joan , Kurt , Yamoko , Gary , Simms , Stevens , Coonie , Friend ] ;
49067: LD_ADDR_VAR 0 3
49071: PUSH
49072: LD_VAR 0 2
49076: PUSH
49077: LD_EXP 1
49081: PUSH
49082: LD_EXP 2
49086: PUSH
49087: LD_EXP 3
49091: PUSH
49092: LD_EXP 4
49096: PUSH
49097: LD_EXP 5
49101: PUSH
49102: LD_EXP 6
49106: PUSH
49107: LD_EXP 7
49111: PUSH
49112: LD_EXP 8
49116: PUSH
49117: LD_EXP 9
49121: PUSH
49122: LD_EXP 10
49126: PUSH
49127: LD_EXP 11
49131: PUSH
49132: LD_EXP 12
49136: PUSH
49137: LD_EXP 13
49141: PUSH
49142: LD_EXP 14
49146: PUSH
49147: LD_EXP 15
49151: PUSH
49152: LD_EXP 16
49156: PUSH
49157: LD_EXP 17
49161: PUSH
49162: LD_EXP 18
49166: PUSH
49167: LD_EXP 21
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: DIFF
49193: ST_TO_ADDR
// Sold = 0 ;
49194: LD_ADDR_VAR 0 4
49198: PUSH
49199: LD_INT 0
49201: ST_TO_ADDR
// if Remaining_unnamed_males <> 0 then
49202: LD_VAR 0 3
49206: PUSH
49207: LD_INT 0
49209: NONEQUAL
49210: IFFALSE 49238
// Sold = Remaining_unnamed_males [ Rand ( 1 , Remaining_unnamed_males ) ] else
49212: LD_ADDR_VAR 0 4
49216: PUSH
49217: LD_VAR 0 3
49221: PUSH
49222: LD_INT 1
49224: PPUSH
49225: LD_VAR 0 3
49229: PPUSH
49230: CALL_OW 12
49234: ARRAY
49235: ST_TO_ADDR
49236: GO 49272
// if Sold <> 0 then
49238: LD_VAR 0 4
49242: PUSH
49243: LD_INT 0
49245: NONEQUAL
49246: IFFALSE 49272
// Sold = Remaining_americans [ Rand ( 1 , Remaining_americans ) ] ;
49248: LD_ADDR_VAR 0 4
49252: PUSH
49253: LD_VAR 0 2
49257: PUSH
49258: LD_INT 1
49260: PPUSH
49261: LD_VAR 0 2
49265: PPUSH
49266: CALL_OW 12
49270: ARRAY
49271: ST_TO_ADDR
// DialogueON ;
49272: CALL_OW 6
// Say ( JMM , D19-JMM-1 ) ;
49276: LD_EXP 1
49280: PPUSH
49281: LD_STRING D19-JMM-1
49283: PPUSH
49284: CALL_OW 88
// Say ( Sold , D19-Sol1-1 ) ;
49288: LD_VAR 0 4
49292: PPUSH
49293: LD_STRING D19-Sol1-1
49295: PPUSH
49296: CALL_OW 88
// Say ( JMM , D19-JMM-2 ) ;
49300: LD_EXP 1
49304: PPUSH
49305: LD_STRING D19-JMM-2
49307: PPUSH
49308: CALL_OW 88
// DialogueOFF ;
49312: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
49316: LD_STRING M5
49318: PPUSH
49319: CALL_OW 337
// end ;
49323: LD_VAR 0 1
49327: RET
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
49328: LD_INT 0
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
49334: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
49335: LD_ADDR_VAR 0 2
49339: PUSH
49340: LD_INT 168
49342: PUSH
49343: LD_INT 18
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 169
49352: PUSH
49353: LD_INT 20
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 167
49362: PUSH
49363: LD_INT 20
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 164
49372: PUSH
49373: LD_INT 18
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 164
49382: PUSH
49383: LD_INT 19
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 163
49392: PUSH
49393: LD_INT 19
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 164
49402: PUSH
49403: LD_INT 21
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 165
49412: PUSH
49413: LD_INT 21
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 163
49422: PUSH
49423: LD_INT 20
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 164
49432: PUSH
49433: LD_INT 22
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 162
49442: PUSH
49443: LD_INT 20
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
49463: LD_ADDR_VAR 0 3
49467: PUSH
49468: LD_INT 169
49470: PUSH
49471: LD_INT 34
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 169
49480: PUSH
49481: LD_INT 35
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 167
49490: PUSH
49491: LD_INT 32
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 170
49500: PUSH
49501: LD_INT 31
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 173
49510: PUSH
49511: LD_INT 35
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 174
49520: PUSH
49521: LD_INT 39
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: ST_TO_ADDR
// for i = 1 to mines_pos do
49536: LD_ADDR_VAR 0 4
49540: PUSH
49541: DOUBLE
49542: LD_INT 1
49544: DEC
49545: ST_TO_ADDR
49546: LD_VAR 0 2
49550: PUSH
49551: FOR_TO
49552: IFFALSE 49764
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
49554: LD_VAR 0 2
49558: PUSH
49559: LD_VAR 0 4
49563: ARRAY
49564: PUSH
49565: LD_INT 1
49567: ARRAY
49568: PPUSH
49569: LD_VAR 0 2
49573: PUSH
49574: LD_VAR 0 4
49578: ARRAY
49579: PUSH
49580: LD_INT 2
49582: ARRAY
49583: PPUSH
49584: LD_INT 1
49586: PPUSH
49587: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
49591: LD_INT 1
49593: PPUSH
49594: LD_INT 3
49596: PPUSH
49597: CALL_OW 12
49601: PPUSH
49602: CALL_OW 67
// if i < mines_pos then
49606: LD_VAR 0 4
49610: PUSH
49611: LD_VAR 0 2
49615: LESS
49616: IFFALSE 49654
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
49618: LD_VAR 0 2
49622: PUSH
49623: LD_VAR 0 4
49627: ARRAY
49628: PUSH
49629: LD_INT 1
49631: ARRAY
49632: PPUSH
49633: LD_VAR 0 2
49637: PUSH
49638: LD_VAR 0 4
49642: ARRAY
49643: PUSH
49644: LD_INT 2
49646: ARRAY
49647: PPUSH
49648: CALL_OW 348
49652: GO 49762
// begin for j = 1 to mines_pos1 do
49654: LD_ADDR_VAR 0 5
49658: PUSH
49659: DOUBLE
49660: LD_INT 1
49662: DEC
49663: ST_TO_ADDR
49664: LD_VAR 0 3
49668: PUSH
49669: FOR_TO
49670: IFFALSE 49726
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
49672: LD_VAR 0 3
49676: PUSH
49677: LD_VAR 0 5
49681: ARRAY
49682: PUSH
49683: LD_INT 1
49685: ARRAY
49686: PPUSH
49687: LD_VAR 0 3
49691: PUSH
49692: LD_VAR 0 5
49696: ARRAY
49697: PUSH
49698: LD_INT 2
49700: ARRAY
49701: PPUSH
49702: LD_INT 1
49704: PPUSH
49705: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
49709: LD_INT 1
49711: PPUSH
49712: LD_INT 3
49714: PPUSH
49715: CALL_OW 12
49719: PPUSH
49720: CALL_OW 67
// end ;
49724: GO 49669
49726: POP
49727: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
49728: LD_VAR 0 2
49732: PUSH
49733: LD_VAR 0 4
49737: ARRAY
49738: PUSH
49739: LD_INT 1
49741: ARRAY
49742: PPUSH
49743: LD_VAR 0 2
49747: PUSH
49748: LD_VAR 0 4
49752: ARRAY
49753: PUSH
49754: LD_INT 2
49756: ARRAY
49757: PPUSH
49758: CALL_OW 347
// end ; end ;
49762: GO 49551
49764: POP
49765: POP
// end ;
49766: LD_VAR 0 1
49770: RET
// function StartTheAttack ; begin
49771: LD_INT 0
49773: PPUSH
// ComMoveXY ( Omar_vehicles ^ Masto , 184 , 82 ) ;
49774: LD_EXP 74
49778: PUSH
49779: LD_INT 147
49781: ADD
49782: PPUSH
49783: LD_INT 184
49785: PPUSH
49786: LD_INT 82
49788: PPUSH
49789: CALL_OW 111
// Wait ( 0 0$3 ) ;
49793: LD_INT 105
49795: PPUSH
49796: CALL_OW 67
// McMove ( 100 , Heike ^ Omar_Soldiers , [ [ 184 , 82 ] ] , mc_no_stop ) ;
49800: LD_INT 100
49802: PPUSH
49803: LD_EXP 29
49807: PUSH
49808: LD_EXP 72
49812: ADD
49813: PPUSH
49814: LD_INT 184
49816: PUSH
49817: LD_INT 82
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: PPUSH
49827: LD_INT 10
49829: PPUSH
49830: CALL_OW 398
// Wait ( 0 0$5 ) ;
49834: LD_INT 175
49836: PPUSH
49837: CALL_OW 67
// ComContaminate ( Omar_Scientists , 177 , 69 ) ;
49841: LD_EXP 73
49845: PPUSH
49846: LD_INT 177
49848: PPUSH
49849: LD_INT 69
49851: PPUSH
49852: CALL_OW 158
// end ;
49856: LD_VAR 0 1
49860: RET
// export function HeikeLastWords ; begin
49861: LD_INT 0
49863: PPUSH
// if IsDead ( Omar ) and ( Heike_Last_Words = false ) then
49864: LD_EXP 28
49868: PPUSH
49869: CALL_OW 301
49873: PUSH
49874: LD_EXP 232
49878: PUSH
49879: LD_INT 0
49881: EQUAL
49882: AND
49883: IFFALSE 49928
// begin Heike_Last_Words = true ;
49885: LD_ADDR_EXP 232
49889: PUSH
49890: LD_INT 1
49892: ST_TO_ADDR
// Say ( JMM , D19a-JMM-1 ) ;
49893: LD_EXP 1
49897: PPUSH
49898: LD_STRING D19a-JMM-1
49900: PPUSH
49901: CALL_OW 88
// if IsOk ( Heike ) then
49905: LD_EXP 29
49909: PPUSH
49910: CALL_OW 302
49914: IFFALSE 49928
// Say ( Heike , D19a-Hke-1 ) ;
49916: LD_EXP 29
49920: PPUSH
49921: LD_STRING D19a-Hke-1
49923: PPUSH
49924: CALL_OW 88
// end end ;
49928: LD_VAR 0 1
49932: RET
// export function TestForEndOfMission ; var Last_enemies ; begin
49933: LD_INT 0
49935: PPUSH
49936: PPUSH
// Last_enemies = FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , arabians1 ] ] ) ;
49937: LD_ADDR_VAR 0 2
49941: PUSH
49942: LD_INT 21
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 22
49954: PUSH
49955: LD_EXP 181
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PPUSH
49968: CALL_OW 69
49972: ST_TO_ADDR
// if Last_enemies = 0 then
49973: LD_VAR 0 2
49977: PUSH
49978: LD_INT 0
49980: EQUAL
49981: IFFALSE 49988
// enable ( End_of_m ) ;
49983: LD_EXP 158
49987: ENABLE_MARKED
// end ;
49988: LD_VAR 0 1
49992: RET
// export function TheLastArabianAttack ; begin
49993: LD_INT 0
49995: PPUSH
// Wait ( 0 0$10 ) ;
49996: LD_INT 350
49998: PPUSH
49999: CALL_OW 67
// PlaceAttackingUnits ;
50003: CALL 48754 0 0
// JMM_warns ;
50007: CALL 48887 0 0
// LaunchMines ;
50011: CALL 49328 0 0
// StartTheAttack ;
50015: CALL 49771 0 0
// end ; end_of_file
50019: LD_VAR 0 1
50023: RET
// export function StartAllianceBase ; var i , Bunkers , Turrets , units_to_protect ; begin
50024: LD_INT 0
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
// SetResourceType ( GetBase ( AllDep ) , mat_siberit , 200 ) ;
50031: LD_INT 45
50033: PPUSH
50034: CALL_OW 274
50038: PPUSH
50039: LD_INT 3
50041: PPUSH
50042: LD_INT 200
50044: PPUSH
50045: CALL_OW 277
// SetResourceType ( GetBase ( AllDep ) , mat_cans , 400 ) ;
50049: LD_INT 45
50051: PPUSH
50052: CALL_OW 274
50056: PPUSH
50057: LD_INT 1
50059: PPUSH
50060: LD_INT 400
50062: PPUSH
50063: CALL_OW 277
// Alliance_Doctors = Alliance_am_scientists [ 1 ] ;
50067: LD_ADDR_EXP 102
50071: PUSH
50072: LD_EXP 97
50076: PUSH
50077: LD_INT 1
50079: ARRAY
50080: ST_TO_ADDR
// Alliance_am_scientists = Alliance_am_scientists diff Alliance_am_scientists [ 1 ] ;
50081: LD_ADDR_EXP 97
50085: PUSH
50086: LD_EXP 97
50090: PUSH
50091: LD_EXP 97
50095: PUSH
50096: LD_INT 1
50098: ARRAY
50099: DIFF
50100: ST_TO_ADDR
// ComEnterUnit ( Alliance_am_scientists , AllLabA ) ;
50101: LD_EXP 97
50105: PPUSH
50106: LD_INT 46
50108: PPUSH
50109: CALL_OW 120
// Alliance_Doctors = Alliance_rus_scientists [ 1 ] ;
50113: LD_ADDR_EXP 102
50117: PUSH
50118: LD_EXP 96
50122: PUSH
50123: LD_INT 1
50125: ARRAY
50126: ST_TO_ADDR
// Alliance_rus_scientists = Alliance_rus_scientists diff Alliance_rus_scientists [ 1 ] ;
50127: LD_ADDR_EXP 96
50131: PUSH
50132: LD_EXP 96
50136: PUSH
50137: LD_EXP 96
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: DIFF
50146: ST_TO_ADDR
// ComEnterUnit ( Alliance_rus_scientists , AllLabR1 ) ;
50147: LD_EXP 96
50151: PPUSH
50152: LD_INT 39
50154: PPUSH
50155: CALL_OW 120
// ComResearch ( AllLabA , tech_Comp1 ) ;
50159: LD_INT 46
50161: PPUSH
50162: LD_INT 57
50164: PPUSH
50165: CALL_OW 124
// AddComResearch ( AllLabA , tech_Opto1 ) ;
50169: LD_INT 46
50171: PPUSH
50172: LD_INT 60
50174: PPUSH
50175: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib1 ) ;
50179: LD_INT 46
50181: PPUSH
50182: LD_INT 54
50184: PPUSH
50185: CALL_OW 184
// AddComResearch ( AllLabA , tech_Opto2 ) ;
50189: LD_INT 46
50191: PPUSH
50192: LD_INT 61
50194: PPUSH
50195: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib2 ) ;
50199: LD_INT 46
50201: PPUSH
50202: LD_INT 55
50204: PPUSH
50205: CALL_OW 184
// AddComResearch ( AllLabA , tech_Opto3 ) ;
50209: LD_INT 46
50211: PPUSH
50212: LD_INT 62
50214: PPUSH
50215: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib3 ) ;
50219: LD_INT 46
50221: PPUSH
50222: LD_INT 56
50224: PPUSH
50225: CALL_OW 184
// ComResearch ( AllLabR1 , tech_ST1 ) ;
50229: LD_INT 39
50231: PPUSH
50232: LD_INT 63
50234: PPUSH
50235: CALL_OW 124
// AddComResearch ( AllLabR1 , tech_ST2 ) ;
50239: LD_INT 39
50241: PPUSH
50242: LD_INT 64
50244: PPUSH
50245: CALL_OW 184
// AddComResearch ( AllLabR1 , tech_ST3 ) ;
50249: LD_INT 39
50251: PPUSH
50252: LD_INT 65
50254: PPUSH
50255: CALL_OW 184
// ComResearch ( AllLabR2 , tech_Comp1 ) ;
50259: LD_INT 133
50261: PPUSH
50262: LD_INT 57
50264: PPUSH
50265: CALL_OW 124
// AddComResearch ( AllLabR2 , tech_Weap1 ) ;
50269: LD_INT 133
50271: PPUSH
50272: LD_INT 51
50274: PPUSH
50275: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Comp2 ) ;
50279: LD_INT 133
50281: PPUSH
50282: LD_INT 58
50284: PPUSH
50285: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Weap2 ) ;
50289: LD_INT 133
50291: PPUSH
50292: LD_INT 52
50294: PPUSH
50295: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Comp3 ) ;
50299: LD_INT 133
50301: PPUSH
50302: LD_INT 59
50304: PPUSH
50305: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Weap3 ) ;
50309: LD_INT 133
50311: PPUSH
50312: LD_INT 53
50314: PPUSH
50315: CALL_OW 184
// ComEnterUnit ( Alliance_am_soldiers , AllBarrA ) ;
50319: LD_EXP 95
50323: PPUSH
50324: LD_INT 41
50326: PPUSH
50327: CALL_OW 120
// ComEnterUnit ( Alliance_rus_soldiers , AllBarrR ) ;
50331: LD_EXP 94
50335: PPUSH
50336: LD_INT 48
50338: PPUSH
50339: CALL_OW 120
// Bunkers = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
50343: LD_ADDR_VAR 0 3
50347: PUSH
50348: LD_INT 22
50350: PUSH
50351: LD_EXP 182
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 21
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 30
50372: PUSH
50373: LD_INT 32
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: PPUSH
50385: CALL_OW 69
50389: ST_TO_ADDR
// Turrets = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_building ] , [ f_btype , b_turret ] ] ) ;
50390: LD_ADDR_VAR 0 4
50394: PUSH
50395: LD_INT 22
50397: PUSH
50398: LD_EXP 182
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 21
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 30
50419: PUSH
50420: LD_INT 33
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: PPUSH
50432: CALL_OW 69
50436: ST_TO_ADDR
// units_to_protect = Bunkers ^ Turrets ^ AllBarrA ^ AllBarrR ;
50437: LD_ADDR_VAR 0 5
50441: PUSH
50442: LD_VAR 0 3
50446: PUSH
50447: LD_VAR 0 4
50451: ADD
50452: PUSH
50453: LD_INT 41
50455: ADD
50456: PUSH
50457: LD_INT 48
50459: ADD
50460: ST_TO_ADDR
// Alliance_reg_id = McRegistry ( alliance , [ [ mc_reg_area_to_guard , Al_Base ] , [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_protect , Al_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
50461: LD_ADDR_EXP 247
50465: PUSH
50466: LD_EXP 182
50470: PPUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 18
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 70
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 18
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 4
50503: PUSH
50504: LD_VAR 0 5
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 8
50515: NEG
50516: PUSH
50517: LD_INT 7
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: PPUSH
50529: CALL_OW 399
50533: ST_TO_ADDR
// Alliance_wood_reg_id = McRegistry ( alliance , [ [ mc_reg_area_to_guard , Ali_wood ] , [ mc_reg_refresh_time , 0 0$5 ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
50534: LD_ADDR_EXP 249
50538: PUSH
50539: LD_EXP 182
50543: PPUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 9
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 175
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 8
50566: NEG
50567: PUSH
50568: LD_INT 7
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: PPUSH
50578: CALL_OW 399
50582: ST_TO_ADDR
// McDefend ( 100 , Alliance_reg_id , Alliance_am_soldiers ^ Alliance_rus_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Al_Base ] , [ mc_retreat_area_people , Al_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
50583: LD_INT 100
50585: PPUSH
50586: LD_EXP 247
50590: PPUSH
50591: LD_EXP 95
50595: PUSH
50596: LD_EXP 94
50600: ADD
50601: PUSH
50602: LD_VAR 0 5
50606: ADD
50607: PPUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 18
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 7
50620: PUSH
50621: LD_INT 28
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 5
50630: PUSH
50631: LD_INT 550
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: LIST
50642: PPUSH
50643: CALL_OW 401
// end ;
50647: LD_VAR 0 1
50651: RET
// export function AlliancePersonIsDead ; begin
50652: LD_INT 0
50654: PPUSH
// if FilterAllUnits ( [ [ f_side , alliance ] , [ f_alive ] , [ f_type , unit_human ] ] ) = 0 then
50655: LD_INT 22
50657: PUSH
50658: LD_EXP 182
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 51
50669: PUSH
50670: EMPTY
50671: LIST
50672: PUSH
50673: LD_INT 21
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: LIST
50687: PPUSH
50688: CALL_OW 69
50692: PUSH
50693: LD_INT 0
50695: EQUAL
50696: IFFALSE 50730
// begin KillMc ( Alliance_reg_id ) ;
50698: LD_EXP 247
50702: PPUSH
50703: CALL_OW 387
// KillMc ( Alliance_def_id ) ;
50707: LD_EXP 248
50711: PPUSH
50712: CALL_OW 387
// KillMc ( Alliance_wood_reg_id ) ;
50716: LD_EXP 249
50720: PPUSH
50721: CALL_OW 387
// disable ( Not_end_of_alliance ) ;
50725: LD_EXP 154
50729: DISABLE_MARKED
// end ; end ;
50730: LD_VAR 0 1
50734: RET
// export function AllianceBuildingInRed ; var All_Alliance_Units , Un ; begin
50735: LD_INT 0
50737: PPUSH
50738: PPUSH
50739: PPUSH
// if not ( IsOk ( AllDep ) ) or GetSide ( AllDep ) <> alliance or not ( IsOk ( AllLabA ) ) or GetSide ( AllLabA ) <> alliance then
50740: LD_INT 45
50742: PPUSH
50743: CALL_OW 302
50747: NOT
50748: PUSH
50749: LD_INT 45
50751: PPUSH
50752: CALL_OW 255
50756: PUSH
50757: LD_EXP 182
50761: NONEQUAL
50762: OR
50763: PUSH
50764: LD_INT 46
50766: PPUSH
50767: CALL_OW 302
50771: NOT
50772: OR
50773: PUSH
50774: LD_INT 46
50776: PPUSH
50777: CALL_OW 255
50781: PUSH
50782: LD_EXP 182
50786: NONEQUAL
50787: OR
50788: IFFALSE 50824
// begin ComStop ( [ Explorer1 , Explorer2 ] ) ;
50790: LD_EXP 100
50794: PUSH
50795: LD_EXP 101
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PPUSH
50804: CALL_OW 141
// Explorer1 = 0 ;
50808: LD_ADDR_EXP 100
50812: PUSH
50813: LD_INT 0
50815: ST_TO_ADDR
// Explorer2 = 0 ;
50816: LD_ADDR_EXP 101
50820: PUSH
50821: LD_INT 0
50823: ST_TO_ADDR
// end ; if ( ( UnitFilter ( Alliance_def_buildings , [ [ f_ok ] , [ f_side , alliance ] ] ) = 0 ) or not ( IsOk ( AllDep ) ) or GetSide ( AllDep ) <> alliance ) then
50824: LD_EXP 207
50828: PPUSH
50829: LD_INT 50
50831: PUSH
50832: EMPTY
50833: LIST
50834: PUSH
50835: LD_INT 22
50837: PUSH
50838: LD_EXP 182
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PPUSH
50851: CALL_OW 72
50855: PUSH
50856: LD_INT 0
50858: EQUAL
50859: PUSH
50860: LD_INT 45
50862: PPUSH
50863: CALL_OW 302
50867: NOT
50868: OR
50869: PUSH
50870: LD_INT 45
50872: PPUSH
50873: CALL_OW 255
50877: PUSH
50878: LD_EXP 182
50882: NONEQUAL
50883: OR
50884: IFFALSE 51523
// begin if IsOk ( Roth ) and GetAttitude ( alliance , americans ) <> att_friend then
50886: LD_EXP 20
50890: PPUSH
50891: CALL_OW 302
50895: PUSH
50896: LD_EXP 182
50900: PPUSH
50901: LD_EXP 176
50905: PPUSH
50906: CALL_OW 81
50910: PUSH
50911: LD_INT 1
50913: NONEQUAL
50914: AND
50915: IFFALSE 51523
// begin disable ( Explorers_Can_Go ) ;
50917: LD_EXP 153
50921: DISABLE_MARKED
// disable ( Not_End_of_Alliance ) ;
50922: LD_EXP 154
50926: DISABLE_MARKED
// SetSide ( FilterAllUnits ( [ f_side , Explorers_Side ] ) , alliance ) ;
50927: LD_INT 22
50929: PUSH
50930: LD_EXP 183
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PPUSH
50939: CALL_OW 69
50943: PPUSH
50944: LD_EXP 182
50948: PPUSH
50949: CALL_OW 235
// KillMc ( Alliance_reg_id ) ;
50953: LD_EXP 247
50957: PPUSH
50958: CALL_OW 387
// KillMc ( Alliance_def_id ) ;
50962: LD_EXP 248
50966: PPUSH
50967: CALL_OW 387
// KillMc ( Alliance_wood_reg_id ) ;
50971: LD_EXP 249
50975: PPUSH
50976: CALL_OW 387
// Roth_Captured = true ;
50980: LD_ADDR_EXP 54
50984: PUSH
50985: LD_INT 1
50987: ST_TO_ADDR
// SetAttitude ( Alliance , Americans , att_friend , true ) ;
50988: LD_EXP 182
50992: PPUSH
50993: LD_EXP 176
50997: PPUSH
50998: LD_INT 1
51000: PPUSH
51001: LD_INT 1
51003: PPUSH
51004: CALL_OW 80
// All_Alliance_Units = FilterAllUnits ( [ f_side , Alliance ] ) ;
51008: LD_ADDR_VAR 0 2
51012: PUSH
51013: LD_INT 22
51015: PUSH
51016: LD_EXP 182
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PPUSH
51025: CALL_OW 69
51029: ST_TO_ADDR
// ComExitBuilding ( All_Alliance_Units ) ;
51030: LD_VAR 0 2
51034: PPUSH
51035: CALL_OW 122
// ComStop ( All_Alliance_Units ) ;
51039: LD_VAR 0 2
51043: PPUSH
51044: CALL_OW 141
// ComStop ( FilterUnitsInArea ( Al_Base , [ f_side , americans ] ) ) ;
51048: LD_INT 18
51050: PPUSH
51051: LD_INT 22
51053: PUSH
51054: LD_EXP 176
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PPUSH
51063: CALL_OW 70
51067: PPUSH
51068: CALL_OW 141
// Wait ( 0 0$1 ) ;
51072: LD_INT 35
51074: PPUSH
51075: CALL_OW 67
// CenterNowOnXY ( 233 , 181 ) ;
51079: LD_INT 233
51081: PPUSH
51082: LD_INT 181
51084: PPUSH
51085: CALL_OW 86
// DialogueON ;
51089: CALL_OW 6
// Say ( JMM , DAb-JMM-1 ) ;
51093: LD_EXP 1
51097: PPUSH
51098: LD_STRING DAb-JMM-1
51100: PPUSH
51101: CALL_OW 88
// if ( True_Americans ^ [ ] ) = 1 then
51105: LD_EXP 70
51109: PUSH
51110: EMPTY
51111: ADD
51112: PUSH
51113: LD_INT 1
51115: EQUAL
51116: IFFALSE 51132
// Say ( JMM , DAb-JMM-1a ) else
51118: LD_EXP 1
51122: PPUSH
51123: LD_STRING DAb-JMM-1a
51125: PPUSH
51126: CALL_OW 88
51130: GO 51154
// if True_Americans > 1 then
51132: LD_EXP 70
51136: PUSH
51137: LD_INT 1
51139: GREATER
51140: IFFALSE 51154
// Say ( JMM , DAb-JMM-1b ) ;
51142: LD_EXP 1
51146: PPUSH
51147: LD_STRING DAb-JMM-1b
51149: PPUSH
51150: CALL_OW 88
// DialogueOFF ;
51154: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
51158: LD_STRING M3a
51160: PPUSH
51161: CALL_OW 337
// Captured_Units_of_Alliance = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
51165: LD_ADDR_EXP 99
51169: PUSH
51170: LD_INT 22
51172: PUSH
51173: LD_EXP 182
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 21
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 51
51194: PUSH
51195: EMPTY
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: PPUSH
51203: CALL_OW 69
51207: ST_TO_ADDR
// ComMoveXY ( Captured_Units_of_Alliance , 226 , 197 ) ;
51208: LD_EXP 99
51212: PPUSH
51213: LD_INT 226
51215: PPUSH
51216: LD_INT 197
51218: PPUSH
51219: CALL_OW 111
// enable ( Alliance_Captured ) ;
51223: LD_EXP 152
51227: ENABLE_MARKED
// if IsOk ( AllDep ) then
51228: LD_INT 45
51230: PPUSH
51231: CALL_OW 302
51235: IFFALSE 51298
// begin for Un in True_Americans do
51237: LD_ADDR_VAR 0 3
51241: PUSH
51242: LD_EXP 70
51246: PUSH
51247: FOR_IN
51248: IFFALSE 51294
// begin SetSide ( Un , americans ) ;
51250: LD_VAR 0 3
51254: PPUSH
51255: LD_EXP 176
51259: PPUSH
51260: CALL_OW 235
// PlaceHumanInUnit ( Un , AllDep ) ;
51264: LD_VAR 0 3
51268: PPUSH
51269: LD_INT 45
51271: PPUSH
51272: CALL_OW 52
// ComExitBuilding ( Un ) ;
51276: LD_VAR 0 3
51280: PPUSH
51281: CALL_OW 122
// Wait ( 1 ) ;
51285: LD_INT 1
51287: PPUSH
51288: CALL_OW 67
// end ;
51292: GO 51247
51294: POP
51295: POP
// end else
51296: GO 51523
// if IsOk ( AllLabR2 ) then
51298: LD_INT 133
51300: PPUSH
51301: CALL_OW 302
51305: IFFALSE 51368
// begin for Un in True_Americans do
51307: LD_ADDR_VAR 0 3
51311: PUSH
51312: LD_EXP 70
51316: PUSH
51317: FOR_IN
51318: IFFALSE 51364
// begin SetSide ( Un , americans ) ;
51320: LD_VAR 0 3
51324: PPUSH
51325: LD_EXP 176
51329: PPUSH
51330: CALL_OW 235
// PlaceHumanInUnit ( Un , AllLabR2 ) ;
51334: LD_VAR 0 3
51338: PPUSH
51339: LD_INT 133
51341: PPUSH
51342: CALL_OW 52
// ComExitBuilding ( Un ) ;
51346: LD_VAR 0 3
51350: PPUSH
51351: CALL_OW 122
// Wait ( 1 ) ;
51355: LD_INT 1
51357: PPUSH
51358: CALL_OW 67
// end ;
51362: GO 51317
51364: POP
51365: POP
// end else
51366: GO 51523
// if IsOk ( AllLabR1 ) then
51368: LD_INT 39
51370: PPUSH
51371: CALL_OW 302
51375: IFFALSE 51438
// begin for Un in True_Americans do
51377: LD_ADDR_VAR 0 3
51381: PUSH
51382: LD_EXP 70
51386: PUSH
51387: FOR_IN
51388: IFFALSE 51434
// begin SetSide ( Un , americans ) ;
51390: LD_VAR 0 3
51394: PPUSH
51395: LD_EXP 176
51399: PPUSH
51400: CALL_OW 235
// PlaceHumanInUnit ( Un , AllLabR1 ) ;
51404: LD_VAR 0 3
51408: PPUSH
51409: LD_INT 39
51411: PPUSH
51412: CALL_OW 52
// ComExitBuilding ( Un ) ;
51416: LD_VAR 0 3
51420: PPUSH
51421: CALL_OW 122
// Wait ( 1 ) ;
51425: LD_INT 1
51427: PPUSH
51428: CALL_OW 67
// end ;
51432: GO 51387
51434: POP
51435: POP
// end else
51436: GO 51523
// begin for Un in True_Americans do
51438: LD_ADDR_VAR 0 3
51442: PUSH
51443: LD_EXP 70
51447: PUSH
51448: FOR_IN
51449: IFFALSE 51504
// begin SetSide ( Un , americans ) ;
51451: LD_VAR 0 3
51455: PPUSH
51456: LD_EXP 176
51460: PPUSH
51461: CALL_OW 235
// All_americans = All_americans ^ Un ;
51465: LD_ADDR_EXP 61
51469: PUSH
51470: LD_EXP 61
51474: PUSH
51475: LD_VAR 0 3
51479: ADD
51480: ST_TO_ADDR
// PlaceUnitXYR ( Un , 250 , 195 , 3 , false ) ;
51481: LD_VAR 0 3
51485: PPUSH
51486: LD_INT 250
51488: PPUSH
51489: LD_INT 195
51491: PPUSH
51492: LD_INT 3
51494: PPUSH
51495: LD_INT 0
51497: PPUSH
51498: CALL_OW 50
// end ;
51502: GO 51448
51504: POP
51505: POP
// All_americans = All_americans diff [ 0 ] ;
51506: LD_ADDR_EXP 61
51510: PUSH
51511: LD_EXP 61
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: DIFF
51522: ST_TO_ADDR
// end ; end ; end ; end ;
51523: LD_VAR 0 1
51527: RET
// function SelectExplorer ; var R , Un ; begin
51528: LD_INT 0
51530: PPUSH
51531: PPUSH
51532: PPUSH
// R = 0 ;
51533: LD_ADDR_VAR 0 2
51537: PUSH
51538: LD_INT 0
51540: ST_TO_ADDR
// for Un in Alliance_am_soldiers ^ Alliance_am_scientists do
51541: LD_ADDR_VAR 0 3
51545: PUSH
51546: LD_EXP 95
51550: PUSH
51551: LD_EXP 97
51555: ADD
51556: PUSH
51557: FOR_IN
51558: IFFALSE 51706
// if IsOk ( Un ) then
51560: LD_VAR 0 3
51564: PPUSH
51565: CALL_OW 302
51569: IFFALSE 51704
// begin if Un in Alliance_am_soldiers then
51571: LD_VAR 0 3
51575: PUSH
51576: LD_EXP 95
51580: IN
51581: IFFALSE 51601
// Alliance_am_soldiers = Alliance_am_soldiers diff Un else
51583: LD_ADDR_EXP 95
51587: PUSH
51588: LD_EXP 95
51592: PUSH
51593: LD_VAR 0 3
51597: DIFF
51598: ST_TO_ADDR
51599: GO 51617
// Alliance_am_scientists = Alliance_am_scientists diff Un ;
51601: LD_ADDR_EXP 97
51605: PUSH
51606: LD_EXP 97
51610: PUSH
51611: LD_VAR 0 3
51615: DIFF
51616: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
51617: LD_VAR 0 3
51621: PPUSH
51622: CALL_OW 257
51626: PUSH
51627: LD_INT 1
51629: NONEQUAL
51630: IFFALSE 51678
// begin ComEnterUnit ( Un , AllBarrA ) ;
51632: LD_VAR 0 3
51636: PPUSH
51637: LD_INT 41
51639: PPUSH
51640: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
51644: LD_VAR 0 3
51648: PPUSH
51649: LD_INT 1
51651: PPUSH
51652: CALL_OW 183
// AddComExitBuilding ( Un ) ;
51656: LD_VAR 0 3
51660: PPUSH
51661: CALL_OW 182
// WaitTask ( Un , 0.5 ) ;
51665: LD_VAR 0 3
51669: PPUSH
51670: LD_REAL  5.00000000000000E-0001
51673: PPUSH
51674: CALL 17888 0 2
// end ; SetSide ( Un , Explorers_Side ) ;
51678: LD_VAR 0 3
51682: PPUSH
51683: LD_EXP 183
51687: PPUSH
51688: CALL_OW 235
// R = Un ;
51692: LD_ADDR_VAR 0 2
51696: PUSH
51697: LD_VAR 0 3
51701: ST_TO_ADDR
// break ;
51702: GO 51706
// end ;
51704: GO 51557
51706: POP
51707: POP
// Result = R ;
51708: LD_ADDR_VAR 0 1
51712: PUSH
51713: LD_VAR 0 2
51717: ST_TO_ADDR
// end ;
51718: LD_VAR 0 1
51722: RET
// function SelectExplorers ; begin
51723: LD_INT 0
51725: PPUSH
// if not ( IsLive ( Explorer1 ) ) then
51726: LD_EXP 100
51730: PPUSH
51731: CALL_OW 300
51735: NOT
51736: IFFALSE 51748
// Explorer1 = SelectExplorer ;
51738: LD_ADDR_EXP 100
51742: PUSH
51743: CALL 51528 0 0
51747: ST_TO_ADDR
// if not ( IsLive ( Explorer2 ) ) then
51748: LD_EXP 101
51752: PPUSH
51753: CALL_OW 300
51757: NOT
51758: IFFALSE 51770
// Explorer2 = SelectExplorer ;
51760: LD_ADDR_EXP 101
51764: PUSH
51765: CALL 51528 0 0
51769: ST_TO_ADDR
// end ;
51770: LD_VAR 0 1
51774: RET
// function CaptureDialogue ( Captured_american ) ; var Join ; begin
51775: LD_INT 0
51777: PPUSH
51778: PPUSH
// Join = 0 ;
51779: LD_ADDR_VAR 0 3
51783: PUSH
51784: LD_INT 0
51786: ST_TO_ADDR
// DialogueON ;
51787: CALL_OW 6
// case Captured_american of JMM :
51791: LD_VAR 0 1
51795: PUSH
51796: LD_EXP 1
51800: DOUBLE
51801: EQUAL
51802: IFTRUE 51806
51804: GO 51821
51806: POP
// ForceSay ( JMM , DA1-JMM-1 ) ; Joan :
51807: LD_EXP 1
51811: PPUSH
51812: LD_STRING DA1-JMM-1
51814: PPUSH
51815: CALL_OW 91
51819: GO 52238
51821: LD_EXP 12
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 51846
51831: POP
// ForceSay ( Joan , DA1-Joan-1 ) ; Lisa :
51832: LD_EXP 12
51836: PPUSH
51837: LD_STRING DA1-Joan-1
51839: PPUSH
51840: CALL_OW 91
51844: GO 52238
51846: LD_EXP 5
51850: DOUBLE
51851: EQUAL
51852: IFTRUE 51856
51854: GO 51871
51856: POP
// ForceSay ( Lisa , DA1-Lisa-1 ) ; Donaldson :
51857: LD_EXP 5
51861: PPUSH
51862: LD_STRING DA1-Lisa-1
51864: PPUSH
51865: CALL_OW 91
51869: GO 52238
51871: LD_EXP 8
51875: DOUBLE
51876: EQUAL
51877: IFTRUE 51881
51879: GO 51896
51881: POP
// ForceSay ( Donaldson , DA1-Don-1 ) ; Cornell :
51882: LD_EXP 8
51886: PPUSH
51887: LD_STRING DA1-Don-1
51889: PPUSH
51890: CALL_OW 91
51894: GO 52238
51896: LD_EXP 10
51900: DOUBLE
51901: EQUAL
51902: IFTRUE 51906
51904: GO 51921
51906: POP
// ForceSay ( Cornell , DA1-Corn-1 ) ; Denis :
51907: LD_EXP 10
51911: PPUSH
51912: LD_STRING DA1-Corn-1
51914: PPUSH
51915: CALL_OW 91
51919: GO 52238
51921: LD_EXP 11
51925: DOUBLE
51926: EQUAL
51927: IFTRUE 51931
51929: GO 51946
51931: POP
// ForceSay ( Denis , DA1-Den-1 ) ; Bobby :
51932: LD_EXP 11
51936: PPUSH
51937: LD_STRING DA1-Den-1
51939: PPUSH
51940: CALL_OW 91
51944: GO 52238
51946: LD_EXP 3
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51956
51954: GO 51971
51956: POP
// ForceSay ( Bobby , DA1-Bobby-1 ) ; Gladstone :
51957: LD_EXP 3
51961: PPUSH
51962: LD_STRING DA1-Bobby-1
51964: PPUSH
51965: CALL_OW 91
51969: GO 52238
51971: LD_EXP 9
51975: DOUBLE
51976: EQUAL
51977: IFTRUE 51981
51979: GO 51996
51981: POP
// ForceSay ( Gladstone , DA1-Glad-1 ) ; Cyrus :
51982: LD_EXP 9
51986: PPUSH
51987: LD_STRING DA1-Glad-1
51989: PPUSH
51990: CALL_OW 91
51994: GO 52238
51996: LD_EXP 4
52000: DOUBLE
52001: EQUAL
52002: IFTRUE 52006
52004: GO 52021
52006: POP
// ForceSay ( Cyrus , DA1-Cyrus-1 ) ; Stevens :
52007: LD_EXP 4
52011: PPUSH
52012: LD_STRING DA1-Cyrus-1
52014: PPUSH
52015: CALL_OW 91
52019: GO 52238
52021: LD_EXP 17
52025: DOUBLE
52026: EQUAL
52027: IFTRUE 52031
52029: GO 52046
52031: POP
// ForceSay ( Stevens , DA1-Huck-1 ) ; Brown :
52032: LD_EXP 17
52036: PPUSH
52037: LD_STRING DA1-Huck-1
52039: PPUSH
52040: CALL_OW 91
52044: GO 52238
52046: LD_EXP 7
52050: DOUBLE
52051: EQUAL
52052: IFTRUE 52056
52054: GO 52071
52056: POP
// ForceSay ( Brown , DA1-Brown-1 ) ; Gary :
52057: LD_EXP 7
52061: PPUSH
52062: LD_STRING DA1-Brown-1
52064: PPUSH
52065: CALL_OW 91
52069: GO 52238
52071: LD_EXP 15
52075: DOUBLE
52076: EQUAL
52077: IFTRUE 52081
52079: GO 52096
52081: POP
// ForceSay ( Gary , DA1-Gary-1 ) ; Coonie :
52082: LD_EXP 15
52086: PPUSH
52087: LD_STRING DA1-Gary-1
52089: PPUSH
52090: CALL_OW 91
52094: GO 52238
52096: LD_EXP 18
52100: DOUBLE
52101: EQUAL
52102: IFTRUE 52106
52104: GO 52121
52106: POP
// ForceSay ( Coonie , DA1-Con-1 ) ; Kurt :
52107: LD_EXP 18
52111: PPUSH
52112: LD_STRING DA1-Con-1
52114: PPUSH
52115: CALL_OW 91
52119: GO 52238
52121: LD_EXP 13
52125: DOUBLE
52126: EQUAL
52127: IFTRUE 52131
52129: GO 52146
52131: POP
// ForceSay ( Kurt , DA1-Kurt-1 ) ; Yamoko :
52132: LD_EXP 13
52136: PPUSH
52137: LD_STRING DA1-Kurt-1
52139: PPUSH
52140: CALL_OW 91
52144: GO 52238
52146: LD_EXP 14
52150: DOUBLE
52151: EQUAL
52152: IFTRUE 52156
52154: GO 52171
52156: POP
// ForceSay ( Yamoko , DA1-Yam-1 ) ; Frank :
52157: LD_EXP 14
52161: PPUSH
52162: LD_STRING DA1-Yam-1
52164: PPUSH
52165: CALL_OW 91
52169: GO 52238
52171: LD_EXP 6
52175: DOUBLE
52176: EQUAL
52177: IFTRUE 52181
52179: GO 52196
52181: POP
// ForceSay ( Frank , DA1-Frank-1 ) ; else
52182: LD_EXP 6
52186: PPUSH
52187: LD_STRING DA1-Frank-1
52189: PPUSH
52190: CALL_OW 91
52194: GO 52238
52196: POP
// begin if GetSex ( Captured_american ) = sex_male then
52197: LD_VAR 0 1
52201: PPUSH
52202: CALL_OW 258
52206: PUSH
52207: LD_INT 1
52209: EQUAL
52210: IFFALSE 52226
// ForceSay ( Captured_american , DA1-Sol1-1 ) else
52212: LD_VAR 0 1
52216: PPUSH
52217: LD_STRING DA1-Sol1-1
52219: PPUSH
52220: CALL_OW 91
52224: GO 52238
// ForceSay ( Captured_american , DA1-FSol1-1 ) ;
52226: LD_VAR 0 1
52230: PPUSH
52231: LD_STRING DA1-FSol1-1
52233: PPUSH
52234: CALL_OW 91
// end ; end ; Say ( Roth , DA-Roth-1 ) ;
52238: LD_EXP 20
52242: PPUSH
52243: LD_STRING DA-Roth-1
52245: PPUSH
52246: CALL_OW 88
// if Number_of_captured_americans = 1 then
52250: LD_EXP 211
52254: PUSH
52255: LD_INT 1
52257: EQUAL
52258: IFFALSE 52286
// begin Say ( Simms , DA-Sim-1 ) ;
52260: LD_EXP 16
52264: PPUSH
52265: LD_STRING DA-Sim-1
52267: PPUSH
52268: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
52272: LD_EXP 20
52276: PPUSH
52277: LD_STRING DA-Roth-2
52279: PPUSH
52280: CALL_OW 88
// end else
52284: GO 52298
// Say ( Simms , DA-Sim-2 ) ;
52286: LD_EXP 16
52290: PPUSH
52291: LD_STRING DA-Sim-2
52293: PPUSH
52294: CALL_OW 88
// case Captured_american of JMM :
52298: LD_VAR 0 1
52302: PUSH
52303: LD_EXP 1
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52313
52311: GO 52328
52313: POP
// ForceSay ( JMM , DA1-JMM-1a ) ; Joan :
52314: LD_EXP 1
52318: PPUSH
52319: LD_STRING DA1-JMM-1a
52321: PPUSH
52322: CALL_OW 91
52326: GO 52810
52328: LD_EXP 12
52332: DOUBLE
52333: EQUAL
52334: IFTRUE 52338
52336: GO 52353
52338: POP
// ForceSay ( Joan , DA1-Joan-1a ) ; Lisa :
52339: LD_EXP 12
52343: PPUSH
52344: LD_STRING DA1-Joan-1a
52346: PPUSH
52347: CALL_OW 91
52351: GO 52810
52353: LD_EXP 5
52357: DOUBLE
52358: EQUAL
52359: IFTRUE 52363
52361: GO 52378
52363: POP
// ForceSay ( Lisa , DA1-Lisa-1a ) ; Donaldson :
52364: LD_EXP 5
52368: PPUSH
52369: LD_STRING DA1-Lisa-1a
52371: PPUSH
52372: CALL_OW 91
52376: GO 52810
52378: LD_EXP 8
52382: DOUBLE
52383: EQUAL
52384: IFTRUE 52388
52386: GO 52403
52388: POP
// ForceSay ( Donaldson , DA1-Don-1a ) ; Cornell :
52389: LD_EXP 8
52393: PPUSH
52394: LD_STRING DA1-Don-1a
52396: PPUSH
52397: CALL_OW 91
52401: GO 52810
52403: LD_EXP 10
52407: DOUBLE
52408: EQUAL
52409: IFTRUE 52413
52411: GO 52428
52413: POP
// ForceSay ( Cornell , DA1-Corn-1a ) ; Denis :
52414: LD_EXP 10
52418: PPUSH
52419: LD_STRING DA1-Corn-1a
52421: PPUSH
52422: CALL_OW 91
52426: GO 52810
52428: LD_EXP 11
52432: DOUBLE
52433: EQUAL
52434: IFTRUE 52438
52436: GO 52453
52438: POP
// ForceSay ( Denis , DA1-Den-1a ) ; Bobby :
52439: LD_EXP 11
52443: PPUSH
52444: LD_STRING DA1-Den-1a
52446: PPUSH
52447: CALL_OW 91
52451: GO 52810
52453: LD_EXP 3
52457: DOUBLE
52458: EQUAL
52459: IFTRUE 52463
52461: GO 52478
52463: POP
// ForceSay ( Bobby , DA1-Bobby-1a ) ; Gladstone :
52464: LD_EXP 3
52468: PPUSH
52469: LD_STRING DA1-Bobby-1a
52471: PPUSH
52472: CALL_OW 91
52476: GO 52810
52478: LD_EXP 9
52482: DOUBLE
52483: EQUAL
52484: IFTRUE 52488
52486: GO 52503
52488: POP
// ForceSay ( Gladstone , DA1-Glad-1a ) ; Cyrus :
52489: LD_EXP 9
52493: PPUSH
52494: LD_STRING DA1-Glad-1a
52496: PPUSH
52497: CALL_OW 91
52501: GO 52810
52503: LD_EXP 4
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52513
52511: GO 52528
52513: POP
// ForceSay ( Cyrus , DA1-Cyrus-1a ) ; Stevens :
52514: LD_EXP 4
52518: PPUSH
52519: LD_STRING DA1-Cyrus-1a
52521: PPUSH
52522: CALL_OW 91
52526: GO 52810
52528: LD_EXP 17
52532: DOUBLE
52533: EQUAL
52534: IFTRUE 52538
52536: GO 52553
52538: POP
// ForceSay ( Stevens , DA1-Huck-1a ) ; Brown :
52539: LD_EXP 17
52543: PPUSH
52544: LD_STRING DA1-Huck-1a
52546: PPUSH
52547: CALL_OW 91
52551: GO 52810
52553: LD_EXP 7
52557: DOUBLE
52558: EQUAL
52559: IFTRUE 52563
52561: GO 52578
52563: POP
// ForceSay ( Brown , DA1-Brown-1a ) ; Gary :
52564: LD_EXP 7
52568: PPUSH
52569: LD_STRING DA1-Brown-1a
52571: PPUSH
52572: CALL_OW 91
52576: GO 52810
52578: LD_EXP 15
52582: DOUBLE
52583: EQUAL
52584: IFTRUE 52588
52586: GO 52603
52588: POP
// ForceSay ( Gary , DA1-Gary-1a ) ; Coonie :
52589: LD_EXP 15
52593: PPUSH
52594: LD_STRING DA1-Gary-1a
52596: PPUSH
52597: CALL_OW 91
52601: GO 52810
52603: LD_EXP 18
52607: DOUBLE
52608: EQUAL
52609: IFTRUE 52613
52611: GO 52628
52613: POP
// ForceSay ( Coonie , DA1-Con-1a ) ; Kurt :
52614: LD_EXP 18
52618: PPUSH
52619: LD_STRING DA1-Con-1a
52621: PPUSH
52622: CALL_OW 91
52626: GO 52810
52628: LD_EXP 13
52632: DOUBLE
52633: EQUAL
52634: IFTRUE 52638
52636: GO 52653
52638: POP
// ForceSay ( Kurt , DA1-Kurt-1a ) ; Yamoko :
52639: LD_EXP 13
52643: PPUSH
52644: LD_STRING DA1-Kurt-1a
52646: PPUSH
52647: CALL_OW 91
52651: GO 52810
52653: LD_EXP 14
52657: DOUBLE
52658: EQUAL
52659: IFTRUE 52663
52661: GO 52678
52663: POP
// ForceSay ( Yamoko , DA1-Yam-1a ) ; Frank :
52664: LD_EXP 14
52668: PPUSH
52669: LD_STRING DA1-Yam-1a
52671: PPUSH
52672: CALL_OW 91
52676: GO 52810
52678: LD_EXP 6
52682: DOUBLE
52683: EQUAL
52684: IFTRUE 52688
52686: GO 52703
52688: POP
// ForceSay ( Frank , DA1-Frank-1a ) ; else
52689: LD_EXP 6
52693: PPUSH
52694: LD_STRING DA1-Frank-1a
52696: PPUSH
52697: CALL_OW 91
52701: GO 52810
52703: POP
// begin Join = Rand ( 0 , 1 ) ;
52704: LD_ADDR_VAR 0 3
52708: PUSH
52709: LD_INT 0
52711: PPUSH
52712: LD_INT 1
52714: PPUSH
52715: CALL_OW 12
52719: ST_TO_ADDR
// if Join then
52720: LD_VAR 0 3
52724: IFFALSE 52769
// begin if GetSex ( Captured_american ) = sex_male then
52726: LD_VAR 0 1
52730: PPUSH
52731: CALL_OW 258
52735: PUSH
52736: LD_INT 1
52738: EQUAL
52739: IFFALSE 52755
// ForceSay ( Captured_american , DA1-Sol1-1b ) else
52741: LD_VAR 0 1
52745: PPUSH
52746: LD_STRING DA1-Sol1-1b
52748: PPUSH
52749: CALL_OW 91
52753: GO 52767
// ForceSay ( Captured_american , DA1-FSol1-1b ) ;
52755: LD_VAR 0 1
52759: PPUSH
52760: LD_STRING DA1-FSol1-1b
52762: PPUSH
52763: CALL_OW 91
// end else
52767: GO 52810
// begin if GetSex ( Captured_american ) = sex_male then
52769: LD_VAR 0 1
52773: PPUSH
52774: CALL_OW 258
52778: PUSH
52779: LD_INT 1
52781: EQUAL
52782: IFFALSE 52798
// ForceSay ( Captured_american , DA1-Sol1-1a ) else
52784: LD_VAR 0 1
52788: PPUSH
52789: LD_STRING DA1-Sol1-1a
52791: PPUSH
52792: CALL_OW 91
52796: GO 52810
// ForceSay ( Captured_american , DA1-FSol1-1a ) ;
52798: LD_VAR 0 1
52802: PPUSH
52803: LD_STRING DA1-FSol1-1a
52805: PPUSH
52806: CALL_OW 91
// end ; end ; end ; if ( Captured_american in [ Donaldson , Denis , Bobby , Stevens , Brown , Yamoko ] ) or Join then
52810: LD_VAR 0 1
52814: PUSH
52815: LD_EXP 8
52819: PUSH
52820: LD_EXP 11
52824: PUSH
52825: LD_EXP 3
52829: PUSH
52830: LD_EXP 17
52834: PUSH
52835: LD_EXP 7
52839: PUSH
52840: LD_EXP 14
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: IN
52853: PUSH
52854: LD_VAR 0 3
52858: OR
52859: IFFALSE 52921
// begin Say ( Roth , DA-Roth-3 ) ;
52861: LD_EXP 20
52865: PPUSH
52866: LD_STRING DA-Roth-3
52868: PPUSH
52869: CALL_OW 88
// SetSide ( Captured_american , alliance ) ;
52873: LD_VAR 0 1
52877: PPUSH
52878: LD_EXP 182
52882: PPUSH
52883: CALL_OW 235
// Alliance_am_soldiers = Alliance_am_soldiers ^ Captured_american ;
52887: LD_ADDR_EXP 95
52891: PUSH
52892: LD_EXP 95
52896: PUSH
52897: LD_VAR 0 1
52901: ADD
52902: ST_TO_ADDR
// All_americans = All_americans diff Captured_american ;
52903: LD_ADDR_EXP 61
52907: PUSH
52908: LD_EXP 61
52912: PUSH
52913: LD_VAR 0 1
52917: DIFF
52918: ST_TO_ADDR
// end else
52919: GO 52958
// begin Say ( Roth , DA-Roth-3a ) ;
52921: LD_EXP 20
52925: PPUSH
52926: LD_STRING DA-Roth-3a
52928: PPUSH
52929: CALL_OW 88
// RemoveUnit ( Captured_american ) ;
52933: LD_VAR 0 1
52937: PPUSH
52938: CALL_OW 64
// True_americans = True_americans ^ Captured_american ;
52942: LD_ADDR_EXP 70
52946: PUSH
52947: LD_EXP 70
52951: PUSH
52952: LD_VAR 0 1
52956: ADD
52957: ST_TO_ADDR
// end ; SetLives ( Captured_american , 1000 ) ;
52958: LD_VAR 0 1
52962: PPUSH
52963: LD_INT 1000
52965: PPUSH
52966: CALL_OW 234
// if ( Captured_american = JMM ) then
52970: LD_VAR 0 1
52974: PUSH
52975: LD_EXP 1
52979: EQUAL
52980: IFFALSE 52987
// enable ( JMM_Captured ) ;
52982: LD_EXP 160
52986: ENABLE_MARKED
// DialogueOFF ;
52987: CALL_OW 7
// end ;
52991: LD_VAR 0 2
52995: RET
// function HealExplorers ; begin
52996: LD_INT 0
52998: PPUSH
// if ( IsLive ( Explorer1 ) and not ( See ( americans , Explorer1 ) ) ) then
52999: LD_EXP 100
53003: PPUSH
53004: CALL_OW 300
53008: PUSH
53009: LD_EXP 176
53013: PPUSH
53014: LD_EXP 100
53018: PPUSH
53019: CALL_OW 292
53023: NOT
53024: AND
53025: IFFALSE 53039
// SetLives ( Explorer1 , 1000 ) ;
53027: LD_EXP 100
53031: PPUSH
53032: LD_INT 1000
53034: PPUSH
53035: CALL_OW 234
// if ( IsLive ( Explorer2 ) and not ( See ( americans , Explorer2 ) ) ) then
53039: LD_EXP 101
53043: PPUSH
53044: CALL_OW 300
53048: PUSH
53049: LD_EXP 176
53053: PPUSH
53054: LD_EXP 101
53058: PPUSH
53059: CALL_OW 292
53063: NOT
53064: AND
53065: IFFALSE 53079
// SetLives ( Explorer2 , 1000 ) ;
53067: LD_EXP 101
53071: PPUSH
53072: LD_INT 1000
53074: PPUSH
53075: CALL_OW 234
// end ;
53079: LD_VAR 0 1
53083: RET
// function SohwCaptureToPlayer ( Captured_american , Explorer1 , Explorer2 ) ; var AmToAr , ArToAm , Un , Units_to_stop ; begin
53084: LD_INT 0
53086: PPUSH
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
// AmToAr = GetAttitude ( americans , arabians ) ;
53091: LD_ADDR_VAR 0 5
53095: PUSH
53096: LD_EXP 176
53100: PPUSH
53101: LD_EXP 180
53105: PPUSH
53106: CALL_OW 81
53110: ST_TO_ADDR
// ArToAm = GetAttitude ( arabians , americans ) ;
53111: LD_ADDR_VAR 0 6
53115: PUSH
53116: LD_EXP 180
53120: PPUSH
53121: LD_EXP 176
53125: PPUSH
53126: CALL_OW 81
53130: ST_TO_ADDR
// SetAttitude ( americans , russians , att_friend , true ) ;
53131: LD_EXP 176
53135: PPUSH
53136: LD_EXP 178
53140: PPUSH
53141: LD_INT 1
53143: PPUSH
53144: LD_INT 1
53146: PPUSH
53147: CALL_OW 80
// SetAttitude ( americans , russians1 , att_friend , true ) ;
53151: LD_EXP 176
53155: PPUSH
53156: LD_EXP 179
53160: PPUSH
53161: LD_INT 1
53163: PPUSH
53164: LD_INT 1
53166: PPUSH
53167: CALL_OW 80
// SetAttitude ( americans , arabians , att_friend , true ) ;
53171: LD_EXP 176
53175: PPUSH
53176: LD_EXP 180
53180: PPUSH
53181: LD_INT 1
53183: PPUSH
53184: LD_INT 1
53186: PPUSH
53187: CALL_OW 80
// Units_to_stop = FilterAllUnits ( [ [ f_or , [ f_side , russians ] , [ f_side , russians1 ] , [ f_side , arabians ] , [ f_side , americans ] ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53191: LD_ADDR_VAR 0 8
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: LD_INT 22
53201: PUSH
53202: LD_EXP 178
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 22
53213: PUSH
53214: LD_EXP 179
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 22
53225: PUSH
53226: LD_EXP 180
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 22
53237: PUSH
53238: LD_EXP 176
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 21
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 21
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PPUSH
53286: CALL_OW 69
53290: ST_TO_ADDR
// for Un in Units_to_stop do
53291: LD_ADDR_VAR 0 7
53295: PUSH
53296: LD_VAR 0 8
53300: PUSH
53301: FOR_IN
53302: IFFALSE 53330
// begin if Attacks ( Un ) <> 0 then
53304: LD_VAR 0 7
53308: PPUSH
53309: CALL_OW 320
53313: PUSH
53314: LD_INT 0
53316: NONEQUAL
53317: IFFALSE 53328
// ComStop ( Un ) ;
53319: LD_VAR 0 7
53323: PPUSH
53324: CALL_OW 141
// end ;
53328: GO 53301
53330: POP
53331: POP
// while IsInUnit ( Captured_american ) <> 0 do
53332: LD_VAR 0 1
53336: PPUSH
53337: CALL_OW 310
53341: PUSH
53342: LD_INT 0
53344: NONEQUAL
53345: IFFALSE 53370
// begin ComExitVehicle ( IsInUnit ( Captured_american ) ) ;
53347: LD_VAR 0 1
53351: PPUSH
53352: CALL_OW 310
53356: PPUSH
53357: CALL_OW 121
// Wait ( 1 ) ;
53361: LD_INT 1
53363: PPUSH
53364: CALL_OW 67
// end ;
53368: GO 53332
// SetSide ( Captured_american , americans1 ) ;
53370: LD_VAR 0 1
53374: PPUSH
53375: LD_EXP 177
53379: PPUSH
53380: CALL_OW 235
// ComStop ( Captured_american ) ;
53384: LD_VAR 0 1
53388: PPUSH
53389: CALL_OW 141
// DoNotAttack ( alliance , Captured_american ) ;
53393: LD_EXP 182
53397: PPUSH
53398: LD_VAR 0 1
53402: PPUSH
53403: CALL_OW 471
// DoNotAttack ( Explorers_side , Captured_american ) ;
53407: LD_EXP 183
53411: PPUSH
53412: LD_VAR 0 1
53416: PPUSH
53417: CALL_OW 471
// if ( Explorer1 <> 0 ) and ( Explorer2 <> 0 ) then
53421: LD_VAR 0 2
53425: PUSH
53426: LD_INT 0
53428: NONEQUAL
53429: PUSH
53430: LD_VAR 0 3
53434: PUSH
53435: LD_INT 0
53437: NONEQUAL
53438: AND
53439: IFFALSE 53467
// CenterNowOnUnits ( [ Explorer1 , Explorer2 , Captured_american ] ) else
53441: LD_VAR 0 2
53445: PUSH
53446: LD_VAR 0 3
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: PPUSH
53461: CALL_OW 87
53465: GO 53476
// CenterNowOnUnits ( Captured_american ) ;
53467: LD_VAR 0 1
53471: PPUSH
53472: CALL_OW 87
// ingame_video = true ;
53476: LD_ADDR_OWVAR 52
53480: PUSH
53481: LD_INT 1
53483: ST_TO_ADDR
// if Explorer1 <> 0 then
53484: LD_VAR 0 2
53488: PUSH
53489: LD_INT 0
53491: NONEQUAL
53492: IFFALSE 53515
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
53494: LD_VAR 0 2
53498: PPUSH
53499: LD_INT 245
53501: PPUSH
53502: LD_INT 186
53504: PPUSH
53505: LD_INT 3
53507: PPUSH
53508: LD_INT 1
53510: PPUSH
53511: CALL_OW 483
// if Explorer2 <> 0 then
53515: LD_VAR 0 3
53519: PUSH
53520: LD_INT 0
53522: NONEQUAL
53523: IFFALSE 53546
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
53525: LD_VAR 0 3
53529: PPUSH
53530: LD_INT 245
53532: PPUSH
53533: LD_INT 186
53535: PPUSH
53536: LD_INT 3
53538: PPUSH
53539: LD_INT 1
53541: PPUSH
53542: CALL_OW 483
// TeleportUnit ( Captured_american , 245 , 186 , 3 , true ) ;
53546: LD_VAR 0 1
53550: PPUSH
53551: LD_INT 245
53553: PPUSH
53554: LD_INT 186
53556: PPUSH
53557: LD_INT 3
53559: PPUSH
53560: LD_INT 1
53562: PPUSH
53563: CALL_OW 483
// Wait ( 0 0$3 ) ;
53567: LD_INT 105
53569: PPUSH
53570: CALL_OW 67
// CenterNowOnUnits ( Captured_american ) ;
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 87
// Wait ( 0 0$1 ) ;
53583: LD_INT 35
53585: PPUSH
53586: CALL_OW 67
// ingame_video = false ;
53590: LD_ADDR_OWVAR 52
53594: PUSH
53595: LD_INT 0
53597: ST_TO_ADDR
// CaptureDialogue ( Captured_american ) ;
53598: LD_VAR 0 1
53602: PPUSH
53603: CALL 51775 0 1
// HealExplorers ;
53607: CALL 52996 0 0
// SetAttitude ( americans , russians , att_enemy , true ) ;
53611: LD_EXP 176
53615: PPUSH
53616: LD_EXP 178
53620: PPUSH
53621: LD_INT 2
53623: PPUSH
53624: LD_INT 1
53626: PPUSH
53627: CALL_OW 80
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
53631: LD_EXP 176
53635: PPUSH
53636: LD_EXP 179
53640: PPUSH
53641: LD_INT 2
53643: PPUSH
53644: LD_INT 1
53646: PPUSH
53647: CALL_OW 80
// SetAttitude ( americans , arabians , AmToAr , false ) ;
53651: LD_EXP 176
53655: PPUSH
53656: LD_EXP 180
53660: PPUSH
53661: LD_VAR 0 5
53665: PPUSH
53666: LD_INT 0
53668: PPUSH
53669: CALL_OW 80
// SetAttitude ( arabians , americans , ArToAm , false ) ;
53673: LD_EXP 180
53677: PPUSH
53678: LD_EXP 176
53682: PPUSH
53683: LD_VAR 0 6
53687: PPUSH
53688: LD_INT 0
53690: PPUSH
53691: CALL_OW 80
// NormalAttack ( alliance , Captured_american ) ;
53695: LD_EXP 182
53699: PPUSH
53700: LD_VAR 0 1
53704: PPUSH
53705: CALL_OW 472
// NormalAttack ( Explorers_side , Captured_american ) ;
53709: LD_EXP 183
53713: PPUSH
53714: LD_VAR 0 1
53718: PPUSH
53719: CALL_OW 472
// if Captured_american <> JMM then
53723: LD_VAR 0 1
53727: PUSH
53728: LD_EXP 1
53732: NONEQUAL
53733: IFFALSE 53798
// begin DialogueOn ;
53735: CALL_OW 6
// Wait ( 0 0$2 ) ;
53739: LD_INT 70
53741: PPUSH
53742: CALL_OW 67
// Say ( JMM , DAa-JMM-1 ) ;
53746: LD_EXP 1
53750: PPUSH
53751: LD_STRING DAa-JMM-1
53753: PPUSH
53754: CALL_OW 88
// if tick > Alliance_broadcast then
53758: LD_OWVAR 1
53762: PUSH
53763: LD_EXP 202
53767: GREATER
53768: IFFALSE 53782
// Say ( JMM , DAa-JMM-1a ) ;
53770: LD_EXP 1
53774: PPUSH
53775: LD_STRING DAa-JMM-1a
53777: PPUSH
53778: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
53782: LD_EXP 1
53786: PPUSH
53787: LD_STRING DAa-JMM-1b
53789: PPUSH
53790: CALL_OW 88
// DialogueOff ;
53794: CALL_OW 7
// end ; end ;
53798: LD_VAR 0 4
53802: RET
// function CapturewWithoutShow ( Captured_american , Explorer1 , Explorer2 ) ; begin
53803: LD_INT 0
53805: PPUSH
// while IsInUnit ( Captured_american ) <> 0 do
53806: LD_VAR 0 1
53810: PPUSH
53811: CALL_OW 310
53815: PUSH
53816: LD_INT 0
53818: NONEQUAL
53819: IFFALSE 53844
// begin ComExitVehicle ( IsInUnit ( Captured_american ) ) ;
53821: LD_VAR 0 1
53825: PPUSH
53826: CALL_OW 310
53830: PPUSH
53831: CALL_OW 121
// Wait ( 1 ) ;
53835: LD_INT 1
53837: PPUSH
53838: CALL_OW 67
// end ;
53842: GO 53806
// SetSide ( Captured_american , americans1 ) ;
53844: LD_VAR 0 1
53848: PPUSH
53849: LD_EXP 177
53853: PPUSH
53854: CALL_OW 235
// ComStop ( Captured_american ) ;
53858: LD_VAR 0 1
53862: PPUSH
53863: CALL_OW 141
// DoNotAttack ( alliance , Captured_american ) ;
53867: LD_EXP 182
53871: PPUSH
53872: LD_VAR 0 1
53876: PPUSH
53877: CALL_OW 471
// DoNotAttack ( Explorers_side , Captured_american ) ;
53881: LD_EXP 183
53885: PPUSH
53886: LD_VAR 0 1
53890: PPUSH
53891: CALL_OW 471
// if Explorer1 <> 0 then
53895: LD_VAR 0 2
53899: PUSH
53900: LD_INT 0
53902: NONEQUAL
53903: IFFALSE 53926
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
53905: LD_VAR 0 2
53909: PPUSH
53910: LD_INT 245
53912: PPUSH
53913: LD_INT 186
53915: PPUSH
53916: LD_INT 3
53918: PPUSH
53919: LD_INT 1
53921: PPUSH
53922: CALL_OW 483
// if Explorer2 <> 0 then
53926: LD_VAR 0 3
53930: PUSH
53931: LD_INT 0
53933: NONEQUAL
53934: IFFALSE 53957
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
53936: LD_VAR 0 3
53940: PPUSH
53941: LD_INT 245
53943: PPUSH
53944: LD_INT 186
53946: PPUSH
53947: LD_INT 3
53949: PPUSH
53950: LD_INT 1
53952: PPUSH
53953: CALL_OW 483
// TeleportUnit ( Captured_american , 245 , 186 , 3 , true ) ;
53957: LD_VAR 0 1
53961: PPUSH
53962: LD_INT 245
53964: PPUSH
53965: LD_INT 186
53967: PPUSH
53968: LD_INT 3
53970: PPUSH
53971: LD_INT 1
53973: PPUSH
53974: CALL_OW 483
// Wait ( 0 0$3 ) ;
53978: LD_INT 105
53980: PPUSH
53981: CALL_OW 67
// CaptureDialogue ( Captured_american ) ;
53985: LD_VAR 0 1
53989: PPUSH
53990: CALL 51775 0 1
// NormalAttack ( alliance , Captured_american ) ;
53994: LD_EXP 182
53998: PPUSH
53999: LD_VAR 0 1
54003: PPUSH
54004: CALL_OW 472
// NormalAttack ( Explorers_side , Captured_american ) ;
54008: LD_EXP 183
54012: PPUSH
54013: LD_VAR 0 1
54017: PPUSH
54018: CALL_OW 472
// HealExplorers ;
54022: CALL 52996 0 0
// end ;
54026: LD_VAR 0 4
54030: RET
// function SetExplorerWayNumber ; var WayNumber ; begin
54031: LD_INT 0
54033: PPUSH
54034: PPUSH
// if GetAttitude ( russians , Explorers_Side ) = att_enemy then
54035: LD_EXP 178
54039: PPUSH
54040: LD_EXP 183
54044: PPUSH
54045: CALL_OW 81
54049: PUSH
54050: LD_INT 2
54052: EQUAL
54053: IFFALSE 54091
// begin Explorer_Way_Number = Rand ( 1 , 4 ) ;
54055: LD_ADDR_EXP 210
54059: PUSH
54060: LD_INT 1
54062: PPUSH
54063: LD_INT 4
54065: PPUSH
54066: CALL_OW 12
54070: ST_TO_ADDR
// if Explorer_Way_Number > 1 then
54071: LD_EXP 210
54075: PUSH
54076: LD_INT 1
54078: GREATER
54079: IFFALSE 54089
// Explorer_Way_Number = 2 ;
54081: LD_ADDR_EXP 210
54085: PUSH
54086: LD_INT 2
54088: ST_TO_ADDR
// end else
54089: GO 54107
// Explorer_Way_Number = Rand ( 1 , 2 ) ;
54091: LD_ADDR_EXP 210
54095: PUSH
54096: LD_INT 1
54098: PPUSH
54099: LD_INT 2
54101: PPUSH
54102: CALL_OW 12
54106: ST_TO_ADDR
// end ;
54107: LD_VAR 0 1
54111: RET
// every 0 0$0.5 marked 17 do var Americans_to_capture , Captured_american , AmToAr , ArToAm , Units_to_stop , Un , Uns ;
54112: GO 54114
54114: DISABLE
54115: LD_INT 0
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
// begin if not ( Wood_registry ) then
54124: LD_EXP 229
54128: NOT
54129: IFFALSE 55125
// begin Wood_registry = true ;
54131: LD_ADDR_EXP 229
54135: PUSH
54136: LD_INT 1
54138: ST_TO_ADDR
// Americans_to_capture = [ ] ;
54139: LD_ADDR_VAR 0 1
54143: PUSH
54144: EMPTY
54145: ST_TO_ADDR
// Captured_american = 0 ;
54146: LD_ADDR_VAR 0 2
54150: PUSH
54151: LD_INT 0
54153: ST_TO_ADDR
// if IsOk ( AllDep ) then
54154: LD_INT 45
54156: PPUSH
54157: CALL_OW 302
54161: IFFALSE 55114
// begin disable ;
54163: DISABLE
// if IsLive ( Explorer1 ) and IsLive ( Explorer2 ) then
54164: LD_EXP 100
54168: PPUSH
54169: CALL_OW 300
54173: PUSH
54174: LD_EXP 101
54178: PPUSH
54179: CALL_OW 300
54183: AND
54184: IFFALSE 54997
// begin if ( ( GetLives ( Explorer1 ) < 700 ) or ( GetLives ( Explorer2 ) < 700 ) ) then
54186: LD_EXP 100
54190: PPUSH
54191: CALL_OW 256
54195: PUSH
54196: LD_INT 700
54198: LESS
54199: PUSH
54200: LD_EXP 101
54204: PPUSH
54205: CALL_OW 256
54209: PUSH
54210: LD_INT 700
54212: LESS
54213: OR
54214: IFFALSE 54365
// begin if not ( IsInArea ( Explorer1 , Al_Base ) ) then
54216: LD_EXP 100
54220: PPUSH
54221: LD_INT 18
54223: PPUSH
54224: CALL_OW 308
54228: NOT
54229: IFFALSE 54252
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
54231: LD_EXP 100
54235: PPUSH
54236: LD_INT 245
54238: PPUSH
54239: LD_INT 186
54241: PPUSH
54242: LD_INT 3
54244: PPUSH
54245: LD_INT 1
54247: PPUSH
54248: CALL_OW 483
// if not ( IsInArea ( Explorer2 , Al_Base ) ) then
54252: LD_EXP 101
54256: PPUSH
54257: LD_INT 18
54259: PPUSH
54260: CALL_OW 308
54264: NOT
54265: IFFALSE 54288
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
54267: LD_EXP 101
54271: PPUSH
54272: LD_INT 245
54274: PPUSH
54275: LD_INT 186
54277: PPUSH
54278: LD_INT 3
54280: PPUSH
54281: LD_INT 1
54283: PPUSH
54284: CALL_OW 483
// HealExplorers ;
54288: CALL 52996 0 0
// Step_On_The_Way = 1 ;
54292: LD_ADDR_EXP 209
54296: PUSH
54297: LD_INT 1
54299: ST_TO_ADDR
// SetExplorerWayNumber ;
54300: CALL 54031 0 0
// Wait ( 0 0$3 ) ;
54304: LD_INT 105
54306: PPUSH
54307: CALL_OW 67
// for Un in All_americans do
54311: LD_ADDR_VAR 0 6
54315: PUSH
54316: LD_EXP 61
54320: PUSH
54321: FOR_IN
54322: IFFALSE 54361
// if ( Attacks ( Un ) in [ Explorer1 , Explorer2 ] ) then
54324: LD_VAR 0 6
54328: PPUSH
54329: CALL_OW 320
54333: PUSH
54334: LD_EXP 100
54338: PUSH
54339: LD_EXP 101
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: IN
54348: IFFALSE 54359
// ComStop ( Un ) ;
54350: LD_VAR 0 6
54354: PPUSH
54355: CALL_OW 141
54359: GO 54321
54361: POP
54362: POP
// end else
54363: GO 54995
// begin Uns = UnitFilter ( All_americans , [ f_or , [ f_dist , Explorer1 , 15 ] , [ f_dist , Explorer2 , 15 ] ] ) ;
54365: LD_ADDR_VAR 0 7
54369: PUSH
54370: LD_EXP 61
54374: PPUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 91
54380: PUSH
54381: LD_EXP 100
54385: PUSH
54386: LD_INT 15
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 91
54396: PUSH
54397: LD_EXP 101
54401: PUSH
54402: LD_INT 15
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: PPUSH
54415: CALL_OW 72
54419: ST_TO_ADDR
// for Un in Uns do
54420: LD_ADDR_VAR 0 6
54424: PUSH
54425: LD_VAR 0 7
54429: PUSH
54430: FOR_IN
54431: IFFALSE 54451
// Americans_to_capture = Americans_to_capture ^ Un ;
54433: LD_ADDR_VAR 0 1
54437: PUSH
54438: LD_VAR 0 1
54442: PUSH
54443: LD_VAR 0 6
54447: ADD
54448: ST_TO_ADDR
54449: GO 54430
54451: POP
54452: POP
// if Americans_to_capture > 0 then
54453: LD_VAR 0 1
54457: PUSH
54458: LD_INT 0
54460: GREATER
54461: IFFALSE 54724
// begin if ( Americans_to_capture [ 1 ] <> JMM ) or ( Americans_to_capture ^ [ ] = 1 ) then
54463: LD_VAR 0 1
54467: PUSH
54468: LD_INT 1
54470: ARRAY
54471: PUSH
54472: LD_EXP 1
54476: NONEQUAL
54477: PUSH
54478: LD_VAR 0 1
54482: PUSH
54483: EMPTY
54484: ADD
54485: PUSH
54486: LD_INT 1
54488: EQUAL
54489: OR
54490: IFFALSE 54508
// Captured_american = Americans_to_capture [ 1 ] else
54492: LD_ADDR_VAR 0 2
54496: PUSH
54497: LD_VAR 0 1
54501: PUSH
54502: LD_INT 1
54504: ARRAY
54505: ST_TO_ADDR
54506: GO 54535
// if ( Americans_to_capture ^ [ ] ) > 1 then
54508: LD_VAR 0 1
54512: PUSH
54513: EMPTY
54514: ADD
54515: PUSH
54516: LD_INT 1
54518: GREATER
54519: IFFALSE 54535
// Captured_american = Americans_to_capture [ 2 ] ;
54521: LD_ADDR_VAR 0 2
54525: PUSH
54526: LD_VAR 0 1
54530: PUSH
54531: LD_INT 2
54533: ARRAY
54534: ST_TO_ADDR
// if ( Captured_american <> JMM ) or ( Number_of_captured_americans <> 0 ) then
54535: LD_VAR 0 2
54539: PUSH
54540: LD_EXP 1
54544: NONEQUAL
54545: PUSH
54546: LD_EXP 211
54550: PUSH
54551: LD_INT 0
54553: NONEQUAL
54554: OR
54555: IFFALSE 54714
// begin Number_of_captured_americans = Number_of_captured_americans + 1 ;
54557: LD_ADDR_EXP 211
54561: PUSH
54562: LD_EXP 211
54566: PUSH
54567: LD_INT 1
54569: PLUS
54570: ST_TO_ADDR
// if ( Number_of_captured_americans = 1 ) or ( Captured_american = JMM ) then
54571: LD_EXP 211
54575: PUSH
54576: LD_INT 1
54578: EQUAL
54579: PUSH
54580: LD_VAR 0 2
54584: PUSH
54585: LD_EXP 1
54589: EQUAL
54590: OR
54591: IFFALSE 54614
// begin SohwCaptureToPlayer ( Captured_american , Explorer1 , Explorer2 ) ;
54593: LD_VAR 0 2
54597: PPUSH
54598: LD_EXP 100
54602: PPUSH
54603: LD_EXP 101
54607: PPUSH
54608: CALL 53084 0 3
// end else
54612: GO 54633
// begin CapturewWithoutShow ( Captured_american , Explorer1 , Explorer2 ) ;
54614: LD_VAR 0 2
54618: PPUSH
54619: LD_EXP 100
54623: PPUSH
54624: LD_EXP 101
54628: PPUSH
54629: CALL 53803 0 3
// end ; SetExplorerWayNumber ;
54633: CALL 54031 0 0
// Step_On_The_Way = 1 ;
54637: LD_ADDR_EXP 209
54641: PUSH
54642: LD_INT 1
54644: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
54645: LD_INT 35
54647: PPUSH
54648: CALL_OW 67
// until ( not ( IsLive ( Explorer1 ) ) or not ( IsLive ( Explorer2 ) ) or ( GetLives ( Explorer1 ) = 1000 and GetLives ( Explorer2 ) = 1000 ) or Roth_Captured ) ;
54652: LD_EXP 100
54656: PPUSH
54657: CALL_OW 300
54661: NOT
54662: PUSH
54663: LD_EXP 101
54667: PPUSH
54668: CALL_OW 300
54672: NOT
54673: OR
54674: PUSH
54675: LD_EXP 100
54679: PPUSH
54680: CALL_OW 256
54684: PUSH
54685: LD_INT 1000
54687: EQUAL
54688: PUSH
54689: LD_EXP 101
54693: PPUSH
54694: CALL_OW 256
54698: PUSH
54699: LD_INT 1000
54701: EQUAL
54702: AND
54703: OR
54704: PUSH
54705: LD_EXP 54
54709: OR
54710: IFFALSE 54645
// end else
54712: GO 54722
// Captured_american = 0 ;
54714: LD_ADDR_VAR 0 2
54718: PUSH
54719: LD_INT 0
54721: ST_TO_ADDR
// end else
54722: GO 54995
// if not ( HasTask ( Explorer1 ) ) and not ( HasTask ( Explorer2 ) ) and ( Step_On_The_Way < Way_of_Explorers [ Explorer_Way_Number ] ) then
54724: LD_EXP 100
54728: PPUSH
54729: CALL_OW 314
54733: NOT
54734: PUSH
54735: LD_EXP 101
54739: PPUSH
54740: CALL_OW 314
54744: NOT
54745: AND
54746: PUSH
54747: LD_EXP 209
54751: PUSH
54752: LD_EXP 208
54756: PUSH
54757: LD_EXP 210
54761: ARRAY
54762: LESS
54763: AND
54764: IFFALSE 54995
// begin Wait ( 0 0$2 ) ;
54766: LD_INT 70
54768: PPUSH
54769: CALL_OW 67
// if not ( SeeXY ( americans , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ) or ( Rand ( 1 , 20 ) = 1 ) then
54773: LD_EXP 176
54777: PPUSH
54778: LD_EXP 208
54782: PUSH
54783: LD_EXP 210
54787: ARRAY
54788: PUSH
54789: LD_EXP 209
54793: ARRAY
54794: PUSH
54795: LD_INT 1
54797: ARRAY
54798: PPUSH
54799: LD_EXP 208
54803: PUSH
54804: LD_EXP 210
54808: ARRAY
54809: PUSH
54810: LD_EXP 209
54814: ARRAY
54815: PUSH
54816: LD_INT 2
54818: ARRAY
54819: PPUSH
54820: CALL_OW 293
54824: NOT
54825: PUSH
54826: LD_INT 1
54828: PPUSH
54829: LD_INT 20
54831: PPUSH
54832: CALL_OW 12
54836: PUSH
54837: LD_INT 1
54839: EQUAL
54840: OR
54841: IFFALSE 54995
// begin ComMoveXY ( Explorer1 , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ;
54843: LD_EXP 100
54847: PPUSH
54848: LD_EXP 208
54852: PUSH
54853: LD_EXP 210
54857: ARRAY
54858: PUSH
54859: LD_EXP 209
54863: ARRAY
54864: PUSH
54865: LD_INT 1
54867: ARRAY
54868: PPUSH
54869: LD_EXP 208
54873: PUSH
54874: LD_EXP 210
54878: ARRAY
54879: PUSH
54880: LD_EXP 209
54884: ARRAY
54885: PUSH
54886: LD_INT 2
54888: ARRAY
54889: PPUSH
54890: CALL_OW 111
// AddComHold ( Explorer1 ) ;
54894: LD_EXP 100
54898: PPUSH
54899: CALL_OW 200
// AddComForceInvisible ( Explorer1 ) ;
54903: LD_EXP 100
54907: PPUSH
54908: CALL_OW 497
// ComMoveXY ( Explorer2 , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ;
54912: LD_EXP 101
54916: PPUSH
54917: LD_EXP 208
54921: PUSH
54922: LD_EXP 210
54926: ARRAY
54927: PUSH
54928: LD_EXP 209
54932: ARRAY
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PPUSH
54938: LD_EXP 208
54942: PUSH
54943: LD_EXP 210
54947: ARRAY
54948: PUSH
54949: LD_EXP 209
54953: ARRAY
54954: PUSH
54955: LD_INT 2
54957: ARRAY
54958: PPUSH
54959: CALL_OW 111
// AddComHold ( Explorer2 ) ;
54963: LD_EXP 101
54967: PPUSH
54968: CALL_OW 200
// AddComForceInvisible ( Explorer2 ) ;
54972: LD_EXP 101
54976: PPUSH
54977: CALL_OW 497
// Step_On_The_Way = Step_On_The_Way + 1 ;
54981: LD_ADDR_EXP 209
54985: PUSH
54986: LD_EXP 209
54990: PUSH
54991: LD_INT 1
54993: PLUS
54994: ST_TO_ADDR
// end ; end ; end ; end else
54995: GO 55111
// begin if IsLive ( Explorer1 ) and not ( IsInArea ( Explorer1 , Al_Base ) ) then
54997: LD_EXP 100
55001: PPUSH
55002: CALL_OW 300
55006: PUSH
55007: LD_EXP 100
55011: PPUSH
55012: LD_INT 18
55014: PPUSH
55015: CALL_OW 308
55019: NOT
55020: AND
55021: IFFALSE 55044
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
55023: LD_EXP 100
55027: PPUSH
55028: LD_INT 245
55030: PPUSH
55031: LD_INT 186
55033: PPUSH
55034: LD_INT 3
55036: PPUSH
55037: LD_INT 1
55039: PPUSH
55040: CALL_OW 483
// if IsLive ( Explorer2 ) and not ( IsInArea ( Explorer2 , Al_Base ) ) then
55044: LD_EXP 101
55048: PPUSH
55049: CALL_OW 300
55053: PUSH
55054: LD_EXP 101
55058: PPUSH
55059: LD_INT 18
55061: PPUSH
55062: CALL_OW 308
55066: NOT
55067: AND
55068: IFFALSE 55091
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
55070: LD_EXP 101
55074: PPUSH
55075: LD_INT 245
55077: PPUSH
55078: LD_INT 186
55080: PPUSH
55081: LD_INT 3
55083: PPUSH
55084: LD_INT 1
55086: PPUSH
55087: CALL_OW 483
// HealExplorers ;
55091: CALL 52996 0 0
// SelectExplorers ;
55095: CALL 51723 0 0
// Step_On_The_Way = 1 ;
55099: LD_ADDR_EXP 209
55103: PUSH
55104: LD_INT 1
55106: ST_TO_ADDR
// SetExplorerWayNumber ;
55107: CALL 54031 0 0
// end ; enable ;
55111: ENABLE
// end else
55112: GO 55115
// disable ;
55114: DISABLE
// Wood_registry = false ;
55115: LD_ADDR_EXP 229
55119: PUSH
55120: LD_INT 0
55122: ST_TO_ADDR
// end else
55123: GO 55126
// enable ;
55125: ENABLE
// end ;
55126: PPOPN 7
55128: END
// export function GuardAllianceWood ; var Uns , Un , Americans_to_capture , Captured_american ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
// if not ( Wood_registry ) then
55136: LD_EXP 229
55140: NOT
55141: IFFALSE 55366
// begin Wood_registry = true ;
55143: LD_ADDR_EXP 229
55147: PUSH
55148: LD_INT 1
55150: ST_TO_ADDR
// Americans_to_capture = [ ] ;
55151: LD_ADDR_VAR 0 4
55155: PUSH
55156: EMPTY
55157: ST_TO_ADDR
// for Un in All_americans do
55158: LD_ADDR_VAR 0 3
55162: PUSH
55163: LD_EXP 61
55167: PUSH
55168: FOR_IN
55169: IFFALSE 55271
// if IsInArea ( Un , Ali_wood ) then
55171: LD_VAR 0 3
55175: PPUSH
55176: LD_INT 9
55178: PPUSH
55179: CALL_OW 308
55183: IFFALSE 55269
// begin if ( GetType ( Un ) = unit_human ) then
55185: LD_VAR 0 3
55189: PPUSH
55190: CALL_OW 247
55194: PUSH
55195: LD_INT 1
55197: EQUAL
55198: IFFALSE 55218
// Americans_to_capture = Americans_to_capture ^ Un else
55200: LD_ADDR_VAR 0 4
55204: PUSH
55205: LD_VAR 0 4
55209: PUSH
55210: LD_VAR 0 3
55214: ADD
55215: ST_TO_ADDR
55216: GO 55269
// if ( GetType ( Un ) = unit_vehicle ) and ( UnitsInside ( Un ) <> 0 ) then
55218: LD_VAR 0 3
55222: PPUSH
55223: CALL_OW 247
55227: PUSH
55228: LD_INT 2
55230: EQUAL
55231: PUSH
55232: LD_VAR 0 3
55236: PPUSH
55237: CALL_OW 313
55241: PUSH
55242: LD_INT 0
55244: NONEQUAL
55245: AND
55246: IFFALSE 55269
// Americans_to_capture = Americans_to_capture ^ UnitsInside ( Un ) ;
55248: LD_ADDR_VAR 0 4
55252: PUSH
55253: LD_VAR 0 4
55257: PUSH
55258: LD_VAR 0 3
55262: PPUSH
55263: CALL_OW 313
55267: ADD
55268: ST_TO_ADDR
// end ;
55269: GO 55168
55271: POP
55272: POP
// for Captured_american in Americans_to_capture do
55273: LD_ADDR_VAR 0 5
55277: PUSH
55278: LD_VAR 0 4
55282: PUSH
55283: FOR_IN
55284: IFFALSE 55356
// begin Number_of_captured_americans = Number_of_captured_americans + 1 ;
55286: LD_ADDR_EXP 211
55290: PUSH
55291: LD_EXP 211
55295: PUSH
55296: LD_INT 1
55298: PLUS
55299: ST_TO_ADDR
// if ( Number_of_captured_americans = 1 ) or ( Captured_american = JMM ) then
55300: LD_EXP 211
55304: PUSH
55305: LD_INT 1
55307: EQUAL
55308: PUSH
55309: LD_VAR 0 5
55313: PUSH
55314: LD_EXP 1
55318: EQUAL
55319: OR
55320: IFFALSE 55339
// begin SohwCaptureToPlayer ( Captured_american , 0 , 0 ) ;
55322: LD_VAR 0 5
55326: PPUSH
55327: LD_INT 0
55329: PPUSH
55330: LD_INT 0
55332: PPUSH
55333: CALL 53084 0 3
// end else
55337: GO 55354
// begin CapturewWithoutShow ( Captured_american , 0 , 0 ) ;
55339: LD_VAR 0 5
55343: PPUSH
55344: LD_INT 0
55346: PPUSH
55347: LD_INT 0
55349: PPUSH
55350: CALL 53803 0 3
// end ; end ;
55354: GO 55283
55356: POP
55357: POP
// Wood_registry = false ;
55358: LD_ADDR_EXP 229
55362: PUSH
55363: LD_INT 0
55365: ST_TO_ADDR
// end ; end ;
55366: LD_VAR 0 1
55370: RET
// every 0 0$1 marked 16 do var Un ;
55371: GO 55373
55373: DISABLE
55374: LD_INT 0
55376: PPUSH
// begin for Un in Captured_Units_of_Alliance do
55377: LD_ADDR_VAR 0 1
55381: PUSH
55382: LD_EXP 99
55386: PUSH
55387: FOR_IN
55388: IFFALSE 55438
// if GetDistUnitXY ( Un , 226 , 197 ) < 2 then
55390: LD_VAR 0 1
55394: PPUSH
55395: LD_INT 226
55397: PPUSH
55398: LD_INT 197
55400: PPUSH
55401: CALL_OW 297
55405: PUSH
55406: LD_INT 2
55408: LESS
55409: IFFALSE 55436
// begin RemoveUnit ( Un ) ;
55411: LD_VAR 0 1
55415: PPUSH
55416: CALL_OW 64
// Captured_Units_of_Alliance = Captured_Units_of_Alliance diff Un ;
55420: LD_ADDR_EXP 99
55424: PUSH
55425: LD_EXP 99
55429: PUSH
55430: LD_VAR 0 1
55434: DIFF
55435: ST_TO_ADDR
// end ;
55436: GO 55387
55438: POP
55439: POP
// if Captured_Units_of_Alliance > 0 then
55440: LD_EXP 99
55444: PUSH
55445: LD_INT 0
55447: GREATER
55448: IFFALSE 55483
// begin enable ;
55450: ENABLE
// for Un in Captured_Units_of_Alliance do
55451: LD_ADDR_VAR 0 1
55455: PUSH
55456: LD_EXP 99
55460: PUSH
55461: FOR_IN
55462: IFFALSE 55481
// ComMoveXY ( Un , 226 , 197 ) ;
55464: LD_VAR 0 1
55468: PPUSH
55469: LD_INT 226
55471: PPUSH
55472: LD_INT 197
55474: PPUSH
55475: CALL_OW 111
55479: GO 55461
55481: POP
55482: POP
// end ; end ;
55483: PPOPN 1
55485: END
// every 0 0$1 trigger ( Tick > Time_of_first_capture ) marked 10 do
55486: LD_OWVAR 1
55490: PUSH
55491: LD_EXP 204
55495: GREATER
55496: IFFALSE 55506
55498: GO 55500
55500: DISABLE
// begin enable ( Explorers_Can_Go ) ;
55501: LD_EXP 153
55505: ENABLE_MARKED
// end ; end_of_file
55506: END
// function CratesInArea ( area ) ; begin
55507: LD_INT 0
55509: PPUSH
// result = GetResourceArea ( area , mat_cans ) ;
55510: LD_ADDR_VAR 0 2
55514: PUSH
55515: LD_VAR 0 1
55519: PPUSH
55520: LD_INT 1
55522: PPUSH
55523: CALL_OW 287
55527: ST_TO_ADDR
// end ;
55528: LD_VAR 0 2
55532: RET
// function ln ( numb ) ; var i ; begin
55533: LD_INT 0
55535: PPUSH
55536: PPUSH
// i = 0 ;
55537: LD_ADDR_VAR 0 3
55541: PUSH
55542: LD_INT 0
55544: ST_TO_ADDR
// while ( i < 10 ) and ( numb > 1 ) do
55545: LD_VAR 0 3
55549: PUSH
55550: LD_INT 10
55552: LESS
55553: PUSH
55554: LD_VAR 0 1
55558: PUSH
55559: LD_INT 1
55561: GREATER
55562: AND
55563: IFFALSE 55595
// begin numb = numb div 2 ;
55565: LD_ADDR_VAR 0 1
55569: PUSH
55570: LD_VAR 0 1
55574: PUSH
55575: LD_INT 2
55577: DIV
55578: ST_TO_ADDR
// i = i + 1 ;
55579: LD_ADDR_VAR 0 3
55583: PUSH
55584: LD_VAR 0 3
55588: PUSH
55589: LD_INT 1
55591: PLUS
55592: ST_TO_ADDR
// end ;
55593: GO 55545
// result = i ;
55595: LD_ADDR_VAR 0 2
55599: PUSH
55600: LD_VAR 0 3
55604: ST_TO_ADDR
// end ;
55605: LD_VAR 0 2
55609: RET
// function TimeStep ; var r , hlp ; begin
55610: LD_INT 0
55612: PPUSH
55613: PPUSH
55614: PPUSH
// r = tick div 400 ;
55615: LD_ADDR_VAR 0 2
55619: PUSH
55620: LD_OWVAR 1
55624: PUSH
55625: LD_INT 400
55627: DIV
55628: ST_TO_ADDR
// hlp = ln ( r ) + 1 ;
55629: LD_ADDR_VAR 0 3
55633: PUSH
55634: LD_VAR 0 2
55638: PPUSH
55639: CALL 55533 0 1
55643: PUSH
55644: LD_INT 1
55646: PLUS
55647: ST_TO_ADDR
// if r > 8 then
55648: LD_VAR 0 2
55652: PUSH
55653: LD_INT 8
55655: GREATER
55656: IFFALSE 55668
// hlp = 8 else
55658: LD_ADDR_VAR 0 3
55662: PUSH
55663: LD_INT 8
55665: ST_TO_ADDR
55666: GO 55678
// hlp = r ;
55668: LD_ADDR_VAR 0 3
55672: PUSH
55673: LD_VAR 0 2
55677: ST_TO_ADDR
// result = hlp ;
55678: LD_ADDR_VAR 0 1
55682: PUSH
55683: LD_VAR 0 3
55687: ST_TO_ADDR
// end ;
55688: LD_VAR 0 1
55692: RET
// function CreateNewCrates ( Number ) ; var Old_Crates , area ; begin
55693: LD_INT 0
55695: PPUSH
55696: PPUSH
55697: PPUSH
// area = Plan3 ;
55698: LD_ADDR_VAR 0 4
55702: PUSH
55703: LD_INT 31
55705: ST_TO_ADDR
// Old_Crates = ln ( CratesInArea ( area ) ) ;
55706: LD_ADDR_VAR 0 3
55710: PUSH
55711: LD_VAR 0 4
55715: PPUSH
55716: CALL 55507 0 1
55720: PPUSH
55721: CALL 55533 0 1
55725: ST_TO_ADDR
// if Old_Crates < 10 then
55726: LD_VAR 0 3
55730: PUSH
55731: LD_INT 10
55733: LESS
55734: IFFALSE 55787
// if rand ( 1 , 100 ) < 25 + ( 15 * ( 10 - Old_Crates ) ) / 2 then
55736: LD_INT 1
55738: PPUSH
55739: LD_INT 100
55741: PPUSH
55742: CALL_OW 12
55746: PUSH
55747: LD_INT 25
55749: PUSH
55750: LD_INT 15
55752: PUSH
55753: LD_INT 10
55755: PUSH
55756: LD_VAR 0 3
55760: MINUS
55761: MUL
55762: PUSH
55763: LD_INT 2
55765: DIVREAL
55766: PLUS
55767: LESS
55768: IFFALSE 55787
// CreateCratesArea ( Number , area , true ) ;
55770: LD_VAR 0 1
55774: PPUSH
55775: LD_VAR 0 4
55779: PPUSH
55780: LD_INT 1
55782: PPUSH
55783: CALL_OW 55
// end ;
55787: LD_VAR 0 2
55791: RET
// every 0 0$5 trigger tick > Time_Of_Crates do var Step ;
55792: LD_OWVAR 1
55796: PUSH
55797: LD_EXP 222
55801: GREATER
55802: IFFALSE 55878
55804: GO 55806
55806: DISABLE
55807: LD_INT 0
55809: PPUSH
// begin Step = TimeStep ;
55810: LD_ADDR_VAR 0 1
55814: PUSH
55815: CALL 55610 0 0
55819: ST_TO_ADDR
// Time_Of_Crates = Time_Of_Crates + 0 0$10 + Rand ( 0 0$6 * Step , 0 0$05 + 0 0$12 * Step ) ;
55820: LD_ADDR_EXP 222
55824: PUSH
55825: LD_EXP 222
55829: PUSH
55830: LD_INT 350
55832: PLUS
55833: PUSH
55834: LD_INT 210
55836: PUSH
55837: LD_VAR 0 1
55841: MUL
55842: PPUSH
55843: LD_INT 175
55845: PUSH
55846: LD_INT 420
55848: PUSH
55849: LD_VAR 0 1
55853: MUL
55854: PLUS
55855: PPUSH
55856: CALL_OW 12
55860: PLUS
55861: ST_TO_ADDR
// CreateNewCrates ( Rand ( 3 , 5 ) ) ;
55862: LD_INT 3
55864: PPUSH
55865: LD_INT 5
55867: PPUSH
55868: CALL_OW 12
55872: PPUSH
55873: CALL 55693 0 1
// enable ;
55877: ENABLE
// end ; end_of_file
55878: PPOPN 1
55880: END
// every 0 0$2 + 0 0$0.1 do
55881: GO 55883
55883: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
55884: LD_INT 22
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 25
55899: PUSH
55900: LD_INT 12
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 25
55909: PUSH
55910: LD_INT 16
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 25
55919: PUSH
55920: LD_INT 15
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 25
55929: PUSH
55930: LD_INT 17
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PPUSH
55948: CALL_OW 69
55952: PUSH
55953: LD_INT 22
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 21
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 25
55981: PUSH
55982: LD_INT 12
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 25
55991: PUSH
55992: LD_INT 16
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 25
56001: PUSH
56002: LD_INT 15
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 25
56011: PUSH
56012: LD_INT 17
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: PPUSH
56035: CALL_OW 69
56039: GREATER
56040: IFFALSE 56051
// begin SetAchievement ( ACH_POTA ) ;
56042: LD_STRING ACH_POTA
56044: PPUSH
56045: CALL_OW 543
// exit ;
56049: GO 56052
// end ; enable ;
56051: ENABLE
// end ;
56052: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle ) ; begin
56053: LD_INT 0
56055: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = 1 then
56056: LD_VAR 0 1
56060: PPUSH
56061: CALL_OW 255
56065: PUSH
56066: LD_INT 1
56068: EQUAL
56069: IFFALSE 56078
// SetAchievement ( ACH_RAD ) ;
56071: LD_STRING ACH_RAD
56073: PPUSH
56074: CALL_OW 543
// end ;
56078: LD_VAR 0 2
56082: RET
// export function SA_OnLegionJoin ; begin
56083: LD_INT 0
56085: PPUSH
// SetAchievement ( ACH_LS ) ;
56086: LD_STRING ACH_LS
56088: PPUSH
56089: CALL_OW 543
// end ;
56093: LD_VAR 0 1
56097: RET
// export function SA_OnMissionComplete ; begin
56098: LD_INT 0
56100: PPUSH
// SetAchievement ( ACH_GBA ) ;
56101: LD_STRING ACH_GBA
56103: PPUSH
56104: CALL_OW 543
// end ;
56108: LD_VAR 0 1
56112: RET
// export function SA_OnVsevolodAppear ; begin
56113: LD_INT 0
56115: PPUSH
// SetAchievement ( ACH_MMB ) ;
56116: LD_STRING ACH_MMB
56118: PPUSH
56119: CALL_OW 543
// end ;
56123: LD_VAR 0 1
56127: RET
