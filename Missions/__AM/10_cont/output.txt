// export Arabi , Rusi , You ; export Arabi2 , Rusi2 , You2 ; export Arabi3 ; export SideKhat ; export radzio ; var pom , pom1 ; var VIPka ; var i ; export lidi_other_surv ; export lidi_with_JMM ; export bazookaDialog ; starting begin Amici_na_zacatku = [ ] ;
   0: LD_ADDR_EXP 25
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// RandomizeAll ;
   7: CALL_OW 11
// Randomize ;
  11: CALL_OW 10
// Arabi := 2 ;
  15: LD_ADDR_EXP 1
  19: PUSH
  20: LD_INT 2
  22: ST_TO_ADDR
// Arabi2 = 5 ;
  23: LD_ADDR_EXP 4
  27: PUSH
  28: LD_INT 5
  30: ST_TO_ADDR
// Arabi3 = 7 ;
  31: LD_ADDR_EXP 7
  35: PUSH
  36: LD_INT 7
  38: ST_TO_ADDR
// You := 1 ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_INT 1
  46: ST_TO_ADDR
// You2 = 4 ;
  47: LD_ADDR_EXP 6
  51: PUSH
  52: LD_INT 4
  54: ST_TO_ADDR
// Rusi := 3 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 3
  62: ST_TO_ADDR
// SideKhat = 8 ;
  63: LD_ADDR_EXP 8
  67: PUSH
  68: LD_INT 8
  70: ST_TO_ADDR
// Rusi2 = 6 ;
  71: LD_ADDR_EXP 5
  75: PUSH
  76: LD_INT 6
  78: ST_TO_ADDR
// bazookaDialog = 0 ;
  79: LD_ADDR_EXP 12
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
  87: LD_ADDR_EXP 87
  91: PUSH
  92: LD_INT 0
  94: PUSH
  95: LD_STRING :
  97: PUSH
  98: LD_INT 0
 100: PUSH
 101: EMPTY
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// SetDificultyLevels ;
 106: CALL 33733 0 0
// GetConstants ;
 110: CALL 1783 0 0
// load_postav ;
 114: CALL 1580 0 0
// Res := 0 ;
 118: LD_ADDR_EXP 59
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// Dial = 0 ;
 126: LD_ADDR_EXP 40
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// COR_GO = 0 ;
 134: LD_ADDR_EXP 55
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// RUSI_AUTA = 0 ;
 142: LD_ADDR_EXP 36
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// END_ATTACK = false ;
 150: LD_ADDR_EXP 57
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// Arabi_utoci = false ;
 158: LD_ADDR_EXP 30
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// PRU_ATTACK = 0 ;
 166: LD_ADDR_EXP 37
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// KHATTAM_PADA = false ;
 174: LD_ADDR_EXP 58
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// UTEKLI_ARABI := 0 ;
 182: LD_ADDR_EXP 31
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// ingame_video = true ;
 190: LD_ADDR_OWVAR 52
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// uprav_mastodonty ;
 198: CALL 7146 0 0
// create_arabi ;
 202: CALL 2093 0 0
// create_am_vedci ;
 206: CALL 2490 0 0
// create_amici1 ;
 210: CALL 3563 0 0
// nah = Rand ( 1 , 4 ) ;
 214: LD_ADDR_EXP 35
 218: PUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_INT 4
 224: PPUSH
 225: CALL_OW 12
 229: ST_TO_ADDR
// create_konvoj_ru ( nah ) ;
 230: LD_EXP 35
 234: PPUSH
 235: CALL 4729 0 1
// create_mechaniky_navic ;
 239: CALL 10102 0 0
// create_rusky_utok_0 ;
 243: CALL 8384 0 0
// create_rusky_attack1 ;
 247: CALL 6105 0 0
// create_vojaci ;
 251: CALL 6388 0 0
// create_attack_after_end ;
 255: CALL 8546 0 0
// create_2_new_attack ;
 259: CALL 7243 0 0
// create_3_new_attack ;
 263: CALL 7648 0 0
// create_bazooka_attack ;
 267: CALL 8135 0 0
// CenterNowOnXY ( 30 , 35 ) ;
 271: LD_INT 30
 273: PPUSH
 274: LD_INT 35
 276: PPUSH
 277: CALL_OW 86
// RevealFogArea ( Arabi , ASE ) ;
 281: LD_EXP 1
 285: PPUSH
 286: LD_INT 42
 288: PPUSH
 289: CALL_OW 332
// ChangeSideFog ( You , Arabi ) ;
 293: LD_EXP 3
 297: PPUSH
 298: LD_EXP 1
 302: PPUSH
 303: CALL_OW 343
// ChangeSideFog ( You2 , Arabi ) ;
 307: LD_EXP 6
 311: PPUSH
 312: LD_EXP 1
 316: PPUSH
 317: CALL_OW 343
// end ;
 321: END
// on UnitDestroyed ( un ) do begin if un = JMM then
 322: LD_VAR 0 1
 326: PUSH
 327: LD_EXP 42
 331: EQUAL
 332: IFFALSE 341
// YouLost ( JMM ) ;
 334: LD_STRING JMM
 336: PPUSH
 337: CALL_OW 104
// enable ;
 341: ENABLE
// end ;
 342: PPOPN 1
 344: END
// every 0 0$1 trigger END_ATTACK do
 345: LD_EXP 57
 349: IFFALSE 372
 351: GO 353
 353: DISABLE
// begin if not Arabi_Utoci then
 354: LD_EXP 30
 358: NOT
 359: IFFALSE 372
// begin powell_kecy ;
 361: CALL 31169 0 0
// YouLost ( Powell ) ;
 365: LD_STRING Powell
 367: PPUSH
 368: CALL_OW 104
// end ; end ;
 372: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 then
 373: LD_VAR 0 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: EQUAL
 390: AND
 391: IFFALSE 400
// Youlost ( Powell ) ;
 393: LD_STRING Powell
 395: PPUSH
 396: CALL_OW 104
// end ;
 400: PPOPN 2
 402: END
// on EndTheMissionRaised ( void ) do begin end_the_mission_allowed := false ;
 403: LD_ADDR_OWVAR 57
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// Mission_end ( EndTheMissionRaised - Main 132 ) ;
 411: LD_STRING EndTheMissionRaised - Main 132
 413: PPUSH
 414: CALL 421 0 1
// end ;
 418: PPOPN 1
 420: END
// export function Mission_end ( tst ) ; var all_people ; var pom1 , pom2 , i ; begin
 421: LD_INT 0
 423: PPUSH
 424: PPUSH
 425: PPUSH
 426: PPUSH
 427: PPUSH
// msg ( tst ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: CALL_OW 100
// DisableExclamations ;
 437: CALL_OW 474
// gained_medals := [ ] ;
 441: LD_ADDR_OWVAR 61
 445: PUSH
 446: EMPTY
 447: ST_TO_ADDR
// missing_medals := [ ] ;
 448: LD_ADDR_OWVAR 62
 452: PUSH
 453: EMPTY
 454: ST_TO_ADDR
// if GetTech ( tech_LasSight , You ) = state_researched then
 455: LD_INT 12
 457: PPUSH
 458: LD_EXP 3
 462: PPUSH
 463: CALL_OW 321
 467: PUSH
 468: LD_INT 2
 470: EQUAL
 471: IFFALSE 485
// AddMedal ( sights , 1 ) else
 473: LD_STRING sights
 475: PPUSH
 476: LD_INT 1
 478: PPUSH
 479: CALL_OW 101
 483: GO 496
// AddMedal ( sights , - 1 ) ;
 485: LD_STRING sights
 487: PPUSH
 488: LD_INT 1
 490: NEG
 491: PPUSH
 492: CALL_OW 101
// if GetTech ( tech_AI , You ) = state_researched then
 496: LD_INT 32
 498: PPUSH
 499: LD_EXP 3
 503: PPUSH
 504: CALL_OW 321
 508: PUSH
 509: LD_INT 2
 511: EQUAL
 512: IFFALSE 526
// AddMedal ( computers , 1 ) else
 514: LD_STRING computers
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL_OW 101
 524: GO 537
// AddMedal ( computers , - 1 ) ;
 526: LD_STRING computers
 528: PPUSH
 529: LD_INT 1
 531: NEG
 532: PPUSH
 533: CALL_OW 101
// if UTEKLI_ARABI = 0 then
 537: LD_EXP 31
 541: PUSH
 542: LD_INT 0
 544: EQUAL
 545: IFFALSE 577
// if Arabi_Utoci then
 547: LD_EXP 30
 551: IFFALSE 565
// AddMedal ( renegades , 2 ) else
 553: LD_STRING renegades
 555: PPUSH
 556: LD_INT 2
 558: PPUSH
 559: CALL_OW 101
 563: GO 575
// AddMedal ( renegades , 1 ) else
 565: LD_STRING renegades
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 101
 575: GO 611
// if UTEKLI_ARABI <= 2 then
 577: LD_EXP 31
 581: PUSH
 582: LD_INT 2
 584: LESSEQUAL
 585: IFFALSE 600
// AddMedal ( renegades , - 1 ) else
 587: LD_STRING renegades
 589: PPUSH
 590: LD_INT 1
 592: NEG
 593: PPUSH
 594: CALL_OW 101
 598: GO 611
// AddMedal ( renegades , - 2 ) ;
 600: LD_STRING renegades
 602: PPUSH
 603: LD_INT 2
 605: NEG
 606: PPUSH
 607: CALL_OW 101
// GiveMedals ( Main ) ;
 611: LD_STRING Main
 613: PPUSH
 614: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_type , unit_human ] ] ) ;
 618: LD_ADDR_LOC 1
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_EXP 3
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 1
 637: PUSH
 638: EMPTY
 639: LIST
 640: PUSH
 641: LD_INT 21
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PPUSH
 656: CALL_OW 69
 660: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_type , unit_vehicle ] ] ) do
 661: LD_ADDR_VAR 0 6
 665: PUSH
 666: LD_INT 22
 668: PUSH
 669: LD_EXP 3
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: LD_INT 1
 680: PUSH
 681: EMPTY
 682: LIST
 683: PUSH
 684: LD_INT 21
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: PUSH
 704: FOR_IN
 705: IFFALSE 753
// begin pom1 = IsDrivenBy ( i ) ;
 707: LD_ADDR_VAR 0 4
 711: PUSH
 712: LD_VAR 0 6
 716: PPUSH
 717: CALL_OW 311
 721: ST_TO_ADDR
// if not ( pom1 in pom ) then
 722: LD_VAR 0 4
 726: PUSH
 727: LD_LOC 1
 731: IN
 732: NOT
 733: IFFALSE 751
// pom = pom ^ pom1 ;
 735: LD_ADDR_LOC 1
 739: PUSH
 740: LD_LOC 1
 744: PUSH
 745: LD_VAR 0 4
 749: ADD
 750: ST_TO_ADDR
// end ;
 751: GO 704
 753: POP
 754: POP
// all_people = pom ;
 755: LD_ADDR_VAR 0 3
 759: PUSH
 760: LD_LOC 1
 764: ST_TO_ADDR
// all_people = all_people diff UnitFilter ( all_people , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) ;
 765: LD_ADDR_VAR 0 3
 769: PUSH
 770: LD_VAR 0 3
 774: PUSH
 775: LD_VAR 0 3
 779: PPUSH
 780: LD_INT 2
 782: PUSH
 783: LD_INT 25
 785: PUSH
 786: LD_INT 12
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: LD_INT 25
 795: PUSH
 796: LD_INT 16
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: LIST
 807: PPUSH
 808: CALL_OW 72
 812: DIFF
 813: ST_TO_ADDR
// RewardPeople ( all_people ) ;
 814: LD_VAR 0 3
 818: PPUSH
 819: CALL_OW 43
// VIPka = [ JMM , Cyrus , Khattam , Simms , Joan_F , Gary , Powell , Denis , Cornel ] ;
 823: LD_ADDR_LOC 3
 827: PUSH
 828: LD_EXP 42
 832: PUSH
 833: LD_EXP 47
 837: PUSH
 838: LD_EXP 45
 842: PUSH
 843: LD_EXP 46
 847: PUSH
 848: LD_EXP 43
 852: PUSH
 853: LD_EXP 44
 857: PUSH
 858: LD_EXP 49
 862: PUSH
 863: LD_EXP 48
 867: PUSH
 868: LD_EXP 50
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
 884: LD_EXP 42
 888: PPUSH
 889: LD_STRING JMM
 891: PPUSH
 892: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
 896: LD_EXP 47
 900: PPUSH
 901: LD_STRING Cyrus
 903: PPUSH
 904: CALL_OW 38
// SaveCharacters ( Khattam , Khatam ) ;
 908: LD_EXP 45
 912: PPUSH
 913: LD_STRING Khatam
 915: PPUSH
 916: CALL_OW 38
// SaveCharacters ( Simms , Simms ) ;
 920: LD_EXP 46
 924: PPUSH
 925: LD_STRING Simms
 927: PPUSH
 928: CALL_OW 38
// SaveVariable ( 6 , SimmsLoc ) ;
 932: LD_INT 6
 934: PPUSH
 935: LD_STRING SimmsLoc
 937: PPUSH
 938: CALL_OW 39
// SaveCharacters ( Joan_F , Joan ) ;
 942: LD_EXP 43
 946: PPUSH
 947: LD_STRING Joan
 949: PPUSH
 950: CALL_OW 38
// SaveVariable ( 6 , JoanLoc ) ;
 954: LD_INT 6
 956: PPUSH
 957: LD_STRING JoanLoc
 959: PPUSH
 960: CALL_OW 39
// SaveCharacters ( Gary , Gary ) ;
 964: LD_EXP 44
 968: PPUSH
 969: LD_STRING Gary
 971: PPUSH
 972: CALL_OW 38
// SaveVariable ( 6 , GaryLoc ) ;
 976: LD_INT 6
 978: PPUSH
 979: LD_STRING GaryLoc
 981: PPUSH
 982: CALL_OW 39
// SaveCharacters ( Powell , Powell ) ;
 986: LD_EXP 49
 990: PPUSH
 991: LD_STRING Powell
 993: PPUSH
 994: CALL_OW 38
// SaveCharacters ( Denis , Denis ) ;
 998: LD_EXP 48
1002: PPUSH
1003: LD_STRING Denis
1005: PPUSH
1006: CALL_OW 38
// SaveVariable ( 6 , DenisLoc ) ;
1010: LD_INT 6
1012: PPUSH
1013: LD_STRING DenisLoc
1015: PPUSH
1016: CALL_OW 39
// SaveCharacters ( Cornel , Cornell ) ;
1020: LD_EXP 50
1024: PPUSH
1025: LD_STRING Cornell
1027: PPUSH
1028: CALL_OW 38
// SaveVariable ( 6 , CornellLoc ) ;
1032: LD_INT 6
1034: PPUSH
1035: LD_STRING CornellLoc
1037: PPUSH
1038: CALL_OW 39
// DeleteVariable ( Stoupa9_siberit ) ;
1042: LD_STRING Stoupa9_siberit
1044: PPUSH
1045: CALL_OW 41
// DeleteVariable ( Stoupa9_informace ) ;
1049: LD_STRING Stoupa9_informace
1051: PPUSH
1052: CALL_OW 41
// DeleteVariable ( us2mikhail_state ) ;
1056: LD_STRING us2mikhail_state
1058: PPUSH
1059: CALL_OW 41
// pom1 = lidi_other_surv diff Amici_na_zacatku ;
1063: LD_ADDR_VAR 0 4
1067: PUSH
1068: LD_EXP 10
1072: PUSH
1073: LD_EXP 25
1077: DIFF
1078: ST_TO_ADDR
// pom2 = lidi_with_JMM diff Amici_na_zacatku ;
1079: LD_ADDR_VAR 0 5
1083: PUSH
1084: LD_EXP 11
1088: PUSH
1089: LD_EXP 25
1093: DIFF
1094: ST_TO_ADDR
// SaveCharacters ( pom1 , other_survivors ) ;
1095: LD_VAR 0 4
1099: PPUSH
1100: LD_STRING other_survivors
1102: PPUSH
1103: CALL_OW 38
// SaveCharacters ( pom2 , otherNotJMM ) ;
1107: LD_VAR 0 5
1111: PPUSH
1112: LD_STRING otherNotJMM
1114: PPUSH
1115: CALL_OW 38
// pom2 = all_people diff VIPka ;
1119: LD_ADDR_VAR 0 5
1123: PUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_LOC 3
1133: DIFF
1134: ST_TO_ADDR
// SaveCharacters ( pom2 , otherWithJMM ) ;
1135: LD_VAR 0 5
1139: PPUSH
1140: LD_STRING otherWithJMM
1142: PPUSH
1143: CALL_OW 38
// pom = FilterUnitsInArea ( Eps_save , [ [ f_side , You ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
1147: LD_ADDR_LOC 1
1151: PUSH
1152: LD_INT 31
1154: PPUSH
1155: LD_INT 22
1157: PUSH
1158: LD_EXP 3
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 3
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 50
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 70
1192: ST_TO_ADDR
// pom1 = [ ] ;
1193: LD_ADDR_VAR 0 4
1197: PUSH
1198: EMPTY
1199: ST_TO_ADDR
// for i in pom do
1200: LD_ADDR_VAR 0 6
1204: PUSH
1205: LD_LOC 1
1209: PUSH
1210: FOR_IN
1211: IFFALSE 1551
// case GetBType ( i ) of b_lab , b_lab_half , b_lab_full :
1213: LD_VAR 0 6
1217: PPUSH
1218: CALL_OW 266
1222: PUSH
1223: LD_INT 6
1225: DOUBLE
1226: EQUAL
1227: IFTRUE 1243
1229: LD_INT 7
1231: DOUBLE
1232: EQUAL
1233: IFTRUE 1243
1235: LD_INT 8
1237: DOUBLE
1238: EQUAL
1239: IFTRUE 1243
1241: GO 1356
1243: POP
// pom1 = pom1 ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] ; b_bunker , b_turret :
1244: LD_ADDR_VAR 0 4
1248: PUSH
1249: LD_VAR 0 4
1253: PUSH
1254: LD_VAR 0 6
1258: PPUSH
1259: CALL_OW 266
1263: PUSH
1264: LD_VAR 0 6
1268: PPUSH
1269: CALL_OW 250
1273: PUSH
1274: LD_VAR 0 6
1278: PPUSH
1279: CALL_OW 251
1283: PUSH
1284: LD_VAR 0 6
1288: PPUSH
1289: CALL_OW 254
1293: PUSH
1294: LD_VAR 0 6
1298: PPUSH
1299: CALL_OW 267
1303: PUSH
1304: LD_VAR 0 6
1308: PPUSH
1309: CALL_OW 248
1313: PUSH
1314: LD_VAR 0 6
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL_OW 268
1326: PUSH
1327: LD_VAR 0 6
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: CALL_OW 268
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: PUSH
1350: EMPTY
1351: LIST
1352: ADD
1353: ST_TO_ADDR
1354: GO 1549
1356: LD_INT 32
1358: DOUBLE
1359: EQUAL
1360: IFTRUE 1370
1362: LD_INT 33
1364: DOUBLE
1365: EQUAL
1366: IFTRUE 1370
1368: GO 1466
1370: POP
// pom1 = pom1 ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] ; else
1371: LD_ADDR_VAR 0 4
1375: PUSH
1376: LD_VAR 0 4
1380: PUSH
1381: LD_VAR 0 6
1385: PPUSH
1386: CALL_OW 266
1390: PUSH
1391: LD_VAR 0 6
1395: PPUSH
1396: CALL_OW 250
1400: PUSH
1401: LD_VAR 0 6
1405: PPUSH
1406: CALL_OW 251
1410: PUSH
1411: LD_VAR 0 6
1415: PPUSH
1416: CALL_OW 254
1420: PUSH
1421: LD_VAR 0 6
1425: PPUSH
1426: CALL_OW 267
1430: PUSH
1431: LD_VAR 0 6
1435: PPUSH
1436: CALL_OW 248
1440: PUSH
1441: LD_VAR 0 6
1445: PPUSH
1446: CALL_OW 269
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: ADD
1463: ST_TO_ADDR
1464: GO 1549
1466: POP
// pom1 = pom1 ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ; end ;
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 4
1476: PUSH
1477: LD_VAR 0 6
1481: PPUSH
1482: CALL_OW 266
1486: PUSH
1487: LD_VAR 0 6
1491: PPUSH
1492: CALL_OW 250
1496: PUSH
1497: LD_VAR 0 6
1501: PPUSH
1502: CALL_OW 251
1506: PUSH
1507: LD_VAR 0 6
1511: PPUSH
1512: CALL_OW 254
1516: PUSH
1517: LD_VAR 0 6
1521: PPUSH
1522: CALL_OW 267
1526: PUSH
1527: LD_VAR 0 6
1531: PPUSH
1532: CALL_OW 248
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: PUSH
1545: EMPTY
1546: LIST
1547: ADD
1548: ST_TO_ADDR
1549: GO 1210
1551: POP
1552: POP
// SaveVariable ( pom1 , Epsilon ) ;
1553: LD_VAR 0 4
1557: PPUSH
1558: LD_STRING Epsilon
1560: PPUSH
1561: CALL_OW 39
// YouWin ;
1565: CALL_OW 103
// EnableExclamations ;
1569: CALL_OW 473
// exit ;
1573: GO 1575
// end ;
1575: LD_VAR 0 2
1579: RET
// function load_postav ; var ah ; begin
1580: LD_INT 0
1582: PPUSH
1583: PPUSH
// Cyrus = nacti_osobu ( Cyrus ) ;
1584: LD_ADDR_EXP 47
1588: PUSH
1589: LD_STRING Cyrus
1591: PPUSH
1592: CALL 2049 0 1
1596: ST_TO_ADDR
// Khattam = nacti_osobu ( Khatam ) ;
1597: LD_ADDR_EXP 45
1601: PUSH
1602: LD_STRING Khatam
1604: PPUSH
1605: CALL 2049 0 1
1609: ST_TO_ADDR
// Simms = NewCharacter ( Simms ) ;
1610: LD_ADDR_EXP 46
1614: PUSH
1615: LD_STRING Simms
1617: PPUSH
1618: CALL_OW 25
1622: ST_TO_ADDR
// Joan_F = nacti_osobu ( Joan ) ;
1623: LD_ADDR_EXP 43
1627: PUSH
1628: LD_STRING Joan
1630: PPUSH
1631: CALL 2049 0 1
1635: ST_TO_ADDR
// JMM := CreateCharacter ( JMM ) ;
1636: LD_ADDR_EXP 42
1640: PUSH
1641: LD_STRING JMM
1643: PPUSH
1644: CALL_OW 34
1648: ST_TO_ADDR
// Gary = nacti_osobu ( Gary ) ;
1649: LD_ADDR_EXP 44
1653: PUSH
1654: LD_STRING Gary
1656: PPUSH
1657: CALL 2049 0 1
1661: ST_TO_ADDR
// if Gary = 0 then
1662: LD_EXP 44
1666: PUSH
1667: LD_INT 0
1669: EQUAL
1670: IFFALSE 1708
// begin prepare_human ( sex_male , class_soldier , 5 , David Love ) ;
1672: LD_INT 1
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 5
1680: PPUSH
1681: LD_STRING David Love
1683: PPUSH
1684: CALL 2014 0 4
// ah = CreateHuman ;
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: CALL_OW 44
1697: ST_TO_ADDR
// Gary = ah ;
1698: LD_ADDR_EXP 44
1702: PUSH
1703: LD_VAR 0 2
1707: ST_TO_ADDR
// end ; Denis = nacti_osobu ( Denis ) ;
1708: LD_ADDR_EXP 48
1712: PUSH
1713: LD_STRING Denis
1715: PPUSH
1716: CALL 2049 0 1
1720: ST_TO_ADDR
// Cornel = nacti_osobu ( Cornell ) ;
1721: LD_ADDR_EXP 50
1725: PUSH
1726: LD_STRING Cornell
1728: PPUSH
1729: CALL 2049 0 1
1733: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
1734: LD_ADDR_EXP 49
1738: PUSH
1739: LD_STRING Powell
1741: PPUSH
1742: CALL_OW 25
1746: ST_TO_ADDR
// uc_side = Arabi ;
1747: LD_ADDR_OWVAR 20
1751: PUSH
1752: LD_EXP 1
1756: ST_TO_ADDR
// uc_nation = nation_arabian ;
1757: LD_ADDR_OWVAR 21
1761: PUSH
1762: LD_INT 2
1764: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
1765: LD_ADDR_EXP 27
1769: PUSH
1770: LD_STRING Dietrich
1772: PPUSH
1773: CALL_OW 25
1777: ST_TO_ADDR
// end ;
1778: LD_VAR 0 1
1782: RET
// export function GetConstants ; begin
1783: LD_INT 0
1785: PPUSH
// VIDEL_MIKHAILA := LoadVariable ( us2mikhail_state , 5 ) = 5 ;
1786: LD_ADDR_EXP 83
1790: PUSH
1791: LD_STRING us2mikhail_state
1793: PPUSH
1794: LD_INT 5
1796: PPUSH
1797: CALL_OW 30
1801: PUSH
1802: LD_INT 5
1804: EQUAL
1805: ST_TO_ADDR
// VI_O_GRANATECH := LoadVariable ( Stoupa9_informace , false ) ;
1806: LD_ADDR_EXP 84
1810: PUSH
1811: LD_STRING Stoupa9_informace
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL_OW 30
1821: ST_TO_ADDR
// ZIJE_MIKHAIL := LoadVariable ( us2mikhail_state , 1 ) ;
1822: LD_ADDR_EXP 85
1826: PUSH
1827: LD_STRING us2mikhail_state
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 30
1837: ST_TO_ADDR
// if ( ZIJE_MIKHAIL = 5 ) or ( ZIJE_MIKHAIL = 4 ) then
1838: LD_EXP 85
1842: PUSH
1843: LD_INT 5
1845: EQUAL
1846: PUSH
1847: LD_EXP 85
1851: PUSH
1852: LD_INT 4
1854: EQUAL
1855: OR
1856: IFFALSE 1868
// ZIJE_MIKHAIL = true else
1858: LD_ADDR_EXP 85
1862: PUSH
1863: LD_INT 1
1865: ST_TO_ADDR
1866: GO 1896
// begin ZIJE_MIKHAIL = false ;
1868: LD_ADDR_EXP 85
1872: PUSH
1873: LD_INT 0
1875: ST_TO_ADDR
// if IsLive ( Cornel ) then
1876: LD_EXP 50
1880: PPUSH
1881: CALL_OW 300
1885: IFFALSE 1896
// KillUnit ( Cornel ) ;
1887: LD_EXP 50
1891: PPUSH
1892: CALL_OW 66
// end ; if CheckCharacterSet ( other_survivors ) then
1896: LD_STRING other_survivors
1898: PPUSH
1899: CALL_OW 29
1903: IFFALSE 1920
// lidi_other_surv = CreateCharacterSet ( other_survivors ) else
1905: LD_ADDR_EXP 10
1909: PUSH
1910: LD_STRING other_survivors
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
1918: GO 1927
// lidi_other_surv = [ ] ;
1920: LD_ADDR_EXP 10
1924: PUSH
1925: EMPTY
1926: ST_TO_ADDR
// if CheckCharacterSet ( otherWithJMM ) then
1927: LD_STRING otherWithJMM
1929: PPUSH
1930: CALL_OW 29
1934: IFFALSE 1951
// lidi_with_JMM = CreateCharacterSet ( otherWithJMM ) else
1936: LD_ADDR_EXP 11
1940: PUSH
1941: LD_STRING otherWithJMM
1943: PPUSH
1944: CALL_OW 31
1948: ST_TO_ADDR
1949: GO 1958
// lidi_with_JMM = [ ] ;
1951: LD_ADDR_EXP 11
1955: PUSH
1956: EMPTY
1957: ST_TO_ADDR
// if TestVariable ( Stoupa9_siberit ) then
1958: LD_STRING Stoupa9_siberit
1960: PPUSH
1961: CALL_OW 27
1965: IFFALSE 1985
// MNOZSTVI_SIBERITU = LoadVariable ( Stoupa9_siberit , 200 ) else
1967: LD_ADDR_EXP 86
1971: PUSH
1972: LD_STRING Stoupa9_siberit
1974: PPUSH
1975: LD_INT 200
1977: PPUSH
1978: CALL_OW 30
1982: ST_TO_ADDR
1983: GO 1993
// MNOZSTVI_SIBERITU = 200 ;
1985: LD_ADDR_EXP 86
1989: PUSH
1990: LD_INT 200
1992: ST_TO_ADDR
// CYRL := LoadVariable ( CyrusLoc , 6 ) ;
1993: LD_ADDR_EXP 24
1997: PUSH
1998: LD_STRING CyrusLoc
2000: PPUSH
2001: LD_INT 6
2003: PPUSH
2004: CALL_OW 30
2008: ST_TO_ADDR
// end ; end_of_file
2009: LD_VAR 0 1
2013: RET
// export CREATOVANI_RUSKEHO_KONVOJE_LIST ; export CREATE_RUSKY_ATTACK1_LIST ; export CREATE_VOJACI_LIST ; export CREATE_2_NEW_ATTACK_LIST ; export CREATE_3_NEW_ATTACK_LIST ; export CREATE_BAZOOKA_ATTACK_LIST ; export RUSKY_UTOK_0_LIST ; export RUSSIAN_AFTER_END_ATTACK_LIST1 ; export RUSSIAN_AFTER_END_ATTACK_LIST2 ; export RUSSIAN_AFTER_END_ATTACK_LIST_FINAL ; export MECHANICI_NAVIC ; export CYRL ; export Amici_na_zacatku ; var ah , av ; var zo ; var pom ; var Missing ; var odebrano ; var osur ; export lidi_other ; export function prepare_human ( sex , clas , level , name ) ; begin
2014: LD_INT 0
2016: PPUSH
// PrepareHuman ( sex , clas , level ) ;
2017: LD_VAR 0 1
2021: PPUSH
2022: LD_VAR 0 2
2026: PPUSH
2027: LD_VAR 0 3
2031: PPUSH
2032: CALL_OW 380
// hc_name :=  ;
2036: LD_ADDR_OWVAR 26
2040: PUSH
2041: LD_STRING 
2043: ST_TO_ADDR
// end ;
2044: LD_VAR 0 5
2048: RET
// export function nacti_osobu ( ident ) ; begin
2049: LD_INT 0
2051: PPUSH
// if CheckCharacterSet ( ident ) then
2052: LD_VAR 0 1
2056: PPUSH
2057: CALL_OW 29
2061: IFFALSE 2080
// result := CreateCharacter ( ident ) else
2063: LD_ADDR_VAR 0 2
2067: PUSH
2068: LD_VAR 0 1
2072: PPUSH
2073: CALL_OW 34
2077: ST_TO_ADDR
2078: GO 2088
// result := 0 ;
2080: LD_ADDR_VAR 0 2
2084: PUSH
2085: LD_INT 0
2087: ST_TO_ADDR
// end ;
2088: LD_VAR 0 2
2092: RET
// export function create_arabi ; begin
2093: LD_INT 0
2095: PPUSH
// InitUc ;
2096: CALL_OW 18
// InitHc ;
2100: CALL_OW 19
// InitVc ;
2104: CALL_OW 20
// uc_side := Arabi ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_EXP 1
2117: ST_TO_ADDR
// uc_nation := nation_arabian ;
2118: LD_ADDR_OWVAR 21
2122: PUSH
2123: LD_INT 2
2125: ST_TO_ADDR
// uc_direction := 4 ;
2126: LD_ADDR_OWVAR 24
2130: PUSH
2131: LD_INT 4
2133: ST_TO_ADDR
// PlaceUnitXY ( Dietrich , 78 , 23 , false ) ;
2134: LD_EXP 27
2138: PPUSH
2139: LD_INT 78
2141: PPUSH
2142: LD_INT 23
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL_OW 48
// prepare_human ( sex_female , class_scientistic , 6 , Lucie Sebel ) ;
2152: LD_INT 2
2154: PPUSH
2155: LD_INT 4
2157: PPUSH
2158: LD_INT 6
2160: PPUSH
2161: LD_STRING Lucie Sebel
2163: PPUSH
2164: CALL 2014 0 4
// hc_skills = [ 2 , 3 , 1 , 5 ] ;
2168: LD_ADDR_OWVAR 31
2172: PUSH
2173: LD_INT 2
2175: PUSH
2176: LD_INT 3
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: LD_INT 5
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: ST_TO_ADDR
// ah = CreateHuman ;
2191: LD_ADDR_LOC 5
2195: PUSH
2196: CALL_OW 44
2200: ST_TO_ADDR
// LS = ah ;
2201: LD_ADDR_EXP 28
2205: PUSH
2206: LD_LOC 5
2210: ST_TO_ADDR
// PlaceUnitXY ( LS , 76 , 20 , false ) ;
2211: LD_EXP 28
2215: PPUSH
2216: LD_INT 76
2218: PPUSH
2219: LD_INT 20
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: CALL_OW 48
// prepare_human ( sex_male , class_engineer , 5 , Majdat Halabi ) ;
2229: LD_INT 1
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: LD_INT 5
2237: PPUSH
2238: LD_STRING Majdat Halabi
2240: PPUSH
2241: CALL 2014 0 4
// hc_skills = [ 4 , 3 , 1 , 4 ] ;
2245: LD_ADDR_OWVAR 31
2249: PUSH
2250: LD_INT 4
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: LD_INT 4
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: ST_TO_ADDR
// ah = CreateHuman ;
2268: LD_ADDR_LOC 5
2272: PUSH
2273: CALL_OW 44
2277: ST_TO_ADDR
// PlaceUnitXY ( ah , 77 , 20 , false ) ;
2278: LD_LOC 5
2282: PPUSH
2283: LD_INT 77
2285: PPUSH
2286: LD_INT 20
2288: PPUSH
2289: LD_INT 0
2291: PPUSH
2292: CALL_OW 48
// prepare_human ( sex_male , class_engineer , 5 , Bassam Hamshu ) ;
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 5
2304: PPUSH
2305: LD_STRING Bassam Hamshu
2307: PPUSH
2308: CALL 2014 0 4
// hc_skills = [ 4 , 3 , 0 , 4 ] ;
2312: LD_ADDR_OWVAR 31
2316: PUSH
2317: LD_INT 4
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 0
2325: PUSH
2326: LD_INT 4
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// ah = CreateHuman ;
2335: LD_ADDR_LOC 5
2339: PUSH
2340: CALL_OW 44
2344: ST_TO_ADDR
// PlaceUnitXY ( ah , 75 , 21 , false ) ;
2345: LD_LOC 5
2349: PPUSH
2350: LD_INT 75
2352: PPUSH
2353: LD_INT 21
2355: PPUSH
2356: LD_INT 0
2358: PPUSH
2359: CALL_OW 48
// prepare_human ( sex_male , class_engineer , 4 ,  ) ;
2363: LD_INT 1
2365: PPUSH
2366: LD_INT 2
2368: PPUSH
2369: LD_INT 4
2371: PPUSH
2372: LD_STRING 
2374: PPUSH
2375: CALL 2014 0 4
// hc_skills = [ 3 , 2 , 2 , 1 ] ;
2379: LD_ADDR_OWVAR 31
2383: PUSH
2384: LD_INT 3
2386: PUSH
2387: LD_INT 2
2389: PUSH
2390: LD_INT 2
2392: PUSH
2393: LD_INT 1
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: ST_TO_ADDR
// ah = CreateHuman ;
2402: LD_ADDR_LOC 5
2406: PUSH
2407: CALL_OW 44
2411: ST_TO_ADDR
// PlaceUnitXY ( ah , 67 , 19 , false ) ;
2412: LD_LOC 5
2416: PPUSH
2417: LD_INT 67
2419: PPUSH
2420: LD_INT 19
2422: PPUSH
2423: LD_INT 0
2425: PPUSH
2426: CALL_OW 48
// prepare_human ( sex_male , class_soldier , levelrusi [ difficulty ] ,  ) ;
2430: LD_INT 1
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: LD_EXP 61
2440: PUSH
2441: LD_OWVAR 67
2445: ARRAY
2446: PPUSH
2447: LD_STRING 
2449: PPUSH
2450: CALL 2014 0 4
// tapkal = CreateHuman ;
2454: LD_ADDR_EXP 29
2458: PUSH
2459: CALL_OW 44
2463: ST_TO_ADDR
// PlaceUnitXYR ( tapkal , 73 , 20 , 5 , false ) ;
2464: LD_EXP 29
2468: PPUSH
2469: LD_INT 73
2471: PPUSH
2472: LD_INT 20
2474: PPUSH
2475: LD_INT 5
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 50
// end ;
2485: LD_VAR 0 1
2489: RET
// export function create_am_vedci ; var vojaci ; var i ; var lidi_na_vyber_1 ; var lidi_na_vyber_2 ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
// Missing := 0 ;
2497: LD_ADDR_LOC 9
2501: PUSH
2502: LD_INT 0
2504: ST_TO_ADDR
// uc_side := You2 ;
2505: LD_ADDR_OWVAR 20
2509: PUSH
2510: LD_EXP 6
2514: ST_TO_ADDR
// uc_nation := nation_american ;
2515: LD_ADDR_OWVAR 21
2519: PUSH
2520: LD_INT 1
2522: ST_TO_ADDR
// uc_direction := 4 ;
2523: LD_ADDR_OWVAR 24
2527: PUSH
2528: LD_INT 4
2530: ST_TO_ADDR
// Amici_na_zacatku = [ ] ;
2531: LD_ADDR_EXP 25
2535: PUSH
2536: EMPTY
2537: ST_TO_ADDR
// if Cyrus = 0 or CYRL <> 6 then
2538: LD_EXP 47
2542: PUSH
2543: LD_INT 0
2545: EQUAL
2546: PUSH
2547: LD_EXP 24
2551: PUSH
2552: LD_INT 6
2554: NONEQUAL
2555: OR
2556: IFFALSE 2574
// Missing := Missing + 10 else
2558: LD_ADDR_LOC 9
2562: PUSH
2563: LD_LOC 9
2567: PUSH
2568: LD_INT 10
2570: PLUS
2571: ST_TO_ADDR
2572: GO 2631
// begin PlaceUnitArea ( Cyrus , EAmici , false ) ;
2574: LD_EXP 47
2578: PPUSH
2579: LD_INT 43
2581: PPUSH
2582: LD_INT 0
2584: PPUSH
2585: CALL_OW 49
// SetClass ( Cyrus , class_soldier ) ;
2589: LD_EXP 47
2593: PPUSH
2594: LD_INT 1
2596: PPUSH
2597: CALL_OW 336
// SetSide ( Cyrus , You2 ) ;
2601: LD_EXP 47
2605: PPUSH
2606: LD_EXP 6
2610: PPUSH
2611: CALL_OW 235
// Amici_na_zacatku = Amici_na_zacatku ^ Cyrus ;
2615: LD_ADDR_EXP 25
2619: PUSH
2620: LD_EXP 25
2624: PUSH
2625: LD_EXP 47
2629: ADD
2630: ST_TO_ADDR
// end ; if Khattam = 0 then
2631: LD_EXP 45
2635: PUSH
2636: LD_INT 0
2638: EQUAL
2639: IFFALSE 2657
// Missing := Missing + 10 else
2641: LD_ADDR_LOC 9
2645: PUSH
2646: LD_LOC 9
2650: PUSH
2651: LD_INT 10
2653: PLUS
2654: ST_TO_ADDR
2655: GO 2714
// begin PlaceUnitArea ( Khattam , EAmici , false ) ;
2657: LD_EXP 45
2661: PPUSH
2662: LD_INT 43
2664: PPUSH
2665: LD_INT 0
2667: PPUSH
2668: CALL_OW 49
// SetClass ( Khattam , class_soldier ) ;
2672: LD_EXP 45
2676: PPUSH
2677: LD_INT 1
2679: PPUSH
2680: CALL_OW 336
// SetSide ( Khattam , You2 ) ;
2684: LD_EXP 45
2688: PPUSH
2689: LD_EXP 6
2693: PPUSH
2694: CALL_OW 235
// Amici_na_zacatku = Amici_na_zacatku ^ Khattam ;
2698: LD_ADDR_EXP 25
2702: PUSH
2703: LD_EXP 25
2707: PUSH
2708: LD_EXP 45
2712: ADD
2713: ST_TO_ADDR
// end ; PlaceUnitArea ( Simms , EAmici , false ) ;
2714: LD_EXP 46
2718: PPUSH
2719: LD_INT 43
2721: PPUSH
2722: LD_INT 0
2724: PPUSH
2725: CALL_OW 49
// SetSide ( Simms , You2 ) ;
2729: LD_EXP 46
2733: PPUSH
2734: LD_EXP 6
2738: PPUSH
2739: CALL_OW 235
// Amici_na_zacatku = Amici_na_zacatku ^ Simms ;
2743: LD_ADDR_EXP 25
2747: PUSH
2748: LD_EXP 25
2752: PUSH
2753: LD_EXP 46
2757: ADD
2758: ST_TO_ADDR
// if Joan_F = 0 then
2759: LD_EXP 43
2763: PUSH
2764: LD_INT 0
2766: EQUAL
2767: IFFALSE 2785
// Missing := Missing + 1 else
2769: LD_ADDR_LOC 9
2773: PUSH
2774: LD_LOC 9
2778: PUSH
2779: LD_INT 1
2781: PLUS
2782: ST_TO_ADDR
2783: GO 2842
// begin PlaceUnitArea ( Joan_F , EAmici , false ) ;
2785: LD_EXP 43
2789: PPUSH
2790: LD_INT 43
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// SetClass ( Joan_F , class_scientistic ) ;
2800: LD_EXP 43
2804: PPUSH
2805: LD_INT 4
2807: PPUSH
2808: CALL_OW 336
// SetSide ( Joan_F , You2 ) ;
2812: LD_EXP 43
2816: PPUSH
2817: LD_EXP 6
2821: PPUSH
2822: CALL_OW 235
// Amici_na_zacatku = Amici_na_zacatku ^ Joan_F ;
2826: LD_ADDR_EXP 25
2830: PUSH
2831: LD_EXP 25
2835: PUSH
2836: LD_EXP 43
2840: ADD
2841: ST_TO_ADDR
// end ; if Denis = 0 then
2842: LD_EXP 48
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 2868
// Missing = Missing + 1 else
2852: LD_ADDR_LOC 9
2856: PUSH
2857: LD_LOC 9
2861: PUSH
2862: LD_INT 1
2864: PLUS
2865: ST_TO_ADDR
2866: GO 2925
// begin SetClass ( Denis , class_scientistic ) ;
2868: LD_EXP 48
2872: PPUSH
2873: LD_INT 4
2875: PPUSH
2876: CALL_OW 336
// SetSide ( Denis , You2 ) ;
2880: LD_EXP 48
2884: PPUSH
2885: LD_EXP 6
2889: PPUSH
2890: CALL_OW 235
// PlaceUnitArea ( Denis , EAmici , false ) ;
2894: LD_EXP 48
2898: PPUSH
2899: LD_INT 43
2901: PPUSH
2902: LD_INT 0
2904: PPUSH
2905: CALL_OW 49
// Amici_na_zacatku = Amici_na_zacatku ^ Denis ;
2909: LD_ADDR_EXP 25
2913: PUSH
2914: LD_EXP 25
2918: PUSH
2919: LD_EXP 48
2923: ADD
2924: ST_TO_ADDR
// end ; vojaci = [ ] ;
2925: LD_ADDR_VAR 0 2
2929: PUSH
2930: EMPTY
2931: ST_TO_ADDR
// for i in lidi_with_JMM do
2932: LD_ADDR_VAR 0 3
2936: PUSH
2937: LD_EXP 11
2941: PUSH
2942: FOR_IN
2943: IFFALSE 2981
// if GetSkill ( i , skill_combat ) >= 4 then
2945: LD_VAR 0 3
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: CALL_OW 259
2957: PUSH
2958: LD_INT 4
2960: GREATEREQUAL
2961: IFFALSE 2979
// vojaci = vojaci ^ i ;
2963: LD_ADDR_VAR 0 2
2967: PUSH
2968: LD_VAR 0 2
2972: PUSH
2973: LD_VAR 0 3
2977: ADD
2978: ST_TO_ADDR
2979: GO 2942
2981: POP
2982: POP
// if vojaci < 2 then
2983: LD_VAR 0 2
2987: PUSH
2988: LD_INT 2
2990: LESS
2991: IFFALSE 3044
// for i in lidi_other_surv do
2993: LD_ADDR_VAR 0 3
2997: PUSH
2998: LD_EXP 10
3002: PUSH
3003: FOR_IN
3004: IFFALSE 3042
// if GetSkill ( i , skill_combat ) >= 4 then
3006: LD_VAR 0 3
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: CALL_OW 259
3018: PUSH
3019: LD_INT 4
3021: GREATEREQUAL
3022: IFFALSE 3040
// vojaci = vojaci ^ i ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: LD_VAR 0 2
3033: PUSH
3034: LD_VAR 0 3
3038: ADD
3039: ST_TO_ADDR
3040: GO 3003
3042: POP
3043: POP
// odebrano = [ ] ;
3044: LD_ADDR_LOC 10
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// while Missing >= 10 do
3051: LD_LOC 9
3055: PUSH
3056: LD_INT 10
3058: GREATEREQUAL
3059: IFFALSE 3202
// begin if vojaci = 0 then
3061: LD_VAR 0 2
3065: PUSH
3066: LD_INT 0
3068: EQUAL
3069: IFFALSE 3099
// begin prepare_human ( sex_male , class_soldier , 5 ,  ) ;
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 5
3079: PPUSH
3080: LD_STRING 
3082: PPUSH
3083: CALL 2014 0 4
// ah = CreateHuman ;
3087: LD_ADDR_LOC 5
3091: PUSH
3092: CALL_OW 44
3096: ST_TO_ADDR
// end else
3097: GO 3171
// begin ah = vojaci [ 1 ] ;
3099: LD_ADDR_LOC 5
3103: PUSH
3104: LD_VAR 0 2
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: ST_TO_ADDR
// vojaci = vojaci diff ah ;
3113: LD_ADDR_VAR 0 2
3117: PUSH
3118: LD_VAR 0 2
3122: PUSH
3123: LD_LOC 5
3127: DIFF
3128: ST_TO_ADDR
// odebrano = odebrano ^ ah ;
3129: LD_ADDR_LOC 10
3133: PUSH
3134: LD_LOC 10
3138: PUSH
3139: LD_LOC 5
3143: ADD
3144: ST_TO_ADDR
// SetClass ( ah , class_soldier ) ;
3145: LD_LOC 5
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 336
// SetSide ( ah , You2 ) ;
3157: LD_LOC 5
3161: PPUSH
3162: LD_EXP 6
3166: PPUSH
3167: CALL_OW 235
// end ; PlaceUnitArea ( ah , EAmici , false ) ;
3171: LD_LOC 5
3175: PPUSH
3176: LD_INT 43
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
// Missing := Missing - 10 ;
3186: LD_ADDR_LOC 9
3190: PUSH
3191: LD_LOC 9
3195: PUSH
3196: LD_INT 10
3198: MINUS
3199: ST_TO_ADDR
// end ;
3200: GO 3051
// Amici_na_zacatku = Amici_na_zacatku ^ odebrano ;
3202: LD_ADDR_EXP 25
3206: PUSH
3207: LD_EXP 25
3211: PUSH
3212: LD_LOC 10
3216: ADD
3217: ST_TO_ADDR
// lidi_na_vyber_1 = lidi_with_JMM diff odebrano ;
3218: LD_ADDR_VAR 0 4
3222: PUSH
3223: LD_EXP 11
3227: PUSH
3228: LD_LOC 10
3232: DIFF
3233: ST_TO_ADDR
// lidi_na_vyber_2 = lidi_other_surv diff odebrano ;
3234: LD_ADDR_VAR 0 5
3238: PUSH
3239: LD_EXP 10
3243: PUSH
3244: LD_LOC 10
3248: DIFF
3249: ST_TO_ADDR
// vojaci = [ ] ;
3250: LD_ADDR_VAR 0 2
3254: PUSH
3255: EMPTY
3256: ST_TO_ADDR
// for i in lidi_na_vyber_1 do
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_VAR 0 4
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3306
// if GetSkill ( i , skill_scientistic ) >= 4 then
3270: LD_VAR 0 3
3274: PPUSH
3275: LD_INT 4
3277: PPUSH
3278: CALL_OW 259
3282: PUSH
3283: LD_INT 4
3285: GREATEREQUAL
3286: IFFALSE 3304
// vojaci = vojaci ^ i ;
3288: LD_ADDR_VAR 0 2
3292: PUSH
3293: LD_VAR 0 2
3297: PUSH
3298: LD_VAR 0 3
3302: ADD
3303: ST_TO_ADDR
3304: GO 3267
3306: POP
3307: POP
// if vojaci = 0 then
3308: LD_VAR 0 2
3312: PUSH
3313: LD_INT 0
3315: EQUAL
3316: IFFALSE 3369
// for i in lidi_na_vyber_2 do
3318: LD_ADDR_VAR 0 3
3322: PUSH
3323: LD_VAR 0 5
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3367
// if GetSkill ( i , skill_scientistic ) >= 4 then
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 4
3338: PPUSH
3339: CALL_OW 259
3343: PUSH
3344: LD_INT 4
3346: GREATEREQUAL
3347: IFFALSE 3365
// vojaci = vojaci ^ i ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: LD_VAR 0 2
3358: PUSH
3359: LD_VAR 0 3
3363: ADD
3364: ST_TO_ADDR
3365: GO 3328
3367: POP
3368: POP
// while Missing >= 1 do
3369: LD_LOC 9
3373: PUSH
3374: LD_INT 1
3376: GREATEREQUAL
3377: IFFALSE 3520
// begin if vojaci = 0 then
3379: LD_VAR 0 2
3383: PUSH
3384: LD_INT 0
3386: EQUAL
3387: IFFALSE 3417
// begin prepare_human ( sex_male , class_scientistic , 5 ,  ) ;
3389: LD_INT 1
3391: PPUSH
3392: LD_INT 4
3394: PPUSH
3395: LD_INT 5
3397: PPUSH
3398: LD_STRING 
3400: PPUSH
3401: CALL 2014 0 4
// ah = CreateHuman ;
3405: LD_ADDR_LOC 5
3409: PUSH
3410: CALL_OW 44
3414: ST_TO_ADDR
// end else
3415: GO 3489
// begin ah = vojaci [ 1 ] ;
3417: LD_ADDR_LOC 5
3421: PUSH
3422: LD_VAR 0 2
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: ST_TO_ADDR
// vojaci = vojaci diff ah ;
3431: LD_ADDR_VAR 0 2
3435: PUSH
3436: LD_VAR 0 2
3440: PUSH
3441: LD_LOC 5
3445: DIFF
3446: ST_TO_ADDR
// odebrano = odebrano ^ ah ;
3447: LD_ADDR_LOC 10
3451: PUSH
3452: LD_LOC 10
3456: PUSH
3457: LD_LOC 5
3461: ADD
3462: ST_TO_ADDR
// SetClass ( ah , class_scientistic ) ;
3463: LD_LOC 5
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: CALL_OW 336
// SetSide ( ah , You2 ) ;
3475: LD_LOC 5
3479: PPUSH
3480: LD_EXP 6
3484: PPUSH
3485: CALL_OW 235
// end ; PlaceUnitArea ( ah , EAmici , false ) ;
3489: LD_LOC 5
3493: PPUSH
3494: LD_INT 43
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 49
// Missing := Missing - 1 ;
3504: LD_ADDR_LOC 9
3508: PUSH
3509: LD_LOC 9
3513: PUSH
3514: LD_INT 1
3516: MINUS
3517: ST_TO_ADDR
// end ;
3518: GO 3369
// Amici_na_zacatku = Amici_na_zacatku ^ odebrano ;
3520: LD_ADDR_EXP 25
3524: PUSH
3525: LD_EXP 25
3529: PUSH
3530: LD_LOC 10
3534: ADD
3535: ST_TO_ADDR
// Amici_ar = Amici_na_zacatku ;
3536: LD_ADDR_EXP 34
3540: PUSH
3541: LD_EXP 25
3545: ST_TO_ADDR
// RevealFogArea ( Arabi , RFA1 ) ;
3546: LD_EXP 1
3550: PPUSH
3551: LD_INT 25
3553: PPUSH
3554: CALL_OW 332
// end ;
3558: LD_VAR 0 1
3562: RET
// export function create_amici1 ; var lidi_vyber ; var i ; begin
3563: LD_INT 0
3565: PPUSH
3566: PPUSH
3567: PPUSH
// uc_side := You ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_EXP 3
3577: ST_TO_ADDR
// uc_nation := nation_american ;
3578: LD_ADDR_OWVAR 21
3582: PUSH
3583: LD_INT 1
3585: ST_TO_ADDR
// uc_direction := 1 ;
3586: LD_ADDR_OWVAR 24
3590: PUSH
3591: LD_INT 1
3593: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
3594: LD_ADDR_OWVAR 37
3598: PUSH
3599: LD_INT 3
3601: ST_TO_ADDR
// vc_control := control_manual ;
3602: LD_ADDR_OWVAR 38
3606: PUSH
3607: LD_INT 1
3609: ST_TO_ADDR
// vc_engine := engine_combustion ;
3610: LD_ADDR_OWVAR 39
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3618: LD_ADDR_OWVAR 40
3622: PUSH
3623: LD_INT 12
3625: ST_TO_ADDR
// av = CreateVehicle ;
3626: LD_ADDR_LOC 6
3630: PUSH
3631: CALL_OW 45
3635: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
3636: LD_EXP 42
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL_OW 336
// SetSide ( JMM , You ) ;
3648: LD_EXP 42
3652: PPUSH
3653: LD_EXP 3
3657: PPUSH
3658: CALL_OW 235
// PlaceHumanInUnit ( JMM , av ) ;
3662: LD_EXP 42
3666: PPUSH
3667: LD_LOC 6
3671: PPUSH
3672: CALL_OW 52
// PlaceUnitArea ( av , EnterAM , false ) ;
3676: LD_LOC 6
3680: PPUSH
3681: LD_INT 3
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 49
// AddCargo ( av , mat_oil , 20 ) ;
3691: LD_LOC 6
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_INT 20
3701: PPUSH
3702: CALL_OW 291
// AddCargo ( av , mat_cans , 80 ) ;
3706: LD_LOC 6
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_INT 80
3716: PPUSH
3717: CALL_OW 291
// Amici_na_zacatku = Amici_na_zacatku ^ JMM ;
3721: LD_ADDR_EXP 25
3725: PUSH
3726: LD_EXP 25
3730: PUSH
3731: LD_EXP 42
3735: ADD
3736: ST_TO_ADDR
// av = CreateVehicle ;
3737: LD_ADDR_LOC 6
3741: PUSH
3742: CALL_OW 45
3746: ST_TO_ADDR
// SetClass ( Gary , class_soldier ) ;
3747: LD_EXP 44
3751: PPUSH
3752: LD_INT 1
3754: PPUSH
3755: CALL_OW 336
// SetSide ( Gary , You ) ;
3759: LD_EXP 44
3763: PPUSH
3764: LD_EXP 3
3768: PPUSH
3769: CALL_OW 235
// PlaceHumanInUnit ( Gary , av ) ;
3773: LD_EXP 44
3777: PPUSH
3778: LD_LOC 6
3782: PPUSH
3783: CALL_OW 52
// PlaceUnitArea ( av , EnterAM , false ) ;
3787: LD_LOC 6
3791: PPUSH
3792: LD_INT 3
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: CALL_OW 49
// AddCargo ( av , mat_oil , 10 ) ;
3802: LD_LOC 6
3806: PPUSH
3807: LD_INT 2
3809: PPUSH
3810: LD_INT 10
3812: PPUSH
3813: CALL_OW 291
// AddCargo ( av , mat_cans , 90 ) ;
3817: LD_LOC 6
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 90
3827: PPUSH
3828: CALL_OW 291
// lidi_vyber = [ ] ;
3832: LD_ADDR_VAR 0 2
3836: PUSH
3837: EMPTY
3838: ST_TO_ADDR
// for i in lidi_with_JMM diff Amici_na_zacatku do
3839: LD_ADDR_VAR 0 3
3843: PUSH
3844: LD_EXP 11
3848: PUSH
3849: LD_EXP 25
3853: DIFF
3854: PUSH
3855: FOR_IN
3856: IFFALSE 3894
// if GetSkill ( i , skill_engineering ) > 3 then
3858: LD_VAR 0 3
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 259
3870: PUSH
3871: LD_INT 3
3873: GREATER
3874: IFFALSE 3892
// lidi_vyber = lidi_vyber ^ i ;
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: LD_VAR 0 2
3885: PUSH
3886: LD_VAR 0 3
3890: ADD
3891: ST_TO_ADDR
3892: GO 3855
3894: POP
3895: POP
// if lidi_vyber = 0 then
3896: LD_VAR 0 2
3900: PUSH
3901: LD_INT 0
3903: EQUAL
3904: IFFALSE 3963
// for i in lidi_other_surv diff Amici_na_zacatku do
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: LD_EXP 10
3915: PUSH
3916: LD_EXP 25
3920: DIFF
3921: PUSH
3922: FOR_IN
3923: IFFALSE 3961
// if GetSkill ( i , skill_engineering ) > 3 then
3925: LD_VAR 0 3
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: CALL_OW 259
3937: PUSH
3938: LD_INT 3
3940: GREATER
3941: IFFALSE 3959
// lidi_vyber = lidi_vyber ^ i ;
3943: LD_ADDR_VAR 0 2
3947: PUSH
3948: LD_VAR 0 2
3952: PUSH
3953: LD_VAR 0 3
3957: ADD
3958: ST_TO_ADDR
3959: GO 3922
3961: POP
3962: POP
// if lidi_vyber = 0 then
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 0
3970: EQUAL
3971: IFFALSE 4001
// begin prepare_human ( sex_male , class_engineer , 5 , Johny Muscle ) ;
3973: LD_INT 1
3975: PPUSH
3976: LD_INT 2
3978: PPUSH
3979: LD_INT 5
3981: PPUSH
3982: LD_STRING Johny Muscle
3984: PPUSH
3985: CALL 2014 0 4
// pom = CreateHuman ;
3989: LD_ADDR_LOC 8
3993: PUSH
3994: CALL_OW 44
3998: ST_TO_ADDR
// end else
3999: GO 4069
// begin ah = lidi_vyber [ 1 ] ;
4001: LD_ADDR_LOC 5
4005: PUSH
4006: LD_VAR 0 2
4010: PUSH
4011: LD_INT 1
4013: ARRAY
4014: ST_TO_ADDR
// lidi_vyber = lidi_vyber diff ah ;
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: LD_VAR 0 2
4024: PUSH
4025: LD_LOC 5
4029: DIFF
4030: ST_TO_ADDR
// odebrano = odebrano ^ ah ;
4031: LD_ADDR_LOC 10
4035: PUSH
4036: LD_LOC 10
4040: PUSH
4041: LD_LOC 5
4045: ADD
4046: ST_TO_ADDR
// SetClass ( ah , class_engineer ) ;
4047: LD_LOC 5
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL_OW 336
// pom = ah ;
4059: LD_ADDR_LOC 8
4063: PUSH
4064: LD_LOC 5
4068: ST_TO_ADDR
// end ; av = CreateVehicle ;
4069: LD_ADDR_LOC 6
4073: PUSH
4074: CALL_OW 45
4078: ST_TO_ADDR
// PlaceHumanInUnit ( pom , av ) ;
4079: LD_LOC 8
4083: PPUSH
4084: LD_LOC 6
4088: PPUSH
4089: CALL_OW 52
// Amici_na_zacatku = Amici_na_zacatku ^ pom ;
4093: LD_ADDR_EXP 25
4097: PUSH
4098: LD_EXP 25
4102: PUSH
4103: LD_LOC 8
4107: ADD
4108: ST_TO_ADDR
// PlaceUnitArea ( av , EnterAM , false ) ;
4109: LD_LOC 6
4113: PPUSH
4114: LD_INT 3
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// if MNOZSTVI_SIBERITU >= 200 then
4124: LD_EXP 86
4128: PUSH
4129: LD_INT 200
4131: GREATEREQUAL
4132: IFFALSE 4151
// AddCargo ( av , mat_siberit , 100 ) else
4134: LD_LOC 6
4138: PPUSH
4139: LD_INT 3
4141: PPUSH
4142: LD_INT 100
4144: PPUSH
4145: CALL_OW 291
4149: GO 4199
// if MNOZSTVI_SIBERITU <= 100 then
4151: LD_EXP 86
4155: PUSH
4156: LD_INT 100
4158: LESSEQUAL
4159: IFFALSE 4178
// AddCargo ( av , mat_cans , 30 ) else
4161: LD_LOC 6
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 30
4171: PPUSH
4172: CALL_OW 291
4176: GO 4199
// AddCargo ( av , mat_siberit , MNOZSTVI_SIBERITU - 100 ) ;
4178: LD_LOC 6
4182: PPUSH
4183: LD_INT 3
4185: PPUSH
4186: LD_EXP 86
4190: PUSH
4191: LD_INT 100
4193: MINUS
4194: PPUSH
4195: CALL_OW 291
// lidi_vyber = [ ] ;
4199: LD_ADDR_VAR 0 2
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// for i in lidi_with_JMM diff odebrano do
4206: LD_ADDR_VAR 0 3
4210: PUSH
4211: LD_EXP 11
4215: PUSH
4216: LD_LOC 10
4220: DIFF
4221: PUSH
4222: FOR_IN
4223: IFFALSE 4261
// if GetSkill ( i , skill_mechanical ) > 3 then
4225: LD_VAR 0 3
4229: PPUSH
4230: LD_INT 3
4232: PPUSH
4233: CALL_OW 259
4237: PUSH
4238: LD_INT 3
4240: GREATER
4241: IFFALSE 4259
// lidi_vyber = lidi_vyber ^ i ;
4243: LD_ADDR_VAR 0 2
4247: PUSH
4248: LD_VAR 0 2
4252: PUSH
4253: LD_VAR 0 3
4257: ADD
4258: ST_TO_ADDR
4259: GO 4222
4261: POP
4262: POP
// if lidi_vyber < 2 then
4263: LD_VAR 0 2
4267: PUSH
4268: LD_INT 2
4270: LESS
4271: IFFALSE 4330
// for i in lidi_other_surv diff odebrano do
4273: LD_ADDR_VAR 0 3
4277: PUSH
4278: LD_EXP 10
4282: PUSH
4283: LD_LOC 10
4287: DIFF
4288: PUSH
4289: FOR_IN
4290: IFFALSE 4328
// if GetSkill ( i , skill_mechanical ) > 3 then
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 3
4299: PPUSH
4300: CALL_OW 259
4304: PUSH
4305: LD_INT 3
4307: GREATER
4308: IFFALSE 4326
// lidi_vyber = lidi_vyber ^ i ;
4310: LD_ADDR_VAR 0 2
4314: PUSH
4315: LD_VAR 0 2
4319: PUSH
4320: LD_VAR 0 3
4324: ADD
4325: ST_TO_ADDR
4326: GO 4289
4328: POP
4329: POP
// if lidi_vyber = 0 then
4330: LD_VAR 0 2
4334: PUSH
4335: LD_INT 0
4337: EQUAL
4338: IFFALSE 4368
// begin prepare_human ( sex_male , class_mechanic , 5 , Thomas Ezendam ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: LD_INT 5
4348: PPUSH
4349: LD_STRING Thomas Ezendam
4351: PPUSH
4352: CALL 2014 0 4
// ah = CreateHuman ;
4356: LD_ADDR_LOC 5
4360: PUSH
4361: CALL_OW 44
4365: ST_TO_ADDR
// end else
4366: GO 4426
// begin ah = lidi_vyber [ 1 ] ;
4368: LD_ADDR_LOC 5
4372: PUSH
4373: LD_VAR 0 2
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: ST_TO_ADDR
// lidi_vyber = lidi_vyber diff ah ;
4382: LD_ADDR_VAR 0 2
4386: PUSH
4387: LD_VAR 0 2
4391: PUSH
4392: LD_LOC 5
4396: DIFF
4397: ST_TO_ADDR
// odebrano = odebrano ^ ah ;
4398: LD_ADDR_LOC 10
4402: PUSH
4403: LD_LOC 10
4407: PUSH
4408: LD_LOC 5
4412: ADD
4413: ST_TO_ADDR
// SetClass ( ah , class_mechanic ) ;
4414: LD_LOC 5
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: CALL_OW 336
// end ; Amici_na_zacatku = Amici_na_zacatku ^ ah ;
4426: LD_ADDR_EXP 25
4430: PUSH
4431: LD_EXP 25
4435: PUSH
4436: LD_LOC 5
4440: ADD
4441: ST_TO_ADDR
// av = CreateVehicle ;
4442: LD_ADDR_LOC 6
4446: PUSH
4447: CALL_OW 45
4451: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
4452: LD_LOC 5
4456: PPUSH
4457: LD_LOC 6
4461: PPUSH
4462: CALL_OW 52
// PlaceUnitArea ( av , EnterAM , false ) ;
4466: LD_LOC 6
4470: PPUSH
4471: LD_INT 3
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 49
// if MNOZSTVI_SIBERITU >= 100 then
4481: LD_EXP 86
4485: PUSH
4486: LD_INT 100
4488: GREATEREQUAL
4489: IFFALSE 4508
// AddCargo ( av , mat_siberit , 100 ) else
4491: LD_LOC 6
4495: PPUSH
4496: LD_INT 3
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 291
4506: GO 4525
// AddCargo ( av , mat_siberit , MNOZSTVI_SIBERITU ) ;
4508: LD_LOC 6
4512: PPUSH
4513: LD_INT 3
4515: PPUSH
4516: LD_EXP 86
4520: PPUSH
4521: CALL_OW 291
// if MNOZSTVI_SIBERITU > 200 then
4525: LD_EXP 86
4529: PUSH
4530: LD_INT 200
4532: GREATER
4533: IFFALSE 4691
// begin if lidi_vyber = 0 then
4535: LD_VAR 0 2
4539: PUSH
4540: LD_INT 0
4542: EQUAL
4543: IFFALSE 4573
// begin prepare_human ( sex_male , class_mechanic , 5 ,  ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 3
4550: PPUSH
4551: LD_INT 5
4553: PPUSH
4554: LD_STRING 
4556: PPUSH
4557: CALL 2014 0 4
// ah = CreateHuman ;
4561: LD_ADDR_LOC 5
4565: PUSH
4566: CALL_OW 44
4570: ST_TO_ADDR
// end else
4571: GO 4631
// begin ah = lidi_vyber [ 1 ] ;
4573: LD_ADDR_LOC 5
4577: PUSH
4578: LD_VAR 0 2
4582: PUSH
4583: LD_INT 1
4585: ARRAY
4586: ST_TO_ADDR
// lidi_vyber = lidi_vyber diff ah ;
4587: LD_ADDR_VAR 0 2
4591: PUSH
4592: LD_VAR 0 2
4596: PUSH
4597: LD_LOC 5
4601: DIFF
4602: ST_TO_ADDR
// odebrano = odebrano ^ ah ;
4603: LD_ADDR_LOC 10
4607: PUSH
4608: LD_LOC 10
4612: PUSH
4613: LD_LOC 5
4617: ADD
4618: ST_TO_ADDR
// SetClass ( ah , class_mechanic ) ;
4619: LD_LOC 5
4623: PPUSH
4624: LD_INT 3
4626: PPUSH
4627: CALL_OW 336
// end ; av = CreateVehicle ;
4631: LD_ADDR_LOC 6
4635: PUSH
4636: CALL_OW 45
4640: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
4641: LD_LOC 5
4645: PPUSH
4646: LD_LOC 6
4650: PPUSH
4651: CALL_OW 52
// PlaceUnitArea ( av , EnterAM , false ) ;
4655: LD_LOC 6
4659: PPUSH
4660: LD_INT 3
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 49
// AddCargo ( av , mat_siberit , MNOZSTVI_SIBERITU - 200 ) ;
4670: LD_LOC 6
4674: PPUSH
4675: LD_INT 3
4677: PPUSH
4678: LD_EXP 86
4682: PUSH
4683: LD_INT 200
4685: MINUS
4686: PPUSH
4687: CALL_OW 291
// end ; Amici_na_zacatku = Amici_na_zacatku ^ ah ;
4691: LD_ADDR_EXP 25
4695: PUSH
4696: LD_EXP 25
4700: PUSH
4701: LD_LOC 5
4705: ADD
4706: ST_TO_ADDR
// if MNOZSTVI_SIBERITU > 350 then
4707: LD_EXP 86
4711: PUSH
4712: LD_INT 350
4714: GREATER
4715: IFFALSE 4724
// Msg ( ERROR: STOUPA JE IDIOT ) ;
4717: LD_STRING ERROR: STOUPA JE IDIOT
4719: PPUSH
4720: CALL_OW 100
// end ;
4724: LD_VAR 0 1
4728: RET
// export function create_konvoj_ru ( nah ) ; begin
4729: LD_INT 0
4731: PPUSH
// uc_side := Rusi ;
4732: LD_ADDR_OWVAR 20
4736: PUSH
4737: LD_EXP 2
4741: ST_TO_ADDR
// uc_nation := nation_russian ;
4742: LD_ADDR_OWVAR 21
4746: PUSH
4747: LD_INT 3
4749: ST_TO_ADDR
// uc_direction := 4 ;
4750: LD_ADDR_OWVAR 24
4754: PUSH
4755: LD_INT 4
4757: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , levelrusi [ difficulty ] , Boris Gavrilov ) ;
4758: LD_INT 1
4760: PPUSH
4761: LD_INT 2
4763: PPUSH
4764: LD_EXP 61
4768: PUSH
4769: LD_OWVAR 67
4773: ARRAY
4774: PPUSH
4775: LD_STRING Boris Gavrilov
4777: PPUSH
4778: CALL 2014 0 4
// ah = CreateHuman ;
4782: LD_ADDR_LOC 5
4786: PUSH
4787: CALL_OW 44
4791: ST_TO_ADDR
// pom = [ ah ] ;
4792: LD_ADDR_LOC 8
4796: PUSH
4797: LD_LOC 5
4801: PUSH
4802: EMPTY
4803: LIST
4804: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , levelrusi [ difficulty ] , Boris Glavacenko ) ;
4805: LD_INT 1
4807: PPUSH
4808: LD_INT 3
4810: PPUSH
4811: LD_EXP 61
4815: PUSH
4816: LD_OWVAR 67
4820: ARRAY
4821: PPUSH
4822: LD_STRING Boris Glavacenko
4824: PPUSH
4825: CALL 2014 0 4
// ah = CreateHuman ;
4829: LD_ADDR_LOC 5
4833: PUSH
4834: CALL_OW 44
4838: ST_TO_ADDR
// pom = pom ^ ah ;
4839: LD_ADDR_LOC 8
4843: PUSH
4844: LD_LOC 8
4848: PUSH
4849: LD_LOC 5
4853: ADD
4854: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , levelrusi [ difficulty ] , Vladimir P. Scbakov ) ;
4855: LD_INT 1
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: LD_EXP 61
4865: PUSH
4866: LD_OWVAR 67
4870: ARRAY
4871: PPUSH
4872: LD_STRING Vladimir P. Scbakov
4874: PPUSH
4875: CALL 2014 0 4
// ah = CreateHuman ;
4879: LD_ADDR_LOC 5
4883: PUSH
4884: CALL_OW 44
4888: ST_TO_ADDR
// pom = pom ^ ah ;
4889: LD_ADDR_LOC 8
4893: PUSH
4894: LD_LOC 8
4898: PUSH
4899: LD_LOC 5
4903: ADD
4904: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , levelrusi [ difficulty ] , Nikolaj Sutjagin ) ;
4905: LD_INT 1
4907: PPUSH
4908: LD_INT 1
4910: PPUSH
4911: LD_EXP 61
4915: PUSH
4916: LD_OWVAR 67
4920: ARRAY
4921: PPUSH
4922: LD_STRING Nikolaj Sutjagin
4924: PPUSH
4925: CALL 2014 0 4
// ah = CreateHuman ;
4929: LD_ADDR_LOC 5
4933: PUSH
4934: CALL_OW 44
4938: ST_TO_ADDR
// pom = pom ^ ah ;
4939: LD_ADDR_LOC 8
4943: PUSH
4944: LD_LOC 8
4948: PUSH
4949: LD_LOC 5
4953: ADD
4954: ST_TO_ADDR
// prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] - 1 , Jevgenij Pepeljajev ) ;
4955: LD_INT 1
4957: PPUSH
4958: LD_INT 9
4960: PPUSH
4961: LD_EXP 61
4965: PUSH
4966: LD_OWVAR 67
4970: ARRAY
4971: PUSH
4972: LD_INT 1
4974: MINUS
4975: PPUSH
4976: LD_STRING Jevgenij Pepeljajev
4978: PPUSH
4979: CALL 2014 0 4
// ah = CreateHuman ;
4983: LD_ADDR_LOC 5
4987: PUSH
4988: CALL_OW 44
4992: ST_TO_ADDR
// pom = pom ^ ah ;
4993: LD_ADDR_LOC 8
4997: PUSH
4998: LD_LOC 8
5002: PUSH
5003: LD_LOC 5
5007: ADD
5008: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , levelrusi [ difficulty ] , Dimitrij Oskin ) ;
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_EXP 61
5019: PUSH
5020: LD_OWVAR 67
5024: ARRAY
5025: PPUSH
5026: LD_STRING Dimitrij Oskin
5028: PPUSH
5029: CALL 2014 0 4
// ah = CreateHuman ;
5033: LD_ADDR_LOC 5
5037: PUSH
5038: CALL_OW 44
5042: ST_TO_ADDR
// pom = pom ^ ah ;
5043: LD_ADDR_LOC 8
5047: PUSH
5048: LD_LOC 8
5052: PUSH
5053: LD_LOC 5
5057: ADD
5058: ST_TO_ADDR
// prepare_human ( sex_male , class_scientistic , levelrusi [ difficulty ] , Sergej Kramarenko ) ;
5059: LD_INT 1
5061: PPUSH
5062: LD_INT 4
5064: PPUSH
5065: LD_EXP 61
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: PPUSH
5076: LD_STRING Sergej Kramarenko
5078: PPUSH
5079: CALL 2014 0 4
// ah = CreateHuman ;
5083: LD_ADDR_LOC 5
5087: PUSH
5088: CALL_OW 44
5092: ST_TO_ADDR
// pom = pom ^ ah ;
5093: LD_ADDR_LOC 8
5097: PUSH
5098: LD_LOC 8
5102: PUSH
5103: LD_LOC 5
5107: ADD
5108: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , levelrusi [ difficulty ] , Alexandr Smorchov ) ;
5109: LD_INT 1
5111: PPUSH
5112: LD_INT 2
5114: PPUSH
5115: LD_EXP 61
5119: PUSH
5120: LD_OWVAR 67
5124: ARRAY
5125: PPUSH
5126: LD_STRING Alexandr Smorchov
5128: PPUSH
5129: CALL 2014 0 4
// ah = CreateHuman ;
5133: LD_ADDR_LOC 5
5137: PUSH
5138: CALL_OW 44
5142: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5143: LD_ADDR_OWVAR 37
5147: PUSH
5148: LD_INT 22
5150: ST_TO_ADDR
// vc_control := control_manual ;
5151: LD_ADDR_OWVAR 38
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// vc_engine := engine_combustion ;
5159: LD_ADDR_OWVAR 39
5163: PUSH
5164: LD_INT 1
5166: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5167: LD_ADDR_OWVAR 40
5171: PUSH
5172: LD_INT 51
5174: ST_TO_ADDR
// av = CreateVehicle ;
5175: LD_ADDR_LOC 6
5179: PUSH
5180: CALL_OW 45
5184: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
5185: LD_LOC 5
5189: PPUSH
5190: LD_LOC 6
5194: PPUSH
5195: CALL_OW 52
// pom = pom ^ av ;
5199: LD_ADDR_LOC 8
5203: PUSH
5204: LD_LOC 8
5208: PUSH
5209: LD_LOC 6
5213: ADD
5214: ST_TO_ADDR
// AddCargo ( av , mat_cans , 70 ) ;
5215: LD_LOC 6
5219: PPUSH
5220: LD_INT 1
5222: PPUSH
5223: LD_INT 70
5225: PPUSH
5226: CALL_OW 291
// AddCargo ( av , mat_oil , 30 ) ;
5230: LD_LOC 6
5234: PPUSH
5235: LD_INT 2
5237: PPUSH
5238: LD_INT 30
5240: PPUSH
5241: CALL_OW 291
// prepare_human ( sex_male , class_engineer , levelrusi [ difficulty ] , Jan Safarik ) ;
5245: LD_INT 1
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_EXP 61
5255: PUSH
5256: LD_OWVAR 67
5260: ARRAY
5261: PPUSH
5262: LD_STRING Jan Safarik
5264: PPUSH
5265: CALL 2014 0 4
// ah = CreateHuman ;
5269: LD_ADDR_LOC 5
5273: PUSH
5274: CALL_OW 44
5278: ST_TO_ADDR
// av = CreateVehicle ;
5279: LD_ADDR_LOC 6
5283: PUSH
5284: CALL_OW 45
5288: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
5289: LD_LOC 5
5293: PPUSH
5294: LD_LOC 6
5298: PPUSH
5299: CALL_OW 52
// pom = pom ^ av ;
5303: LD_ADDR_LOC 8
5307: PUSH
5308: LD_LOC 8
5312: PUSH
5313: LD_LOC 6
5317: ADD
5318: ST_TO_ADDR
// AddCargo ( av , mat_cans , 70 ) ;
5319: LD_LOC 6
5323: PPUSH
5324: LD_INT 1
5326: PPUSH
5327: LD_INT 70
5329: PPUSH
5330: CALL_OW 291
// AddCargo ( av , mat_oil , 30 ) ;
5334: LD_LOC 6
5338: PPUSH
5339: LD_INT 2
5341: PPUSH
5342: LD_INT 30
5344: PPUSH
5345: CALL_OW 291
// prepare_human ( sex_male , class_mechanic , levelrusi [ difficulty ] + 1 , Michail Ponomarev ) ;
5349: LD_INT 1
5351: PPUSH
5352: LD_INT 3
5354: PPUSH
5355: LD_EXP 61
5359: PUSH
5360: LD_OWVAR 67
5364: ARRAY
5365: PUSH
5366: LD_INT 1
5368: PLUS
5369: PPUSH
5370: LD_STRING Michail Ponomarev
5372: PPUSH
5373: CALL 2014 0 4
// ah = CreateHuman ;
5377: LD_ADDR_LOC 5
5381: PUSH
5382: CALL_OW 44
5386: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5387: LD_ADDR_OWVAR 37
5391: PUSH
5392: LD_INT 22
5394: ST_TO_ADDR
// vc_control := control_manual ;
5395: LD_ADDR_OWVAR 38
5399: PUSH
5400: LD_INT 1
5402: ST_TO_ADDR
// vc_engine := engine_combustion ;
5403: LD_ADDR_OWVAR 39
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
5411: LD_ADDR_OWVAR 40
5415: PUSH
5416: LD_INT 45
5418: ST_TO_ADDR
// av = CreateVehicle ;
5419: LD_ADDR_LOC 6
5423: PUSH
5424: CALL_OW 45
5428: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
5429: LD_LOC 5
5433: PPUSH
5434: LD_LOC 6
5438: PPUSH
5439: CALL_OW 52
// pom = pom ^ av ;
5443: LD_ADDR_LOC 8
5447: PUSH
5448: LD_LOC 8
5452: PUSH
5453: LD_LOC 6
5457: ADD
5458: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , levelrusi [ difficulty ] - 1 , Voloda Kromin ) ;
5459: LD_INT 1
5461: PPUSH
5462: LD_INT 3
5464: PPUSH
5465: LD_EXP 61
5469: PUSH
5470: LD_OWVAR 67
5474: ARRAY
5475: PUSH
5476: LD_INT 1
5478: MINUS
5479: PPUSH
5480: LD_STRING Voloda Kromin
5482: PPUSH
5483: CALL 2014 0 4
// ah = CreateHuman ;
5487: LD_ADDR_LOC 5
5491: PUSH
5492: CALL_OW 44
5496: ST_TO_ADDR
// vc_chassis := chassisrusi [ difficulty ] ;
5497: LD_ADDR_OWVAR 37
5501: PUSH
5502: LD_EXP 62
5506: PUSH
5507: LD_OWVAR 67
5511: ARRAY
5512: ST_TO_ADDR
// vc_control := control_manual ;
5513: LD_ADDR_OWVAR 38
5517: PUSH
5518: LD_INT 1
5520: ST_TO_ADDR
// vc_engine := engine_combustion ;
5521: LD_ADDR_OWVAR 39
5525: PUSH
5526: LD_INT 1
5528: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
5529: LD_ADDR_OWVAR 40
5533: PUSH
5534: LD_EXP 63
5538: PUSH
5539: LD_OWVAR 67
5543: ARRAY
5544: ST_TO_ADDR
// av = CreateVehicle ;
5545: LD_ADDR_LOC 6
5549: PUSH
5550: CALL_OW 45
5554: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
5555: LD_LOC 5
5559: PPUSH
5560: LD_LOC 6
5564: PPUSH
5565: CALL_OW 52
// pom = pom ^ av ;
5569: LD_ADDR_LOC 8
5573: PUSH
5574: LD_LOC 8
5578: PUSH
5579: LD_LOC 6
5583: ADD
5584: ST_TO_ADDR
// if difficulty > 1 then
5585: LD_OWVAR 67
5589: PUSH
5590: LD_INT 1
5592: GREATER
5593: IFFALSE 5821
// begin prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] , Jan Kuklajs ) ;
5595: LD_INT 1
5597: PPUSH
5598: LD_INT 9
5600: PPUSH
5601: LD_EXP 61
5605: PUSH
5606: LD_OWVAR 67
5610: ARRAY
5611: PPUSH
5612: LD_STRING Jan Kuklajs
5614: PPUSH
5615: CALL 2014 0 4
// ah = CreateHuman ;
5619: LD_ADDR_LOC 5
5623: PUSH
5624: CALL_OW 44
5628: ST_TO_ADDR
// pom = pom ^ ah ;
5629: LD_ADDR_LOC 8
5633: PUSH
5634: LD_LOC 8
5638: PUSH
5639: LD_LOC 5
5643: ADD
5644: ST_TO_ADDR
// prepare_human ( sex_female , class_engineer , levelrusi [ difficulty ] , Tatiana Petrova ) ;
5645: LD_INT 2
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: LD_EXP 61
5655: PUSH
5656: LD_OWVAR 67
5660: ARRAY
5661: PPUSH
5662: LD_STRING Tatiana Petrova
5664: PPUSH
5665: CALL 2014 0 4
// ah = CreateHuman ;
5669: LD_ADDR_LOC 5
5673: PUSH
5674: CALL_OW 44
5678: ST_TO_ADDR
// pom = pom ^ ah ;
5679: LD_ADDR_LOC 8
5683: PUSH
5684: LD_LOC 8
5688: PUSH
5689: LD_LOC 5
5693: ADD
5694: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , levelrusi [ difficulty ] + 2 , Ivan Kasatonov ) ;
5695: LD_INT 1
5697: PPUSH
5698: LD_INT 3
5700: PPUSH
5701: LD_EXP 61
5705: PUSH
5706: LD_OWVAR 67
5710: ARRAY
5711: PUSH
5712: LD_INT 2
5714: PLUS
5715: PPUSH
5716: LD_STRING Ivan Kasatonov
5718: PPUSH
5719: CALL 2014 0 4
// ah = CreateHuman ;
5723: LD_ADDR_LOC 5
5727: PUSH
5728: CALL_OW 44
5732: ST_TO_ADDR
// vc_chassis := chassisrusi [ difficulty ] ;
5733: LD_ADDR_OWVAR 37
5737: PUSH
5738: LD_EXP 62
5742: PUSH
5743: LD_OWVAR 67
5747: ARRAY
5748: ST_TO_ADDR
// vc_control := control_manual ;
5749: LD_ADDR_OWVAR 38
5753: PUSH
5754: LD_INT 1
5756: ST_TO_ADDR
// vc_engine := engine_combustion ;
5757: LD_ADDR_OWVAR 39
5761: PUSH
5762: LD_INT 1
5764: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
5765: LD_ADDR_OWVAR 40
5769: PUSH
5770: LD_EXP 63
5774: PUSH
5775: LD_OWVAR 67
5779: ARRAY
5780: ST_TO_ADDR
// av = CreateVehicle ;
5781: LD_ADDR_LOC 6
5785: PUSH
5786: CALL_OW 45
5790: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
5791: LD_LOC 5
5795: PPUSH
5796: LD_LOC 6
5800: PPUSH
5801: CALL_OW 52
// pom = pom ^ av ;
5805: LD_ADDR_LOC 8
5809: PUSH
5810: LD_LOC 8
5814: PUSH
5815: LD_LOC 6
5819: ADD
5820: ST_TO_ADDR
// end ; if difficulty > 2 then
5821: LD_OWVAR 67
5825: PUSH
5826: LD_INT 2
5828: GREATER
5829: IFFALSE 6041
// begin prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] + 1 , Sergej Pakonin ) ;
5831: LD_INT 1
5833: PPUSH
5834: LD_INT 9
5836: PPUSH
5837: LD_EXP 61
5841: PUSH
5842: LD_OWVAR 67
5846: ARRAY
5847: PUSH
5848: LD_INT 1
5850: PLUS
5851: PPUSH
5852: LD_STRING Sergej Pakonin
5854: PPUSH
5855: CALL 2014 0 4
// ah = CreateHuman ;
5859: LD_ADDR_LOC 5
5863: PUSH
5864: CALL_OW 44
5868: ST_TO_ADDR
// pom = pom ^ ah ;
5869: LD_ADDR_LOC 8
5873: PUSH
5874: LD_LOC 8
5878: PUSH
5879: LD_LOC 5
5883: ADD
5884: ST_TO_ADDR
// prepare_human ( sex_female , class_engineer , levelrusi [ difficulty ] , Natasa Gryznova ) ;
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 2
5890: PPUSH
5891: LD_EXP 61
5895: PUSH
5896: LD_OWVAR 67
5900: ARRAY
5901: PPUSH
5902: LD_STRING Natasa Gryznova
5904: PPUSH
5905: CALL 2014 0 4
// ah = CreateHuman ;
5909: LD_ADDR_LOC 5
5913: PUSH
5914: CALL_OW 44
5918: ST_TO_ADDR
// pom = pom ^ ah ;
5919: LD_ADDR_LOC 8
5923: PUSH
5924: LD_LOC 8
5928: PUSH
5929: LD_LOC 5
5933: ADD
5934: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , levelrusi [ difficulty ] , Sergej Supin ) ;
5935: LD_INT 1
5937: PPUSH
5938: LD_INT 3
5940: PPUSH
5941: LD_EXP 61
5945: PUSH
5946: LD_OWVAR 67
5950: ARRAY
5951: PPUSH
5952: LD_STRING Sergej Supin
5954: PPUSH
5955: CALL 2014 0 4
// ah = CreateHuman ;
5959: LD_ADDR_LOC 5
5963: PUSH
5964: CALL_OW 44
5968: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
5969: LD_ADDR_OWVAR 37
5973: PUSH
5974: LD_INT 24
5976: ST_TO_ADDR
// vc_control := control_manual ;
5977: LD_ADDR_OWVAR 38
5981: PUSH
5982: LD_INT 1
5984: ST_TO_ADDR
// vc_engine := engine_siberite ;
5985: LD_ADDR_OWVAR 39
5989: PUSH
5990: LD_INT 3
5992: ST_TO_ADDR
// vc_weapon := ru_gun ;
5993: LD_ADDR_OWVAR 40
5997: PUSH
5998: LD_INT 44
6000: ST_TO_ADDR
// av = CreateVehicle ;
6001: LD_ADDR_LOC 6
6005: PUSH
6006: CALL_OW 45
6010: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
6011: LD_LOC 5
6015: PPUSH
6016: LD_LOC 6
6020: PPUSH
6021: CALL_OW 52
// pom = pom ^ ah ;
6025: LD_ADDR_LOC 8
6029: PUSH
6030: LD_LOC 8
6034: PUSH
6035: LD_LOC 5
6039: ADD
6040: ST_TO_ADDR
// end ; CREATOVANI_RUSKEHO_KONVOJE_LIST := pom ;
6041: LD_ADDR_EXP 13
6045: PUSH
6046: LD_LOC 8
6050: ST_TO_ADDR
// end ;
6051: LD_VAR 0 2
6055: RET
// export function create_Cornel ; begin
6056: LD_INT 0
6058: PPUSH
// uc_side := You2 ;
6059: LD_ADDR_OWVAR 20
6063: PUSH
6064: LD_EXP 6
6068: ST_TO_ADDR
// uc_nation := nation_american ;
6069: LD_ADDR_OWVAR 21
6073: PUSH
6074: LD_INT 1
6076: ST_TO_ADDR
// uc_direction := 4 ;
6077: LD_ADDR_OWVAR 24
6081: PUSH
6082: LD_INT 4
6084: ST_TO_ADDR
// PlaceUnitArea ( Cornel , Corenter , false ) ;
6085: LD_EXP 50
6089: PPUSH
6090: LD_INT 17
6092: PPUSH
6093: LD_INT 0
6095: PPUSH
6096: CALL_OW 49
// end ;
6100: LD_VAR 0 1
6104: RET
// export function create_rusky_attack1 ; var i ; begin
6105: LD_INT 0
6107: PPUSH
6108: PPUSH
// uc_side := Rusi ;
6109: LD_ADDR_OWVAR 20
6113: PUSH
6114: LD_EXP 2
6118: ST_TO_ADDR
// uc_nation := nation_russian ;
6119: LD_ADDR_OWVAR 21
6123: PUSH
6124: LD_INT 3
6126: ST_TO_ADDR
// uc_direction := 4 ;
6127: LD_ADDR_OWVAR 24
6131: PUSH
6132: LD_INT 4
6134: ST_TO_ADDR
// vc_chassis := chassisrusi [ difficulty ] ;
6135: LD_ADDR_OWVAR 37
6139: PUSH
6140: LD_EXP 62
6144: PUSH
6145: LD_OWVAR 67
6149: ARRAY
6150: ST_TO_ADDR
// vc_control := control_computer ;
6151: LD_ADDR_OWVAR 38
6155: PUSH
6156: LD_INT 3
6158: ST_TO_ADDR
// vc_engine := engine_siberite ;
6159: LD_ADDR_OWVAR 39
6163: PUSH
6164: LD_INT 3
6166: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
6167: LD_ADDR_OWVAR 40
6171: PUSH
6172: LD_EXP 63
6176: PUSH
6177: LD_OWVAR 67
6181: ARRAY
6182: ST_TO_ADDR
// av = CreateVehicle ;
6183: LD_ADDR_LOC 6
6187: PUSH
6188: CALL_OW 45
6192: ST_TO_ADDR
// pom = [ av ] ;
6193: LD_ADDR_LOC 8
6197: PUSH
6198: LD_LOC 6
6202: PUSH
6203: EMPTY
6204: LIST
6205: ST_TO_ADDR
// if difficulty > 1 then
6206: LD_OWVAR 67
6210: PUSH
6211: LD_INT 1
6213: GREATER
6214: IFFALSE 6242
// begin av = CreateVehicle ;
6216: LD_ADDR_LOC 6
6220: PUSH
6221: CALL_OW 45
6225: ST_TO_ADDR
// pom = pom ^ av ;
6226: LD_ADDR_LOC 8
6230: PUSH
6231: LD_LOC 8
6235: PUSH
6236: LD_LOC 6
6240: ADD
6241: ST_TO_ADDR
// end ; if difficulty > 2 then
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 2
6249: GREATER
6250: IFFALSE 6336
// begin vc_chassis := ru_medium_tracked ;
6252: LD_ADDR_OWVAR 37
6256: PUSH
6257: LD_INT 22
6259: ST_TO_ADDR
// vc_control := control_computer ;
6260: LD_ADDR_OWVAR 38
6264: PUSH
6265: LD_INT 3
6267: ST_TO_ADDR
// vc_engine := engine_siberite ;
6268: LD_ADDR_OWVAR 39
6272: PUSH
6273: LD_INT 3
6275: ST_TO_ADDR
// vc_weapon := ru_gun ;
6276: LD_ADDR_OWVAR 40
6280: PUSH
6281: LD_INT 44
6283: ST_TO_ADDR
// av = CreateVehicle ;
6284: LD_ADDR_LOC 6
6288: PUSH
6289: CALL_OW 45
6293: ST_TO_ADDR
// pom = pom ^ av ;
6294: LD_ADDR_LOC 8
6298: PUSH
6299: LD_LOC 8
6303: PUSH
6304: LD_LOC 6
6308: ADD
6309: ST_TO_ADDR
// av = CreateVehicle ;
6310: LD_ADDR_LOC 6
6314: PUSH
6315: CALL_OW 45
6319: ST_TO_ADDR
// pom = pom ^ av ;
6320: LD_ADDR_LOC 8
6324: PUSH
6325: LD_LOC 8
6329: PUSH
6330: LD_LOC 6
6334: ADD
6335: ST_TO_ADDR
// end ; for i in pom do
6336: LD_ADDR_VAR 0 2
6340: PUSH
6341: LD_LOC 8
6345: PUSH
6346: FOR_IN
6347: IFFALSE 6371
// SetLives ( i , rusi_zivoty [ difficulty ] ) ;
6349: LD_VAR 0 2
6353: PPUSH
6354: LD_EXP 70
6358: PUSH
6359: LD_OWVAR 67
6363: ARRAY
6364: PPUSH
6365: CALL_OW 234
6369: GO 6346
6371: POP
6372: POP
// CREATE_RUSKY_ATTACK1_LIST = pom ;
6373: LD_ADDR_EXP 14
6377: PUSH
6378: LD_LOC 8
6382: ST_TO_ADDR
// end ;
6383: LD_VAR 0 1
6387: RET
// export function create_vojaci ; begin
6388: LD_INT 0
6390: PPUSH
// uc_side := Rusi ;
6391: LD_ADDR_OWVAR 20
6395: PUSH
6396: LD_EXP 2
6400: ST_TO_ADDR
// uc_nation := nation_russian ;
6401: LD_ADDR_OWVAR 21
6405: PUSH
6406: LD_INT 3
6408: ST_TO_ADDR
// uc_direction := 4 ;
6409: LD_ADDR_OWVAR 24
6413: PUSH
6414: LD_INT 4
6416: ST_TO_ADDR
// prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] + 1 ,  ) ;
6417: LD_INT 1
6419: PPUSH
6420: LD_INT 9
6422: PPUSH
6423: LD_EXP 61
6427: PUSH
6428: LD_OWVAR 67
6432: ARRAY
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PPUSH
6438: LD_STRING 
6440: PPUSH
6441: CALL 2014 0 4
// ah = CreateHuman ;
6445: LD_ADDR_LOC 5
6449: PUSH
6450: CALL_OW 44
6454: ST_TO_ADDR
// pom = [ ah ] ;
6455: LD_ADDR_LOC 8
6459: PUSH
6460: LD_LOC 5
6464: PUSH
6465: EMPTY
6466: LIST
6467: ST_TO_ADDR
// prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] ,  ) ;
6468: LD_INT 1
6470: PPUSH
6471: LD_INT 9
6473: PPUSH
6474: LD_EXP 61
6478: PUSH
6479: LD_OWVAR 67
6483: ARRAY
6484: PPUSH
6485: LD_STRING 
6487: PPUSH
6488: CALL 2014 0 4
// ah = CreateHuman ;
6492: LD_ADDR_LOC 5
6496: PUSH
6497: CALL_OW 44
6501: ST_TO_ADDR
// pom = pom ^ ah ;
6502: LD_ADDR_LOC 8
6506: PUSH
6507: LD_LOC 8
6511: PUSH
6512: LD_LOC 5
6516: ADD
6517: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 2 ,  ) ;
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 1
6523: PPUSH
6524: LD_INT 2
6526: PPUSH
6527: LD_STRING 
6529: PPUSH
6530: CALL 2014 0 4
// ah = CreateHuman ;
6534: LD_ADDR_LOC 5
6538: PUSH
6539: CALL_OW 44
6543: ST_TO_ADDR
// pom = pom ^ ah ;
6544: LD_ADDR_LOC 8
6548: PUSH
6549: LD_LOC 8
6553: PUSH
6554: LD_LOC 5
6558: ADD
6559: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 2 ,  ) ;
6560: LD_INT 1
6562: PPUSH
6563: LD_INT 1
6565: PPUSH
6566: LD_INT 2
6568: PPUSH
6569: LD_STRING 
6571: PPUSH
6572: CALL 2014 0 4
// ah = CreateHuman ;
6576: LD_ADDR_LOC 5
6580: PUSH
6581: CALL_OW 44
6585: ST_TO_ADDR
// pom = pom ^ ah ;
6586: LD_ADDR_LOC 8
6590: PUSH
6591: LD_LOC 8
6595: PUSH
6596: LD_LOC 5
6600: ADD
6601: ST_TO_ADDR
// if difficulty > 1 then
6602: LD_OWVAR 67
6606: PUSH
6607: LD_INT 1
6609: GREATER
6610: IFFALSE 6716
// begin prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] + 1 ,  ) ;
6612: LD_INT 1
6614: PPUSH
6615: LD_INT 9
6617: PPUSH
6618: LD_EXP 61
6622: PUSH
6623: LD_OWVAR 67
6627: ARRAY
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: PPUSH
6633: LD_STRING 
6635: PPUSH
6636: CALL 2014 0 4
// ah = CreateHuman ;
6640: LD_ADDR_LOC 5
6644: PUSH
6645: CALL_OW 44
6649: ST_TO_ADDR
// pom = pom ^ ah ;
6650: LD_ADDR_LOC 8
6654: PUSH
6655: LD_LOC 8
6659: PUSH
6660: LD_LOC 5
6664: ADD
6665: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , levelrusi [ difficulty ] ,  ) ;
6666: LD_INT 1
6668: PPUSH
6669: LD_INT 1
6671: PPUSH
6672: LD_EXP 61
6676: PUSH
6677: LD_OWVAR 67
6681: ARRAY
6682: PPUSH
6683: LD_STRING 
6685: PPUSH
6686: CALL 2014 0 4
// ah = CreateHuman ;
6690: LD_ADDR_LOC 5
6694: PUSH
6695: CALL_OW 44
6699: ST_TO_ADDR
// pom = pom ^ ah ;
6700: LD_ADDR_LOC 8
6704: PUSH
6705: LD_LOC 8
6709: PUSH
6710: LD_LOC 5
6714: ADD
6715: ST_TO_ADDR
// end ; if difficulty > 2 then
6716: LD_OWVAR 67
6720: PUSH
6721: LD_INT 2
6723: GREATER
6724: IFFALSE 6830
// begin prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] + 1 ,  ) ;
6726: LD_INT 1
6728: PPUSH
6729: LD_INT 9
6731: PPUSH
6732: LD_EXP 61
6736: PUSH
6737: LD_OWVAR 67
6741: ARRAY
6742: PUSH
6743: LD_INT 1
6745: PLUS
6746: PPUSH
6747: LD_STRING 
6749: PPUSH
6750: CALL 2014 0 4
// ah = CreateHuman ;
6754: LD_ADDR_LOC 5
6758: PUSH
6759: CALL_OW 44
6763: ST_TO_ADDR
// pom = pom ^ ah ;
6764: LD_ADDR_LOC 8
6768: PUSH
6769: LD_LOC 8
6773: PUSH
6774: LD_LOC 5
6778: ADD
6779: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , levelrusi [ difficulty ] ,  ) ;
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: LD_EXP 61
6790: PUSH
6791: LD_OWVAR 67
6795: ARRAY
6796: PPUSH
6797: LD_STRING 
6799: PPUSH
6800: CALL 2014 0 4
// ah = CreateHuman ;
6804: LD_ADDR_LOC 5
6808: PUSH
6809: CALL_OW 44
6813: ST_TO_ADDR
// pom = pom ^ ah ;
6814: LD_ADDR_LOC 8
6818: PUSH
6819: LD_LOC 8
6823: PUSH
6824: LD_LOC 5
6828: ADD
6829: ST_TO_ADDR
// end ; CREATE_VOJACI_LIST = pom ;
6830: LD_ADDR_EXP 15
6834: PUSH
6835: LD_LOC 8
6839: ST_TO_ADDR
// end ;
6840: LD_VAR 0 1
6844: RET
// export function create_ar_zradu ; begin
6845: LD_INT 0
6847: PPUSH
// uc_side := Arabi2 ;
6848: LD_ADDR_OWVAR 20
6852: PUSH
6853: LD_EXP 4
6857: ST_TO_ADDR
// uc_nation := nation_arabian ;
6858: LD_ADDR_OWVAR 21
6862: PUSH
6863: LD_INT 2
6865: ST_TO_ADDR
// uc_direction := 4 ;
6866: LD_ADDR_OWVAR 24
6870: PUSH
6871: LD_INT 4
6873: ST_TO_ADDR
// prepare_human ( sex_male , class_desert_warior , 5 , Azib Alim ) ;
6874: LD_INT 1
6876: PPUSH
6877: LD_INT 11
6879: PPUSH
6880: LD_INT 5
6882: PPUSH
6883: LD_STRING Azib Alim
6885: PPUSH
6886: CALL 2014 0 4
// ah = CreateHuman ;
6890: LD_ADDR_LOC 5
6894: PUSH
6895: CALL_OW 44
6899: ST_TO_ADDR
// SetSide ( mas1 , Arabi2 ) ;
6900: LD_INT 14
6902: PPUSH
6903: LD_EXP 4
6907: PPUSH
6908: CALL_OW 235
// PlaceHumanInUnit ( ah , mas1 ) ;
6912: LD_LOC 5
6916: PPUSH
6917: LD_INT 14
6919: PPUSH
6920: CALL_OW 52
// PlaceUnitArea ( mas1 , AUenter , false ) ;
6924: LD_INT 14
6926: PPUSH
6927: LD_INT 23
6929: PPUSH
6930: LD_INT 0
6932: PPUSH
6933: CALL_OW 49
// ComCarabine ( ah ) ;
6937: LD_LOC 5
6941: PPUSH
6942: CALL_OW 162
// prepare_human ( sex_male , class_desert_warior , 5 , Gmamal El Aziz ) ;
6946: LD_INT 1
6948: PPUSH
6949: LD_INT 11
6951: PPUSH
6952: LD_INT 5
6954: PPUSH
6955: LD_STRING Gmamal El Aziz
6957: PPUSH
6958: CALL 2014 0 4
// ah = CreateHuman ;
6962: LD_ADDR_LOC 5
6966: PUSH
6967: CALL_OW 44
6971: ST_TO_ADDR
// SetSide ( mas2 , Arabi2 ) ;
6972: LD_INT 13
6974: PPUSH
6975: LD_EXP 4
6979: PPUSH
6980: CALL_OW 235
// PlaceHumanInUnit ( ah , mas2 ) ;
6984: LD_LOC 5
6988: PPUSH
6989: LD_INT 13
6991: PPUSH
6992: CALL_OW 52
// PlaceUnitArea ( mas2 , AUenter , false ) ;
6996: LD_INT 13
6998: PPUSH
6999: LD_INT 23
7001: PPUSH
7002: LD_INT 0
7004: PPUSH
7005: CALL_OW 49
// ComCarabine ( ah ) ;
7009: LD_LOC 5
7013: PPUSH
7014: CALL_OW 162
// prepare_human ( sex_male , class_soldier , 5 , Suman Oles ) ;
7018: LD_INT 1
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: LD_INT 5
7026: PPUSH
7027: LD_STRING Suman Oles
7029: PPUSH
7030: CALL 2014 0 4
// ah = CreateHuman ;
7034: LD_ADDR_LOC 5
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// PlaceUnitArea ( ah , AUenter , false ) ;
7044: LD_LOC 5
7048: PPUSH
7049: LD_INT 23
7051: PPUSH
7052: LD_INT 0
7054: PPUSH
7055: CALL_OW 49
// prepare_human ( sex_male , class_soldier , 3 , Oman Hajalib ) ;
7059: LD_INT 1
7061: PPUSH
7062: LD_INT 1
7064: PPUSH
7065: LD_INT 3
7067: PPUSH
7068: LD_STRING Oman Hajalib
7070: PPUSH
7071: CALL 2014 0 4
// ah = CreateHuman ;
7075: LD_ADDR_LOC 5
7079: PUSH
7080: CALL_OW 44
7084: ST_TO_ADDR
// PlaceUnitArea ( ah , AUenter , false ) ;
7085: LD_LOC 5
7089: PPUSH
7090: LD_INT 23
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: CALL_OW 49
// prepare_human ( sex_male , class_soldier , 5 , Ed Sobaletzki ) ;
7100: LD_INT 1
7102: PPUSH
7103: LD_INT 1
7105: PPUSH
7106: LD_INT 5
7108: PPUSH
7109: LD_STRING Ed Sobaletzki
7111: PPUSH
7112: CALL 2014 0 4
// ah = CreateHuman ;
7116: LD_ADDR_LOC 5
7120: PUSH
7121: CALL_OW 44
7125: ST_TO_ADDR
// PlaceUnitArea ( ah , AUenter , false ) ;
7126: LD_LOC 5
7130: PPUSH
7131: LD_INT 23
7133: PPUSH
7134: LD_INT 0
7136: PPUSH
7137: CALL_OW 49
// end ;
7141: LD_VAR 0 1
7145: RET
// export function uprav_mastodonty ; begin
7146: LD_INT 0
7148: PPUSH
// RemoveUnit ( mas1 ) ;
7149: LD_INT 14
7151: PPUSH
7152: CALL_OW 64
// RemoveUnit ( mas2 ) ;
7156: LD_INT 13
7158: PPUSH
7159: CALL_OW 64
// end ;
7163: LD_VAR 0 1
7167: RET
// export function create_engineer ; begin
7168: LD_INT 0
7170: PPUSH
// uc_side := Rusi ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_EXP 2
7180: ST_TO_ADDR
// uc_nation := nation_Russian ;
7181: LD_ADDR_OWVAR 21
7185: PUSH
7186: LD_INT 3
7188: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , levelrusi [ difficulty ] ,  ) ;
7189: LD_INT 1
7191: PPUSH
7192: LD_INT 2
7194: PPUSH
7195: LD_EXP 61
7199: PUSH
7200: LD_OWVAR 67
7204: ARRAY
7205: PPUSH
7206: LD_STRING 
7208: PPUSH
7209: CALL 2014 0 4
// ah = CreateHuman ;
7213: LD_ADDR_LOC 5
7217: PUSH
7218: CALL_OW 44
7222: ST_TO_ADDR
// PlaceUnitArea ( ah , RE3 , false ) ;
7223: LD_LOC 5
7227: PPUSH
7228: LD_INT 6
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: CALL_OW 49
// end ;
7238: LD_VAR 0 1
7242: RET
// export function create_2_new_attack ; var i ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
// uc_side := Rusi ;
7247: LD_ADDR_OWVAR 20
7251: PUSH
7252: LD_EXP 2
7256: ST_TO_ADDR
// uc_nation := nation_russian ;
7257: LD_ADDR_OWVAR 21
7261: PUSH
7262: LD_INT 3
7264: ST_TO_ADDR
// uc_direction := 4 ;
7265: LD_ADDR_OWVAR 24
7269: PUSH
7270: LD_INT 4
7272: ST_TO_ADDR
// prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] ,  ) ;
7273: LD_INT 1
7275: PPUSH
7276: LD_INT 9
7278: PPUSH
7279: LD_EXP 61
7283: PUSH
7284: LD_OWVAR 67
7288: ARRAY
7289: PPUSH
7290: LD_STRING 
7292: PPUSH
7293: CALL 2014 0 4
// ah = CreateHuman ;
7297: LD_ADDR_LOC 5
7301: PUSH
7302: CALL_OW 44
7306: ST_TO_ADDR
// pom = [ ah ] ;
7307: LD_ADDR_LOC 8
7311: PUSH
7312: LD_LOC 5
7316: PUSH
7317: EMPTY
7318: LIST
7319: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , levelrusi [ difficulty ] - 2 ,  ) ;
7320: LD_INT 1
7322: PPUSH
7323: LD_INT 3
7325: PPUSH
7326: LD_EXP 61
7330: PUSH
7331: LD_OWVAR 67
7335: ARRAY
7336: PUSH
7337: LD_INT 2
7339: MINUS
7340: PPUSH
7341: LD_STRING 
7343: PPUSH
7344: CALL 2014 0 4
// ah = CreateHuman ;
7348: LD_ADDR_LOC 5
7352: PUSH
7353: CALL_OW 44
7357: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 2 ,  ) ;
7358: LD_INT 1
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: LD_INT 2
7366: PPUSH
7367: LD_STRING 
7369: PPUSH
7370: CALL 2014 0 4
// ah = CreateHuman ;
7374: LD_ADDR_LOC 5
7378: PUSH
7379: CALL_OW 44
7383: ST_TO_ADDR
// pom = pom ^ ah ;
7384: LD_ADDR_LOC 8
7388: PUSH
7389: LD_LOC 8
7393: PUSH
7394: LD_LOC 5
7398: ADD
7399: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7400: LD_ADDR_OWVAR 37
7404: PUSH
7405: LD_INT 22
7407: ST_TO_ADDR
// vc_control := control_manual ;
7408: LD_ADDR_OWVAR 38
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// vc_engine := engine_siberite ;
7416: LD_ADDR_OWVAR 39
7420: PUSH
7421: LD_INT 3
7423: ST_TO_ADDR
// vc_weapon := ru_heavy_machine_gun ;
7424: LD_ADDR_OWVAR 40
7428: PUSH
7429: LD_INT 42
7431: ST_TO_ADDR
// av = CreateVehicle ;
7432: LD_ADDR_LOC 6
7436: PUSH
7437: CALL_OW 45
7441: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
7442: LD_LOC 5
7446: PPUSH
7447: LD_LOC 6
7451: PPUSH
7452: CALL_OW 52
// pom = pom ^ av ;
7456: LD_ADDR_LOC 8
7460: PUSH
7461: LD_LOC 8
7465: PUSH
7466: LD_LOC 6
7470: ADD
7471: ST_TO_ADDR
// if difficulty > 1 then
7472: LD_OWVAR 67
7476: PUSH
7477: LD_INT 1
7479: GREATER
7480: IFFALSE 7548
// begin vc_chassis := ru_heavy_wheeled ;
7482: LD_ADDR_OWVAR 37
7486: PUSH
7487: LD_INT 23
7489: ST_TO_ADDR
// vc_control = control_computer ;
7490: LD_ADDR_OWVAR 38
7494: PUSH
7495: LD_INT 3
7497: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
7498: LD_ADDR_OWVAR 40
7502: PUSH
7503: LD_EXP 63
7507: PUSH
7508: LD_OWVAR 67
7512: ARRAY
7513: ST_TO_ADDR
// vc_engine := engine_combustion ;
7514: LD_ADDR_OWVAR 39
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// av = CreateVehicle ;
7522: LD_ADDR_LOC 6
7526: PUSH
7527: CALL_OW 45
7531: ST_TO_ADDR
// pom = pom ^ av ;
7532: LD_ADDR_LOC 8
7536: PUSH
7537: LD_LOC 8
7541: PUSH
7542: LD_LOC 6
7546: ADD
7547: ST_TO_ADDR
// end ; if difficulty > 2 then
7548: LD_OWVAR 67
7552: PUSH
7553: LD_INT 2
7555: GREATER
7556: IFFALSE 7596
// pom = pom ^ get_human ( get_sex , class_soldier , levelrusi [ difficulty ] ,  ) ;
7558: LD_ADDR_LOC 8
7562: PUSH
7563: LD_LOC 8
7567: PUSH
7568: CALL 8349 0 0
7572: PPUSH
7573: LD_INT 1
7575: PPUSH
7576: LD_EXP 61
7580: PUSH
7581: LD_OWVAR 67
7585: ARRAY
7586: PPUSH
7587: LD_STRING 
7589: PPUSH
7590: CALL 8291 0 4
7594: ADD
7595: ST_TO_ADDR
// for i in pom do
7596: LD_ADDR_VAR 0 2
7600: PUSH
7601: LD_LOC 8
7605: PUSH
7606: FOR_IN
7607: IFFALSE 7631
// SetLives ( i , rusi_zivoty [ difficulty ] ) ;
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_EXP 70
7618: PUSH
7619: LD_OWVAR 67
7623: ARRAY
7624: PPUSH
7625: CALL_OW 234
7629: GO 7606
7631: POP
7632: POP
// CREATE_2_NEW_ATTACK_LIST = pom ;
7633: LD_ADDR_EXP 16
7637: PUSH
7638: LD_LOC 8
7642: ST_TO_ADDR
// end ;
7643: LD_VAR 0 1
7647: RET
// export function create_3_new_attack ; var i ; begin
7648: LD_INT 0
7650: PPUSH
7651: PPUSH
// uc_side := Rusi ;
7652: LD_ADDR_OWVAR 20
7656: PUSH
7657: LD_EXP 2
7661: ST_TO_ADDR
// uc_nation := nation_russian ;
7662: LD_ADDR_OWVAR 21
7666: PUSH
7667: LD_INT 3
7669: ST_TO_ADDR
// prepare_human ( sex_male , class_bazooker , levelrusi [ difficulty ] - 1 ,  ) ;
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 9
7675: PPUSH
7676: LD_EXP 61
7680: PUSH
7681: LD_OWVAR 67
7685: ARRAY
7686: PUSH
7687: LD_INT 1
7689: MINUS
7690: PPUSH
7691: LD_STRING 
7693: PPUSH
7694: CALL 2014 0 4
// ah = CreateHuman ;
7698: LD_ADDR_LOC 5
7702: PUSH
7703: CALL_OW 44
7707: ST_TO_ADDR
// pom = [ ah ] ;
7708: LD_ADDR_LOC 8
7712: PUSH
7713: LD_LOC 5
7717: PUSH
7718: EMPTY
7719: LIST
7720: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , levelrusi [ difficulty ] ,  ) ;
7721: LD_INT 1
7723: PPUSH
7724: LD_INT 1
7726: PPUSH
7727: LD_EXP 61
7731: PUSH
7732: LD_OWVAR 67
7736: ARRAY
7737: PPUSH
7738: LD_STRING 
7740: PPUSH
7741: CALL 2014 0 4
// ah = CreateHuman ;
7745: LD_ADDR_LOC 5
7749: PUSH
7750: CALL_OW 44
7754: ST_TO_ADDR
// pom = pom ^ ah ;
7755: LD_ADDR_LOC 8
7759: PUSH
7760: LD_LOC 8
7764: PUSH
7765: LD_LOC 5
7769: ADD
7770: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 2 ,  ) ;
7771: LD_INT 1
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: LD_INT 2
7779: PPUSH
7780: LD_STRING 
7782: PPUSH
7783: CALL 2014 0 4
// ah = CreateHuman ;
7787: LD_ADDR_LOC 5
7791: PUSH
7792: CALL_OW 44
7796: ST_TO_ADDR
// pom = pom ^ ah ;
7797: LD_ADDR_LOC 8
7801: PUSH
7802: LD_LOC 8
7806: PUSH
7807: LD_LOC 5
7811: ADD
7812: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7813: LD_ADDR_OWVAR 37
7817: PUSH
7818: LD_INT 22
7820: ST_TO_ADDR
// vc_control := control_computer ;
7821: LD_ADDR_OWVAR 38
7825: PUSH
7826: LD_INT 3
7828: ST_TO_ADDR
// vc_engine := engine_siberite ;
7829: LD_ADDR_OWVAR 39
7833: PUSH
7834: LD_INT 3
7836: ST_TO_ADDR
// vc_weapon := ru_gun ;
7837: LD_ADDR_OWVAR 40
7841: PUSH
7842: LD_INT 44
7844: ST_TO_ADDR
// av = CreateVehicle ;
7845: LD_ADDR_LOC 6
7849: PUSH
7850: CALL_OW 45
7854: ST_TO_ADDR
// pom = pom ^ av ;
7855: LD_ADDR_LOC 8
7859: PUSH
7860: LD_LOC 8
7864: PUSH
7865: LD_LOC 6
7869: ADD
7870: ST_TO_ADDR
// vc_weapon = zbranrusi [ difficulty ] ;
7871: LD_ADDR_OWVAR 40
7875: PUSH
7876: LD_EXP 63
7880: PUSH
7881: LD_OWVAR 67
7885: ARRAY
7886: ST_TO_ADDR
// av = CreateVehicle ;
7887: LD_ADDR_LOC 6
7891: PUSH
7892: CALL_OW 45
7896: ST_TO_ADDR
// pom = pom ^ av ;
7897: LD_ADDR_LOC 8
7901: PUSH
7902: LD_LOC 8
7906: PUSH
7907: LD_LOC 6
7911: ADD
7912: ST_TO_ADDR
// if difficulty > 1 then
7913: LD_OWVAR 67
7917: PUSH
7918: LD_INT 1
7920: GREATER
7921: IFFALSE 8031
// begin ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] - 1 ,  ) ;
7923: LD_ADDR_LOC 5
7927: PUSH
7928: CALL 8349 0 0
7932: PPUSH
7933: LD_INT 3
7935: PPUSH
7936: LD_EXP 61
7940: PUSH
7941: LD_OWVAR 67
7945: ARRAY
7946: PUSH
7947: LD_INT 1
7949: MINUS
7950: PPUSH
7951: LD_STRING 
7953: PPUSH
7954: CALL 8291 0 4
7958: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
7959: LD_ADDR_OWVAR 37
7963: PUSH
7964: LD_INT 24
7966: ST_TO_ADDR
// vc_control = control_manual ;
7967: LD_ADDR_OWVAR 38
7971: PUSH
7972: LD_INT 1
7974: ST_TO_ADDR
// vc_weapon := ru_gatling_gun ;
7975: LD_ADDR_OWVAR 40
7979: PUSH
7980: LD_INT 43
7982: ST_TO_ADDR
// vc_engine := engine_combustion ;
7983: LD_ADDR_OWVAR 39
7987: PUSH
7988: LD_INT 1
7990: ST_TO_ADDR
// av = CreateVehicle ;
7991: LD_ADDR_LOC 6
7995: PUSH
7996: CALL_OW 45
8000: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8001: LD_LOC 5
8005: PPUSH
8006: LD_LOC 6
8010: PPUSH
8011: CALL_OW 52
// pom = pom ^ av ;
8015: LD_ADDR_LOC 8
8019: PUSH
8020: LD_LOC 8
8024: PUSH
8025: LD_LOC 6
8029: ADD
8030: ST_TO_ADDR
// end ; if difficulty > 2 then
8031: LD_OWVAR 67
8035: PUSH
8036: LD_INT 2
8038: GREATER
8039: IFFALSE 8083
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] - 3 ,  ) ;
8041: LD_ADDR_LOC 8
8045: PUSH
8046: LD_LOC 8
8050: PUSH
8051: CALL 8349 0 0
8055: PPUSH
8056: LD_INT 9
8058: PPUSH
8059: LD_EXP 61
8063: PUSH
8064: LD_OWVAR 67
8068: ARRAY
8069: PUSH
8070: LD_INT 3
8072: MINUS
8073: PPUSH
8074: LD_STRING 
8076: PPUSH
8077: CALL 8291 0 4
8081: ADD
8082: ST_TO_ADDR
// for i in pom do
8083: LD_ADDR_VAR 0 2
8087: PUSH
8088: LD_LOC 8
8092: PUSH
8093: FOR_IN
8094: IFFALSE 8118
// SetLives ( i , rusi_zivoty [ difficulty ] ) ;
8096: LD_VAR 0 2
8100: PPUSH
8101: LD_EXP 70
8105: PUSH
8106: LD_OWVAR 67
8110: ARRAY
8111: PPUSH
8112: CALL_OW 234
8116: GO 8093
8118: POP
8119: POP
// CREATE_3_NEW_ATTACK_LIST = pom ;
8120: LD_ADDR_EXP 17
8124: PUSH
8125: LD_LOC 8
8129: ST_TO_ADDR
// end ;
8130: LD_VAR 0 1
8134: RET
// export function create_bazooka_attack ; var i ; begin
8135: LD_INT 0
8137: PPUSH
8138: PPUSH
// uc_side := Rusi ;
8139: LD_ADDR_OWVAR 20
8143: PUSH
8144: LD_EXP 2
8148: ST_TO_ADDR
// uc_nation := nation_russian ;
8149: LD_ADDR_OWVAR 21
8153: PUSH
8154: LD_INT 3
8156: ST_TO_ADDR
// pom = [ ] ;
8157: LD_ADDR_LOC 8
8161: PUSH
8162: EMPTY
8163: ST_TO_ADDR
// for i := 1 to difficulty + 1 do
8164: LD_ADDR_VAR 0 2
8168: PUSH
8169: DOUBLE
8170: LD_INT 1
8172: DEC
8173: ST_TO_ADDR
8174: LD_OWVAR 67
8178: PUSH
8179: LD_INT 1
8181: PLUS
8182: PUSH
8183: FOR_TO
8184: IFFALSE 8224
// pom = pom + get_human ( sex_male , class_bazooker , levelrusi [ difficulty ] ,  ) ;
8186: LD_ADDR_LOC 8
8190: PUSH
8191: LD_LOC 8
8195: PUSH
8196: LD_INT 1
8198: PPUSH
8199: LD_INT 9
8201: PPUSH
8202: LD_EXP 61
8206: PUSH
8207: LD_OWVAR 67
8211: ARRAY
8212: PPUSH
8213: LD_STRING 
8215: PPUSH
8216: CALL 8291 0 4
8220: PLUS
8221: ST_TO_ADDR
8222: GO 8183
8224: POP
8225: POP
// for i := 1 to difficulty do
8226: LD_ADDR_VAR 0 2
8230: PUSH
8231: DOUBLE
8232: LD_INT 1
8234: DEC
8235: ST_TO_ADDR
8236: LD_OWVAR 67
8240: PUSH
8241: FOR_TO
8242: IFFALSE 8274
// pom = pom + get_human ( sex_male , class_soldier , 3 ,  ) ;
8244: LD_ADDR_LOC 8
8248: PUSH
8249: LD_LOC 8
8253: PUSH
8254: LD_INT 1
8256: PPUSH
8257: LD_INT 1
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: LD_STRING 
8265: PPUSH
8266: CALL 8291 0 4
8270: PLUS
8271: ST_TO_ADDR
8272: GO 8241
8274: POP
8275: POP
// CREATE_BAZOOKA_ATTACK_LIST = pom ;
8276: LD_ADDR_EXP 18
8280: PUSH
8281: LD_LOC 8
8285: ST_TO_ADDR
// end ;
8286: LD_VAR 0 1
8290: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
8291: LD_INT 0
8293: PPUSH
8294: PPUSH
// PrepareHuman ( sex , clas , level ) ;
8295: LD_VAR 0 1
8299: PPUSH
8300: LD_VAR 0 2
8304: PPUSH
8305: LD_VAR 0 3
8309: PPUSH
8310: CALL_OW 380
// hc_name := name ;
8314: LD_ADDR_OWVAR 26
8318: PUSH
8319: LD_VAR 0 4
8323: ST_TO_ADDR
// pom = CreateHuman ;
8324: LD_ADDR_VAR 0 6
8328: PUSH
8329: CALL_OW 44
8333: ST_TO_ADDR
// result := pom ;
8334: LD_ADDR_VAR 0 5
8338: PUSH
8339: LD_VAR 0 6
8343: ST_TO_ADDR
// end ;
8344: LD_VAR 0 5
8348: RET
// function get_sex ; begin
8349: LD_INT 0
8351: PPUSH
// if Prob ( 20 ) then
8352: LD_INT 20
8354: PPUSH
8355: CALL_OW 13
8359: IFFALSE 8371
// result = sex_female else
8361: LD_ADDR_VAR 0 1
8365: PUSH
8366: LD_INT 2
8368: ST_TO_ADDR
8369: GO 8379
// result = sex_male ;
8371: LD_ADDR_VAR 0 1
8375: PUSH
8376: LD_INT 1
8378: ST_TO_ADDR
// end ;
8379: LD_VAR 0 1
8383: RET
// export function create_rusky_utok_0 ; var pom ; begin
8384: LD_INT 0
8386: PPUSH
8387: PPUSH
// pom = [ ] ;
8388: LD_ADDR_VAR 0 2
8392: PUSH
8393: EMPTY
8394: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levelrusi [ difficulty ] ,  ) ;
8395: LD_ADDR_VAR 0 2
8399: PUSH
8400: CALL 8349 0 0
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_EXP 61
8412: PUSH
8413: LD_OWVAR 67
8417: ARRAY
8418: PPUSH
8419: LD_STRING 
8421: PPUSH
8422: CALL 8291 0 4
8426: ST_TO_ADDR
// if pom > 1 then
8427: LD_VAR 0 2
8431: PUSH
8432: LD_INT 1
8434: GREATER
8435: IFFALSE 8479
// pom = pom ^ get_human ( get_sex , class_soldier , levelrusi [ difficulty ] - 2 ,  ) ;
8437: LD_ADDR_VAR 0 2
8441: PUSH
8442: LD_VAR 0 2
8446: PUSH
8447: CALL 8349 0 0
8451: PPUSH
8452: LD_INT 1
8454: PPUSH
8455: LD_EXP 61
8459: PUSH
8460: LD_OWVAR 67
8464: ARRAY
8465: PUSH
8466: LD_INT 2
8468: MINUS
8469: PPUSH
8470: LD_STRING 
8472: PPUSH
8473: CALL 8291 0 4
8477: ADD
8478: ST_TO_ADDR
// if pom > 2 then
8479: LD_VAR 0 2
8483: PUSH
8484: LD_INT 2
8486: GREATER
8487: IFFALSE 8531
// pom = pom ^ get_human ( get_sex , class_soldier , levelrusi [ difficulty ] - 1 ,  ) ;
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: LD_VAR 0 2
8498: PUSH
8499: CALL 8349 0 0
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_EXP 61
8511: PUSH
8512: LD_OWVAR 67
8516: ARRAY
8517: PUSH
8518: LD_INT 1
8520: MINUS
8521: PPUSH
8522: LD_STRING 
8524: PPUSH
8525: CALL 8291 0 4
8529: ADD
8530: ST_TO_ADDR
// RUSKY_UTOK_0_LIST = pom ;
8531: LD_ADDR_EXP 19
8535: PUSH
8536: LD_VAR 0 2
8540: ST_TO_ADDR
// end ;
8541: LD_VAR 0 1
8545: RET
// export function create_attack_after_end ; begin
8546: LD_INT 0
8548: PPUSH
// uc_side := Rusi ;
8549: LD_ADDR_OWVAR 20
8553: PUSH
8554: LD_EXP 2
8558: ST_TO_ADDR
// uc_nation := nation_russian ;
8559: LD_ADDR_OWVAR 21
8563: PUSH
8564: LD_INT 3
8566: ST_TO_ADDR
// pom = [ ] ;
8567: LD_ADDR_LOC 8
8571: PUSH
8572: EMPTY
8573: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
8574: LD_ADDR_LOC 8
8578: PUSH
8579: LD_LOC 8
8583: PUSH
8584: CALL 8349 0 0
8588: PPUSH
8589: LD_INT 9
8591: PPUSH
8592: LD_EXP 61
8596: PUSH
8597: LD_OWVAR 67
8601: ARRAY
8602: PPUSH
8603: LD_STRING 
8605: PPUSH
8606: CALL 8291 0 4
8610: ADD
8611: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
8612: LD_ADDR_LOC 8
8616: PUSH
8617: LD_LOC 8
8621: PUSH
8622: CALL 8349 0 0
8626: PPUSH
8627: LD_INT 9
8629: PPUSH
8630: LD_EXP 61
8634: PUSH
8635: LD_OWVAR 67
8639: ARRAY
8640: PPUSH
8641: LD_STRING 
8643: PPUSH
8644: CALL 8291 0 4
8648: ADD
8649: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levelrusi [ difficulty ] ,  ) ;
8650: LD_ADDR_LOC 8
8654: PUSH
8655: LD_LOC 8
8659: PUSH
8660: CALL 8349 0 0
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: LD_EXP 61
8672: PUSH
8673: LD_OWVAR 67
8677: ARRAY
8678: PPUSH
8679: LD_STRING 
8681: PPUSH
8682: CALL 8291 0 4
8686: ADD
8687: ST_TO_ADDR
// vc_control = control_computer ;
8688: LD_ADDR_OWVAR 38
8692: PUSH
8693: LD_INT 3
8695: ST_TO_ADDR
// vc_chassis := chassisrusi [ difficulty ] ;
8696: LD_ADDR_OWVAR 37
8700: PUSH
8701: LD_EXP 62
8705: PUSH
8706: LD_OWVAR 67
8710: ARRAY
8711: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
8712: LD_ADDR_OWVAR 40
8716: PUSH
8717: LD_EXP 63
8721: PUSH
8722: LD_OWVAR 67
8726: ARRAY
8727: ST_TO_ADDR
// av = CreateVehicle ;
8728: LD_ADDR_LOC 6
8732: PUSH
8733: CALL_OW 45
8737: ST_TO_ADDR
// SetLives ( av , pocet_zivotu_utok_po_utoku [ difficulty ] ) ;
8738: LD_LOC 6
8742: PPUSH
8743: LD_EXP 80
8747: PUSH
8748: LD_OWVAR 67
8752: ARRAY
8753: PPUSH
8754: CALL_OW 234
// pom = pom ^ av ;
8758: LD_ADDR_LOC 8
8762: PUSH
8763: LD_LOC 8
8767: PUSH
8768: LD_LOC 6
8772: ADD
8773: ST_TO_ADDR
// av = CreateVehicle ;
8774: LD_ADDR_LOC 6
8778: PUSH
8779: CALL_OW 45
8783: ST_TO_ADDR
// SetLives ( av , pocet_zivotu_utok_po_utoku [ difficulty ] ) ;
8784: LD_LOC 6
8788: PPUSH
8789: LD_EXP 80
8793: PUSH
8794: LD_OWVAR 67
8798: ARRAY
8799: PPUSH
8800: CALL_OW 234
// pom = pom ^ av ;
8804: LD_ADDR_LOC 8
8808: PUSH
8809: LD_LOC 8
8813: PUSH
8814: LD_LOC 6
8818: ADD
8819: ST_TO_ADDR
// av = CreateVehicle ;
8820: LD_ADDR_LOC 6
8824: PUSH
8825: CALL_OW 45
8829: ST_TO_ADDR
// SetLives ( av , pocet_zivotu_utok_po_utoku [ difficulty ] ) ;
8830: LD_LOC 6
8834: PPUSH
8835: LD_EXP 80
8839: PUSH
8840: LD_OWVAR 67
8844: ARRAY
8845: PPUSH
8846: CALL_OW 234
// pom = pom ^ av ;
8850: LD_ADDR_LOC 8
8854: PUSH
8855: LD_LOC 8
8859: PUSH
8860: LD_LOC 6
8864: ADD
8865: ST_TO_ADDR
// RUSSIAN_AFTER_END_ATTACK_LIST1 = pom ;
8866: LD_ADDR_EXP 20
8870: PUSH
8871: LD_LOC 8
8875: ST_TO_ADDR
// pom = [ ] ;
8876: LD_ADDR_LOC 8
8880: PUSH
8881: EMPTY
8882: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
8883: LD_ADDR_LOC 8
8887: PUSH
8888: LD_LOC 8
8892: PUSH
8893: CALL 8349 0 0
8897: PPUSH
8898: LD_INT 9
8900: PPUSH
8901: LD_EXP 61
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: PPUSH
8912: LD_STRING 
8914: PPUSH
8915: CALL 8291 0 4
8919: ADD
8920: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levelrusi [ difficulty ] ,  ) ;
8921: LD_ADDR_LOC 8
8925: PUSH
8926: LD_LOC 8
8930: PUSH
8931: CALL 8349 0 0
8935: PPUSH
8936: LD_INT 1
8938: PPUSH
8939: LD_EXP 61
8943: PUSH
8944: LD_OWVAR 67
8948: ARRAY
8949: PPUSH
8950: LD_STRING 
8952: PPUSH
8953: CALL 8291 0 4
8957: ADD
8958: ST_TO_ADDR
// vc_control = control_computer ;
8959: LD_ADDR_OWVAR 38
8963: PUSH
8964: LD_INT 3
8966: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
8967: LD_ADDR_OWVAR 37
8971: PUSH
8972: LD_INT 24
8974: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
8975: LD_ADDR_OWVAR 40
8979: PUSH
8980: LD_INT 42
8982: ST_TO_ADDR
// av = CreateVehicle ;
8983: LD_ADDR_LOC 6
8987: PUSH
8988: CALL_OW 45
8992: ST_TO_ADDR
// pom = pom ^ av ;
8993: LD_ADDR_LOC 8
8997: PUSH
8998: LD_LOC 8
9002: PUSH
9003: LD_LOC 6
9007: ADD
9008: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] - 3 ,  ) ;
9009: LD_ADDR_LOC 5
9013: PUSH
9014: CALL 8349 0 0
9018: PPUSH
9019: LD_INT 3
9021: PPUSH
9022: LD_EXP 61
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PUSH
9033: LD_INT 3
9035: MINUS
9036: PPUSH
9037: LD_STRING 
9039: PPUSH
9040: CALL 8291 0 4
9044: ST_TO_ADDR
// vc_control = control_manual ;
9045: LD_ADDR_OWVAR 38
9049: PUSH
9050: LD_INT 1
9052: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
9053: LD_ADDR_OWVAR 40
9057: PUSH
9058: LD_EXP 63
9062: PUSH
9063: LD_OWVAR 67
9067: ARRAY
9068: ST_TO_ADDR
// av = CreateVehicle ;
9069: LD_ADDR_LOC 6
9073: PUSH
9074: CALL_OW 45
9078: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9079: LD_LOC 5
9083: PPUSH
9084: LD_LOC 6
9088: PPUSH
9089: CALL_OW 52
// pom = pom ^ av ;
9093: LD_ADDR_LOC 8
9097: PUSH
9098: LD_LOC 8
9102: PUSH
9103: LD_LOC 6
9107: ADD
9108: ST_TO_ADDR
// if difficulty > 2 then
9109: LD_OWVAR 67
9113: PUSH
9114: LD_INT 2
9116: GREATER
9117: IFFALSE 9203
// begin ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] - 2 ,  ) ;
9119: LD_ADDR_LOC 5
9123: PUSH
9124: CALL 8349 0 0
9128: PPUSH
9129: LD_INT 3
9131: PPUSH
9132: LD_EXP 61
9136: PUSH
9137: LD_OWVAR 67
9141: ARRAY
9142: PUSH
9143: LD_INT 2
9145: MINUS
9146: PPUSH
9147: LD_STRING 
9149: PPUSH
9150: CALL 8291 0 4
9154: ST_TO_ADDR
// vc_control = control_manual ;
9155: LD_ADDR_OWVAR 38
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// av = CreateVehicle ;
9163: LD_ADDR_LOC 6
9167: PUSH
9168: CALL_OW 45
9172: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9173: LD_LOC 5
9177: PPUSH
9178: LD_LOC 6
9182: PPUSH
9183: CALL_OW 52
// pom = pom ^ av ;
9187: LD_ADDR_LOC 8
9191: PUSH
9192: LD_LOC 8
9196: PUSH
9197: LD_LOC 6
9201: ADD
9202: ST_TO_ADDR
// end ; RUSSIAN_AFTER_END_ATTACK_LIST2 = pom ;
9203: LD_ADDR_EXP 21
9207: PUSH
9208: LD_LOC 8
9212: ST_TO_ADDR
// pom = [ ] ;
9213: LD_ADDR_LOC 8
9217: PUSH
9218: EMPTY
9219: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
9220: LD_ADDR_LOC 8
9224: PUSH
9225: LD_LOC 8
9229: PUSH
9230: CALL 8349 0 0
9234: PPUSH
9235: LD_INT 9
9237: PPUSH
9238: LD_EXP 61
9242: PUSH
9243: LD_OWVAR 67
9247: ARRAY
9248: PPUSH
9249: LD_STRING 
9251: PPUSH
9252: CALL 8291 0 4
9256: ADD
9257: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
9258: LD_ADDR_LOC 8
9262: PUSH
9263: LD_LOC 8
9267: PUSH
9268: CALL 8349 0 0
9272: PPUSH
9273: LD_INT 9
9275: PPUSH
9276: LD_EXP 61
9280: PUSH
9281: LD_OWVAR 67
9285: ARRAY
9286: PPUSH
9287: LD_STRING 
9289: PPUSH
9290: CALL 8291 0 4
9294: ADD
9295: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
9296: LD_ADDR_LOC 8
9300: PUSH
9301: LD_LOC 8
9305: PUSH
9306: CALL 8349 0 0
9310: PPUSH
9311: LD_INT 9
9313: PPUSH
9314: LD_EXP 61
9318: PUSH
9319: LD_OWVAR 67
9323: ARRAY
9324: PPUSH
9325: LD_STRING 
9327: PPUSH
9328: CALL 8291 0 4
9332: ADD
9333: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levelrusi [ difficulty ] ,  ) ;
9334: LD_ADDR_LOC 8
9338: PUSH
9339: LD_LOC 8
9343: PUSH
9344: CALL 8349 0 0
9348: PPUSH
9349: LD_INT 1
9351: PPUSH
9352: LD_EXP 61
9356: PUSH
9357: LD_OWVAR 67
9361: ARRAY
9362: PPUSH
9363: LD_STRING 
9365: PPUSH
9366: CALL 8291 0 4
9370: ADD
9371: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
9372: LD_ADDR_LOC 5
9376: PUSH
9377: CALL 8349 0 0
9381: PPUSH
9382: LD_INT 3
9384: PPUSH
9385: LD_EXP 61
9389: PUSH
9390: LD_OWVAR 67
9394: ARRAY
9395: PPUSH
9396: LD_STRING 
9398: PPUSH
9399: CALL 8291 0 4
9403: ST_TO_ADDR
// vc_control = control_manual ;
9404: LD_ADDR_OWVAR 38
9408: PUSH
9409: LD_INT 1
9411: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
9412: LD_ADDR_OWVAR 40
9416: PUSH
9417: LD_EXP 63
9421: PUSH
9422: LD_OWVAR 67
9426: ARRAY
9427: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
9428: LD_ADDR_OWVAR 37
9432: PUSH
9433: LD_INT 24
9435: ST_TO_ADDR
// vc_engine = engine_siberite ;
9436: LD_ADDR_OWVAR 39
9440: PUSH
9441: LD_INT 3
9443: ST_TO_ADDR
// av = CreateVehicle ;
9444: LD_ADDR_LOC 6
9448: PUSH
9449: CALL_OW 45
9453: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9454: LD_LOC 5
9458: PPUSH
9459: LD_LOC 6
9463: PPUSH
9464: CALL_OW 52
// pom = pom ^ av ;
9468: LD_ADDR_LOC 8
9472: PUSH
9473: LD_LOC 8
9477: PUSH
9478: LD_LOC 6
9482: ADD
9483: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
9484: LD_ADDR_LOC 5
9488: PUSH
9489: CALL 8349 0 0
9493: PPUSH
9494: LD_INT 3
9496: PPUSH
9497: LD_EXP 61
9501: PUSH
9502: LD_OWVAR 67
9506: ARRAY
9507: PPUSH
9508: LD_STRING 
9510: PPUSH
9511: CALL 8291 0 4
9515: ST_TO_ADDR
// av = CreateVehicle ;
9516: LD_ADDR_LOC 6
9520: PUSH
9521: CALL_OW 45
9525: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9526: LD_LOC 5
9530: PPUSH
9531: LD_LOC 6
9535: PPUSH
9536: CALL_OW 52
// pom = pom ^ av ;
9540: LD_ADDR_LOC 8
9544: PUSH
9545: LD_LOC 8
9549: PUSH
9550: LD_LOC 6
9554: ADD
9555: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
9556: LD_ADDR_LOC 5
9560: PUSH
9561: CALL 8349 0 0
9565: PPUSH
9566: LD_INT 3
9568: PPUSH
9569: LD_EXP 61
9573: PUSH
9574: LD_OWVAR 67
9578: ARRAY
9579: PPUSH
9580: LD_STRING 
9582: PPUSH
9583: CALL 8291 0 4
9587: ST_TO_ADDR
// av = CreateVehicle ;
9588: LD_ADDR_LOC 6
9592: PUSH
9593: CALL_OW 45
9597: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9598: LD_LOC 5
9602: PPUSH
9603: LD_LOC 6
9607: PPUSH
9608: CALL_OW 52
// pom = pom ^ av ;
9612: LD_ADDR_LOC 8
9616: PUSH
9617: LD_LOC 8
9621: PUSH
9622: LD_LOC 6
9626: ADD
9627: ST_TO_ADDR
// if pom > 1 then
9628: LD_LOC 8
9632: PUSH
9633: LD_INT 1
9635: GREATER
9636: IFFALSE 9710
// begin ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
9638: LD_ADDR_LOC 5
9642: PUSH
9643: CALL 8349 0 0
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_EXP 61
9655: PUSH
9656: LD_OWVAR 67
9660: ARRAY
9661: PPUSH
9662: LD_STRING 
9664: PPUSH
9665: CALL 8291 0 4
9669: ST_TO_ADDR
// av = CreateVehicle ;
9670: LD_ADDR_LOC 6
9674: PUSH
9675: CALL_OW 45
9679: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
9680: LD_LOC 5
9684: PPUSH
9685: LD_LOC 6
9689: PPUSH
9690: CALL_OW 52
// pom = pom ^ av ;
9694: LD_ADDR_LOC 8
9698: PUSH
9699: LD_LOC 8
9703: PUSH
9704: LD_LOC 6
9708: ADD
9709: ST_TO_ADDR
// end ; vc_weapon = ru_rocket ;
9710: LD_ADDR_OWVAR 40
9714: PUSH
9715: LD_INT 47
9717: ST_TO_ADDR
// vc_control = control_computer ;
9718: LD_ADDR_OWVAR 38
9722: PUSH
9723: LD_INT 3
9725: ST_TO_ADDR
// av = CreateVehicle ;
9726: LD_ADDR_LOC 6
9730: PUSH
9731: CALL_OW 45
9735: ST_TO_ADDR
// pom = pom ^ av ;
9736: LD_ADDR_LOC 8
9740: PUSH
9741: LD_LOC 8
9745: PUSH
9746: LD_LOC 6
9750: ADD
9751: ST_TO_ADDR
// if pom > 1 then
9752: LD_LOC 8
9756: PUSH
9757: LD_INT 1
9759: GREATER
9760: IFFALSE 9788
// begin av = CreateVehicle ;
9762: LD_ADDR_LOC 6
9766: PUSH
9767: CALL_OW 45
9771: ST_TO_ADDR
// pom = pom ^ av ;
9772: LD_ADDR_LOC 8
9776: PUSH
9777: LD_LOC 8
9781: PUSH
9782: LD_LOC 6
9786: ADD
9787: ST_TO_ADDR
// end ; RUSSIAN_AFTER_END_ATTACK_LIST_FINAL = pom ;
9788: LD_ADDR_EXP 22
9792: PUSH
9793: LD_LOC 8
9797: ST_TO_ADDR
// end ;
9798: LD_VAR 0 1
9802: RET
// export function create_kecal ; begin
9803: LD_INT 0
9805: PPUSH
// uc_side := You ;
9806: LD_ADDR_OWVAR 20
9810: PUSH
9811: LD_EXP 3
9815: ST_TO_ADDR
// uc_nation := nation_american ;
9816: LD_ADDR_OWVAR 21
9820: PUSH
9821: LD_INT 1
9823: ST_TO_ADDR
// ah = get_human ( sex_female , class_soldier , 5 , Linda Violet ) ;
9824: LD_ADDR_LOC 5
9828: PUSH
9829: LD_INT 2
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: LD_INT 5
9837: PPUSH
9838: LD_STRING Linda Violet
9840: PPUSH
9841: CALL 8291 0 4
9845: ST_TO_ADDR
// result := ah ;
9846: LD_ADDR_VAR 0 1
9850: PUSH
9851: LD_LOC 5
9855: ST_TO_ADDR
// end ;
9856: LD_VAR 0 1
9860: RET
// export function create_ruske_bazukery ; var pomp ; begin
9861: LD_INT 0
9863: PPUSH
9864: PPUSH
// uc_side := Rusi ;
9865: LD_ADDR_OWVAR 20
9869: PUSH
9870: LD_EXP 2
9874: ST_TO_ADDR
// uc_nation := nation_russian ;
9875: LD_ADDR_OWVAR 21
9879: PUSH
9880: LD_INT 3
9882: ST_TO_ADDR
// pomp = get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
9883: LD_ADDR_VAR 0 2
9887: PUSH
9888: CALL 8349 0 0
9892: PPUSH
9893: LD_INT 9
9895: PPUSH
9896: LD_EXP 61
9900: PUSH
9901: LD_OWVAR 67
9905: ARRAY
9906: PPUSH
9907: LD_STRING 
9909: PPUSH
9910: CALL 8291 0 4
9914: ST_TO_ADDR
// pomp = pomp ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_VAR 0 2
9924: PUSH
9925: CALL 8349 0 0
9929: PPUSH
9930: LD_INT 9
9932: PPUSH
9933: LD_EXP 61
9937: PUSH
9938: LD_OWVAR 67
9942: ARRAY
9943: PPUSH
9944: LD_STRING 
9946: PPUSH
9947: CALL 8291 0 4
9951: ADD
9952: ST_TO_ADDR
// if difficulty > 1 then
9953: LD_OWVAR 67
9957: PUSH
9958: LD_INT 1
9960: GREATER
9961: IFFALSE 10001
// pomp = pomp ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_VAR 0 2
9972: PUSH
9973: CALL 8349 0 0
9977: PPUSH
9978: LD_INT 9
9980: PPUSH
9981: LD_EXP 61
9985: PUSH
9986: LD_OWVAR 67
9990: ARRAY
9991: PPUSH
9992: LD_STRING 
9994: PPUSH
9995: CALL 8291 0 4
9999: ADD
10000: ST_TO_ADDR
// if difficulty > 2 then
10001: LD_OWVAR 67
10005: PUSH
10006: LD_INT 2
10008: GREATER
10009: IFFALSE 10049
// pomp = pomp ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
10011: LD_ADDR_VAR 0 2
10015: PUSH
10016: LD_VAR 0 2
10020: PUSH
10021: CALL 8349 0 0
10025: PPUSH
10026: LD_INT 9
10028: PPUSH
10029: LD_EXP 61
10033: PUSH
10034: LD_OWVAR 67
10038: ARRAY
10039: PPUSH
10040: LD_STRING 
10042: PPUSH
10043: CALL 8291 0 4
10047: ADD
10048: ST_TO_ADDR
// pomp = get_human ( get_sex , class_soldier , Rand ( 1 , 1 + difficulty ) ,  ) ;
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: CALL 8349 0 0
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: LD_INT 1
10067: PUSH
10068: LD_OWVAR 67
10072: PLUS
10073: PPUSH
10074: CALL_OW 12
10078: PPUSH
10079: LD_STRING 
10081: PPUSH
10082: CALL 8291 0 4
10086: ST_TO_ADDR
// result := pomp ;
10087: LD_ADDR_VAR 0 1
10091: PUSH
10092: LD_VAR 0 2
10096: ST_TO_ADDR
// end ;
10097: LD_VAR 0 1
10101: RET
// export function create_mechaniky_navic ; var pom ; begin
10102: LD_INT 0
10104: PPUSH
10105: PPUSH
// uc_side := Rusi ;
10106: LD_ADDR_OWVAR 20
10110: PUSH
10111: LD_EXP 2
10115: ST_TO_ADDR
// uc_nation = nation_russian ;
10116: LD_ADDR_OWVAR 21
10120: PUSH
10121: LD_INT 3
10123: ST_TO_ADDR
// pom = [ ] ;
10124: LD_ADDR_VAR 0 2
10128: PUSH
10129: EMPTY
10130: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_VAR 0 2
10140: PUSH
10141: CALL 8349 0 0
10145: PPUSH
10146: LD_INT 3
10148: PPUSH
10149: LD_EXP 61
10153: PUSH
10154: LD_OWVAR 67
10158: ARRAY
10159: PPUSH
10160: LD_STRING 
10162: PPUSH
10163: CALL 8291 0 4
10167: ADD
10168: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_VAR 0 2
10178: PUSH
10179: CALL 8349 0 0
10183: PPUSH
10184: LD_INT 3
10186: PPUSH
10187: LD_EXP 61
10191: PUSH
10192: LD_OWVAR 67
10196: ARRAY
10197: PPUSH
10198: LD_STRING 
10200: PPUSH
10201: CALL 8291 0 4
10205: ADD
10206: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10207: LD_ADDR_VAR 0 2
10211: PUSH
10212: LD_VAR 0 2
10216: PUSH
10217: CALL 8349 0 0
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: LD_EXP 61
10229: PUSH
10230: LD_OWVAR 67
10234: ARRAY
10235: PPUSH
10236: LD_STRING 
10238: PPUSH
10239: CALL 8291 0 4
10243: ADD
10244: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: LD_VAR 0 2
10254: PUSH
10255: CALL 8349 0 0
10259: PPUSH
10260: LD_INT 3
10262: PPUSH
10263: LD_EXP 61
10267: PUSH
10268: LD_OWVAR 67
10272: ARRAY
10273: PPUSH
10274: LD_STRING 
10276: PPUSH
10277: CALL 8291 0 4
10281: ADD
10282: ST_TO_ADDR
// MECHANICI_NAVIC = pom ;
10283: LD_ADDR_EXP 23
10287: PUSH
10288: LD_VAR 0 2
10292: ST_TO_ADDR
// end ;
10293: LD_VAR 0 1
10297: RET
// export function C_N_A ; var pom ; begin
10298: LD_INT 0
10300: PPUSH
10301: PPUSH
// uc_nation := nation_russian ;
10302: LD_ADDR_OWVAR 21
10306: PUSH
10307: LD_INT 3
10309: ST_TO_ADDR
// uc_side := Rusi ;
10310: LD_ADDR_OWVAR 20
10314: PUSH
10315: LD_EXP 2
10319: ST_TO_ADDR
// pom = [ ] ;
10320: LD_ADDR_VAR 0 2
10324: PUSH
10325: EMPTY
10326: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
10327: LD_ADDR_VAR 0 2
10331: PUSH
10332: LD_VAR 0 2
10336: PUSH
10337: CALL 8349 0 0
10341: PPUSH
10342: LD_INT 9
10344: PPUSH
10345: LD_EXP 61
10349: PUSH
10350: LD_OWVAR 67
10354: ARRAY
10355: PPUSH
10356: LD_STRING 
10358: PPUSH
10359: CALL 8291 0 4
10363: ADD
10364: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
10365: LD_ADDR_VAR 0 2
10369: PUSH
10370: LD_VAR 0 2
10374: PUSH
10375: CALL 8349 0 0
10379: PPUSH
10380: LD_INT 9
10382: PPUSH
10383: LD_EXP 61
10387: PUSH
10388: LD_OWVAR 67
10392: ARRAY
10393: PPUSH
10394: LD_STRING 
10396: PPUSH
10397: CALL 8291 0 4
10401: ADD
10402: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_bazooker , levelrusi [ difficulty ] ,  ) ;
10403: LD_ADDR_VAR 0 2
10407: PUSH
10408: LD_VAR 0 2
10412: PUSH
10413: CALL 8349 0 0
10417: PPUSH
10418: LD_INT 9
10420: PPUSH
10421: LD_EXP 61
10425: PUSH
10426: LD_OWVAR 67
10430: ARRAY
10431: PPUSH
10432: LD_STRING 
10434: PPUSH
10435: CALL 8291 0 4
10439: ADD
10440: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levelrusi [ difficulty ] ,  ) ;
10441: LD_ADDR_VAR 0 2
10445: PUSH
10446: LD_VAR 0 2
10450: PUSH
10451: CALL 8349 0 0
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: LD_EXP 61
10463: PUSH
10464: LD_OWVAR 67
10468: ARRAY
10469: PPUSH
10470: LD_STRING 
10472: PPUSH
10473: CALL 8291 0 4
10477: ADD
10478: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10479: LD_ADDR_LOC 5
10483: PUSH
10484: CALL 8349 0 0
10488: PPUSH
10489: LD_INT 3
10491: PPUSH
10492: LD_EXP 61
10496: PUSH
10497: LD_OWVAR 67
10501: ARRAY
10502: PPUSH
10503: LD_STRING 
10505: PPUSH
10506: CALL 8291 0 4
10510: ST_TO_ADDR
// vc_control = control_manual ;
10511: LD_ADDR_OWVAR 38
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// vc_weapon := zbranrusi [ difficulty ] ;
10519: LD_ADDR_OWVAR 40
10523: PUSH
10524: LD_EXP 63
10528: PUSH
10529: LD_OWVAR 67
10533: ARRAY
10534: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
10535: LD_ADDR_OWVAR 37
10539: PUSH
10540: LD_INT 24
10542: ST_TO_ADDR
// vc_engine = engine_siberite ;
10543: LD_ADDR_OWVAR 39
10547: PUSH
10548: LD_INT 3
10550: ST_TO_ADDR
// av = CreateVehicle ;
10551: LD_ADDR_LOC 6
10555: PUSH
10556: CALL_OW 45
10560: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10561: LD_LOC 5
10565: PPUSH
10566: LD_LOC 6
10570: PPUSH
10571: CALL_OW 52
// pom = pom ^ av ;
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_VAR 0 2
10584: PUSH
10585: LD_LOC 6
10589: ADD
10590: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10591: LD_ADDR_LOC 5
10595: PUSH
10596: CALL 8349 0 0
10600: PPUSH
10601: LD_INT 3
10603: PPUSH
10604: LD_EXP 61
10608: PUSH
10609: LD_OWVAR 67
10613: ARRAY
10614: PPUSH
10615: LD_STRING 
10617: PPUSH
10618: CALL 8291 0 4
10622: ST_TO_ADDR
// av = CreateVehicle ;
10623: LD_ADDR_LOC 6
10627: PUSH
10628: CALL_OW 45
10632: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10633: LD_LOC 5
10637: PPUSH
10638: LD_LOC 6
10642: PPUSH
10643: CALL_OW 52
// pom = pom ^ av ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_VAR 0 2
10656: PUSH
10657: LD_LOC 6
10661: ADD
10662: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10663: LD_ADDR_LOC 5
10667: PUSH
10668: CALL 8349 0 0
10672: PPUSH
10673: LD_INT 3
10675: PPUSH
10676: LD_EXP 61
10680: PUSH
10681: LD_OWVAR 67
10685: ARRAY
10686: PPUSH
10687: LD_STRING 
10689: PPUSH
10690: CALL 8291 0 4
10694: ST_TO_ADDR
// av = CreateVehicle ;
10695: LD_ADDR_LOC 6
10699: PUSH
10700: CALL_OW 45
10704: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10705: LD_LOC 5
10709: PPUSH
10710: LD_LOC 6
10714: PPUSH
10715: CALL_OW 52
// pom = pom ^ av ;
10719: LD_ADDR_VAR 0 2
10723: PUSH
10724: LD_VAR 0 2
10728: PUSH
10729: LD_LOC 6
10733: ADD
10734: ST_TO_ADDR
// if pom > 1 then
10735: LD_VAR 0 2
10739: PUSH
10740: LD_INT 1
10742: GREATER
10743: IFFALSE 10817
// begin ah = get_human ( get_sex , class_mechanic , levelrusi [ difficulty ] ,  ) ;
10745: LD_ADDR_LOC 5
10749: PUSH
10750: CALL 8349 0 0
10754: PPUSH
10755: LD_INT 3
10757: PPUSH
10758: LD_EXP 61
10762: PUSH
10763: LD_OWVAR 67
10767: ARRAY
10768: PPUSH
10769: LD_STRING 
10771: PPUSH
10772: CALL 8291 0 4
10776: ST_TO_ADDR
// av = CreateVehicle ;
10777: LD_ADDR_LOC 6
10781: PUSH
10782: CALL_OW 45
10786: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
10787: LD_LOC 5
10791: PPUSH
10792: LD_LOC 6
10796: PPUSH
10797: CALL_OW 52
// pom = pom ^ av ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_VAR 0 2
10810: PUSH
10811: LD_LOC 6
10815: ADD
10816: ST_TO_ADDR
// end ; vc_weapon = ru_rocket ;
10817: LD_ADDR_OWVAR 40
10821: PUSH
10822: LD_INT 47
10824: ST_TO_ADDR
// vc_control = control_computer ;
10825: LD_ADDR_OWVAR 38
10829: PUSH
10830: LD_INT 3
10832: ST_TO_ADDR
// av = CreateVehicle ;
10833: LD_ADDR_LOC 6
10837: PUSH
10838: CALL_OW 45
10842: ST_TO_ADDR
// pom = pom ^ av ;
10843: LD_ADDR_VAR 0 2
10847: PUSH
10848: LD_VAR 0 2
10852: PUSH
10853: LD_LOC 6
10857: ADD
10858: ST_TO_ADDR
// if pom > 1 then
10859: LD_VAR 0 2
10863: PUSH
10864: LD_INT 1
10866: GREATER
10867: IFFALSE 10921
// begin av = CreateVehicle ;
10869: LD_ADDR_LOC 6
10873: PUSH
10874: CALL_OW 45
10878: ST_TO_ADDR
// pom = pom ^ av ;
10879: LD_ADDR_VAR 0 2
10883: PUSH
10884: LD_VAR 0 2
10888: PUSH
10889: LD_LOC 6
10893: ADD
10894: ST_TO_ADDR
// av = CreateVehicle ;
10895: LD_ADDR_LOC 6
10899: PUSH
10900: CALL_OW 45
10904: ST_TO_ADDR
// pom = pom ^ av ;
10905: LD_ADDR_VAR 0 2
10909: PUSH
10910: LD_VAR 0 2
10914: PUSH
10915: LD_LOC 6
10919: ADD
10920: ST_TO_ADDR
// end ; result := pom ;
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: LD_VAR 0 2
10930: ST_TO_ADDR
// end ; end_of_file
10931: LD_VAR 0 1
10935: RET
// var pom ; var i ; export Dietrich ; export LS ; export tapkal ; export Arabi_Utoci ; var polozil ; var Autok ; var auta ; export UTEKLI_ARABI ; export arabsti_zradci_LIST ; every 0 0$0.5 do
10936: GO 10938
10938: DISABLE
// begin for i := 1 to 22 do
10939: LD_ADDR_LOC 13
10943: PUSH
10944: DOUBLE
10945: LD_INT 1
10947: DEC
10948: ST_TO_ADDR
10949: LD_INT 22
10951: PUSH
10952: FOR_TO
10953: IFFALSE 10962
// disable ( i ) ;
10955: LD_LOC 13
10959: DISABLE_MARKED
10960: GO 10952
10962: POP
10963: POP
// Arabi_utoci = false ;
10964: LD_ADDR_EXP 30
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// arabsti_zradci_LIST = [ ] ;
10972: LD_ADDR_EXP 32
10976: PUSH
10977: EMPTY
10978: ST_TO_ADDR
// end ;
10979: END
// every 0 0$1 do
10980: GO 10982
10982: DISABLE
// begin ComEnterUnit ( LS , Ar_lab ) ;
10983: LD_EXP 28
10987: PPUSH
10988: LD_INT 16
10990: PPUSH
10991: CALL_OW 120
// AddComChangeProfession ( LS , class_scientistic ) ;
10995: LD_EXP 28
10999: PPUSH
11000: LD_INT 4
11002: PPUSH
11003: CALL_OW 183
// ComEnterUnit ( tapkal , Ar_bar ) ;
11007: LD_EXP 29
11011: PPUSH
11012: LD_INT 18
11014: PPUSH
11015: CALL_OW 120
// ComEnterUnit ( Dietrich , Ar_bar ) ;
11019: LD_EXP 27
11023: PPUSH
11024: LD_INT 18
11026: PPUSH
11027: CALL_OW 120
// AddComChangeProfession ( Dietrich , class_soldier ) ;
11031: LD_EXP 27
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 183
// pom = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] ] ) diff [ LS , Dietrich ] ;
11043: LD_ADDR_LOC 12
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_EXP 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 21
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PPUSH
11074: CALL_OW 69
11078: PUSH
11079: LD_EXP 28
11083: PUSH
11084: LD_EXP 27
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: DIFF
11093: ST_TO_ADDR
// if pom > 0 then
11094: LD_LOC 12
11098: PUSH
11099: LD_INT 0
11101: GREATER
11102: IFFALSE 11156
// begin ComEnterUnit ( pom [ 1 ] , Ar_lab ) ;
11104: LD_LOC 12
11108: PUSH
11109: LD_INT 1
11111: ARRAY
11112: PPUSH
11113: LD_INT 16
11115: PPUSH
11116: CALL_OW 120
// AddComChangeProfession ( pom [ 1 ] , class_scientistic ) ;
11120: LD_LOC 12
11124: PUSH
11125: LD_INT 1
11127: ARRAY
11128: PPUSH
11129: LD_INT 4
11131: PPUSH
11132: CALL_OW 183
// pom = pom diff pom [ 1 ] ;
11136: LD_ADDR_LOC 12
11140: PUSH
11141: LD_LOC 12
11145: PUSH
11146: LD_LOC 12
11150: PUSH
11151: LD_INT 1
11153: ARRAY
11154: DIFF
11155: ST_TO_ADDR
// end ; if pom > 0 then
11156: LD_LOC 12
11160: PUSH
11161: LD_INT 0
11163: GREATER
11164: IFFALSE 11218
// begin ComEnterUnit ( pom [ 1 ] , Ar_bar ) ;
11166: LD_LOC 12
11170: PUSH
11171: LD_INT 1
11173: ARRAY
11174: PPUSH
11175: LD_INT 18
11177: PPUSH
11178: CALL_OW 120
// AddComChangeProfession ( pom [ 1 ] , class_soldier ) ;
11182: LD_LOC 12
11186: PUSH
11187: LD_INT 1
11189: ARRAY
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 183
// pom = pom diff pom [ 1 ] ;
11198: LD_ADDR_LOC 12
11202: PUSH
11203: LD_LOC 12
11207: PUSH
11208: LD_LOC 12
11212: PUSH
11213: LD_INT 1
11215: ARRAY
11216: DIFF
11217: ST_TO_ADDR
// end ; if pom > 0 then
11218: LD_LOC 12
11222: PUSH
11223: LD_INT 0
11225: GREATER
11226: IFFALSE 11252
// begin ComEnterUnit ( pom , Ar_dep ) ;
11228: LD_LOC 12
11232: PPUSH
11233: LD_INT 15
11235: PPUSH
11236: CALL_OW 120
// AddComChangeProfession ( pom , class_engineer ) ;
11240: LD_LOC 12
11244: PPUSH
11245: LD_INT 2
11247: PPUSH
11248: CALL_OW 183
// end ; AddCargo ( auto1 , mat_siberit , 20 ) ;
11252: LD_INT 20
11254: PPUSH
11255: LD_INT 3
11257: PPUSH
11258: LD_INT 20
11260: PPUSH
11261: CALL_OW 291
// AddCargo ( auto1 , mat_oil , 30 ) ;
11265: LD_INT 20
11267: PPUSH
11268: LD_INT 2
11270: PPUSH
11271: LD_INT 30
11273: PPUSH
11274: CALL_OW 291
// AddCargo ( auto2 , mat_cans , 40 ) ;
11278: LD_INT 21
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: LD_INT 40
11286: PPUSH
11287: CALL_OW 291
// AddCargo ( auto2 , mat_oil , 40 ) ;
11291: LD_INT 21
11293: PPUSH
11294: LD_INT 2
11296: PPUSH
11297: LD_INT 40
11299: PPUSH
11300: CALL_OW 291
// end ;
11304: END
// every 0 0$1 trigger Arabi_utoci = true do var arabi_v_zakladne ; var pp ; var un ;
11305: LD_EXP 30
11309: PUSH
11310: LD_INT 1
11312: EQUAL
11313: IFFALSE 11826
11315: GO 11317
11317: DISABLE
11318: LD_INT 0
11320: PPUSH
11321: PPUSH
11322: PPUSH
// begin Dial = 5 ;
11323: LD_ADDR_EXP 40
11327: PUSH
11328: LD_INT 5
11330: ST_TO_ADDR
// arabi_v_zakladne = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] ] ) ;
11331: LD_ADDR_VAR 0 1
11335: PUSH
11336: LD_INT 22
11338: PUSH
11339: LD_EXP 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 21
11350: PUSH
11351: LD_INT 1
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PPUSH
11362: CALL_OW 69
11366: ST_TO_ADDR
// arabsti_zradci_LIST = arabi_v_zakladne ;
11367: LD_ADDR_EXP 32
11371: PUSH
11372: LD_VAR 0 1
11376: ST_TO_ADDR
// ComExitBuilding ( arabi_v_zakladne ) ;
11377: LD_VAR 0 1
11381: PPUSH
11382: CALL_OW 122
// AddComEnterUnit ( arabi_v_zakladne , Ar_bar ) ;
11386: LD_VAR 0 1
11390: PPUSH
11391: LD_INT 18
11393: PPUSH
11394: CALL_OW 180
// AddComChangeProfession ( arabi_v_zakladne diff LS , class_mortar ) ;
11398: LD_VAR 0 1
11402: PUSH
11403: LD_EXP 28
11407: DIFF
11408: PPUSH
11409: LD_INT 8
11411: PPUSH
11412: CALL_OW 183
// AddComExitBuilding ( arabi_v_zakladne ) ;
11416: LD_VAR 0 1
11420: PPUSH
11421: CALL_OW 182
// AddComMoveXY ( arabi_v_zakladne , 76 , 20 ) ;
11425: LD_VAR 0 1
11429: PPUSH
11430: LD_INT 76
11432: PPUSH
11433: LD_INT 20
11435: PPUSH
11436: CALL_OW 171
// wait ( 0 0$3 ) ;
11440: LD_INT 105
11442: PPUSH
11443: CALL_OW 67
// prebarvi_araby ( arabi_v_zakladne ) ;
11447: LD_VAR 0 1
11451: PPUSH
11452: CALL 12230 0 1
// AddComMoveXY ( arabi_v_zakladne , 86 , 12 ) ;
11456: LD_VAR 0 1
11460: PPUSH
11461: LD_INT 86
11463: PPUSH
11464: LD_INT 12
11466: PPUSH
11467: CALL_OW 171
// wait ( cekani_zradnych_arabu_pred_utokem ) ;
11471: LD_EXP 71
11475: PPUSH
11476: CALL_OW 67
// enable ( 20 ) ;
11480: LD_INT 20
11482: ENABLE_MARKED
// wait ( cas_druzi_arabaci ) ;
11483: LD_EXP 72
11487: PPUSH
11488: CALL_OW 67
// create_ar_zradu ;
11492: CALL 6845 0 0
// Autok = FilterAllUnits ( [ [ f_side , Arabi2 ] ] ) ;
11496: LD_ADDR_LOC 15
11500: PUSH
11501: LD_INT 22
11503: PUSH
11504: LD_EXP 4
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: PPUSH
11516: CALL_OW 69
11520: ST_TO_ADDR
// ComAgressiveMove ( Autok , 104 , 25 ) ;
11521: LD_LOC 15
11525: PPUSH
11526: LD_INT 104
11528: PPUSH
11529: LD_INT 25
11531: PPUSH
11532: CALL_OW 114
// AddComAgressiveMove ( Autok , 99 , 36 ) ;
11536: LD_LOC 15
11540: PPUSH
11541: LD_INT 99
11543: PPUSH
11544: LD_INT 36
11546: PPUSH
11547: CALL_OW 174
// pp = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11551: LD_ADDR_VAR 0 2
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_EXP 3
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 30
11573: PUSH
11574: LD_INT 0
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PPUSH
11600: CALL_OW 69
11604: ST_TO_ADDR
// if pp > 0 then
11605: LD_VAR 0 2
11609: PUSH
11610: LD_INT 0
11612: GREATER
11613: IFFALSE 11652
// AddComAgressiveMove ( Autok , GetX ( pp [ 1 ] ) , GetY ( pp [ 1 ] ) ) ;
11615: LD_LOC 15
11619: PPUSH
11620: LD_VAR 0 2
11624: PUSH
11625: LD_INT 1
11627: ARRAY
11628: PPUSH
11629: CALL_OW 250
11633: PPUSH
11634: LD_VAR 0 2
11638: PUSH
11639: LD_INT 1
11641: ARRAY
11642: PPUSH
11643: CALL_OW 251
11647: PPUSH
11648: CALL_OW 174
// pp = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: LD_INT 22
11659: PUSH
11660: LD_EXP 3
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 21
11671: PUSH
11672: LD_INT 3
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 69
11687: ST_TO_ADDR
// if pp > 0 then
11688: LD_VAR 0 2
11692: PUSH
11693: LD_INT 0
11695: GREATER
11696: IFFALSE 11826
// begin un = NearestUnitToUnit ( tapkal , pp ) ;
11698: LD_ADDR_VAR 0 3
11702: PUSH
11703: LD_EXP 29
11707: PPUSH
11708: LD_VAR 0 2
11712: PPUSH
11713: CALL_OW 74
11717: ST_TO_ADDR
// ComExitBuilding ( tapkal ) ;
11718: LD_EXP 29
11722: PPUSH
11723: CALL_OW 122
// AddComPlaceRemoteCharge ( tapkal , 0 , 0 , un ) ;
11727: LD_EXP 29
11731: PPUSH
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 0
11737: PPUSH
11738: LD_VAR 0 3
11742: PPUSH
11743: CALL_OW 193
// AddComPlaceDelayedCharge ( tapkal , GetX ( un ) + 1 , GetY ( un ) + 1 , 0 ) ;
11747: LD_EXP 29
11751: PPUSH
11752: LD_VAR 0 3
11756: PPUSH
11757: CALL_OW 250
11761: PUSH
11762: LD_INT 1
11764: PLUS
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: CALL_OW 251
11775: PUSH
11776: LD_INT 1
11778: PLUS
11779: PPUSH
11780: LD_INT 0
11782: PPUSH
11783: CALL_OW 192
// AddComMoveXY ( tapkal , 78 , 10 ) ;
11787: LD_EXP 29
11791: PPUSH
11792: LD_INT 78
11794: PPUSH
11795: LD_INT 10
11797: PPUSH
11798: CALL_OW 171
// AddComFireExplosives ( tapkal ) ;
11802: LD_EXP 29
11806: PPUSH
11807: CALL_OW 194
// AddComAgressiveMove ( tapkal , 128 , 19 ) ;
11811: LD_EXP 29
11815: PPUSH
11816: LD_INT 128
11818: PPUSH
11819: LD_INT 19
11821: PPUSH
11822: CALL_OW 174
// end ; end ;
11826: PPOPN 3
11828: END
// every 0 0$4 marked 20 do var pomarabi ;
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
// begin if FilterUnitsInArea ( Mortari , [ [ f_side , Arabi3 ] ] ) > 0 then
11835: LD_INT 27
11837: PPUSH
11838: LD_INT 22
11840: PUSH
11841: LD_EXP 7
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: EMPTY
11851: LIST
11852: PPUSH
11853: CALL_OW 70
11857: PUSH
11858: LD_INT 0
11860: GREATER
11861: IFFALSE 11915
// begin wait ( 0 0$25 ) ;
11863: LD_INT 875
11865: PPUSH
11866: CALL_OW 67
// enable ( 21 ) ;
11870: LD_INT 21
11872: ENABLE_MARKED
// pomarabi = FilterAllUnits ( [ [ f_side , Arabi3 ] ] ) ;
11873: LD_ADDR_VAR 0 1
11877: PUSH
11878: LD_INT 22
11880: PUSH
11881: LD_EXP 7
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: PPUSH
11893: CALL_OW 69
11897: ST_TO_ADDR
// AddComMoveXY ( pomarabi , 129 , 20 ) ;
11898: LD_VAR 0 1
11902: PPUSH
11903: LD_INT 129
11905: PPUSH
11906: LD_INT 20
11908: PPUSH
11909: CALL_OW 171
// end else
11913: GO 11916
// enable ;
11915: ENABLE
// end ;
11916: PPOPN 1
11918: END
// every 0 0$1 marked 21 do
11919: GO 11921
11921: DISABLE
// begin pom = FilterUnitsInArea ( REUTEK , [ [ f_side , Arabi3 ] ] ) ;
11922: LD_ADDR_LOC 12
11926: PUSH
11927: LD_INT 28
11929: PPUSH
11930: LD_INT 22
11932: PUSH
11933: LD_EXP 7
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: PPUSH
11945: CALL_OW 70
11949: ST_TO_ADDR
// if pom > 0 then
11950: LD_LOC 12
11954: PUSH
11955: LD_INT 0
11957: GREATER
11958: IFFALSE 11987
// begin RemoveUnit ( pom [ 1 ] ) ;
11960: LD_LOC 12
11964: PUSH
11965: LD_INT 1
11967: ARRAY
11968: PPUSH
11969: CALL_OW 64
// UTEKLI_ARABI := UTEKLI_ARABI + 1 ;
11973: LD_ADDR_EXP 31
11977: PUSH
11978: LD_EXP 31
11982: PUSH
11983: LD_INT 1
11985: PLUS
11986: ST_TO_ADDR
// end ; enable ;
11987: ENABLE
// end ;
11988: END
// every 0 0$20 do
11989: GO 11991
11991: DISABLE
// begin if GetSide ( Ar_lab ) <> Arabi then
11992: LD_INT 16
11994: PPUSH
11995: CALL_OW 255
11999: PUSH
12000: LD_EXP 1
12004: NONEQUAL
12005: IFFALSE 12009
// exit ;
12007: GO 12045
// pom = UnitsInside ( Ar_lab ) ;
12009: LD_ADDR_LOC 12
12013: PUSH
12014: LD_INT 16
12016: PPUSH
12017: CALL_OW 313
12021: ST_TO_ADDR
// if pom > 0 then
12022: LD_LOC 12
12026: PUSH
12027: LD_INT 0
12029: GREATER
12030: IFFALSE 12044
// ComResearch ( Ar_lab , tech_Sib1 ) else
12032: LD_INT 16
12034: PPUSH
12035: LD_INT 54
12037: PPUSH
12038: CALL_OW 124
12042: GO 12045
// enable ;
12044: ENABLE
// end ;
12045: END
// every 0 0$45 trigger GetTech ( tech_Sib1 , Arabi ) = state_researched do
12046: LD_INT 54
12048: PPUSH
12049: LD_EXP 1
12053: PPUSH
12054: CALL_OW 321
12058: PUSH
12059: LD_INT 2
12061: EQUAL
12062: IFFALSE 12101
12064: GO 12066
12066: DISABLE
// begin wait ( 1 1$0 ) ;
12067: LD_INT 2100
12069: PPUSH
12070: CALL_OW 67
// if GetSide ( Ar_lab ) <> Arabi then
12074: LD_INT 16
12076: PPUSH
12077: CALL_OW 255
12081: PUSH
12082: LD_EXP 1
12086: NONEQUAL
12087: IFFALSE 12091
// exit ;
12089: GO 12101
// ComResearch ( Ar_lab , tech_Sib2 ) ;
12091: LD_INT 16
12093: PPUSH
12094: LD_INT 55
12096: PPUSH
12097: CALL_OW 124
// end ;
12101: END
// every 0 0$43 trigger GetTech ( tech_Sib2 , Arabi ) = state_researched do
12102: LD_INT 55
12104: PPUSH
12105: LD_EXP 1
12109: PPUSH
12110: CALL_OW 321
12114: PUSH
12115: LD_INT 2
12117: EQUAL
12118: IFFALSE 12172
12120: GO 12122
12122: DISABLE
// begin wait ( 1 1$0 ) ;
12123: LD_INT 2100
12125: PPUSH
12126: CALL_OW 67
// if GetSide ( Ar_lab ) <> Arabi then
12130: LD_INT 16
12132: PPUSH
12133: CALL_OW 255
12137: PUSH
12138: LD_EXP 1
12142: NONEQUAL
12143: IFFALSE 12147
// exit ;
12145: GO 12172
// SetTech ( tech_Sib3 , Arabi , state_enabled ) ;
12147: LD_INT 56
12149: PPUSH
12150: LD_EXP 1
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 322
// ComResearch ( Ar_lab , tech_Sib3 ) ;
12162: LD_INT 16
12164: PPUSH
12165: LD_INT 56
12167: PPUSH
12168: CALL_OW 124
// end ;
12172: END
// every 0 0$13 trigger GetTech ( tech_Sib1 , You ) = state_researched do
12173: LD_INT 54
12175: PPUSH
12176: LD_EXP 3
12180: PPUSH
12181: CALL_OW 321
12185: PUSH
12186: LD_INT 2
12188: EQUAL
12189: IFFALSE 12202
12191: GO 12193
12193: DISABLE
// begin arabi_utoci = true ;
12194: LD_ADDR_EXP 30
12198: PUSH
12199: LD_INT 1
12201: ST_TO_ADDR
// end ;
12202: END
// every 0 0$1 do
12203: GO 12205
12205: DISABLE
// begin wait ( arabsky_utok_prichod [ difficulty ] ) ;
12206: LD_EXP 81
12210: PUSH
12211: LD_OWVAR 67
12215: ARRAY
12216: PPUSH
12217: CALL_OW 67
// Arabi_utoci = true ;
12221: LD_ADDR_EXP 30
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// end ;
12229: END
// function prebarvi_Araby ( people ) ; var i ; var poc ; begin
12230: LD_INT 0
12232: PPUSH
12233: PPUSH
12234: PPUSH
// poc = 0 ;
12235: LD_ADDR_VAR 0 4
12239: PUSH
12240: LD_INT 0
12242: ST_TO_ADDR
// while FilterUnitsExceptArea ( APU , [ [ f_side , Arabi ] , [ f_type , unit_human ] ] ) > 0 and poc < 8 do
12243: LD_INT 32
12245: PPUSH
12246: LD_INT 22
12248: PUSH
12249: LD_EXP 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 21
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 71
12276: PUSH
12277: LD_INT 0
12279: GREATER
12280: PUSH
12281: LD_VAR 0 4
12285: PUSH
12286: LD_INT 8
12288: LESS
12289: AND
12290: IFFALSE 12315
// begin wait ( 0 0$1 ) ;
12292: LD_INT 35
12294: PPUSH
12295: CALL_OW 67
// poc = poc + 1 ;
12299: LD_ADDR_VAR 0 4
12303: PUSH
12304: LD_VAR 0 4
12308: PUSH
12309: LD_INT 1
12311: PLUS
12312: ST_TO_ADDR
// end ;
12313: GO 12243
// for i in people do
12315: LD_ADDR_VAR 0 3
12319: PUSH
12320: LD_VAR 0 1
12324: PUSH
12325: FOR_IN
12326: IFFALSE 12446
// begin while not ( GetClass ( i ) = class_mortar or i = LS or i = tapkal ) do
12328: LD_VAR 0 3
12332: PPUSH
12333: CALL_OW 257
12337: PUSH
12338: LD_INT 8
12340: EQUAL
12341: PUSH
12342: LD_VAR 0 3
12346: PUSH
12347: LD_EXP 28
12351: EQUAL
12352: OR
12353: PUSH
12354: LD_VAR 0 3
12358: PUSH
12359: LD_EXP 29
12363: EQUAL
12364: OR
12365: NOT
12366: IFFALSE 12401
// begin ComEnterUnit ( i , Ar_bar ) ;
12368: LD_VAR 0 3
12372: PPUSH
12373: LD_INT 18
12375: PPUSH
12376: CALL_OW 120
// AddComChangeProfession ( i , class_mortar ) ;
12380: LD_VAR 0 3
12384: PPUSH
12385: LD_INT 8
12387: PPUSH
12388: CALL_OW 183
// wait ( 0 0$1 ) ;
12392: LD_INT 35
12394: PPUSH
12395: CALL_OW 67
// end ;
12399: GO 12328
// while IsInUnit ( i ) do
12401: LD_VAR 0 3
12405: PPUSH
12406: CALL_OW 310
12410: IFFALSE 12430
// begin wait ( 0 0$1 ) ;
12412: LD_INT 35
12414: PPUSH
12415: CALL_OW 67
// ComExitBuilding ( i ) ;
12419: LD_VAR 0 3
12423: PPUSH
12424: CALL_OW 122
// end ;
12428: GO 12401
// SetSide ( i , Arabi3 ) ;
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_EXP 7
12439: PPUSH
12440: CALL_OW 235
// end ;
12444: GO 12325
12446: POP
12447: POP
// end ;
12448: LD_VAR 0 2
12452: RET
// on VehicleCaptured ( vnew , vold , origside , hum ) do begin if origside = Arabi and Getside ( hum ) = You then
12453: LD_VAR 0 3
12457: PUSH
12458: LD_EXP 1
12462: EQUAL
12463: PUSH
12464: LD_VAR 0 4
12468: PPUSH
12469: CALL_OW 255
12473: PUSH
12474: LD_EXP 3
12478: EQUAL
12479: AND
12480: IFFALSE 12490
// END_ATTACK = true ;
12482: LD_ADDR_EXP 57
12486: PUSH
12487: LD_INT 1
12489: ST_TO_ADDR
// enable ;
12490: ENABLE
// end ;
12491: PPOPN 4
12493: END
// every 4 4$0 trigger not Arabi_utoci do
12494: LD_EXP 30
12498: NOT
12499: IFFALSE 12586
12501: GO 12503
12503: DISABLE
// begin ComExitBuilding ( tapkal ) ;
12504: LD_EXP 29
12508: PPUSH
12509: CALL_OW 122
// AddComMoveXY ( tapkal , 84 , 20 ) ;
12513: LD_EXP 29
12517: PPUSH
12518: LD_INT 84
12520: PPUSH
12521: LD_INT 20
12523: PPUSH
12524: CALL_OW 171
// AddComMoveXY ( tapkal , 108 , 40 ) ;
12528: LD_EXP 29
12532: PPUSH
12533: LD_INT 108
12535: PPUSH
12536: LD_INT 40
12538: PPUSH
12539: CALL_OW 171
// AddComMoveXY ( tapkal , 82 , 36 ) ;
12543: LD_EXP 29
12547: PPUSH
12548: LD_INT 82
12550: PPUSH
12551: LD_INT 36
12553: PPUSH
12554: CALL_OW 171
// AddComMoveXY ( tapkal , 77 , 22 ) ;
12558: LD_EXP 29
12562: PPUSH
12563: LD_INT 77
12565: PPUSH
12566: LD_INT 22
12568: PPUSH
12569: CALL_OW 171
// AddComEnterUnit ( tapkal , Ar_bar ) ;
12573: LD_EXP 29
12577: PPUSH
12578: LD_INT 18
12580: PPUSH
12581: CALL_OW 180
// enable ;
12585: ENABLE
// end ;
12586: END
// every 3 3$50 trigger not Arabi_utoci do
12587: LD_EXP 30
12591: NOT
12592: IFFALSE 12769
12594: GO 12596
12596: DISABLE
// begin ComExitBuilding ( LS ) ;
12597: LD_EXP 28
12601: PPUSH
12602: CALL_OW 122
// AddComMoveXY ( LS , 72 , 23 ) ;
12606: LD_EXP 28
12610: PPUSH
12611: LD_INT 72
12613: PPUSH
12614: LD_INT 23
12616: PPUSH
12617: CALL_OW 171
// AddComWait ( LS , 0 0$3 ) ;
12621: LD_EXP 28
12625: PPUSH
12626: LD_INT 105
12628: PPUSH
12629: CALL_OW 202
// AddComEnterUnit ( LS , Ar_dep ) ;
12633: LD_EXP 28
12637: PPUSH
12638: LD_INT 15
12640: PPUSH
12641: CALL_OW 180
// AddComChangeProfession ( LS , class_engineer ) ;
12645: LD_EXP 28
12649: PPUSH
12650: LD_INT 2
12652: PPUSH
12653: CALL_OW 183
// if Arabi_utoci then
12657: LD_EXP 30
12661: IFFALSE 12665
// exit ;
12663: GO 12769
// Wait ( 0 0$15 ) ;
12665: LD_INT 525
12667: PPUSH
12668: CALL_OW 67
// if Arabi_utoci then
12672: LD_EXP 30
12676: IFFALSE 12680
// exit ;
12678: GO 12769
// ComExitBuilding ( LS ) ;
12680: LD_EXP 28
12684: PPUSH
12685: CALL_OW 122
// AddComEnterUnit ( LS , Ar_bar ) ;
12689: LD_EXP 28
12693: PPUSH
12694: LD_INT 18
12696: PPUSH
12697: CALL_OW 180
// AddComChangeProfession ( LS , class_soldier ) ;
12701: LD_EXP 28
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: CALL_OW 183
// if Arabi_utoci then
12713: LD_EXP 30
12717: IFFALSE 12721
// exit ;
12719: GO 12769
// Wait ( 0 0$20 ) ;
12721: LD_INT 700
12723: PPUSH
12724: CALL_OW 67
// if Arabi_utoci then
12728: LD_EXP 30
12732: IFFALSE 12736
// exit ;
12734: GO 12769
// ComExitBuilding ( LS ) ;
12736: LD_EXP 28
12740: PPUSH
12741: CALL_OW 122
// AddComEnterUnit ( LS , Ar_lab ) ;
12745: LD_EXP 28
12749: PPUSH
12750: LD_INT 16
12752: PPUSH
12753: CALL_OW 180
// AddComChangeProfession ( LS , class_scientistic ) ;
12757: LD_EXP 28
12761: PPUSH
12762: LD_INT 4
12764: PPUSH
12765: CALL_OW 183
// end ; end_of_file
12769: END
// var konvoj ; export Amici_enter ; export Amici_ar ; every 1 1$0 trigger Dial > 0 do
12770: LD_EXP 40
12774: PUSH
12775: LD_INT 0
12777: GREATER
12778: IFFALSE 12820
12780: GO 12782
12782: DISABLE
// begin wait ( Rand ( 1 , 7200 ) ) ;
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 7200
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , Base2 , true ) ;
12798: LD_INT 3
12800: PPUSH
12801: LD_INT 5
12803: PPUSH
12804: CALL_OW 12
12808: PPUSH
12809: LD_INT 13
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: CALL_OW 55
// enable ;
12819: ENABLE
// end ;
12820: END
// every 2 2$0 do
12821: GO 12823
12823: DISABLE
// begin wait ( Rand ( 1 , 7200 ) ) ;
12824: LD_INT 1
12826: PPUSH
12827: LD_INT 7200
12829: PPUSH
12830: CALL_OW 12
12834: PPUSH
12835: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , bedny_ar , true ) ;
12839: LD_INT 3
12841: PPUSH
12842: LD_INT 5
12844: PPUSH
12845: CALL_OW 12
12849: PPUSH
12850: LD_INT 40
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: CALL_OW 55
// enable ;
12860: ENABLE
// end ; end_of_file
12861: END
// export nah ; export RUSI_AUTA ; export PRU_ATTACK ; export EMR ; export stavec ; var Rusi_k ; var VOJUTOK ; var vehicle ; var zo ; var i , pom , pom1 ; var Dbase ; var staveci ; var RA1 ; var R_depot ; var R_mine ; var R_sel ; var R_factory ; var R_turret1 ; var R_lab ; var R_bunkr ; var R_turret2 ; var R_turret3 ; var R_egun ; var R_arm ; var R_ecomp ; var R_etra ; var R_esib ; var R_oel ; var XYS ; var UTOK ; var atway ; var pomnah ; var nahodne_tanku ; var vojaci ; var bazmakro ; every 0 0$0.1 do
12862: GO 12864
12864: DISABLE
// begin for i := 1 to 51 do
12865: LD_ADDR_LOC 22
12869: PUSH
12870: DOUBLE
12871: LD_INT 1
12873: DEC
12874: ST_TO_ADDR
12875: LD_INT 51
12877: PUSH
12878: FOR_TO
12879: IFFALSE 12892
// disable ( 200 + i ) ;
12881: LD_INT 200
12883: PUSH
12884: LD_LOC 22
12888: PLUS
12889: DISABLE_MARKED
12890: GO 12878
12892: POP
12893: POP
// for i in [ 299 , 298 , 297 , 296 , 295 , 289 , 288 , 255 ] do
12894: LD_ADDR_LOC 22
12898: PUSH
12899: LD_INT 299
12901: PUSH
12902: LD_INT 298
12904: PUSH
12905: LD_INT 297
12907: PUSH
12908: LD_INT 296
12910: PUSH
12911: LD_INT 295
12913: PUSH
12914: LD_INT 289
12916: PUSH
12917: LD_INT 288
12919: PUSH
12920: LD_INT 255
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: FOR_IN
12934: IFFALSE 12943
// disable ( i ) ;
12936: LD_LOC 22
12940: DISABLE_MARKED
12941: GO 12933
12943: POP
12944: POP
// EMR = false ;
12945: LD_ADDR_EXP 38
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
// end ;
12953: END
// on BuildingComplete ( building ) do begin if building = R_depot then
12954: LD_VAR 0 1
12958: PUSH
12959: LD_LOC 28
12963: EQUAL
12964: IFFALSE 12972
// begin enable ( 203 ) ;
12966: LD_INT 203
12968: ENABLE_MARKED
// enable ( 299 ) ;
12969: LD_INT 299
12971: ENABLE_MARKED
// end ; if building = R_mine then
12972: LD_VAR 0 1
12976: PUSH
12977: LD_LOC 29
12981: EQUAL
12982: IFFALSE 12987
// enable ( 205 ) ;
12984: LD_INT 205
12986: ENABLE_MARKED
// if building = R_sel then
12987: LD_VAR 0 1
12991: PUSH
12992: LD_LOC 30
12996: EQUAL
12997: IFFALSE 13002
// enable ( 207 ) ;
12999: LD_INT 207
13001: ENABLE_MARKED
// if building = R_factory then
13002: LD_VAR 0 1
13006: PUSH
13007: LD_LOC 31
13011: EQUAL
13012: IFFALSE 13017
// enable ( 209 ) ;
13014: LD_INT 209
13016: ENABLE_MARKED
// if building = R_turret1 then
13017: LD_VAR 0 1
13021: PUSH
13022: LD_LOC 32
13026: EQUAL
13027: IFFALSE 13032
// enable ( 214 ) ;
13029: LD_INT 214
13031: ENABLE_MARKED
// if building = R_lab then
13032: LD_VAR 0 1
13036: PUSH
13037: LD_LOC 33
13041: EQUAL
13042: IFFALSE 13047
// enable ( 217 ) ;
13044: LD_INT 217
13046: ENABLE_MARKED
// if building = R_lab then
13047: LD_VAR 0 1
13051: PUSH
13052: LD_LOC 33
13056: EQUAL
13057: IFFALSE 13062
// enable ( 220 ) ;
13059: LD_INT 220
13061: ENABLE_MARKED
// if building = R_egun then
13062: LD_VAR 0 1
13066: PUSH
13067: LD_LOC 37
13071: EQUAL
13072: IFFALSE 13077
// enable ( 224 ) ;
13074: LD_INT 224
13076: ENABLE_MARKED
// if building = R_turret2 then
13077: LD_VAR 0 1
13081: PUSH
13082: LD_LOC 35
13086: EQUAL
13087: IFFALSE 13092
// enable ( 226 ) ;
13089: LD_INT 226
13091: ENABLE_MARKED
// if building = R_turret3 then
13092: LD_VAR 0 1
13096: PUSH
13097: LD_LOC 36
13101: EQUAL
13102: IFFALSE 13107
// enable ( 229 ) ;
13104: LD_INT 229
13106: ENABLE_MARKED
// if building = R_arm then
13107: LD_VAR 0 1
13111: PUSH
13112: LD_LOC 38
13116: EQUAL
13117: IFFALSE 13125
// begin enable ( 232 ) ;
13119: LD_INT 232
13121: ENABLE_MARKED
// enable ( 297 ) ;
13122: LD_INT 297
13124: ENABLE_MARKED
// end ; if building = R_etra then
13125: LD_VAR 0 1
13129: PUSH
13130: LD_LOC 40
13134: EQUAL
13135: IFFALSE 13140
// enable ( 235 ) ;
13137: LD_INT 235
13139: ENABLE_MARKED
// if building = R_ecomp then
13140: LD_VAR 0 1
13144: PUSH
13145: LD_LOC 39
13149: EQUAL
13150: IFFALSE 13155
// enable ( 249 ) ;
13152: LD_INT 249
13154: ENABLE_MARKED
// if building = R_esib then
13155: LD_VAR 0 1
13159: PUSH
13160: LD_LOC 41
13164: EQUAL
13165: IFFALSE 13173
// begin enable ( 237 ) ;
13167: LD_INT 237
13169: ENABLE_MARKED
// enable ( 241 ) ;
13170: LD_INT 241
13172: ENABLE_MARKED
// end ; if building = R_oel then
13173: LD_VAR 0 1
13177: PUSH
13178: LD_LOC 42
13182: EQUAL
13183: IFFALSE 13188
// enable ( 239 ) ;
13185: LD_INT 239
13187: ENABLE_MARKED
// if building = Ambase then
13188: LD_VAR 0 1
13192: PUSH
13193: LD_EXP 51
13197: EQUAL
13198: IFFALSE 13217
// begin Dial := 1 ;
13200: LD_ADDR_EXP 40
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// pojmenuj_epsilon ( Ambase ) ;
13208: LD_EXP 51
13212: PPUSH
13213: CALL 34291 0 1
// end ; enable ;
13217: ENABLE
// end ;
13218: PPOPN 1
13220: END
// on UpgradeComplete ( building ) do begin if building = R_depot then
13221: LD_VAR 0 1
13225: PUSH
13226: LD_LOC 28
13230: EQUAL
13231: IFFALSE 13236
// enable ( 210 ) ;
13233: LD_INT 210
13235: ENABLE_MARKED
// if building = R_factory then
13236: LD_VAR 0 1
13240: PUSH
13241: LD_LOC 31
13245: EQUAL
13246: IFFALSE 13251
// enable ( 211 ) ;
13248: LD_INT 211
13250: ENABLE_MARKED
// if building = R_lab then
13251: LD_VAR 0 1
13255: PUSH
13256: LD_LOC 33
13260: EQUAL
13261: IFFALSE 13269
// begin enable ( 222 ) ;
13263: LD_INT 222
13265: ENABLE_MARKED
// enable ( 298 ) ;
13266: LD_INT 298
13268: ENABLE_MARKED
// end ; if building = Amsiblab then
13269: LD_VAR 0 1
13273: PUSH
13274: LD_EXP 53
13278: EQUAL
13279: IFFALSE 13289
// Dial = 3 ;
13281: LD_ADDR_EXP 40
13285: PUSH
13286: LD_INT 3
13288: ST_TO_ADDR
// enable ;
13289: ENABLE
// end ;
13290: PPOPN 1
13292: END
// every 4 4$0 do
13293: GO 13295
13295: DISABLE
// begin case nah of 1 , 2 :
13296: LD_EXP 35
13300: PUSH
13301: LD_INT 1
13303: DOUBLE
13304: EQUAL
13305: IFTRUE 13315
13307: LD_INT 2
13309: DOUBLE
13310: EQUAL
13311: IFTRUE 13315
13313: GO 13331
13315: POP
// CreateDepositXY ( 150 , 80 , mat_oil ) ; 4 :
13316: LD_INT 150
13318: PPUSH
13319: LD_INT 80
13321: PPUSH
13322: LD_INT 2
13324: PPUSH
13325: CALL_OW 62
13329: GO 13380
13331: LD_INT 4
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13355
13339: POP
// CreateDepositXY ( 91 , 109 , mat_oil ) ; 3 :
13340: LD_INT 91
13342: PPUSH
13343: LD_INT 109
13345: PPUSH
13346: LD_INT 2
13348: PPUSH
13349: CALL_OW 62
13353: GO 13380
13355: LD_INT 3
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13379
13363: POP
// CreateDepositXY ( 43 , 71 , mat_oil ) ; end ;
13364: LD_INT 43
13366: PPUSH
13367: LD_INT 71
13369: PPUSH
13370: LD_INT 2
13372: PPUSH
13373: CALL_OW 62
13377: GO 13380
13379: POP
// wait ( timerusi [ difficulty ] ) ;
13380: LD_EXP 60
13384: PUSH
13385: LD_OWVAR 67
13389: ARRAY
13390: PPUSH
13391: CALL_OW 67
// case nah of 1 :
13395: LD_EXP 35
13399: PUSH
13400: LD_INT 1
13402: DOUBLE
13403: EQUAL
13404: IFTRUE 13408
13406: GO 13419
13408: POP
// zo = RE1 ; 2 :
13409: LD_ADDR_LOC 21
13413: PUSH
13414: LD_INT 4
13416: ST_TO_ADDR
13417: GO 13477
13419: LD_INT 2
13421: DOUBLE
13422: EQUAL
13423: IFTRUE 13427
13425: GO 13438
13427: POP
// zo = RE2 ; 3 :
13428: LD_ADDR_LOC 21
13432: PUSH
13433: LD_INT 5
13435: ST_TO_ADDR
13436: GO 13477
13438: LD_INT 3
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13457
13446: POP
// zo = RE3 ; 4 :
13447: LD_ADDR_LOC 21
13451: PUSH
13452: LD_INT 6
13454: ST_TO_ADDR
13455: GO 13477
13457: LD_INT 4
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13476
13465: POP
// zo = RE4 ; end ;
13466: LD_ADDR_LOC 21
13470: PUSH
13471: LD_INT 7
13473: ST_TO_ADDR
13474: GO 13477
13476: POP
// for i in CREATOVANI_RUSKEHO_KONVOJE_LIST do
13477: LD_ADDR_LOC 22
13481: PUSH
13482: LD_EXP 13
13486: PUSH
13487: FOR_IN
13488: IFFALSE 13509
// PlaceUnitArea ( i , zo , false ) ;
13490: LD_LOC 22
13494: PPUSH
13495: LD_LOC 21
13499: PPUSH
13500: LD_INT 0
13502: PPUSH
13503: CALL_OW 49
13507: GO 13487
13509: POP
13510: POP
// Rusi_k := FilterUnitsInArea ( zo , [ [ f_side , Rusi ] ] ) ;
13511: LD_ADDR_LOC 18
13515: PUSH
13516: LD_LOC 21
13520: PPUSH
13521: LD_INT 22
13523: PUSH
13524: LD_EXP 2
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: PPUSH
13536: CALL_OW 70
13540: ST_TO_ADDR
// if nah < 3 then
13541: LD_EXP 35
13545: PUSH
13546: LD_INT 3
13548: LESS
13549: IFFALSE 13566
// ComAgressiveMove ( Rusi_k , 145 , 69 ) ;
13551: LD_LOC 18
13555: PPUSH
13556: LD_INT 145
13558: PPUSH
13559: LD_INT 69
13561: PPUSH
13562: CALL_OW 114
// if nah = 3 then
13566: LD_EXP 35
13570: PUSH
13571: LD_INT 3
13573: EQUAL
13574: IFFALSE 13591
// ComAgressiveMove ( Rusi_k , 52 , 81 ) ;
13576: LD_LOC 18
13580: PPUSH
13581: LD_INT 52
13583: PPUSH
13584: LD_INT 81
13586: PPUSH
13587: CALL_OW 114
// if nah = 4 then
13591: LD_EXP 35
13595: PUSH
13596: LD_INT 4
13598: EQUAL
13599: IFFALSE 13616
// ComAgressiveMove ( Rusi_k , 93 , 99 ) ;
13601: LD_LOC 18
13605: PPUSH
13606: LD_INT 93
13608: PPUSH
13609: LD_INT 99
13611: PPUSH
13612: CALL_OW 114
// if nah = 1 then
13616: LD_EXP 35
13620: PUSH
13621: LD_INT 1
13623: EQUAL
13624: IFFALSE 13634
// zo = RZ1 ;
13626: LD_ADDR_LOC 21
13630: PUSH
13631: LD_INT 8
13633: ST_TO_ADDR
// if nah = 2 then
13634: LD_EXP 35
13638: PUSH
13639: LD_INT 2
13641: EQUAL
13642: IFFALSE 13652
// zo = RZ1 ;
13644: LD_ADDR_LOC 21
13648: PUSH
13649: LD_INT 8
13651: ST_TO_ADDR
// if nah = 3 then
13652: LD_EXP 35
13656: PUSH
13657: LD_INT 3
13659: EQUAL
13660: IFFALSE 13670
// zo = RZ3 ;
13662: LD_ADDR_LOC 21
13666: PUSH
13667: LD_INT 10
13669: ST_TO_ADDR
// if nah = 4 then
13670: LD_EXP 35
13674: PUSH
13675: LD_INT 4
13677: EQUAL
13678: IFFALSE 13688
// zo = RZ2 ;
13680: LD_ADDR_LOC 21
13684: PUSH
13685: LD_INT 9
13687: ST_TO_ADDR
// enable ( 201 ) ;
13688: LD_INT 201
13690: ENABLE_MARKED
// enable ( 248 ) ;
13691: LD_INT 248
13693: ENABLE_MARKED
// RUSI_AUTA := 1 ;
13694: LD_ADDR_EXP 36
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// end ;
13702: END
// every 0 0$4 trigger FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_class , class_engineer ] ] ) > 0 marked 201 do
13703: LD_LOC 21
13707: PPUSH
13708: LD_INT 22
13710: PUSH
13711: LD_EXP 2
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: PUSH
13726: LD_INT 25
13728: PUSH
13729: LD_INT 2
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 70
13745: PUSH
13746: LD_INT 0
13748: GREATER
13749: IFFALSE 13844
13751: GO 13753
13753: DISABLE
// begin staveci := FilterAllUnits ( [ [ f_side , Rusi ] , [ f_class , class_engineer ] ] ) ;
13754: LD_ADDR_LOC 26
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_EXP 2
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 2
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PPUSH
13785: CALL_OW 69
13789: ST_TO_ADDR
// SetXYS ( nah , 1 ) ;
13790: LD_EXP 35
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL 18293 0 2
// AddComBuild ( staveci , b_depot , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
13802: LD_LOC 26
13806: PPUSH
13807: LD_INT 0
13809: PPUSH
13810: LD_LOC 43
13814: PUSH
13815: LD_INT 1
13817: ARRAY
13818: PPUSH
13819: LD_LOC 43
13823: PUSH
13824: LD_INT 2
13826: ARRAY
13827: PPUSH
13828: LD_LOC 43
13832: PUSH
13833: LD_INT 3
13835: ARRAY
13836: PPUSH
13837: CALL_OW 205
// enable ( 202 ) ;
13841: LD_INT 202
13843: ENABLE_MARKED
// end ;
13844: END
// every 0 0$5 marked 202 do
13845: GO 13847
13847: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_depot ] ] ) ;
13848: LD_ADDR_LOC 23
13852: PUSH
13853: LD_LOC 21
13857: PPUSH
13858: LD_INT 22
13860: PUSH
13861: LD_EXP 2
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: PUSH
13876: LD_INT 30
13878: PUSH
13879: LD_INT 0
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: LIST
13890: PPUSH
13891: CALL_OW 70
13895: ST_TO_ADDR
// if pom = 0 then
13896: LD_LOC 23
13900: PUSH
13901: LD_INT 0
13903: EQUAL
13904: IFFALSE 13960
// begin SetXYS ( nah , 1 ) ;
13906: LD_EXP 35
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: CALL 18293 0 2
// AddComBuild ( staveci , b_depot , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
13918: LD_LOC 26
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: LD_LOC 43
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PPUSH
13935: LD_LOC 43
13939: PUSH
13940: LD_INT 2
13942: ARRAY
13943: PPUSH
13944: LD_LOC 43
13948: PUSH
13949: LD_INT 3
13951: ARRAY
13952: PPUSH
13953: CALL_OW 205
// enable ;
13957: ENABLE
// end else
13958: GO 13990
// begin R_depot = pom [ 1 ] ;
13960: LD_ADDR_LOC 28
13964: PUSH
13965: LD_LOC 23
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: ST_TO_ADDR
// rus_cheat_source ( 300 , 50 , 0 ) ;
13974: LD_INT 300
13976: PPUSH
13977: LD_INT 50
13979: PPUSH
13980: LD_INT 0
13982: PPUSH
13983: CALL 13991 0 3
// enable ( 107 ) ;
13987: LD_INT 107
13989: ENABLE_MARKED
// end ; end ;
13990: END
// function rus_cheat_source ( cans , oil , siberite ) ; begin
13991: LD_INT 0
13993: PPUSH
// if GetSide ( R_depot ) <> Rusi then
13994: LD_LOC 28
13998: PPUSH
13999: CALL_OW 255
14003: PUSH
14004: LD_EXP 2
14008: NONEQUAL
14009: IFFALSE 14013
// exit ;
14011: GO 14079
// Dbase = GetBase ( R_depot ) ;
14013: LD_ADDR_LOC 25
14017: PUSH
14018: LD_LOC 28
14022: PPUSH
14023: CALL_OW 274
14027: ST_TO_ADDR
// AddResourceType ( Dbase , mat_cans , cans ) ;
14028: LD_LOC 25
14032: PPUSH
14033: LD_INT 1
14035: PPUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 276
// AddResourceType ( Dbase , mat_oil , oil ) ;
14045: LD_LOC 25
14049: PPUSH
14050: LD_INT 2
14052: PPUSH
14053: LD_VAR 0 2
14057: PPUSH
14058: CALL_OW 276
// AddResourceType ( Dbase , mat_siberit , siberite ) ;
14062: LD_LOC 25
14066: PPUSH
14067: LD_INT 3
14069: PPUSH
14070: LD_VAR 0 3
14074: PPUSH
14075: CALL_OW 276
// end ;
14079: LD_VAR 0 4
14083: RET
// every 0 0$2 marked 203 do
14084: GO 14086
14086: DISABLE
// begin SetXYS ( nah , 2 ) ;
14087: LD_EXP 35
14091: PPUSH
14092: LD_INT 2
14094: PPUSH
14095: CALL 18293 0 2
// AddComBuild ( staveci , b_oil_mine , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
14099: LD_LOC 26
14103: PPUSH
14104: LD_INT 29
14106: PPUSH
14107: LD_LOC 43
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: PPUSH
14116: LD_LOC 43
14120: PUSH
14121: LD_INT 2
14123: ARRAY
14124: PPUSH
14125: LD_LOC 43
14129: PUSH
14130: LD_INT 3
14132: ARRAY
14133: PPUSH
14134: CALL_OW 205
// wait ( 0 0$5 ) ;
14138: LD_INT 175
14140: PPUSH
14141: CALL_OW 67
// enable ( 204 ) ;
14145: LD_INT 204
14147: ENABLE_MARKED
// end ;
14148: END
// every 0 0$5 marked 204 do
14149: GO 14151
14151: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_oil_mine ] ] ) ;
14152: LD_ADDR_LOC 23
14156: PUSH
14157: LD_LOC 21
14161: PPUSH
14162: LD_INT 22
14164: PUSH
14165: LD_EXP 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 1
14176: PUSH
14177: EMPTY
14178: LIST
14179: PUSH
14180: LD_INT 30
14182: PUSH
14183: LD_INT 29
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 70
14199: ST_TO_ADDR
// if pom = 0 then
14200: LD_LOC 23
14204: PUSH
14205: LD_INT 0
14207: EQUAL
14208: IFFALSE 14264
// begin SetXYS ( nah , 2 ) ;
14210: LD_EXP 35
14214: PPUSH
14215: LD_INT 2
14217: PPUSH
14218: CALL 18293 0 2
// AddComBuild ( staveci , b_oil_mine , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
14222: LD_LOC 26
14226: PPUSH
14227: LD_INT 29
14229: PPUSH
14230: LD_LOC 43
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: LD_LOC 43
14243: PUSH
14244: LD_INT 2
14246: ARRAY
14247: PPUSH
14248: LD_LOC 43
14252: PUSH
14253: LD_INT 3
14255: ARRAY
14256: PPUSH
14257: CALL_OW 205
// enable ;
14261: ENABLE
// end else
14262: GO 14278
// begin R_mine = pom [ 1 ] ;
14264: LD_ADDR_LOC 29
14268: PUSH
14269: LD_LOC 23
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: ST_TO_ADDR
// end ; end ;
14278: END
// every 0 0$2 marked 205 do
14279: GO 14281
14281: DISABLE
// begin rus_cheat_source ( 50 , 0 , 50 ) ;
14282: LD_INT 50
14284: PPUSH
14285: LD_INT 0
14287: PPUSH
14288: LD_INT 50
14290: PPUSH
14291: CALL 13991 0 3
// SetXYS ( nah , 3 ) ;
14295: LD_EXP 35
14299: PPUSH
14300: LD_INT 3
14302: PPUSH
14303: CALL 18293 0 2
// AddComBuild ( staveci , b_siberite_power , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
14307: LD_LOC 26
14311: PPUSH
14312: LD_INT 28
14314: PPUSH
14315: LD_LOC 43
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PPUSH
14324: LD_LOC 43
14328: PUSH
14329: LD_INT 2
14331: ARRAY
14332: PPUSH
14333: LD_LOC 43
14337: PUSH
14338: LD_INT 3
14340: ARRAY
14341: PPUSH
14342: CALL_OW 205
// wait ( 0 0$5 ) ;
14346: LD_INT 175
14348: PPUSH
14349: CALL_OW 67
// enable ( 206 ) ;
14353: LD_INT 206
14355: ENABLE_MARKED
// end ;
14356: END
// every 0 0$5 marked 206 do
14357: GO 14359
14359: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_siberite_power ] ] ) ;
14360: LD_ADDR_LOC 23
14364: PUSH
14365: LD_LOC 21
14369: PPUSH
14370: LD_INT 22
14372: PUSH
14373: LD_EXP 2
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 1
14384: PUSH
14385: EMPTY
14386: LIST
14387: PUSH
14388: LD_INT 30
14390: PUSH
14391: LD_INT 28
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: PPUSH
14403: CALL_OW 70
14407: ST_TO_ADDR
// if pom = 0 then
14408: LD_LOC 23
14412: PUSH
14413: LD_INT 0
14415: EQUAL
14416: IFFALSE 14472
// begin SetXYS ( nah , 3 ) ;
14418: LD_EXP 35
14422: PPUSH
14423: LD_INT 3
14425: PPUSH
14426: CALL 18293 0 2
// ComBuild ( staveci , b_siberite_power , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
14430: LD_LOC 26
14434: PPUSH
14435: LD_INT 28
14437: PPUSH
14438: LD_LOC 43
14442: PUSH
14443: LD_INT 1
14445: ARRAY
14446: PPUSH
14447: LD_LOC 43
14451: PUSH
14452: LD_INT 2
14454: ARRAY
14455: PPUSH
14456: LD_LOC 43
14460: PUSH
14461: LD_INT 3
14463: ARRAY
14464: PPUSH
14465: CALL_OW 145
// enable ;
14469: ENABLE
// end else
14470: GO 14486
// begin R_sel = pom [ 1 ] ;
14472: LD_ADDR_LOC 30
14476: PUSH
14477: LD_LOC 23
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: ST_TO_ADDR
// end ; end ;
14486: END
// every 0 0$2 marked 207 do
14487: GO 14489
14489: DISABLE
// begin rus_cheat_source ( 50 , 0 , 0 ) ;
14490: LD_INT 50
14492: PPUSH
14493: LD_INT 0
14495: PPUSH
14496: LD_INT 0
14498: PPUSH
14499: CALL 13991 0 3
// SetXYS ( nah , 4 ) ;
14503: LD_EXP 35
14507: PPUSH
14508: LD_INT 4
14510: PPUSH
14511: CALL 18293 0 2
// AddComBuild ( staveci , b_workshop , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
14515: LD_LOC 26
14519: PPUSH
14520: LD_INT 2
14522: PPUSH
14523: LD_LOC 43
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: PPUSH
14532: LD_LOC 43
14536: PUSH
14537: LD_INT 2
14539: ARRAY
14540: PPUSH
14541: LD_LOC 43
14545: PUSH
14546: LD_INT 3
14548: ARRAY
14549: PPUSH
14550: CALL_OW 205
// wait ( 0 0$5 ) ;
14554: LD_INT 175
14556: PPUSH
14557: CALL_OW 67
// enable ( 208 ) ;
14561: LD_INT 208
14563: ENABLE_MARKED
// end ;
14564: END
// every 0 0$5 marked 208 do
14565: GO 14567
14567: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_workshop ] ] ) ;
14568: LD_ADDR_LOC 23
14572: PUSH
14573: LD_LOC 21
14577: PPUSH
14578: LD_INT 22
14580: PUSH
14581: LD_EXP 2
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: PUSH
14596: LD_INT 30
14598: PUSH
14599: LD_INT 2
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 70
14615: ST_TO_ADDR
// if pom = 0 then
14616: LD_LOC 23
14620: PUSH
14621: LD_INT 0
14623: EQUAL
14624: IFFALSE 14680
// begin SetXYS ( nah , 4 ) ;
14626: LD_EXP 35
14630: PPUSH
14631: LD_INT 4
14633: PPUSH
14634: CALL 18293 0 2
// ComBuild ( staveci , b_workshop , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
14638: LD_LOC 26
14642: PPUSH
14643: LD_INT 2
14645: PPUSH
14646: LD_LOC 43
14650: PUSH
14651: LD_INT 1
14653: ARRAY
14654: PPUSH
14655: LD_LOC 43
14659: PUSH
14660: LD_INT 2
14662: ARRAY
14663: PPUSH
14664: LD_LOC 43
14668: PUSH
14669: LD_INT 3
14671: ARRAY
14672: PPUSH
14673: CALL_OW 145
// enable ;
14677: ENABLE
// end else
14678: GO 14694
// begin R_factory = pom [ 1 ] ;
14680: LD_ADDR_LOC 31
14684: PUSH
14685: LD_LOC 23
14689: PUSH
14690: LD_INT 1
14692: ARRAY
14693: ST_TO_ADDR
// end ; end ;
14694: END
// every 0 0$1 marked 209 do
14695: GO 14697
14697: DISABLE
// begin rus_cheat_source ( 100 , 20 , 50 ) ;
14698: LD_INT 100
14700: PPUSH
14701: LD_INT 20
14703: PPUSH
14704: LD_INT 50
14706: PPUSH
14707: CALL 13991 0 3
// AddComUpgrade ( R_depot ) ;
14711: LD_LOC 28
14715: PPUSH
14716: CALL_OW 206
// case nah of 1 :
14720: LD_EXP 35
14724: PUSH
14725: LD_INT 1
14727: DOUBLE
14728: EQUAL
14729: IFTRUE 14733
14731: GO 14751
14733: POP
// AddComMoveXY ( staveci , 142 , 68 ) ; 2 :
14734: LD_LOC 26
14738: PPUSH
14739: LD_INT 142
14741: PPUSH
14742: LD_INT 68
14744: PPUSH
14745: CALL_OW 171
14749: GO 14830
14751: LD_INT 2
14753: DOUBLE
14754: EQUAL
14755: IFTRUE 14759
14757: GO 14777
14759: POP
// AddComMoveXY ( staveci , 142 , 68 ) ; 3 :
14760: LD_LOC 26
14764: PPUSH
14765: LD_INT 142
14767: PPUSH
14768: LD_INT 68
14770: PPUSH
14771: CALL_OW 171
14775: GO 14830
14777: LD_INT 3
14779: DOUBLE
14780: EQUAL
14781: IFTRUE 14785
14783: GO 14803
14785: POP
// AddComMoveXY ( staveci , 48 , 73 ) ; 4 :
14786: LD_LOC 26
14790: PPUSH
14791: LD_INT 48
14793: PPUSH
14794: LD_INT 73
14796: PPUSH
14797: CALL_OW 171
14801: GO 14830
14803: LD_INT 4
14805: DOUBLE
14806: EQUAL
14807: IFTRUE 14811
14809: GO 14829
14811: POP
// AddComMoveXY ( staveci , 94 , 105 ) ; end ;
14812: LD_LOC 26
14816: PPUSH
14817: LD_INT 94
14819: PPUSH
14820: LD_INT 105
14822: PPUSH
14823: CALL_OW 171
14827: GO 14830
14829: POP
// end ;
14830: END
// every 0 0$1 marked 210 do
14831: GO 14833
14833: DISABLE
// begin rus_cheat_source ( 100 , 20 , 50 ) ;
14834: LD_INT 100
14836: PPUSH
14837: LD_INT 20
14839: PPUSH
14840: LD_INT 50
14842: PPUSH
14843: CALL 13991 0 3
// AddComUpgrade ( R_factory ) ;
14847: LD_LOC 31
14851: PPUSH
14852: CALL_OW 206
// case nah of 1 :
14856: LD_EXP 35
14860: PUSH
14861: LD_INT 1
14863: DOUBLE
14864: EQUAL
14865: IFTRUE 14869
14867: GO 14887
14869: POP
// AddComMoveXY ( staveci , 158 , 85 ) ; 2 :
14870: LD_LOC 26
14874: PPUSH
14875: LD_INT 158
14877: PPUSH
14878: LD_INT 85
14880: PPUSH
14881: CALL_OW 171
14885: GO 14966
14887: LD_INT 2
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14913
14895: POP
// AddComMoveXY ( staveci , 158 , 85 ) ; 3 :
14896: LD_LOC 26
14900: PPUSH
14901: LD_INT 158
14903: PPUSH
14904: LD_INT 85
14906: PPUSH
14907: CALL_OW 171
14911: GO 14966
14913: LD_INT 3
14915: DOUBLE
14916: EQUAL
14917: IFTRUE 14921
14919: GO 14939
14921: POP
// AddComMoveXY ( staveci , 44 , 79 ) ; 4 :
14922: LD_LOC 26
14926: PPUSH
14927: LD_INT 44
14929: PPUSH
14930: LD_INT 79
14932: PPUSH
14933: CALL_OW 171
14937: GO 14966
14939: LD_INT 4
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 14965
14947: POP
// AddComMoveXY ( staveci , 99 , 98 ) ; end ;
14948: LD_LOC 26
14952: PPUSH
14953: LD_INT 99
14955: PPUSH
14956: LD_INT 98
14958: PPUSH
14959: CALL_OW 171
14963: GO 14966
14965: POP
// end ;
14966: END
// every 0 0$2 marked 211 do
14967: GO 14969
14969: DISABLE
// begin rus_cheat_source ( 50 , 0 , 0 ) ;
14970: LD_INT 50
14972: PPUSH
14973: LD_INT 0
14975: PPUSH
14976: LD_INT 0
14978: PPUSH
14979: CALL 13991 0 3
// SetXYS ( nah , 5 ) ;
14983: LD_EXP 35
14987: PPUSH
14988: LD_INT 5
14990: PPUSH
14991: CALL 18293 0 2
// AddComBuild ( staveci , b_turret , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
14995: LD_LOC 26
14999: PPUSH
15000: LD_INT 33
15002: PPUSH
15003: LD_LOC 43
15007: PUSH
15008: LD_INT 1
15010: ARRAY
15011: PPUSH
15012: LD_LOC 43
15016: PUSH
15017: LD_INT 2
15019: ARRAY
15020: PPUSH
15021: LD_LOC 43
15025: PUSH
15026: LD_INT 3
15028: ARRAY
15029: PPUSH
15030: CALL_OW 205
// wait ( 0 0$5 ) ;
15034: LD_INT 175
15036: PPUSH
15037: CALL_OW 67
// enable ( 212 ) ;
15041: LD_INT 212
15043: ENABLE_MARKED
// enable ( 213 ) ;
15044: LD_INT 213
15046: ENABLE_MARKED
// end ;
15047: END
// every 0 0$5 marked 212 do
15048: GO 15050
15050: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_turret ] ] ) ;
15051: LD_ADDR_LOC 23
15055: PUSH
15056: LD_LOC 21
15060: PPUSH
15061: LD_INT 22
15063: PUSH
15064: LD_EXP 2
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 1
15075: PUSH
15076: EMPTY
15077: LIST
15078: PUSH
15079: LD_INT 30
15081: PUSH
15082: LD_INT 33
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 70
15098: ST_TO_ADDR
// if pom = 0 then
15099: LD_LOC 23
15103: PUSH
15104: LD_INT 0
15106: EQUAL
15107: IFFALSE 15163
// begin SetXYS ( nah , 5 ) ;
15109: LD_EXP 35
15113: PPUSH
15114: LD_INT 5
15116: PPUSH
15117: CALL 18293 0 2
// ComBuild ( staveci , b_turret , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
15121: LD_LOC 26
15125: PPUSH
15126: LD_INT 33
15128: PPUSH
15129: LD_LOC 43
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PPUSH
15138: LD_LOC 43
15142: PUSH
15143: LD_INT 2
15145: ARRAY
15146: PPUSH
15147: LD_LOC 43
15151: PUSH
15152: LD_INT 3
15154: ARRAY
15155: PPUSH
15156: CALL_OW 145
// enable ;
15160: ENABLE
// end else
15161: GO 15177
// begin R_turret1 = pom [ 1 ] ;
15163: LD_ADDR_LOC 32
15167: PUSH
15168: LD_LOC 23
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: ST_TO_ADDR
// end ; end ;
15177: END
// every 0 0$1 marked 213 do var i ; var zone ;
15178: GO 15180
15180: DISABLE
15181: LD_INT 0
15183: PPUSH
15184: PPUSH
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_class , class_mechanic ] ] ) ;
15185: LD_ADDR_LOC 23
15189: PUSH
15190: LD_LOC 21
15194: PPUSH
15195: LD_INT 22
15197: PUSH
15198: LD_EXP 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 1
15209: PUSH
15210: EMPTY
15211: LIST
15212: PUSH
15213: LD_INT 25
15215: PUSH
15216: LD_INT 3
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 70
15232: ST_TO_ADDR
// AddComEnterUnit ( pom , R_factory ) ;
15233: LD_LOC 23
15237: PPUSH
15238: LD_LOC 31
15242: PPUSH
15243: CALL_OW 180
// case nah of 1 , 2 :
15247: LD_EXP 35
15251: PUSH
15252: LD_INT 1
15254: DOUBLE
15255: EQUAL
15256: IFTRUE 15266
15258: LD_INT 2
15260: DOUBLE
15261: EQUAL
15262: IFTRUE 15266
15264: GO 15277
15266: POP
// zone = mecharea1 ; 3 :
15267: LD_ADDR_VAR 0 2
15271: PUSH
15272: LD_INT 37
15274: ST_TO_ADDR
15275: GO 15316
15277: LD_INT 3
15279: DOUBLE
15280: EQUAL
15281: IFTRUE 15285
15283: GO 15296
15285: POP
// zone = mecharea2 ; 4 :
15286: LD_ADDR_VAR 0 2
15290: PUSH
15291: LD_INT 38
15293: ST_TO_ADDR
15294: GO 15316
15296: LD_INT 4
15298: DOUBLE
15299: EQUAL
15300: IFTRUE 15304
15302: GO 15315
15304: POP
// zone = mecharea3 ; end ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_INT 39
15312: ST_TO_ADDR
15313: GO 15316
15315: POP
// for i in MECHANICI_NAVIC do
15316: LD_ADDR_VAR 0 1
15320: PUSH
15321: LD_EXP 23
15325: PUSH
15326: FOR_IN
15327: IFFALSE 15348
// PlaceUnitArea ( i , zone , false ) ;
15329: LD_VAR 0 1
15333: PPUSH
15334: LD_VAR 0 2
15338: PPUSH
15339: LD_INT 0
15341: PPUSH
15342: CALL_OW 49
15346: GO 15326
15348: POP
15349: POP
// ComEnterUnit ( MECHANICI_NAVIC , R_factory ) ;
15350: LD_EXP 23
15354: PPUSH
15355: LD_LOC 31
15359: PPUSH
15360: CALL_OW 120
// end ;
15364: PPOPN 2
15366: END
// every 0 0$2 marked 214 do
15367: GO 15369
15369: DISABLE
// begin rus_cheat_source ( 50 , 0 , 10 ) ;
15370: LD_INT 50
15372: PPUSH
15373: LD_INT 0
15375: PPUSH
15376: LD_INT 10
15378: PPUSH
15379: CALL 13991 0 3
// SetXYS ( nah , 6 ) ;
15383: LD_EXP 35
15387: PPUSH
15388: LD_INT 6
15390: PPUSH
15391: CALL 18293 0 2
// AddComBuild ( staveci , b_lab , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
15395: LD_LOC 26
15399: PPUSH
15400: LD_INT 6
15402: PPUSH
15403: LD_LOC 43
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PPUSH
15412: LD_LOC 43
15416: PUSH
15417: LD_INT 2
15419: ARRAY
15420: PPUSH
15421: LD_LOC 43
15425: PUSH
15426: LD_INT 3
15428: ARRAY
15429: PPUSH
15430: CALL_OW 205
// wait ( 0 0$5 ) ;
15434: LD_INT 175
15436: PPUSH
15437: CALL_OW 67
// enable ( 215 ) ;
15441: LD_INT 215
15443: ENABLE_MARKED
// enable ( 216 ) ;
15444: LD_INT 216
15446: ENABLE_MARKED
// end ;
15447: END
// every 0 0$5 marked 215 do
15448: GO 15450
15450: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_lab ] ] ) ;
15451: LD_ADDR_LOC 23
15455: PUSH
15456: LD_LOC 21
15460: PPUSH
15461: LD_INT 22
15463: PUSH
15464: LD_EXP 2
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: EMPTY
15477: LIST
15478: PUSH
15479: LD_INT 30
15481: PUSH
15482: LD_INT 6
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 70
15498: ST_TO_ADDR
// if pom = 0 then
15499: LD_LOC 23
15503: PUSH
15504: LD_INT 0
15506: EQUAL
15507: IFFALSE 15563
// begin SetXYS ( nah , 6 ) ;
15509: LD_EXP 35
15513: PPUSH
15514: LD_INT 6
15516: PPUSH
15517: CALL 18293 0 2
// ComBuild ( staveci , b_lab , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
15521: LD_LOC 26
15525: PPUSH
15526: LD_INT 6
15528: PPUSH
15529: LD_LOC 43
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: LD_LOC 43
15542: PUSH
15543: LD_INT 2
15545: ARRAY
15546: PPUSH
15547: LD_LOC 43
15551: PUSH
15552: LD_INT 3
15554: ARRAY
15555: PPUSH
15556: CALL_OW 145
// enable ;
15560: ENABLE
// end else
15561: GO 15577
// begin R_lab = pom [ 1 ] ;
15563: LD_ADDR_LOC 33
15567: PUSH
15568: LD_LOC 23
15572: PUSH
15573: LD_INT 1
15575: ARRAY
15576: ST_TO_ADDR
// end ; end ;
15577: END
// every 0 0$1 marked 216 do
15578: GO 15580
15580: DISABLE
// begin AddComPlaceWeapon ( R_turret1 , zbrane_na_turrety1 [ difficulty ] ) ;
15581: LD_LOC 32
15585: PPUSH
15586: LD_EXP 73
15590: PUSH
15591: LD_OWVAR 67
15595: ARRAY
15596: PPUSH
15597: CALL_OW 208
// end ;
15601: END
// every 0 0$2 marked 217 do
15602: GO 15604
15604: DISABLE
// begin rus_cheat_source ( 50 , 0 , 10 ) ;
15605: LD_INT 50
15607: PPUSH
15608: LD_INT 0
15610: PPUSH
15611: LD_INT 10
15613: PPUSH
15614: CALL 13991 0 3
// SetXYS ( nah , 7 ) ;
15618: LD_EXP 35
15622: PPUSH
15623: LD_INT 7
15625: PPUSH
15626: CALL 18293 0 2
// AddComBuild ( staveci , b_bunker , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
15630: LD_LOC 26
15634: PPUSH
15635: LD_INT 32
15637: PPUSH
15638: LD_LOC 43
15642: PUSH
15643: LD_INT 1
15645: ARRAY
15646: PPUSH
15647: LD_LOC 43
15651: PUSH
15652: LD_INT 2
15654: ARRAY
15655: PPUSH
15656: LD_LOC 43
15660: PUSH
15661: LD_INT 3
15663: ARRAY
15664: PPUSH
15665: CALL_OW 205
// wait ( 0 0$5 ) ;
15669: LD_INT 175
15671: PPUSH
15672: CALL_OW 67
// enable ( 218 ) ;
15676: LD_INT 218
15678: ENABLE_MARKED
// end ;
15679: END
// every 0 0$5 marked 218 do
15680: GO 15682
15682: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_bunker ] ] ) ;
15683: LD_ADDR_LOC 23
15687: PUSH
15688: LD_LOC 21
15692: PPUSH
15693: LD_INT 22
15695: PUSH
15696: LD_EXP 2
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: EMPTY
15709: LIST
15710: PUSH
15711: LD_INT 30
15713: PUSH
15714: LD_INT 32
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: PPUSH
15726: CALL_OW 70
15730: ST_TO_ADDR
// if pom = 0 then
15731: LD_LOC 23
15735: PUSH
15736: LD_INT 0
15738: EQUAL
15739: IFFALSE 15795
// begin SetXYS ( nah , 7 ) ;
15741: LD_EXP 35
15745: PPUSH
15746: LD_INT 7
15748: PPUSH
15749: CALL 18293 0 2
// ComBuild ( staveci , b_bunker , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
15753: LD_LOC 26
15757: PPUSH
15758: LD_INT 32
15760: PPUSH
15761: LD_LOC 43
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PPUSH
15770: LD_LOC 43
15774: PUSH
15775: LD_INT 2
15777: ARRAY
15778: PPUSH
15779: LD_LOC 43
15783: PUSH
15784: LD_INT 3
15786: ARRAY
15787: PPUSH
15788: CALL_OW 145
// enable ;
15792: ENABLE
// end else
15793: GO 15812
// begin R_bunkr = pom [ 1 ] ;
15795: LD_ADDR_LOC 34
15799: PUSH
15800: LD_LOC 23
15804: PUSH
15805: LD_INT 1
15807: ARRAY
15808: ST_TO_ADDR
// enable ( 219 ) ;
15809: LD_INT 219
15811: ENABLE_MARKED
// end ; end ;
15812: END
// every 0 0$3 marked 219 do
15813: GO 15815
15815: DISABLE
// begin rus_cheat_source ( 20 , 0 , 10 ) ;
15816: LD_INT 20
15818: PPUSH
15819: LD_INT 0
15821: PPUSH
15822: LD_INT 10
15824: PPUSH
15825: CALL 13991 0 3
// AddComPlaceWeapon ( R_bunkr , zbrane_na_turrety2 [ difficulty ] ) ;
15829: LD_LOC 34
15833: PPUSH
15834: LD_EXP 74
15838: PUSH
15839: LD_OWVAR 67
15843: ARRAY
15844: PPUSH
15845: CALL_OW 208
// end ;
15849: END
// every 0 0$3 marked 220 do
15850: GO 15852
15852: DISABLE
// begin AddComUpgradeLab ( R_lab , b_lab_spacetime ) ;
15853: LD_LOC 33
15857: PPUSH
15858: LD_INT 14
15860: PPUSH
15861: CALL_OW 207
// AddComUpgradeLab ( R_lab , b_lab_weapon ) ;
15865: LD_LOC 33
15869: PPUSH
15870: LD_INT 10
15872: PPUSH
15873: CALL_OW 207
// pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_type , unit_human ] ] ) ;
15877: LD_ADDR_LOC 23
15881: PUSH
15882: LD_LOC 21
15886: PPUSH
15887: LD_INT 22
15889: PUSH
15890: LD_EXP 2
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: PUSH
15905: LD_INT 21
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: PPUSH
15920: CALL_OW 70
15924: ST_TO_ADDR
// if pom [ 1 ] <> staveci [ 1 ] then
15925: LD_LOC 23
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: PUSH
15934: LD_LOC 26
15938: PUSH
15939: LD_INT 1
15941: ARRAY
15942: NONEQUAL
15943: IFFALSE 16073
// case nah of 1 :
15945: LD_EXP 35
15949: PUSH
15950: LD_INT 1
15952: DOUBLE
15953: EQUAL
15954: IFTRUE 15958
15956: GO 15980
15958: POP
// AddComMoveXY ( pom [ 1 ] , 150 , 65 ) ; 2 :
15959: LD_LOC 23
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: PPUSH
15968: LD_INT 150
15970: PPUSH
15971: LD_INT 65
15973: PPUSH
15974: CALL_OW 171
15978: GO 16071
15980: LD_INT 2
15982: DOUBLE
15983: EQUAL
15984: IFTRUE 15988
15986: GO 16010
15988: POP
// AddComMoveXY ( pom [ 1 ] , 150 , 65 ) ; 3 :
15989: LD_LOC 23
15993: PUSH
15994: LD_INT 1
15996: ARRAY
15997: PPUSH
15998: LD_INT 150
16000: PPUSH
16001: LD_INT 65
16003: PPUSH
16004: CALL_OW 171
16008: GO 16071
16010: LD_INT 3
16012: DOUBLE
16013: EQUAL
16014: IFTRUE 16018
16016: GO 16040
16018: POP
// AddComMoveXY ( pom [ 1 ] , 59 , 67 ) ; 4 :
16019: LD_LOC 23
16023: PUSH
16024: LD_INT 1
16026: ARRAY
16027: PPUSH
16028: LD_INT 59
16030: PPUSH
16031: LD_INT 67
16033: PPUSH
16034: CALL_OW 171
16038: GO 16071
16040: LD_INT 4
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16048
16046: GO 16070
16048: POP
// AddComMoveXY ( pom [ 1 ] , 105 , 93 ) ; end else
16049: LD_LOC 23
16053: PUSH
16054: LD_INT 1
16056: ARRAY
16057: PPUSH
16058: LD_INT 105
16060: PPUSH
16061: LD_INT 93
16063: PPUSH
16064: CALL_OW 171
16068: GO 16071
16070: POP
16071: GO 16199
// case nah of 1 :
16073: LD_EXP 35
16077: PUSH
16078: LD_INT 1
16080: DOUBLE
16081: EQUAL
16082: IFTRUE 16086
16084: GO 16108
16086: POP
// AddComMoveXY ( pom [ 2 ] , 150 , 65 ) ; 2 :
16087: LD_LOC 23
16091: PUSH
16092: LD_INT 2
16094: ARRAY
16095: PPUSH
16096: LD_INT 150
16098: PPUSH
16099: LD_INT 65
16101: PPUSH
16102: CALL_OW 171
16106: GO 16199
16108: LD_INT 2
16110: DOUBLE
16111: EQUAL
16112: IFTRUE 16116
16114: GO 16138
16116: POP
// AddComMoveXY ( pom [ 2 ] , 150 , 65 ) ; 3 :
16117: LD_LOC 23
16121: PUSH
16122: LD_INT 2
16124: ARRAY
16125: PPUSH
16126: LD_INT 150
16128: PPUSH
16129: LD_INT 65
16131: PPUSH
16132: CALL_OW 171
16136: GO 16199
16138: LD_INT 3
16140: DOUBLE
16141: EQUAL
16142: IFTRUE 16146
16144: GO 16168
16146: POP
// AddComMoveXY ( pom [ 2 ] , 59 , 67 ) ; 4 :
16147: LD_LOC 23
16151: PUSH
16152: LD_INT 2
16154: ARRAY
16155: PPUSH
16156: LD_INT 59
16158: PPUSH
16159: LD_INT 67
16161: PPUSH
16162: CALL_OW 171
16166: GO 16199
16168: LD_INT 4
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16198
16176: POP
// AddComMoveXY ( pom [ 2 ] , 105 , 93 ) ; end ;
16177: LD_LOC 23
16181: PUSH
16182: LD_INT 2
16184: ARRAY
16185: PPUSH
16186: LD_INT 105
16188: PPUSH
16189: LD_INT 93
16191: PPUSH
16192: CALL_OW 171
16196: GO 16199
16198: POP
// end ;
16199: END
// every 0 0$1 marked 221 do
16200: GO 16202
16202: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_class , class_soldier ] ] ) ;
16203: LD_ADDR_LOC 23
16207: PUSH
16208: LD_LOC 21
16212: PPUSH
16213: LD_INT 22
16215: PUSH
16216: LD_EXP 2
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: PUSH
16231: LD_INT 25
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: PPUSH
16246: CALL_OW 70
16250: ST_TO_ADDR
// AddComEnterUnit ( pom [ 1 ] , R_bunkr ) ;
16251: LD_LOC 23
16255: PUSH
16256: LD_INT 1
16258: ARRAY
16259: PPUSH
16260: LD_LOC 34
16264: PPUSH
16265: CALL_OW 180
// enable ( 222 ) ;
16269: LD_INT 222
16271: ENABLE_MARKED
// end ;
16272: END
// every 0 0$2 marked 222 do
16273: GO 16275
16275: DISABLE
// begin SetXYS ( nah , 8 ) ;
16276: LD_EXP 35
16280: PPUSH
16281: LD_INT 8
16283: PPUSH
16284: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_ext_gun , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
16288: LD_LOC 26
16292: PUSH
16293: LD_INT 1
16295: ARRAY
16296: PPUSH
16297: LD_INT 17
16299: PPUSH
16300: LD_LOC 43
16304: PUSH
16305: LD_INT 1
16307: ARRAY
16308: PPUSH
16309: LD_LOC 43
16313: PUSH
16314: LD_INT 2
16316: ARRAY
16317: PPUSH
16318: LD_LOC 43
16322: PUSH
16323: LD_INT 3
16325: ARRAY
16326: PPUSH
16327: CALL_OW 205
// wait ( 0 0$5 ) ;
16331: LD_INT 175
16333: PPUSH
16334: CALL_OW 67
// enable ( 223 ) ;
16338: LD_INT 223
16340: ENABLE_MARKED
// end ;
16341: END
// every 0 0$5 marked 223 do
16342: GO 16344
16344: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_ext_gun ] ] ) ;
16345: LD_ADDR_LOC 23
16349: PUSH
16350: LD_LOC 21
16354: PPUSH
16355: LD_INT 22
16357: PUSH
16358: LD_EXP 2
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 1
16369: PUSH
16370: EMPTY
16371: LIST
16372: PUSH
16373: LD_INT 30
16375: PUSH
16376: LD_INT 17
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: LIST
16387: PPUSH
16388: CALL_OW 70
16392: ST_TO_ADDR
// if pom = 0 then
16393: LD_LOC 23
16397: PUSH
16398: LD_INT 0
16400: EQUAL
16401: IFFALSE 16461
// begin SetXYS ( nah , 8 ) ;
16403: LD_EXP 35
16407: PPUSH
16408: LD_INT 8
16410: PPUSH
16411: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_ext_gun , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
16415: LD_LOC 26
16419: PUSH
16420: LD_INT 1
16422: ARRAY
16423: PPUSH
16424: LD_INT 17
16426: PPUSH
16427: LD_LOC 43
16431: PUSH
16432: LD_INT 1
16434: ARRAY
16435: PPUSH
16436: LD_LOC 43
16440: PUSH
16441: LD_INT 2
16443: ARRAY
16444: PPUSH
16445: LD_LOC 43
16449: PUSH
16450: LD_INT 3
16452: ARRAY
16453: PPUSH
16454: CALL_OW 205
// enable ;
16458: ENABLE
// end else
16459: GO 16475
// begin R_egun = pom [ 1 ] ;
16461: LD_ADDR_LOC 37
16465: PUSH
16466: LD_LOC 23
16470: PUSH
16471: LD_INT 1
16473: ARRAY
16474: ST_TO_ADDR
// end ; end ;
16475: END
// every 0 0$2 marked 224 do
16476: GO 16478
16478: DISABLE
// begin SetXYS ( nah , 9 ) ;
16479: LD_EXP 35
16483: PPUSH
16484: LD_INT 9
16486: PPUSH
16487: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_turret , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
16491: LD_LOC 26
16495: PUSH
16496: LD_INT 1
16498: ARRAY
16499: PPUSH
16500: LD_INT 33
16502: PPUSH
16503: LD_LOC 43
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: PPUSH
16512: LD_LOC 43
16516: PUSH
16517: LD_INT 2
16519: ARRAY
16520: PPUSH
16521: LD_LOC 43
16525: PUSH
16526: LD_INT 3
16528: ARRAY
16529: PPUSH
16530: CALL_OW 205
// wait ( 0 0$5 ) ;
16534: LD_INT 175
16536: PPUSH
16537: CALL_OW 67
// enable ( 225 ) ;
16541: LD_INT 225
16543: ENABLE_MARKED
// end ;
16544: END
// every 0 0$5 marked 225 do
16545: GO 16547
16547: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_turret ] ] ) ;
16548: LD_ADDR_LOC 23
16552: PUSH
16553: LD_LOC 21
16557: PPUSH
16558: LD_INT 22
16560: PUSH
16561: LD_EXP 2
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: PUSH
16576: LD_INT 30
16578: PUSH
16579: LD_INT 33
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 70
16595: ST_TO_ADDR
// if ( pom = 0 ) or ( pom = 1 and pom [ 1 ] = R_turret1 ) then
16596: LD_LOC 23
16600: PUSH
16601: LD_INT 0
16603: EQUAL
16604: PUSH
16605: LD_LOC 23
16609: PUSH
16610: LD_INT 1
16612: EQUAL
16613: PUSH
16614: LD_LOC 23
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PUSH
16623: LD_LOC 32
16627: EQUAL
16628: AND
16629: OR
16630: IFFALSE 16690
// begin SetXYS ( nah , 9 ) ;
16632: LD_EXP 35
16636: PPUSH
16637: LD_INT 9
16639: PPUSH
16640: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_turret , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
16644: LD_LOC 26
16648: PUSH
16649: LD_INT 1
16651: ARRAY
16652: PPUSH
16653: LD_INT 33
16655: PPUSH
16656: LD_LOC 43
16660: PUSH
16661: LD_INT 1
16663: ARRAY
16664: PPUSH
16665: LD_LOC 43
16669: PUSH
16670: LD_INT 2
16672: ARRAY
16673: PPUSH
16674: LD_LOC 43
16678: PUSH
16679: LD_INT 3
16681: ARRAY
16682: PPUSH
16683: CALL_OW 205
// enable ;
16687: ENABLE
// end else
16688: GO 16762
// begin if pom = 1 then
16690: LD_LOC 23
16694: PUSH
16695: LD_INT 1
16697: EQUAL
16698: IFFALSE 16716
// R_turret2 = pom [ 1 ] else
16700: LD_ADDR_LOC 35
16704: PUSH
16705: LD_LOC 23
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: ST_TO_ADDR
16714: GO 16762
// if pom [ 1 ] = R_turret1 then
16716: LD_LOC 23
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: PUSH
16725: LD_LOC 32
16729: EQUAL
16730: IFFALSE 16748
// R_turret2 = pom [ 2 ] else
16732: LD_ADDR_LOC 35
16736: PUSH
16737: LD_LOC 23
16741: PUSH
16742: LD_INT 2
16744: ARRAY
16745: ST_TO_ADDR
16746: GO 16762
// R_turret2 = pom [ 1 ] ;
16748: LD_ADDR_LOC 35
16752: PUSH
16753: LD_LOC 23
16757: PUSH
16758: LD_INT 1
16760: ARRAY
16761: ST_TO_ADDR
// end ; end ;
16762: END
// every 0 0$1 marked 226 do
16763: GO 16765
16765: DISABLE
// begin AddComPlaceWeapon ( R_turret2 , zbrane_na_turrety3 [ difficulty ] ) ;
16766: LD_LOC 35
16770: PPUSH
16771: LD_EXP 75
16775: PUSH
16776: LD_OWVAR 67
16780: ARRAY
16781: PPUSH
16782: CALL_OW 208
// enable ( 227 ) ;
16786: LD_INT 227
16788: ENABLE_MARKED
// enable ( 221 ) ;
16789: LD_INT 221
16791: ENABLE_MARKED
// end ;
16792: END
// every 0 0$2 marked 227 do
16793: GO 16795
16795: DISABLE
// begin SetXYS ( nah , 10 ) ;
16796: LD_EXP 35
16800: PPUSH
16801: LD_INT 10
16803: PPUSH
16804: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_turret , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
16808: LD_LOC 26
16812: PUSH
16813: LD_INT 1
16815: ARRAY
16816: PPUSH
16817: LD_INT 33
16819: PPUSH
16820: LD_LOC 43
16824: PUSH
16825: LD_INT 1
16827: ARRAY
16828: PPUSH
16829: LD_LOC 43
16833: PUSH
16834: LD_INT 2
16836: ARRAY
16837: PPUSH
16838: LD_LOC 43
16842: PUSH
16843: LD_INT 3
16845: ARRAY
16846: PPUSH
16847: CALL_OW 205
// wait ( 0 0$5 ) ;
16851: LD_INT 175
16853: PPUSH
16854: CALL_OW 67
// enable ( 228 ) ;
16858: LD_INT 228
16860: ENABLE_MARKED
// end ;
16861: END
// every 0 0$5 marked 228 do
16862: GO 16864
16864: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_turret ] ] ) ;
16865: LD_ADDR_LOC 23
16869: PUSH
16870: LD_LOC 21
16874: PPUSH
16875: LD_INT 22
16877: PUSH
16878: LD_EXP 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: PUSH
16893: LD_INT 30
16895: PUSH
16896: LD_INT 33
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: PPUSH
16908: CALL_OW 70
16912: ST_TO_ADDR
// if ( pom = 0 ) or ( pom = 1 and pom [ 1 ] = R_turret1 ) or ( pom = 1 and pom [ 1 ] = R_turret2 ) or ( pom = 2 and ( ( pom [ 1 ] = R_turret1 and pom [ 2 ] = R_turret2 ) or ( pom [ 1 ] = R_turret2 and pom [ 2 ] = R_turret1 ) ) ) then
16913: LD_LOC 23
16917: PUSH
16918: LD_INT 0
16920: EQUAL
16921: PUSH
16922: LD_LOC 23
16926: PUSH
16927: LD_INT 1
16929: EQUAL
16930: PUSH
16931: LD_LOC 23
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PUSH
16940: LD_LOC 32
16944: EQUAL
16945: AND
16946: OR
16947: PUSH
16948: LD_LOC 23
16952: PUSH
16953: LD_INT 1
16955: EQUAL
16956: PUSH
16957: LD_LOC 23
16961: PUSH
16962: LD_INT 1
16964: ARRAY
16965: PUSH
16966: LD_LOC 35
16970: EQUAL
16971: AND
16972: OR
16973: PUSH
16974: LD_LOC 23
16978: PUSH
16979: LD_INT 2
16981: EQUAL
16982: PUSH
16983: LD_LOC 23
16987: PUSH
16988: LD_INT 1
16990: ARRAY
16991: PUSH
16992: LD_LOC 32
16996: EQUAL
16997: PUSH
16998: LD_LOC 23
17002: PUSH
17003: LD_INT 2
17005: ARRAY
17006: PUSH
17007: LD_LOC 35
17011: EQUAL
17012: AND
17013: PUSH
17014: LD_LOC 23
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PUSH
17023: LD_LOC 35
17027: EQUAL
17028: PUSH
17029: LD_LOC 23
17033: PUSH
17034: LD_INT 2
17036: ARRAY
17037: PUSH
17038: LD_LOC 32
17042: EQUAL
17043: AND
17044: OR
17045: AND
17046: OR
17047: IFFALSE 17107
// begin SetXYS ( nah , 10 ) ;
17049: LD_EXP 35
17053: PPUSH
17054: LD_INT 10
17056: PPUSH
17057: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_turret , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17061: LD_LOC 26
17065: PUSH
17066: LD_INT 1
17068: ARRAY
17069: PPUSH
17070: LD_INT 33
17072: PPUSH
17073: LD_LOC 43
17077: PUSH
17078: LD_INT 1
17080: ARRAY
17081: PPUSH
17082: LD_LOC 43
17086: PUSH
17087: LD_INT 2
17089: ARRAY
17090: PPUSH
17091: LD_LOC 43
17095: PUSH
17096: LD_INT 3
17098: ARRAY
17099: PPUSH
17100: CALL_OW 205
// enable ;
17104: ENABLE
// end else
17105: GO 17323
// begin if pom = 1 then
17107: LD_LOC 23
17111: PUSH
17112: LD_INT 1
17114: EQUAL
17115: IFFALSE 17131
// R_turret3 = pom [ 1 ] ;
17117: LD_ADDR_LOC 36
17121: PUSH
17122: LD_LOC 23
17126: PUSH
17127: LD_INT 1
17129: ARRAY
17130: ST_TO_ADDR
// if pom = 2 then
17131: LD_LOC 23
17135: PUSH
17136: LD_INT 2
17138: EQUAL
17139: IFFALSE 17203
// if pom [ 1 ] = R_turret1 or pom [ 1 ] = R_turret2 then
17141: LD_LOC 23
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_LOC 32
17154: EQUAL
17155: PUSH
17156: LD_LOC 23
17160: PUSH
17161: LD_INT 1
17163: ARRAY
17164: PUSH
17165: LD_LOC 35
17169: EQUAL
17170: OR
17171: IFFALSE 17189
// R_turret3 = pom [ 2 ] else
17173: LD_ADDR_LOC 36
17177: PUSH
17178: LD_LOC 23
17182: PUSH
17183: LD_INT 2
17185: ARRAY
17186: ST_TO_ADDR
17187: GO 17203
// R_turret3 = pom [ 1 ] ;
17189: LD_ADDR_LOC 36
17193: PUSH
17194: LD_LOC 23
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: ST_TO_ADDR
// if pom = 3 then
17203: LD_LOC 23
17207: PUSH
17208: LD_INT 3
17210: EQUAL
17211: IFFALSE 17323
// begin if pom [ 1 ] <> R_turret1 and pom [ 1 ] <> R_turret2 then
17213: LD_LOC 23
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: PUSH
17222: LD_LOC 32
17226: NONEQUAL
17227: PUSH
17228: LD_LOC 23
17232: PUSH
17233: LD_INT 1
17235: ARRAY
17236: PUSH
17237: LD_LOC 35
17241: NONEQUAL
17242: AND
17243: IFFALSE 17261
// R_turret3 = pom [ 1 ] else
17245: LD_ADDR_LOC 36
17249: PUSH
17250: LD_LOC 23
17254: PUSH
17255: LD_INT 1
17257: ARRAY
17258: ST_TO_ADDR
17259: GO 17323
// if pom [ 2 ] <> R_turret1 and pom [ 2 ] <> R_turret2 then
17261: LD_LOC 23
17265: PUSH
17266: LD_INT 2
17268: ARRAY
17269: PUSH
17270: LD_LOC 32
17274: NONEQUAL
17275: PUSH
17276: LD_LOC 23
17280: PUSH
17281: LD_INT 2
17283: ARRAY
17284: PUSH
17285: LD_LOC 35
17289: NONEQUAL
17290: AND
17291: IFFALSE 17309
// R_turret3 = pom [ 2 ] else
17293: LD_ADDR_LOC 36
17297: PUSH
17298: LD_LOC 23
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: ST_TO_ADDR
17307: GO 17323
// R_turret3 = pom [ 3 ] ;
17309: LD_ADDR_LOC 36
17313: PUSH
17314: LD_LOC 23
17318: PUSH
17319: LD_INT 3
17321: ARRAY
17322: ST_TO_ADDR
// end ; end ; end ;
17323: END
// every 0 0$1 marked 229 do
17324: GO 17326
17326: DISABLE
// begin AddComPlaceWeapon ( R_turret3 , zbrane_na_turrety3 [ difficulty ] ) ;
17327: LD_LOC 36
17331: PPUSH
17332: LD_EXP 75
17336: PUSH
17337: LD_OWVAR 67
17341: ARRAY
17342: PPUSH
17343: CALL_OW 208
// enable ( 230 ) ;
17347: LD_INT 230
17349: ENABLE_MARKED
// end ;
17350: END
// every 0 0$1 marked 230 do
17351: GO 17353
17353: DISABLE
// begin SetXYS ( nah , 11 ) ;
17354: LD_EXP 35
17358: PPUSH
17359: LD_INT 11
17361: PPUSH
17362: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_armoury , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17366: LD_LOC 26
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: PPUSH
17375: LD_INT 4
17377: PPUSH
17378: LD_LOC 43
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PPUSH
17387: LD_LOC 43
17391: PUSH
17392: LD_INT 2
17394: ARRAY
17395: PPUSH
17396: LD_LOC 43
17400: PUSH
17401: LD_INT 3
17403: ARRAY
17404: PPUSH
17405: CALL_OW 205
// wait ( 0 0$5 ) ;
17409: LD_INT 175
17411: PPUSH
17412: CALL_OW 67
// enable ( 231 ) ;
17416: LD_INT 231
17418: ENABLE_MARKED
// end ;
17419: END
// every 0 0$5 marked 231 do
17420: GO 17422
17422: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_armoury ] ] ) ;
17423: LD_ADDR_LOC 23
17427: PUSH
17428: LD_LOC 21
17432: PPUSH
17433: LD_INT 22
17435: PUSH
17436: LD_EXP 2
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: PUSH
17451: LD_INT 30
17453: PUSH
17454: LD_INT 4
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 70
17470: ST_TO_ADDR
// if pom = 0 then
17471: LD_LOC 23
17475: PUSH
17476: LD_INT 0
17478: EQUAL
17479: IFFALSE 17539
// begin SetXYS ( nah , 11 ) ;
17481: LD_EXP 35
17485: PPUSH
17486: LD_INT 11
17488: PPUSH
17489: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_armoury , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17493: LD_LOC 26
17497: PUSH
17498: LD_INT 1
17500: ARRAY
17501: PPUSH
17502: LD_INT 4
17504: PPUSH
17505: LD_LOC 43
17509: PUSH
17510: LD_INT 1
17512: ARRAY
17513: PPUSH
17514: LD_LOC 43
17518: PUSH
17519: LD_INT 2
17521: ARRAY
17522: PPUSH
17523: LD_LOC 43
17527: PUSH
17528: LD_INT 3
17530: ARRAY
17531: PPUSH
17532: CALL_OW 205
// enable ;
17536: ENABLE
// end else
17537: GO 17553
// R_arm = pom [ 1 ] end ;
17539: LD_ADDR_LOC 38
17543: PUSH
17544: LD_LOC 23
17548: PUSH
17549: LD_INT 1
17551: ARRAY
17552: ST_TO_ADDR
17553: END
// every 0 0$1 marked 232 do
17554: GO 17556
17556: DISABLE
// begin enable ( 233 ) ;
17557: LD_INT 233
17559: ENABLE_MARKED
// end ;
17560: END
// every 0 0$1 marked 233 do
17561: GO 17563
17563: DISABLE
// begin SetXYS ( nah , 12 ) ;
17564: LD_EXP 35
17568: PPUSH
17569: LD_INT 12
17571: PPUSH
17572: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_ext_track , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17576: LD_LOC 26
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_INT 16
17587: PPUSH
17588: LD_LOC 43
17592: PUSH
17593: LD_INT 1
17595: ARRAY
17596: PPUSH
17597: LD_LOC 43
17601: PUSH
17602: LD_INT 2
17604: ARRAY
17605: PPUSH
17606: LD_LOC 43
17610: PUSH
17611: LD_INT 3
17613: ARRAY
17614: PPUSH
17615: CALL_OW 205
// wait ( 0 0$5 ) ;
17619: LD_INT 175
17621: PPUSH
17622: CALL_OW 67
// enable ( 234 ) ;
17626: LD_INT 234
17628: ENABLE_MARKED
// end ;
17629: END
// every 0 0$5 marked 234 do
17630: GO 17632
17632: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_ext_track ] ] ) ;
17633: LD_ADDR_LOC 23
17637: PUSH
17638: LD_LOC 21
17642: PPUSH
17643: LD_INT 22
17645: PUSH
17646: LD_EXP 2
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: PUSH
17661: LD_INT 30
17663: PUSH
17664: LD_INT 16
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 70
17680: ST_TO_ADDR
// if pom = 0 then
17681: LD_LOC 23
17685: PUSH
17686: LD_INT 0
17688: EQUAL
17689: IFFALSE 17749
// begin SetXYS ( nah , 12 ) ;
17691: LD_EXP 35
17695: PPUSH
17696: LD_INT 12
17698: PPUSH
17699: CALL 18293 0 2
// ComBuild ( staveci [ 1 ] , b_ext_track , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17703: LD_LOC 26
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_INT 16
17714: PPUSH
17715: LD_LOC 43
17719: PUSH
17720: LD_INT 1
17722: ARRAY
17723: PPUSH
17724: LD_LOC 43
17728: PUSH
17729: LD_INT 2
17731: ARRAY
17732: PPUSH
17733: LD_LOC 43
17737: PUSH
17738: LD_INT 3
17740: ARRAY
17741: PPUSH
17742: CALL_OW 145
// enable ;
17746: ENABLE
// end else
17747: GO 17763
// R_etra = pom [ 1 ] ;
17749: LD_ADDR_LOC 40
17753: PUSH
17754: LD_LOC 23
17758: PUSH
17759: LD_INT 1
17761: ARRAY
17762: ST_TO_ADDR
// end ;
17763: END
// every 0 0$1 marked 235 do
17764: GO 17766
17766: DISABLE
// begin SetXYS ( nah , 13 ) ;
17767: LD_EXP 35
17771: PPUSH
17772: LD_INT 13
17774: PPUSH
17775: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_ext_computer , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17779: LD_LOC 26
17783: PUSH
17784: LD_INT 1
17786: ARRAY
17787: PPUSH
17788: LD_INT 24
17790: PPUSH
17791: LD_LOC 43
17795: PUSH
17796: LD_INT 1
17798: ARRAY
17799: PPUSH
17800: LD_LOC 43
17804: PUSH
17805: LD_INT 2
17807: ARRAY
17808: PPUSH
17809: LD_LOC 43
17813: PUSH
17814: LD_INT 3
17816: ARRAY
17817: PPUSH
17818: CALL_OW 205
// wait ( 0 0$5 ) ;
17822: LD_INT 175
17824: PPUSH
17825: CALL_OW 67
// enable ( 236 ) ;
17829: LD_INT 236
17831: ENABLE_MARKED
// end ;
17832: END
// every 0 0$5 marked 236 do
17833: GO 17835
17835: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_ext_computer ] ] ) ;
17836: LD_ADDR_LOC 23
17840: PUSH
17841: LD_LOC 21
17845: PPUSH
17846: LD_INT 22
17848: PUSH
17849: LD_EXP 2
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: PUSH
17864: LD_INT 30
17866: PUSH
17867: LD_INT 24
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PPUSH
17879: CALL_OW 70
17883: ST_TO_ADDR
// if pom = 0 then
17884: LD_LOC 23
17888: PUSH
17889: LD_INT 0
17891: EQUAL
17892: IFFALSE 17952
// begin SetXYS ( nah , 13 ) ;
17894: LD_EXP 35
17898: PPUSH
17899: LD_INT 13
17901: PPUSH
17902: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_ext_computer , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17906: LD_LOC 26
17910: PUSH
17911: LD_INT 1
17913: ARRAY
17914: PPUSH
17915: LD_INT 24
17917: PPUSH
17918: LD_LOC 43
17922: PUSH
17923: LD_INT 1
17925: ARRAY
17926: PPUSH
17927: LD_LOC 43
17931: PUSH
17932: LD_INT 2
17934: ARRAY
17935: PPUSH
17936: LD_LOC 43
17940: PUSH
17941: LD_INT 3
17943: ARRAY
17944: PPUSH
17945: CALL_OW 205
// enable ;
17949: ENABLE
// end else
17950: GO 17966
// R_ecomp = pom [ 1 ] ;
17952: LD_ADDR_LOC 39
17956: PUSH
17957: LD_LOC 23
17961: PUSH
17962: LD_INT 1
17964: ARRAY
17965: ST_TO_ADDR
// end ;
17966: END
// every 0 0$1 marked 237 do
17967: GO 17969
17969: DISABLE
// begin SetXYS ( nah , 14 ) ;
17970: LD_EXP 35
17974: PPUSH
17975: LD_INT 14
17977: PPUSH
17978: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_siberite_power , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
17982: LD_LOC 26
17986: PUSH
17987: LD_INT 1
17989: ARRAY
17990: PPUSH
17991: LD_INT 28
17993: PPUSH
17994: LD_LOC 43
17998: PUSH
17999: LD_INT 1
18001: ARRAY
18002: PPUSH
18003: LD_LOC 43
18007: PUSH
18008: LD_INT 2
18010: ARRAY
18011: PPUSH
18012: LD_LOC 43
18016: PUSH
18017: LD_INT 3
18019: ARRAY
18020: PPUSH
18021: CALL_OW 205
// wait ( 0 0$5 ) ;
18025: LD_INT 175
18027: PPUSH
18028: CALL_OW 67
// enable ( 238 ) ;
18032: LD_INT 238
18034: ENABLE_MARKED
// end ;
18035: END
// every 0 0$5 marked 238 do
18036: GO 18038
18038: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_siberite_power ] ] ) ;
18039: LD_ADDR_LOC 23
18043: PUSH
18044: LD_LOC 21
18048: PPUSH
18049: LD_INT 22
18051: PUSH
18052: LD_EXP 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: EMPTY
18065: LIST
18066: PUSH
18067: LD_INT 30
18069: PUSH
18070: LD_INT 28
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: PPUSH
18082: CALL_OW 70
18086: ST_TO_ADDR
// if pom = 0 then
18087: LD_LOC 23
18091: PUSH
18092: LD_INT 0
18094: EQUAL
18095: IFFALSE 18155
// begin SetXYS ( nah , 14 ) ;
18097: LD_EXP 35
18101: PPUSH
18102: LD_INT 14
18104: PPUSH
18105: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_siberite_power , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
18109: LD_LOC 26
18113: PUSH
18114: LD_INT 1
18116: ARRAY
18117: PPUSH
18118: LD_INT 28
18120: PPUSH
18121: LD_LOC 43
18125: PUSH
18126: LD_INT 1
18128: ARRAY
18129: PPUSH
18130: LD_LOC 43
18134: PUSH
18135: LD_INT 2
18137: ARRAY
18138: PPUSH
18139: LD_LOC 43
18143: PUSH
18144: LD_INT 3
18146: ARRAY
18147: PPUSH
18148: CALL_OW 205
// enable ;
18152: ENABLE
// end else
18153: GO 18285
// if pom = 1 and pom [ 1 ] = R_sel then
18155: LD_LOC 23
18159: PUSH
18160: LD_INT 1
18162: EQUAL
18163: PUSH
18164: LD_LOC 23
18168: PUSH
18169: LD_INT 1
18171: ARRAY
18172: PUSH
18173: LD_LOC 30
18177: EQUAL
18178: AND
18179: IFFALSE 18239
// begin SetXYS ( nah , 14 ) ;
18181: LD_EXP 35
18185: PPUSH
18186: LD_INT 14
18188: PPUSH
18189: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_siberite_power , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
18193: LD_LOC 26
18197: PUSH
18198: LD_INT 1
18200: ARRAY
18201: PPUSH
18202: LD_INT 28
18204: PPUSH
18205: LD_LOC 43
18209: PUSH
18210: LD_INT 1
18212: ARRAY
18213: PPUSH
18214: LD_LOC 43
18218: PUSH
18219: LD_INT 2
18221: ARRAY
18222: PPUSH
18223: LD_LOC 43
18227: PUSH
18228: LD_INT 3
18230: ARRAY
18231: PPUSH
18232: CALL_OW 205
// enable ;
18236: ENABLE
// end else
18237: GO 18285
// if pom [ 1 ] = R_sel then
18239: LD_LOC 23
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: PUSH
18248: LD_LOC 30
18252: EQUAL
18253: IFFALSE 18271
// R_oel = pom [ 1 ] else
18255: LD_ADDR_LOC 42
18259: PUSH
18260: LD_LOC 23
18264: PUSH
18265: LD_INT 1
18267: ARRAY
18268: ST_TO_ADDR
18269: GO 18285
// R_oel = pom [ 2 ] ;
18271: LD_ADDR_LOC 42
18275: PUSH
18276: LD_LOC 23
18280: PUSH
18281: LD_INT 2
18283: ARRAY
18284: ST_TO_ADDR
// end ;
18285: END
// every 0 0$1 marked 239 do
18286: GO 18288
18288: DISABLE
// begin disable ( 248 ) ;
18289: LD_INT 248
18291: DISABLE_MARKED
// end ;
18292: END
// function SetXYS ( um , b ) ; begin
18293: LD_INT 0
18295: PPUSH
// if um = 2 then
18296: LD_VAR 0 1
18300: PUSH
18301: LD_INT 2
18303: EQUAL
18304: IFFALSE 18314
// um = 1 ;
18306: LD_ADDR_VAR 0 1
18310: PUSH
18311: LD_INT 1
18313: ST_TO_ADDR
// case b of 1 :
18314: LD_VAR 0 2
18318: PUSH
18319: LD_INT 1
18321: DOUBLE
18322: EQUAL
18323: IFTRUE 18327
18325: GO 18426
18327: POP
// case um of 1 :
18328: LD_VAR 0 1
18332: PUSH
18333: LD_INT 1
18335: DOUBLE
18336: EQUAL
18337: IFTRUE 18341
18339: GO 18363
18341: POP
// XYS = [ 137 , 65 , 2 ] ; 4 :
18342: LD_ADDR_LOC 43
18346: PUSH
18347: LD_INT 137
18349: PUSH
18350: LD_INT 65
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: LIST
18360: ST_TO_ADDR
18361: GO 18424
18363: LD_INT 4
18365: DOUBLE
18366: EQUAL
18367: IFTRUE 18371
18369: GO 18393
18371: POP
// XYS = [ 97 , 112 , 0 ] ; 3 :
18372: LD_ADDR_LOC 43
18376: PUSH
18377: LD_INT 97
18379: PUSH
18380: LD_INT 112
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: ST_TO_ADDR
18391: GO 18424
18393: LD_INT 3
18395: DOUBLE
18396: EQUAL
18397: IFTRUE 18401
18399: GO 18423
18401: POP
// XYS = [ 48 , 73 , 3 ] ; end ; 2 :
18402: LD_ADDR_LOC 43
18406: PUSH
18407: LD_INT 48
18409: PUSH
18410: LD_INT 73
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: ST_TO_ADDR
18421: GO 18424
18423: POP
18424: GO 19925
18426: LD_INT 2
18428: DOUBLE
18429: EQUAL
18430: IFTRUE 18434
18432: GO 18533
18434: POP
// case um of 1 :
18435: LD_VAR 0 1
18439: PUSH
18440: LD_INT 1
18442: DOUBLE
18443: EQUAL
18444: IFTRUE 18448
18446: GO 18470
18448: POP
// XYS = [ 150 , 80 , 3 ] ; 4 :
18449: LD_ADDR_LOC 43
18453: PUSH
18454: LD_INT 150
18456: PUSH
18457: LD_INT 80
18459: PUSH
18460: LD_INT 3
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: ST_TO_ADDR
18468: GO 18531
18470: LD_INT 4
18472: DOUBLE
18473: EQUAL
18474: IFTRUE 18478
18476: GO 18500
18478: POP
// XYS = [ 91 , 109 , 3 ] ; 3 :
18479: LD_ADDR_LOC 43
18483: PUSH
18484: LD_INT 91
18486: PUSH
18487: LD_INT 109
18489: PUSH
18490: LD_INT 3
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: ST_TO_ADDR
18498: GO 18531
18500: LD_INT 3
18502: DOUBLE
18503: EQUAL
18504: IFTRUE 18508
18506: GO 18530
18508: POP
// XYS = [ 43 , 71 , 2 ] ; end ; 3 :
18509: LD_ADDR_LOC 43
18513: PUSH
18514: LD_INT 43
18516: PUSH
18517: LD_INT 71
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: ST_TO_ADDR
18528: GO 18531
18530: POP
18531: GO 19925
18533: LD_INT 3
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18640
18541: POP
// case um of 1 :
18542: LD_VAR 0 1
18546: PUSH
18547: LD_INT 1
18549: DOUBLE
18550: EQUAL
18551: IFTRUE 18555
18553: GO 18577
18555: POP
// XYS = [ 140 , 63 , 3 ] ; 4 :
18556: LD_ADDR_LOC 43
18560: PUSH
18561: LD_INT 140
18563: PUSH
18564: LD_INT 63
18566: PUSH
18567: LD_INT 3
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: ST_TO_ADDR
18575: GO 18638
18577: LD_INT 4
18579: DOUBLE
18580: EQUAL
18581: IFTRUE 18585
18583: GO 18607
18585: POP
// XYS = [ 105 , 112 , 4 ] ; 3 :
18586: LD_ADDR_LOC 43
18590: PUSH
18591: LD_INT 105
18593: PUSH
18594: LD_INT 112
18596: PUSH
18597: LD_INT 4
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: ST_TO_ADDR
18605: GO 18638
18607: LD_INT 3
18609: DOUBLE
18610: EQUAL
18611: IFTRUE 18615
18613: GO 18637
18615: POP
// XYS = [ 37 , 70 , 2 ] ; end ; 4 :
18616: LD_ADDR_LOC 43
18620: PUSH
18621: LD_INT 37
18623: PUSH
18624: LD_INT 70
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: ST_TO_ADDR
18635: GO 18638
18637: POP
18638: GO 19925
18640: LD_INT 4
18642: DOUBLE
18643: EQUAL
18644: IFTRUE 18648
18646: GO 18747
18648: POP
// case um of 1 :
18649: LD_VAR 0 1
18653: PUSH
18654: LD_INT 1
18656: DOUBLE
18657: EQUAL
18658: IFTRUE 18662
18660: GO 18684
18662: POP
// XYS = [ 160 , 90 , 5 ] ; 4 :
18663: LD_ADDR_LOC 43
18667: PUSH
18668: LD_INT 160
18670: PUSH
18671: LD_INT 90
18673: PUSH
18674: LD_INT 5
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: ST_TO_ADDR
18682: GO 18745
18684: LD_INT 4
18686: DOUBLE
18687: EQUAL
18688: IFTRUE 18692
18690: GO 18714
18692: POP
// XYS = [ 99 , 94 , 3 ] ; 3 :
18693: LD_ADDR_LOC 43
18697: PUSH
18698: LD_INT 99
18700: PUSH
18701: LD_INT 94
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: LIST
18711: ST_TO_ADDR
18712: GO 18745
18714: LD_INT 3
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18744
18722: POP
// XYS = [ 44 , 79 , 1 ] ; end ; 5 :
18723: LD_ADDR_LOC 43
18727: PUSH
18728: LD_INT 44
18730: PUSH
18731: LD_INT 79
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: LIST
18741: ST_TO_ADDR
18742: GO 18745
18744: POP
18745: GO 19925
18747: LD_INT 5
18749: DOUBLE
18750: EQUAL
18751: IFTRUE 18755
18753: GO 18854
18755: POP
// case um of 1 :
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 1
18763: DOUBLE
18764: EQUAL
18765: IFTRUE 18769
18767: GO 18791
18769: POP
// XYS = [ 133 , 72 , 4 ] ; 4 :
18770: LD_ADDR_LOC 43
18774: PUSH
18775: LD_INT 133
18777: PUSH
18778: LD_INT 72
18780: PUSH
18781: LD_INT 4
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: ST_TO_ADDR
18789: GO 18852
18791: LD_INT 4
18793: DOUBLE
18794: EQUAL
18795: IFTRUE 18799
18797: GO 18821
18799: POP
// XYS = [ 86 , 84 , 2 ] ; 3 :
18800: LD_ADDR_LOC 43
18804: PUSH
18805: LD_INT 86
18807: PUSH
18808: LD_INT 84
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: ST_TO_ADDR
18819: GO 18852
18821: LD_INT 3
18823: DOUBLE
18824: EQUAL
18825: IFTRUE 18829
18827: GO 18851
18829: POP
// XYS = [ 75 , 90 , 2 ] ; end ; 6 :
18830: LD_ADDR_LOC 43
18834: PUSH
18835: LD_INT 75
18837: PUSH
18838: LD_INT 90
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: ST_TO_ADDR
18849: GO 18852
18851: POP
18852: GO 19925
18854: LD_INT 6
18856: DOUBLE
18857: EQUAL
18858: IFTRUE 18862
18860: GO 18961
18862: POP
// case um of 1 :
18863: LD_VAR 0 1
18867: PUSH
18868: LD_INT 1
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18898
18876: POP
// XYS = [ 152 , 71 , 4 ] ; 4 :
18877: LD_ADDR_LOC 43
18881: PUSH
18882: LD_INT 152
18884: PUSH
18885: LD_INT 71
18887: PUSH
18888: LD_INT 4
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: ST_TO_ADDR
18896: GO 18959
18898: LD_INT 4
18900: DOUBLE
18901: EQUAL
18902: IFTRUE 18906
18904: GO 18928
18906: POP
// XYS = [ 103 , 106 , 5 ] ; 3 :
18907: LD_ADDR_LOC 43
18911: PUSH
18912: LD_INT 103
18914: PUSH
18915: LD_INT 106
18917: PUSH
18918: LD_INT 5
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 18959
18928: LD_INT 3
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 18958
18936: POP
// XYS = [ 50 , 90 , 3 ] ; end ; 7 :
18937: LD_ADDR_LOC 43
18941: PUSH
18942: LD_INT 50
18944: PUSH
18945: LD_INT 90
18947: PUSH
18948: LD_INT 3
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: ST_TO_ADDR
18956: GO 18959
18958: POP
18959: GO 19925
18961: LD_INT 7
18963: DOUBLE
18964: EQUAL
18965: IFTRUE 18969
18967: GO 19068
18969: POP
// case um of 1 :
18970: LD_VAR 0 1
18974: PUSH
18975: LD_INT 1
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 19005
18983: POP
// XYS = [ 143 , 56 , 2 ] ; 4 :
18984: LD_ADDR_LOC 43
18988: PUSH
18989: LD_INT 143
18991: PUSH
18992: LD_INT 56
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: ST_TO_ADDR
19003: GO 19066
19005: LD_INT 4
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19035
19013: POP
// XYS = [ 105 , 93 , 2 ] ; 3 :
19014: LD_ADDR_LOC 43
19018: PUSH
19019: LD_INT 105
19021: PUSH
19022: LD_INT 93
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: ST_TO_ADDR
19033: GO 19066
19035: LD_INT 3
19037: DOUBLE
19038: EQUAL
19039: IFTRUE 19043
19041: GO 19065
19043: POP
// XYS = [ 59 , 67 , 2 ] ; end ; 8 :
19044: LD_ADDR_LOC 43
19048: PUSH
19049: LD_INT 59
19051: PUSH
19052: LD_INT 67
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: ST_TO_ADDR
19063: GO 19066
19065: POP
19066: GO 19925
19068: LD_INT 8
19070: DOUBLE
19071: EQUAL
19072: IFTRUE 19076
19074: GO 19175
19076: POP
// case um of 1 :
19077: LD_VAR 0 1
19081: PUSH
19082: LD_INT 1
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19112
19090: POP
// XYS = [ 160 , 93 , 0 ] ; 4 :
19091: LD_ADDR_LOC 43
19095: PUSH
19096: LD_INT 160
19098: PUSH
19099: LD_INT 93
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: LIST
19109: ST_TO_ADDR
19110: GO 19173
19112: LD_INT 4
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19142
19120: POP
// XYS = [ 102 , 94 , 4 ] ; 3 :
19121: LD_ADDR_LOC 43
19125: PUSH
19126: LD_INT 102
19128: PUSH
19129: LD_INT 94
19131: PUSH
19132: LD_INT 4
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: LIST
19139: ST_TO_ADDR
19140: GO 19173
19142: LD_INT 3
19144: DOUBLE
19145: EQUAL
19146: IFTRUE 19150
19148: GO 19172
19150: POP
// XYS = [ 41 , 76 , 2 ] ; end ; 9 :
19151: LD_ADDR_LOC 43
19155: PUSH
19156: LD_INT 41
19158: PUSH
19159: LD_INT 76
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: ST_TO_ADDR
19170: GO 19173
19172: POP
19173: GO 19925
19175: LD_INT 9
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19282
19183: POP
// case um of 1 :
19184: LD_VAR 0 1
19188: PUSH
19189: LD_INT 1
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19219
19197: POP
// XYS = [ 140 , 74 , 3 ] ; 4 :
19198: LD_ADDR_LOC 43
19202: PUSH
19203: LD_INT 140
19205: PUSH
19206: LD_INT 74
19208: PUSH
19209: LD_INT 3
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: ST_TO_ADDR
19217: GO 19280
19219: LD_INT 4
19221: DOUBLE
19222: EQUAL
19223: IFTRUE 19227
19225: GO 19249
19227: POP
// XYS = [ 93 , 85 , 2 ] ; 3 :
19228: LD_ADDR_LOC 43
19232: PUSH
19233: LD_INT 93
19235: PUSH
19236: LD_INT 85
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: ST_TO_ADDR
19247: GO 19280
19249: LD_INT 3
19251: DOUBLE
19252: EQUAL
19253: IFTRUE 19257
19255: GO 19279
19257: POP
// XYS = [ 60 , 93 , 2 ] ; end ; 10 :
19258: LD_ADDR_LOC 43
19262: PUSH
19263: LD_INT 60
19265: PUSH
19266: LD_INT 93
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: ST_TO_ADDR
19277: GO 19280
19279: POP
19280: GO 19925
19282: LD_INT 10
19284: DOUBLE
19285: EQUAL
19286: IFTRUE 19290
19288: GO 19389
19290: POP
// case um of 1 :
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 1
19298: DOUBLE
19299: EQUAL
19300: IFTRUE 19304
19302: GO 19326
19304: POP
// XYS = [ 157 , 98 , 5 ] ; 4 :
19305: LD_ADDR_LOC 43
19309: PUSH
19310: LD_INT 157
19312: PUSH
19313: LD_INT 98
19315: PUSH
19316: LD_INT 5
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: ST_TO_ADDR
19324: GO 19387
19326: LD_INT 4
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19356
19334: POP
// XYS = [ 85 , 96 , 2 ] ; 3 :
19335: LD_ADDR_LOC 43
19339: PUSH
19340: LD_INT 85
19342: PUSH
19343: LD_INT 96
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
19354: GO 19387
19356: LD_INT 3
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19364
19362: GO 19386
19364: POP
// XYS = [ 63 , 87 , 2 ] ; end ; 11 :
19365: LD_ADDR_LOC 43
19369: PUSH
19370: LD_INT 63
19372: PUSH
19373: LD_INT 87
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: ST_TO_ADDR
19384: GO 19387
19386: POP
19387: GO 19925
19389: LD_INT 11
19391: DOUBLE
19392: EQUAL
19393: IFTRUE 19397
19395: GO 19496
19397: POP
// case um of 1 :
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 1
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19433
19411: POP
// XYS = [ 144 , 61 , 2 ] ; 4 :
19412: LD_ADDR_LOC 43
19416: PUSH
19417: LD_INT 144
19419: PUSH
19420: LD_INT 61
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: ST_TO_ADDR
19431: GO 19494
19433: LD_INT 4
19435: DOUBLE
19436: EQUAL
19437: IFTRUE 19441
19439: GO 19463
19441: POP
// XYS = [ 102 , 113 , 0 ] ; 3 :
19442: LD_ADDR_LOC 43
19446: PUSH
19447: LD_INT 102
19449: PUSH
19450: LD_INT 113
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: ST_TO_ADDR
19461: GO 19494
19463: LD_INT 3
19465: DOUBLE
19466: EQUAL
19467: IFTRUE 19471
19469: GO 19493
19471: POP
// XYS = [ 55 , 88 , 0 ] ; end ; 12 :
19472: LD_ADDR_LOC 43
19476: PUSH
19477: LD_INT 55
19479: PUSH
19480: LD_INT 88
19482: PUSH
19483: LD_INT 0
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: ST_TO_ADDR
19491: GO 19494
19493: POP
19494: GO 19925
19496: LD_INT 12
19498: DOUBLE
19499: EQUAL
19500: IFTRUE 19504
19502: GO 19603
19504: POP
// case um of 1 :
19505: LD_VAR 0 1
19509: PUSH
19510: LD_INT 1
19512: DOUBLE
19513: EQUAL
19514: IFTRUE 19518
19516: GO 19540
19518: POP
// XYS = [ 164 , 94 , 5 ] ; 4 :
19519: LD_ADDR_LOC 43
19523: PUSH
19524: LD_INT 164
19526: PUSH
19527: LD_INT 94
19529: PUSH
19530: LD_INT 5
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: ST_TO_ADDR
19538: GO 19601
19540: LD_INT 4
19542: DOUBLE
19543: EQUAL
19544: IFTRUE 19548
19546: GO 19570
19548: POP
// XYS = [ 96 , 91 , 2 ] ; 3 :
19549: LD_ADDR_LOC 43
19553: PUSH
19554: LD_INT 96
19556: PUSH
19557: LD_INT 91
19559: PUSH
19560: LD_INT 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 19601
19570: LD_INT 3
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19600
19578: POP
// XYS = [ 44 , 82 , 0 ] ; end ; 13 :
19579: LD_ADDR_LOC 43
19583: PUSH
19584: LD_INT 44
19586: PUSH
19587: LD_INT 82
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: ST_TO_ADDR
19598: GO 19601
19600: POP
19601: GO 19925
19603: LD_INT 13
19605: DOUBLE
19606: EQUAL
19607: IFTRUE 19611
19609: GO 19710
19611: POP
// case um of 1 :
19612: LD_VAR 0 1
19616: PUSH
19617: LD_INT 1
19619: DOUBLE
19620: EQUAL
19621: IFTRUE 19625
19623: GO 19647
19625: POP
// XYS = [ 156 , 90 , 1 ] ; 4 :
19626: LD_ADDR_LOC 43
19630: PUSH
19631: LD_INT 156
19633: PUSH
19634: LD_INT 90
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: ST_TO_ADDR
19645: GO 19708
19647: LD_INT 4
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19677
19655: POP
// XYS = [ 95 , 94 , 1 ] ; 3 :
19656: LD_ADDR_LOC 43
19660: PUSH
19661: LD_INT 95
19663: PUSH
19664: LD_INT 94
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: ST_TO_ADDR
19675: GO 19708
19677: LD_INT 3
19679: DOUBLE
19680: EQUAL
19681: IFTRUE 19685
19683: GO 19707
19685: POP
// XYS = [ 44 , 75 , 3 ] ; end ; 14 :
19686: LD_ADDR_LOC 43
19690: PUSH
19691: LD_INT 44
19693: PUSH
19694: LD_INT 75
19696: PUSH
19697: LD_INT 3
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: ST_TO_ADDR
19705: GO 19708
19707: POP
19708: GO 19925
19710: LD_INT 14
19712: DOUBLE
19713: EQUAL
19714: IFTRUE 19718
19716: GO 19817
19718: POP
// case um of 1 :
19719: LD_VAR 0 1
19723: PUSH
19724: LD_INT 1
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19754
19732: POP
// XYS = [ 152 , 84 , 0 ] ; 4 :
19733: LD_ADDR_LOC 43
19737: PUSH
19738: LD_INT 152
19740: PUSH
19741: LD_INT 84
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: ST_TO_ADDR
19752: GO 19815
19754: LD_INT 4
19756: DOUBLE
19757: EQUAL
19758: IFTRUE 19762
19760: GO 19784
19762: POP
// XYS = [ 106 , 116 , 2 ] ; 3 :
19763: LD_ADDR_LOC 43
19767: PUSH
19768: LD_INT 106
19770: PUSH
19771: LD_INT 116
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: ST_TO_ADDR
19782: GO 19815
19784: LD_INT 3
19786: DOUBLE
19787: EQUAL
19788: IFTRUE 19792
19790: GO 19814
19792: POP
// XYS = [ 52 , 75 , 1 ] ; end ; 15 :
19793: LD_ADDR_LOC 43
19797: PUSH
19798: LD_INT 52
19800: PUSH
19801: LD_INT 75
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: LIST
19811: ST_TO_ADDR
19812: GO 19815
19814: POP
19815: GO 19925
19817: LD_INT 15
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19924
19825: POP
// case um of 1 :
19826: LD_VAR 0 1
19830: PUSH
19831: LD_INT 1
19833: DOUBLE
19834: EQUAL
19835: IFTRUE 19839
19837: GO 19861
19839: POP
// XYS = [ 160 , 86 , 3 ] ; 4 :
19840: LD_ADDR_LOC 43
19844: PUSH
19845: LD_INT 160
19847: PUSH
19848: LD_INT 86
19850: PUSH
19851: LD_INT 3
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: ST_TO_ADDR
19859: GO 19922
19861: LD_INT 4
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19891
19869: POP
// XYS = [ 99 , 90 , 3 ] ; 3 :
19870: LD_ADDR_LOC 43
19874: PUSH
19875: LD_INT 99
19877: PUSH
19878: LD_INT 90
19880: PUSH
19881: LD_INT 3
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: ST_TO_ADDR
19889: GO 19922
19891: LD_INT 3
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 19921
19899: POP
// XYS = [ 48 , 83 , 5 ] ; end ; end ;
19900: LD_ADDR_LOC 43
19904: PUSH
19905: LD_INT 48
19907: PUSH
19908: LD_INT 83
19910: PUSH
19911: LD_INT 5
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: ST_TO_ADDR
19919: GO 19922
19921: POP
19922: GO 19925
19924: POP
// end ;
19925: LD_VAR 0 3
19929: RET
// every 0 0$3 trigger RUSI_AUTA = 1 marked 299 do var pom1 ;
19930: LD_EXP 36
19934: PUSH
19935: LD_INT 1
19937: EQUAL
19938: IFFALSE 20275
19940: GO 19942
19942: DISABLE
19943: LD_INT 0
19945: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_weapon , ru_cargo_bay ] ] ) ;
19946: LD_ADDR_LOC 23
19950: PUSH
19951: LD_INT 22
19953: PUSH
19954: LD_EXP 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: EMPTY
19967: LIST
19968: PUSH
19969: LD_INT 34
19971: PUSH
19972: LD_INT 51
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: PPUSH
19984: CALL_OW 69
19988: ST_TO_ADDR
// if pom = 0 then
19989: LD_LOC 23
19993: PUSH
19994: LD_INT 0
19996: EQUAL
19997: IFFALSE 20009
// RUSI_AUTA = 0 else
19999: LD_ADDR_EXP 36
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
20007: GO 20275
// begin for i in pom do
20009: LD_ADDR_LOC 22
20013: PUSH
20014: LD_LOC 23
20018: PUSH
20019: FOR_IN
20020: IFFALSE 20272
// if not Carry ( i ) then
20022: LD_LOC 22
20026: PPUSH
20027: CALL_OW 281
20031: NOT
20032: IFFALSE 20066
// begin ComMoveXY ( i , 144 , 118 ) ;
20034: LD_LOC 22
20038: PPUSH
20039: LD_INT 144
20041: PPUSH
20042: LD_INT 118
20044: PPUSH
20045: CALL_OW 111
// AddComMoveXY ( i , 143 , 116 ) ;
20049: LD_LOC 22
20053: PPUSH
20054: LD_INT 143
20056: PPUSH
20057: LD_INT 116
20059: PPUSH
20060: CALL_OW 171
// end else
20064: GO 20270
// begin ComMoveXY ( i , GetX ( R_depot ) , GetY ( R_depot ) ) ;
20066: LD_LOC 22
20070: PPUSH
20071: LD_LOC 28
20075: PPUSH
20076: CALL_OW 250
20080: PPUSH
20081: LD_LOC 28
20085: PPUSH
20086: CALL_OW 251
20090: PPUSH
20091: CALL_OW 111
// wait ( 0 0$2 ) ;
20095: LD_INT 70
20097: PPUSH
20098: CALL_OW 67
// pom1 = FilterAllUnits ( [ [ f_side , Rusi ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20102: LD_ADDR_VAR 0 1
20106: PUSH
20107: LD_INT 22
20109: PUSH
20110: LD_EXP 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: LD_INT 30
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 30
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: ST_TO_ADDR
// if pom1 > 0 then
20156: LD_VAR 0 1
20160: PUSH
20161: LD_INT 0
20163: GREATER
20164: IFFALSE 20270
// begin pom1 = pom1 [ 1 ] ;
20166: LD_ADDR_VAR 0 1
20170: PUSH
20171: LD_VAR 0 1
20175: PUSH
20176: LD_INT 1
20178: ARRAY
20179: ST_TO_ADDR
// AddResourceType ( GetBase ( pom1 ) , mat_siberit , GetCargo ( i , mat_siberit ) ) ;
20180: LD_VAR 0 1
20184: PPUSH
20185: CALL_OW 274
20189: PPUSH
20190: LD_INT 3
20192: PPUSH
20193: LD_LOC 22
20197: PPUSH
20198: LD_INT 3
20200: PPUSH
20201: CALL_OW 289
20205: PPUSH
20206: CALL_OW 276
// AddResourceType ( GetBase ( pom1 ) , mat_oil , GetCargo ( i , mat_oil ) ) ;
20210: LD_VAR 0 1
20214: PPUSH
20215: CALL_OW 274
20219: PPUSH
20220: LD_INT 2
20222: PPUSH
20223: LD_LOC 22
20227: PPUSH
20228: LD_INT 2
20230: PPUSH
20231: CALL_OW 289
20235: PPUSH
20236: CALL_OW 276
// SetCargo ( i , mat_siberit , 0 ) ;
20240: LD_LOC 22
20244: PPUSH
20245: LD_INT 3
20247: PPUSH
20248: LD_INT 0
20250: PPUSH
20251: CALL_OW 290
// SetCargo ( i , mat_oil , 0 ) ;
20255: LD_LOC 22
20259: PPUSH
20260: LD_INT 2
20262: PPUSH
20263: LD_INT 0
20265: PPUSH
20266: CALL_OW 290
// end ; end ;
20270: GO 20019
20272: POP
20273: POP
// enable ;
20274: ENABLE
// end ; end ;
20275: PPOPN 1
20277: END
// every 0 0$5 trigger RUSI_AUTA = 1 do
20278: LD_EXP 36
20282: PUSH
20283: LD_INT 1
20285: EQUAL
20286: IFFALSE 20386
20288: GO 20290
20290: DISABLE
// begin pom = FilterUnitsInArea ( Seber , [ [ f_side , Rusi ] , [ f_and ] , [ f_weapon , ru_cargo_bay ] ] ) ;
20291: LD_ADDR_LOC 23
20295: PUSH
20296: LD_INT 16
20298: PPUSH
20299: LD_INT 22
20301: PUSH
20302: LD_EXP 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: EMPTY
20315: LIST
20316: PUSH
20317: LD_INT 34
20319: PUSH
20320: LD_INT 51
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: PPUSH
20332: CALL_OW 70
20336: ST_TO_ADDR
// if pom > 0 then
20337: LD_LOC 23
20341: PUSH
20342: LD_INT 0
20344: GREATER
20345: IFFALSE 20385
// begin for i in pom do
20347: LD_ADDR_LOC 22
20351: PUSH
20352: LD_LOC 23
20356: PUSH
20357: FOR_IN
20358: IFFALSE 20383
// if not Carry ( i ) then
20360: LD_LOC 22
20364: PPUSH
20365: CALL_OW 281
20369: NOT
20370: IFFALSE 20381
// RemoveUnit ( i ) ;
20372: LD_LOC 22
20376: PPUSH
20377: CALL_OW 64
20381: GO 20357
20383: POP
20384: POP
// end ; enable ;
20385: ENABLE
// end ;
20386: END
// every 0 0$17 marked 241 do
20387: GO 20389
20389: DISABLE
// begin wait ( wait2 [ difficulty ] ) ;
20390: LD_EXP 66
20394: PUSH
20395: LD_OWVAR 67
20399: ARRAY
20400: PPUSH
20401: CALL_OW 67
// if GetSide ( R_factory ) <> Rusi then
20405: LD_LOC 31
20409: PPUSH
20410: CALL_OW 255
20414: PUSH
20415: LD_EXP 2
20419: NONEQUAL
20420: IFFALSE 20424
// exit ;
20422: GO 20518
// rus_cheat_source ( 200 , 50 , 50 ) ;
20424: LD_INT 200
20426: PPUSH
20427: LD_INT 50
20429: PPUSH
20430: LD_INT 50
20432: PPUSH
20433: CALL 13991 0 3
// for i := 1 to pocaut [ difficulty ] do
20437: LD_ADDR_LOC 22
20441: PUSH
20442: DOUBLE
20443: LD_INT 1
20445: DEC
20446: ST_TO_ADDR
20447: LD_EXP 65
20451: PUSH
20452: LD_OWVAR 67
20456: ARRAY
20457: PUSH
20458: FOR_TO
20459: IFFALSE 20492
// begin AddComConstruct ( R_factory , ru_heavy_tracked , engine_siberite , control_computer , zbranrusi [ difficulty ] ) ;
20461: LD_LOC 31
20465: PPUSH
20466: LD_INT 24
20468: PPUSH
20469: LD_INT 3
20471: PPUSH
20472: LD_INT 3
20474: PPUSH
20475: LD_EXP 63
20479: PUSH
20480: LD_OWVAR 67
20484: ARRAY
20485: PPUSH
20486: CALL_OW 185
// end ;
20490: GO 20458
20492: POP
20493: POP
// AddComConstruct ( R_factory , ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ) ;
20494: LD_LOC 31
20498: PPUSH
20499: LD_INT 24
20501: PPUSH
20502: LD_INT 1
20504: PPUSH
20505: LD_INT 3
20507: PPUSH
20508: LD_INT 46
20510: PPUSH
20511: CALL_OW 185
// enable ( 242 ) ;
20515: LD_INT 242
20517: ENABLE_MARKED
// end ;
20518: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_control , control_computer ] ] ) = pocaut [ difficulty ] + 1 marked 242 do
20519: LD_INT 22
20521: PUSH
20522: LD_EXP 2
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: EMPTY
20535: LIST
20536: PUSH
20537: LD_INT 33
20539: PUSH
20540: LD_INT 3
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: PPUSH
20552: CALL_OW 69
20556: PUSH
20557: LD_EXP 65
20561: PUSH
20562: LD_OWVAR 67
20566: ARRAY
20567: PUSH
20568: LD_INT 1
20570: PLUS
20571: EQUAL
20572: IFFALSE 20905
20574: GO 20576
20576: DISABLE
// begin UTOK := FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_control , control_computer ] ] ) ;
20577: LD_ADDR_LOC 44
20581: PUSH
20582: LD_INT 22
20584: PUSH
20585: LD_EXP 2
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: PUSH
20600: LD_INT 33
20602: PUSH
20603: LD_INT 3
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: PPUSH
20615: CALL_OW 69
20619: ST_TO_ADDR
// atway := GetAttackWay ;
20620: LD_ADDR_LOC 45
20624: PUSH
20625: CALL 20906 0 0
20629: ST_TO_ADDR
// for i in atway do
20630: LD_ADDR_LOC 22
20634: PUSH
20635: LD_LOC 45
20639: PUSH
20640: FOR_IN
20641: IFFALSE 20672
// AddComAgressiveMove ( UTOK , i [ 1 ] , i [ 2 ] ) ;
20643: LD_LOC 44
20647: PPUSH
20648: LD_LOC 22
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: PPUSH
20657: LD_LOC 22
20661: PUSH
20662: LD_INT 2
20664: ARRAY
20665: PPUSH
20666: CALL_OW 174
20670: GO 20640
20672: POP
20673: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_type , unit_building ] ] ) ;
20674: LD_ADDR_LOC 23
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_EXP 3
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: EMPTY
20695: LIST
20696: PUSH
20697: LD_INT 21
20699: PUSH
20700: LD_INT 3
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: LIST
20711: PPUSH
20712: CALL_OW 69
20716: ST_TO_ADDR
// if pom > 0 then
20717: LD_LOC 23
20721: PUSH
20722: LD_INT 0
20724: GREATER
20725: IFFALSE 20764
// AddComAgressiveMove ( UTOK , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
20727: LD_LOC 44
20731: PPUSH
20732: LD_LOC 23
20736: PUSH
20737: LD_INT 1
20739: ARRAY
20740: PPUSH
20741: CALL_OW 250
20745: PPUSH
20746: LD_LOC 23
20750: PUSH
20751: LD_INT 1
20753: ARRAY
20754: PPUSH
20755: CALL_OW 251
20759: PPUSH
20760: CALL_OW 174
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20764: LD_ADDR_LOC 23
20768: PUSH
20769: LD_INT 22
20771: PUSH
20772: LD_EXP 3
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: LD_INT 21
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 21
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PPUSH
20813: CALL_OW 69
20817: ST_TO_ADDR
// if pom > 0 then
20818: LD_LOC 23
20822: PUSH
20823: LD_INT 0
20825: GREATER
20826: IFFALSE 20889
// begin AddComAttackUnit ( UTOK , pom [ 1 ] ) ;
20828: LD_LOC 44
20832: PPUSH
20833: LD_LOC 23
20837: PUSH
20838: LD_INT 1
20840: ARRAY
20841: PPUSH
20842: CALL_OW 175
// AddComAgressiveMove ( UTOK , GetX ( JMM ) , GetY ( JMM ) ) ;
20846: LD_LOC 44
20850: PPUSH
20851: LD_EXP 42
20855: PPUSH
20856: CALL_OW 250
20860: PPUSH
20861: LD_EXP 42
20865: PPUSH
20866: CALL_OW 251
20870: PPUSH
20871: CALL_OW 174
// AddComAttackUnit ( UTOK , JMM ) ;
20875: LD_LOC 44
20879: PPUSH
20880: LD_EXP 42
20884: PPUSH
20885: CALL_OW 175
// end ; Dial := 4 ;
20889: LD_ADDR_EXP 40
20893: PUSH
20894: LD_INT 4
20896: ST_TO_ADDR
// PRU_ATTACK = 3 ;
20897: LD_ADDR_EXP 37
20901: PUSH
20902: LD_INT 3
20904: ST_TO_ADDR
// end ;
20905: END
// function GetAttackWay ; begin
20906: LD_INT 0
20908: PPUSH
// pomnah := Rand ( 1 , 4 ) ;
20909: LD_ADDR_LOC 46
20913: PUSH
20914: LD_INT 1
20916: PPUSH
20917: LD_INT 4
20919: PPUSH
20920: CALL_OW 12
20924: ST_TO_ADDR
// case nah of 1 , 2 :
20925: LD_EXP 35
20929: PUSH
20930: LD_INT 1
20932: DOUBLE
20933: EQUAL
20934: IFTRUE 20944
20936: LD_INT 2
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 21244
20944: POP
// case pomnah of 1 :
20945: LD_LOC 46
20949: PUSH
20950: LD_INT 1
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 21067
20958: POP
// pom = [ [ 123 , 83 ] , [ 95 , 102 ] , [ 72 , 99 ] , [ 56 , 78 ] , [ 66 , 55 ] , [ 81 , 49 ] , [ 92 , 47 ] , [ 101 , 47 ] , [ 106 , 37 ] ] ; 2 :
20959: LD_ADDR_LOC 23
20963: PUSH
20964: LD_INT 123
20966: PUSH
20967: LD_INT 83
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 95
20976: PUSH
20977: LD_INT 102
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 72
20986: PUSH
20987: LD_INT 99
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 56
20996: PUSH
20997: LD_INT 78
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 66
21006: PUSH
21007: LD_INT 55
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 81
21016: PUSH
21017: LD_INT 49
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 92
21026: PUSH
21027: LD_INT 47
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 101
21036: PUSH
21037: LD_INT 47
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 106
21046: PUSH
21047: LD_INT 37
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: ST_TO_ADDR
21065: GO 21242
21067: LD_INT 2
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21162
21075: POP
// pom = [ [ 123 , 83 ] , [ 95 , 102 ] , [ 78 , 61 ] , [ 78 , 49 ] , [ 90 , 46 ] , [ 103 , 45 ] , [ 108 , 35 ] ] ; 3 , 4 :
21076: LD_ADDR_LOC 23
21080: PUSH
21081: LD_INT 123
21083: PUSH
21084: LD_INT 83
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 95
21093: PUSH
21094: LD_INT 102
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 78
21103: PUSH
21104: LD_INT 61
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 78
21113: PUSH
21114: LD_INT 49
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 90
21123: PUSH
21124: LD_INT 46
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 103
21133: PUSH
21134: LD_INT 45
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 108
21143: PUSH
21144: LD_INT 35
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: ST_TO_ADDR
21160: GO 21242
21162: LD_INT 3
21164: DOUBLE
21165: EQUAL
21166: IFTRUE 21176
21168: LD_INT 4
21170: DOUBLE
21171: EQUAL
21172: IFTRUE 21176
21174: GO 21241
21176: POP
// pom = [ [ 146 , 65 ] , [ 137 , 42 ] , [ 127 , 21 ] , [ 112 , 16 ] , [ 106 , 25 ] ] ; end ; 3 :
21177: LD_ADDR_LOC 23
21181: PUSH
21182: LD_INT 146
21184: PUSH
21185: LD_INT 65
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 137
21194: PUSH
21195: LD_INT 42
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 127
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 112
21214: PUSH
21215: LD_INT 16
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 106
21224: PUSH
21225: LD_INT 25
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: ST_TO_ADDR
21239: GO 21242
21241: POP
21242: GO 22039
21244: LD_INT 3
21246: DOUBLE
21247: EQUAL
21248: IFTRUE 21252
21250: GO 21619
21252: POP
// case pomnah of 1 :
21253: LD_LOC 46
21257: PUSH
21258: LD_INT 1
21260: DOUBLE
21261: EQUAL
21262: IFTRUE 21266
21264: GO 21364
21266: POP
// pom = [ [ 71 , 102 ] , [ 57 , 81 ] , [ 66 , 67 ] , [ 66 , 55 ] , [ 81 , 49 ] , [ 92 , 47 ] , [ 101 , 47 ] , [ 106 , 37 ] ] ; 2 :
21267: LD_ADDR_LOC 23
21271: PUSH
21272: LD_INT 71
21274: PUSH
21275: LD_INT 102
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 57
21284: PUSH
21285: LD_INT 81
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 66
21294: PUSH
21295: LD_INT 67
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 66
21304: PUSH
21305: LD_INT 55
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 81
21314: PUSH
21315: LD_INT 49
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 92
21324: PUSH
21325: LD_INT 47
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 101
21334: PUSH
21335: LD_INT 47
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 106
21344: PUSH
21345: LD_INT 37
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
21362: GO 21617
21364: LD_INT 2
21366: DOUBLE
21367: EQUAL
21368: IFTRUE 21372
21370: GO 21437
21372: POP
// pom = [ [ 78 , 61 ] , [ 78 , 49 ] , [ 90 , 46 ] , [ 103 , 45 ] , [ 108 , 35 ] ] ; 3 :
21373: LD_ADDR_LOC 23
21377: PUSH
21378: LD_INT 78
21380: PUSH
21381: LD_INT 61
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 78
21390: PUSH
21391: LD_INT 49
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 90
21400: PUSH
21401: LD_INT 46
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 103
21410: PUSH
21411: LD_INT 45
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 108
21420: PUSH
21421: LD_INT 35
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: ST_TO_ADDR
21435: GO 21617
21437: LD_INT 3
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 21521
21445: POP
// pom = [ [ 121 , 82 ] , [ 143 , 67 ] , [ 143 , 69 ] , [ 122 , 66 ] , [ 116 , 52 ] , [ 107 , 35 ] ] ; 4 :
21446: LD_ADDR_LOC 23
21450: PUSH
21451: LD_INT 121
21453: PUSH
21454: LD_INT 82
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 143
21463: PUSH
21464: LD_INT 67
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 143
21473: PUSH
21474: LD_INT 69
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 122
21483: PUSH
21484: LD_INT 66
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 116
21493: PUSH
21494: LD_INT 52
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 107
21503: PUSH
21504: LD_INT 35
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: ST_TO_ADDR
21519: GO 21617
21521: LD_INT 4
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21616
21529: POP
// pom = [ [ 121 , 82 ] , [ 143 , 67 ] , [ 146 , 65 ] , [ 137 , 42 ] , [ 127 , 21 ] , [ 112 , 16 ] , [ 106 , 25 ] ] ; end ; 4 :
21530: LD_ADDR_LOC 23
21534: PUSH
21535: LD_INT 121
21537: PUSH
21538: LD_INT 82
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 143
21547: PUSH
21548: LD_INT 67
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 146
21557: PUSH
21558: LD_INT 65
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 137
21567: PUSH
21568: LD_INT 42
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 127
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 112
21587: PUSH
21588: LD_INT 16
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 106
21597: PUSH
21598: LD_INT 25
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: ST_TO_ADDR
21614: GO 21617
21616: POP
21617: GO 22039
21619: LD_INT 4
21621: DOUBLE
21622: EQUAL
21623: IFTRUE 21627
21625: GO 22038
21627: POP
// case pomnah of 1 :
21628: LD_LOC 46
21632: PUSH
21633: LD_INT 1
21635: DOUBLE
21636: EQUAL
21637: IFTRUE 21641
21639: GO 21706
21641: POP
// pom = [ [ 66 , 55 ] , [ 81 , 49 ] , [ 92 , 47 ] , [ 101 , 47 ] , [ 106 , 37 ] ] ; 2 :
21642: LD_ADDR_LOC 23
21646: PUSH
21647: LD_INT 66
21649: PUSH
21650: LD_INT 55
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 81
21659: PUSH
21660: LD_INT 49
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 92
21669: PUSH
21670: LD_INT 47
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 101
21679: PUSH
21680: LD_INT 47
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 106
21689: PUSH
21690: LD_INT 37
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: ST_TO_ADDR
21704: GO 22036
21706: LD_INT 2
21708: DOUBLE
21709: EQUAL
21710: IFTRUE 21714
21712: GO 21801
21714: POP
// pom = [ [ 70 , 99 ] , [ 97 , 94 ] , [ 78 , 61 ] , [ 78 , 49 ] , [ 90 , 46 ] , [ 103 , 45 ] , [ 108 , 35 ] ] ; 3 :
21715: LD_ADDR_LOC 23
21719: PUSH
21720: LD_INT 70
21722: PUSH
21723: LD_INT 99
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 97
21732: PUSH
21733: LD_INT 94
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 78
21742: PUSH
21743: LD_INT 61
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 78
21752: PUSH
21753: LD_INT 49
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 90
21762: PUSH
21763: LD_INT 46
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 103
21772: PUSH
21773: LD_INT 45
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 108
21782: PUSH
21783: LD_INT 35
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: ST_TO_ADDR
21799: GO 22036
21801: LD_INT 3
21803: DOUBLE
21804: EQUAL
21805: IFTRUE 21809
21807: GO 21907
21809: POP
// pom = [ [ 74 , 99 ] , [ 107 , 95 ] , [ 126 , 79 ] , [ 142 , 73 ] , [ 144 , 68 ] , [ 122 , 66 ] , [ 116 , 52 ] , [ 107 , 35 ] ] ; 4 :
21810: LD_ADDR_LOC 23
21814: PUSH
21815: LD_INT 74
21817: PUSH
21818: LD_INT 99
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 107
21827: PUSH
21828: LD_INT 95
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 126
21837: PUSH
21838: LD_INT 79
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 142
21847: PUSH
21848: LD_INT 73
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 144
21857: PUSH
21858: LD_INT 68
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 122
21867: PUSH
21868: LD_INT 66
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 116
21877: PUSH
21878: LD_INT 52
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 107
21887: PUSH
21888: LD_INT 35
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: ST_TO_ADDR
21905: GO 22036
21907: LD_INT 4
21909: DOUBLE
21910: EQUAL
21911: IFTRUE 21915
21913: GO 22035
21915: POP
// pom = [ [ 74 , 99 ] , [ 107 , 95 ] , [ 126 , 79 ] , [ 142 , 73 ] , [ 144 , 68 ] , [ 146 , 65 ] , [ 137 , 42 ] , [ 127 , 21 ] , [ 112 , 16 ] , [ 106 , 25 ] ] ; end ; end ;
21916: LD_ADDR_LOC 23
21920: PUSH
21921: LD_INT 74
21923: PUSH
21924: LD_INT 99
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 107
21933: PUSH
21934: LD_INT 95
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 126
21943: PUSH
21944: LD_INT 79
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 142
21953: PUSH
21954: LD_INT 73
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 144
21963: PUSH
21964: LD_INT 68
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 146
21973: PUSH
21974: LD_INT 65
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 137
21983: PUSH
21984: LD_INT 42
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 127
21993: PUSH
21994: LD_INT 21
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 112
22003: PUSH
22004: LD_INT 16
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 106
22013: PUSH
22014: LD_INT 25
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: ST_TO_ADDR
22033: GO 22036
22035: POP
22036: GO 22039
22038: POP
// result := pom ;
22039: LD_ADDR_VAR 0 1
22043: PUSH
22044: LD_LOC 23
22048: ST_TO_ADDR
// end ;
22049: LD_VAR 0 1
22053: RET
// every 0 0$1 do var zona ;
22054: GO 22056
22056: DISABLE
22057: LD_INT 0
22059: PPUSH
// begin case nah of 1 , 2 :
22060: LD_EXP 35
22064: PUSH
22065: LD_INT 1
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22079
22071: LD_INT 2
22073: DOUBLE
22074: EQUAL
22075: IFTRUE 22079
22077: GO 22090
22079: POP
// zona = RZ1 ; 3 :
22080: LD_ADDR_VAR 0 1
22084: PUSH
22085: LD_INT 8
22087: ST_TO_ADDR
22088: GO 22129
22090: LD_INT 3
22092: DOUBLE
22093: EQUAL
22094: IFTRUE 22098
22096: GO 22109
22098: POP
// zona = RZ2 ; 4 :
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: LD_INT 9
22106: ST_TO_ADDR
22107: GO 22129
22109: LD_INT 4
22111: DOUBLE
22112: EQUAL
22113: IFTRUE 22117
22115: GO 22128
22117: POP
// zona = RZ3 ; end ;
22118: LD_ADDR_VAR 0 1
22122: PUSH
22123: LD_INT 10
22125: ST_TO_ADDR
22126: GO 22129
22128: POP
// if FilterUnitsInArea ( zona , [ [ f_side , Rusi ] , [ f_control , control_computer ] ] ) > 1 then
22129: LD_VAR 0 1
22133: PPUSH
22134: LD_INT 22
22136: PUSH
22137: LD_EXP 2
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 33
22148: PUSH
22149: LD_INT 3
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 70
22164: PUSH
22165: LD_INT 1
22167: GREATER
22168: IFFALSE 22182
// begin wait ( 0 0$45 ) ;
22170: LD_INT 1575
22172: PPUSH
22173: CALL_OW 67
// enable ( 244 ) ;
22177: LD_INT 244
22179: ENABLE_MARKED
// end else
22180: GO 22183
// enable ;
22182: ENABLE
// end ;
22183: PPOPN 1
22185: END
// every 1 1$0 marked 244 do
22186: GO 22188
22188: DISABLE
// begin wait ( Rand ( 1 , kutoku [ difficulty ] ) ) ;
22189: LD_INT 1
22191: PPUSH
22192: LD_EXP 67
22196: PUSH
22197: LD_OWVAR 67
22201: ARRAY
22202: PPUSH
22203: CALL_OW 12
22207: PPUSH
22208: CALL_OW 67
// if GetSide ( R_factory ) <> Rusi then
22212: LD_LOC 31
22216: PPUSH
22217: CALL_OW 255
22221: PUSH
22222: LD_EXP 2
22226: NONEQUAL
22227: IFFALSE 22231
// exit ;
22229: GO 22388
// rus_cheat_source ( 300 , 150 , 70 ) ;
22231: LD_INT 300
22233: PPUSH
22234: LD_INT 150
22236: PPUSH
22237: LD_INT 70
22239: PPUSH
22240: CALL 13991 0 3
// if Prob ( 50 ) then
22244: LD_INT 50
22246: PPUSH
22247: CALL_OW 13
22251: IFFALSE 22279
// nahodne_tanku := Rand ( 0 , ntanku [ difficulty ] ) else
22253: LD_ADDR_LOC 47
22257: PUSH
22258: LD_INT 0
22260: PPUSH
22261: LD_EXP 68
22265: PUSH
22266: LD_OWVAR 67
22270: ARRAY
22271: PPUSH
22272: CALL_OW 12
22276: ST_TO_ADDR
22277: GO 22287
// nahodne_tanku := 0 ;
22279: LD_ADDR_LOC 47
22283: PUSH
22284: LD_INT 0
22286: ST_TO_ADDR
// if Prob ( 33 ) then
22287: LD_INT 33
22289: PPUSH
22290: CALL_OW 13
22294: IFFALSE 22306
// vojaci := true else
22296: LD_ADDR_LOC 48
22300: PUSH
22301: LD_INT 1
22303: ST_TO_ADDR
22304: GO 22314
// vojaci = false ;
22306: LD_ADDR_LOC 48
22310: PUSH
22311: LD_INT 0
22313: ST_TO_ADDR
// for i := 1 to pocaut [ difficulty ] + nahodne_tanku do
22314: LD_ADDR_LOC 22
22318: PUSH
22319: DOUBLE
22320: LD_INT 1
22322: DEC
22323: ST_TO_ADDR
22324: LD_EXP 65
22328: PUSH
22329: LD_OWVAR 67
22333: ARRAY
22334: PUSH
22335: LD_LOC 47
22339: PLUS
22340: PUSH
22341: FOR_TO
22342: IFFALSE 22375
// begin AddComConstruct ( R_factory , ru_heavy_tracked , engine_siberite , control_computer , zbranrusi [ difficulty ] ) ;
22344: LD_LOC 31
22348: PPUSH
22349: LD_INT 24
22351: PPUSH
22352: LD_INT 3
22354: PPUSH
22355: LD_INT 3
22357: PPUSH
22358: LD_EXP 63
22362: PUSH
22363: LD_OWVAR 67
22367: ARRAY
22368: PPUSH
22369: CALL_OW 185
// end ;
22373: GO 22341
22375: POP
22376: POP
// enable ( 245 ) ;
22377: LD_INT 245
22379: ENABLE_MARKED
// disable_me ( 244 ) ;
22380: LD_INT 244
22382: PPUSH
22383: CALL 22848 0 1
// enable ;
22387: ENABLE
// end ;
22388: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_control , control_computer ] ] ) = pocaut [ difficulty ] + nahodne_tanku marked 245 do
22389: LD_INT 22
22391: PUSH
22392: LD_EXP 2
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: EMPTY
22405: LIST
22406: PUSH
22407: LD_INT 33
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: PPUSH
22422: CALL_OW 69
22426: PUSH
22427: LD_EXP 65
22431: PUSH
22432: LD_OWVAR 67
22436: ARRAY
22437: PUSH
22438: LD_LOC 47
22442: PLUS
22443: EQUAL
22444: IFFALSE 22789
22446: GO 22448
22448: DISABLE
// begin UTOK := FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_control , control_computer ] ] ) ;
22449: LD_ADDR_LOC 44
22453: PUSH
22454: LD_INT 22
22456: PUSH
22457: LD_EXP 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: PUSH
22472: LD_INT 33
22474: PUSH
22475: LD_INT 3
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: PPUSH
22487: CALL_OW 69
22491: ST_TO_ADDR
// atway := GetAttackWay ;
22492: LD_ADDR_LOC 45
22496: PUSH
22497: CALL 20906 0 0
22501: ST_TO_ADDR
// for i in atway do
22502: LD_ADDR_LOC 22
22506: PUSH
22507: LD_LOC 45
22511: PUSH
22512: FOR_IN
22513: IFFALSE 22544
// AddComAgressiveMove ( UTOK , i [ 1 ] , i [ 2 ] ) ;
22515: LD_LOC 44
22519: PPUSH
22520: LD_LOC 22
22524: PUSH
22525: LD_INT 1
22527: ARRAY
22528: PPUSH
22529: LD_LOC 22
22533: PUSH
22534: LD_INT 2
22536: ARRAY
22537: PPUSH
22538: CALL_OW 174
22542: GO 22512
22544: POP
22545: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_type , unit_building ] ] ) ;
22546: LD_ADDR_LOC 23
22550: PUSH
22551: LD_INT 22
22553: PUSH
22554: LD_EXP 3
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 3
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: PPUSH
22584: CALL_OW 69
22588: ST_TO_ADDR
// if pom > 0 then
22589: LD_LOC 23
22593: PUSH
22594: LD_INT 0
22596: GREATER
22597: IFFALSE 22636
// AddComAgressiveMove ( UTOK , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
22599: LD_LOC 44
22603: PPUSH
22604: LD_LOC 23
22608: PUSH
22609: LD_INT 1
22611: ARRAY
22612: PPUSH
22613: CALL_OW 250
22617: PPUSH
22618: LD_LOC 23
22622: PUSH
22623: LD_INT 1
22625: ARRAY
22626: PPUSH
22627: CALL_OW 251
22631: PPUSH
22632: CALL_OW 174
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22636: LD_ADDR_LOC 23
22640: PUSH
22641: LD_INT 22
22643: PUSH
22644: LD_EXP 3
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 2
22655: PUSH
22656: LD_INT 21
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 21
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PPUSH
22685: CALL_OW 69
22689: ST_TO_ADDR
// if pom > 0 then
22690: LD_LOC 23
22694: PUSH
22695: LD_INT 0
22697: GREATER
22698: IFFALSE 22761
// begin AddComAttackUnit ( UTOK , pom [ 1 ] ) ;
22700: LD_LOC 44
22704: PPUSH
22705: LD_LOC 23
22709: PUSH
22710: LD_INT 1
22712: ARRAY
22713: PPUSH
22714: CALL_OW 175
// AddComAgressiveMove ( UTOK , GetX ( JMM ) , GetY ( JMM ) ) ;
22718: LD_LOC 44
22722: PPUSH
22723: LD_EXP 42
22727: PPUSH
22728: CALL_OW 250
22732: PPUSH
22733: LD_EXP 42
22737: PPUSH
22738: CALL_OW 251
22742: PPUSH
22743: CALL_OW 174
// AddComAttackUnit ( UTOK , JMM ) ;
22747: LD_LOC 44
22751: PPUSH
22752: LD_EXP 42
22756: PPUSH
22757: CALL_OW 175
// end ; disable_me ( 245 ) ;
22761: LD_INT 245
22763: PPUSH
22764: CALL 22848 0 1
// enable ( 246 ) ;
22768: LD_INT 246
22770: ENABLE_MARKED
// enable ( 247 ) ;
22771: LD_INT 247
22773: ENABLE_MARKED
// PRU_ATTACK := PRU_ATTACK + 1 ;
22774: LD_ADDR_EXP 37
22778: PUSH
22779: LD_EXP 37
22783: PUSH
22784: LD_INT 1
22786: PLUS
22787: ST_TO_ADDR
// enable ;
22788: ENABLE
// end ;
22789: END
// every 0 0$6 marked 246 do
22790: GO 22792
22792: DISABLE
// begin if FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_control , control_computer ] ] ) = 0 then
22793: LD_INT 22
22795: PUSH
22796: LD_EXP 2
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: PUSH
22811: LD_INT 33
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: PPUSH
22826: CALL_OW 69
22830: PUSH
22831: LD_INT 0
22833: EQUAL
22834: IFFALSE 22846
// begin enable ( 244 ) ;
22836: LD_INT 244
22838: ENABLE_MARKED
// disable_me ( 246 ) ;
22839: LD_INT 246
22841: PPUSH
22842: CALL 22848 0 1
// end ; enable ;
22846: ENABLE
// end ;
22847: END
// function disable_me ( ct ) ; begin
22848: LD_INT 0
22850: PPUSH
// wait ( 0 0$1 ) ;
22851: LD_INT 35
22853: PPUSH
22854: CALL_OW 67
// disable ( ct ) ;
22858: LD_VAR 0 1
22862: DISABLE_MARKED
// end ;
22863: LD_VAR 0 2
22867: RET
// every 0 0$3 marked 247 do var i ;
22868: GO 22870
22870: DISABLE
22871: LD_INT 0
22873: PPUSH
// begin if vojaci then
22874: LD_LOC 48
22878: IFFALSE 23312
// begin for i in CREATE_VOJACI_LIST do
22880: LD_ADDR_VAR 0 1
22884: PUSH
22885: LD_EXP 15
22889: PUSH
22890: FOR_IN
22891: IFFALSE 22910
// PlaceUnitArea ( i , RUEV , false ) ;
22893: LD_VAR 0 1
22897: PPUSH
22898: LD_INT 19
22900: PPUSH
22901: LD_INT 0
22903: PPUSH
22904: CALL_OW 49
22908: GO 22890
22910: POP
22911: POP
// VOJUTOK = FilterUnitsInArea ( RUEV , [ [ f_side , Rusi ] ] ) ;
22912: LD_ADDR_LOC 19
22916: PUSH
22917: LD_INT 19
22919: PPUSH
22920: LD_INT 22
22922: PUSH
22923: LD_EXP 2
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: EMPTY
22933: LIST
22934: PPUSH
22935: CALL_OW 70
22939: ST_TO_ADDR
// AddComAgressiveMove ( VOJUTOK , 122 , 40 ) ;
22940: LD_LOC 19
22944: PPUSH
22945: LD_INT 122
22947: PPUSH
22948: LD_INT 40
22950: PPUSH
22951: CALL_OW 174
// for i in VOJUTOK do
22955: LD_ADDR_VAR 0 1
22959: PUSH
22960: LD_LOC 19
22964: PUSH
22965: FOR_IN
22966: IFFALSE 23066
// begin AddComSpaceShift ( i , 109 , 40 ) ;
22968: LD_VAR 0 1
22972: PPUSH
22973: LD_INT 109
22975: PPUSH
22976: LD_INT 40
22978: PPUSH
22979: CALL_OW 213
// AddComSailEvent ( i , 666 ) ;
22983: LD_VAR 0 1
22987: PPUSH
22988: LD_INT 666
22990: PPUSH
22991: CALL_OW 224
// AddComTimeShift ( i , 107 , 41 ) ;
22995: LD_VAR 0 1
22999: PPUSH
23000: LD_INT 107
23002: PPUSH
23003: LD_INT 41
23005: PPUSH
23006: CALL_OW 214
// AddComSailEvent ( i , 666 ) ;
23010: LD_VAR 0 1
23014: PPUSH
23015: LD_INT 666
23017: PPUSH
23018: CALL_OW 224
// AddComSpaceShift ( i , 110 , 30 ) ;
23022: LD_VAR 0 1
23026: PPUSH
23027: LD_INT 110
23029: PPUSH
23030: LD_INT 30
23032: PPUSH
23033: CALL_OW 213
// AddComSailEvent ( i , 666 ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_INT 666
23044: PPUSH
23045: CALL_OW 224
// wait ( 0 0$2 ) ;
23049: LD_INT 70
23051: PPUSH
23052: CALL_OW 67
// bazookaDialog = 1 ;
23056: LD_ADDR_EXP 12
23060: PUSH
23061: LD_INT 1
23063: ST_TO_ADDR
// end ;
23064: GO 22965
23066: POP
23067: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_type , unit_building ] ] ) ;
23068: LD_ADDR_LOC 23
23072: PUSH
23073: LD_INT 22
23075: PUSH
23076: LD_EXP 3
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: EMPTY
23089: LIST
23090: PUSH
23091: LD_INT 21
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: PPUSH
23106: CALL_OW 69
23110: ST_TO_ADDR
// if pom > 0 then
23111: LD_LOC 23
23115: PUSH
23116: LD_INT 0
23118: GREATER
23119: IFFALSE 23187
// for i in VOJUTOK do
23121: LD_ADDR_VAR 0 1
23125: PUSH
23126: LD_LOC 19
23130: PUSH
23131: FOR_IN
23132: IFFALSE 23185
// begin AddComSpaceShift ( i , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
23134: LD_VAR 0 1
23138: PPUSH
23139: LD_LOC 23
23143: PUSH
23144: LD_INT 1
23146: ARRAY
23147: PPUSH
23148: CALL_OW 250
23152: PPUSH
23153: LD_LOC 23
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PPUSH
23162: CALL_OW 251
23166: PPUSH
23167: CALL_OW 213
// AddComSailEvent ( i , 666 ) ;
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_INT 666
23178: PPUSH
23179: CALL_OW 224
// end ;
23183: GO 23131
23185: POP
23186: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23187: LD_ADDR_LOC 23
23191: PUSH
23192: LD_INT 22
23194: PUSH
23195: LD_EXP 3
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 21
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 21
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PPUSH
23236: CALL_OW 69
23240: ST_TO_ADDR
// if pom > 0 then
23241: LD_LOC 23
23245: PUSH
23246: LD_INT 0
23248: GREATER
23249: IFFALSE 23312
// begin AddComAttackUnit ( UTOK , pom [ 1 ] ) ;
23251: LD_LOC 44
23255: PPUSH
23256: LD_LOC 23
23260: PUSH
23261: LD_INT 1
23263: ARRAY
23264: PPUSH
23265: CALL_OW 175
// AddComAgressiveMove ( UTOK , GetX ( JMM ) , GetY ( JMM ) ) ;
23269: LD_LOC 44
23273: PPUSH
23274: LD_EXP 42
23278: PPUSH
23279: CALL_OW 250
23283: PPUSH
23284: LD_EXP 42
23288: PPUSH
23289: CALL_OW 251
23293: PPUSH
23294: CALL_OW 174
// AddComAttackUnit ( UTOK , JMM ) ;
23298: LD_LOC 44
23302: PPUSH
23303: LD_EXP 42
23307: PPUSH
23308: CALL_OW 175
// end ; end ; disable_me ( 247 ) ;
23312: LD_INT 247
23314: PPUSH
23315: CALL 22848 0 1
// enable ;
23319: ENABLE
// end ;
23320: PPOPN 1
23322: END
// every 0 0$10 marked 248 do
23323: GO 23325
23325: DISABLE
// begin if R_depot > 0 then
23326: LD_LOC 28
23330: PUSH
23331: LD_INT 0
23333: GREATER
23334: IFFALSE 23355
// if GetSide ( R_depot ) <> Rusi then
23336: LD_LOC 28
23340: PPUSH
23341: CALL_OW 255
23345: PUSH
23346: LD_EXP 2
23350: NONEQUAL
23351: IFFALSE 23355
// exit ;
23353: GO 23560
// pom = FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_class , class_engineer ] ] ) ;
23355: LD_ADDR_LOC 23
23359: PUSH
23360: LD_INT 22
23362: PUSH
23363: LD_EXP 2
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: PUSH
23378: LD_INT 25
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: PPUSH
23393: CALL_OW 69
23397: ST_TO_ADDR
// if pom = 0 then
23398: LD_LOC 23
23402: PUSH
23403: LD_INT 0
23405: EQUAL
23406: IFFALSE 23559
// begin radzio = radzio + 1 ;
23408: LD_ADDR_EXP 9
23412: PUSH
23413: LD_EXP 9
23417: PUSH
23418: LD_INT 1
23420: PLUS
23421: ST_TO_ADDR
// create_engineer ;
23422: CALL 7168 0 0
// pom = FilterAllUnits ( [ [ f_side , Rusi ] , [ f_and ] , [ f_class , class_engineer ] ] ) ;
23426: LD_ADDR_LOC 23
23430: PUSH
23431: LD_INT 22
23433: PUSH
23434: LD_EXP 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: EMPTY
23447: LIST
23448: PUSH
23449: LD_INT 25
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: PPUSH
23464: CALL_OW 69
23468: ST_TO_ADDR
// case nah of 1 , 2 :
23469: LD_EXP 35
23473: PUSH
23474: LD_INT 1
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23488
23480: LD_INT 2
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23488
23486: GO 23506
23488: POP
// ComAgressiveMove ( pom , 145 , 69 ) ; 3 :
23489: LD_LOC 23
23493: PPUSH
23494: LD_INT 145
23496: PPUSH
23497: LD_INT 69
23499: PPUSH
23500: CALL_OW 114
23504: GO 23559
23506: LD_INT 3
23508: DOUBLE
23509: EQUAL
23510: IFTRUE 23514
23512: GO 23532
23514: POP
// ComAgressiveMove ( pom , 52 , 81 ) ; 4 :
23515: LD_LOC 23
23519: PPUSH
23520: LD_INT 52
23522: PPUSH
23523: LD_INT 81
23525: PPUSH
23526: CALL_OW 114
23530: GO 23559
23532: LD_INT 4
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23558
23540: POP
// ComAgressiveMove ( pom , 93 , 99 ) ; end ;
23541: LD_LOC 23
23545: PPUSH
23546: LD_INT 93
23548: PPUSH
23549: LD_INT 99
23551: PPUSH
23552: CALL_OW 114
23556: GO 23559
23558: POP
// end ; enable ;
23559: ENABLE
// end ;
23560: END
// every 0 0$01 trigger radzio >= 20 do
23561: LD_EXP 9
23565: PUSH
23566: LD_INT 20
23568: GREATEREQUAL
23569: IFFALSE 23577
23571: GO 23573
23573: DISABLE
// begin disable ( 248 ) ;
23574: LD_INT 248
23576: DISABLE_MARKED
// end ;
23577: END
// every 0 0$1 marked 249 do
23578: GO 23580
23580: DISABLE
// begin SetXYS ( nah , 15 ) ;
23581: LD_EXP 35
23585: PPUSH
23586: LD_INT 15
23588: PPUSH
23589: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_ext_siberium , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
23593: LD_LOC 26
23597: PUSH
23598: LD_INT 1
23600: ARRAY
23601: PPUSH
23602: LD_INT 21
23604: PPUSH
23605: LD_LOC 43
23609: PUSH
23610: LD_INT 1
23612: ARRAY
23613: PPUSH
23614: LD_LOC 43
23618: PUSH
23619: LD_INT 2
23621: ARRAY
23622: PPUSH
23623: LD_LOC 43
23627: PUSH
23628: LD_INT 3
23630: ARRAY
23631: PPUSH
23632: CALL_OW 205
// wait ( 0 0$5 ) ;
23636: LD_INT 175
23638: PPUSH
23639: CALL_OW 67
// enable ( 250 ) ;
23643: LD_INT 250
23645: ENABLE_MARKED
// end ;
23646: END
// every 0 0$5 marked 250 do
23647: GO 23649
23649: DISABLE
// begin pom = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_and ] , [ f_btype , b_ext_siberium ] ] ) ;
23650: LD_ADDR_LOC 23
23654: PUSH
23655: LD_LOC 21
23659: PPUSH
23660: LD_INT 22
23662: PUSH
23663: LD_EXP 2
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: PUSH
23678: LD_INT 30
23680: PUSH
23681: LD_INT 21
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: PPUSH
23693: CALL_OW 70
23697: ST_TO_ADDR
// if pom = 0 then
23698: LD_LOC 23
23702: PUSH
23703: LD_INT 0
23705: EQUAL
23706: IFFALSE 23766
// begin SetXYS ( nah , 15 ) ;
23708: LD_EXP 35
23712: PPUSH
23713: LD_INT 15
23715: PPUSH
23716: CALL 18293 0 2
// AddComBuild ( staveci [ 1 ] , b_ext_computer , XYS [ 1 ] , XYS [ 2 ] , XYS [ 3 ] ) ;
23720: LD_LOC 26
23724: PUSH
23725: LD_INT 1
23727: ARRAY
23728: PPUSH
23729: LD_INT 24
23731: PPUSH
23732: LD_LOC 43
23736: PUSH
23737: LD_INT 1
23739: ARRAY
23740: PPUSH
23741: LD_LOC 43
23745: PUSH
23746: LD_INT 2
23748: ARRAY
23749: PPUSH
23750: LD_LOC 43
23754: PUSH
23755: LD_INT 3
23757: ARRAY
23758: PPUSH
23759: CALL_OW 205
// enable ;
23763: ENABLE
// end else
23764: GO 23780
// R_esib = pom [ 1 ] ;
23766: LD_ADDR_LOC 41
23770: PUSH
23771: LD_LOC 23
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: ST_TO_ADDR
// end ;
23780: END
// every 0 0$9 do
23781: GO 23783
23783: DISABLE
// begin pom = FilterUnitsInArea ( Base2 , [ [ f_side , Rusi ] ] ) ;
23784: LD_ADDR_LOC 23
23788: PUSH
23789: LD_INT 13
23791: PPUSH
23792: LD_INT 22
23794: PUSH
23795: LD_EXP 2
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: EMPTY
23805: LIST
23806: PPUSH
23807: CALL_OW 70
23811: ST_TO_ADDR
// for i in pom do
23812: LD_ADDR_LOC 22
23816: PUSH
23817: LD_LOC 23
23821: PUSH
23822: FOR_IN
23823: IFFALSE 23881
// if IsIdle ( i ) then
23825: LD_LOC 22
23829: PPUSH
23830: CALL_OW 316
23834: IFFALSE 23879
// begin pom1 = FilterAllUnits ( [ [ f_side , You ] ] ) ;
23836: LD_ADDR_LOC 24
23840: PUSH
23841: LD_INT 22
23843: PUSH
23844: LD_EXP 3
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: PPUSH
23856: CALL_OW 69
23860: ST_TO_ADDR
// ComAttackUnit ( i , pom1 [ 1 ] ) ;
23861: LD_LOC 22
23865: PPUSH
23866: LD_LOC 24
23870: PUSH
23871: LD_INT 1
23873: ARRAY
23874: PPUSH
23875: CALL_OW 115
// end ;
23879: GO 23822
23881: POP
23882: POP
// enable ;
23883: ENABLE
// end ;
23884: END
// every 0 0$6 do
23885: GO 23887
23887: DISABLE
// begin pom = FilterUnitsInArea ( Base2 , [ [ f_side , Rusi ] , [ f_and ] , [ f_control , control_computer ] ] ) ;
23888: LD_ADDR_LOC 23
23892: PUSH
23893: LD_INT 13
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_EXP 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: PUSH
23914: LD_INT 33
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: PPUSH
23929: CALL_OW 70
23933: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] ] ) ;
23934: LD_ADDR_LOC 24
23938: PUSH
23939: LD_INT 22
23941: PUSH
23942: LD_EXP 3
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: PPUSH
23954: CALL_OW 69
23958: ST_TO_ADDR
// for i in pom do
23959: LD_ADDR_LOC 22
23963: PUSH
23964: LD_LOC 23
23968: PUSH
23969: FOR_IN
23970: IFFALSE 24013
// if IsIdle ( i ) then
23972: LD_LOC 22
23976: PPUSH
23977: CALL_OW 316
23981: IFFALSE 24011
// ComAttackUnit ( i , pom1 [ Rand ( 1 , pom1 ) ] ) ;
23983: LD_LOC 22
23987: PPUSH
23988: LD_LOC 24
23992: PUSH
23993: LD_INT 1
23995: PPUSH
23996: LD_LOC 24
24000: PPUSH
24001: CALL_OW 12
24005: ARRAY
24006: PPUSH
24007: CALL_OW 115
24011: GO 23969
24013: POP
24014: POP
// enable ;
24015: ENABLE
// end ;
24016: END
// every 0 0$34 trigger EMR do var pom ;
24017: LD_EXP 38
24021: IFFALSE 24820
24023: GO 24025
24025: DISABLE
24026: LD_INT 0
24028: PPUSH
// begin for i in RUSSIAN_AFTER_END_ATTACK_LIST1 do
24029: LD_ADDR_LOC 22
24033: PUSH
24034: LD_EXP 20
24038: PUSH
24039: FOR_IN
24040: IFFALSE 24059
// PlaceUnitArea ( i , EnterAM , false ) ;
24042: LD_LOC 22
24046: PPUSH
24047: LD_INT 3
24049: PPUSH
24050: LD_INT 0
24052: PPUSH
24053: CALL_OW 49
24057: GO 24039
24059: POP
24060: POP
// McMove ( 1 , RUSSIAN_AFTER_END_ATTACK_LIST1 , [ [ 43 , 48 ] , [ 69 , 49 ] , [ 92 , 43 ] , [ 105 , 37 ] ] , [ mc_move_waitwp , mc_move_agressive , mc_move_dontcapture ] ) ;
24061: LD_INT 1
24063: PPUSH
24064: LD_EXP 20
24068: PPUSH
24069: LD_INT 43
24071: PUSH
24072: LD_INT 48
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 69
24081: PUSH
24082: LD_INT 49
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 92
24091: PUSH
24092: LD_INT 43
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 105
24101: PUSH
24102: LD_INT 37
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: PPUSH
24115: LD_INT 3
24117: PUSH
24118: LD_INT 6
24120: PUSH
24121: LD_INT 5
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: PPUSH
24129: CALL_OW 398
// wait ( timerusi [ difficulty ] ) ;
24133: LD_EXP 60
24137: PUSH
24138: LD_OWVAR 67
24142: ARRAY
24143: PPUSH
24144: CALL_OW 67
// for i in RUSSIAN_AFTER_END_ATTACK_LIST2 do
24148: LD_ADDR_LOC 22
24152: PUSH
24153: LD_EXP 21
24157: PUSH
24158: FOR_IN
24159: IFFALSE 24205
// if nah <> 4 then
24161: LD_EXP 35
24165: PUSH
24166: LD_INT 4
24168: NONEQUAL
24169: IFFALSE 24188
// PlaceUnitArea ( i , RE2 , false ) else
24171: LD_LOC 22
24175: PPUSH
24176: LD_INT 5
24178: PPUSH
24179: LD_INT 0
24181: PPUSH
24182: CALL_OW 49
24186: GO 24203
// PlaceUnitArea ( i , REME , false ) ;
24188: LD_LOC 22
24192: PPUSH
24193: LD_INT 30
24195: PPUSH
24196: LD_INT 0
24198: PPUSH
24199: CALL_OW 49
24203: GO 24158
24205: POP
24206: POP
// if nah <> 4 then
24207: LD_EXP 35
24211: PUSH
24212: LD_INT 4
24214: NONEQUAL
24215: IFFALSE 24305
// McMove ( 1 , RUSSIAN_AFTER_END_ATTACK_LIST2 , [ [ 95 , 93 ] , [ 80 , 64 ] , [ 77 , 45 ] , [ 92 , 42 ] , [ 104 , 33 ] ] , [ [ mc_move_waitwp , mc_move_agressive , mc_move_dontcapture ] ] ) else
24217: LD_INT 1
24219: PPUSH
24220: LD_EXP 21
24224: PPUSH
24225: LD_INT 95
24227: PUSH
24228: LD_INT 93
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 80
24237: PUSH
24238: LD_INT 64
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 77
24247: PUSH
24248: LD_INT 45
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 92
24257: PUSH
24258: LD_INT 42
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 104
24267: PUSH
24268: LD_INT 33
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PPUSH
24282: LD_INT 3
24284: PUSH
24285: LD_INT 6
24287: PUSH
24288: LD_INT 5
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: PUSH
24296: EMPTY
24297: LIST
24298: PPUSH
24299: CALL_OW 398
24303: GO 24409
// McMove ( 1 , RUSSIAN_AFTER_END_ATTACK_LIST2 , [ [ 59 , 86 ] , [ 92 , 96 ] , [ 83 , 71 ] , [ 77 , 43 ] , [ 93 , 43 ] , [ 95 , 41 ] , [ 108 , 31 ] , [ 99 , 26 ] ] , [ ] ) ;
24305: LD_INT 1
24307: PPUSH
24308: LD_EXP 21
24312: PPUSH
24313: LD_INT 59
24315: PUSH
24316: LD_INT 86
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 92
24325: PUSH
24326: LD_INT 96
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 83
24335: PUSH
24336: LD_INT 71
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 77
24345: PUSH
24346: LD_INT 43
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 93
24355: PUSH
24356: LD_INT 43
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 95
24365: PUSH
24366: LD_INT 41
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 108
24375: PUSH
24376: LD_INT 31
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 99
24385: PUSH
24386: LD_INT 26
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: PPUSH
24403: EMPTY
24404: PPUSH
24405: CALL_OW 398
// wait ( 2 2$0 ) ;
24409: LD_INT 4200
24411: PPUSH
24412: CALL_OW 67
// wait ( wait2 [ difficulty ] ) ;
24416: LD_EXP 66
24420: PUSH
24421: LD_OWVAR 67
24425: ARRAY
24426: PPUSH
24427: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , Rusi ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
24431: LD_ADDR_VAR 0 1
24435: PUSH
24436: LD_INT 22
24438: PUSH
24439: LD_EXP 2
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 21
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PPUSH
24480: CALL_OW 69
24484: ST_TO_ADDR
// if pom > 0 then
24485: LD_VAR 0 1
24489: PUSH
24490: LD_INT 0
24492: GREATER
24493: IFFALSE 24541
// McMove ( 1 , pom , [ [ 120 , 93 ] , [ 108 , 39 ] ] , [ mc_move_waitwp , mc_move_agressive ] ) ;
24495: LD_INT 1
24497: PPUSH
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_INT 120
24505: PUSH
24506: LD_INT 93
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 108
24515: PUSH
24516: LD_INT 39
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: LD_INT 3
24529: PUSH
24530: LD_INT 6
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PPUSH
24537: CALL_OW 398
// wait ( total_final [ difficulty ] ) ;
24541: LD_EXP 82
24545: PUSH
24546: LD_OWVAR 67
24550: ARRAY
24551: PPUSH
24552: CALL_OW 67
// for i in RUSSIAN_AFTER_END_ATTACK_LIST_FINAL do
24556: LD_ADDR_LOC 22
24560: PUSH
24561: LD_EXP 22
24565: PUSH
24566: FOR_IN
24567: IFFALSE 24613
// if nah <> 4 then
24569: LD_EXP 35
24573: PUSH
24574: LD_INT 4
24576: NONEQUAL
24577: IFFALSE 24596
// PlaceUnitArea ( i , RE2 , false ) else
24579: LD_LOC 22
24583: PPUSH
24584: LD_INT 5
24586: PPUSH
24587: LD_INT 0
24589: PPUSH
24590: CALL_OW 49
24594: GO 24611
// PlaceUnitArea ( i , REME , false ) ;
24596: LD_LOC 22
24600: PPUSH
24601: LD_INT 30
24603: PPUSH
24604: LD_INT 0
24606: PPUSH
24607: CALL_OW 49
24611: GO 24566
24613: POP
24614: POP
// if nah <> 4 then
24615: LD_EXP 35
24619: PUSH
24620: LD_INT 4
24622: NONEQUAL
24623: IFFALSE 24713
// McMove ( 1 , RUSSIAN_AFTER_END_ATTACK_LIST_FINAL , [ [ 95 , 93 ] , [ 80 , 64 ] , [ 77 , 45 ] , [ 92 , 42 ] , [ 104 , 33 ] ] , [ [ mc_move_waitwp , mc_move_agressive , mc_move_dontcapture ] ] ) else
24625: LD_INT 1
24627: PPUSH
24628: LD_EXP 22
24632: PPUSH
24633: LD_INT 95
24635: PUSH
24636: LD_INT 93
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 80
24645: PUSH
24646: LD_INT 64
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 77
24655: PUSH
24656: LD_INT 45
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 92
24665: PUSH
24666: LD_INT 42
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 104
24675: PUSH
24676: LD_INT 33
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: PPUSH
24690: LD_INT 3
24692: PUSH
24693: LD_INT 6
24695: PUSH
24696: LD_INT 5
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: PPUSH
24707: CALL_OW 398
24711: GO 24817
// McMove ( 1 , RUSSIAN_AFTER_END_ATTACK_LIST_FINAL , [ [ 59 , 86 ] , [ 92 , 96 ] , [ 83 , 71 ] , [ 77 , 43 ] , [ 93 , 43 ] , [ 95 , 41 ] , [ 108 , 31 ] , [ 99 , 26 ] ] , [ ] ) ;
24713: LD_INT 1
24715: PPUSH
24716: LD_EXP 22
24720: PPUSH
24721: LD_INT 59
24723: PUSH
24724: LD_INT 86
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 92
24733: PUSH
24734: LD_INT 96
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 83
24743: PUSH
24744: LD_INT 71
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 77
24753: PUSH
24754: LD_INT 43
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 93
24763: PUSH
24764: LD_INT 43
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 95
24773: PUSH
24774: LD_INT 41
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 108
24783: PUSH
24784: LD_INT 31
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 99
24793: PUSH
24794: LD_INT 26
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: PPUSH
24811: EMPTY
24812: PPUSH
24813: CALL_OW 398
// enable ( 255 ) ;
24817: LD_INT 255
24819: ENABLE_MARKED
// end ;
24820: PPOPN 1
24822: END
// every 0 0$5 marked 255 do var i ; var AT ;
24823: GO 24825
24825: DISABLE
24826: LD_INT 0
24828: PPUSH
24829: PPUSH
// begin wait ( total_final [ difficulty ] ) ;
24830: LD_EXP 82
24834: PUSH
24835: LD_OWVAR 67
24839: ARRAY
24840: PPUSH
24841: CALL_OW 67
// AT = C_N_A ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: CALL 10298 0 0
24854: ST_TO_ADDR
// for i in AT do
24855: LD_ADDR_VAR 0 1
24859: PUSH
24860: LD_VAR 0 2
24864: PUSH
24865: FOR_IN
24866: IFFALSE 24912
// if nah <> 4 then
24868: LD_EXP 35
24872: PUSH
24873: LD_INT 4
24875: NONEQUAL
24876: IFFALSE 24895
// PlaceUnitArea ( i , RE2 , false ) else
24878: LD_VAR 0 1
24882: PPUSH
24883: LD_INT 5
24885: PPUSH
24886: LD_INT 0
24888: PPUSH
24889: CALL_OW 49
24893: GO 24910
// PlaceUnitArea ( i , REME , false ) ;
24895: LD_VAR 0 1
24899: PPUSH
24900: LD_INT 30
24902: PPUSH
24903: LD_INT 0
24905: PPUSH
24906: CALL_OW 49
24910: GO 24865
24912: POP
24913: POP
// if nah <> 4 then
24914: LD_EXP 35
24918: PUSH
24919: LD_INT 4
24921: NONEQUAL
24922: IFFALSE 25012
// McMove ( 1 , AT , [ [ 95 , 93 ] , [ 80 , 64 ] , [ 77 , 45 ] , [ 92 , 42 ] , [ 104 , 33 ] ] , [ [ mc_move_waitwp , mc_move_agressive , mc_move_dontcapture ] ] ) else
24924: LD_INT 1
24926: PPUSH
24927: LD_VAR 0 2
24931: PPUSH
24932: LD_INT 95
24934: PUSH
24935: LD_INT 93
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 80
24944: PUSH
24945: LD_INT 64
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 77
24954: PUSH
24955: LD_INT 45
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 92
24964: PUSH
24965: LD_INT 42
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 104
24974: PUSH
24975: LD_INT 33
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: PPUSH
24989: LD_INT 3
24991: PUSH
24992: LD_INT 6
24994: PUSH
24995: LD_INT 5
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: PPUSH
25006: CALL_OW 398
25010: GO 25120
// McMove ( 1 , AT , [ [ 59 , 86 ] , [ 92 , 96 ] , [ 83 , 71 ] , [ 77 , 43 ] , [ 93 , 43 ] , [ 95 , 41 ] , [ 108 , 31 ] , [ 99 , 26 ] ] , [ mc_move_agressive ] ) ;
25012: LD_INT 1
25014: PPUSH
25015: LD_VAR 0 2
25019: PPUSH
25020: LD_INT 59
25022: PUSH
25023: LD_INT 86
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 92
25032: PUSH
25033: LD_INT 96
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 83
25042: PUSH
25043: LD_INT 71
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 77
25052: PUSH
25053: LD_INT 43
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 93
25062: PUSH
25063: LD_INT 43
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 95
25072: PUSH
25073: LD_INT 41
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 108
25082: PUSH
25083: LD_INT 31
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 99
25092: PUSH
25093: LD_INT 26
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PPUSH
25110: LD_INT 6
25112: PUSH
25113: EMPTY
25114: LIST
25115: PPUSH
25116: CALL_OW 398
// wait ( 3 3$0 ) ;
25120: LD_INT 6300
25122: PPUSH
25123: CALL_OW 67
// enable ;
25127: ENABLE
// end ;
25128: PPOPN 2
25130: END
// on SpontaneousTeleported ( un ) do begin uvidel_spontalni_teleportaci ;
25131: CALL 32529 0 0
// disable ;
25135: DISABLE
// end ;
25136: PPOPN 1
25138: END
// export function posli_ruske_bazukery ; var baz ; var i ; begin
25139: LD_INT 0
25141: PPUSH
25142: PPUSH
25143: PPUSH
// baz = create_ruske_bazukery ;
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: CALL 9861 0 0
25153: ST_TO_ADDR
// for i in baz do
25154: LD_ADDR_VAR 0 3
25158: PUSH
25159: LD_VAR 0 2
25163: PUSH
25164: FOR_IN
25165: IFFALSE 25184
// PlaceUnitArea ( i , ABaz , false ) ;
25167: LD_VAR 0 3
25171: PPUSH
25172: LD_INT 34
25174: PPUSH
25175: LD_INT 0
25177: PPUSH
25178: CALL_OW 49
25182: GO 25164
25184: POP
25185: POP
// ComAgressiveMove ( baz , 118 , 40 ) ;
25186: LD_VAR 0 2
25190: PPUSH
25191: LD_INT 118
25193: PPUSH
25194: LD_INT 40
25196: PPUSH
25197: CALL_OW 114
// end ;
25201: LD_VAR 0 1
25205: RET
// every 0 0$2 trigger FilterUnitsInArea ( BAZUTOK , [ [ f_or , [ f_side , Rusi2 ] , [ f_side , Rusi ] ] , [ f_class , class_bazooker ] ] ) > 0 do var pom , pom1 ; var i ; var cile , cil ;
25206: LD_INT 33
25208: PPUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 22
25214: PUSH
25215: LD_EXP 5
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 22
25226: PUSH
25227: LD_EXP 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 25
25243: PUSH
25244: LD_INT 9
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PPUSH
25255: CALL_OW 70
25259: PUSH
25260: LD_INT 0
25262: GREATER
25263: IFFALSE 25678
25265: GO 25267
25267: DISABLE
25268: LD_INT 0
25270: PPUSH
25271: PPUSH
25272: PPUSH
25273: PPUSH
25274: PPUSH
// begin pom1 = FilterUnitsInArea ( BAZUTOK , [ [ f_or , [ f_side , Rusi2 ] , [ f_side , Rusi ] ] , [ f_class , class_bazooker ] ] ) ;
25275: LD_ADDR_VAR 0 2
25279: PUSH
25280: LD_INT 33
25282: PPUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 22
25288: PUSH
25289: LD_EXP 5
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 22
25300: PUSH
25301: LD_EXP 2
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 25
25317: PUSH
25318: LD_INT 9
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PPUSH
25329: CALL_OW 70
25333: ST_TO_ADDR
// pom = [ ] ;
25334: LD_ADDR_VAR 0 1
25338: PUSH
25339: EMPTY
25340: ST_TO_ADDR
// for i in pom1 do
25341: LD_ADDR_VAR 0 3
25345: PUSH
25346: LD_VAR 0 2
25350: PUSH
25351: FOR_IN
25352: IFFALSE 25383
// if Attacks ( i ) then
25354: LD_VAR 0 3
25358: PPUSH
25359: CALL_OW 320
25363: IFFALSE 25381
// pom = pom ^ i ;
25365: LD_ADDR_VAR 0 1
25369: PUSH
25370: LD_VAR 0 1
25374: PUSH
25375: LD_VAR 0 3
25379: ADD
25380: ST_TO_ADDR
25381: GO 25351
25383: POP
25384: POP
// for i in pom do
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_VAR 0 1
25394: PUSH
25395: FOR_IN
25396: IFFALSE 25675
// if Prob ( 75 ) then
25398: LD_INT 75
25400: PPUSH
25401: CALL_OW 13
25405: IFFALSE 25673
// begin debug_strings = [ specialni bazookersky utok ] ;
25407: LD_ADDR_OWVAR 48
25411: PUSH
25412: LD_STRING specialni bazookersky utok
25414: PUSH
25415: EMPTY
25416: LIST
25417: ST_TO_ADDR
// msg ( specialni bazookersky utok ) ;
25418: LD_STRING specialni bazookersky utok
25420: PPUSH
25421: CALL_OW 100
// cile = FilterUnitsInArea ( Base2 , [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25425: LD_ADDR_VAR 0 4
25429: PUSH
25430: LD_INT 13
25432: PPUSH
25433: LD_INT 22
25435: PUSH
25436: LD_EXP 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: LD_INT 21
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 21
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PPUSH
25477: CALL_OW 70
25481: ST_TO_ADDR
// if cile = 0 then
25482: LD_VAR 0 4
25486: PUSH
25487: LD_INT 0
25489: EQUAL
25490: IFFALSE 25498
// exit else
25492: POP
25493: POP
25494: GO 25678
25496: GO 25557
// cil = [ cile [ Rand ( 1 , cile + 0 ) ] , NearestUnitToUnit ( cile , i ) ] [ Rand ( 1 , 2 ) ] ;
25498: LD_ADDR_VAR 0 5
25502: PUSH
25503: LD_VAR 0 4
25507: PUSH
25508: LD_INT 1
25510: PPUSH
25511: LD_VAR 0 4
25515: PUSH
25516: LD_INT 0
25518: PLUS
25519: PPUSH
25520: CALL_OW 12
25524: ARRAY
25525: PUSH
25526: LD_VAR 0 4
25530: PPUSH
25531: LD_VAR 0 3
25535: PPUSH
25536: CALL_OW 74
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PPUSH
25548: LD_INT 2
25550: PPUSH
25551: CALL_OW 12
25555: ARRAY
25556: ST_TO_ADDR
// case Rand ( 1 , 2 ) of 1 :
25557: LD_INT 1
25559: PPUSH
25560: LD_INT 2
25562: PPUSH
25563: CALL_OW 12
25567: PUSH
25568: LD_INT 1
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25620
25576: POP
// begin ComSpaceShift ( i , GetX ( cil ) , GetY ( cil ) ) ;
25577: LD_VAR 0 3
25581: PPUSH
25582: LD_VAR 0 5
25586: PPUSH
25587: CALL_OW 250
25591: PPUSH
25592: LD_VAR 0 5
25596: PPUSH
25597: CALL_OW 251
25601: PPUSH
25602: CALL_OW 153
// AddComSailEvent ( i , 666 ) ;
25606: LD_VAR 0 3
25610: PPUSH
25611: LD_INT 666
25613: PPUSH
25614: CALL_OW 224
// end ; 2 :
25618: GO 25673
25620: LD_INT 2
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25672
25628: POP
// begin ComTimeShift ( i , GetX ( cil ) , GetY ( cil ) ) ;
25629: LD_VAR 0 3
25633: PPUSH
25634: LD_VAR 0 5
25638: PPUSH
25639: CALL_OW 250
25643: PPUSH
25644: LD_VAR 0 5
25648: PPUSH
25649: CALL_OW 251
25653: PPUSH
25654: CALL_OW 154
// AddComSailEvent ( i , 666 ) ;
25658: LD_VAR 0 3
25662: PPUSH
25663: LD_INT 666
25665: PPUSH
25666: CALL_OW 224
// end ; end ;
25670: GO 25673
25672: POP
// end ;
25673: GO 25395
25675: POP
25676: POP
// enable ;
25677: ENABLE
// end ;
25678: PPOPN 5
25680: END
// every 0 0$7 marked 298 do var pomdoktori ;
25681: GO 25683
25683: DISABLE
25684: LD_INT 0
25686: PPUSH
// begin pomdoktori = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_class , class_scientistic ] ] ) ;
25687: LD_ADDR_VAR 0 1
25691: PUSH
25692: LD_LOC 21
25696: PPUSH
25697: LD_INT 22
25699: PUSH
25700: LD_EXP 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 25
25711: PUSH
25712: LD_INT 4
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 70
25727: ST_TO_ADDR
// ComEnterUnit ( pomdoktori , R_lab ) ;
25728: LD_VAR 0 1
25732: PPUSH
25733: LD_LOC 33
25737: PPUSH
25738: CALL_OW 120
// enable ( 296 ) ;
25742: LD_INT 296
25744: ENABLE_MARKED
// end ;
25745: PPOPN 1
25747: END
// every 0 0$19 marked 297 do var pomvojcli ;
25748: GO 25750
25750: DISABLE
25751: LD_INT 0
25753: PPUSH
// begin pomvojcli = FilterUnitsInArea ( zo , [ [ f_side , Rusi ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] ] ) ;
25754: LD_ADDR_VAR 0 1
25758: PUSH
25759: LD_LOC 21
25763: PPUSH
25764: LD_INT 22
25766: PUSH
25767: LD_EXP 2
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 25
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 25
25791: PUSH
25792: LD_INT 9
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PPUSH
25808: CALL_OW 70
25812: ST_TO_ADDR
// ComEnterUnit ( pomvojcli , R_arm ) ;
25813: LD_VAR 0 1
25817: PPUSH
25818: LD_LOC 38
25822: PPUSH
25823: CALL_OW 120
// end ;
25827: PPOPN 1
25829: END
// every 0 0$3 marked 296 do
25830: GO 25832
25832: DISABLE
// begin if GetSide ( R_lab ) <> Rusi then
25833: LD_LOC 33
25837: PPUSH
25838: CALL_OW 255
25842: PUSH
25843: LD_EXP 2
25847: NONEQUAL
25848: IFFALSE 25852
// exit ;
25850: GO 25897
// SetTech ( tech_Tech3 , Rusi , state_enabled ) ;
25852: LD_INT 50
25854: PPUSH
25855: LD_EXP 2
25859: PPUSH
25860: LD_INT 1
25862: PPUSH
25863: CALL_OW 322
// SetTechProgress ( tech_Tech3 , Rusi , 0 ) ;
25867: LD_INT 50
25869: PPUSH
25870: LD_EXP 2
25874: PPUSH
25875: LD_INT 0
25877: PPUSH
25878: CALL_OW 327
// ComResearch ( R_lab , tech_Tech3 ) ;
25882: LD_LOC 33
25886: PPUSH
25887: LD_INT 50
25889: PPUSH
25890: CALL_OW 124
// enable ( 295 ) ;
25894: LD_INT 295
25896: ENABLE_MARKED
// end ;
25897: END
// every 0 0$5 trigger GetTech ( tech_Tech3 , Rusi ) = state_researched marked 295 do
25898: LD_INT 50
25900: PPUSH
25901: LD_EXP 2
25905: PPUSH
25906: CALL_OW 321
25910: PUSH
25911: LD_INT 2
25913: EQUAL
25914: IFFALSE 25981
25916: GO 25918
25918: DISABLE
// begin if GetSide ( R_lab ) <> Rusi then
25919: LD_LOC 33
25923: PPUSH
25924: CALL_OW 255
25928: PUSH
25929: LD_EXP 2
25933: NONEQUAL
25934: IFFALSE 25938
// exit ;
25936: GO 25981
// SetTech ( tech_Tech3 , Rusi , state_enabled ) ;
25938: LD_INT 50
25940: PPUSH
25941: LD_EXP 2
25945: PPUSH
25946: LD_INT 1
25948: PPUSH
25949: CALL_OW 322
// SetTechProgress ( tech_Tech3 , Rusi , 0 ) ;
25953: LD_INT 50
25955: PPUSH
25956: LD_EXP 2
25960: PPUSH
25961: LD_INT 0
25963: PPUSH
25964: CALL_OW 327
// ComResearch ( R_lab , tech_Tech3 ) ;
25968: LD_LOC 33
25972: PPUSH
25973: LD_INT 50
25975: PPUSH
25976: CALL_OW 124
// enable ;
25980: ENABLE
// end ;
25981: END
// every 0 0$1 do var i , pom ; var BASE_cesta ;
25982: GO 25984
25984: DISABLE
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
25989: PPUSH
// begin while not dialog_u_zakladny_probehl do
25990: LD_EXP 41
25994: NOT
25995: IFFALSE 26006
// wait ( 0 0$3 ) ;
25997: LD_INT 105
25999: PPUSH
26000: CALL_OW 67
26004: GO 25990
// wait ( cas_na_cekani_pred_nultym_utokem [ difficulty ] ) ;
26006: LD_EXP 76
26010: PUSH
26011: LD_OWVAR 67
26015: ARRAY
26016: PPUSH
26017: CALL_OW 67
// for i in RUSKY_UTOK_0_LIST do
26021: LD_ADDR_VAR 0 1
26025: PUSH
26026: LD_EXP 19
26030: PUSH
26031: FOR_IN
26032: IFFALSE 26051
// PlaceUnitArea ( i , Rutok0 , false ) ;
26034: LD_VAR 0 1
26038: PPUSH
26039: LD_INT 29
26041: PPUSH
26042: LD_INT 0
26044: PPUSH
26045: CALL_OW 49
26049: GO 26031
26051: POP
26052: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26053: LD_ADDR_VAR 0 2
26057: PUSH
26058: LD_INT 22
26060: PUSH
26061: LD_EXP 3
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 30
26075: PUSH
26076: LD_INT 0
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 30
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PPUSH
26102: CALL_OW 69
26106: ST_TO_ADDR
// if pom > 0 then
26107: LD_VAR 0 2
26111: PUSH
26112: LD_INT 0
26114: GREATER
26115: IFFALSE 26156
// BASE_cesta = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
26117: LD_ADDR_VAR 0 3
26121: PUSH
26122: LD_VAR 0 2
26126: PUSH
26127: LD_INT 1
26129: ARRAY
26130: PPUSH
26131: CALL_OW 250
26135: PUSH
26136: LD_VAR 0 2
26140: PUSH
26141: LD_INT 1
26143: ARRAY
26144: PPUSH
26145: CALL_OW 251
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: ST_TO_ADDR
26154: GO 26171
// BASE_cesta = [ 60 , 8 ] ;
26156: LD_ADDR_VAR 0 3
26160: PUSH
26161: LD_INT 60
26163: PUSH
26164: LD_INT 8
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// McMove ( 1 , RUSKY_UTOK_0_LIST , [ [ 65 , 66 ] , [ 89 , 70 ] , [ 111 , 78 ] , [ 115 , 67 ] , [ 120 , 62 ] , [ 110 , 41 ] , BASE ] , [ mc_move_agressive , mc_move_dontcapture , mc_move_waitwp ] ) ;
26171: LD_INT 1
26173: PPUSH
26174: LD_EXP 19
26178: PPUSH
26179: LD_INT 65
26181: PUSH
26182: LD_INT 66
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 89
26191: PUSH
26192: LD_INT 70
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 111
26201: PUSH
26202: LD_INT 78
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 115
26211: PUSH
26212: LD_INT 67
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 120
26221: PUSH
26222: LD_INT 62
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 110
26231: PUSH
26232: LD_INT 41
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 12
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: PPUSH
26251: LD_INT 6
26253: PUSH
26254: LD_INT 5
26256: PUSH
26257: LD_INT 3
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: PPUSH
26265: CALL_OW 398
// enable ( 240 ) ;
26269: LD_INT 240
26271: ENABLE_MARKED
// zpracuj_ruske_utoceni ( RUSKY_UTOK_0_LIST ) ;
26272: LD_EXP 19
26276: PPUSH
26277: CALL 27723 0 1
// end ;
26281: PPOPN 3
26283: END
// every 1 1$0 marked 240 do var sourad ; var baz ; var BASE_cesta ;
26284: GO 26286
26286: DISABLE
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
26291: PPUSH
// begin wait ( farusi [ difficulty ] ) ;
26292: LD_EXP 64
26296: PUSH
26297: LD_OWVAR 67
26301: ARRAY
26302: PPUSH
26303: CALL_OW 67
// for i in CREATE_RUSKY_ATTACK1_LIST do
26307: LD_ADDR_LOC 22
26311: PUSH
26312: LD_EXP 14
26316: PUSH
26317: FOR_IN
26318: IFFALSE 26337
// PlaceUnitArea ( i , RE3 , false ) ;
26320: LD_LOC 22
26324: PPUSH
26325: LD_INT 6
26327: PPUSH
26328: LD_INT 0
26330: PPUSH
26331: CALL_OW 49
26335: GO 26317
26337: POP
26338: POP
// RA1 := FilterUnitsInArea ( RE3 , [ [ f_side , Rusi ] ] ) ;
26339: LD_ADDR_LOC 27
26343: PUSH
26344: LD_INT 6
26346: PPUSH
26347: LD_INT 22
26349: PUSH
26350: LD_EXP 2
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: PPUSH
26362: CALL_OW 70
26366: ST_TO_ADDR
// if IsOK ( Ambase ) then
26367: LD_EXP 51
26371: PPUSH
26372: CALL_OW 302
26376: IFFALSE 26409
// sourad = [ GetX ( Ambase ) , GetY ( Ambase ) ] else
26378: LD_ADDR_VAR 0 1
26382: PUSH
26383: LD_EXP 51
26387: PPUSH
26388: CALL_OW 250
26392: PUSH
26393: LD_EXP 51
26397: PPUSH
26398: CALL_OW 251
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: ST_TO_ADDR
26407: GO 26424
// sourad = [ 99 , 30 ] ;
26409: LD_ADDR_VAR 0 1
26413: PUSH
26414: LD_INT 99
26416: PUSH
26417: LD_INT 30
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26424: LD_ADDR_LOC 23
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_EXP 3
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 30
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 30
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: ST_TO_ADDR
// if pom > 0 then
26478: LD_LOC 23
26482: PUSH
26483: LD_INT 0
26485: GREATER
26486: IFFALSE 26527
// BASE_cesta = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
26488: LD_ADDR_VAR 0 3
26492: PUSH
26493: LD_LOC 23
26497: PUSH
26498: LD_INT 1
26500: ARRAY
26501: PPUSH
26502: CALL_OW 250
26506: PUSH
26507: LD_LOC 23
26511: PUSH
26512: LD_INT 1
26514: ARRAY
26515: PPUSH
26516: CALL_OW 251
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: ST_TO_ADDR
26525: GO 26542
// BASE_cesta = [ 60 , 8 ] ;
26527: LD_ADDR_VAR 0 3
26531: PUSH
26532: LD_INT 60
26534: PUSH
26535: LD_INT 8
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: ST_TO_ADDR
// McMove ( 1 , RA1 , [ [ 95 , 98 ] , [ 77 , 54 ] , [ 85 , 45 ] , [ 93 , 45 ] , [ 106 , 42 ] , sourad , BASE_cesta ] , [ mc_move_dontcapture , mc_move_agressive ] ) ;
26542: LD_INT 1
26544: PPUSH
26545: LD_LOC 27
26549: PPUSH
26550: LD_INT 95
26552: PUSH
26553: LD_INT 98
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 77
26562: PUSH
26563: LD_INT 54
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 85
26572: PUSH
26573: LD_INT 45
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 93
26582: PUSH
26583: LD_INT 45
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 106
26592: PUSH
26593: LD_INT 42
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_VAR 0 1
26604: PUSH
26605: LD_VAR 0 3
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: PPUSH
26619: LD_INT 5
26621: PUSH
26622: LD_INT 6
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PPUSH
26629: CALL_OW 398
// wait ( wait_spec_baz [ difficulty ] ) ;
26633: LD_EXP 79
26637: PUSH
26638: LD_OWVAR 67
26642: ARRAY
26643: PPUSH
26644: CALL_OW 67
// posli_ruske_bazukery ;
26648: CALL 25139 0 0
// enable ( 251 ) ;
26652: LD_INT 251
26654: ENABLE_MARKED
// zpracuj_ruske_utoceni ( CREATE_RUSKY_ATTACK1_LIST ) ;
26655: LD_EXP 14
26659: PPUSH
26660: CALL 27723 0 1
// PRU_ATTACK = 1 ;
26664: LD_ADDR_EXP 37
26668: PUSH
26669: LD_INT 1
26671: ST_TO_ADDR
// end ;
26672: PPOPN 3
26674: END
// every 1 1$30 trigger PRU_ATTACK = 1 marked 251 do var sourad ; var BASE_cesta ;
26675: LD_EXP 37
26679: PUSH
26680: LD_INT 1
26682: EQUAL
26683: IFFALSE 27093
26685: GO 26687
26687: DISABLE
26688: LD_INT 0
26690: PPUSH
26691: PPUSH
// begin wait ( wait2new [ difficulty ] ) ;
26692: LD_EXP 69
26696: PUSH
26697: LD_OWVAR 67
26701: ARRAY
26702: PPUSH
26703: CALL_OW 67
// for i in CREATE_2_NEW_ATTACK_LIST do
26707: LD_ADDR_LOC 22
26711: PUSH
26712: LD_EXP 16
26716: PUSH
26717: FOR_IN
26718: IFFALSE 26749
// begin if not IsInUnit ( i ) then
26720: LD_LOC 22
26724: PPUSH
26725: CALL_OW 310
26729: NOT
26730: IFFALSE 26747
// PlaceUnitArea ( i , EnterAM , false ) ;
26732: LD_LOC 22
26736: PPUSH
26737: LD_INT 3
26739: PPUSH
26740: LD_INT 0
26742: PPUSH
26743: CALL_OW 49
// end ;
26747: GO 26717
26749: POP
26750: POP
// UTOK = FilterUnitsInArea ( EnterAM , [ [ f_side , Rusi ] ] ) ;
26751: LD_ADDR_LOC 44
26755: PUSH
26756: LD_INT 3
26758: PPUSH
26759: LD_INT 22
26761: PUSH
26762: LD_EXP 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: PPUSH
26774: CALL_OW 70
26778: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_type , unit_building ] ] ) ;
26779: LD_ADDR_LOC 23
26783: PUSH
26784: LD_INT 22
26786: PUSH
26787: LD_EXP 3
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: PUSH
26799: EMPTY
26800: LIST
26801: PUSH
26802: LD_INT 21
26804: PUSH
26805: LD_INT 3
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: ST_TO_ADDR
// if pom > 0 then
26822: LD_LOC 23
26826: PUSH
26827: LD_INT 0
26829: GREATER
26830: IFFALSE 26871
// sourad = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
26832: LD_ADDR_VAR 0 1
26836: PUSH
26837: LD_LOC 23
26841: PUSH
26842: LD_INT 1
26844: ARRAY
26845: PPUSH
26846: CALL_OW 250
26850: PUSH
26851: LD_LOC 23
26855: PUSH
26856: LD_INT 1
26858: ARRAY
26859: PPUSH
26860: CALL_OW 251
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: ST_TO_ADDR
26869: GO 26886
// sourad = [ 98 , 26 ] ;
26871: LD_ADDR_VAR 0 1
26875: PUSH
26876: LD_INT 98
26878: PUSH
26879: LD_INT 26
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26886: LD_ADDR_LOC 23
26890: PUSH
26891: LD_INT 22
26893: PUSH
26894: LD_EXP 3
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 30
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 30
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PPUSH
26935: CALL_OW 69
26939: ST_TO_ADDR
// if pom > 0 then
26940: LD_LOC 23
26944: PUSH
26945: LD_INT 0
26947: GREATER
26948: IFFALSE 26989
// BASE_cesta = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
26950: LD_ADDR_VAR 0 2
26954: PUSH
26955: LD_LOC 23
26959: PUSH
26960: LD_INT 1
26962: ARRAY
26963: PPUSH
26964: CALL_OW 250
26968: PUSH
26969: LD_LOC 23
26973: PUSH
26974: LD_INT 1
26976: ARRAY
26977: PPUSH
26978: CALL_OW 251
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: ST_TO_ADDR
26987: GO 27004
// BASE_cesta = [ 70 , 48 ] ;
26989: LD_ADDR_VAR 0 2
26993: PUSH
26994: LD_INT 70
26996: PUSH
26997: LD_INT 48
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// McMove ( 1 , UTOK , [ [ 52 , 51 ] , [ 80 , 46 ] , [ 99 , 48 ] , sourad , BASE_cesta ] , [ mc_move_dontcapture , mc_move_agressive ] ) ;
27004: LD_INT 1
27006: PPUSH
27007: LD_LOC 44
27011: PPUSH
27012: LD_INT 52
27014: PUSH
27015: LD_INT 51
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 80
27024: PUSH
27025: LD_INT 46
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 99
27034: PUSH
27035: LD_INT 48
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_VAR 0 1
27046: PUSH
27047: LD_VAR 0 2
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: PPUSH
27059: LD_INT 5
27061: PUSH
27062: LD_INT 6
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PPUSH
27069: CALL_OW 398
// PRU_Attack = 2 ;
27073: LD_ADDR_EXP 37
27077: PUSH
27078: LD_INT 2
27080: ST_TO_ADDR
// enable ( 289 ) ;
27081: LD_INT 289
27083: ENABLE_MARKED
// zpracuj_ruske_utoceni ( CREATE_2_NEW_ATTACK_LIST ) ;
27084: LD_EXP 16
27088: PPUSH
27089: CALL 27723 0 1
// end ;
27093: PPOPN 2
27095: END
// every 0 0$10 marked 289 do var BASE_cesta ;
27096: GO 27098
27098: DISABLE
27099: LD_INT 0
27101: PPUSH
// begin wait ( wait3new [ difficulty ] ) ;
27102: LD_EXP 77
27106: PUSH
27107: LD_OWVAR 67
27111: ARRAY
27112: PPUSH
27113: CALL_OW 67
// for i in CREATE_3_NEW_ATTACK_LIST do
27117: LD_ADDR_LOC 22
27121: PUSH
27122: LD_EXP 17
27126: PUSH
27127: FOR_IN
27128: IFFALSE 27147
// PlaceUnitArea ( i , EnterAM , false ) ;
27130: LD_LOC 22
27134: PPUSH
27135: LD_INT 3
27137: PPUSH
27138: LD_INT 0
27140: PPUSH
27141: CALL_OW 49
27145: GO 27127
27147: POP
27148: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27149: LD_ADDR_LOC 23
27153: PUSH
27154: LD_INT 22
27156: PUSH
27157: LD_EXP 3
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: LD_INT 30
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 30
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PPUSH
27198: CALL_OW 69
27202: ST_TO_ADDR
// if pom > 0 then
27203: LD_LOC 23
27207: PUSH
27208: LD_INT 0
27210: GREATER
27211: IFFALSE 27252
// BASE_cesta = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
27213: LD_ADDR_VAR 0 1
27217: PUSH
27218: LD_LOC 23
27222: PUSH
27223: LD_INT 1
27225: ARRAY
27226: PPUSH
27227: CALL_OW 250
27231: PUSH
27232: LD_LOC 23
27236: PUSH
27237: LD_INT 1
27239: ARRAY
27240: PPUSH
27241: CALL_OW 251
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: ST_TO_ADDR
27250: GO 27267
// BASE_cesta = [ 60 , 8 ] ;
27252: LD_ADDR_VAR 0 1
27256: PUSH
27257: LD_INT 60
27259: PUSH
27260: LD_INT 8
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: ST_TO_ADDR
// McMove ( 1 , CREATE_3_NEW_ATTACK_LIST , [ [ 56 , 51 ] , [ 81 , 44 ] , [ 100 , 29 ] , BASE_cesta ] , [ mc_move_agressive , mc_move_dontcapture , mc_move_waitwp ] ) ;
27267: LD_INT 1
27269: PPUSH
27270: LD_EXP 17
27274: PPUSH
27275: LD_INT 56
27277: PUSH
27278: LD_INT 51
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 81
27287: PUSH
27288: LD_INT 44
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 100
27297: PUSH
27298: LD_INT 29
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_VAR 0 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: PPUSH
27316: LD_INT 6
27318: PUSH
27319: LD_INT 5
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 398
// PRU_Attack = 3 ;
27334: LD_ADDR_EXP 37
27338: PUSH
27339: LD_INT 3
27341: ST_TO_ADDR
// enable ( 288 ) ;
27342: LD_INT 288
27344: ENABLE_MARKED
// zpracuj_ruske_utoceni ( CREATE_3_NEW_ATTACK_LIST ) ;
27345: LD_EXP 17
27349: PPUSH
27350: CALL 27723 0 1
// end ;
27354: PPOPN 1
27356: END
// every 0 0$17 trigger PRU_Attack = 3 marked 288 do var BASE_cesta ;
27357: LD_EXP 37
27361: PUSH
27362: LD_INT 3
27364: EQUAL
27365: IFFALSE 27613
27367: GO 27369
27369: DISABLE
27370: LD_INT 0
27372: PPUSH
// begin wait ( wait_bazooka_attack [ difficulty ] ) ;
27373: LD_EXP 78
27377: PUSH
27378: LD_OWVAR 67
27382: ARRAY
27383: PPUSH
27384: CALL_OW 67
// for i in CREATE_BAZOOKA_ATTACK_LIST do
27388: LD_ADDR_LOC 22
27392: PUSH
27393: LD_EXP 18
27397: PUSH
27398: FOR_IN
27399: IFFALSE 27418
// PlaceUnitArea ( i , RE2 , false ) ;
27401: LD_LOC 22
27405: PPUSH
27406: LD_INT 5
27408: PPUSH
27409: LD_INT 0
27411: PPUSH
27412: CALL_OW 49
27416: GO 27398
27418: POP
27419: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27420: LD_ADDR_LOC 23
27424: PUSH
27425: LD_INT 22
27427: PUSH
27428: LD_EXP 3
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 30
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 30
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: ST_TO_ADDR
// if pom > 0 then
27474: LD_LOC 23
27478: PUSH
27479: LD_INT 0
27481: GREATER
27482: IFFALSE 27523
// BASE_cesta = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
27484: LD_ADDR_VAR 0 1
27488: PUSH
27489: LD_LOC 23
27493: PUSH
27494: LD_INT 1
27496: ARRAY
27497: PPUSH
27498: CALL_OW 250
27502: PUSH
27503: LD_LOC 23
27507: PUSH
27508: LD_INT 1
27510: ARRAY
27511: PPUSH
27512: CALL_OW 251
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: ST_TO_ADDR
27521: GO 27538
// BASE_cesta = [ 63 , 6 ] ;
27523: LD_ADDR_VAR 0 1
27527: PUSH
27528: LD_INT 63
27530: PUSH
27531: LD_INT 6
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: ST_TO_ADDR
// bazmakro = McMove ( 1 , CREATE_BAZOOKA_ATTACK_LIST , [ [ 92 , 93 ] , [ 121 , 91 ] , [ 126 , 76 ] ] , [ mc_move_agressive , mc_move_dontcapture , mc_move_waitwp ] ) ;
27538: LD_ADDR_LOC 49
27542: PUSH
27543: LD_INT 1
27545: PPUSH
27546: LD_EXP 18
27550: PPUSH
27551: LD_INT 92
27553: PUSH
27554: LD_INT 93
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 121
27563: PUSH
27564: LD_INT 91
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 126
27573: PUSH
27574: LD_INT 76
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: PPUSH
27586: LD_INT 6
27588: PUSH
27589: LD_INT 5
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: PPUSH
27600: CALL_OW 398
27604: ST_TO_ADDR
// PRU_Attack = 4 ;
27605: LD_ADDR_EXP 37
27609: PUSH
27610: LD_INT 4
27612: ST_TO_ADDR
// end ;
27613: PPOPN 1
27615: END
// every 0 0$1 trigger PRU_Attack = 4 and FilterUnitsInArea ( bazooka_attack_test , [ [ f_side , Rusi ] , [ f_class , class_bazooker ] ] ) > 1 do
27616: LD_EXP 37
27620: PUSH
27621: LD_INT 4
27623: EQUAL
27624: PUSH
27625: LD_INT 41
27627: PPUSH
27628: LD_INT 22
27630: PUSH
27631: LD_EXP 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 25
27642: PUSH
27643: LD_INT 9
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PPUSH
27654: CALL_OW 70
27658: PUSH
27659: LD_INT 1
27661: GREATER
27662: AND
27663: IFFALSE 27722
27665: GO 27667
27667: DISABLE
// begin KillMc ( bazmakro ) ;
27668: LD_LOC 49
27672: PPUSH
27673: CALL_OW 387
// ComAgressiveMove ( CREATE_BAZOOKA_ATTACK_LIST , 129 , 70 ) ;
27677: LD_EXP 18
27681: PPUSH
27682: LD_INT 129
27684: PPUSH
27685: LD_INT 70
27687: PPUSH
27688: CALL_OW 114
// AddComAgressiveMove ( CREATE_BAZOOKA_ATTACK_LIST , 126 , 52 ) ;
27692: LD_EXP 18
27696: PPUSH
27697: LD_INT 126
27699: PPUSH
27700: LD_INT 52
27702: PPUSH
27703: CALL_OW 174
// AddComAgressiveMove ( CREATE_BAZOOKA_ATTACK_LIST , 110 , 36 ) ;
27707: LD_EXP 18
27711: PPUSH
27712: LD_INT 110
27714: PPUSH
27715: LD_INT 36
27717: PPUSH
27718: CALL_OW 174
// end ;
27722: END
// function zpracuj_ruske_utoceni ( jedn ) ; var j , pomj ; var i , pom ; var AIJ ; begin
27723: LD_INT 0
27725: PPUSH
27726: PPUSH
27727: PPUSH
27728: PPUSH
27729: PPUSH
27730: PPUSH
// j = jedn ;
27731: LD_ADDR_VAR 0 3
27735: PUSH
27736: LD_VAR 0 1
27740: ST_TO_ADDR
// while j <> 0 do
27741: LD_VAR 0 3
27745: PUSH
27746: LD_INT 0
27748: NONEQUAL
27749: IFFALSE 28038
// begin AIJ = [ ] ;
27751: LD_ADDR_VAR 0 7
27755: PUSH
27756: EMPTY
27757: ST_TO_ADDR
// for i in j do
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_VAR 0 3
27767: PUSH
27768: FOR_IN
27769: IFFALSE 27800
// if IsIdle ( i ) then
27771: LD_VAR 0 5
27775: PPUSH
27776: CALL_OW 316
27780: IFFALSE 27798
// AIJ = AIJ ^ i ;
27782: LD_ADDR_VAR 0 7
27786: PUSH
27787: LD_VAR 0 7
27791: PUSH
27792: LD_VAR 0 5
27796: ADD
27797: ST_TO_ADDR
27798: GO 27768
27800: POP
27801: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27802: LD_ADDR_VAR 0 6
27806: PUSH
27807: LD_INT 22
27809: PUSH
27810: LD_EXP 3
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 30
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 30
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PPUSH
27851: CALL_OW 69
27855: ST_TO_ADDR
// if pom > 0 then
27856: LD_VAR 0 6
27860: PUSH
27861: LD_INT 0
27863: GREATER
27864: IFFALSE 27964
// begin ComAgressiveMove ( AIJ , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
27866: LD_VAR 0 7
27870: PPUSH
27871: LD_VAR 0 6
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PPUSH
27880: CALL_OW 250
27884: PPUSH
27885: LD_VAR 0 6
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: CALL_OW 251
27898: PPUSH
27899: CALL_OW 114
// AddComAttackUnit ( AIJ , pom [ 1 ] ) ;
27903: LD_VAR 0 7
27907: PPUSH
27908: LD_VAR 0 6
27912: PUSH
27913: LD_INT 1
27915: ARRAY
27916: PPUSH
27917: CALL_OW 175
// AddComAgressiveMove ( AIJ , GetX ( JMM ) , GetY ( JMM ) ) ;
27921: LD_VAR 0 7
27925: PPUSH
27926: LD_EXP 42
27930: PPUSH
27931: CALL_OW 250
27935: PPUSH
27936: LD_EXP 42
27940: PPUSH
27941: CALL_OW 251
27945: PPUSH
27946: CALL_OW 174
// AddComAttackUnit ( AIJ , JMM ) ;
27950: LD_VAR 0 7
27954: PPUSH
27955: LD_EXP 42
27959: PPUSH
27960: CALL_OW 175
// end ; pomj = j ;
27964: LD_ADDR_VAR 0 4
27968: PUSH
27969: LD_VAR 0 3
27973: ST_TO_ADDR
// for i in j do
27974: LD_ADDR_VAR 0 5
27978: PUSH
27979: LD_VAR 0 3
27983: PUSH
27984: FOR_IN
27985: IFFALSE 28017
// if not IsOK ( i ) then
27987: LD_VAR 0 5
27991: PPUSH
27992: CALL_OW 302
27996: NOT
27997: IFFALSE 28015
// pomj = pomj diff i ;
27999: LD_ADDR_VAR 0 4
28003: PUSH
28004: LD_VAR 0 4
28008: PUSH
28009: LD_VAR 0 5
28013: DIFF
28014: ST_TO_ADDR
28015: GO 27984
28017: POP
28018: POP
// j = pomj ;
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_VAR 0 4
28028: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28029: LD_INT 35
28031: PPUSH
28032: CALL_OW 67
// end ;
28036: GO 27741
// end ; end_of_file
28038: LD_VAR 0 2
28042: RET
// var i ; var pom , pom1 , pom2 , pom3 , pom4 , pom5 ; var asol ; var cor_dial1 , cor_dial2 ; var disable_kecy1 ; var disable_kecy2 ; export Dial ; export dialog_u_zakladny_probehl ; var test_ukonceni_allowed ; every 0 0$0.1 do
28043: GO 28045
28045: DISABLE
// begin disable_kecy1 = false ;
28046: LD_ADDR_LOC 60
28050: PUSH
28051: LD_INT 0
28053: ST_TO_ADDR
// disable_kecy2 = false ;
28054: LD_ADDR_LOC 61
28058: PUSH
28059: LD_INT 0
28061: ST_TO_ADDR
// dialog_u_zakladny_probehl = false ;
28062: LD_ADDR_EXP 41
28066: PUSH
28067: LD_INT 0
28069: ST_TO_ADDR
// test_ukonceni_allowed = false ;
28070: LD_ADDR_LOC 62
28074: PUSH
28075: LD_INT 0
28077: ST_TO_ADDR
// cor_dial1 = false ;
28078: LD_ADDR_LOC 58
28082: PUSH
28083: LD_INT 0
28085: ST_TO_ADDR
// cor_dial2 = false ;
28086: LD_ADDR_LOC 59
28090: PUSH
28091: LD_INT 0
28093: ST_TO_ADDR
// for i := 1 to 8 do
28094: LD_ADDR_LOC 50
28098: PUSH
28099: DOUBLE
28100: LD_INT 1
28102: DEC
28103: ST_TO_ADDR
28104: LD_INT 8
28106: PUSH
28107: FOR_TO
28108: IFFALSE 28121
// disable ( 100 + i ) ;
28110: LD_INT 100
28112: PUSH
28113: LD_LOC 50
28117: PLUS
28118: DISABLE_MARKED
28119: GO 28107
28121: POP
28122: POP
// end ;
28123: END
// every 0 0$1 do
28124: GO 28126
28126: DISABLE
// begin Say ( Gary , D2-Gary-1 ) ;
28127: LD_EXP 44
28131: PPUSH
28132: LD_STRING D2-Gary-1
28134: PPUSH
28135: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
28139: LD_EXP 42
28143: PPUSH
28144: LD_STRING D2-JMM-1
28146: PPUSH
28147: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
28151: LD_EXP 44
28155: PPUSH
28156: LD_STRING D2-Gary-2
28158: PPUSH
28159: CALL_OW 88
// SaveForQuickRestart ;
28163: CALL_OW 22
// wait ( 0 0$1 ) ;
28167: LD_INT 35
28169: PPUSH
28170: CALL_OW 67
// ingame_video = false ;
28174: LD_ADDR_OWVAR 52
28178: PUSH
28179: LD_INT 0
28181: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
28182: LD_STRING M1
28184: PPUSH
28185: CALL_OW 337
// end ;
28189: END
// every 0 0$1 trigger Dial >= 1 do
28190: LD_EXP 40
28194: PUSH
28195: LD_INT 1
28197: GREATEREQUAL
28198: IFFALSE 28220
28200: GO 28202
28202: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
28203: LD_STRING M1a
28205: PPUSH
28206: CALL_OW 337
// wait ( 10 10$0 ) ;
28210: LD_INT 21000
28212: PPUSH
28213: CALL_OW 67
// enable ( 104 ) ;
28217: LD_INT 104
28219: ENABLE_MARKED
// end ;
28220: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 0 do var i , x , y ;
28221: LD_INT 22
28223: PUSH
28224: LD_EXP 3
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 30
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PPUSH
28247: CALL_OW 69
28251: PUSH
28252: LD_INT 0
28254: GREATER
28255: IFFALSE 28368
28257: GO 28259
28259: DISABLE
28260: LD_INT 0
28262: PPUSH
28263: PPUSH
28264: PPUSH
// begin repeat wait ( 0 0$1 ) ;
28265: LD_INT 35
28267: PPUSH
28268: CALL_OW 67
// x = GetX ( JMM ) ;
28272: LD_ADDR_VAR 0 2
28276: PUSH
28277: LD_EXP 42
28281: PPUSH
28282: CALL_OW 250
28286: ST_TO_ADDR
// y = GetY ( JMM ) ;
28287: LD_ADDR_VAR 0 3
28291: PUSH
28292: LD_EXP 42
28296: PPUSH
28297: CALL_OW 251
28301: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
28302: LD_ADDR_VAR 0 1
28306: PUSH
28307: LD_INT 22
28309: PUSH
28310: LD_INT 4
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PPUSH
28317: CALL_OW 69
28321: PUSH
28322: FOR_IN
28323: IFFALSE 28346
// begin ComMoveXY ( i , x , y ) ;
28325: LD_VAR 0 1
28329: PPUSH
28330: LD_VAR 0 2
28334: PPUSH
28335: LD_VAR 0 3
28339: PPUSH
28340: CALL_OW 111
// end ;
28344: GO 28322
28346: POP
28347: POP
// until GetDistUnits ( Simms , JMM ) < 8 ;
28348: LD_EXP 46
28352: PPUSH
28353: LD_EXP 42
28357: PPUSH
28358: CALL_OW 296
28362: PUSH
28363: LD_INT 8
28365: LESS
28366: IFFALSE 28265
// end ;
28368: PPOPN 3
28370: END
// every 0 0$4 trigger FilterUnitsInArea ( Base , [ [ f_side , You ] ] ) > 0 or GetDistUnits ( Simms , JMM ) < 8 do
28371: LD_INT 12
28373: PPUSH
28374: LD_INT 22
28376: PUSH
28377: LD_EXP 3
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: EMPTY
28387: LIST
28388: PPUSH
28389: CALL_OW 70
28393: PUSH
28394: LD_INT 0
28396: GREATER
28397: PUSH
28398: LD_EXP 46
28402: PPUSH
28403: LD_EXP 42
28407: PPUSH
28408: CALL_OW 296
28412: PUSH
28413: LD_INT 8
28415: LESS
28416: OR
28417: IFFALSE 28892
28419: GO 28421
28421: DISABLE
// begin pom1 = 0 ;
28422: LD_ADDR_LOC 52
28426: PUSH
28427: LD_INT 0
28429: ST_TO_ADDR
// pom = FilterUnitsInArea ( Base , [ [ f_side , You ] ] ) ;
28430: LD_ADDR_LOC 51
28434: PUSH
28435: LD_INT 12
28437: PPUSH
28438: LD_INT 22
28440: PUSH
28441: LD_EXP 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: PPUSH
28453: CALL_OW 70
28457: ST_TO_ADDR
// for i in pom do
28458: LD_ADDR_LOC 50
28462: PUSH
28463: LD_LOC 51
28467: PUSH
28468: FOR_IN
28469: IFFALSE 28551
// begin if GetType ( i ) then
28471: LD_LOC 50
28475: PPUSH
28476: CALL_OW 247
28480: IFFALSE 28507
// if JMM = IsDrivenBy ( i ) then
28482: LD_EXP 42
28486: PUSH
28487: LD_LOC 50
28491: PPUSH
28492: CALL_OW 311
28496: EQUAL
28497: IFFALSE 28507
// pom1 = 1 ;
28499: LD_ADDR_LOC 52
28503: PUSH
28504: LD_INT 1
28506: ST_TO_ADDR
// if IsInArea ( JMM , Base ) or GetDistUnits ( Simms , JMM ) < 8 then
28507: LD_EXP 42
28511: PPUSH
28512: LD_INT 12
28514: PPUSH
28515: CALL_OW 308
28519: PUSH
28520: LD_EXP 46
28524: PPUSH
28525: LD_EXP 42
28529: PPUSH
28530: CALL_OW 296
28534: PUSH
28535: LD_INT 8
28537: LESS
28538: OR
28539: IFFALSE 28549
// pom1 = 1 ;
28541: LD_ADDR_LOC 52
28545: PUSH
28546: LD_INT 1
28548: ST_TO_ADDR
// end ;
28549: GO 28468
28551: POP
28552: POP
// if pom1 = 1 then
28553: LD_LOC 52
28557: PUSH
28558: LD_INT 1
28560: EQUAL
28561: IFFALSE 28891
// begin InGameOn ;
28563: CALL_OW 8
// while not IsOK ( JMM ) do
28567: LD_EXP 42
28571: PPUSH
28572: CALL_OW 302
28576: NOT
28577: IFFALSE 28588
// wait ( 0 0$1 ) ;
28579: LD_INT 35
28581: PPUSH
28582: CALL_OW 67
28586: GO 28567
// ComMoveUnit ( JMM , Simms ) ;
28588: LD_EXP 42
28592: PPUSH
28593: LD_EXP 46
28597: PPUSH
28598: CALL_OW 112
// ComMoveUnit ( Simms , JMM ) ;
28602: LD_EXP 46
28606: PPUSH
28607: LD_EXP 42
28611: PPUSH
28612: CALL_OW 112
// wait ( 0 0$1 ) ;
28616: LD_INT 35
28618: PPUSH
28619: CALL_OW 67
// CenterOnUnits ( [ JMM , Simms ] ) ;
28623: LD_EXP 42
28627: PUSH
28628: LD_EXP 46
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PPUSH
28637: CALL_OW 85
// Say ( Simms , D2a-Sim-1 ) ;
28641: LD_EXP 46
28645: PPUSH
28646: LD_STRING D2a-Sim-1
28648: PPUSH
28649: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
28653: LD_EXP 42
28657: PPUSH
28658: LD_STRING D2a-JMM-1
28660: PPUSH
28661: CALL_OW 88
// CenterOnUnits ( [ JMM , Simms ] ) ;
28665: LD_EXP 42
28669: PUSH
28670: LD_EXP 46
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 85
// if IsOK ( Joan_F ) then
28683: LD_EXP 43
28687: PPUSH
28688: CALL_OW 302
28692: IFFALSE 28788
// begin Say ( Joan_F , D2b-Joan-1 ) ;
28694: LD_EXP 43
28698: PPUSH
28699: LD_STRING D2b-Joan-1
28701: PPUSH
28702: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
28706: LD_EXP 42
28710: PPUSH
28711: LD_STRING D2b-JMM-1
28713: PPUSH
28714: CALL_OW 88
// Say ( Joan_F , D2b-Joan-2 ) ;
28718: LD_EXP 43
28722: PPUSH
28723: LD_STRING D2b-Joan-2
28725: PPUSH
28726: CALL_OW 88
// if IsOK ( Denis ) then
28730: LD_EXP 48
28734: PPUSH
28735: CALL_OW 302
28739: IFFALSE 28753
// Say ( Denis , D2c-Den-1 ) ;
28741: LD_EXP 48
28745: PPUSH
28746: LD_STRING D2c-Den-1
28748: PPUSH
28749: CALL_OW 88
// if IsOK ( Khattam ) then
28753: LD_EXP 45
28757: PPUSH
28758: CALL_OW 302
28762: IFFALSE 28788
// begin Say ( JMM , D2c-JMM-1 ) ;
28764: LD_EXP 42
28768: PPUSH
28769: LD_STRING D2c-JMM-1
28771: PPUSH
28772: CALL_OW 88
// Say ( Khattam , D2c-Khat-1 ) ;
28776: LD_EXP 45
28780: PPUSH
28781: LD_STRING D2c-Khat-1
28783: PPUSH
28784: CALL_OW 88
// end ; end ; CenterOnUnits ( [ JMM , Simms ] ) ;
28788: LD_EXP 42
28792: PUSH
28793: LD_EXP 46
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PPUSH
28802: CALL_OW 85
// ComMoveXY ( Simms , 110 , 35 ) ;
28806: LD_EXP 46
28810: PPUSH
28811: LD_INT 110
28813: PPUSH
28814: LD_INT 35
28816: PPUSH
28817: CALL_OW 111
// InGameOff ;
28821: CALL_OW 9
// dialog_u_zakladny_probehl = true ;
28825: LD_ADDR_EXP 41
28829: PUSH
28830: LD_INT 1
28832: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You2 ] ] ) ;
28833: LD_ADDR_LOC 51
28837: PUSH
28838: LD_INT 22
28840: PUSH
28841: LD_EXP 6
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: EMPTY
28851: LIST
28852: PPUSH
28853: CALL_OW 69
28857: ST_TO_ADDR
// for i in pom do
28858: LD_ADDR_LOC 50
28862: PUSH
28863: LD_LOC 51
28867: PUSH
28868: FOR_IN
28869: IFFALSE 28887
// SetSide ( i , You ) ;
28871: LD_LOC 50
28875: PPUSH
28876: LD_EXP 3
28880: PPUSH
28881: CALL_OW 235
28885: GO 28868
28887: POP
28888: POP
// end else
28889: GO 28892
// enable ;
28891: ENABLE
// end ;
28892: END
// every 0 0$3 trigger Dial >= 3 do
28893: LD_EXP 40
28897: PUSH
28898: LD_INT 3
28900: GREATEREQUAL
28901: IFFALSE 29350
28903: GO 28905
28905: DISABLE
// begin testfight ;
28906: CALL 32002 0 0
// Res := 1 ;
28910: LD_ADDR_EXP 59
28914: PUSH
28915: LD_INT 1
28917: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28918: LD_ADDR_LOC 51
28922: PUSH
28923: LD_INT 22
28925: PUSH
28926: LD_EXP 3
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: LD_INT 30
28940: PUSH
28941: LD_INT 27
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 30
28950: PUSH
28951: LD_INT 26
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 30
28960: PUSH
28961: LD_INT 28
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PPUSH
28978: CALL_OW 69
28982: ST_TO_ADDR
// if pom > 0 then
28983: LD_LOC 51
28987: PUSH
28988: LD_INT 0
28990: GREATER
28991: IFFALSE 29349
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
28993: LD_LOC 51
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: PPUSH
29002: CALL_OW 304
29006: PUSH
29007: LD_INT 0
29009: NONEQUAL
29010: IFFALSE 29021
// wait ( 0 0$1 ) ;
29012: LD_INT 35
29014: PPUSH
29015: CALL_OW 67
29019: GO 28993
// DialogueOn ;
29021: CALL_OW 6
// while not IsOK ( JMM ) do
29025: LD_EXP 42
29029: PPUSH
29030: CALL_OW 302
29034: NOT
29035: IFFALSE 29046
// wait ( 0 0$1 ) ;
29037: LD_INT 35
29039: PPUSH
29040: CALL_OW 67
29044: GO 29025
// pom = GetPeople ( sex_male , class_scientistic , [ Gary , JMM , Cyrus , Denis ] ) ;
29046: LD_ADDR_LOC 51
29050: PUSH
29051: LD_INT 1
29053: PPUSH
29054: LD_INT 4
29056: PPUSH
29057: LD_EXP 44
29061: PUSH
29062: LD_EXP 42
29066: PUSH
29067: LD_EXP 47
29071: PUSH
29072: LD_EXP 48
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: PPUSH
29083: CALL 32039 0 3
29087: ST_TO_ADDR
// if pom = 0 then
29088: LD_LOC 51
29092: PUSH
29093: LD_INT 0
29095: EQUAL
29096: IFFALSE 29112
// Say ( JMM , D3-JMM-3 ) else
29098: LD_EXP 42
29102: PPUSH
29103: LD_STRING D3-JMM-3
29105: PPUSH
29106: CALL_OW 88
29110: GO 29347
// begin Say ( pom [ 1 ] , D3-Sci1-1 ) ;
29112: LD_LOC 51
29116: PUSH
29117: LD_INT 1
29119: ARRAY
29120: PPUSH
29121: LD_STRING D3-Sci1-1
29123: PPUSH
29124: CALL_OW 88
// if IsOK ( Gary ) then
29128: LD_EXP 44
29132: PPUSH
29133: CALL_OW 302
29137: IFFALSE 29153
// Say ( Gary , D3-Gary-1 ) else
29139: LD_EXP 44
29143: PPUSH
29144: LD_STRING D3-Gary-1
29146: PPUSH
29147: CALL_OW 88
29151: GO 29261
// begin pom4 = GetPeople ( sex_male , class_soldier , [ JMM , GARY , pom [ 1 ] ] ) ;
29153: LD_ADDR_LOC 55
29157: PUSH
29158: LD_INT 1
29160: PPUSH
29161: LD_INT 1
29163: PPUSH
29164: LD_EXP 42
29168: PUSH
29169: LD_EXP 44
29173: PUSH
29174: LD_LOC 51
29178: PUSH
29179: LD_INT 1
29181: ARRAY
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: PPUSH
29188: CALL 32039 0 3
29192: ST_TO_ADDR
// if pom4 > 0 then
29193: LD_LOC 55
29197: PUSH
29198: LD_INT 0
29200: GREATER
29201: IFFALSE 29221
// Say ( pom4 [ 1 ] , D3-Sol1-1 ) else
29203: LD_LOC 55
29207: PUSH
29208: LD_INT 1
29210: ARRAY
29211: PPUSH
29212: LD_STRING D3-Sol1-1
29214: PPUSH
29215: CALL_OW 88
29219: GO 29261
// if pom > 1 then
29221: LD_LOC 51
29225: PUSH
29226: LD_INT 1
29228: GREATER
29229: IFFALSE 29249
// Say ( pom [ 2 ] , D3-Sol1-1 ) else
29231: LD_LOC 51
29235: PUSH
29236: LD_INT 2
29238: ARRAY
29239: PPUSH
29240: LD_STRING D3-Sol1-1
29242: PPUSH
29243: CALL_OW 88
29247: GO 29261
// Say ( JMM , D3-Sol1-1 ) ;
29249: LD_EXP 42
29253: PPUSH
29254: LD_STRING D3-Sol1-1
29256: PPUSH
29257: CALL_OW 88
// end ; Say ( pom [ 1 ] , D3-Sci1-2 ) ;
29261: LD_LOC 51
29265: PUSH
29266: LD_INT 1
29268: ARRAY
29269: PPUSH
29270: LD_STRING D3-Sci1-2
29272: PPUSH
29273: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
29277: LD_EXP 42
29281: PPUSH
29282: LD_STRING D3-JMM-2
29284: PPUSH
29285: CALL_OW 88
// Say ( pom [ 1 ] , D3-Sci1-3 ) ;
29289: LD_LOC 51
29293: PUSH
29294: LD_INT 1
29296: ARRAY
29297: PPUSH
29298: LD_STRING D3-Sci1-3
29300: PPUSH
29301: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
29305: LD_EXP 42
29309: PPUSH
29310: LD_STRING D3-JMM-3
29312: PPUSH
29313: CALL_OW 88
// Say ( pom [ 1 ] , D3-Sci1-4 ) ;
29317: LD_LOC 51
29321: PUSH
29322: LD_INT 1
29324: ARRAY
29325: PPUSH
29326: LD_STRING D3-Sci1-4
29328: PPUSH
29329: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
29333: LD_STRING M2
29335: PPUSH
29336: CALL_OW 337
// enable ( 104 ) ;
29340: LD_INT 104
29342: ENABLE_MARKED
// DialogueOff ;
29343: CALL_OW 7
// end ; end else
29347: GO 29350
// enable ;
29349: ENABLE
// end ;
29350: END
// every 0 0$5 do var pom ;
29351: GO 29353
29353: DISABLE
29354: LD_INT 0
29356: PPUSH
// begin if GetTech ( tech_SibPow , You ) = state_researched and GetTech ( tech_Sib1 , You ) = state_researched and GetTech ( tech_Sib2 , You ) = state_researched then
29357: LD_INT 21
29359: PPUSH
29360: LD_EXP 3
29364: PPUSH
29365: CALL_OW 321
29369: PUSH
29370: LD_INT 2
29372: EQUAL
29373: PUSH
29374: LD_INT 54
29376: PPUSH
29377: LD_EXP 3
29381: PPUSH
29382: CALL_OW 321
29386: PUSH
29387: LD_INT 2
29389: EQUAL
29390: AND
29391: PUSH
29392: LD_INT 55
29394: PPUSH
29395: LD_EXP 3
29399: PPUSH
29400: CALL_OW 321
29404: PUSH
29405: LD_INT 2
29407: EQUAL
29408: AND
29409: IFFALSE 29524
// begin if GetTech ( tech_AI , You ) = state_researched and GetTech ( tech_LasSight , You ) = state_researched then
29411: LD_INT 32
29413: PPUSH
29414: LD_EXP 3
29418: PPUSH
29419: CALL_OW 321
29423: PUSH
29424: LD_INT 2
29426: EQUAL
29427: PUSH
29428: LD_INT 12
29430: PPUSH
29431: LD_EXP 3
29435: PPUSH
29436: CALL_OW 321
29440: PUSH
29441: LD_INT 2
29443: EQUAL
29444: AND
29445: IFFALSE 29456
// Mission_end ( ukonceni - dialogues 133 ) else
29447: LD_STRING ukonceni - dialogues 133
29449: PPUSH
29450: CALL 421 0 1
29454: GO 29522
// begin ChangeMissionObjectives ( M2a ) ;
29456: LD_STRING M2a
29458: PPUSH
29459: CALL_OW 337
// pom = Query ( QEndMission ) ;
29463: LD_ADDR_VAR 0 1
29467: PUSH
29468: LD_STRING QEndMission
29470: PPUSH
29471: CALL_OW 97
29475: ST_TO_ADDR
// EMR = true ;
29476: LD_ADDR_EXP 38
29480: PUSH
29481: LD_INT 1
29483: ST_TO_ADDR
// if pom = 2 then
29484: LD_VAR 0 1
29488: PUSH
29489: LD_INT 2
29491: EQUAL
29492: IFFALSE 29503
// Mission_end ( po odklepnuti ze konci - dialogues 138 ) else
29494: LD_STRING po odklepnuti ze konci - dialogues 138
29496: PPUSH
29497: CALL 421 0 1
29501: GO 29519
// begin end_the_mission_allowed = true ;
29503: LD_ADDR_OWVAR 57
29507: PUSH
29508: LD_INT 1
29510: ST_TO_ADDR
// test_ukonceni_allowed = true ;
29511: LD_ADDR_LOC 62
29515: PUSH
29516: LD_INT 1
29518: ST_TO_ADDR
// end ; disable ( 104 ) ;
29519: LD_INT 104
29521: DISABLE_MARKED
// end ; end else
29522: GO 29525
// enable ;
29524: ENABLE
// end ;
29525: PPOPN 1
29527: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasSight then
29528: LD_VAR 0 1
29532: PUSH
29533: LD_INT 12
29535: EQUAL
29536: IFFALSE 29545
// ChangeMissionObjectives ( M2b ) ;
29538: LD_STRING M2b
29540: PPUSH
29541: CALL_OW 337
// if tech = tech_AI then
29545: LD_VAR 0 1
29549: PUSH
29550: LD_INT 32
29552: EQUAL
29553: IFFALSE 29562
// ChangeMissionObjectives ( M2c ) ;
29555: LD_STRING M2c
29557: PPUSH
29558: CALL_OW 337
// end ;
29562: PPOPN 2
29564: END
// every 2 2$30 marked 104 do
29565: GO 29567
29567: DISABLE
// begin testfight ;
29568: CALL 32002 0 0
// if IsOK ( Simms ) and IsInArea ( Simms , Base2 ) and ( not disable_kecy1 ) then
29572: LD_EXP 46
29576: PPUSH
29577: CALL_OW 302
29581: PUSH
29582: LD_EXP 46
29586: PPUSH
29587: LD_INT 13
29589: PPUSH
29590: CALL_OW 308
29594: AND
29595: PUSH
29596: LD_LOC 60
29600: NOT
29601: AND
29602: IFFALSE 29842
// begin DialogueOn ;
29604: CALL_OW 6
// pom = GetPeople ( sex_male , class_scientistic , [ JMM ] ) ;
29608: LD_ADDR_LOC 51
29612: PUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_INT 4
29618: PPUSH
29619: LD_EXP 42
29623: PUSH
29624: EMPTY
29625: LIST
29626: PPUSH
29627: CALL 32039 0 3
29631: ST_TO_ADDR
// Say ( Simms , D3a-Sim-1 ) ;
29632: LD_EXP 46
29636: PPUSH
29637: LD_STRING D3a-Sim-1
29639: PPUSH
29640: CALL_OW 88
// if pom > 0 then
29644: LD_LOC 51
29648: PUSH
29649: LD_INT 0
29651: GREATER
29652: IFFALSE 29670
// pom1 = pom [ 1 ] else
29654: LD_ADDR_LOC 52
29658: PUSH
29659: LD_LOC 51
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: ST_TO_ADDR
29668: GO 29680
// pom1 = JMM ;
29670: LD_ADDR_LOC 52
29674: PUSH
29675: LD_EXP 42
29679: ST_TO_ADDR
// Say ( pom1 , D3a-Sci1-1 ) ;
29680: LD_LOC 52
29684: PPUSH
29685: LD_STRING D3a-Sci1-1
29687: PPUSH
29688: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
29692: LD_EXP 46
29696: PPUSH
29697: LD_STRING D3a-Sim-2
29699: PPUSH
29700: CALL_OW 88
// Say ( pom1 , D3a-Sci1-2 ) ;
29704: LD_LOC 52
29708: PPUSH
29709: LD_STRING D3a-Sci1-2
29711: PPUSH
29712: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
29716: LD_EXP 46
29720: PPUSH
29721: LD_STRING D3a-Sim-3
29723: PPUSH
29724: CALL_OW 88
// Say ( pom1 , D3a-Sci1-3 ) ;
29728: LD_LOC 52
29732: PPUSH
29733: LD_STRING D3a-Sci1-3
29735: PPUSH
29736: CALL_OW 88
// if IsLive ( Joan_F ) then
29740: LD_EXP 43
29744: PPUSH
29745: CALL_OW 300
29749: IFFALSE 29765
// Say ( Simms , D3a-Sim-4 ) else
29751: LD_EXP 46
29755: PPUSH
29756: LD_STRING D3a-Sim-4
29758: PPUSH
29759: CALL_OW 88
29763: GO 29777
// Say ( Simms , D3a-Sim-4a ) ;
29765: LD_EXP 46
29769: PPUSH
29770: LD_STRING D3a-Sim-4a
29772: PPUSH
29773: CALL_OW 88
// Say ( pom1 , D3a-Sci1-4 ) ;
29777: LD_LOC 52
29781: PPUSH
29782: LD_STRING D3a-Sci1-4
29784: PPUSH
29785: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
29789: LD_EXP 46
29793: PPUSH
29794: LD_STRING D3a-Sim-5
29796: PPUSH
29797: CALL_OW 88
// Say ( pom1 , D3a-Sci1-5 ) ;
29801: LD_LOC 52
29805: PPUSH
29806: LD_STRING D3a-Sci1-5
29808: PPUSH
29809: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
29813: LD_EXP 46
29817: PPUSH
29818: LD_STRING D3a-Sim-6
29820: PPUSH
29821: CALL_OW 88
// DialogueOff ;
29825: CALL_OW 7
// disable_kecy1 = true ;
29829: LD_ADDR_LOC 60
29833: PUSH
29834: LD_INT 1
29836: ST_TO_ADDR
// enable ( 105 ) ;
29837: LD_INT 105
29839: ENABLE_MARKED
// end else
29840: GO 29843
// enable ;
29842: ENABLE
// end ;
29843: END
// every 0 0$30 marked 105 do var pomkecy ;
29844: GO 29846
29846: DISABLE
29847: LD_INT 0
29849: PPUSH
// begin wait ( Rand ( 0 0$5 , 1 1$0 ) ) ;
29850: LD_INT 175
29852: PPUSH
29853: LD_INT 2100
29855: PPUSH
29856: CALL_OW 12
29860: PPUSH
29861: CALL_OW 67
// testfight ;
29865: CALL 32002 0 0
// pomkecy = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
29869: LD_ADDR_VAR 0 1
29873: PUSH
29874: LD_INT 22
29876: PUSH
29877: LD_EXP 1
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 21
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 26
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: ST_TO_ADDR
// pomkecy = pomkecy diff Dietrich ;
29916: LD_ADDR_VAR 0 1
29920: PUSH
29921: LD_VAR 0 1
29925: PUSH
29926: LD_EXP 27
29930: DIFF
29931: ST_TO_ADDR
// if IsOK ( Dietrich ) and IsOK ( Khattam ) and ( not disable_kecy2 ) then
29932: LD_EXP 27
29936: PPUSH
29937: CALL_OW 302
29941: PUSH
29942: LD_EXP 45
29946: PPUSH
29947: CALL_OW 302
29951: AND
29952: PUSH
29953: LD_LOC 61
29957: NOT
29958: AND
29959: IFFALSE 30045
// begin if pomkecy > 0 then
29961: LD_VAR 0 1
29965: PUSH
29966: LD_INT 0
29968: GREATER
29969: IFFALSE 29987
// pom = pomkecy [ 1 ] else
29971: LD_ADDR_LOC 51
29975: PUSH
29976: LD_VAR 0 1
29980: PUSH
29981: LD_INT 1
29983: ARRAY
29984: ST_TO_ADDR
29985: GO 29989
// exit ;
29987: GO 30048
// Say ( pom , D5-Ar1-1 ) ;
29989: LD_LOC 51
29993: PPUSH
29994: LD_STRING D5-Ar1-1
29996: PPUSH
29997: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
30001: LD_EXP 27
30005: PPUSH
30006: LD_STRING D5-Diet-1
30008: PPUSH
30009: CALL_OW 88
// Say ( pom , D5-Ar1-2 ) ;
30013: LD_LOC 51
30017: PPUSH
30018: LD_STRING D5-Ar1-2
30020: PPUSH
30021: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
30025: LD_EXP 27
30029: PPUSH
30030: LD_STRING D5-Diet-2
30032: PPUSH
30033: CALL_OW 88
// disable_kecy2 = true ;
30037: LD_ADDR_LOC 61
30041: PUSH
30042: LD_INT 1
30044: ST_TO_ADDR
// end ; enable ( 106 ) ;
30045: LD_INT 106
30047: ENABLE_MARKED
// end ;
30048: PPOPN 1
30050: END
// every 0 0$30 marked 106 do
30051: GO 30053
30053: DISABLE
// begin testfight ;
30054: CALL 32002 0 0
// DialogueOn ;
30058: CALL_OW 6
// pom = GetPeople ( sex_male , class_scientistic , [ JMM , Khattam ] ) ;
30062: LD_ADDR_LOC 51
30066: PUSH
30067: LD_INT 1
30069: PPUSH
30070: LD_INT 4
30072: PPUSH
30073: LD_EXP 42
30077: PUSH
30078: LD_EXP 45
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PPUSH
30087: CALL 32039 0 3
30091: ST_TO_ADDR
// if pom > 0 then
30092: LD_LOC 51
30096: PUSH
30097: LD_INT 0
30099: GREATER
30100: IFFALSE 30239
// begin while not IsOK ( JMM ) do
30102: LD_EXP 42
30106: PPUSH
30107: CALL_OW 302
30111: NOT
30112: IFFALSE 30123
// wait ( 0 0$1 ) ;
30114: LD_INT 35
30116: PPUSH
30117: CALL_OW 67
30121: GO 30102
// Say ( JMM , D6-JMM-1 ) ;
30123: LD_EXP 42
30127: PPUSH
30128: LD_STRING D6-JMM-1
30130: PPUSH
30131: CALL_OW 88
// Say ( pom [ 1 ] , D6-Sci1-1 ) ;
30135: LD_LOC 51
30139: PUSH
30140: LD_INT 1
30142: ARRAY
30143: PPUSH
30144: LD_STRING D6-Sci1-1
30146: PPUSH
30147: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
30151: LD_EXP 42
30155: PPUSH
30156: LD_STRING D6-JMM-2
30158: PPUSH
30159: CALL_OW 88
// Say ( pom [ 1 ] , D6-Sci1-2 ) ;
30163: LD_LOC 51
30167: PUSH
30168: LD_INT 1
30170: ARRAY
30171: PPUSH
30172: LD_STRING D6-Sci1-2
30174: PPUSH
30175: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
30179: LD_EXP 42
30183: PPUSH
30184: LD_STRING D6-JMM-3
30186: PPUSH
30187: CALL_OW 88
// Say ( pom [ 1 ] , D6-Sci1-3 ) ;
30191: LD_LOC 51
30195: PUSH
30196: LD_INT 1
30198: ARRAY
30199: PPUSH
30200: LD_STRING D6-Sci1-3
30202: PPUSH
30203: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
30207: LD_EXP 42
30211: PPUSH
30212: LD_STRING D6-JMM-4
30214: PPUSH
30215: CALL_OW 88
// Say ( pom [ 1 ] , D6-Sci1-4 ) ;
30219: LD_LOC 51
30223: PUSH
30224: LD_INT 1
30226: ARRAY
30227: PPUSH
30228: LD_STRING D6-Sci1-4
30230: PPUSH
30231: CALL_OW 88
// DialogueOff ;
30235: CALL_OW 7
// end ; COR_GO = 1 ;
30239: LD_ADDR_EXP 55
30243: PUSH
30244: LD_INT 1
30246: ST_TO_ADDR
// enable ( 108 ) ;
30247: LD_INT 108
30249: ENABLE_MARKED
// end ;
30250: END
// every 4 4$0 do var npom ;
30251: GO 30253
30253: DISABLE
30254: LD_INT 0
30256: PPUSH
// begin wait ( timerusi [ difficulty ] ) ;
30257: LD_EXP 60
30261: PUSH
30262: LD_OWVAR 67
30266: ARRAY
30267: PPUSH
30268: CALL_OW 67
// npom = create_kecal ;
30272: LD_ADDR_VAR 0 1
30276: PUSH
30277: CALL 9803 0 0
30281: ST_TO_ADDR
// wait ( 0 0$2 ) ;
30282: LD_INT 70
30284: PPUSH
30285: CALL_OW 67
// SayRadio ( npom , D4-FSol1-1 ) ;
30289: LD_VAR 0 1
30293: PPUSH
30294: LD_STRING D4-FSol1-1
30296: PPUSH
30297: CALL_OW 94
// wait ( 0 0$5 ) ;
30301: LD_INT 175
30303: PPUSH
30304: CALL_OW 67
// ChangeMissionObjectives ( M3 ) ;
30308: LD_STRING M3
30310: PPUSH
30311: CALL_OW 337
// case nah of 1 , 2 :
30315: LD_EXP 35
30319: PUSH
30320: LD_INT 1
30322: DOUBLE
30323: EQUAL
30324: IFTRUE 30334
30326: LD_INT 2
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30349
30334: POP
// RevealFogArea ( You , Seekon2 ) ; 3 , 4 :
30335: LD_EXP 3
30339: PPUSH
30340: LD_INT 15
30342: PPUSH
30343: CALL_OW 332
30347: GO 30379
30349: LD_INT 3
30351: DOUBLE
30352: EQUAL
30353: IFTRUE 30363
30355: LD_INT 4
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30378
30363: POP
// RevealFogArea ( You , Seekon1 ) ; end ;
30364: LD_EXP 3
30368: PPUSH
30369: LD_INT 14
30371: PPUSH
30372: CALL_OW 332
30376: GO 30379
30378: POP
// KillUnit ( npom ) ;
30379: LD_VAR 0 1
30383: PPUSH
30384: CALL_OW 66
// end ;
30388: PPOPN 1
30390: END
// every 0 0$0.1 trigger COR_GO = 2 marked 108 do
30391: LD_EXP 55
30395: PUSH
30396: LD_INT 2
30398: EQUAL
30399: IFFALSE 30643
30401: GO 30403
30403: DISABLE
// begin if See ( You , Cornel ) then
30404: LD_EXP 3
30408: PPUSH
30409: LD_EXP 50
30413: PPUSH
30414: CALL_OW 292
30418: IFFALSE 30642
// begin if cor_dial1 then
30420: LD_LOC 58
30424: IFFALSE 30428
// exit ;
30426: GO 30643
// while not IsOK ( JMM ) do
30428: LD_EXP 42
30432: PPUSH
30433: CALL_OW 302
30437: NOT
30438: IFFALSE 30449
// wait ( 0 0$1 ) ;
30440: LD_INT 35
30442: PPUSH
30443: CALL_OW 67
30447: GO 30428
// SetSide ( Cornel , You ) ;
30449: LD_EXP 50
30453: PPUSH
30454: LD_EXP 3
30458: PPUSH
30459: CALL_OW 235
// CenterOnUnits ( Cornel ) ;
30463: LD_EXP 50
30467: PPUSH
30468: CALL_OW 85
// InGameOn ;
30472: CALL_OW 8
// pom = GetPeople ( sex_female , class_soldier , [ ] ) ;
30476: LD_ADDR_LOC 51
30480: PUSH
30481: LD_INT 2
30483: PPUSH
30484: LD_INT 1
30486: PPUSH
30487: EMPTY
30488: PPUSH
30489: CALL 32039 0 3
30493: ST_TO_ADDR
// SetLives ( Cornel , 300 ) ;
30494: LD_EXP 50
30498: PPUSH
30499: LD_INT 300
30501: PPUSH
30502: CALL_OW 234
// RevealFogArea ( You , Corsee ) ;
30506: LD_EXP 3
30510: PPUSH
30511: LD_INT 18
30513: PPUSH
30514: CALL_OW 332
// cor_dial1 = true ;
30518: LD_ADDR_LOC 58
30522: PUSH
30523: LD_INT 1
30525: ST_TO_ADDR
// Say ( Cornel , D7-Corn-1 ) ;
30526: LD_EXP 50
30530: PPUSH
30531: LD_STRING D7-Corn-1
30533: PPUSH
30534: CALL_OW 88
// if pom > 0 then
30538: LD_LOC 51
30542: PUSH
30543: LD_INT 0
30545: GREATER
30546: IFFALSE 30564
// Say ( pom [ 1 ] , D7-FSol1-1 ) ;
30548: LD_LOC 51
30552: PUSH
30553: LD_INT 1
30555: ARRAY
30556: PPUSH
30557: LD_STRING D7-FSol1-1
30559: PPUSH
30560: CALL_OW 88
// Say ( Cornel , D7-Corn-2 ) ;
30564: LD_EXP 50
30568: PPUSH
30569: LD_STRING D7-Corn-2
30571: PPUSH
30572: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
30576: LD_EXP 42
30580: PPUSH
30581: LD_STRING D7-JMM-2
30583: PPUSH
30584: CALL_OW 88
// Say ( Cornel , D7-Corn-3 ) ;
30588: LD_EXP 50
30592: PPUSH
30593: LD_STRING D7-Corn-3
30595: PPUSH
30596: CALL_OW 88
// ComCrawl ( Cornel ) ;
30600: LD_EXP 50
30604: PPUSH
30605: CALL_OW 137
// SetLives ( Cornel , 200 ) ;
30609: LD_EXP 50
30613: PPUSH
30614: LD_INT 200
30616: PPUSH
30617: CALL_OW 234
// Say ( JMM , D7-JMM-3 ) ;
30621: LD_EXP 42
30625: PPUSH
30626: LD_STRING D7-JMM-3
30628: PPUSH
30629: CALL_OW 88
// InGameOff ;
30633: CALL_OW 9
// enable ( 107 ) ;
30637: LD_INT 107
30639: ENABLE_MARKED
// end else
30640: GO 30643
// enable ;
30642: ENABLE
// end ;
30643: END
// every 0 0$5 marked 107 do
30644: GO 30646
30646: DISABLE
// begin testfight ;
30647: CALL 32002 0 0
// if IsOK ( Cornel ) and IsInArea ( JMM , Base2 ) then
30651: LD_EXP 50
30655: PPUSH
30656: CALL_OW 302
30660: PUSH
30661: LD_EXP 42
30665: PPUSH
30666: LD_INT 13
30668: PPUSH
30669: CALL_OW 308
30673: AND
30674: IFFALSE 30930
// begin if cor_dial2 then
30676: LD_LOC 59
30680: IFFALSE 30684
// exit ;
30682: GO 30931
// wait ( 0 0$10 ) ;
30684: LD_INT 350
30686: PPUSH
30687: CALL_OW 67
// DialogueOn ;
30691: CALL_OW 6
// while not IsOK ( JMM ) do
30695: LD_EXP 42
30699: PPUSH
30700: CALL_OW 302
30704: NOT
30705: IFFALSE 30716
// wait ( 0 0$1 ) ;
30707: LD_INT 35
30709: PPUSH
30710: CALL_OW 67
30714: GO 30695
// cor_dial2 = true ;
30716: LD_ADDR_LOC 59
30720: PUSH
30721: LD_INT 1
30723: ST_TO_ADDR
// Say ( JMM , D7a-JMM-1 ) ;
30724: LD_EXP 42
30728: PPUSH
30729: LD_STRING D7a-JMM-1
30731: PPUSH
30732: CALL_OW 88
// Say ( Cornel , D7a-Corn-1 ) ;
30736: LD_EXP 50
30740: PPUSH
30741: LD_STRING D7a-Corn-1
30743: PPUSH
30744: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
30748: LD_EXP 42
30752: PPUSH
30753: LD_STRING D7a-JMM-2
30755: PPUSH
30756: CALL_OW 88
// Say ( Cornel , D7a-Corn-2 ) ;
30760: LD_EXP 50
30764: PPUSH
30765: LD_STRING D7a-Corn-2
30767: PPUSH
30768: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
30772: LD_EXP 42
30776: PPUSH
30777: LD_STRING D7a-JMM-3
30779: PPUSH
30780: CALL_OW 88
// Say ( Cornel , D7a-Corn-3 ) ;
30784: LD_EXP 50
30788: PPUSH
30789: LD_STRING D7a-Corn-3
30791: PPUSH
30792: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
30796: LD_EXP 42
30800: PPUSH
30801: LD_STRING D7a-JMM-4
30803: PPUSH
30804: CALL_OW 88
// Say ( Cornel , D7a-Corn-4 ) ;
30808: LD_EXP 50
30812: PPUSH
30813: LD_STRING D7a-Corn-4
30815: PPUSH
30816: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
30820: LD_EXP 42
30824: PPUSH
30825: LD_STRING D7a-JMM-5
30827: PPUSH
30828: CALL_OW 88
// Say ( Cornel , D7a-Corn-5 ) ;
30832: LD_EXP 50
30836: PPUSH
30837: LD_STRING D7a-Corn-5
30839: PPUSH
30840: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
30844: LD_EXP 42
30848: PPUSH
30849: LD_STRING D7a-JMM-6
30851: PPUSH
30852: CALL_OW 88
// if VIDEL_MIKHAILA then
30856: LD_EXP 83
30860: IFFALSE 30876
// Say ( Cornel , D7a-Corn-6 ) else
30862: LD_EXP 50
30866: PPUSH
30867: LD_STRING D7a-Corn-6
30869: PPUSH
30870: CALL_OW 88
30874: GO 30888
// Say ( Cornel , D7a-Corn-6a ) ;
30876: LD_EXP 50
30880: PPUSH
30881: LD_STRING D7a-Corn-6a
30883: PPUSH
30884: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
30888: LD_EXP 42
30892: PPUSH
30893: LD_STRING D7a-JMM-7
30895: PPUSH
30896: CALL_OW 88
// Say ( Cornel , D7a-Corn-7 ) ;
30900: LD_EXP 50
30904: PPUSH
30905: LD_STRING D7a-Corn-7
30907: PPUSH
30908: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
30912: LD_EXP 42
30916: PPUSH
30917: LD_STRING D7a-JMM-8
30919: PPUSH
30920: CALL_OW 88
// DialogueOff ;
30924: CALL_OW 7
// end else
30928: GO 30931
// enable ;
30930: ENABLE
// end ;
30931: END
// every 0 0$1 trigger bazookaDialog = 1 do
30932: LD_EXP 12
30936: PUSH
30937: LD_INT 1
30939: EQUAL
30940: IFFALSE 31168
30942: GO 30944
30944: DISABLE
// begin wait ( 0 0$3 ) ;
30945: LD_INT 105
30947: PPUSH
30948: CALL_OW 67
// DialogueOn ;
30952: CALL_OW 6
// while not IsOK ( JMM ) do
30956: LD_EXP 42
30960: PPUSH
30961: CALL_OW 302
30965: NOT
30966: IFFALSE 30977
// wait ( 0 0$1 ) ;
30968: LD_INT 35
30970: PPUSH
30971: CALL_OW 67
30975: GO 30956
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
30977: LD_ADDR_LOC 51
30981: PUSH
30982: LD_INT 1
30984: PPUSH
30985: LD_INT 1
30987: PPUSH
30988: LD_EXP 42
30992: PUSH
30993: EMPTY
30994: LIST
30995: PPUSH
30996: CALL 32039 0 3
31000: ST_TO_ADDR
// if IsOK ( Cyrus ) then
31001: LD_EXP 47
31005: PPUSH
31006: CALL_OW 302
31010: IFFALSE 31058
// if VI_O_GRANATECH then
31012: LD_EXP 84
31016: IFFALSE 31044
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
31018: LD_EXP 47
31022: PPUSH
31023: LD_STRING D9a-Cyrus-1
31025: PPUSH
31026: CALL_OW 88
// Say ( JMM , D9a-JMM-1 ) ;
31030: LD_EXP 42
31034: PPUSH
31035: LD_STRING D9a-JMM-1
31037: PPUSH
31038: CALL_OW 88
// end else
31042: GO 31056
// Say ( Cyrus , D9b-Cyrus-1 ) else
31044: LD_EXP 47
31048: PPUSH
31049: LD_STRING D9b-Cyrus-1
31051: PPUSH
31052: CALL_OW 88
31056: GO 31112
// if pom > 0 then
31058: LD_LOC 51
31062: PUSH
31063: LD_INT 0
31065: GREATER
31066: IFFALSE 31112
// if VI_O_GRANATECH then
31068: LD_EXP 84
31072: IFFALSE 31100
// begin Say ( pom , D9a-Sol1-1 ) ;
31074: LD_LOC 51
31078: PPUSH
31079: LD_STRING D9a-Sol1-1
31081: PPUSH
31082: CALL_OW 88
// Say ( JMM , D9a-JMM-1 ) ;
31086: LD_EXP 42
31090: PPUSH
31091: LD_STRING D9a-JMM-1
31093: PPUSH
31094: CALL_OW 88
// end else
31098: GO 31112
// Say ( pom , D9b-Sol1-1 ) ;
31100: LD_LOC 51
31104: PPUSH
31105: LD_STRING D9b-Sol1-1
31107: PPUSH
31108: CALL_OW 88
// if GetTech ( tech_LasSight , You ) = state_researched then
31112: LD_INT 12
31114: PPUSH
31115: LD_EXP 3
31119: PPUSH
31120: CALL_OW 321
31124: PUSH
31125: LD_INT 2
31127: EQUAL
31128: IFFALSE 31144
// Say ( JMM , D9c-JMM-1a ) else
31130: LD_EXP 42
31134: PPUSH
31135: LD_STRING D9c-JMM-1a
31137: PPUSH
31138: CALL_OW 88
31142: GO 31156
// Say ( JMM , D9c-JMM-1 ) ;
31144: LD_EXP 42
31148: PPUSH
31149: LD_STRING D9c-JMM-1
31151: PPUSH
31152: CALL_OW 88
// DialogueOff ;
31156: CALL_OW 7
// bazookaDialog = 0 ;
31160: LD_ADDR_EXP 12
31164: PUSH
31165: LD_INT 0
31167: ST_TO_ADDR
// end ;
31168: END
// export function powell_kecy ; begin
31169: LD_INT 0
31171: PPUSH
// DialogueOn ;
31172: CALL_OW 6
// SayRadio ( Powell , D6b-Pow-1 ) ;
31176: LD_EXP 49
31180: PPUSH
31181: LD_STRING D6b-Pow-1
31183: PPUSH
31184: CALL_OW 94
// Wait ( 0 0$5 ) ;
31188: LD_INT 175
31190: PPUSH
31191: CALL_OW 67
// DialogueOff ;
31195: CALL_OW 7
// end ;
31199: LD_VAR 0 1
31203: RET
// every 0 0$3 trigger Dial >= 5 do var arm ;
31204: LD_EXP 40
31208: PUSH
31209: LD_INT 5
31211: GREATEREQUAL
31212: IFFALSE 31498
31214: GO 31216
31216: DISABLE
31217: LD_INT 0
31219: PPUSH
// begin DialogueOn ;
31220: CALL_OW 6
// while not IsOK ( JMM ) do
31224: LD_EXP 42
31228: PPUSH
31229: CALL_OW 302
31233: NOT
31234: IFFALSE 31245
// wait ( 0 0$1 ) ;
31236: LD_INT 35
31238: PPUSH
31239: CALL_OW 67
31243: GO 31224
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
31245: LD_ADDR_LOC 51
31249: PUSH
31250: LD_INT 1
31252: PPUSH
31253: LD_INT 1
31255: PPUSH
31256: LD_EXP 42
31260: PUSH
31261: EMPTY
31262: LIST
31263: PPUSH
31264: CALL 32039 0 3
31268: ST_TO_ADDR
// arm = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_or , [ f_btype , b_barracks ] , [ f_btype , b_armoury ] ] ] ) ;
31269: LD_ADDR_VAR 0 1
31273: PUSH
31274: LD_INT 22
31276: PUSH
31277: LD_EXP 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: LD_INT 30
31291: PUSH
31292: LD_INT 5
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 30
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PPUSH
31318: CALL_OW 69
31322: ST_TO_ADDR
// if pom > 1 and arm > 0 then
31323: LD_LOC 51
31327: PUSH
31328: LD_INT 1
31330: GREATER
31331: PUSH
31332: LD_VAR 0 1
31336: PUSH
31337: LD_INT 0
31339: GREATER
31340: AND
31341: IFFALSE 31437
// begin Say ( pom [ 1 ] , D8-Sol1-1 ) ;
31343: LD_LOC 51
31347: PUSH
31348: LD_INT 1
31350: ARRAY
31351: PPUSH
31352: LD_STRING D8-Sol1-1
31354: PPUSH
31355: CALL_OW 88
// pom1 = GetPeople ( sex_male , class_scientistic , [ JMM , pom [ 1 ] ] ) ;
31359: LD_ADDR_LOC 52
31363: PUSH
31364: LD_INT 1
31366: PPUSH
31367: LD_INT 4
31369: PPUSH
31370: LD_EXP 42
31374: PUSH
31375: LD_LOC 51
31379: PUSH
31380: LD_INT 1
31382: ARRAY
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PPUSH
31388: CALL 32039 0 3
31392: ST_TO_ADDR
// if pom1 = 0 then
31393: LD_LOC 52
31397: PUSH
31398: LD_INT 0
31400: EQUAL
31401: IFFALSE 31421
// Say ( pom [ 1 ] , D8-Sci1-1 ) else
31403: LD_LOC 51
31407: PUSH
31408: LD_INT 1
31410: ARRAY
31411: PPUSH
31412: LD_STRING D8-Sci1-1
31414: PPUSH
31415: CALL_OW 88
31419: GO 31437
// Say ( pom1 [ 1 ] , D8-Sci1-1 ) ;
31421: LD_LOC 52
31425: PUSH
31426: LD_INT 1
31428: ARRAY
31429: PPUSH
31430: LD_STRING D8-Sci1-1
31432: PPUSH
31433: CALL_OW 88
// end ; Say ( JMM , D8-JMM-1 ) ;
31437: LD_EXP 42
31441: PPUSH
31442: LD_STRING D8-JMM-1
31444: PPUSH
31445: CALL_OW 88
// DialogueOff ;
31449: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
31453: LD_STRING M4
31455: PPUSH
31456: CALL_OW 337
// wait ( 0 0$10 ) ;
31460: LD_INT 350
31462: PPUSH
31463: CALL_OW 67
// if IsOK ( Gary ) then
31467: LD_EXP 44
31471: PPUSH
31472: CALL_OW 302
31476: IFFALSE 31490
// Say ( Gary , D8a-Gary-1 ) ;
31478: LD_EXP 44
31482: PPUSH
31483: LD_STRING D8a-Gary-1
31485: PPUSH
31486: CALL_OW 88
// Dial := 6 ;
31490: LD_ADDR_EXP 40
31494: PUSH
31495: LD_INT 6
31497: ST_TO_ADDR
// end ;
31498: PPOPN 1
31500: END
// every 0 0$5 trigger Dial >= 6 do
31501: LD_EXP 40
31505: PUSH
31506: LD_INT 6
31508: GREATEREQUAL
31509: IFFALSE 32001
31511: GO 31513
31513: DISABLE
// begin testfight ;
31514: CALL 32002 0 0
// pom1 = false ;
31518: LD_ADDR_LOC 52
31522: PUSH
31523: LD_INT 0
31525: ST_TO_ADDR
// for i in Am_units do
31526: LD_ADDR_LOC 50
31530: PUSH
31531: LD_EXP 56
31535: PUSH
31536: FOR_IN
31537: IFFALSE 31591
// begin pom = Attacks ( i ) ;
31539: LD_ADDR_LOC 51
31543: PUSH
31544: LD_LOC 50
31548: PPUSH
31549: CALL_OW 320
31553: ST_TO_ADDR
// if pom <> 0 then
31554: LD_LOC 51
31558: PUSH
31559: LD_INT 0
31561: NONEQUAL
31562: IFFALSE 31589
// if Getside ( pom ) = Arabi then
31564: LD_LOC 51
31568: PPUSH
31569: CALL_OW 255
31573: PUSH
31574: LD_EXP 1
31578: EQUAL
31579: IFFALSE 31589
// pom1 = true ;
31581: LD_ADDR_LOC 52
31585: PUSH
31586: LD_INT 1
31588: ST_TO_ADDR
// end ;
31589: GO 31536
31591: POP
31592: POP
// if pom1 then
31593: LD_LOC 52
31597: IFFALSE 31602
// enable else
31599: ENABLE
31600: GO 32001
// if IsOK ( Khattam ) then
31602: LD_EXP 45
31606: PPUSH
31607: CALL_OW 302
31611: IFFALSE 32001
// begin DialogueOn ;
31613: CALL_OW 6
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_type , unit_human ] ] ) ;
31617: LD_ADDR_LOC 51
31621: PUSH
31622: LD_INT 22
31624: PUSH
31625: LD_EXP 3
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: PUSH
31640: LD_INT 21
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: PPUSH
31655: CALL_OW 69
31659: ST_TO_ADDR
// pom = pom diff UnitFilter ( pom , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] ] ) ;
31660: LD_ADDR_LOC 51
31664: PUSH
31665: LD_LOC 51
31669: PUSH
31670: LD_LOC 51
31674: PPUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 25
31680: PUSH
31681: LD_INT 12
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 25
31690: PUSH
31691: LD_INT 16
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 25
31700: PUSH
31701: LD_INT 17
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 25
31710: PUSH
31711: LD_INT 15
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: PPUSH
31725: CALL_OW 72
31729: DIFF
31730: ST_TO_ADDR
// if pom < 2 then
31731: LD_LOC 51
31735: PUSH
31736: LD_INT 2
31738: LESS
31739: IFFALSE 31743
// exit ;
31741: GO 32001
// if pom [ 1 ] = Khattam then
31743: LD_LOC 51
31747: PUSH
31748: LD_INT 1
31750: ARRAY
31751: PUSH
31752: LD_EXP 45
31756: EQUAL
31757: IFFALSE 31775
// pom = pom [ 2 ] else
31759: LD_ADDR_LOC 51
31763: PUSH
31764: LD_LOC 51
31768: PUSH
31769: LD_INT 2
31771: ARRAY
31772: ST_TO_ADDR
31773: GO 31789
// pom = pom [ 1 ] ;
31775: LD_ADDR_LOC 51
31779: PUSH
31780: LD_LOC 51
31784: PUSH
31785: LD_INT 1
31787: ARRAY
31788: ST_TO_ADDR
// if GetSex ( pom ) = sex_male then
31789: LD_LOC 51
31793: PPUSH
31794: CALL_OW 258
31798: PUSH
31799: LD_INT 1
31801: EQUAL
31802: IFFALSE 31818
// Say ( pom , D8b-Sol1-1 ) else
31804: LD_LOC 51
31808: PPUSH
31809: LD_STRING D8b-Sol1-1
31811: PPUSH
31812: CALL_OW 88
31816: GO 31830
// Say ( pom , D8b-FSol1-1 ) ;
31818: LD_LOC 51
31822: PPUSH
31823: LD_STRING D8b-FSol1-1
31825: PPUSH
31826: CALL_OW 88
// Say ( Khattam , D8b-Khat-1 ) ;
31830: LD_EXP 45
31834: PPUSH
31835: LD_STRING D8b-Khat-1
31837: PPUSH
31838: CALL_OW 88
// if GetSex ( pom ) = sex_male then
31842: LD_LOC 51
31846: PPUSH
31847: CALL_OW 258
31851: PUSH
31852: LD_INT 1
31854: EQUAL
31855: IFFALSE 31871
// Say ( pom , D8b-Sol1-2 ) else
31857: LD_LOC 51
31861: PPUSH
31862: LD_STRING D8b-Sol1-2
31864: PPUSH
31865: CALL_OW 88
31869: GO 31883
// Say ( pom , D8b-FSol1-2 ) ;
31871: LD_LOC 51
31875: PPUSH
31876: LD_STRING D8b-FSol1-2
31878: PPUSH
31879: CALL_OW 88
// Say ( Khattam , D8b-Khat-2 ) ;
31883: LD_EXP 45
31887: PPUSH
31888: LD_STRING D8b-Khat-2
31890: PPUSH
31891: CALL_OW 88
// if GetSex ( pom ) = sex_male then
31895: LD_LOC 51
31899: PPUSH
31900: CALL_OW 258
31904: PUSH
31905: LD_INT 1
31907: EQUAL
31908: IFFALSE 31924
// Say ( pom , D8b-Sol1-3 ) else
31910: LD_LOC 51
31914: PPUSH
31915: LD_STRING D8b-Sol1-3
31917: PPUSH
31918: CALL_OW 88
31922: GO 31936
// Say ( pom , D8b-FSol1-3 ) ;
31924: LD_LOC 51
31928: PPUSH
31929: LD_STRING D8b-FSol1-3
31931: PPUSH
31932: CALL_OW 88
// Say ( Khattam , D8b-Khat-3 ) ;
31936: LD_EXP 45
31940: PPUSH
31941: LD_STRING D8b-Khat-3
31943: PPUSH
31944: CALL_OW 88
// if GetSex ( pom ) = sex_male then
31948: LD_LOC 51
31952: PPUSH
31953: CALL_OW 258
31957: PUSH
31958: LD_INT 1
31960: EQUAL
31961: IFFALSE 31977
// Say ( pom , D8b-Sol1-4 ) else
31963: LD_LOC 51
31967: PPUSH
31968: LD_STRING D8b-Sol1-4
31970: PPUSH
31971: CALL_OW 88
31975: GO 31989
// Say ( pom , D8b-FSol1-4 ) ;
31977: LD_LOC 51
31981: PPUSH
31982: LD_STRING D8b-FSol1-4
31984: PPUSH
31985: CALL_OW 88
// DialogueOff ;
31989: CALL_OW 7
// KHATTAM_PADA = true ;
31993: LD_ADDR_EXP 58
31997: PUSH
31998: LD_INT 1
32000: ST_TO_ADDR
// end ; end ;
32001: END
// function testfight ; begin
32002: LD_INT 0
32004: PPUSH
// while InBattle ( [ You , Rusi ] ) do
32005: LD_EXP 3
32009: PUSH
32010: LD_EXP 2
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PPUSH
32019: CALL_OW 463
32023: IFFALSE 32034
// wait ( 0 0$0.5 ) ;
32025: LD_INT 18
32027: PPUSH
32028: CALL_OW 67
32032: GO 32005
// end ;
32034: LD_VAR 0 1
32038: RET
// function GetPeople ( sex , povolani , diffseznam ) ; var pom5 ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
32043: LD_ADDR_LOC 52
32047: PUSH
32048: LD_INT 22
32050: PUSH
32051: LD_EXP 3
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 25
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 26
32072: PUSH
32073: LD_VAR 0 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: LIST
32086: PPUSH
32087: CALL_OW 69
32091: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
32092: LD_ADDR_LOC 53
32096: PUSH
32097: LD_INT 22
32099: PUSH
32100: LD_EXP 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 25
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 26
32121: PUSH
32122: LD_VAR 0 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: PPUSH
32136: CALL_OW 69
32140: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
32141: LD_ADDR_LOC 54
32145: PUSH
32146: LD_INT 22
32148: PUSH
32149: LD_EXP 3
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 25
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 26
32170: PUSH
32171: LD_VAR 0 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: PPUSH
32185: CALL_OW 69
32189: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
32190: LD_ADDR_LOC 55
32194: PUSH
32195: LD_INT 22
32197: PUSH
32198: LD_EXP 3
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 25
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 26
32219: PUSH
32220: LD_VAR 0 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: PPUSH
32234: CALL_OW 69
32238: ST_TO_ADDR
// pom5 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_sniper ] , [ f_sex , sex ] ] ) ;
32239: LD_ADDR_VAR 0 5
32243: PUSH
32244: LD_INT 22
32246: PUSH
32247: LD_EXP 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 25
32258: PUSH
32259: LD_INT 5
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 26
32268: PUSH
32269: LD_VAR 0 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: PPUSH
32283: CALL_OW 69
32287: ST_TO_ADDR
// case povolani of class_scientistic :
32288: LD_VAR 0 2
32292: PUSH
32293: LD_INT 4
32295: DOUBLE
32296: EQUAL
32297: IFTRUE 32301
32299: GO 32314
32301: POP
// pom = pom1 ; class_mechanic :
32302: LD_ADDR_LOC 51
32306: PUSH
32307: LD_LOC 52
32311: ST_TO_ADDR
32312: GO 32378
32314: LD_INT 3
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32335
32322: POP
// pom = pom2 ; class_engineer :
32323: LD_ADDR_LOC 51
32327: PUSH
32328: LD_LOC 53
32332: ST_TO_ADDR
32333: GO 32378
32335: LD_INT 2
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32356
32343: POP
// pom = pom3 ; class_soldier :
32344: LD_ADDR_LOC 51
32348: PUSH
32349: LD_LOC 54
32353: ST_TO_ADDR
32354: GO 32378
32356: LD_INT 1
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32377
32364: POP
// pom = pom4 ; end ;
32365: LD_ADDR_LOC 51
32369: PUSH
32370: LD_LOC 55
32374: ST_TO_ADDR
32375: GO 32378
32377: POP
// if povolani <> class_scientistic then
32378: LD_VAR 0 2
32382: PUSH
32383: LD_INT 4
32385: NONEQUAL
32386: IFFALSE 32404
// pom = pom ^ pom1 ;
32388: LD_ADDR_LOC 51
32392: PUSH
32393: LD_LOC 51
32397: PUSH
32398: LD_LOC 52
32402: ADD
32403: ST_TO_ADDR
// if povolani <> class_mechanic then
32404: LD_VAR 0 2
32408: PUSH
32409: LD_INT 3
32411: NONEQUAL
32412: IFFALSE 32430
// pom = pom ^ pom2 ;
32414: LD_ADDR_LOC 51
32418: PUSH
32419: LD_LOC 51
32423: PUSH
32424: LD_LOC 53
32428: ADD
32429: ST_TO_ADDR
// if povolani <> class_engineer then
32430: LD_VAR 0 2
32434: PUSH
32435: LD_INT 2
32437: NONEQUAL
32438: IFFALSE 32456
// pom = pom ^ pom3 ;
32440: LD_ADDR_LOC 51
32444: PUSH
32445: LD_LOC 51
32449: PUSH
32450: LD_LOC 54
32454: ADD
32455: ST_TO_ADDR
// if povolani <> class_soldier then
32456: LD_VAR 0 2
32460: PUSH
32461: LD_INT 1
32463: NONEQUAL
32464: IFFALSE 32482
// pom = pom ^ pom4 ;
32466: LD_ADDR_LOC 51
32470: PUSH
32471: LD_LOC 51
32475: PUSH
32476: LD_LOC 55
32480: ADD
32481: ST_TO_ADDR
// if povolani <> class_scientistic then
32482: LD_VAR 0 2
32486: PUSH
32487: LD_INT 4
32489: NONEQUAL
32490: IFFALSE 32508
// pom = pom ^ pom5 ;
32492: LD_ADDR_LOC 51
32496: PUSH
32497: LD_LOC 51
32501: PUSH
32502: LD_VAR 0 5
32506: ADD
32507: ST_TO_ADDR
// result := pom diff diffseznam ;
32508: LD_ADDR_VAR 0 4
32512: PUSH
32513: LD_LOC 51
32517: PUSH
32518: LD_VAR 0 3
32522: DIFF
32523: ST_TO_ADDR
// end ;
32524: LD_VAR 0 4
32528: RET
// export function uvidel_spontalni_teleportaci ; begin
32529: LD_INT 0
32531: PPUSH
// while not IsOK ( JMM ) do
32532: LD_EXP 42
32536: PPUSH
32537: CALL_OW 302
32541: NOT
32542: IFFALSE 32553
// wait ( 0 0$1 ) ;
32544: LD_INT 35
32546: PPUSH
32547: CALL_OW 67
32551: GO 32532
// DialogueOn ;
32553: CALL_OW 6
// if IsOK ( Cyrus ) then
32557: LD_EXP 47
32561: PPUSH
32562: CALL_OW 302
32566: IFFALSE 32580
// Say ( Cyrus , D10-Cyrus-1 ) ;
32568: LD_EXP 47
32572: PPUSH
32573: LD_STRING D10-Cyrus-1
32575: PPUSH
32576: CALL_OW 88
// Say ( JMM , D10-JMM-1 ) ;
32580: LD_EXP 42
32584: PPUSH
32585: LD_STRING D10-JMM-1
32587: PPUSH
32588: CALL_OW 88
// DialogueOff ;
32592: CALL_OW 7
// end ;
32596: LD_VAR 0 1
32600: RET
// every 0 0$6 trigger Arabi_utoci do var i ; var cont ;
32601: LD_EXP 30
32605: IFFALSE 32684
32607: GO 32609
32609: DISABLE
32610: LD_INT 0
32612: PPUSH
32613: PPUSH
// begin cont = false ;
32614: LD_ADDR_VAR 0 2
32618: PUSH
32619: LD_INT 0
32621: ST_TO_ADDR
// for i in arabsti_zradci_LIST do
32622: LD_ADDR_VAR 0 1
32626: PUSH
32627: LD_EXP 32
32631: PUSH
32632: FOR_IN
32633: IFFALSE 32656
// if IsLive ( i ) then
32635: LD_VAR 0 1
32639: PPUSH
32640: CALL_OW 300
32644: IFFALSE 32654
// cont = true ;
32646: LD_ADDR_VAR 0 2
32650: PUSH
32651: LD_INT 1
32653: ST_TO_ADDR
32654: GO 32632
32656: POP
32657: POP
// if cont then
32658: LD_VAR 0 2
32662: IFFALSE 32667
// enable else
32664: ENABLE
32665: GO 32684
// if UTEKLI_ARABI = 0 then
32667: LD_EXP 31
32671: PUSH
32672: LD_INT 0
32674: EQUAL
32675: IFFALSE 32684
// ChangeMissionObjectives ( M4a ) ;
32677: LD_STRING M4a
32679: PPUSH
32680: CALL_OW 337
// end ;
32684: PPOPN 2
32686: END
// every 0 0$6 trigger test_ukonceni_allowed do
32687: LD_LOC 62
32691: IFFALSE 32740
32693: GO 32695
32695: DISABLE
// begin if GetTech ( tech_AI , You ) = state_researched and GetTech ( tech_LasSight , You ) = state_researched then
32696: LD_INT 32
32698: PPUSH
32699: LD_EXP 3
32703: PPUSH
32704: CALL_OW 321
32708: PUSH
32709: LD_INT 2
32711: EQUAL
32712: PUSH
32713: LD_INT 12
32715: PPUSH
32716: LD_EXP 3
32720: PPUSH
32721: CALL_OW 321
32725: PUSH
32726: LD_INT 2
32728: EQUAL
32729: AND
32730: IFFALSE 32739
// Mission_end ( Ukonceni kdyz ma vynalezeno - dialogues 458 ) ;
32732: LD_STRING Ukonceni kdyz ma vynalezeno - dialogues 458
32734: PPUSH
32735: CALL 421 0 1
// enable ;
32739: ENABLE
// end ; end_of_file
32740: END
// export JMM ; export Joan_F ; export Gary ; export Khattam ; export Simms ; export Cyrus ; export Denis ; export Powell ; export Cornel ; export Ambase ; export Amlab ; export Amsiblab ; export Amelekt ; export COR_GO ; export Am_units ; export END_ATTACK ; export KHATTAM_PADA ; export Res ; var pom , pom1 , i ; var touchzone ; every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 0 do
32741: LD_INT 22
32743: PUSH
32744: LD_EXP 3
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 30
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PPUSH
32767: CALL_OW 69
32771: PUSH
32772: LD_INT 0
32774: GREATER
32775: IFFALSE 32837
32777: GO 32779
32779: DISABLE
// begin Ambase := FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_btype , b_depot ] ] ) ;
32780: LD_ADDR_EXP 51
32784: PUSH
32785: LD_INT 22
32787: PUSH
32788: LD_EXP 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: PUSH
32803: LD_INT 30
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: PPUSH
32818: CALL_OW 69
32822: ST_TO_ADDR
// Ambase := Ambase [ 1 ] ;
32823: LD_ADDR_EXP 51
32827: PUSH
32828: LD_EXP 51
32832: PUSH
32833: LD_INT 1
32835: ARRAY
32836: ST_TO_ADDR
// end ;
32837: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_btype , b_lab ] ] ) > 0 do
32838: LD_INT 22
32840: PUSH
32841: LD_EXP 3
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: EMPTY
32854: LIST
32855: PUSH
32856: LD_INT 30
32858: PUSH
32859: LD_INT 6
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: PPUSH
32871: CALL_OW 69
32875: PUSH
32876: LD_INT 0
32878: GREATER
32879: IFFALSE 32941
32881: GO 32883
32883: DISABLE
// begin Amlab := FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_btype , b_lab ] ] ) ;
32884: LD_ADDR_EXP 52
32888: PUSH
32889: LD_INT 22
32891: PUSH
32892: LD_EXP 3
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: PUSH
32907: LD_INT 30
32909: PUSH
32910: LD_INT 6
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: PPUSH
32922: CALL_OW 69
32926: ST_TO_ADDR
// Amlab := Amlab [ 1 ] ;
32927: LD_ADDR_EXP 52
32931: PUSH
32932: LD_EXP 52
32936: PUSH
32937: LD_INT 1
32939: ARRAY
32940: ST_TO_ADDR
// end ;
32941: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) > 0 do var je ;
32942: LD_INT 22
32944: PUSH
32945: LD_EXP 3
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 30
32959: PUSH
32960: LD_INT 8
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 30
32969: PUSH
32970: LD_INT 7
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PPUSH
32986: CALL_OW 69
32990: PUSH
32991: LD_INT 0
32993: GREATER
32994: IFFALSE 33150
32996: GO 32998
32998: DISABLE
32999: LD_INT 0
33001: PPUSH
// begin je = 0 ;
33002: LD_ADDR_VAR 0 1
33006: PUSH
33007: LD_INT 0
33009: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
33010: LD_ADDR_LOC 63
33014: PUSH
33015: LD_INT 22
33017: PUSH
33018: LD_EXP 3
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 30
33032: PUSH
33033: LD_INT 8
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 30
33042: PUSH
33043: LD_INT 7
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL_OW 69
33063: ST_TO_ADDR
// for i in pom do
33064: LD_ADDR_LOC 65
33068: PUSH
33069: LD_LOC 63
33073: PUSH
33074: FOR_IN
33075: IFFALSE 33125
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
33077: LD_LOC 65
33081: PPUSH
33082: LD_INT 1
33084: PPUSH
33085: CALL_OW 268
33089: PUSH
33090: LD_INT 11
33092: EQUAL
33093: PUSH
33094: LD_LOC 65
33098: PPUSH
33099: LD_INT 2
33101: PPUSH
33102: CALL_OW 268
33106: PUSH
33107: LD_INT 11
33109: EQUAL
33110: OR
33111: IFFALSE 33123
// je = i ;
33113: LD_ADDR_VAR 0 1
33117: PUSH
33118: LD_LOC 65
33122: ST_TO_ADDR
33123: GO 33074
33125: POP
33126: POP
// if je <> 0 then
33127: LD_VAR 0 1
33131: PUSH
33132: LD_INT 0
33134: NONEQUAL
33135: IFFALSE 33149
// Amsiblab := je else
33137: LD_ADDR_EXP 53
33141: PUSH
33142: LD_VAR 0 1
33146: ST_TO_ADDR
33147: GO 33150
// enable ;
33149: ENABLE
// end ;
33150: PPOPN 1
33152: END
// every 1 1$0 trigger COR_GO = 1 do
33153: LD_EXP 55
33157: PUSH
33158: LD_INT 1
33160: EQUAL
33161: IFFALSE 33213
33163: GO 33165
33165: DISABLE
// begin if ZIJE_MIKHAIL then
33166: LD_EXP 85
33170: IFFALSE 33213
// begin create_Cornel ;
33172: CALL 6056 0 0
// ComMoveXY ( Cornel , GetX ( JMM ) , GetY ( JMM ) ) ;
33176: LD_EXP 50
33180: PPUSH
33181: LD_EXP 42
33185: PPUSH
33186: CALL_OW 250
33190: PPUSH
33191: LD_EXP 42
33195: PPUSH
33196: CALL_OW 251
33200: PPUSH
33201: CALL_OW 111
// COR_GO = 2 ;
33205: LD_ADDR_EXP 55
33209: PUSH
33210: LD_INT 2
33212: ST_TO_ADDR
// end ; end ;
33213: END
// every 0 0$5 do
33214: GO 33216
33216: DISABLE
// begin Am_units = FilterAllUnits ( [ [ f_side , You ] ] ) ;
33217: LD_ADDR_EXP 56
33221: PUSH
33222: LD_INT 22
33224: PUSH
33225: LD_EXP 3
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: EMPTY
33235: LIST
33236: PPUSH
33237: CALL_OW 69
33241: ST_TO_ADDR
// enable ;
33242: ENABLE
// end ;
33243: END
// every 0 0$2 do
33244: GO 33246
33246: DISABLE
// begin for i in Am_units do
33247: LD_ADDR_LOC 65
33251: PUSH
33252: LD_EXP 56
33256: PUSH
33257: FOR_IN
33258: IFFALSE 33312
// begin pom = Attacks ( i ) ;
33260: LD_ADDR_LOC 63
33264: PUSH
33265: LD_LOC 65
33269: PPUSH
33270: CALL_OW 320
33274: ST_TO_ADDR
// if pom <> 0 then
33275: LD_LOC 63
33279: PUSH
33280: LD_INT 0
33282: NONEQUAL
33283: IFFALSE 33310
// if Getside ( pom ) = Arabi then
33285: LD_LOC 63
33289: PPUSH
33290: CALL_OW 255
33294: PUSH
33295: LD_EXP 1
33299: EQUAL
33300: IFFALSE 33310
// END_ATTACK = true ;
33302: LD_ADDR_EXP 57
33306: PUSH
33307: LD_INT 1
33309: ST_TO_ADDR
// end ;
33310: GO 33257
33312: POP
33313: POP
// enable ;
33314: ENABLE
// end ;
33315: END
// every 0 0$1 trigger KHATTAM_PADA do
33316: LD_EXP 58
33320: IFFALSE 33425
33322: GO 33324
33324: DISABLE
// begin while IsInUnit ( Khattam ) do
33325: LD_EXP 45
33329: PPUSH
33330: CALL_OW 310
33334: IFFALSE 33363
// begin ComExitBuilding ( Khattam ) ;
33336: LD_EXP 45
33340: PPUSH
33341: CALL_OW 122
// AddComExitVehicle ( Khattam ) ;
33345: LD_EXP 45
33349: PPUSH
33350: CALL_OW 181
// wait ( 0 0$1 ) ;
33354: LD_INT 35
33356: PPUSH
33357: CALL_OW 67
// end ;
33361: GO 33325
// SetSide ( Khattam , SideKhat ) ;
33363: LD_EXP 45
33367: PPUSH
33368: LD_EXP 8
33372: PPUSH
33373: CALL_OW 235
// ComMoveXY ( Khattam , 128 , 19 ) ;
33377: LD_EXP 45
33381: PPUSH
33382: LD_INT 128
33384: PPUSH
33385: LD_INT 19
33387: PPUSH
33388: CALL_OW 111
// while not IsInArea ( Khattam , KHOUT ) do
33392: LD_EXP 45
33396: PPUSH
33397: LD_INT 24
33399: PPUSH
33400: CALL_OW 308
33404: NOT
33405: IFFALSE 33416
// wait ( 0 0$1 ) ;
33407: LD_INT 35
33409: PPUSH
33410: CALL_OW 67
33414: GO 33392
// RemoveUnit ( Khattam ) ;
33416: LD_EXP 45
33420: PPUSH
33421: CALL_OW 64
// end ;
33425: END
// every 0 0$7 do
33426: GO 33428
33428: DISABLE
// begin if not IsOK ( Ambase ) then
33429: LD_EXP 51
33433: PPUSH
33434: CALL_OW 302
33438: NOT
33439: IFFALSE 33508
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_and ] , [ f_btype , b_depot ] ] ) ;
33441: LD_ADDR_LOC 63
33445: PUSH
33446: LD_INT 22
33448: PUSH
33449: LD_EXP 3
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: EMPTY
33462: LIST
33463: PUSH
33464: LD_INT 30
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: PPUSH
33479: CALL_OW 69
33483: ST_TO_ADDR
// if pom > 0 then
33484: LD_LOC 63
33488: PUSH
33489: LD_INT 0
33491: GREATER
33492: IFFALSE 33508
// Ambase = pom [ 1 ] ;
33494: LD_ADDR_EXP 51
33498: PUSH
33499: LD_LOC 63
33503: PUSH
33504: LD_INT 1
33506: ARRAY
33507: ST_TO_ADDR
// end ; enable ;
33508: ENABLE
// end ;
33509: END
// every 0 0$3 do
33510: GO 33512
33512: DISABLE
// begin pom = FilterUnitsInArea ( Abase , [ [ f_side , You ] , [ f_and ] , [ f_type , unit_building ] ] ) ;
33513: LD_ADDR_LOC 63
33517: PUSH
33518: LD_INT 2
33520: PPUSH
33521: LD_INT 22
33523: PUSH
33524: LD_EXP 3
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: PUSH
33539: LD_INT 21
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: PPUSH
33554: CALL_OW 70
33558: ST_TO_ADDR
// for i in pom do
33559: LD_ADDR_LOC 65
33563: PUSH
33564: LD_LOC 63
33568: PUSH
33569: FOR_IN
33570: IFFALSE 33612
// if GetX ( i ) = 70 and GetY ( i ) = 17 then
33572: LD_LOC 65
33576: PPUSH
33577: CALL_OW 250
33581: PUSH
33582: LD_INT 70
33584: EQUAL
33585: PUSH
33586: LD_LOC 65
33590: PPUSH
33591: CALL_OW 251
33595: PUSH
33596: LD_INT 17
33598: EQUAL
33599: AND
33600: IFFALSE 33610
// END_ATTACK = true ;
33602: LD_ADDR_EXP 57
33606: PUSH
33607: LD_INT 1
33609: ST_TO_ADDR
33610: GO 33569
33612: POP
33613: POP
// enable ;
33614: ENABLE
// end ;
33615: END
// every 0 0$1 do var i , pom ; var zabrano ;
33616: GO 33618
33618: DISABLE
33619: LD_INT 0
33621: PPUSH
33622: PPUSH
33623: PPUSH
// begin zabrano = false ;
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_INT 0
33631: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_barracks ] ] ) ;
33632: LD_ADDR_VAR 0 2
33636: PUSH
33637: LD_INT 22
33639: PUSH
33640: LD_EXP 3
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 30
33651: PUSH
33652: LD_INT 5
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PPUSH
33663: CALL_OW 69
33667: ST_TO_ADDR
// for i in pom do
33668: LD_ADDR_VAR 0 1
33672: PUSH
33673: LD_VAR 0 2
33677: PUSH
33678: FOR_IN
33679: IFFALSE 33706
// if GetNation ( i ) = nation_arabian then
33681: LD_VAR 0 1
33685: PPUSH
33686: CALL_OW 248
33690: PUSH
33691: LD_INT 2
33693: EQUAL
33694: IFFALSE 33704
// zabrano = true ;
33696: LD_ADDR_VAR 0 3
33700: PUSH
33701: LD_INT 1
33703: ST_TO_ADDR
33704: GO 33678
33706: POP
33707: POP
// if zabrano then
33708: LD_VAR 0 3
33712: IFFALSE 33729
// SetTech ( tech_Mortar , You , state_researched ) ;
33714: LD_INT 41
33716: PPUSH
33717: LD_EXP 3
33721: PPUSH
33722: LD_INT 2
33724: PPUSH
33725: CALL_OW 322
// enable ;
33729: ENABLE
// end ; end_of_file
33730: PPOPN 3
33732: END
// export timerusi ; export levelrusi ; export chassisrusi ; export zbranrusi ; export farusi ; export pocaut ; export wait2 ; export kutoku ; export ntanku ; export wait2new ; export rusi_zivoty ; export cekani_zradnych_arabu_pred_utokem ; export cas_druzi_arabaci ; export zbrane_na_turrety1 ; export zbrane_na_turrety2 ; export zbrane_na_turrety3 ; export cas_na_cekani_pred_nultym_utokem ; export wait3new ; export wait_bazooka_attack ; export wait_spec_baz ; export pocet_zivotu_utok_po_utoku ; export arabsky_utok_prichod ; export total_final ; export VIDEL_MIKHAILA ; export VI_O_GRANATECH ; export ZIJE_MIKHAIL ; export MNOZSTVI_SIBERITU ; export function SetDificultyLevels ; begin
33733: LD_INT 0
33735: PPUSH
// timerusi := [ 5 5$0 , 3 3$0 , 3 3$00 ] ;
33736: LD_ADDR_EXP 60
33740: PUSH
33741: LD_INT 10500
33743: PUSH
33744: LD_INT 6300
33746: PUSH
33747: LD_INT 6300
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: LIST
33754: ST_TO_ADDR
// levelrusi := [ 4 , 5 , 6 ] ;
33755: LD_ADDR_EXP 61
33759: PUSH
33760: LD_INT 4
33762: PUSH
33763: LD_INT 5
33765: PUSH
33766: LD_INT 6
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
// chassisrusi := [ ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ;
33774: LD_ADDR_EXP 62
33778: PUSH
33779: LD_INT 23
33781: PUSH
33782: LD_INT 22
33784: PUSH
33785: LD_INT 24
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
// zbranrusi := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
33793: LD_ADDR_EXP 63
33797: PUSH
33798: LD_INT 43
33800: PUSH
33801: LD_INT 44
33803: PUSH
33804: LD_INT 46
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: ST_TO_ADDR
// pocaut = [ 1 , 2 , 2 ] ;
33812: LD_ADDR_EXP 65
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: ST_TO_ADDR
// wait2 = [ 3 3$0 , 2 2$0 , 2 2$0 ] ;
33831: LD_ADDR_EXP 66
33835: PUSH
33836: LD_INT 6300
33838: PUSH
33839: LD_INT 4200
33841: PUSH
33842: LD_INT 4200
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: ST_TO_ADDR
// kutoku = [ 3 3$0 , 2 2$0 , 1 1$0 ] ;
33850: LD_ADDR_EXP 67
33854: PUSH
33855: LD_INT 6300
33857: PUSH
33858: LD_INT 4200
33860: PUSH
33861: LD_INT 2100
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: ST_TO_ADDR
// ntanku = [ 1 , 2 , 3 ] ;
33869: LD_ADDR_EXP 68
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 3
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: ST_TO_ADDR
// rusi_zivoty = [ 600 , 800 , 1000 ] ;
33888: LD_ADDR_EXP 70
33892: PUSH
33893: LD_INT 600
33895: PUSH
33896: LD_INT 800
33898: PUSH
33899: LD_INT 1000
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
// cekani_zradnych_arabu_pred_utokem = [ 0 0$15 , 0 0$7 , 0 0$3 ] ;
33907: LD_ADDR_EXP 71
33911: PUSH
33912: LD_INT 525
33914: PUSH
33915: LD_INT 245
33917: PUSH
33918: LD_INT 105
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: ST_TO_ADDR
// cas_druzi_arabaci = [ 0 0$20 , 0 0$10 , 0 0$3 ] ;
33926: LD_ADDR_EXP 72
33930: PUSH
33931: LD_INT 700
33933: PUSH
33934: LD_INT 350
33936: PUSH
33937: LD_INT 105
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: LIST
33944: ST_TO_ADDR
// zbrane_na_turrety1 = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun ] ;
33945: LD_ADDR_EXP 73
33949: PUSH
33950: LD_INT 42
33952: PUSH
33953: LD_INT 43
33955: PUSH
33956: LD_INT 43
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
// zbrane_na_turrety2 = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] ;
33964: LD_ADDR_EXP 74
33968: PUSH
33969: LD_INT 43
33971: PUSH
33972: LD_INT 43
33974: PUSH
33975: LD_INT 43
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: ST_TO_ADDR
// zbrane_na_turrety3 = [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
33983: LD_ADDR_EXP 75
33987: PUSH
33988: LD_INT 43
33990: PUSH
33991: LD_INT 44
33993: PUSH
33994: LD_INT 46
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// pocet_zivotu_utok_po_utoku = [ 600 , 800 , 1000 ] ;
34002: LD_ADDR_EXP 80
34006: PUSH
34007: LD_INT 600
34009: PUSH
34010: LD_INT 800
34012: PUSH
34013: LD_INT 1000
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// arabsky_utok_prichod = [ 30 30$0 , 20 20$0 , 15 15$0 ] ;
34021: LD_ADDR_EXP 81
34025: PUSH
34026: LD_INT 63000
34028: PUSH
34029: LD_INT 42000
34031: PUSH
34032: LD_INT 31500
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// total_final = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
34040: LD_ADDR_EXP 82
34044: PUSH
34045: LD_INT 21000
34047: PUSH
34048: LD_INT 16800
34050: PUSH
34051: LD_INT 10500
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: LIST
34058: ST_TO_ADDR
// cas_na_cekani_pred_nultym_utokem = [ 1 1$00 , 0 0$20 , 0 0$0 ] ;
34059: LD_ADDR_EXP 76
34063: PUSH
34064: LD_INT 2100
34066: PUSH
34067: LD_INT 700
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
// farusi := [ 4 4$0 , 3 3$0 , 3 3$0 ] ;
34078: LD_ADDR_EXP 64
34082: PUSH
34083: LD_INT 8400
34085: PUSH
34086: LD_INT 6300
34088: PUSH
34089: LD_INT 6300
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: ST_TO_ADDR
// wait2new = [ 5 5$30 , 4 4$30 , 3 3$30 ] ;
34097: LD_ADDR_EXP 69
34101: PUSH
34102: LD_INT 11550
34104: PUSH
34105: LD_INT 9450
34107: PUSH
34108: LD_INT 7350
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: LIST
34115: ST_TO_ADDR
// wait3new = [ 6 6$30 , 5 5$30 , 4 4$30 ] ;
34116: LD_ADDR_EXP 77
34120: PUSH
34121: LD_INT 13650
34123: PUSH
34124: LD_INT 11550
34126: PUSH
34127: LD_INT 9450
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: ST_TO_ADDR
// wait_bazooka_attack = [ 4 4$30 , 4 4$0 , 3 3$0 ] ;
34135: LD_ADDR_EXP 78
34139: PUSH
34140: LD_INT 9450
34142: PUSH
34143: LD_INT 8400
34145: PUSH
34146: LD_INT 6300
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: ST_TO_ADDR
// wait_spec_baz = [ 4 4$0 , 5 5$0 , 4 4$0 ] end ;
34154: LD_ADDR_EXP 79
34158: PUSH
34159: LD_INT 8400
34161: PUSH
34162: LD_INT 10500
34164: PUSH
34165: LD_INT 8400
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: ST_TO_ADDR
34173: LD_VAR 0 1
34177: RET
// export cas ; every 0 0$10 do var pom ;
34178: GO 34180
34180: DISABLE
34181: LD_INT 0
34183: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
34184: LD_EXP 87
34188: PUSH
34189: LD_INT 3
34191: ARRAY
34192: PUSH
34193: LD_INT 10
34195: PLUS
34196: PUSH
34197: LD_INT 60
34199: EQUAL
34200: IFFALSE 34236
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
34202: LD_ADDR_EXP 87
34206: PUSH
34207: LD_EXP 87
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PUSH
34216: LD_INT 1
34218: PLUS
34219: PUSH
34220: LD_EXP 87
34224: PUSH
34225: LD_INT 2
34227: ARRAY
34228: ADD
34229: PUSH
34230: LD_INT 0
34232: ADD
34233: ST_TO_ADDR
34234: GO 34274
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
34236: LD_ADDR_EXP 87
34240: PUSH
34241: LD_EXP 87
34245: PUSH
34246: LD_INT 1
34248: ARRAY
34249: PUSH
34250: LD_EXP 87
34254: PUSH
34255: LD_INT 2
34257: ARRAY
34258: ADD
34259: PUSH
34260: LD_EXP 87
34264: PUSH
34265: LD_INT 3
34267: ARRAY
34268: PUSH
34269: LD_INT 10
34271: PLUS
34272: ADD
34273: ST_TO_ADDR
// debug_strings = [ cas ] ;
34274: LD_ADDR_OWVAR 48
34278: PUSH
34279: LD_EXP 87
34283: PUSH
34284: EMPTY
34285: LIST
34286: ST_TO_ADDR
// enable ;
34287: ENABLE
// end ;
34288: PPOPN 1
34290: END
// export function pojmenuj_epsilon ( bas ) ; begin
34291: LD_INT 0
34293: PPUSH
// SetBName ( bas , epsilon ) ;
34294: LD_VAR 0 1
34298: PPUSH
34299: LD_STRING epsilon
34301: PPUSH
34302: CALL_OW 500
// end ; end_of_file
34306: LD_VAR 0 2
34310: RET
// every 0 0$2 + 0 0$0.1 do
34311: GO 34313
34313: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
34314: LD_INT 22
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 25
34329: PUSH
34330: LD_INT 12
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 25
34339: PUSH
34340: LD_INT 16
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 25
34349: PUSH
34350: LD_INT 15
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 25
34359: PUSH
34360: LD_INT 17
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PPUSH
34378: CALL_OW 69
34382: PUSH
34383: LD_INT 22
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 21
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 3
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: LD_INT 25
34411: PUSH
34412: LD_INT 12
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 25
34421: PUSH
34422: LD_INT 16
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 25
34431: PUSH
34432: LD_INT 15
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 25
34441: PUSH
34442: LD_INT 17
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: PPUSH
34465: CALL_OW 69
34469: GREATER
34470: IFFALSE 34481
// begin SetAchievement ( ACH_POTA ) ;
34472: LD_STRING ACH_POTA
34474: PPUSH
34475: CALL_OW 543
// exit ;
34479: GO 34482
// end ; enable ;
34481: ENABLE
// end ;
34482: END
