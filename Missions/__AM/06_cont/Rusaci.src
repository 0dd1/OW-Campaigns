//skupiny rus jednotek
export people, sol, sci, mec, eng;
var cars, cargo, scout, attack, defence;
var scout1, scout2;
var builds, forts;
//cesty
var scout1_pb, scout1_pr, scout1_ptr1, scout1_ptl1, scout1_ptr2, scout1_pta, scout1_pl, scout1_pa, scout1_pd1, scout1_pd2;
var broken;
var attack_l, attack_m, attack_r;
var to_defence, to_attack, to_scout, to_cargo;

var sec;


every 0$0.1 do
var temp1;
begin
// skupiny ruskych jednotek
   to_defence:=false;
   to_attack:=false;
   to_scout:=false;

   temp1:=FilterAllUnits([f_side, russians]);
   ComRemember(temp1);

   people:=UnitFilter(temp1, [f_type,unit_human]);
   sol:=UnitFilter(people, [f_class,class_soldier]);
   sci:=UnitFilter(people, [f_class,class_scientistic]);
   mec:=UnitFilter(people, [f_class,class_mechanic]);
   eng:=UnitFilter(people, [f_class,class_engineer]);

   cars:=UnitFilter(temp1, [f_type,unit_vehicle]);
   broken:=[];
   cargo:=[cargo_1];
   scout:=[scout_1, scout_2];
   scout1:=[scout_1];
   scout2:=[scout_2];
   defence:=[scout_2, defence_1, defence_2];
   attack:=[scout_1, scout_2, defence_1];

   builds:=UnitFilter(temp1, [f_type,unit_building]);
   forts:=[fort1, fort2, fort3, fort4, fort5];

// definice cest
//   scout1_pb:=[107,79, 96,66, 92,53];
   scout1_pb:=[92,53];
   scout1_pr:=[102,56, 110,59, 119,60, 120,64, 109,60, 98,55];
   scout1_ptr1:=[95,50, 92,46, 90,39, 87,30, -8, 97,25, 80,32, 82,42];
   scout1_ptr2:=[90,42, 91,30, 81,13, 68,12, 67,21, 57,25, 69,21, 82,39, 87,48];
   scout1_pta:=[90,42, 91,30, 81,13, 68,12, 67,21, 57,25, 41,20, 29,23, 42,41, 85,49];
   scout1_ptl1:=[68,88, 51,78, 40,57, 43,42, 30,25, 31,16, 34,36, 45,69, 64,87, 98,97];
   scout1_pl:=[84,50, 70,47, 67,46, 62,49, 55,49, -5, 50,43, 60,49, 71,47, 83,49];
   scout1_pa:=[84,50, 70,47, 60,44, 53,44, 43,41, 39,57, 43,71, 52,82, 63,87, 109,95];
   scout1_pd1:=[71,81, 62,63, 61,74, 79,96];
   scout1_pd2:=[68,88, 51,78, 40,57, 43,42, 45,69, 64,87, 98,97];
   attack_l:=[60,86, 37,44];
   attack_m:=[89,53, 41,42];
   attack_r:=[88,55, 82,13];
end;

every 0$6.0 do
begin
    depart(scout diff broken, sol union mec, scout1_pb, true, false);
    take_path(scout1 diff broken, scout1_pr, true);
    take_path(scout2 diff broken, scout1_pl, true);
    AddComReturn(scout diff broken);
end;
every 0$56.0 + 0$10 do
var x, ok, i;
begin
    ok:=true;
    for i in scout do begin
        if HasTask(i) then
           ok:=false;
    end;
    if ok then begin
      x:=Rand(1,7);
      if go_up then begin
         x:=Rand(3,4);
         go_up:=false;
      end;
      case x of
           1: begin
              depart(scout1 diff broken, sol, scout1_pb, true, false);
              if more_scouting then take_path(scout1 diff broken, scout1_ptr1, true);
              take_path(scout1 diff broken, scout1_pl, true);
              depart(scout2 diff broken, sol, scout1_pd1, true, false);
              AddComReturn(scout diff broken);
           end;
           2: begin
              depart(scout1 diff broken, sol, scout1_pb, true, false);
              if more_scouting then take_path(scout1 diff broken, scout1_ptr1, true);
              depart(scout2 diff broken, sol, scout1_pd2, true, false);
              AddComReturn(scout1 diff broken);
           end;
           3: begin
              depart(scout diff broken, sol, scout1_pb, true, false);
              if more_scouting then take_path(scout diff broken, scout1_ptr2, true);
              AddComReturn(scout diff broken);
           end;
           4: begin
              if more_scouting then depart(scout diff broken, sol, scout1_pta, true, false)
                               else begin
                                    depart(scout1 diff broken, sol, scout1_pd2, true, false);
                                    depart(scout2 diff broken, sol, scout1_ptr1, true, false);
                               end;
              AddComReturn(scout diff broken);
           end;
           5: begin
              depart(scout diff broken, sol, scout1_pb, true, false);
              take_path(scout1 diff broken, scout1_pl, true);
              AddComWait(scout2 diff broken, 20);
              if more_scouting then take_path(scout2 diff broken, scout1_ptl1, true)
                               else take_path(scout2 diff broken, scout1_pd2, true);
              AddComReturn(scout diff broken);
           end;
           6: begin
              depart(scout diff broken, sol, scout1_pb, true, false);
              take_path(scout1 diff broken, scout1_pl, true);
              AddComWait(scout2 diff broken, 20);
              AddComReturn(scout diff broken);
           end;
           7: begin
              depart(scout diff broken, sol, scout1_pb, true, false);
              take_path(scout1 diff broken, scout1_pa, true);
              AddComReturn(scout2 diff broken);
              take_path(scout2 diff broken, scout1_pd1, true);
              AddComReturn(scout diff broken);
           end;
      end;
    end;
    enable;//------------
end;

// vojaci se zdrzuji v forts
every 0$7.0 do
begin
    full_forts(forts, sol);
    enable;//------------
end;


// mechanici se zdrzuji v factory
every 0$5.0 do
var i;
begin
    for i in mec do begin
        if not IsBusy(i) or not IsInArea(i, base) and GetSide(i)<>you then
           ComEnterUnit(i, fact1);
    end;
    enable;//------------
end;

// inzenyri se zdrzuji v depotu pri utoku
every 0$5.0 do
var i;
begin
    if under_attack then
      for i in eng do begin
          if not IsBusy(i) and GetSide(i)<>you then
             ComEnterUnit(i, depot1);
      end
    else
      ComExitBuilding(depot1);
    enable;//------------
end;

// vedci se zdrzuji v laboratori
every 0$5.0 do
var i;
begin
    for i in sci do begin
        if not IsBusy(i) and GetSide(i)<>you then
           ComEnterUnit(i, lab1);
    end;
    enable;//------------
end;



// doplnovani paliva v zakladne
every 0$1.0 do
var set_fuel, fuel;
begin
    for set_fuel in FilterUnitsInArea(base, [[f_type, unit_vehicle], [f_side, russians]]) do begin
        fuel:=GetFuel(set_fuel);
        if fuel<=80 then
            SetFuel(set_fuel, fuel+20);
    end;
    enable;//-----------
end;

// opravovani aut v zakladne
every 0$1.0 do
var to_rep, prednost;
begin
    prednost:=FilterUnitsInArea(base, [[f_type, unit_vehicle], [f_side, russians]]) isect broken;
    if prednost then
        for to_rep in prednost do begin
            if IsInArea(to_rep, base) then
                if GetLives(to_rep)<1000 then begin
                   ComExitBuilding(mec);
                   AddComRepairVehicle(mec, to_rep);
                   if GetClass(IsDrivenBy(to_rep))=class_mechanic then begin
                      ComExitVehicle(IsDrivenBy(to_rep));
                      AddComRepairVehicle(IsDrivenBy(to_rep), to_rep);
                   end;
                end
                else begin
                   broken:=broken diff to_rep;
                   ComReturn(to_rep);
                end;
        end
    else
        for to_rep in FilterUnitsInArea(base, [[f_type, unit_vehicle], [f_side, russians]]) do begin
            if IsInArea(to_rep, base) then
                if GetLives(to_rep)<1000 then begin
                   ComExitBuilding(mec);
                   AddComRepairVehicle(mec, to_rep);
                   if GetClass(IsDrivenBy(to_rep))=class_mechanic then begin
                      ComExitVehicle(IsDrivenBy(to_rep));
                      AddComRepairVehicle(IsDrivenBy(to_rep), to_rep);
                   end;
                end;
        end;

    enable;//-----------
end;

// poslani velmi poskozeneho auta zpet na zakladnu
every 0$0.5 do
var i, a;
begin
     for i in cars do begin
         if GetLives(i)<550 then begin
            ComMoveXY(i, 112, 89);
            broken:=broken union i;
         end;
         if i in cargo and GetLives(i)<800 then begin
            ComMoveXY(i, 112, 89);
            broken:=broken union i;
         end;
     end;
    enable;//-----------
end;


//rusaci jezdi pro krabice
var zasek_cargo;
every 1$0 do
var j, pojedou, new;
begin
    SetFuel(cargo, 100);
    if not HasTask(Cargo) and GetLives(Cargo)>=900 and crates>=2 then begin
       new:=[];
       pojedou:=find_drivers(cargo, sol, false);
       wait_for_drivers(pojedou);
       for j:=1 to 2 do begin
           if InArea(crates[j][1], crates[j][2], pod_cestou) then begin
              AddComCollect(pojedou, crates[j][1], crates[j][2]);
           end;
       end;
       for j:=3 to crates do begin
           new:=new ^ [crates[j]];
       end;
       crates:=new;
       AddComReturn(pojedou);
       zasek_cargo:=1;
    end
    else begin
       zasek_cargo:=zasek_cargo+1;
       if zasek_cargo>5 then begin
          pojedou:=find_drivers(cargo, sol, false);
          wait_for_drivers(pojedou);
          ComReturn(cargo);
       end;
    end;
        

    enable;//-----------
end;

every 0$1 do
var rusi, i;
begin
   rusi:=FilterAllUnits([f_not,[f_type,unit_building],[f_side,russians],[f_see,you]]);
   if rusi then begin
     if FilterAllUnits([f_not,[f_type,unit_building],[f_side,you],[f_see,russians]]) diff prilet_tvoji then begin
         attacky:=attacky+1;
         if not more_scouting and attacky>attack_to_scouting then begin
//            Msg('more_scouting');
            more_scouting:=true;
            go_up:=true;
         end;

          for i in scout diff broken do begin
    //         if i in attacking then
    //             AddComAttackUnit(i, NearestUnitToUnit(FilterAllUnits([f_not,[f_type,unit_building],[f_side,you],[f_dist,i,8]]), i))
    //         else
                 ComAttackUnit(i, NearestUnitToUnit(FilterAllUnits([f_not,[f_type,unit_building],[f_side,you],[f_dist,i,8]]), i));
    //         attacking:=attacking union i;
          end;
      end;
   end;
   enable;//-----------
end;
every 13$0 do
begin
     wait(start_scouting);
     more_scouting:=true;
     go_up:=true;
end;

every 0$3 + 0$30 do
var all1, all, parked, ridici, i, rid, c;
begin
   all1:=FilterUnitsInArea(near_base, [[f_side,russians],[f_type,unit_vehicle]]);
   for i in all1 do
      if not UnitsInside(i) then
       all:=all ^ [i];
   parked:=FilterUnitsInArea(parkoviste, [[f_side,russians],[f_type,unit_vehicle]]);
   ridici:=UnitFilter(sol ^ sci ^ eng, [f_outside]);
   all:=all diff parked;
   all:=all diff [0];
   all:=all diff cargo;
   if ridici then
     for i in all do begin
         rid:=ridici[1];
         ridici:=ridici diff rid;
         sol:=sol diff rid;
         sci:=sci diff rid;
         eng:=eng diff rid;
         case true of
            i in scout1: begin scout1:=scout1 diff i; c:=1; end;
            i in scout2: begin scout2:=scout2 diff i; c:=2; end;
            i in scout: begin scout:=scout diff i; c:=3; end;
            i in attack: begin attack:=attack diff i; c:=4; end;
            i in defence: begin defence:=defence diff i; c:=4; end;
            i in cargo: begin cargo:=cargo diff i; c:=5; end;
         end;

         ComEnterUnit(rid, i);
//         msg([rid,i]);
         while not UnitsInside(i) do
               wait(0$1);
         ComMoveToArea(i, parkoviste);
//         msg(2);
         while not IsInArea(i, parkoviste) do
               wait(0$1);
         ComExitVehicle(i);
//         msg(3);
         while UnitsInside(i) do
               wait(0$1);
         ComReturn(rid);
//         msg(4);

         case c of
            1: begin scout1:=scout1 ^ i; end;
            2: begin scout2:=scout2 ^ i; end;
            3: begin scout:=scout  ^ i; end;
            4: begin attack:=attack ^ i; end;
            5: begin defence:=defence ^ i; end;
            6: begin cargo:=cargo ^ i; end;
         end;

         if GetClass(rid)=class_soldier then sol:=sol union rid;
         if GetClass(rid)=class_scientistic then sci:=sci union rid;
         if GetClass(rid)=class_engineer then eng:=eng union rid;
     end;
   enable;
end;

{
every 0$1 trigger attacking do
begin
     attacky:=attacky+1;
     if not more_scouting and attacky>30 then begin
        SM('more_scouting');
        more_scouting:=true;
     end;
     enable;//-----------
end;
}
var add_h;
every 0$15.0 do
var a;
begin
   if not IsBusy(fact1) and GetSide(fact1)<>you then begin
     if attacky>70 and defence<4 then begin
         ComEnterUnit(FilterUnitsInArea(base, [[f_class,class_mechanic],[f_side,russians]]), fact1);
         ComConstruct(fact1, ru_heavy_tracked, control_manual, engine_combustion, ru_heavy_gun);
         to_defence:=true;
     end;
     if attacky>30 and scout<2 then begin
         ComEnterUnit(FilterUnitsInArea(base, [[f_class,class_mechanic],[f_side,russians]]), fact1);
         ComConstruct(fact1, ru_medium_tracked, control_manual, engine_combustion, ru_heavy_machine_gun);
         to_scout:=true;
         to_attack:=true;
     end;
     if attacky>90 and attack<4 then begin
         ComEnterUnit(FilterUnitsInArea(base, [[f_class,class_mechanic],[f_side,russians]]), fact1);
         ComConstruct(fact1, ru_heavy_tracked, control_manual, engine_combustion, ru_heavy_machine_gun);
         to_attack:=true;
     end;
     if cargo<1 then begin
         ComEnterUnit(FilterUnitsInArea(base, [[f_class,class_mechanic],[f_side,russians]]), fact1);
         ComConstruct(fact1, ru_medium_tracked, control_manual, engine_combustion, ru_cargo_bay);
         to_cargo:=true;
     end;
     if (sol+mec+eng+sci>8) and (add_h<6) then begin
       add_h:=add_h+1;
       if sol<8 then begin
         InitUc;
         InitHc;
         uc_nation:=nation_russian;
         uc_side:=russians;
         PrepareSoldier(0, 6);
         a:=CreateHuman;
         PlaceUnitXYR(a, 119,98,5, false);
         wait(0$6);
         sol:=sol ^ a;
         ComMoveToArea(a, base);
       end
       else if mec<2 then begin
         InitUc;
         InitHc;
         uc_nation:=nation_russian;
         PrepareMechanic(0, 6);
         a:=CreateHuman;
         PlaceUnitXYR(a, 119,98,5, false);
         wait(0$6);
         mec:=mec ^ a;
         ComMoveToArea(a, base);
       end
       else if eng<1 then begin
         InitUc;
         InitHc;
         uc_nation:=nation_russian;
         PrepareEngineer(0, 6);
         a:=CreateHuman;
         PlaceUnitXYR(a, 119,99,5, false);
         wait(0$6);
         eng:=eng ^ a;
         ComMoveToArea(a, base);
       end
       else if sci<1 then begin
         InitUc;
         InitHc;
         uc_nation:=nation_russian;
         PrepareScientist(0, 6);
         a:=CreateHuman;
         PlaceUnitXYR(a, 119,99,5, false);
         wait(0$6);
         sci:=sci ^ a;
         ComMoveToArea(a, base);
       end;
     end;
   end;
   enable;//-----------
end;

every 0$3 do
var sc;
begin
     sol:=UnitFilter(sol, [f_alive]);
     eng:=UnitFilter(eng, [f_alive]);
     mec:=UnitFilter(mec, [f_alive]);
     sci:=UnitFilter(sci, [f_alive]);
     defence:=UnitFilter(defence, [f_alive]);
     cargo:=UnitFilter(cargo, [f_alive]);
     attack:=UnitFilter(attack, [f_alive]);
     scout:=UnitFilter(scout, [f_alive]);
     broken:=UnitFilter(broken, [f_alive]);
     sc:=split(scout);
     scout1:=sc[1];
     scout2:=sc[2];
     forts:=UnitFilter(forts, [f_alive]);
end;
on VehicleCaptured(vehnew, vehold, origside, hum) do
begin
     if origside=russians then begin
         sol:=sol diff vehold;
         eng:=eng diff vehold;
         mec:=mec diff vehold;
         sci:=sci diff vehold;
         defence:=defence diff vehold;
         cargo:=cargo diff vehold;
         attack:=attack diff vehold;
         scout:=scout diff vehold;
         broken:=broken diff vehold;
         scout1:=scout1 diff vehold;
         scout2:=scout2 diff vehold;
     end;
end;

on UnitDestroyed(un) do
begin
     if un=JMM then begin
       Disable(0);
       YouLost('JMM');
     end;

     if un = Kurt then
        begin
        SA_OnKurtKilled;
        exit;
        end;

     sol:=sol diff un;
     eng:=eng diff un;
     mec:=mec diff un;
     sci:=sci diff un;
     defence:=defence diff un;
     cargo:=cargo diff un;
     attack:=attack diff un;
     scout:=scout diff un;
     broken:=broken diff un;
     scout1:=scout1 diff un;
     scout2:=scout2 diff un;
     forts:=forts diff un;
end;

on VehicleConstructed(veh, fact) do
var i, sc;
begin
     if GetSide(fact)=russians then begin
        ComMoveToArea(veh, parkoviste);
        while not IsInArea(veh, parkoviste) do
              Wait(0$1);
        ComExitVehicle(veh);
        ComRemember(veh);
        if to_defence then begin
           defence:=defence union veh;
        end;
        if to_cargo then begin
           cargo:=cargo union veh;
        end;
        if to_attack then begin
           attack:=attack union veh;
        end;
        if to_scout then begin
           scout:=scout union veh;
           sc:=split(scout);
           scout1:=sc[1];
           scout2:=sc[2];
        end;
        to_cargo:=false;
        to_scout:=false;
        to_attack:=false;
        to_defence:=false;
     end;
end;

every 0$30 trigger attacky>odplata_1 do
var ubase;
begin
     attacky:=0;
     more_scouting:=false;
     ubase:=FilterAllUnits([[f_type, unit_building], [f_side, you]]);
     if ubase then begin
       case Rand(1,3) of
       1: depart(attack diff broken, sol, attack_l, true, false);
       2: depart(attack diff broken, sol, attack_m, true, false);
       3: depart(attack diff broken, sol, attack_r, true, false);
       end;
       AddComAgressiveMove(attack diff broken, GetX(ubase[1]), GetY(ubase[1]));
     end;
end;

every 4$30 trigger attacky>odplata_2 do
var ubase;
begin
     attacky:=0;
     ubase:=FilterAllUnits([[f_type, unit_building], [f_side, you]]);
     if ubase then begin
       case Rand(1,3) of
       1: depart(attack diff broken, sol, attack_l, true, false);
       2: depart(attack diff broken, sol, attack_m, true, false);
       3: depart(attack diff broken, sol, attack_r, true, false);
       end;
       AddComAgressiveMove(attack diff broken, GetX(ubase[1]), GetY(ubase[1]));
     end;
     enable;//----------------
end;

every 8$30 trigger more_scouting do
var ubase, a;
begin
     ubase:=FilterAllUnits([[f_type, unit_building], [f_side, you]]);
     a:=attack diff broken;
     a:=split(a);
     if ubase then begin
       case Rand(1,3) of
       1: depart(a, sol, attack_l, true, false);
       2: depart(a, sol, attack_m, true, false);
       3: depart(a, sol, attack_r, true, false);
       end;
       AddComAgressiveMove(a[1], GetX(ubase[1]), GetY(ubase[1]));
     end;
end;

every 16$30 trigger more_scouting do
var ubase, at;
begin
     ubase:=FilterAllUnits([[f_type, unit_building], [f_side, you]]);
     if ubase then begin
       at:=split(attack diff broken);
       case Rand(1,3) of
       1: depart(at[1], sol, attack_l, true, false);
       2: depart(at[1], sol, attack_m, true, false);
       3: depart(at[1], sol, attack_r, true, false);
       end;
       case Rand(1,3) of
       1: depart(at[2], sol, attack_l, true, false);
       2: depart(at[2], sol, attack_m, true, false);
       3: depart(at[2], sol, attack_r, true, false);
       end;
       AddComAgressiveMove(at[1], GetX(ubase[1]), GetY(ubase[1]));
       AddComAgressiveMove(at[2], GetX(ubase[1]), GetY(ubase[1]));
     end;
end;

every 32$30 do
var ubase;
begin
     ubase:=FilterAllUnits([[f_type, unit_building], [f_side, you]]);
     if ubase then begin
       case Rand(1,3) of
       1: depart(attack diff broken, sol ^ sci, attack_l, true, false);
       2: depart(attack diff broken, sol ^ sci, attack_m, true, false);
       3: depart(attack diff broken, sol ^ sci, attack_r, true, false);
       end;
       AddComAgressiveMove(attack diff broken, GetX(ubase[1]), GetY(ubase[1]));
     end;
end;

every 40$30 do
var ubase, at;
begin
     ubase:=FilterAllUnits([[f_type, unit_building], [f_side, you]]);
     if ubase then begin
       at:=split((attack union scout) diff broken);
       case Rand(1,3) of
       1: depart(at[1], sol ^ sci ^ eng, attack_l, true, false);
       2: depart(at[1], sol ^ sci ^ eng, attack_m, true, false);
       3: depart(at[1], sol ^ sci ^ eng, attack_r, true, false);
       end;
       case Rand(1,3) of
       1: depart(at[2], sol ^ sci ^ eng, attack_l, true, false);
       2: depart(at[2], sol ^ sci ^ eng, attack_m, true, false);
       3: depart(at[2], sol ^ sci ^ eng, attack_r, true, false);
       end;
       AddComAgressiveMove(at[1], GetX(ubase[1]), GetY(ubase[1]));
       AddComAgressiveMove(at[2], GetX(ubase[1]), GetY(ubase[1]));
     end;
end;

export function count_crates;
var deps, i;
begin
   deps:=FilterAllUnits([[f_side,you],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]]]);
   for i in deps do
      result:=result+GetResourceType(GetBase(i), mat_cans);
end;
every 0$1 do
var zbyva, prebyva;
begin
     sec:=sec+1;
     zbyva:=MaterialNavic-count_crates;
     if zbyva<0 then begin
        prebyva:=zbyva*(-1);
        zbyva:=0;
     end;
     display_strings:=['#Am06-1',zbyva,'#Am06-2',50$0 - (tick-mytick)];
//     debug_strings:=[[attacky], [sec div 60, sec mod 60], zbyva, prebyva];
     enable;//------------
end;

// obrana base
every 0$2 trigger FilterUnitsInArea(near_base, [f_side,you]) do
var i;
begin
     under_attack:=true;
     for i in FilterUnitsInArea(near_base, [f_side,you]) do
         ComAttackUnit(defence union attack union scout, i);
     enable;//------------
end;

every 0$10 trigger not FilterUnitsInArea(near_base, [f_side,you]) do
var i;
begin
     under_attack:=false;
     enable;//------------
end;