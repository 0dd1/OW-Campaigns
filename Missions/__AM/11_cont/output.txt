// export You , You2 , Arabi , Arabi2 ; export mregistry1 , MD1 ; export mregistry2 , MD2 ; starting begin RandomizeAll ;
   0: CALL_OW 11
// Randomize ;
   4: CALL_OW 10
// debug_strings := [ ] ;
   8: LD_ADDR_OWVAR 48
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
  15: LD_ADDR_EXP 58
  19: PUSH
  20: LD_INT 0
  22: PUSH
  23: LD_STRING :
  25: PUSH
  26: LD_INT 0
  28: PUSH
  29: EMPTY
  30: LIST
  31: LIST
  32: LIST
  33: ST_TO_ADDR
// InitUc ;
  34: CALL_OW 18
// InitHc ;
  38: CALL_OW 19
// InitVc ;
  42: CALL_OW 20
// You := 1 ;
  46: LD_ADDR_EXP 1
  50: PUSH
  51: LD_INT 1
  53: ST_TO_ADDR
// You2 := 4 ;
  54: LD_ADDR_EXP 2
  58: PUSH
  59: LD_INT 4
  61: ST_TO_ADDR
// Arabi := 2 ;
  62: LD_ADDR_EXP 3
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// Arabi2 := 5 ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_INT 5
  77: ST_TO_ADDR
// SetBName ( A1_dep , dammam ) ;
  78: LD_INT 4
  80: PPUSH
  81: LD_STRING dammam
  83: PPUSH
  84: CALL_OW 500
// SetBName ( A2_dep , jeddah ) ;
  88: LD_INT 46
  90: PPUSH
  91: LD_STRING jeddah
  93: PPUSH
  94: CALL_OW 500
// SetBName ( A3_dep , riyadh ) ;
  98: LD_INT 28
 100: PPUSH
 101: LD_STRING riyadh
 103: PPUSH
 104: CALL_OW 500
// disable ( 80 ) ;
 108: LD_INT 80
 110: DISABLE_MARKED
// SET_DIFFICULTY ;
 111: CALL 25046 0 0
// load_postavy ;
 115: CALL 1562 0 0
// dodej_skily ;
 119: CALL 8405 0 0
// mregistry1 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD1_guard ] , [ mc_reg_area_to_protect , MD1_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 123: LD_ADDR_EXP 5
 127: PUSH
 128: LD_EXP 3
 132: PPUSH
 133: LD_INT 2
 135: PUSH
 136: LD_INT 27
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 3
 145: PUSH
 146: LD_INT 28
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PUSH
 153: LD_INT 5
 155: PUSH
 156: LD_INT 175
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: LIST
 167: PPUSH
 168: CALL_OW 399
 172: ST_TO_ADDR
// mregistry2 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD2_guard ] , [ mc_reg_area_to_protect , MD2_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_EXP 3
 182: PPUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 32
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: PUSH
 193: LD_INT 3
 195: PUSH
 196: LD_INT 33
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: PUSH
 203: LD_INT 5
 205: PUSH
 206: LD_INT 175
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PPUSH
 218: CALL_OW 399
 222: ST_TO_ADDR
// MD1 = McDefend ( 2 , mregistry1 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu2 , A2_nau2 , MDopka1 , MDopka2 , A2_bu3 ] , [ [ mc_area_dont_leave , MD1_guard ] ] ) ;
 223: LD_ADDR_EXP 6
 227: PUSH
 228: LD_INT 2
 230: PPUSH
 231: LD_EXP 5
 235: PPUSH
 236: LD_INT 46
 238: PUSH
 239: LD_INT 61
 241: PUSH
 242: LD_INT 48
 244: PUSH
 245: LD_INT 50
 247: PUSH
 248: LD_INT 107
 250: PUSH
 251: LD_INT 63
 253: PUSH
 254: LD_INT 108
 256: PUSH
 257: LD_INT 117
 259: PUSH
 260: LD_INT 116
 262: PUSH
 263: LD_INT 47
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: PPUSH
 278: LD_INT 2
 280: PUSH
 281: LD_INT 27
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: EMPTY
 289: LIST
 290: PPUSH
 291: CALL_OW 401
 295: ST_TO_ADDR
// MD1 = McDefend ( 1 , mregistry2 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu3 , A2_bu6 , A2_bu5 , A2_nau2 , MDopka1 , MDopka2 ] , [ [ mc_area_dont_leave , MD2_guard ] ] ) ;
 296: LD_ADDR_EXP 6
 300: PUSH
 301: LD_INT 1
 303: PPUSH
 304: LD_EXP 7
 308: PPUSH
 309: LD_INT 46
 311: PUSH
 312: LD_INT 61
 314: PUSH
 315: LD_INT 48
 317: PUSH
 318: LD_INT 50
 320: PUSH
 321: LD_INT 107
 323: PUSH
 324: LD_INT 47
 326: PUSH
 327: LD_INT 59
 329: PUSH
 330: LD_INT 62
 332: PUSH
 333: LD_INT 108
 335: PUSH
 336: LD_INT 117
 338: PUSH
 339: LD_INT 116
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: PPUSH
 355: LD_INT 2
 357: PUSH
 358: LD_INT 32
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: PPUSH
 368: CALL_OW 401
 372: ST_TO_ADDR
// A1_dobyta = false ;
 373: LD_ADDR_EXP 27
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// A2_dobyta = false ;
 381: LD_ADDR_EXP 28
 385: PUSH
 386: LD_INT 0
 388: ST_TO_ADDR
// A3_dobyta = false ;
 389: LD_ADDR_EXP 29
 393: PUSH
 394: LD_INT 0
 396: ST_TO_ADDR
// vojcli_base_2 ;
 397: CALL 8970 0 0
// vojcli_base_3 ;
 401: CALL 9668 0 0
// InGameOn ;
 405: CALL_OW 8
// Odebirani = false ;
 409: LD_ADDR_EXP 44
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// Pruzkumnik := false ;
 417: LD_ADDR_EXP 30
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// oposoldier := 0 ;
 425: LD_ADDR_EXP 45
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// choose_vojaky ;
 433: CALL 10947 0 0
// create_amici ;
 437: CALL 7812 0 0
// uklid_arabu ;
 441: CALL 17215 0 0
// create_ar_protiofenzivu ;
 445: CALL 7941 0 0
// create_arabske_utoky_behem_mise ;
 449: CALL 12350 0 0
// end ;
 453: END
// export function end_of_mission_time ; begin
 454: LD_INT 0
 456: PPUSH
// YouLost ( Command ) ;
 457: LD_STRING Command
 459: PPUSH
 460: CALL_OW 104
// end ;
 464: LD_VAR 0 1
 468: RET
// on UnitDestroyed ( un ) do begin if un = JMM then
 469: LD_VAR 0 1
 473: PUSH
 474: LD_EXP 31
 478: EQUAL
 479: IFFALSE 488
// YouLost ( JMM ) ;
 481: LD_STRING JMM
 483: PPUSH
 484: CALL_OW 104
// enable ;
 488: ENABLE
// end ;
 489: PPOPN 1
 491: END
// on EndTheMissionRaised ( void ) do begin konec_mise ;
 492: CALL 499 0 0
// end ;
 496: PPOPN 1
 498: END
// export function konec_mise ; var pommedaile ; var pomauta ; var i , pom , pom1 , pom2 ; var art ; var VIPka ; var all_units_1 ; begin
 499: LD_INT 0
 501: PPUSH
 502: PPUSH
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
// DisableExclamations ;
 511: CALL_OW 474
// gained_medals := [ ] ;
 515: LD_ADDR_OWVAR 61
 519: PUSH
 520: EMPTY
 521: ST_TO_ADDR
// missing_medals := [ ] ;
 522: LD_ADDR_OWVAR 62
 526: PUSH
 527: EMPTY
 528: ST_TO_ADDR
// if Timecounter <= medaile1 [ difficulty ] then
 529: LD_EXP 57
 533: PUSH
 534: LD_EXP 55
 538: PUSH
 539: LD_OWVAR 67
 543: ARRAY
 544: LESSEQUAL
 545: IFFALSE 567
// begin AddMedal ( Time1 , 1 ) ;
 547: LD_STRING Time1
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: CALL_OW 101
// pommedaile = true ;
 557: LD_ADDR_VAR 0 2
 561: PUSH
 562: LD_INT 1
 564: ST_TO_ADDR
// end else
 565: GO 586
// begin AddMedal ( Time1 , - 1 ) ;
 567: LD_STRING Time1
 569: PPUSH
 570: LD_INT 1
 572: NEG
 573: PPUSH
 574: CALL_OW 101
// pommedaile = false ;
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: LD_INT 0
 585: ST_TO_ADDR
// end ; if Timecounter <= medaile2 [ difficulty ] then
 586: LD_EXP 57
 590: PUSH
 591: LD_EXP 56
 595: PUSH
 596: LD_OWVAR 67
 600: ARRAY
 601: LESSEQUAL
 602: IFFALSE 616
// AddMedal ( Time2 , 1 ) else
 604: LD_STRING Time2
 606: PPUSH
 607: LD_INT 1
 609: PPUSH
 610: CALL_OW 101
 614: GO 646
// if pommedaile then
 616: LD_VAR 0 2
 620: IFFALSE 635
// AddMedal ( Time2 , - 1 ) else
 622: LD_STRING Time2
 624: PPUSH
 625: LD_INT 1
 627: NEG
 628: PPUSH
 629: CALL_OW 101
 633: GO 646
// AddMedal ( Time2 , - 2 ) ;
 635: LD_STRING Time2
 637: PPUSH
 638: LD_INT 2
 640: NEG
 641: PPUSH
 642: CALL_OW 101
// pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 646: LD_ADDR_VAR 0 3
 650: PUSH
 651: LD_INT 22
 653: PUSH
 654: LD_EXP 1
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 34
 668: PUSH
 669: LD_INT 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: PUSH
 676: LD_INT 34
 678: PUSH
 679: LD_INT 32
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// art = false ;
 700: LD_ADDR_VAR 0 8
 704: PUSH
 705: LD_INT 0
 707: ST_TO_ADDR
// for i in pomauta do
 708: LD_ADDR_VAR 0 4
 712: PUSH
 713: LD_VAR 0 3
 717: PUSH
 718: FOR_IN
 719: IFFALSE 749
// if GetCargo ( i , mat_artefact ) > 0 then
 721: LD_VAR 0 4
 725: PPUSH
 726: LD_INT 4
 728: PPUSH
 729: CALL_OW 289
 733: PUSH
 734: LD_INT 0
 736: GREATER
 737: IFFALSE 747
// art = true ;
 739: LD_ADDR_VAR 0 8
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
 747: GO 718
 749: POP
 750: POP
// if art then
 751: LD_VAR 0 8
 755: IFFALSE 769
// AddMedal ( Artefact , 1 ) else
 757: LD_STRING Artefact
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL_OW 101
 767: GO 780
// AddMedal ( Artefact , - 1 ) ;
 769: LD_STRING Artefact
 771: PPUSH
 772: LD_INT 1
 774: NEG
 775: PPUSH
 776: CALL_OW 101
// GiveMedals ( Main ) ;
 780: LD_STRING Main
 782: PPUSH
 783: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 787: LD_ADDR_VAR 0 5
 791: PUSH
 792: LD_INT 22
 794: PUSH
 795: LD_EXP 1
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 21
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PPUSH
 818: CALL_OW 69
 822: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) do
 823: LD_ADDR_VAR 0 4
 827: PUSH
 828: LD_INT 22
 830: PUSH
 831: LD_EXP 1
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: PUSH
 840: LD_INT 21
 842: PUSH
 843: LD_INT 2
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PPUSH
 854: CALL_OW 69
 858: PUSH
 859: FOR_IN
 860: IFFALSE 908
// begin pom1 = IsDrivenBy ( i ) ;
 862: LD_ADDR_VAR 0 6
 866: PUSH
 867: LD_VAR 0 4
 871: PPUSH
 872: CALL_OW 311
 876: ST_TO_ADDR
// if not ( pom1 in pom ) then
 877: LD_VAR 0 6
 881: PUSH
 882: LD_VAR 0 5
 886: IN
 887: NOT
 888: IFFALSE 906
// pom = pom ^ pom1 ;
 890: LD_ADDR_VAR 0 5
 894: PUSH
 895: LD_VAR 0 5
 899: PUSH
 900: LD_VAR 0 6
 904: ADD
 905: ST_TO_ADDR
// end ;
 906: GO 859
 908: POP
 909: POP
// all_units_1 = pom ;
 910: LD_ADDR_VAR 0 10
 914: PUSH
 915: LD_VAR 0 5
 919: ST_TO_ADDR
// all_units_1 = all_units_1 diff UnitFilter ( all_units_1 , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) ;
 920: LD_ADDR_VAR 0 10
 924: PUSH
 925: LD_VAR 0 10
 929: PUSH
 930: LD_VAR 0 10
 934: PPUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 25
 940: PUSH
 941: LD_INT 12
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 25
 950: PUSH
 951: LD_INT 16
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 72
 967: DIFF
 968: ST_TO_ADDR
// RewardPeople ( all_units_1 ) ;
 969: LD_VAR 0 10
 973: PPUSH
 974: CALL_OW 43
// VIPka = [ JMM , Frank , Powell , Gary , Bobby , Yamoko , Cyrus , Cornel , Lisa , Don , Brown ] ;
 978: LD_ADDR_VAR 0 9
 982: PUSH
 983: LD_EXP 31
 987: PUSH
 988: LD_EXP 35
 992: PUSH
 993: LD_EXP 32
 997: PUSH
 998: LD_EXP 33
1002: PUSH
1003: LD_EXP 34
1007: PUSH
1008: LD_EXP 38
1012: PUSH
1013: LD_EXP 39
1017: PUSH
1018: LD_EXP 37
1022: PUSH
1023: LD_EXP 36
1027: PUSH
1028: LD_EXP 40
1032: PUSH
1033: LD_EXP 41
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
1051: LD_EXP 31
1055: PPUSH
1056: LD_STRING JMM
1058: PPUSH
1059: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
1063: LD_EXP 39
1067: PPUSH
1068: LD_STRING Cyrus
1070: PPUSH
1071: CALL_OW 38
// if Cyrus in Amici_enter then
1075: LD_EXP 39
1079: PUSH
1080: LD_EXP 42
1084: IN
1085: IFFALSE 1099
// SaveVariable ( 6 , CyrusLoc ) else
1087: LD_INT 6
1089: PPUSH
1090: LD_STRING CyrusLoc
1092: PPUSH
1093: CALL_OW 39
1097: GO 1109
// SaveVariable ( 7 , CyrusLoc ) ;
1099: LD_INT 7
1101: PPUSH
1102: LD_STRING CyrusLoc
1104: PPUSH
1105: CALL_OW 39
// SaveCharacters ( Gary , Gary ) ;
1109: LD_EXP 33
1113: PPUSH
1114: LD_STRING Gary
1116: PPUSH
1117: CALL_OW 38
// if Gary in Amici_enter then
1121: LD_EXP 33
1125: PUSH
1126: LD_EXP 42
1130: IN
1131: IFFALSE 1145
// SaveVariable ( 6 , GaryLoc ) else
1133: LD_INT 6
1135: PPUSH
1136: LD_STRING GaryLoc
1138: PPUSH
1139: CALL_OW 39
1143: GO 1155
// SaveVariable ( 7 , GaryLoc ) ;
1145: LD_INT 7
1147: PPUSH
1148: LD_STRING GaryLoc
1150: PPUSH
1151: CALL_OW 39
// SaveCharacters ( Cornel , Cornell ) ;
1155: LD_EXP 37
1159: PPUSH
1160: LD_STRING Cornell
1162: PPUSH
1163: CALL_OW 38
// if Cornel in Amici_enter then
1167: LD_EXP 37
1171: PUSH
1172: LD_EXP 42
1176: IN
1177: IFFALSE 1191
// SaveVariable ( 6 , CornellLoc ) else
1179: LD_INT 6
1181: PPUSH
1182: LD_STRING CornellLoc
1184: PPUSH
1185: CALL_OW 39
1189: GO 1201
// SaveVariable ( 7 , CornellLoc ) ;
1191: LD_INT 7
1193: PPUSH
1194: LD_STRING CornellLoc
1196: PPUSH
1197: CALL_OW 39
// SaveCharacters ( Frank , Frank ) ;
1201: LD_EXP 35
1205: PPUSH
1206: LD_STRING Frank
1208: PPUSH
1209: CALL_OW 38
// if Frank in Amici_enter then
1213: LD_EXP 35
1217: PUSH
1218: LD_EXP 42
1222: IN
1223: IFFALSE 1237
// SaveVariable ( 6 , FrankLoc ) else
1225: LD_INT 6
1227: PPUSH
1228: LD_STRING FrankLoc
1230: PPUSH
1231: CALL_OW 39
1235: GO 1247
// SaveVariable ( 7 , FrankLoc ) ;
1237: LD_INT 7
1239: PPUSH
1240: LD_STRING FrankLoc
1242: PPUSH
1243: CALL_OW 39
// SaveCharacters ( Bobby , Bobby ) ;
1247: LD_EXP 34
1251: PPUSH
1252: LD_STRING Bobby
1254: PPUSH
1255: CALL_OW 38
// if Bobby in Amici_enter then
1259: LD_EXP 34
1263: PUSH
1264: LD_EXP 42
1268: IN
1269: IFFALSE 1283
// SaveVariable ( 6 , BobbyLoc ) else
1271: LD_INT 6
1273: PPUSH
1274: LD_STRING BobbyLoc
1276: PPUSH
1277: CALL_OW 39
1281: GO 1293
// SaveVariable ( 7 , BobbyLoc ) ;
1283: LD_INT 7
1285: PPUSH
1286: LD_STRING BobbyLoc
1288: PPUSH
1289: CALL_OW 39
// SaveCharacters ( Yamoko , Yamoko ) ;
1293: LD_EXP 38
1297: PPUSH
1298: LD_STRING Yamoko
1300: PPUSH
1301: CALL_OW 38
// if Yamoko in Amici_enter then
1305: LD_EXP 38
1309: PUSH
1310: LD_EXP 42
1314: IN
1315: IFFALSE 1329
// SaveVariable ( 6 , YamokoLoc ) else
1317: LD_INT 6
1319: PPUSH
1320: LD_STRING YamokoLoc
1322: PPUSH
1323: CALL_OW 39
1327: GO 1339
// SaveVariable ( 7 , YamokoLoc ) ;
1329: LD_INT 7
1331: PPUSH
1332: LD_STRING YamokoLoc
1334: PPUSH
1335: CALL_OW 39
// SaveCharacters ( Don , Donaldson ) ;
1339: LD_EXP 40
1343: PPUSH
1344: LD_STRING Donaldson
1346: PPUSH
1347: CALL_OW 38
// if Don in Amici_enter then
1351: LD_EXP 40
1355: PUSH
1356: LD_EXP 42
1360: IN
1361: IFFALSE 1375
// SaveVariable ( 6 , DonaldsonLoc ) else
1363: LD_INT 6
1365: PPUSH
1366: LD_STRING DonaldsonLoc
1368: PPUSH
1369: CALL_OW 39
1373: GO 1385
// SaveVariable ( 7 , DonaldsonLoc ) ;
1375: LD_INT 7
1377: PPUSH
1378: LD_STRING DonaldsonLoc
1380: PPUSH
1381: CALL_OW 39
// SaveCharacters ( Brown , Brown ) ;
1385: LD_EXP 41
1389: PPUSH
1390: LD_STRING Brown
1392: PPUSH
1393: CALL_OW 38
// if Brown in Amici_enter then
1397: LD_EXP 41
1401: PUSH
1402: LD_EXP 42
1406: IN
1407: IFFALSE 1421
// SaveVariable ( 6 , BrownLoc ) else
1409: LD_INT 6
1411: PPUSH
1412: LD_STRING BrownLoc
1414: PPUSH
1415: CALL_OW 39
1419: GO 1431
// SaveVariable ( 7 , BrownLoc ) ;
1421: LD_INT 7
1423: PPUSH
1424: LD_STRING BrownLoc
1426: PPUSH
1427: CALL_OW 39
// SaveCharacters ( Lisa , Lisa ) ;
1431: LD_EXP 36
1435: PPUSH
1436: LD_STRING Lisa
1438: PPUSH
1439: CALL_OW 38
// if Lisa in Amici_enter then
1443: LD_EXP 36
1447: PUSH
1448: LD_EXP 42
1452: IN
1453: IFFALSE 1467
// SaveVariable ( 6 , LisaLoc ) else
1455: LD_INT 6
1457: PPUSH
1458: LD_STRING LisaLoc
1460: PPUSH
1461: CALL_OW 39
1465: GO 1477
// SaveVariable ( 7 , LiasLoc ) ;
1467: LD_INT 7
1469: PPUSH
1470: LD_STRING LiasLoc
1472: PPUSH
1473: CALL_OW 39
// pom1 = lidi_other diff Amici_enter ;
1477: LD_ADDR_VAR 0 6
1481: PUSH
1482: LD_EXP 51
1486: PUSH
1487: LD_EXP 42
1491: DIFF
1492: ST_TO_ADDR
// pom2 = all_units_1 diff VIPka ;
1493: LD_ADDR_VAR 0 7
1497: PUSH
1498: LD_VAR 0 10
1502: PUSH
1503: LD_VAR 0 9
1507: DIFF
1508: ST_TO_ADDR
// DeleteCharacters ( other_survivors ) ;
1509: LD_STRING other_survivors
1511: PPUSH
1512: CALL_OW 40
// DeleteCharacters ( otherGamma2 ) ;
1516: LD_STRING otherGamma2
1518: PPUSH
1519: CALL_OW 40
// SaveCharacters ( pom1 , otherNotJMM ) ;
1523: LD_VAR 0 6
1527: PPUSH
1528: LD_STRING otherNotJMM
1530: PPUSH
1531: CALL_OW 38
// SaveCharacters ( pom2 , otherWithJMM ) ;
1535: LD_VAR 0 7
1539: PPUSH
1540: LD_STRING otherWithJMM
1542: PPUSH
1543: CALL_OW 38
// YouWin ;
1547: CALL_OW 103
// EnableExclamations ;
1551: CALL_OW 473
// exit ;
1555: GO 1557
// end ;
1557: LD_VAR 0 1
1561: RET
// function load_postavy ; var pom ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
// JMM = nacti_osobu ( JMM ) ;
1566: LD_ADDR_EXP 31
1570: PUSH
1571: LD_STRING JMM
1573: PPUSH
1574: CALL 7768 0 1
1578: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
1579: LD_ADDR_EXP 32
1583: PUSH
1584: LD_STRING Powell
1586: PPUSH
1587: CALL_OW 25
1591: ST_TO_ADDR
// Gary = nacti_osobu ( Gary ) ;
1592: LD_ADDR_EXP 33
1596: PUSH
1597: LD_STRING Gary
1599: PPUSH
1600: CALL 7768 0 1
1604: ST_TO_ADDR
// Lisa = nacti_osobu ( Lisa ) ;
1605: LD_ADDR_EXP 36
1609: PUSH
1610: LD_STRING Lisa
1612: PPUSH
1613: CALL 7768 0 1
1617: ST_TO_ADDR
// Yamoko = nacti_osobu ( Yamoko ) ;
1618: LD_ADDR_EXP 38
1622: PUSH
1623: LD_STRING Yamoko
1625: PPUSH
1626: CALL 7768 0 1
1630: ST_TO_ADDR
// Frank = nacti_osobu ( Frank ) ;
1631: LD_ADDR_EXP 35
1635: PUSH
1636: LD_STRING Frank
1638: PPUSH
1639: CALL 7768 0 1
1643: ST_TO_ADDR
// Cornel = nacti_osobu ( Cornell ) ;
1644: LD_ADDR_EXP 37
1648: PUSH
1649: LD_STRING Cornell
1651: PPUSH
1652: CALL 7768 0 1
1656: ST_TO_ADDR
// Bobby = nacti_osobu ( Bobby ) ;
1657: LD_ADDR_EXP 34
1661: PUSH
1662: LD_STRING Bobby
1664: PPUSH
1665: CALL 7768 0 1
1669: ST_TO_ADDR
// Cyrus = nacti_osobu ( Cyrus ) ;
1670: LD_ADDR_EXP 39
1674: PUSH
1675: LD_STRING Cyrus
1677: PPUSH
1678: CALL 7768 0 1
1682: ST_TO_ADDR
// Don = nacti_osobu ( Donaldson ) ;
1683: LD_ADDR_EXP 40
1687: PUSH
1688: LD_STRING Donaldson
1690: PPUSH
1691: CALL 7768 0 1
1695: ST_TO_ADDR
// Brown = nacti_osobu ( Brown ) ;
1696: LD_ADDR_EXP 41
1700: PUSH
1701: LD_STRING Brown
1703: PPUSH
1704: CALL 7768 0 1
1708: ST_TO_ADDR
// GARYL = LoadVariable ( GaryLoc , 6 ) ;
1709: LD_ADDR_EXP 18
1713: PUSH
1714: LD_STRING GaryLoc
1716: PPUSH
1717: LD_INT 6
1719: PPUSH
1720: CALL_OW 30
1724: ST_TO_ADDR
// LISAL = LoadVariable ( LisaLoc , 6 ) ;
1725: LD_ADDR_EXP 19
1729: PUSH
1730: LD_STRING LisaLoc
1732: PPUSH
1733: LD_INT 6
1735: PPUSH
1736: CALL_OW 30
1740: ST_TO_ADDR
// YAML = LoadVariable ( YamokoLoc , 6 ) ;
1741: LD_ADDR_EXP 20
1745: PUSH
1746: LD_STRING YamokoLoc
1748: PPUSH
1749: LD_INT 6
1751: PPUSH
1752: CALL_OW 30
1756: ST_TO_ADDR
// FRANKL = LoadVariable ( FrankLoc , 6 ) ;
1757: LD_ADDR_EXP 21
1761: PUSH
1762: LD_STRING FrankLoc
1764: PPUSH
1765: LD_INT 6
1767: PPUSH
1768: CALL_OW 30
1772: ST_TO_ADDR
// CORNELL = LoadVariable ( CornellLoc , 6 ) ;
1773: LD_ADDR_EXP 22
1777: PUSH
1778: LD_STRING CornellLoc
1780: PPUSH
1781: LD_INT 6
1783: PPUSH
1784: CALL_OW 30
1788: ST_TO_ADDR
// BOBL = LoadVariable ( BobbyLoc , 6 ) ;
1789: LD_ADDR_EXP 23
1793: PUSH
1794: LD_STRING BobbyLoc
1796: PPUSH
1797: LD_INT 6
1799: PPUSH
1800: CALL_OW 30
1804: ST_TO_ADDR
// CYRL = LoadVariable ( CyrusLoc , 6 ) ;
1805: LD_ADDR_EXP 24
1809: PUSH
1810: LD_STRING CyrusLoc
1812: PPUSH
1813: LD_INT 6
1815: PPUSH
1816: CALL_OW 30
1820: ST_TO_ADDR
// DONL = LoadVariable ( DonaldsonLoc , 6 ) ;
1821: LD_ADDR_EXP 25
1825: PUSH
1826: LD_STRING DonaldsonLoc
1828: PPUSH
1829: LD_INT 6
1831: PPUSH
1832: CALL_OW 30
1836: ST_TO_ADDR
// BROWNL = LoadVariable ( BrownLoc , 6 ) ;
1837: LD_ADDR_EXP 26
1841: PUSH
1842: LD_STRING BrownLoc
1844: PPUSH
1845: LD_INT 6
1847: PPUSH
1848: CALL_OW 30
1852: ST_TO_ADDR
// if CheckCharacterSet ( otherWithJMM ) then
1853: LD_STRING otherWithJMM
1855: PPUSH
1856: CALL_OW 29
1860: IFFALSE 1877
// lidi_other = CreateCharacterSet ( otherWithJMM ) else
1862: LD_ADDR_EXP 51
1866: PUSH
1867: LD_STRING otherWithJMM
1869: PPUSH
1870: CALL_OW 31
1874: ST_TO_ADDR
1875: GO 1884
// lidi_other = [ ] ;
1877: LD_ADDR_EXP 51
1881: PUSH
1882: EMPTY
1883: ST_TO_ADDR
// if CheckCharacterSet ( other_survivors ) then
1884: LD_STRING other_survivors
1886: PPUSH
1887: CALL_OW 29
1891: IFFALSE 1908
// pom = CreateCharacterSet ( other_survivors ) else
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_STRING other_survivors
1900: PPUSH
1901: CALL_OW 31
1905: ST_TO_ADDR
1906: GO 1915
// pom = [ ] ;
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: EMPTY
1914: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
1915: LD_ADDR_EXP 51
1919: PUSH
1920: LD_EXP 51
1924: PUSH
1925: LD_VAR 0 2
1929: ADD
1930: ST_TO_ADDR
// if CheckCharacterSet ( otherNotJMM ) then
1931: LD_STRING otherNotJMM
1933: PPUSH
1934: CALL_OW 29
1938: IFFALSE 1955
// pom = CreateCharacterSet ( otherNotJMM ) else
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: LD_STRING otherNotJMM
1947: PPUSH
1948: CALL_OW 31
1952: ST_TO_ADDR
1953: GO 1962
// pom = [ ] ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: EMPTY
1961: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
1962: LD_ADDR_EXP 51
1966: PUSH
1967: LD_EXP 51
1971: PUSH
1972: LD_VAR 0 2
1976: ADD
1977: ST_TO_ADDR
// if CheckCharacterSet ( otherGamma2 ) then
1978: LD_STRING otherGamma2
1980: PPUSH
1981: CALL_OW 29
1985: IFFALSE 2002
// pom = CreateCharacterSet ( otherGamma2 ) else
1987: LD_ADDR_VAR 0 2
1991: PUSH
1992: LD_STRING otherGamma2
1994: PPUSH
1995: CALL_OW 31
1999: ST_TO_ADDR
2000: GO 2009
// pom = [ ] ;
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: EMPTY
2008: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2009: LD_ADDR_EXP 51
2013: PUSH
2014: LD_EXP 51
2018: PUSH
2019: LD_VAR 0 2
2023: ADD
2024: ST_TO_ADDR
// end ; end_of_file
2025: LD_VAR 0 1
2029: RET
// var i , pom , pom1 , pom2 , pom3 , pom4 ; var kecy ; var KAMI ; var disable_kecy_5D ; every 0 0$0.1 do
2030: GO 2032
2032: DISABLE
// begin for i := 1 to 2 do
2033: LD_ADDR_LOC 1
2037: PUSH
2038: DOUBLE
2039: LD_INT 1
2041: DEC
2042: ST_TO_ADDR
2043: LD_INT 2
2045: PUSH
2046: FOR_TO
2047: IFFALSE 2056
// disable ( i ) ;
2049: LD_LOC 1
2053: DISABLE_MARKED
2054: GO 2046
2056: POP
2057: POP
// kecy := false ;
2058: LD_ADDR_LOC 7
2062: PUSH
2063: LD_INT 0
2065: ST_TO_ADDR
// KAMI = false ;
2066: LD_ADDR_LOC 8
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// disable_kecy_5D = false ;
2074: LD_ADDR_LOC 9
2078: PUSH
2079: LD_INT 0
2081: ST_TO_ADDR
// end ;
2082: END
// export function chmo1 ; begin
2083: LD_INT 0
2085: PPUSH
// CenterOnXY ( 86 , 145 ) ;
2086: LD_INT 86
2088: PPUSH
2089: LD_INT 145
2091: PPUSH
2092: CALL_OW 84
// SetAttitude ( You , Arabi , att_enemy , true ) ;
2096: LD_EXP 1
2100: PPUSH
2101: LD_EXP 3
2105: PPUSH
2106: LD_INT 2
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
2116: LD_EXP 3
2120: PPUSH
2121: LD_EXP 1
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL_OW 80
// SaveForQuickRestart ;
2136: CALL_OW 22
// wait ( 0 0$0.5 ) ;
2140: LD_INT 18
2142: PPUSH
2143: CALL_OW 67
// InGameOff ;
2147: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2151: LD_STRING M1
2153: PPUSH
2154: CALL_OW 337
// end ;
2158: LD_VAR 0 1
2162: RET
// every 0 0$3 trigger GetSide ( A1_dep ) = You or IsDead ( A1_dep ) do var pom1 ;
2163: LD_INT 4
2165: PPUSH
2166: CALL_OW 255
2170: PUSH
2171: LD_EXP 1
2175: EQUAL
2176: PUSH
2177: LD_INT 4
2179: PPUSH
2180: CALL_OW 301
2184: OR
2185: IFFALSE 2770
2187: GO 2189
2189: DISABLE
2190: LD_INT 0
2192: PPUSH
// begin A1_dobyta = true ;
2193: LD_ADDR_EXP 27
2197: PUSH
2198: LD_INT 1
2200: ST_TO_ADDR
// DialogueOn ;
2201: CALL_OW 6
// SayRadio ( Jmm , D2-JMM-1 ) ;
2205: LD_EXP 31
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 94
// SayRadio ( Powell , D2-Pow-1 ) ;
2217: LD_EXP 32
2221: PPUSH
2222: LD_STRING D2-Pow-1
2224: PPUSH
2225: CALL_OW 94
// SayRadio ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 31
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 94
// SayRadio ( Powell , D2-Pow-2 ) ;
2241: LD_EXP 32
2245: PPUSH
2246: LD_STRING D2-Pow-2
2248: PPUSH
2249: CALL_OW 94
// SayRadio ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 31
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 94
// DialogueOff ;
2265: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2269: LD_STRING M2
2271: PPUSH
2272: CALL_OW 337
// Hint ( CapturedBase ) ;
2276: LD_STRING CapturedBase
2278: PPUSH
2279: CALL_OW 339
// pom = [ ] ;
2283: LD_ADDR_LOC 2
2287: PUSH
2288: EMPTY
2289: ST_TO_ADDR
// for i in [ Gary , Bobby , Frank , Lisa , Cornel , Cyrus , Don , Brown ] do
2290: LD_ADDR_LOC 1
2294: PUSH
2295: LD_EXP 33
2299: PUSH
2300: LD_EXP 34
2304: PUSH
2305: LD_EXP 35
2309: PUSH
2310: LD_EXP 36
2314: PUSH
2315: LD_EXP 37
2319: PUSH
2320: LD_EXP 39
2324: PUSH
2325: LD_EXP 40
2329: PUSH
2330: LD_EXP 41
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: PUSH
2345: FOR_IN
2346: IFFALSE 2377
// if IsOK ( i ) then
2348: LD_LOC 1
2352: PPUSH
2353: CALL_OW 302
2357: IFFALSE 2375
// pom = pom ^ i ;
2359: LD_ADDR_LOC 2
2363: PUSH
2364: LD_LOC 2
2368: PUSH
2369: LD_LOC 1
2373: ADD
2374: ST_TO_ADDR
2375: GO 2345
2377: POP
2378: POP
// if pom > 3 then
2379: LD_LOC 2
2383: PUSH
2384: LD_INT 3
2386: GREATER
2387: IFFALSE 2537
// begin pom1 = pom [ Rand ( 1 , pom + 0 ) ] ;
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: LD_LOC 2
2398: PUSH
2399: LD_INT 1
2401: PPUSH
2402: LD_LOC 2
2406: PUSH
2407: LD_INT 0
2409: PLUS
2410: PPUSH
2411: CALL_OW 12
2415: ARRAY
2416: ST_TO_ADDR
// pom = pom diff pom1 [ 1 ] ;
2417: LD_ADDR_LOC 2
2421: PUSH
2422: LD_LOC 2
2426: PUSH
2427: LD_VAR 0 1
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: DIFF
2436: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2437: LD_ADDR_VAR 0 1
2441: PUSH
2442: LD_VAR 0 1
2446: PUSH
2447: LD_LOC 2
2451: PUSH
2452: LD_INT 1
2454: PPUSH
2455: LD_LOC 2
2459: PUSH
2460: LD_INT 0
2462: PLUS
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: ADD
2470: ST_TO_ADDR
// pom = pom diff pom1 [ 2 ] ;
2471: LD_ADDR_LOC 2
2475: PUSH
2476: LD_LOC 2
2480: PUSH
2481: LD_VAR 0 1
2485: PUSH
2486: LD_INT 2
2488: ARRAY
2489: DIFF
2490: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2491: LD_ADDR_VAR 0 1
2495: PUSH
2496: LD_VAR 0 1
2500: PUSH
2501: LD_LOC 2
2505: PUSH
2506: LD_INT 1
2508: PPUSH
2509: LD_LOC 2
2513: PUSH
2514: LD_INT 0
2516: PLUS
2517: PPUSH
2518: CALL_OW 12
2522: ARRAY
2523: ADD
2524: ST_TO_ADDR
// pom = pom1 ;
2525: LD_ADDR_LOC 2
2529: PUSH
2530: LD_VAR 0 1
2534: ST_TO_ADDR
// end else
2535: GO 2547
// pom1 = pom ;
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: LD_LOC 2
2546: ST_TO_ADDR
// for i in pom1 do
2547: LD_ADDR_LOC 1
2551: PUSH
2552: LD_VAR 0 1
2556: PUSH
2557: FOR_IN
2558: IFFALSE 2768
// case i of Gary :
2560: LD_LOC 1
2564: PUSH
2565: LD_EXP 33
2569: DOUBLE
2570: EQUAL
2571: IFTRUE 2575
2573: GO 2590
2575: POP
// Say ( Gary , D2a-Gary-1 ) ; Bobby :
2576: LD_EXP 33
2580: PPUSH
2581: LD_STRING D2a-Gary-1
2583: PPUSH
2584: CALL_OW 88
2588: GO 2766
2590: LD_EXP 34
2594: DOUBLE
2595: EQUAL
2596: IFTRUE 2600
2598: GO 2615
2600: POP
// Say ( Bobby , D2a-Bobby-1 ) ; Frank :
2601: LD_EXP 34
2605: PPUSH
2606: LD_STRING D2a-Bobby-1
2608: PPUSH
2609: CALL_OW 88
2613: GO 2766
2615: LD_EXP 35
2619: DOUBLE
2620: EQUAL
2621: IFTRUE 2625
2623: GO 2640
2625: POP
// Say ( Frank , D2a-Frank-1 ) ; Lisa :
2626: LD_EXP 35
2630: PPUSH
2631: LD_STRING D2a-Frank-1
2633: PPUSH
2634: CALL_OW 88
2638: GO 2766
2640: LD_EXP 36
2644: DOUBLE
2645: EQUAL
2646: IFTRUE 2650
2648: GO 2665
2650: POP
// Say ( Lisa , D2a-Lisa-1 ) ; Cornel :
2651: LD_EXP 36
2655: PPUSH
2656: LD_STRING D2a-Lisa-1
2658: PPUSH
2659: CALL_OW 88
2663: GO 2766
2665: LD_EXP 37
2669: DOUBLE
2670: EQUAL
2671: IFTRUE 2675
2673: GO 2690
2675: POP
// Say ( Cornel , D2a-Corn-1 ) ; Cyrus :
2676: LD_EXP 37
2680: PPUSH
2681: LD_STRING D2a-Corn-1
2683: PPUSH
2684: CALL_OW 88
2688: GO 2766
2690: LD_EXP 39
2694: DOUBLE
2695: EQUAL
2696: IFTRUE 2700
2698: GO 2715
2700: POP
// Say ( Cyrus , D2a-Cyrus-1 ) ; Don :
2701: LD_EXP 39
2705: PPUSH
2706: LD_STRING D2a-Cyrus-1
2708: PPUSH
2709: CALL_OW 88
2713: GO 2766
2715: LD_EXP 40
2719: DOUBLE
2720: EQUAL
2721: IFTRUE 2725
2723: GO 2740
2725: POP
// Say ( Don , D2a-Don-1 ) ; Brown :
2726: LD_EXP 40
2730: PPUSH
2731: LD_STRING D2a-Don-1
2733: PPUSH
2734: CALL_OW 88
2738: GO 2766
2740: LD_EXP 41
2744: DOUBLE
2745: EQUAL
2746: IFTRUE 2750
2748: GO 2765
2750: POP
// Say ( Brown , D2a-Brown-1 ) ; end ;
2751: LD_EXP 41
2755: PPUSH
2756: LD_STRING D2a-Brown-1
2758: PPUSH
2759: CALL_OW 88
2763: GO 2766
2765: POP
2766: GO 2557
2768: POP
2769: POP
// end ;
2770: PPOPN 1
2772: END
// export function dialog_frank ; var res ; begin
2773: LD_INT 0
2775: PPUSH
2776: PPUSH
// Say ( Frank , D3F-Frank-1 ) ;
2777: LD_EXP 35
2781: PPUSH
2782: LD_STRING D3F-Frank-1
2784: PPUSH
2785: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
2789: LD_EXP 31
2793: PPUSH
2794: LD_STRING D3F-JMM-1
2796: PPUSH
2797: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
2801: LD_EXP 35
2805: PPUSH
2806: LD_STRING D3F-Frank-2
2808: PPUSH
2809: CALL_OW 88
// res := Query ( QFrank ) ;
2813: LD_ADDR_VAR 0 2
2817: PUSH
2818: LD_STRING QFrank
2820: PPUSH
2821: CALL_OW 97
2825: ST_TO_ADDR
// case res of 1 :
2826: LD_VAR 0 2
2830: PUSH
2831: LD_INT 1
2833: DOUBLE
2834: EQUAL
2835: IFTRUE 2839
2837: GO 2862
2839: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
2840: LD_EXP 31
2844: PPUSH
2845: LD_STRING D3Fa-JMM-1
2847: PPUSH
2848: CALL_OW 88
// result := 1 ;
2852: LD_ADDR_VAR 0 1
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// end ; 2 :
2860: GO 3018
2862: LD_INT 2
2864: DOUBLE
2865: EQUAL
2866: IFTRUE 2870
2868: GO 2986
2870: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
2871: LD_EXP 31
2875: PPUSH
2876: LD_STRING D3Fb-JMM-1
2878: PPUSH
2879: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
2883: LD_EXP 35
2887: PPUSH
2888: LD_STRING D3Fb-Frank-1
2890: PPUSH
2891: CALL_OW 88
// res := Query ( QFrank2 ) ;
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: LD_STRING QFrank2
2902: PPUSH
2903: CALL_OW 97
2907: ST_TO_ADDR
// if res = 1 then
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 1
2915: EQUAL
2916: IFFALSE 2964
// begin Say ( JMM , D3Fba-JMM-1 ) ;
2918: LD_EXP 31
2922: PPUSH
2923: LD_STRING D3Fba-JMM-1
2925: PPUSH
2926: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
2930: LD_EXP 35
2934: PPUSH
2935: LD_STRING D3Fba-Frank-1
2937: PPUSH
2938: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
2942: LD_EXP 31
2946: PPUSH
2947: LD_STRING D3Fba-JMM-2
2949: PPUSH
2950: CALL_OW 88
// result := 21 ;
2954: LD_ADDR_VAR 0 1
2958: PUSH
2959: LD_INT 21
2961: ST_TO_ADDR
// end else
2962: GO 2984
// begin Say ( JMM , D3Fbb-JMM-1 ) ;
2964: LD_EXP 31
2968: PPUSH
2969: LD_STRING D3Fbb-JMM-1
2971: PPUSH
2972: CALL_OW 88
// result := 22 ;
2976: LD_ADDR_VAR 0 1
2980: PUSH
2981: LD_INT 22
2983: ST_TO_ADDR
// end ; end ; 3 :
2984: GO 3018
2986: LD_INT 3
2988: DOUBLE
2989: EQUAL
2990: IFTRUE 2994
2992: GO 3017
2994: POP
// begin Say ( JMM , D3Fc-JMM-1 ) ;
2995: LD_EXP 31
2999: PPUSH
3000: LD_STRING D3Fc-JMM-1
3002: PPUSH
3003: CALL_OW 88
// result := 3 ;
3007: LD_ADDR_VAR 0 1
3011: PUSH
3012: LD_INT 3
3014: ST_TO_ADDR
// end ; end ;
3015: GO 3018
3017: POP
// end ;
3018: LD_VAR 0 1
3022: RET
// export function fuspech1 ; begin
3023: LD_INT 0
3025: PPUSH
// DialogueOn ;
3026: CALL_OW 6
// Say ( JMM , D4Fa-JMM-1 ) ;
3030: LD_EXP 31
3034: PPUSH
3035: LD_STRING D4Fa-JMM-1
3037: PPUSH
3038: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3042: LD_EXP 1
3046: PPUSH
3047: LD_INT 6
3049: PPUSH
3050: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3054: LD_INT 111
3056: PPUSH
3057: LD_INT 123
3059: PPUSH
3060: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3064: LD_INT 32
3066: PPUSH
3067: LD_INT 39
3069: PPUSH
3070: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
3074: LD_EXP 35
3078: PPUSH
3079: LD_STRING D4Fa-Frank-1
3081: PPUSH
3082: CALL_OW 88
// wait ( 0 0$3 ) ;
3086: LD_INT 105
3088: PPUSH
3089: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3093: LD_EXP 1
3097: PPUSH
3098: LD_INT 7
3100: PPUSH
3101: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3105: LD_INT 122
3107: PPUSH
3108: LD_INT 68
3110: PPUSH
3111: CALL_OW 86
// Say ( JMM , D4Fa-JMM-2 ) ;
3115: LD_EXP 31
3119: PPUSH
3120: LD_STRING D4Fa-JMM-2
3122: PPUSH
3123: CALL_OW 88
// Say ( Frank , D4Fa-Frank-2 ) ;
3127: LD_EXP 35
3131: PPUSH
3132: LD_STRING D4Fa-Frank-2
3134: PPUSH
3135: CALL_OW 88
// DialogueOff ;
3139: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3143: LD_EXP 35
3147: PUSH
3148: EMPTY
3149: LIST
3150: PPUSH
3151: CALL_OW 85
// end ;
3155: LD_VAR 0 1
3159: RET
// export function fuspech2 ; begin
3160: LD_INT 0
3162: PPUSH
// DialogueOn ;
3163: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_INT 8
3174: PPUSH
3175: CALL_OW 332
// if IsOK ( Frank ) then
3179: LD_EXP 35
3183: PPUSH
3184: CALL_OW 302
3188: IFFALSE 3282
// begin Say ( Frank , D4Fb-Frank-1 ) ;
3190: LD_EXP 35
3194: PPUSH
3195: LD_STRING D4Fb-Frank-1
3197: PPUSH
3198: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
3202: LD_EXP 31
3206: PPUSH
3207: LD_STRING D4Fb-JMM-1
3209: PPUSH
3210: CALL_OW 88
// pom = GetPeople ( sex_female , class_scientistic , [ ] ) ;
3214: LD_ADDR_LOC 2
3218: PUSH
3219: LD_INT 2
3221: PPUSH
3222: LD_INT 4
3224: PPUSH
3225: EMPTY
3226: PPUSH
3227: CALL 6350 0 3
3231: ST_TO_ADDR
// if pom > 0 then
3232: LD_LOC 2
3236: PUSH
3237: LD_INT 0
3239: GREATER
3240: IFFALSE 3258
// Say ( pom [ 1 ] , D4Fb-FSci1-1 ) ;
3242: LD_LOC 2
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: PPUSH
3251: LD_STRING D4Fb-FSci1-1
3253: PPUSH
3254: CALL_OW 88
// Say ( Frank , D4Fb-Frank-2 ) ;
3258: LD_EXP 35
3262: PPUSH
3263: LD_STRING D4Fb-Frank-2
3265: PPUSH
3266: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
3270: LD_EXP 31
3274: PPUSH
3275: LD_STRING D4Fb-JMM-2
3277: PPUSH
3278: CALL_OW 88
// end ; DialogueOff ;
3282: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3286: LD_EXP 35
3290: PUSH
3291: EMPTY
3292: LIST
3293: PPUSH
3294: CALL_OW 85
// end ;
3298: LD_VAR 0 1
3302: RET
// export function fuspech3 ; begin
3303: LD_INT 0
3305: PPUSH
// end ;
3306: LD_VAR 0 1
3310: RET
// export function dialog_yamoko ; begin
3311: LD_INT 0
3313: PPUSH
// Say ( Yamoko , D3Y-Yam-1 ) ;
3314: LD_EXP 38
3318: PPUSH
3319: LD_STRING D3Y-Yam-1
3321: PPUSH
3322: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
3326: LD_EXP 31
3330: PPUSH
3331: LD_STRING D3Y-JMM-1
3333: PPUSH
3334: CALL_OW 88
// Say ( Yamoko , D3Y-Yam-2 ) ;
3338: LD_EXP 38
3342: PPUSH
3343: LD_STRING D3Y-Yam-2
3345: PPUSH
3346: CALL_OW 88
// result = Query ( QYamoko ) ;
3350: LD_ADDR_VAR 0 1
3354: PUSH
3355: LD_STRING QYamoko
3357: PPUSH
3358: CALL_OW 97
3362: ST_TO_ADDR
// if result = 1 then
3363: LD_VAR 0 1
3367: PUSH
3368: LD_INT 1
3370: EQUAL
3371: IFFALSE 3399
// begin Say ( JMM , D3Ya-JMM-1 ) ;
3373: LD_EXP 31
3377: PPUSH
3378: LD_STRING D3Ya-JMM-1
3380: PPUSH
3381: CALL_OW 88
// Say ( Yamoko , D3Ya-Yam-1 ) ;
3385: LD_EXP 38
3389: PPUSH
3390: LD_STRING D3Ya-Yam-1
3392: PPUSH
3393: CALL_OW 88
// end else
3397: GO 3411
// Say ( JMM , D3Yb-JMM-1 ) ;
3399: LD_EXP 31
3403: PPUSH
3404: LD_STRING D3Yb-JMM-1
3406: PPUSH
3407: CALL_OW 88
// end ;
3411: LD_VAR 0 1
3415: RET
// export function yuspech1 ; begin
3416: LD_INT 0
3418: PPUSH
// DialogueOn ;
3419: CALL_OW 6
// Say ( Yamoko , D4Ya-Yam-1 ) ;
3423: LD_EXP 38
3427: PPUSH
3428: LD_STRING D4Ya-Yam-1
3430: PPUSH
3431: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
3435: LD_EXP 31
3439: PPUSH
3440: LD_STRING D4Ya-JMM-1
3442: PPUSH
3443: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3447: LD_EXP 1
3451: PPUSH
3452: LD_INT 6
3454: PPUSH
3455: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3459: LD_INT 111
3461: PPUSH
3462: LD_INT 123
3464: PPUSH
3465: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3469: LD_INT 32
3471: PPUSH
3472: LD_INT 39
3474: PPUSH
3475: CALL_OW 84
// Say ( Yamoko , D4Ya-Yam-2 ) ;
3479: LD_EXP 38
3483: PPUSH
3484: LD_STRING D4Ya-Yam-2
3486: PPUSH
3487: CALL_OW 88
// wait ( 0 0$3 ) ;
3491: LD_INT 105
3493: PPUSH
3494: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3498: LD_EXP 1
3502: PPUSH
3503: LD_INT 7
3505: PPUSH
3506: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3510: LD_INT 122
3512: PPUSH
3513: LD_INT 68
3515: PPUSH
3516: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
3520: LD_EXP 31
3524: PPUSH
3525: LD_STRING D4Ya-JMM-2
3527: PPUSH
3528: CALL_OW 88
// Say ( Yamoko , D4Ya-Yam-3 ) ;
3532: LD_EXP 38
3536: PPUSH
3537: LD_STRING D4Ya-Yam-3
3539: PPUSH
3540: CALL_OW 88
// DialogueOff ;
3544: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3548: LD_EXP 38
3552: PUSH
3553: EMPTY
3554: LIST
3555: PPUSH
3556: CALL_OW 85
// end ;
3560: LD_VAR 0 1
3564: RET
// export function yuspech2 ; begin
3565: LD_INT 0
3567: PPUSH
// DialogueOn ;
3568: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3572: LD_EXP 1
3576: PPUSH
3577: LD_INT 8
3579: PPUSH
3580: CALL_OW 332
// if IsOK ( Yamoko ) then
3584: LD_EXP 38
3588: PPUSH
3589: CALL_OW 302
3593: IFFALSE 3643
// begin Say ( Yamoko , D4Yc-Yam-1 ) ;
3595: LD_EXP 38
3599: PPUSH
3600: LD_STRING D4Yc-Yam-1
3602: PPUSH
3603: CALL_OW 88
// Say ( JMM , D4Yc-JMM-1 ) ;
3607: LD_EXP 31
3611: PPUSH
3612: LD_STRING D4Yc-JMM-1
3614: PPUSH
3615: CALL_OW 88
// Say ( Yamoko , D4Yc-Yam-2 ) ;
3619: LD_EXP 38
3623: PPUSH
3624: LD_STRING D4Yc-Yam-2
3626: PPUSH
3627: CALL_OW 88
// Say ( JMM , D4Yc-JMM-2 ) ;
3631: LD_EXP 31
3635: PPUSH
3636: LD_STRING D4Yc-JMM-2
3638: PPUSH
3639: CALL_OW 88
// end ; DialogueOff ;
3643: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3647: LD_EXP 38
3651: PUSH
3652: EMPTY
3653: LIST
3654: PPUSH
3655: CALL_OW 85
// end ;
3659: LD_VAR 0 1
3663: RET
// export function yuspech3 ; begin
3664: LD_INT 0
3666: PPUSH
// end ;
3667: LD_VAR 0 1
3671: RET
// every 0 0$1 trigger See ( You , A2_kam1 ) or See ( You , A2_kam2 ) or See ( You , A2_kam3 ) do
3672: LD_EXP 1
3676: PPUSH
3677: LD_INT 86
3679: PPUSH
3680: CALL_OW 292
3684: PUSH
3685: LD_EXP 1
3689: PPUSH
3690: LD_INT 85
3692: PPUSH
3693: CALL_OW 292
3697: OR
3698: PUSH
3699: LD_EXP 1
3703: PPUSH
3704: LD_INT 84
3706: PPUSH
3707: CALL_OW 292
3711: OR
3712: IFFALSE 4030
3714: GO 3716
3716: DISABLE
// begin while kecy do
3717: LD_LOC 7
3721: IFFALSE 3732
// wait ( 0 0$1 ) ;
3723: LD_INT 35
3725: PPUSH
3726: CALL_OW 67
3730: GO 3717
// kecy = true ;
3732: LD_ADDR_LOC 7
3736: PUSH
3737: LD_INT 1
3739: ST_TO_ADDR
// DialogueOn ;
3740: CALL_OW 6
// if See ( You , A2_kam1 ) then
3744: LD_EXP 1
3748: PPUSH
3749: LD_INT 86
3751: PPUSH
3752: CALL_OW 292
3756: IFFALSE 3767
// CenterNowOnUnits ( A2_kam1 ) else
3758: LD_INT 86
3760: PPUSH
3761: CALL_OW 87
3765: GO 3831
// if See ( You , A2_kam2 ) then
3767: LD_EXP 1
3771: PPUSH
3772: LD_INT 85
3774: PPUSH
3775: CALL_OW 292
3779: IFFALSE 3790
// CenterNowOnUnits ( A2_kam2 ) else
3781: LD_INT 85
3783: PPUSH
3784: CALL_OW 87
3788: GO 3831
// if See ( You , A2_kam3 ) then
3790: LD_EXP 1
3794: PPUSH
3795: LD_INT 84
3797: PPUSH
3798: CALL_OW 292
3802: IFFALSE 3813
// CenterNowOnUnits ( A2_kam3 ) else
3804: LD_INT 84
3806: PPUSH
3807: CALL_OW 87
3811: GO 3831
// CenterNowOnUnits ( [ A2_kam1 , A2_kam2 , A2_kam3 ] ) ;
3813: LD_INT 86
3815: PUSH
3816: LD_INT 85
3818: PUSH
3819: LD_INT 84
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PPUSH
3827: CALL_OW 87
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
3831: LD_ADDR_LOC 2
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_EXP 31
3846: PUSH
3847: EMPTY
3848: LIST
3849: PPUSH
3850: CALL 6350 0 3
3854: ST_TO_ADDR
// if pom < 0 then
3855: LD_LOC 2
3859: PUSH
3860: LD_INT 0
3862: LESS
3863: IFFALSE 3876
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
3865: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
3867: PPUSH
3868: CALL_OW 100
// konec_mise ;
3872: CALL 499 0 0
// end ; case pom of 0 :
3876: LD_LOC 2
3880: PUSH
3881: LD_INT 0
3883: DOUBLE
3884: EQUAL
3885: IFTRUE 3889
3887: GO 3912
3889: POP
// begin pom = JMM ;
3890: LD_ADDR_LOC 2
3894: PUSH
3895: LD_EXP 31
3899: ST_TO_ADDR
// pom1 = JMM ;
3900: LD_ADDR_LOC 3
3904: PUSH
3905: LD_EXP 31
3909: ST_TO_ADDR
// end ; 1 :
3910: GO 3976
3912: LD_INT 1
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 3947
3920: POP
// begin pom = pom [ 1 ] ;
3921: LD_ADDR_LOC 2
3925: PUSH
3926: LD_LOC 2
3930: PUSH
3931: LD_INT 1
3933: ARRAY
3934: ST_TO_ADDR
// pom1 = JMM ;
3935: LD_ADDR_LOC 3
3939: PUSH
3940: LD_EXP 31
3944: ST_TO_ADDR
// end ; else
3945: GO 3976
3947: POP
// begin pom1 = pom [ 2 ] ;
3948: LD_ADDR_LOC 3
3952: PUSH
3953: LD_LOC 2
3957: PUSH
3958: LD_INT 2
3960: ARRAY
3961: ST_TO_ADDR
// pom = pom [ 1 ] ;
3962: LD_ADDR_LOC 2
3966: PUSH
3967: LD_LOC 2
3971: PUSH
3972: LD_INT 1
3974: ARRAY
3975: ST_TO_ADDR
// end ; end ; DialogueOn ;
3976: CALL_OW 6
// Say ( pom , D5b-Sol1-1 ) ;
3980: LD_LOC 2
3984: PPUSH
3985: LD_STRING D5b-Sol1-1
3987: PPUSH
3988: CALL_OW 88
// Say ( pom1 , D5b-Sol2-1 ) ;
3992: LD_LOC 3
3996: PPUSH
3997: LD_STRING D5b-Sol2-1
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// if not disable_kecy_5D then
4008: LD_LOC 9
4012: NOT
4013: IFFALSE 4018
// enable ( 1 ) ;
4015: LD_INT 1
4017: ENABLE_MARKED
// DialogueOff ;
4018: CALL_OW 7
// kecy = false ;
4022: LD_ADDR_LOC 7
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// end ;
4030: END
// on UnitKamikazed ( un ) do begin if not KAMI then
4031: LD_LOC 8
4035: NOT
4036: IFFALSE 4232
// begin KAMI = true ;
4038: LD_ADDR_LOC 8
4042: PUSH
4043: LD_INT 1
4045: ST_TO_ADDR
// while kecy do
4046: LD_LOC 7
4050: IFFALSE 4061
// wait ( 0 0$1 ) ;
4052: LD_INT 35
4054: PPUSH
4055: CALL_OW 67
4059: GO 4046
// kecy = true ;
4061: LD_ADDR_LOC 7
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// wait ( 0 0$1.5 ) ;
4069: LD_INT 52
4071: PPUSH
4072: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4076: LD_ADDR_LOC 2
4080: PUSH
4081: LD_INT 22
4083: PUSH
4084: LD_EXP 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 21
4095: PUSH
4096: LD_INT 1
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 69
4111: ST_TO_ADDR
// pom = pom diff [ JMM ] ;
4112: LD_ADDR_LOC 2
4116: PUSH
4117: LD_LOC 2
4121: PUSH
4122: LD_EXP 31
4126: PUSH
4127: EMPTY
4128: LIST
4129: DIFF
4130: ST_TO_ADDR
// if pom > 0 then
4131: LD_LOC 2
4135: PUSH
4136: LD_INT 0
4138: GREATER
4139: IFFALSE 4214
// begin DialogueOn ;
4141: CALL_OW 6
// if GetSex ( pom [ 1 ] ) = sex_male then
4145: LD_LOC 2
4149: PUSH
4150: LD_INT 1
4152: ARRAY
4153: PPUSH
4154: CALL_OW 258
4158: PUSH
4159: LD_INT 1
4161: EQUAL
4162: IFFALSE 4182
// Say ( pom [ 1 ] , D5c-Sol1-1 ) else
4164: LD_LOC 2
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: LD_STRING D5c-Sol1-1
4175: PPUSH
4176: CALL_OW 88
4180: GO 4198
// Say ( pom [ 1 ] , D5c-FSol1-1 ) ;
4182: LD_LOC 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_STRING D5c-FSol1-1
4193: PPUSH
4194: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
4198: LD_EXP 31
4202: PPUSH
4203: LD_STRING D5c-JMM-1
4205: PPUSH
4206: CALL_OW 88
// DialogueOff ;
4210: CALL_OW 7
// end ; if not disable_kecy_5D then
4214: LD_LOC 9
4218: NOT
4219: IFFALSE 4224
// enable ( 1 ) ;
4221: LD_INT 1
4223: ENABLE_MARKED
// kecy = false ;
4224: LD_ADDR_LOC 7
4228: PUSH
4229: LD_INT 0
4231: ST_TO_ADDR
// end ; enable ;
4232: ENABLE
// end ;
4233: PPOPN 1
4235: END
// every 0 0$1 trigger See ( You , A2_op1 ) or See ( You , A2_op2 ) or See ( You , A2_op3 ) do
4236: LD_EXP 1
4240: PPUSH
4241: LD_INT 89
4243: PPUSH
4244: CALL_OW 292
4248: PUSH
4249: LD_EXP 1
4253: PPUSH
4254: LD_INT 90
4256: PPUSH
4257: CALL_OW 292
4261: OR
4262: PUSH
4263: LD_EXP 1
4267: PPUSH
4268: LD_INT 91
4270: PPUSH
4271: CALL_OW 292
4275: OR
4276: IFFALSE 4575
4278: GO 4280
4280: DISABLE
// begin while kecy do
4281: LD_LOC 7
4285: IFFALSE 4296
// wait ( 0 0$1 ) ;
4287: LD_INT 35
4289: PPUSH
4290: CALL_OW 67
4294: GO 4281
// kecy = true ;
4296: LD_ADDR_LOC 7
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// CenterOnUnits ( [ A2_op1 , A2_op2 , A2_op3 ] ) ;
4304: LD_INT 89
4306: PUSH
4307: LD_INT 90
4309: PUSH
4310: LD_INT 91
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4322: LD_ADDR_LOC 2
4326: PUSH
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: LD_EXP 31
4337: PUSH
4338: EMPTY
4339: LIST
4340: PPUSH
4341: CALL 6350 0 3
4345: ST_TO_ADDR
// if pom < 0 then
4346: LD_LOC 2
4350: PUSH
4351: LD_INT 0
4353: LESS
4354: IFFALSE 4367
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4356: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4358: PPUSH
4359: CALL_OW 100
// konec_mise ;
4363: CALL 499 0 0
// end ; case pom of 0 :
4367: LD_LOC 2
4371: PUSH
4372: LD_INT 0
4374: DOUBLE
4375: EQUAL
4376: IFTRUE 4380
4378: GO 4403
4380: POP
// begin pom = JMM ;
4381: LD_ADDR_LOC 2
4385: PUSH
4386: LD_EXP 31
4390: ST_TO_ADDR
// pom1 = JMM ;
4391: LD_ADDR_LOC 3
4395: PUSH
4396: LD_EXP 31
4400: ST_TO_ADDR
// end ; 1 :
4401: GO 4467
4403: LD_INT 1
4405: DOUBLE
4406: EQUAL
4407: IFTRUE 4411
4409: GO 4438
4411: POP
// begin pom = pom [ 1 ] ;
4412: LD_ADDR_LOC 2
4416: PUSH
4417: LD_LOC 2
4421: PUSH
4422: LD_INT 1
4424: ARRAY
4425: ST_TO_ADDR
// pom1 = JMM ;
4426: LD_ADDR_LOC 3
4430: PUSH
4431: LD_EXP 31
4435: ST_TO_ADDR
// end ; else
4436: GO 4467
4438: POP
// begin pom1 = pom [ 2 ] ;
4439: LD_ADDR_LOC 3
4443: PUSH
4444: LD_LOC 2
4448: PUSH
4449: LD_INT 2
4451: ARRAY
4452: ST_TO_ADDR
// pom = pom [ 1 ] ;
4453: LD_ADDR_LOC 2
4457: PUSH
4458: LD_LOC 2
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: ST_TO_ADDR
// end ; end ; DialogueOn ;
4467: CALL_OW 6
// if GetSex ( pom ) = sex_male then
4471: LD_LOC 2
4475: PPUSH
4476: CALL_OW 258
4480: PUSH
4481: LD_INT 1
4483: EQUAL
4484: IFFALSE 4500
// Say ( pom , D5a-Sol1-1 ) else
4486: LD_LOC 2
4490: PPUSH
4491: LD_STRING D5a-Sol1-1
4493: PPUSH
4494: CALL_OW 88
4498: GO 4512
// Say ( pom , D5a-FSol1-1 ) ;
4500: LD_LOC 2
4504: PPUSH
4505: LD_STRING D5a-FSol1-1
4507: PPUSH
4508: CALL_OW 88
// if GetSex ( pom1 ) = sex_male then
4512: LD_LOC 3
4516: PPUSH
4517: CALL_OW 258
4521: PUSH
4522: LD_INT 1
4524: EQUAL
4525: IFFALSE 4541
// Say ( pom1 , D5a-Sol2-1 ) else
4527: LD_LOC 3
4531: PPUSH
4532: LD_STRING D5a-Sol2-1
4534: PPUSH
4535: CALL_OW 88
4539: GO 4553
// Say ( pom1 , D5a-FSol2-1 ) ;
4541: LD_LOC 3
4545: PPUSH
4546: LD_STRING D5a-FSol2-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// if not disable_kecy_5D then
4557: LD_LOC 9
4561: NOT
4562: IFFALSE 4567
// enable ( 1 ) ;
4564: LD_INT 1
4566: ENABLE_MARKED
// kecy = false ;
4567: LD_ADDR_LOC 7
4571: PUSH
4572: LD_INT 0
4574: ST_TO_ADDR
// end ;
4575: END
// every 0 0$1 trigger not disable_kecy_5D marked 1 do
4576: LD_LOC 9
4580: NOT
4581: IFFALSE 4774
4583: GO 4585
4585: DISABLE
// begin while kecy do
4586: LD_LOC 7
4590: IFFALSE 4601
// wait ( 0 0$1 ) ;
4592: LD_INT 35
4594: PPUSH
4595: CALL_OW 67
4599: GO 4586
// kecy = true ;
4601: LD_ADDR_LOC 7
4605: PUSH
4606: LD_INT 1
4608: ST_TO_ADDR
// if IsOK ( Lisa ) then
4609: LD_EXP 36
4613: PPUSH
4614: CALL_OW 302
4618: IFFALSE 4634
// Say ( Lisa , D5d-Lisa-1 ) else
4620: LD_EXP 36
4624: PPUSH
4625: LD_STRING D5d-Lisa-1
4627: PPUSH
4628: CALL_OW 88
4632: GO 4746
// if IsOK ( Cyrus ) then
4634: LD_EXP 39
4638: PPUSH
4639: CALL_OW 302
4643: IFFALSE 4659
// Say ( Cyrus , D5d-Cyrus-1 ) else
4645: LD_EXP 39
4649: PPUSH
4650: LD_STRING D5d-Cyrus-1
4652: PPUSH
4653: CALL_OW 88
4657: GO 4746
// if IsOK ( Gary ) then
4659: LD_EXP 33
4663: PPUSH
4664: CALL_OW 302
4668: IFFALSE 4684
// Say ( Gary , D5d-Gary-1 ) else
4670: LD_EXP 33
4674: PPUSH
4675: LD_STRING D5d-Gary-1
4677: PPUSH
4678: CALL_OW 88
4682: GO 4746
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4684: LD_ADDR_LOC 2
4688: PUSH
4689: LD_INT 22
4691: PUSH
4692: LD_EXP 1
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 21
4703: PUSH
4704: LD_INT 1
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PPUSH
4715: CALL_OW 69
4719: ST_TO_ADDR
// if pom > 0 then
4720: LD_LOC 2
4724: PUSH
4725: LD_INT 0
4727: GREATER
4728: IFFALSE 4746
// Say ( pom [ 1 ] , D5d-Sol1-1 ) ;
4730: LD_LOC 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: LD_STRING D5d-Sol1-1
4741: PPUSH
4742: CALL_OW 88
// end ; Say ( JMM , D5d-JMM-1 ) ;
4746: LD_EXP 31
4750: PPUSH
4751: LD_STRING D5d-JMM-1
4753: PPUSH
4754: CALL_OW 88
// disable_kecy_5D = true ;
4758: LD_ADDR_LOC 9
4762: PUSH
4763: LD_INT 1
4765: ST_TO_ADDR
// kecy = false ;
4766: LD_ADDR_LOC 7
4770: PUSH
4771: LD_INT 0
4773: ST_TO_ADDR
// end ;
4774: END
// every 0 0$3 trigger GetSide ( A2_dep ) = You or IsDead ( A2_dep ) do var sci1 ;
4775: LD_INT 46
4777: PPUSH
4778: CALL_OW 255
4782: PUSH
4783: LD_EXP 1
4787: EQUAL
4788: PUSH
4789: LD_INT 46
4791: PPUSH
4792: CALL_OW 301
4796: OR
4797: IFFALSE 5002
4799: GO 4801
4801: DISABLE
4802: LD_INT 0
4804: PPUSH
// begin wait ( 0 0$1 ) ;
4805: LD_INT 35
4807: PPUSH
4808: CALL_OW 67
// CreateResourcesArea ( mat_artefact , 5 , Art_zone , false ) ;
4812: LD_INT 4
4814: PPUSH
4815: LD_INT 5
4817: PPUSH
4818: LD_INT 31
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: CALL_OW 59
// PlaceSeeing ( 16 , 9 , You , - 5 ) ;
4828: LD_INT 16
4830: PPUSH
4831: LD_INT 9
4833: PPUSH
4834: LD_EXP 1
4838: PPUSH
4839: LD_INT 5
4841: NEG
4842: PPUSH
4843: CALL_OW 330
// wait ( 0 0$1 ) ;
4847: LD_INT 35
4849: PPUSH
4850: CALL_OW 67
// DialogueOn ;
4854: CALL_OW 6
// CenterOnXY ( 17 , 10 ) ;
4858: LD_INT 17
4860: PPUSH
4861: LD_INT 10
4863: PPUSH
4864: CALL_OW 84
// pom = GetPeople ( sex_male , class_scientistic , [ JMM ] ) ;
4868: LD_ADDR_LOC 2
4872: PUSH
4873: LD_INT 1
4875: PPUSH
4876: LD_INT 4
4878: PPUSH
4879: LD_EXP 31
4883: PUSH
4884: EMPTY
4885: LIST
4886: PPUSH
4887: CALL 6350 0 3
4891: ST_TO_ADDR
// if pom > 0 then
4892: LD_LOC 2
4896: PUSH
4897: LD_INT 0
4899: GREATER
4900: IFFALSE 4918
// sci1 = pom [ 1 ] else
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_LOC 2
4911: PUSH
4912: LD_INT 1
4914: ARRAY
4915: ST_TO_ADDR
4916: GO 4920
// exit ;
4918: GO 5002
// Say ( sci1 , D6-Sci1-1 ) ;
4920: LD_VAR 0 1
4924: PPUSH
4925: LD_STRING D6-Sci1-1
4927: PPUSH
4928: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
4932: LD_EXP 31
4936: PPUSH
4937: LD_STRING D6-JMM-1
4939: PPUSH
4940: CALL_OW 88
// Say ( sci1 , D6-Sci1-2 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_STRING D6-Sci1-2
4951: PPUSH
4952: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4956: LD_EXP 31
4960: PPUSH
4961: LD_STRING D6-JMM-2
4963: PPUSH
4964: CALL_OW 88
// DialogueOff ;
4968: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
4972: LD_STRING M3
4974: PPUSH
4975: CALL_OW 337
// RemoveSeeing ( 16 , 9 , You ) ;
4979: LD_INT 16
4981: PPUSH
4982: LD_INT 9
4984: PPUSH
4985: LD_EXP 1
4989: PPUSH
4990: CALL_OW 331
// A2_dobyta = true ;
4994: LD_ADDR_EXP 28
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// end ;
5002: PPOPN 1
5004: END
// every 0 0$20 trigger A2_dobyta do
5005: LD_EXP 28
5009: IFFALSE 5348
5011: GO 5013
5013: DISABLE
// begin if A1_dobyta and A3_dobyta then
5014: LD_EXP 27
5018: PUSH
5019: LD_EXP 29
5023: AND
5024: IFFALSE 5028
// exit ;
5026: GO 5348
// wait ( 0 0$10 ) ;
5028: LD_INT 350
5030: PPUSH
5031: CALL_OW 67
// if not IsOK ( A3_solop ) then
5035: LD_INT 102
5037: PPUSH
5038: CALL_OW 302
5042: NOT
5043: IFFALSE 5047
// exit ;
5045: GO 5348
// DialogueOn ;
5047: CALL_OW 6
// pom = GetPeople ( sex_male , class_soldier , [ JMM , Cyrus , Gary , Bobby ] ) ;
5051: LD_ADDR_LOC 2
5055: PUSH
5056: LD_INT 1
5058: PPUSH
5059: LD_INT 1
5061: PPUSH
5062: LD_EXP 31
5066: PUSH
5067: LD_EXP 39
5071: PUSH
5072: LD_EXP 33
5076: PUSH
5077: LD_EXP 34
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: PPUSH
5088: CALL 6350 0 3
5092: ST_TO_ADDR
// if pom = 0 then
5093: LD_LOC 2
5097: PUSH
5098: LD_INT 0
5100: EQUAL
5101: IFFALSE 5127
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5103: LD_ADDR_LOC 2
5107: PUSH
5108: LD_INT 1
5110: PPUSH
5111: LD_INT 1
5113: PPUSH
5114: LD_EXP 31
5118: PUSH
5119: EMPTY
5120: LIST
5121: PPUSH
5122: CALL 6350 0 3
5126: ST_TO_ADDR
// if pom = 0 then
5127: LD_LOC 2
5131: PUSH
5132: LD_INT 0
5134: EQUAL
5135: IFFALSE 5149
// pom = JMM else
5137: LD_ADDR_LOC 2
5141: PUSH
5142: LD_EXP 31
5146: ST_TO_ADDR
5147: GO 5163
// pom = pom [ 1 ] ;
5149: LD_ADDR_LOC 2
5153: PUSH
5154: LD_LOC 2
5158: PUSH
5159: LD_INT 1
5161: ARRAY
5162: ST_TO_ADDR
// Say ( pom , D7-Sol1-1 ) ;
5163: LD_LOC 2
5167: PPUSH
5168: LD_STRING D7-Sol1-1
5170: PPUSH
5171: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
5175: LD_EXP 31
5179: PPUSH
5180: LD_STRING D7-JMM-1
5182: PPUSH
5183: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-1 ) ;
5187: LD_INT 102
5189: PPUSH
5190: LD_STRING D7-Ar1-1
5192: PPUSH
5193: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
5197: LD_EXP 31
5201: PPUSH
5202: LD_STRING D7-JMM-2
5204: PPUSH
5205: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-2 ) ;
5209: LD_INT 102
5211: PPUSH
5212: LD_STRING D7-Ar1-2
5214: PPUSH
5215: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
5219: LD_EXP 31
5223: PPUSH
5224: LD_STRING D7-JMM-3
5226: PPUSH
5227: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-3 ) ;
5231: LD_INT 102
5233: PPUSH
5234: LD_STRING D7-Ar1-3
5236: PPUSH
5237: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
5241: LD_EXP 31
5245: PPUSH
5246: LD_STRING D7-JMM-4
5248: PPUSH
5249: CALL_OW 88
// CenterOnXY ( 126 , 93 ) ;
5253: LD_INT 126
5255: PPUSH
5256: LD_INT 93
5258: PPUSH
5259: CALL_OW 84
// RevealFogArea ( You , Baziny ) ;
5263: LD_EXP 1
5267: PPUSH
5268: LD_INT 12
5270: PPUSH
5271: CALL_OW 332
// SayRadio ( A3_solop , D7-Ar1-4 ) ;
5275: LD_INT 102
5277: PPUSH
5278: LD_STRING D7-Ar1-4
5280: PPUSH
5281: CALL_OW 94
// pom = Query ( QCameras ) ;
5285: LD_ADDR_LOC 2
5289: PUSH
5290: LD_STRING QCameras
5292: PPUSH
5293: CALL_OW 97
5297: ST_TO_ADDR
// if pom = 1 then
5298: LD_LOC 2
5302: PUSH
5303: LD_INT 1
5305: EQUAL
5306: IFFALSE 5335
// begin oposoldier = 1 ;
5308: LD_ADDR_EXP 45
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// ChangeMissionObjectives ( MCar ) ;
5316: LD_STRING MCar
5318: PPUSH
5319: CALL_OW 337
// SetAreaMapShow ( baziny , 1 ) ;
5323: LD_INT 12
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 424
// end else
5333: GO 5344
// oposoldier = - 1 ;
5335: LD_ADDR_EXP 45
5339: PUSH
5340: LD_INT 1
5342: NEG
5343: ST_TO_ADDR
// DialogueOff ;
5344: CALL_OW 7
// end ;
5348: END
// export function dialog_kamery ; begin
5349: LD_INT 0
5351: PPUSH
// if not IsOK ( A3_solop ) then
5352: LD_INT 102
5354: PPUSH
5355: CALL_OW 302
5359: NOT
5360: IFFALSE 5364
// exit ;
5362: GO 5466
// Say ( A3_solop , D7a-Ar1-1 ) ;
5364: LD_INT 102
5366: PPUSH
5367: LD_STRING D7a-Ar1-1
5369: PPUSH
5370: CALL_OW 88
// HiddenCamera ( 87 , 3 , You ) ;
5374: LD_INT 87
5376: PPUSH
5377: LD_INT 3
5379: PPUSH
5380: LD_EXP 1
5384: PPUSH
5385: CALL_OW 244
// HiddenCamera ( 105 , 39 , You ) ;
5389: LD_INT 105
5391: PPUSH
5392: LD_INT 39
5394: PPUSH
5395: LD_EXP 1
5399: PPUSH
5400: CALL_OW 244
// HiddenCamera ( 134 , 56 , You ) ;
5404: LD_INT 134
5406: PPUSH
5407: LD_INT 56
5409: PPUSH
5410: LD_EXP 1
5414: PPUSH
5415: CALL_OW 244
// HiddenCamera ( 122 , 51 , You ) ;
5419: LD_INT 122
5421: PPUSH
5422: LD_INT 51
5424: PPUSH
5425: LD_EXP 1
5429: PPUSH
5430: CALL_OW 244
// HiddenCamera ( 91 , 8 , You ) ;
5434: LD_INT 91
5436: PPUSH
5437: LD_INT 8
5439: PPUSH
5440: LD_EXP 1
5444: PPUSH
5445: CALL_OW 244
// ChangeMissionObjectives ( MCarOut ) ;
5449: LD_STRING MCarOut
5451: PPUSH
5452: CALL_OW 337
// SetAreaMapShow ( baziny , 0 ) ;
5456: LD_INT 12
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 424
// end ;
5466: LD_VAR 0 1
5470: RET
// every 1 1$0 do
5471: GO 5473
5473: DISABLE
// begin wait ( timelimit [ difficulty ] ) ;
5474: LD_EXP 49
5478: PUSH
5479: LD_OWVAR 67
5483: ARRAY
5484: PPUSH
5485: CALL_OW 67
// InGameOn ;
5489: CALL_OW 8
// Say ( Powell , D9-Pow-1 ) ;
5493: LD_EXP 32
5497: PPUSH
5498: LD_STRING D9-Pow-1
5500: PPUSH
5501: CALL_OW 88
// InGameOff ;
5505: CALL_OW 9
// wait ( 10 10$0 ) ;
5509: LD_INT 21000
5511: PPUSH
5512: CALL_OW 67
// DialogueOn ;
5516: CALL_OW 6
// Say ( Powell , D9a-Pow-1 ) ;
5520: LD_EXP 32
5524: PPUSH
5525: LD_STRING D9a-Pow-1
5527: PPUSH
5528: CALL_OW 88
// end_of_mission_time ;
5532: CALL 454 0 0
// end ;
5536: END
// every 0 0$3 do
5537: GO 5539
5539: DISABLE
// begin pom1 = false ;
5540: LD_ADDR_LOC 3
5544: PUSH
5545: LD_INT 0
5547: ST_TO_ADDR
// pom = [ A3_are1 , A3_are2 , A3_are3 , A3_are4 , A3_are5 , A3_are6 , A3_are7 , A3_are8 , A3_are9 ] ;
5548: LD_ADDR_LOC 2
5552: PUSH
5553: LD_INT 23
5555: PUSH
5556: LD_INT 18
5558: PUSH
5559: LD_INT 44
5561: PUSH
5562: LD_INT 19
5564: PUSH
5565: LD_INT 24
5567: PUSH
5568: LD_INT 20
5570: PUSH
5571: LD_INT 21
5573: PUSH
5574: LD_INT 93
5576: PUSH
5577: LD_INT 22
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// for i in pom do
5591: LD_ADDR_LOC 1
5595: PUSH
5596: LD_LOC 2
5600: PUSH
5601: FOR_IN
5602: IFFALSE 5630
// if See ( You , i ) then
5604: LD_EXP 1
5608: PPUSH
5609: LD_LOC 1
5613: PPUSH
5614: CALL_OW 292
5618: IFFALSE 5628
// pom1 = true ;
5620: LD_ADDR_LOC 3
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
5628: GO 5601
5630: POP
5631: POP
// if not pom1 then
5632: LD_LOC 3
5636: NOT
5637: IFFALSE 5642
// enable else
5639: ENABLE
5640: GO 5869
// begin if not ( IsOK ( A3_rv1 ) or IsOK ( A3_rv2 ) or IsOK ( A3_rv3 ) ) then
5642: LD_INT 26
5644: PPUSH
5645: CALL_OW 302
5649: PUSH
5650: LD_INT 25
5652: PPUSH
5653: CALL_OW 302
5657: OR
5658: PUSH
5659: LD_INT 27
5661: PPUSH
5662: CALL_OW 302
5666: OR
5667: NOT
5668: IFFALSE 5673
// begin disable ;
5670: DISABLE
// exit ;
5671: GO 5869
// end ; pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) ;
5673: LD_ADDR_LOC 2
5677: PUSH
5678: LD_INT 22
5680: PUSH
5681: LD_EXP 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 25
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: ST_TO_ADDR
// if pom = 0 then
5709: LD_LOC 2
5713: PUSH
5714: LD_INT 0
5716: EQUAL
5717: IFFALSE 5743
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5719: LD_ADDR_LOC 2
5723: PUSH
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 1
5729: PPUSH
5730: LD_EXP 31
5734: PUSH
5735: EMPTY
5736: LIST
5737: PPUSH
5738: CALL 6350 0 3
5742: ST_TO_ADDR
// if pom = 0 then
5743: LD_LOC 2
5747: PUSH
5748: LD_INT 0
5750: EQUAL
5751: IFFALSE 5771
// pom = GetPeople ( sex_female , class_soldier , [ ] ) ;
5753: LD_ADDR_LOC 2
5757: PUSH
5758: LD_INT 2
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: EMPTY
5765: PPUSH
5766: CALL 6350 0 3
5770: ST_TO_ADDR
// if pom = 0 then
5771: LD_LOC 2
5775: PUSH
5776: LD_INT 0
5778: EQUAL
5779: IFFALSE 5794
// pom = [ JMM ] ;
5781: LD_ADDR_LOC 2
5785: PUSH
5786: LD_EXP 31
5790: PUSH
5791: EMPTY
5792: LIST
5793: ST_TO_ADDR
// if GetSex ( pom [ 1 ] ) = sex_male then
5794: LD_LOC 2
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: PPUSH
5803: CALL_OW 258
5807: PUSH
5808: LD_INT 1
5810: EQUAL
5811: IFFALSE 5831
// Say ( pom [ 1 ] , D8-Sol1-1 ) else
5813: LD_LOC 2
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_STRING D8-Sol1-1
5824: PPUSH
5825: CALL_OW 88
5829: GO 5847
// Say ( pom [ 1 ] , D8-FSol1-1 ) ;
5831: LD_LOC 2
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_STRING D8-FSol1-1
5842: PPUSH
5843: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5847: LD_EXP 31
5851: PPUSH
5852: LD_STRING D8-JMM-1
5854: PPUSH
5855: CALL_OW 88
// wait ( 0 0$20 ) ;
5859: LD_INT 700
5861: PPUSH
5862: CALL_OW 67
// enable ( 2 ) ;
5866: LD_INT 2
5868: ENABLE_MARKED
// end ; end ;
5869: END
// every 0 0$5 marked 2 do
5870: GO 5872
5872: DISABLE
// begin pom1 = false ;
5873: LD_ADDR_LOC 3
5877: PUSH
5878: LD_INT 0
5880: ST_TO_ADDR
// pom = [ A3_rv1 , A3_rv2 , A3_rv3 ] ;
5881: LD_ADDR_LOC 2
5885: PUSH
5886: LD_INT 26
5888: PUSH
5889: LD_INT 25
5891: PUSH
5892: LD_INT 27
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: ST_TO_ADDR
// for i in pom do
5900: LD_ADDR_LOC 1
5904: PUSH
5905: LD_LOC 2
5909: PUSH
5910: FOR_IN
5911: IFFALSE 5939
// if See ( You , i ) then
5913: LD_EXP 1
5917: PPUSH
5918: LD_LOC 1
5922: PPUSH
5923: CALL_OW 292
5927: IFFALSE 5937
// pom1 = true ;
5929: LD_ADDR_LOC 3
5933: PUSH
5934: LD_INT 1
5936: ST_TO_ADDR
5937: GO 5910
5939: POP
5940: POP
// if not pom1 then
5941: LD_LOC 3
5945: NOT
5946: IFFALSE 5951
// enable else
5948: ENABLE
5949: GO 6216
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) diff JMM ;
5951: LD_ADDR_LOC 2
5955: PUSH
5956: LD_INT 22
5958: PUSH
5959: LD_EXP 1
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 25
5970: PUSH
5971: LD_INT 1
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PPUSH
5982: CALL_OW 69
5986: PUSH
5987: LD_EXP 31
5991: DIFF
5992: ST_TO_ADDR
// if pom = 0 then
5993: LD_LOC 2
5997: PUSH
5998: LD_INT 0
6000: EQUAL
6001: IFFALSE 6027
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
6003: LD_ADDR_LOC 2
6007: PUSH
6008: LD_INT 1
6010: PPUSH
6011: LD_INT 1
6013: PPUSH
6014: LD_EXP 31
6018: PUSH
6019: EMPTY
6020: LIST
6021: PPUSH
6022: CALL 6350 0 3
6026: ST_TO_ADDR
// if pom = 0 then
6027: LD_LOC 2
6031: PUSH
6032: LD_INT 0
6034: EQUAL
6035: IFFALSE 6061
// pom = GetPeople ( sex_female , class_soldier , [ JMM ] ) ;
6037: LD_ADDR_LOC 2
6041: PUSH
6042: LD_INT 2
6044: PPUSH
6045: LD_INT 1
6047: PPUSH
6048: LD_EXP 31
6052: PUSH
6053: EMPTY
6054: LIST
6055: PPUSH
6056: CALL 6350 0 3
6060: ST_TO_ADDR
// if pom = 0 then
6061: LD_LOC 2
6065: PUSH
6066: LD_INT 0
6068: EQUAL
6069: IFFALSE 6113
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) diff JMM ;
6071: LD_ADDR_LOC 2
6075: PUSH
6076: LD_INT 22
6078: PUSH
6079: LD_EXP 1
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 21
6090: PUSH
6091: LD_INT 1
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PPUSH
6102: CALL_OW 69
6106: PUSH
6107: LD_EXP 31
6111: DIFF
6112: ST_TO_ADDR
// if pom = 0 then
6113: LD_LOC 2
6117: PUSH
6118: LD_INT 0
6120: EQUAL
6121: IFFALSE 6125
// exit ;
6123: GO 6216
// DialogueOn ;
6125: CALL_OW 6
// CenterOnUnits ( [ A3_rv1 , A3_rv2 , A3_rv3 ] ) ;
6129: LD_INT 26
6131: PUSH
6132: LD_INT 25
6134: PUSH
6135: LD_INT 27
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 85
// if GetSex ( pom [ 1 ] ) = sex_male then
6147: LD_LOC 2
6151: PUSH
6152: LD_INT 1
6154: ARRAY
6155: PPUSH
6156: CALL_OW 258
6160: PUSH
6161: LD_INT 1
6163: EQUAL
6164: IFFALSE 6184
// Say ( pom [ 1 ] , D8a-Sol2-1 ) else
6166: LD_LOC 2
6170: PUSH
6171: LD_INT 1
6173: ARRAY
6174: PPUSH
6175: LD_STRING D8a-Sol2-1
6177: PPUSH
6178: CALL_OW 88
6182: GO 6200
// Say ( pom [ 1 ] , D8a-FSol2-1 ) ;
6184: LD_LOC 2
6188: PUSH
6189: LD_INT 1
6191: ARRAY
6192: PPUSH
6193: LD_STRING D8a-FSol2-1
6195: PPUSH
6196: CALL_OW 88
// Say ( JMM , D8a-JMM-1 ) ;
6200: LD_EXP 31
6204: PPUSH
6205: LD_STRING D8a-JMM-1
6207: PPUSH
6208: CALL_OW 88
// DialogueOff ;
6212: CALL_OW 7
// end ; end ;
6216: END
// every 0 0$0.1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do var pom ;
6217: LD_INT 3
6219: PPUSH
6220: LD_INT 22
6222: PUSH
6223: LD_EXP 1
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: PPUSH
6235: CALL_OW 70
6239: PUSH
6240: LD_INT 0
6242: GREATER
6243: IFFALSE 6347
6245: GO 6247
6247: DISABLE
6248: LD_INT 0
6250: PPUSH
// begin case Rand ( 1 , 3 ) of 1 :
6251: LD_INT 1
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 12
6261: PUSH
6262: LD_INT 1
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6281
6270: POP
// pom = A1_vo1 ; 2 :
6271: LD_ADDR_VAR 0 1
6275: PUSH
6276: LD_INT 72
6278: ST_TO_ADDR
6279: GO 6320
6281: LD_INT 2
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6300
6289: POP
// pom = A1_ve1 ; 3 :
6290: LD_ADDR_VAR 0 1
6294: PUSH
6295: LD_INT 87
6297: ST_TO_ADDR
6298: GO 6320
6300: LD_INT 3
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6319
6308: POP
// pom = A1_vo4 ; end ;
6309: LD_ADDR_VAR 0 1
6313: PUSH
6314: LD_INT 76
6316: ST_TO_ADDR
6317: GO 6320
6319: POP
// if IsOK ( pom ) then
6320: LD_VAR 0 1
6324: PPUSH
6325: CALL_OW 302
6329: IFFALSE 6343
// Say ( pom , D2aa-Ar1-1 ) ;
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_STRING D2aa-Ar1-1
6338: PPUSH
6339: CALL_OW 88
// uprav_zivoty_arabskych_budov ;
6343: CALL 23124 0 0
// end ;
6347: PPOPN 1
6349: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 , pom5 , pom6 ; var pom1a , pom2a , pom3a , pom4a , pom5a , pom6a ; var j ; begin
6350: LD_INT 0
6352: PPUSH
6353: PPUSH
6354: PPUSH
6355: PPUSH
6356: PPUSH
6357: PPUSH
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
6362: PPUSH
6363: PPUSH
6364: PPUSH
6365: PPUSH
6366: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
6367: LD_ADDR_VAR 0 6
6371: PUSH
6372: LD_INT 22
6374: PUSH
6375: LD_EXP 1
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 25
6386: PUSH
6387: LD_INT 4
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 26
6396: PUSH
6397: LD_VAR 0 1
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: PPUSH
6411: CALL_OW 69
6415: ST_TO_ADDR
// pom1a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6416: LD_ADDR_VAR 0 12
6420: PUSH
6421: LD_INT 22
6423: PUSH
6424: LD_EXP 1
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 21
6435: PUSH
6436: LD_INT 2
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 33
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL_OW 69
6462: ST_TO_ADDR
// for j in pom1a do
6463: LD_ADDR_VAR 0 18
6467: PUSH
6468: LD_VAR 0 12
6472: PUSH
6473: FOR_IN
6474: IFFALSE 6514
// if GetClass ( Isdrivenby ( j ) ) = class_scientistic then
6476: LD_VAR 0 18
6480: PPUSH
6481: CALL_OW 311
6485: PPUSH
6486: CALL_OW 257
6490: PUSH
6491: LD_INT 4
6493: EQUAL
6494: IFFALSE 6512
// pom1 = pom1 ^ j ;
6496: LD_ADDR_VAR 0 6
6500: PUSH
6501: LD_VAR 0 6
6505: PUSH
6506: LD_VAR 0 18
6510: ADD
6511: ST_TO_ADDR
6512: GO 6473
6514: POP
6515: POP
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
6516: LD_ADDR_VAR 0 7
6520: PUSH
6521: LD_INT 22
6523: PUSH
6524: LD_EXP 1
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 26
6545: PUSH
6546: LD_VAR 0 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PPUSH
6560: CALL_OW 69
6564: ST_TO_ADDR
// pom2a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6565: LD_ADDR_VAR 0 13
6569: PUSH
6570: LD_INT 22
6572: PUSH
6573: LD_EXP 1
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 21
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 33
6594: PUSH
6595: LD_INT 1
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: ST_TO_ADDR
// for j in pom2a do
6612: LD_ADDR_VAR 0 18
6616: PUSH
6617: LD_VAR 0 13
6621: PUSH
6622: FOR_IN
6623: IFFALSE 6663
// if GetClass ( Isdrivenby ( j ) ) = class_mechanic then
6625: LD_VAR 0 18
6629: PPUSH
6630: CALL_OW 311
6634: PPUSH
6635: CALL_OW 257
6639: PUSH
6640: LD_INT 3
6642: EQUAL
6643: IFFALSE 6661
// pom2 = pom2 ^ j ;
6645: LD_ADDR_VAR 0 7
6649: PUSH
6650: LD_VAR 0 7
6654: PUSH
6655: LD_VAR 0 18
6659: ADD
6660: ST_TO_ADDR
6661: GO 6622
6663: POP
6664: POP
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
6665: LD_ADDR_VAR 0 8
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_EXP 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 25
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 26
6694: PUSH
6695: LD_VAR 0 1
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 69
6713: ST_TO_ADDR
// pom3a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6714: LD_ADDR_VAR 0 14
6718: PUSH
6719: LD_INT 22
6721: PUSH
6722: LD_EXP 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 21
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 33
6743: PUSH
6744: LD_INT 1
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: PPUSH
6756: CALL_OW 69
6760: ST_TO_ADDR
// for j in pom3a do
6761: LD_ADDR_VAR 0 18
6765: PUSH
6766: LD_VAR 0 14
6770: PUSH
6771: FOR_IN
6772: IFFALSE 6812
// if GetClass ( Isdrivenby ( j ) ) = class_engineer then
6774: LD_VAR 0 18
6778: PPUSH
6779: CALL_OW 311
6783: PPUSH
6784: CALL_OW 257
6788: PUSH
6789: LD_INT 2
6791: EQUAL
6792: IFFALSE 6810
// pom3 = pom3 ^ j ;
6794: LD_ADDR_VAR 0 8
6798: PUSH
6799: LD_VAR 0 8
6803: PUSH
6804: LD_VAR 0 18
6808: ADD
6809: ST_TO_ADDR
6810: GO 6771
6812: POP
6813: POP
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
6814: LD_ADDR_VAR 0 9
6818: PUSH
6819: LD_INT 22
6821: PUSH
6822: LD_EXP 1
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: LD_INT 25
6833: PUSH
6834: LD_INT 1
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 26
6843: PUSH
6844: LD_VAR 0 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: ST_TO_ADDR
// pom4a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6863: LD_ADDR_VAR 0 15
6867: PUSH
6868: LD_INT 22
6870: PUSH
6871: LD_EXP 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 21
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 33
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 69
6909: ST_TO_ADDR
// for j in pom4a do
6910: LD_ADDR_VAR 0 18
6914: PUSH
6915: LD_VAR 0 15
6919: PUSH
6920: FOR_IN
6921: IFFALSE 6961
// if GetClass ( Isdrivenby ( j ) ) = class_soldier then
6923: LD_VAR 0 18
6927: PPUSH
6928: CALL_OW 311
6932: PPUSH
6933: CALL_OW 257
6937: PUSH
6938: LD_INT 1
6940: EQUAL
6941: IFFALSE 6959
// pom4 = pom4 ^ j ;
6943: LD_ADDR_VAR 0 9
6947: PUSH
6948: LD_VAR 0 9
6952: PUSH
6953: LD_VAR 0 18
6957: ADD
6958: ST_TO_ADDR
6959: GO 6920
6961: POP
6962: POP
// pom5 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_sniper ] , [ f_sex , sex ] ] ) ;
6963: LD_ADDR_VAR 0 10
6967: PUSH
6968: LD_INT 22
6970: PUSH
6971: LD_EXP 1
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 5
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 26
6992: PUSH
6993: LD_VAR 0 1
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// pom5a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7012: LD_ADDR_VAR 0 16
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_EXP 1
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 21
7031: PUSH
7032: LD_INT 2
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 33
7041: PUSH
7042: LD_INT 1
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: ST_TO_ADDR
// for j in pom5a do
7059: LD_ADDR_VAR 0 18
7063: PUSH
7064: LD_VAR 0 16
7068: PUSH
7069: FOR_IN
7070: IFFALSE 7110
// if GetClass ( Isdrivenby ( j ) ) = class_sniper then
7072: LD_VAR 0 18
7076: PPUSH
7077: CALL_OW 311
7081: PPUSH
7082: CALL_OW 257
7086: PUSH
7087: LD_INT 5
7089: EQUAL
7090: IFFALSE 7108
// pom5 = pom5 ^ j ;
7092: LD_ADDR_VAR 0 10
7096: PUSH
7097: LD_VAR 0 10
7101: PUSH
7102: LD_VAR 0 18
7106: ADD
7107: ST_TO_ADDR
7108: GO 7069
7110: POP
7111: POP
// pom6 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mortar ] , [ f_sex , sex ] ] ) ;
7112: LD_ADDR_VAR 0 11
7116: PUSH
7117: LD_INT 22
7119: PUSH
7120: LD_EXP 1
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 25
7131: PUSH
7132: LD_INT 8
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 26
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: PPUSH
7156: CALL_OW 69
7160: ST_TO_ADDR
// pom6a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7161: LD_ADDR_VAR 0 17
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_EXP 1
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 33
7190: PUSH
7191: LD_INT 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: ST_TO_ADDR
// for j in pom6a do
7208: LD_ADDR_VAR 0 18
7212: PUSH
7213: LD_VAR 0 17
7217: PUSH
7218: FOR_IN
7219: IFFALSE 7259
// if GetClass ( Isdrivenby ( j ) ) = class_mortar then
7221: LD_VAR 0 18
7225: PPUSH
7226: CALL_OW 311
7230: PPUSH
7231: CALL_OW 257
7235: PUSH
7236: LD_INT 8
7238: EQUAL
7239: IFFALSE 7257
// pom6 = pom6 ^ j ;
7241: LD_ADDR_VAR 0 11
7245: PUSH
7246: LD_VAR 0 11
7250: PUSH
7251: LD_VAR 0 18
7255: ADD
7256: ST_TO_ADDR
7257: GO 7218
7259: POP
7260: POP
// case povolani of class_scientistic :
7261: LD_VAR 0 2
7265: PUSH
7266: LD_INT 4
7268: DOUBLE
7269: EQUAL
7270: IFTRUE 7274
7272: GO 7287
7274: POP
// pom = pom1 ; class_mechanic :
7275: LD_ADDR_VAR 0 5
7279: PUSH
7280: LD_VAR 0 6
7284: ST_TO_ADDR
7285: GO 7393
7287: LD_INT 3
7289: DOUBLE
7290: EQUAL
7291: IFTRUE 7295
7293: GO 7308
7295: POP
// pom = pom2 ; class_engineer :
7296: LD_ADDR_VAR 0 5
7300: PUSH
7301: LD_VAR 0 7
7305: ST_TO_ADDR
7306: GO 7393
7308: LD_INT 2
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7316
7314: GO 7329
7316: POP
// pom = pom3 ; class_soldier :
7317: LD_ADDR_VAR 0 5
7321: PUSH
7322: LD_VAR 0 8
7326: ST_TO_ADDR
7327: GO 7393
7329: LD_INT 1
7331: DOUBLE
7332: EQUAL
7333: IFTRUE 7337
7335: GO 7350
7337: POP
// pom = pom4 ; class_sniper :
7338: LD_ADDR_VAR 0 5
7342: PUSH
7343: LD_VAR 0 9
7347: ST_TO_ADDR
7348: GO 7393
7350: LD_INT 5
7352: DOUBLE
7353: EQUAL
7354: IFTRUE 7358
7356: GO 7371
7358: POP
// pom = pom5 ; class_mortar :
7359: LD_ADDR_VAR 0 5
7363: PUSH
7364: LD_VAR 0 10
7368: ST_TO_ADDR
7369: GO 7393
7371: LD_INT 8
7373: DOUBLE
7374: EQUAL
7375: IFTRUE 7379
7377: GO 7392
7379: POP
// pom = pom6 ; end ;
7380: LD_ADDR_VAR 0 5
7384: PUSH
7385: LD_VAR 0 11
7389: ST_TO_ADDR
7390: GO 7393
7392: POP
// if povolani <> class_scientistic then
7393: LD_VAR 0 2
7397: PUSH
7398: LD_INT 4
7400: NONEQUAL
7401: IFFALSE 7419
// pom = pom ^ pom1 ;
7403: LD_ADDR_VAR 0 5
7407: PUSH
7408: LD_VAR 0 5
7412: PUSH
7413: LD_VAR 0 6
7417: ADD
7418: ST_TO_ADDR
// if povolani <> class_mechanic then
7419: LD_VAR 0 2
7423: PUSH
7424: LD_INT 3
7426: NONEQUAL
7427: IFFALSE 7445
// pom = pom ^ pom2 ;
7429: LD_ADDR_VAR 0 5
7433: PUSH
7434: LD_VAR 0 5
7438: PUSH
7439: LD_VAR 0 7
7443: ADD
7444: ST_TO_ADDR
// if povolani <> class_engineer then
7445: LD_VAR 0 2
7449: PUSH
7450: LD_INT 2
7452: NONEQUAL
7453: IFFALSE 7471
// pom = pom ^ pom3 ;
7455: LD_ADDR_VAR 0 5
7459: PUSH
7460: LD_VAR 0 5
7464: PUSH
7465: LD_VAR 0 8
7469: ADD
7470: ST_TO_ADDR
// if povolani <> class_soldier then
7471: LD_VAR 0 2
7475: PUSH
7476: LD_INT 1
7478: NONEQUAL
7479: IFFALSE 7497
// pom = pom ^ pom4 ;
7481: LD_ADDR_VAR 0 5
7485: PUSH
7486: LD_VAR 0 5
7490: PUSH
7491: LD_VAR 0 9
7495: ADD
7496: ST_TO_ADDR
// if povolani <> class_sniper then
7497: LD_VAR 0 2
7501: PUSH
7502: LD_INT 5
7504: NONEQUAL
7505: IFFALSE 7523
// pom = pom ^ pom5 ;
7507: LD_ADDR_VAR 0 5
7511: PUSH
7512: LD_VAR 0 5
7516: PUSH
7517: LD_VAR 0 10
7521: ADD
7522: ST_TO_ADDR
// if povolani <> class_mortar then
7523: LD_VAR 0 2
7527: PUSH
7528: LD_INT 8
7530: NONEQUAL
7531: IFFALSE 7549
// pom = pom ^ pom6 ;
7533: LD_ADDR_VAR 0 5
7537: PUSH
7538: LD_VAR 0 5
7542: PUSH
7543: LD_VAR 0 11
7547: ADD
7548: ST_TO_ADDR
// result := pom diff diffseznam ;
7549: LD_ADDR_VAR 0 4
7553: PUSH
7554: LD_VAR 0 5
7558: PUSH
7559: LD_VAR 0 3
7563: DIFF
7564: ST_TO_ADDR
// end ;
7565: LD_VAR 0 4
7569: RET
// export function query_konec_mise ; var pom ; begin
7570: LD_INT 0
7572: PPUSH
7573: PPUSH
// pom = Query ( QEndMission ) ;
7574: LD_ADDR_VAR 0 2
7578: PUSH
7579: LD_STRING QEndMission
7581: PPUSH
7582: CALL_OW 97
7586: ST_TO_ADDR
// result := pom ;
7587: LD_ADDR_VAR 0 1
7591: PUSH
7592: LD_VAR 0 2
7596: ST_TO_ADDR
// end ;
7597: LD_VAR 0 1
7601: RET
// every 0 0$1 do var pom ; var jedn ;
7602: GO 7604
7604: DISABLE
7605: LD_INT 0
7607: PPUSH
7608: PPUSH
// begin jedn = 0 ;
7609: LD_ADDR_VAR 0 2
7613: PUSH
7614: LD_INT 0
7616: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] , [ f_see , You ] ] ) ;
7617: LD_ADDR_VAR 0 1
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_EXP 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 101
7646: PUSH
7647: LD_EXP 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 69
7665: ST_TO_ADDR
// for i in pom do
7666: LD_ADDR_LOC 1
7670: PUSH
7671: LD_VAR 0 1
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7706
// if GetLives ( i ) < 250 then
7679: LD_LOC 1
7683: PPUSH
7684: CALL_OW 256
7688: PUSH
7689: LD_INT 250
7691: LESS
7692: IFFALSE 7704
// jedn = i ;
7694: LD_ADDR_VAR 0 2
7698: PUSH
7699: LD_LOC 1
7703: ST_TO_ADDR
7704: GO 7676
7706: POP
7707: POP
// if jedn <> 0 then
7708: LD_VAR 0 2
7712: PUSH
7713: LD_INT 0
7715: NONEQUAL
7716: IFFALSE 7727
// Hint ( stimulationdrugs ) else
7718: LD_STRING stimulationdrugs
7720: PPUSH
7721: CALL_OW 339
7725: GO 7728
// enable ;
7727: ENABLE
// end ; end_of_file
7728: PPOPN 2
7730: END
// export CREATE_AR_PROTIOFENZIVU_LIST ; export JEDNOTKY_BAZE_2_LIST ; export JEDNOTKY_BAZE_3_LIST ; export Ar_utok1_LIST ; export Ar_utok2_LIST ; export Ar_utok3_LIST ; export Ar_utok4_LIST ; export Ar_utoklast_LIST ; export AR_backa_LIST ; export GARYL ; export LISAL ; export YAML ; export FRANKL ; export CORNELL ; export BOBL ; export CYRL ; export DONL ; export BROWNL ; var ah , av ; function prepare_human ( sex , clas , level , name ) ; begin
7731: LD_INT 0
7733: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7734: LD_VAR 0 1
7738: PPUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: LD_VAR 0 3
7748: PPUSH
7749: CALL_OW 380
// hc_name := name ;
7753: LD_ADDR_OWVAR 26
7757: PUSH
7758: LD_VAR 0 4
7762: ST_TO_ADDR
// end ;
7763: LD_VAR 0 5
7767: RET
// export function nacti_osobu ( ident ) ; begin
7768: LD_INT 0
7770: PPUSH
// if CheckCharacterSet ( ident ) then
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 29
7780: IFFALSE 7799
// result := CreateCharacter ( ident ) else
7782: LD_ADDR_VAR 0 2
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 34
7796: ST_TO_ADDR
7797: GO 7807
// result := 0 ;
7799: LD_ADDR_VAR 0 2
7803: PUSH
7804: LD_INT 0
7806: ST_TO_ADDR
// end ;
7807: LD_VAR 0 2
7811: RET
// export function create_amici ; var i ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
// uc_side = You ;
7816: LD_ADDR_OWVAR 20
7820: PUSH
7821: LD_EXP 1
7825: ST_TO_ADDR
// uc_nation = nation_american ;
7826: LD_ADDR_OWVAR 21
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
7834: LD_ADDR_OWVAR 37
7838: PUSH
7839: LD_INT 3
7841: ST_TO_ADDR
// vc_control = control_computer ;
7842: LD_ADDR_OWVAR 38
7846: PUSH
7847: LD_INT 3
7849: ST_TO_ADDR
// vc_engine = engine_solar ;
7850: LD_ADDR_OWVAR 39
7854: PUSH
7855: LD_INT 2
7857: ST_TO_ADDR
// vc_weapon = us_radar ;
7858: LD_ADDR_OWVAR 40
7862: PUSH
7863: LD_INT 11
7865: ST_TO_ADDR
// av = CreateVehicle ;
7866: LD_ADDR_LOC 11
7870: PUSH
7871: CALL_OW 45
7875: ST_TO_ADDR
// Radar_enter := av ;
7876: LD_ADDR_EXP 43
7880: PUSH
7881: LD_LOC 11
7885: ST_TO_ADDR
// PlaceUnitXY ( av , 85 , 145 , false ) ;
7886: LD_LOC 11
7890: PPUSH
7891: LD_INT 85
7893: PPUSH
7894: LD_INT 145
7896: PPUSH
7897: LD_INT 0
7899: PPUSH
7900: CALL_OW 48
// for i in Amici_enter do
7904: LD_ADDR_VAR 0 2
7908: PUSH
7909: LD_EXP 42
7913: PUSH
7914: FOR_IN
7915: IFFALSE 7934
// PlaceUnitArea ( i , AMEnter , false ) ;
7917: LD_VAR 0 2
7921: PPUSH
7922: LD_INT 1
7924: PPUSH
7925: LD_INT 0
7927: PPUSH
7928: CALL_OW 49
7932: GO 7914
7934: POP
7935: POP
// end ;
7936: LD_VAR 0 1
7940: RET
// export function create_ar_protiofenzivu ; var pom ; begin
7941: LD_INT 0
7943: PPUSH
7944: PPUSH
// pom = [ ] ;
7945: LD_ADDR_VAR 0 2
7949: PUSH
7950: EMPTY
7951: ST_TO_ADDR
// uc_side := Arabi ;
7952: LD_ADDR_OWVAR 20
7956: PUSH
7957: LD_EXP 3
7961: ST_TO_ADDR
// uc_nation := nation_arabian ;
7962: LD_ADDR_OWVAR 21
7966: PUSH
7967: LD_INT 2
7969: ST_TO_ADDR
// uc_direction := 3 ;
7970: LD_ADDR_OWVAR 24
7974: PUSH
7975: LD_INT 3
7977: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , Ar_levely [ difficulty ] , Hasam El Azis ) ;
7978: LD_INT 1
7980: PPUSH
7981: LD_INT 3
7983: PPUSH
7984: LD_EXP 48
7988: PUSH
7989: LD_OWVAR 67
7993: ARRAY
7994: PPUSH
7995: LD_STRING Hasam El Azis
7997: PPUSH
7998: CALL 7731 0 4
// ah = CreateHuman ;
8002: LD_ADDR_LOC 10
8006: PUSH
8007: CALL_OW 44
8011: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8012: LD_ADDR_OWVAR 37
8016: PUSH
8017: LD_INT 14
8019: ST_TO_ADDR
// vc_control := control_manual ;
8020: LD_ADDR_OWVAR 38
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// vc_engine := engine_combustion ;
8028: LD_ADDR_OWVAR 39
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// vc_weapon := ar_gun ;
8036: LD_ADDR_OWVAR 40
8040: PUSH
8041: LD_INT 27
8043: ST_TO_ADDR
// av = CreateVehicle ;
8044: LD_ADDR_LOC 11
8048: PUSH
8049: CALL_OW 45
8053: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8054: LD_LOC 10
8058: PPUSH
8059: LD_LOC 11
8063: PPUSH
8064: CALL_OW 52
// pom = pom ^ av ;
8068: LD_ADDR_VAR 0 2
8072: PUSH
8073: LD_VAR 0 2
8077: PUSH
8078: LD_LOC 11
8082: ADD
8083: ST_TO_ADDR
// prepare_human ( sex_female , class_mechanic , Ar_levely [ difficulty ] - 2 ,  ) ;
8084: LD_INT 2
8086: PPUSH
8087: LD_INT 3
8089: PPUSH
8090: LD_EXP 48
8094: PUSH
8095: LD_OWVAR 67
8099: ARRAY
8100: PUSH
8101: LD_INT 2
8103: MINUS
8104: PPUSH
8105: LD_STRING 
8107: PPUSH
8108: CALL 7731 0 4
// ah = CreateHuman ;
8112: LD_ADDR_LOC 10
8116: PUSH
8117: CALL_OW 44
8121: ST_TO_ADDR
// vc_chassis := ar_light_trike ;
8122: LD_ADDR_OWVAR 37
8126: PUSH
8127: LD_INT 12
8129: ST_TO_ADDR
// vc_control := control_manual ;
8130: LD_ADDR_OWVAR 38
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// vc_engine := engine_solar ;
8138: LD_ADDR_OWVAR 39
8142: PUSH
8143: LD_INT 2
8145: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
8146: LD_ADDR_OWVAR 40
8150: PUSH
8151: LD_INT 24
8153: ST_TO_ADDR
// av = CreateVehicle ;
8154: LD_ADDR_LOC 11
8158: PUSH
8159: CALL_OW 45
8163: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8164: LD_LOC 10
8168: PPUSH
8169: LD_LOC 11
8173: PPUSH
8174: CALL_OW 52
// pom = pom ^ av ;
8178: LD_ADDR_VAR 0 2
8182: PUSH
8183: LD_VAR 0 2
8187: PUSH
8188: LD_LOC 11
8192: ADD
8193: ST_TO_ADDR
// if difficulty > 1 then
8194: LD_OWVAR 67
8198: PUSH
8199: LD_INT 1
8201: GREATER
8202: IFFALSE 8236
// begin ah = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
8204: LD_ADDR_LOC 10
8208: PUSH
8209: CALL 10268 0 0
8213: PPUSH
8214: LD_INT 1
8216: PPUSH
8217: LD_EXP 48
8221: PUSH
8222: LD_OWVAR 67
8226: ARRAY
8227: PPUSH
8228: LD_STRING 
8230: PPUSH
8231: CALL 13832 0 4
8235: ST_TO_ADDR
// end ; if difficulty > 2 then
8236: LD_OWVAR 67
8240: PUSH
8241: LD_INT 2
8243: GREATER
8244: IFFALSE 8304
// begin vc_chassis := ar_medium_trike ;
8246: LD_ADDR_OWVAR 37
8250: PUSH
8251: LD_INT 13
8253: ST_TO_ADDR
// vc_control := control_apeman ;
8254: LD_ADDR_OWVAR 38
8258: PUSH
8259: LD_INT 5
8261: ST_TO_ADDR
// vc_engine := engine_siberite ;
8262: LD_ADDR_OWVAR 39
8266: PUSH
8267: LD_INT 3
8269: ST_TO_ADDR
// vc_weapon := ar_multimissile_ballista ;
8270: LD_ADDR_OWVAR 40
8274: PUSH
8275: LD_INT 22
8277: ST_TO_ADDR
// av = CreateVehicle ;
8278: LD_ADDR_LOC 11
8282: PUSH
8283: CALL_OW 45
8287: ST_TO_ADDR
// pom = pom ^ av ;
8288: LD_ADDR_VAR 0 2
8292: PUSH
8293: LD_VAR 0 2
8297: PUSH
8298: LD_LOC 11
8302: ADD
8303: ST_TO_ADDR
// end ; CREATE_AR_PROTIOFENZIVU_LIST := pom ;
8304: LD_ADDR_EXP 9
8308: PUSH
8309: LD_VAR 0 2
8313: ST_TO_ADDR
// end ;
8314: LD_VAR 0 1
8318: RET
// export function create_auto_pro_solopa ; begin
8319: LD_INT 0
8321: PPUSH
// uc_side := Arabi ;
8322: LD_ADDR_OWVAR 20
8326: PUSH
8327: LD_EXP 3
8331: ST_TO_ADDR
// uc_nation := nation_arabian ;
8332: LD_ADDR_OWVAR 21
8336: PUSH
8337: LD_INT 2
8339: ST_TO_ADDR
// uc_direction := 3 ;
8340: LD_ADDR_OWVAR 24
8344: PUSH
8345: LD_INT 3
8347: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8348: LD_ADDR_OWVAR 37
8352: PUSH
8353: LD_INT 14
8355: ST_TO_ADDR
// vc_control := control_manual ;
8356: LD_ADDR_OWVAR 38
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// vc_engine := engine_siberite ;
8364: LD_ADDR_OWVAR 39
8368: PUSH
8369: LD_INT 3
8371: ST_TO_ADDR
// vc_weapon := ar_gun ;
8372: LD_ADDR_OWVAR 40
8376: PUSH
8377: LD_INT 27
8379: ST_TO_ADDR
// av := CreateVehicle ;
8380: LD_ADDR_LOC 11
8384: PUSH
8385: CALL_OW 45
8389: ST_TO_ADDR
// result := av ;
8390: LD_ADDR_VAR 0 1
8394: PUSH
8395: LD_LOC 11
8399: ST_TO_ADDR
// end ;
8400: LD_VAR 0 1
8404: RET
// var pom3 , pom4 , pom5 , pom6 , pom1 ; export function dodej_skily ; var pom , i ; begin
8405: LD_INT 0
8407: PPUSH
8408: PPUSH
8409: PPUSH
// uprav_cloveka ( A2_mor3 , class_mortar , Ar_levely [ difficulty ] ) ;
8410: LD_INT 92
8412: PPUSH
8413: LD_INT 8
8415: PPUSH
8416: LD_EXP 48
8420: PUSH
8421: LD_OWVAR 67
8425: ARRAY
8426: PPUSH
8427: CALL 8671 0 3
// uprav_cloveka ( A2_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8431: LD_INT 82
8433: PPUSH
8434: LD_INT 1
8436: PPUSH
8437: LD_EXP 48
8441: PUSH
8442: LD_OWVAR 67
8446: ARRAY
8447: PPUSH
8448: CALL 8671 0 3
// uprav_cloveka ( A2_zas2 , class_soldier , Ar_levely [ difficulty ] ) ;
8452: LD_INT 83
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: LD_EXP 48
8462: PUSH
8463: LD_OWVAR 67
8467: ARRAY
8468: PPUSH
8469: CALL 8671 0 3
// uprav_cloveka ( A3_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8473: LD_INT 101
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: LD_EXP 48
8483: PUSH
8484: LD_OWVAR 67
8488: ARRAY
8489: PPUSH
8490: CALL 8671 0 3
// uprav_cloveka ( A3_solop , class_engineer , Ar_levely [ difficulty ] ) ;
8494: LD_INT 102
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: LD_EXP 48
8504: PUSH
8505: LD_OWVAR 67
8509: ARRAY
8510: PPUSH
8511: CALL 8671 0 3
// pom = [ A3_rme1 , A3_rme2 , A3_rme3 ] ;
8515: LD_ADDR_VAR 0 2
8519: PUSH
8520: LD_INT 96
8522: PUSH
8523: LD_INT 95
8525: PUSH
8526: LD_INT 94
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: ST_TO_ADDR
// for i in pom do
8534: LD_ADDR_VAR 0 3
8538: PUSH
8539: LD_VAR 0 2
8543: PUSH
8544: FOR_IN
8545: IFFALSE 8572
// uprav_cloveka ( i , class_mechanic , Ar_levely [ difficulty ] ) ;
8547: LD_VAR 0 3
8551: PPUSH
8552: LD_INT 3
8554: PPUSH
8555: LD_EXP 48
8559: PUSH
8560: LD_OWVAR 67
8564: ARRAY
8565: PPUSH
8566: CALL 8671 0 3
8570: GO 8544
8572: POP
8573: POP
// end ;
8574: LD_VAR 0 1
8578: RET
// function set_skills ( un , skills ) ; begin
8579: LD_INT 0
8581: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_INT 1
8589: PPUSH
8590: LD_VAR 0 2
8594: PUSH
8595: LD_INT 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
8603: LD_VAR 0 1
8607: PPUSH
8608: LD_INT 2
8610: PPUSH
8611: LD_VAR 0 2
8615: PUSH
8616: LD_INT 2
8618: ARRAY
8619: PPUSH
8620: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
8624: LD_VAR 0 1
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: LD_VAR 0 2
8636: PUSH
8637: LD_INT 3
8639: ARRAY
8640: PPUSH
8641: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_INT 4
8652: PPUSH
8653: LD_VAR 0 2
8657: PUSH
8658: LD_INT 4
8660: ARRAY
8661: PPUSH
8662: CALL_OW 237
// end ;
8666: LD_VAR 0 3
8670: RET
// function uprav_cloveka ( un , clas , lev ) ; begin
8671: LD_INT 0
8673: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
8674: LD_INT 1
8676: PPUSH
8677: LD_VAR 0 2
8681: PPUSH
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_STRING 
8689: PPUSH
8690: CALL 7731 0 4
// ah = CreateHuman ;
8694: LD_ADDR_LOC 10
8698: PUSH
8699: CALL_OW 44
8703: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
8704: LD_ADDR_LOC 16
8708: PUSH
8709: LD_LOC 10
8713: PPUSH
8714: CALL 12235 0 1
8718: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
8719: LD_VAR 0 1
8723: PPUSH
8724: LD_LOC 10
8728: PPUSH
8729: CALL 12235 0 1
8733: PPUSH
8734: CALL 8579 0 2
// DestroyUnit ( ah ) ;
8738: LD_LOC 10
8742: PPUSH
8743: CALL_OW 65
// end ;
8747: LD_VAR 0 4
8751: RET
// export function vytvor_opravare ; var pom ; begin
8752: LD_INT 0
8754: PPUSH
8755: PPUSH
// uc_side := Arabi ;
8756: LD_ADDR_OWVAR 20
8760: PUSH
8761: LD_EXP 3
8765: ST_TO_ADDR
// uc_nation := nation_arabian ;
8766: LD_ADDR_OWVAR 21
8770: PUSH
8771: LD_INT 2
8773: ST_TO_ADDR
// uc_direction := 3 ;
8774: LD_ADDR_OWVAR 24
8778: PUSH
8779: LD_INT 3
8781: ST_TO_ADDR
// pom = [ ] ;
8782: LD_ADDR_VAR 0 2
8786: PUSH
8787: EMPTY
8788: ST_TO_ADDR
// if difficulty < 3 then
8789: LD_OWVAR 67
8793: PUSH
8794: LD_INT 3
8796: LESS
8797: IFFALSE 8871
// begin prepare_human ( sex_male , class_engineer , Ar_levely [ difficulty ] + 1 , Gru Pakansu ) ;
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: LD_EXP 48
8809: PUSH
8810: LD_OWVAR 67
8814: ARRAY
8815: PUSH
8816: LD_INT 1
8818: PLUS
8819: PPUSH
8820: LD_STRING Gru Pakansu
8822: PPUSH
8823: CALL 7731 0 4
// ah = CreateHuman ;
8827: LD_ADDR_LOC 10
8831: PUSH
8832: CALL_OW 44
8836: ST_TO_ADDR
// PlaceUnitXY ( ah , 19 , 6 , false ) ;
8837: LD_LOC 10
8841: PPUSH
8842: LD_INT 19
8844: PPUSH
8845: LD_INT 6
8847: PPUSH
8848: LD_INT 0
8850: PPUSH
8851: CALL_OW 48
// pom = pom ^ ah ;
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_VAR 0 2
8864: PUSH
8865: LD_LOC 10
8869: ADD
8870: ST_TO_ADDR
// end ; if difficulty < 2 then
8871: LD_OWVAR 67
8875: PUSH
8876: LD_INT 2
8878: LESS
8879: IFFALSE 8955
// begin prepare_human ( get_sex , class_engineer , Ar_levely [ difficulty ] + 2 ,  ) ;
8881: CALL 10268 0 0
8885: PPUSH
8886: LD_INT 2
8888: PPUSH
8889: LD_EXP 48
8893: PUSH
8894: LD_OWVAR 67
8898: ARRAY
8899: PUSH
8900: LD_INT 2
8902: PLUS
8903: PPUSH
8904: LD_STRING 
8906: PPUSH
8907: CALL 7731 0 4
// ah = CreateHuman ;
8911: LD_ADDR_LOC 10
8915: PUSH
8916: CALL_OW 44
8920: ST_TO_ADDR
// PlaceUnitXY ( ah , 25 , 1 , false ) ;
8921: LD_LOC 10
8925: PPUSH
8926: LD_INT 25
8928: PPUSH
8929: LD_INT 1
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 48
// pom = pom ^ ah ;
8939: LD_ADDR_VAR 0 2
8943: PUSH
8944: LD_VAR 0 2
8948: PUSH
8949: LD_LOC 10
8953: ADD
8954: ST_TO_ADDR
// end ; result := pom ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_VAR 0 2
8964: ST_TO_ADDR
// end ;
8965: LD_VAR 0 1
8969: RET
// export function vojcli_base_2 ; var pom ; var i , j ; begin
8970: LD_INT 0
8972: PPUSH
8973: PPUSH
8974: PPUSH
8975: PPUSH
// pom = [ ] ;
8976: LD_ADDR_VAR 0 2
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// uc_side := Arabi ;
8983: LD_ADDR_OWVAR 20
8987: PUSH
8988: LD_EXP 3
8992: ST_TO_ADDR
// uc_nation := nation_arabian ;
8993: LD_ADDR_OWVAR 21
8997: PUSH
8998: LD_INT 2
9000: ST_TO_ADDR
// uc_direction := 0 ;
9001: LD_ADDR_OWVAR 24
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// for i = 1 to 7 do
9009: LD_ADDR_VAR 0 3
9013: PUSH
9014: DOUBLE
9015: LD_INT 1
9017: DEC
9018: ST_TO_ADDR
9019: LD_INT 7
9021: PUSH
9022: FOR_TO
9023: IFFALSE 9097
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9025: LD_INT 1
9027: PPUSH
9028: LD_VAR 0 3
9032: PPUSH
9033: CALL 10303 0 2
9037: PPUSH
9038: LD_INT 1
9040: PPUSH
9041: LD_EXP 48
9045: PUSH
9046: LD_OWVAR 67
9050: ARRAY
9051: PPUSH
9052: LD_INT 1
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL 10519 0 2
9064: PPUSH
9065: CALL 7731 0 4
// ah = CreateHuman ;
9069: LD_ADDR_LOC 10
9073: PUSH
9074: CALL_OW 44
9078: ST_TO_ADDR
// pom = pom ^ ah ;
9079: LD_ADDR_VAR 0 2
9083: PUSH
9084: LD_VAR 0 2
9088: PUSH
9089: LD_LOC 10
9093: ADD
9094: ST_TO_ADDR
// end ;
9095: GO 9022
9097: POP
9098: POP
// for i = 1 to 3 do
9099: LD_ADDR_VAR 0 3
9103: PUSH
9104: DOUBLE
9105: LD_INT 1
9107: DEC
9108: ST_TO_ADDR
9109: LD_INT 3
9111: PUSH
9112: FOR_TO
9113: IFFALSE 9187
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9115: LD_INT 1
9117: PPUSH
9118: LD_VAR 0 3
9122: PPUSH
9123: CALL 10303 0 2
9127: PPUSH
9128: LD_INT 8
9130: PPUSH
9131: LD_EXP 48
9135: PUSH
9136: LD_OWVAR 67
9140: ARRAY
9141: PPUSH
9142: LD_INT 1
9144: PPUSH
9145: LD_VAR 0 3
9149: PPUSH
9150: CALL 10519 0 2
9154: PPUSH
9155: CALL 7731 0 4
// ah = CreateHuman ;
9159: LD_ADDR_LOC 10
9163: PUSH
9164: CALL_OW 44
9168: ST_TO_ADDR
// pom = pom ^ ah ;
9169: LD_ADDR_VAR 0 2
9173: PUSH
9174: LD_VAR 0 2
9178: PUSH
9179: LD_LOC 10
9183: ADD
9184: ST_TO_ADDR
// end ;
9185: GO 9112
9187: POP
9188: POP
// for i = 1 to 2 do
9189: LD_ADDR_VAR 0 3
9193: PUSH
9194: DOUBLE
9195: LD_INT 1
9197: DEC
9198: ST_TO_ADDR
9199: LD_INT 2
9201: PUSH
9202: FOR_TO
9203: IFFALSE 9259
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
9205: CALL 10268 0 0
9209: PPUSH
9210: LD_INT 4
9212: PPUSH
9213: LD_EXP 48
9217: PUSH
9218: LD_OWVAR 67
9222: ARRAY
9223: PPUSH
9224: LD_STRING 
9226: PPUSH
9227: CALL 7731 0 4
// ah = CreateHuman ;
9231: LD_ADDR_LOC 10
9235: PUSH
9236: CALL_OW 44
9240: ST_TO_ADDR
// pom = pom ^ ah ;
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_VAR 0 2
9250: PUSH
9251: LD_LOC 10
9255: ADD
9256: ST_TO_ADDR
// end ;
9257: GO 9202
9259: POP
9260: POP
// for i = 1 to 2 do
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: DOUBLE
9267: LD_INT 1
9269: DEC
9270: ST_TO_ADDR
9271: LD_INT 2
9273: PUSH
9274: FOR_TO
9275: IFFALSE 9357
// begin prepare_human ( get_sex_uprava ( 1 , i + 12 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i + 12 ) ) ;
9277: LD_INT 1
9279: PPUSH
9280: LD_VAR 0 3
9284: PUSH
9285: LD_INT 12
9287: PLUS
9288: PPUSH
9289: CALL 10303 0 2
9293: PPUSH
9294: LD_INT 8
9296: PPUSH
9297: LD_EXP 48
9301: PUSH
9302: LD_OWVAR 67
9306: ARRAY
9307: PPUSH
9308: LD_INT 1
9310: PPUSH
9311: LD_VAR 0 3
9315: PUSH
9316: LD_INT 12
9318: PLUS
9319: PPUSH
9320: CALL 10519 0 2
9324: PPUSH
9325: CALL 7731 0 4
// ah = CreateHuman ;
9329: LD_ADDR_LOC 10
9333: PUSH
9334: CALL_OW 44
9338: ST_TO_ADDR
// pom = pom ^ ah ;
9339: LD_ADDR_VAR 0 2
9343: PUSH
9344: LD_VAR 0 2
9348: PUSH
9349: LD_LOC 10
9353: ADD
9354: ST_TO_ADDR
// end ;
9355: GO 9274
9357: POP
9358: POP
// for i = 1 to 2 do
9359: LD_ADDR_VAR 0 3
9363: PUSH
9364: DOUBLE
9365: LD_INT 1
9367: DEC
9368: ST_TO_ADDR
9369: LD_INT 2
9371: PUSH
9372: FOR_TO
9373: IFFALSE 9455
// begin prepare_human ( get_sex_uprava ( 1 , i + 14 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 1 , i + 14 ) ) ;
9375: LD_INT 1
9377: PPUSH
9378: LD_VAR 0 3
9382: PUSH
9383: LD_INT 14
9385: PLUS
9386: PPUSH
9387: CALL 10303 0 2
9391: PPUSH
9392: LD_INT 2
9394: PPUSH
9395: LD_EXP 48
9399: PUSH
9400: LD_OWVAR 67
9404: ARRAY
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: LD_VAR 0 3
9413: PUSH
9414: LD_INT 14
9416: PLUS
9417: PPUSH
9418: CALL 10519 0 2
9422: PPUSH
9423: CALL 7731 0 4
// ah = CreateHuman ;
9427: LD_ADDR_LOC 10
9431: PUSH
9432: CALL_OW 44
9436: ST_TO_ADDR
// pom = pom ^ ah ;
9437: LD_ADDR_VAR 0 2
9441: PUSH
9442: LD_VAR 0 2
9446: PUSH
9447: LD_LOC 10
9451: ADD
9452: ST_TO_ADDR
// end ;
9453: GO 9372
9455: POP
9456: POP
// for i = 1 to 4 do
9457: LD_ADDR_VAR 0 3
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 4
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9553
// begin prepare_human ( get_sex_uprava ( 1 , i + 16 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 16 ) ) ;
9473: LD_INT 1
9475: PPUSH
9476: LD_VAR 0 3
9480: PUSH
9481: LD_INT 16
9483: PLUS
9484: PPUSH
9485: CALL 10303 0 2
9489: PPUSH
9490: LD_INT 3
9492: PPUSH
9493: LD_EXP 48
9497: PUSH
9498: LD_OWVAR 67
9502: ARRAY
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: LD_VAR 0 3
9511: PUSH
9512: LD_INT 16
9514: PLUS
9515: PPUSH
9516: CALL 10519 0 2
9520: PPUSH
9521: CALL 7731 0 4
// ah = CreateHuman ;
9525: LD_ADDR_LOC 10
9529: PUSH
9530: CALL_OW 44
9534: ST_TO_ADDR
// pom = pom ^ ah ;
9535: LD_ADDR_VAR 0 2
9539: PUSH
9540: LD_VAR 0 2
9544: PUSH
9545: LD_LOC 10
9549: ADD
9550: ST_TO_ADDR
// end ;
9551: GO 9470
9553: POP
9554: POP
// for i = 1 to 3 do
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: DOUBLE
9561: LD_INT 1
9563: DEC
9564: ST_TO_ADDR
9565: LD_INT 3
9567: PUSH
9568: FOR_TO
9569: IFFALSE 9651
// begin prepare_human ( get_sex_uprava ( 1 , i + 20 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 20 ) ) ;
9571: LD_INT 1
9573: PPUSH
9574: LD_VAR 0 3
9578: PUSH
9579: LD_INT 20
9581: PLUS
9582: PPUSH
9583: CALL 10303 0 2
9587: PPUSH
9588: LD_INT 3
9590: PPUSH
9591: LD_EXP 48
9595: PUSH
9596: LD_OWVAR 67
9600: ARRAY
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: LD_VAR 0 3
9609: PUSH
9610: LD_INT 20
9612: PLUS
9613: PPUSH
9614: CALL 10519 0 2
9618: PPUSH
9619: CALL 7731 0 4
// ah = CreateHuman ;
9623: LD_ADDR_LOC 10
9627: PUSH
9628: CALL_OW 44
9632: ST_TO_ADDR
// pom = pom ^ ah ;
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_VAR 0 2
9642: PUSH
9643: LD_LOC 10
9647: ADD
9648: ST_TO_ADDR
// end ;
9649: GO 9568
9651: POP
9652: POP
// JEDNOTKY_BAZE_2_LIST = pom ;
9653: LD_ADDR_EXP 10
9657: PUSH
9658: LD_VAR 0 2
9662: ST_TO_ADDR
// end ;
9663: LD_VAR 0 1
9667: RET
// export function vojcli_base_3 ; var pom ; var i , j ; begin
9668: LD_INT 0
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// pom = [ ] ;
9674: LD_ADDR_VAR 0 2
9678: PUSH
9679: EMPTY
9680: ST_TO_ADDR
// uc_side := Arabi ;
9681: LD_ADDR_OWVAR 20
9685: PUSH
9686: LD_EXP 3
9690: ST_TO_ADDR
// uc_nation := nation_arabian ;
9691: LD_ADDR_OWVAR 21
9695: PUSH
9696: LD_INT 2
9698: ST_TO_ADDR
// uc_direction := 0 ;
9699: LD_ADDR_OWVAR 24
9703: PUSH
9704: LD_INT 0
9706: ST_TO_ADDR
// for i = 1 to 4 do
9707: LD_ADDR_VAR 0 3
9711: PUSH
9712: DOUBLE
9713: LD_INT 1
9715: DEC
9716: ST_TO_ADDR
9717: LD_INT 4
9719: PUSH
9720: FOR_TO
9721: IFFALSE 9795
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9723: LD_INT 2
9725: PPUSH
9726: LD_VAR 0 3
9730: PPUSH
9731: CALL 10303 0 2
9735: PPUSH
9736: LD_INT 1
9738: PPUSH
9739: LD_EXP 48
9743: PUSH
9744: LD_OWVAR 67
9748: ARRAY
9749: PPUSH
9750: LD_INT 2
9752: PPUSH
9753: LD_VAR 0 3
9757: PPUSH
9758: CALL 10519 0 2
9762: PPUSH
9763: CALL 7731 0 4
// ah = CreateHuman ;
9767: LD_ADDR_LOC 10
9771: PUSH
9772: CALL_OW 44
9776: ST_TO_ADDR
// pom = pom ^ ah ;
9777: LD_ADDR_VAR 0 2
9781: PUSH
9782: LD_VAR 0 2
9786: PUSH
9787: LD_LOC 10
9791: ADD
9792: ST_TO_ADDR
// end ;
9793: GO 9720
9795: POP
9796: POP
// for i = 1 to 3 do
9797: LD_ADDR_VAR 0 3
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_INT 3
9809: PUSH
9810: FOR_TO
9811: IFFALSE 9885
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9813: LD_INT 2
9815: PPUSH
9816: LD_VAR 0 3
9820: PPUSH
9821: CALL 10303 0 2
9825: PPUSH
9826: LD_INT 8
9828: PPUSH
9829: LD_EXP 48
9833: PUSH
9834: LD_OWVAR 67
9838: ARRAY
9839: PPUSH
9840: LD_INT 2
9842: PPUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: CALL 10519 0 2
9852: PPUSH
9853: CALL 7731 0 4
// ah = CreateHuman ;
9857: LD_ADDR_LOC 10
9861: PUSH
9862: CALL_OW 44
9866: ST_TO_ADDR
// pom = pom ^ ah ;
9867: LD_ADDR_VAR 0 2
9871: PUSH
9872: LD_VAR 0 2
9876: PUSH
9877: LD_LOC 10
9881: ADD
9882: ST_TO_ADDR
// end ;
9883: GO 9810
9885: POP
9886: POP
// for i = 1 to 4 do
9887: LD_ADDR_VAR 0 3
9891: PUSH
9892: DOUBLE
9893: LD_INT 1
9895: DEC
9896: ST_TO_ADDR
9897: LD_INT 4
9899: PUSH
9900: FOR_TO
9901: IFFALSE 9983
// begin prepare_human ( get_sex_uprava ( 2 , i + 7 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 2 , i + 7 ) ) ;
9903: LD_INT 2
9905: PPUSH
9906: LD_VAR 0 3
9910: PUSH
9911: LD_INT 7
9913: PLUS
9914: PPUSH
9915: CALL 10303 0 2
9919: PPUSH
9920: LD_INT 3
9922: PPUSH
9923: LD_EXP 48
9927: PUSH
9928: LD_OWVAR 67
9932: ARRAY
9933: PPUSH
9934: LD_INT 2
9936: PPUSH
9937: LD_VAR 0 3
9941: PUSH
9942: LD_INT 7
9944: PLUS
9945: PPUSH
9946: CALL 10519 0 2
9950: PPUSH
9951: CALL 7731 0 4
// ah = CreateHuman ;
9955: LD_ADDR_LOC 10
9959: PUSH
9960: CALL_OW 44
9964: ST_TO_ADDR
// pom = pom ^ ah ;
9965: LD_ADDR_VAR 0 2
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: LD_LOC 10
9979: ADD
9980: ST_TO_ADDR
// end ;
9981: GO 9900
9983: POP
9984: POP
// for i = 1 to 2 do
9985: LD_ADDR_VAR 0 3
9989: PUSH
9990: DOUBLE
9991: LD_INT 1
9993: DEC
9994: ST_TO_ADDR
9995: LD_INT 2
9997: PUSH
9998: FOR_TO
9999: IFFALSE 10055
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
10001: CALL 10268 0 0
10005: PPUSH
10006: LD_INT 4
10008: PPUSH
10009: LD_EXP 48
10013: PUSH
10014: LD_OWVAR 67
10018: ARRAY
10019: PPUSH
10020: LD_STRING 
10022: PPUSH
10023: CALL 7731 0 4
// ah = CreateHuman ;
10027: LD_ADDR_LOC 10
10031: PUSH
10032: CALL_OW 44
10036: ST_TO_ADDR
// pom = pom ^ ah ;
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: LD_VAR 0 2
10046: PUSH
10047: LD_LOC 10
10051: ADD
10052: ST_TO_ADDR
// end ;
10053: GO 9998
10055: POP
10056: POP
// for i = 1 to 2 do
10057: LD_ADDR_VAR 0 3
10061: PUSH
10062: DOUBLE
10063: LD_INT 1
10065: DEC
10066: ST_TO_ADDR
10067: LD_INT 2
10069: PUSH
10070: FOR_TO
10071: IFFALSE 10153
// begin prepare_human ( get_sex_uprava ( 2 , i + 13 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i + 13 ) ) ;
10073: LD_INT 2
10075: PPUSH
10076: LD_VAR 0 3
10080: PUSH
10081: LD_INT 13
10083: PLUS
10084: PPUSH
10085: CALL 10303 0 2
10089: PPUSH
10090: LD_INT 8
10092: PPUSH
10093: LD_EXP 48
10097: PUSH
10098: LD_OWVAR 67
10102: ARRAY
10103: PPUSH
10104: LD_INT 2
10106: PPUSH
10107: LD_VAR 0 3
10111: PUSH
10112: LD_INT 13
10114: PLUS
10115: PPUSH
10116: CALL 10519 0 2
10120: PPUSH
10121: CALL 7731 0 4
// ah = CreateHuman ;
10125: LD_ADDR_LOC 10
10129: PUSH
10130: CALL_OW 44
10134: ST_TO_ADDR
// pom = pom ^ ah ;
10135: LD_ADDR_VAR 0 2
10139: PUSH
10140: LD_VAR 0 2
10144: PUSH
10145: LD_LOC 10
10149: ADD
10150: ST_TO_ADDR
// end ;
10151: GO 10070
10153: POP
10154: POP
// for i = 1 to 2 do
10155: LD_ADDR_VAR 0 3
10159: PUSH
10160: DOUBLE
10161: LD_INT 1
10163: DEC
10164: ST_TO_ADDR
10165: LD_INT 2
10167: PUSH
10168: FOR_TO
10169: IFFALSE 10251
// begin prepare_human ( get_sex_uprava ( 2 , i + 15 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 2 , i + 15 ) ) ;
10171: LD_INT 2
10173: PPUSH
10174: LD_VAR 0 3
10178: PUSH
10179: LD_INT 15
10181: PLUS
10182: PPUSH
10183: CALL 10303 0 2
10187: PPUSH
10188: LD_INT 2
10190: PPUSH
10191: LD_EXP 48
10195: PUSH
10196: LD_OWVAR 67
10200: ARRAY
10201: PPUSH
10202: LD_INT 2
10204: PPUSH
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 15
10212: PLUS
10213: PPUSH
10214: CALL 10519 0 2
10218: PPUSH
10219: CALL 7731 0 4
// ah = CreateHuman ;
10223: LD_ADDR_LOC 10
10227: PUSH
10228: CALL_OW 44
10232: ST_TO_ADDR
// pom = pom ^ ah ;
10233: LD_ADDR_VAR 0 2
10237: PUSH
10238: LD_VAR 0 2
10242: PUSH
10243: LD_LOC 10
10247: ADD
10248: ST_TO_ADDR
// end ;
10249: GO 10168
10251: POP
10252: POP
// JEDNOTKY_BAZE_3_LIST = pom ;
10253: LD_ADDR_EXP 11
10257: PUSH
10258: LD_VAR 0 2
10262: ST_TO_ADDR
// end ;
10263: LD_VAR 0 1
10267: RET
// function get_sex ; begin
10268: LD_INT 0
10270: PPUSH
// if Prob ( 20 ) then
10271: LD_INT 20
10273: PPUSH
10274: CALL_OW 13
10278: IFFALSE 10290
// result = sex_female else
10280: LD_ADDR_VAR 0 1
10284: PUSH
10285: LD_INT 2
10287: ST_TO_ADDR
10288: GO 10298
// result = sex_male ;
10290: LD_ADDR_VAR 0 1
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
// end ;
10298: LD_VAR 0 1
10302: RET
// function get_sex_uprava ( ser , cis ) ; var a ; begin
10303: LD_INT 0
10305: PPUSH
10306: PPUSH
// case ser of 1 :
10307: LD_VAR 0 1
10311: PUSH
10312: LD_INT 1
10314: DOUBLE
10315: EQUAL
10316: IFTRUE 10320
10318: GO 10412
10320: POP
// if cis = 1 then
10321: LD_VAR 0 2
10325: PUSH
10326: LD_INT 1
10328: EQUAL
10329: IFFALSE 10341
// a = sex_female else
10331: LD_ADDR_VAR 0 4
10335: PUSH
10336: LD_INT 2
10338: ST_TO_ADDR
10339: GO 10410
// if cis in [ 3 , 4 , 5 , 7 , 8 , 13 , 14 , 15 , 20 , 23 ] then
10341: LD_VAR 0 2
10345: PUSH
10346: LD_INT 3
10348: PUSH
10349: LD_INT 4
10351: PUSH
10352: LD_INT 5
10354: PUSH
10355: LD_INT 7
10357: PUSH
10358: LD_INT 8
10360: PUSH
10361: LD_INT 13
10363: PUSH
10364: LD_INT 14
10366: PUSH
10367: LD_INT 15
10369: PUSH
10370: LD_INT 20
10372: PUSH
10373: LD_INT 23
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: IN
10388: IFFALSE 10400
// a = sex_male else
10390: LD_ADDR_VAR 0 4
10394: PUSH
10395: LD_INT 1
10397: ST_TO_ADDR
10398: GO 10410
// a = get_sex ; 2 :
10400: LD_ADDR_VAR 0 4
10404: PUSH
10405: CALL 10268 0 0
10409: ST_TO_ADDR
10410: GO 10504
10412: LD_INT 2
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10503
10420: POP
// if cis in [ 5 ] then
10421: LD_VAR 0 2
10425: PUSH
10426: LD_INT 5
10428: PUSH
10429: EMPTY
10430: LIST
10431: IN
10432: IFFALSE 10444
// a = sex_female else
10434: LD_ADDR_VAR 0 4
10438: PUSH
10439: LD_INT 2
10441: ST_TO_ADDR
10442: GO 10501
// if cis in [ 2 , 3 , 4 , 8 , 11 , 14 , 17 ] then
10444: LD_VAR 0 2
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 3
10454: PUSH
10455: LD_INT 4
10457: PUSH
10458: LD_INT 8
10460: PUSH
10461: LD_INT 11
10463: PUSH
10464: LD_INT 14
10466: PUSH
10467: LD_INT 17
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: IN
10479: IFFALSE 10491
// a = sex_male else
10481: LD_ADDR_VAR 0 4
10485: PUSH
10486: LD_INT 1
10488: ST_TO_ADDR
10489: GO 10501
// a = get_sex ; end ;
10491: LD_ADDR_VAR 0 4
10495: PUSH
10496: CALL 10268 0 0
10500: ST_TO_ADDR
10501: GO 10504
10503: POP
// result = a ;
10504: LD_ADDR_VAR 0 3
10508: PUSH
10509: LD_VAR 0 4
10513: ST_TO_ADDR
// end ;
10514: LD_VAR 0 3
10518: RET
// function get_name ( serie , cislo ) ; var a ; begin
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
// a =  ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_STRING 
10530: ST_TO_ADDR
// case serie of 1 :
10531: LD_VAR 0 1
10535: PUSH
10536: LD_INT 1
10538: DOUBLE
10539: EQUAL
10540: IFTRUE 10544
10542: GO 10762
10544: POP
// case cislo of 1 :
10545: LD_VAR 0 2
10549: PUSH
10550: LD_INT 1
10552: DOUBLE
10553: EQUAL
10554: IFTRUE 10558
10556: GO 10569
10558: POP
// a = Petronela Fagan ; 3 :
10559: LD_ADDR_VAR 0 4
10563: PUSH
10564: LD_STRING Petronela Fagan
10566: ST_TO_ADDR
10567: GO 10760
10569: LD_INT 3
10571: DOUBLE
10572: EQUAL
10573: IFTRUE 10577
10575: GO 10588
10577: POP
// a = Jaryn Floryk ; 4 :
10578: LD_ADDR_VAR 0 4
10582: PUSH
10583: LD_STRING Jaryn Floryk
10585: ST_TO_ADDR
10586: GO 10760
10588: LD_INT 4
10590: DOUBLE
10591: EQUAL
10592: IFTRUE 10596
10594: GO 10607
10596: POP
// a = Ira Smailer ; 5 :
10597: LD_ADDR_VAR 0 4
10601: PUSH
10602: LD_STRING Ira Smailer
10604: ST_TO_ADDR
10605: GO 10760
10607: LD_INT 5
10609: DOUBLE
10610: EQUAL
10611: IFTRUE 10615
10613: GO 10626
10615: POP
// a = Soren Rafin ; 7 :
10616: LD_ADDR_VAR 0 4
10620: PUSH
10621: LD_STRING Soren Rafin
10623: ST_TO_ADDR
10624: GO 10760
10626: LD_INT 7
10628: DOUBLE
10629: EQUAL
10630: IFTRUE 10634
10632: GO 10645
10634: POP
// a = Mark Kent ; 8 :
10635: LD_ADDR_VAR 0 4
10639: PUSH
10640: LD_STRING Mark Kent
10642: ST_TO_ADDR
10643: GO 10760
10645: LD_INT 8
10647: DOUBLE
10648: EQUAL
10649: IFTRUE 10653
10651: GO 10664
10653: POP
// a = Patrick Bull ; 13 :
10654: LD_ADDR_VAR 0 4
10658: PUSH
10659: LD_STRING Patrick Bull
10661: ST_TO_ADDR
10662: GO 10760
10664: LD_INT 13
10666: DOUBLE
10667: EQUAL
10668: IFTRUE 10672
10670: GO 10683
10672: POP
// a = Muzhid Galabi ; 14 :
10673: LD_ADDR_VAR 0 4
10677: PUSH
10678: LD_STRING Muzhid Galabi
10680: ST_TO_ADDR
10681: GO 10760
10683: LD_INT 14
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10702
10691: POP
// a = Maxim Daigle ; 15 :
10692: LD_ADDR_VAR 0 4
10696: PUSH
10697: LD_STRING Maxim Daigle
10699: ST_TO_ADDR
10700: GO 10760
10702: LD_INT 15
10704: DOUBLE
10705: EQUAL
10706: IFTRUE 10710
10708: GO 10721
10710: POP
// a = Rick C. West ; 20 :
10711: LD_ADDR_VAR 0 4
10715: PUSH
10716: LD_STRING Rick C. West
10718: ST_TO_ADDR
10719: GO 10760
10721: LD_INT 20
10723: DOUBLE
10724: EQUAL
10725: IFTRUE 10729
10727: GO 10740
10729: POP
// a = Sinisa Mikhailovic ; 23 :
10730: LD_ADDR_VAR 0 4
10734: PUSH
10735: LD_STRING Sinisa Mikhailovic
10737: ST_TO_ADDR
10738: GO 10760
10740: LD_INT 23
10742: DOUBLE
10743: EQUAL
10744: IFTRUE 10748
10746: GO 10759
10748: POP
// a = Wayne Kettlewell ; end ; 2 :
10749: LD_ADDR_VAR 0 4
10753: PUSH
10754: LD_STRING Wayne Kettlewell
10756: ST_TO_ADDR
10757: GO 10760
10759: POP
10760: GO 10932
10762: LD_INT 2
10764: DOUBLE
10765: EQUAL
10766: IFTRUE 10770
10768: GO 10931
10770: POP
// case cislo of 2 :
10771: LD_VAR 0 2
10775: PUSH
10776: LD_INT 2
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 10795
10784: POP
// a = Danne Rydrgren ; 3 :
10785: LD_ADDR_VAR 0 4
10789: PUSH
10790: LD_STRING Danne Rydrgren
10792: ST_TO_ADDR
10793: GO 10929
10795: LD_INT 3
10797: DOUBLE
10798: EQUAL
10799: IFTRUE 10803
10801: GO 10814
10803: POP
// a = Alfred Van der Poel ; 4 :
10804: LD_ADDR_VAR 0 4
10808: PUSH
10809: LD_STRING Alfred Van der Poel
10811: ST_TO_ADDR
10812: GO 10929
10814: LD_INT 4
10816: DOUBLE
10817: EQUAL
10818: IFTRUE 10822
10820: GO 10833
10822: POP
// a = Muhammad Ali ; 5 :
10823: LD_ADDR_VAR 0 4
10827: PUSH
10828: LD_STRING Muhammad Ali
10830: ST_TO_ADDR
10831: GO 10929
10833: LD_INT 5
10835: DOUBLE
10836: EQUAL
10837: IFTRUE 10841
10839: GO 10852
10841: POP
// a = Elena Grubina ; 8 :
10842: LD_ADDR_VAR 0 4
10846: PUSH
10847: LD_STRING Elena Grubina
10849: ST_TO_ADDR
10850: GO 10929
10852: LD_INT 8
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 10871
10860: POP
// a = Oto Zimmerman ; 11 :
10861: LD_ADDR_VAR 0 4
10865: PUSH
10866: LD_STRING Oto Zimmerman
10868: ST_TO_ADDR
10869: GO 10929
10871: LD_INT 11
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10890
10879: POP
// a = Neil Hoss ; 14 :
10880: LD_ADDR_VAR 0 4
10884: PUSH
10885: LD_STRING Neil Hoss
10887: ST_TO_ADDR
10888: GO 10929
10890: LD_INT 14
10892: DOUBLE
10893: EQUAL
10894: IFTRUE 10898
10896: GO 10909
10898: POP
// a = Cardi Nowitzke ; 17 :
10899: LD_ADDR_VAR 0 4
10903: PUSH
10904: LD_STRING Cardi Nowitzke
10906: ST_TO_ADDR
10907: GO 10929
10909: LD_INT 17
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 10928
10917: POP
// a = Leonard Van Horn ; end ; end ;
10918: LD_ADDR_VAR 0 4
10922: PUSH
10923: LD_STRING Leonard Van Horn
10925: ST_TO_ADDR
10926: GO 10929
10928: POP
10929: GO 10932
10931: POP
// result = a ;
10932: LD_ADDR_VAR 0 3
10936: PUSH
10937: LD_VAR 0 4
10941: ST_TO_ADDR
// end ;
10942: LD_VAR 0 3
10946: RET
// export function choose_vojaky ; var pom , i ; var ovyb ; var poc ; begin
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
10952: PPUSH
10953: PPUSH
// SetClass ( JMM , class_soldier ) ;
10954: LD_EXP 31
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 336
// if Gary > 0 then
10966: LD_EXP 33
10970: PUSH
10971: LD_INT 0
10973: GREATER
10974: IFFALSE 10988
// SetClass ( Gary , class_soldier ) ;
10976: LD_EXP 33
10980: PPUSH
10981: LD_INT 1
10983: PPUSH
10984: CALL_OW 336
// if Lisa > 0 then
10988: LD_EXP 36
10992: PUSH
10993: LD_INT 0
10995: GREATER
10996: IFFALSE 11010
// SetClass ( Lisa , class_soldier ) ;
10998: LD_EXP 36
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 336
// if Yamoko > 0 then
11010: LD_EXP 38
11014: PUSH
11015: LD_INT 0
11017: GREATER
11018: IFFALSE 11032
// SetClass ( Yamoko , class_soldier ) ;
11020: LD_EXP 38
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 336
// if Frank > 0 then
11032: LD_EXP 35
11036: PUSH
11037: LD_INT 0
11039: GREATER
11040: IFFALSE 11054
// SetClass ( Frank , class_soldier ) ;
11042: LD_EXP 35
11046: PPUSH
11047: LD_INT 1
11049: PPUSH
11050: CALL_OW 336
// if Cornel > 0 then
11054: LD_EXP 37
11058: PUSH
11059: LD_INT 0
11061: GREATER
11062: IFFALSE 11076
// SetClass ( Cornel , class_soldier ) ;
11064: LD_EXP 37
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 336
// if Bobby > 0 then
11076: LD_EXP 34
11080: PUSH
11081: LD_INT 0
11083: GREATER
11084: IFFALSE 11098
// SetClass ( Bobby , class_soldier ) ;
11086: LD_EXP 34
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 336
// if Cyrus > 0 then
11098: LD_EXP 39
11102: PUSH
11103: LD_INT 0
11105: GREATER
11106: IFFALSE 11120
// SetClass ( Cyrus , class_soldier ) ;
11108: LD_EXP 39
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 336
// if Don > 0 then
11120: LD_EXP 40
11124: PUSH
11125: LD_INT 0
11127: GREATER
11128: IFFALSE 11142
// SetClass ( Don , class_engineer ) ;
11130: LD_EXP 40
11134: PPUSH
11135: LD_INT 2
11137: PPUSH
11138: CALL_OW 336
// if Brown > 0 then
11142: LD_EXP 41
11146: PUSH
11147: LD_INT 0
11149: GREATER
11150: IFFALSE 11164
// SetClass ( Brown , class_soldier ) ;
11152: LD_EXP 41
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 336
// ovyb = [ sel_not_changeable , sel_hired , sel_dont_change_class , JMM ] ;
11164: LD_ADDR_VAR 0 4
11168: PUSH
11169: LD_INT -4
11171: PUSH
11172: LD_INT -1
11174: PUSH
11175: LD_INT -6
11177: PUSH
11178: LD_EXP 31
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: ST_TO_ADDR
// ovyb = ovyb ^ [ sel_not_hired , Powell , sel_changeable , sel_change_class ] ;
11189: LD_ADDR_VAR 0 4
11193: PUSH
11194: LD_VAR 0 4
11198: PUSH
11199: LD_INT -2
11201: PUSH
11202: LD_EXP 32
11206: PUSH
11207: LD_INT -3
11209: PUSH
11210: LD_INT -5
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: ADD
11219: ST_TO_ADDR
// poc = 0 ;
11220: LD_ADDR_VAR 0 5
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// if Gary <> 0 and GARYL <> 7 then
11228: LD_EXP 33
11232: PUSH
11233: LD_INT 0
11235: NONEQUAL
11236: PUSH
11237: LD_EXP 18
11241: PUSH
11242: LD_INT 7
11244: NONEQUAL
11245: AND
11246: IFFALSE 11278
// begin ovyb = ovyb ^ Gary ;
11248: LD_ADDR_VAR 0 4
11252: PUSH
11253: LD_VAR 0 4
11257: PUSH
11258: LD_EXP 33
11262: ADD
11263: ST_TO_ADDR
// poc = poc + 1 ;
11264: LD_ADDR_VAR 0 5
11268: PUSH
11269: LD_VAR 0 5
11273: PUSH
11274: LD_INT 1
11276: PLUS
11277: ST_TO_ADDR
// end ; if Lisa <> 0 and LISAL <> 7 then
11278: LD_EXP 36
11282: PUSH
11283: LD_INT 0
11285: NONEQUAL
11286: PUSH
11287: LD_EXP 19
11291: PUSH
11292: LD_INT 7
11294: NONEQUAL
11295: AND
11296: IFFALSE 11328
// begin ovyb = ovyb ^ Lisa ;
11298: LD_ADDR_VAR 0 4
11302: PUSH
11303: LD_VAR 0 4
11307: PUSH
11308: LD_EXP 36
11312: ADD
11313: ST_TO_ADDR
// poc = poc + 1 ;
11314: LD_ADDR_VAR 0 5
11318: PUSH
11319: LD_VAR 0 5
11323: PUSH
11324: LD_INT 1
11326: PLUS
11327: ST_TO_ADDR
// end ; if Cornel <> 0 and CORNELL <> 7 then
11328: LD_EXP 37
11332: PUSH
11333: LD_INT 0
11335: NONEQUAL
11336: PUSH
11337: LD_EXP 22
11341: PUSH
11342: LD_INT 7
11344: NONEQUAL
11345: AND
11346: IFFALSE 11378
// begin ovyb = ovyb ^ Cornel ;
11348: LD_ADDR_VAR 0 4
11352: PUSH
11353: LD_VAR 0 4
11357: PUSH
11358: LD_EXP 37
11362: ADD
11363: ST_TO_ADDR
// poc = poc + 1 ;
11364: LD_ADDR_VAR 0 5
11368: PUSH
11369: LD_VAR 0 5
11373: PUSH
11374: LD_INT 1
11376: PLUS
11377: ST_TO_ADDR
// end ; if Frank <> 0 and FRANKL <> 7 then
11378: LD_EXP 35
11382: PUSH
11383: LD_INT 0
11385: NONEQUAL
11386: PUSH
11387: LD_EXP 21
11391: PUSH
11392: LD_INT 7
11394: NONEQUAL
11395: AND
11396: IFFALSE 11428
// begin ovyb = ovyb ^ Frank ;
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: LD_VAR 0 4
11407: PUSH
11408: LD_EXP 35
11412: ADD
11413: ST_TO_ADDR
// poc = poc + 1 ;
11414: LD_ADDR_VAR 0 5
11418: PUSH
11419: LD_VAR 0 5
11423: PUSH
11424: LD_INT 1
11426: PLUS
11427: ST_TO_ADDR
// end ; if Yamoko <> 0 and ( Frank = 0 or FRANKL = 7 ) then
11428: LD_EXP 38
11432: PUSH
11433: LD_INT 0
11435: NONEQUAL
11436: PUSH
11437: LD_EXP 35
11441: PUSH
11442: LD_INT 0
11444: EQUAL
11445: PUSH
11446: LD_EXP 21
11450: PUSH
11451: LD_INT 7
11453: EQUAL
11454: OR
11455: AND
11456: IFFALSE 11488
// begin ovyb = ovyb ^ Yamoko ;
11458: LD_ADDR_VAR 0 4
11462: PUSH
11463: LD_VAR 0 4
11467: PUSH
11468: LD_EXP 38
11472: ADD
11473: ST_TO_ADDR
// poc = poc + 1 ;
11474: LD_ADDR_VAR 0 5
11478: PUSH
11479: LD_VAR 0 5
11483: PUSH
11484: LD_INT 1
11486: PLUS
11487: ST_TO_ADDR
// end ; if Bobby <> 0 and BOBL <> 7 then
11488: LD_EXP 34
11492: PUSH
11493: LD_INT 0
11495: NONEQUAL
11496: PUSH
11497: LD_EXP 23
11501: PUSH
11502: LD_INT 7
11504: NONEQUAL
11505: AND
11506: IFFALSE 11538
// begin ovyb = ovyb ^ Bobby ;
11508: LD_ADDR_VAR 0 4
11512: PUSH
11513: LD_VAR 0 4
11517: PUSH
11518: LD_EXP 34
11522: ADD
11523: ST_TO_ADDR
// poc = poc + 1 ;
11524: LD_ADDR_VAR 0 5
11528: PUSH
11529: LD_VAR 0 5
11533: PUSH
11534: LD_INT 1
11536: PLUS
11537: ST_TO_ADDR
// end ; if Cyrus <> 0 and CYRL <> 7 then
11538: LD_EXP 39
11542: PUSH
11543: LD_INT 0
11545: NONEQUAL
11546: PUSH
11547: LD_EXP 24
11551: PUSH
11552: LD_INT 7
11554: NONEQUAL
11555: AND
11556: IFFALSE 11588
// begin ovyb = ovyb ^ Cyrus ;
11558: LD_ADDR_VAR 0 4
11562: PUSH
11563: LD_VAR 0 4
11567: PUSH
11568: LD_EXP 39
11572: ADD
11573: ST_TO_ADDR
// poc = poc + 1 ;
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: LD_VAR 0 5
11583: PUSH
11584: LD_INT 1
11586: PLUS
11587: ST_TO_ADDR
// end ; if Don <> 0 and DONL <> 7 then
11588: LD_EXP 40
11592: PUSH
11593: LD_INT 0
11595: NONEQUAL
11596: PUSH
11597: LD_EXP 25
11601: PUSH
11602: LD_INT 7
11604: NONEQUAL
11605: AND
11606: IFFALSE 11638
// begin ovyb = ovyb ^ Don ;
11608: LD_ADDR_VAR 0 4
11612: PUSH
11613: LD_VAR 0 4
11617: PUSH
11618: LD_EXP 40
11622: ADD
11623: ST_TO_ADDR
// poc = poc + 1 ;
11624: LD_ADDR_VAR 0 5
11628: PUSH
11629: LD_VAR 0 5
11633: PUSH
11634: LD_INT 1
11636: PLUS
11637: ST_TO_ADDR
// end ; if Brown <> 0 and BROWNL then
11638: LD_EXP 41
11642: PUSH
11643: LD_INT 0
11645: NONEQUAL
11646: PUSH
11647: LD_EXP 26
11651: AND
11652: IFFALSE 11684
// begin ovyb = ovyb ^ Brown ;
11654: LD_ADDR_VAR 0 4
11658: PUSH
11659: LD_VAR 0 4
11663: PUSH
11664: LD_EXP 41
11668: ADD
11669: ST_TO_ADDR
// poc = poc + 1 ;
11670: LD_ADDR_VAR 0 5
11674: PUSH
11675: LD_VAR 0 5
11679: PUSH
11680: LD_INT 1
11682: PLUS
11683: ST_TO_ADDR
// end ; pom = uprav_lidi ( lidi_other ) ;
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: LD_EXP 51
11693: PPUSH
11694: CALL 12051 0 1
11698: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11699: LD_ADDR_VAR 0 4
11703: PUSH
11704: LD_VAR 0 4
11708: PUSH
11709: LD_VAR 0 2
11713: ADD
11714: ST_TO_ADDR
// poc = poc + pom + 0 ;
11715: LD_ADDR_VAR 0 5
11719: PUSH
11720: LD_VAR 0 5
11724: PUSH
11725: LD_VAR 0 2
11729: PLUS
11730: PUSH
11731: LD_INT 0
11733: PLUS
11734: ST_TO_ADDR
// uc_side := You ;
11735: LD_ADDR_OWVAR 20
11739: PUSH
11740: LD_EXP 1
11744: ST_TO_ADDR
// uc_nation := nation_american ;
11745: LD_ADDR_OWVAR 21
11749: PUSH
11750: LD_INT 1
11752: ST_TO_ADDR
// uc_direction := 0 ;
11753: LD_ADDR_OWVAR 24
11757: PUSH
11758: LD_INT 0
11760: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , 6 ,  ) ;
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 2
11766: PPUSH
11767: LD_INT 6
11769: PPUSH
11770: LD_STRING 
11772: PPUSH
11773: CALL 7731 0 4
// pom = CreateHuman ;
11777: LD_ADDR_VAR 0 2
11781: PUSH
11782: CALL_OW 44
11786: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11787: LD_ADDR_VAR 0 4
11791: PUSH
11792: LD_VAR 0 4
11796: PUSH
11797: LD_VAR 0 2
11801: ADD
11802: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
11803: LD_INT 1
11805: PPUSH
11806: LD_INT 1
11808: PPUSH
11809: LD_INT 6
11811: PPUSH
11812: LD_STRING 
11814: PPUSH
11815: CALL 7731 0 4
// pom = CreateHuman ;
11819: LD_ADDR_VAR 0 2
11823: PUSH
11824: CALL_OW 44
11828: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11829: LD_ADDR_VAR 0 4
11833: PUSH
11834: LD_VAR 0 4
11838: PUSH
11839: LD_VAR 0 2
11843: ADD
11844: ST_TO_ADDR
// poc = poc + 2 ;
11845: LD_ADDR_VAR 0 5
11849: PUSH
11850: LD_VAR 0 5
11854: PUSH
11855: LD_INT 2
11857: PLUS
11858: ST_TO_ADDR
// if poc < 20 then
11859: LD_VAR 0 5
11863: PUSH
11864: LD_INT 20
11866: LESS
11867: IFFALSE 11971
// for i := 1 to 20 - poc do
11869: LD_ADDR_VAR 0 3
11873: PUSH
11874: DOUBLE
11875: LD_INT 1
11877: DEC
11878: ST_TO_ADDR
11879: LD_INT 20
11881: PUSH
11882: LD_VAR 0 5
11886: MINUS
11887: PUSH
11888: FOR_TO
11889: IFFALSE 11969
// begin if Rand ( 1 , 2 ) = 1 then
11891: LD_INT 1
11893: PPUSH
11894: LD_INT 2
11896: PPUSH
11897: CALL_OW 12
11901: PUSH
11902: LD_INT 1
11904: EQUAL
11905: IFFALSE 11925
// prepare_human ( sex_male , class_engineer , 6 ,  ) else
11907: LD_INT 1
11909: PPUSH
11910: LD_INT 2
11912: PPUSH
11913: LD_INT 6
11915: PPUSH
11916: LD_STRING 
11918: PPUSH
11919: CALL 7731 0 4
11923: GO 11941
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
11925: LD_INT 1
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: LD_INT 6
11933: PPUSH
11934: LD_STRING 
11936: PPUSH
11937: CALL 7731 0 4
// pom = CreateHuman ;
11941: LD_ADDR_VAR 0 2
11945: PUSH
11946: CALL_OW 44
11950: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11951: LD_ADDR_VAR 0 4
11955: PUSH
11956: LD_VAR 0 4
11960: PUSH
11961: LD_VAR 0 2
11965: ADD
11966: ST_TO_ADDR
// end ;
11967: GO 11888
11969: POP
11970: POP
// Amici_enter = CharacterSelection ( Choose 11 people , 11 , 11 , ovyb , [ [ class_engineer , 1 ] , [ class_soldier , 4 ] , [ class_mechanic , 0 ] ] ) ;
11971: LD_ADDR_EXP 42
11975: PUSH
11976: LD_STRING Choose 11 people
11978: PPUSH
11979: LD_INT 11
11981: PPUSH
11982: LD_INT 11
11984: PPUSH
11985: LD_VAR 0 4
11989: PPUSH
11990: LD_INT 2
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: LD_INT 0
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 42
12029: ST_TO_ADDR
// Amici_enter = Amici_enter ^ JMM ;
12030: LD_ADDR_EXP 42
12034: PUSH
12035: LD_EXP 42
12039: PUSH
12040: LD_EXP 31
12044: ADD
12045: ST_TO_ADDR
// end ;
12046: LD_VAR 0 1
12050: RET
// function uprav_lidi ( lidi ) ; var pom , i ; var sk ; begin
12051: LD_INT 0
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
// pom = [ ] ;
12057: LD_ADDR_VAR 0 3
12061: PUSH
12062: EMPTY
12063: ST_TO_ADDR
// for i in lidi do
12064: LD_ADDR_VAR 0 4
12068: PUSH
12069: LD_VAR 0 1
12073: PUSH
12074: FOR_IN
12075: IFFALSE 12218
// begin sk = get_skills ( i ) ;
12077: LD_ADDR_VAR 0 5
12081: PUSH
12082: LD_VAR 0 4
12086: PPUSH
12087: CALL 12235 0 1
12091: ST_TO_ADDR
// if sk [ 4 ] > sk [ 1 ] and sk [ 4 ] > sk [ 2 ] and sk [ 4 ] > sk [ 3 ] then
12092: LD_VAR 0 5
12096: PUSH
12097: LD_INT 4
12099: ARRAY
12100: PUSH
12101: LD_VAR 0 5
12105: PUSH
12106: LD_INT 1
12108: ARRAY
12109: GREATER
12110: PUSH
12111: LD_VAR 0 5
12115: PUSH
12116: LD_INT 4
12118: ARRAY
12119: PUSH
12120: LD_VAR 0 5
12124: PUSH
12125: LD_INT 2
12127: ARRAY
12128: GREATER
12129: AND
12130: PUSH
12131: LD_VAR 0 5
12135: PUSH
12136: LD_INT 4
12138: ARRAY
12139: PUSH
12140: LD_VAR 0 5
12144: PUSH
12145: LD_INT 3
12147: ARRAY
12148: GREATER
12149: AND
12150: IFFALSE 12154
// continue ;
12152: GO 12074
// if sk [ 1 ] > sk [ 2 ] then
12154: LD_VAR 0 5
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: PUSH
12163: LD_VAR 0 5
12167: PUSH
12168: LD_INT 2
12170: ARRAY
12171: GREATER
12172: IFFALSE 12188
// SetClass ( i , class_soldier ) else
12174: LD_VAR 0 4
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 336
12186: GO 12200
// SetClass ( i , class_engineer ) ;
12188: LD_VAR 0 4
12192: PPUSH
12193: LD_INT 2
12195: PPUSH
12196: CALL_OW 336
// pom = pom ^ i ;
12200: LD_ADDR_VAR 0 3
12204: PUSH
12205: LD_VAR 0 3
12209: PUSH
12210: LD_VAR 0 4
12214: ADD
12215: ST_TO_ADDR
// end ;
12216: GO 12074
12218: POP
12219: POP
// result := pom ;
12220: LD_ADDR_VAR 0 2
12224: PUSH
12225: LD_VAR 0 3
12229: ST_TO_ADDR
// end ;
12230: LD_VAR 0 2
12234: RET
// function get_skills ( un ) ; var pom1 , pom2 , pom3 , pom4 ; begin
12235: LD_INT 0
12237: PPUSH
12238: PPUSH
12239: PPUSH
12240: PPUSH
12241: PPUSH
// pom1 := GetSkill ( un , skill_combat ) ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_VAR 0 1
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: CALL_OW 259
12259: ST_TO_ADDR
// pom2 := GetSkill ( un , skill_engineering ) ;
12260: LD_ADDR_VAR 0 4
12264: PUSH
12265: LD_VAR 0 1
12269: PPUSH
12270: LD_INT 2
12272: PPUSH
12273: CALL_OW 259
12277: ST_TO_ADDR
// pom3 := GetSkill ( un , skill_mechanical ) ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: LD_INT 3
12290: PPUSH
12291: CALL_OW 259
12295: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_scientistic ) ;
12296: LD_ADDR_VAR 0 6
12300: PUSH
12301: LD_VAR 0 1
12305: PPUSH
12306: LD_INT 4
12308: PPUSH
12309: CALL_OW 259
12313: ST_TO_ADDR
// result := [ pom1 , pom2 , pom3 , pom4 ] end ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_VAR 0 3
12323: PUSH
12324: LD_VAR 0 4
12328: PUSH
12329: LD_VAR 0 5
12333: PUSH
12334: LD_VAR 0 6
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: ST_TO_ADDR
12345: LD_VAR 0 2
12349: RET
// export function create_arabske_utoky_behem_mise ; var pom ; begin
12350: LD_INT 0
12352: PPUSH
12353: PPUSH
// uc_side = Arabi ;
12354: LD_ADDR_OWVAR 20
12358: PUSH
12359: LD_EXP 3
12363: ST_TO_ADDR
// uc_nation = nation_arabian ;
12364: LD_ADDR_OWVAR 21
12368: PUSH
12369: LD_INT 2
12371: ST_TO_ADDR
// pom = [ ] ;
12372: LD_ADDR_VAR 0 2
12376: PUSH
12377: EMPTY
12378: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: CALL 10268 0 0
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: LD_INT 4
12394: PPUSH
12395: LD_STRING 
12397: PPUSH
12398: CALL 13832 0 4
12402: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12403: LD_ADDR_VAR 0 2
12407: PUSH
12408: LD_VAR 0 2
12412: PUSH
12413: CALL 10268 0 0
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: LD_INT 4
12423: PPUSH
12424: LD_STRING 
12426: PPUSH
12427: CALL 13832 0 4
12431: ADD
12432: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12433: LD_ADDR_VAR 0 2
12437: PUSH
12438: LD_VAR 0 2
12442: PUSH
12443: CALL 10268 0 0
12447: PPUSH
12448: LD_INT 8
12450: PPUSH
12451: LD_INT 5
12453: PPUSH
12454: LD_STRING 
12456: PPUSH
12457: CALL 13832 0 4
12461: ADD
12462: ST_TO_ADDR
// if difficulty > 1 then
12463: LD_OWVAR 67
12467: PUSH
12468: LD_INT 1
12470: GREATER
12471: IFFALSE 12503
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12473: LD_ADDR_VAR 0 2
12477: PUSH
12478: LD_VAR 0 2
12482: PUSH
12483: CALL 10268 0 0
12487: PPUSH
12488: LD_INT 8
12490: PPUSH
12491: LD_INT 5
12493: PPUSH
12494: LD_STRING 
12496: PPUSH
12497: CALL 13832 0 4
12501: ADD
12502: ST_TO_ADDR
// if difficulty > 2 then
12503: LD_OWVAR 67
12507: PUSH
12508: LD_INT 2
12510: GREATER
12511: IFFALSE 12543
// pom = pom ^ get_human ( get_sex , class_soldier , 5 ,  ) ;
12513: LD_ADDR_VAR 0 2
12517: PUSH
12518: LD_VAR 0 2
12522: PUSH
12523: CALL 10268 0 0
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: LD_INT 5
12533: PPUSH
12534: LD_STRING 
12536: PPUSH
12537: CALL 13832 0 4
12541: ADD
12542: ST_TO_ADDR
// Ar_utok1_LIST = pom ;
12543: LD_ADDR_EXP 12
12547: PUSH
12548: LD_VAR 0 2
12552: ST_TO_ADDR
// pom = [ ] ;
12553: LD_ADDR_VAR 0 2
12557: PUSH
12558: EMPTY
12559: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
12560: LD_ADDR_OWVAR 37
12564: PUSH
12565: LD_INT 14
12567: ST_TO_ADDR
// vc_weapon = ar_gun ;
12568: LD_ADDR_OWVAR 40
12572: PUSH
12573: LD_INT 27
12575: ST_TO_ADDR
// vc_control = control_apeman ;
12576: LD_ADDR_OWVAR 38
12580: PUSH
12581: LD_INT 5
12583: ST_TO_ADDR
// vc_engine = engine_siberite ;
12584: LD_ADDR_OWVAR 39
12588: PUSH
12589: LD_INT 3
12591: ST_TO_ADDR
// av = CreateVehicle ;
12592: LD_ADDR_LOC 11
12596: PUSH
12597: CALL_OW 45
12601: ST_TO_ADDR
// pom = av ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_LOC 11
12611: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 4 ,  ) ;
12612: LD_ADDR_LOC 10
12616: PUSH
12617: CALL 10268 0 0
12621: PPUSH
12622: LD_INT 3
12624: PPUSH
12625: LD_INT 4
12627: PPUSH
12628: LD_STRING 
12630: PPUSH
12631: CALL 13832 0 4
12635: ST_TO_ADDR
// vc_control = control_manual ;
12636: LD_ADDR_OWVAR 38
12640: PUSH
12641: LD_INT 1
12643: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
12644: LD_ADDR_OWVAR 40
12648: PUSH
12649: LD_INT 25
12651: ST_TO_ADDR
// av = CreateVehicle ;
12652: LD_ADDR_LOC 11
12656: PUSH
12657: CALL_OW 45
12661: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
12662: LD_LOC 10
12666: PPUSH
12667: LD_LOC 11
12671: PPUSH
12672: CALL_OW 52
// pom = pom ^ av ;
12676: LD_ADDR_VAR 0 2
12680: PUSH
12681: LD_VAR 0 2
12685: PUSH
12686: LD_LOC 11
12690: ADD
12691: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12692: LD_ADDR_VAR 0 2
12696: PUSH
12697: LD_VAR 0 2
12701: PUSH
12702: CALL 10268 0 0
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: LD_INT 4
12712: PPUSH
12713: LD_STRING 
12715: PPUSH
12716: CALL 13832 0 4
12720: ADD
12721: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12722: LD_ADDR_VAR 0 2
12726: PUSH
12727: LD_VAR 0 2
12731: PUSH
12732: CALL 10268 0 0
12736: PPUSH
12737: LD_INT 2
12739: PPUSH
12740: LD_EXP 48
12744: PUSH
12745: LD_OWVAR 67
12749: ARRAY
12750: PPUSH
12751: LD_STRING 
12753: PPUSH
12754: CALL 13832 0 4
12758: ADD
12759: ST_TO_ADDR
// if difficulty > 1 then
12760: LD_OWVAR 67
12764: PUSH
12765: LD_INT 1
12767: GREATER
12768: IFFALSE 12846
// begin pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12770: LD_ADDR_VAR 0 2
12774: PUSH
12775: LD_VAR 0 2
12779: PUSH
12780: CALL 10268 0 0
12784: PPUSH
12785: LD_INT 2
12787: PPUSH
12788: LD_EXP 48
12792: PUSH
12793: LD_OWVAR 67
12797: ARRAY
12798: PPUSH
12799: LD_STRING 
12801: PPUSH
12802: CALL 13832 0 4
12806: ADD
12807: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
12808: LD_ADDR_VAR 0 2
12812: PUSH
12813: LD_VAR 0 2
12817: PUSH
12818: CALL 10268 0 0
12822: PPUSH
12823: LD_INT 1
12825: PPUSH
12826: LD_EXP 48
12830: PUSH
12831: LD_OWVAR 67
12835: ARRAY
12836: PPUSH
12837: LD_STRING 
12839: PPUSH
12840: CALL 13832 0 4
12844: ADD
12845: ST_TO_ADDR
// end ; Ar_utok2_LIST = pom ;
12846: LD_ADDR_EXP 13
12850: PUSH
12851: LD_VAR 0 2
12855: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12856: LD_ADDR_VAR 0 2
12860: PUSH
12861: CALL 10268 0 0
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: LD_INT 4
12871: PPUSH
12872: LD_STRING 
12874: PPUSH
12875: CALL 13832 0 4
12879: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12880: LD_ADDR_VAR 0 2
12884: PUSH
12885: LD_VAR 0 2
12889: PUSH
12890: CALL 10268 0 0
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_INT 4
12900: PPUSH
12901: LD_STRING 
12903: PPUSH
12904: CALL 13832 0 4
12908: ADD
12909: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
12910: LD_ADDR_VAR 0 2
12914: PUSH
12915: LD_VAR 0 2
12919: PUSH
12920: CALL 10268 0 0
12924: PPUSH
12925: LD_INT 8
12927: PPUSH
12928: LD_EXP 48
12932: PUSH
12933: LD_OWVAR 67
12937: ARRAY
12938: PPUSH
12939: LD_STRING 
12941: PPUSH
12942: CALL 13832 0 4
12946: ADD
12947: ST_TO_ADDR
// if difficulty > 1 then
12948: LD_OWVAR 67
12952: PUSH
12953: LD_INT 1
12955: GREATER
12956: IFFALSE 13084
// begin pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: LD_VAR 0 2
12967: PUSH
12968: CALL 10268 0 0
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: LD_INT 4
12978: PPUSH
12979: LD_STRING 
12981: PPUSH
12982: CALL 13832 0 4
12986: ADD
12987: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: LD_VAR 0 2
12997: PUSH
12998: CALL 10268 0 0
13002: PPUSH
13003: LD_INT 2
13005: PPUSH
13006: LD_EXP 48
13010: PUSH
13011: LD_OWVAR 67
13015: ARRAY
13016: PPUSH
13017: LD_STRING 
13019: PPUSH
13020: CALL 13832 0 4
13024: ADD
13025: ST_TO_ADDR
// vc_control = control_apeman ;
13026: LD_ADDR_OWVAR 38
13030: PUSH
13031: LD_INT 5
13033: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
13034: LD_ADDR_OWVAR 37
13038: PUSH
13039: LD_INT 11
13041: ST_TO_ADDR
// vc_engine = engine_combustion ;
13042: LD_ADDR_OWVAR 39
13046: PUSH
13047: LD_INT 1
13049: ST_TO_ADDR
// vc_weapon = ar_light_gun ;
13050: LD_ADDR_OWVAR 40
13054: PUSH
13055: LD_INT 23
13057: ST_TO_ADDR
// av = CreateVehicle ;
13058: LD_ADDR_LOC 11
13062: PUSH
13063: CALL_OW 45
13067: ST_TO_ADDR
// pom = pom ^ av ;
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_VAR 0 2
13077: PUSH
13078: LD_LOC 11
13082: ADD
13083: ST_TO_ADDR
// end ; Ar_utok3_LIST = pom ;
13084: LD_ADDR_EXP 14
13088: PUSH
13089: LD_VAR 0 2
13093: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 6 ,  ) ;
13094: LD_ADDR_VAR 0 2
13098: PUSH
13099: CALL 10268 0 0
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: LD_INT 6
13109: PPUSH
13110: LD_STRING 
13112: PPUSH
13113: CALL 13832 0 4
13117: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
13118: LD_ADDR_OWVAR 37
13122: PUSH
13123: LD_INT 14
13125: ST_TO_ADDR
// vc_weapon = ar_gun ;
13126: LD_ADDR_OWVAR 40
13130: PUSH
13131: LD_INT 27
13133: ST_TO_ADDR
// vc_control = control_apeman ;
13134: LD_ADDR_OWVAR 38
13138: PUSH
13139: LD_INT 5
13141: ST_TO_ADDR
// vc_engine = engine_siberite ;
13142: LD_ADDR_OWVAR 39
13146: PUSH
13147: LD_INT 3
13149: ST_TO_ADDR
// av = CreateVehicle ;
13150: LD_ADDR_LOC 11
13154: PUSH
13155: CALL_OW 45
13159: ST_TO_ADDR
// pom = pom ^ av ;
13160: LD_ADDR_VAR 0 2
13164: PUSH
13165: LD_VAR 0 2
13169: PUSH
13170: LD_LOC 11
13174: ADD
13175: ST_TO_ADDR
// av = CreateVehicle ;
13176: LD_ADDR_LOC 11
13180: PUSH
13181: CALL_OW 45
13185: ST_TO_ADDR
// pom = pom ^ av ;
13186: LD_ADDR_VAR 0 2
13190: PUSH
13191: LD_VAR 0 2
13195: PUSH
13196: LD_LOC 11
13200: ADD
13201: ST_TO_ADDR
// av = CreateVehicle ;
13202: LD_ADDR_LOC 11
13206: PUSH
13207: CALL_OW 45
13211: ST_TO_ADDR
// pom = pom ^ av ;
13212: LD_ADDR_VAR 0 2
13216: PUSH
13217: LD_VAR 0 2
13221: PUSH
13222: LD_LOC 11
13226: ADD
13227: ST_TO_ADDR
// Ar_utok4_LIST = pom ;
13228: LD_ADDR_EXP 15
13232: PUSH
13233: LD_VAR 0 2
13237: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: CALL 10268 0 0
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: LD_EXP 48
13255: PUSH
13256: LD_OWVAR 67
13260: ARRAY
13261: PPUSH
13262: LD_STRING 
13264: PPUSH
13265: CALL 13832 0 4
13269: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13270: LD_ADDR_LOC 10
13274: PUSH
13275: CALL 10268 0 0
13279: PPUSH
13280: LD_INT 3
13282: PPUSH
13283: LD_EXP 48
13287: PUSH
13288: LD_OWVAR 67
13292: ARRAY
13293: PPUSH
13294: LD_STRING 
13296: PPUSH
13297: CALL 13832 0 4
13301: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13302: LD_ADDR_OWVAR 40
13306: PUSH
13307: LD_INT 28
13309: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13310: LD_ADDR_OWVAR 37
13314: PUSH
13315: LD_INT 13
13317: ST_TO_ADDR
// vc_control = control_manual ;
13318: LD_ADDR_OWVAR 38
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// vc_engine = engine_siberite ;
13326: LD_ADDR_OWVAR 39
13330: PUSH
13331: LD_INT 3
13333: ST_TO_ADDR
// av = CreateVehicle ;
13334: LD_ADDR_LOC 11
13338: PUSH
13339: CALL_OW 45
13343: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13344: LD_LOC 10
13348: PPUSH
13349: LD_LOC 11
13353: PPUSH
13354: CALL_OW 52
// pom = pom ^ av ;
13358: LD_ADDR_VAR 0 2
13362: PUSH
13363: LD_VAR 0 2
13367: PUSH
13368: LD_LOC 11
13372: ADD
13373: ST_TO_ADDR
// if difficulty > 1 then
13374: LD_OWVAR 67
13378: PUSH
13379: LD_INT 1
13381: GREATER
13382: IFFALSE 13419
// begin vc_weapon = ar_selfpropelled_bomb ;
13384: LD_ADDR_OWVAR 40
13388: PUSH
13389: LD_INT 29
13391: ST_TO_ADDR
// av = CreateVehicle ;
13392: LD_ADDR_LOC 11
13396: PUSH
13397: CALL_OW 45
13401: ST_TO_ADDR
// pom = - pom ^ av ;
13402: LD_ADDR_VAR 0 2
13406: PUSH
13407: LD_VAR 0 2
13411: NEG
13412: PUSH
13413: LD_LOC 11
13417: ADD
13418: ST_TO_ADDR
// end ; pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13419: LD_ADDR_VAR 0 2
13423: PUSH
13424: LD_VAR 0 2
13428: PUSH
13429: CALL 10268 0 0
13433: PPUSH
13434: LD_INT 1
13436: PPUSH
13437: LD_EXP 48
13441: PUSH
13442: LD_OWVAR 67
13446: ARRAY
13447: PPUSH
13448: LD_STRING 
13450: PPUSH
13451: CALL 13832 0 4
13455: ADD
13456: ST_TO_ADDR
// if difficulty > 2 then
13457: LD_OWVAR 67
13461: PUSH
13462: LD_INT 2
13464: GREATER
13465: IFFALSE 13581
// begin pom = pom ^ get_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
13467: LD_ADDR_VAR 0 2
13471: PUSH
13472: LD_VAR 0 2
13476: PUSH
13477: CALL 10268 0 0
13481: PPUSH
13482: LD_INT 4
13484: PPUSH
13485: LD_EXP 48
13489: PUSH
13490: LD_OWVAR 67
13494: ARRAY
13495: PPUSH
13496: LD_STRING 
13498: PPUSH
13499: CALL 13832 0 4
13503: ADD
13504: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13505: LD_ADDR_VAR 0 2
13509: PUSH
13510: LD_VAR 0 2
13514: PUSH
13515: CALL 10268 0 0
13519: PPUSH
13520: LD_INT 8
13522: PPUSH
13523: LD_EXP 48
13527: PUSH
13528: LD_OWVAR 67
13532: ARRAY
13533: PPUSH
13534: LD_STRING 
13536: PPUSH
13537: CALL 13832 0 4
13541: ADD
13542: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13543: LD_ADDR_VAR 0 2
13547: PUSH
13548: LD_VAR 0 2
13552: PUSH
13553: CALL 10268 0 0
13557: PPUSH
13558: LD_INT 8
13560: PPUSH
13561: LD_EXP 48
13565: PUSH
13566: LD_OWVAR 67
13570: ARRAY
13571: PPUSH
13572: LD_STRING 
13574: PPUSH
13575: CALL 13832 0 4
13579: ADD
13580: ST_TO_ADDR
// end ; Ar_utoklast_LIST = pom ;
13581: LD_ADDR_EXP 16
13585: PUSH
13586: LD_VAR 0 2
13590: ST_TO_ADDR
// pom = get_human ( get_sex , class_mortar , 4 ,  ) ;
13591: LD_ADDR_VAR 0 2
13595: PUSH
13596: CALL 10268 0 0
13600: PPUSH
13601: LD_INT 8
13603: PPUSH
13604: LD_INT 4
13606: PPUSH
13607: LD_STRING 
13609: PPUSH
13610: CALL 13832 0 4
13614: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13615: LD_ADDR_OWVAR 40
13619: PUSH
13620: LD_INT 28
13622: ST_TO_ADDR
// vc_engine = engine_combustion ;
13623: LD_ADDR_OWVAR 39
13627: PUSH
13628: LD_INT 1
13630: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13631: LD_ADDR_OWVAR 37
13635: PUSH
13636: LD_INT 13
13638: ST_TO_ADDR
// if difficulty = 1 then
13639: LD_OWVAR 67
13643: PUSH
13644: LD_INT 1
13646: EQUAL
13647: IFFALSE 13669
// begin vc_control = control_apeman ;
13649: LD_ADDR_OWVAR 38
13653: PUSH
13654: LD_INT 5
13656: ST_TO_ADDR
// av = CreateVehicle ;
13657: LD_ADDR_LOC 11
13661: PUSH
13662: CALL_OW 45
13666: ST_TO_ADDR
// end else
13667: GO 13733
// begin vc_control = control_manual ;
13669: LD_ADDR_OWVAR 38
13673: PUSH
13674: LD_INT 1
13676: ST_TO_ADDR
// av = CreateVehicle ;
13677: LD_ADDR_LOC 11
13681: PUSH
13682: CALL_OW 45
13686: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13687: LD_ADDR_LOC 10
13691: PUSH
13692: CALL 10268 0 0
13696: PPUSH
13697: LD_INT 3
13699: PPUSH
13700: LD_EXP 48
13704: PUSH
13705: LD_OWVAR 67
13709: ARRAY
13710: PPUSH
13711: LD_STRING 
13713: PPUSH
13714: CALL 13832 0 4
13718: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13719: LD_LOC 10
13723: PPUSH
13724: LD_LOC 11
13728: PPUSH
13729: CALL_OW 52
// end ; pom = pom ^ av ;
13733: LD_ADDR_VAR 0 2
13737: PUSH
13738: LD_VAR 0 2
13742: PUSH
13743: LD_LOC 11
13747: ADD
13748: ST_TO_ADDR
// vc_control = control_apeman ;
13749: LD_ADDR_OWVAR 38
13753: PUSH
13754: LD_INT 5
13756: ST_TO_ADDR
// av = CreateVehicle ;
13757: LD_ADDR_LOC 11
13761: PUSH
13762: CALL_OW 45
13766: ST_TO_ADDR
// pom = pom ^ av ;
13767: LD_ADDR_VAR 0 2
13771: PUSH
13772: LD_VAR 0 2
13776: PUSH
13777: LD_LOC 11
13781: ADD
13782: ST_TO_ADDR
// vc_weapon = ar_radar ;
13783: LD_ADDR_OWVAR 40
13787: PUSH
13788: LD_INT 30
13790: ST_TO_ADDR
// av = CreateVehicle ;
13791: LD_ADDR_LOC 11
13795: PUSH
13796: CALL_OW 45
13800: ST_TO_ADDR
// pom = pom ^ av ;
13801: LD_ADDR_VAR 0 2
13805: PUSH
13806: LD_VAR 0 2
13810: PUSH
13811: LD_LOC 11
13815: ADD
13816: ST_TO_ADDR
// Ar_backa_LIST = pom ;
13817: LD_ADDR_EXP 17
13821: PUSH
13822: LD_VAR 0 2
13826: ST_TO_ADDR
// end ;
13827: LD_VAR 0 1
13831: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
13832: LD_INT 0
13834: PPUSH
13835: PPUSH
// PrepareHuman ( sex , clas , level ) ;
13836: LD_VAR 0 1
13840: PPUSH
13841: LD_VAR 0 2
13845: PPUSH
13846: LD_VAR 0 3
13850: PPUSH
13851: CALL_OW 380
// hc_name := name ;
13855: LD_ADDR_OWVAR 26
13859: PUSH
13860: LD_VAR 0 4
13864: ST_TO_ADDR
// pom = CreateHuman ;
13865: LD_ADDR_VAR 0 6
13869: PUSH
13870: CALL_OW 44
13874: ST_TO_ADDR
// result := pom ;
13875: LD_ADDR_VAR 0 5
13879: PUSH
13880: LD_VAR 0 6
13884: ST_TO_ADDR
// end ; end_of_file
13885: LD_VAR 0 5
13889: RET
// var plazici ; var navrat ; var zradci ; var pom , i ; var pocet_spadlych_beden ; every 0 0$0.1 do
13890: GO 13892
13892: DISABLE
// begin pocet_spadlych_beden = 0 ;
13893: LD_ADDR_LOC 22
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// end ;
13901: END
// every 0 0$0.1 do var sold ;
13902: GO 13904
13904: DISABLE
13905: LD_INT 0
13907: PPUSH
// begin navrat := false ;
13908: LD_ADDR_LOC 18
13912: PUSH
13913: LD_INT 0
13915: ST_TO_ADDR
// sold = UnitFilter ( Amici_enter , [ [ f_class , class_soldier ] ] ) ;
13916: LD_ADDR_VAR 0 1
13920: PUSH
13921: LD_EXP 42
13925: PPUSH
13926: LD_INT 25
13928: PUSH
13929: LD_INT 1
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: PPUSH
13939: CALL_OW 72
13943: ST_TO_ADDR
// if sold < 4 then
13944: LD_VAR 0 1
13948: PUSH
13949: LD_INT 4
13951: LESS
13952: IFFALSE 13963
// msg ( ERROR: malo vojaku . je to v prdeli ) else
13954: LD_STRING ERROR: malo vojaku . je to v prdeli
13956: PPUSH
13957: CALL_OW 100
13961: GO 14010
// plazici := [ sold [ 1 ] , sold [ 2 ] , sold [ 3 ] , sold [ 4 ] ] ;
13963: LD_ADDR_LOC 17
13967: PUSH
13968: LD_VAR 0 1
13972: PUSH
13973: LD_INT 1
13975: ARRAY
13976: PUSH
13977: LD_VAR 0 1
13981: PUSH
13982: LD_INT 2
13984: ARRAY
13985: PUSH
13986: LD_VAR 0 1
13990: PUSH
13991: LD_INT 3
13993: ARRAY
13994: PUSH
13995: LD_VAR 0 1
13999: PUSH
14000: LD_INT 4
14002: ARRAY
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: ST_TO_ADDR
// ComMoveXY ( Radar_enter , 87 , 137 ) ;
14010: LD_EXP 43
14014: PPUSH
14015: LD_INT 87
14017: PPUSH
14018: LD_INT 137
14020: PPUSH
14021: CALL_OW 111
// AddComMoveXY ( Radar_enter , 89 , 134 ) ;
14025: LD_EXP 43
14029: PPUSH
14030: LD_INT 89
14032: PPUSH
14033: LD_INT 134
14035: PPUSH
14036: CALL_OW 171
// AddComMoveXY ( Radar_enter , 91 , 131 ) ;
14040: LD_EXP 43
14044: PPUSH
14045: LD_INT 91
14047: PPUSH
14048: LD_INT 131
14050: PPUSH
14051: CALL_OW 171
// AddComHold ( Radar_enter ) ;
14055: LD_EXP 43
14059: PPUSH
14060: CALL_OW 200
// AddComMoveXY ( plazici [ 1 ] , 84 , 127 ) ;
14064: LD_LOC 17
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: LD_INT 84
14075: PPUSH
14076: LD_INT 127
14078: PPUSH
14079: CALL_OW 171
// AddComCrawl ( plazici [ 1 ] ) ;
14083: LD_LOC 17
14087: PUSH
14088: LD_INT 1
14090: ARRAY
14091: PPUSH
14092: CALL_OW 197
// AddComMoveXY ( plazici [ 1 ] , 91 , 126 ) ;
14096: LD_LOC 17
14100: PUSH
14101: LD_INT 1
14103: ARRAY
14104: PPUSH
14105: LD_INT 91
14107: PPUSH
14108: LD_INT 126
14110: PPUSH
14111: CALL_OW 171
// AddComMoveXY ( plazici [ 2 ] , 85 , 127 ) ;
14115: LD_LOC 17
14119: PUSH
14120: LD_INT 2
14122: ARRAY
14123: PPUSH
14124: LD_INT 85
14126: PPUSH
14127: LD_INT 127
14129: PPUSH
14130: CALL_OW 171
// AddComCrawl ( plazici [ 2 ] ) ;
14134: LD_LOC 17
14138: PUSH
14139: LD_INT 2
14141: ARRAY
14142: PPUSH
14143: CALL_OW 197
// AddComMoveXY ( plazici [ 2 ] , 93 , 128 ) ;
14147: LD_LOC 17
14151: PUSH
14152: LD_INT 2
14154: ARRAY
14155: PPUSH
14156: LD_INT 93
14158: PPUSH
14159: LD_INT 128
14161: PPUSH
14162: CALL_OW 171
// AddComMoveXY ( plazici [ 3 ] , 83 , 126 ) ;
14166: LD_LOC 17
14170: PUSH
14171: LD_INT 3
14173: ARRAY
14174: PPUSH
14175: LD_INT 83
14177: PPUSH
14178: LD_INT 126
14180: PPUSH
14181: CALL_OW 171
// AddComCrawl ( plazici [ 3 ] ) ;
14185: LD_LOC 17
14189: PUSH
14190: LD_INT 3
14192: ARRAY
14193: PPUSH
14194: CALL_OW 197
// AddComMoveXY ( plazici [ 3 ] , 92 , 128 ) ;
14198: LD_LOC 17
14202: PUSH
14203: LD_INT 3
14205: ARRAY
14206: PPUSH
14207: LD_INT 92
14209: PPUSH
14210: LD_INT 128
14212: PPUSH
14213: CALL_OW 171
// AddComMoveXY ( plazici [ 4 ] , 82 , 125 ) ;
14217: LD_LOC 17
14221: PUSH
14222: LD_INT 4
14224: ARRAY
14225: PPUSH
14226: LD_INT 82
14228: PPUSH
14229: LD_INT 125
14231: PPUSH
14232: CALL_OW 171
// AddComCrawl ( plazici [ 4 ] ) ;
14236: LD_LOC 17
14240: PUSH
14241: LD_INT 4
14243: ARRAY
14244: PPUSH
14245: CALL_OW 197
// AddComMoveXY ( plazici [ 4 ] , 90 , 127 ) ;
14249: LD_LOC 17
14253: PUSH
14254: LD_INT 4
14256: ARRAY
14257: PPUSH
14258: LD_INT 90
14260: PPUSH
14261: LD_INT 127
14263: PPUSH
14264: CALL_OW 171
// AddComHold ( plazici ) ;
14268: LD_LOC 17
14272: PPUSH
14273: CALL_OW 200
// CenterNowOnXY ( 92 , 135 ) ;
14277: LD_INT 92
14279: PPUSH
14280: LD_INT 135
14282: PPUSH
14283: CALL_OW 86
// end ;
14287: PPOPN 1
14289: END
// every 0 0$0.5 trigger IsAt ( Radar_enter , 91 , 131 ) do
14290: LD_EXP 43
14294: PPUSH
14295: LD_INT 91
14297: PPUSH
14298: LD_INT 131
14300: PPUSH
14301: CALL_OW 307
14305: IFFALSE 14346
14307: GO 14309
14309: DISABLE
// begin ComMoveXY ( mrtvola , 105 , 139 ) ;
14310: LD_INT 64
14312: PPUSH
14313: LD_INT 105
14315: PPUSH
14316: LD_INT 139
14318: PPUSH
14319: CALL_OW 111
// AddComTurnXY ( mrtvola , 103 , 137 ) ;
14323: LD_INT 64
14325: PPUSH
14326: LD_INT 103
14328: PPUSH
14329: LD_INT 137
14331: PPUSH
14332: CALL_OW 178
// CenterOnXY ( 97 , 132 ) ;
14336: LD_INT 97
14338: PPUSH
14339: LD_INT 132
14341: PPUSH
14342: CALL_OW 84
// end ;
14346: END
// every 0 0$1 trigger IsAt ( mrtvola , 105 , 139 ) do
14347: LD_INT 64
14349: PPUSH
14350: LD_INT 105
14352: PPUSH
14353: LD_INT 139
14355: PPUSH
14356: CALL_OW 307
14360: IFFALSE 14385
14362: GO 14364
14364: DISABLE
// begin ComExitBuilding ( zradce1 ) ;
14365: LD_INT 65
14367: PPUSH
14368: CALL_OW 122
// ComMoveXY ( zradce1 , 107 , 138 ) ;
14372: LD_INT 65
14374: PPUSH
14375: LD_INT 107
14377: PPUSH
14378: LD_INT 138
14380: PPUSH
14381: CALL_OW 111
// end ;
14385: END
// every 0 0$1 trigger IsAt ( zradce1 , 107 , 138 ) do
14386: LD_INT 65
14388: PPUSH
14389: LD_INT 107
14391: PPUSH
14392: LD_INT 138
14394: PPUSH
14395: CALL_OW 307
14399: IFFALSE 14957
14401: GO 14403
14403: DISABLE
// begin ComTurnUnit ( mrtvola , zradce1 ) ;
14404: LD_INT 64
14406: PPUSH
14407: LD_INT 65
14409: PPUSH
14410: CALL_OW 119
// ComTurnUnit ( zradce1 , mrtvola ) ;
14414: LD_INT 65
14416: PPUSH
14417: LD_INT 64
14419: PPUSH
14420: CALL_OW 119
// SayNoFace ( mrtvola , D1a-Merc1-1 ) ;
14424: LD_INT 64
14426: PPUSH
14427: LD_STRING D1a-Merc1-1
14429: PPUSH
14430: CALL_OW 89
// SayNoFace ( zradce1 , D1a-FMerc2-1 ) ;
14434: LD_INT 65
14436: PPUSH
14437: LD_STRING D1a-FMerc2-1
14439: PPUSH
14440: CALL_OW 89
// wait ( 0 0$0.3 ) ;
14444: LD_INT 10
14446: PPUSH
14447: CALL_OW 67
// ComTurnXY ( mrtvola , 101 , 141 ) ;
14451: LD_INT 64
14453: PPUSH
14454: LD_INT 101
14456: PPUSH
14457: LD_INT 141
14459: PPUSH
14460: CALL_OW 118
// wait ( 10 ) ;
14464: LD_INT 10
14466: PPUSH
14467: CALL_OW 67
// ComMoveUnit ( zradce1 , mrtvola ) ;
14471: LD_INT 65
14473: PPUSH
14474: LD_INT 64
14476: PPUSH
14477: CALL_OW 112
// SetLives ( mrtvola , 300 ) ;
14481: LD_INT 64
14483: PPUSH
14484: LD_INT 300
14486: PPUSH
14487: CALL_OW 234
// wait ( 0 0$1 ) ;
14491: LD_INT 35
14493: PPUSH
14494: CALL_OW 67
// AddComTurnUnit ( zradce1 , mrtvola ) ;
14498: LD_INT 65
14500: PPUSH
14501: LD_INT 64
14503: PPUSH
14504: CALL_OW 179
// AddComHeal ( zradce1 , mrtvola ) ;
14508: LD_INT 65
14510: PPUSH
14511: LD_INT 64
14513: PPUSH
14514: CALL_OW 188
// repeat wait ( 3 ) until GetLives ( mrtvola ) > 340 ;
14518: LD_INT 3
14520: PPUSH
14521: CALL_OW 67
14525: LD_INT 64
14527: PPUSH
14528: CALL_OW 256
14532: PUSH
14533: LD_INT 340
14535: GREATER
14536: IFFALSE 14518
// SetLives ( mrtvola , 10 ) ;
14538: LD_INT 64
14540: PPUSH
14541: LD_INT 10
14543: PPUSH
14544: CALL_OW 234
// enable ( 80 ) ;
14548: LD_INT 80
14550: ENABLE_MARKED
// wait ( 0 0$0.5 ) ;
14551: LD_INT 18
14553: PPUSH
14554: CALL_OW 67
// ForceSayNoFace ( mrtvola , D1a-Merc1-2 ) ;
14558: LD_INT 64
14560: PPUSH
14561: LD_STRING D1a-Merc1-2
14563: PPUSH
14564: CALL_OW 93
// wait ( 0 0$3 ) ;
14568: LD_INT 105
14570: PPUSH
14571: CALL_OW 67
// KillUnit ( mrtvola ) ;
14575: LD_INT 64
14577: PPUSH
14578: CALL_OW 66
// ComTurnXY ( zradce1 , 87 , 137 ) ;
14582: LD_INT 65
14584: PPUSH
14585: LD_INT 87
14587: PPUSH
14588: LD_INT 137
14590: PPUSH
14591: CALL_OW 118
// wait ( 0 0$1 ) ;
14595: LD_INT 35
14597: PPUSH
14598: CALL_OW 67
// SayNoFace ( zradce1 , D1a-FMerc2-2 ) ;
14602: LD_INT 65
14604: PPUSH
14605: LD_STRING D1a-FMerc2-2
14607: PPUSH
14608: CALL_OW 89
// ComExitBuilding ( [ zradce4 , zradce5 ] ) ;
14612: LD_INT 70
14614: PUSH
14615: LD_INT 71
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PPUSH
14622: CALL_OW 122
// ComExitBuilding ( [ zradce2 , zradce3 , zradce6 , zradce7 ] ) ;
14626: LD_INT 68
14628: PUSH
14629: LD_INT 69
14631: PUSH
14632: LD_INT 75
14634: PUSH
14635: LD_INT 77
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 122
// ComMoveXY ( [ zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 141 ) ;
14648: LD_INT 68
14650: PUSH
14651: LD_INT 69
14653: PUSH
14654: LD_INT 75
14656: PUSH
14657: LD_INT 77
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: PPUSH
14666: LD_INT 165
14668: PPUSH
14669: LD_INT 141
14671: PPUSH
14672: CALL_OW 111
// KillUnit ( mrtvola2 ) ;
14676: LD_INT 78
14678: PPUSH
14679: CALL_OW 66
// AddComMoveUnit ( zradce4 , utek2 ) ;
14683: LD_INT 70
14685: PPUSH
14686: LD_INT 67
14688: PPUSH
14689: CALL_OW 172
// AddComMoveUnit ( zradce5 , utek1 ) ;
14693: LD_INT 71
14695: PPUSH
14696: LD_INT 66
14698: PPUSH
14699: CALL_OW 172
// SetFuel ( utek1 , 0 ) ;
14703: LD_INT 66
14705: PPUSH
14706: LD_INT 0
14708: PPUSH
14709: CALL_OW 240
// SetFuel ( utek2 , 0 ) ;
14713: LD_INT 67
14715: PPUSH
14716: LD_INT 0
14718: PPUSH
14719: CALL_OW 240
// wait ( 0 0$1 ) ;
14723: LD_INT 35
14725: PPUSH
14726: CALL_OW 67
// AddComMoveXY ( utek1 , 162 , 142 ) ;
14730: LD_INT 66
14732: PPUSH
14733: LD_INT 162
14735: PPUSH
14736: LD_INT 142
14738: PPUSH
14739: CALL_OW 171
// AddComMoveXY ( utek2 , 162 , 139 ) ;
14743: LD_INT 67
14745: PPUSH
14746: LD_INT 162
14748: PPUSH
14749: LD_INT 139
14751: PPUSH
14752: CALL_OW 171
// ComMoveXY ( zradce1 , 162 , 140 ) ;
14756: LD_INT 65
14758: PPUSH
14759: LD_INT 162
14761: PPUSH
14762: LD_INT 140
14764: PPUSH
14765: CALL_OW 111
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 175 , 128 ) ;
14769: LD_INT 65
14771: PUSH
14772: LD_INT 68
14774: PUSH
14775: LD_INT 69
14777: PUSH
14778: LD_INT 75
14780: PUSH
14781: LD_INT 77
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: PPUSH
14791: LD_INT 175
14793: PPUSH
14794: LD_INT 128
14796: PPUSH
14797: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 126 , 94 ) ;
14801: LD_INT 65
14803: PUSH
14804: LD_INT 68
14806: PUSH
14807: LD_INT 69
14809: PUSH
14810: LD_INT 75
14812: PUSH
14813: LD_INT 77
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: LD_INT 126
14825: PPUSH
14826: LD_INT 94
14828: PPUSH
14829: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 92 ) ;
14833: LD_INT 65
14835: PUSH
14836: LD_INT 68
14838: PUSH
14839: LD_INT 69
14841: PUSH
14842: LD_INT 75
14844: PUSH
14845: LD_INT 77
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: PPUSH
14855: LD_INT 165
14857: PPUSH
14858: LD_INT 92
14860: PPUSH
14861: CALL_OW 171
// zradci = [ zradce1 , zradce2 , zradce3 , zradce4 , zradce5 , zradce6 , zradce7 , utek1 , utek2 ] ;
14865: LD_ADDR_LOC 19
14869: PUSH
14870: LD_INT 65
14872: PUSH
14873: LD_INT 68
14875: PUSH
14876: LD_INT 69
14878: PUSH
14879: LD_INT 70
14881: PUSH
14882: LD_INT 71
14884: PUSH
14885: LD_INT 75
14887: PUSH
14888: LD_INT 77
14890: PUSH
14891: LD_INT 66
14893: PUSH
14894: LD_INT 67
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: ST_TO_ADDR
// Odebirani = true ;
14908: LD_ADDR_EXP 44
14912: PUSH
14913: LD_INT 1
14915: ST_TO_ADDR
// ComFree ( plazici ) ;
14916: LD_LOC 17
14920: PPUSH
14921: CALL_OW 139
// ComFree ( Radar_enter ) ;
14925: LD_EXP 43
14929: PPUSH
14930: CALL_OW 139
// ComMoveXY ( plazici , 86 , 133 ) ;
14934: LD_LOC 17
14938: PPUSH
14939: LD_INT 86
14941: PPUSH
14942: LD_INT 133
14944: PPUSH
14945: CALL_OW 111
// navrat := true ;
14949: LD_ADDR_LOC 18
14953: PUSH
14954: LD_INT 1
14956: ST_TO_ADDR
// end ;
14957: END
// every 3 trigger IsLive ( mrtvola ) marked 80 do
14958: LD_INT 64
14960: PPUSH
14961: CALL_OW 300
14965: IFFALSE 15007
14967: GO 14969
14969: DISABLE
// begin enable ;
14970: ENABLE
// if GetLives ( mrtvola ) > 10 and GetLives ( mrtvola ) < 250 then
14971: LD_INT 64
14973: PPUSH
14974: CALL_OW 256
14978: PUSH
14979: LD_INT 10
14981: GREATER
14982: PUSH
14983: LD_INT 64
14985: PPUSH
14986: CALL_OW 256
14990: PUSH
14991: LD_INT 250
14993: LESS
14994: AND
14995: IFFALSE 15007
// SetLives ( mrtvola , 10 ) ;
14997: LD_INT 64
14999: PPUSH
15000: LD_INT 10
15002: PPUSH
15003: CALL_OW 234
// end ;
15007: END
// every 0 0$5 do
15008: GO 15010
15010: DISABLE
// begin if ( IsInArea ( utek1 , Benal ) or not IsOk ( zradce5 ) ) and ( IsInArea ( utek2 , Benal ) or not IsOk ( zradce4 ) ) then
15011: LD_INT 66
15013: PPUSH
15014: LD_INT 4
15016: PPUSH
15017: CALL_OW 308
15021: PUSH
15022: LD_INT 71
15024: PPUSH
15025: CALL_OW 302
15029: NOT
15030: OR
15031: PUSH
15032: LD_INT 67
15034: PPUSH
15035: LD_INT 4
15037: PPUSH
15038: CALL_OW 308
15042: PUSH
15043: LD_INT 70
15045: PPUSH
15046: CALL_OW 302
15050: NOT
15051: OR
15052: AND
15053: IFFALSE 15195
// begin if IsOk ( zradce5 ) then
15055: LD_INT 71
15057: PPUSH
15058: CALL_OW 302
15062: IFFALSE 15074
// SetFuel ( utek1 , 100 ) ;
15064: LD_INT 66
15066: PPUSH
15067: LD_INT 100
15069: PPUSH
15070: CALL_OW 240
// if IsOk ( zradce4 ) then
15074: LD_INT 70
15076: PPUSH
15077: CALL_OW 302
15081: IFFALSE 15093
// SetFuel ( utek2 , 100 ) ;
15083: LD_INT 67
15085: PPUSH
15086: LD_INT 100
15088: PPUSH
15089: CALL_OW 240
// ComEnterUnit ( zradce5 , utek1 ) ;
15093: LD_INT 71
15095: PPUSH
15096: LD_INT 66
15098: PPUSH
15099: CALL_OW 120
// ComEnterUnit ( zradce4 , utek2 ) ;
15103: LD_INT 70
15105: PPUSH
15106: LD_INT 67
15108: PPUSH
15109: CALL_OW 120
// AddComMoveXY ( [ zradce4 , zradce5 ] , 179 , 136 ) ;
15113: LD_INT 70
15115: PUSH
15116: LD_INT 71
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PPUSH
15123: LD_INT 179
15125: PPUSH
15126: LD_INT 136
15128: PPUSH
15129: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 153 , 108 ) ;
15133: LD_INT 70
15135: PUSH
15136: LD_INT 71
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PPUSH
15143: LD_INT 153
15145: PPUSH
15146: LD_INT 108
15148: PPUSH
15149: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 126 , 91 ) ;
15153: LD_INT 70
15155: PUSH
15156: LD_INT 71
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PPUSH
15163: LD_INT 126
15165: PPUSH
15166: LD_INT 91
15168: PPUSH
15169: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 165 , 92 ) ;
15173: LD_INT 70
15175: PUSH
15176: LD_INT 71
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PPUSH
15183: LD_INT 165
15185: PPUSH
15186: LD_INT 92
15188: PPUSH
15189: CALL_OW 171
// end else
15193: GO 15216
// begin ComMoveXY ( [ utek1 , utek2 ] , 162 , 142 ) ;
15195: LD_INT 66
15197: PUSH
15198: LD_INT 67
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PPUSH
15205: LD_INT 162
15207: PPUSH
15208: LD_INT 142
15210: PPUSH
15211: CALL_OW 111
// enable ;
15215: ENABLE
// end ; end ;
15216: END
// every 0 0$1 trigger Odebirani do
15217: LD_EXP 44
15221: IFFALSE 15335
15223: GO 15225
15225: DISABLE
// begin pom = UnitFilter ( zradci , [ f_inarea , ExitAR ] ) ;
15226: LD_ADDR_LOC 20
15230: PUSH
15231: LD_LOC 19
15235: PPUSH
15236: LD_INT 95
15238: PUSH
15239: LD_INT 5
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 72
15250: ST_TO_ADDR
// for i in pom do
15251: LD_ADDR_LOC 21
15255: PUSH
15256: LD_LOC 20
15260: PUSH
15261: FOR_IN
15262: IFFALSE 15275
// RemoveUnit ( i ) ;
15264: LD_LOC 21
15268: PPUSH
15269: CALL_OW 64
15273: GO 15261
15275: POP
15276: POP
// zradci = UnitFilter ( zradci , [ [ f_alive ] , [ f_side , Arabi ] ] ) ;
15277: LD_ADDR_LOC 19
15281: PUSH
15282: LD_LOC 19
15286: PPUSH
15287: LD_INT 51
15289: PUSH
15290: EMPTY
15291: LIST
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_EXP 3
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 72
15313: ST_TO_ADDR
// if zradci > 0 then
15314: LD_LOC 19
15318: PUSH
15319: LD_INT 0
15321: GREATER
15322: IFFALSE 15327
// enable else
15324: ENABLE
15325: GO 15335
// Odebirani = false ;
15327: LD_ADDR_EXP 44
15331: PUSH
15332: LD_INT 0
15334: ST_TO_ADDR
// end ;
15335: END
// every 0 0$1 trigger navrat do
15336: LD_LOC 18
15340: IFFALSE 15471
15342: GO 15344
15344: DISABLE
// begin if IsAt ( plazici [ 1 ] , 86 , 133 ) or IsAt ( plazici [ 2 ] , 86 , 133 ) or IsAt ( plazici [ 3 ] , 86 , 133 ) or IsAt ( plazici [ 4 ] , 86 , 133 ) then
15345: LD_LOC 17
15349: PUSH
15350: LD_INT 1
15352: ARRAY
15353: PPUSH
15354: LD_INT 86
15356: PPUSH
15357: LD_INT 133
15359: PPUSH
15360: CALL_OW 307
15364: PUSH
15365: LD_LOC 17
15369: PUSH
15370: LD_INT 2
15372: ARRAY
15373: PPUSH
15374: LD_INT 86
15376: PPUSH
15377: LD_INT 133
15379: PPUSH
15380: CALL_OW 307
15384: OR
15385: PUSH
15386: LD_LOC 17
15390: PUSH
15391: LD_INT 3
15393: ARRAY
15394: PPUSH
15395: LD_INT 86
15397: PPUSH
15398: LD_INT 133
15400: PPUSH
15401: CALL_OW 307
15405: OR
15406: PUSH
15407: LD_LOC 17
15411: PUSH
15412: LD_INT 4
15414: ARRAY
15415: PPUSH
15416: LD_INT 86
15418: PPUSH
15419: LD_INT 133
15421: PPUSH
15422: CALL_OW 307
15426: OR
15427: IFFALSE 15470
// begin ComWalk ( plazici ) ;
15429: LD_LOC 17
15433: PPUSH
15434: CALL_OW 138
// AddComMoveXY ( plazici , 83 , 148 ) ;
15438: LD_LOC 17
15442: PPUSH
15443: LD_INT 83
15445: PPUSH
15446: LD_INT 148
15448: PPUSH
15449: CALL_OW 171
// ComMoveXY ( Radar_enter , 87 , 152 ) ;
15453: LD_EXP 43
15457: PPUSH
15458: LD_INT 87
15460: PPUSH
15461: LD_INT 152
15463: PPUSH
15464: CALL_OW 111
// end else
15468: GO 15471
// enable ;
15470: ENABLE
// end ;
15471: END
// every 0 0$0.5 trigger navrat do
15472: LD_LOC 18
15476: IFFALSE 15510
15478: GO 15480
15480: DISABLE
// begin if IsInArea ( plazici [ 1 ] , AMret ) then
15481: LD_LOC 17
15485: PUSH
15486: LD_INT 1
15488: ARRAY
15489: PPUSH
15490: LD_INT 2
15492: PPUSH
15493: CALL_OW 308
15497: IFFALSE 15509
// begin chmo1 ;
15499: CALL 2083 0 0
// InGameOff ;
15503: CALL_OW 9
// end else
15507: GO 15510
// enable ;
15509: ENABLE
// end ;
15510: END
// every 0 0$10 trigger A1_dobyta do var pom ;
15511: LD_EXP 27
15515: IFFALSE 15610
15517: GO 15519
15519: DISABLE
15520: LD_INT 0
15522: PPUSH
// begin wait ( Rand ( 1 1$0 , 2 2$20 ) ) ;
15523: LD_INT 2100
15525: PPUSH
15526: LD_INT 4900
15528: PPUSH
15529: CALL_OW 12
15533: PPUSH
15534: CALL_OW 67
// pom = Rand ( 4 - difficulty , 5 ) ;
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: LD_INT 4
15545: PUSH
15546: LD_OWVAR 67
15550: MINUS
15551: PPUSH
15552: LD_INT 5
15554: PPUSH
15555: CALL_OW 12
15559: ST_TO_ADDR
// CreateCratesArea ( pom , Abase1 , true ) ;
15560: LD_VAR 0 1
15564: PPUSH
15565: LD_INT 3
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 55
// pocet_spadlych_beden = pocet_spadlych_beden + pom ;
15575: LD_ADDR_LOC 22
15579: PUSH
15580: LD_LOC 22
15584: PUSH
15585: LD_VAR 0 1
15589: PLUS
15590: ST_TO_ADDR
// if pocet_spadlych_beden < max_bedny [ difficulty ] then
15591: LD_LOC 22
15595: PUSH
15596: LD_EXP 50
15600: PUSH
15601: LD_OWVAR 67
15605: ARRAY
15606: LESS
15607: IFFALSE 15610
// enable ;
15609: ENABLE
// end ;
15610: PPOPN 1
15612: END
// every 0 0$10 trigger A2_dobyta do
15613: LD_EXP 28
15617: IFFALSE 15642
15619: GO 15621
15621: DISABLE
// begin pocet_spadlych_beden = pocet_spadlych_beden - 10 + difficulty ;
15622: LD_ADDR_LOC 22
15626: PUSH
15627: LD_LOC 22
15631: PUSH
15632: LD_INT 10
15634: MINUS
15635: PUSH
15636: LD_OWVAR 67
15640: PLUS
15641: ST_TO_ADDR
// end ; end_of_file
15642: END
// export A1_dobyta ; export A2_dobyta ; export A3_dobyta ; export Pruzkumnik ; var vysl ; var pom , i ; var uspech ; export JMM ; export Powell ; export Gary ; export Bobby ; export Frank ; export Lisa ; export Cornel ; export Yamoko ; export Cyrus ; export Don ; export Brown ; export Amici_enter ; export Radar_enter ; every 0 0$30 trigger A1_dobyta do
15643: LD_EXP 27
15647: IFFALSE 15970
15649: GO 15651
15651: DISABLE
// begin if IsOK ( Frank ) then
15652: LD_EXP 35
15656: PPUSH
15657: CALL_OW 302
15661: IFFALSE 15969
// begin wait ( 0 0$10 ) ;
15663: LD_INT 350
15665: PPUSH
15666: CALL_OW 67
// vysl := dialog_frank ;
15670: LD_ADDR_LOC 23
15674: PUSH
15675: CALL 2773 0 0
15679: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
15680: LD_ADDR_LOC 24
15684: PUSH
15685: LD_INT 1
15687: PPUSH
15688: LD_INT 100
15690: PPUSH
15691: CALL_OW 12
15695: ST_TO_ADDR
// case vysl of 1 :
15696: LD_LOC 23
15700: PUSH
15701: LD_INT 1
15703: DOUBLE
15704: EQUAL
15705: IFTRUE 15709
15707: GO 15739
15709: POP
// begin i = [ 50 , 30 , 20 ] ;
15710: LD_ADDR_LOC 25
15714: PUSH
15715: LD_INT 50
15717: PUSH
15718: LD_INT 30
15720: PUSH
15721: LD_INT 20
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: ST_TO_ADDR
// Pruzkumnik = true ;
15729: LD_ADDR_EXP 30
15733: PUSH
15734: LD_INT 1
15736: ST_TO_ADDR
// end ; 21 :
15737: GO 15786
15739: LD_INT 21
15741: DOUBLE
15742: EQUAL
15743: IFTRUE 15747
15745: GO 15777
15747: POP
// begin i = [ 80 , 15 , 5 ] ;
15748: LD_ADDR_LOC 25
15752: PUSH
15753: LD_INT 80
15755: PUSH
15756: LD_INT 15
15758: PUSH
15759: LD_INT 5
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: ST_TO_ADDR
// Pruzkumnik = true ;
15767: LD_ADDR_EXP 30
15771: PUSH
15772: LD_INT 1
15774: ST_TO_ADDR
// end ; else
15775: GO 15786
15777: POP
// uspech = 0 ; end ;
15778: LD_ADDR_LOC 26
15782: PUSH
15783: LD_INT 0
15785: ST_TO_ADDR
// if Pruzkumnik then
15786: LD_EXP 30
15790: IFFALSE 15871
// begin jdi_na_pruzkum ( Frank ) ;
15792: LD_EXP 35
15796: PPUSH
15797: CALL 16291 0 1
// if pom <= i [ 1 ] then
15801: LD_LOC 24
15805: PUSH
15806: LD_LOC 25
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: LESSEQUAL
15815: IFFALSE 15827
// uspech = 1 else
15817: LD_ADDR_LOC 26
15821: PUSH
15822: LD_INT 1
15824: ST_TO_ADDR
15825: GO 15871
// if pom <= i [ 1 ] + i [ 2 ] then
15827: LD_LOC 24
15831: PUSH
15832: LD_LOC 25
15836: PUSH
15837: LD_INT 1
15839: ARRAY
15840: PUSH
15841: LD_LOC 25
15845: PUSH
15846: LD_INT 2
15848: ARRAY
15849: PLUS
15850: LESSEQUAL
15851: IFFALSE 15863
// uspech = 2 else
15853: LD_ADDR_LOC 26
15857: PUSH
15858: LD_INT 2
15860: ST_TO_ADDR
15861: GO 15871
// uspech = 3 ;
15863: LD_ADDR_LOC 26
15867: PUSH
15868: LD_INT 3
15870: ST_TO_ADDR
// end ; case uspech of 1 :
15871: LD_LOC 26
15875: PUSH
15876: LD_INT 1
15878: DOUBLE
15879: EQUAL
15880: IFTRUE 15884
15882: GO 15910
15884: POP
// begin wait ( 3 3$0 ) ;
15885: LD_INT 6300
15887: PPUSH
15888: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 1 ) ;
15892: LD_EXP 35
15896: PPUSH
15897: LD_INT 1
15899: PPUSH
15900: CALL 16539 0 2
// fuspech1 ;
15904: CALL 3023 0 0
// end ; 2 :
15908: GO 15967
15910: LD_INT 2
15912: DOUBLE
15913: EQUAL
15914: IFTRUE 15918
15916: GO 15944
15918: POP
// begin wait ( 1 1$0 ) ;
15919: LD_INT 2100
15921: PPUSH
15922: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 2 ) ;
15926: LD_EXP 35
15930: PPUSH
15931: LD_INT 2
15933: PPUSH
15934: CALL 16539 0 2
// fuspech2 ;
15938: CALL 3160 0 0
// end ; 3 :
15942: GO 15967
15944: LD_INT 3
15946: DOUBLE
15947: EQUAL
15948: IFTRUE 15952
15950: GO 15966
15952: POP
// begin wait ( 5 5$0 ) ;
15953: LD_INT 10500
15955: PPUSH
15956: CALL_OW 67
// fuspech3 ;
15960: CALL 3303 0 0
// end ; end ;
15964: GO 15967
15966: POP
// end else
15967: GO 15970
// enable ;
15969: ENABLE
// end ;
15970: END
// every 0 0$30 trigger A1_dobyta do
15971: LD_EXP 27
15975: IFFALSE 16290
15977: GO 15979
15979: DISABLE
// begin if IsOK ( Yamoko ) then
15980: LD_EXP 38
15984: PPUSH
15985: CALL_OW 302
15989: IFFALSE 16289
// begin wait ( 0 0$10 ) ;
15991: LD_INT 350
15993: PPUSH
15994: CALL_OW 67
// vysl := dialog_yamoko ;
15998: LD_ADDR_LOC 23
16002: PUSH
16003: CALL 3311 0 0
16007: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
16008: LD_ADDR_LOC 24
16012: PUSH
16013: LD_INT 1
16015: PPUSH
16016: LD_INT 100
16018: PPUSH
16019: CALL_OW 12
16023: ST_TO_ADDR
// case vysl of 1 :
16024: LD_LOC 23
16028: PUSH
16029: LD_INT 1
16031: DOUBLE
16032: EQUAL
16033: IFTRUE 16037
16035: GO 16067
16037: POP
// begin i = [ 50 , 20 , 30 ] ;
16038: LD_ADDR_LOC 25
16042: PUSH
16043: LD_INT 50
16045: PUSH
16046: LD_INT 20
16048: PUSH
16049: LD_INT 30
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: ST_TO_ADDR
// Pruzkumnik = true ;
16057: LD_ADDR_EXP 30
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// end ; 21 :
16065: GO 16106
16067: LD_INT 21
16069: DOUBLE
16070: EQUAL
16071: IFTRUE 16075
16073: GO 16105
16075: POP
// begin i = [ 70 , 25 , 5 ] ;
16076: LD_ADDR_LOC 25
16080: PUSH
16081: LD_INT 70
16083: PUSH
16084: LD_INT 25
16086: PUSH
16087: LD_INT 5
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: ST_TO_ADDR
// Pruzkumnik = true ;
16095: LD_ADDR_EXP 30
16099: PUSH
16100: LD_INT 1
16102: ST_TO_ADDR
// end ; end ;
16103: GO 16106
16105: POP
// if Pruzkumnik then
16106: LD_EXP 30
16110: IFFALSE 16191
// begin jdi_na_pruzkum ( Yamoko ) ;
16112: LD_EXP 38
16116: PPUSH
16117: CALL 16291 0 1
// if pom <= i [ 1 ] then
16121: LD_LOC 24
16125: PUSH
16126: LD_LOC 25
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: LESSEQUAL
16135: IFFALSE 16147
// uspech = 1 else
16137: LD_ADDR_LOC 26
16141: PUSH
16142: LD_INT 1
16144: ST_TO_ADDR
16145: GO 16191
// if pom <= i [ 1 ] + i [ 2 ] then
16147: LD_LOC 24
16151: PUSH
16152: LD_LOC 25
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: PUSH
16161: LD_LOC 25
16165: PUSH
16166: LD_INT 2
16168: ARRAY
16169: PLUS
16170: LESSEQUAL
16171: IFFALSE 16183
// uspech = 2 else
16173: LD_ADDR_LOC 26
16177: PUSH
16178: LD_INT 2
16180: ST_TO_ADDR
16181: GO 16191
// uspech = 3 ;
16183: LD_ADDR_LOC 26
16187: PUSH
16188: LD_INT 3
16190: ST_TO_ADDR
// end ; case uspech of 1 :
16191: LD_LOC 26
16195: PUSH
16196: LD_INT 1
16198: DOUBLE
16199: EQUAL
16200: IFTRUE 16204
16202: GO 16230
16204: POP
// begin wait ( 2 2$0 ) ;
16205: LD_INT 4200
16207: PPUSH
16208: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 1 ) ;
16212: LD_EXP 38
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL 16539 0 2
// yuspech1 ;
16224: CALL 3416 0 0
// end ; 2 :
16228: GO 16287
16230: LD_INT 2
16232: DOUBLE
16233: EQUAL
16234: IFTRUE 16238
16236: GO 16264
16238: POP
// begin wait ( 1 1$0 ) ;
16239: LD_INT 2100
16241: PPUSH
16242: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 2 ) ;
16246: LD_EXP 38
16250: PPUSH
16251: LD_INT 2
16253: PPUSH
16254: CALL 16539 0 2
// yuspech2 ;
16258: CALL 3565 0 0
// end ; 3 :
16262: GO 16287
16264: LD_INT 3
16266: DOUBLE
16267: EQUAL
16268: IFTRUE 16272
16270: GO 16286
16272: POP
// begin wait ( 5 5$0 ) ;
16273: LD_INT 10500
16275: PPUSH
16276: CALL_OW 67
// yuspech3 ;
16280: CALL 3664 0 0
// end ; end ;
16284: GO 16287
16286: POP
// end else
16287: GO 16290
// enable ;
16289: ENABLE
// end ;
16290: END
// function jdi_na_pruzkum ( pru ) ; begin
16291: LD_INT 0
16293: PPUSH
// ComStop ( pru ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL_OW 141
// AddComExitBuilding ( pru ) ;
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 182
// AddComExitVehicle ( pru ) ;
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 181
// AddComStop ( pru ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 201
// while IsInUnit ( pru ) <> 0 do
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 310
16339: PUSH
16340: LD_INT 0
16342: NONEQUAL
16343: IFFALSE 16379
// begin wait ( 0 0$0.5 ) ;
16345: LD_INT 18
16347: PPUSH
16348: CALL_OW 67
// ComExitBuilding ( pru ) ;
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 122
// wait ( 0 0$0.5 ) ;
16361: LD_INT 18
16363: PPUSH
16364: CALL_OW 67
// AddComExitVehicle ( pru ) ;
16368: LD_VAR 0 1
16372: PPUSH
16373: CALL_OW 181
// end ;
16377: GO 16330
// ComStop ( pru ) ;
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 141
// SetSide ( pru , You2 ) ;
16388: LD_VAR 0 1
16392: PPUSH
16393: LD_EXP 2
16397: PPUSH
16398: CALL_OW 235
// SetClass ( pru , class_soldier ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 336
// AddComMoveXY ( pru , 91 , 110 ) ;
16414: LD_VAR 0 1
16418: PPUSH
16419: LD_INT 91
16421: PPUSH
16422: LD_INT 110
16424: PPUSH
16425: CALL_OW 171
// AddComMoveXY ( pru , 59 , 103 ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: LD_INT 59
16436: PPUSH
16437: LD_INT 103
16439: PPUSH
16440: CALL_OW 171
// while not IsAt ( pru , 59 , 103 ) do
16444: LD_VAR 0 1
16448: PPUSH
16449: LD_INT 59
16451: PPUSH
16452: LD_INT 103
16454: PPUSH
16455: CALL_OW 307
16459: NOT
16460: IFFALSE 16486
// begin wait ( 0 0$2 ) ;
16462: LD_INT 70
16464: PPUSH
16465: CALL_OW 67
// AddComMoveXY ( pru , 59 , 103 ) ;
16469: LD_VAR 0 1
16473: PPUSH
16474: LD_INT 59
16476: PPUSH
16477: LD_INT 103
16479: PPUSH
16480: CALL_OW 171
// end ;
16484: GO 16444
// ComMoveXY ( pru , 51 , 101 ) ;
16486: LD_VAR 0 1
16490: PPUSH
16491: LD_INT 51
16493: PPUSH
16494: LD_INT 101
16496: PPUSH
16497: CALL_OW 111
// while not IsInArea ( pru , pru_out ) do
16501: LD_VAR 0 1
16505: PPUSH
16506: LD_INT 24
16508: PPUSH
16509: CALL_OW 308
16513: NOT
16514: IFFALSE 16525
// wait ( 0 0$1 ) ;
16516: LD_INT 35
16518: PPUSH
16519: CALL_OW 67
16523: GO 16501
// RemoveUnit ( pru ) ;
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 64
// end ;
16534: LD_VAR 0 2
16538: RET
// function navrat_z_pruzkumu ( pru , usp ) ; begin
16539: LD_INT 0
16541: PPUSH
// PlaceUnitArea ( pru , pruarea , false ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: LD_INT 20
16549: PPUSH
16550: LD_INT 0
16552: PPUSH
16553: CALL_OW 49
// if usp = 1 then
16557: LD_VAR 0 2
16561: PUSH
16562: LD_INT 1
16564: EQUAL
16565: IFFALSE 16582
// AddComMoveXY ( pru , 47 , 87 ) ;
16567: LD_VAR 0 1
16571: PPUSH
16572: LD_INT 47
16574: PPUSH
16575: LD_INT 87
16577: PPUSH
16578: CALL_OW 171
// AddComMoveXY ( pru , 68 , 106 ) ;
16582: LD_VAR 0 1
16586: PPUSH
16587: LD_INT 68
16589: PPUSH
16590: LD_INT 106
16592: PPUSH
16593: CALL_OW 171
// AddComMoveXY ( pru , 118 , 129 ) ;
16597: LD_VAR 0 1
16601: PPUSH
16602: LD_INT 118
16604: PPUSH
16605: LD_INT 129
16607: PPUSH
16608: CALL_OW 171
// if usp <> 1 then
16612: LD_VAR 0 2
16616: PUSH
16617: LD_INT 1
16619: NONEQUAL
16620: IFFALSE 16634
// SetLives ( pru , 300 ) ;
16622: LD_VAR 0 1
16626: PPUSH
16627: LD_INT 300
16629: PPUSH
16630: CALL_OW 234
// while not IsInArea ( pru , Abase1 ) do
16634: LD_VAR 0 1
16638: PPUSH
16639: LD_INT 3
16641: PPUSH
16642: CALL_OW 308
16646: NOT
16647: IFFALSE 16658
// wait ( 0 0$2 ) ;
16649: LD_INT 70
16651: PPUSH
16652: CALL_OW 67
16656: GO 16634
// SetSide ( pru , You ) ;
16658: LD_VAR 0 1
16662: PPUSH
16663: LD_EXP 1
16667: PPUSH
16668: CALL_OW 235
// ComMoveUnit ( pru , JMM ) ;
16672: LD_VAR 0 1
16676: PPUSH
16677: LD_EXP 31
16681: PPUSH
16682: CALL_OW 112
// end ;
16686: LD_VAR 0 3
16690: RET
// every 0 0$10 trigger GetSide ( A1_tov ) or IsDead ( A1_tov ) do
16691: LD_INT 110
16693: PPUSH
16694: CALL_OW 255
16698: PUSH
16699: LD_INT 110
16701: PPUSH
16702: CALL_OW 301
16706: OR
16707: IFFALSE 16772
16709: GO 16711
16711: DISABLE
// begin SetTech ( tech_Flame , You , state_researched ) ;
16712: LD_INT 70
16714: PPUSH
16715: LD_EXP 1
16719: PPUSH
16720: LD_INT 2
16722: PPUSH
16723: CALL_OW 322
// SetTech ( tech_SibPow , You , state_researched ) ;
16727: LD_INT 21
16729: PPUSH
16730: LD_EXP 1
16734: PPUSH
16735: LD_INT 2
16737: PPUSH
16738: CALL_OW 322
// SetTech ( tech_SibEng , You , state_researched ) ;
16742: LD_INT 22
16744: PPUSH
16745: LD_EXP 1
16749: PPUSH
16750: LD_INT 2
16752: PPUSH
16753: CALL_OW 322
// SetTech ( tech_Mortar , You , state_researched ) ;
16757: LD_INT 41
16759: PPUSH
16760: LD_EXP 1
16764: PPUSH
16765: LD_INT 2
16767: PPUSH
16768: CALL_OW 322
// end ;
16772: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , Arabi ] , [ f_btype , b_warehouse ] ] ) = 0 do var pomauta ; var art ; var i , pom ;
16773: LD_INT 22
16775: PUSH
16776: LD_EXP 3
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 30
16787: PUSH
16788: LD_INT 1
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: PUSH
16804: LD_INT 0
16806: EQUAL
16807: IFFALSE 16976
16809: GO 16811
16811: DISABLE
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// begin pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16818: LD_ADDR_VAR 0 1
16822: PUSH
16823: LD_INT 22
16825: PUSH
16826: LD_EXP 1
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 2
16837: PUSH
16838: LD_INT 34
16840: PUSH
16841: LD_INT 12
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 34
16850: PUSH
16851: LD_INT 32
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL_OW 69
16871: ST_TO_ADDR
// art = false ;
16872: LD_ADDR_VAR 0 2
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// for i in pomauta do
16880: LD_ADDR_VAR 0 3
16884: PUSH
16885: LD_VAR 0 1
16889: PUSH
16890: FOR_IN
16891: IFFALSE 16921
// if GetCargo ( i , mat_artefact ) > 0 then
16893: LD_VAR 0 3
16897: PPUSH
16898: LD_INT 4
16900: PPUSH
16901: CALL_OW 289
16905: PUSH
16906: LD_INT 0
16908: GREATER
16909: IFFALSE 16919
// art = true ;
16911: LD_ADDR_VAR 0 2
16915: PUSH
16916: LD_INT 1
16918: ST_TO_ADDR
16919: GO 16890
16921: POP
16922: POP
// if art then
16923: LD_VAR 0 2
16927: IFFALSE 16935
// konec_mise else
16929: CALL 499 0 0
16933: GO 16976
// begin pom = query_konec_mise ;
16935: LD_ADDR_VAR 0 4
16939: PUSH
16940: CALL 7570 0 0
16944: ST_TO_ADDR
// if pom = 2 then
16945: LD_VAR 0 4
16949: PUSH
16950: LD_INT 2
16952: EQUAL
16953: IFFALSE 16961
// konec_mise else
16955: CALL 499 0 0
16959: GO 16976
// begin end_the_mission_allowed = true ;
16961: LD_ADDR_OWVAR 57
16965: PUSH
16966: LD_INT 1
16968: ST_TO_ADDR
// ChangeMissionObjectives ( MDestroyOut ) ;
16969: LD_STRING MDestroyOut
16971: PPUSH
16972: CALL_OW 337
// end ; end ; end ; end_of_file
16976: PPOPN 4
16978: END
// export Odebirani ; export oposoldier ; export bum2 ; var utok1 ; var utok1_over ; var utok3_over ; var utok4_over ; var Veze_2 ; var Opr_2 ; var i , pom , pom1 ; var uklizejici_mista ; var mcm1 ; var mcm2 ; every 0 0$0.3 do
16979: GO 16981
16981: DISABLE
// begin utok1 := false ;
16982: LD_ADDR_LOC 27
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// bum2 = false ;
16990: LD_ADDR_EXP 46
16994: PUSH
16995: LD_INT 0
16997: ST_TO_ADDR
// Veze_2 := [ A2_bu1 , A2_bu2 , A2_bu3 , A2_bu4 , A2_bu4 , A2_bu5 , A2_bu6 ] ;
16998: LD_ADDR_LOC 31
17002: PUSH
17003: LD_INT 112
17005: PUSH
17006: LD_INT 63
17008: PUSH
17009: LD_INT 47
17011: PUSH
17012: LD_INT 60
17014: PUSH
17015: LD_INT 60
17017: PUSH
17018: LD_INT 62
17020: PUSH
17021: LD_INT 59
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: ST_TO_ADDR
// Opr_2 = [ JEDNOTKY_BAZE_2_LIST [ 15 ] , JEDNOTKY_BAZE_2_LIST [ 16 ] ] ;
17033: LD_ADDR_LOC 32
17037: PUSH
17038: LD_EXP 10
17042: PUSH
17043: LD_INT 15
17045: ARRAY
17046: PUSH
17047: LD_EXP 10
17051: PUSH
17052: LD_INT 16
17054: ARRAY
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: ST_TO_ADDR
// pom = vytvor_opravare ;
17060: LD_ADDR_LOC 34
17064: PUSH
17065: CALL 8752 0 0
17069: ST_TO_ADDR
// Opr_2 = Opr_2 ^ pom ;
17070: LD_ADDR_LOC 32
17074: PUSH
17075: LD_LOC 32
17079: PUSH
17080: LD_LOC 34
17084: ADD
17085: ST_TO_ADDR
// Utok1_over = false ;
17086: LD_ADDR_LOC 28
17090: PUSH
17091: LD_INT 0
17093: ST_TO_ADDR
// utok3_over = false ;
17094: LD_ADDR_LOC 29
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// utok4_over = false ;
17102: LD_ADDR_LOC 30
17106: PUSH
17107: LD_INT 0
17109: ST_TO_ADDR
// uklizejici_mista = [ [ 28 , 16 ] , [ 22 , 18 ] , [ 29 , 20 ] , [ 19 , 33 ] ] ;
17110: LD_ADDR_LOC 36
17114: PUSH
17115: LD_INT 28
17117: PUSH
17118: LD_INT 16
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 22
17127: PUSH
17128: LD_INT 18
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 29
17137: PUSH
17138: LD_INT 20
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 19
17147: PUSH
17148: LD_INT 33
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: ST_TO_ADDR
// disable ( 998 ) ;
17161: LD_INT 998
17163: DISABLE_MARKED
// disable ( 997 ) ;
17164: LD_INT 997
17166: DISABLE_MARKED
// disable ( 996 ) ;
17167: LD_INT 996
17169: DISABLE_MARKED
// disable ( 995 ) ;
17170: LD_INT 995
17172: DISABLE_MARKED
// if difficulty < 3 then
17173: LD_OWVAR 67
17177: PUSH
17178: LD_INT 3
17180: LESS
17181: IFFALSE 17190
// RemoveUnit ( sui1 ) ;
17183: LD_INT 118
17185: PPUSH
17186: CALL_OW 64
// if difficulty < 2 then
17190: LD_OWVAR 67
17194: PUSH
17195: LD_INT 2
17197: LESS
17198: IFFALSE 17214
// begin RemoveUnit ( sui2 ) ;
17200: LD_INT 119
17202: PPUSH
17203: CALL_OW 64
// RemoveUnit ( sui3 ) ;
17207: LD_INT 121
17209: PPUSH
17210: CALL_OW 64
// end ; end ;
17214: END
// export function uklid_arabu ; begin
17215: LD_INT 0
17217: PPUSH
// ComEnterUnit ( zradce1 , A1_lab ) ;
17218: LD_INT 65
17220: PPUSH
17221: LD_INT 15
17223: PPUSH
17224: CALL_OW 120
// ComEnterUnit ( zradce2 , A1_bu1 ) ;
17228: LD_INT 68
17230: PPUSH
17231: LD_INT 9
17233: PPUSH
17234: CALL_OW 120
// ComEnterUnit ( zradce3 , A1_bu2 ) ;
17238: LD_INT 69
17240: PPUSH
17241: LD_INT 8
17243: PPUSH
17244: CALL_OW 120
// ComEnterUnit ( zradce4 , A1_bar ) ;
17248: LD_INT 70
17250: PPUSH
17251: LD_INT 14
17253: PPUSH
17254: CALL_OW 120
// ComEnterUnit ( zradce5 , A1_bar ) ;
17258: LD_INT 71
17260: PPUSH
17261: LD_INT 14
17263: PPUSH
17264: CALL_OW 120
// ComEnterUnit ( A1_vo1 , A1_bu3 ) ;
17268: LD_INT 72
17270: PPUSH
17271: LD_INT 11
17273: PPUSH
17274: CALL_OW 120
// ComEnterUnit ( A1_vo2 , A1_dep ) ;
17278: LD_INT 73
17280: PPUSH
17281: LD_INT 4
17283: PPUSH
17284: CALL_OW 120
// ComEnterUnit ( A1_vo4 , A1_dep ) ;
17288: LD_INT 76
17290: PPUSH
17291: LD_INT 4
17293: PPUSH
17294: CALL_OW 120
// ComEnterUnit ( A1_ve1 , A1_lab ) ;
17298: LD_INT 87
17300: PPUSH
17301: LD_INT 15
17303: PPUSH
17304: CALL_OW 120
// ComEnterUnit ( A1_ve2 , A1_lab ) ;
17308: LD_INT 74
17310: PPUSH
17311: LD_INT 15
17313: PPUSH
17314: CALL_OW 120
// ComEnterUnit ( zradce6 , A1_bu6 ) ;
17318: LD_INT 75
17320: PPUSH
17321: LD_INT 10
17323: PPUSH
17324: CALL_OW 120
// ComEnterUnit ( zradce7 , A1_bu4 ) ;
17328: LD_INT 77
17330: PPUSH
17331: LD_INT 12
17333: PPUSH
17334: CALL_OW 120
// ComHold ( mrtvola2 ) ;
17338: LD_INT 78
17340: PPUSH
17341: CALL_OW 140
// ComEnterUnit ( A1_en1 , A1_dep ) ;
17345: LD_INT 79
17347: PPUSH
17348: LD_INT 4
17350: PPUSH
17351: CALL_OW 120
// ComEnterUnit ( A1_me1 , A1_tov ) ;
17355: LD_INT 81
17357: PPUSH
17358: LD_INT 110
17360: PPUSH
17361: CALL_OW 120
// ComEnterUnit ( A1_me2 , A1_tov ) ;
17365: LD_INT 80
17367: PPUSH
17368: LD_INT 110
17370: PPUSH
17371: CALL_OW 120
// ComPlaceRemoteCharge ( A2_zas1 , 52 , 62 , 0 ) ;
17375: LD_INT 82
17377: PPUSH
17378: LD_INT 52
17380: PPUSH
17381: LD_INT 62
17383: PPUSH
17384: LD_INT 0
17386: PPUSH
17387: CALL_OW 133
// ComPlaceRemoteCharge ( A2_zas2 , 55 , 64 , 0 ) ;
17391: LD_INT 83
17393: PPUSH
17394: LD_INT 55
17396: PPUSH
17397: LD_INT 64
17399: PPUSH
17400: LD_INT 0
17402: PPUSH
17403: CALL_OW 133
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 44 , 24 ) ;
17407: LD_INT 82
17409: PUSH
17410: LD_INT 83
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PPUSH
17417: LD_INT 44
17419: PPUSH
17420: LD_INT 24
17422: PPUSH
17423: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 30 , 11 ) ;
17427: LD_INT 82
17429: PUSH
17430: LD_INT 83
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: LD_INT 30
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 24 , 37 ) ;
17447: LD_INT 82
17449: PUSH
17450: LD_INT 83
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: LD_INT 24
17459: PPUSH
17460: LD_INT 37
17462: PPUSH
17463: CALL_OW 171
// AddComMoveXY ( A2_zas1 , 32 , 60 ) ;
17467: LD_INT 82
17469: PPUSH
17470: LD_INT 32
17472: PPUSH
17473: LD_INT 60
17475: PPUSH
17476: CALL_OW 171
// AddComMoveXY ( A2_zas2 , 37 , 58 ) ;
17480: LD_INT 83
17482: PPUSH
17483: LD_INT 37
17485: PPUSH
17486: LD_INT 58
17488: PPUSH
17489: CALL_OW 171
// AddComCrawl ( [ A2_zas1 , A2_zas2 ] ) ;
17493: LD_INT 82
17495: PUSH
17496: LD_INT 83
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PPUSH
17503: CALL_OW 197
// ComEnterUnit ( A3_rme1 , A3_rv1 ) ;
17507: LD_INT 96
17509: PPUSH
17510: LD_INT 26
17512: PPUSH
17513: CALL_OW 120
// ComEnterUnit ( A3_rme2 , A3_rv2 ) ;
17517: LD_INT 95
17519: PPUSH
17520: LD_INT 25
17522: PPUSH
17523: CALL_OW 120
// ComEnterUnit ( A3_rme3 , A3_rv3 ) ;
17527: LD_INT 94
17529: PPUSH
17530: LD_INT 27
17532: PPUSH
17533: CALL_OW 120
// wait ( 0 0$5 ) ;
17537: LD_INT 175
17539: PPUSH
17540: CALL_OW 67
// ComLinkTo ( [ A3_are1 , A3_are2 , A3_are3 ] , A3_rme1 ) ;
17544: LD_INT 23
17546: PUSH
17547: LD_INT 18
17549: PUSH
17550: LD_INT 44
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: PPUSH
17558: LD_INT 96
17560: PPUSH
17561: CALL_OW 135
// ComLinkTo ( [ A3_are4 , A3_are5 , A3_are6 ] , A3_rme2 ) ;
17565: LD_INT 19
17567: PUSH
17568: LD_INT 24
17570: PUSH
17571: LD_INT 20
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: PPUSH
17579: LD_INT 95
17581: PPUSH
17582: CALL_OW 135
// ComLinkTo ( [ A3_are7 , A3_are8 , A3_are9 ] , A3_rme3 ) ;
17586: LD_INT 21
17588: PUSH
17589: LD_INT 93
17591: PUSH
17592: LD_INT 22
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: PPUSH
17600: LD_INT 94
17602: PPUSH
17603: CALL_OW 135
// ComPlaceRemoteCharge ( A3_zas1 , 103 , 19 , 0 ) ;
17607: LD_INT 101
17609: PPUSH
17610: LD_INT 103
17612: PPUSH
17613: LD_INT 19
17615: PPUSH
17616: LD_INT 0
17618: PPUSH
17619: CALL_OW 133
// AddComMoveXY ( A3_zas1 , 104 , 3 ) ;
17623: LD_INT 101
17625: PPUSH
17626: LD_INT 104
17628: PPUSH
17629: LD_INT 3
17631: PPUSH
17632: CALL_OW 171
// AddComCrawl ( A3_zas1 ) ;
17636: LD_INT 101
17638: PPUSH
17639: CALL_OW 197
// AddComTurnXY ( A3_zas1 , 102 , 8 ) ;
17643: LD_INT 101
17645: PPUSH
17646: LD_INT 102
17648: PPUSH
17649: LD_INT 8
17651: PPUSH
17652: CALL_OW 178
// end ;
17656: LD_VAR 0 1
17660: RET
// export function uklid_arabu2 ; var MD1_un ; var MD2_un ; begin
17661: LD_INT 0
17663: PPUSH
17664: PPUSH
17665: PPUSH
// MD1_un = [ ] ;
17666: LD_ADDR_VAR 0 2
17670: PUSH
17671: EMPTY
17672: ST_TO_ADDR
// MD2_un = [ ] ;
17673: LD_ADDR_VAR 0 3
17677: PUSH
17678: EMPTY
17679: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 1 ] , A2_bu1 ) ;
17680: LD_EXP 10
17684: PUSH
17685: LD_INT 1
17687: ARRAY
17688: PPUSH
17689: LD_INT 112
17691: PPUSH
17692: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu1 , false , 0 ] ] ;
17696: LD_ADDR_LOC 36
17700: PUSH
17701: LD_LOC 36
17705: PUSH
17706: LD_INT 112
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: LD_INT 0
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: ADD
17723: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 2 ] , A2_bu2 ) ;
17724: LD_EXP 10
17728: PUSH
17729: LD_INT 2
17731: ARRAY
17732: PPUSH
17733: LD_INT 63
17735: PPUSH
17736: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 2 ] ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: LD_VAR 0 2
17749: PUSH
17750: LD_EXP 10
17754: PUSH
17755: LD_INT 2
17757: ARRAY
17758: ADD
17759: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu2 , false , 0 ] ] ;
17760: LD_ADDR_LOC 36
17764: PUSH
17765: LD_LOC 36
17769: PUSH
17770: LD_INT 63
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: ADD
17787: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 3 ] , A2_bu3 ) ;
17788: LD_EXP 10
17792: PUSH
17793: LD_INT 3
17795: ARRAY
17796: PPUSH
17797: LD_INT 47
17799: PPUSH
17800: CALL_OW 120
// if difficulty > 1 then
17804: LD_OWVAR 67
17808: PUSH
17809: LD_INT 1
17811: GREATER
17812: IFFALSE 17834
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
17814: LD_ADDR_VAR 0 2
17818: PUSH
17819: LD_VAR 0 2
17823: PUSH
17824: LD_EXP 10
17828: PUSH
17829: LD_INT 3
17831: ARRAY
17832: ADD
17833: ST_TO_ADDR
// if difficulty > 1 then
17834: LD_OWVAR 67
17838: PUSH
17839: LD_INT 1
17841: GREATER
17842: IFFALSE 17864
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: LD_VAR 0 3
17853: PUSH
17854: LD_EXP 10
17858: PUSH
17859: LD_INT 3
17861: ARRAY
17862: ADD
17863: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu3 , false , 0 ] ] ;
17864: LD_ADDR_LOC 36
17868: PUSH
17869: LD_LOC 36
17873: PUSH
17874: LD_INT 47
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: ADD
17891: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 4 ] , A2_bu4 ) ;
17892: LD_EXP 10
17896: PUSH
17897: LD_INT 4
17899: ARRAY
17900: PPUSH
17901: LD_INT 60
17903: PPUSH
17904: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu4 , false , 0 ] ] ;
17908: LD_ADDR_LOC 36
17912: PUSH
17913: LD_LOC 36
17917: PUSH
17918: LD_INT 60
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: ADD
17935: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 5 ] , A2_bu5 ) ;
17936: LD_EXP 10
17940: PUSH
17941: LD_INT 5
17943: ARRAY
17944: PPUSH
17945: LD_INT 62
17947: PPUSH
17948: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 5 ] ;
17952: LD_ADDR_VAR 0 3
17956: PUSH
17957: LD_VAR 0 3
17961: PUSH
17962: LD_EXP 10
17966: PUSH
17967: LD_INT 5
17969: ARRAY
17970: ADD
17971: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu5 , false , 0 ] ] ;
17972: LD_ADDR_LOC 36
17976: PUSH
17977: LD_LOC 36
17981: PUSH
17982: LD_INT 62
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: LD_INT 0
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: PUSH
17996: EMPTY
17997: LIST
17998: ADD
17999: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 6 ] , A2_bu6 ) ;
18000: LD_EXP 10
18004: PUSH
18005: LD_INT 6
18007: ARRAY
18008: PPUSH
18009: LD_INT 59
18011: PPUSH
18012: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 6 ] ;
18016: LD_ADDR_VAR 0 3
18020: PUSH
18021: LD_VAR 0 3
18025: PUSH
18026: LD_EXP 10
18030: PUSH
18031: LD_INT 6
18033: ARRAY
18034: ADD
18035: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu6 , false , 0 ] ] ;
18036: LD_ADDR_LOC 36
18040: PUSH
18041: LD_LOC 36
18045: PUSH
18046: LD_INT 59
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: ADD
18063: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 17 ] , A2_tov ) ;
18064: LD_EXP 10
18068: PUSH
18069: LD_INT 17
18071: ARRAY
18072: PPUSH
18073: LD_INT 50
18075: PPUSH
18076: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18080: LD_ADDR_VAR 0 2
18084: PUSH
18085: LD_VAR 0 2
18089: PUSH
18090: LD_EXP 10
18094: PUSH
18095: LD_INT 17
18097: ARRAY
18098: ADD
18099: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18100: LD_ADDR_VAR 0 3
18104: PUSH
18105: LD_VAR 0 3
18109: PUSH
18110: LD_EXP 10
18114: PUSH
18115: LD_INT 17
18117: ARRAY
18118: ADD
18119: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18120: LD_ADDR_LOC 36
18124: PUSH
18125: LD_LOC 36
18129: PUSH
18130: LD_INT 50
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: LD_INT 3
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: ADD
18147: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 18 ] , A2_tov ) ;
18148: LD_EXP 10
18152: PUSH
18153: LD_INT 18
18155: ARRAY
18156: PPUSH
18157: LD_INT 50
18159: PPUSH
18160: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 18 ] ;
18164: LD_ADDR_VAR 0 2
18168: PUSH
18169: LD_VAR 0 2
18173: PUSH
18174: LD_EXP 10
18178: PUSH
18179: LD_INT 18
18181: ARRAY
18182: ADD
18183: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18184: LD_ADDR_LOC 36
18188: PUSH
18189: LD_LOC 36
18193: PUSH
18194: LD_INT 50
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: LD_INT 3
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: ADD
18211: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 19 ] , A2_tov ) ;
18212: LD_EXP 10
18216: PUSH
18217: LD_INT 19
18219: ARRAY
18220: PPUSH
18221: LD_INT 50
18223: PPUSH
18224: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 20 ] , A2_tov ) ;
18228: LD_EXP 10
18232: PUSH
18233: LD_INT 20
18235: ARRAY
18236: PPUSH
18237: LD_INT 50
18239: PPUSH
18240: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 15 ] , A2_dep ) ;
18244: LD_EXP 10
18248: PUSH
18249: LD_INT 15
18251: ARRAY
18252: PPUSH
18253: LD_INT 46
18255: PPUSH
18256: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 16 ] , A2_dep ) ;
18260: LD_EXP 10
18264: PUSH
18265: LD_INT 16
18267: ARRAY
18268: PPUSH
18269: LD_INT 46
18271: PPUSH
18272: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 16 ] ;
18276: LD_ADDR_VAR 0 3
18280: PUSH
18281: LD_VAR 0 3
18285: PUSH
18286: LD_EXP 10
18290: PUSH
18291: LD_INT 16
18293: ARRAY
18294: ADD
18295: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_dep , true , class_engineer ] ] ;
18296: LD_ADDR_LOC 36
18300: PUSH
18301: LD_LOC 36
18305: PUSH
18306: LD_INT 46
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: ADD
18323: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 7 ] , A2_bar ) ;
18324: LD_EXP 10
18328: PUSH
18329: LD_INT 7
18331: ARRAY
18332: PPUSH
18333: LD_INT 48
18335: PPUSH
18336: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 7 ] ;
18340: LD_ADDR_VAR 0 2
18344: PUSH
18345: LD_VAR 0 2
18349: PUSH
18350: LD_EXP 10
18354: PUSH
18355: LD_INT 7
18357: ARRAY
18358: ADD
18359: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18360: LD_ADDR_LOC 36
18364: PUSH
18365: LD_LOC 36
18369: PUSH
18370: LD_INT 48
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: LD_INT 8
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: ADD
18387: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] , A2_bar ) ;
18388: LD_EXP 10
18392: PUSH
18393: LD_INT 8
18395: ARRAY
18396: PPUSH
18397: LD_INT 48
18399: PPUSH
18400: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 8 ] ;
18404: LD_ADDR_VAR 0 3
18408: PUSH
18409: LD_VAR 0 3
18413: PUSH
18414: LD_EXP 10
18418: PUSH
18419: LD_INT 8
18421: ARRAY
18422: ADD
18423: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_soldier ] ] ;
18424: LD_ADDR_LOC 36
18428: PUSH
18429: LD_LOC 36
18433: PUSH
18434: LD_INT 48
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: ADD
18451: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] , A2_bar ) ;
18452: LD_EXP 10
18456: PUSH
18457: LD_INT 9
18459: ARRAY
18460: PPUSH
18461: LD_INT 48
18463: PPUSH
18464: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18468: LD_ADDR_LOC 36
18472: PUSH
18473: LD_LOC 36
18477: PUSH
18478: LD_INT 48
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: LD_INT 8
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: PUSH
18492: EMPTY
18493: LIST
18494: ADD
18495: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 10 ] , A2_bar ) ;
18496: LD_EXP 10
18500: PUSH
18501: LD_INT 10
18503: ARRAY
18504: PPUSH
18505: LD_INT 48
18507: PPUSH
18508: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 11 ] , A2_lab ) ;
18512: LD_EXP 10
18516: PUSH
18517: LD_INT 11
18519: ARRAY
18520: PPUSH
18521: LD_INT 61
18523: PPUSH
18524: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18528: LD_ADDR_VAR 0 2
18532: PUSH
18533: LD_VAR 0 2
18537: PUSH
18538: LD_EXP 10
18542: PUSH
18543: LD_INT 10
18545: ARRAY
18546: ADD
18547: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18548: LD_ADDR_VAR 0 3
18552: PUSH
18553: LD_VAR 0 3
18557: PUSH
18558: LD_EXP 10
18562: PUSH
18563: LD_INT 10
18565: ARRAY
18566: ADD
18567: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_lab , true , class_scientistic ] ] ;
18568: LD_ADDR_LOC 36
18572: PUSH
18573: LD_LOC 36
18577: PUSH
18578: LD_INT 61
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: LD_INT 4
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: PUSH
18592: EMPTY
18593: LIST
18594: ADD
18595: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 12 ] , A2_lab ) ;
18596: LD_EXP 10
18600: PUSH
18601: LD_INT 12
18603: ARRAY
18604: PPUSH
18605: LD_INT 61
18607: PPUSH
18608: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 23 ] , A2_radar ) ;
18612: LD_EXP 10
18616: PUSH
18617: LD_INT 23
18619: ARRAY
18620: PPUSH
18621: LD_INT 88
18623: PPUSH
18624: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 21 ] , A2_nau1 ) ;
18628: LD_EXP 10
18632: PUSH
18633: LD_INT 21
18635: ARRAY
18636: PPUSH
18637: LD_INT 107
18639: PPUSH
18640: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: LD_VAR 0 2
18653: PUSH
18654: LD_EXP 10
18658: PUSH
18659: LD_INT 21
18661: ARRAY
18662: ADD
18663: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18664: LD_ADDR_VAR 0 3
18668: PUSH
18669: LD_VAR 0 3
18673: PUSH
18674: LD_EXP 10
18678: PUSH
18679: LD_INT 21
18681: ARRAY
18682: ADD
18683: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau1 , false , 0 ] ] ;
18684: LD_ADDR_LOC 36
18688: PUSH
18689: LD_LOC 36
18693: PUSH
18694: LD_INT 107
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: ADD
18711: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 22 ] , A2_nau2 ) ;
18712: LD_EXP 10
18716: PUSH
18717: LD_INT 22
18719: ARRAY
18720: PPUSH
18721: LD_INT 108
18723: PPUSH
18724: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18728: LD_ADDR_VAR 0 2
18732: PUSH
18733: LD_VAR 0 2
18737: PUSH
18738: LD_EXP 10
18742: PUSH
18743: LD_INT 22
18745: ARRAY
18746: ADD
18747: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: LD_VAR 0 3
18757: PUSH
18758: LD_EXP 10
18762: PUSH
18763: LD_INT 22
18765: ARRAY
18766: ADD
18767: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau2 , false , 0 ] ] ;
18768: LD_ADDR_LOC 36
18772: PUSH
18773: LD_LOC 36
18777: PUSH
18778: LD_INT 108
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: ADD
18795: ST_TO_ADDR
// ComEnterUnit ( Opr_2 , A2_dep ) ;
18796: LD_LOC 32
18800: PPUSH
18801: LD_INT 46
18803: PPUSH
18804: CALL_OW 120
// AddMcUnits ( MD1 , MD1_un ) ;
18808: LD_EXP 6
18812: PPUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: CALL_OW 390
// AddMcUnits ( MD2 , MD2_un ) ;
18822: LD_EXP 8
18826: PPUSH
18827: LD_VAR 0 3
18831: PPUSH
18832: CALL_OW 390
// end ;
18836: LD_VAR 0 1
18840: RET
// export function uklid_arabu3 ; begin
18841: LD_INT 0
18843: PPUSH
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 1 ] , A3_bu1 ) ;
18844: LD_EXP 11
18848: PUSH
18849: LD_INT 1
18851: ARRAY
18852: PPUSH
18853: LD_INT 30
18855: PPUSH
18856: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 2 ] , A3_bu2 ) ;
18860: LD_EXP 11
18864: PUSH
18865: LD_INT 2
18867: ARRAY
18868: PPUSH
18869: LD_INT 43
18871: PPUSH
18872: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 3 ] , A3_bu3 ) ;
18876: LD_EXP 11
18880: PUSH
18881: LD_INT 3
18883: ARRAY
18884: PPUSH
18885: LD_INT 31
18887: PPUSH
18888: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 7 ] , A3_bar ) ;
18892: LD_EXP 11
18896: PUSH
18897: LD_INT 7
18899: ARRAY
18900: PPUSH
18901: LD_INT 40
18903: PPUSH
18904: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 5 ] , A3_bar ) ;
18908: LD_EXP 11
18912: PUSH
18913: LD_INT 5
18915: ARRAY
18916: PPUSH
18917: LD_INT 40
18919: PPUSH
18920: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 6 ] , A3_bar ) ;
18924: LD_EXP 11
18928: PUSH
18929: LD_INT 6
18931: ARRAY
18932: PPUSH
18933: LD_INT 40
18935: PPUSH
18936: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 4 ] , A3_dep ) ;
18940: LD_EXP 11
18944: PUSH
18945: LD_INT 4
18947: ARRAY
18948: PPUSH
18949: LD_INT 28
18951: PPUSH
18952: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 8 ] , A3_tov ) ;
18956: LD_EXP 11
18960: PUSH
18961: LD_INT 8
18963: ARRAY
18964: PPUSH
18965: LD_INT 34
18967: PPUSH
18968: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 9 ] , A3_tov ) ;
18972: LD_EXP 11
18976: PUSH
18977: LD_INT 9
18979: ARRAY
18980: PPUSH
18981: LD_INT 34
18983: PPUSH
18984: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 10 ] , A3_tov ) ;
18988: LD_EXP 11
18992: PUSH
18993: LD_INT 10
18995: ARRAY
18996: PPUSH
18997: LD_INT 34
18999: PPUSH
19000: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 11 ] , A3_tov ) ;
19004: LD_EXP 11
19008: PUSH
19009: LD_INT 11
19011: ARRAY
19012: PPUSH
19013: LD_INT 34
19015: PPUSH
19016: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 12 ] , A3_lab ) ;
19020: LD_EXP 11
19024: PUSH
19025: LD_INT 12
19027: ARRAY
19028: PPUSH
19029: LD_INT 41
19031: PPUSH
19032: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 13 ] , A3_lab ) ;
19036: LD_EXP 11
19040: PUSH
19041: LD_INT 13
19043: ARRAY
19044: PPUSH
19045: LD_INT 41
19047: PPUSH
19048: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 16 ] , A3_dep ) ;
19052: LD_EXP 11
19056: PUSH
19057: LD_INT 16
19059: ARRAY
19060: PPUSH
19061: LD_INT 28
19063: PPUSH
19064: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 17 ] , A3_dep ) ;
19068: LD_EXP 11
19072: PUSH
19073: LD_INT 17
19075: ARRAY
19076: PPUSH
19077: LD_INT 28
19079: PPUSH
19080: CALL_OW 120
// end ;
19084: LD_VAR 0 1
19088: RET
// every 0 0$1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do
19089: LD_INT 3
19091: PPUSH
19092: LD_INT 22
19094: PUSH
19095: LD_EXP 1
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: PPUSH
19107: CALL_OW 70
19111: PUSH
19112: LD_INT 0
19114: GREATER
19115: IFFALSE 19261
19117: GO 19119
19119: DISABLE
// begin wait ( 0 0$2 ) ;
19120: LD_INT 70
19122: PPUSH
19123: CALL_OW 67
// ComExitBuilding ( A1_vo2 ) ;
19127: LD_INT 73
19129: PPUSH
19130: CALL_OW 122
// ComExitBuilding ( [ A1_ve1 , A1_ve2 ] ) ;
19134: LD_INT 87
19136: PUSH
19137: LD_INT 74
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PPUSH
19144: CALL_OW 122
// AddComAgressiveMove ( A1_ve1 , 121 , 147 ) ;
19148: LD_INT 87
19150: PPUSH
19151: LD_INT 121
19153: PPUSH
19154: LD_INT 147
19156: PPUSH
19157: CALL_OW 174
// AddComAgressiveMove ( A1_ve1 , 113 , 141 ) ;
19161: LD_INT 87
19163: PPUSH
19164: LD_INT 113
19166: PPUSH
19167: LD_INT 141
19169: PPUSH
19170: CALL_OW 174
// AddComEnterUnit ( A1_ve1 , A1_bu1 ) ;
19174: LD_INT 87
19176: PPUSH
19177: LD_INT 9
19179: PPUSH
19180: CALL_OW 180
// ComExitBuilding ( A1_en1 ) ;
19184: LD_INT 79
19186: PPUSH
19187: CALL_OW 122
// ComExitBuilding ( [ A1_me1 , A1_me2 ] ) ;
19191: LD_INT 81
19193: PUSH
19194: LD_INT 80
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PPUSH
19201: CALL_OW 122
// AddComAgressiveMove ( A1_me1 , 113 , 128 ) ;
19205: LD_INT 81
19207: PPUSH
19208: LD_INT 113
19210: PPUSH
19211: LD_INT 128
19213: PPUSH
19214: CALL_OW 174
// if difficulty = 3 then
19218: LD_OWVAR 67
19222: PUSH
19223: LD_INT 3
19225: EQUAL
19226: IFFALSE 19238
// AddComEnterUnit ( A1_me1 , A1_au2 ) ;
19228: LD_INT 81
19230: PPUSH
19231: LD_INT 109
19233: PPUSH
19234: CALL_OW 180
// AddComAgressiveMove ( A1_me2 , 117 , 125 ) ;
19238: LD_INT 80
19240: PPUSH
19241: LD_INT 117
19243: PPUSH
19244: LD_INT 125
19246: PPUSH
19247: CALL_OW 174
// AddComEnterUnit ( A1_me2 , A1_au1 ) ;
19251: LD_INT 80
19253: PPUSH
19254: LD_INT 105
19256: PPUSH
19257: CALL_OW 180
// end ;
19261: END
// every 1 1$0 trigger utok1_over do var pom , i ; var souradnice ;
19262: LD_LOC 28
19266: IFFALSE 19499
19268: GO 19270
19270: DISABLE
19271: LD_INT 0
19273: PPUSH
19274: PPUSH
19275: PPUSH
// begin wait ( utok_2_doba [ difficulty ] ) ;
19276: LD_EXP 53
19280: PUSH
19281: LD_OWVAR 67
19285: ARRAY
19286: PPUSH
19287: CALL_OW 67
// for i in Ar_utok3_LIST do
19291: LD_ADDR_VAR 0 2
19295: PUSH
19296: LD_EXP 14
19300: PUSH
19301: FOR_IN
19302: IFFALSE 19321
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_INT 25
19311: PPUSH
19312: LD_INT 0
19314: PPUSH
19315: CALL_OW 49
19319: GO 19301
19321: POP
19322: POP
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
19323: LD_ADDR_VAR 0 1
19327: PUSH
19328: LD_INT 22
19330: PUSH
19331: LD_EXP 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: PPUSH
19343: CALL_OW 69
19347: ST_TO_ADDR
// if pom > 0 then
19348: LD_VAR 0 1
19352: PUSH
19353: LD_INT 0
19355: GREATER
19356: IFFALSE 19397
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19358: LD_ADDR_VAR 0 3
19362: PUSH
19363: LD_VAR 0 1
19367: PUSH
19368: LD_INT 1
19370: ARRAY
19371: PPUSH
19372: CALL_OW 250
19376: PUSH
19377: LD_VAR 0 1
19381: PUSH
19382: LD_INT 1
19384: ARRAY
19385: PPUSH
19386: CALL_OW 251
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: ST_TO_ADDR
19395: GO 19412
// souradnice = [ 102 , 125 ] ;
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: LD_INT 102
19404: PUSH
19405: LD_INT 125
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19412: LD_INT 35
19414: PPUSH
19415: CALL_OW 67
// mcm1 = McMove ( 1 , Ar_utok3_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive ] ) ;
19419: LD_ADDR_LOC 37
19423: PUSH
19424: LD_INT 1
19426: PPUSH
19427: LD_EXP 14
19431: PPUSH
19432: LD_INT 128
19434: PUSH
19435: LD_INT 91
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 128
19444: PUSH
19445: LD_INT 108
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 126
19454: PUSH
19455: LD_INT 121
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 120
19464: PUSH
19465: LD_INT 131
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_VAR 0 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: PPUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 6
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PPUSH
19494: CALL_OW 398
19498: ST_TO_ADDR
// end ;
19499: PPOPN 3
19501: END
// every 0 0$5 trigger ( not IsOK ( A2_bu1 ) ) and ( not IsOK ( A2_bu2 ) ) do var pom , i ; var souradnice ;
19502: LD_INT 112
19504: PPUSH
19505: CALL_OW 302
19509: NOT
19510: PUSH
19511: LD_INT 63
19513: PPUSH
19514: CALL_OW 302
19518: NOT
19519: AND
19520: IFFALSE 19754
19522: GO 19524
19524: DISABLE
19525: LD_INT 0
19527: PPUSH
19528: PPUSH
19529: PPUSH
// begin for i in Ar_utok2_LIST do
19530: LD_ADDR_VAR 0 2
19534: PUSH
19535: LD_EXP 13
19539: PUSH
19540: FOR_IN
19541: IFFALSE 19560
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19543: LD_VAR 0 2
19547: PPUSH
19548: LD_INT 25
19550: PPUSH
19551: LD_INT 0
19553: PPUSH
19554: CALL_OW 49
19558: GO 19540
19560: POP
19561: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
19562: LD_ADDR_VAR 0 1
19566: PUSH
19567: LD_INT 22
19569: PUSH
19570: LD_EXP 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 21
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PPUSH
19593: CALL_OW 69
19597: ST_TO_ADDR
// if pom > 0 then
19598: LD_VAR 0 1
19602: PUSH
19603: LD_INT 0
19605: GREATER
19606: IFFALSE 19647
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19608: LD_ADDR_VAR 0 3
19612: PUSH
19613: LD_VAR 0 1
19617: PUSH
19618: LD_INT 1
19620: ARRAY
19621: PPUSH
19622: CALL_OW 250
19626: PUSH
19627: LD_VAR 0 1
19631: PUSH
19632: LD_INT 1
19634: ARRAY
19635: PPUSH
19636: CALL_OW 251
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: ST_TO_ADDR
19645: GO 19662
// souradnice = [ 39 , 16 ] ;
19647: LD_ADDR_VAR 0 3
19651: PUSH
19652: LD_INT 39
19654: PUSH
19655: LD_INT 16
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: ST_TO_ADDR
// mcm2 = McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19662: LD_ADDR_LOC 38
19666: PUSH
19667: LD_INT 1
19669: PPUSH
19670: LD_EXP 13
19674: PPUSH
19675: LD_INT 128
19677: PUSH
19678: LD_INT 91
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 128
19687: PUSH
19688: LD_INT 108
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 126
19697: PUSH
19698: LD_INT 121
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 120
19707: PUSH
19708: LD_INT 131
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_VAR 0 3
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: PPUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 6
19732: PUSH
19733: LD_INT 5
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: PPUSH
19741: CALL_OW 398
19745: ST_TO_ADDR
// utok3_over = true ;
19746: LD_ADDR_LOC 29
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// end ;
19754: PPOPN 3
19756: END
// every 1 1$30 trigger A2_dobyta do var pom , i , pom1 ;
19757: LD_EXP 28
19761: IFFALSE 20026
19763: GO 19765
19765: DISABLE
19766: LD_INT 0
19768: PPUSH
19769: PPUSH
19770: PPUSH
// begin wait ( 2 2$0 ) ;
19771: LD_INT 4200
19773: PPUSH
19774: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19778: LD_ADDR_VAR 0 1
19782: PUSH
19783: LD_INT 22
19785: PUSH
19786: LD_EXP 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 34
19800: PUSH
19801: LD_INT 12
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 34
19810: PUSH
19811: LD_INT 32
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PPUSH
19827: CALL_OW 69
19831: ST_TO_ADDR
// for i in Ar_utok4_LIST do
19832: LD_ADDR_VAR 0 2
19836: PUSH
19837: LD_EXP 15
19841: PUSH
19842: FOR_IN
19843: IFFALSE 19862
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19845: LD_VAR 0 2
19849: PPUSH
19850: LD_INT 25
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: CALL_OW 49
19860: GO 19842
19862: POP
19863: POP
// if pom > 0 then
19864: LD_VAR 0 1
19868: PUSH
19869: LD_INT 0
19871: GREATER
19872: IFFALSE 19946
// begin ComAgressiveMove ( Ar_utok4_LIST , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
19874: LD_EXP 15
19878: PPUSH
19879: LD_VAR 0 1
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: PPUSH
19888: CALL_OW 250
19892: PPUSH
19893: LD_VAR 0 1
19897: PUSH
19898: LD_INT 1
19900: ARRAY
19901: PPUSH
19902: CALL_OW 251
19906: PPUSH
19907: CALL_OW 114
// AddComAttackUnit ( Ar_utok4_LIST , pom [ 1 ] ) ;
19911: LD_EXP 15
19915: PPUSH
19916: LD_VAR 0 1
19920: PUSH
19921: LD_INT 1
19923: ARRAY
19924: PPUSH
19925: CALL_OW 175
// AddComAgressiveMove ( Ar_utok4_LIST , 59 , 7 ) ;
19929: LD_EXP 15
19933: PPUSH
19934: LD_INT 59
19936: PPUSH
19937: LD_INT 7
19939: PPUSH
19940: CALL_OW 174
// end else
19944: GO 20018
// McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 123 ] ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19946: LD_INT 1
19948: PPUSH
19949: LD_EXP 13
19953: PPUSH
19954: LD_INT 128
19956: PUSH
19957: LD_INT 91
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 128
19966: PUSH
19967: LD_INT 108
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 126
19976: PUSH
19977: LD_INT 121
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 120
19986: PUSH
19987: LD_INT 123
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: PPUSH
20000: LD_INT 1
20002: PUSH
20003: LD_INT 6
20005: PUSH
20006: LD_INT 5
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: PPUSH
20014: CALL_OW 398
// utok4_over = true ;
20018: LD_ADDR_LOC 30
20022: PUSH
20023: LD_INT 1
20025: ST_TO_ADDR
// end ;
20026: PPOPN 3
20028: END
// every 0 0$1 trigger FilterUnitsInArea ( zoufalost1 , [ [ f_side , Arabi ] ] ) = 0 do var i ;
20029: LD_INT 35
20031: PPUSH
20032: LD_INT 22
20034: PUSH
20035: LD_EXP 3
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: PPUSH
20047: CALL_OW 70
20051: PUSH
20052: LD_INT 0
20054: EQUAL
20055: IFFALSE 20148
20057: GO 20059
20059: DISABLE
20060: LD_INT 0
20062: PPUSH
// begin for i in Ar_backa_LIST do
20063: LD_ADDR_VAR 0 1
20067: PUSH
20068: LD_EXP 17
20072: PUSH
20073: FOR_IN
20074: IFFALSE 20093
// PlaceUnitArea ( i , backa1 , false ) ;
20076: LD_VAR 0 1
20080: PPUSH
20081: LD_INT 36
20083: PPUSH
20084: LD_INT 0
20086: PPUSH
20087: CALL_OW 49
20091: GO 20073
20093: POP
20094: POP
// McMove ( 1 , Ar_backa_LIST , [ [ 59 , 7 ] , [ 76 , 11 ] , [ 95 , 19 ] ] , [ mc_move_agressive ] ) ;
20095: LD_INT 1
20097: PPUSH
20098: LD_EXP 17
20102: PPUSH
20103: LD_INT 59
20105: PUSH
20106: LD_INT 7
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 76
20115: PUSH
20116: LD_INT 11
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 95
20125: PUSH
20126: LD_INT 19
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: LIST
20137: PPUSH
20138: LD_INT 6
20140: PUSH
20141: EMPTY
20142: LIST
20143: PPUSH
20144: CALL_OW 398
// end ;
20148: PPOPN 1
20150: END
// every 1 1$0 trigger utok4_over do var pom , i , pom1 ;
20151: LD_LOC 30
20155: IFFALSE 20378
20157: GO 20159
20159: DISABLE
20160: LD_INT 0
20162: PPUSH
20163: PPUSH
20164: PPUSH
// begin wait ( last_attack_wait [ difficulty ] ) ;
20165: LD_EXP 54
20169: PUSH
20170: LD_OWVAR 67
20174: ARRAY
20175: PPUSH
20176: CALL_OW 67
// wait ( 2 2$0 ) ;
20180: LD_INT 4200
20182: PPUSH
20183: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20187: LD_ADDR_VAR 0 1
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_EXP 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 34
20209: PUSH
20210: LD_INT 12
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 34
20219: PUSH
20220: LD_INT 32
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// for i in Ar_utoklast_LIST do
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_EXP 16
20250: PUSH
20251: FOR_IN
20252: IFFALSE 20271
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20254: LD_VAR 0 2
20258: PPUSH
20259: LD_INT 25
20261: PPUSH
20262: LD_INT 0
20264: PPUSH
20265: CALL_OW 49
20269: GO 20251
20271: POP
20272: POP
// for i in pom do
20273: LD_ADDR_VAR 0 2
20277: PUSH
20278: LD_VAR 0 1
20282: PUSH
20283: FOR_IN
20284: IFFALSE 20331
// begin AddComAgressiveMove ( Ar_utoklast_LIST , GetX ( i ) , GetY ( i ) ) ;
20286: LD_EXP 16
20290: PPUSH
20291: LD_VAR 0 2
20295: PPUSH
20296: CALL_OW 250
20300: PPUSH
20301: LD_VAR 0 2
20305: PPUSH
20306: CALL_OW 251
20310: PPUSH
20311: CALL_OW 174
// AddComAttackUnit ( Ar_utoklast_LIST , i ) ;
20315: LD_EXP 16
20319: PPUSH
20320: LD_VAR 0 2
20324: PPUSH
20325: CALL_OW 175
// end ;
20329: GO 20283
20331: POP
20332: POP
// AddComAgressiveMove ( Ar_utoklast_LIST , 18 , 17 ) ;
20333: LD_EXP 16
20337: PPUSH
20338: LD_INT 18
20340: PPUSH
20341: LD_INT 17
20343: PPUSH
20344: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 72 , 10 ) ;
20348: LD_EXP 16
20352: PPUSH
20353: LD_INT 72
20355: PPUSH
20356: LD_INT 10
20358: PPUSH
20359: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 116 , 126 ) ;
20363: LD_EXP 16
20367: PPUSH
20368: LD_INT 116
20370: PPUSH
20371: LD_INT 126
20373: PPUSH
20374: CALL_OW 174
// end ;
20378: PPOPN 3
20380: END
// every 1 1$0 trigger A1_dobyta do var pom ;
20381: LD_EXP 27
20385: IFFALSE 20812
20387: GO 20389
20389: DISABLE
20390: LD_INT 0
20392: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
20393: LD_ADDR_VAR 0 1
20397: PUSH
20398: LD_INT 3
20400: PPUSH
20401: LD_INT 22
20403: PUSH
20404: LD_EXP 1
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: PPUSH
20416: CALL_OW 70
20420: ST_TO_ADDR
// wait ( protiutok1 [ difficulty ] ) ;
20421: LD_EXP 47
20425: PUSH
20426: LD_OWVAR 67
20430: ARRAY
20431: PPUSH
20432: CALL_OW 67
// ComMoveXY ( [ A2_kam1 , A2_kam2 , A2_kam3 ] , 66 , 110 ) ;
20436: LD_INT 86
20438: PUSH
20439: LD_INT 85
20441: PUSH
20442: LD_INT 84
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: PPUSH
20450: LD_INT 66
20452: PPUSH
20453: LD_INT 110
20455: PPUSH
20456: CALL_OW 111
// AddComAttackUnit ( A2_kam1 , NearestUnitToXY ( pom , 102 , 112 ) ) ;
20460: LD_INT 86
20462: PPUSH
20463: LD_VAR 0 1
20467: PPUSH
20468: LD_INT 102
20470: PPUSH
20471: LD_INT 112
20473: PPUSH
20474: CALL_OW 73
20478: PPUSH
20479: CALL_OW 175
// AddComAttackUnit ( A2_kam1 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20483: LD_INT 86
20485: PPUSH
20486: LD_VAR 0 1
20490: PUSH
20491: LD_INT 1
20493: PPUSH
20494: LD_VAR 0 1
20498: PUSH
20499: LD_INT 0
20501: PLUS
20502: PPUSH
20503: CALL_OW 12
20507: ARRAY
20508: PPUSH
20509: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , NearestUnitToXY ( pom , 90 , 121 ) ) ;
20513: LD_INT 85
20515: PPUSH
20516: LD_VAR 0 1
20520: PPUSH
20521: LD_INT 90
20523: PPUSH
20524: LD_INT 121
20526: PPUSH
20527: CALL_OW 73
20531: PPUSH
20532: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20536: LD_INT 85
20538: PPUSH
20539: LD_VAR 0 1
20543: PUSH
20544: LD_INT 1
20546: PPUSH
20547: LD_VAR 0 1
20551: PUSH
20552: LD_INT 0
20554: PLUS
20555: PPUSH
20556: CALL_OW 12
20560: ARRAY
20561: PPUSH
20562: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , A1_dep ) ;
20566: LD_INT 84
20568: PPUSH
20569: LD_INT 4
20571: PPUSH
20572: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20576: LD_INT 84
20578: PPUSH
20579: LD_VAR 0 1
20583: PUSH
20584: LD_INT 1
20586: PPUSH
20587: LD_VAR 0 1
20591: PUSH
20592: LD_INT 0
20594: PLUS
20595: PPUSH
20596: CALL_OW 12
20600: ARRAY
20601: PPUSH
20602: CALL_OW 175
// McMove ( 1 , [ A2_op1 , A2_op2 , A2_op3 ] , [ [ 44 , 25 ] , [ 50 , 54 ] , [ 92 , 101 ] , [ 112 , 124 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20606: LD_INT 1
20608: PPUSH
20609: LD_INT 89
20611: PUSH
20612: LD_INT 90
20614: PUSH
20615: LD_INT 91
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: LIST
20622: PPUSH
20623: LD_INT 44
20625: PUSH
20626: LD_INT 25
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 50
20635: PUSH
20636: LD_INT 54
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 92
20645: PUSH
20646: LD_INT 101
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 112
20655: PUSH
20656: LD_INT 124
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: PPUSH
20669: LD_INT 6
20671: PUSH
20672: LD_INT 5
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PPUSH
20679: CALL_OW 398
// ComMoveXY ( A2_mor3 , 91 , 128 ) ;
20683: LD_INT 92
20685: PPUSH
20686: LD_INT 91
20688: PPUSH
20689: LD_INT 128
20691: PPUSH
20692: CALL_OW 111
// for i in CREATE_AR_PROTIOFENZIVU_LIST do
20696: LD_ADDR_LOC 33
20700: PUSH
20701: LD_EXP 9
20705: PUSH
20706: FOR_IN
20707: IFFALSE 20726
// PlaceUnitArea ( i , protiEN , false ) ;
20709: LD_LOC 33
20713: PPUSH
20714: LD_INT 21
20716: PPUSH
20717: LD_INT 0
20719: PPUSH
20720: CALL_OW 49
20724: GO 20706
20726: POP
20727: POP
// McMove ( 1 , CREATE_AR_PROTIOFENZIVU_LIST , [ [ 49 , 31 ] , [ 55 , 76 ] , [ 100 , 109 ] , [ 122 , 132 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20728: LD_INT 1
20730: PPUSH
20731: LD_EXP 9
20735: PPUSH
20736: LD_INT 49
20738: PUSH
20739: LD_INT 31
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 55
20748: PUSH
20749: LD_INT 76
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 100
20758: PUSH
20759: LD_INT 109
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 122
20768: PUSH
20769: LD_INT 132
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: PPUSH
20782: LD_INT 6
20784: PUSH
20785: LD_INT 5
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PPUSH
20792: CALL_OW 398
// utok1 := true ;
20796: LD_ADDR_LOC 27
20800: PUSH
20801: LD_INT 1
20803: ST_TO_ADDR
// utok1_over = true ;
20804: LD_ADDR_LOC 28
20808: PUSH
20809: LD_INT 1
20811: ST_TO_ADDR
// end ;
20812: PPOPN 1
20814: END
// every 0 0$17 trigger oposoldier = - 1 do
20815: LD_EXP 45
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: EQUAL
20824: IFFALSE 20901
20826: GO 20828
20828: DISABLE
// begin if not See ( You , A3_solop ) then
20829: LD_EXP 1
20833: PPUSH
20834: LD_INT 102
20836: PPUSH
20837: CALL_OW 292
20841: NOT
20842: IFFALSE 20901
// begin SetClass ( A3_solop , class_mechanic ) ;
20844: LD_INT 102
20846: PPUSH
20847: LD_INT 3
20849: PPUSH
20850: CALL_OW 336
// RemoveUnit ( A3_solop ) ;
20854: LD_INT 102
20856: PPUSH
20857: CALL_OW 64
// pom := create_auto_pro_solopa ;
20861: LD_ADDR_LOC 34
20865: PUSH
20866: CALL 8319 0 0
20870: ST_TO_ADDR
// PlaceHumanInUnit ( A3_solop , pom ) ;
20871: LD_INT 102
20873: PPUSH
20874: LD_LOC 34
20878: PPUSH
20879: CALL_OW 52
// PlaceUnitXY ( pom , 111 , 16 , false ) ;
20883: LD_LOC 34
20887: PPUSH
20888: LD_INT 111
20890: PPUSH
20891: LD_INT 16
20893: PPUSH
20894: LD_INT 0
20896: PPUSH
20897: CALL_OW 48
// end ; end ;
20901: END
// every 1 1$0 trigger oposoldier = 1 marked 999 do
20902: LD_EXP 45
20906: PUSH
20907: LD_INT 1
20909: EQUAL
20910: IFFALSE 20944
20912: GO 20914
20914: DISABLE
// begin ComMoveXY ( A3_solop , 127 , 89 ) ;
20915: LD_INT 102
20917: PPUSH
20918: LD_INT 127
20920: PPUSH
20921: LD_INT 89
20923: PPUSH
20924: CALL_OW 111
// ComMoveXY ( OpoMike , 127 , 89 ) ;
20928: LD_INT 103
20930: PPUSH
20931: LD_INT 127
20933: PPUSH
20934: LD_INT 89
20936: PPUSH
20937: CALL_OW 111
// enable ( 997 ) ;
20941: LD_INT 997
20943: ENABLE_MARKED
// end ;
20944: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baziny ) marked 997 do
20945: LD_INT 102
20947: PPUSH
20948: LD_INT 12
20950: PPUSH
20951: CALL_OW 308
20955: IFFALSE 20970
20957: GO 20959
20959: DISABLE
// begin wait ( 0 0$5 ) ;
20960: LD_INT 175
20962: PPUSH
20963: CALL_OW 67
// enable ( 998 ) ;
20967: LD_INT 998
20969: ENABLE_MARKED
// end ;
20970: END
// every 0 0$5 trigger oposoldier = 1 marked 998 do
20971: LD_EXP 45
20975: PUSH
20976: LD_INT 1
20978: EQUAL
20979: IFFALSE 21197
20981: GO 20983
20983: DISABLE
// begin pom = FilterUnitsInArea ( Baziny , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
20984: LD_ADDR_LOC 34
20988: PUSH
20989: LD_INT 12
20991: PPUSH
20992: LD_INT 21
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 33
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 2
21014: PUSH
21015: LD_INT 34
21017: PUSH
21018: LD_INT 12
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 34
21027: PUSH
21028: LD_INT 32
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: LD_INT 59
21045: PUSH
21046: EMPTY
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 70
21063: ST_TO_ADDR
// if pom > 0 then
21064: LD_LOC 34
21068: PUSH
21069: LD_INT 0
21071: GREATER
21072: IFFALSE 21174
// begin ComEnterUnit ( A3_solop , pom [ 1 ] ) ;
21074: LD_INT 102
21076: PPUSH
21077: LD_LOC 34
21081: PUSH
21082: LD_INT 1
21084: ARRAY
21085: PPUSH
21086: CALL_OW 120
// AddComMoveXY ( A3_solop , 165 , 92 ) ;
21090: LD_INT 102
21092: PPUSH
21093: LD_INT 165
21095: PPUSH
21096: LD_INT 92
21098: PPUSH
21099: CALL_OW 171
// AddComMoveXY ( OpoMike , 165 , 92 ) ;
21103: LD_INT 103
21105: PPUSH
21106: LD_INT 165
21108: PPUSH
21109: LD_INT 92
21111: PPUSH
21112: CALL_OW 171
// oposoldier = 2 ;
21116: LD_ADDR_EXP 45
21120: PUSH
21121: LD_INT 2
21123: ST_TO_ADDR
// wait ( 0 0$15 ) ;
21124: LD_INT 525
21126: PPUSH
21127: CALL_OW 67
// if not IsInUnit ( A3_solop ) then
21131: LD_INT 102
21133: PPUSH
21134: CALL_OW 310
21138: NOT
21139: IFFALSE 21172
// begin ComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21141: LD_INT 102
21143: PUSH
21144: LD_INT 103
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PPUSH
21151: LD_INT 116
21153: PPUSH
21154: LD_INT 23
21156: PPUSH
21157: CALL_OW 111
// enable ( 996 ) ;
21161: LD_INT 996
21163: ENABLE_MARKED
// oposoldier = 1 ;
21164: LD_ADDR_EXP 45
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// end ; end else
21172: GO 21197
// begin AddComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21174: LD_INT 102
21176: PUSH
21177: LD_INT 103
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: LD_INT 116
21186: PPUSH
21187: LD_INT 23
21189: PPUSH
21190: CALL_OW 171
// enable ( 996 ) ;
21194: LD_INT 996
21196: ENABLE_MARKED
// end ; end ;
21197: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baze_zpet ) marked 996 do
21198: LD_INT 102
21200: PPUSH
21201: LD_INT 34
21203: PPUSH
21204: CALL_OW 308
21208: IFFALSE 21216
21210: GO 21212
21212: DISABLE
// begin enable ( 999 ) ;
21213: LD_INT 999
21215: ENABLE_MARKED
// end ;
21216: END
// every 0 0$3 trigger oposoldier = 2 do
21217: LD_EXP 45
21221: PUSH
21222: LD_INT 2
21224: EQUAL
21225: IFFALSE 21356
21227: GO 21229
21229: DISABLE
// begin pom = FilterUnitsInArea ( SolopEx , [ [ f_side , Arabi2 ] ] ) ;
21230: LD_ADDR_LOC 34
21234: PUSH
21235: LD_INT 13
21237: PPUSH
21238: LD_INT 22
21240: PUSH
21241: LD_EXP 4
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: PPUSH
21253: CALL_OW 70
21257: ST_TO_ADDR
// if pom > 0 then
21258: LD_LOC 34
21262: PUSH
21263: LD_INT 0
21265: GREATER
21266: IFFALSE 21355
// for i in pom do
21268: LD_ADDR_LOC 33
21272: PUSH
21273: LD_LOC 34
21277: PUSH
21278: FOR_IN
21279: IFFALSE 21353
// begin if GetType ( i ) = unit_vehicle then
21281: LD_LOC 33
21285: PPUSH
21286: CALL_OW 247
21290: PUSH
21291: LD_INT 2
21293: EQUAL
21294: IFFALSE 21342
// if IsDrivenBy ( i ) = A3_solop then
21296: LD_LOC 33
21300: PPUSH
21301: CALL_OW 311
21305: PUSH
21306: LD_INT 102
21308: EQUAL
21309: IFFALSE 21342
// begin oposoldier = 3 ;
21311: LD_ADDR_EXP 45
21315: PUSH
21316: LD_INT 3
21318: ST_TO_ADDR
// dialog_kamery ;
21319: CALL 5349 0 0
// RemoveUnit ( IsInUnit ( A3_solop ) ) ;
21323: LD_INT 102
21325: PPUSH
21326: CALL_OW 310
21330: PPUSH
21331: CALL_OW 64
// RemoveUnit ( OpoMike ) ;
21335: LD_INT 103
21337: PPUSH
21338: CALL_OW 64
// end ; RemoveUnit ( i ) ;
21342: LD_LOC 33
21346: PPUSH
21347: CALL_OW 64
// end ;
21351: GO 21278
21353: POP
21354: POP
// enable ;
21355: ENABLE
// end ;
21356: END
// every 0 0$1 do
21357: GO 21359
21359: DISABLE
// begin pom = FilterUnitsInArea ( Calibre1 , [ [ f_side , You ] ] ) ;
21360: LD_ADDR_LOC 34
21364: PUSH
21365: LD_INT 14
21367: PPUSH
21368: LD_INT 22
21370: PUSH
21371: LD_EXP 1
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: PPUSH
21383: CALL_OW 70
21387: ST_TO_ADDR
// if pom > 0 then
21388: LD_LOC 34
21392: PUSH
21393: LD_INT 0
21395: GREATER
21396: IFFALSE 21588
// begin while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21398: LD_INT 15
21400: PPUSH
21401: LD_INT 22
21403: PUSH
21404: LD_EXP 1
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: PPUSH
21416: CALL_OW 70
21420: PUSH
21421: LD_INT 0
21423: EQUAL
21424: IFFALSE 21435
// wait ( 0 0$0.5 ) ;
21426: LD_INT 18
21428: PPUSH
21429: CALL_OW 67
21433: GO 21398
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21435: LD_INT 82
21437: PUSH
21438: LD_INT 83
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PPUSH
21445: CALL_OW 134
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 33 , 55 ) ;
21449: LD_INT 82
21451: PUSH
21452: LD_INT 83
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: LD_INT 33
21461: PPUSH
21462: LD_INT 55
21464: PPUSH
21465: CALL_OW 171
// AddComWalk ( [ A2_zas1 , A2_zas2 ] ) ;
21469: LD_INT 82
21471: PUSH
21472: LD_INT 83
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PPUSH
21479: CALL_OW 198
// AddComPlaceRemoteCharge ( A2_zas1 , 39 , 15 , 0 ) ;
21483: LD_INT 82
21485: PPUSH
21486: LD_INT 39
21488: PPUSH
21489: LD_INT 15
21491: PPUSH
21492: LD_INT 0
21494: PPUSH
21495: CALL_OW 193
// AddComPlaceRemoteCharge ( A2_zas2 , 37 , 14 , 0 ) ;
21499: LD_INT 83
21501: PPUSH
21502: LD_INT 37
21504: PPUSH
21505: LD_INT 14
21507: PPUSH
21508: LD_INT 0
21510: PPUSH
21511: CALL_OW 193
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 25 , 13 ) ;
21515: LD_INT 82
21517: PUSH
21518: LD_INT 83
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PPUSH
21525: LD_INT 25
21527: PPUSH
21528: LD_INT 13
21530: PPUSH
21531: CALL_OW 171
// while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21535: LD_INT 15
21537: PPUSH
21538: LD_INT 22
21540: PUSH
21541: LD_EXP 1
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: PPUSH
21553: CALL_OW 70
21557: PUSH
21558: LD_INT 0
21560: EQUAL
21561: IFFALSE 21572
// wait ( 0 0$0.5 ) ;
21563: LD_INT 18
21565: PPUSH
21566: CALL_OW 67
21570: GO 21535
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21572: LD_INT 82
21574: PUSH
21575: LD_INT 83
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PPUSH
21582: CALL_OW 134
// end else
21586: GO 21589
// enable ;
21588: ENABLE
// end ;
21589: END
// every 0 0$1 do
21590: GO 21592
21592: DISABLE
// begin pom = FilterUnitsInArea ( Calibre2 , [ [ f_side , You ] ] ) ;
21593: LD_ADDR_LOC 34
21597: PUSH
21598: LD_INT 18
21600: PPUSH
21601: LD_INT 22
21603: PUSH
21604: LD_EXP 1
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: PPUSH
21616: CALL_OW 70
21620: ST_TO_ADDR
// if pom > 0 then
21621: LD_LOC 34
21625: PUSH
21626: LD_INT 0
21628: GREATER
21629: IFFALSE 21794
// begin while FilterUnitsInArea ( Boom3 , [ [ f_side , You ] ] ) = 0 do
21631: LD_INT 19
21633: PPUSH
21634: LD_INT 22
21636: PUSH
21637: LD_EXP 1
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: EMPTY
21647: LIST
21648: PPUSH
21649: CALL_OW 70
21653: PUSH
21654: LD_INT 0
21656: EQUAL
21657: IFFALSE 21668
// wait ( 0 0$0.5 ) ;
21659: LD_INT 18
21661: PPUSH
21662: CALL_OW 67
21666: GO 21631
// ComFireExplosives ( A3_zas1 ) ;
21668: LD_INT 101
21670: PPUSH
21671: CALL_OW 134
// bum2 := true ;
21675: LD_ADDR_EXP 46
21679: PUSH
21680: LD_INT 1
21682: ST_TO_ADDR
// AddComWalk ( A3_zas1 ) ;
21683: LD_INT 101
21685: PPUSH
21686: CALL_OW 198
// pom = FilterUnitsInArea ( Abase3 , [ [ f_side , You ] ] ) ;
21690: LD_ADDR_LOC 34
21694: PUSH
21695: LD_INT 17
21697: PPUSH
21698: LD_INT 22
21700: PUSH
21701: LD_EXP 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: PPUSH
21713: CALL_OW 70
21717: ST_TO_ADDR
// if pom > 0 then
21718: LD_LOC 34
21722: PUSH
21723: LD_INT 0
21725: GREATER
21726: IFFALSE 21762
// begin AddComPlaceDelayedCharge ( A3_zas1 , 0 , 0 , pom [ 1 ] ) ;
21728: LD_INT 101
21730: PPUSH
21731: LD_INT 0
21733: PPUSH
21734: LD_INT 0
21736: PPUSH
21737: LD_LOC 34
21741: PUSH
21742: LD_INT 1
21744: ARRAY
21745: PPUSH
21746: CALL_OW 192
// AddComEnterUnit ( A3_zas1 , A3_bar ) ;
21750: LD_INT 101
21752: PPUSH
21753: LD_INT 40
21755: PPUSH
21756: CALL_OW 180
// end else
21760: GO 21792
// begin AddComPlaceRemoteCharge ( A3_zas1 , 102 , 19 , 0 ) ;
21762: LD_INT 101
21764: PPUSH
21765: LD_INT 102
21767: PPUSH
21768: LD_INT 19
21770: PPUSH
21771: LD_INT 0
21773: PPUSH
21774: CALL_OW 193
// AddComMoveXY ( A3_zas1 , 99 , 3 ) ;
21778: LD_INT 101
21780: PPUSH
21781: LD_INT 99
21783: PPUSH
21784: LD_INT 3
21786: PPUSH
21787: CALL_OW 171
// enable ;
21791: ENABLE
// end ; end else
21792: GO 21795
// enable ;
21794: ENABLE
// end ;
21795: END
// every 0 0$2 do
21796: GO 21798
21798: DISABLE
// begin pom = [ ] ;
21799: LD_ADDR_LOC 34
21803: PUSH
21804: EMPTY
21805: ST_TO_ADDR
// pom1 = [ ] ;
21806: LD_ADDR_LOC 35
21810: PUSH
21811: EMPTY
21812: ST_TO_ADDR
// for i in Veze_2 do
21813: LD_ADDR_LOC 33
21817: PUSH
21818: LD_LOC 31
21822: PUSH
21823: FOR_IN
21824: IFFALSE 21859
// if GetLives ( i ) <> 1000 then
21826: LD_LOC 33
21830: PPUSH
21831: CALL_OW 256
21835: PUSH
21836: LD_INT 1000
21838: NONEQUAL
21839: IFFALSE 21857
// pom = pom ^ i ;
21841: LD_ADDR_LOC 34
21845: PUSH
21846: LD_LOC 34
21850: PUSH
21851: LD_LOC 33
21855: ADD
21856: ST_TO_ADDR
21857: GO 21823
21859: POP
21860: POP
// for i in Opr_2 do
21861: LD_ADDR_LOC 33
21865: PUSH
21866: LD_LOC 32
21870: PUSH
21871: FOR_IN
21872: IFFALSE 21903
// if IsOK ( i ) then
21874: LD_LOC 33
21878: PPUSH
21879: CALL_OW 302
21883: IFFALSE 21901
// pom1 = pom1 ^ i ;
21885: LD_ADDR_LOC 35
21889: PUSH
21890: LD_LOC 35
21894: PUSH
21895: LD_LOC 33
21899: ADD
21900: ST_TO_ADDR
21901: GO 21871
21903: POP
21904: POP
// if pom1 > 0 and pom > 0 then
21905: LD_LOC 35
21909: PUSH
21910: LD_INT 0
21912: GREATER
21913: PUSH
21914: LD_LOC 34
21918: PUSH
21919: LD_INT 0
21921: GREATER
21922: AND
21923: IFFALSE 22081
// begin if pom + 0 <= pom1 + 0 then
21925: LD_LOC 34
21929: PUSH
21930: LD_INT 0
21932: PLUS
21933: PUSH
21934: LD_LOC 35
21938: PUSH
21939: LD_INT 0
21941: PLUS
21942: LESSEQUAL
21943: IFFALSE 22014
// for i := 1 to pom + 0 do
21945: LD_ADDR_LOC 33
21949: PUSH
21950: DOUBLE
21951: LD_INT 1
21953: DEC
21954: ST_TO_ADDR
21955: LD_LOC 34
21959: PUSH
21960: LD_INT 0
21962: PLUS
21963: PUSH
21964: FOR_TO
21965: IFFALSE 22010
// begin AddComExitBuilding ( pom1 [ i ] ) ;
21967: LD_LOC 35
21971: PUSH
21972: LD_LOC 33
21976: ARRAY
21977: PPUSH
21978: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
21982: LD_LOC 35
21986: PUSH
21987: LD_LOC 33
21991: ARRAY
21992: PPUSH
21993: LD_LOC 34
21997: PUSH
21998: LD_LOC 33
22002: ARRAY
22003: PPUSH
22004: CALL_OW 190
// end else
22008: GO 21964
22010: POP
22011: POP
22012: GO 22081
// for i := 1 to pom1 + 0 do
22014: LD_ADDR_LOC 33
22018: PUSH
22019: DOUBLE
22020: LD_INT 1
22022: DEC
22023: ST_TO_ADDR
22024: LD_LOC 35
22028: PUSH
22029: LD_INT 0
22031: PLUS
22032: PUSH
22033: FOR_TO
22034: IFFALSE 22079
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22036: LD_LOC 35
22040: PUSH
22041: LD_LOC 33
22045: ARRAY
22046: PPUSH
22047: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22051: LD_LOC 35
22055: PUSH
22056: LD_LOC 33
22060: ARRAY
22061: PPUSH
22062: LD_LOC 34
22066: PUSH
22067: LD_LOC 33
22071: ARRAY
22072: PPUSH
22073: CALL_OW 190
// end ;
22077: GO 22033
22079: POP
22080: POP
// end ; enable ;
22081: ENABLE
// end ;
22082: END
// every 0 0$1 trigger FilterUnitsInArea ( Create2 , [ [ f_side , You ] ] ) > 0 do
22083: LD_INT 22
22085: PPUSH
22086: LD_INT 22
22088: PUSH
22089: LD_EXP 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: EMPTY
22099: LIST
22100: PPUSH
22101: CALL_OW 70
22105: PUSH
22106: LD_INT 0
22108: GREATER
22109: IFFALSE 22706
22111: GO 22113
22113: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 1 ] , 28 , 39 , false ) ;
22114: LD_EXP 10
22118: PUSH
22119: LD_INT 1
22121: ARRAY
22122: PPUSH
22123: LD_INT 28
22125: PPUSH
22126: LD_INT 39
22128: PPUSH
22129: LD_INT 0
22131: PPUSH
22132: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 2 ] , 23 , 38 , false ) ;
22136: LD_EXP 10
22140: PUSH
22141: LD_INT 2
22143: ARRAY
22144: PPUSH
22145: LD_INT 23
22147: PPUSH
22148: LD_INT 38
22150: PPUSH
22151: LD_INT 0
22153: PPUSH
22154: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 3 ] , 32 , 20 , false ) ;
22158: LD_EXP 10
22162: PUSH
22163: LD_INT 3
22165: ARRAY
22166: PPUSH
22167: LD_INT 32
22169: PPUSH
22170: LD_INT 20
22172: PPUSH
22173: LD_INT 0
22175: PPUSH
22176: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 4 ] , 32 , 17 , false ) ;
22180: LD_EXP 10
22184: PUSH
22185: LD_INT 4
22187: ARRAY
22188: PPUSH
22189: LD_INT 32
22191: PPUSH
22192: LD_INT 17
22194: PPUSH
22195: LD_INT 0
22197: PPUSH
22198: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 5 ] , 38 , 8 , false ) ;
22202: LD_EXP 10
22206: PUSH
22207: LD_INT 5
22209: ARRAY
22210: PPUSH
22211: LD_INT 38
22213: PPUSH
22214: LD_INT 8
22216: PPUSH
22217: LD_INT 0
22219: PPUSH
22220: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 6 ] , 40 , 7 , false ) ;
22224: LD_EXP 10
22228: PUSH
22229: LD_INT 6
22231: ARRAY
22232: PPUSH
22233: LD_INT 40
22235: PPUSH
22236: LD_INT 7
22238: PPUSH
22239: LD_INT 0
22241: PPUSH
22242: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 7 ] , 24 , 8 , false ) ;
22246: LD_EXP 10
22250: PUSH
22251: LD_INT 7
22253: ARRAY
22254: PPUSH
22255: LD_INT 24
22257: PPUSH
22258: LD_INT 8
22260: PPUSH
22261: LD_INT 0
22263: PPUSH
22264: CALL_OW 48
// if difficulty > 1 then
22268: LD_OWVAR 67
22272: PUSH
22273: LD_INT 1
22275: GREATER
22276: IFFALSE 22302
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 8 ] , 26 , 10 , false ) else
22278: LD_EXP 10
22282: PUSH
22283: LD_INT 8
22285: ARRAY
22286: PPUSH
22287: LD_INT 26
22289: PPUSH
22290: LD_INT 10
22292: PPUSH
22293: LD_INT 0
22295: PPUSH
22296: CALL_OW 48
22300: GO 22315
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] ) ;
22302: LD_EXP 10
22306: PUSH
22307: LD_INT 8
22309: ARRAY
22310: PPUSH
22311: CALL_OW 65
// if difficulty > 2 then
22315: LD_OWVAR 67
22319: PUSH
22320: LD_INT 2
22322: GREATER
22323: IFFALSE 22349
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 9 ] , 25 , 11 , false ) else
22325: LD_EXP 10
22329: PUSH
22330: LD_INT 9
22332: ARRAY
22333: PPUSH
22334: LD_INT 25
22336: PPUSH
22337: LD_INT 11
22339: PPUSH
22340: LD_INT 0
22342: PPUSH
22343: CALL_OW 48
22347: GO 22362
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] ) ;
22349: LD_EXP 10
22353: PUSH
22354: LD_INT 9
22356: ARRAY
22357: PPUSH
22358: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 10 ] , 24 , 10 , false ) ;
22362: LD_EXP 10
22366: PUSH
22367: LD_INT 10
22369: ARRAY
22370: PPUSH
22371: LD_INT 24
22373: PPUSH
22374: LD_INT 10
22376: PPUSH
22377: LD_INT 0
22379: PPUSH
22380: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 11 ] , 31 , 9 , false ) ;
22384: LD_EXP 10
22388: PUSH
22389: LD_INT 11
22391: ARRAY
22392: PPUSH
22393: LD_INT 31
22395: PPUSH
22396: LD_INT 9
22398: PPUSH
22399: LD_INT 0
22401: PPUSH
22402: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 12 ] , 33 , 9 , false ) ;
22406: LD_EXP 10
22410: PUSH
22411: LD_INT 12
22413: ARRAY
22414: PPUSH
22415: LD_INT 33
22417: PPUSH
22418: LD_INT 9
22420: PPUSH
22421: LD_INT 0
22423: PPUSH
22424: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 13 ] , 38 , 40 , false ) ;
22428: LD_EXP 10
22432: PUSH
22433: LD_INT 13
22435: ARRAY
22436: PPUSH
22437: LD_INT 38
22439: PPUSH
22440: LD_INT 40
22442: PPUSH
22443: LD_INT 0
22445: PPUSH
22446: CALL_OW 48
// if difficulty > 1 then
22450: LD_OWVAR 67
22454: PUSH
22455: LD_INT 1
22457: GREATER
22458: IFFALSE 22484
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 14 ] , 36 , 39 , false ) else
22460: LD_EXP 10
22464: PUSH
22465: LD_INT 14
22467: ARRAY
22468: PPUSH
22469: LD_INT 36
22471: PPUSH
22472: LD_INT 39
22474: PPUSH
22475: LD_INT 0
22477: PPUSH
22478: CALL_OW 48
22482: GO 22497
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 14 ] ) ;
22484: LD_EXP 10
22488: PUSH
22489: LD_INT 14
22491: ARRAY
22492: PPUSH
22493: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 15 ] , 21 , 12 , false ) ;
22497: LD_EXP 10
22501: PUSH
22502: LD_INT 15
22504: ARRAY
22505: PPUSH
22506: LD_INT 21
22508: PPUSH
22509: LD_INT 12
22511: PPUSH
22512: LD_INT 0
22514: PPUSH
22515: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 16 ] , 21 , 13 , false ) ;
22519: LD_EXP 10
22523: PUSH
22524: LD_INT 16
22526: ARRAY
22527: PPUSH
22528: LD_INT 21
22530: PPUSH
22531: LD_INT 13
22533: PPUSH
22534: LD_INT 0
22536: PPUSH
22537: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 17 ] , 23 , 19 , false ) ;
22541: LD_EXP 10
22545: PUSH
22546: LD_INT 17
22548: ARRAY
22549: PPUSH
22550: LD_INT 23
22552: PPUSH
22553: LD_INT 19
22555: PPUSH
22556: LD_INT 0
22558: PPUSH
22559: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 18 ] , 23 , 20 , false ) ;
22563: LD_EXP 10
22567: PUSH
22568: LD_INT 18
22570: ARRAY
22571: PPUSH
22572: LD_INT 23
22574: PPUSH
22575: LD_INT 20
22577: PPUSH
22578: LD_INT 0
22580: PPUSH
22581: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 19 ] , 21 , 19 , false ) ;
22585: LD_EXP 10
22589: PUSH
22590: LD_INT 19
22592: ARRAY
22593: PPUSH
22594: LD_INT 21
22596: PPUSH
22597: LD_INT 19
22599: PPUSH
22600: LD_INT 0
22602: PPUSH
22603: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 20 ] , 24 , 20 , false ) ;
22607: LD_EXP 10
22611: PUSH
22612: LD_INT 20
22614: ARRAY
22615: PPUSH
22616: LD_INT 24
22618: PPUSH
22619: LD_INT 20
22621: PPUSH
22622: LD_INT 0
22624: PPUSH
22625: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 22 ] , 21 , 34 , false ) ;
22629: LD_EXP 10
22633: PUSH
22634: LD_INT 22
22636: ARRAY
22637: PPUSH
22638: LD_INT 21
22640: PPUSH
22641: LD_INT 34
22643: PPUSH
22644: LD_INT 0
22646: PPUSH
22647: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 21 ] , 27 , 17 , false ) ;
22651: LD_EXP 10
22655: PUSH
22656: LD_INT 21
22658: ARRAY
22659: PPUSH
22660: LD_INT 27
22662: PPUSH
22663: LD_INT 17
22665: PPUSH
22666: LD_INT 0
22668: PPUSH
22669: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 23 ] , 28 , 21 , false ) ;
22673: LD_EXP 10
22677: PUSH
22678: LD_INT 23
22680: ARRAY
22681: PPUSH
22682: LD_INT 28
22684: PPUSH
22685: LD_INT 21
22687: PPUSH
22688: LD_INT 0
22690: PPUSH
22691: CALL_OW 48
// wait ( 0 0$1 ) ;
22695: LD_INT 35
22697: PPUSH
22698: CALL_OW 67
// uklid_arabu2 ;
22702: CALL 17661 0 0
// end ;
22706: END
// every 0 0$1 trigger FilterUnitsInArea ( Create3 , [ [ f_side , You ] ] ) > 0 do
22707: LD_INT 23
22709: PPUSH
22710: LD_INT 22
22712: PUSH
22713: LD_EXP 1
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: PPUSH
22725: CALL_OW 70
22729: PUSH
22730: LD_INT 0
22732: GREATER
22733: IFFALSE 23123
22735: GO 22737
22737: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 1 ] , 103 , 11 , false ) ;
22738: LD_EXP 11
22742: PUSH
22743: LD_INT 1
22745: ARRAY
22746: PPUSH
22747: LD_INT 103
22749: PPUSH
22750: LD_INT 11
22752: PPUSH
22753: LD_INT 0
22755: PPUSH
22756: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 2 ] , 108 , 18 , false ) ;
22760: LD_EXP 11
22764: PUSH
22765: LD_INT 2
22767: ARRAY
22768: PPUSH
22769: LD_INT 108
22771: PPUSH
22772: LD_INT 18
22774: PPUSH
22775: LD_INT 0
22777: PPUSH
22778: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 3 ] , 107 , 21 , false ) ;
22782: LD_EXP 11
22786: PUSH
22787: LD_INT 3
22789: ARRAY
22790: PPUSH
22791: LD_INT 107
22793: PPUSH
22794: LD_INT 21
22796: PPUSH
22797: LD_INT 0
22799: PPUSH
22800: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 4 ] , 118 , 11 , false ) ;
22804: LD_EXP 11
22808: PUSH
22809: LD_INT 4
22811: ARRAY
22812: PPUSH
22813: LD_INT 118
22815: PPUSH
22816: LD_INT 11
22818: PPUSH
22819: LD_INT 0
22821: PPUSH
22822: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 5 ] , 118 , 12 , false ) ;
22826: LD_EXP 11
22830: PUSH
22831: LD_INT 5
22833: ARRAY
22834: PPUSH
22835: LD_INT 118
22837: PPUSH
22838: LD_INT 12
22840: PPUSH
22841: LD_INT 0
22843: PPUSH
22844: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 6 ] , 119 , 13 , false ) ;
22848: LD_EXP 11
22852: PUSH
22853: LD_INT 6
22855: ARRAY
22856: PPUSH
22857: LD_INT 119
22859: PPUSH
22860: LD_INT 13
22862: PPUSH
22863: LD_INT 0
22865: PPUSH
22866: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 7 ] , 115 , 9 , false ) ;
22870: LD_EXP 11
22874: PUSH
22875: LD_INT 7
22877: ARRAY
22878: PPUSH
22879: LD_INT 115
22881: PPUSH
22882: LD_INT 9
22884: PPUSH
22885: LD_INT 0
22887: PPUSH
22888: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 8 ] , 119 , 18 , false ) ;
22892: LD_EXP 11
22896: PUSH
22897: LD_INT 8
22899: ARRAY
22900: PPUSH
22901: LD_INT 119
22903: PPUSH
22904: LD_INT 18
22906: PPUSH
22907: LD_INT 0
22909: PPUSH
22910: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 9 ] , 118 , 18 , false ) ;
22914: LD_EXP 11
22918: PUSH
22919: LD_INT 9
22921: ARRAY
22922: PPUSH
22923: LD_INT 118
22925: PPUSH
22926: LD_INT 18
22928: PPUSH
22929: LD_INT 0
22931: PPUSH
22932: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 10 ] , 118 , 17 , false ) ;
22936: LD_EXP 11
22940: PUSH
22941: LD_INT 10
22943: ARRAY
22944: PPUSH
22945: LD_INT 118
22947: PPUSH
22948: LD_INT 17
22950: PPUSH
22951: LD_INT 0
22953: PPUSH
22954: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 11 ] , 118 , 16 , false ) ;
22958: LD_EXP 11
22962: PUSH
22963: LD_INT 11
22965: ARRAY
22966: PPUSH
22967: LD_INT 118
22969: PPUSH
22970: LD_INT 16
22972: PPUSH
22973: LD_INT 0
22975: PPUSH
22976: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 12 ] , 111 , 13 , false ) ;
22980: LD_EXP 11
22984: PUSH
22985: LD_INT 12
22987: ARRAY
22988: PPUSH
22989: LD_INT 111
22991: PPUSH
22992: LD_INT 13
22994: PPUSH
22995: LD_INT 0
22997: PPUSH
22998: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 13 ] , 112 , 12 , false ) ;
23002: LD_EXP 11
23006: PUSH
23007: LD_INT 13
23009: ARRAY
23010: PPUSH
23011: LD_INT 112
23013: PPUSH
23014: LD_INT 12
23016: PPUSH
23017: LD_INT 0
23019: PPUSH
23020: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 14 ] , 113 , 25 , false ) ;
23024: LD_EXP 11
23028: PUSH
23029: LD_INT 14
23031: ARRAY
23032: PPUSH
23033: LD_INT 113
23035: PPUSH
23036: LD_INT 25
23038: PPUSH
23039: LD_INT 0
23041: PPUSH
23042: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 15 ] , 113 , 27 , false ) ;
23046: LD_EXP 11
23050: PUSH
23051: LD_INT 15
23053: ARRAY
23054: PPUSH
23055: LD_INT 113
23057: PPUSH
23058: LD_INT 27
23060: PPUSH
23061: LD_INT 0
23063: PPUSH
23064: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 16 ] , 114 , 9 , false ) ;
23068: LD_EXP 11
23072: PUSH
23073: LD_INT 16
23075: ARRAY
23076: PPUSH
23077: LD_INT 114
23079: PPUSH
23080: LD_INT 9
23082: PPUSH
23083: LD_INT 0
23085: PPUSH
23086: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 17 ] , 114 , 10 , false ) ;
23090: LD_EXP 11
23094: PUSH
23095: LD_INT 17
23097: ARRAY
23098: PPUSH
23099: LD_INT 114
23101: PPUSH
23102: LD_INT 10
23104: PPUSH
23105: LD_INT 0
23107: PPUSH
23108: CALL_OW 48
// wait ( 0 0$1 ) ;
23112: LD_INT 35
23114: PPUSH
23115: CALL_OW 67
// uklid_arabu3 ;
23119: CALL 18841 0 0
// end ;
23123: END
// export function uprav_zivoty_arabskych_budov ; begin
23124: LD_INT 0
23126: PPUSH
// SetLives ( A1_bu3 , zivoty_prvni_baze [ difficulty ] ) ;
23127: LD_INT 11
23129: PPUSH
23130: LD_EXP 52
23134: PUSH
23135: LD_OWVAR 67
23139: ARRAY
23140: PPUSH
23141: CALL_OW 234
// SetLives ( A1_bu1 , zivoty_prvni_baze [ difficulty ] ) ;
23145: LD_INT 9
23147: PPUSH
23148: LD_EXP 52
23152: PUSH
23153: LD_OWVAR 67
23157: ARRAY
23158: PPUSH
23159: CALL_OW 234
// SetLives ( A1_au2 , zivoty_prvni_baze [ difficulty ] ) ;
23163: LD_INT 109
23165: PPUSH
23166: LD_EXP 52
23170: PUSH
23171: LD_OWVAR 67
23175: ARRAY
23176: PPUSH
23177: CALL_OW 234
// SetLives ( A1_vo1 , zivoty_prvni_baze [ difficulty ] ) ;
23181: LD_INT 72
23183: PPUSH
23184: LD_EXP 52
23188: PUSH
23189: LD_OWVAR 67
23193: ARRAY
23194: PPUSH
23195: CALL_OW 234
// end ;
23199: LD_VAR 0 1
23203: RET
// every 0 0$1 trigger FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) do var pom ;
23204: LD_INT 26
23206: PPUSH
23207: LD_INT 22
23209: PUSH
23210: LD_EXP 1
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: PPUSH
23222: CALL_OW 70
23226: IFFALSE 23295
23228: GO 23230
23230: DISABLE
23231: LD_INT 0
23233: PPUSH
// begin pom = FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) ;
23234: LD_ADDR_VAR 0 1
23238: PUSH
23239: LD_INT 26
23241: PPUSH
23242: LD_INT 22
23244: PUSH
23245: LD_EXP 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: PPUSH
23257: CALL_OW 70
23261: ST_TO_ADDR
// if pom > 0 then
23262: LD_VAR 0 1
23266: PUSH
23267: LD_INT 0
23269: GREATER
23270: IFFALSE 23295
// AddComAttackUnit ( [ bumm1 , bumm2 ] , pom [ 1 ] ) ;
23272: LD_INT 114
23274: PUSH
23275: LD_INT 115
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PPUSH
23282: LD_VAR 0 1
23286: PUSH
23287: LD_INT 1
23289: ARRAY
23290: PPUSH
23291: CALL_OW 175
// end ;
23295: PPOPN 1
23297: END
// every 0 0$1 trigger GetLives ( A2_bu1 ) < 700 do var pom , i ; var atakers ;
23298: LD_INT 112
23300: PPUSH
23301: CALL_OW 256
23305: PUSH
23306: LD_INT 700
23308: LESS
23309: IFFALSE 23557
23311: GO 23313
23313: DISABLE
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
23318: PPUSH
// begin if not ( IsOK ( sui1 ) or IsOK ( sui3 ) ) then
23319: LD_INT 118
23321: PPUSH
23322: CALL_OW 302
23326: PUSH
23327: LD_INT 121
23329: PPUSH
23330: CALL_OW 302
23334: OR
23335: NOT
23336: IFFALSE 23340
// exit ;
23338: GO 23557
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23340: LD_ADDR_VAR 0 1
23344: PUSH
23345: LD_INT 22
23347: PUSH
23348: LD_EXP 1
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: LD_INT 21
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 21
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PPUSH
23389: CALL_OW 69
23393: ST_TO_ADDR
// for i in pom do
23394: LD_ADDR_VAR 0 2
23398: PUSH
23399: LD_VAR 0 1
23403: PUSH
23404: FOR_IN
23405: IFFALSE 23440
// if Attacks ( i ) = A2_bu1 then
23407: LD_VAR 0 2
23411: PPUSH
23412: CALL_OW 320
23416: PUSH
23417: LD_INT 112
23419: EQUAL
23420: IFFALSE 23438
// atakers = atakers ^ i ;
23422: LD_ADDR_VAR 0 3
23426: PUSH
23427: LD_VAR 0 3
23431: PUSH
23432: LD_VAR 0 2
23436: ADD
23437: ST_TO_ADDR
23438: GO 23404
23440: POP
23441: POP
// if atakers > 0 then
23442: LD_VAR 0 3
23446: PUSH
23447: LD_INT 0
23449: GREATER
23450: IFFALSE 23477
// AddComAttackUnit ( [ sui1 , sui3 ] , atakers [ 1 ] ) else
23452: LD_INT 118
23454: PUSH
23455: LD_INT 121
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PPUSH
23462: LD_VAR 0 3
23466: PUSH
23467: LD_INT 1
23469: ARRAY
23470: PPUSH
23471: CALL_OW 175
23475: GO 23538
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_INT 37
23484: PPUSH
23485: LD_INT 22
23487: PUSH
23488: LD_EXP 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: EMPTY
23498: LIST
23499: PPUSH
23500: CALL_OW 70
23504: ST_TO_ADDR
// if pom > 0 then
23505: LD_VAR 0 1
23509: PUSH
23510: LD_INT 0
23512: GREATER
23513: IFFALSE 23538
// AddComAttackUnit ( [ sui1 , sui3 ] , pom [ 1 ] ) ;
23515: LD_INT 118
23517: PUSH
23518: LD_INT 121
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PPUSH
23525: LD_VAR 0 1
23529: PUSH
23530: LD_INT 1
23532: ARRAY
23533: PPUSH
23534: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23538: LD_INT 118
23540: PPUSH
23541: CALL_OW 302
23545: PUSH
23546: LD_INT 121
23548: PPUSH
23549: CALL_OW 302
23553: OR
23554: IFFALSE 23557
// enable ;
23556: ENABLE
// end ;
23557: PPOPN 3
23559: END
// every 0 0$2 trigger GetLives ( A2_bu3 ) < 700 do var pom , i ; var atakers ;
23560: LD_INT 47
23562: PPUSH
23563: CALL_OW 256
23567: PUSH
23568: LD_INT 700
23570: LESS
23571: IFFALSE 23819
23573: GO 23575
23575: DISABLE
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
// begin if not ( IsOK ( sui2 ) or IsOK ( sui4 ) ) then
23581: LD_INT 119
23583: PPUSH
23584: CALL_OW 302
23588: PUSH
23589: LD_INT 120
23591: PPUSH
23592: CALL_OW 302
23596: OR
23597: NOT
23598: IFFALSE 23602
// exit ;
23600: GO 23819
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23602: LD_ADDR_VAR 0 1
23606: PUSH
23607: LD_INT 22
23609: PUSH
23610: LD_EXP 1
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: LD_INT 21
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 21
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PPUSH
23651: CALL_OW 69
23655: ST_TO_ADDR
// for i in pom do
23656: LD_ADDR_VAR 0 2
23660: PUSH
23661: LD_VAR 0 1
23665: PUSH
23666: FOR_IN
23667: IFFALSE 23702
// if Attacks ( i ) = A2_bu3 then
23669: LD_VAR 0 2
23673: PPUSH
23674: CALL_OW 320
23678: PUSH
23679: LD_INT 47
23681: EQUAL
23682: IFFALSE 23700
// atakers = atakers ^ i ;
23684: LD_ADDR_VAR 0 3
23688: PUSH
23689: LD_VAR 0 3
23693: PUSH
23694: LD_VAR 0 2
23698: ADD
23699: ST_TO_ADDR
23700: GO 23666
23702: POP
23703: POP
// if atakers > 0 then
23704: LD_VAR 0 3
23708: PUSH
23709: LD_INT 0
23711: GREATER
23712: IFFALSE 23739
// AddComAttackUnit ( [ sui2 , sui4 ] , atakers [ 1 ] ) else
23714: LD_INT 119
23716: PUSH
23717: LD_INT 120
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PPUSH
23724: LD_VAR 0 3
23728: PUSH
23729: LD_INT 1
23731: ARRAY
23732: PPUSH
23733: CALL_OW 175
23737: GO 23800
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23739: LD_ADDR_VAR 0 1
23743: PUSH
23744: LD_INT 37
23746: PPUSH
23747: LD_INT 22
23749: PUSH
23750: LD_EXP 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: PPUSH
23762: CALL_OW 70
23766: ST_TO_ADDR
// if pom > 1 then
23767: LD_VAR 0 1
23771: PUSH
23772: LD_INT 1
23774: GREATER
23775: IFFALSE 23800
// AddComAttackUnit ( [ sui2 , sui4 ] , pom1 [ 2 ] ) ;
23777: LD_INT 119
23779: PUSH
23780: LD_INT 120
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: LD_LOC 35
23791: PUSH
23792: LD_INT 2
23794: ARRAY
23795: PPUSH
23796: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23800: LD_INT 118
23802: PPUSH
23803: CALL_OW 302
23807: PUSH
23808: LD_INT 121
23810: PPUSH
23811: CALL_OW 302
23815: OR
23816: IFFALSE 23819
// enable ;
23818: ENABLE
// end ;
23819: PPOPN 3
23821: END
// on McDefendReturnsUnit ( mcid , un ) do var a ;
23822: LD_INT 0
23824: PPUSH
// begin a = JEDNOTKY_BAZE_2_LIST ;
23825: LD_ADDR_VAR 0 3
23829: PUSH
23830: LD_EXP 10
23834: ST_TO_ADDR
// case un of a [ 1 ] :
23835: LD_VAR 0 2
23839: PUSH
23840: LD_VAR 0 3
23844: PUSH
23845: LD_INT 1
23847: ARRAY
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23869
23854: POP
// posli_unit ( un , 5 ) ; a [ 2 ] :
23855: LD_VAR 0 2
23859: PPUSH
23860: LD_INT 5
23862: PPUSH
23863: CALL 24371 0 2
23867: GO 24368
23869: LD_VAR 0 3
23873: PUSH
23874: LD_INT 2
23876: ARRAY
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 23898
23883: POP
// posli_unit ( un , 6 ) ; a [ 3 ] :
23884: LD_VAR 0 2
23888: PPUSH
23889: LD_INT 6
23891: PPUSH
23892: CALL 24371 0 2
23896: GO 24368
23898: LD_VAR 0 3
23902: PUSH
23903: LD_INT 3
23905: ARRAY
23906: DOUBLE
23907: EQUAL
23908: IFTRUE 23912
23910: GO 23927
23912: POP
// posli_unit ( un , 7 ) ; a [ 3 ] :
23913: LD_VAR 0 2
23917: PPUSH
23918: LD_INT 7
23920: PPUSH
23921: CALL 24371 0 2
23925: GO 24368
23927: LD_VAR 0 3
23931: PUSH
23932: LD_INT 3
23934: ARRAY
23935: DOUBLE
23936: EQUAL
23937: IFTRUE 23941
23939: GO 23956
23941: POP
// posli_unit ( un , 8 ) ; a [ 3 ] :
23942: LD_VAR 0 2
23946: PPUSH
23947: LD_INT 8
23949: PPUSH
23950: CALL 24371 0 2
23954: GO 24368
23956: LD_VAR 0 3
23960: PUSH
23961: LD_INT 3
23963: ARRAY
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 23985
23970: POP
// posli_unit ( un , 9 ) ; a [ 3 ] :
23971: LD_VAR 0 2
23975: PPUSH
23976: LD_INT 9
23978: PPUSH
23979: CALL 24371 0 2
23983: GO 24368
23985: LD_VAR 0 3
23989: PUSH
23990: LD_INT 3
23992: ARRAY
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24014
23999: POP
// posli_unit ( un , 10 ) ; a [ 17 ] :
24000: LD_VAR 0 2
24004: PPUSH
24005: LD_INT 10
24007: PPUSH
24008: CALL 24371 0 2
24012: GO 24368
24014: LD_VAR 0 3
24018: PUSH
24019: LD_INT 17
24021: ARRAY
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24043
24028: POP
// posli_unit ( un , 11 ) ; a [ 18 ] :
24029: LD_VAR 0 2
24033: PPUSH
24034: LD_INT 11
24036: PPUSH
24037: CALL 24371 0 2
24041: GO 24368
24043: LD_VAR 0 3
24047: PUSH
24048: LD_INT 18
24050: ARRAY
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24072
24057: POP
// posli_unit ( un , 12 ) ; a [ 16 ] :
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_INT 12
24065: PPUSH
24066: CALL 24371 0 2
24070: GO 24368
24072: LD_VAR 0 3
24076: PUSH
24077: LD_INT 16
24079: ARRAY
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24101
24086: POP
// posli_unit ( un , 13 ) ; a [ 7 ] :
24087: LD_VAR 0 2
24091: PPUSH
24092: LD_INT 13
24094: PPUSH
24095: CALL 24371 0 2
24099: GO 24368
24101: LD_VAR 0 3
24105: PUSH
24106: LD_INT 7
24108: ARRAY
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24130
24115: POP
// posli_unit ( un , 14 ) ; a [ 8 ] :
24116: LD_VAR 0 2
24120: PPUSH
24121: LD_INT 14
24123: PPUSH
24124: CALL 24371 0 2
24128: GO 24368
24130: LD_VAR 0 3
24134: PUSH
24135: LD_INT 8
24137: ARRAY
24138: DOUBLE
24139: EQUAL
24140: IFTRUE 24144
24142: GO 24159
24144: POP
// posli_unit ( un , 15 ) ; a [ 9 ] :
24145: LD_VAR 0 2
24149: PPUSH
24150: LD_INT 15
24152: PPUSH
24153: CALL 24371 0 2
24157: GO 24368
24159: LD_VAR 0 3
24163: PUSH
24164: LD_INT 9
24166: ARRAY
24167: DOUBLE
24168: EQUAL
24169: IFTRUE 24173
24171: GO 24188
24173: POP
// posli_unit ( un , 16 ) ; a [ 10 ] :
24174: LD_VAR 0 2
24178: PPUSH
24179: LD_INT 16
24181: PPUSH
24182: CALL 24371 0 2
24186: GO 24368
24188: LD_VAR 0 3
24192: PUSH
24193: LD_INT 10
24195: ARRAY
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24217
24202: POP
// posli_unit ( un , 17 ) ; a [ 21 ] :
24203: LD_VAR 0 2
24207: PPUSH
24208: LD_INT 17
24210: PPUSH
24211: CALL 24371 0 2
24215: GO 24368
24217: LD_VAR 0 3
24221: PUSH
24222: LD_INT 21
24224: ARRAY
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24246
24231: POP
// posli_unit ( un , 18 ) ; a [ 22 ] :
24232: LD_VAR 0 2
24236: PPUSH
24237: LD_INT 18
24239: PPUSH
24240: CALL 24371 0 2
24244: GO 24368
24246: LD_VAR 0 3
24250: PUSH
24251: LD_INT 22
24253: ARRAY
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24275
24260: POP
// posli_unit ( un , 19 ) ; A2_nau2 :
24261: LD_VAR 0 2
24265: PPUSH
24266: LD_INT 19
24268: PPUSH
24269: CALL 24371 0 2
24273: GO 24368
24275: LD_INT 108
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24298
24283: POP
// posli_unit2 ( un , 3 ) ; A2_nau1 :
24284: LD_VAR 0 2
24288: PPUSH
24289: LD_INT 3
24291: PPUSH
24292: CALL 24478 0 2
24296: GO 24368
24298: LD_INT 107
24300: DOUBLE
24301: EQUAL
24302: IFTRUE 24306
24304: GO 24321
24306: POP
// posli_unit2 ( un , 4 ) ; MDopka1 :
24307: LD_VAR 0 2
24311: PPUSH
24312: LD_INT 4
24314: PPUSH
24315: CALL 24478 0 2
24319: GO 24368
24321: LD_INT 117
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24344
24329: POP
// posli_unit2 ( un , 1 ) ; MDopka2 :
24330: LD_VAR 0 2
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: CALL 24478 0 2
24342: GO 24368
24344: LD_INT 116
24346: DOUBLE
24347: EQUAL
24348: IFTRUE 24352
24350: GO 24367
24352: POP
// posli_unit2 ( un , 2 ) ; end ;
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_INT 2
24360: PPUSH
24361: CALL 24478 0 2
24365: GO 24368
24367: POP
// end ;
24368: PPOPN 3
24370: END
// function posli_unit ( un , cz ) ; var a ; begin
24371: LD_INT 0
24373: PPUSH
24374: PPUSH
// a = uklizejici_mista [ cz ] ;
24375: LD_ADDR_VAR 0 4
24379: PUSH
24380: LD_LOC 36
24384: PUSH
24385: LD_VAR 0 2
24389: ARRAY
24390: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24391: LD_ADDR_OWVAR 48
24395: PUSH
24396: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24398: PUSH
24399: LD_VAR 0 4
24403: PUSH
24404: LD_VAR 0 1
24408: PUSH
24409: LD_VAR 0 2
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: ST_TO_ADDR
// wait ( 3 ) ;
24420: LD_INT 3
24422: PPUSH
24423: CALL_OW 67
// ComEnterUnit ( un , a [ 1 ] ) ;
24427: LD_VAR 0 1
24431: PPUSH
24432: LD_VAR 0 4
24436: PUSH
24437: LD_INT 1
24439: ARRAY
24440: PPUSH
24441: CALL_OW 120
// if a [ 2 ] then
24445: LD_VAR 0 4
24449: PUSH
24450: LD_INT 2
24452: ARRAY
24453: IFFALSE 24473
// AddComChangeProfession ( un , a [ 3 ] ) ;
24455: LD_VAR 0 1
24459: PPUSH
24460: LD_VAR 0 4
24464: PUSH
24465: LD_INT 3
24467: ARRAY
24468: PPUSH
24469: CALL_OW 183
// end ;
24473: LD_VAR 0 3
24477: RET
// function posli_unit2 ( un , cz ) ; var a ; begin
24478: LD_INT 0
24480: PPUSH
24481: PPUSH
// a = uklizejici_mista [ cz ] ;
24482: LD_ADDR_VAR 0 4
24486: PUSH
24487: LD_LOC 36
24491: PUSH
24492: LD_VAR 0 2
24496: ARRAY
24497: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24498: LD_ADDR_OWVAR 48
24502: PUSH
24503: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24505: PUSH
24506: LD_VAR 0 4
24510: PUSH
24511: LD_VAR 0 1
24515: PUSH
24516: LD_VAR 0 2
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: ST_TO_ADDR
// ComMoveXY ( un , a [ 1 ] , a [ 2 ] ) ;
24527: LD_VAR 0 1
24531: PPUSH
24532: LD_VAR 0 4
24536: PUSH
24537: LD_INT 1
24539: ARRAY
24540: PPUSH
24541: LD_VAR 0 4
24545: PUSH
24546: LD_INT 2
24548: ARRAY
24549: PPUSH
24550: CALL_OW 111
// end ;
24554: LD_VAR 0 3
24558: RET
// on McDone ( makro , stat ) do begin case makro of 1 :
24559: LD_VAR 0 1
24563: PUSH
24564: LD_INT 1
24566: DOUBLE
24567: EQUAL
24568: IFTRUE 24572
24570: GO 24582
24572: POP
// zabijeni_1_baze ( 1 ) ; 2 :
24573: LD_INT 1
24575: PPUSH
24576: CALL 24605 0 1
24580: GO 24601
24582: LD_INT 2
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24600
24590: POP
// zabijeni_1_baze ( 2 ) ; end ;
24591: LD_INT 2
24593: PPUSH
24594: CALL 24605 0 1
24598: GO 24601
24600: POP
// enable ;
24601: ENABLE
// end ;
24602: PPOPN 2
24604: END
// function zabijeni_1_baze ( jj ) ; var pom , i ; var jedn ; begin
24605: LD_INT 0
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
// case jj of 1 :
24611: LD_VAR 0 1
24615: PUSH
24616: LD_INT 1
24618: DOUBLE
24619: EQUAL
24620: IFTRUE 24624
24622: GO 24637
24624: POP
// jedn = Ar_utok3_LIST ; 2 :
24625: LD_ADDR_VAR 0 5
24629: PUSH
24630: LD_EXP 14
24634: ST_TO_ADDR
24635: GO 24659
24637: LD_INT 2
24639: DOUBLE
24640: EQUAL
24641: IFTRUE 24645
24643: GO 24658
24645: POP
// jedn = Ar_utok2_LIST ; end ;
24646: LD_ADDR_VAR 0 5
24650: PUSH
24651: LD_EXP 13
24655: ST_TO_ADDR
24656: GO 24659
24658: POP
// for i in jedn do
24659: LD_ADDR_VAR 0 4
24663: PUSH
24664: LD_VAR 0 5
24668: PUSH
24669: FOR_IN
24670: IFFALSE 24710
// if GetClass ( i ) = class_engineer then
24672: LD_VAR 0 4
24676: PPUSH
24677: CALL_OW 257
24681: PUSH
24682: LD_INT 2
24684: EQUAL
24685: IFFALSE 24708
// if IsOK ( A1_dep ) then
24687: LD_INT 4
24689: PPUSH
24690: CALL_OW 302
24694: IFFALSE 24708
// ComEnterUnit ( i , A1_dep ) ;
24696: LD_VAR 0 4
24700: PPUSH
24701: LD_INT 4
24703: PPUSH
24704: CALL_OW 120
24708: GO 24669
24710: POP
24711: POP
// pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
24712: LD_ADDR_VAR 0 3
24716: PUSH
24717: LD_INT 3
24719: PPUSH
24720: LD_INT 22
24722: PUSH
24723: LD_EXP 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: PPUSH
24735: CALL_OW 70
24739: ST_TO_ADDR
// for i in pom do
24740: LD_ADDR_VAR 0 4
24744: PUSH
24745: LD_VAR 0 3
24749: PUSH
24750: FOR_IN
24751: IFFALSE 24769
// PriorityAttack ( Arabi , i ) ;
24753: LD_EXP 3
24757: PPUSH
24758: LD_VAR 0 4
24762: PPUSH
24763: CALL_OW 470
24767: GO 24750
24769: POP
24770: POP
// enable ( 995 ) ;
24771: LD_INT 995
24773: ENABLE_MARKED
// end ;
24774: LD_VAR 0 2
24778: RET
// every 0 0$1 marked 995 do var pom , pom1 ; var i ; var pomat ;
24779: GO 24781
24781: DISABLE
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
24786: PPUSH
24787: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_ready ] ] ] ] ) ;
24788: LD_ADDR_VAR 0 1
24792: PUSH
24793: LD_INT 3
24795: PPUSH
24796: LD_INT 22
24798: PUSH
24799: LD_EXP 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 21
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 21
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 53
24833: PUSH
24834: EMPTY
24835: LIST
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PPUSH
24850: CALL_OW 70
24854: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_INT 3
24862: PPUSH
24863: LD_INT 22
24865: PUSH
24866: LD_EXP 1
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: PPUSH
24878: CALL_OW 70
24882: ST_TO_ADDR
// pomat = pom1 diff pom ;
24883: LD_ADDR_VAR 0 4
24887: PUSH
24888: LD_VAR 0 2
24892: PUSH
24893: LD_VAR 0 1
24897: DIFF
24898: ST_TO_ADDR
// if pomat = 0 then
24899: LD_VAR 0 4
24903: PUSH
24904: LD_INT 0
24906: EQUAL
24907: IFFALSE 24942
// for i in pom1 do
24909: LD_ADDR_VAR 0 3
24913: PUSH
24914: LD_VAR 0 2
24918: PUSH
24919: FOR_IN
24920: IFFALSE 24938
// PriorityAttack ( Arabi , i ) else
24922: LD_EXP 3
24926: PPUSH
24927: LD_VAR 0 3
24931: PPUSH
24932: CALL_OW 470
24936: GO 24919
24938: POP
24939: POP
24940: GO 25004
// begin for i in pom do
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_VAR 0 1
24951: PUSH
24952: FOR_IN
24953: IFFALSE 24971
// PriorityAttack ( Arabi , i ) ;
24955: LD_EXP 3
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: CALL_OW 470
24969: GO 24952
24971: POP
24972: POP
// for i in pomat do
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_VAR 0 4
24982: PUSH
24983: FOR_IN
24984: IFFALSE 25002
// NormalAttack ( Arabi , i ) ;
24986: LD_EXP 3
24990: PPUSH
24991: LD_VAR 0 3
24995: PPUSH
24996: CALL_OW 472
25000: GO 24983
25002: POP
25003: POP
// end ; if pom <> 0 and FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) <> 0 then
25004: LD_VAR 0 1
25008: PUSH
25009: LD_INT 0
25011: NONEQUAL
25012: PUSH
25013: LD_INT 3
25015: PPUSH
25016: LD_INT 22
25018: PUSH
25019: LD_EXP 1
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: EMPTY
25029: LIST
25030: PPUSH
25031: CALL_OW 70
25035: PUSH
25036: LD_INT 0
25038: NONEQUAL
25039: AND
25040: IFFALSE 25043
// enable ;
25042: ENABLE
// end ; end_of_file
25043: PPOPN 4
25045: END
// export protiutok1 ; export Ar_levely ; export timelimit ; export max_bedny ; export lidi_other ; export zivoty_prvni_baze ; export utok_2_doba ; export last_attack_wait ; export medaile1 ; export medaile2 ; export Timecounter ; export function SET_DIFFICULTY ; var pom ; begin
25046: LD_INT 0
25048: PPUSH
25049: PPUSH
// protiutok1 = [ 10 10$0 , 7 7$30 , 5 5$30 ] ;
25050: LD_ADDR_EXP 47
25054: PUSH
25055: LD_INT 21000
25057: PUSH
25058: LD_INT 15750
25060: PUSH
25061: LD_INT 11550
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: ST_TO_ADDR
// utok_2_doba = [ 10 10$0 , 8 8$0 , 6 6$0 ] ;
25069: LD_ADDR_EXP 53
25073: PUSH
25074: LD_INT 21000
25076: PUSH
25077: LD_INT 16800
25079: PUSH
25080: LD_INT 12600
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: ST_TO_ADDR
// Ar_levely = [ 4 , 6 , 8 ] ;
25088: LD_ADDR_EXP 48
25092: PUSH
25093: LD_INT 4
25095: PUSH
25096: LD_INT 6
25098: PUSH
25099: LD_INT 8
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: ST_TO_ADDR
// timelimit = [ 160 160$0 , 150 150$0 , 140 140$0 ] ;
25107: LD_ADDR_EXP 49
25111: PUSH
25112: LD_INT 336000
25114: PUSH
25115: LD_INT 315000
25117: PUSH
25118: LD_INT 294000
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: ST_TO_ADDR
// medaile1 = [ 120 , 100 , 90 ] ;
25126: LD_ADDR_EXP 55
25130: PUSH
25131: LD_INT 120
25133: PUSH
25134: LD_INT 100
25136: PUSH
25137: LD_INT 90
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: LIST
25144: ST_TO_ADDR
// medaile2 = [ 100 , 90 , 80 ] ;
25145: LD_ADDR_EXP 56
25149: PUSH
25150: LD_INT 100
25152: PUSH
25153: LD_INT 90
25155: PUSH
25156: LD_INT 80
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: ST_TO_ADDR
// max_bedny = [ 55 , 40 , 30 ] ;
25164: LD_ADDR_EXP 50
25168: PUSH
25169: LD_INT 55
25171: PUSH
25172: LD_INT 40
25174: PUSH
25175: LD_INT 30
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: ST_TO_ADDR
// zivoty_prvni_baze = [ 700 , 850 , 1000 ] ;
25183: LD_ADDR_EXP 52
25187: PUSH
25188: LD_INT 700
25190: PUSH
25191: LD_INT 850
25193: PUSH
25194: LD_INT 1000
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: ST_TO_ADDR
// last_attack_wait = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
25202: LD_ADDR_EXP 54
25206: PUSH
25207: LD_INT 21000
25209: PUSH
25210: LD_INT 16800
25212: PUSH
25213: LD_INT 10500
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: LIST
25220: ST_TO_ADDR
// Timecounter = 0 ;
25221: LD_ADDR_EXP 57
25225: PUSH
25226: LD_INT 0
25228: ST_TO_ADDR
// end ;
25229: LD_VAR 0 1
25233: RET
// export cas ; every 0 0$10 do var pom ;
25234: GO 25236
25236: DISABLE
25237: LD_INT 0
25239: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
25240: LD_EXP 58
25244: PUSH
25245: LD_INT 3
25247: ARRAY
25248: PUSH
25249: LD_INT 10
25251: PLUS
25252: PUSH
25253: LD_INT 60
25255: EQUAL
25256: IFFALSE 25292
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
25258: LD_ADDR_EXP 58
25262: PUSH
25263: LD_EXP 58
25267: PUSH
25268: LD_INT 1
25270: ARRAY
25271: PUSH
25272: LD_INT 1
25274: PLUS
25275: PUSH
25276: LD_EXP 58
25280: PUSH
25281: LD_INT 2
25283: ARRAY
25284: ADD
25285: PUSH
25286: LD_INT 0
25288: ADD
25289: ST_TO_ADDR
25290: GO 25330
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
25292: LD_ADDR_EXP 58
25296: PUSH
25297: LD_EXP 58
25301: PUSH
25302: LD_INT 1
25304: ARRAY
25305: PUSH
25306: LD_EXP 58
25310: PUSH
25311: LD_INT 2
25313: ARRAY
25314: ADD
25315: PUSH
25316: LD_EXP 58
25320: PUSH
25321: LD_INT 3
25323: ARRAY
25324: PUSH
25325: LD_INT 10
25327: PLUS
25328: ADD
25329: ST_TO_ADDR
// debug_strings = [ cas ] ;
25330: LD_ADDR_OWVAR 48
25334: PUSH
25335: LD_EXP 58
25339: PUSH
25340: EMPTY
25341: LIST
25342: ST_TO_ADDR
// enable ;
25343: ENABLE
// end ;
25344: PPOPN 1
25346: END
// every 1 1$0 do
25347: GO 25349
25349: DISABLE
// begin Timecounter = Timecounter + 1 ;
25350: LD_ADDR_EXP 57
25354: PUSH
25355: LD_EXP 57
25359: PUSH
25360: LD_INT 1
25362: PLUS
25363: ST_TO_ADDR
// enable ;
25364: ENABLE
// end ; end_of_file
25365: END
// every 0 0$2 + 0 0$0.1 do
25366: GO 25368
25368: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
25369: LD_INT 22
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 25
25384: PUSH
25385: LD_INT 12
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 25
25394: PUSH
25395: LD_INT 16
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 25
25404: PUSH
25405: LD_INT 15
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 25
25414: PUSH
25415: LD_INT 17
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: PUSH
25438: LD_INT 22
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 21
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: LD_INT 25
25466: PUSH
25467: LD_INT 12
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 25
25476: PUSH
25477: LD_INT 16
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 25
25486: PUSH
25487: LD_INT 15
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 25
25496: PUSH
25497: LD_INT 17
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: GREATER
25525: IFFALSE 25536
// begin SetAchievement ( ACH_POTA ) ;
25527: LD_STRING ACH_POTA
25529: PPUSH
25530: CALL_OW 543
// exit ;
25534: GO 25537
// end ; enable ;
25536: ENABLE
// end ;
25537: END
