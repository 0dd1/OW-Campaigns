// export You , You2 , Arabi , Arabi2 ; export mregistry1 , MD1 ; export mregistry2 , MD2 ; starting begin RandomizeAll ;
   0: CALL_OW 11
// Randomize ;
   4: CALL_OW 10
// debug_strings := [ ] ;
   8: LD_ADDR_OWVAR 48
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
  15: LD_ADDR_EXP 58
  19: PUSH
  20: LD_INT 0
  22: PUSH
  23: LD_STRING :
  25: PUSH
  26: LD_INT 0
  28: PUSH
  29: EMPTY
  30: LIST
  31: LIST
  32: LIST
  33: ST_TO_ADDR
// InitUc ;
  34: CALL_OW 18
// InitHc ;
  38: CALL_OW 19
// InitVc ;
  42: CALL_OW 20
// You := 1 ;
  46: LD_ADDR_EXP 1
  50: PUSH
  51: LD_INT 1
  53: ST_TO_ADDR
// You2 := 4 ;
  54: LD_ADDR_EXP 2
  58: PUSH
  59: LD_INT 4
  61: ST_TO_ADDR
// Arabi := 2 ;
  62: LD_ADDR_EXP 3
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// Arabi2 := 5 ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_INT 5
  77: ST_TO_ADDR
// SetBName ( A1_dep , dammam ) ;
  78: LD_INT 4
  80: PPUSH
  81: LD_STRING dammam
  83: PPUSH
  84: CALL_OW 500
// SetBName ( A2_dep , jeddah ) ;
  88: LD_INT 46
  90: PPUSH
  91: LD_STRING jeddah
  93: PPUSH
  94: CALL_OW 500
// SetBName ( A3_dep , riyadh ) ;
  98: LD_INT 28
 100: PPUSH
 101: LD_STRING riyadh
 103: PPUSH
 104: CALL_OW 500
// disable ( 80 ) ;
 108: LD_INT 80
 110: DISABLE_MARKED
// SET_DIFFICULTY ;
 111: CALL 25191 0 0
// load_postavy ;
 115: CALL 1707 0 0
// dodej_skily ;
 119: CALL 8550 0 0
// mregistry1 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD1_guard ] , [ mc_reg_area_to_protect , MD1_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 123: LD_ADDR_EXP 5
 127: PUSH
 128: LD_EXP 3
 132: PPUSH
 133: LD_INT 2
 135: PUSH
 136: LD_INT 27
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 3
 145: PUSH
 146: LD_INT 28
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PUSH
 153: LD_INT 5
 155: PUSH
 156: LD_INT 175
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: LIST
 167: PPUSH
 168: CALL_OW 399
 172: ST_TO_ADDR
// mregistry2 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD2_guard ] , [ mc_reg_area_to_protect , MD2_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_EXP 3
 182: PPUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 32
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: PUSH
 193: LD_INT 3
 195: PUSH
 196: LD_INT 33
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: PUSH
 203: LD_INT 5
 205: PUSH
 206: LD_INT 175
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PPUSH
 218: CALL_OW 399
 222: ST_TO_ADDR
// MD1 = McDefend ( 2 , mregistry1 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu2 , A2_nau2 , MDopka1 , MDopka2 , A2_bu3 ] , [ [ mc_area_dont_leave , MD1_guard ] ] ) ;
 223: LD_ADDR_EXP 6
 227: PUSH
 228: LD_INT 2
 230: PPUSH
 231: LD_EXP 5
 235: PPUSH
 236: LD_INT 46
 238: PUSH
 239: LD_INT 61
 241: PUSH
 242: LD_INT 48
 244: PUSH
 245: LD_INT 50
 247: PUSH
 248: LD_INT 107
 250: PUSH
 251: LD_INT 63
 253: PUSH
 254: LD_INT 108
 256: PUSH
 257: LD_INT 117
 259: PUSH
 260: LD_INT 116
 262: PUSH
 263: LD_INT 47
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: PPUSH
 278: LD_INT 2
 280: PUSH
 281: LD_INT 27
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: EMPTY
 289: LIST
 290: PPUSH
 291: CALL_OW 401
 295: ST_TO_ADDR
// MD1 = McDefend ( 1 , mregistry2 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu3 , A2_bu6 , A2_bu5 , A2_nau2 , MDopka1 , MDopka2 ] , [ [ mc_area_dont_leave , MD2_guard ] ] ) ;
 296: LD_ADDR_EXP 6
 300: PUSH
 301: LD_INT 1
 303: PPUSH
 304: LD_EXP 7
 308: PPUSH
 309: LD_INT 46
 311: PUSH
 312: LD_INT 61
 314: PUSH
 315: LD_INT 48
 317: PUSH
 318: LD_INT 50
 320: PUSH
 321: LD_INT 107
 323: PUSH
 324: LD_INT 47
 326: PUSH
 327: LD_INT 59
 329: PUSH
 330: LD_INT 62
 332: PUSH
 333: LD_INT 108
 335: PUSH
 336: LD_INT 117
 338: PUSH
 339: LD_INT 116
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: PPUSH
 355: LD_INT 2
 357: PUSH
 358: LD_INT 32
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: PPUSH
 368: CALL_OW 401
 372: ST_TO_ADDR
// A1_dobyta = false ;
 373: LD_ADDR_EXP 27
 377: PUSH
 378: LD_INT 0
 380: ST_TO_ADDR
// A2_dobyta = false ;
 381: LD_ADDR_EXP 28
 385: PUSH
 386: LD_INT 0
 388: ST_TO_ADDR
// A3_dobyta = false ;
 389: LD_ADDR_EXP 29
 393: PUSH
 394: LD_INT 0
 396: ST_TO_ADDR
// vojcli_base_2 ;
 397: CALL 9115 0 0
// vojcli_base_3 ;
 401: CALL 9813 0 0
// InGameOn ;
 405: CALL_OW 8
// Odebirani = false ;
 409: LD_ADDR_EXP 44
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// Pruzkumnik := false ;
 417: LD_ADDR_EXP 30
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// oposoldier := 0 ;
 425: LD_ADDR_EXP 45
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// choose_vojaky ;
 433: CALL 11092 0 0
// create_amici ;
 437: CALL 7957 0 0
// uklid_arabu ;
 441: CALL 17360 0 0
// create_ar_protiofenzivu ;
 445: CALL 8086 0 0
// create_arabske_utoky_behem_mise ;
 449: CALL 12495 0 0
// end ;
 453: END
// export function end_of_mission_time ; begin
 454: LD_INT 0
 456: PPUSH
// YouLost ( Command ) ;
 457: LD_STRING Command
 459: PPUSH
 460: CALL_OW 104
// end ;
 464: LD_VAR 0 1
 468: RET
// on UnitDestroyed ( un ) do begin if un = JMM then
 469: LD_VAR 0 1
 473: PUSH
 474: LD_EXP 31
 478: EQUAL
 479: IFFALSE 488
// YouLost ( JMM ) ;
 481: LD_STRING JMM
 483: PPUSH
 484: CALL_OW 104
// enable ;
 488: ENABLE
// end ;
 489: PPOPN 1
 491: END
// on EndTheMissionRaised ( void ) do begin konec_mise ;
 492: CALL 644 0 0
// end ;
 496: PPOPN 1
 498: END
// every 0 0$1 do var i , pomauta , art ;
 499: GO 501
 501: DISABLE
 502: LD_INT 0
 504: PPUSH
 505: PPUSH
 506: PPUSH
// begin enable ;
 507: ENABLE
// pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 508: LD_ADDR_VAR 0 2
 512: PUSH
 513: LD_INT 22
 515: PUSH
 516: LD_EXP 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: LD_INT 34
 530: PUSH
 531: LD_INT 12
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 34
 540: PUSH
 541: LD_INT 32
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PPUSH
 557: CALL_OW 69
 561: ST_TO_ADDR
// art = false ;
 562: LD_ADDR_VAR 0 3
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// for i in pomauta do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_VAR 0 2
 579: PUSH
 580: FOR_IN
 581: IFFALSE 611
// if GetCargo ( i , mat_artefact ) > 0 then
 583: LD_VAR 0 1
 587: PPUSH
 588: LD_INT 4
 590: PPUSH
 591: CALL_OW 289
 595: PUSH
 596: LD_INT 0
 598: GREATER
 599: IFFALSE 609
// art = true ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: LD_INT 1
 608: ST_TO_ADDR
 609: GO 580
 611: POP
 612: POP
// if IsDead ( A2_dep ) and IsDead ( A3_dep ) and art then
 613: LD_INT 46
 615: PPUSH
 616: CALL_OW 301
 620: PUSH
 621: LD_INT 28
 623: PPUSH
 624: CALL_OW 301
 628: AND
 629: PUSH
 630: LD_VAR 0 3
 634: AND
 635: IFFALSE 641
// begin konec_mise ;
 637: CALL 644 0 0
// end ; end ;
 641: PPOPN 3
 643: END
// export function konec_mise ; var pommedaile ; var pomauta ; var i , pom , pom1 , pom2 ; var art ; var VIPka ; var all_units_1 ; begin
 644: LD_INT 0
 646: PPUSH
 647: PPUSH
 648: PPUSH
 649: PPUSH
 650: PPUSH
 651: PPUSH
 652: PPUSH
 653: PPUSH
 654: PPUSH
 655: PPUSH
// DisableExclamations ;
 656: CALL_OW 474
// gained_medals := [ ] ;
 660: LD_ADDR_OWVAR 61
 664: PUSH
 665: EMPTY
 666: ST_TO_ADDR
// missing_medals := [ ] ;
 667: LD_ADDR_OWVAR 62
 671: PUSH
 672: EMPTY
 673: ST_TO_ADDR
// if Timecounter <= medaile1 [ difficulty ] then
 674: LD_EXP 57
 678: PUSH
 679: LD_EXP 55
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: LESSEQUAL
 690: IFFALSE 712
// begin AddMedal ( Time1 , 1 ) ;
 692: LD_STRING Time1
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 101
// pommedaile = true ;
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// end else
 710: GO 731
// begin AddMedal ( Time1 , - 1 ) ;
 712: LD_STRING Time1
 714: PPUSH
 715: LD_INT 1
 717: NEG
 718: PPUSH
 719: CALL_OW 101
// pommedaile = false ;
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: LD_INT 0
 730: ST_TO_ADDR
// end ; if Timecounter <= medaile2 [ difficulty ] then
 731: LD_EXP 57
 735: PUSH
 736: LD_EXP 56
 740: PUSH
 741: LD_OWVAR 67
 745: ARRAY
 746: LESSEQUAL
 747: IFFALSE 761
// AddMedal ( Time2 , 1 ) else
 749: LD_STRING Time2
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: CALL_OW 101
 759: GO 791
// if pommedaile then
 761: LD_VAR 0 2
 765: IFFALSE 780
// AddMedal ( Time2 , - 1 ) else
 767: LD_STRING Time2
 769: PPUSH
 770: LD_INT 1
 772: NEG
 773: PPUSH
 774: CALL_OW 101
 778: GO 791
// AddMedal ( Time2 , - 2 ) ;
 780: LD_STRING Time2
 782: PPUSH
 783: LD_INT 2
 785: NEG
 786: PPUSH
 787: CALL_OW 101
// pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 791: LD_ADDR_VAR 0 3
 795: PUSH
 796: LD_INT 22
 798: PUSH
 799: LD_EXP 1
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 34
 813: PUSH
 814: LD_INT 12
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 34
 823: PUSH
 824: LD_INT 32
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: PPUSH
 840: CALL_OW 69
 844: ST_TO_ADDR
// art = false ;
 845: LD_ADDR_VAR 0 8
 849: PUSH
 850: LD_INT 0
 852: ST_TO_ADDR
// for i in pomauta do
 853: LD_ADDR_VAR 0 4
 857: PUSH
 858: LD_VAR 0 3
 862: PUSH
 863: FOR_IN
 864: IFFALSE 894
// if GetCargo ( i , mat_artefact ) > 0 then
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 4
 873: PPUSH
 874: CALL_OW 289
 878: PUSH
 879: LD_INT 0
 881: GREATER
 882: IFFALSE 892
// art = true ;
 884: LD_ADDR_VAR 0 8
 888: PUSH
 889: LD_INT 1
 891: ST_TO_ADDR
 892: GO 863
 894: POP
 895: POP
// if art then
 896: LD_VAR 0 8
 900: IFFALSE 914
// AddMedal ( Artefact , 1 ) else
 902: LD_STRING Artefact
 904: PPUSH
 905: LD_INT 1
 907: PPUSH
 908: CALL_OW 101
 912: GO 925
// AddMedal ( Artefact , - 1 ) ;
 914: LD_STRING Artefact
 916: PPUSH
 917: LD_INT 1
 919: NEG
 920: PPUSH
 921: CALL_OW 101
// GiveMedals ( Main ) ;
 925: LD_STRING Main
 927: PPUSH
 928: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 932: LD_ADDR_VAR 0 5
 936: PUSH
 937: LD_INT 22
 939: PUSH
 940: LD_EXP 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 21
 951: PUSH
 952: LD_INT 1
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) do
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 22
 975: PUSH
 976: LD_EXP 1
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 21
 987: PUSH
 988: LD_INT 2
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PPUSH
 999: CALL_OW 69
1003: PUSH
1004: FOR_IN
1005: IFFALSE 1053
// begin pom1 = IsDrivenBy ( i ) ;
1007: LD_ADDR_VAR 0 6
1011: PUSH
1012: LD_VAR 0 4
1016: PPUSH
1017: CALL_OW 311
1021: ST_TO_ADDR
// if not ( pom1 in pom ) then
1022: LD_VAR 0 6
1026: PUSH
1027: LD_VAR 0 5
1031: IN
1032: NOT
1033: IFFALSE 1051
// pom = pom ^ pom1 ;
1035: LD_ADDR_VAR 0 5
1039: PUSH
1040: LD_VAR 0 5
1044: PUSH
1045: LD_VAR 0 6
1049: ADD
1050: ST_TO_ADDR
// end ;
1051: GO 1004
1053: POP
1054: POP
// all_units_1 = pom ;
1055: LD_ADDR_VAR 0 10
1059: PUSH
1060: LD_VAR 0 5
1064: ST_TO_ADDR
// all_units_1 = all_units_1 diff UnitFilter ( all_units_1 , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) ;
1065: LD_ADDR_VAR 0 10
1069: PUSH
1070: LD_VAR 0 10
1074: PUSH
1075: LD_VAR 0 10
1079: PPUSH
1080: LD_INT 2
1082: PUSH
1083: LD_INT 25
1085: PUSH
1086: LD_INT 12
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 25
1095: PUSH
1096: LD_INT 16
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PPUSH
1108: CALL_OW 72
1112: DIFF
1113: ST_TO_ADDR
// RewardPeople ( all_units_1 ) ;
1114: LD_VAR 0 10
1118: PPUSH
1119: CALL_OW 43
// VIPka = [ JMM , Frank , Powell , Gary , Bobby , Yamoko , Cyrus , Cornel , Lisa , Don , Brown ] ;
1123: LD_ADDR_VAR 0 9
1127: PUSH
1128: LD_EXP 31
1132: PUSH
1133: LD_EXP 35
1137: PUSH
1138: LD_EXP 32
1142: PUSH
1143: LD_EXP 33
1147: PUSH
1148: LD_EXP 34
1152: PUSH
1153: LD_EXP 38
1157: PUSH
1158: LD_EXP 39
1162: PUSH
1163: LD_EXP 37
1167: PUSH
1168: LD_EXP 36
1172: PUSH
1173: LD_EXP 40
1177: PUSH
1178: LD_EXP 41
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
1196: LD_EXP 31
1200: PPUSH
1201: LD_STRING JMM
1203: PPUSH
1204: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
1208: LD_EXP 39
1212: PPUSH
1213: LD_STRING Cyrus
1215: PPUSH
1216: CALL_OW 38
// if Cyrus in Amici_enter then
1220: LD_EXP 39
1224: PUSH
1225: LD_EXP 42
1229: IN
1230: IFFALSE 1244
// SaveVariable ( 6 , CyrusLoc ) else
1232: LD_INT 6
1234: PPUSH
1235: LD_STRING CyrusLoc
1237: PPUSH
1238: CALL_OW 39
1242: GO 1254
// SaveVariable ( 7 , CyrusLoc ) ;
1244: LD_INT 7
1246: PPUSH
1247: LD_STRING CyrusLoc
1249: PPUSH
1250: CALL_OW 39
// SaveCharacters ( Gary , Gary ) ;
1254: LD_EXP 33
1258: PPUSH
1259: LD_STRING Gary
1261: PPUSH
1262: CALL_OW 38
// if Gary in Amici_enter then
1266: LD_EXP 33
1270: PUSH
1271: LD_EXP 42
1275: IN
1276: IFFALSE 1290
// SaveVariable ( 6 , GaryLoc ) else
1278: LD_INT 6
1280: PPUSH
1281: LD_STRING GaryLoc
1283: PPUSH
1284: CALL_OW 39
1288: GO 1300
// SaveVariable ( 7 , GaryLoc ) ;
1290: LD_INT 7
1292: PPUSH
1293: LD_STRING GaryLoc
1295: PPUSH
1296: CALL_OW 39
// SaveCharacters ( Cornel , Cornell ) ;
1300: LD_EXP 37
1304: PPUSH
1305: LD_STRING Cornell
1307: PPUSH
1308: CALL_OW 38
// if Cornel in Amici_enter then
1312: LD_EXP 37
1316: PUSH
1317: LD_EXP 42
1321: IN
1322: IFFALSE 1336
// SaveVariable ( 6 , CornellLoc ) else
1324: LD_INT 6
1326: PPUSH
1327: LD_STRING CornellLoc
1329: PPUSH
1330: CALL_OW 39
1334: GO 1346
// SaveVariable ( 7 , CornellLoc ) ;
1336: LD_INT 7
1338: PPUSH
1339: LD_STRING CornellLoc
1341: PPUSH
1342: CALL_OW 39
// SaveCharacters ( Frank , Frank ) ;
1346: LD_EXP 35
1350: PPUSH
1351: LD_STRING Frank
1353: PPUSH
1354: CALL_OW 38
// if Frank in Amici_enter then
1358: LD_EXP 35
1362: PUSH
1363: LD_EXP 42
1367: IN
1368: IFFALSE 1382
// SaveVariable ( 6 , FrankLoc ) else
1370: LD_INT 6
1372: PPUSH
1373: LD_STRING FrankLoc
1375: PPUSH
1376: CALL_OW 39
1380: GO 1392
// SaveVariable ( 7 , FrankLoc ) ;
1382: LD_INT 7
1384: PPUSH
1385: LD_STRING FrankLoc
1387: PPUSH
1388: CALL_OW 39
// SaveCharacters ( Bobby , Bobby ) ;
1392: LD_EXP 34
1396: PPUSH
1397: LD_STRING Bobby
1399: PPUSH
1400: CALL_OW 38
// if Bobby in Amici_enter then
1404: LD_EXP 34
1408: PUSH
1409: LD_EXP 42
1413: IN
1414: IFFALSE 1428
// SaveVariable ( 6 , BobbyLoc ) else
1416: LD_INT 6
1418: PPUSH
1419: LD_STRING BobbyLoc
1421: PPUSH
1422: CALL_OW 39
1426: GO 1438
// SaveVariable ( 7 , BobbyLoc ) ;
1428: LD_INT 7
1430: PPUSH
1431: LD_STRING BobbyLoc
1433: PPUSH
1434: CALL_OW 39
// SaveCharacters ( Yamoko , Yamoko ) ;
1438: LD_EXP 38
1442: PPUSH
1443: LD_STRING Yamoko
1445: PPUSH
1446: CALL_OW 38
// if Yamoko in Amici_enter then
1450: LD_EXP 38
1454: PUSH
1455: LD_EXP 42
1459: IN
1460: IFFALSE 1474
// SaveVariable ( 6 , YamokoLoc ) else
1462: LD_INT 6
1464: PPUSH
1465: LD_STRING YamokoLoc
1467: PPUSH
1468: CALL_OW 39
1472: GO 1484
// SaveVariable ( 7 , YamokoLoc ) ;
1474: LD_INT 7
1476: PPUSH
1477: LD_STRING YamokoLoc
1479: PPUSH
1480: CALL_OW 39
// SaveCharacters ( Don , Donaldson ) ;
1484: LD_EXP 40
1488: PPUSH
1489: LD_STRING Donaldson
1491: PPUSH
1492: CALL_OW 38
// if Don in Amici_enter then
1496: LD_EXP 40
1500: PUSH
1501: LD_EXP 42
1505: IN
1506: IFFALSE 1520
// SaveVariable ( 6 , DonaldsonLoc ) else
1508: LD_INT 6
1510: PPUSH
1511: LD_STRING DonaldsonLoc
1513: PPUSH
1514: CALL_OW 39
1518: GO 1530
// SaveVariable ( 7 , DonaldsonLoc ) ;
1520: LD_INT 7
1522: PPUSH
1523: LD_STRING DonaldsonLoc
1525: PPUSH
1526: CALL_OW 39
// SaveCharacters ( Brown , Brown ) ;
1530: LD_EXP 41
1534: PPUSH
1535: LD_STRING Brown
1537: PPUSH
1538: CALL_OW 38
// if Brown in Amici_enter then
1542: LD_EXP 41
1546: PUSH
1547: LD_EXP 42
1551: IN
1552: IFFALSE 1566
// SaveVariable ( 6 , BrownLoc ) else
1554: LD_INT 6
1556: PPUSH
1557: LD_STRING BrownLoc
1559: PPUSH
1560: CALL_OW 39
1564: GO 1576
// SaveVariable ( 7 , BrownLoc ) ;
1566: LD_INT 7
1568: PPUSH
1569: LD_STRING BrownLoc
1571: PPUSH
1572: CALL_OW 39
// SaveCharacters ( Lisa , Lisa ) ;
1576: LD_EXP 36
1580: PPUSH
1581: LD_STRING Lisa
1583: PPUSH
1584: CALL_OW 38
// if Lisa in Amici_enter then
1588: LD_EXP 36
1592: PUSH
1593: LD_EXP 42
1597: IN
1598: IFFALSE 1612
// SaveVariable ( 6 , LisaLoc ) else
1600: LD_INT 6
1602: PPUSH
1603: LD_STRING LisaLoc
1605: PPUSH
1606: CALL_OW 39
1610: GO 1622
// SaveVariable ( 7 , LiasLoc ) ;
1612: LD_INT 7
1614: PPUSH
1615: LD_STRING LiasLoc
1617: PPUSH
1618: CALL_OW 39
// pom1 = lidi_other diff Amici_enter ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_EXP 51
1631: PUSH
1632: LD_EXP 42
1636: DIFF
1637: ST_TO_ADDR
// pom2 = all_units_1 diff VIPka ;
1638: LD_ADDR_VAR 0 7
1642: PUSH
1643: LD_VAR 0 10
1647: PUSH
1648: LD_VAR 0 9
1652: DIFF
1653: ST_TO_ADDR
// DeleteCharacters ( other_survivors ) ;
1654: LD_STRING other_survivors
1656: PPUSH
1657: CALL_OW 40
// DeleteCharacters ( otherGamma2 ) ;
1661: LD_STRING otherGamma2
1663: PPUSH
1664: CALL_OW 40
// SaveCharacters ( pom1 , otherNotJMM ) ;
1668: LD_VAR 0 6
1672: PPUSH
1673: LD_STRING otherNotJMM
1675: PPUSH
1676: CALL_OW 38
// SaveCharacters ( pom2 , otherWithJMM ) ;
1680: LD_VAR 0 7
1684: PPUSH
1685: LD_STRING otherWithJMM
1687: PPUSH
1688: CALL_OW 38
// YouWin ;
1692: CALL_OW 103
// EnableExclamations ;
1696: CALL_OW 473
// exit ;
1700: GO 1702
// end ;
1702: LD_VAR 0 1
1706: RET
// function load_postavy ; var pom ; begin
1707: LD_INT 0
1709: PPUSH
1710: PPUSH
// JMM = nacti_osobu ( JMM ) ;
1711: LD_ADDR_EXP 31
1715: PUSH
1716: LD_STRING JMM
1718: PPUSH
1719: CALL 7913 0 1
1723: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
1724: LD_ADDR_EXP 32
1728: PUSH
1729: LD_STRING Powell
1731: PPUSH
1732: CALL_OW 25
1736: ST_TO_ADDR
// Gary = nacti_osobu ( Gary ) ;
1737: LD_ADDR_EXP 33
1741: PUSH
1742: LD_STRING Gary
1744: PPUSH
1745: CALL 7913 0 1
1749: ST_TO_ADDR
// Lisa = nacti_osobu ( Lisa ) ;
1750: LD_ADDR_EXP 36
1754: PUSH
1755: LD_STRING Lisa
1757: PPUSH
1758: CALL 7913 0 1
1762: ST_TO_ADDR
// Yamoko = nacti_osobu ( Yamoko ) ;
1763: LD_ADDR_EXP 38
1767: PUSH
1768: LD_STRING Yamoko
1770: PPUSH
1771: CALL 7913 0 1
1775: ST_TO_ADDR
// Frank = nacti_osobu ( Frank ) ;
1776: LD_ADDR_EXP 35
1780: PUSH
1781: LD_STRING Frank
1783: PPUSH
1784: CALL 7913 0 1
1788: ST_TO_ADDR
// Cornel = nacti_osobu ( Cornell ) ;
1789: LD_ADDR_EXP 37
1793: PUSH
1794: LD_STRING Cornell
1796: PPUSH
1797: CALL 7913 0 1
1801: ST_TO_ADDR
// Bobby = nacti_osobu ( Bobby ) ;
1802: LD_ADDR_EXP 34
1806: PUSH
1807: LD_STRING Bobby
1809: PPUSH
1810: CALL 7913 0 1
1814: ST_TO_ADDR
// Cyrus = nacti_osobu ( Cyrus ) ;
1815: LD_ADDR_EXP 39
1819: PUSH
1820: LD_STRING Cyrus
1822: PPUSH
1823: CALL 7913 0 1
1827: ST_TO_ADDR
// Don = nacti_osobu ( Donaldson ) ;
1828: LD_ADDR_EXP 40
1832: PUSH
1833: LD_STRING Donaldson
1835: PPUSH
1836: CALL 7913 0 1
1840: ST_TO_ADDR
// Brown = nacti_osobu ( Brown ) ;
1841: LD_ADDR_EXP 41
1845: PUSH
1846: LD_STRING Brown
1848: PPUSH
1849: CALL 7913 0 1
1853: ST_TO_ADDR
// GARYL = LoadVariable ( GaryLoc , 6 ) ;
1854: LD_ADDR_EXP 18
1858: PUSH
1859: LD_STRING GaryLoc
1861: PPUSH
1862: LD_INT 6
1864: PPUSH
1865: CALL_OW 30
1869: ST_TO_ADDR
// LISAL = LoadVariable ( LisaLoc , 6 ) ;
1870: LD_ADDR_EXP 19
1874: PUSH
1875: LD_STRING LisaLoc
1877: PPUSH
1878: LD_INT 6
1880: PPUSH
1881: CALL_OW 30
1885: ST_TO_ADDR
// YAML = LoadVariable ( YamokoLoc , 6 ) ;
1886: LD_ADDR_EXP 20
1890: PUSH
1891: LD_STRING YamokoLoc
1893: PPUSH
1894: LD_INT 6
1896: PPUSH
1897: CALL_OW 30
1901: ST_TO_ADDR
// FRANKL = LoadVariable ( FrankLoc , 6 ) ;
1902: LD_ADDR_EXP 21
1906: PUSH
1907: LD_STRING FrankLoc
1909: PPUSH
1910: LD_INT 6
1912: PPUSH
1913: CALL_OW 30
1917: ST_TO_ADDR
// CORNELL = LoadVariable ( CornellLoc , 6 ) ;
1918: LD_ADDR_EXP 22
1922: PUSH
1923: LD_STRING CornellLoc
1925: PPUSH
1926: LD_INT 6
1928: PPUSH
1929: CALL_OW 30
1933: ST_TO_ADDR
// BOBL = LoadVariable ( BobbyLoc , 6 ) ;
1934: LD_ADDR_EXP 23
1938: PUSH
1939: LD_STRING BobbyLoc
1941: PPUSH
1942: LD_INT 6
1944: PPUSH
1945: CALL_OW 30
1949: ST_TO_ADDR
// CYRL = LoadVariable ( CyrusLoc , 6 ) ;
1950: LD_ADDR_EXP 24
1954: PUSH
1955: LD_STRING CyrusLoc
1957: PPUSH
1958: LD_INT 6
1960: PPUSH
1961: CALL_OW 30
1965: ST_TO_ADDR
// DONL = LoadVariable ( DonaldsonLoc , 6 ) ;
1966: LD_ADDR_EXP 25
1970: PUSH
1971: LD_STRING DonaldsonLoc
1973: PPUSH
1974: LD_INT 6
1976: PPUSH
1977: CALL_OW 30
1981: ST_TO_ADDR
// BROWNL = LoadVariable ( BrownLoc , 6 ) ;
1982: LD_ADDR_EXP 26
1986: PUSH
1987: LD_STRING BrownLoc
1989: PPUSH
1990: LD_INT 6
1992: PPUSH
1993: CALL_OW 30
1997: ST_TO_ADDR
// if CheckCharacterSet ( otherWithJMM ) then
1998: LD_STRING otherWithJMM
2000: PPUSH
2001: CALL_OW 29
2005: IFFALSE 2022
// lidi_other = CreateCharacterSet ( otherWithJMM ) else
2007: LD_ADDR_EXP 51
2011: PUSH
2012: LD_STRING otherWithJMM
2014: PPUSH
2015: CALL_OW 31
2019: ST_TO_ADDR
2020: GO 2029
// lidi_other = [ ] ;
2022: LD_ADDR_EXP 51
2026: PUSH
2027: EMPTY
2028: ST_TO_ADDR
// if CheckCharacterSet ( other_survivors ) then
2029: LD_STRING other_survivors
2031: PPUSH
2032: CALL_OW 29
2036: IFFALSE 2053
// pom = CreateCharacterSet ( other_survivors ) else
2038: LD_ADDR_VAR 0 2
2042: PUSH
2043: LD_STRING other_survivors
2045: PPUSH
2046: CALL_OW 31
2050: ST_TO_ADDR
2051: GO 2060
// pom = [ ] ;
2053: LD_ADDR_VAR 0 2
2057: PUSH
2058: EMPTY
2059: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2060: LD_ADDR_EXP 51
2064: PUSH
2065: LD_EXP 51
2069: PUSH
2070: LD_VAR 0 2
2074: ADD
2075: ST_TO_ADDR
// if CheckCharacterSet ( otherNotJMM ) then
2076: LD_STRING otherNotJMM
2078: PPUSH
2079: CALL_OW 29
2083: IFFALSE 2100
// pom = CreateCharacterSet ( otherNotJMM ) else
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_STRING otherNotJMM
2092: PPUSH
2093: CALL_OW 31
2097: ST_TO_ADDR
2098: GO 2107
// pom = [ ] ;
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: EMPTY
2106: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2107: LD_ADDR_EXP 51
2111: PUSH
2112: LD_EXP 51
2116: PUSH
2117: LD_VAR 0 2
2121: ADD
2122: ST_TO_ADDR
// if CheckCharacterSet ( otherGamma2 ) then
2123: LD_STRING otherGamma2
2125: PPUSH
2126: CALL_OW 29
2130: IFFALSE 2147
// pom = CreateCharacterSet ( otherGamma2 ) else
2132: LD_ADDR_VAR 0 2
2136: PUSH
2137: LD_STRING otherGamma2
2139: PPUSH
2140: CALL_OW 31
2144: ST_TO_ADDR
2145: GO 2154
// pom = [ ] ;
2147: LD_ADDR_VAR 0 2
2151: PUSH
2152: EMPTY
2153: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2154: LD_ADDR_EXP 51
2158: PUSH
2159: LD_EXP 51
2163: PUSH
2164: LD_VAR 0 2
2168: ADD
2169: ST_TO_ADDR
// end ; end_of_file
2170: LD_VAR 0 1
2174: RET
// var i , pom , pom1 , pom2 , pom3 , pom4 ; var kecy ; var KAMI ; var disable_kecy_5D ; every 0 0$0.1 do
2175: GO 2177
2177: DISABLE
// begin for i := 1 to 2 do
2178: LD_ADDR_LOC 1
2182: PUSH
2183: DOUBLE
2184: LD_INT 1
2186: DEC
2187: ST_TO_ADDR
2188: LD_INT 2
2190: PUSH
2191: FOR_TO
2192: IFFALSE 2201
// disable ( i ) ;
2194: LD_LOC 1
2198: DISABLE_MARKED
2199: GO 2191
2201: POP
2202: POP
// kecy := false ;
2203: LD_ADDR_LOC 7
2207: PUSH
2208: LD_INT 0
2210: ST_TO_ADDR
// KAMI = false ;
2211: LD_ADDR_LOC 8
2215: PUSH
2216: LD_INT 0
2218: ST_TO_ADDR
// disable_kecy_5D = false ;
2219: LD_ADDR_LOC 9
2223: PUSH
2224: LD_INT 0
2226: ST_TO_ADDR
// end ;
2227: END
// export function chmo1 ; begin
2228: LD_INT 0
2230: PPUSH
// CenterOnXY ( 86 , 145 ) ;
2231: LD_INT 86
2233: PPUSH
2234: LD_INT 145
2236: PPUSH
2237: CALL_OW 84
// SetAttitude ( You , Arabi , att_enemy , true ) ;
2241: LD_EXP 1
2245: PPUSH
2246: LD_EXP 3
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: LD_INT 1
2256: PPUSH
2257: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
2261: LD_EXP 3
2265: PPUSH
2266: LD_EXP 1
2270: PPUSH
2271: LD_INT 2
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 80
// SaveForQuickRestart ;
2281: CALL_OW 22
// wait ( 0 0$0.5 ) ;
2285: LD_INT 18
2287: PPUSH
2288: CALL_OW 67
// InGameOff ;
2292: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2296: LD_STRING M1
2298: PPUSH
2299: CALL_OW 337
// end ;
2303: LD_VAR 0 1
2307: RET
// every 0 0$3 trigger GetSide ( A1_dep ) = You or IsDead ( A1_dep ) do var pom1 ;
2308: LD_INT 4
2310: PPUSH
2311: CALL_OW 255
2315: PUSH
2316: LD_EXP 1
2320: EQUAL
2321: PUSH
2322: LD_INT 4
2324: PPUSH
2325: CALL_OW 301
2329: OR
2330: IFFALSE 2915
2332: GO 2334
2334: DISABLE
2335: LD_INT 0
2337: PPUSH
// begin A1_dobyta = true ;
2338: LD_ADDR_EXP 27
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// DialogueOn ;
2346: CALL_OW 6
// SayRadio ( Jmm , D2-JMM-1 ) ;
2350: LD_EXP 31
2354: PPUSH
2355: LD_STRING D2-JMM-1
2357: PPUSH
2358: CALL_OW 94
// SayRadio ( Powell , D2-Pow-1 ) ;
2362: LD_EXP 32
2366: PPUSH
2367: LD_STRING D2-Pow-1
2369: PPUSH
2370: CALL_OW 94
// SayRadio ( JMM , D2-JMM-2 ) ;
2374: LD_EXP 31
2378: PPUSH
2379: LD_STRING D2-JMM-2
2381: PPUSH
2382: CALL_OW 94
// SayRadio ( Powell , D2-Pow-2 ) ;
2386: LD_EXP 32
2390: PPUSH
2391: LD_STRING D2-Pow-2
2393: PPUSH
2394: CALL_OW 94
// SayRadio ( JMM , D2-JMM-3 ) ;
2398: LD_EXP 31
2402: PPUSH
2403: LD_STRING D2-JMM-3
2405: PPUSH
2406: CALL_OW 94
// DialogueOff ;
2410: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2414: LD_STRING M2
2416: PPUSH
2417: CALL_OW 337
// Hint ( CapturedBase ) ;
2421: LD_STRING CapturedBase
2423: PPUSH
2424: CALL_OW 339
// pom = [ ] ;
2428: LD_ADDR_LOC 2
2432: PUSH
2433: EMPTY
2434: ST_TO_ADDR
// for i in [ Gary , Bobby , Frank , Lisa , Cornel , Cyrus , Don , Brown ] do
2435: LD_ADDR_LOC 1
2439: PUSH
2440: LD_EXP 33
2444: PUSH
2445: LD_EXP 34
2449: PUSH
2450: LD_EXP 35
2454: PUSH
2455: LD_EXP 36
2459: PUSH
2460: LD_EXP 37
2464: PUSH
2465: LD_EXP 39
2469: PUSH
2470: LD_EXP 40
2474: PUSH
2475: LD_EXP 41
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: FOR_IN
2491: IFFALSE 2522
// if IsOK ( i ) then
2493: LD_LOC 1
2497: PPUSH
2498: CALL_OW 302
2502: IFFALSE 2520
// pom = pom ^ i ;
2504: LD_ADDR_LOC 2
2508: PUSH
2509: LD_LOC 2
2513: PUSH
2514: LD_LOC 1
2518: ADD
2519: ST_TO_ADDR
2520: GO 2490
2522: POP
2523: POP
// if pom > 3 then
2524: LD_LOC 2
2528: PUSH
2529: LD_INT 3
2531: GREATER
2532: IFFALSE 2682
// begin pom1 = pom [ Rand ( 1 , pom + 0 ) ] ;
2534: LD_ADDR_VAR 0 1
2538: PUSH
2539: LD_LOC 2
2543: PUSH
2544: LD_INT 1
2546: PPUSH
2547: LD_LOC 2
2551: PUSH
2552: LD_INT 0
2554: PLUS
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// pom = pom diff pom1 [ 1 ] ;
2562: LD_ADDR_LOC 2
2566: PUSH
2567: LD_LOC 2
2571: PUSH
2572: LD_VAR 0 1
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: DIFF
2581: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2582: LD_ADDR_VAR 0 1
2586: PUSH
2587: LD_VAR 0 1
2591: PUSH
2592: LD_LOC 2
2596: PUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_LOC 2
2604: PUSH
2605: LD_INT 0
2607: PLUS
2608: PPUSH
2609: CALL_OW 12
2613: ARRAY
2614: ADD
2615: ST_TO_ADDR
// pom = pom diff pom1 [ 2 ] ;
2616: LD_ADDR_LOC 2
2620: PUSH
2621: LD_LOC 2
2625: PUSH
2626: LD_VAR 0 1
2630: PUSH
2631: LD_INT 2
2633: ARRAY
2634: DIFF
2635: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2636: LD_ADDR_VAR 0 1
2640: PUSH
2641: LD_VAR 0 1
2645: PUSH
2646: LD_LOC 2
2650: PUSH
2651: LD_INT 1
2653: PPUSH
2654: LD_LOC 2
2658: PUSH
2659: LD_INT 0
2661: PLUS
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ADD
2669: ST_TO_ADDR
// pom = pom1 ;
2670: LD_ADDR_LOC 2
2674: PUSH
2675: LD_VAR 0 1
2679: ST_TO_ADDR
// end else
2680: GO 2692
// pom1 = pom ;
2682: LD_ADDR_VAR 0 1
2686: PUSH
2687: LD_LOC 2
2691: ST_TO_ADDR
// for i in pom1 do
2692: LD_ADDR_LOC 1
2696: PUSH
2697: LD_VAR 0 1
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2913
// case i of Gary :
2705: LD_LOC 1
2709: PUSH
2710: LD_EXP 33
2714: DOUBLE
2715: EQUAL
2716: IFTRUE 2720
2718: GO 2735
2720: POP
// Say ( Gary , D2a-Gary-1 ) ; Bobby :
2721: LD_EXP 33
2725: PPUSH
2726: LD_STRING D2a-Gary-1
2728: PPUSH
2729: CALL_OW 88
2733: GO 2911
2735: LD_EXP 34
2739: DOUBLE
2740: EQUAL
2741: IFTRUE 2745
2743: GO 2760
2745: POP
// Say ( Bobby , D2a-Bobby-1 ) ; Frank :
2746: LD_EXP 34
2750: PPUSH
2751: LD_STRING D2a-Bobby-1
2753: PPUSH
2754: CALL_OW 88
2758: GO 2911
2760: LD_EXP 35
2764: DOUBLE
2765: EQUAL
2766: IFTRUE 2770
2768: GO 2785
2770: POP
// Say ( Frank , D2a-Frank-1 ) ; Lisa :
2771: LD_EXP 35
2775: PPUSH
2776: LD_STRING D2a-Frank-1
2778: PPUSH
2779: CALL_OW 88
2783: GO 2911
2785: LD_EXP 36
2789: DOUBLE
2790: EQUAL
2791: IFTRUE 2795
2793: GO 2810
2795: POP
// Say ( Lisa , D2a-Lisa-1 ) ; Cornel :
2796: LD_EXP 36
2800: PPUSH
2801: LD_STRING D2a-Lisa-1
2803: PPUSH
2804: CALL_OW 88
2808: GO 2911
2810: LD_EXP 37
2814: DOUBLE
2815: EQUAL
2816: IFTRUE 2820
2818: GO 2835
2820: POP
// Say ( Cornel , D2a-Corn-1 ) ; Cyrus :
2821: LD_EXP 37
2825: PPUSH
2826: LD_STRING D2a-Corn-1
2828: PPUSH
2829: CALL_OW 88
2833: GO 2911
2835: LD_EXP 39
2839: DOUBLE
2840: EQUAL
2841: IFTRUE 2845
2843: GO 2860
2845: POP
// Say ( Cyrus , D2a-Cyrus-1 ) ; Don :
2846: LD_EXP 39
2850: PPUSH
2851: LD_STRING D2a-Cyrus-1
2853: PPUSH
2854: CALL_OW 88
2858: GO 2911
2860: LD_EXP 40
2864: DOUBLE
2865: EQUAL
2866: IFTRUE 2870
2868: GO 2885
2870: POP
// Say ( Don , D2a-Don-1 ) ; Brown :
2871: LD_EXP 40
2875: PPUSH
2876: LD_STRING D2a-Don-1
2878: PPUSH
2879: CALL_OW 88
2883: GO 2911
2885: LD_EXP 41
2889: DOUBLE
2890: EQUAL
2891: IFTRUE 2895
2893: GO 2910
2895: POP
// Say ( Brown , D2a-Brown-1 ) ; end ;
2896: LD_EXP 41
2900: PPUSH
2901: LD_STRING D2a-Brown-1
2903: PPUSH
2904: CALL_OW 88
2908: GO 2911
2910: POP
2911: GO 2702
2913: POP
2914: POP
// end ;
2915: PPOPN 1
2917: END
// export function dialog_frank ; var res ; begin
2918: LD_INT 0
2920: PPUSH
2921: PPUSH
// Say ( Frank , D3F-Frank-1 ) ;
2922: LD_EXP 35
2926: PPUSH
2927: LD_STRING D3F-Frank-1
2929: PPUSH
2930: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
2934: LD_EXP 31
2938: PPUSH
2939: LD_STRING D3F-JMM-1
2941: PPUSH
2942: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
2946: LD_EXP 35
2950: PPUSH
2951: LD_STRING D3F-Frank-2
2953: PPUSH
2954: CALL_OW 88
// res := Query ( QFrank ) ;
2958: LD_ADDR_VAR 0 2
2962: PUSH
2963: LD_STRING QFrank
2965: PPUSH
2966: CALL_OW 97
2970: ST_TO_ADDR
// case res of 1 :
2971: LD_VAR 0 2
2975: PUSH
2976: LD_INT 1
2978: DOUBLE
2979: EQUAL
2980: IFTRUE 2984
2982: GO 3007
2984: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
2985: LD_EXP 31
2989: PPUSH
2990: LD_STRING D3Fa-JMM-1
2992: PPUSH
2993: CALL_OW 88
// result := 1 ;
2997: LD_ADDR_VAR 0 1
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// end ; 2 :
3005: GO 3163
3007: LD_INT 2
3009: DOUBLE
3010: EQUAL
3011: IFTRUE 3015
3013: GO 3131
3015: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
3016: LD_EXP 31
3020: PPUSH
3021: LD_STRING D3Fb-JMM-1
3023: PPUSH
3024: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
3028: LD_EXP 35
3032: PPUSH
3033: LD_STRING D3Fb-Frank-1
3035: PPUSH
3036: CALL_OW 88
// res := Query ( QFrank2 ) ;
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: LD_STRING QFrank2
3047: PPUSH
3048: CALL_OW 97
3052: ST_TO_ADDR
// if res = 1 then
3053: LD_VAR 0 2
3057: PUSH
3058: LD_INT 1
3060: EQUAL
3061: IFFALSE 3109
// begin Say ( JMM , D3Fba-JMM-1 ) ;
3063: LD_EXP 31
3067: PPUSH
3068: LD_STRING D3Fba-JMM-1
3070: PPUSH
3071: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
3075: LD_EXP 35
3079: PPUSH
3080: LD_STRING D3Fba-Frank-1
3082: PPUSH
3083: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
3087: LD_EXP 31
3091: PPUSH
3092: LD_STRING D3Fba-JMM-2
3094: PPUSH
3095: CALL_OW 88
// result := 21 ;
3099: LD_ADDR_VAR 0 1
3103: PUSH
3104: LD_INT 21
3106: ST_TO_ADDR
// end else
3107: GO 3129
// begin Say ( JMM , D3Fbb-JMM-1 ) ;
3109: LD_EXP 31
3113: PPUSH
3114: LD_STRING D3Fbb-JMM-1
3116: PPUSH
3117: CALL_OW 88
// result := 22 ;
3121: LD_ADDR_VAR 0 1
3125: PUSH
3126: LD_INT 22
3128: ST_TO_ADDR
// end ; end ; 3 :
3129: GO 3163
3131: LD_INT 3
3133: DOUBLE
3134: EQUAL
3135: IFTRUE 3139
3137: GO 3162
3139: POP
// begin Say ( JMM , D3Fc-JMM-1 ) ;
3140: LD_EXP 31
3144: PPUSH
3145: LD_STRING D3Fc-JMM-1
3147: PPUSH
3148: CALL_OW 88
// result := 3 ;
3152: LD_ADDR_VAR 0 1
3156: PUSH
3157: LD_INT 3
3159: ST_TO_ADDR
// end ; end ;
3160: GO 3163
3162: POP
// end ;
3163: LD_VAR 0 1
3167: RET
// export function fuspech1 ; begin
3168: LD_INT 0
3170: PPUSH
// DialogueOn ;
3171: CALL_OW 6
// Say ( JMM , D4Fa-JMM-1 ) ;
3175: LD_EXP 31
3179: PPUSH
3180: LD_STRING D4Fa-JMM-1
3182: PPUSH
3183: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3187: LD_EXP 1
3191: PPUSH
3192: LD_INT 6
3194: PPUSH
3195: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3199: LD_INT 111
3201: PPUSH
3202: LD_INT 123
3204: PPUSH
3205: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3209: LD_INT 32
3211: PPUSH
3212: LD_INT 39
3214: PPUSH
3215: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
3219: LD_EXP 35
3223: PPUSH
3224: LD_STRING D4Fa-Frank-1
3226: PPUSH
3227: CALL_OW 88
// wait ( 0 0$3 ) ;
3231: LD_INT 105
3233: PPUSH
3234: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3238: LD_EXP 1
3242: PPUSH
3243: LD_INT 7
3245: PPUSH
3246: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3250: LD_INT 122
3252: PPUSH
3253: LD_INT 68
3255: PPUSH
3256: CALL_OW 86
// Say ( JMM , D4Fa-JMM-2 ) ;
3260: LD_EXP 31
3264: PPUSH
3265: LD_STRING D4Fa-JMM-2
3267: PPUSH
3268: CALL_OW 88
// Say ( Frank , D4Fa-Frank-2 ) ;
3272: LD_EXP 35
3276: PPUSH
3277: LD_STRING D4Fa-Frank-2
3279: PPUSH
3280: CALL_OW 88
// DialogueOff ;
3284: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3288: LD_EXP 35
3292: PUSH
3293: EMPTY
3294: LIST
3295: PPUSH
3296: CALL_OW 85
// end ;
3300: LD_VAR 0 1
3304: RET
// export function fuspech2 ; begin
3305: LD_INT 0
3307: PPUSH
// DialogueOn ;
3308: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3312: LD_EXP 1
3316: PPUSH
3317: LD_INT 8
3319: PPUSH
3320: CALL_OW 332
// if IsOK ( Frank ) then
3324: LD_EXP 35
3328: PPUSH
3329: CALL_OW 302
3333: IFFALSE 3427
// begin Say ( Frank , D4Fb-Frank-1 ) ;
3335: LD_EXP 35
3339: PPUSH
3340: LD_STRING D4Fb-Frank-1
3342: PPUSH
3343: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
3347: LD_EXP 31
3351: PPUSH
3352: LD_STRING D4Fb-JMM-1
3354: PPUSH
3355: CALL_OW 88
// pom = GetPeople ( sex_female , class_scientistic , [ ] ) ;
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_INT 2
3366: PPUSH
3367: LD_INT 4
3369: PPUSH
3370: EMPTY
3371: PPUSH
3372: CALL 6495 0 3
3376: ST_TO_ADDR
// if pom > 0 then
3377: LD_LOC 2
3381: PUSH
3382: LD_INT 0
3384: GREATER
3385: IFFALSE 3403
// Say ( pom [ 1 ] , D4Fb-FSci1-1 ) ;
3387: LD_LOC 2
3391: PUSH
3392: LD_INT 1
3394: ARRAY
3395: PPUSH
3396: LD_STRING D4Fb-FSci1-1
3398: PPUSH
3399: CALL_OW 88
// Say ( Frank , D4Fb-Frank-2 ) ;
3403: LD_EXP 35
3407: PPUSH
3408: LD_STRING D4Fb-Frank-2
3410: PPUSH
3411: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
3415: LD_EXP 31
3419: PPUSH
3420: LD_STRING D4Fb-JMM-2
3422: PPUSH
3423: CALL_OW 88
// end ; DialogueOff ;
3427: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3431: LD_EXP 35
3435: PUSH
3436: EMPTY
3437: LIST
3438: PPUSH
3439: CALL_OW 85
// end ;
3443: LD_VAR 0 1
3447: RET
// export function fuspech3 ; begin
3448: LD_INT 0
3450: PPUSH
// end ;
3451: LD_VAR 0 1
3455: RET
// export function dialog_yamoko ; begin
3456: LD_INT 0
3458: PPUSH
// Say ( Yamoko , D3Y-Yam-1 ) ;
3459: LD_EXP 38
3463: PPUSH
3464: LD_STRING D3Y-Yam-1
3466: PPUSH
3467: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
3471: LD_EXP 31
3475: PPUSH
3476: LD_STRING D3Y-JMM-1
3478: PPUSH
3479: CALL_OW 88
// Say ( Yamoko , D3Y-Yam-2 ) ;
3483: LD_EXP 38
3487: PPUSH
3488: LD_STRING D3Y-Yam-2
3490: PPUSH
3491: CALL_OW 88
// result = Query ( QYamoko ) ;
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_STRING QYamoko
3502: PPUSH
3503: CALL_OW 97
3507: ST_TO_ADDR
// if result = 1 then
3508: LD_VAR 0 1
3512: PUSH
3513: LD_INT 1
3515: EQUAL
3516: IFFALSE 3544
// begin Say ( JMM , D3Ya-JMM-1 ) ;
3518: LD_EXP 31
3522: PPUSH
3523: LD_STRING D3Ya-JMM-1
3525: PPUSH
3526: CALL_OW 88
// Say ( Yamoko , D3Ya-Yam-1 ) ;
3530: LD_EXP 38
3534: PPUSH
3535: LD_STRING D3Ya-Yam-1
3537: PPUSH
3538: CALL_OW 88
// end else
3542: GO 3556
// Say ( JMM , D3Yb-JMM-1 ) ;
3544: LD_EXP 31
3548: PPUSH
3549: LD_STRING D3Yb-JMM-1
3551: PPUSH
3552: CALL_OW 88
// end ;
3556: LD_VAR 0 1
3560: RET
// export function yuspech1 ; begin
3561: LD_INT 0
3563: PPUSH
// DialogueOn ;
3564: CALL_OW 6
// Say ( Yamoko , D4Ya-Yam-1 ) ;
3568: LD_EXP 38
3572: PPUSH
3573: LD_STRING D4Ya-Yam-1
3575: PPUSH
3576: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
3580: LD_EXP 31
3584: PPUSH
3585: LD_STRING D4Ya-JMM-1
3587: PPUSH
3588: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3592: LD_EXP 1
3596: PPUSH
3597: LD_INT 6
3599: PPUSH
3600: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3604: LD_INT 111
3606: PPUSH
3607: LD_INT 123
3609: PPUSH
3610: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3614: LD_INT 32
3616: PPUSH
3617: LD_INT 39
3619: PPUSH
3620: CALL_OW 84
// Say ( Yamoko , D4Ya-Yam-2 ) ;
3624: LD_EXP 38
3628: PPUSH
3629: LD_STRING D4Ya-Yam-2
3631: PPUSH
3632: CALL_OW 88
// wait ( 0 0$3 ) ;
3636: LD_INT 105
3638: PPUSH
3639: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3643: LD_EXP 1
3647: PPUSH
3648: LD_INT 7
3650: PPUSH
3651: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3655: LD_INT 122
3657: PPUSH
3658: LD_INT 68
3660: PPUSH
3661: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
3665: LD_EXP 31
3669: PPUSH
3670: LD_STRING D4Ya-JMM-2
3672: PPUSH
3673: CALL_OW 88
// Say ( Yamoko , D4Ya-Yam-3 ) ;
3677: LD_EXP 38
3681: PPUSH
3682: LD_STRING D4Ya-Yam-3
3684: PPUSH
3685: CALL_OW 88
// DialogueOff ;
3689: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3693: LD_EXP 38
3697: PUSH
3698: EMPTY
3699: LIST
3700: PPUSH
3701: CALL_OW 85
// end ;
3705: LD_VAR 0 1
3709: RET
// export function yuspech2 ; begin
3710: LD_INT 0
3712: PPUSH
// DialogueOn ;
3713: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3717: LD_EXP 1
3721: PPUSH
3722: LD_INT 8
3724: PPUSH
3725: CALL_OW 332
// if IsOK ( Yamoko ) then
3729: LD_EXP 38
3733: PPUSH
3734: CALL_OW 302
3738: IFFALSE 3788
// begin Say ( Yamoko , D4Yc-Yam-1 ) ;
3740: LD_EXP 38
3744: PPUSH
3745: LD_STRING D4Yc-Yam-1
3747: PPUSH
3748: CALL_OW 88
// Say ( JMM , D4Yc-JMM-1 ) ;
3752: LD_EXP 31
3756: PPUSH
3757: LD_STRING D4Yc-JMM-1
3759: PPUSH
3760: CALL_OW 88
// Say ( Yamoko , D4Yc-Yam-2 ) ;
3764: LD_EXP 38
3768: PPUSH
3769: LD_STRING D4Yc-Yam-2
3771: PPUSH
3772: CALL_OW 88
// Say ( JMM , D4Yc-JMM-2 ) ;
3776: LD_EXP 31
3780: PPUSH
3781: LD_STRING D4Yc-JMM-2
3783: PPUSH
3784: CALL_OW 88
// end ; DialogueOff ;
3788: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3792: LD_EXP 38
3796: PUSH
3797: EMPTY
3798: LIST
3799: PPUSH
3800: CALL_OW 85
// end ;
3804: LD_VAR 0 1
3808: RET
// export function yuspech3 ; begin
3809: LD_INT 0
3811: PPUSH
// end ;
3812: LD_VAR 0 1
3816: RET
// every 0 0$1 trigger See ( You , A2_kam1 ) or See ( You , A2_kam2 ) or See ( You , A2_kam3 ) do
3817: LD_EXP 1
3821: PPUSH
3822: LD_INT 86
3824: PPUSH
3825: CALL_OW 292
3829: PUSH
3830: LD_EXP 1
3834: PPUSH
3835: LD_INT 85
3837: PPUSH
3838: CALL_OW 292
3842: OR
3843: PUSH
3844: LD_EXP 1
3848: PPUSH
3849: LD_INT 84
3851: PPUSH
3852: CALL_OW 292
3856: OR
3857: IFFALSE 4175
3859: GO 3861
3861: DISABLE
// begin while kecy do
3862: LD_LOC 7
3866: IFFALSE 3877
// wait ( 0 0$1 ) ;
3868: LD_INT 35
3870: PPUSH
3871: CALL_OW 67
3875: GO 3862
// kecy = true ;
3877: LD_ADDR_LOC 7
3881: PUSH
3882: LD_INT 1
3884: ST_TO_ADDR
// DialogueOn ;
3885: CALL_OW 6
// if See ( You , A2_kam1 ) then
3889: LD_EXP 1
3893: PPUSH
3894: LD_INT 86
3896: PPUSH
3897: CALL_OW 292
3901: IFFALSE 3912
// CenterNowOnUnits ( A2_kam1 ) else
3903: LD_INT 86
3905: PPUSH
3906: CALL_OW 87
3910: GO 3976
// if See ( You , A2_kam2 ) then
3912: LD_EXP 1
3916: PPUSH
3917: LD_INT 85
3919: PPUSH
3920: CALL_OW 292
3924: IFFALSE 3935
// CenterNowOnUnits ( A2_kam2 ) else
3926: LD_INT 85
3928: PPUSH
3929: CALL_OW 87
3933: GO 3976
// if See ( You , A2_kam3 ) then
3935: LD_EXP 1
3939: PPUSH
3940: LD_INT 84
3942: PPUSH
3943: CALL_OW 292
3947: IFFALSE 3958
// CenterNowOnUnits ( A2_kam3 ) else
3949: LD_INT 84
3951: PPUSH
3952: CALL_OW 87
3956: GO 3976
// CenterNowOnUnits ( [ A2_kam1 , A2_kam2 , A2_kam3 ] ) ;
3958: LD_INT 86
3960: PUSH
3961: LD_INT 85
3963: PUSH
3964: LD_INT 84
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: LIST
3971: PPUSH
3972: CALL_OW 87
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
3976: LD_ADDR_LOC 2
3980: PUSH
3981: LD_INT 1
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: LD_EXP 31
3991: PUSH
3992: EMPTY
3993: LIST
3994: PPUSH
3995: CALL 6495 0 3
3999: ST_TO_ADDR
// if pom < 0 then
4000: LD_LOC 2
4004: PUSH
4005: LD_INT 0
4007: LESS
4008: IFFALSE 4021
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4010: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4012: PPUSH
4013: CALL_OW 100
// konec_mise ;
4017: CALL 644 0 0
// end ; case pom of 0 :
4021: LD_LOC 2
4025: PUSH
4026: LD_INT 0
4028: DOUBLE
4029: EQUAL
4030: IFTRUE 4034
4032: GO 4057
4034: POP
// begin pom = JMM ;
4035: LD_ADDR_LOC 2
4039: PUSH
4040: LD_EXP 31
4044: ST_TO_ADDR
// pom1 = JMM ;
4045: LD_ADDR_LOC 3
4049: PUSH
4050: LD_EXP 31
4054: ST_TO_ADDR
// end ; 1 :
4055: GO 4121
4057: LD_INT 1
4059: DOUBLE
4060: EQUAL
4061: IFTRUE 4065
4063: GO 4092
4065: POP
// begin pom = pom [ 1 ] ;
4066: LD_ADDR_LOC 2
4070: PUSH
4071: LD_LOC 2
4075: PUSH
4076: LD_INT 1
4078: ARRAY
4079: ST_TO_ADDR
// pom1 = JMM ;
4080: LD_ADDR_LOC 3
4084: PUSH
4085: LD_EXP 31
4089: ST_TO_ADDR
// end ; else
4090: GO 4121
4092: POP
// begin pom1 = pom [ 2 ] ;
4093: LD_ADDR_LOC 3
4097: PUSH
4098: LD_LOC 2
4102: PUSH
4103: LD_INT 2
4105: ARRAY
4106: ST_TO_ADDR
// pom = pom [ 1 ] ;
4107: LD_ADDR_LOC 2
4111: PUSH
4112: LD_LOC 2
4116: PUSH
4117: LD_INT 1
4119: ARRAY
4120: ST_TO_ADDR
// end ; end ; DialogueOn ;
4121: CALL_OW 6
// Say ( pom , D5b-Sol1-1 ) ;
4125: LD_LOC 2
4129: PPUSH
4130: LD_STRING D5b-Sol1-1
4132: PPUSH
4133: CALL_OW 88
// Say ( pom1 , D5b-Sol2-1 ) ;
4137: LD_LOC 3
4141: PPUSH
4142: LD_STRING D5b-Sol2-1
4144: PPUSH
4145: CALL_OW 88
// DialogueOff ;
4149: CALL_OW 7
// if not disable_kecy_5D then
4153: LD_LOC 9
4157: NOT
4158: IFFALSE 4163
// enable ( 1 ) ;
4160: LD_INT 1
4162: ENABLE_MARKED
// DialogueOff ;
4163: CALL_OW 7
// kecy = false ;
4167: LD_ADDR_LOC 7
4171: PUSH
4172: LD_INT 0
4174: ST_TO_ADDR
// end ;
4175: END
// on UnitKamikazed ( un ) do begin if not KAMI then
4176: LD_LOC 8
4180: NOT
4181: IFFALSE 4377
// begin KAMI = true ;
4183: LD_ADDR_LOC 8
4187: PUSH
4188: LD_INT 1
4190: ST_TO_ADDR
// while kecy do
4191: LD_LOC 7
4195: IFFALSE 4206
// wait ( 0 0$1 ) ;
4197: LD_INT 35
4199: PPUSH
4200: CALL_OW 67
4204: GO 4191
// kecy = true ;
4206: LD_ADDR_LOC 7
4210: PUSH
4211: LD_INT 1
4213: ST_TO_ADDR
// wait ( 0 0$1.5 ) ;
4214: LD_INT 52
4216: PPUSH
4217: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4221: LD_ADDR_LOC 2
4225: PUSH
4226: LD_INT 22
4228: PUSH
4229: LD_EXP 1
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 21
4240: PUSH
4241: LD_INT 1
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 69
4256: ST_TO_ADDR
// pom = pom diff [ JMM ] ;
4257: LD_ADDR_LOC 2
4261: PUSH
4262: LD_LOC 2
4266: PUSH
4267: LD_EXP 31
4271: PUSH
4272: EMPTY
4273: LIST
4274: DIFF
4275: ST_TO_ADDR
// if pom > 0 then
4276: LD_LOC 2
4280: PUSH
4281: LD_INT 0
4283: GREATER
4284: IFFALSE 4359
// begin DialogueOn ;
4286: CALL_OW 6
// if GetSex ( pom [ 1 ] ) = sex_male then
4290: LD_LOC 2
4294: PUSH
4295: LD_INT 1
4297: ARRAY
4298: PPUSH
4299: CALL_OW 258
4303: PUSH
4304: LD_INT 1
4306: EQUAL
4307: IFFALSE 4327
// Say ( pom [ 1 ] , D5c-Sol1-1 ) else
4309: LD_LOC 2
4313: PUSH
4314: LD_INT 1
4316: ARRAY
4317: PPUSH
4318: LD_STRING D5c-Sol1-1
4320: PPUSH
4321: CALL_OW 88
4325: GO 4343
// Say ( pom [ 1 ] , D5c-FSol1-1 ) ;
4327: LD_LOC 2
4331: PUSH
4332: LD_INT 1
4334: ARRAY
4335: PPUSH
4336: LD_STRING D5c-FSol1-1
4338: PPUSH
4339: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
4343: LD_EXP 31
4347: PPUSH
4348: LD_STRING D5c-JMM-1
4350: PPUSH
4351: CALL_OW 88
// DialogueOff ;
4355: CALL_OW 7
// end ; if not disable_kecy_5D then
4359: LD_LOC 9
4363: NOT
4364: IFFALSE 4369
// enable ( 1 ) ;
4366: LD_INT 1
4368: ENABLE_MARKED
// kecy = false ;
4369: LD_ADDR_LOC 7
4373: PUSH
4374: LD_INT 0
4376: ST_TO_ADDR
// end ; enable ;
4377: ENABLE
// end ;
4378: PPOPN 1
4380: END
// every 0 0$1 trigger See ( You , A2_op1 ) or See ( You , A2_op2 ) or See ( You , A2_op3 ) do
4381: LD_EXP 1
4385: PPUSH
4386: LD_INT 89
4388: PPUSH
4389: CALL_OW 292
4393: PUSH
4394: LD_EXP 1
4398: PPUSH
4399: LD_INT 90
4401: PPUSH
4402: CALL_OW 292
4406: OR
4407: PUSH
4408: LD_EXP 1
4412: PPUSH
4413: LD_INT 91
4415: PPUSH
4416: CALL_OW 292
4420: OR
4421: IFFALSE 4720
4423: GO 4425
4425: DISABLE
// begin while kecy do
4426: LD_LOC 7
4430: IFFALSE 4441
// wait ( 0 0$1 ) ;
4432: LD_INT 35
4434: PPUSH
4435: CALL_OW 67
4439: GO 4426
// kecy = true ;
4441: LD_ADDR_LOC 7
4445: PUSH
4446: LD_INT 1
4448: ST_TO_ADDR
// CenterOnUnits ( [ A2_op1 , A2_op2 , A2_op3 ] ) ;
4449: LD_INT 89
4451: PUSH
4452: LD_INT 90
4454: PUSH
4455: LD_INT 91
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4467: LD_ADDR_LOC 2
4471: PUSH
4472: LD_INT 1
4474: PPUSH
4475: LD_INT 1
4477: PPUSH
4478: LD_EXP 31
4482: PUSH
4483: EMPTY
4484: LIST
4485: PPUSH
4486: CALL 6495 0 3
4490: ST_TO_ADDR
// if pom < 0 then
4491: LD_LOC 2
4495: PUSH
4496: LD_INT 0
4498: LESS
4499: IFFALSE 4512
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4501: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4503: PPUSH
4504: CALL_OW 100
// konec_mise ;
4508: CALL 644 0 0
// end ; case pom of 0 :
4512: LD_LOC 2
4516: PUSH
4517: LD_INT 0
4519: DOUBLE
4520: EQUAL
4521: IFTRUE 4525
4523: GO 4548
4525: POP
// begin pom = JMM ;
4526: LD_ADDR_LOC 2
4530: PUSH
4531: LD_EXP 31
4535: ST_TO_ADDR
// pom1 = JMM ;
4536: LD_ADDR_LOC 3
4540: PUSH
4541: LD_EXP 31
4545: ST_TO_ADDR
// end ; 1 :
4546: GO 4612
4548: LD_INT 1
4550: DOUBLE
4551: EQUAL
4552: IFTRUE 4556
4554: GO 4583
4556: POP
// begin pom = pom [ 1 ] ;
4557: LD_ADDR_LOC 2
4561: PUSH
4562: LD_LOC 2
4566: PUSH
4567: LD_INT 1
4569: ARRAY
4570: ST_TO_ADDR
// pom1 = JMM ;
4571: LD_ADDR_LOC 3
4575: PUSH
4576: LD_EXP 31
4580: ST_TO_ADDR
// end ; else
4581: GO 4612
4583: POP
// begin pom1 = pom [ 2 ] ;
4584: LD_ADDR_LOC 3
4588: PUSH
4589: LD_LOC 2
4593: PUSH
4594: LD_INT 2
4596: ARRAY
4597: ST_TO_ADDR
// pom = pom [ 1 ] ;
4598: LD_ADDR_LOC 2
4602: PUSH
4603: LD_LOC 2
4607: PUSH
4608: LD_INT 1
4610: ARRAY
4611: ST_TO_ADDR
// end ; end ; DialogueOn ;
4612: CALL_OW 6
// if GetSex ( pom ) = sex_male then
4616: LD_LOC 2
4620: PPUSH
4621: CALL_OW 258
4625: PUSH
4626: LD_INT 1
4628: EQUAL
4629: IFFALSE 4645
// Say ( pom , D5a-Sol1-1 ) else
4631: LD_LOC 2
4635: PPUSH
4636: LD_STRING D5a-Sol1-1
4638: PPUSH
4639: CALL_OW 88
4643: GO 4657
// Say ( pom , D5a-FSol1-1 ) ;
4645: LD_LOC 2
4649: PPUSH
4650: LD_STRING D5a-FSol1-1
4652: PPUSH
4653: CALL_OW 88
// if GetSex ( pom1 ) = sex_male then
4657: LD_LOC 3
4661: PPUSH
4662: CALL_OW 258
4666: PUSH
4667: LD_INT 1
4669: EQUAL
4670: IFFALSE 4686
// Say ( pom1 , D5a-Sol2-1 ) else
4672: LD_LOC 3
4676: PPUSH
4677: LD_STRING D5a-Sol2-1
4679: PPUSH
4680: CALL_OW 88
4684: GO 4698
// Say ( pom1 , D5a-FSol2-1 ) ;
4686: LD_LOC 3
4690: PPUSH
4691: LD_STRING D5a-FSol2-1
4693: PPUSH
4694: CALL_OW 88
// DialogueOff ;
4698: CALL_OW 7
// if not disable_kecy_5D then
4702: LD_LOC 9
4706: NOT
4707: IFFALSE 4712
// enable ( 1 ) ;
4709: LD_INT 1
4711: ENABLE_MARKED
// kecy = false ;
4712: LD_ADDR_LOC 7
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// end ;
4720: END
// every 0 0$1 trigger not disable_kecy_5D marked 1 do
4721: LD_LOC 9
4725: NOT
4726: IFFALSE 4919
4728: GO 4730
4730: DISABLE
// begin while kecy do
4731: LD_LOC 7
4735: IFFALSE 4746
// wait ( 0 0$1 ) ;
4737: LD_INT 35
4739: PPUSH
4740: CALL_OW 67
4744: GO 4731
// kecy = true ;
4746: LD_ADDR_LOC 7
4750: PUSH
4751: LD_INT 1
4753: ST_TO_ADDR
// if IsOK ( Lisa ) then
4754: LD_EXP 36
4758: PPUSH
4759: CALL_OW 302
4763: IFFALSE 4779
// Say ( Lisa , D5d-Lisa-1 ) else
4765: LD_EXP 36
4769: PPUSH
4770: LD_STRING D5d-Lisa-1
4772: PPUSH
4773: CALL_OW 88
4777: GO 4891
// if IsOK ( Cyrus ) then
4779: LD_EXP 39
4783: PPUSH
4784: CALL_OW 302
4788: IFFALSE 4804
// Say ( Cyrus , D5d-Cyrus-1 ) else
4790: LD_EXP 39
4794: PPUSH
4795: LD_STRING D5d-Cyrus-1
4797: PPUSH
4798: CALL_OW 88
4802: GO 4891
// if IsOK ( Gary ) then
4804: LD_EXP 33
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4829
// Say ( Gary , D5d-Gary-1 ) else
4815: LD_EXP 33
4819: PPUSH
4820: LD_STRING D5d-Gary-1
4822: PPUSH
4823: CALL_OW 88
4827: GO 4891
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4829: LD_ADDR_LOC 2
4833: PUSH
4834: LD_INT 22
4836: PUSH
4837: LD_EXP 1
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 1
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: ST_TO_ADDR
// if pom > 0 then
4865: LD_LOC 2
4869: PUSH
4870: LD_INT 0
4872: GREATER
4873: IFFALSE 4891
// Say ( pom [ 1 ] , D5d-Sol1-1 ) ;
4875: LD_LOC 2
4879: PUSH
4880: LD_INT 1
4882: ARRAY
4883: PPUSH
4884: LD_STRING D5d-Sol1-1
4886: PPUSH
4887: CALL_OW 88
// end ; Say ( JMM , D5d-JMM-1 ) ;
4891: LD_EXP 31
4895: PPUSH
4896: LD_STRING D5d-JMM-1
4898: PPUSH
4899: CALL_OW 88
// disable_kecy_5D = true ;
4903: LD_ADDR_LOC 9
4907: PUSH
4908: LD_INT 1
4910: ST_TO_ADDR
// kecy = false ;
4911: LD_ADDR_LOC 7
4915: PUSH
4916: LD_INT 0
4918: ST_TO_ADDR
// end ;
4919: END
// every 0 0$3 trigger GetSide ( A2_dep ) = You or IsDead ( A2_dep ) do var sci1 ;
4920: LD_INT 46
4922: PPUSH
4923: CALL_OW 255
4927: PUSH
4928: LD_EXP 1
4932: EQUAL
4933: PUSH
4934: LD_INT 46
4936: PPUSH
4937: CALL_OW 301
4941: OR
4942: IFFALSE 5147
4944: GO 4946
4946: DISABLE
4947: LD_INT 0
4949: PPUSH
// begin wait ( 0 0$1 ) ;
4950: LD_INT 35
4952: PPUSH
4953: CALL_OW 67
// CreateResourcesArea ( mat_artefact , 5 , Art_zone , false ) ;
4957: LD_INT 4
4959: PPUSH
4960: LD_INT 5
4962: PPUSH
4963: LD_INT 31
4965: PPUSH
4966: LD_INT 0
4968: PPUSH
4969: CALL_OW 59
// PlaceSeeing ( 16 , 9 , You , - 5 ) ;
4973: LD_INT 16
4975: PPUSH
4976: LD_INT 9
4978: PPUSH
4979: LD_EXP 1
4983: PPUSH
4984: LD_INT 5
4986: NEG
4987: PPUSH
4988: CALL_OW 330
// wait ( 0 0$1 ) ;
4992: LD_INT 35
4994: PPUSH
4995: CALL_OW 67
// DialogueOn ;
4999: CALL_OW 6
// CenterOnXY ( 17 , 10 ) ;
5003: LD_INT 17
5005: PPUSH
5006: LD_INT 10
5008: PPUSH
5009: CALL_OW 84
// pom = GetPeople ( sex_male , class_scientistic , [ JMM ] ) ;
5013: LD_ADDR_LOC 2
5017: PUSH
5018: LD_INT 1
5020: PPUSH
5021: LD_INT 4
5023: PPUSH
5024: LD_EXP 31
5028: PUSH
5029: EMPTY
5030: LIST
5031: PPUSH
5032: CALL 6495 0 3
5036: ST_TO_ADDR
// if pom > 0 then
5037: LD_LOC 2
5041: PUSH
5042: LD_INT 0
5044: GREATER
5045: IFFALSE 5063
// sci1 = pom [ 1 ] else
5047: LD_ADDR_VAR 0 1
5051: PUSH
5052: LD_LOC 2
5056: PUSH
5057: LD_INT 1
5059: ARRAY
5060: ST_TO_ADDR
5061: GO 5065
// exit ;
5063: GO 5147
// Say ( sci1 , D6-Sci1-1 ) ;
5065: LD_VAR 0 1
5069: PPUSH
5070: LD_STRING D6-Sci1-1
5072: PPUSH
5073: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5077: LD_EXP 31
5081: PPUSH
5082: LD_STRING D6-JMM-1
5084: PPUSH
5085: CALL_OW 88
// Say ( sci1 , D6-Sci1-2 ) ;
5089: LD_VAR 0 1
5093: PPUSH
5094: LD_STRING D6-Sci1-2
5096: PPUSH
5097: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5101: LD_EXP 31
5105: PPUSH
5106: LD_STRING D6-JMM-2
5108: PPUSH
5109: CALL_OW 88
// DialogueOff ;
5113: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
5117: LD_STRING M3
5119: PPUSH
5120: CALL_OW 337
// RemoveSeeing ( 16 , 9 , You ) ;
5124: LD_INT 16
5126: PPUSH
5127: LD_INT 9
5129: PPUSH
5130: LD_EXP 1
5134: PPUSH
5135: CALL_OW 331
// A2_dobyta = true ;
5139: LD_ADDR_EXP 28
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// end ;
5147: PPOPN 1
5149: END
// every 0 0$20 trigger A2_dobyta do
5150: LD_EXP 28
5154: IFFALSE 5493
5156: GO 5158
5158: DISABLE
// begin if A1_dobyta and A3_dobyta then
5159: LD_EXP 27
5163: PUSH
5164: LD_EXP 29
5168: AND
5169: IFFALSE 5173
// exit ;
5171: GO 5493
// wait ( 0 0$10 ) ;
5173: LD_INT 350
5175: PPUSH
5176: CALL_OW 67
// if not IsOK ( A3_solop ) then
5180: LD_INT 102
5182: PPUSH
5183: CALL_OW 302
5187: NOT
5188: IFFALSE 5192
// exit ;
5190: GO 5493
// DialogueOn ;
5192: CALL_OW 6
// pom = GetPeople ( sex_male , class_soldier , [ JMM , Cyrus , Gary , Bobby ] ) ;
5196: LD_ADDR_LOC 2
5200: PUSH
5201: LD_INT 1
5203: PPUSH
5204: LD_INT 1
5206: PPUSH
5207: LD_EXP 31
5211: PUSH
5212: LD_EXP 39
5216: PUSH
5217: LD_EXP 33
5221: PUSH
5222: LD_EXP 34
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL 6495 0 3
5237: ST_TO_ADDR
// if pom = 0 then
5238: LD_LOC 2
5242: PUSH
5243: LD_INT 0
5245: EQUAL
5246: IFFALSE 5272
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5248: LD_ADDR_LOC 2
5252: PUSH
5253: LD_INT 1
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: LD_EXP 31
5263: PUSH
5264: EMPTY
5265: LIST
5266: PPUSH
5267: CALL 6495 0 3
5271: ST_TO_ADDR
// if pom = 0 then
5272: LD_LOC 2
5276: PUSH
5277: LD_INT 0
5279: EQUAL
5280: IFFALSE 5294
// pom = JMM else
5282: LD_ADDR_LOC 2
5286: PUSH
5287: LD_EXP 31
5291: ST_TO_ADDR
5292: GO 5308
// pom = pom [ 1 ] ;
5294: LD_ADDR_LOC 2
5298: PUSH
5299: LD_LOC 2
5303: PUSH
5304: LD_INT 1
5306: ARRAY
5307: ST_TO_ADDR
// Say ( pom , D7-Sol1-1 ) ;
5308: LD_LOC 2
5312: PPUSH
5313: LD_STRING D7-Sol1-1
5315: PPUSH
5316: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
5320: LD_EXP 31
5324: PPUSH
5325: LD_STRING D7-JMM-1
5327: PPUSH
5328: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-1 ) ;
5332: LD_INT 102
5334: PPUSH
5335: LD_STRING D7-Ar1-1
5337: PPUSH
5338: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
5342: LD_EXP 31
5346: PPUSH
5347: LD_STRING D7-JMM-2
5349: PPUSH
5350: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-2 ) ;
5354: LD_INT 102
5356: PPUSH
5357: LD_STRING D7-Ar1-2
5359: PPUSH
5360: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
5364: LD_EXP 31
5368: PPUSH
5369: LD_STRING D7-JMM-3
5371: PPUSH
5372: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-3 ) ;
5376: LD_INT 102
5378: PPUSH
5379: LD_STRING D7-Ar1-3
5381: PPUSH
5382: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
5386: LD_EXP 31
5390: PPUSH
5391: LD_STRING D7-JMM-4
5393: PPUSH
5394: CALL_OW 88
// CenterOnXY ( 126 , 93 ) ;
5398: LD_INT 126
5400: PPUSH
5401: LD_INT 93
5403: PPUSH
5404: CALL_OW 84
// RevealFogArea ( You , Baziny ) ;
5408: LD_EXP 1
5412: PPUSH
5413: LD_INT 12
5415: PPUSH
5416: CALL_OW 332
// SayRadio ( A3_solop , D7-Ar1-4 ) ;
5420: LD_INT 102
5422: PPUSH
5423: LD_STRING D7-Ar1-4
5425: PPUSH
5426: CALL_OW 94
// pom = Query ( QCameras ) ;
5430: LD_ADDR_LOC 2
5434: PUSH
5435: LD_STRING QCameras
5437: PPUSH
5438: CALL_OW 97
5442: ST_TO_ADDR
// if pom = 1 then
5443: LD_LOC 2
5447: PUSH
5448: LD_INT 1
5450: EQUAL
5451: IFFALSE 5480
// begin oposoldier = 1 ;
5453: LD_ADDR_EXP 45
5457: PUSH
5458: LD_INT 1
5460: ST_TO_ADDR
// ChangeMissionObjectives ( MCar ) ;
5461: LD_STRING MCar
5463: PPUSH
5464: CALL_OW 337
// SetAreaMapShow ( baziny , 1 ) ;
5468: LD_INT 12
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: CALL_OW 424
// end else
5478: GO 5489
// oposoldier = - 1 ;
5480: LD_ADDR_EXP 45
5484: PUSH
5485: LD_INT 1
5487: NEG
5488: ST_TO_ADDR
// DialogueOff ;
5489: CALL_OW 7
// end ;
5493: END
// export function dialog_kamery ; begin
5494: LD_INT 0
5496: PPUSH
// if not IsOK ( A3_solop ) then
5497: LD_INT 102
5499: PPUSH
5500: CALL_OW 302
5504: NOT
5505: IFFALSE 5509
// exit ;
5507: GO 5611
// Say ( A3_solop , D7a-Ar1-1 ) ;
5509: LD_INT 102
5511: PPUSH
5512: LD_STRING D7a-Ar1-1
5514: PPUSH
5515: CALL_OW 88
// HiddenCamera ( 87 , 3 , You ) ;
5519: LD_INT 87
5521: PPUSH
5522: LD_INT 3
5524: PPUSH
5525: LD_EXP 1
5529: PPUSH
5530: CALL_OW 244
// HiddenCamera ( 105 , 39 , You ) ;
5534: LD_INT 105
5536: PPUSH
5537: LD_INT 39
5539: PPUSH
5540: LD_EXP 1
5544: PPUSH
5545: CALL_OW 244
// HiddenCamera ( 134 , 56 , You ) ;
5549: LD_INT 134
5551: PPUSH
5552: LD_INT 56
5554: PPUSH
5555: LD_EXP 1
5559: PPUSH
5560: CALL_OW 244
// HiddenCamera ( 122 , 51 , You ) ;
5564: LD_INT 122
5566: PPUSH
5567: LD_INT 51
5569: PPUSH
5570: LD_EXP 1
5574: PPUSH
5575: CALL_OW 244
// HiddenCamera ( 91 , 8 , You ) ;
5579: LD_INT 91
5581: PPUSH
5582: LD_INT 8
5584: PPUSH
5585: LD_EXP 1
5589: PPUSH
5590: CALL_OW 244
// ChangeMissionObjectives ( MCarOut ) ;
5594: LD_STRING MCarOut
5596: PPUSH
5597: CALL_OW 337
// SetAreaMapShow ( baziny , 0 ) ;
5601: LD_INT 12
5603: PPUSH
5604: LD_INT 0
5606: PPUSH
5607: CALL_OW 424
// end ;
5611: LD_VAR 0 1
5615: RET
// every 1 1$0 do
5616: GO 5618
5618: DISABLE
// begin wait ( timelimit [ difficulty ] ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_OWVAR 67
5628: ARRAY
5629: PPUSH
5630: CALL_OW 67
// InGameOn ;
5634: CALL_OW 8
// Say ( Powell , D9-Pow-1 ) ;
5638: LD_EXP 32
5642: PPUSH
5643: LD_STRING D9-Pow-1
5645: PPUSH
5646: CALL_OW 88
// InGameOff ;
5650: CALL_OW 9
// wait ( 10 10$0 ) ;
5654: LD_INT 21000
5656: PPUSH
5657: CALL_OW 67
// DialogueOn ;
5661: CALL_OW 6
// Say ( Powell , D9a-Pow-1 ) ;
5665: LD_EXP 32
5669: PPUSH
5670: LD_STRING D9a-Pow-1
5672: PPUSH
5673: CALL_OW 88
// end_of_mission_time ;
5677: CALL 454 0 0
// end ;
5681: END
// every 0 0$3 do
5682: GO 5684
5684: DISABLE
// begin pom1 = false ;
5685: LD_ADDR_LOC 3
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// pom = [ A3_are1 , A3_are2 , A3_are3 , A3_are4 , A3_are5 , A3_are6 , A3_are7 , A3_are8 , A3_are9 ] ;
5693: LD_ADDR_LOC 2
5697: PUSH
5698: LD_INT 23
5700: PUSH
5701: LD_INT 18
5703: PUSH
5704: LD_INT 44
5706: PUSH
5707: LD_INT 19
5709: PUSH
5710: LD_INT 24
5712: PUSH
5713: LD_INT 20
5715: PUSH
5716: LD_INT 21
5718: PUSH
5719: LD_INT 93
5721: PUSH
5722: LD_INT 22
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: ST_TO_ADDR
// for i in pom do
5736: LD_ADDR_LOC 1
5740: PUSH
5741: LD_LOC 2
5745: PUSH
5746: FOR_IN
5747: IFFALSE 5775
// if See ( You , i ) then
5749: LD_EXP 1
5753: PPUSH
5754: LD_LOC 1
5758: PPUSH
5759: CALL_OW 292
5763: IFFALSE 5773
// pom1 = true ;
5765: LD_ADDR_LOC 3
5769: PUSH
5770: LD_INT 1
5772: ST_TO_ADDR
5773: GO 5746
5775: POP
5776: POP
// if not pom1 then
5777: LD_LOC 3
5781: NOT
5782: IFFALSE 5787
// enable else
5784: ENABLE
5785: GO 6014
// begin if not ( IsOK ( A3_rv1 ) or IsOK ( A3_rv2 ) or IsOK ( A3_rv3 ) ) then
5787: LD_INT 26
5789: PPUSH
5790: CALL_OW 302
5794: PUSH
5795: LD_INT 25
5797: PPUSH
5798: CALL_OW 302
5802: OR
5803: PUSH
5804: LD_INT 27
5806: PPUSH
5807: CALL_OW 302
5811: OR
5812: NOT
5813: IFFALSE 5818
// begin disable ;
5815: DISABLE
// exit ;
5816: GO 6014
// end ; pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) ;
5818: LD_ADDR_LOC 2
5822: PUSH
5823: LD_INT 22
5825: PUSH
5826: LD_EXP 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 1
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PPUSH
5849: CALL_OW 69
5853: ST_TO_ADDR
// if pom = 0 then
5854: LD_LOC 2
5858: PUSH
5859: LD_INT 0
5861: EQUAL
5862: IFFALSE 5888
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5864: LD_ADDR_LOC 2
5868: PUSH
5869: LD_INT 1
5871: PPUSH
5872: LD_INT 1
5874: PPUSH
5875: LD_EXP 31
5879: PUSH
5880: EMPTY
5881: LIST
5882: PPUSH
5883: CALL 6495 0 3
5887: ST_TO_ADDR
// if pom = 0 then
5888: LD_LOC 2
5892: PUSH
5893: LD_INT 0
5895: EQUAL
5896: IFFALSE 5916
// pom = GetPeople ( sex_female , class_soldier , [ ] ) ;
5898: LD_ADDR_LOC 2
5902: PUSH
5903: LD_INT 2
5905: PPUSH
5906: LD_INT 1
5908: PPUSH
5909: EMPTY
5910: PPUSH
5911: CALL 6495 0 3
5915: ST_TO_ADDR
// if pom = 0 then
5916: LD_LOC 2
5920: PUSH
5921: LD_INT 0
5923: EQUAL
5924: IFFALSE 5939
// pom = [ JMM ] ;
5926: LD_ADDR_LOC 2
5930: PUSH
5931: LD_EXP 31
5935: PUSH
5936: EMPTY
5937: LIST
5938: ST_TO_ADDR
// if GetSex ( pom [ 1 ] ) = sex_male then
5939: LD_LOC 2
5943: PUSH
5944: LD_INT 1
5946: ARRAY
5947: PPUSH
5948: CALL_OW 258
5952: PUSH
5953: LD_INT 1
5955: EQUAL
5956: IFFALSE 5976
// Say ( pom [ 1 ] , D8-Sol1-1 ) else
5958: LD_LOC 2
5962: PUSH
5963: LD_INT 1
5965: ARRAY
5966: PPUSH
5967: LD_STRING D8-Sol1-1
5969: PPUSH
5970: CALL_OW 88
5974: GO 5992
// Say ( pom [ 1 ] , D8-FSol1-1 ) ;
5976: LD_LOC 2
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_STRING D8-FSol1-1
5987: PPUSH
5988: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5992: LD_EXP 31
5996: PPUSH
5997: LD_STRING D8-JMM-1
5999: PPUSH
6000: CALL_OW 88
// wait ( 0 0$20 ) ;
6004: LD_INT 700
6006: PPUSH
6007: CALL_OW 67
// enable ( 2 ) ;
6011: LD_INT 2
6013: ENABLE_MARKED
// end ; end ;
6014: END
// every 0 0$5 marked 2 do
6015: GO 6017
6017: DISABLE
// begin pom1 = false ;
6018: LD_ADDR_LOC 3
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// pom = [ A3_rv1 , A3_rv2 , A3_rv3 ] ;
6026: LD_ADDR_LOC 2
6030: PUSH
6031: LD_INT 26
6033: PUSH
6034: LD_INT 25
6036: PUSH
6037: LD_INT 27
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: ST_TO_ADDR
// for i in pom do
6045: LD_ADDR_LOC 1
6049: PUSH
6050: LD_LOC 2
6054: PUSH
6055: FOR_IN
6056: IFFALSE 6084
// if See ( You , i ) then
6058: LD_EXP 1
6062: PPUSH
6063: LD_LOC 1
6067: PPUSH
6068: CALL_OW 292
6072: IFFALSE 6082
// pom1 = true ;
6074: LD_ADDR_LOC 3
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
6082: GO 6055
6084: POP
6085: POP
// if not pom1 then
6086: LD_LOC 3
6090: NOT
6091: IFFALSE 6096
// enable else
6093: ENABLE
6094: GO 6361
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) diff JMM ;
6096: LD_ADDR_LOC 2
6100: PUSH
6101: LD_INT 22
6103: PUSH
6104: LD_EXP 1
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_INT 25
6115: PUSH
6116: LD_INT 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PPUSH
6127: CALL_OW 69
6131: PUSH
6132: LD_EXP 31
6136: DIFF
6137: ST_TO_ADDR
// if pom = 0 then
6138: LD_LOC 2
6142: PUSH
6143: LD_INT 0
6145: EQUAL
6146: IFFALSE 6172
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
6148: LD_ADDR_LOC 2
6152: PUSH
6153: LD_INT 1
6155: PPUSH
6156: LD_INT 1
6158: PPUSH
6159: LD_EXP 31
6163: PUSH
6164: EMPTY
6165: LIST
6166: PPUSH
6167: CALL 6495 0 3
6171: ST_TO_ADDR
// if pom = 0 then
6172: LD_LOC 2
6176: PUSH
6177: LD_INT 0
6179: EQUAL
6180: IFFALSE 6206
// pom = GetPeople ( sex_female , class_soldier , [ JMM ] ) ;
6182: LD_ADDR_LOC 2
6186: PUSH
6187: LD_INT 2
6189: PPUSH
6190: LD_INT 1
6192: PPUSH
6193: LD_EXP 31
6197: PUSH
6198: EMPTY
6199: LIST
6200: PPUSH
6201: CALL 6495 0 3
6205: ST_TO_ADDR
// if pom = 0 then
6206: LD_LOC 2
6210: PUSH
6211: LD_INT 0
6213: EQUAL
6214: IFFALSE 6258
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) diff JMM ;
6216: LD_ADDR_LOC 2
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_EXP 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 21
6235: PUSH
6236: LD_INT 1
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 69
6251: PUSH
6252: LD_EXP 31
6256: DIFF
6257: ST_TO_ADDR
// if pom = 0 then
6258: LD_LOC 2
6262: PUSH
6263: LD_INT 0
6265: EQUAL
6266: IFFALSE 6270
// exit ;
6268: GO 6361
// DialogueOn ;
6270: CALL_OW 6
// CenterOnUnits ( [ A3_rv1 , A3_rv2 , A3_rv3 ] ) ;
6274: LD_INT 26
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 27
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: PPUSH
6288: CALL_OW 85
// if GetSex ( pom [ 1 ] ) = sex_male then
6292: LD_LOC 2
6296: PUSH
6297: LD_INT 1
6299: ARRAY
6300: PPUSH
6301: CALL_OW 258
6305: PUSH
6306: LD_INT 1
6308: EQUAL
6309: IFFALSE 6329
// Say ( pom [ 1 ] , D8a-Sol2-1 ) else
6311: LD_LOC 2
6315: PUSH
6316: LD_INT 1
6318: ARRAY
6319: PPUSH
6320: LD_STRING D8a-Sol2-1
6322: PPUSH
6323: CALL_OW 88
6327: GO 6345
// Say ( pom [ 1 ] , D8a-FSol2-1 ) ;
6329: LD_LOC 2
6333: PUSH
6334: LD_INT 1
6336: ARRAY
6337: PPUSH
6338: LD_STRING D8a-FSol2-1
6340: PPUSH
6341: CALL_OW 88
// Say ( JMM , D8a-JMM-1 ) ;
6345: LD_EXP 31
6349: PPUSH
6350: LD_STRING D8a-JMM-1
6352: PPUSH
6353: CALL_OW 88
// DialogueOff ;
6357: CALL_OW 7
// end ; end ;
6361: END
// every 0 0$0.1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do var pom ;
6362: LD_INT 3
6364: PPUSH
6365: LD_INT 22
6367: PUSH
6368: LD_EXP 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: PPUSH
6380: CALL_OW 70
6384: PUSH
6385: LD_INT 0
6387: GREATER
6388: IFFALSE 6492
6390: GO 6392
6392: DISABLE
6393: LD_INT 0
6395: PPUSH
// begin case Rand ( 1 , 3 ) of 1 :
6396: LD_INT 1
6398: PPUSH
6399: LD_INT 3
6401: PPUSH
6402: CALL_OW 12
6406: PUSH
6407: LD_INT 1
6409: DOUBLE
6410: EQUAL
6411: IFTRUE 6415
6413: GO 6426
6415: POP
// pom = A1_vo1 ; 2 :
6416: LD_ADDR_VAR 0 1
6420: PUSH
6421: LD_INT 72
6423: ST_TO_ADDR
6424: GO 6465
6426: LD_INT 2
6428: DOUBLE
6429: EQUAL
6430: IFTRUE 6434
6432: GO 6445
6434: POP
// pom = A1_ve1 ; 3 :
6435: LD_ADDR_VAR 0 1
6439: PUSH
6440: LD_INT 87
6442: ST_TO_ADDR
6443: GO 6465
6445: LD_INT 3
6447: DOUBLE
6448: EQUAL
6449: IFTRUE 6453
6451: GO 6464
6453: POP
// pom = A1_vo4 ; end ;
6454: LD_ADDR_VAR 0 1
6458: PUSH
6459: LD_INT 76
6461: ST_TO_ADDR
6462: GO 6465
6464: POP
// if IsOK ( pom ) then
6465: LD_VAR 0 1
6469: PPUSH
6470: CALL_OW 302
6474: IFFALSE 6488
// Say ( pom , D2aa-Ar1-1 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_STRING D2aa-Ar1-1
6483: PPUSH
6484: CALL_OW 88
// uprav_zivoty_arabskych_budov ;
6488: CALL 23269 0 0
// end ;
6492: PPOPN 1
6494: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 , pom5 , pom6 ; var pom1a , pom2a , pom3a , pom4a , pom5a , pom6a ; var j ; begin
6495: LD_INT 0
6497: PPUSH
6498: PPUSH
6499: PPUSH
6500: PPUSH
6501: PPUSH
6502: PPUSH
6503: PPUSH
6504: PPUSH
6505: PPUSH
6506: PPUSH
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
6512: LD_ADDR_VAR 0 6
6516: PUSH
6517: LD_INT 22
6519: PUSH
6520: LD_EXP 1
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 25
6531: PUSH
6532: LD_INT 4
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 26
6541: PUSH
6542: LD_VAR 0 1
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: PPUSH
6556: CALL_OW 69
6560: ST_TO_ADDR
// pom1a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6561: LD_ADDR_VAR 0 12
6565: PUSH
6566: LD_INT 22
6568: PUSH
6569: LD_EXP 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 21
6580: PUSH
6581: LD_INT 2
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 33
6590: PUSH
6591: LD_INT 1
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: ST_TO_ADDR
// for j in pom1a do
6608: LD_ADDR_VAR 0 18
6612: PUSH
6613: LD_VAR 0 12
6617: PUSH
6618: FOR_IN
6619: IFFALSE 6659
// if GetClass ( Isdrivenby ( j ) ) = class_scientistic then
6621: LD_VAR 0 18
6625: PPUSH
6626: CALL_OW 311
6630: PPUSH
6631: CALL_OW 257
6635: PUSH
6636: LD_INT 4
6638: EQUAL
6639: IFFALSE 6657
// pom1 = pom1 ^ j ;
6641: LD_ADDR_VAR 0 6
6645: PUSH
6646: LD_VAR 0 6
6650: PUSH
6651: LD_VAR 0 18
6655: ADD
6656: ST_TO_ADDR
6657: GO 6618
6659: POP
6660: POP
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
6661: LD_ADDR_VAR 0 7
6665: PUSH
6666: LD_INT 22
6668: PUSH
6669: LD_EXP 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 25
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 26
6690: PUSH
6691: LD_VAR 0 1
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: PPUSH
6705: CALL_OW 69
6709: ST_TO_ADDR
// pom2a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6710: LD_ADDR_VAR 0 13
6714: PUSH
6715: LD_INT 22
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 2
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 33
6739: PUSH
6740: LD_INT 1
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: PPUSH
6752: CALL_OW 69
6756: ST_TO_ADDR
// for j in pom2a do
6757: LD_ADDR_VAR 0 18
6761: PUSH
6762: LD_VAR 0 13
6766: PUSH
6767: FOR_IN
6768: IFFALSE 6808
// if GetClass ( Isdrivenby ( j ) ) = class_mechanic then
6770: LD_VAR 0 18
6774: PPUSH
6775: CALL_OW 311
6779: PPUSH
6780: CALL_OW 257
6784: PUSH
6785: LD_INT 3
6787: EQUAL
6788: IFFALSE 6806
// pom2 = pom2 ^ j ;
6790: LD_ADDR_VAR 0 7
6794: PUSH
6795: LD_VAR 0 7
6799: PUSH
6800: LD_VAR 0 18
6804: ADD
6805: ST_TO_ADDR
6806: GO 6767
6808: POP
6809: POP
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
6810: LD_ADDR_VAR 0 8
6814: PUSH
6815: LD_INT 22
6817: PUSH
6818: LD_EXP 1
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 2
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 26
6839: PUSH
6840: LD_VAR 0 1
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: ST_TO_ADDR
// pom3a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6859: LD_ADDR_VAR 0 14
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_EXP 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 21
6878: PUSH
6879: LD_INT 2
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 33
6888: PUSH
6889: LD_INT 1
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 69
6905: ST_TO_ADDR
// for j in pom3a do
6906: LD_ADDR_VAR 0 18
6910: PUSH
6911: LD_VAR 0 14
6915: PUSH
6916: FOR_IN
6917: IFFALSE 6957
// if GetClass ( Isdrivenby ( j ) ) = class_engineer then
6919: LD_VAR 0 18
6923: PPUSH
6924: CALL_OW 311
6928: PPUSH
6929: CALL_OW 257
6933: PUSH
6934: LD_INT 2
6936: EQUAL
6937: IFFALSE 6955
// pom3 = pom3 ^ j ;
6939: LD_ADDR_VAR 0 8
6943: PUSH
6944: LD_VAR 0 8
6948: PUSH
6949: LD_VAR 0 18
6953: ADD
6954: ST_TO_ADDR
6955: GO 6916
6957: POP
6958: POP
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
6959: LD_ADDR_VAR 0 9
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_EXP 1
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 25
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 26
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: PPUSH
7003: CALL_OW 69
7007: ST_TO_ADDR
// pom4a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7008: LD_ADDR_VAR 0 15
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_EXP 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 21
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 33
7037: PUSH
7038: LD_INT 1
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PPUSH
7050: CALL_OW 69
7054: ST_TO_ADDR
// for j in pom4a do
7055: LD_ADDR_VAR 0 18
7059: PUSH
7060: LD_VAR 0 15
7064: PUSH
7065: FOR_IN
7066: IFFALSE 7106
// if GetClass ( Isdrivenby ( j ) ) = class_soldier then
7068: LD_VAR 0 18
7072: PPUSH
7073: CALL_OW 311
7077: PPUSH
7078: CALL_OW 257
7082: PUSH
7083: LD_INT 1
7085: EQUAL
7086: IFFALSE 7104
// pom4 = pom4 ^ j ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: LD_VAR 0 9
7097: PUSH
7098: LD_VAR 0 18
7102: ADD
7103: ST_TO_ADDR
7104: GO 7065
7106: POP
7107: POP
// pom5 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_sniper ] , [ f_sex , sex ] ] ) ;
7108: LD_ADDR_VAR 0 10
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_EXP 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 25
7127: PUSH
7128: LD_INT 5
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 26
7137: PUSH
7138: LD_VAR 0 1
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: PPUSH
7152: CALL_OW 69
7156: ST_TO_ADDR
// pom5a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7157: LD_ADDR_VAR 0 16
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_EXP 1
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 21
7176: PUSH
7177: LD_INT 2
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 33
7186: PUSH
7187: LD_INT 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: ST_TO_ADDR
// for j in pom5a do
7204: LD_ADDR_VAR 0 18
7208: PUSH
7209: LD_VAR 0 16
7213: PUSH
7214: FOR_IN
7215: IFFALSE 7255
// if GetClass ( Isdrivenby ( j ) ) = class_sniper then
7217: LD_VAR 0 18
7221: PPUSH
7222: CALL_OW 311
7226: PPUSH
7227: CALL_OW 257
7231: PUSH
7232: LD_INT 5
7234: EQUAL
7235: IFFALSE 7253
// pom5 = pom5 ^ j ;
7237: LD_ADDR_VAR 0 10
7241: PUSH
7242: LD_VAR 0 10
7246: PUSH
7247: LD_VAR 0 18
7251: ADD
7252: ST_TO_ADDR
7253: GO 7214
7255: POP
7256: POP
// pom6 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mortar ] , [ f_sex , sex ] ] ) ;
7257: LD_ADDR_VAR 0 11
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_EXP 1
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 25
7276: PUSH
7277: LD_INT 8
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: LD_INT 26
7286: PUSH
7287: LD_VAR 0 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 69
7305: ST_TO_ADDR
// pom6a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7306: LD_ADDR_VAR 0 17
7310: PUSH
7311: LD_INT 22
7313: PUSH
7314: LD_EXP 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 33
7335: PUSH
7336: LD_INT 1
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 69
7352: ST_TO_ADDR
// for j in pom6a do
7353: LD_ADDR_VAR 0 18
7357: PUSH
7358: LD_VAR 0 17
7362: PUSH
7363: FOR_IN
7364: IFFALSE 7404
// if GetClass ( Isdrivenby ( j ) ) = class_mortar then
7366: LD_VAR 0 18
7370: PPUSH
7371: CALL_OW 311
7375: PPUSH
7376: CALL_OW 257
7380: PUSH
7381: LD_INT 8
7383: EQUAL
7384: IFFALSE 7402
// pom6 = pom6 ^ j ;
7386: LD_ADDR_VAR 0 11
7390: PUSH
7391: LD_VAR 0 11
7395: PUSH
7396: LD_VAR 0 18
7400: ADD
7401: ST_TO_ADDR
7402: GO 7363
7404: POP
7405: POP
// case povolani of class_scientistic :
7406: LD_VAR 0 2
7410: PUSH
7411: LD_INT 4
7413: DOUBLE
7414: EQUAL
7415: IFTRUE 7419
7417: GO 7432
7419: POP
// pom = pom1 ; class_mechanic :
7420: LD_ADDR_VAR 0 5
7424: PUSH
7425: LD_VAR 0 6
7429: ST_TO_ADDR
7430: GO 7538
7432: LD_INT 3
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7453
7440: POP
// pom = pom2 ; class_engineer :
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_VAR 0 7
7450: ST_TO_ADDR
7451: GO 7538
7453: LD_INT 2
7455: DOUBLE
7456: EQUAL
7457: IFTRUE 7461
7459: GO 7474
7461: POP
// pom = pom3 ; class_soldier :
7462: LD_ADDR_VAR 0 5
7466: PUSH
7467: LD_VAR 0 8
7471: ST_TO_ADDR
7472: GO 7538
7474: LD_INT 1
7476: DOUBLE
7477: EQUAL
7478: IFTRUE 7482
7480: GO 7495
7482: POP
// pom = pom4 ; class_sniper :
7483: LD_ADDR_VAR 0 5
7487: PUSH
7488: LD_VAR 0 9
7492: ST_TO_ADDR
7493: GO 7538
7495: LD_INT 5
7497: DOUBLE
7498: EQUAL
7499: IFTRUE 7503
7501: GO 7516
7503: POP
// pom = pom5 ; class_mortar :
7504: LD_ADDR_VAR 0 5
7508: PUSH
7509: LD_VAR 0 10
7513: ST_TO_ADDR
7514: GO 7538
7516: LD_INT 8
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 7537
7524: POP
// pom = pom6 ; end ;
7525: LD_ADDR_VAR 0 5
7529: PUSH
7530: LD_VAR 0 11
7534: ST_TO_ADDR
7535: GO 7538
7537: POP
// if povolani <> class_scientistic then
7538: LD_VAR 0 2
7542: PUSH
7543: LD_INT 4
7545: NONEQUAL
7546: IFFALSE 7564
// pom = pom ^ pom1 ;
7548: LD_ADDR_VAR 0 5
7552: PUSH
7553: LD_VAR 0 5
7557: PUSH
7558: LD_VAR 0 6
7562: ADD
7563: ST_TO_ADDR
// if povolani <> class_mechanic then
7564: LD_VAR 0 2
7568: PUSH
7569: LD_INT 3
7571: NONEQUAL
7572: IFFALSE 7590
// pom = pom ^ pom2 ;
7574: LD_ADDR_VAR 0 5
7578: PUSH
7579: LD_VAR 0 5
7583: PUSH
7584: LD_VAR 0 7
7588: ADD
7589: ST_TO_ADDR
// if povolani <> class_engineer then
7590: LD_VAR 0 2
7594: PUSH
7595: LD_INT 2
7597: NONEQUAL
7598: IFFALSE 7616
// pom = pom ^ pom3 ;
7600: LD_ADDR_VAR 0 5
7604: PUSH
7605: LD_VAR 0 5
7609: PUSH
7610: LD_VAR 0 8
7614: ADD
7615: ST_TO_ADDR
// if povolani <> class_soldier then
7616: LD_VAR 0 2
7620: PUSH
7621: LD_INT 1
7623: NONEQUAL
7624: IFFALSE 7642
// pom = pom ^ pom4 ;
7626: LD_ADDR_VAR 0 5
7630: PUSH
7631: LD_VAR 0 5
7635: PUSH
7636: LD_VAR 0 9
7640: ADD
7641: ST_TO_ADDR
// if povolani <> class_sniper then
7642: LD_VAR 0 2
7646: PUSH
7647: LD_INT 5
7649: NONEQUAL
7650: IFFALSE 7668
// pom = pom ^ pom5 ;
7652: LD_ADDR_VAR 0 5
7656: PUSH
7657: LD_VAR 0 5
7661: PUSH
7662: LD_VAR 0 10
7666: ADD
7667: ST_TO_ADDR
// if povolani <> class_mortar then
7668: LD_VAR 0 2
7672: PUSH
7673: LD_INT 8
7675: NONEQUAL
7676: IFFALSE 7694
// pom = pom ^ pom6 ;
7678: LD_ADDR_VAR 0 5
7682: PUSH
7683: LD_VAR 0 5
7687: PUSH
7688: LD_VAR 0 11
7692: ADD
7693: ST_TO_ADDR
// result := pom diff diffseznam ;
7694: LD_ADDR_VAR 0 4
7698: PUSH
7699: LD_VAR 0 5
7703: PUSH
7704: LD_VAR 0 3
7708: DIFF
7709: ST_TO_ADDR
// end ;
7710: LD_VAR 0 4
7714: RET
// export function query_konec_mise ; var pom ; begin
7715: LD_INT 0
7717: PPUSH
7718: PPUSH
// pom = Query ( QEndMission ) ;
7719: LD_ADDR_VAR 0 2
7723: PUSH
7724: LD_STRING QEndMission
7726: PPUSH
7727: CALL_OW 97
7731: ST_TO_ADDR
// result := pom ;
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: LD_VAR 0 2
7741: ST_TO_ADDR
// end ;
7742: LD_VAR 0 1
7746: RET
// every 0 0$1 do var pom ; var jedn ;
7747: GO 7749
7749: DISABLE
7750: LD_INT 0
7752: PPUSH
7753: PPUSH
// begin jedn = 0 ;
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_INT 0
7761: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] , [ f_see , You ] ] ) ;
7762: LD_ADDR_VAR 0 1
7766: PUSH
7767: LD_INT 22
7769: PUSH
7770: LD_EXP 3
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 21
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 101
7791: PUSH
7792: LD_EXP 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: PPUSH
7806: CALL_OW 69
7810: ST_TO_ADDR
// for i in pom do
7811: LD_ADDR_LOC 1
7815: PUSH
7816: LD_VAR 0 1
7820: PUSH
7821: FOR_IN
7822: IFFALSE 7851
// if GetLives ( i ) < 250 then
7824: LD_LOC 1
7828: PPUSH
7829: CALL_OW 256
7833: PUSH
7834: LD_INT 250
7836: LESS
7837: IFFALSE 7849
// jedn = i ;
7839: LD_ADDR_VAR 0 2
7843: PUSH
7844: LD_LOC 1
7848: ST_TO_ADDR
7849: GO 7821
7851: POP
7852: POP
// if jedn <> 0 then
7853: LD_VAR 0 2
7857: PUSH
7858: LD_INT 0
7860: NONEQUAL
7861: IFFALSE 7872
// Hint ( stimulationdrugs ) else
7863: LD_STRING stimulationdrugs
7865: PPUSH
7866: CALL_OW 339
7870: GO 7873
// enable ;
7872: ENABLE
// end ; end_of_file
7873: PPOPN 2
7875: END
// export CREATE_AR_PROTIOFENZIVU_LIST ; export JEDNOTKY_BAZE_2_LIST ; export JEDNOTKY_BAZE_3_LIST ; export Ar_utok1_LIST ; export Ar_utok2_LIST ; export Ar_utok3_LIST ; export Ar_utok4_LIST ; export Ar_utoklast_LIST ; export AR_backa_LIST ; export GARYL ; export LISAL ; export YAML ; export FRANKL ; export CORNELL ; export BOBL ; export CYRL ; export DONL ; export BROWNL ; var ah , av ; function prepare_human ( sex , clas , level , name ) ; begin
7876: LD_INT 0
7878: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7879: LD_VAR 0 1
7883: PPUSH
7884: LD_VAR 0 2
7888: PPUSH
7889: LD_VAR 0 3
7893: PPUSH
7894: CALL_OW 380
// hc_name := name ;
7898: LD_ADDR_OWVAR 26
7902: PUSH
7903: LD_VAR 0 4
7907: ST_TO_ADDR
// end ;
7908: LD_VAR 0 5
7912: RET
// export function nacti_osobu ( ident ) ; begin
7913: LD_INT 0
7915: PPUSH
// if CheckCharacterSet ( ident ) then
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 29
7925: IFFALSE 7944
// result := CreateCharacter ( ident ) else
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 34
7941: ST_TO_ADDR
7942: GO 7952
// result := 0 ;
7944: LD_ADDR_VAR 0 2
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// end ;
7952: LD_VAR 0 2
7956: RET
// export function create_amici ; var i ; begin
7957: LD_INT 0
7959: PPUSH
7960: PPUSH
// uc_side = You ;
7961: LD_ADDR_OWVAR 20
7965: PUSH
7966: LD_EXP 1
7970: ST_TO_ADDR
// uc_nation = nation_american ;
7971: LD_ADDR_OWVAR 21
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
7979: LD_ADDR_OWVAR 37
7983: PUSH
7984: LD_INT 3
7986: ST_TO_ADDR
// vc_control = control_computer ;
7987: LD_ADDR_OWVAR 38
7991: PUSH
7992: LD_INT 3
7994: ST_TO_ADDR
// vc_engine = engine_solar ;
7995: LD_ADDR_OWVAR 39
7999: PUSH
8000: LD_INT 2
8002: ST_TO_ADDR
// vc_weapon = us_radar ;
8003: LD_ADDR_OWVAR 40
8007: PUSH
8008: LD_INT 11
8010: ST_TO_ADDR
// av = CreateVehicle ;
8011: LD_ADDR_LOC 11
8015: PUSH
8016: CALL_OW 45
8020: ST_TO_ADDR
// Radar_enter := av ;
8021: LD_ADDR_EXP 43
8025: PUSH
8026: LD_LOC 11
8030: ST_TO_ADDR
// PlaceUnitXY ( av , 85 , 145 , false ) ;
8031: LD_LOC 11
8035: PPUSH
8036: LD_INT 85
8038: PPUSH
8039: LD_INT 145
8041: PPUSH
8042: LD_INT 0
8044: PPUSH
8045: CALL_OW 48
// for i in Amici_enter do
8049: LD_ADDR_VAR 0 2
8053: PUSH
8054: LD_EXP 42
8058: PUSH
8059: FOR_IN
8060: IFFALSE 8079
// PlaceUnitArea ( i , AMEnter , false ) ;
8062: LD_VAR 0 2
8066: PPUSH
8067: LD_INT 1
8069: PPUSH
8070: LD_INT 0
8072: PPUSH
8073: CALL_OW 49
8077: GO 8059
8079: POP
8080: POP
// end ;
8081: LD_VAR 0 1
8085: RET
// export function create_ar_protiofenzivu ; var pom ; begin
8086: LD_INT 0
8088: PPUSH
8089: PPUSH
// pom = [ ] ;
8090: LD_ADDR_VAR 0 2
8094: PUSH
8095: EMPTY
8096: ST_TO_ADDR
// uc_side := Arabi ;
8097: LD_ADDR_OWVAR 20
8101: PUSH
8102: LD_EXP 3
8106: ST_TO_ADDR
// uc_nation := nation_arabian ;
8107: LD_ADDR_OWVAR 21
8111: PUSH
8112: LD_INT 2
8114: ST_TO_ADDR
// uc_direction := 3 ;
8115: LD_ADDR_OWVAR 24
8119: PUSH
8120: LD_INT 3
8122: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , Ar_levely [ difficulty ] , Hasam El Azis ) ;
8123: LD_INT 1
8125: PPUSH
8126: LD_INT 3
8128: PPUSH
8129: LD_EXP 48
8133: PUSH
8134: LD_OWVAR 67
8138: ARRAY
8139: PPUSH
8140: LD_STRING Hasam El Azis
8142: PPUSH
8143: CALL 7876 0 4
// ah = CreateHuman ;
8147: LD_ADDR_LOC 10
8151: PUSH
8152: CALL_OW 44
8156: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8157: LD_ADDR_OWVAR 37
8161: PUSH
8162: LD_INT 14
8164: ST_TO_ADDR
// vc_control := control_manual ;
8165: LD_ADDR_OWVAR 38
8169: PUSH
8170: LD_INT 1
8172: ST_TO_ADDR
// vc_engine := engine_combustion ;
8173: LD_ADDR_OWVAR 39
8177: PUSH
8178: LD_INT 1
8180: ST_TO_ADDR
// vc_weapon := ar_gun ;
8181: LD_ADDR_OWVAR 40
8185: PUSH
8186: LD_INT 27
8188: ST_TO_ADDR
// av = CreateVehicle ;
8189: LD_ADDR_LOC 11
8193: PUSH
8194: CALL_OW 45
8198: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8199: LD_LOC 10
8203: PPUSH
8204: LD_LOC 11
8208: PPUSH
8209: CALL_OW 52
// pom = pom ^ av ;
8213: LD_ADDR_VAR 0 2
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: LD_LOC 11
8227: ADD
8228: ST_TO_ADDR
// prepare_human ( sex_female , class_mechanic , Ar_levely [ difficulty ] - 2 ,  ) ;
8229: LD_INT 2
8231: PPUSH
8232: LD_INT 3
8234: PPUSH
8235: LD_EXP 48
8239: PUSH
8240: LD_OWVAR 67
8244: ARRAY
8245: PUSH
8246: LD_INT 2
8248: MINUS
8249: PPUSH
8250: LD_STRING 
8252: PPUSH
8253: CALL 7876 0 4
// ah = CreateHuman ;
8257: LD_ADDR_LOC 10
8261: PUSH
8262: CALL_OW 44
8266: ST_TO_ADDR
// vc_chassis := ar_light_trike ;
8267: LD_ADDR_OWVAR 37
8271: PUSH
8272: LD_INT 12
8274: ST_TO_ADDR
// vc_control := control_manual ;
8275: LD_ADDR_OWVAR 38
8279: PUSH
8280: LD_INT 1
8282: ST_TO_ADDR
// vc_engine := engine_solar ;
8283: LD_ADDR_OWVAR 39
8287: PUSH
8288: LD_INT 2
8290: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
8291: LD_ADDR_OWVAR 40
8295: PUSH
8296: LD_INT 24
8298: ST_TO_ADDR
// av = CreateVehicle ;
8299: LD_ADDR_LOC 11
8303: PUSH
8304: CALL_OW 45
8308: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8309: LD_LOC 10
8313: PPUSH
8314: LD_LOC 11
8318: PPUSH
8319: CALL_OW 52
// pom = pom ^ av ;
8323: LD_ADDR_VAR 0 2
8327: PUSH
8328: LD_VAR 0 2
8332: PUSH
8333: LD_LOC 11
8337: ADD
8338: ST_TO_ADDR
// if difficulty > 1 then
8339: LD_OWVAR 67
8343: PUSH
8344: LD_INT 1
8346: GREATER
8347: IFFALSE 8381
// begin ah = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
8349: LD_ADDR_LOC 10
8353: PUSH
8354: CALL 10413 0 0
8358: PPUSH
8359: LD_INT 1
8361: PPUSH
8362: LD_EXP 48
8366: PUSH
8367: LD_OWVAR 67
8371: ARRAY
8372: PPUSH
8373: LD_STRING 
8375: PPUSH
8376: CALL 13977 0 4
8380: ST_TO_ADDR
// end ; if difficulty > 2 then
8381: LD_OWVAR 67
8385: PUSH
8386: LD_INT 2
8388: GREATER
8389: IFFALSE 8449
// begin vc_chassis := ar_medium_trike ;
8391: LD_ADDR_OWVAR 37
8395: PUSH
8396: LD_INT 13
8398: ST_TO_ADDR
// vc_control := control_apeman ;
8399: LD_ADDR_OWVAR 38
8403: PUSH
8404: LD_INT 5
8406: ST_TO_ADDR
// vc_engine := engine_siberite ;
8407: LD_ADDR_OWVAR 39
8411: PUSH
8412: LD_INT 3
8414: ST_TO_ADDR
// vc_weapon := ar_multimissile_ballista ;
8415: LD_ADDR_OWVAR 40
8419: PUSH
8420: LD_INT 22
8422: ST_TO_ADDR
// av = CreateVehicle ;
8423: LD_ADDR_LOC 11
8427: PUSH
8428: CALL_OW 45
8432: ST_TO_ADDR
// pom = pom ^ av ;
8433: LD_ADDR_VAR 0 2
8437: PUSH
8438: LD_VAR 0 2
8442: PUSH
8443: LD_LOC 11
8447: ADD
8448: ST_TO_ADDR
// end ; CREATE_AR_PROTIOFENZIVU_LIST := pom ;
8449: LD_ADDR_EXP 9
8453: PUSH
8454: LD_VAR 0 2
8458: ST_TO_ADDR
// end ;
8459: LD_VAR 0 1
8463: RET
// export function create_auto_pro_solopa ; begin
8464: LD_INT 0
8466: PPUSH
// uc_side := Arabi ;
8467: LD_ADDR_OWVAR 20
8471: PUSH
8472: LD_EXP 3
8476: ST_TO_ADDR
// uc_nation := nation_arabian ;
8477: LD_ADDR_OWVAR 21
8481: PUSH
8482: LD_INT 2
8484: ST_TO_ADDR
// uc_direction := 3 ;
8485: LD_ADDR_OWVAR 24
8489: PUSH
8490: LD_INT 3
8492: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8493: LD_ADDR_OWVAR 37
8497: PUSH
8498: LD_INT 14
8500: ST_TO_ADDR
// vc_control := control_manual ;
8501: LD_ADDR_OWVAR 38
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// vc_engine := engine_siberite ;
8509: LD_ADDR_OWVAR 39
8513: PUSH
8514: LD_INT 3
8516: ST_TO_ADDR
// vc_weapon := ar_gun ;
8517: LD_ADDR_OWVAR 40
8521: PUSH
8522: LD_INT 27
8524: ST_TO_ADDR
// av := CreateVehicle ;
8525: LD_ADDR_LOC 11
8529: PUSH
8530: CALL_OW 45
8534: ST_TO_ADDR
// result := av ;
8535: LD_ADDR_VAR 0 1
8539: PUSH
8540: LD_LOC 11
8544: ST_TO_ADDR
// end ;
8545: LD_VAR 0 1
8549: RET
// var pom3 , pom4 , pom5 , pom6 , pom1 ; export function dodej_skily ; var pom , i ; begin
8550: LD_INT 0
8552: PPUSH
8553: PPUSH
8554: PPUSH
// uprav_cloveka ( A2_mor3 , class_mortar , Ar_levely [ difficulty ] ) ;
8555: LD_INT 92
8557: PPUSH
8558: LD_INT 8
8560: PPUSH
8561: LD_EXP 48
8565: PUSH
8566: LD_OWVAR 67
8570: ARRAY
8571: PPUSH
8572: CALL 8816 0 3
// uprav_cloveka ( A2_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8576: LD_INT 82
8578: PPUSH
8579: LD_INT 1
8581: PPUSH
8582: LD_EXP 48
8586: PUSH
8587: LD_OWVAR 67
8591: ARRAY
8592: PPUSH
8593: CALL 8816 0 3
// uprav_cloveka ( A2_zas2 , class_soldier , Ar_levely [ difficulty ] ) ;
8597: LD_INT 83
8599: PPUSH
8600: LD_INT 1
8602: PPUSH
8603: LD_EXP 48
8607: PUSH
8608: LD_OWVAR 67
8612: ARRAY
8613: PPUSH
8614: CALL 8816 0 3
// uprav_cloveka ( A3_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8618: LD_INT 101
8620: PPUSH
8621: LD_INT 1
8623: PPUSH
8624: LD_EXP 48
8628: PUSH
8629: LD_OWVAR 67
8633: ARRAY
8634: PPUSH
8635: CALL 8816 0 3
// uprav_cloveka ( A3_solop , class_engineer , Ar_levely [ difficulty ] ) ;
8639: LD_INT 102
8641: PPUSH
8642: LD_INT 2
8644: PPUSH
8645: LD_EXP 48
8649: PUSH
8650: LD_OWVAR 67
8654: ARRAY
8655: PPUSH
8656: CALL 8816 0 3
// pom = [ A3_rme1 , A3_rme2 , A3_rme3 ] ;
8660: LD_ADDR_VAR 0 2
8664: PUSH
8665: LD_INT 96
8667: PUSH
8668: LD_INT 95
8670: PUSH
8671: LD_INT 94
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: ST_TO_ADDR
// for i in pom do
8679: LD_ADDR_VAR 0 3
8683: PUSH
8684: LD_VAR 0 2
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8717
// uprav_cloveka ( i , class_mechanic , Ar_levely [ difficulty ] ) ;
8692: LD_VAR 0 3
8696: PPUSH
8697: LD_INT 3
8699: PPUSH
8700: LD_EXP 48
8704: PUSH
8705: LD_OWVAR 67
8709: ARRAY
8710: PPUSH
8711: CALL 8816 0 3
8715: GO 8689
8717: POP
8718: POP
// end ;
8719: LD_VAR 0 1
8723: RET
// function set_skills ( un , skills ) ; begin
8724: LD_INT 0
8726: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
8727: LD_VAR 0 1
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: LD_VAR 0 2
8739: PUSH
8740: LD_INT 1
8742: ARRAY
8743: PPUSH
8744: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_INT 2
8755: PPUSH
8756: LD_VAR 0 2
8760: PUSH
8761: LD_INT 2
8763: ARRAY
8764: PPUSH
8765: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
8769: LD_VAR 0 1
8773: PPUSH
8774: LD_INT 3
8776: PPUSH
8777: LD_VAR 0 2
8781: PUSH
8782: LD_INT 3
8784: ARRAY
8785: PPUSH
8786: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
8790: LD_VAR 0 1
8794: PPUSH
8795: LD_INT 4
8797: PPUSH
8798: LD_VAR 0 2
8802: PUSH
8803: LD_INT 4
8805: ARRAY
8806: PPUSH
8807: CALL_OW 237
// end ;
8811: LD_VAR 0 3
8815: RET
// function uprav_cloveka ( un , clas , lev ) ; begin
8816: LD_INT 0
8818: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
8819: LD_INT 1
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_VAR 0 3
8831: PPUSH
8832: LD_STRING 
8834: PPUSH
8835: CALL 7876 0 4
// ah = CreateHuman ;
8839: LD_ADDR_LOC 10
8843: PUSH
8844: CALL_OW 44
8848: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
8849: LD_ADDR_LOC 16
8853: PUSH
8854: LD_LOC 10
8858: PPUSH
8859: CALL 12380 0 1
8863: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_LOC 10
8873: PPUSH
8874: CALL 12380 0 1
8878: PPUSH
8879: CALL 8724 0 2
// DestroyUnit ( ah ) ;
8883: LD_LOC 10
8887: PPUSH
8888: CALL_OW 65
// end ;
8892: LD_VAR 0 4
8896: RET
// export function vytvor_opravare ; var pom ; begin
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
// uc_side := Arabi ;
8901: LD_ADDR_OWVAR 20
8905: PUSH
8906: LD_EXP 3
8910: ST_TO_ADDR
// uc_nation := nation_arabian ;
8911: LD_ADDR_OWVAR 21
8915: PUSH
8916: LD_INT 2
8918: ST_TO_ADDR
// uc_direction := 3 ;
8919: LD_ADDR_OWVAR 24
8923: PUSH
8924: LD_INT 3
8926: ST_TO_ADDR
// pom = [ ] ;
8927: LD_ADDR_VAR 0 2
8931: PUSH
8932: EMPTY
8933: ST_TO_ADDR
// if difficulty < 3 then
8934: LD_OWVAR 67
8938: PUSH
8939: LD_INT 3
8941: LESS
8942: IFFALSE 9016
// begin prepare_human ( sex_male , class_engineer , Ar_levely [ difficulty ] + 1 , Gru Pakansu ) ;
8944: LD_INT 1
8946: PPUSH
8947: LD_INT 2
8949: PPUSH
8950: LD_EXP 48
8954: PUSH
8955: LD_OWVAR 67
8959: ARRAY
8960: PUSH
8961: LD_INT 1
8963: PLUS
8964: PPUSH
8965: LD_STRING Gru Pakansu
8967: PPUSH
8968: CALL 7876 0 4
// ah = CreateHuman ;
8972: LD_ADDR_LOC 10
8976: PUSH
8977: CALL_OW 44
8981: ST_TO_ADDR
// PlaceUnitXY ( ah , 19 , 6 , false ) ;
8982: LD_LOC 10
8986: PPUSH
8987: LD_INT 19
8989: PPUSH
8990: LD_INT 6
8992: PPUSH
8993: LD_INT 0
8995: PPUSH
8996: CALL_OW 48
// pom = pom ^ ah ;
9000: LD_ADDR_VAR 0 2
9004: PUSH
9005: LD_VAR 0 2
9009: PUSH
9010: LD_LOC 10
9014: ADD
9015: ST_TO_ADDR
// end ; if difficulty < 2 then
9016: LD_OWVAR 67
9020: PUSH
9021: LD_INT 2
9023: LESS
9024: IFFALSE 9100
// begin prepare_human ( get_sex , class_engineer , Ar_levely [ difficulty ] + 2 ,  ) ;
9026: CALL 10413 0 0
9030: PPUSH
9031: LD_INT 2
9033: PPUSH
9034: LD_EXP 48
9038: PUSH
9039: LD_OWVAR 67
9043: ARRAY
9044: PUSH
9045: LD_INT 2
9047: PLUS
9048: PPUSH
9049: LD_STRING 
9051: PPUSH
9052: CALL 7876 0 4
// ah = CreateHuman ;
9056: LD_ADDR_LOC 10
9060: PUSH
9061: CALL_OW 44
9065: ST_TO_ADDR
// PlaceUnitXY ( ah , 25 , 1 , false ) ;
9066: LD_LOC 10
9070: PPUSH
9071: LD_INT 25
9073: PPUSH
9074: LD_INT 1
9076: PPUSH
9077: LD_INT 0
9079: PPUSH
9080: CALL_OW 48
// pom = pom ^ ah ;
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: LD_VAR 0 2
9093: PUSH
9094: LD_LOC 10
9098: ADD
9099: ST_TO_ADDR
// end ; result := pom ;
9100: LD_ADDR_VAR 0 1
9104: PUSH
9105: LD_VAR 0 2
9109: ST_TO_ADDR
// end ;
9110: LD_VAR 0 1
9114: RET
// export function vojcli_base_2 ; var pom ; var i , j ; begin
9115: LD_INT 0
9117: PPUSH
9118: PPUSH
9119: PPUSH
9120: PPUSH
// pom = [ ] ;
9121: LD_ADDR_VAR 0 2
9125: PUSH
9126: EMPTY
9127: ST_TO_ADDR
// uc_side := Arabi ;
9128: LD_ADDR_OWVAR 20
9132: PUSH
9133: LD_EXP 3
9137: ST_TO_ADDR
// uc_nation := nation_arabian ;
9138: LD_ADDR_OWVAR 21
9142: PUSH
9143: LD_INT 2
9145: ST_TO_ADDR
// uc_direction := 0 ;
9146: LD_ADDR_OWVAR 24
9150: PUSH
9151: LD_INT 0
9153: ST_TO_ADDR
// for i = 1 to 7 do
9154: LD_ADDR_VAR 0 3
9158: PUSH
9159: DOUBLE
9160: LD_INT 1
9162: DEC
9163: ST_TO_ADDR
9164: LD_INT 7
9166: PUSH
9167: FOR_TO
9168: IFFALSE 9242
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9170: LD_INT 1
9172: PPUSH
9173: LD_VAR 0 3
9177: PPUSH
9178: CALL 10448 0 2
9182: PPUSH
9183: LD_INT 1
9185: PPUSH
9186: LD_EXP 48
9190: PUSH
9191: LD_OWVAR 67
9195: ARRAY
9196: PPUSH
9197: LD_INT 1
9199: PPUSH
9200: LD_VAR 0 3
9204: PPUSH
9205: CALL 10664 0 2
9209: PPUSH
9210: CALL 7876 0 4
// ah = CreateHuman ;
9214: LD_ADDR_LOC 10
9218: PUSH
9219: CALL_OW 44
9223: ST_TO_ADDR
// pom = pom ^ ah ;
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_VAR 0 2
9233: PUSH
9234: LD_LOC 10
9238: ADD
9239: ST_TO_ADDR
// end ;
9240: GO 9167
9242: POP
9243: POP
// for i = 1 to 3 do
9244: LD_ADDR_VAR 0 3
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_INT 3
9256: PUSH
9257: FOR_TO
9258: IFFALSE 9332
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9260: LD_INT 1
9262: PPUSH
9263: LD_VAR 0 3
9267: PPUSH
9268: CALL 10448 0 2
9272: PPUSH
9273: LD_INT 8
9275: PPUSH
9276: LD_EXP 48
9280: PUSH
9281: LD_OWVAR 67
9285: ARRAY
9286: PPUSH
9287: LD_INT 1
9289: PPUSH
9290: LD_VAR 0 3
9294: PPUSH
9295: CALL 10664 0 2
9299: PPUSH
9300: CALL 7876 0 4
// ah = CreateHuman ;
9304: LD_ADDR_LOC 10
9308: PUSH
9309: CALL_OW 44
9313: ST_TO_ADDR
// pom = pom ^ ah ;
9314: LD_ADDR_VAR 0 2
9318: PUSH
9319: LD_VAR 0 2
9323: PUSH
9324: LD_LOC 10
9328: ADD
9329: ST_TO_ADDR
// end ;
9330: GO 9257
9332: POP
9333: POP
// for i = 1 to 2 do
9334: LD_ADDR_VAR 0 3
9338: PUSH
9339: DOUBLE
9340: LD_INT 1
9342: DEC
9343: ST_TO_ADDR
9344: LD_INT 2
9346: PUSH
9347: FOR_TO
9348: IFFALSE 9404
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
9350: CALL 10413 0 0
9354: PPUSH
9355: LD_INT 4
9357: PPUSH
9358: LD_EXP 48
9362: PUSH
9363: LD_OWVAR 67
9367: ARRAY
9368: PPUSH
9369: LD_STRING 
9371: PPUSH
9372: CALL 7876 0 4
// ah = CreateHuman ;
9376: LD_ADDR_LOC 10
9380: PUSH
9381: CALL_OW 44
9385: ST_TO_ADDR
// pom = pom ^ ah ;
9386: LD_ADDR_VAR 0 2
9390: PUSH
9391: LD_VAR 0 2
9395: PUSH
9396: LD_LOC 10
9400: ADD
9401: ST_TO_ADDR
// end ;
9402: GO 9347
9404: POP
9405: POP
// for i = 1 to 2 do
9406: LD_ADDR_VAR 0 3
9410: PUSH
9411: DOUBLE
9412: LD_INT 1
9414: DEC
9415: ST_TO_ADDR
9416: LD_INT 2
9418: PUSH
9419: FOR_TO
9420: IFFALSE 9502
// begin prepare_human ( get_sex_uprava ( 1 , i + 12 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i + 12 ) ) ;
9422: LD_INT 1
9424: PPUSH
9425: LD_VAR 0 3
9429: PUSH
9430: LD_INT 12
9432: PLUS
9433: PPUSH
9434: CALL 10448 0 2
9438: PPUSH
9439: LD_INT 8
9441: PPUSH
9442: LD_EXP 48
9446: PUSH
9447: LD_OWVAR 67
9451: ARRAY
9452: PPUSH
9453: LD_INT 1
9455: PPUSH
9456: LD_VAR 0 3
9460: PUSH
9461: LD_INT 12
9463: PLUS
9464: PPUSH
9465: CALL 10664 0 2
9469: PPUSH
9470: CALL 7876 0 4
// ah = CreateHuman ;
9474: LD_ADDR_LOC 10
9478: PUSH
9479: CALL_OW 44
9483: ST_TO_ADDR
// pom = pom ^ ah ;
9484: LD_ADDR_VAR 0 2
9488: PUSH
9489: LD_VAR 0 2
9493: PUSH
9494: LD_LOC 10
9498: ADD
9499: ST_TO_ADDR
// end ;
9500: GO 9419
9502: POP
9503: POP
// for i = 1 to 2 do
9504: LD_ADDR_VAR 0 3
9508: PUSH
9509: DOUBLE
9510: LD_INT 1
9512: DEC
9513: ST_TO_ADDR
9514: LD_INT 2
9516: PUSH
9517: FOR_TO
9518: IFFALSE 9600
// begin prepare_human ( get_sex_uprava ( 1 , i + 14 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 1 , i + 14 ) ) ;
9520: LD_INT 1
9522: PPUSH
9523: LD_VAR 0 3
9527: PUSH
9528: LD_INT 14
9530: PLUS
9531: PPUSH
9532: CALL 10448 0 2
9536: PPUSH
9537: LD_INT 2
9539: PPUSH
9540: LD_EXP 48
9544: PUSH
9545: LD_OWVAR 67
9549: ARRAY
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: LD_VAR 0 3
9558: PUSH
9559: LD_INT 14
9561: PLUS
9562: PPUSH
9563: CALL 10664 0 2
9567: PPUSH
9568: CALL 7876 0 4
// ah = CreateHuman ;
9572: LD_ADDR_LOC 10
9576: PUSH
9577: CALL_OW 44
9581: ST_TO_ADDR
// pom = pom ^ ah ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_LOC 10
9596: ADD
9597: ST_TO_ADDR
// end ;
9598: GO 9517
9600: POP
9601: POP
// for i = 1 to 4 do
9602: LD_ADDR_VAR 0 3
9606: PUSH
9607: DOUBLE
9608: LD_INT 1
9610: DEC
9611: ST_TO_ADDR
9612: LD_INT 4
9614: PUSH
9615: FOR_TO
9616: IFFALSE 9698
// begin prepare_human ( get_sex_uprava ( 1 , i + 16 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 16 ) ) ;
9618: LD_INT 1
9620: PPUSH
9621: LD_VAR 0 3
9625: PUSH
9626: LD_INT 16
9628: PLUS
9629: PPUSH
9630: CALL 10448 0 2
9634: PPUSH
9635: LD_INT 3
9637: PPUSH
9638: LD_EXP 48
9642: PUSH
9643: LD_OWVAR 67
9647: ARRAY
9648: PPUSH
9649: LD_INT 1
9651: PPUSH
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 16
9659: PLUS
9660: PPUSH
9661: CALL 10664 0 2
9665: PPUSH
9666: CALL 7876 0 4
// ah = CreateHuman ;
9670: LD_ADDR_LOC 10
9674: PUSH
9675: CALL_OW 44
9679: ST_TO_ADDR
// pom = pom ^ ah ;
9680: LD_ADDR_VAR 0 2
9684: PUSH
9685: LD_VAR 0 2
9689: PUSH
9690: LD_LOC 10
9694: ADD
9695: ST_TO_ADDR
// end ;
9696: GO 9615
9698: POP
9699: POP
// for i = 1 to 3 do
9700: LD_ADDR_VAR 0 3
9704: PUSH
9705: DOUBLE
9706: LD_INT 1
9708: DEC
9709: ST_TO_ADDR
9710: LD_INT 3
9712: PUSH
9713: FOR_TO
9714: IFFALSE 9796
// begin prepare_human ( get_sex_uprava ( 1 , i + 20 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 20 ) ) ;
9716: LD_INT 1
9718: PPUSH
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 20
9726: PLUS
9727: PPUSH
9728: CALL 10448 0 2
9732: PPUSH
9733: LD_INT 3
9735: PPUSH
9736: LD_EXP 48
9740: PUSH
9741: LD_OWVAR 67
9745: ARRAY
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: LD_VAR 0 3
9754: PUSH
9755: LD_INT 20
9757: PLUS
9758: PPUSH
9759: CALL 10664 0 2
9763: PPUSH
9764: CALL 7876 0 4
// ah = CreateHuman ;
9768: LD_ADDR_LOC 10
9772: PUSH
9773: CALL_OW 44
9777: ST_TO_ADDR
// pom = pom ^ ah ;
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_VAR 0 2
9787: PUSH
9788: LD_LOC 10
9792: ADD
9793: ST_TO_ADDR
// end ;
9794: GO 9713
9796: POP
9797: POP
// JEDNOTKY_BAZE_2_LIST = pom ;
9798: LD_ADDR_EXP 10
9802: PUSH
9803: LD_VAR 0 2
9807: ST_TO_ADDR
// end ;
9808: LD_VAR 0 1
9812: RET
// export function vojcli_base_3 ; var pom ; var i , j ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// pom = [ ] ;
9819: LD_ADDR_VAR 0 2
9823: PUSH
9824: EMPTY
9825: ST_TO_ADDR
// uc_side := Arabi ;
9826: LD_ADDR_OWVAR 20
9830: PUSH
9831: LD_EXP 3
9835: ST_TO_ADDR
// uc_nation := nation_arabian ;
9836: LD_ADDR_OWVAR 21
9840: PUSH
9841: LD_INT 2
9843: ST_TO_ADDR
// uc_direction := 0 ;
9844: LD_ADDR_OWVAR 24
9848: PUSH
9849: LD_INT 0
9851: ST_TO_ADDR
// for i = 1 to 4 do
9852: LD_ADDR_VAR 0 3
9856: PUSH
9857: DOUBLE
9858: LD_INT 1
9860: DEC
9861: ST_TO_ADDR
9862: LD_INT 4
9864: PUSH
9865: FOR_TO
9866: IFFALSE 9940
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9868: LD_INT 2
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: CALL 10448 0 2
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: LD_EXP 48
9888: PUSH
9889: LD_OWVAR 67
9893: ARRAY
9894: PPUSH
9895: LD_INT 2
9897: PPUSH
9898: LD_VAR 0 3
9902: PPUSH
9903: CALL 10664 0 2
9907: PPUSH
9908: CALL 7876 0 4
// ah = CreateHuman ;
9912: LD_ADDR_LOC 10
9916: PUSH
9917: CALL_OW 44
9921: ST_TO_ADDR
// pom = pom ^ ah ;
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_VAR 0 2
9931: PUSH
9932: LD_LOC 10
9936: ADD
9937: ST_TO_ADDR
// end ;
9938: GO 9865
9940: POP
9941: POP
// for i = 1 to 3 do
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: DOUBLE
9948: LD_INT 1
9950: DEC
9951: ST_TO_ADDR
9952: LD_INT 3
9954: PUSH
9955: FOR_TO
9956: IFFALSE 10030
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9958: LD_INT 2
9960: PPUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: CALL 10448 0 2
9970: PPUSH
9971: LD_INT 8
9973: PPUSH
9974: LD_EXP 48
9978: PUSH
9979: LD_OWVAR 67
9983: ARRAY
9984: PPUSH
9985: LD_INT 2
9987: PPUSH
9988: LD_VAR 0 3
9992: PPUSH
9993: CALL 10664 0 2
9997: PPUSH
9998: CALL 7876 0 4
// ah = CreateHuman ;
10002: LD_ADDR_LOC 10
10006: PUSH
10007: CALL_OW 44
10011: ST_TO_ADDR
// pom = pom ^ ah ;
10012: LD_ADDR_VAR 0 2
10016: PUSH
10017: LD_VAR 0 2
10021: PUSH
10022: LD_LOC 10
10026: ADD
10027: ST_TO_ADDR
// end ;
10028: GO 9955
10030: POP
10031: POP
// for i = 1 to 4 do
10032: LD_ADDR_VAR 0 3
10036: PUSH
10037: DOUBLE
10038: LD_INT 1
10040: DEC
10041: ST_TO_ADDR
10042: LD_INT 4
10044: PUSH
10045: FOR_TO
10046: IFFALSE 10128
// begin prepare_human ( get_sex_uprava ( 2 , i + 7 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 2 , i + 7 ) ) ;
10048: LD_INT 2
10050: PPUSH
10051: LD_VAR 0 3
10055: PUSH
10056: LD_INT 7
10058: PLUS
10059: PPUSH
10060: CALL 10448 0 2
10064: PPUSH
10065: LD_INT 3
10067: PPUSH
10068: LD_EXP 48
10072: PUSH
10073: LD_OWVAR 67
10077: ARRAY
10078: PPUSH
10079: LD_INT 2
10081: PPUSH
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 7
10089: PLUS
10090: PPUSH
10091: CALL 10664 0 2
10095: PPUSH
10096: CALL 7876 0 4
// ah = CreateHuman ;
10100: LD_ADDR_LOC 10
10104: PUSH
10105: CALL_OW 44
10109: ST_TO_ADDR
// pom = pom ^ ah ;
10110: LD_ADDR_VAR 0 2
10114: PUSH
10115: LD_VAR 0 2
10119: PUSH
10120: LD_LOC 10
10124: ADD
10125: ST_TO_ADDR
// end ;
10126: GO 10045
10128: POP
10129: POP
// for i = 1 to 2 do
10130: LD_ADDR_VAR 0 3
10134: PUSH
10135: DOUBLE
10136: LD_INT 1
10138: DEC
10139: ST_TO_ADDR
10140: LD_INT 2
10142: PUSH
10143: FOR_TO
10144: IFFALSE 10200
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
10146: CALL 10413 0 0
10150: PPUSH
10151: LD_INT 4
10153: PPUSH
10154: LD_EXP 48
10158: PUSH
10159: LD_OWVAR 67
10163: ARRAY
10164: PPUSH
10165: LD_STRING 
10167: PPUSH
10168: CALL 7876 0 4
// ah = CreateHuman ;
10172: LD_ADDR_LOC 10
10176: PUSH
10177: CALL_OW 44
10181: ST_TO_ADDR
// pom = pom ^ ah ;
10182: LD_ADDR_VAR 0 2
10186: PUSH
10187: LD_VAR 0 2
10191: PUSH
10192: LD_LOC 10
10196: ADD
10197: ST_TO_ADDR
// end ;
10198: GO 10143
10200: POP
10201: POP
// for i = 1 to 2 do
10202: LD_ADDR_VAR 0 3
10206: PUSH
10207: DOUBLE
10208: LD_INT 1
10210: DEC
10211: ST_TO_ADDR
10212: LD_INT 2
10214: PUSH
10215: FOR_TO
10216: IFFALSE 10298
// begin prepare_human ( get_sex_uprava ( 2 , i + 13 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i + 13 ) ) ;
10218: LD_INT 2
10220: PPUSH
10221: LD_VAR 0 3
10225: PUSH
10226: LD_INT 13
10228: PLUS
10229: PPUSH
10230: CALL 10448 0 2
10234: PPUSH
10235: LD_INT 8
10237: PPUSH
10238: LD_EXP 48
10242: PUSH
10243: LD_OWVAR 67
10247: ARRAY
10248: PPUSH
10249: LD_INT 2
10251: PPUSH
10252: LD_VAR 0 3
10256: PUSH
10257: LD_INT 13
10259: PLUS
10260: PPUSH
10261: CALL 10664 0 2
10265: PPUSH
10266: CALL 7876 0 4
// ah = CreateHuman ;
10270: LD_ADDR_LOC 10
10274: PUSH
10275: CALL_OW 44
10279: ST_TO_ADDR
// pom = pom ^ ah ;
10280: LD_ADDR_VAR 0 2
10284: PUSH
10285: LD_VAR 0 2
10289: PUSH
10290: LD_LOC 10
10294: ADD
10295: ST_TO_ADDR
// end ;
10296: GO 10215
10298: POP
10299: POP
// for i = 1 to 2 do
10300: LD_ADDR_VAR 0 3
10304: PUSH
10305: DOUBLE
10306: LD_INT 1
10308: DEC
10309: ST_TO_ADDR
10310: LD_INT 2
10312: PUSH
10313: FOR_TO
10314: IFFALSE 10396
// begin prepare_human ( get_sex_uprava ( 2 , i + 15 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 2 , i + 15 ) ) ;
10316: LD_INT 2
10318: PPUSH
10319: LD_VAR 0 3
10323: PUSH
10324: LD_INT 15
10326: PLUS
10327: PPUSH
10328: CALL 10448 0 2
10332: PPUSH
10333: LD_INT 2
10335: PPUSH
10336: LD_EXP 48
10340: PUSH
10341: LD_OWVAR 67
10345: ARRAY
10346: PPUSH
10347: LD_INT 2
10349: PPUSH
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 15
10357: PLUS
10358: PPUSH
10359: CALL 10664 0 2
10363: PPUSH
10364: CALL 7876 0 4
// ah = CreateHuman ;
10368: LD_ADDR_LOC 10
10372: PUSH
10373: CALL_OW 44
10377: ST_TO_ADDR
// pom = pom ^ ah ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_VAR 0 2
10387: PUSH
10388: LD_LOC 10
10392: ADD
10393: ST_TO_ADDR
// end ;
10394: GO 10313
10396: POP
10397: POP
// JEDNOTKY_BAZE_3_LIST = pom ;
10398: LD_ADDR_EXP 11
10402: PUSH
10403: LD_VAR 0 2
10407: ST_TO_ADDR
// end ;
10408: LD_VAR 0 1
10412: RET
// function get_sex ; begin
10413: LD_INT 0
10415: PPUSH
// if Prob ( 20 ) then
10416: LD_INT 20
10418: PPUSH
10419: CALL_OW 13
10423: IFFALSE 10435
// result = sex_female else
10425: LD_ADDR_VAR 0 1
10429: PUSH
10430: LD_INT 2
10432: ST_TO_ADDR
10433: GO 10443
// result = sex_male ;
10435: LD_ADDR_VAR 0 1
10439: PUSH
10440: LD_INT 1
10442: ST_TO_ADDR
// end ;
10443: LD_VAR 0 1
10447: RET
// function get_sex_uprava ( ser , cis ) ; var a ; begin
10448: LD_INT 0
10450: PPUSH
10451: PPUSH
// case ser of 1 :
10452: LD_VAR 0 1
10456: PUSH
10457: LD_INT 1
10459: DOUBLE
10460: EQUAL
10461: IFTRUE 10465
10463: GO 10557
10465: POP
// if cis = 1 then
10466: LD_VAR 0 2
10470: PUSH
10471: LD_INT 1
10473: EQUAL
10474: IFFALSE 10486
// a = sex_female else
10476: LD_ADDR_VAR 0 4
10480: PUSH
10481: LD_INT 2
10483: ST_TO_ADDR
10484: GO 10555
// if cis in [ 3 , 4 , 5 , 7 , 8 , 13 , 14 , 15 , 20 , 23 ] then
10486: LD_VAR 0 2
10490: PUSH
10491: LD_INT 3
10493: PUSH
10494: LD_INT 4
10496: PUSH
10497: LD_INT 5
10499: PUSH
10500: LD_INT 7
10502: PUSH
10503: LD_INT 8
10505: PUSH
10506: LD_INT 13
10508: PUSH
10509: LD_INT 14
10511: PUSH
10512: LD_INT 15
10514: PUSH
10515: LD_INT 20
10517: PUSH
10518: LD_INT 23
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: IN
10533: IFFALSE 10545
// a = sex_male else
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
10543: GO 10555
// a = get_sex ; 2 :
10545: LD_ADDR_VAR 0 4
10549: PUSH
10550: CALL 10413 0 0
10554: ST_TO_ADDR
10555: GO 10649
10557: LD_INT 2
10559: DOUBLE
10560: EQUAL
10561: IFTRUE 10565
10563: GO 10648
10565: POP
// if cis in [ 5 ] then
10566: LD_VAR 0 2
10570: PUSH
10571: LD_INT 5
10573: PUSH
10574: EMPTY
10575: LIST
10576: IN
10577: IFFALSE 10589
// a = sex_female else
10579: LD_ADDR_VAR 0 4
10583: PUSH
10584: LD_INT 2
10586: ST_TO_ADDR
10587: GO 10646
// if cis in [ 2 , 3 , 4 , 8 , 11 , 14 , 17 ] then
10589: LD_VAR 0 2
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: LD_INT 3
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: LD_INT 8
10605: PUSH
10606: LD_INT 11
10608: PUSH
10609: LD_INT 14
10611: PUSH
10612: LD_INT 17
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: IN
10624: IFFALSE 10636
// a = sex_male else
10626: LD_ADDR_VAR 0 4
10630: PUSH
10631: LD_INT 1
10633: ST_TO_ADDR
10634: GO 10646
// a = get_sex ; end ;
10636: LD_ADDR_VAR 0 4
10640: PUSH
10641: CALL 10413 0 0
10645: ST_TO_ADDR
10646: GO 10649
10648: POP
// result = a ;
10649: LD_ADDR_VAR 0 3
10653: PUSH
10654: LD_VAR 0 4
10658: ST_TO_ADDR
// end ;
10659: LD_VAR 0 3
10663: RET
// function get_name ( serie , cislo ) ; var a ; begin
10664: LD_INT 0
10666: PPUSH
10667: PPUSH
// a =  ;
10668: LD_ADDR_VAR 0 4
10672: PUSH
10673: LD_STRING 
10675: ST_TO_ADDR
// case serie of 1 :
10676: LD_VAR 0 1
10680: PUSH
10681: LD_INT 1
10683: DOUBLE
10684: EQUAL
10685: IFTRUE 10689
10687: GO 10907
10689: POP
// case cislo of 1 :
10690: LD_VAR 0 2
10694: PUSH
10695: LD_INT 1
10697: DOUBLE
10698: EQUAL
10699: IFTRUE 10703
10701: GO 10714
10703: POP
// a = Petronela Fagan ; 3 :
10704: LD_ADDR_VAR 0 4
10708: PUSH
10709: LD_STRING Petronela Fagan
10711: ST_TO_ADDR
10712: GO 10905
10714: LD_INT 3
10716: DOUBLE
10717: EQUAL
10718: IFTRUE 10722
10720: GO 10733
10722: POP
// a = Jaryn Floryk ; 4 :
10723: LD_ADDR_VAR 0 4
10727: PUSH
10728: LD_STRING Jaryn Floryk
10730: ST_TO_ADDR
10731: GO 10905
10733: LD_INT 4
10735: DOUBLE
10736: EQUAL
10737: IFTRUE 10741
10739: GO 10752
10741: POP
// a = Ira Smailer ; 5 :
10742: LD_ADDR_VAR 0 4
10746: PUSH
10747: LD_STRING Ira Smailer
10749: ST_TO_ADDR
10750: GO 10905
10752: LD_INT 5
10754: DOUBLE
10755: EQUAL
10756: IFTRUE 10760
10758: GO 10771
10760: POP
// a = Soren Rafin ; 7 :
10761: LD_ADDR_VAR 0 4
10765: PUSH
10766: LD_STRING Soren Rafin
10768: ST_TO_ADDR
10769: GO 10905
10771: LD_INT 7
10773: DOUBLE
10774: EQUAL
10775: IFTRUE 10779
10777: GO 10790
10779: POP
// a = Mark Kent ; 8 :
10780: LD_ADDR_VAR 0 4
10784: PUSH
10785: LD_STRING Mark Kent
10787: ST_TO_ADDR
10788: GO 10905
10790: LD_INT 8
10792: DOUBLE
10793: EQUAL
10794: IFTRUE 10798
10796: GO 10809
10798: POP
// a = Patrick Bull ; 13 :
10799: LD_ADDR_VAR 0 4
10803: PUSH
10804: LD_STRING Patrick Bull
10806: ST_TO_ADDR
10807: GO 10905
10809: LD_INT 13
10811: DOUBLE
10812: EQUAL
10813: IFTRUE 10817
10815: GO 10828
10817: POP
// a = Muzhid Galabi ; 14 :
10818: LD_ADDR_VAR 0 4
10822: PUSH
10823: LD_STRING Muzhid Galabi
10825: ST_TO_ADDR
10826: GO 10905
10828: LD_INT 14
10830: DOUBLE
10831: EQUAL
10832: IFTRUE 10836
10834: GO 10847
10836: POP
// a = Maxim Daigle ; 15 :
10837: LD_ADDR_VAR 0 4
10841: PUSH
10842: LD_STRING Maxim Daigle
10844: ST_TO_ADDR
10845: GO 10905
10847: LD_INT 15
10849: DOUBLE
10850: EQUAL
10851: IFTRUE 10855
10853: GO 10866
10855: POP
// a = Rick C. West ; 20 :
10856: LD_ADDR_VAR 0 4
10860: PUSH
10861: LD_STRING Rick C. West
10863: ST_TO_ADDR
10864: GO 10905
10866: LD_INT 20
10868: DOUBLE
10869: EQUAL
10870: IFTRUE 10874
10872: GO 10885
10874: POP
// a = Sinisa Mikhailovic ; 23 :
10875: LD_ADDR_VAR 0 4
10879: PUSH
10880: LD_STRING Sinisa Mikhailovic
10882: ST_TO_ADDR
10883: GO 10905
10885: LD_INT 23
10887: DOUBLE
10888: EQUAL
10889: IFTRUE 10893
10891: GO 10904
10893: POP
// a = Wayne Kettlewell ; end ; 2 :
10894: LD_ADDR_VAR 0 4
10898: PUSH
10899: LD_STRING Wayne Kettlewell
10901: ST_TO_ADDR
10902: GO 10905
10904: POP
10905: GO 11077
10907: LD_INT 2
10909: DOUBLE
10910: EQUAL
10911: IFTRUE 10915
10913: GO 11076
10915: POP
// case cislo of 2 :
10916: LD_VAR 0 2
10920: PUSH
10921: LD_INT 2
10923: DOUBLE
10924: EQUAL
10925: IFTRUE 10929
10927: GO 10940
10929: POP
// a = Danne Rydrgren ; 3 :
10930: LD_ADDR_VAR 0 4
10934: PUSH
10935: LD_STRING Danne Rydrgren
10937: ST_TO_ADDR
10938: GO 11074
10940: LD_INT 3
10942: DOUBLE
10943: EQUAL
10944: IFTRUE 10948
10946: GO 10959
10948: POP
// a = Alfred Van der Poel ; 4 :
10949: LD_ADDR_VAR 0 4
10953: PUSH
10954: LD_STRING Alfred Van der Poel
10956: ST_TO_ADDR
10957: GO 11074
10959: LD_INT 4
10961: DOUBLE
10962: EQUAL
10963: IFTRUE 10967
10965: GO 10978
10967: POP
// a = Muhammad Ali ; 5 :
10968: LD_ADDR_VAR 0 4
10972: PUSH
10973: LD_STRING Muhammad Ali
10975: ST_TO_ADDR
10976: GO 11074
10978: LD_INT 5
10980: DOUBLE
10981: EQUAL
10982: IFTRUE 10986
10984: GO 10997
10986: POP
// a = Elena Grubina ; 8 :
10987: LD_ADDR_VAR 0 4
10991: PUSH
10992: LD_STRING Elena Grubina
10994: ST_TO_ADDR
10995: GO 11074
10997: LD_INT 8
10999: DOUBLE
11000: EQUAL
11001: IFTRUE 11005
11003: GO 11016
11005: POP
// a = Oto Zimmerman ; 11 :
11006: LD_ADDR_VAR 0 4
11010: PUSH
11011: LD_STRING Oto Zimmerman
11013: ST_TO_ADDR
11014: GO 11074
11016: LD_INT 11
11018: DOUBLE
11019: EQUAL
11020: IFTRUE 11024
11022: GO 11035
11024: POP
// a = Neil Hoss ; 14 :
11025: LD_ADDR_VAR 0 4
11029: PUSH
11030: LD_STRING Neil Hoss
11032: ST_TO_ADDR
11033: GO 11074
11035: LD_INT 14
11037: DOUBLE
11038: EQUAL
11039: IFTRUE 11043
11041: GO 11054
11043: POP
// a = Cardi Nowitzke ; 17 :
11044: LD_ADDR_VAR 0 4
11048: PUSH
11049: LD_STRING Cardi Nowitzke
11051: ST_TO_ADDR
11052: GO 11074
11054: LD_INT 17
11056: DOUBLE
11057: EQUAL
11058: IFTRUE 11062
11060: GO 11073
11062: POP
// a = Leonard Van Horn ; end ; end ;
11063: LD_ADDR_VAR 0 4
11067: PUSH
11068: LD_STRING Leonard Van Horn
11070: ST_TO_ADDR
11071: GO 11074
11073: POP
11074: GO 11077
11076: POP
// result = a ;
11077: LD_ADDR_VAR 0 3
11081: PUSH
11082: LD_VAR 0 4
11086: ST_TO_ADDR
// end ;
11087: LD_VAR 0 3
11091: RET
// export function choose_vojaky ; var pom , i ; var ovyb ; var poc ; begin
11092: LD_INT 0
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
// SetClass ( JMM , class_soldier ) ;
11099: LD_EXP 31
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 336
// if Gary > 0 then
11111: LD_EXP 33
11115: PUSH
11116: LD_INT 0
11118: GREATER
11119: IFFALSE 11133
// SetClass ( Gary , class_soldier ) ;
11121: LD_EXP 33
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 336
// if Lisa > 0 then
11133: LD_EXP 36
11137: PUSH
11138: LD_INT 0
11140: GREATER
11141: IFFALSE 11155
// SetClass ( Lisa , class_soldier ) ;
11143: LD_EXP 36
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 336
// if Yamoko > 0 then
11155: LD_EXP 38
11159: PUSH
11160: LD_INT 0
11162: GREATER
11163: IFFALSE 11177
// SetClass ( Yamoko , class_soldier ) ;
11165: LD_EXP 38
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 336
// if Frank > 0 then
11177: LD_EXP 35
11181: PUSH
11182: LD_INT 0
11184: GREATER
11185: IFFALSE 11199
// SetClass ( Frank , class_soldier ) ;
11187: LD_EXP 35
11191: PPUSH
11192: LD_INT 1
11194: PPUSH
11195: CALL_OW 336
// if Cornel > 0 then
11199: LD_EXP 37
11203: PUSH
11204: LD_INT 0
11206: GREATER
11207: IFFALSE 11221
// SetClass ( Cornel , class_soldier ) ;
11209: LD_EXP 37
11213: PPUSH
11214: LD_INT 1
11216: PPUSH
11217: CALL_OW 336
// if Bobby > 0 then
11221: LD_EXP 34
11225: PUSH
11226: LD_INT 0
11228: GREATER
11229: IFFALSE 11243
// SetClass ( Bobby , class_soldier ) ;
11231: LD_EXP 34
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL_OW 336
// if Cyrus > 0 then
11243: LD_EXP 39
11247: PUSH
11248: LD_INT 0
11250: GREATER
11251: IFFALSE 11265
// SetClass ( Cyrus , class_soldier ) ;
11253: LD_EXP 39
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 336
// if Don > 0 then
11265: LD_EXP 40
11269: PUSH
11270: LD_INT 0
11272: GREATER
11273: IFFALSE 11287
// SetClass ( Don , class_engineer ) ;
11275: LD_EXP 40
11279: PPUSH
11280: LD_INT 2
11282: PPUSH
11283: CALL_OW 336
// if Brown > 0 then
11287: LD_EXP 41
11291: PUSH
11292: LD_INT 0
11294: GREATER
11295: IFFALSE 11309
// SetClass ( Brown , class_soldier ) ;
11297: LD_EXP 41
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: CALL_OW 336
// ovyb = [ sel_not_changeable , sel_hired , sel_dont_change_class , JMM ] ;
11309: LD_ADDR_VAR 0 4
11313: PUSH
11314: LD_INT -4
11316: PUSH
11317: LD_INT -1
11319: PUSH
11320: LD_INT -6
11322: PUSH
11323: LD_EXP 31
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: ST_TO_ADDR
// ovyb = ovyb ^ [ sel_not_hired , Powell , sel_changeable , sel_change_class ] ;
11334: LD_ADDR_VAR 0 4
11338: PUSH
11339: LD_VAR 0 4
11343: PUSH
11344: LD_INT -2
11346: PUSH
11347: LD_EXP 32
11351: PUSH
11352: LD_INT -3
11354: PUSH
11355: LD_INT -5
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: ADD
11364: ST_TO_ADDR
// poc = 0 ;
11365: LD_ADDR_VAR 0 5
11369: PUSH
11370: LD_INT 0
11372: ST_TO_ADDR
// if Gary <> 0 and GARYL <> 7 then
11373: LD_EXP 33
11377: PUSH
11378: LD_INT 0
11380: NONEQUAL
11381: PUSH
11382: LD_EXP 18
11386: PUSH
11387: LD_INT 7
11389: NONEQUAL
11390: AND
11391: IFFALSE 11423
// begin ovyb = ovyb ^ Gary ;
11393: LD_ADDR_VAR 0 4
11397: PUSH
11398: LD_VAR 0 4
11402: PUSH
11403: LD_EXP 33
11407: ADD
11408: ST_TO_ADDR
// poc = poc + 1 ;
11409: LD_ADDR_VAR 0 5
11413: PUSH
11414: LD_VAR 0 5
11418: PUSH
11419: LD_INT 1
11421: PLUS
11422: ST_TO_ADDR
// end ; if Lisa <> 0 and LISAL <> 7 then
11423: LD_EXP 36
11427: PUSH
11428: LD_INT 0
11430: NONEQUAL
11431: PUSH
11432: LD_EXP 19
11436: PUSH
11437: LD_INT 7
11439: NONEQUAL
11440: AND
11441: IFFALSE 11473
// begin ovyb = ovyb ^ Lisa ;
11443: LD_ADDR_VAR 0 4
11447: PUSH
11448: LD_VAR 0 4
11452: PUSH
11453: LD_EXP 36
11457: ADD
11458: ST_TO_ADDR
// poc = poc + 1 ;
11459: LD_ADDR_VAR 0 5
11463: PUSH
11464: LD_VAR 0 5
11468: PUSH
11469: LD_INT 1
11471: PLUS
11472: ST_TO_ADDR
// end ; if Cornel <> 0 and CORNELL <> 7 then
11473: LD_EXP 37
11477: PUSH
11478: LD_INT 0
11480: NONEQUAL
11481: PUSH
11482: LD_EXP 22
11486: PUSH
11487: LD_INT 7
11489: NONEQUAL
11490: AND
11491: IFFALSE 11523
// begin ovyb = ovyb ^ Cornel ;
11493: LD_ADDR_VAR 0 4
11497: PUSH
11498: LD_VAR 0 4
11502: PUSH
11503: LD_EXP 37
11507: ADD
11508: ST_TO_ADDR
// poc = poc + 1 ;
11509: LD_ADDR_VAR 0 5
11513: PUSH
11514: LD_VAR 0 5
11518: PUSH
11519: LD_INT 1
11521: PLUS
11522: ST_TO_ADDR
// end ; if Frank <> 0 and FRANKL <> 7 then
11523: LD_EXP 35
11527: PUSH
11528: LD_INT 0
11530: NONEQUAL
11531: PUSH
11532: LD_EXP 21
11536: PUSH
11537: LD_INT 7
11539: NONEQUAL
11540: AND
11541: IFFALSE 11573
// begin ovyb = ovyb ^ Frank ;
11543: LD_ADDR_VAR 0 4
11547: PUSH
11548: LD_VAR 0 4
11552: PUSH
11553: LD_EXP 35
11557: ADD
11558: ST_TO_ADDR
// poc = poc + 1 ;
11559: LD_ADDR_VAR 0 5
11563: PUSH
11564: LD_VAR 0 5
11568: PUSH
11569: LD_INT 1
11571: PLUS
11572: ST_TO_ADDR
// end ; if Yamoko <> 0 and ( Frank = 0 or FRANKL = 7 ) then
11573: LD_EXP 38
11577: PUSH
11578: LD_INT 0
11580: NONEQUAL
11581: PUSH
11582: LD_EXP 35
11586: PUSH
11587: LD_INT 0
11589: EQUAL
11590: PUSH
11591: LD_EXP 21
11595: PUSH
11596: LD_INT 7
11598: EQUAL
11599: OR
11600: AND
11601: IFFALSE 11633
// begin ovyb = ovyb ^ Yamoko ;
11603: LD_ADDR_VAR 0 4
11607: PUSH
11608: LD_VAR 0 4
11612: PUSH
11613: LD_EXP 38
11617: ADD
11618: ST_TO_ADDR
// poc = poc + 1 ;
11619: LD_ADDR_VAR 0 5
11623: PUSH
11624: LD_VAR 0 5
11628: PUSH
11629: LD_INT 1
11631: PLUS
11632: ST_TO_ADDR
// end ; if Bobby <> 0 and BOBL <> 7 then
11633: LD_EXP 34
11637: PUSH
11638: LD_INT 0
11640: NONEQUAL
11641: PUSH
11642: LD_EXP 23
11646: PUSH
11647: LD_INT 7
11649: NONEQUAL
11650: AND
11651: IFFALSE 11683
// begin ovyb = ovyb ^ Bobby ;
11653: LD_ADDR_VAR 0 4
11657: PUSH
11658: LD_VAR 0 4
11662: PUSH
11663: LD_EXP 34
11667: ADD
11668: ST_TO_ADDR
// poc = poc + 1 ;
11669: LD_ADDR_VAR 0 5
11673: PUSH
11674: LD_VAR 0 5
11678: PUSH
11679: LD_INT 1
11681: PLUS
11682: ST_TO_ADDR
// end ; if Cyrus <> 0 and CYRL <> 7 then
11683: LD_EXP 39
11687: PUSH
11688: LD_INT 0
11690: NONEQUAL
11691: PUSH
11692: LD_EXP 24
11696: PUSH
11697: LD_INT 7
11699: NONEQUAL
11700: AND
11701: IFFALSE 11733
// begin ovyb = ovyb ^ Cyrus ;
11703: LD_ADDR_VAR 0 4
11707: PUSH
11708: LD_VAR 0 4
11712: PUSH
11713: LD_EXP 39
11717: ADD
11718: ST_TO_ADDR
// poc = poc + 1 ;
11719: LD_ADDR_VAR 0 5
11723: PUSH
11724: LD_VAR 0 5
11728: PUSH
11729: LD_INT 1
11731: PLUS
11732: ST_TO_ADDR
// end ; if Don <> 0 and DONL <> 7 then
11733: LD_EXP 40
11737: PUSH
11738: LD_INT 0
11740: NONEQUAL
11741: PUSH
11742: LD_EXP 25
11746: PUSH
11747: LD_INT 7
11749: NONEQUAL
11750: AND
11751: IFFALSE 11783
// begin ovyb = ovyb ^ Don ;
11753: LD_ADDR_VAR 0 4
11757: PUSH
11758: LD_VAR 0 4
11762: PUSH
11763: LD_EXP 40
11767: ADD
11768: ST_TO_ADDR
// poc = poc + 1 ;
11769: LD_ADDR_VAR 0 5
11773: PUSH
11774: LD_VAR 0 5
11778: PUSH
11779: LD_INT 1
11781: PLUS
11782: ST_TO_ADDR
// end ; if Brown <> 0 and BROWNL then
11783: LD_EXP 41
11787: PUSH
11788: LD_INT 0
11790: NONEQUAL
11791: PUSH
11792: LD_EXP 26
11796: AND
11797: IFFALSE 11829
// begin ovyb = ovyb ^ Brown ;
11799: LD_ADDR_VAR 0 4
11803: PUSH
11804: LD_VAR 0 4
11808: PUSH
11809: LD_EXP 41
11813: ADD
11814: ST_TO_ADDR
// poc = poc + 1 ;
11815: LD_ADDR_VAR 0 5
11819: PUSH
11820: LD_VAR 0 5
11824: PUSH
11825: LD_INT 1
11827: PLUS
11828: ST_TO_ADDR
// end ; pom = uprav_lidi ( lidi_other ) ;
11829: LD_ADDR_VAR 0 2
11833: PUSH
11834: LD_EXP 51
11838: PPUSH
11839: CALL 12196 0 1
11843: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11844: LD_ADDR_VAR 0 4
11848: PUSH
11849: LD_VAR 0 4
11853: PUSH
11854: LD_VAR 0 2
11858: ADD
11859: ST_TO_ADDR
// poc = poc + pom + 0 ;
11860: LD_ADDR_VAR 0 5
11864: PUSH
11865: LD_VAR 0 5
11869: PUSH
11870: LD_VAR 0 2
11874: PLUS
11875: PUSH
11876: LD_INT 0
11878: PLUS
11879: ST_TO_ADDR
// uc_side := You ;
11880: LD_ADDR_OWVAR 20
11884: PUSH
11885: LD_EXP 1
11889: ST_TO_ADDR
// uc_nation := nation_american ;
11890: LD_ADDR_OWVAR 21
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// uc_direction := 0 ;
11898: LD_ADDR_OWVAR 24
11902: PUSH
11903: LD_INT 0
11905: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , 6 ,  ) ;
11906: LD_INT 1
11908: PPUSH
11909: LD_INT 2
11911: PPUSH
11912: LD_INT 6
11914: PPUSH
11915: LD_STRING 
11917: PPUSH
11918: CALL 7876 0 4
// pom = CreateHuman ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: CALL_OW 44
11931: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11932: LD_ADDR_VAR 0 4
11936: PUSH
11937: LD_VAR 0 4
11941: PUSH
11942: LD_VAR 0 2
11946: ADD
11947: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
11948: LD_INT 1
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: LD_INT 6
11956: PPUSH
11957: LD_STRING 
11959: PPUSH
11960: CALL 7876 0 4
// pom = CreateHuman ;
11964: LD_ADDR_VAR 0 2
11968: PUSH
11969: CALL_OW 44
11973: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11974: LD_ADDR_VAR 0 4
11978: PUSH
11979: LD_VAR 0 4
11983: PUSH
11984: LD_VAR 0 2
11988: ADD
11989: ST_TO_ADDR
// poc = poc + 2 ;
11990: LD_ADDR_VAR 0 5
11994: PUSH
11995: LD_VAR 0 5
11999: PUSH
12000: LD_INT 2
12002: PLUS
12003: ST_TO_ADDR
// if poc < 20 then
12004: LD_VAR 0 5
12008: PUSH
12009: LD_INT 20
12011: LESS
12012: IFFALSE 12116
// for i := 1 to 20 - poc do
12014: LD_ADDR_VAR 0 3
12018: PUSH
12019: DOUBLE
12020: LD_INT 1
12022: DEC
12023: ST_TO_ADDR
12024: LD_INT 20
12026: PUSH
12027: LD_VAR 0 5
12031: MINUS
12032: PUSH
12033: FOR_TO
12034: IFFALSE 12114
// begin if Rand ( 1 , 2 ) = 1 then
12036: LD_INT 1
12038: PPUSH
12039: LD_INT 2
12041: PPUSH
12042: CALL_OW 12
12046: PUSH
12047: LD_INT 1
12049: EQUAL
12050: IFFALSE 12070
// prepare_human ( sex_male , class_engineer , 6 ,  ) else
12052: LD_INT 1
12054: PPUSH
12055: LD_INT 2
12057: PPUSH
12058: LD_INT 6
12060: PPUSH
12061: LD_STRING 
12063: PPUSH
12064: CALL 7876 0 4
12068: GO 12086
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
12070: LD_INT 1
12072: PPUSH
12073: LD_INT 1
12075: PPUSH
12076: LD_INT 6
12078: PPUSH
12079: LD_STRING 
12081: PPUSH
12082: CALL 7876 0 4
// pom = CreateHuman ;
12086: LD_ADDR_VAR 0 2
12090: PUSH
12091: CALL_OW 44
12095: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12096: LD_ADDR_VAR 0 4
12100: PUSH
12101: LD_VAR 0 4
12105: PUSH
12106: LD_VAR 0 2
12110: ADD
12111: ST_TO_ADDR
// end ;
12112: GO 12033
12114: POP
12115: POP
// Amici_enter = CharacterSelection ( Choose 11 people , 11 , 11 , ovyb , [ [ class_engineer , 1 ] , [ class_soldier , 4 ] , [ class_mechanic , 0 ] ] ) ;
12116: LD_ADDR_EXP 42
12120: PUSH
12121: LD_STRING Choose 11 people
12123: PPUSH
12124: LD_INT 11
12126: PPUSH
12127: LD_INT 11
12129: PPUSH
12130: LD_VAR 0 4
12134: PPUSH
12135: LD_INT 2
12137: PUSH
12138: LD_INT 1
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 1
12147: PUSH
12148: LD_INT 4
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 3
12157: PUSH
12158: LD_INT 0
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 42
12174: ST_TO_ADDR
// Amici_enter = Amici_enter ^ JMM ;
12175: LD_ADDR_EXP 42
12179: PUSH
12180: LD_EXP 42
12184: PUSH
12185: LD_EXP 31
12189: ADD
12190: ST_TO_ADDR
// end ;
12191: LD_VAR 0 1
12195: RET
// function uprav_lidi ( lidi ) ; var pom , i ; var sk ; begin
12196: LD_INT 0
12198: PPUSH
12199: PPUSH
12200: PPUSH
12201: PPUSH
// pom = [ ] ;
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: EMPTY
12208: ST_TO_ADDR
// for i in lidi do
12209: LD_ADDR_VAR 0 4
12213: PUSH
12214: LD_VAR 0 1
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12363
// begin sk = get_skills ( i ) ;
12222: LD_ADDR_VAR 0 5
12226: PUSH
12227: LD_VAR 0 4
12231: PPUSH
12232: CALL 12380 0 1
12236: ST_TO_ADDR
// if sk [ 4 ] > sk [ 1 ] and sk [ 4 ] > sk [ 2 ] and sk [ 4 ] > sk [ 3 ] then
12237: LD_VAR 0 5
12241: PUSH
12242: LD_INT 4
12244: ARRAY
12245: PUSH
12246: LD_VAR 0 5
12250: PUSH
12251: LD_INT 1
12253: ARRAY
12254: GREATER
12255: PUSH
12256: LD_VAR 0 5
12260: PUSH
12261: LD_INT 4
12263: ARRAY
12264: PUSH
12265: LD_VAR 0 5
12269: PUSH
12270: LD_INT 2
12272: ARRAY
12273: GREATER
12274: AND
12275: PUSH
12276: LD_VAR 0 5
12280: PUSH
12281: LD_INT 4
12283: ARRAY
12284: PUSH
12285: LD_VAR 0 5
12289: PUSH
12290: LD_INT 3
12292: ARRAY
12293: GREATER
12294: AND
12295: IFFALSE 12299
// continue ;
12297: GO 12219
// if sk [ 1 ] > sk [ 2 ] then
12299: LD_VAR 0 5
12303: PUSH
12304: LD_INT 1
12306: ARRAY
12307: PUSH
12308: LD_VAR 0 5
12312: PUSH
12313: LD_INT 2
12315: ARRAY
12316: GREATER
12317: IFFALSE 12333
// SetClass ( i , class_soldier ) else
12319: LD_VAR 0 4
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 336
12331: GO 12345
// SetClass ( i , class_engineer ) ;
12333: LD_VAR 0 4
12337: PPUSH
12338: LD_INT 2
12340: PPUSH
12341: CALL_OW 336
// pom = pom ^ i ;
12345: LD_ADDR_VAR 0 3
12349: PUSH
12350: LD_VAR 0 3
12354: PUSH
12355: LD_VAR 0 4
12359: ADD
12360: ST_TO_ADDR
// end ;
12361: GO 12219
12363: POP
12364: POP
// result := pom ;
12365: LD_ADDR_VAR 0 2
12369: PUSH
12370: LD_VAR 0 3
12374: ST_TO_ADDR
// end ;
12375: LD_VAR 0 2
12379: RET
// function get_skills ( un ) ; var pom1 , pom2 , pom3 , pom4 ; begin
12380: LD_INT 0
12382: PPUSH
12383: PPUSH
12384: PPUSH
12385: PPUSH
12386: PPUSH
// pom1 := GetSkill ( un , skill_combat ) ;
12387: LD_ADDR_VAR 0 3
12391: PUSH
12392: LD_VAR 0 1
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 259
12404: ST_TO_ADDR
// pom2 := GetSkill ( un , skill_engineering ) ;
12405: LD_ADDR_VAR 0 4
12409: PUSH
12410: LD_VAR 0 1
12414: PPUSH
12415: LD_INT 2
12417: PPUSH
12418: CALL_OW 259
12422: ST_TO_ADDR
// pom3 := GetSkill ( un , skill_mechanical ) ;
12423: LD_ADDR_VAR 0 5
12427: PUSH
12428: LD_VAR 0 1
12432: PPUSH
12433: LD_INT 3
12435: PPUSH
12436: CALL_OW 259
12440: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_scientistic ) ;
12441: LD_ADDR_VAR 0 6
12445: PUSH
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_INT 4
12453: PPUSH
12454: CALL_OW 259
12458: ST_TO_ADDR
// result := [ pom1 , pom2 , pom3 , pom4 ] end ;
12459: LD_ADDR_VAR 0 2
12463: PUSH
12464: LD_VAR 0 3
12468: PUSH
12469: LD_VAR 0 4
12473: PUSH
12474: LD_VAR 0 5
12478: PUSH
12479: LD_VAR 0 6
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: ST_TO_ADDR
12490: LD_VAR 0 2
12494: RET
// export function create_arabske_utoky_behem_mise ; var pom ; begin
12495: LD_INT 0
12497: PPUSH
12498: PPUSH
// uc_side = Arabi ;
12499: LD_ADDR_OWVAR 20
12503: PUSH
12504: LD_EXP 3
12508: ST_TO_ADDR
// uc_nation = nation_arabian ;
12509: LD_ADDR_OWVAR 21
12513: PUSH
12514: LD_INT 2
12516: ST_TO_ADDR
// pom = [ ] ;
12517: LD_ADDR_VAR 0 2
12521: PUSH
12522: EMPTY
12523: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12524: LD_ADDR_VAR 0 2
12528: PUSH
12529: CALL 10413 0 0
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: LD_INT 4
12539: PPUSH
12540: LD_STRING 
12542: PPUSH
12543: CALL 13977 0 4
12547: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12548: LD_ADDR_VAR 0 2
12552: PUSH
12553: LD_VAR 0 2
12557: PUSH
12558: CALL 10413 0 0
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: LD_INT 4
12568: PPUSH
12569: LD_STRING 
12571: PPUSH
12572: CALL 13977 0 4
12576: ADD
12577: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12578: LD_ADDR_VAR 0 2
12582: PUSH
12583: LD_VAR 0 2
12587: PUSH
12588: CALL 10413 0 0
12592: PPUSH
12593: LD_INT 8
12595: PPUSH
12596: LD_INT 5
12598: PPUSH
12599: LD_STRING 
12601: PPUSH
12602: CALL 13977 0 4
12606: ADD
12607: ST_TO_ADDR
// if difficulty > 1 then
12608: LD_OWVAR 67
12612: PUSH
12613: LD_INT 1
12615: GREATER
12616: IFFALSE 12648
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: LD_VAR 0 2
12627: PUSH
12628: CALL 10413 0 0
12632: PPUSH
12633: LD_INT 8
12635: PPUSH
12636: LD_INT 5
12638: PPUSH
12639: LD_STRING 
12641: PPUSH
12642: CALL 13977 0 4
12646: ADD
12647: ST_TO_ADDR
// if difficulty > 2 then
12648: LD_OWVAR 67
12652: PUSH
12653: LD_INT 2
12655: GREATER
12656: IFFALSE 12688
// pom = pom ^ get_human ( get_sex , class_soldier , 5 ,  ) ;
12658: LD_ADDR_VAR 0 2
12662: PUSH
12663: LD_VAR 0 2
12667: PUSH
12668: CALL 10413 0 0
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: LD_INT 5
12678: PPUSH
12679: LD_STRING 
12681: PPUSH
12682: CALL 13977 0 4
12686: ADD
12687: ST_TO_ADDR
// Ar_utok1_LIST = pom ;
12688: LD_ADDR_EXP 12
12692: PUSH
12693: LD_VAR 0 2
12697: ST_TO_ADDR
// pom = [ ] ;
12698: LD_ADDR_VAR 0 2
12702: PUSH
12703: EMPTY
12704: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
12705: LD_ADDR_OWVAR 37
12709: PUSH
12710: LD_INT 14
12712: ST_TO_ADDR
// vc_weapon = ar_gun ;
12713: LD_ADDR_OWVAR 40
12717: PUSH
12718: LD_INT 27
12720: ST_TO_ADDR
// vc_control = control_apeman ;
12721: LD_ADDR_OWVAR 38
12725: PUSH
12726: LD_INT 5
12728: ST_TO_ADDR
// vc_engine = engine_siberite ;
12729: LD_ADDR_OWVAR 39
12733: PUSH
12734: LD_INT 3
12736: ST_TO_ADDR
// av = CreateVehicle ;
12737: LD_ADDR_LOC 11
12741: PUSH
12742: CALL_OW 45
12746: ST_TO_ADDR
// pom = av ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_LOC 11
12756: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 4 ,  ) ;
12757: LD_ADDR_LOC 10
12761: PUSH
12762: CALL 10413 0 0
12766: PPUSH
12767: LD_INT 3
12769: PPUSH
12770: LD_INT 4
12772: PPUSH
12773: LD_STRING 
12775: PPUSH
12776: CALL 13977 0 4
12780: ST_TO_ADDR
// vc_control = control_manual ;
12781: LD_ADDR_OWVAR 38
12785: PUSH
12786: LD_INT 1
12788: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
12789: LD_ADDR_OWVAR 40
12793: PUSH
12794: LD_INT 25
12796: ST_TO_ADDR
// av = CreateVehicle ;
12797: LD_ADDR_LOC 11
12801: PUSH
12802: CALL_OW 45
12806: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
12807: LD_LOC 10
12811: PPUSH
12812: LD_LOC 11
12816: PPUSH
12817: CALL_OW 52
// pom = pom ^ av ;
12821: LD_ADDR_VAR 0 2
12825: PUSH
12826: LD_VAR 0 2
12830: PUSH
12831: LD_LOC 11
12835: ADD
12836: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12837: LD_ADDR_VAR 0 2
12841: PUSH
12842: LD_VAR 0 2
12846: PUSH
12847: CALL 10413 0 0
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: LD_INT 4
12857: PPUSH
12858: LD_STRING 
12860: PPUSH
12861: CALL 13977 0 4
12865: ADD
12866: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_VAR 0 2
12876: PUSH
12877: CALL 10413 0 0
12881: PPUSH
12882: LD_INT 2
12884: PPUSH
12885: LD_EXP 48
12889: PUSH
12890: LD_OWVAR 67
12894: ARRAY
12895: PPUSH
12896: LD_STRING 
12898: PPUSH
12899: CALL 13977 0 4
12903: ADD
12904: ST_TO_ADDR
// if difficulty > 1 then
12905: LD_OWVAR 67
12909: PUSH
12910: LD_INT 1
12912: GREATER
12913: IFFALSE 12991
// begin pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12915: LD_ADDR_VAR 0 2
12919: PUSH
12920: LD_VAR 0 2
12924: PUSH
12925: CALL 10413 0 0
12929: PPUSH
12930: LD_INT 2
12932: PPUSH
12933: LD_EXP 48
12937: PUSH
12938: LD_OWVAR 67
12942: ARRAY
12943: PPUSH
12944: LD_STRING 
12946: PPUSH
12947: CALL 13977 0 4
12951: ADD
12952: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
12953: LD_ADDR_VAR 0 2
12957: PUSH
12958: LD_VAR 0 2
12962: PUSH
12963: CALL 10413 0 0
12967: PPUSH
12968: LD_INT 1
12970: PPUSH
12971: LD_EXP 48
12975: PUSH
12976: LD_OWVAR 67
12980: ARRAY
12981: PPUSH
12982: LD_STRING 
12984: PPUSH
12985: CALL 13977 0 4
12989: ADD
12990: ST_TO_ADDR
// end ; Ar_utok2_LIST = pom ;
12991: LD_ADDR_EXP 13
12995: PUSH
12996: LD_VAR 0 2
13000: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: CALL 10413 0 0
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: LD_INT 4
13016: PPUSH
13017: LD_STRING 
13019: PPUSH
13020: CALL 13977 0 4
13024: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13025: LD_ADDR_VAR 0 2
13029: PUSH
13030: LD_VAR 0 2
13034: PUSH
13035: CALL 10413 0 0
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: LD_INT 4
13045: PPUSH
13046: LD_STRING 
13048: PPUSH
13049: CALL 13977 0 4
13053: ADD
13054: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13055: LD_ADDR_VAR 0 2
13059: PUSH
13060: LD_VAR 0 2
13064: PUSH
13065: CALL 10413 0 0
13069: PPUSH
13070: LD_INT 8
13072: PPUSH
13073: LD_EXP 48
13077: PUSH
13078: LD_OWVAR 67
13082: ARRAY
13083: PPUSH
13084: LD_STRING 
13086: PPUSH
13087: CALL 13977 0 4
13091: ADD
13092: ST_TO_ADDR
// if difficulty > 1 then
13093: LD_OWVAR 67
13097: PUSH
13098: LD_INT 1
13100: GREATER
13101: IFFALSE 13229
// begin pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13103: LD_ADDR_VAR 0 2
13107: PUSH
13108: LD_VAR 0 2
13112: PUSH
13113: CALL 10413 0 0
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 4
13123: PPUSH
13124: LD_STRING 
13126: PPUSH
13127: CALL 13977 0 4
13131: ADD
13132: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13133: LD_ADDR_VAR 0 2
13137: PUSH
13138: LD_VAR 0 2
13142: PUSH
13143: CALL 10413 0 0
13147: PPUSH
13148: LD_INT 2
13150: PPUSH
13151: LD_EXP 48
13155: PUSH
13156: LD_OWVAR 67
13160: ARRAY
13161: PPUSH
13162: LD_STRING 
13164: PPUSH
13165: CALL 13977 0 4
13169: ADD
13170: ST_TO_ADDR
// vc_control = control_apeman ;
13171: LD_ADDR_OWVAR 38
13175: PUSH
13176: LD_INT 5
13178: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
13179: LD_ADDR_OWVAR 37
13183: PUSH
13184: LD_INT 11
13186: ST_TO_ADDR
// vc_engine = engine_combustion ;
13187: LD_ADDR_OWVAR 39
13191: PUSH
13192: LD_INT 1
13194: ST_TO_ADDR
// vc_weapon = ar_light_gun ;
13195: LD_ADDR_OWVAR 40
13199: PUSH
13200: LD_INT 23
13202: ST_TO_ADDR
// av = CreateVehicle ;
13203: LD_ADDR_LOC 11
13207: PUSH
13208: CALL_OW 45
13212: ST_TO_ADDR
// pom = pom ^ av ;
13213: LD_ADDR_VAR 0 2
13217: PUSH
13218: LD_VAR 0 2
13222: PUSH
13223: LD_LOC 11
13227: ADD
13228: ST_TO_ADDR
// end ; Ar_utok3_LIST = pom ;
13229: LD_ADDR_EXP 14
13233: PUSH
13234: LD_VAR 0 2
13238: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 6 ,  ) ;
13239: LD_ADDR_VAR 0 2
13243: PUSH
13244: CALL 10413 0 0
13248: PPUSH
13249: LD_INT 1
13251: PPUSH
13252: LD_INT 6
13254: PPUSH
13255: LD_STRING 
13257: PPUSH
13258: CALL 13977 0 4
13262: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
13263: LD_ADDR_OWVAR 37
13267: PUSH
13268: LD_INT 14
13270: ST_TO_ADDR
// vc_weapon = ar_gun ;
13271: LD_ADDR_OWVAR 40
13275: PUSH
13276: LD_INT 27
13278: ST_TO_ADDR
// vc_control = control_apeman ;
13279: LD_ADDR_OWVAR 38
13283: PUSH
13284: LD_INT 5
13286: ST_TO_ADDR
// vc_engine = engine_siberite ;
13287: LD_ADDR_OWVAR 39
13291: PUSH
13292: LD_INT 3
13294: ST_TO_ADDR
// av = CreateVehicle ;
13295: LD_ADDR_LOC 11
13299: PUSH
13300: CALL_OW 45
13304: ST_TO_ADDR
// pom = pom ^ av ;
13305: LD_ADDR_VAR 0 2
13309: PUSH
13310: LD_VAR 0 2
13314: PUSH
13315: LD_LOC 11
13319: ADD
13320: ST_TO_ADDR
// av = CreateVehicle ;
13321: LD_ADDR_LOC 11
13325: PUSH
13326: CALL_OW 45
13330: ST_TO_ADDR
// pom = pom ^ av ;
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_VAR 0 2
13340: PUSH
13341: LD_LOC 11
13345: ADD
13346: ST_TO_ADDR
// av = CreateVehicle ;
13347: LD_ADDR_LOC 11
13351: PUSH
13352: CALL_OW 45
13356: ST_TO_ADDR
// pom = pom ^ av ;
13357: LD_ADDR_VAR 0 2
13361: PUSH
13362: LD_VAR 0 2
13366: PUSH
13367: LD_LOC 11
13371: ADD
13372: ST_TO_ADDR
// Ar_utok4_LIST = pom ;
13373: LD_ADDR_EXP 15
13377: PUSH
13378: LD_VAR 0 2
13382: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13383: LD_ADDR_VAR 0 2
13387: PUSH
13388: CALL 10413 0 0
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: LD_EXP 48
13400: PUSH
13401: LD_OWVAR 67
13405: ARRAY
13406: PPUSH
13407: LD_STRING 
13409: PPUSH
13410: CALL 13977 0 4
13414: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13415: LD_ADDR_LOC 10
13419: PUSH
13420: CALL 10413 0 0
13424: PPUSH
13425: LD_INT 3
13427: PPUSH
13428: LD_EXP 48
13432: PUSH
13433: LD_OWVAR 67
13437: ARRAY
13438: PPUSH
13439: LD_STRING 
13441: PPUSH
13442: CALL 13977 0 4
13446: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13447: LD_ADDR_OWVAR 40
13451: PUSH
13452: LD_INT 28
13454: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13455: LD_ADDR_OWVAR 37
13459: PUSH
13460: LD_INT 13
13462: ST_TO_ADDR
// vc_control = control_manual ;
13463: LD_ADDR_OWVAR 38
13467: PUSH
13468: LD_INT 1
13470: ST_TO_ADDR
// vc_engine = engine_siberite ;
13471: LD_ADDR_OWVAR 39
13475: PUSH
13476: LD_INT 3
13478: ST_TO_ADDR
// av = CreateVehicle ;
13479: LD_ADDR_LOC 11
13483: PUSH
13484: CALL_OW 45
13488: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13489: LD_LOC 10
13493: PPUSH
13494: LD_LOC 11
13498: PPUSH
13499: CALL_OW 52
// pom = pom ^ av ;
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 2
13512: PUSH
13513: LD_LOC 11
13517: ADD
13518: ST_TO_ADDR
// if difficulty > 1 then
13519: LD_OWVAR 67
13523: PUSH
13524: LD_INT 1
13526: GREATER
13527: IFFALSE 13564
// begin vc_weapon = ar_selfpropelled_bomb ;
13529: LD_ADDR_OWVAR 40
13533: PUSH
13534: LD_INT 29
13536: ST_TO_ADDR
// av = CreateVehicle ;
13537: LD_ADDR_LOC 11
13541: PUSH
13542: CALL_OW 45
13546: ST_TO_ADDR
// pom = - pom ^ av ;
13547: LD_ADDR_VAR 0 2
13551: PUSH
13552: LD_VAR 0 2
13556: NEG
13557: PUSH
13558: LD_LOC 11
13562: ADD
13563: ST_TO_ADDR
// end ; pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13564: LD_ADDR_VAR 0 2
13568: PUSH
13569: LD_VAR 0 2
13573: PUSH
13574: CALL 10413 0 0
13578: PPUSH
13579: LD_INT 1
13581: PPUSH
13582: LD_EXP 48
13586: PUSH
13587: LD_OWVAR 67
13591: ARRAY
13592: PPUSH
13593: LD_STRING 
13595: PPUSH
13596: CALL 13977 0 4
13600: ADD
13601: ST_TO_ADDR
// if difficulty > 2 then
13602: LD_OWVAR 67
13606: PUSH
13607: LD_INT 2
13609: GREATER
13610: IFFALSE 13726
// begin pom = pom ^ get_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
13612: LD_ADDR_VAR 0 2
13616: PUSH
13617: LD_VAR 0 2
13621: PUSH
13622: CALL 10413 0 0
13626: PPUSH
13627: LD_INT 4
13629: PPUSH
13630: LD_EXP 48
13634: PUSH
13635: LD_OWVAR 67
13639: ARRAY
13640: PPUSH
13641: LD_STRING 
13643: PPUSH
13644: CALL 13977 0 4
13648: ADD
13649: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13650: LD_ADDR_VAR 0 2
13654: PUSH
13655: LD_VAR 0 2
13659: PUSH
13660: CALL 10413 0 0
13664: PPUSH
13665: LD_INT 8
13667: PPUSH
13668: LD_EXP 48
13672: PUSH
13673: LD_OWVAR 67
13677: ARRAY
13678: PPUSH
13679: LD_STRING 
13681: PPUSH
13682: CALL 13977 0 4
13686: ADD
13687: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13688: LD_ADDR_VAR 0 2
13692: PUSH
13693: LD_VAR 0 2
13697: PUSH
13698: CALL 10413 0 0
13702: PPUSH
13703: LD_INT 8
13705: PPUSH
13706: LD_EXP 48
13710: PUSH
13711: LD_OWVAR 67
13715: ARRAY
13716: PPUSH
13717: LD_STRING 
13719: PPUSH
13720: CALL 13977 0 4
13724: ADD
13725: ST_TO_ADDR
// end ; Ar_utoklast_LIST = pom ;
13726: LD_ADDR_EXP 16
13730: PUSH
13731: LD_VAR 0 2
13735: ST_TO_ADDR
// pom = get_human ( get_sex , class_mortar , 4 ,  ) ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: CALL 10413 0 0
13745: PPUSH
13746: LD_INT 8
13748: PPUSH
13749: LD_INT 4
13751: PPUSH
13752: LD_STRING 
13754: PPUSH
13755: CALL 13977 0 4
13759: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13760: LD_ADDR_OWVAR 40
13764: PUSH
13765: LD_INT 28
13767: ST_TO_ADDR
// vc_engine = engine_combustion ;
13768: LD_ADDR_OWVAR 39
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13776: LD_ADDR_OWVAR 37
13780: PUSH
13781: LD_INT 13
13783: ST_TO_ADDR
// if difficulty = 1 then
13784: LD_OWVAR 67
13788: PUSH
13789: LD_INT 1
13791: EQUAL
13792: IFFALSE 13814
// begin vc_control = control_apeman ;
13794: LD_ADDR_OWVAR 38
13798: PUSH
13799: LD_INT 5
13801: ST_TO_ADDR
// av = CreateVehicle ;
13802: LD_ADDR_LOC 11
13806: PUSH
13807: CALL_OW 45
13811: ST_TO_ADDR
// end else
13812: GO 13878
// begin vc_control = control_manual ;
13814: LD_ADDR_OWVAR 38
13818: PUSH
13819: LD_INT 1
13821: ST_TO_ADDR
// av = CreateVehicle ;
13822: LD_ADDR_LOC 11
13826: PUSH
13827: CALL_OW 45
13831: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13832: LD_ADDR_LOC 10
13836: PUSH
13837: CALL 10413 0 0
13841: PPUSH
13842: LD_INT 3
13844: PPUSH
13845: LD_EXP 48
13849: PUSH
13850: LD_OWVAR 67
13854: ARRAY
13855: PPUSH
13856: LD_STRING 
13858: PPUSH
13859: CALL 13977 0 4
13863: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13864: LD_LOC 10
13868: PPUSH
13869: LD_LOC 11
13873: PPUSH
13874: CALL_OW 52
// end ; pom = pom ^ av ;
13878: LD_ADDR_VAR 0 2
13882: PUSH
13883: LD_VAR 0 2
13887: PUSH
13888: LD_LOC 11
13892: ADD
13893: ST_TO_ADDR
// vc_control = control_apeman ;
13894: LD_ADDR_OWVAR 38
13898: PUSH
13899: LD_INT 5
13901: ST_TO_ADDR
// av = CreateVehicle ;
13902: LD_ADDR_LOC 11
13906: PUSH
13907: CALL_OW 45
13911: ST_TO_ADDR
// pom = pom ^ av ;
13912: LD_ADDR_VAR 0 2
13916: PUSH
13917: LD_VAR 0 2
13921: PUSH
13922: LD_LOC 11
13926: ADD
13927: ST_TO_ADDR
// vc_weapon = ar_radar ;
13928: LD_ADDR_OWVAR 40
13932: PUSH
13933: LD_INT 30
13935: ST_TO_ADDR
// av = CreateVehicle ;
13936: LD_ADDR_LOC 11
13940: PUSH
13941: CALL_OW 45
13945: ST_TO_ADDR
// pom = pom ^ av ;
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: LD_VAR 0 2
13955: PUSH
13956: LD_LOC 11
13960: ADD
13961: ST_TO_ADDR
// Ar_backa_LIST = pom ;
13962: LD_ADDR_EXP 17
13966: PUSH
13967: LD_VAR 0 2
13971: ST_TO_ADDR
// end ;
13972: LD_VAR 0 1
13976: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
13977: LD_INT 0
13979: PPUSH
13980: PPUSH
// PrepareHuman ( sex , clas , level ) ;
13981: LD_VAR 0 1
13985: PPUSH
13986: LD_VAR 0 2
13990: PPUSH
13991: LD_VAR 0 3
13995: PPUSH
13996: CALL_OW 380
// hc_name := name ;
14000: LD_ADDR_OWVAR 26
14004: PUSH
14005: LD_VAR 0 4
14009: ST_TO_ADDR
// pom = CreateHuman ;
14010: LD_ADDR_VAR 0 6
14014: PUSH
14015: CALL_OW 44
14019: ST_TO_ADDR
// result := pom ;
14020: LD_ADDR_VAR 0 5
14024: PUSH
14025: LD_VAR 0 6
14029: ST_TO_ADDR
// end ; end_of_file
14030: LD_VAR 0 5
14034: RET
// var plazici ; var navrat ; var zradci ; var pom , i ; var pocet_spadlych_beden ; every 0 0$0.1 do
14035: GO 14037
14037: DISABLE
// begin pocet_spadlych_beden = 0 ;
14038: LD_ADDR_LOC 22
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// end ;
14046: END
// every 0 0$0.1 do var sold ;
14047: GO 14049
14049: DISABLE
14050: LD_INT 0
14052: PPUSH
// begin navrat := false ;
14053: LD_ADDR_LOC 18
14057: PUSH
14058: LD_INT 0
14060: ST_TO_ADDR
// sold = UnitFilter ( Amici_enter , [ [ f_class , class_soldier ] ] ) ;
14061: LD_ADDR_VAR 0 1
14065: PUSH
14066: LD_EXP 42
14070: PPUSH
14071: LD_INT 25
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: EMPTY
14082: LIST
14083: PPUSH
14084: CALL_OW 72
14088: ST_TO_ADDR
// if sold < 4 then
14089: LD_VAR 0 1
14093: PUSH
14094: LD_INT 4
14096: LESS
14097: IFFALSE 14108
// msg ( ERROR: malo vojaku . je to v prdeli ) else
14099: LD_STRING ERROR: malo vojaku . je to v prdeli
14101: PPUSH
14102: CALL_OW 100
14106: GO 14155
// plazici := [ sold [ 1 ] , sold [ 2 ] , sold [ 3 ] , sold [ 4 ] ] ;
14108: LD_ADDR_LOC 17
14112: PUSH
14113: LD_VAR 0 1
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PUSH
14122: LD_VAR 0 1
14126: PUSH
14127: LD_INT 2
14129: ARRAY
14130: PUSH
14131: LD_VAR 0 1
14135: PUSH
14136: LD_INT 3
14138: ARRAY
14139: PUSH
14140: LD_VAR 0 1
14144: PUSH
14145: LD_INT 4
14147: ARRAY
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: ST_TO_ADDR
// ComMoveXY ( Radar_enter , 87 , 137 ) ;
14155: LD_EXP 43
14159: PPUSH
14160: LD_INT 87
14162: PPUSH
14163: LD_INT 137
14165: PPUSH
14166: CALL_OW 111
// AddComMoveXY ( Radar_enter , 89 , 134 ) ;
14170: LD_EXP 43
14174: PPUSH
14175: LD_INT 89
14177: PPUSH
14178: LD_INT 134
14180: PPUSH
14181: CALL_OW 171
// AddComMoveXY ( Radar_enter , 91 , 131 ) ;
14185: LD_EXP 43
14189: PPUSH
14190: LD_INT 91
14192: PPUSH
14193: LD_INT 131
14195: PPUSH
14196: CALL_OW 171
// AddComHold ( Radar_enter ) ;
14200: LD_EXP 43
14204: PPUSH
14205: CALL_OW 200
// AddComMoveXY ( plazici [ 1 ] , 84 , 127 ) ;
14209: LD_LOC 17
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PPUSH
14218: LD_INT 84
14220: PPUSH
14221: LD_INT 127
14223: PPUSH
14224: CALL_OW 171
// AddComCrawl ( plazici [ 1 ] ) ;
14228: LD_LOC 17
14232: PUSH
14233: LD_INT 1
14235: ARRAY
14236: PPUSH
14237: CALL_OW 197
// AddComMoveXY ( plazici [ 1 ] , 91 , 126 ) ;
14241: LD_LOC 17
14245: PUSH
14246: LD_INT 1
14248: ARRAY
14249: PPUSH
14250: LD_INT 91
14252: PPUSH
14253: LD_INT 126
14255: PPUSH
14256: CALL_OW 171
// AddComMoveXY ( plazici [ 2 ] , 85 , 127 ) ;
14260: LD_LOC 17
14264: PUSH
14265: LD_INT 2
14267: ARRAY
14268: PPUSH
14269: LD_INT 85
14271: PPUSH
14272: LD_INT 127
14274: PPUSH
14275: CALL_OW 171
// AddComCrawl ( plazici [ 2 ] ) ;
14279: LD_LOC 17
14283: PUSH
14284: LD_INT 2
14286: ARRAY
14287: PPUSH
14288: CALL_OW 197
// AddComMoveXY ( plazici [ 2 ] , 93 , 128 ) ;
14292: LD_LOC 17
14296: PUSH
14297: LD_INT 2
14299: ARRAY
14300: PPUSH
14301: LD_INT 93
14303: PPUSH
14304: LD_INT 128
14306: PPUSH
14307: CALL_OW 171
// AddComMoveXY ( plazici [ 3 ] , 83 , 126 ) ;
14311: LD_LOC 17
14315: PUSH
14316: LD_INT 3
14318: ARRAY
14319: PPUSH
14320: LD_INT 83
14322: PPUSH
14323: LD_INT 126
14325: PPUSH
14326: CALL_OW 171
// AddComCrawl ( plazici [ 3 ] ) ;
14330: LD_LOC 17
14334: PUSH
14335: LD_INT 3
14337: ARRAY
14338: PPUSH
14339: CALL_OW 197
// AddComMoveXY ( plazici [ 3 ] , 92 , 128 ) ;
14343: LD_LOC 17
14347: PUSH
14348: LD_INT 3
14350: ARRAY
14351: PPUSH
14352: LD_INT 92
14354: PPUSH
14355: LD_INT 128
14357: PPUSH
14358: CALL_OW 171
// AddComMoveXY ( plazici [ 4 ] , 82 , 125 ) ;
14362: LD_LOC 17
14366: PUSH
14367: LD_INT 4
14369: ARRAY
14370: PPUSH
14371: LD_INT 82
14373: PPUSH
14374: LD_INT 125
14376: PPUSH
14377: CALL_OW 171
// AddComCrawl ( plazici [ 4 ] ) ;
14381: LD_LOC 17
14385: PUSH
14386: LD_INT 4
14388: ARRAY
14389: PPUSH
14390: CALL_OW 197
// AddComMoveXY ( plazici [ 4 ] , 90 , 127 ) ;
14394: LD_LOC 17
14398: PUSH
14399: LD_INT 4
14401: ARRAY
14402: PPUSH
14403: LD_INT 90
14405: PPUSH
14406: LD_INT 127
14408: PPUSH
14409: CALL_OW 171
// AddComHold ( plazici ) ;
14413: LD_LOC 17
14417: PPUSH
14418: CALL_OW 200
// CenterNowOnXY ( 92 , 135 ) ;
14422: LD_INT 92
14424: PPUSH
14425: LD_INT 135
14427: PPUSH
14428: CALL_OW 86
// end ;
14432: PPOPN 1
14434: END
// every 0 0$0.5 trigger IsAt ( Radar_enter , 91 , 131 ) do
14435: LD_EXP 43
14439: PPUSH
14440: LD_INT 91
14442: PPUSH
14443: LD_INT 131
14445: PPUSH
14446: CALL_OW 307
14450: IFFALSE 14491
14452: GO 14454
14454: DISABLE
// begin ComMoveXY ( mrtvola , 105 , 139 ) ;
14455: LD_INT 64
14457: PPUSH
14458: LD_INT 105
14460: PPUSH
14461: LD_INT 139
14463: PPUSH
14464: CALL_OW 111
// AddComTurnXY ( mrtvola , 103 , 137 ) ;
14468: LD_INT 64
14470: PPUSH
14471: LD_INT 103
14473: PPUSH
14474: LD_INT 137
14476: PPUSH
14477: CALL_OW 178
// CenterOnXY ( 97 , 132 ) ;
14481: LD_INT 97
14483: PPUSH
14484: LD_INT 132
14486: PPUSH
14487: CALL_OW 84
// end ;
14491: END
// every 0 0$1 trigger IsAt ( mrtvola , 105 , 139 ) do
14492: LD_INT 64
14494: PPUSH
14495: LD_INT 105
14497: PPUSH
14498: LD_INT 139
14500: PPUSH
14501: CALL_OW 307
14505: IFFALSE 14530
14507: GO 14509
14509: DISABLE
// begin ComExitBuilding ( zradce1 ) ;
14510: LD_INT 65
14512: PPUSH
14513: CALL_OW 122
// ComMoveXY ( zradce1 , 107 , 138 ) ;
14517: LD_INT 65
14519: PPUSH
14520: LD_INT 107
14522: PPUSH
14523: LD_INT 138
14525: PPUSH
14526: CALL_OW 111
// end ;
14530: END
// every 0 0$1 trigger IsAt ( zradce1 , 107 , 138 ) do
14531: LD_INT 65
14533: PPUSH
14534: LD_INT 107
14536: PPUSH
14537: LD_INT 138
14539: PPUSH
14540: CALL_OW 307
14544: IFFALSE 15102
14546: GO 14548
14548: DISABLE
// begin ComTurnUnit ( mrtvola , zradce1 ) ;
14549: LD_INT 64
14551: PPUSH
14552: LD_INT 65
14554: PPUSH
14555: CALL_OW 119
// ComTurnUnit ( zradce1 , mrtvola ) ;
14559: LD_INT 65
14561: PPUSH
14562: LD_INT 64
14564: PPUSH
14565: CALL_OW 119
// SayNoFace ( mrtvola , D1a-Merc1-1 ) ;
14569: LD_INT 64
14571: PPUSH
14572: LD_STRING D1a-Merc1-1
14574: PPUSH
14575: CALL_OW 89
// SayNoFace ( zradce1 , D1a-FMerc2-1 ) ;
14579: LD_INT 65
14581: PPUSH
14582: LD_STRING D1a-FMerc2-1
14584: PPUSH
14585: CALL_OW 89
// wait ( 0 0$0.3 ) ;
14589: LD_INT 10
14591: PPUSH
14592: CALL_OW 67
// ComTurnXY ( mrtvola , 101 , 141 ) ;
14596: LD_INT 64
14598: PPUSH
14599: LD_INT 101
14601: PPUSH
14602: LD_INT 141
14604: PPUSH
14605: CALL_OW 118
// wait ( 10 ) ;
14609: LD_INT 10
14611: PPUSH
14612: CALL_OW 67
// ComMoveUnit ( zradce1 , mrtvola ) ;
14616: LD_INT 65
14618: PPUSH
14619: LD_INT 64
14621: PPUSH
14622: CALL_OW 112
// SetLives ( mrtvola , 300 ) ;
14626: LD_INT 64
14628: PPUSH
14629: LD_INT 300
14631: PPUSH
14632: CALL_OW 234
// wait ( 0 0$1 ) ;
14636: LD_INT 35
14638: PPUSH
14639: CALL_OW 67
// AddComTurnUnit ( zradce1 , mrtvola ) ;
14643: LD_INT 65
14645: PPUSH
14646: LD_INT 64
14648: PPUSH
14649: CALL_OW 179
// AddComHeal ( zradce1 , mrtvola ) ;
14653: LD_INT 65
14655: PPUSH
14656: LD_INT 64
14658: PPUSH
14659: CALL_OW 188
// repeat wait ( 3 ) until GetLives ( mrtvola ) > 340 ;
14663: LD_INT 3
14665: PPUSH
14666: CALL_OW 67
14670: LD_INT 64
14672: PPUSH
14673: CALL_OW 256
14677: PUSH
14678: LD_INT 340
14680: GREATER
14681: IFFALSE 14663
// SetLives ( mrtvola , 10 ) ;
14683: LD_INT 64
14685: PPUSH
14686: LD_INT 10
14688: PPUSH
14689: CALL_OW 234
// enable ( 80 ) ;
14693: LD_INT 80
14695: ENABLE_MARKED
// wait ( 0 0$0.5 ) ;
14696: LD_INT 18
14698: PPUSH
14699: CALL_OW 67
// ForceSayNoFace ( mrtvola , D1a-Merc1-2 ) ;
14703: LD_INT 64
14705: PPUSH
14706: LD_STRING D1a-Merc1-2
14708: PPUSH
14709: CALL_OW 93
// wait ( 0 0$3 ) ;
14713: LD_INT 105
14715: PPUSH
14716: CALL_OW 67
// KillUnit ( mrtvola ) ;
14720: LD_INT 64
14722: PPUSH
14723: CALL_OW 66
// ComTurnXY ( zradce1 , 87 , 137 ) ;
14727: LD_INT 65
14729: PPUSH
14730: LD_INT 87
14732: PPUSH
14733: LD_INT 137
14735: PPUSH
14736: CALL_OW 118
// wait ( 0 0$1 ) ;
14740: LD_INT 35
14742: PPUSH
14743: CALL_OW 67
// SayNoFace ( zradce1 , D1a-FMerc2-2 ) ;
14747: LD_INT 65
14749: PPUSH
14750: LD_STRING D1a-FMerc2-2
14752: PPUSH
14753: CALL_OW 89
// ComExitBuilding ( [ zradce4 , zradce5 ] ) ;
14757: LD_INT 70
14759: PUSH
14760: LD_INT 71
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 122
// ComExitBuilding ( [ zradce2 , zradce3 , zradce6 , zradce7 ] ) ;
14771: LD_INT 68
14773: PUSH
14774: LD_INT 69
14776: PUSH
14777: LD_INT 75
14779: PUSH
14780: LD_INT 77
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PPUSH
14789: CALL_OW 122
// ComMoveXY ( [ zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 141 ) ;
14793: LD_INT 68
14795: PUSH
14796: LD_INT 69
14798: PUSH
14799: LD_INT 75
14801: PUSH
14802: LD_INT 77
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: LD_INT 165
14813: PPUSH
14814: LD_INT 141
14816: PPUSH
14817: CALL_OW 111
// KillUnit ( mrtvola2 ) ;
14821: LD_INT 78
14823: PPUSH
14824: CALL_OW 66
// AddComMoveUnit ( zradce4 , utek2 ) ;
14828: LD_INT 70
14830: PPUSH
14831: LD_INT 67
14833: PPUSH
14834: CALL_OW 172
// AddComMoveUnit ( zradce5 , utek1 ) ;
14838: LD_INT 71
14840: PPUSH
14841: LD_INT 66
14843: PPUSH
14844: CALL_OW 172
// SetFuel ( utek1 , 0 ) ;
14848: LD_INT 66
14850: PPUSH
14851: LD_INT 0
14853: PPUSH
14854: CALL_OW 240
// SetFuel ( utek2 , 0 ) ;
14858: LD_INT 67
14860: PPUSH
14861: LD_INT 0
14863: PPUSH
14864: CALL_OW 240
// wait ( 0 0$1 ) ;
14868: LD_INT 35
14870: PPUSH
14871: CALL_OW 67
// AddComMoveXY ( utek1 , 162 , 142 ) ;
14875: LD_INT 66
14877: PPUSH
14878: LD_INT 162
14880: PPUSH
14881: LD_INT 142
14883: PPUSH
14884: CALL_OW 171
// AddComMoveXY ( utek2 , 162 , 139 ) ;
14888: LD_INT 67
14890: PPUSH
14891: LD_INT 162
14893: PPUSH
14894: LD_INT 139
14896: PPUSH
14897: CALL_OW 171
// ComMoveXY ( zradce1 , 162 , 140 ) ;
14901: LD_INT 65
14903: PPUSH
14904: LD_INT 162
14906: PPUSH
14907: LD_INT 140
14909: PPUSH
14910: CALL_OW 111
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 175 , 128 ) ;
14914: LD_INT 65
14916: PUSH
14917: LD_INT 68
14919: PUSH
14920: LD_INT 69
14922: PUSH
14923: LD_INT 75
14925: PUSH
14926: LD_INT 77
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: PPUSH
14936: LD_INT 175
14938: PPUSH
14939: LD_INT 128
14941: PPUSH
14942: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 126 , 94 ) ;
14946: LD_INT 65
14948: PUSH
14949: LD_INT 68
14951: PUSH
14952: LD_INT 69
14954: PUSH
14955: LD_INT 75
14957: PUSH
14958: LD_INT 77
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: LD_INT 126
14970: PPUSH
14971: LD_INT 94
14973: PPUSH
14974: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 92 ) ;
14978: LD_INT 65
14980: PUSH
14981: LD_INT 68
14983: PUSH
14984: LD_INT 69
14986: PUSH
14987: LD_INT 75
14989: PUSH
14990: LD_INT 77
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PPUSH
15000: LD_INT 165
15002: PPUSH
15003: LD_INT 92
15005: PPUSH
15006: CALL_OW 171
// zradci = [ zradce1 , zradce2 , zradce3 , zradce4 , zradce5 , zradce6 , zradce7 , utek1 , utek2 ] ;
15010: LD_ADDR_LOC 19
15014: PUSH
15015: LD_INT 65
15017: PUSH
15018: LD_INT 68
15020: PUSH
15021: LD_INT 69
15023: PUSH
15024: LD_INT 70
15026: PUSH
15027: LD_INT 71
15029: PUSH
15030: LD_INT 75
15032: PUSH
15033: LD_INT 77
15035: PUSH
15036: LD_INT 66
15038: PUSH
15039: LD_INT 67
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: ST_TO_ADDR
// Odebirani = true ;
15053: LD_ADDR_EXP 44
15057: PUSH
15058: LD_INT 1
15060: ST_TO_ADDR
// ComFree ( plazici ) ;
15061: LD_LOC 17
15065: PPUSH
15066: CALL_OW 139
// ComFree ( Radar_enter ) ;
15070: LD_EXP 43
15074: PPUSH
15075: CALL_OW 139
// ComMoveXY ( plazici , 86 , 133 ) ;
15079: LD_LOC 17
15083: PPUSH
15084: LD_INT 86
15086: PPUSH
15087: LD_INT 133
15089: PPUSH
15090: CALL_OW 111
// navrat := true ;
15094: LD_ADDR_LOC 18
15098: PUSH
15099: LD_INT 1
15101: ST_TO_ADDR
// end ;
15102: END
// every 3 trigger IsLive ( mrtvola ) marked 80 do
15103: LD_INT 64
15105: PPUSH
15106: CALL_OW 300
15110: IFFALSE 15152
15112: GO 15114
15114: DISABLE
// begin enable ;
15115: ENABLE
// if GetLives ( mrtvola ) > 10 and GetLives ( mrtvola ) < 250 then
15116: LD_INT 64
15118: PPUSH
15119: CALL_OW 256
15123: PUSH
15124: LD_INT 10
15126: GREATER
15127: PUSH
15128: LD_INT 64
15130: PPUSH
15131: CALL_OW 256
15135: PUSH
15136: LD_INT 250
15138: LESS
15139: AND
15140: IFFALSE 15152
// SetLives ( mrtvola , 10 ) ;
15142: LD_INT 64
15144: PPUSH
15145: LD_INT 10
15147: PPUSH
15148: CALL_OW 234
// end ;
15152: END
// every 0 0$5 do
15153: GO 15155
15155: DISABLE
// begin if ( IsInArea ( utek1 , Benal ) or not IsOk ( zradce5 ) ) and ( IsInArea ( utek2 , Benal ) or not IsOk ( zradce4 ) ) then
15156: LD_INT 66
15158: PPUSH
15159: LD_INT 4
15161: PPUSH
15162: CALL_OW 308
15166: PUSH
15167: LD_INT 71
15169: PPUSH
15170: CALL_OW 302
15174: NOT
15175: OR
15176: PUSH
15177: LD_INT 67
15179: PPUSH
15180: LD_INT 4
15182: PPUSH
15183: CALL_OW 308
15187: PUSH
15188: LD_INT 70
15190: PPUSH
15191: CALL_OW 302
15195: NOT
15196: OR
15197: AND
15198: IFFALSE 15340
// begin if IsOk ( zradce5 ) then
15200: LD_INT 71
15202: PPUSH
15203: CALL_OW 302
15207: IFFALSE 15219
// SetFuel ( utek1 , 100 ) ;
15209: LD_INT 66
15211: PPUSH
15212: LD_INT 100
15214: PPUSH
15215: CALL_OW 240
// if IsOk ( zradce4 ) then
15219: LD_INT 70
15221: PPUSH
15222: CALL_OW 302
15226: IFFALSE 15238
// SetFuel ( utek2 , 100 ) ;
15228: LD_INT 67
15230: PPUSH
15231: LD_INT 100
15233: PPUSH
15234: CALL_OW 240
// ComEnterUnit ( zradce5 , utek1 ) ;
15238: LD_INT 71
15240: PPUSH
15241: LD_INT 66
15243: PPUSH
15244: CALL_OW 120
// ComEnterUnit ( zradce4 , utek2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: LD_INT 67
15253: PPUSH
15254: CALL_OW 120
// AddComMoveXY ( [ zradce4 , zradce5 ] , 179 , 136 ) ;
15258: LD_INT 70
15260: PUSH
15261: LD_INT 71
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PPUSH
15268: LD_INT 179
15270: PPUSH
15271: LD_INT 136
15273: PPUSH
15274: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 153 , 108 ) ;
15278: LD_INT 70
15280: PUSH
15281: LD_INT 71
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: LD_INT 153
15290: PPUSH
15291: LD_INT 108
15293: PPUSH
15294: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 126 , 91 ) ;
15298: LD_INT 70
15300: PUSH
15301: LD_INT 71
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PPUSH
15308: LD_INT 126
15310: PPUSH
15311: LD_INT 91
15313: PPUSH
15314: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 165 , 92 ) ;
15318: LD_INT 70
15320: PUSH
15321: LD_INT 71
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: LD_INT 165
15330: PPUSH
15331: LD_INT 92
15333: PPUSH
15334: CALL_OW 171
// end else
15338: GO 15361
// begin ComMoveXY ( [ utek1 , utek2 ] , 162 , 142 ) ;
15340: LD_INT 66
15342: PUSH
15343: LD_INT 67
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PPUSH
15350: LD_INT 162
15352: PPUSH
15353: LD_INT 142
15355: PPUSH
15356: CALL_OW 111
// enable ;
15360: ENABLE
// end ; end ;
15361: END
// every 0 0$1 trigger Odebirani do
15362: LD_EXP 44
15366: IFFALSE 15480
15368: GO 15370
15370: DISABLE
// begin pom = UnitFilter ( zradci , [ f_inarea , ExitAR ] ) ;
15371: LD_ADDR_LOC 20
15375: PUSH
15376: LD_LOC 19
15380: PPUSH
15381: LD_INT 95
15383: PUSH
15384: LD_INT 5
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PPUSH
15391: CALL_OW 72
15395: ST_TO_ADDR
// for i in pom do
15396: LD_ADDR_LOC 21
15400: PUSH
15401: LD_LOC 20
15405: PUSH
15406: FOR_IN
15407: IFFALSE 15420
// RemoveUnit ( i ) ;
15409: LD_LOC 21
15413: PPUSH
15414: CALL_OW 64
15418: GO 15406
15420: POP
15421: POP
// zradci = UnitFilter ( zradci , [ [ f_alive ] , [ f_side , Arabi ] ] ) ;
15422: LD_ADDR_LOC 19
15426: PUSH
15427: LD_LOC 19
15431: PPUSH
15432: LD_INT 51
15434: PUSH
15435: EMPTY
15436: LIST
15437: PUSH
15438: LD_INT 22
15440: PUSH
15441: LD_EXP 3
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 72
15458: ST_TO_ADDR
// if zradci > 0 then
15459: LD_LOC 19
15463: PUSH
15464: LD_INT 0
15466: GREATER
15467: IFFALSE 15472
// enable else
15469: ENABLE
15470: GO 15480
// Odebirani = false ;
15472: LD_ADDR_EXP 44
15476: PUSH
15477: LD_INT 0
15479: ST_TO_ADDR
// end ;
15480: END
// every 0 0$1 trigger navrat do
15481: LD_LOC 18
15485: IFFALSE 15616
15487: GO 15489
15489: DISABLE
// begin if IsAt ( plazici [ 1 ] , 86 , 133 ) or IsAt ( plazici [ 2 ] , 86 , 133 ) or IsAt ( plazici [ 3 ] , 86 , 133 ) or IsAt ( plazici [ 4 ] , 86 , 133 ) then
15490: LD_LOC 17
15494: PUSH
15495: LD_INT 1
15497: ARRAY
15498: PPUSH
15499: LD_INT 86
15501: PPUSH
15502: LD_INT 133
15504: PPUSH
15505: CALL_OW 307
15509: PUSH
15510: LD_LOC 17
15514: PUSH
15515: LD_INT 2
15517: ARRAY
15518: PPUSH
15519: LD_INT 86
15521: PPUSH
15522: LD_INT 133
15524: PPUSH
15525: CALL_OW 307
15529: OR
15530: PUSH
15531: LD_LOC 17
15535: PUSH
15536: LD_INT 3
15538: ARRAY
15539: PPUSH
15540: LD_INT 86
15542: PPUSH
15543: LD_INT 133
15545: PPUSH
15546: CALL_OW 307
15550: OR
15551: PUSH
15552: LD_LOC 17
15556: PUSH
15557: LD_INT 4
15559: ARRAY
15560: PPUSH
15561: LD_INT 86
15563: PPUSH
15564: LD_INT 133
15566: PPUSH
15567: CALL_OW 307
15571: OR
15572: IFFALSE 15615
// begin ComWalk ( plazici ) ;
15574: LD_LOC 17
15578: PPUSH
15579: CALL_OW 138
// AddComMoveXY ( plazici , 83 , 148 ) ;
15583: LD_LOC 17
15587: PPUSH
15588: LD_INT 83
15590: PPUSH
15591: LD_INT 148
15593: PPUSH
15594: CALL_OW 171
// ComMoveXY ( Radar_enter , 87 , 152 ) ;
15598: LD_EXP 43
15602: PPUSH
15603: LD_INT 87
15605: PPUSH
15606: LD_INT 152
15608: PPUSH
15609: CALL_OW 111
// end else
15613: GO 15616
// enable ;
15615: ENABLE
// end ;
15616: END
// every 0 0$0.5 trigger navrat do
15617: LD_LOC 18
15621: IFFALSE 15655
15623: GO 15625
15625: DISABLE
// begin if IsInArea ( plazici [ 1 ] , AMret ) then
15626: LD_LOC 17
15630: PUSH
15631: LD_INT 1
15633: ARRAY
15634: PPUSH
15635: LD_INT 2
15637: PPUSH
15638: CALL_OW 308
15642: IFFALSE 15654
// begin chmo1 ;
15644: CALL 2228 0 0
// InGameOff ;
15648: CALL_OW 9
// end else
15652: GO 15655
// enable ;
15654: ENABLE
// end ;
15655: END
// every 0 0$10 trigger A1_dobyta do var pom ;
15656: LD_EXP 27
15660: IFFALSE 15755
15662: GO 15664
15664: DISABLE
15665: LD_INT 0
15667: PPUSH
// begin wait ( Rand ( 1 1$0 , 2 2$20 ) ) ;
15668: LD_INT 2100
15670: PPUSH
15671: LD_INT 4900
15673: PPUSH
15674: CALL_OW 12
15678: PPUSH
15679: CALL_OW 67
// pom = Rand ( 4 - difficulty , 5 ) ;
15683: LD_ADDR_VAR 0 1
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: LD_OWVAR 67
15695: MINUS
15696: PPUSH
15697: LD_INT 5
15699: PPUSH
15700: CALL_OW 12
15704: ST_TO_ADDR
// CreateCratesArea ( pom , Abase1 , true ) ;
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_INT 3
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: CALL_OW 55
// pocet_spadlych_beden = pocet_spadlych_beden + pom ;
15720: LD_ADDR_LOC 22
15724: PUSH
15725: LD_LOC 22
15729: PUSH
15730: LD_VAR 0 1
15734: PLUS
15735: ST_TO_ADDR
// if pocet_spadlych_beden < max_bedny [ difficulty ] then
15736: LD_LOC 22
15740: PUSH
15741: LD_EXP 50
15745: PUSH
15746: LD_OWVAR 67
15750: ARRAY
15751: LESS
15752: IFFALSE 15755
// enable ;
15754: ENABLE
// end ;
15755: PPOPN 1
15757: END
// every 0 0$10 trigger A2_dobyta do
15758: LD_EXP 28
15762: IFFALSE 15787
15764: GO 15766
15766: DISABLE
// begin pocet_spadlych_beden = pocet_spadlych_beden - 10 + difficulty ;
15767: LD_ADDR_LOC 22
15771: PUSH
15772: LD_LOC 22
15776: PUSH
15777: LD_INT 10
15779: MINUS
15780: PUSH
15781: LD_OWVAR 67
15785: PLUS
15786: ST_TO_ADDR
// end ; end_of_file
15787: END
// export A1_dobyta ; export A2_dobyta ; export A3_dobyta ; export Pruzkumnik ; var vysl ; var pom , i ; var uspech ; export JMM ; export Powell ; export Gary ; export Bobby ; export Frank ; export Lisa ; export Cornel ; export Yamoko ; export Cyrus ; export Don ; export Brown ; export Amici_enter ; export Radar_enter ; every 0 0$30 trigger A1_dobyta do
15788: LD_EXP 27
15792: IFFALSE 16115
15794: GO 15796
15796: DISABLE
// begin if IsOK ( Frank ) then
15797: LD_EXP 35
15801: PPUSH
15802: CALL_OW 302
15806: IFFALSE 16114
// begin wait ( 0 0$10 ) ;
15808: LD_INT 350
15810: PPUSH
15811: CALL_OW 67
// vysl := dialog_frank ;
15815: LD_ADDR_LOC 23
15819: PUSH
15820: CALL 2918 0 0
15824: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
15825: LD_ADDR_LOC 24
15829: PUSH
15830: LD_INT 1
15832: PPUSH
15833: LD_INT 100
15835: PPUSH
15836: CALL_OW 12
15840: ST_TO_ADDR
// case vysl of 1 :
15841: LD_LOC 23
15845: PUSH
15846: LD_INT 1
15848: DOUBLE
15849: EQUAL
15850: IFTRUE 15854
15852: GO 15884
15854: POP
// begin i = [ 50 , 30 , 20 ] ;
15855: LD_ADDR_LOC 25
15859: PUSH
15860: LD_INT 50
15862: PUSH
15863: LD_INT 30
15865: PUSH
15866: LD_INT 20
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: ST_TO_ADDR
// Pruzkumnik = true ;
15874: LD_ADDR_EXP 30
15878: PUSH
15879: LD_INT 1
15881: ST_TO_ADDR
// end ; 21 :
15882: GO 15931
15884: LD_INT 21
15886: DOUBLE
15887: EQUAL
15888: IFTRUE 15892
15890: GO 15922
15892: POP
// begin i = [ 80 , 15 , 5 ] ;
15893: LD_ADDR_LOC 25
15897: PUSH
15898: LD_INT 80
15900: PUSH
15901: LD_INT 15
15903: PUSH
15904: LD_INT 5
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: ST_TO_ADDR
// Pruzkumnik = true ;
15912: LD_ADDR_EXP 30
15916: PUSH
15917: LD_INT 1
15919: ST_TO_ADDR
// end ; else
15920: GO 15931
15922: POP
// uspech = 0 ; end ;
15923: LD_ADDR_LOC 26
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// if Pruzkumnik then
15931: LD_EXP 30
15935: IFFALSE 16016
// begin jdi_na_pruzkum ( Frank ) ;
15937: LD_EXP 35
15941: PPUSH
15942: CALL 16436 0 1
// if pom <= i [ 1 ] then
15946: LD_LOC 24
15950: PUSH
15951: LD_LOC 25
15955: PUSH
15956: LD_INT 1
15958: ARRAY
15959: LESSEQUAL
15960: IFFALSE 15972
// uspech = 1 else
15962: LD_ADDR_LOC 26
15966: PUSH
15967: LD_INT 1
15969: ST_TO_ADDR
15970: GO 16016
// if pom <= i [ 1 ] + i [ 2 ] then
15972: LD_LOC 24
15976: PUSH
15977: LD_LOC 25
15981: PUSH
15982: LD_INT 1
15984: ARRAY
15985: PUSH
15986: LD_LOC 25
15990: PUSH
15991: LD_INT 2
15993: ARRAY
15994: PLUS
15995: LESSEQUAL
15996: IFFALSE 16008
// uspech = 2 else
15998: LD_ADDR_LOC 26
16002: PUSH
16003: LD_INT 2
16005: ST_TO_ADDR
16006: GO 16016
// uspech = 3 ;
16008: LD_ADDR_LOC 26
16012: PUSH
16013: LD_INT 3
16015: ST_TO_ADDR
// end ; case uspech of 1 :
16016: LD_LOC 26
16020: PUSH
16021: LD_INT 1
16023: DOUBLE
16024: EQUAL
16025: IFTRUE 16029
16027: GO 16055
16029: POP
// begin wait ( 3 3$0 ) ;
16030: LD_INT 6300
16032: PPUSH
16033: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 1 ) ;
16037: LD_EXP 35
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL 16684 0 2
// fuspech1 ;
16049: CALL 3168 0 0
// end ; 2 :
16053: GO 16112
16055: LD_INT 2
16057: DOUBLE
16058: EQUAL
16059: IFTRUE 16063
16061: GO 16089
16063: POP
// begin wait ( 1 1$0 ) ;
16064: LD_INT 2100
16066: PPUSH
16067: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 2 ) ;
16071: LD_EXP 35
16075: PPUSH
16076: LD_INT 2
16078: PPUSH
16079: CALL 16684 0 2
// fuspech2 ;
16083: CALL 3305 0 0
// end ; 3 :
16087: GO 16112
16089: LD_INT 3
16091: DOUBLE
16092: EQUAL
16093: IFTRUE 16097
16095: GO 16111
16097: POP
// begin wait ( 5 5$0 ) ;
16098: LD_INT 10500
16100: PPUSH
16101: CALL_OW 67
// fuspech3 ;
16105: CALL 3448 0 0
// end ; end ;
16109: GO 16112
16111: POP
// end else
16112: GO 16115
// enable ;
16114: ENABLE
// end ;
16115: END
// every 0 0$30 trigger A1_dobyta do
16116: LD_EXP 27
16120: IFFALSE 16435
16122: GO 16124
16124: DISABLE
// begin if IsOK ( Yamoko ) then
16125: LD_EXP 38
16129: PPUSH
16130: CALL_OW 302
16134: IFFALSE 16434
// begin wait ( 0 0$10 ) ;
16136: LD_INT 350
16138: PPUSH
16139: CALL_OW 67
// vysl := dialog_yamoko ;
16143: LD_ADDR_LOC 23
16147: PUSH
16148: CALL 3456 0 0
16152: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
16153: LD_ADDR_LOC 24
16157: PUSH
16158: LD_INT 1
16160: PPUSH
16161: LD_INT 100
16163: PPUSH
16164: CALL_OW 12
16168: ST_TO_ADDR
// case vysl of 1 :
16169: LD_LOC 23
16173: PUSH
16174: LD_INT 1
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16182
16180: GO 16212
16182: POP
// begin i = [ 50 , 20 , 30 ] ;
16183: LD_ADDR_LOC 25
16187: PUSH
16188: LD_INT 50
16190: PUSH
16191: LD_INT 20
16193: PUSH
16194: LD_INT 30
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: ST_TO_ADDR
// Pruzkumnik = true ;
16202: LD_ADDR_EXP 30
16206: PUSH
16207: LD_INT 1
16209: ST_TO_ADDR
// end ; 21 :
16210: GO 16251
16212: LD_INT 21
16214: DOUBLE
16215: EQUAL
16216: IFTRUE 16220
16218: GO 16250
16220: POP
// begin i = [ 70 , 25 , 5 ] ;
16221: LD_ADDR_LOC 25
16225: PUSH
16226: LD_INT 70
16228: PUSH
16229: LD_INT 25
16231: PUSH
16232: LD_INT 5
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: LIST
16239: ST_TO_ADDR
// Pruzkumnik = true ;
16240: LD_ADDR_EXP 30
16244: PUSH
16245: LD_INT 1
16247: ST_TO_ADDR
// end ; end ;
16248: GO 16251
16250: POP
// if Pruzkumnik then
16251: LD_EXP 30
16255: IFFALSE 16336
// begin jdi_na_pruzkum ( Yamoko ) ;
16257: LD_EXP 38
16261: PPUSH
16262: CALL 16436 0 1
// if pom <= i [ 1 ] then
16266: LD_LOC 24
16270: PUSH
16271: LD_LOC 25
16275: PUSH
16276: LD_INT 1
16278: ARRAY
16279: LESSEQUAL
16280: IFFALSE 16292
// uspech = 1 else
16282: LD_ADDR_LOC 26
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
16290: GO 16336
// if pom <= i [ 1 ] + i [ 2 ] then
16292: LD_LOC 24
16296: PUSH
16297: LD_LOC 25
16301: PUSH
16302: LD_INT 1
16304: ARRAY
16305: PUSH
16306: LD_LOC 25
16310: PUSH
16311: LD_INT 2
16313: ARRAY
16314: PLUS
16315: LESSEQUAL
16316: IFFALSE 16328
// uspech = 2 else
16318: LD_ADDR_LOC 26
16322: PUSH
16323: LD_INT 2
16325: ST_TO_ADDR
16326: GO 16336
// uspech = 3 ;
16328: LD_ADDR_LOC 26
16332: PUSH
16333: LD_INT 3
16335: ST_TO_ADDR
// end ; case uspech of 1 :
16336: LD_LOC 26
16340: PUSH
16341: LD_INT 1
16343: DOUBLE
16344: EQUAL
16345: IFTRUE 16349
16347: GO 16375
16349: POP
// begin wait ( 2 2$0 ) ;
16350: LD_INT 4200
16352: PPUSH
16353: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 1 ) ;
16357: LD_EXP 38
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL 16684 0 2
// yuspech1 ;
16369: CALL 3561 0 0
// end ; 2 :
16373: GO 16432
16375: LD_INT 2
16377: DOUBLE
16378: EQUAL
16379: IFTRUE 16383
16381: GO 16409
16383: POP
// begin wait ( 1 1$0 ) ;
16384: LD_INT 2100
16386: PPUSH
16387: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 2 ) ;
16391: LD_EXP 38
16395: PPUSH
16396: LD_INT 2
16398: PPUSH
16399: CALL 16684 0 2
// yuspech2 ;
16403: CALL 3710 0 0
// end ; 3 :
16407: GO 16432
16409: LD_INT 3
16411: DOUBLE
16412: EQUAL
16413: IFTRUE 16417
16415: GO 16431
16417: POP
// begin wait ( 5 5$0 ) ;
16418: LD_INT 10500
16420: PPUSH
16421: CALL_OW 67
// yuspech3 ;
16425: CALL 3809 0 0
// end ; end ;
16429: GO 16432
16431: POP
// end else
16432: GO 16435
// enable ;
16434: ENABLE
// end ;
16435: END
// function jdi_na_pruzkum ( pru ) ; begin
16436: LD_INT 0
16438: PPUSH
// ComStop ( pru ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 141
// AddComExitBuilding ( pru ) ;
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 182
// AddComExitVehicle ( pru ) ;
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 181
// AddComStop ( pru ) ;
16466: LD_VAR 0 1
16470: PPUSH
16471: CALL_OW 201
// while IsInUnit ( pru ) <> 0 do
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 310
16484: PUSH
16485: LD_INT 0
16487: NONEQUAL
16488: IFFALSE 16524
// begin wait ( 0 0$0.5 ) ;
16490: LD_INT 18
16492: PPUSH
16493: CALL_OW 67
// ComExitBuilding ( pru ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 122
// wait ( 0 0$0.5 ) ;
16506: LD_INT 18
16508: PPUSH
16509: CALL_OW 67
// AddComExitVehicle ( pru ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: CALL_OW 181
// end ;
16522: GO 16475
// ComStop ( pru ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 141
// SetSide ( pru , You2 ) ;
16533: LD_VAR 0 1
16537: PPUSH
16538: LD_EXP 2
16542: PPUSH
16543: CALL_OW 235
// SetClass ( pru , class_soldier ) ;
16547: LD_VAR 0 1
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 336
// AddComMoveXY ( pru , 91 , 110 ) ;
16559: LD_VAR 0 1
16563: PPUSH
16564: LD_INT 91
16566: PPUSH
16567: LD_INT 110
16569: PPUSH
16570: CALL_OW 171
// AddComMoveXY ( pru , 59 , 103 ) ;
16574: LD_VAR 0 1
16578: PPUSH
16579: LD_INT 59
16581: PPUSH
16582: LD_INT 103
16584: PPUSH
16585: CALL_OW 171
// while not IsAt ( pru , 59 , 103 ) do
16589: LD_VAR 0 1
16593: PPUSH
16594: LD_INT 59
16596: PPUSH
16597: LD_INT 103
16599: PPUSH
16600: CALL_OW 307
16604: NOT
16605: IFFALSE 16631
// begin wait ( 0 0$2 ) ;
16607: LD_INT 70
16609: PPUSH
16610: CALL_OW 67
// AddComMoveXY ( pru , 59 , 103 ) ;
16614: LD_VAR 0 1
16618: PPUSH
16619: LD_INT 59
16621: PPUSH
16622: LD_INT 103
16624: PPUSH
16625: CALL_OW 171
// end ;
16629: GO 16589
// ComMoveXY ( pru , 51 , 101 ) ;
16631: LD_VAR 0 1
16635: PPUSH
16636: LD_INT 51
16638: PPUSH
16639: LD_INT 101
16641: PPUSH
16642: CALL_OW 111
// while not IsInArea ( pru , pru_out ) do
16646: LD_VAR 0 1
16650: PPUSH
16651: LD_INT 24
16653: PPUSH
16654: CALL_OW 308
16658: NOT
16659: IFFALSE 16670
// wait ( 0 0$1 ) ;
16661: LD_INT 35
16663: PPUSH
16664: CALL_OW 67
16668: GO 16646
// RemoveUnit ( pru ) ;
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 64
// end ;
16679: LD_VAR 0 2
16683: RET
// function navrat_z_pruzkumu ( pru , usp ) ; begin
16684: LD_INT 0
16686: PPUSH
// PlaceUnitArea ( pru , pruarea , false ) ;
16687: LD_VAR 0 1
16691: PPUSH
16692: LD_INT 20
16694: PPUSH
16695: LD_INT 0
16697: PPUSH
16698: CALL_OW 49
// if usp = 1 then
16702: LD_VAR 0 2
16706: PUSH
16707: LD_INT 1
16709: EQUAL
16710: IFFALSE 16727
// AddComMoveXY ( pru , 47 , 87 ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_INT 47
16719: PPUSH
16720: LD_INT 87
16722: PPUSH
16723: CALL_OW 171
// AddComMoveXY ( pru , 68 , 106 ) ;
16727: LD_VAR 0 1
16731: PPUSH
16732: LD_INT 68
16734: PPUSH
16735: LD_INT 106
16737: PPUSH
16738: CALL_OW 171
// AddComMoveXY ( pru , 118 , 129 ) ;
16742: LD_VAR 0 1
16746: PPUSH
16747: LD_INT 118
16749: PPUSH
16750: LD_INT 129
16752: PPUSH
16753: CALL_OW 171
// if usp <> 1 then
16757: LD_VAR 0 2
16761: PUSH
16762: LD_INT 1
16764: NONEQUAL
16765: IFFALSE 16779
// SetLives ( pru , 300 ) ;
16767: LD_VAR 0 1
16771: PPUSH
16772: LD_INT 300
16774: PPUSH
16775: CALL_OW 234
// while not IsInArea ( pru , Abase1 ) do
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_INT 3
16786: PPUSH
16787: CALL_OW 308
16791: NOT
16792: IFFALSE 16803
// wait ( 0 0$2 ) ;
16794: LD_INT 70
16796: PPUSH
16797: CALL_OW 67
16801: GO 16779
// SetSide ( pru , You ) ;
16803: LD_VAR 0 1
16807: PPUSH
16808: LD_EXP 1
16812: PPUSH
16813: CALL_OW 235
// ComMoveUnit ( pru , JMM ) ;
16817: LD_VAR 0 1
16821: PPUSH
16822: LD_EXP 31
16826: PPUSH
16827: CALL_OW 112
// end ;
16831: LD_VAR 0 3
16835: RET
// every 0 0$10 trigger GetSide ( A1_tov ) or IsDead ( A1_tov ) do
16836: LD_INT 110
16838: PPUSH
16839: CALL_OW 255
16843: PUSH
16844: LD_INT 110
16846: PPUSH
16847: CALL_OW 301
16851: OR
16852: IFFALSE 16917
16854: GO 16856
16856: DISABLE
// begin SetTech ( tech_Flame , You , state_researched ) ;
16857: LD_INT 70
16859: PPUSH
16860: LD_EXP 1
16864: PPUSH
16865: LD_INT 2
16867: PPUSH
16868: CALL_OW 322
// SetTech ( tech_SibPow , You , state_researched ) ;
16872: LD_INT 21
16874: PPUSH
16875: LD_EXP 1
16879: PPUSH
16880: LD_INT 2
16882: PPUSH
16883: CALL_OW 322
// SetTech ( tech_SibEng , You , state_researched ) ;
16887: LD_INT 22
16889: PPUSH
16890: LD_EXP 1
16894: PPUSH
16895: LD_INT 2
16897: PPUSH
16898: CALL_OW 322
// SetTech ( tech_Mortar , You , state_researched ) ;
16902: LD_INT 41
16904: PPUSH
16905: LD_EXP 1
16909: PPUSH
16910: LD_INT 2
16912: PPUSH
16913: CALL_OW 322
// end ;
16917: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , Arabi ] , [ f_btype , b_warehouse ] ] ) = 0 do var pomauta ; var art ; var i , pom ;
16918: LD_INT 22
16920: PUSH
16921: LD_EXP 3
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 30
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PPUSH
16944: CALL_OW 69
16948: PUSH
16949: LD_INT 0
16951: EQUAL
16952: IFFALSE 17121
16954: GO 16956
16956: DISABLE
16957: LD_INT 0
16959: PPUSH
16960: PPUSH
16961: PPUSH
16962: PPUSH
// begin pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_INT 22
16970: PUSH
16971: LD_EXP 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 2
16982: PUSH
16983: LD_INT 34
16985: PUSH
16986: LD_INT 12
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 34
16995: PUSH
16996: LD_INT 32
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PPUSH
17012: CALL_OW 69
17016: ST_TO_ADDR
// art = false ;
17017: LD_ADDR_VAR 0 2
17021: PUSH
17022: LD_INT 0
17024: ST_TO_ADDR
// for i in pomauta do
17025: LD_ADDR_VAR 0 3
17029: PUSH
17030: LD_VAR 0 1
17034: PUSH
17035: FOR_IN
17036: IFFALSE 17066
// if GetCargo ( i , mat_artefact ) > 0 then
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 4
17045: PPUSH
17046: CALL_OW 289
17050: PUSH
17051: LD_INT 0
17053: GREATER
17054: IFFALSE 17064
// art = true ;
17056: LD_ADDR_VAR 0 2
17060: PUSH
17061: LD_INT 1
17063: ST_TO_ADDR
17064: GO 17035
17066: POP
17067: POP
// if art then
17068: LD_VAR 0 2
17072: IFFALSE 17080
// konec_mise else
17074: CALL 644 0 0
17078: GO 17121
// begin pom = query_konec_mise ;
17080: LD_ADDR_VAR 0 4
17084: PUSH
17085: CALL 7715 0 0
17089: ST_TO_ADDR
// if pom = 2 then
17090: LD_VAR 0 4
17094: PUSH
17095: LD_INT 2
17097: EQUAL
17098: IFFALSE 17106
// konec_mise else
17100: CALL 644 0 0
17104: GO 17121
// begin end_the_mission_allowed = true ;
17106: LD_ADDR_OWVAR 57
17110: PUSH
17111: LD_INT 1
17113: ST_TO_ADDR
// ChangeMissionObjectives ( MDestroyOut ) ;
17114: LD_STRING MDestroyOut
17116: PPUSH
17117: CALL_OW 337
// end ; end ; end ; end_of_file
17121: PPOPN 4
17123: END
// export Odebirani ; export oposoldier ; export bum2 ; var utok1 ; var utok1_over ; var utok3_over ; var utok4_over ; var Veze_2 ; var Opr_2 ; var i , pom , pom1 ; var uklizejici_mista ; var mcm1 ; var mcm2 ; every 0 0$0.3 do
17124: GO 17126
17126: DISABLE
// begin utok1 := false ;
17127: LD_ADDR_LOC 27
17131: PUSH
17132: LD_INT 0
17134: ST_TO_ADDR
// bum2 = false ;
17135: LD_ADDR_EXP 46
17139: PUSH
17140: LD_INT 0
17142: ST_TO_ADDR
// Veze_2 := [ A2_bu1 , A2_bu2 , A2_bu3 , A2_bu4 , A2_bu4 , A2_bu5 , A2_bu6 ] ;
17143: LD_ADDR_LOC 31
17147: PUSH
17148: LD_INT 112
17150: PUSH
17151: LD_INT 63
17153: PUSH
17154: LD_INT 47
17156: PUSH
17157: LD_INT 60
17159: PUSH
17160: LD_INT 60
17162: PUSH
17163: LD_INT 62
17165: PUSH
17166: LD_INT 59
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: ST_TO_ADDR
// Opr_2 = [ JEDNOTKY_BAZE_2_LIST [ 15 ] , JEDNOTKY_BAZE_2_LIST [ 16 ] ] ;
17178: LD_ADDR_LOC 32
17182: PUSH
17183: LD_EXP 10
17187: PUSH
17188: LD_INT 15
17190: ARRAY
17191: PUSH
17192: LD_EXP 10
17196: PUSH
17197: LD_INT 16
17199: ARRAY
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: ST_TO_ADDR
// pom = vytvor_opravare ;
17205: LD_ADDR_LOC 34
17209: PUSH
17210: CALL 8897 0 0
17214: ST_TO_ADDR
// Opr_2 = Opr_2 ^ pom ;
17215: LD_ADDR_LOC 32
17219: PUSH
17220: LD_LOC 32
17224: PUSH
17225: LD_LOC 34
17229: ADD
17230: ST_TO_ADDR
// Utok1_over = false ;
17231: LD_ADDR_LOC 28
17235: PUSH
17236: LD_INT 0
17238: ST_TO_ADDR
// utok3_over = false ;
17239: LD_ADDR_LOC 29
17243: PUSH
17244: LD_INT 0
17246: ST_TO_ADDR
// utok4_over = false ;
17247: LD_ADDR_LOC 30
17251: PUSH
17252: LD_INT 0
17254: ST_TO_ADDR
// uklizejici_mista = [ [ 28 , 16 ] , [ 22 , 18 ] , [ 29 , 20 ] , [ 19 , 33 ] ] ;
17255: LD_ADDR_LOC 36
17259: PUSH
17260: LD_INT 28
17262: PUSH
17263: LD_INT 16
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 22
17272: PUSH
17273: LD_INT 18
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 29
17282: PUSH
17283: LD_INT 20
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 19
17292: PUSH
17293: LD_INT 33
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: ST_TO_ADDR
// disable ( 998 ) ;
17306: LD_INT 998
17308: DISABLE_MARKED
// disable ( 997 ) ;
17309: LD_INT 997
17311: DISABLE_MARKED
// disable ( 996 ) ;
17312: LD_INT 996
17314: DISABLE_MARKED
// disable ( 995 ) ;
17315: LD_INT 995
17317: DISABLE_MARKED
// if difficulty < 3 then
17318: LD_OWVAR 67
17322: PUSH
17323: LD_INT 3
17325: LESS
17326: IFFALSE 17335
// RemoveUnit ( sui1 ) ;
17328: LD_INT 118
17330: PPUSH
17331: CALL_OW 64
// if difficulty < 2 then
17335: LD_OWVAR 67
17339: PUSH
17340: LD_INT 2
17342: LESS
17343: IFFALSE 17359
// begin RemoveUnit ( sui2 ) ;
17345: LD_INT 119
17347: PPUSH
17348: CALL_OW 64
// RemoveUnit ( sui3 ) ;
17352: LD_INT 121
17354: PPUSH
17355: CALL_OW 64
// end ; end ;
17359: END
// export function uklid_arabu ; begin
17360: LD_INT 0
17362: PPUSH
// ComEnterUnit ( zradce1 , A1_lab ) ;
17363: LD_INT 65
17365: PPUSH
17366: LD_INT 15
17368: PPUSH
17369: CALL_OW 120
// ComEnterUnit ( zradce2 , A1_bu1 ) ;
17373: LD_INT 68
17375: PPUSH
17376: LD_INT 9
17378: PPUSH
17379: CALL_OW 120
// ComEnterUnit ( zradce3 , A1_bu2 ) ;
17383: LD_INT 69
17385: PPUSH
17386: LD_INT 8
17388: PPUSH
17389: CALL_OW 120
// ComEnterUnit ( zradce4 , A1_bar ) ;
17393: LD_INT 70
17395: PPUSH
17396: LD_INT 14
17398: PPUSH
17399: CALL_OW 120
// ComEnterUnit ( zradce5 , A1_bar ) ;
17403: LD_INT 71
17405: PPUSH
17406: LD_INT 14
17408: PPUSH
17409: CALL_OW 120
// ComEnterUnit ( A1_vo1 , A1_bu3 ) ;
17413: LD_INT 72
17415: PPUSH
17416: LD_INT 11
17418: PPUSH
17419: CALL_OW 120
// ComEnterUnit ( A1_vo2 , A1_dep ) ;
17423: LD_INT 73
17425: PPUSH
17426: LD_INT 4
17428: PPUSH
17429: CALL_OW 120
// ComEnterUnit ( A1_vo4 , A1_dep ) ;
17433: LD_INT 76
17435: PPUSH
17436: LD_INT 4
17438: PPUSH
17439: CALL_OW 120
// ComEnterUnit ( A1_ve1 , A1_lab ) ;
17443: LD_INT 87
17445: PPUSH
17446: LD_INT 15
17448: PPUSH
17449: CALL_OW 120
// ComEnterUnit ( A1_ve2 , A1_lab ) ;
17453: LD_INT 74
17455: PPUSH
17456: LD_INT 15
17458: PPUSH
17459: CALL_OW 120
// ComEnterUnit ( zradce6 , A1_bu6 ) ;
17463: LD_INT 75
17465: PPUSH
17466: LD_INT 10
17468: PPUSH
17469: CALL_OW 120
// ComEnterUnit ( zradce7 , A1_bu4 ) ;
17473: LD_INT 77
17475: PPUSH
17476: LD_INT 12
17478: PPUSH
17479: CALL_OW 120
// ComHold ( mrtvola2 ) ;
17483: LD_INT 78
17485: PPUSH
17486: CALL_OW 140
// ComEnterUnit ( A1_en1 , A1_dep ) ;
17490: LD_INT 79
17492: PPUSH
17493: LD_INT 4
17495: PPUSH
17496: CALL_OW 120
// ComEnterUnit ( A1_me1 , A1_tov ) ;
17500: LD_INT 81
17502: PPUSH
17503: LD_INT 110
17505: PPUSH
17506: CALL_OW 120
// ComEnterUnit ( A1_me2 , A1_tov ) ;
17510: LD_INT 80
17512: PPUSH
17513: LD_INT 110
17515: PPUSH
17516: CALL_OW 120
// ComPlaceRemoteCharge ( A2_zas1 , 52 , 62 , 0 ) ;
17520: LD_INT 82
17522: PPUSH
17523: LD_INT 52
17525: PPUSH
17526: LD_INT 62
17528: PPUSH
17529: LD_INT 0
17531: PPUSH
17532: CALL_OW 133
// ComPlaceRemoteCharge ( A2_zas2 , 55 , 64 , 0 ) ;
17536: LD_INT 83
17538: PPUSH
17539: LD_INT 55
17541: PPUSH
17542: LD_INT 64
17544: PPUSH
17545: LD_INT 0
17547: PPUSH
17548: CALL_OW 133
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 44 , 24 ) ;
17552: LD_INT 82
17554: PUSH
17555: LD_INT 83
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PPUSH
17562: LD_INT 44
17564: PPUSH
17565: LD_INT 24
17567: PPUSH
17568: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 30 , 11 ) ;
17572: LD_INT 82
17574: PUSH
17575: LD_INT 83
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PPUSH
17582: LD_INT 30
17584: PPUSH
17585: LD_INT 11
17587: PPUSH
17588: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 24 , 37 ) ;
17592: LD_INT 82
17594: PUSH
17595: LD_INT 83
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PPUSH
17602: LD_INT 24
17604: PPUSH
17605: LD_INT 37
17607: PPUSH
17608: CALL_OW 171
// AddComMoveXY ( A2_zas1 , 32 , 60 ) ;
17612: LD_INT 82
17614: PPUSH
17615: LD_INT 32
17617: PPUSH
17618: LD_INT 60
17620: PPUSH
17621: CALL_OW 171
// AddComMoveXY ( A2_zas2 , 37 , 58 ) ;
17625: LD_INT 83
17627: PPUSH
17628: LD_INT 37
17630: PPUSH
17631: LD_INT 58
17633: PPUSH
17634: CALL_OW 171
// AddComCrawl ( [ A2_zas1 , A2_zas2 ] ) ;
17638: LD_INT 82
17640: PUSH
17641: LD_INT 83
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PPUSH
17648: CALL_OW 197
// ComEnterUnit ( A3_rme1 , A3_rv1 ) ;
17652: LD_INT 96
17654: PPUSH
17655: LD_INT 26
17657: PPUSH
17658: CALL_OW 120
// ComEnterUnit ( A3_rme2 , A3_rv2 ) ;
17662: LD_INT 95
17664: PPUSH
17665: LD_INT 25
17667: PPUSH
17668: CALL_OW 120
// ComEnterUnit ( A3_rme3 , A3_rv3 ) ;
17672: LD_INT 94
17674: PPUSH
17675: LD_INT 27
17677: PPUSH
17678: CALL_OW 120
// wait ( 0 0$5 ) ;
17682: LD_INT 175
17684: PPUSH
17685: CALL_OW 67
// ComLinkTo ( [ A3_are1 , A3_are2 , A3_are3 ] , A3_rme1 ) ;
17689: LD_INT 23
17691: PUSH
17692: LD_INT 18
17694: PUSH
17695: LD_INT 44
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: PPUSH
17703: LD_INT 96
17705: PPUSH
17706: CALL_OW 135
// ComLinkTo ( [ A3_are4 , A3_are5 , A3_are6 ] , A3_rme2 ) ;
17710: LD_INT 19
17712: PUSH
17713: LD_INT 24
17715: PUSH
17716: LD_INT 20
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PPUSH
17724: LD_INT 95
17726: PPUSH
17727: CALL_OW 135
// ComLinkTo ( [ A3_are7 , A3_are8 , A3_are9 ] , A3_rme3 ) ;
17731: LD_INT 21
17733: PUSH
17734: LD_INT 93
17736: PUSH
17737: LD_INT 22
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: PPUSH
17745: LD_INT 94
17747: PPUSH
17748: CALL_OW 135
// ComPlaceRemoteCharge ( A3_zas1 , 103 , 19 , 0 ) ;
17752: LD_INT 101
17754: PPUSH
17755: LD_INT 103
17757: PPUSH
17758: LD_INT 19
17760: PPUSH
17761: LD_INT 0
17763: PPUSH
17764: CALL_OW 133
// AddComMoveXY ( A3_zas1 , 104 , 3 ) ;
17768: LD_INT 101
17770: PPUSH
17771: LD_INT 104
17773: PPUSH
17774: LD_INT 3
17776: PPUSH
17777: CALL_OW 171
// AddComCrawl ( A3_zas1 ) ;
17781: LD_INT 101
17783: PPUSH
17784: CALL_OW 197
// AddComTurnXY ( A3_zas1 , 102 , 8 ) ;
17788: LD_INT 101
17790: PPUSH
17791: LD_INT 102
17793: PPUSH
17794: LD_INT 8
17796: PPUSH
17797: CALL_OW 178
// end ;
17801: LD_VAR 0 1
17805: RET
// export function uklid_arabu2 ; var MD1_un ; var MD2_un ; begin
17806: LD_INT 0
17808: PPUSH
17809: PPUSH
17810: PPUSH
// MD1_un = [ ] ;
17811: LD_ADDR_VAR 0 2
17815: PUSH
17816: EMPTY
17817: ST_TO_ADDR
// MD2_un = [ ] ;
17818: LD_ADDR_VAR 0 3
17822: PUSH
17823: EMPTY
17824: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 1 ] , A2_bu1 ) ;
17825: LD_EXP 10
17829: PUSH
17830: LD_INT 1
17832: ARRAY
17833: PPUSH
17834: LD_INT 112
17836: PPUSH
17837: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu1 , false , 0 ] ] ;
17841: LD_ADDR_LOC 36
17845: PUSH
17846: LD_LOC 36
17850: PUSH
17851: LD_INT 112
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: ADD
17868: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 2 ] , A2_bu2 ) ;
17869: LD_EXP 10
17873: PUSH
17874: LD_INT 2
17876: ARRAY
17877: PPUSH
17878: LD_INT 63
17880: PPUSH
17881: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 2 ] ;
17885: LD_ADDR_VAR 0 2
17889: PUSH
17890: LD_VAR 0 2
17894: PUSH
17895: LD_EXP 10
17899: PUSH
17900: LD_INT 2
17902: ARRAY
17903: ADD
17904: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu2 , false , 0 ] ] ;
17905: LD_ADDR_LOC 36
17909: PUSH
17910: LD_LOC 36
17914: PUSH
17915: LD_INT 63
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: ADD
17932: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 3 ] , A2_bu3 ) ;
17933: LD_EXP 10
17937: PUSH
17938: LD_INT 3
17940: ARRAY
17941: PPUSH
17942: LD_INT 47
17944: PPUSH
17945: CALL_OW 120
// if difficulty > 1 then
17949: LD_OWVAR 67
17953: PUSH
17954: LD_INT 1
17956: GREATER
17957: IFFALSE 17979
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
17959: LD_ADDR_VAR 0 2
17963: PUSH
17964: LD_VAR 0 2
17968: PUSH
17969: LD_EXP 10
17973: PUSH
17974: LD_INT 3
17976: ARRAY
17977: ADD
17978: ST_TO_ADDR
// if difficulty > 1 then
17979: LD_OWVAR 67
17983: PUSH
17984: LD_INT 1
17986: GREATER
17987: IFFALSE 18009
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
17989: LD_ADDR_VAR 0 3
17993: PUSH
17994: LD_VAR 0 3
17998: PUSH
17999: LD_EXP 10
18003: PUSH
18004: LD_INT 3
18006: ARRAY
18007: ADD
18008: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu3 , false , 0 ] ] ;
18009: LD_ADDR_LOC 36
18013: PUSH
18014: LD_LOC 36
18018: PUSH
18019: LD_INT 47
18021: PUSH
18022: LD_INT 0
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: ADD
18036: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 4 ] , A2_bu4 ) ;
18037: LD_EXP 10
18041: PUSH
18042: LD_INT 4
18044: ARRAY
18045: PPUSH
18046: LD_INT 60
18048: PPUSH
18049: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu4 , false , 0 ] ] ;
18053: LD_ADDR_LOC 36
18057: PUSH
18058: LD_LOC 36
18062: PUSH
18063: LD_INT 60
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: LD_INT 0
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: ADD
18080: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 5 ] , A2_bu5 ) ;
18081: LD_EXP 10
18085: PUSH
18086: LD_INT 5
18088: ARRAY
18089: PPUSH
18090: LD_INT 62
18092: PPUSH
18093: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 5 ] ;
18097: LD_ADDR_VAR 0 3
18101: PUSH
18102: LD_VAR 0 3
18106: PUSH
18107: LD_EXP 10
18111: PUSH
18112: LD_INT 5
18114: ARRAY
18115: ADD
18116: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu5 , false , 0 ] ] ;
18117: LD_ADDR_LOC 36
18121: PUSH
18122: LD_LOC 36
18126: PUSH
18127: LD_INT 62
18129: PUSH
18130: LD_INT 0
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: ADD
18144: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 6 ] , A2_bu6 ) ;
18145: LD_EXP 10
18149: PUSH
18150: LD_INT 6
18152: ARRAY
18153: PPUSH
18154: LD_INT 59
18156: PPUSH
18157: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 6 ] ;
18161: LD_ADDR_VAR 0 3
18165: PUSH
18166: LD_VAR 0 3
18170: PUSH
18171: LD_EXP 10
18175: PUSH
18176: LD_INT 6
18178: ARRAY
18179: ADD
18180: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu6 , false , 0 ] ] ;
18181: LD_ADDR_LOC 36
18185: PUSH
18186: LD_LOC 36
18190: PUSH
18191: LD_INT 59
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: ADD
18208: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 17 ] , A2_tov ) ;
18209: LD_EXP 10
18213: PUSH
18214: LD_INT 17
18216: ARRAY
18217: PPUSH
18218: LD_INT 50
18220: PPUSH
18221: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18225: LD_ADDR_VAR 0 2
18229: PUSH
18230: LD_VAR 0 2
18234: PUSH
18235: LD_EXP 10
18239: PUSH
18240: LD_INT 17
18242: ARRAY
18243: ADD
18244: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18245: LD_ADDR_VAR 0 3
18249: PUSH
18250: LD_VAR 0 3
18254: PUSH
18255: LD_EXP 10
18259: PUSH
18260: LD_INT 17
18262: ARRAY
18263: ADD
18264: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18265: LD_ADDR_LOC 36
18269: PUSH
18270: LD_LOC 36
18274: PUSH
18275: LD_INT 50
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 3
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: PUSH
18289: EMPTY
18290: LIST
18291: ADD
18292: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 18 ] , A2_tov ) ;
18293: LD_EXP 10
18297: PUSH
18298: LD_INT 18
18300: ARRAY
18301: PPUSH
18302: LD_INT 50
18304: PPUSH
18305: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 18 ] ;
18309: LD_ADDR_VAR 0 2
18313: PUSH
18314: LD_VAR 0 2
18318: PUSH
18319: LD_EXP 10
18323: PUSH
18324: LD_INT 18
18326: ARRAY
18327: ADD
18328: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18329: LD_ADDR_LOC 36
18333: PUSH
18334: LD_LOC 36
18338: PUSH
18339: LD_INT 50
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: LD_INT 3
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: ADD
18356: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 19 ] , A2_tov ) ;
18357: LD_EXP 10
18361: PUSH
18362: LD_INT 19
18364: ARRAY
18365: PPUSH
18366: LD_INT 50
18368: PPUSH
18369: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 20 ] , A2_tov ) ;
18373: LD_EXP 10
18377: PUSH
18378: LD_INT 20
18380: ARRAY
18381: PPUSH
18382: LD_INT 50
18384: PPUSH
18385: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 15 ] , A2_dep ) ;
18389: LD_EXP 10
18393: PUSH
18394: LD_INT 15
18396: ARRAY
18397: PPUSH
18398: LD_INT 46
18400: PPUSH
18401: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 16 ] , A2_dep ) ;
18405: LD_EXP 10
18409: PUSH
18410: LD_INT 16
18412: ARRAY
18413: PPUSH
18414: LD_INT 46
18416: PPUSH
18417: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 16 ] ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 3
18430: PUSH
18431: LD_EXP 10
18435: PUSH
18436: LD_INT 16
18438: ARRAY
18439: ADD
18440: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_dep , true , class_engineer ] ] ;
18441: LD_ADDR_LOC 36
18445: PUSH
18446: LD_LOC 36
18450: PUSH
18451: LD_INT 46
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: ADD
18468: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 7 ] , A2_bar ) ;
18469: LD_EXP 10
18473: PUSH
18474: LD_INT 7
18476: ARRAY
18477: PPUSH
18478: LD_INT 48
18480: PPUSH
18481: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 7 ] ;
18485: LD_ADDR_VAR 0 2
18489: PUSH
18490: LD_VAR 0 2
18494: PUSH
18495: LD_EXP 10
18499: PUSH
18500: LD_INT 7
18502: ARRAY
18503: ADD
18504: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18505: LD_ADDR_LOC 36
18509: PUSH
18510: LD_LOC 36
18514: PUSH
18515: LD_INT 48
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 8
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: PUSH
18529: EMPTY
18530: LIST
18531: ADD
18532: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] , A2_bar ) ;
18533: LD_EXP 10
18537: PUSH
18538: LD_INT 8
18540: ARRAY
18541: PPUSH
18542: LD_INT 48
18544: PPUSH
18545: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 8 ] ;
18549: LD_ADDR_VAR 0 3
18553: PUSH
18554: LD_VAR 0 3
18558: PUSH
18559: LD_EXP 10
18563: PUSH
18564: LD_INT 8
18566: ARRAY
18567: ADD
18568: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_soldier ] ] ;
18569: LD_ADDR_LOC 36
18573: PUSH
18574: LD_LOC 36
18578: PUSH
18579: LD_INT 48
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: LIST
18592: PUSH
18593: EMPTY
18594: LIST
18595: ADD
18596: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] , A2_bar ) ;
18597: LD_EXP 10
18601: PUSH
18602: LD_INT 9
18604: ARRAY
18605: PPUSH
18606: LD_INT 48
18608: PPUSH
18609: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18613: LD_ADDR_LOC 36
18617: PUSH
18618: LD_LOC 36
18622: PUSH
18623: LD_INT 48
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 8
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: ADD
18640: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 10 ] , A2_bar ) ;
18641: LD_EXP 10
18645: PUSH
18646: LD_INT 10
18648: ARRAY
18649: PPUSH
18650: LD_INT 48
18652: PPUSH
18653: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 11 ] , A2_lab ) ;
18657: LD_EXP 10
18661: PUSH
18662: LD_INT 11
18664: ARRAY
18665: PPUSH
18666: LD_INT 61
18668: PPUSH
18669: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_VAR 0 2
18682: PUSH
18683: LD_EXP 10
18687: PUSH
18688: LD_INT 10
18690: ARRAY
18691: ADD
18692: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18693: LD_ADDR_VAR 0 3
18697: PUSH
18698: LD_VAR 0 3
18702: PUSH
18703: LD_EXP 10
18707: PUSH
18708: LD_INT 10
18710: ARRAY
18711: ADD
18712: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_lab , true , class_scientistic ] ] ;
18713: LD_ADDR_LOC 36
18717: PUSH
18718: LD_LOC 36
18722: PUSH
18723: LD_INT 61
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 4
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: PUSH
18737: EMPTY
18738: LIST
18739: ADD
18740: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 12 ] , A2_lab ) ;
18741: LD_EXP 10
18745: PUSH
18746: LD_INT 12
18748: ARRAY
18749: PPUSH
18750: LD_INT 61
18752: PPUSH
18753: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 23 ] , A2_radar ) ;
18757: LD_EXP 10
18761: PUSH
18762: LD_INT 23
18764: ARRAY
18765: PPUSH
18766: LD_INT 88
18768: PPUSH
18769: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 21 ] , A2_nau1 ) ;
18773: LD_EXP 10
18777: PUSH
18778: LD_INT 21
18780: ARRAY
18781: PPUSH
18782: LD_INT 107
18784: PPUSH
18785: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: LD_VAR 0 2
18798: PUSH
18799: LD_EXP 10
18803: PUSH
18804: LD_INT 21
18806: ARRAY
18807: ADD
18808: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18809: LD_ADDR_VAR 0 3
18813: PUSH
18814: LD_VAR 0 3
18818: PUSH
18819: LD_EXP 10
18823: PUSH
18824: LD_INT 21
18826: ARRAY
18827: ADD
18828: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau1 , false , 0 ] ] ;
18829: LD_ADDR_LOC 36
18833: PUSH
18834: LD_LOC 36
18838: PUSH
18839: LD_INT 107
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: PUSH
18853: EMPTY
18854: LIST
18855: ADD
18856: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 22 ] , A2_nau2 ) ;
18857: LD_EXP 10
18861: PUSH
18862: LD_INT 22
18864: ARRAY
18865: PPUSH
18866: LD_INT 108
18868: PPUSH
18869: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18873: LD_ADDR_VAR 0 2
18877: PUSH
18878: LD_VAR 0 2
18882: PUSH
18883: LD_EXP 10
18887: PUSH
18888: LD_INT 22
18890: ARRAY
18891: ADD
18892: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_EXP 10
18907: PUSH
18908: LD_INT 22
18910: ARRAY
18911: ADD
18912: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau2 , false , 0 ] ] ;
18913: LD_ADDR_LOC 36
18917: PUSH
18918: LD_LOC 36
18922: PUSH
18923: LD_INT 108
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: PUSH
18937: EMPTY
18938: LIST
18939: ADD
18940: ST_TO_ADDR
// ComEnterUnit ( Opr_2 , A2_dep ) ;
18941: LD_LOC 32
18945: PPUSH
18946: LD_INT 46
18948: PPUSH
18949: CALL_OW 120
// AddMcUnits ( MD1 , MD1_un ) ;
18953: LD_EXP 6
18957: PPUSH
18958: LD_VAR 0 2
18962: PPUSH
18963: CALL_OW 390
// AddMcUnits ( MD2 , MD2_un ) ;
18967: LD_EXP 8
18971: PPUSH
18972: LD_VAR 0 3
18976: PPUSH
18977: CALL_OW 390
// end ;
18981: LD_VAR 0 1
18985: RET
// export function uklid_arabu3 ; begin
18986: LD_INT 0
18988: PPUSH
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 1 ] , A3_bu1 ) ;
18989: LD_EXP 11
18993: PUSH
18994: LD_INT 1
18996: ARRAY
18997: PPUSH
18998: LD_INT 30
19000: PPUSH
19001: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 2 ] , A3_bu2 ) ;
19005: LD_EXP 11
19009: PUSH
19010: LD_INT 2
19012: ARRAY
19013: PPUSH
19014: LD_INT 43
19016: PPUSH
19017: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 3 ] , A3_bu3 ) ;
19021: LD_EXP 11
19025: PUSH
19026: LD_INT 3
19028: ARRAY
19029: PPUSH
19030: LD_INT 31
19032: PPUSH
19033: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 7 ] , A3_bar ) ;
19037: LD_EXP 11
19041: PUSH
19042: LD_INT 7
19044: ARRAY
19045: PPUSH
19046: LD_INT 40
19048: PPUSH
19049: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 5 ] , A3_bar ) ;
19053: LD_EXP 11
19057: PUSH
19058: LD_INT 5
19060: ARRAY
19061: PPUSH
19062: LD_INT 40
19064: PPUSH
19065: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 6 ] , A3_bar ) ;
19069: LD_EXP 11
19073: PUSH
19074: LD_INT 6
19076: ARRAY
19077: PPUSH
19078: LD_INT 40
19080: PPUSH
19081: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 4 ] , A3_dep ) ;
19085: LD_EXP 11
19089: PUSH
19090: LD_INT 4
19092: ARRAY
19093: PPUSH
19094: LD_INT 28
19096: PPUSH
19097: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 8 ] , A3_tov ) ;
19101: LD_EXP 11
19105: PUSH
19106: LD_INT 8
19108: ARRAY
19109: PPUSH
19110: LD_INT 34
19112: PPUSH
19113: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 9 ] , A3_tov ) ;
19117: LD_EXP 11
19121: PUSH
19122: LD_INT 9
19124: ARRAY
19125: PPUSH
19126: LD_INT 34
19128: PPUSH
19129: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 10 ] , A3_tov ) ;
19133: LD_EXP 11
19137: PUSH
19138: LD_INT 10
19140: ARRAY
19141: PPUSH
19142: LD_INT 34
19144: PPUSH
19145: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 11 ] , A3_tov ) ;
19149: LD_EXP 11
19153: PUSH
19154: LD_INT 11
19156: ARRAY
19157: PPUSH
19158: LD_INT 34
19160: PPUSH
19161: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 12 ] , A3_lab ) ;
19165: LD_EXP 11
19169: PUSH
19170: LD_INT 12
19172: ARRAY
19173: PPUSH
19174: LD_INT 41
19176: PPUSH
19177: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 13 ] , A3_lab ) ;
19181: LD_EXP 11
19185: PUSH
19186: LD_INT 13
19188: ARRAY
19189: PPUSH
19190: LD_INT 41
19192: PPUSH
19193: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 16 ] , A3_dep ) ;
19197: LD_EXP 11
19201: PUSH
19202: LD_INT 16
19204: ARRAY
19205: PPUSH
19206: LD_INT 28
19208: PPUSH
19209: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 17 ] , A3_dep ) ;
19213: LD_EXP 11
19217: PUSH
19218: LD_INT 17
19220: ARRAY
19221: PPUSH
19222: LD_INT 28
19224: PPUSH
19225: CALL_OW 120
// end ;
19229: LD_VAR 0 1
19233: RET
// every 0 0$1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do
19234: LD_INT 3
19236: PPUSH
19237: LD_INT 22
19239: PUSH
19240: LD_EXP 1
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: PPUSH
19252: CALL_OW 70
19256: PUSH
19257: LD_INT 0
19259: GREATER
19260: IFFALSE 19406
19262: GO 19264
19264: DISABLE
// begin wait ( 0 0$2 ) ;
19265: LD_INT 70
19267: PPUSH
19268: CALL_OW 67
// ComExitBuilding ( A1_vo2 ) ;
19272: LD_INT 73
19274: PPUSH
19275: CALL_OW 122
// ComExitBuilding ( [ A1_ve1 , A1_ve2 ] ) ;
19279: LD_INT 87
19281: PUSH
19282: LD_INT 74
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 122
// AddComAgressiveMove ( A1_ve1 , 121 , 147 ) ;
19293: LD_INT 87
19295: PPUSH
19296: LD_INT 121
19298: PPUSH
19299: LD_INT 147
19301: PPUSH
19302: CALL_OW 174
// AddComAgressiveMove ( A1_ve1 , 113 , 141 ) ;
19306: LD_INT 87
19308: PPUSH
19309: LD_INT 113
19311: PPUSH
19312: LD_INT 141
19314: PPUSH
19315: CALL_OW 174
// AddComEnterUnit ( A1_ve1 , A1_bu1 ) ;
19319: LD_INT 87
19321: PPUSH
19322: LD_INT 9
19324: PPUSH
19325: CALL_OW 180
// ComExitBuilding ( A1_en1 ) ;
19329: LD_INT 79
19331: PPUSH
19332: CALL_OW 122
// ComExitBuilding ( [ A1_me1 , A1_me2 ] ) ;
19336: LD_INT 81
19338: PUSH
19339: LD_INT 80
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 122
// AddComAgressiveMove ( A1_me1 , 113 , 128 ) ;
19350: LD_INT 81
19352: PPUSH
19353: LD_INT 113
19355: PPUSH
19356: LD_INT 128
19358: PPUSH
19359: CALL_OW 174
// if difficulty = 3 then
19363: LD_OWVAR 67
19367: PUSH
19368: LD_INT 3
19370: EQUAL
19371: IFFALSE 19383
// AddComEnterUnit ( A1_me1 , A1_au2 ) ;
19373: LD_INT 81
19375: PPUSH
19376: LD_INT 109
19378: PPUSH
19379: CALL_OW 180
// AddComAgressiveMove ( A1_me2 , 117 , 125 ) ;
19383: LD_INT 80
19385: PPUSH
19386: LD_INT 117
19388: PPUSH
19389: LD_INT 125
19391: PPUSH
19392: CALL_OW 174
// AddComEnterUnit ( A1_me2 , A1_au1 ) ;
19396: LD_INT 80
19398: PPUSH
19399: LD_INT 105
19401: PPUSH
19402: CALL_OW 180
// end ;
19406: END
// every 1 1$0 trigger utok1_over do var pom , i ; var souradnice ;
19407: LD_LOC 28
19411: IFFALSE 19644
19413: GO 19415
19415: DISABLE
19416: LD_INT 0
19418: PPUSH
19419: PPUSH
19420: PPUSH
// begin wait ( utok_2_doba [ difficulty ] ) ;
19421: LD_EXP 53
19425: PUSH
19426: LD_OWVAR 67
19430: ARRAY
19431: PPUSH
19432: CALL_OW 67
// for i in Ar_utok3_LIST do
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: LD_EXP 14
19445: PUSH
19446: FOR_IN
19447: IFFALSE 19466
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19449: LD_VAR 0 2
19453: PPUSH
19454: LD_INT 25
19456: PPUSH
19457: LD_INT 0
19459: PPUSH
19460: CALL_OW 49
19464: GO 19446
19466: POP
19467: POP
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
19468: LD_ADDR_VAR 0 1
19472: PUSH
19473: LD_INT 22
19475: PUSH
19476: LD_EXP 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: EMPTY
19486: LIST
19487: PPUSH
19488: CALL_OW 69
19492: ST_TO_ADDR
// if pom > 0 then
19493: LD_VAR 0 1
19497: PUSH
19498: LD_INT 0
19500: GREATER
19501: IFFALSE 19542
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19503: LD_ADDR_VAR 0 3
19507: PUSH
19508: LD_VAR 0 1
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 250
19521: PUSH
19522: LD_VAR 0 1
19526: PUSH
19527: LD_INT 1
19529: ARRAY
19530: PPUSH
19531: CALL_OW 251
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: ST_TO_ADDR
19540: GO 19557
// souradnice = [ 102 , 125 ] ;
19542: LD_ADDR_VAR 0 3
19546: PUSH
19547: LD_INT 102
19549: PUSH
19550: LD_INT 125
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19557: LD_INT 35
19559: PPUSH
19560: CALL_OW 67
// mcm1 = McMove ( 1 , Ar_utok3_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive ] ) ;
19564: LD_ADDR_LOC 37
19568: PUSH
19569: LD_INT 1
19571: PPUSH
19572: LD_EXP 14
19576: PPUSH
19577: LD_INT 128
19579: PUSH
19580: LD_INT 91
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 128
19589: PUSH
19590: LD_INT 108
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 126
19599: PUSH
19600: LD_INT 121
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 120
19609: PUSH
19610: LD_INT 131
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_VAR 0 3
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: PPUSH
19629: LD_INT 1
19631: PUSH
19632: LD_INT 6
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PPUSH
19639: CALL_OW 398
19643: ST_TO_ADDR
// end ;
19644: PPOPN 3
19646: END
// every 0 0$5 trigger ( not IsOK ( A2_bu1 ) ) and ( not IsOK ( A2_bu2 ) ) do var pom , i ; var souradnice ;
19647: LD_INT 112
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_INT 63
19658: PPUSH
19659: CALL_OW 302
19663: NOT
19664: AND
19665: IFFALSE 19899
19667: GO 19669
19669: DISABLE
19670: LD_INT 0
19672: PPUSH
19673: PPUSH
19674: PPUSH
// begin for i in Ar_utok2_LIST do
19675: LD_ADDR_VAR 0 2
19679: PUSH
19680: LD_EXP 13
19684: PUSH
19685: FOR_IN
19686: IFFALSE 19705
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19688: LD_VAR 0 2
19692: PPUSH
19693: LD_INT 25
19695: PPUSH
19696: LD_INT 0
19698: PPUSH
19699: CALL_OW 49
19703: GO 19685
19705: POP
19706: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
19707: LD_ADDR_VAR 0 1
19711: PUSH
19712: LD_INT 22
19714: PUSH
19715: LD_EXP 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 21
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PPUSH
19738: CALL_OW 69
19742: ST_TO_ADDR
// if pom > 0 then
19743: LD_VAR 0 1
19747: PUSH
19748: LD_INT 0
19750: GREATER
19751: IFFALSE 19792
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: LD_VAR 0 1
19762: PUSH
19763: LD_INT 1
19765: ARRAY
19766: PPUSH
19767: CALL_OW 250
19771: PUSH
19772: LD_VAR 0 1
19776: PUSH
19777: LD_INT 1
19779: ARRAY
19780: PPUSH
19781: CALL_OW 251
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: ST_TO_ADDR
19790: GO 19807
// souradnice = [ 39 , 16 ] ;
19792: LD_ADDR_VAR 0 3
19796: PUSH
19797: LD_INT 39
19799: PUSH
19800: LD_INT 16
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: ST_TO_ADDR
// mcm2 = McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19807: LD_ADDR_LOC 38
19811: PUSH
19812: LD_INT 1
19814: PPUSH
19815: LD_EXP 13
19819: PPUSH
19820: LD_INT 128
19822: PUSH
19823: LD_INT 91
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 128
19832: PUSH
19833: LD_INT 108
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 126
19842: PUSH
19843: LD_INT 121
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 120
19852: PUSH
19853: LD_INT 131
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_VAR 0 3
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: PPUSH
19872: LD_INT 1
19874: PUSH
19875: LD_INT 6
19877: PUSH
19878: LD_INT 5
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: PPUSH
19886: CALL_OW 398
19890: ST_TO_ADDR
// utok3_over = true ;
19891: LD_ADDR_LOC 29
19895: PUSH
19896: LD_INT 1
19898: ST_TO_ADDR
// end ;
19899: PPOPN 3
19901: END
// every 1 1$30 trigger A2_dobyta do var pom , i , pom1 ;
19902: LD_EXP 28
19906: IFFALSE 20171
19908: GO 19910
19910: DISABLE
19911: LD_INT 0
19913: PPUSH
19914: PPUSH
19915: PPUSH
// begin wait ( 2 2$0 ) ;
19916: LD_INT 4200
19918: PPUSH
19919: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19923: LD_ADDR_VAR 0 1
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_EXP 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 34
19945: PUSH
19946: LD_INT 12
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 34
19955: PUSH
19956: LD_INT 32
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 69
19976: ST_TO_ADDR
// for i in Ar_utok4_LIST do
19977: LD_ADDR_VAR 0 2
19981: PUSH
19982: LD_EXP 15
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20007
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19990: LD_VAR 0 2
19994: PPUSH
19995: LD_INT 25
19997: PPUSH
19998: LD_INT 0
20000: PPUSH
20001: CALL_OW 49
20005: GO 19987
20007: POP
20008: POP
// if pom > 0 then
20009: LD_VAR 0 1
20013: PUSH
20014: LD_INT 0
20016: GREATER
20017: IFFALSE 20091
// begin ComAgressiveMove ( Ar_utok4_LIST , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
20019: LD_EXP 15
20023: PPUSH
20024: LD_VAR 0 1
20028: PUSH
20029: LD_INT 1
20031: ARRAY
20032: PPUSH
20033: CALL_OW 250
20037: PPUSH
20038: LD_VAR 0 1
20042: PUSH
20043: LD_INT 1
20045: ARRAY
20046: PPUSH
20047: CALL_OW 251
20051: PPUSH
20052: CALL_OW 114
// AddComAttackUnit ( Ar_utok4_LIST , pom [ 1 ] ) ;
20056: LD_EXP 15
20060: PPUSH
20061: LD_VAR 0 1
20065: PUSH
20066: LD_INT 1
20068: ARRAY
20069: PPUSH
20070: CALL_OW 175
// AddComAgressiveMove ( Ar_utok4_LIST , 59 , 7 ) ;
20074: LD_EXP 15
20078: PPUSH
20079: LD_INT 59
20081: PPUSH
20082: LD_INT 7
20084: PPUSH
20085: CALL_OW 174
// end else
20089: GO 20163
// McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 123 ] ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
20091: LD_INT 1
20093: PPUSH
20094: LD_EXP 13
20098: PPUSH
20099: LD_INT 128
20101: PUSH
20102: LD_INT 91
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 128
20111: PUSH
20112: LD_INT 108
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 126
20121: PUSH
20122: LD_INT 121
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 120
20131: PUSH
20132: LD_INT 123
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: PPUSH
20145: LD_INT 1
20147: PUSH
20148: LD_INT 6
20150: PUSH
20151: LD_INT 5
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 398
// utok4_over = true ;
20163: LD_ADDR_LOC 30
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// end ;
20171: PPOPN 3
20173: END
// every 0 0$1 trigger FilterUnitsInArea ( zoufalost1 , [ [ f_side , Arabi ] ] ) = 0 do var i ;
20174: LD_INT 35
20176: PPUSH
20177: LD_INT 22
20179: PUSH
20180: LD_EXP 3
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: PPUSH
20192: CALL_OW 70
20196: PUSH
20197: LD_INT 0
20199: EQUAL
20200: IFFALSE 20293
20202: GO 20204
20204: DISABLE
20205: LD_INT 0
20207: PPUSH
// begin for i in Ar_backa_LIST do
20208: LD_ADDR_VAR 0 1
20212: PUSH
20213: LD_EXP 17
20217: PUSH
20218: FOR_IN
20219: IFFALSE 20238
// PlaceUnitArea ( i , backa1 , false ) ;
20221: LD_VAR 0 1
20225: PPUSH
20226: LD_INT 36
20228: PPUSH
20229: LD_INT 0
20231: PPUSH
20232: CALL_OW 49
20236: GO 20218
20238: POP
20239: POP
// McMove ( 1 , Ar_backa_LIST , [ [ 59 , 7 ] , [ 76 , 11 ] , [ 95 , 19 ] ] , [ mc_move_agressive ] ) ;
20240: LD_INT 1
20242: PPUSH
20243: LD_EXP 17
20247: PPUSH
20248: LD_INT 59
20250: PUSH
20251: LD_INT 7
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 76
20260: PUSH
20261: LD_INT 11
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 95
20270: PUSH
20271: LD_INT 19
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: PPUSH
20283: LD_INT 6
20285: PUSH
20286: EMPTY
20287: LIST
20288: PPUSH
20289: CALL_OW 398
// end ;
20293: PPOPN 1
20295: END
// every 1 1$0 trigger utok4_over do var pom , i , pom1 ;
20296: LD_LOC 30
20300: IFFALSE 20523
20302: GO 20304
20304: DISABLE
20305: LD_INT 0
20307: PPUSH
20308: PPUSH
20309: PPUSH
// begin wait ( last_attack_wait [ difficulty ] ) ;
20310: LD_EXP 54
20314: PUSH
20315: LD_OWVAR 67
20319: ARRAY
20320: PPUSH
20321: CALL_OW 67
// wait ( 2 2$0 ) ;
20325: LD_INT 4200
20327: PPUSH
20328: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20332: LD_ADDR_VAR 0 1
20336: PUSH
20337: LD_INT 22
20339: PUSH
20340: LD_EXP 1
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 34
20354: PUSH
20355: LD_INT 12
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 34
20364: PUSH
20365: LD_INT 32
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PPUSH
20381: CALL_OW 69
20385: ST_TO_ADDR
// for i in Ar_utoklast_LIST do
20386: LD_ADDR_VAR 0 2
20390: PUSH
20391: LD_EXP 16
20395: PUSH
20396: FOR_IN
20397: IFFALSE 20416
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20399: LD_VAR 0 2
20403: PPUSH
20404: LD_INT 25
20406: PPUSH
20407: LD_INT 0
20409: PPUSH
20410: CALL_OW 49
20414: GO 20396
20416: POP
20417: POP
// for i in pom do
20418: LD_ADDR_VAR 0 2
20422: PUSH
20423: LD_VAR 0 1
20427: PUSH
20428: FOR_IN
20429: IFFALSE 20476
// begin AddComAgressiveMove ( Ar_utoklast_LIST , GetX ( i ) , GetY ( i ) ) ;
20431: LD_EXP 16
20435: PPUSH
20436: LD_VAR 0 2
20440: PPUSH
20441: CALL_OW 250
20445: PPUSH
20446: LD_VAR 0 2
20450: PPUSH
20451: CALL_OW 251
20455: PPUSH
20456: CALL_OW 174
// AddComAttackUnit ( Ar_utoklast_LIST , i ) ;
20460: LD_EXP 16
20464: PPUSH
20465: LD_VAR 0 2
20469: PPUSH
20470: CALL_OW 175
// end ;
20474: GO 20428
20476: POP
20477: POP
// AddComAgressiveMove ( Ar_utoklast_LIST , 18 , 17 ) ;
20478: LD_EXP 16
20482: PPUSH
20483: LD_INT 18
20485: PPUSH
20486: LD_INT 17
20488: PPUSH
20489: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 72 , 10 ) ;
20493: LD_EXP 16
20497: PPUSH
20498: LD_INT 72
20500: PPUSH
20501: LD_INT 10
20503: PPUSH
20504: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 116 , 126 ) ;
20508: LD_EXP 16
20512: PPUSH
20513: LD_INT 116
20515: PPUSH
20516: LD_INT 126
20518: PPUSH
20519: CALL_OW 174
// end ;
20523: PPOPN 3
20525: END
// every 1 1$0 trigger A1_dobyta do var pom ;
20526: LD_EXP 27
20530: IFFALSE 20957
20532: GO 20534
20534: DISABLE
20535: LD_INT 0
20537: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
20538: LD_ADDR_VAR 0 1
20542: PUSH
20543: LD_INT 3
20545: PPUSH
20546: LD_INT 22
20548: PUSH
20549: LD_EXP 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: PPUSH
20561: CALL_OW 70
20565: ST_TO_ADDR
// wait ( protiutok1 [ difficulty ] ) ;
20566: LD_EXP 47
20570: PUSH
20571: LD_OWVAR 67
20575: ARRAY
20576: PPUSH
20577: CALL_OW 67
// ComMoveXY ( [ A2_kam1 , A2_kam2 , A2_kam3 ] , 66 , 110 ) ;
20581: LD_INT 86
20583: PUSH
20584: LD_INT 85
20586: PUSH
20587: LD_INT 84
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: PPUSH
20595: LD_INT 66
20597: PPUSH
20598: LD_INT 110
20600: PPUSH
20601: CALL_OW 111
// AddComAttackUnit ( A2_kam1 , NearestUnitToXY ( pom , 102 , 112 ) ) ;
20605: LD_INT 86
20607: PPUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: LD_INT 102
20615: PPUSH
20616: LD_INT 112
20618: PPUSH
20619: CALL_OW 73
20623: PPUSH
20624: CALL_OW 175
// AddComAttackUnit ( A2_kam1 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20628: LD_INT 86
20630: PPUSH
20631: LD_VAR 0 1
20635: PUSH
20636: LD_INT 1
20638: PPUSH
20639: LD_VAR 0 1
20643: PUSH
20644: LD_INT 0
20646: PLUS
20647: PPUSH
20648: CALL_OW 12
20652: ARRAY
20653: PPUSH
20654: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , NearestUnitToXY ( pom , 90 , 121 ) ) ;
20658: LD_INT 85
20660: PPUSH
20661: LD_VAR 0 1
20665: PPUSH
20666: LD_INT 90
20668: PPUSH
20669: LD_INT 121
20671: PPUSH
20672: CALL_OW 73
20676: PPUSH
20677: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20681: LD_INT 85
20683: PPUSH
20684: LD_VAR 0 1
20688: PUSH
20689: LD_INT 1
20691: PPUSH
20692: LD_VAR 0 1
20696: PUSH
20697: LD_INT 0
20699: PLUS
20700: PPUSH
20701: CALL_OW 12
20705: ARRAY
20706: PPUSH
20707: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , A1_dep ) ;
20711: LD_INT 84
20713: PPUSH
20714: LD_INT 4
20716: PPUSH
20717: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20721: LD_INT 84
20723: PPUSH
20724: LD_VAR 0 1
20728: PUSH
20729: LD_INT 1
20731: PPUSH
20732: LD_VAR 0 1
20736: PUSH
20737: LD_INT 0
20739: PLUS
20740: PPUSH
20741: CALL_OW 12
20745: ARRAY
20746: PPUSH
20747: CALL_OW 175
// McMove ( 1 , [ A2_op1 , A2_op2 , A2_op3 ] , [ [ 44 , 25 ] , [ 50 , 54 ] , [ 92 , 101 ] , [ 112 , 124 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20751: LD_INT 1
20753: PPUSH
20754: LD_INT 89
20756: PUSH
20757: LD_INT 90
20759: PUSH
20760: LD_INT 91
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: PPUSH
20768: LD_INT 44
20770: PUSH
20771: LD_INT 25
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 50
20780: PUSH
20781: LD_INT 54
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 92
20790: PUSH
20791: LD_INT 101
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 112
20800: PUSH
20801: LD_INT 124
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: PPUSH
20814: LD_INT 6
20816: PUSH
20817: LD_INT 5
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PPUSH
20824: CALL_OW 398
// ComMoveXY ( A2_mor3 , 91 , 128 ) ;
20828: LD_INT 92
20830: PPUSH
20831: LD_INT 91
20833: PPUSH
20834: LD_INT 128
20836: PPUSH
20837: CALL_OW 111
// for i in CREATE_AR_PROTIOFENZIVU_LIST do
20841: LD_ADDR_LOC 33
20845: PUSH
20846: LD_EXP 9
20850: PUSH
20851: FOR_IN
20852: IFFALSE 20871
// PlaceUnitArea ( i , protiEN , false ) ;
20854: LD_LOC 33
20858: PPUSH
20859: LD_INT 21
20861: PPUSH
20862: LD_INT 0
20864: PPUSH
20865: CALL_OW 49
20869: GO 20851
20871: POP
20872: POP
// McMove ( 1 , CREATE_AR_PROTIOFENZIVU_LIST , [ [ 49 , 31 ] , [ 55 , 76 ] , [ 100 , 109 ] , [ 122 , 132 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20873: LD_INT 1
20875: PPUSH
20876: LD_EXP 9
20880: PPUSH
20881: LD_INT 49
20883: PUSH
20884: LD_INT 31
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 55
20893: PUSH
20894: LD_INT 76
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 100
20903: PUSH
20904: LD_INT 109
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 122
20913: PUSH
20914: LD_INT 132
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: PPUSH
20927: LD_INT 6
20929: PUSH
20930: LD_INT 5
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PPUSH
20937: CALL_OW 398
// utok1 := true ;
20941: LD_ADDR_LOC 27
20945: PUSH
20946: LD_INT 1
20948: ST_TO_ADDR
// utok1_over = true ;
20949: LD_ADDR_LOC 28
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
// end ;
20957: PPOPN 1
20959: END
// every 0 0$17 trigger oposoldier = - 1 do
20960: LD_EXP 45
20964: PUSH
20965: LD_INT 1
20967: NEG
20968: EQUAL
20969: IFFALSE 21046
20971: GO 20973
20973: DISABLE
// begin if not See ( You , A3_solop ) then
20974: LD_EXP 1
20978: PPUSH
20979: LD_INT 102
20981: PPUSH
20982: CALL_OW 292
20986: NOT
20987: IFFALSE 21046
// begin SetClass ( A3_solop , class_mechanic ) ;
20989: LD_INT 102
20991: PPUSH
20992: LD_INT 3
20994: PPUSH
20995: CALL_OW 336
// RemoveUnit ( A3_solop ) ;
20999: LD_INT 102
21001: PPUSH
21002: CALL_OW 64
// pom := create_auto_pro_solopa ;
21006: LD_ADDR_LOC 34
21010: PUSH
21011: CALL 8464 0 0
21015: ST_TO_ADDR
// PlaceHumanInUnit ( A3_solop , pom ) ;
21016: LD_INT 102
21018: PPUSH
21019: LD_LOC 34
21023: PPUSH
21024: CALL_OW 52
// PlaceUnitXY ( pom , 111 , 16 , false ) ;
21028: LD_LOC 34
21032: PPUSH
21033: LD_INT 111
21035: PPUSH
21036: LD_INT 16
21038: PPUSH
21039: LD_INT 0
21041: PPUSH
21042: CALL_OW 48
// end ; end ;
21046: END
// every 1 1$0 trigger oposoldier = 1 marked 999 do
21047: LD_EXP 45
21051: PUSH
21052: LD_INT 1
21054: EQUAL
21055: IFFALSE 21089
21057: GO 21059
21059: DISABLE
// begin ComMoveXY ( A3_solop , 127 , 89 ) ;
21060: LD_INT 102
21062: PPUSH
21063: LD_INT 127
21065: PPUSH
21066: LD_INT 89
21068: PPUSH
21069: CALL_OW 111
// ComMoveXY ( OpoMike , 127 , 89 ) ;
21073: LD_INT 103
21075: PPUSH
21076: LD_INT 127
21078: PPUSH
21079: LD_INT 89
21081: PPUSH
21082: CALL_OW 111
// enable ( 997 ) ;
21086: LD_INT 997
21088: ENABLE_MARKED
// end ;
21089: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baziny ) marked 997 do
21090: LD_INT 102
21092: PPUSH
21093: LD_INT 12
21095: PPUSH
21096: CALL_OW 308
21100: IFFALSE 21115
21102: GO 21104
21104: DISABLE
// begin wait ( 0 0$5 ) ;
21105: LD_INT 175
21107: PPUSH
21108: CALL_OW 67
// enable ( 998 ) ;
21112: LD_INT 998
21114: ENABLE_MARKED
// end ;
21115: END
// every 0 0$5 trigger oposoldier = 1 marked 998 do
21116: LD_EXP 45
21120: PUSH
21121: LD_INT 1
21123: EQUAL
21124: IFFALSE 21342
21126: GO 21128
21128: DISABLE
// begin pom = FilterUnitsInArea ( Baziny , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
21129: LD_ADDR_LOC 34
21133: PUSH
21134: LD_INT 12
21136: PPUSH
21137: LD_INT 21
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 33
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 34
21162: PUSH
21163: LD_INT 12
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 34
21172: PUSH
21173: LD_INT 32
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 3
21187: PUSH
21188: LD_INT 59
21190: PUSH
21191: EMPTY
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 70
21208: ST_TO_ADDR
// if pom > 0 then
21209: LD_LOC 34
21213: PUSH
21214: LD_INT 0
21216: GREATER
21217: IFFALSE 21319
// begin ComEnterUnit ( A3_solop , pom [ 1 ] ) ;
21219: LD_INT 102
21221: PPUSH
21222: LD_LOC 34
21226: PUSH
21227: LD_INT 1
21229: ARRAY
21230: PPUSH
21231: CALL_OW 120
// AddComMoveXY ( A3_solop , 165 , 92 ) ;
21235: LD_INT 102
21237: PPUSH
21238: LD_INT 165
21240: PPUSH
21241: LD_INT 92
21243: PPUSH
21244: CALL_OW 171
// AddComMoveXY ( OpoMike , 165 , 92 ) ;
21248: LD_INT 103
21250: PPUSH
21251: LD_INT 165
21253: PPUSH
21254: LD_INT 92
21256: PPUSH
21257: CALL_OW 171
// oposoldier = 2 ;
21261: LD_ADDR_EXP 45
21265: PUSH
21266: LD_INT 2
21268: ST_TO_ADDR
// wait ( 0 0$15 ) ;
21269: LD_INT 525
21271: PPUSH
21272: CALL_OW 67
// if not IsInUnit ( A3_solop ) then
21276: LD_INT 102
21278: PPUSH
21279: CALL_OW 310
21283: NOT
21284: IFFALSE 21317
// begin ComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21286: LD_INT 102
21288: PUSH
21289: LD_INT 103
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PPUSH
21296: LD_INT 116
21298: PPUSH
21299: LD_INT 23
21301: PPUSH
21302: CALL_OW 111
// enable ( 996 ) ;
21306: LD_INT 996
21308: ENABLE_MARKED
// oposoldier = 1 ;
21309: LD_ADDR_EXP 45
21313: PUSH
21314: LD_INT 1
21316: ST_TO_ADDR
// end ; end else
21317: GO 21342
// begin AddComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21319: LD_INT 102
21321: PUSH
21322: LD_INT 103
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PPUSH
21329: LD_INT 116
21331: PPUSH
21332: LD_INT 23
21334: PPUSH
21335: CALL_OW 171
// enable ( 996 ) ;
21339: LD_INT 996
21341: ENABLE_MARKED
// end ; end ;
21342: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baze_zpet ) marked 996 do
21343: LD_INT 102
21345: PPUSH
21346: LD_INT 34
21348: PPUSH
21349: CALL_OW 308
21353: IFFALSE 21361
21355: GO 21357
21357: DISABLE
// begin enable ( 999 ) ;
21358: LD_INT 999
21360: ENABLE_MARKED
// end ;
21361: END
// every 0 0$3 trigger oposoldier = 2 do
21362: LD_EXP 45
21366: PUSH
21367: LD_INT 2
21369: EQUAL
21370: IFFALSE 21501
21372: GO 21374
21374: DISABLE
// begin pom = FilterUnitsInArea ( SolopEx , [ [ f_side , Arabi2 ] ] ) ;
21375: LD_ADDR_LOC 34
21379: PUSH
21380: LD_INT 13
21382: PPUSH
21383: LD_INT 22
21385: PUSH
21386: LD_EXP 4
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: PPUSH
21398: CALL_OW 70
21402: ST_TO_ADDR
// if pom > 0 then
21403: LD_LOC 34
21407: PUSH
21408: LD_INT 0
21410: GREATER
21411: IFFALSE 21500
// for i in pom do
21413: LD_ADDR_LOC 33
21417: PUSH
21418: LD_LOC 34
21422: PUSH
21423: FOR_IN
21424: IFFALSE 21498
// begin if GetType ( i ) = unit_vehicle then
21426: LD_LOC 33
21430: PPUSH
21431: CALL_OW 247
21435: PUSH
21436: LD_INT 2
21438: EQUAL
21439: IFFALSE 21487
// if IsDrivenBy ( i ) = A3_solop then
21441: LD_LOC 33
21445: PPUSH
21446: CALL_OW 311
21450: PUSH
21451: LD_INT 102
21453: EQUAL
21454: IFFALSE 21487
// begin oposoldier = 3 ;
21456: LD_ADDR_EXP 45
21460: PUSH
21461: LD_INT 3
21463: ST_TO_ADDR
// dialog_kamery ;
21464: CALL 5494 0 0
// RemoveUnit ( IsInUnit ( A3_solop ) ) ;
21468: LD_INT 102
21470: PPUSH
21471: CALL_OW 310
21475: PPUSH
21476: CALL_OW 64
// RemoveUnit ( OpoMike ) ;
21480: LD_INT 103
21482: PPUSH
21483: CALL_OW 64
// end ; RemoveUnit ( i ) ;
21487: LD_LOC 33
21491: PPUSH
21492: CALL_OW 64
// end ;
21496: GO 21423
21498: POP
21499: POP
// enable ;
21500: ENABLE
// end ;
21501: END
// every 0 0$1 do
21502: GO 21504
21504: DISABLE
// begin pom = FilterUnitsInArea ( Calibre1 , [ [ f_side , You ] ] ) ;
21505: LD_ADDR_LOC 34
21509: PUSH
21510: LD_INT 14
21512: PPUSH
21513: LD_INT 22
21515: PUSH
21516: LD_EXP 1
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: PPUSH
21528: CALL_OW 70
21532: ST_TO_ADDR
// if pom > 0 then
21533: LD_LOC 34
21537: PUSH
21538: LD_INT 0
21540: GREATER
21541: IFFALSE 21733
// begin while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21543: LD_INT 15
21545: PPUSH
21546: LD_INT 22
21548: PUSH
21549: LD_EXP 1
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: EMPTY
21559: LIST
21560: PPUSH
21561: CALL_OW 70
21565: PUSH
21566: LD_INT 0
21568: EQUAL
21569: IFFALSE 21580
// wait ( 0 0$0.5 ) ;
21571: LD_INT 18
21573: PPUSH
21574: CALL_OW 67
21578: GO 21543
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21580: LD_INT 82
21582: PUSH
21583: LD_INT 83
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PPUSH
21590: CALL_OW 134
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 33 , 55 ) ;
21594: LD_INT 82
21596: PUSH
21597: LD_INT 83
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PPUSH
21604: LD_INT 33
21606: PPUSH
21607: LD_INT 55
21609: PPUSH
21610: CALL_OW 171
// AddComWalk ( [ A2_zas1 , A2_zas2 ] ) ;
21614: LD_INT 82
21616: PUSH
21617: LD_INT 83
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 198
// AddComPlaceRemoteCharge ( A2_zas1 , 39 , 15 , 0 ) ;
21628: LD_INT 82
21630: PPUSH
21631: LD_INT 39
21633: PPUSH
21634: LD_INT 15
21636: PPUSH
21637: LD_INT 0
21639: PPUSH
21640: CALL_OW 193
// AddComPlaceRemoteCharge ( A2_zas2 , 37 , 14 , 0 ) ;
21644: LD_INT 83
21646: PPUSH
21647: LD_INT 37
21649: PPUSH
21650: LD_INT 14
21652: PPUSH
21653: LD_INT 0
21655: PPUSH
21656: CALL_OW 193
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 25 , 13 ) ;
21660: LD_INT 82
21662: PUSH
21663: LD_INT 83
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PPUSH
21670: LD_INT 25
21672: PPUSH
21673: LD_INT 13
21675: PPUSH
21676: CALL_OW 171
// while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21680: LD_INT 15
21682: PPUSH
21683: LD_INT 22
21685: PUSH
21686: LD_EXP 1
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: PPUSH
21698: CALL_OW 70
21702: PUSH
21703: LD_INT 0
21705: EQUAL
21706: IFFALSE 21717
// wait ( 0 0$0.5 ) ;
21708: LD_INT 18
21710: PPUSH
21711: CALL_OW 67
21715: GO 21680
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21717: LD_INT 82
21719: PUSH
21720: LD_INT 83
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PPUSH
21727: CALL_OW 134
// end else
21731: GO 21734
// enable ;
21733: ENABLE
// end ;
21734: END
// every 0 0$1 do
21735: GO 21737
21737: DISABLE
// begin pom = FilterUnitsInArea ( Calibre2 , [ [ f_side , You ] ] ) ;
21738: LD_ADDR_LOC 34
21742: PUSH
21743: LD_INT 18
21745: PPUSH
21746: LD_INT 22
21748: PUSH
21749: LD_EXP 1
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: PPUSH
21761: CALL_OW 70
21765: ST_TO_ADDR
// if pom > 0 then
21766: LD_LOC 34
21770: PUSH
21771: LD_INT 0
21773: GREATER
21774: IFFALSE 21939
// begin while FilterUnitsInArea ( Boom3 , [ [ f_side , You ] ] ) = 0 do
21776: LD_INT 19
21778: PPUSH
21779: LD_INT 22
21781: PUSH
21782: LD_EXP 1
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: PPUSH
21794: CALL_OW 70
21798: PUSH
21799: LD_INT 0
21801: EQUAL
21802: IFFALSE 21813
// wait ( 0 0$0.5 ) ;
21804: LD_INT 18
21806: PPUSH
21807: CALL_OW 67
21811: GO 21776
// ComFireExplosives ( A3_zas1 ) ;
21813: LD_INT 101
21815: PPUSH
21816: CALL_OW 134
// bum2 := true ;
21820: LD_ADDR_EXP 46
21824: PUSH
21825: LD_INT 1
21827: ST_TO_ADDR
// AddComWalk ( A3_zas1 ) ;
21828: LD_INT 101
21830: PPUSH
21831: CALL_OW 198
// pom = FilterUnitsInArea ( Abase3 , [ [ f_side , You ] ] ) ;
21835: LD_ADDR_LOC 34
21839: PUSH
21840: LD_INT 17
21842: PPUSH
21843: LD_INT 22
21845: PUSH
21846: LD_EXP 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: EMPTY
21856: LIST
21857: PPUSH
21858: CALL_OW 70
21862: ST_TO_ADDR
// if pom > 0 then
21863: LD_LOC 34
21867: PUSH
21868: LD_INT 0
21870: GREATER
21871: IFFALSE 21907
// begin AddComPlaceDelayedCharge ( A3_zas1 , 0 , 0 , pom [ 1 ] ) ;
21873: LD_INT 101
21875: PPUSH
21876: LD_INT 0
21878: PPUSH
21879: LD_INT 0
21881: PPUSH
21882: LD_LOC 34
21886: PUSH
21887: LD_INT 1
21889: ARRAY
21890: PPUSH
21891: CALL_OW 192
// AddComEnterUnit ( A3_zas1 , A3_bar ) ;
21895: LD_INT 101
21897: PPUSH
21898: LD_INT 40
21900: PPUSH
21901: CALL_OW 180
// end else
21905: GO 21937
// begin AddComPlaceRemoteCharge ( A3_zas1 , 102 , 19 , 0 ) ;
21907: LD_INT 101
21909: PPUSH
21910: LD_INT 102
21912: PPUSH
21913: LD_INT 19
21915: PPUSH
21916: LD_INT 0
21918: PPUSH
21919: CALL_OW 193
// AddComMoveXY ( A3_zas1 , 99 , 3 ) ;
21923: LD_INT 101
21925: PPUSH
21926: LD_INT 99
21928: PPUSH
21929: LD_INT 3
21931: PPUSH
21932: CALL_OW 171
// enable ;
21936: ENABLE
// end ; end else
21937: GO 21940
// enable ;
21939: ENABLE
// end ;
21940: END
// every 0 0$2 do
21941: GO 21943
21943: DISABLE
// begin pom = [ ] ;
21944: LD_ADDR_LOC 34
21948: PUSH
21949: EMPTY
21950: ST_TO_ADDR
// pom1 = [ ] ;
21951: LD_ADDR_LOC 35
21955: PUSH
21956: EMPTY
21957: ST_TO_ADDR
// for i in Veze_2 do
21958: LD_ADDR_LOC 33
21962: PUSH
21963: LD_LOC 31
21967: PUSH
21968: FOR_IN
21969: IFFALSE 22004
// if GetLives ( i ) <> 1000 then
21971: LD_LOC 33
21975: PPUSH
21976: CALL_OW 256
21980: PUSH
21981: LD_INT 1000
21983: NONEQUAL
21984: IFFALSE 22002
// pom = pom ^ i ;
21986: LD_ADDR_LOC 34
21990: PUSH
21991: LD_LOC 34
21995: PUSH
21996: LD_LOC 33
22000: ADD
22001: ST_TO_ADDR
22002: GO 21968
22004: POP
22005: POP
// for i in Opr_2 do
22006: LD_ADDR_LOC 33
22010: PUSH
22011: LD_LOC 32
22015: PUSH
22016: FOR_IN
22017: IFFALSE 22048
// if IsOK ( i ) then
22019: LD_LOC 33
22023: PPUSH
22024: CALL_OW 302
22028: IFFALSE 22046
// pom1 = pom1 ^ i ;
22030: LD_ADDR_LOC 35
22034: PUSH
22035: LD_LOC 35
22039: PUSH
22040: LD_LOC 33
22044: ADD
22045: ST_TO_ADDR
22046: GO 22016
22048: POP
22049: POP
// if pom1 > 0 and pom > 0 then
22050: LD_LOC 35
22054: PUSH
22055: LD_INT 0
22057: GREATER
22058: PUSH
22059: LD_LOC 34
22063: PUSH
22064: LD_INT 0
22066: GREATER
22067: AND
22068: IFFALSE 22226
// begin if pom + 0 <= pom1 + 0 then
22070: LD_LOC 34
22074: PUSH
22075: LD_INT 0
22077: PLUS
22078: PUSH
22079: LD_LOC 35
22083: PUSH
22084: LD_INT 0
22086: PLUS
22087: LESSEQUAL
22088: IFFALSE 22159
// for i := 1 to pom + 0 do
22090: LD_ADDR_LOC 33
22094: PUSH
22095: DOUBLE
22096: LD_INT 1
22098: DEC
22099: ST_TO_ADDR
22100: LD_LOC 34
22104: PUSH
22105: LD_INT 0
22107: PLUS
22108: PUSH
22109: FOR_TO
22110: IFFALSE 22155
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22112: LD_LOC 35
22116: PUSH
22117: LD_LOC 33
22121: ARRAY
22122: PPUSH
22123: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22127: LD_LOC 35
22131: PUSH
22132: LD_LOC 33
22136: ARRAY
22137: PPUSH
22138: LD_LOC 34
22142: PUSH
22143: LD_LOC 33
22147: ARRAY
22148: PPUSH
22149: CALL_OW 190
// end else
22153: GO 22109
22155: POP
22156: POP
22157: GO 22226
// for i := 1 to pom1 + 0 do
22159: LD_ADDR_LOC 33
22163: PUSH
22164: DOUBLE
22165: LD_INT 1
22167: DEC
22168: ST_TO_ADDR
22169: LD_LOC 35
22173: PUSH
22174: LD_INT 0
22176: PLUS
22177: PUSH
22178: FOR_TO
22179: IFFALSE 22224
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22181: LD_LOC 35
22185: PUSH
22186: LD_LOC 33
22190: ARRAY
22191: PPUSH
22192: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22196: LD_LOC 35
22200: PUSH
22201: LD_LOC 33
22205: ARRAY
22206: PPUSH
22207: LD_LOC 34
22211: PUSH
22212: LD_LOC 33
22216: ARRAY
22217: PPUSH
22218: CALL_OW 190
// end ;
22222: GO 22178
22224: POP
22225: POP
// end ; enable ;
22226: ENABLE
// end ;
22227: END
// every 0 0$1 trigger FilterUnitsInArea ( Create2 , [ [ f_side , You ] ] ) > 0 do
22228: LD_INT 22
22230: PPUSH
22231: LD_INT 22
22233: PUSH
22234: LD_EXP 1
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: PPUSH
22246: CALL_OW 70
22250: PUSH
22251: LD_INT 0
22253: GREATER
22254: IFFALSE 22851
22256: GO 22258
22258: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 1 ] , 28 , 39 , false ) ;
22259: LD_EXP 10
22263: PUSH
22264: LD_INT 1
22266: ARRAY
22267: PPUSH
22268: LD_INT 28
22270: PPUSH
22271: LD_INT 39
22273: PPUSH
22274: LD_INT 0
22276: PPUSH
22277: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 2 ] , 23 , 38 , false ) ;
22281: LD_EXP 10
22285: PUSH
22286: LD_INT 2
22288: ARRAY
22289: PPUSH
22290: LD_INT 23
22292: PPUSH
22293: LD_INT 38
22295: PPUSH
22296: LD_INT 0
22298: PPUSH
22299: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 3 ] , 32 , 20 , false ) ;
22303: LD_EXP 10
22307: PUSH
22308: LD_INT 3
22310: ARRAY
22311: PPUSH
22312: LD_INT 32
22314: PPUSH
22315: LD_INT 20
22317: PPUSH
22318: LD_INT 0
22320: PPUSH
22321: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 4 ] , 32 , 17 , false ) ;
22325: LD_EXP 10
22329: PUSH
22330: LD_INT 4
22332: ARRAY
22333: PPUSH
22334: LD_INT 32
22336: PPUSH
22337: LD_INT 17
22339: PPUSH
22340: LD_INT 0
22342: PPUSH
22343: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 5 ] , 38 , 8 , false ) ;
22347: LD_EXP 10
22351: PUSH
22352: LD_INT 5
22354: ARRAY
22355: PPUSH
22356: LD_INT 38
22358: PPUSH
22359: LD_INT 8
22361: PPUSH
22362: LD_INT 0
22364: PPUSH
22365: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 6 ] , 40 , 7 , false ) ;
22369: LD_EXP 10
22373: PUSH
22374: LD_INT 6
22376: ARRAY
22377: PPUSH
22378: LD_INT 40
22380: PPUSH
22381: LD_INT 7
22383: PPUSH
22384: LD_INT 0
22386: PPUSH
22387: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 7 ] , 24 , 8 , false ) ;
22391: LD_EXP 10
22395: PUSH
22396: LD_INT 7
22398: ARRAY
22399: PPUSH
22400: LD_INT 24
22402: PPUSH
22403: LD_INT 8
22405: PPUSH
22406: LD_INT 0
22408: PPUSH
22409: CALL_OW 48
// if difficulty > 1 then
22413: LD_OWVAR 67
22417: PUSH
22418: LD_INT 1
22420: GREATER
22421: IFFALSE 22447
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 8 ] , 26 , 10 , false ) else
22423: LD_EXP 10
22427: PUSH
22428: LD_INT 8
22430: ARRAY
22431: PPUSH
22432: LD_INT 26
22434: PPUSH
22435: LD_INT 10
22437: PPUSH
22438: LD_INT 0
22440: PPUSH
22441: CALL_OW 48
22445: GO 22460
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] ) ;
22447: LD_EXP 10
22451: PUSH
22452: LD_INT 8
22454: ARRAY
22455: PPUSH
22456: CALL_OW 65
// if difficulty > 2 then
22460: LD_OWVAR 67
22464: PUSH
22465: LD_INT 2
22467: GREATER
22468: IFFALSE 22494
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 9 ] , 25 , 11 , false ) else
22470: LD_EXP 10
22474: PUSH
22475: LD_INT 9
22477: ARRAY
22478: PPUSH
22479: LD_INT 25
22481: PPUSH
22482: LD_INT 11
22484: PPUSH
22485: LD_INT 0
22487: PPUSH
22488: CALL_OW 48
22492: GO 22507
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] ) ;
22494: LD_EXP 10
22498: PUSH
22499: LD_INT 9
22501: ARRAY
22502: PPUSH
22503: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 10 ] , 24 , 10 , false ) ;
22507: LD_EXP 10
22511: PUSH
22512: LD_INT 10
22514: ARRAY
22515: PPUSH
22516: LD_INT 24
22518: PPUSH
22519: LD_INT 10
22521: PPUSH
22522: LD_INT 0
22524: PPUSH
22525: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 11 ] , 31 , 9 , false ) ;
22529: LD_EXP 10
22533: PUSH
22534: LD_INT 11
22536: ARRAY
22537: PPUSH
22538: LD_INT 31
22540: PPUSH
22541: LD_INT 9
22543: PPUSH
22544: LD_INT 0
22546: PPUSH
22547: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 12 ] , 33 , 9 , false ) ;
22551: LD_EXP 10
22555: PUSH
22556: LD_INT 12
22558: ARRAY
22559: PPUSH
22560: LD_INT 33
22562: PPUSH
22563: LD_INT 9
22565: PPUSH
22566: LD_INT 0
22568: PPUSH
22569: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 13 ] , 38 , 40 , false ) ;
22573: LD_EXP 10
22577: PUSH
22578: LD_INT 13
22580: ARRAY
22581: PPUSH
22582: LD_INT 38
22584: PPUSH
22585: LD_INT 40
22587: PPUSH
22588: LD_INT 0
22590: PPUSH
22591: CALL_OW 48
// if difficulty > 1 then
22595: LD_OWVAR 67
22599: PUSH
22600: LD_INT 1
22602: GREATER
22603: IFFALSE 22629
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 14 ] , 36 , 39 , false ) else
22605: LD_EXP 10
22609: PUSH
22610: LD_INT 14
22612: ARRAY
22613: PPUSH
22614: LD_INT 36
22616: PPUSH
22617: LD_INT 39
22619: PPUSH
22620: LD_INT 0
22622: PPUSH
22623: CALL_OW 48
22627: GO 22642
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 14 ] ) ;
22629: LD_EXP 10
22633: PUSH
22634: LD_INT 14
22636: ARRAY
22637: PPUSH
22638: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 15 ] , 21 , 12 , false ) ;
22642: LD_EXP 10
22646: PUSH
22647: LD_INT 15
22649: ARRAY
22650: PPUSH
22651: LD_INT 21
22653: PPUSH
22654: LD_INT 12
22656: PPUSH
22657: LD_INT 0
22659: PPUSH
22660: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 16 ] , 21 , 13 , false ) ;
22664: LD_EXP 10
22668: PUSH
22669: LD_INT 16
22671: ARRAY
22672: PPUSH
22673: LD_INT 21
22675: PPUSH
22676: LD_INT 13
22678: PPUSH
22679: LD_INT 0
22681: PPUSH
22682: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 17 ] , 23 , 19 , false ) ;
22686: LD_EXP 10
22690: PUSH
22691: LD_INT 17
22693: ARRAY
22694: PPUSH
22695: LD_INT 23
22697: PPUSH
22698: LD_INT 19
22700: PPUSH
22701: LD_INT 0
22703: PPUSH
22704: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 18 ] , 23 , 20 , false ) ;
22708: LD_EXP 10
22712: PUSH
22713: LD_INT 18
22715: ARRAY
22716: PPUSH
22717: LD_INT 23
22719: PPUSH
22720: LD_INT 20
22722: PPUSH
22723: LD_INT 0
22725: PPUSH
22726: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 19 ] , 21 , 19 , false ) ;
22730: LD_EXP 10
22734: PUSH
22735: LD_INT 19
22737: ARRAY
22738: PPUSH
22739: LD_INT 21
22741: PPUSH
22742: LD_INT 19
22744: PPUSH
22745: LD_INT 0
22747: PPUSH
22748: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 20 ] , 24 , 20 , false ) ;
22752: LD_EXP 10
22756: PUSH
22757: LD_INT 20
22759: ARRAY
22760: PPUSH
22761: LD_INT 24
22763: PPUSH
22764: LD_INT 20
22766: PPUSH
22767: LD_INT 0
22769: PPUSH
22770: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 22 ] , 21 , 34 , false ) ;
22774: LD_EXP 10
22778: PUSH
22779: LD_INT 22
22781: ARRAY
22782: PPUSH
22783: LD_INT 21
22785: PPUSH
22786: LD_INT 34
22788: PPUSH
22789: LD_INT 0
22791: PPUSH
22792: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 21 ] , 27 , 17 , false ) ;
22796: LD_EXP 10
22800: PUSH
22801: LD_INT 21
22803: ARRAY
22804: PPUSH
22805: LD_INT 27
22807: PPUSH
22808: LD_INT 17
22810: PPUSH
22811: LD_INT 0
22813: PPUSH
22814: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 23 ] , 28 , 21 , false ) ;
22818: LD_EXP 10
22822: PUSH
22823: LD_INT 23
22825: ARRAY
22826: PPUSH
22827: LD_INT 28
22829: PPUSH
22830: LD_INT 21
22832: PPUSH
22833: LD_INT 0
22835: PPUSH
22836: CALL_OW 48
// wait ( 0 0$1 ) ;
22840: LD_INT 35
22842: PPUSH
22843: CALL_OW 67
// uklid_arabu2 ;
22847: CALL 17806 0 0
// end ;
22851: END
// every 0 0$1 trigger FilterUnitsInArea ( Create3 , [ [ f_side , You ] ] ) > 0 do
22852: LD_INT 23
22854: PPUSH
22855: LD_INT 22
22857: PUSH
22858: LD_EXP 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: PPUSH
22870: CALL_OW 70
22874: PUSH
22875: LD_INT 0
22877: GREATER
22878: IFFALSE 23268
22880: GO 22882
22882: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 1 ] , 103 , 11 , false ) ;
22883: LD_EXP 11
22887: PUSH
22888: LD_INT 1
22890: ARRAY
22891: PPUSH
22892: LD_INT 103
22894: PPUSH
22895: LD_INT 11
22897: PPUSH
22898: LD_INT 0
22900: PPUSH
22901: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 2 ] , 108 , 18 , false ) ;
22905: LD_EXP 11
22909: PUSH
22910: LD_INT 2
22912: ARRAY
22913: PPUSH
22914: LD_INT 108
22916: PPUSH
22917: LD_INT 18
22919: PPUSH
22920: LD_INT 0
22922: PPUSH
22923: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 3 ] , 107 , 21 , false ) ;
22927: LD_EXP 11
22931: PUSH
22932: LD_INT 3
22934: ARRAY
22935: PPUSH
22936: LD_INT 107
22938: PPUSH
22939: LD_INT 21
22941: PPUSH
22942: LD_INT 0
22944: PPUSH
22945: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 4 ] , 118 , 11 , false ) ;
22949: LD_EXP 11
22953: PUSH
22954: LD_INT 4
22956: ARRAY
22957: PPUSH
22958: LD_INT 118
22960: PPUSH
22961: LD_INT 11
22963: PPUSH
22964: LD_INT 0
22966: PPUSH
22967: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 5 ] , 118 , 12 , false ) ;
22971: LD_EXP 11
22975: PUSH
22976: LD_INT 5
22978: ARRAY
22979: PPUSH
22980: LD_INT 118
22982: PPUSH
22983: LD_INT 12
22985: PPUSH
22986: LD_INT 0
22988: PPUSH
22989: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 6 ] , 119 , 13 , false ) ;
22993: LD_EXP 11
22997: PUSH
22998: LD_INT 6
23000: ARRAY
23001: PPUSH
23002: LD_INT 119
23004: PPUSH
23005: LD_INT 13
23007: PPUSH
23008: LD_INT 0
23010: PPUSH
23011: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 7 ] , 115 , 9 , false ) ;
23015: LD_EXP 11
23019: PUSH
23020: LD_INT 7
23022: ARRAY
23023: PPUSH
23024: LD_INT 115
23026: PPUSH
23027: LD_INT 9
23029: PPUSH
23030: LD_INT 0
23032: PPUSH
23033: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 8 ] , 119 , 18 , false ) ;
23037: LD_EXP 11
23041: PUSH
23042: LD_INT 8
23044: ARRAY
23045: PPUSH
23046: LD_INT 119
23048: PPUSH
23049: LD_INT 18
23051: PPUSH
23052: LD_INT 0
23054: PPUSH
23055: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 9 ] , 118 , 18 , false ) ;
23059: LD_EXP 11
23063: PUSH
23064: LD_INT 9
23066: ARRAY
23067: PPUSH
23068: LD_INT 118
23070: PPUSH
23071: LD_INT 18
23073: PPUSH
23074: LD_INT 0
23076: PPUSH
23077: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 10 ] , 118 , 17 , false ) ;
23081: LD_EXP 11
23085: PUSH
23086: LD_INT 10
23088: ARRAY
23089: PPUSH
23090: LD_INT 118
23092: PPUSH
23093: LD_INT 17
23095: PPUSH
23096: LD_INT 0
23098: PPUSH
23099: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 11 ] , 118 , 16 , false ) ;
23103: LD_EXP 11
23107: PUSH
23108: LD_INT 11
23110: ARRAY
23111: PPUSH
23112: LD_INT 118
23114: PPUSH
23115: LD_INT 16
23117: PPUSH
23118: LD_INT 0
23120: PPUSH
23121: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 12 ] , 111 , 13 , false ) ;
23125: LD_EXP 11
23129: PUSH
23130: LD_INT 12
23132: ARRAY
23133: PPUSH
23134: LD_INT 111
23136: PPUSH
23137: LD_INT 13
23139: PPUSH
23140: LD_INT 0
23142: PPUSH
23143: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 13 ] , 112 , 12 , false ) ;
23147: LD_EXP 11
23151: PUSH
23152: LD_INT 13
23154: ARRAY
23155: PPUSH
23156: LD_INT 112
23158: PPUSH
23159: LD_INT 12
23161: PPUSH
23162: LD_INT 0
23164: PPUSH
23165: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 14 ] , 113 , 25 , false ) ;
23169: LD_EXP 11
23173: PUSH
23174: LD_INT 14
23176: ARRAY
23177: PPUSH
23178: LD_INT 113
23180: PPUSH
23181: LD_INT 25
23183: PPUSH
23184: LD_INT 0
23186: PPUSH
23187: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 15 ] , 113 , 27 , false ) ;
23191: LD_EXP 11
23195: PUSH
23196: LD_INT 15
23198: ARRAY
23199: PPUSH
23200: LD_INT 113
23202: PPUSH
23203: LD_INT 27
23205: PPUSH
23206: LD_INT 0
23208: PPUSH
23209: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 16 ] , 114 , 9 , false ) ;
23213: LD_EXP 11
23217: PUSH
23218: LD_INT 16
23220: ARRAY
23221: PPUSH
23222: LD_INT 114
23224: PPUSH
23225: LD_INT 9
23227: PPUSH
23228: LD_INT 0
23230: PPUSH
23231: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 17 ] , 114 , 10 , false ) ;
23235: LD_EXP 11
23239: PUSH
23240: LD_INT 17
23242: ARRAY
23243: PPUSH
23244: LD_INT 114
23246: PPUSH
23247: LD_INT 10
23249: PPUSH
23250: LD_INT 0
23252: PPUSH
23253: CALL_OW 48
// wait ( 0 0$1 ) ;
23257: LD_INT 35
23259: PPUSH
23260: CALL_OW 67
// uklid_arabu3 ;
23264: CALL 18986 0 0
// end ;
23268: END
// export function uprav_zivoty_arabskych_budov ; begin
23269: LD_INT 0
23271: PPUSH
// SetLives ( A1_bu3 , zivoty_prvni_baze [ difficulty ] ) ;
23272: LD_INT 11
23274: PPUSH
23275: LD_EXP 52
23279: PUSH
23280: LD_OWVAR 67
23284: ARRAY
23285: PPUSH
23286: CALL_OW 234
// SetLives ( A1_bu1 , zivoty_prvni_baze [ difficulty ] ) ;
23290: LD_INT 9
23292: PPUSH
23293: LD_EXP 52
23297: PUSH
23298: LD_OWVAR 67
23302: ARRAY
23303: PPUSH
23304: CALL_OW 234
// SetLives ( A1_au2 , zivoty_prvni_baze [ difficulty ] ) ;
23308: LD_INT 109
23310: PPUSH
23311: LD_EXP 52
23315: PUSH
23316: LD_OWVAR 67
23320: ARRAY
23321: PPUSH
23322: CALL_OW 234
// SetLives ( A1_vo1 , zivoty_prvni_baze [ difficulty ] ) ;
23326: LD_INT 72
23328: PPUSH
23329: LD_EXP 52
23333: PUSH
23334: LD_OWVAR 67
23338: ARRAY
23339: PPUSH
23340: CALL_OW 234
// end ;
23344: LD_VAR 0 1
23348: RET
// every 0 0$1 trigger FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) do var pom ;
23349: LD_INT 26
23351: PPUSH
23352: LD_INT 22
23354: PUSH
23355: LD_EXP 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: EMPTY
23365: LIST
23366: PPUSH
23367: CALL_OW 70
23371: IFFALSE 23440
23373: GO 23375
23375: DISABLE
23376: LD_INT 0
23378: PPUSH
// begin pom = FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) ;
23379: LD_ADDR_VAR 0 1
23383: PUSH
23384: LD_INT 26
23386: PPUSH
23387: LD_INT 22
23389: PUSH
23390: LD_EXP 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: EMPTY
23400: LIST
23401: PPUSH
23402: CALL_OW 70
23406: ST_TO_ADDR
// if pom > 0 then
23407: LD_VAR 0 1
23411: PUSH
23412: LD_INT 0
23414: GREATER
23415: IFFALSE 23440
// AddComAttackUnit ( [ bumm1 , bumm2 ] , pom [ 1 ] ) ;
23417: LD_INT 114
23419: PUSH
23420: LD_INT 115
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PPUSH
23427: LD_VAR 0 1
23431: PUSH
23432: LD_INT 1
23434: ARRAY
23435: PPUSH
23436: CALL_OW 175
// end ;
23440: PPOPN 1
23442: END
// every 0 0$1 trigger GetLives ( A2_bu1 ) < 700 do var pom , i ; var atakers ;
23443: LD_INT 112
23445: PPUSH
23446: CALL_OW 256
23450: PUSH
23451: LD_INT 700
23453: LESS
23454: IFFALSE 23702
23456: GO 23458
23458: DISABLE
23459: LD_INT 0
23461: PPUSH
23462: PPUSH
23463: PPUSH
// begin if not ( IsOK ( sui1 ) or IsOK ( sui3 ) ) then
23464: LD_INT 118
23466: PPUSH
23467: CALL_OW 302
23471: PUSH
23472: LD_INT 121
23474: PPUSH
23475: CALL_OW 302
23479: OR
23480: NOT
23481: IFFALSE 23485
// exit ;
23483: GO 23702
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23485: LD_ADDR_VAR 0 1
23489: PUSH
23490: LD_INT 22
23492: PUSH
23493: LD_EXP 1
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 2
23504: PUSH
23505: LD_INT 21
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 21
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PPUSH
23534: CALL_OW 69
23538: ST_TO_ADDR
// for i in pom do
23539: LD_ADDR_VAR 0 2
23543: PUSH
23544: LD_VAR 0 1
23548: PUSH
23549: FOR_IN
23550: IFFALSE 23585
// if Attacks ( i ) = A2_bu1 then
23552: LD_VAR 0 2
23556: PPUSH
23557: CALL_OW 320
23561: PUSH
23562: LD_INT 112
23564: EQUAL
23565: IFFALSE 23583
// atakers = atakers ^ i ;
23567: LD_ADDR_VAR 0 3
23571: PUSH
23572: LD_VAR 0 3
23576: PUSH
23577: LD_VAR 0 2
23581: ADD
23582: ST_TO_ADDR
23583: GO 23549
23585: POP
23586: POP
// if atakers > 0 then
23587: LD_VAR 0 3
23591: PUSH
23592: LD_INT 0
23594: GREATER
23595: IFFALSE 23622
// AddComAttackUnit ( [ sui1 , sui3 ] , atakers [ 1 ] ) else
23597: LD_INT 118
23599: PUSH
23600: LD_INT 121
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PPUSH
23607: LD_VAR 0 3
23611: PUSH
23612: LD_INT 1
23614: ARRAY
23615: PPUSH
23616: CALL_OW 175
23620: GO 23683
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23622: LD_ADDR_VAR 0 1
23626: PUSH
23627: LD_INT 37
23629: PPUSH
23630: LD_INT 22
23632: PUSH
23633: LD_EXP 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: PPUSH
23645: CALL_OW 70
23649: ST_TO_ADDR
// if pom > 0 then
23650: LD_VAR 0 1
23654: PUSH
23655: LD_INT 0
23657: GREATER
23658: IFFALSE 23683
// AddComAttackUnit ( [ sui1 , sui3 ] , pom [ 1 ] ) ;
23660: LD_INT 118
23662: PUSH
23663: LD_INT 121
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PPUSH
23670: LD_VAR 0 1
23674: PUSH
23675: LD_INT 1
23677: ARRAY
23678: PPUSH
23679: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23683: LD_INT 118
23685: PPUSH
23686: CALL_OW 302
23690: PUSH
23691: LD_INT 121
23693: PPUSH
23694: CALL_OW 302
23698: OR
23699: IFFALSE 23702
// enable ;
23701: ENABLE
// end ;
23702: PPOPN 3
23704: END
// every 0 0$2 trigger GetLives ( A2_bu3 ) < 700 do var pom , i ; var atakers ;
23705: LD_INT 47
23707: PPUSH
23708: CALL_OW 256
23712: PUSH
23713: LD_INT 700
23715: LESS
23716: IFFALSE 23964
23718: GO 23720
23720: DISABLE
23721: LD_INT 0
23723: PPUSH
23724: PPUSH
23725: PPUSH
// begin if not ( IsOK ( sui2 ) or IsOK ( sui4 ) ) then
23726: LD_INT 119
23728: PPUSH
23729: CALL_OW 302
23733: PUSH
23734: LD_INT 120
23736: PPUSH
23737: CALL_OW 302
23741: OR
23742: NOT
23743: IFFALSE 23747
// exit ;
23745: GO 23964
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23747: LD_ADDR_VAR 0 1
23751: PUSH
23752: LD_INT 22
23754: PUSH
23755: LD_EXP 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 2
23766: PUSH
23767: LD_INT 21
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 21
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PPUSH
23796: CALL_OW 69
23800: ST_TO_ADDR
// for i in pom do
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_VAR 0 1
23810: PUSH
23811: FOR_IN
23812: IFFALSE 23847
// if Attacks ( i ) = A2_bu3 then
23814: LD_VAR 0 2
23818: PPUSH
23819: CALL_OW 320
23823: PUSH
23824: LD_INT 47
23826: EQUAL
23827: IFFALSE 23845
// atakers = atakers ^ i ;
23829: LD_ADDR_VAR 0 3
23833: PUSH
23834: LD_VAR 0 3
23838: PUSH
23839: LD_VAR 0 2
23843: ADD
23844: ST_TO_ADDR
23845: GO 23811
23847: POP
23848: POP
// if atakers > 0 then
23849: LD_VAR 0 3
23853: PUSH
23854: LD_INT 0
23856: GREATER
23857: IFFALSE 23884
// AddComAttackUnit ( [ sui2 , sui4 ] , atakers [ 1 ] ) else
23859: LD_INT 119
23861: PUSH
23862: LD_INT 120
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PPUSH
23869: LD_VAR 0 3
23873: PUSH
23874: LD_INT 1
23876: ARRAY
23877: PPUSH
23878: CALL_OW 175
23882: GO 23945
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_INT 37
23891: PPUSH
23892: LD_INT 22
23894: PUSH
23895: LD_EXP 1
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: EMPTY
23905: LIST
23906: PPUSH
23907: CALL_OW 70
23911: ST_TO_ADDR
// if pom > 1 then
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 1
23919: GREATER
23920: IFFALSE 23945
// AddComAttackUnit ( [ sui2 , sui4 ] , pom1 [ 2 ] ) ;
23922: LD_INT 119
23924: PUSH
23925: LD_INT 120
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: LD_LOC 35
23936: PUSH
23937: LD_INT 2
23939: ARRAY
23940: PPUSH
23941: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23945: LD_INT 118
23947: PPUSH
23948: CALL_OW 302
23952: PUSH
23953: LD_INT 121
23955: PPUSH
23956: CALL_OW 302
23960: OR
23961: IFFALSE 23964
// enable ;
23963: ENABLE
// end ;
23964: PPOPN 3
23966: END
// on McDefendReturnsUnit ( mcid , un ) do var a ;
23967: LD_INT 0
23969: PPUSH
// begin a = JEDNOTKY_BAZE_2_LIST ;
23970: LD_ADDR_VAR 0 3
23974: PUSH
23975: LD_EXP 10
23979: ST_TO_ADDR
// case un of a [ 1 ] :
23980: LD_VAR 0 2
23984: PUSH
23985: LD_VAR 0 3
23989: PUSH
23990: LD_INT 1
23992: ARRAY
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24014
23999: POP
// posli_unit ( un , 5 ) ; a [ 2 ] :
24000: LD_VAR 0 2
24004: PPUSH
24005: LD_INT 5
24007: PPUSH
24008: CALL 24516 0 2
24012: GO 24513
24014: LD_VAR 0 3
24018: PUSH
24019: LD_INT 2
24021: ARRAY
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24043
24028: POP
// posli_unit ( un , 6 ) ; a [ 3 ] :
24029: LD_VAR 0 2
24033: PPUSH
24034: LD_INT 6
24036: PPUSH
24037: CALL 24516 0 2
24041: GO 24513
24043: LD_VAR 0 3
24047: PUSH
24048: LD_INT 3
24050: ARRAY
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24072
24057: POP
// posli_unit ( un , 7 ) ; a [ 3 ] :
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_INT 7
24065: PPUSH
24066: CALL 24516 0 2
24070: GO 24513
24072: LD_VAR 0 3
24076: PUSH
24077: LD_INT 3
24079: ARRAY
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24101
24086: POP
// posli_unit ( un , 8 ) ; a [ 3 ] :
24087: LD_VAR 0 2
24091: PPUSH
24092: LD_INT 8
24094: PPUSH
24095: CALL 24516 0 2
24099: GO 24513
24101: LD_VAR 0 3
24105: PUSH
24106: LD_INT 3
24108: ARRAY
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24130
24115: POP
// posli_unit ( un , 9 ) ; a [ 3 ] :
24116: LD_VAR 0 2
24120: PPUSH
24121: LD_INT 9
24123: PPUSH
24124: CALL 24516 0 2
24128: GO 24513
24130: LD_VAR 0 3
24134: PUSH
24135: LD_INT 3
24137: ARRAY
24138: DOUBLE
24139: EQUAL
24140: IFTRUE 24144
24142: GO 24159
24144: POP
// posli_unit ( un , 10 ) ; a [ 17 ] :
24145: LD_VAR 0 2
24149: PPUSH
24150: LD_INT 10
24152: PPUSH
24153: CALL 24516 0 2
24157: GO 24513
24159: LD_VAR 0 3
24163: PUSH
24164: LD_INT 17
24166: ARRAY
24167: DOUBLE
24168: EQUAL
24169: IFTRUE 24173
24171: GO 24188
24173: POP
// posli_unit ( un , 11 ) ; a [ 18 ] :
24174: LD_VAR 0 2
24178: PPUSH
24179: LD_INT 11
24181: PPUSH
24182: CALL 24516 0 2
24186: GO 24513
24188: LD_VAR 0 3
24192: PUSH
24193: LD_INT 18
24195: ARRAY
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24217
24202: POP
// posli_unit ( un , 12 ) ; a [ 16 ] :
24203: LD_VAR 0 2
24207: PPUSH
24208: LD_INT 12
24210: PPUSH
24211: CALL 24516 0 2
24215: GO 24513
24217: LD_VAR 0 3
24221: PUSH
24222: LD_INT 16
24224: ARRAY
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24246
24231: POP
// posli_unit ( un , 13 ) ; a [ 7 ] :
24232: LD_VAR 0 2
24236: PPUSH
24237: LD_INT 13
24239: PPUSH
24240: CALL 24516 0 2
24244: GO 24513
24246: LD_VAR 0 3
24250: PUSH
24251: LD_INT 7
24253: ARRAY
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24275
24260: POP
// posli_unit ( un , 14 ) ; a [ 8 ] :
24261: LD_VAR 0 2
24265: PPUSH
24266: LD_INT 14
24268: PPUSH
24269: CALL 24516 0 2
24273: GO 24513
24275: LD_VAR 0 3
24279: PUSH
24280: LD_INT 8
24282: ARRAY
24283: DOUBLE
24284: EQUAL
24285: IFTRUE 24289
24287: GO 24304
24289: POP
// posli_unit ( un , 15 ) ; a [ 9 ] :
24290: LD_VAR 0 2
24294: PPUSH
24295: LD_INT 15
24297: PPUSH
24298: CALL 24516 0 2
24302: GO 24513
24304: LD_VAR 0 3
24308: PUSH
24309: LD_INT 9
24311: ARRAY
24312: DOUBLE
24313: EQUAL
24314: IFTRUE 24318
24316: GO 24333
24318: POP
// posli_unit ( un , 16 ) ; a [ 10 ] :
24319: LD_VAR 0 2
24323: PPUSH
24324: LD_INT 16
24326: PPUSH
24327: CALL 24516 0 2
24331: GO 24513
24333: LD_VAR 0 3
24337: PUSH
24338: LD_INT 10
24340: ARRAY
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24362
24347: POP
// posli_unit ( un , 17 ) ; a [ 21 ] :
24348: LD_VAR 0 2
24352: PPUSH
24353: LD_INT 17
24355: PPUSH
24356: CALL 24516 0 2
24360: GO 24513
24362: LD_VAR 0 3
24366: PUSH
24367: LD_INT 21
24369: ARRAY
24370: DOUBLE
24371: EQUAL
24372: IFTRUE 24376
24374: GO 24391
24376: POP
// posli_unit ( un , 18 ) ; a [ 22 ] :
24377: LD_VAR 0 2
24381: PPUSH
24382: LD_INT 18
24384: PPUSH
24385: CALL 24516 0 2
24389: GO 24513
24391: LD_VAR 0 3
24395: PUSH
24396: LD_INT 22
24398: ARRAY
24399: DOUBLE
24400: EQUAL
24401: IFTRUE 24405
24403: GO 24420
24405: POP
// posli_unit ( un , 19 ) ; A2_nau2 :
24406: LD_VAR 0 2
24410: PPUSH
24411: LD_INT 19
24413: PPUSH
24414: CALL 24516 0 2
24418: GO 24513
24420: LD_INT 108
24422: DOUBLE
24423: EQUAL
24424: IFTRUE 24428
24426: GO 24443
24428: POP
// posli_unit2 ( un , 3 ) ; A2_nau1 :
24429: LD_VAR 0 2
24433: PPUSH
24434: LD_INT 3
24436: PPUSH
24437: CALL 24623 0 2
24441: GO 24513
24443: LD_INT 107
24445: DOUBLE
24446: EQUAL
24447: IFTRUE 24451
24449: GO 24466
24451: POP
// posli_unit2 ( un , 4 ) ; MDopka1 :
24452: LD_VAR 0 2
24456: PPUSH
24457: LD_INT 4
24459: PPUSH
24460: CALL 24623 0 2
24464: GO 24513
24466: LD_INT 117
24468: DOUBLE
24469: EQUAL
24470: IFTRUE 24474
24472: GO 24489
24474: POP
// posli_unit2 ( un , 1 ) ; MDopka2 :
24475: LD_VAR 0 2
24479: PPUSH
24480: LD_INT 1
24482: PPUSH
24483: CALL 24623 0 2
24487: GO 24513
24489: LD_INT 116
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24497
24495: GO 24512
24497: POP
// posli_unit2 ( un , 2 ) ; end ;
24498: LD_VAR 0 2
24502: PPUSH
24503: LD_INT 2
24505: PPUSH
24506: CALL 24623 0 2
24510: GO 24513
24512: POP
// end ;
24513: PPOPN 3
24515: END
// function posli_unit ( un , cz ) ; var a ; begin
24516: LD_INT 0
24518: PPUSH
24519: PPUSH
// a = uklizejici_mista [ cz ] ;
24520: LD_ADDR_VAR 0 4
24524: PUSH
24525: LD_LOC 36
24529: PUSH
24530: LD_VAR 0 2
24534: ARRAY
24535: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24536: LD_ADDR_OWVAR 48
24540: PUSH
24541: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24543: PUSH
24544: LD_VAR 0 4
24548: PUSH
24549: LD_VAR 0 1
24553: PUSH
24554: LD_VAR 0 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: ST_TO_ADDR
// wait ( 3 ) ;
24565: LD_INT 3
24567: PPUSH
24568: CALL_OW 67
// ComEnterUnit ( un , a [ 1 ] ) ;
24572: LD_VAR 0 1
24576: PPUSH
24577: LD_VAR 0 4
24581: PUSH
24582: LD_INT 1
24584: ARRAY
24585: PPUSH
24586: CALL_OW 120
// if a [ 2 ] then
24590: LD_VAR 0 4
24594: PUSH
24595: LD_INT 2
24597: ARRAY
24598: IFFALSE 24618
// AddComChangeProfession ( un , a [ 3 ] ) ;
24600: LD_VAR 0 1
24604: PPUSH
24605: LD_VAR 0 4
24609: PUSH
24610: LD_INT 3
24612: ARRAY
24613: PPUSH
24614: CALL_OW 183
// end ;
24618: LD_VAR 0 3
24622: RET
// function posli_unit2 ( un , cz ) ; var a ; begin
24623: LD_INT 0
24625: PPUSH
24626: PPUSH
// a = uklizejici_mista [ cz ] ;
24627: LD_ADDR_VAR 0 4
24631: PUSH
24632: LD_LOC 36
24636: PUSH
24637: LD_VAR 0 2
24641: ARRAY
24642: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24643: LD_ADDR_OWVAR 48
24647: PUSH
24648: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24650: PUSH
24651: LD_VAR 0 4
24655: PUSH
24656: LD_VAR 0 1
24660: PUSH
24661: LD_VAR 0 2
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: ST_TO_ADDR
// ComMoveXY ( un , a [ 1 ] , a [ 2 ] ) ;
24672: LD_VAR 0 1
24676: PPUSH
24677: LD_VAR 0 4
24681: PUSH
24682: LD_INT 1
24684: ARRAY
24685: PPUSH
24686: LD_VAR 0 4
24690: PUSH
24691: LD_INT 2
24693: ARRAY
24694: PPUSH
24695: CALL_OW 111
// end ;
24699: LD_VAR 0 3
24703: RET
// on McDone ( makro , stat ) do begin case makro of 1 :
24704: LD_VAR 0 1
24708: PUSH
24709: LD_INT 1
24711: DOUBLE
24712: EQUAL
24713: IFTRUE 24717
24715: GO 24727
24717: POP
// zabijeni_1_baze ( 1 ) ; 2 :
24718: LD_INT 1
24720: PPUSH
24721: CALL 24750 0 1
24725: GO 24746
24727: LD_INT 2
24729: DOUBLE
24730: EQUAL
24731: IFTRUE 24735
24733: GO 24745
24735: POP
// zabijeni_1_baze ( 2 ) ; end ;
24736: LD_INT 2
24738: PPUSH
24739: CALL 24750 0 1
24743: GO 24746
24745: POP
// enable ;
24746: ENABLE
// end ;
24747: PPOPN 2
24749: END
// function zabijeni_1_baze ( jj ) ; var pom , i ; var jedn ; begin
24750: LD_INT 0
24752: PPUSH
24753: PPUSH
24754: PPUSH
24755: PPUSH
// case jj of 1 :
24756: LD_VAR 0 1
24760: PUSH
24761: LD_INT 1
24763: DOUBLE
24764: EQUAL
24765: IFTRUE 24769
24767: GO 24782
24769: POP
// jedn = Ar_utok3_LIST ; 2 :
24770: LD_ADDR_VAR 0 5
24774: PUSH
24775: LD_EXP 14
24779: ST_TO_ADDR
24780: GO 24804
24782: LD_INT 2
24784: DOUBLE
24785: EQUAL
24786: IFTRUE 24790
24788: GO 24803
24790: POP
// jedn = Ar_utok2_LIST ; end ;
24791: LD_ADDR_VAR 0 5
24795: PUSH
24796: LD_EXP 13
24800: ST_TO_ADDR
24801: GO 24804
24803: POP
// for i in jedn do
24804: LD_ADDR_VAR 0 4
24808: PUSH
24809: LD_VAR 0 5
24813: PUSH
24814: FOR_IN
24815: IFFALSE 24855
// if GetClass ( i ) = class_engineer then
24817: LD_VAR 0 4
24821: PPUSH
24822: CALL_OW 257
24826: PUSH
24827: LD_INT 2
24829: EQUAL
24830: IFFALSE 24853
// if IsOK ( A1_dep ) then
24832: LD_INT 4
24834: PPUSH
24835: CALL_OW 302
24839: IFFALSE 24853
// ComEnterUnit ( i , A1_dep ) ;
24841: LD_VAR 0 4
24845: PPUSH
24846: LD_INT 4
24848: PPUSH
24849: CALL_OW 120
24853: GO 24814
24855: POP
24856: POP
// pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
24857: LD_ADDR_VAR 0 3
24861: PUSH
24862: LD_INT 3
24864: PPUSH
24865: LD_INT 22
24867: PUSH
24868: LD_EXP 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: PPUSH
24880: CALL_OW 70
24884: ST_TO_ADDR
// for i in pom do
24885: LD_ADDR_VAR 0 4
24889: PUSH
24890: LD_VAR 0 3
24894: PUSH
24895: FOR_IN
24896: IFFALSE 24914
// PriorityAttack ( Arabi , i ) ;
24898: LD_EXP 3
24902: PPUSH
24903: LD_VAR 0 4
24907: PPUSH
24908: CALL_OW 470
24912: GO 24895
24914: POP
24915: POP
// enable ( 995 ) ;
24916: LD_INT 995
24918: ENABLE_MARKED
// end ;
24919: LD_VAR 0 2
24923: RET
// every 0 0$1 marked 995 do var pom , pom1 ; var i ; var pomat ;
24924: GO 24926
24926: DISABLE
24927: LD_INT 0
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_ready ] ] ] ] ) ;
24933: LD_ADDR_VAR 0 1
24937: PUSH
24938: LD_INT 3
24940: PPUSH
24941: LD_INT 22
24943: PUSH
24944: LD_EXP 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 21
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 21
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 53
24978: PUSH
24979: EMPTY
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: LIST
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PPUSH
24995: CALL_OW 70
24999: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
25000: LD_ADDR_VAR 0 2
25004: PUSH
25005: LD_INT 3
25007: PPUSH
25008: LD_INT 22
25010: PUSH
25011: LD_EXP 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: EMPTY
25021: LIST
25022: PPUSH
25023: CALL_OW 70
25027: ST_TO_ADDR
// pomat = pom1 diff pom ;
25028: LD_ADDR_VAR 0 4
25032: PUSH
25033: LD_VAR 0 2
25037: PUSH
25038: LD_VAR 0 1
25042: DIFF
25043: ST_TO_ADDR
// if pomat = 0 then
25044: LD_VAR 0 4
25048: PUSH
25049: LD_INT 0
25051: EQUAL
25052: IFFALSE 25087
// for i in pom1 do
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_VAR 0 2
25063: PUSH
25064: FOR_IN
25065: IFFALSE 25083
// PriorityAttack ( Arabi , i ) else
25067: LD_EXP 3
25071: PPUSH
25072: LD_VAR 0 3
25076: PPUSH
25077: CALL_OW 470
25081: GO 25064
25083: POP
25084: POP
25085: GO 25149
// begin for i in pom do
25087: LD_ADDR_VAR 0 3
25091: PUSH
25092: LD_VAR 0 1
25096: PUSH
25097: FOR_IN
25098: IFFALSE 25116
// PriorityAttack ( Arabi , i ) ;
25100: LD_EXP 3
25104: PPUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: CALL_OW 470
25114: GO 25097
25116: POP
25117: POP
// for i in pomat do
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_VAR 0 4
25127: PUSH
25128: FOR_IN
25129: IFFALSE 25147
// NormalAttack ( Arabi , i ) ;
25131: LD_EXP 3
25135: PPUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: CALL_OW 472
25145: GO 25128
25147: POP
25148: POP
// end ; if pom <> 0 and FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) <> 0 then
25149: LD_VAR 0 1
25153: PUSH
25154: LD_INT 0
25156: NONEQUAL
25157: PUSH
25158: LD_INT 3
25160: PPUSH
25161: LD_INT 22
25163: PUSH
25164: LD_EXP 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: PPUSH
25176: CALL_OW 70
25180: PUSH
25181: LD_INT 0
25183: NONEQUAL
25184: AND
25185: IFFALSE 25188
// enable ;
25187: ENABLE
// end ; end_of_file
25188: PPOPN 4
25190: END
// export protiutok1 ; export Ar_levely ; export timelimit ; export max_bedny ; export lidi_other ; export zivoty_prvni_baze ; export utok_2_doba ; export last_attack_wait ; export medaile1 ; export medaile2 ; export Timecounter ; export function SET_DIFFICULTY ; var pom ; begin
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
// protiutok1 = [ 10 10$0 , 7 7$30 , 5 5$30 ] ;
25195: LD_ADDR_EXP 47
25199: PUSH
25200: LD_INT 21000
25202: PUSH
25203: LD_INT 15750
25205: PUSH
25206: LD_INT 11550
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: ST_TO_ADDR
// utok_2_doba = [ 10 10$0 , 8 8$0 , 6 6$0 ] ;
25214: LD_ADDR_EXP 53
25218: PUSH
25219: LD_INT 21000
25221: PUSH
25222: LD_INT 16800
25224: PUSH
25225: LD_INT 12600
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: ST_TO_ADDR
// Ar_levely = [ 4 , 6 , 8 ] ;
25233: LD_ADDR_EXP 48
25237: PUSH
25238: LD_INT 4
25240: PUSH
25241: LD_INT 6
25243: PUSH
25244: LD_INT 8
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: LIST
25251: ST_TO_ADDR
// timelimit = [ 160 160$0 , 150 150$0 , 140 140$0 ] ;
25252: LD_ADDR_EXP 49
25256: PUSH
25257: LD_INT 336000
25259: PUSH
25260: LD_INT 315000
25262: PUSH
25263: LD_INT 294000
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: LIST
25270: ST_TO_ADDR
// medaile1 = [ 120 , 100 , 90 ] ;
25271: LD_ADDR_EXP 55
25275: PUSH
25276: LD_INT 120
25278: PUSH
25279: LD_INT 100
25281: PUSH
25282: LD_INT 90
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: ST_TO_ADDR
// medaile2 = [ 100 , 90 , 80 ] ;
25290: LD_ADDR_EXP 56
25294: PUSH
25295: LD_INT 100
25297: PUSH
25298: LD_INT 90
25300: PUSH
25301: LD_INT 80
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: ST_TO_ADDR
// max_bedny = [ 55 , 40 , 30 ] ;
25309: LD_ADDR_EXP 50
25313: PUSH
25314: LD_INT 55
25316: PUSH
25317: LD_INT 40
25319: PUSH
25320: LD_INT 30
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: ST_TO_ADDR
// zivoty_prvni_baze = [ 700 , 850 , 1000 ] ;
25328: LD_ADDR_EXP 52
25332: PUSH
25333: LD_INT 700
25335: PUSH
25336: LD_INT 850
25338: PUSH
25339: LD_INT 1000
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
// last_attack_wait = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
25347: LD_ADDR_EXP 54
25351: PUSH
25352: LD_INT 21000
25354: PUSH
25355: LD_INT 16800
25357: PUSH
25358: LD_INT 10500
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: ST_TO_ADDR
// Timecounter = 0 ;
25366: LD_ADDR_EXP 57
25370: PUSH
25371: LD_INT 0
25373: ST_TO_ADDR
// end ;
25374: LD_VAR 0 1
25378: RET
// export cas ; every 0 0$10 do var pom ;
25379: GO 25381
25381: DISABLE
25382: LD_INT 0
25384: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
25385: LD_EXP 58
25389: PUSH
25390: LD_INT 3
25392: ARRAY
25393: PUSH
25394: LD_INT 10
25396: PLUS
25397: PUSH
25398: LD_INT 60
25400: EQUAL
25401: IFFALSE 25437
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
25403: LD_ADDR_EXP 58
25407: PUSH
25408: LD_EXP 58
25412: PUSH
25413: LD_INT 1
25415: ARRAY
25416: PUSH
25417: LD_INT 1
25419: PLUS
25420: PUSH
25421: LD_EXP 58
25425: PUSH
25426: LD_INT 2
25428: ARRAY
25429: ADD
25430: PUSH
25431: LD_INT 0
25433: ADD
25434: ST_TO_ADDR
25435: GO 25475
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
25437: LD_ADDR_EXP 58
25441: PUSH
25442: LD_EXP 58
25446: PUSH
25447: LD_INT 1
25449: ARRAY
25450: PUSH
25451: LD_EXP 58
25455: PUSH
25456: LD_INT 2
25458: ARRAY
25459: ADD
25460: PUSH
25461: LD_EXP 58
25465: PUSH
25466: LD_INT 3
25468: ARRAY
25469: PUSH
25470: LD_INT 10
25472: PLUS
25473: ADD
25474: ST_TO_ADDR
// debug_strings = [ cas ] ;
25475: LD_ADDR_OWVAR 48
25479: PUSH
25480: LD_EXP 58
25484: PUSH
25485: EMPTY
25486: LIST
25487: ST_TO_ADDR
// enable ;
25488: ENABLE
// end ;
25489: PPOPN 1
25491: END
// every 1 1$0 do
25492: GO 25494
25494: DISABLE
// begin Timecounter = Timecounter + 1 ;
25495: LD_ADDR_EXP 57
25499: PUSH
25500: LD_EXP 57
25504: PUSH
25505: LD_INT 1
25507: PLUS
25508: ST_TO_ADDR
// enable ;
25509: ENABLE
// end ; end_of_file
25510: END
// every 0 0$2 + 0 0$0.1 do
25511: GO 25513
25513: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
25514: LD_INT 22
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: LD_INT 25
25529: PUSH
25530: LD_INT 12
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 25
25539: PUSH
25540: LD_INT 16
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 25
25549: PUSH
25550: LD_INT 15
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 25
25559: PUSH
25560: LD_INT 17
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PPUSH
25578: CALL_OW 69
25582: PUSH
25583: LD_INT 22
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 21
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 3
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 25
25611: PUSH
25612: LD_INT 12
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 25
25621: PUSH
25622: LD_INT 16
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 25
25631: PUSH
25632: LD_INT 15
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 25
25641: PUSH
25642: LD_INT 17
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: LIST
25664: PPUSH
25665: CALL_OW 69
25669: GREATER
25670: IFFALSE 25681
// begin SetAchievement ( ACH_POTA ) ;
25672: LD_STRING ACH_POTA
25674: PPUSH
25675: CALL_OW 543
// exit ;
25679: GO 25682
// end ; enable ;
25681: ENABLE
// end ;
25682: END
