// export You , You2 , Arabi , Arabi2 ; export mregistry1 , MD1 ; export mregistry2 , MD2 ; export mission_ended ; starting begin RandomizeAll ;
   0: CALL_OW 11
// Randomize ;
   4: CALL_OW 10
// debug_strings := [ ] ;
   8: LD_ADDR_OWVAR 48
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
  15: LD_ADDR_EXP 59
  19: PUSH
  20: LD_INT 0
  22: PUSH
  23: LD_STRING :
  25: PUSH
  26: LD_INT 0
  28: PUSH
  29: EMPTY
  30: LIST
  31: LIST
  32: LIST
  33: ST_TO_ADDR
// InitUc ;
  34: CALL_OW 18
// InitHc ;
  38: CALL_OW 19
// InitVc ;
  42: CALL_OW 20
// mission_ended := false ;
  46: LD_ADDR_EXP 9
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// You := 1 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// You2 := 4 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 4
  69: ST_TO_ADDR
// Arabi := 2 ;
  70: LD_ADDR_EXP 3
  74: PUSH
  75: LD_INT 2
  77: ST_TO_ADDR
// Arabi2 := 5 ;
  78: LD_ADDR_EXP 4
  82: PUSH
  83: LD_INT 5
  85: ST_TO_ADDR
// SetBName ( A1_dep , dammam ) ;
  86: LD_INT 4
  88: PPUSH
  89: LD_STRING dammam
  91: PPUSH
  92: CALL_OW 500
// SetBName ( A2_dep , jeddah ) ;
  96: LD_INT 46
  98: PPUSH
  99: LD_STRING jeddah
 101: PPUSH
 102: CALL_OW 500
// SetBName ( A3_dep , riyadh ) ;
 106: LD_INT 28
 108: PPUSH
 109: LD_STRING riyadh
 111: PPUSH
 112: CALL_OW 500
// disable ( 80 ) ;
 116: LD_INT 80
 118: DISABLE_MARKED
// SET_DIFFICULTY ;
 119: CALL 25232 0 0
// load_postavy ;
 123: CALL 1748 0 0
// dodej_skily ;
 127: CALL 8591 0 0
// mregistry1 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD1_guard ] , [ mc_reg_area_to_protect , MD1_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 131: LD_ADDR_EXP 5
 135: PUSH
 136: LD_EXP 3
 140: PPUSH
 141: LD_INT 2
 143: PUSH
 144: LD_INT 27
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 28
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: PUSH
 161: LD_INT 5
 163: PUSH
 164: LD_INT 175
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PPUSH
 176: CALL_OW 399
 180: ST_TO_ADDR
// mregistry2 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD2_guard ] , [ mc_reg_area_to_protect , MD2_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 181: LD_ADDR_EXP 7
 185: PUSH
 186: LD_EXP 3
 190: PPUSH
 191: LD_INT 2
 193: PUSH
 194: LD_INT 32
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 3
 203: PUSH
 204: LD_INT 33
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 5
 213: PUSH
 214: LD_INT 175
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: LIST
 225: PPUSH
 226: CALL_OW 399
 230: ST_TO_ADDR
// MD1 = McDefend ( 2 , mregistry1 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu2 , A2_nau2 , MDopka1 , MDopka2 , A2_bu3 ] , [ [ mc_area_dont_leave , MD1_guard ] ] ) ;
 231: LD_ADDR_EXP 6
 235: PUSH
 236: LD_INT 2
 238: PPUSH
 239: LD_EXP 5
 243: PPUSH
 244: LD_INT 46
 246: PUSH
 247: LD_INT 61
 249: PUSH
 250: LD_INT 48
 252: PUSH
 253: LD_INT 50
 255: PUSH
 256: LD_INT 107
 258: PUSH
 259: LD_INT 63
 261: PUSH
 262: LD_INT 108
 264: PUSH
 265: LD_INT 117
 267: PUSH
 268: LD_INT 116
 270: PUSH
 271: LD_INT 47
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: PPUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 27
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: PPUSH
 299: CALL_OW 401
 303: ST_TO_ADDR
// MD1 = McDefend ( 1 , mregistry2 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu3 , A2_bu6 , A2_bu5 , A2_nau2 , MDopka1 , MDopka2 ] , [ [ mc_area_dont_leave , MD2_guard ] ] ) ;
 304: LD_ADDR_EXP 6
 308: PUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_EXP 7
 316: PPUSH
 317: LD_INT 46
 319: PUSH
 320: LD_INT 61
 322: PUSH
 323: LD_INT 48
 325: PUSH
 326: LD_INT 50
 328: PUSH
 329: LD_INT 107
 331: PUSH
 332: LD_INT 47
 334: PUSH
 335: LD_INT 59
 337: PUSH
 338: LD_INT 62
 340: PUSH
 341: LD_INT 108
 343: PUSH
 344: LD_INT 117
 346: PUSH
 347: LD_INT 116
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: PPUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 32
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: PPUSH
 376: CALL_OW 401
 380: ST_TO_ADDR
// A1_dobyta = false ;
 381: LD_ADDR_EXP 28
 385: PUSH
 386: LD_INT 0
 388: ST_TO_ADDR
// A2_dobyta = false ;
 389: LD_ADDR_EXP 29
 393: PUSH
 394: LD_INT 0
 396: ST_TO_ADDR
// A3_dobyta = false ;
 397: LD_ADDR_EXP 30
 401: PUSH
 402: LD_INT 0
 404: ST_TO_ADDR
// vojcli_base_2 ;
 405: CALL 9156 0 0
// vojcli_base_3 ;
 409: CALL 9854 0 0
// InGameOn ;
 413: CALL_OW 8
// Odebirani = false ;
 417: LD_ADDR_EXP 45
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// Pruzkumnik := false ;
 425: LD_ADDR_EXP 31
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// oposoldier := 0 ;
 433: LD_ADDR_EXP 46
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// choose_vojaky ;
 441: CALL 11133 0 0
// create_amici ;
 445: CALL 7998 0 0
// uklid_arabu ;
 449: CALL 17401 0 0
// create_ar_protiofenzivu ;
 453: CALL 8127 0 0
// create_arabske_utoky_behem_mise ;
 457: CALL 12536 0 0
// end ;
 461: END
// export function end_of_mission_time ; begin
 462: LD_INT 0
 464: PPUSH
// YouLost ( Command ) ;
 465: LD_STRING Command
 467: PPUSH
 468: CALL_OW 104
// end ;
 472: LD_VAR 0 1
 476: RET
// on UnitDestroyed ( un ) do begin if un = JMM then
 477: LD_VAR 0 1
 481: PUSH
 482: LD_EXP 32
 486: EQUAL
 487: IFFALSE 496
// YouLost ( JMM ) ;
 489: LD_STRING JMM
 491: PPUSH
 492: CALL_OW 104
// enable ;
 496: ENABLE
// end ;
 497: PPOPN 1
 499: END
// on EndTheMissionRaised ( void ) do begin konec_mise ;
 500: CALL 669 0 0
// end ;
 504: PPOPN 1
 506: END
// every 0 0$2 trigger not mission_ended and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do var i , cargos ;
 507: LD_EXP 9
 511: NOT
 512: PUSH
 513: LD_INT 22
 515: PUSH
 516: LD_INT 2
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 0
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PPUSH
 555: CALL_OW 69
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: AND
 564: IFFALSE 666
 566: GO 568
 568: DISABLE
 569: LD_INT 0
 571: PPUSH
 572: PPUSH
// begin enable ;
 573: ENABLE
// cargos := FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 574: LD_ADDR_VAR 0 2
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_EXP 1
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 2
 593: PUSH
 594: LD_INT 34
 596: PUSH
 597: LD_INT 12
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 34
 606: PUSH
 607: LD_INT 32
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL_OW 69
 627: ST_TO_ADDR
// for i in cargos do
 628: LD_ADDR_VAR 0 1
 632: PUSH
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_IN
 639: IFFALSE 664
// if GetCargo ( i , mat_artefact ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: CALL_OW 289
 653: IFFALSE 662
// begin konec_mise ;
 655: CALL 669 0 0
// disable ;
 659: DISABLE
// break ;
 660: GO 664
// end ;
 662: GO 638
 664: POP
 665: POP
// end ;
 666: PPOPN 2
 668: END
// export function konec_mise ; var pommedaile ; var pomauta ; var i , pom , pom1 , pom2 ; var art ; var VIPka ; var all_units_1 ; begin
 669: LD_INT 0
 671: PPUSH
 672: PPUSH
 673: PPUSH
 674: PPUSH
 675: PPUSH
 676: PPUSH
 677: PPUSH
 678: PPUSH
 679: PPUSH
 680: PPUSH
// if mission_ended then
 681: LD_EXP 9
 685: IFFALSE 689
// exit ;
 687: GO 1743
// mission_ended := true ;
 689: LD_ADDR_EXP 9
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// DisableExclamations ;
 697: CALL_OW 474
// gained_medals := [ ] ;
 701: LD_ADDR_OWVAR 61
 705: PUSH
 706: EMPTY
 707: ST_TO_ADDR
// missing_medals := [ ] ;
 708: LD_ADDR_OWVAR 62
 712: PUSH
 713: EMPTY
 714: ST_TO_ADDR
// if Timecounter <= medaile1 [ difficulty ] then
 715: LD_EXP 58
 719: PUSH
 720: LD_EXP 56
 724: PUSH
 725: LD_OWVAR 67
 729: ARRAY
 730: LESSEQUAL
 731: IFFALSE 753
// begin AddMedal ( Time1 , 1 ) ;
 733: LD_STRING Time1
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: CALL_OW 101
// pommedaile = true ;
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
// end else
 751: GO 772
// begin AddMedal ( Time1 , - 1 ) ;
 753: LD_STRING Time1
 755: PPUSH
 756: LD_INT 1
 758: NEG
 759: PPUSH
 760: CALL_OW 101
// pommedaile = false ;
 764: LD_ADDR_VAR 0 2
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// end ; if Timecounter <= medaile2 [ difficulty ] then
 772: LD_EXP 58
 776: PUSH
 777: LD_EXP 57
 781: PUSH
 782: LD_OWVAR 67
 786: ARRAY
 787: LESSEQUAL
 788: IFFALSE 802
// AddMedal ( Time2 , 1 ) else
 790: LD_STRING Time2
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 101
 800: GO 832
// if pommedaile then
 802: LD_VAR 0 2
 806: IFFALSE 821
// AddMedal ( Time2 , - 1 ) else
 808: LD_STRING Time2
 810: PPUSH
 811: LD_INT 1
 813: NEG
 814: PPUSH
 815: CALL_OW 101
 819: GO 832
// AddMedal ( Time2 , - 2 ) ;
 821: LD_STRING Time2
 823: PPUSH
 824: LD_INT 2
 826: NEG
 827: PPUSH
 828: CALL_OW 101
// pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 832: LD_ADDR_VAR 0 3
 836: PUSH
 837: LD_INT 22
 839: PUSH
 840: LD_EXP 1
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: LD_INT 34
 854: PUSH
 855: LD_INT 12
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 34
 864: PUSH
 865: LD_INT 32
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: ST_TO_ADDR
// art = false ;
 886: LD_ADDR_VAR 0 8
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// for i in pomauta do
 894: LD_ADDR_VAR 0 4
 898: PUSH
 899: LD_VAR 0 3
 903: PUSH
 904: FOR_IN
 905: IFFALSE 935
// if GetCargo ( i , mat_artefact ) > 0 then
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 4
 914: PPUSH
 915: CALL_OW 289
 919: PUSH
 920: LD_INT 0
 922: GREATER
 923: IFFALSE 933
// art = true ;
 925: LD_ADDR_VAR 0 8
 929: PUSH
 930: LD_INT 1
 932: ST_TO_ADDR
 933: GO 904
 935: POP
 936: POP
// if art then
 937: LD_VAR 0 8
 941: IFFALSE 955
// AddMedal ( Artefact , 1 ) else
 943: LD_STRING Artefact
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 101
 953: GO 966
// AddMedal ( Artefact , - 1 ) ;
 955: LD_STRING Artefact
 957: PPUSH
 958: LD_INT 1
 960: NEG
 961: PPUSH
 962: CALL_OW 101
// GiveMedals ( Main ) ;
 966: LD_STRING Main
 968: PPUSH
 969: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_INT 22
 980: PUSH
 981: LD_EXP 1
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: LD_INT 21
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PPUSH
1004: CALL_OW 69
1008: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) do
1009: LD_ADDR_VAR 0 4
1013: PUSH
1014: LD_INT 22
1016: PUSH
1017: LD_EXP 1
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 21
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PPUSH
1040: CALL_OW 69
1044: PUSH
1045: FOR_IN
1046: IFFALSE 1094
// begin pom1 = IsDrivenBy ( i ) ;
1048: LD_ADDR_VAR 0 6
1052: PUSH
1053: LD_VAR 0 4
1057: PPUSH
1058: CALL_OW 311
1062: ST_TO_ADDR
// if not ( pom1 in pom ) then
1063: LD_VAR 0 6
1067: PUSH
1068: LD_VAR 0 5
1072: IN
1073: NOT
1074: IFFALSE 1092
// pom = pom ^ pom1 ;
1076: LD_ADDR_VAR 0 5
1080: PUSH
1081: LD_VAR 0 5
1085: PUSH
1086: LD_VAR 0 6
1090: ADD
1091: ST_TO_ADDR
// end ;
1092: GO 1045
1094: POP
1095: POP
// all_units_1 = pom ;
1096: LD_ADDR_VAR 0 10
1100: PUSH
1101: LD_VAR 0 5
1105: ST_TO_ADDR
// all_units_1 = all_units_1 diff UnitFilter ( all_units_1 , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) ;
1106: LD_ADDR_VAR 0 10
1110: PUSH
1111: LD_VAR 0 10
1115: PUSH
1116: LD_VAR 0 10
1120: PPUSH
1121: LD_INT 2
1123: PUSH
1124: LD_INT 25
1126: PUSH
1127: LD_INT 12
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 25
1136: PUSH
1137: LD_INT 16
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 72
1153: DIFF
1154: ST_TO_ADDR
// RewardPeople ( all_units_1 ) ;
1155: LD_VAR 0 10
1159: PPUSH
1160: CALL_OW 43
// VIPka = [ JMM , Frank , Powell , Gary , Bobby , Yamoko , Cyrus , Cornel , Lisa , Don , Brown ] ;
1164: LD_ADDR_VAR 0 9
1168: PUSH
1169: LD_EXP 32
1173: PUSH
1174: LD_EXP 36
1178: PUSH
1179: LD_EXP 33
1183: PUSH
1184: LD_EXP 34
1188: PUSH
1189: LD_EXP 35
1193: PUSH
1194: LD_EXP 39
1198: PUSH
1199: LD_EXP 40
1203: PUSH
1204: LD_EXP 38
1208: PUSH
1209: LD_EXP 37
1213: PUSH
1214: LD_EXP 41
1218: PUSH
1219: LD_EXP 42
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
1237: LD_EXP 32
1241: PPUSH
1242: LD_STRING JMM
1244: PPUSH
1245: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
1249: LD_EXP 40
1253: PPUSH
1254: LD_STRING Cyrus
1256: PPUSH
1257: CALL_OW 38
// if Cyrus in Amici_enter then
1261: LD_EXP 40
1265: PUSH
1266: LD_EXP 43
1270: IN
1271: IFFALSE 1285
// SaveVariable ( 6 , CyrusLoc ) else
1273: LD_INT 6
1275: PPUSH
1276: LD_STRING CyrusLoc
1278: PPUSH
1279: CALL_OW 39
1283: GO 1295
// SaveVariable ( 7 , CyrusLoc ) ;
1285: LD_INT 7
1287: PPUSH
1288: LD_STRING CyrusLoc
1290: PPUSH
1291: CALL_OW 39
// SaveCharacters ( Gary , Gary ) ;
1295: LD_EXP 34
1299: PPUSH
1300: LD_STRING Gary
1302: PPUSH
1303: CALL_OW 38
// if Gary in Amici_enter then
1307: LD_EXP 34
1311: PUSH
1312: LD_EXP 43
1316: IN
1317: IFFALSE 1331
// SaveVariable ( 6 , GaryLoc ) else
1319: LD_INT 6
1321: PPUSH
1322: LD_STRING GaryLoc
1324: PPUSH
1325: CALL_OW 39
1329: GO 1341
// SaveVariable ( 7 , GaryLoc ) ;
1331: LD_INT 7
1333: PPUSH
1334: LD_STRING GaryLoc
1336: PPUSH
1337: CALL_OW 39
// SaveCharacters ( Cornel , Cornell ) ;
1341: LD_EXP 38
1345: PPUSH
1346: LD_STRING Cornell
1348: PPUSH
1349: CALL_OW 38
// if Cornel in Amici_enter then
1353: LD_EXP 38
1357: PUSH
1358: LD_EXP 43
1362: IN
1363: IFFALSE 1377
// SaveVariable ( 6 , CornellLoc ) else
1365: LD_INT 6
1367: PPUSH
1368: LD_STRING CornellLoc
1370: PPUSH
1371: CALL_OW 39
1375: GO 1387
// SaveVariable ( 7 , CornellLoc ) ;
1377: LD_INT 7
1379: PPUSH
1380: LD_STRING CornellLoc
1382: PPUSH
1383: CALL_OW 39
// SaveCharacters ( Frank , Frank ) ;
1387: LD_EXP 36
1391: PPUSH
1392: LD_STRING Frank
1394: PPUSH
1395: CALL_OW 38
// if Frank in Amici_enter then
1399: LD_EXP 36
1403: PUSH
1404: LD_EXP 43
1408: IN
1409: IFFALSE 1423
// SaveVariable ( 6 , FrankLoc ) else
1411: LD_INT 6
1413: PPUSH
1414: LD_STRING FrankLoc
1416: PPUSH
1417: CALL_OW 39
1421: GO 1433
// SaveVariable ( 7 , FrankLoc ) ;
1423: LD_INT 7
1425: PPUSH
1426: LD_STRING FrankLoc
1428: PPUSH
1429: CALL_OW 39
// SaveCharacters ( Bobby , Bobby ) ;
1433: LD_EXP 35
1437: PPUSH
1438: LD_STRING Bobby
1440: PPUSH
1441: CALL_OW 38
// if Bobby in Amici_enter then
1445: LD_EXP 35
1449: PUSH
1450: LD_EXP 43
1454: IN
1455: IFFALSE 1469
// SaveVariable ( 6 , BobbyLoc ) else
1457: LD_INT 6
1459: PPUSH
1460: LD_STRING BobbyLoc
1462: PPUSH
1463: CALL_OW 39
1467: GO 1479
// SaveVariable ( 7 , BobbyLoc ) ;
1469: LD_INT 7
1471: PPUSH
1472: LD_STRING BobbyLoc
1474: PPUSH
1475: CALL_OW 39
// SaveCharacters ( Yamoko , Yamoko ) ;
1479: LD_EXP 39
1483: PPUSH
1484: LD_STRING Yamoko
1486: PPUSH
1487: CALL_OW 38
// if Yamoko in Amici_enter then
1491: LD_EXP 39
1495: PUSH
1496: LD_EXP 43
1500: IN
1501: IFFALSE 1515
// SaveVariable ( 6 , YamokoLoc ) else
1503: LD_INT 6
1505: PPUSH
1506: LD_STRING YamokoLoc
1508: PPUSH
1509: CALL_OW 39
1513: GO 1525
// SaveVariable ( 7 , YamokoLoc ) ;
1515: LD_INT 7
1517: PPUSH
1518: LD_STRING YamokoLoc
1520: PPUSH
1521: CALL_OW 39
// SaveCharacters ( Don , Donaldson ) ;
1525: LD_EXP 41
1529: PPUSH
1530: LD_STRING Donaldson
1532: PPUSH
1533: CALL_OW 38
// if Don in Amici_enter then
1537: LD_EXP 41
1541: PUSH
1542: LD_EXP 43
1546: IN
1547: IFFALSE 1561
// SaveVariable ( 6 , DonaldsonLoc ) else
1549: LD_INT 6
1551: PPUSH
1552: LD_STRING DonaldsonLoc
1554: PPUSH
1555: CALL_OW 39
1559: GO 1571
// SaveVariable ( 7 , DonaldsonLoc ) ;
1561: LD_INT 7
1563: PPUSH
1564: LD_STRING DonaldsonLoc
1566: PPUSH
1567: CALL_OW 39
// SaveCharacters ( Brown , Brown ) ;
1571: LD_EXP 42
1575: PPUSH
1576: LD_STRING Brown
1578: PPUSH
1579: CALL_OW 38
// if Brown in Amici_enter then
1583: LD_EXP 42
1587: PUSH
1588: LD_EXP 43
1592: IN
1593: IFFALSE 1607
// SaveVariable ( 6 , BrownLoc ) else
1595: LD_INT 6
1597: PPUSH
1598: LD_STRING BrownLoc
1600: PPUSH
1601: CALL_OW 39
1605: GO 1617
// SaveVariable ( 7 , BrownLoc ) ;
1607: LD_INT 7
1609: PPUSH
1610: LD_STRING BrownLoc
1612: PPUSH
1613: CALL_OW 39
// SaveCharacters ( Lisa , Lisa ) ;
1617: LD_EXP 37
1621: PPUSH
1622: LD_STRING Lisa
1624: PPUSH
1625: CALL_OW 38
// if Lisa in Amici_enter then
1629: LD_EXP 37
1633: PUSH
1634: LD_EXP 43
1638: IN
1639: IFFALSE 1653
// SaveVariable ( 6 , LisaLoc ) else
1641: LD_INT 6
1643: PPUSH
1644: LD_STRING LisaLoc
1646: PPUSH
1647: CALL_OW 39
1651: GO 1663
// SaveVariable ( 7 , LiasLoc ) ;
1653: LD_INT 7
1655: PPUSH
1656: LD_STRING LiasLoc
1658: PPUSH
1659: CALL_OW 39
// pom1 = lidi_other diff Amici_enter ;
1663: LD_ADDR_VAR 0 6
1667: PUSH
1668: LD_EXP 52
1672: PUSH
1673: LD_EXP 43
1677: DIFF
1678: ST_TO_ADDR
// pom2 = all_units_1 diff VIPka ;
1679: LD_ADDR_VAR 0 7
1683: PUSH
1684: LD_VAR 0 10
1688: PUSH
1689: LD_VAR 0 9
1693: DIFF
1694: ST_TO_ADDR
// DeleteCharacters ( other_survivors ) ;
1695: LD_STRING other_survivors
1697: PPUSH
1698: CALL_OW 40
// DeleteCharacters ( otherGamma2 ) ;
1702: LD_STRING otherGamma2
1704: PPUSH
1705: CALL_OW 40
// SaveCharacters ( pom1 , otherNotJMM ) ;
1709: LD_VAR 0 6
1713: PPUSH
1714: LD_STRING otherNotJMM
1716: PPUSH
1717: CALL_OW 38
// SaveCharacters ( pom2 , otherWithJMM ) ;
1721: LD_VAR 0 7
1725: PPUSH
1726: LD_STRING otherWithJMM
1728: PPUSH
1729: CALL_OW 38
// YouWin ;
1733: CALL_OW 103
// EnableExclamations ;
1737: CALL_OW 473
// exit ;
1741: GO 1743
// end ;
1743: LD_VAR 0 1
1747: RET
// function load_postavy ; var pom ; begin
1748: LD_INT 0
1750: PPUSH
1751: PPUSH
// JMM = nacti_osobu ( JMM ) ;
1752: LD_ADDR_EXP 32
1756: PUSH
1757: LD_STRING JMM
1759: PPUSH
1760: CALL 7954 0 1
1764: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
1765: LD_ADDR_EXP 33
1769: PUSH
1770: LD_STRING Powell
1772: PPUSH
1773: CALL_OW 25
1777: ST_TO_ADDR
// Gary = nacti_osobu ( Gary ) ;
1778: LD_ADDR_EXP 34
1782: PUSH
1783: LD_STRING Gary
1785: PPUSH
1786: CALL 7954 0 1
1790: ST_TO_ADDR
// Lisa = nacti_osobu ( Lisa ) ;
1791: LD_ADDR_EXP 37
1795: PUSH
1796: LD_STRING Lisa
1798: PPUSH
1799: CALL 7954 0 1
1803: ST_TO_ADDR
// Yamoko = nacti_osobu ( Yamoko ) ;
1804: LD_ADDR_EXP 39
1808: PUSH
1809: LD_STRING Yamoko
1811: PPUSH
1812: CALL 7954 0 1
1816: ST_TO_ADDR
// Frank = nacti_osobu ( Frank ) ;
1817: LD_ADDR_EXP 36
1821: PUSH
1822: LD_STRING Frank
1824: PPUSH
1825: CALL 7954 0 1
1829: ST_TO_ADDR
// Cornel = nacti_osobu ( Cornell ) ;
1830: LD_ADDR_EXP 38
1834: PUSH
1835: LD_STRING Cornell
1837: PPUSH
1838: CALL 7954 0 1
1842: ST_TO_ADDR
// Bobby = nacti_osobu ( Bobby ) ;
1843: LD_ADDR_EXP 35
1847: PUSH
1848: LD_STRING Bobby
1850: PPUSH
1851: CALL 7954 0 1
1855: ST_TO_ADDR
// Cyrus = nacti_osobu ( Cyrus ) ;
1856: LD_ADDR_EXP 40
1860: PUSH
1861: LD_STRING Cyrus
1863: PPUSH
1864: CALL 7954 0 1
1868: ST_TO_ADDR
// Don = nacti_osobu ( Donaldson ) ;
1869: LD_ADDR_EXP 41
1873: PUSH
1874: LD_STRING Donaldson
1876: PPUSH
1877: CALL 7954 0 1
1881: ST_TO_ADDR
// Brown = nacti_osobu ( Brown ) ;
1882: LD_ADDR_EXP 42
1886: PUSH
1887: LD_STRING Brown
1889: PPUSH
1890: CALL 7954 0 1
1894: ST_TO_ADDR
// GARYL = LoadVariable ( GaryLoc , 6 ) ;
1895: LD_ADDR_EXP 19
1899: PUSH
1900: LD_STRING GaryLoc
1902: PPUSH
1903: LD_INT 6
1905: PPUSH
1906: CALL_OW 30
1910: ST_TO_ADDR
// LISAL = LoadVariable ( LisaLoc , 6 ) ;
1911: LD_ADDR_EXP 20
1915: PUSH
1916: LD_STRING LisaLoc
1918: PPUSH
1919: LD_INT 6
1921: PPUSH
1922: CALL_OW 30
1926: ST_TO_ADDR
// YAML = LoadVariable ( YamokoLoc , 6 ) ;
1927: LD_ADDR_EXP 21
1931: PUSH
1932: LD_STRING YamokoLoc
1934: PPUSH
1935: LD_INT 6
1937: PPUSH
1938: CALL_OW 30
1942: ST_TO_ADDR
// FRANKL = LoadVariable ( FrankLoc , 6 ) ;
1943: LD_ADDR_EXP 22
1947: PUSH
1948: LD_STRING FrankLoc
1950: PPUSH
1951: LD_INT 6
1953: PPUSH
1954: CALL_OW 30
1958: ST_TO_ADDR
// CORNELL = LoadVariable ( CornellLoc , 6 ) ;
1959: LD_ADDR_EXP 23
1963: PUSH
1964: LD_STRING CornellLoc
1966: PPUSH
1967: LD_INT 6
1969: PPUSH
1970: CALL_OW 30
1974: ST_TO_ADDR
// BOBL = LoadVariable ( BobbyLoc , 6 ) ;
1975: LD_ADDR_EXP 24
1979: PUSH
1980: LD_STRING BobbyLoc
1982: PPUSH
1983: LD_INT 6
1985: PPUSH
1986: CALL_OW 30
1990: ST_TO_ADDR
// CYRL = LoadVariable ( CyrusLoc , 6 ) ;
1991: LD_ADDR_EXP 25
1995: PUSH
1996: LD_STRING CyrusLoc
1998: PPUSH
1999: LD_INT 6
2001: PPUSH
2002: CALL_OW 30
2006: ST_TO_ADDR
// DONL = LoadVariable ( DonaldsonLoc , 6 ) ;
2007: LD_ADDR_EXP 26
2011: PUSH
2012: LD_STRING DonaldsonLoc
2014: PPUSH
2015: LD_INT 6
2017: PPUSH
2018: CALL_OW 30
2022: ST_TO_ADDR
// BROWNL = LoadVariable ( BrownLoc , 6 ) ;
2023: LD_ADDR_EXP 27
2027: PUSH
2028: LD_STRING BrownLoc
2030: PPUSH
2031: LD_INT 6
2033: PPUSH
2034: CALL_OW 30
2038: ST_TO_ADDR
// if CheckCharacterSet ( otherWithJMM ) then
2039: LD_STRING otherWithJMM
2041: PPUSH
2042: CALL_OW 29
2046: IFFALSE 2063
// lidi_other = CreateCharacterSet ( otherWithJMM ) else
2048: LD_ADDR_EXP 52
2052: PUSH
2053: LD_STRING otherWithJMM
2055: PPUSH
2056: CALL_OW 31
2060: ST_TO_ADDR
2061: GO 2070
// lidi_other = [ ] ;
2063: LD_ADDR_EXP 52
2067: PUSH
2068: EMPTY
2069: ST_TO_ADDR
// if CheckCharacterSet ( other_survivors ) then
2070: LD_STRING other_survivors
2072: PPUSH
2073: CALL_OW 29
2077: IFFALSE 2094
// pom = CreateCharacterSet ( other_survivors ) else
2079: LD_ADDR_VAR 0 2
2083: PUSH
2084: LD_STRING other_survivors
2086: PPUSH
2087: CALL_OW 31
2091: ST_TO_ADDR
2092: GO 2101
// pom = [ ] ;
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: EMPTY
2100: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2101: LD_ADDR_EXP 52
2105: PUSH
2106: LD_EXP 52
2110: PUSH
2111: LD_VAR 0 2
2115: ADD
2116: ST_TO_ADDR
// if CheckCharacterSet ( otherNotJMM ) then
2117: LD_STRING otherNotJMM
2119: PPUSH
2120: CALL_OW 29
2124: IFFALSE 2141
// pom = CreateCharacterSet ( otherNotJMM ) else
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: LD_STRING otherNotJMM
2133: PPUSH
2134: CALL_OW 31
2138: ST_TO_ADDR
2139: GO 2148
// pom = [ ] ;
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: EMPTY
2147: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2148: LD_ADDR_EXP 52
2152: PUSH
2153: LD_EXP 52
2157: PUSH
2158: LD_VAR 0 2
2162: ADD
2163: ST_TO_ADDR
// if CheckCharacterSet ( otherGamma2 ) then
2164: LD_STRING otherGamma2
2166: PPUSH
2167: CALL_OW 29
2171: IFFALSE 2188
// pom = CreateCharacterSet ( otherGamma2 ) else
2173: LD_ADDR_VAR 0 2
2177: PUSH
2178: LD_STRING otherGamma2
2180: PPUSH
2181: CALL_OW 31
2185: ST_TO_ADDR
2186: GO 2195
// pom = [ ] ;
2188: LD_ADDR_VAR 0 2
2192: PUSH
2193: EMPTY
2194: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2195: LD_ADDR_EXP 52
2199: PUSH
2200: LD_EXP 52
2204: PUSH
2205: LD_VAR 0 2
2209: ADD
2210: ST_TO_ADDR
// end ; end_of_file
2211: LD_VAR 0 1
2215: RET
// var i , pom , pom1 , pom2 , pom3 , pom4 ; var kecy ; var KAMI ; var disable_kecy_5D ; every 0 0$0.1 do
2216: GO 2218
2218: DISABLE
// begin for i := 1 to 2 do
2219: LD_ADDR_LOC 1
2223: PUSH
2224: DOUBLE
2225: LD_INT 1
2227: DEC
2228: ST_TO_ADDR
2229: LD_INT 2
2231: PUSH
2232: FOR_TO
2233: IFFALSE 2242
// disable ( i ) ;
2235: LD_LOC 1
2239: DISABLE_MARKED
2240: GO 2232
2242: POP
2243: POP
// kecy := false ;
2244: LD_ADDR_LOC 7
2248: PUSH
2249: LD_INT 0
2251: ST_TO_ADDR
// KAMI = false ;
2252: LD_ADDR_LOC 8
2256: PUSH
2257: LD_INT 0
2259: ST_TO_ADDR
// disable_kecy_5D = false ;
2260: LD_ADDR_LOC 9
2264: PUSH
2265: LD_INT 0
2267: ST_TO_ADDR
// end ;
2268: END
// export function chmo1 ; begin
2269: LD_INT 0
2271: PPUSH
// CenterOnXY ( 86 , 145 ) ;
2272: LD_INT 86
2274: PPUSH
2275: LD_INT 145
2277: PPUSH
2278: CALL_OW 84
// SetAttitude ( You , Arabi , att_enemy , true ) ;
2282: LD_EXP 1
2286: PPUSH
2287: LD_EXP 3
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
2302: LD_EXP 3
2306: PPUSH
2307: LD_EXP 1
2311: PPUSH
2312: LD_INT 2
2314: PPUSH
2315: LD_INT 1
2317: PPUSH
2318: CALL_OW 80
// SaveForQuickRestart ;
2322: CALL_OW 22
// wait ( 0 0$0.5 ) ;
2326: LD_INT 18
2328: PPUSH
2329: CALL_OW 67
// InGameOff ;
2333: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2337: LD_STRING M1
2339: PPUSH
2340: CALL_OW 337
// end ;
2344: LD_VAR 0 1
2348: RET
// every 0 0$3 trigger GetSide ( A1_dep ) = You or IsDead ( A1_dep ) do var pom1 ;
2349: LD_INT 4
2351: PPUSH
2352: CALL_OW 255
2356: PUSH
2357: LD_EXP 1
2361: EQUAL
2362: PUSH
2363: LD_INT 4
2365: PPUSH
2366: CALL_OW 301
2370: OR
2371: IFFALSE 2956
2373: GO 2375
2375: DISABLE
2376: LD_INT 0
2378: PPUSH
// begin A1_dobyta = true ;
2379: LD_ADDR_EXP 28
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// DialogueOn ;
2387: CALL_OW 6
// SayRadio ( Jmm , D2-JMM-1 ) ;
2391: LD_EXP 32
2395: PPUSH
2396: LD_STRING D2-JMM-1
2398: PPUSH
2399: CALL_OW 94
// SayRadio ( Powell , D2-Pow-1 ) ;
2403: LD_EXP 33
2407: PPUSH
2408: LD_STRING D2-Pow-1
2410: PPUSH
2411: CALL_OW 94
// SayRadio ( JMM , D2-JMM-2 ) ;
2415: LD_EXP 32
2419: PPUSH
2420: LD_STRING D2-JMM-2
2422: PPUSH
2423: CALL_OW 94
// SayRadio ( Powell , D2-Pow-2 ) ;
2427: LD_EXP 33
2431: PPUSH
2432: LD_STRING D2-Pow-2
2434: PPUSH
2435: CALL_OW 94
// SayRadio ( JMM , D2-JMM-3 ) ;
2439: LD_EXP 32
2443: PPUSH
2444: LD_STRING D2-JMM-3
2446: PPUSH
2447: CALL_OW 94
// DialogueOff ;
2451: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2455: LD_STRING M2
2457: PPUSH
2458: CALL_OW 337
// Hint ( CapturedBase ) ;
2462: LD_STRING CapturedBase
2464: PPUSH
2465: CALL_OW 339
// pom = [ ] ;
2469: LD_ADDR_LOC 2
2473: PUSH
2474: EMPTY
2475: ST_TO_ADDR
// for i in [ Gary , Bobby , Frank , Lisa , Cornel , Cyrus , Don , Brown ] do
2476: LD_ADDR_LOC 1
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_EXP 35
2490: PUSH
2491: LD_EXP 36
2495: PUSH
2496: LD_EXP 37
2500: PUSH
2501: LD_EXP 38
2505: PUSH
2506: LD_EXP 40
2510: PUSH
2511: LD_EXP 41
2515: PUSH
2516: LD_EXP 42
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: FOR_IN
2532: IFFALSE 2563
// if IsOK ( i ) then
2534: LD_LOC 1
2538: PPUSH
2539: CALL_OW 302
2543: IFFALSE 2561
// pom = pom ^ i ;
2545: LD_ADDR_LOC 2
2549: PUSH
2550: LD_LOC 2
2554: PUSH
2555: LD_LOC 1
2559: ADD
2560: ST_TO_ADDR
2561: GO 2531
2563: POP
2564: POP
// if pom > 3 then
2565: LD_LOC 2
2569: PUSH
2570: LD_INT 3
2572: GREATER
2573: IFFALSE 2723
// begin pom1 = pom [ Rand ( 1 , pom + 0 ) ] ;
2575: LD_ADDR_VAR 0 1
2579: PUSH
2580: LD_LOC 2
2584: PUSH
2585: LD_INT 1
2587: PPUSH
2588: LD_LOC 2
2592: PUSH
2593: LD_INT 0
2595: PLUS
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: ST_TO_ADDR
// pom = pom diff pom1 [ 1 ] ;
2603: LD_ADDR_LOC 2
2607: PUSH
2608: LD_LOC 2
2612: PUSH
2613: LD_VAR 0 1
2617: PUSH
2618: LD_INT 1
2620: ARRAY
2621: DIFF
2622: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2623: LD_ADDR_VAR 0 1
2627: PUSH
2628: LD_VAR 0 1
2632: PUSH
2633: LD_LOC 2
2637: PUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_LOC 2
2645: PUSH
2646: LD_INT 0
2648: PLUS
2649: PPUSH
2650: CALL_OW 12
2654: ARRAY
2655: ADD
2656: ST_TO_ADDR
// pom = pom diff pom1 [ 2 ] ;
2657: LD_ADDR_LOC 2
2661: PUSH
2662: LD_LOC 2
2666: PUSH
2667: LD_VAR 0 1
2671: PUSH
2672: LD_INT 2
2674: ARRAY
2675: DIFF
2676: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2677: LD_ADDR_VAR 0 1
2681: PUSH
2682: LD_VAR 0 1
2686: PUSH
2687: LD_LOC 2
2691: PUSH
2692: LD_INT 1
2694: PPUSH
2695: LD_LOC 2
2699: PUSH
2700: LD_INT 0
2702: PLUS
2703: PPUSH
2704: CALL_OW 12
2708: ARRAY
2709: ADD
2710: ST_TO_ADDR
// pom = pom1 ;
2711: LD_ADDR_LOC 2
2715: PUSH
2716: LD_VAR 0 1
2720: ST_TO_ADDR
// end else
2721: GO 2733
// pom1 = pom ;
2723: LD_ADDR_VAR 0 1
2727: PUSH
2728: LD_LOC 2
2732: ST_TO_ADDR
// for i in pom1 do
2733: LD_ADDR_LOC 1
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2954
// case i of Gary :
2746: LD_LOC 1
2750: PUSH
2751: LD_EXP 34
2755: DOUBLE
2756: EQUAL
2757: IFTRUE 2761
2759: GO 2776
2761: POP
// Say ( Gary , D2a-Gary-1 ) ; Bobby :
2762: LD_EXP 34
2766: PPUSH
2767: LD_STRING D2a-Gary-1
2769: PPUSH
2770: CALL_OW 88
2774: GO 2952
2776: LD_EXP 35
2780: DOUBLE
2781: EQUAL
2782: IFTRUE 2786
2784: GO 2801
2786: POP
// Say ( Bobby , D2a-Bobby-1 ) ; Frank :
2787: LD_EXP 35
2791: PPUSH
2792: LD_STRING D2a-Bobby-1
2794: PPUSH
2795: CALL_OW 88
2799: GO 2952
2801: LD_EXP 36
2805: DOUBLE
2806: EQUAL
2807: IFTRUE 2811
2809: GO 2826
2811: POP
// Say ( Frank , D2a-Frank-1 ) ; Lisa :
2812: LD_EXP 36
2816: PPUSH
2817: LD_STRING D2a-Frank-1
2819: PPUSH
2820: CALL_OW 88
2824: GO 2952
2826: LD_EXP 37
2830: DOUBLE
2831: EQUAL
2832: IFTRUE 2836
2834: GO 2851
2836: POP
// Say ( Lisa , D2a-Lisa-1 ) ; Cornel :
2837: LD_EXP 37
2841: PPUSH
2842: LD_STRING D2a-Lisa-1
2844: PPUSH
2845: CALL_OW 88
2849: GO 2952
2851: LD_EXP 38
2855: DOUBLE
2856: EQUAL
2857: IFTRUE 2861
2859: GO 2876
2861: POP
// Say ( Cornel , D2a-Corn-1 ) ; Cyrus :
2862: LD_EXP 38
2866: PPUSH
2867: LD_STRING D2a-Corn-1
2869: PPUSH
2870: CALL_OW 88
2874: GO 2952
2876: LD_EXP 40
2880: DOUBLE
2881: EQUAL
2882: IFTRUE 2886
2884: GO 2901
2886: POP
// Say ( Cyrus , D2a-Cyrus-1 ) ; Don :
2887: LD_EXP 40
2891: PPUSH
2892: LD_STRING D2a-Cyrus-1
2894: PPUSH
2895: CALL_OW 88
2899: GO 2952
2901: LD_EXP 41
2905: DOUBLE
2906: EQUAL
2907: IFTRUE 2911
2909: GO 2926
2911: POP
// Say ( Don , D2a-Don-1 ) ; Brown :
2912: LD_EXP 41
2916: PPUSH
2917: LD_STRING D2a-Don-1
2919: PPUSH
2920: CALL_OW 88
2924: GO 2952
2926: LD_EXP 42
2930: DOUBLE
2931: EQUAL
2932: IFTRUE 2936
2934: GO 2951
2936: POP
// Say ( Brown , D2a-Brown-1 ) ; end ;
2937: LD_EXP 42
2941: PPUSH
2942: LD_STRING D2a-Brown-1
2944: PPUSH
2945: CALL_OW 88
2949: GO 2952
2951: POP
2952: GO 2743
2954: POP
2955: POP
// end ;
2956: PPOPN 1
2958: END
// export function dialog_frank ; var res ; begin
2959: LD_INT 0
2961: PPUSH
2962: PPUSH
// Say ( Frank , D3F-Frank-1 ) ;
2963: LD_EXP 36
2967: PPUSH
2968: LD_STRING D3F-Frank-1
2970: PPUSH
2971: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
2975: LD_EXP 32
2979: PPUSH
2980: LD_STRING D3F-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
2987: LD_EXP 36
2991: PPUSH
2992: LD_STRING D3F-Frank-2
2994: PPUSH
2995: CALL_OW 88
// res := Query ( QFrank ) ;
2999: LD_ADDR_VAR 0 2
3003: PUSH
3004: LD_STRING QFrank
3006: PPUSH
3007: CALL_OW 97
3011: ST_TO_ADDR
// case res of 1 :
3012: LD_VAR 0 2
3016: PUSH
3017: LD_INT 1
3019: DOUBLE
3020: EQUAL
3021: IFTRUE 3025
3023: GO 3048
3025: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
3026: LD_EXP 32
3030: PPUSH
3031: LD_STRING D3Fa-JMM-1
3033: PPUSH
3034: CALL_OW 88
// result := 1 ;
3038: LD_ADDR_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: ST_TO_ADDR
// end ; 2 :
3046: GO 3204
3048: LD_INT 2
3050: DOUBLE
3051: EQUAL
3052: IFTRUE 3056
3054: GO 3172
3056: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
3057: LD_EXP 32
3061: PPUSH
3062: LD_STRING D3Fb-JMM-1
3064: PPUSH
3065: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
3069: LD_EXP 36
3073: PPUSH
3074: LD_STRING D3Fb-Frank-1
3076: PPUSH
3077: CALL_OW 88
// res := Query ( QFrank2 ) ;
3081: LD_ADDR_VAR 0 2
3085: PUSH
3086: LD_STRING QFrank2
3088: PPUSH
3089: CALL_OW 97
3093: ST_TO_ADDR
// if res = 1 then
3094: LD_VAR 0 2
3098: PUSH
3099: LD_INT 1
3101: EQUAL
3102: IFFALSE 3150
// begin Say ( JMM , D3Fba-JMM-1 ) ;
3104: LD_EXP 32
3108: PPUSH
3109: LD_STRING D3Fba-JMM-1
3111: PPUSH
3112: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
3116: LD_EXP 36
3120: PPUSH
3121: LD_STRING D3Fba-Frank-1
3123: PPUSH
3124: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
3128: LD_EXP 32
3132: PPUSH
3133: LD_STRING D3Fba-JMM-2
3135: PPUSH
3136: CALL_OW 88
// result := 21 ;
3140: LD_ADDR_VAR 0 1
3144: PUSH
3145: LD_INT 21
3147: ST_TO_ADDR
// end else
3148: GO 3170
// begin Say ( JMM , D3Fbb-JMM-1 ) ;
3150: LD_EXP 32
3154: PPUSH
3155: LD_STRING D3Fbb-JMM-1
3157: PPUSH
3158: CALL_OW 88
// result := 22 ;
3162: LD_ADDR_VAR 0 1
3166: PUSH
3167: LD_INT 22
3169: ST_TO_ADDR
// end ; end ; 3 :
3170: GO 3204
3172: LD_INT 3
3174: DOUBLE
3175: EQUAL
3176: IFTRUE 3180
3178: GO 3203
3180: POP
// begin Say ( JMM , D3Fc-JMM-1 ) ;
3181: LD_EXP 32
3185: PPUSH
3186: LD_STRING D3Fc-JMM-1
3188: PPUSH
3189: CALL_OW 88
// result := 3 ;
3193: LD_ADDR_VAR 0 1
3197: PUSH
3198: LD_INT 3
3200: ST_TO_ADDR
// end ; end ;
3201: GO 3204
3203: POP
// end ;
3204: LD_VAR 0 1
3208: RET
// export function fuspech1 ; begin
3209: LD_INT 0
3211: PPUSH
// DialogueOn ;
3212: CALL_OW 6
// Say ( JMM , D4Fa-JMM-1 ) ;
3216: LD_EXP 32
3220: PPUSH
3221: LD_STRING D4Fa-JMM-1
3223: PPUSH
3224: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3228: LD_EXP 1
3232: PPUSH
3233: LD_INT 6
3235: PPUSH
3236: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3240: LD_INT 111
3242: PPUSH
3243: LD_INT 123
3245: PPUSH
3246: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3250: LD_INT 32
3252: PPUSH
3253: LD_INT 39
3255: PPUSH
3256: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
3260: LD_EXP 36
3264: PPUSH
3265: LD_STRING D4Fa-Frank-1
3267: PPUSH
3268: CALL_OW 88
// wait ( 0 0$3 ) ;
3272: LD_INT 105
3274: PPUSH
3275: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3279: LD_EXP 1
3283: PPUSH
3284: LD_INT 7
3286: PPUSH
3287: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3291: LD_INT 122
3293: PPUSH
3294: LD_INT 68
3296: PPUSH
3297: CALL_OW 86
// Say ( JMM , D4Fa-JMM-2 ) ;
3301: LD_EXP 32
3305: PPUSH
3306: LD_STRING D4Fa-JMM-2
3308: PPUSH
3309: CALL_OW 88
// Say ( Frank , D4Fa-Frank-2 ) ;
3313: LD_EXP 36
3317: PPUSH
3318: LD_STRING D4Fa-Frank-2
3320: PPUSH
3321: CALL_OW 88
// DialogueOff ;
3325: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3329: LD_EXP 36
3333: PUSH
3334: EMPTY
3335: LIST
3336: PPUSH
3337: CALL_OW 85
// end ;
3341: LD_VAR 0 1
3345: RET
// export function fuspech2 ; begin
3346: LD_INT 0
3348: PPUSH
// DialogueOn ;
3349: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_INT 8
3360: PPUSH
3361: CALL_OW 332
// if IsOK ( Frank ) then
3365: LD_EXP 36
3369: PPUSH
3370: CALL_OW 302
3374: IFFALSE 3468
// begin Say ( Frank , D4Fb-Frank-1 ) ;
3376: LD_EXP 36
3380: PPUSH
3381: LD_STRING D4Fb-Frank-1
3383: PPUSH
3384: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
3388: LD_EXP 32
3392: PPUSH
3393: LD_STRING D4Fb-JMM-1
3395: PPUSH
3396: CALL_OW 88
// pom = GetPeople ( sex_female , class_scientistic , [ ] ) ;
3400: LD_ADDR_LOC 2
3404: PUSH
3405: LD_INT 2
3407: PPUSH
3408: LD_INT 4
3410: PPUSH
3411: EMPTY
3412: PPUSH
3413: CALL 6536 0 3
3417: ST_TO_ADDR
// if pom > 0 then
3418: LD_LOC 2
3422: PUSH
3423: LD_INT 0
3425: GREATER
3426: IFFALSE 3444
// Say ( pom [ 1 ] , D4Fb-FSci1-1 ) ;
3428: LD_LOC 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_STRING D4Fb-FSci1-1
3439: PPUSH
3440: CALL_OW 88
// Say ( Frank , D4Fb-Frank-2 ) ;
3444: LD_EXP 36
3448: PPUSH
3449: LD_STRING D4Fb-Frank-2
3451: PPUSH
3452: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
3456: LD_EXP 32
3460: PPUSH
3461: LD_STRING D4Fb-JMM-2
3463: PPUSH
3464: CALL_OW 88
// end ; DialogueOff ;
3468: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3472: LD_EXP 36
3476: PUSH
3477: EMPTY
3478: LIST
3479: PPUSH
3480: CALL_OW 85
// end ;
3484: LD_VAR 0 1
3488: RET
// export function fuspech3 ; begin
3489: LD_INT 0
3491: PPUSH
// end ;
3492: LD_VAR 0 1
3496: RET
// export function dialog_yamoko ; begin
3497: LD_INT 0
3499: PPUSH
// Say ( Yamoko , D3Y-Yam-1 ) ;
3500: LD_EXP 39
3504: PPUSH
3505: LD_STRING D3Y-Yam-1
3507: PPUSH
3508: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
3512: LD_EXP 32
3516: PPUSH
3517: LD_STRING D3Y-JMM-1
3519: PPUSH
3520: CALL_OW 88
// Say ( Yamoko , D3Y-Yam-2 ) ;
3524: LD_EXP 39
3528: PPUSH
3529: LD_STRING D3Y-Yam-2
3531: PPUSH
3532: CALL_OW 88
// result = Query ( QYamoko ) ;
3536: LD_ADDR_VAR 0 1
3540: PUSH
3541: LD_STRING QYamoko
3543: PPUSH
3544: CALL_OW 97
3548: ST_TO_ADDR
// if result = 1 then
3549: LD_VAR 0 1
3553: PUSH
3554: LD_INT 1
3556: EQUAL
3557: IFFALSE 3585
// begin Say ( JMM , D3Ya-JMM-1 ) ;
3559: LD_EXP 32
3563: PPUSH
3564: LD_STRING D3Ya-JMM-1
3566: PPUSH
3567: CALL_OW 88
// Say ( Yamoko , D3Ya-Yam-1 ) ;
3571: LD_EXP 39
3575: PPUSH
3576: LD_STRING D3Ya-Yam-1
3578: PPUSH
3579: CALL_OW 88
// end else
3583: GO 3597
// Say ( JMM , D3Yb-JMM-1 ) ;
3585: LD_EXP 32
3589: PPUSH
3590: LD_STRING D3Yb-JMM-1
3592: PPUSH
3593: CALL_OW 88
// end ;
3597: LD_VAR 0 1
3601: RET
// export function yuspech1 ; begin
3602: LD_INT 0
3604: PPUSH
// DialogueOn ;
3605: CALL_OW 6
// Say ( Yamoko , D4Ya-Yam-1 ) ;
3609: LD_EXP 39
3613: PPUSH
3614: LD_STRING D4Ya-Yam-1
3616: PPUSH
3617: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
3621: LD_EXP 32
3625: PPUSH
3626: LD_STRING D4Ya-JMM-1
3628: PPUSH
3629: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3633: LD_EXP 1
3637: PPUSH
3638: LD_INT 6
3640: PPUSH
3641: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3645: LD_INT 111
3647: PPUSH
3648: LD_INT 123
3650: PPUSH
3651: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3655: LD_INT 32
3657: PPUSH
3658: LD_INT 39
3660: PPUSH
3661: CALL_OW 84
// Say ( Yamoko , D4Ya-Yam-2 ) ;
3665: LD_EXP 39
3669: PPUSH
3670: LD_STRING D4Ya-Yam-2
3672: PPUSH
3673: CALL_OW 88
// wait ( 0 0$3 ) ;
3677: LD_INT 105
3679: PPUSH
3680: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3684: LD_EXP 1
3688: PPUSH
3689: LD_INT 7
3691: PPUSH
3692: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3696: LD_INT 122
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
3706: LD_EXP 32
3710: PPUSH
3711: LD_STRING D4Ya-JMM-2
3713: PPUSH
3714: CALL_OW 88
// Say ( Yamoko , D4Ya-Yam-3 ) ;
3718: LD_EXP 39
3722: PPUSH
3723: LD_STRING D4Ya-Yam-3
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3734: LD_EXP 39
3738: PUSH
3739: EMPTY
3740: LIST
3741: PPUSH
3742: CALL_OW 85
// end ;
3746: LD_VAR 0 1
3750: RET
// export function yuspech2 ; begin
3751: LD_INT 0
3753: PPUSH
// DialogueOn ;
3754: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3758: LD_EXP 1
3762: PPUSH
3763: LD_INT 8
3765: PPUSH
3766: CALL_OW 332
// if IsOK ( Yamoko ) then
3770: LD_EXP 39
3774: PPUSH
3775: CALL_OW 302
3779: IFFALSE 3829
// begin Say ( Yamoko , D4Yc-Yam-1 ) ;
3781: LD_EXP 39
3785: PPUSH
3786: LD_STRING D4Yc-Yam-1
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D4Yc-JMM-1 ) ;
3793: LD_EXP 32
3797: PPUSH
3798: LD_STRING D4Yc-JMM-1
3800: PPUSH
3801: CALL_OW 88
// Say ( Yamoko , D4Yc-Yam-2 ) ;
3805: LD_EXP 39
3809: PPUSH
3810: LD_STRING D4Yc-Yam-2
3812: PPUSH
3813: CALL_OW 88
// Say ( JMM , D4Yc-JMM-2 ) ;
3817: LD_EXP 32
3821: PPUSH
3822: LD_STRING D4Yc-JMM-2
3824: PPUSH
3825: CALL_OW 88
// end ; DialogueOff ;
3829: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3833: LD_EXP 39
3837: PUSH
3838: EMPTY
3839: LIST
3840: PPUSH
3841: CALL_OW 85
// end ;
3845: LD_VAR 0 1
3849: RET
// export function yuspech3 ; begin
3850: LD_INT 0
3852: PPUSH
// end ;
3853: LD_VAR 0 1
3857: RET
// every 0 0$1 trigger See ( You , A2_kam1 ) or See ( You , A2_kam2 ) or See ( You , A2_kam3 ) do
3858: LD_EXP 1
3862: PPUSH
3863: LD_INT 86
3865: PPUSH
3866: CALL_OW 292
3870: PUSH
3871: LD_EXP 1
3875: PPUSH
3876: LD_INT 85
3878: PPUSH
3879: CALL_OW 292
3883: OR
3884: PUSH
3885: LD_EXP 1
3889: PPUSH
3890: LD_INT 84
3892: PPUSH
3893: CALL_OW 292
3897: OR
3898: IFFALSE 4216
3900: GO 3902
3902: DISABLE
// begin while kecy do
3903: LD_LOC 7
3907: IFFALSE 3918
// wait ( 0 0$1 ) ;
3909: LD_INT 35
3911: PPUSH
3912: CALL_OW 67
3916: GO 3903
// kecy = true ;
3918: LD_ADDR_LOC 7
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// DialogueOn ;
3926: CALL_OW 6
// if See ( You , A2_kam1 ) then
3930: LD_EXP 1
3934: PPUSH
3935: LD_INT 86
3937: PPUSH
3938: CALL_OW 292
3942: IFFALSE 3953
// CenterNowOnUnits ( A2_kam1 ) else
3944: LD_INT 86
3946: PPUSH
3947: CALL_OW 87
3951: GO 4017
// if See ( You , A2_kam2 ) then
3953: LD_EXP 1
3957: PPUSH
3958: LD_INT 85
3960: PPUSH
3961: CALL_OW 292
3965: IFFALSE 3976
// CenterNowOnUnits ( A2_kam2 ) else
3967: LD_INT 85
3969: PPUSH
3970: CALL_OW 87
3974: GO 4017
// if See ( You , A2_kam3 ) then
3976: LD_EXP 1
3980: PPUSH
3981: LD_INT 84
3983: PPUSH
3984: CALL_OW 292
3988: IFFALSE 3999
// CenterNowOnUnits ( A2_kam3 ) else
3990: LD_INT 84
3992: PPUSH
3993: CALL_OW 87
3997: GO 4017
// CenterNowOnUnits ( [ A2_kam1 , A2_kam2 , A2_kam3 ] ) ;
3999: LD_INT 86
4001: PUSH
4002: LD_INT 85
4004: PUSH
4005: LD_INT 84
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 87
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4017: LD_ADDR_LOC 2
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: LD_EXP 32
4032: PUSH
4033: EMPTY
4034: LIST
4035: PPUSH
4036: CALL 6536 0 3
4040: ST_TO_ADDR
// if pom < 0 then
4041: LD_LOC 2
4045: PUSH
4046: LD_INT 0
4048: LESS
4049: IFFALSE 4062
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4051: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4053: PPUSH
4054: CALL_OW 100
// konec_mise ;
4058: CALL 669 0 0
// end ; case pom of 0 :
4062: LD_LOC 2
4066: PUSH
4067: LD_INT 0
4069: DOUBLE
4070: EQUAL
4071: IFTRUE 4075
4073: GO 4098
4075: POP
// begin pom = JMM ;
4076: LD_ADDR_LOC 2
4080: PUSH
4081: LD_EXP 32
4085: ST_TO_ADDR
// pom1 = JMM ;
4086: LD_ADDR_LOC 3
4090: PUSH
4091: LD_EXP 32
4095: ST_TO_ADDR
// end ; 1 :
4096: GO 4162
4098: LD_INT 1
4100: DOUBLE
4101: EQUAL
4102: IFTRUE 4106
4104: GO 4133
4106: POP
// begin pom = pom [ 1 ] ;
4107: LD_ADDR_LOC 2
4111: PUSH
4112: LD_LOC 2
4116: PUSH
4117: LD_INT 1
4119: ARRAY
4120: ST_TO_ADDR
// pom1 = JMM ;
4121: LD_ADDR_LOC 3
4125: PUSH
4126: LD_EXP 32
4130: ST_TO_ADDR
// end ; else
4131: GO 4162
4133: POP
// begin pom1 = pom [ 2 ] ;
4134: LD_ADDR_LOC 3
4138: PUSH
4139: LD_LOC 2
4143: PUSH
4144: LD_INT 2
4146: ARRAY
4147: ST_TO_ADDR
// pom = pom [ 1 ] ;
4148: LD_ADDR_LOC 2
4152: PUSH
4153: LD_LOC 2
4157: PUSH
4158: LD_INT 1
4160: ARRAY
4161: ST_TO_ADDR
// end ; end ; DialogueOn ;
4162: CALL_OW 6
// Say ( pom , D5b-Sol1-1 ) ;
4166: LD_LOC 2
4170: PPUSH
4171: LD_STRING D5b-Sol1-1
4173: PPUSH
4174: CALL_OW 88
// Say ( pom1 , D5b-Sol2-1 ) ;
4178: LD_LOC 3
4182: PPUSH
4183: LD_STRING D5b-Sol2-1
4185: PPUSH
4186: CALL_OW 88
// DialogueOff ;
4190: CALL_OW 7
// if not disable_kecy_5D then
4194: LD_LOC 9
4198: NOT
4199: IFFALSE 4204
// enable ( 1 ) ;
4201: LD_INT 1
4203: ENABLE_MARKED
// DialogueOff ;
4204: CALL_OW 7
// kecy = false ;
4208: LD_ADDR_LOC 7
4212: PUSH
4213: LD_INT 0
4215: ST_TO_ADDR
// end ;
4216: END
// on UnitKamikazed ( un ) do begin if not KAMI then
4217: LD_LOC 8
4221: NOT
4222: IFFALSE 4418
// begin KAMI = true ;
4224: LD_ADDR_LOC 8
4228: PUSH
4229: LD_INT 1
4231: ST_TO_ADDR
// while kecy do
4232: LD_LOC 7
4236: IFFALSE 4247
// wait ( 0 0$1 ) ;
4238: LD_INT 35
4240: PPUSH
4241: CALL_OW 67
4245: GO 4232
// kecy = true ;
4247: LD_ADDR_LOC 7
4251: PUSH
4252: LD_INT 1
4254: ST_TO_ADDR
// wait ( 0 0$1.5 ) ;
4255: LD_INT 52
4257: PPUSH
4258: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4262: LD_ADDR_LOC 2
4266: PUSH
4267: LD_INT 22
4269: PUSH
4270: LD_EXP 1
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PUSH
4279: LD_INT 21
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PPUSH
4293: CALL_OW 69
4297: ST_TO_ADDR
// pom = pom diff [ JMM ] ;
4298: LD_ADDR_LOC 2
4302: PUSH
4303: LD_LOC 2
4307: PUSH
4308: LD_EXP 32
4312: PUSH
4313: EMPTY
4314: LIST
4315: DIFF
4316: ST_TO_ADDR
// if pom > 0 then
4317: LD_LOC 2
4321: PUSH
4322: LD_INT 0
4324: GREATER
4325: IFFALSE 4400
// begin DialogueOn ;
4327: CALL_OW 6
// if GetSex ( pom [ 1 ] ) = sex_male then
4331: LD_LOC 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: CALL_OW 258
4344: PUSH
4345: LD_INT 1
4347: EQUAL
4348: IFFALSE 4368
// Say ( pom [ 1 ] , D5c-Sol1-1 ) else
4350: LD_LOC 2
4354: PUSH
4355: LD_INT 1
4357: ARRAY
4358: PPUSH
4359: LD_STRING D5c-Sol1-1
4361: PPUSH
4362: CALL_OW 88
4366: GO 4384
// Say ( pom [ 1 ] , D5c-FSol1-1 ) ;
4368: LD_LOC 2
4372: PUSH
4373: LD_INT 1
4375: ARRAY
4376: PPUSH
4377: LD_STRING D5c-FSol1-1
4379: PPUSH
4380: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
4384: LD_EXP 32
4388: PPUSH
4389: LD_STRING D5c-JMM-1
4391: PPUSH
4392: CALL_OW 88
// DialogueOff ;
4396: CALL_OW 7
// end ; if not disable_kecy_5D then
4400: LD_LOC 9
4404: NOT
4405: IFFALSE 4410
// enable ( 1 ) ;
4407: LD_INT 1
4409: ENABLE_MARKED
// kecy = false ;
4410: LD_ADDR_LOC 7
4414: PUSH
4415: LD_INT 0
4417: ST_TO_ADDR
// end ; enable ;
4418: ENABLE
// end ;
4419: PPOPN 1
4421: END
// every 0 0$1 trigger See ( You , A2_op1 ) or See ( You , A2_op2 ) or See ( You , A2_op3 ) do
4422: LD_EXP 1
4426: PPUSH
4427: LD_INT 89
4429: PPUSH
4430: CALL_OW 292
4434: PUSH
4435: LD_EXP 1
4439: PPUSH
4440: LD_INT 90
4442: PPUSH
4443: CALL_OW 292
4447: OR
4448: PUSH
4449: LD_EXP 1
4453: PPUSH
4454: LD_INT 91
4456: PPUSH
4457: CALL_OW 292
4461: OR
4462: IFFALSE 4761
4464: GO 4466
4466: DISABLE
// begin while kecy do
4467: LD_LOC 7
4471: IFFALSE 4482
// wait ( 0 0$1 ) ;
4473: LD_INT 35
4475: PPUSH
4476: CALL_OW 67
4480: GO 4467
// kecy = true ;
4482: LD_ADDR_LOC 7
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// CenterOnUnits ( [ A2_op1 , A2_op2 , A2_op3 ] ) ;
4490: LD_INT 89
4492: PUSH
4493: LD_INT 90
4495: PUSH
4496: LD_INT 91
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4508: LD_ADDR_LOC 2
4512: PUSH
4513: LD_INT 1
4515: PPUSH
4516: LD_INT 1
4518: PPUSH
4519: LD_EXP 32
4523: PUSH
4524: EMPTY
4525: LIST
4526: PPUSH
4527: CALL 6536 0 3
4531: ST_TO_ADDR
// if pom < 0 then
4532: LD_LOC 2
4536: PUSH
4537: LD_INT 0
4539: LESS
4540: IFFALSE 4553
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4542: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4544: PPUSH
4545: CALL_OW 100
// konec_mise ;
4549: CALL 669 0 0
// end ; case pom of 0 :
4553: LD_LOC 2
4557: PUSH
4558: LD_INT 0
4560: DOUBLE
4561: EQUAL
4562: IFTRUE 4566
4564: GO 4589
4566: POP
// begin pom = JMM ;
4567: LD_ADDR_LOC 2
4571: PUSH
4572: LD_EXP 32
4576: ST_TO_ADDR
// pom1 = JMM ;
4577: LD_ADDR_LOC 3
4581: PUSH
4582: LD_EXP 32
4586: ST_TO_ADDR
// end ; 1 :
4587: GO 4653
4589: LD_INT 1
4591: DOUBLE
4592: EQUAL
4593: IFTRUE 4597
4595: GO 4624
4597: POP
// begin pom = pom [ 1 ] ;
4598: LD_ADDR_LOC 2
4602: PUSH
4603: LD_LOC 2
4607: PUSH
4608: LD_INT 1
4610: ARRAY
4611: ST_TO_ADDR
// pom1 = JMM ;
4612: LD_ADDR_LOC 3
4616: PUSH
4617: LD_EXP 32
4621: ST_TO_ADDR
// end ; else
4622: GO 4653
4624: POP
// begin pom1 = pom [ 2 ] ;
4625: LD_ADDR_LOC 3
4629: PUSH
4630: LD_LOC 2
4634: PUSH
4635: LD_INT 2
4637: ARRAY
4638: ST_TO_ADDR
// pom = pom [ 1 ] ;
4639: LD_ADDR_LOC 2
4643: PUSH
4644: LD_LOC 2
4648: PUSH
4649: LD_INT 1
4651: ARRAY
4652: ST_TO_ADDR
// end ; end ; DialogueOn ;
4653: CALL_OW 6
// if GetSex ( pom ) = sex_male then
4657: LD_LOC 2
4661: PPUSH
4662: CALL_OW 258
4666: PUSH
4667: LD_INT 1
4669: EQUAL
4670: IFFALSE 4686
// Say ( pom , D5a-Sol1-1 ) else
4672: LD_LOC 2
4676: PPUSH
4677: LD_STRING D5a-Sol1-1
4679: PPUSH
4680: CALL_OW 88
4684: GO 4698
// Say ( pom , D5a-FSol1-1 ) ;
4686: LD_LOC 2
4690: PPUSH
4691: LD_STRING D5a-FSol1-1
4693: PPUSH
4694: CALL_OW 88
// if GetSex ( pom1 ) = sex_male then
4698: LD_LOC 3
4702: PPUSH
4703: CALL_OW 258
4707: PUSH
4708: LD_INT 1
4710: EQUAL
4711: IFFALSE 4727
// Say ( pom1 , D5a-Sol2-1 ) else
4713: LD_LOC 3
4717: PPUSH
4718: LD_STRING D5a-Sol2-1
4720: PPUSH
4721: CALL_OW 88
4725: GO 4739
// Say ( pom1 , D5a-FSol2-1 ) ;
4727: LD_LOC 3
4731: PPUSH
4732: LD_STRING D5a-FSol2-1
4734: PPUSH
4735: CALL_OW 88
// DialogueOff ;
4739: CALL_OW 7
// if not disable_kecy_5D then
4743: LD_LOC 9
4747: NOT
4748: IFFALSE 4753
// enable ( 1 ) ;
4750: LD_INT 1
4752: ENABLE_MARKED
// kecy = false ;
4753: LD_ADDR_LOC 7
4757: PUSH
4758: LD_INT 0
4760: ST_TO_ADDR
// end ;
4761: END
// every 0 0$1 trigger not disable_kecy_5D marked 1 do
4762: LD_LOC 9
4766: NOT
4767: IFFALSE 4960
4769: GO 4771
4771: DISABLE
// begin while kecy do
4772: LD_LOC 7
4776: IFFALSE 4787
// wait ( 0 0$1 ) ;
4778: LD_INT 35
4780: PPUSH
4781: CALL_OW 67
4785: GO 4772
// kecy = true ;
4787: LD_ADDR_LOC 7
4791: PUSH
4792: LD_INT 1
4794: ST_TO_ADDR
// if IsOK ( Lisa ) then
4795: LD_EXP 37
4799: PPUSH
4800: CALL_OW 302
4804: IFFALSE 4820
// Say ( Lisa , D5d-Lisa-1 ) else
4806: LD_EXP 37
4810: PPUSH
4811: LD_STRING D5d-Lisa-1
4813: PPUSH
4814: CALL_OW 88
4818: GO 4932
// if IsOK ( Cyrus ) then
4820: LD_EXP 40
4824: PPUSH
4825: CALL_OW 302
4829: IFFALSE 4845
// Say ( Cyrus , D5d-Cyrus-1 ) else
4831: LD_EXP 40
4835: PPUSH
4836: LD_STRING D5d-Cyrus-1
4838: PPUSH
4839: CALL_OW 88
4843: GO 4932
// if IsOK ( Gary ) then
4845: LD_EXP 34
4849: PPUSH
4850: CALL_OW 302
4854: IFFALSE 4870
// Say ( Gary , D5d-Gary-1 ) else
4856: LD_EXP 34
4860: PPUSH
4861: LD_STRING D5d-Gary-1
4863: PPUSH
4864: CALL_OW 88
4868: GO 4932
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4870: LD_ADDR_LOC 2
4874: PUSH
4875: LD_INT 22
4877: PUSH
4878: LD_EXP 1
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 21
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PPUSH
4901: CALL_OW 69
4905: ST_TO_ADDR
// if pom > 0 then
4906: LD_LOC 2
4910: PUSH
4911: LD_INT 0
4913: GREATER
4914: IFFALSE 4932
// Say ( pom [ 1 ] , D5d-Sol1-1 ) ;
4916: LD_LOC 2
4920: PUSH
4921: LD_INT 1
4923: ARRAY
4924: PPUSH
4925: LD_STRING D5d-Sol1-1
4927: PPUSH
4928: CALL_OW 88
// end ; Say ( JMM , D5d-JMM-1 ) ;
4932: LD_EXP 32
4936: PPUSH
4937: LD_STRING D5d-JMM-1
4939: PPUSH
4940: CALL_OW 88
// disable_kecy_5D = true ;
4944: LD_ADDR_LOC 9
4948: PUSH
4949: LD_INT 1
4951: ST_TO_ADDR
// kecy = false ;
4952: LD_ADDR_LOC 7
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// end ;
4960: END
// every 0 0$3 trigger GetSide ( A2_dep ) = You or IsDead ( A2_dep ) do var sci1 ;
4961: LD_INT 46
4963: PPUSH
4964: CALL_OW 255
4968: PUSH
4969: LD_EXP 1
4973: EQUAL
4974: PUSH
4975: LD_INT 46
4977: PPUSH
4978: CALL_OW 301
4982: OR
4983: IFFALSE 5188
4985: GO 4987
4987: DISABLE
4988: LD_INT 0
4990: PPUSH
// begin wait ( 0 0$1 ) ;
4991: LD_INT 35
4993: PPUSH
4994: CALL_OW 67
// CreateResourcesArea ( mat_artefact , 5 , Art_zone , false ) ;
4998: LD_INT 4
5000: PPUSH
5001: LD_INT 5
5003: PPUSH
5004: LD_INT 31
5006: PPUSH
5007: LD_INT 0
5009: PPUSH
5010: CALL_OW 59
// PlaceSeeing ( 16 , 9 , You , - 5 ) ;
5014: LD_INT 16
5016: PPUSH
5017: LD_INT 9
5019: PPUSH
5020: LD_EXP 1
5024: PPUSH
5025: LD_INT 5
5027: NEG
5028: PPUSH
5029: CALL_OW 330
// wait ( 0 0$1 ) ;
5033: LD_INT 35
5035: PPUSH
5036: CALL_OW 67
// DialogueOn ;
5040: CALL_OW 6
// CenterOnXY ( 17 , 10 ) ;
5044: LD_INT 17
5046: PPUSH
5047: LD_INT 10
5049: PPUSH
5050: CALL_OW 84
// pom = GetPeople ( sex_male , class_scientistic , [ JMM ] ) ;
5054: LD_ADDR_LOC 2
5058: PUSH
5059: LD_INT 1
5061: PPUSH
5062: LD_INT 4
5064: PPUSH
5065: LD_EXP 32
5069: PUSH
5070: EMPTY
5071: LIST
5072: PPUSH
5073: CALL 6536 0 3
5077: ST_TO_ADDR
// if pom > 0 then
5078: LD_LOC 2
5082: PUSH
5083: LD_INT 0
5085: GREATER
5086: IFFALSE 5104
// sci1 = pom [ 1 ] else
5088: LD_ADDR_VAR 0 1
5092: PUSH
5093: LD_LOC 2
5097: PUSH
5098: LD_INT 1
5100: ARRAY
5101: ST_TO_ADDR
5102: GO 5106
// exit ;
5104: GO 5188
// Say ( sci1 , D6-Sci1-1 ) ;
5106: LD_VAR 0 1
5110: PPUSH
5111: LD_STRING D6-Sci1-1
5113: PPUSH
5114: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5118: LD_EXP 32
5122: PPUSH
5123: LD_STRING D6-JMM-1
5125: PPUSH
5126: CALL_OW 88
// Say ( sci1 , D6-Sci1-2 ) ;
5130: LD_VAR 0 1
5134: PPUSH
5135: LD_STRING D6-Sci1-2
5137: PPUSH
5138: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5142: LD_EXP 32
5146: PPUSH
5147: LD_STRING D6-JMM-2
5149: PPUSH
5150: CALL_OW 88
// DialogueOff ;
5154: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
5158: LD_STRING M3
5160: PPUSH
5161: CALL_OW 337
// RemoveSeeing ( 16 , 9 , You ) ;
5165: LD_INT 16
5167: PPUSH
5168: LD_INT 9
5170: PPUSH
5171: LD_EXP 1
5175: PPUSH
5176: CALL_OW 331
// A2_dobyta = true ;
5180: LD_ADDR_EXP 29
5184: PUSH
5185: LD_INT 1
5187: ST_TO_ADDR
// end ;
5188: PPOPN 1
5190: END
// every 0 0$20 trigger A2_dobyta do
5191: LD_EXP 29
5195: IFFALSE 5534
5197: GO 5199
5199: DISABLE
// begin if A1_dobyta and A3_dobyta then
5200: LD_EXP 28
5204: PUSH
5205: LD_EXP 30
5209: AND
5210: IFFALSE 5214
// exit ;
5212: GO 5534
// wait ( 0 0$10 ) ;
5214: LD_INT 350
5216: PPUSH
5217: CALL_OW 67
// if not IsOK ( A3_solop ) then
5221: LD_INT 102
5223: PPUSH
5224: CALL_OW 302
5228: NOT
5229: IFFALSE 5233
// exit ;
5231: GO 5534
// DialogueOn ;
5233: CALL_OW 6
// pom = GetPeople ( sex_male , class_soldier , [ JMM , Cyrus , Gary , Bobby ] ) ;
5237: LD_ADDR_LOC 2
5241: PUSH
5242: LD_INT 1
5244: PPUSH
5245: LD_INT 1
5247: PPUSH
5248: LD_EXP 32
5252: PUSH
5253: LD_EXP 40
5257: PUSH
5258: LD_EXP 34
5262: PUSH
5263: LD_EXP 35
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL 6536 0 3
5278: ST_TO_ADDR
// if pom = 0 then
5279: LD_LOC 2
5283: PUSH
5284: LD_INT 0
5286: EQUAL
5287: IFFALSE 5313
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5289: LD_ADDR_LOC 2
5293: PUSH
5294: LD_INT 1
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_EXP 32
5304: PUSH
5305: EMPTY
5306: LIST
5307: PPUSH
5308: CALL 6536 0 3
5312: ST_TO_ADDR
// if pom = 0 then
5313: LD_LOC 2
5317: PUSH
5318: LD_INT 0
5320: EQUAL
5321: IFFALSE 5335
// pom = JMM else
5323: LD_ADDR_LOC 2
5327: PUSH
5328: LD_EXP 32
5332: ST_TO_ADDR
5333: GO 5349
// pom = pom [ 1 ] ;
5335: LD_ADDR_LOC 2
5339: PUSH
5340: LD_LOC 2
5344: PUSH
5345: LD_INT 1
5347: ARRAY
5348: ST_TO_ADDR
// Say ( pom , D7-Sol1-1 ) ;
5349: LD_LOC 2
5353: PPUSH
5354: LD_STRING D7-Sol1-1
5356: PPUSH
5357: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
5361: LD_EXP 32
5365: PPUSH
5366: LD_STRING D7-JMM-1
5368: PPUSH
5369: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-1 ) ;
5373: LD_INT 102
5375: PPUSH
5376: LD_STRING D7-Ar1-1
5378: PPUSH
5379: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
5383: LD_EXP 32
5387: PPUSH
5388: LD_STRING D7-JMM-2
5390: PPUSH
5391: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-2 ) ;
5395: LD_INT 102
5397: PPUSH
5398: LD_STRING D7-Ar1-2
5400: PPUSH
5401: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
5405: LD_EXP 32
5409: PPUSH
5410: LD_STRING D7-JMM-3
5412: PPUSH
5413: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-3 ) ;
5417: LD_INT 102
5419: PPUSH
5420: LD_STRING D7-Ar1-3
5422: PPUSH
5423: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
5427: LD_EXP 32
5431: PPUSH
5432: LD_STRING D7-JMM-4
5434: PPUSH
5435: CALL_OW 88
// CenterOnXY ( 126 , 93 ) ;
5439: LD_INT 126
5441: PPUSH
5442: LD_INT 93
5444: PPUSH
5445: CALL_OW 84
// RevealFogArea ( You , Baziny ) ;
5449: LD_EXP 1
5453: PPUSH
5454: LD_INT 12
5456: PPUSH
5457: CALL_OW 332
// SayRadio ( A3_solop , D7-Ar1-4 ) ;
5461: LD_INT 102
5463: PPUSH
5464: LD_STRING D7-Ar1-4
5466: PPUSH
5467: CALL_OW 94
// pom = Query ( QCameras ) ;
5471: LD_ADDR_LOC 2
5475: PUSH
5476: LD_STRING QCameras
5478: PPUSH
5479: CALL_OW 97
5483: ST_TO_ADDR
// if pom = 1 then
5484: LD_LOC 2
5488: PUSH
5489: LD_INT 1
5491: EQUAL
5492: IFFALSE 5521
// begin oposoldier = 1 ;
5494: LD_ADDR_EXP 46
5498: PUSH
5499: LD_INT 1
5501: ST_TO_ADDR
// ChangeMissionObjectives ( MCar ) ;
5502: LD_STRING MCar
5504: PPUSH
5505: CALL_OW 337
// SetAreaMapShow ( baziny , 1 ) ;
5509: LD_INT 12
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: CALL_OW 424
// end else
5519: GO 5530
// oposoldier = - 1 ;
5521: LD_ADDR_EXP 46
5525: PUSH
5526: LD_INT 1
5528: NEG
5529: ST_TO_ADDR
// DialogueOff ;
5530: CALL_OW 7
// end ;
5534: END
// export function dialog_kamery ; begin
5535: LD_INT 0
5537: PPUSH
// if not IsOK ( A3_solop ) then
5538: LD_INT 102
5540: PPUSH
5541: CALL_OW 302
5545: NOT
5546: IFFALSE 5550
// exit ;
5548: GO 5652
// Say ( A3_solop , D7a-Ar1-1 ) ;
5550: LD_INT 102
5552: PPUSH
5553: LD_STRING D7a-Ar1-1
5555: PPUSH
5556: CALL_OW 88
// HiddenCamera ( 87 , 3 , You ) ;
5560: LD_INT 87
5562: PPUSH
5563: LD_INT 3
5565: PPUSH
5566: LD_EXP 1
5570: PPUSH
5571: CALL_OW 244
// HiddenCamera ( 105 , 39 , You ) ;
5575: LD_INT 105
5577: PPUSH
5578: LD_INT 39
5580: PPUSH
5581: LD_EXP 1
5585: PPUSH
5586: CALL_OW 244
// HiddenCamera ( 134 , 56 , You ) ;
5590: LD_INT 134
5592: PPUSH
5593: LD_INT 56
5595: PPUSH
5596: LD_EXP 1
5600: PPUSH
5601: CALL_OW 244
// HiddenCamera ( 122 , 51 , You ) ;
5605: LD_INT 122
5607: PPUSH
5608: LD_INT 51
5610: PPUSH
5611: LD_EXP 1
5615: PPUSH
5616: CALL_OW 244
// HiddenCamera ( 91 , 8 , You ) ;
5620: LD_INT 91
5622: PPUSH
5623: LD_INT 8
5625: PPUSH
5626: LD_EXP 1
5630: PPUSH
5631: CALL_OW 244
// ChangeMissionObjectives ( MCarOut ) ;
5635: LD_STRING MCarOut
5637: PPUSH
5638: CALL_OW 337
// SetAreaMapShow ( baziny , 0 ) ;
5642: LD_INT 12
5644: PPUSH
5645: LD_INT 0
5647: PPUSH
5648: CALL_OW 424
// end ;
5652: LD_VAR 0 1
5656: RET
// every 1 1$0 do
5657: GO 5659
5659: DISABLE
// begin wait ( timelimit [ difficulty ] ) ;
5660: LD_EXP 50
5664: PUSH
5665: LD_OWVAR 67
5669: ARRAY
5670: PPUSH
5671: CALL_OW 67
// InGameOn ;
5675: CALL_OW 8
// Say ( Powell , D9-Pow-1 ) ;
5679: LD_EXP 33
5683: PPUSH
5684: LD_STRING D9-Pow-1
5686: PPUSH
5687: CALL_OW 88
// InGameOff ;
5691: CALL_OW 9
// wait ( 10 10$0 ) ;
5695: LD_INT 21000
5697: PPUSH
5698: CALL_OW 67
// DialogueOn ;
5702: CALL_OW 6
// Say ( Powell , D9a-Pow-1 ) ;
5706: LD_EXP 33
5710: PPUSH
5711: LD_STRING D9a-Pow-1
5713: PPUSH
5714: CALL_OW 88
// end_of_mission_time ;
5718: CALL 462 0 0
// end ;
5722: END
// every 0 0$3 do
5723: GO 5725
5725: DISABLE
// begin pom1 = false ;
5726: LD_ADDR_LOC 3
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// pom = [ A3_are1 , A3_are2 , A3_are3 , A3_are4 , A3_are5 , A3_are6 , A3_are7 , A3_are8 , A3_are9 ] ;
5734: LD_ADDR_LOC 2
5738: PUSH
5739: LD_INT 23
5741: PUSH
5742: LD_INT 18
5744: PUSH
5745: LD_INT 44
5747: PUSH
5748: LD_INT 19
5750: PUSH
5751: LD_INT 24
5753: PUSH
5754: LD_INT 20
5756: PUSH
5757: LD_INT 21
5759: PUSH
5760: LD_INT 93
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: ST_TO_ADDR
// for i in pom do
5777: LD_ADDR_LOC 1
5781: PUSH
5782: LD_LOC 2
5786: PUSH
5787: FOR_IN
5788: IFFALSE 5816
// if See ( You , i ) then
5790: LD_EXP 1
5794: PPUSH
5795: LD_LOC 1
5799: PPUSH
5800: CALL_OW 292
5804: IFFALSE 5814
// pom1 = true ;
5806: LD_ADDR_LOC 3
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
5814: GO 5787
5816: POP
5817: POP
// if not pom1 then
5818: LD_LOC 3
5822: NOT
5823: IFFALSE 5828
// enable else
5825: ENABLE
5826: GO 6055
// begin if not ( IsOK ( A3_rv1 ) or IsOK ( A3_rv2 ) or IsOK ( A3_rv3 ) ) then
5828: LD_INT 26
5830: PPUSH
5831: CALL_OW 302
5835: PUSH
5836: LD_INT 25
5838: PPUSH
5839: CALL_OW 302
5843: OR
5844: PUSH
5845: LD_INT 27
5847: PPUSH
5848: CALL_OW 302
5852: OR
5853: NOT
5854: IFFALSE 5859
// begin disable ;
5856: DISABLE
// exit ;
5857: GO 6055
// end ; pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) ;
5859: LD_ADDR_LOC 2
5863: PUSH
5864: LD_INT 22
5866: PUSH
5867: LD_EXP 1
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 25
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 69
5894: ST_TO_ADDR
// if pom = 0 then
5895: LD_LOC 2
5899: PUSH
5900: LD_INT 0
5902: EQUAL
5903: IFFALSE 5929
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5905: LD_ADDR_LOC 2
5909: PUSH
5910: LD_INT 1
5912: PPUSH
5913: LD_INT 1
5915: PPUSH
5916: LD_EXP 32
5920: PUSH
5921: EMPTY
5922: LIST
5923: PPUSH
5924: CALL 6536 0 3
5928: ST_TO_ADDR
// if pom = 0 then
5929: LD_LOC 2
5933: PUSH
5934: LD_INT 0
5936: EQUAL
5937: IFFALSE 5957
// pom = GetPeople ( sex_female , class_soldier , [ ] ) ;
5939: LD_ADDR_LOC 2
5943: PUSH
5944: LD_INT 2
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: EMPTY
5951: PPUSH
5952: CALL 6536 0 3
5956: ST_TO_ADDR
// if pom = 0 then
5957: LD_LOC 2
5961: PUSH
5962: LD_INT 0
5964: EQUAL
5965: IFFALSE 5980
// pom = [ JMM ] ;
5967: LD_ADDR_LOC 2
5971: PUSH
5972: LD_EXP 32
5976: PUSH
5977: EMPTY
5978: LIST
5979: ST_TO_ADDR
// if GetSex ( pom [ 1 ] ) = sex_male then
5980: LD_LOC 2
5984: PUSH
5985: LD_INT 1
5987: ARRAY
5988: PPUSH
5989: CALL_OW 258
5993: PUSH
5994: LD_INT 1
5996: EQUAL
5997: IFFALSE 6017
// Say ( pom [ 1 ] , D8-Sol1-1 ) else
5999: LD_LOC 2
6003: PUSH
6004: LD_INT 1
6006: ARRAY
6007: PPUSH
6008: LD_STRING D8-Sol1-1
6010: PPUSH
6011: CALL_OW 88
6015: GO 6033
// Say ( pom [ 1 ] , D8-FSol1-1 ) ;
6017: LD_LOC 2
6021: PUSH
6022: LD_INT 1
6024: ARRAY
6025: PPUSH
6026: LD_STRING D8-FSol1-1
6028: PPUSH
6029: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
6033: LD_EXP 32
6037: PPUSH
6038: LD_STRING D8-JMM-1
6040: PPUSH
6041: CALL_OW 88
// wait ( 0 0$20 ) ;
6045: LD_INT 700
6047: PPUSH
6048: CALL_OW 67
// enable ( 2 ) ;
6052: LD_INT 2
6054: ENABLE_MARKED
// end ; end ;
6055: END
// every 0 0$5 marked 2 do
6056: GO 6058
6058: DISABLE
// begin pom1 = false ;
6059: LD_ADDR_LOC 3
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// pom = [ A3_rv1 , A3_rv2 , A3_rv3 ] ;
6067: LD_ADDR_LOC 2
6071: PUSH
6072: LD_INT 26
6074: PUSH
6075: LD_INT 25
6077: PUSH
6078: LD_INT 27
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: ST_TO_ADDR
// for i in pom do
6086: LD_ADDR_LOC 1
6090: PUSH
6091: LD_LOC 2
6095: PUSH
6096: FOR_IN
6097: IFFALSE 6125
// if See ( You , i ) then
6099: LD_EXP 1
6103: PPUSH
6104: LD_LOC 1
6108: PPUSH
6109: CALL_OW 292
6113: IFFALSE 6123
// pom1 = true ;
6115: LD_ADDR_LOC 3
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
6123: GO 6096
6125: POP
6126: POP
// if not pom1 then
6127: LD_LOC 3
6131: NOT
6132: IFFALSE 6137
// enable else
6134: ENABLE
6135: GO 6402
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) diff JMM ;
6137: LD_ADDR_LOC 2
6141: PUSH
6142: LD_INT 22
6144: PUSH
6145: LD_EXP 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 25
6156: PUSH
6157: LD_INT 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: CALL_OW 69
6172: PUSH
6173: LD_EXP 32
6177: DIFF
6178: ST_TO_ADDR
// if pom = 0 then
6179: LD_LOC 2
6183: PUSH
6184: LD_INT 0
6186: EQUAL
6187: IFFALSE 6213
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
6189: LD_ADDR_LOC 2
6193: PUSH
6194: LD_INT 1
6196: PPUSH
6197: LD_INT 1
6199: PPUSH
6200: LD_EXP 32
6204: PUSH
6205: EMPTY
6206: LIST
6207: PPUSH
6208: CALL 6536 0 3
6212: ST_TO_ADDR
// if pom = 0 then
6213: LD_LOC 2
6217: PUSH
6218: LD_INT 0
6220: EQUAL
6221: IFFALSE 6247
// pom = GetPeople ( sex_female , class_soldier , [ JMM ] ) ;
6223: LD_ADDR_LOC 2
6227: PUSH
6228: LD_INT 2
6230: PPUSH
6231: LD_INT 1
6233: PPUSH
6234: LD_EXP 32
6238: PUSH
6239: EMPTY
6240: LIST
6241: PPUSH
6242: CALL 6536 0 3
6246: ST_TO_ADDR
// if pom = 0 then
6247: LD_LOC 2
6251: PUSH
6252: LD_INT 0
6254: EQUAL
6255: IFFALSE 6299
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) diff JMM ;
6257: LD_ADDR_LOC 2
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_EXP 1
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 21
6276: PUSH
6277: LD_INT 1
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: CALL_OW 69
6292: PUSH
6293: LD_EXP 32
6297: DIFF
6298: ST_TO_ADDR
// if pom = 0 then
6299: LD_LOC 2
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: IFFALSE 6311
// exit ;
6309: GO 6402
// DialogueOn ;
6311: CALL_OW 6
// CenterOnUnits ( [ A3_rv1 , A3_rv2 , A3_rv3 ] ) ;
6315: LD_INT 26
6317: PUSH
6318: LD_INT 25
6320: PUSH
6321: LD_INT 27
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 85
// if GetSex ( pom [ 1 ] ) = sex_male then
6333: LD_LOC 2
6337: PUSH
6338: LD_INT 1
6340: ARRAY
6341: PPUSH
6342: CALL_OW 258
6346: PUSH
6347: LD_INT 1
6349: EQUAL
6350: IFFALSE 6370
// Say ( pom [ 1 ] , D8a-Sol2-1 ) else
6352: LD_LOC 2
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_STRING D8a-Sol2-1
6363: PPUSH
6364: CALL_OW 88
6368: GO 6386
// Say ( pom [ 1 ] , D8a-FSol2-1 ) ;
6370: LD_LOC 2
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: LD_STRING D8a-FSol2-1
6381: PPUSH
6382: CALL_OW 88
// Say ( JMM , D8a-JMM-1 ) ;
6386: LD_EXP 32
6390: PPUSH
6391: LD_STRING D8a-JMM-1
6393: PPUSH
6394: CALL_OW 88
// DialogueOff ;
6398: CALL_OW 7
// end ; end ;
6402: END
// every 0 0$0.1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do var pom ;
6403: LD_INT 3
6405: PPUSH
6406: LD_INT 22
6408: PUSH
6409: LD_EXP 1
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: PPUSH
6421: CALL_OW 70
6425: PUSH
6426: LD_INT 0
6428: GREATER
6429: IFFALSE 6533
6431: GO 6433
6433: DISABLE
6434: LD_INT 0
6436: PPUSH
// begin case Rand ( 1 , 3 ) of 1 :
6437: LD_INT 1
6439: PPUSH
6440: LD_INT 3
6442: PPUSH
6443: CALL_OW 12
6447: PUSH
6448: LD_INT 1
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6467
6456: POP
// pom = A1_vo1 ; 2 :
6457: LD_ADDR_VAR 0 1
6461: PUSH
6462: LD_INT 72
6464: ST_TO_ADDR
6465: GO 6506
6467: LD_INT 2
6469: DOUBLE
6470: EQUAL
6471: IFTRUE 6475
6473: GO 6486
6475: POP
// pom = A1_ve1 ; 3 :
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_INT 87
6483: ST_TO_ADDR
6484: GO 6506
6486: LD_INT 3
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6505
6494: POP
// pom = A1_vo4 ; end ;
6495: LD_ADDR_VAR 0 1
6499: PUSH
6500: LD_INT 76
6502: ST_TO_ADDR
6503: GO 6506
6505: POP
// if IsOK ( pom ) then
6506: LD_VAR 0 1
6510: PPUSH
6511: CALL_OW 302
6515: IFFALSE 6529
// Say ( pom , D2aa-Ar1-1 ) ;
6517: LD_VAR 0 1
6521: PPUSH
6522: LD_STRING D2aa-Ar1-1
6524: PPUSH
6525: CALL_OW 88
// uprav_zivoty_arabskych_budov ;
6529: CALL 23310 0 0
// end ;
6533: PPOPN 1
6535: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 , pom5 , pom6 ; var pom1a , pom2a , pom3a , pom4a , pom5a , pom6a ; var j ; begin
6536: LD_INT 0
6538: PPUSH
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
6550: PPUSH
6551: PPUSH
6552: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
6553: LD_ADDR_VAR 0 6
6557: PUSH
6558: LD_INT 22
6560: PUSH
6561: LD_EXP 1
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 25
6572: PUSH
6573: LD_INT 4
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 26
6582: PUSH
6583: LD_VAR 0 1
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: LIST
6596: PPUSH
6597: CALL_OW 69
6601: ST_TO_ADDR
// pom1a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6602: LD_ADDR_VAR 0 12
6606: PUSH
6607: LD_INT 22
6609: PUSH
6610: LD_EXP 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 21
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 33
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 69
6648: ST_TO_ADDR
// for j in pom1a do
6649: LD_ADDR_VAR 0 18
6653: PUSH
6654: LD_VAR 0 12
6658: PUSH
6659: FOR_IN
6660: IFFALSE 6700
// if GetClass ( Isdrivenby ( j ) ) = class_scientistic then
6662: LD_VAR 0 18
6666: PPUSH
6667: CALL_OW 311
6671: PPUSH
6672: CALL_OW 257
6676: PUSH
6677: LD_INT 4
6679: EQUAL
6680: IFFALSE 6698
// pom1 = pom1 ^ j ;
6682: LD_ADDR_VAR 0 6
6686: PUSH
6687: LD_VAR 0 6
6691: PUSH
6692: LD_VAR 0 18
6696: ADD
6697: ST_TO_ADDR
6698: GO 6659
6700: POP
6701: POP
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
6702: LD_ADDR_VAR 0 7
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_EXP 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 25
6721: PUSH
6722: LD_INT 3
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 26
6731: PUSH
6732: LD_VAR 0 1
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: PPUSH
6746: CALL_OW 69
6750: ST_TO_ADDR
// pom2a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6751: LD_ADDR_VAR 0 13
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_EXP 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 21
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 33
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: PPUSH
6793: CALL_OW 69
6797: ST_TO_ADDR
// for j in pom2a do
6798: LD_ADDR_VAR 0 18
6802: PUSH
6803: LD_VAR 0 13
6807: PUSH
6808: FOR_IN
6809: IFFALSE 6849
// if GetClass ( Isdrivenby ( j ) ) = class_mechanic then
6811: LD_VAR 0 18
6815: PPUSH
6816: CALL_OW 311
6820: PPUSH
6821: CALL_OW 257
6825: PUSH
6826: LD_INT 3
6828: EQUAL
6829: IFFALSE 6847
// pom2 = pom2 ^ j ;
6831: LD_ADDR_VAR 0 7
6835: PUSH
6836: LD_VAR 0 7
6840: PUSH
6841: LD_VAR 0 18
6845: ADD
6846: ST_TO_ADDR
6847: GO 6808
6849: POP
6850: POP
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
6851: LD_ADDR_VAR 0 8
6855: PUSH
6856: LD_INT 22
6858: PUSH
6859: LD_EXP 1
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 25
6870: PUSH
6871: LD_INT 2
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 26
6880: PUSH
6881: LD_VAR 0 1
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: PPUSH
6895: CALL_OW 69
6899: ST_TO_ADDR
// pom3a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6900: LD_ADDR_VAR 0 14
6904: PUSH
6905: LD_INT 22
6907: PUSH
6908: LD_EXP 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 21
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 33
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 69
6946: ST_TO_ADDR
// for j in pom3a do
6947: LD_ADDR_VAR 0 18
6951: PUSH
6952: LD_VAR 0 14
6956: PUSH
6957: FOR_IN
6958: IFFALSE 6998
// if GetClass ( Isdrivenby ( j ) ) = class_engineer then
6960: LD_VAR 0 18
6964: PPUSH
6965: CALL_OW 311
6969: PPUSH
6970: CALL_OW 257
6974: PUSH
6975: LD_INT 2
6977: EQUAL
6978: IFFALSE 6996
// pom3 = pom3 ^ j ;
6980: LD_ADDR_VAR 0 8
6984: PUSH
6985: LD_VAR 0 8
6989: PUSH
6990: LD_VAR 0 18
6994: ADD
6995: ST_TO_ADDR
6996: GO 6957
6998: POP
6999: POP
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
7000: LD_ADDR_VAR 0 9
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_EXP 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 25
7019: PUSH
7020: LD_INT 1
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 26
7029: PUSH
7030: LD_VAR 0 1
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 69
7048: ST_TO_ADDR
// pom4a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7049: LD_ADDR_VAR 0 15
7053: PUSH
7054: LD_INT 22
7056: PUSH
7057: LD_EXP 1
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 2
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 33
7078: PUSH
7079: LD_INT 1
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 69
7095: ST_TO_ADDR
// for j in pom4a do
7096: LD_ADDR_VAR 0 18
7100: PUSH
7101: LD_VAR 0 15
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7147
// if GetClass ( Isdrivenby ( j ) ) = class_soldier then
7109: LD_VAR 0 18
7113: PPUSH
7114: CALL_OW 311
7118: PPUSH
7119: CALL_OW 257
7123: PUSH
7124: LD_INT 1
7126: EQUAL
7127: IFFALSE 7145
// pom4 = pom4 ^ j ;
7129: LD_ADDR_VAR 0 9
7133: PUSH
7134: LD_VAR 0 9
7138: PUSH
7139: LD_VAR 0 18
7143: ADD
7144: ST_TO_ADDR
7145: GO 7106
7147: POP
7148: POP
// pom5 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_sniper ] , [ f_sex , sex ] ] ) ;
7149: LD_ADDR_VAR 0 10
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_EXP 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 25
7168: PUSH
7169: LD_INT 5
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 26
7178: PUSH
7179: LD_VAR 0 1
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 69
7197: ST_TO_ADDR
// pom5a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7198: LD_ADDR_VAR 0 16
7202: PUSH
7203: LD_INT 22
7205: PUSH
7206: LD_EXP 1
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 21
7217: PUSH
7218: LD_INT 2
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 33
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: ST_TO_ADDR
// for j in pom5a do
7245: LD_ADDR_VAR 0 18
7249: PUSH
7250: LD_VAR 0 16
7254: PUSH
7255: FOR_IN
7256: IFFALSE 7296
// if GetClass ( Isdrivenby ( j ) ) = class_sniper then
7258: LD_VAR 0 18
7262: PPUSH
7263: CALL_OW 311
7267: PPUSH
7268: CALL_OW 257
7272: PUSH
7273: LD_INT 5
7275: EQUAL
7276: IFFALSE 7294
// pom5 = pom5 ^ j ;
7278: LD_ADDR_VAR 0 10
7282: PUSH
7283: LD_VAR 0 10
7287: PUSH
7288: LD_VAR 0 18
7292: ADD
7293: ST_TO_ADDR
7294: GO 7255
7296: POP
7297: POP
// pom6 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mortar ] , [ f_sex , sex ] ] ) ;
7298: LD_ADDR_VAR 0 11
7302: PUSH
7303: LD_INT 22
7305: PUSH
7306: LD_EXP 1
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 8
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 26
7327: PUSH
7328: LD_VAR 0 1
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL_OW 69
7346: ST_TO_ADDR
// pom6a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7347: LD_ADDR_VAR 0 17
7351: PUSH
7352: LD_INT 22
7354: PUSH
7355: LD_EXP 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 21
7366: PUSH
7367: LD_INT 2
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 33
7376: PUSH
7377: LD_INT 1
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 69
7393: ST_TO_ADDR
// for j in pom6a do
7394: LD_ADDR_VAR 0 18
7398: PUSH
7399: LD_VAR 0 17
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7445
// if GetClass ( Isdrivenby ( j ) ) = class_mortar then
7407: LD_VAR 0 18
7411: PPUSH
7412: CALL_OW 311
7416: PPUSH
7417: CALL_OW 257
7421: PUSH
7422: LD_INT 8
7424: EQUAL
7425: IFFALSE 7443
// pom6 = pom6 ^ j ;
7427: LD_ADDR_VAR 0 11
7431: PUSH
7432: LD_VAR 0 11
7436: PUSH
7437: LD_VAR 0 18
7441: ADD
7442: ST_TO_ADDR
7443: GO 7404
7445: POP
7446: POP
// case povolani of class_scientistic :
7447: LD_VAR 0 2
7451: PUSH
7452: LD_INT 4
7454: DOUBLE
7455: EQUAL
7456: IFTRUE 7460
7458: GO 7473
7460: POP
// pom = pom1 ; class_mechanic :
7461: LD_ADDR_VAR 0 5
7465: PUSH
7466: LD_VAR 0 6
7470: ST_TO_ADDR
7471: GO 7579
7473: LD_INT 3
7475: DOUBLE
7476: EQUAL
7477: IFTRUE 7481
7479: GO 7494
7481: POP
// pom = pom2 ; class_engineer :
7482: LD_ADDR_VAR 0 5
7486: PUSH
7487: LD_VAR 0 7
7491: ST_TO_ADDR
7492: GO 7579
7494: LD_INT 2
7496: DOUBLE
7497: EQUAL
7498: IFTRUE 7502
7500: GO 7515
7502: POP
// pom = pom3 ; class_soldier :
7503: LD_ADDR_VAR 0 5
7507: PUSH
7508: LD_VAR 0 8
7512: ST_TO_ADDR
7513: GO 7579
7515: LD_INT 1
7517: DOUBLE
7518: EQUAL
7519: IFTRUE 7523
7521: GO 7536
7523: POP
// pom = pom4 ; class_sniper :
7524: LD_ADDR_VAR 0 5
7528: PUSH
7529: LD_VAR 0 9
7533: ST_TO_ADDR
7534: GO 7579
7536: LD_INT 5
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7557
7544: POP
// pom = pom5 ; class_mortar :
7545: LD_ADDR_VAR 0 5
7549: PUSH
7550: LD_VAR 0 10
7554: ST_TO_ADDR
7555: GO 7579
7557: LD_INT 8
7559: DOUBLE
7560: EQUAL
7561: IFTRUE 7565
7563: GO 7578
7565: POP
// pom = pom6 ; end ;
7566: LD_ADDR_VAR 0 5
7570: PUSH
7571: LD_VAR 0 11
7575: ST_TO_ADDR
7576: GO 7579
7578: POP
// if povolani <> class_scientistic then
7579: LD_VAR 0 2
7583: PUSH
7584: LD_INT 4
7586: NONEQUAL
7587: IFFALSE 7605
// pom = pom ^ pom1 ;
7589: LD_ADDR_VAR 0 5
7593: PUSH
7594: LD_VAR 0 5
7598: PUSH
7599: LD_VAR 0 6
7603: ADD
7604: ST_TO_ADDR
// if povolani <> class_mechanic then
7605: LD_VAR 0 2
7609: PUSH
7610: LD_INT 3
7612: NONEQUAL
7613: IFFALSE 7631
// pom = pom ^ pom2 ;
7615: LD_ADDR_VAR 0 5
7619: PUSH
7620: LD_VAR 0 5
7624: PUSH
7625: LD_VAR 0 7
7629: ADD
7630: ST_TO_ADDR
// if povolani <> class_engineer then
7631: LD_VAR 0 2
7635: PUSH
7636: LD_INT 2
7638: NONEQUAL
7639: IFFALSE 7657
// pom = pom ^ pom3 ;
7641: LD_ADDR_VAR 0 5
7645: PUSH
7646: LD_VAR 0 5
7650: PUSH
7651: LD_VAR 0 8
7655: ADD
7656: ST_TO_ADDR
// if povolani <> class_soldier then
7657: LD_VAR 0 2
7661: PUSH
7662: LD_INT 1
7664: NONEQUAL
7665: IFFALSE 7683
// pom = pom ^ pom4 ;
7667: LD_ADDR_VAR 0 5
7671: PUSH
7672: LD_VAR 0 5
7676: PUSH
7677: LD_VAR 0 9
7681: ADD
7682: ST_TO_ADDR
// if povolani <> class_sniper then
7683: LD_VAR 0 2
7687: PUSH
7688: LD_INT 5
7690: NONEQUAL
7691: IFFALSE 7709
// pom = pom ^ pom5 ;
7693: LD_ADDR_VAR 0 5
7697: PUSH
7698: LD_VAR 0 5
7702: PUSH
7703: LD_VAR 0 10
7707: ADD
7708: ST_TO_ADDR
// if povolani <> class_mortar then
7709: LD_VAR 0 2
7713: PUSH
7714: LD_INT 8
7716: NONEQUAL
7717: IFFALSE 7735
// pom = pom ^ pom6 ;
7719: LD_ADDR_VAR 0 5
7723: PUSH
7724: LD_VAR 0 5
7728: PUSH
7729: LD_VAR 0 11
7733: ADD
7734: ST_TO_ADDR
// result := pom diff diffseznam ;
7735: LD_ADDR_VAR 0 4
7739: PUSH
7740: LD_VAR 0 5
7744: PUSH
7745: LD_VAR 0 3
7749: DIFF
7750: ST_TO_ADDR
// end ;
7751: LD_VAR 0 4
7755: RET
// export function query_konec_mise ; var pom ; begin
7756: LD_INT 0
7758: PPUSH
7759: PPUSH
// pom = Query ( QEndMission ) ;
7760: LD_ADDR_VAR 0 2
7764: PUSH
7765: LD_STRING QEndMission
7767: PPUSH
7768: CALL_OW 97
7772: ST_TO_ADDR
// result := pom ;
7773: LD_ADDR_VAR 0 1
7777: PUSH
7778: LD_VAR 0 2
7782: ST_TO_ADDR
// end ;
7783: LD_VAR 0 1
7787: RET
// every 0 0$1 do var pom ; var jedn ;
7788: GO 7790
7790: DISABLE
7791: LD_INT 0
7793: PPUSH
7794: PPUSH
// begin jedn = 0 ;
7795: LD_ADDR_VAR 0 2
7799: PUSH
7800: LD_INT 0
7802: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] , [ f_see , You ] ] ) ;
7803: LD_ADDR_VAR 0 1
7807: PUSH
7808: LD_INT 22
7810: PUSH
7811: LD_EXP 3
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 101
7832: PUSH
7833: LD_EXP 1
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: PPUSH
7847: CALL_OW 69
7851: ST_TO_ADDR
// for i in pom do
7852: LD_ADDR_LOC 1
7856: PUSH
7857: LD_VAR 0 1
7861: PUSH
7862: FOR_IN
7863: IFFALSE 7892
// if GetLives ( i ) < 250 then
7865: LD_LOC 1
7869: PPUSH
7870: CALL_OW 256
7874: PUSH
7875: LD_INT 250
7877: LESS
7878: IFFALSE 7890
// jedn = i ;
7880: LD_ADDR_VAR 0 2
7884: PUSH
7885: LD_LOC 1
7889: ST_TO_ADDR
7890: GO 7862
7892: POP
7893: POP
// if jedn <> 0 then
7894: LD_VAR 0 2
7898: PUSH
7899: LD_INT 0
7901: NONEQUAL
7902: IFFALSE 7913
// Hint ( stimulationdrugs ) else
7904: LD_STRING stimulationdrugs
7906: PPUSH
7907: CALL_OW 339
7911: GO 7914
// enable ;
7913: ENABLE
// end ; end_of_file
7914: PPOPN 2
7916: END
// export CREATE_AR_PROTIOFENZIVU_LIST ; export JEDNOTKY_BAZE_2_LIST ; export JEDNOTKY_BAZE_3_LIST ; export Ar_utok1_LIST ; export Ar_utok2_LIST ; export Ar_utok3_LIST ; export Ar_utok4_LIST ; export Ar_utoklast_LIST ; export AR_backa_LIST ; export GARYL ; export LISAL ; export YAML ; export FRANKL ; export CORNELL ; export BOBL ; export CYRL ; export DONL ; export BROWNL ; var ah , av ; function prepare_human ( sex , clas , level , name ) ; begin
7917: LD_INT 0
7919: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7920: LD_VAR 0 1
7924: PPUSH
7925: LD_VAR 0 2
7929: PPUSH
7930: LD_VAR 0 3
7934: PPUSH
7935: CALL_OW 380
// hc_name := name ;
7939: LD_ADDR_OWVAR 26
7943: PUSH
7944: LD_VAR 0 4
7948: ST_TO_ADDR
// end ;
7949: LD_VAR 0 5
7953: RET
// export function nacti_osobu ( ident ) ; begin
7954: LD_INT 0
7956: PPUSH
// if CheckCharacterSet ( ident ) then
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 29
7966: IFFALSE 7985
// result := CreateCharacter ( ident ) else
7968: LD_ADDR_VAR 0 2
7972: PUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 34
7982: ST_TO_ADDR
7983: GO 7993
// result := 0 ;
7985: LD_ADDR_VAR 0 2
7989: PUSH
7990: LD_INT 0
7992: ST_TO_ADDR
// end ;
7993: LD_VAR 0 2
7997: RET
// export function create_amici ; var i ; begin
7998: LD_INT 0
8000: PPUSH
8001: PPUSH
// uc_side = You ;
8002: LD_ADDR_OWVAR 20
8006: PUSH
8007: LD_EXP 1
8011: ST_TO_ADDR
// uc_nation = nation_american ;
8012: LD_ADDR_OWVAR 21
8016: PUSH
8017: LD_INT 1
8019: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
8020: LD_ADDR_OWVAR 37
8024: PUSH
8025: LD_INT 3
8027: ST_TO_ADDR
// vc_control = control_computer ;
8028: LD_ADDR_OWVAR 38
8032: PUSH
8033: LD_INT 3
8035: ST_TO_ADDR
// vc_engine = engine_solar ;
8036: LD_ADDR_OWVAR 39
8040: PUSH
8041: LD_INT 2
8043: ST_TO_ADDR
// vc_weapon = us_radar ;
8044: LD_ADDR_OWVAR 40
8048: PUSH
8049: LD_INT 11
8051: ST_TO_ADDR
// av = CreateVehicle ;
8052: LD_ADDR_LOC 11
8056: PUSH
8057: CALL_OW 45
8061: ST_TO_ADDR
// Radar_enter := av ;
8062: LD_ADDR_EXP 44
8066: PUSH
8067: LD_LOC 11
8071: ST_TO_ADDR
// PlaceUnitXY ( av , 85 , 145 , false ) ;
8072: LD_LOC 11
8076: PPUSH
8077: LD_INT 85
8079: PPUSH
8080: LD_INT 145
8082: PPUSH
8083: LD_INT 0
8085: PPUSH
8086: CALL_OW 48
// for i in Amici_enter do
8090: LD_ADDR_VAR 0 2
8094: PUSH
8095: LD_EXP 43
8099: PUSH
8100: FOR_IN
8101: IFFALSE 8120
// PlaceUnitArea ( i , AMEnter , false ) ;
8103: LD_VAR 0 2
8107: PPUSH
8108: LD_INT 1
8110: PPUSH
8111: LD_INT 0
8113: PPUSH
8114: CALL_OW 49
8118: GO 8100
8120: POP
8121: POP
// end ;
8122: LD_VAR 0 1
8126: RET
// export function create_ar_protiofenzivu ; var pom ; begin
8127: LD_INT 0
8129: PPUSH
8130: PPUSH
// pom = [ ] ;
8131: LD_ADDR_VAR 0 2
8135: PUSH
8136: EMPTY
8137: ST_TO_ADDR
// uc_side := Arabi ;
8138: LD_ADDR_OWVAR 20
8142: PUSH
8143: LD_EXP 3
8147: ST_TO_ADDR
// uc_nation := nation_arabian ;
8148: LD_ADDR_OWVAR 21
8152: PUSH
8153: LD_INT 2
8155: ST_TO_ADDR
// uc_direction := 3 ;
8156: LD_ADDR_OWVAR 24
8160: PUSH
8161: LD_INT 3
8163: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , Ar_levely [ difficulty ] , Hasam El Azis ) ;
8164: LD_INT 1
8166: PPUSH
8167: LD_INT 3
8169: PPUSH
8170: LD_EXP 49
8174: PUSH
8175: LD_OWVAR 67
8179: ARRAY
8180: PPUSH
8181: LD_STRING Hasam El Azis
8183: PPUSH
8184: CALL 7917 0 4
// ah = CreateHuman ;
8188: LD_ADDR_LOC 10
8192: PUSH
8193: CALL_OW 44
8197: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8198: LD_ADDR_OWVAR 37
8202: PUSH
8203: LD_INT 14
8205: ST_TO_ADDR
// vc_control := control_manual ;
8206: LD_ADDR_OWVAR 38
8210: PUSH
8211: LD_INT 1
8213: ST_TO_ADDR
// vc_engine := engine_combustion ;
8214: LD_ADDR_OWVAR 39
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// vc_weapon := ar_gun ;
8222: LD_ADDR_OWVAR 40
8226: PUSH
8227: LD_INT 27
8229: ST_TO_ADDR
// av = CreateVehicle ;
8230: LD_ADDR_LOC 11
8234: PUSH
8235: CALL_OW 45
8239: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8240: LD_LOC 10
8244: PPUSH
8245: LD_LOC 11
8249: PPUSH
8250: CALL_OW 52
// pom = pom ^ av ;
8254: LD_ADDR_VAR 0 2
8258: PUSH
8259: LD_VAR 0 2
8263: PUSH
8264: LD_LOC 11
8268: ADD
8269: ST_TO_ADDR
// prepare_human ( sex_female , class_mechanic , Ar_levely [ difficulty ] - 2 ,  ) ;
8270: LD_INT 2
8272: PPUSH
8273: LD_INT 3
8275: PPUSH
8276: LD_EXP 49
8280: PUSH
8281: LD_OWVAR 67
8285: ARRAY
8286: PUSH
8287: LD_INT 2
8289: MINUS
8290: PPUSH
8291: LD_STRING 
8293: PPUSH
8294: CALL 7917 0 4
// ah = CreateHuman ;
8298: LD_ADDR_LOC 10
8302: PUSH
8303: CALL_OW 44
8307: ST_TO_ADDR
// vc_chassis := ar_light_trike ;
8308: LD_ADDR_OWVAR 37
8312: PUSH
8313: LD_INT 12
8315: ST_TO_ADDR
// vc_control := control_manual ;
8316: LD_ADDR_OWVAR 38
8320: PUSH
8321: LD_INT 1
8323: ST_TO_ADDR
// vc_engine := engine_solar ;
8324: LD_ADDR_OWVAR 39
8328: PUSH
8329: LD_INT 2
8331: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
8332: LD_ADDR_OWVAR 40
8336: PUSH
8337: LD_INT 24
8339: ST_TO_ADDR
// av = CreateVehicle ;
8340: LD_ADDR_LOC 11
8344: PUSH
8345: CALL_OW 45
8349: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8350: LD_LOC 10
8354: PPUSH
8355: LD_LOC 11
8359: PPUSH
8360: CALL_OW 52
// pom = pom ^ av ;
8364: LD_ADDR_VAR 0 2
8368: PUSH
8369: LD_VAR 0 2
8373: PUSH
8374: LD_LOC 11
8378: ADD
8379: ST_TO_ADDR
// if difficulty > 1 then
8380: LD_OWVAR 67
8384: PUSH
8385: LD_INT 1
8387: GREATER
8388: IFFALSE 8422
// begin ah = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
8390: LD_ADDR_LOC 10
8394: PUSH
8395: CALL 10454 0 0
8399: PPUSH
8400: LD_INT 1
8402: PPUSH
8403: LD_EXP 49
8407: PUSH
8408: LD_OWVAR 67
8412: ARRAY
8413: PPUSH
8414: LD_STRING 
8416: PPUSH
8417: CALL 14018 0 4
8421: ST_TO_ADDR
// end ; if difficulty > 2 then
8422: LD_OWVAR 67
8426: PUSH
8427: LD_INT 2
8429: GREATER
8430: IFFALSE 8490
// begin vc_chassis := ar_medium_trike ;
8432: LD_ADDR_OWVAR 37
8436: PUSH
8437: LD_INT 13
8439: ST_TO_ADDR
// vc_control := control_apeman ;
8440: LD_ADDR_OWVAR 38
8444: PUSH
8445: LD_INT 5
8447: ST_TO_ADDR
// vc_engine := engine_siberite ;
8448: LD_ADDR_OWVAR 39
8452: PUSH
8453: LD_INT 3
8455: ST_TO_ADDR
// vc_weapon := ar_multimissile_ballista ;
8456: LD_ADDR_OWVAR 40
8460: PUSH
8461: LD_INT 22
8463: ST_TO_ADDR
// av = CreateVehicle ;
8464: LD_ADDR_LOC 11
8468: PUSH
8469: CALL_OW 45
8473: ST_TO_ADDR
// pom = pom ^ av ;
8474: LD_ADDR_VAR 0 2
8478: PUSH
8479: LD_VAR 0 2
8483: PUSH
8484: LD_LOC 11
8488: ADD
8489: ST_TO_ADDR
// end ; CREATE_AR_PROTIOFENZIVU_LIST := pom ;
8490: LD_ADDR_EXP 10
8494: PUSH
8495: LD_VAR 0 2
8499: ST_TO_ADDR
// end ;
8500: LD_VAR 0 1
8504: RET
// export function create_auto_pro_solopa ; begin
8505: LD_INT 0
8507: PPUSH
// uc_side := Arabi ;
8508: LD_ADDR_OWVAR 20
8512: PUSH
8513: LD_EXP 3
8517: ST_TO_ADDR
// uc_nation := nation_arabian ;
8518: LD_ADDR_OWVAR 21
8522: PUSH
8523: LD_INT 2
8525: ST_TO_ADDR
// uc_direction := 3 ;
8526: LD_ADDR_OWVAR 24
8530: PUSH
8531: LD_INT 3
8533: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8534: LD_ADDR_OWVAR 37
8538: PUSH
8539: LD_INT 14
8541: ST_TO_ADDR
// vc_control := control_manual ;
8542: LD_ADDR_OWVAR 38
8546: PUSH
8547: LD_INT 1
8549: ST_TO_ADDR
// vc_engine := engine_siberite ;
8550: LD_ADDR_OWVAR 39
8554: PUSH
8555: LD_INT 3
8557: ST_TO_ADDR
// vc_weapon := ar_gun ;
8558: LD_ADDR_OWVAR 40
8562: PUSH
8563: LD_INT 27
8565: ST_TO_ADDR
// av := CreateVehicle ;
8566: LD_ADDR_LOC 11
8570: PUSH
8571: CALL_OW 45
8575: ST_TO_ADDR
// result := av ;
8576: LD_ADDR_VAR 0 1
8580: PUSH
8581: LD_LOC 11
8585: ST_TO_ADDR
// end ;
8586: LD_VAR 0 1
8590: RET
// var pom3 , pom4 , pom5 , pom6 , pom1 ; export function dodej_skily ; var pom , i ; begin
8591: LD_INT 0
8593: PPUSH
8594: PPUSH
8595: PPUSH
// uprav_cloveka ( A2_mor3 , class_mortar , Ar_levely [ difficulty ] ) ;
8596: LD_INT 92
8598: PPUSH
8599: LD_INT 8
8601: PPUSH
8602: LD_EXP 49
8606: PUSH
8607: LD_OWVAR 67
8611: ARRAY
8612: PPUSH
8613: CALL 8857 0 3
// uprav_cloveka ( A2_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8617: LD_INT 82
8619: PPUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_EXP 49
8627: PUSH
8628: LD_OWVAR 67
8632: ARRAY
8633: PPUSH
8634: CALL 8857 0 3
// uprav_cloveka ( A2_zas2 , class_soldier , Ar_levely [ difficulty ] ) ;
8638: LD_INT 83
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: LD_EXP 49
8648: PUSH
8649: LD_OWVAR 67
8653: ARRAY
8654: PPUSH
8655: CALL 8857 0 3
// uprav_cloveka ( A3_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8659: LD_INT 101
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: LD_EXP 49
8669: PUSH
8670: LD_OWVAR 67
8674: ARRAY
8675: PPUSH
8676: CALL 8857 0 3
// uprav_cloveka ( A3_solop , class_engineer , Ar_levely [ difficulty ] ) ;
8680: LD_INT 102
8682: PPUSH
8683: LD_INT 2
8685: PPUSH
8686: LD_EXP 49
8690: PUSH
8691: LD_OWVAR 67
8695: ARRAY
8696: PPUSH
8697: CALL 8857 0 3
// pom = [ A3_rme1 , A3_rme2 , A3_rme3 ] ;
8701: LD_ADDR_VAR 0 2
8705: PUSH
8706: LD_INT 96
8708: PUSH
8709: LD_INT 95
8711: PUSH
8712: LD_INT 94
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: ST_TO_ADDR
// for i in pom do
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: LD_VAR 0 2
8729: PUSH
8730: FOR_IN
8731: IFFALSE 8758
// uprav_cloveka ( i , class_mechanic , Ar_levely [ difficulty ] ) ;
8733: LD_VAR 0 3
8737: PPUSH
8738: LD_INT 3
8740: PPUSH
8741: LD_EXP 49
8745: PUSH
8746: LD_OWVAR 67
8750: ARRAY
8751: PPUSH
8752: CALL 8857 0 3
8756: GO 8730
8758: POP
8759: POP
// end ;
8760: LD_VAR 0 1
8764: RET
// function set_skills ( un , skills ) ; begin
8765: LD_INT 0
8767: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
8768: LD_VAR 0 1
8772: PPUSH
8773: LD_INT 1
8775: PPUSH
8776: LD_VAR 0 2
8780: PUSH
8781: LD_INT 1
8783: ARRAY
8784: PPUSH
8785: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_INT 2
8796: PPUSH
8797: LD_VAR 0 2
8801: PUSH
8802: LD_INT 2
8804: ARRAY
8805: PPUSH
8806: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
8810: LD_VAR 0 1
8814: PPUSH
8815: LD_INT 3
8817: PPUSH
8818: LD_VAR 0 2
8822: PUSH
8823: LD_INT 3
8825: ARRAY
8826: PPUSH
8827: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
8831: LD_VAR 0 1
8835: PPUSH
8836: LD_INT 4
8838: PPUSH
8839: LD_VAR 0 2
8843: PUSH
8844: LD_INT 4
8846: ARRAY
8847: PPUSH
8848: CALL_OW 237
// end ;
8852: LD_VAR 0 3
8856: RET
// function uprav_cloveka ( un , clas , lev ) ; begin
8857: LD_INT 0
8859: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
8860: LD_INT 1
8862: PPUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: LD_VAR 0 3
8872: PPUSH
8873: LD_STRING 
8875: PPUSH
8876: CALL 7917 0 4
// ah = CreateHuman ;
8880: LD_ADDR_LOC 10
8884: PUSH
8885: CALL_OW 44
8889: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
8890: LD_ADDR_LOC 16
8894: PUSH
8895: LD_LOC 10
8899: PPUSH
8900: CALL 12421 0 1
8904: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
8905: LD_VAR 0 1
8909: PPUSH
8910: LD_LOC 10
8914: PPUSH
8915: CALL 12421 0 1
8919: PPUSH
8920: CALL 8765 0 2
// DestroyUnit ( ah ) ;
8924: LD_LOC 10
8928: PPUSH
8929: CALL_OW 65
// end ;
8933: LD_VAR 0 4
8937: RET
// export function vytvor_opravare ; var pom ; begin
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// uc_side := Arabi ;
8942: LD_ADDR_OWVAR 20
8946: PUSH
8947: LD_EXP 3
8951: ST_TO_ADDR
// uc_nation := nation_arabian ;
8952: LD_ADDR_OWVAR 21
8956: PUSH
8957: LD_INT 2
8959: ST_TO_ADDR
// uc_direction := 3 ;
8960: LD_ADDR_OWVAR 24
8964: PUSH
8965: LD_INT 3
8967: ST_TO_ADDR
// pom = [ ] ;
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: EMPTY
8974: ST_TO_ADDR
// if difficulty < 3 then
8975: LD_OWVAR 67
8979: PUSH
8980: LD_INT 3
8982: LESS
8983: IFFALSE 9057
// begin prepare_human ( sex_male , class_engineer , Ar_levely [ difficulty ] + 1 , Gru Pakansu ) ;
8985: LD_INT 1
8987: PPUSH
8988: LD_INT 2
8990: PPUSH
8991: LD_EXP 49
8995: PUSH
8996: LD_OWVAR 67
9000: ARRAY
9001: PUSH
9002: LD_INT 1
9004: PLUS
9005: PPUSH
9006: LD_STRING Gru Pakansu
9008: PPUSH
9009: CALL 7917 0 4
// ah = CreateHuman ;
9013: LD_ADDR_LOC 10
9017: PUSH
9018: CALL_OW 44
9022: ST_TO_ADDR
// PlaceUnitXY ( ah , 19 , 6 , false ) ;
9023: LD_LOC 10
9027: PPUSH
9028: LD_INT 19
9030: PPUSH
9031: LD_INT 6
9033: PPUSH
9034: LD_INT 0
9036: PPUSH
9037: CALL_OW 48
// pom = pom ^ ah ;
9041: LD_ADDR_VAR 0 2
9045: PUSH
9046: LD_VAR 0 2
9050: PUSH
9051: LD_LOC 10
9055: ADD
9056: ST_TO_ADDR
// end ; if difficulty < 2 then
9057: LD_OWVAR 67
9061: PUSH
9062: LD_INT 2
9064: LESS
9065: IFFALSE 9141
// begin prepare_human ( get_sex , class_engineer , Ar_levely [ difficulty ] + 2 ,  ) ;
9067: CALL 10454 0 0
9071: PPUSH
9072: LD_INT 2
9074: PPUSH
9075: LD_EXP 49
9079: PUSH
9080: LD_OWVAR 67
9084: ARRAY
9085: PUSH
9086: LD_INT 2
9088: PLUS
9089: PPUSH
9090: LD_STRING 
9092: PPUSH
9093: CALL 7917 0 4
// ah = CreateHuman ;
9097: LD_ADDR_LOC 10
9101: PUSH
9102: CALL_OW 44
9106: ST_TO_ADDR
// PlaceUnitXY ( ah , 25 , 1 , false ) ;
9107: LD_LOC 10
9111: PPUSH
9112: LD_INT 25
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: LD_INT 0
9120: PPUSH
9121: CALL_OW 48
// pom = pom ^ ah ;
9125: LD_ADDR_VAR 0 2
9129: PUSH
9130: LD_VAR 0 2
9134: PUSH
9135: LD_LOC 10
9139: ADD
9140: ST_TO_ADDR
// end ; result := pom ;
9141: LD_ADDR_VAR 0 1
9145: PUSH
9146: LD_VAR 0 2
9150: ST_TO_ADDR
// end ;
9151: LD_VAR 0 1
9155: RET
// export function vojcli_base_2 ; var pom ; var i , j ; begin
9156: LD_INT 0
9158: PPUSH
9159: PPUSH
9160: PPUSH
9161: PPUSH
// pom = [ ] ;
9162: LD_ADDR_VAR 0 2
9166: PUSH
9167: EMPTY
9168: ST_TO_ADDR
// uc_side := Arabi ;
9169: LD_ADDR_OWVAR 20
9173: PUSH
9174: LD_EXP 3
9178: ST_TO_ADDR
// uc_nation := nation_arabian ;
9179: LD_ADDR_OWVAR 21
9183: PUSH
9184: LD_INT 2
9186: ST_TO_ADDR
// uc_direction := 0 ;
9187: LD_ADDR_OWVAR 24
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// for i = 1 to 7 do
9195: LD_ADDR_VAR 0 3
9199: PUSH
9200: DOUBLE
9201: LD_INT 1
9203: DEC
9204: ST_TO_ADDR
9205: LD_INT 7
9207: PUSH
9208: FOR_TO
9209: IFFALSE 9283
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9211: LD_INT 1
9213: PPUSH
9214: LD_VAR 0 3
9218: PPUSH
9219: CALL 10489 0 2
9223: PPUSH
9224: LD_INT 1
9226: PPUSH
9227: LD_EXP 49
9231: PUSH
9232: LD_OWVAR 67
9236: ARRAY
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_VAR 0 3
9245: PPUSH
9246: CALL 10705 0 2
9250: PPUSH
9251: CALL 7917 0 4
// ah = CreateHuman ;
9255: LD_ADDR_LOC 10
9259: PUSH
9260: CALL_OW 44
9264: ST_TO_ADDR
// pom = pom ^ ah ;
9265: LD_ADDR_VAR 0 2
9269: PUSH
9270: LD_VAR 0 2
9274: PUSH
9275: LD_LOC 10
9279: ADD
9280: ST_TO_ADDR
// end ;
9281: GO 9208
9283: POP
9284: POP
// for i = 1 to 3 do
9285: LD_ADDR_VAR 0 3
9289: PUSH
9290: DOUBLE
9291: LD_INT 1
9293: DEC
9294: ST_TO_ADDR
9295: LD_INT 3
9297: PUSH
9298: FOR_TO
9299: IFFALSE 9373
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9301: LD_INT 1
9303: PPUSH
9304: LD_VAR 0 3
9308: PPUSH
9309: CALL 10489 0 2
9313: PPUSH
9314: LD_INT 8
9316: PPUSH
9317: LD_EXP 49
9321: PUSH
9322: LD_OWVAR 67
9326: ARRAY
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: LD_VAR 0 3
9335: PPUSH
9336: CALL 10705 0 2
9340: PPUSH
9341: CALL 7917 0 4
// ah = CreateHuman ;
9345: LD_ADDR_LOC 10
9349: PUSH
9350: CALL_OW 44
9354: ST_TO_ADDR
// pom = pom ^ ah ;
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_VAR 0 2
9364: PUSH
9365: LD_LOC 10
9369: ADD
9370: ST_TO_ADDR
// end ;
9371: GO 9298
9373: POP
9374: POP
// for i = 1 to 2 do
9375: LD_ADDR_VAR 0 3
9379: PUSH
9380: DOUBLE
9381: LD_INT 1
9383: DEC
9384: ST_TO_ADDR
9385: LD_INT 2
9387: PUSH
9388: FOR_TO
9389: IFFALSE 9445
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
9391: CALL 10454 0 0
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: LD_EXP 49
9403: PUSH
9404: LD_OWVAR 67
9408: ARRAY
9409: PPUSH
9410: LD_STRING 
9412: PPUSH
9413: CALL 7917 0 4
// ah = CreateHuman ;
9417: LD_ADDR_LOC 10
9421: PUSH
9422: CALL_OW 44
9426: ST_TO_ADDR
// pom = pom ^ ah ;
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: LD_VAR 0 2
9436: PUSH
9437: LD_LOC 10
9441: ADD
9442: ST_TO_ADDR
// end ;
9443: GO 9388
9445: POP
9446: POP
// for i = 1 to 2 do
9447: LD_ADDR_VAR 0 3
9451: PUSH
9452: DOUBLE
9453: LD_INT 1
9455: DEC
9456: ST_TO_ADDR
9457: LD_INT 2
9459: PUSH
9460: FOR_TO
9461: IFFALSE 9543
// begin prepare_human ( get_sex_uprava ( 1 , i + 12 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i + 12 ) ) ;
9463: LD_INT 1
9465: PPUSH
9466: LD_VAR 0 3
9470: PUSH
9471: LD_INT 12
9473: PLUS
9474: PPUSH
9475: CALL 10489 0 2
9479: PPUSH
9480: LD_INT 8
9482: PPUSH
9483: LD_EXP 49
9487: PUSH
9488: LD_OWVAR 67
9492: ARRAY
9493: PPUSH
9494: LD_INT 1
9496: PPUSH
9497: LD_VAR 0 3
9501: PUSH
9502: LD_INT 12
9504: PLUS
9505: PPUSH
9506: CALL 10705 0 2
9510: PPUSH
9511: CALL 7917 0 4
// ah = CreateHuman ;
9515: LD_ADDR_LOC 10
9519: PUSH
9520: CALL_OW 44
9524: ST_TO_ADDR
// pom = pom ^ ah ;
9525: LD_ADDR_VAR 0 2
9529: PUSH
9530: LD_VAR 0 2
9534: PUSH
9535: LD_LOC 10
9539: ADD
9540: ST_TO_ADDR
// end ;
9541: GO 9460
9543: POP
9544: POP
// for i = 1 to 2 do
9545: LD_ADDR_VAR 0 3
9549: PUSH
9550: DOUBLE
9551: LD_INT 1
9553: DEC
9554: ST_TO_ADDR
9555: LD_INT 2
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9641
// begin prepare_human ( get_sex_uprava ( 1 , i + 14 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 1 , i + 14 ) ) ;
9561: LD_INT 1
9563: PPUSH
9564: LD_VAR 0 3
9568: PUSH
9569: LD_INT 14
9571: PLUS
9572: PPUSH
9573: CALL 10489 0 2
9577: PPUSH
9578: LD_INT 2
9580: PPUSH
9581: LD_EXP 49
9585: PUSH
9586: LD_OWVAR 67
9590: ARRAY
9591: PPUSH
9592: LD_INT 1
9594: PPUSH
9595: LD_VAR 0 3
9599: PUSH
9600: LD_INT 14
9602: PLUS
9603: PPUSH
9604: CALL 10705 0 2
9608: PPUSH
9609: CALL 7917 0 4
// ah = CreateHuman ;
9613: LD_ADDR_LOC 10
9617: PUSH
9618: CALL_OW 44
9622: ST_TO_ADDR
// pom = pom ^ ah ;
9623: LD_ADDR_VAR 0 2
9627: PUSH
9628: LD_VAR 0 2
9632: PUSH
9633: LD_LOC 10
9637: ADD
9638: ST_TO_ADDR
// end ;
9639: GO 9558
9641: POP
9642: POP
// for i = 1 to 4 do
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: DOUBLE
9649: LD_INT 1
9651: DEC
9652: ST_TO_ADDR
9653: LD_INT 4
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9739
// begin prepare_human ( get_sex_uprava ( 1 , i + 16 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 16 ) ) ;
9659: LD_INT 1
9661: PPUSH
9662: LD_VAR 0 3
9666: PUSH
9667: LD_INT 16
9669: PLUS
9670: PPUSH
9671: CALL 10489 0 2
9675: PPUSH
9676: LD_INT 3
9678: PPUSH
9679: LD_EXP 49
9683: PUSH
9684: LD_OWVAR 67
9688: ARRAY
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 16
9700: PLUS
9701: PPUSH
9702: CALL 10705 0 2
9706: PPUSH
9707: CALL 7917 0 4
// ah = CreateHuman ;
9711: LD_ADDR_LOC 10
9715: PUSH
9716: CALL_OW 44
9720: ST_TO_ADDR
// pom = pom ^ ah ;
9721: LD_ADDR_VAR 0 2
9725: PUSH
9726: LD_VAR 0 2
9730: PUSH
9731: LD_LOC 10
9735: ADD
9736: ST_TO_ADDR
// end ;
9737: GO 9656
9739: POP
9740: POP
// for i = 1 to 3 do
9741: LD_ADDR_VAR 0 3
9745: PUSH
9746: DOUBLE
9747: LD_INT 1
9749: DEC
9750: ST_TO_ADDR
9751: LD_INT 3
9753: PUSH
9754: FOR_TO
9755: IFFALSE 9837
// begin prepare_human ( get_sex_uprava ( 1 , i + 20 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 20 ) ) ;
9757: LD_INT 1
9759: PPUSH
9760: LD_VAR 0 3
9764: PUSH
9765: LD_INT 20
9767: PLUS
9768: PPUSH
9769: CALL 10489 0 2
9773: PPUSH
9774: LD_INT 3
9776: PPUSH
9777: LD_EXP 49
9781: PUSH
9782: LD_OWVAR 67
9786: ARRAY
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: LD_VAR 0 3
9795: PUSH
9796: LD_INT 20
9798: PLUS
9799: PPUSH
9800: CALL 10705 0 2
9804: PPUSH
9805: CALL 7917 0 4
// ah = CreateHuman ;
9809: LD_ADDR_LOC 10
9813: PUSH
9814: CALL_OW 44
9818: ST_TO_ADDR
// pom = pom ^ ah ;
9819: LD_ADDR_VAR 0 2
9823: PUSH
9824: LD_VAR 0 2
9828: PUSH
9829: LD_LOC 10
9833: ADD
9834: ST_TO_ADDR
// end ;
9835: GO 9754
9837: POP
9838: POP
// JEDNOTKY_BAZE_2_LIST = pom ;
9839: LD_ADDR_EXP 11
9843: PUSH
9844: LD_VAR 0 2
9848: ST_TO_ADDR
// end ;
9849: LD_VAR 0 1
9853: RET
// export function vojcli_base_3 ; var pom ; var i , j ; begin
9854: LD_INT 0
9856: PPUSH
9857: PPUSH
9858: PPUSH
9859: PPUSH
// pom = [ ] ;
9860: LD_ADDR_VAR 0 2
9864: PUSH
9865: EMPTY
9866: ST_TO_ADDR
// uc_side := Arabi ;
9867: LD_ADDR_OWVAR 20
9871: PUSH
9872: LD_EXP 3
9876: ST_TO_ADDR
// uc_nation := nation_arabian ;
9877: LD_ADDR_OWVAR 21
9881: PUSH
9882: LD_INT 2
9884: ST_TO_ADDR
// uc_direction := 0 ;
9885: LD_ADDR_OWVAR 24
9889: PUSH
9890: LD_INT 0
9892: ST_TO_ADDR
// for i = 1 to 4 do
9893: LD_ADDR_VAR 0 3
9897: PUSH
9898: DOUBLE
9899: LD_INT 1
9901: DEC
9902: ST_TO_ADDR
9903: LD_INT 4
9905: PUSH
9906: FOR_TO
9907: IFFALSE 9981
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9909: LD_INT 2
9911: PPUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: CALL 10489 0 2
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: LD_EXP 49
9929: PUSH
9930: LD_OWVAR 67
9934: ARRAY
9935: PPUSH
9936: LD_INT 2
9938: PPUSH
9939: LD_VAR 0 3
9943: PPUSH
9944: CALL 10705 0 2
9948: PPUSH
9949: CALL 7917 0 4
// ah = CreateHuman ;
9953: LD_ADDR_LOC 10
9957: PUSH
9958: CALL_OW 44
9962: ST_TO_ADDR
// pom = pom ^ ah ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_VAR 0 2
9972: PUSH
9973: LD_LOC 10
9977: ADD
9978: ST_TO_ADDR
// end ;
9979: GO 9906
9981: POP
9982: POP
// for i = 1 to 3 do
9983: LD_ADDR_VAR 0 3
9987: PUSH
9988: DOUBLE
9989: LD_INT 1
9991: DEC
9992: ST_TO_ADDR
9993: LD_INT 3
9995: PUSH
9996: FOR_TO
9997: IFFALSE 10071
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9999: LD_INT 2
10001: PPUSH
10002: LD_VAR 0 3
10006: PPUSH
10007: CALL 10489 0 2
10011: PPUSH
10012: LD_INT 8
10014: PPUSH
10015: LD_EXP 49
10019: PUSH
10020: LD_OWVAR 67
10024: ARRAY
10025: PPUSH
10026: LD_INT 2
10028: PPUSH
10029: LD_VAR 0 3
10033: PPUSH
10034: CALL 10705 0 2
10038: PPUSH
10039: CALL 7917 0 4
// ah = CreateHuman ;
10043: LD_ADDR_LOC 10
10047: PUSH
10048: CALL_OW 44
10052: ST_TO_ADDR
// pom = pom ^ ah ;
10053: LD_ADDR_VAR 0 2
10057: PUSH
10058: LD_VAR 0 2
10062: PUSH
10063: LD_LOC 10
10067: ADD
10068: ST_TO_ADDR
// end ;
10069: GO 9996
10071: POP
10072: POP
// for i = 1 to 4 do
10073: LD_ADDR_VAR 0 3
10077: PUSH
10078: DOUBLE
10079: LD_INT 1
10081: DEC
10082: ST_TO_ADDR
10083: LD_INT 4
10085: PUSH
10086: FOR_TO
10087: IFFALSE 10169
// begin prepare_human ( get_sex_uprava ( 2 , i + 7 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 2 , i + 7 ) ) ;
10089: LD_INT 2
10091: PPUSH
10092: LD_VAR 0 3
10096: PUSH
10097: LD_INT 7
10099: PLUS
10100: PPUSH
10101: CALL 10489 0 2
10105: PPUSH
10106: LD_INT 3
10108: PPUSH
10109: LD_EXP 49
10113: PUSH
10114: LD_OWVAR 67
10118: ARRAY
10119: PPUSH
10120: LD_INT 2
10122: PPUSH
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 7
10130: PLUS
10131: PPUSH
10132: CALL 10705 0 2
10136: PPUSH
10137: CALL 7917 0 4
// ah = CreateHuman ;
10141: LD_ADDR_LOC 10
10145: PUSH
10146: CALL_OW 44
10150: ST_TO_ADDR
// pom = pom ^ ah ;
10151: LD_ADDR_VAR 0 2
10155: PUSH
10156: LD_VAR 0 2
10160: PUSH
10161: LD_LOC 10
10165: ADD
10166: ST_TO_ADDR
// end ;
10167: GO 10086
10169: POP
10170: POP
// for i = 1 to 2 do
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: DOUBLE
10177: LD_INT 1
10179: DEC
10180: ST_TO_ADDR
10181: LD_INT 2
10183: PUSH
10184: FOR_TO
10185: IFFALSE 10241
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
10187: CALL 10454 0 0
10191: PPUSH
10192: LD_INT 4
10194: PPUSH
10195: LD_EXP 49
10199: PUSH
10200: LD_OWVAR 67
10204: ARRAY
10205: PPUSH
10206: LD_STRING 
10208: PPUSH
10209: CALL 7917 0 4
// ah = CreateHuman ;
10213: LD_ADDR_LOC 10
10217: PUSH
10218: CALL_OW 44
10222: ST_TO_ADDR
// pom = pom ^ ah ;
10223: LD_ADDR_VAR 0 2
10227: PUSH
10228: LD_VAR 0 2
10232: PUSH
10233: LD_LOC 10
10237: ADD
10238: ST_TO_ADDR
// end ;
10239: GO 10184
10241: POP
10242: POP
// for i = 1 to 2 do
10243: LD_ADDR_VAR 0 3
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_INT 2
10255: PUSH
10256: FOR_TO
10257: IFFALSE 10339
// begin prepare_human ( get_sex_uprava ( 2 , i + 13 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i + 13 ) ) ;
10259: LD_INT 2
10261: PPUSH
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 13
10269: PLUS
10270: PPUSH
10271: CALL 10489 0 2
10275: PPUSH
10276: LD_INT 8
10278: PPUSH
10279: LD_EXP 49
10283: PUSH
10284: LD_OWVAR 67
10288: ARRAY
10289: PPUSH
10290: LD_INT 2
10292: PPUSH
10293: LD_VAR 0 3
10297: PUSH
10298: LD_INT 13
10300: PLUS
10301: PPUSH
10302: CALL 10705 0 2
10306: PPUSH
10307: CALL 7917 0 4
// ah = CreateHuman ;
10311: LD_ADDR_LOC 10
10315: PUSH
10316: CALL_OW 44
10320: ST_TO_ADDR
// pom = pom ^ ah ;
10321: LD_ADDR_VAR 0 2
10325: PUSH
10326: LD_VAR 0 2
10330: PUSH
10331: LD_LOC 10
10335: ADD
10336: ST_TO_ADDR
// end ;
10337: GO 10256
10339: POP
10340: POP
// for i = 1 to 2 do
10341: LD_ADDR_VAR 0 3
10345: PUSH
10346: DOUBLE
10347: LD_INT 1
10349: DEC
10350: ST_TO_ADDR
10351: LD_INT 2
10353: PUSH
10354: FOR_TO
10355: IFFALSE 10437
// begin prepare_human ( get_sex_uprava ( 2 , i + 15 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 2 , i + 15 ) ) ;
10357: LD_INT 2
10359: PPUSH
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 15
10367: PLUS
10368: PPUSH
10369: CALL 10489 0 2
10373: PPUSH
10374: LD_INT 2
10376: PPUSH
10377: LD_EXP 49
10381: PUSH
10382: LD_OWVAR 67
10386: ARRAY
10387: PPUSH
10388: LD_INT 2
10390: PPUSH
10391: LD_VAR 0 3
10395: PUSH
10396: LD_INT 15
10398: PLUS
10399: PPUSH
10400: CALL 10705 0 2
10404: PPUSH
10405: CALL 7917 0 4
// ah = CreateHuman ;
10409: LD_ADDR_LOC 10
10413: PUSH
10414: CALL_OW 44
10418: ST_TO_ADDR
// pom = pom ^ ah ;
10419: LD_ADDR_VAR 0 2
10423: PUSH
10424: LD_VAR 0 2
10428: PUSH
10429: LD_LOC 10
10433: ADD
10434: ST_TO_ADDR
// end ;
10435: GO 10354
10437: POP
10438: POP
// JEDNOTKY_BAZE_3_LIST = pom ;
10439: LD_ADDR_EXP 12
10443: PUSH
10444: LD_VAR 0 2
10448: ST_TO_ADDR
// end ;
10449: LD_VAR 0 1
10453: RET
// function get_sex ; begin
10454: LD_INT 0
10456: PPUSH
// if Prob ( 20 ) then
10457: LD_INT 20
10459: PPUSH
10460: CALL_OW 13
10464: IFFALSE 10476
// result = sex_female else
10466: LD_ADDR_VAR 0 1
10470: PUSH
10471: LD_INT 2
10473: ST_TO_ADDR
10474: GO 10484
// result = sex_male ;
10476: LD_ADDR_VAR 0 1
10480: PUSH
10481: LD_INT 1
10483: ST_TO_ADDR
// end ;
10484: LD_VAR 0 1
10488: RET
// function get_sex_uprava ( ser , cis ) ; var a ; begin
10489: LD_INT 0
10491: PPUSH
10492: PPUSH
// case ser of 1 :
10493: LD_VAR 0 1
10497: PUSH
10498: LD_INT 1
10500: DOUBLE
10501: EQUAL
10502: IFTRUE 10506
10504: GO 10598
10506: POP
// if cis = 1 then
10507: LD_VAR 0 2
10511: PUSH
10512: LD_INT 1
10514: EQUAL
10515: IFFALSE 10527
// a = sex_female else
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: LD_INT 2
10524: ST_TO_ADDR
10525: GO 10596
// if cis in [ 3 , 4 , 5 , 7 , 8 , 13 , 14 , 15 , 20 , 23 ] then
10527: LD_VAR 0 2
10531: PUSH
10532: LD_INT 3
10534: PUSH
10535: LD_INT 4
10537: PUSH
10538: LD_INT 5
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 8
10546: PUSH
10547: LD_INT 13
10549: PUSH
10550: LD_INT 14
10552: PUSH
10553: LD_INT 15
10555: PUSH
10556: LD_INT 20
10558: PUSH
10559: LD_INT 23
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: IN
10574: IFFALSE 10586
// a = sex_male else
10576: LD_ADDR_VAR 0 4
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
10584: GO 10596
// a = get_sex ; 2 :
10586: LD_ADDR_VAR 0 4
10590: PUSH
10591: CALL 10454 0 0
10595: ST_TO_ADDR
10596: GO 10690
10598: LD_INT 2
10600: DOUBLE
10601: EQUAL
10602: IFTRUE 10606
10604: GO 10689
10606: POP
// if cis in [ 5 ] then
10607: LD_VAR 0 2
10611: PUSH
10612: LD_INT 5
10614: PUSH
10615: EMPTY
10616: LIST
10617: IN
10618: IFFALSE 10630
// a = sex_female else
10620: LD_ADDR_VAR 0 4
10624: PUSH
10625: LD_INT 2
10627: ST_TO_ADDR
10628: GO 10687
// if cis in [ 2 , 3 , 4 , 8 , 11 , 14 , 17 ] then
10630: LD_VAR 0 2
10634: PUSH
10635: LD_INT 2
10637: PUSH
10638: LD_INT 3
10640: PUSH
10641: LD_INT 4
10643: PUSH
10644: LD_INT 8
10646: PUSH
10647: LD_INT 11
10649: PUSH
10650: LD_INT 14
10652: PUSH
10653: LD_INT 17
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: IN
10665: IFFALSE 10677
// a = sex_male else
10667: LD_ADDR_VAR 0 4
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
10675: GO 10687
// a = get_sex ; end ;
10677: LD_ADDR_VAR 0 4
10681: PUSH
10682: CALL 10454 0 0
10686: ST_TO_ADDR
10687: GO 10690
10689: POP
// result = a ;
10690: LD_ADDR_VAR 0 3
10694: PUSH
10695: LD_VAR 0 4
10699: ST_TO_ADDR
// end ;
10700: LD_VAR 0 3
10704: RET
// function get_name ( serie , cislo ) ; var a ; begin
10705: LD_INT 0
10707: PPUSH
10708: PPUSH
// a =  ;
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_STRING 
10716: ST_TO_ADDR
// case serie of 1 :
10717: LD_VAR 0 1
10721: PUSH
10722: LD_INT 1
10724: DOUBLE
10725: EQUAL
10726: IFTRUE 10730
10728: GO 10948
10730: POP
// case cislo of 1 :
10731: LD_VAR 0 2
10735: PUSH
10736: LD_INT 1
10738: DOUBLE
10739: EQUAL
10740: IFTRUE 10744
10742: GO 10755
10744: POP
// a = Petronela Fagan ; 3 :
10745: LD_ADDR_VAR 0 4
10749: PUSH
10750: LD_STRING Petronela Fagan
10752: ST_TO_ADDR
10753: GO 10946
10755: LD_INT 3
10757: DOUBLE
10758: EQUAL
10759: IFTRUE 10763
10761: GO 10774
10763: POP
// a = Jaryn Floryk ; 4 :
10764: LD_ADDR_VAR 0 4
10768: PUSH
10769: LD_STRING Jaryn Floryk
10771: ST_TO_ADDR
10772: GO 10946
10774: LD_INT 4
10776: DOUBLE
10777: EQUAL
10778: IFTRUE 10782
10780: GO 10793
10782: POP
// a = Ira Smailer ; 5 :
10783: LD_ADDR_VAR 0 4
10787: PUSH
10788: LD_STRING Ira Smailer
10790: ST_TO_ADDR
10791: GO 10946
10793: LD_INT 5
10795: DOUBLE
10796: EQUAL
10797: IFTRUE 10801
10799: GO 10812
10801: POP
// a = Soren Rafin ; 7 :
10802: LD_ADDR_VAR 0 4
10806: PUSH
10807: LD_STRING Soren Rafin
10809: ST_TO_ADDR
10810: GO 10946
10812: LD_INT 7
10814: DOUBLE
10815: EQUAL
10816: IFTRUE 10820
10818: GO 10831
10820: POP
// a = Mark Kent ; 8 :
10821: LD_ADDR_VAR 0 4
10825: PUSH
10826: LD_STRING Mark Kent
10828: ST_TO_ADDR
10829: GO 10946
10831: LD_INT 8
10833: DOUBLE
10834: EQUAL
10835: IFTRUE 10839
10837: GO 10850
10839: POP
// a = Patrick Bull ; 13 :
10840: LD_ADDR_VAR 0 4
10844: PUSH
10845: LD_STRING Patrick Bull
10847: ST_TO_ADDR
10848: GO 10946
10850: LD_INT 13
10852: DOUBLE
10853: EQUAL
10854: IFTRUE 10858
10856: GO 10869
10858: POP
// a = Muzhid Galabi ; 14 :
10859: LD_ADDR_VAR 0 4
10863: PUSH
10864: LD_STRING Muzhid Galabi
10866: ST_TO_ADDR
10867: GO 10946
10869: LD_INT 14
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 10888
10877: POP
// a = Maxim Daigle ; 15 :
10878: LD_ADDR_VAR 0 4
10882: PUSH
10883: LD_STRING Maxim Daigle
10885: ST_TO_ADDR
10886: GO 10946
10888: LD_INT 15
10890: DOUBLE
10891: EQUAL
10892: IFTRUE 10896
10894: GO 10907
10896: POP
// a = Rick C. West ; 20 :
10897: LD_ADDR_VAR 0 4
10901: PUSH
10902: LD_STRING Rick C. West
10904: ST_TO_ADDR
10905: GO 10946
10907: LD_INT 20
10909: DOUBLE
10910: EQUAL
10911: IFTRUE 10915
10913: GO 10926
10915: POP
// a = Sinisa Mikhailovic ; 23 :
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_STRING Sinisa Mikhailovic
10923: ST_TO_ADDR
10924: GO 10946
10926: LD_INT 23
10928: DOUBLE
10929: EQUAL
10930: IFTRUE 10934
10932: GO 10945
10934: POP
// a = Wayne Kettlewell ; end ; 2 :
10935: LD_ADDR_VAR 0 4
10939: PUSH
10940: LD_STRING Wayne Kettlewell
10942: ST_TO_ADDR
10943: GO 10946
10945: POP
10946: GO 11118
10948: LD_INT 2
10950: DOUBLE
10951: EQUAL
10952: IFTRUE 10956
10954: GO 11117
10956: POP
// case cislo of 2 :
10957: LD_VAR 0 2
10961: PUSH
10962: LD_INT 2
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 10981
10970: POP
// a = Danne Rydrgren ; 3 :
10971: LD_ADDR_VAR 0 4
10975: PUSH
10976: LD_STRING Danne Rydrgren
10978: ST_TO_ADDR
10979: GO 11115
10981: LD_INT 3
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11000
10989: POP
// a = Alfred Van der Poel ; 4 :
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_STRING Alfred Van der Poel
10997: ST_TO_ADDR
10998: GO 11115
11000: LD_INT 4
11002: DOUBLE
11003: EQUAL
11004: IFTRUE 11008
11006: GO 11019
11008: POP
// a = Muhammad Ali ; 5 :
11009: LD_ADDR_VAR 0 4
11013: PUSH
11014: LD_STRING Muhammad Ali
11016: ST_TO_ADDR
11017: GO 11115
11019: LD_INT 5
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11038
11027: POP
// a = Elena Grubina ; 8 :
11028: LD_ADDR_VAR 0 4
11032: PUSH
11033: LD_STRING Elena Grubina
11035: ST_TO_ADDR
11036: GO 11115
11038: LD_INT 8
11040: DOUBLE
11041: EQUAL
11042: IFTRUE 11046
11044: GO 11057
11046: POP
// a = Oto Zimmerman ; 11 :
11047: LD_ADDR_VAR 0 4
11051: PUSH
11052: LD_STRING Oto Zimmerman
11054: ST_TO_ADDR
11055: GO 11115
11057: LD_INT 11
11059: DOUBLE
11060: EQUAL
11061: IFTRUE 11065
11063: GO 11076
11065: POP
// a = Neil Hoss ; 14 :
11066: LD_ADDR_VAR 0 4
11070: PUSH
11071: LD_STRING Neil Hoss
11073: ST_TO_ADDR
11074: GO 11115
11076: LD_INT 14
11078: DOUBLE
11079: EQUAL
11080: IFTRUE 11084
11082: GO 11095
11084: POP
// a = Cardi Nowitzke ; 17 :
11085: LD_ADDR_VAR 0 4
11089: PUSH
11090: LD_STRING Cardi Nowitzke
11092: ST_TO_ADDR
11093: GO 11115
11095: LD_INT 17
11097: DOUBLE
11098: EQUAL
11099: IFTRUE 11103
11101: GO 11114
11103: POP
// a = Leonard Van Horn ; end ; end ;
11104: LD_ADDR_VAR 0 4
11108: PUSH
11109: LD_STRING Leonard Van Horn
11111: ST_TO_ADDR
11112: GO 11115
11114: POP
11115: GO 11118
11117: POP
// result = a ;
11118: LD_ADDR_VAR 0 3
11122: PUSH
11123: LD_VAR 0 4
11127: ST_TO_ADDR
// end ;
11128: LD_VAR 0 3
11132: RET
// export function choose_vojaky ; var pom , i ; var ovyb ; var poc ; begin
11133: LD_INT 0
11135: PPUSH
11136: PPUSH
11137: PPUSH
11138: PPUSH
11139: PPUSH
// SetClass ( JMM , class_soldier ) ;
11140: LD_EXP 32
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: CALL_OW 336
// if Gary > 0 then
11152: LD_EXP 34
11156: PUSH
11157: LD_INT 0
11159: GREATER
11160: IFFALSE 11174
// SetClass ( Gary , class_soldier ) ;
11162: LD_EXP 34
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 336
// if Lisa > 0 then
11174: LD_EXP 37
11178: PUSH
11179: LD_INT 0
11181: GREATER
11182: IFFALSE 11196
// SetClass ( Lisa , class_soldier ) ;
11184: LD_EXP 37
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 336
// if Yamoko > 0 then
11196: LD_EXP 39
11200: PUSH
11201: LD_INT 0
11203: GREATER
11204: IFFALSE 11218
// SetClass ( Yamoko , class_soldier ) ;
11206: LD_EXP 39
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 336
// if Frank > 0 then
11218: LD_EXP 36
11222: PUSH
11223: LD_INT 0
11225: GREATER
11226: IFFALSE 11240
// SetClass ( Frank , class_soldier ) ;
11228: LD_EXP 36
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 336
// if Cornel > 0 then
11240: LD_EXP 38
11244: PUSH
11245: LD_INT 0
11247: GREATER
11248: IFFALSE 11262
// SetClass ( Cornel , class_soldier ) ;
11250: LD_EXP 38
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 336
// if Bobby > 0 then
11262: LD_EXP 35
11266: PUSH
11267: LD_INT 0
11269: GREATER
11270: IFFALSE 11284
// SetClass ( Bobby , class_soldier ) ;
11272: LD_EXP 35
11276: PPUSH
11277: LD_INT 1
11279: PPUSH
11280: CALL_OW 336
// if Cyrus > 0 then
11284: LD_EXP 40
11288: PUSH
11289: LD_INT 0
11291: GREATER
11292: IFFALSE 11306
// SetClass ( Cyrus , class_soldier ) ;
11294: LD_EXP 40
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: CALL_OW 336
// if Don > 0 then
11306: LD_EXP 41
11310: PUSH
11311: LD_INT 0
11313: GREATER
11314: IFFALSE 11328
// SetClass ( Don , class_engineer ) ;
11316: LD_EXP 41
11320: PPUSH
11321: LD_INT 2
11323: PPUSH
11324: CALL_OW 336
// if Brown > 0 then
11328: LD_EXP 42
11332: PUSH
11333: LD_INT 0
11335: GREATER
11336: IFFALSE 11350
// SetClass ( Brown , class_soldier ) ;
11338: LD_EXP 42
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 336
// ovyb = [ sel_not_changeable , sel_hired , sel_dont_change_class , JMM ] ;
11350: LD_ADDR_VAR 0 4
11354: PUSH
11355: LD_INT -4
11357: PUSH
11358: LD_INT -1
11360: PUSH
11361: LD_INT -6
11363: PUSH
11364: LD_EXP 32
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: ST_TO_ADDR
// ovyb = ovyb ^ [ sel_not_hired , Powell , sel_changeable , sel_change_class ] ;
11375: LD_ADDR_VAR 0 4
11379: PUSH
11380: LD_VAR 0 4
11384: PUSH
11385: LD_INT -2
11387: PUSH
11388: LD_EXP 33
11392: PUSH
11393: LD_INT -3
11395: PUSH
11396: LD_INT -5
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: ADD
11405: ST_TO_ADDR
// poc = 0 ;
11406: LD_ADDR_VAR 0 5
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// if Gary <> 0 and GARYL <> 7 then
11414: LD_EXP 34
11418: PUSH
11419: LD_INT 0
11421: NONEQUAL
11422: PUSH
11423: LD_EXP 19
11427: PUSH
11428: LD_INT 7
11430: NONEQUAL
11431: AND
11432: IFFALSE 11464
// begin ovyb = ovyb ^ Gary ;
11434: LD_ADDR_VAR 0 4
11438: PUSH
11439: LD_VAR 0 4
11443: PUSH
11444: LD_EXP 34
11448: ADD
11449: ST_TO_ADDR
// poc = poc + 1 ;
11450: LD_ADDR_VAR 0 5
11454: PUSH
11455: LD_VAR 0 5
11459: PUSH
11460: LD_INT 1
11462: PLUS
11463: ST_TO_ADDR
// end ; if Lisa <> 0 and LISAL <> 7 then
11464: LD_EXP 37
11468: PUSH
11469: LD_INT 0
11471: NONEQUAL
11472: PUSH
11473: LD_EXP 20
11477: PUSH
11478: LD_INT 7
11480: NONEQUAL
11481: AND
11482: IFFALSE 11514
// begin ovyb = ovyb ^ Lisa ;
11484: LD_ADDR_VAR 0 4
11488: PUSH
11489: LD_VAR 0 4
11493: PUSH
11494: LD_EXP 37
11498: ADD
11499: ST_TO_ADDR
// poc = poc + 1 ;
11500: LD_ADDR_VAR 0 5
11504: PUSH
11505: LD_VAR 0 5
11509: PUSH
11510: LD_INT 1
11512: PLUS
11513: ST_TO_ADDR
// end ; if Cornel <> 0 and CORNELL <> 7 then
11514: LD_EXP 38
11518: PUSH
11519: LD_INT 0
11521: NONEQUAL
11522: PUSH
11523: LD_EXP 23
11527: PUSH
11528: LD_INT 7
11530: NONEQUAL
11531: AND
11532: IFFALSE 11564
// begin ovyb = ovyb ^ Cornel ;
11534: LD_ADDR_VAR 0 4
11538: PUSH
11539: LD_VAR 0 4
11543: PUSH
11544: LD_EXP 38
11548: ADD
11549: ST_TO_ADDR
// poc = poc + 1 ;
11550: LD_ADDR_VAR 0 5
11554: PUSH
11555: LD_VAR 0 5
11559: PUSH
11560: LD_INT 1
11562: PLUS
11563: ST_TO_ADDR
// end ; if Frank <> 0 and FRANKL <> 7 then
11564: LD_EXP 36
11568: PUSH
11569: LD_INT 0
11571: NONEQUAL
11572: PUSH
11573: LD_EXP 22
11577: PUSH
11578: LD_INT 7
11580: NONEQUAL
11581: AND
11582: IFFALSE 11614
// begin ovyb = ovyb ^ Frank ;
11584: LD_ADDR_VAR 0 4
11588: PUSH
11589: LD_VAR 0 4
11593: PUSH
11594: LD_EXP 36
11598: ADD
11599: ST_TO_ADDR
// poc = poc + 1 ;
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_VAR 0 5
11609: PUSH
11610: LD_INT 1
11612: PLUS
11613: ST_TO_ADDR
// end ; if Yamoko <> 0 and ( Frank = 0 or FRANKL = 7 ) then
11614: LD_EXP 39
11618: PUSH
11619: LD_INT 0
11621: NONEQUAL
11622: PUSH
11623: LD_EXP 36
11627: PUSH
11628: LD_INT 0
11630: EQUAL
11631: PUSH
11632: LD_EXP 22
11636: PUSH
11637: LD_INT 7
11639: EQUAL
11640: OR
11641: AND
11642: IFFALSE 11674
// begin ovyb = ovyb ^ Yamoko ;
11644: LD_ADDR_VAR 0 4
11648: PUSH
11649: LD_VAR 0 4
11653: PUSH
11654: LD_EXP 39
11658: ADD
11659: ST_TO_ADDR
// poc = poc + 1 ;
11660: LD_ADDR_VAR 0 5
11664: PUSH
11665: LD_VAR 0 5
11669: PUSH
11670: LD_INT 1
11672: PLUS
11673: ST_TO_ADDR
// end ; if Bobby <> 0 and BOBL <> 7 then
11674: LD_EXP 35
11678: PUSH
11679: LD_INT 0
11681: NONEQUAL
11682: PUSH
11683: LD_EXP 24
11687: PUSH
11688: LD_INT 7
11690: NONEQUAL
11691: AND
11692: IFFALSE 11724
// begin ovyb = ovyb ^ Bobby ;
11694: LD_ADDR_VAR 0 4
11698: PUSH
11699: LD_VAR 0 4
11703: PUSH
11704: LD_EXP 35
11708: ADD
11709: ST_TO_ADDR
// poc = poc + 1 ;
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 5
11719: PUSH
11720: LD_INT 1
11722: PLUS
11723: ST_TO_ADDR
// end ; if Cyrus <> 0 and CYRL <> 7 then
11724: LD_EXP 40
11728: PUSH
11729: LD_INT 0
11731: NONEQUAL
11732: PUSH
11733: LD_EXP 25
11737: PUSH
11738: LD_INT 7
11740: NONEQUAL
11741: AND
11742: IFFALSE 11774
// begin ovyb = ovyb ^ Cyrus ;
11744: LD_ADDR_VAR 0 4
11748: PUSH
11749: LD_VAR 0 4
11753: PUSH
11754: LD_EXP 40
11758: ADD
11759: ST_TO_ADDR
// poc = poc + 1 ;
11760: LD_ADDR_VAR 0 5
11764: PUSH
11765: LD_VAR 0 5
11769: PUSH
11770: LD_INT 1
11772: PLUS
11773: ST_TO_ADDR
// end ; if Don <> 0 and DONL <> 7 then
11774: LD_EXP 41
11778: PUSH
11779: LD_INT 0
11781: NONEQUAL
11782: PUSH
11783: LD_EXP 26
11787: PUSH
11788: LD_INT 7
11790: NONEQUAL
11791: AND
11792: IFFALSE 11824
// begin ovyb = ovyb ^ Don ;
11794: LD_ADDR_VAR 0 4
11798: PUSH
11799: LD_VAR 0 4
11803: PUSH
11804: LD_EXP 41
11808: ADD
11809: ST_TO_ADDR
// poc = poc + 1 ;
11810: LD_ADDR_VAR 0 5
11814: PUSH
11815: LD_VAR 0 5
11819: PUSH
11820: LD_INT 1
11822: PLUS
11823: ST_TO_ADDR
// end ; if Brown <> 0 and BROWNL then
11824: LD_EXP 42
11828: PUSH
11829: LD_INT 0
11831: NONEQUAL
11832: PUSH
11833: LD_EXP 27
11837: AND
11838: IFFALSE 11870
// begin ovyb = ovyb ^ Brown ;
11840: LD_ADDR_VAR 0 4
11844: PUSH
11845: LD_VAR 0 4
11849: PUSH
11850: LD_EXP 42
11854: ADD
11855: ST_TO_ADDR
// poc = poc + 1 ;
11856: LD_ADDR_VAR 0 5
11860: PUSH
11861: LD_VAR 0 5
11865: PUSH
11866: LD_INT 1
11868: PLUS
11869: ST_TO_ADDR
// end ; pom = uprav_lidi ( lidi_other ) ;
11870: LD_ADDR_VAR 0 2
11874: PUSH
11875: LD_EXP 52
11879: PPUSH
11880: CALL 12237 0 1
11884: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11885: LD_ADDR_VAR 0 4
11889: PUSH
11890: LD_VAR 0 4
11894: PUSH
11895: LD_VAR 0 2
11899: ADD
11900: ST_TO_ADDR
// poc = poc + pom + 0 ;
11901: LD_ADDR_VAR 0 5
11905: PUSH
11906: LD_VAR 0 5
11910: PUSH
11911: LD_VAR 0 2
11915: PLUS
11916: PUSH
11917: LD_INT 0
11919: PLUS
11920: ST_TO_ADDR
// uc_side := You ;
11921: LD_ADDR_OWVAR 20
11925: PUSH
11926: LD_EXP 1
11930: ST_TO_ADDR
// uc_nation := nation_american ;
11931: LD_ADDR_OWVAR 21
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// uc_direction := 0 ;
11939: LD_ADDR_OWVAR 24
11943: PUSH
11944: LD_INT 0
11946: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , 6 ,  ) ;
11947: LD_INT 1
11949: PPUSH
11950: LD_INT 2
11952: PPUSH
11953: LD_INT 6
11955: PPUSH
11956: LD_STRING 
11958: PPUSH
11959: CALL 7917 0 4
// pom = CreateHuman ;
11963: LD_ADDR_VAR 0 2
11967: PUSH
11968: CALL_OW 44
11972: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11973: LD_ADDR_VAR 0 4
11977: PUSH
11978: LD_VAR 0 4
11982: PUSH
11983: LD_VAR 0 2
11987: ADD
11988: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
11989: LD_INT 1
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: LD_INT 6
11997: PPUSH
11998: LD_STRING 
12000: PPUSH
12001: CALL 7917 0 4
// pom = CreateHuman ;
12005: LD_ADDR_VAR 0 2
12009: PUSH
12010: CALL_OW 44
12014: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12015: LD_ADDR_VAR 0 4
12019: PUSH
12020: LD_VAR 0 4
12024: PUSH
12025: LD_VAR 0 2
12029: ADD
12030: ST_TO_ADDR
// poc = poc + 2 ;
12031: LD_ADDR_VAR 0 5
12035: PUSH
12036: LD_VAR 0 5
12040: PUSH
12041: LD_INT 2
12043: PLUS
12044: ST_TO_ADDR
// if poc < 20 then
12045: LD_VAR 0 5
12049: PUSH
12050: LD_INT 20
12052: LESS
12053: IFFALSE 12157
// for i := 1 to 20 - poc do
12055: LD_ADDR_VAR 0 3
12059: PUSH
12060: DOUBLE
12061: LD_INT 1
12063: DEC
12064: ST_TO_ADDR
12065: LD_INT 20
12067: PUSH
12068: LD_VAR 0 5
12072: MINUS
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12155
// begin if Rand ( 1 , 2 ) = 1 then
12077: LD_INT 1
12079: PPUSH
12080: LD_INT 2
12082: PPUSH
12083: CALL_OW 12
12087: PUSH
12088: LD_INT 1
12090: EQUAL
12091: IFFALSE 12111
// prepare_human ( sex_male , class_engineer , 6 ,  ) else
12093: LD_INT 1
12095: PPUSH
12096: LD_INT 2
12098: PPUSH
12099: LD_INT 6
12101: PPUSH
12102: LD_STRING 
12104: PPUSH
12105: CALL 7917 0 4
12109: GO 12127
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
12111: LD_INT 1
12113: PPUSH
12114: LD_INT 1
12116: PPUSH
12117: LD_INT 6
12119: PPUSH
12120: LD_STRING 
12122: PPUSH
12123: CALL 7917 0 4
// pom = CreateHuman ;
12127: LD_ADDR_VAR 0 2
12131: PUSH
12132: CALL_OW 44
12136: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12137: LD_ADDR_VAR 0 4
12141: PUSH
12142: LD_VAR 0 4
12146: PUSH
12147: LD_VAR 0 2
12151: ADD
12152: ST_TO_ADDR
// end ;
12153: GO 12074
12155: POP
12156: POP
// Amici_enter = CharacterSelection ( Choose 11 people , 11 , 11 , ovyb , [ [ class_engineer , 1 ] , [ class_soldier , 4 ] , [ class_mechanic , 0 ] ] ) ;
12157: LD_ADDR_EXP 43
12161: PUSH
12162: LD_STRING Choose 11 people
12164: PPUSH
12165: LD_INT 11
12167: PPUSH
12168: LD_INT 11
12170: PPUSH
12171: LD_VAR 0 4
12175: PPUSH
12176: LD_INT 2
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 1
12188: PUSH
12189: LD_INT 4
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 3
12198: PUSH
12199: LD_INT 0
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: LIST
12210: PPUSH
12211: CALL_OW 42
12215: ST_TO_ADDR
// Amici_enter = Amici_enter ^ JMM ;
12216: LD_ADDR_EXP 43
12220: PUSH
12221: LD_EXP 43
12225: PUSH
12226: LD_EXP 32
12230: ADD
12231: ST_TO_ADDR
// end ;
12232: LD_VAR 0 1
12236: RET
// function uprav_lidi ( lidi ) ; var pom , i ; var sk ; begin
12237: LD_INT 0
12239: PPUSH
12240: PPUSH
12241: PPUSH
12242: PPUSH
// pom = [ ] ;
12243: LD_ADDR_VAR 0 3
12247: PUSH
12248: EMPTY
12249: ST_TO_ADDR
// for i in lidi do
12250: LD_ADDR_VAR 0 4
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: FOR_IN
12261: IFFALSE 12404
// begin sk = get_skills ( i ) ;
12263: LD_ADDR_VAR 0 5
12267: PUSH
12268: LD_VAR 0 4
12272: PPUSH
12273: CALL 12421 0 1
12277: ST_TO_ADDR
// if sk [ 4 ] > sk [ 1 ] and sk [ 4 ] > sk [ 2 ] and sk [ 4 ] > sk [ 3 ] then
12278: LD_VAR 0 5
12282: PUSH
12283: LD_INT 4
12285: ARRAY
12286: PUSH
12287: LD_VAR 0 5
12291: PUSH
12292: LD_INT 1
12294: ARRAY
12295: GREATER
12296: PUSH
12297: LD_VAR 0 5
12301: PUSH
12302: LD_INT 4
12304: ARRAY
12305: PUSH
12306: LD_VAR 0 5
12310: PUSH
12311: LD_INT 2
12313: ARRAY
12314: GREATER
12315: AND
12316: PUSH
12317: LD_VAR 0 5
12321: PUSH
12322: LD_INT 4
12324: ARRAY
12325: PUSH
12326: LD_VAR 0 5
12330: PUSH
12331: LD_INT 3
12333: ARRAY
12334: GREATER
12335: AND
12336: IFFALSE 12340
// continue ;
12338: GO 12260
// if sk [ 1 ] > sk [ 2 ] then
12340: LD_VAR 0 5
12344: PUSH
12345: LD_INT 1
12347: ARRAY
12348: PUSH
12349: LD_VAR 0 5
12353: PUSH
12354: LD_INT 2
12356: ARRAY
12357: GREATER
12358: IFFALSE 12374
// SetClass ( i , class_soldier ) else
12360: LD_VAR 0 4
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 336
12372: GO 12386
// SetClass ( i , class_engineer ) ;
12374: LD_VAR 0 4
12378: PPUSH
12379: LD_INT 2
12381: PPUSH
12382: CALL_OW 336
// pom = pom ^ i ;
12386: LD_ADDR_VAR 0 3
12390: PUSH
12391: LD_VAR 0 3
12395: PUSH
12396: LD_VAR 0 4
12400: ADD
12401: ST_TO_ADDR
// end ;
12402: GO 12260
12404: POP
12405: POP
// result := pom ;
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: LD_VAR 0 3
12415: ST_TO_ADDR
// end ;
12416: LD_VAR 0 2
12420: RET
// function get_skills ( un ) ; var pom1 , pom2 , pom3 , pom4 ; begin
12421: LD_INT 0
12423: PPUSH
12424: PPUSH
12425: PPUSH
12426: PPUSH
12427: PPUSH
// pom1 := GetSkill ( un , skill_combat ) ;
12428: LD_ADDR_VAR 0 3
12432: PUSH
12433: LD_VAR 0 1
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 259
12445: ST_TO_ADDR
// pom2 := GetSkill ( un , skill_engineering ) ;
12446: LD_ADDR_VAR 0 4
12450: PUSH
12451: LD_VAR 0 1
12455: PPUSH
12456: LD_INT 2
12458: PPUSH
12459: CALL_OW 259
12463: ST_TO_ADDR
// pom3 := GetSkill ( un , skill_mechanical ) ;
12464: LD_ADDR_VAR 0 5
12468: PUSH
12469: LD_VAR 0 1
12473: PPUSH
12474: LD_INT 3
12476: PPUSH
12477: CALL_OW 259
12481: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_scientistic ) ;
12482: LD_ADDR_VAR 0 6
12486: PUSH
12487: LD_VAR 0 1
12491: PPUSH
12492: LD_INT 4
12494: PPUSH
12495: CALL_OW 259
12499: ST_TO_ADDR
// result := [ pom1 , pom2 , pom3 , pom4 ] end ;
12500: LD_ADDR_VAR 0 2
12504: PUSH
12505: LD_VAR 0 3
12509: PUSH
12510: LD_VAR 0 4
12514: PUSH
12515: LD_VAR 0 5
12519: PUSH
12520: LD_VAR 0 6
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: ST_TO_ADDR
12531: LD_VAR 0 2
12535: RET
// export function create_arabske_utoky_behem_mise ; var pom ; begin
12536: LD_INT 0
12538: PPUSH
12539: PPUSH
// uc_side = Arabi ;
12540: LD_ADDR_OWVAR 20
12544: PUSH
12545: LD_EXP 3
12549: ST_TO_ADDR
// uc_nation = nation_arabian ;
12550: LD_ADDR_OWVAR 21
12554: PUSH
12555: LD_INT 2
12557: ST_TO_ADDR
// pom = [ ] ;
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: EMPTY
12564: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12565: LD_ADDR_VAR 0 2
12569: PUSH
12570: CALL 10454 0 0
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: LD_INT 4
12580: PPUSH
12581: LD_STRING 
12583: PPUSH
12584: CALL 14018 0 4
12588: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12589: LD_ADDR_VAR 0 2
12593: PUSH
12594: LD_VAR 0 2
12598: PUSH
12599: CALL 10454 0 0
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: LD_INT 4
12609: PPUSH
12610: LD_STRING 
12612: PPUSH
12613: CALL 14018 0 4
12617: ADD
12618: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12619: LD_ADDR_VAR 0 2
12623: PUSH
12624: LD_VAR 0 2
12628: PUSH
12629: CALL 10454 0 0
12633: PPUSH
12634: LD_INT 8
12636: PPUSH
12637: LD_INT 5
12639: PPUSH
12640: LD_STRING 
12642: PPUSH
12643: CALL 14018 0 4
12647: ADD
12648: ST_TO_ADDR
// if difficulty > 1 then
12649: LD_OWVAR 67
12653: PUSH
12654: LD_INT 1
12656: GREATER
12657: IFFALSE 12689
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12659: LD_ADDR_VAR 0 2
12663: PUSH
12664: LD_VAR 0 2
12668: PUSH
12669: CALL 10454 0 0
12673: PPUSH
12674: LD_INT 8
12676: PPUSH
12677: LD_INT 5
12679: PPUSH
12680: LD_STRING 
12682: PPUSH
12683: CALL 14018 0 4
12687: ADD
12688: ST_TO_ADDR
// if difficulty > 2 then
12689: LD_OWVAR 67
12693: PUSH
12694: LD_INT 2
12696: GREATER
12697: IFFALSE 12729
// pom = pom ^ get_human ( get_sex , class_soldier , 5 ,  ) ;
12699: LD_ADDR_VAR 0 2
12703: PUSH
12704: LD_VAR 0 2
12708: PUSH
12709: CALL 10454 0 0
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_INT 5
12719: PPUSH
12720: LD_STRING 
12722: PPUSH
12723: CALL 14018 0 4
12727: ADD
12728: ST_TO_ADDR
// Ar_utok1_LIST = pom ;
12729: LD_ADDR_EXP 13
12733: PUSH
12734: LD_VAR 0 2
12738: ST_TO_ADDR
// pom = [ ] ;
12739: LD_ADDR_VAR 0 2
12743: PUSH
12744: EMPTY
12745: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
12746: LD_ADDR_OWVAR 37
12750: PUSH
12751: LD_INT 14
12753: ST_TO_ADDR
// vc_weapon = ar_gun ;
12754: LD_ADDR_OWVAR 40
12758: PUSH
12759: LD_INT 27
12761: ST_TO_ADDR
// vc_control = control_apeman ;
12762: LD_ADDR_OWVAR 38
12766: PUSH
12767: LD_INT 5
12769: ST_TO_ADDR
// vc_engine = engine_siberite ;
12770: LD_ADDR_OWVAR 39
12774: PUSH
12775: LD_INT 3
12777: ST_TO_ADDR
// av = CreateVehicle ;
12778: LD_ADDR_LOC 11
12782: PUSH
12783: CALL_OW 45
12787: ST_TO_ADDR
// pom = av ;
12788: LD_ADDR_VAR 0 2
12792: PUSH
12793: LD_LOC 11
12797: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 4 ,  ) ;
12798: LD_ADDR_LOC 10
12802: PUSH
12803: CALL 10454 0 0
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: LD_INT 4
12813: PPUSH
12814: LD_STRING 
12816: PPUSH
12817: CALL 14018 0 4
12821: ST_TO_ADDR
// vc_control = control_manual ;
12822: LD_ADDR_OWVAR 38
12826: PUSH
12827: LD_INT 1
12829: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
12830: LD_ADDR_OWVAR 40
12834: PUSH
12835: LD_INT 25
12837: ST_TO_ADDR
// av = CreateVehicle ;
12838: LD_ADDR_LOC 11
12842: PUSH
12843: CALL_OW 45
12847: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
12848: LD_LOC 10
12852: PPUSH
12853: LD_LOC 11
12857: PPUSH
12858: CALL_OW 52
// pom = pom ^ av ;
12862: LD_ADDR_VAR 0 2
12866: PUSH
12867: LD_VAR 0 2
12871: PUSH
12872: LD_LOC 11
12876: ADD
12877: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12878: LD_ADDR_VAR 0 2
12882: PUSH
12883: LD_VAR 0 2
12887: PUSH
12888: CALL 10454 0 0
12892: PPUSH
12893: LD_INT 1
12895: PPUSH
12896: LD_INT 4
12898: PPUSH
12899: LD_STRING 
12901: PPUSH
12902: CALL 14018 0 4
12906: ADD
12907: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12908: LD_ADDR_VAR 0 2
12912: PUSH
12913: LD_VAR 0 2
12917: PUSH
12918: CALL 10454 0 0
12922: PPUSH
12923: LD_INT 2
12925: PPUSH
12926: LD_EXP 49
12930: PUSH
12931: LD_OWVAR 67
12935: ARRAY
12936: PPUSH
12937: LD_STRING 
12939: PPUSH
12940: CALL 14018 0 4
12944: ADD
12945: ST_TO_ADDR
// if difficulty > 1 then
12946: LD_OWVAR 67
12950: PUSH
12951: LD_INT 1
12953: GREATER
12954: IFFALSE 13032
// begin pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12956: LD_ADDR_VAR 0 2
12960: PUSH
12961: LD_VAR 0 2
12965: PUSH
12966: CALL 10454 0 0
12970: PPUSH
12971: LD_INT 2
12973: PPUSH
12974: LD_EXP 49
12978: PUSH
12979: LD_OWVAR 67
12983: ARRAY
12984: PPUSH
12985: LD_STRING 
12987: PPUSH
12988: CALL 14018 0 4
12992: ADD
12993: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 2
13003: PUSH
13004: CALL 10454 0 0
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: LD_EXP 49
13016: PUSH
13017: LD_OWVAR 67
13021: ARRAY
13022: PPUSH
13023: LD_STRING 
13025: PPUSH
13026: CALL 14018 0 4
13030: ADD
13031: ST_TO_ADDR
// end ; Ar_utok2_LIST = pom ;
13032: LD_ADDR_EXP 14
13036: PUSH
13037: LD_VAR 0 2
13041: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: CALL 10454 0 0
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: LD_INT 4
13057: PPUSH
13058: LD_STRING 
13060: PPUSH
13061: CALL 14018 0 4
13065: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13066: LD_ADDR_VAR 0 2
13070: PUSH
13071: LD_VAR 0 2
13075: PUSH
13076: CALL 10454 0 0
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 4
13086: PPUSH
13087: LD_STRING 
13089: PPUSH
13090: CALL 14018 0 4
13094: ADD
13095: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13096: LD_ADDR_VAR 0 2
13100: PUSH
13101: LD_VAR 0 2
13105: PUSH
13106: CALL 10454 0 0
13110: PPUSH
13111: LD_INT 8
13113: PPUSH
13114: LD_EXP 49
13118: PUSH
13119: LD_OWVAR 67
13123: ARRAY
13124: PPUSH
13125: LD_STRING 
13127: PPUSH
13128: CALL 14018 0 4
13132: ADD
13133: ST_TO_ADDR
// if difficulty > 1 then
13134: LD_OWVAR 67
13138: PUSH
13139: LD_INT 1
13141: GREATER
13142: IFFALSE 13270
// begin pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13144: LD_ADDR_VAR 0 2
13148: PUSH
13149: LD_VAR 0 2
13153: PUSH
13154: CALL 10454 0 0
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: LD_INT 4
13164: PPUSH
13165: LD_STRING 
13167: PPUSH
13168: CALL 14018 0 4
13172: ADD
13173: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13174: LD_ADDR_VAR 0 2
13178: PUSH
13179: LD_VAR 0 2
13183: PUSH
13184: CALL 10454 0 0
13188: PPUSH
13189: LD_INT 2
13191: PPUSH
13192: LD_EXP 49
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PPUSH
13203: LD_STRING 
13205: PPUSH
13206: CALL 14018 0 4
13210: ADD
13211: ST_TO_ADDR
// vc_control = control_apeman ;
13212: LD_ADDR_OWVAR 38
13216: PUSH
13217: LD_INT 5
13219: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
13220: LD_ADDR_OWVAR 37
13224: PUSH
13225: LD_INT 11
13227: ST_TO_ADDR
// vc_engine = engine_combustion ;
13228: LD_ADDR_OWVAR 39
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// vc_weapon = ar_light_gun ;
13236: LD_ADDR_OWVAR 40
13240: PUSH
13241: LD_INT 23
13243: ST_TO_ADDR
// av = CreateVehicle ;
13244: LD_ADDR_LOC 11
13248: PUSH
13249: CALL_OW 45
13253: ST_TO_ADDR
// pom = pom ^ av ;
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_VAR 0 2
13263: PUSH
13264: LD_LOC 11
13268: ADD
13269: ST_TO_ADDR
// end ; Ar_utok3_LIST = pom ;
13270: LD_ADDR_EXP 15
13274: PUSH
13275: LD_VAR 0 2
13279: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 6 ,  ) ;
13280: LD_ADDR_VAR 0 2
13284: PUSH
13285: CALL 10454 0 0
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: LD_INT 6
13295: PPUSH
13296: LD_STRING 
13298: PPUSH
13299: CALL 14018 0 4
13303: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
13304: LD_ADDR_OWVAR 37
13308: PUSH
13309: LD_INT 14
13311: ST_TO_ADDR
// vc_weapon = ar_gun ;
13312: LD_ADDR_OWVAR 40
13316: PUSH
13317: LD_INT 27
13319: ST_TO_ADDR
// vc_control = control_apeman ;
13320: LD_ADDR_OWVAR 38
13324: PUSH
13325: LD_INT 5
13327: ST_TO_ADDR
// vc_engine = engine_siberite ;
13328: LD_ADDR_OWVAR 39
13332: PUSH
13333: LD_INT 3
13335: ST_TO_ADDR
// av = CreateVehicle ;
13336: LD_ADDR_LOC 11
13340: PUSH
13341: CALL_OW 45
13345: ST_TO_ADDR
// pom = pom ^ av ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_VAR 0 2
13355: PUSH
13356: LD_LOC 11
13360: ADD
13361: ST_TO_ADDR
// av = CreateVehicle ;
13362: LD_ADDR_LOC 11
13366: PUSH
13367: CALL_OW 45
13371: ST_TO_ADDR
// pom = pom ^ av ;
13372: LD_ADDR_VAR 0 2
13376: PUSH
13377: LD_VAR 0 2
13381: PUSH
13382: LD_LOC 11
13386: ADD
13387: ST_TO_ADDR
// av = CreateVehicle ;
13388: LD_ADDR_LOC 11
13392: PUSH
13393: CALL_OW 45
13397: ST_TO_ADDR
// pom = pom ^ av ;
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_VAR 0 2
13407: PUSH
13408: LD_LOC 11
13412: ADD
13413: ST_TO_ADDR
// Ar_utok4_LIST = pom ;
13414: LD_ADDR_EXP 16
13418: PUSH
13419: LD_VAR 0 2
13423: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13424: LD_ADDR_VAR 0 2
13428: PUSH
13429: CALL 10454 0 0
13433: PPUSH
13434: LD_INT 1
13436: PPUSH
13437: LD_EXP 49
13441: PUSH
13442: LD_OWVAR 67
13446: ARRAY
13447: PPUSH
13448: LD_STRING 
13450: PPUSH
13451: CALL 14018 0 4
13455: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13456: LD_ADDR_LOC 10
13460: PUSH
13461: CALL 10454 0 0
13465: PPUSH
13466: LD_INT 3
13468: PPUSH
13469: LD_EXP 49
13473: PUSH
13474: LD_OWVAR 67
13478: ARRAY
13479: PPUSH
13480: LD_STRING 
13482: PPUSH
13483: CALL 14018 0 4
13487: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13488: LD_ADDR_OWVAR 40
13492: PUSH
13493: LD_INT 28
13495: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13496: LD_ADDR_OWVAR 37
13500: PUSH
13501: LD_INT 13
13503: ST_TO_ADDR
// vc_control = control_manual ;
13504: LD_ADDR_OWVAR 38
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// vc_engine = engine_siberite ;
13512: LD_ADDR_OWVAR 39
13516: PUSH
13517: LD_INT 3
13519: ST_TO_ADDR
// av = CreateVehicle ;
13520: LD_ADDR_LOC 11
13524: PUSH
13525: CALL_OW 45
13529: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13530: LD_LOC 10
13534: PPUSH
13535: LD_LOC 11
13539: PPUSH
13540: CALL_OW 52
// pom = pom ^ av ;
13544: LD_ADDR_VAR 0 2
13548: PUSH
13549: LD_VAR 0 2
13553: PUSH
13554: LD_LOC 11
13558: ADD
13559: ST_TO_ADDR
// if difficulty > 1 then
13560: LD_OWVAR 67
13564: PUSH
13565: LD_INT 1
13567: GREATER
13568: IFFALSE 13605
// begin vc_weapon = ar_selfpropelled_bomb ;
13570: LD_ADDR_OWVAR 40
13574: PUSH
13575: LD_INT 29
13577: ST_TO_ADDR
// av = CreateVehicle ;
13578: LD_ADDR_LOC 11
13582: PUSH
13583: CALL_OW 45
13587: ST_TO_ADDR
// pom = - pom ^ av ;
13588: LD_ADDR_VAR 0 2
13592: PUSH
13593: LD_VAR 0 2
13597: NEG
13598: PUSH
13599: LD_LOC 11
13603: ADD
13604: ST_TO_ADDR
// end ; pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13605: LD_ADDR_VAR 0 2
13609: PUSH
13610: LD_VAR 0 2
13614: PUSH
13615: CALL 10454 0 0
13619: PPUSH
13620: LD_INT 1
13622: PPUSH
13623: LD_EXP 49
13627: PUSH
13628: LD_OWVAR 67
13632: ARRAY
13633: PPUSH
13634: LD_STRING 
13636: PPUSH
13637: CALL 14018 0 4
13641: ADD
13642: ST_TO_ADDR
// if difficulty > 2 then
13643: LD_OWVAR 67
13647: PUSH
13648: LD_INT 2
13650: GREATER
13651: IFFALSE 13767
// begin pom = pom ^ get_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
13653: LD_ADDR_VAR 0 2
13657: PUSH
13658: LD_VAR 0 2
13662: PUSH
13663: CALL 10454 0 0
13667: PPUSH
13668: LD_INT 4
13670: PPUSH
13671: LD_EXP 49
13675: PUSH
13676: LD_OWVAR 67
13680: ARRAY
13681: PPUSH
13682: LD_STRING 
13684: PPUSH
13685: CALL 14018 0 4
13689: ADD
13690: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13691: LD_ADDR_VAR 0 2
13695: PUSH
13696: LD_VAR 0 2
13700: PUSH
13701: CALL 10454 0 0
13705: PPUSH
13706: LD_INT 8
13708: PPUSH
13709: LD_EXP 49
13713: PUSH
13714: LD_OWVAR 67
13718: ARRAY
13719: PPUSH
13720: LD_STRING 
13722: PPUSH
13723: CALL 14018 0 4
13727: ADD
13728: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_VAR 0 2
13738: PUSH
13739: CALL 10454 0 0
13743: PPUSH
13744: LD_INT 8
13746: PPUSH
13747: LD_EXP 49
13751: PUSH
13752: LD_OWVAR 67
13756: ARRAY
13757: PPUSH
13758: LD_STRING 
13760: PPUSH
13761: CALL 14018 0 4
13765: ADD
13766: ST_TO_ADDR
// end ; Ar_utoklast_LIST = pom ;
13767: LD_ADDR_EXP 17
13771: PUSH
13772: LD_VAR 0 2
13776: ST_TO_ADDR
// pom = get_human ( get_sex , class_mortar , 4 ,  ) ;
13777: LD_ADDR_VAR 0 2
13781: PUSH
13782: CALL 10454 0 0
13786: PPUSH
13787: LD_INT 8
13789: PPUSH
13790: LD_INT 4
13792: PPUSH
13793: LD_STRING 
13795: PPUSH
13796: CALL 14018 0 4
13800: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13801: LD_ADDR_OWVAR 40
13805: PUSH
13806: LD_INT 28
13808: ST_TO_ADDR
// vc_engine = engine_combustion ;
13809: LD_ADDR_OWVAR 39
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13817: LD_ADDR_OWVAR 37
13821: PUSH
13822: LD_INT 13
13824: ST_TO_ADDR
// if difficulty = 1 then
13825: LD_OWVAR 67
13829: PUSH
13830: LD_INT 1
13832: EQUAL
13833: IFFALSE 13855
// begin vc_control = control_apeman ;
13835: LD_ADDR_OWVAR 38
13839: PUSH
13840: LD_INT 5
13842: ST_TO_ADDR
// av = CreateVehicle ;
13843: LD_ADDR_LOC 11
13847: PUSH
13848: CALL_OW 45
13852: ST_TO_ADDR
// end else
13853: GO 13919
// begin vc_control = control_manual ;
13855: LD_ADDR_OWVAR 38
13859: PUSH
13860: LD_INT 1
13862: ST_TO_ADDR
// av = CreateVehicle ;
13863: LD_ADDR_LOC 11
13867: PUSH
13868: CALL_OW 45
13872: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13873: LD_ADDR_LOC 10
13877: PUSH
13878: CALL 10454 0 0
13882: PPUSH
13883: LD_INT 3
13885: PPUSH
13886: LD_EXP 49
13890: PUSH
13891: LD_OWVAR 67
13895: ARRAY
13896: PPUSH
13897: LD_STRING 
13899: PPUSH
13900: CALL 14018 0 4
13904: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13905: LD_LOC 10
13909: PPUSH
13910: LD_LOC 11
13914: PPUSH
13915: CALL_OW 52
// end ; pom = pom ^ av ;
13919: LD_ADDR_VAR 0 2
13923: PUSH
13924: LD_VAR 0 2
13928: PUSH
13929: LD_LOC 11
13933: ADD
13934: ST_TO_ADDR
// vc_control = control_apeman ;
13935: LD_ADDR_OWVAR 38
13939: PUSH
13940: LD_INT 5
13942: ST_TO_ADDR
// av = CreateVehicle ;
13943: LD_ADDR_LOC 11
13947: PUSH
13948: CALL_OW 45
13952: ST_TO_ADDR
// pom = pom ^ av ;
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_VAR 0 2
13962: PUSH
13963: LD_LOC 11
13967: ADD
13968: ST_TO_ADDR
// vc_weapon = ar_radar ;
13969: LD_ADDR_OWVAR 40
13973: PUSH
13974: LD_INT 30
13976: ST_TO_ADDR
// av = CreateVehicle ;
13977: LD_ADDR_LOC 11
13981: PUSH
13982: CALL_OW 45
13986: ST_TO_ADDR
// pom = pom ^ av ;
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_VAR 0 2
13996: PUSH
13997: LD_LOC 11
14001: ADD
14002: ST_TO_ADDR
// Ar_backa_LIST = pom ;
14003: LD_ADDR_EXP 18
14007: PUSH
14008: LD_VAR 0 2
14012: ST_TO_ADDR
// end ;
14013: LD_VAR 0 1
14017: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
14018: LD_INT 0
14020: PPUSH
14021: PPUSH
// PrepareHuman ( sex , clas , level ) ;
14022: LD_VAR 0 1
14026: PPUSH
14027: LD_VAR 0 2
14031: PPUSH
14032: LD_VAR 0 3
14036: PPUSH
14037: CALL_OW 380
// hc_name := name ;
14041: LD_ADDR_OWVAR 26
14045: PUSH
14046: LD_VAR 0 4
14050: ST_TO_ADDR
// pom = CreateHuman ;
14051: LD_ADDR_VAR 0 6
14055: PUSH
14056: CALL_OW 44
14060: ST_TO_ADDR
// result := pom ;
14061: LD_ADDR_VAR 0 5
14065: PUSH
14066: LD_VAR 0 6
14070: ST_TO_ADDR
// end ; end_of_file
14071: LD_VAR 0 5
14075: RET
// var plazici ; var navrat ; var zradci ; var pom , i ; var pocet_spadlych_beden ; every 0 0$0.1 do
14076: GO 14078
14078: DISABLE
// begin pocet_spadlych_beden = 0 ;
14079: LD_ADDR_LOC 22
14083: PUSH
14084: LD_INT 0
14086: ST_TO_ADDR
// end ;
14087: END
// every 0 0$0.1 do var sold ;
14088: GO 14090
14090: DISABLE
14091: LD_INT 0
14093: PPUSH
// begin navrat := false ;
14094: LD_ADDR_LOC 18
14098: PUSH
14099: LD_INT 0
14101: ST_TO_ADDR
// sold = UnitFilter ( Amici_enter , [ [ f_class , class_soldier ] ] ) ;
14102: LD_ADDR_VAR 0 1
14106: PUSH
14107: LD_EXP 43
14111: PPUSH
14112: LD_INT 25
14114: PUSH
14115: LD_INT 1
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: PPUSH
14125: CALL_OW 72
14129: ST_TO_ADDR
// if sold < 4 then
14130: LD_VAR 0 1
14134: PUSH
14135: LD_INT 4
14137: LESS
14138: IFFALSE 14149
// msg ( ERROR: malo vojaku . je to v prdeli ) else
14140: LD_STRING ERROR: malo vojaku . je to v prdeli
14142: PPUSH
14143: CALL_OW 100
14147: GO 14196
// plazici := [ sold [ 1 ] , sold [ 2 ] , sold [ 3 ] , sold [ 4 ] ] ;
14149: LD_ADDR_LOC 17
14153: PUSH
14154: LD_VAR 0 1
14158: PUSH
14159: LD_INT 1
14161: ARRAY
14162: PUSH
14163: LD_VAR 0 1
14167: PUSH
14168: LD_INT 2
14170: ARRAY
14171: PUSH
14172: LD_VAR 0 1
14176: PUSH
14177: LD_INT 3
14179: ARRAY
14180: PUSH
14181: LD_VAR 0 1
14185: PUSH
14186: LD_INT 4
14188: ARRAY
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: ST_TO_ADDR
// ComMoveXY ( Radar_enter , 87 , 137 ) ;
14196: LD_EXP 44
14200: PPUSH
14201: LD_INT 87
14203: PPUSH
14204: LD_INT 137
14206: PPUSH
14207: CALL_OW 111
// AddComMoveXY ( Radar_enter , 89 , 134 ) ;
14211: LD_EXP 44
14215: PPUSH
14216: LD_INT 89
14218: PPUSH
14219: LD_INT 134
14221: PPUSH
14222: CALL_OW 171
// AddComMoveXY ( Radar_enter , 91 , 131 ) ;
14226: LD_EXP 44
14230: PPUSH
14231: LD_INT 91
14233: PPUSH
14234: LD_INT 131
14236: PPUSH
14237: CALL_OW 171
// AddComHold ( Radar_enter ) ;
14241: LD_EXP 44
14245: PPUSH
14246: CALL_OW 200
// AddComMoveXY ( plazici [ 1 ] , 84 , 127 ) ;
14250: LD_LOC 17
14254: PUSH
14255: LD_INT 1
14257: ARRAY
14258: PPUSH
14259: LD_INT 84
14261: PPUSH
14262: LD_INT 127
14264: PPUSH
14265: CALL_OW 171
// AddComCrawl ( plazici [ 1 ] ) ;
14269: LD_LOC 17
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: CALL_OW 197
// AddComMoveXY ( plazici [ 1 ] , 91 , 126 ) ;
14282: LD_LOC 17
14286: PUSH
14287: LD_INT 1
14289: ARRAY
14290: PPUSH
14291: LD_INT 91
14293: PPUSH
14294: LD_INT 126
14296: PPUSH
14297: CALL_OW 171
// AddComMoveXY ( plazici [ 2 ] , 85 , 127 ) ;
14301: LD_LOC 17
14305: PUSH
14306: LD_INT 2
14308: ARRAY
14309: PPUSH
14310: LD_INT 85
14312: PPUSH
14313: LD_INT 127
14315: PPUSH
14316: CALL_OW 171
// AddComCrawl ( plazici [ 2 ] ) ;
14320: LD_LOC 17
14324: PUSH
14325: LD_INT 2
14327: ARRAY
14328: PPUSH
14329: CALL_OW 197
// AddComMoveXY ( plazici [ 2 ] , 93 , 128 ) ;
14333: LD_LOC 17
14337: PUSH
14338: LD_INT 2
14340: ARRAY
14341: PPUSH
14342: LD_INT 93
14344: PPUSH
14345: LD_INT 128
14347: PPUSH
14348: CALL_OW 171
// AddComMoveXY ( plazici [ 3 ] , 83 , 126 ) ;
14352: LD_LOC 17
14356: PUSH
14357: LD_INT 3
14359: ARRAY
14360: PPUSH
14361: LD_INT 83
14363: PPUSH
14364: LD_INT 126
14366: PPUSH
14367: CALL_OW 171
// AddComCrawl ( plazici [ 3 ] ) ;
14371: LD_LOC 17
14375: PUSH
14376: LD_INT 3
14378: ARRAY
14379: PPUSH
14380: CALL_OW 197
// AddComMoveXY ( plazici [ 3 ] , 92 , 128 ) ;
14384: LD_LOC 17
14388: PUSH
14389: LD_INT 3
14391: ARRAY
14392: PPUSH
14393: LD_INT 92
14395: PPUSH
14396: LD_INT 128
14398: PPUSH
14399: CALL_OW 171
// AddComMoveXY ( plazici [ 4 ] , 82 , 125 ) ;
14403: LD_LOC 17
14407: PUSH
14408: LD_INT 4
14410: ARRAY
14411: PPUSH
14412: LD_INT 82
14414: PPUSH
14415: LD_INT 125
14417: PPUSH
14418: CALL_OW 171
// AddComCrawl ( plazici [ 4 ] ) ;
14422: LD_LOC 17
14426: PUSH
14427: LD_INT 4
14429: ARRAY
14430: PPUSH
14431: CALL_OW 197
// AddComMoveXY ( plazici [ 4 ] , 90 , 127 ) ;
14435: LD_LOC 17
14439: PUSH
14440: LD_INT 4
14442: ARRAY
14443: PPUSH
14444: LD_INT 90
14446: PPUSH
14447: LD_INT 127
14449: PPUSH
14450: CALL_OW 171
// AddComHold ( plazici ) ;
14454: LD_LOC 17
14458: PPUSH
14459: CALL_OW 200
// CenterNowOnXY ( 92 , 135 ) ;
14463: LD_INT 92
14465: PPUSH
14466: LD_INT 135
14468: PPUSH
14469: CALL_OW 86
// end ;
14473: PPOPN 1
14475: END
// every 0 0$0.5 trigger IsAt ( Radar_enter , 91 , 131 ) do
14476: LD_EXP 44
14480: PPUSH
14481: LD_INT 91
14483: PPUSH
14484: LD_INT 131
14486: PPUSH
14487: CALL_OW 307
14491: IFFALSE 14532
14493: GO 14495
14495: DISABLE
// begin ComMoveXY ( mrtvola , 105 , 139 ) ;
14496: LD_INT 64
14498: PPUSH
14499: LD_INT 105
14501: PPUSH
14502: LD_INT 139
14504: PPUSH
14505: CALL_OW 111
// AddComTurnXY ( mrtvola , 103 , 137 ) ;
14509: LD_INT 64
14511: PPUSH
14512: LD_INT 103
14514: PPUSH
14515: LD_INT 137
14517: PPUSH
14518: CALL_OW 178
// CenterOnXY ( 97 , 132 ) ;
14522: LD_INT 97
14524: PPUSH
14525: LD_INT 132
14527: PPUSH
14528: CALL_OW 84
// end ;
14532: END
// every 0 0$1 trigger IsAt ( mrtvola , 105 , 139 ) do
14533: LD_INT 64
14535: PPUSH
14536: LD_INT 105
14538: PPUSH
14539: LD_INT 139
14541: PPUSH
14542: CALL_OW 307
14546: IFFALSE 14571
14548: GO 14550
14550: DISABLE
// begin ComExitBuilding ( zradce1 ) ;
14551: LD_INT 65
14553: PPUSH
14554: CALL_OW 122
// ComMoveXY ( zradce1 , 107 , 138 ) ;
14558: LD_INT 65
14560: PPUSH
14561: LD_INT 107
14563: PPUSH
14564: LD_INT 138
14566: PPUSH
14567: CALL_OW 111
// end ;
14571: END
// every 0 0$1 trigger IsAt ( zradce1 , 107 , 138 ) do
14572: LD_INT 65
14574: PPUSH
14575: LD_INT 107
14577: PPUSH
14578: LD_INT 138
14580: PPUSH
14581: CALL_OW 307
14585: IFFALSE 15143
14587: GO 14589
14589: DISABLE
// begin ComTurnUnit ( mrtvola , zradce1 ) ;
14590: LD_INT 64
14592: PPUSH
14593: LD_INT 65
14595: PPUSH
14596: CALL_OW 119
// ComTurnUnit ( zradce1 , mrtvola ) ;
14600: LD_INT 65
14602: PPUSH
14603: LD_INT 64
14605: PPUSH
14606: CALL_OW 119
// SayNoFace ( mrtvola , D1a-Merc1-1 ) ;
14610: LD_INT 64
14612: PPUSH
14613: LD_STRING D1a-Merc1-1
14615: PPUSH
14616: CALL_OW 89
// SayNoFace ( zradce1 , D1a-FMerc2-1 ) ;
14620: LD_INT 65
14622: PPUSH
14623: LD_STRING D1a-FMerc2-1
14625: PPUSH
14626: CALL_OW 89
// wait ( 0 0$0.3 ) ;
14630: LD_INT 10
14632: PPUSH
14633: CALL_OW 67
// ComTurnXY ( mrtvola , 101 , 141 ) ;
14637: LD_INT 64
14639: PPUSH
14640: LD_INT 101
14642: PPUSH
14643: LD_INT 141
14645: PPUSH
14646: CALL_OW 118
// wait ( 10 ) ;
14650: LD_INT 10
14652: PPUSH
14653: CALL_OW 67
// ComMoveUnit ( zradce1 , mrtvola ) ;
14657: LD_INT 65
14659: PPUSH
14660: LD_INT 64
14662: PPUSH
14663: CALL_OW 112
// SetLives ( mrtvola , 300 ) ;
14667: LD_INT 64
14669: PPUSH
14670: LD_INT 300
14672: PPUSH
14673: CALL_OW 234
// wait ( 0 0$1 ) ;
14677: LD_INT 35
14679: PPUSH
14680: CALL_OW 67
// AddComTurnUnit ( zradce1 , mrtvola ) ;
14684: LD_INT 65
14686: PPUSH
14687: LD_INT 64
14689: PPUSH
14690: CALL_OW 179
// AddComHeal ( zradce1 , mrtvola ) ;
14694: LD_INT 65
14696: PPUSH
14697: LD_INT 64
14699: PPUSH
14700: CALL_OW 188
// repeat wait ( 3 ) until GetLives ( mrtvola ) > 340 ;
14704: LD_INT 3
14706: PPUSH
14707: CALL_OW 67
14711: LD_INT 64
14713: PPUSH
14714: CALL_OW 256
14718: PUSH
14719: LD_INT 340
14721: GREATER
14722: IFFALSE 14704
// SetLives ( mrtvola , 10 ) ;
14724: LD_INT 64
14726: PPUSH
14727: LD_INT 10
14729: PPUSH
14730: CALL_OW 234
// enable ( 80 ) ;
14734: LD_INT 80
14736: ENABLE_MARKED
// wait ( 0 0$0.5 ) ;
14737: LD_INT 18
14739: PPUSH
14740: CALL_OW 67
// ForceSayNoFace ( mrtvola , D1a-Merc1-2 ) ;
14744: LD_INT 64
14746: PPUSH
14747: LD_STRING D1a-Merc1-2
14749: PPUSH
14750: CALL_OW 93
// wait ( 0 0$3 ) ;
14754: LD_INT 105
14756: PPUSH
14757: CALL_OW 67
// KillUnit ( mrtvola ) ;
14761: LD_INT 64
14763: PPUSH
14764: CALL_OW 66
// ComTurnXY ( zradce1 , 87 , 137 ) ;
14768: LD_INT 65
14770: PPUSH
14771: LD_INT 87
14773: PPUSH
14774: LD_INT 137
14776: PPUSH
14777: CALL_OW 118
// wait ( 0 0$1 ) ;
14781: LD_INT 35
14783: PPUSH
14784: CALL_OW 67
// SayNoFace ( zradce1 , D1a-FMerc2-2 ) ;
14788: LD_INT 65
14790: PPUSH
14791: LD_STRING D1a-FMerc2-2
14793: PPUSH
14794: CALL_OW 89
// ComExitBuilding ( [ zradce4 , zradce5 ] ) ;
14798: LD_INT 70
14800: PUSH
14801: LD_INT 71
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 122
// ComExitBuilding ( [ zradce2 , zradce3 , zradce6 , zradce7 ] ) ;
14812: LD_INT 68
14814: PUSH
14815: LD_INT 69
14817: PUSH
14818: LD_INT 75
14820: PUSH
14821: LD_INT 77
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PPUSH
14830: CALL_OW 122
// ComMoveXY ( [ zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 141 ) ;
14834: LD_INT 68
14836: PUSH
14837: LD_INT 69
14839: PUSH
14840: LD_INT 75
14842: PUSH
14843: LD_INT 77
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: PPUSH
14852: LD_INT 165
14854: PPUSH
14855: LD_INT 141
14857: PPUSH
14858: CALL_OW 111
// KillUnit ( mrtvola2 ) ;
14862: LD_INT 78
14864: PPUSH
14865: CALL_OW 66
// AddComMoveUnit ( zradce4 , utek2 ) ;
14869: LD_INT 70
14871: PPUSH
14872: LD_INT 67
14874: PPUSH
14875: CALL_OW 172
// AddComMoveUnit ( zradce5 , utek1 ) ;
14879: LD_INT 71
14881: PPUSH
14882: LD_INT 66
14884: PPUSH
14885: CALL_OW 172
// SetFuel ( utek1 , 0 ) ;
14889: LD_INT 66
14891: PPUSH
14892: LD_INT 0
14894: PPUSH
14895: CALL_OW 240
// SetFuel ( utek2 , 0 ) ;
14899: LD_INT 67
14901: PPUSH
14902: LD_INT 0
14904: PPUSH
14905: CALL_OW 240
// wait ( 0 0$1 ) ;
14909: LD_INT 35
14911: PPUSH
14912: CALL_OW 67
// AddComMoveXY ( utek1 , 162 , 142 ) ;
14916: LD_INT 66
14918: PPUSH
14919: LD_INT 162
14921: PPUSH
14922: LD_INT 142
14924: PPUSH
14925: CALL_OW 171
// AddComMoveXY ( utek2 , 162 , 139 ) ;
14929: LD_INT 67
14931: PPUSH
14932: LD_INT 162
14934: PPUSH
14935: LD_INT 139
14937: PPUSH
14938: CALL_OW 171
// ComMoveXY ( zradce1 , 162 , 140 ) ;
14942: LD_INT 65
14944: PPUSH
14945: LD_INT 162
14947: PPUSH
14948: LD_INT 140
14950: PPUSH
14951: CALL_OW 111
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 175 , 128 ) ;
14955: LD_INT 65
14957: PUSH
14958: LD_INT 68
14960: PUSH
14961: LD_INT 69
14963: PUSH
14964: LD_INT 75
14966: PUSH
14967: LD_INT 77
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: PPUSH
14977: LD_INT 175
14979: PPUSH
14980: LD_INT 128
14982: PPUSH
14983: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 126 , 94 ) ;
14987: LD_INT 65
14989: PUSH
14990: LD_INT 68
14992: PUSH
14993: LD_INT 69
14995: PUSH
14996: LD_INT 75
14998: PUSH
14999: LD_INT 77
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PPUSH
15009: LD_INT 126
15011: PPUSH
15012: LD_INT 94
15014: PPUSH
15015: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 92 ) ;
15019: LD_INT 65
15021: PUSH
15022: LD_INT 68
15024: PUSH
15025: LD_INT 69
15027: PUSH
15028: LD_INT 75
15030: PUSH
15031: LD_INT 77
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: PPUSH
15041: LD_INT 165
15043: PPUSH
15044: LD_INT 92
15046: PPUSH
15047: CALL_OW 171
// zradci = [ zradce1 , zradce2 , zradce3 , zradce4 , zradce5 , zradce6 , zradce7 , utek1 , utek2 ] ;
15051: LD_ADDR_LOC 19
15055: PUSH
15056: LD_INT 65
15058: PUSH
15059: LD_INT 68
15061: PUSH
15062: LD_INT 69
15064: PUSH
15065: LD_INT 70
15067: PUSH
15068: LD_INT 71
15070: PUSH
15071: LD_INT 75
15073: PUSH
15074: LD_INT 77
15076: PUSH
15077: LD_INT 66
15079: PUSH
15080: LD_INT 67
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: ST_TO_ADDR
// Odebirani = true ;
15094: LD_ADDR_EXP 45
15098: PUSH
15099: LD_INT 1
15101: ST_TO_ADDR
// ComFree ( plazici ) ;
15102: LD_LOC 17
15106: PPUSH
15107: CALL_OW 139
// ComFree ( Radar_enter ) ;
15111: LD_EXP 44
15115: PPUSH
15116: CALL_OW 139
// ComMoveXY ( plazici , 86 , 133 ) ;
15120: LD_LOC 17
15124: PPUSH
15125: LD_INT 86
15127: PPUSH
15128: LD_INT 133
15130: PPUSH
15131: CALL_OW 111
// navrat := true ;
15135: LD_ADDR_LOC 18
15139: PUSH
15140: LD_INT 1
15142: ST_TO_ADDR
// end ;
15143: END
// every 3 trigger IsLive ( mrtvola ) marked 80 do
15144: LD_INT 64
15146: PPUSH
15147: CALL_OW 300
15151: IFFALSE 15193
15153: GO 15155
15155: DISABLE
// begin enable ;
15156: ENABLE
// if GetLives ( mrtvola ) > 10 and GetLives ( mrtvola ) < 250 then
15157: LD_INT 64
15159: PPUSH
15160: CALL_OW 256
15164: PUSH
15165: LD_INT 10
15167: GREATER
15168: PUSH
15169: LD_INT 64
15171: PPUSH
15172: CALL_OW 256
15176: PUSH
15177: LD_INT 250
15179: LESS
15180: AND
15181: IFFALSE 15193
// SetLives ( mrtvola , 10 ) ;
15183: LD_INT 64
15185: PPUSH
15186: LD_INT 10
15188: PPUSH
15189: CALL_OW 234
// end ;
15193: END
// every 0 0$5 do
15194: GO 15196
15196: DISABLE
// begin if ( IsInArea ( utek1 , Benal ) or not IsOk ( zradce5 ) ) and ( IsInArea ( utek2 , Benal ) or not IsOk ( zradce4 ) ) then
15197: LD_INT 66
15199: PPUSH
15200: LD_INT 4
15202: PPUSH
15203: CALL_OW 308
15207: PUSH
15208: LD_INT 71
15210: PPUSH
15211: CALL_OW 302
15215: NOT
15216: OR
15217: PUSH
15218: LD_INT 67
15220: PPUSH
15221: LD_INT 4
15223: PPUSH
15224: CALL_OW 308
15228: PUSH
15229: LD_INT 70
15231: PPUSH
15232: CALL_OW 302
15236: NOT
15237: OR
15238: AND
15239: IFFALSE 15381
// begin if IsOk ( zradce5 ) then
15241: LD_INT 71
15243: PPUSH
15244: CALL_OW 302
15248: IFFALSE 15260
// SetFuel ( utek1 , 100 ) ;
15250: LD_INT 66
15252: PPUSH
15253: LD_INT 100
15255: PPUSH
15256: CALL_OW 240
// if IsOk ( zradce4 ) then
15260: LD_INT 70
15262: PPUSH
15263: CALL_OW 302
15267: IFFALSE 15279
// SetFuel ( utek2 , 100 ) ;
15269: LD_INT 67
15271: PPUSH
15272: LD_INT 100
15274: PPUSH
15275: CALL_OW 240
// ComEnterUnit ( zradce5 , utek1 ) ;
15279: LD_INT 71
15281: PPUSH
15282: LD_INT 66
15284: PPUSH
15285: CALL_OW 120
// ComEnterUnit ( zradce4 , utek2 ) ;
15289: LD_INT 70
15291: PPUSH
15292: LD_INT 67
15294: PPUSH
15295: CALL_OW 120
// AddComMoveXY ( [ zradce4 , zradce5 ] , 179 , 136 ) ;
15299: LD_INT 70
15301: PUSH
15302: LD_INT 71
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: LD_INT 179
15311: PPUSH
15312: LD_INT 136
15314: PPUSH
15315: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 153 , 108 ) ;
15319: LD_INT 70
15321: PUSH
15322: LD_INT 71
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: LD_INT 153
15331: PPUSH
15332: LD_INT 108
15334: PPUSH
15335: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 126 , 91 ) ;
15339: LD_INT 70
15341: PUSH
15342: LD_INT 71
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PPUSH
15349: LD_INT 126
15351: PPUSH
15352: LD_INT 91
15354: PPUSH
15355: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 165 , 92 ) ;
15359: LD_INT 70
15361: PUSH
15362: LD_INT 71
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PPUSH
15369: LD_INT 165
15371: PPUSH
15372: LD_INT 92
15374: PPUSH
15375: CALL_OW 171
// end else
15379: GO 15402
// begin ComMoveXY ( [ utek1 , utek2 ] , 162 , 142 ) ;
15381: LD_INT 66
15383: PUSH
15384: LD_INT 67
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PPUSH
15391: LD_INT 162
15393: PPUSH
15394: LD_INT 142
15396: PPUSH
15397: CALL_OW 111
// enable ;
15401: ENABLE
// end ; end ;
15402: END
// every 0 0$1 trigger Odebirani do
15403: LD_EXP 45
15407: IFFALSE 15521
15409: GO 15411
15411: DISABLE
// begin pom = UnitFilter ( zradci , [ f_inarea , ExitAR ] ) ;
15412: LD_ADDR_LOC 20
15416: PUSH
15417: LD_LOC 19
15421: PPUSH
15422: LD_INT 95
15424: PUSH
15425: LD_INT 5
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 72
15436: ST_TO_ADDR
// for i in pom do
15437: LD_ADDR_LOC 21
15441: PUSH
15442: LD_LOC 20
15446: PUSH
15447: FOR_IN
15448: IFFALSE 15461
// RemoveUnit ( i ) ;
15450: LD_LOC 21
15454: PPUSH
15455: CALL_OW 64
15459: GO 15447
15461: POP
15462: POP
// zradci = UnitFilter ( zradci , [ [ f_alive ] , [ f_side , Arabi ] ] ) ;
15463: LD_ADDR_LOC 19
15467: PUSH
15468: LD_LOC 19
15472: PPUSH
15473: LD_INT 51
15475: PUSH
15476: EMPTY
15477: LIST
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_EXP 3
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 72
15499: ST_TO_ADDR
// if zradci > 0 then
15500: LD_LOC 19
15504: PUSH
15505: LD_INT 0
15507: GREATER
15508: IFFALSE 15513
// enable else
15510: ENABLE
15511: GO 15521
// Odebirani = false ;
15513: LD_ADDR_EXP 45
15517: PUSH
15518: LD_INT 0
15520: ST_TO_ADDR
// end ;
15521: END
// every 0 0$1 trigger navrat do
15522: LD_LOC 18
15526: IFFALSE 15657
15528: GO 15530
15530: DISABLE
// begin if IsAt ( plazici [ 1 ] , 86 , 133 ) or IsAt ( plazici [ 2 ] , 86 , 133 ) or IsAt ( plazici [ 3 ] , 86 , 133 ) or IsAt ( plazici [ 4 ] , 86 , 133 ) then
15531: LD_LOC 17
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PPUSH
15540: LD_INT 86
15542: PPUSH
15543: LD_INT 133
15545: PPUSH
15546: CALL_OW 307
15550: PUSH
15551: LD_LOC 17
15555: PUSH
15556: LD_INT 2
15558: ARRAY
15559: PPUSH
15560: LD_INT 86
15562: PPUSH
15563: LD_INT 133
15565: PPUSH
15566: CALL_OW 307
15570: OR
15571: PUSH
15572: LD_LOC 17
15576: PUSH
15577: LD_INT 3
15579: ARRAY
15580: PPUSH
15581: LD_INT 86
15583: PPUSH
15584: LD_INT 133
15586: PPUSH
15587: CALL_OW 307
15591: OR
15592: PUSH
15593: LD_LOC 17
15597: PUSH
15598: LD_INT 4
15600: ARRAY
15601: PPUSH
15602: LD_INT 86
15604: PPUSH
15605: LD_INT 133
15607: PPUSH
15608: CALL_OW 307
15612: OR
15613: IFFALSE 15656
// begin ComWalk ( plazici ) ;
15615: LD_LOC 17
15619: PPUSH
15620: CALL_OW 138
// AddComMoveXY ( plazici , 83 , 148 ) ;
15624: LD_LOC 17
15628: PPUSH
15629: LD_INT 83
15631: PPUSH
15632: LD_INT 148
15634: PPUSH
15635: CALL_OW 171
// ComMoveXY ( Radar_enter , 87 , 152 ) ;
15639: LD_EXP 44
15643: PPUSH
15644: LD_INT 87
15646: PPUSH
15647: LD_INT 152
15649: PPUSH
15650: CALL_OW 111
// end else
15654: GO 15657
// enable ;
15656: ENABLE
// end ;
15657: END
// every 0 0$0.5 trigger navrat do
15658: LD_LOC 18
15662: IFFALSE 15696
15664: GO 15666
15666: DISABLE
// begin if IsInArea ( plazici [ 1 ] , AMret ) then
15667: LD_LOC 17
15671: PUSH
15672: LD_INT 1
15674: ARRAY
15675: PPUSH
15676: LD_INT 2
15678: PPUSH
15679: CALL_OW 308
15683: IFFALSE 15695
// begin chmo1 ;
15685: CALL 2269 0 0
// InGameOff ;
15689: CALL_OW 9
// end else
15693: GO 15696
// enable ;
15695: ENABLE
// end ;
15696: END
// every 0 0$10 trigger A1_dobyta do var pom ;
15697: LD_EXP 28
15701: IFFALSE 15796
15703: GO 15705
15705: DISABLE
15706: LD_INT 0
15708: PPUSH
// begin wait ( Rand ( 1 1$0 , 2 2$20 ) ) ;
15709: LD_INT 2100
15711: PPUSH
15712: LD_INT 4900
15714: PPUSH
15715: CALL_OW 12
15719: PPUSH
15720: CALL_OW 67
// pom = Rand ( 4 - difficulty , 5 ) ;
15724: LD_ADDR_VAR 0 1
15728: PUSH
15729: LD_INT 4
15731: PUSH
15732: LD_OWVAR 67
15736: MINUS
15737: PPUSH
15738: LD_INT 5
15740: PPUSH
15741: CALL_OW 12
15745: ST_TO_ADDR
// CreateCratesArea ( pom , Abase1 , true ) ;
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_INT 3
15753: PPUSH
15754: LD_INT 1
15756: PPUSH
15757: CALL_OW 55
// pocet_spadlych_beden = pocet_spadlych_beden + pom ;
15761: LD_ADDR_LOC 22
15765: PUSH
15766: LD_LOC 22
15770: PUSH
15771: LD_VAR 0 1
15775: PLUS
15776: ST_TO_ADDR
// if pocet_spadlych_beden < max_bedny [ difficulty ] then
15777: LD_LOC 22
15781: PUSH
15782: LD_EXP 51
15786: PUSH
15787: LD_OWVAR 67
15791: ARRAY
15792: LESS
15793: IFFALSE 15796
// enable ;
15795: ENABLE
// end ;
15796: PPOPN 1
15798: END
// every 0 0$10 trigger A2_dobyta do
15799: LD_EXP 29
15803: IFFALSE 15828
15805: GO 15807
15807: DISABLE
// begin pocet_spadlych_beden = pocet_spadlych_beden - 10 + difficulty ;
15808: LD_ADDR_LOC 22
15812: PUSH
15813: LD_LOC 22
15817: PUSH
15818: LD_INT 10
15820: MINUS
15821: PUSH
15822: LD_OWVAR 67
15826: PLUS
15827: ST_TO_ADDR
// end ; end_of_file
15828: END
// export A1_dobyta ; export A2_dobyta ; export A3_dobyta ; export Pruzkumnik ; var vysl ; var pom , i ; var uspech ; export JMM ; export Powell ; export Gary ; export Bobby ; export Frank ; export Lisa ; export Cornel ; export Yamoko ; export Cyrus ; export Don ; export Brown ; export Amici_enter ; export Radar_enter ; every 0 0$30 trigger A1_dobyta do
15829: LD_EXP 28
15833: IFFALSE 16156
15835: GO 15837
15837: DISABLE
// begin if IsOK ( Frank ) then
15838: LD_EXP 36
15842: PPUSH
15843: CALL_OW 302
15847: IFFALSE 16155
// begin wait ( 0 0$10 ) ;
15849: LD_INT 350
15851: PPUSH
15852: CALL_OW 67
// vysl := dialog_frank ;
15856: LD_ADDR_LOC 23
15860: PUSH
15861: CALL 2959 0 0
15865: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
15866: LD_ADDR_LOC 24
15870: PUSH
15871: LD_INT 1
15873: PPUSH
15874: LD_INT 100
15876: PPUSH
15877: CALL_OW 12
15881: ST_TO_ADDR
// case vysl of 1 :
15882: LD_LOC 23
15886: PUSH
15887: LD_INT 1
15889: DOUBLE
15890: EQUAL
15891: IFTRUE 15895
15893: GO 15925
15895: POP
// begin i = [ 50 , 30 , 20 ] ;
15896: LD_ADDR_LOC 25
15900: PUSH
15901: LD_INT 50
15903: PUSH
15904: LD_INT 30
15906: PUSH
15907: LD_INT 20
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: ST_TO_ADDR
// Pruzkumnik = true ;
15915: LD_ADDR_EXP 31
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// end ; 21 :
15923: GO 15972
15925: LD_INT 21
15927: DOUBLE
15928: EQUAL
15929: IFTRUE 15933
15931: GO 15963
15933: POP
// begin i = [ 80 , 15 , 5 ] ;
15934: LD_ADDR_LOC 25
15938: PUSH
15939: LD_INT 80
15941: PUSH
15942: LD_INT 15
15944: PUSH
15945: LD_INT 5
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: ST_TO_ADDR
// Pruzkumnik = true ;
15953: LD_ADDR_EXP 31
15957: PUSH
15958: LD_INT 1
15960: ST_TO_ADDR
// end ; else
15961: GO 15972
15963: POP
// uspech = 0 ; end ;
15964: LD_ADDR_LOC 26
15968: PUSH
15969: LD_INT 0
15971: ST_TO_ADDR
// if Pruzkumnik then
15972: LD_EXP 31
15976: IFFALSE 16057
// begin jdi_na_pruzkum ( Frank ) ;
15978: LD_EXP 36
15982: PPUSH
15983: CALL 16477 0 1
// if pom <= i [ 1 ] then
15987: LD_LOC 24
15991: PUSH
15992: LD_LOC 25
15996: PUSH
15997: LD_INT 1
15999: ARRAY
16000: LESSEQUAL
16001: IFFALSE 16013
// uspech = 1 else
16003: LD_ADDR_LOC 26
16007: PUSH
16008: LD_INT 1
16010: ST_TO_ADDR
16011: GO 16057
// if pom <= i [ 1 ] + i [ 2 ] then
16013: LD_LOC 24
16017: PUSH
16018: LD_LOC 25
16022: PUSH
16023: LD_INT 1
16025: ARRAY
16026: PUSH
16027: LD_LOC 25
16031: PUSH
16032: LD_INT 2
16034: ARRAY
16035: PLUS
16036: LESSEQUAL
16037: IFFALSE 16049
// uspech = 2 else
16039: LD_ADDR_LOC 26
16043: PUSH
16044: LD_INT 2
16046: ST_TO_ADDR
16047: GO 16057
// uspech = 3 ;
16049: LD_ADDR_LOC 26
16053: PUSH
16054: LD_INT 3
16056: ST_TO_ADDR
// end ; case uspech of 1 :
16057: LD_LOC 26
16061: PUSH
16062: LD_INT 1
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16070
16068: GO 16096
16070: POP
// begin wait ( 3 3$0 ) ;
16071: LD_INT 6300
16073: PPUSH
16074: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 1 ) ;
16078: LD_EXP 36
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL 16725 0 2
// fuspech1 ;
16090: CALL 3209 0 0
// end ; 2 :
16094: GO 16153
16096: LD_INT 2
16098: DOUBLE
16099: EQUAL
16100: IFTRUE 16104
16102: GO 16130
16104: POP
// begin wait ( 1 1$0 ) ;
16105: LD_INT 2100
16107: PPUSH
16108: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 2 ) ;
16112: LD_EXP 36
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL 16725 0 2
// fuspech2 ;
16124: CALL 3346 0 0
// end ; 3 :
16128: GO 16153
16130: LD_INT 3
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16152
16138: POP
// begin wait ( 5 5$0 ) ;
16139: LD_INT 10500
16141: PPUSH
16142: CALL_OW 67
// fuspech3 ;
16146: CALL 3489 0 0
// end ; end ;
16150: GO 16153
16152: POP
// end else
16153: GO 16156
// enable ;
16155: ENABLE
// end ;
16156: END
// every 0 0$30 trigger A1_dobyta do
16157: LD_EXP 28
16161: IFFALSE 16476
16163: GO 16165
16165: DISABLE
// begin if IsOK ( Yamoko ) then
16166: LD_EXP 39
16170: PPUSH
16171: CALL_OW 302
16175: IFFALSE 16475
// begin wait ( 0 0$10 ) ;
16177: LD_INT 350
16179: PPUSH
16180: CALL_OW 67
// vysl := dialog_yamoko ;
16184: LD_ADDR_LOC 23
16188: PUSH
16189: CALL 3497 0 0
16193: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
16194: LD_ADDR_LOC 24
16198: PUSH
16199: LD_INT 1
16201: PPUSH
16202: LD_INT 100
16204: PPUSH
16205: CALL_OW 12
16209: ST_TO_ADDR
// case vysl of 1 :
16210: LD_LOC 23
16214: PUSH
16215: LD_INT 1
16217: DOUBLE
16218: EQUAL
16219: IFTRUE 16223
16221: GO 16253
16223: POP
// begin i = [ 50 , 20 , 30 ] ;
16224: LD_ADDR_LOC 25
16228: PUSH
16229: LD_INT 50
16231: PUSH
16232: LD_INT 20
16234: PUSH
16235: LD_INT 30
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: ST_TO_ADDR
// Pruzkumnik = true ;
16243: LD_ADDR_EXP 31
16247: PUSH
16248: LD_INT 1
16250: ST_TO_ADDR
// end ; 21 :
16251: GO 16292
16253: LD_INT 21
16255: DOUBLE
16256: EQUAL
16257: IFTRUE 16261
16259: GO 16291
16261: POP
// begin i = [ 70 , 25 , 5 ] ;
16262: LD_ADDR_LOC 25
16266: PUSH
16267: LD_INT 70
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 5
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: ST_TO_ADDR
// Pruzkumnik = true ;
16281: LD_ADDR_EXP 31
16285: PUSH
16286: LD_INT 1
16288: ST_TO_ADDR
// end ; end ;
16289: GO 16292
16291: POP
// if Pruzkumnik then
16292: LD_EXP 31
16296: IFFALSE 16377
// begin jdi_na_pruzkum ( Yamoko ) ;
16298: LD_EXP 39
16302: PPUSH
16303: CALL 16477 0 1
// if pom <= i [ 1 ] then
16307: LD_LOC 24
16311: PUSH
16312: LD_LOC 25
16316: PUSH
16317: LD_INT 1
16319: ARRAY
16320: LESSEQUAL
16321: IFFALSE 16333
// uspech = 1 else
16323: LD_ADDR_LOC 26
16327: PUSH
16328: LD_INT 1
16330: ST_TO_ADDR
16331: GO 16377
// if pom <= i [ 1 ] + i [ 2 ] then
16333: LD_LOC 24
16337: PUSH
16338: LD_LOC 25
16342: PUSH
16343: LD_INT 1
16345: ARRAY
16346: PUSH
16347: LD_LOC 25
16351: PUSH
16352: LD_INT 2
16354: ARRAY
16355: PLUS
16356: LESSEQUAL
16357: IFFALSE 16369
// uspech = 2 else
16359: LD_ADDR_LOC 26
16363: PUSH
16364: LD_INT 2
16366: ST_TO_ADDR
16367: GO 16377
// uspech = 3 ;
16369: LD_ADDR_LOC 26
16373: PUSH
16374: LD_INT 3
16376: ST_TO_ADDR
// end ; case uspech of 1 :
16377: LD_LOC 26
16381: PUSH
16382: LD_INT 1
16384: DOUBLE
16385: EQUAL
16386: IFTRUE 16390
16388: GO 16416
16390: POP
// begin wait ( 2 2$0 ) ;
16391: LD_INT 4200
16393: PPUSH
16394: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 1 ) ;
16398: LD_EXP 39
16402: PPUSH
16403: LD_INT 1
16405: PPUSH
16406: CALL 16725 0 2
// yuspech1 ;
16410: CALL 3602 0 0
// end ; 2 :
16414: GO 16473
16416: LD_INT 2
16418: DOUBLE
16419: EQUAL
16420: IFTRUE 16424
16422: GO 16450
16424: POP
// begin wait ( 1 1$0 ) ;
16425: LD_INT 2100
16427: PPUSH
16428: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 2 ) ;
16432: LD_EXP 39
16436: PPUSH
16437: LD_INT 2
16439: PPUSH
16440: CALL 16725 0 2
// yuspech2 ;
16444: CALL 3751 0 0
// end ; 3 :
16448: GO 16473
16450: LD_INT 3
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16472
16458: POP
// begin wait ( 5 5$0 ) ;
16459: LD_INT 10500
16461: PPUSH
16462: CALL_OW 67
// yuspech3 ;
16466: CALL 3850 0 0
// end ; end ;
16470: GO 16473
16472: POP
// end else
16473: GO 16476
// enable ;
16475: ENABLE
// end ;
16476: END
// function jdi_na_pruzkum ( pru ) ; begin
16477: LD_INT 0
16479: PPUSH
// ComStop ( pru ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 141
// AddComExitBuilding ( pru ) ;
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 182
// AddComExitVehicle ( pru ) ;
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 181
// AddComStop ( pru ) ;
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 201
// while IsInUnit ( pru ) <> 0 do
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 310
16525: PUSH
16526: LD_INT 0
16528: NONEQUAL
16529: IFFALSE 16565
// begin wait ( 0 0$0.5 ) ;
16531: LD_INT 18
16533: PPUSH
16534: CALL_OW 67
// ComExitBuilding ( pru ) ;
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 122
// wait ( 0 0$0.5 ) ;
16547: LD_INT 18
16549: PPUSH
16550: CALL_OW 67
// AddComExitVehicle ( pru ) ;
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 181
// end ;
16563: GO 16516
// ComStop ( pru ) ;
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 141
// SetSide ( pru , You2 ) ;
16574: LD_VAR 0 1
16578: PPUSH
16579: LD_EXP 2
16583: PPUSH
16584: CALL_OW 235
// SetClass ( pru , class_soldier ) ;
16588: LD_VAR 0 1
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 336
// AddComMoveXY ( pru , 91 , 110 ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_INT 91
16607: PPUSH
16608: LD_INT 110
16610: PPUSH
16611: CALL_OW 171
// AddComMoveXY ( pru , 59 , 103 ) ;
16615: LD_VAR 0 1
16619: PPUSH
16620: LD_INT 59
16622: PPUSH
16623: LD_INT 103
16625: PPUSH
16626: CALL_OW 171
// while not IsAt ( pru , 59 , 103 ) do
16630: LD_VAR 0 1
16634: PPUSH
16635: LD_INT 59
16637: PPUSH
16638: LD_INT 103
16640: PPUSH
16641: CALL_OW 307
16645: NOT
16646: IFFALSE 16672
// begin wait ( 0 0$2 ) ;
16648: LD_INT 70
16650: PPUSH
16651: CALL_OW 67
// AddComMoveXY ( pru , 59 , 103 ) ;
16655: LD_VAR 0 1
16659: PPUSH
16660: LD_INT 59
16662: PPUSH
16663: LD_INT 103
16665: PPUSH
16666: CALL_OW 171
// end ;
16670: GO 16630
// ComMoveXY ( pru , 51 , 101 ) ;
16672: LD_VAR 0 1
16676: PPUSH
16677: LD_INT 51
16679: PPUSH
16680: LD_INT 101
16682: PPUSH
16683: CALL_OW 111
// while not IsInArea ( pru , pru_out ) do
16687: LD_VAR 0 1
16691: PPUSH
16692: LD_INT 24
16694: PPUSH
16695: CALL_OW 308
16699: NOT
16700: IFFALSE 16711
// wait ( 0 0$1 ) ;
16702: LD_INT 35
16704: PPUSH
16705: CALL_OW 67
16709: GO 16687
// RemoveUnit ( pru ) ;
16711: LD_VAR 0 1
16715: PPUSH
16716: CALL_OW 64
// end ;
16720: LD_VAR 0 2
16724: RET
// function navrat_z_pruzkumu ( pru , usp ) ; begin
16725: LD_INT 0
16727: PPUSH
// PlaceUnitArea ( pru , pruarea , false ) ;
16728: LD_VAR 0 1
16732: PPUSH
16733: LD_INT 20
16735: PPUSH
16736: LD_INT 0
16738: PPUSH
16739: CALL_OW 49
// if usp = 1 then
16743: LD_VAR 0 2
16747: PUSH
16748: LD_INT 1
16750: EQUAL
16751: IFFALSE 16768
// AddComMoveXY ( pru , 47 , 87 ) ;
16753: LD_VAR 0 1
16757: PPUSH
16758: LD_INT 47
16760: PPUSH
16761: LD_INT 87
16763: PPUSH
16764: CALL_OW 171
// AddComMoveXY ( pru , 68 , 106 ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 68
16775: PPUSH
16776: LD_INT 106
16778: PPUSH
16779: CALL_OW 171
// AddComMoveXY ( pru , 118 , 129 ) ;
16783: LD_VAR 0 1
16787: PPUSH
16788: LD_INT 118
16790: PPUSH
16791: LD_INT 129
16793: PPUSH
16794: CALL_OW 171
// if usp <> 1 then
16798: LD_VAR 0 2
16802: PUSH
16803: LD_INT 1
16805: NONEQUAL
16806: IFFALSE 16820
// SetLives ( pru , 300 ) ;
16808: LD_VAR 0 1
16812: PPUSH
16813: LD_INT 300
16815: PPUSH
16816: CALL_OW 234
// while not IsInArea ( pru , Abase1 ) do
16820: LD_VAR 0 1
16824: PPUSH
16825: LD_INT 3
16827: PPUSH
16828: CALL_OW 308
16832: NOT
16833: IFFALSE 16844
// wait ( 0 0$2 ) ;
16835: LD_INT 70
16837: PPUSH
16838: CALL_OW 67
16842: GO 16820
// SetSide ( pru , You ) ;
16844: LD_VAR 0 1
16848: PPUSH
16849: LD_EXP 1
16853: PPUSH
16854: CALL_OW 235
// ComMoveUnit ( pru , JMM ) ;
16858: LD_VAR 0 1
16862: PPUSH
16863: LD_EXP 32
16867: PPUSH
16868: CALL_OW 112
// end ;
16872: LD_VAR 0 3
16876: RET
// every 0 0$10 trigger GetSide ( A1_tov ) or IsDead ( A1_tov ) do
16877: LD_INT 110
16879: PPUSH
16880: CALL_OW 255
16884: PUSH
16885: LD_INT 110
16887: PPUSH
16888: CALL_OW 301
16892: OR
16893: IFFALSE 16958
16895: GO 16897
16897: DISABLE
// begin SetTech ( tech_Flame , You , state_researched ) ;
16898: LD_INT 70
16900: PPUSH
16901: LD_EXP 1
16905: PPUSH
16906: LD_INT 2
16908: PPUSH
16909: CALL_OW 322
// SetTech ( tech_SibPow , You , state_researched ) ;
16913: LD_INT 21
16915: PPUSH
16916: LD_EXP 1
16920: PPUSH
16921: LD_INT 2
16923: PPUSH
16924: CALL_OW 322
// SetTech ( tech_SibEng , You , state_researched ) ;
16928: LD_INT 22
16930: PPUSH
16931: LD_EXP 1
16935: PPUSH
16936: LD_INT 2
16938: PPUSH
16939: CALL_OW 322
// SetTech ( tech_Mortar , You , state_researched ) ;
16943: LD_INT 41
16945: PPUSH
16946: LD_EXP 1
16950: PPUSH
16951: LD_INT 2
16953: PPUSH
16954: CALL_OW 322
// end ;
16958: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , Arabi ] , [ f_btype , b_warehouse ] ] ) = 0 do var pomauta ; var art ; var i , pom ;
16959: LD_INT 22
16961: PUSH
16962: LD_EXP 3
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 30
16973: PUSH
16974: LD_INT 1
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PPUSH
16985: CALL_OW 69
16989: PUSH
16990: LD_INT 0
16992: EQUAL
16993: IFFALSE 17162
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
17002: PPUSH
17003: PPUSH
// begin pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17004: LD_ADDR_VAR 0 1
17008: PUSH
17009: LD_INT 22
17011: PUSH
17012: LD_EXP 1
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: LD_INT 34
17026: PUSH
17027: LD_INT 12
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 34
17036: PUSH
17037: LD_INT 32
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: ST_TO_ADDR
// art = false ;
17058: LD_ADDR_VAR 0 2
17062: PUSH
17063: LD_INT 0
17065: ST_TO_ADDR
// for i in pomauta do
17066: LD_ADDR_VAR 0 3
17070: PUSH
17071: LD_VAR 0 1
17075: PUSH
17076: FOR_IN
17077: IFFALSE 17107
// if GetCargo ( i , mat_artefact ) > 0 then
17079: LD_VAR 0 3
17083: PPUSH
17084: LD_INT 4
17086: PPUSH
17087: CALL_OW 289
17091: PUSH
17092: LD_INT 0
17094: GREATER
17095: IFFALSE 17105
// art = true ;
17097: LD_ADDR_VAR 0 2
17101: PUSH
17102: LD_INT 1
17104: ST_TO_ADDR
17105: GO 17076
17107: POP
17108: POP
// if art then
17109: LD_VAR 0 2
17113: IFFALSE 17121
// konec_mise else
17115: CALL 669 0 0
17119: GO 17162
// begin pom = query_konec_mise ;
17121: LD_ADDR_VAR 0 4
17125: PUSH
17126: CALL 7756 0 0
17130: ST_TO_ADDR
// if pom = 2 then
17131: LD_VAR 0 4
17135: PUSH
17136: LD_INT 2
17138: EQUAL
17139: IFFALSE 17147
// konec_mise else
17141: CALL 669 0 0
17145: GO 17162
// begin end_the_mission_allowed = true ;
17147: LD_ADDR_OWVAR 57
17151: PUSH
17152: LD_INT 1
17154: ST_TO_ADDR
// ChangeMissionObjectives ( MDestroyOut ) ;
17155: LD_STRING MDestroyOut
17157: PPUSH
17158: CALL_OW 337
// end ; end ; end ; end_of_file
17162: PPOPN 4
17164: END
// export Odebirani ; export oposoldier ; export bum2 ; var utok1 ; var utok1_over ; var utok3_over ; var utok4_over ; var Veze_2 ; var Opr_2 ; var i , pom , pom1 ; var uklizejici_mista ; var mcm1 ; var mcm2 ; every 0 0$0.3 do
17165: GO 17167
17167: DISABLE
// begin utok1 := false ;
17168: LD_ADDR_LOC 27
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// bum2 = false ;
17176: LD_ADDR_EXP 47
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// Veze_2 := [ A2_bu1 , A2_bu2 , A2_bu3 , A2_bu4 , A2_bu4 , A2_bu5 , A2_bu6 ] ;
17184: LD_ADDR_LOC 31
17188: PUSH
17189: LD_INT 112
17191: PUSH
17192: LD_INT 63
17194: PUSH
17195: LD_INT 47
17197: PUSH
17198: LD_INT 60
17200: PUSH
17201: LD_INT 60
17203: PUSH
17204: LD_INT 62
17206: PUSH
17207: LD_INT 59
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: ST_TO_ADDR
// Opr_2 = [ JEDNOTKY_BAZE_2_LIST [ 15 ] , JEDNOTKY_BAZE_2_LIST [ 16 ] ] ;
17219: LD_ADDR_LOC 32
17223: PUSH
17224: LD_EXP 11
17228: PUSH
17229: LD_INT 15
17231: ARRAY
17232: PUSH
17233: LD_EXP 11
17237: PUSH
17238: LD_INT 16
17240: ARRAY
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: ST_TO_ADDR
// pom = vytvor_opravare ;
17246: LD_ADDR_LOC 34
17250: PUSH
17251: CALL 8938 0 0
17255: ST_TO_ADDR
// Opr_2 = Opr_2 ^ pom ;
17256: LD_ADDR_LOC 32
17260: PUSH
17261: LD_LOC 32
17265: PUSH
17266: LD_LOC 34
17270: ADD
17271: ST_TO_ADDR
// Utok1_over = false ;
17272: LD_ADDR_LOC 28
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// utok3_over = false ;
17280: LD_ADDR_LOC 29
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// utok4_over = false ;
17288: LD_ADDR_LOC 30
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// uklizejici_mista = [ [ 28 , 16 ] , [ 22 , 18 ] , [ 29 , 20 ] , [ 19 , 33 ] ] ;
17296: LD_ADDR_LOC 36
17300: PUSH
17301: LD_INT 28
17303: PUSH
17304: LD_INT 16
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 22
17313: PUSH
17314: LD_INT 18
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 29
17323: PUSH
17324: LD_INT 20
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 19
17333: PUSH
17334: LD_INT 33
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: ST_TO_ADDR
// disable ( 998 ) ;
17347: LD_INT 998
17349: DISABLE_MARKED
// disable ( 997 ) ;
17350: LD_INT 997
17352: DISABLE_MARKED
// disable ( 996 ) ;
17353: LD_INT 996
17355: DISABLE_MARKED
// disable ( 995 ) ;
17356: LD_INT 995
17358: DISABLE_MARKED
// if difficulty < 3 then
17359: LD_OWVAR 67
17363: PUSH
17364: LD_INT 3
17366: LESS
17367: IFFALSE 17376
// RemoveUnit ( sui1 ) ;
17369: LD_INT 118
17371: PPUSH
17372: CALL_OW 64
// if difficulty < 2 then
17376: LD_OWVAR 67
17380: PUSH
17381: LD_INT 2
17383: LESS
17384: IFFALSE 17400
// begin RemoveUnit ( sui2 ) ;
17386: LD_INT 119
17388: PPUSH
17389: CALL_OW 64
// RemoveUnit ( sui3 ) ;
17393: LD_INT 121
17395: PPUSH
17396: CALL_OW 64
// end ; end ;
17400: END
// export function uklid_arabu ; begin
17401: LD_INT 0
17403: PPUSH
// ComEnterUnit ( zradce1 , A1_lab ) ;
17404: LD_INT 65
17406: PPUSH
17407: LD_INT 15
17409: PPUSH
17410: CALL_OW 120
// ComEnterUnit ( zradce2 , A1_bu1 ) ;
17414: LD_INT 68
17416: PPUSH
17417: LD_INT 9
17419: PPUSH
17420: CALL_OW 120
// ComEnterUnit ( zradce3 , A1_bu2 ) ;
17424: LD_INT 69
17426: PPUSH
17427: LD_INT 8
17429: PPUSH
17430: CALL_OW 120
// ComEnterUnit ( zradce4 , A1_bar ) ;
17434: LD_INT 70
17436: PPUSH
17437: LD_INT 14
17439: PPUSH
17440: CALL_OW 120
// ComEnterUnit ( zradce5 , A1_bar ) ;
17444: LD_INT 71
17446: PPUSH
17447: LD_INT 14
17449: PPUSH
17450: CALL_OW 120
// ComEnterUnit ( A1_vo1 , A1_bu3 ) ;
17454: LD_INT 72
17456: PPUSH
17457: LD_INT 11
17459: PPUSH
17460: CALL_OW 120
// ComEnterUnit ( A1_vo2 , A1_dep ) ;
17464: LD_INT 73
17466: PPUSH
17467: LD_INT 4
17469: PPUSH
17470: CALL_OW 120
// ComEnterUnit ( A1_vo4 , A1_dep ) ;
17474: LD_INT 76
17476: PPUSH
17477: LD_INT 4
17479: PPUSH
17480: CALL_OW 120
// ComEnterUnit ( A1_ve1 , A1_lab ) ;
17484: LD_INT 87
17486: PPUSH
17487: LD_INT 15
17489: PPUSH
17490: CALL_OW 120
// ComEnterUnit ( A1_ve2 , A1_lab ) ;
17494: LD_INT 74
17496: PPUSH
17497: LD_INT 15
17499: PPUSH
17500: CALL_OW 120
// ComEnterUnit ( zradce6 , A1_bu6 ) ;
17504: LD_INT 75
17506: PPUSH
17507: LD_INT 10
17509: PPUSH
17510: CALL_OW 120
// ComEnterUnit ( zradce7 , A1_bu4 ) ;
17514: LD_INT 77
17516: PPUSH
17517: LD_INT 12
17519: PPUSH
17520: CALL_OW 120
// ComHold ( mrtvola2 ) ;
17524: LD_INT 78
17526: PPUSH
17527: CALL_OW 140
// ComEnterUnit ( A1_en1 , A1_dep ) ;
17531: LD_INT 79
17533: PPUSH
17534: LD_INT 4
17536: PPUSH
17537: CALL_OW 120
// ComEnterUnit ( A1_me1 , A1_tov ) ;
17541: LD_INT 81
17543: PPUSH
17544: LD_INT 110
17546: PPUSH
17547: CALL_OW 120
// ComEnterUnit ( A1_me2 , A1_tov ) ;
17551: LD_INT 80
17553: PPUSH
17554: LD_INT 110
17556: PPUSH
17557: CALL_OW 120
// ComPlaceRemoteCharge ( A2_zas1 , 52 , 62 , 0 ) ;
17561: LD_INT 82
17563: PPUSH
17564: LD_INT 52
17566: PPUSH
17567: LD_INT 62
17569: PPUSH
17570: LD_INT 0
17572: PPUSH
17573: CALL_OW 133
// ComPlaceRemoteCharge ( A2_zas2 , 55 , 64 , 0 ) ;
17577: LD_INT 83
17579: PPUSH
17580: LD_INT 55
17582: PPUSH
17583: LD_INT 64
17585: PPUSH
17586: LD_INT 0
17588: PPUSH
17589: CALL_OW 133
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 44 , 24 ) ;
17593: LD_INT 82
17595: PUSH
17596: LD_INT 83
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PPUSH
17603: LD_INT 44
17605: PPUSH
17606: LD_INT 24
17608: PPUSH
17609: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 30 , 11 ) ;
17613: LD_INT 82
17615: PUSH
17616: LD_INT 83
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: LD_INT 30
17625: PPUSH
17626: LD_INT 11
17628: PPUSH
17629: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 24 , 37 ) ;
17633: LD_INT 82
17635: PUSH
17636: LD_INT 83
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PPUSH
17643: LD_INT 24
17645: PPUSH
17646: LD_INT 37
17648: PPUSH
17649: CALL_OW 171
// AddComMoveXY ( A2_zas1 , 32 , 60 ) ;
17653: LD_INT 82
17655: PPUSH
17656: LD_INT 32
17658: PPUSH
17659: LD_INT 60
17661: PPUSH
17662: CALL_OW 171
// AddComMoveXY ( A2_zas2 , 37 , 58 ) ;
17666: LD_INT 83
17668: PPUSH
17669: LD_INT 37
17671: PPUSH
17672: LD_INT 58
17674: PPUSH
17675: CALL_OW 171
// AddComCrawl ( [ A2_zas1 , A2_zas2 ] ) ;
17679: LD_INT 82
17681: PUSH
17682: LD_INT 83
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PPUSH
17689: CALL_OW 197
// ComEnterUnit ( A3_rme1 , A3_rv1 ) ;
17693: LD_INT 96
17695: PPUSH
17696: LD_INT 26
17698: PPUSH
17699: CALL_OW 120
// ComEnterUnit ( A3_rme2 , A3_rv2 ) ;
17703: LD_INT 95
17705: PPUSH
17706: LD_INT 25
17708: PPUSH
17709: CALL_OW 120
// ComEnterUnit ( A3_rme3 , A3_rv3 ) ;
17713: LD_INT 94
17715: PPUSH
17716: LD_INT 27
17718: PPUSH
17719: CALL_OW 120
// wait ( 0 0$5 ) ;
17723: LD_INT 175
17725: PPUSH
17726: CALL_OW 67
// ComLinkTo ( [ A3_are1 , A3_are2 , A3_are3 ] , A3_rme1 ) ;
17730: LD_INT 23
17732: PUSH
17733: LD_INT 18
17735: PUSH
17736: LD_INT 44
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: PPUSH
17744: LD_INT 96
17746: PPUSH
17747: CALL_OW 135
// ComLinkTo ( [ A3_are4 , A3_are5 , A3_are6 ] , A3_rme2 ) ;
17751: LD_INT 19
17753: PUSH
17754: LD_INT 24
17756: PUSH
17757: LD_INT 20
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: LIST
17764: PPUSH
17765: LD_INT 95
17767: PPUSH
17768: CALL_OW 135
// ComLinkTo ( [ A3_are7 , A3_are8 , A3_are9 ] , A3_rme3 ) ;
17772: LD_INT 21
17774: PUSH
17775: LD_INT 93
17777: PUSH
17778: LD_INT 22
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: PPUSH
17786: LD_INT 94
17788: PPUSH
17789: CALL_OW 135
// ComPlaceRemoteCharge ( A3_zas1 , 103 , 19 , 0 ) ;
17793: LD_INT 101
17795: PPUSH
17796: LD_INT 103
17798: PPUSH
17799: LD_INT 19
17801: PPUSH
17802: LD_INT 0
17804: PPUSH
17805: CALL_OW 133
// AddComMoveXY ( A3_zas1 , 104 , 3 ) ;
17809: LD_INT 101
17811: PPUSH
17812: LD_INT 104
17814: PPUSH
17815: LD_INT 3
17817: PPUSH
17818: CALL_OW 171
// AddComCrawl ( A3_zas1 ) ;
17822: LD_INT 101
17824: PPUSH
17825: CALL_OW 197
// AddComTurnXY ( A3_zas1 , 102 , 8 ) ;
17829: LD_INT 101
17831: PPUSH
17832: LD_INT 102
17834: PPUSH
17835: LD_INT 8
17837: PPUSH
17838: CALL_OW 178
// end ;
17842: LD_VAR 0 1
17846: RET
// export function uklid_arabu2 ; var MD1_un ; var MD2_un ; begin
17847: LD_INT 0
17849: PPUSH
17850: PPUSH
17851: PPUSH
// MD1_un = [ ] ;
17852: LD_ADDR_VAR 0 2
17856: PUSH
17857: EMPTY
17858: ST_TO_ADDR
// MD2_un = [ ] ;
17859: LD_ADDR_VAR 0 3
17863: PUSH
17864: EMPTY
17865: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 1 ] , A2_bu1 ) ;
17866: LD_EXP 11
17870: PUSH
17871: LD_INT 1
17873: ARRAY
17874: PPUSH
17875: LD_INT 112
17877: PPUSH
17878: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu1 , false , 0 ] ] ;
17882: LD_ADDR_LOC 36
17886: PUSH
17887: LD_LOC 36
17891: PUSH
17892: LD_INT 112
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: LIST
17905: PUSH
17906: EMPTY
17907: LIST
17908: ADD
17909: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 2 ] , A2_bu2 ) ;
17910: LD_EXP 11
17914: PUSH
17915: LD_INT 2
17917: ARRAY
17918: PPUSH
17919: LD_INT 63
17921: PPUSH
17922: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 2 ] ;
17926: LD_ADDR_VAR 0 2
17930: PUSH
17931: LD_VAR 0 2
17935: PUSH
17936: LD_EXP 11
17940: PUSH
17941: LD_INT 2
17943: ARRAY
17944: ADD
17945: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu2 , false , 0 ] ] ;
17946: LD_ADDR_LOC 36
17950: PUSH
17951: LD_LOC 36
17955: PUSH
17956: LD_INT 63
17958: PUSH
17959: LD_INT 0
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: ADD
17973: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 3 ] , A2_bu3 ) ;
17974: LD_EXP 11
17978: PUSH
17979: LD_INT 3
17981: ARRAY
17982: PPUSH
17983: LD_INT 47
17985: PPUSH
17986: CALL_OW 120
// if difficulty > 1 then
17990: LD_OWVAR 67
17994: PUSH
17995: LD_INT 1
17997: GREATER
17998: IFFALSE 18020
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
18000: LD_ADDR_VAR 0 2
18004: PUSH
18005: LD_VAR 0 2
18009: PUSH
18010: LD_EXP 11
18014: PUSH
18015: LD_INT 3
18017: ARRAY
18018: ADD
18019: ST_TO_ADDR
// if difficulty > 1 then
18020: LD_OWVAR 67
18024: PUSH
18025: LD_INT 1
18027: GREATER
18028: IFFALSE 18050
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
18030: LD_ADDR_VAR 0 3
18034: PUSH
18035: LD_VAR 0 3
18039: PUSH
18040: LD_EXP 11
18044: PUSH
18045: LD_INT 3
18047: ARRAY
18048: ADD
18049: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu3 , false , 0 ] ] ;
18050: LD_ADDR_LOC 36
18054: PUSH
18055: LD_LOC 36
18059: PUSH
18060: LD_INT 47
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: ADD
18077: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 4 ] , A2_bu4 ) ;
18078: LD_EXP 11
18082: PUSH
18083: LD_INT 4
18085: ARRAY
18086: PPUSH
18087: LD_INT 60
18089: PPUSH
18090: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu4 , false , 0 ] ] ;
18094: LD_ADDR_LOC 36
18098: PUSH
18099: LD_LOC 36
18103: PUSH
18104: LD_INT 60
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: ADD
18121: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 5 ] , A2_bu5 ) ;
18122: LD_EXP 11
18126: PUSH
18127: LD_INT 5
18129: ARRAY
18130: PPUSH
18131: LD_INT 62
18133: PPUSH
18134: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 5 ] ;
18138: LD_ADDR_VAR 0 3
18142: PUSH
18143: LD_VAR 0 3
18147: PUSH
18148: LD_EXP 11
18152: PUSH
18153: LD_INT 5
18155: ARRAY
18156: ADD
18157: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu5 , false , 0 ] ] ;
18158: LD_ADDR_LOC 36
18162: PUSH
18163: LD_LOC 36
18167: PUSH
18168: LD_INT 62
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: ADD
18185: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 6 ] , A2_bu6 ) ;
18186: LD_EXP 11
18190: PUSH
18191: LD_INT 6
18193: ARRAY
18194: PPUSH
18195: LD_INT 59
18197: PPUSH
18198: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 6 ] ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: LD_VAR 0 3
18211: PUSH
18212: LD_EXP 11
18216: PUSH
18217: LD_INT 6
18219: ARRAY
18220: ADD
18221: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu6 , false , 0 ] ] ;
18222: LD_ADDR_LOC 36
18226: PUSH
18227: LD_LOC 36
18231: PUSH
18232: LD_INT 59
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: ADD
18249: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 17 ] , A2_tov ) ;
18250: LD_EXP 11
18254: PUSH
18255: LD_INT 17
18257: ARRAY
18258: PPUSH
18259: LD_INT 50
18261: PPUSH
18262: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18266: LD_ADDR_VAR 0 2
18270: PUSH
18271: LD_VAR 0 2
18275: PUSH
18276: LD_EXP 11
18280: PUSH
18281: LD_INT 17
18283: ARRAY
18284: ADD
18285: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18286: LD_ADDR_VAR 0 3
18290: PUSH
18291: LD_VAR 0 3
18295: PUSH
18296: LD_EXP 11
18300: PUSH
18301: LD_INT 17
18303: ARRAY
18304: ADD
18305: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18306: LD_ADDR_LOC 36
18310: PUSH
18311: LD_LOC 36
18315: PUSH
18316: LD_INT 50
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: LD_INT 3
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: ADD
18333: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 18 ] , A2_tov ) ;
18334: LD_EXP 11
18338: PUSH
18339: LD_INT 18
18341: ARRAY
18342: PPUSH
18343: LD_INT 50
18345: PPUSH
18346: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 18 ] ;
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: LD_VAR 0 2
18359: PUSH
18360: LD_EXP 11
18364: PUSH
18365: LD_INT 18
18367: ARRAY
18368: ADD
18369: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18370: LD_ADDR_LOC 36
18374: PUSH
18375: LD_LOC 36
18379: PUSH
18380: LD_INT 50
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: LD_INT 3
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: PUSH
18394: EMPTY
18395: LIST
18396: ADD
18397: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 19 ] , A2_tov ) ;
18398: LD_EXP 11
18402: PUSH
18403: LD_INT 19
18405: ARRAY
18406: PPUSH
18407: LD_INT 50
18409: PPUSH
18410: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 20 ] , A2_tov ) ;
18414: LD_EXP 11
18418: PUSH
18419: LD_INT 20
18421: ARRAY
18422: PPUSH
18423: LD_INT 50
18425: PPUSH
18426: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 15 ] , A2_dep ) ;
18430: LD_EXP 11
18434: PUSH
18435: LD_INT 15
18437: ARRAY
18438: PPUSH
18439: LD_INT 46
18441: PPUSH
18442: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 16 ] , A2_dep ) ;
18446: LD_EXP 11
18450: PUSH
18451: LD_INT 16
18453: ARRAY
18454: PPUSH
18455: LD_INT 46
18457: PPUSH
18458: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 16 ] ;
18462: LD_ADDR_VAR 0 3
18466: PUSH
18467: LD_VAR 0 3
18471: PUSH
18472: LD_EXP 11
18476: PUSH
18477: LD_INT 16
18479: ARRAY
18480: ADD
18481: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_dep , true , class_engineer ] ] ;
18482: LD_ADDR_LOC 36
18486: PUSH
18487: LD_LOC 36
18491: PUSH
18492: LD_INT 46
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: LD_INT 2
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: ADD
18509: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 7 ] , A2_bar ) ;
18510: LD_EXP 11
18514: PUSH
18515: LD_INT 7
18517: ARRAY
18518: PPUSH
18519: LD_INT 48
18521: PPUSH
18522: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 7 ] ;
18526: LD_ADDR_VAR 0 2
18530: PUSH
18531: LD_VAR 0 2
18535: PUSH
18536: LD_EXP 11
18540: PUSH
18541: LD_INT 7
18543: ARRAY
18544: ADD
18545: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18546: LD_ADDR_LOC 36
18550: PUSH
18551: LD_LOC 36
18555: PUSH
18556: LD_INT 48
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: LD_INT 8
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: ADD
18573: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] , A2_bar ) ;
18574: LD_EXP 11
18578: PUSH
18579: LD_INT 8
18581: ARRAY
18582: PPUSH
18583: LD_INT 48
18585: PPUSH
18586: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 8 ] ;
18590: LD_ADDR_VAR 0 3
18594: PUSH
18595: LD_VAR 0 3
18599: PUSH
18600: LD_EXP 11
18604: PUSH
18605: LD_INT 8
18607: ARRAY
18608: ADD
18609: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_soldier ] ] ;
18610: LD_ADDR_LOC 36
18614: PUSH
18615: LD_LOC 36
18619: PUSH
18620: LD_INT 48
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: ADD
18637: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] , A2_bar ) ;
18638: LD_EXP 11
18642: PUSH
18643: LD_INT 9
18645: ARRAY
18646: PPUSH
18647: LD_INT 48
18649: PPUSH
18650: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18654: LD_ADDR_LOC 36
18658: PUSH
18659: LD_LOC 36
18663: PUSH
18664: LD_INT 48
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 8
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: ADD
18681: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 10 ] , A2_bar ) ;
18682: LD_EXP 11
18686: PUSH
18687: LD_INT 10
18689: ARRAY
18690: PPUSH
18691: LD_INT 48
18693: PPUSH
18694: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 11 ] , A2_lab ) ;
18698: LD_EXP 11
18702: PUSH
18703: LD_INT 11
18705: ARRAY
18706: PPUSH
18707: LD_INT 61
18709: PPUSH
18710: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18714: LD_ADDR_VAR 0 2
18718: PUSH
18719: LD_VAR 0 2
18723: PUSH
18724: LD_EXP 11
18728: PUSH
18729: LD_INT 10
18731: ARRAY
18732: ADD
18733: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_VAR 0 3
18743: PUSH
18744: LD_EXP 11
18748: PUSH
18749: LD_INT 10
18751: ARRAY
18752: ADD
18753: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_lab , true , class_scientistic ] ] ;
18754: LD_ADDR_LOC 36
18758: PUSH
18759: LD_LOC 36
18763: PUSH
18764: LD_INT 61
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: LD_INT 4
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: ADD
18781: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 12 ] , A2_lab ) ;
18782: LD_EXP 11
18786: PUSH
18787: LD_INT 12
18789: ARRAY
18790: PPUSH
18791: LD_INT 61
18793: PPUSH
18794: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 23 ] , A2_radar ) ;
18798: LD_EXP 11
18802: PUSH
18803: LD_INT 23
18805: ARRAY
18806: PPUSH
18807: LD_INT 88
18809: PPUSH
18810: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 21 ] , A2_nau1 ) ;
18814: LD_EXP 11
18818: PUSH
18819: LD_INT 21
18821: ARRAY
18822: PPUSH
18823: LD_INT 107
18825: PPUSH
18826: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18830: LD_ADDR_VAR 0 2
18834: PUSH
18835: LD_VAR 0 2
18839: PUSH
18840: LD_EXP 11
18844: PUSH
18845: LD_INT 21
18847: ARRAY
18848: ADD
18849: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18850: LD_ADDR_VAR 0 3
18854: PUSH
18855: LD_VAR 0 3
18859: PUSH
18860: LD_EXP 11
18864: PUSH
18865: LD_INT 21
18867: ARRAY
18868: ADD
18869: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau1 , false , 0 ] ] ;
18870: LD_ADDR_LOC 36
18874: PUSH
18875: LD_LOC 36
18879: PUSH
18880: LD_INT 107
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: ADD
18897: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 22 ] , A2_nau2 ) ;
18898: LD_EXP 11
18902: PUSH
18903: LD_INT 22
18905: ARRAY
18906: PPUSH
18907: LD_INT 108
18909: PPUSH
18910: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18914: LD_ADDR_VAR 0 2
18918: PUSH
18919: LD_VAR 0 2
18923: PUSH
18924: LD_EXP 11
18928: PUSH
18929: LD_INT 22
18931: ARRAY
18932: ADD
18933: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18934: LD_ADDR_VAR 0 3
18938: PUSH
18939: LD_VAR 0 3
18943: PUSH
18944: LD_EXP 11
18948: PUSH
18949: LD_INT 22
18951: ARRAY
18952: ADD
18953: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau2 , false , 0 ] ] ;
18954: LD_ADDR_LOC 36
18958: PUSH
18959: LD_LOC 36
18963: PUSH
18964: LD_INT 108
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: ADD
18981: ST_TO_ADDR
// ComEnterUnit ( Opr_2 , A2_dep ) ;
18982: LD_LOC 32
18986: PPUSH
18987: LD_INT 46
18989: PPUSH
18990: CALL_OW 120
// AddMcUnits ( MD1 , MD1_un ) ;
18994: LD_EXP 6
18998: PPUSH
18999: LD_VAR 0 2
19003: PPUSH
19004: CALL_OW 390
// AddMcUnits ( MD2 , MD2_un ) ;
19008: LD_EXP 8
19012: PPUSH
19013: LD_VAR 0 3
19017: PPUSH
19018: CALL_OW 390
// end ;
19022: LD_VAR 0 1
19026: RET
// export function uklid_arabu3 ; begin
19027: LD_INT 0
19029: PPUSH
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 1 ] , A3_bu1 ) ;
19030: LD_EXP 12
19034: PUSH
19035: LD_INT 1
19037: ARRAY
19038: PPUSH
19039: LD_INT 30
19041: PPUSH
19042: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 2 ] , A3_bu2 ) ;
19046: LD_EXP 12
19050: PUSH
19051: LD_INT 2
19053: ARRAY
19054: PPUSH
19055: LD_INT 43
19057: PPUSH
19058: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 3 ] , A3_bu3 ) ;
19062: LD_EXP 12
19066: PUSH
19067: LD_INT 3
19069: ARRAY
19070: PPUSH
19071: LD_INT 31
19073: PPUSH
19074: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 7 ] , A3_bar ) ;
19078: LD_EXP 12
19082: PUSH
19083: LD_INT 7
19085: ARRAY
19086: PPUSH
19087: LD_INT 40
19089: PPUSH
19090: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 5 ] , A3_bar ) ;
19094: LD_EXP 12
19098: PUSH
19099: LD_INT 5
19101: ARRAY
19102: PPUSH
19103: LD_INT 40
19105: PPUSH
19106: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 6 ] , A3_bar ) ;
19110: LD_EXP 12
19114: PUSH
19115: LD_INT 6
19117: ARRAY
19118: PPUSH
19119: LD_INT 40
19121: PPUSH
19122: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 4 ] , A3_dep ) ;
19126: LD_EXP 12
19130: PUSH
19131: LD_INT 4
19133: ARRAY
19134: PPUSH
19135: LD_INT 28
19137: PPUSH
19138: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 8 ] , A3_tov ) ;
19142: LD_EXP 12
19146: PUSH
19147: LD_INT 8
19149: ARRAY
19150: PPUSH
19151: LD_INT 34
19153: PPUSH
19154: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 9 ] , A3_tov ) ;
19158: LD_EXP 12
19162: PUSH
19163: LD_INT 9
19165: ARRAY
19166: PPUSH
19167: LD_INT 34
19169: PPUSH
19170: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 10 ] , A3_tov ) ;
19174: LD_EXP 12
19178: PUSH
19179: LD_INT 10
19181: ARRAY
19182: PPUSH
19183: LD_INT 34
19185: PPUSH
19186: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 11 ] , A3_tov ) ;
19190: LD_EXP 12
19194: PUSH
19195: LD_INT 11
19197: ARRAY
19198: PPUSH
19199: LD_INT 34
19201: PPUSH
19202: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 12 ] , A3_lab ) ;
19206: LD_EXP 12
19210: PUSH
19211: LD_INT 12
19213: ARRAY
19214: PPUSH
19215: LD_INT 41
19217: PPUSH
19218: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 13 ] , A3_lab ) ;
19222: LD_EXP 12
19226: PUSH
19227: LD_INT 13
19229: ARRAY
19230: PPUSH
19231: LD_INT 41
19233: PPUSH
19234: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 16 ] , A3_dep ) ;
19238: LD_EXP 12
19242: PUSH
19243: LD_INT 16
19245: ARRAY
19246: PPUSH
19247: LD_INT 28
19249: PPUSH
19250: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 17 ] , A3_dep ) ;
19254: LD_EXP 12
19258: PUSH
19259: LD_INT 17
19261: ARRAY
19262: PPUSH
19263: LD_INT 28
19265: PPUSH
19266: CALL_OW 120
// end ;
19270: LD_VAR 0 1
19274: RET
// every 0 0$1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do
19275: LD_INT 3
19277: PPUSH
19278: LD_INT 22
19280: PUSH
19281: LD_EXP 1
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: PPUSH
19293: CALL_OW 70
19297: PUSH
19298: LD_INT 0
19300: GREATER
19301: IFFALSE 19447
19303: GO 19305
19305: DISABLE
// begin wait ( 0 0$2 ) ;
19306: LD_INT 70
19308: PPUSH
19309: CALL_OW 67
// ComExitBuilding ( A1_vo2 ) ;
19313: LD_INT 73
19315: PPUSH
19316: CALL_OW 122
// ComExitBuilding ( [ A1_ve1 , A1_ve2 ] ) ;
19320: LD_INT 87
19322: PUSH
19323: LD_INT 74
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PPUSH
19330: CALL_OW 122
// AddComAgressiveMove ( A1_ve1 , 121 , 147 ) ;
19334: LD_INT 87
19336: PPUSH
19337: LD_INT 121
19339: PPUSH
19340: LD_INT 147
19342: PPUSH
19343: CALL_OW 174
// AddComAgressiveMove ( A1_ve1 , 113 , 141 ) ;
19347: LD_INT 87
19349: PPUSH
19350: LD_INT 113
19352: PPUSH
19353: LD_INT 141
19355: PPUSH
19356: CALL_OW 174
// AddComEnterUnit ( A1_ve1 , A1_bu1 ) ;
19360: LD_INT 87
19362: PPUSH
19363: LD_INT 9
19365: PPUSH
19366: CALL_OW 180
// ComExitBuilding ( A1_en1 ) ;
19370: LD_INT 79
19372: PPUSH
19373: CALL_OW 122
// ComExitBuilding ( [ A1_me1 , A1_me2 ] ) ;
19377: LD_INT 81
19379: PUSH
19380: LD_INT 80
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 122
// AddComAgressiveMove ( A1_me1 , 113 , 128 ) ;
19391: LD_INT 81
19393: PPUSH
19394: LD_INT 113
19396: PPUSH
19397: LD_INT 128
19399: PPUSH
19400: CALL_OW 174
// if difficulty = 3 then
19404: LD_OWVAR 67
19408: PUSH
19409: LD_INT 3
19411: EQUAL
19412: IFFALSE 19424
// AddComEnterUnit ( A1_me1 , A1_au2 ) ;
19414: LD_INT 81
19416: PPUSH
19417: LD_INT 109
19419: PPUSH
19420: CALL_OW 180
// AddComAgressiveMove ( A1_me2 , 117 , 125 ) ;
19424: LD_INT 80
19426: PPUSH
19427: LD_INT 117
19429: PPUSH
19430: LD_INT 125
19432: PPUSH
19433: CALL_OW 174
// AddComEnterUnit ( A1_me2 , A1_au1 ) ;
19437: LD_INT 80
19439: PPUSH
19440: LD_INT 105
19442: PPUSH
19443: CALL_OW 180
// end ;
19447: END
// every 1 1$0 trigger utok1_over do var pom , i ; var souradnice ;
19448: LD_LOC 28
19452: IFFALSE 19685
19454: GO 19456
19456: DISABLE
19457: LD_INT 0
19459: PPUSH
19460: PPUSH
19461: PPUSH
// begin wait ( utok_2_doba [ difficulty ] ) ;
19462: LD_EXP 54
19466: PUSH
19467: LD_OWVAR 67
19471: ARRAY
19472: PPUSH
19473: CALL_OW 67
// for i in Ar_utok3_LIST do
19477: LD_ADDR_VAR 0 2
19481: PUSH
19482: LD_EXP 15
19486: PUSH
19487: FOR_IN
19488: IFFALSE 19507
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19490: LD_VAR 0 2
19494: PPUSH
19495: LD_INT 25
19497: PPUSH
19498: LD_INT 0
19500: PPUSH
19501: CALL_OW 49
19505: GO 19487
19507: POP
19508: POP
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
19509: LD_ADDR_VAR 0 1
19513: PUSH
19514: LD_INT 22
19516: PUSH
19517: LD_EXP 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: ST_TO_ADDR
// if pom > 0 then
19534: LD_VAR 0 1
19538: PUSH
19539: LD_INT 0
19541: GREATER
19542: IFFALSE 19583
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19544: LD_ADDR_VAR 0 3
19548: PUSH
19549: LD_VAR 0 1
19553: PUSH
19554: LD_INT 1
19556: ARRAY
19557: PPUSH
19558: CALL_OW 250
19562: PUSH
19563: LD_VAR 0 1
19567: PUSH
19568: LD_INT 1
19570: ARRAY
19571: PPUSH
19572: CALL_OW 251
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: ST_TO_ADDR
19581: GO 19598
// souradnice = [ 102 , 125 ] ;
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: LD_INT 102
19590: PUSH
19591: LD_INT 125
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19598: LD_INT 35
19600: PPUSH
19601: CALL_OW 67
// mcm1 = McMove ( 1 , Ar_utok3_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive ] ) ;
19605: LD_ADDR_LOC 37
19609: PUSH
19610: LD_INT 1
19612: PPUSH
19613: LD_EXP 15
19617: PPUSH
19618: LD_INT 128
19620: PUSH
19621: LD_INT 91
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 128
19630: PUSH
19631: LD_INT 108
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 126
19640: PUSH
19641: LD_INT 121
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 120
19650: PUSH
19651: LD_INT 131
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_VAR 0 3
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: PPUSH
19670: LD_INT 1
19672: PUSH
19673: LD_INT 6
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 398
19684: ST_TO_ADDR
// end ;
19685: PPOPN 3
19687: END
// every 0 0$5 trigger ( not IsOK ( A2_bu1 ) ) and ( not IsOK ( A2_bu2 ) ) do var pom , i ; var souradnice ;
19688: LD_INT 112
19690: PPUSH
19691: CALL_OW 302
19695: NOT
19696: PUSH
19697: LD_INT 63
19699: PPUSH
19700: CALL_OW 302
19704: NOT
19705: AND
19706: IFFALSE 19940
19708: GO 19710
19710: DISABLE
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
19715: PPUSH
// begin for i in Ar_utok2_LIST do
19716: LD_ADDR_VAR 0 2
19720: PUSH
19721: LD_EXP 14
19725: PUSH
19726: FOR_IN
19727: IFFALSE 19746
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19729: LD_VAR 0 2
19733: PPUSH
19734: LD_INT 25
19736: PPUSH
19737: LD_INT 0
19739: PPUSH
19740: CALL_OW 49
19744: GO 19726
19746: POP
19747: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
19748: LD_ADDR_VAR 0 1
19752: PUSH
19753: LD_INT 22
19755: PUSH
19756: LD_EXP 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PPUSH
19779: CALL_OW 69
19783: ST_TO_ADDR
// if pom > 0 then
19784: LD_VAR 0 1
19788: PUSH
19789: LD_INT 0
19791: GREATER
19792: IFFALSE 19833
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19794: LD_ADDR_VAR 0 3
19798: PUSH
19799: LD_VAR 0 1
19803: PUSH
19804: LD_INT 1
19806: ARRAY
19807: PPUSH
19808: CALL_OW 250
19812: PUSH
19813: LD_VAR 0 1
19817: PUSH
19818: LD_INT 1
19820: ARRAY
19821: PPUSH
19822: CALL_OW 251
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: ST_TO_ADDR
19831: GO 19848
// souradnice = [ 39 , 16 ] ;
19833: LD_ADDR_VAR 0 3
19837: PUSH
19838: LD_INT 39
19840: PUSH
19841: LD_INT 16
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: ST_TO_ADDR
// mcm2 = McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19848: LD_ADDR_LOC 38
19852: PUSH
19853: LD_INT 1
19855: PPUSH
19856: LD_EXP 14
19860: PPUSH
19861: LD_INT 128
19863: PUSH
19864: LD_INT 91
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 128
19873: PUSH
19874: LD_INT 108
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 126
19883: PUSH
19884: LD_INT 121
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 120
19893: PUSH
19894: LD_INT 131
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_VAR 0 3
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: PPUSH
19913: LD_INT 1
19915: PUSH
19916: LD_INT 6
19918: PUSH
19919: LD_INT 5
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: PPUSH
19927: CALL_OW 398
19931: ST_TO_ADDR
// utok3_over = true ;
19932: LD_ADDR_LOC 29
19936: PUSH
19937: LD_INT 1
19939: ST_TO_ADDR
// end ;
19940: PPOPN 3
19942: END
// every 1 1$30 trigger A2_dobyta do var pom , i , pom1 ;
19943: LD_EXP 29
19947: IFFALSE 20212
19949: GO 19951
19951: DISABLE
19952: LD_INT 0
19954: PPUSH
19955: PPUSH
19956: PPUSH
// begin wait ( 2 2$0 ) ;
19957: LD_INT 4200
19959: PPUSH
19960: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_EXP 1
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 34
19986: PUSH
19987: LD_INT 12
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 34
19996: PUSH
19997: LD_INT 32
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PPUSH
20013: CALL_OW 69
20017: ST_TO_ADDR
// for i in Ar_utok4_LIST do
20018: LD_ADDR_VAR 0 2
20022: PUSH
20023: LD_EXP 16
20027: PUSH
20028: FOR_IN
20029: IFFALSE 20048
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20031: LD_VAR 0 2
20035: PPUSH
20036: LD_INT 25
20038: PPUSH
20039: LD_INT 0
20041: PPUSH
20042: CALL_OW 49
20046: GO 20028
20048: POP
20049: POP
// if pom > 0 then
20050: LD_VAR 0 1
20054: PUSH
20055: LD_INT 0
20057: GREATER
20058: IFFALSE 20132
// begin ComAgressiveMove ( Ar_utok4_LIST , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
20060: LD_EXP 16
20064: PPUSH
20065: LD_VAR 0 1
20069: PUSH
20070: LD_INT 1
20072: ARRAY
20073: PPUSH
20074: CALL_OW 250
20078: PPUSH
20079: LD_VAR 0 1
20083: PUSH
20084: LD_INT 1
20086: ARRAY
20087: PPUSH
20088: CALL_OW 251
20092: PPUSH
20093: CALL_OW 114
// AddComAttackUnit ( Ar_utok4_LIST , pom [ 1 ] ) ;
20097: LD_EXP 16
20101: PPUSH
20102: LD_VAR 0 1
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: PPUSH
20111: CALL_OW 175
// AddComAgressiveMove ( Ar_utok4_LIST , 59 , 7 ) ;
20115: LD_EXP 16
20119: PPUSH
20120: LD_INT 59
20122: PPUSH
20123: LD_INT 7
20125: PPUSH
20126: CALL_OW 174
// end else
20130: GO 20204
// McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 123 ] ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
20132: LD_INT 1
20134: PPUSH
20135: LD_EXP 14
20139: PPUSH
20140: LD_INT 128
20142: PUSH
20143: LD_INT 91
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 128
20152: PUSH
20153: LD_INT 108
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 126
20162: PUSH
20163: LD_INT 121
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 120
20172: PUSH
20173: LD_INT 123
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: PPUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 6
20191: PUSH
20192: LD_INT 5
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: LIST
20199: PPUSH
20200: CALL_OW 398
// utok4_over = true ;
20204: LD_ADDR_LOC 30
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// end ;
20212: PPOPN 3
20214: END
// every 0 0$1 trigger FilterUnitsInArea ( zoufalost1 , [ [ f_side , Arabi ] ] ) = 0 do var i ;
20215: LD_INT 35
20217: PPUSH
20218: LD_INT 22
20220: PUSH
20221: LD_EXP 3
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: PPUSH
20233: CALL_OW 70
20237: PUSH
20238: LD_INT 0
20240: EQUAL
20241: IFFALSE 20334
20243: GO 20245
20245: DISABLE
20246: LD_INT 0
20248: PPUSH
// begin for i in Ar_backa_LIST do
20249: LD_ADDR_VAR 0 1
20253: PUSH
20254: LD_EXP 18
20258: PUSH
20259: FOR_IN
20260: IFFALSE 20279
// PlaceUnitArea ( i , backa1 , false ) ;
20262: LD_VAR 0 1
20266: PPUSH
20267: LD_INT 36
20269: PPUSH
20270: LD_INT 0
20272: PPUSH
20273: CALL_OW 49
20277: GO 20259
20279: POP
20280: POP
// McMove ( 1 , Ar_backa_LIST , [ [ 59 , 7 ] , [ 76 , 11 ] , [ 95 , 19 ] ] , [ mc_move_agressive ] ) ;
20281: LD_INT 1
20283: PPUSH
20284: LD_EXP 18
20288: PPUSH
20289: LD_INT 59
20291: PUSH
20292: LD_INT 7
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 76
20301: PUSH
20302: LD_INT 11
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 95
20311: PUSH
20312: LD_INT 19
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: PPUSH
20324: LD_INT 6
20326: PUSH
20327: EMPTY
20328: LIST
20329: PPUSH
20330: CALL_OW 398
// end ;
20334: PPOPN 1
20336: END
// every 1 1$0 trigger utok4_over do var pom , i , pom1 ;
20337: LD_LOC 30
20341: IFFALSE 20564
20343: GO 20345
20345: DISABLE
20346: LD_INT 0
20348: PPUSH
20349: PPUSH
20350: PPUSH
// begin wait ( last_attack_wait [ difficulty ] ) ;
20351: LD_EXP 55
20355: PUSH
20356: LD_OWVAR 67
20360: ARRAY
20361: PPUSH
20362: CALL_OW 67
// wait ( 2 2$0 ) ;
20366: LD_INT 4200
20368: PPUSH
20369: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20373: LD_ADDR_VAR 0 1
20377: PUSH
20378: LD_INT 22
20380: PUSH
20381: LD_EXP 1
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: LD_INT 34
20395: PUSH
20396: LD_INT 12
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 34
20405: PUSH
20406: LD_INT 32
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PPUSH
20422: CALL_OW 69
20426: ST_TO_ADDR
// for i in Ar_utoklast_LIST do
20427: LD_ADDR_VAR 0 2
20431: PUSH
20432: LD_EXP 17
20436: PUSH
20437: FOR_IN
20438: IFFALSE 20457
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20440: LD_VAR 0 2
20444: PPUSH
20445: LD_INT 25
20447: PPUSH
20448: LD_INT 0
20450: PPUSH
20451: CALL_OW 49
20455: GO 20437
20457: POP
20458: POP
// for i in pom do
20459: LD_ADDR_VAR 0 2
20463: PUSH
20464: LD_VAR 0 1
20468: PUSH
20469: FOR_IN
20470: IFFALSE 20517
// begin AddComAgressiveMove ( Ar_utoklast_LIST , GetX ( i ) , GetY ( i ) ) ;
20472: LD_EXP 17
20476: PPUSH
20477: LD_VAR 0 2
20481: PPUSH
20482: CALL_OW 250
20486: PPUSH
20487: LD_VAR 0 2
20491: PPUSH
20492: CALL_OW 251
20496: PPUSH
20497: CALL_OW 174
// AddComAttackUnit ( Ar_utoklast_LIST , i ) ;
20501: LD_EXP 17
20505: PPUSH
20506: LD_VAR 0 2
20510: PPUSH
20511: CALL_OW 175
// end ;
20515: GO 20469
20517: POP
20518: POP
// AddComAgressiveMove ( Ar_utoklast_LIST , 18 , 17 ) ;
20519: LD_EXP 17
20523: PPUSH
20524: LD_INT 18
20526: PPUSH
20527: LD_INT 17
20529: PPUSH
20530: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 72 , 10 ) ;
20534: LD_EXP 17
20538: PPUSH
20539: LD_INT 72
20541: PPUSH
20542: LD_INT 10
20544: PPUSH
20545: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 116 , 126 ) ;
20549: LD_EXP 17
20553: PPUSH
20554: LD_INT 116
20556: PPUSH
20557: LD_INT 126
20559: PPUSH
20560: CALL_OW 174
// end ;
20564: PPOPN 3
20566: END
// every 1 1$0 trigger A1_dobyta do var pom ;
20567: LD_EXP 28
20571: IFFALSE 20998
20573: GO 20575
20575: DISABLE
20576: LD_INT 0
20578: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
20579: LD_ADDR_VAR 0 1
20583: PUSH
20584: LD_INT 3
20586: PPUSH
20587: LD_INT 22
20589: PUSH
20590: LD_EXP 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: EMPTY
20600: LIST
20601: PPUSH
20602: CALL_OW 70
20606: ST_TO_ADDR
// wait ( protiutok1 [ difficulty ] ) ;
20607: LD_EXP 48
20611: PUSH
20612: LD_OWVAR 67
20616: ARRAY
20617: PPUSH
20618: CALL_OW 67
// ComMoveXY ( [ A2_kam1 , A2_kam2 , A2_kam3 ] , 66 , 110 ) ;
20622: LD_INT 86
20624: PUSH
20625: LD_INT 85
20627: PUSH
20628: LD_INT 84
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: PPUSH
20636: LD_INT 66
20638: PPUSH
20639: LD_INT 110
20641: PPUSH
20642: CALL_OW 111
// AddComAttackUnit ( A2_kam1 , NearestUnitToXY ( pom , 102 , 112 ) ) ;
20646: LD_INT 86
20648: PPUSH
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_INT 102
20656: PPUSH
20657: LD_INT 112
20659: PPUSH
20660: CALL_OW 73
20664: PPUSH
20665: CALL_OW 175
// AddComAttackUnit ( A2_kam1 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20669: LD_INT 86
20671: PPUSH
20672: LD_VAR 0 1
20676: PUSH
20677: LD_INT 1
20679: PPUSH
20680: LD_VAR 0 1
20684: PUSH
20685: LD_INT 0
20687: PLUS
20688: PPUSH
20689: CALL_OW 12
20693: ARRAY
20694: PPUSH
20695: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , NearestUnitToXY ( pom , 90 , 121 ) ) ;
20699: LD_INT 85
20701: PPUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: LD_INT 90
20709: PPUSH
20710: LD_INT 121
20712: PPUSH
20713: CALL_OW 73
20717: PPUSH
20718: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20722: LD_INT 85
20724: PPUSH
20725: LD_VAR 0 1
20729: PUSH
20730: LD_INT 1
20732: PPUSH
20733: LD_VAR 0 1
20737: PUSH
20738: LD_INT 0
20740: PLUS
20741: PPUSH
20742: CALL_OW 12
20746: ARRAY
20747: PPUSH
20748: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , A1_dep ) ;
20752: LD_INT 84
20754: PPUSH
20755: LD_INT 4
20757: PPUSH
20758: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20762: LD_INT 84
20764: PPUSH
20765: LD_VAR 0 1
20769: PUSH
20770: LD_INT 1
20772: PPUSH
20773: LD_VAR 0 1
20777: PUSH
20778: LD_INT 0
20780: PLUS
20781: PPUSH
20782: CALL_OW 12
20786: ARRAY
20787: PPUSH
20788: CALL_OW 175
// McMove ( 1 , [ A2_op1 , A2_op2 , A2_op3 ] , [ [ 44 , 25 ] , [ 50 , 54 ] , [ 92 , 101 ] , [ 112 , 124 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20792: LD_INT 1
20794: PPUSH
20795: LD_INT 89
20797: PUSH
20798: LD_INT 90
20800: PUSH
20801: LD_INT 91
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: PPUSH
20809: LD_INT 44
20811: PUSH
20812: LD_INT 25
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 50
20821: PUSH
20822: LD_INT 54
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 92
20831: PUSH
20832: LD_INT 101
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 112
20841: PUSH
20842: LD_INT 124
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PPUSH
20855: LD_INT 6
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 398
// ComMoveXY ( A2_mor3 , 91 , 128 ) ;
20869: LD_INT 92
20871: PPUSH
20872: LD_INT 91
20874: PPUSH
20875: LD_INT 128
20877: PPUSH
20878: CALL_OW 111
// for i in CREATE_AR_PROTIOFENZIVU_LIST do
20882: LD_ADDR_LOC 33
20886: PUSH
20887: LD_EXP 10
20891: PUSH
20892: FOR_IN
20893: IFFALSE 20912
// PlaceUnitArea ( i , protiEN , false ) ;
20895: LD_LOC 33
20899: PPUSH
20900: LD_INT 21
20902: PPUSH
20903: LD_INT 0
20905: PPUSH
20906: CALL_OW 49
20910: GO 20892
20912: POP
20913: POP
// McMove ( 1 , CREATE_AR_PROTIOFENZIVU_LIST , [ [ 49 , 31 ] , [ 55 , 76 ] , [ 100 , 109 ] , [ 122 , 132 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20914: LD_INT 1
20916: PPUSH
20917: LD_EXP 10
20921: PPUSH
20922: LD_INT 49
20924: PUSH
20925: LD_INT 31
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 55
20934: PUSH
20935: LD_INT 76
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 100
20944: PUSH
20945: LD_INT 109
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 122
20954: PUSH
20955: LD_INT 132
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PPUSH
20968: LD_INT 6
20970: PUSH
20971: LD_INT 5
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PPUSH
20978: CALL_OW 398
// utok1 := true ;
20982: LD_ADDR_LOC 27
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// utok1_over = true ;
20990: LD_ADDR_LOC 28
20994: PUSH
20995: LD_INT 1
20997: ST_TO_ADDR
// end ;
20998: PPOPN 1
21000: END
// every 0 0$17 trigger oposoldier = - 1 do
21001: LD_EXP 46
21005: PUSH
21006: LD_INT 1
21008: NEG
21009: EQUAL
21010: IFFALSE 21087
21012: GO 21014
21014: DISABLE
// begin if not See ( You , A3_solop ) then
21015: LD_EXP 1
21019: PPUSH
21020: LD_INT 102
21022: PPUSH
21023: CALL_OW 292
21027: NOT
21028: IFFALSE 21087
// begin SetClass ( A3_solop , class_mechanic ) ;
21030: LD_INT 102
21032: PPUSH
21033: LD_INT 3
21035: PPUSH
21036: CALL_OW 336
// RemoveUnit ( A3_solop ) ;
21040: LD_INT 102
21042: PPUSH
21043: CALL_OW 64
// pom := create_auto_pro_solopa ;
21047: LD_ADDR_LOC 34
21051: PUSH
21052: CALL 8505 0 0
21056: ST_TO_ADDR
// PlaceHumanInUnit ( A3_solop , pom ) ;
21057: LD_INT 102
21059: PPUSH
21060: LD_LOC 34
21064: PPUSH
21065: CALL_OW 52
// PlaceUnitXY ( pom , 111 , 16 , false ) ;
21069: LD_LOC 34
21073: PPUSH
21074: LD_INT 111
21076: PPUSH
21077: LD_INT 16
21079: PPUSH
21080: LD_INT 0
21082: PPUSH
21083: CALL_OW 48
// end ; end ;
21087: END
// every 1 1$0 trigger oposoldier = 1 marked 999 do
21088: LD_EXP 46
21092: PUSH
21093: LD_INT 1
21095: EQUAL
21096: IFFALSE 21130
21098: GO 21100
21100: DISABLE
// begin ComMoveXY ( A3_solop , 127 , 89 ) ;
21101: LD_INT 102
21103: PPUSH
21104: LD_INT 127
21106: PPUSH
21107: LD_INT 89
21109: PPUSH
21110: CALL_OW 111
// ComMoveXY ( OpoMike , 127 , 89 ) ;
21114: LD_INT 103
21116: PPUSH
21117: LD_INT 127
21119: PPUSH
21120: LD_INT 89
21122: PPUSH
21123: CALL_OW 111
// enable ( 997 ) ;
21127: LD_INT 997
21129: ENABLE_MARKED
// end ;
21130: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baziny ) marked 997 do
21131: LD_INT 102
21133: PPUSH
21134: LD_INT 12
21136: PPUSH
21137: CALL_OW 308
21141: IFFALSE 21156
21143: GO 21145
21145: DISABLE
// begin wait ( 0 0$5 ) ;
21146: LD_INT 175
21148: PPUSH
21149: CALL_OW 67
// enable ( 998 ) ;
21153: LD_INT 998
21155: ENABLE_MARKED
// end ;
21156: END
// every 0 0$5 trigger oposoldier = 1 marked 998 do
21157: LD_EXP 46
21161: PUSH
21162: LD_INT 1
21164: EQUAL
21165: IFFALSE 21383
21167: GO 21169
21169: DISABLE
// begin pom = FilterUnitsInArea ( Baziny , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
21170: LD_ADDR_LOC 34
21174: PUSH
21175: LD_INT 12
21177: PPUSH
21178: LD_INT 21
21180: PUSH
21181: LD_INT 2
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 33
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 34
21203: PUSH
21204: LD_INT 12
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 34
21213: PUSH
21214: LD_INT 32
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: LD_INT 59
21231: PUSH
21232: EMPTY
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: PPUSH
21245: CALL_OW 70
21249: ST_TO_ADDR
// if pom > 0 then
21250: LD_LOC 34
21254: PUSH
21255: LD_INT 0
21257: GREATER
21258: IFFALSE 21360
// begin ComEnterUnit ( A3_solop , pom [ 1 ] ) ;
21260: LD_INT 102
21262: PPUSH
21263: LD_LOC 34
21267: PUSH
21268: LD_INT 1
21270: ARRAY
21271: PPUSH
21272: CALL_OW 120
// AddComMoveXY ( A3_solop , 165 , 92 ) ;
21276: LD_INT 102
21278: PPUSH
21279: LD_INT 165
21281: PPUSH
21282: LD_INT 92
21284: PPUSH
21285: CALL_OW 171
// AddComMoveXY ( OpoMike , 165 , 92 ) ;
21289: LD_INT 103
21291: PPUSH
21292: LD_INT 165
21294: PPUSH
21295: LD_INT 92
21297: PPUSH
21298: CALL_OW 171
// oposoldier = 2 ;
21302: LD_ADDR_EXP 46
21306: PUSH
21307: LD_INT 2
21309: ST_TO_ADDR
// wait ( 0 0$15 ) ;
21310: LD_INT 525
21312: PPUSH
21313: CALL_OW 67
// if not IsInUnit ( A3_solop ) then
21317: LD_INT 102
21319: PPUSH
21320: CALL_OW 310
21324: NOT
21325: IFFALSE 21358
// begin ComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21327: LD_INT 102
21329: PUSH
21330: LD_INT 103
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PPUSH
21337: LD_INT 116
21339: PPUSH
21340: LD_INT 23
21342: PPUSH
21343: CALL_OW 111
// enable ( 996 ) ;
21347: LD_INT 996
21349: ENABLE_MARKED
// oposoldier = 1 ;
21350: LD_ADDR_EXP 46
21354: PUSH
21355: LD_INT 1
21357: ST_TO_ADDR
// end ; end else
21358: GO 21383
// begin AddComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21360: LD_INT 102
21362: PUSH
21363: LD_INT 103
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PPUSH
21370: LD_INT 116
21372: PPUSH
21373: LD_INT 23
21375: PPUSH
21376: CALL_OW 171
// enable ( 996 ) ;
21380: LD_INT 996
21382: ENABLE_MARKED
// end ; end ;
21383: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baze_zpet ) marked 996 do
21384: LD_INT 102
21386: PPUSH
21387: LD_INT 34
21389: PPUSH
21390: CALL_OW 308
21394: IFFALSE 21402
21396: GO 21398
21398: DISABLE
// begin enable ( 999 ) ;
21399: LD_INT 999
21401: ENABLE_MARKED
// end ;
21402: END
// every 0 0$3 trigger oposoldier = 2 do
21403: LD_EXP 46
21407: PUSH
21408: LD_INT 2
21410: EQUAL
21411: IFFALSE 21542
21413: GO 21415
21415: DISABLE
// begin pom = FilterUnitsInArea ( SolopEx , [ [ f_side , Arabi2 ] ] ) ;
21416: LD_ADDR_LOC 34
21420: PUSH
21421: LD_INT 13
21423: PPUSH
21424: LD_INT 22
21426: PUSH
21427: LD_EXP 4
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: EMPTY
21437: LIST
21438: PPUSH
21439: CALL_OW 70
21443: ST_TO_ADDR
// if pom > 0 then
21444: LD_LOC 34
21448: PUSH
21449: LD_INT 0
21451: GREATER
21452: IFFALSE 21541
// for i in pom do
21454: LD_ADDR_LOC 33
21458: PUSH
21459: LD_LOC 34
21463: PUSH
21464: FOR_IN
21465: IFFALSE 21539
// begin if GetType ( i ) = unit_vehicle then
21467: LD_LOC 33
21471: PPUSH
21472: CALL_OW 247
21476: PUSH
21477: LD_INT 2
21479: EQUAL
21480: IFFALSE 21528
// if IsDrivenBy ( i ) = A3_solop then
21482: LD_LOC 33
21486: PPUSH
21487: CALL_OW 311
21491: PUSH
21492: LD_INT 102
21494: EQUAL
21495: IFFALSE 21528
// begin oposoldier = 3 ;
21497: LD_ADDR_EXP 46
21501: PUSH
21502: LD_INT 3
21504: ST_TO_ADDR
// dialog_kamery ;
21505: CALL 5535 0 0
// RemoveUnit ( IsInUnit ( A3_solop ) ) ;
21509: LD_INT 102
21511: PPUSH
21512: CALL_OW 310
21516: PPUSH
21517: CALL_OW 64
// RemoveUnit ( OpoMike ) ;
21521: LD_INT 103
21523: PPUSH
21524: CALL_OW 64
// end ; RemoveUnit ( i ) ;
21528: LD_LOC 33
21532: PPUSH
21533: CALL_OW 64
// end ;
21537: GO 21464
21539: POP
21540: POP
// enable ;
21541: ENABLE
// end ;
21542: END
// every 0 0$1 do
21543: GO 21545
21545: DISABLE
// begin pom = FilterUnitsInArea ( Calibre1 , [ [ f_side , You ] ] ) ;
21546: LD_ADDR_LOC 34
21550: PUSH
21551: LD_INT 14
21553: PPUSH
21554: LD_INT 22
21556: PUSH
21557: LD_EXP 1
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: PPUSH
21569: CALL_OW 70
21573: ST_TO_ADDR
// if pom > 0 then
21574: LD_LOC 34
21578: PUSH
21579: LD_INT 0
21581: GREATER
21582: IFFALSE 21774
// begin while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21584: LD_INT 15
21586: PPUSH
21587: LD_INT 22
21589: PUSH
21590: LD_EXP 1
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: PPUSH
21602: CALL_OW 70
21606: PUSH
21607: LD_INT 0
21609: EQUAL
21610: IFFALSE 21621
// wait ( 0 0$0.5 ) ;
21612: LD_INT 18
21614: PPUSH
21615: CALL_OW 67
21619: GO 21584
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21621: LD_INT 82
21623: PUSH
21624: LD_INT 83
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PPUSH
21631: CALL_OW 134
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 33 , 55 ) ;
21635: LD_INT 82
21637: PUSH
21638: LD_INT 83
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PPUSH
21645: LD_INT 33
21647: PPUSH
21648: LD_INT 55
21650: PPUSH
21651: CALL_OW 171
// AddComWalk ( [ A2_zas1 , A2_zas2 ] ) ;
21655: LD_INT 82
21657: PUSH
21658: LD_INT 83
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 198
// AddComPlaceRemoteCharge ( A2_zas1 , 39 , 15 , 0 ) ;
21669: LD_INT 82
21671: PPUSH
21672: LD_INT 39
21674: PPUSH
21675: LD_INT 15
21677: PPUSH
21678: LD_INT 0
21680: PPUSH
21681: CALL_OW 193
// AddComPlaceRemoteCharge ( A2_zas2 , 37 , 14 , 0 ) ;
21685: LD_INT 83
21687: PPUSH
21688: LD_INT 37
21690: PPUSH
21691: LD_INT 14
21693: PPUSH
21694: LD_INT 0
21696: PPUSH
21697: CALL_OW 193
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 25 , 13 ) ;
21701: LD_INT 82
21703: PUSH
21704: LD_INT 83
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PPUSH
21711: LD_INT 25
21713: PPUSH
21714: LD_INT 13
21716: PPUSH
21717: CALL_OW 171
// while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21721: LD_INT 15
21723: PPUSH
21724: LD_INT 22
21726: PUSH
21727: LD_EXP 1
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: PPUSH
21739: CALL_OW 70
21743: PUSH
21744: LD_INT 0
21746: EQUAL
21747: IFFALSE 21758
// wait ( 0 0$0.5 ) ;
21749: LD_INT 18
21751: PPUSH
21752: CALL_OW 67
21756: GO 21721
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21758: LD_INT 82
21760: PUSH
21761: LD_INT 83
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PPUSH
21768: CALL_OW 134
// end else
21772: GO 21775
// enable ;
21774: ENABLE
// end ;
21775: END
// every 0 0$1 do
21776: GO 21778
21778: DISABLE
// begin pom = FilterUnitsInArea ( Calibre2 , [ [ f_side , You ] ] ) ;
21779: LD_ADDR_LOC 34
21783: PUSH
21784: LD_INT 18
21786: PPUSH
21787: LD_INT 22
21789: PUSH
21790: LD_EXP 1
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: PPUSH
21802: CALL_OW 70
21806: ST_TO_ADDR
// if pom > 0 then
21807: LD_LOC 34
21811: PUSH
21812: LD_INT 0
21814: GREATER
21815: IFFALSE 21980
// begin while FilterUnitsInArea ( Boom3 , [ [ f_side , You ] ] ) = 0 do
21817: LD_INT 19
21819: PPUSH
21820: LD_INT 22
21822: PUSH
21823: LD_EXP 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: PPUSH
21835: CALL_OW 70
21839: PUSH
21840: LD_INT 0
21842: EQUAL
21843: IFFALSE 21854
// wait ( 0 0$0.5 ) ;
21845: LD_INT 18
21847: PPUSH
21848: CALL_OW 67
21852: GO 21817
// ComFireExplosives ( A3_zas1 ) ;
21854: LD_INT 101
21856: PPUSH
21857: CALL_OW 134
// bum2 := true ;
21861: LD_ADDR_EXP 47
21865: PUSH
21866: LD_INT 1
21868: ST_TO_ADDR
// AddComWalk ( A3_zas1 ) ;
21869: LD_INT 101
21871: PPUSH
21872: CALL_OW 198
// pom = FilterUnitsInArea ( Abase3 , [ [ f_side , You ] ] ) ;
21876: LD_ADDR_LOC 34
21880: PUSH
21881: LD_INT 17
21883: PPUSH
21884: LD_INT 22
21886: PUSH
21887: LD_EXP 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: PPUSH
21899: CALL_OW 70
21903: ST_TO_ADDR
// if pom > 0 then
21904: LD_LOC 34
21908: PUSH
21909: LD_INT 0
21911: GREATER
21912: IFFALSE 21948
// begin AddComPlaceDelayedCharge ( A3_zas1 , 0 , 0 , pom [ 1 ] ) ;
21914: LD_INT 101
21916: PPUSH
21917: LD_INT 0
21919: PPUSH
21920: LD_INT 0
21922: PPUSH
21923: LD_LOC 34
21927: PUSH
21928: LD_INT 1
21930: ARRAY
21931: PPUSH
21932: CALL_OW 192
// AddComEnterUnit ( A3_zas1 , A3_bar ) ;
21936: LD_INT 101
21938: PPUSH
21939: LD_INT 40
21941: PPUSH
21942: CALL_OW 180
// end else
21946: GO 21978
// begin AddComPlaceRemoteCharge ( A3_zas1 , 102 , 19 , 0 ) ;
21948: LD_INT 101
21950: PPUSH
21951: LD_INT 102
21953: PPUSH
21954: LD_INT 19
21956: PPUSH
21957: LD_INT 0
21959: PPUSH
21960: CALL_OW 193
// AddComMoveXY ( A3_zas1 , 99 , 3 ) ;
21964: LD_INT 101
21966: PPUSH
21967: LD_INT 99
21969: PPUSH
21970: LD_INT 3
21972: PPUSH
21973: CALL_OW 171
// enable ;
21977: ENABLE
// end ; end else
21978: GO 21981
// enable ;
21980: ENABLE
// end ;
21981: END
// every 0 0$2 do
21982: GO 21984
21984: DISABLE
// begin pom = [ ] ;
21985: LD_ADDR_LOC 34
21989: PUSH
21990: EMPTY
21991: ST_TO_ADDR
// pom1 = [ ] ;
21992: LD_ADDR_LOC 35
21996: PUSH
21997: EMPTY
21998: ST_TO_ADDR
// for i in Veze_2 do
21999: LD_ADDR_LOC 33
22003: PUSH
22004: LD_LOC 31
22008: PUSH
22009: FOR_IN
22010: IFFALSE 22045
// if GetLives ( i ) <> 1000 then
22012: LD_LOC 33
22016: PPUSH
22017: CALL_OW 256
22021: PUSH
22022: LD_INT 1000
22024: NONEQUAL
22025: IFFALSE 22043
// pom = pom ^ i ;
22027: LD_ADDR_LOC 34
22031: PUSH
22032: LD_LOC 34
22036: PUSH
22037: LD_LOC 33
22041: ADD
22042: ST_TO_ADDR
22043: GO 22009
22045: POP
22046: POP
// for i in Opr_2 do
22047: LD_ADDR_LOC 33
22051: PUSH
22052: LD_LOC 32
22056: PUSH
22057: FOR_IN
22058: IFFALSE 22089
// if IsOK ( i ) then
22060: LD_LOC 33
22064: PPUSH
22065: CALL_OW 302
22069: IFFALSE 22087
// pom1 = pom1 ^ i ;
22071: LD_ADDR_LOC 35
22075: PUSH
22076: LD_LOC 35
22080: PUSH
22081: LD_LOC 33
22085: ADD
22086: ST_TO_ADDR
22087: GO 22057
22089: POP
22090: POP
// if pom1 > 0 and pom > 0 then
22091: LD_LOC 35
22095: PUSH
22096: LD_INT 0
22098: GREATER
22099: PUSH
22100: LD_LOC 34
22104: PUSH
22105: LD_INT 0
22107: GREATER
22108: AND
22109: IFFALSE 22267
// begin if pom + 0 <= pom1 + 0 then
22111: LD_LOC 34
22115: PUSH
22116: LD_INT 0
22118: PLUS
22119: PUSH
22120: LD_LOC 35
22124: PUSH
22125: LD_INT 0
22127: PLUS
22128: LESSEQUAL
22129: IFFALSE 22200
// for i := 1 to pom + 0 do
22131: LD_ADDR_LOC 33
22135: PUSH
22136: DOUBLE
22137: LD_INT 1
22139: DEC
22140: ST_TO_ADDR
22141: LD_LOC 34
22145: PUSH
22146: LD_INT 0
22148: PLUS
22149: PUSH
22150: FOR_TO
22151: IFFALSE 22196
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22153: LD_LOC 35
22157: PUSH
22158: LD_LOC 33
22162: ARRAY
22163: PPUSH
22164: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22168: LD_LOC 35
22172: PUSH
22173: LD_LOC 33
22177: ARRAY
22178: PPUSH
22179: LD_LOC 34
22183: PUSH
22184: LD_LOC 33
22188: ARRAY
22189: PPUSH
22190: CALL_OW 190
// end else
22194: GO 22150
22196: POP
22197: POP
22198: GO 22267
// for i := 1 to pom1 + 0 do
22200: LD_ADDR_LOC 33
22204: PUSH
22205: DOUBLE
22206: LD_INT 1
22208: DEC
22209: ST_TO_ADDR
22210: LD_LOC 35
22214: PUSH
22215: LD_INT 0
22217: PLUS
22218: PUSH
22219: FOR_TO
22220: IFFALSE 22265
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22222: LD_LOC 35
22226: PUSH
22227: LD_LOC 33
22231: ARRAY
22232: PPUSH
22233: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22237: LD_LOC 35
22241: PUSH
22242: LD_LOC 33
22246: ARRAY
22247: PPUSH
22248: LD_LOC 34
22252: PUSH
22253: LD_LOC 33
22257: ARRAY
22258: PPUSH
22259: CALL_OW 190
// end ;
22263: GO 22219
22265: POP
22266: POP
// end ; enable ;
22267: ENABLE
// end ;
22268: END
// every 0 0$1 trigger FilterUnitsInArea ( Create2 , [ [ f_side , You ] ] ) > 0 do
22269: LD_INT 22
22271: PPUSH
22272: LD_INT 22
22274: PUSH
22275: LD_EXP 1
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: PPUSH
22287: CALL_OW 70
22291: PUSH
22292: LD_INT 0
22294: GREATER
22295: IFFALSE 22892
22297: GO 22299
22299: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 1 ] , 28 , 39 , false ) ;
22300: LD_EXP 11
22304: PUSH
22305: LD_INT 1
22307: ARRAY
22308: PPUSH
22309: LD_INT 28
22311: PPUSH
22312: LD_INT 39
22314: PPUSH
22315: LD_INT 0
22317: PPUSH
22318: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 2 ] , 23 , 38 , false ) ;
22322: LD_EXP 11
22326: PUSH
22327: LD_INT 2
22329: ARRAY
22330: PPUSH
22331: LD_INT 23
22333: PPUSH
22334: LD_INT 38
22336: PPUSH
22337: LD_INT 0
22339: PPUSH
22340: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 3 ] , 32 , 20 , false ) ;
22344: LD_EXP 11
22348: PUSH
22349: LD_INT 3
22351: ARRAY
22352: PPUSH
22353: LD_INT 32
22355: PPUSH
22356: LD_INT 20
22358: PPUSH
22359: LD_INT 0
22361: PPUSH
22362: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 4 ] , 32 , 17 , false ) ;
22366: LD_EXP 11
22370: PUSH
22371: LD_INT 4
22373: ARRAY
22374: PPUSH
22375: LD_INT 32
22377: PPUSH
22378: LD_INT 17
22380: PPUSH
22381: LD_INT 0
22383: PPUSH
22384: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 5 ] , 38 , 8 , false ) ;
22388: LD_EXP 11
22392: PUSH
22393: LD_INT 5
22395: ARRAY
22396: PPUSH
22397: LD_INT 38
22399: PPUSH
22400: LD_INT 8
22402: PPUSH
22403: LD_INT 0
22405: PPUSH
22406: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 6 ] , 40 , 7 , false ) ;
22410: LD_EXP 11
22414: PUSH
22415: LD_INT 6
22417: ARRAY
22418: PPUSH
22419: LD_INT 40
22421: PPUSH
22422: LD_INT 7
22424: PPUSH
22425: LD_INT 0
22427: PPUSH
22428: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 7 ] , 24 , 8 , false ) ;
22432: LD_EXP 11
22436: PUSH
22437: LD_INT 7
22439: ARRAY
22440: PPUSH
22441: LD_INT 24
22443: PPUSH
22444: LD_INT 8
22446: PPUSH
22447: LD_INT 0
22449: PPUSH
22450: CALL_OW 48
// if difficulty > 1 then
22454: LD_OWVAR 67
22458: PUSH
22459: LD_INT 1
22461: GREATER
22462: IFFALSE 22488
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 8 ] , 26 , 10 , false ) else
22464: LD_EXP 11
22468: PUSH
22469: LD_INT 8
22471: ARRAY
22472: PPUSH
22473: LD_INT 26
22475: PPUSH
22476: LD_INT 10
22478: PPUSH
22479: LD_INT 0
22481: PPUSH
22482: CALL_OW 48
22486: GO 22501
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] ) ;
22488: LD_EXP 11
22492: PUSH
22493: LD_INT 8
22495: ARRAY
22496: PPUSH
22497: CALL_OW 65
// if difficulty > 2 then
22501: LD_OWVAR 67
22505: PUSH
22506: LD_INT 2
22508: GREATER
22509: IFFALSE 22535
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 9 ] , 25 , 11 , false ) else
22511: LD_EXP 11
22515: PUSH
22516: LD_INT 9
22518: ARRAY
22519: PPUSH
22520: LD_INT 25
22522: PPUSH
22523: LD_INT 11
22525: PPUSH
22526: LD_INT 0
22528: PPUSH
22529: CALL_OW 48
22533: GO 22548
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] ) ;
22535: LD_EXP 11
22539: PUSH
22540: LD_INT 9
22542: ARRAY
22543: PPUSH
22544: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 10 ] , 24 , 10 , false ) ;
22548: LD_EXP 11
22552: PUSH
22553: LD_INT 10
22555: ARRAY
22556: PPUSH
22557: LD_INT 24
22559: PPUSH
22560: LD_INT 10
22562: PPUSH
22563: LD_INT 0
22565: PPUSH
22566: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 11 ] , 31 , 9 , false ) ;
22570: LD_EXP 11
22574: PUSH
22575: LD_INT 11
22577: ARRAY
22578: PPUSH
22579: LD_INT 31
22581: PPUSH
22582: LD_INT 9
22584: PPUSH
22585: LD_INT 0
22587: PPUSH
22588: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 12 ] , 33 , 9 , false ) ;
22592: LD_EXP 11
22596: PUSH
22597: LD_INT 12
22599: ARRAY
22600: PPUSH
22601: LD_INT 33
22603: PPUSH
22604: LD_INT 9
22606: PPUSH
22607: LD_INT 0
22609: PPUSH
22610: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 13 ] , 38 , 40 , false ) ;
22614: LD_EXP 11
22618: PUSH
22619: LD_INT 13
22621: ARRAY
22622: PPUSH
22623: LD_INT 38
22625: PPUSH
22626: LD_INT 40
22628: PPUSH
22629: LD_INT 0
22631: PPUSH
22632: CALL_OW 48
// if difficulty > 1 then
22636: LD_OWVAR 67
22640: PUSH
22641: LD_INT 1
22643: GREATER
22644: IFFALSE 22670
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 14 ] , 36 , 39 , false ) else
22646: LD_EXP 11
22650: PUSH
22651: LD_INT 14
22653: ARRAY
22654: PPUSH
22655: LD_INT 36
22657: PPUSH
22658: LD_INT 39
22660: PPUSH
22661: LD_INT 0
22663: PPUSH
22664: CALL_OW 48
22668: GO 22683
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 14 ] ) ;
22670: LD_EXP 11
22674: PUSH
22675: LD_INT 14
22677: ARRAY
22678: PPUSH
22679: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 15 ] , 21 , 12 , false ) ;
22683: LD_EXP 11
22687: PUSH
22688: LD_INT 15
22690: ARRAY
22691: PPUSH
22692: LD_INT 21
22694: PPUSH
22695: LD_INT 12
22697: PPUSH
22698: LD_INT 0
22700: PPUSH
22701: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 16 ] , 21 , 13 , false ) ;
22705: LD_EXP 11
22709: PUSH
22710: LD_INT 16
22712: ARRAY
22713: PPUSH
22714: LD_INT 21
22716: PPUSH
22717: LD_INT 13
22719: PPUSH
22720: LD_INT 0
22722: PPUSH
22723: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 17 ] , 23 , 19 , false ) ;
22727: LD_EXP 11
22731: PUSH
22732: LD_INT 17
22734: ARRAY
22735: PPUSH
22736: LD_INT 23
22738: PPUSH
22739: LD_INT 19
22741: PPUSH
22742: LD_INT 0
22744: PPUSH
22745: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 18 ] , 23 , 20 , false ) ;
22749: LD_EXP 11
22753: PUSH
22754: LD_INT 18
22756: ARRAY
22757: PPUSH
22758: LD_INT 23
22760: PPUSH
22761: LD_INT 20
22763: PPUSH
22764: LD_INT 0
22766: PPUSH
22767: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 19 ] , 21 , 19 , false ) ;
22771: LD_EXP 11
22775: PUSH
22776: LD_INT 19
22778: ARRAY
22779: PPUSH
22780: LD_INT 21
22782: PPUSH
22783: LD_INT 19
22785: PPUSH
22786: LD_INT 0
22788: PPUSH
22789: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 20 ] , 24 , 20 , false ) ;
22793: LD_EXP 11
22797: PUSH
22798: LD_INT 20
22800: ARRAY
22801: PPUSH
22802: LD_INT 24
22804: PPUSH
22805: LD_INT 20
22807: PPUSH
22808: LD_INT 0
22810: PPUSH
22811: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 22 ] , 21 , 34 , false ) ;
22815: LD_EXP 11
22819: PUSH
22820: LD_INT 22
22822: ARRAY
22823: PPUSH
22824: LD_INT 21
22826: PPUSH
22827: LD_INT 34
22829: PPUSH
22830: LD_INT 0
22832: PPUSH
22833: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 21 ] , 27 , 17 , false ) ;
22837: LD_EXP 11
22841: PUSH
22842: LD_INT 21
22844: ARRAY
22845: PPUSH
22846: LD_INT 27
22848: PPUSH
22849: LD_INT 17
22851: PPUSH
22852: LD_INT 0
22854: PPUSH
22855: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 23 ] , 28 , 21 , false ) ;
22859: LD_EXP 11
22863: PUSH
22864: LD_INT 23
22866: ARRAY
22867: PPUSH
22868: LD_INT 28
22870: PPUSH
22871: LD_INT 21
22873: PPUSH
22874: LD_INT 0
22876: PPUSH
22877: CALL_OW 48
// wait ( 0 0$1 ) ;
22881: LD_INT 35
22883: PPUSH
22884: CALL_OW 67
// uklid_arabu2 ;
22888: CALL 17847 0 0
// end ;
22892: END
// every 0 0$1 trigger FilterUnitsInArea ( Create3 , [ [ f_side , You ] ] ) > 0 do
22893: LD_INT 23
22895: PPUSH
22896: LD_INT 22
22898: PUSH
22899: LD_EXP 1
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: EMPTY
22909: LIST
22910: PPUSH
22911: CALL_OW 70
22915: PUSH
22916: LD_INT 0
22918: GREATER
22919: IFFALSE 23309
22921: GO 22923
22923: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 1 ] , 103 , 11 , false ) ;
22924: LD_EXP 12
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PPUSH
22933: LD_INT 103
22935: PPUSH
22936: LD_INT 11
22938: PPUSH
22939: LD_INT 0
22941: PPUSH
22942: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 2 ] , 108 , 18 , false ) ;
22946: LD_EXP 12
22950: PUSH
22951: LD_INT 2
22953: ARRAY
22954: PPUSH
22955: LD_INT 108
22957: PPUSH
22958: LD_INT 18
22960: PPUSH
22961: LD_INT 0
22963: PPUSH
22964: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 3 ] , 107 , 21 , false ) ;
22968: LD_EXP 12
22972: PUSH
22973: LD_INT 3
22975: ARRAY
22976: PPUSH
22977: LD_INT 107
22979: PPUSH
22980: LD_INT 21
22982: PPUSH
22983: LD_INT 0
22985: PPUSH
22986: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 4 ] , 118 , 11 , false ) ;
22990: LD_EXP 12
22994: PUSH
22995: LD_INT 4
22997: ARRAY
22998: PPUSH
22999: LD_INT 118
23001: PPUSH
23002: LD_INT 11
23004: PPUSH
23005: LD_INT 0
23007: PPUSH
23008: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 5 ] , 118 , 12 , false ) ;
23012: LD_EXP 12
23016: PUSH
23017: LD_INT 5
23019: ARRAY
23020: PPUSH
23021: LD_INT 118
23023: PPUSH
23024: LD_INT 12
23026: PPUSH
23027: LD_INT 0
23029: PPUSH
23030: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 6 ] , 119 , 13 , false ) ;
23034: LD_EXP 12
23038: PUSH
23039: LD_INT 6
23041: ARRAY
23042: PPUSH
23043: LD_INT 119
23045: PPUSH
23046: LD_INT 13
23048: PPUSH
23049: LD_INT 0
23051: PPUSH
23052: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 7 ] , 115 , 9 , false ) ;
23056: LD_EXP 12
23060: PUSH
23061: LD_INT 7
23063: ARRAY
23064: PPUSH
23065: LD_INT 115
23067: PPUSH
23068: LD_INT 9
23070: PPUSH
23071: LD_INT 0
23073: PPUSH
23074: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 8 ] , 119 , 18 , false ) ;
23078: LD_EXP 12
23082: PUSH
23083: LD_INT 8
23085: ARRAY
23086: PPUSH
23087: LD_INT 119
23089: PPUSH
23090: LD_INT 18
23092: PPUSH
23093: LD_INT 0
23095: PPUSH
23096: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 9 ] , 118 , 18 , false ) ;
23100: LD_EXP 12
23104: PUSH
23105: LD_INT 9
23107: ARRAY
23108: PPUSH
23109: LD_INT 118
23111: PPUSH
23112: LD_INT 18
23114: PPUSH
23115: LD_INT 0
23117: PPUSH
23118: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 10 ] , 118 , 17 , false ) ;
23122: LD_EXP 12
23126: PUSH
23127: LD_INT 10
23129: ARRAY
23130: PPUSH
23131: LD_INT 118
23133: PPUSH
23134: LD_INT 17
23136: PPUSH
23137: LD_INT 0
23139: PPUSH
23140: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 11 ] , 118 , 16 , false ) ;
23144: LD_EXP 12
23148: PUSH
23149: LD_INT 11
23151: ARRAY
23152: PPUSH
23153: LD_INT 118
23155: PPUSH
23156: LD_INT 16
23158: PPUSH
23159: LD_INT 0
23161: PPUSH
23162: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 12 ] , 111 , 13 , false ) ;
23166: LD_EXP 12
23170: PUSH
23171: LD_INT 12
23173: ARRAY
23174: PPUSH
23175: LD_INT 111
23177: PPUSH
23178: LD_INT 13
23180: PPUSH
23181: LD_INT 0
23183: PPUSH
23184: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 13 ] , 112 , 12 , false ) ;
23188: LD_EXP 12
23192: PUSH
23193: LD_INT 13
23195: ARRAY
23196: PPUSH
23197: LD_INT 112
23199: PPUSH
23200: LD_INT 12
23202: PPUSH
23203: LD_INT 0
23205: PPUSH
23206: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 14 ] , 113 , 25 , false ) ;
23210: LD_EXP 12
23214: PUSH
23215: LD_INT 14
23217: ARRAY
23218: PPUSH
23219: LD_INT 113
23221: PPUSH
23222: LD_INT 25
23224: PPUSH
23225: LD_INT 0
23227: PPUSH
23228: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 15 ] , 113 , 27 , false ) ;
23232: LD_EXP 12
23236: PUSH
23237: LD_INT 15
23239: ARRAY
23240: PPUSH
23241: LD_INT 113
23243: PPUSH
23244: LD_INT 27
23246: PPUSH
23247: LD_INT 0
23249: PPUSH
23250: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 16 ] , 114 , 9 , false ) ;
23254: LD_EXP 12
23258: PUSH
23259: LD_INT 16
23261: ARRAY
23262: PPUSH
23263: LD_INT 114
23265: PPUSH
23266: LD_INT 9
23268: PPUSH
23269: LD_INT 0
23271: PPUSH
23272: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 17 ] , 114 , 10 , false ) ;
23276: LD_EXP 12
23280: PUSH
23281: LD_INT 17
23283: ARRAY
23284: PPUSH
23285: LD_INT 114
23287: PPUSH
23288: LD_INT 10
23290: PPUSH
23291: LD_INT 0
23293: PPUSH
23294: CALL_OW 48
// wait ( 0 0$1 ) ;
23298: LD_INT 35
23300: PPUSH
23301: CALL_OW 67
// uklid_arabu3 ;
23305: CALL 19027 0 0
// end ;
23309: END
// export function uprav_zivoty_arabskych_budov ; begin
23310: LD_INT 0
23312: PPUSH
// SetLives ( A1_bu3 , zivoty_prvni_baze [ difficulty ] ) ;
23313: LD_INT 11
23315: PPUSH
23316: LD_EXP 53
23320: PUSH
23321: LD_OWVAR 67
23325: ARRAY
23326: PPUSH
23327: CALL_OW 234
// SetLives ( A1_bu1 , zivoty_prvni_baze [ difficulty ] ) ;
23331: LD_INT 9
23333: PPUSH
23334: LD_EXP 53
23338: PUSH
23339: LD_OWVAR 67
23343: ARRAY
23344: PPUSH
23345: CALL_OW 234
// SetLives ( A1_au2 , zivoty_prvni_baze [ difficulty ] ) ;
23349: LD_INT 109
23351: PPUSH
23352: LD_EXP 53
23356: PUSH
23357: LD_OWVAR 67
23361: ARRAY
23362: PPUSH
23363: CALL_OW 234
// SetLives ( A1_vo1 , zivoty_prvni_baze [ difficulty ] ) ;
23367: LD_INT 72
23369: PPUSH
23370: LD_EXP 53
23374: PUSH
23375: LD_OWVAR 67
23379: ARRAY
23380: PPUSH
23381: CALL_OW 234
// end ;
23385: LD_VAR 0 1
23389: RET
// every 0 0$1 trigger FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) do var pom ;
23390: LD_INT 26
23392: PPUSH
23393: LD_INT 22
23395: PUSH
23396: LD_EXP 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: PPUSH
23408: CALL_OW 70
23412: IFFALSE 23481
23414: GO 23416
23416: DISABLE
23417: LD_INT 0
23419: PPUSH
// begin pom = FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) ;
23420: LD_ADDR_VAR 0 1
23424: PUSH
23425: LD_INT 26
23427: PPUSH
23428: LD_INT 22
23430: PUSH
23431: LD_EXP 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: PPUSH
23443: CALL_OW 70
23447: ST_TO_ADDR
// if pom > 0 then
23448: LD_VAR 0 1
23452: PUSH
23453: LD_INT 0
23455: GREATER
23456: IFFALSE 23481
// AddComAttackUnit ( [ bumm1 , bumm2 ] , pom [ 1 ] ) ;
23458: LD_INT 114
23460: PUSH
23461: LD_INT 115
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PPUSH
23468: LD_VAR 0 1
23472: PUSH
23473: LD_INT 1
23475: ARRAY
23476: PPUSH
23477: CALL_OW 175
// end ;
23481: PPOPN 1
23483: END
// every 0 0$1 trigger GetLives ( A2_bu1 ) < 700 do var pom , i ; var atakers ;
23484: LD_INT 112
23486: PPUSH
23487: CALL_OW 256
23491: PUSH
23492: LD_INT 700
23494: LESS
23495: IFFALSE 23743
23497: GO 23499
23499: DISABLE
23500: LD_INT 0
23502: PPUSH
23503: PPUSH
23504: PPUSH
// begin if not ( IsOK ( sui1 ) or IsOK ( sui3 ) ) then
23505: LD_INT 118
23507: PPUSH
23508: CALL_OW 302
23512: PUSH
23513: LD_INT 121
23515: PPUSH
23516: CALL_OW 302
23520: OR
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 23743
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23526: LD_ADDR_VAR 0 1
23530: PUSH
23531: LD_INT 22
23533: PUSH
23534: LD_EXP 1
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 2
23545: PUSH
23546: LD_INT 21
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 21
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PPUSH
23575: CALL_OW 69
23579: ST_TO_ADDR
// for i in pom do
23580: LD_ADDR_VAR 0 2
23584: PUSH
23585: LD_VAR 0 1
23589: PUSH
23590: FOR_IN
23591: IFFALSE 23626
// if Attacks ( i ) = A2_bu1 then
23593: LD_VAR 0 2
23597: PPUSH
23598: CALL_OW 320
23602: PUSH
23603: LD_INT 112
23605: EQUAL
23606: IFFALSE 23624
// atakers = atakers ^ i ;
23608: LD_ADDR_VAR 0 3
23612: PUSH
23613: LD_VAR 0 3
23617: PUSH
23618: LD_VAR 0 2
23622: ADD
23623: ST_TO_ADDR
23624: GO 23590
23626: POP
23627: POP
// if atakers > 0 then
23628: LD_VAR 0 3
23632: PUSH
23633: LD_INT 0
23635: GREATER
23636: IFFALSE 23663
// AddComAttackUnit ( [ sui1 , sui3 ] , atakers [ 1 ] ) else
23638: LD_INT 118
23640: PUSH
23641: LD_INT 121
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PPUSH
23648: LD_VAR 0 3
23652: PUSH
23653: LD_INT 1
23655: ARRAY
23656: PPUSH
23657: CALL_OW 175
23661: GO 23724
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23663: LD_ADDR_VAR 0 1
23667: PUSH
23668: LD_INT 37
23670: PPUSH
23671: LD_INT 22
23673: PUSH
23674: LD_EXP 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: PPUSH
23686: CALL_OW 70
23690: ST_TO_ADDR
// if pom > 0 then
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 0
23698: GREATER
23699: IFFALSE 23724
// AddComAttackUnit ( [ sui1 , sui3 ] , pom [ 1 ] ) ;
23701: LD_INT 118
23703: PUSH
23704: LD_INT 121
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PPUSH
23711: LD_VAR 0 1
23715: PUSH
23716: LD_INT 1
23718: ARRAY
23719: PPUSH
23720: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23724: LD_INT 118
23726: PPUSH
23727: CALL_OW 302
23731: PUSH
23732: LD_INT 121
23734: PPUSH
23735: CALL_OW 302
23739: OR
23740: IFFALSE 23743
// enable ;
23742: ENABLE
// end ;
23743: PPOPN 3
23745: END
// every 0 0$2 trigger GetLives ( A2_bu3 ) < 700 do var pom , i ; var atakers ;
23746: LD_INT 47
23748: PPUSH
23749: CALL_OW 256
23753: PUSH
23754: LD_INT 700
23756: LESS
23757: IFFALSE 24005
23759: GO 23761
23761: DISABLE
23762: LD_INT 0
23764: PPUSH
23765: PPUSH
23766: PPUSH
// begin if not ( IsOK ( sui2 ) or IsOK ( sui4 ) ) then
23767: LD_INT 119
23769: PPUSH
23770: CALL_OW 302
23774: PUSH
23775: LD_INT 120
23777: PPUSH
23778: CALL_OW 302
23782: OR
23783: NOT
23784: IFFALSE 23788
// exit ;
23786: GO 24005
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23788: LD_ADDR_VAR 0 1
23792: PUSH
23793: LD_INT 22
23795: PUSH
23796: LD_EXP 1
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 2
23807: PUSH
23808: LD_INT 21
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 21
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PPUSH
23837: CALL_OW 69
23841: ST_TO_ADDR
// for i in pom do
23842: LD_ADDR_VAR 0 2
23846: PUSH
23847: LD_VAR 0 1
23851: PUSH
23852: FOR_IN
23853: IFFALSE 23888
// if Attacks ( i ) = A2_bu3 then
23855: LD_VAR 0 2
23859: PPUSH
23860: CALL_OW 320
23864: PUSH
23865: LD_INT 47
23867: EQUAL
23868: IFFALSE 23886
// atakers = atakers ^ i ;
23870: LD_ADDR_VAR 0 3
23874: PUSH
23875: LD_VAR 0 3
23879: PUSH
23880: LD_VAR 0 2
23884: ADD
23885: ST_TO_ADDR
23886: GO 23852
23888: POP
23889: POP
// if atakers > 0 then
23890: LD_VAR 0 3
23894: PUSH
23895: LD_INT 0
23897: GREATER
23898: IFFALSE 23925
// AddComAttackUnit ( [ sui2 , sui4 ] , atakers [ 1 ] ) else
23900: LD_INT 119
23902: PUSH
23903: LD_INT 120
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PPUSH
23910: LD_VAR 0 3
23914: PUSH
23915: LD_INT 1
23917: ARRAY
23918: PPUSH
23919: CALL_OW 175
23923: GO 23986
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23925: LD_ADDR_VAR 0 1
23929: PUSH
23930: LD_INT 37
23932: PPUSH
23933: LD_INT 22
23935: PUSH
23936: LD_EXP 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: PPUSH
23948: CALL_OW 70
23952: ST_TO_ADDR
// if pom > 1 then
23953: LD_VAR 0 1
23957: PUSH
23958: LD_INT 1
23960: GREATER
23961: IFFALSE 23986
// AddComAttackUnit ( [ sui2 , sui4 ] , pom1 [ 2 ] ) ;
23963: LD_INT 119
23965: PUSH
23966: LD_INT 120
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PPUSH
23973: LD_LOC 35
23977: PUSH
23978: LD_INT 2
23980: ARRAY
23981: PPUSH
23982: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23986: LD_INT 118
23988: PPUSH
23989: CALL_OW 302
23993: PUSH
23994: LD_INT 121
23996: PPUSH
23997: CALL_OW 302
24001: OR
24002: IFFALSE 24005
// enable ;
24004: ENABLE
// end ;
24005: PPOPN 3
24007: END
// on McDefendReturnsUnit ( mcid , un ) do var a ;
24008: LD_INT 0
24010: PPUSH
// begin a = JEDNOTKY_BAZE_2_LIST ;
24011: LD_ADDR_VAR 0 3
24015: PUSH
24016: LD_EXP 11
24020: ST_TO_ADDR
// case un of a [ 1 ] :
24021: LD_VAR 0 2
24025: PUSH
24026: LD_VAR 0 3
24030: PUSH
24031: LD_INT 1
24033: ARRAY
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24055
24040: POP
// posli_unit ( un , 5 ) ; a [ 2 ] :
24041: LD_VAR 0 2
24045: PPUSH
24046: LD_INT 5
24048: PPUSH
24049: CALL 24557 0 2
24053: GO 24554
24055: LD_VAR 0 3
24059: PUSH
24060: LD_INT 2
24062: ARRAY
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24084
24069: POP
// posli_unit ( un , 6 ) ; a [ 3 ] :
24070: LD_VAR 0 2
24074: PPUSH
24075: LD_INT 6
24077: PPUSH
24078: CALL 24557 0 2
24082: GO 24554
24084: LD_VAR 0 3
24088: PUSH
24089: LD_INT 3
24091: ARRAY
24092: DOUBLE
24093: EQUAL
24094: IFTRUE 24098
24096: GO 24113
24098: POP
// posli_unit ( un , 7 ) ; a [ 3 ] :
24099: LD_VAR 0 2
24103: PPUSH
24104: LD_INT 7
24106: PPUSH
24107: CALL 24557 0 2
24111: GO 24554
24113: LD_VAR 0 3
24117: PUSH
24118: LD_INT 3
24120: ARRAY
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24142
24127: POP
// posli_unit ( un , 8 ) ; a [ 3 ] :
24128: LD_VAR 0 2
24132: PPUSH
24133: LD_INT 8
24135: PPUSH
24136: CALL 24557 0 2
24140: GO 24554
24142: LD_VAR 0 3
24146: PUSH
24147: LD_INT 3
24149: ARRAY
24150: DOUBLE
24151: EQUAL
24152: IFTRUE 24156
24154: GO 24171
24156: POP
// posli_unit ( un , 9 ) ; a [ 3 ] :
24157: LD_VAR 0 2
24161: PPUSH
24162: LD_INT 9
24164: PPUSH
24165: CALL 24557 0 2
24169: GO 24554
24171: LD_VAR 0 3
24175: PUSH
24176: LD_INT 3
24178: ARRAY
24179: DOUBLE
24180: EQUAL
24181: IFTRUE 24185
24183: GO 24200
24185: POP
// posli_unit ( un , 10 ) ; a [ 17 ] :
24186: LD_VAR 0 2
24190: PPUSH
24191: LD_INT 10
24193: PPUSH
24194: CALL 24557 0 2
24198: GO 24554
24200: LD_VAR 0 3
24204: PUSH
24205: LD_INT 17
24207: ARRAY
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24229
24214: POP
// posli_unit ( un , 11 ) ; a [ 18 ] :
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_INT 11
24222: PPUSH
24223: CALL 24557 0 2
24227: GO 24554
24229: LD_VAR 0 3
24233: PUSH
24234: LD_INT 18
24236: ARRAY
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24243
24241: GO 24258
24243: POP
// posli_unit ( un , 12 ) ; a [ 16 ] :
24244: LD_VAR 0 2
24248: PPUSH
24249: LD_INT 12
24251: PPUSH
24252: CALL 24557 0 2
24256: GO 24554
24258: LD_VAR 0 3
24262: PUSH
24263: LD_INT 16
24265: ARRAY
24266: DOUBLE
24267: EQUAL
24268: IFTRUE 24272
24270: GO 24287
24272: POP
// posli_unit ( un , 13 ) ; a [ 7 ] :
24273: LD_VAR 0 2
24277: PPUSH
24278: LD_INT 13
24280: PPUSH
24281: CALL 24557 0 2
24285: GO 24554
24287: LD_VAR 0 3
24291: PUSH
24292: LD_INT 7
24294: ARRAY
24295: DOUBLE
24296: EQUAL
24297: IFTRUE 24301
24299: GO 24316
24301: POP
// posli_unit ( un , 14 ) ; a [ 8 ] :
24302: LD_VAR 0 2
24306: PPUSH
24307: LD_INT 14
24309: PPUSH
24310: CALL 24557 0 2
24314: GO 24554
24316: LD_VAR 0 3
24320: PUSH
24321: LD_INT 8
24323: ARRAY
24324: DOUBLE
24325: EQUAL
24326: IFTRUE 24330
24328: GO 24345
24330: POP
// posli_unit ( un , 15 ) ; a [ 9 ] :
24331: LD_VAR 0 2
24335: PPUSH
24336: LD_INT 15
24338: PPUSH
24339: CALL 24557 0 2
24343: GO 24554
24345: LD_VAR 0 3
24349: PUSH
24350: LD_INT 9
24352: ARRAY
24353: DOUBLE
24354: EQUAL
24355: IFTRUE 24359
24357: GO 24374
24359: POP
// posli_unit ( un , 16 ) ; a [ 10 ] :
24360: LD_VAR 0 2
24364: PPUSH
24365: LD_INT 16
24367: PPUSH
24368: CALL 24557 0 2
24372: GO 24554
24374: LD_VAR 0 3
24378: PUSH
24379: LD_INT 10
24381: ARRAY
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24403
24388: POP
// posli_unit ( un , 17 ) ; a [ 21 ] :
24389: LD_VAR 0 2
24393: PPUSH
24394: LD_INT 17
24396: PPUSH
24397: CALL 24557 0 2
24401: GO 24554
24403: LD_VAR 0 3
24407: PUSH
24408: LD_INT 21
24410: ARRAY
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24417
24415: GO 24432
24417: POP
// posli_unit ( un , 18 ) ; a [ 22 ] :
24418: LD_VAR 0 2
24422: PPUSH
24423: LD_INT 18
24425: PPUSH
24426: CALL 24557 0 2
24430: GO 24554
24432: LD_VAR 0 3
24436: PUSH
24437: LD_INT 22
24439: ARRAY
24440: DOUBLE
24441: EQUAL
24442: IFTRUE 24446
24444: GO 24461
24446: POP
// posli_unit ( un , 19 ) ; A2_nau2 :
24447: LD_VAR 0 2
24451: PPUSH
24452: LD_INT 19
24454: PPUSH
24455: CALL 24557 0 2
24459: GO 24554
24461: LD_INT 108
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24469
24467: GO 24484
24469: POP
// posli_unit2 ( un , 3 ) ; A2_nau1 :
24470: LD_VAR 0 2
24474: PPUSH
24475: LD_INT 3
24477: PPUSH
24478: CALL 24664 0 2
24482: GO 24554
24484: LD_INT 107
24486: DOUBLE
24487: EQUAL
24488: IFTRUE 24492
24490: GO 24507
24492: POP
// posli_unit2 ( un , 4 ) ; MDopka1 :
24493: LD_VAR 0 2
24497: PPUSH
24498: LD_INT 4
24500: PPUSH
24501: CALL 24664 0 2
24505: GO 24554
24507: LD_INT 117
24509: DOUBLE
24510: EQUAL
24511: IFTRUE 24515
24513: GO 24530
24515: POP
// posli_unit2 ( un , 1 ) ; MDopka2 :
24516: LD_VAR 0 2
24520: PPUSH
24521: LD_INT 1
24523: PPUSH
24524: CALL 24664 0 2
24528: GO 24554
24530: LD_INT 116
24532: DOUBLE
24533: EQUAL
24534: IFTRUE 24538
24536: GO 24553
24538: POP
// posli_unit2 ( un , 2 ) ; end ;
24539: LD_VAR 0 2
24543: PPUSH
24544: LD_INT 2
24546: PPUSH
24547: CALL 24664 0 2
24551: GO 24554
24553: POP
// end ;
24554: PPOPN 3
24556: END
// function posli_unit ( un , cz ) ; var a ; begin
24557: LD_INT 0
24559: PPUSH
24560: PPUSH
// a = uklizejici_mista [ cz ] ;
24561: LD_ADDR_VAR 0 4
24565: PUSH
24566: LD_LOC 36
24570: PUSH
24571: LD_VAR 0 2
24575: ARRAY
24576: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24577: LD_ADDR_OWVAR 48
24581: PUSH
24582: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24584: PUSH
24585: LD_VAR 0 4
24589: PUSH
24590: LD_VAR 0 1
24594: PUSH
24595: LD_VAR 0 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
// wait ( 3 ) ;
24606: LD_INT 3
24608: PPUSH
24609: CALL_OW 67
// ComEnterUnit ( un , a [ 1 ] ) ;
24613: LD_VAR 0 1
24617: PPUSH
24618: LD_VAR 0 4
24622: PUSH
24623: LD_INT 1
24625: ARRAY
24626: PPUSH
24627: CALL_OW 120
// if a [ 2 ] then
24631: LD_VAR 0 4
24635: PUSH
24636: LD_INT 2
24638: ARRAY
24639: IFFALSE 24659
// AddComChangeProfession ( un , a [ 3 ] ) ;
24641: LD_VAR 0 1
24645: PPUSH
24646: LD_VAR 0 4
24650: PUSH
24651: LD_INT 3
24653: ARRAY
24654: PPUSH
24655: CALL_OW 183
// end ;
24659: LD_VAR 0 3
24663: RET
// function posli_unit2 ( un , cz ) ; var a ; begin
24664: LD_INT 0
24666: PPUSH
24667: PPUSH
// a = uklizejici_mista [ cz ] ;
24668: LD_ADDR_VAR 0 4
24672: PUSH
24673: LD_LOC 36
24677: PUSH
24678: LD_VAR 0 2
24682: ARRAY
24683: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24684: LD_ADDR_OWVAR 48
24688: PUSH
24689: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24691: PUSH
24692: LD_VAR 0 4
24696: PUSH
24697: LD_VAR 0 1
24701: PUSH
24702: LD_VAR 0 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: ST_TO_ADDR
// ComMoveXY ( un , a [ 1 ] , a [ 2 ] ) ;
24713: LD_VAR 0 1
24717: PPUSH
24718: LD_VAR 0 4
24722: PUSH
24723: LD_INT 1
24725: ARRAY
24726: PPUSH
24727: LD_VAR 0 4
24731: PUSH
24732: LD_INT 2
24734: ARRAY
24735: PPUSH
24736: CALL_OW 111
// end ;
24740: LD_VAR 0 3
24744: RET
// on McDone ( makro , stat ) do begin case makro of 1 :
24745: LD_VAR 0 1
24749: PUSH
24750: LD_INT 1
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24758
24756: GO 24768
24758: POP
// zabijeni_1_baze ( 1 ) ; 2 :
24759: LD_INT 1
24761: PPUSH
24762: CALL 24791 0 1
24766: GO 24787
24768: LD_INT 2
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24786
24776: POP
// zabijeni_1_baze ( 2 ) ; end ;
24777: LD_INT 2
24779: PPUSH
24780: CALL 24791 0 1
24784: GO 24787
24786: POP
// enable ;
24787: ENABLE
// end ;
24788: PPOPN 2
24790: END
// function zabijeni_1_baze ( jj ) ; var pom , i ; var jedn ; begin
24791: LD_INT 0
24793: PPUSH
24794: PPUSH
24795: PPUSH
24796: PPUSH
// case jj of 1 :
24797: LD_VAR 0 1
24801: PUSH
24802: LD_INT 1
24804: DOUBLE
24805: EQUAL
24806: IFTRUE 24810
24808: GO 24823
24810: POP
// jedn = Ar_utok3_LIST ; 2 :
24811: LD_ADDR_VAR 0 5
24815: PUSH
24816: LD_EXP 15
24820: ST_TO_ADDR
24821: GO 24845
24823: LD_INT 2
24825: DOUBLE
24826: EQUAL
24827: IFTRUE 24831
24829: GO 24844
24831: POP
// jedn = Ar_utok2_LIST ; end ;
24832: LD_ADDR_VAR 0 5
24836: PUSH
24837: LD_EXP 14
24841: ST_TO_ADDR
24842: GO 24845
24844: POP
// for i in jedn do
24845: LD_ADDR_VAR 0 4
24849: PUSH
24850: LD_VAR 0 5
24854: PUSH
24855: FOR_IN
24856: IFFALSE 24896
// if GetClass ( i ) = class_engineer then
24858: LD_VAR 0 4
24862: PPUSH
24863: CALL_OW 257
24867: PUSH
24868: LD_INT 2
24870: EQUAL
24871: IFFALSE 24894
// if IsOK ( A1_dep ) then
24873: LD_INT 4
24875: PPUSH
24876: CALL_OW 302
24880: IFFALSE 24894
// ComEnterUnit ( i , A1_dep ) ;
24882: LD_VAR 0 4
24886: PPUSH
24887: LD_INT 4
24889: PPUSH
24890: CALL_OW 120
24894: GO 24855
24896: POP
24897: POP
// pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
24898: LD_ADDR_VAR 0 3
24902: PUSH
24903: LD_INT 3
24905: PPUSH
24906: LD_INT 22
24908: PUSH
24909: LD_EXP 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: EMPTY
24919: LIST
24920: PPUSH
24921: CALL_OW 70
24925: ST_TO_ADDR
// for i in pom do
24926: LD_ADDR_VAR 0 4
24930: PUSH
24931: LD_VAR 0 3
24935: PUSH
24936: FOR_IN
24937: IFFALSE 24955
// PriorityAttack ( Arabi , i ) ;
24939: LD_EXP 3
24943: PPUSH
24944: LD_VAR 0 4
24948: PPUSH
24949: CALL_OW 470
24953: GO 24936
24955: POP
24956: POP
// enable ( 995 ) ;
24957: LD_INT 995
24959: ENABLE_MARKED
// end ;
24960: LD_VAR 0 2
24964: RET
// every 0 0$1 marked 995 do var pom , pom1 ; var i ; var pomat ;
24965: GO 24967
24967: DISABLE
24968: LD_INT 0
24970: PPUSH
24971: PPUSH
24972: PPUSH
24973: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_ready ] ] ] ] ) ;
24974: LD_ADDR_VAR 0 1
24978: PUSH
24979: LD_INT 3
24981: PPUSH
24982: LD_INT 22
24984: PUSH
24985: LD_EXP 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: PUSH
24997: LD_INT 21
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 21
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 53
25019: PUSH
25020: EMPTY
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: LIST
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PPUSH
25036: CALL_OW 70
25040: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
25041: LD_ADDR_VAR 0 2
25045: PUSH
25046: LD_INT 3
25048: PPUSH
25049: LD_INT 22
25051: PUSH
25052: LD_EXP 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: EMPTY
25062: LIST
25063: PPUSH
25064: CALL_OW 70
25068: ST_TO_ADDR
// pomat = pom1 diff pom ;
25069: LD_ADDR_VAR 0 4
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: LD_VAR 0 1
25083: DIFF
25084: ST_TO_ADDR
// if pomat = 0 then
25085: LD_VAR 0 4
25089: PUSH
25090: LD_INT 0
25092: EQUAL
25093: IFFALSE 25128
// for i in pom1 do
25095: LD_ADDR_VAR 0 3
25099: PUSH
25100: LD_VAR 0 2
25104: PUSH
25105: FOR_IN
25106: IFFALSE 25124
// PriorityAttack ( Arabi , i ) else
25108: LD_EXP 3
25112: PPUSH
25113: LD_VAR 0 3
25117: PPUSH
25118: CALL_OW 470
25122: GO 25105
25124: POP
25125: POP
25126: GO 25190
// begin for i in pom do
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: LD_VAR 0 1
25137: PUSH
25138: FOR_IN
25139: IFFALSE 25157
// PriorityAttack ( Arabi , i ) ;
25141: LD_EXP 3
25145: PPUSH
25146: LD_VAR 0 3
25150: PPUSH
25151: CALL_OW 470
25155: GO 25138
25157: POP
25158: POP
// for i in pomat do
25159: LD_ADDR_VAR 0 3
25163: PUSH
25164: LD_VAR 0 4
25168: PUSH
25169: FOR_IN
25170: IFFALSE 25188
// NormalAttack ( Arabi , i ) ;
25172: LD_EXP 3
25176: PPUSH
25177: LD_VAR 0 3
25181: PPUSH
25182: CALL_OW 472
25186: GO 25169
25188: POP
25189: POP
// end ; if pom <> 0 and FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) <> 0 then
25190: LD_VAR 0 1
25194: PUSH
25195: LD_INT 0
25197: NONEQUAL
25198: PUSH
25199: LD_INT 3
25201: PPUSH
25202: LD_INT 22
25204: PUSH
25205: LD_EXP 1
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: EMPTY
25215: LIST
25216: PPUSH
25217: CALL_OW 70
25221: PUSH
25222: LD_INT 0
25224: NONEQUAL
25225: AND
25226: IFFALSE 25229
// enable ;
25228: ENABLE
// end ; end_of_file
25229: PPOPN 4
25231: END
// export protiutok1 ; export Ar_levely ; export timelimit ; export max_bedny ; export lidi_other ; export zivoty_prvni_baze ; export utok_2_doba ; export last_attack_wait ; export medaile1 ; export medaile2 ; export Timecounter ; export function SET_DIFFICULTY ; var pom ; begin
25232: LD_INT 0
25234: PPUSH
25235: PPUSH
// protiutok1 = [ 10 10$0 , 7 7$30 , 5 5$30 ] ;
25236: LD_ADDR_EXP 48
25240: PUSH
25241: LD_INT 21000
25243: PUSH
25244: LD_INT 15750
25246: PUSH
25247: LD_INT 11550
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: ST_TO_ADDR
// utok_2_doba = [ 10 10$0 , 8 8$0 , 6 6$0 ] ;
25255: LD_ADDR_EXP 54
25259: PUSH
25260: LD_INT 21000
25262: PUSH
25263: LD_INT 16800
25265: PUSH
25266: LD_INT 12600
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: ST_TO_ADDR
// Ar_levely = [ 4 , 6 , 8 ] ;
25274: LD_ADDR_EXP 49
25278: PUSH
25279: LD_INT 4
25281: PUSH
25282: LD_INT 6
25284: PUSH
25285: LD_INT 8
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: ST_TO_ADDR
// timelimit = [ 160 160$0 , 150 150$0 , 140 140$0 ] ;
25293: LD_ADDR_EXP 50
25297: PUSH
25298: LD_INT 336000
25300: PUSH
25301: LD_INT 315000
25303: PUSH
25304: LD_INT 294000
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: ST_TO_ADDR
// medaile1 = [ 120 , 100 , 90 ] ;
25312: LD_ADDR_EXP 56
25316: PUSH
25317: LD_INT 120
25319: PUSH
25320: LD_INT 100
25322: PUSH
25323: LD_INT 90
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
// medaile2 = [ 100 , 90 , 80 ] ;
25331: LD_ADDR_EXP 57
25335: PUSH
25336: LD_INT 100
25338: PUSH
25339: LD_INT 90
25341: PUSH
25342: LD_INT 80
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: ST_TO_ADDR
// max_bedny = [ 55 , 40 , 30 ] ;
25350: LD_ADDR_EXP 51
25354: PUSH
25355: LD_INT 55
25357: PUSH
25358: LD_INT 40
25360: PUSH
25361: LD_INT 30
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: LIST
25368: ST_TO_ADDR
// zivoty_prvni_baze = [ 700 , 850 , 1000 ] ;
25369: LD_ADDR_EXP 53
25373: PUSH
25374: LD_INT 700
25376: PUSH
25377: LD_INT 850
25379: PUSH
25380: LD_INT 1000
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: ST_TO_ADDR
// last_attack_wait = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
25388: LD_ADDR_EXP 55
25392: PUSH
25393: LD_INT 21000
25395: PUSH
25396: LD_INT 16800
25398: PUSH
25399: LD_INT 10500
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: ST_TO_ADDR
// Timecounter = 0 ;
25407: LD_ADDR_EXP 58
25411: PUSH
25412: LD_INT 0
25414: ST_TO_ADDR
// end ;
25415: LD_VAR 0 1
25419: RET
// export cas ; every 0 0$10 do var pom ;
25420: GO 25422
25422: DISABLE
25423: LD_INT 0
25425: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
25426: LD_EXP 59
25430: PUSH
25431: LD_INT 3
25433: ARRAY
25434: PUSH
25435: LD_INT 10
25437: PLUS
25438: PUSH
25439: LD_INT 60
25441: EQUAL
25442: IFFALSE 25478
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
25444: LD_ADDR_EXP 59
25448: PUSH
25449: LD_EXP 59
25453: PUSH
25454: LD_INT 1
25456: ARRAY
25457: PUSH
25458: LD_INT 1
25460: PLUS
25461: PUSH
25462: LD_EXP 59
25466: PUSH
25467: LD_INT 2
25469: ARRAY
25470: ADD
25471: PUSH
25472: LD_INT 0
25474: ADD
25475: ST_TO_ADDR
25476: GO 25516
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
25478: LD_ADDR_EXP 59
25482: PUSH
25483: LD_EXP 59
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: PUSH
25492: LD_EXP 59
25496: PUSH
25497: LD_INT 2
25499: ARRAY
25500: ADD
25501: PUSH
25502: LD_EXP 59
25506: PUSH
25507: LD_INT 3
25509: ARRAY
25510: PUSH
25511: LD_INT 10
25513: PLUS
25514: ADD
25515: ST_TO_ADDR
// debug_strings = [ cas ] ;
25516: LD_ADDR_OWVAR 48
25520: PUSH
25521: LD_EXP 59
25525: PUSH
25526: EMPTY
25527: LIST
25528: ST_TO_ADDR
// enable ;
25529: ENABLE
// end ;
25530: PPOPN 1
25532: END
// every 1 1$0 do
25533: GO 25535
25535: DISABLE
// begin Timecounter = Timecounter + 1 ;
25536: LD_ADDR_EXP 58
25540: PUSH
25541: LD_EXP 58
25545: PUSH
25546: LD_INT 1
25548: PLUS
25549: ST_TO_ADDR
// enable ;
25550: ENABLE
// end ; end_of_file
25551: END
// every 0 0$2 + 0 0$0.1 do
25552: GO 25554
25554: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
25555: LD_INT 22
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: LD_INT 25
25570: PUSH
25571: LD_INT 12
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 25
25580: PUSH
25581: LD_INT 16
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 25
25590: PUSH
25591: LD_INT 15
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 25
25600: PUSH
25601: LD_INT 17
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PPUSH
25619: CALL_OW 69
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 21
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: LD_INT 25
25652: PUSH
25653: LD_INT 12
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 25
25662: PUSH
25663: LD_INT 16
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 25
25672: PUSH
25673: LD_INT 15
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 25
25682: PUSH
25683: LD_INT 17
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: LIST
25705: PPUSH
25706: CALL_OW 69
25710: GREATER
25711: IFFALSE 25722
// begin SetAchievement ( ACH_POTA ) ;
25713: LD_STRING ACH_POTA
25715: PPUSH
25716: CALL_OW 543
// exit ;
25720: GO 25723
// end ; enable ;
25722: ENABLE
// end ;
25723: END
