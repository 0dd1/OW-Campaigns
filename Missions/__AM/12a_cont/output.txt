// export am , al , oth ; export ams00 , ams01 , ams02 , ams03 , ams04 , ams05 , ams06 ; export amv0_ch , amv0_wp , amv0_drv , amv1_ch , amv1_wp , amv1_drv , amv2_cl ; export john_vychod ; export debug , guard_out_ , penalty , maxpenalty , penalties ; var ambudovy , ambudovyt , ambudovyxy ; function set_vars ; var tmp , tmp1 ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// am = 1 ;
   5: LD_ADDR_EXP 1
   9: PUSH
  10: LD_INT 1
  12: ST_TO_ADDR
// al = 7 ;
  13: LD_ADDR_EXP 2
  17: PUSH
  18: LD_INT 7
  20: ST_TO_ADDR
// oth = 4 ;
  21: LD_ADDR_EXP 3
  25: PUSH
  26: LD_INT 4
  28: ST_TO_ADDR
// takoviti = [ ] ;
  29: LD_ADDR_EXP 26
  33: PUSH
  34: EMPTY
  35: ST_TO_ADDR
// moji = [ ] ;
  36: LD_ADDR_EXP 44
  40: PUSH
  41: EMPTY
  42: ST_TO_ADDR
// mojivip = [ ] ;
  43: LD_ADDR_EXP 45
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// ostatnivip = [ ] ;
  50: LD_ADDR_EXP 46
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// pocetmist = 11 ;
  57: LD_ADDR_EXP 49
  61: PUSH
  62: LD_INT 11
  64: ST_TO_ADDR
// mista = [ [ 57 , 97 ] , [ 54 , 51 ] , [ 24 , 22 ] , [ 104 , 112 ] , [ 53 , 13 ] , [ 149 , 108 ] , [ 165 , 96 ] , [ 75 , 3 ] , [ 137 , 62 ] , [ 122 , 38 ] , [ 100 , 11 ] ] ;
  65: LD_ADDR_EXP 47
  69: PUSH
  70: LD_INT 57
  72: PUSH
  73: LD_INT 97
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 54
  82: PUSH
  83: LD_INT 51
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 24
  92: PUSH
  93: LD_INT 22
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: LD_INT 104
 102: PUSH
 103: LD_INT 112
 105: PUSH
 106: EMPTY
 107: LIST
 108: LIST
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: LD_INT 13
 115: PUSH
 116: EMPTY
 117: LIST
 118: LIST
 119: PUSH
 120: LD_INT 149
 122: PUSH
 123: LD_INT 108
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 165
 132: PUSH
 133: LD_INT 96
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 75
 142: PUSH
 143: LD_INT 3
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: LD_INT 137
 152: PUSH
 153: LD_INT 62
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 122
 162: PUSH
 163: LD_INT 38
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PUSH
 170: LD_INT 100
 172: PUSH
 173: LD_INT 11
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// areas = [ area2_bobby , area1_simms , area11_joan , area3_cyrus , area10_gary , area4_lisa , area5_frank , area9_yamoko , area6_markc , area7_tim , area8_denis ] ;
 193: LD_ADDR_EXP 48
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 2
 203: PUSH
 204: LD_INT 12
 206: PUSH
 207: LD_INT 4
 209: PUSH
 210: LD_INT 11
 212: PUSH
 213: LD_INT 5
 215: PUSH
 216: LD_INT 6
 218: PUSH
 219: LD_INT 10
 221: PUSH
 222: LD_INT 7
 224: PUSH
 225: LD_INT 8
 227: PUSH
 228: LD_INT 9
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// guard_out_ = [ [ 149 , 63 ] , [ 150 , 65 ] , [ 151 , 67 ] , [ 152 , 69 ] , [ 154 , 73 ] , [ 153 , 71 ] ] ;
 244: LD_ADDR_EXP 20
 248: PUSH
 249: LD_INT 149
 251: PUSH
 252: LD_INT 63
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PUSH
 259: LD_INT 150
 261: PUSH
 262: LD_INT 65
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: PUSH
 269: LD_INT 151
 271: PUSH
 272: LD_INT 67
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 152
 281: PUSH
 282: LD_INT 69
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: LD_INT 154
 291: PUSH
 292: LD_INT 73
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: LD_INT 153
 301: PUSH
 302: LD_INT 71
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: LIST
 315: LIST
 316: ST_TO_ADDR
// penalty = 0 ;
 317: LD_ADDR_EXP 21
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// maxpenalty = 25 ;
 325: LD_ADDR_EXP 22
 329: PUSH
 330: LD_INT 25
 332: ST_TO_ADDR
// penalties = [ [ b_depot , 25 ] ] ;
 333: LD_ADDR_EXP 23
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: LD_INT 25
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: ST_TO_ADDR
// penalties = penalties ^ [ [ b_warehouse , 25 ] ] ;
 351: LD_ADDR_EXP 23
 355: PUSH
 356: LD_EXP 23
 360: PUSH
 361: LD_INT 1
 363: PUSH
 364: LD_INT 25
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: ADD
 374: ST_TO_ADDR
// penalties = penalties ^ [ [ b_factory , [ 10 , 8 , 6 ] [ difficulty ] ] ] ;
 375: LD_ADDR_EXP 23
 379: PUSH
 380: LD_EXP 23
 384: PUSH
 385: LD_INT 3
 387: PUSH
 388: LD_INT 10
 390: PUSH
 391: LD_INT 8
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: LD_OWVAR 67
 406: ARRAY
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: EMPTY
 413: LIST
 414: ADD
 415: ST_TO_ADDR
// penalties = penalties ^ [ [ b_barracks , [ 20 , 15 , 10 ] [ difficulty ] ] ] ;
 416: LD_ADDR_EXP 23
 420: PUSH
 421: LD_EXP 23
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: LD_INT 20
 431: PUSH
 432: LD_INT 15
 434: PUSH
 435: LD_INT 10
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: LIST
 442: PUSH
 443: LD_OWVAR 67
 447: ARRAY
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: LIST
 455: ADD
 456: ST_TO_ADDR
// penalties = penalties ^ [ [ b_lab_full , [ 10 , 8 , 6 ] [ difficulty ] ] ] ;
 457: LD_ADDR_EXP 23
 461: PUSH
 462: LD_EXP 23
 466: PUSH
 467: LD_INT 8
 469: PUSH
 470: LD_INT 10
 472: PUSH
 473: LD_INT 8
 475: PUSH
 476: LD_INT 6
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: ADD
 497: ST_TO_ADDR
// penalties = penalties ^ [ [ b_ext_track , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 498: LD_ADDR_EXP 23
 502: PUSH
 503: LD_EXP 23
 507: PUSH
 508: LD_INT 16
 510: PUSH
 511: LD_INT 8
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 4
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: EMPTY
 536: LIST
 537: ADD
 538: ST_TO_ADDR
// penalties = penalties ^ [ [ b_ext_gun , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 539: LD_ADDR_EXP 23
 543: PUSH
 544: LD_EXP 23
 548: PUSH
 549: LD_INT 17
 551: PUSH
 552: LD_INT 8
 554: PUSH
 555: LD_INT 6
 557: PUSH
 558: LD_INT 4
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_OWVAR 67
 570: ARRAY
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: PUSH
 576: EMPTY
 577: LIST
 578: ADD
 579: ST_TO_ADDR
// penalties = penalties ^ [ [ b_ext_noncombat , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 580: LD_ADDR_EXP 23
 584: PUSH
 585: LD_EXP 23
 589: PUSH
 590: LD_INT 19
 592: PUSH
 593: LD_INT 8
 595: PUSH
 596: LD_INT 6
 598: PUSH
 599: LD_INT 4
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: ADD
 620: ST_TO_ADDR
// penalties = penalties ^ [ [ b_ext_radar , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 621: LD_ADDR_EXP 23
 625: PUSH
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 20
 633: PUSH
 634: LD_INT 8
 636: PUSH
 637: LD_INT 6
 639: PUSH
 640: LD_INT 4
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: ADD
 661: ST_TO_ADDR
// penalties = penalties ^ [ [ b_ext_siberium , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 662: LD_ADDR_EXP 23
 666: PUSH
 667: LD_EXP 23
 671: PUSH
 672: LD_INT 21
 674: PUSH
 675: LD_INT 8
 677: PUSH
 678: LD_INT 6
 680: PUSH
 681: LD_INT 4
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: PUSH
 689: LD_OWVAR 67
 693: ARRAY
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: EMPTY
 700: LIST
 701: ADD
 702: ST_TO_ADDR
// penalties = penalties ^ [ [ b_ext_computer , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 703: LD_ADDR_EXP 23
 707: PUSH
 708: LD_EXP 23
 712: PUSH
 713: LD_INT 24
 715: PUSH
 716: LD_INT 8
 718: PUSH
 719: LD_INT 6
 721: PUSH
 722: LD_INT 4
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: PUSH
 730: LD_OWVAR 67
 734: ARRAY
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: EMPTY
 741: LIST
 742: ADD
 743: ST_TO_ADDR
// penalties = penalties ^ [ [ b_ext_laser , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 744: LD_ADDR_EXP 23
 748: PUSH
 749: LD_EXP 23
 753: PUSH
 754: LD_INT 25
 756: PUSH
 757: LD_INT 8
 759: PUSH
 760: LD_INT 6
 762: PUSH
 763: LD_INT 4
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_OWVAR 67
 775: ARRAY
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: ADD
 784: ST_TO_ADDR
// penalties = penalties ^ [ [ b_oil_power , [ 15 , 11 , 8 ] [ difficulty ] ] ] ;
 785: LD_ADDR_EXP 23
 789: PUSH
 790: LD_EXP 23
 794: PUSH
 795: LD_INT 26
 797: PUSH
 798: LD_INT 15
 800: PUSH
 801: LD_INT 11
 803: PUSH
 804: LD_INT 8
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: LD_OWVAR 67
 816: ARRAY
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: EMPTY
 823: LIST
 824: ADD
 825: ST_TO_ADDR
// penalties = penalties ^ [ [ b_siberite_power , 25 ] ] ;
 826: LD_ADDR_EXP 23
 830: PUSH
 831: LD_EXP 23
 835: PUSH
 836: LD_INT 28
 838: PUSH
 839: LD_INT 25
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: EMPTY
 847: LIST
 848: ADD
 849: ST_TO_ADDR
// penalties = penalties ^ [ [ b_oil_mine , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 850: LD_ADDR_EXP 23
 854: PUSH
 855: LD_EXP 23
 859: PUSH
 860: LD_INT 29
 862: PUSH
 863: LD_INT 8
 865: PUSH
 866: LD_INT 6
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_OWVAR 67
 881: ARRAY
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: PUSH
 887: EMPTY
 888: LIST
 889: ADD
 890: ST_TO_ADDR
// penalties = penalties ^ [ [ b_siberite_mine , [ 8 , 6 , 4 ] [ difficulty ] ] ] ;
 891: LD_ADDR_EXP 23
 895: PUSH
 896: LD_EXP 23
 900: PUSH
 901: LD_INT 30
 903: PUSH
 904: LD_INT 8
 906: PUSH
 907: LD_INT 6
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: LD_OWVAR 67
 922: ARRAY
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: ADD
 931: ST_TO_ADDR
// penalties = penalties ^ [ [ b_bunker , [ 10 , 8 , 6 ] [ difficulty ] ] ] ;
 932: LD_ADDR_EXP 23
 936: PUSH
 937: LD_EXP 23
 941: PUSH
 942: LD_INT 32
 944: PUSH
 945: LD_INT 10
 947: PUSH
 948: LD_INT 8
 950: PUSH
 951: LD_INT 6
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: PUSH
 969: EMPTY
 970: LIST
 971: ADD
 972: ST_TO_ADDR
// penalties = penalties ^ [ [ b_turret , [ 10 , 8 , 6 ] [ difficulty ] ] ] ;
 973: LD_ADDR_EXP 23
 977: PUSH
 978: LD_EXP 23
 982: PUSH
 983: LD_INT 33
 985: PUSH
 986: LD_INT 10
 988: PUSH
 989: LD_INT 8
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_OWVAR 67
1004: ARRAY
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: EMPTY
1011: LIST
1012: ADD
1013: ST_TO_ADDR
// penalties = penalties ^ [ [ b_control_tower , [ 10 , 8 , 6 ] [ difficulty ] ] ] ;
1014: LD_ADDR_EXP 23
1018: PUSH
1019: LD_EXP 23
1023: PUSH
1024: LD_INT 36
1026: PUSH
1027: LD_INT 10
1029: PUSH
1030: LD_INT 8
1032: PUSH
1033: LD_INT 6
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: PUSH
1051: EMPTY
1052: LIST
1053: ADD
1054: ST_TO_ADDR
// ambudovy = filterallunits ( [ [ f_side , am ] , [ f_type , unit_building ] ] ) ;
1055: LD_ADDR_LOC 1
1059: PUSH
1060: LD_INT 22
1062: PUSH
1063: LD_EXP 1
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PUSH
1072: LD_INT 21
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PPUSH
1086: CALL_OW 69
1090: ST_TO_ADDR
// ambudovyt = [ ] ;
1091: LD_ADDR_LOC 2
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// ambudovyxy = [ ] ;
1098: LD_ADDR_LOC 3
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// for tmp in ambudovy do
1105: LD_ADDR_VAR 0 2
1109: PUSH
1110: LD_LOC 1
1114: PUSH
1115: FOR_IN
1116: IFFALSE 1182
// begin ambudovyt = ambudovyt ^ [ getbtype ( tmp ) ] ;
1118: LD_ADDR_LOC 2
1122: PUSH
1123: LD_LOC 2
1127: PUSH
1128: LD_VAR 0 2
1132: PPUSH
1133: CALL_OW 266
1137: PUSH
1138: EMPTY
1139: LIST
1140: ADD
1141: ST_TO_ADDR
// ambudovyxy = ambudovyxy ^ [ [ getx ( tmp ) , gety ( tmp ) ] ] ;
1142: LD_ADDR_LOC 3
1146: PUSH
1147: LD_LOC 3
1151: PUSH
1152: LD_VAR 0 2
1156: PPUSH
1157: CALL_OW 250
1161: PUSH
1162: LD_VAR 0 2
1166: PPUSH
1167: CALL_OW 251
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: ADD
1179: ST_TO_ADDR
// end ;
1180: GO 1115
1182: POP
1183: POP
// ams00 = [ 4 , 6 , 8 ] [ difficulty ] ;
1184: LD_ADDR_EXP 4
1188: PUSH
1189: LD_INT 4
1191: PUSH
1192: LD_INT 6
1194: PUSH
1195: LD_INT 8
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// ams01 = [ 3 , 5 , 7 ] [ difficulty ] ;
1209: LD_ADDR_EXP 5
1213: PUSH
1214: LD_INT 3
1216: PUSH
1217: LD_INT 5
1219: PUSH
1220: LD_INT 7
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_OWVAR 67
1232: ARRAY
1233: ST_TO_ADDR
// ams02 = [ 4 , 6 , 8 ] [ difficulty ] ;
1234: LD_ADDR_EXP 6
1238: PUSH
1239: LD_INT 4
1241: PUSH
1242: LD_INT 6
1244: PUSH
1245: LD_INT 8
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: PUSH
1253: LD_OWVAR 67
1257: ARRAY
1258: ST_TO_ADDR
// ams03 = [ 4 , 6 , 8 ] [ difficulty ] ;
1259: LD_ADDR_EXP 7
1263: PUSH
1264: LD_INT 4
1266: PUSH
1267: LD_INT 6
1269: PUSH
1270: LD_INT 8
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_OWVAR 67
1282: ARRAY
1283: ST_TO_ADDR
// ams04 = [ 4 , 6 , 8 ] [ difficulty ] ;
1284: LD_ADDR_EXP 8
1288: PUSH
1289: LD_INT 4
1291: PUSH
1292: LD_INT 6
1294: PUSH
1295: LD_INT 8
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_OWVAR 67
1307: ARRAY
1308: ST_TO_ADDR
// ams05 = [ 3 , 5 , 7 ] [ difficulty ] ;
1309: LD_ADDR_EXP 9
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: LD_INT 5
1319: PUSH
1320: LD_INT 7
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: LD_OWVAR 67
1332: ARRAY
1333: ST_TO_ADDR
// ams06 = [ 4 , 6 , 8 ] [ difficulty ] ;
1334: LD_ADDR_EXP 10
1338: PUSH
1339: LD_INT 4
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 8
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_OWVAR 67
1357: ARRAY
1358: ST_TO_ADDR
// amv0_ch = [ us_medium_wheeled , us_medium_wheeled , us_medium_wheeled ] [ difficulty ] ;
1359: LD_ADDR_EXP 11
1363: PUSH
1364: LD_INT 2
1366: PUSH
1367: LD_INT 2
1369: PUSH
1370: LD_INT 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_OWVAR 67
1382: ARRAY
1383: ST_TO_ADDR
// amv0_wp = [ us_gatling_gun , us_gatling_gun , us_gatling_gun ] [ difficulty ] ;
1384: LD_ADDR_EXP 12
1388: PUSH
1389: LD_INT 4
1391: PUSH
1392: LD_INT 4
1394: PUSH
1395: LD_INT 4
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: ST_TO_ADDR
// amv0_drv = [ 4 , 6 , 8 ] [ difficulty ] ;
1409: LD_ADDR_EXP 13
1413: PUSH
1414: LD_INT 4
1416: PUSH
1417: LD_INT 6
1419: PUSH
1420: LD_INT 8
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: LIST
1427: PUSH
1428: LD_OWVAR 67
1432: ARRAY
1433: ST_TO_ADDR
// amv1_ch = [ us_medium_wheeled , us_medium_wheeled , us_medium_wheeled ] [ difficulty ] ;
1434: LD_ADDR_EXP 14
1438: PUSH
1439: LD_INT 2
1441: PUSH
1442: LD_INT 2
1444: PUSH
1445: LD_INT 2
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_OWVAR 67
1457: ARRAY
1458: ST_TO_ADDR
// amv1_wp = [ us_machine_gun , us_gatling_gun , us_machine_gun ] [ difficulty ] ;
1459: LD_ADDR_EXP 15
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: LD_INT 4
1469: PUSH
1470: LD_INT 2
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: LIST
1477: PUSH
1478: LD_OWVAR 67
1482: ARRAY
1483: ST_TO_ADDR
// amv1_drv = [ 4 , 6 , 8 ] [ difficulty ] ;
1484: LD_ADDR_EXP 16
1488: PUSH
1489: LD_INT 4
1491: PUSH
1492: LD_INT 6
1494: PUSH
1495: LD_INT 8
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: LIST
1502: PUSH
1503: LD_OWVAR 67
1507: ARRAY
1508: ST_TO_ADDR
// amv2_cl = [ 4 , 7 , 8 ] [ difficulty ] ;
1509: LD_ADDR_EXP 17
1513: PUSH
1514: LD_INT 4
1516: PUSH
1517: LD_INT 7
1519: PUSH
1520: LD_INT 8
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: PUSH
1528: LD_OWVAR 67
1532: ARRAY
1533: ST_TO_ADDR
// if difficulty = 3 then
1534: LD_OWVAR 67
1538: PUSH
1539: LD_INT 3
1541: EQUAL
1542: IFFALSE 1641
// begin tmp = filterallunits ( [ [ f_side , am ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1544: LD_ADDR_VAR 0 2
1548: PUSH
1549: LD_INT 22
1551: PUSH
1552: LD_EXP 1
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 30
1566: PUSH
1567: LD_INT 32
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 30
1576: PUSH
1577: LD_INT 33
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PPUSH
1593: CALL_OW 69
1597: ST_TO_ADDR
// for tmp1 in tmp do
1598: LD_ADDR_VAR 0 3
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: FOR_IN
1609: IFFALSE 1639
// setblevel ( [ tmp1 ] , getblevel ( tmp1 ) + 2 ) ;
1611: LD_VAR 0 3
1615: PUSH
1616: EMPTY
1617: LIST
1618: PPUSH
1619: LD_VAR 0 3
1623: PPUSH
1624: CALL_OW 267
1628: PUSH
1629: LD_INT 2
1631: PLUS
1632: PPUSH
1633: CALL_OW 241
1637: GO 1608
1639: POP
1640: POP
// end ; end ;
1641: LD_VAR 0 1
1645: RET
// export contacted , zabil ; starting begin debug = false ;
1646: LD_ADDR_EXP 19
1650: PUSH
1651: LD_INT 0
1653: ST_TO_ADDR
// setbname ( amware0 , alpha ) ;
1654: LD_INT 5
1656: PPUSH
1657: LD_STRING alpha
1659: PPUSH
1660: CALL_OW 500
// set_vars ;
1664: CALL 0 0 0
// zustalo_malo = 5 ;
1668: LD_ADDR_LOC 4
1672: PUSH
1673: LD_INT 5
1675: ST_TO_ADDR
// john_vychod = false ;
1676: LD_ADDR_EXP 18
1680: PUSH
1681: LD_INT 0
1683: ST_TO_ADDR
// zabil = false ;
1684: LD_ADDR_EXP 25
1688: PUSH
1689: LD_INT 0
1691: ST_TO_ADDR
// disable ( 02 ) ;
1692: LD_INT 2
1694: DISABLE_MARKED
// disable ( 04 ) ;
1695: LD_INT 4
1697: DISABLE_MARKED
// revealfogarea ( al , celamapa ) ;
1698: LD_EXP 2
1702: PPUSH
1703: LD_INT 14
1705: PPUSH
1706: CALL_OW 332
// revealfogarea ( am , celamapa ) ;
1710: LD_EXP 1
1714: PPUSH
1715: LD_INT 14
1717: PPUSH
1718: CALL_OW 332
// contacted = 0 ;
1722: LD_ADDR_EXP 24
1726: PUSH
1727: LD_INT 0
1729: ST_TO_ADDR
// prepare_americans ;
1730: CALL 4466 0 0
// if debug then
1734: LD_EXP 19
1738: IFFALSE 1747
// msg ( BACHA debug is ON! ) ;
1740: LD_STRING BACHA debug is ON!
1742: PPUSH
1743: CALL_OW 100
// end ;
1747: END
// export takoviti ; on unitdestroyed ( un ) do var tmp , tmp1 , tmp2 ;
1748: LD_INT 0
1750: PPUSH
1751: PPUSH
1752: PPUSH
// begin if ( un = john ) and not debug then
1753: LD_VAR 0 1
1757: PUSH
1758: LD_EXP 27
1762: EQUAL
1763: PUSH
1764: LD_EXP 19
1768: NOT
1769: AND
1770: IFFALSE 1779
// youlost ( JMM ) ;
1772: LD_STRING JMM
1774: PPUSH
1775: CALL_OW 104
// if not ( un in ( moji ^ mojivip ) ) and ( gettype ( un ) = unit_human ) then
1779: LD_VAR 0 1
1783: PUSH
1784: LD_EXP 44
1788: PUSH
1789: LD_EXP 45
1793: ADD
1794: IN
1795: NOT
1796: PUSH
1797: LD_VAR 0 1
1801: PPUSH
1802: CALL_OW 247
1806: PUSH
1807: LD_INT 1
1809: EQUAL
1810: AND
1811: IFFALSE 1821
// zabil = true ;
1813: LD_ADDR_EXP 25
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// if un in takoviti then
1821: LD_VAR 0 1
1825: PUSH
1826: LD_EXP 26
1830: IN
1831: IFFALSE 1888
// for tmp = 1 to pocetmist do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_EXP 49
1847: PUSH
1848: FOR_TO
1849: IFFALSE 1886
// if un = takoviti [ tmp ] then
1851: LD_VAR 0 1
1855: PUSH
1856: LD_EXP 26
1860: PUSH
1861: LD_VAR 0 2
1865: ARRAY
1866: EQUAL
1867: IFFALSE 1884
// begin settag ( tmp , - 1 ) ;
1869: LD_VAR 0 2
1873: PPUSH
1874: LD_INT 1
1876: NEG
1877: PPUSH
1878: CALL_OW 109
// break ;
1882: GO 1886
// end ;
1884: GO 1848
1886: POP
1887: POP
// tmp1 = 0 ;
1888: LD_ADDR_VAR 0 3
1892: PUSH
1893: LD_INT 0
1895: ST_TO_ADDR
// for tmp = 1 to ( 0 + ambudovy ) do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: DOUBLE
1902: LD_INT 1
1904: DEC
1905: ST_TO_ADDR
1906: LD_INT 0
1908: PUSH
1909: LD_LOC 1
1913: PLUS
1914: PUSH
1915: FOR_TO
1916: IFFALSE 1950
// if ambudovy [ tmp ] = un then
1918: LD_LOC 1
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PUSH
1929: LD_VAR 0 1
1933: EQUAL
1934: IFFALSE 1948
// begin tmp1 = tmp ;
1936: LD_ADDR_VAR 0 3
1940: PUSH
1941: LD_VAR 0 2
1945: ST_TO_ADDR
// break ;
1946: GO 1950
// end ;
1948: GO 1915
1950: POP
1951: POP
// if tmp1 and ( penalty < maxpenalty ) then
1952: LD_VAR 0 3
1956: PUSH
1957: LD_EXP 21
1961: PUSH
1962: LD_EXP 22
1966: LESS
1967: AND
1968: IFFALSE 2112
// begin for tmp in penalties do
1970: LD_ADDR_VAR 0 2
1974: PUSH
1975: LD_EXP 23
1979: PUSH
1980: FOR_IN
1981: IFFALSE 2023
// if tmp [ 1 ] = ambudovyt [ tmp1 ] then
1983: LD_VAR 0 2
1987: PUSH
1988: LD_INT 1
1990: ARRAY
1991: PUSH
1992: LD_LOC 2
1996: PUSH
1997: LD_VAR 0 3
2001: ARRAY
2002: EQUAL
2003: IFFALSE 2021
// begin tmp2 = tmp [ 2 ] ;
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: LD_VAR 0 2
2014: PUSH
2015: LD_INT 2
2017: ARRAY
2018: ST_TO_ADDR
// break ;
2019: GO 2023
// end ;
2021: GO 1980
2023: POP
2024: POP
// penalty = penalty + tmp2 ;
2025: LD_ADDR_EXP 21
2029: PUSH
2030: LD_EXP 21
2034: PUSH
2035: LD_VAR 0 4
2039: PLUS
2040: ST_TO_ADDR
// if debug then
2041: LD_EXP 19
2045: IFFALSE 2060
// msg ( penalty:  & penalty ) ;
2047: LD_STRING penalty: 
2049: PUSH
2050: LD_EXP 21
2054: STR
2055: PPUSH
2056: CALL_OW 100
// if penalty >= maxpenalty then
2060: LD_EXP 21
2064: PUSH
2065: LD_EXP 22
2069: GREATEREQUAL
2070: IFFALSE 2112
// begin killx = ambudovyxy [ tmp1 ] [ 1 ] ;
2072: LD_ADDR_EXP 55
2076: PUSH
2077: LD_LOC 3
2081: PUSH
2082: LD_VAR 0 3
2086: ARRAY
2087: PUSH
2088: LD_INT 1
2090: ARRAY
2091: ST_TO_ADDR
// killy = ambudovyxy [ tmp1 ] [ 2 ] ;
2092: LD_ADDR_EXP 56
2096: PUSH
2097: LD_LOC 3
2101: PUSH
2102: LD_VAR 0 3
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: ST_TO_ADDR
// end end ; end ;
2112: PPOPN 4
2114: END
// var zustalo_malo , zachraneni ; every 0 0$0.51 marked 02 do var tmp , tmp2 , chybi , chybiex ;
2115: GO 2117
2117: DISABLE
2118: LD_INT 0
2120: PPUSH
2121: PPUSH
2122: PPUSH
2123: PPUSH
// begin if isinarea ( john , vychod ) and ( not john_vychod ) then
2124: LD_EXP 27
2128: PPUSH
2129: LD_INT 13
2131: PPUSH
2132: CALL_OW 308
2136: PUSH
2137: LD_EXP 18
2141: NOT
2142: AND
2143: IFFALSE 3024
// begin john_vychod = true ;
2145: LD_ADDR_EXP 18
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// repeat wait ( 17 ) ;
2153: LD_INT 17
2155: PPUSH
2156: CALL_OW 67
// chybi = false ;
2160: LD_ADDR_VAR 0 3
2164: PUSH
2165: LD_INT 0
2167: ST_TO_ADDR
// for tmp in ( moji ^ mojivip ) do
2168: LD_ADDR_VAR 0 1
2172: PUSH
2173: LD_EXP 44
2177: PUSH
2178: LD_EXP 45
2182: ADD
2183: PUSH
2184: FOR_IN
2185: IFFALSE 2225
// if ( not isinarea ( tmp , vychod ) ) and isok ( tmp ) then
2187: LD_VAR 0 1
2191: PPUSH
2192: LD_INT 13
2194: PPUSH
2195: CALL_OW 308
2199: NOT
2200: PUSH
2201: LD_VAR 0 1
2205: PPUSH
2206: CALL_OW 302
2210: AND
2211: IFFALSE 2223
// begin chybi = true ;
2213: LD_ADDR_VAR 0 3
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// break ;
2221: GO 2225
// end ;
2223: GO 2184
2225: POP
2226: POP
// chybiex = false ;
2227: LD_ADDR_VAR 0 4
2231: PUSH
2232: LD_INT 0
2234: ST_TO_ADDR
// if chybi then
2235: LD_VAR 0 3
2239: IFFALSE 2300
// for tmp in ( moji ^ mojivip ) do
2241: LD_ADDR_VAR 0 1
2245: PUSH
2246: LD_EXP 44
2250: PUSH
2251: LD_EXP 45
2255: ADD
2256: PUSH
2257: FOR_IN
2258: IFFALSE 2298
// if ( not isinarea ( tmp , vychodex ) ) and isok ( tmp ) then
2260: LD_VAR 0 1
2264: PPUSH
2265: LD_INT 18
2267: PPUSH
2268: CALL_OW 308
2272: NOT
2273: PUSH
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 302
2283: AND
2284: IFFALSE 2296
// begin chybiex = true ;
2286: LD_ADDR_VAR 0 4
2290: PUSH
2291: LD_INT 1
2293: ST_TO_ADDR
// break ;
2294: GO 2298
// end ;
2296: GO 2257
2298: POP
2299: POP
// until not ( chybi and not chybiex ) ;
2300: LD_VAR 0 3
2304: PUSH
2305: LD_VAR 0 4
2309: NOT
2310: AND
2311: NOT
2312: IFFALSE 2153
// if chybi then
2314: LD_VAR 0 3
2318: IFFALSE 2675
// if query ( Q1 ) = 1 then
2320: LD_STRING Q1
2322: PPUSH
2323: CALL_OW 97
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: IFFALSE 2336
// enable else
2333: ENABLE
2334: GO 2673
// begin if filterunitsinarea ( vychod , [ [ f_side , al ] ] ) <= zustalo_malo then
2336: LD_INT 13
2338: PPUSH
2339: LD_INT 22
2341: PUSH
2342: LD_EXP 2
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: PPUSH
2354: CALL_OW 70
2358: PUSH
2359: LD_LOC 4
2363: LESSEQUAL
2364: IFFALSE 2380
// say ( john , D5-JMM-1a ) else
2366: LD_EXP 27
2370: PPUSH
2371: LD_STRING D5-JMM-1a
2373: PPUSH
2374: CALL_OW 88
2378: GO 2392
// say ( john , D5-JMM-1 ) ;
2380: LD_EXP 27
2384: PPUSH
2385: LD_STRING D5-JMM-1
2387: PPUSH
2388: CALL_OW 88
// zachraneni = filterunitsinarea ( vychod , [ [ f_side , al ] ] ) diff [ john , roth ] ;
2392: LD_ADDR_LOC 5
2396: PUSH
2397: LD_INT 13
2399: PPUSH
2400: LD_INT 22
2402: PUSH
2403: LD_EXP 2
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: PUSH
2412: EMPTY
2413: LIST
2414: PPUSH
2415: CALL_OW 70
2419: PUSH
2420: LD_EXP 27
2424: PUSH
2425: LD_EXP 29
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: DIFF
2434: ST_TO_ADDR
// tmp2 = 0 + zachraneni ;
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 0
2442: PUSH
2443: LD_LOC 5
2447: PLUS
2448: ST_TO_ADDR
// if lisamet = 2 then
2449: LD_EXP 53
2453: PUSH
2454: LD_INT 2
2456: EQUAL
2457: IFFALSE 2473
// tmp2 = tmp2 + 1 ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_INT 1
2471: PLUS
2472: ST_TO_ADDR
// if frankmet then
2473: LD_EXP 52
2477: IFFALSE 2493
// tmp2 = tmp2 - 1 ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: MINUS
2492: ST_TO_ADDR
// if joanmet then
2493: LD_EXP 51
2497: IFFALSE 2513
// tmp2 = tmp2 - 1 ;
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: LD_VAR 0 2
2508: PUSH
2509: LD_INT 1
2511: MINUS
2512: ST_TO_ADDR
// if contacted < ( 0 + moji_backup ) then
2513: LD_EXP 24
2517: PUSH
2518: LD_INT 0
2520: PUSH
2521: LD_EXP 50
2525: PLUS
2526: LESS
2527: IFFALSE 2542
// addmedal ( All , - 1 ) else
2529: LD_STRING All
2531: PPUSH
2532: LD_INT 1
2534: NEG
2535: PPUSH
2536: CALL_OW 101
2540: GO 2552
// addmedal ( All , 1 ) ;
2542: LD_STRING All
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: CALL_OW 101
// SA_OnJoanAndLisaJoinedAlliance ( ( lisa in zachraneni and IsLive ( lisa ) ) , ( joan in zachraneni and IsLive ( joan ) ) ) ;
2552: LD_EXP 33
2556: PUSH
2557: LD_LOC 5
2561: IN
2562: PUSH
2563: LD_EXP 33
2567: PPUSH
2568: CALL_OW 300
2572: AND
2573: PPUSH
2574: LD_EXP 30
2578: PUSH
2579: LD_LOC 5
2583: IN
2584: PUSH
2585: LD_EXP 30
2589: PPUSH
2590: CALL_OW 300
2594: AND
2595: PPUSH
2596: CALL 12061 0 2
// addmedal ( Save , - 1 ) ;
2600: LD_STRING Save
2602: PPUSH
2603: LD_INT 1
2605: NEG
2606: PPUSH
2607: CALL_OW 101
// if zabil then
2611: LD_EXP 25
2615: IFFALSE 2630
// addmedal ( Friendship , - 1 ) else
2617: LD_STRING Friendship
2619: PPUSH
2620: LD_INT 1
2622: NEG
2623: PPUSH
2624: CALL_OW 101
2628: GO 2640
// addmedal ( Friendship , 1 ) ;
2630: LD_STRING Friendship
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: CALL_OW 101
// givemedals ( MAIN ) ;
2640: LD_STRING MAIN
2642: PPUSH
2643: CALL_OW 102
// rewardpeople ( zachraneni ^ [ john ] ) ;
2647: LD_LOC 5
2651: PUSH
2652: LD_EXP 27
2656: PUSH
2657: EMPTY
2658: LIST
2659: ADD
2660: PPUSH
2661: CALL_OW 43
// saveitall ;
2665: CALL 3477 0 0
// youwin ;
2669: CALL_OW 103
// end else
2673: GO 3022
// begin zachraneni = filterunitsinarea ( vychod , [ [ f_side , al ] ] ) diff [ john , roth ] ;
2675: LD_ADDR_LOC 5
2679: PUSH
2680: LD_INT 13
2682: PPUSH
2683: LD_INT 22
2685: PUSH
2686: LD_EXP 2
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: EMPTY
2696: LIST
2697: PPUSH
2698: CALL_OW 70
2702: PUSH
2703: LD_EXP 27
2707: PUSH
2708: LD_EXP 29
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: DIFF
2717: ST_TO_ADDR
// tmp2 = 0 + zachraneni ;
2718: LD_ADDR_VAR 0 2
2722: PUSH
2723: LD_INT 0
2725: PUSH
2726: LD_LOC 5
2730: PLUS
2731: ST_TO_ADDR
// if tmp2 <= zustalo_malo then
2732: LD_VAR 0 2
2736: PUSH
2737: LD_LOC 4
2741: LESSEQUAL
2742: IFFALSE 2758
// say ( john , D5-JMM-1a ) else
2744: LD_EXP 27
2748: PPUSH
2749: LD_STRING D5-JMM-1a
2751: PPUSH
2752: CALL_OW 88
2756: GO 2770
// say ( john , D5-JMM-1 ) ;
2758: LD_EXP 27
2762: PPUSH
2763: LD_STRING D5-JMM-1
2765: PPUSH
2766: CALL_OW 88
// if lisamet = 2 then
2770: LD_EXP 53
2774: PUSH
2775: LD_INT 2
2777: EQUAL
2778: IFFALSE 2794
// tmp2 = tmp2 + 1 ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: LD_VAR 0 2
2789: PUSH
2790: LD_INT 1
2792: PLUS
2793: ST_TO_ADDR
// if frankmet then
2794: LD_EXP 52
2798: IFFALSE 2814
// tmp2 = tmp2 - 1 ;
2800: LD_ADDR_VAR 0 2
2804: PUSH
2805: LD_VAR 0 2
2809: PUSH
2810: LD_INT 1
2812: MINUS
2813: ST_TO_ADDR
// if joanmet then
2814: LD_EXP 51
2818: IFFALSE 2834
// tmp2 = tmp2 - 1 ;
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_VAR 0 2
2829: PUSH
2830: LD_INT 1
2832: MINUS
2833: ST_TO_ADDR
// if contacted < ( 0 + moji_backup ) then
2834: LD_EXP 24
2838: PUSH
2839: LD_INT 0
2841: PUSH
2842: LD_EXP 50
2846: PLUS
2847: LESS
2848: IFFALSE 2863
// addmedal ( All , - 1 ) else
2850: LD_STRING All
2852: PPUSH
2853: LD_INT 1
2855: NEG
2856: PPUSH
2857: CALL_OW 101
2861: GO 2873
// addmedal ( All , 1 ) ;
2863: LD_STRING All
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: CALL_OW 101
// SA_OnJoanAndLisaJoinedAlliance ( ( lisa in zachraneni and IsLive ( lisa ) ) , ( joan in zachraneni and IsLive ( joan ) ) ) ;
2873: LD_EXP 33
2877: PUSH
2878: LD_LOC 5
2882: IN
2883: PUSH
2884: LD_EXP 33
2888: PPUSH
2889: CALL_OW 300
2893: AND
2894: PPUSH
2895: LD_EXP 30
2899: PUSH
2900: LD_LOC 5
2904: IN
2905: PUSH
2906: LD_EXP 30
2910: PPUSH
2911: CALL_OW 300
2915: AND
2916: PPUSH
2917: CALL 12061 0 2
// if tmp2 < ( 0 + moji_backup ) then
2921: LD_VAR 0 2
2925: PUSH
2926: LD_INT 0
2928: PUSH
2929: LD_EXP 50
2933: PLUS
2934: LESS
2935: IFFALSE 2950
// addmedal ( Save , - 1 ) else
2937: LD_STRING Save
2939: PPUSH
2940: LD_INT 1
2942: NEG
2943: PPUSH
2944: CALL_OW 101
2948: GO 2960
// addmedal ( Save , 1 ) ;
2950: LD_STRING Save
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL_OW 101
// if zabil then
2960: LD_EXP 25
2964: IFFALSE 2979
// addmedal ( Friendship , - 1 ) else
2966: LD_STRING Friendship
2968: PPUSH
2969: LD_INT 1
2971: NEG
2972: PPUSH
2973: CALL_OW 101
2977: GO 2989
// addmedal ( Friendship , 1 ) ;
2979: LD_STRING Friendship
2981: PPUSH
2982: LD_INT 1
2984: PPUSH
2985: CALL_OW 101
// givemedals ( MAIN ) ;
2989: LD_STRING MAIN
2991: PPUSH
2992: CALL_OW 102
// rewardpeople ( zachraneni ^ [ john ] ) ;
2996: LD_LOC 5
3000: PUSH
3001: LD_EXP 27
3005: PUSH
3006: EMPTY
3007: LIST
3008: ADD
3009: PPUSH
3010: CALL_OW 43
// saveitall ;
3014: CALL 3477 0 0
// youwin ;
3018: CALL_OW 103
// end ; end else
3022: GO 3474
// if not isinarea ( john , vychod ) then
3024: LD_EXP 27
3028: PPUSH
3029: LD_INT 13
3031: PPUSH
3032: CALL_OW 308
3036: NOT
3037: IFFALSE 3050
// begin john_vychod = false ;
3039: LD_ADDR_EXP 18
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// enable ;
3047: ENABLE
// end else
3048: GO 3474
// begin chybi = false ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: LD_INT 0
3057: ST_TO_ADDR
// for tmp in ( moji ^ mojivip ) do
3058: LD_ADDR_VAR 0 1
3062: PUSH
3063: LD_EXP 44
3067: PUSH
3068: LD_EXP 45
3072: ADD
3073: PUSH
3074: FOR_IN
3075: IFFALSE 3115
// if ( not isinarea ( tmp , vychod ) ) and isok ( tmp ) then
3077: LD_VAR 0 1
3081: PPUSH
3082: LD_INT 13
3084: PPUSH
3085: CALL_OW 308
3089: NOT
3090: PUSH
3091: LD_VAR 0 1
3095: PPUSH
3096: CALL_OW 302
3100: AND
3101: IFFALSE 3113
// begin chybi = true ;
3103: LD_ADDR_VAR 0 3
3107: PUSH
3108: LD_INT 1
3110: ST_TO_ADDR
// break ;
3111: GO 3115
// end ;
3113: GO 3074
3115: POP
3116: POP
// if not chybi then
3117: LD_VAR 0 3
3121: NOT
3122: IFFALSE 3473
// begin zachraneni = filterunitsinarea ( vychod , [ [ f_side , al ] ] ) diff [ john , roth ] ;
3124: LD_ADDR_LOC 5
3128: PUSH
3129: LD_INT 13
3131: PPUSH
3132: LD_INT 22
3134: PUSH
3135: LD_EXP 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: EMPTY
3145: LIST
3146: PPUSH
3147: CALL_OW 70
3151: PUSH
3152: LD_EXP 27
3156: PUSH
3157: LD_EXP 29
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: DIFF
3166: ST_TO_ADDR
// tmp2 = 0 + zachraneni ;
3167: LD_ADDR_VAR 0 2
3171: PUSH
3172: LD_INT 0
3174: PUSH
3175: LD_LOC 5
3179: PLUS
3180: ST_TO_ADDR
// if tmp2 <= zustalo_malo then
3181: LD_VAR 0 2
3185: PUSH
3186: LD_LOC 4
3190: LESSEQUAL
3191: IFFALSE 3207
// say ( john , D5-JMM-1a ) else
3193: LD_EXP 27
3197: PPUSH
3198: LD_STRING D5-JMM-1a
3200: PPUSH
3201: CALL_OW 88
3205: GO 3219
// say ( john , D5-JMM-1 ) ;
3207: LD_EXP 27
3211: PPUSH
3212: LD_STRING D5-JMM-1
3214: PPUSH
3215: CALL_OW 88
// if lisamet = 2 then
3219: LD_EXP 53
3223: PUSH
3224: LD_INT 2
3226: EQUAL
3227: IFFALSE 3243
// tmp2 = tmp2 + 1 ;
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: LD_VAR 0 2
3238: PUSH
3239: LD_INT 1
3241: PLUS
3242: ST_TO_ADDR
// if frankmet then
3243: LD_EXP 52
3247: IFFALSE 3263
// tmp2 = tmp2 - 1 ;
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_VAR 0 2
3258: PUSH
3259: LD_INT 1
3261: MINUS
3262: ST_TO_ADDR
// if joanmet then
3263: LD_EXP 51
3267: IFFALSE 3283
// tmp2 = tmp2 - 1 ;
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: LD_VAR 0 2
3278: PUSH
3279: LD_INT 1
3281: MINUS
3282: ST_TO_ADDR
// if contacted < ( 0 + moji_backup ) then
3283: LD_EXP 24
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_EXP 50
3295: PLUS
3296: LESS
3297: IFFALSE 3312
// addmedal ( All , - 1 ) else
3299: LD_STRING All
3301: PPUSH
3302: LD_INT 1
3304: NEG
3305: PPUSH
3306: CALL_OW 101
3310: GO 3322
// addmedal ( All , 1 ) ;
3312: LD_STRING All
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL_OW 101
// SA_OnJoanAndLisaJoinedAlliance ( ( lisa in zachraneni and IsLive ( lisa ) ) , ( joan in zachraneni and IsLive ( joan ) ) ) ;
3322: LD_EXP 33
3326: PUSH
3327: LD_LOC 5
3331: IN
3332: PUSH
3333: LD_EXP 33
3337: PPUSH
3338: CALL_OW 300
3342: AND
3343: PPUSH
3344: LD_EXP 30
3348: PUSH
3349: LD_LOC 5
3353: IN
3354: PUSH
3355: LD_EXP 30
3359: PPUSH
3360: CALL_OW 300
3364: AND
3365: PPUSH
3366: CALL 12061 0 2
// if tmp2 < ( 0 + moji_backup ) then
3370: LD_VAR 0 2
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: LD_EXP 50
3382: PLUS
3383: LESS
3384: IFFALSE 3399
// addmedal ( Save , - 1 ) else
3386: LD_STRING Save
3388: PPUSH
3389: LD_INT 1
3391: NEG
3392: PPUSH
3393: CALL_OW 101
3397: GO 3409
// addmedal ( Save , 1 ) ;
3399: LD_STRING Save
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 101
// if zabil then
3409: LD_EXP 25
3413: IFFALSE 3428
// addmedal ( Friendship , - 1 ) else
3415: LD_STRING Friendship
3417: PPUSH
3418: LD_INT 1
3420: NEG
3421: PPUSH
3422: CALL_OW 101
3426: GO 3438
// addmedal ( Friendship , 1 ) ;
3428: LD_STRING Friendship
3430: PPUSH
3431: LD_INT 1
3433: PPUSH
3434: CALL_OW 101
// givemedals ( MAIN ) ;
3438: LD_STRING MAIN
3440: PPUSH
3441: CALL_OW 102
// rewardpeople ( zachraneni ^ [ john ] ) ;
3445: LD_LOC 5
3449: PUSH
3450: LD_EXP 27
3454: PUSH
3455: EMPTY
3456: LIST
3457: ADD
3458: PPUSH
3459: CALL_OW 43
// saveitall ;
3463: CALL 3477 0 0
// youwin ;
3467: CALL_OW 103
// end else
3471: GO 3474
// enable ;
3473: ENABLE
// end ; end ;
3474: PPOPN 4
3476: END
// function saveitall ; var tmp , vybrani , odpad ; begin
3477: LD_INT 0
3479: PPUSH
3480: PPUSH
3481: PPUSH
3482: PPUSH
// savecharacters ( john , JMM ) ;
3483: LD_EXP 27
3487: PPUSH
3488: LD_STRING JMM
3490: PPUSH
3491: CALL_OW 38
// if cyrus then
3495: LD_EXP 32
3499: IFFALSE 3551
// begin savecharacters ( cyrus , Cyrus ) ;
3501: LD_EXP 32
3505: PPUSH
3506: LD_STRING Cyrus
3508: PPUSH
3509: CALL_OW 38
// if cyrus in zachraneni then
3513: LD_EXP 32
3517: PUSH
3518: LD_LOC 5
3522: IN
3523: IFFALSE 3539
// savevariable ( al , cyrus_side ) else
3525: LD_EXP 2
3529: PPUSH
3530: LD_STRING cyrus_side
3532: PPUSH
3533: CALL_OW 39
3537: GO 3551
// savevariable ( am , cyrus_side ) ;
3539: LD_EXP 1
3543: PPUSH
3544: LD_STRING cyrus_side
3546: PPUSH
3547: CALL_OW 39
// end ; if bobby then
3551: LD_EXP 31
3555: IFFALSE 3607
// begin savecharacters ( bobby , Bobby ) ;
3557: LD_EXP 31
3561: PPUSH
3562: LD_STRING Bobby
3564: PPUSH
3565: CALL_OW 38
// if bobby in zachraneni then
3569: LD_EXP 31
3573: PUSH
3574: LD_LOC 5
3578: IN
3579: IFFALSE 3595
// savevariable ( al , bobby_side ) else
3581: LD_EXP 2
3585: PPUSH
3586: LD_STRING bobby_side
3588: PPUSH
3589: CALL_OW 39
3593: GO 3607
// savevariable ( am , bobby_side ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING bobby_side
3602: PPUSH
3603: CALL_OW 39
// end ; if lisa then
3607: LD_EXP 33
3611: IFFALSE 3663
// begin savecharacters ( lisa , Lisa ) ;
3613: LD_EXP 33
3617: PPUSH
3618: LD_STRING Lisa
3620: PPUSH
3621: CALL_OW 38
// if lisa in zachraneni then
3625: LD_EXP 33
3629: PUSH
3630: LD_LOC 5
3634: IN
3635: IFFALSE 3651
// savevariable ( al , lisa_side ) else
3637: LD_EXP 2
3641: PPUSH
3642: LD_STRING lisa_side
3644: PPUSH
3645: CALL_OW 39
3649: GO 3663
// savevariable ( am , lisa_side ) ;
3651: LD_EXP 1
3655: PPUSH
3656: LD_STRING lisa_side
3658: PPUSH
3659: CALL_OW 39
// end ; if frank then
3663: LD_EXP 34
3667: IFFALSE 3719
// begin savecharacters ( frank , Frank ) ;
3669: LD_EXP 34
3673: PPUSH
3674: LD_STRING Frank
3676: PPUSH
3677: CALL_OW 38
// if frank in zachraneni then
3681: LD_EXP 34
3685: PUSH
3686: LD_LOC 5
3690: IN
3691: IFFALSE 3707
// savevariable ( al , frank_side ) else
3693: LD_EXP 2
3697: PPUSH
3698: LD_STRING frank_side
3700: PPUSH
3701: CALL_OW 39
3705: GO 3719
// savevariable ( am , frank_side ) ;
3707: LD_EXP 1
3711: PPUSH
3712: LD_STRING frank_side
3714: PPUSH
3715: CALL_OW 39
// end ; if joan then
3719: LD_EXP 30
3723: IFFALSE 3775
// begin savecharacters ( joan , Joan ) ;
3725: LD_EXP 30
3729: PPUSH
3730: LD_STRING Joan
3732: PPUSH
3733: CALL_OW 38
// if joan in zachraneni then
3737: LD_EXP 30
3741: PUSH
3742: LD_LOC 5
3746: IN
3747: IFFALSE 3763
// savevariable ( al , joan_side ) else
3749: LD_EXP 2
3753: PPUSH
3754: LD_STRING joan_side
3756: PPUSH
3757: CALL_OW 39
3761: GO 3775
// savevariable ( am , joan_side ) ;
3763: LD_EXP 1
3767: PPUSH
3768: LD_STRING joan_side
3770: PPUSH
3771: CALL_OW 39
// end ; if yamoko then
3775: LD_EXP 38
3779: IFFALSE 3831
// begin savecharacters ( yamoko , Yamoko ) ;
3781: LD_EXP 38
3785: PPUSH
3786: LD_STRING Yamoko
3788: PPUSH
3789: CALL_OW 38
// if yamoko in zachraneni then
3793: LD_EXP 38
3797: PUSH
3798: LD_LOC 5
3802: IN
3803: IFFALSE 3819
// savevariable ( al , yamoko_side ) else
3805: LD_EXP 2
3809: PPUSH
3810: LD_STRING yamoko_side
3812: PPUSH
3813: CALL_OW 39
3817: GO 3831
// savevariable ( am , yamoko_side ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING yamoko_side
3826: PPUSH
3827: CALL_OW 39
// end ; if markc then
3831: LD_EXP 35
3835: IFFALSE 3887
// begin savecharacters ( markc , Cornell ) ;
3837: LD_EXP 35
3841: PPUSH
3842: LD_STRING Cornell
3844: PPUSH
3845: CALL_OW 38
// if markc in zachraneni then
3849: LD_EXP 35
3853: PUSH
3854: LD_LOC 5
3858: IN
3859: IFFALSE 3875
// savevariable ( al , markc_side ) else
3861: LD_EXP 2
3865: PPUSH
3866: LD_STRING markc_side
3868: PPUSH
3869: CALL_OW 39
3873: GO 3887
// savevariable ( am , markc_side ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING markc_side
3882: PPUSH
3883: CALL_OW 39
// end ; if brown then
3887: LD_EXP 41
3891: IFFALSE 3943
// begin savecharacters ( brown , Brown ) ;
3893: LD_EXP 41
3897: PPUSH
3898: LD_STRING Brown
3900: PPUSH
3901: CALL_OW 38
// if brown in zachraneni then
3905: LD_EXP 41
3909: PUSH
3910: LD_LOC 5
3914: IN
3915: IFFALSE 3931
// savevariable ( al , brown_side ) else
3917: LD_EXP 2
3921: PPUSH
3922: LD_STRING brown_side
3924: PPUSH
3925: CALL_OW 39
3929: GO 3943
// savevariable ( am , brown_side ) ;
3931: LD_EXP 1
3935: PPUSH
3936: LD_STRING brown_side
3938: PPUSH
3939: CALL_OW 39
// end ; if lucy then
3943: LD_EXP 42
3947: IFFALSE 3999
// begin savecharacters ( lucy , Donaldson ) ;
3949: LD_EXP 42
3953: PPUSH
3954: LD_STRING Donaldson
3956: PPUSH
3957: CALL_OW 38
// if lucy in zachraneni then
3961: LD_EXP 42
3965: PUSH
3966: LD_LOC 5
3970: IN
3971: IFFALSE 3987
// savevariable ( al , lucy_side ) else
3973: LD_EXP 2
3977: PPUSH
3978: LD_STRING lucy_side
3980: PPUSH
3981: CALL_OW 39
3985: GO 3999
// savevariable ( am , lucy_side ) ;
3987: LD_EXP 1
3991: PPUSH
3992: LD_STRING lucy_side
3994: PPUSH
3995: CALL_OW 39
// end ; if tim then
3999: LD_EXP 36
4003: IFFALSE 4055
// begin savecharacters ( tim , Gladstone ) ;
4005: LD_EXP 36
4009: PPUSH
4010: LD_STRING Gladstone
4012: PPUSH
4013: CALL_OW 38
// if tim in zachraneni then
4017: LD_EXP 36
4021: PUSH
4022: LD_LOC 5
4026: IN
4027: IFFALSE 4043
// savevariable ( al , tim_side ) else
4029: LD_EXP 2
4033: PPUSH
4034: LD_STRING tim_side
4036: PPUSH
4037: CALL_OW 39
4041: GO 4055
// savevariable ( am , tim_side ) ;
4043: LD_EXP 1
4047: PPUSH
4048: LD_STRING tim_side
4050: PPUSH
4051: CALL_OW 39
// end ; if denis then
4055: LD_EXP 37
4059: IFFALSE 4128
// begin savecharacters ( denis , Denis ) ;
4061: LD_EXP 37
4065: PPUSH
4066: LD_STRING Denis
4068: PPUSH
4069: CALL_OW 38
// if denis in zachraneni then
4073: LD_EXP 37
4077: PUSH
4078: LD_LOC 5
4082: IN
4083: IFFALSE 4099
// savevariable ( al , denis_side ) else
4085: LD_EXP 2
4089: PPUSH
4090: LD_STRING denis_side
4092: PPUSH
4093: CALL_OW 39
4097: GO 4111
// savevariable ( am , denis_side ) ;
4099: LD_EXP 1
4103: PPUSH
4104: LD_STRING denis_side
4106: PPUSH
4107: CALL_OW 39
// savevariable ( getside ( denis ) , denis_side ) ;
4111: LD_EXP 37
4115: PPUSH
4116: CALL_OW 255
4120: PPUSH
4121: LD_STRING denis_side
4123: PPUSH
4124: CALL_OW 39
// end ; if gary then
4128: LD_EXP 39
4132: IFFALSE 4184
// begin savecharacters ( gary , Gary ) ;
4134: LD_EXP 39
4138: PPUSH
4139: LD_STRING Gary
4141: PPUSH
4142: CALL_OW 38
// if gary in zachraneni then
4146: LD_EXP 39
4150: PUSH
4151: LD_LOC 5
4155: IN
4156: IFFALSE 4172
// savevariable ( al , gary_side ) else
4158: LD_EXP 2
4162: PPUSH
4163: LD_STRING gary_side
4165: PPUSH
4166: CALL_OW 39
4170: GO 4184
// savevariable ( am , gary_side ) ;
4172: LD_EXP 1
4176: PPUSH
4177: LD_STRING gary_side
4179: PPUSH
4180: CALL_OW 39
// end ; if simms then
4184: LD_EXP 40
4188: IFFALSE 4240
// begin savecharacters ( simms , Simms ) ;
4190: LD_EXP 40
4194: PPUSH
4195: LD_STRING Simms
4197: PPUSH
4198: CALL_OW 38
// if simms in zachraneni then
4202: LD_EXP 40
4206: PUSH
4207: LD_LOC 5
4211: IN
4212: IFFALSE 4228
// savevariable ( al , simms_side ) else
4214: LD_EXP 2
4218: PPUSH
4219: LD_STRING simms_side
4221: PPUSH
4222: CALL_OW 39
4226: GO 4240
// savevariable ( am , simms_side ) ;
4228: LD_EXP 1
4232: PPUSH
4233: LD_STRING simms_side
4235: PPUSH
4236: CALL_OW 39
// end ; vybrani = [ ] ;
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: EMPTY
4246: ST_TO_ADDR
// odpad = [ ] ;
4247: LD_ADDR_VAR 0 4
4251: PUSH
4252: EMPTY
4253: ST_TO_ADDR
// if testcharacters ( otherwithJMM ) then
4254: LD_STRING otherwithJMM
4256: PPUSH
4257: CALL_OW 28
4261: IFFALSE 4278
// vybrani = createcharacterset ( otherwithJMM ) else
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: LD_STRING otherwithJMM
4270: PPUSH
4271: CALL_OW 31
4275: ST_TO_ADDR
4276: GO 4291
// buildquery ( neny otherwithJMM , [ OK ] ) ;
4278: LD_STRING neny otherwithJMM
4280: PPUSH
4281: LD_STRING OK
4283: PUSH
4284: EMPTY
4285: LIST
4286: PPUSH
4287: CALL_OW 99
// if testcharacters ( othernotJMM ) then
4291: LD_STRING othernotJMM
4293: PPUSH
4294: CALL_OW 28
4298: IFFALSE 4315
// odpad = createcharacterset ( othernotJMM ) else
4300: LD_ADDR_VAR 0 4
4304: PUSH
4305: LD_STRING othernotJMM
4307: PPUSH
4308: CALL_OW 31
4312: ST_TO_ADDR
4313: GO 4328
// buildquery ( neny othernotJMM , [ OK ] ) ;
4315: LD_STRING neny othernotJMM
4317: PPUSH
4318: LD_STRING OK
4320: PUSH
4321: EMPTY
4322: LIST
4323: PPUSH
4324: CALL_OW 99
// tmp = zachraneni diff [ john , joan , bobby , cyrus , lisa , frank , markc , brown , lucy , tim , denis , yamoko , gary , simms ] ;
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: LD_LOC 5
4337: PUSH
4338: LD_EXP 27
4342: PUSH
4343: LD_EXP 30
4347: PUSH
4348: LD_EXP 31
4352: PUSH
4353: LD_EXP 32
4357: PUSH
4358: LD_EXP 33
4362: PUSH
4363: LD_EXP 34
4367: PUSH
4368: LD_EXP 35
4372: PUSH
4373: LD_EXP 41
4377: PUSH
4378: LD_EXP 42
4382: PUSH
4383: LD_EXP 36
4387: PUSH
4388: LD_EXP 37
4392: PUSH
4393: LD_EXP 38
4397: PUSH
4398: LD_EXP 39
4402: PUSH
4403: LD_EXP 40
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: DIFF
4424: ST_TO_ADDR
// savecharacters ( tmp , otherwithJMM ) ;
4425: LD_VAR 0 2
4429: PPUSH
4430: LD_STRING otherwithJMM
4432: PPUSH
4433: CALL_OW 38
// savecharacters ( ( vybrani diff tmp ) union odpad , othernotJMM ) ;
4437: LD_VAR 0 3
4441: PUSH
4442: LD_VAR 0 2
4446: DIFF
4447: PUSH
4448: LD_VAR 0 4
4452: UNION
4453: PPUSH
4454: LD_STRING othernotJMM
4456: PPUSH
4457: CALL_OW 38
// end ; end_of_file
4461: LD_VAR 0 1
4465: RET
// export john , powell , roth , joan , bobby , cyrus , lisa , frank , markc , tim , denis , yamoko , gary , simms , brown , lucy , zbytekz11 ; export moji , mojivip , ostatnivip ; export mista , areas , pocetmist ; export moji_backup ; export function prepare_americans ; var tmp , tmp2 , tmp3 ; begin
4466: LD_INT 0
4468: PPUSH
4469: PPUSH
4470: PPUSH
4471: PPUSH
// changesidefog ( oth , al ) ;
4472: LD_EXP 3
4476: PPUSH
4477: LD_EXP 2
4481: PPUSH
4482: CALL_OW 343
// uc_side = am ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_EXP 1
4495: ST_TO_ADDR
// uc_nation = nation_american ;
4496: LD_ADDR_OWVAR 21
4500: PUSH
4501: LD_INT 1
4503: ST_TO_ADDR
// preparesoldier ( sex_male , ams00 ) ;
4504: LD_INT 1
4506: PPUSH
4507: LD_EXP 4
4511: PPUSH
4512: CALL_OW 381
// tmp = createhuman ;
4516: LD_ADDR_VAR 0 2
4520: PUSH
4521: CALL_OW 44
4525: ST_TO_ADDR
// placeunitxy ( tmp , 43 , 14 , false ) ;
4526: LD_VAR 0 2
4530: PPUSH
4531: LD_INT 43
4533: PPUSH
4534: LD_INT 14
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 48
// commoveunit ( tmp , ambunk0 ) ;
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 40
4551: PPUSH
4552: CALL_OW 112
// preparesoldier ( sex_male , ams01 ) ;
4556: LD_INT 1
4558: PPUSH
4559: LD_EXP 5
4563: PPUSH
4564: CALL_OW 381
// tmp = createhuman ;
4568: LD_ADDR_VAR 0 2
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// placeunitxy ( tmp , 93 , 17 , false ) ;
4578: LD_VAR 0 2
4582: PPUSH
4583: LD_INT 93
4585: PPUSH
4586: LD_INT 17
4588: PPUSH
4589: LD_INT 0
4591: PPUSH
4592: CALL_OW 48
// commoveunit ( tmp , ambunk1 ) ;
4596: LD_VAR 0 2
4600: PPUSH
4601: LD_INT 41
4603: PPUSH
4604: CALL_OW 112
// preparesoldier ( sex_male , ams02 ) ;
4608: LD_INT 1
4610: PPUSH
4611: LD_EXP 6
4615: PPUSH
4616: CALL_OW 381
// tmp = createhuman ;
4620: LD_ADDR_VAR 0 2
4624: PUSH
4625: CALL_OW 44
4629: ST_TO_ADDR
// placeunitxy ( tmp , 148 , 88 , false ) ;
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_INT 148
4637: PPUSH
4638: LD_INT 88
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 48
// commoveunit ( tmp , ambunk2 ) ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_INT 36
4655: PPUSH
4656: CALL_OW 112
// preparesoldier ( sex_male , ams03 ) ;
4660: LD_INT 1
4662: PPUSH
4663: LD_EXP 7
4667: PPUSH
4668: CALL_OW 381
// tmp = createhuman ;
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: CALL_OW 44
4681: ST_TO_ADDR
// placeunitxy ( tmp , 108 , 87 , false ) ;
4682: LD_VAR 0 2
4686: PPUSH
4687: LD_INT 108
4689: PPUSH
4690: LD_INT 87
4692: PPUSH
4693: LD_INT 0
4695: PPUSH
4696: CALL_OW 48
// commoveunit ( tmp , ambunk3 ) ;
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 33
4707: PPUSH
4708: CALL_OW 112
// preparesoldier ( sex_male , ams04 ) ;
4712: LD_INT 1
4714: PPUSH
4715: LD_EXP 8
4719: PPUSH
4720: CALL_OW 381
// tmp = createhuman ;
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: CALL_OW 44
4733: ST_TO_ADDR
// placeunitxy ( tmp , 46 , 73 , false ) ;
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_INT 46
4741: PPUSH
4742: LD_INT 73
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 48
// commoveunit ( tmp , ambunk4 ) ;
4752: LD_VAR 0 2
4756: PPUSH
4757: LD_INT 38
4759: PPUSH
4760: CALL_OW 112
// preparesoldier ( sex_male , ams05 ) ;
4764: LD_INT 1
4766: PPUSH
4767: LD_EXP 9
4771: PPUSH
4772: CALL_OW 381
// tmp = createhuman ;
4776: LD_ADDR_VAR 0 2
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// placeunitxy ( tmp , 48 , 54 , false ) ;
4786: LD_VAR 0 2
4790: PPUSH
4791: LD_INT 48
4793: PPUSH
4794: LD_INT 54
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 48
// commoveunit ( tmp , ambunk5 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_INT 28
4811: PPUSH
4812: CALL_OW 112
// preparesoldier ( sex_male , ams06 ) ;
4816: LD_INT 1
4818: PPUSH
4819: LD_EXP 10
4823: PPUSH
4824: CALL_OW 381
// tmp = createhuman ;
4828: LD_ADDR_VAR 0 2
4832: PUSH
4833: CALL_OW 44
4837: ST_TO_ADDR
// placeunitxy ( tmp , 46 , 44 , false ) ;
4838: LD_VAR 0 2
4842: PPUSH
4843: LD_INT 46
4845: PPUSH
4846: LD_INT 44
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 48
// commoveunit ( tmp , ambunk6 ) ;
4856: LD_VAR 0 2
4860: PPUSH
4861: LD_INT 31
4863: PPUSH
4864: CALL_OW 112
// vc_control = control_manual ;
4868: LD_ADDR_OWVAR 38
4872: PUSH
4873: LD_INT 1
4875: ST_TO_ADDR
// vc_engine = engine_siberite ;
4876: LD_ADDR_OWVAR 39
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// vc_chassis = amv0_ch ;
4884: LD_ADDR_OWVAR 37
4888: PUSH
4889: LD_EXP 11
4893: ST_TO_ADDR
// vc_weapon = amv0_wp ;
4894: LD_ADDR_OWVAR 40
4898: PUSH
4899: LD_EXP 12
4903: ST_TO_ADDR
// tmp = createvehicle ;
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: CALL_OW 45
4913: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
4914: LD_VAR 0 2
4918: PPUSH
4919: LD_INT 5
4921: PPUSH
4922: CALL_OW 233
// placeunitxy ( tmp , 131 , 61 , false ) ;
4926: LD_VAR 0 2
4930: PPUSH
4931: LD_INT 131
4933: PPUSH
4934: LD_INT 61
4936: PPUSH
4937: LD_INT 0
4939: PPUSH
4940: CALL_OW 48
// preparemechanic ( sex_male , amv0_drv ) ;
4944: LD_INT 1
4946: PPUSH
4947: LD_EXP 13
4951: PPUSH
4952: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
4956: CALL_OW 44
4960: PPUSH
4961: LD_VAR 0 2
4965: PPUSH
4966: CALL_OW 52
// comagressivemove ( tmp , 105 , 42 ) ;
4970: LD_VAR 0 2
4974: PPUSH
4975: LD_INT 105
4977: PPUSH
4978: LD_INT 42
4980: PPUSH
4981: CALL_OW 114
// addcomagressivemove ( tmp , 98 , 46 ) ;
4985: LD_VAR 0 2
4989: PPUSH
4990: LD_INT 98
4992: PPUSH
4993: LD_INT 46
4995: PPUSH
4996: CALL_OW 174
// addcomagressivemove ( tmp , 100 , 57 ) ;
5000: LD_VAR 0 2
5004: PPUSH
5005: LD_INT 100
5007: PPUSH
5008: LD_INT 57
5010: PPUSH
5011: CALL_OW 174
// addcomagressivemove ( tmp , 114 , 67 ) ;
5015: LD_VAR 0 2
5019: PPUSH
5020: LD_INT 114
5022: PPUSH
5023: LD_INT 67
5025: PPUSH
5026: CALL_OW 174
// addcomagressivemove ( tmp , 134 , 64 ) ;
5030: LD_VAR 0 2
5034: PPUSH
5035: LD_INT 134
5037: PPUSH
5038: LD_INT 64
5040: PPUSH
5041: CALL_OW 174
// addcomagressivemove ( tmp , 105 , 42 ) ;
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_INT 105
5052: PPUSH
5053: LD_INT 42
5055: PPUSH
5056: CALL_OW 174
// vc_control = control_manual ;
5060: LD_ADDR_OWVAR 38
5064: PUSH
5065: LD_INT 1
5067: ST_TO_ADDR
// vc_engine = engine_siberite ;
5068: LD_ADDR_OWVAR 39
5072: PUSH
5073: LD_INT 3
5075: ST_TO_ADDR
// vc_chassis = amv1_ch ;
5076: LD_ADDR_OWVAR 37
5080: PUSH
5081: LD_EXP 14
5085: ST_TO_ADDR
// vc_weapon = amv1_wp ;
5086: LD_ADDR_OWVAR 40
5090: PUSH
5091: LD_EXP 15
5095: ST_TO_ADDR
// tmp = createvehicle ;
5096: LD_ADDR_VAR 0 2
5100: PUSH
5101: CALL_OW 45
5105: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
5106: LD_VAR 0 2
5110: PPUSH
5111: LD_INT 5
5113: PPUSH
5114: CALL_OW 233
// placeunitxy ( tmp , 110 , 96 , false ) ;
5118: LD_VAR 0 2
5122: PPUSH
5123: LD_INT 110
5125: PPUSH
5126: LD_INT 96
5128: PPUSH
5129: LD_INT 0
5131: PPUSH
5132: CALL_OW 48
// preparemechanic ( sex_male , amv1_drv ) ;
5136: LD_INT 1
5138: PPUSH
5139: LD_EXP 16
5143: PPUSH
5144: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
5148: CALL_OW 44
5152: PPUSH
5153: LD_VAR 0 2
5157: PPUSH
5158: CALL_OW 52
// comagressivemove ( tmp , 91 , 87 ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_INT 91
5169: PPUSH
5170: LD_INT 87
5172: PPUSH
5173: CALL_OW 114
// addcomagressivemove ( tmp , 71 , 83 ) ;
5177: LD_VAR 0 2
5181: PPUSH
5182: LD_INT 71
5184: PPUSH
5185: LD_INT 83
5187: PPUSH
5188: CALL_OW 174
// addcomagressivemove ( tmp , 54 , 70 ) ;
5192: LD_VAR 0 2
5196: PPUSH
5197: LD_INT 54
5199: PPUSH
5200: LD_INT 70
5202: PPUSH
5203: CALL_OW 174
// addcomagressivemove ( tmp , 62 , 87 ) ;
5207: LD_VAR 0 2
5211: PPUSH
5212: LD_INT 62
5214: PPUSH
5215: LD_INT 87
5217: PPUSH
5218: CALL_OW 174
// addcomagressivemove ( tmp , 86 , 99 ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 86
5229: PPUSH
5230: LD_INT 99
5232: PPUSH
5233: CALL_OW 174
// addcomagressivemove ( tmp , 91 , 87 ) ;
5237: LD_VAR 0 2
5241: PPUSH
5242: LD_INT 91
5244: PPUSH
5245: LD_INT 87
5247: PPUSH
5248: CALL_OW 174
// preparehuman ( sex_female , class_sniper , amv2_cl ) ;
5252: LD_INT 2
5254: PPUSH
5255: LD_INT 5
5257: PPUSH
5258: LD_EXP 17
5262: PPUSH
5263: CALL_OW 380
// tmp = createhuman ;
5267: LD_ADDR_VAR 0 2
5271: PUSH
5272: CALL_OW 44
5276: ST_TO_ADDR
// placeunitxy ( tmp , 80 , 31 , false ) ;
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_INT 80
5284: PPUSH
5285: LD_INT 31
5287: PPUSH
5288: LD_INT 0
5290: PPUSH
5291: CALL_OW 48
// comhold ( tmp ) ;
5295: LD_VAR 0 2
5299: PPUSH
5300: CALL_OW 140
// uc_side = al ;
5304: LD_ADDR_OWVAR 20
5308: PUSH
5309: LD_EXP 2
5313: ST_TO_ADDR
// if checkcharacterset ( JMM ) then
5314: LD_STRING JMM
5316: PPUSH
5317: CALL_OW 29
5321: IFFALSE 5341
// john = createcharacterwithclass ( JMM , class_soldier ) else
5323: LD_ADDR_EXP 27
5327: PUSH
5328: LD_STRING JMM
5330: PPUSH
5331: LD_INT 1
5333: PPUSH
5334: CALL_OW 35
5338: ST_TO_ADDR
5339: GO 5354
// buildquery ( neny JMM , [ OK ] ) ;
5341: LD_STRING neny JMM
5343: PPUSH
5344: LD_STRING OK
5346: PUSH
5347: EMPTY
5348: LIST
5349: PPUSH
5350: CALL_OW 99
// roth = newcharacter ( Roth ) ;
5354: LD_ADDR_EXP 29
5358: PUSH
5359: LD_STRING Roth
5361: PPUSH
5362: CALL_OW 25
5366: ST_TO_ADDR
// if not roth then
5367: LD_EXP 29
5371: NOT
5372: IFFALSE 5387
// buildquery ( neny Roth , [ OK ] ) ;
5374: LD_STRING neny Roth
5376: PPUSH
5377: LD_STRING OK
5379: PUSH
5380: EMPTY
5381: LIST
5382: PPUSH
5383: CALL_OW 99
// uc_side = am ;
5387: LD_ADDR_OWVAR 20
5391: PUSH
5392: LD_EXP 1
5396: ST_TO_ADDR
// powell = newcharacter ( Powell ) ;
5397: LD_ADDR_EXP 28
5401: PUSH
5402: LD_STRING Powell
5404: PPUSH
5405: CALL_OW 25
5409: ST_TO_ADDR
// if not powell then
5410: LD_EXP 28
5414: NOT
5415: IFFALSE 5430
// buildquery ( neny Powell , [ OK ] ) ;
5417: LD_STRING neny Powell
5419: PPUSH
5420: LD_STRING OK
5422: PUSH
5423: EMPTY
5424: LIST
5425: PPUSH
5426: CALL_OW 99
// uc_side = oth ;
5430: LD_ADDR_OWVAR 20
5434: PUSH
5435: LD_EXP 3
5439: ST_TO_ADDR
// if not ( testvariable ( joan ) and testvariable ( bobby ) and testvariable ( cyrus ) and testvariable ( lisa ) and testvariable ( frank ) and testvariable ( cornell ) and testvariable ( brown ) and testvariable ( lucy ) and testvariable ( gladstone ) and testvariable ( denis ) and testvariable ( yamoko ) and testvariable ( gary ) and testvariable ( simms ) ) then
5440: LD_STRING joan
5442: PPUSH
5443: CALL_OW 27
5447: PUSH
5448: LD_STRING bobby
5450: PPUSH
5451: CALL_OW 27
5455: AND
5456: PUSH
5457: LD_STRING cyrus
5459: PPUSH
5460: CALL_OW 27
5464: AND
5465: PUSH
5466: LD_STRING lisa
5468: PPUSH
5469: CALL_OW 27
5473: AND
5474: PUSH
5475: LD_STRING frank
5477: PPUSH
5478: CALL_OW 27
5482: AND
5483: PUSH
5484: LD_STRING cornell
5486: PPUSH
5487: CALL_OW 27
5491: AND
5492: PUSH
5493: LD_STRING brown
5495: PPUSH
5496: CALL_OW 27
5500: AND
5501: PUSH
5502: LD_STRING lucy
5504: PPUSH
5505: CALL_OW 27
5509: AND
5510: PUSH
5511: LD_STRING gladstone
5513: PPUSH
5514: CALL_OW 27
5518: AND
5519: PUSH
5520: LD_STRING denis
5522: PPUSH
5523: CALL_OW 27
5527: AND
5528: PUSH
5529: LD_STRING yamoko
5531: PPUSH
5532: CALL_OW 27
5536: AND
5537: PUSH
5538: LD_STRING gary
5540: PPUSH
5541: CALL_OW 27
5545: AND
5546: PUSH
5547: LD_STRING simms
5549: PPUSH
5550: CALL_OW 27
5554: AND
5555: NOT
5556: IFFALSE 5565
// msg ( a co treba si pustit i to intro?!? ) ;
5558: LD_STRING a co treba si pustit i to intro?!?
5560: PPUSH
5561: CALL_OW 100
// tmp = loadvariable ( joan , - 1 ) ;
5565: LD_ADDR_VAR 0 2
5569: PUSH
5570: LD_STRING joan
5572: PPUSH
5573: LD_INT 1
5575: NEG
5576: PPUSH
5577: CALL_OW 30
5581: ST_TO_ADDR
// if tmp then
5582: LD_VAR 0 2
5586: IFFALSE 5653
// begin joan = createcharacter ( Joan ) ;
5588: LD_ADDR_EXP 30
5592: PUSH
5593: LD_STRING Joan
5595: PPUSH
5596: CALL_OW 34
5600: ST_TO_ADDR
// if tmp = 1 then
5601: LD_VAR 0 2
5605: PUSH
5606: LD_INT 1
5608: EQUAL
5609: IFFALSE 5632
// mojivip = mojivip ^ [ joan ] else
5611: LD_ADDR_EXP 45
5615: PUSH
5616: LD_EXP 45
5620: PUSH
5621: LD_EXP 30
5625: PUSH
5626: EMPTY
5627: LIST
5628: ADD
5629: ST_TO_ADDR
5630: GO 5651
// ostatnivip = ostatnivip ^ [ joan ] ;
5632: LD_ADDR_EXP 46
5636: PUSH
5637: LD_EXP 46
5641: PUSH
5642: LD_EXP 30
5646: PUSH
5647: EMPTY
5648: LIST
5649: ADD
5650: ST_TO_ADDR
// end else
5651: GO 5661
// joan = 0 ;
5653: LD_ADDR_EXP 30
5657: PUSH
5658: LD_INT 0
5660: ST_TO_ADDR
// tmp = loadvariable ( bobby , - 1 ) ;
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_STRING bobby
5668: PPUSH
5669: LD_INT 1
5671: NEG
5672: PPUSH
5673: CALL_OW 30
5677: ST_TO_ADDR
// if tmp then
5678: LD_VAR 0 2
5682: IFFALSE 5749
// begin bobby = createcharacter ( Bobby ) ;
5684: LD_ADDR_EXP 31
5688: PUSH
5689: LD_STRING Bobby
5691: PPUSH
5692: CALL_OW 34
5696: ST_TO_ADDR
// if tmp = 1 then
5697: LD_VAR 0 2
5701: PUSH
5702: LD_INT 1
5704: EQUAL
5705: IFFALSE 5728
// mojivip = mojivip ^ [ bobby ] else
5707: LD_ADDR_EXP 45
5711: PUSH
5712: LD_EXP 45
5716: PUSH
5717: LD_EXP 31
5721: PUSH
5722: EMPTY
5723: LIST
5724: ADD
5725: ST_TO_ADDR
5726: GO 5747
// ostatnivip = ostatnivip ^ [ bobby ] ;
5728: LD_ADDR_EXP 46
5732: PUSH
5733: LD_EXP 46
5737: PUSH
5738: LD_EXP 31
5742: PUSH
5743: EMPTY
5744: LIST
5745: ADD
5746: ST_TO_ADDR
// end else
5747: GO 5757
// bobby = 0 ;
5749: LD_ADDR_EXP 31
5753: PUSH
5754: LD_INT 0
5756: ST_TO_ADDR
// tmp = loadvariable ( cyrus , - 1 ) ;
5757: LD_ADDR_VAR 0 2
5761: PUSH
5762: LD_STRING cyrus
5764: PPUSH
5765: LD_INT 1
5767: NEG
5768: PPUSH
5769: CALL_OW 30
5773: ST_TO_ADDR
// if tmp then
5774: LD_VAR 0 2
5778: IFFALSE 5845
// begin cyrus = createcharacter ( Cyrus ) ;
5780: LD_ADDR_EXP 32
5784: PUSH
5785: LD_STRING Cyrus
5787: PPUSH
5788: CALL_OW 34
5792: ST_TO_ADDR
// if tmp = 1 then
5793: LD_VAR 0 2
5797: PUSH
5798: LD_INT 1
5800: EQUAL
5801: IFFALSE 5824
// mojivip = mojivip ^ [ cyrus ] else
5803: LD_ADDR_EXP 45
5807: PUSH
5808: LD_EXP 45
5812: PUSH
5813: LD_EXP 32
5817: PUSH
5818: EMPTY
5819: LIST
5820: ADD
5821: ST_TO_ADDR
5822: GO 5843
// ostatnivip = ostatnivip ^ [ cyrus ] ;
5824: LD_ADDR_EXP 46
5828: PUSH
5829: LD_EXP 46
5833: PUSH
5834: LD_EXP 32
5838: PUSH
5839: EMPTY
5840: LIST
5841: ADD
5842: ST_TO_ADDR
// end else
5843: GO 5853
// cyrus = 0 ;
5845: LD_ADDR_EXP 32
5849: PUSH
5850: LD_INT 0
5852: ST_TO_ADDR
// tmp = loadvariable ( lisa , - 1 ) ;
5853: LD_ADDR_VAR 0 2
5857: PUSH
5858: LD_STRING lisa
5860: PPUSH
5861: LD_INT 1
5863: NEG
5864: PPUSH
5865: CALL_OW 30
5869: ST_TO_ADDR
// if tmp then
5870: LD_VAR 0 2
5874: IFFALSE 5941
// begin lisa = createcharacter ( Lisa ) ;
5876: LD_ADDR_EXP 33
5880: PUSH
5881: LD_STRING Lisa
5883: PPUSH
5884: CALL_OW 34
5888: ST_TO_ADDR
// if tmp = 1 then
5889: LD_VAR 0 2
5893: PUSH
5894: LD_INT 1
5896: EQUAL
5897: IFFALSE 5920
// mojivip = mojivip ^ [ lisa ] else
5899: LD_ADDR_EXP 45
5903: PUSH
5904: LD_EXP 45
5908: PUSH
5909: LD_EXP 33
5913: PUSH
5914: EMPTY
5915: LIST
5916: ADD
5917: ST_TO_ADDR
5918: GO 5939
// ostatnivip = ostatnivip ^ [ lisa ] ;
5920: LD_ADDR_EXP 46
5924: PUSH
5925: LD_EXP 46
5929: PUSH
5930: LD_EXP 33
5934: PUSH
5935: EMPTY
5936: LIST
5937: ADD
5938: ST_TO_ADDR
// end else
5939: GO 5949
// lisa = 0 ;
5941: LD_ADDR_EXP 33
5945: PUSH
5946: LD_INT 0
5948: ST_TO_ADDR
// tmp = loadvariable ( frank , - 1 ) ;
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_STRING frank
5956: PPUSH
5957: LD_INT 1
5959: NEG
5960: PPUSH
5961: CALL_OW 30
5965: ST_TO_ADDR
// if tmp then
5966: LD_VAR 0 2
5970: IFFALSE 6037
// begin frank = createcharacter ( Frank ) ;
5972: LD_ADDR_EXP 34
5976: PUSH
5977: LD_STRING Frank
5979: PPUSH
5980: CALL_OW 34
5984: ST_TO_ADDR
// if tmp = 1 then
5985: LD_VAR 0 2
5989: PUSH
5990: LD_INT 1
5992: EQUAL
5993: IFFALSE 6016
// mojivip = mojivip ^ [ frank ] else
5995: LD_ADDR_EXP 45
5999: PUSH
6000: LD_EXP 45
6004: PUSH
6005: LD_EXP 34
6009: PUSH
6010: EMPTY
6011: LIST
6012: ADD
6013: ST_TO_ADDR
6014: GO 6035
// ostatnivip = ostatnivip ^ [ frank ] ;
6016: LD_ADDR_EXP 46
6020: PUSH
6021: LD_EXP 46
6025: PUSH
6026: LD_EXP 34
6030: PUSH
6031: EMPTY
6032: LIST
6033: ADD
6034: ST_TO_ADDR
// end else
6035: GO 6045
// frank = 0 ;
6037: LD_ADDR_EXP 34
6041: PUSH
6042: LD_INT 0
6044: ST_TO_ADDR
// tmp = loadvariable ( cornell , - 1 ) ;
6045: LD_ADDR_VAR 0 2
6049: PUSH
6050: LD_STRING cornell
6052: PPUSH
6053: LD_INT 1
6055: NEG
6056: PPUSH
6057: CALL_OW 30
6061: ST_TO_ADDR
// if tmp then
6062: LD_VAR 0 2
6066: IFFALSE 6133
// begin markc = createcharacter ( Cornell ) ;
6068: LD_ADDR_EXP 35
6072: PUSH
6073: LD_STRING Cornell
6075: PPUSH
6076: CALL_OW 34
6080: ST_TO_ADDR
// if tmp = 1 then
6081: LD_VAR 0 2
6085: PUSH
6086: LD_INT 1
6088: EQUAL
6089: IFFALSE 6112
// mojivip = mojivip ^ [ markc ] else
6091: LD_ADDR_EXP 45
6095: PUSH
6096: LD_EXP 45
6100: PUSH
6101: LD_EXP 35
6105: PUSH
6106: EMPTY
6107: LIST
6108: ADD
6109: ST_TO_ADDR
6110: GO 6131
// ostatnivip = ostatnivip ^ [ markc ] ;
6112: LD_ADDR_EXP 46
6116: PUSH
6117: LD_EXP 46
6121: PUSH
6122: LD_EXP 35
6126: PUSH
6127: EMPTY
6128: LIST
6129: ADD
6130: ST_TO_ADDR
// end else
6131: GO 6141
// markc = 0 ;
6133: LD_ADDR_EXP 35
6137: PUSH
6138: LD_INT 0
6140: ST_TO_ADDR
// tmp = loadvariable ( brown , - 1 ) ;
6141: LD_ADDR_VAR 0 2
6145: PUSH
6146: LD_STRING brown
6148: PPUSH
6149: LD_INT 1
6151: NEG
6152: PPUSH
6153: CALL_OW 30
6157: ST_TO_ADDR
// if tmp then
6158: LD_VAR 0 2
6162: IFFALSE 6229
// begin brown = createcharacter ( Brown ) ;
6164: LD_ADDR_EXP 41
6168: PUSH
6169: LD_STRING Brown
6171: PPUSH
6172: CALL_OW 34
6176: ST_TO_ADDR
// if tmp = 1 then
6177: LD_VAR 0 2
6181: PUSH
6182: LD_INT 1
6184: EQUAL
6185: IFFALSE 6208
// mojivip = mojivip ^ [ brown ] else
6187: LD_ADDR_EXP 45
6191: PUSH
6192: LD_EXP 45
6196: PUSH
6197: LD_EXP 41
6201: PUSH
6202: EMPTY
6203: LIST
6204: ADD
6205: ST_TO_ADDR
6206: GO 6227
// ostatnivip = ostatnivip ^ [ brown ] ;
6208: LD_ADDR_EXP 46
6212: PUSH
6213: LD_EXP 46
6217: PUSH
6218: LD_EXP 41
6222: PUSH
6223: EMPTY
6224: LIST
6225: ADD
6226: ST_TO_ADDR
// end else
6227: GO 6237
// brown = 0 ;
6229: LD_ADDR_EXP 41
6233: PUSH
6234: LD_INT 0
6236: ST_TO_ADDR
// tmp = loadvariable ( lucy , - 1 ) ;
6237: LD_ADDR_VAR 0 2
6241: PUSH
6242: LD_STRING lucy
6244: PPUSH
6245: LD_INT 1
6247: NEG
6248: PPUSH
6249: CALL_OW 30
6253: ST_TO_ADDR
// if tmp then
6254: LD_VAR 0 2
6258: IFFALSE 6325
// begin lucy = createcharacter ( Donaldson ) ;
6260: LD_ADDR_EXP 42
6264: PUSH
6265: LD_STRING Donaldson
6267: PPUSH
6268: CALL_OW 34
6272: ST_TO_ADDR
// if tmp = 1 then
6273: LD_VAR 0 2
6277: PUSH
6278: LD_INT 1
6280: EQUAL
6281: IFFALSE 6304
// mojivip = mojivip ^ [ lucy ] else
6283: LD_ADDR_EXP 45
6287: PUSH
6288: LD_EXP 45
6292: PUSH
6293: LD_EXP 42
6297: PUSH
6298: EMPTY
6299: LIST
6300: ADD
6301: ST_TO_ADDR
6302: GO 6323
// ostatnivip = ostatnivip ^ [ lucy ] ;
6304: LD_ADDR_EXP 46
6308: PUSH
6309: LD_EXP 46
6313: PUSH
6314: LD_EXP 42
6318: PUSH
6319: EMPTY
6320: LIST
6321: ADD
6322: ST_TO_ADDR
// end else
6323: GO 6333
// lucy = 0 ;
6325: LD_ADDR_EXP 42
6329: PUSH
6330: LD_INT 0
6332: ST_TO_ADDR
// tmp = loadvariable ( gladstone , - 1 ) ;
6333: LD_ADDR_VAR 0 2
6337: PUSH
6338: LD_STRING gladstone
6340: PPUSH
6341: LD_INT 1
6343: NEG
6344: PPUSH
6345: CALL_OW 30
6349: ST_TO_ADDR
// if tmp then
6350: LD_VAR 0 2
6354: IFFALSE 6421
// begin tim = createcharacter ( Gladstone ) ;
6356: LD_ADDR_EXP 36
6360: PUSH
6361: LD_STRING Gladstone
6363: PPUSH
6364: CALL_OW 34
6368: ST_TO_ADDR
// if tmp = 1 then
6369: LD_VAR 0 2
6373: PUSH
6374: LD_INT 1
6376: EQUAL
6377: IFFALSE 6400
// mojivip = mojivip ^ [ tim ] else
6379: LD_ADDR_EXP 45
6383: PUSH
6384: LD_EXP 45
6388: PUSH
6389: LD_EXP 36
6393: PUSH
6394: EMPTY
6395: LIST
6396: ADD
6397: ST_TO_ADDR
6398: GO 6419
// ostatnivip = ostatnivip ^ [ tim ] ;
6400: LD_ADDR_EXP 46
6404: PUSH
6405: LD_EXP 46
6409: PUSH
6410: LD_EXP 36
6414: PUSH
6415: EMPTY
6416: LIST
6417: ADD
6418: ST_TO_ADDR
// end else
6419: GO 6429
// tim = 0 ;
6421: LD_ADDR_EXP 36
6425: PUSH
6426: LD_INT 0
6428: ST_TO_ADDR
// tmp = loadvariable ( denis , - 1 ) ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_STRING denis
6436: PPUSH
6437: LD_INT 1
6439: NEG
6440: PPUSH
6441: CALL_OW 30
6445: ST_TO_ADDR
// if tmp then
6446: LD_VAR 0 2
6450: IFFALSE 6517
// begin denis = createcharacter ( Denis ) ;
6452: LD_ADDR_EXP 37
6456: PUSH
6457: LD_STRING Denis
6459: PPUSH
6460: CALL_OW 34
6464: ST_TO_ADDR
// if tmp = 1 then
6465: LD_VAR 0 2
6469: PUSH
6470: LD_INT 1
6472: EQUAL
6473: IFFALSE 6496
// mojivip = mojivip ^ [ denis ] else
6475: LD_ADDR_EXP 45
6479: PUSH
6480: LD_EXP 45
6484: PUSH
6485: LD_EXP 37
6489: PUSH
6490: EMPTY
6491: LIST
6492: ADD
6493: ST_TO_ADDR
6494: GO 6515
// ostatnivip = ostatnivip ^ [ denis ] ;
6496: LD_ADDR_EXP 46
6500: PUSH
6501: LD_EXP 46
6505: PUSH
6506: LD_EXP 37
6510: PUSH
6511: EMPTY
6512: LIST
6513: ADD
6514: ST_TO_ADDR
// end else
6515: GO 6525
// denis = 0 ;
6517: LD_ADDR_EXP 37
6521: PUSH
6522: LD_INT 0
6524: ST_TO_ADDR
// tmp = loadvariable ( yamoko , - 1 ) ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: LD_STRING yamoko
6532: PPUSH
6533: LD_INT 1
6535: NEG
6536: PPUSH
6537: CALL_OW 30
6541: ST_TO_ADDR
// if tmp then
6542: LD_VAR 0 2
6546: IFFALSE 6613
// begin yamoko = createcharacter ( Yamoko ) ;
6548: LD_ADDR_EXP 38
6552: PUSH
6553: LD_STRING Yamoko
6555: PPUSH
6556: CALL_OW 34
6560: ST_TO_ADDR
// if tmp = 1 then
6561: LD_VAR 0 2
6565: PUSH
6566: LD_INT 1
6568: EQUAL
6569: IFFALSE 6592
// mojivip = mojivip ^ [ yamoko ] else
6571: LD_ADDR_EXP 45
6575: PUSH
6576: LD_EXP 45
6580: PUSH
6581: LD_EXP 38
6585: PUSH
6586: EMPTY
6587: LIST
6588: ADD
6589: ST_TO_ADDR
6590: GO 6611
// ostatnivip = ostatnivip ^ [ yamoko ] ;
6592: LD_ADDR_EXP 46
6596: PUSH
6597: LD_EXP 46
6601: PUSH
6602: LD_EXP 38
6606: PUSH
6607: EMPTY
6608: LIST
6609: ADD
6610: ST_TO_ADDR
// end else
6611: GO 6621
// yamoko = 0 ;
6613: LD_ADDR_EXP 38
6617: PUSH
6618: LD_INT 0
6620: ST_TO_ADDR
// tmp = loadvariable ( gary , - 1 ) ;
6621: LD_ADDR_VAR 0 2
6625: PUSH
6626: LD_STRING gary
6628: PPUSH
6629: LD_INT 1
6631: NEG
6632: PPUSH
6633: CALL_OW 30
6637: ST_TO_ADDR
// if tmp then
6638: LD_VAR 0 2
6642: IFFALSE 6709
// begin gary = createcharacter ( Gary ) ;
6644: LD_ADDR_EXP 39
6648: PUSH
6649: LD_STRING Gary
6651: PPUSH
6652: CALL_OW 34
6656: ST_TO_ADDR
// if tmp = 1 then
6657: LD_VAR 0 2
6661: PUSH
6662: LD_INT 1
6664: EQUAL
6665: IFFALSE 6688
// mojivip = mojivip ^ [ gary ] else
6667: LD_ADDR_EXP 45
6671: PUSH
6672: LD_EXP 45
6676: PUSH
6677: LD_EXP 39
6681: PUSH
6682: EMPTY
6683: LIST
6684: ADD
6685: ST_TO_ADDR
6686: GO 6707
// ostatnivip = ostatnivip ^ [ gary ] ;
6688: LD_ADDR_EXP 46
6692: PUSH
6693: LD_EXP 46
6697: PUSH
6698: LD_EXP 39
6702: PUSH
6703: EMPTY
6704: LIST
6705: ADD
6706: ST_TO_ADDR
// end else
6707: GO 6717
// gary = 0 ;
6709: LD_ADDR_EXP 39
6713: PUSH
6714: LD_INT 0
6716: ST_TO_ADDR
// tmp = loadvariable ( simms , - 1 ) ;
6717: LD_ADDR_VAR 0 2
6721: PUSH
6722: LD_STRING simms
6724: PPUSH
6725: LD_INT 1
6727: NEG
6728: PPUSH
6729: CALL_OW 30
6733: ST_TO_ADDR
// if tmp then
6734: LD_VAR 0 2
6738: IFFALSE 6805
// begin simms = createcharacter ( Simms ) ;
6740: LD_ADDR_EXP 40
6744: PUSH
6745: LD_STRING Simms
6747: PPUSH
6748: CALL_OW 34
6752: ST_TO_ADDR
// if tmp = 1 then
6753: LD_VAR 0 2
6757: PUSH
6758: LD_INT 1
6760: EQUAL
6761: IFFALSE 6784
// mojivip = mojivip ^ [ simms ] else
6763: LD_ADDR_EXP 45
6767: PUSH
6768: LD_EXP 45
6772: PUSH
6773: LD_EXP 40
6777: PUSH
6778: EMPTY
6779: LIST
6780: ADD
6781: ST_TO_ADDR
6782: GO 6803
// ostatnivip = ostatnivip ^ [ simms ] ;
6784: LD_ADDR_EXP 46
6788: PUSH
6789: LD_EXP 46
6793: PUSH
6794: LD_EXP 40
6798: PUSH
6799: EMPTY
6800: LIST
6801: ADD
6802: ST_TO_ADDR
// end else
6803: GO 6813
// simms = 0 ;
6805: LD_ADDR_EXP 40
6809: PUSH
6810: LD_INT 0
6812: ST_TO_ADDR
// if not testvariable ( mojiam12a_c ) then
6813: LD_STRING mojiam12a_c
6815: PPUSH
6816: CALL_OW 27
6820: NOT
6821: IFFALSE 6838
// buildquery ( a co intro?!? (neny mojiam12a_c) , [ OK ] ) else
6823: LD_STRING a co intro?!? (neny mojiam12a_c)
6825: PPUSH
6826: LD_STRING OK
6828: PUSH
6829: EMPTY
6830: LIST
6831: PPUSH
6832: CALL_OW 99
6836: GO 6883
// begin tmp2 = loadvariable ( mojiam12a_c , - 1 ) ;
6838: LD_ADDR_VAR 0 3
6842: PUSH
6843: LD_STRING mojiam12a_c
6845: PPUSH
6846: LD_INT 1
6848: NEG
6849: PPUSH
6850: CALL_OW 30
6854: ST_TO_ADDR
// if tmp2 and checkcharacterset ( mojiam12a ) then
6855: LD_VAR 0 3
6859: PUSH
6860: LD_STRING mojiam12a
6862: PPUSH
6863: CALL_OW 29
6867: AND
6868: IFFALSE 6883
// moji = createcharacterset ( mojiam12a ) ;
6870: LD_ADDR_EXP 44
6874: PUSH
6875: LD_STRING mojiam12a
6877: PPUSH
6878: CALL_OW 31
6882: ST_TO_ADDR
// end ; disable ( 03 ) ;
6883: LD_INT 3
6885: DISABLE_MARKED
// takoviti = mojivip ^ moji ^ ostatnivip ;
6886: LD_ADDR_EXP 26
6890: PUSH
6891: LD_EXP 45
6895: PUSH
6896: LD_EXP 44
6900: ADD
6901: PUSH
6902: LD_EXP 46
6906: ADD
6907: ST_TO_ADDR
// moji_backup = mojivip ^ moji ;
6908: LD_ADDR_EXP 50
6912: PUSH
6913: LD_EXP 45
6917: PUSH
6918: LD_EXP 44
6922: ADD
6923: ST_TO_ADDR
// tmp2 = pocetmist - takoviti ;
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_EXP 49
6933: PUSH
6934: LD_EXP 26
6938: MINUS
6939: ST_TO_ADDR
// for tmp = 1 to tmp2 do
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_VAR 0 3
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7029
// begin tmp3 = rand ( 1 , 2 ) ;
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: LD_INT 1
6965: PPUSH
6966: LD_INT 2
6968: PPUSH
6969: CALL_OW 12
6973: ST_TO_ADDR
// preparehuman ( rand ( 1 , 2 ) , [ class_soldier , class_scientistic ] [ tmp3 ] , 6 ) ;
6974: LD_INT 1
6976: PPUSH
6977: LD_INT 2
6979: PPUSH
6980: CALL_OW 12
6984: PPUSH
6985: LD_INT 1
6987: PUSH
6988: LD_INT 4
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_VAR 0 4
6999: ARRAY
7000: PPUSH
7001: LD_INT 6
7003: PPUSH
7004: CALL_OW 380
// takoviti = takoviti ^ [ createhuman ] ;
7008: LD_ADDR_EXP 26
7012: PUSH
7013: LD_EXP 26
7017: PUSH
7018: CALL_OW 44
7022: PUSH
7023: EMPTY
7024: LIST
7025: ADD
7026: ST_TO_ADDR
// end ;
7027: GO 6955
7029: POP
7030: POP
// if debug then
7031: LD_EXP 19
7035: IFFALSE 7068
// begin debug_strings = [ moji , mojivip , ostatnivip , takoviti ] ;
7037: LD_ADDR_OWVAR 48
7041: PUSH
7042: LD_EXP 44
7046: PUSH
7047: LD_EXP 45
7051: PUSH
7052: LD_EXP 46
7056: PUSH
7057: LD_EXP 26
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: ST_TO_ADDR
// end ; comhold ( takoviti ) ;
7068: LD_EXP 26
7072: PPUSH
7073: CALL_OW 140
// placeunitxy ( john , 115 , 14 , false ) ;
7077: LD_EXP 27
7081: PPUSH
7082: LD_INT 115
7084: PPUSH
7085: LD_INT 14
7087: PPUSH
7088: LD_INT 0
7090: PPUSH
7091: CALL_OW 48
// placeunitxy ( roth , 118 , 14 , false ) ;
7095: LD_EXP 29
7099: PPUSH
7100: LD_INT 118
7102: PPUSH
7103: LD_INT 14
7105: PPUSH
7106: LD_INT 0
7108: PPUSH
7109: CALL_OW 48
// comhold ( [ john , roth ] ) ;
7113: LD_EXP 27
7117: PUSH
7118: LD_EXP 29
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PPUSH
7127: CALL_OW 140
// centernowonunits ( [ john , roth ] ) ;
7131: LD_EXP 27
7135: PUSH
7136: LD_EXP 29
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PPUSH
7145: CALL_OW 87
// interface_hidden = true ;
7149: LD_ADDR_OWVAR 54
7153: PUSH
7154: LD_INT 1
7156: ST_TO_ADDR
// dialogueon ;
7157: CALL_OW 6
// dwait ( 0 0$0.5 ) ;
7161: LD_INT 18
7163: PPUSH
7164: CALL_OW 68
// say ( john , D1-JMM-1 ) ;
7168: LD_EXP 27
7172: PPUSH
7173: LD_STRING D1-JMM-1
7175: PPUSH
7176: CALL_OW 88
// say ( roth , D1-Roth-1 ) ;
7180: LD_EXP 29
7184: PPUSH
7185: LD_STRING D1-Roth-1
7187: PPUSH
7188: CALL_OW 88
// say ( john , D1-JMM-2 ) ;
7192: LD_EXP 27
7196: PPUSH
7197: LD_STRING D1-JMM-2
7199: PPUSH
7200: CALL_OW 88
// say ( roth , D1-Roth-2 ) ;
7204: LD_EXP 29
7208: PPUSH
7209: LD_STRING D1-Roth-2
7211: PPUSH
7212: CALL_OW 88
// say ( john , D1-JMM-3 ) ;
7216: LD_EXP 27
7220: PPUSH
7221: LD_STRING D1-JMM-3
7223: PPUSH
7224: CALL_OW 88
// say ( roth , D1-Roth-3 ) ;
7228: LD_EXP 29
7232: PPUSH
7233: LD_STRING D1-Roth-3
7235: PPUSH
7236: CALL_OW 88
// settech ( tech_partinvis , al , state_researched ) ;
7240: LD_INT 16
7242: PPUSH
7243: LD_EXP 2
7247: PPUSH
7248: LD_INT 2
7250: PPUSH
7251: CALL_OW 322
// dialogueoff ;
7255: CALL_OW 7
// cominvisible ( roth ) ;
7259: LD_EXP 29
7263: PPUSH
7264: CALL_OW 152
// wait ( 0 0$1.5 ) ;
7268: LD_INT 52
7270: PPUSH
7271: CALL_OW 67
// dialogueon ;
7275: CALL_OW 6
// say ( john , D1-JMM-4 ) ;
7279: LD_EXP 27
7283: PPUSH
7284: LD_STRING D1-JMM-4
7286: PPUSH
7287: CALL_OW 88
// dialogueoff ;
7291: CALL_OW 7
// comstop ( roth ) ;
7295: LD_EXP 29
7299: PPUSH
7300: CALL_OW 141
// wait ( 5 ) ;
7304: LD_INT 5
7306: PPUSH
7307: CALL_OW 67
// dialogueon ;
7311: CALL_OW 6
// say ( john , D1-JMM-4a ) ;
7315: LD_EXP 27
7319: PPUSH
7320: LD_STRING D1-JMM-4a
7322: PPUSH
7323: CALL_OW 88
// say ( roth , D1-Roth-4 ) ;
7327: LD_EXP 29
7331: PPUSH
7332: LD_STRING D1-Roth-4
7334: PPUSH
7335: CALL_OW 88
// say ( john , D1-JMM-5 ) ;
7339: LD_EXP 27
7343: PPUSH
7344: LD_STRING D1-JMM-5
7346: PPUSH
7347: CALL_OW 88
// say ( roth , D1-Roth-5 ) ;
7351: LD_EXP 29
7355: PPUSH
7356: LD_STRING D1-Roth-5
7358: PPUSH
7359: CALL_OW 88
// say ( john , D1-JMM-6 ) ;
7363: LD_EXP 27
7367: PPUSH
7368: LD_STRING D1-JMM-6
7370: PPUSH
7371: CALL_OW 88
// say ( roth , D1-Roth-6 ) ;
7375: LD_EXP 29
7379: PPUSH
7380: LD_STRING D1-Roth-6
7382: PPUSH
7383: CALL_OW 88
// say ( john , D1-JMM-7 ) ;
7387: LD_EXP 27
7391: PPUSH
7392: LD_STRING D1-JMM-7
7394: PPUSH
7395: CALL_OW 88
// say ( roth , D1-Roth-7 ) ;
7399: LD_EXP 29
7403: PPUSH
7404: LD_STRING D1-Roth-7
7406: PPUSH
7407: CALL_OW 88
// dialogueoff ;
7411: CALL_OW 7
// placeunitxy ( powell , 115 , 27 , false ) ;
7415: LD_EXP 28
7419: PPUSH
7420: LD_INT 115
7422: PPUSH
7423: LD_INT 27
7425: PPUSH
7426: LD_INT 0
7428: PPUSH
7429: CALL_OW 48
// commovexy ( powell , 115 , 23 ) ;
7433: LD_EXP 28
7437: PPUSH
7438: LD_INT 115
7440: PPUSH
7441: LD_INT 23
7443: PPUSH
7444: CALL_OW 111
// while not isinarea ( powell , powpl ) do
7448: LD_EXP 28
7452: PPUSH
7453: LD_INT 15
7455: PPUSH
7456: CALL_OW 308
7460: NOT
7461: IFFALSE 7472
// wait ( 0 0$0.25 ) ;
7463: LD_INT 9
7465: PPUSH
7466: CALL_OW 67
7470: GO 7448
// dialogueon ;
7472: CALL_OW 6
// say ( powell , D1-Pow-7 ) ;
7476: LD_EXP 28
7480: PPUSH
7481: LD_STRING D1-Pow-7
7483: PPUSH
7484: CALL_OW 88
// say ( john , D1-JMM-8 ) ;
7488: LD_EXP 27
7492: PPUSH
7493: LD_STRING D1-JMM-8
7495: PPUSH
7496: CALL_OW 88
// say ( powell , D1-Pow-8 ) ;
7500: LD_EXP 28
7504: PPUSH
7505: LD_STRING D1-Pow-8
7507: PPUSH
7508: CALL_OW 88
// say ( john , D1-JMM-9 ) ;
7512: LD_EXP 27
7516: PPUSH
7517: LD_STRING D1-JMM-9
7519: PPUSH
7520: CALL_OW 88
// dialogueoff ;
7524: CALL_OW 7
// ingameon ;
7528: CALL_OW 8
// commovexy ( powell , 115 , 29 ) ;
7532: LD_EXP 28
7536: PPUSH
7537: LD_INT 115
7539: PPUSH
7540: LD_INT 29
7542: PPUSH
7543: CALL_OW 111
// while not isinarea ( powell , powpl2 ) do
7547: LD_EXP 28
7551: PPUSH
7552: LD_INT 16
7554: PPUSH
7555: CALL_OW 308
7559: NOT
7560: IFFALSE 7571
// wait ( 0 0$0.25 ) ;
7562: LD_INT 9
7564: PPUSH
7565: CALL_OW 67
7569: GO 7547
// ingameoff ;
7571: CALL_OW 9
// interface_hidden = true ;
7575: LD_ADDR_OWVAR 54
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// dialogueon ;
7583: CALL_OW 6
// sayradio ( powell , D1-Pow-9 ) ;
7587: LD_EXP 28
7591: PPUSH
7592: LD_STRING D1-Pow-9
7594: PPUSH
7595: CALL_OW 94
// setside ( [ roth ] , oth ) ;
7599: LD_EXP 29
7603: PUSH
7604: EMPTY
7605: LIST
7606: PPUSH
7607: LD_EXP 3
7611: PPUSH
7612: CALL_OW 235
// comhold ( roth ) ;
7616: LD_EXP 29
7620: PPUSH
7621: CALL_OW 140
// if joan and ( not ( joan in mojivip ) ) then
7625: LD_EXP 30
7629: PUSH
7630: LD_EXP 30
7634: PUSH
7635: LD_EXP 45
7639: IN
7640: NOT
7641: AND
7642: IFFALSE 7656
// sayradio ( joan , D1-Joan-9 ) ;
7644: LD_EXP 30
7648: PPUSH
7649: LD_STRING D1-Joan-9
7651: PPUSH
7652: CALL_OW 94
// say ( roth , D1-Roth-9 ) ;
7656: LD_EXP 29
7660: PPUSH
7661: LD_STRING D1-Roth-9
7663: PPUSH
7664: CALL_OW 88
// say ( john , D1-JMM-10 ) ;
7668: LD_EXP 27
7672: PPUSH
7673: LD_STRING D1-JMM-10
7675: PPUSH
7676: CALL_OW 88
// dialogueoff ;
7680: CALL_OW 7
// removeunit ( powell ) ;
7684: LD_EXP 28
7688: PPUSH
7689: CALL_OW 64
// interface_hidden = false ;
7693: LD_ADDR_OWVAR 54
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// setattitude ( al , am , att_enemy , true ) ;
7701: LD_EXP 2
7705: PPUSH
7706: LD_EXP 1
7710: PPUSH
7711: LD_INT 2
7713: PPUSH
7714: LD_INT 1
7716: PPUSH
7717: CALL_OW 80
// for tmp = 1 to pocetmist do
7721: LD_ADDR_VAR 0 2
7725: PUSH
7726: DOUBLE
7727: LD_INT 1
7729: DEC
7730: ST_TO_ADDR
7731: LD_EXP 49
7735: PUSH
7736: FOR_TO
7737: IFFALSE 7804
// begin placeunitxyr ( takoviti [ tmp ] , mista [ tmp ] [ 1 ] , mista [ tmp ] [ 2 ] , 1 , false ) ;
7739: LD_EXP 26
7743: PUSH
7744: LD_VAR 0 2
7748: ARRAY
7749: PPUSH
7750: LD_EXP 47
7754: PUSH
7755: LD_VAR 0 2
7759: ARRAY
7760: PUSH
7761: LD_INT 1
7763: ARRAY
7764: PPUSH
7765: LD_EXP 47
7769: PUSH
7770: LD_VAR 0 2
7774: ARRAY
7775: PUSH
7776: LD_INT 2
7778: ARRAY
7779: PPUSH
7780: LD_INT 1
7782: PPUSH
7783: LD_INT 0
7785: PPUSH
7786: CALL_OW 50
// settag ( tmp , 1 ) ;
7790: LD_VAR 0 2
7794: PPUSH
7795: LD_INT 1
7797: PPUSH
7798: CALL_OW 109
// end ;
7802: GO 7736
7804: POP
7805: POP
// vesel = 0 ;
7806: LD_ADDR_LOC 7
7810: PUSH
7811: LD_INT 0
7813: ST_TO_ADDR
// joanmet = false ;
7814: LD_ADDR_EXP 51
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// frankmet = false ;
7822: LD_ADDR_EXP 52
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// lisamet = false ;
7830: LD_ADDR_EXP 53
7834: PUSH
7835: LD_INT 0
7837: ST_TO_ADDR
// joan_joined = false ;
7838: LD_ADDR_EXP 54
7842: PUSH
7843: LD_INT 0
7845: ST_TO_ADDR
// enable ( 03 ) ;
7846: LD_INT 3
7848: ENABLE_MARKED
// saveforquickrestart ;
7849: CALL_OW 22
// wait ( 2 ) ;
7853: LD_INT 2
7855: PPUSH
7856: CALL_OW 67
// changemissionobjectives ( M1 ) ;
7860: LD_STRING M1
7862: PPUSH
7863: CALL_OW 337
// setareamapshow ( vychod , 1 ) ;
7867: LD_INT 13
7869: PPUSH
7870: LD_INT 1
7872: PPUSH
7873: CALL_OW 424
// john_vychod = true ;
7877: LD_ADDR_EXP 18
7881: PUSH
7882: LD_INT 1
7884: ST_TO_ADDR
// hint ( Invisibility ) ;
7885: LD_STRING Invisibility
7887: PPUSH
7888: CALL_OW 339
// end ;
7892: LD_VAR 0 1
7896: RET
// var tmpar , vesel ; function isinareaex ( un , lias ) ; var tmp , pm ; begin
7897: LD_INT 0
7899: PPUSH
7900: PPUSH
7901: PPUSH
// result = 0 ;
7902: LD_ADDR_VAR 0 3
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// pm = 0 + lias ;
7910: LD_ADDR_VAR 0 5
7914: PUSH
7915: LD_INT 0
7917: PUSH
7918: LD_VAR 0 2
7922: PLUS
7923: ST_TO_ADDR
// for tmp = 1 to pm do
7924: LD_ADDR_VAR 0 4
7928: PUSH
7929: DOUBLE
7930: LD_INT 1
7932: DEC
7933: ST_TO_ADDR
7934: LD_VAR 0 5
7938: PUSH
7939: FOR_TO
7940: IFFALSE 7990
// if isinarea ( un , lias [ tmp ] ) then
7942: LD_VAR 0 1
7946: PPUSH
7947: LD_VAR 0 2
7951: PUSH
7952: LD_VAR 0 4
7956: ARRAY
7957: PPUSH
7958: CALL_OW 308
7962: IFFALSE 7988
// begin tmpar = tmp ;
7964: LD_ADDR_LOC 6
7968: PUSH
7969: LD_VAR 0 4
7973: ST_TO_ADDR
// result = tmp ;
7974: LD_ADDR_VAR 0 3
7978: PUSH
7979: LD_VAR 0 4
7983: ST_TO_ADDR
// exit ;
7984: POP
7985: POP
7986: GO 7992
// end ;
7988: GO 7939
7990: POP
7991: POP
// end ;
7992: LD_VAR 0 3
7996: RET
// every 0 0$0.125 + 2 trigger vesel do
7997: LD_LOC 7
8001: IFFALSE 8058
8003: GO 8005
8005: DISABLE
// begin if not isinarea ( john , areas [ vesel ] ) then
8006: LD_EXP 27
8010: PPUSH
8011: LD_EXP 48
8015: PUSH
8016: LD_LOC 7
8020: ARRAY
8021: PPUSH
8022: CALL_OW 308
8026: NOT
8027: IFFALSE 8057
// begin setside ( takoviti [ vesel ] , am ) ;
8029: LD_EXP 26
8033: PUSH
8034: LD_LOC 7
8038: ARRAY
8039: PPUSH
8040: LD_EXP 1
8044: PPUSH
8045: CALL_OW 235
// vesel = 0 ;
8049: LD_ADDR_LOC 7
8053: PUSH
8054: LD_INT 0
8056: ST_TO_ADDR
// end ; enable ;
8057: ENABLE
// end ;
8058: END
// export joanmet , frankmet , lisamet ; export joan_joined ; every 0 0$0.5 + 1 trigger isinareaex ( john , areas ) marked 03 do
8059: LD_EXP 27
8063: PPUSH
8064: LD_EXP 48
8068: PPUSH
8069: CALL 7897 0 2
8073: IFFALSE 10414
8075: GO 8077
8077: DISABLE
// begin if gettag ( tmpar ) = - 1 then
8078: LD_LOC 6
8082: PPUSH
8083: CALL_OW 110
8087: PUSH
8088: LD_INT 1
8090: NEG
8091: EQUAL
8092: IFFALSE 8097
// begin enable ;
8094: ENABLE
// exit ;
8095: GO 10414
// end ; case takoviti [ tmpar ] of joan :
8097: LD_EXP 26
8101: PUSH
8102: LD_LOC 6
8106: ARRAY
8107: PUSH
8108: LD_EXP 30
8112: DOUBLE
8113: EQUAL
8114: IFTRUE 8118
8116: GO 8339
8118: POP
// if gettag ( tmpar ) = 1 then
8119: LD_LOC 6
8123: PPUSH
8124: CALL_OW 110
8128: PUSH
8129: LD_INT 1
8131: EQUAL
8132: IFFALSE 8337
// begin settag ( tmpar , 2 ) ;
8134: LD_LOC 6
8138: PPUSH
8139: LD_INT 2
8141: PPUSH
8142: CALL_OW 109
// joan_joined = true ;
8146: LD_ADDR_EXP 54
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// if joan in mojivip then
8154: LD_EXP 30
8158: PUSH
8159: LD_EXP 45
8163: IN
8164: IFFALSE 8228
// begin setside ( joan , al ) ;
8166: LD_EXP 30
8170: PPUSH
8171: LD_EXP 2
8175: PPUSH
8176: CALL_OW 235
// contacted = contacted + 1 ;
8180: LD_ADDR_EXP 24
8184: PUSH
8185: LD_EXP 24
8189: PUSH
8190: LD_INT 1
8192: PLUS
8193: ST_TO_ADDR
// dialogueon ;
8194: CALL_OW 6
// say ( joan , D3-Joan-Joan-1 ) ;
8198: LD_EXP 30
8202: PPUSH
8203: LD_STRING D3-Joan-Joan-1
8205: PPUSH
8206: CALL_OW 88
// say ( john , D3-Joan-JMM-1 ) ;
8210: LD_EXP 27
8214: PPUSH
8215: LD_STRING D3-Joan-JMM-1
8217: PPUSH
8218: CALL_OW 88
// dialogueoff ;
8222: CALL_OW 7
// end else
8226: GO 8337
// begin joanmet = true ;
8228: LD_ADDR_EXP 51
8232: PUSH
8233: LD_INT 1
8235: ST_TO_ADDR
// dialogueon ;
8236: CALL_OW 6
// say ( joan , D4-Joan-Joan-1 ) ;
8240: LD_EXP 30
8244: PPUSH
8245: LD_STRING D4-Joan-Joan-1
8247: PPUSH
8248: CALL_OW 88
// say ( john , D4-Joan-JMM-1 ) ;
8252: LD_EXP 27
8256: PPUSH
8257: LD_STRING D4-Joan-JMM-1
8259: PPUSH
8260: CALL_OW 88
// say ( joan , D4-Joan-Joan-2 ) ;
8264: LD_EXP 30
8268: PPUSH
8269: LD_STRING D4-Joan-Joan-2
8271: PPUSH
8272: CALL_OW 88
// say ( john , D4-Joan-JMM-2 ) ;
8276: LD_EXP 27
8280: PPUSH
8281: LD_STRING D4-Joan-JMM-2
8283: PPUSH
8284: CALL_OW 88
// say ( joan , D4-Joan-Joan-3 ) ;
8288: LD_EXP 30
8292: PPUSH
8293: LD_STRING D4-Joan-Joan-3
8295: PPUSH
8296: CALL_OW 88
// dialogueoff ;
8300: CALL_OW 7
// setside ( joan , al ) ;
8304: LD_EXP 30
8308: PPUSH
8309: LD_EXP 2
8313: PPUSH
8314: CALL_OW 235
// mojivip = mojivip ^ [ joan ] ;
8318: LD_ADDR_EXP 45
8322: PUSH
8323: LD_EXP 45
8327: PUSH
8328: LD_EXP 30
8332: PUSH
8333: EMPTY
8334: LIST
8335: ADD
8336: ST_TO_ADDR
// end ; end ; bobby :
8337: GO 10413
8339: LD_EXP 31
8343: DOUBLE
8344: EQUAL
8345: IFTRUE 8349
8347: GO 8507
8349: POP
// if gettag ( tmpar ) = 1 then
8350: LD_LOC 6
8354: PPUSH
8355: CALL_OW 110
8359: PUSH
8360: LD_INT 1
8362: EQUAL
8363: IFFALSE 8505
// begin settag ( tmpar , 2 ) ;
8365: LD_LOC 6
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 109
// if bobby in mojivip then
8377: LD_EXP 31
8381: PUSH
8382: LD_EXP 45
8386: IN
8387: IFFALSE 8451
// begin setside ( bobby , al ) ;
8389: LD_EXP 31
8393: PPUSH
8394: LD_EXP 2
8398: PPUSH
8399: CALL_OW 235
// contacted = contacted + 1 ;
8403: LD_ADDR_EXP 24
8407: PUSH
8408: LD_EXP 24
8412: PUSH
8413: LD_INT 1
8415: PLUS
8416: ST_TO_ADDR
// dialogueon ;
8417: CALL_OW 6
// say ( bobby , D3-Bobby-Bobby-1 ) ;
8421: LD_EXP 31
8425: PPUSH
8426: LD_STRING D3-Bobby-Bobby-1
8428: PPUSH
8429: CALL_OW 88
// say ( john , D3-Bobby-JMM-1 ) ;
8433: LD_EXP 27
8437: PPUSH
8438: LD_STRING D3-Bobby-JMM-1
8440: PPUSH
8441: CALL_OW 88
// dialogueoff ;
8445: CALL_OW 7
// end else
8449: GO 8505
// begin vesel = tmpar ;
8451: LD_ADDR_LOC 7
8455: PUSH
8456: LD_LOC 6
8460: ST_TO_ADDR
// dialogueon ;
8461: CALL_OW 6
// say ( bobby , D4-Bobby-Bobby-1 ) ;
8465: LD_EXP 31
8469: PPUSH
8470: LD_STRING D4-Bobby-Bobby-1
8472: PPUSH
8473: CALL_OW 88
// say ( john , D4-Bobby-JMM-1 ) ;
8477: LD_EXP 27
8481: PPUSH
8482: LD_STRING D4-Bobby-JMM-1
8484: PPUSH
8485: CALL_OW 88
// say ( bobby , D4-Bobby-Bobby-2 ) ;
8489: LD_EXP 31
8493: PPUSH
8494: LD_STRING D4-Bobby-Bobby-2
8496: PPUSH
8497: CALL_OW 88
// dialogueoff ;
8501: CALL_OW 7
// end ; end ; cyrus :
8505: GO 10413
8507: LD_EXP 32
8511: DOUBLE
8512: EQUAL
8513: IFTRUE 8517
8515: GO 8663
8517: POP
// if gettag ( tmpar ) = 1 then
8518: LD_LOC 6
8522: PPUSH
8523: CALL_OW 110
8527: PUSH
8528: LD_INT 1
8530: EQUAL
8531: IFFALSE 8661
// begin settag ( tmpar , 2 ) ;
8533: LD_LOC 6
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: CALL_OW 109
// if cyrus in mojivip then
8545: LD_EXP 32
8549: PUSH
8550: LD_EXP 45
8554: IN
8555: IFFALSE 8619
// begin setside ( cyrus , al ) ;
8557: LD_EXP 32
8561: PPUSH
8562: LD_EXP 2
8566: PPUSH
8567: CALL_OW 235
// contacted = contacted + 1 ;
8571: LD_ADDR_EXP 24
8575: PUSH
8576: LD_EXP 24
8580: PUSH
8581: LD_INT 1
8583: PLUS
8584: ST_TO_ADDR
// dialogueon ;
8585: CALL_OW 6
// say ( cyrus , D3-Cyrus-Cyrus-1 ) ;
8589: LD_EXP 32
8593: PPUSH
8594: LD_STRING D3-Cyrus-Cyrus-1
8596: PPUSH
8597: CALL_OW 88
// say ( john , D3-Cyrus-JMM-1 ) ;
8601: LD_EXP 27
8605: PPUSH
8606: LD_STRING D3-Cyrus-JMM-1
8608: PPUSH
8609: CALL_OW 88
// dialogueoff ;
8613: CALL_OW 7
// end else
8617: GO 8661
// begin vesel = tmpar ;
8619: LD_ADDR_LOC 7
8623: PUSH
8624: LD_LOC 6
8628: ST_TO_ADDR
// dialogueon ;
8629: CALL_OW 6
// say ( cyrus , D4-Cyrus-Cyrus-1 ) ;
8633: LD_EXP 32
8637: PPUSH
8638: LD_STRING D4-Cyrus-Cyrus-1
8640: PPUSH
8641: CALL_OW 88
// say ( john , D4-Cyrus-JMM-1 ) ;
8645: LD_EXP 27
8649: PPUSH
8650: LD_STRING D4-Cyrus-JMM-1
8652: PPUSH
8653: CALL_OW 88
// dialogueoff ;
8657: CALL_OW 7
// end end ; lisa :
8661: GO 10413
8663: LD_EXP 33
8667: DOUBLE
8668: EQUAL
8669: IFTRUE 8673
8671: GO 9002
8673: POP
// if gettag ( tmpar ) = 1 then
8674: LD_LOC 6
8678: PPUSH
8679: CALL_OW 110
8683: PUSH
8684: LD_INT 1
8686: EQUAL
8687: IFFALSE 9000
// begin settag ( tmpar , 2 ) ;
8689: LD_LOC 6
8693: PPUSH
8694: LD_INT 2
8696: PPUSH
8697: CALL_OW 109
// if ( lisa in mojivip ) then
8701: LD_EXP 33
8705: PUSH
8706: LD_EXP 45
8710: IN
8711: IFFALSE 8897
// begin contacted = contacted + 1 ;
8713: LD_ADDR_EXP 24
8717: PUSH
8718: LD_EXP 24
8722: PUSH
8723: LD_INT 1
8725: PLUS
8726: ST_TO_ADDR
// if not joan_joined then
8727: LD_EXP 54
8731: NOT
8732: IFFALSE 8790
// begin setside ( lisa , al ) ;
8734: LD_EXP 33
8738: PPUSH
8739: LD_EXP 2
8743: PPUSH
8744: CALL_OW 235
// lisamet = 1 ;
8748: LD_ADDR_EXP 53
8752: PUSH
8753: LD_INT 1
8755: ST_TO_ADDR
// dialogueon ;
8756: CALL_OW 6
// say ( lisa , D3-LisaL-Lisa-1 ) ;
8760: LD_EXP 33
8764: PPUSH
8765: LD_STRING D3-LisaL-Lisa-1
8767: PPUSH
8768: CALL_OW 88
// say ( john , D3-LisaL-JMM-1 ) ;
8772: LD_EXP 27
8776: PPUSH
8777: LD_STRING D3-LisaL-JMM-1
8779: PPUSH
8780: CALL_OW 88
// dialogueoff ;
8784: CALL_OW 7
// end else
8788: GO 8895
// begin vesel = tmpar ;
8790: LD_ADDR_LOC 7
8794: PUSH
8795: LD_LOC 6
8799: ST_TO_ADDR
// dialogueon ;
8800: CALL_OW 6
// say ( lisa , D3-LisaJ-Lisa-1 ) ;
8804: LD_EXP 33
8808: PPUSH
8809: LD_STRING D3-LisaJ-Lisa-1
8811: PPUSH
8812: CALL_OW 88
// say ( john , D3-LisaJ-JMM-1 ) ;
8816: LD_EXP 27
8820: PPUSH
8821: LD_STRING D3-LisaJ-JMM-1
8823: PPUSH
8824: CALL_OW 88
// say ( lisa , D3-LisaJ-Lisa-2 ) ;
8828: LD_EXP 33
8832: PPUSH
8833: LD_STRING D3-LisaJ-Lisa-2
8835: PPUSH
8836: CALL_OW 88
// say ( john , D3-LisaJ-JMM-2 ) ;
8840: LD_EXP 27
8844: PPUSH
8845: LD_STRING D3-LisaJ-JMM-2
8847: PPUSH
8848: CALL_OW 88
// say ( lisa , D3-LisaJ-Lisa-3 ) ;
8852: LD_EXP 33
8856: PPUSH
8857: LD_STRING D3-LisaJ-Lisa-3
8859: PPUSH
8860: CALL_OW 88
// dialogueoff ;
8864: CALL_OW 7
// lisamet = 2 ;
8868: LD_ADDR_EXP 53
8872: PUSH
8873: LD_INT 2
8875: ST_TO_ADDR
// mojivip = mojivip diff [ lisa ] ;
8876: LD_ADDR_EXP 45
8880: PUSH
8881: LD_EXP 45
8885: PUSH
8886: LD_EXP 33
8890: PUSH
8891: EMPTY
8892: LIST
8893: DIFF
8894: ST_TO_ADDR
// end ; end else
8895: GO 9000
// if ( joan = 0 ) or ( not joanmet ) then
8897: LD_EXP 30
8901: PUSH
8902: LD_INT 0
8904: EQUAL
8905: PUSH
8906: LD_EXP 51
8910: NOT
8911: OR
8912: IFFALSE 8946
// begin vesel = tmpar ;
8914: LD_ADDR_LOC 7
8918: PUSH
8919: LD_LOC 6
8923: ST_TO_ADDR
// dialogueon ;
8924: CALL_OW 6
// say ( lisa , D4-LisaL-Lisa-1 ) ;
8928: LD_EXP 33
8932: PPUSH
8933: LD_STRING D4-LisaL-Lisa-1
8935: PPUSH
8936: CALL_OW 88
// dialogueoff ;
8940: CALL_OW 7
// end else
8944: GO 9000
// begin vesel = tmpar ;
8946: LD_ADDR_LOC 7
8950: PUSH
8951: LD_LOC 6
8955: ST_TO_ADDR
// dialogueon ;
8956: CALL_OW 6
// say ( lisa , D4-LisaJ-Lisa-1 ) ;
8960: LD_EXP 33
8964: PPUSH
8965: LD_STRING D4-LisaJ-Lisa-1
8967: PPUSH
8968: CALL_OW 88
// say ( john , D4-LisaJ-JMM-1 ) ;
8972: LD_EXP 27
8976: PPUSH
8977: LD_STRING D4-LisaJ-JMM-1
8979: PPUSH
8980: CALL_OW 88
// say ( lisa , D4-LisaJ-Lisa-2 ) ;
8984: LD_EXP 33
8988: PPUSH
8989: LD_STRING D4-LisaJ-Lisa-2
8991: PPUSH
8992: CALL_OW 88
// dialogueoff ;
8996: CALL_OW 7
// end ; end ; frank :
9000: GO 10413
9002: LD_EXP 34
9006: DOUBLE
9007: EQUAL
9008: IFTRUE 9012
9010: GO 9249
9012: POP
// if gettag ( tmpar ) = 1 then
9013: LD_LOC 6
9017: PPUSH
9018: CALL_OW 110
9022: PUSH
9023: LD_INT 1
9025: EQUAL
9026: IFFALSE 9247
// begin settag ( tmpar , 2 ) ;
9028: LD_LOC 6
9032: PPUSH
9033: LD_INT 2
9035: PPUSH
9036: CALL_OW 109
// if frank in mojivip then
9040: LD_EXP 34
9044: PUSH
9045: LD_EXP 45
9049: IN
9050: IFFALSE 9150
// begin setside ( frank , al ) ;
9052: LD_EXP 34
9056: PPUSH
9057: LD_EXP 2
9061: PPUSH
9062: CALL_OW 235
// contacted = contacted + 1 ;
9066: LD_ADDR_EXP 24
9070: PUSH
9071: LD_EXP 24
9075: PUSH
9076: LD_INT 1
9078: PLUS
9079: ST_TO_ADDR
// dialogueon ;
9080: CALL_OW 6
// say ( frank , D3-Frank-Frank-1 ) ;
9084: LD_EXP 34
9088: PPUSH
9089: LD_STRING D3-Frank-Frank-1
9091: PPUSH
9092: CALL_OW 88
// say ( john , D3-Frank-JMM-1 ) ;
9096: LD_EXP 27
9100: PPUSH
9101: LD_STRING D3-Frank-JMM-1
9103: PPUSH
9104: CALL_OW 88
// say ( frank , D3-Frank-Frank-2 ) ;
9108: LD_EXP 34
9112: PPUSH
9113: LD_STRING D3-Frank-Frank-2
9115: PPUSH
9116: CALL_OW 88
// say ( john , D3-Frank-JMM-2 ) ;
9120: LD_EXP 27
9124: PPUSH
9125: LD_STRING D3-Frank-JMM-2
9127: PPUSH
9128: CALL_OW 88
// say ( frank , D3-Frank-Frank-3 ) ;
9132: LD_EXP 34
9136: PPUSH
9137: LD_STRING D3-Frank-Frank-3
9139: PPUSH
9140: CALL_OW 88
// dialogueoff ;
9144: CALL_OW 7
// end else
9148: GO 9247
// begin frankmet = true ;
9150: LD_ADDR_EXP 52
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// dialogueon ;
9158: CALL_OW 6
// say ( frank , D4-Frank-Frank-1 ) ;
9162: LD_EXP 34
9166: PPUSH
9167: LD_STRING D4-Frank-Frank-1
9169: PPUSH
9170: CALL_OW 88
// say ( john , D4-Frank-JMM-1 ) ;
9174: LD_EXP 27
9178: PPUSH
9179: LD_STRING D4-Frank-JMM-1
9181: PPUSH
9182: CALL_OW 88
// say ( frank , D4-Frank-Frank-2 ) ;
9186: LD_EXP 34
9190: PPUSH
9191: LD_STRING D4-Frank-Frank-2
9193: PPUSH
9194: CALL_OW 88
// say ( john , D4-Frank-JMM-2 ) ;
9198: LD_EXP 27
9202: PPUSH
9203: LD_STRING D4-Frank-JMM-2
9205: PPUSH
9206: CALL_OW 88
// dialogueoff ;
9210: CALL_OW 7
// setside ( frank , al ) ;
9214: LD_EXP 34
9218: PPUSH
9219: LD_EXP 2
9223: PPUSH
9224: CALL_OW 235
// mojivip = mojivip ^ [ frank ] ;
9228: LD_ADDR_EXP 45
9232: PUSH
9233: LD_EXP 45
9237: PUSH
9238: LD_EXP 34
9242: PUSH
9243: EMPTY
9244: LIST
9245: ADD
9246: ST_TO_ADDR
// end ; end ; markc :
9247: GO 10413
9249: LD_EXP 35
9253: DOUBLE
9254: EQUAL
9255: IFTRUE 9259
9257: GO 9429
9259: POP
// if gettag ( tmpar ) = 1 then
9260: LD_LOC 6
9264: PPUSH
9265: CALL_OW 110
9269: PUSH
9270: LD_INT 1
9272: EQUAL
9273: IFFALSE 9427
// begin settag ( tmpar , 2 ) ;
9275: LD_LOC 6
9279: PPUSH
9280: LD_INT 2
9282: PPUSH
9283: CALL_OW 109
// if markc in mojivip then
9287: LD_EXP 35
9291: PUSH
9292: LD_EXP 45
9296: IN
9297: IFFALSE 9373
// begin setside ( markc , al ) ;
9299: LD_EXP 35
9303: PPUSH
9304: LD_EXP 2
9308: PPUSH
9309: CALL_OW 235
// contacted = contacted + 1 ;
9313: LD_ADDR_EXP 24
9317: PUSH
9318: LD_EXP 24
9322: PUSH
9323: LD_INT 1
9325: PLUS
9326: ST_TO_ADDR
// dialogueon ;
9327: CALL_OW 6
// say ( markc , D3-Mark-Corn-1 ) ;
9331: LD_EXP 35
9335: PPUSH
9336: LD_STRING D3-Mark-Corn-1
9338: PPUSH
9339: CALL_OW 88
// say ( john , D3-Mark-JMM-1 ) ;
9343: LD_EXP 27
9347: PPUSH
9348: LD_STRING D3-Mark-JMM-1
9350: PPUSH
9351: CALL_OW 88
// say ( markc , D3-Mark-Corn-2 ) ;
9355: LD_EXP 35
9359: PPUSH
9360: LD_STRING D3-Mark-Corn-2
9362: PPUSH
9363: CALL_OW 88
// dialogueoff ;
9367: CALL_OW 7
// end else
9371: GO 9427
// begin vesel = tmpar ;
9373: LD_ADDR_LOC 7
9377: PUSH
9378: LD_LOC 6
9382: ST_TO_ADDR
// dialogueon ;
9383: CALL_OW 6
// say ( markc , D4-Mark-Corn-1 ) ;
9387: LD_EXP 35
9391: PPUSH
9392: LD_STRING D4-Mark-Corn-1
9394: PPUSH
9395: CALL_OW 88
// say ( john , D4-Mark-JMM-1 ) ;
9399: LD_EXP 27
9403: PPUSH
9404: LD_STRING D4-Mark-JMM-1
9406: PPUSH
9407: CALL_OW 88
// say ( markc , D4-Mark-Corn-2 ) ;
9411: LD_EXP 35
9415: PPUSH
9416: LD_STRING D4-Mark-Corn-2
9418: PPUSH
9419: CALL_OW 88
// dialogueoff ;
9423: CALL_OW 7
// end ; end ; tim :
9427: GO 10413
9429: LD_EXP 36
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9585
9439: POP
// if gettag ( tmpar ) = 1 then
9440: LD_LOC 6
9444: PPUSH
9445: CALL_OW 110
9449: PUSH
9450: LD_INT 1
9452: EQUAL
9453: IFFALSE 9583
// begin settag ( tmpar , 2 ) ;
9455: LD_LOC 6
9459: PPUSH
9460: LD_INT 2
9462: PPUSH
9463: CALL_OW 109
// if tim in mojivip then
9467: LD_EXP 36
9471: PUSH
9472: LD_EXP 45
9476: IN
9477: IFFALSE 9541
// begin setside ( tim , al ) ;
9479: LD_EXP 36
9483: PPUSH
9484: LD_EXP 2
9488: PPUSH
9489: CALL_OW 235
// contacted = contacted + 1 ;
9493: LD_ADDR_EXP 24
9497: PUSH
9498: LD_EXP 24
9502: PUSH
9503: LD_INT 1
9505: PLUS
9506: ST_TO_ADDR
// dialogueon ;
9507: CALL_OW 6
// say ( john , D3-Tim-JMM-1 ) ;
9511: LD_EXP 27
9515: PPUSH
9516: LD_STRING D3-Tim-JMM-1
9518: PPUSH
9519: CALL_OW 88
// say ( tim , D3-Tim-Glad-1 ) ;
9523: LD_EXP 36
9527: PPUSH
9528: LD_STRING D3-Tim-Glad-1
9530: PPUSH
9531: CALL_OW 88
// dialogueoff ;
9535: CALL_OW 7
// end else
9539: GO 9583
// begin vesel = tmpar ;
9541: LD_ADDR_LOC 7
9545: PUSH
9546: LD_LOC 6
9550: ST_TO_ADDR
// dialogueon ;
9551: CALL_OW 6
// say ( john , D4-Tim-JMM-1 ) ;
9555: LD_EXP 27
9559: PPUSH
9560: LD_STRING D4-Tim-JMM-1
9562: PPUSH
9563: CALL_OW 88
// say ( tim , D4-Tim-Glad-1 ) ;
9567: LD_EXP 36
9571: PPUSH
9572: LD_STRING D4-Tim-Glad-1
9574: PPUSH
9575: CALL_OW 88
// dialogueoff ;
9579: CALL_OW 7
// end ; end ; denis :
9583: GO 10413
9585: LD_EXP 37
9589: DOUBLE
9590: EQUAL
9591: IFTRUE 9595
9593: GO 9685
9595: POP
// if gettag ( tmpar ) = 1 then
9596: LD_LOC 6
9600: PPUSH
9601: CALL_OW 110
9605: PUSH
9606: LD_INT 1
9608: EQUAL
9609: IFFALSE 9683
// begin settag ( tmpar , 2 ) ;
9611: LD_LOC 6
9615: PPUSH
9616: LD_INT 2
9618: PPUSH
9619: CALL_OW 109
// contacted = contacted + 1 ;
9623: LD_ADDR_EXP 24
9627: PUSH
9628: LD_EXP 24
9632: PUSH
9633: LD_INT 1
9635: PLUS
9636: ST_TO_ADDR
// setside ( denis , al ) ;
9637: LD_EXP 37
9641: PPUSH
9642: LD_EXP 2
9646: PPUSH
9647: CALL_OW 235
// dialogueon ;
9651: CALL_OW 6
// say ( denis , D3-Denis-Den-1 ) ;
9655: LD_EXP 37
9659: PPUSH
9660: LD_STRING D3-Denis-Den-1
9662: PPUSH
9663: CALL_OW 88
// say ( john , D3-Denis-JMM-1 ) ;
9667: LD_EXP 27
9671: PPUSH
9672: LD_STRING D3-Denis-JMM-1
9674: PPUSH
9675: CALL_OW 88
// dialogueoff ;
9679: CALL_OW 7
// end ; yamoko :
9683: GO 10413
9685: LD_EXP 38
9689: DOUBLE
9690: EQUAL
9691: IFTRUE 9695
9693: GO 9821
9695: POP
// if gettag ( tmpar ) = 1 then
9696: LD_LOC 6
9700: PPUSH
9701: CALL_OW 110
9705: PUSH
9706: LD_INT 1
9708: EQUAL
9709: IFFALSE 9819
// begin settag ( tmpar , 2 ) ;
9711: LD_LOC 6
9715: PPUSH
9716: LD_INT 2
9718: PPUSH
9719: CALL_OW 109
// if yamoko in mojivip then
9723: LD_EXP 38
9727: PUSH
9728: LD_EXP 45
9732: IN
9733: IFFALSE 9785
// begin setside ( yamoko , al ) ;
9735: LD_EXP 38
9739: PPUSH
9740: LD_EXP 2
9744: PPUSH
9745: CALL_OW 235
// contacted = contacted + 1 ;
9749: LD_ADDR_EXP 24
9753: PUSH
9754: LD_EXP 24
9758: PUSH
9759: LD_INT 1
9761: PLUS
9762: ST_TO_ADDR
// dialogueon ;
9763: CALL_OW 6
// say ( yamoko , D3-Yamako-Yam-1 ) ;
9767: LD_EXP 38
9771: PPUSH
9772: LD_STRING D3-Yamako-Yam-1
9774: PPUSH
9775: CALL_OW 88
// dialogueoff ;
9779: CALL_OW 7
// end else
9783: GO 9819
// begin dialogueon ;
9785: CALL_OW 6
// say ( yamoko , D4-Yamako-Yam-1 ) ;
9789: LD_EXP 38
9793: PPUSH
9794: LD_STRING D4-Yamako-Yam-1
9796: PPUSH
9797: CALL_OW 88
// dialogueoff ;
9801: CALL_OW 7
// setside ( yamoko , am ) ;
9805: LD_EXP 38
9809: PPUSH
9810: LD_EXP 1
9814: PPUSH
9815: CALL_OW 235
// end ; end ; gary :
9819: GO 10413
9821: LD_EXP 39
9825: DOUBLE
9826: EQUAL
9827: IFTRUE 9831
9829: GO 9969
9831: POP
// if gettag ( tmpar ) = 1 then
9832: LD_LOC 6
9836: PPUSH
9837: CALL_OW 110
9841: PUSH
9842: LD_INT 1
9844: EQUAL
9845: IFFALSE 9967
// begin settag ( tmpar , 2 ) ;
9847: LD_LOC 6
9851: PPUSH
9852: LD_INT 2
9854: PPUSH
9855: CALL_OW 109
// if gary in mojivip then
9859: LD_EXP 39
9863: PUSH
9864: LD_EXP 45
9868: IN
9869: IFFALSE 9933
// begin setside ( gary , al ) ;
9871: LD_EXP 39
9875: PPUSH
9876: LD_EXP 2
9880: PPUSH
9881: CALL_OW 235
// contacted = contacted + 1 ;
9885: LD_ADDR_EXP 24
9889: PUSH
9890: LD_EXP 24
9894: PUSH
9895: LD_INT 1
9897: PLUS
9898: ST_TO_ADDR
// dialogueon ;
9899: CALL_OW 6
// say ( gary , D3-Gary-Gary-1 ) ;
9903: LD_EXP 39
9907: PPUSH
9908: LD_STRING D3-Gary-Gary-1
9910: PPUSH
9911: CALL_OW 88
// say ( john , D3-Gary-JMM-1 ) ;
9915: LD_EXP 27
9919: PPUSH
9920: LD_STRING D3-Gary-JMM-1
9922: PPUSH
9923: CALL_OW 88
// dialogueoff ;
9927: CALL_OW 7
// end else
9931: GO 9967
// begin dialogueon ;
9933: CALL_OW 6
// say ( gary , D4-Gary-Gary-1 ) ;
9937: LD_EXP 39
9941: PPUSH
9942: LD_STRING D4-Gary-Gary-1
9944: PPUSH
9945: CALL_OW 88
// dialogueoff ;
9949: CALL_OW 7
// setside ( gary , am ) ;
9953: LD_EXP 39
9957: PPUSH
9958: LD_EXP 1
9962: PPUSH
9963: CALL_OW 235
// end ; end ; simms :
9967: GO 10413
9969: LD_EXP 40
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 10069
9979: POP
// if gettag ( tmpar ) = 1 then
9980: LD_LOC 6
9984: PPUSH
9985: CALL_OW 110
9989: PUSH
9990: LD_INT 1
9992: EQUAL
9993: IFFALSE 10067
// begin settag ( tmpar , 2 ) ;
9995: LD_LOC 6
9999: PPUSH
10000: LD_INT 2
10002: PPUSH
10003: CALL_OW 109
// contacted = contacted + 1 ;
10007: LD_ADDR_EXP 24
10011: PUSH
10012: LD_EXP 24
10016: PUSH
10017: LD_INT 1
10019: PLUS
10020: ST_TO_ADDR
// setside ( simms , al ) ;
10021: LD_EXP 40
10025: PPUSH
10026: LD_EXP 2
10030: PPUSH
10031: CALL_OW 235
// dialogueon ;
10035: CALL_OW 6
// say ( simms , D3-Simms-Sim-1 ) ;
10039: LD_EXP 40
10043: PPUSH
10044: LD_STRING D3-Simms-Sim-1
10046: PPUSH
10047: CALL_OW 88
// say ( john , D3-Simms-JMM-1 ) ;
10051: LD_EXP 27
10055: PPUSH
10056: LD_STRING D3-Simms-JMM-1
10058: PPUSH
10059: CALL_OW 88
// dialogueoff ;
10063: CALL_OW 7
// end ; else
10067: GO 10413
10069: POP
// if gettag ( tmpar ) = 1 then
10070: LD_LOC 6
10074: PPUSH
10075: CALL_OW 110
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: IFFALSE 10413
// begin settag ( tmpar , 2 ) ;
10085: LD_LOC 6
10089: PPUSH
10090: LD_INT 2
10092: PPUSH
10093: CALL_OW 109
// if ( takoviti [ tmpar ] in moji ) or ( takoviti [ tmpar ] in mojivip ) then
10097: LD_EXP 26
10101: PUSH
10102: LD_LOC 6
10106: ARRAY
10107: PUSH
10108: LD_EXP 44
10112: IN
10113: PUSH
10114: LD_EXP 26
10118: PUSH
10119: LD_LOC 6
10123: ARRAY
10124: PUSH
10125: LD_EXP 45
10129: IN
10130: OR
10131: IFFALSE 10268
// begin setside ( takoviti [ tmpar ] , al ) ;
10133: LD_EXP 26
10137: PUSH
10138: LD_LOC 6
10142: ARRAY
10143: PPUSH
10144: LD_EXP 2
10148: PPUSH
10149: CALL_OW 235
// contacted = contacted + 1 ;
10153: LD_ADDR_EXP 24
10157: PUSH
10158: LD_EXP 24
10162: PUSH
10163: LD_INT 1
10165: PLUS
10166: ST_TO_ADDR
// if getsex ( takoviti [ tmpar ] ) = sex_male then
10167: LD_EXP 26
10171: PUSH
10172: LD_LOC 6
10176: ARRAY
10177: PPUSH
10178: CALL_OW 258
10182: PUSH
10183: LD_INT 1
10185: EQUAL
10186: IFFALSE 10228
// begin dialogueon ;
10188: CALL_OW 6
// say ( takoviti [ tmpar ] , D3-Soldier1-Sol1-1 ) ;
10192: LD_EXP 26
10196: PUSH
10197: LD_LOC 6
10201: ARRAY
10202: PPUSH
10203: LD_STRING D3-Soldier1-Sol1-1
10205: PPUSH
10206: CALL_OW 88
// say ( john , D3-Soldier1-JMM-1 ) ;
10210: LD_EXP 27
10214: PPUSH
10215: LD_STRING D3-Soldier1-JMM-1
10217: PPUSH
10218: CALL_OW 88
// dialogueoff ;
10222: CALL_OW 7
// end else
10226: GO 10266
// begin dialogueon ;
10228: CALL_OW 6
// say ( takoviti [ tmpar ] , D3-Soldier2-Fsol2-1 ) ;
10232: LD_EXP 26
10236: PUSH
10237: LD_LOC 6
10241: ARRAY
10242: PPUSH
10243: LD_STRING D3-Soldier2-Fsol2-1
10245: PPUSH
10246: CALL_OW 88
// say ( john , D3-Soldier2-JMM-1 ) ;
10250: LD_EXP 27
10254: PPUSH
10255: LD_STRING D3-Soldier2-JMM-1
10257: PPUSH
10258: CALL_OW 88
// dialogueoff ;
10262: CALL_OW 7
// end ; end else
10266: GO 10413
// begin vesel = tmpar ;
10268: LD_ADDR_LOC 7
10272: PUSH
10273: LD_LOC 6
10277: ST_TO_ADDR
// if getsex ( takoviti [ tmpar ] ) = sex_female then
10278: LD_EXP 26
10282: PUSH
10283: LD_LOC 6
10287: ARRAY
10288: PPUSH
10289: CALL_OW 258
10293: PUSH
10294: LD_INT 2
10296: EQUAL
10297: IFFALSE 10357
// begin dialogueon ;
10299: CALL_OW 6
// say ( takoviti [ tmpar ] , D4-Soldier1-FSol1-1 ) ;
10303: LD_EXP 26
10307: PUSH
10308: LD_LOC 6
10312: ARRAY
10313: PPUSH
10314: LD_STRING D4-Soldier1-FSol1-1
10316: PPUSH
10317: CALL_OW 88
// say ( john , D4-Soldier1-JMM-1 ) ;
10321: LD_EXP 27
10325: PPUSH
10326: LD_STRING D4-Soldier1-JMM-1
10328: PPUSH
10329: CALL_OW 88
// say ( takoviti [ tmpar ] , D4-Soldier1-FSol1-2 ) ;
10333: LD_EXP 26
10337: PUSH
10338: LD_LOC 6
10342: ARRAY
10343: PPUSH
10344: LD_STRING D4-Soldier1-FSol1-2
10346: PPUSH
10347: CALL_OW 88
// dialogueoff ;
10351: CALL_OW 7
// end else
10355: GO 10413
// begin dialogueon ;
10357: CALL_OW 6
// say ( takoviti [ tmpar ] , D4-Soldier2-Sol1-1 ) ;
10361: LD_EXP 26
10365: PUSH
10366: LD_LOC 6
10370: ARRAY
10371: PPUSH
10372: LD_STRING D4-Soldier2-Sol1-1
10374: PPUSH
10375: CALL_OW 88
// say ( john , D4-Soldier2-JMM-1 ) ;
10379: LD_EXP 27
10383: PPUSH
10384: LD_STRING D4-Soldier2-JMM-1
10386: PPUSH
10387: CALL_OW 88
// say ( takoviti [ tmpar ] , D4-Soldier2-Sol2-1 ) ;
10391: LD_EXP 26
10395: PUSH
10396: LD_LOC 6
10400: ARRAY
10401: PPUSH
10402: LD_STRING D4-Soldier2-Sol2-1
10404: PPUSH
10405: CALL_OW 88
// dialogueoff ;
10409: CALL_OW 7
// end ; end ; end ; end ; enable ;
10413: ENABLE
// end ;
10414: END
// on enterbuilding ( buil , un ) do if ( un = john ) and ( buil = amlab ) then
10415: LD_VAR 0 2
10419: PUSH
10420: LD_EXP 27
10424: EQUAL
10425: PUSH
10426: LD_VAR 0 1
10430: PUSH
10431: LD_INT 47
10433: EQUAL
10434: AND
10435: IFFALSE 10474
// begin setclass ( john , class_bazooker ) ;
10437: LD_EXP 27
10441: PPUSH
10442: LD_INT 9
10444: PPUSH
10445: CALL_OW 336
// settech ( tech_soporific , al , state_researched ) ;
10449: LD_INT 13
10451: PPUSH
10452: LD_EXP 2
10456: PPUSH
10457: LD_INT 2
10459: PPUSH
10460: CALL_OW 322
// changemissionobjectives ( M1a ) ;
10464: LD_STRING M1a
10466: PPUSH
10467: CALL_OW 337
// enable ( 02 ) ;
10471: LD_INT 2
10473: ENABLE_MARKED
// end ; end_of_file
10474: PPOPN 2
10476: END
// export killx , killy ; on humandestroyed ( un , side , nation , x , y , direction , sex , class ) do if ( penalty < maxpenalty ) and ( ( side = am ) or ( side = oth ) ) then
10477: LD_EXP 21
10481: PUSH
10482: LD_EXP 22
10486: LESS
10487: PUSH
10488: LD_VAR 0 2
10492: PUSH
10493: LD_EXP 1
10497: EQUAL
10498: PUSH
10499: LD_VAR 0 2
10503: PUSH
10504: LD_EXP 3
10508: EQUAL
10509: OR
10510: AND
10511: IFFALSE 10595
// begin penalty = penalty + [ 10 , 8 , 6 ] [ difficulty ] ;
10513: LD_ADDR_EXP 21
10517: PUSH
10518: LD_EXP 21
10522: PUSH
10523: LD_INT 10
10525: PUSH
10526: LD_INT 8
10528: PUSH
10529: LD_INT 6
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: PUSH
10537: LD_OWVAR 67
10541: ARRAY
10542: PLUS
10543: ST_TO_ADDR
// if debug then
10544: LD_EXP 19
10548: IFFALSE 10563
// msg ( penalty:  & penalty ) ;
10550: LD_STRING penalty: 
10552: PUSH
10553: LD_EXP 21
10557: STR
10558: PPUSH
10559: CALL_OW 100
// if penalty >= maxpenalty then
10563: LD_EXP 21
10567: PUSH
10568: LD_EXP 22
10572: GREATEREQUAL
10573: IFFALSE 10595
// begin killx = x ;
10575: LD_ADDR_EXP 55
10579: PUSH
10580: LD_VAR 0 4
10584: ST_TO_ADDR
// killy = y ;
10585: LD_ADDR_EXP 56
10589: PUSH
10590: LD_VAR 0 5
10594: ST_TO_ADDR
// end end ;
10595: PPOPN 8
10597: END
// on unitgoestored ( un ) do if ( gettype ( un ) = unit_vehicle ) and ( penalty < maxpenalty ) and ( ( getside ( un ) = am ) or ( getside ( un ) = oth ) ) then
10598: LD_VAR 0 1
10602: PPUSH
10603: CALL_OW 247
10607: PUSH
10608: LD_INT 2
10610: EQUAL
10611: PUSH
10612: LD_EXP 21
10616: PUSH
10617: LD_EXP 22
10621: LESS
10622: AND
10623: PUSH
10624: LD_VAR 0 1
10628: PPUSH
10629: CALL_OW 255
10633: PUSH
10634: LD_EXP 1
10638: EQUAL
10639: PUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 255
10649: PUSH
10650: LD_EXP 3
10654: EQUAL
10655: OR
10656: AND
10657: IFFALSE 10751
// begin penalty = penalty + [ 8 , 6 , 4 ] [ difficulty ] ;
10659: LD_ADDR_EXP 21
10663: PUSH
10664: LD_EXP 21
10668: PUSH
10669: LD_INT 8
10671: PUSH
10672: LD_INT 6
10674: PUSH
10675: LD_INT 4
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: PUSH
10683: LD_OWVAR 67
10687: ARRAY
10688: PLUS
10689: ST_TO_ADDR
// if debug then
10690: LD_EXP 19
10694: IFFALSE 10709
// msg ( penalty:  & penalty ) ;
10696: LD_STRING penalty: 
10698: PUSH
10699: LD_EXP 21
10703: STR
10704: PPUSH
10705: CALL_OW 100
// if penalty >= maxpenalty then
10709: LD_EXP 21
10713: PUSH
10714: LD_EXP 22
10718: GREATEREQUAL
10719: IFFALSE 10751
// begin killx = getx ( un ) ;
10721: LD_ADDR_EXP 55
10725: PUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 250
10735: ST_TO_ADDR
// killy = gety ( un ) ;
10736: LD_ADDR_EXP 56
10740: PUSH
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 251
10750: ST_TO_ADDR
// end end ;
10751: PPOPN 1
10753: END
// var guards ; every 0 0$1.2 trigger penalty >= maxpenalty do var tmp , tmp2 , tmp1 , rad ;
10754: LD_EXP 21
10758: PUSH
10759: LD_EXP 22
10763: GREATEREQUAL
10764: IFFALSE 11706
10766: GO 10768
10768: DISABLE
10769: LD_INT 0
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
// begin penalty = 0 ;
10775: LD_ADDR_EXP 21
10779: PUSH
10780: LD_INT 0
10782: ST_TO_ADDR
// rad = 5 ;
10783: LD_ADDR_VAR 0 4
10787: PUSH
10788: LD_INT 5
10790: ST_TO_ADDR
// tmp1 = [ ] ;
10791: LD_ADDR_VAR 0 3
10795: PUSH
10796: EMPTY
10797: ST_TO_ADDR
// while ( ( 0 + tmp1 ) < 5 ) and ( rad < 25 ) do
10798: LD_INT 0
10800: PUSH
10801: LD_VAR 0 3
10805: PLUS
10806: PUSH
10807: LD_INT 5
10809: LESS
10810: PUSH
10811: LD_VAR 0 4
10815: PUSH
10816: LD_INT 25
10818: LESS
10819: AND
10820: IFFALSE 10910
// begin rad = rad + 5 ;
10822: LD_ADDR_VAR 0 4
10826: PUSH
10827: LD_VAR 0 4
10831: PUSH
10832: LD_INT 5
10834: PLUS
10835: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , al ] , f_not , [ f_type , unit_building ] , [ f_ok ] , [ f_distxy , killx , killy , rad ] ] ) ;
10836: LD_ADDR_VAR 0 3
10840: PUSH
10841: LD_INT 22
10843: PUSH
10844: LD_EXP 2
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 3
10855: PUSH
10856: LD_INT 21
10858: PUSH
10859: LD_INT 3
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 50
10868: PUSH
10869: EMPTY
10870: LIST
10871: PUSH
10872: LD_INT 92
10874: PUSH
10875: LD_EXP 55
10879: PUSH
10880: LD_EXP 56
10884: PUSH
10885: LD_VAR 0 4
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 69
10907: ST_TO_ADDR
// end ;
10908: GO 10798
// uc_side = am ;
10910: LD_ADDR_OWVAR 20
10914: PUSH
10915: LD_EXP 1
10919: ST_TO_ADDR
// uc_nation = nation_american ;
10920: LD_ADDR_OWVAR 21
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// vc_control = control_manual ;
10928: LD_ADDR_OWVAR 38
10932: PUSH
10933: LD_INT 1
10935: ST_TO_ADDR
// vc_engine = engine_siberite ;
10936: LD_ADDR_OWVAR 39
10940: PUSH
10941: LD_INT 3
10943: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
10944: LD_ADDR_OWVAR 37
10948: PUSH
10949: LD_INT 3
10951: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10952: LD_ADDR_OWVAR 40
10956: PUSH
10957: LD_INT 4
10959: ST_TO_ADDR
// tmp = createvehicle ;
10960: LD_ADDR_VAR 0 1
10964: PUSH
10965: CALL_OW 45
10969: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: LD_INT 5
10977: PPUSH
10978: CALL_OW 233
// placeunitarea ( tmp , guard_in , false ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: LD_INT 19
10989: PPUSH
10990: LD_INT 0
10992: PPUSH
10993: CALL_OW 49
// preparemechanic ( sex_male , 8 ) ;
10997: LD_INT 1
10999: PPUSH
11000: LD_INT 8
11002: PPUSH
11003: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
11007: CALL_OW 44
11011: PPUSH
11012: LD_VAR 0 1
11016: PPUSH
11017: CALL_OW 52
// tmp2 = [ tmp ] ;
11021: LD_ADDR_VAR 0 2
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
11034: LD_ADDR_OWVAR 37
11038: PUSH
11039: LD_INT 3
11041: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
11042: LD_ADDR_OWVAR 40
11046: PUSH
11047: LD_INT 4
11049: ST_TO_ADDR
// tmp = createvehicle ;
11050: LD_ADDR_VAR 0 1
11054: PUSH
11055: CALL_OW 45
11059: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
11060: LD_VAR 0 1
11064: PPUSH
11065: LD_INT 5
11067: PPUSH
11068: CALL_OW 233
// placeunitarea ( tmp , guard_in , false ) ;
11072: LD_VAR 0 1
11076: PPUSH
11077: LD_INT 19
11079: PPUSH
11080: LD_INT 0
11082: PPUSH
11083: CALL_OW 49
// preparemechanic ( sex_male , 8 ) ;
11087: LD_INT 1
11089: PPUSH
11090: LD_INT 8
11092: PPUSH
11093: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
11097: CALL_OW 44
11101: PPUSH
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_VAR 0 2
11120: PUSH
11121: LD_VAR 0 1
11125: PUSH
11126: EMPTY
11127: LIST
11128: ADD
11129: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
11130: LD_ADDR_OWVAR 37
11134: PUSH
11135: LD_INT 3
11137: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
11138: LD_ADDR_OWVAR 40
11142: PUSH
11143: LD_INT 4
11145: ST_TO_ADDR
// tmp = createvehicle ;
11146: LD_ADDR_VAR 0 1
11150: PUSH
11151: CALL_OW 45
11155: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_INT 5
11163: PPUSH
11164: CALL_OW 233
// placeunitarea ( tmp , guard_in , false ) ;
11168: LD_VAR 0 1
11172: PPUSH
11173: LD_INT 19
11175: PPUSH
11176: LD_INT 0
11178: PPUSH
11179: CALL_OW 49
// preparemechanic ( sex_male , 8 ) ;
11183: LD_INT 1
11185: PPUSH
11186: LD_INT 8
11188: PPUSH
11189: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
11193: CALL_OW 44
11197: PPUSH
11198: LD_VAR 0 1
11202: PPUSH
11203: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
11207: LD_ADDR_VAR 0 2
11211: PUSH
11212: LD_VAR 0 2
11216: PUSH
11217: LD_VAR 0 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: ADD
11225: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
11226: LD_ADDR_OWVAR 37
11230: PUSH
11231: LD_INT 3
11233: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
11234: LD_ADDR_OWVAR 40
11238: PUSH
11239: LD_INT 4
11241: ST_TO_ADDR
// tmp = createvehicle ;
11242: LD_ADDR_VAR 0 1
11246: PUSH
11247: CALL_OW 45
11251: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_INT 5
11259: PPUSH
11260: CALL_OW 233
// placeunitarea ( tmp , guard_in , false ) ;
11264: LD_VAR 0 1
11268: PPUSH
11269: LD_INT 19
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: CALL_OW 49
// preparemechanic ( sex_male , 8 ) ;
11279: LD_INT 1
11281: PPUSH
11282: LD_INT 8
11284: PPUSH
11285: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
11289: CALL_OW 44
11293: PPUSH
11294: LD_VAR 0 1
11298: PPUSH
11299: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
11303: LD_ADDR_VAR 0 2
11307: PUSH
11308: LD_VAR 0 2
11312: PUSH
11313: LD_VAR 0 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: ADD
11321: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
11322: LD_ADDR_OWVAR 37
11326: PUSH
11327: LD_INT 3
11329: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
11330: LD_ADDR_OWVAR 40
11334: PUSH
11335: LD_INT 4
11337: ST_TO_ADDR
// tmp = createvehicle ;
11338: LD_ADDR_VAR 0 1
11342: PUSH
11343: CALL_OW 45
11347: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
11348: LD_VAR 0 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 233
// placeunitarea ( tmp , guard_in , false ) ;
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_INT 19
11367: PPUSH
11368: LD_INT 0
11370: PPUSH
11371: CALL_OW 49
// preparemechanic ( sex_male , 8 ) ;
11375: LD_INT 1
11377: PPUSH
11378: LD_INT 8
11380: PPUSH
11381: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
11385: CALL_OW 44
11389: PPUSH
11390: LD_VAR 0 1
11394: PPUSH
11395: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: LD_VAR 0 2
11408: PUSH
11409: LD_VAR 0 1
11413: PUSH
11414: EMPTY
11415: LIST
11416: ADD
11417: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
11418: LD_ADDR_OWVAR 37
11422: PUSH
11423: LD_INT 4
11425: ST_TO_ADDR
// vc_weapon = us_heavy_gun ;
11426: LD_ADDR_OWVAR 40
11430: PUSH
11431: LD_INT 6
11433: ST_TO_ADDR
// tmp = createvehicle ;
11434: LD_ADDR_VAR 0 1
11438: PUSH
11439: CALL_OW 45
11443: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
11444: LD_VAR 0 1
11448: PPUSH
11449: LD_INT 5
11451: PPUSH
11452: CALL_OW 233
// placeunitarea ( tmp , guard_in , false ) ;
11456: LD_VAR 0 1
11460: PPUSH
11461: LD_INT 19
11463: PPUSH
11464: LD_INT 0
11466: PPUSH
11467: CALL_OW 49
// preparemechanic ( sex_male , 9 ) ;
11471: LD_INT 1
11473: PPUSH
11474: LD_INT 9
11476: PPUSH
11477: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
11481: CALL_OW 44
11485: PPUSH
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
11495: LD_ADDR_VAR 0 2
11499: PUSH
11500: LD_VAR 0 2
11504: PUSH
11505: LD_VAR 0 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: ADD
11513: ST_TO_ADDR
// guards = tmp2 ;
11514: LD_ADDR_LOC 8
11518: PUSH
11519: LD_VAR 0 2
11523: ST_TO_ADDR
// for tmp in tmp1 do
11524: LD_ADDR_VAR 0 1
11528: PUSH
11529: LD_VAR 0 3
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11567
// begin addcomattackunit ( tmp2 , tmp ) ;
11537: LD_VAR 0 2
11541: PPUSH
11542: LD_VAR 0 1
11546: PPUSH
11547: CALL_OW 175
// priorityattack ( am , tmp ) ;
11551: LD_EXP 1
11555: PPUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 470
// end ;
11565: GO 11534
11567: POP
11568: POP
// while getlives ( tmp1 ) > 0 do
11569: LD_VAR 0 3
11573: PPUSH
11574: CALL_OW 256
11578: PUSH
11579: LD_INT 0
11581: GREATER
11582: IFFALSE 11616
// begin wait ( 0 0$1 ) ;
11584: LD_INT 35
11586: PPUSH
11587: CALL_OW 67
// if debug then
11591: LD_EXP 19
11595: IFFALSE 11614
// debug_strings = [ cile: , tmp1 ] ;
11597: LD_ADDR_OWVAR 48
11601: PUSH
11602: LD_STRING cile:
11604: PUSH
11605: LD_VAR 0 3
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: ST_TO_ADDR
// end ;
11614: GO 11569
// if debug then
11616: LD_EXP 19
11620: IFFALSE 11629
// msg ( lets get off ) ;
11622: LD_STRING lets get off
11624: PPUSH
11625: CALL_OW 100
// for tmp = 1 to 6 do
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: DOUBLE
11635: LD_INT 1
11637: DEC
11638: ST_TO_ADDR
11639: LD_INT 6
11641: PUSH
11642: FOR_TO
11643: IFFALSE 11692
// commovexy ( guards [ tmp ] , guard_out_ [ tmp ] [ 1 ] , guard_out_ [ tmp ] [ 2 ] ) ;
11645: LD_LOC 8
11649: PUSH
11650: LD_VAR 0 1
11654: ARRAY
11655: PPUSH
11656: LD_EXP 20
11660: PUSH
11661: LD_VAR 0 1
11665: ARRAY
11666: PUSH
11667: LD_INT 1
11669: ARRAY
11670: PPUSH
11671: LD_EXP 20
11675: PUSH
11676: LD_VAR 0 1
11680: ARRAY
11681: PUSH
11682: LD_INT 2
11684: ARRAY
11685: PPUSH
11686: CALL_OW 111
11690: GO 11642
11692: POP
11693: POP
// enable ( 04 ) ;
11694: LD_INT 4
11696: ENABLE_MARKED
// achjo = 0 ;
11697: LD_ADDR_LOC 9
11701: PUSH
11702: LD_INT 0
11704: ST_TO_ADDR
// enable ;
11705: ENABLE
// end ;
11706: PPOPN 4
11708: END
// var achjo ; every 0 0$1 marked 04 do var tmp , tmp1 ;
11709: GO 11711
11711: DISABLE
11712: LD_INT 0
11714: PPUSH
11715: PPUSH
// begin tmp = filterunitsinarea ( guard_out , [ [ f_side , am ] ] ) ;
11716: LD_ADDR_VAR 0 1
11720: PUSH
11721: LD_INT 20
11723: PPUSH
11724: LD_INT 22
11726: PUSH
11727: LD_EXP 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: PPUSH
11739: CALL_OW 70
11743: ST_TO_ADDR
// for tmp1 in tmp do
11744: LD_ADDR_VAR 0 2
11748: PUSH
11749: LD_VAR 0 1
11753: PUSH
11754: FOR_IN
11755: IFFALSE 11768
// destroyunit ( tmp1 ) ;
11757: LD_VAR 0 2
11761: PPUSH
11762: CALL_OW 65
11766: GO 11754
11768: POP
11769: POP
// if unitfilter ( guards , [ [ f_ok ] ] ) then
11770: LD_LOC 8
11774: PPUSH
11775: LD_INT 50
11777: PUSH
11778: EMPTY
11779: LIST
11780: PUSH
11781: EMPTY
11782: LIST
11783: PPUSH
11784: CALL_OW 72
11788: IFFALSE 11886
// begin achjo = achjo + 1 ;
11790: LD_ADDR_LOC 9
11794: PUSH
11795: LD_LOC 9
11799: PUSH
11800: LD_INT 1
11802: PLUS
11803: ST_TO_ADDR
// if ( achjo mod 5 ) = 0 then
11804: LD_LOC 9
11808: PUSH
11809: LD_INT 5
11811: MOD
11812: PUSH
11813: LD_INT 0
11815: EQUAL
11816: IFFALSE 11883
// for tmp = 1 to 6 do
11818: LD_ADDR_VAR 0 1
11822: PUSH
11823: DOUBLE
11824: LD_INT 1
11826: DEC
11827: ST_TO_ADDR
11828: LD_INT 6
11830: PUSH
11831: FOR_TO
11832: IFFALSE 11881
// commovexy ( guards [ tmp ] , guard_out_ [ tmp ] [ 1 ] , guard_out_ [ tmp ] [ 2 ] ) ;
11834: LD_LOC 8
11838: PUSH
11839: LD_VAR 0 1
11843: ARRAY
11844: PPUSH
11845: LD_EXP 20
11849: PUSH
11850: LD_VAR 0 1
11854: ARRAY
11855: PUSH
11856: LD_INT 1
11858: ARRAY
11859: PPUSH
11860: LD_EXP 20
11864: PUSH
11865: LD_VAR 0 1
11869: ARRAY
11870: PUSH
11871: LD_INT 2
11873: ARRAY
11874: PPUSH
11875: CALL_OW 111
11879: GO 11831
11881: POP
11882: POP
// enable ;
11883: ENABLE
// end else
11884: GO 11886
// ; end ; end_of_file
11886: PPOPN 2
11888: END
// every 0 0$2 + 0 0$0.1 do
11889: GO 11891
11891: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
11892: LD_INT 22
11894: PUSH
11895: LD_INT 7
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: PUSH
11905: LD_INT 25
11907: PUSH
11908: LD_INT 12
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 25
11917: PUSH
11918: LD_INT 16
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 25
11927: PUSH
11928: LD_INT 15
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 25
11937: PUSH
11938: LD_INT 17
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 69
11960: PUSH
11961: LD_INT 22
11963: PUSH
11964: LD_INT 7
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 21
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 3
11983: PUSH
11984: LD_INT 2
11986: PUSH
11987: LD_INT 25
11989: PUSH
11990: LD_INT 12
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 25
11999: PUSH
12000: LD_INT 16
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 25
12009: PUSH
12010: LD_INT 15
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 25
12019: PUSH
12020: LD_INT 17
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: PPUSH
12043: CALL_OW 69
12047: GREATER
12048: IFFALSE 12059
// begin SetAchievement ( ACH_POTA ) ;
12050: LD_STRING ACH_POTA
12052: PPUSH
12053: CALL_OW 543
// exit ;
12057: GO 12060
// end ; enable ;
12059: ENABLE
// end ;
12060: END
// export function SA_OnJoanAndLisaJoinedAlliance ( l , j ) ; var n ; begin
12061: LD_INT 0
12063: PPUSH
12064: PPUSH
// n = 0 ;
12065: LD_ADDR_VAR 0 4
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// if j then
12073: LD_VAR 0 2
12077: IFFALSE 12093
// n = n + 1 ;
12079: LD_ADDR_VAR 0 4
12083: PUSH
12084: LD_VAR 0 4
12088: PUSH
12089: LD_INT 1
12091: PLUS
12092: ST_TO_ADDR
// if l then
12093: LD_VAR 0 1
12097: IFFALSE 12113
// n = n + 1 ;
12099: LD_ADDR_VAR 0 4
12103: PUSH
12104: LD_VAR 0 4
12108: PUSH
12109: LD_INT 1
12111: PLUS
12112: ST_TO_ADDR
// SetAchievementEX ( ACH_MED , n ) ;
12113: LD_STRING ACH_MED
12115: PPUSH
12116: LD_VAR 0 4
12120: PPUSH
12121: CALL_OW 564
// if j and l then
12125: LD_VAR 0 2
12129: PUSH
12130: LD_VAR 0 1
12134: AND
12135: IFFALSE 12144
// SetAchievement ( ACH_MED ) ;
12137: LD_STRING ACH_MED
12139: PPUSH
12140: CALL_OW 543
// end ;
12144: LD_VAR 0 3
12148: RET
