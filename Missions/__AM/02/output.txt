// export test , testing ; export americans , americans1 , russians , russians1 ; export John , Cyrus , Bobby , Khatam , Nick , Lisa ; export AmME1 , AmFE2 , AmMSo3 ; export Powell ; export AmD1 , AmD2 , AmD3 , AmD4 ; export AmR1 , AmR2 , RuR1 , RuR2 ; export Time_of_visit , Time_of_attack , vehicle_goes , escape_flag , flee ; export Time_of_capture , vehicles_detected , uncanny_vehicles ; export Khatam_met_americans , Khatam_met_MM , Mikhail_placed , Mikhail_captured ; export resumption_of_talk , depot , Mikhail_in_depot , great_escape , attack , mikhail_marked_for_death ; export remove_mikhail , conversation , Mikhails_escape ; export Number_of_tigers ; export Dep1_lives , Dep2_lives , rep , Mikhails_lives , firing1 , firing2 , russians_attack , russians_attack1 ; export rsol1 , rsol2 , rsol3 , rsol4 , rsol5 , rsol6 , rdrv1 , rdrv2 , rv1 , rv2 ; export Mikhail , vehicle3 , vehicle4 , driver3 , driver4 ; export tigers , tiger1 , tiger2 , tiger3 , tiger4 ; export battle , number_of_crates , count , sergej_succeeds ; export vehicle1_fuel , vehicle2_fuel ; export tigers_allowed , remove_tigers ; export Engineers_not_dead , First_Capture ; export Attack_Distance , Eng_Skill , Sc_Skill , guard_skill ; export Lives_to_Retreat , lost_units ; export Mikhails_Escape_Disabled ; export Initial_Lives , Attack_canceled ; export RuR_lives , JMM_saw_east_guard , East_guard_seen ; export vehicle1_new , vehicle2_new ; export escape_dialogue , vehicle_goes_flag ; export Dialogue_Number , Skip ; export tiger_skill , russ_attack , drivers_skill , soldiers_skill , vehicle_lives ; export RusEast , RusNorth ; export Alive , RunDelay ; export Init_lives , Tested_Americans ; export Lives_Jmm , Lives_Bobby , Lives_Cyrus ; function Prepare_difficulty ; begin
   0: LD_INT 0
   2: PPUSH
// tiger_skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
   3: LD_ADDR_EXP 103
   7: PUSH
   8: LD_INT 0
  10: PUSH
  11: LD_INT 1
  13: PUSH
  14: LD_INT 2
  16: PUSH
  17: EMPTY
  18: LIST
  19: LIST
  20: LIST
  21: PUSH
  22: LD_OWVAR 67
  26: ARRAY
  27: ST_TO_ADDR
// drivers_skill = [ 0 , 1 , 3 ] [ Difficulty ] ;
  28: LD_ADDR_EXP 105
  32: PUSH
  33: LD_INT 0
  35: PUSH
  36: LD_INT 1
  38: PUSH
  39: LD_INT 3
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: LIST
  46: PUSH
  47: LD_OWVAR 67
  51: ARRAY
  52: ST_TO_ADDR
// soldiers_skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
  53: LD_ADDR_EXP 106
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 2
  66: PUSH
  67: EMPTY
  68: LIST
  69: LIST
  70: LIST
  71: PUSH
  72: LD_OWVAR 67
  76: ARRAY
  77: ST_TO_ADDR
// vehicle_lives = [ 450 , 600 , 1000 ] [ Difficulty ] ;
  78: LD_ADDR_EXP 107
  82: PUSH
  83: LD_INT 450
  85: PUSH
  86: LD_INT 600
  88: PUSH
  89: LD_INT 1000
  91: PUSH
  92: EMPTY
  93: LIST
  94: LIST
  95: LIST
  96: PUSH
  97: LD_OWVAR 67
 101: ARRAY
 102: ST_TO_ADDR
// number_of_crates = [ 5 , 4 , 3 ] [ Difficulty ] ;
 103: LD_ADDR_EXP 76
 107: PUSH
 108: LD_INT 5
 110: PUSH
 111: LD_INT 4
 113: PUSH
 114: LD_INT 3
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: PUSH
 122: LD_OWVAR 67
 126: ARRAY
 127: ST_TO_ADDR
// vehicle1_fuel = [ 50 , 45 , 35 ] [ Difficulty ] ;
 128: LD_ADDR_EXP 79
 132: PUSH
 133: LD_INT 50
 135: PUSH
 136: LD_INT 45
 138: PUSH
 139: LD_INT 35
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: PUSH
 147: LD_OWVAR 67
 151: ARRAY
 152: ST_TO_ADDR
// vehicle2_fuel = [ 55 , 50 , 40 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 80
 157: PUSH
 158: LD_INT 55
 160: PUSH
 161: LD_INT 50
 163: PUSH
 164: LD_INT 40
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// Attack_Distance = [ 17 , 16 , 15 ] [ Difficulty ] ;
 178: LD_ADDR_EXP 85
 182: PUSH
 183: LD_INT 17
 185: PUSH
 186: LD_INT 16
 188: PUSH
 189: LD_INT 15
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: LIST
 196: PUSH
 197: LD_OWVAR 67
 201: ARRAY
 202: ST_TO_ADDR
// Eng_Skill = [ 0 , 0 , 2 ] [ Difficulty ] ;
 203: LD_ADDR_EXP 86
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: LD_OWVAR 67
 226: ARRAY
 227: ST_TO_ADDR
// Sc_Skill = [ 0 , 0 , 2 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 87
 232: PUSH
 233: LD_INT 0
 235: PUSH
 236: LD_INT 0
 238: PUSH
 239: LD_INT 2
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// RunDelay = [ [ 106 , 18 ] , [ 103 , 12 ] , [ 99 , 5 ] ] [ Difficulty ] ;
 253: LD_ADDR_EXP 111
 257: PUSH
 258: LD_INT 106
 260: PUSH
 261: LD_INT 18
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 103
 270: PUSH
 271: LD_INT 12
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: LD_INT 99
 280: PUSH
 281: LD_INT 5
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// ComMoveXY ( RusEM1 , RunDelay [ 1 ] , RunDelay [ 2 ] ) ;
 299: LD_INT 6
 301: PPUSH
 302: LD_EXP 111
 306: PUSH
 307: LD_INT 1
 309: ARRAY
 310: PPUSH
 311: LD_EXP 111
 315: PUSH
 316: LD_INT 2
 318: ARRAY
 319: PPUSH
 320: CALL_OW 111
// AddComHold ( RusEM1 ) ;
 324: LD_INT 6
 326: PPUSH
 327: CALL_OW 200
// Guard_Skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
 331: LD_ADDR_EXP 88
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: LD_INT 2
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: PUSH
 350: LD_OWVAR 67
 354: ARRAY
 355: ST_TO_ADDR
// Lives_to_Retreat = [ 450 , 500 , 600 ] [ Difficulty ] ;
 356: LD_ADDR_EXP 89
 360: PUSH
 361: LD_INT 450
 363: PUSH
 364: LD_INT 500
 366: PUSH
 367: LD_INT 600
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: LD_OWVAR 67
 379: ARRAY
 380: ST_TO_ADDR
// RuR_lives = [ 500 , 800 , 1000 ] [ Difficulty ] ;
 381: LD_ADDR_EXP 94
 385: PUSH
 386: LD_INT 500
 388: PUSH
 389: LD_INT 800
 391: PUSH
 392: LD_INT 1000
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// end ;
 406: LD_VAR 0 1
 410: RET
// function Init ; begin
 411: LD_INT 0
 413: PPUSH
// tigers = [ tiger1 , tiger2 , tiger3 , tiger4 ] ;
 414: LD_ADDR_EXP 70
 418: PUSH
 419: LD_EXP 71
 423: PUSH
 424: LD_EXP 72
 428: PUSH
 429: LD_EXP 73
 433: PUSH
 434: LD_EXP 74
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// americans = 1 ;
 445: LD_ADDR_EXP 3
 449: PUSH
 450: LD_INT 1
 452: ST_TO_ADDR
// americans1 = 4 ;
 453: LD_ADDR_EXP 4
 457: PUSH
 458: LD_INT 4
 460: ST_TO_ADDR
// russians = 3 ;
 461: LD_ADDR_EXP 5
 465: PUSH
 466: LD_INT 3
 468: ST_TO_ADDR
// russians1 = 6 ;
 469: LD_ADDR_EXP 6
 473: PUSH
 474: LD_INT 6
 476: ST_TO_ADDR
// SetAttitude ( americans , russians , att_enemy , true ) ;
 477: LD_EXP 3
 481: PPUSH
 482: LD_EXP 5
 486: PPUSH
 487: LD_INT 2
 489: PPUSH
 490: LD_INT 1
 492: PPUSH
 493: CALL_OW 80
// SetAttitude ( americans , russians1 , att_neutral , false ) ;
 497: LD_EXP 3
 501: PPUSH
 502: LD_EXP 6
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 80
// SetAttitude ( russians1 , americans , att_neutral , false ) ;
 517: LD_EXP 6
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: LD_INT 0
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL_OW 80
// SetAttitude ( russians , russians1 , att_friend , true ) ;
 537: LD_EXP 5
 541: PPUSH
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 1
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: CALL_OW 80
// SetAttitude ( americans , americans1 , att_friend , true ) ;
 557: LD_EXP 3
 561: PPUSH
 562: LD_EXP 4
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL_OW 80
// RusEast = [ RusESo1 , RusESo2 ] ;
 577: LD_ADDR_EXP 108
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 8
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: ST_TO_ADDR
// RusNorth = [ RusNSo1 , RusNSo2 , RusNSc1 ] ;
 592: LD_ADDR_EXP 109
 596: PUSH
 597: LD_INT 3
 599: PUSH
 600: LD_INT 14
 602: PUSH
 603: LD_INT 25
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// ComRemember ( RusNorth ) ;
 611: LD_EXP 109
 615: PPUSH
 616: CALL_OW 143
// ComFree ( RusNorth ) ;
 620: LD_EXP 109
 624: PPUSH
 625: CALL_OW 139
// Dep1_lives = 1000 ;
 629: LD_ADDR_EXP 47
 633: PUSH
 634: LD_INT 1000
 636: ST_TO_ADDR
// Dep2_lives = 1000 ;
 637: LD_ADDR_EXP 48
 641: PUSH
 642: LD_INT 1000
 644: ST_TO_ADDR
// InitUc ;
 645: CALL_OW 18
// InitHc ;
 649: CALL_OW 19
// InitVc ;
 653: CALL_OW 20
// uc_direction = 1 ;
 657: LD_ADDR_OWVAR 24
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// uc_nation = nation_russian ;
 665: LD_ADDR_OWVAR 21
 669: PUSH
 670: LD_INT 3
 672: ST_TO_ADDR
// uc_side = russians ;
 673: LD_ADDR_OWVAR 20
 677: PUSH
 678: LD_EXP 5
 682: ST_TO_ADDR
// SetFuel ( vehicle1 , vehicle1_fuel ) ;
 683: LD_INT 5
 685: PPUSH
 686: LD_EXP 79
 690: PPUSH
 691: CALL_OW 240
// SetFuel ( vehicle2 , vehicle2_fuel ) ;
 695: LD_INT 4
 697: PPUSH
 698: LD_EXP 80
 702: PPUSH
 703: CALL_OW 240
// vc_chassis = ru_medium_wheeled ;
 707: LD_ADDR_OWVAR 37
 711: PUSH
 712: LD_INT 21
 714: ST_TO_ADDR
// vc_engine = engine_combustion ;
 715: LD_ADDR_OWVAR 39
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// vc_control = control_manual ;
 723: LD_ADDR_OWVAR 38
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
 731: LD_ADDR_OWVAR 40
 735: PUSH
 736: LD_INT 51
 738: ST_TO_ADDR
// vehicle3 = CreateVehicle ;
 739: LD_ADDR_EXP 66
 743: PUSH
 744: CALL_OW 45
 748: ST_TO_ADDR
// vehicle4 = CreateVehicle ;
 749: LD_ADDR_EXP 67
 753: PUSH
 754: CALL_OW 45
 758: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
 759: LD_ADDR_OWVAR 40
 763: PUSH
 764: LD_INT 42
 766: ST_TO_ADDR
// rv1 = CreateVehicle ;
 767: LD_ADDR_EXP 63
 771: PUSH
 772: CALL_OW 45
 776: ST_TO_ADDR
// SetLives ( rv1 , vehicle_lives ) ;
 777: LD_EXP 63
 781: PPUSH
 782: LD_EXP 107
 786: PPUSH
 787: CALL_OW 234
// rv2 = CreateVehicle ;
 791: LD_ADDR_EXP 64
 795: PUSH
 796: CALL_OW 45
 800: ST_TO_ADDR
// Time_of_visit = 550 550$0 ;
 801: LD_ADDR_EXP 25
 805: PUSH
 806: LD_INT 1155000
 808: ST_TO_ADDR
// Time_of_attack = 550 550$0 ;
 809: LD_ADDR_EXP 26
 813: PUSH
 814: LD_INT 1155000
 816: ST_TO_ADDR
// Time_of_capture = 550 550$0 ;
 817: LD_ADDR_EXP 30
 821: PUSH
 822: LD_INT 1155000
 824: ST_TO_ADDR
// flee = 0 ;
 825: LD_ADDR_EXP 29
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// hc_sex = sex_male ;
 833: LD_ADDR_OWVAR 27
 837: PUSH
 838: LD_INT 1
 840: ST_TO_ADDR
// hc_class = class_mechanic ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 3
 848: ST_TO_ADDR
// hc_skills = [ 1 , 0 , drivers_skill , 0 ] ;
 849: LD_ADDR_OWVAR 31
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: LD_INT 0
 859: PUSH
 860: LD_EXP 105
 864: PUSH
 865: LD_INT 0
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
 874: LD_ADDR_OWVAR 29
 878: PUSH
 879: LD_INT 10
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: ST_TO_ADDR
// hc_name =  ;
 889: LD_ADDR_OWVAR 26
 893: PUSH
 894: LD_STRING 
 896: ST_TO_ADDR
// driver3 = CreateHuman ;
 897: LD_ADDR_EXP 68
 901: PUSH
 902: CALL_OW 44
 906: ST_TO_ADDR
// PlaceHumanInUnit ( driver3 , vehicle3 ) ;
 907: LD_EXP 68
 911: PPUSH
 912: LD_EXP 66
 916: PPUSH
 917: CALL_OW 52
// hc_name =  ;
 921: LD_ADDR_OWVAR 26
 925: PUSH
 926: LD_STRING 
 928: ST_TO_ADDR
// driver4 = CreateHuman ;
 929: LD_ADDR_EXP 69
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// PlaceHumanInUnit ( driver4 , vehicle4 ) ;
 939: LD_EXP 69
 943: PPUSH
 944: LD_EXP 67
 948: PPUSH
 949: CALL_OW 52
// hc_name =  ;
 953: LD_ADDR_OWVAR 26
 957: PUSH
 958: LD_STRING 
 960: ST_TO_ADDR
// hc_skills = [ 1 , 3 , drivers_skill + 1 , 0 ] ;
 961: LD_ADDR_OWVAR 31
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: LD_INT 3
 971: PUSH
 972: LD_EXP 105
 976: PUSH
 977: LD_INT 1
 979: PLUS
 980: PUSH
 981: LD_INT 0
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: ST_TO_ADDR
// hc_class = class_engineer ;
 990: LD_ADDR_OWVAR 28
 994: PUSH
 995: LD_INT 2
 997: ST_TO_ADDR
// rdrv1 = CreateHuman ;
 998: LD_ADDR_EXP 61
1002: PUSH
1003: CALL_OW 44
1007: ST_TO_ADDR
// rdrv2 = CreateHuman ;
1008: LD_ADDR_EXP 62
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( rdrv1 , rv1 ) ;
1018: LD_EXP 61
1022: PPUSH
1023: LD_EXP 63
1027: PPUSH
1028: CALL_OW 52
// PlaceHumanInUnit ( rdrv2 , rv2 ) ;
1032: LD_EXP 62
1036: PPUSH
1037: LD_EXP 64
1041: PPUSH
1042: CALL_OW 52
// hc_class = class_soldier ;
1046: LD_ADDR_OWVAR 28
1050: PUSH
1051: LD_INT 1
1053: ST_TO_ADDR
// hc_skills = [ soldiers_skill , 0 , 1 , 1 ] ;
1054: LD_ADDR_OWVAR 31
1058: PUSH
1059: LD_EXP 106
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
// hc_name =  ;
1079: LD_ADDR_OWVAR 26
1083: PUSH
1084: LD_STRING 
1086: ST_TO_ADDR
// rsol1 = CreateHuman ;
1087: LD_ADDR_EXP 55
1091: PUSH
1092: CALL_OW 44
1096: ST_TO_ADDR
// rsol4 = CreateHuman ;
1097: LD_ADDR_EXP 58
1101: PUSH
1102: CALL_OW 44
1106: ST_TO_ADDR
// hc_skills = [ soldiers_skill - 1 , 0 , 1 , 1 ] ;
1107: LD_ADDR_OWVAR 31
1111: PUSH
1112: LD_EXP 106
1116: PUSH
1117: LD_INT 1
1119: MINUS
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: ST_TO_ADDR
// rsol3 = CreateHuman ;
1136: LD_ADDR_EXP 57
1140: PUSH
1141: CALL_OW 44
1145: ST_TO_ADDR
// rsol5 = CreateHuman ;
1146: LD_ADDR_EXP 59
1150: PUSH
1151: CALL_OW 44
1155: ST_TO_ADDR
// hc_skills = [ soldiers_skill + 1 , 0 , 1 , 1 ] ;
1156: LD_ADDR_OWVAR 31
1160: PUSH
1161: LD_EXP 106
1165: PUSH
1166: LD_INT 1
1168: PLUS
1169: PUSH
1170: LD_INT 0
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// rsol2 = CreateHuman ;
1185: LD_ADDR_EXP 56
1189: PUSH
1190: CALL_OW 44
1194: ST_TO_ADDR
// hc_skills = [ soldiers_skill , 0 , 1 , 1 ] ;
1195: LD_ADDR_OWVAR 31
1199: PUSH
1200: LD_EXP 106
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 1
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// rsol6 = CreateHuman ;
1220: LD_ADDR_EXP 60
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// hc_sex = sex_male ;
1230: LD_ADDR_OWVAR 27
1234: PUSH
1235: LD_INT 1
1237: ST_TO_ADDR
// uc_side = russians1 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_EXP 6
1247: ST_TO_ADDR
// PrepareNewCharacter ( Mikhail ) ;
1248: LD_STRING Mikhail
1250: PPUSH
1251: CALL_OW 26
// hc_class = class_mechanic ;
1255: LD_ADDR_OWVAR 28
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// Mikhail = CreateHuman ;
1263: LD_ADDR_EXP 65
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// Mikhail_in_depot = false ;
1273: LD_ADDR_EXP 39
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// Mikhails_lives = 1000 ;
1281: LD_ADDR_EXP 50
1285: PUSH
1286: LD_INT 1000
1288: ST_TO_ADDR
// hc_gallery =  ;
1289: LD_ADDR_OWVAR 33
1293: PUSH
1294: LD_STRING 
1296: ST_TO_ADDR
// hc_face_number = 0 ;
1297: LD_ADDR_OWVAR 34
1301: PUSH
1302: LD_INT 0
1304: ST_TO_ADDR
// uc_nation = nation_american ;
1305: LD_ADDR_OWVAR 21
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// uc_side = americans ;
1313: LD_ADDR_OWVAR 20
1317: PUSH
1318: LD_EXP 3
1322: ST_TO_ADDR
// Lives_JMM = LoadVariable ( lives_jmm , 1000 ) ;
1323: LD_ADDR_EXP 114
1327: PUSH
1328: LD_STRING lives_jmm
1330: PPUSH
1331: LD_INT 1000
1333: PPUSH
1334: CALL_OW 30
1338: ST_TO_ADDR
// Lives_Bobby = LoadVariable ( lives_bobby , 1000 ) ;
1339: LD_ADDR_EXP 115
1343: PUSH
1344: LD_STRING lives_bobby
1346: PPUSH
1347: LD_INT 1000
1349: PPUSH
1350: CALL_OW 30
1354: ST_TO_ADDR
// Lives_Cyrus = LoadVariable ( lives_cyrus , 1000 ) ;
1355: LD_ADDR_EXP 116
1359: PUSH
1360: LD_STRING lives_cyrus
1362: PPUSH
1363: LD_INT 1000
1365: PPUSH
1366: CALL_OW 30
1370: ST_TO_ADDR
// if testing then
1371: LD_EXP 2
1375: IFFALSE 1411
// begin PrepareSoldier ( sex_male , 3 ) ;
1377: LD_INT 1
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: CALL_OW 381
// hc_name = Macmillan ;
1387: LD_ADDR_OWVAR 26
1391: PUSH
1392: LD_STRING Macmillan
1394: ST_TO_ADDR
// John = CreateHuman ;
1395: LD_ADDR_EXP 7
1399: PUSH
1400: CALL_OW 44
1404: ST_TO_ADDR
// InitHc ;
1405: CALL_OW 19
// end else
1409: GO 1424
// John = CreateCharacter ( JMM ) ;
1411: LD_ADDR_EXP 7
1415: PUSH
1416: LD_STRING JMM
1418: PPUSH
1419: CALL_OW 34
1423: ST_TO_ADDR
// SetLives ( John , Lives_JMM ) ;
1424: LD_EXP 7
1428: PPUSH
1429: LD_EXP 114
1433: PPUSH
1434: CALL_OW 234
// if not John then
1438: LD_EXP 7
1442: NOT
1443: IFFALSE 1458
// BuildQuery ( Error: John Macmillan not found!!! , [ OK ] ) ;
1445: LD_STRING Error: John Macmillan not found!!!
1447: PPUSH
1448: LD_STRING OK
1450: PUSH
1451: EMPTY
1452: LIST
1453: PPUSH
1454: CALL_OW 99
// if testing then
1458: LD_EXP 2
1462: IFFALSE 1498
// begin PrepareSoldier ( sex_male , 0 ) ;
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 381
// hc_name = Powell ;
1474: LD_ADDR_OWVAR 26
1478: PUSH
1479: LD_STRING Powell
1481: ST_TO_ADDR
// Powell = CreateHuman ;
1482: LD_ADDR_EXP 16
1486: PUSH
1487: CALL_OW 44
1491: ST_TO_ADDR
// InitHc ;
1492: CALL_OW 19
// end else
1496: GO 1511
// Powell = CreateCharacter ( Powell ) ;
1498: LD_ADDR_EXP 16
1502: PUSH
1503: LD_STRING Powell
1505: PPUSH
1506: CALL_OW 34
1510: ST_TO_ADDR
// if not Powell then
1511: LD_EXP 16
1515: NOT
1516: IFFALSE 1531
// BuildQuery ( Error: Powell not found!!! , [ OK ] ) ;
1518: LD_STRING Error: Powell not found!!!
1520: PPUSH
1521: LD_STRING OK
1523: PUSH
1524: EMPTY
1525: LIST
1526: PPUSH
1527: CALL_OW 99
// Bobby = CreateCharacter ( Bobby ) ;
1531: LD_ADDR_EXP 9
1535: PUSH
1536: LD_STRING Bobby
1538: PPUSH
1539: CALL_OW 34
1543: ST_TO_ADDR
// if Bobby then
1544: LD_EXP 9
1548: IFFALSE 1564
// SetLives ( Bobby , Lives_Bobby ) ;
1550: LD_EXP 9
1554: PPUSH
1555: LD_EXP 115
1559: PPUSH
1560: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
1564: LD_ADDR_EXP 8
1568: PUSH
1569: LD_STRING Cyrus
1571: PPUSH
1572: CALL_OW 34
1576: ST_TO_ADDR
// if Cyrus then
1577: LD_EXP 8
1581: IFFALSE 1597
// SetLives ( Cyrus , Lives_Cyrus ) ;
1583: LD_EXP 8
1587: PPUSH
1588: LD_EXP 116
1592: PPUSH
1593: CALL_OW 234
// uc_side = americans1 ;
1597: LD_ADDR_OWVAR 20
1601: PUSH
1602: LD_EXP 4
1606: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
1607: LD_ADDR_EXP 12
1611: PUSH
1612: LD_STRING Lisa
1614: PPUSH
1615: CALL_OW 25
1619: ST_TO_ADDR
// uc_side = americans1 ;
1620: LD_ADDR_OWVAR 20
1624: PUSH
1625: LD_EXP 4
1629: ST_TO_ADDR
// Khatam = NewCharacter ( Khatam ) ;
1630: LD_ADDR_EXP 10
1634: PUSH
1635: LD_STRING Khatam
1637: PPUSH
1638: CALL_OW 25
1642: ST_TO_ADDR
// SetClass ( Khatam , class_scientistic ) ;
1643: LD_EXP 10
1647: PPUSH
1648: LD_INT 4
1650: PPUSH
1651: CALL_OW 336
// Khatam_met_MM = false ;
1655: LD_ADDR_EXP 34
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// uc_side = americans1 ;
1663: LD_ADDR_OWVAR 20
1667: PUSH
1668: LD_EXP 4
1672: ST_TO_ADDR
// hc_sex = sex_male ;
1673: LD_ADDR_OWVAR 27
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// hc_class = class_engineer ;
1681: LD_ADDR_OWVAR 28
1685: PUSH
1686: LD_INT 2
1688: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 0 ] ;
1689: LD_ADDR_OWVAR 31
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: LD_INT 2
1699: PUSH
1700: LD_INT 1
1702: PUSH
1703: LD_INT 0
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: ST_TO_ADDR
// hc_name =  ;
1712: LD_ADDR_OWVAR 26
1716: PUSH
1717: LD_STRING 
1719: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
1720: LD_ADDR_OWVAR 29
1724: PUSH
1725: LD_INT 10
1727: PUSH
1728: LD_INT 10
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: ST_TO_ADDR
// AmME1 = CreateHuman ;
1735: LD_ADDR_EXP 13
1739: PUSH
1740: CALL_OW 44
1744: ST_TO_ADDR
// hc_sex = sex_female ;
1745: LD_ADDR_OWVAR 27
1749: PUSH
1750: LD_INT 2
1752: ST_TO_ADDR
// hc_skills = [ 1 , 1 , 2 , 1 ] ;
1753: LD_ADDR_OWVAR 31
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: ST_TO_ADDR
// hc_name =  ;
1776: LD_ADDR_OWVAR 26
1780: PUSH
1781: LD_STRING 
1783: ST_TO_ADDR
// AmFE2 = CreateHuman ;
1784: LD_ADDR_EXP 14
1788: PUSH
1789: CALL_OW 44
1793: ST_TO_ADDR
// hc_sex = sex_male ;
1794: LD_ADDR_OWVAR 27
1798: PUSH
1799: LD_INT 1
1801: ST_TO_ADDR
// hc_class = class_soldier ;
1802: LD_ADDR_OWVAR 28
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 1 , 0 ] ;
1810: LD_ADDR_OWVAR 31
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: LD_INT 1
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: ST_TO_ADDR
// hc_name =  ;
1833: LD_ADDR_OWVAR 26
1837: PUSH
1838: LD_STRING 
1840: ST_TO_ADDR
// AmMSo3 = CreateHuman ;
1841: LD_ADDR_EXP 15
1845: PUSH
1846: CALL_OW 44
1850: ST_TO_ADDR
// if John then
1851: LD_EXP 7
1855: IFFALSE 1875
// PlaceUnitXY ( John , 44 , 72 , false ) ;
1857: LD_EXP 7
1861: PPUSH
1862: LD_INT 44
1864: PPUSH
1865: LD_INT 72
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 48
// if Bobby then
1875: LD_EXP 9
1879: IFFALSE 1899
// PlaceUnitXY ( Bobby , 43 , 74 , false ) ;
1881: LD_EXP 9
1885: PPUSH
1886: LD_INT 43
1888: PPUSH
1889: LD_INT 74
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 48
// if Cyrus then
1899: LD_EXP 8
1903: IFFALSE 1923
// PlaceUnitXY ( Cyrus , 47 , 76 , false ) ;
1905: LD_EXP 8
1909: PPUSH
1910: LD_INT 47
1912: PPUSH
1913: LD_INT 76
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 48
// PlaceUnitXY ( Lisa , 30 , 55 , false ) ;
1923: LD_EXP 12
1927: PPUSH
1928: LD_INT 30
1930: PPUSH
1931: LD_INT 55
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 48
// ComCrawl ( Lisa ) ;
1941: LD_EXP 12
1945: PPUSH
1946: CALL_OW 137
// AddComHold ( Lisa ) ;
1950: LD_EXP 12
1954: PPUSH
1955: CALL_OW 200
// AddComTurnXY ( Lisa , 34 , 60 ) ;
1959: LD_EXP 12
1963: PPUSH
1964: LD_INT 34
1966: PPUSH
1967: LD_INT 60
1969: PPUSH
1970: CALL_OW 178
// PlaceUnitXY ( AmME1 , 31 , 50 , false ) ;
1974: LD_EXP 13
1978: PPUSH
1979: LD_INT 31
1981: PPUSH
1982: LD_INT 50
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 48
// ComCrawl ( AmME1 ) ;
1992: LD_EXP 13
1996: PPUSH
1997: CALL_OW 137
// AddComHold ( AmME1 ) ;
2001: LD_EXP 13
2005: PPUSH
2006: CALL_OW 200
// AddComTurnXY ( AmME1 , 34 , 50 ) ;
2010: LD_EXP 13
2014: PPUSH
2015: LD_INT 34
2017: PPUSH
2018: LD_INT 50
2020: PPUSH
2021: CALL_OW 178
// PlaceUnitXY ( AmFE2 , 33 , 51 , false ) ;
2025: LD_EXP 14
2029: PPUSH
2030: LD_INT 33
2032: PPUSH
2033: LD_INT 51
2035: PPUSH
2036: LD_INT 0
2038: PPUSH
2039: CALL_OW 48
// ComCrawl ( AmFE2 ) ;
2043: LD_EXP 14
2047: PPUSH
2048: CALL_OW 137
// AddComHold ( AmFE2 ) ;
2052: LD_EXP 14
2056: PPUSH
2057: CALL_OW 200
// AddComTurnXY ( AmFE2 , 34 , 50 ) ;
2061: LD_EXP 14
2065: PPUSH
2066: LD_INT 34
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: CALL_OW 178
// ComFree ( [ John , Bobby , Cyrus ] ) ;
2076: LD_EXP 7
2080: PUSH
2081: LD_EXP 9
2085: PUSH
2086: LD_EXP 8
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PPUSH
2096: CALL_OW 139
// Nick = 0 ;
2100: LD_ADDR_EXP 11
2104: PUSH
2105: LD_INT 0
2107: ST_TO_ADDR
// if not Cyrus and not Bobby then
2108: LD_EXP 8
2112: NOT
2113: PUSH
2114: LD_EXP 9
2118: NOT
2119: AND
2120: IFFALSE 2263
// begin uc_side = americans1 ;
2122: LD_ADDR_OWVAR 20
2126: PUSH
2127: LD_EXP 4
2131: ST_TO_ADDR
// uc_nation = nation_american ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// hc_sex = sex_male ;
2140: LD_ADDR_OWVAR 27
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_class = class_soldier ;
2148: LD_ADDR_OWVAR 28
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_skills = [ 1 , 1 , 1 , 0 ] ;
2156: LD_ADDR_OWVAR 31
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: LD_INT 0
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: ST_TO_ADDR
// hc_name =  ;
2179: LD_ADDR_OWVAR 26
2183: PUSH
2184: LD_STRING 
2186: ST_TO_ADDR
// hc_attr = [ 11 , 8 ] ;
2187: LD_ADDR_OWVAR 29
2191: PUSH
2192: LD_INT 11
2194: PUSH
2195: LD_INT 8
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: ST_TO_ADDR
// Nick = CreateHuman ;
2202: LD_ADDR_EXP 11
2206: PUSH
2207: CALL_OW 44
2211: ST_TO_ADDR
// PlaceUnitXY ( Nick , 32 , 49 , false ) ;
2212: LD_EXP 11
2216: PPUSH
2217: LD_INT 32
2219: PPUSH
2220: LD_INT 49
2222: PPUSH
2223: LD_INT 0
2225: PPUSH
2226: CALL_OW 48
// comCrawl ( Nick ) ;
2230: LD_EXP 11
2234: PPUSH
2235: CALL_OW 137
// AddComHold ( Nick ) ;
2239: LD_EXP 11
2243: PPUSH
2244: CALL_OW 200
// AddComTurnXY ( Nick , 34 , 50 ) ;
2248: LD_EXP 11
2252: PPUSH
2253: LD_INT 34
2255: PPUSH
2256: LD_INT 50
2258: PPUSH
2259: CALL_OW 178
// end ; hc_sex = sex_male ;
2263: LD_ADDR_OWVAR 27
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// hc_class = class_soldier ;
2271: LD_ADDR_OWVAR 28
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 1 ] ;
2279: LD_ADDR_OWVAR 31
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: LD_INT 2
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: ST_TO_ADDR
// hc_name =  ;
2302: LD_ADDR_OWVAR 26
2306: PUSH
2307: LD_STRING 
2309: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2310: LD_ADDR_OWVAR 29
2314: PUSH
2315: LD_INT 10
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: ST_TO_ADDR
// uc_direction = 1 ;
2325: LD_ADDR_OWVAR 24
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// AmR1 = CreateHuman ;
2333: LD_ADDR_EXP 21
2337: PUSH
2338: CALL_OW 44
2342: ST_TO_ADDR
// hc_name =  ;
2343: LD_ADDR_OWVAR 26
2347: PUSH
2348: LD_STRING 
2350: ST_TO_ADDR
// uc_direction = 1 ;
2351: LD_ADDR_OWVAR 24
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// AmR2 = CreateHuman ;
2359: LD_ADDR_EXP 22
2363: PUSH
2364: CALL_OW 44
2368: ST_TO_ADDR
// uc_side = russians ;
2369: LD_ADDR_OWVAR 20
2373: PUSH
2374: LD_EXP 5
2378: ST_TO_ADDR
// uc_nation = nation_russian ;
2379: LD_ADDR_OWVAR 21
2383: PUSH
2384: LD_INT 3
2386: ST_TO_ADDR
// hc_sex = sex_male ;
2387: LD_ADDR_OWVAR 27
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// hc_class = class_soldier ;
2395: LD_ADDR_OWVAR 28
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 0 , 0 ] ;
2403: LD_ADDR_OWVAR 31
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: LD_INT 1
2413: PUSH
2414: LD_INT 0
2416: PUSH
2417: LD_INT 0
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2426: LD_ADDR_OWVAR 29
2430: PUSH
2431: LD_INT 10
2433: PUSH
2434: LD_INT 10
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: ST_TO_ADDR
// hc_name =  ;
2441: LD_ADDR_OWVAR 26
2445: PUSH
2446: LD_STRING 
2448: ST_TO_ADDR
// uc_direction = 4 ;
2449: LD_ADDR_OWVAR 24
2453: PUSH
2454: LD_INT 4
2456: ST_TO_ADDR
// RuR1 = CreateHuman ;
2457: LD_ADDR_EXP 23
2461: PUSH
2462: CALL_OW 44
2466: ST_TO_ADDR
// SetLives ( RuR1 , RuR_lives ) ;
2467: LD_EXP 23
2471: PPUSH
2472: LD_EXP 94
2476: PPUSH
2477: CALL_OW 234
// hc_name =  ;
2481: LD_ADDR_OWVAR 26
2485: PUSH
2486: LD_STRING 
2488: ST_TO_ADDR
// uc_direction = 4 ;
2489: LD_ADDR_OWVAR 24
2493: PUSH
2494: LD_INT 4
2496: ST_TO_ADDR
// RuR2 = CreateHuman ;
2497: LD_ADDR_EXP 24
2501: PUSH
2502: CALL_OW 44
2506: ST_TO_ADDR
// SetLives ( RuR2 , RuR_lives ) ;
2507: LD_EXP 24
2511: PPUSH
2512: LD_EXP 94
2516: PPUSH
2517: CALL_OW 234
// SetSkill ( RusNE1 , skill_engineering , eng_skill ) ;
2521: LD_INT 26
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: LD_EXP 86
2531: PPUSH
2532: CALL_OW 237
// SetSkill ( RusNSc1 , skill_scientistic , sc_skill ) ;
2536: LD_INT 25
2538: PPUSH
2539: LD_INT 4
2541: PPUSH
2542: LD_EXP 87
2546: PPUSH
2547: CALL_OW 237
// SetSkill ( guard1 , skill_combat , guard_skill ) ;
2551: LD_INT 11
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_EXP 88
2561: PPUSH
2562: CALL_OW 237
// SetSkill ( guard2 , skill_combat , guard_skill ) ;
2566: LD_INT 12
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_EXP 88
2576: PPUSH
2577: CALL_OW 237
// SetSkill ( guard3 , skill_combat , guard_skill ) ;
2581: LD_INT 7
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: LD_EXP 88
2591: PPUSH
2592: CALL_OW 237
// case Difficulty of 1 :
2596: LD_OWVAR 67
2600: PUSH
2601: LD_INT 1
2603: DOUBLE
2604: EQUAL
2605: IFTRUE 2609
2607: GO 2685
2609: POP
// begin SetLives ( BrW1 , 600 ) ;
2610: LD_INT 29
2612: PPUSH
2613: LD_INT 600
2615: PPUSH
2616: CALL_OW 234
// DestroyUnit ( BrW3 ) ;
2620: LD_INT 30
2622: PPUSH
2623: CALL_OW 65
// DestroyUnit ( Brw2 ) ;
2627: LD_INT 9
2629: PPUSH
2630: CALL_OW 65
// DestroyUnit ( RusNSo4 ) ;
2634: LD_INT 28
2636: PPUSH
2637: CALL_OW 65
// DestroyUnit ( RusNSo5 ) ;
2641: LD_INT 24
2643: PPUSH
2644: CALL_OW 65
// DestroyUnit ( RusNSo6 ) ;
2648: LD_INT 31
2650: PPUSH
2651: CALL_OW 65
// DestroyUnit ( RusNE1 ) ;
2655: LD_INT 26
2657: PPUSH
2658: CALL_OW 65
// DestroyUnit ( guard2 ) ;
2662: LD_INT 12
2664: PPUSH
2665: CALL_OW 65
// DestroyUnit ( guard3 ) ;
2669: LD_INT 7
2671: PPUSH
2672: CALL_OW 65
// DestroyUnit ( RusNSo3 ) ;
2676: LD_INT 27
2678: PPUSH
2679: CALL_OW 65
// end ; 2 :
2683: GO 2760
2685: LD_INT 2
2687: DOUBLE
2688: EQUAL
2689: IFTRUE 2693
2691: GO 2748
2693: POP
// begin SetLives ( BrW3 , 700 ) ;
2694: LD_INT 30
2696: PPUSH
2697: LD_INT 700
2699: PPUSH
2700: CALL_OW 234
// DestroyUnit ( Brw2 ) ;
2704: LD_INT 9
2706: PPUSH
2707: CALL_OW 65
// DestroyUnit ( RusNSo4 ) ;
2711: LD_INT 28
2713: PPUSH
2714: CALL_OW 65
// DestroyUnit ( RusNSo5 ) ;
2718: LD_INT 24
2720: PPUSH
2721: CALL_OW 65
// DestroyUnit ( RusNSo6 ) ;
2725: LD_INT 31
2727: PPUSH
2728: CALL_OW 65
// DestroyUnit ( RusNE1 ) ;
2732: LD_INT 26
2734: PPUSH
2735: CALL_OW 65
// DestroyUnit ( guard2 ) ;
2739: LD_INT 12
2741: PPUSH
2742: CALL_OW 65
// end ; 3 :
2746: GO 2760
2748: LD_INT 3
2750: DOUBLE
2751: EQUAL
2752: IFTRUE 2756
2754: GO 2759
2756: POP
// begin end ; end ;
2757: GO 2760
2759: POP
// battle = false ;
2760: LD_ADDR_EXP 75
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// count = 0 ;
2768: LD_ADDR_EXP 77
2772: PUSH
2773: LD_INT 0
2775: ST_TO_ADDR
// sergej_succeeds = 0 ;
2776: LD_ADDR_EXP 78
2780: PUSH
2781: LD_INT 0
2783: ST_TO_ADDR
// Khatam_met_americans = 1 ;
2784: LD_ADDR_EXP 33
2788: PUSH
2789: LD_INT 1
2791: ST_TO_ADDR
// disable ( Khatam_met_americans ) ;
2792: LD_EXP 33
2796: DISABLE_MARKED
// escape_flag = false ;
2797: LD_ADDR_EXP 28
2801: PUSH
2802: LD_INT 0
2804: ST_TO_ADDR
// vehicle_goes = 2 ;
2805: LD_ADDR_EXP 27
2809: PUSH
2810: LD_INT 2
2812: ST_TO_ADDR
// disable ( vehicle_goes ) ;
2813: LD_EXP 27
2817: DISABLE_MARKED
// Mikhail_placed = 3 ;
2818: LD_ADDR_EXP 35
2822: PUSH
2823: LD_INT 3
2825: ST_TO_ADDR
// disable ( mikhail_placed ) ;
2826: LD_EXP 35
2830: DISABLE_MARKED
// Mikhail_captured = 4 ;
2831: LD_ADDR_EXP 36
2835: PUSH
2836: LD_INT 4
2838: ST_TO_ADDR
// disable ( Mikhail_captured ) ;
2839: LD_EXP 36
2843: DISABLE_MARKED
// vehicles_detected = 5 ;
2844: LD_ADDR_EXP 31
2848: PUSH
2849: LD_INT 5
2851: ST_TO_ADDR
// disable ( vehicles_detected ) ;
2852: LD_EXP 31
2856: DISABLE_MARKED
// uncanny_vehicles = 6 ;
2857: LD_ADDR_EXP 32
2861: PUSH
2862: LD_INT 6
2864: ST_TO_ADDR
// depot = 8 ;
2865: LD_ADDR_EXP 38
2869: PUSH
2870: LD_INT 8
2872: ST_TO_ADDR
// disable ( depot ) ;
2873: LD_EXP 38
2877: DISABLE_MARKED
// great_escape = 9 ;
2878: LD_ADDR_EXP 40
2882: PUSH
2883: LD_INT 9
2885: ST_TO_ADDR
// disable ( great_escape ) ;
2886: LD_EXP 40
2890: DISABLE_MARKED
// attack = 10 ;
2891: LD_ADDR_EXP 41
2895: PUSH
2896: LD_INT 10
2898: ST_TO_ADDR
// disable ( attack ) ;
2899: LD_EXP 41
2903: DISABLE_MARKED
// remove_mikhail = 11 ;
2904: LD_ADDR_EXP 43
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// disable ( remove_mikhail ) ;
2912: LD_EXP 43
2916: DISABLE_MARKED
// conversation = 12 ;
2917: LD_ADDR_EXP 44
2921: PUSH
2922: LD_INT 12
2924: ST_TO_ADDR
// disable ( conversation ) ;
2925: LD_EXP 44
2929: DISABLE_MARKED
// Mikhails_escape = 13 ;
2930: LD_ADDR_EXP 45
2934: PUSH
2935: LD_INT 13
2937: ST_TO_ADDR
// disable ( Mikhails_escape ) ;
2938: LD_EXP 45
2942: DISABLE_MARKED
// rep = true ;
2943: LD_ADDR_EXP 49
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// firing1 = 14 ;
2951: LD_ADDR_EXP 51
2955: PUSH
2956: LD_INT 14
2958: ST_TO_ADDR
// disable ( firing1 ) ;
2959: LD_EXP 51
2963: DISABLE_MARKED
// firing2 = 15 ;
2964: LD_ADDR_EXP 52
2968: PUSH
2969: LD_INT 15
2971: ST_TO_ADDR
// disable ( firing2 ) ;
2972: LD_EXP 52
2976: DISABLE_MARKED
// russians_attack = 16 ;
2977: LD_ADDR_EXP 53
2981: PUSH
2982: LD_INT 16
2984: ST_TO_ADDR
// disable ( russians_attack ) ;
2985: LD_EXP 53
2989: DISABLE_MARKED
// russians_attack1 = 17 ;
2990: LD_ADDR_EXP 54
2994: PUSH
2995: LD_INT 17
2997: ST_TO_ADDR
// disable ( russians_attack1 ) ;
2998: LD_EXP 54
3002: DISABLE_MARKED
// tigers_allowed = 18 ;
3003: LD_ADDR_EXP 81
3007: PUSH
3008: LD_INT 18
3010: ST_TO_ADDR
// disable ( tigers_allowed ) ;
3011: LD_EXP 81
3015: DISABLE_MARKED
// remove_tigers = 19 ;
3016: LD_ADDR_EXP 82
3020: PUSH
3021: LD_INT 19
3023: ST_TO_ADDR
// disable ( remove_tigers ) ;
3024: LD_EXP 82
3028: DISABLE_MARKED
// Engineers_not_dead = 20 ;
3029: LD_ADDR_EXP 83
3033: PUSH
3034: LD_INT 20
3036: ST_TO_ADDR
// disable ( Engineers_not_dead ) ;
3037: LD_EXP 83
3041: DISABLE_MARKED
// East_guard_seen = 21 ;
3042: LD_ADDR_EXP 96
3046: PUSH
3047: LD_INT 21
3049: ST_TO_ADDR
// enable ( East_guard_seen ) ;
3050: LD_EXP 96
3054: ENABLE_MARKED
// mikhail_marked_for_death = false ;
3055: LD_ADDR_EXP 42
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// JMMInVehicle := false ;
3063: LD_ADDR_EXP 118
3067: PUSH
3068: LD_INT 0
3070: ST_TO_ADDR
// CyrusInVehicle := false ;
3071: LD_ADDR_EXP 119
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// Dialogue_Number = 0 ;
3079: LD_ADDR_EXP 101
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// Skip = false ;
3087: LD_ADDR_EXP 102
3091: PUSH
3092: LD_INT 0
3094: ST_TO_ADDR
// JMM_saw_east_guard = false ;
3095: LD_ADDR_EXP 95
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// Attack_canceled = false ;
3103: LD_ADDR_EXP 93
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// lost_units = 0 ;
3111: LD_ADDR_EXP 90
3115: PUSH
3116: LD_INT 0
3118: ST_TO_ADDR
// First_Capture = true ;
3119: LD_ADDR_EXP 84
3123: PUSH
3124: LD_INT 1
3126: ST_TO_ADDR
// vehicle1_new = 0 ;
3127: LD_ADDR_EXP 97
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// vehicle2_new = 0 ;
3135: LD_ADDR_EXP 98
3139: PUSH
3140: LD_INT 0
3142: ST_TO_ADDR
// escape_dialogue = false ;
3143: LD_ADDR_EXP 99
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// vehicle_goes_flag = true ;
3151: LD_ADDR_EXP 100
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// Tested_Americans = [ ] ;
3159: LD_ADDR_EXP 113
3163: PUSH
3164: EMPTY
3165: ST_TO_ADDR
// Init_Lives = [ ] ;
3166: LD_ADDR_EXP 112
3170: PUSH
3171: EMPTY
3172: ST_TO_ADDR
// Mikhails_Escape_Disabled = true ;
3173: LD_ADDR_EXP 91
3177: PUSH
3178: LD_INT 1
3180: ST_TO_ADDR
// Initial_Lives = GetLives ( [ John , Cyrus , Bobby , Khatam , Lisa , AmME1 , AmFE2 , AmMSo3 , Nick ] ) ;
3181: LD_ADDR_EXP 92
3185: PUSH
3186: LD_EXP 7
3190: PUSH
3191: LD_EXP 8
3195: PUSH
3196: LD_EXP 9
3200: PUSH
3201: LD_EXP 10
3205: PUSH
3206: LD_EXP 12
3210: PUSH
3211: LD_EXP 13
3215: PUSH
3216: LD_EXP 14
3220: PUSH
3221: LD_EXP 15
3225: PUSH
3226: LD_EXP 11
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 256
3246: ST_TO_ADDR
// CenterOnXY ( 41 , 65 ) ;
3247: LD_INT 41
3249: PPUSH
3250: LD_INT 65
3252: PPUSH
3253: CALL_OW 84
// end ;
3257: LD_VAR 0 1
3261: RET
// starting begin RandomizeAll ;
3262: CALL_OW 11
// testing = false ;
3266: LD_ADDR_EXP 2
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// test = 0 ;
3274: LD_ADDR_EXP 1
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// Prepare_difficulty ;
3282: CALL 0 0 0
// InitNorthBase ;
3286: CALL 20954 0 0
// Init ;
3290: CALL 411 0 0
// end ;
3294: END
// on UnitDestroyed ( un ) do begin if un = Mikhail then
3295: LD_VAR 0 1
3299: PUSH
3300: LD_EXP 65
3304: EQUAL
3305: IFFALSE 3311
// SA_MikhailKilled ;
3307: CALL 23092 0 0
// end ; end_of_file
3311: PPOPN 1
3313: END
// export Speaker ; var Byl_u_zakladny1 , Followed , Mikhails_outcome , Mikhail_status , end_of_m ; var rsol , rv , tiger , sour , target_of_escape , attacker ; export JMMInVehicle , CyrusInVehicle ; export function WaitTask ( list_of_units , reaction ) ; var i , busy ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// wait ( 2 ) ;
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 67
// repeat busy = false ;
3326: LD_ADDR_VAR 0 5
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// for i in list_of_units do
3334: LD_ADDR_VAR 0 4
3338: PUSH
3339: LD_VAR 0 1
3343: PUSH
3344: FOR_IN
3345: IFFALSE 3379
// if IsOk ( i ) then
3347: LD_VAR 0 4
3351: PPUSH
3352: CALL_OW 302
3356: IFFALSE 3377
// if HasTask ( i ) then
3358: LD_VAR 0 4
3362: PPUSH
3363: CALL_OW 314
3367: IFFALSE 3377
// busy = true ;
3369: LD_ADDR_VAR 0 5
3373: PUSH
3374: LD_INT 1
3376: ST_TO_ADDR
3377: GO 3344
3379: POP
3380: POP
// if busy then
3381: LD_VAR 0 5
3385: IFFALSE 3400
// wait ( 0 0$1 * reaction ) ;
3387: LD_INT 35
3389: PUSH
3390: LD_VAR 0 2
3394: MUL
3395: PPUSH
3396: CALL_OW 67
// until not ( busy ) ;
3400: LD_VAR 0 5
3404: NOT
3405: IFFALSE 3326
// end ;
3407: LD_VAR 0 3
3411: RET
// every 0 0$1 trigger not ( test ) do var sold , alive , Un , hlp ;
3412: LD_EXP 1
3416: NOT
3417: IFFALSE 6838
3419: GO 3421
3421: DISABLE
3422: LD_INT 0
3424: PPUSH
3425: PPUSH
3426: PPUSH
3427: PPUSH
// begin hlp = tick ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_OWVAR 1
3437: ST_TO_ADDR
// IngameOn ;
3438: CALL_OW 8
// Dialogue_Number = 1 ;
3442: LD_ADDR_EXP 101
3446: PUSH
3447: LD_INT 1
3449: ST_TO_ADDR
// if IsOk ( Bobby ) or IsOk ( Cyrus ) then
3450: LD_EXP 9
3454: PPUSH
3455: CALL_OW 302
3459: PUSH
3460: LD_EXP 8
3464: PPUSH
3465: CALL_OW 302
3469: OR
3470: IFFALSE 5520
// begin alive = [ ] ;
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: EMPTY
3478: ST_TO_ADDR
// Speaker = [ ] ;
3479: LD_ADDR_EXP 117
3483: PUSH
3484: EMPTY
3485: ST_TO_ADDR
// if IsOk ( Bobby ) then
3486: LD_EXP 9
3490: PPUSH
3491: CALL_OW 302
3495: IFFALSE 3513
// alive = alive ^ Bobby ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_VAR 0 2
3506: PUSH
3507: LD_EXP 9
3511: ADD
3512: ST_TO_ADDR
// if IsOk ( Cyrus ) then
3513: LD_EXP 8
3517: PPUSH
3518: CALL_OW 302
3522: IFFALSE 3540
// alive = alive ^ Cyrus ;
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: LD_EXP 8
3538: ADD
3539: ST_TO_ADDR
// if IsOk ( Bobby ) and not ( Skip ) then
3540: LD_EXP 9
3544: PPUSH
3545: CALL_OW 302
3549: PUSH
3550: LD_EXP 102
3554: NOT
3555: AND
3556: IFFALSE 3599
// if IsOk ( Cyrus ) then
3558: LD_EXP 8
3562: PPUSH
3563: CALL_OW 302
3567: IFFALSE 3585
// AddComTurnUnit ( Bobby , Cyrus ) else
3569: LD_EXP 9
3573: PPUSH
3574: LD_EXP 8
3578: PPUSH
3579: CALL_OW 179
3583: GO 3599
// AddComTurnUnit ( Bobby , John ) ;
3585: LD_EXP 9
3589: PPUSH
3590: LD_EXP 7
3594: PPUSH
3595: CALL_OW 179
// if IsOk ( Bobby ) and not ( Skip ) then
3599: LD_EXP 9
3603: PPUSH
3604: CALL_OW 302
3608: PUSH
3609: LD_EXP 102
3613: NOT
3614: AND
3615: IFFALSE 3629
// AddComWait ( Bobby , 0 0$1 ) ;
3617: LD_EXP 9
3621: PPUSH
3622: LD_INT 35
3624: PPUSH
3625: CALL_OW 202
// if IsOk ( Bobby ) and not ( Skip ) then
3629: LD_EXP 9
3633: PPUSH
3634: CALL_OW 302
3638: PUSH
3639: LD_EXP 102
3643: NOT
3644: AND
3645: IFFALSE 3662
// AddComMoveXY ( Bobby , 39 , 67 ) ;
3647: LD_EXP 9
3651: PPUSH
3652: LD_INT 39
3654: PPUSH
3655: LD_INT 67
3657: PPUSH
3658: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
3662: LD_EXP 9
3666: PPUSH
3667: CALL_OW 302
3671: PUSH
3672: LD_EXP 102
3676: NOT
3677: AND
3678: IFFALSE 3694
// AddComTurnUnit ( Bobby , John ) ;
3680: LD_EXP 9
3684: PPUSH
3685: LD_EXP 7
3689: PPUSH
3690: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
3694: LD_EXP 8
3698: PPUSH
3699: CALL_OW 302
3703: PUSH
3704: LD_EXP 102
3708: NOT
3709: AND
3710: IFFALSE 3724
// ComWait ( Cyrus , 0 0$0.5 ) ;
3712: LD_EXP 8
3716: PPUSH
3717: LD_INT 18
3719: PPUSH
3720: CALL_OW 142
// if IsOk ( Cyrus ) and not ( Skip ) then
3724: LD_EXP 8
3728: PPUSH
3729: CALL_OW 302
3733: PUSH
3734: LD_EXP 102
3738: NOT
3739: AND
3740: IFFALSE 3757
// AddComMoveXY ( Cyrus , 41 , 71 ) ;
3742: LD_EXP 8
3746: PPUSH
3747: LD_INT 41
3749: PPUSH
3750: LD_INT 71
3752: PPUSH
3753: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
3757: LD_EXP 8
3761: PPUSH
3762: CALL_OW 302
3766: PUSH
3767: LD_EXP 102
3771: NOT
3772: AND
3773: IFFALSE 3787
// AddComWait ( Cyrus , 0 0$1 ) ;
3775: LD_EXP 8
3779: PPUSH
3780: LD_INT 35
3782: PPUSH
3783: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
3787: LD_EXP 7
3791: PPUSH
3792: CALL_OW 302
3796: PUSH
3797: LD_EXP 102
3801: NOT
3802: AND
3803: IFFALSE 3820
// ComMoveXY ( John , 47 , 68 ) ;
3805: LD_EXP 7
3809: PPUSH
3810: LD_INT 47
3812: PPUSH
3813: LD_INT 68
3815: PPUSH
3816: CALL_OW 111
// if IsOk ( John ) and not ( Skip ) then
3820: LD_EXP 7
3824: PPUSH
3825: CALL_OW 302
3829: PUSH
3830: LD_EXP 102
3834: NOT
3835: AND
3836: IFFALSE 3879
// if IsOk ( Bobby ) then
3838: LD_EXP 9
3842: PPUSH
3843: CALL_OW 302
3847: IFFALSE 3865
// AddComTurnUnit ( John , Bobby ) else
3849: LD_EXP 7
3853: PPUSH
3854: LD_EXP 9
3858: PPUSH
3859: CALL_OW 179
3863: GO 3879
// AddComTurnUnit ( John , Cyrus ) ;
3865: LD_EXP 7
3869: PPUSH
3870: LD_EXP 8
3874: PPUSH
3875: CALL_OW 179
// Un = alive [ Rand ( 1 , alive ) ] ;
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: LD_INT 1
3891: PPUSH
3892: LD_VAR 0 2
3896: PPUSH
3897: CALL_OW 12
3901: ARRAY
3902: ST_TO_ADDR
// if not ( Skip ) then
3903: LD_EXP 102
3907: NOT
3908: IFFALSE 3945
// if ( Un = Bobby ) and IsOk ( Bobby ) then
3910: LD_VAR 0 3
3914: PUSH
3915: LD_EXP 9
3919: EQUAL
3920: PUSH
3921: LD_EXP 9
3925: PPUSH
3926: CALL_OW 302
3930: AND
3931: IFFALSE 3945
// Say ( Bobby , D1a-Bobby-1 ) ;
3933: LD_EXP 9
3937: PPUSH
3938: LD_STRING D1a-Bobby-1
3940: PPUSH
3941: CALL_OW 88
// if not ( Skip ) then
3945: LD_EXP 102
3949: NOT
3950: IFFALSE 3987
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
3952: LD_VAR 0 3
3956: PUSH
3957: LD_EXP 8
3961: EQUAL
3962: PUSH
3963: LD_EXP 8
3967: PPUSH
3968: CALL_OW 302
3972: AND
3973: IFFALSE 3987
// Say ( Cyrus , D1a-Cyrus-1 ) ;
3975: LD_EXP 8
3979: PPUSH
3980: LD_STRING D1a-Cyrus-1
3982: PPUSH
3983: CALL_OW 88
// if IsOk ( Bobby ) and not ( Skip ) then
3987: LD_EXP 9
3991: PPUSH
3992: CALL_OW 302
3996: PUSH
3997: LD_EXP 102
4001: NOT
4002: AND
4003: IFFALSE 4020
// ComMoveXY ( Bobby , 47 , 70 ) ;
4005: LD_EXP 9
4009: PPUSH
4010: LD_INT 47
4012: PPUSH
4013: LD_INT 70
4015: PPUSH
4016: CALL_OW 111
// if IsOk ( Bobby ) and not ( Skip ) then
4020: LD_EXP 9
4024: PPUSH
4025: CALL_OW 302
4029: PUSH
4030: LD_EXP 102
4034: NOT
4035: AND
4036: IFFALSE 4050
// AddComWait ( Bobby , 0 0$0.5 ) ;
4038: LD_EXP 9
4042: PPUSH
4043: LD_INT 18
4045: PPUSH
4046: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4050: LD_EXP 8
4054: PPUSH
4055: CALL_OW 302
4059: PUSH
4060: LD_EXP 102
4064: NOT
4065: AND
4066: IFFALSE 4083
// AddComMoveXY ( Cyrus , 43 , 69 ) ;
4068: LD_EXP 8
4072: PPUSH
4073: LD_INT 43
4075: PPUSH
4076: LD_INT 69
4078: PPUSH
4079: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
4083: LD_EXP 8
4087: PPUSH
4088: CALL_OW 302
4092: PUSH
4093: LD_EXP 102
4097: NOT
4098: AND
4099: IFFALSE 4113
// AddComWait ( Cyrus , 0 0$0.5 ) ;
4101: LD_EXP 8
4105: PPUSH
4106: LD_INT 18
4108: PPUSH
4109: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4113: LD_EXP 8
4117: PPUSH
4118: CALL_OW 302
4122: PUSH
4123: LD_EXP 102
4127: NOT
4128: AND
4129: IFFALSE 4172
// if IsOk ( Bobby ) then
4131: LD_EXP 9
4135: PPUSH
4136: CALL_OW 302
4140: IFFALSE 4158
// AddComTurnUnit ( Cyrus , Bobby ) else
4142: LD_EXP 8
4146: PPUSH
4147: LD_EXP 9
4151: PPUSH
4152: CALL_OW 179
4156: GO 4172
// AddComTurnUnit ( Cyrus , John ) ;
4158: LD_EXP 8
4162: PPUSH
4163: LD_EXP 7
4167: PPUSH
4168: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4172: LD_EXP 7
4176: PPUSH
4177: CALL_OW 302
4181: PUSH
4182: LD_EXP 102
4186: NOT
4187: AND
4188: IFFALSE 4202
// AddComWait ( John , 0 0$5 ) ;
4190: LD_EXP 7
4194: PPUSH
4195: LD_INT 175
4197: PPUSH
4198: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4202: LD_EXP 7
4206: PPUSH
4207: CALL_OW 302
4211: PUSH
4212: LD_EXP 102
4216: NOT
4217: AND
4218: IFFALSE 4235
// AddComMoveXY ( John , 36 , 63 ) ;
4220: LD_EXP 7
4224: PPUSH
4225: LD_INT 36
4227: PPUSH
4228: LD_INT 63
4230: PPUSH
4231: CALL_OW 171
// if IsOk ( John ) and not ( Skip ) then
4235: LD_EXP 7
4239: PPUSH
4240: CALL_OW 302
4244: PUSH
4245: LD_EXP 102
4249: NOT
4250: AND
4251: IFFALSE 4294
// if IsOk ( Cyrus ) then
4253: LD_EXP 8
4257: PPUSH
4258: CALL_OW 302
4262: IFFALSE 4280
// AddComTurnUnit ( John , Cyrus ) else
4264: LD_EXP 7
4268: PPUSH
4269: LD_EXP 8
4273: PPUSH
4274: CALL_OW 179
4278: GO 4294
// AddComTurnUnit ( John , Bobby ) ;
4280: LD_EXP 7
4284: PPUSH
4285: LD_EXP 9
4289: PPUSH
4290: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4294: LD_EXP 7
4298: PPUSH
4299: CALL_OW 302
4303: PUSH
4304: LD_EXP 102
4308: NOT
4309: AND
4310: IFFALSE 4324
// Say ( John , D1a-JMM-1 ) ;
4312: LD_EXP 7
4316: PPUSH
4317: LD_STRING D1a-JMM-1
4319: PPUSH
4320: CALL_OW 88
// Un = alive [ Rand ( 1 , alive ) ] ;
4324: LD_ADDR_VAR 0 3
4328: PUSH
4329: LD_VAR 0 2
4333: PUSH
4334: LD_INT 1
4336: PPUSH
4337: LD_VAR 0 2
4341: PPUSH
4342: CALL_OW 12
4346: ARRAY
4347: ST_TO_ADDR
// if not ( Skip ) then
4348: LD_EXP 102
4352: NOT
4353: IFFALSE 4390
// if ( Un = Bobby ) and IsOk ( Bobby ) then
4355: LD_VAR 0 3
4359: PUSH
4360: LD_EXP 9
4364: EQUAL
4365: PUSH
4366: LD_EXP 9
4370: PPUSH
4371: CALL_OW 302
4375: AND
4376: IFFALSE 4390
// Say ( Bobby , D1a-Bobby-2 ) ;
4378: LD_EXP 9
4382: PPUSH
4383: LD_STRING D1a-Bobby-2
4385: PPUSH
4386: CALL_OW 88
// if not ( Skip ) then
4390: LD_EXP 102
4394: NOT
4395: IFFALSE 4432
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
4397: LD_VAR 0 3
4401: PUSH
4402: LD_EXP 8
4406: EQUAL
4407: PUSH
4408: LD_EXP 8
4412: PPUSH
4413: CALL_OW 302
4417: AND
4418: IFFALSE 4432
// Say ( Cyrus , D1a-Cyrus-2 ) ;
4420: LD_EXP 8
4424: PPUSH
4425: LD_STRING D1a-Cyrus-2
4427: PPUSH
4428: CALL_OW 88
// CenterOnUnits ( [ John , Lisa ] ) ;
4432: LD_EXP 7
4436: PUSH
4437: LD_EXP 12
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PPUSH
4446: CALL_OW 85
// if IsOk ( Bobby ) and not ( Skip ) then
4450: LD_EXP 9
4454: PPUSH
4455: CALL_OW 302
4459: PUSH
4460: LD_EXP 102
4464: NOT
4465: AND
4466: IFFALSE 4482
// AddComTurnUnit ( Bobby , John ) ;
4468: LD_EXP 9
4472: PPUSH
4473: LD_EXP 7
4477: PPUSH
4478: CALL_OW 179
// if IsOk ( Bobby ) and not ( Skip ) then
4482: LD_EXP 9
4486: PPUSH
4487: CALL_OW 302
4491: PUSH
4492: LD_EXP 102
4496: NOT
4497: AND
4498: IFFALSE 4515
// AddComMoveXY ( Bobby , 42 , 69 ) ;
4500: LD_EXP 9
4504: PPUSH
4505: LD_INT 42
4507: PPUSH
4508: LD_INT 69
4510: PPUSH
4511: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
4515: LD_EXP 9
4519: PPUSH
4520: CALL_OW 302
4524: PUSH
4525: LD_EXP 102
4529: NOT
4530: AND
4531: IFFALSE 4545
// AddComWait ( Bobby , 0 0$0.3 ) ;
4533: LD_EXP 9
4537: PPUSH
4538: LD_INT 10
4540: PPUSH
4541: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4545: LD_EXP 8
4549: PPUSH
4550: CALL_OW 302
4554: PUSH
4555: LD_EXP 102
4559: NOT
4560: AND
4561: IFFALSE 4575
// AddComWait ( Cyrus , 0 0$2 ) ;
4563: LD_EXP 8
4567: PPUSH
4568: LD_INT 70
4570: PPUSH
4571: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4575: LD_EXP 8
4579: PPUSH
4580: CALL_OW 302
4584: PUSH
4585: LD_EXP 102
4589: NOT
4590: AND
4591: IFFALSE 4608
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
4593: LD_EXP 8
4597: PPUSH
4598: LD_INT 37
4600: PPUSH
4601: LD_INT 66
4603: PPUSH
4604: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
4608: LD_EXP 8
4612: PPUSH
4613: CALL_OW 302
4617: PUSH
4618: LD_EXP 102
4622: NOT
4623: AND
4624: IFFALSE 4640
// AddComTurnUnit ( Cyrus , John ) ;
4626: LD_EXP 8
4630: PPUSH
4631: LD_EXP 7
4635: PPUSH
4636: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4640: LD_EXP 7
4644: PPUSH
4645: CALL_OW 302
4649: PUSH
4650: LD_EXP 102
4654: NOT
4655: AND
4656: IFFALSE 4670
// AddComWait ( John , 0 0$3 ) ;
4658: LD_EXP 7
4662: PPUSH
4663: LD_INT 105
4665: PPUSH
4666: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4670: LD_EXP 7
4674: PPUSH
4675: CALL_OW 302
4679: PUSH
4680: LD_EXP 102
4684: NOT
4685: AND
4686: IFFALSE 4702
// AddComTurnUnit ( John , Lisa ) ;
4688: LD_EXP 7
4692: PPUSH
4693: LD_EXP 12
4697: PPUSH
4698: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4702: LD_EXP 7
4706: PPUSH
4707: CALL_OW 302
4711: PUSH
4712: LD_EXP 102
4716: NOT
4717: AND
4718: IFFALSE 4732
// AddComWait ( John , 0 0$1 ) ;
4720: LD_EXP 7
4724: PPUSH
4725: LD_INT 35
4727: PPUSH
4728: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4732: LD_EXP 7
4736: PPUSH
4737: CALL_OW 302
4741: PUSH
4742: LD_EXP 102
4746: NOT
4747: AND
4748: IFFALSE 4759
// AddComHold ( John ) ;
4750: LD_EXP 7
4754: PPUSH
4755: CALL_OW 200
// if IsOk ( John ) and not ( Skip ) then
4759: LD_EXP 7
4763: PPUSH
4764: CALL_OW 302
4768: PUSH
4769: LD_EXP 102
4773: NOT
4774: AND
4775: IFFALSE 4789
// Say ( John , D1a-JMM-2 ) ;
4777: LD_EXP 7
4781: PPUSH
4782: LD_STRING D1a-JMM-2
4784: PPUSH
4785: CALL_OW 88
// if IsOk ( John ) and not ( Skip ) then
4789: LD_EXP 7
4793: PPUSH
4794: CALL_OW 302
4798: PUSH
4799: LD_EXP 102
4803: NOT
4804: AND
4805: IFFALSE 4819
// ComWait ( John , 0 0$0.5 ) ;
4807: LD_EXP 7
4811: PPUSH
4812: LD_INT 18
4814: PPUSH
4815: CALL_OW 142
// if IsOk ( John ) and not ( Skip ) then
4819: LD_EXP 7
4823: PPUSH
4824: CALL_OW 302
4828: PUSH
4829: LD_EXP 102
4833: NOT
4834: AND
4835: IFFALSE 4851
// AddComTurnUnit ( John , Lisa ) ;
4837: LD_EXP 7
4841: PPUSH
4842: LD_EXP 12
4846: PPUSH
4847: CALL_OW 179
// if not ( IsAt ( John , 36 , 63 ) ) then
4851: LD_EXP 7
4855: PPUSH
4856: LD_INT 36
4858: PPUSH
4859: LD_INT 63
4861: PPUSH
4862: CALL_OW 307
4866: NOT
4867: IFFALSE 4898
// begin ComMoveXY ( John , 36 , 63 ) ;
4869: LD_EXP 7
4873: PPUSH
4874: LD_INT 36
4876: PPUSH
4877: LD_INT 63
4879: PPUSH
4880: CALL_OW 111
// AddComTurnUnit ( John , Lisa ) ;
4884: LD_EXP 7
4888: PPUSH
4889: LD_EXP 12
4893: PPUSH
4894: CALL_OW 179
// end ; if IsOk ( Bobby ) and not ( Skip ) then
4898: LD_EXP 9
4902: PPUSH
4903: CALL_OW 302
4907: PUSH
4908: LD_EXP 102
4912: NOT
4913: AND
4914: IFFALSE 4928
// ComWait ( Bobby , 0 0$1 ) ;
4916: LD_EXP 9
4920: PPUSH
4921: LD_INT 35
4923: PPUSH
4924: CALL_OW 142
// if IsOk ( Bobby ) and not ( Skip ) then
4928: LD_EXP 9
4932: PPUSH
4933: CALL_OW 302
4937: PUSH
4938: LD_EXP 102
4942: NOT
4943: AND
4944: IFFALSE 4960
// AddComTurnUnit ( Bobby , Lisa ) ;
4946: LD_EXP 9
4950: PPUSH
4951: LD_EXP 12
4955: PPUSH
4956: CALL_OW 179
// if IsOk ( Bobby ) and not ( IsAt ( Bobby , 36 , 61 ) ) then
4960: LD_EXP 9
4964: PPUSH
4965: CALL_OW 302
4969: PUSH
4970: LD_EXP 9
4974: PPUSH
4975: LD_INT 36
4977: PPUSH
4978: LD_INT 61
4980: PPUSH
4981: CALL_OW 307
4985: NOT
4986: AND
4987: IFFALSE 5004
// AddComMoveXY ( Bobby , 36 , 61 ) ;
4989: LD_EXP 9
4993: PPUSH
4994: LD_INT 36
4996: PPUSH
4997: LD_INT 61
4999: PPUSH
5000: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
5004: LD_EXP 9
5008: PPUSH
5009: CALL_OW 302
5013: PUSH
5014: LD_EXP 102
5018: NOT
5019: AND
5020: IFFALSE 5034
// AddComWait ( Bobby , 0 0$0.5 ) ;
5022: LD_EXP 9
5026: PPUSH
5027: LD_INT 18
5029: PPUSH
5030: CALL_OW 202
// if IsOk ( Bobby ) and not ( Skip ) then
5034: LD_EXP 9
5038: PPUSH
5039: CALL_OW 302
5043: PUSH
5044: LD_EXP 102
5048: NOT
5049: AND
5050: IFFALSE 5066
// AddComTurnUnit ( Bobby , Lisa ) ;
5052: LD_EXP 9
5056: PPUSH
5057: LD_EXP 12
5061: PPUSH
5062: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
5066: LD_EXP 8
5070: PPUSH
5071: CALL_OW 302
5075: PUSH
5076: LD_EXP 102
5080: NOT
5081: AND
5082: IFFALSE 5096
// ComWait ( Cyrus , 0 0$1 ) ;
5084: LD_EXP 8
5088: PPUSH
5089: LD_INT 35
5091: PPUSH
5092: CALL_OW 142
// if IsOk ( Cyrus ) and not ( Skip ) then
5096: LD_EXP 8
5100: PPUSH
5101: CALL_OW 302
5105: PUSH
5106: LD_EXP 102
5110: NOT
5111: AND
5112: IFFALSE 5128
// AddComTurnUnit ( Cyrus , Lisa ) ;
5114: LD_EXP 8
5118: PPUSH
5119: LD_EXP 12
5123: PPUSH
5124: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
5128: LD_EXP 8
5132: PPUSH
5133: CALL_OW 302
5137: PUSH
5138: LD_EXP 102
5142: NOT
5143: AND
5144: IFFALSE 5158
// AddComWait ( Cyrus , 0 0$1 ) ;
5146: LD_EXP 8
5150: PPUSH
5151: LD_INT 35
5153: PPUSH
5154: CALL_OW 202
// if IsOk ( Cyrus ) and not ( IsAt ( Cyrus , 35 , 63 ) ) then
5158: LD_EXP 8
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_EXP 8
5172: PPUSH
5173: LD_INT 35
5175: PPUSH
5176: LD_INT 63
5178: PPUSH
5179: CALL_OW 307
5183: NOT
5184: AND
5185: IFFALSE 5202
// AddComMoveXY ( Cyrus , 35 , 63 ) ;
5187: LD_EXP 8
5191: PPUSH
5192: LD_INT 35
5194: PPUSH
5195: LD_INT 63
5197: PPUSH
5198: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
5202: LD_EXP 8
5206: PPUSH
5207: CALL_OW 302
5211: PUSH
5212: LD_EXP 102
5216: NOT
5217: AND
5218: IFFALSE 5234
// AddComTurnUnit ( Cyrus , Lisa ) ;
5220: LD_EXP 8
5224: PPUSH
5225: LD_EXP 12
5229: PPUSH
5230: CALL_OW 179
// if IsOk ( Lisa ) and not ( Skip ) then
5234: LD_EXP 12
5238: PPUSH
5239: CALL_OW 302
5243: PUSH
5244: LD_EXP 102
5248: NOT
5249: AND
5250: IFFALSE 5261
// CenterOnUnits ( Lisa ) ;
5252: LD_EXP 12
5256: PPUSH
5257: CALL_OW 85
// if IsOk ( Lisa ) and not ( Skip ) then
5261: LD_EXP 12
5265: PPUSH
5266: CALL_OW 302
5270: PUSH
5271: LD_EXP 102
5275: NOT
5276: AND
5277: IFFALSE 5291
// ComWait ( Lisa , 0 0$2 ) ;
5279: LD_EXP 12
5283: PPUSH
5284: LD_INT 70
5286: PPUSH
5287: CALL_OW 142
// AddComWalk ( Lisa ) ;
5291: LD_EXP 12
5295: PPUSH
5296: CALL_OW 198
// AddComMoveXY ( Lisa , 33 , 59 ) ;
5300: LD_EXP 12
5304: PPUSH
5305: LD_INT 33
5307: PPUSH
5308: LD_INT 59
5310: PPUSH
5311: CALL_OW 171
// AddComTurnUnit ( Lisa , John ) ;
5315: LD_EXP 12
5319: PPUSH
5320: LD_EXP 7
5324: PPUSH
5325: CALL_OW 179
// if not ( Skip ) then
5329: LD_EXP 102
5333: NOT
5334: IFFALSE 5348
// ComWait ( AmME1 , 0 0$3 ) ;
5336: LD_EXP 13
5340: PPUSH
5341: LD_INT 105
5343: PPUSH
5344: CALL_OW 142
// AddComWalk ( AmME1 ) ;
5348: LD_EXP 13
5352: PPUSH
5353: CALL_OW 198
// AddComMoveXY ( AmME1 , 31 , 58 ) ;
5357: LD_EXP 13
5361: PPUSH
5362: LD_INT 31
5364: PPUSH
5365: LD_INT 58
5367: PPUSH
5368: CALL_OW 171
// AddComTurnUnit ( AmME1 , John ) ;
5372: LD_EXP 13
5376: PPUSH
5377: LD_EXP 7
5381: PPUSH
5382: CALL_OW 179
// if not ( Skip ) then
5386: LD_EXP 102
5390: NOT
5391: IFFALSE 5405
// ComWait ( AmFE2 , 0 0$3 ) ;
5393: LD_EXP 14
5397: PPUSH
5398: LD_INT 105
5400: PPUSH
5401: CALL_OW 142
// AddComWalk ( AmFE2 ) ;
5405: LD_EXP 14
5409: PPUSH
5410: CALL_OW 198
// AddComMoveXY ( AmFE2 , 33 , 56 ) ;
5414: LD_EXP 14
5418: PPUSH
5419: LD_INT 33
5421: PPUSH
5422: LD_INT 56
5424: PPUSH
5425: CALL_OW 171
// AddComTurnUnit ( AmFE2 , John ) ;
5429: LD_EXP 14
5433: PPUSH
5434: LD_EXP 7
5438: PPUSH
5439: CALL_OW 179
// if Nick then
5443: LD_EXP 11
5447: IFFALSE 5506
// begin if not ( Skip ) then
5449: LD_EXP 102
5453: NOT
5454: IFFALSE 5468
// ComWait ( Nick , 0 0$2 ) ;
5456: LD_EXP 11
5460: PPUSH
5461: LD_INT 70
5463: PPUSH
5464: CALL_OW 142
// AddComWalk ( Nick ) ;
5468: LD_EXP 11
5472: PPUSH
5473: CALL_OW 198
// AddComMoveXY ( Nick , 34 , 57 ) ;
5477: LD_EXP 11
5481: PPUSH
5482: LD_INT 34
5484: PPUSH
5485: LD_INT 57
5487: PPUSH
5488: CALL_OW 171
// AddComTurnUnit ( Nick , John ) ;
5492: LD_EXP 11
5496: PPUSH
5497: LD_EXP 7
5501: PPUSH
5502: CALL_OW 179
// end ; Say ( Lisa , D1a-Lisa-2 ) ;
5506: LD_EXP 12
5510: PPUSH
5511: LD_STRING D1a-Lisa-2
5513: PPUSH
5514: CALL_OW 88
// end else
5518: GO 6247
// begin ComMoveXY ( John , 49 , 66 ) ;
5520: LD_EXP 7
5524: PPUSH
5525: LD_INT 49
5527: PPUSH
5528: LD_INT 66
5530: PPUSH
5531: CALL_OW 111
// AddComWait ( John , 0 0$0.5 ) ;
5535: LD_EXP 7
5539: PPUSH
5540: LD_INT 18
5542: PPUSH
5543: CALL_OW 202
// if not ( Skip ) then
5547: LD_EXP 102
5551: NOT
5552: IFFALSE 5561
// Wait ( 0 0$3 ) ;
5554: LD_INT 105
5556: PPUSH
5557: CALL_OW 67
// if not ( Skip ) then
5561: LD_EXP 102
5565: NOT
5566: IFFALSE 5580
// Say ( John , D1b-JMM-1 ) ;
5568: LD_EXP 7
5572: PPUSH
5573: LD_STRING D1b-JMM-1
5575: PPUSH
5576: CALL_OW 88
// if not ( Skip ) then
5580: LD_EXP 102
5584: NOT
5585: IFFALSE 5602
// AddComTurnXY ( John , 54 , 71 ) ;
5587: LD_EXP 7
5591: PPUSH
5592: LD_INT 54
5594: PPUSH
5595: LD_INT 71
5597: PPUSH
5598: CALL_OW 178
// if not ( Skip ) then
5602: LD_EXP 102
5606: NOT
5607: IFFALSE 5621
// AddComWait ( John , 0 0$0.7 ) ;
5609: LD_EXP 7
5613: PPUSH
5614: LD_INT 24
5616: PPUSH
5617: CALL_OW 202
// if not ( Skip ) then
5621: LD_EXP 102
5625: NOT
5626: IFFALSE 5643
// AddComTurnXY ( John , 55 , 63 ) ;
5628: LD_EXP 7
5632: PPUSH
5633: LD_INT 55
5635: PPUSH
5636: LD_INT 63
5638: PPUSH
5639: CALL_OW 178
// if not ( Skip ) then
5643: LD_EXP 102
5647: NOT
5648: IFFALSE 5662
// AddComWait ( John , 0 0$0.7 ) ;
5650: LD_EXP 7
5654: PPUSH
5655: LD_INT 24
5657: PPUSH
5658: CALL_OW 202
// if not ( Skip ) then
5662: LD_EXP 102
5666: NOT
5667: IFFALSE 5684
// AddComMoveXY ( John , 45 , 62 ) ;
5669: LD_EXP 7
5673: PPUSH
5674: LD_INT 45
5676: PPUSH
5677: LD_INT 62
5679: PPUSH
5680: CALL_OW 171
// if not ( Skip ) then
5684: LD_EXP 102
5688: NOT
5689: IFFALSE 5706
// AddComTurnXY ( John , 52 , 60 ) ;
5691: LD_EXP 7
5695: PPUSH
5696: LD_INT 52
5698: PPUSH
5699: LD_INT 60
5701: PPUSH
5702: CALL_OW 178
// if not ( Skip ) then
5706: LD_EXP 102
5710: NOT
5711: IFFALSE 5725
// AddComWait ( John , 0 0$1 ) ;
5713: LD_EXP 7
5717: PPUSH
5718: LD_INT 35
5720: PPUSH
5721: CALL_OW 202
// if not ( Skip ) then
5725: LD_EXP 102
5729: NOT
5730: IFFALSE 5747
// AddComTurnXY ( John , 37 , 48 ) ;
5732: LD_EXP 7
5736: PPUSH
5737: LD_INT 37
5739: PPUSH
5740: LD_INT 48
5742: PPUSH
5743: CALL_OW 178
// if not ( Skip ) then
5747: LD_EXP 102
5751: NOT
5752: IFFALSE 5766
// AddComWait ( John , 0 0$0.5 ) ;
5754: LD_EXP 7
5758: PPUSH
5759: LD_INT 18
5761: PPUSH
5762: CALL_OW 202
// if not ( Skip ) then
5766: LD_EXP 102
5770: NOT
5771: IFFALSE 5788
// AddComTurnXY ( John , 36 , 60 ) ;
5773: LD_EXP 7
5777: PPUSH
5778: LD_INT 36
5780: PPUSH
5781: LD_INT 60
5783: PPUSH
5784: CALL_OW 178
// if not ( Skip ) then
5788: LD_EXP 102
5792: NOT
5793: IFFALSE 5807
// AddComWait ( John , 0 0$1 ) ;
5795: LD_EXP 7
5799: PPUSH
5800: LD_INT 35
5802: PPUSH
5803: CALL_OW 202
// if not ( Skip ) then
5807: LD_EXP 102
5811: NOT
5812: IFFALSE 5829
// AddComMoveXY ( John , 41 , 65 ) ;
5814: LD_EXP 7
5818: PPUSH
5819: LD_INT 41
5821: PPUSH
5822: LD_INT 65
5824: PPUSH
5825: CALL_OW 171
// AddComMoveXY ( John , 36 , 61 ) ;
5829: LD_EXP 7
5833: PPUSH
5834: LD_INT 36
5836: PPUSH
5837: LD_INT 61
5839: PPUSH
5840: CALL_OW 171
// if not ( Skip ) then
5844: LD_EXP 102
5848: NOT
5849: IFFALSE 5866
// AddComTurnXY ( John , 29 , 54 ) ;
5851: LD_EXP 7
5855: PPUSH
5856: LD_INT 29
5858: PPUSH
5859: LD_INT 54
5861: PPUSH
5862: CALL_OW 178
// while not ( GetDistUnitXY ( John , 36 , 61 ) < 2 ) do
5866: LD_EXP 7
5870: PPUSH
5871: LD_INT 36
5873: PPUSH
5874: LD_INT 61
5876: PPUSH
5877: CALL_OW 297
5881: PUSH
5882: LD_INT 2
5884: LESS
5885: NOT
5886: IFFALSE 5897
// Wait ( 0 0$0.2 ) ;
5888: LD_INT 7
5890: PPUSH
5891: CALL_OW 67
5895: GO 5866
// if not ( Skip ) then
5897: LD_EXP 102
5901: NOT
5902: IFFALSE 5913
// AddComCrawl ( John ) ;
5904: LD_EXP 7
5908: PPUSH
5909: CALL_OW 197
// CenterOnXY ( GetX ( Lisa ) - 1 , GetY ( Lisa ) - 3 ) ;
5913: LD_EXP 12
5917: PPUSH
5918: CALL_OW 250
5922: PUSH
5923: LD_INT 1
5925: MINUS
5926: PPUSH
5927: LD_EXP 12
5931: PPUSH
5932: CALL_OW 251
5936: PUSH
5937: LD_INT 3
5939: MINUS
5940: PPUSH
5941: CALL_OW 84
// Say ( John , D1b-JMM-1a ) ;
5945: LD_EXP 7
5949: PPUSH
5950: LD_STRING D1b-JMM-1a
5952: PPUSH
5953: CALL_OW 88
// if not ( Skip ) then
5957: LD_EXP 102
5961: NOT
5962: IFFALSE 5976
// ComWait ( John , 0 0$3 ) ;
5964: LD_EXP 7
5968: PPUSH
5969: LD_INT 105
5971: PPUSH
5972: CALL_OW 142
// AddComWalk ( John ) ;
5976: LD_EXP 7
5980: PPUSH
5981: CALL_OW 198
// AddComTurnUnit ( John , Lisa ) ;
5985: LD_EXP 7
5989: PPUSH
5990: LD_EXP 12
5994: PPUSH
5995: CALL_OW 179
// if not ( Skip ) then
5999: LD_EXP 102
6003: NOT
6004: IFFALSE 6018
// ComWait ( Lisa , 0 0$0.5 ) ;
6006: LD_EXP 12
6010: PPUSH
6011: LD_INT 18
6013: PPUSH
6014: CALL_OW 142
// AddComWalk ( Lisa ) ;
6018: LD_EXP 12
6022: PPUSH
6023: CALL_OW 198
// AddComMoveXY ( Lisa , 33 , 59 ) ;
6027: LD_EXP 12
6031: PPUSH
6032: LD_INT 33
6034: PPUSH
6035: LD_INT 59
6037: PPUSH
6038: CALL_OW 171
// AddComTurnUnit ( Lisa , John ) ;
6042: LD_EXP 12
6046: PPUSH
6047: LD_EXP 7
6051: PPUSH
6052: CALL_OW 179
// if not ( Skip ) then
6056: LD_EXP 102
6060: NOT
6061: IFFALSE 6075
// ComWait ( AmME1 , 0 0$1 ) ;
6063: LD_EXP 13
6067: PPUSH
6068: LD_INT 35
6070: PPUSH
6071: CALL_OW 142
// AddComWalk ( AmME1 ) ;
6075: LD_EXP 13
6079: PPUSH
6080: CALL_OW 198
// AddComMoveXY ( AmME1 , 31 , 58 ) ;
6084: LD_EXP 13
6088: PPUSH
6089: LD_INT 31
6091: PPUSH
6092: LD_INT 58
6094: PPUSH
6095: CALL_OW 171
// AddComTurnUnit ( AmME1 , John ) ;
6099: LD_EXP 13
6103: PPUSH
6104: LD_EXP 7
6108: PPUSH
6109: CALL_OW 179
// if not ( Skip ) then
6113: LD_EXP 102
6117: NOT
6118: IFFALSE 6132
// ComWait ( AmFE2 , 0 0$1 ) ;
6120: LD_EXP 14
6124: PPUSH
6125: LD_INT 35
6127: PPUSH
6128: CALL_OW 142
// AddComWalk ( AmFE2 ) ;
6132: LD_EXP 14
6136: PPUSH
6137: CALL_OW 198
// AddComMoveXY ( AmFE2 , 33 , 56 ) ;
6141: LD_EXP 14
6145: PPUSH
6146: LD_INT 33
6148: PPUSH
6149: LD_INT 56
6151: PPUSH
6152: CALL_OW 171
// AddComTurnUnit ( AmFE2 , John ) ;
6156: LD_EXP 14
6160: PPUSH
6161: LD_EXP 7
6165: PPUSH
6166: CALL_OW 179
// if Nick then
6170: LD_EXP 11
6174: IFFALSE 6214
// begin AddComWalk ( Nick ) ;
6176: LD_EXP 11
6180: PPUSH
6181: CALL_OW 198
// AddComMoveXY ( Nick , 34 , 57 ) ;
6185: LD_EXP 11
6189: PPUSH
6190: LD_INT 34
6192: PPUSH
6193: LD_INT 57
6195: PPUSH
6196: CALL_OW 171
// AddComTurnUnit ( Nick , John ) ;
6200: LD_EXP 11
6204: PPUSH
6205: LD_EXP 7
6209: PPUSH
6210: CALL_OW 179
// end ; if not ( Skip ) then
6214: LD_EXP 102
6218: NOT
6219: IFFALSE 6228
// Wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// if not ( Skip ) then
6228: LD_EXP 102
6232: NOT
6233: IFFALSE 6247
// Say ( Lisa , D1b-Lisa-1 ) ;
6235: LD_EXP 12
6239: PPUSH
6240: LD_STRING D1b-Lisa-1
6242: PPUSH
6243: CALL_OW 88
// end ; if not ( Skip ) then
6247: LD_EXP 102
6251: NOT
6252: IFFALSE 6266
// Say ( John , D1-JMM-1 ) ;
6254: LD_EXP 7
6258: PPUSH
6259: LD_STRING D1-JMM-1
6261: PPUSH
6262: CALL_OW 88
// if not ( Skip ) then
6266: LD_EXP 102
6270: NOT
6271: IFFALSE 6285
// Say ( Lisa , D1-Lisa-1 ) ;
6273: LD_EXP 12
6277: PPUSH
6278: LD_STRING D1-Lisa-1
6280: PPUSH
6281: CALL_OW 88
// if not ( Skip ) then
6285: LD_EXP 102
6289: NOT
6290: IFFALSE 6304
// Say ( John , D1-JMM-2 ) ;
6292: LD_EXP 7
6296: PPUSH
6297: LD_STRING D1-JMM-2
6299: PPUSH
6300: CALL_OW 88
// if not ( Skip ) then
6304: LD_EXP 102
6308: NOT
6309: IFFALSE 6323
// SayRadio ( Powell , D1-Pow-2 ) ;
6311: LD_EXP 16
6315: PPUSH
6316: LD_STRING D1-Pow-2
6318: PPUSH
6319: CALL_OW 94
// if not ( Skip ) and IsOk ( Cyrus ) then
6323: LD_EXP 102
6327: NOT
6328: PUSH
6329: LD_EXP 8
6333: PPUSH
6334: CALL_OW 302
6338: AND
6339: IFFALSE 6365
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
6341: LD_EXP 8
6345: PPUSH
6346: LD_STRING D1-Cyrus-2
6348: PPUSH
6349: CALL_OW 88
// Say ( John , D1-JMM-3 ) ;
6353: LD_EXP 7
6357: PPUSH
6358: LD_STRING D1-JMM-3
6360: PPUSH
6361: CALL_OW 88
// end ; if not ( Skip ) then
6365: LD_EXP 102
6369: NOT
6370: IFFALSE 6384
// SayRadio ( Powell , D1-Pow-3 ) ;
6372: LD_EXP 16
6376: PPUSH
6377: LD_STRING D1-Pow-3
6379: PPUSH
6380: CALL_OW 94
// if not ( Skip ) then
6384: LD_EXP 102
6388: NOT
6389: IFFALSE 6403
// Say ( John , D1-JMM-4 ) ;
6391: LD_EXP 7
6395: PPUSH
6396: LD_STRING D1-JMM-4
6398: PPUSH
6399: CALL_OW 88
// if not ( Skip ) then
6403: LD_EXP 102
6407: NOT
6408: IFFALSE 6422
// SayRadio ( Powell , D1-Pow-4 ) ;
6410: LD_EXP 16
6414: PPUSH
6415: LD_STRING D1-Pow-4
6417: PPUSH
6418: CALL_OW 94
// if not ( Skip ) then
6422: LD_EXP 102
6426: NOT
6427: IFFALSE 6441
// SayRadio ( Powell , D1-Pow-4a ) ;
6429: LD_EXP 16
6433: PPUSH
6434: LD_STRING D1-Pow-4a
6436: PPUSH
6437: CALL_OW 94
// alive = [ ] ;
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: EMPTY
6447: ST_TO_ADDR
// Speaker = [ ] ;
6448: LD_ADDR_EXP 117
6452: PUSH
6453: EMPTY
6454: ST_TO_ADDR
// if IsOk ( Bobby ) then
6455: LD_EXP 9
6459: PPUSH
6460: CALL_OW 302
6464: IFFALSE 6482
// alive = alive ^ Bobby ;
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: LD_VAR 0 2
6475: PUSH
6476: LD_EXP 9
6480: ADD
6481: ST_TO_ADDR
// if IsOk ( Cyrus ) then
6482: LD_EXP 8
6486: PPUSH
6487: CALL_OW 302
6491: IFFALSE 6509
// alive = alive ^ Cyrus ;
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_VAR 0 2
6502: PUSH
6503: LD_EXP 8
6507: ADD
6508: ST_TO_ADDR
// if ( IsOk ( Bobby ) or IsOk ( Cyrus ) ) then
6509: LD_EXP 9
6513: PPUSH
6514: CALL_OW 302
6518: PUSH
6519: LD_EXP 8
6523: PPUSH
6524: CALL_OW 302
6528: OR
6529: IFFALSE 6555
// Un = alive [ Rand ( 1 , alive ) ] ;
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: LD_VAR 0 2
6540: PUSH
6541: LD_INT 1
6543: PPUSH
6544: LD_VAR 0 2
6548: PPUSH
6549: CALL_OW 12
6553: ARRAY
6554: ST_TO_ADDR
// if alive <> 0 then
6555: LD_VAR 0 2
6559: PUSH
6560: LD_INT 0
6562: NONEQUAL
6563: IFFALSE 6668
// begin if not ( Skip ) then
6565: LD_EXP 102
6569: NOT
6570: IFFALSE 6626
// if ( Un = Bobby ) and IsOk ( Bobby ) then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_EXP 9
6581: EQUAL
6582: PUSH
6583: LD_EXP 9
6587: PPUSH
6588: CALL_OW 302
6592: AND
6593: IFFALSE 6626
// begin Say ( Bobby , D1-Bobby-4 ) ;
6595: LD_EXP 9
6599: PPUSH
6600: LD_STRING D1-Bobby-4
6602: PPUSH
6603: CALL_OW 88
// if not ( Skip ) then
6607: LD_EXP 102
6611: NOT
6612: IFFALSE 6626
// Say ( Lisa , D1-Lisa-4 ) ;
6614: LD_EXP 12
6618: PPUSH
6619: LD_STRING D1-Lisa-4
6621: PPUSH
6622: CALL_OW 88
// end ; if not ( Skip ) then
6626: LD_EXP 102
6630: NOT
6631: IFFALSE 6668
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
6633: LD_VAR 0 3
6637: PUSH
6638: LD_EXP 8
6642: EQUAL
6643: PUSH
6644: LD_EXP 8
6648: PPUSH
6649: CALL_OW 302
6653: AND
6654: IFFALSE 6668
// Say ( Cyrus , D1-Cyrus-4 ) ;
6656: LD_EXP 8
6660: PPUSH
6661: LD_STRING D1-Cyrus-4
6663: PPUSH
6664: CALL_OW 88
// end ; if not ( Skip ) then
6668: LD_EXP 102
6672: NOT
6673: IFFALSE 6687
// Say ( John , D1-JMM-5 ) ;
6675: LD_EXP 7
6679: PPUSH
6680: LD_STRING D1-JMM-5
6682: PPUSH
6683: CALL_OW 88
// sold = FilterUnitsInArea ( Start , [ f_side , americans ] ) ;
6687: LD_ADDR_VAR 0 1
6691: PUSH
6692: LD_INT 8
6694: PPUSH
6695: LD_INT 22
6697: PUSH
6698: LD_EXP 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 70
6711: ST_TO_ADDR
// IngameOff ;
6712: CALL_OW 9
// tick = hlp ;
6716: LD_ADDR_OWVAR 1
6720: PUSH
6721: LD_VAR 0 4
6725: ST_TO_ADDR
// Skip = false ;
6726: LD_ADDR_EXP 102
6730: PUSH
6731: LD_INT 0
6733: ST_TO_ADDR
// ComFree ( sold ) ;
6734: LD_VAR 0 1
6738: PPUSH
6739: CALL_OW 139
// ComFree ( John ) ;
6743: LD_EXP 7
6747: PPUSH
6748: CALL_OW 139
// wait ( 0 0$1 ) ;
6752: LD_INT 35
6754: PPUSH
6755: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
6759: LD_STRING M1
6761: PPUSH
6762: CALL_OW 337
// SaveForQuickRestart ;
6766: CALL_OW 22
// Hint ( Engineers ) ;
6770: LD_STRING Engineers
6772: PPUSH
6773: CALL_OW 339
// Hint ( Groups ) ;
6777: LD_STRING Groups
6779: PPUSH
6780: CALL_OW 339
// SetSide ( [ Lisa , AmME1 , AmFE2 ] , americans ) ;
6784: LD_EXP 12
6788: PUSH
6789: LD_EXP 13
6793: PUSH
6794: LD_EXP 14
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: PPUSH
6804: LD_EXP 3
6808: PPUSH
6809: CALL_OW 235
// if Nick then
6813: LD_EXP 11
6817: IFFALSE 6833
// SetSide ( Nick , americans ) ;
6819: LD_EXP 11
6823: PPUSH
6824: LD_EXP 3
6828: PPUSH
6829: CALL_OW 235
// enable ( Engineers_not_dead ) ;
6833: LD_EXP 83
6837: ENABLE_MARKED
// end ;
6838: PPOPN 4
6840: END
// every 0 0$1 trigger ( SeeArea ( americans , Dead_Am_1 ) > 0 ) do
6841: LD_EXP 3
6845: PPUSH
6846: LD_INT 18
6848: PPUSH
6849: CALL_OW 294
6853: PUSH
6854: LD_INT 0
6856: GREATER
6857: IFFALSE 7203
6859: GO 6861
6861: DISABLE
// begin hc_sex = sex_male ;
6862: LD_ADDR_OWVAR 27
6866: PUSH
6867: LD_INT 1
6869: ST_TO_ADDR
// hc_class = class_soldier ;
6870: LD_ADDR_OWVAR 28
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 1 ] ;
6878: LD_ADDR_OWVAR 31
6882: PUSH
6883: LD_INT 1
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: LD_INT 1
6891: PUSH
6892: LD_INT 1
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: ST_TO_ADDR
// hc_name =  ;
6901: LD_ADDR_OWVAR 26
6905: PUSH
6906: LD_STRING 
6908: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
6909: LD_ADDR_OWVAR 29
6913: PUSH
6914: LD_INT 10
6916: PUSH
6917: LD_INT 10
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: ST_TO_ADDR
// uc_side = americans1 ;
6924: LD_ADDR_OWVAR 20
6928: PUSH
6929: LD_EXP 4
6933: ST_TO_ADDR
// uc_nation = nation_american ;
6934: LD_ADDR_OWVAR 21
6938: PUSH
6939: LD_INT 1
6941: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
6942: LD_INT 0
6944: PPUSH
6945: LD_INT 1
6947: PPUSH
6948: LD_INT 0
6950: PPUSH
6951: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
6955: LD_ADDR_OWVAR 24
6959: PUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_INT 6
6965: PPUSH
6966: CALL_OW 12
6970: ST_TO_ADDR
// AmD1 = CreateHuman ;
6971: LD_ADDR_EXP 17
6975: PUSH
6976: CALL_OW 44
6980: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
6981: LD_INT 0
6983: PPUSH
6984: LD_INT 1
6986: PPUSH
6987: LD_INT 0
6989: PPUSH
6990: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
6994: LD_ADDR_OWVAR 24
6998: PUSH
6999: LD_INT 1
7001: PPUSH
7002: LD_INT 6
7004: PPUSH
7005: CALL_OW 12
7009: ST_TO_ADDR
// AmD2 = CreateHuman ;
7010: LD_ADDR_EXP 18
7014: PUSH
7015: CALL_OW 44
7019: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
7020: LD_INT 0
7022: PPUSH
7023: LD_INT 1
7025: PPUSH
7026: LD_INT 0
7028: PPUSH
7029: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7033: LD_ADDR_OWVAR 24
7037: PUSH
7038: LD_INT 1
7040: PPUSH
7041: LD_INT 6
7043: PPUSH
7044: CALL_OW 12
7048: ST_TO_ADDR
// AmD3 = CreateHuman ;
7049: LD_ADDR_EXP 19
7053: PUSH
7054: CALL_OW 44
7058: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
7059: LD_INT 0
7061: PPUSH
7062: LD_INT 1
7064: PPUSH
7065: LD_INT 0
7067: PPUSH
7068: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7072: LD_ADDR_OWVAR 24
7076: PUSH
7077: LD_INT 1
7079: PPUSH
7080: LD_INT 6
7082: PPUSH
7083: CALL_OW 12
7087: ST_TO_ADDR
// AmD4 = CreateHuman ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: CALL_OW 44
7097: ST_TO_ADDR
// SetLives ( [ AmD1 , AmD2 , AmD3 , AmD4 ] , 0 ) ;
7098: LD_EXP 17
7102: PUSH
7103: LD_EXP 18
7107: PUSH
7108: LD_EXP 19
7112: PUSH
7113: LD_EXP 20
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: PPUSH
7124: LD_INT 0
7126: PPUSH
7127: CALL_OW 234
// PlaceUnitXY ( AmD1 , 27 , 15 , false ) ;
7131: LD_EXP 17
7135: PPUSH
7136: LD_INT 27
7138: PPUSH
7139: LD_INT 15
7141: PPUSH
7142: LD_INT 0
7144: PPUSH
7145: CALL_OW 48
// PlaceUnitXY ( AmD2 , 25 , 13 , false ) ;
7149: LD_EXP 18
7153: PPUSH
7154: LD_INT 25
7156: PPUSH
7157: LD_INT 13
7159: PPUSH
7160: LD_INT 0
7162: PPUSH
7163: CALL_OW 48
// PlaceUnitXY ( AmD3 , 29 , 16 , false ) ;
7167: LD_EXP 19
7171: PPUSH
7172: LD_INT 29
7174: PPUSH
7175: LD_INT 16
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: CALL_OW 48
// PlaceUnitXY ( AmD4 , 27 , 14 , false ) ;
7185: LD_EXP 20
7189: PPUSH
7190: LD_INT 27
7192: PPUSH
7193: LD_INT 14
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// end ;
7203: END
// every 0 0$1 trigger ( SeeXY ( americans , 27 , 15 ) or SeeXY ( americans , 25 , 13 ) or SeeXY ( americans , 29 , 16 ) or SeeXY ( americans , 28 , 14 ) ) do var alive , speaker , Un ;
7204: LD_EXP 3
7208: PPUSH
7209: LD_INT 27
7211: PPUSH
7212: LD_INT 15
7214: PPUSH
7215: CALL_OW 293
7219: PUSH
7220: LD_EXP 3
7224: PPUSH
7225: LD_INT 25
7227: PPUSH
7228: LD_INT 13
7230: PPUSH
7231: CALL_OW 293
7235: OR
7236: PUSH
7237: LD_EXP 3
7241: PPUSH
7242: LD_INT 29
7244: PPUSH
7245: LD_INT 16
7247: PPUSH
7248: CALL_OW 293
7252: OR
7253: PUSH
7254: LD_EXP 3
7258: PPUSH
7259: LD_INT 28
7261: PPUSH
7262: LD_INT 14
7264: PPUSH
7265: CALL_OW 293
7269: OR
7270: IFFALSE 8129
7272: GO 7274
7274: DISABLE
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
// begin InGameOn ;
7280: CALL_OW 8
// CenterOnXY ( 27 , 15 ) ;
7284: LD_INT 27
7286: PPUSH
7287: LD_INT 15
7289: PPUSH
7290: CALL_OW 84
// if IsOk ( John ) then
7294: LD_EXP 7
7298: PPUSH
7299: CALL_OW 302
7303: IFFALSE 7344
// begin ComWalk ( John ) ;
7305: LD_EXP 7
7309: PPUSH
7310: CALL_OW 138
// ComMoveXY ( John , 24 , 14 ) ;
7314: LD_EXP 7
7318: PPUSH
7319: LD_INT 24
7321: PPUSH
7322: LD_INT 14
7324: PPUSH
7325: CALL_OW 111
// AddComTurnXY ( John , 27 , 15 ) ;
7329: LD_EXP 7
7333: PPUSH
7334: LD_INT 27
7336: PPUSH
7337: LD_INT 15
7339: PPUSH
7340: CALL_OW 178
// end ; if IsOk ( Lisa ) then
7344: LD_EXP 12
7348: PPUSH
7349: CALL_OW 302
7353: IFFALSE 7394
// begin ComWalk ( Lisa ) ;
7355: LD_EXP 12
7359: PPUSH
7360: CALL_OW 138
// ComMoveXY ( Lisa , 27 , 13 ) ;
7364: LD_EXP 12
7368: PPUSH
7369: LD_INT 27
7371: PPUSH
7372: LD_INT 13
7374: PPUSH
7375: CALL_OW 111
// AddComTurnXY ( Lisa , 28 , 14 ) ;
7379: LD_EXP 12
7383: PPUSH
7384: LD_INT 28
7386: PPUSH
7387: LD_INT 14
7389: PPUSH
7390: CALL_OW 178
// end ; if IsOk ( Bobby ) then
7394: LD_EXP 9
7398: PPUSH
7399: CALL_OW 302
7403: IFFALSE 7444
// begin ComWalk ( Bobby ) ;
7405: LD_EXP 9
7409: PPUSH
7410: CALL_OW 138
// ComMoveXY ( Bobby , 30 , 18 ) ;
7414: LD_EXP 9
7418: PPUSH
7419: LD_INT 30
7421: PPUSH
7422: LD_INT 18
7424: PPUSH
7425: CALL_OW 111
// AddComTurnXY ( Bobby , 29 , 16 ) ;
7429: LD_EXP 9
7433: PPUSH
7434: LD_INT 29
7436: PPUSH
7437: LD_INT 16
7439: PPUSH
7440: CALL_OW 178
// end ; if IsOk ( Cyrus ) then
7444: LD_EXP 8
7448: PPUSH
7449: CALL_OW 302
7453: IFFALSE 7494
// begin ComWalk ( Cyrus ) ;
7455: LD_EXP 8
7459: PPUSH
7460: CALL_OW 138
// ComMoveXY ( Cyrus , 27 , 16 ) ;
7464: LD_EXP 8
7468: PPUSH
7469: LD_INT 27
7471: PPUSH
7472: LD_INT 16
7474: PPUSH
7475: CALL_OW 111
// AddComTurnXY ( Cyrus , 27 , 15 ) ;
7479: LD_EXP 8
7483: PPUSH
7484: LD_INT 27
7486: PPUSH
7487: LD_INT 15
7489: PPUSH
7490: CALL_OW 178
// end ; if IsOk ( AmME1 ) then
7494: LD_EXP 13
7498: PPUSH
7499: CALL_OW 302
7503: IFFALSE 7544
// begin ComWalk ( AmME1 ) ;
7505: LD_EXP 13
7509: PPUSH
7510: CALL_OW 138
// ComMoveXY ( AmME1 , 27 , 14 ) ;
7514: LD_EXP 13
7518: PPUSH
7519: LD_INT 27
7521: PPUSH
7522: LD_INT 14
7524: PPUSH
7525: CALL_OW 111
// AddComTurnXY ( AmME1 , 28 , 14 ) ;
7529: LD_EXP 13
7533: PPUSH
7534: LD_INT 28
7536: PPUSH
7537: LD_INT 14
7539: PPUSH
7540: CALL_OW 178
// end ; if IsOk ( AmFE2 ) then
7544: LD_EXP 14
7548: PPUSH
7549: CALL_OW 302
7553: IFFALSE 7594
// begin ComWalk ( AmFE2 ) ;
7555: LD_EXP 14
7559: PPUSH
7560: CALL_OW 138
// ComMoveXY ( AmFE2 , 23 , 14 ) ;
7564: LD_EXP 14
7568: PPUSH
7569: LD_INT 23
7571: PPUSH
7572: LD_INT 14
7574: PPUSH
7575: CALL_OW 111
// AddComTurnXY ( AmFE2 , 25 , 13 ) ;
7579: LD_EXP 14
7583: PPUSH
7584: LD_INT 25
7586: PPUSH
7587: LD_INT 13
7589: PPUSH
7590: CALL_OW 178
// end ; if IsOk ( Khatam ) then
7594: LD_EXP 10
7598: PPUSH
7599: CALL_OW 302
7603: IFFALSE 7644
// begin ComWalk ( Khatam ) ;
7605: LD_EXP 10
7609: PPUSH
7610: CALL_OW 138
// ComMoveXY ( Khatam , 25 , 14 ) ;
7614: LD_EXP 10
7618: PPUSH
7619: LD_INT 25
7621: PPUSH
7622: LD_INT 14
7624: PPUSH
7625: CALL_OW 111
// AddComTurnXY ( Khatam , 25 , 13 ) ;
7629: LD_EXP 10
7633: PPUSH
7634: LD_INT 25
7636: PPUSH
7637: LD_INT 13
7639: PPUSH
7640: CALL_OW 178
// end ; if IsOk ( Nick ) then
7644: LD_EXP 11
7648: PPUSH
7649: CALL_OW 302
7653: IFFALSE 7694
// begin ComWalk ( Nick ) ;
7655: LD_EXP 11
7659: PPUSH
7660: CALL_OW 138
// ComMoveXY ( Nick , 24 , 16 ) ;
7664: LD_EXP 11
7668: PPUSH
7669: LD_INT 24
7671: PPUSH
7672: LD_INT 16
7674: PPUSH
7675: CALL_OW 111
// AddComTurnXY ( Nick , 25 , 13 ) ;
7679: LD_EXP 11
7683: PPUSH
7684: LD_INT 25
7686: PPUSH
7687: LD_INT 13
7689: PPUSH
7690: CALL_OW 178
// end ; alive = [ ] ;
7694: LD_ADDR_VAR 0 1
7698: PUSH
7699: EMPTY
7700: ST_TO_ADDR
// if IsOk ( Lisa ) then
7701: LD_EXP 12
7705: PPUSH
7706: CALL_OW 302
7710: IFFALSE 7728
// alive = alive ^ Lisa ;
7712: LD_ADDR_VAR 0 1
7716: PUSH
7717: LD_VAR 0 1
7721: PUSH
7722: LD_EXP 12
7726: ADD
7727: ST_TO_ADDR
// if IsOk ( Bobby ) then
7728: LD_EXP 9
7732: PPUSH
7733: CALL_OW 302
7737: IFFALSE 7755
// alive = alive ^ Bobby ;
7739: LD_ADDR_VAR 0 1
7743: PUSH
7744: LD_VAR 0 1
7748: PUSH
7749: LD_EXP 9
7753: ADD
7754: ST_TO_ADDR
// if IsOk ( Cyrus ) then
7755: LD_EXP 8
7759: PPUSH
7760: CALL_OW 302
7764: IFFALSE 7782
// alive = alive ^ Cyrus ;
7766: LD_ADDR_VAR 0 1
7770: PUSH
7771: LD_VAR 0 1
7775: PUSH
7776: LD_EXP 8
7780: ADD
7781: ST_TO_ADDR
// if IsOk ( AmME1 ) then
7782: LD_EXP 13
7786: PPUSH
7787: CALL_OW 302
7791: IFFALSE 7809
// alive = alive ^ AmME1 ;
7793: LD_ADDR_VAR 0 1
7797: PUSH
7798: LD_VAR 0 1
7802: PUSH
7803: LD_EXP 13
7807: ADD
7808: ST_TO_ADDR
// if IsOk ( AmFE2 ) then
7809: LD_EXP 14
7813: PPUSH
7814: CALL_OW 302
7818: IFFALSE 7836
// alive = alive ^ AmFE2 ;
7820: LD_ADDR_VAR 0 1
7824: PUSH
7825: LD_VAR 0 1
7829: PUSH
7830: LD_EXP 14
7834: ADD
7835: ST_TO_ADDR
// speaker = alive [ Rand ( 1 , alive ) ] ;
7836: LD_ADDR_VAR 0 2
7840: PUSH
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 1
7848: PPUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 12
7858: ARRAY
7859: ST_TO_ADDR
// case speaker of Lisa :
7860: LD_VAR 0 2
7864: PUSH
7865: LD_EXP 12
7869: DOUBLE
7870: EQUAL
7871: IFTRUE 7875
7873: GO 7890
7875: POP
// Say ( Lisa , DCorpses-Lisa-1 ) ; Bobby :
7876: LD_EXP 12
7880: PPUSH
7881: LD_STRING DCorpses-Lisa-1
7883: PPUSH
7884: CALL_OW 88
7888: GO 7991
7890: LD_EXP 9
7894: DOUBLE
7895: EQUAL
7896: IFTRUE 7900
7898: GO 7915
7900: POP
// Say ( Bobby , DCorpses-Bobby-1 ) ; Cyrus :
7901: LD_EXP 9
7905: PPUSH
7906: LD_STRING DCorpses-Bobby-1
7908: PPUSH
7909: CALL_OW 88
7913: GO 7991
7915: LD_EXP 8
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7940
7925: POP
// Say ( Cyrus , DCorpses-Cyrus-1 ) ; AmME1 :
7926: LD_EXP 8
7930: PPUSH
7931: LD_STRING DCorpses-Cyrus-1
7933: PPUSH
7934: CALL_OW 88
7938: GO 7991
7940: LD_EXP 13
7944: DOUBLE
7945: EQUAL
7946: IFTRUE 7950
7948: GO 7965
7950: POP
// Say ( AmME1 , DCorpses-Sol1-1 ) ; AmFE2 :
7951: LD_EXP 13
7955: PPUSH
7956: LD_STRING DCorpses-Sol1-1
7958: PPUSH
7959: CALL_OW 88
7963: GO 7991
7965: LD_EXP 14
7969: DOUBLE
7970: EQUAL
7971: IFTRUE 7975
7973: GO 7990
7975: POP
// Say ( AmFE2 , DCorpses-FSol1-1 ) ; end ;
7976: LD_EXP 14
7980: PPUSH
7981: LD_STRING DCorpses-FSol1-1
7983: PPUSH
7984: CALL_OW 88
7988: GO 7991
7990: POP
// Say ( John , DCorpses-JMM-1 ) ;
7991: LD_EXP 7
7995: PPUSH
7996: LD_STRING DCorpses-JMM-1
7998: PPUSH
7999: CALL_OW 88
// if IsOk ( Khatam ) then
8003: LD_EXP 10
8007: PPUSH
8008: CALL_OW 302
8012: IFFALSE 8026
// Say ( Khatam , DCorpses-Khat-1 ) ;
8014: LD_EXP 10
8018: PPUSH
8019: LD_STRING DCorpses-Khat-1
8021: PPUSH
8022: CALL_OW 88
// IngameOff ;
8026: CALL_OW 9
// Say ( John , DCorpses-JMM-2 ) ;
8030: LD_EXP 7
8034: PPUSH
8035: LD_STRING DCorpses-JMM-2
8037: PPUSH
8038: CALL_OW 88
// Tested_Americans = [ John , Lisa , Bobby , Cyrus , Khatam , AmME1 , AmFE2 ] ;
8042: LD_ADDR_EXP 113
8046: PUSH
8047: LD_EXP 7
8051: PUSH
8052: LD_EXP 12
8056: PUSH
8057: LD_EXP 9
8061: PUSH
8062: LD_EXP 8
8066: PUSH
8067: LD_EXP 10
8071: PUSH
8072: LD_EXP 13
8076: PUSH
8077: LD_EXP 14
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: ST_TO_ADDR
// for Un in Tested_Americans do
8091: LD_ADDR_VAR 0 3
8095: PUSH
8096: LD_EXP 113
8100: PUSH
8101: FOR_IN
8102: IFFALSE 8127
// Init_Lives = Init_Lives ^ GetLives ( Un ) ;
8104: LD_ADDR_EXP 112
8108: PUSH
8109: LD_EXP 112
8113: PUSH
8114: LD_VAR 0 3
8118: PPUSH
8119: CALL_OW 256
8123: ADD
8124: ST_TO_ADDR
8125: GO 8101
8127: POP
8128: POP
// end ;
8129: PPOPN 3
8131: END
// every 0 0$4 do var all , i , pom ;
8132: GO 8134
8134: DISABLE
8135: LD_INT 0
8137: PPUSH
8138: PPUSH
8139: PPUSH
// begin pom = true ;
8140: LD_ADDR_VAR 0 3
8144: PUSH
8145: LD_INT 1
8147: ST_TO_ADDR
// if GetLives ( [ John , Cyrus , Bobby , Khatam , Lisa , AmME1 , AmFE2 , AmMSo3 , Nick ] ) < Initial_Lives - 1 then
8148: LD_EXP 7
8152: PUSH
8153: LD_EXP 8
8157: PUSH
8158: LD_EXP 9
8162: PUSH
8163: LD_EXP 10
8167: PUSH
8168: LD_EXP 12
8172: PUSH
8173: LD_EXP 13
8177: PUSH
8178: LD_EXP 14
8182: PUSH
8183: LD_EXP 15
8187: PUSH
8188: LD_EXP 11
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: PPUSH
8204: CALL_OW 256
8208: PUSH
8209: LD_EXP 92
8213: PUSH
8214: LD_INT 1
8216: MINUS
8217: LESS
8218: IFFALSE 8250
// begin if holdfreemode then
8220: LD_OWVAR 73
8224: IFFALSE 8235
// Hint ( Hold2 ) else
8226: LD_STRING Hold2
8228: PPUSH
8229: CALL_OW 339
8233: GO 8242
// Hint ( Hold ) ;
8235: LD_STRING Hold
8237: PPUSH
8238: CALL_OW 339
// pom = false ;
8242: LD_ADDR_VAR 0 3
8246: PUSH
8247: LD_INT 0
8249: ST_TO_ADDR
// end ; if pom then
8250: LD_VAR 0 3
8254: IFFALSE 8257
// enable ;
8256: ENABLE
// end ;
8257: PPOPN 3
8259: END
// function Retreat ; var Un , i , Lives_Decreased ; begin
8260: LD_INT 0
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
// i = 1 ;
8266: LD_ADDR_VAR 0 3
8270: PUSH
8271: LD_INT 1
8273: ST_TO_ADDR
// for Un in Tested_Americans do
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: LD_EXP 113
8283: PUSH
8284: FOR_IN
8285: IFFALSE 8334
// begin if GetLives ( Un ) <> Init_Lives [ i ] then
8287: LD_VAR 0 2
8291: PPUSH
8292: CALL_OW 256
8296: PUSH
8297: LD_EXP 112
8301: PUSH
8302: LD_VAR 0 3
8306: ARRAY
8307: NONEQUAL
8308: IFFALSE 8318
// Lives_Decreased = true ;
8310: LD_ADDR_VAR 0 4
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// i = i + 1 ;
8318: LD_ADDR_VAR 0 3
8322: PUSH
8323: LD_VAR 0 3
8327: PUSH
8328: LD_INT 1
8330: PLUS
8331: ST_TO_ADDR
// end ;
8332: GO 8284
8334: POP
8335: POP
// if ( ( See ( americans , Brw1 ) or See ( americans , Brw2 ) or See ( americans , Brw3 ) ) and ( FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_vehicle ] ] ) = 0 ) and Lives_Decreased and not ( IsInArea ( John , hill ) ) ) then
8336: LD_EXP 3
8340: PPUSH
8341: LD_INT 29
8343: PPUSH
8344: CALL_OW 292
8348: PUSH
8349: LD_EXP 3
8353: PPUSH
8354: LD_INT 9
8356: PPUSH
8357: CALL_OW 292
8361: OR
8362: PUSH
8363: LD_EXP 3
8367: PPUSH
8368: LD_INT 30
8370: PPUSH
8371: CALL_OW 292
8375: OR
8376: PUSH
8377: LD_INT 22
8379: PUSH
8380: LD_EXP 3
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 21
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: PUSH
8408: LD_INT 0
8410: EQUAL
8411: AND
8412: PUSH
8413: LD_VAR 0 4
8417: AND
8418: PUSH
8419: LD_EXP 7
8423: PPUSH
8424: LD_INT 17
8426: PPUSH
8427: CALL_OW 308
8431: NOT
8432: AND
8433: IFFALSE 8445
// result = 1 else
8435: LD_ADDR_VAR 0 1
8439: PUSH
8440: LD_INT 1
8442: ST_TO_ADDR
8443: GO 8453
// result = 0 ;
8445: LD_ADDR_VAR 0 1
8449: PUSH
8450: LD_INT 0
8452: ST_TO_ADDR
// end ;
8453: LD_VAR 0 1
8457: RET
// every 0 0$2 trigger Retreat do
8458: CALL 8260 0 0
8462: IFFALSE 8487
8464: GO 8466
8466: DISABLE
// begin Byl_u_zakladny1 = true ;
8467: LD_ADDR_LOC 1
8471: PUSH
8472: LD_INT 1
8474: ST_TO_ADDR
// Say ( John , DX1-JMM-1 ) ;
8475: LD_EXP 7
8479: PPUSH
8480: LD_STRING DX1-JMM-1
8482: PPUSH
8483: CALL_OW 88
// end ;
8487: END
// every 0 0$1 trigger SeeXY ( americans , 75 , 70 ) or SeeXY ( americans , 77 , 73 ) or SeeXY ( americans , 77 , 69 ) or SeeXY ( americans , 78 , 71 ) do var Uns , Un ;
8488: LD_EXP 3
8492: PPUSH
8493: LD_INT 75
8495: PPUSH
8496: LD_INT 70
8498: PPUSH
8499: CALL_OW 293
8503: PUSH
8504: LD_EXP 3
8508: PPUSH
8509: LD_INT 77
8511: PPUSH
8512: LD_INT 73
8514: PPUSH
8515: CALL_OW 293
8519: OR
8520: PUSH
8521: LD_EXP 3
8525: PPUSH
8526: LD_INT 77
8528: PPUSH
8529: LD_INT 69
8531: PPUSH
8532: CALL_OW 293
8536: OR
8537: PUSH
8538: LD_EXP 3
8542: PPUSH
8543: LD_INT 78
8545: PPUSH
8546: LD_INT 71
8548: PPUSH
8549: CALL_OW 293
8553: OR
8554: IFFALSE 9023
8556: GO 8558
8558: DISABLE
8559: LD_INT 0
8561: PPUSH
8562: PPUSH
// begin PlaceUnitXY ( AmR1 , 75 , 70 , false ) ;
8563: LD_EXP 21
8567: PPUSH
8568: LD_INT 75
8570: PPUSH
8571: LD_INT 70
8573: PPUSH
8574: LD_INT 0
8576: PPUSH
8577: CALL_OW 48
// SetLives ( AmR1 , 500 ) ;
8581: LD_EXP 21
8585: PPUSH
8586: LD_INT 500
8588: PPUSH
8589: CALL_OW 234
// PlaceUnitXY ( AmR2 , 77 , 73 , false ) ;
8593: LD_EXP 22
8597: PPUSH
8598: LD_INT 77
8600: PPUSH
8601: LD_INT 73
8603: PPUSH
8604: LD_INT 0
8606: PPUSH
8607: CALL_OW 48
// SetLives ( AmR2 , 0 ) ;
8611: LD_EXP 22
8615: PPUSH
8616: LD_INT 0
8618: PPUSH
8619: CALL_OW 234
// PlaceUnitXY ( RuR1 , 77 , 69 , false ) ;
8623: LD_EXP 23
8627: PPUSH
8628: LD_INT 77
8630: PPUSH
8631: LD_INT 69
8633: PPUSH
8634: LD_INT 0
8636: PPUSH
8637: CALL_OW 48
// PlaceUnitXY ( RuR2 , 78 , 71 , false ) ;
8641: LD_EXP 24
8645: PPUSH
8646: LD_INT 78
8648: PPUSH
8649: LD_INT 71
8651: PPUSH
8652: LD_INT 0
8654: PPUSH
8655: CALL_OW 48
// ComAttackUnit ( [ RuR1 , RuR2 ] , AmR1 ) ;
8659: LD_EXP 23
8663: PUSH
8664: LD_EXP 24
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PPUSH
8673: LD_EXP 21
8677: PPUSH
8678: CALL_OW 115
// Uns = FilterAllUnits ( [ [ f_side , americans ] , [ f_distxy , 77 , 71 , 20 ] ] ) diff [ John , Lisa , Khatam ] ;
8682: LD_ADDR_VAR 0 1
8686: PUSH
8687: LD_INT 22
8689: PUSH
8690: LD_EXP 3
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 92
8701: PUSH
8702: LD_INT 77
8704: PUSH
8705: LD_INT 71
8707: PUSH
8708: LD_INT 20
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PPUSH
8721: CALL_OW 69
8725: PUSH
8726: LD_EXP 7
8730: PUSH
8731: LD_EXP 12
8735: PUSH
8736: LD_EXP 10
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: DIFF
8746: ST_TO_ADDR
// if Uns <> 0 then
8747: LD_VAR 0 1
8751: PUSH
8752: LD_INT 0
8754: NONEQUAL
8755: IFFALSE 8793
// begin Un = Uns [ Rand ( 1 , Uns ) ] ;
8757: LD_ADDR_VAR 0 2
8761: PUSH
8762: LD_VAR 0 1
8766: PUSH
8767: LD_INT 1
8769: PPUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: CALL_OW 12
8779: ARRAY
8780: ST_TO_ADDR
// Say ( Un , DF-Sol1-1 ) ;
8781: LD_VAR 0 2
8785: PPUSH
8786: LD_STRING DF-Sol1-1
8788: PPUSH
8789: CALL_OW 88
// end ; Say ( John , DF-JMM-1 ) ;
8793: LD_EXP 7
8797: PPUSH
8798: LD_STRING DF-JMM-1
8800: PPUSH
8801: CALL_OW 88
// while IsOk ( RuR1 ) or IsOk ( RuR2 ) do
8805: LD_EXP 23
8809: PPUSH
8810: CALL_OW 302
8814: PUSH
8815: LD_EXP 24
8819: PPUSH
8820: CALL_OW 302
8824: OR
8825: IFFALSE 8836
// Wait ( 0 0$1 ) ;
8827: LD_INT 35
8829: PPUSH
8830: CALL_OW 67
8834: GO 8805
// if not ( IsDead ( AmR1 ) ) then
8836: LD_EXP 21
8840: PPUSH
8841: CALL_OW 301
8845: NOT
8846: IFFALSE 8934
// begin SetSide ( AmR1 , americans ) ;
8848: LD_EXP 21
8852: PPUSH
8853: LD_EXP 3
8857: PPUSH
8858: CALL_OW 235
// Uns = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_scientistic ] ] ) ;
8862: LD_ADDR_VAR 0 1
8866: PUSH
8867: LD_INT 22
8869: PUSH
8870: LD_EXP 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 4
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: ST_TO_ADDR
// if Uns <> 0 then
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 0
8905: NONEQUAL
8906: IFFALSE 8922
// Say ( John , DFa-JMM-1 ) else
8908: LD_EXP 7
8912: PPUSH
8913: LD_STRING DFa-JMM-1
8915: PPUSH
8916: CALL_OW 88
8920: GO 8934
// Say ( John , DFa-JMM-1a ) ;
8922: LD_EXP 7
8926: PPUSH
8927: LD_STRING DFa-JMM-1a
8929: PPUSH
8930: CALL_OW 88
// end ; while not ( IsOk ( AmR1 ) or IsDead ( AmR1 ) ) do
8934: LD_EXP 21
8938: PPUSH
8939: CALL_OW 302
8943: PUSH
8944: LD_EXP 21
8948: PPUSH
8949: CALL_OW 301
8953: OR
8954: NOT
8955: IFFALSE 8966
// Wait ( 0 0$1 ) ;
8957: LD_INT 35
8959: PPUSH
8960: CALL_OW 67
8964: GO 8934
// if IsOk ( AmR1 ) then
8966: LD_EXP 21
8970: PPUSH
8971: CALL_OW 302
8975: IFFALSE 9023
// begin Say ( AmR1 , DFb-Sol1-1 ) ;
8977: LD_EXP 21
8981: PPUSH
8982: LD_STRING DFb-Sol1-1
8984: PPUSH
8985: CALL_OW 88
// ComMoveXY ( AmR1 , 77 , 73 ) ;
8989: LD_EXP 21
8993: PPUSH
8994: LD_INT 77
8996: PPUSH
8997: LD_INT 73
8999: PPUSH
9000: CALL_OW 111
// Wait ( 0 0$2 ) ;
9004: LD_INT 70
9006: PPUSH
9007: CALL_OW 67
// Say ( AmR1 , DFb-Sol1-1a ) ;
9011: LD_EXP 21
9015: PPUSH
9016: LD_STRING DFb-Sol1-1a
9018: PPUSH
9019: CALL_OW 88
// end ; end ;
9023: PPOPN 2
9025: END
// every 0 0$2 trigger See ( americans , dep1 ) or See ( americans , dep2 ) do
9026: LD_EXP 3
9030: PPUSH
9031: LD_INT 1
9033: PPUSH
9034: CALL_OW 292
9038: PUSH
9039: LD_EXP 3
9043: PPUSH
9044: LD_INT 10
9046: PPUSH
9047: CALL_OW 292
9051: OR
9052: IFFALSE 9064
9054: GO 9056
9056: DISABLE
// begin Hint ( CapturingBuilding ) ;
9057: LD_STRING CapturingBuilding
9059: PPUSH
9060: CALL_OW 339
// end ;
9064: END
// function see_vehicle ; begin
9065: LD_INT 0
9067: PPUSH
// if ( See ( americans , vehicle1 ) or See ( americans , vehicle2 ) ) then
9068: LD_EXP 3
9072: PPUSH
9073: LD_INT 5
9075: PPUSH
9076: CALL_OW 292
9080: PUSH
9081: LD_EXP 3
9085: PPUSH
9086: LD_INT 4
9088: PPUSH
9089: CALL_OW 292
9093: OR
9094: IFFALSE 9111
// begin result = 1 ;
9096: LD_ADDR_VAR 0 1
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// enable ( vehicles_detected ) ;
9104: LD_EXP 31
9108: ENABLE_MARKED
// end else
9109: GO 9119
// result = 0 ;
9111: LD_ADDR_VAR 0 1
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// end ;
9119: LD_VAR 0 1
9123: RET
// function see_vehicle1 ; begin
9124: LD_INT 0
9126: PPUSH
// if ( See ( americans , vehicle1 ) or See ( americans , vehicle2 ) ) then
9127: LD_EXP 3
9131: PPUSH
9132: LD_INT 5
9134: PPUSH
9135: CALL_OW 292
9139: PUSH
9140: LD_EXP 3
9144: PPUSH
9145: LD_INT 4
9147: PPUSH
9148: CALL_OW 292
9152: OR
9153: IFFALSE 9165
// begin result = 1 ;
9155: LD_ADDR_VAR 0 1
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// end else
9163: GO 9173
// result = 0 ;
9165: LD_ADDR_VAR 0 1
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// end ;
9173: LD_VAR 0 1
9177: RET
// function guardians_are_death ; begin
9178: LD_INT 0
9180: PPUSH
// if not ( IsOk ( RusESo1 ) or IsOk ( RusESo2 ) or IsOK ( RusEM1 ) ) then
9181: LD_INT 13
9183: PPUSH
9184: CALL_OW 302
9188: PUSH
9189: LD_INT 8
9191: PPUSH
9192: CALL_OW 302
9196: OR
9197: PUSH
9198: LD_INT 6
9200: PPUSH
9201: CALL_OW 302
9205: OR
9206: NOT
9207: IFFALSE 9219
// result = 1 else
9209: LD_ADDR_VAR 0 1
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
9217: GO 9227
// result = 0 ;
9219: LD_ADDR_VAR 0 1
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// end ;
9227: LD_VAR 0 1
9231: RET
// every 0 0$1 trigger ( see_vehicle and not ( JMM_saw_east_guard ) ) marked 21 do
9232: CALL 9065 0 0
9236: PUSH
9237: LD_EXP 95
9241: NOT
9242: AND
9243: IFFALSE 9268
9245: GO 9247
9247: DISABLE
// begin JMM_saw_east_guard = true ;
9248: LD_ADDR_EXP 95
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// Say ( John , DX3-JMM-1 ) ;
9256: LD_EXP 7
9260: PPUSH
9261: LD_STRING DX3-JMM-1
9263: PPUSH
9264: CALL_OW 88
// end ;
9268: END
// every 0 0$2 trigger IsOk ( RusEM1 ) and IsDrivenBy ( vehicle1 ) = RusEM1 do
9269: LD_INT 6
9271: PPUSH
9272: CALL_OW 302
9276: PUSH
9277: LD_INT 5
9279: PPUSH
9280: CALL_OW 311
9284: PUSH
9285: LD_INT 6
9287: EQUAL
9288: AND
9289: IFFALSE 9302
9291: GO 9293
9293: DISABLE
// begin sergej_succeeds = 1 ;
9294: LD_ADDR_EXP 78
9298: PUSH
9299: LD_INT 1
9301: ST_TO_ADDR
// end ;
9302: END
// every 0 0$1 trigger FilterUnitsInArea ( Dohled , [ [ f_see , russians ] , [ f_side , americans ] ] ) > 0 do
9303: LD_INT 9
9305: PPUSH
9306: LD_INT 101
9308: PUSH
9309: LD_EXP 5
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_EXP 3
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PPUSH
9334: CALL_OW 70
9338: PUSH
9339: LD_INT 0
9341: GREATER
9342: IFFALSE 9460
9344: GO 9346
9346: DISABLE
// begin ComFree ( RusEast ) ;
9347: LD_EXP 108
9351: PPUSH
9352: CALL_OW 139
// disable ( East_guard_seen ) ;
9356: LD_EXP 96
9360: DISABLE_MARKED
// DialogueOn ;
9361: CALL_OW 6
// SayNoFace ( RusESo2 , DX3-Rus1-1 ) ;
9365: LD_INT 8
9367: PPUSH
9368: LD_STRING DX3-Rus1-1
9370: PPUSH
9371: CALL_OW 89
// DialogueOff ;
9375: CALL_OW 7
// if not ( JMM_saw_east_guard ) then
9379: LD_EXP 95
9383: NOT
9384: IFFALSE 9455
// begin JMM_saw_east_guard = true ;
9386: LD_ADDR_EXP 95
9390: PUSH
9391: LD_INT 1
9393: ST_TO_ADDR
// DialogueOn ;
9394: CALL_OW 6
// Say ( John , DX3-JMM-1 ) ;
9398: LD_EXP 7
9402: PPUSH
9403: LD_STRING DX3-JMM-1
9405: PPUSH
9406: CALL_OW 88
// DialogueOff ;
9410: CALL_OW 7
// PlaceSeeing ( 117 , 41 , americans , - 6 ) ;
9414: LD_INT 117
9416: PPUSH
9417: LD_INT 41
9419: PPUSH
9420: LD_EXP 3
9424: PPUSH
9425: LD_INT 6
9427: NEG
9428: PPUSH
9429: CALL_OW 330
// Wait ( 0 0$10 ) ;
9433: LD_INT 350
9435: PPUSH
9436: CALL_OW 67
// RemoveSeeing ( 117 , 41 , americans ) ;
9440: LD_INT 117
9442: PPUSH
9443: LD_INT 41
9445: PPUSH
9446: LD_EXP 3
9450: PPUSH
9451: CALL_OW 331
// end ; enable ( attack ) ;
9455: LD_EXP 41
9459: ENABLE_MARKED
// end ;
9460: END
// every 0 0$5 trigger see_vehicle1 and guardians_are_death marked 6 do
9461: CALL 9124 0 0
9465: PUSH
9466: CALL 9178 0 0
9470: AND
9471: IFFALSE 9550
9473: GO 9475
9475: DISABLE
// begin DialogueOn ;
9476: CALL_OW 6
// if IsOk ( Bobby ) then
9480: LD_EXP 9
9484: PPUSH
9485: CALL_OW 302
9489: IFFALSE 9505
// Say ( Bobby , DX2-Bobby-1 ) else
9491: LD_EXP 9
9495: PPUSH
9496: LD_STRING DX2-Bobby-1
9498: PPUSH
9499: CALL_OW 88
9503: GO 9517
// Say ( John , DX2-JMM-1 ) ;
9505: LD_EXP 7
9509: PPUSH
9510: LD_STRING DX2-JMM-1
9512: PPUSH
9513: CALL_OW 88
// if ( Byl_u_zakladny1 and IsOk ( Bobby ) ) then
9517: LD_LOC 1
9521: PUSH
9522: LD_EXP 9
9526: PPUSH
9527: CALL_OW 302
9531: AND
9532: IFFALSE 9546
// Say ( John , DX2-JMM-1a ) ;
9534: LD_EXP 7
9538: PPUSH
9539: LD_STRING DX2-JMM-1a
9541: PPUSH
9542: CALL_OW 88
// DialogueOff ;
9546: CALL_OW 7
// end ;
9550: END
// every 0 0$2 trigger see_vehicle1 and guardians_are_death do
9551: CALL 9124 0 0
9555: PUSH
9556: CALL 9178 0 0
9560: AND
9561: IFFALSE 9600
9563: GO 9565
9565: DISABLE
// begin if IsOk ( vehicle1 ) and IsOk ( Vehicle2 ) then
9566: LD_INT 5
9568: PPUSH
9569: CALL_OW 302
9573: PUSH
9574: LD_INT 4
9576: PPUSH
9577: CALL_OW 302
9581: AND
9582: IFFALSE 9593
// Hint ( CapturingVehicles1 ) else
9584: LD_STRING CapturingVehicles1
9586: PPUSH
9587: CALL_OW 339
9591: GO 9600
// Hint ( CapturingVehicles2 ) ;
9593: LD_STRING CapturingVehicles2
9595: PPUSH
9596: CALL_OW 339
// end ;
9600: END
// on VehicleCaptured ( vehnew , vehold , origside , hum ) marked 5 do var InV1 , InV2 ;
9601: LD_INT 0
9603: PPUSH
9604: PPUSH
// begin if ( ( vehold = vehicle1 ) or ( vehold = vehicle2 ) ) and ( hum <> RusEM1 ) and First_Capture then
9605: LD_VAR 0 2
9609: PUSH
9610: LD_INT 5
9612: EQUAL
9613: PUSH
9614: LD_VAR 0 2
9618: PUSH
9619: LD_INT 4
9621: EQUAL
9622: OR
9623: PUSH
9624: LD_VAR 0 4
9628: PUSH
9629: LD_INT 6
9631: NONEQUAL
9632: AND
9633: PUSH
9634: LD_EXP 84
9638: AND
9639: IFFALSE 9886
// begin First_Capture = false ;
9641: LD_ADDR_EXP 84
9645: PUSH
9646: LD_INT 0
9648: ST_TO_ADDR
// disable ( uncanny_vehicles ) ;
9649: LD_EXP 32
9653: DISABLE_MARKED
// DialogueOn ;
9654: CALL_OW 6
// if ( ( hum = John ) and IsOk ( Lisa ) ) then
9658: LD_VAR 0 4
9662: PUSH
9663: LD_EXP 7
9667: EQUAL
9668: PUSH
9669: LD_EXP 12
9673: PPUSH
9674: CALL_OW 302
9678: AND
9679: IFFALSE 9714
// begin Say ( Lisa , DX2b-Lisa-1 ) ;
9681: LD_EXP 12
9685: PPUSH
9686: LD_STRING DX2b-Lisa-1
9688: PPUSH
9689: CALL_OW 88
// Say ( John , DX2b-JMM-1 ) ;
9693: LD_EXP 7
9697: PPUSH
9698: LD_STRING DX2b-JMM-1
9700: PPUSH
9701: CALL_OW 88
// Hint ( ControllingVehicles ) ;
9705: LD_STRING ControllingVehicles
9707: PPUSH
9708: CALL_OW 339
// end else
9712: GO 9864
// begin Say ( John , DX2a-JMM-1 ) ;
9714: LD_EXP 7
9718: PPUSH
9719: LD_STRING DX2a-JMM-1
9721: PPUSH
9722: CALL_OW 88
// if hum = Lisa then
9726: LD_VAR 0 4
9730: PUSH
9731: LD_EXP 12
9735: EQUAL
9736: IFFALSE 9752
// Say ( Lisa , DX2a-Lisa-1 ) else
9738: LD_EXP 12
9742: PPUSH
9743: LD_STRING DX2a-Lisa-1
9745: PPUSH
9746: CALL_OW 88
9750: GO 9845
// if hum = Bobby then
9752: LD_VAR 0 4
9756: PUSH
9757: LD_EXP 9
9761: EQUAL
9762: IFFALSE 9778
// Say ( Bobby , DX2a-Bobby-1 ) else
9764: LD_EXP 9
9768: PPUSH
9769: LD_STRING DX2a-Bobby-1
9771: PPUSH
9772: CALL_OW 88
9776: GO 9845
// if hum = Cyrus then
9778: LD_VAR 0 4
9782: PUSH
9783: LD_EXP 8
9787: EQUAL
9788: IFFALSE 9804
// Say ( Cyrus , DX2a-Cyrus-1 ) else
9790: LD_EXP 8
9794: PPUSH
9795: LD_STRING DX2a-Cyrus-1
9797: PPUSH
9798: CALL_OW 88
9802: GO 9845
// if ( GetSex ( hum ) = Sex_Male ) then
9804: LD_VAR 0 4
9808: PPUSH
9809: CALL_OW 258
9813: PUSH
9814: LD_INT 1
9816: EQUAL
9817: IFFALSE 9833
// Say ( hum , DX2a-Sol1-1 ) else
9819: LD_VAR 0 4
9823: PPUSH
9824: LD_STRING DX2a-Sol1-1
9826: PPUSH
9827: CALL_OW 88
9831: GO 9845
// Say ( hum , DX2a-FSol1-1 ) ;
9833: LD_VAR 0 4
9837: PPUSH
9838: LD_STRING DX2a-FSol1-1
9840: PPUSH
9841: CALL_OW 88
// Say ( John , DX2a-JMM-2 ) ;
9845: LD_EXP 7
9849: PPUSH
9850: LD_STRING DX2a-JMM-2
9852: PPUSH
9853: CALL_OW 88
// Hint ( ControllingVehicles ) ;
9857: LD_STRING ControllingVehicles
9859: PPUSH
9860: CALL_OW 339
// end ; DialogueOff ;
9864: CALL_OW 7
// if sergej_succeeds = 0 then
9868: LD_EXP 78
9872: PUSH
9873: LD_INT 0
9875: EQUAL
9876: IFFALSE 9886
// sergej_succeeds = 2 ;
9878: LD_ADDR_EXP 78
9882: PUSH
9883: LD_INT 2
9885: ST_TO_ADDR
// end ; if ( vehold = vehicle1 ) then
9886: LD_VAR 0 2
9890: PUSH
9891: LD_INT 5
9893: EQUAL
9894: IFFALSE 9906
// vehicle1_new = vehnew ;
9896: LD_ADDR_EXP 97
9900: PUSH
9901: LD_VAR 0 1
9905: ST_TO_ADDR
// if ( vehold = vehicle2 ) then
9906: LD_VAR 0 2
9910: PUSH
9911: LD_INT 4
9913: EQUAL
9914: IFFALSE 9926
// vehicle2_new = vehnew ;
9916: LD_ADDR_EXP 98
9920: PUSH
9921: LD_VAR 0 1
9925: ST_TO_ADDR
// end ;
9926: PPOPN 6
9928: END
// every 0 0$5 trigger ( IsOk ( vehicle1_new ) and not ( IsInArea ( vehicle1_new , Area01 ) ) ) or ( IsOk ( vehicle2_new ) and not ( IsInArea ( vehicle2_new , Area01 ) ) ) do
9929: LD_EXP 97
9933: PPUSH
9934: CALL_OW 302
9938: PUSH
9939: LD_EXP 97
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 308
9951: NOT
9952: AND
9953: PUSH
9954: LD_EXP 98
9958: PPUSH
9959: CALL_OW 302
9963: PUSH
9964: LD_EXP 98
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 308
9976: NOT
9977: AND
9978: OR
9979: IFFALSE 9991
9981: GO 9983
9983: DISABLE
// begin Hint ( VehicleState ) ;
9984: LD_STRING VehicleState
9986: PPUSH
9987: CALL_OW 339
// end ;
9991: END
// every 0 0$1 trigger GetLives ( RusEM1 ) < 1000 do
9992: LD_INT 6
9994: PPUSH
9995: CALL_OW 256
9999: PUSH
10000: LD_INT 1000
10002: LESS
10003: IFFALSE 10025
10005: GO 10007
10007: DISABLE
// begin if not ( IsBusy ( RusEM1 ) ) then
10008: LD_INT 6
10010: PPUSH
10011: CALL_OW 315
10015: NOT
10016: IFFALSE 10025
// ComFree ( RusEM1 ) ;
10018: LD_INT 6
10020: PPUSH
10021: CALL_OW 139
// end ;
10025: END
// every 0 0$3 trigger FilterUnitsInArea ( Before_River , [ f_side , americans ] ) <> 0 do var Uns , Un ;
10026: LD_INT 24
10028: PPUSH
10029: LD_INT 22
10031: PUSH
10032: LD_EXP 3
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 70
10045: PUSH
10046: LD_INT 0
10048: NONEQUAL
10049: IFFALSE 10126
10051: GO 10053
10053: DISABLE
10054: LD_INT 0
10056: PPUSH
10057: PPUSH
// begin Uns = FilterUnitsInArea ( Before_River , [ [ f_side , americans ] ] ) ;
10058: LD_ADDR_VAR 0 1
10062: PUSH
10063: LD_INT 24
10065: PPUSH
10066: LD_INT 22
10068: PUSH
10069: LD_EXP 3
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: PPUSH
10081: CALL_OW 70
10085: ST_TO_ADDR
// for Un in Uns do
10086: LD_ADDR_VAR 0 2
10090: PUSH
10091: LD_VAR 0 1
10095: PUSH
10096: FOR_IN
10097: IFFALSE 10123
// if IsSelected ( Un ) then
10099: LD_VAR 0 2
10103: PPUSH
10104: CALL_OW 306
10108: IFFALSE 10121
// begin Hint ( Rivers ) ;
10110: LD_STRING Rivers
10112: PPUSH
10113: CALL_OW 339
// exit ;
10117: POP
10118: POP
10119: GO 10126
// end ;
10121: GO 10096
10123: POP
10124: POP
// enable ;
10125: ENABLE
// end ;
10126: PPOPN 2
10128: END
// every 0 0$0.1 marked 10 do
10129: GO 10131
10131: DISABLE
// begin AddComEnterUnit ( RusEM1 , vehicle1 ) ;
10132: LD_INT 6
10134: PPUSH
10135: LD_INT 5
10137: PPUSH
10138: CALL_OW 180
// AddComFree ( RusEM1 ) ;
10142: LD_INT 6
10144: PPUSH
10145: CALL_OW 199
// end ;
10149: END
// function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10150: LD_INT 0
10152: PPUSH
10153: PPUSH
10154: PPUSH
10155: PPUSH
10156: PPUSH
// nearest_dist = 1000 ;
10157: LD_ADDR_VAR 0 4
10161: PUSH
10162: LD_INT 1000
10164: ST_TO_ADDR
// nearest_un = un ;
10165: LD_ADDR_VAR 0 5
10169: PUSH
10170: LD_VAR 0 1
10174: ST_TO_ADDR
// for sold in units do
10175: LD_ADDR_VAR 0 6
10179: PUSH
10180: LD_VAR 0 2
10184: PUSH
10185: FOR_IN
10186: IFFALSE 10242
// begin dist = GetDistUnits ( un , sold ) ;
10188: LD_ADDR_VAR 0 7
10192: PUSH
10193: LD_VAR 0 1
10197: PPUSH
10198: LD_VAR 0 6
10202: PPUSH
10203: CALL_OW 296
10207: ST_TO_ADDR
// if dist < nearest_dist then
10208: LD_VAR 0 7
10212: PUSH
10213: LD_VAR 0 4
10217: LESS
10218: IFFALSE 10240
// begin nearest_un = sold ;
10220: LD_ADDR_VAR 0 5
10224: PUSH
10225: LD_VAR 0 6
10229: ST_TO_ADDR
// nearest_dist = dist ;
10230: LD_ADDR_VAR 0 4
10234: PUSH
10235: LD_VAR 0 7
10239: ST_TO_ADDR
// end ; end ;
10240: GO 10185
10242: POP
10243: POP
// result := nearest_un ;
10244: LD_ADDR_VAR 0 3
10248: PUSH
10249: LD_VAR 0 5
10253: ST_TO_ADDR
// end ;
10254: LD_VAR 0 3
10258: RET
// function FindMostIll ( Uns ) ; var TheMostIll , Un ; begin
10259: LD_INT 0
10261: PPUSH
10262: PPUSH
10263: PPUSH
// TheMostIll = Uns [ 1 ] ;
10264: LD_ADDR_VAR 0 3
10268: PUSH
10269: LD_VAR 0 1
10273: PUSH
10274: LD_INT 1
10276: ARRAY
10277: ST_TO_ADDR
// for Un in Uns do
10278: LD_ADDR_VAR 0 4
10282: PUSH
10283: LD_VAR 0 1
10287: PUSH
10288: FOR_IN
10289: IFFALSE 10325
// if GetLives ( Un ) < GetLives ( TheMostIll ) then
10291: LD_VAR 0 4
10295: PPUSH
10296: CALL_OW 256
10300: PUSH
10301: LD_VAR 0 3
10305: PPUSH
10306: CALL_OW 256
10310: LESS
10311: IFFALSE 10323
// TheMostIll = Un ;
10313: LD_ADDR_VAR 0 3
10317: PUSH
10318: LD_VAR 0 4
10322: ST_TO_ADDR
10323: GO 10288
10325: POP
10326: POP
// result = TheMostIll ;
10327: LD_ADDR_VAR 0 2
10331: PUSH
10332: LD_VAR 0 3
10336: ST_TO_ADDR
// end ;
10337: LD_VAR 0 2
10341: RET
// every 0 0$0.5 trigger SeeXY ( americans , 25 , 32 ) do var Uns , Un , Ill , The_Most_Ill ;
10342: LD_EXP 3
10346: PPUSH
10347: LD_INT 25
10349: PPUSH
10350: LD_INT 32
10352: PPUSH
10353: CALL_OW 293
10357: IFFALSE 10910
10359: GO 10361
10361: DISABLE
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
// begin IngameOn ;
10368: CALL_OW 8
// PlaceUnitXYR ( Khatam , 25 , 31 , 1 , false ) ;
10372: LD_EXP 10
10376: PPUSH
10377: LD_INT 25
10379: PPUSH
10380: LD_INT 31
10382: PPUSH
10383: LD_INT 1
10385: PPUSH
10386: LD_INT 0
10388: PPUSH
10389: CALL_OW 50
// CenterOnUnits ( Khatam ) ;
10393: LD_EXP 10
10397: PPUSH
10398: CALL_OW 85
// Uns = FilterAllUnits ( [ [ f_side , americans ] ] ) ;
10402: LD_ADDR_VAR 0 1
10406: PUSH
10407: LD_INT 22
10409: PUSH
10410: LD_EXP 3
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: PPUSH
10422: CALL_OW 69
10426: ST_TO_ADDR
// for Un in Uns do
10427: LD_ADDR_VAR 0 2
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: FOR_IN
10438: IFFALSE 10480
// begin ComWait ( Un , 0 0$1 * Rand ( 5 , 15 ) ) ;
10440: LD_VAR 0 2
10444: PPUSH
10445: LD_INT 35
10447: PUSH
10448: LD_INT 5
10450: PPUSH
10451: LD_INT 15
10453: PPUSH
10454: CALL_OW 12
10458: MUL
10459: PPUSH
10460: CALL_OW 142
// ComTurnUnit ( Un , Khatam ) ;
10464: LD_VAR 0 2
10468: PPUSH
10469: LD_EXP 10
10473: PPUSH
10474: CALL_OW 119
// end ;
10478: GO 10437
10480: POP
10481: POP
// AddComMoveUnit ( Khatam , Nearest ( Khatam , FilterAllUnits ( [ f_side , americans ] ) diff [ Khatam ] ) ) ;
10482: LD_EXP 10
10486: PPUSH
10487: LD_EXP 10
10491: PPUSH
10492: LD_INT 22
10494: PUSH
10495: LD_EXP 3
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 69
10508: PUSH
10509: LD_EXP 10
10513: PUSH
10514: EMPTY
10515: LIST
10516: DIFF
10517: PPUSH
10518: CALL 10150 0 2
10522: PPUSH
10523: CALL_OW 172
// Say ( Khatam , D2a-Khat-1 ) ;
10527: LD_EXP 10
10531: PPUSH
10532: LD_STRING D2a-Khat-1
10534: PPUSH
10535: CALL_OW 88
// if GetDistUnits ( Khatam , John ) < 15 and GetDistUnits ( Khatam , John ) > 5 then
10539: LD_EXP 10
10543: PPUSH
10544: LD_EXP 7
10548: PPUSH
10549: CALL_OW 296
10553: PUSH
10554: LD_INT 15
10556: LESS
10557: PUSH
10558: LD_EXP 10
10562: PPUSH
10563: LD_EXP 7
10567: PPUSH
10568: CALL_OW 296
10572: PUSH
10573: LD_INT 5
10575: GREATER
10576: AND
10577: IFFALSE 10593
// AddComMoveUnit ( Khatam , John ) ;
10579: LD_EXP 10
10583: PPUSH
10584: LD_EXP 7
10588: PPUSH
10589: CALL_OW 172
// Say ( John , D2a-JMM-1 ) ;
10593: LD_EXP 7
10597: PPUSH
10598: LD_STRING D2a-JMM-1
10600: PPUSH
10601: CALL_OW 88
// IngameOff ;
10605: CALL_OW 9
// DialogueOn ;
10609: CALL_OW 6
// interface_hidden = true ;
10613: LD_ADDR_OWVAR 54
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// Say ( Khatam , D2a-Khat-2 ) ;
10621: LD_EXP 10
10625: PPUSH
10626: LD_STRING D2a-Khat-2
10628: PPUSH
10629: CALL_OW 88
// Say ( John , D2a-JMM-2 ) ;
10633: LD_EXP 7
10637: PPUSH
10638: LD_STRING D2a-JMM-2
10640: PPUSH
10641: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
10645: LD_EXP 10
10649: PPUSH
10650: LD_STRING D2a-Khat-3
10652: PPUSH
10653: CALL_OW 88
// Say ( John , D2a-JMM-3 ) ;
10657: LD_EXP 7
10661: PPUSH
10662: LD_STRING D2a-JMM-3
10664: PPUSH
10665: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
10669: LD_EXP 10
10673: PPUSH
10674: LD_STRING D2a-Khat-4
10676: PPUSH
10677: CALL_OW 88
// Say ( John , D2a-JMM-4 ) ;
10681: LD_EXP 7
10685: PPUSH
10686: LD_STRING D2a-JMM-4
10688: PPUSH
10689: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
10693: LD_EXP 10
10697: PPUSH
10698: LD_STRING D2a-Khat-5
10700: PPUSH
10701: CALL_OW 88
// Say ( John , D2a-JMM-5 ) ;
10705: LD_EXP 7
10709: PPUSH
10710: LD_STRING D2a-JMM-5
10712: PPUSH
10713: CALL_OW 88
// interface_hidden = false ;
10717: LD_ADDR_OWVAR 54
10721: PUSH
10722: LD_INT 0
10724: ST_TO_ADDR
// DialogueOff ;
10725: CALL_OW 7
// ComFree ( Uns ) ;
10729: LD_VAR 0 1
10733: PPUSH
10734: CALL_OW 139
// ComFree ( Khatam ) ;
10738: LD_EXP 10
10742: PPUSH
10743: CALL_OW 139
// SetSide ( Khatam , americans ) ;
10747: LD_EXP 10
10751: PPUSH
10752: LD_EXP 3
10756: PPUSH
10757: CALL_OW 235
// Ill = UnitFilter ( [ John , Cyrus , Bobby , Nick , Lisa , AmME1 , AmFE2 , AmMSo3 ] , [ f_ok ] ) ;
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_EXP 7
10770: PUSH
10771: LD_EXP 8
10775: PUSH
10776: LD_EXP 9
10780: PUSH
10781: LD_EXP 11
10785: PUSH
10786: LD_EXP 12
10790: PUSH
10791: LD_EXP 13
10795: PUSH
10796: LD_EXP 14
10800: PUSH
10801: LD_EXP 15
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: PPUSH
10816: LD_INT 50
10818: PUSH
10819: EMPTY
10820: LIST
10821: PPUSH
10822: CALL_OW 72
10826: ST_TO_ADDR
// The_Most_Ill = FindMostIll ( Ill ) ;
10827: LD_ADDR_VAR 0 4
10831: PUSH
10832: LD_VAR 0 3
10836: PPUSH
10837: CALL 10259 0 1
10841: ST_TO_ADDR
// if GetLives ( The_Most_Ill ) < 1000 and IsLive ( The_Most_Ill ) then
10842: LD_VAR 0 4
10846: PPUSH
10847: CALL_OW 256
10851: PUSH
10852: LD_INT 1000
10854: LESS
10855: PUSH
10856: LD_VAR 0 4
10860: PPUSH
10861: CALL_OW 300
10865: AND
10866: IFFALSE 10903
// begin ComHeal ( Khatam , The_Most_Ill ) ;
10868: LD_EXP 10
10872: PPUSH
10873: LD_VAR 0 4
10877: PPUSH
10878: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
10882: LD_EXP 10
10886: PPUSH
10887: LD_STRING D2b-Khat-1
10889: PPUSH
10890: CALL_OW 88
// Hint ( Scientists1 ) ;
10894: LD_STRING Scientists1
10896: PPUSH
10897: CALL_OW 339
// end else
10901: GO 10910
// Hint ( Scientists2 ) ;
10903: LD_STRING Scientists2
10905: PPUSH
10906: CALL_OW 339
// end ;
10910: PPOPN 4
10912: END
// function Set_times ; var Time_to_visit , i ; begin
10913: LD_INT 0
10915: PPUSH
10916: PPUSH
10917: PPUSH
// Time_of_capture = tick ;
10918: LD_ADDR_EXP 30
10922: PUSH
10923: LD_OWVAR 1
10927: ST_TO_ADDR
// i = ( 27 - ( Time_of_capture ) / 1 1$0 ) / ( 2 + Difficulty ) ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_INT 27
10935: PUSH
10936: LD_EXP 30
10940: PUSH
10941: LD_INT 2100
10943: DIVREAL
10944: MINUS
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: LD_OWVAR 67
10953: PLUS
10954: DIVREAL
10955: ST_TO_ADDR
// if i < 1.5 then
10956: LD_VAR 0 3
10960: PUSH
10961: LD_REAL  1.50000000000000E+0000
10964: LESS
10965: IFFALSE 10976
// i = 1.5 ;
10967: LD_ADDR_VAR 0 3
10971: PUSH
10972: LD_REAL  1.50000000000000E+0000
10975: ST_TO_ADDR
// if i > 4 then
10976: LD_VAR 0 3
10980: PUSH
10981: LD_INT 4
10983: GREATER
10984: IFFALSE 10994
// i = 4 ;
10986: LD_ADDR_VAR 0 3
10990: PUSH
10991: LD_INT 4
10993: ST_TO_ADDR
// Time_to_visit = ( i * 1 1$0 ) div 1 ;
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_VAR 0 3
11003: PUSH
11004: LD_INT 2100
11006: MUL
11007: PUSH
11008: LD_INT 1
11010: DIV
11011: ST_TO_ADDR
// Time_of_visit = Time_of_capture + Time_to_visit ;
11012: LD_ADDR_EXP 25
11016: PUSH
11017: LD_EXP 30
11021: PUSH
11022: LD_VAR 0 2
11026: PLUS
11027: ST_TO_ADDR
// Time_of_attack = Time_of_visit + 5 5$30 + ( 3 - Difficulty ) * ( 2 2$00 ) ;
11028: LD_ADDR_EXP 26
11032: PUSH
11033: LD_EXP 25
11037: PUSH
11038: LD_INT 11550
11040: PLUS
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: LD_OWVAR 67
11049: MINUS
11050: PUSH
11051: LD_INT 4200
11053: MUL
11054: PLUS
11055: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11056: LD_STRING M2
11058: PPUSH
11059: CALL_OW 337
// Say ( John , D3b-JMM-1 ) ;
11063: LD_EXP 7
11067: PPUSH
11068: LD_STRING D3b-JMM-1
11070: PPUSH
11071: CALL_OW 88
// end ;
11075: LD_VAR 0 1
11079: RET
// every 0 0$2 trigger GetSide ( Arm1 ) = americans do
11080: LD_INT 2
11082: PPUSH
11083: CALL_OW 255
11087: PUSH
11088: LD_EXP 3
11092: EQUAL
11093: IFFALSE 11105
11095: GO 11097
11097: DISABLE
// begin Hint ( Armoury ) ;
11098: LD_STRING Armoury
11100: PPUSH
11101: CALL_OW 339
// end ;
11105: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , americans ] , [ f_btype , b_breastwork ] ] ) > 0 do
11106: LD_INT 22
11108: PUSH
11109: LD_EXP 3
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 30
11120: PUSH
11121: LD_INT 31
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PPUSH
11132: CALL_OW 69
11136: PUSH
11137: LD_INT 0
11139: GREATER
11140: IFFALSE 11152
11142: GO 11144
11144: DISABLE
// begin Hint ( Breastworks ) ;
11145: LD_STRING Breastworks
11147: PPUSH
11148: CALL_OW 339
// end ;
11152: END
// every 0 0$3 trigger GetSide ( dep1 ) = americans do
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 255
11160: PUSH
11161: LD_EXP 3
11165: EQUAL
11166: IFFALSE 11367
11168: GO 11170
11170: DISABLE
// begin DialogueOn ;
11171: CALL_OW 6
// if GetSide ( dep2 ) = americans then
11175: LD_INT 10
11177: PPUSH
11178: CALL_OW 255
11182: PUSH
11183: LD_EXP 3
11187: EQUAL
11188: IFFALSE 11298
// begin Say ( John , D3a-JMM-1 ) ;
11190: LD_EXP 7
11194: PPUSH
11195: LD_STRING D3a-JMM-1
11197: PPUSH
11198: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
11202: LD_EXP 16
11206: PPUSH
11207: LD_STRING D3a-Pow-1
11209: PPUSH
11210: CALL_OW 94
// Say ( John , D3a-JMM-2 ) ;
11214: LD_EXP 7
11218: PPUSH
11219: LD_STRING D3a-JMM-2
11221: PPUSH
11222: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
11226: LD_EXP 16
11230: PPUSH
11231: LD_STRING D3a-Pow-2
11233: PPUSH
11234: CALL_OW 94
// Say ( John , D3a-JMM-3 ) ;
11238: LD_EXP 7
11242: PPUSH
11243: LD_STRING D3a-JMM-3
11245: PPUSH
11246: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
11250: LD_EXP 16
11254: PPUSH
11255: LD_STRING D3a-Pow-3
11257: PPUSH
11258: CALL_OW 94
// Say ( John , D3a-JMM-4 ) ;
11262: LD_EXP 7
11266: PPUSH
11267: LD_STRING D3a-JMM-4
11269: PPUSH
11270: CALL_OW 88
// DialogueOff ;
11274: CALL_OW 7
// Hint ( Depot2 ) ;
11278: LD_STRING Depot2
11280: PPUSH
11281: CALL_OW 339
// Hint ( Transporting ) ;
11285: LD_STRING Transporting
11287: PPUSH
11288: CALL_OW 339
// Set_times ;
11292: CALL 10913 0 0
// end else
11296: GO 11367
// begin Wait ( 2 * 0 0$1 ) ;
11298: LD_INT 2
11300: PUSH
11301: LD_INT 35
11303: MUL
11304: PPUSH
11305: CALL_OW 67
// Say ( John , D3-JMM-1 ) ;
11309: LD_EXP 7
11313: PPUSH
11314: LD_STRING D3-JMM-1
11316: PPUSH
11317: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
11321: LD_EXP 16
11325: PPUSH
11326: LD_STRING D3-Pow-1
11328: PPUSH
11329: CALL_OW 94
// if IsOk ( Cyrus ) then
11333: LD_EXP 8
11337: PPUSH
11338: CALL_OW 302
11342: IFFALSE 11356
// Say ( Cyrus , D3-Cyrus-1 ) ;
11344: LD_EXP 8
11348: PPUSH
11349: LD_STRING D3-Cyrus-1
11351: PPUSH
11352: CALL_OW 88
// DialogueOff ;
11356: CALL_OW 7
// Hint ( Depot ) ;
11360: LD_STRING Depot
11362: PPUSH
11363: CALL_OW 339
// end ; end ;
11367: END
// every 0 0$3 trigger GetSide ( dep2 ) = americans do
11368: LD_INT 10
11370: PPUSH
11371: CALL_OW 255
11375: PUSH
11376: LD_EXP 3
11380: EQUAL
11381: IFFALSE 11582
11383: GO 11385
11385: DISABLE
// begin DialogueOn ;
11386: CALL_OW 6
// if GetSide ( dep1 ) = americans then
11390: LD_INT 1
11392: PPUSH
11393: CALL_OW 255
11397: PUSH
11398: LD_EXP 3
11402: EQUAL
11403: IFFALSE 11513
// begin Say ( John , D3a-JMM-1 ) ;
11405: LD_EXP 7
11409: PPUSH
11410: LD_STRING D3a-JMM-1
11412: PPUSH
11413: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
11417: LD_EXP 16
11421: PPUSH
11422: LD_STRING D3a-Pow-1
11424: PPUSH
11425: CALL_OW 94
// Say ( John , D3a-JMM-2 ) ;
11429: LD_EXP 7
11433: PPUSH
11434: LD_STRING D3a-JMM-2
11436: PPUSH
11437: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
11441: LD_EXP 16
11445: PPUSH
11446: LD_STRING D3a-Pow-2
11448: PPUSH
11449: CALL_OW 94
// Say ( John , D3a-JMM-3 ) ;
11453: LD_EXP 7
11457: PPUSH
11458: LD_STRING D3a-JMM-3
11460: PPUSH
11461: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
11465: LD_EXP 16
11469: PPUSH
11470: LD_STRING D3a-Pow-3
11472: PPUSH
11473: CALL_OW 94
// Say ( John , D3a-JMM-4 ) ;
11477: LD_EXP 7
11481: PPUSH
11482: LD_STRING D3a-JMM-4
11484: PPUSH
11485: CALL_OW 88
// DialogueOff ;
11489: CALL_OW 7
// Hint ( Depot2 ) ;
11493: LD_STRING Depot2
11495: PPUSH
11496: CALL_OW 339
// Hint ( Transporting ) ;
11500: LD_STRING Transporting
11502: PPUSH
11503: CALL_OW 339
// Set_times ;
11507: CALL 10913 0 0
// end else
11511: GO 11582
// begin Wait ( 2 * 0 0$1 ) ;
11513: LD_INT 2
11515: PUSH
11516: LD_INT 35
11518: MUL
11519: PPUSH
11520: CALL_OW 67
// Say ( John , D3-JMM-1 ) ;
11524: LD_EXP 7
11528: PPUSH
11529: LD_STRING D3-JMM-1
11531: PPUSH
11532: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
11536: LD_EXP 16
11540: PPUSH
11541: LD_STRING D3-Pow-1
11543: PPUSH
11544: CALL_OW 94
// if IsOk ( Cyrus ) then
11548: LD_EXP 8
11552: PPUSH
11553: CALL_OW 302
11557: IFFALSE 11571
// Say ( Cyrus , D3-Cyrus-1 ) ;
11559: LD_EXP 8
11563: PPUSH
11564: LD_STRING D3-Cyrus-1
11566: PPUSH
11567: CALL_OW 88
// DialogueOff ;
11571: CALL_OW 7
// Hint ( Depot ) ;
11575: LD_STRING Depot
11577: PPUSH
11578: CALL_OW 339
// end ; end ;
11582: END
// every 0 0$5 trigger GetResourceType ( GetBase ( GetUnitNumber ( 52 , 10 ) ) , mat_cans ) > 20 do
11583: LD_INT 52
11585: PPUSH
11586: LD_INT 10
11588: PPUSH
11589: CALL_OW 438
11593: PPUSH
11594: CALL_OW 274
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 275
11606: PUSH
11607: LD_INT 20
11609: GREATER
11610: IFFALSE 11622
11612: GO 11614
11614: DISABLE
// begin Hint ( Building ) ;
11615: LD_STRING Building
11617: PPUSH
11618: CALL_OW 339
// end ;
11622: END
// on BuildingStarted ( build , hum ) do begin Hint ( Building2 ) ;
11623: LD_STRING Building2
11625: PPUSH
11626: CALL_OW 339
// disable ;
11630: DISABLE
// end ;
11631: PPOPN 2
11633: END
// every 0 0$0.5 trigger escape_flag do
11634: LD_EXP 28
11638: IFFALSE 11699
11640: GO 11642
11642: DISABLE
// begin if FilterUnitsInArea ( prijezd , [ f_side , americans ] ) > 0 then
11643: LD_INT 10
11645: PPUSH
11646: LD_INT 22
11648: PUSH
11649: LD_EXP 3
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 70
11662: PUSH
11663: LD_INT 0
11665: GREATER
11666: IFFALSE 11698
// ComMoveXY ( FilterUnitsInArea ( prijezd , [ f_side , americans ] ) , 16 , 7 ) ;
11668: LD_INT 10
11670: PPUSH
11671: LD_INT 22
11673: PUSH
11674: LD_EXP 3
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 70
11687: PPUSH
11688: LD_INT 16
11690: PPUSH
11691: LD_INT 7
11693: PPUSH
11694: CALL_OW 111
// enable ;
11698: ENABLE
// end ;
11699: END
// function Escape ; begin
11700: LD_INT 0
11702: PPUSH
// wait ( 0 0$1 ) ;
11703: LD_INT 35
11705: PPUSH
11706: CALL_OW 67
// ComStop ( [ vehicle3 , vehicle4 ] ) ;
11710: LD_EXP 66
11714: PUSH
11715: LD_EXP 67
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 141
// wait ( 0 0$1 ) ;
11728: LD_INT 35
11730: PPUSH
11731: CALL_OW 67
// if IsOk ( vehicle3 ) then
11735: LD_EXP 66
11739: PPUSH
11740: CALL_OW 302
11744: IFFALSE 11761
// ComMoveXY ( vehicle3 , 3 , 6 ) ;
11746: LD_EXP 66
11750: PPUSH
11751: LD_INT 3
11753: PPUSH
11754: LD_INT 6
11756: PPUSH
11757: CALL_OW 111
// if IsOk ( vehicle4 ) then
11761: LD_EXP 67
11765: PPUSH
11766: CALL_OW 302
11770: IFFALSE 11787
// ComMoveXY ( vehicle4 , 4 , 8 ) ;
11772: LD_EXP 67
11776: PPUSH
11777: LD_INT 4
11779: PPUSH
11780: LD_INT 8
11782: PPUSH
11783: CALL_OW 111
// if IsOk ( Mikhail ) and not ( Mikhail_in_depot ) then
11787: LD_EXP 65
11791: PPUSH
11792: CALL_OW 302
11796: PUSH
11797: LD_EXP 39
11801: NOT
11802: AND
11803: IFFALSE 11895
// begin target_of_escape = [ 4 , 6 ] ;
11805: LD_ADDR_LOC 10
11809: PUSH
11810: LD_INT 4
11812: PUSH
11813: LD_INT 6
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: ST_TO_ADDR
// SetSide ( Mikhail , russians1 ) ;
11820: LD_EXP 65
11824: PPUSH
11825: LD_EXP 6
11829: PPUSH
11830: CALL_OW 235
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
11834: LD_EXP 65
11838: PPUSH
11839: LD_LOC 10
11843: PUSH
11844: LD_INT 1
11846: ARRAY
11847: PPUSH
11848: LD_LOC 10
11852: PUSH
11853: LD_INT 2
11855: ARRAY
11856: PPUSH
11857: CALL_OW 171
// AddComHold ( Mikhail ) ;
11861: LD_EXP 65
11865: PPUSH
11866: CALL_OW 200
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
11870: LD_EXP 3
11874: PPUSH
11875: LD_EXP 6
11879: PPUSH
11880: LD_INT 2
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 80
// enable ( Mikhails_escape ) ;
11890: LD_EXP 45
11894: ENABLE_MARKED
// end ; escape_flag = true ;
11895: LD_ADDR_EXP 28
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// escape_dialogue = true ;
11903: LD_ADDR_EXP 99
11907: PUSH
11908: LD_INT 1
11910: ST_TO_ADDR
// Say ( driver3 , D5-Rus2-1a ) ;
11911: LD_EXP 68
11915: PPUSH
11916: LD_STRING D5-Rus2-1a
11918: PPUSH
11919: CALL_OW 88
// escape_dialogue = false ;
11923: LD_ADDR_EXP 99
11927: PUSH
11928: LD_INT 0
11930: ST_TO_ADDR
// end ;
11931: LD_VAR 0 1
11935: RET
// every 0 0$3 trigger tick > Time_of_visit do var e ;
11936: LD_OWVAR 1
11940: PUSH
11941: LD_EXP 25
11945: GREATER
11946: IFFALSE 12178
11948: GO 11950
11950: DISABLE
11951: LD_INT 0
11953: PPUSH
// begin repeat if FilterUnitsInArea ( Prijezd , [ ] ) = 0 then
11954: LD_INT 10
11956: PPUSH
11957: EMPTY
11958: PPUSH
11959: CALL_OW 70
11963: PUSH
11964: LD_INT 0
11966: EQUAL
11967: IFFALSE 11971
// break ;
11969: GO 12002
// ComMoveXY ( FilterUnitsInArea ( prijezd , [ ] ) , 16 , 7 ) ;
11971: LD_INT 10
11973: PPUSH
11974: EMPTY
11975: PPUSH
11976: CALL_OW 70
11980: PPUSH
11981: LD_INT 16
11983: PPUSH
11984: LD_INT 7
11986: PPUSH
11987: CALL_OW 111
// wait ( 0 0$1 ) ;
11991: LD_INT 35
11993: PPUSH
11994: CALL_OW 67
// until false ;
11998: LD_INT 0
12000: IFFALSE 11954
// PlaceUnitXY ( vehicle3 , 5 , 5 , false ) ;
12002: LD_EXP 66
12006: PPUSH
12007: LD_INT 5
12009: PPUSH
12010: LD_INT 5
12012: PPUSH
12013: LD_INT 0
12015: PPUSH
12016: CALL_OW 48
// PlaceUnitXY ( vehicle4 , 6 , 8 , false ) ;
12020: LD_EXP 67
12024: PPUSH
12025: LD_INT 6
12027: PPUSH
12028: LD_INT 8
12030: PPUSH
12031: LD_INT 0
12033: PPUSH
12034: CALL_OW 48
// ComMoveXY ( vehicle3 , 66 , 15 ) ;
12038: LD_EXP 66
12042: PPUSH
12043: LD_INT 66
12045: PPUSH
12046: LD_INT 15
12048: PPUSH
12049: CALL_OW 111
// ComMoveXY ( vehicle4 , 67 , 20 ) ;
12053: LD_EXP 67
12057: PPUSH
12058: LD_INT 67
12060: PPUSH
12061: LD_INT 20
12063: PPUSH
12064: CALL_OW 111
// if See ( americans , vehicle3 ) or See ( americans , vehicle4 ) then
12068: LD_EXP 3
12072: PPUSH
12073: LD_EXP 66
12077: PPUSH
12078: CALL_OW 292
12082: PUSH
12083: LD_EXP 3
12087: PPUSH
12088: LD_EXP 67
12092: PPUSH
12093: CALL_OW 292
12097: OR
12098: IFFALSE 12125
// if not ( escape_flag ) then
12100: LD_EXP 28
12104: NOT
12105: IFFALSE 12117
// e = true else
12107: LD_ADDR_VAR 0 1
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
12115: GO 12125
// e = false ;
12117: LD_ADDR_VAR 0 1
12121: PUSH
12122: LD_INT 0
12124: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12125: LD_INT 245
12127: PPUSH
12128: CALL_OW 67
// if e then
12132: LD_VAR 0 1
12136: IFFALSE 12142
// Escape ;
12138: CALL 11700 0 0
// if vehicle_goes_flag then
12142: LD_EXP 100
12146: IFFALSE 12153
// enable ( vehicle_goes ) ;
12148: LD_EXP 27
12152: ENABLE_MARKED
// wait ( 0 0$3 ) ;
12153: LD_INT 105
12155: PPUSH
12156: CALL_OW 67
// CenterOnUnits ( [ vehicle3 , vehicle4 ] ) ;
12160: LD_EXP 66
12164: PUSH
12165: LD_EXP 67
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 85
// end ;
12178: PPOPN 1
12180: END
// every 0 0$2 marked 2 do
12181: GO 12183
12183: DISABLE
// begin if ( ( GetDistUnitXY ( vehicle3 , 66 , 15 ) < 5 and ( See ( americans , vehicle3 ) or GetLives ( vehicle3 ) < 1000 ) ) ) or ( ( GetDistUnitXY ( vehicle4 , 67 , 20 ) < 5 and ( See ( americans , vehicle4 ) or GetLives ( vehicle3 ) < 1000 ) ) ) or ( GetLives ( vehicle3 ) < 500 ) or ( GetLives ( vehicle4 ) < 500 ) then
12184: LD_EXP 66
12188: PPUSH
12189: LD_INT 66
12191: PPUSH
12192: LD_INT 15
12194: PPUSH
12195: CALL_OW 297
12199: PUSH
12200: LD_INT 5
12202: LESS
12203: PUSH
12204: LD_EXP 3
12208: PPUSH
12209: LD_EXP 66
12213: PPUSH
12214: CALL_OW 292
12218: PUSH
12219: LD_EXP 66
12223: PPUSH
12224: CALL_OW 256
12228: PUSH
12229: LD_INT 1000
12231: LESS
12232: OR
12233: AND
12234: PUSH
12235: LD_EXP 67
12239: PPUSH
12240: LD_INT 67
12242: PPUSH
12243: LD_INT 20
12245: PPUSH
12246: CALL_OW 297
12250: PUSH
12251: LD_INT 5
12253: LESS
12254: PUSH
12255: LD_EXP 3
12259: PPUSH
12260: LD_EXP 67
12264: PPUSH
12265: CALL_OW 292
12269: PUSH
12270: LD_EXP 66
12274: PPUSH
12275: CALL_OW 256
12279: PUSH
12280: LD_INT 1000
12282: LESS
12283: OR
12284: AND
12285: OR
12286: PUSH
12287: LD_EXP 66
12291: PPUSH
12292: CALL_OW 256
12296: PUSH
12297: LD_INT 500
12299: LESS
12300: OR
12301: PUSH
12302: LD_EXP 67
12306: PPUSH
12307: CALL_OW 256
12311: PUSH
12312: LD_INT 500
12314: LESS
12315: OR
12316: IFFALSE 12331
// begin if not ( escape_flag ) then
12318: LD_EXP 28
12322: NOT
12323: IFFALSE 12329
// Escape ;
12325: CALL 11700 0 0
// end else
12329: GO 12332
// enable ;
12331: ENABLE
// end ;
12332: END
// every 0 0$2 + 0 0$1 trigger IsOk ( vehicle3 ) and not ( escape_flag ) marked 2 do
12333: LD_EXP 66
12337: PPUSH
12338: CALL_OW 302
12342: PUSH
12343: LD_EXP 28
12347: NOT
12348: AND
12349: IFFALSE 12405
12351: GO 12353
12353: DISABLE
// begin if GetDistUnits ( vehicle3 , dep1 ) < 25 then
12354: LD_EXP 66
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 296
12366: PUSH
12367: LD_INT 25
12369: LESS
12370: IFFALSE 12404
// begin CenterOnUnits ( [ vehicle3 , vehicle4 ] ) ;
12372: LD_EXP 66
12376: PUSH
12377: LD_EXP 67
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 85
// Say ( driver3 , D5-Rus2-1 ) ;
12390: LD_EXP 68
12394: PPUSH
12395: LD_STRING D5-Rus2-1
12397: PPUSH
12398: CALL_OW 88
// end else
12402: GO 12405
// enable ;
12404: ENABLE
// end ;
12405: END
// every 0 0$1 trigger escape_flag do var rus ;
12406: LD_EXP 28
12410: IFFALSE 12772
12412: GO 12414
12414: DISABLE
12415: LD_INT 0
12417: PPUSH
// begin if IsInArea ( vehicle3 , prijezd ) and ( IsInUnit ( driver3 ) > 0 ) then
12418: LD_EXP 66
12422: PPUSH
12423: LD_INT 10
12425: PPUSH
12426: CALL_OW 308
12430: PUSH
12431: LD_EXP 68
12435: PPUSH
12436: CALL_OW 310
12440: PUSH
12441: LD_INT 0
12443: GREATER
12444: AND
12445: IFFALSE 12503
// begin flee = flee + 1 ;
12447: LD_ADDR_EXP 29
12451: PUSH
12452: LD_EXP 29
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: ST_TO_ADDR
// DestroyUnit ( vehicle3 ) ;
12461: LD_EXP 66
12465: PPUSH
12466: CALL_OW 65
// if not ( IsOk ( vehicle4 ) ) then
12470: LD_EXP 67
12474: PPUSH
12475: CALL_OW 302
12479: NOT
12480: IFFALSE 12503
// begin disable ( vehicle_goes ) ;
12482: LD_EXP 27
12486: DISABLE_MARKED
// escape_flag = false ;
12487: LD_ADDR_EXP 28
12491: PUSH
12492: LD_INT 0
12494: ST_TO_ADDR
// vehicle_goes_flag = false ;
12495: LD_ADDR_EXP 100
12499: PUSH
12500: LD_INT 0
12502: ST_TO_ADDR
// end ; end ; if IsInArea ( vehicle4 , prijezd ) and ( IsInUnit ( driver4 ) > 0 ) then
12503: LD_EXP 67
12507: PPUSH
12508: LD_INT 10
12510: PPUSH
12511: CALL_OW 308
12515: PUSH
12516: LD_EXP 69
12520: PPUSH
12521: CALL_OW 310
12525: PUSH
12526: LD_INT 0
12528: GREATER
12529: AND
12530: IFFALSE 12588
// begin flee = flee + 1 ;
12532: LD_ADDR_EXP 29
12536: PUSH
12537: LD_EXP 29
12541: PUSH
12542: LD_INT 1
12544: PLUS
12545: ST_TO_ADDR
// DestroyUnit ( vehicle4 ) ;
12546: LD_EXP 67
12550: PPUSH
12551: CALL_OW 65
// if not ( IsOk ( vehicle3 ) ) then
12555: LD_EXP 66
12559: PPUSH
12560: CALL_OW 302
12564: NOT
12565: IFFALSE 12588
// begin disable ( vehicle_goes ) ;
12567: LD_EXP 27
12571: DISABLE_MARKED
// escape_flag = false ;
12572: LD_ADDR_EXP 28
12576: PUSH
12577: LD_INT 0
12579: ST_TO_ADDR
// vehicle_goes_flag = false ;
12580: LD_ADDR_EXP 100
12584: PUSH
12585: LD_INT 0
12587: ST_TO_ADDR
// end ; end ; if not ( IsOk ( vehicle3 ) or IsOk ( vehicle4 ) ) and flee = 0 then
12588: LD_EXP 66
12592: PPUSH
12593: CALL_OW 302
12597: PUSH
12598: LD_EXP 67
12602: PPUSH
12603: CALL_OW 302
12607: OR
12608: NOT
12609: PUSH
12610: LD_EXP 29
12614: PUSH
12615: LD_INT 0
12617: EQUAL
12618: AND
12619: IFFALSE 12651
// begin escape_flag = false ;
12621: LD_ADDR_EXP 28
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// Time_of_attack = Time_of_attack + 1 1$0 ;
12629: LD_ADDR_EXP 26
12633: PUSH
12634: LD_EXP 26
12638: PUSH
12639: LD_INT 2100
12641: PLUS
12642: ST_TO_ADDR
// Attack_canceled = true ;
12643: LD_ADDR_EXP 93
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
// end ; if escape_flag = false and IsOk ( AmME1 ) then
12651: LD_EXP 28
12655: PUSH
12656: LD_INT 0
12658: EQUAL
12659: PUSH
12660: LD_EXP 13
12664: PPUSH
12665: CALL_OW 302
12669: AND
12670: IFFALSE 12765
// begin while escape_dialogue do
12672: LD_EXP 99
12676: IFFALSE 12687
// Wait ( 0 0$1 ) ;
12678: LD_INT 35
12680: PPUSH
12681: CALL_OW 67
12685: GO 12672
// case flee of 1 :
12687: LD_EXP 29
12691: PUSH
12692: LD_INT 1
12694: DOUBLE
12695: EQUAL
12696: IFTRUE 12700
12698: GO 12727
12700: POP
// begin Say ( AmME1 , D5a-Sol1-1 ) ;
12701: LD_EXP 13
12705: PPUSH
12706: LD_STRING D5a-Sol1-1
12708: PPUSH
12709: CALL_OW 88
// Say ( John , D5a-JMM-1 ) ;
12713: LD_EXP 7
12717: PPUSH
12718: LD_STRING D5a-JMM-1
12720: PPUSH
12721: CALL_OW 88
// end ; 2 :
12725: GO 12763
12727: LD_INT 2
12729: DOUBLE
12730: EQUAL
12731: IFTRUE 12735
12733: GO 12762
12735: POP
// begin Say ( AmME1 , D5a-Sol1-1a ) ;
12736: LD_EXP 13
12740: PPUSH
12741: LD_STRING D5a-Sol1-1a
12743: PPUSH
12744: CALL_OW 88
// Say ( John , D5a-JMM-1 ) ;
12748: LD_EXP 7
12752: PPUSH
12753: LD_STRING D5a-JMM-1
12755: PPUSH
12756: CALL_OW 88
// end ; end ;
12760: GO 12763
12762: POP
// end else
12763: GO 12772
// if escape_flag then
12765: LD_EXP 28
12769: IFFALSE 12772
// enable ;
12771: ENABLE
// end ;
12772: PPOPN 1
12774: END
// function PlaceMikhail ; var AllAmUn , i , max , max_un ; begin
12775: LD_INT 0
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
12781: PPUSH
// AllAmUn := FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
12782: LD_ADDR_VAR 0 2
12786: PUSH
12787: LD_INT 22
12789: PUSH
12790: LD_EXP 3
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: LD_INT 50
12801: PUSH
12802: EMPTY
12803: LIST
12804: PUSH
12805: LD_INT 21
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: LIST
12819: PPUSH
12820: CALL_OW 69
12824: ST_TO_ADDR
// if AllAmUn = 1 then
12825: LD_VAR 0 2
12829: PUSH
12830: LD_INT 1
12832: EQUAL
12833: IFFALSE 12901
// begin PlaceUnitXYR ( Mikhail , GetX ( John ) , GetY ( John ) , 5 , true ) ;
12835: LD_EXP 65
12839: PPUSH
12840: LD_EXP 7
12844: PPUSH
12845: CALL_OW 250
12849: PPUSH
12850: LD_EXP 7
12854: PPUSH
12855: CALL_OW 251
12859: PPUSH
12860: LD_INT 5
12862: PPUSH
12863: LD_INT 1
12865: PPUSH
12866: CALL_OW 50
// Wait ( 0 0$3 ) ;
12870: LD_INT 105
12872: PPUSH
12873: CALL_OW 67
// ComAttackUnit ( Mikhail , John ) ;
12877: LD_EXP 65
12881: PPUSH
12882: LD_EXP 7
12886: PPUSH
12887: CALL_OW 115
// result = true ;
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
// end else
12899: GO 13060
// if AllAmUn > 1 then
12901: LD_VAR 0 2
12905: PUSH
12906: LD_INT 1
12908: GREATER
12909: IFFALSE 13052
// begin for i in AllAmUn do
12911: LD_ADDR_VAR 0 3
12915: PUSH
12916: LD_VAR 0 2
12920: PUSH
12921: FOR_IN
12922: IFFALSE 12960
// begin if not ( IsDying ( i ) ) and ( i <> John ) then
12924: LD_VAR 0 3
12928: PPUSH
12929: CALL_OW 303
12933: NOT
12934: PUSH
12935: LD_VAR 0 3
12939: PUSH
12940: LD_EXP 7
12944: NONEQUAL
12945: AND
12946: IFFALSE 12958
// max_un := i ;
12948: LD_ADDR_VAR 0 5
12952: PUSH
12953: LD_VAR 0 3
12957: ST_TO_ADDR
// end ;
12958: GO 12921
12960: POP
12961: POP
// PlaceUnitXYR ( Mikhail , GetX ( max_un ) , GetY ( max_un ) , 4 , true ) ;
12962: LD_EXP 65
12966: PPUSH
12967: LD_VAR 0 5
12971: PPUSH
12972: CALL_OW 250
12976: PPUSH
12977: LD_VAR 0 5
12981: PPUSH
12982: CALL_OW 251
12986: PPUSH
12987: LD_INT 4
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 50
// Wait ( 0 0$3 ) ;
12997: LD_INT 105
12999: PPUSH
13000: CALL_OW 67
// enable ( Mikhail_placed ) ;
13004: LD_EXP 35
13008: ENABLE_MARKED
// ComMoveUnit ( Mikhail , max_un ) ;
13009: LD_EXP 65
13013: PPUSH
13014: LD_VAR 0 5
13018: PPUSH
13019: CALL_OW 112
// ComStop ( max_un ) ;
13023: LD_VAR 0 5
13027: PPUSH
13028: CALL_OW 141
// Followed := max_un ;
13032: LD_ADDR_LOC 2
13036: PUSH
13037: LD_VAR 0 5
13041: ST_TO_ADDR
// result := true ;
13042: LD_ADDR_VAR 0 1
13046: PUSH
13047: LD_INT 1
13049: ST_TO_ADDR
// end else
13050: GO 13060
// result := false ;
13052: LD_ADDR_VAR 0 1
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// end ;
13060: LD_VAR 0 1
13064: RET
// function Try1 ; begin
13065: LD_INT 0
13067: PPUSH
// if IsOk ( AmME1 ) and not ( IsDying ( AmME1 ) ) then
13068: LD_EXP 13
13072: PPUSH
13073: CALL_OW 302
13077: PUSH
13078: LD_EXP 13
13082: PPUSH
13083: CALL_OW 303
13087: NOT
13088: AND
13089: IFFALSE 13181
// begin PlaceUnitXYR ( Mikhail , GetX ( AmME1 ) , GetY ( AmME1 ) , 4 , true ) ;
13091: LD_EXP 65
13095: PPUSH
13096: LD_EXP 13
13100: PPUSH
13101: CALL_OW 250
13105: PPUSH
13106: LD_EXP 13
13110: PPUSH
13111: CALL_OW 251
13115: PPUSH
13116: LD_INT 4
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 50
// Wait ( 0 0$3 ) ;
13126: LD_INT 105
13128: PPUSH
13129: CALL_OW 67
// enable ( Mikhail_placed ) ;
13133: LD_EXP 35
13137: ENABLE_MARKED
// ComMoveUnit ( Mikhail , AmME1 ) ;
13138: LD_EXP 65
13142: PPUSH
13143: LD_EXP 13
13147: PPUSH
13148: CALL_OW 112
// ComStop ( AmME1 ) ;
13152: LD_EXP 13
13156: PPUSH
13157: CALL_OW 141
// Followed := AmME1 ;
13161: LD_ADDR_LOC 2
13165: PUSH
13166: LD_EXP 13
13170: ST_TO_ADDR
// result := true ;
13171: LD_ADDR_VAR 0 1
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// end else
13179: GO 13189
// result := false ;
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: LD_INT 0
13188: ST_TO_ADDR
// end ;
13189: LD_VAR 0 1
13193: RET
// function Try2 ; begin
13194: LD_INT 0
13196: PPUSH
// if IsOk ( AmFE2 ) and not ( IsDying ( AmFE2 ) ) then
13197: LD_EXP 14
13201: PPUSH
13202: CALL_OW 302
13206: PUSH
13207: LD_EXP 14
13211: PPUSH
13212: CALL_OW 303
13216: NOT
13217: AND
13218: IFFALSE 13310
// begin PlaceUnitXYR ( Mikhail , GetX ( AmFE2 ) , GetY ( AmFE2 ) , 3 , true ) ;
13220: LD_EXP 65
13224: PPUSH
13225: LD_EXP 14
13229: PPUSH
13230: CALL_OW 250
13234: PPUSH
13235: LD_EXP 14
13239: PPUSH
13240: CALL_OW 251
13244: PPUSH
13245: LD_INT 3
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 50
// Wait ( 0 0$3 ) ;
13255: LD_INT 105
13257: PPUSH
13258: CALL_OW 67
// enable ( Mikhail_placed ) ;
13262: LD_EXP 35
13266: ENABLE_MARKED
// ComMoveUnit ( Mikhail , AmFE2 ) ;
13267: LD_EXP 65
13271: PPUSH
13272: LD_EXP 14
13276: PPUSH
13277: CALL_OW 112
// ComStop ( AmFE2 ) ;
13281: LD_EXP 14
13285: PPUSH
13286: CALL_OW 141
// Followed := AmFE2 ;
13290: LD_ADDR_LOC 2
13294: PUSH
13295: LD_EXP 14
13299: ST_TO_ADDR
// result := true ;
13300: LD_ADDR_VAR 0 1
13304: PUSH
13305: LD_INT 1
13307: ST_TO_ADDR
// end else
13308: GO 13318
// result := false ;
13310: LD_ADDR_VAR 0 1
13314: PUSH
13315: LD_INT 0
13317: ST_TO_ADDR
// end ;
13318: LD_VAR 0 1
13322: RET
// every 0 0$5 trigger Time_of_capture + 0 0$20 < tick do var r , cont ;
13323: LD_EXP 30
13327: PUSH
13328: LD_INT 700
13330: PLUS
13331: PUSH
13332: LD_OWVAR 1
13336: LESS
13337: IFFALSE 13482
13339: GO 13341
13341: DISABLE
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
// begin r = Rand ( 0 , 1 ) ;
13346: LD_ADDR_VAR 0 1
13350: PUSH
13351: LD_INT 0
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 12
13361: ST_TO_ADDR
// cont = false ;
13362: LD_ADDR_VAR 0 2
13366: PUSH
13367: LD_INT 0
13369: ST_TO_ADDR
// count = count + 1 ;
13370: LD_ADDR_EXP 77
13374: PUSH
13375: LD_EXP 77
13379: PUSH
13380: LD_INT 1
13382: PLUS
13383: ST_TO_ADDR
// if IsOk ( AmME1 ) or IsOk ( AmFE2 ) then
13384: LD_EXP 13
13388: PPUSH
13389: CALL_OW 302
13393: PUSH
13394: LD_EXP 14
13398: PPUSH
13399: CALL_OW 302
13403: OR
13404: IFFALSE 13460
// if r then
13406: LD_VAR 0 1
13410: IFFALSE 13436
// begin if not ( Try1 ) then
13412: CALL 13065 0 0
13416: NOT
13417: IFFALSE 13434
// if not ( Try2 ) then
13419: CALL 13194 0 0
13423: NOT
13424: IFFALSE 13434
// cont = true end else
13426: LD_ADDR_VAR 0 2
13430: PUSH
13431: LD_INT 1
13433: ST_TO_ADDR
13434: GO 13458
// begin if not ( Try2 ) then
13436: CALL 13194 0 0
13440: NOT
13441: IFFALSE 13458
// if not ( Try1 ) then
13443: CALL 13065 0 0
13447: NOT
13448: IFFALSE 13458
// cont = true ;
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: LD_INT 1
13457: ST_TO_ADDR
// end else
13458: GO 13475
// begin if not ( PlaceMikhail ) then
13460: CALL 12775 0 0
13464: NOT
13465: IFFALSE 13475
// cont = true ;
13467: LD_ADDR_VAR 0 2
13471: PUSH
13472: LD_INT 1
13474: ST_TO_ADDR
// end ; if cont then
13475: LD_VAR 0 2
13479: IFFALSE 13482
// enable ;
13481: ENABLE
// end ;
13482: PPOPN 2
13484: END
// every 0 0$1 marked 3 do
13485: GO 13487
13487: DISABLE
// begin if GetClass ( Mikhail ) <> class_mechanic then
13488: LD_EXP 65
13492: PPUSH
13493: CALL_OW 257
13497: PUSH
13498: LD_INT 3
13500: NONEQUAL
13501: IFFALSE 13515
// SetClass ( Mikhail , class_mechanic ) ;
13503: LD_EXP 65
13507: PPUSH
13508: LD_INT 3
13510: PPUSH
13511: CALL_OW 336
// enable ;
13515: ENABLE
// end ;
13516: END
// every 0 0$0.5 marked 3 do var answer , all , i ;
13517: GO 13519
13519: DISABLE
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
// begin if FilterAllUnits ( [ f_side , americans ] ) > 1 then
13525: LD_INT 22
13527: PUSH
13528: LD_EXP 3
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: PUSH
13542: LD_INT 1
13544: GREATER
13545: IFFALSE 14384
// begin if FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 15 ] ] ) > 0 then
13547: LD_INT 22
13549: PUSH
13550: LD_EXP 3
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 91
13561: PUSH
13562: LD_EXP 65
13566: PUSH
13567: LD_INT 15
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PPUSH
13579: CALL_OW 69
13583: PUSH
13584: LD_INT 0
13586: GREATER
13587: IFFALSE 14383
// begin all = FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 15 ] ] ) ;
13589: LD_ADDR_VAR 0 2
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_EXP 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 91
13608: PUSH
13609: LD_EXP 65
13613: PUSH
13614: LD_INT 15
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 69
13630: ST_TO_ADDR
// AddComHold ( all ) ;
13631: LD_VAR 0 2
13635: PPUSH
13636: CALL_OW 200
// AddComHold ( Followed ) ;
13640: LD_LOC 2
13644: PPUSH
13645: CALL_OW 200
// AddComTurnUnit ( all , Mikhail ) ;
13649: LD_VAR 0 2
13653: PPUSH
13654: LD_EXP 65
13658: PPUSH
13659: CALL_OW 179
// AddComTurnUnit ( Followed , Mikhail ) ;
13663: LD_LOC 2
13667: PPUSH
13668: LD_EXP 65
13672: PPUSH
13673: CALL_OW 179
// while GetDistUnits ( Mikhail , Followed ) > 6 do
13677: LD_EXP 65
13681: PPUSH
13682: LD_LOC 2
13686: PPUSH
13687: CALL_OW 296
13691: PUSH
13692: LD_INT 6
13694: GREATER
13695: IFFALSE 13706
// wait ( 0 0$0.5 ) ;
13697: LD_INT 18
13699: PPUSH
13700: CALL_OW 67
13704: GO 13677
// DialogueOn ;
13706: CALL_OW 6
// CenterOnUnits ( [ Mikhail , Followed ] ) ;
13710: LD_EXP 65
13714: PUSH
13715: LD_LOC 2
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 85
// Say ( Mikhail , D4-Mikh-1 ) ;
13728: LD_EXP 65
13732: PPUSH
13733: LD_STRING D4-Mikh-1
13735: PPUSH
13736: CALL_OW 88
// if IsOk ( AmME1 ) or IsOk ( AmFE2 ) then
13740: LD_EXP 13
13744: PPUSH
13745: CALL_OW 302
13749: PUSH
13750: LD_EXP 14
13754: PPUSH
13755: CALL_OW 302
13759: OR
13760: IFFALSE 13914
// begin if Followed = AmME1 then
13762: LD_LOC 2
13766: PUSH
13767: LD_EXP 13
13771: EQUAL
13772: IFFALSE 13788
// Say ( AmME1 , D4-Sol1-1 ) else
13774: LD_EXP 13
13778: PPUSH
13779: LD_STRING D4-Sol1-1
13781: PPUSH
13782: CALL_OW 88
13786: GO 13800
// Say ( AmFE2 , D4-FSol1-1 ) ;
13788: LD_EXP 14
13792: PPUSH
13793: LD_STRING D4-FSol1-1
13795: PPUSH
13796: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
13800: LD_EXP 65
13804: PPUSH
13805: LD_STRING D4-Mikh-2
13807: PPUSH
13808: CALL_OW 88
// if Followed = AmME1 then
13812: LD_LOC 2
13816: PUSH
13817: LD_EXP 13
13821: EQUAL
13822: IFFALSE 13838
// Say ( AmME1 , D4-Sol1-2 ) else
13824: LD_EXP 13
13828: PPUSH
13829: LD_STRING D4-Sol1-2
13831: PPUSH
13832: CALL_OW 88
13836: GO 13850
// Say ( AmFE2 , D4-FSol1-2 ) ;
13838: LD_EXP 14
13842: PPUSH
13843: LD_STRING D4-FSol1-2
13845: PPUSH
13846: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
13850: LD_EXP 65
13854: PPUSH
13855: LD_STRING D4-Mikh-3
13857: PPUSH
13858: CALL_OW 88
// if Followed = AmME1 then
13862: LD_LOC 2
13866: PUSH
13867: LD_EXP 13
13871: EQUAL
13872: IFFALSE 13888
// Say ( AmME1 , D4-Sol1-3 ) else
13874: LD_EXP 13
13878: PPUSH
13879: LD_STRING D4-Sol1-3
13881: PPUSH
13882: CALL_OW 88
13886: GO 13900
// Say ( AmFE2 , D4-FSol1-3 ) ;
13888: LD_EXP 14
13892: PPUSH
13893: LD_STRING D4-FSol1-3
13895: PPUSH
13896: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
13900: LD_EXP 65
13904: PPUSH
13905: LD_STRING D4-Mikh-4
13907: PPUSH
13908: CALL_OW 88
// end else
13912: GO 14105
// begin i = Nearest ( Mikhail , FilterAllUnits ( [ f_side , americans ] ) ) ;
13914: LD_ADDR_VAR 0 3
13918: PUSH
13919: LD_EXP 65
13923: PPUSH
13924: LD_INT 22
13926: PUSH
13927: LD_EXP 3
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: PPUSH
13941: CALL 10150 0 2
13945: ST_TO_ADDR
// if GetSex ( i ) = sex_male then
13946: LD_VAR 0 3
13950: PPUSH
13951: CALL_OW 258
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 13975
// Say ( i , D4-Sol1-1 ) else
13961: LD_VAR 0 3
13965: PPUSH
13966: LD_STRING D4-Sol1-1
13968: PPUSH
13969: CALL_OW 88
13973: GO 13987
// Say ( i , D4-FSol1-1 ) ;
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_STRING D4-FSol1-1
13982: PPUSH
13983: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
13987: LD_EXP 65
13991: PPUSH
13992: LD_STRING D4-Mikh-2
13994: PPUSH
13995: CALL_OW 88
// if GetSex ( i ) = sex_male then
13999: LD_VAR 0 3
14003: PPUSH
14004: CALL_OW 258
14008: PUSH
14009: LD_INT 1
14011: EQUAL
14012: IFFALSE 14028
// Say ( i , D4-Sol1-2 ) else
14014: LD_VAR 0 3
14018: PPUSH
14019: LD_STRING D4-Sol1-2
14021: PPUSH
14022: CALL_OW 88
14026: GO 14040
// Say ( i , D4-FSol1-2 ) ;
14028: LD_VAR 0 3
14032: PPUSH
14033: LD_STRING D4-FSol1-2
14035: PPUSH
14036: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
14040: LD_EXP 65
14044: PPUSH
14045: LD_STRING D4-Mikh-3
14047: PPUSH
14048: CALL_OW 88
// if GetSex ( i ) = sex_male then
14052: LD_VAR 0 3
14056: PPUSH
14057: CALL_OW 258
14061: PUSH
14062: LD_INT 1
14064: EQUAL
14065: IFFALSE 14081
// Say ( i , D4-Sol1-3 ) else
14067: LD_VAR 0 3
14071: PPUSH
14072: LD_STRING D4-Sol1-3
14074: PPUSH
14075: CALL_OW 88
14079: GO 14093
// Say ( i , D4-FSol1-3 ) ;
14081: LD_VAR 0 3
14085: PPUSH
14086: LD_STRING D4-FSol1-3
14088: PPUSH
14089: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
14093: LD_EXP 65
14097: PPUSH
14098: LD_STRING D4-Mikh-4
14100: PPUSH
14101: CALL_OW 88
// end ; answer = Query ( Qs1 ) ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: LD_STRING Qs1
14112: PPUSH
14113: CALL_OW 97
14117: ST_TO_ADDR
// DialogueOff ;
14118: CALL_OW 7
// case answer of 1 :
14122: LD_VAR 0 1
14126: PUSH
14127: LD_INT 1
14129: DOUBLE
14130: EQUAL
14131: IFTRUE 14135
14133: GO 14206
14135: POP
// begin SetAttitude ( americans , russians1 , att_enemy , true ) ;
14136: LD_EXP 3
14140: PPUSH
14141: LD_EXP 6
14145: PPUSH
14146: LD_INT 2
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 80
// ComAttackUnit ( Followed , Mikhail ) ;
14156: LD_LOC 2
14160: PPUSH
14161: LD_EXP 65
14165: PPUSH
14166: CALL_OW 115
// ComFree ( Mikhail ) ;
14170: LD_EXP 65
14174: PPUSH
14175: CALL_OW 139
// Mikhails_outcome = - 1 ;
14179: LD_ADDR_LOC 3
14183: PUSH
14184: LD_INT 1
14186: NEG
14187: ST_TO_ADDR
// Mikhail_status := 2 ;
14188: LD_ADDR_LOC 4
14192: PUSH
14193: LD_INT 2
14195: ST_TO_ADDR
// mikhail_marked_for_death = true ;
14196: LD_ADDR_EXP 42
14200: PUSH
14201: LD_INT 1
14203: ST_TO_ADDR
// end ; 2 :
14204: GO 14381
14206: LD_INT 2
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14323
14214: POP
// begin DoNotAttack ( russians , Followed ) ;
14215: LD_EXP 5
14219: PPUSH
14220: LD_LOC 2
14224: PPUSH
14225: CALL_OW 471
// enable ( Mikhail_captured ) ;
14229: LD_EXP 36
14233: ENABLE_MARKED
// enable ( tigers_allowed ) ;
14234: LD_EXP 81
14238: ENABLE_MARKED
// ComMoveUnit ( Mikhail , Followed ) ;
14239: LD_EXP 65
14243: PPUSH
14244: LD_LOC 2
14248: PPUSH
14249: CALL_OW 112
// while GetDistUnits ( Mikhail , John ) > 5 do
14253: LD_EXP 65
14257: PPUSH
14258: LD_EXP 7
14262: PPUSH
14263: CALL_OW 296
14267: PUSH
14268: LD_INT 5
14270: GREATER
14271: IFFALSE 14296
// begin ComMoveUnit ( Followed , John ) ;
14273: LD_LOC 2
14277: PPUSH
14278: LD_EXP 7
14282: PPUSH
14283: CALL_OW 112
// Wait ( 0 0$1 ) ;
14287: LD_INT 35
14289: PPUSH
14290: CALL_OW 67
// end ;
14294: GO 14253
// ComStop ( Followed ) ;
14296: LD_LOC 2
14300: PPUSH
14301: CALL_OW 141
// Mikhails_outcome = 1 ;
14305: LD_ADDR_LOC 3
14309: PUSH
14310: LD_INT 1
14312: ST_TO_ADDR
// Mikhail_status := 5 ;
14313: LD_ADDR_LOC 4
14317: PUSH
14318: LD_INT 5
14320: ST_TO_ADDR
// end ; 3 :
14321: GO 14381
14323: LD_INT 3
14325: DOUBLE
14326: EQUAL
14327: IFTRUE 14331
14329: GO 14380
14331: POP
// begin ComMoveXY ( Mikhail , 4 , 6 ) ;
14332: LD_EXP 65
14336: PPUSH
14337: LD_INT 4
14339: PPUSH
14340: LD_INT 6
14342: PPUSH
14343: CALL_OW 111
// AddComHold ( Mikhail ) ;
14347: LD_EXP 65
14351: PPUSH
14352: CALL_OW 200
// enable ( remove_mikhail ) ;
14356: LD_EXP 43
14360: ENABLE_MARKED
// Mikhails_outcome = - 1 ;
14361: LD_ADDR_LOC 3
14365: PUSH
14366: LD_INT 1
14368: NEG
14369: ST_TO_ADDR
// Mikhail_status := 1 ;
14370: LD_ADDR_LOC 4
14374: PUSH
14375: LD_INT 1
14377: ST_TO_ADDR
// end ; end ;
14378: GO 14381
14380: POP
// end else
14381: GO 14384
// enable ;
14383: ENABLE
// end ; end ;
14384: PPOPN 3
14386: END
// every 0 0$1 trigger mikhail_marked_for_death do var started_running ;
14387: LD_EXP 42
14391: IFFALSE 14623
14393: GO 14395
14395: DISABLE
14396: LD_INT 0
14398: PPUSH
// begin started_running = false ;
14399: LD_ADDR_VAR 0 1
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14407: LD_INT 35
14409: PPUSH
14410: CALL_OW 67
// if IsDead ( Mikhail ) then
14414: LD_EXP 65
14418: PPUSH
14419: CALL_OW 301
14423: IFFALSE 14427
// exit ;
14425: GO 14623
// if not started_running then
14427: LD_VAR 0 1
14431: NOT
14432: IFFALSE 14492
// if FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 10 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
14434: LD_INT 22
14436: PUSH
14437: LD_EXP 3
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 91
14448: PUSH
14449: LD_EXP 65
14453: PUSH
14454: LD_INT 10
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 3
14464: PUSH
14465: LD_INT 54
14467: PUSH
14468: EMPTY
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 69
14484: PUSH
14485: LD_INT 0
14487: GREATER
14488: IFFALSE 14492
// continue ;
14490: GO 14407
// started_running = true ;
14492: LD_ADDR_VAR 0 1
14496: PUSH
14497: LD_INT 1
14499: ST_TO_ADDR
// if GetDistUnitXY ( Mikhail , 4 , 6 ) <= 1 or GetDistUnitXY ( Mikhail , 91 , 1 ) <= 1 then
14500: LD_EXP 65
14504: PPUSH
14505: LD_INT 4
14507: PPUSH
14508: LD_INT 6
14510: PPUSH
14511: CALL_OW 297
14515: PUSH
14516: LD_INT 1
14518: LESSEQUAL
14519: PUSH
14520: LD_EXP 65
14524: PPUSH
14525: LD_INT 91
14527: PPUSH
14528: LD_INT 1
14530: PPUSH
14531: CALL_OW 297
14535: PUSH
14536: LD_INT 1
14538: LESSEQUAL
14539: OR
14540: IFFALSE 14553
// begin RemoveUnit ( Mikhail ) ;
14542: LD_EXP 65
14546: PPUSH
14547: CALL_OW 64
// exit ;
14551: GO 14623
// end ; if GetDistUnitXY ( Mikhail , 4 , 6 ) < GetDistUnitXY ( Mikhail , 91 , 1 ) then
14553: LD_EXP 65
14557: PPUSH
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 6
14563: PPUSH
14564: CALL_OW 297
14568: PUSH
14569: LD_EXP 65
14573: PPUSH
14574: LD_INT 91
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: CALL_OW 297
14584: LESS
14585: IFFALSE 14604
// ComMoveXY ( Mikhail , 4 , 6 ) else
14587: LD_EXP 65
14591: PPUSH
14592: LD_INT 4
14594: PPUSH
14595: LD_INT 6
14597: PPUSH
14598: CALL_OW 111
14602: GO 14619
// ComMoveXY ( Mikhail , 91 , 1 ) ;
14604: LD_EXP 65
14608: PPUSH
14609: LD_INT 91
14611: PPUSH
14612: LD_INT 1
14614: PPUSH
14615: CALL_OW 111
// until false ;
14619: LD_INT 0
14621: IFFALSE 14407
// end ;
14623: PPOPN 1
14625: END
// every 0 0$0.5 trigger IsAt ( Mikhail , 4 , 6 ) marked 11 do
14626: LD_EXP 65
14630: PPUSH
14631: LD_INT 4
14633: PPUSH
14634: LD_INT 6
14636: PPUSH
14637: CALL_OW 307
14641: IFFALSE 14655
14643: GO 14645
14645: DISABLE
// begin RemoveUnit ( Mikhail ) ;
14646: LD_EXP 65
14650: PPUSH
14651: CALL_OW 64
// end ;
14655: END
// every 0 0$2 marked 4 do var Alive , Speaker ;
14656: GO 14658
14658: DISABLE
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
// begin if IsOk ( Mikhail ) and GetDistUnits ( John , Mikhail ) < 6 then
14663: LD_EXP 65
14667: PPUSH
14668: CALL_OW 302
14672: PUSH
14673: LD_EXP 7
14677: PPUSH
14678: LD_EXP 65
14682: PPUSH
14683: CALL_OW 296
14687: PUSH
14688: LD_INT 6
14690: LESS
14691: AND
14692: IFFALSE 15248
// begin enable ( conversation ) ;
14694: LD_EXP 44
14698: ENABLE_MARKED
// ComTurnUnit ( Mikhail , John ) ;
14699: LD_EXP 65
14703: PPUSH
14704: LD_EXP 7
14708: PPUSH
14709: CALL_OW 119
// DialogueOn ;
14713: CALL_OW 6
// ComMoveUnit ( Mikhail , John ) ;
14717: LD_EXP 65
14721: PPUSH
14722: LD_EXP 7
14726: PPUSH
14727: CALL_OW 112
// Say ( John , D4b-JMM-1 ) ;
14731: LD_EXP 7
14735: PPUSH
14736: LD_STRING D4b-JMM-1
14738: PPUSH
14739: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
14743: LD_EXP 65
14747: PPUSH
14748: LD_STRING D4b-Mikh-1
14750: PPUSH
14751: CALL_OW 88
// Say ( John , D4b-JMM-2 ) ;
14755: LD_EXP 7
14759: PPUSH
14760: LD_STRING D4b-JMM-2
14762: PPUSH
14763: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
14767: LD_EXP 65
14771: PPUSH
14772: LD_STRING D4b-Mikh-2
14774: PPUSH
14775: CALL_OW 88
// Say ( John , D4b-JMM-3 ) ;
14779: LD_EXP 7
14783: PPUSH
14784: LD_STRING D4b-JMM-3
14786: PPUSH
14787: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
14791: LD_EXP 65
14795: PPUSH
14796: LD_STRING D4b-Mikh-3
14798: PPUSH
14799: CALL_OW 88
// Say ( John , D4b-JMM-4 ) ;
14803: LD_EXP 7
14807: PPUSH
14808: LD_STRING D4b-JMM-4
14810: PPUSH
14811: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
14815: LD_EXP 65
14819: PPUSH
14820: LD_STRING D4b-Mikh-4
14822: PPUSH
14823: CALL_OW 88
// Say ( John , D4b-JMM-5 ) ;
14827: LD_EXP 7
14831: PPUSH
14832: LD_STRING D4b-JMM-5
14834: PPUSH
14835: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
14839: LD_EXP 65
14843: PPUSH
14844: LD_STRING D4b-Mikh-5
14846: PPUSH
14847: CALL_OW 88
// Say ( John , D4b-JMM-6 ) ;
14851: LD_EXP 7
14855: PPUSH
14856: LD_STRING D4b-JMM-6
14858: PPUSH
14859: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
14863: LD_EXP 65
14867: PPUSH
14868: LD_STRING D4b-Mikh-6
14870: PPUSH
14871: CALL_OW 88
// Say ( John , D4b-JMM-7 ) ;
14875: LD_EXP 7
14879: PPUSH
14880: LD_STRING D4b-JMM-7
14882: PPUSH
14883: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
14887: LD_EXP 65
14891: PPUSH
14892: LD_STRING D4b-Mikh-7
14894: PPUSH
14895: CALL_OW 88
// Alive = UnitFilter ( [ AmME1 , AmFE2 , AmMSo3 , Nick ] , [ f_ok ] ) ;
14899: LD_ADDR_VAR 0 1
14903: PUSH
14904: LD_EXP 13
14908: PUSH
14909: LD_EXP 14
14913: PUSH
14914: LD_EXP 15
14918: PUSH
14919: LD_EXP 11
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: PPUSH
14930: LD_INT 50
14932: PUSH
14933: EMPTY
14934: LIST
14935: PPUSH
14936: CALL_OW 72
14940: ST_TO_ADDR
// if Alive > 0 then
14941: LD_VAR 0 1
14945: PUSH
14946: LD_INT 0
14948: GREATER
14949: IFFALSE 14975
// Speaker = Alive [ Rand ( 1 , Alive ) ] ;
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: LD_VAR 0 1
14960: PUSH
14961: LD_INT 1
14963: PPUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 12
14973: ARRAY
14974: ST_TO_ADDR
// if GetSex ( Speaker ) = sex_male then
14975: LD_VAR 0 2
14979: PPUSH
14980: CALL_OW 258
14984: PUSH
14985: LD_INT 1
14987: EQUAL
14988: IFFALSE 15004
// Say ( Speaker , D4b-Sol1-7 ) else
14990: LD_VAR 0 2
14994: PPUSH
14995: LD_STRING D4b-Sol1-7
14997: PPUSH
14998: CALL_OW 88
15002: GO 15016
// Say ( Speaker , D4b-FSol1-7 ) ;
15004: LD_VAR 0 2
15008: PPUSH
15009: LD_STRING D4b-FSol1-7
15011: PPUSH
15012: CALL_OW 88
// Say ( John , D4b-JMM-8 ) ;
15016: LD_EXP 7
15020: PPUSH
15021: LD_STRING D4b-JMM-8
15023: PPUSH
15024: CALL_OW 88
// Alive = UnitFilter ( [ AmME1 , AmFE2 , AmMSo3 , Nick ] , [ f_ok ] ) ;
15028: LD_ADDR_VAR 0 1
15032: PUSH
15033: LD_EXP 13
15037: PUSH
15038: LD_EXP 14
15042: PUSH
15043: LD_EXP 15
15047: PUSH
15048: LD_EXP 11
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: LD_INT 50
15061: PUSH
15062: EMPTY
15063: LIST
15064: PPUSH
15065: CALL_OW 72
15069: ST_TO_ADDR
// if Alive > 0 then
15070: LD_VAR 0 1
15074: PUSH
15075: LD_INT 0
15077: GREATER
15078: IFFALSE 15104
// Speaker = Alive [ Rand ( 1 , Alive ) ] ;
15080: LD_ADDR_VAR 0 2
15084: PUSH
15085: LD_VAR 0 1
15089: PUSH
15090: LD_INT 1
15092: PPUSH
15093: LD_VAR 0 1
15097: PPUSH
15098: CALL_OW 12
15102: ARRAY
15103: ST_TO_ADDR
// if GetSex ( Speaker ) = sex_male then
15104: LD_VAR 0 2
15108: PPUSH
15109: CALL_OW 258
15113: PUSH
15114: LD_INT 1
15116: EQUAL
15117: IFFALSE 15133
// Say ( Speaker , D4b-Sol1-8 ) else
15119: LD_VAR 0 2
15123: PPUSH
15124: LD_STRING D4b-Sol1-8
15126: PPUSH
15127: CALL_OW 88
15131: GO 15145
// Say ( Speaker , D4b-FSol1-8 ) ;
15133: LD_VAR 0 2
15137: PPUSH
15138: LD_STRING D4b-FSol1-8
15140: PPUSH
15141: CALL_OW 88
// Say ( John , D4b-JMM-9 ) ;
15145: LD_EXP 7
15149: PPUSH
15150: LD_STRING D4b-JMM-9
15152: PPUSH
15153: CALL_OW 88
// DialogueOff ;
15157: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
15161: LD_STRING M3
15163: PPUSH
15164: CALL_OW 337
// enable ( depot ) ;
15168: LD_EXP 38
15172: ENABLE_MARKED
// disable ( conversation ) ;
15173: LD_EXP 44
15177: DISABLE_MARKED
// ComMoveUnit ( Mikhail , Followed ) ;
15178: LD_EXP 65
15182: PPUSH
15183: LD_LOC 2
15187: PPUSH
15188: CALL_OW 112
// repeat ComMoveXY ( Followed , 50 , 13 ) ;
15192: LD_LOC 2
15196: PPUSH
15197: LD_INT 50
15199: PPUSH
15200: LD_INT 13
15202: PPUSH
15203: CALL_OW 111
// Wait ( 0 0$1 ) ;
15207: LD_INT 35
15209: PPUSH
15210: CALL_OW 67
// until GetDistUnits ( dep1 , Mikhail ) < 5 ;
15214: LD_INT 1
15216: PPUSH
15217: LD_EXP 65
15221: PPUSH
15222: CALL_OW 296
15226: PUSH
15227: LD_INT 5
15229: LESS
15230: IFFALSE 15192
// NormalAttack ( russians , Followed ) ;
15232: LD_EXP 5
15236: PPUSH
15237: LD_LOC 2
15241: PPUSH
15242: CALL_OW 472
// end else
15246: GO 15249
// enable ;
15248: ENABLE
// end ;
15249: PPOPN 2
15251: END
// every 0 0$1 trigger GetDistUnits ( Followed , John ) > 5 marked 12 do
15252: LD_LOC 2
15256: PPUSH
15257: LD_EXP 7
15261: PPUSH
15262: CALL_OW 296
15266: PUSH
15267: LD_INT 5
15269: GREATER
15270: IFFALSE 15299
15272: GO 15274
15274: DISABLE
// begin ComStop ( Followed ) ;
15275: LD_LOC 2
15279: PPUSH
15280: CALL_OW 141
// ComMoveUnit ( Followed , John ) ;
15284: LD_LOC 2
15288: PPUSH
15289: LD_EXP 7
15293: PPUSH
15294: CALL_OW 112
// enable ;
15298: ENABLE
// end ;
15299: END
// every 0 0$0.5 marked 8 do
15300: GO 15302
15302: DISABLE
// begin if IsOk ( Mikhail ) and GetDistUnits ( dep1 , Mikhail ) < 10 then
15303: LD_EXP 65
15307: PPUSH
15308: CALL_OW 302
15312: PUSH
15313: LD_INT 1
15315: PPUSH
15316: LD_EXP 65
15320: PPUSH
15321: CALL_OW 296
15325: PUSH
15326: LD_INT 10
15328: LESS
15329: AND
15330: IFFALSE 15432
// begin ComMoveXY ( Mikhail , 52 , 13 ) ;
15332: LD_EXP 65
15336: PPUSH
15337: LD_INT 52
15339: PPUSH
15340: LD_INT 13
15342: PPUSH
15343: CALL_OW 111
// AddComHold ( Mikhail ) ;
15347: LD_EXP 65
15351: PPUSH
15352: CALL_OW 200
// WaitTask ( Mikhail , 0.5 ) ;
15356: LD_EXP 65
15360: PPUSH
15361: LD_REAL  5.00000000000000E-0001
15364: PPUSH
15365: CALL 3314 0 2
// SetSide ( Mikhail , americans ) ;
15369: LD_EXP 65
15373: PPUSH
15374: LD_EXP 3
15378: PPUSH
15379: CALL_OW 235
// repeat ComEnterUnit ( Mikhail , dep1 ) ;
15383: LD_EXP 65
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 120
// Wait ( 1 ) ;
15395: LD_INT 1
15397: PPUSH
15398: CALL_OW 67
// until IsInUnit ( Mikhail ) = dep1 ;
15402: LD_EXP 65
15406: PPUSH
15407: CALL_OW 310
15411: PUSH
15412: LD_INT 1
15414: EQUAL
15415: IFFALSE 15383
// Mikhail_in_depot = true ;
15417: LD_ADDR_EXP 39
15421: PUSH
15422: LD_INT 1
15424: ST_TO_ADDR
// enable ( great_escape ) ;
15425: LD_EXP 40
15429: ENABLE_MARKED
// end else
15430: GO 15433
// enable ;
15432: ENABLE
// end ;
15433: END
// every 0 0$4 marked 9 do var AmVehicles , AmV1 , AmV2 , Un , Humans_In_Depot_Left , Buildings_In_Depot_Left , Vehicles_In_Depot_Left , Humans_In_Depot_Right , Buildings_In_Depot_Right , Vehicles_In_Depot_Right , Humans_In_Depot_Back , Buildings_In_Depot_Back , Vehicles_In_Depot_Back ;
15434: GO 15436
15436: DISABLE
15437: LD_INT 0
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
// begin AmV1 = 0 ;
15452: LD_ADDR_VAR 0 2
15456: PUSH
15457: LD_INT 0
15459: ST_TO_ADDR
// AmV2 = 0 ;
15460: LD_ADDR_VAR 0 3
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// AmVehicles = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_vehicle ] ] ) ;
15468: LD_ADDR_VAR 0 1
15472: PUSH
15473: LD_INT 22
15475: PUSH
15476: LD_EXP 3
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 21
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: ST_TO_ADDR
// if AmVehicles ^ [ ] > 0 then
15504: LD_VAR 0 1
15508: PUSH
15509: EMPTY
15510: ADD
15511: PUSH
15512: LD_INT 0
15514: GREATER
15515: IFFALSE 15531
// AmV1 = AmVehicles [ 1 ] ;
15517: LD_ADDR_VAR 0 2
15521: PUSH
15522: LD_VAR 0 1
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: ST_TO_ADDR
// if AmVehicles ^ [ ] > 1 then
15531: LD_VAR 0 1
15535: PUSH
15536: EMPTY
15537: ADD
15538: PUSH
15539: LD_INT 1
15541: GREATER
15542: IFFALSE 15558
// AmV2 = AmVehicles [ 2 ] ;
15544: LD_ADDR_VAR 0 3
15548: PUSH
15549: LD_VAR 0 1
15553: PUSH
15554: LD_INT 2
15556: ARRAY
15557: ST_TO_ADDR
// Humans_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15558: LD_ADDR_VAR 0 5
15562: PUSH
15563: LD_INT 20
15565: PPUSH
15566: LD_INT 22
15568: PUSH
15569: LD_EXP 3
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 21
15580: PUSH
15581: LD_INT 1
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 50
15590: PUSH
15591: EMPTY
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: PPUSH
15599: CALL_OW 70
15603: ST_TO_ADDR
// Buildings_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
15604: LD_ADDR_VAR 0 6
15608: PUSH
15609: LD_INT 20
15611: PPUSH
15612: LD_INT 22
15614: PUSH
15615: LD_EXP 3
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 21
15626: PUSH
15627: LD_INT 3
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 50
15636: PUSH
15637: EMPTY
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 70
15649: ST_TO_ADDR
// Vehicles_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15650: LD_ADDR_VAR 0 7
15654: PUSH
15655: LD_INT 20
15657: PPUSH
15658: LD_INT 22
15660: PUSH
15661: LD_EXP 3
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 50
15682: PUSH
15683: EMPTY
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: LIST
15690: PPUSH
15691: CALL_OW 70
15695: ST_TO_ADDR
// for Un in Buildings_In_Depot_Left do
15696: LD_ADDR_VAR 0 4
15700: PUSH
15701: LD_VAR 0 6
15705: PUSH
15706: FOR_IN
15707: IFFALSE 15732
// Humans_In_Depot_Left = Humans_In_Depot_Left ^ UnitsInside ( Un ) ;
15709: LD_ADDR_VAR 0 5
15713: PUSH
15714: LD_VAR 0 5
15718: PUSH
15719: LD_VAR 0 4
15723: PPUSH
15724: CALL_OW 313
15728: ADD
15729: ST_TO_ADDR
15730: GO 15706
15732: POP
15733: POP
// for Un in Vehicles_In_Depot_Left do
15734: LD_ADDR_VAR 0 4
15738: PUSH
15739: LD_VAR 0 7
15743: PUSH
15744: FOR_IN
15745: IFFALSE 15770
// Humans_In_Depot_Left = Humans_In_Depot_Left ^ UnitsInside ( Un ) ;
15747: LD_ADDR_VAR 0 5
15751: PUSH
15752: LD_VAR 0 5
15756: PUSH
15757: LD_VAR 0 4
15761: PPUSH
15762: CALL_OW 313
15766: ADD
15767: ST_TO_ADDR
15768: GO 15744
15770: POP
15771: POP
// Humans_In_Depot_Left = Humans_In_Depot_Left diff Mikhail ;
15772: LD_ADDR_VAR 0 5
15776: PUSH
15777: LD_VAR 0 5
15781: PUSH
15782: LD_EXP 65
15786: DIFF
15787: ST_TO_ADDR
// Humans_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15788: LD_ADDR_VAR 0 8
15792: PUSH
15793: LD_INT 21
15795: PPUSH
15796: LD_INT 22
15798: PUSH
15799: LD_EXP 3
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 21
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 50
15820: PUSH
15821: EMPTY
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: PPUSH
15829: CALL_OW 70
15833: ST_TO_ADDR
// Buildings_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
15834: LD_ADDR_VAR 0 9
15838: PUSH
15839: LD_INT 21
15841: PPUSH
15842: LD_INT 22
15844: PUSH
15845: LD_EXP 3
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 21
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 50
15866: PUSH
15867: EMPTY
15868: LIST
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 70
15879: ST_TO_ADDR
// Vehicles_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15880: LD_ADDR_VAR 0 10
15884: PUSH
15885: LD_INT 21
15887: PPUSH
15888: LD_INT 22
15890: PUSH
15891: LD_EXP 3
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 21
15902: PUSH
15903: LD_INT 2
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 50
15912: PUSH
15913: EMPTY
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL_OW 70
15925: ST_TO_ADDR
// for Un in Buildings_In_Depot_Right do
15926: LD_ADDR_VAR 0 4
15930: PUSH
15931: LD_VAR 0 9
15935: PUSH
15936: FOR_IN
15937: IFFALSE 15962
// Humans_In_Depot_Right = Humans_In_Depot_Right ^ UnitsInside ( Un ) ;
15939: LD_ADDR_VAR 0 8
15943: PUSH
15944: LD_VAR 0 8
15948: PUSH
15949: LD_VAR 0 4
15953: PPUSH
15954: CALL_OW 313
15958: ADD
15959: ST_TO_ADDR
15960: GO 15936
15962: POP
15963: POP
// for Un in Vehicles_In_Depot_Right do
15964: LD_ADDR_VAR 0 4
15968: PUSH
15969: LD_VAR 0 10
15973: PUSH
15974: FOR_IN
15975: IFFALSE 16000
// Humans_In_Depot_Right = Humans_In_Depot_Right ^ UnitsInside ( Un ) ;
15977: LD_ADDR_VAR 0 8
15981: PUSH
15982: LD_VAR 0 8
15986: PUSH
15987: LD_VAR 0 4
15991: PPUSH
15992: CALL_OW 313
15996: ADD
15997: ST_TO_ADDR
15998: GO 15974
16000: POP
16001: POP
// Humans_In_Depot_Right = Humans_In_Depot_Right diff Mikhail ;
16002: LD_ADDR_VAR 0 8
16006: PUSH
16007: LD_VAR 0 8
16011: PUSH
16012: LD_EXP 65
16016: DIFF
16017: ST_TO_ADDR
// Humans_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
16018: LD_ADDR_VAR 0 11
16022: PUSH
16023: LD_INT 19
16025: PPUSH
16026: LD_INT 22
16028: PUSH
16029: LD_EXP 3
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 21
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 50
16050: PUSH
16051: EMPTY
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: PPUSH
16059: CALL_OW 70
16063: ST_TO_ADDR
// Buildings_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
16064: LD_ADDR_VAR 0 12
16068: PUSH
16069: LD_INT 19
16071: PPUSH
16072: LD_INT 22
16074: PUSH
16075: LD_EXP 3
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 21
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 50
16096: PUSH
16097: EMPTY
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: PPUSH
16105: CALL_OW 70
16109: ST_TO_ADDR
// Vehicles_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
16110: LD_ADDR_VAR 0 13
16114: PUSH
16115: LD_INT 19
16117: PPUSH
16118: LD_INT 22
16120: PUSH
16121: LD_EXP 3
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 21
16132: PUSH
16133: LD_INT 2
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 50
16142: PUSH
16143: EMPTY
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: PPUSH
16151: CALL_OW 70
16155: ST_TO_ADDR
// for Un in Buildings_In_Depot_Back do
16156: LD_ADDR_VAR 0 4
16160: PUSH
16161: LD_VAR 0 12
16165: PUSH
16166: FOR_IN
16167: IFFALSE 16192
// Humans_In_Depot_Back = Humans_In_Depot_Back ^ UnitsInside ( Un ) ;
16169: LD_ADDR_VAR 0 11
16173: PUSH
16174: LD_VAR 0 11
16178: PUSH
16179: LD_VAR 0 4
16183: PPUSH
16184: CALL_OW 313
16188: ADD
16189: ST_TO_ADDR
16190: GO 16166
16192: POP
16193: POP
// for Un in Vehicles_In_Depot_Back do
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_VAR 0 13
16203: PUSH
16204: FOR_IN
16205: IFFALSE 16230
// Humans_In_Depot_Back = Humans_In_Depot_Back ^ UnitsInside ( Un ) ;
16207: LD_ADDR_VAR 0 11
16211: PUSH
16212: LD_VAR 0 11
16216: PUSH
16217: LD_VAR 0 4
16221: PPUSH
16222: CALL_OW 313
16226: ADD
16227: ST_TO_ADDR
16228: GO 16204
16230: POP
16231: POP
// Humans_In_Depot_Back = Humans_In_Depot_Back diff Mikhail ;
16232: LD_ADDR_VAR 0 11
16236: PUSH
16237: LD_VAR 0 11
16241: PUSH
16242: LD_EXP 65
16246: DIFF
16247: ST_TO_ADDR
// if ( Humans_In_Depot_Left = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16248: LD_VAR 0 5
16252: PUSH
16253: LD_INT 0
16255: EQUAL
16256: PUSH
16257: LD_INT 1
16259: PPUSH
16260: CALL_OW 313
16264: PUSH
16265: LD_INT 2
16267: LESS
16268: AND
16269: IFFALSE 16413
// begin Mikhails_Escape_Disabled = false ;
16271: LD_ADDR_EXP 91
16275: PUSH
16276: LD_INT 0
16278: ST_TO_ADDR
// target_of_escape = [ 4 , 6 ] ;
16279: LD_ADDR_LOC 10
16283: PUSH
16284: LD_INT 4
16286: PUSH
16287: LD_INT 6
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16294: LD_EXP 65
16298: PPUSH
16299: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16303: LD_EXP 65
16307: PPUSH
16308: LD_EXP 6
16312: PPUSH
16313: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16317: LD_EXP 65
16321: PPUSH
16322: LD_INT 52
16324: PPUSH
16325: LD_INT 13
16327: PPUSH
16328: LD_INT 0
16330: PPUSH
16331: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16335: LD_ADDR_EXP 50
16339: PUSH
16340: LD_EXP 65
16344: PPUSH
16345: CALL_OW 256
16349: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16350: LD_EXP 45
16354: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16355: LD_EXP 3
16359: PPUSH
16360: LD_EXP 6
16364: PPUSH
16365: LD_INT 2
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 80
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16375: LD_EXP 65
16379: PPUSH
16380: LD_LOC 10
16384: PUSH
16385: LD_INT 1
16387: ARRAY
16388: PPUSH
16389: LD_LOC 10
16393: PUSH
16394: LD_INT 2
16396: ARRAY
16397: PPUSH
16398: CALL_OW 171
// AddComHold ( Mikhail ) ;
16402: LD_EXP 65
16406: PPUSH
16407: CALL_OW 200
// end else
16411: GO 16789
// if ( Humans_In_Depot_Right = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16413: LD_VAR 0 8
16417: PUSH
16418: LD_INT 0
16420: EQUAL
16421: PUSH
16422: LD_INT 1
16424: PPUSH
16425: CALL_OW 313
16429: PUSH
16430: LD_INT 2
16432: LESS
16433: AND
16434: IFFALSE 16608
// begin Mikhails_Escape_Disabled = false ;
16436: LD_ADDR_EXP 91
16440: PUSH
16441: LD_INT 0
16443: ST_TO_ADDR
// target_of_escape = [ 61 , 1 ] ;
16444: LD_ADDR_LOC 10
16448: PUSH
16449: LD_INT 61
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16459: LD_EXP 65
16463: PPUSH
16464: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16468: LD_EXP 65
16472: PPUSH
16473: LD_EXP 6
16477: PPUSH
16478: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16482: LD_EXP 65
16486: PPUSH
16487: LD_INT 52
16489: PPUSH
16490: LD_INT 13
16492: PPUSH
16493: LD_INT 0
16495: PPUSH
16496: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16500: LD_ADDR_EXP 50
16504: PUSH
16505: LD_EXP 65
16509: PPUSH
16510: CALL_OW 256
16514: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16515: LD_EXP 45
16519: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16520: LD_EXP 3
16524: PPUSH
16525: LD_EXP 6
16529: PPUSH
16530: LD_INT 2
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: CALL_OW 80
// AddComMoveXY ( Mikhail , 57 , 11 ) ;
16540: LD_EXP 65
16544: PPUSH
16545: LD_INT 57
16547: PPUSH
16548: LD_INT 11
16550: PPUSH
16551: CALL_OW 171
// AddComMoveXY ( Mikhail , 63 , 9 ) ;
16555: LD_EXP 65
16559: PPUSH
16560: LD_INT 63
16562: PPUSH
16563: LD_INT 9
16565: PPUSH
16566: CALL_OW 171
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16570: LD_EXP 65
16574: PPUSH
16575: LD_LOC 10
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_LOC 10
16588: PUSH
16589: LD_INT 2
16591: ARRAY
16592: PPUSH
16593: CALL_OW 171
// AddComHold ( Mikhail ) ;
16597: LD_EXP 65
16601: PPUSH
16602: CALL_OW 200
// end else
16606: GO 16789
// if ( Humans_In_Depot_Back = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16608: LD_VAR 0 11
16612: PUSH
16613: LD_INT 0
16615: EQUAL
16616: PUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 313
16624: PUSH
16625: LD_INT 2
16627: LESS
16628: AND
16629: IFFALSE 16788
// begin Mikhails_Escape_Disabled = false ;
16631: LD_ADDR_EXP 91
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// target_of_escape = [ 47 , 1 ] ;
16639: LD_ADDR_LOC 10
16643: PUSH
16644: LD_INT 47
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16654: LD_EXP 65
16658: PPUSH
16659: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16663: LD_EXP 65
16667: PPUSH
16668: LD_EXP 6
16672: PPUSH
16673: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16677: LD_EXP 65
16681: PPUSH
16682: LD_INT 52
16684: PPUSH
16685: LD_INT 13
16687: PPUSH
16688: LD_INT 0
16690: PPUSH
16691: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16695: LD_ADDR_EXP 50
16699: PUSH
16700: LD_EXP 65
16704: PPUSH
16705: CALL_OW 256
16709: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16710: LD_EXP 45
16714: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16715: LD_EXP 3
16719: PPUSH
16720: LD_EXP 6
16724: PPUSH
16725: LD_INT 2
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 80
// AddComMoveXY ( Mikhail , 49 , 7 ) ;
16735: LD_EXP 65
16739: PPUSH
16740: LD_INT 49
16742: PPUSH
16743: LD_INT 7
16745: PPUSH
16746: CALL_OW 171
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16750: LD_EXP 65
16754: PPUSH
16755: LD_LOC 10
16759: PUSH
16760: LD_INT 1
16762: ARRAY
16763: PPUSH
16764: LD_LOC 10
16768: PUSH
16769: LD_INT 2
16771: ARRAY
16772: PPUSH
16773: CALL_OW 171
// AddComHold ( Mikhail ) ;
16777: LD_EXP 65
16781: PPUSH
16782: CALL_OW 200
// end else
16786: GO 16789
// enable ;
16788: ENABLE
// end ;
16789: PPOPN 13
16791: END
// every 0 0$1 trigger IsOk ( Mikhail ) and not ( IsBusy ( Mikhail ) ) marked 13 do
16792: LD_EXP 65
16796: PPUSH
16797: CALL_OW 302
16801: PUSH
16802: LD_EXP 65
16806: PPUSH
16807: CALL_OW 315
16811: NOT
16812: AND
16813: IFFALSE 16845
16815: GO 16817
16817: DISABLE
// begin ComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16818: LD_EXP 65
16822: PPUSH
16823: LD_LOC 10
16827: PUSH
16828: LD_INT 1
16830: ARRAY
16831: PPUSH
16832: LD_LOC 10
16836: PUSH
16837: LD_INT 2
16839: ARRAY
16840: PPUSH
16841: CALL_OW 111
// end ;
16845: END
// every 0 0$2 trigger Mikhails_outcome = - 2 and Mikhails_lives = 1000 do var NearSol ;
16846: LD_LOC 3
16850: PUSH
16851: LD_INT 2
16853: NEG
16854: EQUAL
16855: PUSH
16856: LD_EXP 50
16860: PUSH
16861: LD_INT 1000
16863: EQUAL
16864: AND
16865: IFFALSE 17139
16867: GO 16869
16869: DISABLE
16870: LD_INT 0
16872: PPUSH
// begin if GetDistUnits ( John , dep1 ) < 6 then
16873: LD_EXP 7
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 296
16885: PUSH
16886: LD_INT 6
16888: LESS
16889: IFFALSE 17138
// begin NearSol = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , americans ] , [ f_sex , sex_male ] ] ) diff [ John , Cyrus ] , 52 , 13 ) ;
16891: LD_ADDR_VAR 0 1
16895: PUSH
16896: LD_INT 22
16898: PUSH
16899: LD_EXP 3
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 26
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PPUSH
16922: CALL_OW 69
16926: PUSH
16927: LD_EXP 7
16931: PUSH
16932: LD_EXP 8
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: DIFF
16941: PPUSH
16942: LD_INT 52
16944: PPUSH
16945: LD_INT 13
16947: PPUSH
16948: CALL_OW 73
16952: ST_TO_ADDR
// CenterOnUnits ( dep1 ) ;
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 85
// ComMoveXY ( John , 52 , 13 ) ;
16960: LD_EXP 7
16964: PPUSH
16965: LD_INT 52
16967: PPUSH
16968: LD_INT 13
16970: PPUSH
16971: CALL_OW 111
// DialogueOn ;
16975: CALL_OW 6
// Say ( John , D7-JMM-1 ) ;
16979: LD_EXP 7
16983: PPUSH
16984: LD_STRING D7-JMM-1
16986: PPUSH
16987: CALL_OW 88
// if NearSol then
16991: LD_VAR 0 1
16995: IFFALSE 17057
// begin Say ( NearSol , D7-Sol1-1 ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_STRING D7-Sol1-1
17004: PPUSH
17005: CALL_OW 88
// Say ( John , D7-JMM-2 ) ;
17009: LD_EXP 7
17013: PPUSH
17014: LD_STRING D7-JMM-2
17016: PPUSH
17017: CALL_OW 88
// Say ( NearSOl , D7-Sol1-2 ) ;
17021: LD_VAR 0 1
17025: PPUSH
17026: LD_STRING D7-Sol1-2
17028: PPUSH
17029: CALL_OW 88
// Say ( John , D7-JMM-3 ) ;
17033: LD_EXP 7
17037: PPUSH
17038: LD_STRING D7-JMM-3
17040: PPUSH
17041: CALL_OW 88
// Say ( NearSol , D7-Sol1-3 ) ;
17045: LD_VAR 0 1
17049: PPUSH
17050: LD_STRING D7-Sol1-3
17052: PPUSH
17053: CALL_OW 88
// end ; if IsOk ( Cyrus ) and IsOk ( Lisa ) then
17057: LD_EXP 8
17061: PPUSH
17062: CALL_OW 302
17066: PUSH
17067: LD_EXP 12
17071: PPUSH
17072: CALL_OW 302
17076: AND
17077: IFFALSE 17132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
17079: LD_EXP 8
17083: PPUSH
17084: LD_STRING D7-Cyrus-3
17086: PPUSH
17087: CALL_OW 88
// if NearSol then
17091: LD_VAR 0 1
17095: IFFALSE 17132
// begin Say ( NearSol , D7-Sol1-4 ) ;
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_STRING D7-Sol1-4
17104: PPUSH
17105: CALL_OW 88
// if IsOk ( Lisa ) then
17109: LD_EXP 12
17113: PPUSH
17114: CALL_OW 302
17118: IFFALSE 17132
// Say ( Lisa , D7-Lisa-4 ) ;
17120: LD_EXP 12
17124: PPUSH
17125: LD_STRING D7-Lisa-4
17127: PPUSH
17128: CALL_OW 88
// end ; end ; DialogueOff ;
17132: CALL_OW 7
// end else
17136: GO 17139
// enable ;
17138: ENABLE
// end ;
17139: PPOPN 1
17141: END
// every 0 0$1 trigger ( GetLives ( Mikhail ) < Mikhails_lives ) and rep marked 13 do
17142: LD_EXP 65
17146: PPUSH
17147: CALL_OW 256
17151: PUSH
17152: LD_EXP 50
17156: LESS
17157: PUSH
17158: LD_EXP 49
17162: AND
17163: IFFALSE 17308
17165: GO 17167
17167: DISABLE
// begin if IsOk ( Mikhail ) then
17168: LD_EXP 65
17172: PPUSH
17173: CALL_OW 302
17177: IFFALSE 17308
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ) ;
17179: LD_ADDR_LOC 11
17183: PUSH
17184: LD_EXP 65
17188: PPUSH
17189: LD_INT 22
17191: PUSH
17192: LD_EXP 3
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 21
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: PPUSH
17220: CALL 10150 0 2
17224: ST_TO_ADDR
// if GetSex ( attacker ) = sex_male then
17225: LD_LOC 11
17229: PPUSH
17230: CALL_OW 258
17234: PUSH
17235: LD_INT 1
17237: EQUAL
17238: IFFALSE 17267
// begin Say ( attacker , D7a-Sol1-1 ) ;
17240: LD_LOC 11
17244: PPUSH
17245: LD_STRING D7a-Sol1-1
17247: PPUSH
17248: CALL_OW 88
// enable ( firing1 ) ;
17252: LD_EXP 51
17256: ENABLE_MARKED
// rep = false ;
17257: LD_ADDR_EXP 49
17261: PUSH
17262: LD_INT 0
17264: ST_TO_ADDR
// end else
17265: GO 17292
// begin Say ( attacker , D7a-FSol1-1 ) ;
17267: LD_LOC 11
17271: PPUSH
17272: LD_STRING D7a-FSol1-1
17274: PPUSH
17275: CALL_OW 88
// enable ( firing2 ) ;
17279: LD_EXP 52
17283: ENABLE_MARKED
// rep = false ;
17284: LD_ADDR_EXP 49
17288: PUSH
17289: LD_INT 0
17291: ST_TO_ADDR
// end ; Mikhails_lives = GetLives ( Mikhail ) ;
17292: LD_ADDR_EXP 50
17296: PUSH
17297: LD_EXP 65
17301: PPUSH
17302: CALL_OW 256
17306: ST_TO_ADDR
// enable ;
17307: ENABLE
// end ; end ;
17308: END
// every 0 0$1 marked 14 do
17309: GO 17311
17311: DISABLE
// begin if IsDead ( Mikhail ) then
17312: LD_EXP 65
17316: PPUSH
17317: CALL_OW 301
17321: IFFALSE 17335
// Say ( attacker , D7a-Sol1-1a ) ;
17323: LD_LOC 11
17327: PPUSH
17328: LD_STRING D7a-Sol1-1a
17330: PPUSH
17331: CALL_OW 88
// end ;
17335: END
// every 0 0$1 marked 15 do
17336: GO 17338
17338: DISABLE
// begin if IsDead ( Mikhail ) then
17339: LD_EXP 65
17343: PPUSH
17344: CALL_OW 301
17348: IFFALSE 17362
// Say ( attacker , D7a-FSol1-1a ) ;
17350: LD_LOC 11
17354: PPUSH
17355: LD_STRING D7a-FSol1-1a
17357: PPUSH
17358: CALL_OW 88
// end ;
17362: END
// every 0 0$3 trigger ( GetLives ( dep1 ) < Dep1_lives or GetLives ( dep2 ) < Dep2_lives ) and not ( battle ) do
17363: LD_INT 1
17365: PPUSH
17366: CALL_OW 256
17370: PUSH
17371: LD_EXP 47
17375: LESS
17376: PUSH
17377: LD_INT 10
17379: PPUSH
17380: CALL_OW 256
17384: PUSH
17385: LD_EXP 48
17389: LESS
17390: OR
17391: PUSH
17392: LD_EXP 75
17396: NOT
17397: AND
17398: IFFALSE 17509
17400: GO 17402
17402: DISABLE
// begin if ( GetLives ( dep1 ) < Dep1_lives and GetDistUnits ( dep1 , John ) < 20 ) or ( GetLives ( dep2 ) < Dep2_lives and GetDistUnits ( dep2 , John ) < 20 ) then
17403: LD_INT 1
17405: PPUSH
17406: CALL_OW 256
17410: PUSH
17411: LD_EXP 47
17415: LESS
17416: PUSH
17417: LD_INT 1
17419: PPUSH
17420: LD_EXP 7
17424: PPUSH
17425: CALL_OW 296
17429: PUSH
17430: LD_INT 20
17432: LESS
17433: AND
17434: PUSH
17435: LD_INT 10
17437: PPUSH
17438: CALL_OW 256
17442: PUSH
17443: LD_EXP 48
17447: LESS
17448: PUSH
17449: LD_INT 10
17451: PPUSH
17452: LD_EXP 7
17456: PPUSH
17457: CALL_OW 296
17461: PUSH
17462: LD_INT 20
17464: LESS
17465: AND
17466: OR
17467: IFFALSE 17483
// Say ( John , D8-JMM-1 ) else
17469: LD_EXP 7
17473: PPUSH
17474: LD_STRING D8-JMM-1
17476: PPUSH
17477: CALL_OW 88
17481: GO 17509
// begin Dep1_lives = GetLives ( dep1 ) ;
17483: LD_ADDR_EXP 47
17487: PUSH
17488: LD_INT 1
17490: PPUSH
17491: CALL_OW 256
17495: ST_TO_ADDR
// Dep2_lives = GetLives ( dep2 ) ;
17496: LD_ADDR_EXP 48
17500: PUSH
17501: LD_INT 10
17503: PPUSH
17504: CALL_OW 256
17508: ST_TO_ADDR
// end ; end ;
17509: END
// function place_tiger ( name , area ) ; var i , x_sour , y_sour ; begin
17510: LD_INT 0
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
// InitUc ;
17516: CALL_OW 18
// InitHc ;
17520: CALL_OW 19
// hc_sex = sex_male ;
17524: LD_ADDR_OWVAR 27
17528: PUSH
17529: LD_INT 1
17531: ST_TO_ADDR
// uc_side = 0 ;
17532: LD_ADDR_OWVAR 20
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// uc_nation = nation_nature ;
17540: LD_ADDR_OWVAR 21
17544: PUSH
17545: LD_INT 0
17547: ST_TO_ADDR
// hc_class = class_tiger ;
17548: LD_ADDR_OWVAR 28
17552: PUSH
17553: LD_INT 14
17555: ST_TO_ADDR
// hc_skills = [ Tiger_skill , 0 , 0 , 0 ] ;
17556: LD_ADDR_OWVAR 31
17560: PUSH
17561: LD_EXP 103
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: ST_TO_ADDR
// hc_agressivity = 50 ;
17581: LD_ADDR_OWVAR 35
17585: PUSH
17586: LD_INT 50
17588: ST_TO_ADDR
// i = 5 ;
17589: LD_ADDR_VAR 0 4
17593: PUSH
17594: LD_INT 5
17596: ST_TO_ADDR
// repeat i = i - 1 ;
17597: LD_ADDR_VAR 0 4
17601: PUSH
17602: LD_VAR 0 4
17606: PUSH
17607: LD_INT 1
17609: MINUS
17610: ST_TO_ADDR
// sour = RandHexArea ( area , false ) ;
17611: LD_ADDR_LOC 9
17615: PUSH
17616: LD_VAR 0 2
17620: PPUSH
17621: LD_INT 0
17623: PPUSH
17624: CALL_OW 16
17628: ST_TO_ADDR
// until not ( SeeXY ( americans , sour [ 1 ] , sour [ 2 ] ) ) or i < 1 ;
17629: LD_EXP 3
17633: PPUSH
17634: LD_LOC 9
17638: PUSH
17639: LD_INT 1
17641: ARRAY
17642: PPUSH
17643: LD_LOC 9
17647: PUSH
17648: LD_INT 2
17650: ARRAY
17651: PPUSH
17652: CALL_OW 293
17656: NOT
17657: PUSH
17658: LD_VAR 0 4
17662: PUSH
17663: LD_INT 1
17665: LESS
17666: OR
17667: IFFALSE 17597
// name = CreateHuman ;
17669: LD_ADDR_VAR 0 1
17673: PUSH
17674: CALL_OW 44
17678: ST_TO_ADDR
// if not ( SeeXY ( americans , sour [ 1 ] , sour [ 2 ] ) ) then
17679: LD_EXP 3
17683: PPUSH
17684: LD_LOC 9
17688: PUSH
17689: LD_INT 1
17691: ARRAY
17692: PPUSH
17693: LD_LOC 9
17697: PUSH
17698: LD_INT 2
17700: ARRAY
17701: PPUSH
17702: CALL_OW 293
17706: NOT
17707: IFFALSE 17739
// PlaceUnitXY ( name , sour [ 1 ] , sour [ 2 ] , false ) ;
17709: LD_VAR 0 1
17713: PPUSH
17714: LD_LOC 9
17718: PUSH
17719: LD_INT 1
17721: ARRAY
17722: PPUSH
17723: LD_LOC 9
17727: PUSH
17728: LD_INT 2
17730: ARRAY
17731: PPUSH
17732: LD_INT 0
17734: PPUSH
17735: CALL_OW 48
// if not ( IsOk ( name ) ) then
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 302
17748: NOT
17749: IFFALSE 17770
// begin DestroyUnit ( name ) ;
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 65
// result = 0 ;
17760: LD_ADDR_VAR 0 3
17764: PUSH
17765: LD_INT 0
17767: ST_TO_ADDR
// end else
17768: GO 17778
// result = 1 ;
17770: LD_ADDR_VAR 0 3
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// end ;
17778: LD_VAR 0 3
17782: RET
// every 2 2$0 marked 18 do var i ;
17783: GO 17785
17785: DISABLE
17786: LD_INT 0
17788: PPUSH
// begin for i = 1 to Difficulty do
17789: LD_ADDR_VAR 0 1
17793: PUSH
17794: DOUBLE
17795: LD_INT 1
17797: DEC
17798: ST_TO_ADDR
17799: LD_OWVAR 67
17803: PUSH
17804: FOR_TO
17805: IFFALSE 17909
// begin hc_sex = sex_male ;
17807: LD_ADDR_OWVAR 27
17811: PUSH
17812: LD_INT 1
17814: ST_TO_ADDR
// uc_side = 0 ;
17815: LD_ADDR_OWVAR 20
17819: PUSH
17820: LD_INT 0
17822: ST_TO_ADDR
// uc_nation = nation_nature ;
17823: LD_ADDR_OWVAR 21
17827: PUSH
17828: LD_INT 0
17830: ST_TO_ADDR
// hc_class = class_tiger ;
17831: LD_ADDR_OWVAR 28
17835: PUSH
17836: LD_INT 14
17838: ST_TO_ADDR
// hc_skills = [ Tiger_skill , 0 , 0 , 0 ] ;
17839: LD_ADDR_OWVAR 31
17843: PUSH
17844: LD_EXP 103
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: ST_TO_ADDR
// hc_agressivity = 5 + 15 * Difficulty ;
17864: LD_ADDR_OWVAR 35
17868: PUSH
17869: LD_INT 5
17871: PUSH
17872: LD_INT 15
17874: PUSH
17875: LD_OWVAR 67
17879: MUL
17880: PLUS
17881: ST_TO_ADDR
// tiger = CreateHuman ;
17882: LD_ADDR_LOC 8
17886: PUSH
17887: CALL_OW 44
17891: ST_TO_ADDR
// PlaceUnitArea ( tiger , wood , false ) ;
17892: LD_LOC 8
17896: PPUSH
17897: LD_INT 3
17899: PPUSH
17900: LD_INT 0
17902: PPUSH
17903: CALL_OW 49
// end ;
17907: GO 17804
17909: POP
17910: POP
// end ;
17911: PPOPN 1
17913: END
// every 6 6$0 trigger Rand ( 1 , number_of_crates ) = 1 do
17914: LD_INT 1
17916: PPUSH
17917: LD_EXP 76
17921: PPUSH
17922: CALL_OW 12
17926: PUSH
17927: LD_INT 1
17929: EQUAL
17930: IFFALSE 17946
17932: GO 17934
17934: DISABLE
// begin CreateCratesAnywhere ( 3 , true ) ;
17935: LD_INT 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 57
// enable ;
17945: ENABLE
// end ;
17946: END
// every 0 0$0.1 marked 19 do
17947: GO 17949
17949: DISABLE
// begin ComMoveXY ( tigers , 98 , 2 ) ;
17950: LD_EXP 70
17954: PPUSH
17955: LD_INT 98
17957: PPUSH
17958: LD_INT 2
17960: PPUSH
17961: CALL_OW 111
// for tiger in tigers do
17965: LD_ADDR_LOC 8
17969: PUSH
17970: LD_EXP 70
17974: PUSH
17975: FOR_IN
17976: IFFALSE 18001
// begin WaitTask ( tiger , 1 ) ;
17978: LD_LOC 8
17982: PPUSH
17983: LD_INT 1
17985: PPUSH
17986: CALL 3314 0 2
// RemoveUnit ( tiger ) ;
17990: LD_LOC 8
17994: PPUSH
17995: CALL_OW 64
// end ;
17999: GO 17975
18001: POP
18002: POP
// end ;
18003: END
// every 0 0$3 trigger tick > Time_of_attack do var Un ;
18004: LD_OWVAR 1
18008: PUSH
18009: LD_EXP 26
18013: GREATER
18014: IFFALSE 18414
18016: GO 18018
18018: DISABLE
18019: LD_INT 0
18021: PPUSH
// begin if Attack_canceled then
18022: LD_EXP 93
18026: IFFALSE 18102
// begin DialogueOn ;
18028: CALL_OW 6
// SayRadio ( Powell , D6-Pow-1 ) ;
18032: LD_EXP 16
18036: PPUSH
18037: LD_STRING D6-Pow-1
18039: PPUSH
18040: CALL_OW 94
// Say ( John , D6-JMM-1 ) ;
18044: LD_EXP 7
18048: PPUSH
18049: LD_STRING D6-JMM-1
18051: PPUSH
18052: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
18056: LD_EXP 16
18060: PPUSH
18061: LD_STRING D6-Pow-2
18063: PPUSH
18064: CALL_OW 94
// Say ( John , D6-JMM-2 ) ;
18068: LD_EXP 7
18072: PPUSH
18073: LD_STRING D6-JMM-2
18075: PPUSH
18076: CALL_OW 88
// DialogueOff ;
18080: CALL_OW 7
// battle = false ;
18084: LD_ADDR_EXP 75
18088: PUSH
18089: LD_INT 0
18091: ST_TO_ADDR
// end_of_m = 1 ;
18092: LD_ADDR_LOC 5
18096: PUSH
18097: LD_INT 1
18099: ST_TO_ADDR
// end else
18100: GO 18414
// begin disable ( tigers_allowed ) ;
18102: LD_EXP 81
18106: DISABLE_MARKED
// enable ( remove_tigers ) ;
18107: LD_EXP 82
18111: ENABLE_MARKED
// rsol = [ [ rsol1 , rsol2 ] , [ rsol1 , rsol2 , rsol3 , rsol4 ] , [ rsol1 , rsol2 , rsol3 , rsol4 , rsol5 , rsol6 ] ] [ Difficulty ] ;
18112: LD_ADDR_LOC 6
18116: PUSH
18117: LD_EXP 55
18121: PUSH
18122: LD_EXP 56
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_EXP 55
18135: PUSH
18136: LD_EXP 56
18140: PUSH
18141: LD_EXP 57
18145: PUSH
18146: LD_EXP 58
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: LD_EXP 55
18161: PUSH
18162: LD_EXP 56
18166: PUSH
18167: LD_EXP 57
18171: PUSH
18172: LD_EXP 58
18176: PUSH
18177: LD_EXP 59
18181: PUSH
18182: LD_EXP 60
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: PUSH
18200: LD_OWVAR 67
18204: ARRAY
18205: ST_TO_ADDR
// rv = [ [ rv1 ] , [ rv1 ] , [ rv1 , rv2 ] ] [ Difficulty ] ;
18206: LD_ADDR_LOC 7
18210: PUSH
18211: LD_EXP 63
18215: PUSH
18216: EMPTY
18217: LIST
18218: PUSH
18219: LD_EXP 63
18223: PUSH
18224: EMPTY
18225: LIST
18226: PUSH
18227: LD_EXP 63
18231: PUSH
18232: LD_EXP 64
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: PUSH
18246: LD_OWVAR 67
18250: ARRAY
18251: ST_TO_ADDR
// while not ( PlaceUnitArea ( rv1 , prijezd , false ) ) do
18252: LD_EXP 63
18256: PPUSH
18257: LD_INT 10
18259: PPUSH
18260: LD_INT 0
18262: PPUSH
18263: CALL_OW 49
18267: NOT
18268: IFFALSE 18279
// wait ( 0 0$0.5 ) ;
18270: LD_INT 18
18272: PPUSH
18273: CALL_OW 67
18277: GO 18252
// if Difficulty > 2 then
18279: LD_OWVAR 67
18283: PUSH
18284: LD_INT 2
18286: GREATER
18287: IFFALSE 18316
// while not ( PlaceUnitArea ( rv2 , prijezd , false ) ) do
18289: LD_EXP 64
18293: PPUSH
18294: LD_INT 10
18296: PPUSH
18297: LD_INT 0
18299: PPUSH
18300: CALL_OW 49
18304: NOT
18305: IFFALSE 18316
// wait ( 0 0$0.5 ) ;
18307: LD_INT 18
18309: PPUSH
18310: CALL_OW 67
18314: GO 18289
// AddComAgressiveMove ( rv , 16 , 7 ) ;
18316: LD_LOC 7
18320: PPUSH
18321: LD_INT 16
18323: PPUSH
18324: LD_INT 7
18326: PPUSH
18327: CALL_OW 174
// for Un in rsol do
18331: LD_ADDR_VAR 0 1
18335: PUSH
18336: LD_LOC 6
18340: PUSH
18341: FOR_IN
18342: IFFALSE 18361
// PlaceUnitArea ( Un , prijezd , false ) ;
18344: LD_VAR 0 1
18348: PPUSH
18349: LD_INT 10
18351: PPUSH
18352: LD_INT 0
18354: PPUSH
18355: CALL_OW 49
18359: GO 18341
18361: POP
18362: POP
// AddComAgressiveMove ( rsol , 16 , 7 ) ;
18363: LD_LOC 6
18367: PPUSH
18368: LD_INT 16
18370: PPUSH
18371: LD_INT 7
18373: PPUSH
18374: CALL_OW 174
// Say ( rsol1 , D9-Rus3-1 ) ;
18378: LD_EXP 55
18382: PPUSH
18383: LD_STRING D9-Rus3-1
18385: PPUSH
18386: CALL_OW 88
// Say ( rsol2 , D9-Russ-1 ) ;
18390: LD_EXP 56
18394: PPUSH
18395: LD_STRING D9-Russ-1
18397: PPUSH
18398: CALL_OW 88
// Hint ( Boj ) ;
18402: LD_STRING Boj
18404: PPUSH
18405: CALL_OW 339
// enable ( russians_attack ) ;
18409: LD_EXP 53
18413: ENABLE_MARKED
// end ; end ;
18414: PPOPN 1
18416: END
// every 0 0$1 marked 16 do var breastworks , target , b , min ;
18417: GO 18419
18419: DISABLE
18420: LD_INT 0
18422: PPUSH
18423: PPUSH
18424: PPUSH
18425: PPUSH
// begin battle = true ;
18426: LD_ADDR_EXP 75
18430: PUSH
18431: LD_INT 1
18433: ST_TO_ADDR
// target = 1 ;
18434: LD_ADDR_VAR 0 2
18438: PUSH
18439: LD_INT 1
18441: ST_TO_ADDR
// min = 1000 ;
18442: LD_ADDR_VAR 0 4
18446: PUSH
18447: LD_INT 1000
18449: ST_TO_ADDR
// wait ( 0 0$5 * ( 4 - Difficulty ) ) ;
18450: LD_INT 175
18452: PUSH
18453: LD_INT 4
18455: PUSH
18456: LD_OWVAR 67
18460: MINUS
18461: MUL
18462: PPUSH
18463: CALL_OW 67
// breastworks = FilterUnitsInArea ( North , [ [ f_btype , b_breastwork ] , [ f_side , americans ] ] ) ;
18467: LD_ADDR_VAR 0 1
18471: PUSH
18472: LD_INT 2
18474: PPUSH
18475: LD_INT 30
18477: PUSH
18478: LD_INT 31
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 22
18487: PUSH
18488: LD_EXP 3
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PPUSH
18501: CALL_OW 70
18505: ST_TO_ADDR
// if breastworks = 0 then
18506: LD_VAR 0 1
18510: PUSH
18511: LD_INT 0
18513: EQUAL
18514: IFFALSE 18539
// ComAgressiveMove ( rsol ^ rv , 56 , 11 ) else
18516: LD_LOC 6
18520: PUSH
18521: LD_LOC 7
18525: ADD
18526: PPUSH
18527: LD_INT 56
18529: PPUSH
18530: LD_INT 11
18532: PPUSH
18533: CALL_OW 114
18537: GO 19121
// begin for b in breastworks do
18539: LD_ADDR_VAR 0 3
18543: PUSH
18544: LD_VAR 0 1
18548: PUSH
18549: FOR_IN
18550: IFFALSE 18598
// if min > GetDistUnitXY ( b , 36 , 0 ) then
18552: LD_VAR 0 4
18556: PUSH
18557: LD_VAR 0 3
18561: PPUSH
18562: LD_INT 36
18564: PPUSH
18565: LD_INT 0
18567: PPUSH
18568: CALL_OW 297
18572: GREATER
18573: IFFALSE 18596
// min = GetDistUnitXY ( b , 36 , 0 ) ;
18575: LD_ADDR_VAR 0 4
18579: PUSH
18580: LD_VAR 0 3
18584: PPUSH
18585: LD_INT 36
18587: PPUSH
18588: LD_INT 0
18590: PPUSH
18591: CALL_OW 297
18595: ST_TO_ADDR
18596: GO 18549
18598: POP
18599: POP
// for b in breastworks do
18600: LD_ADDR_VAR 0 3
18604: PUSH
18605: LD_VAR 0 1
18609: PUSH
18610: FOR_IN
18611: IFFALSE 18667
// if min > GetDistUnitXY ( b , 47 , 18 ) then
18613: LD_VAR 0 4
18617: PUSH
18618: LD_VAR 0 3
18622: PPUSH
18623: LD_INT 47
18625: PPUSH
18626: LD_INT 18
18628: PPUSH
18629: CALL_OW 297
18633: GREATER
18634: IFFALSE 18665
// begin min = GetDistUnitXY ( b , 47 , 18 ) ;
18636: LD_ADDR_VAR 0 4
18640: PUSH
18641: LD_VAR 0 3
18645: PPUSH
18646: LD_INT 47
18648: PPUSH
18649: LD_INT 18
18651: PPUSH
18652: CALL_OW 297
18656: ST_TO_ADDR
// target = 2 ;
18657: LD_ADDR_VAR 0 2
18661: PUSH
18662: LD_INT 2
18664: ST_TO_ADDR
// end ;
18665: GO 18610
18667: POP
18668: POP
// for b in breastworks do
18669: LD_ADDR_VAR 0 3
18673: PUSH
18674: LD_VAR 0 1
18678: PUSH
18679: FOR_IN
18680: IFFALSE 18736
// if min > GetDistUnitXY ( b , 62 , 23 ) then
18682: LD_VAR 0 4
18686: PUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: LD_INT 62
18694: PPUSH
18695: LD_INT 23
18697: PPUSH
18698: CALL_OW 297
18702: GREATER
18703: IFFALSE 18734
// begin min = GetDistUnitXY ( b , 62 , 23 ) ;
18705: LD_ADDR_VAR 0 4
18709: PUSH
18710: LD_VAR 0 3
18714: PPUSH
18715: LD_INT 62
18717: PPUSH
18718: LD_INT 23
18720: PPUSH
18721: CALL_OW 297
18725: ST_TO_ADDR
// target = 3 ;
18726: LD_ADDR_VAR 0 2
18730: PUSH
18731: LD_INT 3
18733: ST_TO_ADDR
// end ;
18734: GO 18679
18736: POP
18737: POP
// case target of 1 :
18738: LD_VAR 0 2
18742: PUSH
18743: LD_INT 1
18745: DOUBLE
18746: EQUAL
18747: IFTRUE 18751
18749: GO 18849
18751: POP
// begin AddComAgressiveMove ( rsol ^ rv , 16 , 2 ) ;
18752: LD_LOC 6
18756: PUSH
18757: LD_LOC 7
18761: ADD
18762: PPUSH
18763: LD_INT 16
18765: PPUSH
18766: LD_INT 2
18768: PPUSH
18769: CALL_OW 174
// wait ( 0 0$3 ) ;
18773: LD_INT 105
18775: PPUSH
18776: CALL_OW 67
// AddComAgressiveMove ( rsol , 36 , 0 ) ;
18780: LD_LOC 6
18784: PPUSH
18785: LD_INT 36
18787: PPUSH
18788: LD_INT 0
18790: PPUSH
18791: CALL_OW 174
// AddComAgressiveMove ( rsol , 51 , 4 ) ;
18795: LD_LOC 6
18799: PPUSH
18800: LD_INT 51
18802: PPUSH
18803: LD_INT 4
18805: PPUSH
18806: CALL_OW 174
// wait ( 0 0$3 ) ;
18810: LD_INT 105
18812: PPUSH
18813: CALL_OW 67
// AddComAgressiveMove ( rv , 36 , 0 ) ;
18817: LD_LOC 7
18821: PPUSH
18822: LD_INT 36
18824: PPUSH
18825: LD_INT 0
18827: PPUSH
18828: CALL_OW 174
// AddComAgressiveMove ( rv , 51 , 4 ) ;
18832: LD_LOC 7
18836: PPUSH
18837: LD_INT 51
18839: PPUSH
18840: LD_INT 4
18842: PPUSH
18843: CALL_OW 174
// end ; 2 :
18847: GO 19121
18849: LD_INT 2
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 19001
18857: POP
// begin if Rand ( 1 , 2 ) = 1 then
18858: LD_INT 1
18860: PPUSH
18861: LD_INT 2
18863: PPUSH
18864: CALL_OW 12
18868: PUSH
18869: LD_INT 1
18871: EQUAL
18872: IFFALSE 18941
// begin AddComAgressiveMove ( rsol ^ rv , 35 , 25 ) ;
18874: LD_LOC 6
18878: PUSH
18879: LD_LOC 7
18883: ADD
18884: PPUSH
18885: LD_INT 35
18887: PPUSH
18888: LD_INT 25
18890: PPUSH
18891: CALL_OW 174
// wait ( 0 0$5 ) ;
18895: LD_INT 175
18897: PPUSH
18898: CALL_OW 67
// AddComAgressiveMove ( rsol , 47 , 18 ) ;
18902: LD_LOC 6
18906: PPUSH
18907: LD_INT 47
18909: PPUSH
18910: LD_INT 18
18912: PPUSH
18913: CALL_OW 174
// wait ( 0 0$2 ) ;
18917: LD_INT 70
18919: PPUSH
18920: CALL_OW 67
// AddComAgressiveMove ( rv , 47 , 18 ) ;
18924: LD_LOC 7
18928: PPUSH
18929: LD_INT 47
18931: PPUSH
18932: LD_INT 18
18934: PPUSH
18935: CALL_OW 174
// end else
18939: GO 18978
// begin AddComAgressiveMove ( rsol , 47 , 18 ) ;
18941: LD_LOC 6
18945: PPUSH
18946: LD_INT 47
18948: PPUSH
18949: LD_INT 18
18951: PPUSH
18952: CALL_OW 174
// wait ( 0 0$3 ) ;
18956: LD_INT 105
18958: PPUSH
18959: CALL_OW 67
// AddComAgressiveMove ( rv , 47 , 18 ) ;
18963: LD_LOC 7
18967: PPUSH
18968: LD_INT 47
18970: PPUSH
18971: LD_INT 18
18973: PPUSH
18974: CALL_OW 174
// end ; AddComAgressiveMove ( rsol ^ rv , 51 , 13 ) ;
18978: LD_LOC 6
18982: PUSH
18983: LD_LOC 7
18987: ADD
18988: PPUSH
18989: LD_INT 51
18991: PPUSH
18992: LD_INT 13
18994: PPUSH
18995: CALL_OW 174
// end ; 3 :
18999: GO 19121
19001: LD_INT 3
19003: DOUBLE
19004: EQUAL
19005: IFTRUE 19009
19007: GO 19120
19009: POP
// begin AddComAgressiveMove ( rsol ^ rv , 35 , 25 ) ;
19010: LD_LOC 6
19014: PUSH
19015: LD_LOC 7
19019: ADD
19020: PPUSH
19021: LD_INT 35
19023: PPUSH
19024: LD_INT 25
19026: PPUSH
19027: CALL_OW 174
// wait ( 0 0$5 ) ;
19031: LD_INT 175
19033: PPUSH
19034: CALL_OW 67
// AddComAgressiveMove ( rsol ^ rv , 56 , 37 ) ;
19038: LD_LOC 6
19042: PUSH
19043: LD_LOC 7
19047: ADD
19048: PPUSH
19049: LD_INT 56
19051: PPUSH
19052: LD_INT 37
19054: PPUSH
19055: CALL_OW 174
// wait ( 0 0$5 ) ;
19059: LD_INT 175
19061: PPUSH
19062: CALL_OW 67
// AddComAgressiveMove ( rsol , 62 , 23 ) ;
19066: LD_LOC 6
19070: PPUSH
19071: LD_INT 62
19073: PPUSH
19074: LD_INT 23
19076: PPUSH
19077: CALL_OW 174
// wait ( 0 0$2 ) ;
19081: LD_INT 70
19083: PPUSH
19084: CALL_OW 67
// AddComAgressiveMove ( rv , 62 , 23 ) ;
19088: LD_LOC 7
19092: PPUSH
19093: LD_INT 62
19095: PPUSH
19096: LD_INT 23
19098: PPUSH
19099: CALL_OW 174
// AddComAgressiveMove ( rv , 55 , 10 ) ;
19103: LD_LOC 7
19107: PPUSH
19108: LD_INT 55
19110: PPUSH
19111: LD_INT 10
19113: PPUSH
19114: CALL_OW 174
// end ; end ;
19118: GO 19121
19120: POP
// end ; enable ( russians_attack1 ) ;
19121: LD_EXP 54
19125: ENABLE_MARKED
// end ;
19126: PPOPN 4
19128: END
// every 0 0$3 marked 17 do
19129: GO 19131
19131: DISABLE
// begin if IsOk ( rdrv1 ) then
19132: LD_EXP 61
19136: PPUSH
19137: CALL_OW 302
19141: IFFALSE 19263
// begin if not ( IsBusy ( rv1 ) ) and WantsToAttack ( rv1 ) = 0 and Attacks ( rv1 ) = 0 and IsOk ( dep1 ) then
19143: LD_EXP 63
19147: PPUSH
19148: CALL_OW 315
19152: NOT
19153: PUSH
19154: LD_EXP 63
19158: PPUSH
19159: CALL_OW 319
19163: PUSH
19164: LD_INT 0
19166: EQUAL
19167: AND
19168: PUSH
19169: LD_EXP 63
19173: PPUSH
19174: CALL_OW 320
19178: PUSH
19179: LD_INT 0
19181: EQUAL
19182: AND
19183: PUSH
19184: LD_INT 1
19186: PPUSH
19187: CALL_OW 302
19191: AND
19192: IFFALSE 19263
// if GetDistUnits ( rv1 , dep1 ) < 7 and UnitsInside ( dep1 ) = 0 then
19194: LD_EXP 63
19198: PPUSH
19199: LD_INT 1
19201: PPUSH
19202: CALL_OW 296
19206: PUSH
19207: LD_INT 7
19209: LESS
19210: PUSH
19211: LD_INT 1
19213: PPUSH
19214: CALL_OW 313
19218: PUSH
19219: LD_INT 0
19221: EQUAL
19222: AND
19223: IFFALSE 19248
// begin AddComExitVehicle ( rv1 ) ;
19225: LD_EXP 63
19229: PPUSH
19230: CALL_OW 181
// AddComEnterUnit ( rdrv1 , dep1 ) ;
19234: LD_EXP 61
19238: PPUSH
19239: LD_INT 1
19241: PPUSH
19242: CALL_OW 180
// end else
19246: GO 19263
// ComAgressiveMove ( rv1 , 51 , 14 ) ;
19248: LD_EXP 63
19252: PPUSH
19253: LD_INT 51
19255: PPUSH
19256: LD_INT 14
19258: PPUSH
19259: CALL_OW 114
// end ; enable ;
19263: ENABLE
// end ;
19264: END
// every 0 0$5 trigger ( UnitFilter ( rsol ^ [ rdrv1 , rdrv2 ] , [ f_alive ] ) ) = 0 marked 17 do
19265: LD_LOC 6
19269: PUSH
19270: LD_EXP 61
19274: PUSH
19275: LD_EXP 62
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: ADD
19284: PPUSH
19285: LD_INT 51
19287: PUSH
19288: EMPTY
19289: LIST
19290: PPUSH
19291: CALL_OW 72
19295: PUSH
19296: LD_INT 0
19298: EQUAL
19299: IFFALSE 19384
19301: GO 19303
19303: DISABLE
// begin disable ;
19304: DISABLE
// Wait ( 0 0$5 ) ;
19305: LD_INT 175
19307: PPUSH
19308: CALL_OW 67
// DialogueOn ;
19312: CALL_OW 6
// SayRadio ( Powell , D6-Pow-1 ) ;
19316: LD_EXP 16
19320: PPUSH
19321: LD_STRING D6-Pow-1
19323: PPUSH
19324: CALL_OW 94
// Say ( John , D6-JMM-1 ) ;
19328: LD_EXP 7
19332: PPUSH
19333: LD_STRING D6-JMM-1
19335: PPUSH
19336: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
19340: LD_EXP 16
19344: PPUSH
19345: LD_STRING D6-Pow-2
19347: PPUSH
19348: CALL_OW 94
// Say ( John , D6-JMM-2 ) ;
19352: LD_EXP 7
19356: PPUSH
19357: LD_STRING D6-JMM-2
19359: PPUSH
19360: CALL_OW 88
// DialogueOff ;
19364: CALL_OW 7
// battle = false ;
19368: LD_ADDR_EXP 75
19372: PUSH
19373: LD_INT 0
19375: ST_TO_ADDR
// end_of_m = 1 ;
19376: LD_ADDR_LOC 5
19380: PUSH
19381: LD_INT 1
19383: ST_TO_ADDR
// end ;
19384: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_or , [ f_side , americans ] , [ f_side , americans1 ] ] , [ f_alive ] , f_not , [ f_ok ] ] ) do
19385: LD_INT 2
19387: PUSH
19388: LD_INT 22
19390: PUSH
19391: LD_EXP 3
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 22
19402: PUSH
19403: LD_EXP 4
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 51
19419: PUSH
19420: EMPTY
19421: LIST
19422: PUSH
19423: LD_INT 3
19425: PUSH
19426: LD_INT 50
19428: PUSH
19429: EMPTY
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PPUSH
19438: CALL_OW 69
19442: IFFALSE 19454
19444: GO 19446
19446: DISABLE
// begin Hint ( RedArentDead ) ;
19447: LD_STRING RedArentDead
19449: PPUSH
19450: CALL_OW 339
// end ;
19454: END
// every 0 0$2 trigger IsInUnit ( John ) do
19455: LD_EXP 7
19459: PPUSH
19460: CALL_OW 310
19464: IFFALSE 19500
19466: GO 19468
19468: DISABLE
// begin if GetType ( IsInUnit ( John ) ) = unit_vehicle then
19469: LD_EXP 7
19473: PPUSH
19474: CALL_OW 310
19478: PPUSH
19479: CALL_OW 247
19483: PUSH
19484: LD_INT 2
19486: EQUAL
19487: IFFALSE 19499
// JMMInVehicle := true else
19489: LD_ADDR_EXP 118
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
19497: GO 19500
// enable ;
19499: ENABLE
// end ;
19500: END
// every 0 0$2 + 0 0$1 trigger IsInUnit ( Cyrus ) do
19501: LD_EXP 8
19505: PPUSH
19506: CALL_OW 310
19510: IFFALSE 19546
19512: GO 19514
19514: DISABLE
// begin if GetType ( IsInUnit ( Cyrus ) ) = unit_vehicle then
19515: LD_EXP 8
19519: PPUSH
19520: CALL_OW 310
19524: PPUSH
19525: CALL_OW 247
19529: PUSH
19530: LD_INT 2
19532: EQUAL
19533: IFFALSE 19545
// CyrusInVehicle := true else
19535: LD_ADDR_EXP 119
19539: PUSH
19540: LD_INT 1
19542: ST_TO_ADDR
19543: GO 19546
// enable ;
19545: ENABLE
// end ;
19546: END
// every 0 0$1 trigger IsAt ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) marked 13 do
19547: LD_EXP 65
19551: PPUSH
19552: LD_LOC 10
19556: PUSH
19557: LD_INT 1
19559: ARRAY
19560: PPUSH
19561: LD_LOC 10
19565: PUSH
19566: LD_INT 2
19568: ARRAY
19569: PPUSH
19570: CALL_OW 307
19574: IFFALSE 19612
19576: GO 19578
19578: DISABLE
// begin RemoveUnit ( Mikhail ) ;
19579: LD_EXP 65
19583: PPUSH
19584: CALL_OW 64
// Mikhails_outcome = - 2 ;
19588: LD_ADDR_LOC 3
19592: PUSH
19593: LD_INT 2
19595: NEG
19596: ST_TO_ADDR
// Mikhail_status = 4 ;
19597: LD_ADDR_LOC 4
19601: PUSH
19602: LD_INT 4
19604: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
19605: LD_STRING M3a
19607: PPUSH
19608: CALL_OW 337
// end ;
19612: END
// every 0 0$3 trigger IsDead ( Mikhail ) marked 13 do
19613: LD_EXP 65
19617: PPUSH
19618: CALL_OW 301
19622: IFFALSE 19650
19624: GO 19626
19626: DISABLE
// begin Mikhails_outcome = 2 ;
19627: LD_ADDR_LOC 3
19631: PUSH
19632: LD_INT 2
19634: ST_TO_ADDR
// Mikhail_status = 3 ;
19635: LD_ADDR_LOC 4
19639: PUSH
19640: LD_INT 3
19642: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
19643: LD_STRING M3a
19645: PPUSH
19646: CALL_OW 337
// end ;
19650: END
// every 0 0$10 marked 20 do var my_depots , my_eng ;
19651: GO 19653
19653: DISABLE
19654: LD_INT 0
19656: PPUSH
19657: PPUSH
// begin my_depots = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_side , americans ] ] ) ;
19658: LD_ADDR_VAR 0 1
19662: PUSH
19663: LD_INT 21
19665: PUSH
19666: LD_INT 3
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 30
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_EXP 3
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: PPUSH
19700: CALL_OW 69
19704: ST_TO_ADDR
// my_eng = FilterAllUnits ( [ [ f_type , unit_human ] , [ f_class , class_engineer ] , [ f_side , americans ] ] ) ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_INT 21
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 25
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 22
19732: PUSH
19733: LD_EXP 3
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: ST_TO_ADDR
// if my_depots = 0 and my_eng = 0 then
19752: LD_VAR 0 1
19756: PUSH
19757: LD_INT 0
19759: EQUAL
19760: PUSH
19761: LD_VAR 0 2
19765: PUSH
19766: LD_INT 0
19768: EQUAL
19769: AND
19770: IFFALSE 19785
// begin YouLost ( Engineer ) ;
19772: LD_STRING Engineer
19774: PPUSH
19775: CALL_OW 104
// ExitGame ;
19779: CALL_OW 341
// end else
19783: GO 19786
// enable ;
19785: ENABLE
// end ;
19786: PPOPN 2
19788: END
// every 0 0$5 trigger IsDead ( John ) do
19789: LD_EXP 7
19793: PPUSH
19794: CALL_OW 301
19798: IFFALSE 19814
19800: GO 19802
19802: DISABLE
// begin YouLost ( JMM ) ;
19803: LD_STRING JMM
19805: PPUSH
19806: CALL_OW 104
// ExitGame ;
19810: CALL_OW 341
// end ;
19814: END
// every 0 0$5 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
19815: LD_INT 1
19817: PPUSH
19818: CALL_OW 301
19822: PUSH
19823: LD_INT 10
19825: PPUSH
19826: CALL_OW 301
19830: OR
19831: IFFALSE 19843
19833: GO 19835
19835: DISABLE
// begin YouLost ( DepotDestroyed ) ;
19836: LD_STRING DepotDestroyed
19838: PPUSH
19839: CALL_OW 104
// end ;
19843: END
// every 0 0$2 trigger GetSide ( dep1 ) = russians marked 17 do
19844: LD_INT 1
19846: PPUSH
19847: CALL_OW 255
19851: PUSH
19852: LD_EXP 5
19856: EQUAL
19857: IFFALSE 19894
19859: GO 19861
19861: DISABLE
// begin wait ( 0 0$30 ) ;
19862: LD_INT 1050
19864: PPUSH
19865: CALL_OW 67
// if GetSide ( dep1 ) = russians then
19869: LD_INT 1
19871: PPUSH
19872: CALL_OW 255
19876: PUSH
19877: LD_EXP 5
19881: EQUAL
19882: IFFALSE 19893
// YouLost ( DepotCaptured ) else
19884: LD_STRING DepotCaptured
19886: PPUSH
19887: CALL_OW 104
19891: GO 19894
// enable ;
19893: ENABLE
// end ;
19894: END
// every 0 0$1 trigger end_of_m do var m , medal1 , medal2 , medal3 ;
19895: LD_LOC 5
19899: IFFALSE 20472
19901: GO 19903
19903: DISABLE
19904: LD_INT 0
19906: PPUSH
19907: PPUSH
19908: PPUSH
19909: PPUSH
// begin medal1 := false ;
19910: LD_ADDR_VAR 0 2
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// medal2 := false ;
19918: LD_ADDR_VAR 0 3
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// medal3 := false ;
19926: LD_ADDR_VAR 0 4
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// if GetSide ( Mikhail ) = americans then
19934: LD_EXP 65
19938: PPUSH
19939: CALL_OW 255
19943: PUSH
19944: LD_EXP 3
19948: EQUAL
19949: IFFALSE 19965
// SetSide ( Mikhail , russians1 ) ;
19951: LD_EXP 65
19955: PPUSH
19956: LD_EXP 6
19960: PPUSH
19961: CALL_OW 235
// if lost_units < 3 then
19965: LD_EXP 90
19969: PUSH
19970: LD_INT 3
19972: LESS
19973: IFFALSE 19993
// begin m = 1 ;
19975: LD_ADDR_VAR 0 1
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// medal1 := true ;
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// end else
19991: GO 20002
// m := - 1 ;
19993: LD_ADDR_VAR 0 1
19997: PUSH
19998: LD_INT 1
20000: NEG
20001: ST_TO_ADDR
// if Mikhails_outcome then
20002: LD_LOC 3
20006: IFFALSE 20016
// medal2 := true ;
20008: LD_ADDR_VAR 0 3
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// if Mikhails_outcome = 1 and GetLives ( Mikhail ) = 0 then
20016: LD_LOC 3
20020: PUSH
20021: LD_INT 1
20023: EQUAL
20024: PUSH
20025: LD_EXP 65
20029: PPUSH
20030: CALL_OW 256
20034: PUSH
20035: LD_INT 0
20037: EQUAL
20038: AND
20039: IFFALSE 20050
// Mikhails_outcome = - 1 ;
20041: LD_ADDR_LOC 3
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: ST_TO_ADDR
// if GetResourceType ( dep1 , mat_cans ) >= 150 then
20050: LD_INT 1
20052: PPUSH
20053: LD_INT 1
20055: PPUSH
20056: CALL_OW 275
20060: PUSH
20061: LD_INT 150
20063: GREATEREQUAL
20064: IFFALSE 20086
// begin AddMedal ( Cans , 1 ) ;
20066: LD_STRING Cans
20068: PPUSH
20069: LD_INT 1
20071: PPUSH
20072: CALL_OW 101
// medal3 := true ;
20076: LD_ADDR_VAR 0 4
20080: PUSH
20081: LD_INT 1
20083: ST_TO_ADDR
// end else
20084: GO 20097
// AddMedal ( Cans , - 1 ) ;
20086: LD_STRING Cans
20088: PPUSH
20089: LD_INT 1
20091: NEG
20092: PPUSH
20093: CALL_OW 101
// AddMedal ( Deaths , m ) ;
20097: LD_STRING Deaths
20099: PPUSH
20100: LD_VAR 0 1
20104: PPUSH
20105: CALL_OW 101
// AddMedal ( Prisoner , Mikhails_outcome ) ;
20109: LD_STRING Prisoner
20111: PPUSH
20112: LD_LOC 3
20116: PPUSH
20117: CALL_OW 101
// SA_EndMission ( 1 , 2 , medal1 , medal2 , medal3 ) ;
20121: LD_INT 1
20123: PPUSH
20124: LD_INT 2
20126: PPUSH
20127: LD_VAR 0 2
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 4
20141: PPUSH
20142: CALL 23107 0 5
// GiveMedals ( MAIN ) ;
20146: LD_STRING MAIN
20148: PPUSH
20149: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_alive ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) ) ;
20153: LD_INT 51
20155: PUSH
20156: EMPTY
20157: LIST
20158: PUSH
20159: LD_INT 22
20161: PUSH
20162: LD_EXP 3
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 21
20173: PUSH
20174: LD_INT 1
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: PPUSH
20186: CALL_OW 69
20190: PPUSH
20191: CALL_OW 43
// SaveCharacters ( John , JMM ) ;
20195: LD_EXP 7
20199: PPUSH
20200: LD_STRING JMM
20202: PPUSH
20203: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
20207: LD_EXP 9
20211: PPUSH
20212: LD_STRING Bobby
20214: PPUSH
20215: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
20219: LD_EXP 8
20223: PPUSH
20224: LD_STRING Cyrus
20226: PPUSH
20227: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
20231: LD_EXP 12
20235: PPUSH
20236: LD_STRING Lisa
20238: PPUSH
20239: CALL_OW 38
// if GetSide ( Khatam ) <> americans then
20243: LD_EXP 10
20247: PPUSH
20248: CALL_OW 255
20252: PUSH
20253: LD_EXP 3
20257: NONEQUAL
20258: IFFALSE 20272
// SetLives ( Khatam , 0 ) ;
20260: LD_EXP 10
20264: PPUSH
20265: LD_INT 0
20267: PPUSH
20268: CALL_OW 234
// SaveCharacters ( Khatam , Khatam ) ;
20272: LD_EXP 10
20276: PPUSH
20277: LD_STRING Khatam
20279: PPUSH
20280: CALL_OW 38
// if not ( Mikhail_status in [ 1 , 4 , 5 ] ) then
20284: LD_LOC 4
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: LD_INT 4
20294: PUSH
20295: LD_INT 5
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: IN
20303: NOT
20304: IFFALSE 20318
// SetLives ( Mikhail , 0 ) ;
20306: LD_EXP 65
20310: PPUSH
20311: LD_INT 0
20313: PPUSH
20314: CALL_OW 234
// SaveCharacters ( Mikhail , Mikhail ) ;
20318: LD_EXP 65
20322: PPUSH
20323: LD_STRING Mikhail
20325: PPUSH
20326: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) diff [ John , Bobby , Cyrus , Lisa , Khatam , Mikhail ] , other_survivors ) ;
20330: LD_INT 50
20332: PUSH
20333: EMPTY
20334: LIST
20335: PUSH
20336: LD_INT 22
20338: PUSH
20339: LD_EXP 3
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 21
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: PPUSH
20363: CALL_OW 69
20367: PUSH
20368: LD_EXP 7
20372: PUSH
20373: LD_EXP 9
20377: PUSH
20378: LD_EXP 8
20382: PUSH
20383: LD_EXP 12
20387: PUSH
20388: LD_EXP 10
20392: PUSH
20393: LD_EXP 65
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: DIFF
20406: PPUSH
20407: LD_STRING other_survivors
20409: PPUSH
20410: CALL_OW 38
// SaveVariable ( GetResourceType ( dep1 , mat_cans ) , us2cans ) ;
20414: LD_INT 1
20416: PPUSH
20417: LD_INT 1
20419: PPUSH
20420: CALL_OW 275
20424: PPUSH
20425: LD_STRING us2cans
20427: PPUSH
20428: CALL_OW 39
// SaveVariable ( JMMInVehicle , us2JMMInVehicle ) ;
20432: LD_EXP 118
20436: PPUSH
20437: LD_STRING us2JMMInVehicle
20439: PPUSH
20440: CALL_OW 39
// SaveVariable ( CyrusInVehicle , us2CyrusInVehicle ) ;
20444: LD_EXP 119
20448: PPUSH
20449: LD_STRING us2CyrusInVehicle
20451: PPUSH
20452: CALL_OW 39
// SaveVariable ( Mikhail_status , us2mikhail_state ) ;
20456: LD_LOC 4
20460: PPUSH
20461: LD_STRING us2mikhail_state
20463: PPUSH
20464: CALL_OW 39
// YouWin ;
20468: CALL_OW 103
// end ;
20472: PPOPN 4
20474: END
// on DialogueSkipped ( i ) do begin Skip = true ;
20475: LD_ADDR_EXP 102
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// end ;
20483: PPOPN 1
20485: END
// on LeaveBuilding ( building , Un ) do var answer ;
20486: LD_INT 0
20488: PPUSH
// begin if ( building = dep1 ) and ( Un = Mikhail ) and Mikhails_Escape_Disabled then
20489: LD_VAR 0 1
20493: PUSH
20494: LD_INT 1
20496: EQUAL
20497: PUSH
20498: LD_VAR 0 2
20502: PUSH
20503: LD_EXP 65
20507: EQUAL
20508: AND
20509: PUSH
20510: LD_EXP 91
20514: AND
20515: IFFALSE 20889
// begin SetSide ( Mikhail , russians1 ) ;
20517: LD_EXP 65
20521: PPUSH
20522: LD_EXP 6
20526: PPUSH
20527: CALL_OW 235
// Mikhail_in_depot = false ;
20531: LD_ADDR_EXP 39
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// answer = Query ( QMikh2 ) ;
20539: LD_ADDR_VAR 0 3
20543: PUSH
20544: LD_STRING QMikh2
20546: PPUSH
20547: CALL_OW 97
20551: ST_TO_ADDR
// case answer of 1 :
20552: LD_VAR 0 3
20556: PUSH
20557: LD_INT 1
20559: DOUBLE
20560: EQUAL
20561: IFTRUE 20565
20563: GO 20699
20565: POP
// begin Mikhails_Escape_Disabled = false ;
20566: LD_ADDR_EXP 91
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// target_of_escape = [ 4 , 6 ] ;
20574: LD_ADDR_LOC 10
20578: PUSH
20579: LD_INT 4
20581: PUSH
20582: LD_INT 6
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: ST_TO_ADDR
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
20589: LD_EXP 65
20593: PPUSH
20594: LD_INT 52
20596: PPUSH
20597: LD_INT 13
20599: PPUSH
20600: LD_INT 0
20602: PPUSH
20603: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
20607: LD_ADDR_EXP 50
20611: PUSH
20612: LD_EXP 65
20616: PPUSH
20617: CALL_OW 256
20621: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
20622: LD_EXP 45
20626: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
20627: LD_EXP 3
20631: PPUSH
20632: LD_EXP 6
20636: PPUSH
20637: LD_INT 2
20639: PPUSH
20640: LD_INT 1
20642: PPUSH
20643: CALL_OW 80
// SetSide ( Mikhail , russians1 ) ;
20647: LD_EXP 65
20651: PPUSH
20652: LD_EXP 6
20656: PPUSH
20657: CALL_OW 235
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
20661: LD_EXP 65
20665: PPUSH
20666: LD_LOC 10
20670: PUSH
20671: LD_INT 1
20673: ARRAY
20674: PPUSH
20675: LD_LOC 10
20679: PUSH
20680: LD_INT 2
20682: ARRAY
20683: PPUSH
20684: CALL_OW 171
// AddComHold ( Mikhail ) ;
20688: LD_EXP 65
20692: PPUSH
20693: CALL_OW 200
// end ; 2 :
20697: GO 20889
20699: LD_INT 2
20701: DOUBLE
20702: EQUAL
20703: IFTRUE 20707
20705: GO 20831
20707: POP
// begin disable ( great_escape ) ;
20708: LD_EXP 40
20712: DISABLE_MARKED
// wait ( 0 0$2 ) ;
20713: LD_INT 70
20715: PPUSH
20716: CALL_OW 67
// repeat ComMoveXY ( Mikhail , 52 , 13 ) ;
20720: LD_EXP 65
20724: PPUSH
20725: LD_INT 52
20727: PPUSH
20728: LD_INT 13
20730: PPUSH
20731: CALL_OW 111
// AddComHold ( Mikhail ) ;
20735: LD_EXP 65
20739: PPUSH
20740: CALL_OW 200
// wait ( 0 0$0.5 ) ;
20744: LD_INT 18
20746: PPUSH
20747: CALL_OW 67
// until IsAt ( Mikhail , 52 , 13 ) ;
20751: LD_EXP 65
20755: PPUSH
20756: LD_INT 52
20758: PPUSH
20759: LD_INT 13
20761: PPUSH
20762: CALL_OW 307
20766: IFFALSE 20720
// SetSide ( Mikhail , americans ) ;
20768: LD_EXP 65
20772: PPUSH
20773: LD_EXP 3
20777: PPUSH
20778: CALL_OW 235
// repeat ComEnterUnit ( Mikhail , dep1 ) ;
20782: LD_EXP 65
20786: PPUSH
20787: LD_INT 1
20789: PPUSH
20790: CALL_OW 120
// Wait ( 1 ) ;
20794: LD_INT 1
20796: PPUSH
20797: CALL_OW 67
// until IsInUnit ( Mikhail ) = dep1 ;
20801: LD_EXP 65
20805: PPUSH
20806: CALL_OW 310
20810: PUSH
20811: LD_INT 1
20813: EQUAL
20814: IFFALSE 20782
// Mikhail_in_depot = true ;
20816: LD_ADDR_EXP 39
20820: PUSH
20821: LD_INT 1
20823: ST_TO_ADDR
// enable ( great_escape ) ;
20824: LD_EXP 40
20828: ENABLE_MARKED
// end ; 3 :
20829: GO 20889
20831: LD_INT 3
20833: DOUBLE
20834: EQUAL
20835: IFTRUE 20839
20837: GO 20888
20839: POP
// begin ComMoveXY ( Mikhail , 4 , 6 ) ;
20840: LD_EXP 65
20844: PPUSH
20845: LD_INT 4
20847: PPUSH
20848: LD_INT 6
20850: PPUSH
20851: CALL_OW 111
// AddComHold ( Mikhail ) ;
20855: LD_EXP 65
20859: PPUSH
20860: CALL_OW 200
// enable ( remove_mikhail ) ;
20864: LD_EXP 43
20868: ENABLE_MARKED
// Mikhails_outcome = - 1 ;
20869: LD_ADDR_LOC 3
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: ST_TO_ADDR
// Mikhail_status := 1 ;
20878: LD_ADDR_LOC 4
20882: PUSH
20883: LD_INT 1
20885: ST_TO_ADDR
// end ; end ;
20886: GO 20889
20888: POP
// end ; end ;
20889: PPOPN 3
20891: END
// on BuildingCaptured ( build , origside , eng ) do begin if ( build = lab1 ) and ( origside = russians ) then
20892: LD_VAR 0 1
20896: PUSH
20897: LD_INT 23
20899: EQUAL
20900: PUSH
20901: LD_VAR 0 2
20905: PUSH
20906: LD_EXP 5
20910: EQUAL
20911: AND
20912: IFFALSE 20922
// begin Hint ( Lab ) ;
20914: LD_STRING Lab
20916: PPUSH
20917: CALL_OW 339
// disable ;
20921: DISABLE
// end ; end ;
20922: PPOPN 3
20924: END
// on HumanDestroyed ( un , side , nation , x , y , direction , sex , class ) do begin if side = americans then
20925: LD_VAR 0 2
20929: PUSH
20930: LD_EXP 3
20934: EQUAL
20935: IFFALSE 20951
// lost_units = lost_units + 1 ;
20937: LD_ADDR_EXP 90
20941: PUSH
20942: LD_EXP 90
20946: PUSH
20947: LD_INT 1
20949: PLUS
20950: ST_TO_ADDR
// end ; end_of_file
20951: PPOPN 8
20953: END
// export count5 ; export Brestworks ; export RusN_States ; export RusN ; export function InitNorthBase ; var Un ; begin
20954: LD_INT 0
20956: PPUSH
20957: PPUSH
// RusN_States = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
20958: LD_ADDR_EXP 122
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: ST_TO_ADDR
// RusN = [ RusNSo1 , RusNSo2 , RusNSo3 , RusNSo4 , guard1 , guard2 , RusNE1 , RusNSc1 , RusNSo5 , RusNSo6 ] ;
21009: LD_ADDR_EXP 123
21013: PUSH
21014: LD_INT 3
21016: PUSH
21017: LD_INT 14
21019: PUSH
21020: LD_INT 27
21022: PUSH
21023: LD_INT 28
21025: PUSH
21026: LD_INT 11
21028: PUSH
21029: LD_INT 12
21031: PUSH
21032: LD_INT 26
21034: PUSH
21035: LD_INT 25
21037: PUSH
21038: LD_INT 24
21040: PUSH
21041: LD_INT 31
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: ST_TO_ADDR
// count5 = 0 ;
21056: LD_ADDR_EXP 120
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// Brestworks = [ Brw1 , Brw2 ] ;
21064: LD_ADDR_EXP 121
21068: PUSH
21069: LD_INT 29
21071: PUSH
21072: LD_INT 9
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: ST_TO_ADDR
// for Un in RusN do
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: LD_EXP 123
21088: PUSH
21089: FOR_IN
21090: IFFALSE 21103
// ComRemember ( Un ) ;
21092: LD_VAR 0 2
21096: PPUSH
21097: CALL_OW 143
21101: GO 21089
21103: POP
21104: POP
// if not ( IsDead ( Brw1 ) ) then
21105: LD_INT 29
21107: PPUSH
21108: CALL_OW 301
21112: NOT
21113: IFFALSE 21125
// ComEnterUnit ( Guard1 , Brw1 ) ;
21115: LD_INT 11
21117: PPUSH
21118: LD_INT 29
21120: PPUSH
21121: CALL_OW 120
// if not ( IsDead ( Brw2 ) ) then
21125: LD_INT 9
21127: PPUSH
21128: CALL_OW 301
21132: NOT
21133: IFFALSE 21145
// ComEnterUnit ( Guard2 , Brw2 ) ;
21135: LD_INT 12
21137: PPUSH
21138: LD_INT 9
21140: PPUSH
21141: CALL_OW 120
// if not ( IsDead ( Brw3 ) ) then
21145: LD_INT 30
21147: PPUSH
21148: CALL_OW 301
21152: NOT
21153: IFFALSE 21165
// ComEnterUnit ( Guard3 , Brw3 ) ;
21155: LD_INT 7
21157: PPUSH
21158: LD_INT 30
21160: PPUSH
21161: CALL_OW 120
// end ;
21165: LD_VAR 0 1
21169: RET
// export function WaitJob ( list_of_units , reaction ) ; var i , busy ; begin
21170: LD_INT 0
21172: PPUSH
21173: PPUSH
21174: PPUSH
// wait ( 2 ) ;
21175: LD_INT 2
21177: PPUSH
21178: CALL_OW 67
// repeat busy = false ;
21182: LD_ADDR_VAR 0 5
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// for i in list_of_units do
21190: LD_ADDR_VAR 0 4
21194: PUSH
21195: LD_VAR 0 1
21199: PUSH
21200: FOR_IN
21201: IFFALSE 21235
// if IsOk ( i ) then
21203: LD_VAR 0 4
21207: PPUSH
21208: CALL_OW 302
21212: IFFALSE 21233
// if IsBusy ( i ) then
21214: LD_VAR 0 4
21218: PPUSH
21219: CALL_OW 315
21223: IFFALSE 21233
// busy = true ;
21225: LD_ADDR_VAR 0 5
21229: PUSH
21230: LD_INT 1
21232: ST_TO_ADDR
21233: GO 21200
21235: POP
21236: POP
// if busy then
21237: LD_VAR 0 5
21241: IFFALSE 21256
// wait ( 0 0$1 * reaction ) ;
21243: LD_INT 35
21245: PUSH
21246: LD_VAR 0 2
21250: MUL
21251: PPUSH
21252: CALL_OW 67
// until not ( busy ) ;
21256: LD_VAR 0 5
21260: NOT
21261: IFFALSE 21182
// end ;
21263: LD_VAR 0 3
21267: RET
// function WaitNearUnit ( target_unit , dist , list_of_units , reaction ) ; var i , are_near ; begin
21268: LD_INT 0
21270: PPUSH
21271: PPUSH
21272: PPUSH
// wait ( 2 ) ;
21273: LD_INT 2
21275: PPUSH
21276: CALL_OW 67
// repeat are_near = true ;
21280: LD_ADDR_VAR 0 7
21284: PUSH
21285: LD_INT 1
21287: ST_TO_ADDR
// for i in list_of_units do
21288: LD_ADDR_VAR 0 6
21292: PUSH
21293: LD_VAR 0 3
21297: PUSH
21298: FOR_IN
21299: IFFALSE 21355
// if IsOk ( i ) and IsOk ( target_unit ) then
21301: LD_VAR 0 6
21305: PPUSH
21306: CALL_OW 302
21310: PUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: CALL_OW 302
21320: AND
21321: IFFALSE 21353
// if GetDistUnits ( target_unit , i ) > dist then
21323: LD_VAR 0 1
21327: PPUSH
21328: LD_VAR 0 6
21332: PPUSH
21333: CALL_OW 296
21337: PUSH
21338: LD_VAR 0 2
21342: GREATER
21343: IFFALSE 21353
// are_near = false ;
21345: LD_ADDR_VAR 0 7
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
21353: GO 21298
21355: POP
21356: POP
// if not ( are_near ) then
21357: LD_VAR 0 7
21361: NOT
21362: IFFALSE 21377
// wait ( 0 0$1 * reaction ) ;
21364: LD_INT 35
21366: PUSH
21367: LD_VAR 0 4
21371: MUL
21372: PPUSH
21373: CALL_OW 67
// until are_near ;
21377: LD_VAR 0 7
21381: IFFALSE 21280
// end ;
21383: LD_VAR 0 5
21387: RET
// every 0 0$1 do var Un , hlp ;
21388: GO 21390
21390: DISABLE
21391: LD_INT 0
21393: PPUSH
21394: PPUSH
// begin hlp = UnitFilter ( RusN , [ [ f_alive ] , [ f_placed ] ] ) ;
21395: LD_ADDR_VAR 0 2
21399: PUSH
21400: LD_EXP 123
21404: PPUSH
21405: LD_INT 51
21407: PUSH
21408: EMPTY
21409: LIST
21410: PUSH
21411: LD_INT 52
21413: PUSH
21414: EMPTY
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PPUSH
21421: CALL_OW 72
21425: ST_TO_ADDR
// RusN = hlp ;
21426: LD_ADDR_EXP 123
21430: PUSH
21431: LD_VAR 0 2
21435: ST_TO_ADDR
// for Un in RusN do
21436: LD_ADDR_VAR 0 1
21440: PUSH
21441: LD_EXP 123
21445: PUSH
21446: FOR_IN
21447: IFFALSE 21480
// if ( GetDistUnits ( Un , Dep1 ) ) > Attack_Distance then
21449: LD_VAR 0 1
21453: PPUSH
21454: LD_INT 1
21456: PPUSH
21457: CALL_OW 296
21461: PUSH
21462: LD_EXP 85
21466: GREATER
21467: IFFALSE 21478
// ComReturn ( Un ) ;
21469: LD_VAR 0 1
21473: PPUSH
21474: CALL_OW 144
21478: GO 21446
21480: POP
21481: POP
// if RusN <> 0 then
21482: LD_EXP 123
21486: PUSH
21487: LD_INT 0
21489: NONEQUAL
21490: IFFALSE 21493
// enable ;
21492: ENABLE
// end ;
21493: PPOPN 2
21495: END
// function Go_to_physician ( ill_unit ) ; var start_posX , start_posY ; begin
21496: LD_INT 0
21498: PPUSH
21499: PPUSH
21500: PPUSH
// if IsOk ( RusNSc1 ) and IsLive ( ill_unit ) then
21501: LD_INT 25
21503: PPUSH
21504: CALL_OW 302
21508: PUSH
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 300
21518: AND
21519: IFFALSE 21709
// begin start_posX = GetX ( ill_unit ) ;
21521: LD_ADDR_VAR 0 3
21525: PUSH
21526: LD_VAR 0 1
21530: PPUSH
21531: CALL_OW 250
21535: ST_TO_ADDR
// start_posY = GetY ( ill_unit ) ;
21536: LD_ADDR_VAR 0 4
21540: PUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 251
21550: ST_TO_ADDR
// ComMoveXY ( ill_unit , 54 , 16 ) ;
21551: LD_VAR 0 1
21555: PPUSH
21556: LD_INT 54
21558: PPUSH
21559: LD_INT 16
21561: PPUSH
21562: CALL_OW 111
// AddComMoveUnit ( ill_unit , RusNSc1 ) ;
21566: LD_VAR 0 1
21570: PPUSH
21571: LD_INT 25
21573: PPUSH
21574: CALL_OW 172
// WaitNearUnit ( RusNSc1 , 2 , [ ill_unit ] , 0.5 ) ;
21578: LD_INT 25
21580: PPUSH
21581: LD_INT 2
21583: PPUSH
21584: LD_VAR 0 1
21588: PUSH
21589: EMPTY
21590: LIST
21591: PPUSH
21592: LD_REAL  5.00000000000000E-0001
21595: PPUSH
21596: CALL 21268 0 4
// while ( RusN_States [ 9 ] <> 0 ) do
21600: LD_EXP 122
21604: PUSH
21605: LD_INT 9
21607: ARRAY
21608: PUSH
21609: LD_INT 0
21611: NONEQUAL
21612: IFFALSE 21623
// wait ( 1 ) ;
21614: LD_INT 1
21616: PPUSH
21617: CALL_OW 67
21621: GO 21600
// Replace ( RusN_States , 9 , 1 ) ;
21623: LD_EXP 122
21627: PPUSH
21628: LD_INT 9
21630: PPUSH
21631: LD_INT 1
21633: PPUSH
21634: CALL_OW 1
// ComHeal ( RusNSc1 , ill_unit ) ;
21638: LD_INT 25
21640: PPUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 128
// WaitJob ( RusNSc1 , 0.5 ) ;
21650: LD_INT 25
21652: PPUSH
21653: LD_REAL  5.00000000000000E-0001
21656: PPUSH
21657: CALL 21170 0 2
// AddComReturn ( RusNSc1 ) ;
21661: LD_INT 25
21663: PPUSH
21664: CALL_OW 204
// AddComHold ( RusNSc1 ) ;
21668: LD_INT 25
21670: PPUSH
21671: CALL_OW 200
// Replace ( RusN_States , 9 , 0 ) ;
21675: LD_EXP 122
21679: PPUSH
21680: LD_INT 9
21682: PPUSH
21683: LD_INT 0
21685: PPUSH
21686: CALL_OW 1
// AddComMoveXY ( ill_unit , start_posX , start_posY ) ;
21690: LD_VAR 0 1
21694: PPUSH
21695: LD_VAR 0 3
21699: PPUSH
21700: LD_VAR 0 4
21704: PPUSH
21705: CALL_OW 171
// end ; end ;
21709: LD_VAR 0 2
21713: RET
// function Healing_Person ( person , lives ) ; begin
21714: LD_INT 0
21716: PPUSH
// if GetLives ( person ) < lives then
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 256
21726: PUSH
21727: LD_VAR 0 2
21731: LESS
21732: IFFALSE 22117
// begin if person = RusNSo1 then
21734: LD_VAR 0 1
21738: PUSH
21739: LD_INT 3
21741: EQUAL
21742: IFFALSE 21761
// Replace ( RusN_States , 1 , 2 ) else
21744: LD_EXP 122
21748: PPUSH
21749: LD_INT 1
21751: PPUSH
21752: LD_INT 2
21754: PPUSH
21755: CALL_OW 1
21759: GO 21921
// if person = RusNSo2 then
21761: LD_VAR 0 1
21765: PUSH
21766: LD_INT 14
21768: EQUAL
21769: IFFALSE 21788
// Replace ( RusN_States , 2 , 2 ) else
21771: LD_EXP 122
21775: PPUSH
21776: LD_INT 2
21778: PPUSH
21779: LD_INT 2
21781: PPUSH
21782: CALL_OW 1
21786: GO 21921
// if person = RusNSo3 then
21788: LD_VAR 0 1
21792: PUSH
21793: LD_INT 27
21795: EQUAL
21796: IFFALSE 21815
// Replace ( RusN_States , 3 , 2 ) else
21798: LD_EXP 122
21802: PPUSH
21803: LD_INT 3
21805: PPUSH
21806: LD_INT 2
21808: PPUSH
21809: CALL_OW 1
21813: GO 21921
// if person = RusNSo4 then
21815: LD_VAR 0 1
21819: PUSH
21820: LD_INT 28
21822: EQUAL
21823: IFFALSE 21842
// Replace ( RusN_States , 4 , 2 ) else
21825: LD_EXP 122
21829: PPUSH
21830: LD_INT 4
21832: PPUSH
21833: LD_INT 2
21835: PPUSH
21836: CALL_OW 1
21840: GO 21921
// if person = RusNE1 then
21842: LD_VAR 0 1
21846: PUSH
21847: LD_INT 26
21849: EQUAL
21850: IFFALSE 21869
// Replace ( RusN_States , 8 , 2 ) else
21852: LD_EXP 122
21856: PPUSH
21857: LD_INT 8
21859: PPUSH
21860: LD_INT 2
21862: PPUSH
21863: CALL_OW 1
21867: GO 21921
// if person = RusNSo5 then
21869: LD_VAR 0 1
21873: PUSH
21874: LD_INT 24
21876: EQUAL
21877: IFFALSE 21896
// Replace ( RusN_States , 10 , 2 ) else
21879: LD_EXP 122
21883: PPUSH
21884: LD_INT 10
21886: PPUSH
21887: LD_INT 2
21889: PPUSH
21890: CALL_OW 1
21894: GO 21921
// if person = RusNSo6 then
21896: LD_VAR 0 1
21900: PUSH
21901: LD_INT 31
21903: EQUAL
21904: IFFALSE 21921
// Replace ( RusN_States , 11 , 2 ) ;
21906: LD_EXP 122
21910: PPUSH
21911: LD_INT 11
21913: PPUSH
21914: LD_INT 2
21916: PPUSH
21917: CALL_OW 1
// Go_to_physician ( person ) ;
21921: LD_VAR 0 1
21925: PPUSH
21926: CALL 21496 0 1
// if person = RusNSo1 then
21930: LD_VAR 0 1
21934: PUSH
21935: LD_INT 3
21937: EQUAL
21938: IFFALSE 21957
// Replace ( RusN_States , 1 , 0 ) else
21940: LD_EXP 122
21944: PPUSH
21945: LD_INT 1
21947: PPUSH
21948: LD_INT 0
21950: PPUSH
21951: CALL_OW 1
21955: GO 22117
// if person = RusNSo2 then
21957: LD_VAR 0 1
21961: PUSH
21962: LD_INT 14
21964: EQUAL
21965: IFFALSE 21984
// Replace ( RusN_States , 2 , 0 ) else
21967: LD_EXP 122
21971: PPUSH
21972: LD_INT 2
21974: PPUSH
21975: LD_INT 0
21977: PPUSH
21978: CALL_OW 1
21982: GO 22117
// if person = RusNSo3 then
21984: LD_VAR 0 1
21988: PUSH
21989: LD_INT 27
21991: EQUAL
21992: IFFALSE 22011
// Replace ( RusN_States , 3 , 0 ) else
21994: LD_EXP 122
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: LD_INT 0
22004: PPUSH
22005: CALL_OW 1
22009: GO 22117
// if person = RusNSo4 then
22011: LD_VAR 0 1
22015: PUSH
22016: LD_INT 28
22018: EQUAL
22019: IFFALSE 22038
// Replace ( RusN_States , 4 , 0 ) else
22021: LD_EXP 122
22025: PPUSH
22026: LD_INT 4
22028: PPUSH
22029: LD_INT 0
22031: PPUSH
22032: CALL_OW 1
22036: GO 22117
// if person = RusNE1 then
22038: LD_VAR 0 1
22042: PUSH
22043: LD_INT 26
22045: EQUAL
22046: IFFALSE 22065
// Replace ( RusN_States , 8 , 0 ) else
22048: LD_EXP 122
22052: PPUSH
22053: LD_INT 8
22055: PPUSH
22056: LD_INT 0
22058: PPUSH
22059: CALL_OW 1
22063: GO 22117
// if person = RusNSo5 then
22065: LD_VAR 0 1
22069: PUSH
22070: LD_INT 24
22072: EQUAL
22073: IFFALSE 22092
// Replace ( RusN_States , 10 , 0 ) else
22075: LD_EXP 122
22079: PPUSH
22080: LD_INT 10
22082: PPUSH
22083: LD_INT 0
22085: PPUSH
22086: CALL_OW 1
22090: GO 22117
// if person = RusNSo6 then
22092: LD_VAR 0 1
22096: PUSH
22097: LD_INT 31
22099: EQUAL
22100: IFFALSE 22117
// Replace ( RusN_States , 11 , 0 ) ;
22102: LD_EXP 122
22106: PPUSH
22107: LD_INT 11
22109: PPUSH
22110: LD_INT 0
22112: PPUSH
22113: CALL_OW 1
// end ; end ;
22117: LD_VAR 0 3
22121: RET
// function Select_Unit_With_Min_Lives ( list_of_units , at_least ) ; var i , j , lives , selected_unit , min ; begin
22122: LD_INT 0
22124: PPUSH
22125: PPUSH
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
// selected_unit = 0 ;
22130: LD_ADDR_VAR 0 7
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// j = 0 ;
22138: LD_ADDR_VAR 0 5
22142: PUSH
22143: LD_INT 0
22145: ST_TO_ADDR
// min = 1000 ;
22146: LD_ADDR_VAR 0 8
22150: PUSH
22151: LD_INT 1000
22153: ST_TO_ADDR
// for i in list_of_units do
22154: LD_ADDR_VAR 0 4
22158: PUSH
22159: LD_VAR 0 1
22163: PUSH
22164: FOR_IN
22165: IFFALSE 22242
// begin j = j + 1 ;
22167: LD_ADDR_VAR 0 5
22171: PUSH
22172: LD_VAR 0 5
22176: PUSH
22177: LD_INT 1
22179: PLUS
22180: ST_TO_ADDR
// lives = GetLives ( i ) ;
22181: LD_ADDR_VAR 0 6
22185: PUSH
22186: LD_VAR 0 4
22190: PPUSH
22191: CALL_OW 256
22195: ST_TO_ADDR
// if ( lives > at_least ) and ( lives < min ) then
22196: LD_VAR 0 6
22200: PUSH
22201: LD_VAR 0 2
22205: GREATER
22206: PUSH
22207: LD_VAR 0 6
22211: PUSH
22212: LD_VAR 0 8
22216: LESS
22217: AND
22218: IFFALSE 22240
// begin min = lives ;
22220: LD_ADDR_VAR 0 8
22224: PUSH
22225: LD_VAR 0 6
22229: ST_TO_ADDR
// selected_unit = j ;
22230: LD_ADDR_VAR 0 7
22234: PUSH
22235: LD_VAR 0 5
22239: ST_TO_ADDR
// end ; end ;
22240: GO 22164
22242: POP
22243: POP
// result = selected_unit ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_VAR 0 7
22253: ST_TO_ADDR
// end ;
22254: LD_VAR 0 3
22258: RET
// every 0 0$1 do var un_min_lives ;
22259: GO 22261
22261: DISABLE
22262: LD_INT 0
22264: PPUSH
// begin case RusN_States [ 8 ] of 0 :
22265: LD_EXP 122
22269: PUSH
22270: LD_INT 8
22272: ARRAY
22273: PUSH
22274: LD_INT 0
22276: DOUBLE
22277: EQUAL
22278: IFTRUE 22282
22280: GO 22384
22282: POP
// begin Healing_Person ( RusNE1 , 600 ) ;
22283: LD_INT 26
22285: PPUSH
22286: LD_INT 600
22288: PPUSH
22289: CALL 21714 0 2
// if count5 = 0 then
22293: LD_EXP 120
22297: PUSH
22298: LD_INT 0
22300: EQUAL
22301: IFFALSE 22382
// begin un_min_lives = Select_Unit_With_Min_Lives ( Brestworks , 100 ) ;
22303: LD_ADDR_VAR 0 1
22307: PUSH
22308: LD_EXP 121
22312: PPUSH
22313: LD_INT 100
22315: PPUSH
22316: CALL 22122 0 2
22320: ST_TO_ADDR
// if GetLives ( Brestworks [ un_min_lives ] ) < 1000 then
22321: LD_EXP 121
22325: PUSH
22326: LD_VAR 0 1
22330: ARRAY
22331: PPUSH
22332: CALL_OW 256
22336: PUSH
22337: LD_INT 1000
22339: LESS
22340: IFFALSE 22382
// begin ComStop ( RusNE1 ) ;
22342: LD_INT 26
22344: PPUSH
22345: CALL_OW 141
// ComRepairBuilding ( RusNE1 , Brestworks [ un_min_lives ] ) ;
22349: LD_INT 26
22351: PPUSH
22352: LD_EXP 121
22356: PUSH
22357: LD_VAR 0 1
22361: ARRAY
22362: PPUSH
22363: CALL_OW 130
// Replace ( RusN_States , 8 , 1 ) ;
22367: LD_EXP 122
22371: PPUSH
22372: LD_INT 8
22374: PPUSH
22375: LD_INT 1
22377: PPUSH
22378: CALL_OW 1
// end ; end ; end ; 1 :
22382: GO 22438
22384: LD_INT 1
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22437
22392: POP
// begin Healing_Person ( RusNE1 , 600 ) ;
22393: LD_INT 26
22395: PPUSH
22396: LD_INT 600
22398: PPUSH
22399: CALL 21714 0 2
// if not ( IsBusy ( RusNE1 ) ) then
22403: LD_INT 26
22405: PPUSH
22406: CALL_OW 315
22410: NOT
22411: IFFALSE 22435
// begin ComReturn ( RusNE1 ) ;
22413: LD_INT 26
22415: PPUSH
22416: CALL_OW 144
// Replace ( RusN_States , 8 , 0 ) ;
22420: LD_EXP 122
22424: PPUSH
22425: LD_INT 8
22427: PPUSH
22428: LD_INT 0
22430: PPUSH
22431: CALL_OW 1
// end ; end ; end ;
22435: GO 22438
22437: POP
// if IsLive ( RusNE1 ) then
22438: LD_INT 26
22440: PPUSH
22441: CALL_OW 300
22445: IFFALSE 22448
// enable ;
22447: ENABLE
// end ;
22448: PPOPN 1
22450: END
// every 0 0$1 do
22451: GO 22453
22453: DISABLE
// begin case RusN_States [ 5 ] of 0 :
22454: LD_EXP 122
22458: PUSH
22459: LD_INT 5
22461: ARRAY
22462: PUSH
22463: LD_INT 0
22465: DOUBLE
22466: EQUAL
22467: IFTRUE 22471
22469: GO 22499
22471: POP
// if not ( IsOk ( Brw1 ) ) then
22472: LD_INT 29
22474: PPUSH
22475: CALL_OW 302
22479: NOT
22480: IFFALSE 22497
// Replace ( RusN_States , 5 , 1 ) ; 1 :
22482: LD_EXP 122
22486: PPUSH
22487: LD_INT 5
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 1
22497: GO 22566
22499: LD_INT 1
22501: DOUBLE
22502: EQUAL
22503: IFTRUE 22507
22505: GO 22565
22507: POP
// begin if GetLives ( [ guard1 ] ) < Lives_to_Retreat then
22508: LD_INT 11
22510: PUSH
22511: EMPTY
22512: LIST
22513: PPUSH
22514: CALL_OW 256
22518: PUSH
22519: LD_EXP 89
22523: LESS
22524: IFFALSE 22563
// begin Replace ( RusN_States , 5 , 2 ) ;
22526: LD_EXP 122
22530: PPUSH
22531: LD_INT 5
22533: PPUSH
22534: LD_INT 2
22536: PPUSH
22537: CALL_OW 1
// Go_to_physician ( guard1 ) ;
22541: LD_INT 11
22543: PPUSH
22544: CALL 21496 0 1
// Replace ( RusN_States , 5 , 1 ) ;
22548: LD_EXP 122
22552: PPUSH
22553: LD_INT 5
22555: PPUSH
22556: LD_INT 1
22558: PPUSH
22559: CALL_OW 1
// end ; end ; end ;
22563: GO 22566
22565: POP
// if IsLive ( guard1 ) then
22566: LD_INT 11
22568: PPUSH
22569: CALL_OW 300
22573: IFFALSE 22576
// enable ;
22575: ENABLE
// end ;
22576: END
// every 0 0$1 do
22577: GO 22579
22579: DISABLE
// begin case RusN_States [ 6 ] of 0 :
22580: LD_EXP 122
22584: PUSH
22585: LD_INT 6
22587: ARRAY
22588: PUSH
22589: LD_INT 0
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22625
22597: POP
// if not ( IsOk ( Brw2 ) ) then
22598: LD_INT 9
22600: PPUSH
22601: CALL_OW 302
22605: NOT
22606: IFFALSE 22623
// Replace ( RusN_States , 6 , 1 ) ; 1 :
22608: LD_EXP 122
22612: PPUSH
22613: LD_INT 6
22615: PPUSH
22616: LD_INT 1
22618: PPUSH
22619: CALL_OW 1
22623: GO 22692
22625: LD_INT 1
22627: DOUBLE
22628: EQUAL
22629: IFTRUE 22633
22631: GO 22691
22633: POP
// begin if GetLives ( [ guard2 ] ) < Lives_to_Retreat then
22634: LD_INT 12
22636: PUSH
22637: EMPTY
22638: LIST
22639: PPUSH
22640: CALL_OW 256
22644: PUSH
22645: LD_EXP 89
22649: LESS
22650: IFFALSE 22689
// begin Replace ( RusN_States , 6 , 2 ) ;
22652: LD_EXP 122
22656: PPUSH
22657: LD_INT 6
22659: PPUSH
22660: LD_INT 2
22662: PPUSH
22663: CALL_OW 1
// Go_to_physician ( guard2 ) ;
22667: LD_INT 12
22669: PPUSH
22670: CALL 21496 0 1
// Replace ( RusN_States , 6 , 1 ) ;
22674: LD_EXP 122
22678: PPUSH
22679: LD_INT 6
22681: PPUSH
22682: LD_INT 1
22684: PPUSH
22685: CALL_OW 1
// end ; end ; end ;
22689: GO 22692
22691: POP
// if IsLive ( guard2 ) then
22692: LD_INT 12
22694: PPUSH
22695: CALL_OW 300
22699: IFFALSE 22702
// enable ;
22701: ENABLE
// end ;
22702: END
// every 0 0$1 do
22703: GO 22705
22705: DISABLE
// begin case RusN_States [ 7 ] of 0 :
22706: LD_EXP 122
22710: PUSH
22711: LD_INT 7
22713: ARRAY
22714: PUSH
22715: LD_INT 0
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22751
22723: POP
// if not ( IsOk ( Brw3 ) ) then
22724: LD_INT 30
22726: PPUSH
22727: CALL_OW 302
22731: NOT
22732: IFFALSE 22749
// Replace ( RusN_States , 7 , 1 ) ; 1 :
22734: LD_EXP 122
22738: PPUSH
22739: LD_INT 7
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: CALL_OW 1
22749: GO 22818
22751: LD_INT 1
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22817
22759: POP
// begin if GetLives ( [ guard3 ] ) < Lives_to_Retreat then
22760: LD_INT 7
22762: PUSH
22763: EMPTY
22764: LIST
22765: PPUSH
22766: CALL_OW 256
22770: PUSH
22771: LD_EXP 89
22775: LESS
22776: IFFALSE 22815
// begin Replace ( RusN_States , 7 , 2 ) ;
22778: LD_EXP 122
22782: PPUSH
22783: LD_INT 7
22785: PPUSH
22786: LD_INT 2
22788: PPUSH
22789: CALL_OW 1
// Go_to_physician ( guard3 ) ;
22793: LD_INT 7
22795: PPUSH
22796: CALL 21496 0 1
// Replace ( RusN_States , 7 , 1 ) ;
22800: LD_EXP 122
22804: PPUSH
22805: LD_INT 7
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 1
// end ; end ; end ;
22815: GO 22818
22817: POP
// if IsLive ( guard3 ) then
22818: LD_INT 7
22820: PPUSH
22821: CALL_OW 300
22825: IFFALSE 22828
// enable ;
22827: ENABLE
// end ;
22828: END
// every 0 0$1 do
22829: GO 22831
22831: DISABLE
// begin if RusN_States [ 1 ] = 0 then
22832: LD_EXP 122
22836: PUSH
22837: LD_INT 1
22839: ARRAY
22840: PUSH
22841: LD_INT 0
22843: EQUAL
22844: IFFALSE 22858
// Healing_Person ( RusNSo1 , Lives_to_Retreat ) ;
22846: LD_INT 3
22848: PPUSH
22849: LD_EXP 89
22853: PPUSH
22854: CALL 21714 0 2
// if IsLive ( RusNSo1 ) then
22858: LD_INT 3
22860: PPUSH
22861: CALL_OW 300
22865: IFFALSE 22868
// enable ;
22867: ENABLE
// end ;
22868: END
// every 0 0$1 do
22869: GO 22871
22871: DISABLE
// begin if RusN_States [ 2 ] = 0 then
22872: LD_EXP 122
22876: PUSH
22877: LD_INT 2
22879: ARRAY
22880: PUSH
22881: LD_INT 0
22883: EQUAL
22884: IFFALSE 22898
// Healing_Person ( RusNSo2 , Lives_to_Retreat ) ;
22886: LD_INT 14
22888: PPUSH
22889: LD_EXP 89
22893: PPUSH
22894: CALL 21714 0 2
// if IsLive ( RusNSo2 ) then
22898: LD_INT 14
22900: PPUSH
22901: CALL_OW 300
22905: IFFALSE 22908
// enable ;
22907: ENABLE
// end ;
22908: END
// every 0 0$1 do
22909: GO 22911
22911: DISABLE
// begin if RusN_States [ 3 ] = 0 then
22912: LD_EXP 122
22916: PUSH
22917: LD_INT 3
22919: ARRAY
22920: PUSH
22921: LD_INT 0
22923: EQUAL
22924: IFFALSE 22938
// Healing_Person ( RusNSo3 , Lives_to_Retreat ) ;
22926: LD_INT 27
22928: PPUSH
22929: LD_EXP 89
22933: PPUSH
22934: CALL 21714 0 2
// if IsLive ( RusNSo3 ) then
22938: LD_INT 27
22940: PPUSH
22941: CALL_OW 300
22945: IFFALSE 22948
// enable ;
22947: ENABLE
// end ;
22948: END
// every 0 0$1 do
22949: GO 22951
22951: DISABLE
// begin if RusN_States [ 4 ] = 0 then
22952: LD_EXP 122
22956: PUSH
22957: LD_INT 4
22959: ARRAY
22960: PUSH
22961: LD_INT 0
22963: EQUAL
22964: IFFALSE 22978
// Healing_Person ( RusNSo4 , Lives_to_Retreat ) ;
22966: LD_INT 28
22968: PPUSH
22969: LD_EXP 89
22973: PPUSH
22974: CALL 21714 0 2
// if IsLive ( RusNSo4 ) then
22978: LD_INT 28
22980: PPUSH
22981: CALL_OW 300
22985: IFFALSE 22988
// enable ;
22987: ENABLE
// end ;
22988: END
// every 0 0$1 do
22989: GO 22991
22991: DISABLE
// begin if RusN_States [ 10 ] = 0 then
22992: LD_EXP 122
22996: PUSH
22997: LD_INT 10
22999: ARRAY
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23018
// Healing_Person ( RusNSo5 , Lives_to_Retreat ) ;
23006: LD_INT 24
23008: PPUSH
23009: LD_EXP 89
23013: PPUSH
23014: CALL 21714 0 2
// if IsLive ( RusNSo5 ) then
23018: LD_INT 24
23020: PPUSH
23021: CALL_OW 300
23025: IFFALSE 23028
// enable ;
23027: ENABLE
// end ;
23028: END
// every 0 0$1 do
23029: GO 23031
23031: DISABLE
// begin if RusN_States [ 11 ] = 0 then
23032: LD_EXP 122
23036: PUSH
23037: LD_INT 11
23039: ARRAY
23040: PUSH
23041: LD_INT 0
23043: EQUAL
23044: IFFALSE 23058
// Healing_Person ( RusNSo6 , Lives_to_Retreat ) ;
23046: LD_INT 31
23048: PPUSH
23049: LD_EXP 89
23053: PPUSH
23054: CALL 21714 0 2
// if IsLive ( RusNSo6 ) then
23058: LD_INT 31
23060: PPUSH
23061: CALL_OW 300
23065: IFFALSE 23068
// enable ;
23067: ENABLE
// end ;
23068: END
// every 0 0$1 + 0 0$0.5 do
23069: GO 23071
23071: DISABLE
// begin count5 = ( count5 + 1 ) mod 5 ;
23072: LD_ADDR_EXP 120
23076: PUSH
23077: LD_EXP 120
23081: PUSH
23082: LD_INT 1
23084: PLUS
23085: PUSH
23086: LD_INT 5
23088: MOD
23089: ST_TO_ADDR
// enable ;
23090: ENABLE
// end ; end_of_file
23091: END
// export function SA_MikhailKilled ; begin
23092: LD_INT 0
23094: PPUSH
// SetAchievement ( ACH_NOM ) ;
23095: LD_STRING ACH_NOM
23097: PPUSH
23098: CALL_OW 543
// end ; end_of_file
23102: LD_VAR 0 1
23106: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
23107: LD_INT 0
23109: PPUSH
23110: PPUSH
// if not missionNumber then
23111: LD_VAR 0 2
23115: NOT
23116: IFFALSE 23120
// exit ;
23118: GO 23250
// achiv := false ;
23120: LD_ADDR_VAR 0 7
23124: PUSH
23125: LD_INT 0
23127: ST_TO_ADDR
// case campaignNumber of 1 :
23128: LD_VAR 0 1
23132: PUSH
23133: LD_INT 1
23135: DOUBLE
23136: EQUAL
23137: IFTRUE 23141
23139: GO 23152
23141: POP
// achiv := ACH_GOTA ; 2 :
23142: LD_ADDR_VAR 0 7
23146: PUSH
23147: LD_STRING ACH_GOTA
23149: ST_TO_ADDR
23150: GO 23202
23152: LD_INT 2
23154: DOUBLE
23155: EQUAL
23156: IFTRUE 23160
23158: GO 23163
23160: POP
// ; 3 :
23161: GO 23202
23163: LD_INT 3
23165: DOUBLE
23166: EQUAL
23167: IFTRUE 23171
23169: GO 23182
23171: POP
// achiv := ACH_MOTSU ; 4 :
23172: LD_ADDR_VAR 0 7
23176: PUSH
23177: LD_STRING ACH_MOTSU
23179: ST_TO_ADDR
23180: GO 23202
23182: LD_INT 4
23184: DOUBLE
23185: EQUAL
23186: IFTRUE 23190
23188: GO 23201
23190: POP
// achiv := ACH_LOP ; end ;
23191: LD_ADDR_VAR 0 7
23195: PUSH
23196: LD_STRING ACH_LOP
23198: ST_TO_ADDR
23199: GO 23202
23201: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
23202: LD_OWVAR 67
23206: PUSH
23207: LD_INT 3
23209: EQUAL
23210: PUSH
23211: LD_VAR 0 7
23215: AND
23216: PUSH
23217: LD_VAR 0 3
23221: AND
23222: PUSH
23223: LD_VAR 0 4
23227: AND
23228: PUSH
23229: LD_VAR 0 5
23233: AND
23234: IFFALSE 23250
// SetAchievementEX ( achiv , missionNumber ) ;
23236: LD_VAR 0 7
23240: PPUSH
23241: LD_VAR 0 2
23245: PPUSH
23246: CALL_OW 564
// end ;
23250: LD_VAR 0 6
23254: RET
// export function SA_BehemothConstructed ; begin
23255: LD_INT 0
23257: PPUSH
// SetAchievement ( ACH_SMC ) ;
23258: LD_STRING ACH_SMC
23260: PPUSH
23261: CALL_OW 543
// end ;
23265: LD_VAR 0 1
23269: RET
