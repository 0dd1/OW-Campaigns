// export test , testing ; export americans , americans1 , russians , russians1 ; export John , Cyrus , Bobby , Khatam , Nick , Lisa ; export AmME1 , AmFE2 , AmMSo3 ; export Powell ; export AmD1 , AmD2 , AmD3 , AmD4 ; export AmR1 , AmR2 , RuR1 , RuR2 ; export Time_of_visit , Time_of_attack , vehicle_goes , escape_flag , flee ; export Time_of_capture , vehicles_detected , uncanny_vehicles ; export Khatam_met_americans , Khatam_met_MM , Mikhail_placed , Mikhail_captured ; export resumption_of_talk , depot , Mikhail_in_depot , great_escape , attack , mikhail_marked_for_death ; export remove_mikhail , conversation , Mikhails_escape ; export Number_of_tigers ; export Dep1_lives , Dep2_lives , rep , Mikhails_lives , firing1 , firing2 , russians_attack , russians_attack1 ; export rsol1 , rsol2 , rsol3 , rsol4 , rsol5 , rsol6 , rdrv1 , rdrv2 , rv1 , rv2 ; export Mikhail , vehicle3 , vehicle4 , driver3 , driver4 ; export tigers , tiger1 , tiger2 , tiger3 , tiger4 ; export battle , number_of_crates , count , sergej_succeeds ; export vehicle1_fuel , vehicle2_fuel ; export tigers_allowed , remove_tigers ; export Engineers_not_dead , First_Capture ; export Attack_Distance , Eng_Skill , Sc_Skill , guard_skill ; export Lives_to_Retreat , lost_units ; export Mikhails_Escape_Disabled ; export Initial_Lives , Attack_canceled ; export RuR_lives , JMM_saw_east_guard , East_guard_seen ; export vehicle1_new , vehicle2_new ; export escape_dialogue , vehicle_goes_flag ; export Dialogue_Number , Skip ; export tiger_skill , russ_attack , drivers_skill , soldiers_skill , vehicle_lives ; export RusEast , RusNorth ; export Alive , RunDelay ; export Init_lives , Tested_Americans ; export Lives_Jmm , Lives_Bobby , Lives_Cyrus ; function Prepare_difficulty ; begin
   0: LD_INT 0
   2: PPUSH
// tiger_skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
   3: LD_ADDR_EXP 103
   7: PUSH
   8: LD_INT 0
  10: PUSH
  11: LD_INT 1
  13: PUSH
  14: LD_INT 2
  16: PUSH
  17: EMPTY
  18: LIST
  19: LIST
  20: LIST
  21: PUSH
  22: LD_OWVAR 67
  26: ARRAY
  27: ST_TO_ADDR
// drivers_skill = [ 0 , 1 , 3 ] [ Difficulty ] ;
  28: LD_ADDR_EXP 105
  32: PUSH
  33: LD_INT 0
  35: PUSH
  36: LD_INT 1
  38: PUSH
  39: LD_INT 3
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: LIST
  46: PUSH
  47: LD_OWVAR 67
  51: ARRAY
  52: ST_TO_ADDR
// soldiers_skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
  53: LD_ADDR_EXP 106
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 2
  66: PUSH
  67: EMPTY
  68: LIST
  69: LIST
  70: LIST
  71: PUSH
  72: LD_OWVAR 67
  76: ARRAY
  77: ST_TO_ADDR
// vehicle_lives = [ 450 , 600 , 1000 ] [ Difficulty ] ;
  78: LD_ADDR_EXP 107
  82: PUSH
  83: LD_INT 450
  85: PUSH
  86: LD_INT 600
  88: PUSH
  89: LD_INT 1000
  91: PUSH
  92: EMPTY
  93: LIST
  94: LIST
  95: LIST
  96: PUSH
  97: LD_OWVAR 67
 101: ARRAY
 102: ST_TO_ADDR
// number_of_crates = [ 5 , 4 , 3 ] [ Difficulty ] ;
 103: LD_ADDR_EXP 76
 107: PUSH
 108: LD_INT 5
 110: PUSH
 111: LD_INT 4
 113: PUSH
 114: LD_INT 3
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: PUSH
 122: LD_OWVAR 67
 126: ARRAY
 127: ST_TO_ADDR
// vehicle1_fuel = [ 50 , 45 , 35 ] [ Difficulty ] ;
 128: LD_ADDR_EXP 79
 132: PUSH
 133: LD_INT 50
 135: PUSH
 136: LD_INT 45
 138: PUSH
 139: LD_INT 35
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: PUSH
 147: LD_OWVAR 67
 151: ARRAY
 152: ST_TO_ADDR
// vehicle2_fuel = [ 55 , 50 , 40 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 80
 157: PUSH
 158: LD_INT 55
 160: PUSH
 161: LD_INT 50
 163: PUSH
 164: LD_INT 40
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// Attack_Distance = [ 17 , 16 , 15 ] [ Difficulty ] ;
 178: LD_ADDR_EXP 85
 182: PUSH
 183: LD_INT 17
 185: PUSH
 186: LD_INT 16
 188: PUSH
 189: LD_INT 15
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: LIST
 196: PUSH
 197: LD_OWVAR 67
 201: ARRAY
 202: ST_TO_ADDR
// Eng_Skill = [ 0 , 0 , 2 ] [ Difficulty ] ;
 203: LD_ADDR_EXP 86
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: LD_OWVAR 67
 226: ARRAY
 227: ST_TO_ADDR
// Sc_Skill = [ 0 , 0 , 2 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 87
 232: PUSH
 233: LD_INT 0
 235: PUSH
 236: LD_INT 0
 238: PUSH
 239: LD_INT 2
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// RunDelay = [ [ 106 , 18 ] , [ 103 , 12 ] , [ 99 , 5 ] ] [ Difficulty ] ;
 253: LD_ADDR_EXP 111
 257: PUSH
 258: LD_INT 106
 260: PUSH
 261: LD_INT 18
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 103
 270: PUSH
 271: LD_INT 12
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: LD_INT 99
 280: PUSH
 281: LD_INT 5
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// ComMoveXY ( RusEM1 , RunDelay [ 1 ] , RunDelay [ 2 ] ) ;
 299: LD_INT 6
 301: PPUSH
 302: LD_EXP 111
 306: PUSH
 307: LD_INT 1
 309: ARRAY
 310: PPUSH
 311: LD_EXP 111
 315: PUSH
 316: LD_INT 2
 318: ARRAY
 319: PPUSH
 320: CALL_OW 111
// AddComHold ( RusEM1 ) ;
 324: LD_INT 6
 326: PPUSH
 327: CALL_OW 200
// Guard_Skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
 331: LD_ADDR_EXP 88
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: LD_INT 2
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: PUSH
 350: LD_OWVAR 67
 354: ARRAY
 355: ST_TO_ADDR
// Lives_to_Retreat = [ 450 , 500 , 600 ] [ Difficulty ] ;
 356: LD_ADDR_EXP 89
 360: PUSH
 361: LD_INT 450
 363: PUSH
 364: LD_INT 500
 366: PUSH
 367: LD_INT 600
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: LD_OWVAR 67
 379: ARRAY
 380: ST_TO_ADDR
// RuR_lives = [ 500 , 800 , 1000 ] [ Difficulty ] ;
 381: LD_ADDR_EXP 94
 385: PUSH
 386: LD_INT 500
 388: PUSH
 389: LD_INT 800
 391: PUSH
 392: LD_INT 1000
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// end ;
 406: LD_VAR 0 1
 410: RET
// function Init ; begin
 411: LD_INT 0
 413: PPUSH
// tigers = [ tiger1 , tiger2 , tiger3 , tiger4 ] ;
 414: LD_ADDR_EXP 70
 418: PUSH
 419: LD_EXP 71
 423: PUSH
 424: LD_EXP 72
 428: PUSH
 429: LD_EXP 73
 433: PUSH
 434: LD_EXP 74
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// americans = 1 ;
 445: LD_ADDR_EXP 3
 449: PUSH
 450: LD_INT 1
 452: ST_TO_ADDR
// americans1 = 4 ;
 453: LD_ADDR_EXP 4
 457: PUSH
 458: LD_INT 4
 460: ST_TO_ADDR
// russians = 3 ;
 461: LD_ADDR_EXP 5
 465: PUSH
 466: LD_INT 3
 468: ST_TO_ADDR
// russians1 = 6 ;
 469: LD_ADDR_EXP 6
 473: PUSH
 474: LD_INT 6
 476: ST_TO_ADDR
// SetAttitude ( americans , russians , att_enemy , true ) ;
 477: LD_EXP 3
 481: PPUSH
 482: LD_EXP 5
 486: PPUSH
 487: LD_INT 2
 489: PPUSH
 490: LD_INT 1
 492: PPUSH
 493: CALL_OW 80
// SetAttitude ( americans , russians1 , att_neutral , false ) ;
 497: LD_EXP 3
 501: PPUSH
 502: LD_EXP 6
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 80
// SetAttitude ( russians1 , americans , att_neutral , false ) ;
 517: LD_EXP 6
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: LD_INT 0
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL_OW 80
// SetAttitude ( russians , russians1 , att_friend , true ) ;
 537: LD_EXP 5
 541: PPUSH
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 1
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: CALL_OW 80
// SetAttitude ( americans , americans1 , att_friend , true ) ;
 557: LD_EXP 3
 561: PPUSH
 562: LD_EXP 4
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL_OW 80
// RusEast = [ RusESo1 , RusESo2 ] ;
 577: LD_ADDR_EXP 108
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 8
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: ST_TO_ADDR
// RusNorth = [ RusNSo1 , RusNSo2 , RusNSc1 ] ;
 592: LD_ADDR_EXP 109
 596: PUSH
 597: LD_INT 3
 599: PUSH
 600: LD_INT 14
 602: PUSH
 603: LD_INT 25
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// ComRemember ( RusNorth ) ;
 611: LD_EXP 109
 615: PPUSH
 616: CALL_OW 143
// ComFree ( RusNorth ) ;
 620: LD_EXP 109
 624: PPUSH
 625: CALL_OW 139
// Dep1_lives = 1000 ;
 629: LD_ADDR_EXP 47
 633: PUSH
 634: LD_INT 1000
 636: ST_TO_ADDR
// Dep2_lives = 1000 ;
 637: LD_ADDR_EXP 48
 641: PUSH
 642: LD_INT 1000
 644: ST_TO_ADDR
// InitUc ;
 645: CALL_OW 18
// InitHc ;
 649: CALL_OW 19
// InitVc ;
 653: CALL_OW 20
// uc_direction = 1 ;
 657: LD_ADDR_OWVAR 24
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// uc_nation = nation_russian ;
 665: LD_ADDR_OWVAR 21
 669: PUSH
 670: LD_INT 3
 672: ST_TO_ADDR
// uc_side = russians ;
 673: LD_ADDR_OWVAR 20
 677: PUSH
 678: LD_EXP 5
 682: ST_TO_ADDR
// SetFuel ( vehicle1 , vehicle1_fuel ) ;
 683: LD_INT 5
 685: PPUSH
 686: LD_EXP 79
 690: PPUSH
 691: CALL_OW 240
// SetFuel ( vehicle2 , vehicle2_fuel ) ;
 695: LD_INT 4
 697: PPUSH
 698: LD_EXP 80
 702: PPUSH
 703: CALL_OW 240
// vc_chassis = ru_medium_wheeled ;
 707: LD_ADDR_OWVAR 37
 711: PUSH
 712: LD_INT 21
 714: ST_TO_ADDR
// vc_engine = engine_combustion ;
 715: LD_ADDR_OWVAR 39
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// vc_control = control_manual ;
 723: LD_ADDR_OWVAR 38
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
 731: LD_ADDR_OWVAR 40
 735: PUSH
 736: LD_INT 51
 738: ST_TO_ADDR
// vehicle3 = CreateVehicle ;
 739: LD_ADDR_EXP 66
 743: PUSH
 744: CALL_OW 45
 748: ST_TO_ADDR
// vehicle4 = CreateVehicle ;
 749: LD_ADDR_EXP 67
 753: PUSH
 754: CALL_OW 45
 758: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
 759: LD_ADDR_OWVAR 40
 763: PUSH
 764: LD_INT 42
 766: ST_TO_ADDR
// rv1 = CreateVehicle ;
 767: LD_ADDR_EXP 63
 771: PUSH
 772: CALL_OW 45
 776: ST_TO_ADDR
// SetLives ( rv1 , vehicle_lives ) ;
 777: LD_EXP 63
 781: PPUSH
 782: LD_EXP 107
 786: PPUSH
 787: CALL_OW 234
// rv2 = CreateVehicle ;
 791: LD_ADDR_EXP 64
 795: PUSH
 796: CALL_OW 45
 800: ST_TO_ADDR
// Time_of_visit = 550 550$0 ;
 801: LD_ADDR_EXP 25
 805: PUSH
 806: LD_INT 1155000
 808: ST_TO_ADDR
// Time_of_attack = 550 550$0 ;
 809: LD_ADDR_EXP 26
 813: PUSH
 814: LD_INT 1155000
 816: ST_TO_ADDR
// Time_of_capture = 550 550$0 ;
 817: LD_ADDR_EXP 30
 821: PUSH
 822: LD_INT 1155000
 824: ST_TO_ADDR
// flee = 0 ;
 825: LD_ADDR_EXP 29
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// hc_sex = sex_male ;
 833: LD_ADDR_OWVAR 27
 837: PUSH
 838: LD_INT 1
 840: ST_TO_ADDR
// hc_class = class_mechanic ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 3
 848: ST_TO_ADDR
// hc_skills = [ 1 , 0 , drivers_skill , 0 ] ;
 849: LD_ADDR_OWVAR 31
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: LD_INT 0
 859: PUSH
 860: LD_EXP 105
 864: PUSH
 865: LD_INT 0
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
 874: LD_ADDR_OWVAR 29
 878: PUSH
 879: LD_INT 10
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: ST_TO_ADDR
// hc_name =  ;
 889: LD_ADDR_OWVAR 26
 893: PUSH
 894: LD_STRING 
 896: ST_TO_ADDR
// driver3 = CreateHuman ;
 897: LD_ADDR_EXP 68
 901: PUSH
 902: CALL_OW 44
 906: ST_TO_ADDR
// PlaceHumanInUnit ( driver3 , vehicle3 ) ;
 907: LD_EXP 68
 911: PPUSH
 912: LD_EXP 66
 916: PPUSH
 917: CALL_OW 52
// hc_name =  ;
 921: LD_ADDR_OWVAR 26
 925: PUSH
 926: LD_STRING 
 928: ST_TO_ADDR
// driver4 = CreateHuman ;
 929: LD_ADDR_EXP 69
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// PlaceHumanInUnit ( driver4 , vehicle4 ) ;
 939: LD_EXP 69
 943: PPUSH
 944: LD_EXP 67
 948: PPUSH
 949: CALL_OW 52
// hc_name =  ;
 953: LD_ADDR_OWVAR 26
 957: PUSH
 958: LD_STRING 
 960: ST_TO_ADDR
// hc_skills = [ 1 , 3 , drivers_skill + 1 , 0 ] ;
 961: LD_ADDR_OWVAR 31
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: LD_INT 3
 971: PUSH
 972: LD_EXP 105
 976: PUSH
 977: LD_INT 1
 979: PLUS
 980: PUSH
 981: LD_INT 0
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: ST_TO_ADDR
// hc_class = class_engineer ;
 990: LD_ADDR_OWVAR 28
 994: PUSH
 995: LD_INT 2
 997: ST_TO_ADDR
// rdrv1 = CreateHuman ;
 998: LD_ADDR_EXP 61
1002: PUSH
1003: CALL_OW 44
1007: ST_TO_ADDR
// rdrv2 = CreateHuman ;
1008: LD_ADDR_EXP 62
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( rdrv1 , rv1 ) ;
1018: LD_EXP 61
1022: PPUSH
1023: LD_EXP 63
1027: PPUSH
1028: CALL_OW 52
// PlaceHumanInUnit ( rdrv2 , rv2 ) ;
1032: LD_EXP 62
1036: PPUSH
1037: LD_EXP 64
1041: PPUSH
1042: CALL_OW 52
// hc_class = class_soldier ;
1046: LD_ADDR_OWVAR 28
1050: PUSH
1051: LD_INT 1
1053: ST_TO_ADDR
// hc_skills = [ soldiers_skill , 0 , 1 , 1 ] ;
1054: LD_ADDR_OWVAR 31
1058: PUSH
1059: LD_EXP 106
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
// hc_name =  ;
1079: LD_ADDR_OWVAR 26
1083: PUSH
1084: LD_STRING 
1086: ST_TO_ADDR
// rsol1 = CreateHuman ;
1087: LD_ADDR_EXP 55
1091: PUSH
1092: CALL_OW 44
1096: ST_TO_ADDR
// rsol4 = CreateHuman ;
1097: LD_ADDR_EXP 58
1101: PUSH
1102: CALL_OW 44
1106: ST_TO_ADDR
// hc_skills = [ soldiers_skill - 1 , 0 , 1 , 1 ] ;
1107: LD_ADDR_OWVAR 31
1111: PUSH
1112: LD_EXP 106
1116: PUSH
1117: LD_INT 1
1119: MINUS
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: ST_TO_ADDR
// rsol3 = CreateHuman ;
1136: LD_ADDR_EXP 57
1140: PUSH
1141: CALL_OW 44
1145: ST_TO_ADDR
// rsol5 = CreateHuman ;
1146: LD_ADDR_EXP 59
1150: PUSH
1151: CALL_OW 44
1155: ST_TO_ADDR
// hc_skills = [ soldiers_skill + 1 , 0 , 1 , 1 ] ;
1156: LD_ADDR_OWVAR 31
1160: PUSH
1161: LD_EXP 106
1165: PUSH
1166: LD_INT 1
1168: PLUS
1169: PUSH
1170: LD_INT 0
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// rsol2 = CreateHuman ;
1185: LD_ADDR_EXP 56
1189: PUSH
1190: CALL_OW 44
1194: ST_TO_ADDR
// hc_skills = [ soldiers_skill , 0 , 1 , 1 ] ;
1195: LD_ADDR_OWVAR 31
1199: PUSH
1200: LD_EXP 106
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 1
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// rsol6 = CreateHuman ;
1220: LD_ADDR_EXP 60
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// hc_sex = sex_male ;
1230: LD_ADDR_OWVAR 27
1234: PUSH
1235: LD_INT 1
1237: ST_TO_ADDR
// uc_side = russians1 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_EXP 6
1247: ST_TO_ADDR
// PrepareNewCharacter ( Mikhail ) ;
1248: LD_STRING Mikhail
1250: PPUSH
1251: CALL_OW 26
// hc_class = class_mechanic ;
1255: LD_ADDR_OWVAR 28
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// Mikhail = CreateHuman ;
1263: LD_ADDR_EXP 65
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// Mikhail_in_depot = false ;
1273: LD_ADDR_EXP 39
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// Mikhails_lives = 1000 ;
1281: LD_ADDR_EXP 50
1285: PUSH
1286: LD_INT 1000
1288: ST_TO_ADDR
// hc_gallery =  ;
1289: LD_ADDR_OWVAR 33
1293: PUSH
1294: LD_STRING 
1296: ST_TO_ADDR
// hc_face_number = 0 ;
1297: LD_ADDR_OWVAR 34
1301: PUSH
1302: LD_INT 0
1304: ST_TO_ADDR
// uc_nation = nation_american ;
1305: LD_ADDR_OWVAR 21
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// uc_side = americans ;
1313: LD_ADDR_OWVAR 20
1317: PUSH
1318: LD_EXP 3
1322: ST_TO_ADDR
// Lives_JMM = LoadVariable ( lives_jmm , 1000 ) ;
1323: LD_ADDR_EXP 114
1327: PUSH
1328: LD_STRING lives_jmm
1330: PPUSH
1331: LD_INT 1000
1333: PPUSH
1334: CALL_OW 30
1338: ST_TO_ADDR
// Lives_Bobby = LoadVariable ( lives_bobby , 1000 ) ;
1339: LD_ADDR_EXP 115
1343: PUSH
1344: LD_STRING lives_bobby
1346: PPUSH
1347: LD_INT 1000
1349: PPUSH
1350: CALL_OW 30
1354: ST_TO_ADDR
// Lives_Cyrus = LoadVariable ( lives_cyrus , 1000 ) ;
1355: LD_ADDR_EXP 116
1359: PUSH
1360: LD_STRING lives_cyrus
1362: PPUSH
1363: LD_INT 1000
1365: PPUSH
1366: CALL_OW 30
1370: ST_TO_ADDR
// if Lives_JMM < 251 then
1371: LD_EXP 114
1375: PUSH
1376: LD_INT 251
1378: LESS
1379: IFFALSE 1389
// Lives_JMM := 251 ;
1381: LD_ADDR_EXP 114
1385: PUSH
1386: LD_INT 251
1388: ST_TO_ADDR
// if Lives_Bobby < 251 then
1389: LD_EXP 115
1393: PUSH
1394: LD_INT 251
1396: LESS
1397: IFFALSE 1407
// Lives_Bobby := 251 ;
1399: LD_ADDR_EXP 115
1403: PUSH
1404: LD_INT 251
1406: ST_TO_ADDR
// if Lives_Cyrus < 251 then
1407: LD_EXP 116
1411: PUSH
1412: LD_INT 251
1414: LESS
1415: IFFALSE 1425
// Lives_Cyrus := 251 ;
1417: LD_ADDR_EXP 116
1421: PUSH
1422: LD_INT 251
1424: ST_TO_ADDR
// if testing then
1425: LD_EXP 2
1429: IFFALSE 1465
// begin PrepareSoldier ( sex_male , 3 ) ;
1431: LD_INT 1
1433: PPUSH
1434: LD_INT 3
1436: PPUSH
1437: CALL_OW 381
// hc_name = Macmillan ;
1441: LD_ADDR_OWVAR 26
1445: PUSH
1446: LD_STRING Macmillan
1448: ST_TO_ADDR
// John = CreateHuman ;
1449: LD_ADDR_EXP 7
1453: PUSH
1454: CALL_OW 44
1458: ST_TO_ADDR
// InitHc ;
1459: CALL_OW 19
// end else
1463: GO 1478
// John = CreateCharacter ( JMM ) ;
1465: LD_ADDR_EXP 7
1469: PUSH
1470: LD_STRING JMM
1472: PPUSH
1473: CALL_OW 34
1477: ST_TO_ADDR
// SetLives ( John , Lives_JMM ) ;
1478: LD_EXP 7
1482: PPUSH
1483: LD_EXP 114
1487: PPUSH
1488: CALL_OW 234
// if not John then
1492: LD_EXP 7
1496: NOT
1497: IFFALSE 1512
// BuildQuery ( Error: John Macmillan not found!!! , [ OK ] ) ;
1499: LD_STRING Error: John Macmillan not found!!!
1501: PPUSH
1502: LD_STRING OK
1504: PUSH
1505: EMPTY
1506: LIST
1507: PPUSH
1508: CALL_OW 99
// if testing then
1512: LD_EXP 2
1516: IFFALSE 1552
// begin PrepareSoldier ( sex_male , 0 ) ;
1518: LD_INT 1
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 381
// hc_name = Powell ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Powell
1535: ST_TO_ADDR
// Powell = CreateHuman ;
1536: LD_ADDR_EXP 16
1540: PUSH
1541: CALL_OW 44
1545: ST_TO_ADDR
// InitHc ;
1546: CALL_OW 19
// end else
1550: GO 1565
// Powell = CreateCharacter ( Powell ) ;
1552: LD_ADDR_EXP 16
1556: PUSH
1557: LD_STRING Powell
1559: PPUSH
1560: CALL_OW 34
1564: ST_TO_ADDR
// if not Powell then
1565: LD_EXP 16
1569: NOT
1570: IFFALSE 1585
// BuildQuery ( Error: Powell not found!!! , [ OK ] ) ;
1572: LD_STRING Error: Powell not found!!!
1574: PPUSH
1575: LD_STRING OK
1577: PUSH
1578: EMPTY
1579: LIST
1580: PPUSH
1581: CALL_OW 99
// Bobby = CreateCharacter ( Bobby ) ;
1585: LD_ADDR_EXP 9
1589: PUSH
1590: LD_STRING Bobby
1592: PPUSH
1593: CALL_OW 34
1597: ST_TO_ADDR
// if Bobby then
1598: LD_EXP 9
1602: IFFALSE 1618
// SetLives ( Bobby , Lives_Bobby ) ;
1604: LD_EXP 9
1608: PPUSH
1609: LD_EXP 115
1613: PPUSH
1614: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
1618: LD_ADDR_EXP 8
1622: PUSH
1623: LD_STRING Cyrus
1625: PPUSH
1626: CALL_OW 34
1630: ST_TO_ADDR
// if Cyrus then
1631: LD_EXP 8
1635: IFFALSE 1651
// SetLives ( Cyrus , Lives_Cyrus ) ;
1637: LD_EXP 8
1641: PPUSH
1642: LD_EXP 116
1646: PPUSH
1647: CALL_OW 234
// uc_side = americans1 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_EXP 4
1660: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
1661: LD_ADDR_EXP 12
1665: PUSH
1666: LD_STRING Lisa
1668: PPUSH
1669: CALL_OW 25
1673: ST_TO_ADDR
// uc_side = americans1 ;
1674: LD_ADDR_OWVAR 20
1678: PUSH
1679: LD_EXP 4
1683: ST_TO_ADDR
// Khatam = NewCharacter ( Khatam ) ;
1684: LD_ADDR_EXP 10
1688: PUSH
1689: LD_STRING Khatam
1691: PPUSH
1692: CALL_OW 25
1696: ST_TO_ADDR
// SetClass ( Khatam , class_scientistic ) ;
1697: LD_EXP 10
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL_OW 336
// Khatam_met_MM = false ;
1709: LD_ADDR_EXP 34
1713: PUSH
1714: LD_INT 0
1716: ST_TO_ADDR
// uc_side = americans1 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_EXP 4
1726: ST_TO_ADDR
// hc_sex = sex_male ;
1727: LD_ADDR_OWVAR 27
1731: PUSH
1732: LD_INT 1
1734: ST_TO_ADDR
// hc_class = class_engineer ;
1735: LD_ADDR_OWVAR 28
1739: PUSH
1740: LD_INT 2
1742: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 0 ] ;
1743: LD_ADDR_OWVAR 31
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 2
1753: PUSH
1754: LD_INT 1
1756: PUSH
1757: LD_INT 0
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// hc_name =  ;
1766: LD_ADDR_OWVAR 26
1770: PUSH
1771: LD_STRING 
1773: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
1774: LD_ADDR_OWVAR 29
1778: PUSH
1779: LD_INT 10
1781: PUSH
1782: LD_INT 10
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: ST_TO_ADDR
// AmME1 = CreateHuman ;
1789: LD_ADDR_EXP 13
1793: PUSH
1794: CALL_OW 44
1798: ST_TO_ADDR
// hc_sex = sex_female ;
1799: LD_ADDR_OWVAR 27
1803: PUSH
1804: LD_INT 2
1806: ST_TO_ADDR
// hc_skills = [ 1 , 1 , 2 , 1 ] ;
1807: LD_ADDR_OWVAR 31
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: LD_INT 2
1820: PUSH
1821: LD_INT 1
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: ST_TO_ADDR
// hc_name =  ;
1830: LD_ADDR_OWVAR 26
1834: PUSH
1835: LD_STRING 
1837: ST_TO_ADDR
// AmFE2 = CreateHuman ;
1838: LD_ADDR_EXP 14
1842: PUSH
1843: CALL_OW 44
1847: ST_TO_ADDR
// hc_sex = sex_male ;
1848: LD_ADDR_OWVAR 27
1852: PUSH
1853: LD_INT 1
1855: ST_TO_ADDR
// hc_class = class_soldier ;
1856: LD_ADDR_OWVAR 28
1860: PUSH
1861: LD_INT 1
1863: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 1 , 0 ] ;
1864: LD_ADDR_OWVAR 31
1868: PUSH
1869: LD_INT 2
1871: PUSH
1872: LD_INT 1
1874: PUSH
1875: LD_INT 1
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: ST_TO_ADDR
// hc_name =  ;
1887: LD_ADDR_OWVAR 26
1891: PUSH
1892: LD_STRING 
1894: ST_TO_ADDR
// AmMSo3 = CreateHuman ;
1895: LD_ADDR_EXP 15
1899: PUSH
1900: CALL_OW 44
1904: ST_TO_ADDR
// if John then
1905: LD_EXP 7
1909: IFFALSE 1929
// PlaceUnitXY ( John , 44 , 72 , false ) ;
1911: LD_EXP 7
1915: PPUSH
1916: LD_INT 44
1918: PPUSH
1919: LD_INT 72
1921: PPUSH
1922: LD_INT 0
1924: PPUSH
1925: CALL_OW 48
// if Bobby then
1929: LD_EXP 9
1933: IFFALSE 1953
// PlaceUnitXY ( Bobby , 43 , 74 , false ) ;
1935: LD_EXP 9
1939: PPUSH
1940: LD_INT 43
1942: PPUSH
1943: LD_INT 74
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 48
// if Cyrus then
1953: LD_EXP 8
1957: IFFALSE 1977
// PlaceUnitXY ( Cyrus , 47 , 76 , false ) ;
1959: LD_EXP 8
1963: PPUSH
1964: LD_INT 47
1966: PPUSH
1967: LD_INT 76
1969: PPUSH
1970: LD_INT 0
1972: PPUSH
1973: CALL_OW 48
// PlaceUnitXY ( Lisa , 30 , 55 , false ) ;
1977: LD_EXP 12
1981: PPUSH
1982: LD_INT 30
1984: PPUSH
1985: LD_INT 55
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL_OW 48
// ComCrawl ( Lisa ) ;
1995: LD_EXP 12
1999: PPUSH
2000: CALL_OW 137
// AddComHold ( Lisa ) ;
2004: LD_EXP 12
2008: PPUSH
2009: CALL_OW 200
// AddComTurnXY ( Lisa , 34 , 60 ) ;
2013: LD_EXP 12
2017: PPUSH
2018: LD_INT 34
2020: PPUSH
2021: LD_INT 60
2023: PPUSH
2024: CALL_OW 178
// PlaceUnitXY ( AmME1 , 31 , 50 , false ) ;
2028: LD_EXP 13
2032: PPUSH
2033: LD_INT 31
2035: PPUSH
2036: LD_INT 50
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 48
// ComCrawl ( AmME1 ) ;
2046: LD_EXP 13
2050: PPUSH
2051: CALL_OW 137
// AddComHold ( AmME1 ) ;
2055: LD_EXP 13
2059: PPUSH
2060: CALL_OW 200
// AddComTurnXY ( AmME1 , 34 , 50 ) ;
2064: LD_EXP 13
2068: PPUSH
2069: LD_INT 34
2071: PPUSH
2072: LD_INT 50
2074: PPUSH
2075: CALL_OW 178
// PlaceUnitXY ( AmFE2 , 33 , 51 , false ) ;
2079: LD_EXP 14
2083: PPUSH
2084: LD_INT 33
2086: PPUSH
2087: LD_INT 51
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 48
// ComCrawl ( AmFE2 ) ;
2097: LD_EXP 14
2101: PPUSH
2102: CALL_OW 137
// AddComHold ( AmFE2 ) ;
2106: LD_EXP 14
2110: PPUSH
2111: CALL_OW 200
// AddComTurnXY ( AmFE2 , 34 , 50 ) ;
2115: LD_EXP 14
2119: PPUSH
2120: LD_INT 34
2122: PPUSH
2123: LD_INT 50
2125: PPUSH
2126: CALL_OW 178
// ComFree ( [ John , Bobby , Cyrus ] ) ;
2130: LD_EXP 7
2134: PUSH
2135: LD_EXP 9
2139: PUSH
2140: LD_EXP 8
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: PPUSH
2150: CALL_OW 139
// Nick = 0 ;
2154: LD_ADDR_EXP 11
2158: PUSH
2159: LD_INT 0
2161: ST_TO_ADDR
// if not Cyrus and not Bobby then
2162: LD_EXP 8
2166: NOT
2167: PUSH
2168: LD_EXP 9
2172: NOT
2173: AND
2174: IFFALSE 2317
// begin uc_side = americans1 ;
2176: LD_ADDR_OWVAR 20
2180: PUSH
2181: LD_EXP 4
2185: ST_TO_ADDR
// uc_nation = nation_american ;
2186: LD_ADDR_OWVAR 21
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// hc_sex = sex_male ;
2194: LD_ADDR_OWVAR 27
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// hc_class = class_soldier ;
2202: LD_ADDR_OWVAR 28
2206: PUSH
2207: LD_INT 1
2209: ST_TO_ADDR
// hc_skills = [ 1 , 1 , 1 , 0 ] ;
2210: LD_ADDR_OWVAR 31
2214: PUSH
2215: LD_INT 1
2217: PUSH
2218: LD_INT 1
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 0
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: ST_TO_ADDR
// hc_name =  ;
2233: LD_ADDR_OWVAR 26
2237: PUSH
2238: LD_STRING 
2240: ST_TO_ADDR
// hc_attr = [ 11 , 8 ] ;
2241: LD_ADDR_OWVAR 29
2245: PUSH
2246: LD_INT 11
2248: PUSH
2249: LD_INT 8
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: ST_TO_ADDR
// Nick = CreateHuman ;
2256: LD_ADDR_EXP 11
2260: PUSH
2261: CALL_OW 44
2265: ST_TO_ADDR
// PlaceUnitXY ( Nick , 32 , 49 , false ) ;
2266: LD_EXP 11
2270: PPUSH
2271: LD_INT 32
2273: PPUSH
2274: LD_INT 49
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 48
// comCrawl ( Nick ) ;
2284: LD_EXP 11
2288: PPUSH
2289: CALL_OW 137
// AddComHold ( Nick ) ;
2293: LD_EXP 11
2297: PPUSH
2298: CALL_OW 200
// AddComTurnXY ( Nick , 34 , 50 ) ;
2302: LD_EXP 11
2306: PPUSH
2307: LD_INT 34
2309: PPUSH
2310: LD_INT 50
2312: PPUSH
2313: CALL_OW 178
// end ; hc_sex = sex_male ;
2317: LD_ADDR_OWVAR 27
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// hc_class = class_soldier ;
2325: LD_ADDR_OWVAR 28
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 1 ] ;
2333: LD_ADDR_OWVAR 31
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: LD_INT 2
2343: PUSH
2344: LD_INT 1
2346: PUSH
2347: LD_INT 1
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// hc_name =  ;
2356: LD_ADDR_OWVAR 26
2360: PUSH
2361: LD_STRING 
2363: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2364: LD_ADDR_OWVAR 29
2368: PUSH
2369: LD_INT 10
2371: PUSH
2372: LD_INT 10
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// uc_direction = 1 ;
2379: LD_ADDR_OWVAR 24
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// AmR1 = CreateHuman ;
2387: LD_ADDR_EXP 21
2391: PUSH
2392: CALL_OW 44
2396: ST_TO_ADDR
// hc_name =  ;
2397: LD_ADDR_OWVAR 26
2401: PUSH
2402: LD_STRING 
2404: ST_TO_ADDR
// uc_direction = 1 ;
2405: LD_ADDR_OWVAR 24
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// AmR2 = CreateHuman ;
2413: LD_ADDR_EXP 22
2417: PUSH
2418: CALL_OW 44
2422: ST_TO_ADDR
// uc_side = russians ;
2423: LD_ADDR_OWVAR 20
2427: PUSH
2428: LD_EXP 5
2432: ST_TO_ADDR
// uc_nation = nation_russian ;
2433: LD_ADDR_OWVAR 21
2437: PUSH
2438: LD_INT 3
2440: ST_TO_ADDR
// hc_sex = sex_male ;
2441: LD_ADDR_OWVAR 27
2445: PUSH
2446: LD_INT 1
2448: ST_TO_ADDR
// hc_class = class_soldier ;
2449: LD_ADDR_OWVAR 28
2453: PUSH
2454: LD_INT 1
2456: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 0 , 0 ] ;
2457: LD_ADDR_OWVAR 31
2461: PUSH
2462: LD_INT 2
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: LD_INT 0
2470: PUSH
2471: LD_INT 0
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2480: LD_ADDR_OWVAR 29
2484: PUSH
2485: LD_INT 10
2487: PUSH
2488: LD_INT 10
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: ST_TO_ADDR
// hc_name =  ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING 
2502: ST_TO_ADDR
// uc_direction = 4 ;
2503: LD_ADDR_OWVAR 24
2507: PUSH
2508: LD_INT 4
2510: ST_TO_ADDR
// RuR1 = CreateHuman ;
2511: LD_ADDR_EXP 23
2515: PUSH
2516: CALL_OW 44
2520: ST_TO_ADDR
// SetLives ( RuR1 , RuR_lives ) ;
2521: LD_EXP 23
2525: PPUSH
2526: LD_EXP 94
2530: PPUSH
2531: CALL_OW 234
// hc_name =  ;
2535: LD_ADDR_OWVAR 26
2539: PUSH
2540: LD_STRING 
2542: ST_TO_ADDR
// uc_direction = 4 ;
2543: LD_ADDR_OWVAR 24
2547: PUSH
2548: LD_INT 4
2550: ST_TO_ADDR
// RuR2 = CreateHuman ;
2551: LD_ADDR_EXP 24
2555: PUSH
2556: CALL_OW 44
2560: ST_TO_ADDR
// SetLives ( RuR2 , RuR_lives ) ;
2561: LD_EXP 24
2565: PPUSH
2566: LD_EXP 94
2570: PPUSH
2571: CALL_OW 234
// SetSkill ( RusNE1 , skill_engineering , eng_skill ) ;
2575: LD_INT 26
2577: PPUSH
2578: LD_INT 2
2580: PPUSH
2581: LD_EXP 86
2585: PPUSH
2586: CALL_OW 237
// SetSkill ( RusNSc1 , skill_scientistic , sc_skill ) ;
2590: LD_INT 25
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: LD_EXP 87
2600: PPUSH
2601: CALL_OW 237
// SetSkill ( guard1 , skill_combat , guard_skill ) ;
2605: LD_INT 11
2607: PPUSH
2608: LD_INT 1
2610: PPUSH
2611: LD_EXP 88
2615: PPUSH
2616: CALL_OW 237
// SetSkill ( guard2 , skill_combat , guard_skill ) ;
2620: LD_INT 12
2622: PPUSH
2623: LD_INT 1
2625: PPUSH
2626: LD_EXP 88
2630: PPUSH
2631: CALL_OW 237
// SetSkill ( guard3 , skill_combat , guard_skill ) ;
2635: LD_INT 7
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_EXP 88
2645: PPUSH
2646: CALL_OW 237
// case Difficulty of 1 :
2650: LD_OWVAR 67
2654: PUSH
2655: LD_INT 1
2657: DOUBLE
2658: EQUAL
2659: IFTRUE 2663
2661: GO 2739
2663: POP
// begin SetLives ( BrW1 , 600 ) ;
2664: LD_INT 29
2666: PPUSH
2667: LD_INT 600
2669: PPUSH
2670: CALL_OW 234
// DestroyUnit ( BrW3 ) ;
2674: LD_INT 30
2676: PPUSH
2677: CALL_OW 65
// DestroyUnit ( Brw2 ) ;
2681: LD_INT 9
2683: PPUSH
2684: CALL_OW 65
// DestroyUnit ( RusNSo4 ) ;
2688: LD_INT 28
2690: PPUSH
2691: CALL_OW 65
// DestroyUnit ( RusNSo5 ) ;
2695: LD_INT 24
2697: PPUSH
2698: CALL_OW 65
// DestroyUnit ( RusNSo6 ) ;
2702: LD_INT 31
2704: PPUSH
2705: CALL_OW 65
// DestroyUnit ( RusNE1 ) ;
2709: LD_INT 26
2711: PPUSH
2712: CALL_OW 65
// DestroyUnit ( guard2 ) ;
2716: LD_INT 12
2718: PPUSH
2719: CALL_OW 65
// DestroyUnit ( guard3 ) ;
2723: LD_INT 7
2725: PPUSH
2726: CALL_OW 65
// DestroyUnit ( RusNSo3 ) ;
2730: LD_INT 27
2732: PPUSH
2733: CALL_OW 65
// end ; 2 :
2737: GO 2814
2739: LD_INT 2
2741: DOUBLE
2742: EQUAL
2743: IFTRUE 2747
2745: GO 2802
2747: POP
// begin SetLives ( BrW3 , 700 ) ;
2748: LD_INT 30
2750: PPUSH
2751: LD_INT 700
2753: PPUSH
2754: CALL_OW 234
// DestroyUnit ( Brw2 ) ;
2758: LD_INT 9
2760: PPUSH
2761: CALL_OW 65
// DestroyUnit ( RusNSo4 ) ;
2765: LD_INT 28
2767: PPUSH
2768: CALL_OW 65
// DestroyUnit ( RusNSo5 ) ;
2772: LD_INT 24
2774: PPUSH
2775: CALL_OW 65
// DestroyUnit ( RusNSo6 ) ;
2779: LD_INT 31
2781: PPUSH
2782: CALL_OW 65
// DestroyUnit ( RusNE1 ) ;
2786: LD_INT 26
2788: PPUSH
2789: CALL_OW 65
// DestroyUnit ( guard2 ) ;
2793: LD_INT 12
2795: PPUSH
2796: CALL_OW 65
// end ; 3 :
2800: GO 2814
2802: LD_INT 3
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2813
2810: POP
// begin end ; end ;
2811: GO 2814
2813: POP
// battle = false ;
2814: LD_ADDR_EXP 75
2818: PUSH
2819: LD_INT 0
2821: ST_TO_ADDR
// count = 0 ;
2822: LD_ADDR_EXP 77
2826: PUSH
2827: LD_INT 0
2829: ST_TO_ADDR
// sergej_succeeds = 0 ;
2830: LD_ADDR_EXP 78
2834: PUSH
2835: LD_INT 0
2837: ST_TO_ADDR
// Khatam_met_americans = 1 ;
2838: LD_ADDR_EXP 33
2842: PUSH
2843: LD_INT 1
2845: ST_TO_ADDR
// disable ( Khatam_met_americans ) ;
2846: LD_EXP 33
2850: DISABLE_MARKED
// escape_flag = false ;
2851: LD_ADDR_EXP 28
2855: PUSH
2856: LD_INT 0
2858: ST_TO_ADDR
// vehicle_goes = 2 ;
2859: LD_ADDR_EXP 27
2863: PUSH
2864: LD_INT 2
2866: ST_TO_ADDR
// disable ( vehicle_goes ) ;
2867: LD_EXP 27
2871: DISABLE_MARKED
// Mikhail_placed = 3 ;
2872: LD_ADDR_EXP 35
2876: PUSH
2877: LD_INT 3
2879: ST_TO_ADDR
// disable ( mikhail_placed ) ;
2880: LD_EXP 35
2884: DISABLE_MARKED
// Mikhail_captured = 4 ;
2885: LD_ADDR_EXP 36
2889: PUSH
2890: LD_INT 4
2892: ST_TO_ADDR
// disable ( Mikhail_captured ) ;
2893: LD_EXP 36
2897: DISABLE_MARKED
// vehicles_detected = 5 ;
2898: LD_ADDR_EXP 31
2902: PUSH
2903: LD_INT 5
2905: ST_TO_ADDR
// disable ( vehicles_detected ) ;
2906: LD_EXP 31
2910: DISABLE_MARKED
// uncanny_vehicles = 6 ;
2911: LD_ADDR_EXP 32
2915: PUSH
2916: LD_INT 6
2918: ST_TO_ADDR
// depot = 8 ;
2919: LD_ADDR_EXP 38
2923: PUSH
2924: LD_INT 8
2926: ST_TO_ADDR
// disable ( depot ) ;
2927: LD_EXP 38
2931: DISABLE_MARKED
// great_escape = 9 ;
2932: LD_ADDR_EXP 40
2936: PUSH
2937: LD_INT 9
2939: ST_TO_ADDR
// disable ( great_escape ) ;
2940: LD_EXP 40
2944: DISABLE_MARKED
// attack = 10 ;
2945: LD_ADDR_EXP 41
2949: PUSH
2950: LD_INT 10
2952: ST_TO_ADDR
// disable ( attack ) ;
2953: LD_EXP 41
2957: DISABLE_MARKED
// remove_mikhail = 11 ;
2958: LD_ADDR_EXP 43
2962: PUSH
2963: LD_INT 11
2965: ST_TO_ADDR
// disable ( remove_mikhail ) ;
2966: LD_EXP 43
2970: DISABLE_MARKED
// conversation = 12 ;
2971: LD_ADDR_EXP 44
2975: PUSH
2976: LD_INT 12
2978: ST_TO_ADDR
// disable ( conversation ) ;
2979: LD_EXP 44
2983: DISABLE_MARKED
// Mikhails_escape = 13 ;
2984: LD_ADDR_EXP 45
2988: PUSH
2989: LD_INT 13
2991: ST_TO_ADDR
// disable ( Mikhails_escape ) ;
2992: LD_EXP 45
2996: DISABLE_MARKED
// rep = true ;
2997: LD_ADDR_EXP 49
3001: PUSH
3002: LD_INT 1
3004: ST_TO_ADDR
// firing1 = 14 ;
3005: LD_ADDR_EXP 51
3009: PUSH
3010: LD_INT 14
3012: ST_TO_ADDR
// disable ( firing1 ) ;
3013: LD_EXP 51
3017: DISABLE_MARKED
// firing2 = 15 ;
3018: LD_ADDR_EXP 52
3022: PUSH
3023: LD_INT 15
3025: ST_TO_ADDR
// disable ( firing2 ) ;
3026: LD_EXP 52
3030: DISABLE_MARKED
// russians_attack = 16 ;
3031: LD_ADDR_EXP 53
3035: PUSH
3036: LD_INT 16
3038: ST_TO_ADDR
// disable ( russians_attack ) ;
3039: LD_EXP 53
3043: DISABLE_MARKED
// russians_attack1 = 17 ;
3044: LD_ADDR_EXP 54
3048: PUSH
3049: LD_INT 17
3051: ST_TO_ADDR
// disable ( russians_attack1 ) ;
3052: LD_EXP 54
3056: DISABLE_MARKED
// tigers_allowed = 18 ;
3057: LD_ADDR_EXP 81
3061: PUSH
3062: LD_INT 18
3064: ST_TO_ADDR
// disable ( tigers_allowed ) ;
3065: LD_EXP 81
3069: DISABLE_MARKED
// remove_tigers = 19 ;
3070: LD_ADDR_EXP 82
3074: PUSH
3075: LD_INT 19
3077: ST_TO_ADDR
// disable ( remove_tigers ) ;
3078: LD_EXP 82
3082: DISABLE_MARKED
// Engineers_not_dead = 20 ;
3083: LD_ADDR_EXP 83
3087: PUSH
3088: LD_INT 20
3090: ST_TO_ADDR
// disable ( Engineers_not_dead ) ;
3091: LD_EXP 83
3095: DISABLE_MARKED
// East_guard_seen = 21 ;
3096: LD_ADDR_EXP 96
3100: PUSH
3101: LD_INT 21
3103: ST_TO_ADDR
// enable ( East_guard_seen ) ;
3104: LD_EXP 96
3108: ENABLE_MARKED
// mikhail_marked_for_death = false ;
3109: LD_ADDR_EXP 42
3113: PUSH
3114: LD_INT 0
3116: ST_TO_ADDR
// JMMInVehicle := false ;
3117: LD_ADDR_EXP 118
3121: PUSH
3122: LD_INT 0
3124: ST_TO_ADDR
// CyrusInVehicle := false ;
3125: LD_ADDR_EXP 119
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// Dialogue_Number = 0 ;
3133: LD_ADDR_EXP 101
3137: PUSH
3138: LD_INT 0
3140: ST_TO_ADDR
// Skip = false ;
3141: LD_ADDR_EXP 102
3145: PUSH
3146: LD_INT 0
3148: ST_TO_ADDR
// JMM_saw_east_guard = false ;
3149: LD_ADDR_EXP 95
3153: PUSH
3154: LD_INT 0
3156: ST_TO_ADDR
// Attack_canceled = false ;
3157: LD_ADDR_EXP 93
3161: PUSH
3162: LD_INT 0
3164: ST_TO_ADDR
// lost_units = 0 ;
3165: LD_ADDR_EXP 90
3169: PUSH
3170: LD_INT 0
3172: ST_TO_ADDR
// First_Capture = true ;
3173: LD_ADDR_EXP 84
3177: PUSH
3178: LD_INT 1
3180: ST_TO_ADDR
// vehicle1_new = 0 ;
3181: LD_ADDR_EXP 97
3185: PUSH
3186: LD_INT 0
3188: ST_TO_ADDR
// vehicle2_new = 0 ;
3189: LD_ADDR_EXP 98
3193: PUSH
3194: LD_INT 0
3196: ST_TO_ADDR
// escape_dialogue = false ;
3197: LD_ADDR_EXP 99
3201: PUSH
3202: LD_INT 0
3204: ST_TO_ADDR
// vehicle_goes_flag = true ;
3205: LD_ADDR_EXP 100
3209: PUSH
3210: LD_INT 1
3212: ST_TO_ADDR
// Tested_Americans = [ ] ;
3213: LD_ADDR_EXP 113
3217: PUSH
3218: EMPTY
3219: ST_TO_ADDR
// Init_Lives = [ ] ;
3220: LD_ADDR_EXP 112
3224: PUSH
3225: EMPTY
3226: ST_TO_ADDR
// Mikhails_Escape_Disabled = true ;
3227: LD_ADDR_EXP 91
3231: PUSH
3232: LD_INT 1
3234: ST_TO_ADDR
// Initial_Lives = GetLives ( [ John , Cyrus , Bobby , Khatam , Lisa , AmME1 , AmFE2 , AmMSo3 , Nick ] ) ;
3235: LD_ADDR_EXP 92
3239: PUSH
3240: LD_EXP 7
3244: PUSH
3245: LD_EXP 8
3249: PUSH
3250: LD_EXP 9
3254: PUSH
3255: LD_EXP 10
3259: PUSH
3260: LD_EXP 12
3264: PUSH
3265: LD_EXP 13
3269: PUSH
3270: LD_EXP 14
3274: PUSH
3275: LD_EXP 15
3279: PUSH
3280: LD_EXP 11
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 256
3300: ST_TO_ADDR
// CenterOnXY ( 41 , 65 ) ;
3301: LD_INT 41
3303: PPUSH
3304: LD_INT 65
3306: PPUSH
3307: CALL_OW 84
// end ;
3311: LD_VAR 0 1
3315: RET
// starting begin RandomizeAll ;
3316: CALL_OW 11
// testing = false ;
3320: LD_ADDR_EXP 2
3324: PUSH
3325: LD_INT 0
3327: ST_TO_ADDR
// test = 0 ;
3328: LD_ADDR_EXP 1
3332: PUSH
3333: LD_INT 0
3335: ST_TO_ADDR
// Prepare_difficulty ;
3336: CALL 0 0 0
// InitNorthBase ;
3340: CALL 21008 0 0
// Init ;
3344: CALL 411 0 0
// end ;
3348: END
// on UnitDestroyed ( un ) do begin if un = Mikhail then
3349: LD_VAR 0 1
3353: PUSH
3354: LD_EXP 65
3358: EQUAL
3359: IFFALSE 3365
// SA_MikhailKilled ;
3361: CALL 23146 0 0
// end ; end_of_file
3365: PPOPN 1
3367: END
// export Speaker ; var Byl_u_zakladny1 , Followed , Mikhails_outcome , Mikhail_status , end_of_m ; var rsol , rv , tiger , sour , target_of_escape , attacker ; export JMMInVehicle , CyrusInVehicle ; export function WaitTask ( list_of_units , reaction ) ; var i , busy ; begin
3368: LD_INT 0
3370: PPUSH
3371: PPUSH
3372: PPUSH
// wait ( 2 ) ;
3373: LD_INT 2
3375: PPUSH
3376: CALL_OW 67
// repeat busy = false ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// for i in list_of_units do
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_VAR 0 1
3397: PUSH
3398: FOR_IN
3399: IFFALSE 3433
// if IsOk ( i ) then
3401: LD_VAR 0 4
3405: PPUSH
3406: CALL_OW 302
3410: IFFALSE 3431
// if HasTask ( i ) then
3412: LD_VAR 0 4
3416: PPUSH
3417: CALL_OW 314
3421: IFFALSE 3431
// busy = true ;
3423: LD_ADDR_VAR 0 5
3427: PUSH
3428: LD_INT 1
3430: ST_TO_ADDR
3431: GO 3398
3433: POP
3434: POP
// if busy then
3435: LD_VAR 0 5
3439: IFFALSE 3454
// wait ( 0 0$1 * reaction ) ;
3441: LD_INT 35
3443: PUSH
3444: LD_VAR 0 2
3448: MUL
3449: PPUSH
3450: CALL_OW 67
// until not ( busy ) ;
3454: LD_VAR 0 5
3458: NOT
3459: IFFALSE 3380
// end ;
3461: LD_VAR 0 3
3465: RET
// every 0 0$1 trigger not ( test ) do var sold , alive , Un , hlp ;
3466: LD_EXP 1
3470: NOT
3471: IFFALSE 6892
3473: GO 3475
3475: DISABLE
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
3480: PPUSH
3481: PPUSH
// begin hlp = tick ;
3482: LD_ADDR_VAR 0 4
3486: PUSH
3487: LD_OWVAR 1
3491: ST_TO_ADDR
// IngameOn ;
3492: CALL_OW 8
// Dialogue_Number = 1 ;
3496: LD_ADDR_EXP 101
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
// if IsOk ( Bobby ) or IsOk ( Cyrus ) then
3504: LD_EXP 9
3508: PPUSH
3509: CALL_OW 302
3513: PUSH
3514: LD_EXP 8
3518: PPUSH
3519: CALL_OW 302
3523: OR
3524: IFFALSE 5574
// begin alive = [ ] ;
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: EMPTY
3532: ST_TO_ADDR
// Speaker = [ ] ;
3533: LD_ADDR_EXP 117
3537: PUSH
3538: EMPTY
3539: ST_TO_ADDR
// if IsOk ( Bobby ) then
3540: LD_EXP 9
3544: PPUSH
3545: CALL_OW 302
3549: IFFALSE 3567
// alive = alive ^ Bobby ;
3551: LD_ADDR_VAR 0 2
3555: PUSH
3556: LD_VAR 0 2
3560: PUSH
3561: LD_EXP 9
3565: ADD
3566: ST_TO_ADDR
// if IsOk ( Cyrus ) then
3567: LD_EXP 8
3571: PPUSH
3572: CALL_OW 302
3576: IFFALSE 3594
// alive = alive ^ Cyrus ;
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: LD_VAR 0 2
3587: PUSH
3588: LD_EXP 8
3592: ADD
3593: ST_TO_ADDR
// if IsOk ( Bobby ) and not ( Skip ) then
3594: LD_EXP 9
3598: PPUSH
3599: CALL_OW 302
3603: PUSH
3604: LD_EXP 102
3608: NOT
3609: AND
3610: IFFALSE 3653
// if IsOk ( Cyrus ) then
3612: LD_EXP 8
3616: PPUSH
3617: CALL_OW 302
3621: IFFALSE 3639
// AddComTurnUnit ( Bobby , Cyrus ) else
3623: LD_EXP 9
3627: PPUSH
3628: LD_EXP 8
3632: PPUSH
3633: CALL_OW 179
3637: GO 3653
// AddComTurnUnit ( Bobby , John ) ;
3639: LD_EXP 9
3643: PPUSH
3644: LD_EXP 7
3648: PPUSH
3649: CALL_OW 179
// if IsOk ( Bobby ) and not ( Skip ) then
3653: LD_EXP 9
3657: PPUSH
3658: CALL_OW 302
3662: PUSH
3663: LD_EXP 102
3667: NOT
3668: AND
3669: IFFALSE 3683
// AddComWait ( Bobby , 0 0$1 ) ;
3671: LD_EXP 9
3675: PPUSH
3676: LD_INT 35
3678: PPUSH
3679: CALL_OW 202
// if IsOk ( Bobby ) and not ( Skip ) then
3683: LD_EXP 9
3687: PPUSH
3688: CALL_OW 302
3692: PUSH
3693: LD_EXP 102
3697: NOT
3698: AND
3699: IFFALSE 3716
// AddComMoveXY ( Bobby , 39 , 67 ) ;
3701: LD_EXP 9
3705: PPUSH
3706: LD_INT 39
3708: PPUSH
3709: LD_INT 67
3711: PPUSH
3712: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
3716: LD_EXP 9
3720: PPUSH
3721: CALL_OW 302
3725: PUSH
3726: LD_EXP 102
3730: NOT
3731: AND
3732: IFFALSE 3748
// AddComTurnUnit ( Bobby , John ) ;
3734: LD_EXP 9
3738: PPUSH
3739: LD_EXP 7
3743: PPUSH
3744: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
3748: LD_EXP 8
3752: PPUSH
3753: CALL_OW 302
3757: PUSH
3758: LD_EXP 102
3762: NOT
3763: AND
3764: IFFALSE 3778
// ComWait ( Cyrus , 0 0$0.5 ) ;
3766: LD_EXP 8
3770: PPUSH
3771: LD_INT 18
3773: PPUSH
3774: CALL_OW 142
// if IsOk ( Cyrus ) and not ( Skip ) then
3778: LD_EXP 8
3782: PPUSH
3783: CALL_OW 302
3787: PUSH
3788: LD_EXP 102
3792: NOT
3793: AND
3794: IFFALSE 3811
// AddComMoveXY ( Cyrus , 41 , 71 ) ;
3796: LD_EXP 8
3800: PPUSH
3801: LD_INT 41
3803: PPUSH
3804: LD_INT 71
3806: PPUSH
3807: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
3811: LD_EXP 8
3815: PPUSH
3816: CALL_OW 302
3820: PUSH
3821: LD_EXP 102
3825: NOT
3826: AND
3827: IFFALSE 3841
// AddComWait ( Cyrus , 0 0$1 ) ;
3829: LD_EXP 8
3833: PPUSH
3834: LD_INT 35
3836: PPUSH
3837: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
3841: LD_EXP 7
3845: PPUSH
3846: CALL_OW 302
3850: PUSH
3851: LD_EXP 102
3855: NOT
3856: AND
3857: IFFALSE 3874
// ComMoveXY ( John , 47 , 68 ) ;
3859: LD_EXP 7
3863: PPUSH
3864: LD_INT 47
3866: PPUSH
3867: LD_INT 68
3869: PPUSH
3870: CALL_OW 111
// if IsOk ( John ) and not ( Skip ) then
3874: LD_EXP 7
3878: PPUSH
3879: CALL_OW 302
3883: PUSH
3884: LD_EXP 102
3888: NOT
3889: AND
3890: IFFALSE 3933
// if IsOk ( Bobby ) then
3892: LD_EXP 9
3896: PPUSH
3897: CALL_OW 302
3901: IFFALSE 3919
// AddComTurnUnit ( John , Bobby ) else
3903: LD_EXP 7
3907: PPUSH
3908: LD_EXP 9
3912: PPUSH
3913: CALL_OW 179
3917: GO 3933
// AddComTurnUnit ( John , Cyrus ) ;
3919: LD_EXP 7
3923: PPUSH
3924: LD_EXP 8
3928: PPUSH
3929: CALL_OW 179
// Un = alive [ Rand ( 1 , alive ) ] ;
3933: LD_ADDR_VAR 0 3
3937: PUSH
3938: LD_VAR 0 2
3942: PUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if not ( Skip ) then
3957: LD_EXP 102
3961: NOT
3962: IFFALSE 3999
// if ( Un = Bobby ) and IsOk ( Bobby ) then
3964: LD_VAR 0 3
3968: PUSH
3969: LD_EXP 9
3973: EQUAL
3974: PUSH
3975: LD_EXP 9
3979: PPUSH
3980: CALL_OW 302
3984: AND
3985: IFFALSE 3999
// Say ( Bobby , D1a-Bobby-1 ) ;
3987: LD_EXP 9
3991: PPUSH
3992: LD_STRING D1a-Bobby-1
3994: PPUSH
3995: CALL_OW 88
// if not ( Skip ) then
3999: LD_EXP 102
4003: NOT
4004: IFFALSE 4041
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
4006: LD_VAR 0 3
4010: PUSH
4011: LD_EXP 8
4015: EQUAL
4016: PUSH
4017: LD_EXP 8
4021: PPUSH
4022: CALL_OW 302
4026: AND
4027: IFFALSE 4041
// Say ( Cyrus , D1a-Cyrus-1 ) ;
4029: LD_EXP 8
4033: PPUSH
4034: LD_STRING D1a-Cyrus-1
4036: PPUSH
4037: CALL_OW 88
// if IsOk ( Bobby ) and not ( Skip ) then
4041: LD_EXP 9
4045: PPUSH
4046: CALL_OW 302
4050: PUSH
4051: LD_EXP 102
4055: NOT
4056: AND
4057: IFFALSE 4074
// ComMoveXY ( Bobby , 47 , 70 ) ;
4059: LD_EXP 9
4063: PPUSH
4064: LD_INT 47
4066: PPUSH
4067: LD_INT 70
4069: PPUSH
4070: CALL_OW 111
// if IsOk ( Bobby ) and not ( Skip ) then
4074: LD_EXP 9
4078: PPUSH
4079: CALL_OW 302
4083: PUSH
4084: LD_EXP 102
4088: NOT
4089: AND
4090: IFFALSE 4104
// AddComWait ( Bobby , 0 0$0.5 ) ;
4092: LD_EXP 9
4096: PPUSH
4097: LD_INT 18
4099: PPUSH
4100: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4104: LD_EXP 8
4108: PPUSH
4109: CALL_OW 302
4113: PUSH
4114: LD_EXP 102
4118: NOT
4119: AND
4120: IFFALSE 4137
// AddComMoveXY ( Cyrus , 43 , 69 ) ;
4122: LD_EXP 8
4126: PPUSH
4127: LD_INT 43
4129: PPUSH
4130: LD_INT 69
4132: PPUSH
4133: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
4137: LD_EXP 8
4141: PPUSH
4142: CALL_OW 302
4146: PUSH
4147: LD_EXP 102
4151: NOT
4152: AND
4153: IFFALSE 4167
// AddComWait ( Cyrus , 0 0$0.5 ) ;
4155: LD_EXP 8
4159: PPUSH
4160: LD_INT 18
4162: PPUSH
4163: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4167: LD_EXP 8
4171: PPUSH
4172: CALL_OW 302
4176: PUSH
4177: LD_EXP 102
4181: NOT
4182: AND
4183: IFFALSE 4226
// if IsOk ( Bobby ) then
4185: LD_EXP 9
4189: PPUSH
4190: CALL_OW 302
4194: IFFALSE 4212
// AddComTurnUnit ( Cyrus , Bobby ) else
4196: LD_EXP 8
4200: PPUSH
4201: LD_EXP 9
4205: PPUSH
4206: CALL_OW 179
4210: GO 4226
// AddComTurnUnit ( Cyrus , John ) ;
4212: LD_EXP 8
4216: PPUSH
4217: LD_EXP 7
4221: PPUSH
4222: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4226: LD_EXP 7
4230: PPUSH
4231: CALL_OW 302
4235: PUSH
4236: LD_EXP 102
4240: NOT
4241: AND
4242: IFFALSE 4256
// AddComWait ( John , 0 0$5 ) ;
4244: LD_EXP 7
4248: PPUSH
4249: LD_INT 175
4251: PPUSH
4252: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4256: LD_EXP 7
4260: PPUSH
4261: CALL_OW 302
4265: PUSH
4266: LD_EXP 102
4270: NOT
4271: AND
4272: IFFALSE 4289
// AddComMoveXY ( John , 36 , 63 ) ;
4274: LD_EXP 7
4278: PPUSH
4279: LD_INT 36
4281: PPUSH
4282: LD_INT 63
4284: PPUSH
4285: CALL_OW 171
// if IsOk ( John ) and not ( Skip ) then
4289: LD_EXP 7
4293: PPUSH
4294: CALL_OW 302
4298: PUSH
4299: LD_EXP 102
4303: NOT
4304: AND
4305: IFFALSE 4348
// if IsOk ( Cyrus ) then
4307: LD_EXP 8
4311: PPUSH
4312: CALL_OW 302
4316: IFFALSE 4334
// AddComTurnUnit ( John , Cyrus ) else
4318: LD_EXP 7
4322: PPUSH
4323: LD_EXP 8
4327: PPUSH
4328: CALL_OW 179
4332: GO 4348
// AddComTurnUnit ( John , Bobby ) ;
4334: LD_EXP 7
4338: PPUSH
4339: LD_EXP 9
4343: PPUSH
4344: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4348: LD_EXP 7
4352: PPUSH
4353: CALL_OW 302
4357: PUSH
4358: LD_EXP 102
4362: NOT
4363: AND
4364: IFFALSE 4378
// Say ( John , D1a-JMM-1 ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_STRING D1a-JMM-1
4373: PPUSH
4374: CALL_OW 88
// Un = alive [ Rand ( 1 , alive ) ] ;
4378: LD_ADDR_VAR 0 3
4382: PUSH
4383: LD_VAR 0 2
4387: PUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_VAR 0 2
4395: PPUSH
4396: CALL_OW 12
4400: ARRAY
4401: ST_TO_ADDR
// if not ( Skip ) then
4402: LD_EXP 102
4406: NOT
4407: IFFALSE 4444
// if ( Un = Bobby ) and IsOk ( Bobby ) then
4409: LD_VAR 0 3
4413: PUSH
4414: LD_EXP 9
4418: EQUAL
4419: PUSH
4420: LD_EXP 9
4424: PPUSH
4425: CALL_OW 302
4429: AND
4430: IFFALSE 4444
// Say ( Bobby , D1a-Bobby-2 ) ;
4432: LD_EXP 9
4436: PPUSH
4437: LD_STRING D1a-Bobby-2
4439: PPUSH
4440: CALL_OW 88
// if not ( Skip ) then
4444: LD_EXP 102
4448: NOT
4449: IFFALSE 4486
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
4451: LD_VAR 0 3
4455: PUSH
4456: LD_EXP 8
4460: EQUAL
4461: PUSH
4462: LD_EXP 8
4466: PPUSH
4467: CALL_OW 302
4471: AND
4472: IFFALSE 4486
// Say ( Cyrus , D1a-Cyrus-2 ) ;
4474: LD_EXP 8
4478: PPUSH
4479: LD_STRING D1a-Cyrus-2
4481: PPUSH
4482: CALL_OW 88
// CenterOnUnits ( [ John , Lisa ] ) ;
4486: LD_EXP 7
4490: PUSH
4491: LD_EXP 12
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PPUSH
4500: CALL_OW 85
// if IsOk ( Bobby ) and not ( Skip ) then
4504: LD_EXP 9
4508: PPUSH
4509: CALL_OW 302
4513: PUSH
4514: LD_EXP 102
4518: NOT
4519: AND
4520: IFFALSE 4536
// AddComTurnUnit ( Bobby , John ) ;
4522: LD_EXP 9
4526: PPUSH
4527: LD_EXP 7
4531: PPUSH
4532: CALL_OW 179
// if IsOk ( Bobby ) and not ( Skip ) then
4536: LD_EXP 9
4540: PPUSH
4541: CALL_OW 302
4545: PUSH
4546: LD_EXP 102
4550: NOT
4551: AND
4552: IFFALSE 4569
// AddComMoveXY ( Bobby , 42 , 69 ) ;
4554: LD_EXP 9
4558: PPUSH
4559: LD_INT 42
4561: PPUSH
4562: LD_INT 69
4564: PPUSH
4565: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
4569: LD_EXP 9
4573: PPUSH
4574: CALL_OW 302
4578: PUSH
4579: LD_EXP 102
4583: NOT
4584: AND
4585: IFFALSE 4599
// AddComWait ( Bobby , 0 0$0.3 ) ;
4587: LD_EXP 9
4591: PPUSH
4592: LD_INT 10
4594: PPUSH
4595: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4599: LD_EXP 8
4603: PPUSH
4604: CALL_OW 302
4608: PUSH
4609: LD_EXP 102
4613: NOT
4614: AND
4615: IFFALSE 4629
// AddComWait ( Cyrus , 0 0$2 ) ;
4617: LD_EXP 8
4621: PPUSH
4622: LD_INT 70
4624: PPUSH
4625: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4629: LD_EXP 8
4633: PPUSH
4634: CALL_OW 302
4638: PUSH
4639: LD_EXP 102
4643: NOT
4644: AND
4645: IFFALSE 4662
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
4647: LD_EXP 8
4651: PPUSH
4652: LD_INT 37
4654: PPUSH
4655: LD_INT 66
4657: PPUSH
4658: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
4662: LD_EXP 8
4666: PPUSH
4667: CALL_OW 302
4671: PUSH
4672: LD_EXP 102
4676: NOT
4677: AND
4678: IFFALSE 4694
// AddComTurnUnit ( Cyrus , John ) ;
4680: LD_EXP 8
4684: PPUSH
4685: LD_EXP 7
4689: PPUSH
4690: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4694: LD_EXP 7
4698: PPUSH
4699: CALL_OW 302
4703: PUSH
4704: LD_EXP 102
4708: NOT
4709: AND
4710: IFFALSE 4724
// AddComWait ( John , 0 0$3 ) ;
4712: LD_EXP 7
4716: PPUSH
4717: LD_INT 105
4719: PPUSH
4720: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4724: LD_EXP 7
4728: PPUSH
4729: CALL_OW 302
4733: PUSH
4734: LD_EXP 102
4738: NOT
4739: AND
4740: IFFALSE 4756
// AddComTurnUnit ( John , Lisa ) ;
4742: LD_EXP 7
4746: PPUSH
4747: LD_EXP 12
4751: PPUSH
4752: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4756: LD_EXP 7
4760: PPUSH
4761: CALL_OW 302
4765: PUSH
4766: LD_EXP 102
4770: NOT
4771: AND
4772: IFFALSE 4786
// AddComWait ( John , 0 0$1 ) ;
4774: LD_EXP 7
4778: PPUSH
4779: LD_INT 35
4781: PPUSH
4782: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4786: LD_EXP 7
4790: PPUSH
4791: CALL_OW 302
4795: PUSH
4796: LD_EXP 102
4800: NOT
4801: AND
4802: IFFALSE 4813
// AddComHold ( John ) ;
4804: LD_EXP 7
4808: PPUSH
4809: CALL_OW 200
// if IsOk ( John ) and not ( Skip ) then
4813: LD_EXP 7
4817: PPUSH
4818: CALL_OW 302
4822: PUSH
4823: LD_EXP 102
4827: NOT
4828: AND
4829: IFFALSE 4843
// Say ( John , D1a-JMM-2 ) ;
4831: LD_EXP 7
4835: PPUSH
4836: LD_STRING D1a-JMM-2
4838: PPUSH
4839: CALL_OW 88
// if IsOk ( John ) and not ( Skip ) then
4843: LD_EXP 7
4847: PPUSH
4848: CALL_OW 302
4852: PUSH
4853: LD_EXP 102
4857: NOT
4858: AND
4859: IFFALSE 4873
// ComWait ( John , 0 0$0.5 ) ;
4861: LD_EXP 7
4865: PPUSH
4866: LD_INT 18
4868: PPUSH
4869: CALL_OW 142
// if IsOk ( John ) and not ( Skip ) then
4873: LD_EXP 7
4877: PPUSH
4878: CALL_OW 302
4882: PUSH
4883: LD_EXP 102
4887: NOT
4888: AND
4889: IFFALSE 4905
// AddComTurnUnit ( John , Lisa ) ;
4891: LD_EXP 7
4895: PPUSH
4896: LD_EXP 12
4900: PPUSH
4901: CALL_OW 179
// if not ( IsAt ( John , 36 , 63 ) ) then
4905: LD_EXP 7
4909: PPUSH
4910: LD_INT 36
4912: PPUSH
4913: LD_INT 63
4915: PPUSH
4916: CALL_OW 307
4920: NOT
4921: IFFALSE 4952
// begin ComMoveXY ( John , 36 , 63 ) ;
4923: LD_EXP 7
4927: PPUSH
4928: LD_INT 36
4930: PPUSH
4931: LD_INT 63
4933: PPUSH
4934: CALL_OW 111
// AddComTurnUnit ( John , Lisa ) ;
4938: LD_EXP 7
4942: PPUSH
4943: LD_EXP 12
4947: PPUSH
4948: CALL_OW 179
// end ; if IsOk ( Bobby ) and not ( Skip ) then
4952: LD_EXP 9
4956: PPUSH
4957: CALL_OW 302
4961: PUSH
4962: LD_EXP 102
4966: NOT
4967: AND
4968: IFFALSE 4982
// ComWait ( Bobby , 0 0$1 ) ;
4970: LD_EXP 9
4974: PPUSH
4975: LD_INT 35
4977: PPUSH
4978: CALL_OW 142
// if IsOk ( Bobby ) and not ( Skip ) then
4982: LD_EXP 9
4986: PPUSH
4987: CALL_OW 302
4991: PUSH
4992: LD_EXP 102
4996: NOT
4997: AND
4998: IFFALSE 5014
// AddComTurnUnit ( Bobby , Lisa ) ;
5000: LD_EXP 9
5004: PPUSH
5005: LD_EXP 12
5009: PPUSH
5010: CALL_OW 179
// if IsOk ( Bobby ) and not ( IsAt ( Bobby , 36 , 61 ) ) then
5014: LD_EXP 9
5018: PPUSH
5019: CALL_OW 302
5023: PUSH
5024: LD_EXP 9
5028: PPUSH
5029: LD_INT 36
5031: PPUSH
5032: LD_INT 61
5034: PPUSH
5035: CALL_OW 307
5039: NOT
5040: AND
5041: IFFALSE 5058
// AddComMoveXY ( Bobby , 36 , 61 ) ;
5043: LD_EXP 9
5047: PPUSH
5048: LD_INT 36
5050: PPUSH
5051: LD_INT 61
5053: PPUSH
5054: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
5058: LD_EXP 9
5062: PPUSH
5063: CALL_OW 302
5067: PUSH
5068: LD_EXP 102
5072: NOT
5073: AND
5074: IFFALSE 5088
// AddComWait ( Bobby , 0 0$0.5 ) ;
5076: LD_EXP 9
5080: PPUSH
5081: LD_INT 18
5083: PPUSH
5084: CALL_OW 202
// if IsOk ( Bobby ) and not ( Skip ) then
5088: LD_EXP 9
5092: PPUSH
5093: CALL_OW 302
5097: PUSH
5098: LD_EXP 102
5102: NOT
5103: AND
5104: IFFALSE 5120
// AddComTurnUnit ( Bobby , Lisa ) ;
5106: LD_EXP 9
5110: PPUSH
5111: LD_EXP 12
5115: PPUSH
5116: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
5120: LD_EXP 8
5124: PPUSH
5125: CALL_OW 302
5129: PUSH
5130: LD_EXP 102
5134: NOT
5135: AND
5136: IFFALSE 5150
// ComWait ( Cyrus , 0 0$1 ) ;
5138: LD_EXP 8
5142: PPUSH
5143: LD_INT 35
5145: PPUSH
5146: CALL_OW 142
// if IsOk ( Cyrus ) and not ( Skip ) then
5150: LD_EXP 8
5154: PPUSH
5155: CALL_OW 302
5159: PUSH
5160: LD_EXP 102
5164: NOT
5165: AND
5166: IFFALSE 5182
// AddComTurnUnit ( Cyrus , Lisa ) ;
5168: LD_EXP 8
5172: PPUSH
5173: LD_EXP 12
5177: PPUSH
5178: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
5182: LD_EXP 8
5186: PPUSH
5187: CALL_OW 302
5191: PUSH
5192: LD_EXP 102
5196: NOT
5197: AND
5198: IFFALSE 5212
// AddComWait ( Cyrus , 0 0$1 ) ;
5200: LD_EXP 8
5204: PPUSH
5205: LD_INT 35
5207: PPUSH
5208: CALL_OW 202
// if IsOk ( Cyrus ) and not ( IsAt ( Cyrus , 35 , 63 ) ) then
5212: LD_EXP 8
5216: PPUSH
5217: CALL_OW 302
5221: PUSH
5222: LD_EXP 8
5226: PPUSH
5227: LD_INT 35
5229: PPUSH
5230: LD_INT 63
5232: PPUSH
5233: CALL_OW 307
5237: NOT
5238: AND
5239: IFFALSE 5256
// AddComMoveXY ( Cyrus , 35 , 63 ) ;
5241: LD_EXP 8
5245: PPUSH
5246: LD_INT 35
5248: PPUSH
5249: LD_INT 63
5251: PPUSH
5252: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
5256: LD_EXP 8
5260: PPUSH
5261: CALL_OW 302
5265: PUSH
5266: LD_EXP 102
5270: NOT
5271: AND
5272: IFFALSE 5288
// AddComTurnUnit ( Cyrus , Lisa ) ;
5274: LD_EXP 8
5278: PPUSH
5279: LD_EXP 12
5283: PPUSH
5284: CALL_OW 179
// if IsOk ( Lisa ) and not ( Skip ) then
5288: LD_EXP 12
5292: PPUSH
5293: CALL_OW 302
5297: PUSH
5298: LD_EXP 102
5302: NOT
5303: AND
5304: IFFALSE 5315
// CenterOnUnits ( Lisa ) ;
5306: LD_EXP 12
5310: PPUSH
5311: CALL_OW 85
// if IsOk ( Lisa ) and not ( Skip ) then
5315: LD_EXP 12
5319: PPUSH
5320: CALL_OW 302
5324: PUSH
5325: LD_EXP 102
5329: NOT
5330: AND
5331: IFFALSE 5345
// ComWait ( Lisa , 0 0$2 ) ;
5333: LD_EXP 12
5337: PPUSH
5338: LD_INT 70
5340: PPUSH
5341: CALL_OW 142
// AddComWalk ( Lisa ) ;
5345: LD_EXP 12
5349: PPUSH
5350: CALL_OW 198
// AddComMoveXY ( Lisa , 33 , 59 ) ;
5354: LD_EXP 12
5358: PPUSH
5359: LD_INT 33
5361: PPUSH
5362: LD_INT 59
5364: PPUSH
5365: CALL_OW 171
// AddComTurnUnit ( Lisa , John ) ;
5369: LD_EXP 12
5373: PPUSH
5374: LD_EXP 7
5378: PPUSH
5379: CALL_OW 179
// if not ( Skip ) then
5383: LD_EXP 102
5387: NOT
5388: IFFALSE 5402
// ComWait ( AmME1 , 0 0$3 ) ;
5390: LD_EXP 13
5394: PPUSH
5395: LD_INT 105
5397: PPUSH
5398: CALL_OW 142
// AddComWalk ( AmME1 ) ;
5402: LD_EXP 13
5406: PPUSH
5407: CALL_OW 198
// AddComMoveXY ( AmME1 , 31 , 58 ) ;
5411: LD_EXP 13
5415: PPUSH
5416: LD_INT 31
5418: PPUSH
5419: LD_INT 58
5421: PPUSH
5422: CALL_OW 171
// AddComTurnUnit ( AmME1 , John ) ;
5426: LD_EXP 13
5430: PPUSH
5431: LD_EXP 7
5435: PPUSH
5436: CALL_OW 179
// if not ( Skip ) then
5440: LD_EXP 102
5444: NOT
5445: IFFALSE 5459
// ComWait ( AmFE2 , 0 0$3 ) ;
5447: LD_EXP 14
5451: PPUSH
5452: LD_INT 105
5454: PPUSH
5455: CALL_OW 142
// AddComWalk ( AmFE2 ) ;
5459: LD_EXP 14
5463: PPUSH
5464: CALL_OW 198
// AddComMoveXY ( AmFE2 , 33 , 56 ) ;
5468: LD_EXP 14
5472: PPUSH
5473: LD_INT 33
5475: PPUSH
5476: LD_INT 56
5478: PPUSH
5479: CALL_OW 171
// AddComTurnUnit ( AmFE2 , John ) ;
5483: LD_EXP 14
5487: PPUSH
5488: LD_EXP 7
5492: PPUSH
5493: CALL_OW 179
// if Nick then
5497: LD_EXP 11
5501: IFFALSE 5560
// begin if not ( Skip ) then
5503: LD_EXP 102
5507: NOT
5508: IFFALSE 5522
// ComWait ( Nick , 0 0$2 ) ;
5510: LD_EXP 11
5514: PPUSH
5515: LD_INT 70
5517: PPUSH
5518: CALL_OW 142
// AddComWalk ( Nick ) ;
5522: LD_EXP 11
5526: PPUSH
5527: CALL_OW 198
// AddComMoveXY ( Nick , 34 , 57 ) ;
5531: LD_EXP 11
5535: PPUSH
5536: LD_INT 34
5538: PPUSH
5539: LD_INT 57
5541: PPUSH
5542: CALL_OW 171
// AddComTurnUnit ( Nick , John ) ;
5546: LD_EXP 11
5550: PPUSH
5551: LD_EXP 7
5555: PPUSH
5556: CALL_OW 179
// end ; Say ( Lisa , D1a-Lisa-2 ) ;
5560: LD_EXP 12
5564: PPUSH
5565: LD_STRING D1a-Lisa-2
5567: PPUSH
5568: CALL_OW 88
// end else
5572: GO 6301
// begin ComMoveXY ( John , 49 , 66 ) ;
5574: LD_EXP 7
5578: PPUSH
5579: LD_INT 49
5581: PPUSH
5582: LD_INT 66
5584: PPUSH
5585: CALL_OW 111
// AddComWait ( John , 0 0$0.5 ) ;
5589: LD_EXP 7
5593: PPUSH
5594: LD_INT 18
5596: PPUSH
5597: CALL_OW 202
// if not ( Skip ) then
5601: LD_EXP 102
5605: NOT
5606: IFFALSE 5615
// Wait ( 0 0$3 ) ;
5608: LD_INT 105
5610: PPUSH
5611: CALL_OW 67
// if not ( Skip ) then
5615: LD_EXP 102
5619: NOT
5620: IFFALSE 5634
// Say ( John , D1b-JMM-1 ) ;
5622: LD_EXP 7
5626: PPUSH
5627: LD_STRING D1b-JMM-1
5629: PPUSH
5630: CALL_OW 88
// if not ( Skip ) then
5634: LD_EXP 102
5638: NOT
5639: IFFALSE 5656
// AddComTurnXY ( John , 54 , 71 ) ;
5641: LD_EXP 7
5645: PPUSH
5646: LD_INT 54
5648: PPUSH
5649: LD_INT 71
5651: PPUSH
5652: CALL_OW 178
// if not ( Skip ) then
5656: LD_EXP 102
5660: NOT
5661: IFFALSE 5675
// AddComWait ( John , 0 0$0.7 ) ;
5663: LD_EXP 7
5667: PPUSH
5668: LD_INT 24
5670: PPUSH
5671: CALL_OW 202
// if not ( Skip ) then
5675: LD_EXP 102
5679: NOT
5680: IFFALSE 5697
// AddComTurnXY ( John , 55 , 63 ) ;
5682: LD_EXP 7
5686: PPUSH
5687: LD_INT 55
5689: PPUSH
5690: LD_INT 63
5692: PPUSH
5693: CALL_OW 178
// if not ( Skip ) then
5697: LD_EXP 102
5701: NOT
5702: IFFALSE 5716
// AddComWait ( John , 0 0$0.7 ) ;
5704: LD_EXP 7
5708: PPUSH
5709: LD_INT 24
5711: PPUSH
5712: CALL_OW 202
// if not ( Skip ) then
5716: LD_EXP 102
5720: NOT
5721: IFFALSE 5738
// AddComMoveXY ( John , 45 , 62 ) ;
5723: LD_EXP 7
5727: PPUSH
5728: LD_INT 45
5730: PPUSH
5731: LD_INT 62
5733: PPUSH
5734: CALL_OW 171
// if not ( Skip ) then
5738: LD_EXP 102
5742: NOT
5743: IFFALSE 5760
// AddComTurnXY ( John , 52 , 60 ) ;
5745: LD_EXP 7
5749: PPUSH
5750: LD_INT 52
5752: PPUSH
5753: LD_INT 60
5755: PPUSH
5756: CALL_OW 178
// if not ( Skip ) then
5760: LD_EXP 102
5764: NOT
5765: IFFALSE 5779
// AddComWait ( John , 0 0$1 ) ;
5767: LD_EXP 7
5771: PPUSH
5772: LD_INT 35
5774: PPUSH
5775: CALL_OW 202
// if not ( Skip ) then
5779: LD_EXP 102
5783: NOT
5784: IFFALSE 5801
// AddComTurnXY ( John , 37 , 48 ) ;
5786: LD_EXP 7
5790: PPUSH
5791: LD_INT 37
5793: PPUSH
5794: LD_INT 48
5796: PPUSH
5797: CALL_OW 178
// if not ( Skip ) then
5801: LD_EXP 102
5805: NOT
5806: IFFALSE 5820
// AddComWait ( John , 0 0$0.5 ) ;
5808: LD_EXP 7
5812: PPUSH
5813: LD_INT 18
5815: PPUSH
5816: CALL_OW 202
// if not ( Skip ) then
5820: LD_EXP 102
5824: NOT
5825: IFFALSE 5842
// AddComTurnXY ( John , 36 , 60 ) ;
5827: LD_EXP 7
5831: PPUSH
5832: LD_INT 36
5834: PPUSH
5835: LD_INT 60
5837: PPUSH
5838: CALL_OW 178
// if not ( Skip ) then
5842: LD_EXP 102
5846: NOT
5847: IFFALSE 5861
// AddComWait ( John , 0 0$1 ) ;
5849: LD_EXP 7
5853: PPUSH
5854: LD_INT 35
5856: PPUSH
5857: CALL_OW 202
// if not ( Skip ) then
5861: LD_EXP 102
5865: NOT
5866: IFFALSE 5883
// AddComMoveXY ( John , 41 , 65 ) ;
5868: LD_EXP 7
5872: PPUSH
5873: LD_INT 41
5875: PPUSH
5876: LD_INT 65
5878: PPUSH
5879: CALL_OW 171
// AddComMoveXY ( John , 36 , 61 ) ;
5883: LD_EXP 7
5887: PPUSH
5888: LD_INT 36
5890: PPUSH
5891: LD_INT 61
5893: PPUSH
5894: CALL_OW 171
// if not ( Skip ) then
5898: LD_EXP 102
5902: NOT
5903: IFFALSE 5920
// AddComTurnXY ( John , 29 , 54 ) ;
5905: LD_EXP 7
5909: PPUSH
5910: LD_INT 29
5912: PPUSH
5913: LD_INT 54
5915: PPUSH
5916: CALL_OW 178
// while not ( GetDistUnitXY ( John , 36 , 61 ) < 2 ) do
5920: LD_EXP 7
5924: PPUSH
5925: LD_INT 36
5927: PPUSH
5928: LD_INT 61
5930: PPUSH
5931: CALL_OW 297
5935: PUSH
5936: LD_INT 2
5938: LESS
5939: NOT
5940: IFFALSE 5951
// Wait ( 0 0$0.2 ) ;
5942: LD_INT 7
5944: PPUSH
5945: CALL_OW 67
5949: GO 5920
// if not ( Skip ) then
5951: LD_EXP 102
5955: NOT
5956: IFFALSE 5967
// AddComCrawl ( John ) ;
5958: LD_EXP 7
5962: PPUSH
5963: CALL_OW 197
// CenterOnXY ( GetX ( Lisa ) - 1 , GetY ( Lisa ) - 3 ) ;
5967: LD_EXP 12
5971: PPUSH
5972: CALL_OW 250
5976: PUSH
5977: LD_INT 1
5979: MINUS
5980: PPUSH
5981: LD_EXP 12
5985: PPUSH
5986: CALL_OW 251
5990: PUSH
5991: LD_INT 3
5993: MINUS
5994: PPUSH
5995: CALL_OW 84
// Say ( John , D1b-JMM-1a ) ;
5999: LD_EXP 7
6003: PPUSH
6004: LD_STRING D1b-JMM-1a
6006: PPUSH
6007: CALL_OW 88
// if not ( Skip ) then
6011: LD_EXP 102
6015: NOT
6016: IFFALSE 6030
// ComWait ( John , 0 0$3 ) ;
6018: LD_EXP 7
6022: PPUSH
6023: LD_INT 105
6025: PPUSH
6026: CALL_OW 142
// AddComWalk ( John ) ;
6030: LD_EXP 7
6034: PPUSH
6035: CALL_OW 198
// AddComTurnUnit ( John , Lisa ) ;
6039: LD_EXP 7
6043: PPUSH
6044: LD_EXP 12
6048: PPUSH
6049: CALL_OW 179
// if not ( Skip ) then
6053: LD_EXP 102
6057: NOT
6058: IFFALSE 6072
// ComWait ( Lisa , 0 0$0.5 ) ;
6060: LD_EXP 12
6064: PPUSH
6065: LD_INT 18
6067: PPUSH
6068: CALL_OW 142
// AddComWalk ( Lisa ) ;
6072: LD_EXP 12
6076: PPUSH
6077: CALL_OW 198
// AddComMoveXY ( Lisa , 33 , 59 ) ;
6081: LD_EXP 12
6085: PPUSH
6086: LD_INT 33
6088: PPUSH
6089: LD_INT 59
6091: PPUSH
6092: CALL_OW 171
// AddComTurnUnit ( Lisa , John ) ;
6096: LD_EXP 12
6100: PPUSH
6101: LD_EXP 7
6105: PPUSH
6106: CALL_OW 179
// if not ( Skip ) then
6110: LD_EXP 102
6114: NOT
6115: IFFALSE 6129
// ComWait ( AmME1 , 0 0$1 ) ;
6117: LD_EXP 13
6121: PPUSH
6122: LD_INT 35
6124: PPUSH
6125: CALL_OW 142
// AddComWalk ( AmME1 ) ;
6129: LD_EXP 13
6133: PPUSH
6134: CALL_OW 198
// AddComMoveXY ( AmME1 , 31 , 58 ) ;
6138: LD_EXP 13
6142: PPUSH
6143: LD_INT 31
6145: PPUSH
6146: LD_INT 58
6148: PPUSH
6149: CALL_OW 171
// AddComTurnUnit ( AmME1 , John ) ;
6153: LD_EXP 13
6157: PPUSH
6158: LD_EXP 7
6162: PPUSH
6163: CALL_OW 179
// if not ( Skip ) then
6167: LD_EXP 102
6171: NOT
6172: IFFALSE 6186
// ComWait ( AmFE2 , 0 0$1 ) ;
6174: LD_EXP 14
6178: PPUSH
6179: LD_INT 35
6181: PPUSH
6182: CALL_OW 142
// AddComWalk ( AmFE2 ) ;
6186: LD_EXP 14
6190: PPUSH
6191: CALL_OW 198
// AddComMoveXY ( AmFE2 , 33 , 56 ) ;
6195: LD_EXP 14
6199: PPUSH
6200: LD_INT 33
6202: PPUSH
6203: LD_INT 56
6205: PPUSH
6206: CALL_OW 171
// AddComTurnUnit ( AmFE2 , John ) ;
6210: LD_EXP 14
6214: PPUSH
6215: LD_EXP 7
6219: PPUSH
6220: CALL_OW 179
// if Nick then
6224: LD_EXP 11
6228: IFFALSE 6268
// begin AddComWalk ( Nick ) ;
6230: LD_EXP 11
6234: PPUSH
6235: CALL_OW 198
// AddComMoveXY ( Nick , 34 , 57 ) ;
6239: LD_EXP 11
6243: PPUSH
6244: LD_INT 34
6246: PPUSH
6247: LD_INT 57
6249: PPUSH
6250: CALL_OW 171
// AddComTurnUnit ( Nick , John ) ;
6254: LD_EXP 11
6258: PPUSH
6259: LD_EXP 7
6263: PPUSH
6264: CALL_OW 179
// end ; if not ( Skip ) then
6268: LD_EXP 102
6272: NOT
6273: IFFALSE 6282
// Wait ( 0 0$1 ) ;
6275: LD_INT 35
6277: PPUSH
6278: CALL_OW 67
// if not ( Skip ) then
6282: LD_EXP 102
6286: NOT
6287: IFFALSE 6301
// Say ( Lisa , D1b-Lisa-1 ) ;
6289: LD_EXP 12
6293: PPUSH
6294: LD_STRING D1b-Lisa-1
6296: PPUSH
6297: CALL_OW 88
// end ; if not ( Skip ) then
6301: LD_EXP 102
6305: NOT
6306: IFFALSE 6320
// Say ( John , D1-JMM-1 ) ;
6308: LD_EXP 7
6312: PPUSH
6313: LD_STRING D1-JMM-1
6315: PPUSH
6316: CALL_OW 88
// if not ( Skip ) then
6320: LD_EXP 102
6324: NOT
6325: IFFALSE 6339
// Say ( Lisa , D1-Lisa-1 ) ;
6327: LD_EXP 12
6331: PPUSH
6332: LD_STRING D1-Lisa-1
6334: PPUSH
6335: CALL_OW 88
// if not ( Skip ) then
6339: LD_EXP 102
6343: NOT
6344: IFFALSE 6358
// Say ( John , D1-JMM-2 ) ;
6346: LD_EXP 7
6350: PPUSH
6351: LD_STRING D1-JMM-2
6353: PPUSH
6354: CALL_OW 88
// if not ( Skip ) then
6358: LD_EXP 102
6362: NOT
6363: IFFALSE 6377
// SayRadio ( Powell , D1-Pow-2 ) ;
6365: LD_EXP 16
6369: PPUSH
6370: LD_STRING D1-Pow-2
6372: PPUSH
6373: CALL_OW 94
// if not ( Skip ) and IsOk ( Cyrus ) then
6377: LD_EXP 102
6381: NOT
6382: PUSH
6383: LD_EXP 8
6387: PPUSH
6388: CALL_OW 302
6392: AND
6393: IFFALSE 6419
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
6395: LD_EXP 8
6399: PPUSH
6400: LD_STRING D1-Cyrus-2
6402: PPUSH
6403: CALL_OW 88
// Say ( John , D1-JMM-3 ) ;
6407: LD_EXP 7
6411: PPUSH
6412: LD_STRING D1-JMM-3
6414: PPUSH
6415: CALL_OW 88
// end ; if not ( Skip ) then
6419: LD_EXP 102
6423: NOT
6424: IFFALSE 6438
// SayRadio ( Powell , D1-Pow-3 ) ;
6426: LD_EXP 16
6430: PPUSH
6431: LD_STRING D1-Pow-3
6433: PPUSH
6434: CALL_OW 94
// if not ( Skip ) then
6438: LD_EXP 102
6442: NOT
6443: IFFALSE 6457
// Say ( John , D1-JMM-4 ) ;
6445: LD_EXP 7
6449: PPUSH
6450: LD_STRING D1-JMM-4
6452: PPUSH
6453: CALL_OW 88
// if not ( Skip ) then
6457: LD_EXP 102
6461: NOT
6462: IFFALSE 6476
// SayRadio ( Powell , D1-Pow-4 ) ;
6464: LD_EXP 16
6468: PPUSH
6469: LD_STRING D1-Pow-4
6471: PPUSH
6472: CALL_OW 94
// if not ( Skip ) then
6476: LD_EXP 102
6480: NOT
6481: IFFALSE 6495
// SayRadio ( Powell , D1-Pow-4a ) ;
6483: LD_EXP 16
6487: PPUSH
6488: LD_STRING D1-Pow-4a
6490: PPUSH
6491: CALL_OW 94
// alive = [ ] ;
6495: LD_ADDR_VAR 0 2
6499: PUSH
6500: EMPTY
6501: ST_TO_ADDR
// Speaker = [ ] ;
6502: LD_ADDR_EXP 117
6506: PUSH
6507: EMPTY
6508: ST_TO_ADDR
// if IsOk ( Bobby ) then
6509: LD_EXP 9
6513: PPUSH
6514: CALL_OW 302
6518: IFFALSE 6536
// alive = alive ^ Bobby ;
6520: LD_ADDR_VAR 0 2
6524: PUSH
6525: LD_VAR 0 2
6529: PUSH
6530: LD_EXP 9
6534: ADD
6535: ST_TO_ADDR
// if IsOk ( Cyrus ) then
6536: LD_EXP 8
6540: PPUSH
6541: CALL_OW 302
6545: IFFALSE 6563
// alive = alive ^ Cyrus ;
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: LD_VAR 0 2
6556: PUSH
6557: LD_EXP 8
6561: ADD
6562: ST_TO_ADDR
// if ( IsOk ( Bobby ) or IsOk ( Cyrus ) ) then
6563: LD_EXP 9
6567: PPUSH
6568: CALL_OW 302
6572: PUSH
6573: LD_EXP 8
6577: PPUSH
6578: CALL_OW 302
6582: OR
6583: IFFALSE 6609
// Un = alive [ Rand ( 1 , alive ) ] ;
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: LD_VAR 0 2
6594: PUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_VAR 0 2
6602: PPUSH
6603: CALL_OW 12
6607: ARRAY
6608: ST_TO_ADDR
// if alive <> 0 then
6609: LD_VAR 0 2
6613: PUSH
6614: LD_INT 0
6616: NONEQUAL
6617: IFFALSE 6722
// begin if not ( Skip ) then
6619: LD_EXP 102
6623: NOT
6624: IFFALSE 6680
// if ( Un = Bobby ) and IsOk ( Bobby ) then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_EXP 9
6635: EQUAL
6636: PUSH
6637: LD_EXP 9
6641: PPUSH
6642: CALL_OW 302
6646: AND
6647: IFFALSE 6680
// begin Say ( Bobby , D1-Bobby-4 ) ;
6649: LD_EXP 9
6653: PPUSH
6654: LD_STRING D1-Bobby-4
6656: PPUSH
6657: CALL_OW 88
// if not ( Skip ) then
6661: LD_EXP 102
6665: NOT
6666: IFFALSE 6680
// Say ( Lisa , D1-Lisa-4 ) ;
6668: LD_EXP 12
6672: PPUSH
6673: LD_STRING D1-Lisa-4
6675: PPUSH
6676: CALL_OW 88
// end ; if not ( Skip ) then
6680: LD_EXP 102
6684: NOT
6685: IFFALSE 6722
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
6687: LD_VAR 0 3
6691: PUSH
6692: LD_EXP 8
6696: EQUAL
6697: PUSH
6698: LD_EXP 8
6702: PPUSH
6703: CALL_OW 302
6707: AND
6708: IFFALSE 6722
// Say ( Cyrus , D1-Cyrus-4 ) ;
6710: LD_EXP 8
6714: PPUSH
6715: LD_STRING D1-Cyrus-4
6717: PPUSH
6718: CALL_OW 88
// end ; if not ( Skip ) then
6722: LD_EXP 102
6726: NOT
6727: IFFALSE 6741
// Say ( John , D1-JMM-5 ) ;
6729: LD_EXP 7
6733: PPUSH
6734: LD_STRING D1-JMM-5
6736: PPUSH
6737: CALL_OW 88
// sold = FilterUnitsInArea ( Start , [ f_side , americans ] ) ;
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_INT 8
6748: PPUSH
6749: LD_INT 22
6751: PUSH
6752: LD_EXP 3
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 70
6765: ST_TO_ADDR
// IngameOff ;
6766: CALL_OW 9
// tick = hlp ;
6770: LD_ADDR_OWVAR 1
6774: PUSH
6775: LD_VAR 0 4
6779: ST_TO_ADDR
// Skip = false ;
6780: LD_ADDR_EXP 102
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// ComFree ( sold ) ;
6788: LD_VAR 0 1
6792: PPUSH
6793: CALL_OW 139
// ComFree ( John ) ;
6797: LD_EXP 7
6801: PPUSH
6802: CALL_OW 139
// wait ( 0 0$1 ) ;
6806: LD_INT 35
6808: PPUSH
6809: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
6813: LD_STRING M1
6815: PPUSH
6816: CALL_OW 337
// SaveForQuickRestart ;
6820: CALL_OW 22
// Hint ( Engineers ) ;
6824: LD_STRING Engineers
6826: PPUSH
6827: CALL_OW 339
// Hint ( Groups ) ;
6831: LD_STRING Groups
6833: PPUSH
6834: CALL_OW 339
// SetSide ( [ Lisa , AmME1 , AmFE2 ] , americans ) ;
6838: LD_EXP 12
6842: PUSH
6843: LD_EXP 13
6847: PUSH
6848: LD_EXP 14
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: PPUSH
6858: LD_EXP 3
6862: PPUSH
6863: CALL_OW 235
// if Nick then
6867: LD_EXP 11
6871: IFFALSE 6887
// SetSide ( Nick , americans ) ;
6873: LD_EXP 11
6877: PPUSH
6878: LD_EXP 3
6882: PPUSH
6883: CALL_OW 235
// enable ( Engineers_not_dead ) ;
6887: LD_EXP 83
6891: ENABLE_MARKED
// end ;
6892: PPOPN 4
6894: END
// every 0 0$1 trigger ( SeeArea ( americans , Dead_Am_1 ) > 0 ) do
6895: LD_EXP 3
6899: PPUSH
6900: LD_INT 18
6902: PPUSH
6903: CALL_OW 294
6907: PUSH
6908: LD_INT 0
6910: GREATER
6911: IFFALSE 7257
6913: GO 6915
6915: DISABLE
// begin hc_sex = sex_male ;
6916: LD_ADDR_OWVAR 27
6920: PUSH
6921: LD_INT 1
6923: ST_TO_ADDR
// hc_class = class_soldier ;
6924: LD_ADDR_OWVAR 28
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 1 ] ;
6932: LD_ADDR_OWVAR 31
6936: PUSH
6937: LD_INT 1
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 1
6945: PUSH
6946: LD_INT 1
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: ST_TO_ADDR
// hc_name =  ;
6955: LD_ADDR_OWVAR 26
6959: PUSH
6960: LD_STRING 
6962: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
6963: LD_ADDR_OWVAR 29
6967: PUSH
6968: LD_INT 10
6970: PUSH
6971: LD_INT 10
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: ST_TO_ADDR
// uc_side = americans1 ;
6978: LD_ADDR_OWVAR 20
6982: PUSH
6983: LD_EXP 4
6987: ST_TO_ADDR
// uc_nation = nation_american ;
6988: LD_ADDR_OWVAR 21
6992: PUSH
6993: LD_INT 1
6995: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
6996: LD_INT 0
6998: PPUSH
6999: LD_INT 1
7001: PPUSH
7002: LD_INT 0
7004: PPUSH
7005: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7009: LD_ADDR_OWVAR 24
7013: PUSH
7014: LD_INT 1
7016: PPUSH
7017: LD_INT 6
7019: PPUSH
7020: CALL_OW 12
7024: ST_TO_ADDR
// AmD1 = CreateHuman ;
7025: LD_ADDR_EXP 17
7029: PUSH
7030: CALL_OW 44
7034: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
7035: LD_INT 0
7037: PPUSH
7038: LD_INT 1
7040: PPUSH
7041: LD_INT 0
7043: PPUSH
7044: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7048: LD_ADDR_OWVAR 24
7052: PUSH
7053: LD_INT 1
7055: PPUSH
7056: LD_INT 6
7058: PPUSH
7059: CALL_OW 12
7063: ST_TO_ADDR
// AmD2 = CreateHuman ;
7064: LD_ADDR_EXP 18
7068: PUSH
7069: CALL_OW 44
7073: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
7074: LD_INT 0
7076: PPUSH
7077: LD_INT 1
7079: PPUSH
7080: LD_INT 0
7082: PPUSH
7083: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7087: LD_ADDR_OWVAR 24
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 6
7097: PPUSH
7098: CALL_OW 12
7102: ST_TO_ADDR
// AmD3 = CreateHuman ;
7103: LD_ADDR_EXP 19
7107: PUSH
7108: CALL_OW 44
7112: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
7113: LD_INT 0
7115: PPUSH
7116: LD_INT 1
7118: PPUSH
7119: LD_INT 0
7121: PPUSH
7122: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7126: LD_ADDR_OWVAR 24
7130: PUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 6
7136: PPUSH
7137: CALL_OW 12
7141: ST_TO_ADDR
// AmD4 = CreateHuman ;
7142: LD_ADDR_EXP 20
7146: PUSH
7147: CALL_OW 44
7151: ST_TO_ADDR
// SetLives ( [ AmD1 , AmD2 , AmD3 , AmD4 ] , 0 ) ;
7152: LD_EXP 17
7156: PUSH
7157: LD_EXP 18
7161: PUSH
7162: LD_EXP 19
7166: PUSH
7167: LD_EXP 20
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: CALL_OW 234
// PlaceUnitXY ( AmD1 , 27 , 15 , false ) ;
7185: LD_EXP 17
7189: PPUSH
7190: LD_INT 27
7192: PPUSH
7193: LD_INT 15
7195: PPUSH
7196: LD_INT 0
7198: PPUSH
7199: CALL_OW 48
// PlaceUnitXY ( AmD2 , 25 , 13 , false ) ;
7203: LD_EXP 18
7207: PPUSH
7208: LD_INT 25
7210: PPUSH
7211: LD_INT 13
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 48
// PlaceUnitXY ( AmD3 , 29 , 16 , false ) ;
7221: LD_EXP 19
7225: PPUSH
7226: LD_INT 29
7228: PPUSH
7229: LD_INT 16
7231: PPUSH
7232: LD_INT 0
7234: PPUSH
7235: CALL_OW 48
// PlaceUnitXY ( AmD4 , 27 , 14 , false ) ;
7239: LD_EXP 20
7243: PPUSH
7244: LD_INT 27
7246: PPUSH
7247: LD_INT 14
7249: PPUSH
7250: LD_INT 0
7252: PPUSH
7253: CALL_OW 48
// end ;
7257: END
// every 0 0$1 trigger ( SeeXY ( americans , 27 , 15 ) or SeeXY ( americans , 25 , 13 ) or SeeXY ( americans , 29 , 16 ) or SeeXY ( americans , 28 , 14 ) ) do var alive , speaker , Un ;
7258: LD_EXP 3
7262: PPUSH
7263: LD_INT 27
7265: PPUSH
7266: LD_INT 15
7268: PPUSH
7269: CALL_OW 293
7273: PUSH
7274: LD_EXP 3
7278: PPUSH
7279: LD_INT 25
7281: PPUSH
7282: LD_INT 13
7284: PPUSH
7285: CALL_OW 293
7289: OR
7290: PUSH
7291: LD_EXP 3
7295: PPUSH
7296: LD_INT 29
7298: PPUSH
7299: LD_INT 16
7301: PPUSH
7302: CALL_OW 293
7306: OR
7307: PUSH
7308: LD_EXP 3
7312: PPUSH
7313: LD_INT 28
7315: PPUSH
7316: LD_INT 14
7318: PPUSH
7319: CALL_OW 293
7323: OR
7324: IFFALSE 8183
7326: GO 7328
7328: DISABLE
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
// begin InGameOn ;
7334: CALL_OW 8
// CenterOnXY ( 27 , 15 ) ;
7338: LD_INT 27
7340: PPUSH
7341: LD_INT 15
7343: PPUSH
7344: CALL_OW 84
// if IsOk ( John ) then
7348: LD_EXP 7
7352: PPUSH
7353: CALL_OW 302
7357: IFFALSE 7398
// begin ComWalk ( John ) ;
7359: LD_EXP 7
7363: PPUSH
7364: CALL_OW 138
// ComMoveXY ( John , 24 , 14 ) ;
7368: LD_EXP 7
7372: PPUSH
7373: LD_INT 24
7375: PPUSH
7376: LD_INT 14
7378: PPUSH
7379: CALL_OW 111
// AddComTurnXY ( John , 27 , 15 ) ;
7383: LD_EXP 7
7387: PPUSH
7388: LD_INT 27
7390: PPUSH
7391: LD_INT 15
7393: PPUSH
7394: CALL_OW 178
// end ; if IsOk ( Lisa ) then
7398: LD_EXP 12
7402: PPUSH
7403: CALL_OW 302
7407: IFFALSE 7448
// begin ComWalk ( Lisa ) ;
7409: LD_EXP 12
7413: PPUSH
7414: CALL_OW 138
// ComMoveXY ( Lisa , 27 , 13 ) ;
7418: LD_EXP 12
7422: PPUSH
7423: LD_INT 27
7425: PPUSH
7426: LD_INT 13
7428: PPUSH
7429: CALL_OW 111
// AddComTurnXY ( Lisa , 28 , 14 ) ;
7433: LD_EXP 12
7437: PPUSH
7438: LD_INT 28
7440: PPUSH
7441: LD_INT 14
7443: PPUSH
7444: CALL_OW 178
// end ; if IsOk ( Bobby ) then
7448: LD_EXP 9
7452: PPUSH
7453: CALL_OW 302
7457: IFFALSE 7498
// begin ComWalk ( Bobby ) ;
7459: LD_EXP 9
7463: PPUSH
7464: CALL_OW 138
// ComMoveXY ( Bobby , 30 , 18 ) ;
7468: LD_EXP 9
7472: PPUSH
7473: LD_INT 30
7475: PPUSH
7476: LD_INT 18
7478: PPUSH
7479: CALL_OW 111
// AddComTurnXY ( Bobby , 29 , 16 ) ;
7483: LD_EXP 9
7487: PPUSH
7488: LD_INT 29
7490: PPUSH
7491: LD_INT 16
7493: PPUSH
7494: CALL_OW 178
// end ; if IsOk ( Cyrus ) then
7498: LD_EXP 8
7502: PPUSH
7503: CALL_OW 302
7507: IFFALSE 7548
// begin ComWalk ( Cyrus ) ;
7509: LD_EXP 8
7513: PPUSH
7514: CALL_OW 138
// ComMoveXY ( Cyrus , 27 , 16 ) ;
7518: LD_EXP 8
7522: PPUSH
7523: LD_INT 27
7525: PPUSH
7526: LD_INT 16
7528: PPUSH
7529: CALL_OW 111
// AddComTurnXY ( Cyrus , 27 , 15 ) ;
7533: LD_EXP 8
7537: PPUSH
7538: LD_INT 27
7540: PPUSH
7541: LD_INT 15
7543: PPUSH
7544: CALL_OW 178
// end ; if IsOk ( AmME1 ) then
7548: LD_EXP 13
7552: PPUSH
7553: CALL_OW 302
7557: IFFALSE 7598
// begin ComWalk ( AmME1 ) ;
7559: LD_EXP 13
7563: PPUSH
7564: CALL_OW 138
// ComMoveXY ( AmME1 , 27 , 14 ) ;
7568: LD_EXP 13
7572: PPUSH
7573: LD_INT 27
7575: PPUSH
7576: LD_INT 14
7578: PPUSH
7579: CALL_OW 111
// AddComTurnXY ( AmME1 , 28 , 14 ) ;
7583: LD_EXP 13
7587: PPUSH
7588: LD_INT 28
7590: PPUSH
7591: LD_INT 14
7593: PPUSH
7594: CALL_OW 178
// end ; if IsOk ( AmFE2 ) then
7598: LD_EXP 14
7602: PPUSH
7603: CALL_OW 302
7607: IFFALSE 7648
// begin ComWalk ( AmFE2 ) ;
7609: LD_EXP 14
7613: PPUSH
7614: CALL_OW 138
// ComMoveXY ( AmFE2 , 23 , 14 ) ;
7618: LD_EXP 14
7622: PPUSH
7623: LD_INT 23
7625: PPUSH
7626: LD_INT 14
7628: PPUSH
7629: CALL_OW 111
// AddComTurnXY ( AmFE2 , 25 , 13 ) ;
7633: LD_EXP 14
7637: PPUSH
7638: LD_INT 25
7640: PPUSH
7641: LD_INT 13
7643: PPUSH
7644: CALL_OW 178
// end ; if IsOk ( Khatam ) then
7648: LD_EXP 10
7652: PPUSH
7653: CALL_OW 302
7657: IFFALSE 7698
// begin ComWalk ( Khatam ) ;
7659: LD_EXP 10
7663: PPUSH
7664: CALL_OW 138
// ComMoveXY ( Khatam , 25 , 14 ) ;
7668: LD_EXP 10
7672: PPUSH
7673: LD_INT 25
7675: PPUSH
7676: LD_INT 14
7678: PPUSH
7679: CALL_OW 111
// AddComTurnXY ( Khatam , 25 , 13 ) ;
7683: LD_EXP 10
7687: PPUSH
7688: LD_INT 25
7690: PPUSH
7691: LD_INT 13
7693: PPUSH
7694: CALL_OW 178
// end ; if IsOk ( Nick ) then
7698: LD_EXP 11
7702: PPUSH
7703: CALL_OW 302
7707: IFFALSE 7748
// begin ComWalk ( Nick ) ;
7709: LD_EXP 11
7713: PPUSH
7714: CALL_OW 138
// ComMoveXY ( Nick , 24 , 16 ) ;
7718: LD_EXP 11
7722: PPUSH
7723: LD_INT 24
7725: PPUSH
7726: LD_INT 16
7728: PPUSH
7729: CALL_OW 111
// AddComTurnXY ( Nick , 25 , 13 ) ;
7733: LD_EXP 11
7737: PPUSH
7738: LD_INT 25
7740: PPUSH
7741: LD_INT 13
7743: PPUSH
7744: CALL_OW 178
// end ; alive = [ ] ;
7748: LD_ADDR_VAR 0 1
7752: PUSH
7753: EMPTY
7754: ST_TO_ADDR
// if IsOk ( Lisa ) then
7755: LD_EXP 12
7759: PPUSH
7760: CALL_OW 302
7764: IFFALSE 7782
// alive = alive ^ Lisa ;
7766: LD_ADDR_VAR 0 1
7770: PUSH
7771: LD_VAR 0 1
7775: PUSH
7776: LD_EXP 12
7780: ADD
7781: ST_TO_ADDR
// if IsOk ( Bobby ) then
7782: LD_EXP 9
7786: PPUSH
7787: CALL_OW 302
7791: IFFALSE 7809
// alive = alive ^ Bobby ;
7793: LD_ADDR_VAR 0 1
7797: PUSH
7798: LD_VAR 0 1
7802: PUSH
7803: LD_EXP 9
7807: ADD
7808: ST_TO_ADDR
// if IsOk ( Cyrus ) then
7809: LD_EXP 8
7813: PPUSH
7814: CALL_OW 302
7818: IFFALSE 7836
// alive = alive ^ Cyrus ;
7820: LD_ADDR_VAR 0 1
7824: PUSH
7825: LD_VAR 0 1
7829: PUSH
7830: LD_EXP 8
7834: ADD
7835: ST_TO_ADDR
// if IsOk ( AmME1 ) then
7836: LD_EXP 13
7840: PPUSH
7841: CALL_OW 302
7845: IFFALSE 7863
// alive = alive ^ AmME1 ;
7847: LD_ADDR_VAR 0 1
7851: PUSH
7852: LD_VAR 0 1
7856: PUSH
7857: LD_EXP 13
7861: ADD
7862: ST_TO_ADDR
// if IsOk ( AmFE2 ) then
7863: LD_EXP 14
7867: PPUSH
7868: CALL_OW 302
7872: IFFALSE 7890
// alive = alive ^ AmFE2 ;
7874: LD_ADDR_VAR 0 1
7878: PUSH
7879: LD_VAR 0 1
7883: PUSH
7884: LD_EXP 14
7888: ADD
7889: ST_TO_ADDR
// speaker = alive [ Rand ( 1 , alive ) ] ;
7890: LD_ADDR_VAR 0 2
7894: PUSH
7895: LD_VAR 0 1
7899: PUSH
7900: LD_INT 1
7902: PPUSH
7903: LD_VAR 0 1
7907: PPUSH
7908: CALL_OW 12
7912: ARRAY
7913: ST_TO_ADDR
// case speaker of Lisa :
7914: LD_VAR 0 2
7918: PUSH
7919: LD_EXP 12
7923: DOUBLE
7924: EQUAL
7925: IFTRUE 7929
7927: GO 7944
7929: POP
// Say ( Lisa , DCorpses-Lisa-1 ) ; Bobby :
7930: LD_EXP 12
7934: PPUSH
7935: LD_STRING DCorpses-Lisa-1
7937: PPUSH
7938: CALL_OW 88
7942: GO 8045
7944: LD_EXP 9
7948: DOUBLE
7949: EQUAL
7950: IFTRUE 7954
7952: GO 7969
7954: POP
// Say ( Bobby , DCorpses-Bobby-1 ) ; Cyrus :
7955: LD_EXP 9
7959: PPUSH
7960: LD_STRING DCorpses-Bobby-1
7962: PPUSH
7963: CALL_OW 88
7967: GO 8045
7969: LD_EXP 8
7973: DOUBLE
7974: EQUAL
7975: IFTRUE 7979
7977: GO 7994
7979: POP
// Say ( Cyrus , DCorpses-Cyrus-1 ) ; AmME1 :
7980: LD_EXP 8
7984: PPUSH
7985: LD_STRING DCorpses-Cyrus-1
7987: PPUSH
7988: CALL_OW 88
7992: GO 8045
7994: LD_EXP 13
7998: DOUBLE
7999: EQUAL
8000: IFTRUE 8004
8002: GO 8019
8004: POP
// Say ( AmME1 , DCorpses-Sol1-1 ) ; AmFE2 :
8005: LD_EXP 13
8009: PPUSH
8010: LD_STRING DCorpses-Sol1-1
8012: PPUSH
8013: CALL_OW 88
8017: GO 8045
8019: LD_EXP 14
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8044
8029: POP
// Say ( AmFE2 , DCorpses-FSol1-1 ) ; end ;
8030: LD_EXP 14
8034: PPUSH
8035: LD_STRING DCorpses-FSol1-1
8037: PPUSH
8038: CALL_OW 88
8042: GO 8045
8044: POP
// Say ( John , DCorpses-JMM-1 ) ;
8045: LD_EXP 7
8049: PPUSH
8050: LD_STRING DCorpses-JMM-1
8052: PPUSH
8053: CALL_OW 88
// if IsOk ( Khatam ) then
8057: LD_EXP 10
8061: PPUSH
8062: CALL_OW 302
8066: IFFALSE 8080
// Say ( Khatam , DCorpses-Khat-1 ) ;
8068: LD_EXP 10
8072: PPUSH
8073: LD_STRING DCorpses-Khat-1
8075: PPUSH
8076: CALL_OW 88
// IngameOff ;
8080: CALL_OW 9
// Say ( John , DCorpses-JMM-2 ) ;
8084: LD_EXP 7
8088: PPUSH
8089: LD_STRING DCorpses-JMM-2
8091: PPUSH
8092: CALL_OW 88
// Tested_Americans = [ John , Lisa , Bobby , Cyrus , Khatam , AmME1 , AmFE2 ] ;
8096: LD_ADDR_EXP 113
8100: PUSH
8101: LD_EXP 7
8105: PUSH
8106: LD_EXP 12
8110: PUSH
8111: LD_EXP 9
8115: PUSH
8116: LD_EXP 8
8120: PUSH
8121: LD_EXP 10
8125: PUSH
8126: LD_EXP 13
8130: PUSH
8131: LD_EXP 14
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: ST_TO_ADDR
// for Un in Tested_Americans do
8145: LD_ADDR_VAR 0 3
8149: PUSH
8150: LD_EXP 113
8154: PUSH
8155: FOR_IN
8156: IFFALSE 8181
// Init_Lives = Init_Lives ^ GetLives ( Un ) ;
8158: LD_ADDR_EXP 112
8162: PUSH
8163: LD_EXP 112
8167: PUSH
8168: LD_VAR 0 3
8172: PPUSH
8173: CALL_OW 256
8177: ADD
8178: ST_TO_ADDR
8179: GO 8155
8181: POP
8182: POP
// end ;
8183: PPOPN 3
8185: END
// every 0 0$4 do var all , i , pom ;
8186: GO 8188
8188: DISABLE
8189: LD_INT 0
8191: PPUSH
8192: PPUSH
8193: PPUSH
// begin pom = true ;
8194: LD_ADDR_VAR 0 3
8198: PUSH
8199: LD_INT 1
8201: ST_TO_ADDR
// if GetLives ( [ John , Cyrus , Bobby , Khatam , Lisa , AmME1 , AmFE2 , AmMSo3 , Nick ] ) < Initial_Lives - 1 then
8202: LD_EXP 7
8206: PUSH
8207: LD_EXP 8
8211: PUSH
8212: LD_EXP 9
8216: PUSH
8217: LD_EXP 10
8221: PUSH
8222: LD_EXP 12
8226: PUSH
8227: LD_EXP 13
8231: PUSH
8232: LD_EXP 14
8236: PUSH
8237: LD_EXP 15
8241: PUSH
8242: LD_EXP 11
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PPUSH
8258: CALL_OW 256
8262: PUSH
8263: LD_EXP 92
8267: PUSH
8268: LD_INT 1
8270: MINUS
8271: LESS
8272: IFFALSE 8304
// begin if holdfreemode then
8274: LD_OWVAR 73
8278: IFFALSE 8289
// Hint ( Hold2 ) else
8280: LD_STRING Hold2
8282: PPUSH
8283: CALL_OW 339
8287: GO 8296
// Hint ( Hold ) ;
8289: LD_STRING Hold
8291: PPUSH
8292: CALL_OW 339
// pom = false ;
8296: LD_ADDR_VAR 0 3
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ; if pom then
8304: LD_VAR 0 3
8308: IFFALSE 8311
// enable ;
8310: ENABLE
// end ;
8311: PPOPN 3
8313: END
// function Retreat ; var Un , i , Lives_Decreased ; begin
8314: LD_INT 0
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
// i = 1 ;
8320: LD_ADDR_VAR 0 3
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// for Un in Tested_Americans do
8328: LD_ADDR_VAR 0 2
8332: PUSH
8333: LD_EXP 113
8337: PUSH
8338: FOR_IN
8339: IFFALSE 8388
// begin if GetLives ( Un ) <> Init_Lives [ i ] then
8341: LD_VAR 0 2
8345: PPUSH
8346: CALL_OW 256
8350: PUSH
8351: LD_EXP 112
8355: PUSH
8356: LD_VAR 0 3
8360: ARRAY
8361: NONEQUAL
8362: IFFALSE 8372
// Lives_Decreased = true ;
8364: LD_ADDR_VAR 0 4
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// i = i + 1 ;
8372: LD_ADDR_VAR 0 3
8376: PUSH
8377: LD_VAR 0 3
8381: PUSH
8382: LD_INT 1
8384: PLUS
8385: ST_TO_ADDR
// end ;
8386: GO 8338
8388: POP
8389: POP
// if ( ( See ( americans , Brw1 ) or See ( americans , Brw2 ) or See ( americans , Brw3 ) ) and ( FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_vehicle ] ] ) = 0 ) and Lives_Decreased and not ( IsInArea ( John , hill ) ) ) then
8390: LD_EXP 3
8394: PPUSH
8395: LD_INT 29
8397: PPUSH
8398: CALL_OW 292
8402: PUSH
8403: LD_EXP 3
8407: PPUSH
8408: LD_INT 9
8410: PPUSH
8411: CALL_OW 292
8415: OR
8416: PUSH
8417: LD_EXP 3
8421: PPUSH
8422: LD_INT 30
8424: PPUSH
8425: CALL_OW 292
8429: OR
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_EXP 3
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: LD_INT 21
8445: PUSH
8446: LD_INT 2
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: PUSH
8462: LD_INT 0
8464: EQUAL
8465: AND
8466: PUSH
8467: LD_VAR 0 4
8471: AND
8472: PUSH
8473: LD_EXP 7
8477: PPUSH
8478: LD_INT 17
8480: PPUSH
8481: CALL_OW 308
8485: NOT
8486: AND
8487: IFFALSE 8499
// result = 1 else
8489: LD_ADDR_VAR 0 1
8493: PUSH
8494: LD_INT 1
8496: ST_TO_ADDR
8497: GO 8507
// result = 0 ;
8499: LD_ADDR_VAR 0 1
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// end ;
8507: LD_VAR 0 1
8511: RET
// every 0 0$2 trigger Retreat do
8512: CALL 8314 0 0
8516: IFFALSE 8541
8518: GO 8520
8520: DISABLE
// begin Byl_u_zakladny1 = true ;
8521: LD_ADDR_LOC 1
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// Say ( John , DX1-JMM-1 ) ;
8529: LD_EXP 7
8533: PPUSH
8534: LD_STRING DX1-JMM-1
8536: PPUSH
8537: CALL_OW 88
// end ;
8541: END
// every 0 0$1 trigger SeeXY ( americans , 75 , 70 ) or SeeXY ( americans , 77 , 73 ) or SeeXY ( americans , 77 , 69 ) or SeeXY ( americans , 78 , 71 ) do var Uns , Un ;
8542: LD_EXP 3
8546: PPUSH
8547: LD_INT 75
8549: PPUSH
8550: LD_INT 70
8552: PPUSH
8553: CALL_OW 293
8557: PUSH
8558: LD_EXP 3
8562: PPUSH
8563: LD_INT 77
8565: PPUSH
8566: LD_INT 73
8568: PPUSH
8569: CALL_OW 293
8573: OR
8574: PUSH
8575: LD_EXP 3
8579: PPUSH
8580: LD_INT 77
8582: PPUSH
8583: LD_INT 69
8585: PPUSH
8586: CALL_OW 293
8590: OR
8591: PUSH
8592: LD_EXP 3
8596: PPUSH
8597: LD_INT 78
8599: PPUSH
8600: LD_INT 71
8602: PPUSH
8603: CALL_OW 293
8607: OR
8608: IFFALSE 9077
8610: GO 8612
8612: DISABLE
8613: LD_INT 0
8615: PPUSH
8616: PPUSH
// begin PlaceUnitXY ( AmR1 , 75 , 70 , false ) ;
8617: LD_EXP 21
8621: PPUSH
8622: LD_INT 75
8624: PPUSH
8625: LD_INT 70
8627: PPUSH
8628: LD_INT 0
8630: PPUSH
8631: CALL_OW 48
// SetLives ( AmR1 , 500 ) ;
8635: LD_EXP 21
8639: PPUSH
8640: LD_INT 500
8642: PPUSH
8643: CALL_OW 234
// PlaceUnitXY ( AmR2 , 77 , 73 , false ) ;
8647: LD_EXP 22
8651: PPUSH
8652: LD_INT 77
8654: PPUSH
8655: LD_INT 73
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 48
// SetLives ( AmR2 , 0 ) ;
8665: LD_EXP 22
8669: PPUSH
8670: LD_INT 0
8672: PPUSH
8673: CALL_OW 234
// PlaceUnitXY ( RuR1 , 77 , 69 , false ) ;
8677: LD_EXP 23
8681: PPUSH
8682: LD_INT 77
8684: PPUSH
8685: LD_INT 69
8687: PPUSH
8688: LD_INT 0
8690: PPUSH
8691: CALL_OW 48
// PlaceUnitXY ( RuR2 , 78 , 71 , false ) ;
8695: LD_EXP 24
8699: PPUSH
8700: LD_INT 78
8702: PPUSH
8703: LD_INT 71
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 48
// ComAttackUnit ( [ RuR1 , RuR2 ] , AmR1 ) ;
8713: LD_EXP 23
8717: PUSH
8718: LD_EXP 24
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PPUSH
8727: LD_EXP 21
8731: PPUSH
8732: CALL_OW 115
// Uns = FilterAllUnits ( [ [ f_side , americans ] , [ f_distxy , 77 , 71 , 20 ] ] ) diff [ John , Lisa , Khatam ] ;
8736: LD_ADDR_VAR 0 1
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_EXP 3
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 92
8755: PUSH
8756: LD_INT 77
8758: PUSH
8759: LD_INT 71
8761: PUSH
8762: LD_INT 20
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PPUSH
8775: CALL_OW 69
8779: PUSH
8780: LD_EXP 7
8784: PUSH
8785: LD_EXP 12
8789: PUSH
8790: LD_EXP 10
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: LIST
8799: DIFF
8800: ST_TO_ADDR
// if Uns <> 0 then
8801: LD_VAR 0 1
8805: PUSH
8806: LD_INT 0
8808: NONEQUAL
8809: IFFALSE 8847
// begin Un = Uns [ Rand ( 1 , Uns ) ] ;
8811: LD_ADDR_VAR 0 2
8815: PUSH
8816: LD_VAR 0 1
8820: PUSH
8821: LD_INT 1
8823: PPUSH
8824: LD_VAR 0 1
8828: PPUSH
8829: CALL_OW 12
8833: ARRAY
8834: ST_TO_ADDR
// Say ( Un , DF-Sol1-1 ) ;
8835: LD_VAR 0 2
8839: PPUSH
8840: LD_STRING DF-Sol1-1
8842: PPUSH
8843: CALL_OW 88
// end ; Say ( John , DF-JMM-1 ) ;
8847: LD_EXP 7
8851: PPUSH
8852: LD_STRING DF-JMM-1
8854: PPUSH
8855: CALL_OW 88
// while IsOk ( RuR1 ) or IsOk ( RuR2 ) do
8859: LD_EXP 23
8863: PPUSH
8864: CALL_OW 302
8868: PUSH
8869: LD_EXP 24
8873: PPUSH
8874: CALL_OW 302
8878: OR
8879: IFFALSE 8890
// Wait ( 0 0$1 ) ;
8881: LD_INT 35
8883: PPUSH
8884: CALL_OW 67
8888: GO 8859
// if not ( IsDead ( AmR1 ) ) then
8890: LD_EXP 21
8894: PPUSH
8895: CALL_OW 301
8899: NOT
8900: IFFALSE 8988
// begin SetSide ( AmR1 , americans ) ;
8902: LD_EXP 21
8906: PPUSH
8907: LD_EXP 3
8911: PPUSH
8912: CALL_OW 235
// Uns = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_scientistic ] ] ) ;
8916: LD_ADDR_VAR 0 1
8920: PUSH
8921: LD_INT 22
8923: PUSH
8924: LD_EXP 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 4
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: CALL_OW 69
8951: ST_TO_ADDR
// if Uns <> 0 then
8952: LD_VAR 0 1
8956: PUSH
8957: LD_INT 0
8959: NONEQUAL
8960: IFFALSE 8976
// Say ( John , DFa-JMM-1 ) else
8962: LD_EXP 7
8966: PPUSH
8967: LD_STRING DFa-JMM-1
8969: PPUSH
8970: CALL_OW 88
8974: GO 8988
// Say ( John , DFa-JMM-1a ) ;
8976: LD_EXP 7
8980: PPUSH
8981: LD_STRING DFa-JMM-1a
8983: PPUSH
8984: CALL_OW 88
// end ; while not ( IsOk ( AmR1 ) or IsDead ( AmR1 ) ) do
8988: LD_EXP 21
8992: PPUSH
8993: CALL_OW 302
8997: PUSH
8998: LD_EXP 21
9002: PPUSH
9003: CALL_OW 301
9007: OR
9008: NOT
9009: IFFALSE 9020
// Wait ( 0 0$1 ) ;
9011: LD_INT 35
9013: PPUSH
9014: CALL_OW 67
9018: GO 8988
// if IsOk ( AmR1 ) then
9020: LD_EXP 21
9024: PPUSH
9025: CALL_OW 302
9029: IFFALSE 9077
// begin Say ( AmR1 , DFb-Sol1-1 ) ;
9031: LD_EXP 21
9035: PPUSH
9036: LD_STRING DFb-Sol1-1
9038: PPUSH
9039: CALL_OW 88
// ComMoveXY ( AmR1 , 77 , 73 ) ;
9043: LD_EXP 21
9047: PPUSH
9048: LD_INT 77
9050: PPUSH
9051: LD_INT 73
9053: PPUSH
9054: CALL_OW 111
// Wait ( 0 0$2 ) ;
9058: LD_INT 70
9060: PPUSH
9061: CALL_OW 67
// Say ( AmR1 , DFb-Sol1-1a ) ;
9065: LD_EXP 21
9069: PPUSH
9070: LD_STRING DFb-Sol1-1a
9072: PPUSH
9073: CALL_OW 88
// end ; end ;
9077: PPOPN 2
9079: END
// every 0 0$2 trigger See ( americans , dep1 ) or See ( americans , dep2 ) do
9080: LD_EXP 3
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 292
9092: PUSH
9093: LD_EXP 3
9097: PPUSH
9098: LD_INT 10
9100: PPUSH
9101: CALL_OW 292
9105: OR
9106: IFFALSE 9118
9108: GO 9110
9110: DISABLE
// begin Hint ( CapturingBuilding ) ;
9111: LD_STRING CapturingBuilding
9113: PPUSH
9114: CALL_OW 339
// end ;
9118: END
// function see_vehicle ; begin
9119: LD_INT 0
9121: PPUSH
// if ( See ( americans , vehicle1 ) or See ( americans , vehicle2 ) ) then
9122: LD_EXP 3
9126: PPUSH
9127: LD_INT 5
9129: PPUSH
9130: CALL_OW 292
9134: PUSH
9135: LD_EXP 3
9139: PPUSH
9140: LD_INT 4
9142: PPUSH
9143: CALL_OW 292
9147: OR
9148: IFFALSE 9165
// begin result = 1 ;
9150: LD_ADDR_VAR 0 1
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// enable ( vehicles_detected ) ;
9158: LD_EXP 31
9162: ENABLE_MARKED
// end else
9163: GO 9173
// result = 0 ;
9165: LD_ADDR_VAR 0 1
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// end ;
9173: LD_VAR 0 1
9177: RET
// function see_vehicle1 ; begin
9178: LD_INT 0
9180: PPUSH
// if ( See ( americans , vehicle1 ) or See ( americans , vehicle2 ) ) then
9181: LD_EXP 3
9185: PPUSH
9186: LD_INT 5
9188: PPUSH
9189: CALL_OW 292
9193: PUSH
9194: LD_EXP 3
9198: PPUSH
9199: LD_INT 4
9201: PPUSH
9202: CALL_OW 292
9206: OR
9207: IFFALSE 9219
// begin result = 1 ;
9209: LD_ADDR_VAR 0 1
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// end else
9217: GO 9227
// result = 0 ;
9219: LD_ADDR_VAR 0 1
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// end ;
9227: LD_VAR 0 1
9231: RET
// function guardians_are_death ; begin
9232: LD_INT 0
9234: PPUSH
// if not ( IsOk ( RusESo1 ) or IsOk ( RusESo2 ) or IsOK ( RusEM1 ) ) then
9235: LD_INT 13
9237: PPUSH
9238: CALL_OW 302
9242: PUSH
9243: LD_INT 8
9245: PPUSH
9246: CALL_OW 302
9250: OR
9251: PUSH
9252: LD_INT 6
9254: PPUSH
9255: CALL_OW 302
9259: OR
9260: NOT
9261: IFFALSE 9273
// result = 1 else
9263: LD_ADDR_VAR 0 1
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
9271: GO 9281
// result = 0 ;
9273: LD_ADDR_VAR 0 1
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// end ;
9281: LD_VAR 0 1
9285: RET
// every 0 0$1 trigger ( see_vehicle and not ( JMM_saw_east_guard ) ) marked 21 do
9286: CALL 9119 0 0
9290: PUSH
9291: LD_EXP 95
9295: NOT
9296: AND
9297: IFFALSE 9322
9299: GO 9301
9301: DISABLE
// begin JMM_saw_east_guard = true ;
9302: LD_ADDR_EXP 95
9306: PUSH
9307: LD_INT 1
9309: ST_TO_ADDR
// Say ( John , DX3-JMM-1 ) ;
9310: LD_EXP 7
9314: PPUSH
9315: LD_STRING DX3-JMM-1
9317: PPUSH
9318: CALL_OW 88
// end ;
9322: END
// every 0 0$2 trigger IsOk ( RusEM1 ) and IsDrivenBy ( vehicle1 ) = RusEM1 do
9323: LD_INT 6
9325: PPUSH
9326: CALL_OW 302
9330: PUSH
9331: LD_INT 5
9333: PPUSH
9334: CALL_OW 311
9338: PUSH
9339: LD_INT 6
9341: EQUAL
9342: AND
9343: IFFALSE 9356
9345: GO 9347
9347: DISABLE
// begin sergej_succeeds = 1 ;
9348: LD_ADDR_EXP 78
9352: PUSH
9353: LD_INT 1
9355: ST_TO_ADDR
// end ;
9356: END
// every 0 0$1 trigger FilterUnitsInArea ( Dohled , [ [ f_see , russians ] , [ f_side , americans ] ] ) > 0 do
9357: LD_INT 9
9359: PPUSH
9360: LD_INT 101
9362: PUSH
9363: LD_EXP 5
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 22
9374: PUSH
9375: LD_EXP 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 70
9392: PUSH
9393: LD_INT 0
9395: GREATER
9396: IFFALSE 9514
9398: GO 9400
9400: DISABLE
// begin ComFree ( RusEast ) ;
9401: LD_EXP 108
9405: PPUSH
9406: CALL_OW 139
// disable ( East_guard_seen ) ;
9410: LD_EXP 96
9414: DISABLE_MARKED
// DialogueOn ;
9415: CALL_OW 6
// SayNoFace ( RusESo2 , DX3-Rus1-1 ) ;
9419: LD_INT 8
9421: PPUSH
9422: LD_STRING DX3-Rus1-1
9424: PPUSH
9425: CALL_OW 89
// DialogueOff ;
9429: CALL_OW 7
// if not ( JMM_saw_east_guard ) then
9433: LD_EXP 95
9437: NOT
9438: IFFALSE 9509
// begin JMM_saw_east_guard = true ;
9440: LD_ADDR_EXP 95
9444: PUSH
9445: LD_INT 1
9447: ST_TO_ADDR
// DialogueOn ;
9448: CALL_OW 6
// Say ( John , DX3-JMM-1 ) ;
9452: LD_EXP 7
9456: PPUSH
9457: LD_STRING DX3-JMM-1
9459: PPUSH
9460: CALL_OW 88
// DialogueOff ;
9464: CALL_OW 7
// PlaceSeeing ( 117 , 41 , americans , - 6 ) ;
9468: LD_INT 117
9470: PPUSH
9471: LD_INT 41
9473: PPUSH
9474: LD_EXP 3
9478: PPUSH
9479: LD_INT 6
9481: NEG
9482: PPUSH
9483: CALL_OW 330
// Wait ( 0 0$10 ) ;
9487: LD_INT 350
9489: PPUSH
9490: CALL_OW 67
// RemoveSeeing ( 117 , 41 , americans ) ;
9494: LD_INT 117
9496: PPUSH
9497: LD_INT 41
9499: PPUSH
9500: LD_EXP 3
9504: PPUSH
9505: CALL_OW 331
// end ; enable ( attack ) ;
9509: LD_EXP 41
9513: ENABLE_MARKED
// end ;
9514: END
// every 0 0$5 trigger see_vehicle1 and guardians_are_death marked 6 do
9515: CALL 9178 0 0
9519: PUSH
9520: CALL 9232 0 0
9524: AND
9525: IFFALSE 9604
9527: GO 9529
9529: DISABLE
// begin DialogueOn ;
9530: CALL_OW 6
// if IsOk ( Bobby ) then
9534: LD_EXP 9
9538: PPUSH
9539: CALL_OW 302
9543: IFFALSE 9559
// Say ( Bobby , DX2-Bobby-1 ) else
9545: LD_EXP 9
9549: PPUSH
9550: LD_STRING DX2-Bobby-1
9552: PPUSH
9553: CALL_OW 88
9557: GO 9571
// Say ( John , DX2-JMM-1 ) ;
9559: LD_EXP 7
9563: PPUSH
9564: LD_STRING DX2-JMM-1
9566: PPUSH
9567: CALL_OW 88
// if ( Byl_u_zakladny1 and IsOk ( Bobby ) ) then
9571: LD_LOC 1
9575: PUSH
9576: LD_EXP 9
9580: PPUSH
9581: CALL_OW 302
9585: AND
9586: IFFALSE 9600
// Say ( John , DX2-JMM-1a ) ;
9588: LD_EXP 7
9592: PPUSH
9593: LD_STRING DX2-JMM-1a
9595: PPUSH
9596: CALL_OW 88
// DialogueOff ;
9600: CALL_OW 7
// end ;
9604: END
// every 0 0$2 trigger see_vehicle1 and guardians_are_death do
9605: CALL 9178 0 0
9609: PUSH
9610: CALL 9232 0 0
9614: AND
9615: IFFALSE 9654
9617: GO 9619
9619: DISABLE
// begin if IsOk ( vehicle1 ) and IsOk ( Vehicle2 ) then
9620: LD_INT 5
9622: PPUSH
9623: CALL_OW 302
9627: PUSH
9628: LD_INT 4
9630: PPUSH
9631: CALL_OW 302
9635: AND
9636: IFFALSE 9647
// Hint ( CapturingVehicles1 ) else
9638: LD_STRING CapturingVehicles1
9640: PPUSH
9641: CALL_OW 339
9645: GO 9654
// Hint ( CapturingVehicles2 ) ;
9647: LD_STRING CapturingVehicles2
9649: PPUSH
9650: CALL_OW 339
// end ;
9654: END
// on VehicleCaptured ( vehnew , vehold , origside , hum ) marked 5 do var InV1 , InV2 ;
9655: LD_INT 0
9657: PPUSH
9658: PPUSH
// begin if ( ( vehold = vehicle1 ) or ( vehold = vehicle2 ) ) and ( hum <> RusEM1 ) and First_Capture then
9659: LD_VAR 0 2
9663: PUSH
9664: LD_INT 5
9666: EQUAL
9667: PUSH
9668: LD_VAR 0 2
9672: PUSH
9673: LD_INT 4
9675: EQUAL
9676: OR
9677: PUSH
9678: LD_VAR 0 4
9682: PUSH
9683: LD_INT 6
9685: NONEQUAL
9686: AND
9687: PUSH
9688: LD_EXP 84
9692: AND
9693: IFFALSE 9940
// begin First_Capture = false ;
9695: LD_ADDR_EXP 84
9699: PUSH
9700: LD_INT 0
9702: ST_TO_ADDR
// disable ( uncanny_vehicles ) ;
9703: LD_EXP 32
9707: DISABLE_MARKED
// DialogueOn ;
9708: CALL_OW 6
// if ( ( hum = John ) and IsOk ( Lisa ) ) then
9712: LD_VAR 0 4
9716: PUSH
9717: LD_EXP 7
9721: EQUAL
9722: PUSH
9723: LD_EXP 12
9727: PPUSH
9728: CALL_OW 302
9732: AND
9733: IFFALSE 9768
// begin Say ( Lisa , DX2b-Lisa-1 ) ;
9735: LD_EXP 12
9739: PPUSH
9740: LD_STRING DX2b-Lisa-1
9742: PPUSH
9743: CALL_OW 88
// Say ( John , DX2b-JMM-1 ) ;
9747: LD_EXP 7
9751: PPUSH
9752: LD_STRING DX2b-JMM-1
9754: PPUSH
9755: CALL_OW 88
// Hint ( ControllingVehicles ) ;
9759: LD_STRING ControllingVehicles
9761: PPUSH
9762: CALL_OW 339
// end else
9766: GO 9918
// begin Say ( John , DX2a-JMM-1 ) ;
9768: LD_EXP 7
9772: PPUSH
9773: LD_STRING DX2a-JMM-1
9775: PPUSH
9776: CALL_OW 88
// if hum = Lisa then
9780: LD_VAR 0 4
9784: PUSH
9785: LD_EXP 12
9789: EQUAL
9790: IFFALSE 9806
// Say ( Lisa , DX2a-Lisa-1 ) else
9792: LD_EXP 12
9796: PPUSH
9797: LD_STRING DX2a-Lisa-1
9799: PPUSH
9800: CALL_OW 88
9804: GO 9899
// if hum = Bobby then
9806: LD_VAR 0 4
9810: PUSH
9811: LD_EXP 9
9815: EQUAL
9816: IFFALSE 9832
// Say ( Bobby , DX2a-Bobby-1 ) else
9818: LD_EXP 9
9822: PPUSH
9823: LD_STRING DX2a-Bobby-1
9825: PPUSH
9826: CALL_OW 88
9830: GO 9899
// if hum = Cyrus then
9832: LD_VAR 0 4
9836: PUSH
9837: LD_EXP 8
9841: EQUAL
9842: IFFALSE 9858
// Say ( Cyrus , DX2a-Cyrus-1 ) else
9844: LD_EXP 8
9848: PPUSH
9849: LD_STRING DX2a-Cyrus-1
9851: PPUSH
9852: CALL_OW 88
9856: GO 9899
// if ( GetSex ( hum ) = Sex_Male ) then
9858: LD_VAR 0 4
9862: PPUSH
9863: CALL_OW 258
9867: PUSH
9868: LD_INT 1
9870: EQUAL
9871: IFFALSE 9887
// Say ( hum , DX2a-Sol1-1 ) else
9873: LD_VAR 0 4
9877: PPUSH
9878: LD_STRING DX2a-Sol1-1
9880: PPUSH
9881: CALL_OW 88
9885: GO 9899
// Say ( hum , DX2a-FSol1-1 ) ;
9887: LD_VAR 0 4
9891: PPUSH
9892: LD_STRING DX2a-FSol1-1
9894: PPUSH
9895: CALL_OW 88
// Say ( John , DX2a-JMM-2 ) ;
9899: LD_EXP 7
9903: PPUSH
9904: LD_STRING DX2a-JMM-2
9906: PPUSH
9907: CALL_OW 88
// Hint ( ControllingVehicles ) ;
9911: LD_STRING ControllingVehicles
9913: PPUSH
9914: CALL_OW 339
// end ; DialogueOff ;
9918: CALL_OW 7
// if sergej_succeeds = 0 then
9922: LD_EXP 78
9926: PUSH
9927: LD_INT 0
9929: EQUAL
9930: IFFALSE 9940
// sergej_succeeds = 2 ;
9932: LD_ADDR_EXP 78
9936: PUSH
9937: LD_INT 2
9939: ST_TO_ADDR
// end ; if ( vehold = vehicle1 ) then
9940: LD_VAR 0 2
9944: PUSH
9945: LD_INT 5
9947: EQUAL
9948: IFFALSE 9960
// vehicle1_new = vehnew ;
9950: LD_ADDR_EXP 97
9954: PUSH
9955: LD_VAR 0 1
9959: ST_TO_ADDR
// if ( vehold = vehicle2 ) then
9960: LD_VAR 0 2
9964: PUSH
9965: LD_INT 4
9967: EQUAL
9968: IFFALSE 9980
// vehicle2_new = vehnew ;
9970: LD_ADDR_EXP 98
9974: PUSH
9975: LD_VAR 0 1
9979: ST_TO_ADDR
// end ;
9980: PPOPN 6
9982: END
// every 0 0$5 trigger ( IsOk ( vehicle1_new ) and not ( IsInArea ( vehicle1_new , Area01 ) ) ) or ( IsOk ( vehicle2_new ) and not ( IsInArea ( vehicle2_new , Area01 ) ) ) do
9983: LD_EXP 97
9987: PPUSH
9988: CALL_OW 302
9992: PUSH
9993: LD_EXP 97
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 308
10005: NOT
10006: AND
10007: PUSH
10008: LD_EXP 98
10012: PPUSH
10013: CALL_OW 302
10017: PUSH
10018: LD_EXP 98
10022: PPUSH
10023: LD_INT 1
10025: PPUSH
10026: CALL_OW 308
10030: NOT
10031: AND
10032: OR
10033: IFFALSE 10045
10035: GO 10037
10037: DISABLE
// begin Hint ( VehicleState ) ;
10038: LD_STRING VehicleState
10040: PPUSH
10041: CALL_OW 339
// end ;
10045: END
// every 0 0$1 trigger GetLives ( RusEM1 ) < 1000 do
10046: LD_INT 6
10048: PPUSH
10049: CALL_OW 256
10053: PUSH
10054: LD_INT 1000
10056: LESS
10057: IFFALSE 10079
10059: GO 10061
10061: DISABLE
// begin if not ( IsBusy ( RusEM1 ) ) then
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 315
10069: NOT
10070: IFFALSE 10079
// ComFree ( RusEM1 ) ;
10072: LD_INT 6
10074: PPUSH
10075: CALL_OW 139
// end ;
10079: END
// every 0 0$3 trigger FilterUnitsInArea ( Before_River , [ f_side , americans ] ) <> 0 do var Uns , Un ;
10080: LD_INT 24
10082: PPUSH
10083: LD_INT 22
10085: PUSH
10086: LD_EXP 3
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PPUSH
10095: CALL_OW 70
10099: PUSH
10100: LD_INT 0
10102: NONEQUAL
10103: IFFALSE 10180
10105: GO 10107
10107: DISABLE
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
// begin Uns = FilterUnitsInArea ( Before_River , [ [ f_side , americans ] ] ) ;
10112: LD_ADDR_VAR 0 1
10116: PUSH
10117: LD_INT 24
10119: PPUSH
10120: LD_INT 22
10122: PUSH
10123: LD_EXP 3
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: PPUSH
10135: CALL_OW 70
10139: ST_TO_ADDR
// for Un in Uns do
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: LD_VAR 0 1
10149: PUSH
10150: FOR_IN
10151: IFFALSE 10177
// if IsSelected ( Un ) then
10153: LD_VAR 0 2
10157: PPUSH
10158: CALL_OW 306
10162: IFFALSE 10175
// begin Hint ( Rivers ) ;
10164: LD_STRING Rivers
10166: PPUSH
10167: CALL_OW 339
// exit ;
10171: POP
10172: POP
10173: GO 10180
// end ;
10175: GO 10150
10177: POP
10178: POP
// enable ;
10179: ENABLE
// end ;
10180: PPOPN 2
10182: END
// every 0 0$0.1 marked 10 do
10183: GO 10185
10185: DISABLE
// begin AddComEnterUnit ( RusEM1 , vehicle1 ) ;
10186: LD_INT 6
10188: PPUSH
10189: LD_INT 5
10191: PPUSH
10192: CALL_OW 180
// AddComFree ( RusEM1 ) ;
10196: LD_INT 6
10198: PPUSH
10199: CALL_OW 199
// end ;
10203: END
// function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10204: LD_INT 0
10206: PPUSH
10207: PPUSH
10208: PPUSH
10209: PPUSH
10210: PPUSH
// nearest_dist = 1000 ;
10211: LD_ADDR_VAR 0 4
10215: PUSH
10216: LD_INT 1000
10218: ST_TO_ADDR
// nearest_un = un ;
10219: LD_ADDR_VAR 0 5
10223: PUSH
10224: LD_VAR 0 1
10228: ST_TO_ADDR
// for sold in units do
10229: LD_ADDR_VAR 0 6
10233: PUSH
10234: LD_VAR 0 2
10238: PUSH
10239: FOR_IN
10240: IFFALSE 10296
// begin dist = GetDistUnits ( un , sold ) ;
10242: LD_ADDR_VAR 0 7
10246: PUSH
10247: LD_VAR 0 1
10251: PPUSH
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 296
10261: ST_TO_ADDR
// if dist < nearest_dist then
10262: LD_VAR 0 7
10266: PUSH
10267: LD_VAR 0 4
10271: LESS
10272: IFFALSE 10294
// begin nearest_un = sold ;
10274: LD_ADDR_VAR 0 5
10278: PUSH
10279: LD_VAR 0 6
10283: ST_TO_ADDR
// nearest_dist = dist ;
10284: LD_ADDR_VAR 0 4
10288: PUSH
10289: LD_VAR 0 7
10293: ST_TO_ADDR
// end ; end ;
10294: GO 10239
10296: POP
10297: POP
// result := nearest_un ;
10298: LD_ADDR_VAR 0 3
10302: PUSH
10303: LD_VAR 0 5
10307: ST_TO_ADDR
// end ;
10308: LD_VAR 0 3
10312: RET
// function FindMostIll ( Uns ) ; var TheMostIll , Un ; begin
10313: LD_INT 0
10315: PPUSH
10316: PPUSH
10317: PPUSH
// TheMostIll = Uns [ 1 ] ;
10318: LD_ADDR_VAR 0 3
10322: PUSH
10323: LD_VAR 0 1
10327: PUSH
10328: LD_INT 1
10330: ARRAY
10331: ST_TO_ADDR
// for Un in Uns do
10332: LD_ADDR_VAR 0 4
10336: PUSH
10337: LD_VAR 0 1
10341: PUSH
10342: FOR_IN
10343: IFFALSE 10379
// if GetLives ( Un ) < GetLives ( TheMostIll ) then
10345: LD_VAR 0 4
10349: PPUSH
10350: CALL_OW 256
10354: PUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: CALL_OW 256
10364: LESS
10365: IFFALSE 10377
// TheMostIll = Un ;
10367: LD_ADDR_VAR 0 3
10371: PUSH
10372: LD_VAR 0 4
10376: ST_TO_ADDR
10377: GO 10342
10379: POP
10380: POP
// result = TheMostIll ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_VAR 0 3
10390: ST_TO_ADDR
// end ;
10391: LD_VAR 0 2
10395: RET
// every 0 0$0.5 trigger SeeXY ( americans , 25 , 32 ) do var Uns , Un , Ill , The_Most_Ill ;
10396: LD_EXP 3
10400: PPUSH
10401: LD_INT 25
10403: PPUSH
10404: LD_INT 32
10406: PPUSH
10407: CALL_OW 293
10411: IFFALSE 10964
10413: GO 10415
10415: DISABLE
10416: LD_INT 0
10418: PPUSH
10419: PPUSH
10420: PPUSH
10421: PPUSH
// begin IngameOn ;
10422: CALL_OW 8
// PlaceUnitXYR ( Khatam , 25 , 31 , 1 , false ) ;
10426: LD_EXP 10
10430: PPUSH
10431: LD_INT 25
10433: PPUSH
10434: LD_INT 31
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: LD_INT 0
10442: PPUSH
10443: CALL_OW 50
// CenterOnUnits ( Khatam ) ;
10447: LD_EXP 10
10451: PPUSH
10452: CALL_OW 85
// Uns = FilterAllUnits ( [ [ f_side , americans ] ] ) ;
10456: LD_ADDR_VAR 0 1
10460: PUSH
10461: LD_INT 22
10463: PUSH
10464: LD_EXP 3
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: ST_TO_ADDR
// for Un in Uns do
10481: LD_ADDR_VAR 0 2
10485: PUSH
10486: LD_VAR 0 1
10490: PUSH
10491: FOR_IN
10492: IFFALSE 10534
// begin ComWait ( Un , 0 0$1 * Rand ( 5 , 15 ) ) ;
10494: LD_VAR 0 2
10498: PPUSH
10499: LD_INT 35
10501: PUSH
10502: LD_INT 5
10504: PPUSH
10505: LD_INT 15
10507: PPUSH
10508: CALL_OW 12
10512: MUL
10513: PPUSH
10514: CALL_OW 142
// ComTurnUnit ( Un , Khatam ) ;
10518: LD_VAR 0 2
10522: PPUSH
10523: LD_EXP 10
10527: PPUSH
10528: CALL_OW 119
// end ;
10532: GO 10491
10534: POP
10535: POP
// AddComMoveUnit ( Khatam , Nearest ( Khatam , FilterAllUnits ( [ f_side , americans ] ) diff [ Khatam ] ) ) ;
10536: LD_EXP 10
10540: PPUSH
10541: LD_EXP 10
10545: PPUSH
10546: LD_INT 22
10548: PUSH
10549: LD_EXP 3
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 69
10562: PUSH
10563: LD_EXP 10
10567: PUSH
10568: EMPTY
10569: LIST
10570: DIFF
10571: PPUSH
10572: CALL 10204 0 2
10576: PPUSH
10577: CALL_OW 172
// Say ( Khatam , D2a-Khat-1 ) ;
10581: LD_EXP 10
10585: PPUSH
10586: LD_STRING D2a-Khat-1
10588: PPUSH
10589: CALL_OW 88
// if GetDistUnits ( Khatam , John ) < 15 and GetDistUnits ( Khatam , John ) > 5 then
10593: LD_EXP 10
10597: PPUSH
10598: LD_EXP 7
10602: PPUSH
10603: CALL_OW 296
10607: PUSH
10608: LD_INT 15
10610: LESS
10611: PUSH
10612: LD_EXP 10
10616: PPUSH
10617: LD_EXP 7
10621: PPUSH
10622: CALL_OW 296
10626: PUSH
10627: LD_INT 5
10629: GREATER
10630: AND
10631: IFFALSE 10647
// AddComMoveUnit ( Khatam , John ) ;
10633: LD_EXP 10
10637: PPUSH
10638: LD_EXP 7
10642: PPUSH
10643: CALL_OW 172
// Say ( John , D2a-JMM-1 ) ;
10647: LD_EXP 7
10651: PPUSH
10652: LD_STRING D2a-JMM-1
10654: PPUSH
10655: CALL_OW 88
// IngameOff ;
10659: CALL_OW 9
// DialogueOn ;
10663: CALL_OW 6
// interface_hidden = true ;
10667: LD_ADDR_OWVAR 54
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// Say ( Khatam , D2a-Khat-2 ) ;
10675: LD_EXP 10
10679: PPUSH
10680: LD_STRING D2a-Khat-2
10682: PPUSH
10683: CALL_OW 88
// Say ( John , D2a-JMM-2 ) ;
10687: LD_EXP 7
10691: PPUSH
10692: LD_STRING D2a-JMM-2
10694: PPUSH
10695: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
10699: LD_EXP 10
10703: PPUSH
10704: LD_STRING D2a-Khat-3
10706: PPUSH
10707: CALL_OW 88
// Say ( John , D2a-JMM-3 ) ;
10711: LD_EXP 7
10715: PPUSH
10716: LD_STRING D2a-JMM-3
10718: PPUSH
10719: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
10723: LD_EXP 10
10727: PPUSH
10728: LD_STRING D2a-Khat-4
10730: PPUSH
10731: CALL_OW 88
// Say ( John , D2a-JMM-4 ) ;
10735: LD_EXP 7
10739: PPUSH
10740: LD_STRING D2a-JMM-4
10742: PPUSH
10743: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
10747: LD_EXP 10
10751: PPUSH
10752: LD_STRING D2a-Khat-5
10754: PPUSH
10755: CALL_OW 88
// Say ( John , D2a-JMM-5 ) ;
10759: LD_EXP 7
10763: PPUSH
10764: LD_STRING D2a-JMM-5
10766: PPUSH
10767: CALL_OW 88
// interface_hidden = false ;
10771: LD_ADDR_OWVAR 54
10775: PUSH
10776: LD_INT 0
10778: ST_TO_ADDR
// DialogueOff ;
10779: CALL_OW 7
// ComFree ( Uns ) ;
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 139
// ComFree ( Khatam ) ;
10792: LD_EXP 10
10796: PPUSH
10797: CALL_OW 139
// SetSide ( Khatam , americans ) ;
10801: LD_EXP 10
10805: PPUSH
10806: LD_EXP 3
10810: PPUSH
10811: CALL_OW 235
// Ill = UnitFilter ( [ John , Cyrus , Bobby , Nick , Lisa , AmME1 , AmFE2 , AmMSo3 ] , [ f_ok ] ) ;
10815: LD_ADDR_VAR 0 3
10819: PUSH
10820: LD_EXP 7
10824: PUSH
10825: LD_EXP 8
10829: PUSH
10830: LD_EXP 9
10834: PUSH
10835: LD_EXP 11
10839: PUSH
10840: LD_EXP 12
10844: PUSH
10845: LD_EXP 13
10849: PUSH
10850: LD_EXP 14
10854: PUSH
10855: LD_EXP 15
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: PPUSH
10870: LD_INT 50
10872: PUSH
10873: EMPTY
10874: LIST
10875: PPUSH
10876: CALL_OW 72
10880: ST_TO_ADDR
// The_Most_Ill = FindMostIll ( Ill ) ;
10881: LD_ADDR_VAR 0 4
10885: PUSH
10886: LD_VAR 0 3
10890: PPUSH
10891: CALL 10313 0 1
10895: ST_TO_ADDR
// if GetLives ( The_Most_Ill ) < 1000 and IsLive ( The_Most_Ill ) then
10896: LD_VAR 0 4
10900: PPUSH
10901: CALL_OW 256
10905: PUSH
10906: LD_INT 1000
10908: LESS
10909: PUSH
10910: LD_VAR 0 4
10914: PPUSH
10915: CALL_OW 300
10919: AND
10920: IFFALSE 10957
// begin ComHeal ( Khatam , The_Most_Ill ) ;
10922: LD_EXP 10
10926: PPUSH
10927: LD_VAR 0 4
10931: PPUSH
10932: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
10936: LD_EXP 10
10940: PPUSH
10941: LD_STRING D2b-Khat-1
10943: PPUSH
10944: CALL_OW 88
// Hint ( Scientists1 ) ;
10948: LD_STRING Scientists1
10950: PPUSH
10951: CALL_OW 339
// end else
10955: GO 10964
// Hint ( Scientists2 ) ;
10957: LD_STRING Scientists2
10959: PPUSH
10960: CALL_OW 339
// end ;
10964: PPOPN 4
10966: END
// function Set_times ; var Time_to_visit , i ; begin
10967: LD_INT 0
10969: PPUSH
10970: PPUSH
10971: PPUSH
// Time_of_capture = tick ;
10972: LD_ADDR_EXP 30
10976: PUSH
10977: LD_OWVAR 1
10981: ST_TO_ADDR
// i = ( 27 - ( Time_of_capture ) / 1 1$0 ) / ( 2 + Difficulty ) ;
10982: LD_ADDR_VAR 0 3
10986: PUSH
10987: LD_INT 27
10989: PUSH
10990: LD_EXP 30
10994: PUSH
10995: LD_INT 2100
10997: DIVREAL
10998: MINUS
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: LD_OWVAR 67
11007: PLUS
11008: DIVREAL
11009: ST_TO_ADDR
// if i < 1.5 then
11010: LD_VAR 0 3
11014: PUSH
11015: LD_REAL  1.50000000000000E+0000
11018: LESS
11019: IFFALSE 11030
// i = 1.5 ;
11021: LD_ADDR_VAR 0 3
11025: PUSH
11026: LD_REAL  1.50000000000000E+0000
11029: ST_TO_ADDR
// if i > 4 then
11030: LD_VAR 0 3
11034: PUSH
11035: LD_INT 4
11037: GREATER
11038: IFFALSE 11048
// i = 4 ;
11040: LD_ADDR_VAR 0 3
11044: PUSH
11045: LD_INT 4
11047: ST_TO_ADDR
// Time_to_visit = ( i * 1 1$0 ) div 1 ;
11048: LD_ADDR_VAR 0 2
11052: PUSH
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 2100
11060: MUL
11061: PUSH
11062: LD_INT 1
11064: DIV
11065: ST_TO_ADDR
// Time_of_visit = Time_of_capture + Time_to_visit ;
11066: LD_ADDR_EXP 25
11070: PUSH
11071: LD_EXP 30
11075: PUSH
11076: LD_VAR 0 2
11080: PLUS
11081: ST_TO_ADDR
// Time_of_attack = Time_of_visit + 5 5$30 + ( 3 - Difficulty ) * ( 2 2$00 ) ;
11082: LD_ADDR_EXP 26
11086: PUSH
11087: LD_EXP 25
11091: PUSH
11092: LD_INT 11550
11094: PLUS
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: LD_OWVAR 67
11103: MINUS
11104: PUSH
11105: LD_INT 4200
11107: MUL
11108: PLUS
11109: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11110: LD_STRING M2
11112: PPUSH
11113: CALL_OW 337
// Say ( John , D3b-JMM-1 ) ;
11117: LD_EXP 7
11121: PPUSH
11122: LD_STRING D3b-JMM-1
11124: PPUSH
11125: CALL_OW 88
// end ;
11129: LD_VAR 0 1
11133: RET
// every 0 0$2 trigger GetSide ( Arm1 ) = americans do
11134: LD_INT 2
11136: PPUSH
11137: CALL_OW 255
11141: PUSH
11142: LD_EXP 3
11146: EQUAL
11147: IFFALSE 11159
11149: GO 11151
11151: DISABLE
// begin Hint ( Armoury ) ;
11152: LD_STRING Armoury
11154: PPUSH
11155: CALL_OW 339
// end ;
11159: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , americans ] , [ f_btype , b_breastwork ] ] ) > 0 do
11160: LD_INT 22
11162: PUSH
11163: LD_EXP 3
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 30
11174: PUSH
11175: LD_INT 31
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: PUSH
11191: LD_INT 0
11193: GREATER
11194: IFFALSE 11206
11196: GO 11198
11198: DISABLE
// begin Hint ( Breastworks ) ;
11199: LD_STRING Breastworks
11201: PPUSH
11202: CALL_OW 339
// end ;
11206: END
// every 0 0$3 trigger GetSide ( dep1 ) = americans do
11207: LD_INT 1
11209: PPUSH
11210: CALL_OW 255
11214: PUSH
11215: LD_EXP 3
11219: EQUAL
11220: IFFALSE 11421
11222: GO 11224
11224: DISABLE
// begin DialogueOn ;
11225: CALL_OW 6
// if GetSide ( dep2 ) = americans then
11229: LD_INT 10
11231: PPUSH
11232: CALL_OW 255
11236: PUSH
11237: LD_EXP 3
11241: EQUAL
11242: IFFALSE 11352
// begin Say ( John , D3a-JMM-1 ) ;
11244: LD_EXP 7
11248: PPUSH
11249: LD_STRING D3a-JMM-1
11251: PPUSH
11252: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
11256: LD_EXP 16
11260: PPUSH
11261: LD_STRING D3a-Pow-1
11263: PPUSH
11264: CALL_OW 94
// Say ( John , D3a-JMM-2 ) ;
11268: LD_EXP 7
11272: PPUSH
11273: LD_STRING D3a-JMM-2
11275: PPUSH
11276: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
11280: LD_EXP 16
11284: PPUSH
11285: LD_STRING D3a-Pow-2
11287: PPUSH
11288: CALL_OW 94
// Say ( John , D3a-JMM-3 ) ;
11292: LD_EXP 7
11296: PPUSH
11297: LD_STRING D3a-JMM-3
11299: PPUSH
11300: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
11304: LD_EXP 16
11308: PPUSH
11309: LD_STRING D3a-Pow-3
11311: PPUSH
11312: CALL_OW 94
// Say ( John , D3a-JMM-4 ) ;
11316: LD_EXP 7
11320: PPUSH
11321: LD_STRING D3a-JMM-4
11323: PPUSH
11324: CALL_OW 88
// DialogueOff ;
11328: CALL_OW 7
// Hint ( Depot2 ) ;
11332: LD_STRING Depot2
11334: PPUSH
11335: CALL_OW 339
// Hint ( Transporting ) ;
11339: LD_STRING Transporting
11341: PPUSH
11342: CALL_OW 339
// Set_times ;
11346: CALL 10967 0 0
// end else
11350: GO 11421
// begin Wait ( 2 * 0 0$1 ) ;
11352: LD_INT 2
11354: PUSH
11355: LD_INT 35
11357: MUL
11358: PPUSH
11359: CALL_OW 67
// Say ( John , D3-JMM-1 ) ;
11363: LD_EXP 7
11367: PPUSH
11368: LD_STRING D3-JMM-1
11370: PPUSH
11371: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
11375: LD_EXP 16
11379: PPUSH
11380: LD_STRING D3-Pow-1
11382: PPUSH
11383: CALL_OW 94
// if IsOk ( Cyrus ) then
11387: LD_EXP 8
11391: PPUSH
11392: CALL_OW 302
11396: IFFALSE 11410
// Say ( Cyrus , D3-Cyrus-1 ) ;
11398: LD_EXP 8
11402: PPUSH
11403: LD_STRING D3-Cyrus-1
11405: PPUSH
11406: CALL_OW 88
// DialogueOff ;
11410: CALL_OW 7
// Hint ( Depot ) ;
11414: LD_STRING Depot
11416: PPUSH
11417: CALL_OW 339
// end ; end ;
11421: END
// every 0 0$3 trigger GetSide ( dep2 ) = americans do
11422: LD_INT 10
11424: PPUSH
11425: CALL_OW 255
11429: PUSH
11430: LD_EXP 3
11434: EQUAL
11435: IFFALSE 11636
11437: GO 11439
11439: DISABLE
// begin DialogueOn ;
11440: CALL_OW 6
// if GetSide ( dep1 ) = americans then
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 255
11451: PUSH
11452: LD_EXP 3
11456: EQUAL
11457: IFFALSE 11567
// begin Say ( John , D3a-JMM-1 ) ;
11459: LD_EXP 7
11463: PPUSH
11464: LD_STRING D3a-JMM-1
11466: PPUSH
11467: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
11471: LD_EXP 16
11475: PPUSH
11476: LD_STRING D3a-Pow-1
11478: PPUSH
11479: CALL_OW 94
// Say ( John , D3a-JMM-2 ) ;
11483: LD_EXP 7
11487: PPUSH
11488: LD_STRING D3a-JMM-2
11490: PPUSH
11491: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
11495: LD_EXP 16
11499: PPUSH
11500: LD_STRING D3a-Pow-2
11502: PPUSH
11503: CALL_OW 94
// Say ( John , D3a-JMM-3 ) ;
11507: LD_EXP 7
11511: PPUSH
11512: LD_STRING D3a-JMM-3
11514: PPUSH
11515: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
11519: LD_EXP 16
11523: PPUSH
11524: LD_STRING D3a-Pow-3
11526: PPUSH
11527: CALL_OW 94
// Say ( John , D3a-JMM-4 ) ;
11531: LD_EXP 7
11535: PPUSH
11536: LD_STRING D3a-JMM-4
11538: PPUSH
11539: CALL_OW 88
// DialogueOff ;
11543: CALL_OW 7
// Hint ( Depot2 ) ;
11547: LD_STRING Depot2
11549: PPUSH
11550: CALL_OW 339
// Hint ( Transporting ) ;
11554: LD_STRING Transporting
11556: PPUSH
11557: CALL_OW 339
// Set_times ;
11561: CALL 10967 0 0
// end else
11565: GO 11636
// begin Wait ( 2 * 0 0$1 ) ;
11567: LD_INT 2
11569: PUSH
11570: LD_INT 35
11572: MUL
11573: PPUSH
11574: CALL_OW 67
// Say ( John , D3-JMM-1 ) ;
11578: LD_EXP 7
11582: PPUSH
11583: LD_STRING D3-JMM-1
11585: PPUSH
11586: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
11590: LD_EXP 16
11594: PPUSH
11595: LD_STRING D3-Pow-1
11597: PPUSH
11598: CALL_OW 94
// if IsOk ( Cyrus ) then
11602: LD_EXP 8
11606: PPUSH
11607: CALL_OW 302
11611: IFFALSE 11625
// Say ( Cyrus , D3-Cyrus-1 ) ;
11613: LD_EXP 8
11617: PPUSH
11618: LD_STRING D3-Cyrus-1
11620: PPUSH
11621: CALL_OW 88
// DialogueOff ;
11625: CALL_OW 7
// Hint ( Depot ) ;
11629: LD_STRING Depot
11631: PPUSH
11632: CALL_OW 339
// end ; end ;
11636: END
// every 0 0$5 trigger GetResourceType ( GetBase ( GetUnitNumber ( 52 , 10 ) ) , mat_cans ) > 20 do
11637: LD_INT 52
11639: PPUSH
11640: LD_INT 10
11642: PPUSH
11643: CALL_OW 438
11647: PPUSH
11648: CALL_OW 274
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 275
11660: PUSH
11661: LD_INT 20
11663: GREATER
11664: IFFALSE 11676
11666: GO 11668
11668: DISABLE
// begin Hint ( Building ) ;
11669: LD_STRING Building
11671: PPUSH
11672: CALL_OW 339
// end ;
11676: END
// on BuildingStarted ( build , hum ) do begin Hint ( Building2 ) ;
11677: LD_STRING Building2
11679: PPUSH
11680: CALL_OW 339
// disable ;
11684: DISABLE
// end ;
11685: PPOPN 2
11687: END
// every 0 0$0.5 trigger escape_flag do
11688: LD_EXP 28
11692: IFFALSE 11753
11694: GO 11696
11696: DISABLE
// begin if FilterUnitsInArea ( prijezd , [ f_side , americans ] ) > 0 then
11697: LD_INT 10
11699: PPUSH
11700: LD_INT 22
11702: PUSH
11703: LD_EXP 3
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PPUSH
11712: CALL_OW 70
11716: PUSH
11717: LD_INT 0
11719: GREATER
11720: IFFALSE 11752
// ComMoveXY ( FilterUnitsInArea ( prijezd , [ f_side , americans ] ) , 16 , 7 ) ;
11722: LD_INT 10
11724: PPUSH
11725: LD_INT 22
11727: PUSH
11728: LD_EXP 3
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 70
11741: PPUSH
11742: LD_INT 16
11744: PPUSH
11745: LD_INT 7
11747: PPUSH
11748: CALL_OW 111
// enable ;
11752: ENABLE
// end ;
11753: END
// function Escape ; begin
11754: LD_INT 0
11756: PPUSH
// wait ( 0 0$1 ) ;
11757: LD_INT 35
11759: PPUSH
11760: CALL_OW 67
// ComStop ( [ vehicle3 , vehicle4 ] ) ;
11764: LD_EXP 66
11768: PUSH
11769: LD_EXP 67
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PPUSH
11778: CALL_OW 141
// wait ( 0 0$1 ) ;
11782: LD_INT 35
11784: PPUSH
11785: CALL_OW 67
// if IsOk ( vehicle3 ) then
11789: LD_EXP 66
11793: PPUSH
11794: CALL_OW 302
11798: IFFALSE 11815
// ComMoveXY ( vehicle3 , 3 , 6 ) ;
11800: LD_EXP 66
11804: PPUSH
11805: LD_INT 3
11807: PPUSH
11808: LD_INT 6
11810: PPUSH
11811: CALL_OW 111
// if IsOk ( vehicle4 ) then
11815: LD_EXP 67
11819: PPUSH
11820: CALL_OW 302
11824: IFFALSE 11841
// ComMoveXY ( vehicle4 , 4 , 8 ) ;
11826: LD_EXP 67
11830: PPUSH
11831: LD_INT 4
11833: PPUSH
11834: LD_INT 8
11836: PPUSH
11837: CALL_OW 111
// if IsOk ( Mikhail ) and not ( Mikhail_in_depot ) then
11841: LD_EXP 65
11845: PPUSH
11846: CALL_OW 302
11850: PUSH
11851: LD_EXP 39
11855: NOT
11856: AND
11857: IFFALSE 11949
// begin target_of_escape = [ 4 , 6 ] ;
11859: LD_ADDR_LOC 10
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: LD_INT 6
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: ST_TO_ADDR
// SetSide ( Mikhail , russians1 ) ;
11874: LD_EXP 65
11878: PPUSH
11879: LD_EXP 6
11883: PPUSH
11884: CALL_OW 235
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
11888: LD_EXP 65
11892: PPUSH
11893: LD_LOC 10
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: PPUSH
11902: LD_LOC 10
11906: PUSH
11907: LD_INT 2
11909: ARRAY
11910: PPUSH
11911: CALL_OW 171
// AddComHold ( Mikhail ) ;
11915: LD_EXP 65
11919: PPUSH
11920: CALL_OW 200
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
11924: LD_EXP 3
11928: PPUSH
11929: LD_EXP 6
11933: PPUSH
11934: LD_INT 2
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: CALL_OW 80
// enable ( Mikhails_escape ) ;
11944: LD_EXP 45
11948: ENABLE_MARKED
// end ; escape_flag = true ;
11949: LD_ADDR_EXP 28
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// escape_dialogue = true ;
11957: LD_ADDR_EXP 99
11961: PUSH
11962: LD_INT 1
11964: ST_TO_ADDR
// Say ( driver3 , D5-Rus2-1a ) ;
11965: LD_EXP 68
11969: PPUSH
11970: LD_STRING D5-Rus2-1a
11972: PPUSH
11973: CALL_OW 88
// escape_dialogue = false ;
11977: LD_ADDR_EXP 99
11981: PUSH
11982: LD_INT 0
11984: ST_TO_ADDR
// end ;
11985: LD_VAR 0 1
11989: RET
// every 0 0$3 trigger tick > Time_of_visit do var e ;
11990: LD_OWVAR 1
11994: PUSH
11995: LD_EXP 25
11999: GREATER
12000: IFFALSE 12232
12002: GO 12004
12004: DISABLE
12005: LD_INT 0
12007: PPUSH
// begin repeat if FilterUnitsInArea ( Prijezd , [ ] ) = 0 then
12008: LD_INT 10
12010: PPUSH
12011: EMPTY
12012: PPUSH
12013: CALL_OW 70
12017: PUSH
12018: LD_INT 0
12020: EQUAL
12021: IFFALSE 12025
// break ;
12023: GO 12056
// ComMoveXY ( FilterUnitsInArea ( prijezd , [ ] ) , 16 , 7 ) ;
12025: LD_INT 10
12027: PPUSH
12028: EMPTY
12029: PPUSH
12030: CALL_OW 70
12034: PPUSH
12035: LD_INT 16
12037: PPUSH
12038: LD_INT 7
12040: PPUSH
12041: CALL_OW 111
// wait ( 0 0$1 ) ;
12045: LD_INT 35
12047: PPUSH
12048: CALL_OW 67
// until false ;
12052: LD_INT 0
12054: IFFALSE 12008
// PlaceUnitXY ( vehicle3 , 5 , 5 , false ) ;
12056: LD_EXP 66
12060: PPUSH
12061: LD_INT 5
12063: PPUSH
12064: LD_INT 5
12066: PPUSH
12067: LD_INT 0
12069: PPUSH
12070: CALL_OW 48
// PlaceUnitXY ( vehicle4 , 6 , 8 , false ) ;
12074: LD_EXP 67
12078: PPUSH
12079: LD_INT 6
12081: PPUSH
12082: LD_INT 8
12084: PPUSH
12085: LD_INT 0
12087: PPUSH
12088: CALL_OW 48
// ComMoveXY ( vehicle3 , 66 , 15 ) ;
12092: LD_EXP 66
12096: PPUSH
12097: LD_INT 66
12099: PPUSH
12100: LD_INT 15
12102: PPUSH
12103: CALL_OW 111
// ComMoveXY ( vehicle4 , 67 , 20 ) ;
12107: LD_EXP 67
12111: PPUSH
12112: LD_INT 67
12114: PPUSH
12115: LD_INT 20
12117: PPUSH
12118: CALL_OW 111
// if See ( americans , vehicle3 ) or See ( americans , vehicle4 ) then
12122: LD_EXP 3
12126: PPUSH
12127: LD_EXP 66
12131: PPUSH
12132: CALL_OW 292
12136: PUSH
12137: LD_EXP 3
12141: PPUSH
12142: LD_EXP 67
12146: PPUSH
12147: CALL_OW 292
12151: OR
12152: IFFALSE 12179
// if not ( escape_flag ) then
12154: LD_EXP 28
12158: NOT
12159: IFFALSE 12171
// e = true else
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
12169: GO 12179
// e = false ;
12171: LD_ADDR_VAR 0 1
12175: PUSH
12176: LD_INT 0
12178: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12179: LD_INT 245
12181: PPUSH
12182: CALL_OW 67
// if e then
12186: LD_VAR 0 1
12190: IFFALSE 12196
// Escape ;
12192: CALL 11754 0 0
// if vehicle_goes_flag then
12196: LD_EXP 100
12200: IFFALSE 12207
// enable ( vehicle_goes ) ;
12202: LD_EXP 27
12206: ENABLE_MARKED
// wait ( 0 0$3 ) ;
12207: LD_INT 105
12209: PPUSH
12210: CALL_OW 67
// CenterOnUnits ( [ vehicle3 , vehicle4 ] ) ;
12214: LD_EXP 66
12218: PUSH
12219: LD_EXP 67
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 85
// end ;
12232: PPOPN 1
12234: END
// every 0 0$2 marked 2 do
12235: GO 12237
12237: DISABLE
// begin if ( ( GetDistUnitXY ( vehicle3 , 66 , 15 ) < 5 and ( See ( americans , vehicle3 ) or GetLives ( vehicle3 ) < 1000 ) ) ) or ( ( GetDistUnitXY ( vehicle4 , 67 , 20 ) < 5 and ( See ( americans , vehicle4 ) or GetLives ( vehicle3 ) < 1000 ) ) ) or ( GetLives ( vehicle3 ) < 500 ) or ( GetLives ( vehicle4 ) < 500 ) then
12238: LD_EXP 66
12242: PPUSH
12243: LD_INT 66
12245: PPUSH
12246: LD_INT 15
12248: PPUSH
12249: CALL_OW 297
12253: PUSH
12254: LD_INT 5
12256: LESS
12257: PUSH
12258: LD_EXP 3
12262: PPUSH
12263: LD_EXP 66
12267: PPUSH
12268: CALL_OW 292
12272: PUSH
12273: LD_EXP 66
12277: PPUSH
12278: CALL_OW 256
12282: PUSH
12283: LD_INT 1000
12285: LESS
12286: OR
12287: AND
12288: PUSH
12289: LD_EXP 67
12293: PPUSH
12294: LD_INT 67
12296: PPUSH
12297: LD_INT 20
12299: PPUSH
12300: CALL_OW 297
12304: PUSH
12305: LD_INT 5
12307: LESS
12308: PUSH
12309: LD_EXP 3
12313: PPUSH
12314: LD_EXP 67
12318: PPUSH
12319: CALL_OW 292
12323: PUSH
12324: LD_EXP 66
12328: PPUSH
12329: CALL_OW 256
12333: PUSH
12334: LD_INT 1000
12336: LESS
12337: OR
12338: AND
12339: OR
12340: PUSH
12341: LD_EXP 66
12345: PPUSH
12346: CALL_OW 256
12350: PUSH
12351: LD_INT 500
12353: LESS
12354: OR
12355: PUSH
12356: LD_EXP 67
12360: PPUSH
12361: CALL_OW 256
12365: PUSH
12366: LD_INT 500
12368: LESS
12369: OR
12370: IFFALSE 12385
// begin if not ( escape_flag ) then
12372: LD_EXP 28
12376: NOT
12377: IFFALSE 12383
// Escape ;
12379: CALL 11754 0 0
// end else
12383: GO 12386
// enable ;
12385: ENABLE
// end ;
12386: END
// every 0 0$2 + 0 0$1 trigger IsOk ( vehicle3 ) and not ( escape_flag ) marked 2 do
12387: LD_EXP 66
12391: PPUSH
12392: CALL_OW 302
12396: PUSH
12397: LD_EXP 28
12401: NOT
12402: AND
12403: IFFALSE 12459
12405: GO 12407
12407: DISABLE
// begin if GetDistUnits ( vehicle3 , dep1 ) < 25 then
12408: LD_EXP 66
12412: PPUSH
12413: LD_INT 1
12415: PPUSH
12416: CALL_OW 296
12420: PUSH
12421: LD_INT 25
12423: LESS
12424: IFFALSE 12458
// begin CenterOnUnits ( [ vehicle3 , vehicle4 ] ) ;
12426: LD_EXP 66
12430: PUSH
12431: LD_EXP 67
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 85
// Say ( driver3 , D5-Rus2-1 ) ;
12444: LD_EXP 68
12448: PPUSH
12449: LD_STRING D5-Rus2-1
12451: PPUSH
12452: CALL_OW 88
// end else
12456: GO 12459
// enable ;
12458: ENABLE
// end ;
12459: END
// every 0 0$1 trigger escape_flag do var rus ;
12460: LD_EXP 28
12464: IFFALSE 12826
12466: GO 12468
12468: DISABLE
12469: LD_INT 0
12471: PPUSH
// begin if IsInArea ( vehicle3 , prijezd ) and ( IsInUnit ( driver3 ) > 0 ) then
12472: LD_EXP 66
12476: PPUSH
12477: LD_INT 10
12479: PPUSH
12480: CALL_OW 308
12484: PUSH
12485: LD_EXP 68
12489: PPUSH
12490: CALL_OW 310
12494: PUSH
12495: LD_INT 0
12497: GREATER
12498: AND
12499: IFFALSE 12557
// begin flee = flee + 1 ;
12501: LD_ADDR_EXP 29
12505: PUSH
12506: LD_EXP 29
12510: PUSH
12511: LD_INT 1
12513: PLUS
12514: ST_TO_ADDR
// DestroyUnit ( vehicle3 ) ;
12515: LD_EXP 66
12519: PPUSH
12520: CALL_OW 65
// if not ( IsOk ( vehicle4 ) ) then
12524: LD_EXP 67
12528: PPUSH
12529: CALL_OW 302
12533: NOT
12534: IFFALSE 12557
// begin disable ( vehicle_goes ) ;
12536: LD_EXP 27
12540: DISABLE_MARKED
// escape_flag = false ;
12541: LD_ADDR_EXP 28
12545: PUSH
12546: LD_INT 0
12548: ST_TO_ADDR
// vehicle_goes_flag = false ;
12549: LD_ADDR_EXP 100
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// end ; end ; if IsInArea ( vehicle4 , prijezd ) and ( IsInUnit ( driver4 ) > 0 ) then
12557: LD_EXP 67
12561: PPUSH
12562: LD_INT 10
12564: PPUSH
12565: CALL_OW 308
12569: PUSH
12570: LD_EXP 69
12574: PPUSH
12575: CALL_OW 310
12579: PUSH
12580: LD_INT 0
12582: GREATER
12583: AND
12584: IFFALSE 12642
// begin flee = flee + 1 ;
12586: LD_ADDR_EXP 29
12590: PUSH
12591: LD_EXP 29
12595: PUSH
12596: LD_INT 1
12598: PLUS
12599: ST_TO_ADDR
// DestroyUnit ( vehicle4 ) ;
12600: LD_EXP 67
12604: PPUSH
12605: CALL_OW 65
// if not ( IsOk ( vehicle3 ) ) then
12609: LD_EXP 66
12613: PPUSH
12614: CALL_OW 302
12618: NOT
12619: IFFALSE 12642
// begin disable ( vehicle_goes ) ;
12621: LD_EXP 27
12625: DISABLE_MARKED
// escape_flag = false ;
12626: LD_ADDR_EXP 28
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// vehicle_goes_flag = false ;
12634: LD_ADDR_EXP 100
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// end ; end ; if not ( IsOk ( vehicle3 ) or IsOk ( vehicle4 ) ) and flee = 0 then
12642: LD_EXP 66
12646: PPUSH
12647: CALL_OW 302
12651: PUSH
12652: LD_EXP 67
12656: PPUSH
12657: CALL_OW 302
12661: OR
12662: NOT
12663: PUSH
12664: LD_EXP 29
12668: PUSH
12669: LD_INT 0
12671: EQUAL
12672: AND
12673: IFFALSE 12705
// begin escape_flag = false ;
12675: LD_ADDR_EXP 28
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// Time_of_attack = Time_of_attack + 1 1$0 ;
12683: LD_ADDR_EXP 26
12687: PUSH
12688: LD_EXP 26
12692: PUSH
12693: LD_INT 2100
12695: PLUS
12696: ST_TO_ADDR
// Attack_canceled = true ;
12697: LD_ADDR_EXP 93
12701: PUSH
12702: LD_INT 1
12704: ST_TO_ADDR
// end ; if escape_flag = false and IsOk ( AmME1 ) then
12705: LD_EXP 28
12709: PUSH
12710: LD_INT 0
12712: EQUAL
12713: PUSH
12714: LD_EXP 13
12718: PPUSH
12719: CALL_OW 302
12723: AND
12724: IFFALSE 12819
// begin while escape_dialogue do
12726: LD_EXP 99
12730: IFFALSE 12741
// Wait ( 0 0$1 ) ;
12732: LD_INT 35
12734: PPUSH
12735: CALL_OW 67
12739: GO 12726
// case flee of 1 :
12741: LD_EXP 29
12745: PUSH
12746: LD_INT 1
12748: DOUBLE
12749: EQUAL
12750: IFTRUE 12754
12752: GO 12781
12754: POP
// begin Say ( AmME1 , D5a-Sol1-1 ) ;
12755: LD_EXP 13
12759: PPUSH
12760: LD_STRING D5a-Sol1-1
12762: PPUSH
12763: CALL_OW 88
// Say ( John , D5a-JMM-1 ) ;
12767: LD_EXP 7
12771: PPUSH
12772: LD_STRING D5a-JMM-1
12774: PPUSH
12775: CALL_OW 88
// end ; 2 :
12779: GO 12817
12781: LD_INT 2
12783: DOUBLE
12784: EQUAL
12785: IFTRUE 12789
12787: GO 12816
12789: POP
// begin Say ( AmME1 , D5a-Sol1-1a ) ;
12790: LD_EXP 13
12794: PPUSH
12795: LD_STRING D5a-Sol1-1a
12797: PPUSH
12798: CALL_OW 88
// Say ( John , D5a-JMM-1 ) ;
12802: LD_EXP 7
12806: PPUSH
12807: LD_STRING D5a-JMM-1
12809: PPUSH
12810: CALL_OW 88
// end ; end ;
12814: GO 12817
12816: POP
// end else
12817: GO 12826
// if escape_flag then
12819: LD_EXP 28
12823: IFFALSE 12826
// enable ;
12825: ENABLE
// end ;
12826: PPOPN 1
12828: END
// function PlaceMikhail ; var AllAmUn , i , max , max_un ; begin
12829: LD_INT 0
12831: PPUSH
12832: PPUSH
12833: PPUSH
12834: PPUSH
12835: PPUSH
// AllAmUn := FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
12836: LD_ADDR_VAR 0 2
12840: PUSH
12841: LD_INT 22
12843: PUSH
12844: LD_EXP 3
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 50
12855: PUSH
12856: EMPTY
12857: LIST
12858: PUSH
12859: LD_INT 21
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: PPUSH
12874: CALL_OW 69
12878: ST_TO_ADDR
// if AllAmUn = 1 then
12879: LD_VAR 0 2
12883: PUSH
12884: LD_INT 1
12886: EQUAL
12887: IFFALSE 12955
// begin PlaceUnitXYR ( Mikhail , GetX ( John ) , GetY ( John ) , 5 , true ) ;
12889: LD_EXP 65
12893: PPUSH
12894: LD_EXP 7
12898: PPUSH
12899: CALL_OW 250
12903: PPUSH
12904: LD_EXP 7
12908: PPUSH
12909: CALL_OW 251
12913: PPUSH
12914: LD_INT 5
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 50
// Wait ( 0 0$3 ) ;
12924: LD_INT 105
12926: PPUSH
12927: CALL_OW 67
// ComAttackUnit ( Mikhail , John ) ;
12931: LD_EXP 65
12935: PPUSH
12936: LD_EXP 7
12940: PPUSH
12941: CALL_OW 115
// result = true ;
12945: LD_ADDR_VAR 0 1
12949: PUSH
12950: LD_INT 1
12952: ST_TO_ADDR
// end else
12953: GO 13114
// if AllAmUn > 1 then
12955: LD_VAR 0 2
12959: PUSH
12960: LD_INT 1
12962: GREATER
12963: IFFALSE 13106
// begin for i in AllAmUn do
12965: LD_ADDR_VAR 0 3
12969: PUSH
12970: LD_VAR 0 2
12974: PUSH
12975: FOR_IN
12976: IFFALSE 13014
// begin if not ( IsDying ( i ) ) and ( i <> John ) then
12978: LD_VAR 0 3
12982: PPUSH
12983: CALL_OW 303
12987: NOT
12988: PUSH
12989: LD_VAR 0 3
12993: PUSH
12994: LD_EXP 7
12998: NONEQUAL
12999: AND
13000: IFFALSE 13012
// max_un := i ;
13002: LD_ADDR_VAR 0 5
13006: PUSH
13007: LD_VAR 0 3
13011: ST_TO_ADDR
// end ;
13012: GO 12975
13014: POP
13015: POP
// PlaceUnitXYR ( Mikhail , GetX ( max_un ) , GetY ( max_un ) , 4 , true ) ;
13016: LD_EXP 65
13020: PPUSH
13021: LD_VAR 0 5
13025: PPUSH
13026: CALL_OW 250
13030: PPUSH
13031: LD_VAR 0 5
13035: PPUSH
13036: CALL_OW 251
13040: PPUSH
13041: LD_INT 4
13043: PPUSH
13044: LD_INT 1
13046: PPUSH
13047: CALL_OW 50
// Wait ( 0 0$3 ) ;
13051: LD_INT 105
13053: PPUSH
13054: CALL_OW 67
// enable ( Mikhail_placed ) ;
13058: LD_EXP 35
13062: ENABLE_MARKED
// ComMoveUnit ( Mikhail , max_un ) ;
13063: LD_EXP 65
13067: PPUSH
13068: LD_VAR 0 5
13072: PPUSH
13073: CALL_OW 112
// ComStop ( max_un ) ;
13077: LD_VAR 0 5
13081: PPUSH
13082: CALL_OW 141
// Followed := max_un ;
13086: LD_ADDR_LOC 2
13090: PUSH
13091: LD_VAR 0 5
13095: ST_TO_ADDR
// result := true ;
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// end else
13104: GO 13114
// result := false ;
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// end ;
13114: LD_VAR 0 1
13118: RET
// function Try1 ; begin
13119: LD_INT 0
13121: PPUSH
// if IsOk ( AmME1 ) and not ( IsDying ( AmME1 ) ) then
13122: LD_EXP 13
13126: PPUSH
13127: CALL_OW 302
13131: PUSH
13132: LD_EXP 13
13136: PPUSH
13137: CALL_OW 303
13141: NOT
13142: AND
13143: IFFALSE 13235
// begin PlaceUnitXYR ( Mikhail , GetX ( AmME1 ) , GetY ( AmME1 ) , 4 , true ) ;
13145: LD_EXP 65
13149: PPUSH
13150: LD_EXP 13
13154: PPUSH
13155: CALL_OW 250
13159: PPUSH
13160: LD_EXP 13
13164: PPUSH
13165: CALL_OW 251
13169: PPUSH
13170: LD_INT 4
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 50
// Wait ( 0 0$3 ) ;
13180: LD_INT 105
13182: PPUSH
13183: CALL_OW 67
// enable ( Mikhail_placed ) ;
13187: LD_EXP 35
13191: ENABLE_MARKED
// ComMoveUnit ( Mikhail , AmME1 ) ;
13192: LD_EXP 65
13196: PPUSH
13197: LD_EXP 13
13201: PPUSH
13202: CALL_OW 112
// ComStop ( AmME1 ) ;
13206: LD_EXP 13
13210: PPUSH
13211: CALL_OW 141
// Followed := AmME1 ;
13215: LD_ADDR_LOC 2
13219: PUSH
13220: LD_EXP 13
13224: ST_TO_ADDR
// result := true ;
13225: LD_ADDR_VAR 0 1
13229: PUSH
13230: LD_INT 1
13232: ST_TO_ADDR
// end else
13233: GO 13243
// result := false ;
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// end ;
13243: LD_VAR 0 1
13247: RET
// function Try2 ; begin
13248: LD_INT 0
13250: PPUSH
// if IsOk ( AmFE2 ) and not ( IsDying ( AmFE2 ) ) then
13251: LD_EXP 14
13255: PPUSH
13256: CALL_OW 302
13260: PUSH
13261: LD_EXP 14
13265: PPUSH
13266: CALL_OW 303
13270: NOT
13271: AND
13272: IFFALSE 13364
// begin PlaceUnitXYR ( Mikhail , GetX ( AmFE2 ) , GetY ( AmFE2 ) , 3 , true ) ;
13274: LD_EXP 65
13278: PPUSH
13279: LD_EXP 14
13283: PPUSH
13284: CALL_OW 250
13288: PPUSH
13289: LD_EXP 14
13293: PPUSH
13294: CALL_OW 251
13298: PPUSH
13299: LD_INT 3
13301: PPUSH
13302: LD_INT 1
13304: PPUSH
13305: CALL_OW 50
// Wait ( 0 0$3 ) ;
13309: LD_INT 105
13311: PPUSH
13312: CALL_OW 67
// enable ( Mikhail_placed ) ;
13316: LD_EXP 35
13320: ENABLE_MARKED
// ComMoveUnit ( Mikhail , AmFE2 ) ;
13321: LD_EXP 65
13325: PPUSH
13326: LD_EXP 14
13330: PPUSH
13331: CALL_OW 112
// ComStop ( AmFE2 ) ;
13335: LD_EXP 14
13339: PPUSH
13340: CALL_OW 141
// Followed := AmFE2 ;
13344: LD_ADDR_LOC 2
13348: PUSH
13349: LD_EXP 14
13353: ST_TO_ADDR
// result := true ;
13354: LD_ADDR_VAR 0 1
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// end else
13362: GO 13372
// result := false ;
13364: LD_ADDR_VAR 0 1
13368: PUSH
13369: LD_INT 0
13371: ST_TO_ADDR
// end ;
13372: LD_VAR 0 1
13376: RET
// every 0 0$5 trigger Time_of_capture + 0 0$20 < tick do var r , cont ;
13377: LD_EXP 30
13381: PUSH
13382: LD_INT 700
13384: PLUS
13385: PUSH
13386: LD_OWVAR 1
13390: LESS
13391: IFFALSE 13536
13393: GO 13395
13395: DISABLE
13396: LD_INT 0
13398: PPUSH
13399: PPUSH
// begin r = Rand ( 0 , 1 ) ;
13400: LD_ADDR_VAR 0 1
13404: PUSH
13405: LD_INT 0
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 12
13415: ST_TO_ADDR
// cont = false ;
13416: LD_ADDR_VAR 0 2
13420: PUSH
13421: LD_INT 0
13423: ST_TO_ADDR
// count = count + 1 ;
13424: LD_ADDR_EXP 77
13428: PUSH
13429: LD_EXP 77
13433: PUSH
13434: LD_INT 1
13436: PLUS
13437: ST_TO_ADDR
// if IsOk ( AmME1 ) or IsOk ( AmFE2 ) then
13438: LD_EXP 13
13442: PPUSH
13443: CALL_OW 302
13447: PUSH
13448: LD_EXP 14
13452: PPUSH
13453: CALL_OW 302
13457: OR
13458: IFFALSE 13514
// if r then
13460: LD_VAR 0 1
13464: IFFALSE 13490
// begin if not ( Try1 ) then
13466: CALL 13119 0 0
13470: NOT
13471: IFFALSE 13488
// if not ( Try2 ) then
13473: CALL 13248 0 0
13477: NOT
13478: IFFALSE 13488
// cont = true end else
13480: LD_ADDR_VAR 0 2
13484: PUSH
13485: LD_INT 1
13487: ST_TO_ADDR
13488: GO 13512
// begin if not ( Try2 ) then
13490: CALL 13248 0 0
13494: NOT
13495: IFFALSE 13512
// if not ( Try1 ) then
13497: CALL 13119 0 0
13501: NOT
13502: IFFALSE 13512
// cont = true ;
13504: LD_ADDR_VAR 0 2
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// end else
13512: GO 13529
// begin if not ( PlaceMikhail ) then
13514: CALL 12829 0 0
13518: NOT
13519: IFFALSE 13529
// cont = true ;
13521: LD_ADDR_VAR 0 2
13525: PUSH
13526: LD_INT 1
13528: ST_TO_ADDR
// end ; if cont then
13529: LD_VAR 0 2
13533: IFFALSE 13536
// enable ;
13535: ENABLE
// end ;
13536: PPOPN 2
13538: END
// every 0 0$1 marked 3 do
13539: GO 13541
13541: DISABLE
// begin if GetClass ( Mikhail ) <> class_mechanic then
13542: LD_EXP 65
13546: PPUSH
13547: CALL_OW 257
13551: PUSH
13552: LD_INT 3
13554: NONEQUAL
13555: IFFALSE 13569
// SetClass ( Mikhail , class_mechanic ) ;
13557: LD_EXP 65
13561: PPUSH
13562: LD_INT 3
13564: PPUSH
13565: CALL_OW 336
// enable ;
13569: ENABLE
// end ;
13570: END
// every 0 0$0.5 marked 3 do var answer , all , i ;
13571: GO 13573
13573: DISABLE
13574: LD_INT 0
13576: PPUSH
13577: PPUSH
13578: PPUSH
// begin if FilterAllUnits ( [ f_side , americans ] ) > 1 then
13579: LD_INT 22
13581: PUSH
13582: LD_EXP 3
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PPUSH
13591: CALL_OW 69
13595: PUSH
13596: LD_INT 1
13598: GREATER
13599: IFFALSE 14438
// begin if FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 15 ] ] ) > 0 then
13601: LD_INT 22
13603: PUSH
13604: LD_EXP 3
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 91
13615: PUSH
13616: LD_EXP 65
13620: PUSH
13621: LD_INT 15
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: PUSH
13638: LD_INT 0
13640: GREATER
13641: IFFALSE 14437
// begin all = FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 15 ] ] ) ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_INT 22
13650: PUSH
13651: LD_EXP 3
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 91
13662: PUSH
13663: LD_EXP 65
13667: PUSH
13668: LD_INT 15
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 69
13684: ST_TO_ADDR
// AddComHold ( all ) ;
13685: LD_VAR 0 2
13689: PPUSH
13690: CALL_OW 200
// AddComHold ( Followed ) ;
13694: LD_LOC 2
13698: PPUSH
13699: CALL_OW 200
// AddComTurnUnit ( all , Mikhail ) ;
13703: LD_VAR 0 2
13707: PPUSH
13708: LD_EXP 65
13712: PPUSH
13713: CALL_OW 179
// AddComTurnUnit ( Followed , Mikhail ) ;
13717: LD_LOC 2
13721: PPUSH
13722: LD_EXP 65
13726: PPUSH
13727: CALL_OW 179
// while GetDistUnits ( Mikhail , Followed ) > 6 do
13731: LD_EXP 65
13735: PPUSH
13736: LD_LOC 2
13740: PPUSH
13741: CALL_OW 296
13745: PUSH
13746: LD_INT 6
13748: GREATER
13749: IFFALSE 13760
// wait ( 0 0$0.5 ) ;
13751: LD_INT 18
13753: PPUSH
13754: CALL_OW 67
13758: GO 13731
// DialogueOn ;
13760: CALL_OW 6
// CenterOnUnits ( [ Mikhail , Followed ] ) ;
13764: LD_EXP 65
13768: PUSH
13769: LD_LOC 2
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PPUSH
13778: CALL_OW 85
// Say ( Mikhail , D4-Mikh-1 ) ;
13782: LD_EXP 65
13786: PPUSH
13787: LD_STRING D4-Mikh-1
13789: PPUSH
13790: CALL_OW 88
// if IsOk ( AmME1 ) or IsOk ( AmFE2 ) then
13794: LD_EXP 13
13798: PPUSH
13799: CALL_OW 302
13803: PUSH
13804: LD_EXP 14
13808: PPUSH
13809: CALL_OW 302
13813: OR
13814: IFFALSE 13968
// begin if Followed = AmME1 then
13816: LD_LOC 2
13820: PUSH
13821: LD_EXP 13
13825: EQUAL
13826: IFFALSE 13842
// Say ( AmME1 , D4-Sol1-1 ) else
13828: LD_EXP 13
13832: PPUSH
13833: LD_STRING D4-Sol1-1
13835: PPUSH
13836: CALL_OW 88
13840: GO 13854
// Say ( AmFE2 , D4-FSol1-1 ) ;
13842: LD_EXP 14
13846: PPUSH
13847: LD_STRING D4-FSol1-1
13849: PPUSH
13850: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
13854: LD_EXP 65
13858: PPUSH
13859: LD_STRING D4-Mikh-2
13861: PPUSH
13862: CALL_OW 88
// if Followed = AmME1 then
13866: LD_LOC 2
13870: PUSH
13871: LD_EXP 13
13875: EQUAL
13876: IFFALSE 13892
// Say ( AmME1 , D4-Sol1-2 ) else
13878: LD_EXP 13
13882: PPUSH
13883: LD_STRING D4-Sol1-2
13885: PPUSH
13886: CALL_OW 88
13890: GO 13904
// Say ( AmFE2 , D4-FSol1-2 ) ;
13892: LD_EXP 14
13896: PPUSH
13897: LD_STRING D4-FSol1-2
13899: PPUSH
13900: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
13904: LD_EXP 65
13908: PPUSH
13909: LD_STRING D4-Mikh-3
13911: PPUSH
13912: CALL_OW 88
// if Followed = AmME1 then
13916: LD_LOC 2
13920: PUSH
13921: LD_EXP 13
13925: EQUAL
13926: IFFALSE 13942
// Say ( AmME1 , D4-Sol1-3 ) else
13928: LD_EXP 13
13932: PPUSH
13933: LD_STRING D4-Sol1-3
13935: PPUSH
13936: CALL_OW 88
13940: GO 13954
// Say ( AmFE2 , D4-FSol1-3 ) ;
13942: LD_EXP 14
13946: PPUSH
13947: LD_STRING D4-FSol1-3
13949: PPUSH
13950: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
13954: LD_EXP 65
13958: PPUSH
13959: LD_STRING D4-Mikh-4
13961: PPUSH
13962: CALL_OW 88
// end else
13966: GO 14159
// begin i = Nearest ( Mikhail , FilterAllUnits ( [ f_side , americans ] ) ) ;
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_EXP 65
13977: PPUSH
13978: LD_INT 22
13980: PUSH
13981: LD_EXP 3
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: CALL_OW 69
13994: PPUSH
13995: CALL 10204 0 2
13999: ST_TO_ADDR
// if GetSex ( i ) = sex_male then
14000: LD_VAR 0 3
14004: PPUSH
14005: CALL_OW 258
14009: PUSH
14010: LD_INT 1
14012: EQUAL
14013: IFFALSE 14029
// Say ( i , D4-Sol1-1 ) else
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_STRING D4-Sol1-1
14022: PPUSH
14023: CALL_OW 88
14027: GO 14041
// Say ( i , D4-FSol1-1 ) ;
14029: LD_VAR 0 3
14033: PPUSH
14034: LD_STRING D4-FSol1-1
14036: PPUSH
14037: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
14041: LD_EXP 65
14045: PPUSH
14046: LD_STRING D4-Mikh-2
14048: PPUSH
14049: CALL_OW 88
// if GetSex ( i ) = sex_male then
14053: LD_VAR 0 3
14057: PPUSH
14058: CALL_OW 258
14062: PUSH
14063: LD_INT 1
14065: EQUAL
14066: IFFALSE 14082
// Say ( i , D4-Sol1-2 ) else
14068: LD_VAR 0 3
14072: PPUSH
14073: LD_STRING D4-Sol1-2
14075: PPUSH
14076: CALL_OW 88
14080: GO 14094
// Say ( i , D4-FSol1-2 ) ;
14082: LD_VAR 0 3
14086: PPUSH
14087: LD_STRING D4-FSol1-2
14089: PPUSH
14090: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
14094: LD_EXP 65
14098: PPUSH
14099: LD_STRING D4-Mikh-3
14101: PPUSH
14102: CALL_OW 88
// if GetSex ( i ) = sex_male then
14106: LD_VAR 0 3
14110: PPUSH
14111: CALL_OW 258
14115: PUSH
14116: LD_INT 1
14118: EQUAL
14119: IFFALSE 14135
// Say ( i , D4-Sol1-3 ) else
14121: LD_VAR 0 3
14125: PPUSH
14126: LD_STRING D4-Sol1-3
14128: PPUSH
14129: CALL_OW 88
14133: GO 14147
// Say ( i , D4-FSol1-3 ) ;
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_STRING D4-FSol1-3
14142: PPUSH
14143: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
14147: LD_EXP 65
14151: PPUSH
14152: LD_STRING D4-Mikh-4
14154: PPUSH
14155: CALL_OW 88
// end ; answer = Query ( Qs1 ) ;
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: LD_STRING Qs1
14166: PPUSH
14167: CALL_OW 97
14171: ST_TO_ADDR
// DialogueOff ;
14172: CALL_OW 7
// case answer of 1 :
14176: LD_VAR 0 1
14180: PUSH
14181: LD_INT 1
14183: DOUBLE
14184: EQUAL
14185: IFTRUE 14189
14187: GO 14260
14189: POP
// begin SetAttitude ( americans , russians1 , att_enemy , true ) ;
14190: LD_EXP 3
14194: PPUSH
14195: LD_EXP 6
14199: PPUSH
14200: LD_INT 2
14202: PPUSH
14203: LD_INT 1
14205: PPUSH
14206: CALL_OW 80
// ComAttackUnit ( Followed , Mikhail ) ;
14210: LD_LOC 2
14214: PPUSH
14215: LD_EXP 65
14219: PPUSH
14220: CALL_OW 115
// ComFree ( Mikhail ) ;
14224: LD_EXP 65
14228: PPUSH
14229: CALL_OW 139
// Mikhails_outcome = - 1 ;
14233: LD_ADDR_LOC 3
14237: PUSH
14238: LD_INT 1
14240: NEG
14241: ST_TO_ADDR
// Mikhail_status := 2 ;
14242: LD_ADDR_LOC 4
14246: PUSH
14247: LD_INT 2
14249: ST_TO_ADDR
// mikhail_marked_for_death = true ;
14250: LD_ADDR_EXP 42
14254: PUSH
14255: LD_INT 1
14257: ST_TO_ADDR
// end ; 2 :
14258: GO 14435
14260: LD_INT 2
14262: DOUBLE
14263: EQUAL
14264: IFTRUE 14268
14266: GO 14377
14268: POP
// begin DoNotAttack ( russians , Followed ) ;
14269: LD_EXP 5
14273: PPUSH
14274: LD_LOC 2
14278: PPUSH
14279: CALL_OW 471
// enable ( Mikhail_captured ) ;
14283: LD_EXP 36
14287: ENABLE_MARKED
// enable ( tigers_allowed ) ;
14288: LD_EXP 81
14292: ENABLE_MARKED
// ComMoveUnit ( Mikhail , Followed ) ;
14293: LD_EXP 65
14297: PPUSH
14298: LD_LOC 2
14302: PPUSH
14303: CALL_OW 112
// while GetDistUnits ( Mikhail , John ) > 5 do
14307: LD_EXP 65
14311: PPUSH
14312: LD_EXP 7
14316: PPUSH
14317: CALL_OW 296
14321: PUSH
14322: LD_INT 5
14324: GREATER
14325: IFFALSE 14350
// begin ComMoveUnit ( Followed , John ) ;
14327: LD_LOC 2
14331: PPUSH
14332: LD_EXP 7
14336: PPUSH
14337: CALL_OW 112
// Wait ( 0 0$1 ) ;
14341: LD_INT 35
14343: PPUSH
14344: CALL_OW 67
// end ;
14348: GO 14307
// ComStop ( Followed ) ;
14350: LD_LOC 2
14354: PPUSH
14355: CALL_OW 141
// Mikhails_outcome = 1 ;
14359: LD_ADDR_LOC 3
14363: PUSH
14364: LD_INT 1
14366: ST_TO_ADDR
// Mikhail_status := 5 ;
14367: LD_ADDR_LOC 4
14371: PUSH
14372: LD_INT 5
14374: ST_TO_ADDR
// end ; 3 :
14375: GO 14435
14377: LD_INT 3
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14434
14385: POP
// begin ComMoveXY ( Mikhail , 4 , 6 ) ;
14386: LD_EXP 65
14390: PPUSH
14391: LD_INT 4
14393: PPUSH
14394: LD_INT 6
14396: PPUSH
14397: CALL_OW 111
// AddComHold ( Mikhail ) ;
14401: LD_EXP 65
14405: PPUSH
14406: CALL_OW 200
// enable ( remove_mikhail ) ;
14410: LD_EXP 43
14414: ENABLE_MARKED
// Mikhails_outcome = - 1 ;
14415: LD_ADDR_LOC 3
14419: PUSH
14420: LD_INT 1
14422: NEG
14423: ST_TO_ADDR
// Mikhail_status := 1 ;
14424: LD_ADDR_LOC 4
14428: PUSH
14429: LD_INT 1
14431: ST_TO_ADDR
// end ; end ;
14432: GO 14435
14434: POP
// end else
14435: GO 14438
// enable ;
14437: ENABLE
// end ; end ;
14438: PPOPN 3
14440: END
// every 0 0$1 trigger mikhail_marked_for_death do var started_running ;
14441: LD_EXP 42
14445: IFFALSE 14677
14447: GO 14449
14449: DISABLE
14450: LD_INT 0
14452: PPUSH
// begin started_running = false ;
14453: LD_ADDR_VAR 0 1
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14461: LD_INT 35
14463: PPUSH
14464: CALL_OW 67
// if IsDead ( Mikhail ) then
14468: LD_EXP 65
14472: PPUSH
14473: CALL_OW 301
14477: IFFALSE 14481
// exit ;
14479: GO 14677
// if not started_running then
14481: LD_VAR 0 1
14485: NOT
14486: IFFALSE 14546
// if FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 10 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
14488: LD_INT 22
14490: PUSH
14491: LD_EXP 3
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 91
14502: PUSH
14503: LD_EXP 65
14507: PUSH
14508: LD_INT 10
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 3
14518: PUSH
14519: LD_INT 54
14521: PUSH
14522: EMPTY
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: PUSH
14539: LD_INT 0
14541: GREATER
14542: IFFALSE 14546
// continue ;
14544: GO 14461
// started_running = true ;
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_INT 1
14553: ST_TO_ADDR
// if GetDistUnitXY ( Mikhail , 4 , 6 ) <= 1 or GetDistUnitXY ( Mikhail , 91 , 1 ) <= 1 then
14554: LD_EXP 65
14558: PPUSH
14559: LD_INT 4
14561: PPUSH
14562: LD_INT 6
14564: PPUSH
14565: CALL_OW 297
14569: PUSH
14570: LD_INT 1
14572: LESSEQUAL
14573: PUSH
14574: LD_EXP 65
14578: PPUSH
14579: LD_INT 91
14581: PPUSH
14582: LD_INT 1
14584: PPUSH
14585: CALL_OW 297
14589: PUSH
14590: LD_INT 1
14592: LESSEQUAL
14593: OR
14594: IFFALSE 14607
// begin RemoveUnit ( Mikhail ) ;
14596: LD_EXP 65
14600: PPUSH
14601: CALL_OW 64
// exit ;
14605: GO 14677
// end ; if GetDistUnitXY ( Mikhail , 4 , 6 ) < GetDistUnitXY ( Mikhail , 91 , 1 ) then
14607: LD_EXP 65
14611: PPUSH
14612: LD_INT 4
14614: PPUSH
14615: LD_INT 6
14617: PPUSH
14618: CALL_OW 297
14622: PUSH
14623: LD_EXP 65
14627: PPUSH
14628: LD_INT 91
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 297
14638: LESS
14639: IFFALSE 14658
// ComMoveXY ( Mikhail , 4 , 6 ) else
14641: LD_EXP 65
14645: PPUSH
14646: LD_INT 4
14648: PPUSH
14649: LD_INT 6
14651: PPUSH
14652: CALL_OW 111
14656: GO 14673
// ComMoveXY ( Mikhail , 91 , 1 ) ;
14658: LD_EXP 65
14662: PPUSH
14663: LD_INT 91
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 111
// until false ;
14673: LD_INT 0
14675: IFFALSE 14461
// end ;
14677: PPOPN 1
14679: END
// every 0 0$0.5 trigger IsAt ( Mikhail , 4 , 6 ) marked 11 do
14680: LD_EXP 65
14684: PPUSH
14685: LD_INT 4
14687: PPUSH
14688: LD_INT 6
14690: PPUSH
14691: CALL_OW 307
14695: IFFALSE 14709
14697: GO 14699
14699: DISABLE
// begin RemoveUnit ( Mikhail ) ;
14700: LD_EXP 65
14704: PPUSH
14705: CALL_OW 64
// end ;
14709: END
// every 0 0$2 marked 4 do var Alive , Speaker ;
14710: GO 14712
14712: DISABLE
14713: LD_INT 0
14715: PPUSH
14716: PPUSH
// begin if IsOk ( Mikhail ) and GetDistUnits ( John , Mikhail ) < 6 then
14717: LD_EXP 65
14721: PPUSH
14722: CALL_OW 302
14726: PUSH
14727: LD_EXP 7
14731: PPUSH
14732: LD_EXP 65
14736: PPUSH
14737: CALL_OW 296
14741: PUSH
14742: LD_INT 6
14744: LESS
14745: AND
14746: IFFALSE 15302
// begin enable ( conversation ) ;
14748: LD_EXP 44
14752: ENABLE_MARKED
// ComTurnUnit ( Mikhail , John ) ;
14753: LD_EXP 65
14757: PPUSH
14758: LD_EXP 7
14762: PPUSH
14763: CALL_OW 119
// DialogueOn ;
14767: CALL_OW 6
// ComMoveUnit ( Mikhail , John ) ;
14771: LD_EXP 65
14775: PPUSH
14776: LD_EXP 7
14780: PPUSH
14781: CALL_OW 112
// Say ( John , D4b-JMM-1 ) ;
14785: LD_EXP 7
14789: PPUSH
14790: LD_STRING D4b-JMM-1
14792: PPUSH
14793: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
14797: LD_EXP 65
14801: PPUSH
14802: LD_STRING D4b-Mikh-1
14804: PPUSH
14805: CALL_OW 88
// Say ( John , D4b-JMM-2 ) ;
14809: LD_EXP 7
14813: PPUSH
14814: LD_STRING D4b-JMM-2
14816: PPUSH
14817: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
14821: LD_EXP 65
14825: PPUSH
14826: LD_STRING D4b-Mikh-2
14828: PPUSH
14829: CALL_OW 88
// Say ( John , D4b-JMM-3 ) ;
14833: LD_EXP 7
14837: PPUSH
14838: LD_STRING D4b-JMM-3
14840: PPUSH
14841: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
14845: LD_EXP 65
14849: PPUSH
14850: LD_STRING D4b-Mikh-3
14852: PPUSH
14853: CALL_OW 88
// Say ( John , D4b-JMM-4 ) ;
14857: LD_EXP 7
14861: PPUSH
14862: LD_STRING D4b-JMM-4
14864: PPUSH
14865: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
14869: LD_EXP 65
14873: PPUSH
14874: LD_STRING D4b-Mikh-4
14876: PPUSH
14877: CALL_OW 88
// Say ( John , D4b-JMM-5 ) ;
14881: LD_EXP 7
14885: PPUSH
14886: LD_STRING D4b-JMM-5
14888: PPUSH
14889: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
14893: LD_EXP 65
14897: PPUSH
14898: LD_STRING D4b-Mikh-5
14900: PPUSH
14901: CALL_OW 88
// Say ( John , D4b-JMM-6 ) ;
14905: LD_EXP 7
14909: PPUSH
14910: LD_STRING D4b-JMM-6
14912: PPUSH
14913: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
14917: LD_EXP 65
14921: PPUSH
14922: LD_STRING D4b-Mikh-6
14924: PPUSH
14925: CALL_OW 88
// Say ( John , D4b-JMM-7 ) ;
14929: LD_EXP 7
14933: PPUSH
14934: LD_STRING D4b-JMM-7
14936: PPUSH
14937: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
14941: LD_EXP 65
14945: PPUSH
14946: LD_STRING D4b-Mikh-7
14948: PPUSH
14949: CALL_OW 88
// Alive = UnitFilter ( [ AmME1 , AmFE2 , AmMSo3 , Nick ] , [ f_ok ] ) ;
14953: LD_ADDR_VAR 0 1
14957: PUSH
14958: LD_EXP 13
14962: PUSH
14963: LD_EXP 14
14967: PUSH
14968: LD_EXP 15
14972: PUSH
14973: LD_EXP 11
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: PPUSH
14984: LD_INT 50
14986: PUSH
14987: EMPTY
14988: LIST
14989: PPUSH
14990: CALL_OW 72
14994: ST_TO_ADDR
// if Alive > 0 then
14995: LD_VAR 0 1
14999: PUSH
15000: LD_INT 0
15002: GREATER
15003: IFFALSE 15029
// Speaker = Alive [ Rand ( 1 , Alive ) ] ;
15005: LD_ADDR_VAR 0 2
15009: PUSH
15010: LD_VAR 0 1
15014: PUSH
15015: LD_INT 1
15017: PPUSH
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 12
15027: ARRAY
15028: ST_TO_ADDR
// if GetSex ( Speaker ) = sex_male then
15029: LD_VAR 0 2
15033: PPUSH
15034: CALL_OW 258
15038: PUSH
15039: LD_INT 1
15041: EQUAL
15042: IFFALSE 15058
// Say ( Speaker , D4b-Sol1-7 ) else
15044: LD_VAR 0 2
15048: PPUSH
15049: LD_STRING D4b-Sol1-7
15051: PPUSH
15052: CALL_OW 88
15056: GO 15070
// Say ( Speaker , D4b-FSol1-7 ) ;
15058: LD_VAR 0 2
15062: PPUSH
15063: LD_STRING D4b-FSol1-7
15065: PPUSH
15066: CALL_OW 88
// Say ( John , D4b-JMM-8 ) ;
15070: LD_EXP 7
15074: PPUSH
15075: LD_STRING D4b-JMM-8
15077: PPUSH
15078: CALL_OW 88
// Alive = UnitFilter ( [ AmME1 , AmFE2 , AmMSo3 , Nick ] , [ f_ok ] ) ;
15082: LD_ADDR_VAR 0 1
15086: PUSH
15087: LD_EXP 13
15091: PUSH
15092: LD_EXP 14
15096: PUSH
15097: LD_EXP 15
15101: PUSH
15102: LD_EXP 11
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PPUSH
15113: LD_INT 50
15115: PUSH
15116: EMPTY
15117: LIST
15118: PPUSH
15119: CALL_OW 72
15123: ST_TO_ADDR
// if Alive > 0 then
15124: LD_VAR 0 1
15128: PUSH
15129: LD_INT 0
15131: GREATER
15132: IFFALSE 15158
// Speaker = Alive [ Rand ( 1 , Alive ) ] ;
15134: LD_ADDR_VAR 0 2
15138: PUSH
15139: LD_VAR 0 1
15143: PUSH
15144: LD_INT 1
15146: PPUSH
15147: LD_VAR 0 1
15151: PPUSH
15152: CALL_OW 12
15156: ARRAY
15157: ST_TO_ADDR
// if GetSex ( Speaker ) = sex_male then
15158: LD_VAR 0 2
15162: PPUSH
15163: CALL_OW 258
15167: PUSH
15168: LD_INT 1
15170: EQUAL
15171: IFFALSE 15187
// Say ( Speaker , D4b-Sol1-8 ) else
15173: LD_VAR 0 2
15177: PPUSH
15178: LD_STRING D4b-Sol1-8
15180: PPUSH
15181: CALL_OW 88
15185: GO 15199
// Say ( Speaker , D4b-FSol1-8 ) ;
15187: LD_VAR 0 2
15191: PPUSH
15192: LD_STRING D4b-FSol1-8
15194: PPUSH
15195: CALL_OW 88
// Say ( John , D4b-JMM-9 ) ;
15199: LD_EXP 7
15203: PPUSH
15204: LD_STRING D4b-JMM-9
15206: PPUSH
15207: CALL_OW 88
// DialogueOff ;
15211: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
15215: LD_STRING M3
15217: PPUSH
15218: CALL_OW 337
// enable ( depot ) ;
15222: LD_EXP 38
15226: ENABLE_MARKED
// disable ( conversation ) ;
15227: LD_EXP 44
15231: DISABLE_MARKED
// ComMoveUnit ( Mikhail , Followed ) ;
15232: LD_EXP 65
15236: PPUSH
15237: LD_LOC 2
15241: PPUSH
15242: CALL_OW 112
// repeat ComMoveXY ( Followed , 50 , 13 ) ;
15246: LD_LOC 2
15250: PPUSH
15251: LD_INT 50
15253: PPUSH
15254: LD_INT 13
15256: PPUSH
15257: CALL_OW 111
// Wait ( 0 0$1 ) ;
15261: LD_INT 35
15263: PPUSH
15264: CALL_OW 67
// until GetDistUnits ( dep1 , Mikhail ) < 5 ;
15268: LD_INT 1
15270: PPUSH
15271: LD_EXP 65
15275: PPUSH
15276: CALL_OW 296
15280: PUSH
15281: LD_INT 5
15283: LESS
15284: IFFALSE 15246
// NormalAttack ( russians , Followed ) ;
15286: LD_EXP 5
15290: PPUSH
15291: LD_LOC 2
15295: PPUSH
15296: CALL_OW 472
// end else
15300: GO 15303
// enable ;
15302: ENABLE
// end ;
15303: PPOPN 2
15305: END
// every 0 0$1 trigger GetDistUnits ( Followed , John ) > 5 marked 12 do
15306: LD_LOC 2
15310: PPUSH
15311: LD_EXP 7
15315: PPUSH
15316: CALL_OW 296
15320: PUSH
15321: LD_INT 5
15323: GREATER
15324: IFFALSE 15353
15326: GO 15328
15328: DISABLE
// begin ComStop ( Followed ) ;
15329: LD_LOC 2
15333: PPUSH
15334: CALL_OW 141
// ComMoveUnit ( Followed , John ) ;
15338: LD_LOC 2
15342: PPUSH
15343: LD_EXP 7
15347: PPUSH
15348: CALL_OW 112
// enable ;
15352: ENABLE
// end ;
15353: END
// every 0 0$0.5 marked 8 do
15354: GO 15356
15356: DISABLE
// begin if IsOk ( Mikhail ) and GetDistUnits ( dep1 , Mikhail ) < 10 then
15357: LD_EXP 65
15361: PPUSH
15362: CALL_OW 302
15366: PUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_EXP 65
15374: PPUSH
15375: CALL_OW 296
15379: PUSH
15380: LD_INT 10
15382: LESS
15383: AND
15384: IFFALSE 15486
// begin ComMoveXY ( Mikhail , 52 , 13 ) ;
15386: LD_EXP 65
15390: PPUSH
15391: LD_INT 52
15393: PPUSH
15394: LD_INT 13
15396: PPUSH
15397: CALL_OW 111
// AddComHold ( Mikhail ) ;
15401: LD_EXP 65
15405: PPUSH
15406: CALL_OW 200
// WaitTask ( Mikhail , 0.5 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: LD_REAL  5.00000000000000E-0001
15418: PPUSH
15419: CALL 3368 0 2
// SetSide ( Mikhail , americans ) ;
15423: LD_EXP 65
15427: PPUSH
15428: LD_EXP 3
15432: PPUSH
15433: CALL_OW 235
// repeat ComEnterUnit ( Mikhail , dep1 ) ;
15437: LD_EXP 65
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 120
// Wait ( 1 ) ;
15449: LD_INT 1
15451: PPUSH
15452: CALL_OW 67
// until IsInUnit ( Mikhail ) = dep1 ;
15456: LD_EXP 65
15460: PPUSH
15461: CALL_OW 310
15465: PUSH
15466: LD_INT 1
15468: EQUAL
15469: IFFALSE 15437
// Mikhail_in_depot = true ;
15471: LD_ADDR_EXP 39
15475: PUSH
15476: LD_INT 1
15478: ST_TO_ADDR
// enable ( great_escape ) ;
15479: LD_EXP 40
15483: ENABLE_MARKED
// end else
15484: GO 15487
// enable ;
15486: ENABLE
// end ;
15487: END
// every 0 0$4 marked 9 do var AmVehicles , AmV1 , AmV2 , Un , Humans_In_Depot_Left , Buildings_In_Depot_Left , Vehicles_In_Depot_Left , Humans_In_Depot_Right , Buildings_In_Depot_Right , Vehicles_In_Depot_Right , Humans_In_Depot_Back , Buildings_In_Depot_Back , Vehicles_In_Depot_Back ;
15488: GO 15490
15490: DISABLE
15491: LD_INT 0
15493: PPUSH
15494: PPUSH
15495: PPUSH
15496: PPUSH
15497: PPUSH
15498: PPUSH
15499: PPUSH
15500: PPUSH
15501: PPUSH
15502: PPUSH
15503: PPUSH
15504: PPUSH
15505: PPUSH
// begin AmV1 = 0 ;
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_INT 0
15513: ST_TO_ADDR
// AmV2 = 0 ;
15514: LD_ADDR_VAR 0 3
15518: PUSH
15519: LD_INT 0
15521: ST_TO_ADDR
// AmVehicles = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_vehicle ] ] ) ;
15522: LD_ADDR_VAR 0 1
15526: PUSH
15527: LD_INT 22
15529: PUSH
15530: LD_EXP 3
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 21
15541: PUSH
15542: LD_INT 2
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 69
15557: ST_TO_ADDR
// if AmVehicles ^ [ ] > 0 then
15558: LD_VAR 0 1
15562: PUSH
15563: EMPTY
15564: ADD
15565: PUSH
15566: LD_INT 0
15568: GREATER
15569: IFFALSE 15585
// AmV1 = AmVehicles [ 1 ] ;
15571: LD_ADDR_VAR 0 2
15575: PUSH
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: ST_TO_ADDR
// if AmVehicles ^ [ ] > 1 then
15585: LD_VAR 0 1
15589: PUSH
15590: EMPTY
15591: ADD
15592: PUSH
15593: LD_INT 1
15595: GREATER
15596: IFFALSE 15612
// AmV2 = AmVehicles [ 2 ] ;
15598: LD_ADDR_VAR 0 3
15602: PUSH
15603: LD_VAR 0 1
15607: PUSH
15608: LD_INT 2
15610: ARRAY
15611: ST_TO_ADDR
// Humans_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15612: LD_ADDR_VAR 0 5
15616: PUSH
15617: LD_INT 20
15619: PPUSH
15620: LD_INT 22
15622: PUSH
15623: LD_EXP 3
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 1
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 50
15644: PUSH
15645: EMPTY
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 70
15657: ST_TO_ADDR
// Buildings_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
15658: LD_ADDR_VAR 0 6
15662: PUSH
15663: LD_INT 20
15665: PPUSH
15666: LD_INT 22
15668: PUSH
15669: LD_EXP 3
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 21
15680: PUSH
15681: LD_INT 3
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 50
15690: PUSH
15691: EMPTY
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 70
15703: ST_TO_ADDR
// Vehicles_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15704: LD_ADDR_VAR 0 7
15708: PUSH
15709: LD_INT 20
15711: PPUSH
15712: LD_INT 22
15714: PUSH
15715: LD_EXP 3
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 50
15736: PUSH
15737: EMPTY
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 70
15749: ST_TO_ADDR
// for Un in Buildings_In_Depot_Left do
15750: LD_ADDR_VAR 0 4
15754: PUSH
15755: LD_VAR 0 6
15759: PUSH
15760: FOR_IN
15761: IFFALSE 15786
// Humans_In_Depot_Left = Humans_In_Depot_Left ^ UnitsInside ( Un ) ;
15763: LD_ADDR_VAR 0 5
15767: PUSH
15768: LD_VAR 0 5
15772: PUSH
15773: LD_VAR 0 4
15777: PPUSH
15778: CALL_OW 313
15782: ADD
15783: ST_TO_ADDR
15784: GO 15760
15786: POP
15787: POP
// for Un in Vehicles_In_Depot_Left do
15788: LD_ADDR_VAR 0 4
15792: PUSH
15793: LD_VAR 0 7
15797: PUSH
15798: FOR_IN
15799: IFFALSE 15824
// Humans_In_Depot_Left = Humans_In_Depot_Left ^ UnitsInside ( Un ) ;
15801: LD_ADDR_VAR 0 5
15805: PUSH
15806: LD_VAR 0 5
15810: PUSH
15811: LD_VAR 0 4
15815: PPUSH
15816: CALL_OW 313
15820: ADD
15821: ST_TO_ADDR
15822: GO 15798
15824: POP
15825: POP
// Humans_In_Depot_Left = Humans_In_Depot_Left diff Mikhail ;
15826: LD_ADDR_VAR 0 5
15830: PUSH
15831: LD_VAR 0 5
15835: PUSH
15836: LD_EXP 65
15840: DIFF
15841: ST_TO_ADDR
// Humans_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15842: LD_ADDR_VAR 0 8
15846: PUSH
15847: LD_INT 21
15849: PPUSH
15850: LD_INT 22
15852: PUSH
15853: LD_EXP 3
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 21
15864: PUSH
15865: LD_INT 1
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 50
15874: PUSH
15875: EMPTY
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: PPUSH
15883: CALL_OW 70
15887: ST_TO_ADDR
// Buildings_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
15888: LD_ADDR_VAR 0 9
15892: PUSH
15893: LD_INT 21
15895: PPUSH
15896: LD_INT 22
15898: PUSH
15899: LD_EXP 3
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 50
15920: PUSH
15921: EMPTY
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: PPUSH
15929: CALL_OW 70
15933: ST_TO_ADDR
// Vehicles_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15934: LD_ADDR_VAR 0 10
15938: PUSH
15939: LD_INT 21
15941: PPUSH
15942: LD_INT 22
15944: PUSH
15945: LD_EXP 3
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 50
15966: PUSH
15967: EMPTY
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: PPUSH
15975: CALL_OW 70
15979: ST_TO_ADDR
// for Un in Buildings_In_Depot_Right do
15980: LD_ADDR_VAR 0 4
15984: PUSH
15985: LD_VAR 0 9
15989: PUSH
15990: FOR_IN
15991: IFFALSE 16016
// Humans_In_Depot_Right = Humans_In_Depot_Right ^ UnitsInside ( Un ) ;
15993: LD_ADDR_VAR 0 8
15997: PUSH
15998: LD_VAR 0 8
16002: PUSH
16003: LD_VAR 0 4
16007: PPUSH
16008: CALL_OW 313
16012: ADD
16013: ST_TO_ADDR
16014: GO 15990
16016: POP
16017: POP
// for Un in Vehicles_In_Depot_Right do
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_VAR 0 10
16027: PUSH
16028: FOR_IN
16029: IFFALSE 16054
// Humans_In_Depot_Right = Humans_In_Depot_Right ^ UnitsInside ( Un ) ;
16031: LD_ADDR_VAR 0 8
16035: PUSH
16036: LD_VAR 0 8
16040: PUSH
16041: LD_VAR 0 4
16045: PPUSH
16046: CALL_OW 313
16050: ADD
16051: ST_TO_ADDR
16052: GO 16028
16054: POP
16055: POP
// Humans_In_Depot_Right = Humans_In_Depot_Right diff Mikhail ;
16056: LD_ADDR_VAR 0 8
16060: PUSH
16061: LD_VAR 0 8
16065: PUSH
16066: LD_EXP 65
16070: DIFF
16071: ST_TO_ADDR
// Humans_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
16072: LD_ADDR_VAR 0 11
16076: PUSH
16077: LD_INT 19
16079: PPUSH
16080: LD_INT 22
16082: PUSH
16083: LD_EXP 3
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 50
16104: PUSH
16105: EMPTY
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: PPUSH
16113: CALL_OW 70
16117: ST_TO_ADDR
// Buildings_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
16118: LD_ADDR_VAR 0 12
16122: PUSH
16123: LD_INT 19
16125: PPUSH
16126: LD_INT 22
16128: PUSH
16129: LD_EXP 3
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 21
16140: PUSH
16141: LD_INT 3
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 50
16150: PUSH
16151: EMPTY
16152: LIST
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 70
16163: ST_TO_ADDR
// Vehicles_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
16164: LD_ADDR_VAR 0 13
16168: PUSH
16169: LD_INT 19
16171: PPUSH
16172: LD_INT 22
16174: PUSH
16175: LD_EXP 3
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 21
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 50
16196: PUSH
16197: EMPTY
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: PPUSH
16205: CALL_OW 70
16209: ST_TO_ADDR
// for Un in Buildings_In_Depot_Back do
16210: LD_ADDR_VAR 0 4
16214: PUSH
16215: LD_VAR 0 12
16219: PUSH
16220: FOR_IN
16221: IFFALSE 16246
// Humans_In_Depot_Back = Humans_In_Depot_Back ^ UnitsInside ( Un ) ;
16223: LD_ADDR_VAR 0 11
16227: PUSH
16228: LD_VAR 0 11
16232: PUSH
16233: LD_VAR 0 4
16237: PPUSH
16238: CALL_OW 313
16242: ADD
16243: ST_TO_ADDR
16244: GO 16220
16246: POP
16247: POP
// for Un in Vehicles_In_Depot_Back do
16248: LD_ADDR_VAR 0 4
16252: PUSH
16253: LD_VAR 0 13
16257: PUSH
16258: FOR_IN
16259: IFFALSE 16284
// Humans_In_Depot_Back = Humans_In_Depot_Back ^ UnitsInside ( Un ) ;
16261: LD_ADDR_VAR 0 11
16265: PUSH
16266: LD_VAR 0 11
16270: PUSH
16271: LD_VAR 0 4
16275: PPUSH
16276: CALL_OW 313
16280: ADD
16281: ST_TO_ADDR
16282: GO 16258
16284: POP
16285: POP
// Humans_In_Depot_Back = Humans_In_Depot_Back diff Mikhail ;
16286: LD_ADDR_VAR 0 11
16290: PUSH
16291: LD_VAR 0 11
16295: PUSH
16296: LD_EXP 65
16300: DIFF
16301: ST_TO_ADDR
// if ( Humans_In_Depot_Left = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16302: LD_VAR 0 5
16306: PUSH
16307: LD_INT 0
16309: EQUAL
16310: PUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 313
16318: PUSH
16319: LD_INT 2
16321: LESS
16322: AND
16323: IFFALSE 16467
// begin Mikhails_Escape_Disabled = false ;
16325: LD_ADDR_EXP 91
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
// target_of_escape = [ 4 , 6 ] ;
16333: LD_ADDR_LOC 10
16337: PUSH
16338: LD_INT 4
16340: PUSH
16341: LD_INT 6
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16348: LD_EXP 65
16352: PPUSH
16353: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16357: LD_EXP 65
16361: PPUSH
16362: LD_EXP 6
16366: PPUSH
16367: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16371: LD_EXP 65
16375: PPUSH
16376: LD_INT 52
16378: PPUSH
16379: LD_INT 13
16381: PPUSH
16382: LD_INT 0
16384: PPUSH
16385: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16389: LD_ADDR_EXP 50
16393: PUSH
16394: LD_EXP 65
16398: PPUSH
16399: CALL_OW 256
16403: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16404: LD_EXP 45
16408: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16409: LD_EXP 3
16413: PPUSH
16414: LD_EXP 6
16418: PPUSH
16419: LD_INT 2
16421: PPUSH
16422: LD_INT 1
16424: PPUSH
16425: CALL_OW 80
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16429: LD_EXP 65
16433: PPUSH
16434: LD_LOC 10
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: PPUSH
16443: LD_LOC 10
16447: PUSH
16448: LD_INT 2
16450: ARRAY
16451: PPUSH
16452: CALL_OW 171
// AddComHold ( Mikhail ) ;
16456: LD_EXP 65
16460: PPUSH
16461: CALL_OW 200
// end else
16465: GO 16843
// if ( Humans_In_Depot_Right = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16467: LD_VAR 0 8
16471: PUSH
16472: LD_INT 0
16474: EQUAL
16475: PUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 313
16483: PUSH
16484: LD_INT 2
16486: LESS
16487: AND
16488: IFFALSE 16662
// begin Mikhails_Escape_Disabled = false ;
16490: LD_ADDR_EXP 91
16494: PUSH
16495: LD_INT 0
16497: ST_TO_ADDR
// target_of_escape = [ 61 , 1 ] ;
16498: LD_ADDR_LOC 10
16502: PUSH
16503: LD_INT 61
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16513: LD_EXP 65
16517: PPUSH
16518: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16522: LD_EXP 65
16526: PPUSH
16527: LD_EXP 6
16531: PPUSH
16532: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16536: LD_EXP 65
16540: PPUSH
16541: LD_INT 52
16543: PPUSH
16544: LD_INT 13
16546: PPUSH
16547: LD_INT 0
16549: PPUSH
16550: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16554: LD_ADDR_EXP 50
16558: PUSH
16559: LD_EXP 65
16563: PPUSH
16564: CALL_OW 256
16568: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16569: LD_EXP 45
16573: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16574: LD_EXP 3
16578: PPUSH
16579: LD_EXP 6
16583: PPUSH
16584: LD_INT 2
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 80
// AddComMoveXY ( Mikhail , 57 , 11 ) ;
16594: LD_EXP 65
16598: PPUSH
16599: LD_INT 57
16601: PPUSH
16602: LD_INT 11
16604: PPUSH
16605: CALL_OW 171
// AddComMoveXY ( Mikhail , 63 , 9 ) ;
16609: LD_EXP 65
16613: PPUSH
16614: LD_INT 63
16616: PPUSH
16617: LD_INT 9
16619: PPUSH
16620: CALL_OW 171
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16624: LD_EXP 65
16628: PPUSH
16629: LD_LOC 10
16633: PUSH
16634: LD_INT 1
16636: ARRAY
16637: PPUSH
16638: LD_LOC 10
16642: PUSH
16643: LD_INT 2
16645: ARRAY
16646: PPUSH
16647: CALL_OW 171
// AddComHold ( Mikhail ) ;
16651: LD_EXP 65
16655: PPUSH
16656: CALL_OW 200
// end else
16660: GO 16843
// if ( Humans_In_Depot_Back = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16662: LD_VAR 0 11
16666: PUSH
16667: LD_INT 0
16669: EQUAL
16670: PUSH
16671: LD_INT 1
16673: PPUSH
16674: CALL_OW 313
16678: PUSH
16679: LD_INT 2
16681: LESS
16682: AND
16683: IFFALSE 16842
// begin Mikhails_Escape_Disabled = false ;
16685: LD_ADDR_EXP 91
16689: PUSH
16690: LD_INT 0
16692: ST_TO_ADDR
// target_of_escape = [ 47 , 1 ] ;
16693: LD_ADDR_LOC 10
16697: PUSH
16698: LD_INT 47
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16708: LD_EXP 65
16712: PPUSH
16713: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16717: LD_EXP 65
16721: PPUSH
16722: LD_EXP 6
16726: PPUSH
16727: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16731: LD_EXP 65
16735: PPUSH
16736: LD_INT 52
16738: PPUSH
16739: LD_INT 13
16741: PPUSH
16742: LD_INT 0
16744: PPUSH
16745: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16749: LD_ADDR_EXP 50
16753: PUSH
16754: LD_EXP 65
16758: PPUSH
16759: CALL_OW 256
16763: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16764: LD_EXP 45
16768: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16769: LD_EXP 3
16773: PPUSH
16774: LD_EXP 6
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: CALL_OW 80
// AddComMoveXY ( Mikhail , 49 , 7 ) ;
16789: LD_EXP 65
16793: PPUSH
16794: LD_INT 49
16796: PPUSH
16797: LD_INT 7
16799: PPUSH
16800: CALL_OW 171
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16804: LD_EXP 65
16808: PPUSH
16809: LD_LOC 10
16813: PUSH
16814: LD_INT 1
16816: ARRAY
16817: PPUSH
16818: LD_LOC 10
16822: PUSH
16823: LD_INT 2
16825: ARRAY
16826: PPUSH
16827: CALL_OW 171
// AddComHold ( Mikhail ) ;
16831: LD_EXP 65
16835: PPUSH
16836: CALL_OW 200
// end else
16840: GO 16843
// enable ;
16842: ENABLE
// end ;
16843: PPOPN 13
16845: END
// every 0 0$1 trigger IsOk ( Mikhail ) and not ( IsBusy ( Mikhail ) ) marked 13 do
16846: LD_EXP 65
16850: PPUSH
16851: CALL_OW 302
16855: PUSH
16856: LD_EXP 65
16860: PPUSH
16861: CALL_OW 315
16865: NOT
16866: AND
16867: IFFALSE 16899
16869: GO 16871
16871: DISABLE
// begin ComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16872: LD_EXP 65
16876: PPUSH
16877: LD_LOC 10
16881: PUSH
16882: LD_INT 1
16884: ARRAY
16885: PPUSH
16886: LD_LOC 10
16890: PUSH
16891: LD_INT 2
16893: ARRAY
16894: PPUSH
16895: CALL_OW 111
// end ;
16899: END
// every 0 0$2 trigger Mikhails_outcome = - 2 and Mikhails_lives = 1000 do var NearSol ;
16900: LD_LOC 3
16904: PUSH
16905: LD_INT 2
16907: NEG
16908: EQUAL
16909: PUSH
16910: LD_EXP 50
16914: PUSH
16915: LD_INT 1000
16917: EQUAL
16918: AND
16919: IFFALSE 17193
16921: GO 16923
16923: DISABLE
16924: LD_INT 0
16926: PPUSH
// begin if GetDistUnits ( John , dep1 ) < 6 then
16927: LD_EXP 7
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 296
16939: PUSH
16940: LD_INT 6
16942: LESS
16943: IFFALSE 17192
// begin NearSol = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , americans ] , [ f_sex , sex_male ] ] ) diff [ John , Cyrus ] , 52 , 13 ) ;
16945: LD_ADDR_VAR 0 1
16949: PUSH
16950: LD_INT 22
16952: PUSH
16953: LD_EXP 3
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 26
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PPUSH
16976: CALL_OW 69
16980: PUSH
16981: LD_EXP 7
16985: PUSH
16986: LD_EXP 8
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: DIFF
16995: PPUSH
16996: LD_INT 52
16998: PPUSH
16999: LD_INT 13
17001: PPUSH
17002: CALL_OW 73
17006: ST_TO_ADDR
// CenterOnUnits ( dep1 ) ;
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 85
// ComMoveXY ( John , 52 , 13 ) ;
17014: LD_EXP 7
17018: PPUSH
17019: LD_INT 52
17021: PPUSH
17022: LD_INT 13
17024: PPUSH
17025: CALL_OW 111
// DialogueOn ;
17029: CALL_OW 6
// Say ( John , D7-JMM-1 ) ;
17033: LD_EXP 7
17037: PPUSH
17038: LD_STRING D7-JMM-1
17040: PPUSH
17041: CALL_OW 88
// if NearSol then
17045: LD_VAR 0 1
17049: IFFALSE 17111
// begin Say ( NearSol , D7-Sol1-1 ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_STRING D7-Sol1-1
17058: PPUSH
17059: CALL_OW 88
// Say ( John , D7-JMM-2 ) ;
17063: LD_EXP 7
17067: PPUSH
17068: LD_STRING D7-JMM-2
17070: PPUSH
17071: CALL_OW 88
// Say ( NearSOl , D7-Sol1-2 ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: LD_STRING D7-Sol1-2
17082: PPUSH
17083: CALL_OW 88
// Say ( John , D7-JMM-3 ) ;
17087: LD_EXP 7
17091: PPUSH
17092: LD_STRING D7-JMM-3
17094: PPUSH
17095: CALL_OW 88
// Say ( NearSol , D7-Sol1-3 ) ;
17099: LD_VAR 0 1
17103: PPUSH
17104: LD_STRING D7-Sol1-3
17106: PPUSH
17107: CALL_OW 88
// end ; if IsOk ( Cyrus ) and IsOk ( Lisa ) then
17111: LD_EXP 8
17115: PPUSH
17116: CALL_OW 302
17120: PUSH
17121: LD_EXP 12
17125: PPUSH
17126: CALL_OW 302
17130: AND
17131: IFFALSE 17186
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
17133: LD_EXP 8
17137: PPUSH
17138: LD_STRING D7-Cyrus-3
17140: PPUSH
17141: CALL_OW 88
// if NearSol then
17145: LD_VAR 0 1
17149: IFFALSE 17186
// begin Say ( NearSol , D7-Sol1-4 ) ;
17151: LD_VAR 0 1
17155: PPUSH
17156: LD_STRING D7-Sol1-4
17158: PPUSH
17159: CALL_OW 88
// if IsOk ( Lisa ) then
17163: LD_EXP 12
17167: PPUSH
17168: CALL_OW 302
17172: IFFALSE 17186
// Say ( Lisa , D7-Lisa-4 ) ;
17174: LD_EXP 12
17178: PPUSH
17179: LD_STRING D7-Lisa-4
17181: PPUSH
17182: CALL_OW 88
// end ; end ; DialogueOff ;
17186: CALL_OW 7
// end else
17190: GO 17193
// enable ;
17192: ENABLE
// end ;
17193: PPOPN 1
17195: END
// every 0 0$1 trigger ( GetLives ( Mikhail ) < Mikhails_lives ) and rep marked 13 do
17196: LD_EXP 65
17200: PPUSH
17201: CALL_OW 256
17205: PUSH
17206: LD_EXP 50
17210: LESS
17211: PUSH
17212: LD_EXP 49
17216: AND
17217: IFFALSE 17362
17219: GO 17221
17221: DISABLE
// begin if IsOk ( Mikhail ) then
17222: LD_EXP 65
17226: PPUSH
17227: CALL_OW 302
17231: IFFALSE 17362
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ) ;
17233: LD_ADDR_LOC 11
17237: PUSH
17238: LD_EXP 65
17242: PPUSH
17243: LD_INT 22
17245: PUSH
17246: LD_EXP 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 21
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PPUSH
17269: CALL_OW 69
17273: PPUSH
17274: CALL 10204 0 2
17278: ST_TO_ADDR
// if GetSex ( attacker ) = sex_male then
17279: LD_LOC 11
17283: PPUSH
17284: CALL_OW 258
17288: PUSH
17289: LD_INT 1
17291: EQUAL
17292: IFFALSE 17321
// begin Say ( attacker , D7a-Sol1-1 ) ;
17294: LD_LOC 11
17298: PPUSH
17299: LD_STRING D7a-Sol1-1
17301: PPUSH
17302: CALL_OW 88
// enable ( firing1 ) ;
17306: LD_EXP 51
17310: ENABLE_MARKED
// rep = false ;
17311: LD_ADDR_EXP 49
17315: PUSH
17316: LD_INT 0
17318: ST_TO_ADDR
// end else
17319: GO 17346
// begin Say ( attacker , D7a-FSol1-1 ) ;
17321: LD_LOC 11
17325: PPUSH
17326: LD_STRING D7a-FSol1-1
17328: PPUSH
17329: CALL_OW 88
// enable ( firing2 ) ;
17333: LD_EXP 52
17337: ENABLE_MARKED
// rep = false ;
17338: LD_ADDR_EXP 49
17342: PUSH
17343: LD_INT 0
17345: ST_TO_ADDR
// end ; Mikhails_lives = GetLives ( Mikhail ) ;
17346: LD_ADDR_EXP 50
17350: PUSH
17351: LD_EXP 65
17355: PPUSH
17356: CALL_OW 256
17360: ST_TO_ADDR
// enable ;
17361: ENABLE
// end ; end ;
17362: END
// every 0 0$1 marked 14 do
17363: GO 17365
17365: DISABLE
// begin if IsDead ( Mikhail ) then
17366: LD_EXP 65
17370: PPUSH
17371: CALL_OW 301
17375: IFFALSE 17389
// Say ( attacker , D7a-Sol1-1a ) ;
17377: LD_LOC 11
17381: PPUSH
17382: LD_STRING D7a-Sol1-1a
17384: PPUSH
17385: CALL_OW 88
// end ;
17389: END
// every 0 0$1 marked 15 do
17390: GO 17392
17392: DISABLE
// begin if IsDead ( Mikhail ) then
17393: LD_EXP 65
17397: PPUSH
17398: CALL_OW 301
17402: IFFALSE 17416
// Say ( attacker , D7a-FSol1-1a ) ;
17404: LD_LOC 11
17408: PPUSH
17409: LD_STRING D7a-FSol1-1a
17411: PPUSH
17412: CALL_OW 88
// end ;
17416: END
// every 0 0$3 trigger ( GetLives ( dep1 ) < Dep1_lives or GetLives ( dep2 ) < Dep2_lives ) and not ( battle ) do
17417: LD_INT 1
17419: PPUSH
17420: CALL_OW 256
17424: PUSH
17425: LD_EXP 47
17429: LESS
17430: PUSH
17431: LD_INT 10
17433: PPUSH
17434: CALL_OW 256
17438: PUSH
17439: LD_EXP 48
17443: LESS
17444: OR
17445: PUSH
17446: LD_EXP 75
17450: NOT
17451: AND
17452: IFFALSE 17563
17454: GO 17456
17456: DISABLE
// begin if ( GetLives ( dep1 ) < Dep1_lives and GetDistUnits ( dep1 , John ) < 20 ) or ( GetLives ( dep2 ) < Dep2_lives and GetDistUnits ( dep2 , John ) < 20 ) then
17457: LD_INT 1
17459: PPUSH
17460: CALL_OW 256
17464: PUSH
17465: LD_EXP 47
17469: LESS
17470: PUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_EXP 7
17478: PPUSH
17479: CALL_OW 296
17483: PUSH
17484: LD_INT 20
17486: LESS
17487: AND
17488: PUSH
17489: LD_INT 10
17491: PPUSH
17492: CALL_OW 256
17496: PUSH
17497: LD_EXP 48
17501: LESS
17502: PUSH
17503: LD_INT 10
17505: PPUSH
17506: LD_EXP 7
17510: PPUSH
17511: CALL_OW 296
17515: PUSH
17516: LD_INT 20
17518: LESS
17519: AND
17520: OR
17521: IFFALSE 17537
// Say ( John , D8-JMM-1 ) else
17523: LD_EXP 7
17527: PPUSH
17528: LD_STRING D8-JMM-1
17530: PPUSH
17531: CALL_OW 88
17535: GO 17563
// begin Dep1_lives = GetLives ( dep1 ) ;
17537: LD_ADDR_EXP 47
17541: PUSH
17542: LD_INT 1
17544: PPUSH
17545: CALL_OW 256
17549: ST_TO_ADDR
// Dep2_lives = GetLives ( dep2 ) ;
17550: LD_ADDR_EXP 48
17554: PUSH
17555: LD_INT 10
17557: PPUSH
17558: CALL_OW 256
17562: ST_TO_ADDR
// end ; end ;
17563: END
// function place_tiger ( name , area ) ; var i , x_sour , y_sour ; begin
17564: LD_INT 0
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
// InitUc ;
17570: CALL_OW 18
// InitHc ;
17574: CALL_OW 19
// hc_sex = sex_male ;
17578: LD_ADDR_OWVAR 27
17582: PUSH
17583: LD_INT 1
17585: ST_TO_ADDR
// uc_side = 0 ;
17586: LD_ADDR_OWVAR 20
17590: PUSH
17591: LD_INT 0
17593: ST_TO_ADDR
// uc_nation = nation_nature ;
17594: LD_ADDR_OWVAR 21
17598: PUSH
17599: LD_INT 0
17601: ST_TO_ADDR
// hc_class = class_tiger ;
17602: LD_ADDR_OWVAR 28
17606: PUSH
17607: LD_INT 14
17609: ST_TO_ADDR
// hc_skills = [ Tiger_skill , 0 , 0 , 0 ] ;
17610: LD_ADDR_OWVAR 31
17614: PUSH
17615: LD_EXP 103
17619: PUSH
17620: LD_INT 0
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: ST_TO_ADDR
// hc_agressivity = 50 ;
17635: LD_ADDR_OWVAR 35
17639: PUSH
17640: LD_INT 50
17642: ST_TO_ADDR
// i = 5 ;
17643: LD_ADDR_VAR 0 4
17647: PUSH
17648: LD_INT 5
17650: ST_TO_ADDR
// repeat i = i - 1 ;
17651: LD_ADDR_VAR 0 4
17655: PUSH
17656: LD_VAR 0 4
17660: PUSH
17661: LD_INT 1
17663: MINUS
17664: ST_TO_ADDR
// sour = RandHexArea ( area , false ) ;
17665: LD_ADDR_LOC 9
17669: PUSH
17670: LD_VAR 0 2
17674: PPUSH
17675: LD_INT 0
17677: PPUSH
17678: CALL_OW 16
17682: ST_TO_ADDR
// until not ( SeeXY ( americans , sour [ 1 ] , sour [ 2 ] ) ) or i < 1 ;
17683: LD_EXP 3
17687: PPUSH
17688: LD_LOC 9
17692: PUSH
17693: LD_INT 1
17695: ARRAY
17696: PPUSH
17697: LD_LOC 9
17701: PUSH
17702: LD_INT 2
17704: ARRAY
17705: PPUSH
17706: CALL_OW 293
17710: NOT
17711: PUSH
17712: LD_VAR 0 4
17716: PUSH
17717: LD_INT 1
17719: LESS
17720: OR
17721: IFFALSE 17651
// name = CreateHuman ;
17723: LD_ADDR_VAR 0 1
17727: PUSH
17728: CALL_OW 44
17732: ST_TO_ADDR
// if not ( SeeXY ( americans , sour [ 1 ] , sour [ 2 ] ) ) then
17733: LD_EXP 3
17737: PPUSH
17738: LD_LOC 9
17742: PUSH
17743: LD_INT 1
17745: ARRAY
17746: PPUSH
17747: LD_LOC 9
17751: PUSH
17752: LD_INT 2
17754: ARRAY
17755: PPUSH
17756: CALL_OW 293
17760: NOT
17761: IFFALSE 17793
// PlaceUnitXY ( name , sour [ 1 ] , sour [ 2 ] , false ) ;
17763: LD_VAR 0 1
17767: PPUSH
17768: LD_LOC 9
17772: PUSH
17773: LD_INT 1
17775: ARRAY
17776: PPUSH
17777: LD_LOC 9
17781: PUSH
17782: LD_INT 2
17784: ARRAY
17785: PPUSH
17786: LD_INT 0
17788: PPUSH
17789: CALL_OW 48
// if not ( IsOk ( name ) ) then
17793: LD_VAR 0 1
17797: PPUSH
17798: CALL_OW 302
17802: NOT
17803: IFFALSE 17824
// begin DestroyUnit ( name ) ;
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 65
// result = 0 ;
17814: LD_ADDR_VAR 0 3
17818: PUSH
17819: LD_INT 0
17821: ST_TO_ADDR
// end else
17822: GO 17832
// result = 1 ;
17824: LD_ADDR_VAR 0 3
17828: PUSH
17829: LD_INT 1
17831: ST_TO_ADDR
// end ;
17832: LD_VAR 0 3
17836: RET
// every 2 2$0 marked 18 do var i ;
17837: GO 17839
17839: DISABLE
17840: LD_INT 0
17842: PPUSH
// begin for i = 1 to Difficulty do
17843: LD_ADDR_VAR 0 1
17847: PUSH
17848: DOUBLE
17849: LD_INT 1
17851: DEC
17852: ST_TO_ADDR
17853: LD_OWVAR 67
17857: PUSH
17858: FOR_TO
17859: IFFALSE 17963
// begin hc_sex = sex_male ;
17861: LD_ADDR_OWVAR 27
17865: PUSH
17866: LD_INT 1
17868: ST_TO_ADDR
// uc_side = 0 ;
17869: LD_ADDR_OWVAR 20
17873: PUSH
17874: LD_INT 0
17876: ST_TO_ADDR
// uc_nation = nation_nature ;
17877: LD_ADDR_OWVAR 21
17881: PUSH
17882: LD_INT 0
17884: ST_TO_ADDR
// hc_class = class_tiger ;
17885: LD_ADDR_OWVAR 28
17889: PUSH
17890: LD_INT 14
17892: ST_TO_ADDR
// hc_skills = [ Tiger_skill , 0 , 0 , 0 ] ;
17893: LD_ADDR_OWVAR 31
17897: PUSH
17898: LD_EXP 103
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: ST_TO_ADDR
// hc_agressivity = 5 + 15 * Difficulty ;
17918: LD_ADDR_OWVAR 35
17922: PUSH
17923: LD_INT 5
17925: PUSH
17926: LD_INT 15
17928: PUSH
17929: LD_OWVAR 67
17933: MUL
17934: PLUS
17935: ST_TO_ADDR
// tiger = CreateHuman ;
17936: LD_ADDR_LOC 8
17940: PUSH
17941: CALL_OW 44
17945: ST_TO_ADDR
// PlaceUnitArea ( tiger , wood , false ) ;
17946: LD_LOC 8
17950: PPUSH
17951: LD_INT 3
17953: PPUSH
17954: LD_INT 0
17956: PPUSH
17957: CALL_OW 49
// end ;
17961: GO 17858
17963: POP
17964: POP
// end ;
17965: PPOPN 1
17967: END
// every 6 6$0 trigger Rand ( 1 , number_of_crates ) = 1 do
17968: LD_INT 1
17970: PPUSH
17971: LD_EXP 76
17975: PPUSH
17976: CALL_OW 12
17980: PUSH
17981: LD_INT 1
17983: EQUAL
17984: IFFALSE 18000
17986: GO 17988
17988: DISABLE
// begin CreateCratesAnywhere ( 3 , true ) ;
17989: LD_INT 3
17991: PPUSH
17992: LD_INT 1
17994: PPUSH
17995: CALL_OW 57
// enable ;
17999: ENABLE
// end ;
18000: END
// every 0 0$0.1 marked 19 do
18001: GO 18003
18003: DISABLE
// begin ComMoveXY ( tigers , 98 , 2 ) ;
18004: LD_EXP 70
18008: PPUSH
18009: LD_INT 98
18011: PPUSH
18012: LD_INT 2
18014: PPUSH
18015: CALL_OW 111
// for tiger in tigers do
18019: LD_ADDR_LOC 8
18023: PUSH
18024: LD_EXP 70
18028: PUSH
18029: FOR_IN
18030: IFFALSE 18055
// begin WaitTask ( tiger , 1 ) ;
18032: LD_LOC 8
18036: PPUSH
18037: LD_INT 1
18039: PPUSH
18040: CALL 3368 0 2
// RemoveUnit ( tiger ) ;
18044: LD_LOC 8
18048: PPUSH
18049: CALL_OW 64
// end ;
18053: GO 18029
18055: POP
18056: POP
// end ;
18057: END
// every 0 0$3 trigger tick > Time_of_attack do var Un ;
18058: LD_OWVAR 1
18062: PUSH
18063: LD_EXP 26
18067: GREATER
18068: IFFALSE 18468
18070: GO 18072
18072: DISABLE
18073: LD_INT 0
18075: PPUSH
// begin if Attack_canceled then
18076: LD_EXP 93
18080: IFFALSE 18156
// begin DialogueOn ;
18082: CALL_OW 6
// SayRadio ( Powell , D6-Pow-1 ) ;
18086: LD_EXP 16
18090: PPUSH
18091: LD_STRING D6-Pow-1
18093: PPUSH
18094: CALL_OW 94
// Say ( John , D6-JMM-1 ) ;
18098: LD_EXP 7
18102: PPUSH
18103: LD_STRING D6-JMM-1
18105: PPUSH
18106: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
18110: LD_EXP 16
18114: PPUSH
18115: LD_STRING D6-Pow-2
18117: PPUSH
18118: CALL_OW 94
// Say ( John , D6-JMM-2 ) ;
18122: LD_EXP 7
18126: PPUSH
18127: LD_STRING D6-JMM-2
18129: PPUSH
18130: CALL_OW 88
// DialogueOff ;
18134: CALL_OW 7
// battle = false ;
18138: LD_ADDR_EXP 75
18142: PUSH
18143: LD_INT 0
18145: ST_TO_ADDR
// end_of_m = 1 ;
18146: LD_ADDR_LOC 5
18150: PUSH
18151: LD_INT 1
18153: ST_TO_ADDR
// end else
18154: GO 18468
// begin disable ( tigers_allowed ) ;
18156: LD_EXP 81
18160: DISABLE_MARKED
// enable ( remove_tigers ) ;
18161: LD_EXP 82
18165: ENABLE_MARKED
// rsol = [ [ rsol1 , rsol2 ] , [ rsol1 , rsol2 , rsol3 , rsol4 ] , [ rsol1 , rsol2 , rsol3 , rsol4 , rsol5 , rsol6 ] ] [ Difficulty ] ;
18166: LD_ADDR_LOC 6
18170: PUSH
18171: LD_EXP 55
18175: PUSH
18176: LD_EXP 56
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_EXP 55
18189: PUSH
18190: LD_EXP 56
18194: PUSH
18195: LD_EXP 57
18199: PUSH
18200: LD_EXP 58
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: LD_EXP 55
18215: PUSH
18216: LD_EXP 56
18220: PUSH
18221: LD_EXP 57
18225: PUSH
18226: LD_EXP 58
18230: PUSH
18231: LD_EXP 59
18235: PUSH
18236: LD_EXP 60
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: PUSH
18254: LD_OWVAR 67
18258: ARRAY
18259: ST_TO_ADDR
// rv = [ [ rv1 ] , [ rv1 ] , [ rv1 , rv2 ] ] [ Difficulty ] ;
18260: LD_ADDR_LOC 7
18264: PUSH
18265: LD_EXP 63
18269: PUSH
18270: EMPTY
18271: LIST
18272: PUSH
18273: LD_EXP 63
18277: PUSH
18278: EMPTY
18279: LIST
18280: PUSH
18281: LD_EXP 63
18285: PUSH
18286: LD_EXP 64
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_OWVAR 67
18304: ARRAY
18305: ST_TO_ADDR
// while not ( PlaceUnitArea ( rv1 , prijezd , false ) ) do
18306: LD_EXP 63
18310: PPUSH
18311: LD_INT 10
18313: PPUSH
18314: LD_INT 0
18316: PPUSH
18317: CALL_OW 49
18321: NOT
18322: IFFALSE 18333
// wait ( 0 0$0.5 ) ;
18324: LD_INT 18
18326: PPUSH
18327: CALL_OW 67
18331: GO 18306
// if Difficulty > 2 then
18333: LD_OWVAR 67
18337: PUSH
18338: LD_INT 2
18340: GREATER
18341: IFFALSE 18370
// while not ( PlaceUnitArea ( rv2 , prijezd , false ) ) do
18343: LD_EXP 64
18347: PPUSH
18348: LD_INT 10
18350: PPUSH
18351: LD_INT 0
18353: PPUSH
18354: CALL_OW 49
18358: NOT
18359: IFFALSE 18370
// wait ( 0 0$0.5 ) ;
18361: LD_INT 18
18363: PPUSH
18364: CALL_OW 67
18368: GO 18343
// AddComAgressiveMove ( rv , 16 , 7 ) ;
18370: LD_LOC 7
18374: PPUSH
18375: LD_INT 16
18377: PPUSH
18378: LD_INT 7
18380: PPUSH
18381: CALL_OW 174
// for Un in rsol do
18385: LD_ADDR_VAR 0 1
18389: PUSH
18390: LD_LOC 6
18394: PUSH
18395: FOR_IN
18396: IFFALSE 18415
// PlaceUnitArea ( Un , prijezd , false ) ;
18398: LD_VAR 0 1
18402: PPUSH
18403: LD_INT 10
18405: PPUSH
18406: LD_INT 0
18408: PPUSH
18409: CALL_OW 49
18413: GO 18395
18415: POP
18416: POP
// AddComAgressiveMove ( rsol , 16 , 7 ) ;
18417: LD_LOC 6
18421: PPUSH
18422: LD_INT 16
18424: PPUSH
18425: LD_INT 7
18427: PPUSH
18428: CALL_OW 174
// Say ( rsol1 , D9-Rus3-1 ) ;
18432: LD_EXP 55
18436: PPUSH
18437: LD_STRING D9-Rus3-1
18439: PPUSH
18440: CALL_OW 88
// Say ( rsol2 , D9-Russ-1 ) ;
18444: LD_EXP 56
18448: PPUSH
18449: LD_STRING D9-Russ-1
18451: PPUSH
18452: CALL_OW 88
// Hint ( Boj ) ;
18456: LD_STRING Boj
18458: PPUSH
18459: CALL_OW 339
// enable ( russians_attack ) ;
18463: LD_EXP 53
18467: ENABLE_MARKED
// end ; end ;
18468: PPOPN 1
18470: END
// every 0 0$1 marked 16 do var breastworks , target , b , min ;
18471: GO 18473
18473: DISABLE
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
// begin battle = true ;
18480: LD_ADDR_EXP 75
18484: PUSH
18485: LD_INT 1
18487: ST_TO_ADDR
// target = 1 ;
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_INT 1
18495: ST_TO_ADDR
// min = 1000 ;
18496: LD_ADDR_VAR 0 4
18500: PUSH
18501: LD_INT 1000
18503: ST_TO_ADDR
// wait ( 0 0$5 * ( 4 - Difficulty ) ) ;
18504: LD_INT 175
18506: PUSH
18507: LD_INT 4
18509: PUSH
18510: LD_OWVAR 67
18514: MINUS
18515: MUL
18516: PPUSH
18517: CALL_OW 67
// breastworks = FilterUnitsInArea ( North , [ [ f_btype , b_breastwork ] , [ f_side , americans ] ] ) ;
18521: LD_ADDR_VAR 0 1
18525: PUSH
18526: LD_INT 2
18528: PPUSH
18529: LD_INT 30
18531: PUSH
18532: LD_INT 31
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 22
18541: PUSH
18542: LD_EXP 3
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 70
18559: ST_TO_ADDR
// if breastworks = 0 then
18560: LD_VAR 0 1
18564: PUSH
18565: LD_INT 0
18567: EQUAL
18568: IFFALSE 18593
// ComAgressiveMove ( rsol ^ rv , 56 , 11 ) else
18570: LD_LOC 6
18574: PUSH
18575: LD_LOC 7
18579: ADD
18580: PPUSH
18581: LD_INT 56
18583: PPUSH
18584: LD_INT 11
18586: PPUSH
18587: CALL_OW 114
18591: GO 19175
// begin for b in breastworks do
18593: LD_ADDR_VAR 0 3
18597: PUSH
18598: LD_VAR 0 1
18602: PUSH
18603: FOR_IN
18604: IFFALSE 18652
// if min > GetDistUnitXY ( b , 36 , 0 ) then
18606: LD_VAR 0 4
18610: PUSH
18611: LD_VAR 0 3
18615: PPUSH
18616: LD_INT 36
18618: PPUSH
18619: LD_INT 0
18621: PPUSH
18622: CALL_OW 297
18626: GREATER
18627: IFFALSE 18650
// min = GetDistUnitXY ( b , 36 , 0 ) ;
18629: LD_ADDR_VAR 0 4
18633: PUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 36
18641: PPUSH
18642: LD_INT 0
18644: PPUSH
18645: CALL_OW 297
18649: ST_TO_ADDR
18650: GO 18603
18652: POP
18653: POP
// for b in breastworks do
18654: LD_ADDR_VAR 0 3
18658: PUSH
18659: LD_VAR 0 1
18663: PUSH
18664: FOR_IN
18665: IFFALSE 18721
// if min > GetDistUnitXY ( b , 47 , 18 ) then
18667: LD_VAR 0 4
18671: PUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: LD_INT 47
18679: PPUSH
18680: LD_INT 18
18682: PPUSH
18683: CALL_OW 297
18687: GREATER
18688: IFFALSE 18719
// begin min = GetDistUnitXY ( b , 47 , 18 ) ;
18690: LD_ADDR_VAR 0 4
18694: PUSH
18695: LD_VAR 0 3
18699: PPUSH
18700: LD_INT 47
18702: PPUSH
18703: LD_INT 18
18705: PPUSH
18706: CALL_OW 297
18710: ST_TO_ADDR
// target = 2 ;
18711: LD_ADDR_VAR 0 2
18715: PUSH
18716: LD_INT 2
18718: ST_TO_ADDR
// end ;
18719: GO 18664
18721: POP
18722: POP
// for b in breastworks do
18723: LD_ADDR_VAR 0 3
18727: PUSH
18728: LD_VAR 0 1
18732: PUSH
18733: FOR_IN
18734: IFFALSE 18790
// if min > GetDistUnitXY ( b , 62 , 23 ) then
18736: LD_VAR 0 4
18740: PUSH
18741: LD_VAR 0 3
18745: PPUSH
18746: LD_INT 62
18748: PPUSH
18749: LD_INT 23
18751: PPUSH
18752: CALL_OW 297
18756: GREATER
18757: IFFALSE 18788
// begin min = GetDistUnitXY ( b , 62 , 23 ) ;
18759: LD_ADDR_VAR 0 4
18763: PUSH
18764: LD_VAR 0 3
18768: PPUSH
18769: LD_INT 62
18771: PPUSH
18772: LD_INT 23
18774: PPUSH
18775: CALL_OW 297
18779: ST_TO_ADDR
// target = 3 ;
18780: LD_ADDR_VAR 0 2
18784: PUSH
18785: LD_INT 3
18787: ST_TO_ADDR
// end ;
18788: GO 18733
18790: POP
18791: POP
// case target of 1 :
18792: LD_VAR 0 2
18796: PUSH
18797: LD_INT 1
18799: DOUBLE
18800: EQUAL
18801: IFTRUE 18805
18803: GO 18903
18805: POP
// begin AddComAgressiveMove ( rsol ^ rv , 16 , 2 ) ;
18806: LD_LOC 6
18810: PUSH
18811: LD_LOC 7
18815: ADD
18816: PPUSH
18817: LD_INT 16
18819: PPUSH
18820: LD_INT 2
18822: PPUSH
18823: CALL_OW 174
// wait ( 0 0$3 ) ;
18827: LD_INT 105
18829: PPUSH
18830: CALL_OW 67
// AddComAgressiveMove ( rsol , 36 , 0 ) ;
18834: LD_LOC 6
18838: PPUSH
18839: LD_INT 36
18841: PPUSH
18842: LD_INT 0
18844: PPUSH
18845: CALL_OW 174
// AddComAgressiveMove ( rsol , 51 , 4 ) ;
18849: LD_LOC 6
18853: PPUSH
18854: LD_INT 51
18856: PPUSH
18857: LD_INT 4
18859: PPUSH
18860: CALL_OW 174
// wait ( 0 0$3 ) ;
18864: LD_INT 105
18866: PPUSH
18867: CALL_OW 67
// AddComAgressiveMove ( rv , 36 , 0 ) ;
18871: LD_LOC 7
18875: PPUSH
18876: LD_INT 36
18878: PPUSH
18879: LD_INT 0
18881: PPUSH
18882: CALL_OW 174
// AddComAgressiveMove ( rv , 51 , 4 ) ;
18886: LD_LOC 7
18890: PPUSH
18891: LD_INT 51
18893: PPUSH
18894: LD_INT 4
18896: PPUSH
18897: CALL_OW 174
// end ; 2 :
18901: GO 19175
18903: LD_INT 2
18905: DOUBLE
18906: EQUAL
18907: IFTRUE 18911
18909: GO 19055
18911: POP
// begin if Rand ( 1 , 2 ) = 1 then
18912: LD_INT 1
18914: PPUSH
18915: LD_INT 2
18917: PPUSH
18918: CALL_OW 12
18922: PUSH
18923: LD_INT 1
18925: EQUAL
18926: IFFALSE 18995
// begin AddComAgressiveMove ( rsol ^ rv , 35 , 25 ) ;
18928: LD_LOC 6
18932: PUSH
18933: LD_LOC 7
18937: ADD
18938: PPUSH
18939: LD_INT 35
18941: PPUSH
18942: LD_INT 25
18944: PPUSH
18945: CALL_OW 174
// wait ( 0 0$5 ) ;
18949: LD_INT 175
18951: PPUSH
18952: CALL_OW 67
// AddComAgressiveMove ( rsol , 47 , 18 ) ;
18956: LD_LOC 6
18960: PPUSH
18961: LD_INT 47
18963: PPUSH
18964: LD_INT 18
18966: PPUSH
18967: CALL_OW 174
// wait ( 0 0$2 ) ;
18971: LD_INT 70
18973: PPUSH
18974: CALL_OW 67
// AddComAgressiveMove ( rv , 47 , 18 ) ;
18978: LD_LOC 7
18982: PPUSH
18983: LD_INT 47
18985: PPUSH
18986: LD_INT 18
18988: PPUSH
18989: CALL_OW 174
// end else
18993: GO 19032
// begin AddComAgressiveMove ( rsol , 47 , 18 ) ;
18995: LD_LOC 6
18999: PPUSH
19000: LD_INT 47
19002: PPUSH
19003: LD_INT 18
19005: PPUSH
19006: CALL_OW 174
// wait ( 0 0$3 ) ;
19010: LD_INT 105
19012: PPUSH
19013: CALL_OW 67
// AddComAgressiveMove ( rv , 47 , 18 ) ;
19017: LD_LOC 7
19021: PPUSH
19022: LD_INT 47
19024: PPUSH
19025: LD_INT 18
19027: PPUSH
19028: CALL_OW 174
// end ; AddComAgressiveMove ( rsol ^ rv , 51 , 13 ) ;
19032: LD_LOC 6
19036: PUSH
19037: LD_LOC 7
19041: ADD
19042: PPUSH
19043: LD_INT 51
19045: PPUSH
19046: LD_INT 13
19048: PPUSH
19049: CALL_OW 174
// end ; 3 :
19053: GO 19175
19055: LD_INT 3
19057: DOUBLE
19058: EQUAL
19059: IFTRUE 19063
19061: GO 19174
19063: POP
// begin AddComAgressiveMove ( rsol ^ rv , 35 , 25 ) ;
19064: LD_LOC 6
19068: PUSH
19069: LD_LOC 7
19073: ADD
19074: PPUSH
19075: LD_INT 35
19077: PPUSH
19078: LD_INT 25
19080: PPUSH
19081: CALL_OW 174
// wait ( 0 0$5 ) ;
19085: LD_INT 175
19087: PPUSH
19088: CALL_OW 67
// AddComAgressiveMove ( rsol ^ rv , 56 , 37 ) ;
19092: LD_LOC 6
19096: PUSH
19097: LD_LOC 7
19101: ADD
19102: PPUSH
19103: LD_INT 56
19105: PPUSH
19106: LD_INT 37
19108: PPUSH
19109: CALL_OW 174
// wait ( 0 0$5 ) ;
19113: LD_INT 175
19115: PPUSH
19116: CALL_OW 67
// AddComAgressiveMove ( rsol , 62 , 23 ) ;
19120: LD_LOC 6
19124: PPUSH
19125: LD_INT 62
19127: PPUSH
19128: LD_INT 23
19130: PPUSH
19131: CALL_OW 174
// wait ( 0 0$2 ) ;
19135: LD_INT 70
19137: PPUSH
19138: CALL_OW 67
// AddComAgressiveMove ( rv , 62 , 23 ) ;
19142: LD_LOC 7
19146: PPUSH
19147: LD_INT 62
19149: PPUSH
19150: LD_INT 23
19152: PPUSH
19153: CALL_OW 174
// AddComAgressiveMove ( rv , 55 , 10 ) ;
19157: LD_LOC 7
19161: PPUSH
19162: LD_INT 55
19164: PPUSH
19165: LD_INT 10
19167: PPUSH
19168: CALL_OW 174
// end ; end ;
19172: GO 19175
19174: POP
// end ; enable ( russians_attack1 ) ;
19175: LD_EXP 54
19179: ENABLE_MARKED
// end ;
19180: PPOPN 4
19182: END
// every 0 0$3 marked 17 do
19183: GO 19185
19185: DISABLE
// begin if IsOk ( rdrv1 ) then
19186: LD_EXP 61
19190: PPUSH
19191: CALL_OW 302
19195: IFFALSE 19317
// begin if not ( IsBusy ( rv1 ) ) and WantsToAttack ( rv1 ) = 0 and Attacks ( rv1 ) = 0 and IsOk ( dep1 ) then
19197: LD_EXP 63
19201: PPUSH
19202: CALL_OW 315
19206: NOT
19207: PUSH
19208: LD_EXP 63
19212: PPUSH
19213: CALL_OW 319
19217: PUSH
19218: LD_INT 0
19220: EQUAL
19221: AND
19222: PUSH
19223: LD_EXP 63
19227: PPUSH
19228: CALL_OW 320
19232: PUSH
19233: LD_INT 0
19235: EQUAL
19236: AND
19237: PUSH
19238: LD_INT 1
19240: PPUSH
19241: CALL_OW 302
19245: AND
19246: IFFALSE 19317
// if GetDistUnits ( rv1 , dep1 ) < 7 and UnitsInside ( dep1 ) = 0 then
19248: LD_EXP 63
19252: PPUSH
19253: LD_INT 1
19255: PPUSH
19256: CALL_OW 296
19260: PUSH
19261: LD_INT 7
19263: LESS
19264: PUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 313
19272: PUSH
19273: LD_INT 0
19275: EQUAL
19276: AND
19277: IFFALSE 19302
// begin AddComExitVehicle ( rv1 ) ;
19279: LD_EXP 63
19283: PPUSH
19284: CALL_OW 181
// AddComEnterUnit ( rdrv1 , dep1 ) ;
19288: LD_EXP 61
19292: PPUSH
19293: LD_INT 1
19295: PPUSH
19296: CALL_OW 180
// end else
19300: GO 19317
// ComAgressiveMove ( rv1 , 51 , 14 ) ;
19302: LD_EXP 63
19306: PPUSH
19307: LD_INT 51
19309: PPUSH
19310: LD_INT 14
19312: PPUSH
19313: CALL_OW 114
// end ; enable ;
19317: ENABLE
// end ;
19318: END
// every 0 0$5 trigger ( UnitFilter ( rsol ^ [ rdrv1 , rdrv2 ] , [ f_alive ] ) ) = 0 marked 17 do
19319: LD_LOC 6
19323: PUSH
19324: LD_EXP 61
19328: PUSH
19329: LD_EXP 62
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: ADD
19338: PPUSH
19339: LD_INT 51
19341: PUSH
19342: EMPTY
19343: LIST
19344: PPUSH
19345: CALL_OW 72
19349: PUSH
19350: LD_INT 0
19352: EQUAL
19353: IFFALSE 19438
19355: GO 19357
19357: DISABLE
// begin disable ;
19358: DISABLE
// Wait ( 0 0$5 ) ;
19359: LD_INT 175
19361: PPUSH
19362: CALL_OW 67
// DialogueOn ;
19366: CALL_OW 6
// SayRadio ( Powell , D6-Pow-1 ) ;
19370: LD_EXP 16
19374: PPUSH
19375: LD_STRING D6-Pow-1
19377: PPUSH
19378: CALL_OW 94
// Say ( John , D6-JMM-1 ) ;
19382: LD_EXP 7
19386: PPUSH
19387: LD_STRING D6-JMM-1
19389: PPUSH
19390: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
19394: LD_EXP 16
19398: PPUSH
19399: LD_STRING D6-Pow-2
19401: PPUSH
19402: CALL_OW 94
// Say ( John , D6-JMM-2 ) ;
19406: LD_EXP 7
19410: PPUSH
19411: LD_STRING D6-JMM-2
19413: PPUSH
19414: CALL_OW 88
// DialogueOff ;
19418: CALL_OW 7
// battle = false ;
19422: LD_ADDR_EXP 75
19426: PUSH
19427: LD_INT 0
19429: ST_TO_ADDR
// end_of_m = 1 ;
19430: LD_ADDR_LOC 5
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// end ;
19438: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_or , [ f_side , americans ] , [ f_side , americans1 ] ] , [ f_alive ] , f_not , [ f_ok ] ] ) do
19439: LD_INT 2
19441: PUSH
19442: LD_INT 22
19444: PUSH
19445: LD_EXP 3
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 22
19456: PUSH
19457: LD_EXP 4
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 51
19473: PUSH
19474: EMPTY
19475: LIST
19476: PUSH
19477: LD_INT 3
19479: PUSH
19480: LD_INT 50
19482: PUSH
19483: EMPTY
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: PPUSH
19492: CALL_OW 69
19496: IFFALSE 19508
19498: GO 19500
19500: DISABLE
// begin Hint ( RedArentDead ) ;
19501: LD_STRING RedArentDead
19503: PPUSH
19504: CALL_OW 339
// end ;
19508: END
// every 0 0$2 trigger IsInUnit ( John ) do
19509: LD_EXP 7
19513: PPUSH
19514: CALL_OW 310
19518: IFFALSE 19554
19520: GO 19522
19522: DISABLE
// begin if GetType ( IsInUnit ( John ) ) = unit_vehicle then
19523: LD_EXP 7
19527: PPUSH
19528: CALL_OW 310
19532: PPUSH
19533: CALL_OW 247
19537: PUSH
19538: LD_INT 2
19540: EQUAL
19541: IFFALSE 19553
// JMMInVehicle := true else
19543: LD_ADDR_EXP 118
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
19551: GO 19554
// enable ;
19553: ENABLE
// end ;
19554: END
// every 0 0$2 + 0 0$1 trigger IsInUnit ( Cyrus ) do
19555: LD_EXP 8
19559: PPUSH
19560: CALL_OW 310
19564: IFFALSE 19600
19566: GO 19568
19568: DISABLE
// begin if GetType ( IsInUnit ( Cyrus ) ) = unit_vehicle then
19569: LD_EXP 8
19573: PPUSH
19574: CALL_OW 310
19578: PPUSH
19579: CALL_OW 247
19583: PUSH
19584: LD_INT 2
19586: EQUAL
19587: IFFALSE 19599
// CyrusInVehicle := true else
19589: LD_ADDR_EXP 119
19593: PUSH
19594: LD_INT 1
19596: ST_TO_ADDR
19597: GO 19600
// enable ;
19599: ENABLE
// end ;
19600: END
// every 0 0$1 trigger IsAt ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) marked 13 do
19601: LD_EXP 65
19605: PPUSH
19606: LD_LOC 10
19610: PUSH
19611: LD_INT 1
19613: ARRAY
19614: PPUSH
19615: LD_LOC 10
19619: PUSH
19620: LD_INT 2
19622: ARRAY
19623: PPUSH
19624: CALL_OW 307
19628: IFFALSE 19666
19630: GO 19632
19632: DISABLE
// begin RemoveUnit ( Mikhail ) ;
19633: LD_EXP 65
19637: PPUSH
19638: CALL_OW 64
// Mikhails_outcome = - 2 ;
19642: LD_ADDR_LOC 3
19646: PUSH
19647: LD_INT 2
19649: NEG
19650: ST_TO_ADDR
// Mikhail_status = 4 ;
19651: LD_ADDR_LOC 4
19655: PUSH
19656: LD_INT 4
19658: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
19659: LD_STRING M3a
19661: PPUSH
19662: CALL_OW 337
// end ;
19666: END
// every 0 0$3 trigger IsDead ( Mikhail ) marked 13 do
19667: LD_EXP 65
19671: PPUSH
19672: CALL_OW 301
19676: IFFALSE 19704
19678: GO 19680
19680: DISABLE
// begin Mikhails_outcome = 2 ;
19681: LD_ADDR_LOC 3
19685: PUSH
19686: LD_INT 2
19688: ST_TO_ADDR
// Mikhail_status = 3 ;
19689: LD_ADDR_LOC 4
19693: PUSH
19694: LD_INT 3
19696: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
19697: LD_STRING M3a
19699: PPUSH
19700: CALL_OW 337
// end ;
19704: END
// every 0 0$10 marked 20 do var my_depots , my_eng ;
19705: GO 19707
19707: DISABLE
19708: LD_INT 0
19710: PPUSH
19711: PPUSH
// begin my_depots = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_side , americans ] ] ) ;
19712: LD_ADDR_VAR 0 1
19716: PUSH
19717: LD_INT 21
19719: PUSH
19720: LD_INT 3
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 30
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 22
19739: PUSH
19740: LD_EXP 3
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL_OW 69
19758: ST_TO_ADDR
// my_eng = FilterAllUnits ( [ [ f_type , unit_human ] , [ f_class , class_engineer ] , [ f_side , americans ] ] ) ;
19759: LD_ADDR_VAR 0 2
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 25
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 22
19786: PUSH
19787: LD_EXP 3
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: PPUSH
19801: CALL_OW 69
19805: ST_TO_ADDR
// if my_depots = 0 and my_eng = 0 then
19806: LD_VAR 0 1
19810: PUSH
19811: LD_INT 0
19813: EQUAL
19814: PUSH
19815: LD_VAR 0 2
19819: PUSH
19820: LD_INT 0
19822: EQUAL
19823: AND
19824: IFFALSE 19839
// begin YouLost ( Engineer ) ;
19826: LD_STRING Engineer
19828: PPUSH
19829: CALL_OW 104
// ExitGame ;
19833: CALL_OW 341
// end else
19837: GO 19840
// enable ;
19839: ENABLE
// end ;
19840: PPOPN 2
19842: END
// every 0 0$5 trigger IsDead ( John ) do
19843: LD_EXP 7
19847: PPUSH
19848: CALL_OW 301
19852: IFFALSE 19868
19854: GO 19856
19856: DISABLE
// begin YouLost ( JMM ) ;
19857: LD_STRING JMM
19859: PPUSH
19860: CALL_OW 104
// ExitGame ;
19864: CALL_OW 341
// end ;
19868: END
// every 0 0$5 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
19869: LD_INT 1
19871: PPUSH
19872: CALL_OW 301
19876: PUSH
19877: LD_INT 10
19879: PPUSH
19880: CALL_OW 301
19884: OR
19885: IFFALSE 19897
19887: GO 19889
19889: DISABLE
// begin YouLost ( DepotDestroyed ) ;
19890: LD_STRING DepotDestroyed
19892: PPUSH
19893: CALL_OW 104
// end ;
19897: END
// every 0 0$2 trigger GetSide ( dep1 ) = russians marked 17 do
19898: LD_INT 1
19900: PPUSH
19901: CALL_OW 255
19905: PUSH
19906: LD_EXP 5
19910: EQUAL
19911: IFFALSE 19948
19913: GO 19915
19915: DISABLE
// begin wait ( 0 0$30 ) ;
19916: LD_INT 1050
19918: PPUSH
19919: CALL_OW 67
// if GetSide ( dep1 ) = russians then
19923: LD_INT 1
19925: PPUSH
19926: CALL_OW 255
19930: PUSH
19931: LD_EXP 5
19935: EQUAL
19936: IFFALSE 19947
// YouLost ( DepotCaptured ) else
19938: LD_STRING DepotCaptured
19940: PPUSH
19941: CALL_OW 104
19945: GO 19948
// enable ;
19947: ENABLE
// end ;
19948: END
// every 0 0$1 trigger end_of_m do var m , medal1 , medal2 , medal3 ;
19949: LD_LOC 5
19953: IFFALSE 20526
19955: GO 19957
19957: DISABLE
19958: LD_INT 0
19960: PPUSH
19961: PPUSH
19962: PPUSH
19963: PPUSH
// begin medal1 := false ;
19964: LD_ADDR_VAR 0 2
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// medal2 := false ;
19972: LD_ADDR_VAR 0 3
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// medal3 := false ;
19980: LD_ADDR_VAR 0 4
19984: PUSH
19985: LD_INT 0
19987: ST_TO_ADDR
// if GetSide ( Mikhail ) = americans then
19988: LD_EXP 65
19992: PPUSH
19993: CALL_OW 255
19997: PUSH
19998: LD_EXP 3
20002: EQUAL
20003: IFFALSE 20019
// SetSide ( Mikhail , russians1 ) ;
20005: LD_EXP 65
20009: PPUSH
20010: LD_EXP 6
20014: PPUSH
20015: CALL_OW 235
// if lost_units < 3 then
20019: LD_EXP 90
20023: PUSH
20024: LD_INT 3
20026: LESS
20027: IFFALSE 20047
// begin m = 1 ;
20029: LD_ADDR_VAR 0 1
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// medal1 := true ;
20037: LD_ADDR_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// end else
20045: GO 20056
// m := - 1 ;
20047: LD_ADDR_VAR 0 1
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: ST_TO_ADDR
// if Mikhails_outcome then
20056: LD_LOC 3
20060: IFFALSE 20070
// medal2 := true ;
20062: LD_ADDR_VAR 0 3
20066: PUSH
20067: LD_INT 1
20069: ST_TO_ADDR
// if Mikhails_outcome = 1 and GetLives ( Mikhail ) = 0 then
20070: LD_LOC 3
20074: PUSH
20075: LD_INT 1
20077: EQUAL
20078: PUSH
20079: LD_EXP 65
20083: PPUSH
20084: CALL_OW 256
20088: PUSH
20089: LD_INT 0
20091: EQUAL
20092: AND
20093: IFFALSE 20104
// Mikhails_outcome = - 1 ;
20095: LD_ADDR_LOC 3
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: ST_TO_ADDR
// if GetResourceType ( dep1 , mat_cans ) >= 150 then
20104: LD_INT 1
20106: PPUSH
20107: LD_INT 1
20109: PPUSH
20110: CALL_OW 275
20114: PUSH
20115: LD_INT 150
20117: GREATEREQUAL
20118: IFFALSE 20140
// begin AddMedal ( Cans , 1 ) ;
20120: LD_STRING Cans
20122: PPUSH
20123: LD_INT 1
20125: PPUSH
20126: CALL_OW 101
// medal3 := true ;
20130: LD_ADDR_VAR 0 4
20134: PUSH
20135: LD_INT 1
20137: ST_TO_ADDR
// end else
20138: GO 20151
// AddMedal ( Cans , - 1 ) ;
20140: LD_STRING Cans
20142: PPUSH
20143: LD_INT 1
20145: NEG
20146: PPUSH
20147: CALL_OW 101
// AddMedal ( Deaths , m ) ;
20151: LD_STRING Deaths
20153: PPUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 101
// AddMedal ( Prisoner , Mikhails_outcome ) ;
20163: LD_STRING Prisoner
20165: PPUSH
20166: LD_LOC 3
20170: PPUSH
20171: CALL_OW 101
// SA_EndMission ( 1 , 2 , medal1 , medal2 , medal3 ) ;
20175: LD_INT 1
20177: PPUSH
20178: LD_INT 2
20180: PPUSH
20181: LD_VAR 0 2
20185: PPUSH
20186: LD_VAR 0 3
20190: PPUSH
20191: LD_VAR 0 4
20195: PPUSH
20196: CALL 23161 0 5
// GiveMedals ( MAIN ) ;
20200: LD_STRING MAIN
20202: PPUSH
20203: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_alive ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) ) ;
20207: LD_INT 51
20209: PUSH
20210: EMPTY
20211: LIST
20212: PUSH
20213: LD_INT 22
20215: PUSH
20216: LD_EXP 3
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 21
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: PPUSH
20240: CALL_OW 69
20244: PPUSH
20245: CALL_OW 43
// SaveCharacters ( John , JMM ) ;
20249: LD_EXP 7
20253: PPUSH
20254: LD_STRING JMM
20256: PPUSH
20257: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
20261: LD_EXP 9
20265: PPUSH
20266: LD_STRING Bobby
20268: PPUSH
20269: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
20273: LD_EXP 8
20277: PPUSH
20278: LD_STRING Cyrus
20280: PPUSH
20281: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
20285: LD_EXP 12
20289: PPUSH
20290: LD_STRING Lisa
20292: PPUSH
20293: CALL_OW 38
// if GetSide ( Khatam ) <> americans then
20297: LD_EXP 10
20301: PPUSH
20302: CALL_OW 255
20306: PUSH
20307: LD_EXP 3
20311: NONEQUAL
20312: IFFALSE 20326
// SetLives ( Khatam , 0 ) ;
20314: LD_EXP 10
20318: PPUSH
20319: LD_INT 0
20321: PPUSH
20322: CALL_OW 234
// SaveCharacters ( Khatam , Khatam ) ;
20326: LD_EXP 10
20330: PPUSH
20331: LD_STRING Khatam
20333: PPUSH
20334: CALL_OW 38
// if not ( Mikhail_status in [ 1 , 4 , 5 ] ) then
20338: LD_LOC 4
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 4
20348: PUSH
20349: LD_INT 5
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: LIST
20356: IN
20357: NOT
20358: IFFALSE 20372
// SetLives ( Mikhail , 0 ) ;
20360: LD_EXP 65
20364: PPUSH
20365: LD_INT 0
20367: PPUSH
20368: CALL_OW 234
// SaveCharacters ( Mikhail , Mikhail ) ;
20372: LD_EXP 65
20376: PPUSH
20377: LD_STRING Mikhail
20379: PPUSH
20380: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) diff [ John , Bobby , Cyrus , Lisa , Khatam , Mikhail ] , other_survivors ) ;
20384: LD_INT 50
20386: PUSH
20387: EMPTY
20388: LIST
20389: PUSH
20390: LD_INT 22
20392: PUSH
20393: LD_EXP 3
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 21
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 69
20421: PUSH
20422: LD_EXP 7
20426: PUSH
20427: LD_EXP 9
20431: PUSH
20432: LD_EXP 8
20436: PUSH
20437: LD_EXP 12
20441: PUSH
20442: LD_EXP 10
20446: PUSH
20447: LD_EXP 65
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: DIFF
20460: PPUSH
20461: LD_STRING other_survivors
20463: PPUSH
20464: CALL_OW 38
// SaveVariable ( GetResourceType ( dep1 , mat_cans ) , us2cans ) ;
20468: LD_INT 1
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 275
20478: PPUSH
20479: LD_STRING us2cans
20481: PPUSH
20482: CALL_OW 39
// SaveVariable ( JMMInVehicle , us2JMMInVehicle ) ;
20486: LD_EXP 118
20490: PPUSH
20491: LD_STRING us2JMMInVehicle
20493: PPUSH
20494: CALL_OW 39
// SaveVariable ( CyrusInVehicle , us2CyrusInVehicle ) ;
20498: LD_EXP 119
20502: PPUSH
20503: LD_STRING us2CyrusInVehicle
20505: PPUSH
20506: CALL_OW 39
// SaveVariable ( Mikhail_status , us2mikhail_state ) ;
20510: LD_LOC 4
20514: PPUSH
20515: LD_STRING us2mikhail_state
20517: PPUSH
20518: CALL_OW 39
// YouWin ;
20522: CALL_OW 103
// end ;
20526: PPOPN 4
20528: END
// on DialogueSkipped ( i ) do begin Skip = true ;
20529: LD_ADDR_EXP 102
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// end ;
20537: PPOPN 1
20539: END
// on LeaveBuilding ( building , Un ) do var answer ;
20540: LD_INT 0
20542: PPUSH
// begin if ( building = dep1 ) and ( Un = Mikhail ) and Mikhails_Escape_Disabled then
20543: LD_VAR 0 1
20547: PUSH
20548: LD_INT 1
20550: EQUAL
20551: PUSH
20552: LD_VAR 0 2
20556: PUSH
20557: LD_EXP 65
20561: EQUAL
20562: AND
20563: PUSH
20564: LD_EXP 91
20568: AND
20569: IFFALSE 20943
// begin SetSide ( Mikhail , russians1 ) ;
20571: LD_EXP 65
20575: PPUSH
20576: LD_EXP 6
20580: PPUSH
20581: CALL_OW 235
// Mikhail_in_depot = false ;
20585: LD_ADDR_EXP 39
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// answer = Query ( QMikh2 ) ;
20593: LD_ADDR_VAR 0 3
20597: PUSH
20598: LD_STRING QMikh2
20600: PPUSH
20601: CALL_OW 97
20605: ST_TO_ADDR
// case answer of 1 :
20606: LD_VAR 0 3
20610: PUSH
20611: LD_INT 1
20613: DOUBLE
20614: EQUAL
20615: IFTRUE 20619
20617: GO 20753
20619: POP
// begin Mikhails_Escape_Disabled = false ;
20620: LD_ADDR_EXP 91
20624: PUSH
20625: LD_INT 0
20627: ST_TO_ADDR
// target_of_escape = [ 4 , 6 ] ;
20628: LD_ADDR_LOC 10
20632: PUSH
20633: LD_INT 4
20635: PUSH
20636: LD_INT 6
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: ST_TO_ADDR
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
20643: LD_EXP 65
20647: PPUSH
20648: LD_INT 52
20650: PPUSH
20651: LD_INT 13
20653: PPUSH
20654: LD_INT 0
20656: PPUSH
20657: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
20661: LD_ADDR_EXP 50
20665: PUSH
20666: LD_EXP 65
20670: PPUSH
20671: CALL_OW 256
20675: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
20676: LD_EXP 45
20680: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
20681: LD_EXP 3
20685: PPUSH
20686: LD_EXP 6
20690: PPUSH
20691: LD_INT 2
20693: PPUSH
20694: LD_INT 1
20696: PPUSH
20697: CALL_OW 80
// SetSide ( Mikhail , russians1 ) ;
20701: LD_EXP 65
20705: PPUSH
20706: LD_EXP 6
20710: PPUSH
20711: CALL_OW 235
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
20715: LD_EXP 65
20719: PPUSH
20720: LD_LOC 10
20724: PUSH
20725: LD_INT 1
20727: ARRAY
20728: PPUSH
20729: LD_LOC 10
20733: PUSH
20734: LD_INT 2
20736: ARRAY
20737: PPUSH
20738: CALL_OW 171
// AddComHold ( Mikhail ) ;
20742: LD_EXP 65
20746: PPUSH
20747: CALL_OW 200
// end ; 2 :
20751: GO 20943
20753: LD_INT 2
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20885
20761: POP
// begin disable ( great_escape ) ;
20762: LD_EXP 40
20766: DISABLE_MARKED
// wait ( 0 0$2 ) ;
20767: LD_INT 70
20769: PPUSH
20770: CALL_OW 67
// repeat ComMoveXY ( Mikhail , 52 , 13 ) ;
20774: LD_EXP 65
20778: PPUSH
20779: LD_INT 52
20781: PPUSH
20782: LD_INT 13
20784: PPUSH
20785: CALL_OW 111
// AddComHold ( Mikhail ) ;
20789: LD_EXP 65
20793: PPUSH
20794: CALL_OW 200
// wait ( 0 0$0.5 ) ;
20798: LD_INT 18
20800: PPUSH
20801: CALL_OW 67
// until IsAt ( Mikhail , 52 , 13 ) ;
20805: LD_EXP 65
20809: PPUSH
20810: LD_INT 52
20812: PPUSH
20813: LD_INT 13
20815: PPUSH
20816: CALL_OW 307
20820: IFFALSE 20774
// SetSide ( Mikhail , americans ) ;
20822: LD_EXP 65
20826: PPUSH
20827: LD_EXP 3
20831: PPUSH
20832: CALL_OW 235
// repeat ComEnterUnit ( Mikhail , dep1 ) ;
20836: LD_EXP 65
20840: PPUSH
20841: LD_INT 1
20843: PPUSH
20844: CALL_OW 120
// Wait ( 1 ) ;
20848: LD_INT 1
20850: PPUSH
20851: CALL_OW 67
// until IsInUnit ( Mikhail ) = dep1 ;
20855: LD_EXP 65
20859: PPUSH
20860: CALL_OW 310
20864: PUSH
20865: LD_INT 1
20867: EQUAL
20868: IFFALSE 20836
// Mikhail_in_depot = true ;
20870: LD_ADDR_EXP 39
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// enable ( great_escape ) ;
20878: LD_EXP 40
20882: ENABLE_MARKED
// end ; 3 :
20883: GO 20943
20885: LD_INT 3
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20942
20893: POP
// begin ComMoveXY ( Mikhail , 4 , 6 ) ;
20894: LD_EXP 65
20898: PPUSH
20899: LD_INT 4
20901: PPUSH
20902: LD_INT 6
20904: PPUSH
20905: CALL_OW 111
// AddComHold ( Mikhail ) ;
20909: LD_EXP 65
20913: PPUSH
20914: CALL_OW 200
// enable ( remove_mikhail ) ;
20918: LD_EXP 43
20922: ENABLE_MARKED
// Mikhails_outcome = - 1 ;
20923: LD_ADDR_LOC 3
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: ST_TO_ADDR
// Mikhail_status := 1 ;
20932: LD_ADDR_LOC 4
20936: PUSH
20937: LD_INT 1
20939: ST_TO_ADDR
// end ; end ;
20940: GO 20943
20942: POP
// end ; end ;
20943: PPOPN 3
20945: END
// on BuildingCaptured ( build , origside , eng ) do begin if ( build = lab1 ) and ( origside = russians ) then
20946: LD_VAR 0 1
20950: PUSH
20951: LD_INT 23
20953: EQUAL
20954: PUSH
20955: LD_VAR 0 2
20959: PUSH
20960: LD_EXP 5
20964: EQUAL
20965: AND
20966: IFFALSE 20976
// begin Hint ( Lab ) ;
20968: LD_STRING Lab
20970: PPUSH
20971: CALL_OW 339
// disable ;
20975: DISABLE
// end ; end ;
20976: PPOPN 3
20978: END
// on HumanDestroyed ( un , side , nation , x , y , direction , sex , class ) do begin if side = americans then
20979: LD_VAR 0 2
20983: PUSH
20984: LD_EXP 3
20988: EQUAL
20989: IFFALSE 21005
// lost_units = lost_units + 1 ;
20991: LD_ADDR_EXP 90
20995: PUSH
20996: LD_EXP 90
21000: PUSH
21001: LD_INT 1
21003: PLUS
21004: ST_TO_ADDR
// end ; end_of_file
21005: PPOPN 8
21007: END
// export count5 ; export Brestworks ; export RusN_States ; export RusN ; export function InitNorthBase ; var Un ; begin
21008: LD_INT 0
21010: PPUSH
21011: PPUSH
// RusN_States = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
21012: LD_ADDR_EXP 122
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: LD_INT 0
21028: PUSH
21029: LD_INT 0
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// RusN = [ RusNSo1 , RusNSo2 , RusNSo3 , RusNSo4 , guard1 , guard2 , RusNE1 , RusNSc1 , RusNSo5 , RusNSo6 ] ;
21063: LD_ADDR_EXP 123
21067: PUSH
21068: LD_INT 3
21070: PUSH
21071: LD_INT 14
21073: PUSH
21074: LD_INT 27
21076: PUSH
21077: LD_INT 28
21079: PUSH
21080: LD_INT 11
21082: PUSH
21083: LD_INT 12
21085: PUSH
21086: LD_INT 26
21088: PUSH
21089: LD_INT 25
21091: PUSH
21092: LD_INT 24
21094: PUSH
21095: LD_INT 31
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: ST_TO_ADDR
// count5 = 0 ;
21110: LD_ADDR_EXP 120
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// Brestworks = [ Brw1 , Brw2 ] ;
21118: LD_ADDR_EXP 121
21122: PUSH
21123: LD_INT 29
21125: PUSH
21126: LD_INT 9
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: ST_TO_ADDR
// for Un in RusN do
21133: LD_ADDR_VAR 0 2
21137: PUSH
21138: LD_EXP 123
21142: PUSH
21143: FOR_IN
21144: IFFALSE 21157
// ComRemember ( Un ) ;
21146: LD_VAR 0 2
21150: PPUSH
21151: CALL_OW 143
21155: GO 21143
21157: POP
21158: POP
// if not ( IsDead ( Brw1 ) ) then
21159: LD_INT 29
21161: PPUSH
21162: CALL_OW 301
21166: NOT
21167: IFFALSE 21179
// ComEnterUnit ( Guard1 , Brw1 ) ;
21169: LD_INT 11
21171: PPUSH
21172: LD_INT 29
21174: PPUSH
21175: CALL_OW 120
// if not ( IsDead ( Brw2 ) ) then
21179: LD_INT 9
21181: PPUSH
21182: CALL_OW 301
21186: NOT
21187: IFFALSE 21199
// ComEnterUnit ( Guard2 , Brw2 ) ;
21189: LD_INT 12
21191: PPUSH
21192: LD_INT 9
21194: PPUSH
21195: CALL_OW 120
// if not ( IsDead ( Brw3 ) ) then
21199: LD_INT 30
21201: PPUSH
21202: CALL_OW 301
21206: NOT
21207: IFFALSE 21219
// ComEnterUnit ( Guard3 , Brw3 ) ;
21209: LD_INT 7
21211: PPUSH
21212: LD_INT 30
21214: PPUSH
21215: CALL_OW 120
// end ;
21219: LD_VAR 0 1
21223: RET
// export function WaitJob ( list_of_units , reaction ) ; var i , busy ; begin
21224: LD_INT 0
21226: PPUSH
21227: PPUSH
21228: PPUSH
// wait ( 2 ) ;
21229: LD_INT 2
21231: PPUSH
21232: CALL_OW 67
// repeat busy = false ;
21236: LD_ADDR_VAR 0 5
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// for i in list_of_units do
21244: LD_ADDR_VAR 0 4
21248: PUSH
21249: LD_VAR 0 1
21253: PUSH
21254: FOR_IN
21255: IFFALSE 21289
// if IsOk ( i ) then
21257: LD_VAR 0 4
21261: PPUSH
21262: CALL_OW 302
21266: IFFALSE 21287
// if IsBusy ( i ) then
21268: LD_VAR 0 4
21272: PPUSH
21273: CALL_OW 315
21277: IFFALSE 21287
// busy = true ;
21279: LD_ADDR_VAR 0 5
21283: PUSH
21284: LD_INT 1
21286: ST_TO_ADDR
21287: GO 21254
21289: POP
21290: POP
// if busy then
21291: LD_VAR 0 5
21295: IFFALSE 21310
// wait ( 0 0$1 * reaction ) ;
21297: LD_INT 35
21299: PUSH
21300: LD_VAR 0 2
21304: MUL
21305: PPUSH
21306: CALL_OW 67
// until not ( busy ) ;
21310: LD_VAR 0 5
21314: NOT
21315: IFFALSE 21236
// end ;
21317: LD_VAR 0 3
21321: RET
// function WaitNearUnit ( target_unit , dist , list_of_units , reaction ) ; var i , are_near ; begin
21322: LD_INT 0
21324: PPUSH
21325: PPUSH
21326: PPUSH
// wait ( 2 ) ;
21327: LD_INT 2
21329: PPUSH
21330: CALL_OW 67
// repeat are_near = true ;
21334: LD_ADDR_VAR 0 7
21338: PUSH
21339: LD_INT 1
21341: ST_TO_ADDR
// for i in list_of_units do
21342: LD_ADDR_VAR 0 6
21346: PUSH
21347: LD_VAR 0 3
21351: PUSH
21352: FOR_IN
21353: IFFALSE 21409
// if IsOk ( i ) and IsOk ( target_unit ) then
21355: LD_VAR 0 6
21359: PPUSH
21360: CALL_OW 302
21364: PUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 302
21374: AND
21375: IFFALSE 21407
// if GetDistUnits ( target_unit , i ) > dist then
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_VAR 0 6
21386: PPUSH
21387: CALL_OW 296
21391: PUSH
21392: LD_VAR 0 2
21396: GREATER
21397: IFFALSE 21407
// are_near = false ;
21399: LD_ADDR_VAR 0 7
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
21407: GO 21352
21409: POP
21410: POP
// if not ( are_near ) then
21411: LD_VAR 0 7
21415: NOT
21416: IFFALSE 21431
// wait ( 0 0$1 * reaction ) ;
21418: LD_INT 35
21420: PUSH
21421: LD_VAR 0 4
21425: MUL
21426: PPUSH
21427: CALL_OW 67
// until are_near ;
21431: LD_VAR 0 7
21435: IFFALSE 21334
// end ;
21437: LD_VAR 0 5
21441: RET
// every 0 0$1 do var Un , hlp ;
21442: GO 21444
21444: DISABLE
21445: LD_INT 0
21447: PPUSH
21448: PPUSH
// begin hlp = UnitFilter ( RusN , [ [ f_alive ] , [ f_placed ] ] ) ;
21449: LD_ADDR_VAR 0 2
21453: PUSH
21454: LD_EXP 123
21458: PPUSH
21459: LD_INT 51
21461: PUSH
21462: EMPTY
21463: LIST
21464: PUSH
21465: LD_INT 52
21467: PUSH
21468: EMPTY
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PPUSH
21475: CALL_OW 72
21479: ST_TO_ADDR
// RusN = hlp ;
21480: LD_ADDR_EXP 123
21484: PUSH
21485: LD_VAR 0 2
21489: ST_TO_ADDR
// for Un in RusN do
21490: LD_ADDR_VAR 0 1
21494: PUSH
21495: LD_EXP 123
21499: PUSH
21500: FOR_IN
21501: IFFALSE 21534
// if ( GetDistUnits ( Un , Dep1 ) ) > Attack_Distance then
21503: LD_VAR 0 1
21507: PPUSH
21508: LD_INT 1
21510: PPUSH
21511: CALL_OW 296
21515: PUSH
21516: LD_EXP 85
21520: GREATER
21521: IFFALSE 21532
// ComReturn ( Un ) ;
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 144
21532: GO 21500
21534: POP
21535: POP
// if RusN <> 0 then
21536: LD_EXP 123
21540: PUSH
21541: LD_INT 0
21543: NONEQUAL
21544: IFFALSE 21547
// enable ;
21546: ENABLE
// end ;
21547: PPOPN 2
21549: END
// function Go_to_physician ( ill_unit ) ; var start_posX , start_posY ; begin
21550: LD_INT 0
21552: PPUSH
21553: PPUSH
21554: PPUSH
// if IsOk ( RusNSc1 ) and IsLive ( ill_unit ) then
21555: LD_INT 25
21557: PPUSH
21558: CALL_OW 302
21562: PUSH
21563: LD_VAR 0 1
21567: PPUSH
21568: CALL_OW 300
21572: AND
21573: IFFALSE 21763
// begin start_posX = GetX ( ill_unit ) ;
21575: LD_ADDR_VAR 0 3
21579: PUSH
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL_OW 250
21589: ST_TO_ADDR
// start_posY = GetY ( ill_unit ) ;
21590: LD_ADDR_VAR 0 4
21594: PUSH
21595: LD_VAR 0 1
21599: PPUSH
21600: CALL_OW 251
21604: ST_TO_ADDR
// ComMoveXY ( ill_unit , 54 , 16 ) ;
21605: LD_VAR 0 1
21609: PPUSH
21610: LD_INT 54
21612: PPUSH
21613: LD_INT 16
21615: PPUSH
21616: CALL_OW 111
// AddComMoveUnit ( ill_unit , RusNSc1 ) ;
21620: LD_VAR 0 1
21624: PPUSH
21625: LD_INT 25
21627: PPUSH
21628: CALL_OW 172
// WaitNearUnit ( RusNSc1 , 2 , [ ill_unit ] , 0.5 ) ;
21632: LD_INT 25
21634: PPUSH
21635: LD_INT 2
21637: PPUSH
21638: LD_VAR 0 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: PPUSH
21646: LD_REAL  5.00000000000000E-0001
21649: PPUSH
21650: CALL 21322 0 4
// while ( RusN_States [ 9 ] <> 0 ) do
21654: LD_EXP 122
21658: PUSH
21659: LD_INT 9
21661: ARRAY
21662: PUSH
21663: LD_INT 0
21665: NONEQUAL
21666: IFFALSE 21677
// wait ( 1 ) ;
21668: LD_INT 1
21670: PPUSH
21671: CALL_OW 67
21675: GO 21654
// Replace ( RusN_States , 9 , 1 ) ;
21677: LD_EXP 122
21681: PPUSH
21682: LD_INT 9
21684: PPUSH
21685: LD_INT 1
21687: PPUSH
21688: CALL_OW 1
// ComHeal ( RusNSc1 , ill_unit ) ;
21692: LD_INT 25
21694: PPUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 128
// WaitJob ( RusNSc1 , 0.5 ) ;
21704: LD_INT 25
21706: PPUSH
21707: LD_REAL  5.00000000000000E-0001
21710: PPUSH
21711: CALL 21224 0 2
// AddComReturn ( RusNSc1 ) ;
21715: LD_INT 25
21717: PPUSH
21718: CALL_OW 204
// AddComHold ( RusNSc1 ) ;
21722: LD_INT 25
21724: PPUSH
21725: CALL_OW 200
// Replace ( RusN_States , 9 , 0 ) ;
21729: LD_EXP 122
21733: PPUSH
21734: LD_INT 9
21736: PPUSH
21737: LD_INT 0
21739: PPUSH
21740: CALL_OW 1
// AddComMoveXY ( ill_unit , start_posX , start_posY ) ;
21744: LD_VAR 0 1
21748: PPUSH
21749: LD_VAR 0 3
21753: PPUSH
21754: LD_VAR 0 4
21758: PPUSH
21759: CALL_OW 171
// end ; end ;
21763: LD_VAR 0 2
21767: RET
// function Healing_Person ( person , lives ) ; begin
21768: LD_INT 0
21770: PPUSH
// if GetLives ( person ) < lives then
21771: LD_VAR 0 1
21775: PPUSH
21776: CALL_OW 256
21780: PUSH
21781: LD_VAR 0 2
21785: LESS
21786: IFFALSE 22171
// begin if person = RusNSo1 then
21788: LD_VAR 0 1
21792: PUSH
21793: LD_INT 3
21795: EQUAL
21796: IFFALSE 21815
// Replace ( RusN_States , 1 , 2 ) else
21798: LD_EXP 122
21802: PPUSH
21803: LD_INT 1
21805: PPUSH
21806: LD_INT 2
21808: PPUSH
21809: CALL_OW 1
21813: GO 21975
// if person = RusNSo2 then
21815: LD_VAR 0 1
21819: PUSH
21820: LD_INT 14
21822: EQUAL
21823: IFFALSE 21842
// Replace ( RusN_States , 2 , 2 ) else
21825: LD_EXP 122
21829: PPUSH
21830: LD_INT 2
21832: PPUSH
21833: LD_INT 2
21835: PPUSH
21836: CALL_OW 1
21840: GO 21975
// if person = RusNSo3 then
21842: LD_VAR 0 1
21846: PUSH
21847: LD_INT 27
21849: EQUAL
21850: IFFALSE 21869
// Replace ( RusN_States , 3 , 2 ) else
21852: LD_EXP 122
21856: PPUSH
21857: LD_INT 3
21859: PPUSH
21860: LD_INT 2
21862: PPUSH
21863: CALL_OW 1
21867: GO 21975
// if person = RusNSo4 then
21869: LD_VAR 0 1
21873: PUSH
21874: LD_INT 28
21876: EQUAL
21877: IFFALSE 21896
// Replace ( RusN_States , 4 , 2 ) else
21879: LD_EXP 122
21883: PPUSH
21884: LD_INT 4
21886: PPUSH
21887: LD_INT 2
21889: PPUSH
21890: CALL_OW 1
21894: GO 21975
// if person = RusNE1 then
21896: LD_VAR 0 1
21900: PUSH
21901: LD_INT 26
21903: EQUAL
21904: IFFALSE 21923
// Replace ( RusN_States , 8 , 2 ) else
21906: LD_EXP 122
21910: PPUSH
21911: LD_INT 8
21913: PPUSH
21914: LD_INT 2
21916: PPUSH
21917: CALL_OW 1
21921: GO 21975
// if person = RusNSo5 then
21923: LD_VAR 0 1
21927: PUSH
21928: LD_INT 24
21930: EQUAL
21931: IFFALSE 21950
// Replace ( RusN_States , 10 , 2 ) else
21933: LD_EXP 122
21937: PPUSH
21938: LD_INT 10
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 1
21948: GO 21975
// if person = RusNSo6 then
21950: LD_VAR 0 1
21954: PUSH
21955: LD_INT 31
21957: EQUAL
21958: IFFALSE 21975
// Replace ( RusN_States , 11 , 2 ) ;
21960: LD_EXP 122
21964: PPUSH
21965: LD_INT 11
21967: PPUSH
21968: LD_INT 2
21970: PPUSH
21971: CALL_OW 1
// Go_to_physician ( person ) ;
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL 21550 0 1
// if person = RusNSo1 then
21984: LD_VAR 0 1
21988: PUSH
21989: LD_INT 3
21991: EQUAL
21992: IFFALSE 22011
// Replace ( RusN_States , 1 , 0 ) else
21994: LD_EXP 122
21998: PPUSH
21999: LD_INT 1
22001: PPUSH
22002: LD_INT 0
22004: PPUSH
22005: CALL_OW 1
22009: GO 22171
// if person = RusNSo2 then
22011: LD_VAR 0 1
22015: PUSH
22016: LD_INT 14
22018: EQUAL
22019: IFFALSE 22038
// Replace ( RusN_States , 2 , 0 ) else
22021: LD_EXP 122
22025: PPUSH
22026: LD_INT 2
22028: PPUSH
22029: LD_INT 0
22031: PPUSH
22032: CALL_OW 1
22036: GO 22171
// if person = RusNSo3 then
22038: LD_VAR 0 1
22042: PUSH
22043: LD_INT 27
22045: EQUAL
22046: IFFALSE 22065
// Replace ( RusN_States , 3 , 0 ) else
22048: LD_EXP 122
22052: PPUSH
22053: LD_INT 3
22055: PPUSH
22056: LD_INT 0
22058: PPUSH
22059: CALL_OW 1
22063: GO 22171
// if person = RusNSo4 then
22065: LD_VAR 0 1
22069: PUSH
22070: LD_INT 28
22072: EQUAL
22073: IFFALSE 22092
// Replace ( RusN_States , 4 , 0 ) else
22075: LD_EXP 122
22079: PPUSH
22080: LD_INT 4
22082: PPUSH
22083: LD_INT 0
22085: PPUSH
22086: CALL_OW 1
22090: GO 22171
// if person = RusNE1 then
22092: LD_VAR 0 1
22096: PUSH
22097: LD_INT 26
22099: EQUAL
22100: IFFALSE 22119
// Replace ( RusN_States , 8 , 0 ) else
22102: LD_EXP 122
22106: PPUSH
22107: LD_INT 8
22109: PPUSH
22110: LD_INT 0
22112: PPUSH
22113: CALL_OW 1
22117: GO 22171
// if person = RusNSo5 then
22119: LD_VAR 0 1
22123: PUSH
22124: LD_INT 24
22126: EQUAL
22127: IFFALSE 22146
// Replace ( RusN_States , 10 , 0 ) else
22129: LD_EXP 122
22133: PPUSH
22134: LD_INT 10
22136: PPUSH
22137: LD_INT 0
22139: PPUSH
22140: CALL_OW 1
22144: GO 22171
// if person = RusNSo6 then
22146: LD_VAR 0 1
22150: PUSH
22151: LD_INT 31
22153: EQUAL
22154: IFFALSE 22171
// Replace ( RusN_States , 11 , 0 ) ;
22156: LD_EXP 122
22160: PPUSH
22161: LD_INT 11
22163: PPUSH
22164: LD_INT 0
22166: PPUSH
22167: CALL_OW 1
// end ; end ;
22171: LD_VAR 0 3
22175: RET
// function Select_Unit_With_Min_Lives ( list_of_units , at_least ) ; var i , j , lives , selected_unit , min ; begin
22176: LD_INT 0
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
22182: PPUSH
22183: PPUSH
// selected_unit = 0 ;
22184: LD_ADDR_VAR 0 7
22188: PUSH
22189: LD_INT 0
22191: ST_TO_ADDR
// j = 0 ;
22192: LD_ADDR_VAR 0 5
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// min = 1000 ;
22200: LD_ADDR_VAR 0 8
22204: PUSH
22205: LD_INT 1000
22207: ST_TO_ADDR
// for i in list_of_units do
22208: LD_ADDR_VAR 0 4
22212: PUSH
22213: LD_VAR 0 1
22217: PUSH
22218: FOR_IN
22219: IFFALSE 22296
// begin j = j + 1 ;
22221: LD_ADDR_VAR 0 5
22225: PUSH
22226: LD_VAR 0 5
22230: PUSH
22231: LD_INT 1
22233: PLUS
22234: ST_TO_ADDR
// lives = GetLives ( i ) ;
22235: LD_ADDR_VAR 0 6
22239: PUSH
22240: LD_VAR 0 4
22244: PPUSH
22245: CALL_OW 256
22249: ST_TO_ADDR
// if ( lives > at_least ) and ( lives < min ) then
22250: LD_VAR 0 6
22254: PUSH
22255: LD_VAR 0 2
22259: GREATER
22260: PUSH
22261: LD_VAR 0 6
22265: PUSH
22266: LD_VAR 0 8
22270: LESS
22271: AND
22272: IFFALSE 22294
// begin min = lives ;
22274: LD_ADDR_VAR 0 8
22278: PUSH
22279: LD_VAR 0 6
22283: ST_TO_ADDR
// selected_unit = j ;
22284: LD_ADDR_VAR 0 7
22288: PUSH
22289: LD_VAR 0 5
22293: ST_TO_ADDR
// end ; end ;
22294: GO 22218
22296: POP
22297: POP
// result = selected_unit ;
22298: LD_ADDR_VAR 0 3
22302: PUSH
22303: LD_VAR 0 7
22307: ST_TO_ADDR
// end ;
22308: LD_VAR 0 3
22312: RET
// every 0 0$1 do var un_min_lives ;
22313: GO 22315
22315: DISABLE
22316: LD_INT 0
22318: PPUSH
// begin case RusN_States [ 8 ] of 0 :
22319: LD_EXP 122
22323: PUSH
22324: LD_INT 8
22326: ARRAY
22327: PUSH
22328: LD_INT 0
22330: DOUBLE
22331: EQUAL
22332: IFTRUE 22336
22334: GO 22438
22336: POP
// begin Healing_Person ( RusNE1 , 600 ) ;
22337: LD_INT 26
22339: PPUSH
22340: LD_INT 600
22342: PPUSH
22343: CALL 21768 0 2
// if count5 = 0 then
22347: LD_EXP 120
22351: PUSH
22352: LD_INT 0
22354: EQUAL
22355: IFFALSE 22436
// begin un_min_lives = Select_Unit_With_Min_Lives ( Brestworks , 100 ) ;
22357: LD_ADDR_VAR 0 1
22361: PUSH
22362: LD_EXP 121
22366: PPUSH
22367: LD_INT 100
22369: PPUSH
22370: CALL 22176 0 2
22374: ST_TO_ADDR
// if GetLives ( Brestworks [ un_min_lives ] ) < 1000 then
22375: LD_EXP 121
22379: PUSH
22380: LD_VAR 0 1
22384: ARRAY
22385: PPUSH
22386: CALL_OW 256
22390: PUSH
22391: LD_INT 1000
22393: LESS
22394: IFFALSE 22436
// begin ComStop ( RusNE1 ) ;
22396: LD_INT 26
22398: PPUSH
22399: CALL_OW 141
// ComRepairBuilding ( RusNE1 , Brestworks [ un_min_lives ] ) ;
22403: LD_INT 26
22405: PPUSH
22406: LD_EXP 121
22410: PUSH
22411: LD_VAR 0 1
22415: ARRAY
22416: PPUSH
22417: CALL_OW 130
// Replace ( RusN_States , 8 , 1 ) ;
22421: LD_EXP 122
22425: PPUSH
22426: LD_INT 8
22428: PPUSH
22429: LD_INT 1
22431: PPUSH
22432: CALL_OW 1
// end ; end ; end ; 1 :
22436: GO 22492
22438: LD_INT 1
22440: DOUBLE
22441: EQUAL
22442: IFTRUE 22446
22444: GO 22491
22446: POP
// begin Healing_Person ( RusNE1 , 600 ) ;
22447: LD_INT 26
22449: PPUSH
22450: LD_INT 600
22452: PPUSH
22453: CALL 21768 0 2
// if not ( IsBusy ( RusNE1 ) ) then
22457: LD_INT 26
22459: PPUSH
22460: CALL_OW 315
22464: NOT
22465: IFFALSE 22489
// begin ComReturn ( RusNE1 ) ;
22467: LD_INT 26
22469: PPUSH
22470: CALL_OW 144
// Replace ( RusN_States , 8 , 0 ) ;
22474: LD_EXP 122
22478: PPUSH
22479: LD_INT 8
22481: PPUSH
22482: LD_INT 0
22484: PPUSH
22485: CALL_OW 1
// end ; end ; end ;
22489: GO 22492
22491: POP
// if IsLive ( RusNE1 ) then
22492: LD_INT 26
22494: PPUSH
22495: CALL_OW 300
22499: IFFALSE 22502
// enable ;
22501: ENABLE
// end ;
22502: PPOPN 1
22504: END
// every 0 0$1 do
22505: GO 22507
22507: DISABLE
// begin case RusN_States [ 5 ] of 0 :
22508: LD_EXP 122
22512: PUSH
22513: LD_INT 5
22515: ARRAY
22516: PUSH
22517: LD_INT 0
22519: DOUBLE
22520: EQUAL
22521: IFTRUE 22525
22523: GO 22553
22525: POP
// if not ( IsOk ( Brw1 ) ) then
22526: LD_INT 29
22528: PPUSH
22529: CALL_OW 302
22533: NOT
22534: IFFALSE 22551
// Replace ( RusN_States , 5 , 1 ) ; 1 :
22536: LD_EXP 122
22540: PPUSH
22541: LD_INT 5
22543: PPUSH
22544: LD_INT 1
22546: PPUSH
22547: CALL_OW 1
22551: GO 22620
22553: LD_INT 1
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22619
22561: POP
// begin if GetLives ( [ guard1 ] ) < Lives_to_Retreat then
22562: LD_INT 11
22564: PUSH
22565: EMPTY
22566: LIST
22567: PPUSH
22568: CALL_OW 256
22572: PUSH
22573: LD_EXP 89
22577: LESS
22578: IFFALSE 22617
// begin Replace ( RusN_States , 5 , 2 ) ;
22580: LD_EXP 122
22584: PPUSH
22585: LD_INT 5
22587: PPUSH
22588: LD_INT 2
22590: PPUSH
22591: CALL_OW 1
// Go_to_physician ( guard1 ) ;
22595: LD_INT 11
22597: PPUSH
22598: CALL 21550 0 1
// Replace ( RusN_States , 5 , 1 ) ;
22602: LD_EXP 122
22606: PPUSH
22607: LD_INT 5
22609: PPUSH
22610: LD_INT 1
22612: PPUSH
22613: CALL_OW 1
// end ; end ; end ;
22617: GO 22620
22619: POP
// if IsLive ( guard1 ) then
22620: LD_INT 11
22622: PPUSH
22623: CALL_OW 300
22627: IFFALSE 22630
// enable ;
22629: ENABLE
// end ;
22630: END
// every 0 0$1 do
22631: GO 22633
22633: DISABLE
// begin case RusN_States [ 6 ] of 0 :
22634: LD_EXP 122
22638: PUSH
22639: LD_INT 6
22641: ARRAY
22642: PUSH
22643: LD_INT 0
22645: DOUBLE
22646: EQUAL
22647: IFTRUE 22651
22649: GO 22679
22651: POP
// if not ( IsOk ( Brw2 ) ) then
22652: LD_INT 9
22654: PPUSH
22655: CALL_OW 302
22659: NOT
22660: IFFALSE 22677
// Replace ( RusN_States , 6 , 1 ) ; 1 :
22662: LD_EXP 122
22666: PPUSH
22667: LD_INT 6
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: CALL_OW 1
22677: GO 22746
22679: LD_INT 1
22681: DOUBLE
22682: EQUAL
22683: IFTRUE 22687
22685: GO 22745
22687: POP
// begin if GetLives ( [ guard2 ] ) < Lives_to_Retreat then
22688: LD_INT 12
22690: PUSH
22691: EMPTY
22692: LIST
22693: PPUSH
22694: CALL_OW 256
22698: PUSH
22699: LD_EXP 89
22703: LESS
22704: IFFALSE 22743
// begin Replace ( RusN_States , 6 , 2 ) ;
22706: LD_EXP 122
22710: PPUSH
22711: LD_INT 6
22713: PPUSH
22714: LD_INT 2
22716: PPUSH
22717: CALL_OW 1
// Go_to_physician ( guard2 ) ;
22721: LD_INT 12
22723: PPUSH
22724: CALL 21550 0 1
// Replace ( RusN_States , 6 , 1 ) ;
22728: LD_EXP 122
22732: PPUSH
22733: LD_INT 6
22735: PPUSH
22736: LD_INT 1
22738: PPUSH
22739: CALL_OW 1
// end ; end ; end ;
22743: GO 22746
22745: POP
// if IsLive ( guard2 ) then
22746: LD_INT 12
22748: PPUSH
22749: CALL_OW 300
22753: IFFALSE 22756
// enable ;
22755: ENABLE
// end ;
22756: END
// every 0 0$1 do
22757: GO 22759
22759: DISABLE
// begin case RusN_States [ 7 ] of 0 :
22760: LD_EXP 122
22764: PUSH
22765: LD_INT 7
22767: ARRAY
22768: PUSH
22769: LD_INT 0
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22805
22777: POP
// if not ( IsOk ( Brw3 ) ) then
22778: LD_INT 30
22780: PPUSH
22781: CALL_OW 302
22785: NOT
22786: IFFALSE 22803
// Replace ( RusN_States , 7 , 1 ) ; 1 :
22788: LD_EXP 122
22792: PPUSH
22793: LD_INT 7
22795: PPUSH
22796: LD_INT 1
22798: PPUSH
22799: CALL_OW 1
22803: GO 22872
22805: LD_INT 1
22807: DOUBLE
22808: EQUAL
22809: IFTRUE 22813
22811: GO 22871
22813: POP
// begin if GetLives ( [ guard3 ] ) < Lives_to_Retreat then
22814: LD_INT 7
22816: PUSH
22817: EMPTY
22818: LIST
22819: PPUSH
22820: CALL_OW 256
22824: PUSH
22825: LD_EXP 89
22829: LESS
22830: IFFALSE 22869
// begin Replace ( RusN_States , 7 , 2 ) ;
22832: LD_EXP 122
22836: PPUSH
22837: LD_INT 7
22839: PPUSH
22840: LD_INT 2
22842: PPUSH
22843: CALL_OW 1
// Go_to_physician ( guard3 ) ;
22847: LD_INT 7
22849: PPUSH
22850: CALL 21550 0 1
// Replace ( RusN_States , 7 , 1 ) ;
22854: LD_EXP 122
22858: PPUSH
22859: LD_INT 7
22861: PPUSH
22862: LD_INT 1
22864: PPUSH
22865: CALL_OW 1
// end ; end ; end ;
22869: GO 22872
22871: POP
// if IsLive ( guard3 ) then
22872: LD_INT 7
22874: PPUSH
22875: CALL_OW 300
22879: IFFALSE 22882
// enable ;
22881: ENABLE
// end ;
22882: END
// every 0 0$1 do
22883: GO 22885
22885: DISABLE
// begin if RusN_States [ 1 ] = 0 then
22886: LD_EXP 122
22890: PUSH
22891: LD_INT 1
22893: ARRAY
22894: PUSH
22895: LD_INT 0
22897: EQUAL
22898: IFFALSE 22912
// Healing_Person ( RusNSo1 , Lives_to_Retreat ) ;
22900: LD_INT 3
22902: PPUSH
22903: LD_EXP 89
22907: PPUSH
22908: CALL 21768 0 2
// if IsLive ( RusNSo1 ) then
22912: LD_INT 3
22914: PPUSH
22915: CALL_OW 300
22919: IFFALSE 22922
// enable ;
22921: ENABLE
// end ;
22922: END
// every 0 0$1 do
22923: GO 22925
22925: DISABLE
// begin if RusN_States [ 2 ] = 0 then
22926: LD_EXP 122
22930: PUSH
22931: LD_INT 2
22933: ARRAY
22934: PUSH
22935: LD_INT 0
22937: EQUAL
22938: IFFALSE 22952
// Healing_Person ( RusNSo2 , Lives_to_Retreat ) ;
22940: LD_INT 14
22942: PPUSH
22943: LD_EXP 89
22947: PPUSH
22948: CALL 21768 0 2
// if IsLive ( RusNSo2 ) then
22952: LD_INT 14
22954: PPUSH
22955: CALL_OW 300
22959: IFFALSE 22962
// enable ;
22961: ENABLE
// end ;
22962: END
// every 0 0$1 do
22963: GO 22965
22965: DISABLE
// begin if RusN_States [ 3 ] = 0 then
22966: LD_EXP 122
22970: PUSH
22971: LD_INT 3
22973: ARRAY
22974: PUSH
22975: LD_INT 0
22977: EQUAL
22978: IFFALSE 22992
// Healing_Person ( RusNSo3 , Lives_to_Retreat ) ;
22980: LD_INT 27
22982: PPUSH
22983: LD_EXP 89
22987: PPUSH
22988: CALL 21768 0 2
// if IsLive ( RusNSo3 ) then
22992: LD_INT 27
22994: PPUSH
22995: CALL_OW 300
22999: IFFALSE 23002
// enable ;
23001: ENABLE
// end ;
23002: END
// every 0 0$1 do
23003: GO 23005
23005: DISABLE
// begin if RusN_States [ 4 ] = 0 then
23006: LD_EXP 122
23010: PUSH
23011: LD_INT 4
23013: ARRAY
23014: PUSH
23015: LD_INT 0
23017: EQUAL
23018: IFFALSE 23032
// Healing_Person ( RusNSo4 , Lives_to_Retreat ) ;
23020: LD_INT 28
23022: PPUSH
23023: LD_EXP 89
23027: PPUSH
23028: CALL 21768 0 2
// if IsLive ( RusNSo4 ) then
23032: LD_INT 28
23034: PPUSH
23035: CALL_OW 300
23039: IFFALSE 23042
// enable ;
23041: ENABLE
// end ;
23042: END
// every 0 0$1 do
23043: GO 23045
23045: DISABLE
// begin if RusN_States [ 10 ] = 0 then
23046: LD_EXP 122
23050: PUSH
23051: LD_INT 10
23053: ARRAY
23054: PUSH
23055: LD_INT 0
23057: EQUAL
23058: IFFALSE 23072
// Healing_Person ( RusNSo5 , Lives_to_Retreat ) ;
23060: LD_INT 24
23062: PPUSH
23063: LD_EXP 89
23067: PPUSH
23068: CALL 21768 0 2
// if IsLive ( RusNSo5 ) then
23072: LD_INT 24
23074: PPUSH
23075: CALL_OW 300
23079: IFFALSE 23082
// enable ;
23081: ENABLE
// end ;
23082: END
// every 0 0$1 do
23083: GO 23085
23085: DISABLE
// begin if RusN_States [ 11 ] = 0 then
23086: LD_EXP 122
23090: PUSH
23091: LD_INT 11
23093: ARRAY
23094: PUSH
23095: LD_INT 0
23097: EQUAL
23098: IFFALSE 23112
// Healing_Person ( RusNSo6 , Lives_to_Retreat ) ;
23100: LD_INT 31
23102: PPUSH
23103: LD_EXP 89
23107: PPUSH
23108: CALL 21768 0 2
// if IsLive ( RusNSo6 ) then
23112: LD_INT 31
23114: PPUSH
23115: CALL_OW 300
23119: IFFALSE 23122
// enable ;
23121: ENABLE
// end ;
23122: END
// every 0 0$1 + 0 0$0.5 do
23123: GO 23125
23125: DISABLE
// begin count5 = ( count5 + 1 ) mod 5 ;
23126: LD_ADDR_EXP 120
23130: PUSH
23131: LD_EXP 120
23135: PUSH
23136: LD_INT 1
23138: PLUS
23139: PUSH
23140: LD_INT 5
23142: MOD
23143: ST_TO_ADDR
// enable ;
23144: ENABLE
// end ; end_of_file
23145: END
// export function SA_MikhailKilled ; begin
23146: LD_INT 0
23148: PPUSH
// SetAchievement ( ACH_NOM ) ;
23149: LD_STRING ACH_NOM
23151: PPUSH
23152: CALL_OW 543
// end ; end_of_file
23156: LD_VAR 0 1
23160: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
23161: LD_INT 0
23163: PPUSH
23164: PPUSH
// if not missionNumber then
23165: LD_VAR 0 2
23169: NOT
23170: IFFALSE 23174
// exit ;
23172: GO 23304
// achiv := false ;
23174: LD_ADDR_VAR 0 7
23178: PUSH
23179: LD_INT 0
23181: ST_TO_ADDR
// case campaignNumber of 1 :
23182: LD_VAR 0 1
23186: PUSH
23187: LD_INT 1
23189: DOUBLE
23190: EQUAL
23191: IFTRUE 23195
23193: GO 23206
23195: POP
// achiv := ACH_GOTA ; 2 :
23196: LD_ADDR_VAR 0 7
23200: PUSH
23201: LD_STRING ACH_GOTA
23203: ST_TO_ADDR
23204: GO 23256
23206: LD_INT 2
23208: DOUBLE
23209: EQUAL
23210: IFTRUE 23214
23212: GO 23217
23214: POP
// ; 3 :
23215: GO 23256
23217: LD_INT 3
23219: DOUBLE
23220: EQUAL
23221: IFTRUE 23225
23223: GO 23236
23225: POP
// achiv := ACH_MOTSU ; 4 :
23226: LD_ADDR_VAR 0 7
23230: PUSH
23231: LD_STRING ACH_MOTSU
23233: ST_TO_ADDR
23234: GO 23256
23236: LD_INT 4
23238: DOUBLE
23239: EQUAL
23240: IFTRUE 23244
23242: GO 23255
23244: POP
// achiv := ACH_LOP ; end ;
23245: LD_ADDR_VAR 0 7
23249: PUSH
23250: LD_STRING ACH_LOP
23252: ST_TO_ADDR
23253: GO 23256
23255: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
23256: LD_OWVAR 67
23260: PUSH
23261: LD_INT 3
23263: EQUAL
23264: PUSH
23265: LD_VAR 0 7
23269: AND
23270: PUSH
23271: LD_VAR 0 3
23275: AND
23276: PUSH
23277: LD_VAR 0 4
23281: AND
23282: PUSH
23283: LD_VAR 0 5
23287: AND
23288: IFFALSE 23304
// SetAchievementEX ( achiv , missionNumber ) ;
23290: LD_VAR 0 7
23294: PPUSH
23295: LD_VAR 0 2
23299: PPUSH
23300: CALL_OW 564
// end ;
23304: LD_VAR 0 6
23308: RET
// export function SA_BehemothConstructed ; begin
23309: LD_INT 0
23311: PPUSH
// SetAchievement ( ACH_SMC ) ;
23312: LD_STRING ACH_SMC
23314: PPUSH
23315: CALL_OW 543
// end ;
23319: LD_VAR 0 1
23323: RET
