// export test , testing ; export americans , americans1 , russians , russians1 ; export John , Cyrus , Bobby , Khatam , Nick , Lisa ; export AmME1 , AmFE2 , AmMSo3 ; export Powell ; export AmD1 , AmD2 , AmD3 , AmD4 ; export AmR1 , AmR2 , RuR1 , RuR2 ; export Time_of_visit , Time_of_attack , vehicle_goes , escape_flag , flee ; export Time_of_capture , vehicles_detected , uncanny_vehicles ; export Khatam_met_americans , Khatam_met_MM , Mikhail_placed , Mikhail_captured ; export resumption_of_talk , depot , Mikhail_in_depot , great_escape , attack , mikhail_marked_for_death ; export remove_mikhail , conversation , Mikhails_escape ; export Number_of_tigers ; export Dep1_lives , Dep2_lives , rep , Mikhails_lives , firing1 , firing2 , russians_attack , russians_attack1 ; export rsol1 , rsol2 , rsol3 , rsol4 , rsol5 , rsol6 , rdrv1 , rdrv2 , rv1 , rv2 ; export Mikhail , vehicle3 , vehicle4 , driver3 , driver4 ; export tigers , tiger1 , tiger2 , tiger3 , tiger4 ; export battle , number_of_crates , count , sergej_succeeds ; export vehicle1_fuel , vehicle2_fuel ; export tigers_allowed , remove_tigers ; export Engineers_not_dead , First_Capture ; export Attack_Distance , Eng_Skill , Sc_Skill , guard_skill ; export Lives_to_Retreat , lost_units ; export Mikhails_Escape_Disabled ; export Initial_Lives , Attack_canceled ; export RuR_lives , JMM_saw_east_guard , East_guard_seen ; export vehicle1_new , vehicle2_new ; export escape_dialogue , vehicle_goes_flag ; export Dialogue_Number , Skip ; export tiger_skill , russ_attack , drivers_skill , soldiers_skill , vehicle_lives ; export RusEast , RusNorth ; export Alive , RunDelay ; export Init_lives , Tested_Americans ; export Lives_Jmm , Lives_Bobby , Lives_Cyrus ; function Prepare_difficulty ; begin
   0: LD_INT 0
   2: PPUSH
// tiger_skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
   3: LD_ADDR_EXP 103
   7: PUSH
   8: LD_INT 0
  10: PUSH
  11: LD_INT 1
  13: PUSH
  14: LD_INT 2
  16: PUSH
  17: EMPTY
  18: LIST
  19: LIST
  20: LIST
  21: PUSH
  22: LD_OWVAR 67
  26: ARRAY
  27: ST_TO_ADDR
// drivers_skill = [ 0 , 1 , 3 ] [ Difficulty ] ;
  28: LD_ADDR_EXP 105
  32: PUSH
  33: LD_INT 0
  35: PUSH
  36: LD_INT 1
  38: PUSH
  39: LD_INT 3
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: LIST
  46: PUSH
  47: LD_OWVAR 67
  51: ARRAY
  52: ST_TO_ADDR
// soldiers_skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
  53: LD_ADDR_EXP 106
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 2
  66: PUSH
  67: EMPTY
  68: LIST
  69: LIST
  70: LIST
  71: PUSH
  72: LD_OWVAR 67
  76: ARRAY
  77: ST_TO_ADDR
// vehicle_lives = [ 450 , 600 , 1000 ] [ Difficulty ] ;
  78: LD_ADDR_EXP 107
  82: PUSH
  83: LD_INT 450
  85: PUSH
  86: LD_INT 600
  88: PUSH
  89: LD_INT 1000
  91: PUSH
  92: EMPTY
  93: LIST
  94: LIST
  95: LIST
  96: PUSH
  97: LD_OWVAR 67
 101: ARRAY
 102: ST_TO_ADDR
// number_of_crates = [ 5 , 4 , 3 ] [ Difficulty ] ;
 103: LD_ADDR_EXP 76
 107: PUSH
 108: LD_INT 5
 110: PUSH
 111: LD_INT 4
 113: PUSH
 114: LD_INT 3
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: PUSH
 122: LD_OWVAR 67
 126: ARRAY
 127: ST_TO_ADDR
// vehicle1_fuel = [ 50 , 45 , 35 ] [ Difficulty ] ;
 128: LD_ADDR_EXP 79
 132: PUSH
 133: LD_INT 50
 135: PUSH
 136: LD_INT 45
 138: PUSH
 139: LD_INT 35
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: PUSH
 147: LD_OWVAR 67
 151: ARRAY
 152: ST_TO_ADDR
// vehicle2_fuel = [ 55 , 50 , 40 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 80
 157: PUSH
 158: LD_INT 55
 160: PUSH
 161: LD_INT 50
 163: PUSH
 164: LD_INT 40
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// Attack_Distance = [ 17 , 16 , 15 ] [ Difficulty ] ;
 178: LD_ADDR_EXP 85
 182: PUSH
 183: LD_INT 17
 185: PUSH
 186: LD_INT 16
 188: PUSH
 189: LD_INT 15
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: LIST
 196: PUSH
 197: LD_OWVAR 67
 201: ARRAY
 202: ST_TO_ADDR
// Eng_Skill = [ 0 , 0 , 2 ] [ Difficulty ] ;
 203: LD_ADDR_EXP 86
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: LD_OWVAR 67
 226: ARRAY
 227: ST_TO_ADDR
// Sc_Skill = [ 0 , 0 , 2 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 87
 232: PUSH
 233: LD_INT 0
 235: PUSH
 236: LD_INT 0
 238: PUSH
 239: LD_INT 2
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// RunDelay = [ [ 106 , 18 ] , [ 103 , 12 ] , [ 99 , 5 ] ] [ Difficulty ] ;
 253: LD_ADDR_EXP 111
 257: PUSH
 258: LD_INT 106
 260: PUSH
 261: LD_INT 18
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 103
 270: PUSH
 271: LD_INT 12
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: LD_INT 99
 280: PUSH
 281: LD_INT 5
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// ComMoveXY ( RusEM1 , RunDelay [ 1 ] , RunDelay [ 2 ] ) ;
 299: LD_INT 6
 301: PPUSH
 302: LD_EXP 111
 306: PUSH
 307: LD_INT 1
 309: ARRAY
 310: PPUSH
 311: LD_EXP 111
 315: PUSH
 316: LD_INT 2
 318: ARRAY
 319: PPUSH
 320: CALL_OW 111
// AddComHold ( RusEM1 ) ;
 324: LD_INT 6
 326: PPUSH
 327: CALL_OW 200
// Guard_Skill = [ 0 , 1 , 2 ] [ Difficulty ] ;
 331: LD_ADDR_EXP 88
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: LD_INT 2
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: PUSH
 350: LD_OWVAR 67
 354: ARRAY
 355: ST_TO_ADDR
// Lives_to_Retreat = [ 450 , 500 , 600 ] [ Difficulty ] ;
 356: LD_ADDR_EXP 89
 360: PUSH
 361: LD_INT 450
 363: PUSH
 364: LD_INT 500
 366: PUSH
 367: LD_INT 600
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: LD_OWVAR 67
 379: ARRAY
 380: ST_TO_ADDR
// RuR_lives = [ 500 , 800 , 1000 ] [ Difficulty ] ;
 381: LD_ADDR_EXP 94
 385: PUSH
 386: LD_INT 500
 388: PUSH
 389: LD_INT 800
 391: PUSH
 392: LD_INT 1000
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// end ;
 406: LD_VAR 0 1
 410: RET
// function Init ; begin
 411: LD_INT 0
 413: PPUSH
// tigers = [ tiger1 , tiger2 , tiger3 , tiger4 ] ;
 414: LD_ADDR_EXP 70
 418: PUSH
 419: LD_EXP 71
 423: PUSH
 424: LD_EXP 72
 428: PUSH
 429: LD_EXP 73
 433: PUSH
 434: LD_EXP 74
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: ST_TO_ADDR
// americans = 1 ;
 445: LD_ADDR_EXP 3
 449: PUSH
 450: LD_INT 1
 452: ST_TO_ADDR
// americans1 = 4 ;
 453: LD_ADDR_EXP 4
 457: PUSH
 458: LD_INT 4
 460: ST_TO_ADDR
// russians = 3 ;
 461: LD_ADDR_EXP 5
 465: PUSH
 466: LD_INT 3
 468: ST_TO_ADDR
// russians1 = 6 ;
 469: LD_ADDR_EXP 6
 473: PUSH
 474: LD_INT 6
 476: ST_TO_ADDR
// SetAttitude ( americans , russians , att_enemy , true ) ;
 477: LD_EXP 3
 481: PPUSH
 482: LD_EXP 5
 486: PPUSH
 487: LD_INT 2
 489: PPUSH
 490: LD_INT 1
 492: PPUSH
 493: CALL_OW 80
// SetAttitude ( americans , russians1 , att_neutral , false ) ;
 497: LD_EXP 3
 501: PPUSH
 502: LD_EXP 6
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL_OW 80
// SetAttitude ( russians1 , americans , att_neutral , false ) ;
 517: LD_EXP 6
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: LD_INT 0
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL_OW 80
// SetAttitude ( russians , russians1 , att_friend , true ) ;
 537: LD_EXP 5
 541: PPUSH
 542: LD_EXP 6
 546: PPUSH
 547: LD_INT 1
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: CALL_OW 80
// SetAttitude ( americans , americans1 , att_friend , true ) ;
 557: LD_EXP 3
 561: PPUSH
 562: LD_EXP 4
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL_OW 80
// RusEast = [ RusESo1 , RusESo2 ] ;
 577: LD_ADDR_EXP 108
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 8
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: ST_TO_ADDR
// RusNorth = [ RusNSo1 , RusNSo2 , RusNSc1 ] ;
 592: LD_ADDR_EXP 109
 596: PUSH
 597: LD_INT 3
 599: PUSH
 600: LD_INT 14
 602: PUSH
 603: LD_INT 25
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// ComRemember ( RusNorth ) ;
 611: LD_EXP 109
 615: PPUSH
 616: CALL_OW 143
// ComFree ( RusNorth ) ;
 620: LD_EXP 109
 624: PPUSH
 625: CALL_OW 139
// Dep1_lives = 1000 ;
 629: LD_ADDR_EXP 47
 633: PUSH
 634: LD_INT 1000
 636: ST_TO_ADDR
// Dep2_lives = 1000 ;
 637: LD_ADDR_EXP 48
 641: PUSH
 642: LD_INT 1000
 644: ST_TO_ADDR
// InitUc ;
 645: CALL_OW 18
// InitHc ;
 649: CALL_OW 19
// InitVc ;
 653: CALL_OW 20
// uc_direction = 1 ;
 657: LD_ADDR_OWVAR 24
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// uc_nation = nation_russian ;
 665: LD_ADDR_OWVAR 21
 669: PUSH
 670: LD_INT 3
 672: ST_TO_ADDR
// uc_side = russians ;
 673: LD_ADDR_OWVAR 20
 677: PUSH
 678: LD_EXP 5
 682: ST_TO_ADDR
// SetFuel ( vehicle1 , vehicle1_fuel ) ;
 683: LD_INT 5
 685: PPUSH
 686: LD_EXP 79
 690: PPUSH
 691: CALL_OW 240
// SetFuel ( vehicle2 , vehicle2_fuel ) ;
 695: LD_INT 4
 697: PPUSH
 698: LD_EXP 80
 702: PPUSH
 703: CALL_OW 240
// vc_chassis = ru_medium_wheeled ;
 707: LD_ADDR_OWVAR 37
 711: PUSH
 712: LD_INT 21
 714: ST_TO_ADDR
// vc_engine = engine_combustion ;
 715: LD_ADDR_OWVAR 39
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// vc_control = control_manual ;
 723: LD_ADDR_OWVAR 38
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
 731: LD_ADDR_OWVAR 40
 735: PUSH
 736: LD_INT 51
 738: ST_TO_ADDR
// vehicle3 = CreateVehicle ;
 739: LD_ADDR_EXP 66
 743: PUSH
 744: CALL_OW 45
 748: ST_TO_ADDR
// vehicle4 = CreateVehicle ;
 749: LD_ADDR_EXP 67
 753: PUSH
 754: CALL_OW 45
 758: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
 759: LD_ADDR_OWVAR 40
 763: PUSH
 764: LD_INT 42
 766: ST_TO_ADDR
// rv1 = CreateVehicle ;
 767: LD_ADDR_EXP 63
 771: PUSH
 772: CALL_OW 45
 776: ST_TO_ADDR
// SetLives ( rv1 , vehicle_lives ) ;
 777: LD_EXP 63
 781: PPUSH
 782: LD_EXP 107
 786: PPUSH
 787: CALL_OW 234
// rv2 = CreateVehicle ;
 791: LD_ADDR_EXP 64
 795: PUSH
 796: CALL_OW 45
 800: ST_TO_ADDR
// Time_of_visit = 550 550$0 ;
 801: LD_ADDR_EXP 25
 805: PUSH
 806: LD_INT 1155000
 808: ST_TO_ADDR
// Time_of_attack = 550 550$0 ;
 809: LD_ADDR_EXP 26
 813: PUSH
 814: LD_INT 1155000
 816: ST_TO_ADDR
// Time_of_capture = 550 550$0 ;
 817: LD_ADDR_EXP 30
 821: PUSH
 822: LD_INT 1155000
 824: ST_TO_ADDR
// flee = 0 ;
 825: LD_ADDR_EXP 29
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// hc_sex = sex_male ;
 833: LD_ADDR_OWVAR 27
 837: PUSH
 838: LD_INT 1
 840: ST_TO_ADDR
// hc_class = class_mechanic ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 3
 848: ST_TO_ADDR
// hc_skills = [ 1 , 0 , drivers_skill , 0 ] ;
 849: LD_ADDR_OWVAR 31
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: LD_INT 0
 859: PUSH
 860: LD_EXP 105
 864: PUSH
 865: LD_INT 0
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
 874: LD_ADDR_OWVAR 29
 878: PUSH
 879: LD_INT 10
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: ST_TO_ADDR
// hc_name =  ;
 889: LD_ADDR_OWVAR 26
 893: PUSH
 894: LD_STRING 
 896: ST_TO_ADDR
// driver3 = CreateHuman ;
 897: LD_ADDR_EXP 68
 901: PUSH
 902: CALL_OW 44
 906: ST_TO_ADDR
// PlaceHumanInUnit ( driver3 , vehicle3 ) ;
 907: LD_EXP 68
 911: PPUSH
 912: LD_EXP 66
 916: PPUSH
 917: CALL_OW 52
// hc_name =  ;
 921: LD_ADDR_OWVAR 26
 925: PUSH
 926: LD_STRING 
 928: ST_TO_ADDR
// driver4 = CreateHuman ;
 929: LD_ADDR_EXP 69
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// PlaceHumanInUnit ( driver4 , vehicle4 ) ;
 939: LD_EXP 69
 943: PPUSH
 944: LD_EXP 67
 948: PPUSH
 949: CALL_OW 52
// hc_name =  ;
 953: LD_ADDR_OWVAR 26
 957: PUSH
 958: LD_STRING 
 960: ST_TO_ADDR
// hc_skills = [ 1 , 3 , drivers_skill + 1 , 0 ] ;
 961: LD_ADDR_OWVAR 31
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: LD_INT 3
 971: PUSH
 972: LD_EXP 105
 976: PUSH
 977: LD_INT 1
 979: PLUS
 980: PUSH
 981: LD_INT 0
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: ST_TO_ADDR
// hc_class = class_engineer ;
 990: LD_ADDR_OWVAR 28
 994: PUSH
 995: LD_INT 2
 997: ST_TO_ADDR
// rdrv1 = CreateHuman ;
 998: LD_ADDR_EXP 61
1002: PUSH
1003: CALL_OW 44
1007: ST_TO_ADDR
// rdrv2 = CreateHuman ;
1008: LD_ADDR_EXP 62
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( rdrv1 , rv1 ) ;
1018: LD_EXP 61
1022: PPUSH
1023: LD_EXP 63
1027: PPUSH
1028: CALL_OW 52
// PlaceHumanInUnit ( rdrv2 , rv2 ) ;
1032: LD_EXP 62
1036: PPUSH
1037: LD_EXP 64
1041: PPUSH
1042: CALL_OW 52
// hc_class = class_soldier ;
1046: LD_ADDR_OWVAR 28
1050: PUSH
1051: LD_INT 1
1053: ST_TO_ADDR
// hc_skills = [ soldiers_skill , 0 , 1 , 1 ] ;
1054: LD_ADDR_OWVAR 31
1058: PUSH
1059: LD_EXP 106
1063: PUSH
1064: LD_INT 0
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: LD_INT 1
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
// hc_name =  ;
1079: LD_ADDR_OWVAR 26
1083: PUSH
1084: LD_STRING 
1086: ST_TO_ADDR
// rsol1 = CreateHuman ;
1087: LD_ADDR_EXP 55
1091: PUSH
1092: CALL_OW 44
1096: ST_TO_ADDR
// rsol4 = CreateHuman ;
1097: LD_ADDR_EXP 58
1101: PUSH
1102: CALL_OW 44
1106: ST_TO_ADDR
// hc_skills = [ soldiers_skill - 1 , 0 , 1 , 1 ] ;
1107: LD_ADDR_OWVAR 31
1111: PUSH
1112: LD_EXP 106
1116: PUSH
1117: LD_INT 1
1119: MINUS
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: ST_TO_ADDR
// rsol3 = CreateHuman ;
1136: LD_ADDR_EXP 57
1140: PUSH
1141: CALL_OW 44
1145: ST_TO_ADDR
// rsol5 = CreateHuman ;
1146: LD_ADDR_EXP 59
1150: PUSH
1151: CALL_OW 44
1155: ST_TO_ADDR
// hc_skills = [ soldiers_skill + 1 , 0 , 1 , 1 ] ;
1156: LD_ADDR_OWVAR 31
1160: PUSH
1161: LD_EXP 106
1165: PUSH
1166: LD_INT 1
1168: PLUS
1169: PUSH
1170: LD_INT 0
1172: PUSH
1173: LD_INT 1
1175: PUSH
1176: LD_INT 1
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// rsol2 = CreateHuman ;
1185: LD_ADDR_EXP 56
1189: PUSH
1190: CALL_OW 44
1194: ST_TO_ADDR
// hc_skills = [ soldiers_skill , 0 , 1 , 1 ] ;
1195: LD_ADDR_OWVAR 31
1199: PUSH
1200: LD_EXP 106
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 1
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// rsol6 = CreateHuman ;
1220: LD_ADDR_EXP 60
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// hc_sex = sex_male ;
1230: LD_ADDR_OWVAR 27
1234: PUSH
1235: LD_INT 1
1237: ST_TO_ADDR
// uc_side = russians1 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_EXP 6
1247: ST_TO_ADDR
// PrepareNewCharacter ( Mikhail ) ;
1248: LD_STRING Mikhail
1250: PPUSH
1251: CALL_OW 26
// hc_class = class_mechanic ;
1255: LD_ADDR_OWVAR 28
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// Mikhail = CreateHuman ;
1263: LD_ADDR_EXP 65
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// Mikhail_in_depot = false ;
1273: LD_ADDR_EXP 39
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// Mikhails_lives = 1000 ;
1281: LD_ADDR_EXP 50
1285: PUSH
1286: LD_INT 1000
1288: ST_TO_ADDR
// hc_gallery =  ;
1289: LD_ADDR_OWVAR 33
1293: PUSH
1294: LD_STRING 
1296: ST_TO_ADDR
// hc_face_number = 0 ;
1297: LD_ADDR_OWVAR 34
1301: PUSH
1302: LD_INT 0
1304: ST_TO_ADDR
// uc_nation = nation_american ;
1305: LD_ADDR_OWVAR 21
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// uc_side = americans ;
1313: LD_ADDR_OWVAR 20
1317: PUSH
1318: LD_EXP 3
1322: ST_TO_ADDR
// Lives_JMM = LoadVariable ( lives_jmm , 1000 ) ;
1323: LD_ADDR_EXP 114
1327: PUSH
1328: LD_STRING lives_jmm
1330: PPUSH
1331: LD_INT 1000
1333: PPUSH
1334: CALL_OW 30
1338: ST_TO_ADDR
// Lives_Bobby = LoadVariable ( lives_bobby , 1000 ) ;
1339: LD_ADDR_EXP 115
1343: PUSH
1344: LD_STRING lives_bobby
1346: PPUSH
1347: LD_INT 1000
1349: PPUSH
1350: CALL_OW 30
1354: ST_TO_ADDR
// Lives_Cyrus = LoadVariable ( lives_cyrus , 1000 ) ;
1355: LD_ADDR_EXP 116
1359: PUSH
1360: LD_STRING lives_cyrus
1362: PPUSH
1363: LD_INT 1000
1365: PPUSH
1366: CALL_OW 30
1370: ST_TO_ADDR
// if testing then
1371: LD_EXP 2
1375: IFFALSE 1411
// begin PrepareSoldier ( sex_male , 3 ) ;
1377: LD_INT 1
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: CALL_OW 381
// hc_name = Macmillan ;
1387: LD_ADDR_OWVAR 26
1391: PUSH
1392: LD_STRING Macmillan
1394: ST_TO_ADDR
// John = CreateHuman ;
1395: LD_ADDR_EXP 7
1399: PUSH
1400: CALL_OW 44
1404: ST_TO_ADDR
// InitHc ;
1405: CALL_OW 19
// end else
1409: GO 1424
// John = CreateCharacter ( JMM ) ;
1411: LD_ADDR_EXP 7
1415: PUSH
1416: LD_STRING JMM
1418: PPUSH
1419: CALL_OW 34
1423: ST_TO_ADDR
// SetLives ( John , Lives_JMM ) ;
1424: LD_EXP 7
1428: PPUSH
1429: LD_EXP 114
1433: PPUSH
1434: CALL_OW 234
// if not John then
1438: LD_EXP 7
1442: NOT
1443: IFFALSE 1458
// BuildQuery ( Error: John Macmillan not found!!! , [ OK ] ) ;
1445: LD_STRING Error: John Macmillan not found!!!
1447: PPUSH
1448: LD_STRING OK
1450: PUSH
1451: EMPTY
1452: LIST
1453: PPUSH
1454: CALL_OW 99
// if testing then
1458: LD_EXP 2
1462: IFFALSE 1498
// begin PrepareSoldier ( sex_male , 0 ) ;
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 381
// hc_name = Powell ;
1474: LD_ADDR_OWVAR 26
1478: PUSH
1479: LD_STRING Powell
1481: ST_TO_ADDR
// Powell = CreateHuman ;
1482: LD_ADDR_EXP 16
1486: PUSH
1487: CALL_OW 44
1491: ST_TO_ADDR
// InitHc ;
1492: CALL_OW 19
// end else
1496: GO 1511
// Powell = CreateCharacter ( Powell ) ;
1498: LD_ADDR_EXP 16
1502: PUSH
1503: LD_STRING Powell
1505: PPUSH
1506: CALL_OW 34
1510: ST_TO_ADDR
// if not Powell then
1511: LD_EXP 16
1515: NOT
1516: IFFALSE 1531
// BuildQuery ( Error: Powell not found!!! , [ OK ] ) ;
1518: LD_STRING Error: Powell not found!!!
1520: PPUSH
1521: LD_STRING OK
1523: PUSH
1524: EMPTY
1525: LIST
1526: PPUSH
1527: CALL_OW 99
// Bobby = CreateCharacter ( Bobby ) ;
1531: LD_ADDR_EXP 9
1535: PUSH
1536: LD_STRING Bobby
1538: PPUSH
1539: CALL_OW 34
1543: ST_TO_ADDR
// if Bobby then
1544: LD_EXP 9
1548: IFFALSE 1564
// SetLives ( Bobby , Lives_Bobby ) ;
1550: LD_EXP 9
1554: PPUSH
1555: LD_EXP 115
1559: PPUSH
1560: CALL_OW 234
// Cyrus = CreateCharacter ( Cyrus ) ;
1564: LD_ADDR_EXP 8
1568: PUSH
1569: LD_STRING Cyrus
1571: PPUSH
1572: CALL_OW 34
1576: ST_TO_ADDR
// if Cyrus then
1577: LD_EXP 8
1581: IFFALSE 1597
// SetLives ( Cyrus , Lives_Cyrus ) ;
1583: LD_EXP 8
1587: PPUSH
1588: LD_EXP 116
1592: PPUSH
1593: CALL_OW 234
// uc_side = americans1 ;
1597: LD_ADDR_OWVAR 20
1601: PUSH
1602: LD_EXP 4
1606: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
1607: LD_ADDR_EXP 12
1611: PUSH
1612: LD_STRING Lisa
1614: PPUSH
1615: CALL_OW 25
1619: ST_TO_ADDR
// uc_side = americans1 ;
1620: LD_ADDR_OWVAR 20
1624: PUSH
1625: LD_EXP 4
1629: ST_TO_ADDR
// Khatam = NewCharacter ( Khatam ) ;
1630: LD_ADDR_EXP 10
1634: PUSH
1635: LD_STRING Khatam
1637: PPUSH
1638: CALL_OW 25
1642: ST_TO_ADDR
// SetClass ( Khatam , class_scientistic ) ;
1643: LD_EXP 10
1647: PPUSH
1648: LD_INT 4
1650: PPUSH
1651: CALL_OW 336
// Khatam_met_MM = false ;
1655: LD_ADDR_EXP 34
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// uc_side = americans1 ;
1663: LD_ADDR_OWVAR 20
1667: PUSH
1668: LD_EXP 4
1672: ST_TO_ADDR
// hc_sex = sex_male ;
1673: LD_ADDR_OWVAR 27
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// hc_class = class_engineer ;
1681: LD_ADDR_OWVAR 28
1685: PUSH
1686: LD_INT 2
1688: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 0 ] ;
1689: LD_ADDR_OWVAR 31
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: LD_INT 2
1699: PUSH
1700: LD_INT 1
1702: PUSH
1703: LD_INT 0
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: ST_TO_ADDR
// hc_name =  ;
1712: LD_ADDR_OWVAR 26
1716: PUSH
1717: LD_STRING 
1719: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
1720: LD_ADDR_OWVAR 29
1724: PUSH
1725: LD_INT 10
1727: PUSH
1728: LD_INT 10
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: ST_TO_ADDR
// AmME1 = CreateHuman ;
1735: LD_ADDR_EXP 13
1739: PUSH
1740: CALL_OW 44
1744: ST_TO_ADDR
// hc_sex = sex_female ;
1745: LD_ADDR_OWVAR 27
1749: PUSH
1750: LD_INT 2
1752: ST_TO_ADDR
// hc_skills = [ 1 , 1 , 2 , 1 ] ;
1753: LD_ADDR_OWVAR 31
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: ST_TO_ADDR
// hc_name =  ;
1776: LD_ADDR_OWVAR 26
1780: PUSH
1781: LD_STRING 
1783: ST_TO_ADDR
// AmFE2 = CreateHuman ;
1784: LD_ADDR_EXP 14
1788: PUSH
1789: CALL_OW 44
1793: ST_TO_ADDR
// hc_sex = sex_male ;
1794: LD_ADDR_OWVAR 27
1798: PUSH
1799: LD_INT 1
1801: ST_TO_ADDR
// hc_class = class_soldier ;
1802: LD_ADDR_OWVAR 28
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 1 , 0 ] ;
1810: LD_ADDR_OWVAR 31
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: LD_INT 1
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: ST_TO_ADDR
// hc_name =  ;
1833: LD_ADDR_OWVAR 26
1837: PUSH
1838: LD_STRING 
1840: ST_TO_ADDR
// AmMSo3 = CreateHuman ;
1841: LD_ADDR_EXP 15
1845: PUSH
1846: CALL_OW 44
1850: ST_TO_ADDR
// if John then
1851: LD_EXP 7
1855: IFFALSE 1875
// PlaceUnitXY ( John , 44 , 72 , false ) ;
1857: LD_EXP 7
1861: PPUSH
1862: LD_INT 44
1864: PPUSH
1865: LD_INT 72
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 48
// if Bobby then
1875: LD_EXP 9
1879: IFFALSE 1899
// PlaceUnitXY ( Bobby , 43 , 74 , false ) ;
1881: LD_EXP 9
1885: PPUSH
1886: LD_INT 43
1888: PPUSH
1889: LD_INT 74
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 48
// if Cyrus then
1899: LD_EXP 8
1903: IFFALSE 1923
// PlaceUnitXY ( Cyrus , 47 , 76 , false ) ;
1905: LD_EXP 8
1909: PPUSH
1910: LD_INT 47
1912: PPUSH
1913: LD_INT 76
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 48
// PlaceUnitXY ( Lisa , 30 , 55 , false ) ;
1923: LD_EXP 12
1927: PPUSH
1928: LD_INT 30
1930: PPUSH
1931: LD_INT 55
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 48
// ComCrawl ( Lisa ) ;
1941: LD_EXP 12
1945: PPUSH
1946: CALL_OW 137
// AddComHold ( Lisa ) ;
1950: LD_EXP 12
1954: PPUSH
1955: CALL_OW 200
// AddComTurnXY ( Lisa , 34 , 60 ) ;
1959: LD_EXP 12
1963: PPUSH
1964: LD_INT 34
1966: PPUSH
1967: LD_INT 60
1969: PPUSH
1970: CALL_OW 178
// PlaceUnitXY ( AmME1 , 31 , 50 , false ) ;
1974: LD_EXP 13
1978: PPUSH
1979: LD_INT 31
1981: PPUSH
1982: LD_INT 50
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 48
// ComCrawl ( AmME1 ) ;
1992: LD_EXP 13
1996: PPUSH
1997: CALL_OW 137
// AddComHold ( AmME1 ) ;
2001: LD_EXP 13
2005: PPUSH
2006: CALL_OW 200
// AddComTurnXY ( AmME1 , 34 , 50 ) ;
2010: LD_EXP 13
2014: PPUSH
2015: LD_INT 34
2017: PPUSH
2018: LD_INT 50
2020: PPUSH
2021: CALL_OW 178
// PlaceUnitXY ( AmFE2 , 33 , 51 , false ) ;
2025: LD_EXP 14
2029: PPUSH
2030: LD_INT 33
2032: PPUSH
2033: LD_INT 51
2035: PPUSH
2036: LD_INT 0
2038: PPUSH
2039: CALL_OW 48
// ComCrawl ( AmFE2 ) ;
2043: LD_EXP 14
2047: PPUSH
2048: CALL_OW 137
// AddComHold ( AmFE2 ) ;
2052: LD_EXP 14
2056: PPUSH
2057: CALL_OW 200
// AddComTurnXY ( AmFE2 , 34 , 50 ) ;
2061: LD_EXP 14
2065: PPUSH
2066: LD_INT 34
2068: PPUSH
2069: LD_INT 50
2071: PPUSH
2072: CALL_OW 178
// ComFree ( [ John , Bobby , Cyrus ] ) ;
2076: LD_EXP 7
2080: PUSH
2081: LD_EXP 9
2085: PUSH
2086: LD_EXP 8
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PPUSH
2096: CALL_OW 139
// Nick = 0 ;
2100: LD_ADDR_EXP 11
2104: PUSH
2105: LD_INT 0
2107: ST_TO_ADDR
// if not Cyrus and not Bobby then
2108: LD_EXP 8
2112: NOT
2113: PUSH
2114: LD_EXP 9
2118: NOT
2119: AND
2120: IFFALSE 2263
// begin uc_side = americans1 ;
2122: LD_ADDR_OWVAR 20
2126: PUSH
2127: LD_EXP 4
2131: ST_TO_ADDR
// uc_nation = nation_american ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// hc_sex = sex_male ;
2140: LD_ADDR_OWVAR 27
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_class = class_soldier ;
2148: LD_ADDR_OWVAR 28
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_skills = [ 1 , 1 , 1 , 0 ] ;
2156: LD_ADDR_OWVAR 31
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: LD_INT 0
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: ST_TO_ADDR
// hc_name =  ;
2179: LD_ADDR_OWVAR 26
2183: PUSH
2184: LD_STRING 
2186: ST_TO_ADDR
// hc_attr = [ 11 , 8 ] ;
2187: LD_ADDR_OWVAR 29
2191: PUSH
2192: LD_INT 11
2194: PUSH
2195: LD_INT 8
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: ST_TO_ADDR
// Nick = CreateHuman ;
2202: LD_ADDR_EXP 11
2206: PUSH
2207: CALL_OW 44
2211: ST_TO_ADDR
// PlaceUnitXY ( Nick , 32 , 49 , false ) ;
2212: LD_EXP 11
2216: PPUSH
2217: LD_INT 32
2219: PPUSH
2220: LD_INT 49
2222: PPUSH
2223: LD_INT 0
2225: PPUSH
2226: CALL_OW 48
// comCrawl ( Nick ) ;
2230: LD_EXP 11
2234: PPUSH
2235: CALL_OW 137
// AddComHold ( Nick ) ;
2239: LD_EXP 11
2243: PPUSH
2244: CALL_OW 200
// AddComTurnXY ( Nick , 34 , 50 ) ;
2248: LD_EXP 11
2252: PPUSH
2253: LD_INT 34
2255: PPUSH
2256: LD_INT 50
2258: PPUSH
2259: CALL_OW 178
// end ; hc_sex = sex_male ;
2263: LD_ADDR_OWVAR 27
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// hc_class = class_soldier ;
2271: LD_ADDR_OWVAR 28
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 1 ] ;
2279: LD_ADDR_OWVAR 31
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: LD_INT 2
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: ST_TO_ADDR
// hc_name =  ;
2302: LD_ADDR_OWVAR 26
2306: PUSH
2307: LD_STRING 
2309: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2310: LD_ADDR_OWVAR 29
2314: PUSH
2315: LD_INT 10
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: ST_TO_ADDR
// uc_direction = 1 ;
2325: LD_ADDR_OWVAR 24
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// AmR1 = CreateHuman ;
2333: LD_ADDR_EXP 21
2337: PUSH
2338: CALL_OW 44
2342: ST_TO_ADDR
// hc_name =  ;
2343: LD_ADDR_OWVAR 26
2347: PUSH
2348: LD_STRING 
2350: ST_TO_ADDR
// uc_direction = 1 ;
2351: LD_ADDR_OWVAR 24
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// AmR2 = CreateHuman ;
2359: LD_ADDR_EXP 22
2363: PUSH
2364: CALL_OW 44
2368: ST_TO_ADDR
// uc_side = russians ;
2369: LD_ADDR_OWVAR 20
2373: PUSH
2374: LD_EXP 5
2378: ST_TO_ADDR
// uc_nation = nation_russian ;
2379: LD_ADDR_OWVAR 21
2383: PUSH
2384: LD_INT 3
2386: ST_TO_ADDR
// hc_sex = sex_male ;
2387: LD_ADDR_OWVAR 27
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// hc_class = class_soldier ;
2395: LD_ADDR_OWVAR 28
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// hc_skills = [ 2 , 1 , 0 , 0 ] ;
2403: LD_ADDR_OWVAR 31
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: LD_INT 1
2413: PUSH
2414: LD_INT 0
2416: PUSH
2417: LD_INT 0
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2426: LD_ADDR_OWVAR 29
2430: PUSH
2431: LD_INT 10
2433: PUSH
2434: LD_INT 10
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: ST_TO_ADDR
// hc_name =  ;
2441: LD_ADDR_OWVAR 26
2445: PUSH
2446: LD_STRING 
2448: ST_TO_ADDR
// uc_direction = 4 ;
2449: LD_ADDR_OWVAR 24
2453: PUSH
2454: LD_INT 4
2456: ST_TO_ADDR
// RuR1 = CreateHuman ;
2457: LD_ADDR_EXP 23
2461: PUSH
2462: CALL_OW 44
2466: ST_TO_ADDR
// SetLives ( RuR1 , RuR_lives ) ;
2467: LD_EXP 23
2471: PPUSH
2472: LD_EXP 94
2476: PPUSH
2477: CALL_OW 234
// hc_name =  ;
2481: LD_ADDR_OWVAR 26
2485: PUSH
2486: LD_STRING 
2488: ST_TO_ADDR
// uc_direction = 4 ;
2489: LD_ADDR_OWVAR 24
2493: PUSH
2494: LD_INT 4
2496: ST_TO_ADDR
// RuR2 = CreateHuman ;
2497: LD_ADDR_EXP 24
2501: PUSH
2502: CALL_OW 44
2506: ST_TO_ADDR
// SetLives ( RuR2 , RuR_lives ) ;
2507: LD_EXP 24
2511: PPUSH
2512: LD_EXP 94
2516: PPUSH
2517: CALL_OW 234
// SetSkill ( RusNE1 , skill_engineering , eng_skill ) ;
2521: LD_INT 26
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: LD_EXP 86
2531: PPUSH
2532: CALL_OW 237
// SetSkill ( RusNSc1 , skill_scientistic , sc_skill ) ;
2536: LD_INT 25
2538: PPUSH
2539: LD_INT 4
2541: PPUSH
2542: LD_EXP 87
2546: PPUSH
2547: CALL_OW 237
// SetSkill ( guard1 , skill_combat , guard_skill ) ;
2551: LD_INT 11
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_EXP 88
2561: PPUSH
2562: CALL_OW 237
// SetSkill ( guard2 , skill_combat , guard_skill ) ;
2566: LD_INT 12
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_EXP 88
2576: PPUSH
2577: CALL_OW 237
// SetSkill ( guard3 , skill_combat , guard_skill ) ;
2581: LD_INT 7
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: LD_EXP 88
2591: PPUSH
2592: CALL_OW 237
// case Difficulty of 1 :
2596: LD_OWVAR 67
2600: PUSH
2601: LD_INT 1
2603: DOUBLE
2604: EQUAL
2605: IFTRUE 2609
2607: GO 2685
2609: POP
// begin SetLives ( BrW1 , 600 ) ;
2610: LD_INT 29
2612: PPUSH
2613: LD_INT 600
2615: PPUSH
2616: CALL_OW 234
// DestroyUnit ( BrW3 ) ;
2620: LD_INT 30
2622: PPUSH
2623: CALL_OW 65
// DestroyUnit ( Brw2 ) ;
2627: LD_INT 9
2629: PPUSH
2630: CALL_OW 65
// DestroyUnit ( RusNSo4 ) ;
2634: LD_INT 28
2636: PPUSH
2637: CALL_OW 65
// DestroyUnit ( RusNSo5 ) ;
2641: LD_INT 24
2643: PPUSH
2644: CALL_OW 65
// DestroyUnit ( RusNSo6 ) ;
2648: LD_INT 31
2650: PPUSH
2651: CALL_OW 65
// DestroyUnit ( RusNE1 ) ;
2655: LD_INT 26
2657: PPUSH
2658: CALL_OW 65
// DestroyUnit ( guard2 ) ;
2662: LD_INT 12
2664: PPUSH
2665: CALL_OW 65
// DestroyUnit ( guard3 ) ;
2669: LD_INT 7
2671: PPUSH
2672: CALL_OW 65
// DestroyUnit ( RusNSo3 ) ;
2676: LD_INT 27
2678: PPUSH
2679: CALL_OW 65
// end ; 2 :
2683: GO 2760
2685: LD_INT 2
2687: DOUBLE
2688: EQUAL
2689: IFTRUE 2693
2691: GO 2748
2693: POP
// begin SetLives ( BrW3 , 700 ) ;
2694: LD_INT 30
2696: PPUSH
2697: LD_INT 700
2699: PPUSH
2700: CALL_OW 234
// DestroyUnit ( Brw2 ) ;
2704: LD_INT 9
2706: PPUSH
2707: CALL_OW 65
// DestroyUnit ( RusNSo4 ) ;
2711: LD_INT 28
2713: PPUSH
2714: CALL_OW 65
// DestroyUnit ( RusNSo5 ) ;
2718: LD_INT 24
2720: PPUSH
2721: CALL_OW 65
// DestroyUnit ( RusNSo6 ) ;
2725: LD_INT 31
2727: PPUSH
2728: CALL_OW 65
// DestroyUnit ( RusNE1 ) ;
2732: LD_INT 26
2734: PPUSH
2735: CALL_OW 65
// DestroyUnit ( guard2 ) ;
2739: LD_INT 12
2741: PPUSH
2742: CALL_OW 65
// end ; 3 :
2746: GO 2760
2748: LD_INT 3
2750: DOUBLE
2751: EQUAL
2752: IFTRUE 2756
2754: GO 2759
2756: POP
// begin end ; end ;
2757: GO 2760
2759: POP
// battle = false ;
2760: LD_ADDR_EXP 75
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// count = 0 ;
2768: LD_ADDR_EXP 77
2772: PUSH
2773: LD_INT 0
2775: ST_TO_ADDR
// sergej_succeeds = 0 ;
2776: LD_ADDR_EXP 78
2780: PUSH
2781: LD_INT 0
2783: ST_TO_ADDR
// Khatam_met_americans = 1 ;
2784: LD_ADDR_EXP 33
2788: PUSH
2789: LD_INT 1
2791: ST_TO_ADDR
// disable ( Khatam_met_americans ) ;
2792: LD_EXP 33
2796: DISABLE_MARKED
// escape_flag = false ;
2797: LD_ADDR_EXP 28
2801: PUSH
2802: LD_INT 0
2804: ST_TO_ADDR
// vehicle_goes = 2 ;
2805: LD_ADDR_EXP 27
2809: PUSH
2810: LD_INT 2
2812: ST_TO_ADDR
// disable ( vehicle_goes ) ;
2813: LD_EXP 27
2817: DISABLE_MARKED
// Mikhail_placed = 3 ;
2818: LD_ADDR_EXP 35
2822: PUSH
2823: LD_INT 3
2825: ST_TO_ADDR
// disable ( mikhail_placed ) ;
2826: LD_EXP 35
2830: DISABLE_MARKED
// Mikhail_captured = 4 ;
2831: LD_ADDR_EXP 36
2835: PUSH
2836: LD_INT 4
2838: ST_TO_ADDR
// disable ( Mikhail_captured ) ;
2839: LD_EXP 36
2843: DISABLE_MARKED
// vehicles_detected = 5 ;
2844: LD_ADDR_EXP 31
2848: PUSH
2849: LD_INT 5
2851: ST_TO_ADDR
// disable ( vehicles_detected ) ;
2852: LD_EXP 31
2856: DISABLE_MARKED
// uncanny_vehicles = 6 ;
2857: LD_ADDR_EXP 32
2861: PUSH
2862: LD_INT 6
2864: ST_TO_ADDR
// depot = 8 ;
2865: LD_ADDR_EXP 38
2869: PUSH
2870: LD_INT 8
2872: ST_TO_ADDR
// disable ( depot ) ;
2873: LD_EXP 38
2877: DISABLE_MARKED
// great_escape = 9 ;
2878: LD_ADDR_EXP 40
2882: PUSH
2883: LD_INT 9
2885: ST_TO_ADDR
// disable ( great_escape ) ;
2886: LD_EXP 40
2890: DISABLE_MARKED
// attack = 10 ;
2891: LD_ADDR_EXP 41
2895: PUSH
2896: LD_INT 10
2898: ST_TO_ADDR
// disable ( attack ) ;
2899: LD_EXP 41
2903: DISABLE_MARKED
// remove_mikhail = 11 ;
2904: LD_ADDR_EXP 43
2908: PUSH
2909: LD_INT 11
2911: ST_TO_ADDR
// disable ( remove_mikhail ) ;
2912: LD_EXP 43
2916: DISABLE_MARKED
// conversation = 12 ;
2917: LD_ADDR_EXP 44
2921: PUSH
2922: LD_INT 12
2924: ST_TO_ADDR
// disable ( conversation ) ;
2925: LD_EXP 44
2929: DISABLE_MARKED
// Mikhails_escape = 13 ;
2930: LD_ADDR_EXP 45
2934: PUSH
2935: LD_INT 13
2937: ST_TO_ADDR
// disable ( Mikhails_escape ) ;
2938: LD_EXP 45
2942: DISABLE_MARKED
// rep = true ;
2943: LD_ADDR_EXP 49
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// firing1 = 14 ;
2951: LD_ADDR_EXP 51
2955: PUSH
2956: LD_INT 14
2958: ST_TO_ADDR
// disable ( firing1 ) ;
2959: LD_EXP 51
2963: DISABLE_MARKED
// firing2 = 15 ;
2964: LD_ADDR_EXP 52
2968: PUSH
2969: LD_INT 15
2971: ST_TO_ADDR
// disable ( firing2 ) ;
2972: LD_EXP 52
2976: DISABLE_MARKED
// russians_attack = 16 ;
2977: LD_ADDR_EXP 53
2981: PUSH
2982: LD_INT 16
2984: ST_TO_ADDR
// disable ( russians_attack ) ;
2985: LD_EXP 53
2989: DISABLE_MARKED
// russians_attack1 = 17 ;
2990: LD_ADDR_EXP 54
2994: PUSH
2995: LD_INT 17
2997: ST_TO_ADDR
// disable ( russians_attack1 ) ;
2998: LD_EXP 54
3002: DISABLE_MARKED
// tigers_allowed = 18 ;
3003: LD_ADDR_EXP 81
3007: PUSH
3008: LD_INT 18
3010: ST_TO_ADDR
// disable ( tigers_allowed ) ;
3011: LD_EXP 81
3015: DISABLE_MARKED
// remove_tigers = 19 ;
3016: LD_ADDR_EXP 82
3020: PUSH
3021: LD_INT 19
3023: ST_TO_ADDR
// disable ( remove_tigers ) ;
3024: LD_EXP 82
3028: DISABLE_MARKED
// Engineers_not_dead = 20 ;
3029: LD_ADDR_EXP 83
3033: PUSH
3034: LD_INT 20
3036: ST_TO_ADDR
// disable ( Engineers_not_dead ) ;
3037: LD_EXP 83
3041: DISABLE_MARKED
// East_guard_seen = 21 ;
3042: LD_ADDR_EXP 96
3046: PUSH
3047: LD_INT 21
3049: ST_TO_ADDR
// enable ( East_guard_seen ) ;
3050: LD_EXP 96
3054: ENABLE_MARKED
// mikhail_marked_for_death = false ;
3055: LD_ADDR_EXP 42
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// JMMInVehicle := false ;
3063: LD_ADDR_EXP 118
3067: PUSH
3068: LD_INT 0
3070: ST_TO_ADDR
// CyrusInVehicle := false ;
3071: LD_ADDR_EXP 119
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// Dialogue_Number = 0 ;
3079: LD_ADDR_EXP 101
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// Skip = false ;
3087: LD_ADDR_EXP 102
3091: PUSH
3092: LD_INT 0
3094: ST_TO_ADDR
// JMM_saw_east_guard = false ;
3095: LD_ADDR_EXP 95
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// Attack_canceled = false ;
3103: LD_ADDR_EXP 93
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// lost_units = 0 ;
3111: LD_ADDR_EXP 90
3115: PUSH
3116: LD_INT 0
3118: ST_TO_ADDR
// First_Capture = true ;
3119: LD_ADDR_EXP 84
3123: PUSH
3124: LD_INT 1
3126: ST_TO_ADDR
// vehicle1_new = 0 ;
3127: LD_ADDR_EXP 97
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// vehicle2_new = 0 ;
3135: LD_ADDR_EXP 98
3139: PUSH
3140: LD_INT 0
3142: ST_TO_ADDR
// escape_dialogue = false ;
3143: LD_ADDR_EXP 99
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// vehicle_goes_flag = true ;
3151: LD_ADDR_EXP 100
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// Tested_Americans = [ ] ;
3159: LD_ADDR_EXP 113
3163: PUSH
3164: EMPTY
3165: ST_TO_ADDR
// Init_Lives = [ ] ;
3166: LD_ADDR_EXP 112
3170: PUSH
3171: EMPTY
3172: ST_TO_ADDR
// Mikhails_Escape_Disabled = true ;
3173: LD_ADDR_EXP 91
3177: PUSH
3178: LD_INT 1
3180: ST_TO_ADDR
// Initial_Lives = GetLives ( [ John , Cyrus , Bobby , Khatam , Lisa , AmME1 , AmFE2 , AmMSo3 , Nick ] ) ;
3181: LD_ADDR_EXP 92
3185: PUSH
3186: LD_EXP 7
3190: PUSH
3191: LD_EXP 8
3195: PUSH
3196: LD_EXP 9
3200: PUSH
3201: LD_EXP 10
3205: PUSH
3206: LD_EXP 12
3210: PUSH
3211: LD_EXP 13
3215: PUSH
3216: LD_EXP 14
3220: PUSH
3221: LD_EXP 15
3225: PUSH
3226: LD_EXP 11
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 256
3246: ST_TO_ADDR
// CenterOnXY ( 41 , 65 ) ;
3247: LD_INT 41
3249: PPUSH
3250: LD_INT 65
3252: PPUSH
3253: CALL_OW 84
// end ;
3257: LD_VAR 0 1
3261: RET
// starting begin RandomizeAll ;
3262: CALL_OW 11
// testing = false ;
3266: LD_ADDR_EXP 2
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// test = 0 ;
3274: LD_ADDR_EXP 1
3278: PUSH
3279: LD_INT 0
3281: ST_TO_ADDR
// Prepare_difficulty ;
3282: CALL 0 0 0
// InitNorthBase ;
3286: CALL 20836 0 0
// Init ;
3290: CALL 411 0 0
// end ; end_of_file
3294: END
// export Speaker ; var Byl_u_zakladny1 , Followed , Mikhails_outcome , Mikhail_status , end_of_m ; var rsol , rv , tiger , sour , target_of_escape , attacker ; export JMMInVehicle , CyrusInVehicle ; export function WaitTask ( list_of_units , reaction ) ; var i , busy ; begin
3295: LD_INT 0
3297: PPUSH
3298: PPUSH
3299: PPUSH
// wait ( 2 ) ;
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 67
// repeat busy = false ;
3307: LD_ADDR_VAR 0 5
3311: PUSH
3312: LD_INT 0
3314: ST_TO_ADDR
// for i in list_of_units do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: LD_VAR 0 1
3324: PUSH
3325: FOR_IN
3326: IFFALSE 3360
// if IsOk ( i ) then
3328: LD_VAR 0 4
3332: PPUSH
3333: CALL_OW 302
3337: IFFALSE 3358
// if HasTask ( i ) then
3339: LD_VAR 0 4
3343: PPUSH
3344: CALL_OW 314
3348: IFFALSE 3358
// busy = true ;
3350: LD_ADDR_VAR 0 5
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
3358: GO 3325
3360: POP
3361: POP
// if busy then
3362: LD_VAR 0 5
3366: IFFALSE 3381
// wait ( 0 0$1 * reaction ) ;
3368: LD_INT 35
3370: PUSH
3371: LD_VAR 0 2
3375: MUL
3376: PPUSH
3377: CALL_OW 67
// until not ( busy ) ;
3381: LD_VAR 0 5
3385: NOT
3386: IFFALSE 3307
// end ;
3388: LD_VAR 0 3
3392: RET
// every 0 0$1 trigger not ( test ) do var sold , alive , Un , hlp ;
3393: LD_EXP 1
3397: NOT
3398: IFFALSE 6819
3400: GO 3402
3402: DISABLE
3403: LD_INT 0
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// begin hlp = tick ;
3409: LD_ADDR_VAR 0 4
3413: PUSH
3414: LD_OWVAR 1
3418: ST_TO_ADDR
// IngameOn ;
3419: CALL_OW 8
// Dialogue_Number = 1 ;
3423: LD_ADDR_EXP 101
3427: PUSH
3428: LD_INT 1
3430: ST_TO_ADDR
// if IsOk ( Bobby ) or IsOk ( Cyrus ) then
3431: LD_EXP 9
3435: PPUSH
3436: CALL_OW 302
3440: PUSH
3441: LD_EXP 8
3445: PPUSH
3446: CALL_OW 302
3450: OR
3451: IFFALSE 5501
// begin alive = [ ] ;
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: EMPTY
3459: ST_TO_ADDR
// Speaker = [ ] ;
3460: LD_ADDR_EXP 117
3464: PUSH
3465: EMPTY
3466: ST_TO_ADDR
// if IsOk ( Bobby ) then
3467: LD_EXP 9
3471: PPUSH
3472: CALL_OW 302
3476: IFFALSE 3494
// alive = alive ^ Bobby ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_VAR 0 2
3487: PUSH
3488: LD_EXP 9
3492: ADD
3493: ST_TO_ADDR
// if IsOk ( Cyrus ) then
3494: LD_EXP 8
3498: PPUSH
3499: CALL_OW 302
3503: IFFALSE 3521
// alive = alive ^ Cyrus ;
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_VAR 0 2
3514: PUSH
3515: LD_EXP 8
3519: ADD
3520: ST_TO_ADDR
// if IsOk ( Bobby ) and not ( Skip ) then
3521: LD_EXP 9
3525: PPUSH
3526: CALL_OW 302
3530: PUSH
3531: LD_EXP 102
3535: NOT
3536: AND
3537: IFFALSE 3580
// if IsOk ( Cyrus ) then
3539: LD_EXP 8
3543: PPUSH
3544: CALL_OW 302
3548: IFFALSE 3566
// AddComTurnUnit ( Bobby , Cyrus ) else
3550: LD_EXP 9
3554: PPUSH
3555: LD_EXP 8
3559: PPUSH
3560: CALL_OW 179
3564: GO 3580
// AddComTurnUnit ( Bobby , John ) ;
3566: LD_EXP 9
3570: PPUSH
3571: LD_EXP 7
3575: PPUSH
3576: CALL_OW 179
// if IsOk ( Bobby ) and not ( Skip ) then
3580: LD_EXP 9
3584: PPUSH
3585: CALL_OW 302
3589: PUSH
3590: LD_EXP 102
3594: NOT
3595: AND
3596: IFFALSE 3610
// AddComWait ( Bobby , 0 0$1 ) ;
3598: LD_EXP 9
3602: PPUSH
3603: LD_INT 35
3605: PPUSH
3606: CALL_OW 202
// if IsOk ( Bobby ) and not ( Skip ) then
3610: LD_EXP 9
3614: PPUSH
3615: CALL_OW 302
3619: PUSH
3620: LD_EXP 102
3624: NOT
3625: AND
3626: IFFALSE 3643
// AddComMoveXY ( Bobby , 39 , 67 ) ;
3628: LD_EXP 9
3632: PPUSH
3633: LD_INT 39
3635: PPUSH
3636: LD_INT 67
3638: PPUSH
3639: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
3643: LD_EXP 9
3647: PPUSH
3648: CALL_OW 302
3652: PUSH
3653: LD_EXP 102
3657: NOT
3658: AND
3659: IFFALSE 3675
// AddComTurnUnit ( Bobby , John ) ;
3661: LD_EXP 9
3665: PPUSH
3666: LD_EXP 7
3670: PPUSH
3671: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
3675: LD_EXP 8
3679: PPUSH
3680: CALL_OW 302
3684: PUSH
3685: LD_EXP 102
3689: NOT
3690: AND
3691: IFFALSE 3705
// ComWait ( Cyrus , 0 0$0.5 ) ;
3693: LD_EXP 8
3697: PPUSH
3698: LD_INT 18
3700: PPUSH
3701: CALL_OW 142
// if IsOk ( Cyrus ) and not ( Skip ) then
3705: LD_EXP 8
3709: PPUSH
3710: CALL_OW 302
3714: PUSH
3715: LD_EXP 102
3719: NOT
3720: AND
3721: IFFALSE 3738
// AddComMoveXY ( Cyrus , 41 , 71 ) ;
3723: LD_EXP 8
3727: PPUSH
3728: LD_INT 41
3730: PPUSH
3731: LD_INT 71
3733: PPUSH
3734: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
3738: LD_EXP 8
3742: PPUSH
3743: CALL_OW 302
3747: PUSH
3748: LD_EXP 102
3752: NOT
3753: AND
3754: IFFALSE 3768
// AddComWait ( Cyrus , 0 0$1 ) ;
3756: LD_EXP 8
3760: PPUSH
3761: LD_INT 35
3763: PPUSH
3764: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
3768: LD_EXP 7
3772: PPUSH
3773: CALL_OW 302
3777: PUSH
3778: LD_EXP 102
3782: NOT
3783: AND
3784: IFFALSE 3801
// ComMoveXY ( John , 47 , 68 ) ;
3786: LD_EXP 7
3790: PPUSH
3791: LD_INT 47
3793: PPUSH
3794: LD_INT 68
3796: PPUSH
3797: CALL_OW 111
// if IsOk ( John ) and not ( Skip ) then
3801: LD_EXP 7
3805: PPUSH
3806: CALL_OW 302
3810: PUSH
3811: LD_EXP 102
3815: NOT
3816: AND
3817: IFFALSE 3860
// if IsOk ( Bobby ) then
3819: LD_EXP 9
3823: PPUSH
3824: CALL_OW 302
3828: IFFALSE 3846
// AddComTurnUnit ( John , Bobby ) else
3830: LD_EXP 7
3834: PPUSH
3835: LD_EXP 9
3839: PPUSH
3840: CALL_OW 179
3844: GO 3860
// AddComTurnUnit ( John , Cyrus ) ;
3846: LD_EXP 7
3850: PPUSH
3851: LD_EXP 8
3855: PPUSH
3856: CALL_OW 179
// Un = alive [ Rand ( 1 , alive ) ] ;
3860: LD_ADDR_VAR 0 3
3864: PUSH
3865: LD_VAR 0 2
3869: PUSH
3870: LD_INT 1
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: CALL_OW 12
3882: ARRAY
3883: ST_TO_ADDR
// if not ( Skip ) then
3884: LD_EXP 102
3888: NOT
3889: IFFALSE 3926
// if ( Un = Bobby ) and IsOk ( Bobby ) then
3891: LD_VAR 0 3
3895: PUSH
3896: LD_EXP 9
3900: EQUAL
3901: PUSH
3902: LD_EXP 9
3906: PPUSH
3907: CALL_OW 302
3911: AND
3912: IFFALSE 3926
// Say ( Bobby , D1a-Bobby-1 ) ;
3914: LD_EXP 9
3918: PPUSH
3919: LD_STRING D1a-Bobby-1
3921: PPUSH
3922: CALL_OW 88
// if not ( Skip ) then
3926: LD_EXP 102
3930: NOT
3931: IFFALSE 3968
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
3933: LD_VAR 0 3
3937: PUSH
3938: LD_EXP 8
3942: EQUAL
3943: PUSH
3944: LD_EXP 8
3948: PPUSH
3949: CALL_OW 302
3953: AND
3954: IFFALSE 3968
// Say ( Cyrus , D1a-Cyrus-1 ) ;
3956: LD_EXP 8
3960: PPUSH
3961: LD_STRING D1a-Cyrus-1
3963: PPUSH
3964: CALL_OW 88
// if IsOk ( Bobby ) and not ( Skip ) then
3968: LD_EXP 9
3972: PPUSH
3973: CALL_OW 302
3977: PUSH
3978: LD_EXP 102
3982: NOT
3983: AND
3984: IFFALSE 4001
// ComMoveXY ( Bobby , 47 , 70 ) ;
3986: LD_EXP 9
3990: PPUSH
3991: LD_INT 47
3993: PPUSH
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 111
// if IsOk ( Bobby ) and not ( Skip ) then
4001: LD_EXP 9
4005: PPUSH
4006: CALL_OW 302
4010: PUSH
4011: LD_EXP 102
4015: NOT
4016: AND
4017: IFFALSE 4031
// AddComWait ( Bobby , 0 0$0.5 ) ;
4019: LD_EXP 9
4023: PPUSH
4024: LD_INT 18
4026: PPUSH
4027: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4031: LD_EXP 8
4035: PPUSH
4036: CALL_OW 302
4040: PUSH
4041: LD_EXP 102
4045: NOT
4046: AND
4047: IFFALSE 4064
// AddComMoveXY ( Cyrus , 43 , 69 ) ;
4049: LD_EXP 8
4053: PPUSH
4054: LD_INT 43
4056: PPUSH
4057: LD_INT 69
4059: PPUSH
4060: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
4064: LD_EXP 8
4068: PPUSH
4069: CALL_OW 302
4073: PUSH
4074: LD_EXP 102
4078: NOT
4079: AND
4080: IFFALSE 4094
// AddComWait ( Cyrus , 0 0$0.5 ) ;
4082: LD_EXP 8
4086: PPUSH
4087: LD_INT 18
4089: PPUSH
4090: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4094: LD_EXP 8
4098: PPUSH
4099: CALL_OW 302
4103: PUSH
4104: LD_EXP 102
4108: NOT
4109: AND
4110: IFFALSE 4153
// if IsOk ( Bobby ) then
4112: LD_EXP 9
4116: PPUSH
4117: CALL_OW 302
4121: IFFALSE 4139
// AddComTurnUnit ( Cyrus , Bobby ) else
4123: LD_EXP 8
4127: PPUSH
4128: LD_EXP 9
4132: PPUSH
4133: CALL_OW 179
4137: GO 4153
// AddComTurnUnit ( Cyrus , John ) ;
4139: LD_EXP 8
4143: PPUSH
4144: LD_EXP 7
4148: PPUSH
4149: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4153: LD_EXP 7
4157: PPUSH
4158: CALL_OW 302
4162: PUSH
4163: LD_EXP 102
4167: NOT
4168: AND
4169: IFFALSE 4183
// AddComWait ( John , 0 0$5 ) ;
4171: LD_EXP 7
4175: PPUSH
4176: LD_INT 175
4178: PPUSH
4179: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4183: LD_EXP 7
4187: PPUSH
4188: CALL_OW 302
4192: PUSH
4193: LD_EXP 102
4197: NOT
4198: AND
4199: IFFALSE 4216
// AddComMoveXY ( John , 36 , 63 ) ;
4201: LD_EXP 7
4205: PPUSH
4206: LD_INT 36
4208: PPUSH
4209: LD_INT 63
4211: PPUSH
4212: CALL_OW 171
// if IsOk ( John ) and not ( Skip ) then
4216: LD_EXP 7
4220: PPUSH
4221: CALL_OW 302
4225: PUSH
4226: LD_EXP 102
4230: NOT
4231: AND
4232: IFFALSE 4275
// if IsOk ( Cyrus ) then
4234: LD_EXP 8
4238: PPUSH
4239: CALL_OW 302
4243: IFFALSE 4261
// AddComTurnUnit ( John , Cyrus ) else
4245: LD_EXP 7
4249: PPUSH
4250: LD_EXP 8
4254: PPUSH
4255: CALL_OW 179
4259: GO 4275
// AddComTurnUnit ( John , Bobby ) ;
4261: LD_EXP 7
4265: PPUSH
4266: LD_EXP 9
4270: PPUSH
4271: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4275: LD_EXP 7
4279: PPUSH
4280: CALL_OW 302
4284: PUSH
4285: LD_EXP 102
4289: NOT
4290: AND
4291: IFFALSE 4305
// Say ( John , D1a-JMM-1 ) ;
4293: LD_EXP 7
4297: PPUSH
4298: LD_STRING D1a-JMM-1
4300: PPUSH
4301: CALL_OW 88
// Un = alive [ Rand ( 1 , alive ) ] ;
4305: LD_ADDR_VAR 0 3
4309: PUSH
4310: LD_VAR 0 2
4314: PUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_VAR 0 2
4322: PPUSH
4323: CALL_OW 12
4327: ARRAY
4328: ST_TO_ADDR
// if not ( Skip ) then
4329: LD_EXP 102
4333: NOT
4334: IFFALSE 4371
// if ( Un = Bobby ) and IsOk ( Bobby ) then
4336: LD_VAR 0 3
4340: PUSH
4341: LD_EXP 9
4345: EQUAL
4346: PUSH
4347: LD_EXP 9
4351: PPUSH
4352: CALL_OW 302
4356: AND
4357: IFFALSE 4371
// Say ( Bobby , D1a-Bobby-2 ) ;
4359: LD_EXP 9
4363: PPUSH
4364: LD_STRING D1a-Bobby-2
4366: PPUSH
4367: CALL_OW 88
// if not ( Skip ) then
4371: LD_EXP 102
4375: NOT
4376: IFFALSE 4413
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
4378: LD_VAR 0 3
4382: PUSH
4383: LD_EXP 8
4387: EQUAL
4388: PUSH
4389: LD_EXP 8
4393: PPUSH
4394: CALL_OW 302
4398: AND
4399: IFFALSE 4413
// Say ( Cyrus , D1a-Cyrus-2 ) ;
4401: LD_EXP 8
4405: PPUSH
4406: LD_STRING D1a-Cyrus-2
4408: PPUSH
4409: CALL_OW 88
// CenterOnUnits ( [ John , Lisa ] ) ;
4413: LD_EXP 7
4417: PUSH
4418: LD_EXP 12
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 85
// if IsOk ( Bobby ) and not ( Skip ) then
4431: LD_EXP 9
4435: PPUSH
4436: CALL_OW 302
4440: PUSH
4441: LD_EXP 102
4445: NOT
4446: AND
4447: IFFALSE 4463
// AddComTurnUnit ( Bobby , John ) ;
4449: LD_EXP 9
4453: PPUSH
4454: LD_EXP 7
4458: PPUSH
4459: CALL_OW 179
// if IsOk ( Bobby ) and not ( Skip ) then
4463: LD_EXP 9
4467: PPUSH
4468: CALL_OW 302
4472: PUSH
4473: LD_EXP 102
4477: NOT
4478: AND
4479: IFFALSE 4496
// AddComMoveXY ( Bobby , 42 , 69 ) ;
4481: LD_EXP 9
4485: PPUSH
4486: LD_INT 42
4488: PPUSH
4489: LD_INT 69
4491: PPUSH
4492: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
4496: LD_EXP 9
4500: PPUSH
4501: CALL_OW 302
4505: PUSH
4506: LD_EXP 102
4510: NOT
4511: AND
4512: IFFALSE 4526
// AddComWait ( Bobby , 0 0$0.3 ) ;
4514: LD_EXP 9
4518: PPUSH
4519: LD_INT 10
4521: PPUSH
4522: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4526: LD_EXP 8
4530: PPUSH
4531: CALL_OW 302
4535: PUSH
4536: LD_EXP 102
4540: NOT
4541: AND
4542: IFFALSE 4556
// AddComWait ( Cyrus , 0 0$2 ) ;
4544: LD_EXP 8
4548: PPUSH
4549: LD_INT 70
4551: PPUSH
4552: CALL_OW 202
// if IsOk ( Cyrus ) and not ( Skip ) then
4556: LD_EXP 8
4560: PPUSH
4561: CALL_OW 302
4565: PUSH
4566: LD_EXP 102
4570: NOT
4571: AND
4572: IFFALSE 4589
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
4574: LD_EXP 8
4578: PPUSH
4579: LD_INT 37
4581: PPUSH
4582: LD_INT 66
4584: PPUSH
4585: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
4589: LD_EXP 8
4593: PPUSH
4594: CALL_OW 302
4598: PUSH
4599: LD_EXP 102
4603: NOT
4604: AND
4605: IFFALSE 4621
// AddComTurnUnit ( Cyrus , John ) ;
4607: LD_EXP 8
4611: PPUSH
4612: LD_EXP 7
4616: PPUSH
4617: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4621: LD_EXP 7
4625: PPUSH
4626: CALL_OW 302
4630: PUSH
4631: LD_EXP 102
4635: NOT
4636: AND
4637: IFFALSE 4651
// AddComWait ( John , 0 0$3 ) ;
4639: LD_EXP 7
4643: PPUSH
4644: LD_INT 105
4646: PPUSH
4647: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4651: LD_EXP 7
4655: PPUSH
4656: CALL_OW 302
4660: PUSH
4661: LD_EXP 102
4665: NOT
4666: AND
4667: IFFALSE 4683
// AddComTurnUnit ( John , Lisa ) ;
4669: LD_EXP 7
4673: PPUSH
4674: LD_EXP 12
4678: PPUSH
4679: CALL_OW 179
// if IsOk ( John ) and not ( Skip ) then
4683: LD_EXP 7
4687: PPUSH
4688: CALL_OW 302
4692: PUSH
4693: LD_EXP 102
4697: NOT
4698: AND
4699: IFFALSE 4713
// AddComWait ( John , 0 0$1 ) ;
4701: LD_EXP 7
4705: PPUSH
4706: LD_INT 35
4708: PPUSH
4709: CALL_OW 202
// if IsOk ( John ) and not ( Skip ) then
4713: LD_EXP 7
4717: PPUSH
4718: CALL_OW 302
4722: PUSH
4723: LD_EXP 102
4727: NOT
4728: AND
4729: IFFALSE 4740
// AddComHold ( John ) ;
4731: LD_EXP 7
4735: PPUSH
4736: CALL_OW 200
// if IsOk ( John ) and not ( Skip ) then
4740: LD_EXP 7
4744: PPUSH
4745: CALL_OW 302
4749: PUSH
4750: LD_EXP 102
4754: NOT
4755: AND
4756: IFFALSE 4770
// Say ( John , D1a-JMM-2 ) ;
4758: LD_EXP 7
4762: PPUSH
4763: LD_STRING D1a-JMM-2
4765: PPUSH
4766: CALL_OW 88
// if IsOk ( John ) and not ( Skip ) then
4770: LD_EXP 7
4774: PPUSH
4775: CALL_OW 302
4779: PUSH
4780: LD_EXP 102
4784: NOT
4785: AND
4786: IFFALSE 4800
// ComWait ( John , 0 0$0.5 ) ;
4788: LD_EXP 7
4792: PPUSH
4793: LD_INT 18
4795: PPUSH
4796: CALL_OW 142
// if IsOk ( John ) and not ( Skip ) then
4800: LD_EXP 7
4804: PPUSH
4805: CALL_OW 302
4809: PUSH
4810: LD_EXP 102
4814: NOT
4815: AND
4816: IFFALSE 4832
// AddComTurnUnit ( John , Lisa ) ;
4818: LD_EXP 7
4822: PPUSH
4823: LD_EXP 12
4827: PPUSH
4828: CALL_OW 179
// if not ( IsAt ( John , 36 , 63 ) ) then
4832: LD_EXP 7
4836: PPUSH
4837: LD_INT 36
4839: PPUSH
4840: LD_INT 63
4842: PPUSH
4843: CALL_OW 307
4847: NOT
4848: IFFALSE 4879
// begin ComMoveXY ( John , 36 , 63 ) ;
4850: LD_EXP 7
4854: PPUSH
4855: LD_INT 36
4857: PPUSH
4858: LD_INT 63
4860: PPUSH
4861: CALL_OW 111
// AddComTurnUnit ( John , Lisa ) ;
4865: LD_EXP 7
4869: PPUSH
4870: LD_EXP 12
4874: PPUSH
4875: CALL_OW 179
// end ; if IsOk ( Bobby ) and not ( Skip ) then
4879: LD_EXP 9
4883: PPUSH
4884: CALL_OW 302
4888: PUSH
4889: LD_EXP 102
4893: NOT
4894: AND
4895: IFFALSE 4909
// ComWait ( Bobby , 0 0$1 ) ;
4897: LD_EXP 9
4901: PPUSH
4902: LD_INT 35
4904: PPUSH
4905: CALL_OW 142
// if IsOk ( Bobby ) and not ( Skip ) then
4909: LD_EXP 9
4913: PPUSH
4914: CALL_OW 302
4918: PUSH
4919: LD_EXP 102
4923: NOT
4924: AND
4925: IFFALSE 4941
// AddComTurnUnit ( Bobby , Lisa ) ;
4927: LD_EXP 9
4931: PPUSH
4932: LD_EXP 12
4936: PPUSH
4937: CALL_OW 179
// if IsOk ( Bobby ) and not ( IsAt ( Bobby , 36 , 61 ) ) then
4941: LD_EXP 9
4945: PPUSH
4946: CALL_OW 302
4950: PUSH
4951: LD_EXP 9
4955: PPUSH
4956: LD_INT 36
4958: PPUSH
4959: LD_INT 61
4961: PPUSH
4962: CALL_OW 307
4966: NOT
4967: AND
4968: IFFALSE 4985
// AddComMoveXY ( Bobby , 36 , 61 ) ;
4970: LD_EXP 9
4974: PPUSH
4975: LD_INT 36
4977: PPUSH
4978: LD_INT 61
4980: PPUSH
4981: CALL_OW 171
// if IsOk ( Bobby ) and not ( Skip ) then
4985: LD_EXP 9
4989: PPUSH
4990: CALL_OW 302
4994: PUSH
4995: LD_EXP 102
4999: NOT
5000: AND
5001: IFFALSE 5015
// AddComWait ( Bobby , 0 0$0.5 ) ;
5003: LD_EXP 9
5007: PPUSH
5008: LD_INT 18
5010: PPUSH
5011: CALL_OW 202
// if IsOk ( Bobby ) and not ( Skip ) then
5015: LD_EXP 9
5019: PPUSH
5020: CALL_OW 302
5024: PUSH
5025: LD_EXP 102
5029: NOT
5030: AND
5031: IFFALSE 5047
// AddComTurnUnit ( Bobby , Lisa ) ;
5033: LD_EXP 9
5037: PPUSH
5038: LD_EXP 12
5042: PPUSH
5043: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
5047: LD_EXP 8
5051: PPUSH
5052: CALL_OW 302
5056: PUSH
5057: LD_EXP 102
5061: NOT
5062: AND
5063: IFFALSE 5077
// ComWait ( Cyrus , 0 0$1 ) ;
5065: LD_EXP 8
5069: PPUSH
5070: LD_INT 35
5072: PPUSH
5073: CALL_OW 142
// if IsOk ( Cyrus ) and not ( Skip ) then
5077: LD_EXP 8
5081: PPUSH
5082: CALL_OW 302
5086: PUSH
5087: LD_EXP 102
5091: NOT
5092: AND
5093: IFFALSE 5109
// AddComTurnUnit ( Cyrus , Lisa ) ;
5095: LD_EXP 8
5099: PPUSH
5100: LD_EXP 12
5104: PPUSH
5105: CALL_OW 179
// if IsOk ( Cyrus ) and not ( Skip ) then
5109: LD_EXP 8
5113: PPUSH
5114: CALL_OW 302
5118: PUSH
5119: LD_EXP 102
5123: NOT
5124: AND
5125: IFFALSE 5139
// AddComWait ( Cyrus , 0 0$1 ) ;
5127: LD_EXP 8
5131: PPUSH
5132: LD_INT 35
5134: PPUSH
5135: CALL_OW 202
// if IsOk ( Cyrus ) and not ( IsAt ( Cyrus , 35 , 63 ) ) then
5139: LD_EXP 8
5143: PPUSH
5144: CALL_OW 302
5148: PUSH
5149: LD_EXP 8
5153: PPUSH
5154: LD_INT 35
5156: PPUSH
5157: LD_INT 63
5159: PPUSH
5160: CALL_OW 307
5164: NOT
5165: AND
5166: IFFALSE 5183
// AddComMoveXY ( Cyrus , 35 , 63 ) ;
5168: LD_EXP 8
5172: PPUSH
5173: LD_INT 35
5175: PPUSH
5176: LD_INT 63
5178: PPUSH
5179: CALL_OW 171
// if IsOk ( Cyrus ) and not ( Skip ) then
5183: LD_EXP 8
5187: PPUSH
5188: CALL_OW 302
5192: PUSH
5193: LD_EXP 102
5197: NOT
5198: AND
5199: IFFALSE 5215
// AddComTurnUnit ( Cyrus , Lisa ) ;
5201: LD_EXP 8
5205: PPUSH
5206: LD_EXP 12
5210: PPUSH
5211: CALL_OW 179
// if IsOk ( Lisa ) and not ( Skip ) then
5215: LD_EXP 12
5219: PPUSH
5220: CALL_OW 302
5224: PUSH
5225: LD_EXP 102
5229: NOT
5230: AND
5231: IFFALSE 5242
// CenterOnUnits ( Lisa ) ;
5233: LD_EXP 12
5237: PPUSH
5238: CALL_OW 85
// if IsOk ( Lisa ) and not ( Skip ) then
5242: LD_EXP 12
5246: PPUSH
5247: CALL_OW 302
5251: PUSH
5252: LD_EXP 102
5256: NOT
5257: AND
5258: IFFALSE 5272
// ComWait ( Lisa , 0 0$2 ) ;
5260: LD_EXP 12
5264: PPUSH
5265: LD_INT 70
5267: PPUSH
5268: CALL_OW 142
// AddComWalk ( Lisa ) ;
5272: LD_EXP 12
5276: PPUSH
5277: CALL_OW 198
// AddComMoveXY ( Lisa , 33 , 59 ) ;
5281: LD_EXP 12
5285: PPUSH
5286: LD_INT 33
5288: PPUSH
5289: LD_INT 59
5291: PPUSH
5292: CALL_OW 171
// AddComTurnUnit ( Lisa , John ) ;
5296: LD_EXP 12
5300: PPUSH
5301: LD_EXP 7
5305: PPUSH
5306: CALL_OW 179
// if not ( Skip ) then
5310: LD_EXP 102
5314: NOT
5315: IFFALSE 5329
// ComWait ( AmME1 , 0 0$3 ) ;
5317: LD_EXP 13
5321: PPUSH
5322: LD_INT 105
5324: PPUSH
5325: CALL_OW 142
// AddComWalk ( AmME1 ) ;
5329: LD_EXP 13
5333: PPUSH
5334: CALL_OW 198
// AddComMoveXY ( AmME1 , 31 , 58 ) ;
5338: LD_EXP 13
5342: PPUSH
5343: LD_INT 31
5345: PPUSH
5346: LD_INT 58
5348: PPUSH
5349: CALL_OW 171
// AddComTurnUnit ( AmME1 , John ) ;
5353: LD_EXP 13
5357: PPUSH
5358: LD_EXP 7
5362: PPUSH
5363: CALL_OW 179
// if not ( Skip ) then
5367: LD_EXP 102
5371: NOT
5372: IFFALSE 5386
// ComWait ( AmFE2 , 0 0$3 ) ;
5374: LD_EXP 14
5378: PPUSH
5379: LD_INT 105
5381: PPUSH
5382: CALL_OW 142
// AddComWalk ( AmFE2 ) ;
5386: LD_EXP 14
5390: PPUSH
5391: CALL_OW 198
// AddComMoveXY ( AmFE2 , 33 , 56 ) ;
5395: LD_EXP 14
5399: PPUSH
5400: LD_INT 33
5402: PPUSH
5403: LD_INT 56
5405: PPUSH
5406: CALL_OW 171
// AddComTurnUnit ( AmFE2 , John ) ;
5410: LD_EXP 14
5414: PPUSH
5415: LD_EXP 7
5419: PPUSH
5420: CALL_OW 179
// if Nick then
5424: LD_EXP 11
5428: IFFALSE 5487
// begin if not ( Skip ) then
5430: LD_EXP 102
5434: NOT
5435: IFFALSE 5449
// ComWait ( Nick , 0 0$2 ) ;
5437: LD_EXP 11
5441: PPUSH
5442: LD_INT 70
5444: PPUSH
5445: CALL_OW 142
// AddComWalk ( Nick ) ;
5449: LD_EXP 11
5453: PPUSH
5454: CALL_OW 198
// AddComMoveXY ( Nick , 34 , 57 ) ;
5458: LD_EXP 11
5462: PPUSH
5463: LD_INT 34
5465: PPUSH
5466: LD_INT 57
5468: PPUSH
5469: CALL_OW 171
// AddComTurnUnit ( Nick , John ) ;
5473: LD_EXP 11
5477: PPUSH
5478: LD_EXP 7
5482: PPUSH
5483: CALL_OW 179
// end ; Say ( Lisa , D1a-Lisa-2 ) ;
5487: LD_EXP 12
5491: PPUSH
5492: LD_STRING D1a-Lisa-2
5494: PPUSH
5495: CALL_OW 88
// end else
5499: GO 6228
// begin ComMoveXY ( John , 49 , 66 ) ;
5501: LD_EXP 7
5505: PPUSH
5506: LD_INT 49
5508: PPUSH
5509: LD_INT 66
5511: PPUSH
5512: CALL_OW 111
// AddComWait ( John , 0 0$0.5 ) ;
5516: LD_EXP 7
5520: PPUSH
5521: LD_INT 18
5523: PPUSH
5524: CALL_OW 202
// if not ( Skip ) then
5528: LD_EXP 102
5532: NOT
5533: IFFALSE 5542
// Wait ( 0 0$3 ) ;
5535: LD_INT 105
5537: PPUSH
5538: CALL_OW 67
// if not ( Skip ) then
5542: LD_EXP 102
5546: NOT
5547: IFFALSE 5561
// Say ( John , D1b-JMM-1 ) ;
5549: LD_EXP 7
5553: PPUSH
5554: LD_STRING D1b-JMM-1
5556: PPUSH
5557: CALL_OW 88
// if not ( Skip ) then
5561: LD_EXP 102
5565: NOT
5566: IFFALSE 5583
// AddComTurnXY ( John , 54 , 71 ) ;
5568: LD_EXP 7
5572: PPUSH
5573: LD_INT 54
5575: PPUSH
5576: LD_INT 71
5578: PPUSH
5579: CALL_OW 178
// if not ( Skip ) then
5583: LD_EXP 102
5587: NOT
5588: IFFALSE 5602
// AddComWait ( John , 0 0$0.7 ) ;
5590: LD_EXP 7
5594: PPUSH
5595: LD_INT 24
5597: PPUSH
5598: CALL_OW 202
// if not ( Skip ) then
5602: LD_EXP 102
5606: NOT
5607: IFFALSE 5624
// AddComTurnXY ( John , 55 , 63 ) ;
5609: LD_EXP 7
5613: PPUSH
5614: LD_INT 55
5616: PPUSH
5617: LD_INT 63
5619: PPUSH
5620: CALL_OW 178
// if not ( Skip ) then
5624: LD_EXP 102
5628: NOT
5629: IFFALSE 5643
// AddComWait ( John , 0 0$0.7 ) ;
5631: LD_EXP 7
5635: PPUSH
5636: LD_INT 24
5638: PPUSH
5639: CALL_OW 202
// if not ( Skip ) then
5643: LD_EXP 102
5647: NOT
5648: IFFALSE 5665
// AddComMoveXY ( John , 45 , 62 ) ;
5650: LD_EXP 7
5654: PPUSH
5655: LD_INT 45
5657: PPUSH
5658: LD_INT 62
5660: PPUSH
5661: CALL_OW 171
// if not ( Skip ) then
5665: LD_EXP 102
5669: NOT
5670: IFFALSE 5687
// AddComTurnXY ( John , 52 , 60 ) ;
5672: LD_EXP 7
5676: PPUSH
5677: LD_INT 52
5679: PPUSH
5680: LD_INT 60
5682: PPUSH
5683: CALL_OW 178
// if not ( Skip ) then
5687: LD_EXP 102
5691: NOT
5692: IFFALSE 5706
// AddComWait ( John , 0 0$1 ) ;
5694: LD_EXP 7
5698: PPUSH
5699: LD_INT 35
5701: PPUSH
5702: CALL_OW 202
// if not ( Skip ) then
5706: LD_EXP 102
5710: NOT
5711: IFFALSE 5728
// AddComTurnXY ( John , 37 , 48 ) ;
5713: LD_EXP 7
5717: PPUSH
5718: LD_INT 37
5720: PPUSH
5721: LD_INT 48
5723: PPUSH
5724: CALL_OW 178
// if not ( Skip ) then
5728: LD_EXP 102
5732: NOT
5733: IFFALSE 5747
// AddComWait ( John , 0 0$0.5 ) ;
5735: LD_EXP 7
5739: PPUSH
5740: LD_INT 18
5742: PPUSH
5743: CALL_OW 202
// if not ( Skip ) then
5747: LD_EXP 102
5751: NOT
5752: IFFALSE 5769
// AddComTurnXY ( John , 36 , 60 ) ;
5754: LD_EXP 7
5758: PPUSH
5759: LD_INT 36
5761: PPUSH
5762: LD_INT 60
5764: PPUSH
5765: CALL_OW 178
// if not ( Skip ) then
5769: LD_EXP 102
5773: NOT
5774: IFFALSE 5788
// AddComWait ( John , 0 0$1 ) ;
5776: LD_EXP 7
5780: PPUSH
5781: LD_INT 35
5783: PPUSH
5784: CALL_OW 202
// if not ( Skip ) then
5788: LD_EXP 102
5792: NOT
5793: IFFALSE 5810
// AddComMoveXY ( John , 41 , 65 ) ;
5795: LD_EXP 7
5799: PPUSH
5800: LD_INT 41
5802: PPUSH
5803: LD_INT 65
5805: PPUSH
5806: CALL_OW 171
// AddComMoveXY ( John , 36 , 61 ) ;
5810: LD_EXP 7
5814: PPUSH
5815: LD_INT 36
5817: PPUSH
5818: LD_INT 61
5820: PPUSH
5821: CALL_OW 171
// if not ( Skip ) then
5825: LD_EXP 102
5829: NOT
5830: IFFALSE 5847
// AddComTurnXY ( John , 29 , 54 ) ;
5832: LD_EXP 7
5836: PPUSH
5837: LD_INT 29
5839: PPUSH
5840: LD_INT 54
5842: PPUSH
5843: CALL_OW 178
// while not ( GetDistUnitXY ( John , 36 , 61 ) < 2 ) do
5847: LD_EXP 7
5851: PPUSH
5852: LD_INT 36
5854: PPUSH
5855: LD_INT 61
5857: PPUSH
5858: CALL_OW 297
5862: PUSH
5863: LD_INT 2
5865: LESS
5866: NOT
5867: IFFALSE 5878
// Wait ( 0 0$0.2 ) ;
5869: LD_INT 7
5871: PPUSH
5872: CALL_OW 67
5876: GO 5847
// if not ( Skip ) then
5878: LD_EXP 102
5882: NOT
5883: IFFALSE 5894
// AddComCrawl ( John ) ;
5885: LD_EXP 7
5889: PPUSH
5890: CALL_OW 197
// CenterOnXY ( GetX ( Lisa ) - 1 , GetY ( Lisa ) - 3 ) ;
5894: LD_EXP 12
5898: PPUSH
5899: CALL_OW 250
5903: PUSH
5904: LD_INT 1
5906: MINUS
5907: PPUSH
5908: LD_EXP 12
5912: PPUSH
5913: CALL_OW 251
5917: PUSH
5918: LD_INT 3
5920: MINUS
5921: PPUSH
5922: CALL_OW 84
// Say ( John , D1b-JMM-1a ) ;
5926: LD_EXP 7
5930: PPUSH
5931: LD_STRING D1b-JMM-1a
5933: PPUSH
5934: CALL_OW 88
// if not ( Skip ) then
5938: LD_EXP 102
5942: NOT
5943: IFFALSE 5957
// ComWait ( John , 0 0$3 ) ;
5945: LD_EXP 7
5949: PPUSH
5950: LD_INT 105
5952: PPUSH
5953: CALL_OW 142
// AddComWalk ( John ) ;
5957: LD_EXP 7
5961: PPUSH
5962: CALL_OW 198
// AddComTurnUnit ( John , Lisa ) ;
5966: LD_EXP 7
5970: PPUSH
5971: LD_EXP 12
5975: PPUSH
5976: CALL_OW 179
// if not ( Skip ) then
5980: LD_EXP 102
5984: NOT
5985: IFFALSE 5999
// ComWait ( Lisa , 0 0$0.5 ) ;
5987: LD_EXP 12
5991: PPUSH
5992: LD_INT 18
5994: PPUSH
5995: CALL_OW 142
// AddComWalk ( Lisa ) ;
5999: LD_EXP 12
6003: PPUSH
6004: CALL_OW 198
// AddComMoveXY ( Lisa , 33 , 59 ) ;
6008: LD_EXP 12
6012: PPUSH
6013: LD_INT 33
6015: PPUSH
6016: LD_INT 59
6018: PPUSH
6019: CALL_OW 171
// AddComTurnUnit ( Lisa , John ) ;
6023: LD_EXP 12
6027: PPUSH
6028: LD_EXP 7
6032: PPUSH
6033: CALL_OW 179
// if not ( Skip ) then
6037: LD_EXP 102
6041: NOT
6042: IFFALSE 6056
// ComWait ( AmME1 , 0 0$1 ) ;
6044: LD_EXP 13
6048: PPUSH
6049: LD_INT 35
6051: PPUSH
6052: CALL_OW 142
// AddComWalk ( AmME1 ) ;
6056: LD_EXP 13
6060: PPUSH
6061: CALL_OW 198
// AddComMoveXY ( AmME1 , 31 , 58 ) ;
6065: LD_EXP 13
6069: PPUSH
6070: LD_INT 31
6072: PPUSH
6073: LD_INT 58
6075: PPUSH
6076: CALL_OW 171
// AddComTurnUnit ( AmME1 , John ) ;
6080: LD_EXP 13
6084: PPUSH
6085: LD_EXP 7
6089: PPUSH
6090: CALL_OW 179
// if not ( Skip ) then
6094: LD_EXP 102
6098: NOT
6099: IFFALSE 6113
// ComWait ( AmFE2 , 0 0$1 ) ;
6101: LD_EXP 14
6105: PPUSH
6106: LD_INT 35
6108: PPUSH
6109: CALL_OW 142
// AddComWalk ( AmFE2 ) ;
6113: LD_EXP 14
6117: PPUSH
6118: CALL_OW 198
// AddComMoveXY ( AmFE2 , 33 , 56 ) ;
6122: LD_EXP 14
6126: PPUSH
6127: LD_INT 33
6129: PPUSH
6130: LD_INT 56
6132: PPUSH
6133: CALL_OW 171
// AddComTurnUnit ( AmFE2 , John ) ;
6137: LD_EXP 14
6141: PPUSH
6142: LD_EXP 7
6146: PPUSH
6147: CALL_OW 179
// if Nick then
6151: LD_EXP 11
6155: IFFALSE 6195
// begin AddComWalk ( Nick ) ;
6157: LD_EXP 11
6161: PPUSH
6162: CALL_OW 198
// AddComMoveXY ( Nick , 34 , 57 ) ;
6166: LD_EXP 11
6170: PPUSH
6171: LD_INT 34
6173: PPUSH
6174: LD_INT 57
6176: PPUSH
6177: CALL_OW 171
// AddComTurnUnit ( Nick , John ) ;
6181: LD_EXP 11
6185: PPUSH
6186: LD_EXP 7
6190: PPUSH
6191: CALL_OW 179
// end ; if not ( Skip ) then
6195: LD_EXP 102
6199: NOT
6200: IFFALSE 6209
// Wait ( 0 0$1 ) ;
6202: LD_INT 35
6204: PPUSH
6205: CALL_OW 67
// if not ( Skip ) then
6209: LD_EXP 102
6213: NOT
6214: IFFALSE 6228
// Say ( Lisa , D1b-Lisa-1 ) ;
6216: LD_EXP 12
6220: PPUSH
6221: LD_STRING D1b-Lisa-1
6223: PPUSH
6224: CALL_OW 88
// end ; if not ( Skip ) then
6228: LD_EXP 102
6232: NOT
6233: IFFALSE 6247
// Say ( John , D1-JMM-1 ) ;
6235: LD_EXP 7
6239: PPUSH
6240: LD_STRING D1-JMM-1
6242: PPUSH
6243: CALL_OW 88
// if not ( Skip ) then
6247: LD_EXP 102
6251: NOT
6252: IFFALSE 6266
// Say ( Lisa , D1-Lisa-1 ) ;
6254: LD_EXP 12
6258: PPUSH
6259: LD_STRING D1-Lisa-1
6261: PPUSH
6262: CALL_OW 88
// if not ( Skip ) then
6266: LD_EXP 102
6270: NOT
6271: IFFALSE 6285
// Say ( John , D1-JMM-2 ) ;
6273: LD_EXP 7
6277: PPUSH
6278: LD_STRING D1-JMM-2
6280: PPUSH
6281: CALL_OW 88
// if not ( Skip ) then
6285: LD_EXP 102
6289: NOT
6290: IFFALSE 6304
// SayRadio ( Powell , D1-Pow-2 ) ;
6292: LD_EXP 16
6296: PPUSH
6297: LD_STRING D1-Pow-2
6299: PPUSH
6300: CALL_OW 94
// if not ( Skip ) and IsOk ( Cyrus ) then
6304: LD_EXP 102
6308: NOT
6309: PUSH
6310: LD_EXP 8
6314: PPUSH
6315: CALL_OW 302
6319: AND
6320: IFFALSE 6346
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
6322: LD_EXP 8
6326: PPUSH
6327: LD_STRING D1-Cyrus-2
6329: PPUSH
6330: CALL_OW 88
// Say ( John , D1-JMM-3 ) ;
6334: LD_EXP 7
6338: PPUSH
6339: LD_STRING D1-JMM-3
6341: PPUSH
6342: CALL_OW 88
// end ; if not ( Skip ) then
6346: LD_EXP 102
6350: NOT
6351: IFFALSE 6365
// SayRadio ( Powell , D1-Pow-3 ) ;
6353: LD_EXP 16
6357: PPUSH
6358: LD_STRING D1-Pow-3
6360: PPUSH
6361: CALL_OW 94
// if not ( Skip ) then
6365: LD_EXP 102
6369: NOT
6370: IFFALSE 6384
// Say ( John , D1-JMM-4 ) ;
6372: LD_EXP 7
6376: PPUSH
6377: LD_STRING D1-JMM-4
6379: PPUSH
6380: CALL_OW 88
// if not ( Skip ) then
6384: LD_EXP 102
6388: NOT
6389: IFFALSE 6403
// SayRadio ( Powell , D1-Pow-4 ) ;
6391: LD_EXP 16
6395: PPUSH
6396: LD_STRING D1-Pow-4
6398: PPUSH
6399: CALL_OW 94
// if not ( Skip ) then
6403: LD_EXP 102
6407: NOT
6408: IFFALSE 6422
// SayRadio ( Powell , D1-Pow-4a ) ;
6410: LD_EXP 16
6414: PPUSH
6415: LD_STRING D1-Pow-4a
6417: PPUSH
6418: CALL_OW 94
// alive = [ ] ;
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: EMPTY
6428: ST_TO_ADDR
// Speaker = [ ] ;
6429: LD_ADDR_EXP 117
6433: PUSH
6434: EMPTY
6435: ST_TO_ADDR
// if IsOk ( Bobby ) then
6436: LD_EXP 9
6440: PPUSH
6441: CALL_OW 302
6445: IFFALSE 6463
// alive = alive ^ Bobby ;
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_VAR 0 2
6456: PUSH
6457: LD_EXP 9
6461: ADD
6462: ST_TO_ADDR
// if IsOk ( Cyrus ) then
6463: LD_EXP 8
6467: PPUSH
6468: CALL_OW 302
6472: IFFALSE 6490
// alive = alive ^ Cyrus ;
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: LD_VAR 0 2
6483: PUSH
6484: LD_EXP 8
6488: ADD
6489: ST_TO_ADDR
// if ( IsOk ( Bobby ) or IsOk ( Cyrus ) ) then
6490: LD_EXP 9
6494: PPUSH
6495: CALL_OW 302
6499: PUSH
6500: LD_EXP 8
6504: PPUSH
6505: CALL_OW 302
6509: OR
6510: IFFALSE 6536
// Un = alive [ Rand ( 1 , alive ) ] ;
6512: LD_ADDR_VAR 0 3
6516: PUSH
6517: LD_VAR 0 2
6521: PUSH
6522: LD_INT 1
6524: PPUSH
6525: LD_VAR 0 2
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: ST_TO_ADDR
// if alive <> 0 then
6536: LD_VAR 0 2
6540: PUSH
6541: LD_INT 0
6543: NONEQUAL
6544: IFFALSE 6649
// begin if not ( Skip ) then
6546: LD_EXP 102
6550: NOT
6551: IFFALSE 6607
// if ( Un = Bobby ) and IsOk ( Bobby ) then
6553: LD_VAR 0 3
6557: PUSH
6558: LD_EXP 9
6562: EQUAL
6563: PUSH
6564: LD_EXP 9
6568: PPUSH
6569: CALL_OW 302
6573: AND
6574: IFFALSE 6607
// begin Say ( Bobby , D1-Bobby-4 ) ;
6576: LD_EXP 9
6580: PPUSH
6581: LD_STRING D1-Bobby-4
6583: PPUSH
6584: CALL_OW 88
// if not ( Skip ) then
6588: LD_EXP 102
6592: NOT
6593: IFFALSE 6607
// Say ( Lisa , D1-Lisa-4 ) ;
6595: LD_EXP 12
6599: PPUSH
6600: LD_STRING D1-Lisa-4
6602: PPUSH
6603: CALL_OW 88
// end ; if not ( Skip ) then
6607: LD_EXP 102
6611: NOT
6612: IFFALSE 6649
// if ( Un = Cyrus ) and IsOk ( Cyrus ) then
6614: LD_VAR 0 3
6618: PUSH
6619: LD_EXP 8
6623: EQUAL
6624: PUSH
6625: LD_EXP 8
6629: PPUSH
6630: CALL_OW 302
6634: AND
6635: IFFALSE 6649
// Say ( Cyrus , D1-Cyrus-4 ) ;
6637: LD_EXP 8
6641: PPUSH
6642: LD_STRING D1-Cyrus-4
6644: PPUSH
6645: CALL_OW 88
// end ; if not ( Skip ) then
6649: LD_EXP 102
6653: NOT
6654: IFFALSE 6668
// Say ( John , D1-JMM-5 ) ;
6656: LD_EXP 7
6660: PPUSH
6661: LD_STRING D1-JMM-5
6663: PPUSH
6664: CALL_OW 88
// sold = FilterUnitsInArea ( Start , [ f_side , americans ] ) ;
6668: LD_ADDR_VAR 0 1
6672: PUSH
6673: LD_INT 8
6675: PPUSH
6676: LD_INT 22
6678: PUSH
6679: LD_EXP 3
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PPUSH
6688: CALL_OW 70
6692: ST_TO_ADDR
// IngameOff ;
6693: CALL_OW 9
// tick = hlp ;
6697: LD_ADDR_OWVAR 1
6701: PUSH
6702: LD_VAR 0 4
6706: ST_TO_ADDR
// Skip = false ;
6707: LD_ADDR_EXP 102
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// ComFree ( sold ) ;
6715: LD_VAR 0 1
6719: PPUSH
6720: CALL_OW 139
// ComFree ( John ) ;
6724: LD_EXP 7
6728: PPUSH
6729: CALL_OW 139
// wait ( 0 0$1 ) ;
6733: LD_INT 35
6735: PPUSH
6736: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
6740: LD_STRING M1
6742: PPUSH
6743: CALL_OW 337
// SaveForQuickRestart ;
6747: CALL_OW 22
// Hint ( Engineers ) ;
6751: LD_STRING Engineers
6753: PPUSH
6754: CALL_OW 339
// Hint ( Groups ) ;
6758: LD_STRING Groups
6760: PPUSH
6761: CALL_OW 339
// SetSide ( [ Lisa , AmME1 , AmFE2 ] , americans ) ;
6765: LD_EXP 12
6769: PUSH
6770: LD_EXP 13
6774: PUSH
6775: LD_EXP 14
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: PPUSH
6785: LD_EXP 3
6789: PPUSH
6790: CALL_OW 235
// if Nick then
6794: LD_EXP 11
6798: IFFALSE 6814
// SetSide ( Nick , americans ) ;
6800: LD_EXP 11
6804: PPUSH
6805: LD_EXP 3
6809: PPUSH
6810: CALL_OW 235
// enable ( Engineers_not_dead ) ;
6814: LD_EXP 83
6818: ENABLE_MARKED
// end ;
6819: PPOPN 4
6821: END
// every 0 0$1 trigger ( SeeArea ( americans , Dead_Am_1 ) > 0 ) do
6822: LD_EXP 3
6826: PPUSH
6827: LD_INT 18
6829: PPUSH
6830: CALL_OW 294
6834: PUSH
6835: LD_INT 0
6837: GREATER
6838: IFFALSE 7184
6840: GO 6842
6842: DISABLE
// begin hc_sex = sex_male ;
6843: LD_ADDR_OWVAR 27
6847: PUSH
6848: LD_INT 1
6850: ST_TO_ADDR
// hc_class = class_soldier ;
6851: LD_ADDR_OWVAR 28
6855: PUSH
6856: LD_INT 1
6858: ST_TO_ADDR
// hc_skills = [ 1 , 2 , 1 , 1 ] ;
6859: LD_ADDR_OWVAR 31
6863: PUSH
6864: LD_INT 1
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: ST_TO_ADDR
// hc_name =  ;
6882: LD_ADDR_OWVAR 26
6886: PUSH
6887: LD_STRING 
6889: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
6890: LD_ADDR_OWVAR 29
6894: PUSH
6895: LD_INT 10
6897: PUSH
6898: LD_INT 10
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: ST_TO_ADDR
// uc_side = americans1 ;
6905: LD_ADDR_OWVAR 20
6909: PUSH
6910: LD_EXP 4
6914: ST_TO_ADDR
// uc_nation = nation_american ;
6915: LD_ADDR_OWVAR 21
6919: PUSH
6920: LD_INT 1
6922: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
6923: LD_INT 0
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: LD_INT 0
6931: PPUSH
6932: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
6936: LD_ADDR_OWVAR 24
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: LD_INT 6
6946: PPUSH
6947: CALL_OW 12
6951: ST_TO_ADDR
// AmD1 = CreateHuman ;
6952: LD_ADDR_EXP 17
6956: PUSH
6957: CALL_OW 44
6961: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
6962: LD_INT 0
6964: PPUSH
6965: LD_INT 1
6967: PPUSH
6968: LD_INT 0
6970: PPUSH
6971: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
6975: LD_ADDR_OWVAR 24
6979: PUSH
6980: LD_INT 1
6982: PPUSH
6983: LD_INT 6
6985: PPUSH
6986: CALL_OW 12
6990: ST_TO_ADDR
// AmD2 = CreateHuman ;
6991: LD_ADDR_EXP 18
6995: PUSH
6996: CALL_OW 44
7000: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
7001: LD_INT 0
7003: PPUSH
7004: LD_INT 1
7006: PPUSH
7007: LD_INT 0
7009: PPUSH
7010: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7014: LD_ADDR_OWVAR 24
7018: PUSH
7019: LD_INT 1
7021: PPUSH
7022: LD_INT 6
7024: PPUSH
7025: CALL_OW 12
7029: ST_TO_ADDR
// AmD3 = CreateHuman ;
7030: LD_ADDR_EXP 19
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PrepareHuman ( 0 , class_soldier , 0 ) ;
7040: LD_INT 0
7042: PPUSH
7043: LD_INT 1
7045: PPUSH
7046: LD_INT 0
7048: PPUSH
7049: CALL_OW 380
// uc_direction = Rand ( 1 , 6 ) ;
7053: LD_ADDR_OWVAR 24
7057: PUSH
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 6
7063: PPUSH
7064: CALL_OW 12
7068: ST_TO_ADDR
// AmD4 = CreateHuman ;
7069: LD_ADDR_EXP 20
7073: PUSH
7074: CALL_OW 44
7078: ST_TO_ADDR
// SetLives ( [ AmD1 , AmD2 , AmD3 , AmD4 ] , 0 ) ;
7079: LD_EXP 17
7083: PUSH
7084: LD_EXP 18
7088: PUSH
7089: LD_EXP 19
7093: PUSH
7094: LD_EXP 20
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PPUSH
7105: LD_INT 0
7107: PPUSH
7108: CALL_OW 234
// PlaceUnitXY ( AmD1 , 27 , 15 , false ) ;
7112: LD_EXP 17
7116: PPUSH
7117: LD_INT 27
7119: PPUSH
7120: LD_INT 15
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 48
// PlaceUnitXY ( AmD2 , 25 , 13 , false ) ;
7130: LD_EXP 18
7134: PPUSH
7135: LD_INT 25
7137: PPUSH
7138: LD_INT 13
7140: PPUSH
7141: LD_INT 0
7143: PPUSH
7144: CALL_OW 48
// PlaceUnitXY ( AmD3 , 29 , 16 , false ) ;
7148: LD_EXP 19
7152: PPUSH
7153: LD_INT 29
7155: PPUSH
7156: LD_INT 16
7158: PPUSH
7159: LD_INT 0
7161: PPUSH
7162: CALL_OW 48
// PlaceUnitXY ( AmD4 , 27 , 14 , false ) ;
7166: LD_EXP 20
7170: PPUSH
7171: LD_INT 27
7173: PPUSH
7174: LD_INT 14
7176: PPUSH
7177: LD_INT 0
7179: PPUSH
7180: CALL_OW 48
// end ;
7184: END
// every 0 0$1 trigger ( SeeXY ( americans , 27 , 15 ) or SeeXY ( americans , 25 , 13 ) or SeeXY ( americans , 29 , 16 ) or SeeXY ( americans , 28 , 14 ) ) do var alive , speaker , Un ;
7185: LD_EXP 3
7189: PPUSH
7190: LD_INT 27
7192: PPUSH
7193: LD_INT 15
7195: PPUSH
7196: CALL_OW 293
7200: PUSH
7201: LD_EXP 3
7205: PPUSH
7206: LD_INT 25
7208: PPUSH
7209: LD_INT 13
7211: PPUSH
7212: CALL_OW 293
7216: OR
7217: PUSH
7218: LD_EXP 3
7222: PPUSH
7223: LD_INT 29
7225: PPUSH
7226: LD_INT 16
7228: PPUSH
7229: CALL_OW 293
7233: OR
7234: PUSH
7235: LD_EXP 3
7239: PPUSH
7240: LD_INT 28
7242: PPUSH
7243: LD_INT 14
7245: PPUSH
7246: CALL_OW 293
7250: OR
7251: IFFALSE 8110
7253: GO 7255
7255: DISABLE
7256: LD_INT 0
7258: PPUSH
7259: PPUSH
7260: PPUSH
// begin InGameOn ;
7261: CALL_OW 8
// CenterOnXY ( 27 , 15 ) ;
7265: LD_INT 27
7267: PPUSH
7268: LD_INT 15
7270: PPUSH
7271: CALL_OW 84
// if IsOk ( John ) then
7275: LD_EXP 7
7279: PPUSH
7280: CALL_OW 302
7284: IFFALSE 7325
// begin ComWalk ( John ) ;
7286: LD_EXP 7
7290: PPUSH
7291: CALL_OW 138
// ComMoveXY ( John , 24 , 14 ) ;
7295: LD_EXP 7
7299: PPUSH
7300: LD_INT 24
7302: PPUSH
7303: LD_INT 14
7305: PPUSH
7306: CALL_OW 111
// AddComTurnXY ( John , 27 , 15 ) ;
7310: LD_EXP 7
7314: PPUSH
7315: LD_INT 27
7317: PPUSH
7318: LD_INT 15
7320: PPUSH
7321: CALL_OW 178
// end ; if IsOk ( Lisa ) then
7325: LD_EXP 12
7329: PPUSH
7330: CALL_OW 302
7334: IFFALSE 7375
// begin ComWalk ( Lisa ) ;
7336: LD_EXP 12
7340: PPUSH
7341: CALL_OW 138
// ComMoveXY ( Lisa , 27 , 13 ) ;
7345: LD_EXP 12
7349: PPUSH
7350: LD_INT 27
7352: PPUSH
7353: LD_INT 13
7355: PPUSH
7356: CALL_OW 111
// AddComTurnXY ( Lisa , 28 , 14 ) ;
7360: LD_EXP 12
7364: PPUSH
7365: LD_INT 28
7367: PPUSH
7368: LD_INT 14
7370: PPUSH
7371: CALL_OW 178
// end ; if IsOk ( Bobby ) then
7375: LD_EXP 9
7379: PPUSH
7380: CALL_OW 302
7384: IFFALSE 7425
// begin ComWalk ( Bobby ) ;
7386: LD_EXP 9
7390: PPUSH
7391: CALL_OW 138
// ComMoveXY ( Bobby , 30 , 18 ) ;
7395: LD_EXP 9
7399: PPUSH
7400: LD_INT 30
7402: PPUSH
7403: LD_INT 18
7405: PPUSH
7406: CALL_OW 111
// AddComTurnXY ( Bobby , 29 , 16 ) ;
7410: LD_EXP 9
7414: PPUSH
7415: LD_INT 29
7417: PPUSH
7418: LD_INT 16
7420: PPUSH
7421: CALL_OW 178
// end ; if IsOk ( Cyrus ) then
7425: LD_EXP 8
7429: PPUSH
7430: CALL_OW 302
7434: IFFALSE 7475
// begin ComWalk ( Cyrus ) ;
7436: LD_EXP 8
7440: PPUSH
7441: CALL_OW 138
// ComMoveXY ( Cyrus , 27 , 16 ) ;
7445: LD_EXP 8
7449: PPUSH
7450: LD_INT 27
7452: PPUSH
7453: LD_INT 16
7455: PPUSH
7456: CALL_OW 111
// AddComTurnXY ( Cyrus , 27 , 15 ) ;
7460: LD_EXP 8
7464: PPUSH
7465: LD_INT 27
7467: PPUSH
7468: LD_INT 15
7470: PPUSH
7471: CALL_OW 178
// end ; if IsOk ( AmME1 ) then
7475: LD_EXP 13
7479: PPUSH
7480: CALL_OW 302
7484: IFFALSE 7525
// begin ComWalk ( AmME1 ) ;
7486: LD_EXP 13
7490: PPUSH
7491: CALL_OW 138
// ComMoveXY ( AmME1 , 27 , 14 ) ;
7495: LD_EXP 13
7499: PPUSH
7500: LD_INT 27
7502: PPUSH
7503: LD_INT 14
7505: PPUSH
7506: CALL_OW 111
// AddComTurnXY ( AmME1 , 28 , 14 ) ;
7510: LD_EXP 13
7514: PPUSH
7515: LD_INT 28
7517: PPUSH
7518: LD_INT 14
7520: PPUSH
7521: CALL_OW 178
// end ; if IsOk ( AmFE2 ) then
7525: LD_EXP 14
7529: PPUSH
7530: CALL_OW 302
7534: IFFALSE 7575
// begin ComWalk ( AmFE2 ) ;
7536: LD_EXP 14
7540: PPUSH
7541: CALL_OW 138
// ComMoveXY ( AmFE2 , 23 , 14 ) ;
7545: LD_EXP 14
7549: PPUSH
7550: LD_INT 23
7552: PPUSH
7553: LD_INT 14
7555: PPUSH
7556: CALL_OW 111
// AddComTurnXY ( AmFE2 , 25 , 13 ) ;
7560: LD_EXP 14
7564: PPUSH
7565: LD_INT 25
7567: PPUSH
7568: LD_INT 13
7570: PPUSH
7571: CALL_OW 178
// end ; if IsOk ( Khatam ) then
7575: LD_EXP 10
7579: PPUSH
7580: CALL_OW 302
7584: IFFALSE 7625
// begin ComWalk ( Khatam ) ;
7586: LD_EXP 10
7590: PPUSH
7591: CALL_OW 138
// ComMoveXY ( Khatam , 25 , 14 ) ;
7595: LD_EXP 10
7599: PPUSH
7600: LD_INT 25
7602: PPUSH
7603: LD_INT 14
7605: PPUSH
7606: CALL_OW 111
// AddComTurnXY ( Khatam , 25 , 13 ) ;
7610: LD_EXP 10
7614: PPUSH
7615: LD_INT 25
7617: PPUSH
7618: LD_INT 13
7620: PPUSH
7621: CALL_OW 178
// end ; if IsOk ( Nick ) then
7625: LD_EXP 11
7629: PPUSH
7630: CALL_OW 302
7634: IFFALSE 7675
// begin ComWalk ( Nick ) ;
7636: LD_EXP 11
7640: PPUSH
7641: CALL_OW 138
// ComMoveXY ( Nick , 24 , 16 ) ;
7645: LD_EXP 11
7649: PPUSH
7650: LD_INT 24
7652: PPUSH
7653: LD_INT 16
7655: PPUSH
7656: CALL_OW 111
// AddComTurnXY ( Nick , 25 , 13 ) ;
7660: LD_EXP 11
7664: PPUSH
7665: LD_INT 25
7667: PPUSH
7668: LD_INT 13
7670: PPUSH
7671: CALL_OW 178
// end ; alive = [ ] ;
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: EMPTY
7681: ST_TO_ADDR
// if IsOk ( Lisa ) then
7682: LD_EXP 12
7686: PPUSH
7687: CALL_OW 302
7691: IFFALSE 7709
// alive = alive ^ Lisa ;
7693: LD_ADDR_VAR 0 1
7697: PUSH
7698: LD_VAR 0 1
7702: PUSH
7703: LD_EXP 12
7707: ADD
7708: ST_TO_ADDR
// if IsOk ( Bobby ) then
7709: LD_EXP 9
7713: PPUSH
7714: CALL_OW 302
7718: IFFALSE 7736
// alive = alive ^ Bobby ;
7720: LD_ADDR_VAR 0 1
7724: PUSH
7725: LD_VAR 0 1
7729: PUSH
7730: LD_EXP 9
7734: ADD
7735: ST_TO_ADDR
// if IsOk ( Cyrus ) then
7736: LD_EXP 8
7740: PPUSH
7741: CALL_OW 302
7745: IFFALSE 7763
// alive = alive ^ Cyrus ;
7747: LD_ADDR_VAR 0 1
7751: PUSH
7752: LD_VAR 0 1
7756: PUSH
7757: LD_EXP 8
7761: ADD
7762: ST_TO_ADDR
// if IsOk ( AmME1 ) then
7763: LD_EXP 13
7767: PPUSH
7768: CALL_OW 302
7772: IFFALSE 7790
// alive = alive ^ AmME1 ;
7774: LD_ADDR_VAR 0 1
7778: PUSH
7779: LD_VAR 0 1
7783: PUSH
7784: LD_EXP 13
7788: ADD
7789: ST_TO_ADDR
// if IsOk ( AmFE2 ) then
7790: LD_EXP 14
7794: PPUSH
7795: CALL_OW 302
7799: IFFALSE 7817
// alive = alive ^ AmFE2 ;
7801: LD_ADDR_VAR 0 1
7805: PUSH
7806: LD_VAR 0 1
7810: PUSH
7811: LD_EXP 14
7815: ADD
7816: ST_TO_ADDR
// speaker = alive [ Rand ( 1 , alive ) ] ;
7817: LD_ADDR_VAR 0 2
7821: PUSH
7822: LD_VAR 0 1
7826: PUSH
7827: LD_INT 1
7829: PPUSH
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 12
7839: ARRAY
7840: ST_TO_ADDR
// case speaker of Lisa :
7841: LD_VAR 0 2
7845: PUSH
7846: LD_EXP 12
7850: DOUBLE
7851: EQUAL
7852: IFTRUE 7856
7854: GO 7871
7856: POP
// Say ( Lisa , DCorpses-Lisa-1 ) ; Bobby :
7857: LD_EXP 12
7861: PPUSH
7862: LD_STRING DCorpses-Lisa-1
7864: PPUSH
7865: CALL_OW 88
7869: GO 7972
7871: LD_EXP 9
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7896
7881: POP
// Say ( Bobby , DCorpses-Bobby-1 ) ; Cyrus :
7882: LD_EXP 9
7886: PPUSH
7887: LD_STRING DCorpses-Bobby-1
7889: PPUSH
7890: CALL_OW 88
7894: GO 7972
7896: LD_EXP 8
7900: DOUBLE
7901: EQUAL
7902: IFTRUE 7906
7904: GO 7921
7906: POP
// Say ( Cyrus , DCorpses-Cyrus-1 ) ; AmME1 :
7907: LD_EXP 8
7911: PPUSH
7912: LD_STRING DCorpses-Cyrus-1
7914: PPUSH
7915: CALL_OW 88
7919: GO 7972
7921: LD_EXP 13
7925: DOUBLE
7926: EQUAL
7927: IFTRUE 7931
7929: GO 7946
7931: POP
// Say ( AmME1 , DCorpses-Sol1-1 ) ; AmFE2 :
7932: LD_EXP 13
7936: PPUSH
7937: LD_STRING DCorpses-Sol1-1
7939: PPUSH
7940: CALL_OW 88
7944: GO 7972
7946: LD_EXP 14
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 7971
7956: POP
// Say ( AmFE2 , DCorpses-FSol1-1 ) ; end ;
7957: LD_EXP 14
7961: PPUSH
7962: LD_STRING DCorpses-FSol1-1
7964: PPUSH
7965: CALL_OW 88
7969: GO 7972
7971: POP
// Say ( John , DCorpses-JMM-1 ) ;
7972: LD_EXP 7
7976: PPUSH
7977: LD_STRING DCorpses-JMM-1
7979: PPUSH
7980: CALL_OW 88
// if IsOk ( Khatam ) then
7984: LD_EXP 10
7988: PPUSH
7989: CALL_OW 302
7993: IFFALSE 8007
// Say ( Khatam , DCorpses-Khat-1 ) ;
7995: LD_EXP 10
7999: PPUSH
8000: LD_STRING DCorpses-Khat-1
8002: PPUSH
8003: CALL_OW 88
// IngameOff ;
8007: CALL_OW 9
// Say ( John , DCorpses-JMM-2 ) ;
8011: LD_EXP 7
8015: PPUSH
8016: LD_STRING DCorpses-JMM-2
8018: PPUSH
8019: CALL_OW 88
// Tested_Americans = [ John , Lisa , Bobby , Cyrus , Khatam , AmME1 , AmFE2 ] ;
8023: LD_ADDR_EXP 113
8027: PUSH
8028: LD_EXP 7
8032: PUSH
8033: LD_EXP 12
8037: PUSH
8038: LD_EXP 9
8042: PUSH
8043: LD_EXP 8
8047: PUSH
8048: LD_EXP 10
8052: PUSH
8053: LD_EXP 13
8057: PUSH
8058: LD_EXP 14
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: ST_TO_ADDR
// for Un in Tested_Americans do
8072: LD_ADDR_VAR 0 3
8076: PUSH
8077: LD_EXP 113
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8108
// Init_Lives = Init_Lives ^ GetLives ( Un ) ;
8085: LD_ADDR_EXP 112
8089: PUSH
8090: LD_EXP 112
8094: PUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: CALL_OW 256
8104: ADD
8105: ST_TO_ADDR
8106: GO 8082
8108: POP
8109: POP
// end ;
8110: PPOPN 3
8112: END
// every 0 0$4 do var all , i , pom ;
8113: GO 8115
8115: DISABLE
8116: LD_INT 0
8118: PPUSH
8119: PPUSH
8120: PPUSH
// begin pom = true ;
8121: LD_ADDR_VAR 0 3
8125: PUSH
8126: LD_INT 1
8128: ST_TO_ADDR
// if GetLives ( [ John , Cyrus , Bobby , Khatam , Lisa , AmME1 , AmFE2 , AmMSo3 , Nick ] ) < Initial_Lives - 1 then
8129: LD_EXP 7
8133: PUSH
8134: LD_EXP 8
8138: PUSH
8139: LD_EXP 9
8143: PUSH
8144: LD_EXP 10
8148: PUSH
8149: LD_EXP 12
8153: PUSH
8154: LD_EXP 13
8158: PUSH
8159: LD_EXP 14
8163: PUSH
8164: LD_EXP 15
8168: PUSH
8169: LD_EXP 11
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: PPUSH
8185: CALL_OW 256
8189: PUSH
8190: LD_EXP 92
8194: PUSH
8195: LD_INT 1
8197: MINUS
8198: LESS
8199: IFFALSE 8231
// begin if holdfreemode then
8201: LD_OWVAR 73
8205: IFFALSE 8216
// Hint ( Hold2 ) else
8207: LD_STRING Hold2
8209: PPUSH
8210: CALL_OW 339
8214: GO 8223
// Hint ( Hold ) ;
8216: LD_STRING Hold
8218: PPUSH
8219: CALL_OW 339
// pom = false ;
8223: LD_ADDR_VAR 0 3
8227: PUSH
8228: LD_INT 0
8230: ST_TO_ADDR
// end ; if pom then
8231: LD_VAR 0 3
8235: IFFALSE 8238
// enable ;
8237: ENABLE
// end ;
8238: PPOPN 3
8240: END
// function Retreat ; var Un , i , Lives_Decreased ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
// i = 1 ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: LD_INT 1
8254: ST_TO_ADDR
// for Un in Tested_Americans do
8255: LD_ADDR_VAR 0 2
8259: PUSH
8260: LD_EXP 113
8264: PUSH
8265: FOR_IN
8266: IFFALSE 8315
// begin if GetLives ( Un ) <> Init_Lives [ i ] then
8268: LD_VAR 0 2
8272: PPUSH
8273: CALL_OW 256
8277: PUSH
8278: LD_EXP 112
8282: PUSH
8283: LD_VAR 0 3
8287: ARRAY
8288: NONEQUAL
8289: IFFALSE 8299
// Lives_Decreased = true ;
8291: LD_ADDR_VAR 0 4
8295: PUSH
8296: LD_INT 1
8298: ST_TO_ADDR
// i = i + 1 ;
8299: LD_ADDR_VAR 0 3
8303: PUSH
8304: LD_VAR 0 3
8308: PUSH
8309: LD_INT 1
8311: PLUS
8312: ST_TO_ADDR
// end ;
8313: GO 8265
8315: POP
8316: POP
// if ( ( See ( americans , Brw1 ) or See ( americans , Brw2 ) or See ( americans , Brw3 ) ) and ( FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_vehicle ] ] ) = 0 ) and Lives_Decreased and not ( IsInArea ( John , hill ) ) ) then
8317: LD_EXP 3
8321: PPUSH
8322: LD_INT 29
8324: PPUSH
8325: CALL_OW 292
8329: PUSH
8330: LD_EXP 3
8334: PPUSH
8335: LD_INT 9
8337: PPUSH
8338: CALL_OW 292
8342: OR
8343: PUSH
8344: LD_EXP 3
8348: PPUSH
8349: LD_INT 30
8351: PPUSH
8352: CALL_OW 292
8356: OR
8357: PUSH
8358: LD_INT 22
8360: PUSH
8361: LD_EXP 3
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: LD_INT 21
8372: PUSH
8373: LD_INT 2
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL_OW 69
8388: PUSH
8389: LD_INT 0
8391: EQUAL
8392: AND
8393: PUSH
8394: LD_VAR 0 4
8398: AND
8399: PUSH
8400: LD_EXP 7
8404: PPUSH
8405: LD_INT 17
8407: PPUSH
8408: CALL_OW 308
8412: NOT
8413: AND
8414: IFFALSE 8426
// result = 1 else
8416: LD_ADDR_VAR 0 1
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
8424: GO 8434
// result = 0 ;
8426: LD_ADDR_VAR 0 1
8430: PUSH
8431: LD_INT 0
8433: ST_TO_ADDR
// end ;
8434: LD_VAR 0 1
8438: RET
// every 0 0$2 trigger Retreat do
8439: CALL 8241 0 0
8443: IFFALSE 8468
8445: GO 8447
8447: DISABLE
// begin Byl_u_zakladny1 = true ;
8448: LD_ADDR_LOC 1
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// Say ( John , DX1-JMM-1 ) ;
8456: LD_EXP 7
8460: PPUSH
8461: LD_STRING DX1-JMM-1
8463: PPUSH
8464: CALL_OW 88
// end ;
8468: END
// every 0 0$1 trigger SeeXY ( americans , 75 , 70 ) or SeeXY ( americans , 77 , 73 ) or SeeXY ( americans , 77 , 69 ) or SeeXY ( americans , 78 , 71 ) do var Uns , Un ;
8469: LD_EXP 3
8473: PPUSH
8474: LD_INT 75
8476: PPUSH
8477: LD_INT 70
8479: PPUSH
8480: CALL_OW 293
8484: PUSH
8485: LD_EXP 3
8489: PPUSH
8490: LD_INT 77
8492: PPUSH
8493: LD_INT 73
8495: PPUSH
8496: CALL_OW 293
8500: OR
8501: PUSH
8502: LD_EXP 3
8506: PPUSH
8507: LD_INT 77
8509: PPUSH
8510: LD_INT 69
8512: PPUSH
8513: CALL_OW 293
8517: OR
8518: PUSH
8519: LD_EXP 3
8523: PPUSH
8524: LD_INT 78
8526: PPUSH
8527: LD_INT 71
8529: PPUSH
8530: CALL_OW 293
8534: OR
8535: IFFALSE 9004
8537: GO 8539
8539: DISABLE
8540: LD_INT 0
8542: PPUSH
8543: PPUSH
// begin PlaceUnitXY ( AmR1 , 75 , 70 , false ) ;
8544: LD_EXP 21
8548: PPUSH
8549: LD_INT 75
8551: PPUSH
8552: LD_INT 70
8554: PPUSH
8555: LD_INT 0
8557: PPUSH
8558: CALL_OW 48
// SetLives ( AmR1 , 500 ) ;
8562: LD_EXP 21
8566: PPUSH
8567: LD_INT 500
8569: PPUSH
8570: CALL_OW 234
// PlaceUnitXY ( AmR2 , 77 , 73 , false ) ;
8574: LD_EXP 22
8578: PPUSH
8579: LD_INT 77
8581: PPUSH
8582: LD_INT 73
8584: PPUSH
8585: LD_INT 0
8587: PPUSH
8588: CALL_OW 48
// SetLives ( AmR2 , 0 ) ;
8592: LD_EXP 22
8596: PPUSH
8597: LD_INT 0
8599: PPUSH
8600: CALL_OW 234
// PlaceUnitXY ( RuR1 , 77 , 69 , false ) ;
8604: LD_EXP 23
8608: PPUSH
8609: LD_INT 77
8611: PPUSH
8612: LD_INT 69
8614: PPUSH
8615: LD_INT 0
8617: PPUSH
8618: CALL_OW 48
// PlaceUnitXY ( RuR2 , 78 , 71 , false ) ;
8622: LD_EXP 24
8626: PPUSH
8627: LD_INT 78
8629: PPUSH
8630: LD_INT 71
8632: PPUSH
8633: LD_INT 0
8635: PPUSH
8636: CALL_OW 48
// ComAttackUnit ( [ RuR1 , RuR2 ] , AmR1 ) ;
8640: LD_EXP 23
8644: PUSH
8645: LD_EXP 24
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: LD_EXP 21
8658: PPUSH
8659: CALL_OW 115
// Uns = FilterAllUnits ( [ [ f_side , americans ] , [ f_distxy , 77 , 71 , 20 ] ] ) diff [ John , Lisa , Khatam ] ;
8663: LD_ADDR_VAR 0 1
8667: PUSH
8668: LD_INT 22
8670: PUSH
8671: LD_EXP 3
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 92
8682: PUSH
8683: LD_INT 77
8685: PUSH
8686: LD_INT 71
8688: PUSH
8689: LD_INT 20
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: PUSH
8707: LD_EXP 7
8711: PUSH
8712: LD_EXP 12
8716: PUSH
8717: LD_EXP 10
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: DIFF
8727: ST_TO_ADDR
// if Uns <> 0 then
8728: LD_VAR 0 1
8732: PUSH
8733: LD_INT 0
8735: NONEQUAL
8736: IFFALSE 8774
// begin Un = Uns [ Rand ( 1 , Uns ) ] ;
8738: LD_ADDR_VAR 0 2
8742: PUSH
8743: LD_VAR 0 1
8747: PUSH
8748: LD_INT 1
8750: PPUSH
8751: LD_VAR 0 1
8755: PPUSH
8756: CALL_OW 12
8760: ARRAY
8761: ST_TO_ADDR
// Say ( Un , DF-Sol1-1 ) ;
8762: LD_VAR 0 2
8766: PPUSH
8767: LD_STRING DF-Sol1-1
8769: PPUSH
8770: CALL_OW 88
// end ; Say ( John , DF-JMM-1 ) ;
8774: LD_EXP 7
8778: PPUSH
8779: LD_STRING DF-JMM-1
8781: PPUSH
8782: CALL_OW 88
// while IsOk ( RuR1 ) or IsOk ( RuR2 ) do
8786: LD_EXP 23
8790: PPUSH
8791: CALL_OW 302
8795: PUSH
8796: LD_EXP 24
8800: PPUSH
8801: CALL_OW 302
8805: OR
8806: IFFALSE 8817
// Wait ( 0 0$1 ) ;
8808: LD_INT 35
8810: PPUSH
8811: CALL_OW 67
8815: GO 8786
// if not ( IsDead ( AmR1 ) ) then
8817: LD_EXP 21
8821: PPUSH
8822: CALL_OW 301
8826: NOT
8827: IFFALSE 8915
// begin SetSide ( AmR1 , americans ) ;
8829: LD_EXP 21
8833: PPUSH
8834: LD_EXP 3
8838: PPUSH
8839: CALL_OW 235
// Uns = FilterAllUnits ( [ [ f_side , americans ] , [ f_class , class_scientistic ] ] ) ;
8843: LD_ADDR_VAR 0 1
8847: PUSH
8848: LD_INT 22
8850: PUSH
8851: LD_EXP 3
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 25
8862: PUSH
8863: LD_INT 4
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PPUSH
8874: CALL_OW 69
8878: ST_TO_ADDR
// if Uns <> 0 then
8879: LD_VAR 0 1
8883: PUSH
8884: LD_INT 0
8886: NONEQUAL
8887: IFFALSE 8903
// Say ( John , DFa-JMM-1 ) else
8889: LD_EXP 7
8893: PPUSH
8894: LD_STRING DFa-JMM-1
8896: PPUSH
8897: CALL_OW 88
8901: GO 8915
// Say ( John , DFa-JMM-1a ) ;
8903: LD_EXP 7
8907: PPUSH
8908: LD_STRING DFa-JMM-1a
8910: PPUSH
8911: CALL_OW 88
// end ; while not ( IsOk ( AmR1 ) or IsDead ( AmR1 ) ) do
8915: LD_EXP 21
8919: PPUSH
8920: CALL_OW 302
8924: PUSH
8925: LD_EXP 21
8929: PPUSH
8930: CALL_OW 301
8934: OR
8935: NOT
8936: IFFALSE 8947
// Wait ( 0 0$1 ) ;
8938: LD_INT 35
8940: PPUSH
8941: CALL_OW 67
8945: GO 8915
// if IsOk ( AmR1 ) then
8947: LD_EXP 21
8951: PPUSH
8952: CALL_OW 302
8956: IFFALSE 9004
// begin Say ( AmR1 , DFb-Sol1-1 ) ;
8958: LD_EXP 21
8962: PPUSH
8963: LD_STRING DFb-Sol1-1
8965: PPUSH
8966: CALL_OW 88
// ComMoveXY ( AmR1 , 77 , 73 ) ;
8970: LD_EXP 21
8974: PPUSH
8975: LD_INT 77
8977: PPUSH
8978: LD_INT 73
8980: PPUSH
8981: CALL_OW 111
// Wait ( 0 0$2 ) ;
8985: LD_INT 70
8987: PPUSH
8988: CALL_OW 67
// Say ( AmR1 , DFb-Sol1-1a ) ;
8992: LD_EXP 21
8996: PPUSH
8997: LD_STRING DFb-Sol1-1a
8999: PPUSH
9000: CALL_OW 88
// end ; end ;
9004: PPOPN 2
9006: END
// every 0 0$2 trigger See ( americans , dep1 ) or See ( americans , dep2 ) do
9007: LD_EXP 3
9011: PPUSH
9012: LD_INT 1
9014: PPUSH
9015: CALL_OW 292
9019: PUSH
9020: LD_EXP 3
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: CALL_OW 292
9032: OR
9033: IFFALSE 9045
9035: GO 9037
9037: DISABLE
// begin Hint ( CapturingBuilding ) ;
9038: LD_STRING CapturingBuilding
9040: PPUSH
9041: CALL_OW 339
// end ;
9045: END
// function see_vehicle ; begin
9046: LD_INT 0
9048: PPUSH
// if ( See ( americans , vehicle1 ) or See ( americans , vehicle2 ) ) then
9049: LD_EXP 3
9053: PPUSH
9054: LD_INT 5
9056: PPUSH
9057: CALL_OW 292
9061: PUSH
9062: LD_EXP 3
9066: PPUSH
9067: LD_INT 4
9069: PPUSH
9070: CALL_OW 292
9074: OR
9075: IFFALSE 9092
// begin result = 1 ;
9077: LD_ADDR_VAR 0 1
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// enable ( vehicles_detected ) ;
9085: LD_EXP 31
9089: ENABLE_MARKED
// end else
9090: GO 9100
// result = 0 ;
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// end ;
9100: LD_VAR 0 1
9104: RET
// function see_vehicle1 ; begin
9105: LD_INT 0
9107: PPUSH
// if ( See ( americans , vehicle1 ) or See ( americans , vehicle2 ) ) then
9108: LD_EXP 3
9112: PPUSH
9113: LD_INT 5
9115: PPUSH
9116: CALL_OW 292
9120: PUSH
9121: LD_EXP 3
9125: PPUSH
9126: LD_INT 4
9128: PPUSH
9129: CALL_OW 292
9133: OR
9134: IFFALSE 9146
// begin result = 1 ;
9136: LD_ADDR_VAR 0 1
9140: PUSH
9141: LD_INT 1
9143: ST_TO_ADDR
// end else
9144: GO 9154
// result = 0 ;
9146: LD_ADDR_VAR 0 1
9150: PUSH
9151: LD_INT 0
9153: ST_TO_ADDR
// end ;
9154: LD_VAR 0 1
9158: RET
// function guardians_are_death ; begin
9159: LD_INT 0
9161: PPUSH
// if not ( IsOk ( RusESo1 ) or IsOk ( RusESo2 ) or IsOK ( RusEM1 ) ) then
9162: LD_INT 13
9164: PPUSH
9165: CALL_OW 302
9169: PUSH
9170: LD_INT 8
9172: PPUSH
9173: CALL_OW 302
9177: OR
9178: PUSH
9179: LD_INT 6
9181: PPUSH
9182: CALL_OW 302
9186: OR
9187: NOT
9188: IFFALSE 9200
// result = 1 else
9190: LD_ADDR_VAR 0 1
9194: PUSH
9195: LD_INT 1
9197: ST_TO_ADDR
9198: GO 9208
// result = 0 ;
9200: LD_ADDR_VAR 0 1
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// end ;
9208: LD_VAR 0 1
9212: RET
// every 0 0$1 trigger ( see_vehicle and not ( JMM_saw_east_guard ) ) marked 21 do
9213: CALL 9046 0 0
9217: PUSH
9218: LD_EXP 95
9222: NOT
9223: AND
9224: IFFALSE 9249
9226: GO 9228
9228: DISABLE
// begin JMM_saw_east_guard = true ;
9229: LD_ADDR_EXP 95
9233: PUSH
9234: LD_INT 1
9236: ST_TO_ADDR
// Say ( John , DX3-JMM-1 ) ;
9237: LD_EXP 7
9241: PPUSH
9242: LD_STRING DX3-JMM-1
9244: PPUSH
9245: CALL_OW 88
// end ;
9249: END
// every 0 0$2 trigger IsOk ( RusEM1 ) and IsDrivenBy ( vehicle1 ) = RusEM1 do
9250: LD_INT 6
9252: PPUSH
9253: CALL_OW 302
9257: PUSH
9258: LD_INT 5
9260: PPUSH
9261: CALL_OW 311
9265: PUSH
9266: LD_INT 6
9268: EQUAL
9269: AND
9270: IFFALSE 9283
9272: GO 9274
9274: DISABLE
// begin sergej_succeeds = 1 ;
9275: LD_ADDR_EXP 78
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// end ;
9283: END
// every 0 0$1 trigger FilterUnitsInArea ( Dohled , [ [ f_see , russians ] , [ f_side , americans ] ] ) > 0 do
9284: LD_INT 9
9286: PPUSH
9287: LD_INT 101
9289: PUSH
9290: LD_EXP 5
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 22
9301: PUSH
9302: LD_EXP 3
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PPUSH
9315: CALL_OW 70
9319: PUSH
9320: LD_INT 0
9322: GREATER
9323: IFFALSE 9441
9325: GO 9327
9327: DISABLE
// begin ComFree ( RusEast ) ;
9328: LD_EXP 108
9332: PPUSH
9333: CALL_OW 139
// disable ( East_guard_seen ) ;
9337: LD_EXP 96
9341: DISABLE_MARKED
// DialogueOn ;
9342: CALL_OW 6
// SayNoFace ( RusESo2 , DX3-Rus1-1 ) ;
9346: LD_INT 8
9348: PPUSH
9349: LD_STRING DX3-Rus1-1
9351: PPUSH
9352: CALL_OW 89
// DialogueOff ;
9356: CALL_OW 7
// if not ( JMM_saw_east_guard ) then
9360: LD_EXP 95
9364: NOT
9365: IFFALSE 9436
// begin JMM_saw_east_guard = true ;
9367: LD_ADDR_EXP 95
9371: PUSH
9372: LD_INT 1
9374: ST_TO_ADDR
// DialogueOn ;
9375: CALL_OW 6
// Say ( John , DX3-JMM-1 ) ;
9379: LD_EXP 7
9383: PPUSH
9384: LD_STRING DX3-JMM-1
9386: PPUSH
9387: CALL_OW 88
// DialogueOff ;
9391: CALL_OW 7
// PlaceSeeing ( 117 , 41 , americans , - 6 ) ;
9395: LD_INT 117
9397: PPUSH
9398: LD_INT 41
9400: PPUSH
9401: LD_EXP 3
9405: PPUSH
9406: LD_INT 6
9408: NEG
9409: PPUSH
9410: CALL_OW 330
// Wait ( 0 0$10 ) ;
9414: LD_INT 350
9416: PPUSH
9417: CALL_OW 67
// RemoveSeeing ( 117 , 41 , americans ) ;
9421: LD_INT 117
9423: PPUSH
9424: LD_INT 41
9426: PPUSH
9427: LD_EXP 3
9431: PPUSH
9432: CALL_OW 331
// end ; enable ( attack ) ;
9436: LD_EXP 41
9440: ENABLE_MARKED
// end ;
9441: END
// every 0 0$5 trigger see_vehicle1 and guardians_are_death marked 6 do
9442: CALL 9105 0 0
9446: PUSH
9447: CALL 9159 0 0
9451: AND
9452: IFFALSE 9531
9454: GO 9456
9456: DISABLE
// begin DialogueOn ;
9457: CALL_OW 6
// if IsOk ( Bobby ) then
9461: LD_EXP 9
9465: PPUSH
9466: CALL_OW 302
9470: IFFALSE 9486
// Say ( Bobby , DX2-Bobby-1 ) else
9472: LD_EXP 9
9476: PPUSH
9477: LD_STRING DX2-Bobby-1
9479: PPUSH
9480: CALL_OW 88
9484: GO 9498
// Say ( John , DX2-JMM-1 ) ;
9486: LD_EXP 7
9490: PPUSH
9491: LD_STRING DX2-JMM-1
9493: PPUSH
9494: CALL_OW 88
// if ( Byl_u_zakladny1 and IsOk ( Bobby ) ) then
9498: LD_LOC 1
9502: PUSH
9503: LD_EXP 9
9507: PPUSH
9508: CALL_OW 302
9512: AND
9513: IFFALSE 9527
// Say ( John , DX2-JMM-1a ) ;
9515: LD_EXP 7
9519: PPUSH
9520: LD_STRING DX2-JMM-1a
9522: PPUSH
9523: CALL_OW 88
// DialogueOff ;
9527: CALL_OW 7
// end ;
9531: END
// every 0 0$2 trigger see_vehicle1 and guardians_are_death do
9532: CALL 9105 0 0
9536: PUSH
9537: CALL 9159 0 0
9541: AND
9542: IFFALSE 9581
9544: GO 9546
9546: DISABLE
// begin if IsOk ( vehicle1 ) and IsOk ( Vehicle2 ) then
9547: LD_INT 5
9549: PPUSH
9550: CALL_OW 302
9554: PUSH
9555: LD_INT 4
9557: PPUSH
9558: CALL_OW 302
9562: AND
9563: IFFALSE 9574
// Hint ( CapturingVehicles1 ) else
9565: LD_STRING CapturingVehicles1
9567: PPUSH
9568: CALL_OW 339
9572: GO 9581
// Hint ( CapturingVehicles2 ) ;
9574: LD_STRING CapturingVehicles2
9576: PPUSH
9577: CALL_OW 339
// end ;
9581: END
// on VehicleCaptured ( vehnew , vehold , origside , hum ) marked 5 do var InV1 , InV2 ;
9582: LD_INT 0
9584: PPUSH
9585: PPUSH
// begin if ( ( vehold = vehicle1 ) or ( vehold = vehicle2 ) ) and ( hum <> RusEM1 ) and First_Capture then
9586: LD_VAR 0 2
9590: PUSH
9591: LD_INT 5
9593: EQUAL
9594: PUSH
9595: LD_VAR 0 2
9599: PUSH
9600: LD_INT 4
9602: EQUAL
9603: OR
9604: PUSH
9605: LD_VAR 0 4
9609: PUSH
9610: LD_INT 6
9612: NONEQUAL
9613: AND
9614: PUSH
9615: LD_EXP 84
9619: AND
9620: IFFALSE 9867
// begin First_Capture = false ;
9622: LD_ADDR_EXP 84
9626: PUSH
9627: LD_INT 0
9629: ST_TO_ADDR
// disable ( uncanny_vehicles ) ;
9630: LD_EXP 32
9634: DISABLE_MARKED
// DialogueOn ;
9635: CALL_OW 6
// if ( ( hum = John ) and IsOk ( Lisa ) ) then
9639: LD_VAR 0 4
9643: PUSH
9644: LD_EXP 7
9648: EQUAL
9649: PUSH
9650: LD_EXP 12
9654: PPUSH
9655: CALL_OW 302
9659: AND
9660: IFFALSE 9695
// begin Say ( Lisa , DX2b-Lisa-1 ) ;
9662: LD_EXP 12
9666: PPUSH
9667: LD_STRING DX2b-Lisa-1
9669: PPUSH
9670: CALL_OW 88
// Say ( John , DX2b-JMM-1 ) ;
9674: LD_EXP 7
9678: PPUSH
9679: LD_STRING DX2b-JMM-1
9681: PPUSH
9682: CALL_OW 88
// Hint ( ControllingVehicles ) ;
9686: LD_STRING ControllingVehicles
9688: PPUSH
9689: CALL_OW 339
// end else
9693: GO 9845
// begin Say ( John , DX2a-JMM-1 ) ;
9695: LD_EXP 7
9699: PPUSH
9700: LD_STRING DX2a-JMM-1
9702: PPUSH
9703: CALL_OW 88
// if hum = Lisa then
9707: LD_VAR 0 4
9711: PUSH
9712: LD_EXP 12
9716: EQUAL
9717: IFFALSE 9733
// Say ( Lisa , DX2a-Lisa-1 ) else
9719: LD_EXP 12
9723: PPUSH
9724: LD_STRING DX2a-Lisa-1
9726: PPUSH
9727: CALL_OW 88
9731: GO 9826
// if hum = Bobby then
9733: LD_VAR 0 4
9737: PUSH
9738: LD_EXP 9
9742: EQUAL
9743: IFFALSE 9759
// Say ( Bobby , DX2a-Bobby-1 ) else
9745: LD_EXP 9
9749: PPUSH
9750: LD_STRING DX2a-Bobby-1
9752: PPUSH
9753: CALL_OW 88
9757: GO 9826
// if hum = Cyrus then
9759: LD_VAR 0 4
9763: PUSH
9764: LD_EXP 8
9768: EQUAL
9769: IFFALSE 9785
// Say ( Cyrus , DX2a-Cyrus-1 ) else
9771: LD_EXP 8
9775: PPUSH
9776: LD_STRING DX2a-Cyrus-1
9778: PPUSH
9779: CALL_OW 88
9783: GO 9826
// if ( GetSex ( hum ) = Sex_Male ) then
9785: LD_VAR 0 4
9789: PPUSH
9790: CALL_OW 258
9794: PUSH
9795: LD_INT 1
9797: EQUAL
9798: IFFALSE 9814
// Say ( hum , DX2a-Sol1-1 ) else
9800: LD_VAR 0 4
9804: PPUSH
9805: LD_STRING DX2a-Sol1-1
9807: PPUSH
9808: CALL_OW 88
9812: GO 9826
// Say ( hum , DX2a-FSol1-1 ) ;
9814: LD_VAR 0 4
9818: PPUSH
9819: LD_STRING DX2a-FSol1-1
9821: PPUSH
9822: CALL_OW 88
// Say ( John , DX2a-JMM-2 ) ;
9826: LD_EXP 7
9830: PPUSH
9831: LD_STRING DX2a-JMM-2
9833: PPUSH
9834: CALL_OW 88
// Hint ( ControllingVehicles ) ;
9838: LD_STRING ControllingVehicles
9840: PPUSH
9841: CALL_OW 339
// end ; DialogueOff ;
9845: CALL_OW 7
// if sergej_succeeds = 0 then
9849: LD_EXP 78
9853: PUSH
9854: LD_INT 0
9856: EQUAL
9857: IFFALSE 9867
// sergej_succeeds = 2 ;
9859: LD_ADDR_EXP 78
9863: PUSH
9864: LD_INT 2
9866: ST_TO_ADDR
// end ; if ( vehold = vehicle1 ) then
9867: LD_VAR 0 2
9871: PUSH
9872: LD_INT 5
9874: EQUAL
9875: IFFALSE 9887
// vehicle1_new = vehnew ;
9877: LD_ADDR_EXP 97
9881: PUSH
9882: LD_VAR 0 1
9886: ST_TO_ADDR
// if ( vehold = vehicle2 ) then
9887: LD_VAR 0 2
9891: PUSH
9892: LD_INT 4
9894: EQUAL
9895: IFFALSE 9907
// vehicle2_new = vehnew ;
9897: LD_ADDR_EXP 98
9901: PUSH
9902: LD_VAR 0 1
9906: ST_TO_ADDR
// end ;
9907: PPOPN 6
9909: END
// every 0 0$5 trigger ( IsOk ( vehicle1_new ) and not ( IsInArea ( vehicle1_new , Area01 ) ) ) or ( IsOk ( vehicle2_new ) and not ( IsInArea ( vehicle2_new , Area01 ) ) ) do
9910: LD_EXP 97
9914: PPUSH
9915: CALL_OW 302
9919: PUSH
9920: LD_EXP 97
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: CALL_OW 308
9932: NOT
9933: AND
9934: PUSH
9935: LD_EXP 98
9939: PPUSH
9940: CALL_OW 302
9944: PUSH
9945: LD_EXP 98
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 308
9957: NOT
9958: AND
9959: OR
9960: IFFALSE 9972
9962: GO 9964
9964: DISABLE
// begin Hint ( VehicleState ) ;
9965: LD_STRING VehicleState
9967: PPUSH
9968: CALL_OW 339
// end ;
9972: END
// every 0 0$1 trigger GetLives ( RusEM1 ) < 1000 do
9973: LD_INT 6
9975: PPUSH
9976: CALL_OW 256
9980: PUSH
9981: LD_INT 1000
9983: LESS
9984: IFFALSE 10006
9986: GO 9988
9988: DISABLE
// begin if not ( IsBusy ( RusEM1 ) ) then
9989: LD_INT 6
9991: PPUSH
9992: CALL_OW 315
9996: NOT
9997: IFFALSE 10006
// ComFree ( RusEM1 ) ;
9999: LD_INT 6
10001: PPUSH
10002: CALL_OW 139
// end ;
10006: END
// every 0 0$3 trigger FilterUnitsInArea ( Before_River , [ f_side , americans ] ) <> 0 do var Uns , Un ;
10007: LD_INT 24
10009: PPUSH
10010: LD_INT 22
10012: PUSH
10013: LD_EXP 3
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 70
10026: PUSH
10027: LD_INT 0
10029: NONEQUAL
10030: IFFALSE 10107
10032: GO 10034
10034: DISABLE
10035: LD_INT 0
10037: PPUSH
10038: PPUSH
// begin Uns = FilterUnitsInArea ( Before_River , [ [ f_side , americans ] ] ) ;
10039: LD_ADDR_VAR 0 1
10043: PUSH
10044: LD_INT 24
10046: PPUSH
10047: LD_INT 22
10049: PUSH
10050: LD_EXP 3
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: PPUSH
10062: CALL_OW 70
10066: ST_TO_ADDR
// for Un in Uns do
10067: LD_ADDR_VAR 0 2
10071: PUSH
10072: LD_VAR 0 1
10076: PUSH
10077: FOR_IN
10078: IFFALSE 10104
// if IsSelected ( Un ) then
10080: LD_VAR 0 2
10084: PPUSH
10085: CALL_OW 306
10089: IFFALSE 10102
// begin Hint ( Rivers ) ;
10091: LD_STRING Rivers
10093: PPUSH
10094: CALL_OW 339
// exit ;
10098: POP
10099: POP
10100: GO 10107
// end ;
10102: GO 10077
10104: POP
10105: POP
// enable ;
10106: ENABLE
// end ;
10107: PPOPN 2
10109: END
// every 0 0$0.1 marked 10 do
10110: GO 10112
10112: DISABLE
// begin AddComEnterUnit ( RusEM1 , vehicle1 ) ;
10113: LD_INT 6
10115: PPUSH
10116: LD_INT 5
10118: PPUSH
10119: CALL_OW 180
// AddComFree ( RusEM1 ) ;
10123: LD_INT 6
10125: PPUSH
10126: CALL_OW 199
// end ;
10130: END
// function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10131: LD_INT 0
10133: PPUSH
10134: PPUSH
10135: PPUSH
10136: PPUSH
10137: PPUSH
// nearest_dist = 1000 ;
10138: LD_ADDR_VAR 0 4
10142: PUSH
10143: LD_INT 1000
10145: ST_TO_ADDR
// nearest_un = un ;
10146: LD_ADDR_VAR 0 5
10150: PUSH
10151: LD_VAR 0 1
10155: ST_TO_ADDR
// for sold in units do
10156: LD_ADDR_VAR 0 6
10160: PUSH
10161: LD_VAR 0 2
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10223
// begin dist = GetDistUnits ( un , sold ) ;
10169: LD_ADDR_VAR 0 7
10173: PUSH
10174: LD_VAR 0 1
10178: PPUSH
10179: LD_VAR 0 6
10183: PPUSH
10184: CALL_OW 296
10188: ST_TO_ADDR
// if dist < nearest_dist then
10189: LD_VAR 0 7
10193: PUSH
10194: LD_VAR 0 4
10198: LESS
10199: IFFALSE 10221
// begin nearest_un = sold ;
10201: LD_ADDR_VAR 0 5
10205: PUSH
10206: LD_VAR 0 6
10210: ST_TO_ADDR
// nearest_dist = dist ;
10211: LD_ADDR_VAR 0 4
10215: PUSH
10216: LD_VAR 0 7
10220: ST_TO_ADDR
// end ; end ;
10221: GO 10166
10223: POP
10224: POP
// result := nearest_un ;
10225: LD_ADDR_VAR 0 3
10229: PUSH
10230: LD_VAR 0 5
10234: ST_TO_ADDR
// end ;
10235: LD_VAR 0 3
10239: RET
// function FindMostIll ( Uns ) ; var TheMostIll , Un ; begin
10240: LD_INT 0
10242: PPUSH
10243: PPUSH
10244: PPUSH
// TheMostIll = Uns [ 1 ] ;
10245: LD_ADDR_VAR 0 3
10249: PUSH
10250: LD_VAR 0 1
10254: PUSH
10255: LD_INT 1
10257: ARRAY
10258: ST_TO_ADDR
// for Un in Uns do
10259: LD_ADDR_VAR 0 4
10263: PUSH
10264: LD_VAR 0 1
10268: PUSH
10269: FOR_IN
10270: IFFALSE 10306
// if GetLives ( Un ) < GetLives ( TheMostIll ) then
10272: LD_VAR 0 4
10276: PPUSH
10277: CALL_OW 256
10281: PUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: CALL_OW 256
10291: LESS
10292: IFFALSE 10304
// TheMostIll = Un ;
10294: LD_ADDR_VAR 0 3
10298: PUSH
10299: LD_VAR 0 4
10303: ST_TO_ADDR
10304: GO 10269
10306: POP
10307: POP
// result = TheMostIll ;
10308: LD_ADDR_VAR 0 2
10312: PUSH
10313: LD_VAR 0 3
10317: ST_TO_ADDR
// end ;
10318: LD_VAR 0 2
10322: RET
// every 0 0$0.5 trigger SeeXY ( americans , 25 , 32 ) do var Uns , Un , Ill , The_Most_Ill ;
10323: LD_EXP 3
10327: PPUSH
10328: LD_INT 25
10330: PPUSH
10331: LD_INT 32
10333: PPUSH
10334: CALL_OW 293
10338: IFFALSE 10891
10340: GO 10342
10342: DISABLE
10343: LD_INT 0
10345: PPUSH
10346: PPUSH
10347: PPUSH
10348: PPUSH
// begin IngameOn ;
10349: CALL_OW 8
// PlaceUnitXYR ( Khatam , 25 , 31 , 1 , false ) ;
10353: LD_EXP 10
10357: PPUSH
10358: LD_INT 25
10360: PPUSH
10361: LD_INT 31
10363: PPUSH
10364: LD_INT 1
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 50
// CenterOnUnits ( Khatam ) ;
10374: LD_EXP 10
10378: PPUSH
10379: CALL_OW 85
// Uns = FilterAllUnits ( [ [ f_side , americans ] ] ) ;
10383: LD_ADDR_VAR 0 1
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_EXP 3
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: PPUSH
10403: CALL_OW 69
10407: ST_TO_ADDR
// for Un in Uns do
10408: LD_ADDR_VAR 0 2
10412: PUSH
10413: LD_VAR 0 1
10417: PUSH
10418: FOR_IN
10419: IFFALSE 10461
// begin ComWait ( Un , 0 0$1 * Rand ( 5 , 15 ) ) ;
10421: LD_VAR 0 2
10425: PPUSH
10426: LD_INT 35
10428: PUSH
10429: LD_INT 5
10431: PPUSH
10432: LD_INT 15
10434: PPUSH
10435: CALL_OW 12
10439: MUL
10440: PPUSH
10441: CALL_OW 142
// ComTurnUnit ( Un , Khatam ) ;
10445: LD_VAR 0 2
10449: PPUSH
10450: LD_EXP 10
10454: PPUSH
10455: CALL_OW 119
// end ;
10459: GO 10418
10461: POP
10462: POP
// AddComMoveUnit ( Khatam , Nearest ( Khatam , FilterAllUnits ( [ f_side , americans ] ) diff [ Khatam ] ) ) ;
10463: LD_EXP 10
10467: PPUSH
10468: LD_EXP 10
10472: PPUSH
10473: LD_INT 22
10475: PUSH
10476: LD_EXP 3
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PPUSH
10485: CALL_OW 69
10489: PUSH
10490: LD_EXP 10
10494: PUSH
10495: EMPTY
10496: LIST
10497: DIFF
10498: PPUSH
10499: CALL 10131 0 2
10503: PPUSH
10504: CALL_OW 172
// Say ( Khatam , D2a-Khat-1 ) ;
10508: LD_EXP 10
10512: PPUSH
10513: LD_STRING D2a-Khat-1
10515: PPUSH
10516: CALL_OW 88
// if GetDistUnits ( Khatam , John ) < 15 and GetDistUnits ( Khatam , John ) > 5 then
10520: LD_EXP 10
10524: PPUSH
10525: LD_EXP 7
10529: PPUSH
10530: CALL_OW 296
10534: PUSH
10535: LD_INT 15
10537: LESS
10538: PUSH
10539: LD_EXP 10
10543: PPUSH
10544: LD_EXP 7
10548: PPUSH
10549: CALL_OW 296
10553: PUSH
10554: LD_INT 5
10556: GREATER
10557: AND
10558: IFFALSE 10574
// AddComMoveUnit ( Khatam , John ) ;
10560: LD_EXP 10
10564: PPUSH
10565: LD_EXP 7
10569: PPUSH
10570: CALL_OW 172
// Say ( John , D2a-JMM-1 ) ;
10574: LD_EXP 7
10578: PPUSH
10579: LD_STRING D2a-JMM-1
10581: PPUSH
10582: CALL_OW 88
// IngameOff ;
10586: CALL_OW 9
// DialogueOn ;
10590: CALL_OW 6
// interface_hidden = true ;
10594: LD_ADDR_OWVAR 54
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// Say ( Khatam , D2a-Khat-2 ) ;
10602: LD_EXP 10
10606: PPUSH
10607: LD_STRING D2a-Khat-2
10609: PPUSH
10610: CALL_OW 88
// Say ( John , D2a-JMM-2 ) ;
10614: LD_EXP 7
10618: PPUSH
10619: LD_STRING D2a-JMM-2
10621: PPUSH
10622: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
10626: LD_EXP 10
10630: PPUSH
10631: LD_STRING D2a-Khat-3
10633: PPUSH
10634: CALL_OW 88
// Say ( John , D2a-JMM-3 ) ;
10638: LD_EXP 7
10642: PPUSH
10643: LD_STRING D2a-JMM-3
10645: PPUSH
10646: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
10650: LD_EXP 10
10654: PPUSH
10655: LD_STRING D2a-Khat-4
10657: PPUSH
10658: CALL_OW 88
// Say ( John , D2a-JMM-4 ) ;
10662: LD_EXP 7
10666: PPUSH
10667: LD_STRING D2a-JMM-4
10669: PPUSH
10670: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
10674: LD_EXP 10
10678: PPUSH
10679: LD_STRING D2a-Khat-5
10681: PPUSH
10682: CALL_OW 88
// Say ( John , D2a-JMM-5 ) ;
10686: LD_EXP 7
10690: PPUSH
10691: LD_STRING D2a-JMM-5
10693: PPUSH
10694: CALL_OW 88
// interface_hidden = false ;
10698: LD_ADDR_OWVAR 54
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// DialogueOff ;
10706: CALL_OW 7
// ComFree ( Uns ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: CALL_OW 139
// ComFree ( Khatam ) ;
10719: LD_EXP 10
10723: PPUSH
10724: CALL_OW 139
// SetSide ( Khatam , americans ) ;
10728: LD_EXP 10
10732: PPUSH
10733: LD_EXP 3
10737: PPUSH
10738: CALL_OW 235
// Ill = UnitFilter ( [ John , Cyrus , Bobby , Nick , Lisa , AmME1 , AmFE2 , AmMSo3 ] , [ f_ok ] ) ;
10742: LD_ADDR_VAR 0 3
10746: PUSH
10747: LD_EXP 7
10751: PUSH
10752: LD_EXP 8
10756: PUSH
10757: LD_EXP 9
10761: PUSH
10762: LD_EXP 11
10766: PUSH
10767: LD_EXP 12
10771: PUSH
10772: LD_EXP 13
10776: PUSH
10777: LD_EXP 14
10781: PUSH
10782: LD_EXP 15
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PPUSH
10797: LD_INT 50
10799: PUSH
10800: EMPTY
10801: LIST
10802: PPUSH
10803: CALL_OW 72
10807: ST_TO_ADDR
// The_Most_Ill = FindMostIll ( Ill ) ;
10808: LD_ADDR_VAR 0 4
10812: PUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: CALL 10240 0 1
10822: ST_TO_ADDR
// if GetLives ( The_Most_Ill ) < 1000 and IsLive ( The_Most_Ill ) then
10823: LD_VAR 0 4
10827: PPUSH
10828: CALL_OW 256
10832: PUSH
10833: LD_INT 1000
10835: LESS
10836: PUSH
10837: LD_VAR 0 4
10841: PPUSH
10842: CALL_OW 300
10846: AND
10847: IFFALSE 10884
// begin ComHeal ( Khatam , The_Most_Ill ) ;
10849: LD_EXP 10
10853: PPUSH
10854: LD_VAR 0 4
10858: PPUSH
10859: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
10863: LD_EXP 10
10867: PPUSH
10868: LD_STRING D2b-Khat-1
10870: PPUSH
10871: CALL_OW 88
// Hint ( Scientists1 ) ;
10875: LD_STRING Scientists1
10877: PPUSH
10878: CALL_OW 339
// end else
10882: GO 10891
// Hint ( Scientists2 ) ;
10884: LD_STRING Scientists2
10886: PPUSH
10887: CALL_OW 339
// end ;
10891: PPOPN 4
10893: END
// function Set_times ; var Time_to_visit , i ; begin
10894: LD_INT 0
10896: PPUSH
10897: PPUSH
10898: PPUSH
// Time_of_capture = tick ;
10899: LD_ADDR_EXP 30
10903: PUSH
10904: LD_OWVAR 1
10908: ST_TO_ADDR
// i = ( 27 - ( Time_of_capture ) / 1 1$0 ) / ( 2 + Difficulty ) ;
10909: LD_ADDR_VAR 0 3
10913: PUSH
10914: LD_INT 27
10916: PUSH
10917: LD_EXP 30
10921: PUSH
10922: LD_INT 2100
10924: DIVREAL
10925: MINUS
10926: PUSH
10927: LD_INT 2
10929: PUSH
10930: LD_OWVAR 67
10934: PLUS
10935: DIVREAL
10936: ST_TO_ADDR
// if i < 1.5 then
10937: LD_VAR 0 3
10941: PUSH
10942: LD_REAL  1.50000000000000E+0000
10945: LESS
10946: IFFALSE 10957
// i = 1.5 ;
10948: LD_ADDR_VAR 0 3
10952: PUSH
10953: LD_REAL  1.50000000000000E+0000
10956: ST_TO_ADDR
// if i > 4 then
10957: LD_VAR 0 3
10961: PUSH
10962: LD_INT 4
10964: GREATER
10965: IFFALSE 10975
// i = 4 ;
10967: LD_ADDR_VAR 0 3
10971: PUSH
10972: LD_INT 4
10974: ST_TO_ADDR
// Time_to_visit = ( i * 1 1$0 ) div 1 ;
10975: LD_ADDR_VAR 0 2
10979: PUSH
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 2100
10987: MUL
10988: PUSH
10989: LD_INT 1
10991: DIV
10992: ST_TO_ADDR
// Time_of_visit = Time_of_capture + Time_to_visit ;
10993: LD_ADDR_EXP 25
10997: PUSH
10998: LD_EXP 30
11002: PUSH
11003: LD_VAR 0 2
11007: PLUS
11008: ST_TO_ADDR
// Time_of_attack = Time_of_visit + 5 5$30 + ( 3 - Difficulty ) * ( 2 2$00 ) ;
11009: LD_ADDR_EXP 26
11013: PUSH
11014: LD_EXP 25
11018: PUSH
11019: LD_INT 11550
11021: PLUS
11022: PUSH
11023: LD_INT 3
11025: PUSH
11026: LD_OWVAR 67
11030: MINUS
11031: PUSH
11032: LD_INT 4200
11034: MUL
11035: PLUS
11036: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
11037: LD_STRING M2
11039: PPUSH
11040: CALL_OW 337
// Say ( John , D3b-JMM-1 ) ;
11044: LD_EXP 7
11048: PPUSH
11049: LD_STRING D3b-JMM-1
11051: PPUSH
11052: CALL_OW 88
// end ;
11056: LD_VAR 0 1
11060: RET
// every 0 0$2 trigger GetSide ( Arm1 ) = americans do
11061: LD_INT 2
11063: PPUSH
11064: CALL_OW 255
11068: PUSH
11069: LD_EXP 3
11073: EQUAL
11074: IFFALSE 11086
11076: GO 11078
11078: DISABLE
// begin Hint ( Armoury ) ;
11079: LD_STRING Armoury
11081: PPUSH
11082: CALL_OW 339
// end ;
11086: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , americans ] , [ f_btype , b_breastwork ] ] ) > 0 do
11087: LD_INT 22
11089: PUSH
11090: LD_EXP 3
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 30
11101: PUSH
11102: LD_INT 31
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PPUSH
11113: CALL_OW 69
11117: PUSH
11118: LD_INT 0
11120: GREATER
11121: IFFALSE 11133
11123: GO 11125
11125: DISABLE
// begin Hint ( Breastworks ) ;
11126: LD_STRING Breastworks
11128: PPUSH
11129: CALL_OW 339
// end ;
11133: END
// every 0 0$3 trigger GetSide ( dep1 ) = americans do
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 255
11141: PUSH
11142: LD_EXP 3
11146: EQUAL
11147: IFFALSE 11348
11149: GO 11151
11151: DISABLE
// begin DialogueOn ;
11152: CALL_OW 6
// if GetSide ( dep2 ) = americans then
11156: LD_INT 10
11158: PPUSH
11159: CALL_OW 255
11163: PUSH
11164: LD_EXP 3
11168: EQUAL
11169: IFFALSE 11279
// begin Say ( John , D3a-JMM-1 ) ;
11171: LD_EXP 7
11175: PPUSH
11176: LD_STRING D3a-JMM-1
11178: PPUSH
11179: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
11183: LD_EXP 16
11187: PPUSH
11188: LD_STRING D3a-Pow-1
11190: PPUSH
11191: CALL_OW 94
// Say ( John , D3a-JMM-2 ) ;
11195: LD_EXP 7
11199: PPUSH
11200: LD_STRING D3a-JMM-2
11202: PPUSH
11203: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
11207: LD_EXP 16
11211: PPUSH
11212: LD_STRING D3a-Pow-2
11214: PPUSH
11215: CALL_OW 94
// Say ( John , D3a-JMM-3 ) ;
11219: LD_EXP 7
11223: PPUSH
11224: LD_STRING D3a-JMM-3
11226: PPUSH
11227: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
11231: LD_EXP 16
11235: PPUSH
11236: LD_STRING D3a-Pow-3
11238: PPUSH
11239: CALL_OW 94
// Say ( John , D3a-JMM-4 ) ;
11243: LD_EXP 7
11247: PPUSH
11248: LD_STRING D3a-JMM-4
11250: PPUSH
11251: CALL_OW 88
// DialogueOff ;
11255: CALL_OW 7
// Hint ( Depot2 ) ;
11259: LD_STRING Depot2
11261: PPUSH
11262: CALL_OW 339
// Hint ( Transporting ) ;
11266: LD_STRING Transporting
11268: PPUSH
11269: CALL_OW 339
// Set_times ;
11273: CALL 10894 0 0
// end else
11277: GO 11348
// begin Wait ( 2 * 0 0$1 ) ;
11279: LD_INT 2
11281: PUSH
11282: LD_INT 35
11284: MUL
11285: PPUSH
11286: CALL_OW 67
// Say ( John , D3-JMM-1 ) ;
11290: LD_EXP 7
11294: PPUSH
11295: LD_STRING D3-JMM-1
11297: PPUSH
11298: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
11302: LD_EXP 16
11306: PPUSH
11307: LD_STRING D3-Pow-1
11309: PPUSH
11310: CALL_OW 94
// if IsOk ( Cyrus ) then
11314: LD_EXP 8
11318: PPUSH
11319: CALL_OW 302
11323: IFFALSE 11337
// Say ( Cyrus , D3-Cyrus-1 ) ;
11325: LD_EXP 8
11329: PPUSH
11330: LD_STRING D3-Cyrus-1
11332: PPUSH
11333: CALL_OW 88
// DialogueOff ;
11337: CALL_OW 7
// Hint ( Depot ) ;
11341: LD_STRING Depot
11343: PPUSH
11344: CALL_OW 339
// end ; end ;
11348: END
// every 0 0$3 trigger GetSide ( dep2 ) = americans do
11349: LD_INT 10
11351: PPUSH
11352: CALL_OW 255
11356: PUSH
11357: LD_EXP 3
11361: EQUAL
11362: IFFALSE 11563
11364: GO 11366
11366: DISABLE
// begin DialogueOn ;
11367: CALL_OW 6
// if GetSide ( dep1 ) = americans then
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 255
11378: PUSH
11379: LD_EXP 3
11383: EQUAL
11384: IFFALSE 11494
// begin Say ( John , D3a-JMM-1 ) ;
11386: LD_EXP 7
11390: PPUSH
11391: LD_STRING D3a-JMM-1
11393: PPUSH
11394: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
11398: LD_EXP 16
11402: PPUSH
11403: LD_STRING D3a-Pow-1
11405: PPUSH
11406: CALL_OW 94
// Say ( John , D3a-JMM-2 ) ;
11410: LD_EXP 7
11414: PPUSH
11415: LD_STRING D3a-JMM-2
11417: PPUSH
11418: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
11422: LD_EXP 16
11426: PPUSH
11427: LD_STRING D3a-Pow-2
11429: PPUSH
11430: CALL_OW 94
// Say ( John , D3a-JMM-3 ) ;
11434: LD_EXP 7
11438: PPUSH
11439: LD_STRING D3a-JMM-3
11441: PPUSH
11442: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
11446: LD_EXP 16
11450: PPUSH
11451: LD_STRING D3a-Pow-3
11453: PPUSH
11454: CALL_OW 94
// Say ( John , D3a-JMM-4 ) ;
11458: LD_EXP 7
11462: PPUSH
11463: LD_STRING D3a-JMM-4
11465: PPUSH
11466: CALL_OW 88
// DialogueOff ;
11470: CALL_OW 7
// Hint ( Depot2 ) ;
11474: LD_STRING Depot2
11476: PPUSH
11477: CALL_OW 339
// Hint ( Transporting ) ;
11481: LD_STRING Transporting
11483: PPUSH
11484: CALL_OW 339
// Set_times ;
11488: CALL 10894 0 0
// end else
11492: GO 11563
// begin Wait ( 2 * 0 0$1 ) ;
11494: LD_INT 2
11496: PUSH
11497: LD_INT 35
11499: MUL
11500: PPUSH
11501: CALL_OW 67
// Say ( John , D3-JMM-1 ) ;
11505: LD_EXP 7
11509: PPUSH
11510: LD_STRING D3-JMM-1
11512: PPUSH
11513: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
11517: LD_EXP 16
11521: PPUSH
11522: LD_STRING D3-Pow-1
11524: PPUSH
11525: CALL_OW 94
// if IsOk ( Cyrus ) then
11529: LD_EXP 8
11533: PPUSH
11534: CALL_OW 302
11538: IFFALSE 11552
// Say ( Cyrus , D3-Cyrus-1 ) ;
11540: LD_EXP 8
11544: PPUSH
11545: LD_STRING D3-Cyrus-1
11547: PPUSH
11548: CALL_OW 88
// DialogueOff ;
11552: CALL_OW 7
// Hint ( Depot ) ;
11556: LD_STRING Depot
11558: PPUSH
11559: CALL_OW 339
// end ; end ;
11563: END
// every 0 0$5 trigger GetResourceType ( GetBase ( GetUnitNumber ( 52 , 10 ) ) , mat_cans ) > 20 do
11564: LD_INT 52
11566: PPUSH
11567: LD_INT 10
11569: PPUSH
11570: CALL_OW 438
11574: PPUSH
11575: CALL_OW 274
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 275
11587: PUSH
11588: LD_INT 20
11590: GREATER
11591: IFFALSE 11603
11593: GO 11595
11595: DISABLE
// begin Hint ( Building ) ;
11596: LD_STRING Building
11598: PPUSH
11599: CALL_OW 339
// end ;
11603: END
// on BuildingStarted ( build , hum ) do begin Hint ( Building2 ) ;
11604: LD_STRING Building2
11606: PPUSH
11607: CALL_OW 339
// disable ;
11611: DISABLE
// end ;
11612: PPOPN 2
11614: END
// every 0 0$0.5 trigger escape_flag do
11615: LD_EXP 28
11619: IFFALSE 11680
11621: GO 11623
11623: DISABLE
// begin if FilterUnitsInArea ( prijezd , [ f_side , americans ] ) > 0 then
11624: LD_INT 10
11626: PPUSH
11627: LD_INT 22
11629: PUSH
11630: LD_EXP 3
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PPUSH
11639: CALL_OW 70
11643: PUSH
11644: LD_INT 0
11646: GREATER
11647: IFFALSE 11679
// ComMoveXY ( FilterUnitsInArea ( prijezd , [ f_side , americans ] ) , 16 , 7 ) ;
11649: LD_INT 10
11651: PPUSH
11652: LD_INT 22
11654: PUSH
11655: LD_EXP 3
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: PPUSH
11669: LD_INT 16
11671: PPUSH
11672: LD_INT 7
11674: PPUSH
11675: CALL_OW 111
// enable ;
11679: ENABLE
// end ;
11680: END
// function Escape ; begin
11681: LD_INT 0
11683: PPUSH
// wait ( 0 0$1 ) ;
11684: LD_INT 35
11686: PPUSH
11687: CALL_OW 67
// ComStop ( [ vehicle3 , vehicle4 ] ) ;
11691: LD_EXP 66
11695: PUSH
11696: LD_EXP 67
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PPUSH
11705: CALL_OW 141
// wait ( 0 0$1 ) ;
11709: LD_INT 35
11711: PPUSH
11712: CALL_OW 67
// if IsOk ( vehicle3 ) then
11716: LD_EXP 66
11720: PPUSH
11721: CALL_OW 302
11725: IFFALSE 11742
// ComMoveXY ( vehicle3 , 3 , 6 ) ;
11727: LD_EXP 66
11731: PPUSH
11732: LD_INT 3
11734: PPUSH
11735: LD_INT 6
11737: PPUSH
11738: CALL_OW 111
// if IsOk ( vehicle4 ) then
11742: LD_EXP 67
11746: PPUSH
11747: CALL_OW 302
11751: IFFALSE 11768
// ComMoveXY ( vehicle4 , 4 , 8 ) ;
11753: LD_EXP 67
11757: PPUSH
11758: LD_INT 4
11760: PPUSH
11761: LD_INT 8
11763: PPUSH
11764: CALL_OW 111
// if IsOk ( Mikhail ) and not ( Mikhail_in_depot ) then
11768: LD_EXP 65
11772: PPUSH
11773: CALL_OW 302
11777: PUSH
11778: LD_EXP 39
11782: NOT
11783: AND
11784: IFFALSE 11876
// begin target_of_escape = [ 4 , 6 ] ;
11786: LD_ADDR_LOC 10
11790: PUSH
11791: LD_INT 4
11793: PUSH
11794: LD_INT 6
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: ST_TO_ADDR
// SetSide ( Mikhail , russians1 ) ;
11801: LD_EXP 65
11805: PPUSH
11806: LD_EXP 6
11810: PPUSH
11811: CALL_OW 235
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
11815: LD_EXP 65
11819: PPUSH
11820: LD_LOC 10
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_LOC 10
11833: PUSH
11834: LD_INT 2
11836: ARRAY
11837: PPUSH
11838: CALL_OW 171
// AddComHold ( Mikhail ) ;
11842: LD_EXP 65
11846: PPUSH
11847: CALL_OW 200
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
11851: LD_EXP 3
11855: PPUSH
11856: LD_EXP 6
11860: PPUSH
11861: LD_INT 2
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 80
// enable ( Mikhails_escape ) ;
11871: LD_EXP 45
11875: ENABLE_MARKED
// end ; escape_flag = true ;
11876: LD_ADDR_EXP 28
11880: PUSH
11881: LD_INT 1
11883: ST_TO_ADDR
// escape_dialogue = true ;
11884: LD_ADDR_EXP 99
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// Say ( driver3 , D5-Rus2-1a ) ;
11892: LD_EXP 68
11896: PPUSH
11897: LD_STRING D5-Rus2-1a
11899: PPUSH
11900: CALL_OW 88
// escape_dialogue = false ;
11904: LD_ADDR_EXP 99
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// end ;
11912: LD_VAR 0 1
11916: RET
// every 0 0$3 trigger tick > Time_of_visit do var e ;
11917: LD_OWVAR 1
11921: PUSH
11922: LD_EXP 25
11926: GREATER
11927: IFFALSE 12159
11929: GO 11931
11931: DISABLE
11932: LD_INT 0
11934: PPUSH
// begin repeat if FilterUnitsInArea ( Prijezd , [ ] ) = 0 then
11935: LD_INT 10
11937: PPUSH
11938: EMPTY
11939: PPUSH
11940: CALL_OW 70
11944: PUSH
11945: LD_INT 0
11947: EQUAL
11948: IFFALSE 11952
// break ;
11950: GO 11983
// ComMoveXY ( FilterUnitsInArea ( prijezd , [ ] ) , 16 , 7 ) ;
11952: LD_INT 10
11954: PPUSH
11955: EMPTY
11956: PPUSH
11957: CALL_OW 70
11961: PPUSH
11962: LD_INT 16
11964: PPUSH
11965: LD_INT 7
11967: PPUSH
11968: CALL_OW 111
// wait ( 0 0$1 ) ;
11972: LD_INT 35
11974: PPUSH
11975: CALL_OW 67
// until false ;
11979: LD_INT 0
11981: IFFALSE 11935
// PlaceUnitXY ( vehicle3 , 5 , 5 , false ) ;
11983: LD_EXP 66
11987: PPUSH
11988: LD_INT 5
11990: PPUSH
11991: LD_INT 5
11993: PPUSH
11994: LD_INT 0
11996: PPUSH
11997: CALL_OW 48
// PlaceUnitXY ( vehicle4 , 6 , 8 , false ) ;
12001: LD_EXP 67
12005: PPUSH
12006: LD_INT 6
12008: PPUSH
12009: LD_INT 8
12011: PPUSH
12012: LD_INT 0
12014: PPUSH
12015: CALL_OW 48
// ComMoveXY ( vehicle3 , 66 , 15 ) ;
12019: LD_EXP 66
12023: PPUSH
12024: LD_INT 66
12026: PPUSH
12027: LD_INT 15
12029: PPUSH
12030: CALL_OW 111
// ComMoveXY ( vehicle4 , 67 , 20 ) ;
12034: LD_EXP 67
12038: PPUSH
12039: LD_INT 67
12041: PPUSH
12042: LD_INT 20
12044: PPUSH
12045: CALL_OW 111
// if See ( americans , vehicle3 ) or See ( americans , vehicle4 ) then
12049: LD_EXP 3
12053: PPUSH
12054: LD_EXP 66
12058: PPUSH
12059: CALL_OW 292
12063: PUSH
12064: LD_EXP 3
12068: PPUSH
12069: LD_EXP 67
12073: PPUSH
12074: CALL_OW 292
12078: OR
12079: IFFALSE 12106
// if not ( escape_flag ) then
12081: LD_EXP 28
12085: NOT
12086: IFFALSE 12098
// e = true else
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
12096: GO 12106
// e = false ;
12098: LD_ADDR_VAR 0 1
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12106: LD_INT 245
12108: PPUSH
12109: CALL_OW 67
// if e then
12113: LD_VAR 0 1
12117: IFFALSE 12123
// Escape ;
12119: CALL 11681 0 0
// if vehicle_goes_flag then
12123: LD_EXP 100
12127: IFFALSE 12134
// enable ( vehicle_goes ) ;
12129: LD_EXP 27
12133: ENABLE_MARKED
// wait ( 0 0$3 ) ;
12134: LD_INT 105
12136: PPUSH
12137: CALL_OW 67
// CenterOnUnits ( [ vehicle3 , vehicle4 ] ) ;
12141: LD_EXP 66
12145: PUSH
12146: LD_EXP 67
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PPUSH
12155: CALL_OW 85
// end ;
12159: PPOPN 1
12161: END
// every 0 0$2 marked 2 do
12162: GO 12164
12164: DISABLE
// begin if ( ( GetDistUnitXY ( vehicle3 , 66 , 15 ) < 5 and ( See ( americans , vehicle3 ) or GetLives ( vehicle3 ) < 1000 ) ) ) or ( ( GetDistUnitXY ( vehicle4 , 67 , 20 ) < 5 and ( See ( americans , vehicle4 ) or GetLives ( vehicle3 ) < 1000 ) ) ) or ( GetLives ( vehicle3 ) < 500 ) or ( GetLives ( vehicle4 ) < 500 ) then
12165: LD_EXP 66
12169: PPUSH
12170: LD_INT 66
12172: PPUSH
12173: LD_INT 15
12175: PPUSH
12176: CALL_OW 297
12180: PUSH
12181: LD_INT 5
12183: LESS
12184: PUSH
12185: LD_EXP 3
12189: PPUSH
12190: LD_EXP 66
12194: PPUSH
12195: CALL_OW 292
12199: PUSH
12200: LD_EXP 66
12204: PPUSH
12205: CALL_OW 256
12209: PUSH
12210: LD_INT 1000
12212: LESS
12213: OR
12214: AND
12215: PUSH
12216: LD_EXP 67
12220: PPUSH
12221: LD_INT 67
12223: PPUSH
12224: LD_INT 20
12226: PPUSH
12227: CALL_OW 297
12231: PUSH
12232: LD_INT 5
12234: LESS
12235: PUSH
12236: LD_EXP 3
12240: PPUSH
12241: LD_EXP 67
12245: PPUSH
12246: CALL_OW 292
12250: PUSH
12251: LD_EXP 66
12255: PPUSH
12256: CALL_OW 256
12260: PUSH
12261: LD_INT 1000
12263: LESS
12264: OR
12265: AND
12266: OR
12267: PUSH
12268: LD_EXP 66
12272: PPUSH
12273: CALL_OW 256
12277: PUSH
12278: LD_INT 500
12280: LESS
12281: OR
12282: PUSH
12283: LD_EXP 67
12287: PPUSH
12288: CALL_OW 256
12292: PUSH
12293: LD_INT 500
12295: LESS
12296: OR
12297: IFFALSE 12312
// begin if not ( escape_flag ) then
12299: LD_EXP 28
12303: NOT
12304: IFFALSE 12310
// Escape ;
12306: CALL 11681 0 0
// end else
12310: GO 12313
// enable ;
12312: ENABLE
// end ;
12313: END
// every 0 0$2 + 0 0$1 trigger IsOk ( vehicle3 ) and not ( escape_flag ) marked 2 do
12314: LD_EXP 66
12318: PPUSH
12319: CALL_OW 302
12323: PUSH
12324: LD_EXP 28
12328: NOT
12329: AND
12330: IFFALSE 12386
12332: GO 12334
12334: DISABLE
// begin if GetDistUnits ( vehicle3 , dep1 ) < 25 then
12335: LD_EXP 66
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 296
12347: PUSH
12348: LD_INT 25
12350: LESS
12351: IFFALSE 12385
// begin CenterOnUnits ( [ vehicle3 , vehicle4 ] ) ;
12353: LD_EXP 66
12357: PUSH
12358: LD_EXP 67
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 85
// Say ( driver3 , D5-Rus2-1 ) ;
12371: LD_EXP 68
12375: PPUSH
12376: LD_STRING D5-Rus2-1
12378: PPUSH
12379: CALL_OW 88
// end else
12383: GO 12386
// enable ;
12385: ENABLE
// end ;
12386: END
// every 0 0$1 trigger escape_flag do var rus ;
12387: LD_EXP 28
12391: IFFALSE 12753
12393: GO 12395
12395: DISABLE
12396: LD_INT 0
12398: PPUSH
// begin if IsInArea ( vehicle3 , prijezd ) and ( IsInUnit ( driver3 ) > 0 ) then
12399: LD_EXP 66
12403: PPUSH
12404: LD_INT 10
12406: PPUSH
12407: CALL_OW 308
12411: PUSH
12412: LD_EXP 68
12416: PPUSH
12417: CALL_OW 310
12421: PUSH
12422: LD_INT 0
12424: GREATER
12425: AND
12426: IFFALSE 12484
// begin flee = flee + 1 ;
12428: LD_ADDR_EXP 29
12432: PUSH
12433: LD_EXP 29
12437: PUSH
12438: LD_INT 1
12440: PLUS
12441: ST_TO_ADDR
// DestroyUnit ( vehicle3 ) ;
12442: LD_EXP 66
12446: PPUSH
12447: CALL_OW 65
// if not ( IsOk ( vehicle4 ) ) then
12451: LD_EXP 67
12455: PPUSH
12456: CALL_OW 302
12460: NOT
12461: IFFALSE 12484
// begin disable ( vehicle_goes ) ;
12463: LD_EXP 27
12467: DISABLE_MARKED
// escape_flag = false ;
12468: LD_ADDR_EXP 28
12472: PUSH
12473: LD_INT 0
12475: ST_TO_ADDR
// vehicle_goes_flag = false ;
12476: LD_ADDR_EXP 100
12480: PUSH
12481: LD_INT 0
12483: ST_TO_ADDR
// end ; end ; if IsInArea ( vehicle4 , prijezd ) and ( IsInUnit ( driver4 ) > 0 ) then
12484: LD_EXP 67
12488: PPUSH
12489: LD_INT 10
12491: PPUSH
12492: CALL_OW 308
12496: PUSH
12497: LD_EXP 69
12501: PPUSH
12502: CALL_OW 310
12506: PUSH
12507: LD_INT 0
12509: GREATER
12510: AND
12511: IFFALSE 12569
// begin flee = flee + 1 ;
12513: LD_ADDR_EXP 29
12517: PUSH
12518: LD_EXP 29
12522: PUSH
12523: LD_INT 1
12525: PLUS
12526: ST_TO_ADDR
// DestroyUnit ( vehicle4 ) ;
12527: LD_EXP 67
12531: PPUSH
12532: CALL_OW 65
// if not ( IsOk ( vehicle3 ) ) then
12536: LD_EXP 66
12540: PPUSH
12541: CALL_OW 302
12545: NOT
12546: IFFALSE 12569
// begin disable ( vehicle_goes ) ;
12548: LD_EXP 27
12552: DISABLE_MARKED
// escape_flag = false ;
12553: LD_ADDR_EXP 28
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// vehicle_goes_flag = false ;
12561: LD_ADDR_EXP 100
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// end ; end ; if not ( IsOk ( vehicle3 ) or IsOk ( vehicle4 ) ) and flee = 0 then
12569: LD_EXP 66
12573: PPUSH
12574: CALL_OW 302
12578: PUSH
12579: LD_EXP 67
12583: PPUSH
12584: CALL_OW 302
12588: OR
12589: NOT
12590: PUSH
12591: LD_EXP 29
12595: PUSH
12596: LD_INT 0
12598: EQUAL
12599: AND
12600: IFFALSE 12632
// begin escape_flag = false ;
12602: LD_ADDR_EXP 28
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// Time_of_attack = Time_of_attack + 1 1$0 ;
12610: LD_ADDR_EXP 26
12614: PUSH
12615: LD_EXP 26
12619: PUSH
12620: LD_INT 2100
12622: PLUS
12623: ST_TO_ADDR
// Attack_canceled = true ;
12624: LD_ADDR_EXP 93
12628: PUSH
12629: LD_INT 1
12631: ST_TO_ADDR
// end ; if escape_flag = false and IsOk ( AmME1 ) then
12632: LD_EXP 28
12636: PUSH
12637: LD_INT 0
12639: EQUAL
12640: PUSH
12641: LD_EXP 13
12645: PPUSH
12646: CALL_OW 302
12650: AND
12651: IFFALSE 12746
// begin while escape_dialogue do
12653: LD_EXP 99
12657: IFFALSE 12668
// Wait ( 0 0$1 ) ;
12659: LD_INT 35
12661: PPUSH
12662: CALL_OW 67
12666: GO 12653
// case flee of 1 :
12668: LD_EXP 29
12672: PUSH
12673: LD_INT 1
12675: DOUBLE
12676: EQUAL
12677: IFTRUE 12681
12679: GO 12708
12681: POP
// begin Say ( AmME1 , D5a-Sol1-1 ) ;
12682: LD_EXP 13
12686: PPUSH
12687: LD_STRING D5a-Sol1-1
12689: PPUSH
12690: CALL_OW 88
// Say ( John , D5a-JMM-1 ) ;
12694: LD_EXP 7
12698: PPUSH
12699: LD_STRING D5a-JMM-1
12701: PPUSH
12702: CALL_OW 88
// end ; 2 :
12706: GO 12744
12708: LD_INT 2
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12743
12716: POP
// begin Say ( AmME1 , D5a-Sol1-1a ) ;
12717: LD_EXP 13
12721: PPUSH
12722: LD_STRING D5a-Sol1-1a
12724: PPUSH
12725: CALL_OW 88
// Say ( John , D5a-JMM-1 ) ;
12729: LD_EXP 7
12733: PPUSH
12734: LD_STRING D5a-JMM-1
12736: PPUSH
12737: CALL_OW 88
// end ; end ;
12741: GO 12744
12743: POP
// end else
12744: GO 12753
// if escape_flag then
12746: LD_EXP 28
12750: IFFALSE 12753
// enable ;
12752: ENABLE
// end ;
12753: PPOPN 1
12755: END
// function PlaceMikhail ; var AllAmUn , i , max , max_un ; begin
12756: LD_INT 0
12758: PPUSH
12759: PPUSH
12760: PPUSH
12761: PPUSH
12762: PPUSH
// AllAmUn := FilterAllUnits ( [ [ f_side , americans ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_INT 22
12770: PUSH
12771: LD_EXP 3
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 50
12782: PUSH
12783: EMPTY
12784: LIST
12785: PUSH
12786: LD_INT 21
12788: PUSH
12789: LD_INT 1
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: ST_TO_ADDR
// if AllAmUn = 1 then
12806: LD_VAR 0 2
12810: PUSH
12811: LD_INT 1
12813: EQUAL
12814: IFFALSE 12882
// begin PlaceUnitXYR ( Mikhail , GetX ( John ) , GetY ( John ) , 5 , true ) ;
12816: LD_EXP 65
12820: PPUSH
12821: LD_EXP 7
12825: PPUSH
12826: CALL_OW 250
12830: PPUSH
12831: LD_EXP 7
12835: PPUSH
12836: CALL_OW 251
12840: PPUSH
12841: LD_INT 5
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 50
// Wait ( 0 0$3 ) ;
12851: LD_INT 105
12853: PPUSH
12854: CALL_OW 67
// ComAttackUnit ( Mikhail , John ) ;
12858: LD_EXP 65
12862: PPUSH
12863: LD_EXP 7
12867: PPUSH
12868: CALL_OW 115
// result = true ;
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: LD_INT 1
12879: ST_TO_ADDR
// end else
12880: GO 13041
// if AllAmUn > 1 then
12882: LD_VAR 0 2
12886: PUSH
12887: LD_INT 1
12889: GREATER
12890: IFFALSE 13033
// begin for i in AllAmUn do
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: LD_VAR 0 2
12901: PUSH
12902: FOR_IN
12903: IFFALSE 12941
// begin if not ( IsDying ( i ) ) and ( i <> John ) then
12905: LD_VAR 0 3
12909: PPUSH
12910: CALL_OW 303
12914: NOT
12915: PUSH
12916: LD_VAR 0 3
12920: PUSH
12921: LD_EXP 7
12925: NONEQUAL
12926: AND
12927: IFFALSE 12939
// max_un := i ;
12929: LD_ADDR_VAR 0 5
12933: PUSH
12934: LD_VAR 0 3
12938: ST_TO_ADDR
// end ;
12939: GO 12902
12941: POP
12942: POP
// PlaceUnitXYR ( Mikhail , GetX ( max_un ) , GetY ( max_un ) , 4 , true ) ;
12943: LD_EXP 65
12947: PPUSH
12948: LD_VAR 0 5
12952: PPUSH
12953: CALL_OW 250
12957: PPUSH
12958: LD_VAR 0 5
12962: PPUSH
12963: CALL_OW 251
12967: PPUSH
12968: LD_INT 4
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 50
// Wait ( 0 0$3 ) ;
12978: LD_INT 105
12980: PPUSH
12981: CALL_OW 67
// enable ( Mikhail_placed ) ;
12985: LD_EXP 35
12989: ENABLE_MARKED
// ComMoveUnit ( Mikhail , max_un ) ;
12990: LD_EXP 65
12994: PPUSH
12995: LD_VAR 0 5
12999: PPUSH
13000: CALL_OW 112
// ComStop ( max_un ) ;
13004: LD_VAR 0 5
13008: PPUSH
13009: CALL_OW 141
// Followed := max_un ;
13013: LD_ADDR_LOC 2
13017: PUSH
13018: LD_VAR 0 5
13022: ST_TO_ADDR
// result := true ;
13023: LD_ADDR_VAR 0 1
13027: PUSH
13028: LD_INT 1
13030: ST_TO_ADDR
// end else
13031: GO 13041
// result := false ;
13033: LD_ADDR_VAR 0 1
13037: PUSH
13038: LD_INT 0
13040: ST_TO_ADDR
// end ;
13041: LD_VAR 0 1
13045: RET
// function Try1 ; begin
13046: LD_INT 0
13048: PPUSH
// if IsOk ( AmME1 ) and not ( IsDying ( AmME1 ) ) then
13049: LD_EXP 13
13053: PPUSH
13054: CALL_OW 302
13058: PUSH
13059: LD_EXP 13
13063: PPUSH
13064: CALL_OW 303
13068: NOT
13069: AND
13070: IFFALSE 13162
// begin PlaceUnitXYR ( Mikhail , GetX ( AmME1 ) , GetY ( AmME1 ) , 4 , true ) ;
13072: LD_EXP 65
13076: PPUSH
13077: LD_EXP 13
13081: PPUSH
13082: CALL_OW 250
13086: PPUSH
13087: LD_EXP 13
13091: PPUSH
13092: CALL_OW 251
13096: PPUSH
13097: LD_INT 4
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 50
// Wait ( 0 0$3 ) ;
13107: LD_INT 105
13109: PPUSH
13110: CALL_OW 67
// enable ( Mikhail_placed ) ;
13114: LD_EXP 35
13118: ENABLE_MARKED
// ComMoveUnit ( Mikhail , AmME1 ) ;
13119: LD_EXP 65
13123: PPUSH
13124: LD_EXP 13
13128: PPUSH
13129: CALL_OW 112
// ComStop ( AmME1 ) ;
13133: LD_EXP 13
13137: PPUSH
13138: CALL_OW 141
// Followed := AmME1 ;
13142: LD_ADDR_LOC 2
13146: PUSH
13147: LD_EXP 13
13151: ST_TO_ADDR
// result := true ;
13152: LD_ADDR_VAR 0 1
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// end else
13160: GO 13170
// result := false ;
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// end ;
13170: LD_VAR 0 1
13174: RET
// function Try2 ; begin
13175: LD_INT 0
13177: PPUSH
// if IsOk ( AmFE2 ) and not ( IsDying ( AmFE2 ) ) then
13178: LD_EXP 14
13182: PPUSH
13183: CALL_OW 302
13187: PUSH
13188: LD_EXP 14
13192: PPUSH
13193: CALL_OW 303
13197: NOT
13198: AND
13199: IFFALSE 13291
// begin PlaceUnitXYR ( Mikhail , GetX ( AmFE2 ) , GetY ( AmFE2 ) , 3 , true ) ;
13201: LD_EXP 65
13205: PPUSH
13206: LD_EXP 14
13210: PPUSH
13211: CALL_OW 250
13215: PPUSH
13216: LD_EXP 14
13220: PPUSH
13221: CALL_OW 251
13225: PPUSH
13226: LD_INT 3
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: CALL_OW 50
// Wait ( 0 0$3 ) ;
13236: LD_INT 105
13238: PPUSH
13239: CALL_OW 67
// enable ( Mikhail_placed ) ;
13243: LD_EXP 35
13247: ENABLE_MARKED
// ComMoveUnit ( Mikhail , AmFE2 ) ;
13248: LD_EXP 65
13252: PPUSH
13253: LD_EXP 14
13257: PPUSH
13258: CALL_OW 112
// ComStop ( AmFE2 ) ;
13262: LD_EXP 14
13266: PPUSH
13267: CALL_OW 141
// Followed := AmFE2 ;
13271: LD_ADDR_LOC 2
13275: PUSH
13276: LD_EXP 14
13280: ST_TO_ADDR
// result := true ;
13281: LD_ADDR_VAR 0 1
13285: PUSH
13286: LD_INT 1
13288: ST_TO_ADDR
// end else
13289: GO 13299
// result := false ;
13291: LD_ADDR_VAR 0 1
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// end ;
13299: LD_VAR 0 1
13303: RET
// every 0 0$5 trigger Time_of_capture + 0 0$20 < tick do var r , cont ;
13304: LD_EXP 30
13308: PUSH
13309: LD_INT 700
13311: PLUS
13312: PUSH
13313: LD_OWVAR 1
13317: LESS
13318: IFFALSE 13463
13320: GO 13322
13322: DISABLE
13323: LD_INT 0
13325: PPUSH
13326: PPUSH
// begin r = Rand ( 0 , 1 ) ;
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_INT 0
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 12
13342: ST_TO_ADDR
// cont = false ;
13343: LD_ADDR_VAR 0 2
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// count = count + 1 ;
13351: LD_ADDR_EXP 77
13355: PUSH
13356: LD_EXP 77
13360: PUSH
13361: LD_INT 1
13363: PLUS
13364: ST_TO_ADDR
// if IsOk ( AmME1 ) or IsOk ( AmFE2 ) then
13365: LD_EXP 13
13369: PPUSH
13370: CALL_OW 302
13374: PUSH
13375: LD_EXP 14
13379: PPUSH
13380: CALL_OW 302
13384: OR
13385: IFFALSE 13441
// if r then
13387: LD_VAR 0 1
13391: IFFALSE 13417
// begin if not ( Try1 ) then
13393: CALL 13046 0 0
13397: NOT
13398: IFFALSE 13415
// if not ( Try2 ) then
13400: CALL 13175 0 0
13404: NOT
13405: IFFALSE 13415
// cont = true end else
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
13415: GO 13439
// begin if not ( Try2 ) then
13417: CALL 13175 0 0
13421: NOT
13422: IFFALSE 13439
// if not ( Try1 ) then
13424: CALL 13046 0 0
13428: NOT
13429: IFFALSE 13439
// cont = true ;
13431: LD_ADDR_VAR 0 2
13435: PUSH
13436: LD_INT 1
13438: ST_TO_ADDR
// end else
13439: GO 13456
// begin if not ( PlaceMikhail ) then
13441: CALL 12756 0 0
13445: NOT
13446: IFFALSE 13456
// cont = true ;
13448: LD_ADDR_VAR 0 2
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// end ; if cont then
13456: LD_VAR 0 2
13460: IFFALSE 13463
// enable ;
13462: ENABLE
// end ;
13463: PPOPN 2
13465: END
// every 0 0$1 marked 3 do
13466: GO 13468
13468: DISABLE
// begin if GetClass ( Mikhail ) <> class_mechanic then
13469: LD_EXP 65
13473: PPUSH
13474: CALL_OW 257
13478: PUSH
13479: LD_INT 3
13481: NONEQUAL
13482: IFFALSE 13496
// SetClass ( Mikhail , class_mechanic ) ;
13484: LD_EXP 65
13488: PPUSH
13489: LD_INT 3
13491: PPUSH
13492: CALL_OW 336
// enable ;
13496: ENABLE
// end ;
13497: END
// every 0 0$0.5 marked 3 do var answer , all , i ;
13498: GO 13500
13500: DISABLE
13501: LD_INT 0
13503: PPUSH
13504: PPUSH
13505: PPUSH
// begin if FilterAllUnits ( [ f_side , americans ] ) > 1 then
13506: LD_INT 22
13508: PUSH
13509: LD_EXP 3
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PPUSH
13518: CALL_OW 69
13522: PUSH
13523: LD_INT 1
13525: GREATER
13526: IFFALSE 14365
// begin if FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 15 ] ] ) > 0 then
13528: LD_INT 22
13530: PUSH
13531: LD_EXP 3
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 91
13542: PUSH
13543: LD_EXP 65
13547: PUSH
13548: LD_INT 15
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_INT 0
13567: GREATER
13568: IFFALSE 14364
// begin all = FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 15 ] ] ) ;
13570: LD_ADDR_VAR 0 2
13574: PUSH
13575: LD_INT 22
13577: PUSH
13578: LD_EXP 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 91
13589: PUSH
13590: LD_EXP 65
13594: PUSH
13595: LD_INT 15
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 69
13611: ST_TO_ADDR
// AddComHold ( all ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 200
// AddComHold ( Followed ) ;
13621: LD_LOC 2
13625: PPUSH
13626: CALL_OW 200
// AddComTurnUnit ( all , Mikhail ) ;
13630: LD_VAR 0 2
13634: PPUSH
13635: LD_EXP 65
13639: PPUSH
13640: CALL_OW 179
// AddComTurnUnit ( Followed , Mikhail ) ;
13644: LD_LOC 2
13648: PPUSH
13649: LD_EXP 65
13653: PPUSH
13654: CALL_OW 179
// while GetDistUnits ( Mikhail , Followed ) > 6 do
13658: LD_EXP 65
13662: PPUSH
13663: LD_LOC 2
13667: PPUSH
13668: CALL_OW 296
13672: PUSH
13673: LD_INT 6
13675: GREATER
13676: IFFALSE 13687
// wait ( 0 0$0.5 ) ;
13678: LD_INT 18
13680: PPUSH
13681: CALL_OW 67
13685: GO 13658
// DialogueOn ;
13687: CALL_OW 6
// CenterOnUnits ( [ Mikhail , Followed ] ) ;
13691: LD_EXP 65
13695: PUSH
13696: LD_LOC 2
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 85
// Say ( Mikhail , D4-Mikh-1 ) ;
13709: LD_EXP 65
13713: PPUSH
13714: LD_STRING D4-Mikh-1
13716: PPUSH
13717: CALL_OW 88
// if IsOk ( AmME1 ) or IsOk ( AmFE2 ) then
13721: LD_EXP 13
13725: PPUSH
13726: CALL_OW 302
13730: PUSH
13731: LD_EXP 14
13735: PPUSH
13736: CALL_OW 302
13740: OR
13741: IFFALSE 13895
// begin if Followed = AmME1 then
13743: LD_LOC 2
13747: PUSH
13748: LD_EXP 13
13752: EQUAL
13753: IFFALSE 13769
// Say ( AmME1 , D4-Sol1-1 ) else
13755: LD_EXP 13
13759: PPUSH
13760: LD_STRING D4-Sol1-1
13762: PPUSH
13763: CALL_OW 88
13767: GO 13781
// Say ( AmFE2 , D4-FSol1-1 ) ;
13769: LD_EXP 14
13773: PPUSH
13774: LD_STRING D4-FSol1-1
13776: PPUSH
13777: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
13781: LD_EXP 65
13785: PPUSH
13786: LD_STRING D4-Mikh-2
13788: PPUSH
13789: CALL_OW 88
// if Followed = AmME1 then
13793: LD_LOC 2
13797: PUSH
13798: LD_EXP 13
13802: EQUAL
13803: IFFALSE 13819
// Say ( AmME1 , D4-Sol1-2 ) else
13805: LD_EXP 13
13809: PPUSH
13810: LD_STRING D4-Sol1-2
13812: PPUSH
13813: CALL_OW 88
13817: GO 13831
// Say ( AmFE2 , D4-FSol1-2 ) ;
13819: LD_EXP 14
13823: PPUSH
13824: LD_STRING D4-FSol1-2
13826: PPUSH
13827: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
13831: LD_EXP 65
13835: PPUSH
13836: LD_STRING D4-Mikh-3
13838: PPUSH
13839: CALL_OW 88
// if Followed = AmME1 then
13843: LD_LOC 2
13847: PUSH
13848: LD_EXP 13
13852: EQUAL
13853: IFFALSE 13869
// Say ( AmME1 , D4-Sol1-3 ) else
13855: LD_EXP 13
13859: PPUSH
13860: LD_STRING D4-Sol1-3
13862: PPUSH
13863: CALL_OW 88
13867: GO 13881
// Say ( AmFE2 , D4-FSol1-3 ) ;
13869: LD_EXP 14
13873: PPUSH
13874: LD_STRING D4-FSol1-3
13876: PPUSH
13877: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
13881: LD_EXP 65
13885: PPUSH
13886: LD_STRING D4-Mikh-4
13888: PPUSH
13889: CALL_OW 88
// end else
13893: GO 14086
// begin i = Nearest ( Mikhail , FilterAllUnits ( [ f_side , americans ] ) ) ;
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_EXP 65
13904: PPUSH
13905: LD_INT 22
13907: PUSH
13908: LD_EXP 3
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: PPUSH
13922: CALL 10131 0 2
13926: ST_TO_ADDR
// if GetSex ( i ) = sex_male then
13927: LD_VAR 0 3
13931: PPUSH
13932: CALL_OW 258
13936: PUSH
13937: LD_INT 1
13939: EQUAL
13940: IFFALSE 13956
// Say ( i , D4-Sol1-1 ) else
13942: LD_VAR 0 3
13946: PPUSH
13947: LD_STRING D4-Sol1-1
13949: PPUSH
13950: CALL_OW 88
13954: GO 13968
// Say ( i , D4-FSol1-1 ) ;
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_STRING D4-FSol1-1
13963: PPUSH
13964: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
13968: LD_EXP 65
13972: PPUSH
13973: LD_STRING D4-Mikh-2
13975: PPUSH
13976: CALL_OW 88
// if GetSex ( i ) = sex_male then
13980: LD_VAR 0 3
13984: PPUSH
13985: CALL_OW 258
13989: PUSH
13990: LD_INT 1
13992: EQUAL
13993: IFFALSE 14009
// Say ( i , D4-Sol1-2 ) else
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_STRING D4-Sol1-2
14002: PPUSH
14003: CALL_OW 88
14007: GO 14021
// Say ( i , D4-FSol1-2 ) ;
14009: LD_VAR 0 3
14013: PPUSH
14014: LD_STRING D4-FSol1-2
14016: PPUSH
14017: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
14021: LD_EXP 65
14025: PPUSH
14026: LD_STRING D4-Mikh-3
14028: PPUSH
14029: CALL_OW 88
// if GetSex ( i ) = sex_male then
14033: LD_VAR 0 3
14037: PPUSH
14038: CALL_OW 258
14042: PUSH
14043: LD_INT 1
14045: EQUAL
14046: IFFALSE 14062
// Say ( i , D4-Sol1-3 ) else
14048: LD_VAR 0 3
14052: PPUSH
14053: LD_STRING D4-Sol1-3
14055: PPUSH
14056: CALL_OW 88
14060: GO 14074
// Say ( i , D4-FSol1-3 ) ;
14062: LD_VAR 0 3
14066: PPUSH
14067: LD_STRING D4-FSol1-3
14069: PPUSH
14070: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
14074: LD_EXP 65
14078: PPUSH
14079: LD_STRING D4-Mikh-4
14081: PPUSH
14082: CALL_OW 88
// end ; answer = Query ( Qs1 ) ;
14086: LD_ADDR_VAR 0 1
14090: PUSH
14091: LD_STRING Qs1
14093: PPUSH
14094: CALL_OW 97
14098: ST_TO_ADDR
// DialogueOff ;
14099: CALL_OW 7
// case answer of 1 :
14103: LD_VAR 0 1
14107: PUSH
14108: LD_INT 1
14110: DOUBLE
14111: EQUAL
14112: IFTRUE 14116
14114: GO 14187
14116: POP
// begin SetAttitude ( americans , russians1 , att_enemy , true ) ;
14117: LD_EXP 3
14121: PPUSH
14122: LD_EXP 6
14126: PPUSH
14127: LD_INT 2
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: CALL_OW 80
// ComAttackUnit ( Followed , Mikhail ) ;
14137: LD_LOC 2
14141: PPUSH
14142: LD_EXP 65
14146: PPUSH
14147: CALL_OW 115
// ComFree ( Mikhail ) ;
14151: LD_EXP 65
14155: PPUSH
14156: CALL_OW 139
// Mikhails_outcome = - 1 ;
14160: LD_ADDR_LOC 3
14164: PUSH
14165: LD_INT 1
14167: NEG
14168: ST_TO_ADDR
// Mikhail_status := 2 ;
14169: LD_ADDR_LOC 4
14173: PUSH
14174: LD_INT 2
14176: ST_TO_ADDR
// mikhail_marked_for_death = true ;
14177: LD_ADDR_EXP 42
14181: PUSH
14182: LD_INT 1
14184: ST_TO_ADDR
// end ; 2 :
14185: GO 14362
14187: LD_INT 2
14189: DOUBLE
14190: EQUAL
14191: IFTRUE 14195
14193: GO 14304
14195: POP
// begin DoNotAttack ( russians , Followed ) ;
14196: LD_EXP 5
14200: PPUSH
14201: LD_LOC 2
14205: PPUSH
14206: CALL_OW 471
// enable ( Mikhail_captured ) ;
14210: LD_EXP 36
14214: ENABLE_MARKED
// enable ( tigers_allowed ) ;
14215: LD_EXP 81
14219: ENABLE_MARKED
// ComMoveUnit ( Mikhail , Followed ) ;
14220: LD_EXP 65
14224: PPUSH
14225: LD_LOC 2
14229: PPUSH
14230: CALL_OW 112
// while GetDistUnits ( Mikhail , John ) > 5 do
14234: LD_EXP 65
14238: PPUSH
14239: LD_EXP 7
14243: PPUSH
14244: CALL_OW 296
14248: PUSH
14249: LD_INT 5
14251: GREATER
14252: IFFALSE 14277
// begin ComMoveUnit ( Followed , John ) ;
14254: LD_LOC 2
14258: PPUSH
14259: LD_EXP 7
14263: PPUSH
14264: CALL_OW 112
// Wait ( 0 0$1 ) ;
14268: LD_INT 35
14270: PPUSH
14271: CALL_OW 67
// end ;
14275: GO 14234
// ComStop ( Followed ) ;
14277: LD_LOC 2
14281: PPUSH
14282: CALL_OW 141
// Mikhails_outcome = 1 ;
14286: LD_ADDR_LOC 3
14290: PUSH
14291: LD_INT 1
14293: ST_TO_ADDR
// Mikhail_status := 5 ;
14294: LD_ADDR_LOC 4
14298: PUSH
14299: LD_INT 5
14301: ST_TO_ADDR
// end ; 3 :
14302: GO 14362
14304: LD_INT 3
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14361
14312: POP
// begin ComMoveXY ( Mikhail , 4 , 6 ) ;
14313: LD_EXP 65
14317: PPUSH
14318: LD_INT 4
14320: PPUSH
14321: LD_INT 6
14323: PPUSH
14324: CALL_OW 111
// AddComHold ( Mikhail ) ;
14328: LD_EXP 65
14332: PPUSH
14333: CALL_OW 200
// enable ( remove_mikhail ) ;
14337: LD_EXP 43
14341: ENABLE_MARKED
// Mikhails_outcome = - 1 ;
14342: LD_ADDR_LOC 3
14346: PUSH
14347: LD_INT 1
14349: NEG
14350: ST_TO_ADDR
// Mikhail_status := 1 ;
14351: LD_ADDR_LOC 4
14355: PUSH
14356: LD_INT 1
14358: ST_TO_ADDR
// end ; end ;
14359: GO 14362
14361: POP
// end else
14362: GO 14365
// enable ;
14364: ENABLE
// end ; end ;
14365: PPOPN 3
14367: END
// every 0 0$1 trigger mikhail_marked_for_death do var started_running ;
14368: LD_EXP 42
14372: IFFALSE 14604
14374: GO 14376
14376: DISABLE
14377: LD_INT 0
14379: PPUSH
// begin started_running = false ;
14380: LD_ADDR_VAR 0 1
14384: PUSH
14385: LD_INT 0
14387: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14388: LD_INT 35
14390: PPUSH
14391: CALL_OW 67
// if IsDead ( Mikhail ) then
14395: LD_EXP 65
14399: PPUSH
14400: CALL_OW 301
14404: IFFALSE 14408
// exit ;
14406: GO 14604
// if not started_running then
14408: LD_VAR 0 1
14412: NOT
14413: IFFALSE 14473
// if FilterAllUnits ( [ [ f_side , americans ] , [ f_dist , Mikhail , 10 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
14415: LD_INT 22
14417: PUSH
14418: LD_EXP 3
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 91
14429: PUSH
14430: LD_EXP 65
14434: PUSH
14435: LD_INT 10
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PUSH
14443: LD_INT 3
14445: PUSH
14446: LD_INT 54
14448: PUSH
14449: EMPTY
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: PPUSH
14461: CALL_OW 69
14465: PUSH
14466: LD_INT 0
14468: GREATER
14469: IFFALSE 14473
// continue ;
14471: GO 14388
// started_running = true ;
14473: LD_ADDR_VAR 0 1
14477: PUSH
14478: LD_INT 1
14480: ST_TO_ADDR
// if GetDistUnitXY ( Mikhail , 4 , 6 ) <= 1 or GetDistUnitXY ( Mikhail , 91 , 1 ) <= 1 then
14481: LD_EXP 65
14485: PPUSH
14486: LD_INT 4
14488: PPUSH
14489: LD_INT 6
14491: PPUSH
14492: CALL_OW 297
14496: PUSH
14497: LD_INT 1
14499: LESSEQUAL
14500: PUSH
14501: LD_EXP 65
14505: PPUSH
14506: LD_INT 91
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: CALL_OW 297
14516: PUSH
14517: LD_INT 1
14519: LESSEQUAL
14520: OR
14521: IFFALSE 14534
// begin RemoveUnit ( Mikhail ) ;
14523: LD_EXP 65
14527: PPUSH
14528: CALL_OW 64
// exit ;
14532: GO 14604
// end ; if GetDistUnitXY ( Mikhail , 4 , 6 ) < GetDistUnitXY ( Mikhail , 91 , 1 ) then
14534: LD_EXP 65
14538: PPUSH
14539: LD_INT 4
14541: PPUSH
14542: LD_INT 6
14544: PPUSH
14545: CALL_OW 297
14549: PUSH
14550: LD_EXP 65
14554: PPUSH
14555: LD_INT 91
14557: PPUSH
14558: LD_INT 1
14560: PPUSH
14561: CALL_OW 297
14565: LESS
14566: IFFALSE 14585
// ComMoveXY ( Mikhail , 4 , 6 ) else
14568: LD_EXP 65
14572: PPUSH
14573: LD_INT 4
14575: PPUSH
14576: LD_INT 6
14578: PPUSH
14579: CALL_OW 111
14583: GO 14600
// ComMoveXY ( Mikhail , 91 , 1 ) ;
14585: LD_EXP 65
14589: PPUSH
14590: LD_INT 91
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 111
// until false ;
14600: LD_INT 0
14602: IFFALSE 14388
// end ;
14604: PPOPN 1
14606: END
// every 0 0$0.5 trigger IsAt ( Mikhail , 4 , 6 ) marked 11 do
14607: LD_EXP 65
14611: PPUSH
14612: LD_INT 4
14614: PPUSH
14615: LD_INT 6
14617: PPUSH
14618: CALL_OW 307
14622: IFFALSE 14636
14624: GO 14626
14626: DISABLE
// begin RemoveUnit ( Mikhail ) ;
14627: LD_EXP 65
14631: PPUSH
14632: CALL_OW 64
// end ;
14636: END
// every 0 0$2 marked 4 do var Alive , Speaker ;
14637: GO 14639
14639: DISABLE
14640: LD_INT 0
14642: PPUSH
14643: PPUSH
// begin if IsOk ( Mikhail ) and GetDistUnits ( John , Mikhail ) < 6 then
14644: LD_EXP 65
14648: PPUSH
14649: CALL_OW 302
14653: PUSH
14654: LD_EXP 7
14658: PPUSH
14659: LD_EXP 65
14663: PPUSH
14664: CALL_OW 296
14668: PUSH
14669: LD_INT 6
14671: LESS
14672: AND
14673: IFFALSE 15229
// begin enable ( conversation ) ;
14675: LD_EXP 44
14679: ENABLE_MARKED
// ComTurnUnit ( Mikhail , John ) ;
14680: LD_EXP 65
14684: PPUSH
14685: LD_EXP 7
14689: PPUSH
14690: CALL_OW 119
// DialogueOn ;
14694: CALL_OW 6
// ComMoveUnit ( Mikhail , John ) ;
14698: LD_EXP 65
14702: PPUSH
14703: LD_EXP 7
14707: PPUSH
14708: CALL_OW 112
// Say ( John , D4b-JMM-1 ) ;
14712: LD_EXP 7
14716: PPUSH
14717: LD_STRING D4b-JMM-1
14719: PPUSH
14720: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
14724: LD_EXP 65
14728: PPUSH
14729: LD_STRING D4b-Mikh-1
14731: PPUSH
14732: CALL_OW 88
// Say ( John , D4b-JMM-2 ) ;
14736: LD_EXP 7
14740: PPUSH
14741: LD_STRING D4b-JMM-2
14743: PPUSH
14744: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
14748: LD_EXP 65
14752: PPUSH
14753: LD_STRING D4b-Mikh-2
14755: PPUSH
14756: CALL_OW 88
// Say ( John , D4b-JMM-3 ) ;
14760: LD_EXP 7
14764: PPUSH
14765: LD_STRING D4b-JMM-3
14767: PPUSH
14768: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
14772: LD_EXP 65
14776: PPUSH
14777: LD_STRING D4b-Mikh-3
14779: PPUSH
14780: CALL_OW 88
// Say ( John , D4b-JMM-4 ) ;
14784: LD_EXP 7
14788: PPUSH
14789: LD_STRING D4b-JMM-4
14791: PPUSH
14792: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
14796: LD_EXP 65
14800: PPUSH
14801: LD_STRING D4b-Mikh-4
14803: PPUSH
14804: CALL_OW 88
// Say ( John , D4b-JMM-5 ) ;
14808: LD_EXP 7
14812: PPUSH
14813: LD_STRING D4b-JMM-5
14815: PPUSH
14816: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
14820: LD_EXP 65
14824: PPUSH
14825: LD_STRING D4b-Mikh-5
14827: PPUSH
14828: CALL_OW 88
// Say ( John , D4b-JMM-6 ) ;
14832: LD_EXP 7
14836: PPUSH
14837: LD_STRING D4b-JMM-6
14839: PPUSH
14840: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
14844: LD_EXP 65
14848: PPUSH
14849: LD_STRING D4b-Mikh-6
14851: PPUSH
14852: CALL_OW 88
// Say ( John , D4b-JMM-7 ) ;
14856: LD_EXP 7
14860: PPUSH
14861: LD_STRING D4b-JMM-7
14863: PPUSH
14864: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
14868: LD_EXP 65
14872: PPUSH
14873: LD_STRING D4b-Mikh-7
14875: PPUSH
14876: CALL_OW 88
// Alive = UnitFilter ( [ AmME1 , AmFE2 , AmMSo3 , Nick ] , [ f_ok ] ) ;
14880: LD_ADDR_VAR 0 1
14884: PUSH
14885: LD_EXP 13
14889: PUSH
14890: LD_EXP 14
14894: PUSH
14895: LD_EXP 15
14899: PUSH
14900: LD_EXP 11
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: PPUSH
14911: LD_INT 50
14913: PUSH
14914: EMPTY
14915: LIST
14916: PPUSH
14917: CALL_OW 72
14921: ST_TO_ADDR
// if Alive > 0 then
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 0
14929: GREATER
14930: IFFALSE 14956
// Speaker = Alive [ Rand ( 1 , Alive ) ] ;
14932: LD_ADDR_VAR 0 2
14936: PUSH
14937: LD_VAR 0 1
14941: PUSH
14942: LD_INT 1
14944: PPUSH
14945: LD_VAR 0 1
14949: PPUSH
14950: CALL_OW 12
14954: ARRAY
14955: ST_TO_ADDR
// if GetSex ( Speaker ) = sex_male then
14956: LD_VAR 0 2
14960: PPUSH
14961: CALL_OW 258
14965: PUSH
14966: LD_INT 1
14968: EQUAL
14969: IFFALSE 14985
// Say ( Speaker , D4b-Sol1-7 ) else
14971: LD_VAR 0 2
14975: PPUSH
14976: LD_STRING D4b-Sol1-7
14978: PPUSH
14979: CALL_OW 88
14983: GO 14997
// Say ( Speaker , D4b-FSol1-7 ) ;
14985: LD_VAR 0 2
14989: PPUSH
14990: LD_STRING D4b-FSol1-7
14992: PPUSH
14993: CALL_OW 88
// Say ( John , D4b-JMM-8 ) ;
14997: LD_EXP 7
15001: PPUSH
15002: LD_STRING D4b-JMM-8
15004: PPUSH
15005: CALL_OW 88
// Alive = UnitFilter ( [ AmME1 , AmFE2 , AmMSo3 , Nick ] , [ f_ok ] ) ;
15009: LD_ADDR_VAR 0 1
15013: PUSH
15014: LD_EXP 13
15018: PUSH
15019: LD_EXP 14
15023: PUSH
15024: LD_EXP 15
15028: PUSH
15029: LD_EXP 11
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PPUSH
15040: LD_INT 50
15042: PUSH
15043: EMPTY
15044: LIST
15045: PPUSH
15046: CALL_OW 72
15050: ST_TO_ADDR
// if Alive > 0 then
15051: LD_VAR 0 1
15055: PUSH
15056: LD_INT 0
15058: GREATER
15059: IFFALSE 15085
// Speaker = Alive [ Rand ( 1 , Alive ) ] ;
15061: LD_ADDR_VAR 0 2
15065: PUSH
15066: LD_VAR 0 1
15070: PUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 12
15083: ARRAY
15084: ST_TO_ADDR
// if GetSex ( Speaker ) = sex_male then
15085: LD_VAR 0 2
15089: PPUSH
15090: CALL_OW 258
15094: PUSH
15095: LD_INT 1
15097: EQUAL
15098: IFFALSE 15114
// Say ( Speaker , D4b-Sol1-8 ) else
15100: LD_VAR 0 2
15104: PPUSH
15105: LD_STRING D4b-Sol1-8
15107: PPUSH
15108: CALL_OW 88
15112: GO 15126
// Say ( Speaker , D4b-FSol1-8 ) ;
15114: LD_VAR 0 2
15118: PPUSH
15119: LD_STRING D4b-FSol1-8
15121: PPUSH
15122: CALL_OW 88
// Say ( John , D4b-JMM-9 ) ;
15126: LD_EXP 7
15130: PPUSH
15131: LD_STRING D4b-JMM-9
15133: PPUSH
15134: CALL_OW 88
// DialogueOff ;
15138: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
15142: LD_STRING M3
15144: PPUSH
15145: CALL_OW 337
// enable ( depot ) ;
15149: LD_EXP 38
15153: ENABLE_MARKED
// disable ( conversation ) ;
15154: LD_EXP 44
15158: DISABLE_MARKED
// ComMoveUnit ( Mikhail , Followed ) ;
15159: LD_EXP 65
15163: PPUSH
15164: LD_LOC 2
15168: PPUSH
15169: CALL_OW 112
// repeat ComMoveXY ( Followed , 50 , 13 ) ;
15173: LD_LOC 2
15177: PPUSH
15178: LD_INT 50
15180: PPUSH
15181: LD_INT 13
15183: PPUSH
15184: CALL_OW 111
// Wait ( 0 0$1 ) ;
15188: LD_INT 35
15190: PPUSH
15191: CALL_OW 67
// until GetDistUnits ( dep1 , Mikhail ) < 5 ;
15195: LD_INT 1
15197: PPUSH
15198: LD_EXP 65
15202: PPUSH
15203: CALL_OW 296
15207: PUSH
15208: LD_INT 5
15210: LESS
15211: IFFALSE 15173
// NormalAttack ( russians , Followed ) ;
15213: LD_EXP 5
15217: PPUSH
15218: LD_LOC 2
15222: PPUSH
15223: CALL_OW 472
// end else
15227: GO 15230
// enable ;
15229: ENABLE
// end ;
15230: PPOPN 2
15232: END
// every 0 0$1 trigger GetDistUnits ( Followed , John ) > 5 marked 12 do
15233: LD_LOC 2
15237: PPUSH
15238: LD_EXP 7
15242: PPUSH
15243: CALL_OW 296
15247: PUSH
15248: LD_INT 5
15250: GREATER
15251: IFFALSE 15280
15253: GO 15255
15255: DISABLE
// begin ComStop ( Followed ) ;
15256: LD_LOC 2
15260: PPUSH
15261: CALL_OW 141
// ComMoveUnit ( Followed , John ) ;
15265: LD_LOC 2
15269: PPUSH
15270: LD_EXP 7
15274: PPUSH
15275: CALL_OW 112
// enable ;
15279: ENABLE
// end ;
15280: END
// every 0 0$0.5 marked 8 do
15281: GO 15283
15283: DISABLE
// begin if IsOk ( Mikhail ) and GetDistUnits ( dep1 , Mikhail ) < 10 then
15284: LD_EXP 65
15288: PPUSH
15289: CALL_OW 302
15293: PUSH
15294: LD_INT 1
15296: PPUSH
15297: LD_EXP 65
15301: PPUSH
15302: CALL_OW 296
15306: PUSH
15307: LD_INT 10
15309: LESS
15310: AND
15311: IFFALSE 15413
// begin ComMoveXY ( Mikhail , 52 , 13 ) ;
15313: LD_EXP 65
15317: PPUSH
15318: LD_INT 52
15320: PPUSH
15321: LD_INT 13
15323: PPUSH
15324: CALL_OW 111
// AddComHold ( Mikhail ) ;
15328: LD_EXP 65
15332: PPUSH
15333: CALL_OW 200
// WaitTask ( Mikhail , 0.5 ) ;
15337: LD_EXP 65
15341: PPUSH
15342: LD_REAL  5.00000000000000E-0001
15345: PPUSH
15346: CALL 3295 0 2
// SetSide ( Mikhail , americans ) ;
15350: LD_EXP 65
15354: PPUSH
15355: LD_EXP 3
15359: PPUSH
15360: CALL_OW 235
// repeat ComEnterUnit ( Mikhail , dep1 ) ;
15364: LD_EXP 65
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 120
// Wait ( 1 ) ;
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 67
// until IsInUnit ( Mikhail ) = dep1 ;
15383: LD_EXP 65
15387: PPUSH
15388: CALL_OW 310
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: IFFALSE 15364
// Mikhail_in_depot = true ;
15398: LD_ADDR_EXP 39
15402: PUSH
15403: LD_INT 1
15405: ST_TO_ADDR
// enable ( great_escape ) ;
15406: LD_EXP 40
15410: ENABLE_MARKED
// end else
15411: GO 15414
// enable ;
15413: ENABLE
// end ;
15414: END
// every 0 0$4 marked 9 do var AmVehicles , AmV1 , AmV2 , Un , Humans_In_Depot_Left , Buildings_In_Depot_Left , Vehicles_In_Depot_Left , Humans_In_Depot_Right , Buildings_In_Depot_Right , Vehicles_In_Depot_Right , Humans_In_Depot_Back , Buildings_In_Depot_Back , Vehicles_In_Depot_Back ;
15415: GO 15417
15417: DISABLE
15418: LD_INT 0
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
// begin AmV1 = 0 ;
15433: LD_ADDR_VAR 0 2
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// AmV2 = 0 ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// AmVehicles = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_vehicle ] ] ) ;
15449: LD_ADDR_VAR 0 1
15453: PUSH
15454: LD_INT 22
15456: PUSH
15457: LD_EXP 3
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 21
15468: PUSH
15469: LD_INT 2
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PPUSH
15480: CALL_OW 69
15484: ST_TO_ADDR
// if AmVehicles ^ [ ] > 0 then
15485: LD_VAR 0 1
15489: PUSH
15490: EMPTY
15491: ADD
15492: PUSH
15493: LD_INT 0
15495: GREATER
15496: IFFALSE 15512
// AmV1 = AmVehicles [ 1 ] ;
15498: LD_ADDR_VAR 0 2
15502: PUSH
15503: LD_VAR 0 1
15507: PUSH
15508: LD_INT 1
15510: ARRAY
15511: ST_TO_ADDR
// if AmVehicles ^ [ ] > 1 then
15512: LD_VAR 0 1
15516: PUSH
15517: EMPTY
15518: ADD
15519: PUSH
15520: LD_INT 1
15522: GREATER
15523: IFFALSE 15539
// AmV2 = AmVehicles [ 2 ] ;
15525: LD_ADDR_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: PUSH
15535: LD_INT 2
15537: ARRAY
15538: ST_TO_ADDR
// Humans_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15539: LD_ADDR_VAR 0 5
15543: PUSH
15544: LD_INT 20
15546: PPUSH
15547: LD_INT 22
15549: PUSH
15550: LD_EXP 3
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 21
15561: PUSH
15562: LD_INT 1
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 50
15571: PUSH
15572: EMPTY
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 70
15584: ST_TO_ADDR
// Buildings_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
15585: LD_ADDR_VAR 0 6
15589: PUSH
15590: LD_INT 20
15592: PPUSH
15593: LD_INT 22
15595: PUSH
15596: LD_EXP 3
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 21
15607: PUSH
15608: LD_INT 3
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 50
15617: PUSH
15618: EMPTY
15619: LIST
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 70
15630: ST_TO_ADDR
// Vehicles_In_Depot_Left = FilterUnitsInArea ( Dep_Left , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15631: LD_ADDR_VAR 0 7
15635: PUSH
15636: LD_INT 20
15638: PPUSH
15639: LD_INT 22
15641: PUSH
15642: LD_EXP 3
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 21
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 50
15663: PUSH
15664: EMPTY
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 70
15676: ST_TO_ADDR
// for Un in Buildings_In_Depot_Left do
15677: LD_ADDR_VAR 0 4
15681: PUSH
15682: LD_VAR 0 6
15686: PUSH
15687: FOR_IN
15688: IFFALSE 15713
// Humans_In_Depot_Left = Humans_In_Depot_Left ^ UnitsInside ( Un ) ;
15690: LD_ADDR_VAR 0 5
15694: PUSH
15695: LD_VAR 0 5
15699: PUSH
15700: LD_VAR 0 4
15704: PPUSH
15705: CALL_OW 313
15709: ADD
15710: ST_TO_ADDR
15711: GO 15687
15713: POP
15714: POP
// for Un in Vehicles_In_Depot_Left do
15715: LD_ADDR_VAR 0 4
15719: PUSH
15720: LD_VAR 0 7
15724: PUSH
15725: FOR_IN
15726: IFFALSE 15751
// Humans_In_Depot_Left = Humans_In_Depot_Left ^ UnitsInside ( Un ) ;
15728: LD_ADDR_VAR 0 5
15732: PUSH
15733: LD_VAR 0 5
15737: PUSH
15738: LD_VAR 0 4
15742: PPUSH
15743: CALL_OW 313
15747: ADD
15748: ST_TO_ADDR
15749: GO 15725
15751: POP
15752: POP
// Humans_In_Depot_Left = Humans_In_Depot_Left diff Mikhail ;
15753: LD_ADDR_VAR 0 5
15757: PUSH
15758: LD_VAR 0 5
15762: PUSH
15763: LD_EXP 65
15767: DIFF
15768: ST_TO_ADDR
// Humans_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15769: LD_ADDR_VAR 0 8
15773: PUSH
15774: LD_INT 21
15776: PPUSH
15777: LD_INT 22
15779: PUSH
15780: LD_EXP 3
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 21
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 50
15801: PUSH
15802: EMPTY
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 70
15814: ST_TO_ADDR
// Buildings_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
15815: LD_ADDR_VAR 0 9
15819: PUSH
15820: LD_INT 21
15822: PPUSH
15823: LD_INT 22
15825: PUSH
15826: LD_EXP 3
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 21
15837: PUSH
15838: LD_INT 3
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL_OW 70
15860: ST_TO_ADDR
// Vehicles_In_Depot_Right = FilterUnitsInArea ( Dep_Right , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
15861: LD_ADDR_VAR 0 10
15865: PUSH
15866: LD_INT 21
15868: PPUSH
15869: LD_INT 22
15871: PUSH
15872: LD_EXP 3
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 21
15883: PUSH
15884: LD_INT 2
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 50
15893: PUSH
15894: EMPTY
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: PPUSH
15902: CALL_OW 70
15906: ST_TO_ADDR
// for Un in Buildings_In_Depot_Right do
15907: LD_ADDR_VAR 0 4
15911: PUSH
15912: LD_VAR 0 9
15916: PUSH
15917: FOR_IN
15918: IFFALSE 15943
// Humans_In_Depot_Right = Humans_In_Depot_Right ^ UnitsInside ( Un ) ;
15920: LD_ADDR_VAR 0 8
15924: PUSH
15925: LD_VAR 0 8
15929: PUSH
15930: LD_VAR 0 4
15934: PPUSH
15935: CALL_OW 313
15939: ADD
15940: ST_TO_ADDR
15941: GO 15917
15943: POP
15944: POP
// for Un in Vehicles_In_Depot_Right do
15945: LD_ADDR_VAR 0 4
15949: PUSH
15950: LD_VAR 0 10
15954: PUSH
15955: FOR_IN
15956: IFFALSE 15981
// Humans_In_Depot_Right = Humans_In_Depot_Right ^ UnitsInside ( Un ) ;
15958: LD_ADDR_VAR 0 8
15962: PUSH
15963: LD_VAR 0 8
15967: PUSH
15968: LD_VAR 0 4
15972: PPUSH
15973: CALL_OW 313
15977: ADD
15978: ST_TO_ADDR
15979: GO 15955
15981: POP
15982: POP
// Humans_In_Depot_Right = Humans_In_Depot_Right diff Mikhail ;
15983: LD_ADDR_VAR 0 8
15987: PUSH
15988: LD_VAR 0 8
15992: PUSH
15993: LD_EXP 65
15997: DIFF
15998: ST_TO_ADDR
// Humans_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15999: LD_ADDR_VAR 0 11
16003: PUSH
16004: LD_INT 19
16006: PPUSH
16007: LD_INT 22
16009: PUSH
16010: LD_EXP 3
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 21
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 50
16031: PUSH
16032: EMPTY
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 70
16044: ST_TO_ADDR
// Buildings_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
16045: LD_ADDR_VAR 0 12
16049: PUSH
16050: LD_INT 19
16052: PPUSH
16053: LD_INT 22
16055: PUSH
16056: LD_EXP 3
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 21
16067: PUSH
16068: LD_INT 3
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 50
16077: PUSH
16078: EMPTY
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: PPUSH
16086: CALL_OW 70
16090: ST_TO_ADDR
// Vehicles_In_Depot_Back = FilterUnitsInArea ( Dep_Back , [ [ f_side , americans ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
16091: LD_ADDR_VAR 0 13
16095: PUSH
16096: LD_INT 19
16098: PPUSH
16099: LD_INT 22
16101: PUSH
16102: LD_EXP 3
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 21
16113: PUSH
16114: LD_INT 2
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 50
16123: PUSH
16124: EMPTY
16125: LIST
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 70
16136: ST_TO_ADDR
// for Un in Buildings_In_Depot_Back do
16137: LD_ADDR_VAR 0 4
16141: PUSH
16142: LD_VAR 0 12
16146: PUSH
16147: FOR_IN
16148: IFFALSE 16173
// Humans_In_Depot_Back = Humans_In_Depot_Back ^ UnitsInside ( Un ) ;
16150: LD_ADDR_VAR 0 11
16154: PUSH
16155: LD_VAR 0 11
16159: PUSH
16160: LD_VAR 0 4
16164: PPUSH
16165: CALL_OW 313
16169: ADD
16170: ST_TO_ADDR
16171: GO 16147
16173: POP
16174: POP
// for Un in Vehicles_In_Depot_Back do
16175: LD_ADDR_VAR 0 4
16179: PUSH
16180: LD_VAR 0 13
16184: PUSH
16185: FOR_IN
16186: IFFALSE 16211
// Humans_In_Depot_Back = Humans_In_Depot_Back ^ UnitsInside ( Un ) ;
16188: LD_ADDR_VAR 0 11
16192: PUSH
16193: LD_VAR 0 11
16197: PUSH
16198: LD_VAR 0 4
16202: PPUSH
16203: CALL_OW 313
16207: ADD
16208: ST_TO_ADDR
16209: GO 16185
16211: POP
16212: POP
// Humans_In_Depot_Back = Humans_In_Depot_Back diff Mikhail ;
16213: LD_ADDR_VAR 0 11
16217: PUSH
16218: LD_VAR 0 11
16222: PUSH
16223: LD_EXP 65
16227: DIFF
16228: ST_TO_ADDR
// if ( Humans_In_Depot_Left = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16229: LD_VAR 0 5
16233: PUSH
16234: LD_INT 0
16236: EQUAL
16237: PUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 313
16245: PUSH
16246: LD_INT 2
16248: LESS
16249: AND
16250: IFFALSE 16394
// begin Mikhails_Escape_Disabled = false ;
16252: LD_ADDR_EXP 91
16256: PUSH
16257: LD_INT 0
16259: ST_TO_ADDR
// target_of_escape = [ 4 , 6 ] ;
16260: LD_ADDR_LOC 10
16264: PUSH
16265: LD_INT 4
16267: PUSH
16268: LD_INT 6
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16275: LD_EXP 65
16279: PPUSH
16280: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16284: LD_EXP 65
16288: PPUSH
16289: LD_EXP 6
16293: PPUSH
16294: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16298: LD_EXP 65
16302: PPUSH
16303: LD_INT 52
16305: PPUSH
16306: LD_INT 13
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16316: LD_ADDR_EXP 50
16320: PUSH
16321: LD_EXP 65
16325: PPUSH
16326: CALL_OW 256
16330: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16331: LD_EXP 45
16335: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16336: LD_EXP 3
16340: PPUSH
16341: LD_EXP 6
16345: PPUSH
16346: LD_INT 2
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 80
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16356: LD_EXP 65
16360: PPUSH
16361: LD_LOC 10
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PPUSH
16370: LD_LOC 10
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 171
// AddComHold ( Mikhail ) ;
16383: LD_EXP 65
16387: PPUSH
16388: CALL_OW 200
// end else
16392: GO 16770
// if ( Humans_In_Depot_Right = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16394: LD_VAR 0 8
16398: PUSH
16399: LD_INT 0
16401: EQUAL
16402: PUSH
16403: LD_INT 1
16405: PPUSH
16406: CALL_OW 313
16410: PUSH
16411: LD_INT 2
16413: LESS
16414: AND
16415: IFFALSE 16589
// begin Mikhails_Escape_Disabled = false ;
16417: LD_ADDR_EXP 91
16421: PUSH
16422: LD_INT 0
16424: ST_TO_ADDR
// target_of_escape = [ 61 , 1 ] ;
16425: LD_ADDR_LOC 10
16429: PUSH
16430: LD_INT 61
16432: PUSH
16433: LD_INT 1
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16440: LD_EXP 65
16444: PPUSH
16445: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16449: LD_EXP 65
16453: PPUSH
16454: LD_EXP 6
16458: PPUSH
16459: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16463: LD_EXP 65
16467: PPUSH
16468: LD_INT 52
16470: PPUSH
16471: LD_INT 13
16473: PPUSH
16474: LD_INT 0
16476: PPUSH
16477: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16481: LD_ADDR_EXP 50
16485: PUSH
16486: LD_EXP 65
16490: PPUSH
16491: CALL_OW 256
16495: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16496: LD_EXP 45
16500: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16501: LD_EXP 3
16505: PPUSH
16506: LD_EXP 6
16510: PPUSH
16511: LD_INT 2
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: CALL_OW 80
// AddComMoveXY ( Mikhail , 57 , 11 ) ;
16521: LD_EXP 65
16525: PPUSH
16526: LD_INT 57
16528: PPUSH
16529: LD_INT 11
16531: PPUSH
16532: CALL_OW 171
// AddComMoveXY ( Mikhail , 63 , 9 ) ;
16536: LD_EXP 65
16540: PPUSH
16541: LD_INT 63
16543: PPUSH
16544: LD_INT 9
16546: PPUSH
16547: CALL_OW 171
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16551: LD_EXP 65
16555: PPUSH
16556: LD_LOC 10
16560: PUSH
16561: LD_INT 1
16563: ARRAY
16564: PPUSH
16565: LD_LOC 10
16569: PUSH
16570: LD_INT 2
16572: ARRAY
16573: PPUSH
16574: CALL_OW 171
// AddComHold ( Mikhail ) ;
16578: LD_EXP 65
16582: PPUSH
16583: CALL_OW 200
// end else
16587: GO 16770
// if ( Humans_In_Depot_Back = 0 ) and ( UnitsInside ( dep1 ) < 2 ) then
16589: LD_VAR 0 11
16593: PUSH
16594: LD_INT 0
16596: EQUAL
16597: PUSH
16598: LD_INT 1
16600: PPUSH
16601: CALL_OW 313
16605: PUSH
16606: LD_INT 2
16608: LESS
16609: AND
16610: IFFALSE 16769
// begin Mikhails_Escape_Disabled = false ;
16612: LD_ADDR_EXP 91
16616: PUSH
16617: LD_INT 0
16619: ST_TO_ADDR
// target_of_escape = [ 47 , 1 ] ;
16620: LD_ADDR_LOC 10
16624: PUSH
16625: LD_INT 47
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
16635: LD_EXP 65
16639: PPUSH
16640: CALL_OW 64
// SetSide ( Mikhail , russians1 ) ;
16644: LD_EXP 65
16648: PPUSH
16649: LD_EXP 6
16653: PPUSH
16654: CALL_OW 235
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
16658: LD_EXP 65
16662: PPUSH
16663: LD_INT 52
16665: PPUSH
16666: LD_INT 13
16668: PPUSH
16669: LD_INT 0
16671: PPUSH
16672: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
16676: LD_ADDR_EXP 50
16680: PUSH
16681: LD_EXP 65
16685: PPUSH
16686: CALL_OW 256
16690: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
16691: LD_EXP 45
16695: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
16696: LD_EXP 3
16700: PPUSH
16701: LD_EXP 6
16705: PPUSH
16706: LD_INT 2
16708: PPUSH
16709: LD_INT 1
16711: PPUSH
16712: CALL_OW 80
// AddComMoveXY ( Mikhail , 49 , 7 ) ;
16716: LD_EXP 65
16720: PPUSH
16721: LD_INT 49
16723: PPUSH
16724: LD_INT 7
16726: PPUSH
16727: CALL_OW 171
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16731: LD_EXP 65
16735: PPUSH
16736: LD_LOC 10
16740: PUSH
16741: LD_INT 1
16743: ARRAY
16744: PPUSH
16745: LD_LOC 10
16749: PUSH
16750: LD_INT 2
16752: ARRAY
16753: PPUSH
16754: CALL_OW 171
// AddComHold ( Mikhail ) ;
16758: LD_EXP 65
16762: PPUSH
16763: CALL_OW 200
// end else
16767: GO 16770
// enable ;
16769: ENABLE
// end ;
16770: PPOPN 13
16772: END
// every 0 0$1 trigger IsOk ( Mikhail ) and not ( IsBusy ( Mikhail ) ) marked 13 do
16773: LD_EXP 65
16777: PPUSH
16778: CALL_OW 302
16782: PUSH
16783: LD_EXP 65
16787: PPUSH
16788: CALL_OW 315
16792: NOT
16793: AND
16794: IFFALSE 16826
16796: GO 16798
16798: DISABLE
// begin ComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
16799: LD_EXP 65
16803: PPUSH
16804: LD_LOC 10
16808: PUSH
16809: LD_INT 1
16811: ARRAY
16812: PPUSH
16813: LD_LOC 10
16817: PUSH
16818: LD_INT 2
16820: ARRAY
16821: PPUSH
16822: CALL_OW 111
// end ;
16826: END
// every 0 0$2 trigger Mikhails_outcome = - 2 and Mikhails_lives = 1000 do var NearSol ;
16827: LD_LOC 3
16831: PUSH
16832: LD_INT 2
16834: NEG
16835: EQUAL
16836: PUSH
16837: LD_EXP 50
16841: PUSH
16842: LD_INT 1000
16844: EQUAL
16845: AND
16846: IFFALSE 17120
16848: GO 16850
16850: DISABLE
16851: LD_INT 0
16853: PPUSH
// begin if GetDistUnits ( John , dep1 ) < 6 then
16854: LD_EXP 7
16858: PPUSH
16859: LD_INT 1
16861: PPUSH
16862: CALL_OW 296
16866: PUSH
16867: LD_INT 6
16869: LESS
16870: IFFALSE 17119
// begin NearSol = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , americans ] , [ f_sex , sex_male ] ] ) diff [ John , Cyrus ] , 52 , 13 ) ;
16872: LD_ADDR_VAR 0 1
16876: PUSH
16877: LD_INT 22
16879: PUSH
16880: LD_EXP 3
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 26
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: PUSH
16908: LD_EXP 7
16912: PUSH
16913: LD_EXP 8
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: DIFF
16922: PPUSH
16923: LD_INT 52
16925: PPUSH
16926: LD_INT 13
16928: PPUSH
16929: CALL_OW 73
16933: ST_TO_ADDR
// CenterOnUnits ( dep1 ) ;
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 85
// ComMoveXY ( John , 52 , 13 ) ;
16941: LD_EXP 7
16945: PPUSH
16946: LD_INT 52
16948: PPUSH
16949: LD_INT 13
16951: PPUSH
16952: CALL_OW 111
// DialogueOn ;
16956: CALL_OW 6
// Say ( John , D7-JMM-1 ) ;
16960: LD_EXP 7
16964: PPUSH
16965: LD_STRING D7-JMM-1
16967: PPUSH
16968: CALL_OW 88
// if NearSol then
16972: LD_VAR 0 1
16976: IFFALSE 17038
// begin Say ( NearSol , D7-Sol1-1 ) ;
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_STRING D7-Sol1-1
16985: PPUSH
16986: CALL_OW 88
// Say ( John , D7-JMM-2 ) ;
16990: LD_EXP 7
16994: PPUSH
16995: LD_STRING D7-JMM-2
16997: PPUSH
16998: CALL_OW 88
// Say ( NearSOl , D7-Sol1-2 ) ;
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_STRING D7-Sol1-2
17009: PPUSH
17010: CALL_OW 88
// Say ( John , D7-JMM-3 ) ;
17014: LD_EXP 7
17018: PPUSH
17019: LD_STRING D7-JMM-3
17021: PPUSH
17022: CALL_OW 88
// Say ( NearSol , D7-Sol1-3 ) ;
17026: LD_VAR 0 1
17030: PPUSH
17031: LD_STRING D7-Sol1-3
17033: PPUSH
17034: CALL_OW 88
// end ; if IsOk ( Cyrus ) and IsOk ( Lisa ) then
17038: LD_EXP 8
17042: PPUSH
17043: CALL_OW 302
17047: PUSH
17048: LD_EXP 12
17052: PPUSH
17053: CALL_OW 302
17057: AND
17058: IFFALSE 17113
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
17060: LD_EXP 8
17064: PPUSH
17065: LD_STRING D7-Cyrus-3
17067: PPUSH
17068: CALL_OW 88
// if NearSol then
17072: LD_VAR 0 1
17076: IFFALSE 17113
// begin Say ( NearSol , D7-Sol1-4 ) ;
17078: LD_VAR 0 1
17082: PPUSH
17083: LD_STRING D7-Sol1-4
17085: PPUSH
17086: CALL_OW 88
// if IsOk ( Lisa ) then
17090: LD_EXP 12
17094: PPUSH
17095: CALL_OW 302
17099: IFFALSE 17113
// Say ( Lisa , D7-Lisa-4 ) ;
17101: LD_EXP 12
17105: PPUSH
17106: LD_STRING D7-Lisa-4
17108: PPUSH
17109: CALL_OW 88
// end ; end ; DialogueOff ;
17113: CALL_OW 7
// end else
17117: GO 17120
// enable ;
17119: ENABLE
// end ;
17120: PPOPN 1
17122: END
// every 0 0$1 trigger ( GetLives ( Mikhail ) < Mikhails_lives ) and rep marked 13 do
17123: LD_EXP 65
17127: PPUSH
17128: CALL_OW 256
17132: PUSH
17133: LD_EXP 50
17137: LESS
17138: PUSH
17139: LD_EXP 49
17143: AND
17144: IFFALSE 17289
17146: GO 17148
17148: DISABLE
// begin if IsOk ( Mikhail ) then
17149: LD_EXP 65
17153: PPUSH
17154: CALL_OW 302
17158: IFFALSE 17289
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ) ;
17160: LD_ADDR_LOC 11
17164: PUSH
17165: LD_EXP 65
17169: PPUSH
17170: LD_INT 22
17172: PUSH
17173: LD_EXP 3
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 21
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 69
17200: PPUSH
17201: CALL 10131 0 2
17205: ST_TO_ADDR
// if GetSex ( attacker ) = sex_male then
17206: LD_LOC 11
17210: PPUSH
17211: CALL_OW 258
17215: PUSH
17216: LD_INT 1
17218: EQUAL
17219: IFFALSE 17248
// begin Say ( attacker , D7a-Sol1-1 ) ;
17221: LD_LOC 11
17225: PPUSH
17226: LD_STRING D7a-Sol1-1
17228: PPUSH
17229: CALL_OW 88
// enable ( firing1 ) ;
17233: LD_EXP 51
17237: ENABLE_MARKED
// rep = false ;
17238: LD_ADDR_EXP 49
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// end else
17246: GO 17273
// begin Say ( attacker , D7a-FSol1-1 ) ;
17248: LD_LOC 11
17252: PPUSH
17253: LD_STRING D7a-FSol1-1
17255: PPUSH
17256: CALL_OW 88
// enable ( firing2 ) ;
17260: LD_EXP 52
17264: ENABLE_MARKED
// rep = false ;
17265: LD_ADDR_EXP 49
17269: PUSH
17270: LD_INT 0
17272: ST_TO_ADDR
// end ; Mikhails_lives = GetLives ( Mikhail ) ;
17273: LD_ADDR_EXP 50
17277: PUSH
17278: LD_EXP 65
17282: PPUSH
17283: CALL_OW 256
17287: ST_TO_ADDR
// enable ;
17288: ENABLE
// end ; end ;
17289: END
// every 0 0$1 marked 14 do
17290: GO 17292
17292: DISABLE
// begin if IsDead ( Mikhail ) then
17293: LD_EXP 65
17297: PPUSH
17298: CALL_OW 301
17302: IFFALSE 17316
// Say ( attacker , D7a-Sol1-1a ) ;
17304: LD_LOC 11
17308: PPUSH
17309: LD_STRING D7a-Sol1-1a
17311: PPUSH
17312: CALL_OW 88
// end ;
17316: END
// every 0 0$1 marked 15 do
17317: GO 17319
17319: DISABLE
// begin if IsDead ( Mikhail ) then
17320: LD_EXP 65
17324: PPUSH
17325: CALL_OW 301
17329: IFFALSE 17343
// Say ( attacker , D7a-FSol1-1a ) ;
17331: LD_LOC 11
17335: PPUSH
17336: LD_STRING D7a-FSol1-1a
17338: PPUSH
17339: CALL_OW 88
// end ;
17343: END
// every 0 0$3 trigger ( GetLives ( dep1 ) < Dep1_lives or GetLives ( dep2 ) < Dep2_lives ) and not ( battle ) do
17344: LD_INT 1
17346: PPUSH
17347: CALL_OW 256
17351: PUSH
17352: LD_EXP 47
17356: LESS
17357: PUSH
17358: LD_INT 10
17360: PPUSH
17361: CALL_OW 256
17365: PUSH
17366: LD_EXP 48
17370: LESS
17371: OR
17372: PUSH
17373: LD_EXP 75
17377: NOT
17378: AND
17379: IFFALSE 17490
17381: GO 17383
17383: DISABLE
// begin if ( GetLives ( dep1 ) < Dep1_lives and GetDistUnits ( dep1 , John ) < 20 ) or ( GetLives ( dep2 ) < Dep2_lives and GetDistUnits ( dep2 , John ) < 20 ) then
17384: LD_INT 1
17386: PPUSH
17387: CALL_OW 256
17391: PUSH
17392: LD_EXP 47
17396: LESS
17397: PUSH
17398: LD_INT 1
17400: PPUSH
17401: LD_EXP 7
17405: PPUSH
17406: CALL_OW 296
17410: PUSH
17411: LD_INT 20
17413: LESS
17414: AND
17415: PUSH
17416: LD_INT 10
17418: PPUSH
17419: CALL_OW 256
17423: PUSH
17424: LD_EXP 48
17428: LESS
17429: PUSH
17430: LD_INT 10
17432: PPUSH
17433: LD_EXP 7
17437: PPUSH
17438: CALL_OW 296
17442: PUSH
17443: LD_INT 20
17445: LESS
17446: AND
17447: OR
17448: IFFALSE 17464
// Say ( John , D8-JMM-1 ) else
17450: LD_EXP 7
17454: PPUSH
17455: LD_STRING D8-JMM-1
17457: PPUSH
17458: CALL_OW 88
17462: GO 17490
// begin Dep1_lives = GetLives ( dep1 ) ;
17464: LD_ADDR_EXP 47
17468: PUSH
17469: LD_INT 1
17471: PPUSH
17472: CALL_OW 256
17476: ST_TO_ADDR
// Dep2_lives = GetLives ( dep2 ) ;
17477: LD_ADDR_EXP 48
17481: PUSH
17482: LD_INT 10
17484: PPUSH
17485: CALL_OW 256
17489: ST_TO_ADDR
// end ; end ;
17490: END
// function place_tiger ( name , area ) ; var i , x_sour , y_sour ; begin
17491: LD_INT 0
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
// InitUc ;
17497: CALL_OW 18
// InitHc ;
17501: CALL_OW 19
// hc_sex = sex_male ;
17505: LD_ADDR_OWVAR 27
17509: PUSH
17510: LD_INT 1
17512: ST_TO_ADDR
// uc_side = 0 ;
17513: LD_ADDR_OWVAR 20
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// uc_nation = nation_nature ;
17521: LD_ADDR_OWVAR 21
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// hc_class = class_tiger ;
17529: LD_ADDR_OWVAR 28
17533: PUSH
17534: LD_INT 14
17536: ST_TO_ADDR
// hc_skills = [ Tiger_skill , 0 , 0 , 0 ] ;
17537: LD_ADDR_OWVAR 31
17541: PUSH
17542: LD_EXP 103
17546: PUSH
17547: LD_INT 0
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: ST_TO_ADDR
// hc_agressivity = 50 ;
17562: LD_ADDR_OWVAR 35
17566: PUSH
17567: LD_INT 50
17569: ST_TO_ADDR
// i = 5 ;
17570: LD_ADDR_VAR 0 4
17574: PUSH
17575: LD_INT 5
17577: ST_TO_ADDR
// repeat i = i - 1 ;
17578: LD_ADDR_VAR 0 4
17582: PUSH
17583: LD_VAR 0 4
17587: PUSH
17588: LD_INT 1
17590: MINUS
17591: ST_TO_ADDR
// sour = RandHexArea ( area , false ) ;
17592: LD_ADDR_LOC 9
17596: PUSH
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_INT 0
17604: PPUSH
17605: CALL_OW 16
17609: ST_TO_ADDR
// until not ( SeeXY ( americans , sour [ 1 ] , sour [ 2 ] ) ) or i < 1 ;
17610: LD_EXP 3
17614: PPUSH
17615: LD_LOC 9
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: PPUSH
17624: LD_LOC 9
17628: PUSH
17629: LD_INT 2
17631: ARRAY
17632: PPUSH
17633: CALL_OW 293
17637: NOT
17638: PUSH
17639: LD_VAR 0 4
17643: PUSH
17644: LD_INT 1
17646: LESS
17647: OR
17648: IFFALSE 17578
// name = CreateHuman ;
17650: LD_ADDR_VAR 0 1
17654: PUSH
17655: CALL_OW 44
17659: ST_TO_ADDR
// if not ( SeeXY ( americans , sour [ 1 ] , sour [ 2 ] ) ) then
17660: LD_EXP 3
17664: PPUSH
17665: LD_LOC 9
17669: PUSH
17670: LD_INT 1
17672: ARRAY
17673: PPUSH
17674: LD_LOC 9
17678: PUSH
17679: LD_INT 2
17681: ARRAY
17682: PPUSH
17683: CALL_OW 293
17687: NOT
17688: IFFALSE 17720
// PlaceUnitXY ( name , sour [ 1 ] , sour [ 2 ] , false ) ;
17690: LD_VAR 0 1
17694: PPUSH
17695: LD_LOC 9
17699: PUSH
17700: LD_INT 1
17702: ARRAY
17703: PPUSH
17704: LD_LOC 9
17708: PUSH
17709: LD_INT 2
17711: ARRAY
17712: PPUSH
17713: LD_INT 0
17715: PPUSH
17716: CALL_OW 48
// if not ( IsOk ( name ) ) then
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 302
17729: NOT
17730: IFFALSE 17751
// begin DestroyUnit ( name ) ;
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 65
// result = 0 ;
17741: LD_ADDR_VAR 0 3
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
// end else
17749: GO 17759
// result = 1 ;
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: LD_INT 1
17758: ST_TO_ADDR
// end ;
17759: LD_VAR 0 3
17763: RET
// every 2 2$0 marked 18 do var i ;
17764: GO 17766
17766: DISABLE
17767: LD_INT 0
17769: PPUSH
// begin for i = 1 to Difficulty do
17770: LD_ADDR_VAR 0 1
17774: PUSH
17775: DOUBLE
17776: LD_INT 1
17778: DEC
17779: ST_TO_ADDR
17780: LD_OWVAR 67
17784: PUSH
17785: FOR_TO
17786: IFFALSE 17890
// begin hc_sex = sex_male ;
17788: LD_ADDR_OWVAR 27
17792: PUSH
17793: LD_INT 1
17795: ST_TO_ADDR
// uc_side = 0 ;
17796: LD_ADDR_OWVAR 20
17800: PUSH
17801: LD_INT 0
17803: ST_TO_ADDR
// uc_nation = nation_nature ;
17804: LD_ADDR_OWVAR 21
17808: PUSH
17809: LD_INT 0
17811: ST_TO_ADDR
// hc_class = class_tiger ;
17812: LD_ADDR_OWVAR 28
17816: PUSH
17817: LD_INT 14
17819: ST_TO_ADDR
// hc_skills = [ Tiger_skill , 0 , 0 , 0 ] ;
17820: LD_ADDR_OWVAR 31
17824: PUSH
17825: LD_EXP 103
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: ST_TO_ADDR
// hc_agressivity = 5 + 15 * Difficulty ;
17845: LD_ADDR_OWVAR 35
17849: PUSH
17850: LD_INT 5
17852: PUSH
17853: LD_INT 15
17855: PUSH
17856: LD_OWVAR 67
17860: MUL
17861: PLUS
17862: ST_TO_ADDR
// tiger = CreateHuman ;
17863: LD_ADDR_LOC 8
17867: PUSH
17868: CALL_OW 44
17872: ST_TO_ADDR
// PlaceUnitArea ( tiger , wood , false ) ;
17873: LD_LOC 8
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 0
17883: PPUSH
17884: CALL_OW 49
// end ;
17888: GO 17785
17890: POP
17891: POP
// end ;
17892: PPOPN 1
17894: END
// every 6 6$0 trigger Rand ( 1 , number_of_crates ) = 1 do
17895: LD_INT 1
17897: PPUSH
17898: LD_EXP 76
17902: PPUSH
17903: CALL_OW 12
17907: PUSH
17908: LD_INT 1
17910: EQUAL
17911: IFFALSE 17927
17913: GO 17915
17915: DISABLE
// begin CreateCratesAnywhere ( 3 , true ) ;
17916: LD_INT 3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 57
// enable ;
17926: ENABLE
// end ;
17927: END
// every 0 0$0.1 marked 19 do
17928: GO 17930
17930: DISABLE
// begin ComMoveXY ( tigers , 98 , 2 ) ;
17931: LD_EXP 70
17935: PPUSH
17936: LD_INT 98
17938: PPUSH
17939: LD_INT 2
17941: PPUSH
17942: CALL_OW 111
// for tiger in tigers do
17946: LD_ADDR_LOC 8
17950: PUSH
17951: LD_EXP 70
17955: PUSH
17956: FOR_IN
17957: IFFALSE 17982
// begin WaitTask ( tiger , 1 ) ;
17959: LD_LOC 8
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL 3295 0 2
// RemoveUnit ( tiger ) ;
17971: LD_LOC 8
17975: PPUSH
17976: CALL_OW 64
// end ;
17980: GO 17956
17982: POP
17983: POP
// end ;
17984: END
// every 0 0$3 trigger tick > Time_of_attack do var Un ;
17985: LD_OWVAR 1
17989: PUSH
17990: LD_EXP 26
17994: GREATER
17995: IFFALSE 18395
17997: GO 17999
17999: DISABLE
18000: LD_INT 0
18002: PPUSH
// begin if Attack_canceled then
18003: LD_EXP 93
18007: IFFALSE 18083
// begin DialogueOn ;
18009: CALL_OW 6
// SayRadio ( Powell , D6-Pow-1 ) ;
18013: LD_EXP 16
18017: PPUSH
18018: LD_STRING D6-Pow-1
18020: PPUSH
18021: CALL_OW 94
// Say ( John , D6-JMM-1 ) ;
18025: LD_EXP 7
18029: PPUSH
18030: LD_STRING D6-JMM-1
18032: PPUSH
18033: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
18037: LD_EXP 16
18041: PPUSH
18042: LD_STRING D6-Pow-2
18044: PPUSH
18045: CALL_OW 94
// Say ( John , D6-JMM-2 ) ;
18049: LD_EXP 7
18053: PPUSH
18054: LD_STRING D6-JMM-2
18056: PPUSH
18057: CALL_OW 88
// DialogueOff ;
18061: CALL_OW 7
// battle = false ;
18065: LD_ADDR_EXP 75
18069: PUSH
18070: LD_INT 0
18072: ST_TO_ADDR
// end_of_m = 1 ;
18073: LD_ADDR_LOC 5
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// end else
18081: GO 18395
// begin disable ( tigers_allowed ) ;
18083: LD_EXP 81
18087: DISABLE_MARKED
// enable ( remove_tigers ) ;
18088: LD_EXP 82
18092: ENABLE_MARKED
// rsol = [ [ rsol1 , rsol2 ] , [ rsol1 , rsol2 , rsol3 , rsol4 ] , [ rsol1 , rsol2 , rsol3 , rsol4 , rsol5 , rsol6 ] ] [ Difficulty ] ;
18093: LD_ADDR_LOC 6
18097: PUSH
18098: LD_EXP 55
18102: PUSH
18103: LD_EXP 56
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_EXP 55
18116: PUSH
18117: LD_EXP 56
18121: PUSH
18122: LD_EXP 57
18126: PUSH
18127: LD_EXP 58
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: PUSH
18138: LD_EXP 55
18142: PUSH
18143: LD_EXP 56
18147: PUSH
18148: LD_EXP 57
18152: PUSH
18153: LD_EXP 58
18157: PUSH
18158: LD_EXP 59
18162: PUSH
18163: LD_EXP 60
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: PUSH
18181: LD_OWVAR 67
18185: ARRAY
18186: ST_TO_ADDR
// rv = [ [ rv1 ] , [ rv1 ] , [ rv1 , rv2 ] ] [ Difficulty ] ;
18187: LD_ADDR_LOC 7
18191: PUSH
18192: LD_EXP 63
18196: PUSH
18197: EMPTY
18198: LIST
18199: PUSH
18200: LD_EXP 63
18204: PUSH
18205: EMPTY
18206: LIST
18207: PUSH
18208: LD_EXP 63
18212: PUSH
18213: LD_EXP 64
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: PUSH
18227: LD_OWVAR 67
18231: ARRAY
18232: ST_TO_ADDR
// while not ( PlaceUnitArea ( rv1 , prijezd , false ) ) do
18233: LD_EXP 63
18237: PPUSH
18238: LD_INT 10
18240: PPUSH
18241: LD_INT 0
18243: PPUSH
18244: CALL_OW 49
18248: NOT
18249: IFFALSE 18260
// wait ( 0 0$0.5 ) ;
18251: LD_INT 18
18253: PPUSH
18254: CALL_OW 67
18258: GO 18233
// if Difficulty > 2 then
18260: LD_OWVAR 67
18264: PUSH
18265: LD_INT 2
18267: GREATER
18268: IFFALSE 18297
// while not ( PlaceUnitArea ( rv2 , prijezd , false ) ) do
18270: LD_EXP 64
18274: PPUSH
18275: LD_INT 10
18277: PPUSH
18278: LD_INT 0
18280: PPUSH
18281: CALL_OW 49
18285: NOT
18286: IFFALSE 18297
// wait ( 0 0$0.5 ) ;
18288: LD_INT 18
18290: PPUSH
18291: CALL_OW 67
18295: GO 18270
// AddComAgressiveMove ( rv , 16 , 7 ) ;
18297: LD_LOC 7
18301: PPUSH
18302: LD_INT 16
18304: PPUSH
18305: LD_INT 7
18307: PPUSH
18308: CALL_OW 174
// for Un in rsol do
18312: LD_ADDR_VAR 0 1
18316: PUSH
18317: LD_LOC 6
18321: PUSH
18322: FOR_IN
18323: IFFALSE 18342
// PlaceUnitArea ( Un , prijezd , false ) ;
18325: LD_VAR 0 1
18329: PPUSH
18330: LD_INT 10
18332: PPUSH
18333: LD_INT 0
18335: PPUSH
18336: CALL_OW 49
18340: GO 18322
18342: POP
18343: POP
// AddComAgressiveMove ( rsol , 16 , 7 ) ;
18344: LD_LOC 6
18348: PPUSH
18349: LD_INT 16
18351: PPUSH
18352: LD_INT 7
18354: PPUSH
18355: CALL_OW 174
// Say ( rsol1 , D9-Rus3-1 ) ;
18359: LD_EXP 55
18363: PPUSH
18364: LD_STRING D9-Rus3-1
18366: PPUSH
18367: CALL_OW 88
// Say ( rsol2 , D9-Russ-1 ) ;
18371: LD_EXP 56
18375: PPUSH
18376: LD_STRING D9-Russ-1
18378: PPUSH
18379: CALL_OW 88
// Hint ( Boj ) ;
18383: LD_STRING Boj
18385: PPUSH
18386: CALL_OW 339
// enable ( russians_attack ) ;
18390: LD_EXP 53
18394: ENABLE_MARKED
// end ; end ;
18395: PPOPN 1
18397: END
// every 0 0$1 marked 16 do var breastworks , target , b , min ;
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
18404: PPUSH
18405: PPUSH
18406: PPUSH
// begin battle = true ;
18407: LD_ADDR_EXP 75
18411: PUSH
18412: LD_INT 1
18414: ST_TO_ADDR
// target = 1 ;
18415: LD_ADDR_VAR 0 2
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// min = 1000 ;
18423: LD_ADDR_VAR 0 4
18427: PUSH
18428: LD_INT 1000
18430: ST_TO_ADDR
// wait ( 0 0$5 * ( 4 - Difficulty ) ) ;
18431: LD_INT 175
18433: PUSH
18434: LD_INT 4
18436: PUSH
18437: LD_OWVAR 67
18441: MINUS
18442: MUL
18443: PPUSH
18444: CALL_OW 67
// breastworks = FilterUnitsInArea ( North , [ [ f_btype , b_breastwork ] , [ f_side , americans ] ] ) ;
18448: LD_ADDR_VAR 0 1
18452: PUSH
18453: LD_INT 2
18455: PPUSH
18456: LD_INT 30
18458: PUSH
18459: LD_INT 31
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 22
18468: PUSH
18469: LD_EXP 3
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 70
18486: ST_TO_ADDR
// if breastworks = 0 then
18487: LD_VAR 0 1
18491: PUSH
18492: LD_INT 0
18494: EQUAL
18495: IFFALSE 18520
// ComAgressiveMove ( rsol ^ rv , 56 , 11 ) else
18497: LD_LOC 6
18501: PUSH
18502: LD_LOC 7
18506: ADD
18507: PPUSH
18508: LD_INT 56
18510: PPUSH
18511: LD_INT 11
18513: PPUSH
18514: CALL_OW 114
18518: GO 19102
// begin for b in breastworks do
18520: LD_ADDR_VAR 0 3
18524: PUSH
18525: LD_VAR 0 1
18529: PUSH
18530: FOR_IN
18531: IFFALSE 18579
// if min > GetDistUnitXY ( b , 36 , 0 ) then
18533: LD_VAR 0 4
18537: PUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: LD_INT 36
18545: PPUSH
18546: LD_INT 0
18548: PPUSH
18549: CALL_OW 297
18553: GREATER
18554: IFFALSE 18577
// min = GetDistUnitXY ( b , 36 , 0 ) ;
18556: LD_ADDR_VAR 0 4
18560: PUSH
18561: LD_VAR 0 3
18565: PPUSH
18566: LD_INT 36
18568: PPUSH
18569: LD_INT 0
18571: PPUSH
18572: CALL_OW 297
18576: ST_TO_ADDR
18577: GO 18530
18579: POP
18580: POP
// for b in breastworks do
18581: LD_ADDR_VAR 0 3
18585: PUSH
18586: LD_VAR 0 1
18590: PUSH
18591: FOR_IN
18592: IFFALSE 18648
// if min > GetDistUnitXY ( b , 47 , 18 ) then
18594: LD_VAR 0 4
18598: PUSH
18599: LD_VAR 0 3
18603: PPUSH
18604: LD_INT 47
18606: PPUSH
18607: LD_INT 18
18609: PPUSH
18610: CALL_OW 297
18614: GREATER
18615: IFFALSE 18646
// begin min = GetDistUnitXY ( b , 47 , 18 ) ;
18617: LD_ADDR_VAR 0 4
18621: PUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: LD_INT 47
18629: PPUSH
18630: LD_INT 18
18632: PPUSH
18633: CALL_OW 297
18637: ST_TO_ADDR
// target = 2 ;
18638: LD_ADDR_VAR 0 2
18642: PUSH
18643: LD_INT 2
18645: ST_TO_ADDR
// end ;
18646: GO 18591
18648: POP
18649: POP
// for b in breastworks do
18650: LD_ADDR_VAR 0 3
18654: PUSH
18655: LD_VAR 0 1
18659: PUSH
18660: FOR_IN
18661: IFFALSE 18717
// if min > GetDistUnitXY ( b , 62 , 23 ) then
18663: LD_VAR 0 4
18667: PUSH
18668: LD_VAR 0 3
18672: PPUSH
18673: LD_INT 62
18675: PPUSH
18676: LD_INT 23
18678: PPUSH
18679: CALL_OW 297
18683: GREATER
18684: IFFALSE 18715
// begin min = GetDistUnitXY ( b , 62 , 23 ) ;
18686: LD_ADDR_VAR 0 4
18690: PUSH
18691: LD_VAR 0 3
18695: PPUSH
18696: LD_INT 62
18698: PPUSH
18699: LD_INT 23
18701: PPUSH
18702: CALL_OW 297
18706: ST_TO_ADDR
// target = 3 ;
18707: LD_ADDR_VAR 0 2
18711: PUSH
18712: LD_INT 3
18714: ST_TO_ADDR
// end ;
18715: GO 18660
18717: POP
18718: POP
// case target of 1 :
18719: LD_VAR 0 2
18723: PUSH
18724: LD_INT 1
18726: DOUBLE
18727: EQUAL
18728: IFTRUE 18732
18730: GO 18830
18732: POP
// begin AddComAgressiveMove ( rsol ^ rv , 16 , 2 ) ;
18733: LD_LOC 6
18737: PUSH
18738: LD_LOC 7
18742: ADD
18743: PPUSH
18744: LD_INT 16
18746: PPUSH
18747: LD_INT 2
18749: PPUSH
18750: CALL_OW 174
// wait ( 0 0$3 ) ;
18754: LD_INT 105
18756: PPUSH
18757: CALL_OW 67
// AddComAgressiveMove ( rsol , 36 , 0 ) ;
18761: LD_LOC 6
18765: PPUSH
18766: LD_INT 36
18768: PPUSH
18769: LD_INT 0
18771: PPUSH
18772: CALL_OW 174
// AddComAgressiveMove ( rsol , 51 , 4 ) ;
18776: LD_LOC 6
18780: PPUSH
18781: LD_INT 51
18783: PPUSH
18784: LD_INT 4
18786: PPUSH
18787: CALL_OW 174
// wait ( 0 0$3 ) ;
18791: LD_INT 105
18793: PPUSH
18794: CALL_OW 67
// AddComAgressiveMove ( rv , 36 , 0 ) ;
18798: LD_LOC 7
18802: PPUSH
18803: LD_INT 36
18805: PPUSH
18806: LD_INT 0
18808: PPUSH
18809: CALL_OW 174
// AddComAgressiveMove ( rv , 51 , 4 ) ;
18813: LD_LOC 7
18817: PPUSH
18818: LD_INT 51
18820: PPUSH
18821: LD_INT 4
18823: PPUSH
18824: CALL_OW 174
// end ; 2 :
18828: GO 19102
18830: LD_INT 2
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18982
18838: POP
// begin if Rand ( 1 , 2 ) = 1 then
18839: LD_INT 1
18841: PPUSH
18842: LD_INT 2
18844: PPUSH
18845: CALL_OW 12
18849: PUSH
18850: LD_INT 1
18852: EQUAL
18853: IFFALSE 18922
// begin AddComAgressiveMove ( rsol ^ rv , 35 , 25 ) ;
18855: LD_LOC 6
18859: PUSH
18860: LD_LOC 7
18864: ADD
18865: PPUSH
18866: LD_INT 35
18868: PPUSH
18869: LD_INT 25
18871: PPUSH
18872: CALL_OW 174
// wait ( 0 0$5 ) ;
18876: LD_INT 175
18878: PPUSH
18879: CALL_OW 67
// AddComAgressiveMove ( rsol , 47 , 18 ) ;
18883: LD_LOC 6
18887: PPUSH
18888: LD_INT 47
18890: PPUSH
18891: LD_INT 18
18893: PPUSH
18894: CALL_OW 174
// wait ( 0 0$2 ) ;
18898: LD_INT 70
18900: PPUSH
18901: CALL_OW 67
// AddComAgressiveMove ( rv , 47 , 18 ) ;
18905: LD_LOC 7
18909: PPUSH
18910: LD_INT 47
18912: PPUSH
18913: LD_INT 18
18915: PPUSH
18916: CALL_OW 174
// end else
18920: GO 18959
// begin AddComAgressiveMove ( rsol , 47 , 18 ) ;
18922: LD_LOC 6
18926: PPUSH
18927: LD_INT 47
18929: PPUSH
18930: LD_INT 18
18932: PPUSH
18933: CALL_OW 174
// wait ( 0 0$3 ) ;
18937: LD_INT 105
18939: PPUSH
18940: CALL_OW 67
// AddComAgressiveMove ( rv , 47 , 18 ) ;
18944: LD_LOC 7
18948: PPUSH
18949: LD_INT 47
18951: PPUSH
18952: LD_INT 18
18954: PPUSH
18955: CALL_OW 174
// end ; AddComAgressiveMove ( rsol ^ rv , 51 , 13 ) ;
18959: LD_LOC 6
18963: PUSH
18964: LD_LOC 7
18968: ADD
18969: PPUSH
18970: LD_INT 51
18972: PPUSH
18973: LD_INT 13
18975: PPUSH
18976: CALL_OW 174
// end ; 3 :
18980: GO 19102
18982: LD_INT 3
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19101
18990: POP
// begin AddComAgressiveMove ( rsol ^ rv , 35 , 25 ) ;
18991: LD_LOC 6
18995: PUSH
18996: LD_LOC 7
19000: ADD
19001: PPUSH
19002: LD_INT 35
19004: PPUSH
19005: LD_INT 25
19007: PPUSH
19008: CALL_OW 174
// wait ( 0 0$5 ) ;
19012: LD_INT 175
19014: PPUSH
19015: CALL_OW 67
// AddComAgressiveMove ( rsol ^ rv , 56 , 37 ) ;
19019: LD_LOC 6
19023: PUSH
19024: LD_LOC 7
19028: ADD
19029: PPUSH
19030: LD_INT 56
19032: PPUSH
19033: LD_INT 37
19035: PPUSH
19036: CALL_OW 174
// wait ( 0 0$5 ) ;
19040: LD_INT 175
19042: PPUSH
19043: CALL_OW 67
// AddComAgressiveMove ( rsol , 62 , 23 ) ;
19047: LD_LOC 6
19051: PPUSH
19052: LD_INT 62
19054: PPUSH
19055: LD_INT 23
19057: PPUSH
19058: CALL_OW 174
// wait ( 0 0$2 ) ;
19062: LD_INT 70
19064: PPUSH
19065: CALL_OW 67
// AddComAgressiveMove ( rv , 62 , 23 ) ;
19069: LD_LOC 7
19073: PPUSH
19074: LD_INT 62
19076: PPUSH
19077: LD_INT 23
19079: PPUSH
19080: CALL_OW 174
// AddComAgressiveMove ( rv , 55 , 10 ) ;
19084: LD_LOC 7
19088: PPUSH
19089: LD_INT 55
19091: PPUSH
19092: LD_INT 10
19094: PPUSH
19095: CALL_OW 174
// end ; end ;
19099: GO 19102
19101: POP
// end ; enable ( russians_attack1 ) ;
19102: LD_EXP 54
19106: ENABLE_MARKED
// end ;
19107: PPOPN 4
19109: END
// every 0 0$3 marked 17 do
19110: GO 19112
19112: DISABLE
// begin if IsOk ( rdrv1 ) then
19113: LD_EXP 61
19117: PPUSH
19118: CALL_OW 302
19122: IFFALSE 19244
// begin if not ( IsBusy ( rv1 ) ) and WantsToAttack ( rv1 ) = 0 and Attacks ( rv1 ) = 0 and IsOk ( dep1 ) then
19124: LD_EXP 63
19128: PPUSH
19129: CALL_OW 315
19133: NOT
19134: PUSH
19135: LD_EXP 63
19139: PPUSH
19140: CALL_OW 319
19144: PUSH
19145: LD_INT 0
19147: EQUAL
19148: AND
19149: PUSH
19150: LD_EXP 63
19154: PPUSH
19155: CALL_OW 320
19159: PUSH
19160: LD_INT 0
19162: EQUAL
19163: AND
19164: PUSH
19165: LD_INT 1
19167: PPUSH
19168: CALL_OW 302
19172: AND
19173: IFFALSE 19244
// if GetDistUnits ( rv1 , dep1 ) < 7 and UnitsInside ( dep1 ) = 0 then
19175: LD_EXP 63
19179: PPUSH
19180: LD_INT 1
19182: PPUSH
19183: CALL_OW 296
19187: PUSH
19188: LD_INT 7
19190: LESS
19191: PUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 313
19199: PUSH
19200: LD_INT 0
19202: EQUAL
19203: AND
19204: IFFALSE 19229
// begin AddComExitVehicle ( rv1 ) ;
19206: LD_EXP 63
19210: PPUSH
19211: CALL_OW 181
// AddComEnterUnit ( rdrv1 , dep1 ) ;
19215: LD_EXP 61
19219: PPUSH
19220: LD_INT 1
19222: PPUSH
19223: CALL_OW 180
// end else
19227: GO 19244
// ComAgressiveMove ( rv1 , 51 , 14 ) ;
19229: LD_EXP 63
19233: PPUSH
19234: LD_INT 51
19236: PPUSH
19237: LD_INT 14
19239: PPUSH
19240: CALL_OW 114
// end ; enable ;
19244: ENABLE
// end ;
19245: END
// every 0 0$5 trigger ( UnitFilter ( rsol ^ [ rdrv1 , rdrv2 ] , [ f_alive ] ) ) = 0 marked 17 do
19246: LD_LOC 6
19250: PUSH
19251: LD_EXP 61
19255: PUSH
19256: LD_EXP 62
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: ADD
19265: PPUSH
19266: LD_INT 51
19268: PUSH
19269: EMPTY
19270: LIST
19271: PPUSH
19272: CALL_OW 72
19276: PUSH
19277: LD_INT 0
19279: EQUAL
19280: IFFALSE 19365
19282: GO 19284
19284: DISABLE
// begin disable ;
19285: DISABLE
// Wait ( 0 0$5 ) ;
19286: LD_INT 175
19288: PPUSH
19289: CALL_OW 67
// DialogueOn ;
19293: CALL_OW 6
// SayRadio ( Powell , D6-Pow-1 ) ;
19297: LD_EXP 16
19301: PPUSH
19302: LD_STRING D6-Pow-1
19304: PPUSH
19305: CALL_OW 94
// Say ( John , D6-JMM-1 ) ;
19309: LD_EXP 7
19313: PPUSH
19314: LD_STRING D6-JMM-1
19316: PPUSH
19317: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
19321: LD_EXP 16
19325: PPUSH
19326: LD_STRING D6-Pow-2
19328: PPUSH
19329: CALL_OW 94
// Say ( John , D6-JMM-2 ) ;
19333: LD_EXP 7
19337: PPUSH
19338: LD_STRING D6-JMM-2
19340: PPUSH
19341: CALL_OW 88
// DialogueOff ;
19345: CALL_OW 7
// battle = false ;
19349: LD_ADDR_EXP 75
19353: PUSH
19354: LD_INT 0
19356: ST_TO_ADDR
// end_of_m = 1 ;
19357: LD_ADDR_LOC 5
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_or , [ f_side , americans ] , [ f_side , americans1 ] ] , [ f_alive ] , f_not , [ f_ok ] ] ) do
19366: LD_INT 2
19368: PUSH
19369: LD_INT 22
19371: PUSH
19372: LD_EXP 3
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 22
19383: PUSH
19384: LD_EXP 4
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 51
19400: PUSH
19401: EMPTY
19402: LIST
19403: PUSH
19404: LD_INT 3
19406: PUSH
19407: LD_INT 50
19409: PUSH
19410: EMPTY
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 69
19423: IFFALSE 19435
19425: GO 19427
19427: DISABLE
// begin Hint ( RedArentDead ) ;
19428: LD_STRING RedArentDead
19430: PPUSH
19431: CALL_OW 339
// end ;
19435: END
// every 0 0$2 trigger IsInUnit ( John ) do
19436: LD_EXP 7
19440: PPUSH
19441: CALL_OW 310
19445: IFFALSE 19481
19447: GO 19449
19449: DISABLE
// begin if GetType ( IsInUnit ( John ) ) = unit_vehicle then
19450: LD_EXP 7
19454: PPUSH
19455: CALL_OW 310
19459: PPUSH
19460: CALL_OW 247
19464: PUSH
19465: LD_INT 2
19467: EQUAL
19468: IFFALSE 19480
// JMMInVehicle := true else
19470: LD_ADDR_EXP 118
19474: PUSH
19475: LD_INT 1
19477: ST_TO_ADDR
19478: GO 19481
// enable ;
19480: ENABLE
// end ;
19481: END
// every 0 0$2 + 0 0$1 trigger IsInUnit ( Cyrus ) do
19482: LD_EXP 8
19486: PPUSH
19487: CALL_OW 310
19491: IFFALSE 19527
19493: GO 19495
19495: DISABLE
// begin if GetType ( IsInUnit ( Cyrus ) ) = unit_vehicle then
19496: LD_EXP 8
19500: PPUSH
19501: CALL_OW 310
19505: PPUSH
19506: CALL_OW 247
19510: PUSH
19511: LD_INT 2
19513: EQUAL
19514: IFFALSE 19526
// CyrusInVehicle := true else
19516: LD_ADDR_EXP 119
19520: PUSH
19521: LD_INT 1
19523: ST_TO_ADDR
19524: GO 19527
// enable ;
19526: ENABLE
// end ;
19527: END
// every 0 0$1 trigger IsAt ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) marked 13 do
19528: LD_EXP 65
19532: PPUSH
19533: LD_LOC 10
19537: PUSH
19538: LD_INT 1
19540: ARRAY
19541: PPUSH
19542: LD_LOC 10
19546: PUSH
19547: LD_INT 2
19549: ARRAY
19550: PPUSH
19551: CALL_OW 307
19555: IFFALSE 19593
19557: GO 19559
19559: DISABLE
// begin RemoveUnit ( Mikhail ) ;
19560: LD_EXP 65
19564: PPUSH
19565: CALL_OW 64
// Mikhails_outcome = - 2 ;
19569: LD_ADDR_LOC 3
19573: PUSH
19574: LD_INT 2
19576: NEG
19577: ST_TO_ADDR
// Mikhail_status = 4 ;
19578: LD_ADDR_LOC 4
19582: PUSH
19583: LD_INT 4
19585: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
19586: LD_STRING M3a
19588: PPUSH
19589: CALL_OW 337
// end ;
19593: END
// every 0 0$3 trigger IsDead ( Mikhail ) marked 13 do
19594: LD_EXP 65
19598: PPUSH
19599: CALL_OW 301
19603: IFFALSE 19631
19605: GO 19607
19607: DISABLE
// begin Mikhails_outcome = 2 ;
19608: LD_ADDR_LOC 3
19612: PUSH
19613: LD_INT 2
19615: ST_TO_ADDR
// Mikhail_status = 3 ;
19616: LD_ADDR_LOC 4
19620: PUSH
19621: LD_INT 3
19623: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
19624: LD_STRING M3a
19626: PPUSH
19627: CALL_OW 337
// end ;
19631: END
// every 0 0$10 marked 20 do var my_depots , my_eng ;
19632: GO 19634
19634: DISABLE
19635: LD_INT 0
19637: PPUSH
19638: PPUSH
// begin my_depots = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_side , americans ] ] ) ;
19639: LD_ADDR_VAR 0 1
19643: PUSH
19644: LD_INT 21
19646: PUSH
19647: LD_INT 3
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 30
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 22
19666: PUSH
19667: LD_EXP 3
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: PPUSH
19681: CALL_OW 69
19685: ST_TO_ADDR
// my_eng = FilterAllUnits ( [ [ f_type , unit_human ] , [ f_class , class_engineer ] , [ f_side , americans ] ] ) ;
19686: LD_ADDR_VAR 0 2
19690: PUSH
19691: LD_INT 21
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 25
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 22
19713: PUSH
19714: LD_EXP 3
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: ST_TO_ADDR
// if my_depots = 0 and my_eng = 0 then
19733: LD_VAR 0 1
19737: PUSH
19738: LD_INT 0
19740: EQUAL
19741: PUSH
19742: LD_VAR 0 2
19746: PUSH
19747: LD_INT 0
19749: EQUAL
19750: AND
19751: IFFALSE 19766
// begin YouLost ( Engineer ) ;
19753: LD_STRING Engineer
19755: PPUSH
19756: CALL_OW 104
// ExitGame ;
19760: CALL_OW 341
// end else
19764: GO 19767
// enable ;
19766: ENABLE
// end ;
19767: PPOPN 2
19769: END
// every 0 0$5 trigger IsDead ( John ) do
19770: LD_EXP 7
19774: PPUSH
19775: CALL_OW 301
19779: IFFALSE 19795
19781: GO 19783
19783: DISABLE
// begin YouLost ( JMM ) ;
19784: LD_STRING JMM
19786: PPUSH
19787: CALL_OW 104
// ExitGame ;
19791: CALL_OW 341
// end ;
19795: END
// every 0 0$5 trigger IsDead ( dep1 ) or IsDead ( dep2 ) do
19796: LD_INT 1
19798: PPUSH
19799: CALL_OW 301
19803: PUSH
19804: LD_INT 10
19806: PPUSH
19807: CALL_OW 301
19811: OR
19812: IFFALSE 19824
19814: GO 19816
19816: DISABLE
// begin YouLost ( DepotDestroyed ) ;
19817: LD_STRING DepotDestroyed
19819: PPUSH
19820: CALL_OW 104
// end ;
19824: END
// every 0 0$2 trigger GetSide ( dep1 ) = russians marked 17 do
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 255
19832: PUSH
19833: LD_EXP 5
19837: EQUAL
19838: IFFALSE 19875
19840: GO 19842
19842: DISABLE
// begin wait ( 0 0$30 ) ;
19843: LD_INT 1050
19845: PPUSH
19846: CALL_OW 67
// if GetSide ( dep1 ) = russians then
19850: LD_INT 1
19852: PPUSH
19853: CALL_OW 255
19857: PUSH
19858: LD_EXP 5
19862: EQUAL
19863: IFFALSE 19874
// YouLost ( DepotCaptured ) else
19865: LD_STRING DepotCaptured
19867: PPUSH
19868: CALL_OW 104
19872: GO 19875
// enable ;
19874: ENABLE
// end ;
19875: END
// every 0 0$1 trigger end_of_m do var m ;
19876: LD_LOC 5
19880: IFFALSE 20354
19882: GO 19884
19884: DISABLE
19885: LD_INT 0
19887: PPUSH
// begin if GetSide ( Mikhail ) = americans then
19888: LD_EXP 65
19892: PPUSH
19893: CALL_OW 255
19897: PUSH
19898: LD_EXP 3
19902: EQUAL
19903: IFFALSE 19919
// SetSide ( Mikhail , russians1 ) ;
19905: LD_EXP 65
19909: PPUSH
19910: LD_EXP 6
19914: PPUSH
19915: CALL_OW 235
// if lost_units < 3 then
19919: LD_EXP 90
19923: PUSH
19924: LD_INT 3
19926: LESS
19927: IFFALSE 19939
// m = 1 else
19929: LD_ADDR_VAR 0 1
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
19937: GO 19948
// m := - 1 ;
19939: LD_ADDR_VAR 0 1
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: ST_TO_ADDR
// if Mikhails_outcome = 1 and GetLives ( Mikhail ) = 0 then
19948: LD_LOC 3
19952: PUSH
19953: LD_INT 1
19955: EQUAL
19956: PUSH
19957: LD_EXP 65
19961: PPUSH
19962: CALL_OW 256
19966: PUSH
19967: LD_INT 0
19969: EQUAL
19970: AND
19971: IFFALSE 19982
// Mikhails_outcome = - 1 ;
19973: LD_ADDR_LOC 3
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: ST_TO_ADDR
// AddMedal ( Cans , GetResourceType ( dep1 , mat_cans ) >= 150 ) ;
19982: LD_STRING Cans
19984: PPUSH
19985: LD_INT 1
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 275
19995: PUSH
19996: LD_INT 150
19998: GREATEREQUAL
19999: PPUSH
20000: CALL_OW 101
// AddMedal ( Deaths , m ) ;
20004: LD_STRING Deaths
20006: PPUSH
20007: LD_VAR 0 1
20011: PPUSH
20012: CALL_OW 101
// AddMedal ( Prisoner , Mikhails_outcome ) ;
20016: LD_STRING Prisoner
20018: PPUSH
20019: LD_LOC 3
20023: PPUSH
20024: CALL_OW 101
// GiveMedals ( MAIN ) ;
20028: LD_STRING MAIN
20030: PPUSH
20031: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_alive ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) ) ;
20035: LD_INT 51
20037: PUSH
20038: EMPTY
20039: LIST
20040: PUSH
20041: LD_INT 22
20043: PUSH
20044: LD_EXP 3
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 21
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: LIST
20067: PPUSH
20068: CALL_OW 69
20072: PPUSH
20073: CALL_OW 43
// SaveCharacters ( John , JMM ) ;
20077: LD_EXP 7
20081: PPUSH
20082: LD_STRING JMM
20084: PPUSH
20085: CALL_OW 38
// SaveCharacters ( Bobby , Bobby ) ;
20089: LD_EXP 9
20093: PPUSH
20094: LD_STRING Bobby
20096: PPUSH
20097: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
20101: LD_EXP 8
20105: PPUSH
20106: LD_STRING Cyrus
20108: PPUSH
20109: CALL_OW 38
// SaveCharacters ( Lisa , Lisa ) ;
20113: LD_EXP 12
20117: PPUSH
20118: LD_STRING Lisa
20120: PPUSH
20121: CALL_OW 38
// if GetSide ( Khatam ) <> americans then
20125: LD_EXP 10
20129: PPUSH
20130: CALL_OW 255
20134: PUSH
20135: LD_EXP 3
20139: NONEQUAL
20140: IFFALSE 20154
// SetLives ( Khatam , 0 ) ;
20142: LD_EXP 10
20146: PPUSH
20147: LD_INT 0
20149: PPUSH
20150: CALL_OW 234
// SaveCharacters ( Khatam , Khatam ) ;
20154: LD_EXP 10
20158: PPUSH
20159: LD_STRING Khatam
20161: PPUSH
20162: CALL_OW 38
// if not ( Mikhail_status in [ 1 , 4 , 5 ] ) then
20166: LD_LOC 4
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 4
20176: PUSH
20177: LD_INT 5
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: IN
20185: NOT
20186: IFFALSE 20200
// SetLives ( Mikhail , 0 ) ;
20188: LD_EXP 65
20192: PPUSH
20193: LD_INT 0
20195: PPUSH
20196: CALL_OW 234
// SaveCharacters ( Mikhail , Mikhail ) ;
20200: LD_EXP 65
20204: PPUSH
20205: LD_STRING Mikhail
20207: PPUSH
20208: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) diff [ John , Bobby , Cyrus , Lisa , Khatam , Mikhail ] , other_survivors ) ;
20212: LD_INT 50
20214: PUSH
20215: EMPTY
20216: LIST
20217: PUSH
20218: LD_INT 22
20220: PUSH
20221: LD_EXP 3
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 21
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: LIST
20244: PPUSH
20245: CALL_OW 69
20249: PUSH
20250: LD_EXP 7
20254: PUSH
20255: LD_EXP 9
20259: PUSH
20260: LD_EXP 8
20264: PUSH
20265: LD_EXP 12
20269: PUSH
20270: LD_EXP 10
20274: PUSH
20275: LD_EXP 65
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: DIFF
20288: PPUSH
20289: LD_STRING other_survivors
20291: PPUSH
20292: CALL_OW 38
// SaveVariable ( GetResourceType ( dep1 , mat_cans ) , us2cans ) ;
20296: LD_INT 1
20298: PPUSH
20299: LD_INT 1
20301: PPUSH
20302: CALL_OW 275
20306: PPUSH
20307: LD_STRING us2cans
20309: PPUSH
20310: CALL_OW 39
// SaveVariable ( JMMInVehicle , us2JMMInVehicle ) ;
20314: LD_EXP 118
20318: PPUSH
20319: LD_STRING us2JMMInVehicle
20321: PPUSH
20322: CALL_OW 39
// SaveVariable ( CyrusInVehicle , us2CyrusInVehicle ) ;
20326: LD_EXP 119
20330: PPUSH
20331: LD_STRING us2CyrusInVehicle
20333: PPUSH
20334: CALL_OW 39
// SaveVariable ( Mikhail_status , us2mikhail_state ) ;
20338: LD_LOC 4
20342: PPUSH
20343: LD_STRING us2mikhail_state
20345: PPUSH
20346: CALL_OW 39
// YouWin ;
20350: CALL_OW 103
// end ;
20354: PPOPN 1
20356: END
// on DialogueSkipped ( i ) do begin Skip = true ;
20357: LD_ADDR_EXP 102
20361: PUSH
20362: LD_INT 1
20364: ST_TO_ADDR
// end ;
20365: PPOPN 1
20367: END
// on LeaveBuilding ( building , Un ) do var answer ;
20368: LD_INT 0
20370: PPUSH
// begin if ( building = dep1 ) and ( Un = Mikhail ) and Mikhails_Escape_Disabled then
20371: LD_VAR 0 1
20375: PUSH
20376: LD_INT 1
20378: EQUAL
20379: PUSH
20380: LD_VAR 0 2
20384: PUSH
20385: LD_EXP 65
20389: EQUAL
20390: AND
20391: PUSH
20392: LD_EXP 91
20396: AND
20397: IFFALSE 20771
// begin SetSide ( Mikhail , russians1 ) ;
20399: LD_EXP 65
20403: PPUSH
20404: LD_EXP 6
20408: PPUSH
20409: CALL_OW 235
// Mikhail_in_depot = false ;
20413: LD_ADDR_EXP 39
20417: PUSH
20418: LD_INT 0
20420: ST_TO_ADDR
// answer = Query ( QMikh2 ) ;
20421: LD_ADDR_VAR 0 3
20425: PUSH
20426: LD_STRING QMikh2
20428: PPUSH
20429: CALL_OW 97
20433: ST_TO_ADDR
// case answer of 1 :
20434: LD_VAR 0 3
20438: PUSH
20439: LD_INT 1
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20581
20447: POP
// begin Mikhails_Escape_Disabled = false ;
20448: LD_ADDR_EXP 91
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// target_of_escape = [ 4 , 6 ] ;
20456: LD_ADDR_LOC 10
20460: PUSH
20461: LD_INT 4
20463: PUSH
20464: LD_INT 6
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: ST_TO_ADDR
// PlaceUnitXY ( Mikhail , 52 , 13 , false ) ;
20471: LD_EXP 65
20475: PPUSH
20476: LD_INT 52
20478: PPUSH
20479: LD_INT 13
20481: PPUSH
20482: LD_INT 0
20484: PPUSH
20485: CALL_OW 48
// Mikhails_lives = GetLives ( Mikhail ) ;
20489: LD_ADDR_EXP 50
20493: PUSH
20494: LD_EXP 65
20498: PPUSH
20499: CALL_OW 256
20503: ST_TO_ADDR
// enable ( Mikhails_escape ) ;
20504: LD_EXP 45
20508: ENABLE_MARKED
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
20509: LD_EXP 3
20513: PPUSH
20514: LD_EXP 6
20518: PPUSH
20519: LD_INT 2
20521: PPUSH
20522: LD_INT 1
20524: PPUSH
20525: CALL_OW 80
// SetSide ( Mikhail , russians1 ) ;
20529: LD_EXP 65
20533: PPUSH
20534: LD_EXP 6
20538: PPUSH
20539: CALL_OW 235
// AddComMoveXY ( Mikhail , target_of_escape [ 1 ] , target_of_escape [ 2 ] ) ;
20543: LD_EXP 65
20547: PPUSH
20548: LD_LOC 10
20552: PUSH
20553: LD_INT 1
20555: ARRAY
20556: PPUSH
20557: LD_LOC 10
20561: PUSH
20562: LD_INT 2
20564: ARRAY
20565: PPUSH
20566: CALL_OW 171
// AddComHold ( Mikhail ) ;
20570: LD_EXP 65
20574: PPUSH
20575: CALL_OW 200
// end ; 2 :
20579: GO 20771
20581: LD_INT 2
20583: DOUBLE
20584: EQUAL
20585: IFTRUE 20589
20587: GO 20713
20589: POP
// begin disable ( great_escape ) ;
20590: LD_EXP 40
20594: DISABLE_MARKED
// wait ( 0 0$2 ) ;
20595: LD_INT 70
20597: PPUSH
20598: CALL_OW 67
// repeat ComMoveXY ( Mikhail , 52 , 13 ) ;
20602: LD_EXP 65
20606: PPUSH
20607: LD_INT 52
20609: PPUSH
20610: LD_INT 13
20612: PPUSH
20613: CALL_OW 111
// AddComHold ( Mikhail ) ;
20617: LD_EXP 65
20621: PPUSH
20622: CALL_OW 200
// wait ( 0 0$0.5 ) ;
20626: LD_INT 18
20628: PPUSH
20629: CALL_OW 67
// until IsAt ( Mikhail , 52 , 13 ) ;
20633: LD_EXP 65
20637: PPUSH
20638: LD_INT 52
20640: PPUSH
20641: LD_INT 13
20643: PPUSH
20644: CALL_OW 307
20648: IFFALSE 20602
// SetSide ( Mikhail , americans ) ;
20650: LD_EXP 65
20654: PPUSH
20655: LD_EXP 3
20659: PPUSH
20660: CALL_OW 235
// repeat ComEnterUnit ( Mikhail , dep1 ) ;
20664: LD_EXP 65
20668: PPUSH
20669: LD_INT 1
20671: PPUSH
20672: CALL_OW 120
// Wait ( 1 ) ;
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 67
// until IsInUnit ( Mikhail ) = dep1 ;
20683: LD_EXP 65
20687: PPUSH
20688: CALL_OW 310
20692: PUSH
20693: LD_INT 1
20695: EQUAL
20696: IFFALSE 20664
// Mikhail_in_depot = true ;
20698: LD_ADDR_EXP 39
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// enable ( great_escape ) ;
20706: LD_EXP 40
20710: ENABLE_MARKED
// end ; 3 :
20711: GO 20771
20713: LD_INT 3
20715: DOUBLE
20716: EQUAL
20717: IFTRUE 20721
20719: GO 20770
20721: POP
// begin ComMoveXY ( Mikhail , 4 , 6 ) ;
20722: LD_EXP 65
20726: PPUSH
20727: LD_INT 4
20729: PPUSH
20730: LD_INT 6
20732: PPUSH
20733: CALL_OW 111
// AddComHold ( Mikhail ) ;
20737: LD_EXP 65
20741: PPUSH
20742: CALL_OW 200
// enable ( remove_mikhail ) ;
20746: LD_EXP 43
20750: ENABLE_MARKED
// Mikhails_outcome = - 1 ;
20751: LD_ADDR_LOC 3
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: ST_TO_ADDR
// Mikhail_status := 1 ;
20760: LD_ADDR_LOC 4
20764: PUSH
20765: LD_INT 1
20767: ST_TO_ADDR
// end ; end ;
20768: GO 20771
20770: POP
// end ; end ;
20771: PPOPN 3
20773: END
// on BuildingCaptured ( build , origside , eng ) do begin if ( build = lab1 ) and ( origside = russians ) then
20774: LD_VAR 0 1
20778: PUSH
20779: LD_INT 23
20781: EQUAL
20782: PUSH
20783: LD_VAR 0 2
20787: PUSH
20788: LD_EXP 5
20792: EQUAL
20793: AND
20794: IFFALSE 20804
// begin Hint ( Lab ) ;
20796: LD_STRING Lab
20798: PPUSH
20799: CALL_OW 339
// disable ;
20803: DISABLE
// end ; end ;
20804: PPOPN 3
20806: END
// on HumanDestroyed ( un , side , nation , x , y , direction , sex , class ) do begin if side = americans then
20807: LD_VAR 0 2
20811: PUSH
20812: LD_EXP 3
20816: EQUAL
20817: IFFALSE 20833
// lost_units = lost_units + 1 ;
20819: LD_ADDR_EXP 90
20823: PUSH
20824: LD_EXP 90
20828: PUSH
20829: LD_INT 1
20831: PLUS
20832: ST_TO_ADDR
// end ; end_of_file
20833: PPOPN 8
20835: END
// export count5 ; export Brestworks ; export RusN_States ; export RusN ; export function InitNorthBase ; var Un ; begin
20836: LD_INT 0
20838: PPUSH
20839: PPUSH
// RusN_States = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
20840: LD_ADDR_EXP 122
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: LD_INT 0
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: ST_TO_ADDR
// RusN = [ RusNSo1 , RusNSo2 , RusNSo3 , RusNSo4 , guard1 , guard2 , RusNE1 , RusNSc1 , RusNSo5 , RusNSo6 ] ;
20891: LD_ADDR_EXP 123
20895: PUSH
20896: LD_INT 3
20898: PUSH
20899: LD_INT 14
20901: PUSH
20902: LD_INT 27
20904: PUSH
20905: LD_INT 28
20907: PUSH
20908: LD_INT 11
20910: PUSH
20911: LD_INT 12
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 25
20919: PUSH
20920: LD_INT 24
20922: PUSH
20923: LD_INT 31
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: ST_TO_ADDR
// count5 = 0 ;
20938: LD_ADDR_EXP 120
20942: PUSH
20943: LD_INT 0
20945: ST_TO_ADDR
// Brestworks = [ Brw1 , Brw2 ] ;
20946: LD_ADDR_EXP 121
20950: PUSH
20951: LD_INT 29
20953: PUSH
20954: LD_INT 9
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: ST_TO_ADDR
// for Un in RusN do
20961: LD_ADDR_VAR 0 2
20965: PUSH
20966: LD_EXP 123
20970: PUSH
20971: FOR_IN
20972: IFFALSE 20985
// ComRemember ( Un ) ;
20974: LD_VAR 0 2
20978: PPUSH
20979: CALL_OW 143
20983: GO 20971
20985: POP
20986: POP
// if not ( IsDead ( Brw1 ) ) then
20987: LD_INT 29
20989: PPUSH
20990: CALL_OW 301
20994: NOT
20995: IFFALSE 21007
// ComEnterUnit ( Guard1 , Brw1 ) ;
20997: LD_INT 11
20999: PPUSH
21000: LD_INT 29
21002: PPUSH
21003: CALL_OW 120
// if not ( IsDead ( Brw2 ) ) then
21007: LD_INT 9
21009: PPUSH
21010: CALL_OW 301
21014: NOT
21015: IFFALSE 21027
// ComEnterUnit ( Guard2 , Brw2 ) ;
21017: LD_INT 12
21019: PPUSH
21020: LD_INT 9
21022: PPUSH
21023: CALL_OW 120
// if not ( IsDead ( Brw3 ) ) then
21027: LD_INT 30
21029: PPUSH
21030: CALL_OW 301
21034: NOT
21035: IFFALSE 21047
// ComEnterUnit ( Guard3 , Brw3 ) ;
21037: LD_INT 7
21039: PPUSH
21040: LD_INT 30
21042: PPUSH
21043: CALL_OW 120
// end ;
21047: LD_VAR 0 1
21051: RET
// export function WaitJob ( list_of_units , reaction ) ; var i , busy ; begin
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
21056: PPUSH
// wait ( 2 ) ;
21057: LD_INT 2
21059: PPUSH
21060: CALL_OW 67
// repeat busy = false ;
21064: LD_ADDR_VAR 0 5
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// for i in list_of_units do
21072: LD_ADDR_VAR 0 4
21076: PUSH
21077: LD_VAR 0 1
21081: PUSH
21082: FOR_IN
21083: IFFALSE 21117
// if IsOk ( i ) then
21085: LD_VAR 0 4
21089: PPUSH
21090: CALL_OW 302
21094: IFFALSE 21115
// if IsBusy ( i ) then
21096: LD_VAR 0 4
21100: PPUSH
21101: CALL_OW 315
21105: IFFALSE 21115
// busy = true ;
21107: LD_ADDR_VAR 0 5
21111: PUSH
21112: LD_INT 1
21114: ST_TO_ADDR
21115: GO 21082
21117: POP
21118: POP
// if busy then
21119: LD_VAR 0 5
21123: IFFALSE 21138
// wait ( 0 0$1 * reaction ) ;
21125: LD_INT 35
21127: PUSH
21128: LD_VAR 0 2
21132: MUL
21133: PPUSH
21134: CALL_OW 67
// until not ( busy ) ;
21138: LD_VAR 0 5
21142: NOT
21143: IFFALSE 21064
// end ;
21145: LD_VAR 0 3
21149: RET
// function WaitNearUnit ( target_unit , dist , list_of_units , reaction ) ; var i , are_near ; begin
21150: LD_INT 0
21152: PPUSH
21153: PPUSH
21154: PPUSH
// wait ( 2 ) ;
21155: LD_INT 2
21157: PPUSH
21158: CALL_OW 67
// repeat are_near = true ;
21162: LD_ADDR_VAR 0 7
21166: PUSH
21167: LD_INT 1
21169: ST_TO_ADDR
// for i in list_of_units do
21170: LD_ADDR_VAR 0 6
21174: PUSH
21175: LD_VAR 0 3
21179: PUSH
21180: FOR_IN
21181: IFFALSE 21237
// if IsOk ( i ) and IsOk ( target_unit ) then
21183: LD_VAR 0 6
21187: PPUSH
21188: CALL_OW 302
21192: PUSH
21193: LD_VAR 0 1
21197: PPUSH
21198: CALL_OW 302
21202: AND
21203: IFFALSE 21235
// if GetDistUnits ( target_unit , i ) > dist then
21205: LD_VAR 0 1
21209: PPUSH
21210: LD_VAR 0 6
21214: PPUSH
21215: CALL_OW 296
21219: PUSH
21220: LD_VAR 0 2
21224: GREATER
21225: IFFALSE 21235
// are_near = false ;
21227: LD_ADDR_VAR 0 7
21231: PUSH
21232: LD_INT 0
21234: ST_TO_ADDR
21235: GO 21180
21237: POP
21238: POP
// if not ( are_near ) then
21239: LD_VAR 0 7
21243: NOT
21244: IFFALSE 21259
// wait ( 0 0$1 * reaction ) ;
21246: LD_INT 35
21248: PUSH
21249: LD_VAR 0 4
21253: MUL
21254: PPUSH
21255: CALL_OW 67
// until are_near ;
21259: LD_VAR 0 7
21263: IFFALSE 21162
// end ;
21265: LD_VAR 0 5
21269: RET
// every 0 0$1 do var Un , hlp ;
21270: GO 21272
21272: DISABLE
21273: LD_INT 0
21275: PPUSH
21276: PPUSH
// begin hlp = UnitFilter ( RusN , [ [ f_alive ] , [ f_placed ] ] ) ;
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_EXP 123
21286: PPUSH
21287: LD_INT 51
21289: PUSH
21290: EMPTY
21291: LIST
21292: PUSH
21293: LD_INT 52
21295: PUSH
21296: EMPTY
21297: LIST
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PPUSH
21303: CALL_OW 72
21307: ST_TO_ADDR
// RusN = hlp ;
21308: LD_ADDR_EXP 123
21312: PUSH
21313: LD_VAR 0 2
21317: ST_TO_ADDR
// for Un in RusN do
21318: LD_ADDR_VAR 0 1
21322: PUSH
21323: LD_EXP 123
21327: PUSH
21328: FOR_IN
21329: IFFALSE 21362
// if ( GetDistUnits ( Un , Dep1 ) ) > Attack_Distance then
21331: LD_VAR 0 1
21335: PPUSH
21336: LD_INT 1
21338: PPUSH
21339: CALL_OW 296
21343: PUSH
21344: LD_EXP 85
21348: GREATER
21349: IFFALSE 21360
// ComReturn ( Un ) ;
21351: LD_VAR 0 1
21355: PPUSH
21356: CALL_OW 144
21360: GO 21328
21362: POP
21363: POP
// if RusN <> 0 then
21364: LD_EXP 123
21368: PUSH
21369: LD_INT 0
21371: NONEQUAL
21372: IFFALSE 21375
// enable ;
21374: ENABLE
// end ;
21375: PPOPN 2
21377: END
// function Go_to_physician ( ill_unit ) ; var start_posX , start_posY ; begin
21378: LD_INT 0
21380: PPUSH
21381: PPUSH
21382: PPUSH
// if IsOk ( RusNSc1 ) and IsLive ( ill_unit ) then
21383: LD_INT 25
21385: PPUSH
21386: CALL_OW 302
21390: PUSH
21391: LD_VAR 0 1
21395: PPUSH
21396: CALL_OW 300
21400: AND
21401: IFFALSE 21591
// begin start_posX = GetX ( ill_unit ) ;
21403: LD_ADDR_VAR 0 3
21407: PUSH
21408: LD_VAR 0 1
21412: PPUSH
21413: CALL_OW 250
21417: ST_TO_ADDR
// start_posY = GetY ( ill_unit ) ;
21418: LD_ADDR_VAR 0 4
21422: PUSH
21423: LD_VAR 0 1
21427: PPUSH
21428: CALL_OW 251
21432: ST_TO_ADDR
// ComMoveXY ( ill_unit , 54 , 16 ) ;
21433: LD_VAR 0 1
21437: PPUSH
21438: LD_INT 54
21440: PPUSH
21441: LD_INT 16
21443: PPUSH
21444: CALL_OW 111
// AddComMoveUnit ( ill_unit , RusNSc1 ) ;
21448: LD_VAR 0 1
21452: PPUSH
21453: LD_INT 25
21455: PPUSH
21456: CALL_OW 172
// WaitNearUnit ( RusNSc1 , 2 , [ ill_unit ] , 0.5 ) ;
21460: LD_INT 25
21462: PPUSH
21463: LD_INT 2
21465: PPUSH
21466: LD_VAR 0 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: PPUSH
21474: LD_REAL  5.00000000000000E-0001
21477: PPUSH
21478: CALL 21150 0 4
// while ( RusN_States [ 9 ] <> 0 ) do
21482: LD_EXP 122
21486: PUSH
21487: LD_INT 9
21489: ARRAY
21490: PUSH
21491: LD_INT 0
21493: NONEQUAL
21494: IFFALSE 21505
// wait ( 1 ) ;
21496: LD_INT 1
21498: PPUSH
21499: CALL_OW 67
21503: GO 21482
// Replace ( RusN_States , 9 , 1 ) ;
21505: LD_EXP 122
21509: PPUSH
21510: LD_INT 9
21512: PPUSH
21513: LD_INT 1
21515: PPUSH
21516: CALL_OW 1
// ComHeal ( RusNSc1 , ill_unit ) ;
21520: LD_INT 25
21522: PPUSH
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 128
// WaitJob ( RusNSc1 , 0.5 ) ;
21532: LD_INT 25
21534: PPUSH
21535: LD_REAL  5.00000000000000E-0001
21538: PPUSH
21539: CALL 21052 0 2
// AddComReturn ( RusNSc1 ) ;
21543: LD_INT 25
21545: PPUSH
21546: CALL_OW 204
// AddComHold ( RusNSc1 ) ;
21550: LD_INT 25
21552: PPUSH
21553: CALL_OW 200
// Replace ( RusN_States , 9 , 0 ) ;
21557: LD_EXP 122
21561: PPUSH
21562: LD_INT 9
21564: PPUSH
21565: LD_INT 0
21567: PPUSH
21568: CALL_OW 1
// AddComMoveXY ( ill_unit , start_posX , start_posY ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: LD_VAR 0 3
21581: PPUSH
21582: LD_VAR 0 4
21586: PPUSH
21587: CALL_OW 171
// end ; end ;
21591: LD_VAR 0 2
21595: RET
// function Healing_Person ( person , lives ) ; begin
21596: LD_INT 0
21598: PPUSH
// if GetLives ( person ) < lives then
21599: LD_VAR 0 1
21603: PPUSH
21604: CALL_OW 256
21608: PUSH
21609: LD_VAR 0 2
21613: LESS
21614: IFFALSE 21999
// begin if person = RusNSo1 then
21616: LD_VAR 0 1
21620: PUSH
21621: LD_INT 3
21623: EQUAL
21624: IFFALSE 21643
// Replace ( RusN_States , 1 , 2 ) else
21626: LD_EXP 122
21630: PPUSH
21631: LD_INT 1
21633: PPUSH
21634: LD_INT 2
21636: PPUSH
21637: CALL_OW 1
21641: GO 21803
// if person = RusNSo2 then
21643: LD_VAR 0 1
21647: PUSH
21648: LD_INT 14
21650: EQUAL
21651: IFFALSE 21670
// Replace ( RusN_States , 2 , 2 ) else
21653: LD_EXP 122
21657: PPUSH
21658: LD_INT 2
21660: PPUSH
21661: LD_INT 2
21663: PPUSH
21664: CALL_OW 1
21668: GO 21803
// if person = RusNSo3 then
21670: LD_VAR 0 1
21674: PUSH
21675: LD_INT 27
21677: EQUAL
21678: IFFALSE 21697
// Replace ( RusN_States , 3 , 2 ) else
21680: LD_EXP 122
21684: PPUSH
21685: LD_INT 3
21687: PPUSH
21688: LD_INT 2
21690: PPUSH
21691: CALL_OW 1
21695: GO 21803
// if person = RusNSo4 then
21697: LD_VAR 0 1
21701: PUSH
21702: LD_INT 28
21704: EQUAL
21705: IFFALSE 21724
// Replace ( RusN_States , 4 , 2 ) else
21707: LD_EXP 122
21711: PPUSH
21712: LD_INT 4
21714: PPUSH
21715: LD_INT 2
21717: PPUSH
21718: CALL_OW 1
21722: GO 21803
// if person = RusNE1 then
21724: LD_VAR 0 1
21728: PUSH
21729: LD_INT 26
21731: EQUAL
21732: IFFALSE 21751
// Replace ( RusN_States , 8 , 2 ) else
21734: LD_EXP 122
21738: PPUSH
21739: LD_INT 8
21741: PPUSH
21742: LD_INT 2
21744: PPUSH
21745: CALL_OW 1
21749: GO 21803
// if person = RusNSo5 then
21751: LD_VAR 0 1
21755: PUSH
21756: LD_INT 24
21758: EQUAL
21759: IFFALSE 21778
// Replace ( RusN_States , 10 , 2 ) else
21761: LD_EXP 122
21765: PPUSH
21766: LD_INT 10
21768: PPUSH
21769: LD_INT 2
21771: PPUSH
21772: CALL_OW 1
21776: GO 21803
// if person = RusNSo6 then
21778: LD_VAR 0 1
21782: PUSH
21783: LD_INT 31
21785: EQUAL
21786: IFFALSE 21803
// Replace ( RusN_States , 11 , 2 ) ;
21788: LD_EXP 122
21792: PPUSH
21793: LD_INT 11
21795: PPUSH
21796: LD_INT 2
21798: PPUSH
21799: CALL_OW 1
// Go_to_physician ( person ) ;
21803: LD_VAR 0 1
21807: PPUSH
21808: CALL 21378 0 1
// if person = RusNSo1 then
21812: LD_VAR 0 1
21816: PUSH
21817: LD_INT 3
21819: EQUAL
21820: IFFALSE 21839
// Replace ( RusN_States , 1 , 0 ) else
21822: LD_EXP 122
21826: PPUSH
21827: LD_INT 1
21829: PPUSH
21830: LD_INT 0
21832: PPUSH
21833: CALL_OW 1
21837: GO 21999
// if person = RusNSo2 then
21839: LD_VAR 0 1
21843: PUSH
21844: LD_INT 14
21846: EQUAL
21847: IFFALSE 21866
// Replace ( RusN_States , 2 , 0 ) else
21849: LD_EXP 122
21853: PPUSH
21854: LD_INT 2
21856: PPUSH
21857: LD_INT 0
21859: PPUSH
21860: CALL_OW 1
21864: GO 21999
// if person = RusNSo3 then
21866: LD_VAR 0 1
21870: PUSH
21871: LD_INT 27
21873: EQUAL
21874: IFFALSE 21893
// Replace ( RusN_States , 3 , 0 ) else
21876: LD_EXP 122
21880: PPUSH
21881: LD_INT 3
21883: PPUSH
21884: LD_INT 0
21886: PPUSH
21887: CALL_OW 1
21891: GO 21999
// if person = RusNSo4 then
21893: LD_VAR 0 1
21897: PUSH
21898: LD_INT 28
21900: EQUAL
21901: IFFALSE 21920
// Replace ( RusN_States , 4 , 0 ) else
21903: LD_EXP 122
21907: PPUSH
21908: LD_INT 4
21910: PPUSH
21911: LD_INT 0
21913: PPUSH
21914: CALL_OW 1
21918: GO 21999
// if person = RusNE1 then
21920: LD_VAR 0 1
21924: PUSH
21925: LD_INT 26
21927: EQUAL
21928: IFFALSE 21947
// Replace ( RusN_States , 8 , 0 ) else
21930: LD_EXP 122
21934: PPUSH
21935: LD_INT 8
21937: PPUSH
21938: LD_INT 0
21940: PPUSH
21941: CALL_OW 1
21945: GO 21999
// if person = RusNSo5 then
21947: LD_VAR 0 1
21951: PUSH
21952: LD_INT 24
21954: EQUAL
21955: IFFALSE 21974
// Replace ( RusN_States , 10 , 0 ) else
21957: LD_EXP 122
21961: PPUSH
21962: LD_INT 10
21964: PPUSH
21965: LD_INT 0
21967: PPUSH
21968: CALL_OW 1
21972: GO 21999
// if person = RusNSo6 then
21974: LD_VAR 0 1
21978: PUSH
21979: LD_INT 31
21981: EQUAL
21982: IFFALSE 21999
// Replace ( RusN_States , 11 , 0 ) ;
21984: LD_EXP 122
21988: PPUSH
21989: LD_INT 11
21991: PPUSH
21992: LD_INT 0
21994: PPUSH
21995: CALL_OW 1
// end ; end ;
21999: LD_VAR 0 3
22003: RET
// function Select_Unit_With_Min_Lives ( list_of_units , at_least ) ; var i , j , lives , selected_unit , min ; begin
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
// selected_unit = 0 ;
22012: LD_ADDR_VAR 0 7
22016: PUSH
22017: LD_INT 0
22019: ST_TO_ADDR
// j = 0 ;
22020: LD_ADDR_VAR 0 5
22024: PUSH
22025: LD_INT 0
22027: ST_TO_ADDR
// min = 1000 ;
22028: LD_ADDR_VAR 0 8
22032: PUSH
22033: LD_INT 1000
22035: ST_TO_ADDR
// for i in list_of_units do
22036: LD_ADDR_VAR 0 4
22040: PUSH
22041: LD_VAR 0 1
22045: PUSH
22046: FOR_IN
22047: IFFALSE 22124
// begin j = j + 1 ;
22049: LD_ADDR_VAR 0 5
22053: PUSH
22054: LD_VAR 0 5
22058: PUSH
22059: LD_INT 1
22061: PLUS
22062: ST_TO_ADDR
// lives = GetLives ( i ) ;
22063: LD_ADDR_VAR 0 6
22067: PUSH
22068: LD_VAR 0 4
22072: PPUSH
22073: CALL_OW 256
22077: ST_TO_ADDR
// if ( lives > at_least ) and ( lives < min ) then
22078: LD_VAR 0 6
22082: PUSH
22083: LD_VAR 0 2
22087: GREATER
22088: PUSH
22089: LD_VAR 0 6
22093: PUSH
22094: LD_VAR 0 8
22098: LESS
22099: AND
22100: IFFALSE 22122
// begin min = lives ;
22102: LD_ADDR_VAR 0 8
22106: PUSH
22107: LD_VAR 0 6
22111: ST_TO_ADDR
// selected_unit = j ;
22112: LD_ADDR_VAR 0 7
22116: PUSH
22117: LD_VAR 0 5
22121: ST_TO_ADDR
// end ; end ;
22122: GO 22046
22124: POP
22125: POP
// result = selected_unit ;
22126: LD_ADDR_VAR 0 3
22130: PUSH
22131: LD_VAR 0 7
22135: ST_TO_ADDR
// end ;
22136: LD_VAR 0 3
22140: RET
// every 0 0$1 do var un_min_lives ;
22141: GO 22143
22143: DISABLE
22144: LD_INT 0
22146: PPUSH
// begin case RusN_States [ 8 ] of 0 :
22147: LD_EXP 122
22151: PUSH
22152: LD_INT 8
22154: ARRAY
22155: PUSH
22156: LD_INT 0
22158: DOUBLE
22159: EQUAL
22160: IFTRUE 22164
22162: GO 22266
22164: POP
// begin Healing_Person ( RusNE1 , 600 ) ;
22165: LD_INT 26
22167: PPUSH
22168: LD_INT 600
22170: PPUSH
22171: CALL 21596 0 2
// if count5 = 0 then
22175: LD_EXP 120
22179: PUSH
22180: LD_INT 0
22182: EQUAL
22183: IFFALSE 22264
// begin un_min_lives = Select_Unit_With_Min_Lives ( Brestworks , 100 ) ;
22185: LD_ADDR_VAR 0 1
22189: PUSH
22190: LD_EXP 121
22194: PPUSH
22195: LD_INT 100
22197: PPUSH
22198: CALL 22004 0 2
22202: ST_TO_ADDR
// if GetLives ( Brestworks [ un_min_lives ] ) < 1000 then
22203: LD_EXP 121
22207: PUSH
22208: LD_VAR 0 1
22212: ARRAY
22213: PPUSH
22214: CALL_OW 256
22218: PUSH
22219: LD_INT 1000
22221: LESS
22222: IFFALSE 22264
// begin ComStop ( RusNE1 ) ;
22224: LD_INT 26
22226: PPUSH
22227: CALL_OW 141
// ComRepairBuilding ( RusNE1 , Brestworks [ un_min_lives ] ) ;
22231: LD_INT 26
22233: PPUSH
22234: LD_EXP 121
22238: PUSH
22239: LD_VAR 0 1
22243: ARRAY
22244: PPUSH
22245: CALL_OW 130
// Replace ( RusN_States , 8 , 1 ) ;
22249: LD_EXP 122
22253: PPUSH
22254: LD_INT 8
22256: PPUSH
22257: LD_INT 1
22259: PPUSH
22260: CALL_OW 1
// end ; end ; end ; 1 :
22264: GO 22320
22266: LD_INT 1
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22319
22274: POP
// begin Healing_Person ( RusNE1 , 600 ) ;
22275: LD_INT 26
22277: PPUSH
22278: LD_INT 600
22280: PPUSH
22281: CALL 21596 0 2
// if not ( IsBusy ( RusNE1 ) ) then
22285: LD_INT 26
22287: PPUSH
22288: CALL_OW 315
22292: NOT
22293: IFFALSE 22317
// begin ComReturn ( RusNE1 ) ;
22295: LD_INT 26
22297: PPUSH
22298: CALL_OW 144
// Replace ( RusN_States , 8 , 0 ) ;
22302: LD_EXP 122
22306: PPUSH
22307: LD_INT 8
22309: PPUSH
22310: LD_INT 0
22312: PPUSH
22313: CALL_OW 1
// end ; end ; end ;
22317: GO 22320
22319: POP
// if IsLive ( RusNE1 ) then
22320: LD_INT 26
22322: PPUSH
22323: CALL_OW 300
22327: IFFALSE 22330
// enable ;
22329: ENABLE
// end ;
22330: PPOPN 1
22332: END
// every 0 0$1 do
22333: GO 22335
22335: DISABLE
// begin case RusN_States [ 5 ] of 0 :
22336: LD_EXP 122
22340: PUSH
22341: LD_INT 5
22343: ARRAY
22344: PUSH
22345: LD_INT 0
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22381
22353: POP
// if not ( IsOk ( Brw1 ) ) then
22354: LD_INT 29
22356: PPUSH
22357: CALL_OW 302
22361: NOT
22362: IFFALSE 22379
// Replace ( RusN_States , 5 , 1 ) ; 1 :
22364: LD_EXP 122
22368: PPUSH
22369: LD_INT 5
22371: PPUSH
22372: LD_INT 1
22374: PPUSH
22375: CALL_OW 1
22379: GO 22448
22381: LD_INT 1
22383: DOUBLE
22384: EQUAL
22385: IFTRUE 22389
22387: GO 22447
22389: POP
// begin if GetLives ( [ guard1 ] ) < Lives_to_Retreat then
22390: LD_INT 11
22392: PUSH
22393: EMPTY
22394: LIST
22395: PPUSH
22396: CALL_OW 256
22400: PUSH
22401: LD_EXP 89
22405: LESS
22406: IFFALSE 22445
// begin Replace ( RusN_States , 5 , 2 ) ;
22408: LD_EXP 122
22412: PPUSH
22413: LD_INT 5
22415: PPUSH
22416: LD_INT 2
22418: PPUSH
22419: CALL_OW 1
// Go_to_physician ( guard1 ) ;
22423: LD_INT 11
22425: PPUSH
22426: CALL 21378 0 1
// Replace ( RusN_States , 5 , 1 ) ;
22430: LD_EXP 122
22434: PPUSH
22435: LD_INT 5
22437: PPUSH
22438: LD_INT 1
22440: PPUSH
22441: CALL_OW 1
// end ; end ; end ;
22445: GO 22448
22447: POP
// if IsLive ( guard1 ) then
22448: LD_INT 11
22450: PPUSH
22451: CALL_OW 300
22455: IFFALSE 22458
// enable ;
22457: ENABLE
// end ;
22458: END
// every 0 0$1 do
22459: GO 22461
22461: DISABLE
// begin case RusN_States [ 6 ] of 0 :
22462: LD_EXP 122
22466: PUSH
22467: LD_INT 6
22469: ARRAY
22470: PUSH
22471: LD_INT 0
22473: DOUBLE
22474: EQUAL
22475: IFTRUE 22479
22477: GO 22507
22479: POP
// if not ( IsOk ( Brw2 ) ) then
22480: LD_INT 9
22482: PPUSH
22483: CALL_OW 302
22487: NOT
22488: IFFALSE 22505
// Replace ( RusN_States , 6 , 1 ) ; 1 :
22490: LD_EXP 122
22494: PPUSH
22495: LD_INT 6
22497: PPUSH
22498: LD_INT 1
22500: PPUSH
22501: CALL_OW 1
22505: GO 22574
22507: LD_INT 1
22509: DOUBLE
22510: EQUAL
22511: IFTRUE 22515
22513: GO 22573
22515: POP
// begin if GetLives ( [ guard2 ] ) < Lives_to_Retreat then
22516: LD_INT 12
22518: PUSH
22519: EMPTY
22520: LIST
22521: PPUSH
22522: CALL_OW 256
22526: PUSH
22527: LD_EXP 89
22531: LESS
22532: IFFALSE 22571
// begin Replace ( RusN_States , 6 , 2 ) ;
22534: LD_EXP 122
22538: PPUSH
22539: LD_INT 6
22541: PPUSH
22542: LD_INT 2
22544: PPUSH
22545: CALL_OW 1
// Go_to_physician ( guard2 ) ;
22549: LD_INT 12
22551: PPUSH
22552: CALL 21378 0 1
// Replace ( RusN_States , 6 , 1 ) ;
22556: LD_EXP 122
22560: PPUSH
22561: LD_INT 6
22563: PPUSH
22564: LD_INT 1
22566: PPUSH
22567: CALL_OW 1
// end ; end ; end ;
22571: GO 22574
22573: POP
// if IsLive ( guard2 ) then
22574: LD_INT 12
22576: PPUSH
22577: CALL_OW 300
22581: IFFALSE 22584
// enable ;
22583: ENABLE
// end ;
22584: END
// every 0 0$1 do
22585: GO 22587
22587: DISABLE
// begin case RusN_States [ 7 ] of 0 :
22588: LD_EXP 122
22592: PUSH
22593: LD_INT 7
22595: ARRAY
22596: PUSH
22597: LD_INT 0
22599: DOUBLE
22600: EQUAL
22601: IFTRUE 22605
22603: GO 22633
22605: POP
// if not ( IsOk ( Brw3 ) ) then
22606: LD_INT 30
22608: PPUSH
22609: CALL_OW 302
22613: NOT
22614: IFFALSE 22631
// Replace ( RusN_States , 7 , 1 ) ; 1 :
22616: LD_EXP 122
22620: PPUSH
22621: LD_INT 7
22623: PPUSH
22624: LD_INT 1
22626: PPUSH
22627: CALL_OW 1
22631: GO 22700
22633: LD_INT 1
22635: DOUBLE
22636: EQUAL
22637: IFTRUE 22641
22639: GO 22699
22641: POP
// begin if GetLives ( [ guard3 ] ) < Lives_to_Retreat then
22642: LD_INT 7
22644: PUSH
22645: EMPTY
22646: LIST
22647: PPUSH
22648: CALL_OW 256
22652: PUSH
22653: LD_EXP 89
22657: LESS
22658: IFFALSE 22697
// begin Replace ( RusN_States , 7 , 2 ) ;
22660: LD_EXP 122
22664: PPUSH
22665: LD_INT 7
22667: PPUSH
22668: LD_INT 2
22670: PPUSH
22671: CALL_OW 1
// Go_to_physician ( guard3 ) ;
22675: LD_INT 7
22677: PPUSH
22678: CALL 21378 0 1
// Replace ( RusN_States , 7 , 1 ) ;
22682: LD_EXP 122
22686: PPUSH
22687: LD_INT 7
22689: PPUSH
22690: LD_INT 1
22692: PPUSH
22693: CALL_OW 1
// end ; end ; end ;
22697: GO 22700
22699: POP
// if IsLive ( guard3 ) then
22700: LD_INT 7
22702: PPUSH
22703: CALL_OW 300
22707: IFFALSE 22710
// enable ;
22709: ENABLE
// end ;
22710: END
// every 0 0$1 do
22711: GO 22713
22713: DISABLE
// begin if RusN_States [ 1 ] = 0 then
22714: LD_EXP 122
22718: PUSH
22719: LD_INT 1
22721: ARRAY
22722: PUSH
22723: LD_INT 0
22725: EQUAL
22726: IFFALSE 22740
// Healing_Person ( RusNSo1 , Lives_to_Retreat ) ;
22728: LD_INT 3
22730: PPUSH
22731: LD_EXP 89
22735: PPUSH
22736: CALL 21596 0 2
// if IsLive ( RusNSo1 ) then
22740: LD_INT 3
22742: PPUSH
22743: CALL_OW 300
22747: IFFALSE 22750
// enable ;
22749: ENABLE
// end ;
22750: END
// every 0 0$1 do
22751: GO 22753
22753: DISABLE
// begin if RusN_States [ 2 ] = 0 then
22754: LD_EXP 122
22758: PUSH
22759: LD_INT 2
22761: ARRAY
22762: PUSH
22763: LD_INT 0
22765: EQUAL
22766: IFFALSE 22780
// Healing_Person ( RusNSo2 , Lives_to_Retreat ) ;
22768: LD_INT 14
22770: PPUSH
22771: LD_EXP 89
22775: PPUSH
22776: CALL 21596 0 2
// if IsLive ( RusNSo2 ) then
22780: LD_INT 14
22782: PPUSH
22783: CALL_OW 300
22787: IFFALSE 22790
// enable ;
22789: ENABLE
// end ;
22790: END
// every 0 0$1 do
22791: GO 22793
22793: DISABLE
// begin if RusN_States [ 3 ] = 0 then
22794: LD_EXP 122
22798: PUSH
22799: LD_INT 3
22801: ARRAY
22802: PUSH
22803: LD_INT 0
22805: EQUAL
22806: IFFALSE 22820
// Healing_Person ( RusNSo3 , Lives_to_Retreat ) ;
22808: LD_INT 27
22810: PPUSH
22811: LD_EXP 89
22815: PPUSH
22816: CALL 21596 0 2
// if IsLive ( RusNSo3 ) then
22820: LD_INT 27
22822: PPUSH
22823: CALL_OW 300
22827: IFFALSE 22830
// enable ;
22829: ENABLE
// end ;
22830: END
// every 0 0$1 do
22831: GO 22833
22833: DISABLE
// begin if RusN_States [ 4 ] = 0 then
22834: LD_EXP 122
22838: PUSH
22839: LD_INT 4
22841: ARRAY
22842: PUSH
22843: LD_INT 0
22845: EQUAL
22846: IFFALSE 22860
// Healing_Person ( RusNSo4 , Lives_to_Retreat ) ;
22848: LD_INT 28
22850: PPUSH
22851: LD_EXP 89
22855: PPUSH
22856: CALL 21596 0 2
// if IsLive ( RusNSo4 ) then
22860: LD_INT 28
22862: PPUSH
22863: CALL_OW 300
22867: IFFALSE 22870
// enable ;
22869: ENABLE
// end ;
22870: END
// every 0 0$1 do
22871: GO 22873
22873: DISABLE
// begin if RusN_States [ 10 ] = 0 then
22874: LD_EXP 122
22878: PUSH
22879: LD_INT 10
22881: ARRAY
22882: PUSH
22883: LD_INT 0
22885: EQUAL
22886: IFFALSE 22900
// Healing_Person ( RusNSo5 , Lives_to_Retreat ) ;
22888: LD_INT 24
22890: PPUSH
22891: LD_EXP 89
22895: PPUSH
22896: CALL 21596 0 2
// if IsLive ( RusNSo5 ) then
22900: LD_INT 24
22902: PPUSH
22903: CALL_OW 300
22907: IFFALSE 22910
// enable ;
22909: ENABLE
// end ;
22910: END
// every 0 0$1 do
22911: GO 22913
22913: DISABLE
// begin if RusN_States [ 11 ] = 0 then
22914: LD_EXP 122
22918: PUSH
22919: LD_INT 11
22921: ARRAY
22922: PUSH
22923: LD_INT 0
22925: EQUAL
22926: IFFALSE 22940
// Healing_Person ( RusNSo6 , Lives_to_Retreat ) ;
22928: LD_INT 31
22930: PPUSH
22931: LD_EXP 89
22935: PPUSH
22936: CALL 21596 0 2
// if IsLive ( RusNSo6 ) then
22940: LD_INT 31
22942: PPUSH
22943: CALL_OW 300
22947: IFFALSE 22950
// enable ;
22949: ENABLE
// end ;
22950: END
// every 0 0$1 + 0 0$0.5 do
22951: GO 22953
22953: DISABLE
// begin count5 = ( count5 + 1 ) mod 5 ;
22954: LD_ADDR_EXP 120
22958: PUSH
22959: LD_EXP 120
22963: PUSH
22964: LD_INT 1
22966: PLUS
22967: PUSH
22968: LD_INT 5
22970: MOD
22971: ST_TO_ADDR
// enable ;
22972: ENABLE
// end ;
22973: END
