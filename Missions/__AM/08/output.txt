// export rus , amer , amer_reinf ; export dying ; var ruboilm0 , ruboilp0 , ruboilp1 , rubwrks0 , rubfact0 , rubbrid0 , rubbunk0 , rubbunk1 , rubarmr0 ; var rubdepo0 ; var ruv0 , ruhmech1 , ruv1 , ruhmech2 , ruv2 , ruhmech3 ; var rusove ; var amv0 , amv1 ; function prepare_units ; var tmp ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// amer = 1 ;
   4: LD_ADDR_EXP 2
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// amer_reinf = 4 ;
  12: LD_ADDR_EXP 3
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// rus = 3 ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 3
  27: ST_TO_ADDR
// dying = [ ] ;
  28: LD_ADDR_EXP 4
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// inituc ;
  35: CALL_OW 18
// inithc ;
  39: CALL_OW 19
// initvc ;
  43: CALL_OW 20
// initbc ;
  47: CALL_OW 21
// from_prev_mis ;
  51: CALL 18112 0 0
// case difficulty of 3 :
  55: LD_OWVAR 67
  59: PUSH
  60: LD_INT 3
  62: DOUBLE
  63: EQUAL
  64: IFTRUE 68
  66: GO 87
  68: POP
// begin vc_chassis = us_light_wheeled ;
  69: LD_ADDR_OWVAR 37
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// vc_weapon = us_light_gun ;
  77: LD_ADDR_OWVAR 40
  81: PUSH
  82: LD_INT 3
  84: ST_TO_ADDR
// end ; 2 :
  85: GO 142
  87: LD_INT 2
  89: DOUBLE
  90: EQUAL
  91: IFTRUE 95
  93: GO 114
  95: POP
// begin vc_chassis = us_medium_wheeled ;
  96: LD_ADDR_OWVAR 37
 100: PUSH
 101: LD_INT 2
 103: ST_TO_ADDR
// vc_weapon = us_double_gun ;
 104: LD_ADDR_OWVAR 40
 108: PUSH
 109: LD_INT 5
 111: ST_TO_ADDR
// end ; 1 :
 112: GO 142
 114: LD_INT 1
 116: DOUBLE
 117: EQUAL
 118: IFTRUE 122
 120: GO 141
 122: POP
// begin vc_chassis = us_medium_tracked ;
 123: LD_ADDR_OWVAR 37
 127: PUSH
 128: LD_INT 3
 130: ST_TO_ADDR
// vc_weapon = us_double_gun ;
 131: LD_ADDR_OWVAR 40
 135: PUSH
 136: LD_INT 5
 138: ST_TO_ADDR
// end ; end ;
 139: GO 142
 141: POP
// vc_control = control_remote ;
 142: LD_ADDR_OWVAR 38
 146: PUSH
 147: LD_INT 2
 149: ST_TO_ADDR
// vc_engine = engine_combustion ;
 150: LD_ADDR_OWVAR 39
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// amv0 = createvehicle ;
 158: LD_ADDR_LOC 18
 162: PUSH
 163: CALL_OW 45
 167: ST_TO_ADDR
// setdir ( amv0 , 3 ) ;
 168: LD_LOC 18
 172: PPUSH
 173: LD_INT 3
 175: PPUSH
 176: CALL_OW 233
// placeunitxyr ( amv0 , 50 , 23 , 3 , false ) ;
 180: LD_LOC 18
 184: PPUSH
 185: LD_INT 50
 187: PPUSH
 188: LD_INT 23
 190: PPUSH
 191: LD_INT 3
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 50
// case difficulty of 3 :
 201: LD_OWVAR 67
 205: PUSH
 206: LD_INT 3
 208: DOUBLE
 209: EQUAL
 210: IFTRUE 214
 212: GO 233
 214: POP
// begin vc_chassis = us_medium_wheeled ;
 215: LD_ADDR_OWVAR 37
 219: PUSH
 220: LD_INT 2
 222: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 223: LD_ADDR_OWVAR 40
 227: PUSH
 228: LD_INT 4
 230: ST_TO_ADDR
// end ; 2 :
 231: GO 288
 233: LD_INT 2
 235: DOUBLE
 236: EQUAL
 237: IFTRUE 241
 239: GO 260
 241: POP
// begin vc_chassis = us_medium_tracked ;
 242: LD_ADDR_OWVAR 37
 246: PUSH
 247: LD_INT 3
 249: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 250: LD_ADDR_OWVAR 40
 254: PUSH
 255: LD_INT 4
 257: ST_TO_ADDR
// end ; 1 :
 258: GO 288
 260: LD_INT 1
 262: DOUBLE
 263: EQUAL
 264: IFTRUE 268
 266: GO 287
 268: POP
// begin vc_chassis = us_heavy_tracked ;
 269: LD_ADDR_OWVAR 37
 273: PUSH
 274: LD_INT 4
 276: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 277: LD_ADDR_OWVAR 40
 281: PUSH
 282: LD_INT 4
 284: ST_TO_ADDR
// end ; end ;
 285: GO 288
 287: POP
// vc_control = control_remote ;
 288: LD_ADDR_OWVAR 38
 292: PUSH
 293: LD_INT 2
 295: ST_TO_ADDR
// vc_engine = engine_combustion ;
 296: LD_ADDR_OWVAR 39
 300: PUSH
 301: LD_INT 1
 303: ST_TO_ADDR
// amv1 = createvehicle ;
 304: LD_ADDR_LOC 19
 308: PUSH
 309: CALL_OW 45
 313: ST_TO_ADDR
// setdir ( amv1 , 2 ) ;
 314: LD_LOC 19
 318: PPUSH
 319: LD_INT 2
 321: PPUSH
 322: CALL_OW 233
// placeunitxyr ( amv1 , 56 , 24 , 3 , false ) ;
 326: LD_LOC 19
 330: PPUSH
 331: LD_INT 56
 333: PPUSH
 334: LD_INT 24
 336: PPUSH
 337: LD_INT 3
 339: PPUSH
 340: LD_INT 0
 342: PPUSH
 343: CALL_OW 50
// preparesoldier ( sex_male , 3 ) ;
 347: LD_INT 1
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL_OW 381
// tmp = createhuman ;
 357: LD_ADDR_VAR 0 2
 361: PUSH
 362: CALL_OW 44
 366: ST_TO_ADDR
// setlives ( tmp , 250 ) ;
 367: LD_VAR 0 2
 371: PPUSH
 372: LD_INT 250
 374: PPUSH
 375: CALL_OW 234
// setdir ( tmp , 3 ) ;
 379: LD_VAR 0 2
 383: PPUSH
 384: LD_INT 3
 386: PPUSH
 387: CALL_OW 233
// placeunitxy ( tmp , 50 , 43 , false ) ;
 391: LD_VAR 0 2
 395: PPUSH
 396: LD_INT 50
 398: PPUSH
 399: LD_INT 43
 401: PPUSH
 402: LD_INT 0
 404: PPUSH
 405: CALL_OW 48
// uc_side = 0 ;
 409: LD_ADDR_OWVAR 20
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// preparesoldier ( sex_male , 3 ) ;
 417: LD_INT 1
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 381
// tmp = createhuman ;
 427: LD_ADDR_VAR 0 2
 431: PUSH
 432: CALL_OW 44
 436: ST_TO_ADDR
// setlives ( tmp , 10 ) ;
 437: LD_VAR 0 2
 441: PPUSH
 442: LD_INT 10
 444: PPUSH
 445: CALL_OW 234
// setdir ( tmp , 5 ) ;
 449: LD_VAR 0 2
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: CALL_OW 233
// placeunitxy ( tmp , 62 , 28 , false ) ;
 461: LD_VAR 0 2
 465: PPUSH
 466: LD_INT 62
 468: PPUSH
 469: LD_INT 28
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// preparesoldier ( sex_male , 3 ) ;
 479: LD_INT 1
 481: PPUSH
 482: LD_INT 3
 484: PPUSH
 485: CALL_OW 381
// tmp = createhuman ;
 489: LD_ADDR_VAR 0 2
 493: PUSH
 494: CALL_OW 44
 498: ST_TO_ADDR
// setlives ( tmp , 10 ) ;
 499: LD_VAR 0 2
 503: PPUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 234
// setdir ( tmp , 5 ) ;
 511: LD_VAR 0 2
 515: PPUSH
 516: LD_INT 5
 518: PPUSH
 519: CALL_OW 233
// placeunitxy ( tmp , 58 , 28 , false ) ;
 523: LD_VAR 0 2
 527: PPUSH
 528: LD_INT 58
 530: PPUSH
 531: LD_INT 28
 533: PPUSH
 534: LD_INT 0
 536: PPUSH
 537: CALL_OW 48
// setlives ( ambbrwr2 , hranice_umirani ) ;
 541: LD_INT 20
 543: PPUSH
 544: LD_INT 250
 546: PPUSH
 547: CALL_OW 234
// setlives ( ambbrwr0 , hranice_zraneni ) ;
 551: LD_INT 21
 553: PPUSH
 554: LD_INT 500
 556: PPUSH
 557: CALL_OW 234
// setlives ( ambbunk3 , hranice_umirani + 1 ) ;
 561: LD_INT 4
 563: PPUSH
 564: LD_INT 250
 566: PUSH
 567: LD_INT 1
 569: PLUS
 570: PPUSH
 571: CALL_OW 234
// uc_side = 1 ;
 575: LD_ADDR_OWVAR 20
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// vc_control = control_manual ;
 583: LD_ADDR_OWVAR 38
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// tmp = createvehicle ;
 591: LD_ADDR_VAR 0 2
 595: PUSH
 596: CALL_OW 45
 600: ST_TO_ADDR
// setdir ( tmp , 2 ) ;
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 2
 608: PPUSH
 609: CALL_OW 233
// setlives ( tmp , 49 ) ;
 613: LD_VAR 0 2
 617: PPUSH
 618: LD_INT 49
 620: PPUSH
 621: CALL_OW 234
// placeunitxy ( tmp , 45 , 39 , false ) ;
 625: LD_VAR 0 2
 629: PPUSH
 630: LD_INT 45
 632: PPUSH
 633: LD_INT 39
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL_OW 48
// uc_nation = nation_russian ;
 643: LD_ADDR_OWVAR 21
 647: PUSH
 648: LD_INT 3
 650: ST_TO_ADDR
// uc_side = rus ;
 651: LD_ADDR_OWVAR 20
 655: PUSH
 656: LD_EXP 1
 660: ST_TO_ADDR
// bc_type = b_depot ;
 661: LD_ADDR_OWVAR 42
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// bc_level = 4 ;
 669: LD_ADDR_OWVAR 43
 673: PUSH
 674: LD_INT 4
 676: ST_TO_ADDR
// rubdepo0 = createandplacebuildingxyd ( 90 , 85 , 3 ) ;
 677: LD_ADDR_LOC 10
 681: PUSH
 682: LD_INT 90
 684: PPUSH
 685: LD_INT 85
 687: PPUSH
 688: LD_INT 3
 690: PPUSH
 691: CALL_OW 47
 695: ST_TO_ADDR
// setresourcetype ( getbase ( rubdepo0 ) , mat_cans , 500 ) ;
 696: LD_LOC 10
 700: PPUSH
 701: CALL_OW 274
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_INT 500
 711: PPUSH
 712: CALL_OW 277
// setresourcetype ( getbase ( rubdepo0 ) , mat_oil , 20 ) ;
 716: LD_LOC 10
 720: PPUSH
 721: CALL_OW 274
 725: PPUSH
 726: LD_INT 2
 728: PPUSH
 729: LD_INT 20
 731: PPUSH
 732: CALL_OW 277
// commovexy ( ruhscie0 , 87 , 94 ) ;
 736: LD_INT 22
 738: PPUSH
 739: LD_INT 87
 741: PPUSH
 742: LD_INT 94
 744: PPUSH
 745: CALL_OW 111
// ruboilm0 = combuild ( ruhengi1 , b_oil_mine , 106 , 97 , 0 ) ;
 749: LD_ADDR_LOC 1
 753: PUSH
 754: LD_INT 6
 756: PPUSH
 757: LD_INT 29
 759: PPUSH
 760: LD_INT 106
 762: PPUSH
 763: LD_INT 97
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 145
 773: ST_TO_ADDR
// ruboilp0 = combuild ( ruhengi0 , b_oil_power , 99 , 97 , 0 ) ;
 774: LD_ADDR_LOC 2
 778: PUSH
 779: LD_INT 5
 781: PPUSH
 782: LD_INT 26
 784: PPUSH
 785: LD_INT 99
 787: PPUSH
 788: LD_INT 97
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 145
 798: ST_TO_ADDR
// rubbunk0 = combuild ( ruhengi2 , b_bunker , 75 , 74 , 2 ) ;
 799: LD_ADDR_LOC 7
 803: PUSH
 804: LD_INT 8
 806: PPUSH
 807: LD_INT 32
 809: PPUSH
 810: LD_INT 75
 812: PPUSH
 813: LD_INT 74
 815: PPUSH
 816: LD_INT 2
 818: PPUSH
 819: CALL_OW 145
 823: ST_TO_ADDR
// preparemechanic ( sex_male , 5 ) ;
 824: LD_INT 1
 826: PPUSH
 827: LD_INT 5
 829: PPUSH
 830: CALL_OW 383
// ruhmech1 = createhuman ;
 834: LD_ADDR_LOC 12
 838: PUSH
 839: CALL_OW 44
 843: ST_TO_ADDR
// case difficulty of 1 :
 844: LD_OWVAR 67
 848: PUSH
 849: LD_INT 1
 851: DOUBLE
 852: EQUAL
 853: IFTRUE 857
 855: GO 876
 857: POP
// begin vc_chassis = ru_medium_tracked ;
 858: LD_ADDR_OWVAR 37
 862: PUSH
 863: LD_INT 22
 865: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
 866: LD_ADDR_OWVAR 40
 870: PUSH
 871: LD_INT 43
 873: ST_TO_ADDR
// end ; 2 :
 874: GO 931
 876: LD_INT 2
 878: DOUBLE
 879: EQUAL
 880: IFTRUE 884
 882: GO 903
 884: POP
// begin vc_chassis = ru_medium_tracked ;
 885: LD_ADDR_OWVAR 37
 889: PUSH
 890: LD_INT 22
 892: ST_TO_ADDR
// vc_weapon = ru_gun ;
 893: LD_ADDR_OWVAR 40
 897: PUSH
 898: LD_INT 44
 900: ST_TO_ADDR
// end ; 3 :
 901: GO 931
 903: LD_INT 3
 905: DOUBLE
 906: EQUAL
 907: IFTRUE 911
 909: GO 930
 911: POP
// begin vc_chassis = ru_heavy_tracked ;
 912: LD_ADDR_OWVAR 37
 916: PUSH
 917: LD_INT 24
 919: ST_TO_ADDR
// vc_weapon = ru_gun ;
 920: LD_ADDR_OWVAR 40
 924: PUSH
 925: LD_INT 44
 927: ST_TO_ADDR
// end ; end ;
 928: GO 931
 930: POP
// vc_control = control_manual ;
 931: LD_ADDR_OWVAR 38
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
// vc_engine = engine_combustion ;
 939: LD_ADDR_OWVAR 39
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// ruv0 = createvehicle ;
 947: LD_ADDR_LOC 11
 951: PUSH
 952: CALL_OW 45
 956: ST_TO_ADDR
// setdir ( ruv0 , 5 ) ;
 957: LD_LOC 11
 961: PPUSH
 962: LD_INT 5
 964: PPUSH
 965: CALL_OW 233
// placeunitxy ( ruv0 , 66 , 83 , false ) ;
 969: LD_LOC 11
 973: PPUSH
 974: LD_INT 66
 976: PPUSH
 977: LD_INT 83
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 48
// placehumaninunit ( ruhmech1 , ruv0 ) ;
 987: LD_LOC 12
 991: PPUSH
 992: LD_LOC 11
 996: PPUSH
 997: CALL_OW 52
// preparemechanic ( sex_male , 4 ) ;
1001: LD_INT 1
1003: PPUSH
1004: LD_INT 4
1006: PPUSH
1007: CALL_OW 383
// ruhmech2 = createhuman ;
1011: LD_ADDR_LOC 14
1015: PUSH
1016: CALL_OW 44
1020: ST_TO_ADDR
// case difficulty of 1 :
1021: LD_OWVAR 67
1025: PUSH
1026: LD_INT 1
1028: DOUBLE
1029: EQUAL
1030: IFTRUE 1034
1032: GO 1053
1034: POP
// begin vc_chassis = ru_medium_wheeled ;
1035: LD_ADDR_OWVAR 37
1039: PUSH
1040: LD_INT 21
1042: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1043: LD_ADDR_OWVAR 40
1047: PUSH
1048: LD_INT 42
1050: ST_TO_ADDR
// end ; 2 :
1051: GO 1108
1053: LD_INT 2
1055: DOUBLE
1056: EQUAL
1057: IFTRUE 1061
1059: GO 1080
1061: POP
// begin vc_chassis = ru_medium_wheeled ;
1062: LD_ADDR_OWVAR 37
1066: PUSH
1067: LD_INT 21
1069: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1070: LD_ADDR_OWVAR 40
1074: PUSH
1075: LD_INT 43
1077: ST_TO_ADDR
// end ; 3 :
1078: GO 1108
1080: LD_INT 3
1082: DOUBLE
1083: EQUAL
1084: IFTRUE 1088
1086: GO 1107
1088: POP
// begin vc_chassis = ru_medium_wheeled ;
1089: LD_ADDR_OWVAR 37
1093: PUSH
1094: LD_INT 21
1096: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1097: LD_ADDR_OWVAR 40
1101: PUSH
1102: LD_INT 43
1104: ST_TO_ADDR
// end ; end ;
1105: GO 1108
1107: POP
// vc_control = control_manual ;
1108: LD_ADDR_OWVAR 38
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_engine = engine_combustion ;
1116: LD_ADDR_OWVAR 39
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// ruv1 = createvehicle ;
1124: LD_ADDR_LOC 13
1128: PUSH
1129: CALL_OW 45
1133: ST_TO_ADDR
// setdir ( ruv1 , 5 ) ;
1134: LD_LOC 13
1138: PPUSH
1139: LD_INT 5
1141: PPUSH
1142: CALL_OW 233
// placeunitxy ( ruv1 , 82 , 77 , false ) ;
1146: LD_LOC 13
1150: PPUSH
1151: LD_INT 82
1153: PPUSH
1154: LD_INT 77
1156: PPUSH
1157: LD_INT 0
1159: PPUSH
1160: CALL_OW 48
// placehumaninunit ( ruhmech2 , ruv1 ) ;
1164: LD_LOC 14
1168: PPUSH
1169: LD_LOC 13
1173: PPUSH
1174: CALL_OW 52
// case difficulty of 1 :
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1220
1191: POP
// begin vc_chassis = ru_medium_wheeled ;
1192: LD_ADDR_OWVAR 37
1196: PUSH
1197: LD_INT 21
1199: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1200: LD_ADDR_OWVAR 40
1204: PUSH
1205: LD_INT 42
1207: ST_TO_ADDR
// preparemechanic ( sex_female , 2 ) ;
1208: LD_INT 2
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 383
// end ; 2 :
1218: GO 1295
1220: LD_INT 2
1222: DOUBLE
1223: EQUAL
1224: IFTRUE 1228
1226: GO 1257
1228: POP
// begin vc_chassis = ru_medium_wheeled ;
1229: LD_ADDR_OWVAR 37
1233: PUSH
1234: LD_INT 21
1236: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1237: LD_ADDR_OWVAR 40
1241: PUSH
1242: LD_INT 43
1244: ST_TO_ADDR
// preparemechanic ( sex_female , 3 ) ;
1245: LD_INT 2
1247: PPUSH
1248: LD_INT 3
1250: PPUSH
1251: CALL_OW 383
// end ; 3 :
1255: GO 1295
1257: LD_INT 3
1259: DOUBLE
1260: EQUAL
1261: IFTRUE 1265
1263: GO 1294
1265: POP
// begin vc_chassis = ru_medium_wheeled ;
1266: LD_ADDR_OWVAR 37
1270: PUSH
1271: LD_INT 21
1273: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1274: LD_ADDR_OWVAR 40
1278: PUSH
1279: LD_INT 43
1281: ST_TO_ADDR
// preparemechanic ( sex_female , 4 ) ;
1282: LD_INT 2
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: CALL_OW 383
// end ; end ;
1292: GO 1295
1294: POP
// ruhmech3 = createhuman ;
1295: LD_ADDR_LOC 16
1299: PUSH
1300: CALL_OW 44
1304: ST_TO_ADDR
// vc_control = control_manual ;
1305: LD_ADDR_OWVAR 38
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// vc_engine = engine_combustion ;
1313: LD_ADDR_OWVAR 39
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// ruv2 = createvehicle ;
1321: LD_ADDR_LOC 15
1325: PUSH
1326: CALL_OW 45
1330: ST_TO_ADDR
// setdir ( ruv2 , 0 ) ;
1331: LD_LOC 15
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 233
// placeunitxy ( ruv2 , 66 , 68 , false ) ;
1343: LD_LOC 15
1347: PPUSH
1348: LD_INT 66
1350: PPUSH
1351: LD_INT 68
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 48
// placehumaninunit ( ruhmech3 , ruv2 ) ;
1361: LD_LOC 16
1365: PPUSH
1366: LD_LOC 15
1370: PPUSH
1371: CALL_OW 52
// case difficulty of 1 :
1375: LD_OWVAR 67
1379: PUSH
1380: LD_INT 1
1382: DOUBLE
1383: EQUAL
1384: IFTRUE 1388
1386: GO 1451
1388: POP
// begin setskill ( [ ruhsold1 , ruhsold2 , ruhsold4 ] , skill_combat , 3 ) ;
1389: LD_INT 11
1391: PUSH
1392: LD_INT 12
1394: PUSH
1395: LD_INT 14
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL_OW 237
// setskill ( [ ruhsold3 , ruhsold5 ] , skill_combat , 3 ) ;
1413: LD_INT 13
1415: PUSH
1416: LD_INT 15
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL_OW 237
// setskill ( [ ruhsold0 ] , skill_combat , 3 ) ;
1433: LD_INT 10
1435: PUSH
1436: EMPTY
1437: LIST
1438: PPUSH
1439: LD_INT 1
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL_OW 237
// end ; 2 :
1449: GO 1594
1451: LD_INT 2
1453: DOUBLE
1454: EQUAL
1455: IFTRUE 1459
1457: GO 1522
1459: POP
// begin setskill ( [ ruhsold1 , ruhsold2 , ruhsold4 ] , skill_combat , 5 ) ;
1460: LD_INT 11
1462: PUSH
1463: LD_INT 12
1465: PUSH
1466: LD_INT 14
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 237
// setskill ( [ ruhsold3 , ruhsold5 ] , skill_combat , 4 ) ;
1484: LD_INT 13
1486: PUSH
1487: LD_INT 15
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 4
1499: PPUSH
1500: CALL_OW 237
// setskill ( [ ruhsold0 ] , skill_combat , 5 ) ;
1504: LD_INT 10
1506: PUSH
1507: EMPTY
1508: LIST
1509: PPUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_INT 5
1515: PPUSH
1516: CALL_OW 237
// end ; 3 :
1520: GO 1594
1522: LD_INT 3
1524: DOUBLE
1525: EQUAL
1526: IFTRUE 1530
1528: GO 1593
1530: POP
// begin setskill ( [ ruhsold1 , ruhsold2 , ruhsold4 ] , skill_combat , 7 ) ;
1531: LD_INT 11
1533: PUSH
1534: LD_INT 12
1536: PUSH
1537: LD_INT 14
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PPUSH
1545: LD_INT 1
1547: PPUSH
1548: LD_INT 7
1550: PPUSH
1551: CALL_OW 237
// setskill ( [ ruhsold3 , ruhsold5 ] , skill_combat , 6 ) ;
1555: LD_INT 13
1557: PUSH
1558: LD_INT 15
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: LD_INT 6
1570: PPUSH
1571: CALL_OW 237
// setskill ( [ ruhsold0 ] , skill_combat , 7 ) ;
1575: LD_INT 10
1577: PUSH
1578: EMPTY
1579: LIST
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 7
1586: PPUSH
1587: CALL_OW 237
// end ; end ;
1591: GO 1594
1593: POP
// rusove = [ ruhsold0 , ruhsold1 , ruhsold2 , ruhsold3 , ruhsold4 , ruhsold5 , ruv0 , ruv1 , ruv2 ] ;
1594: LD_ADDR_LOC 17
1598: PUSH
1599: LD_INT 10
1601: PUSH
1602: LD_INT 11
1604: PUSH
1605: LD_INT 12
1607: PUSH
1608: LD_INT 13
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 15
1616: PUSH
1617: LD_LOC 11
1621: PUSH
1622: LD_LOC 13
1626: PUSH
1627: LD_LOC 15
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// comremember ( rusove ) ;
1643: LD_LOC 17
1647: PPUSH
1648: CALL_OW 143
// tmp = createvehicle ;
1652: LD_ADDR_VAR 0 2
1656: PUSH
1657: CALL_OW 45
1661: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
1662: LD_VAR 0 2
1666: PPUSH
1667: LD_INT 5
1669: PPUSH
1670: CALL_OW 233
// setlives ( tmp , 87 ) ;
1674: LD_VAR 0 2
1678: PPUSH
1679: LD_INT 87
1681: PPUSH
1682: CALL_OW 234
// placeunitxy ( tmp , 53 , 49 , false ) ;
1686: LD_VAR 0 2
1690: PPUSH
1691: LD_INT 53
1693: PPUSH
1694: LD_INT 49
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL_OW 48
// end ;
1704: LD_VAR 0 1
1708: RET
// function selektnuta_budova ; var tmp ; begin
1709: LD_INT 0
1711: PPUSH
1712: PPUSH
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_building ] ] ) ;
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_EXP 2
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 21
1732: PUSH
1733: LD_INT 3
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PPUSH
1744: CALL_OW 69
1748: ST_TO_ADDR
// if isselected ( tmp ) then
1749: LD_VAR 0 2
1753: PPUSH
1754: CALL_OW 306
1758: IFFALSE 1770
// result = true else
1760: LD_ADDR_VAR 0 1
1764: PUSH
1765: LD_INT 1
1767: ST_TO_ADDR
1768: GO 1778
// result = false ;
1770: LD_ADDR_VAR 0 1
1774: PUSH
1775: LD_INT 0
1777: ST_TO_ADDR
// end ;
1778: LD_VAR 0 1
1782: RET
// every 0 0$0.3 trigger selektnuta_budova do
1783: CALL 1709 0 0
1787: IFFALSE 1799
1789: GO 1791
1791: DISABLE
// hint ( BuildingLevel ) ;
1792: LD_STRING BuildingLevel
1794: PPUSH
1795: CALL_OW 339
1799: END
// function dialog1 ; begin
1800: LD_INT 0
1802: PPUSH
// ingameon ;
1803: CALL_OW 8
// centernowonxy ( 44 , 40 ) ;
1807: LD_INT 44
1809: PPUSH
1810: LD_INT 40
1812: PPUSH
1813: CALL_OW 86
// dwait ( 0 0$1 ) ;
1817: LD_INT 35
1819: PPUSH
1820: CALL_OW 68
// case gamma2commander of 1 :
1824: LD_EXP 46
1828: PUSH
1829: LD_INT 1
1831: DOUBLE
1832: EQUAL
1833: IFTRUE 1837
1835: GO 1852
1837: POP
// say ( lucy , D1-Don-1 ) ; 2 :
1838: LD_EXP 31
1842: PPUSH
1843: LD_STRING D1-Don-1
1845: PPUSH
1846: CALL_OW 88
1850: GO 1899
1852: LD_INT 2
1854: DOUBLE
1855: EQUAL
1856: IFTRUE 1860
1858: GO 1875
1860: POP
// say ( brown , D1-Brown-1 ) ; 3 :
1861: LD_EXP 32
1865: PPUSH
1866: LD_STRING D1-Brown-1
1868: PPUSH
1869: CALL_OW 88
1873: GO 1899
1875: LD_INT 3
1877: DOUBLE
1878: EQUAL
1879: IFTRUE 1883
1881: GO 1898
1883: POP
// say ( vanh , D1-VanH-1 ) ; end ;
1884: LD_EXP 33
1888: PPUSH
1889: LD_STRING D1-VanH-1
1891: PPUSH
1892: CALL_OW 88
1896: GO 1899
1898: POP
// sayradio ( rh , D1-Har-1 ) ;
1899: LD_EXP 15
1903: PPUSH
1904: LD_STRING D1-Har-1
1906: PPUSH
1907: CALL_OW 94
// case gamma2commander of 1 :
1911: LD_EXP 46
1915: PUSH
1916: LD_INT 1
1918: DOUBLE
1919: EQUAL
1920: IFTRUE 1924
1922: GO 1939
1924: POP
// say ( lucy , D1-Don-2 ) ; 2 :
1925: LD_EXP 31
1929: PPUSH
1930: LD_STRING D1-Don-2
1932: PPUSH
1933: CALL_OW 88
1937: GO 1986
1939: LD_INT 2
1941: DOUBLE
1942: EQUAL
1943: IFTRUE 1947
1945: GO 1962
1947: POP
// say ( brown , D1-Brown-2 ) ; 3 :
1948: LD_EXP 32
1952: PPUSH
1953: LD_STRING D1-Brown-2
1955: PPUSH
1956: CALL_OW 88
1960: GO 1986
1962: LD_INT 3
1964: DOUBLE
1965: EQUAL
1966: IFTRUE 1970
1968: GO 1985
1970: POP
// say ( vanh , D1-VanH-2 ) ; end ;
1971: LD_EXP 33
1975: PPUSH
1976: LD_STRING D1-VanH-2
1978: PPUSH
1979: CALL_OW 88
1983: GO 1986
1985: POP
// sayradio ( rh , D1-Har-2 ) ;
1986: LD_EXP 15
1990: PPUSH
1991: LD_STRING D1-Har-2
1993: PPUSH
1994: CALL_OW 94
// ingameoff ;
1998: CALL_OW 9
// SaveForQuickRestart ;
2002: CALL_OW 22
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
2013: LD_STRING M1
2015: PPUSH
2016: CALL_OW 337
// music_class = music_auto ;
2020: LD_ADDR_OWVAR 72
2024: PUSH
2025: LD_INT 0
2027: ST_TO_ADDR
// end ;
2028: LD_VAR 0 1
2032: RET
// var supply ; var first_time ; export retreat ; export poskoz , pacienti ; var pocet_lidi , chciplo ; var t2rest ; export hr_lidi , hr_auta ; export mpora ; export prebytek ; export healeri ; var aiv_met , dialcb_delayed , sikishere , cperiode ; export debug ; var maxsikjmmdist , revealed ; var bunk0_lev , bunk1_lev ; starting begin music_class = music_combat ;
2033: LD_ADDR_OWVAR 72
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// revealed = 0 ;
2041: LD_ADDR_LOC 30
2045: PUSH
2046: LD_INT 0
2048: ST_TO_ADDR
// rubfact0 = 0 ;
2049: LD_ADDR_LOC 5
2053: PUSH
2054: LD_INT 0
2056: ST_TO_ADDR
// healeri = [ ruhscie0 , ruhscie1 ] ;
2057: LD_ADDR_EXP 12
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_INT 23
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// disable ( 03 ) ;
2072: LD_INT 3
2074: DISABLE_MARKED
// disable ( 27 ) ;
2075: LD_INT 27
2077: DISABLE_MARKED
// countdist = 0 ;
2078: LD_ADDR_LOC 75
2082: PUSH
2083: LD_INT 0
2085: ST_TO_ADDR
// totalatt = 0 ;
2086: LD_ADDR_LOC 76
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// setbname ( amware0 , gamma ) ;
2094: LD_INT 25
2096: PPUSH
2097: LD_STRING gamma
2099: PPUSH
2100: CALL_OW 500
// bunk0_lev = [ 2 , 5 , 7 ] [ difficulty ] ;
2104: LD_ADDR_LOC 31
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 5
2114: PUSH
2115: LD_INT 7
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_OWVAR 67
2127: ARRAY
2128: ST_TO_ADDR
// bunk1_lev = [ 2 , 5 , 7 ] [ difficulty ] ;
2129: LD_ADDR_LOC 32
2133: PUSH
2134: LD_INT 2
2136: PUSH
2137: LD_INT 5
2139: PUSH
2140: LD_INT 7
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_OWVAR 67
2152: ARRAY
2153: ST_TO_ADDR
// debug = false ;
2154: LD_ADDR_EXP 13
2158: PUSH
2159: LD_INT 0
2161: ST_TO_ADDR
// if debug then
2162: LD_EXP 13
2166: IFFALSE 2175
// msg ( Bacha debug je ON! ) ;
2168: LD_STRING Bacha debug je ON!
2170: PPUSH
2171: CALL_OW 100
// case difficulty of 1 :
2175: LD_OWVAR 67
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2239
2188: POP
// begin hr_lidi = 450 ;
2189: LD_ADDR_EXP 8
2193: PUSH
2194: LD_INT 450
2196: ST_TO_ADDR
// hr_auta = 430 ;
2197: LD_ADDR_EXP 9
2201: PUSH
2202: LD_INT 430
2204: ST_TO_ADDR
// mpora = 2 ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 2
2212: ST_TO_ADDR
// t2rest = 2 2$0 ;
2213: LD_ADDR_LOC 24
2217: PUSH
2218: LD_INT 4200
2220: ST_TO_ADDR
// cperiode = 2 2$0 ;
2221: LD_ADDR_LOC 28
2225: PUSH
2226: LD_INT 4200
2228: ST_TO_ADDR
// supply = 23 ;
2229: LD_ADDR_LOC 20
2233: PUSH
2234: LD_INT 23
2236: ST_TO_ADDR
// end ; 2 :
2237: GO 2358
2239: LD_INT 2
2241: DOUBLE
2242: EQUAL
2243: IFTRUE 2247
2245: GO 2298
2247: POP
// begin hr_lidi = 490 ;
2248: LD_ADDR_EXP 8
2252: PUSH
2253: LD_INT 490
2255: ST_TO_ADDR
// hr_auta = 500 ;
2256: LD_ADDR_EXP 9
2260: PUSH
2261: LD_INT 500
2263: ST_TO_ADDR
// mpora = 3 ;
2264: LD_ADDR_EXP 10
2268: PUSH
2269: LD_INT 3
2271: ST_TO_ADDR
// t2rest = 1 1$10 ;
2272: LD_ADDR_LOC 24
2276: PUSH
2277: LD_INT 2450
2279: ST_TO_ADDR
// cperiode = 2 2$15 ;
2280: LD_ADDR_LOC 28
2284: PUSH
2285: LD_INT 4725
2287: ST_TO_ADDR
// supply = 19 ;
2288: LD_ADDR_LOC 20
2292: PUSH
2293: LD_INT 19
2295: ST_TO_ADDR
// end ; 3 :
2296: GO 2358
2298: LD_INT 3
2300: DOUBLE
2301: EQUAL
2302: IFTRUE 2306
2304: GO 2357
2306: POP
// begin hr_lidi = 550 ;
2307: LD_ADDR_EXP 8
2311: PUSH
2312: LD_INT 550
2314: ST_TO_ADDR
// hr_auta = 570 ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_INT 570
2322: ST_TO_ADDR
// mpora = 4 ;
2323: LD_ADDR_EXP 10
2327: PUSH
2328: LD_INT 4
2330: ST_TO_ADDR
// t2rest = 0 ;
2331: LD_ADDR_LOC 24
2335: PUSH
2336: LD_INT 0
2338: ST_TO_ADDR
// cperiode = 2 2$30 ;
2339: LD_ADDR_LOC 28
2343: PUSH
2344: LD_INT 5250
2346: ST_TO_ADDR
// supply = 17 ;
2347: LD_ADDR_LOC 20
2351: PUSH
2352: LD_INT 17
2354: ST_TO_ADDR
// end ; end ;
2355: GO 2358
2357: POP
// maxsikjmmdist = 13 ;
2358: LD_ADDR_LOC 29
2362: PUSH
2363: LD_INT 13
2365: ST_TO_ADDR
// jmm_zbabelec = false ;
2366: LD_ADDR_LOC 74
2370: PUSH
2371: LD_INT 0
2373: ST_TO_ADDR
// aiv_met = [ ] ;
2374: LD_ADDR_LOC 25
2378: PUSH
2379: EMPTY
2380: ST_TO_ADDR
// dialcb_delayed = false ;
2381: LD_ADDR_LOC 26
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// sikishere = false ;
2389: LD_ADDR_LOC 27
2393: PUSH
2394: LD_INT 0
2396: ST_TO_ADDR
// retreat = - 1 ;
2397: LD_ADDR_EXP 5
2401: PUSH
2402: LD_INT 1
2404: NEG
2405: ST_TO_ADDR
// poskoz = [ ] ;
2406: LD_ADDR_EXP 6
2410: PUSH
2411: EMPTY
2412: ST_TO_ADDR
// rusove0 = [ ] ;
2413: LD_ADDR_EXP 14
2417: PUSH
2418: EMPTY
2419: ST_TO_ADDR
// prebytek = [ ] ;
2420: LD_ADDR_EXP 11
2424: PUSH
2425: EMPTY
2426: ST_TO_ADDR
// pacienti = [ ] ;
2427: LD_ADDR_EXP 7
2431: PUSH
2432: EMPTY
2433: ST_TO_ADDR
// first_time = true ;
2434: LD_ADDR_LOC 21
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// gunext_ready = false ;
2442: LD_ADDR_LOC 35
2446: PUSH
2447: LD_INT 0
2449: ST_TO_ADDR
// randomize ;
2450: CALL_OW 10
// amer = 1 ;
2454: LD_ADDR_EXP 2
2458: PUSH
2459: LD_INT 1
2461: ST_TO_ADDR
// RevealFogArea ( amer , celamapa ) ;
2462: LD_EXP 2
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 332
// prepare_units ;
2474: CALL 0 0 0
// pocet_lidi = 7 ;
2478: LD_ADDR_LOC 22
2482: PUSH
2483: LD_INT 7
2485: ST_TO_ADDR
// chciplo = 0 ;
2486: LD_ADDR_LOC 23
2490: PUSH
2491: LD_INT 0
2493: ST_TO_ADDR
// dialog1 ;
2494: CALL 1800 0 0
// end ;
2498: END
// every 0 0$15 do
2499: GO 2501
2501: DISABLE
// begin cper = cperiode ;
2502: LD_ADDR_LOC 33
2506: PUSH
2507: LD_LOC 28
2511: ST_TO_ADDR
// createcratesarea ( rand ( 4 , 5 ) , dropzone , true ) ;
2512: LD_INT 4
2514: PPUSH
2515: LD_INT 5
2517: PPUSH
2518: CALL_OW 12
2522: PPUSH
2523: LD_INT 6
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ;
2533: END
// every 1 1$10 do
2534: GO 2536
2536: DISABLE
// createcratesarea ( rand ( 4 , 5 ) , dropzone , true ) ;
2537: LD_INT 4
2539: PPUSH
2540: LD_INT 5
2542: PPUSH
2543: CALL_OW 12
2547: PPUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 55
2558: END
// var cper ; every 0 0$15 + 1 1$45 do
2559: GO 2561
2561: DISABLE
// begin cper = cper - 0 0$15 ;
2562: LD_ADDR_LOC 33
2566: PUSH
2567: LD_LOC 33
2571: PUSH
2572: LD_INT 525
2574: MINUS
2575: ST_TO_ADDR
// if cper = 0 then
2576: LD_LOC 33
2580: PUSH
2581: LD_INT 0
2583: EQUAL
2584: IFFALSE 2649
// begin if createcratesarea ( rand ( 4 , 5 ) , dropzone , true ) then
2586: LD_INT 4
2588: PPUSH
2589: LD_INT 5
2591: PPUSH
2592: CALL_OW 12
2596: PPUSH
2597: LD_INT 6
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: CALL_OW 55
2607: IFFALSE 2646
// begin if ( supply > 1 ) then
2609: LD_LOC 20
2613: PUSH
2614: LD_INT 1
2616: GREATER
2617: IFFALSE 2634
// begin supply = supply - 1 ;
2619: LD_ADDR_LOC 20
2623: PUSH
2624: LD_LOC 20
2628: PUSH
2629: LD_INT 1
2631: MINUS
2632: ST_TO_ADDR
// enable ;
2633: ENABLE
// end ; cper = cperiode ;
2634: LD_ADDR_LOC 33
2638: PUSH
2639: LD_LOC 28
2643: ST_TO_ADDR
// end else
2644: GO 2647
// enable ;
2646: ENABLE
// end else
2647: GO 2650
// enable ;
2649: ENABLE
// end ;
2650: END
// every 0 0$7 do
2651: GO 2653
2653: DISABLE
// begin randomize ;
2654: CALL_OW 10
// enable ;
2658: ENABLE
// end ;
2659: END
// on humandestroyed ( manik , side , nation , x , y , direction , sex , class ) do if ( side = amer ) and ( class in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker ] ) then
2660: LD_VAR 0 2
2664: PUSH
2665: LD_EXP 2
2669: EQUAL
2670: PUSH
2671: LD_VAR 0 8
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: LD_INT 2
2681: PUSH
2682: LD_INT 3
2684: PUSH
2685: LD_INT 4
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: LD_INT 9
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: IN
2702: AND
2703: IFFALSE 2719
// chciplo = chciplo + 1 ;
2705: LD_ADDR_LOC 23
2709: PUSH
2710: LD_LOC 23
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ST_TO_ADDR
2719: PPOPN 8
2721: END
// every 0 0$1 + 0 0$1 trigger isok ( ruboilp0 ) and not isconstructed ( ruboilp0 ) do
2722: LD_LOC 2
2726: PPUSH
2727: CALL_OW 302
2731: PUSH
2732: LD_LOC 2
2736: PPUSH
2737: CALL_OW 304
2741: NOT
2742: AND
2743: IFFALSE 2773
2745: GO 2747
2747: DISABLE
// begin rubwrks0 = combuild ( ruhengi0 , b_workshop , 76 , 93 , 1 ) ;
2748: LD_ADDR_LOC 4
2752: PUSH
2753: LD_INT 5
2755: PPUSH
2756: LD_INT 2
2758: PPUSH
2759: LD_INT 76
2761: PPUSH
2762: LD_INT 93
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 145
2772: ST_TO_ADDR
// end ;
2773: END
// every 0 0$1 + 0 0$1 trigger isok ( ruboilm0 ) and not isconstructed ( ruboilm0 ) do
2774: LD_LOC 1
2778: PPUSH
2779: CALL_OW 302
2783: PUSH
2784: LD_LOC 1
2788: PPUSH
2789: CALL_OW 304
2793: NOT
2794: AND
2795: IFFALSE 2825
2797: GO 2799
2799: DISABLE
// begin rubbrid0 = combuild ( ruhengi1 , b_lab , 73 , 79 , 2 ) ;
2800: LD_ADDR_LOC 6
2804: PUSH
2805: LD_INT 6
2807: PPUSH
2808: LD_INT 6
2810: PPUSH
2811: LD_INT 73
2813: PPUSH
2814: LD_INT 79
2816: PPUSH
2817: LD_INT 2
2819: PPUSH
2820: CALL_OW 145
2824: ST_TO_ADDR
// end ;
2825: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbunk0 ) and not isconstructed ( rubbunk0 ) do
2826: LD_LOC 7
2830: PPUSH
2831: CALL_OW 302
2835: PUSH
2836: LD_LOC 7
2840: PPUSH
2841: CALL_OW 304
2845: NOT
2846: AND
2847: IFFALSE 2877
2849: GO 2851
2851: DISABLE
// begin rubarmr0 = combuild ( ruhengi2 , b_armoury , 99 , 88 , 3 ) ;
2852: LD_ADDR_LOC 9
2856: PUSH
2857: LD_INT 8
2859: PPUSH
2860: LD_INT 4
2862: PPUSH
2863: LD_INT 99
2865: PPUSH
2866: LD_INT 88
2868: PPUSH
2869: LD_INT 3
2871: PPUSH
2872: CALL_OW 145
2876: ST_TO_ADDR
// end ;
2877: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbrid0 ) and not isconstructed ( rubbrid0 ) do
2878: LD_LOC 6
2882: PPUSH
2883: CALL_OW 302
2887: PUSH
2888: LD_LOC 6
2892: PPUSH
2893: CALL_OW 304
2897: NOT
2898: AND
2899: IFFALSE 2950
2901: GO 2903
2903: DISABLE
// begin comupgrade ( rubdepo0 ) ;
2904: LD_LOC 10
2908: PPUSH
2909: CALL_OW 146
// comupgradelab ( rubbrid0 , b_lab_weapon ) ;
2913: LD_LOC 6
2917: PPUSH
2918: LD_INT 10
2920: PPUSH
2921: CALL_OW 147
// rubbunk1 = combuild ( ruhengi1 , b_bunker , 72 , 84 , 2 ) ;
2925: LD_ADDR_LOC 8
2929: PUSH
2930: LD_INT 6
2932: PPUSH
2933: LD_INT 32
2935: PPUSH
2936: LD_INT 72
2938: PPUSH
2939: LD_INT 84
2941: PPUSH
2942: LD_INT 2
2944: PPUSH
2945: CALL_OW 145
2949: ST_TO_ADDR
// end ;
2950: END
// every 0 0$1 + 0 0$1 trigger isok ( rubarmr0 ) and not isconstructed ( rubarmr0 ) do
2951: LD_LOC 9
2955: PPUSH
2956: CALL_OW 302
2960: PUSH
2961: LD_LOC 9
2965: PPUSH
2966: CALL_OW 304
2970: NOT
2971: AND
2972: IFFALSE 3011
2974: GO 2976
2976: DISABLE
// begin comupgrade ( rubarmr0 ) ;
2977: LD_LOC 9
2981: PPUSH
2982: CALL_OW 146
// ruboilp1 = combuild ( ruhengi2 , b_oil_power , 95 , 97 , 0 ) ;
2986: LD_ADDR_LOC 3
2990: PUSH
2991: LD_INT 8
2993: PPUSH
2994: LD_INT 26
2996: PPUSH
2997: LD_INT 95
2999: PPUSH
3000: LD_INT 97
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 145
3010: ST_TO_ADDR
// end ;
3011: END
// every 0 0$1 + 0 0$1 trigger isok ( rubwrks0 ) and not isconstructed ( rubwrks0 ) do
3012: LD_LOC 4
3016: PPUSH
3017: CALL_OW 302
3021: PUSH
3022: LD_LOC 4
3026: PPUSH
3027: CALL_OW 304
3031: NOT
3032: AND
3033: IFFALSE 3083
3035: GO 3037
3037: DISABLE
// begin wait ( 0 0$2 ) ;
3038: LD_INT 70
3040: PPUSH
3041: CALL_OW 67
// commoveunit ( ruhmech0 , rubwrks0 ) ;
3045: LD_INT 9
3047: PPUSH
3048: LD_LOC 4
3052: PPUSH
3053: CALL_OW 112
// wait ( 0 0$3 ) ;
3057: LD_INT 105
3059: PPUSH
3060: CALL_OW 67
// comupgrade ( rubwrks0 ) ;
3064: LD_LOC 4
3068: PPUSH
3069: CALL_OW 146
// rubfact0 = rubwrks0 ;
3073: LD_ADDR_LOC 5
3077: PUSH
3078: LD_LOC 4
3082: ST_TO_ADDR
// end ;
3083: END
// on upgradecomplete ( un ) do if un = rubfact0 then
3084: LD_VAR 0 1
3088: PUSH
3089: LD_LOC 5
3093: EQUAL
3094: IFFALSE 3108
// commoveunit ( ruhmech0 , un ) ;
3096: LD_INT 9
3098: PPUSH
3099: LD_VAR 0 1
3103: PPUSH
3104: CALL_OW 112
3108: PPOPN 1
3110: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbunk1 ) and not isconstructed ( rubbunk1 ) and isok ( rubfact0 ) and not isconstructed ( rubfact0 ) and isinunit ( ruhmech0 ) = rubfact0 and gunext_ready do
3111: LD_LOC 8
3115: PPUSH
3116: CALL_OW 302
3120: PUSH
3121: LD_LOC 8
3125: PPUSH
3126: CALL_OW 304
3130: NOT
3131: AND
3132: PUSH
3133: LD_LOC 5
3137: PPUSH
3138: CALL_OW 302
3142: AND
3143: PUSH
3144: LD_LOC 5
3148: PPUSH
3149: CALL_OW 304
3153: NOT
3154: AND
3155: PUSH
3156: LD_INT 9
3158: PPUSH
3159: CALL_OW 310
3163: PUSH
3164: LD_LOC 5
3168: EQUAL
3169: AND
3170: PUSH
3171: LD_LOC 35
3175: AND
3176: IFFALSE 3299
3178: GO 3180
3180: DISABLE
// begin setblevel ( rubbunk1 , bunk1_lev ) ;
3181: LD_LOC 8
3185: PPUSH
3186: LD_LOC 32
3190: PPUSH
3191: CALL_OW 241
// case difficulty of 1 :
3195: LD_OWVAR 67
3199: PUSH
3200: LD_INT 1
3202: DOUBLE
3203: EQUAL
3204: IFTRUE 3208
3206: GO 3223
3208: POP
// complaceweapon ( rubbunk1 , ru_heavy_machine_gun ) ; 2 :
3209: LD_LOC 8
3213: PPUSH
3214: LD_INT 42
3216: PPUSH
3217: CALL_OW 148
3221: GO 3270
3223: LD_INT 2
3225: DOUBLE
3226: EQUAL
3227: IFTRUE 3231
3229: GO 3246
3231: POP
// complaceweapon ( rubbunk1 , ru_gatling_gun ) ; 3 :
3232: LD_LOC 8
3236: PPUSH
3237: LD_INT 43
3239: PPUSH
3240: CALL_OW 148
3244: GO 3270
3246: LD_INT 3
3248: DOUBLE
3249: EQUAL
3250: IFTRUE 3254
3252: GO 3269
3254: POP
// complaceweapon ( rubbunk1 , ru_gatling_gun ) ; end ;
3255: LD_LOC 8
3259: PPUSH
3260: LD_INT 43
3262: PPUSH
3263: CALL_OW 148
3267: GO 3270
3269: POP
// rusove = rusove diff [ ruhsold1 ] ;
3270: LD_ADDR_LOC 17
3274: PUSH
3275: LD_LOC 17
3279: PUSH
3280: LD_INT 11
3282: PUSH
3283: EMPTY
3284: LIST
3285: DIFF
3286: ST_TO_ADDR
// commoveunit ( ruhsold1 , rubbunk1 ) ;
3287: LD_INT 11
3289: PPUSH
3290: LD_LOC 8
3294: PPUSH
3295: CALL_OW 112
// end ;
3299: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbunk0 ) and not isconstructed ( rubbunk0 ) and isok ( rubfact0 ) and not isconstructed ( rubfact0 ) and isinunit ( ruhmech0 ) = rubfact0 and gunext_ready do
3300: LD_LOC 7
3304: PPUSH
3305: CALL_OW 302
3309: PUSH
3310: LD_LOC 7
3314: PPUSH
3315: CALL_OW 304
3319: NOT
3320: AND
3321: PUSH
3322: LD_LOC 5
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: PUSH
3333: LD_LOC 5
3337: PPUSH
3338: CALL_OW 304
3342: NOT
3343: AND
3344: PUSH
3345: LD_INT 9
3347: PPUSH
3348: CALL_OW 310
3352: PUSH
3353: LD_LOC 5
3357: EQUAL
3358: AND
3359: PUSH
3360: LD_LOC 35
3364: AND
3365: IFFALSE 3488
3367: GO 3369
3369: DISABLE
// begin setblevel ( rubbunk0 , bunk0_lev ) ;
3370: LD_LOC 7
3374: PPUSH
3375: LD_LOC 31
3379: PPUSH
3380: CALL_OW 241
// case difficulty of 1 :
3384: LD_OWVAR 67
3388: PUSH
3389: LD_INT 1
3391: DOUBLE
3392: EQUAL
3393: IFTRUE 3397
3395: GO 3412
3397: POP
// complaceweapon ( rubbunk0 , ru_gun ) ; 2 :
3398: LD_LOC 7
3402: PPUSH
3403: LD_INT 44
3405: PPUSH
3406: CALL_OW 148
3410: GO 3459
3412: LD_INT 2
3414: DOUBLE
3415: EQUAL
3416: IFTRUE 3420
3418: GO 3435
3420: POP
// complaceweapon ( rubbunk0 , ru_gun ) ; 3 :
3421: LD_LOC 7
3425: PPUSH
3426: LD_INT 44
3428: PPUSH
3429: CALL_OW 148
3433: GO 3459
3435: LD_INT 3
3437: DOUBLE
3438: EQUAL
3439: IFTRUE 3443
3441: GO 3458
3443: POP
// complaceweapon ( rubbunk0 , ru_heavy_gun ) ; end ;
3444: LD_LOC 7
3448: PPUSH
3449: LD_INT 46
3451: PPUSH
3452: CALL_OW 148
3456: GO 3459
3458: POP
// rusove = rusove diff [ ruhsold0 ] ;
3459: LD_ADDR_LOC 17
3463: PUSH
3464: LD_LOC 17
3468: PUSH
3469: LD_INT 10
3471: PUSH
3472: EMPTY
3473: LIST
3474: DIFF
3475: ST_TO_ADDR
// commoveunit ( ruhsold0 , rubbunk0 ) ;
3476: LD_INT 10
3478: PPUSH
3479: LD_LOC 7
3483: PPUSH
3484: CALL_OW 112
// end ;
3488: END
// var b_ext_tr ; every 0 0$1 + 2 2$0 trigger isok ( rubfact0 ) and not isconstructed ( rubfact0 ) do
3489: LD_LOC 5
3493: PPUSH
3494: CALL_OW 302
3498: PUSH
3499: LD_LOC 5
3503: PPUSH
3504: CALL_OW 304
3508: NOT
3509: AND
3510: IFFALSE 3553
3512: GO 3514
3514: DISABLE
// begin combuild ( ruhengi0 , b_ext_gun , 73 , 90 , 2 ) ;
3515: LD_INT 5
3517: PPUSH
3518: LD_INT 17
3520: PPUSH
3521: LD_INT 73
3523: PPUSH
3524: LD_INT 90
3526: PPUSH
3527: LD_INT 2
3529: PPUSH
3530: CALL_OW 145
// combuild ( ruhengi1 , b_ext_track , 76 , 95 , 0 ) ;
3534: LD_INT 6
3536: PPUSH
3537: LD_INT 16
3539: PPUSH
3540: LD_INT 76
3542: PPUSH
3543: LD_INT 95
3545: PPUSH
3546: LD_INT 0
3548: PPUSH
3549: CALL_OW 145
// end ;
3553: END
// var gunext_ready ; on buildingcomplete ( rub ) do if getside ( rub ) = rus then
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL_OW 255
3563: PUSH
3564: LD_EXP 1
3568: EQUAL
3569: IFFALSE 3677
// if unitfilter ( rub , [ [ f_btype , b_ext_track ] ] ) then
3571: LD_VAR 0 1
3575: PPUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 16
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: PPUSH
3589: CALL_OW 72
3593: IFFALSE 3616
// combuild ( ruhengi1 , b_turret , 103 , 89 , 3 ) else
3595: LD_INT 6
3597: PPUSH
3598: LD_INT 33
3600: PPUSH
3601: LD_INT 103
3603: PPUSH
3604: LD_INT 89
3606: PPUSH
3607: LD_INT 3
3609: PPUSH
3610: CALL_OW 145
3614: GO 3677
// if unitfilter ( rub , [ [ f_btype , b_turret ] ] ) then
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_INT 30
3623: PUSH
3624: LD_INT 33
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PUSH
3631: EMPTY
3632: LIST
3633: PPUSH
3634: CALL_OW 72
3638: IFFALSE 3654
// complaceweapon ( rub , ru_gatling_gun ) else
3640: LD_VAR 0 1
3644: PPUSH
3645: LD_INT 43
3647: PPUSH
3648: CALL_OW 148
3652: GO 3677
// if getbtype ( rub ) = b_ext_gun then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 266
3663: PUSH
3664: LD_INT 17
3666: EQUAL
3667: IFFALSE 3677
// gunext_ready = true ;
3669: LD_ADDR_LOC 35
3673: PUSH
3674: LD_INT 1
3676: ST_TO_ADDR
3677: PPOPN 1
3679: END
// every 2 2$30 do
3680: GO 3682
3682: DISABLE
// begin com_queue = true ;
3683: LD_ADDR_OWVAR 49
3687: PUSH
3688: LD_INT 1
3690: ST_TO_ADDR
// commoveunit ( ruhengi0 , rubdepo0 ) ;
3691: LD_INT 5
3693: PPUSH
3694: LD_LOC 10
3698: PPUSH
3699: CALL_OW 112
// commoveunit ( ruhengi0 , rubdepo0 ) ;
3703: LD_INT 5
3705: PPUSH
3706: LD_LOC 10
3710: PPUSH
3711: CALL_OW 112
// com_queue = false ;
3715: LD_ADDR_OWVAR 49
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// end ;
3723: END
// var rusove_mimo ; var pom_rumi ; function rusove_mimo_bazi ; begin
3724: LD_INT 0
3726: PPUSH
// pom_rumi = rusove diff filterunitsinarea ( rubase , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
3727: LD_ADDR_LOC 37
3731: PUSH
3732: LD_LOC 17
3736: PUSH
3737: LD_INT 1
3739: PPUSH
3740: LD_INT 21
3742: PUSH
3743: LD_INT 1
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 50
3752: PUSH
3753: EMPTY
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 70
3764: DIFF
3765: ST_TO_ADDR
// rusove_mimo = pom_rumi diff filterunitsinarea ( rubase , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
3766: LD_ADDR_LOC 36
3770: PUSH
3771: LD_LOC 37
3775: PUSH
3776: LD_INT 1
3778: PPUSH
3779: LD_INT 21
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 50
3791: PUSH
3792: EMPTY
3793: LIST
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PPUSH
3799: CALL_OW 70
3803: DIFF
3804: ST_TO_ADDR
// result = rusove_mimo ;
3805: LD_ADDR_VAR 0 1
3809: PUSH
3810: LD_LOC 36
3814: ST_TO_ADDR
// end ;
3815: LD_VAR 0 1
3819: RET
// every 0 0$1 trigger rusove_mimo_bazi do
3820: CALL 3724 0 0
3824: IFFALSE 3851
3826: GO 3828
3828: DISABLE
// begin if retreat >= 0 then
3829: LD_EXP 5
3833: PUSH
3834: LD_INT 0
3836: GREATEREQUAL
3837: IFFALSE 3841
// exit ;
3839: GO 3851
// comreturn ( rusove_mimo ) ;
3841: LD_LOC 36
3845: PPUSH
3846: CALL_OW 144
// enable ;
3850: ENABLE
// end ;
3851: END
// function manage_prebytek ( zaklad ) ; var bz , bzz ; begin
3852: LD_INT 0
3854: PPUSH
3855: PPUSH
3856: PPUSH
// bzz = [ ] ;
3857: LD_ADDR_VAR 0 4
3861: PUSH
3862: EMPTY
3863: ST_TO_ADDR
// for bz in rusove0 do
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_EXP 14
3873: PUSH
3874: FOR_IN
3875: IFFALSE 3932
// if gettype ( bz ) = unit_vehicle then
3877: LD_VAR 0 3
3881: PPUSH
3882: CALL_OW 247
3886: PUSH
3887: LD_INT 2
3889: EQUAL
3890: IFFALSE 3930
// begin rusove0 = rusove0 diff [ bz ] ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PUSH
3902: LD_VAR 0 3
3906: PUSH
3907: EMPTY
3908: LIST
3909: DIFF
3910: ST_TO_ADDR
// bzz = bzz ^ [ bz ] ;
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: LD_VAR 0 4
3920: PUSH
3921: LD_VAR 0 3
3925: PUSH
3926: EMPTY
3927: LIST
3928: ADD
3929: ST_TO_ADDR
// end ;
3930: GO 3874
3932: POP
3933: POP
// for bz = 1 to ( 0 + bzz ) do
3934: LD_ADDR_VAR 0 3
3938: PUSH
3939: DOUBLE
3940: LD_INT 1
3942: DEC
3943: ST_TO_ADDR
3944: LD_INT 0
3946: PUSH
3947: LD_VAR 0 4
3951: PLUS
3952: PUSH
3953: FOR_TO
3954: IFFALSE 4028
// if bz <= ( mpora - zaklad ) then
3956: LD_VAR 0 3
3960: PUSH
3961: LD_EXP 10
3965: PUSH
3966: LD_VAR 0 1
3970: MINUS
3971: LESSEQUAL
3972: IFFALSE 4001
// rusove0 = rusove0 ^ [ bzz [ bz ] ] else
3974: LD_ADDR_EXP 14
3978: PUSH
3979: LD_EXP 14
3983: PUSH
3984: LD_VAR 0 4
3988: PUSH
3989: LD_VAR 0 3
3993: ARRAY
3994: PUSH
3995: EMPTY
3996: LIST
3997: ADD
3998: ST_TO_ADDR
3999: GO 4026
// prebytek = prebytek ^ [ bzz [ bz ] ] ;
4001: LD_ADDR_EXP 11
4005: PUSH
4006: LD_EXP 11
4010: PUSH
4011: LD_VAR 0 4
4015: PUSH
4016: LD_VAR 0 3
4020: ARRAY
4021: PUSH
4022: EMPTY
4023: LIST
4024: ADD
4025: ST_TO_ADDR
4026: GO 3953
4028: POP
4029: POP
// end ;
4030: LD_VAR 0 2
4034: RET
// export rusove0 ; every 0 0$2 + 1 1$18 do
4035: GO 4037
4037: DISABLE
// begin if t2rest > 0 then
4038: LD_LOC 24
4042: PUSH
4043: LD_INT 0
4045: GREATER
4046: IFFALSE 4065
// begin t2rest = t2rest - 0 0$2 ;
4048: LD_ADDR_LOC 24
4052: PUSH
4053: LD_LOC 24
4057: PUSH
4058: LD_INT 70
4060: MINUS
4061: ST_TO_ADDR
// enable ;
4062: ENABLE
// end else
4063: GO 4137
// begin if debug then
4065: LD_EXP 13
4069: IFFALSE 4078
// msg ( utok 1 v 1:30 ) ;
4071: LD_STRING utok 1 v 1:30
4073: PPUSH
4074: CALL_OW 100
// manage_prebytek ( 1 ) ;
4078: LD_INT 1
4080: PPUSH
4081: CALL 3852 0 1
// rusove0 = [ ruhsold2 , ruhsold3 , ruv2 ] ;
4085: LD_ADDR_EXP 14
4089: PUSH
4090: LD_INT 12
4092: PUSH
4093: LD_INT 13
4095: PUSH
4096: LD_LOC 15
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: ST_TO_ADDR
// rusove = rusove diff rusove0 ;
4106: LD_ADDR_LOC 17
4110: PUSH
4111: LD_LOC 17
4115: PUSH
4116: LD_EXP 14
4120: DIFF
4121: ST_TO_ADDR
// comagressivemove ( rusove0 , 53 , 46 ) ;
4122: LD_EXP 14
4126: PPUSH
4127: LD_INT 53
4129: PPUSH
4130: LD_INT 46
4132: PPUSH
4133: CALL_OW 114
// end ; end ;
4137: END
// every 0 0$1 + 2 2$0 trigger ( t2rest <= 0 ) and ( not isok ( ambbunk0 ) ) and ( not isok ( ambbunk1 ) ) do
4138: LD_LOC 24
4142: PUSH
4143: LD_INT 0
4145: LESSEQUAL
4146: PUSH
4147: LD_INT 18
4149: PPUSH
4150: CALL_OW 302
4154: NOT
4155: AND
4156: PUSH
4157: LD_INT 24
4159: PPUSH
4160: CALL_OW 302
4164: NOT
4165: AND
4166: IFFALSE 4186
4168: GO 4170
4170: DISABLE
// begin comagressivemove ( rusove0 , 63 , 43 ) ;
4171: LD_EXP 14
4175: PPUSH
4176: LD_INT 63
4178: PPUSH
4179: LD_INT 43
4181: PPUSH
4182: CALL_OW 114
// end ;
4186: END
// every 0 0$1 + 2 2$30 trigger ( t2rest <= 0 ) and ( not isok ( ambbunk0 ) ) and ( not isok ( ambbunk1 ) ) and ( not isok ( ambbrwr0 ) ) do
4187: LD_LOC 24
4191: PUSH
4192: LD_INT 0
4194: LESSEQUAL
4195: PUSH
4196: LD_INT 18
4198: PPUSH
4199: CALL_OW 302
4203: NOT
4204: AND
4205: PUSH
4206: LD_INT 24
4208: PPUSH
4209: CALL_OW 302
4213: NOT
4214: AND
4215: PUSH
4216: LD_INT 21
4218: PPUSH
4219: CALL_OW 302
4223: NOT
4224: AND
4225: IFFALSE 4245
4227: GO 4229
4229: DISABLE
// begin comagressivemove ( rusove0 , 49 , 33 ) ;
4230: LD_EXP 14
4234: PPUSH
4235: LD_INT 49
4237: PPUSH
4238: LD_INT 33
4240: PPUSH
4241: CALL_OW 114
// end ;
4245: END
// every 6 6$0 do
4246: GO 4248
4248: DISABLE
// begin case difficulty of 1 :
4249: LD_OWVAR 67
4253: PUSH
4254: LD_INT 1
4256: DOUBLE
4257: EQUAL
4258: IFTRUE 4262
4260: GO 4273
4262: POP
// t2rest = 2 2$0 ; 2 :
4263: LD_ADDR_LOC 24
4267: PUSH
4268: LD_INT 4200
4270: ST_TO_ADDR
4271: GO 4312
4273: LD_INT 2
4275: DOUBLE
4276: EQUAL
4277: IFTRUE 4281
4279: GO 4292
4281: POP
// t2rest = 1 1$0 ; 3 :
4282: LD_ADDR_LOC 24
4286: PUSH
4287: LD_INT 2100
4289: ST_TO_ADDR
4290: GO 4312
4292: LD_INT 3
4294: DOUBLE
4295: EQUAL
4296: IFTRUE 4300
4298: GO 4311
4300: POP
// t2rest = 0 ; end ;
4301: LD_ADDR_LOC 24
4305: PUSH
4306: LD_INT 0
4308: ST_TO_ADDR
4309: GO 4312
4311: POP
// end ;
4312: END
// var ruhsold6 , ruhsold7 ; var ruv3 , ruhmech4 , ruv4 , ruhmech5 ; every 0 0$2 + 6 6$28 do
4313: GO 4315
4315: DISABLE
// begin if t2rest > 0 then
4316: LD_LOC 24
4320: PUSH
4321: LD_INT 0
4323: GREATER
4324: IFFALSE 4343
// begin t2rest = t2rest - 0 0$2 ;
4326: LD_ADDR_LOC 24
4330: PUSH
4331: LD_LOC 24
4335: PUSH
4336: LD_INT 70
4338: MINUS
4339: ST_TO_ADDR
// enable ;
4340: ENABLE
// end else
4341: GO 4962
// begin if retreat >= 0 then
4343: LD_EXP 5
4347: PUSH
4348: LD_INT 0
4350: GREATEREQUAL
4351: IFFALSE 4355
// exit ;
4353: GO 4962
// if debug then
4355: LD_EXP 13
4359: IFFALSE 4368
// msg ( utok 2 v 6:30 ) ;
4361: LD_STRING utok 2 v 6:30
4363: PPUSH
4364: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
4368: LD_ADDR_EXP 14
4372: PUSH
4373: LD_EXP 14
4377: PPUSH
4378: LD_INT 50
4380: PUSH
4381: EMPTY
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: PPUSH
4387: CALL_OW 72
4391: ST_TO_ADDR
// uc_nation = nation_russian ;
4392: LD_ADDR_OWVAR 21
4396: PUSH
4397: LD_INT 3
4399: ST_TO_ADDR
// uc_side = rus ;
4400: LD_ADDR_OWVAR 20
4404: PUSH
4405: LD_EXP 1
4409: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
4410: LD_INT 1
4412: PPUSH
4413: LD_INT 5
4415: PPUSH
4416: CALL_OW 381
// hc_sex = sex_male ;
4420: LD_ADDR_OWVAR 27
4424: PUSH
4425: LD_INT 1
4427: ST_TO_ADDR
// ruhsold6 = createhuman ;
4428: LD_ADDR_LOC 38
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
4438: LD_INT 1
4440: PPUSH
4441: LD_INT 5
4443: PPUSH
4444: CALL_OW 381
// ruhsold7 = createhuman ;
4448: LD_ADDR_LOC 39
4452: PUSH
4453: CALL_OW 44
4457: ST_TO_ADDR
// case difficulty of 1 :
4458: LD_OWVAR 67
4462: PUSH
4463: LD_INT 1
4465: DOUBLE
4466: EQUAL
4467: IFTRUE 4471
4469: GO 4484
4471: POP
// preparemechanic ( sex_female , 3 ) ; 2 :
4472: LD_INT 2
4474: PPUSH
4475: LD_INT 3
4477: PPUSH
4478: CALL_OW 383
4482: GO 4527
4484: LD_INT 2
4486: DOUBLE
4487: EQUAL
4488: IFTRUE 4492
4490: GO 4505
4492: POP
// preparemechanic ( sex_female , 3 ) ; 3 :
4493: LD_INT 2
4495: PPUSH
4496: LD_INT 3
4498: PPUSH
4499: CALL_OW 383
4503: GO 4527
4505: LD_INT 3
4507: DOUBLE
4508: EQUAL
4509: IFTRUE 4513
4511: GO 4526
4513: POP
// preparemechanic ( sex_female , 4 ) ; end ;
4514: LD_INT 2
4516: PPUSH
4517: LD_INT 4
4519: PPUSH
4520: CALL_OW 383
4524: GO 4527
4526: POP
// ruhmech5 = createhuman ;
4527: LD_ADDR_LOC 43
4531: PUSH
4532: CALL_OW 44
4536: ST_TO_ADDR
// case difficulty of 1 :
4537: LD_OWVAR 67
4541: PUSH
4542: LD_INT 1
4544: DOUBLE
4545: EQUAL
4546: IFTRUE 4550
4548: GO 4569
4550: POP
// begin vc_chassis = ru_medium_wheeled ;
4551: LD_ADDR_OWVAR 37
4555: PUSH
4556: LD_INT 21
4558: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
4559: LD_ADDR_OWVAR 40
4563: PUSH
4564: LD_INT 42
4566: ST_TO_ADDR
// end ; 2 :
4567: GO 4624
4569: LD_INT 2
4571: DOUBLE
4572: EQUAL
4573: IFTRUE 4577
4575: GO 4596
4577: POP
// begin vc_chassis = ru_medium_wheeled ;
4578: LD_ADDR_OWVAR 37
4582: PUSH
4583: LD_INT 21
4585: ST_TO_ADDR
// vc_weapon = ru_gun ;
4586: LD_ADDR_OWVAR 40
4590: PUSH
4591: LD_INT 44
4593: ST_TO_ADDR
// end ; 3 :
4594: GO 4624
4596: LD_INT 3
4598: DOUBLE
4599: EQUAL
4600: IFTRUE 4604
4602: GO 4623
4604: POP
// begin vc_chassis = ru_heavy_wheeled ;
4605: LD_ADDR_OWVAR 37
4609: PUSH
4610: LD_INT 23
4612: ST_TO_ADDR
// vc_weapon = ru_gun ;
4613: LD_ADDR_OWVAR 40
4617: PUSH
4618: LD_INT 44
4620: ST_TO_ADDR
// end ; end ;
4621: GO 4624
4623: POP
// vc_control = control_computer ;
4624: LD_ADDR_OWVAR 38
4628: PUSH
4629: LD_INT 3
4631: ST_TO_ADDR
// vc_engine = engine_combustion ;
4632: LD_ADDR_OWVAR 39
4636: PUSH
4637: LD_INT 1
4639: ST_TO_ADDR
// ruv3 = createvehicle ;
4640: LD_ADDR_LOC 40
4644: PUSH
4645: CALL_OW 45
4649: ST_TO_ADDR
// setdir ( ruv3 , 5 ) ;
4650: LD_LOC 40
4654: PPUSH
4655: LD_INT 5
4657: PPUSH
4658: CALL_OW 233
// placeunitxy ( ruv3 , 119 , 91 , false ) ;
4662: LD_LOC 40
4666: PPUSH
4667: LD_INT 119
4669: PPUSH
4670: LD_INT 91
4672: PPUSH
4673: LD_INT 0
4675: PPUSH
4676: CALL_OW 48
// case difficulty of 1 :
4680: LD_OWVAR 67
4684: PUSH
4685: LD_INT 1
4687: DOUBLE
4688: EQUAL
4689: IFTRUE 4693
4691: GO 4712
4693: POP
// begin vc_chassis = ru_medium_wheeled ;
4694: LD_ADDR_OWVAR 37
4698: PUSH
4699: LD_INT 21
4701: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
4702: LD_ADDR_OWVAR 40
4706: PUSH
4707: LD_INT 42
4709: ST_TO_ADDR
// end ; 2 :
4710: GO 4767
4712: LD_INT 2
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4739
4720: POP
// begin vc_chassis = ru_medium_wheeled ;
4721: LD_ADDR_OWVAR 37
4725: PUSH
4726: LD_INT 21
4728: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
4729: LD_ADDR_OWVAR 40
4733: PUSH
4734: LD_INT 43
4736: ST_TO_ADDR
// end ; 3 :
4737: GO 4767
4739: LD_INT 3
4741: DOUBLE
4742: EQUAL
4743: IFTRUE 4747
4745: GO 4766
4747: POP
// begin vc_chassis = ru_medium_wheeled ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 21
4755: ST_TO_ADDR
// vc_weapon = ru_gun ;
4756: LD_ADDR_OWVAR 40
4760: PUSH
4761: LD_INT 44
4763: ST_TO_ADDR
// end ; end ;
4764: GO 4767
4766: POP
// vc_control = control_manual ;
4767: LD_ADDR_OWVAR 38
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// vc_engine = engine_combustion ;
4775: LD_ADDR_OWVAR 39
4779: PUSH
4780: LD_INT 1
4782: ST_TO_ADDR
// ruv4 = createvehicle ;
4783: LD_ADDR_LOC 42
4787: PUSH
4788: CALL_OW 45
4792: ST_TO_ADDR
// setdir ( ruv4 , 5 ) ;
4793: LD_LOC 42
4797: PPUSH
4798: LD_INT 5
4800: PPUSH
4801: CALL_OW 233
// placeunitxy ( ruv4 , 123 , 94 , false ) ;
4805: LD_LOC 42
4809: PPUSH
4810: LD_INT 123
4812: PPUSH
4813: LD_INT 94
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 48
// placehumaninunit ( ruhmech5 , ruv4 ) ;
4823: LD_LOC 43
4827: PPUSH
4828: LD_LOC 42
4832: PPUSH
4833: CALL_OW 52
// setdir ( ruhsold6 , 5 ) ;
4837: LD_LOC 38
4841: PPUSH
4842: LD_INT 5
4844: PPUSH
4845: CALL_OW 233
// setdir ( ruhsold7 , 5 ) ;
4849: LD_LOC 39
4853: PPUSH
4854: LD_INT 5
4856: PPUSH
4857: CALL_OW 233
// placeunitxyr ( ruhsold6 , 121 , 93 , 3 , false ) ;
4861: LD_LOC 38
4865: PPUSH
4866: LD_INT 121
4868: PPUSH
4869: LD_INT 93
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 50
// placeunitxyr ( ruhsold7 , 121 , 93 , 3 , false ) ;
4882: LD_LOC 39
4886: PPUSH
4887: LD_INT 121
4889: PPUSH
4890: LD_INT 93
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 0
4898: PPUSH
4899: CALL_OW 50
// manage_prebytek ( 2 ) ;
4903: LD_INT 2
4905: PPUSH
4906: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsold6 , ruhsold7 , ruv3 , ruv4 ] ;
4910: LD_ADDR_EXP 14
4914: PUSH
4915: LD_EXP 14
4919: PUSH
4920: LD_LOC 38
4924: PUSH
4925: LD_LOC 39
4929: PUSH
4930: LD_LOC 40
4934: PUSH
4935: LD_LOC 42
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: UNION
4946: ST_TO_ADDR
// comagressivemove ( rusove0 , 74 , 67 ) ;
4947: LD_EXP 14
4951: PPUSH
4952: LD_INT 74
4954: PPUSH
4955: LD_INT 67
4957: PPUSH
4958: CALL_OW 114
// end ; end ;
4962: END
// every 0 0$1 + 6 6$55 trigger ( t2rest <= 0 ) and ( not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea1 , [ [ f_side , rus ] ] ) ) ) do
4963: LD_LOC 24
4967: PUSH
4968: LD_INT 0
4970: LESSEQUAL
4971: PUSH
4972: LD_EXP 14
4976: PPUSH
4977: LD_INT 50
4979: PUSH
4980: EMPTY
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: PPUSH
4986: CALL_OW 72
4990: PUSH
4991: LD_INT 3
4993: PPUSH
4994: LD_INT 22
4996: PUSH
4997: LD_EXP 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: PPUSH
5009: CALL_OW 70
5013: DIFF
5014: NOT
5015: AND
5016: IFFALSE 5190
5018: GO 5020
5020: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
5021: LD_EXP 14
5025: PPUSH
5026: LD_INT 57
5028: PPUSH
5029: LD_INT 41
5031: PPUSH
5032: CALL_OW 114
// wait ( 0 0$20 ) ;
5036: LD_INT 700
5038: PPUSH
5039: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
5043: LD_EXP 14
5047: PPUSH
5048: LD_INT 47
5050: PPUSH
5051: LD_INT 38
5053: PPUSH
5054: CALL_OW 114
// wait ( 0 0$10 ) ;
5058: LD_INT 350
5060: PPUSH
5061: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
5065: LD_EXP 14
5069: PPUSH
5070: LD_INT 64
5072: PPUSH
5073: LD_INT 38
5075: PPUSH
5076: CALL_OW 114
// wait ( 0 0$10 ) ;
5080: LD_INT 350
5082: PPUSH
5083: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
5087: LD_EXP 14
5091: PPUSH
5092: LD_INT 45
5094: PPUSH
5095: LD_INT 29
5097: PPUSH
5098: CALL_OW 114
// wait ( 0 0$7 ) ;
5102: LD_INT 245
5104: PPUSH
5105: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
5109: LD_EXP 14
5113: PPUSH
5114: LD_INT 45
5116: PPUSH
5117: LD_INT 20
5119: PPUSH
5120: CALL_OW 114
// wait ( 0 0$10 ) ;
5124: LD_INT 350
5126: PPUSH
5127: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
5131: LD_EXP 14
5135: PPUSH
5136: LD_INT 56
5138: PPUSH
5139: LD_INT 20
5141: PPUSH
5142: CALL_OW 114
// wait ( 0 0$7 ) ;
5146: LD_INT 245
5148: PPUSH
5149: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
5153: LD_EXP 14
5157: PPUSH
5158: LD_INT 48
5160: PPUSH
5161: LD_INT 15
5163: PPUSH
5164: CALL_OW 114
// wait ( 0 0$10 ) ;
5168: LD_INT 350
5170: PPUSH
5171: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
5175: LD_EXP 14
5179: PPUSH
5180: LD_INT 52
5182: PPUSH
5183: LD_INT 9
5185: PPUSH
5186: CALL_OW 114
// end ;
5190: END
// var ruhsold8 , ruhsold9 ; var ruv5 , ruhmech6 , ruv6 , ruhmech7 ; every 11 11$30 do
5191: GO 5193
5193: DISABLE
// begin if retreat >= 0 then
5194: LD_EXP 5
5198: PUSH
5199: LD_INT 0
5201: GREATEREQUAL
5202: IFFALSE 5206
// exit ;
5204: GO 5811
// if debug then
5206: LD_EXP 13
5210: IFFALSE 5219
// msg ( utok 3 v 11:30 ) ;
5212: LD_STRING utok 3 v 11:30
5214: PPUSH
5215: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
5219: LD_ADDR_EXP 14
5223: PUSH
5224: LD_EXP 14
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 72
5242: ST_TO_ADDR
// uc_nation = nation_russian ;
5243: LD_ADDR_OWVAR 21
5247: PUSH
5248: LD_INT 3
5250: ST_TO_ADDR
// uc_side = rus ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_EXP 1
5260: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
5261: LD_INT 1
5263: PPUSH
5264: LD_INT 5
5266: PPUSH
5267: CALL_OW 381
// ruhsold8 = createhuman ;
5271: LD_ADDR_LOC 44
5275: PUSH
5276: CALL_OW 44
5280: ST_TO_ADDR
// preparesoldier ( sex_female , 6 ) ;
5281: LD_INT 2
5283: PPUSH
5284: LD_INT 6
5286: PPUSH
5287: CALL_OW 381
// ruhsold9 = createhuman ;
5291: LD_ADDR_LOC 45
5295: PUSH
5296: CALL_OW 44
5300: ST_TO_ADDR
// case difficulty of 1 :
5301: LD_OWVAR 67
5305: PUSH
5306: LD_INT 1
5308: DOUBLE
5309: EQUAL
5310: IFTRUE 5314
5312: GO 5327
5314: POP
// preparemechanic ( sex_male , 3 ) ; 2 :
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 3
5320: PPUSH
5321: CALL_OW 383
5325: GO 5370
5327: LD_INT 2
5329: DOUBLE
5330: EQUAL
5331: IFTRUE 5335
5333: GO 5348
5335: POP
// preparemechanic ( sex_male , 4 ) ; 3 :
5336: LD_INT 1
5338: PPUSH
5339: LD_INT 4
5341: PPUSH
5342: CALL_OW 383
5346: GO 5370
5348: LD_INT 3
5350: DOUBLE
5351: EQUAL
5352: IFTRUE 5356
5354: GO 5369
5356: POP
// preparemechanic ( sex_male , 5 ) ; end ;
5357: LD_INT 1
5359: PPUSH
5360: LD_INT 5
5362: PPUSH
5363: CALL_OW 383
5367: GO 5370
5369: POP
// ruhmech7 = createhuman ;
5370: LD_ADDR_LOC 49
5374: PUSH
5375: CALL_OW 44
5379: ST_TO_ADDR
// case difficulty of 1 :
5380: LD_OWVAR 67
5384: PUSH
5385: LD_INT 1
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5393
5391: GO 5412
5393: POP
// begin vc_chassis = ru_medium_wheeled ;
5394: LD_ADDR_OWVAR 37
5398: PUSH
5399: LD_INT 21
5401: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
5402: LD_ADDR_OWVAR 40
5406: PUSH
5407: LD_INT 42
5409: ST_TO_ADDR
// end ; 2 :
5410: GO 5467
5412: LD_INT 2
5414: DOUBLE
5415: EQUAL
5416: IFTRUE 5420
5418: GO 5439
5420: POP
// begin vc_chassis = ru_medium_wheeled ;
5421: LD_ADDR_OWVAR 37
5425: PUSH
5426: LD_INT 21
5428: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
5429: LD_ADDR_OWVAR 40
5433: PUSH
5434: LD_INT 43
5436: ST_TO_ADDR
// end ; 3 :
5437: GO 5467
5439: LD_INT 3
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5466
5447: POP
// begin vc_chassis = ru_heavy_wheeled ;
5448: LD_ADDR_OWVAR 37
5452: PUSH
5453: LD_INT 23
5455: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
5456: LD_ADDR_OWVAR 40
5460: PUSH
5461: LD_INT 43
5463: ST_TO_ADDR
// end ; end ;
5464: GO 5467
5466: POP
// vc_control = control_computer ;
5467: LD_ADDR_OWVAR 38
5471: PUSH
5472: LD_INT 3
5474: ST_TO_ADDR
// vc_engine = engine_combustion ;
5475: LD_ADDR_OWVAR 39
5479: PUSH
5480: LD_INT 1
5482: ST_TO_ADDR
// ruv5 = createvehicle ;
5483: LD_ADDR_LOC 46
5487: PUSH
5488: CALL_OW 45
5492: ST_TO_ADDR
// setdir ( ruv5 , 5 ) ;
5493: LD_LOC 46
5497: PPUSH
5498: LD_INT 5
5500: PPUSH
5501: CALL_OW 233
// placeunitxyr ( ruv5 , 119 , 91 , 5 , false ) ;
5505: LD_LOC 46
5509: PPUSH
5510: LD_INT 119
5512: PPUSH
5513: LD_INT 91
5515: PPUSH
5516: LD_INT 5
5518: PPUSH
5519: LD_INT 0
5521: PPUSH
5522: CALL_OW 50
// case difficulty of 1 :
5526: LD_OWVAR 67
5530: PUSH
5531: LD_INT 1
5533: DOUBLE
5534: EQUAL
5535: IFTRUE 5539
5537: GO 5558
5539: POP
// begin vc_chassis = ru_medium_wheeled ;
5540: LD_ADDR_OWVAR 37
5544: PUSH
5545: LD_INT 21
5547: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
5548: LD_ADDR_OWVAR 40
5552: PUSH
5553: LD_INT 43
5555: ST_TO_ADDR
// end ; 2 :
5556: GO 5613
5558: LD_INT 2
5560: DOUBLE
5561: EQUAL
5562: IFTRUE 5566
5564: GO 5585
5566: POP
// begin vc_chassis = ru_medium_wheeled ;
5567: LD_ADDR_OWVAR 37
5571: PUSH
5572: LD_INT 21
5574: ST_TO_ADDR
// vc_weapon = ru_gun ;
5575: LD_ADDR_OWVAR 40
5579: PUSH
5580: LD_INT 44
5582: ST_TO_ADDR
// end ; 3 :
5583: GO 5613
5585: LD_INT 3
5587: DOUBLE
5588: EQUAL
5589: IFTRUE 5593
5591: GO 5612
5593: POP
// begin vc_chassis = ru_heavy_wheeled ;
5594: LD_ADDR_OWVAR 37
5598: PUSH
5599: LD_INT 23
5601: ST_TO_ADDR
// vc_weapon = ru_heavy_gun ;
5602: LD_ADDR_OWVAR 40
5606: PUSH
5607: LD_INT 46
5609: ST_TO_ADDR
// end ; end ;
5610: GO 5613
5612: POP
// vc_control = control_manual ;
5613: LD_ADDR_OWVAR 38
5617: PUSH
5618: LD_INT 1
5620: ST_TO_ADDR
// vc_engine = engine_combustion ;
5621: LD_ADDR_OWVAR 39
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// ruv6 = createvehicle ;
5629: LD_ADDR_LOC 48
5633: PUSH
5634: CALL_OW 45
5638: ST_TO_ADDR
// setdir ( ruv6 , 5 ) ;
5639: LD_LOC 48
5643: PPUSH
5644: LD_INT 5
5646: PPUSH
5647: CALL_OW 233
// placeunitxyr ( ruv6 , 123 , 94 , 5 , false ) ;
5651: LD_LOC 48
5655: PPUSH
5656: LD_INT 123
5658: PPUSH
5659: LD_INT 94
5661: PPUSH
5662: LD_INT 5
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 50
// placehumaninunit ( ruhmech7 , ruv6 ) ;
5672: LD_LOC 49
5676: PPUSH
5677: LD_LOC 48
5681: PPUSH
5682: CALL_OW 52
// setdir ( ruhsold8 , 5 ) ;
5686: LD_LOC 44
5690: PPUSH
5691: LD_INT 5
5693: PPUSH
5694: CALL_OW 233
// setdir ( ruhsold9 , 5 ) ;
5698: LD_LOC 45
5702: PPUSH
5703: LD_INT 5
5705: PPUSH
5706: CALL_OW 233
// placeunitxyr ( ruhsold8 , 121 , 93 , 3 , false ) ;
5710: LD_LOC 44
5714: PPUSH
5715: LD_INT 121
5717: PPUSH
5718: LD_INT 93
5720: PPUSH
5721: LD_INT 3
5723: PPUSH
5724: LD_INT 0
5726: PPUSH
5727: CALL_OW 50
// placeunitxyr ( ruhsold9 , 121 , 93 , 3 , false ) ;
5731: LD_LOC 45
5735: PPUSH
5736: LD_INT 121
5738: PPUSH
5739: LD_INT 93
5741: PPUSH
5742: LD_INT 3
5744: PPUSH
5745: LD_INT 0
5747: PPUSH
5748: CALL_OW 50
// manage_prebytek ( 2 ) ;
5752: LD_INT 2
5754: PPUSH
5755: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsold8 , ruhsold9 , ruv5 , ruv6 ] ;
5759: LD_ADDR_EXP 14
5763: PUSH
5764: LD_EXP 14
5768: PUSH
5769: LD_LOC 44
5773: PUSH
5774: LD_LOC 45
5778: PUSH
5779: LD_LOC 46
5783: PUSH
5784: LD_LOC 48
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: UNION
5795: ST_TO_ADDR
// comagressivemove ( rusove0 , 71 , 63 ) ;
5796: LD_EXP 14
5800: PPUSH
5801: LD_INT 71
5803: PPUSH
5804: LD_INT 63
5806: PPUSH
5807: CALL_OW 114
// end ;
5811: END
// every 0 0$1 + 11 11$55 trigger not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea1 , [ [ f_side , rus ] ] ) ) do
5812: LD_EXP 14
5816: PPUSH
5817: LD_INT 50
5819: PUSH
5820: EMPTY
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: PPUSH
5826: CALL_OW 72
5830: PUSH
5831: LD_INT 3
5833: PPUSH
5834: LD_INT 22
5836: PUSH
5837: LD_EXP 1
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: PPUSH
5849: CALL_OW 70
5853: DIFF
5854: NOT
5855: IFFALSE 6029
5857: GO 5859
5859: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
5860: LD_EXP 14
5864: PPUSH
5865: LD_INT 57
5867: PPUSH
5868: LD_INT 41
5870: PPUSH
5871: CALL_OW 114
// wait ( 0 0$10 ) ;
5875: LD_INT 350
5877: PPUSH
5878: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
5882: LD_EXP 14
5886: PPUSH
5887: LD_INT 47
5889: PPUSH
5890: LD_INT 38
5892: PPUSH
5893: CALL_OW 114
// wait ( 0 0$5 ) ;
5897: LD_INT 175
5899: PPUSH
5900: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
5904: LD_EXP 14
5908: PPUSH
5909: LD_INT 64
5911: PPUSH
5912: LD_INT 38
5914: PPUSH
5915: CALL_OW 114
// wait ( 0 0$10 ) ;
5919: LD_INT 350
5921: PPUSH
5922: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
5926: LD_EXP 14
5930: PPUSH
5931: LD_INT 45
5933: PPUSH
5934: LD_INT 29
5936: PPUSH
5937: CALL_OW 114
// wait ( 0 0$5 ) ;
5941: LD_INT 175
5943: PPUSH
5944: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
5948: LD_EXP 14
5952: PPUSH
5953: LD_INT 45
5955: PPUSH
5956: LD_INT 20
5958: PPUSH
5959: CALL_OW 114
// wait ( 0 0$10 ) ;
5963: LD_INT 350
5965: PPUSH
5966: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
5970: LD_EXP 14
5974: PPUSH
5975: LD_INT 56
5977: PPUSH
5978: LD_INT 20
5980: PPUSH
5981: CALL_OW 114
// wait ( 0 0$5 ) ;
5985: LD_INT 175
5987: PPUSH
5988: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
5992: LD_EXP 14
5996: PPUSH
5997: LD_INT 48
5999: PPUSH
6000: LD_INT 15
6002: PPUSH
6003: CALL_OW 114
// wait ( 0 0$10 ) ;
6007: LD_INT 350
6009: PPUSH
6010: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
6014: LD_EXP 14
6018: PPUSH
6019: LD_INT 52
6021: PPUSH
6022: LD_INT 9
6024: PPUSH
6025: CALL_OW 114
// end ;
6029: END
// var ruhsolda , ruhsoldb ; var ruv7 , ruhmech8 , ruv8 ; every 15 15$0 do
6030: GO 6032
6032: DISABLE
// begin if retreat >= 0 then
6033: LD_EXP 5
6037: PUSH
6038: LD_INT 0
6040: GREATEREQUAL
6041: IFFALSE 6045
// exit ;
6043: GO 6674
// if debug then
6045: LD_EXP 13
6049: IFFALSE 6058
// msg ( utok 4 v 15:00 ) ;
6051: LD_STRING utok 4 v 15:00
6053: PPUSH
6054: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
6058: LD_ADDR_EXP 14
6062: PUSH
6063: LD_EXP 14
6067: PPUSH
6068: LD_INT 50
6070: PUSH
6071: EMPTY
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: PPUSH
6077: CALL_OW 72
6081: ST_TO_ADDR
// uc_nation = nation_russian ;
6082: LD_ADDR_OWVAR 21
6086: PUSH
6087: LD_INT 3
6089: ST_TO_ADDR
// uc_side = rus ;
6090: LD_ADDR_OWVAR 20
6094: PUSH
6095: LD_EXP 1
6099: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 5
6105: PPUSH
6106: CALL_OW 381
// hc_name =  ;
6110: LD_ADDR_OWVAR 26
6114: PUSH
6115: LD_STRING 
6117: ST_TO_ADDR
// ruhsolda = createhuman ;
6118: LD_ADDR_LOC 50
6122: PUSH
6123: CALL_OW 44
6127: ST_TO_ADDR
// preparesoldier ( sex_female , 6 ) ;
6128: LD_INT 2
6130: PPUSH
6131: LD_INT 6
6133: PPUSH
6134: CALL_OW 381
// hc_name =  ;
6138: LD_ADDR_OWVAR 26
6142: PUSH
6143: LD_STRING 
6145: ST_TO_ADDR
// ruhsoldb = createhuman ;
6146: LD_ADDR_LOC 51
6150: PUSH
6151: CALL_OW 44
6155: ST_TO_ADDR
// case difficulty of 1 :
6156: LD_OWVAR 67
6160: PUSH
6161: LD_INT 1
6163: DOUBLE
6164: EQUAL
6165: IFTRUE 6169
6167: GO 6182
6169: POP
// preparemechanic ( sex_male , 3 ) ; 2 :
6170: LD_INT 1
6172: PPUSH
6173: LD_INT 3
6175: PPUSH
6176: CALL_OW 383
6180: GO 6225
6182: LD_INT 2
6184: DOUBLE
6185: EQUAL
6186: IFTRUE 6190
6188: GO 6203
6190: POP
// preparemechanic ( sex_male , 4 ) ; 3 :
6191: LD_INT 1
6193: PPUSH
6194: LD_INT 4
6196: PPUSH
6197: CALL_OW 383
6201: GO 6225
6203: LD_INT 3
6205: DOUBLE
6206: EQUAL
6207: IFTRUE 6211
6209: GO 6224
6211: POP
// preparemechanic ( sex_male , 5 ) ; end ;
6212: LD_INT 1
6214: PPUSH
6215: LD_INT 5
6217: PPUSH
6218: CALL_OW 383
6222: GO 6225
6224: POP
// hc_name =  ;
6225: LD_ADDR_OWVAR 26
6229: PUSH
6230: LD_STRING 
6232: ST_TO_ADDR
// ruhmech8 = createhuman ;
6233: LD_ADDR_LOC 53
6237: PUSH
6238: CALL_OW 44
6242: ST_TO_ADDR
// case difficulty of 1 :
6243: LD_OWVAR 67
6247: PUSH
6248: LD_INT 1
6250: DOUBLE
6251: EQUAL
6252: IFTRUE 6256
6254: GO 6275
6256: POP
// begin vc_chassis = ru_medium_wheeled ;
6257: LD_ADDR_OWVAR 37
6261: PUSH
6262: LD_INT 21
6264: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
6265: LD_ADDR_OWVAR 40
6269: PUSH
6270: LD_INT 42
6272: ST_TO_ADDR
// end ; 2 :
6273: GO 6330
6275: LD_INT 2
6277: DOUBLE
6278: EQUAL
6279: IFTRUE 6283
6281: GO 6302
6283: POP
// begin vc_chassis = ru_medium_wheeled ;
6284: LD_ADDR_OWVAR 37
6288: PUSH
6289: LD_INT 21
6291: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6292: LD_ADDR_OWVAR 40
6296: PUSH
6297: LD_INT 43
6299: ST_TO_ADDR
// end ; 3 :
6300: GO 6330
6302: LD_INT 3
6304: DOUBLE
6305: EQUAL
6306: IFTRUE 6310
6308: GO 6329
6310: POP
// begin vc_chassis = ru_heavy_wheeled ;
6311: LD_ADDR_OWVAR 37
6315: PUSH
6316: LD_INT 23
6318: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6319: LD_ADDR_OWVAR 40
6323: PUSH
6324: LD_INT 43
6326: ST_TO_ADDR
// end ; end ;
6327: GO 6330
6329: POP
// vc_control = control_manual ;
6330: LD_ADDR_OWVAR 38
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// vc_engine = engine_combustion ;
6338: LD_ADDR_OWVAR 39
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// ruv8 = createvehicle ;
6346: LD_ADDR_LOC 54
6350: PUSH
6351: CALL_OW 45
6355: ST_TO_ADDR
// setdir ( ruv8 , 5 ) ;
6356: LD_LOC 54
6360: PPUSH
6361: LD_INT 5
6363: PPUSH
6364: CALL_OW 233
// placeunitxyr ( ruv8 , 119 , 91 , 5 , false ) ;
6368: LD_LOC 54
6372: PPUSH
6373: LD_INT 119
6375: PPUSH
6376: LD_INT 91
6378: PPUSH
6379: LD_INT 5
6381: PPUSH
6382: LD_INT 0
6384: PPUSH
6385: CALL_OW 50
// placehumaninunit ( ruhmech8 , ruv8 ) ;
6389: LD_LOC 53
6393: PPUSH
6394: LD_LOC 54
6398: PPUSH
6399: CALL_OW 52
// case difficulty of 1 :
6403: LD_OWVAR 67
6407: PUSH
6408: LD_INT 1
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6435
6416: POP
// begin vc_chassis = ru_medium_wheeled ;
6417: LD_ADDR_OWVAR 37
6421: PUSH
6422: LD_INT 21
6424: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6425: LD_ADDR_OWVAR 40
6429: PUSH
6430: LD_INT 43
6432: ST_TO_ADDR
// end ; 2 :
6433: GO 6490
6435: LD_INT 2
6437: DOUBLE
6438: EQUAL
6439: IFTRUE 6443
6441: GO 6462
6443: POP
// begin vc_chassis = ru_medium_wheeled ;
6444: LD_ADDR_OWVAR 37
6448: PUSH
6449: LD_INT 21
6451: ST_TO_ADDR
// vc_weapon = ru_gun ;
6452: LD_ADDR_OWVAR 40
6456: PUSH
6457: LD_INT 44
6459: ST_TO_ADDR
// end ; 3 :
6460: GO 6490
6462: LD_INT 3
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6489
6470: POP
// begin vc_chassis = ru_heavy_wheeled ;
6471: LD_ADDR_OWVAR 37
6475: PUSH
6476: LD_INT 23
6478: ST_TO_ADDR
// vc_weapon = ru_heavy_gun ;
6479: LD_ADDR_OWVAR 40
6483: PUSH
6484: LD_INT 46
6486: ST_TO_ADDR
// end ; end ;
6487: GO 6490
6489: POP
// vc_control = control_computer ;
6490: LD_ADDR_OWVAR 38
6494: PUSH
6495: LD_INT 3
6497: ST_TO_ADDR
// vc_engine = engine_combustion ;
6498: LD_ADDR_OWVAR 39
6502: PUSH
6503: LD_INT 1
6505: ST_TO_ADDR
// ruv7 = createvehicle ;
6506: LD_ADDR_LOC 52
6510: PUSH
6511: CALL_OW 45
6515: ST_TO_ADDR
// setdir ( ruv7 , 5 ) ;
6516: LD_LOC 52
6520: PPUSH
6521: LD_INT 5
6523: PPUSH
6524: CALL_OW 233
// placeunitxyr ( ruv7 , 123 , 94 , 5 , false ) ;
6528: LD_LOC 52
6532: PPUSH
6533: LD_INT 123
6535: PPUSH
6536: LD_INT 94
6538: PPUSH
6539: LD_INT 5
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 50
// setdir ( ruhsolda , 5 ) ;
6549: LD_LOC 50
6553: PPUSH
6554: LD_INT 5
6556: PPUSH
6557: CALL_OW 233
// setdir ( ruhsoldb , 5 ) ;
6561: LD_LOC 51
6565: PPUSH
6566: LD_INT 5
6568: PPUSH
6569: CALL_OW 233
// placeunitxyr ( ruhsolda , 121 , 93 , 3 , false ) ;
6573: LD_LOC 50
6577: PPUSH
6578: LD_INT 121
6580: PPUSH
6581: LD_INT 93
6583: PPUSH
6584: LD_INT 3
6586: PPUSH
6587: LD_INT 0
6589: PPUSH
6590: CALL_OW 50
// placeunitxyr ( ruhsoldb , 121 , 93 , 3 , false ) ;
6594: LD_LOC 51
6598: PPUSH
6599: LD_INT 121
6601: PPUSH
6602: LD_INT 93
6604: PPUSH
6605: LD_INT 3
6607: PPUSH
6608: LD_INT 0
6610: PPUSH
6611: CALL_OW 50
// manage_prebytek ( 2 ) ;
6615: LD_INT 2
6617: PPUSH
6618: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsolda , ruhsoldb , ruv7 , ruv8 ] ;
6622: LD_ADDR_EXP 14
6626: PUSH
6627: LD_EXP 14
6631: PUSH
6632: LD_LOC 50
6636: PUSH
6637: LD_LOC 51
6641: PUSH
6642: LD_LOC 52
6646: PUSH
6647: LD_LOC 54
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: UNION
6658: ST_TO_ADDR
// comagressivemove ( rusove0 , 57 , 67 ) ;
6659: LD_EXP 14
6663: PPUSH
6664: LD_INT 57
6666: PPUSH
6667: LD_INT 67
6669: PPUSH
6670: CALL_OW 114
// end ;
6674: END
// every 0 0$1 + 15 15$25 trigger not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea2 , [ [ f_side , rus ] ] ) ) do
6675: LD_EXP 14
6679: PPUSH
6680: LD_INT 50
6682: PUSH
6683: EMPTY
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: PPUSH
6689: CALL_OW 72
6693: PUSH
6694: LD_INT 9
6696: PPUSH
6697: LD_INT 22
6699: PUSH
6700: LD_EXP 1
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: EMPTY
6710: LIST
6711: PPUSH
6712: CALL_OW 70
6716: DIFF
6717: NOT
6718: IFFALSE 6892
6720: GO 6722
6722: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
6723: LD_EXP 14
6727: PPUSH
6728: LD_INT 57
6730: PPUSH
6731: LD_INT 41
6733: PPUSH
6734: CALL_OW 114
// wait ( 0 0$10 ) ;
6738: LD_INT 350
6740: PPUSH
6741: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
6745: LD_EXP 14
6749: PPUSH
6750: LD_INT 47
6752: PPUSH
6753: LD_INT 38
6755: PPUSH
6756: CALL_OW 114
// wait ( 0 0$5 ) ;
6760: LD_INT 175
6762: PPUSH
6763: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
6767: LD_EXP 14
6771: PPUSH
6772: LD_INT 64
6774: PPUSH
6775: LD_INT 38
6777: PPUSH
6778: CALL_OW 114
// wait ( 0 0$10 ) ;
6782: LD_INT 350
6784: PPUSH
6785: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
6789: LD_EXP 14
6793: PPUSH
6794: LD_INT 45
6796: PPUSH
6797: LD_INT 29
6799: PPUSH
6800: CALL_OW 114
// wait ( 0 0$5 ) ;
6804: LD_INT 175
6806: PPUSH
6807: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
6811: LD_EXP 14
6815: PPUSH
6816: LD_INT 45
6818: PPUSH
6819: LD_INT 20
6821: PPUSH
6822: CALL_OW 114
// wait ( 0 0$10 ) ;
6826: LD_INT 350
6828: PPUSH
6829: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
6833: LD_EXP 14
6837: PPUSH
6838: LD_INT 56
6840: PPUSH
6841: LD_INT 20
6843: PPUSH
6844: CALL_OW 114
// wait ( 0 0$5 ) ;
6848: LD_INT 175
6850: PPUSH
6851: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
6855: LD_EXP 14
6859: PPUSH
6860: LD_INT 48
6862: PPUSH
6863: LD_INT 15
6865: PPUSH
6866: CALL_OW 114
// wait ( 0 0$10 ) ;
6870: LD_INT 350
6872: PPUSH
6873: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
6877: LD_EXP 14
6881: PPUSH
6882: LD_INT 52
6884: PPUSH
6885: LD_INT 9
6887: PPUSH
6888: CALL_OW 114
// end ;
6892: END
// var ruhsoldc , ruhsoldd ; var ruv9 , ruhmech9 , ruhmecha , ruva , ruvb ; every 21 21$0 do
6893: GO 6895
6895: DISABLE
// begin if retreat >= 0 then
6896: LD_EXP 5
6900: PUSH
6901: LD_INT 0
6903: GREATEREQUAL
6904: IFFALSE 6908
// exit ;
6906: GO 7808
// if debug then
6908: LD_EXP 13
6912: IFFALSE 6921
// msg ( utok 5 v 21:00 ) ;
6914: LD_STRING utok 5 v 21:00
6916: PPUSH
6917: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
6921: LD_ADDR_EXP 14
6925: PUSH
6926: LD_EXP 14
6930: PPUSH
6931: LD_INT 50
6933: PUSH
6934: EMPTY
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: PPUSH
6940: CALL_OW 72
6944: ST_TO_ADDR
// uc_nation = nation_russian ;
6945: LD_ADDR_OWVAR 21
6949: PUSH
6950: LD_INT 3
6952: ST_TO_ADDR
// uc_side = rus ;
6953: LD_ADDR_OWVAR 20
6957: PUSH
6958: LD_EXP 1
6962: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
6963: LD_INT 1
6965: PPUSH
6966: LD_INT 5
6968: PPUSH
6969: CALL_OW 381
// hc_name =  ;
6973: LD_ADDR_OWVAR 26
6977: PUSH
6978: LD_STRING 
6980: ST_TO_ADDR
// ruhsoldc = createhuman ;
6981: LD_ADDR_LOC 55
6985: PUSH
6986: CALL_OW 44
6990: ST_TO_ADDR
// preparesoldier ( sex_female , 6 ) ;
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 6
6996: PPUSH
6997: CALL_OW 381
// hc_name =  ;
7001: LD_ADDR_OWVAR 26
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// ruhsoldd = createhuman ;
7009: LD_ADDR_LOC 56
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// case difficulty of 1 :
7019: LD_OWVAR 67
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7045
7032: POP
// preparemechanic ( sex_male , 3 ) ; 2 :
7033: LD_INT 1
7035: PPUSH
7036: LD_INT 3
7038: PPUSH
7039: CALL_OW 383
7043: GO 7088
7045: LD_INT 2
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7066
7053: POP
// preparemechanic ( sex_male , 4 ) ; 3 :
7054: LD_INT 1
7056: PPUSH
7057: LD_INT 4
7059: PPUSH
7060: CALL_OW 383
7064: GO 7088
7066: LD_INT 3
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7087
7074: POP
// preparemechanic ( sex_male , 5 ) ; end ;
7075: LD_INT 1
7077: PPUSH
7078: LD_INT 5
7080: PPUSH
7081: CALL_OW 383
7085: GO 7088
7087: POP
// hc_name =  ;
7088: LD_ADDR_OWVAR 26
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// ruhmech9 = createhuman ;
7096: LD_ADDR_LOC 58
7100: PUSH
7101: CALL_OW 44
7105: ST_TO_ADDR
// case difficulty of 2 :
7106: LD_OWVAR 67
7110: PUSH
7111: LD_INT 2
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7132
7119: POP
// preparemechanic ( sex_female , 3 ) ; 3 :
7120: LD_INT 2
7122: PPUSH
7123: LD_INT 3
7125: PPUSH
7126: CALL_OW 383
7130: GO 7154
7132: LD_INT 3
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7140
7138: GO 7153
7140: POP
// preparemechanic ( sex_female , 5 ) ; end ;
7141: LD_INT 2
7143: PPUSH
7144: LD_INT 5
7146: PPUSH
7147: CALL_OW 383
7151: GO 7154
7153: POP
// hc_name =  ;
7154: LD_ADDR_OWVAR 26
7158: PUSH
7159: LD_STRING 
7161: ST_TO_ADDR
// if difficulty > 1 then
7162: LD_OWVAR 67
7166: PUSH
7167: LD_INT 1
7169: GREATER
7170: IFFALSE 7184
// ruhmecha = createhuman else
7172: LD_ADDR_LOC 59
7176: PUSH
7177: CALL_OW 44
7181: ST_TO_ADDR
7182: GO 7192
// ruhmecha = 0 ;
7184: LD_ADDR_LOC 59
7188: PUSH
7189: LD_INT 0
7191: ST_TO_ADDR
// case difficulty of 1 :
7192: LD_OWVAR 67
7196: PUSH
7197: LD_INT 1
7199: DOUBLE
7200: EQUAL
7201: IFTRUE 7205
7203: GO 7224
7205: POP
// begin vc_chassis = ru_medium_wheeled ;
7206: LD_ADDR_OWVAR 37
7210: PUSH
7211: LD_INT 21
7213: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
7214: LD_ADDR_OWVAR 40
7218: PUSH
7219: LD_INT 42
7221: ST_TO_ADDR
// end ; 2 :
7222: GO 7279
7224: LD_INT 2
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7251
7232: POP
// begin vc_chassis = ru_medium_wheeled ;
7233: LD_ADDR_OWVAR 37
7237: PUSH
7238: LD_INT 21
7240: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7241: LD_ADDR_OWVAR 40
7245: PUSH
7246: LD_INT 43
7248: ST_TO_ADDR
// end ; 3 :
7249: GO 7279
7251: LD_INT 3
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7278
7259: POP
// begin vc_chassis = ru_medium_wheeled ;
7260: LD_ADDR_OWVAR 37
7264: PUSH
7265: LD_INT 21
7267: ST_TO_ADDR
// vc_weapon = ru_gun ;
7268: LD_ADDR_OWVAR 40
7272: PUSH
7273: LD_INT 44
7275: ST_TO_ADDR
// end ; end ;
7276: GO 7279
7278: POP
// vc_control = control_manual ;
7279: LD_ADDR_OWVAR 38
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// vc_engine = engine_combustion ;
7287: LD_ADDR_OWVAR 39
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// ruv9 = createvehicle ;
7295: LD_ADDR_LOC 57
7299: PUSH
7300: CALL_OW 45
7304: ST_TO_ADDR
// setdir ( ruv9 , 5 ) ;
7305: LD_LOC 57
7309: PPUSH
7310: LD_INT 5
7312: PPUSH
7313: CALL_OW 233
// placeunitxyr ( ruv9 , 119 , 91 , 5 , false ) ;
7317: LD_LOC 57
7321: PPUSH
7322: LD_INT 119
7324: PPUSH
7325: LD_INT 91
7327: PPUSH
7328: LD_INT 5
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: CALL_OW 50
// placehumaninunit ( ruhmech9 , ruv9 ) ;
7338: LD_LOC 58
7342: PPUSH
7343: LD_LOC 57
7347: PPUSH
7348: CALL_OW 52
// case difficulty of 2 :
7352: LD_OWVAR 67
7356: PUSH
7357: LD_INT 2
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7384
7365: POP
// begin vc_chassis = ru_medium_wheeled ;
7366: LD_ADDR_OWVAR 37
7370: PUSH
7371: LD_INT 21
7373: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7374: LD_ADDR_OWVAR 40
7378: PUSH
7379: LD_INT 43
7381: ST_TO_ADDR
// end ; 3 :
7382: GO 7412
7384: LD_INT 3
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7411
7392: POP
// begin vc_chassis = ru_heavy_wheeled ;
7393: LD_ADDR_OWVAR 37
7397: PUSH
7398: LD_INT 23
7400: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7401: LD_ADDR_OWVAR 40
7405: PUSH
7406: LD_INT 43
7408: ST_TO_ADDR
// end ; end ;
7409: GO 7412
7411: POP
// vc_control = control_manual ;
7412: LD_ADDR_OWVAR 38
7416: PUSH
7417: LD_INT 1
7419: ST_TO_ADDR
// vc_engine = engine_combustion ;
7420: LD_ADDR_OWVAR 39
7424: PUSH
7425: LD_INT 1
7427: ST_TO_ADDR
// if difficulty > 1 then
7428: LD_OWVAR 67
7432: PUSH
7433: LD_INT 1
7435: GREATER
7436: IFFALSE 7450
// ruva = createvehicle else
7438: LD_ADDR_LOC 60
7442: PUSH
7443: CALL_OW 45
7447: ST_TO_ADDR
7448: GO 7458
// ruva = 0 ;
7450: LD_ADDR_LOC 60
7454: PUSH
7455: LD_INT 0
7457: ST_TO_ADDR
// setdir ( ruva , 5 ) ;
7458: LD_LOC 60
7462: PPUSH
7463: LD_INT 5
7465: PPUSH
7466: CALL_OW 233
// placeunitxyr ( ruva , 119 , 91 , 5 , false ) ;
7470: LD_LOC 60
7474: PPUSH
7475: LD_INT 119
7477: PPUSH
7478: LD_INT 91
7480: PPUSH
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 50
// placehumaninunit ( ruhmecha , ruva ) ;
7491: LD_LOC 59
7495: PPUSH
7496: LD_LOC 60
7500: PPUSH
7501: CALL_OW 52
// case difficulty of 1 :
7505: LD_OWVAR 67
7509: PUSH
7510: LD_INT 1
7512: DOUBLE
7513: EQUAL
7514: IFTRUE 7518
7516: GO 7537
7518: POP
// begin vc_chassis = ru_medium_wheeled ;
7519: LD_ADDR_OWVAR 37
7523: PUSH
7524: LD_INT 21
7526: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7527: LD_ADDR_OWVAR 40
7531: PUSH
7532: LD_INT 43
7534: ST_TO_ADDR
// end ; 2 :
7535: GO 7592
7537: LD_INT 2
7539: DOUBLE
7540: EQUAL
7541: IFTRUE 7545
7543: GO 7564
7545: POP
// begin vc_chassis = ru_medium_wheeled ;
7546: LD_ADDR_OWVAR 37
7550: PUSH
7551: LD_INT 21
7553: ST_TO_ADDR
// vc_weapon = ru_gun ;
7554: LD_ADDR_OWVAR 40
7558: PUSH
7559: LD_INT 44
7561: ST_TO_ADDR
// end ; 3 :
7562: GO 7592
7564: LD_INT 3
7566: DOUBLE
7567: EQUAL
7568: IFTRUE 7572
7570: GO 7591
7572: POP
// begin vc_chassis = ru_heavy_wheeled ;
7573: LD_ADDR_OWVAR 37
7577: PUSH
7578: LD_INT 23
7580: ST_TO_ADDR
// vc_weapon = ru_heavy_gun ;
7581: LD_ADDR_OWVAR 40
7585: PUSH
7586: LD_INT 46
7588: ST_TO_ADDR
// end ; end ;
7589: GO 7592
7591: POP
// vc_control = control_computer ;
7592: LD_ADDR_OWVAR 38
7596: PUSH
7597: LD_INT 3
7599: ST_TO_ADDR
// vc_engine = engine_combustion ;
7600: LD_ADDR_OWVAR 39
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// ruvb = createvehicle ;
7608: LD_ADDR_LOC 61
7612: PUSH
7613: CALL_OW 45
7617: ST_TO_ADDR
// setdir ( ruvb , 5 ) ;
7618: LD_LOC 61
7622: PPUSH
7623: LD_INT 5
7625: PPUSH
7626: CALL_OW 233
// placeunitxyr ( ruvb , 123 , 94 , 5 , false ) ;
7630: LD_LOC 61
7634: PPUSH
7635: LD_INT 123
7637: PPUSH
7638: LD_INT 94
7640: PPUSH
7641: LD_INT 5
7643: PPUSH
7644: LD_INT 0
7646: PPUSH
7647: CALL_OW 50
// setdir ( ruhsoldc , 5 ) ;
7651: LD_LOC 55
7655: PPUSH
7656: LD_INT 5
7658: PPUSH
7659: CALL_OW 233
// setdir ( ruhsoldd , 5 ) ;
7663: LD_LOC 56
7667: PPUSH
7668: LD_INT 5
7670: PPUSH
7671: CALL_OW 233
// placeunitxyr ( ruhsoldc , 121 , 93 , 3 , false ) ;
7675: LD_LOC 55
7679: PPUSH
7680: LD_INT 121
7682: PPUSH
7683: LD_INT 93
7685: PPUSH
7686: LD_INT 3
7688: PPUSH
7689: LD_INT 0
7691: PPUSH
7692: CALL_OW 50
// placeunitxyr ( ruhsoldd , 121 , 93 , 3 , false ) ;
7696: LD_LOC 56
7700: PPUSH
7701: LD_INT 121
7703: PPUSH
7704: LD_INT 93
7706: PPUSH
7707: LD_INT 3
7709: PPUSH
7710: LD_INT 0
7712: PPUSH
7713: CALL_OW 50
// if difficulty > 1 then
7717: LD_OWVAR 67
7721: PUSH
7722: LD_INT 1
7724: GREATER
7725: IFFALSE 7736
// manage_prebytek ( 3 ) else
7727: LD_INT 3
7729: PPUSH
7730: CALL 3852 0 1
7734: GO 7743
// manage_prebytek ( 2 ) ;
7736: LD_INT 2
7738: PPUSH
7739: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsoldc , ruhsoldd , ruv9 , ruva , ruvb ] diff [ 0 ] ;
7743: LD_ADDR_EXP 14
7747: PUSH
7748: LD_EXP 14
7752: PUSH
7753: LD_LOC 55
7757: PUSH
7758: LD_LOC 56
7762: PUSH
7763: LD_LOC 57
7767: PUSH
7768: LD_LOC 60
7772: PUSH
7773: LD_LOC 61
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: UNION
7785: PUSH
7786: LD_INT 0
7788: PUSH
7789: EMPTY
7790: LIST
7791: DIFF
7792: ST_TO_ADDR
// comagressivemove ( rusove0 , 57 , 67 ) ;
7793: LD_EXP 14
7797: PPUSH
7798: LD_INT 57
7800: PPUSH
7801: LD_INT 67
7803: PPUSH
7804: CALL_OW 114
// end ;
7808: END
// every 0 0$1 + 21 21$25 trigger not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea2 , [ [ f_side , rus ] ] ) ) do
7809: LD_EXP 14
7813: PPUSH
7814: LD_INT 50
7816: PUSH
7817: EMPTY
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: PUSH
7828: LD_INT 9
7830: PPUSH
7831: LD_INT 22
7833: PUSH
7834: LD_EXP 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: PPUSH
7846: CALL_OW 70
7850: DIFF
7851: NOT
7852: IFFALSE 8026
7854: GO 7856
7856: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
7857: LD_EXP 14
7861: PPUSH
7862: LD_INT 57
7864: PPUSH
7865: LD_INT 41
7867: PPUSH
7868: CALL_OW 114
// wait ( 0 0$10 ) ;
7872: LD_INT 350
7874: PPUSH
7875: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
7879: LD_EXP 14
7883: PPUSH
7884: LD_INT 47
7886: PPUSH
7887: LD_INT 38
7889: PPUSH
7890: CALL_OW 114
// wait ( 0 0$5 ) ;
7894: LD_INT 175
7896: PPUSH
7897: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
7901: LD_EXP 14
7905: PPUSH
7906: LD_INT 64
7908: PPUSH
7909: LD_INT 38
7911: PPUSH
7912: CALL_OW 114
// wait ( 0 0$10 ) ;
7916: LD_INT 350
7918: PPUSH
7919: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
7923: LD_EXP 14
7927: PPUSH
7928: LD_INT 45
7930: PPUSH
7931: LD_INT 29
7933: PPUSH
7934: CALL_OW 114
// wait ( 0 0$5 ) ;
7938: LD_INT 175
7940: PPUSH
7941: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
7945: LD_EXP 14
7949: PPUSH
7950: LD_INT 45
7952: PPUSH
7953: LD_INT 20
7955: PPUSH
7956: CALL_OW 114
// wait ( 0 0$10 ) ;
7960: LD_INT 350
7962: PPUSH
7963: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
7967: LD_EXP 14
7971: PPUSH
7972: LD_INT 56
7974: PPUSH
7975: LD_INT 20
7977: PPUSH
7978: CALL_OW 114
// wait ( 0 0$5 ) ;
7982: LD_INT 175
7984: PPUSH
7985: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
7989: LD_EXP 14
7993: PPUSH
7994: LD_INT 48
7996: PPUSH
7997: LD_INT 15
7999: PPUSH
8000: CALL_OW 114
// wait ( 0 0$10 ) ;
8004: LD_INT 350
8006: PPUSH
8007: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
8011: LD_EXP 14
8015: PPUSH
8016: LD_INT 52
8018: PPUSH
8019: LD_INT 9
8021: PPUSH
8022: CALL_OW 114
// end ;
8026: END
// every 0 0$30 do
8027: GO 8029
8029: DISABLE
// begin placeunitxyr ( posilya [ 1 ] , 79 , 3 , 3 , false ) ;
8030: LD_EXP 27
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: LD_INT 79
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 3
8047: PPUSH
8048: LD_INT 0
8050: PPUSH
8051: CALL_OW 50
// placeunitxyr ( posilya [ 2 ] , 80 , 2 , 3 , false ) ;
8055: LD_EXP 27
8059: PUSH
8060: LD_INT 2
8062: ARRAY
8063: PPUSH
8064: LD_INT 80
8066: PPUSH
8067: LD_INT 2
8069: PPUSH
8070: LD_INT 3
8072: PPUSH
8073: LD_INT 0
8075: PPUSH
8076: CALL_OW 50
// pocet_lidi = pocet_lidi + 2 ;
8080: LD_ADDR_LOC 22
8084: PUSH
8085: LD_LOC 22
8089: PUSH
8090: LD_INT 2
8092: PLUS
8093: ST_TO_ADDR
// commovexy ( posilya , 77 , 16 ) ;
8094: LD_EXP 27
8098: PPUSH
8099: LD_INT 77
8101: PPUSH
8102: LD_INT 16
8104: PPUSH
8105: CALL_OW 111
// wait ( 0 0$7 ) ;
8109: LD_INT 245
8111: PPUSH
8112: CALL_OW 67
// commovexy ( posilya , 68 , 21 ) ;
8116: LD_EXP 27
8120: PPUSH
8121: LD_INT 68
8123: PPUSH
8124: LD_INT 21
8126: PPUSH
8127: CALL_OW 111
// wait ( 0 0$7 ) ;
8131: LD_INT 245
8133: PPUSH
8134: CALL_OW 67
// commovexy ( posilya , 55 , 15 ) ;
8138: LD_EXP 27
8142: PPUSH
8143: LD_INT 55
8145: PPUSH
8146: LD_INT 15
8148: PPUSH
8149: CALL_OW 111
// wait ( 0 0$7 ) ;
8153: LD_INT 245
8155: PPUSH
8156: CALL_OW 67
// centeronunits ( posilya ) ;
8160: LD_EXP 27
8164: PPUSH
8165: CALL_OW 85
// dialogueon ;
8169: CALL_OW 6
// if glad and ( gladloc = 3 ) then
8173: LD_EXP 34
8177: PUSH
8178: LD_EXP 44
8182: PUSH
8183: LD_INT 3
8185: EQUAL
8186: AND
8187: IFFALSE 8203
// say ( glad , D2-Glad-1 ) else
8189: LD_EXP 34
8193: PPUSH
8194: LD_STRING D2-Glad-1
8196: PPUSH
8197: CALL_OW 88
8201: GO 8256
// if getsex ( posilya [ 2 ] ) = sex_male then
8203: LD_EXP 27
8207: PUSH
8208: LD_INT 2
8210: ARRAY
8211: PPUSH
8212: CALL_OW 258
8216: PUSH
8217: LD_INT 1
8219: EQUAL
8220: IFFALSE 8240
// say ( posilya [ 2 ] , D2-Sol1-1 ) else
8222: LD_EXP 27
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: LD_STRING D2-Sol1-1
8233: PPUSH
8234: CALL_OW 88
8238: GO 8256
// say ( posilya [ 2 ] , D2-FSol1-1 ) ;
8240: LD_EXP 27
8244: PUSH
8245: LD_INT 2
8247: ARRAY
8248: PPUSH
8249: LD_STRING D2-FSol1-1
8251: PPUSH
8252: CALL_OW 88
// case gamma2commander of 1 :
8256: LD_EXP 46
8260: PUSH
8261: LD_INT 1
8263: DOUBLE
8264: EQUAL
8265: IFTRUE 8269
8267: GO 8284
8269: POP
// say ( lucy , D2-Don-1 ) ; 2 :
8270: LD_EXP 31
8274: PPUSH
8275: LD_STRING D2-Don-1
8277: PPUSH
8278: CALL_OW 88
8282: GO 8331
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8307
8292: POP
// say ( brown , D2-Brown-1 ) ; 3 :
8293: LD_EXP 32
8297: PPUSH
8298: LD_STRING D2-Brown-1
8300: PPUSH
8301: CALL_OW 88
8305: GO 8331
8307: LD_INT 3
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8330
8315: POP
// say ( vanh , D2-VanH-1 ) ; end ;
8316: LD_EXP 33
8320: PPUSH
8321: LD_STRING D2-VanH-1
8323: PPUSH
8324: CALL_OW 88
8328: GO 8331
8330: POP
// dialogueoff ;
8331: CALL_OW 7
// end ;
8335: END
// every 0 0$5 do var tmp , tmpch ;
8336: GO 8338
8338: DISABLE
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
// begin return_time = return_time - 0 0$5 ;
8343: LD_ADDR_EXP 29
8347: PUSH
8348: LD_EXP 29
8352: PUSH
8353: LD_INT 175
8355: MINUS
8356: ST_TO_ADDR
// if return_time <= 0 then
8357: LD_EXP 29
8361: PUSH
8362: LD_INT 0
8364: LESSEQUAL
8365: IFFALSE 10089
// begin john = john_ ;
8367: LD_ADDR_EXP 17
8371: PUSH
8372: LD_EXP 20
8376: ST_TO_ADDR
// placeunitxyr ( posilyb [ 1 ] , 77 , 4 , 3 , false ) ;
8377: LD_EXP 28
8381: PUSH
8382: LD_INT 1
8384: ARRAY
8385: PPUSH
8386: LD_INT 77
8388: PPUSH
8389: LD_INT 4
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 50
// placeunitxyr ( posilyb [ 2 ] , 77 , 4 , 3 , false ) ;
8402: LD_EXP 28
8406: PUSH
8407: LD_INT 2
8409: ARRAY
8410: PPUSH
8411: LD_INT 77
8413: PPUSH
8414: LD_INT 4
8416: PPUSH
8417: LD_INT 3
8419: PPUSH
8420: LD_INT 0
8422: PPUSH
8423: CALL_OW 50
// placeunitxyr ( posilyb [ 3 ] , 77 , 4 , 3 , false ) ;
8427: LD_EXP 28
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PPUSH
8436: LD_INT 77
8438: PPUSH
8439: LD_INT 4
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: LD_INT 0
8447: PPUSH
8448: CALL_OW 50
// placeunitxyr ( posilyb [ 4 ] , 77 , 4 , 3 , false ) ;
8452: LD_EXP 28
8456: PUSH
8457: LD_INT 4
8459: ARRAY
8460: PPUSH
8461: LD_INT 77
8463: PPUSH
8464: LD_INT 4
8466: PPUSH
8467: LD_INT 3
8469: PPUSH
8470: LD_INT 0
8472: PPUSH
8473: CALL_OW 50
// placeunitxyr ( posilyb [ 5 ] , 77 , 4 , 3 , false ) ;
8477: LD_EXP 28
8481: PUSH
8482: LD_INT 5
8484: ARRAY
8485: PPUSH
8486: LD_INT 77
8488: PPUSH
8489: LD_INT 4
8491: PPUSH
8492: LD_INT 3
8494: PPUSH
8495: LD_INT 0
8497: PPUSH
8498: CALL_OW 50
// pocet_lidi = pocet_lidi + 5 ;
8502: LD_ADDR_LOC 22
8506: PUSH
8507: LD_LOC 22
8511: PUSH
8512: LD_INT 5
8514: PLUS
8515: ST_TO_ADDR
// commovexy ( posilyb , 77 , 16 ) ;
8516: LD_EXP 28
8520: PPUSH
8521: LD_INT 77
8523: PPUSH
8524: LD_INT 16
8526: PPUSH
8527: CALL_OW 111
// wait ( 0 0$7 ) ;
8531: LD_INT 245
8533: PPUSH
8534: CALL_OW 67
// commovexy ( posilyb , 69 , 20 ) ;
8538: LD_EXP 28
8542: PPUSH
8543: LD_INT 69
8545: PPUSH
8546: LD_INT 20
8548: PPUSH
8549: CALL_OW 111
// wait ( 0 0$7 ) ;
8553: LD_INT 245
8555: PPUSH
8556: CALL_OW 67
// centeronunits ( posilyb ) ;
8560: LD_EXP 28
8564: PPUSH
8565: CALL_OW 85
// dialogueon ;
8569: CALL_OW 6
// say ( john , D3-JMM-1 ) ;
8573: LD_EXP 17
8577: PPUSH
8578: LD_STRING D3-JMM-1
8580: PPUSH
8581: CALL_OW 88
// tmpch = 0 ;
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// case gamma2commander of 1 :
8593: LD_EXP 46
8597: PUSH
8598: LD_INT 1
8600: DOUBLE
8601: EQUAL
8602: IFTRUE 8606
8604: GO 8642
8606: POP
// if islive ( lucy ) then
8607: LD_EXP 31
8611: PPUSH
8612: CALL_OW 300
8616: IFFALSE 8632
// say ( lucy , D3-Don-1 ) else
8618: LD_EXP 31
8622: PPUSH
8623: LD_STRING D3-Don-1
8625: PPUSH
8626: CALL_OW 88
8630: GO 8640
// tmpch = 1 ; 2 :
8632: LD_ADDR_VAR 0 2
8636: PUSH
8637: LD_INT 1
8639: ST_TO_ADDR
8640: GO 8731
8642: LD_INT 2
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8686
8650: POP
// if islive ( brown ) then
8651: LD_EXP 32
8655: PPUSH
8656: CALL_OW 300
8660: IFFALSE 8676
// say ( brown , D3-Brown-1 ) else
8662: LD_EXP 32
8666: PPUSH
8667: LD_STRING D3-Brown-1
8669: PPUSH
8670: CALL_OW 88
8674: GO 8684
// tmpch = 1 ; 3 :
8676: LD_ADDR_VAR 0 2
8680: PUSH
8681: LD_INT 1
8683: ST_TO_ADDR
8684: GO 8731
8686: LD_INT 3
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8694
8692: GO 8730
8694: POP
// if islive ( vanh ) then
8695: LD_EXP 33
8699: PPUSH
8700: CALL_OW 300
8704: IFFALSE 8720
// say ( vanh , D3-VanH-1 ) else
8706: LD_EXP 33
8710: PPUSH
8711: LD_STRING D3-VanH-1
8713: PPUSH
8714: CALL_OW 88
8718: GO 8728
// tmpch = 1 ; end ;
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
8728: GO 8731
8730: POP
// if tmpch then
8731: LD_VAR 0 2
8735: IFFALSE 9277
// case gamma2commander of 1 :
8737: LD_EXP 46
8741: PUSH
8742: LD_INT 1
8744: DOUBLE
8745: EQUAL
8746: IFTRUE 8750
8748: GO 8872
8750: POP
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) ;
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_INT 22
8758: PUSH
8759: LD_EXP 2
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 21
8770: PUSH
8771: LD_INT 1
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 52
8780: PUSH
8781: EMPTY
8782: LIST
8783: PUSH
8784: LD_INT 26
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 3
8796: PUSH
8797: LD_INT 23
8799: PUSH
8800: LD_INT 0
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: PPUSH
8815: CALL_OW 69
8819: ST_TO_ADDR
// if tmp then
8820: LD_VAR 0 1
8824: IFFALSE 8870
// begin say ( tmp [ 1 ] , D3-Sol1-1 ) ;
8826: LD_VAR 0 1
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: LD_STRING D3-Sol1-1
8837: PPUSH
8838: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
8842: LD_VAR 0 1
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PPUSH
8851: LD_STRING D3-Sol1-1c
8853: PPUSH
8854: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
8858: LD_EXP 17
8862: PPUSH
8863: LD_STRING D3-JMM-2
8865: PPUSH
8866: CALL_OW 88
// end ; end ; 2 :
8870: GO 9277
8872: LD_INT 2
8874: DOUBLE
8875: EQUAL
8876: IFTRUE 8880
8878: GO 9002
8880: POP
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) ;
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: LD_INT 22
8888: PUSH
8889: LD_EXP 2
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 21
8900: PUSH
8901: LD_INT 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 52
8910: PUSH
8911: EMPTY
8912: LIST
8913: PUSH
8914: LD_INT 26
8916: PUSH
8917: LD_INT 1
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 3
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 0
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: ST_TO_ADDR
// if tmp then
8950: LD_VAR 0 1
8954: IFFALSE 9000
// begin say ( tmp [ 1 ] , D3-Sol1-1a ) ;
8956: LD_VAR 0 1
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: LD_STRING D3-Sol1-1a
8967: PPUSH
8968: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
8972: LD_VAR 0 1
8976: PUSH
8977: LD_INT 1
8979: ARRAY
8980: PPUSH
8981: LD_STRING D3-Sol1-1c
8983: PPUSH
8984: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
8988: LD_EXP 17
8992: PPUSH
8993: LD_STRING D3-JMM-2
8995: PPUSH
8996: CALL_OW 88
// end ; end ; 3 :
9000: GO 9277
9002: LD_INT 3
9004: DOUBLE
9005: EQUAL
9006: IFTRUE 9010
9008: GO 9276
9010: POP
// begin tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9011: LD_ADDR_VAR 0 1
9015: PUSH
9016: LD_INT 8
9018: PPUSH
9019: LD_INT 22
9021: PUSH
9022: LD_EXP 2
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 21
9033: PUSH
9034: LD_INT 1
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 52
9043: PUSH
9044: EMPTY
9045: LIST
9046: PUSH
9047: LD_INT 26
9049: PUSH
9050: LD_INT 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 3
9059: PUSH
9060: LD_INT 23
9062: PUSH
9063: LD_INT 0
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: PPUSH
9078: CALL_OW 70
9082: PUSH
9083: LD_EXP 17
9087: DIFF
9088: ST_TO_ADDR
// if tmp > 0 then
9089: LD_VAR 0 1
9093: PUSH
9094: LD_INT 0
9096: GREATER
9097: IFFALSE 9145
// begin say ( tmp [ 1 ] , D3-Sol1-1b ) ;
9099: LD_VAR 0 1
9103: PUSH
9104: LD_INT 1
9106: ARRAY
9107: PPUSH
9108: LD_STRING D3-Sol1-1b
9110: PPUSH
9111: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
9115: LD_VAR 0 1
9119: PUSH
9120: LD_INT 1
9122: ARRAY
9123: PPUSH
9124: LD_STRING D3-Sol1-1c
9126: PPUSH
9127: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
9131: LD_EXP 17
9135: PPUSH
9136: LD_STRING D3-JMM-2
9138: PPUSH
9139: CALL_OW 88
// end else
9143: GO 9274
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_INT 22
9152: PUSH
9153: LD_EXP 2
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 21
9164: PUSH
9165: LD_INT 1
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 52
9174: PUSH
9175: EMPTY
9176: LIST
9177: PUSH
9178: LD_INT 26
9180: PUSH
9181: LD_INT 1
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 3
9190: PUSH
9191: LD_INT 23
9193: PUSH
9194: LD_INT 0
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PPUSH
9209: CALL_OW 69
9213: PUSH
9214: LD_EXP 17
9218: DIFF
9219: ST_TO_ADDR
// if tmp > 0 then
9220: LD_VAR 0 1
9224: PUSH
9225: LD_INT 0
9227: GREATER
9228: IFFALSE 9274
// begin say ( tmp [ 1 ] , D3-Sol1-1b ) ;
9230: LD_VAR 0 1
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_STRING D3-Sol1-1b
9241: PPUSH
9242: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
9246: LD_VAR 0 1
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: LD_STRING D3-Sol1-1c
9257: PPUSH
9258: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
9262: LD_EXP 17
9266: PPUSH
9267: LD_STRING D3-JMM-2
9269: PPUSH
9270: CALL_OW 88
// end ; end ; end ; end ;
9274: GO 9277
9276: POP
// wait ( 0 0$1 ) ;
9277: LD_INT 35
9279: PPUSH
9280: CALL_OW 67
// if joan > 0 then
9284: LD_EXP 35
9288: PUSH
9289: LD_INT 0
9291: GREATER
9292: IFFALSE 9783
// begin if islive ( joan ) then
9294: LD_EXP 35
9298: PPUSH
9299: CALL_OW 300
9303: IFFALSE 9331
// begin say ( joan , D3a-Joan-1 ) ;
9305: LD_EXP 35
9309: PPUSH
9310: LD_STRING D3a-Joan-1
9312: PPUSH
9313: CALL_OW 88
// say ( john , D3a-JMM-1 ) ;
9317: LD_EXP 17
9321: PPUSH
9322: LD_STRING D3a-JMM-1
9324: PPUSH
9325: CALL_OW 88
// end else
9329: GO 9783
// if islive ( lucy ) then
9331: LD_EXP 31
9335: PPUSH
9336: CALL_OW 300
9340: IFFALSE 9403
// begin say ( john , D3b-JMM-1 ) ;
9342: LD_EXP 17
9346: PPUSH
9347: LD_STRING D3b-JMM-1
9349: PPUSH
9350: CALL_OW 88
// say ( lucy , D3b-Don-1 ) ;
9354: LD_EXP 31
9358: PPUSH
9359: LD_STRING D3b-Don-1
9361: PPUSH
9362: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9366: LD_EXP 17
9370: PPUSH
9371: LD_STRING D3b-JMM-2
9373: PPUSH
9374: CALL_OW 88
// if isok ( lisa ) then
9378: LD_EXP 18
9382: PPUSH
9383: CALL_OW 302
9387: IFFALSE 9401
// say ( lisa , D3b-Lisa-2 ) ;
9389: LD_EXP 18
9393: PPUSH
9394: LD_STRING D3b-Lisa-2
9396: PPUSH
9397: CALL_OW 88
// end else
9401: GO 9783
// if islive ( brown ) then
9403: LD_EXP 32
9407: PPUSH
9408: CALL_OW 300
9412: IFFALSE 9475
// begin say ( john , D3b-JMM-1 ) ;
9414: LD_EXP 17
9418: PPUSH
9419: LD_STRING D3b-JMM-1
9421: PPUSH
9422: CALL_OW 88
// say ( brown , D3b-Brown-1 ) ;
9426: LD_EXP 32
9430: PPUSH
9431: LD_STRING D3b-Brown-1
9433: PPUSH
9434: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9438: LD_EXP 17
9442: PPUSH
9443: LD_STRING D3b-JMM-2
9445: PPUSH
9446: CALL_OW 88
// if isok ( lisa ) then
9450: LD_EXP 18
9454: PPUSH
9455: CALL_OW 302
9459: IFFALSE 9473
// say ( lisa , D3b-Lisa-2 ) ;
9461: LD_EXP 18
9465: PPUSH
9466: LD_STRING D3b-Lisa-2
9468: PPUSH
9469: CALL_OW 88
// end else
9473: GO 9783
// if islive ( vanh ) then
9475: LD_EXP 33
9479: PPUSH
9480: CALL_OW 300
9484: IFFALSE 9547
// begin say ( john , D3b-JMM-1 ) ;
9486: LD_EXP 17
9490: PPUSH
9491: LD_STRING D3b-JMM-1
9493: PPUSH
9494: CALL_OW 88
// say ( vanh , D3b-VanH-1 ) ;
9498: LD_EXP 33
9502: PPUSH
9503: LD_STRING D3b-VanH-1
9505: PPUSH
9506: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9510: LD_EXP 17
9514: PPUSH
9515: LD_STRING D3b-JMM-2
9517: PPUSH
9518: CALL_OW 88
// if isok ( lisa ) then
9522: LD_EXP 18
9526: PPUSH
9527: CALL_OW 302
9531: IFFALSE 9545
// say ( lisa , D3b-Lisa-2 ) ;
9533: LD_EXP 18
9537: PPUSH
9538: LD_STRING D3b-Lisa-2
9540: PPUSH
9541: CALL_OW 88
// end else
9545: GO 9783
// begin tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9547: LD_ADDR_VAR 0 1
9551: PUSH
9552: LD_INT 8
9554: PPUSH
9555: LD_INT 22
9557: PUSH
9558: LD_EXP 2
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 52
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: LD_INT 26
9585: PUSH
9586: LD_INT 1
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 3
9595: PUSH
9596: LD_INT 23
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 70
9618: PUSH
9619: LD_EXP 17
9623: DIFF
9624: ST_TO_ADDR
// if tmp = 0 then
9625: LD_VAR 0 1
9629: PUSH
9630: LD_INT 0
9632: EQUAL
9633: IFFALSE 9710
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_EXP 2
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 21
9654: PUSH
9655: LD_INT 1
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: LD_INT 52
9664: PUSH
9665: EMPTY
9666: LIST
9667: PUSH
9668: LD_INT 26
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 3
9680: PUSH
9681: LD_INT 23
9683: PUSH
9684: LD_INT 0
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 69
9703: PUSH
9704: LD_EXP 17
9708: DIFF
9709: ST_TO_ADDR
// if tmp > 0 then
9710: LD_VAR 0 1
9714: PUSH
9715: LD_INT 0
9717: GREATER
9718: IFFALSE 9783
// begin say ( john , D3b-JMM-1 ) ;
9720: LD_EXP 17
9724: PPUSH
9725: LD_STRING D3b-JMM-1
9727: PPUSH
9728: CALL_OW 88
// say ( tmp [ 1 ] , D3b-Sol1-1 ) ;
9732: LD_VAR 0 1
9736: PUSH
9737: LD_INT 1
9739: ARRAY
9740: PPUSH
9741: LD_STRING D3b-Sol1-1
9743: PPUSH
9744: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9748: LD_EXP 17
9752: PPUSH
9753: LD_STRING D3b-JMM-2
9755: PPUSH
9756: CALL_OW 88
// if isok ( lisa ) then
9760: LD_EXP 18
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// say ( lisa , D3b-Lisa-2 ) ;
9771: LD_EXP 18
9775: PPUSH
9776: LD_STRING D3b-Lisa-2
9778: PPUSH
9779: CALL_OW 88
// end ; end ; end ; if dialcb_delayed then
9783: LD_LOC 26
9787: IFFALSE 10083
// begin tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9789: LD_ADDR_VAR 0 1
9793: PUSH
9794: LD_INT 8
9796: PPUSH
9797: LD_INT 22
9799: PUSH
9800: LD_EXP 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: LD_INT 21
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 52
9821: PUSH
9822: EMPTY
9823: LIST
9824: PUSH
9825: LD_INT 26
9827: PUSH
9828: LD_INT 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 3
9837: PUSH
9838: LD_INT 23
9840: PUSH
9841: LD_INT 0
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 70
9860: PUSH
9861: LD_EXP 17
9865: DIFF
9866: ST_TO_ADDR
// if tmp > 0 then
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 0
9874: GREATER
9875: IFFALSE 9935
// begin say ( tmp [ 1 ] , DCa-Sol1-1 ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_INT 1
9884: ARRAY
9885: PPUSH
9886: LD_STRING DCa-Sol1-1
9888: PPUSH
9889: CALL_OW 88
// say ( john , DCb-JMM-1 ) ;
9893: LD_EXP 17
9897: PPUSH
9898: LD_STRING DCb-JMM-1
9900: PPUSH
9901: CALL_OW 88
// say ( tmp [ 1 ] , DCb-Sol1-1 ) ;
9905: LD_VAR 0 1
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: LD_STRING DCb-Sol1-1
9916: PPUSH
9917: CALL_OW 88
// say ( john , DCb-JMM-2 ) ;
9921: LD_EXP 17
9925: PPUSH
9926: LD_STRING DCb-JMM-2
9928: PPUSH
9929: CALL_OW 88
// end else
9933: GO 10076
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9935: LD_ADDR_VAR 0 1
9939: PUSH
9940: LD_INT 22
9942: PUSH
9943: LD_EXP 2
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 21
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 52
9964: PUSH
9965: EMPTY
9966: LIST
9967: PUSH
9968: LD_INT 26
9970: PUSH
9971: LD_INT 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 23
9983: PUSH
9984: LD_INT 0
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: PPUSH
9999: CALL_OW 69
10003: PUSH
10004: LD_EXP 17
10008: DIFF
10009: ST_TO_ADDR
// if tmp > 0 then
10010: LD_VAR 0 1
10014: PUSH
10015: LD_INT 0
10017: GREATER
10018: IFFALSE 10076
// begin say ( tmp [ 1 ] , DCa-Sol1-1 ) ;
10020: LD_VAR 0 1
10024: PUSH
10025: LD_INT 1
10027: ARRAY
10028: PPUSH
10029: LD_STRING DCa-Sol1-1
10031: PPUSH
10032: CALL_OW 88
// say ( john , DCb-JMM-1 ) ;
10036: LD_EXP 17
10040: PPUSH
10041: LD_STRING DCb-JMM-1
10043: PPUSH
10044: CALL_OW 88
// say ( tmp [ 1 ] , DCb-Sol1-1 ) ;
10048: LD_VAR 0 1
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_STRING DCb-Sol1-1
10059: PPUSH
10060: CALL_OW 88
// say ( john , DCb-JMM-2 ) ;
10064: LD_EXP 17
10068: PPUSH
10069: LD_STRING DCb-JMM-2
10071: PPUSH
10072: CALL_OW 88
// end ; end ; hint ( ComputerCapturing ) ;
10076: LD_STRING ComputerCapturing
10078: PPUSH
10079: CALL_OW 339
// end ; dialogueoff ;
10083: CALL_OW 7
// end else
10087: GO 10090
// enable ;
10089: ENABLE
// end ;
10090: PPOPN 2
10092: END
// every 0 0$1 + 16 16$0 do
10093: GO 10095
10095: DISABLE
// begin dialogueon ;
10096: CALL_OW 6
// sayradio ( powel , D4-Pow-1 ) ;
10100: LD_EXP 16
10104: PPUSH
10105: LD_STRING D4-Pow-1
10107: PPUSH
10108: CALL_OW 94
// say ( john , D4-JMM-1 ) ;
10112: LD_EXP 17
10116: PPUSH
10117: LD_STRING D4-JMM-1
10119: PPUSH
10120: CALL_OW 88
// sayradio ( powel , D4-Pow-2 ) ;
10124: LD_EXP 16
10128: PPUSH
10129: LD_STRING D4-Pow-2
10131: PPUSH
10132: CALL_OW 94
// say ( john , D4-JMM-2 ) ;
10136: LD_EXP 17
10140: PPUSH
10141: LD_STRING D4-JMM-2
10143: PPUSH
10144: CALL_OW 88
// sayradio ( powel , D4-Pow-3 ) ;
10148: LD_EXP 16
10152: PPUSH
10153: LD_STRING D4-Pow-3
10155: PPUSH
10156: CALL_OW 94
// dialogueoff ;
10160: CALL_OW 7
// end ;
10164: END
// every 0 0$1 + 17 17$0 do
10165: GO 10167
10167: DISABLE
// begin dialogueon ;
10168: CALL_OW 6
// sayradio ( powel , D4a-Pow-1 ) ;
10172: LD_EXP 16
10176: PPUSH
10177: LD_STRING D4a-Pow-1
10179: PPUSH
10180: CALL_OW 94
// dialogueoff ;
10184: CALL_OW 7
// end ;
10188: END
// var amhsoldb , amhsoldd , amhmecha , amhmechb , amhmechc , amva , amvb , amvc , amvd ; var reinf_us ; every 0 0$1 + 25 25$0 do
10189: GO 10191
10191: DISABLE
// begin changesidefog ( amer_reinf , amer ) ;
10192: LD_EXP 3
10196: PPUSH
10197: LD_EXP 2
10201: PPUSH
10202: CALL_OW 343
// uc_nation = nation_american ;
10206: LD_ADDR_OWVAR 21
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// uc_side = amer_reinf ;
10214: LD_ADDR_OWVAR 20
10218: PUSH
10219: LD_EXP 3
10223: ST_TO_ADDR
// hc_class = class_soldier ;
10224: LD_ADDR_OWVAR 28
10228: PUSH
10229: LD_INT 1
10231: ST_TO_ADDR
// case difficulty of 3 :
10232: LD_OWVAR 67
10236: PUSH
10237: LD_INT 3
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10264
10245: POP
// begin vc_chassis = us_medium_wheeled ;
10246: LD_ADDR_OWVAR 37
10250: PUSH
10251: LD_INT 2
10253: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
10254: LD_ADDR_OWVAR 40
10258: PUSH
10259: LD_INT 2
10261: ST_TO_ADDR
// end ; 2 :
10262: GO 10319
10264: LD_INT 2
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10291
10272: POP
// begin vc_chassis = us_medium_tracked ;
10273: LD_ADDR_OWVAR 37
10277: PUSH
10278: LD_INT 3
10280: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10281: LD_ADDR_OWVAR 40
10285: PUSH
10286: LD_INT 4
10288: ST_TO_ADDR
// end ; 1 :
10289: GO 10319
10291: LD_INT 1
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10318
10299: POP
// begin vc_chassis = us_heavy_tracked ;
10300: LD_ADDR_OWVAR 37
10304: PUSH
10305: LD_INT 4
10307: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10308: LD_ADDR_OWVAR 40
10312: PUSH
10313: LD_INT 4
10315: ST_TO_ADDR
// end ; end ;
10316: GO 10319
10318: POP
// vc_control = control_manual ;
10319: LD_ADDR_OWVAR 38
10323: PUSH
10324: LD_INT 1
10326: ST_TO_ADDR
// vc_engine = engine_combustion ;
10327: LD_ADDR_OWVAR 39
10331: PUSH
10332: LD_INT 1
10334: ST_TO_ADDR
// amvd = createvehicle ;
10335: LD_ADDR_LOC 70
10339: PUSH
10340: CALL_OW 45
10344: ST_TO_ADDR
// setdir ( amvd , 2 ) ;
10345: LD_LOC 70
10349: PPUSH
10350: LD_INT 2
10352: PPUSH
10353: CALL_OW 233
// placeunitxyr ( amvd , 15 , 2 , 7 , false ) ;
10357: LD_LOC 70
10361: PPUSH
10362: LD_INT 15
10364: PPUSH
10365: LD_INT 2
10367: PPUSH
10368: LD_INT 7
10370: PPUSH
10371: LD_INT 0
10373: PPUSH
10374: CALL_OW 50
// placehumaninunit ( amhsolda , amvd ) ;
10378: LD_EXP 26
10382: PPUSH
10383: LD_LOC 70
10387: PPUSH
10388: CALL_OW 52
// preparesoldier ( sex_male , 4 ) ;
10392: LD_INT 1
10394: PPUSH
10395: LD_INT 4
10397: PPUSH
10398: CALL_OW 381
// amhsoldb = createhuman ;
10402: LD_ADDR_LOC 62
10406: PUSH
10407: CALL_OW 44
10411: ST_TO_ADDR
// placeunitxyr ( amhsoldb , 15 , 2 , 7 , false ) ;
10412: LD_LOC 62
10416: PPUSH
10417: LD_INT 15
10419: PPUSH
10420: LD_INT 2
10422: PPUSH
10423: LD_INT 7
10425: PPUSH
10426: LD_INT 0
10428: PPUSH
10429: CALL_OW 50
// case difficulty of 1 :
10433: LD_OWVAR 67
10437: PUSH
10438: LD_INT 1
10440: DOUBLE
10441: EQUAL
10442: IFTRUE 10446
10444: GO 10459
10446: POP
// preparemechanic ( sex_female , 5 ) ; 2 :
10447: LD_INT 2
10449: PPUSH
10450: LD_INT 5
10452: PPUSH
10453: CALL_OW 383
10457: GO 10502
10459: LD_INT 2
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10480
10467: POP
// preparemechanic ( sex_female , 4 ) ; 3 :
10468: LD_INT 2
10470: PPUSH
10471: LD_INT 4
10473: PPUSH
10474: CALL_OW 383
10478: GO 10502
10480: LD_INT 3
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 10501
10488: POP
// preparemechanic ( sex_female , 3 ) ; end ;
10489: LD_INT 2
10491: PPUSH
10492: LD_INT 3
10494: PPUSH
10495: CALL_OW 383
10499: GO 10502
10501: POP
// amhmecha = createhuman ;
10502: LD_ADDR_LOC 64
10506: PUSH
10507: CALL_OW 44
10511: ST_TO_ADDR
// case difficulty of 1 :
10512: LD_OWVAR 67
10516: PUSH
10517: LD_INT 1
10519: DOUBLE
10520: EQUAL
10521: IFTRUE 10525
10523: GO 10538
10525: POP
// preparemechanic ( sex_female , 4 ) ; 2 :
10526: LD_INT 2
10528: PPUSH
10529: LD_INT 4
10531: PPUSH
10532: CALL_OW 383
10536: GO 10581
10538: LD_INT 2
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10559
10546: POP
// preparemechanic ( sex_female , 4 ) ; 3 :
10547: LD_INT 2
10549: PPUSH
10550: LD_INT 4
10552: PPUSH
10553: CALL_OW 383
10557: GO 10581
10559: LD_INT 3
10561: DOUBLE
10562: EQUAL
10563: IFTRUE 10567
10565: GO 10580
10567: POP
// preparemechanic ( sex_female , 3 ) ; end ;
10568: LD_INT 2
10570: PPUSH
10571: LD_INT 3
10573: PPUSH
10574: CALL_OW 383
10578: GO 10581
10580: POP
// amhmechc = createhuman ;
10581: LD_ADDR_LOC 66
10585: PUSH
10586: CALL_OW 44
10590: ST_TO_ADDR
// preparemechanic ( sex_male , 5 ) ;
10591: LD_INT 1
10593: PPUSH
10594: LD_INT 5
10596: PPUSH
10597: CALL_OW 383
// amhmechb = createhuman ;
10601: LD_ADDR_LOC 65
10605: PUSH
10606: CALL_OW 44
10610: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
10611: LD_INT 1
10613: PPUSH
10614: LD_INT 5
10616: PPUSH
10617: CALL_OW 381
// amhsoldd = createhuman ;
10621: LD_ADDR_LOC 63
10625: PUSH
10626: CALL_OW 44
10630: ST_TO_ADDR
// placeunitxyr ( amhsoldd , 15 , 2 , 7 , false ) ;
10631: LD_LOC 63
10635: PPUSH
10636: LD_INT 15
10638: PPUSH
10639: LD_INT 2
10641: PPUSH
10642: LD_INT 7
10644: PPUSH
10645: LD_INT 0
10647: PPUSH
10648: CALL_OW 50
// case difficulty of 3 :
10652: LD_OWVAR 67
10656: PUSH
10657: LD_INT 3
10659: DOUBLE
10660: EQUAL
10661: IFTRUE 10665
10663: GO 10684
10665: POP
// begin vc_chassis = us_medium_wheeled ;
10666: LD_ADDR_OWVAR 37
10670: PUSH
10671: LD_INT 2
10673: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
10674: LD_ADDR_OWVAR 40
10678: PUSH
10679: LD_INT 2
10681: ST_TO_ADDR
// end ; 2 :
10682: GO 10739
10684: LD_INT 2
10686: DOUBLE
10687: EQUAL
10688: IFTRUE 10692
10690: GO 10711
10692: POP
// begin vc_chassis = us_medium_tracked ;
10693: LD_ADDR_OWVAR 37
10697: PUSH
10698: LD_INT 3
10700: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10701: LD_ADDR_OWVAR 40
10705: PUSH
10706: LD_INT 4
10708: ST_TO_ADDR
// end ; 1 :
10709: GO 10739
10711: LD_INT 1
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10738
10719: POP
// begin vc_chassis = us_heavy_tracked ;
10720: LD_ADDR_OWVAR 37
10724: PUSH
10725: LD_INT 4
10727: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10728: LD_ADDR_OWVAR 40
10732: PUSH
10733: LD_INT 4
10735: ST_TO_ADDR
// end ; end ;
10736: GO 10739
10738: POP
// vc_control = control_manual ;
10739: LD_ADDR_OWVAR 38
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// vc_engine = engine_combustion ;
10747: LD_ADDR_OWVAR 39
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// amva = createvehicle ;
10755: LD_ADDR_LOC 67
10759: PUSH
10760: CALL_OW 45
10764: ST_TO_ADDR
// setdir ( amva , 2 ) ;
10765: LD_LOC 67
10769: PPUSH
10770: LD_INT 2
10772: PPUSH
10773: CALL_OW 233
// placeunitxyr ( amva , 15 , 2 , 7 , false ) ;
10777: LD_LOC 67
10781: PPUSH
10782: LD_INT 15
10784: PPUSH
10785: LD_INT 2
10787: PPUSH
10788: LD_INT 7
10790: PPUSH
10791: LD_INT 0
10793: PPUSH
10794: CALL_OW 50
// placehumaninunit ( amhmecha , amva ) ;
10798: LD_LOC 64
10802: PPUSH
10803: LD_LOC 67
10807: PPUSH
10808: CALL_OW 52
// case difficulty of 3 :
10812: LD_OWVAR 67
10816: PUSH
10817: LD_INT 3
10819: DOUBLE
10820: EQUAL
10821: IFTRUE 10825
10823: GO 10844
10825: POP
// begin vc_chassis = us_medium_wheeled ;
10826: LD_ADDR_OWVAR 37
10830: PUSH
10831: LD_INT 2
10833: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10834: LD_ADDR_OWVAR 40
10838: PUSH
10839: LD_INT 3
10841: ST_TO_ADDR
// end ; 2 :
10842: GO 10899
10844: LD_INT 2
10846: DOUBLE
10847: EQUAL
10848: IFTRUE 10852
10850: GO 10871
10852: POP
// begin vc_chassis = us_medium_wheeled ;
10853: LD_ADDR_OWVAR 37
10857: PUSH
10858: LD_INT 2
10860: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10861: LD_ADDR_OWVAR 40
10865: PUSH
10866: LD_INT 3
10868: ST_TO_ADDR
// end ; 1 :
10869: GO 10899
10871: LD_INT 1
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10898
10879: POP
// begin vc_chassis = us_medium_tracked ;
10880: LD_ADDR_OWVAR 37
10884: PUSH
10885: LD_INT 3
10887: ST_TO_ADDR
// vc_weapon = us_double_gun ;
10888: LD_ADDR_OWVAR 40
10892: PUSH
10893: LD_INT 5
10895: ST_TO_ADDR
// end ; end ;
10896: GO 10899
10898: POP
// vc_control = control_manual ;
10899: LD_ADDR_OWVAR 38
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// vc_engine = engine_combustion ;
10907: LD_ADDR_OWVAR 39
10911: PUSH
10912: LD_INT 1
10914: ST_TO_ADDR
// amvb = createvehicle ;
10915: LD_ADDR_LOC 68
10919: PUSH
10920: CALL_OW 45
10924: ST_TO_ADDR
// setdir ( amvb , 2 ) ;
10925: LD_LOC 68
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 233
// placeunitxyr ( amvb , 15 , 2 , 7 , false ) ;
10937: LD_LOC 68
10941: PPUSH
10942: LD_INT 15
10944: PPUSH
10945: LD_INT 2
10947: PPUSH
10948: LD_INT 7
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 50
// placehumaninunit ( amhmechb , amvb ) ;
10958: LD_LOC 65
10962: PPUSH
10963: LD_LOC 68
10967: PPUSH
10968: CALL_OW 52
// case difficulty of 3 :
10972: LD_OWVAR 67
10976: PUSH
10977: LD_INT 3
10979: DOUBLE
10980: EQUAL
10981: IFTRUE 10985
10983: GO 11004
10985: POP
// begin vc_chassis = us_medium_wheeled ;
10986: LD_ADDR_OWVAR 37
10990: PUSH
10991: LD_INT 2
10993: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10994: LD_ADDR_OWVAR 40
10998: PUSH
10999: LD_INT 4
11001: ST_TO_ADDR
// end ; 2 :
11002: GO 11059
11004: LD_INT 2
11006: DOUBLE
11007: EQUAL
11008: IFTRUE 11012
11010: GO 11031
11012: POP
// begin vc_chassis = us_heavy_tracked ;
11013: LD_ADDR_OWVAR 37
11017: PUSH
11018: LD_INT 4
11020: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
11021: LD_ADDR_OWVAR 40
11025: PUSH
11026: LD_INT 4
11028: ST_TO_ADDR
// end ; 1 :
11029: GO 11059
11031: LD_INT 1
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 11058
11039: POP
// begin vc_chassis = us_heavy_tracked ;
11040: LD_ADDR_OWVAR 37
11044: PUSH
11045: LD_INT 4
11047: ST_TO_ADDR
// vc_weapon = us_double_gun ;
11048: LD_ADDR_OWVAR 40
11052: PUSH
11053: LD_INT 5
11055: ST_TO_ADDR
// end ; end ;
11056: GO 11059
11058: POP
// vc_control = control_manual ;
11059: LD_ADDR_OWVAR 38
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// vc_engine = engine_combustion ;
11067: LD_ADDR_OWVAR 39
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// amvc = createvehicle ;
11075: LD_ADDR_LOC 69
11079: PUSH
11080: CALL_OW 45
11084: ST_TO_ADDR
// setdir ( amvc , 2 ) ;
11085: LD_LOC 69
11089: PPUSH
11090: LD_INT 2
11092: PPUSH
11093: CALL_OW 233
// placeunitxyr ( amvc , 15 , 2 , 7 , false ) ;
11097: LD_LOC 69
11101: PPUSH
11102: LD_INT 15
11104: PPUSH
11105: LD_INT 2
11107: PPUSH
11108: LD_INT 7
11110: PPUSH
11111: LD_INT 0
11113: PPUSH
11114: CALL_OW 50
// placehumaninunit ( amhmechc , amvc ) ;
11118: LD_LOC 66
11122: PPUSH
11123: LD_LOC 69
11127: PPUSH
11128: CALL_OW 52
// reinf_us = [ amhsoldb , amhsoldd , amva , amvb , amvc , amvd ] ;
11132: LD_ADDR_LOC 71
11136: PUSH
11137: LD_LOC 62
11141: PUSH
11142: LD_LOC 63
11146: PUSH
11147: LD_LOC 67
11151: PUSH
11152: LD_LOC 68
11156: PUSH
11157: LD_LOC 69
11161: PUSH
11162: LD_LOC 70
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: ST_TO_ADDR
// sikishere = true ;
11175: LD_ADDR_LOC 27
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// comagressivemove ( reinf_us , 36 , 30 ) ;
11183: LD_LOC 71
11187: PPUSH
11188: LD_INT 36
11190: PPUSH
11191: LD_INT 30
11193: PPUSH
11194: CALL_OW 114
// end ;
11198: END
// var time2go ; every 0 0$1 + 25 25$20 trigger not ( unitfilter ( reinf_us , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea0 , [ [ f_side , amer_reinf ] , [ f_ok ] ] ) ) do var tmp ;
11199: LD_LOC 71
11203: PPUSH
11204: LD_INT 50
11206: PUSH
11207: EMPTY
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: PPUSH
11213: CALL_OW 72
11217: PUSH
11218: LD_INT 2
11220: PPUSH
11221: LD_INT 22
11223: PUSH
11224: LD_EXP 3
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 50
11235: PUSH
11236: EMPTY
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 70
11247: DIFF
11248: NOT
11249: IFFALSE 11521
11251: GO 11253
11253: DISABLE
11254: LD_INT 0
11256: PPUSH
// begin commovexy ( reinf_us , 53 , 24 ) ;
11257: LD_LOC 71
11261: PPUSH
11262: LD_INT 53
11264: PPUSH
11265: LD_INT 24
11267: PPUSH
11268: CALL_OW 111
// wait ( 0 0$11 ) ;
11272: LD_INT 385
11274: PPUSH
11275: CALL_OW 67
// tmp = tick ;
11279: LD_ADDR_VAR 0 1
11283: PUSH
11284: LD_OWVAR 1
11288: ST_TO_ADDR
// dialogueon ;
11289: CALL_OW 6
// say ( amhsolda , D5-Sik-1 ) ;
11293: LD_EXP 26
11297: PPUSH
11298: LD_STRING D5-Sik-1
11300: PPUSH
11301: CALL_OW 88
// if chciplo <= 3 then
11305: LD_LOC 23
11309: PUSH
11310: LD_INT 3
11312: LESSEQUAL
11313: IFFALSE 11329
// say ( john , D5-JMM-1a ) else
11315: LD_EXP 17
11319: PPUSH
11320: LD_STRING D5-JMM-1a
11322: PPUSH
11323: CALL_OW 88
11327: GO 11341
// say ( john , D5-JMM-1b ) ;
11329: LD_EXP 17
11333: PPUSH
11334: LD_STRING D5-JMM-1b
11336: PPUSH
11337: CALL_OW 88
// say ( amhsolda , D5-Sik-2 ) ;
11341: LD_EXP 26
11345: PPUSH
11346: LD_STRING D5-Sik-2
11348: PPUSH
11349: CALL_OW 88
// case query ( QSikorski ) of 1 :
11353: LD_STRING QSikorski
11355: PPUSH
11356: CALL_OW 97
11360: PUSH
11361: LD_INT 1
11363: DOUBLE
11364: EQUAL
11365: IFTRUE 11369
11367: GO 11398
11369: POP
// begin time2go = tmp + 1 1$0 ;
11370: LD_ADDR_LOC 72
11374: PUSH
11375: LD_VAR 0 1
11379: PUSH
11380: LD_INT 2100
11382: PLUS
11383: ST_TO_ADDR
// say ( amhsolda , D5a-Sik-1 ) ;
11384: LD_EXP 26
11388: PPUSH
11389: LD_STRING D5a-Sik-1
11391: PPUSH
11392: CALL_OW 88
// end ; 2 :
11396: GO 11497
11398: LD_INT 2
11400: DOUBLE
11401: EQUAL
11402: IFTRUE 11406
11404: GO 11435
11406: POP
// begin time2go = tmp + 5 5$0 ;
11407: LD_ADDR_LOC 72
11411: PUSH
11412: LD_VAR 0 1
11416: PUSH
11417: LD_INT 10500
11419: PLUS
11420: ST_TO_ADDR
// say ( amhsolda , D5b-Sik-1 ) ;
11421: LD_EXP 26
11425: PPUSH
11426: LD_STRING D5b-Sik-1
11428: PPUSH
11429: CALL_OW 88
// end ; 3 :
11433: GO 11497
11435: LD_INT 3
11437: DOUBLE
11438: EQUAL
11439: IFTRUE 11443
11441: GO 11496
11443: POP
// begin time2go = tmp + 5 5$0 ;
11444: LD_ADDR_LOC 72
11448: PUSH
11449: LD_VAR 0 1
11453: PUSH
11454: LD_INT 10500
11456: PLUS
11457: ST_TO_ADDR
// say ( amhsolda , D5c-Sik-1 ) ;
11458: LD_EXP 26
11462: PPUSH
11463: LD_STRING D5c-Sik-1
11465: PPUSH
11466: CALL_OW 88
// say ( john , D5c-JMM-1 ) ;
11470: LD_EXP 17
11474: PPUSH
11475: LD_STRING D5c-JMM-1
11477: PPUSH
11478: CALL_OW 88
// say ( amhsolda , D5c-Sik-2 ) ;
11482: LD_EXP 26
11486: PPUSH
11487: LD_STRING D5c-Sik-2
11489: PPUSH
11490: CALL_OW 88
// end ; end ;
11494: GO 11497
11496: POP
// dialogueoff ;
11497: CALL_OW 7
// display_strings = [ #Am08-1 , time2go ] ;
11501: LD_ADDR_OWVAR 47
11505: PUSH
11506: LD_STRING #Am08-1
11508: PUSH
11509: LD_LOC 72
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: ST_TO_ADDR
// enable ( 37 ) ;
11518: LD_INT 37
11520: ENABLE_MARKED
// end ;
11521: PPOPN 1
11523: END
// every 0 0$1 marked 37 do var tmp ;
11524: GO 11526
11526: DISABLE
11527: LD_INT 0
11529: PPUSH
// begin tmp = time2go - tick ;
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_LOC 72
11539: PUSH
11540: LD_OWVAR 1
11544: MINUS
11545: ST_TO_ADDR
// if tmp < 0 then
11546: LD_VAR 0 1
11550: PUSH
11551: LD_INT 0
11553: LESS
11554: IFFALSE 11564
// tmp = 0 ;
11556: LD_ADDR_VAR 0 1
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// display_strings = [ #Am08-1 , tmp ] ;
11564: LD_ADDR_OWVAR 47
11568: PUSH
11569: LD_STRING #Am08-1
11571: PUSH
11572: LD_VAR 0 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: ST_TO_ADDR
// if tmp > 0 then
11581: LD_VAR 0 1
11585: PUSH
11586: LD_INT 0
11588: GREATER
11589: IFFALSE 11594
// enable else
11591: ENABLE
11592: GO 11601
// display_strings = [ ] ;
11594: LD_ADDR_OWVAR 47
11598: PUSH
11599: EMPTY
11600: ST_TO_ADDR
// end ;
11601: PPOPN 1
11603: END
// var combat_started ; every 0 0$1 + 26 26$20 trigger tick >= time2go do var ntmp ;
11604: LD_OWVAR 1
11608: PUSH
11609: LD_LOC 72
11613: GREATEREQUAL
11614: IFFALSE 11721
11616: GO 11618
11618: DISABLE
11619: LD_INT 0
11621: PPUSH
// begin manage_prebytek ( 1 ) ;
11622: LD_INT 1
11624: PPUSH
11625: CALL 3852 0 1
// commovetoarea ( prebytek , ar_exit_ ) ;
11629: LD_EXP 11
11633: PPUSH
11634: LD_INT 17
11636: PPUSH
11637: CALL_OW 113
// enable ( 27 ) ;
11641: LD_INT 27
11643: ENABLE_MARKED
// dialogueon ;
11644: CALL_OW 6
// say ( amhsolda , D6-Sik-1 ) ;
11648: LD_EXP 26
11652: PPUSH
11653: LD_STRING D6-Sik-1
11655: PPUSH
11656: CALL_OW 88
// changemissionobjectives ( M2 ) ;
11660: LD_STRING M2
11662: PPUSH
11663: CALL_OW 337
// dialogueoff ;
11667: CALL_OW 7
// combat_started = tick + 0 0$13 ;
11671: LD_ADDR_LOC 73
11675: PUSH
11676: LD_OWVAR 1
11680: PUSH
11681: LD_INT 455
11683: PLUS
11684: ST_TO_ADDR
// comagressivemove ( reinf_us , 63 , 63 ) ;
11685: LD_LOC 71
11689: PPUSH
11690: LD_INT 63
11692: PPUSH
11693: LD_INT 63
11695: PPUSH
11696: CALL_OW 114
// wait ( 0 0$11 ) ;
11700: LD_INT 385
11702: PPUSH
11703: CALL_OW 67
// comattackunit ( reinf_us , rubbunk0 ) ;
11707: LD_LOC 71
11711: PPUSH
11712: LD_LOC 7
11716: PPUSH
11717: CALL_OW 115
// end ;
11721: PPOPN 1
11723: END
// every 0 0$1 marked 27 do var tmp , tmp_ ;
11724: GO 11726
11726: DISABLE
11727: LD_INT 0
11729: PPUSH
11730: PPUSH
// begin tmp = filterunitsinarea ( ar_exit_ , [ [ f_side , rus ] ] ) ;
11731: LD_ADDR_VAR 0 1
11735: PUSH
11736: LD_INT 17
11738: PPUSH
11739: LD_INT 22
11741: PUSH
11742: LD_EXP 1
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: PPUSH
11754: CALL_OW 70
11758: ST_TO_ADDR
// for tmp_ in tmp do
11759: LD_ADDR_VAR 0 2
11763: PUSH
11764: LD_VAR 0 1
11768: PUSH
11769: FOR_IN
11770: IFFALSE 11783
// destroyunit ( tmp_ ) ;
11772: LD_VAR 0 2
11776: PPUSH
11777: CALL_OW 65
11781: GO 11769
11783: POP
11784: POP
// prebytek = prebytek diff tmp ;
11785: LD_ADDR_EXP 11
11789: PUSH
11790: LD_EXP 11
11794: PUSH
11795: LD_VAR 0 1
11799: DIFF
11800: ST_TO_ADDR
// if prebytek then
11801: LD_EXP 11
11805: IFFALSE 11820
// begin enable ;
11807: ENABLE
// commovetoarea ( prebytek , ar_exit_ ) ;
11808: LD_EXP 11
11812: PPUSH
11813: LD_INT 17
11815: PPUSH
11816: CALL_OW 113
// end ; end ;
11820: PPOPN 2
11822: END
// function utoci ( un ) ; var tmp , tmp_ , tmp__ ; begin
11823: LD_INT 0
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
// tmp = 0 ;
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_INT 0
11836: ST_TO_ADDR
// if isinunit ( un ) then
11837: LD_VAR 0 1
11841: PPUSH
11842: CALL_OW 310
11846: IFFALSE 11900
// if gettype ( isinunit ( un ) ) = unit_vehicle then
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 310
11857: PPUSH
11858: CALL_OW 247
11862: PUSH
11863: LD_INT 2
11865: EQUAL
11866: IFFALSE 11890
// tmp = wantstoattack ( isinunit ( un ) ) else
11868: LD_ADDR_VAR 0 3
11872: PUSH
11873: LD_VAR 0 1
11877: PPUSH
11878: CALL_OW 310
11882: PPUSH
11883: CALL_OW 319
11887: ST_TO_ADDR
11888: GO 11898
// tmp = 0 else
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
11898: GO 11915
// tmp = wantstoattack ( un ) ;
11900: LD_ADDR_VAR 0 3
11904: PUSH
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 319
11914: ST_TO_ADDR
// if tmp then
11915: LD_VAR 0 3
11919: IFFALSE 11931
// result = 1 else
11921: LD_ADDR_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ST_TO_ADDR
11929: GO 11939
// result = 0 ;
11931: LD_ADDR_VAR 0 2
11935: PUSH
11936: LD_INT 0
11938: ST_TO_ADDR
// end ;
11939: LD_VAR 0 2
11943: RET
// var jmm_zbabelec ; every 0 0$1 + 26 26$21 trigger tick >= time2go and ( tick >= combat_started ) and filterunitsinarea ( rubaserng , [ [ f_side , amer_reinf ] ] ) do var tmp ;
11944: LD_OWVAR 1
11948: PUSH
11949: LD_LOC 72
11953: GREATEREQUAL
11954: PUSH
11955: LD_OWVAR 1
11959: PUSH
11960: LD_LOC 73
11964: GREATEREQUAL
11965: AND
11966: PUSH
11967: LD_INT 7
11969: PPUSH
11970: LD_INT 22
11972: PUSH
11973: LD_EXP 3
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: PPUSH
11985: CALL_OW 70
11989: AND
11990: IFFALSE 12196
11992: GO 11994
11994: DISABLE
11995: LD_INT 0
11997: PPUSH
// begin dialogueon ;
11998: CALL_OW 6
// say ( amhsolda , D7-Sik-1 ) ;
12002: LD_EXP 26
12006: PPUSH
12007: LD_STRING D7-Sik-1
12009: PPUSH
12010: CALL_OW 88
// jmm_zbabelec = false ;
12014: LD_ADDR_LOC 74
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
// tmp = nearestunittounit ( filterallunits ( [ [ f_side , rus ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , john ) ;
12022: LD_ADDR_VAR 0 1
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_EXP 1
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 2
12041: PUSH
12042: LD_INT 21
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 21
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: PPUSH
12076: LD_EXP 17
12080: PPUSH
12081: CALL_OW 74
12085: ST_TO_ADDR
// if ( getdistunits ( john , amhsolda ) <= maxsikjmmdist ) or utoci ( john ) or ( getdistunits ( john , tmp ) <= maxsikjmmdist ) or isinarea ( john , rubaserng ) then
12086: LD_EXP 17
12090: PPUSH
12091: LD_EXP 26
12095: PPUSH
12096: CALL_OW 296
12100: PUSH
12101: LD_LOC 29
12105: LESSEQUAL
12106: PUSH
12107: LD_EXP 17
12111: PPUSH
12112: CALL 11823 0 1
12116: OR
12117: PUSH
12118: LD_EXP 17
12122: PPUSH
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 296
12132: PUSH
12133: LD_LOC 29
12137: LESSEQUAL
12138: OR
12139: PUSH
12140: LD_EXP 17
12144: PPUSH
12145: LD_INT 7
12147: PPUSH
12148: CALL_OW 308
12152: OR
12153: IFFALSE 12169
// say ( amhsolda , D7a-Sik-1 ) else
12155: LD_EXP 26
12159: PPUSH
12160: LD_STRING D7a-Sik-1
12162: PPUSH
12163: CALL_OW 88
12167: GO 12189
// begin say ( amhsolda , D7b-Sik-1 ) ;
12169: LD_EXP 26
12173: PPUSH
12174: LD_STRING D7b-Sik-1
12176: PPUSH
12177: CALL_OW 88
// jmm_zbabelec = true ;
12181: LD_ADDR_LOC 74
12185: PUSH
12186: LD_INT 1
12188: ST_TO_ADDR
// end ; dialogueoff ;
12189: CALL_OW 7
// enable ( 03 ) ;
12193: LD_INT 3
12195: ENABLE_MARKED
// end ;
12196: PPOPN 1
12198: END
// var countdist , totalatt ; every 0 0$0.3 marked 03 do var tmp ;
12199: GO 12201
12201: DISABLE
12202: LD_INT 0
12204: PPUSH
// begin if debug then
12205: LD_EXP 13
12209: IFFALSE 12230
// debug_strings = [ totalatt , countdist ] ;
12211: LD_ADDR_OWVAR 48
12215: PUSH
12216: LD_LOC 76
12220: PUSH
12221: LD_LOC 75
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: ST_TO_ADDR
// if retreat >= 0 then
12230: LD_EXP 5
12234: PUSH
12235: LD_INT 0
12237: GREATEREQUAL
12238: IFFALSE 12242
// exit ;
12240: GO 12400
// tmp = nearestunittounit ( filterallunits ( [ [ f_side , rus ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , john ) ;
12242: LD_ADDR_VAR 0 1
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_EXP 1
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 2
12261: PUSH
12262: LD_INT 21
12264: PUSH
12265: LD_INT 1
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 21
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: PPUSH
12296: LD_EXP 17
12300: PPUSH
12301: CALL_OW 74
12305: ST_TO_ADDR
// totalatt = totalatt + ( ( getdistunits ( john , amhsolda ) <= maxsikjmmdist ) or utoci ( john ) or ( getdistunits ( john , tmp ) <= maxsikjmmdist ) or isinarea ( john , rubaserng ) ) ;
12306: LD_ADDR_LOC 76
12310: PUSH
12311: LD_LOC 76
12315: PUSH
12316: LD_EXP 17
12320: PPUSH
12321: LD_EXP 26
12325: PPUSH
12326: CALL_OW 296
12330: PUSH
12331: LD_LOC 29
12335: LESSEQUAL
12336: PUSH
12337: LD_EXP 17
12341: PPUSH
12342: CALL 11823 0 1
12346: OR
12347: PUSH
12348: LD_EXP 17
12352: PPUSH
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL_OW 296
12362: PUSH
12363: LD_LOC 29
12367: LESSEQUAL
12368: OR
12369: PUSH
12370: LD_EXP 17
12374: PPUSH
12375: LD_INT 7
12377: PPUSH
12378: CALL_OW 308
12382: OR
12383: PLUS
12384: ST_TO_ADDR
// countdist = countdist + 1 ;
12385: LD_ADDR_LOC 75
12389: PUSH
12390: LD_LOC 75
12394: PUSH
12395: LD_INT 1
12397: PLUS
12398: ST_TO_ADDR
// enable ;
12399: ENABLE
// end ;
12400: PPOPN 1
12402: END
// on unitgoestored ( un ) do begin if ( getside ( un ) = rus ) and ( gettype ( un ) = unit_vehicle ) and ( getcontrol ( un ) = control_computer ) then
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 255
12412: PUSH
12413: LD_EXP 1
12417: EQUAL
12418: PUSH
12419: LD_VAR 0 1
12423: PPUSH
12424: CALL_OW 247
12428: PUSH
12429: LD_INT 2
12431: EQUAL
12432: AND
12433: PUSH
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 263
12443: PUSH
12444: LD_INT 3
12446: EQUAL
12447: AND
12448: IFFALSE 12479
// aiv_met = [ getx ( un ) , gety ( un ) ] ;
12450: LD_ADDR_LOC 25
12454: PUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 250
12464: PUSH
12465: LD_VAR 0 1
12469: PPUSH
12470: CALL_OW 251
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: ST_TO_ADDR
// end ;
12479: PPOPN 1
12481: END
// every 0 0$0.7 trigger aiv_met do var tmp1 , dc_time , tmp2 , sizes ;
12482: LD_LOC 25
12486: IFFALSE 13908
12488: GO 12490
12490: DISABLE
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// begin sizes = [ 5 , 7 , 10 , 14 , 20 , 50 ] ;
12497: LD_ADDR_VAR 0 4
12501: PUSH
12502: LD_INT 5
12504: PUSH
12505: LD_INT 7
12507: PUSH
12508: LD_INT 10
12510: PUSH
12511: LD_INT 14
12513: PUSH
12514: LD_INT 20
12516: PUSH
12517: LD_INT 50
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: ST_TO_ADDR
// dc_time = tick ;
12528: LD_ADDR_VAR 0 2
12532: PUSH
12533: LD_OWVAR 1
12537: ST_TO_ADDR
// if debug then
12538: LD_EXP 13
12542: IFFALSE 12553
// msg ( aiv_met ) ;
12544: LD_LOC 25
12548: PPUSH
12549: CALL_OW 100
// tmp2 = 1 ;
12553: LD_ADDR_VAR 0 3
12557: PUSH
12558: LD_INT 1
12560: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12561: LD_ADDR_VAR 0 1
12565: PUSH
12566: LD_INT 22
12568: PUSH
12569: LD_EXP 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 92
12580: PUSH
12581: LD_LOC 25
12585: PUSH
12586: LD_INT 1
12588: ARRAY
12589: PUSH
12590: LD_LOC 25
12594: PUSH
12595: LD_INT 2
12597: ARRAY
12598: PUSH
12599: LD_VAR 0 4
12603: PUSH
12604: LD_VAR 0 3
12608: ARRAY
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 23
12621: PUSH
12622: LD_INT 0
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 3
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: ST_TO_ADDR
// if not tmp1 then
12655: LD_VAR 0 1
12659: NOT
12660: IFFALSE 12764
// begin tmp2 = 2 ;
12662: LD_ADDR_VAR 0 3
12666: PUSH
12667: LD_INT 2
12669: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12670: LD_ADDR_VAR 0 1
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_EXP 2
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 92
12689: PUSH
12690: LD_LOC 25
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PUSH
12699: LD_LOC 25
12703: PUSH
12704: LD_INT 2
12706: ARRAY
12707: PUSH
12708: LD_VAR 0 4
12712: PUSH
12713: LD_VAR 0 3
12717: ARRAY
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 3
12727: PUSH
12728: LD_INT 23
12730: PUSH
12731: LD_INT 0
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 3
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 69
12763: ST_TO_ADDR
// end ; if not tmp1 then
12764: LD_VAR 0 1
12768: NOT
12769: IFFALSE 12873
// begin tmp2 = 3 ;
12771: LD_ADDR_VAR 0 3
12775: PUSH
12776: LD_INT 3
12778: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_EXP 2
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 92
12798: PUSH
12799: LD_LOC 25
12803: PUSH
12804: LD_INT 1
12806: ARRAY
12807: PUSH
12808: LD_LOC 25
12812: PUSH
12813: LD_INT 2
12815: ARRAY
12816: PUSH
12817: LD_VAR 0 4
12821: PUSH
12822: LD_VAR 0 3
12826: ARRAY
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 3
12836: PUSH
12837: LD_INT 23
12839: PUSH
12840: LD_INT 0
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 3
12849: PUSH
12850: LD_INT 21
12852: PUSH
12853: LD_INT 3
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: ST_TO_ADDR
// end ; if not tmp1 then
12873: LD_VAR 0 1
12877: NOT
12878: IFFALSE 12982
// begin tmp2 = 4 ;
12880: LD_ADDR_VAR 0 3
12884: PUSH
12885: LD_INT 4
12887: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12888: LD_ADDR_VAR 0 1
12892: PUSH
12893: LD_INT 22
12895: PUSH
12896: LD_EXP 2
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 92
12907: PUSH
12908: LD_LOC 25
12912: PUSH
12913: LD_INT 1
12915: ARRAY
12916: PUSH
12917: LD_LOC 25
12921: PUSH
12922: LD_INT 2
12924: ARRAY
12925: PUSH
12926: LD_VAR 0 4
12930: PUSH
12931: LD_VAR 0 3
12935: ARRAY
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 3
12945: PUSH
12946: LD_INT 23
12948: PUSH
12949: LD_INT 0
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 3
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 3
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// end ; if not tmp1 then
12982: LD_VAR 0 1
12986: NOT
12987: IFFALSE 13091
// begin tmp2 = 5 ;
12989: LD_ADDR_VAR 0 3
12993: PUSH
12994: LD_INT 5
12996: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12997: LD_ADDR_VAR 0 1
13001: PUSH
13002: LD_INT 22
13004: PUSH
13005: LD_EXP 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 92
13016: PUSH
13017: LD_LOC 25
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PUSH
13026: LD_LOC 25
13030: PUSH
13031: LD_INT 2
13033: ARRAY
13034: PUSH
13035: LD_VAR 0 4
13039: PUSH
13040: LD_VAR 0 3
13044: ARRAY
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 3
13054: PUSH
13055: LD_INT 23
13057: PUSH
13058: LD_INT 0
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 3
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PPUSH
13086: CALL_OW 69
13090: ST_TO_ADDR
// end ; if not tmp1 then
13091: LD_VAR 0 1
13095: NOT
13096: IFFALSE 13200
// begin tmp2 = 6 ;
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_INT 6
13105: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_EXP 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 92
13125: PUSH
13126: LD_LOC 25
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PUSH
13135: LD_LOC 25
13139: PUSH
13140: LD_INT 2
13142: ARRAY
13143: PUSH
13144: LD_VAR 0 4
13148: PUSH
13149: LD_VAR 0 3
13153: ARRAY
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: LD_INT 23
13166: PUSH
13167: LD_INT 0
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 3
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 3
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PPUSH
13195: CALL_OW 69
13199: ST_TO_ADDR
// end ; if not tmp1 then
13200: LD_VAR 0 1
13204: NOT
13205: IFFALSE 13270
// begin tmp2 = 7 ;
13207: LD_ADDR_VAR 0 3
13211: PUSH
13212: LD_INT 7
13214: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
13215: LD_ADDR_VAR 0 1
13219: PUSH
13220: LD_INT 22
13222: PUSH
13223: LD_EXP 2
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_INT 23
13237: PUSH
13238: LD_INT 0
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 3
13247: PUSH
13248: LD_INT 21
13250: PUSH
13251: LD_INT 3
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// end ; if tmp1 then
13270: LD_VAR 0 1
13274: IFFALSE 13908
// begin tmp1 = tmp1 [ 1 ] ;
13276: LD_ADDR_VAR 0 1
13280: PUSH
13281: LD_VAR 0 1
13285: PUSH
13286: LD_INT 1
13288: ARRAY
13289: ST_TO_ADDR
// case gettype ( tmp1 ) of unit_human :
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 247
13299: PUSH
13300: LD_INT 1
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13308
13306: GO 13321
13308: POP
// tmp1 = tmp1 ; unit_vehicle :
13309: LD_ADDR_VAR 0 1
13313: PUSH
13314: LD_VAR 0 1
13318: ST_TO_ADDR
13319: GO 13400
13321: LD_INT 2
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13397
13329: POP
// begin case getcontrol ( tmp1 ) of control_manual :
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 263
13339: PUSH
13340: LD_INT 1
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13366
13348: POP
// tmp1 = isdrivenby ( tmp1 ) ; control_remote :
13349: LD_ADDR_VAR 0 1
13353: PUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 311
13363: ST_TO_ADDR
13364: GO 13395
13366: LD_INT 2
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13392
13374: POP
// tmp1 = iscontroledby ( tmp1 ) ; else
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: LD_VAR 0 1
13384: PPUSH
13385: CALL_OW 312
13389: ST_TO_ADDR
13390: GO 13395
13392: POP
// exit ; end ;
13393: GO 13908
// end ; else
13395: GO 13400
13397: POP
// exit ; end ;
13398: GO 13908
// centernowonxy ( aiv_met [ 1 ] , aiv_met [ 2 ] ) ;
13400: LD_LOC 25
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PPUSH
13409: LD_LOC 25
13413: PUSH
13414: LD_INT 2
13416: ARRAY
13417: PPUSH
13418: CALL_OW 86
// wait ( 0 0$1 ) ;
13422: LD_INT 35
13424: PPUSH
13425: CALL_OW 67
// dialogueon ;
13429: CALL_OW 6
// if getsex ( tmp1 ) = sex_male then
13433: LD_VAR 0 1
13437: PPUSH
13438: CALL_OW 258
13442: PUSH
13443: LD_INT 1
13445: EQUAL
13446: IFFALSE 13462
// say ( tmp1 , DC-Sol1-1 ) else
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_STRING DC-Sol1-1
13455: PPUSH
13456: CALL_OW 88
13460: GO 13474
// say ( tmp1 , DC-FSol1-1 ) ;
13462: LD_VAR 0 1
13466: PPUSH
13467: LD_STRING DC-FSol1-1
13469: PPUSH
13470: CALL_OW 88
// if dc_time < ( return_time + 0 0$5 ) then
13474: LD_VAR 0 2
13478: PUSH
13479: LD_EXP 29
13483: PUSH
13484: LD_INT 175
13486: PLUS
13487: LESS
13488: IFFALSE 13504
// begin dialcb_delayed = true ;
13490: LD_ADDR_LOC 26
13494: PUSH
13495: LD_INT 1
13497: ST_TO_ADDR
// dialogueoff ;
13498: CALL_OW 7
// end else
13502: GO 13908
// begin if getsex ( tmp1 ) = sex_female then
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 258
13513: PUSH
13514: LD_INT 2
13516: EQUAL
13517: IFFALSE 13854
// begin if tmp2 <= 6 then
13519: LD_VAR 0 3
13523: PUSH
13524: LD_INT 6
13526: LESSEQUAL
13527: IFFALSE 13630
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_sex , sex_male ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john ] else
13529: LD_ADDR_VAR 0 1
13533: PUSH
13534: LD_INT 22
13536: PUSH
13537: LD_EXP 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 26
13548: PUSH
13549: LD_INT 1
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 92
13558: PUSH
13559: LD_LOC 25
13563: PUSH
13564: LD_INT 1
13566: ARRAY
13567: PUSH
13568: LD_LOC 25
13572: PUSH
13573: LD_INT 2
13575: ARRAY
13576: PUSH
13577: LD_VAR 0 4
13581: PUSH
13582: LD_VAR 0 3
13586: ARRAY
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: LD_INT 23
13599: PUSH
13600: LD_INT 0
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: PUSH
13619: LD_EXP 17
13623: PUSH
13624: EMPTY
13625: LIST
13626: DIFF
13627: ST_TO_ADDR
13628: GO 13690
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john ] ;
13630: LD_ADDR_VAR 0 1
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_EXP 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 26
13649: PUSH
13650: LD_INT 1
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 3
13659: PUSH
13660: LD_INT 23
13662: PUSH
13663: LD_INT 0
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 69
13680: PUSH
13681: LD_EXP 17
13685: PUSH
13686: EMPTY
13687: LIST
13688: DIFF
13689: ST_TO_ADDR
// while not tmp1 and ( tmp2 < 6 ) do
13690: LD_VAR 0 1
13694: NOT
13695: PUSH
13696: LD_VAR 0 3
13700: PUSH
13701: LD_INT 6
13703: LESS
13704: AND
13705: IFFALSE 13822
// begin tmp2 = tmp2 + 1 ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_VAR 0 3
13716: PUSH
13717: LD_INT 1
13719: PLUS
13720: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_sex , sex_male ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john ] ;
13721: LD_ADDR_VAR 0 1
13725: PUSH
13726: LD_INT 22
13728: PUSH
13729: LD_EXP 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 26
13740: PUSH
13741: LD_INT 1
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 92
13750: PUSH
13751: LD_LOC 25
13755: PUSH
13756: LD_INT 1
13758: ARRAY
13759: PUSH
13760: LD_LOC 25
13764: PUSH
13765: LD_INT 2
13767: ARRAY
13768: PUSH
13769: LD_VAR 0 4
13773: PUSH
13774: LD_VAR 0 3
13778: ARRAY
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 3
13788: PUSH
13789: LD_INT 23
13791: PUSH
13792: LD_INT 0
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: LD_EXP 17
13815: PUSH
13816: EMPTY
13817: LIST
13818: DIFF
13819: ST_TO_ADDR
// end ;
13820: GO 13690
// if tmp1 then
13822: LD_VAR 0 1
13826: IFFALSE 13844
// tmp1 = tmp1 [ 1 ] else
13828: LD_ADDR_VAR 0 1
13832: PUSH
13833: LD_VAR 0 1
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: ST_TO_ADDR
13842: GO 13854
// tmp1 = john ;
13844: LD_ADDR_VAR 0 1
13848: PUSH
13849: LD_EXP 17
13853: ST_TO_ADDR
// end ; say ( john , DCb-JMM-1 ) ;
13854: LD_EXP 17
13858: PPUSH
13859: LD_STRING DCb-JMM-1
13861: PPUSH
13862: CALL_OW 88
// say ( tmp1 , DCb-Sol1-1 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_STRING DCb-Sol1-1
13873: PPUSH
13874: CALL_OW 88
// say ( john , DCb-JMM-2 ) ;
13878: LD_EXP 17
13882: PPUSH
13883: LD_STRING DCb-JMM-2
13885: PPUSH
13886: CALL_OW 88
// dialogueoff ;
13890: CALL_OW 7
// wait ( 0 0$0.5 ) ;
13894: LD_INT 18
13896: PPUSH
13897: CALL_OW 67
// hint ( ComputerCapturing ) ;
13901: LD_STRING ComputerCapturing
13903: PPUSH
13904: CALL_OW 339
// end ; end ; end ;
13908: PPOPN 4
13910: END
// every 0 0$1 trigger unitfilter ( filterallunits ( [ [ f_side , rus ] , [ f_ok ] ] ) , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) <= 7 do
13911: LD_INT 22
13913: PUSH
13914: LD_EXP 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 50
13925: PUSH
13926: EMPTY
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PPUSH
13933: CALL_OW 69
13937: PPUSH
13938: LD_INT 2
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 21
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 72
13970: PUSH
13971: LD_INT 7
13973: LESSEQUAL
13974: IFFALSE 14169
13976: GO 13978
13978: DISABLE
// begin retreat = 5 ;
13979: LD_ADDR_EXP 5
13983: PUSH
13984: LD_INT 5
13986: ST_TO_ADDR
// disable ( 17 ) ;
13987: LD_INT 17
13989: DISABLE_MARKED
// commovetoarea ( filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , ar_exit ) ;
13990: LD_INT 22
13992: PUSH
13993: LD_EXP 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 50
14004: PUSH
14005: EMPTY
14006: LIST
14007: PUSH
14008: LD_INT 2
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 1
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 21
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: PPUSH
14046: LD_INT 16
14048: PPUSH
14049: CALL_OW 113
// changesidefog ( rus , amer ) ;
14053: LD_EXP 1
14057: PPUSH
14058: LD_EXP 2
14062: PPUSH
14063: CALL_OW 343
// setattitude ( rus , amer , att_friend , false ) ;
14067: LD_EXP 1
14071: PPUSH
14072: LD_EXP 2
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: LD_INT 0
14082: PPUSH
14083: CALL_OW 80
// commovetoarea ( filterunitsexceptarea ( dropzone , [ [ f_or , [ f_side , amer ] , [ f_side , amer_reinf ] ] , [ f_ok ] ] ) , ar_exit_AM ) ;
14087: LD_INT 6
14089: PPUSH
14090: LD_INT 2
14092: PUSH
14093: LD_INT 22
14095: PUSH
14096: LD_EXP 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 22
14107: PUSH
14108: LD_EXP 3
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 50
14124: PUSH
14125: EMPTY
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 71
14136: PPUSH
14137: LD_INT 18
14139: PPUSH
14140: CALL_OW 113
// ingame_video = true ;
14144: LD_ADDR_OWVAR 52
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// interface_hidden = true ;
14152: LD_ADDR_OWVAR 54
14156: PUSH
14157: LD_INT 1
14159: ST_TO_ADDR
// centeronunits ( zbytek ) ;
14160: LD_LOC 77
14164: PPUSH
14165: CALL_OW 85
// end ;
14169: END
// var zbytek ; var i , pompoc ; every 0 0$0.7 do var zbytek2 ;
14170: GO 14172
14172: DISABLE
14173: LD_INT 0
14175: PPUSH
// begin case retreat of - 1 :
14176: LD_EXP 5
14180: PUSH
14181: LD_INT 1
14183: NEG
14184: DOUBLE
14185: EQUAL
14186: IFTRUE 14190
14188: GO 14194
14190: POP
// begin enable ;
14191: ENABLE
// end ; 4 :
14192: GO 14538
14194: LD_INT 4
14196: DOUBLE
14197: EQUAL
14198: IFTRUE 14202
14200: GO 14450
14202: POP
// begin pompoc = pompoc + 1 ;
14203: LD_ADDR_LOC 79
14207: PUSH
14208: LD_LOC 79
14212: PUSH
14213: LD_INT 1
14215: PLUS
14216: ST_TO_ADDR
// zbytek = filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) ;
14217: LD_ADDR_LOC 77
14221: PUSH
14222: LD_INT 22
14224: PUSH
14225: LD_EXP 1
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 50
14236: PUSH
14237: EMPTY
14238: LIST
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 2
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 59
14268: PUSH
14269: EMPTY
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: ST_TO_ADDR
// zbytek2 = filterunitsinarea ( ar_exit , [ [ f_side , rus ] , [ f_ok ] ] ) ;
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 16
14299: PPUSH
14300: LD_INT 22
14302: PUSH
14303: LD_EXP 1
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 50
14314: PUSH
14315: EMPTY
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 70
14326: ST_TO_ADDR
// zbytek = zbytek diff zbytek2 ;
14327: LD_ADDR_LOC 77
14331: PUSH
14332: LD_LOC 77
14336: PUSH
14337: LD_VAR 0 1
14341: DIFF
14342: ST_TO_ADDR
// for i in zbytek2 do
14343: LD_ADDR_LOC 78
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: FOR_IN
14354: IFFALSE 14367
// destroyunit ( i ) ;
14356: LD_LOC 78
14360: PPUSH
14361: CALL_OW 65
14365: GO 14353
14367: POP
14368: POP
// if zbytek then
14369: LD_LOC 77
14373: IFFALSE 14432
// begin centeronunits ( zbytek ) ;
14375: LD_LOC 77
14379: PPUSH
14380: CALL_OW 85
// enable ;
14384: ENABLE
// if pompoc = 3 then
14385: LD_LOC 79
14389: PUSH
14390: LD_INT 3
14392: EQUAL
14393: IFFALSE 14430
// begin commovetoarea ( zbytek , ar_exit ) ;
14395: LD_LOC 77
14399: PPUSH
14400: LD_INT 16
14402: PPUSH
14403: CALL_OW 113
// addcommovexy ( zbytek , 126 , 98 ) ;
14407: LD_LOC 77
14411: PPUSH
14412: LD_INT 126
14414: PPUSH
14415: LD_INT 98
14417: PPUSH
14418: CALL_OW 171
// pompoc = 0 ;
14422: LD_ADDR_LOC 79
14426: PUSH
14427: LD_INT 0
14429: ST_TO_ADDR
// end end else
14430: GO 14448
// begin ingame_video = false ;
14432: LD_ADDR_OWVAR 52
14436: PUSH
14437: LD_INT 0
14439: ST_TO_ADDR
// interface_hidden = false ;
14440: LD_ADDR_OWVAR 54
14444: PUSH
14445: LD_INT 0
14447: ST_TO_ADDR
// end ; end ; else
14448: GO 14538
14450: POP
// begin disable ( 17 ) ;
14451: LD_INT 17
14453: DISABLE_MARKED
// zbytek = filterunitsinarea ( ar_exit , [ [ f_side , rus ] , [ f_ok ] ] ) ;
14454: LD_ADDR_LOC 77
14458: PUSH
14459: LD_INT 16
14461: PPUSH
14462: LD_INT 22
14464: PUSH
14465: LD_EXP 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 50
14476: PUSH
14477: EMPTY
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PPUSH
14484: CALL_OW 70
14488: ST_TO_ADDR
// for i in zbytek do
14489: LD_ADDR_LOC 78
14493: PUSH
14494: LD_LOC 77
14498: PUSH
14499: FOR_IN
14500: IFFALSE 14513
// destroyunit ( i ) ;
14502: LD_LOC 78
14506: PPUSH
14507: CALL_OW 65
14511: GO 14499
14513: POP
14514: POP
// retreat = retreat - 1 ;
14515: LD_ADDR_EXP 5
14519: PUSH
14520: LD_EXP 5
14524: PUSH
14525: LD_INT 1
14527: MINUS
14528: ST_TO_ADDR
// pompoc = 0 ;
14529: LD_ADDR_LOC 79
14533: PUSH
14534: LD_INT 0
14536: ST_TO_ADDR
// enable ;
14537: ENABLE
// end ; end ; end ;
14538: PPOPN 1
14540: END
// every 0 0$1 + 1 1$0 trigger not filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
14541: LD_INT 22
14543: PUSH
14544: LD_EXP 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 50
14555: PUSH
14556: EMPTY
14557: LIST
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: PPUSH
14574: CALL_OW 69
14578: NOT
14579: IFFALSE 14842
14581: GO 14583
14583: DISABLE
// begin exclusiveon ;
14584: CALL_OW 4
// stop_action = true ;
14588: LD_ADDR_OWVAR 55
14592: PUSH
14593: LD_INT 1
14595: ST_TO_ADDR
// if ( totalatt * 5 ) < countdist then
14596: LD_LOC 76
14600: PUSH
14601: LD_INT 5
14603: MUL
14604: PUSH
14605: LD_LOC 75
14609: LESS
14610: IFFALSE 14651
// if islive ( amhsolda ) then
14612: LD_EXP 26
14616: PPUSH
14617: CALL_OW 300
14621: IFFALSE 14637
// sayradio ( powel , D8b-Pow-1 ) else
14623: LD_EXP 16
14627: PPUSH
14628: LD_STRING D8b-Pow-1
14630: PPUSH
14631: CALL_OW 94
14635: GO 14649
// sayradio ( powel , D8a-Pow-1 ) else
14637: LD_EXP 16
14641: PPUSH
14642: LD_STRING D8a-Pow-1
14644: PPUSH
14645: CALL_OW 94
14649: GO 14674
// if islive ( amhsolda ) then
14651: LD_EXP 26
14655: PPUSH
14656: CALL_OW 300
14660: IFFALSE 14674
// say ( amhsolda , D9-Sik-1 ) ;
14662: LD_EXP 26
14666: PPUSH
14667: LD_STRING D9-Sik-1
14669: PPUSH
14670: CALL_OW 88
// stop_action = false ;
14674: LD_ADDR_OWVAR 55
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// exclusiveoff ;
14682: CALL_OW 5
// wait ( 0 0$0.5 ) ;
14686: LD_INT 18
14688: PPUSH
14689: CALL_OW 67
// if ( totalatt * 5 ) < countdist then
14693: LD_LOC 76
14697: PUSH
14698: LD_INT 5
14700: MUL
14701: PUSH
14702: LD_LOC 75
14706: LESS
14707: IFFALSE 14718
// youlost ( Dismissed ) else
14709: LD_STRING Dismissed
14711: PPUSH
14712: CALL_OW 104
14716: GO 14842
// begin addmedal ( nothing1 , 1 ) ;
14718: LD_STRING nothing1
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 101
// addmedal ( nothing2 , 1 ) ;
14728: LD_STRING nothing2
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: CALL_OW 101
// addmedal ( perfect , 1 ) ;
14738: LD_STRING perfect
14740: PPUSH
14741: LD_INT 1
14743: PPUSH
14744: CALL_OW 101
// SA_EndMission ( 1 , 8 , true , true , true ) ;
14748: LD_INT 1
14750: PPUSH
14751: LD_INT 8
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: CALL 25722 0 5
// givemedals ( Main ) ;
14767: LD_STRING Main
14769: PPUSH
14770: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , amer ] , [ f_type , unit_human ] , [ f_not , [ f_nation , nation_nature ] ] ] ) ) ;
14774: LD_INT 51
14776: PUSH
14777: EMPTY
14778: LIST
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_EXP 2
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 21
14794: PUSH
14795: LD_INT 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 3
14804: PUSH
14805: LD_INT 23
14807: PUSH
14808: LD_INT 0
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PPUSH
14825: CALL_OW 69
14829: PPUSH
14830: CALL_OW 43
// saveitall ;
14834: CALL 16479 0 0
// youwin ;
14838: CALL_OW 103
// end ; end ;
14842: END
// every 0 0$1 trigger john and not islive ( john ) do
14843: LD_EXP 17
14847: PUSH
14848: LD_EXP 17
14852: PPUSH
14853: CALL_OW 300
14857: NOT
14858: AND
14859: IFFALSE 14878
14861: GO 14863
14863: DISABLE
// begin wait ( 0 0$1 ) ;
14864: LD_INT 35
14866: PPUSH
14867: CALL_OW 67
// youlost ( JMM ) ;
14871: LD_STRING JMM
14873: PPUSH
14874: CALL_OW 104
// end ;
14878: END
// every 0 0$1 + 3 trigger not filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] , f_not , [ f_nation , nation_nature ] ] ) do
14879: LD_INT 22
14881: PUSH
14882: LD_EXP 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 50
14903: PUSH
14904: EMPTY
14905: LIST
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: LD_INT 23
14912: PUSH
14913: LD_INT 0
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL_OW 69
14931: NOT
14932: IFFALSE 14944
14934: GO 14936
14936: DISABLE
// youlost ( Destroyed ) ;
14937: LD_STRING Destroyed
14939: PPUSH
14940: CALL_OW 104
14944: END
// every 0 0$3 + 30 30$1 trigger sikishere and ( tick > combat_started ) do var tmp , tmq ;
14945: LD_LOC 27
14949: PUSH
14950: LD_OWVAR 1
14954: PUSH
14955: LD_LOC 73
14959: GREATER
14960: AND
14961: IFFALSE 15064
14963: GO 14965
14965: DISABLE
14966: LD_INT 0
14968: PPUSH
14969: PPUSH
// begin tmq = true ;
14970: LD_ADDR_VAR 0 2
14974: PUSH
14975: LD_INT 1
14977: ST_TO_ADDR
// for tmp in reinf_us do
14978: LD_ADDR_VAR 0 1
14982: PUSH
14983: LD_LOC 71
14987: PUSH
14988: FOR_IN
14989: IFFALSE 15026
// tmq = tmq and ( not islive ( tmp ) or isdying ( tmp ) ) ;
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_VAR 0 2
15000: PUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 300
15010: NOT
15011: PUSH
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL_OW 303
15021: OR
15022: AND
15023: ST_TO_ADDR
15024: GO 14988
15026: POP
15027: POP
// if tmq then
15028: LD_VAR 0 2
15032: IFFALSE 15063
// begin dialogueon ;
15034: CALL_OW 6
// sayradio ( powel , D8c-Pow-1 ) ;
15038: LD_EXP 16
15042: PPUSH
15043: LD_STRING D8c-Pow-1
15045: PPUSH
15046: CALL_OW 94
// dialogueoff ;
15050: CALL_OW 7
// youlost ( Dismissed ) ;
15054: LD_STRING Dismissed
15056: PPUSH
15057: CALL_OW 104
// end else
15061: GO 15064
// enable ;
15063: ENABLE
// end ;
15064: PPOPN 2
15066: END
// every 0 0$1 trigger not filterallunits ( [ [ f_side , amer ] , [ f_type , unit_building ] ] ) do
15067: LD_INT 22
15069: PUSH
15070: LD_EXP 2
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 21
15081: PUSH
15082: LD_INT 3
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: NOT
15098: IFFALSE 15117
15100: GO 15102
15102: DISABLE
// begin wait ( 0 0$3 ) ;
15103: LD_INT 105
15105: PPUSH
15106: CALL_OW 67
// youlost ( Destroyed ) ;
15110: LD_STRING Destroyed
15112: PPUSH
15113: CALL_OW 104
// end ;
15117: END
// on Command ( com ) do var i , j , temp , x , y , typeTask ;
15118: LD_INT 0
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , amer ] , [ f_type , unit_human ] ] ) do
15126: LD_ADDR_VAR 0 2
15130: PUSH
15131: LD_INT 22
15133: PUSH
15134: LD_EXP 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 21
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PPUSH
15157: CALL_OW 69
15161: PUSH
15162: FOR_IN
15163: IFFALSE 15369
// if GetTaskList ( i ) > 0 then
15165: LD_VAR 0 2
15169: PPUSH
15170: CALL_OW 437
15174: PUSH
15175: LD_INT 0
15177: GREATER
15178: IFFALSE 15367
// for j = 1 to GetTaskList ( i ) do
15180: LD_ADDR_VAR 0 3
15184: PUSH
15185: DOUBLE
15186: LD_INT 1
15188: DEC
15189: ST_TO_ADDR
15190: LD_VAR 0 2
15194: PPUSH
15195: CALL_OW 437
15199: PUSH
15200: FOR_TO
15201: IFFALSE 15365
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
15203: LD_ADDR_VAR 0 4
15207: PUSH
15208: LD_VAR 0 2
15212: PPUSH
15213: CALL_OW 437
15217: PUSH
15218: LD_VAR 0 3
15222: ARRAY
15223: PUSH
15224: LD_INT 4
15226: ARRAY
15227: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
15228: LD_ADDR_VAR 0 5
15232: PUSH
15233: LD_VAR 0 2
15237: PPUSH
15238: CALL_OW 437
15242: PUSH
15243: LD_VAR 0 3
15247: ARRAY
15248: PUSH
15249: LD_INT 2
15251: ARRAY
15252: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 437
15267: PUSH
15268: LD_VAR 0 3
15272: ARRAY
15273: PUSH
15274: LD_INT 3
15276: ARRAY
15277: ST_TO_ADDR
// typeTask = GetTaskList ( i ) [ j ] [ 1 ] ;
15278: LD_ADDR_VAR 0 7
15282: PUSH
15283: LD_VAR 0 2
15287: PPUSH
15288: CALL_OW 437
15292: PUSH
15293: LD_VAR 0 3
15297: ARRAY
15298: PUSH
15299: LD_INT 1
15301: ARRAY
15302: ST_TO_ADDR
// if x > 0 and y > 0 and typeTask = B and InArea ( x , y , BlockBuildArea ) then
15303: LD_VAR 0 5
15307: PUSH
15308: LD_INT 0
15310: GREATER
15311: PUSH
15312: LD_VAR 0 6
15316: PUSH
15317: LD_INT 0
15319: GREATER
15320: AND
15321: PUSH
15322: LD_VAR 0 7
15326: PUSH
15327: LD_STRING B
15329: EQUAL
15330: AND
15331: PUSH
15332: LD_VAR 0 5
15336: PPUSH
15337: LD_VAR 0 6
15341: PPUSH
15342: LD_INT 19
15344: PPUSH
15345: CALL_OW 309
15349: AND
15350: IFFALSE 15363
// SetTaskList ( i , [ ] ) ;
15352: LD_VAR 0 2
15356: PPUSH
15357: EMPTY
15358: PPUSH
15359: CALL_OW 446
// end ;
15363: GO 15200
15365: POP
15366: POP
15367: GO 15162
15369: POP
15370: POP
// end ;
15371: PPOPN 7
15373: END
// function return_am ; var pom ; begin
15374: LD_INT 0
15376: PPUSH
15377: PPUSH
// pom = FilterUnitsInArea ( ar_exit , [ [ f_side , amer ] ] ) ;
15378: LD_ADDR_VAR 0 2
15382: PUSH
15383: LD_INT 16
15385: PPUSH
15386: LD_INT 22
15388: PUSH
15389: LD_EXP 2
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: EMPTY
15399: LIST
15400: PPUSH
15401: CALL_OW 70
15405: ST_TO_ADDR
// ComMoveToArea ( pom , ar_exit_AM ) ;
15406: LD_VAR 0 2
15410: PPUSH
15411: LD_INT 18
15413: PPUSH
15414: CALL_OW 113
// end ;
15418: LD_VAR 0 1
15422: RET
// every 0 0$1 do var pom ;
15423: GO 15425
15425: DISABLE
15426: LD_INT 0
15428: PPUSH
// begin pom = FilterUnitsInArea ( ar_exit , [ [ f_side , amer ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
15429: LD_ADDR_VAR 0 1
15433: PUSH
15434: LD_INT 16
15436: PPUSH
15437: LD_INT 22
15439: PUSH
15440: LD_EXP 2
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 2
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 21
15464: PUSH
15465: LD_INT 1
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 70
15485: ST_TO_ADDR
// if pom > 0 then
15486: LD_VAR 0 1
15490: PUSH
15491: LD_INT 0
15493: GREATER
15494: IFFALSE 15500
// begin return_am ;
15496: CALL 15374 0 0
// end ; enable ;
15500: ENABLE
// end ; end_of_file
15501: PPOPN 1
15503: END
// var healeri_mimo ; function healeri_mimo_rb ; begin
15504: LD_INT 0
15506: PPUSH
// healeri_mimo = healeri diff filterunitsinarea ( repairbay , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
15507: LD_ADDR_LOC 80
15511: PUSH
15512: LD_EXP 12
15516: PUSH
15517: LD_INT 5
15519: PPUSH
15520: LD_INT 21
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 50
15532: PUSH
15533: EMPTY
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 70
15544: DIFF
15545: ST_TO_ADDR
// result = healeri_mimo ;
15546: LD_ADDR_VAR 0 1
15550: PUSH
15551: LD_LOC 80
15555: ST_TO_ADDR
// end ;
15556: LD_VAR 0 1
15560: RET
// every 0 0$0.9 trigger healeri_mimo_rb marked 17 do
15561: CALL 15504 0 0
15565: IFFALSE 15598
15567: GO 15569
15569: DISABLE
// begin if retreat >= 0 then
15570: LD_EXP 5
15574: PUSH
15575: LD_INT 0
15577: GREATEREQUAL
15578: IFFALSE 15582
// exit ;
15580: GO 15598
// commovexy ( healeri_mimo , 84 , 90 ) ;
15582: LD_LOC 80
15586: PPUSH
15587: LD_INT 84
15589: PPUSH
15590: LD_INT 90
15592: PPUSH
15593: CALL_OW 111
// enable ;
15597: ENABLE
// end ;
15598: END
// var poskoz_ ; var kn_ ; every 0 0$0.7 do
15599: GO 15601
15601: DISABLE
// begin if retreat >= 0 then
15602: LD_EXP 5
15606: PUSH
15607: LD_INT 0
15609: GREATEREQUAL
15610: IFFALSE 15614
// exit ;
15612: GO 15824
// poskoz_ = unitfilter ( rusove0 , [ [ f_type , unit_vehicle ] ] ) ;
15614: LD_ADDR_LOC 81
15618: PUSH
15619: LD_EXP 14
15623: PPUSH
15624: LD_INT 21
15626: PUSH
15627: LD_INT 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: PPUSH
15637: CALL_OW 72
15641: ST_TO_ADDR
// for kn_ in poskoz_ do
15642: LD_ADDR_LOC 82
15646: PUSH
15647: LD_LOC 81
15651: PUSH
15652: FOR_IN
15653: IFFALSE 15709
// begin if getlives ( kn_ ) <= hr_auta then
15655: LD_LOC 82
15659: PPUSH
15660: CALL_OW 256
15664: PUSH
15665: LD_EXP 9
15669: LESSEQUAL
15670: IFFALSE 15707
// begin rusove0 = rusove0 diff kn_ ;
15672: LD_ADDR_EXP 14
15676: PUSH
15677: LD_EXP 14
15681: PUSH
15682: LD_LOC 82
15686: DIFF
15687: ST_TO_ADDR
// poskoz = poskoz ^ [ kn_ ] ;
15688: LD_ADDR_EXP 6
15692: PUSH
15693: LD_EXP 6
15697: PUSH
15698: LD_LOC 82
15702: PUSH
15703: EMPTY
15704: LIST
15705: ADD
15706: ST_TO_ADDR
// end ; end ;
15707: GO 15652
15709: POP
15710: POP
// poskoz_ = unitfilter ( rusove0 , [ [ f_type , unit_human ] ] ) ;
15711: LD_ADDR_LOC 81
15715: PUSH
15716: LD_EXP 14
15720: PPUSH
15721: LD_INT 21
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: PPUSH
15734: CALL_OW 72
15738: ST_TO_ADDR
// for kn_ in poskoz_ do
15739: LD_ADDR_LOC 82
15743: PUSH
15744: LD_LOC 81
15748: PUSH
15749: FOR_IN
15750: IFFALSE 15806
// begin if getlives ( kn_ ) <= hr_lidi then
15752: LD_LOC 82
15756: PPUSH
15757: CALL_OW 256
15761: PUSH
15762: LD_EXP 8
15766: LESSEQUAL
15767: IFFALSE 15804
// begin rusove0 = rusove0 diff kn_ ;
15769: LD_ADDR_EXP 14
15773: PUSH
15774: LD_EXP 14
15778: PUSH
15779: LD_LOC 82
15783: DIFF
15784: ST_TO_ADDR
// poskoz = poskoz ^ [ kn_ ] ;
15785: LD_ADDR_EXP 6
15789: PUSH
15790: LD_EXP 6
15794: PUSH
15795: LD_LOC 82
15799: PUSH
15800: EMPTY
15801: LIST
15802: ADD
15803: ST_TO_ADDR
// end ; end ;
15804: GO 15749
15806: POP
15807: POP
// commovexy ( poskoz , 86 , 92 ) ;
15808: LD_EXP 6
15812: PPUSH
15813: LD_INT 86
15815: PPUSH
15816: LD_INT 92
15818: PPUSH
15819: CALL_OW 111
// enable ;
15823: ENABLE
// end ;
15824: END
// var pom_rupo ; var driver ; var kn__ ; every 0 0$1.5 do var poskpom , p95 ;
15825: GO 15827
15827: DISABLE
15828: LD_INT 0
15830: PPUSH
15831: PPUSH
// begin if retreat >= 0 then
15832: LD_EXP 5
15836: PUSH
15837: LD_INT 0
15839: GREATEREQUAL
15840: IFFALSE 15844
// exit ;
15842: GO 16375
// poskpom = poskoz ;
15844: LD_ADDR_VAR 0 1
15848: PUSH
15849: LD_EXP 6
15853: ST_TO_ADDR
// poskoz = [ ] ;
15854: LD_ADDR_EXP 6
15858: PUSH
15859: EMPTY
15860: ST_TO_ADDR
// for p95 in poskpom do
15861: LD_ADDR_VAR 0 2
15865: PUSH
15866: LD_VAR 0 1
15870: PUSH
15871: FOR_IN
15872: IFFALSE 15906
// if islive ( p95 ) then
15874: LD_VAR 0 2
15878: PPUSH
15879: CALL_OW 300
15883: IFFALSE 15904
// poskoz = poskoz ^ [ p95 ] ;
15885: LD_ADDR_EXP 6
15889: PUSH
15890: LD_EXP 6
15894: PUSH
15895: LD_VAR 0 2
15899: PUSH
15900: EMPTY
15901: LIST
15902: ADD
15903: ST_TO_ADDR
15904: GO 15871
15906: POP
15907: POP
// pom_rupo = filterunitsinarea ( repairbay , [ [ f_side , rus ] , [ f_type , unit_vehicle ] ] ) isect poskoz ;
15908: LD_ADDR_LOC 83
15912: PUSH
15913: LD_INT 5
15915: PPUSH
15916: LD_INT 22
15918: PUSH
15919: LD_EXP 1
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 70
15946: PUSH
15947: LD_EXP 6
15951: ISECT
15952: ST_TO_ADDR
// for kn__ in pom_rupo do
15953: LD_ADDR_LOC 85
15957: PUSH
15958: LD_LOC 83
15962: PUSH
15963: FOR_IN
15964: IFFALSE 16174
// begin driver = isdrivenby ( kn__ ) ;
15966: LD_ADDR_LOC 84
15970: PUSH
15971: LD_LOC 85
15975: PPUSH
15976: CALL_OW 311
15980: ST_TO_ADDR
// if driver then
15981: LD_LOC 84
15985: IFFALSE 16107
// begin comhold ( driver ) ;
15987: LD_LOC 84
15991: PPUSH
15992: CALL_OW 140
// setfuel ( kn__ , 100 ) ;
15996: LD_LOC 85
16000: PPUSH
16001: LD_INT 100
16003: PPUSH
16004: CALL_OW 240
// comexitvehicle ( kn__ ) ;
16008: LD_LOC 85
16012: PPUSH
16013: CALL_OW 121
// wait ( 0 0$0.5 ) ;
16017: LD_INT 18
16019: PPUSH
16020: CALL_OW 67
// addcomrepairvehicle ( [ driver ] , kn__ ) ;
16024: LD_LOC 84
16028: PUSH
16029: EMPTY
16030: LIST
16031: PPUSH
16032: LD_LOC 85
16036: PPUSH
16037: CALL_OW 189
// addcommoveunit ( [ driver ] , kn__ ) ;
16041: LD_LOC 84
16045: PUSH
16046: EMPTY
16047: LIST
16048: PPUSH
16049: LD_LOC 85
16053: PPUSH
16054: CALL_OW 172
// addcomfree ( driver ) ;
16058: LD_LOC 84
16062: PPUSH
16063: CALL_OW 199
// poskoz = poskoz diff [ kn__ ] ;
16067: LD_ADDR_EXP 6
16071: PUSH
16072: LD_EXP 6
16076: PUSH
16077: LD_LOC 85
16081: PUSH
16082: EMPTY
16083: LIST
16084: DIFF
16085: ST_TO_ADDR
// rusove0 = rusove0 ^ [ kn__ ] ;
16086: LD_ADDR_EXP 14
16090: PUSH
16091: LD_EXP 14
16095: PUSH
16096: LD_LOC 85
16100: PUSH
16101: EMPTY
16102: LIST
16103: ADD
16104: ST_TO_ADDR
// end else
16105: GO 16172
// if unitfilter ( [ kn__ ] , [ [ f_control , control_computer ] ] ) then
16107: LD_LOC 85
16111: PUSH
16112: EMPTY
16113: LIST
16114: PPUSH
16115: LD_INT 33
16117: PUSH
16118: LD_INT 3
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: PPUSH
16128: CALL_OW 72
16132: IFFALSE 16172
// begin poskoz = poskoz diff [ kn__ ] ;
16134: LD_ADDR_EXP 6
16138: PUSH
16139: LD_EXP 6
16143: PUSH
16144: LD_LOC 85
16148: PUSH
16149: EMPTY
16150: LIST
16151: DIFF
16152: ST_TO_ADDR
// pacienti = pacienti ^ [ kn__ ] ;
16153: LD_ADDR_EXP 7
16157: PUSH
16158: LD_EXP 7
16162: PUSH
16163: LD_LOC 85
16167: PUSH
16168: EMPTY
16169: LIST
16170: ADD
16171: ST_TO_ADDR
// end ; end ;
16172: GO 15963
16174: POP
16175: POP
// pom_rupo = filterunitsinarea ( repairbay , [ [ f_side , rus ] , [ f_type , unit_human ] ] ) isect poskoz ;
16176: LD_ADDR_LOC 83
16180: PUSH
16181: LD_INT 5
16183: PPUSH
16184: LD_INT 22
16186: PUSH
16187: LD_EXP 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 70
16214: PUSH
16215: LD_EXP 6
16219: ISECT
16220: ST_TO_ADDR
// for kn__ in pom_rupo do
16221: LD_ADDR_LOC 85
16225: PUSH
16226: LD_LOC 83
16230: PUSH
16231: FOR_IN
16232: IFFALSE 16274
// begin poskoz = poskoz diff [ kn__ ] ;
16234: LD_ADDR_EXP 6
16238: PUSH
16239: LD_EXP 6
16243: PUSH
16244: LD_LOC 85
16248: PUSH
16249: EMPTY
16250: LIST
16251: DIFF
16252: ST_TO_ADDR
// pacienti = pacienti ^ [ kn__ ] ;
16253: LD_ADDR_EXP 7
16257: PUSH
16258: LD_EXP 7
16262: PUSH
16263: LD_LOC 85
16267: PUSH
16268: EMPTY
16269: LIST
16270: ADD
16271: ST_TO_ADDR
// end ;
16272: GO 16231
16274: POP
16275: POP
// for kn__ in pacienti do
16276: LD_ADDR_LOC 85
16280: PUSH
16281: LD_EXP 7
16285: PUSH
16286: FOR_IN
16287: IFFALSE 16344
// begin if getlives ( kn__ ) >= 950 then
16289: LD_LOC 85
16293: PPUSH
16294: CALL_OW 256
16298: PUSH
16299: LD_INT 950
16301: GREATEREQUAL
16302: IFFALSE 16342
// begin pacienti = pacienti diff [ kn__ ] ;
16304: LD_ADDR_EXP 7
16308: PUSH
16309: LD_EXP 7
16313: PUSH
16314: LD_LOC 85
16318: PUSH
16319: EMPTY
16320: LIST
16321: DIFF
16322: ST_TO_ADDR
// rusove0 = rusove0 ^ [ kn__ ] ;
16323: LD_ADDR_EXP 14
16327: PUSH
16328: LD_EXP 14
16332: PUSH
16333: LD_LOC 85
16337: PUSH
16338: EMPTY
16339: LIST
16340: ADD
16341: ST_TO_ADDR
// end ; end ;
16342: GO 16286
16344: POP
16345: POP
// if pacienti >= 1 then
16346: LD_EXP 7
16350: PUSH
16351: LD_INT 1
16353: GREATEREQUAL
16354: IFFALSE 16374
// comheal ( healeri , pacienti [ 1 ] ) ;
16356: LD_EXP 12
16360: PPUSH
16361: LD_EXP 7
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PPUSH
16370: CALL_OW 128
// enable ;
16374: ENABLE
// end ;
16375: PPOPN 2
16377: END
// on vehiclecaptured ( newid , oldid , origside , cptrdby ) do if origside = rus then
16378: LD_VAR 0 3
16382: PUSH
16383: LD_EXP 1
16387: EQUAL
16388: IFFALSE 16428
// begin rusove0 = rusove0 diff [ oldid ] ;
16390: LD_ADDR_EXP 14
16394: PUSH
16395: LD_EXP 14
16399: PUSH
16400: LD_VAR 0 2
16404: PUSH
16405: EMPTY
16406: LIST
16407: DIFF
16408: ST_TO_ADDR
// poskoz = poskoz diff [ oldid ] ;
16409: LD_ADDR_EXP 6
16413: PUSH
16414: LD_EXP 6
16418: PUSH
16419: LD_VAR 0 2
16423: PUSH
16424: EMPTY
16425: LIST
16426: DIFF
16427: ST_TO_ADDR
// end ; end_of_file
16428: PPOPN 4
16430: END
// export rh , powel ; export john ; export lisa , frank , john_ ; export cyrus , bobby , denis , yamoko ; export amhsold0 , amhsolda ; export posilya , posilyb ; export return_time , return_time_ ; export lucy , brown , vanh , glad , joan ; export lisaloc , frankloc , cyrusloc , bobbyloc , denisloc , yamokoloc , lucyloc , brownloc , gladloc , joanloc ; export gamma2commander ; var time ; var othergamma2 , othergamma3 , otherunplaced , otherjmm , otherlatejmm ; var gamma2vip , gamma3vip , withjmmvip , withjmmlatevip ; var gamma2 ; var ambctwr0 ; function pouzit ( un ) ; begin
16431: LD_INT 0
16433: PPUSH
// result = ( un in posilya ) or ( un in posilyb ) or ( un in smejdi ) ;
16434: LD_ADDR_VAR 0 2
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: LD_EXP 27
16448: IN
16449: PUSH
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 28
16459: IN
16460: OR
16461: PUSH
16462: LD_VAR 0 1
16466: PUSH
16467: LD_LOC 98
16471: IN
16472: OR
16473: ST_TO_ADDR
// end ;
16474: LD_VAR 0 2
16478: RET
// export function saveitall ; var tmz , bz , tmzo ; begin
16479: LD_INT 0
16481: PPUSH
16482: PPUSH
16483: PPUSH
16484: PPUSH
// if john then
16485: LD_EXP 17
16489: IFFALSE 16505
// savecharacters ( john , JMM ) else
16491: LD_EXP 17
16495: PPUSH
16496: LD_STRING JMM
16498: PPUSH
16499: CALL_OW 38
16503: GO 16517
// savecharacters ( john_ , JMM ) ;
16505: LD_EXP 20
16509: PPUSH
16510: LD_STRING JMM
16512: PPUSH
16513: CALL_OW 38
// savecharacters ( [ ] , Harisson ) ;
16517: EMPTY
16518: PPUSH
16519: LD_STRING Harisson
16521: PPUSH
16522: CALL_OW 38
// deletecharacters ( Harisson ) ;
16526: LD_STRING Harisson
16528: PPUSH
16529: CALL_OW 40
// if cyrus then
16533: LD_EXP 21
16537: IFFALSE 16607
// begin savecharacters ( cyrus , Cyrus ) ;
16539: LD_EXP 21
16543: PPUSH
16544: LD_STRING Cyrus
16546: PPUSH
16547: CALL_OW 38
// if isdead ( cyrus ) then
16551: LD_EXP 21
16555: PPUSH
16556: CALL_OW 301
16560: IFFALSE 16574
// savevariable ( 0 , CyrusLoc ) else
16562: LD_INT 0
16564: PPUSH
16565: LD_STRING CyrusLoc
16567: PPUSH
16568: CALL_OW 39
16572: GO 16607
// if pouzit ( cyrus ) or ( cyrus in withjmmlatevip ) then
16574: LD_EXP 21
16578: PPUSH
16579: CALL 16431 0 1
16583: PUSH
16584: LD_EXP 21
16588: PUSH
16589: LD_LOC 95
16593: IN
16594: OR
16595: IFFALSE 16607
// savevariable ( 2 , CyrusLoc ) ;
16597: LD_INT 2
16599: PPUSH
16600: LD_STRING CyrusLoc
16602: PPUSH
16603: CALL_OW 39
// end ; if bobby then
16607: LD_EXP 22
16611: IFFALSE 16681
// begin savecharacters ( bobby , Bobby ) ;
16613: LD_EXP 22
16617: PPUSH
16618: LD_STRING Bobby
16620: PPUSH
16621: CALL_OW 38
// if isdead ( bobby ) then
16625: LD_EXP 22
16629: PPUSH
16630: CALL_OW 301
16634: IFFALSE 16648
// savevariable ( 0 , BobbyLoc ) else
16636: LD_INT 0
16638: PPUSH
16639: LD_STRING BobbyLoc
16641: PPUSH
16642: CALL_OW 39
16646: GO 16681
// if pouzit ( bobby ) or ( bobby in withjmmlatevip ) then
16648: LD_EXP 22
16652: PPUSH
16653: CALL 16431 0 1
16657: PUSH
16658: LD_EXP 22
16662: PUSH
16663: LD_LOC 95
16667: IN
16668: OR
16669: IFFALSE 16681
// savevariable ( 2 , BobbyLoc ) ;
16671: LD_INT 2
16673: PPUSH
16674: LD_STRING BobbyLoc
16676: PPUSH
16677: CALL_OW 39
// end ; if lisa then
16681: LD_EXP 18
16685: IFFALSE 16755
// begin savecharacters ( lisa , Lisa ) ;
16687: LD_EXP 18
16691: PPUSH
16692: LD_STRING Lisa
16694: PPUSH
16695: CALL_OW 38
// if isdead ( lisa ) then
16699: LD_EXP 18
16703: PPUSH
16704: CALL_OW 301
16708: IFFALSE 16722
// savevariable ( 0 , LisaLoc ) else
16710: LD_INT 0
16712: PPUSH
16713: LD_STRING LisaLoc
16715: PPUSH
16716: CALL_OW 39
16720: GO 16755
// if pouzit ( lisa ) or ( lisa in withjmmlatevip ) then
16722: LD_EXP 18
16726: PPUSH
16727: CALL 16431 0 1
16731: PUSH
16732: LD_EXP 18
16736: PUSH
16737: LD_LOC 95
16741: IN
16742: OR
16743: IFFALSE 16755
// savevariable ( 2 , LisaLoc ) ;
16745: LD_INT 2
16747: PPUSH
16748: LD_STRING LisaLoc
16750: PPUSH
16751: CALL_OW 39
// end ; if frank then
16755: LD_EXP 19
16759: IFFALSE 16829
// begin savecharacters ( frank , Frank ) ;
16761: LD_EXP 19
16765: PPUSH
16766: LD_STRING Frank
16768: PPUSH
16769: CALL_OW 38
// if isdead ( frank ) then
16773: LD_EXP 19
16777: PPUSH
16778: CALL_OW 301
16782: IFFALSE 16796
// savevariable ( 0 , FrankLoc ) else
16784: LD_INT 0
16786: PPUSH
16787: LD_STRING FrankLoc
16789: PPUSH
16790: CALL_OW 39
16794: GO 16829
// if pouzit ( frank ) or ( frank in withjmmlatevip ) then
16796: LD_EXP 19
16800: PPUSH
16801: CALL 16431 0 1
16805: PUSH
16806: LD_EXP 19
16810: PUSH
16811: LD_LOC 95
16815: IN
16816: OR
16817: IFFALSE 16829
// savevariable ( 2 , FrankLoc ) ;
16819: LD_INT 2
16821: PPUSH
16822: LD_STRING FrankLoc
16824: PPUSH
16825: CALL_OW 39
// end ; if lucy then
16829: LD_EXP 31
16833: IFFALSE 16903
// begin savecharacters ( lucy , Donaldson ) ;
16835: LD_EXP 31
16839: PPUSH
16840: LD_STRING Donaldson
16842: PPUSH
16843: CALL_OW 38
// if isdead ( lucy ) then
16847: LD_EXP 31
16851: PPUSH
16852: CALL_OW 301
16856: IFFALSE 16870
// savevariable ( 0 , DonaldsonLoc ) else
16858: LD_INT 0
16860: PPUSH
16861: LD_STRING DonaldsonLoc
16863: PPUSH
16864: CALL_OW 39
16868: GO 16903
// if pouzit ( lucy ) or ( lucy in withjmmlatevip ) then
16870: LD_EXP 31
16874: PPUSH
16875: CALL 16431 0 1
16879: PUSH
16880: LD_EXP 31
16884: PUSH
16885: LD_LOC 95
16889: IN
16890: OR
16891: IFFALSE 16903
// savevariable ( 2 , DonaldsonLoc ) ;
16893: LD_INT 2
16895: PPUSH
16896: LD_STRING DonaldsonLoc
16898: PPUSH
16899: CALL_OW 39
// end ; if brown then
16903: LD_EXP 32
16907: IFFALSE 16977
// begin savecharacters ( brown , Brown ) ;
16909: LD_EXP 32
16913: PPUSH
16914: LD_STRING Brown
16916: PPUSH
16917: CALL_OW 38
// if isdead ( brown ) then
16921: LD_EXP 32
16925: PPUSH
16926: CALL_OW 301
16930: IFFALSE 16944
// savevariable ( 0 , BrownLoc ) else
16932: LD_INT 0
16934: PPUSH
16935: LD_STRING BrownLoc
16937: PPUSH
16938: CALL_OW 39
16942: GO 16977
// if pouzit ( brown ) or ( brown in withjmmlatevip ) then
16944: LD_EXP 32
16948: PPUSH
16949: CALL 16431 0 1
16953: PUSH
16954: LD_EXP 32
16958: PUSH
16959: LD_LOC 95
16963: IN
16964: OR
16965: IFFALSE 16977
// savevariable ( 2 , BrownLoc ) ;
16967: LD_INT 2
16969: PPUSH
16970: LD_STRING BrownLoc
16972: PPUSH
16973: CALL_OW 39
// end ; if denis then
16977: LD_EXP 23
16981: IFFALSE 17051
// begin savecharacters ( denis , Denis ) ;
16983: LD_EXP 23
16987: PPUSH
16988: LD_STRING Denis
16990: PPUSH
16991: CALL_OW 38
// if isdead ( denis ) then
16995: LD_EXP 23
16999: PPUSH
17000: CALL_OW 301
17004: IFFALSE 17018
// savevariable ( 0 , DenisLoc ) else
17006: LD_INT 0
17008: PPUSH
17009: LD_STRING DenisLoc
17011: PPUSH
17012: CALL_OW 39
17016: GO 17051
// if pouzit ( denis ) or ( denis in withjmmlatevip ) then
17018: LD_EXP 23
17022: PPUSH
17023: CALL 16431 0 1
17027: PUSH
17028: LD_EXP 23
17032: PUSH
17033: LD_LOC 95
17037: IN
17038: OR
17039: IFFALSE 17051
// savevariable ( 2 , DenisLoc ) ;
17041: LD_INT 2
17043: PPUSH
17044: LD_STRING DenisLoc
17046: PPUSH
17047: CALL_OW 39
// end ; if joan then
17051: LD_EXP 35
17055: IFFALSE 17102
// begin savecharacters ( joan , Joan ) ;
17057: LD_EXP 35
17061: PPUSH
17062: LD_STRING Joan
17064: PPUSH
17065: CALL_OW 38
// if isdead ( joan ) then
17069: LD_EXP 35
17073: PPUSH
17074: CALL_OW 301
17078: IFFALSE 17092
// savevariable ( 0 , JoanLoc ) else
17080: LD_INT 0
17082: PPUSH
17083: LD_STRING JoanLoc
17085: PPUSH
17086: CALL_OW 39
17090: GO 17102
// savevariable ( 2 , JoanLoc ) ;
17092: LD_INT 2
17094: PPUSH
17095: LD_STRING JoanLoc
17097: PPUSH
17098: CALL_OW 39
// end ; if glad then
17102: LD_EXP 34
17106: IFFALSE 17176
// begin savecharacters ( glad , Gladstone ) ;
17108: LD_EXP 34
17112: PPUSH
17113: LD_STRING Gladstone
17115: PPUSH
17116: CALL_OW 38
// if isdead ( glad ) then
17120: LD_EXP 34
17124: PPUSH
17125: CALL_OW 301
17129: IFFALSE 17143
// savevariable ( 0 , GladstoneLoc ) else
17131: LD_INT 0
17133: PPUSH
17134: LD_STRING GladstoneLoc
17136: PPUSH
17137: CALL_OW 39
17141: GO 17176
// if pouzit ( glad ) or ( glad in withjmmlatevip ) then
17143: LD_EXP 34
17147: PPUSH
17148: CALL 16431 0 1
17152: PUSH
17153: LD_EXP 34
17157: PUSH
17158: LD_LOC 95
17162: IN
17163: OR
17164: IFFALSE 17176
// savevariable ( 2 , GladstoneLoc ) ;
17166: LD_INT 2
17168: PPUSH
17169: LD_STRING GladstoneLoc
17171: PPUSH
17172: CALL_OW 39
// end ; if not frank then
17176: LD_EXP 19
17180: NOT
17181: IFFALSE 17257
// if yamoko then
17183: LD_EXP 24
17187: IFFALSE 17257
// begin savecharacters ( yamoko , Yamoko ) ;
17189: LD_EXP 24
17193: PPUSH
17194: LD_STRING Yamoko
17196: PPUSH
17197: CALL_OW 38
// if isdead ( yamoko ) then
17201: LD_EXP 24
17205: PPUSH
17206: CALL_OW 301
17210: IFFALSE 17224
// savevariable ( 0 , YamokoLoc ) else
17212: LD_INT 0
17214: PPUSH
17215: LD_STRING YamokoLoc
17217: PPUSH
17218: CALL_OW 39
17222: GO 17257
// if pouzit ( yamoko ) or ( yamoko in withjmmlatevip ) then
17224: LD_EXP 24
17228: PPUSH
17229: CALL 16431 0 1
17233: PUSH
17234: LD_EXP 24
17238: PUSH
17239: LD_LOC 95
17243: IN
17244: OR
17245: IFFALSE 17257
// savevariable ( 2 , YamokoLoc ) ;
17247: LD_INT 2
17249: PPUSH
17250: LD_STRING YamokoLoc
17252: PPUSH
17253: CALL_OW 39
// end ; savecharacters ( amhsolda , Sikorski ) ;
17257: LD_EXP 26
17261: PPUSH
17262: LD_STRING Sikorski
17264: PPUSH
17265: CALL_OW 38
// if isdead ( amhsolda ) then
17269: LD_EXP 26
17273: PPUSH
17274: CALL_OW 301
17278: IFFALSE 17292
// savevariable ( 0 , SikorskiLoc ) else
17280: LD_INT 0
17282: PPUSH
17283: LD_STRING SikorskiLoc
17285: PPUSH
17286: CALL_OW 39
17290: GO 17302
// savevariable ( 2 , SikorskiLoc ) ;
17292: LD_INT 2
17294: PPUSH
17295: LD_STRING SikorskiLoc
17297: PPUSH
17298: CALL_OW 39
// savecharacters ( vanh , VanHouten ) ;
17302: LD_EXP 33
17306: PPUSH
17307: LD_STRING VanHouten
17309: PPUSH
17310: CALL_OW 38
// if gamma2commander = 3 then
17314: LD_EXP 46
17318: PUSH
17319: LD_INT 3
17321: EQUAL
17322: IFFALSE 17359
// if isdead ( vanh ) then
17324: LD_EXP 33
17328: PPUSH
17329: CALL_OW 301
17333: IFFALSE 17347
// savevariable ( 0 , VanHoutenLoc ) else
17335: LD_INT 0
17337: PPUSH
17338: LD_STRING VanHoutenLoc
17340: PPUSH
17341: CALL_OW 39
17345: GO 17357
// savevariable ( 2 , VanHoutenLoc ) else
17347: LD_INT 2
17349: PPUSH
17350: LD_STRING VanHoutenLoc
17352: PPUSH
17353: CALL_OW 39
17357: GO 17369
// savevariable ( 0 , VanHoutenLoc ) ;
17359: LD_INT 0
17361: PPUSH
17362: LD_STRING VanHoutenLoc
17364: PPUSH
17365: CALL_OW 39
// tmz = filterallunits ( [ [ f_alive ] , [ f_side , amer ] , [ f_type , unit_human ] ] ) diff [ john , cyrus , bobby , lisa , frank , lucy , brown , denis , joan , glad , yamoko , amhsolda , vanh ] ;
17369: LD_ADDR_VAR 0 2
17373: PUSH
17374: LD_INT 51
17376: PUSH
17377: EMPTY
17378: LIST
17379: PUSH
17380: LD_INT 22
17382: PUSH
17383: LD_EXP 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 21
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: PPUSH
17407: CALL_OW 69
17411: PUSH
17412: LD_EXP 17
17416: PUSH
17417: LD_EXP 21
17421: PUSH
17422: LD_EXP 22
17426: PUSH
17427: LD_EXP 18
17431: PUSH
17432: LD_EXP 19
17436: PUSH
17437: LD_EXP 31
17441: PUSH
17442: LD_EXP 32
17446: PUSH
17447: LD_EXP 23
17451: PUSH
17452: LD_EXP 35
17456: PUSH
17457: LD_EXP 34
17461: PUSH
17462: LD_EXP 24
17466: PUSH
17467: LD_EXP 26
17471: PUSH
17472: LD_EXP 33
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: DIFF
17492: ST_TO_ADDR
// tmz = unitfilter ( tmz , [ f_not , [ f_nation , nation_nature ] ] ) ;
17493: LD_ADDR_VAR 0 2
17497: PUSH
17498: LD_VAR 0 2
17502: PPUSH
17503: LD_INT 3
17505: PUSH
17506: LD_INT 23
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PPUSH
17520: CALL_OW 72
17524: ST_TO_ADDR
// savecharacters ( tmz union ( othergamma2 ^ othergamma3 ^ otherunplaced ^ otherjmm ^ otherlatejmm ) , otherGamma2 ) ;
17525: LD_VAR 0 2
17529: PUSH
17530: LD_LOC 87
17534: PUSH
17535: LD_LOC 88
17539: ADD
17540: PUSH
17541: LD_LOC 89
17545: ADD
17546: PUSH
17547: LD_LOC 90
17551: ADD
17552: PUSH
17553: LD_LOC 91
17557: ADD
17558: UNION
17559: PPUSH
17560: LD_STRING otherGamma2
17562: PPUSH
17563: CALL_OW 38
// savecharacters ( [ ] , otherDelta ) ;
17567: EMPTY
17568: PPUSH
17569: LD_STRING otherDelta
17571: PPUSH
17572: CALL_OW 38
// savecharacters ( [ ] , otherUnplaced ) ;
17576: EMPTY
17577: PPUSH
17578: LD_STRING otherUnplaced
17580: PPUSH
17581: CALL_OW 38
// savecharacters ( [ ] , otherJMM ) ;
17585: EMPTY
17586: PPUSH
17587: LD_STRING otherJMM
17589: PPUSH
17590: CALL_OW 38
// savecharacters ( [ ] , otherLateJMM ) ;
17594: EMPTY
17595: PPUSH
17596: LD_STRING otherLateJMM
17598: PPUSH
17599: CALL_OW 38
// tmz = filterallunits ( [ [ f_side , amer ] , [ f_nation , nation_american ] , [ f_btype , b_factory ] ] ) ;
17603: LD_ADDR_VAR 0 2
17607: PUSH
17608: LD_INT 22
17610: PUSH
17611: LD_EXP 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 23
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 30
17632: PUSH
17633: LD_INT 3
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: PPUSH
17645: CALL_OW 69
17649: ST_TO_ADDR
// tmz = tmz ^ filterallunits ( [ [ f_side , amer ] , [ f_nation , nation_american ] , [ f_type , unit_building ] , f_not , [ f_btype , b_factory ] ] ) ;
17650: LD_ADDR_VAR 0 2
17654: PUSH
17655: LD_VAR 0 2
17659: PUSH
17660: LD_INT 22
17662: PUSH
17663: LD_EXP 2
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 23
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 21
17684: PUSH
17685: LD_INT 3
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 3
17694: PUSH
17695: LD_INT 30
17697: PUSH
17698: LD_INT 3
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: PPUSH
17712: CALL_OW 69
17716: ADD
17717: ST_TO_ADDR
// tmzo = [ ] ;
17718: LD_ADDR_VAR 0 4
17722: PUSH
17723: EMPTY
17724: ST_TO_ADDR
// for bz in tmz do
17725: LD_ADDR_VAR 0 3
17729: PUSH
17730: LD_VAR 0 2
17734: PUSH
17735: FOR_IN
17736: IFFALSE 18093
// case getbtype ( bz ) of b_lab_basic , b_lab_weapon :
17738: LD_VAR 0 3
17742: PPUSH
17743: CALL_OW 266
17747: PUSH
17748: LD_INT 9
17750: DOUBLE
17751: EQUAL
17752: IFTRUE 17762
17754: LD_INT 10
17756: DOUBLE
17757: EQUAL
17758: IFTRUE 17762
17760: GO 17765
17762: POP
// begin end ; b_lab , b_lab_half , b_lab_full :
17763: GO 18091
17765: LD_INT 6
17767: DOUBLE
17768: EQUAL
17769: IFTRUE 17785
17771: LD_INT 7
17773: DOUBLE
17774: EQUAL
17775: IFTRUE 17785
17777: LD_INT 8
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 17898
17785: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getlabkind ( bz , 1 ) , getlabkind ( bz , 2 ) ] ] ; b_bunker , b_turret :
17786: LD_ADDR_VAR 0 4
17790: PUSH
17791: LD_VAR 0 4
17795: PUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: CALL_OW 250
17805: PUSH
17806: LD_VAR 0 3
17810: PPUSH
17811: CALL_OW 251
17815: PUSH
17816: LD_VAR 0 3
17820: PPUSH
17821: CALL_OW 254
17825: PUSH
17826: LD_VAR 0 3
17830: PPUSH
17831: CALL_OW 266
17835: PUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: CALL_OW 267
17845: PUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: CALL_OW 248
17855: PUSH
17856: LD_VAR 0 3
17860: PPUSH
17861: LD_INT 1
17863: PPUSH
17864: CALL_OW 268
17868: PUSH
17869: LD_VAR 0 3
17873: PPUSH
17874: LD_INT 2
17876: PPUSH
17877: CALL_OW 268
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: ADD
17895: ST_TO_ADDR
17896: GO 18091
17898: LD_INT 32
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17912
17904: LD_INT 33
17906: DOUBLE
17907: EQUAL
17908: IFTRUE 17912
17910: GO 18008
17912: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getbweapon ( bz ) ] ] ; else
17913: LD_ADDR_VAR 0 4
17917: PUSH
17918: LD_VAR 0 4
17922: PUSH
17923: LD_VAR 0 3
17927: PPUSH
17928: CALL_OW 250
17932: PUSH
17933: LD_VAR 0 3
17937: PPUSH
17938: CALL_OW 251
17942: PUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: CALL_OW 254
17952: PUSH
17953: LD_VAR 0 3
17957: PPUSH
17958: CALL_OW 266
17962: PUSH
17963: LD_VAR 0 3
17967: PPUSH
17968: CALL_OW 267
17972: PUSH
17973: LD_VAR 0 3
17977: PPUSH
17978: CALL_OW 248
17982: PUSH
17983: LD_VAR 0 3
17987: PPUSH
17988: CALL_OW 269
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: ADD
18005: ST_TO_ADDR
18006: GO 18091
18008: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) ] ] ; end ;
18009: LD_ADDR_VAR 0 4
18013: PUSH
18014: LD_VAR 0 4
18018: PUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: CALL_OW 250
18028: PUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 251
18038: PUSH
18039: LD_VAR 0 3
18043: PPUSH
18044: CALL_OW 254
18048: PUSH
18049: LD_VAR 0 3
18053: PPUSH
18054: CALL_OW 266
18058: PUSH
18059: LD_VAR 0 3
18063: PPUSH
18064: CALL_OW 267
18068: PUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: CALL_OW 248
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: ADD
18090: ST_TO_ADDR
18091: GO 17735
18093: POP
18094: POP
// savevariable ( tmzo , Gamma2 ) ;
18095: LD_VAR 0 4
18099: PPUSH
18100: LD_STRING Gamma2
18102: PPUSH
18103: CALL_OW 39
// end ;
18107: LD_VAR 0 1
18111: RET
// var smejdi ; var zbytci ; export function from_prev_mis ; var tmp , tmp1 , tmz , tmz_ , tm_c , tm_e , tm_m , tm_s , tmp_c , tmp_e , tmp_m , tmp_s , tot , lab_done , retry ; var smery ; begin
18112: LD_INT 0
18114: PPUSH
18115: PPUSH
18116: PPUSH
18117: PPUSH
18118: PPUSH
18119: PPUSH
18120: PPUSH
18121: PPUSH
18122: PPUSH
18123: PPUSH
18124: PPUSH
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
18129: PPUSH
18130: PPUSH
// uc_side = amer ;
18131: LD_ADDR_OWVAR 20
18135: PUSH
18136: LD_EXP 2
18140: ST_TO_ADDR
// uc_nation = nation_american ;
18141: LD_ADDR_OWVAR 21
18145: PUSH
18146: LD_INT 1
18148: ST_TO_ADDR
// return_time = 0 0$1 ;
18149: LD_ADDR_EXP 29
18153: PUSH
18154: LD_INT 35
18156: ST_TO_ADDR
// return_time_ = 0 0$1 ;
18157: LD_ADDR_EXP 30
18161: PUSH
18162: LD_INT 35
18164: ST_TO_ADDR
// othergamma2 = [ ] ;
18165: LD_ADDR_LOC 87
18169: PUSH
18170: EMPTY
18171: ST_TO_ADDR
// othergamma3 = [ ] ;
18172: LD_ADDR_LOC 88
18176: PUSH
18177: EMPTY
18178: ST_TO_ADDR
// otherunplaced = [ ] ;
18179: LD_ADDR_LOC 89
18183: PUSH
18184: EMPTY
18185: ST_TO_ADDR
// otherjmm = [ ] ;
18186: LD_ADDR_LOC 90
18190: PUSH
18191: EMPTY
18192: ST_TO_ADDR
// gamma2vip = [ ] ;
18193: LD_ADDR_LOC 92
18197: PUSH
18198: EMPTY
18199: ST_TO_ADDR
// gamma3vip = [ ] ;
18200: LD_ADDR_LOC 93
18204: PUSH
18205: EMPTY
18206: ST_TO_ADDR
// withjmmvip = [ ] ;
18207: LD_ADDR_LOC 94
18211: PUSH
18212: EMPTY
18213: ST_TO_ADDR
// withjmmlatevip = [ ] ;
18214: LD_ADDR_LOC 95
18218: PUSH
18219: EMPTY
18220: ST_TO_ADDR
// time = loadvariable ( Time , - 1 ) ;
18221: LD_ADDR_LOC 86
18225: PUSH
18226: LD_STRING Time
18228: PPUSH
18229: LD_INT 1
18231: NEG
18232: PPUSH
18233: CALL_OW 30
18237: ST_TO_ADDR
// if time = - 1 then
18238: LD_LOC 86
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: EQUAL
18247: IFFALSE 18264
// buildquery ( neny Time , [ OK ] ) else
18249: LD_STRING neny Time
18251: PPUSH
18252: LD_STRING OK
18254: PUSH
18255: EMPTY
18256: LIST
18257: PPUSH
18258: CALL_OW 99
18262: GO 18320
// begin if time > 14 14$50 then
18264: LD_LOC 86
18268: PUSH
18269: LD_INT 31150
18271: GREATER
18272: IFFALSE 18282
// time = 14 14$50 ;
18274: LD_ADDR_LOC 86
18278: PUSH
18279: LD_INT 31150
18281: ST_TO_ADDR
// if time < 0 0$30 then
18282: LD_LOC 86
18286: PUSH
18287: LD_INT 1050
18289: LESS
18290: IFFALSE 18300
// time = 1 1$30 ;
18292: LD_ADDR_LOC 86
18296: PUSH
18297: LD_INT 3150
18299: ST_TO_ADDR
// return_time = time ;
18300: LD_ADDR_EXP 29
18304: PUSH
18305: LD_LOC 86
18309: ST_TO_ADDR
// return_time_ = time ;
18310: LD_ADDR_EXP 30
18314: PUSH
18315: LD_LOC 86
18319: ST_TO_ADDR
// end ; gamma2 = loadvariable ( Gamma2 , [ ] ) ;
18320: LD_ADDR_LOC 96
18324: PUSH
18325: LD_STRING Gamma2
18327: PPUSH
18328: EMPTY
18329: PPUSH
18330: CALL_OW 30
18334: ST_TO_ADDR
// if gamma2 = 0 then
18335: LD_LOC 96
18339: PUSH
18340: LD_INT 0
18342: EQUAL
18343: IFFALSE 18367
// buildquery ( [ neny Gamma2 , Gamma2 ] , [ OK ] ) ;
18345: LD_STRING neny Gamma2
18347: PUSH
18348: LD_LOC 96
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PPUSH
18357: LD_STRING OK
18359: PUSH
18360: EMPTY
18361: LIST
18362: PPUSH
18363: CALL_OW 99
// lab_done = false ;
18367: LD_ADDR_VAR 0 15
18371: PUSH
18372: LD_INT 0
18374: ST_TO_ADDR
// retry = [ ] ;
18375: LD_ADDR_VAR 0 16
18379: PUSH
18380: EMPTY
18381: ST_TO_ADDR
// for tmp in gamma2 do
18382: LD_ADDR_VAR 0 2
18386: PUSH
18387: LD_LOC 96
18391: PUSH
18392: FOR_IN
18393: IFFALSE 18966
// begin if tmp [ 1 ] = 38 and tmp [ 2 ] = 3 then
18395: LD_VAR 0 2
18399: PUSH
18400: LD_INT 1
18402: ARRAY
18403: PUSH
18404: LD_INT 38
18406: EQUAL
18407: PUSH
18408: LD_VAR 0 2
18412: PUSH
18413: LD_INT 2
18415: ARRAY
18416: PUSH
18417: LD_INT 3
18419: EQUAL
18420: AND
18421: IFFALSE 18425
// else
18423: GO 18964
// if tmp [ 1 ] = 40 and tmp [ 2 ] = 11 then
18425: LD_VAR 0 2
18429: PUSH
18430: LD_INT 1
18432: ARRAY
18433: PUSH
18434: LD_INT 40
18436: EQUAL
18437: PUSH
18438: LD_VAR 0 2
18442: PUSH
18443: LD_INT 2
18445: ARRAY
18446: PUSH
18447: LD_INT 11
18449: EQUAL
18450: AND
18451: IFFALSE 18455
// else
18453: GO 18964
// if tmp [ 1 ] = 52 and tmp [ 2 ] = 12 then
18455: LD_VAR 0 2
18459: PUSH
18460: LD_INT 1
18462: ARRAY
18463: PUSH
18464: LD_INT 52
18466: EQUAL
18467: PUSH
18468: LD_VAR 0 2
18472: PUSH
18473: LD_INT 2
18475: ARRAY
18476: PUSH
18477: LD_INT 12
18479: EQUAL
18480: AND
18481: IFFALSE 18485
// else
18483: GO 18964
// if tmp [ 4 ] = b_breastwork or tmp [ 4 ] = b_bunker or tmp [ 4 ] = b_factory or tmp [ 4 ] = b_workshop or tmp [ 4 ] = b_depot or tmp [ 4 ] = b_warehouse then
18485: LD_VAR 0 2
18489: PUSH
18490: LD_INT 4
18492: ARRAY
18493: PUSH
18494: LD_INT 31
18496: EQUAL
18497: PUSH
18498: LD_VAR 0 2
18502: PUSH
18503: LD_INT 4
18505: ARRAY
18506: PUSH
18507: LD_INT 32
18509: EQUAL
18510: OR
18511: PUSH
18512: LD_VAR 0 2
18516: PUSH
18517: LD_INT 4
18519: ARRAY
18520: PUSH
18521: LD_INT 3
18523: EQUAL
18524: OR
18525: PUSH
18526: LD_VAR 0 2
18530: PUSH
18531: LD_INT 4
18533: ARRAY
18534: PUSH
18535: LD_INT 2
18537: EQUAL
18538: OR
18539: PUSH
18540: LD_VAR 0 2
18544: PUSH
18545: LD_INT 4
18547: ARRAY
18548: PUSH
18549: LD_INT 0
18551: EQUAL
18552: OR
18553: PUSH
18554: LD_VAR 0 2
18558: PUSH
18559: LD_INT 4
18561: ARRAY
18562: PUSH
18563: LD_INT 1
18565: EQUAL
18566: OR
18567: IFFALSE 18571
// else
18569: GO 18964
// if ( tmp [ 4 ] = b_lab or tmp [ 4 ] = b_lab_half or tmp [ 4 ] = b_lab_full ) and not lab_done then
18571: LD_VAR 0 2
18575: PUSH
18576: LD_INT 4
18578: ARRAY
18579: PUSH
18580: LD_INT 6
18582: EQUAL
18583: PUSH
18584: LD_VAR 0 2
18588: PUSH
18589: LD_INT 4
18591: ARRAY
18592: PUSH
18593: LD_INT 7
18595: EQUAL
18596: OR
18597: PUSH
18598: LD_VAR 0 2
18602: PUSH
18603: LD_INT 4
18605: ARRAY
18606: PUSH
18607: LD_INT 8
18609: EQUAL
18610: OR
18611: PUSH
18612: LD_VAR 0 15
18616: NOT
18617: AND
18618: IFFALSE 18746
// begin uc_direction = tmp [ 3 ] ;
18620: LD_ADDR_OWVAR 24
18624: PUSH
18625: LD_VAR 0 2
18629: PUSH
18630: LD_INT 3
18632: ARRAY
18633: ST_TO_ADDR
// bc_type = b_lab_full ;
18634: LD_ADDR_OWVAR 42
18638: PUSH
18639: LD_INT 8
18641: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
18642: LD_ADDR_OWVAR 43
18646: PUSH
18647: LD_VAR 0 2
18651: PUSH
18652: LD_INT 5
18654: ARRAY
18655: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
18656: LD_ADDR_OWVAR 44
18660: PUSH
18661: LD_INT 10
18663: ST_TO_ADDR
// bc_kind2 = b_lab_opto ;
18664: LD_ADDR_OWVAR 45
18668: PUSH
18669: LD_INT 15
18671: ST_TO_ADDR
// tmp1 = createbuilding ;
18672: LD_ADDR_VAR 0 3
18676: PUSH
18677: CALL_OW 46
18681: ST_TO_ADDR
// if not placeunitxy ( tmp1 , tmp [ 1 ] , tmp [ 2 ] , false ) then
18682: LD_VAR 0 3
18686: PPUSH
18687: LD_VAR 0 2
18691: PUSH
18692: LD_INT 1
18694: ARRAY
18695: PPUSH
18696: LD_VAR 0 2
18700: PUSH
18701: LD_INT 2
18703: ARRAY
18704: PPUSH
18705: LD_INT 0
18707: PPUSH
18708: CALL_OW 48
18712: NOT
18713: IFFALSE 18736
// retry = retry ^ [ tmp ] else
18715: LD_ADDR_VAR 0 16
18719: PUSH
18720: LD_VAR 0 16
18724: PUSH
18725: LD_VAR 0 2
18729: PUSH
18730: EMPTY
18731: LIST
18732: ADD
18733: ST_TO_ADDR
18734: GO 18744
// lab_done = true ;
18736: LD_ADDR_VAR 0 15
18740: PUSH
18741: LD_INT 1
18743: ST_TO_ADDR
// end else
18744: GO 18964
// if tmp [ 4 ] = b_armoury then
18746: LD_VAR 0 2
18750: PUSH
18751: LD_INT 4
18753: ARRAY
18754: PUSH
18755: LD_INT 4
18757: EQUAL
18758: IFFALSE 18860
// begin uc_direction = tmp [ 3 ] ;
18760: LD_ADDR_OWVAR 24
18764: PUSH
18765: LD_VAR 0 2
18769: PUSH
18770: LD_INT 3
18772: ARRAY
18773: ST_TO_ADDR
// bc_type = b_barracks ;
18774: LD_ADDR_OWVAR 42
18778: PUSH
18779: LD_INT 5
18781: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
18782: LD_ADDR_OWVAR 43
18786: PUSH
18787: LD_VAR 0 2
18791: PUSH
18792: LD_INT 5
18794: ARRAY
18795: ST_TO_ADDR
// tmp1 = createbuilding ;
18796: LD_ADDR_VAR 0 3
18800: PUSH
18801: CALL_OW 46
18805: ST_TO_ADDR
// if not placeunitxy ( tmp1 , tmp [ 1 ] , tmp [ 2 ] , false ) then
18806: LD_VAR 0 3
18810: PPUSH
18811: LD_VAR 0 2
18815: PUSH
18816: LD_INT 1
18818: ARRAY
18819: PPUSH
18820: LD_VAR 0 2
18824: PUSH
18825: LD_INT 2
18827: ARRAY
18828: PPUSH
18829: LD_INT 0
18831: PPUSH
18832: CALL_OW 48
18836: NOT
18837: IFFALSE 18858
// retry = retry ^ [ tmp ] ;
18839: LD_ADDR_VAR 0 16
18843: PUSH
18844: LD_VAR 0 16
18848: PUSH
18849: LD_VAR 0 2
18853: PUSH
18854: EMPTY
18855: LIST
18856: ADD
18857: ST_TO_ADDR
// end else
18858: GO 18964
// begin uc_direction = tmp [ 3 ] ;
18860: LD_ADDR_OWVAR 24
18864: PUSH
18865: LD_VAR 0 2
18869: PUSH
18870: LD_INT 3
18872: ARRAY
18873: ST_TO_ADDR
// bc_type = tmp [ 4 ] ;
18874: LD_ADDR_OWVAR 42
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: LD_INT 4
18886: ARRAY
18887: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
18888: LD_ADDR_OWVAR 43
18892: PUSH
18893: LD_VAR 0 2
18897: PUSH
18898: LD_INT 5
18900: ARRAY
18901: ST_TO_ADDR
// tmp1 = createbuilding ;
18902: LD_ADDR_VAR 0 3
18906: PUSH
18907: CALL_OW 46
18911: ST_TO_ADDR
// if not placeunitxy ( tmp1 , tmp [ 1 ] , tmp [ 2 ] , false ) then
18912: LD_VAR 0 3
18916: PPUSH
18917: LD_VAR 0 2
18921: PUSH
18922: LD_INT 1
18924: ARRAY
18925: PPUSH
18926: LD_VAR 0 2
18930: PUSH
18931: LD_INT 2
18933: ARRAY
18934: PPUSH
18935: LD_INT 0
18937: PPUSH
18938: CALL_OW 48
18942: NOT
18943: IFFALSE 18964
// retry = retry ^ [ tmp ] ;
18945: LD_ADDR_VAR 0 16
18949: PUSH
18950: LD_VAR 0 16
18954: PUSH
18955: LD_VAR 0 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: ADD
18963: ST_TO_ADDR
// end ; end ;
18964: GO 18392
18966: POP
18967: POP
// bc_type = b_control_tower ;
18968: LD_ADDR_OWVAR 42
18972: PUSH
18973: LD_INT 36
18975: ST_TO_ADDR
// bc_level = 4 ;
18976: LD_ADDR_OWVAR 43
18980: PUSH
18981: LD_INT 4
18983: ST_TO_ADDR
// smery = [ [ [ 48 , 16 ] , [ 49 , 16 ] , [ 50 , 16 ] , [ 50 , 15 ] , [ 50 , 14 ] , [ 50 , 13 ] , [ 49 , 12 ] , [ 48 , 11 ] , [ 47 , 11 ] , [ 46 , 11 ] , [ 45 , 11 ] , [ 45 , 12 ] , [ 45 , 13 ] , [ 46 , 14 ] , [ 47 , 15 ] ] , [ [ 48 , 16 ] , [ 49 , 16 ] , [ 50 , 16 ] , [ 51 , 16 ] , [ 51 , 15 ] , [ 51 , 14 ] , [ 50 , 13 ] , [ 49 , 12 ] , [ 48 , 11 ] , [ 47 , 11 ] , [ 46 , 11 ] , [ 46 , 12 ] , [ 46 , 13 ] , [ 46 , 14 ] , [ 47 , 15 ] ] , [ [ 49 , 17 ] , [ 50 , 17 ] , [ 51 , 17 ] , [ 51 , 16 ] , [ 51 , 15 ] , [ 51 , 14 ] , [ 50 , 13 ] , [ 49 , 12 ] , [ 48 , 12 ] , [ 47 , 12 ] , [ 46 , 12 ] , [ 46 , 13 ] , [ 46 , 14 ] , [ 47 , 15 ] , [ 48 , 16 ] ] , [ [ 48 , 17 ] , [ 49 , 17 ] , [ 50 , 17 ] , [ 51 , 17 ] , [ 51 , 16 ] , [ 51 , 15 ] , [ 50 , 14 ] , [ 49 , 13 ] , [ 48 , 12 ] , [ 47 , 12 ] , [ 46 , 12 ] , [ 46 , 13 ] , [ 46 , 14 ] , [ 46 , 15 ] , [ 47 , 16 ] ] , [ [ 48 , 17 ] , [ 49 , 17 ] , [ 50 , 17 ] , [ 50 , 16 ] , [ 50 , 15 ] , [ 50 , 14 ] , [ 49 , 13 ] , [ 48 , 12 ] , [ 47 , 12 ] , [ 46 , 12 ] , [ 45 , 12 ] , [ 45 , 13 ] , [ 45 , 14 ] , [ 46 , 15 ] , [ 47 , 16 ] ] , [ [ 47 , 16 ] , [ 48 , 16 ] , [ 49 , 16 ] , [ 50 , 16 ] , [ 50 , 15 ] , [ 50 , 14 ] , [ 49 , 13 ] , [ 48 , 12 ] , [ 47 , 11 ] , [ 46 , 11 ] , [ 45 , 11 ] , [ 45 , 12 ] , [ 45 , 13 ] , [ 45 , 14 ] , [ 46 , 15 ] ] ] ;
18984: LD_ADDR_VAR 0 17
18988: PUSH
18989: LD_INT 48
18991: PUSH
18992: LD_INT 16
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 49
19001: PUSH
19002: LD_INT 16
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 50
19011: PUSH
19012: LD_INT 16
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 50
19021: PUSH
19022: LD_INT 15
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 50
19031: PUSH
19032: LD_INT 14
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 50
19041: PUSH
19042: LD_INT 13
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 49
19051: PUSH
19052: LD_INT 12
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 48
19061: PUSH
19062: LD_INT 11
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 47
19071: PUSH
19072: LD_INT 11
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 46
19081: PUSH
19082: LD_INT 11
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 45
19091: PUSH
19092: LD_INT 11
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 45
19101: PUSH
19102: LD_INT 12
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 45
19111: PUSH
19112: LD_INT 13
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 46
19121: PUSH
19122: LD_INT 14
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 47
19131: PUSH
19132: LD_INT 15
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 48
19158: PUSH
19159: LD_INT 16
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 49
19168: PUSH
19169: LD_INT 16
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 50
19178: PUSH
19179: LD_INT 16
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 51
19188: PUSH
19189: LD_INT 16
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 51
19198: PUSH
19199: LD_INT 15
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 51
19208: PUSH
19209: LD_INT 14
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 50
19218: PUSH
19219: LD_INT 13
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 49
19228: PUSH
19229: LD_INT 12
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 48
19238: PUSH
19239: LD_INT 11
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 47
19248: PUSH
19249: LD_INT 11
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 46
19258: PUSH
19259: LD_INT 11
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 46
19268: PUSH
19269: LD_INT 12
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 46
19278: PUSH
19279: LD_INT 13
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 46
19288: PUSH
19289: LD_INT 14
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 47
19298: PUSH
19299: LD_INT 15
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 49
19325: PUSH
19326: LD_INT 17
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 50
19335: PUSH
19336: LD_INT 17
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 51
19345: PUSH
19346: LD_INT 17
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 51
19355: PUSH
19356: LD_INT 16
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 51
19365: PUSH
19366: LD_INT 15
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 51
19375: PUSH
19376: LD_INT 14
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 50
19385: PUSH
19386: LD_INT 13
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 49
19395: PUSH
19396: LD_INT 12
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 48
19405: PUSH
19406: LD_INT 12
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 47
19415: PUSH
19416: LD_INT 12
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 46
19425: PUSH
19426: LD_INT 12
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 46
19435: PUSH
19436: LD_INT 13
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 46
19445: PUSH
19446: LD_INT 14
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 47
19455: PUSH
19456: LD_INT 15
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 48
19465: PUSH
19466: LD_INT 16
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 48
19492: PUSH
19493: LD_INT 17
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 49
19502: PUSH
19503: LD_INT 17
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 50
19512: PUSH
19513: LD_INT 17
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 51
19522: PUSH
19523: LD_INT 17
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 51
19532: PUSH
19533: LD_INT 16
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 51
19542: PUSH
19543: LD_INT 15
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 50
19552: PUSH
19553: LD_INT 14
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 49
19562: PUSH
19563: LD_INT 13
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 48
19572: PUSH
19573: LD_INT 12
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 47
19582: PUSH
19583: LD_INT 12
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 46
19592: PUSH
19593: LD_INT 12
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 46
19602: PUSH
19603: LD_INT 13
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 46
19612: PUSH
19613: LD_INT 14
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 46
19622: PUSH
19623: LD_INT 15
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 47
19632: PUSH
19633: LD_INT 16
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 48
19659: PUSH
19660: LD_INT 17
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 49
19669: PUSH
19670: LD_INT 17
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 50
19679: PUSH
19680: LD_INT 17
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 50
19689: PUSH
19690: LD_INT 16
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 50
19699: PUSH
19700: LD_INT 15
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 50
19709: PUSH
19710: LD_INT 14
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 49
19719: PUSH
19720: LD_INT 13
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 48
19729: PUSH
19730: LD_INT 12
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 47
19739: PUSH
19740: LD_INT 12
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 46
19749: PUSH
19750: LD_INT 12
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 45
19759: PUSH
19760: LD_INT 12
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 45
19769: PUSH
19770: LD_INT 13
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 45
19779: PUSH
19780: LD_INT 14
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 46
19789: PUSH
19790: LD_INT 15
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 47
19799: PUSH
19800: LD_INT 16
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 47
19826: PUSH
19827: LD_INT 16
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 48
19836: PUSH
19837: LD_INT 16
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 49
19846: PUSH
19847: LD_INT 16
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 50
19856: PUSH
19857: LD_INT 16
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 50
19866: PUSH
19867: LD_INT 15
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 50
19876: PUSH
19877: LD_INT 14
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 49
19886: PUSH
19887: LD_INT 13
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 48
19896: PUSH
19897: LD_INT 12
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 47
19906: PUSH
19907: LD_INT 11
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 46
19916: PUSH
19917: LD_INT 11
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 45
19926: PUSH
19927: LD_INT 11
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 45
19936: PUSH
19937: LD_INT 12
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 45
19946: PUSH
19947: LD_INT 13
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 45
19956: PUSH
19957: LD_INT 14
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 46
19966: PUSH
19967: LD_INT 15
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: ST_TO_ADDR
// tmp1 = [ ] ;
19999: LD_ADDR_VAR 0 3
20003: PUSH
20004: EMPTY
20005: ST_TO_ADDR
// for tmz = 1 to 6 do
20006: LD_ADDR_VAR 0 4
20010: PUSH
20011: DOUBLE
20012: LD_INT 1
20014: DEC
20015: ST_TO_ADDR
20016: LD_INT 6
20018: PUSH
20019: FOR_TO
20020: IFFALSE 20150
// begin tm_c = false ;
20022: LD_ADDR_VAR 0 6
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// for tmz_ = 1 to 15 do
20030: LD_ADDR_VAR 0 5
20034: PUSH
20035: DOUBLE
20036: LD_INT 1
20038: DEC
20039: ST_TO_ADDR
20040: LD_INT 15
20042: PUSH
20043: FOR_TO
20044: IFFALSE 20106
// if hexinfo ( smery [ tmz ] [ tmz_ ] [ 1 ] , smery [ tmz ] [ tmz_ ] [ 2 ] ) then
20046: LD_VAR 0 17
20050: PUSH
20051: LD_VAR 0 4
20055: ARRAY
20056: PUSH
20057: LD_VAR 0 5
20061: ARRAY
20062: PUSH
20063: LD_INT 1
20065: ARRAY
20066: PPUSH
20067: LD_VAR 0 17
20071: PUSH
20072: LD_VAR 0 4
20076: ARRAY
20077: PUSH
20078: LD_VAR 0 5
20082: ARRAY
20083: PUSH
20084: LD_INT 2
20086: ARRAY
20087: PPUSH
20088: CALL_OW 428
20092: IFFALSE 20104
// begin tm_c = true ;
20094: LD_ADDR_VAR 0 6
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// break ;
20102: GO 20106
// end ;
20104: GO 20043
20106: POP
20107: POP
// if not tm_c then
20108: LD_VAR 0 6
20112: NOT
20113: IFFALSE 20140
// tmp1 = tmp1 ^ [ tmz - 1 ] else
20115: LD_ADDR_VAR 0 3
20119: PUSH
20120: LD_VAR 0 3
20124: PUSH
20125: LD_VAR 0 4
20129: PUSH
20130: LD_INT 1
20132: MINUS
20133: PUSH
20134: EMPTY
20135: LIST
20136: ADD
20137: ST_TO_ADDR
20138: GO 20148
// tm_c = false ;
20140: LD_ADDR_VAR 0 6
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// end ;
20148: GO 20019
20150: POP
20151: POP
// tm_c = false ;
20152: LD_ADDR_VAR 0 6
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// for tmz in tmp1 do
20160: LD_ADDR_VAR 0 4
20164: PUSH
20165: LD_VAR 0 3
20169: PUSH
20170: FOR_IN
20171: IFFALSE 20236
// begin uc_direction = tmz ;
20173: LD_ADDR_OWVAR 24
20177: PUSH
20178: LD_VAR 0 4
20182: ST_TO_ADDR
// ambctwr0 = createbuilding ;
20183: LD_ADDR_LOC 97
20187: PUSH
20188: CALL_OW 46
20192: ST_TO_ADDR
// if placeunitxy ( ambctwr0 , 48 , 14 , false ) then
20193: LD_LOC 97
20197: PPUSH
20198: LD_INT 48
20200: PPUSH
20201: LD_INT 14
20203: PPUSH
20204: LD_INT 0
20206: PPUSH
20207: CALL_OW 48
20211: IFFALSE 20225
// begin tm_c = true ;
20213: LD_ADDR_VAR 0 6
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// break ;
20221: GO 20236
// end else
20223: GO 20234
// destroyunit ( ambctwr0 ) ;
20225: LD_LOC 97
20229: PPUSH
20230: CALL_OW 65
// end ;
20234: GO 20170
20236: POP
20237: POP
// for tmp in retry do
20238: LD_ADDR_VAR 0 2
20242: PUSH
20243: LD_VAR 0 16
20247: PUSH
20248: FOR_IN
20249: IFFALSE 20579
// begin if ( tmp [ 4 ] in [ b_lab , b_lab_half , b_lab_full ] ) and not lab_done then
20251: LD_VAR 0 2
20255: PUSH
20256: LD_INT 4
20258: ARRAY
20259: PUSH
20260: LD_INT 6
20262: PUSH
20263: LD_INT 7
20265: PUSH
20266: LD_INT 8
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: IN
20274: PUSH
20275: LD_VAR 0 15
20279: NOT
20280: AND
20281: IFFALSE 20388
// begin uc_direction = tmp [ 3 ] ;
20283: LD_ADDR_OWVAR 24
20287: PUSH
20288: LD_VAR 0 2
20292: PUSH
20293: LD_INT 3
20295: ARRAY
20296: ST_TO_ADDR
// bc_type = b_lab_full ;
20297: LD_ADDR_OWVAR 42
20301: PUSH
20302: LD_INT 8
20304: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
20305: LD_ADDR_OWVAR 43
20309: PUSH
20310: LD_VAR 0 2
20314: PUSH
20315: LD_INT 5
20317: ARRAY
20318: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
20319: LD_ADDR_OWVAR 44
20323: PUSH
20324: LD_INT 10
20326: ST_TO_ADDR
// bc_kind2 = b_lab_opto ;
20327: LD_ADDR_OWVAR 45
20331: PUSH
20332: LD_INT 15
20334: ST_TO_ADDR
// tmp1 = createbuilding ;
20335: LD_ADDR_VAR 0 3
20339: PUSH
20340: CALL_OW 46
20344: ST_TO_ADDR
// if not placeunitarea ( tmp1 , ambase , false ) then
20345: LD_VAR 0 3
20349: PPUSH
20350: LD_INT 8
20352: PPUSH
20353: LD_INT 0
20355: PPUSH
20356: CALL_OW 49
20360: NOT
20361: IFFALSE 20378
// buildquery ( lab nebude , [ OK ] ) else
20363: LD_STRING lab nebude
20365: PPUSH
20366: LD_STRING OK
20368: PUSH
20369: EMPTY
20370: LIST
20371: PPUSH
20372: CALL_OW 99
20376: GO 20386
// lab_done = true ;
20378: LD_ADDR_VAR 0 15
20382: PUSH
20383: LD_INT 1
20385: ST_TO_ADDR
// end else
20386: GO 20577
// if tmp [ 4 ] = b_armoury then
20388: LD_VAR 0 2
20392: PUSH
20393: LD_INT 4
20395: ARRAY
20396: PUSH
20397: LD_INT 4
20399: EQUAL
20400: IFFALSE 20481
// begin uc_direction = tmp [ 3 ] ;
20402: LD_ADDR_OWVAR 24
20406: PUSH
20407: LD_VAR 0 2
20411: PUSH
20412: LD_INT 3
20414: ARRAY
20415: ST_TO_ADDR
// bc_type = b_barracks ;
20416: LD_ADDR_OWVAR 42
20420: PUSH
20421: LD_INT 5
20423: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
20424: LD_ADDR_OWVAR 43
20428: PUSH
20429: LD_VAR 0 2
20433: PUSH
20434: LD_INT 5
20436: ARRAY
20437: ST_TO_ADDR
// tmp1 = createbuilding ;
20438: LD_ADDR_VAR 0 3
20442: PUSH
20443: CALL_OW 46
20447: ST_TO_ADDR
// if not placeunitarea ( tmp1 , ambase , false ) then
20448: LD_VAR 0 3
20452: PPUSH
20453: LD_INT 8
20455: PPUSH
20456: LD_INT 0
20458: PPUSH
20459: CALL_OW 49
20463: NOT
20464: IFFALSE 20479
// buildquery ( barracks nebudou , [ OK ] ) ;
20466: LD_STRING barracks nebudou
20468: PPUSH
20469: LD_STRING OK
20471: PUSH
20472: EMPTY
20473: LIST
20474: PPUSH
20475: CALL_OW 99
// end else
20479: GO 20577
// begin uc_direction = tmp [ 3 ] ;
20481: LD_ADDR_OWVAR 24
20485: PUSH
20486: LD_VAR 0 2
20490: PUSH
20491: LD_INT 3
20493: ARRAY
20494: ST_TO_ADDR
// bc_type = tmp [ 4 ] ;
20495: LD_ADDR_OWVAR 42
20499: PUSH
20500: LD_VAR 0 2
20504: PUSH
20505: LD_INT 4
20507: ARRAY
20508: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
20509: LD_ADDR_OWVAR 43
20513: PUSH
20514: LD_VAR 0 2
20518: PUSH
20519: LD_INT 5
20521: ARRAY
20522: ST_TO_ADDR
// tmp1 = createbuilding ;
20523: LD_ADDR_VAR 0 3
20527: PUSH
20528: CALL_OW 46
20532: ST_TO_ADDR
// if not placeunitarea ( tmp1 , ambase , false ) then
20533: LD_VAR 0 3
20537: PPUSH
20538: LD_INT 8
20540: PPUSH
20541: LD_INT 0
20543: PPUSH
20544: CALL_OW 49
20548: NOT
20549: IFFALSE 20577
// buildquery ( [ tmp [ 4 ] , nebude ] , [ OK ] ) ;
20551: LD_VAR 0 2
20555: PUSH
20556: LD_INT 4
20558: ARRAY
20559: PUSH
20560: LD_STRING nebude
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PPUSH
20567: LD_STRING OK
20569: PUSH
20570: EMPTY
20571: LIST
20572: PPUSH
20573: CALL_OW 99
// end ; end ;
20577: GO 20248
20579: POP
20580: POP
// if not tm_c then
20581: LD_VAR 0 6
20585: NOT
20586: IFFALSE 20619
// if not placeunitarea ( ambctwr0 , ambase , false ) then
20588: LD_LOC 97
20592: PPUSH
20593: LD_INT 8
20595: PPUSH
20596: LD_INT 0
20598: PPUSH
20599: CALL_OW 49
20603: NOT
20604: IFFALSE 20619
// buildquery ( control tower nebude , [ OK ] ) ;
20606: LD_STRING control tower nebude
20608: PPUSH
20609: LD_STRING OK
20611: PUSH
20612: EMPTY
20613: LIST
20614: PPUSH
20615: CALL_OW 99
// if not testcharacters ( otherGamma2 ) or not checkcharacterset ( otherGamma2 ) then
20619: LD_STRING otherGamma2
20621: PPUSH
20622: CALL_OW 28
20626: NOT
20627: PUSH
20628: LD_STRING otherGamma2
20630: PPUSH
20631: CALL_OW 29
20635: NOT
20636: OR
20637: IFFALSE 20641
// else
20639: GO 20654
// othergamma2 = createcharacterset ( otherGamma2 ) ;
20641: LD_ADDR_LOC 87
20645: PUSH
20646: LD_STRING otherGamma2
20648: PPUSH
20649: CALL_OW 31
20653: ST_TO_ADDR
// if not testcharacters ( otherDelta ) or not checkcharacterset ( otherDelta ) then
20654: LD_STRING otherDelta
20656: PPUSH
20657: CALL_OW 28
20661: NOT
20662: PUSH
20663: LD_STRING otherDelta
20665: PPUSH
20666: CALL_OW 29
20670: NOT
20671: OR
20672: IFFALSE 20676
// else
20674: GO 20689
// othergamma3 = createcharacterset ( otherDelta ) ;
20676: LD_ADDR_LOC 88
20680: PUSH
20681: LD_STRING otherDelta
20683: PPUSH
20684: CALL_OW 31
20688: ST_TO_ADDR
// if not testcharacters ( otherUnplaced ) or not checkcharacterset ( otherUnplaced ) then
20689: LD_STRING otherUnplaced
20691: PPUSH
20692: CALL_OW 28
20696: NOT
20697: PUSH
20698: LD_STRING otherUnplaced
20700: PPUSH
20701: CALL_OW 29
20705: NOT
20706: OR
20707: IFFALSE 20711
// else
20709: GO 20724
// otherunplaced = createcharacterset ( otherUnplaced ) ;
20711: LD_ADDR_LOC 89
20715: PUSH
20716: LD_STRING otherUnplaced
20718: PPUSH
20719: CALL_OW 31
20723: ST_TO_ADDR
// if not testcharacters ( otherJMM ) or not checkcharacterset ( otherJMM ) then
20724: LD_STRING otherJMM
20726: PPUSH
20727: CALL_OW 28
20731: NOT
20732: PUSH
20733: LD_STRING otherJMM
20735: PPUSH
20736: CALL_OW 29
20740: NOT
20741: OR
20742: IFFALSE 20746
// else
20744: GO 20759
// otherjmm = createcharacterset ( otherJMM ) ;
20746: LD_ADDR_LOC 90
20750: PUSH
20751: LD_STRING otherJMM
20753: PPUSH
20754: CALL_OW 31
20758: ST_TO_ADDR
// if not testcharacters ( otherLateJMM ) or not checkcharacterset ( otherLateJMM ) then
20759: LD_STRING otherLateJMM
20761: PPUSH
20762: CALL_OW 28
20766: NOT
20767: PUSH
20768: LD_STRING otherLateJMM
20770: PPUSH
20771: CALL_OW 29
20775: NOT
20776: OR
20777: IFFALSE 20781
// else
20779: GO 20794
// otherlatejmm = createcharacterset ( otherLateJMM ) ;
20781: LD_ADDR_LOC 91
20785: PUSH
20786: LD_STRING otherLateJMM
20788: PPUSH
20789: CALL_OW 31
20793: ST_TO_ADDR
// rh = newcharacter ( Harisson ) ;
20794: LD_ADDR_EXP 15
20798: PUSH
20799: LD_STRING Harisson
20801: PPUSH
20802: CALL_OW 25
20806: ST_TO_ADDR
// if not rh then
20807: LD_EXP 15
20811: NOT
20812: IFFALSE 20827
// buildquery ( neny Harisson , [ OK ] ) ;
20814: LD_STRING neny Harisson
20816: PPUSH
20817: LD_STRING OK
20819: PUSH
20820: EMPTY
20821: LIST
20822: PPUSH
20823: CALL_OW 99
// if testcharacters ( JMM ) and checkcharacterset ( JMM ) then
20827: LD_STRING JMM
20829: PPUSH
20830: CALL_OW 28
20834: PUSH
20835: LD_STRING JMM
20837: PPUSH
20838: CALL_OW 29
20842: AND
20843: IFFALSE 20863
// john_ = createcharacterwithclass ( JMM , class_soldier ) else
20845: LD_ADDR_EXP 20
20849: PUSH
20850: LD_STRING JMM
20852: PPUSH
20853: LD_INT 1
20855: PPUSH
20856: CALL_OW 35
20860: ST_TO_ADDR
20861: GO 20876
// buildquery ( neny JMM , [ OK ] ) ;
20863: LD_STRING neny JMM
20865: PPUSH
20866: LD_STRING OK
20868: PUSH
20869: EMPTY
20870: LIST
20871: PPUSH
20872: CALL_OW 99
// powel = newcharacter ( Powell ) ;
20876: LD_ADDR_EXP 16
20880: PUSH
20881: LD_STRING Powell
20883: PPUSH
20884: CALL_OW 25
20888: ST_TO_ADDR
// if not powel then
20889: LD_EXP 16
20893: NOT
20894: IFFALSE 20909
// buildquery ( neny Powell , [ OK ] ) ;
20896: LD_STRING neny Powell
20898: PPUSH
20899: LD_STRING OK
20901: PUSH
20902: EMPTY
20903: LIST
20904: PPUSH
20905: CALL_OW 99
// gamma2commander = loadvariable ( Gamma2Commander , 0 ) ;
20909: LD_ADDR_EXP 46
20913: PUSH
20914: LD_STRING Gamma2Commander
20916: PPUSH
20917: LD_INT 0
20919: PPUSH
20920: CALL_OW 30
20924: ST_TO_ADDR
// if not gamma2commander then
20925: LD_EXP 46
20929: NOT
20930: IFFALSE 20945
// buildquery ( neny Gamma2Commander , [ OK ] ) ;
20932: LD_STRING neny Gamma2Commander
20934: PPUSH
20935: LD_STRING OK
20937: PUSH
20938: EMPTY
20939: LIST
20940: PPUSH
20941: CALL_OW 99
// lucy = 0 ;
20945: LD_ADDR_EXP 31
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// brown = 0 ;
20953: LD_ADDR_EXP 32
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// vanh = 0 ;
20961: LD_ADDR_EXP 33
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// if not testcharacters ( Donaldson ) or not checkcharacterset ( Donaldson ) then
20969: LD_STRING Donaldson
20971: PPUSH
20972: CALL_OW 28
20976: NOT
20977: PUSH
20978: LD_STRING Donaldson
20980: PPUSH
20981: CALL_OW 29
20985: NOT
20986: OR
20987: IFFALSE 20999
// lucy = 0 else
20989: LD_ADDR_EXP 31
20993: PUSH
20994: LD_INT 0
20996: ST_TO_ADDR
20997: GO 21053
// begin lucy = createcharacter ( Donaldson ) ;
20999: LD_ADDR_EXP 31
21003: PUSH
21004: LD_STRING Donaldson
21006: PPUSH
21007: CALL_OW 34
21011: ST_TO_ADDR
// lucyloc = loadvariable ( DonaldsonLoc , - 1 ) ;
21012: LD_ADDR_EXP 42
21016: PUSH
21017: LD_STRING DonaldsonLoc
21019: PPUSH
21020: LD_INT 1
21022: NEG
21023: PPUSH
21024: CALL_OW 30
21028: ST_TO_ADDR
// if lucyloc = - 1 then
21029: LD_EXP 42
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: EQUAL
21038: IFFALSE 21053
// buildquery ( neny DonaldsonLoc , [ OK ] ) ;
21040: LD_STRING neny DonaldsonLoc
21042: PPUSH
21043: LD_STRING OK
21045: PUSH
21046: EMPTY
21047: LIST
21048: PPUSH
21049: CALL_OW 99
// end ; if not testcharacters ( Brown ) or not checkcharacterset ( Brown ) then
21053: LD_STRING Brown
21055: PPUSH
21056: CALL_OW 28
21060: NOT
21061: PUSH
21062: LD_STRING Brown
21064: PPUSH
21065: CALL_OW 29
21069: NOT
21070: OR
21071: IFFALSE 21083
// brown = 0 else
21073: LD_ADDR_EXP 32
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
21081: GO 21137
// begin brown = createcharacter ( Brown ) ;
21083: LD_ADDR_EXP 32
21087: PUSH
21088: LD_STRING Brown
21090: PPUSH
21091: CALL_OW 34
21095: ST_TO_ADDR
// brownloc = loadvariable ( BrownLoc , - 1 ) ;
21096: LD_ADDR_EXP 43
21100: PUSH
21101: LD_STRING BrownLoc
21103: PPUSH
21104: LD_INT 1
21106: NEG
21107: PPUSH
21108: CALL_OW 30
21112: ST_TO_ADDR
// if brownloc = - 1 then
21113: LD_EXP 43
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: EQUAL
21122: IFFALSE 21137
// buildquery ( neny BrownLoc , [ OK ] ) ;
21124: LD_STRING neny BrownLoc
21126: PPUSH
21127: LD_STRING OK
21129: PUSH
21130: EMPTY
21131: LIST
21132: PPUSH
21133: CALL_OW 99
// end ; vanh = newcharacter ( VanHouten ) ;
21137: LD_ADDR_EXP 33
21141: PUSH
21142: LD_STRING VanHouten
21144: PPUSH
21145: CALL_OW 25
21149: ST_TO_ADDR
// case gamma2commander of 1 :
21150: LD_EXP 46
21154: PUSH
21155: LD_INT 1
21157: DOUBLE
21158: EQUAL
21159: IFTRUE 21163
21161: GO 21198
21163: POP
// if not lucy then
21164: LD_EXP 31
21168: NOT
21169: IFFALSE 21186
// buildquery ( neny Donaldson , [ OK ] ) else
21171: LD_STRING neny Donaldson
21173: PPUSH
21174: LD_STRING OK
21176: PUSH
21177: EMPTY
21178: LIST
21179: PPUSH
21180: CALL_OW 99
21184: GO 21196
// amhsold0 = lucy ; 2 :
21186: LD_ADDR_EXP 25
21190: PUSH
21191: LD_EXP 31
21195: ST_TO_ADDR
21196: GO 21285
21198: LD_INT 2
21200: DOUBLE
21201: EQUAL
21202: IFTRUE 21206
21204: GO 21241
21206: POP
// if not brown then
21207: LD_EXP 32
21211: NOT
21212: IFFALSE 21229
// buildquery ( neny Brown , [ OK ] ) else
21214: LD_STRING neny Brown
21216: PPUSH
21217: LD_STRING OK
21219: PUSH
21220: EMPTY
21221: LIST
21222: PPUSH
21223: CALL_OW 99
21227: GO 21239
// amhsold0 = brown ; 3 :
21229: LD_ADDR_EXP 25
21233: PUSH
21234: LD_EXP 32
21238: ST_TO_ADDR
21239: GO 21285
21241: LD_INT 3
21243: DOUBLE
21244: EQUAL
21245: IFTRUE 21249
21247: GO 21284
21249: POP
// if not vanh then
21250: LD_EXP 33
21254: NOT
21255: IFFALSE 21272
// buildquery ( neny VanHouten , [ OK ] ) else
21257: LD_STRING neny VanHouten
21259: PPUSH
21260: LD_STRING OK
21262: PUSH
21263: EMPTY
21264: LIST
21265: PPUSH
21266: CALL_OW 99
21270: GO 21282
// amhsold0 = vanh ; end ;
21272: LD_ADDR_EXP 25
21276: PUSH
21277: LD_EXP 33
21281: ST_TO_ADDR
21282: GO 21285
21284: POP
// uc_side = amer_reinf ;
21285: LD_ADDR_OWVAR 20
21289: PUSH
21290: LD_EXP 3
21294: ST_TO_ADDR
// amhsolda = newcharacter ( Sikorski ) ;
21295: LD_ADDR_EXP 26
21299: PUSH
21300: LD_STRING Sikorski
21302: PPUSH
21303: CALL_OW 25
21307: ST_TO_ADDR
// uc_side = amer ;
21308: LD_ADDR_OWVAR 20
21312: PUSH
21313: LD_EXP 2
21317: ST_TO_ADDR
// if not amhsolda then
21318: LD_EXP 26
21322: NOT
21323: IFFALSE 21338
// buildquery ( neny Sikorski , [ OK ] ) ;
21325: LD_STRING neny Sikorski
21327: PPUSH
21328: LD_STRING OK
21330: PUSH
21331: EMPTY
21332: LIST
21333: PPUSH
21334: CALL_OW 99
// if not testcharacters ( Lisa ) or not checkcharacterset ( Lisa ) then
21338: LD_STRING Lisa
21340: PPUSH
21341: CALL_OW 28
21345: NOT
21346: PUSH
21347: LD_STRING Lisa
21349: PPUSH
21350: CALL_OW 29
21354: NOT
21355: OR
21356: IFFALSE 21368
// lisa = 0 else
21358: LD_ADDR_EXP 18
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
21366: GO 21549
// begin lisa = createcharacter ( Lisa ) ;
21368: LD_ADDR_EXP 18
21372: PUSH
21373: LD_STRING Lisa
21375: PPUSH
21376: CALL_OW 34
21380: ST_TO_ADDR
// lisaloc = loadvariable ( LisaLoc , - 1 ) ;
21381: LD_ADDR_EXP 36
21385: PUSH
21386: LD_STRING LisaLoc
21388: PPUSH
21389: LD_INT 1
21391: NEG
21392: PPUSH
21393: CALL_OW 30
21397: ST_TO_ADDR
// case lisaloc of 2 :
21398: LD_EXP 36
21402: PUSH
21403: LD_INT 2
21405: DOUBLE
21406: EQUAL
21407: IFTRUE 21411
21409: GO 21433
21411: POP
// gamma2vip = gamma2vip ^ [ lisa ] ; 3 :
21412: LD_ADDR_LOC 92
21416: PUSH
21417: LD_LOC 92
21421: PUSH
21422: LD_EXP 18
21426: PUSH
21427: EMPTY
21428: LIST
21429: ADD
21430: ST_TO_ADDR
21431: GO 21549
21433: LD_INT 3
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21463
21441: POP
// gamma3vip = gamma3vip ^ [ lisa ] ; 4 :
21442: LD_ADDR_LOC 93
21446: PUSH
21447: LD_LOC 93
21451: PUSH
21452: LD_EXP 18
21456: PUSH
21457: EMPTY
21458: LIST
21459: ADD
21460: ST_TO_ADDR
21461: GO 21549
21463: LD_INT 4
21465: DOUBLE
21466: EQUAL
21467: IFTRUE 21471
21469: GO 21493
21471: POP
// withjmmvip = withjmmvip ^ [ lisa ] ; 5 :
21472: LD_ADDR_LOC 94
21476: PUSH
21477: LD_LOC 94
21481: PUSH
21482: LD_EXP 18
21486: PUSH
21487: EMPTY
21488: LIST
21489: ADD
21490: ST_TO_ADDR
21491: GO 21549
21493: LD_INT 5
21495: DOUBLE
21496: EQUAL
21497: IFTRUE 21501
21499: GO 21523
21501: POP
// withjmmlatevip = withjmmlatevip ^ [ lisa ] ; - 1 :
21502: LD_ADDR_LOC 95
21506: PUSH
21507: LD_LOC 95
21511: PUSH
21512: LD_EXP 18
21516: PUSH
21517: EMPTY
21518: LIST
21519: ADD
21520: ST_TO_ADDR
21521: GO 21549
21523: LD_INT 1
21525: NEG
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 21548
21532: POP
// buildquery ( neny LisaLoc , [ OK ] ) ; end ;
21533: LD_STRING neny LisaLoc
21535: PPUSH
21536: LD_STRING OK
21538: PUSH
21539: EMPTY
21540: LIST
21541: PPUSH
21542: CALL_OW 99
21546: GO 21549
21548: POP
// end ; if not testcharacters ( Frank ) or not checkcharacterset ( Frank ) then
21549: LD_STRING Frank
21551: PPUSH
21552: CALL_OW 28
21556: NOT
21557: PUSH
21558: LD_STRING Frank
21560: PPUSH
21561: CALL_OW 29
21565: NOT
21566: OR
21567: IFFALSE 21579
// frank = 0 else
21569: LD_ADDR_EXP 19
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
21577: GO 21760
// begin frank = createcharacter ( Frank ) ;
21579: LD_ADDR_EXP 19
21583: PUSH
21584: LD_STRING Frank
21586: PPUSH
21587: CALL_OW 34
21591: ST_TO_ADDR
// frankloc = loadvariable ( FrankLoc , - 1 ) ;
21592: LD_ADDR_EXP 37
21596: PUSH
21597: LD_STRING FrankLoc
21599: PPUSH
21600: LD_INT 1
21602: NEG
21603: PPUSH
21604: CALL_OW 30
21608: ST_TO_ADDR
// case frankloc of 2 :
21609: LD_EXP 37
21613: PUSH
21614: LD_INT 2
21616: DOUBLE
21617: EQUAL
21618: IFTRUE 21622
21620: GO 21644
21622: POP
// gamma2vip = gamma2vip ^ [ frank ] ; 3 :
21623: LD_ADDR_LOC 92
21627: PUSH
21628: LD_LOC 92
21632: PUSH
21633: LD_EXP 19
21637: PUSH
21638: EMPTY
21639: LIST
21640: ADD
21641: ST_TO_ADDR
21642: GO 21760
21644: LD_INT 3
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21674
21652: POP
// gamma3vip = gamma3vip ^ [ frank ] ; 4 :
21653: LD_ADDR_LOC 93
21657: PUSH
21658: LD_LOC 93
21662: PUSH
21663: LD_EXP 19
21667: PUSH
21668: EMPTY
21669: LIST
21670: ADD
21671: ST_TO_ADDR
21672: GO 21760
21674: LD_INT 4
21676: DOUBLE
21677: EQUAL
21678: IFTRUE 21682
21680: GO 21704
21682: POP
// withjmmvip = withjmmvip ^ [ frank ] ; 5 :
21683: LD_ADDR_LOC 94
21687: PUSH
21688: LD_LOC 94
21692: PUSH
21693: LD_EXP 19
21697: PUSH
21698: EMPTY
21699: LIST
21700: ADD
21701: ST_TO_ADDR
21702: GO 21760
21704: LD_INT 5
21706: DOUBLE
21707: EQUAL
21708: IFTRUE 21712
21710: GO 21734
21712: POP
// withjmmlatevip = withjmmlatevip ^ [ frank ] ; - 1 :
21713: LD_ADDR_LOC 95
21717: PUSH
21718: LD_LOC 95
21722: PUSH
21723: LD_EXP 19
21727: PUSH
21728: EMPTY
21729: LIST
21730: ADD
21731: ST_TO_ADDR
21732: GO 21760
21734: LD_INT 1
21736: NEG
21737: DOUBLE
21738: EQUAL
21739: IFTRUE 21743
21741: GO 21759
21743: POP
// buildquery ( neny FrankLoc , [ OK ] ) ; end ;
21744: LD_STRING neny FrankLoc
21746: PPUSH
21747: LD_STRING OK
21749: PUSH
21750: EMPTY
21751: LIST
21752: PPUSH
21753: CALL_OW 99
21757: GO 21760
21759: POP
// end ; if not testcharacters ( Joan ) or not checkcharacterset ( Joan ) then
21760: LD_STRING Joan
21762: PPUSH
21763: CALL_OW 28
21767: NOT
21768: PUSH
21769: LD_STRING Joan
21771: PPUSH
21772: CALL_OW 29
21776: NOT
21777: OR
21778: IFFALSE 21790
// joan = 0 else
21780: LD_ADDR_EXP 35
21784: PUSH
21785: LD_INT 0
21787: ST_TO_ADDR
21788: GO 21862
// begin joan = createcharacter ( Joan ) ;
21790: LD_ADDR_EXP 35
21794: PUSH
21795: LD_STRING Joan
21797: PPUSH
21798: CALL_OW 34
21802: ST_TO_ADDR
// joanloc = loadvariable ( JoanLoc , - 1 ) ;
21803: LD_ADDR_EXP 45
21807: PUSH
21808: LD_STRING JoanLoc
21810: PPUSH
21811: LD_INT 1
21813: NEG
21814: PPUSH
21815: CALL_OW 30
21819: ST_TO_ADDR
// case joanloc of 9 :
21820: LD_EXP 45
21824: PUSH
21825: LD_INT 9
21827: DOUBLE
21828: EQUAL
21829: IFTRUE 21833
21831: GO 21836
21833: POP
// ; - 1 :
21834: GO 21862
21836: LD_INT 1
21838: NEG
21839: DOUBLE
21840: EQUAL
21841: IFTRUE 21845
21843: GO 21861
21845: POP
// buildquery ( neny JoanLoc , [ OK ] ) ; end ;
21846: LD_STRING neny JoanLoc
21848: PPUSH
21849: LD_STRING OK
21851: PUSH
21852: EMPTY
21853: LIST
21854: PPUSH
21855: CALL_OW 99
21859: GO 21862
21861: POP
// end ; if not testcharacters ( Gladstone ) or not checkcharacterset ( Gladstone ) then
21862: LD_STRING Gladstone
21864: PPUSH
21865: CALL_OW 28
21869: NOT
21870: PUSH
21871: LD_STRING Gladstone
21873: PPUSH
21874: CALL_OW 29
21878: NOT
21879: OR
21880: IFFALSE 21892
// glad = 0 else
21882: LD_ADDR_EXP 34
21886: PUSH
21887: LD_INT 0
21889: ST_TO_ADDR
21890: GO 22073
// begin glad = createcharacter ( Gladstone ) ;
21892: LD_ADDR_EXP 34
21896: PUSH
21897: LD_STRING Gladstone
21899: PPUSH
21900: CALL_OW 34
21904: ST_TO_ADDR
// gladloc = loadvariable ( GladstoneLoc , - 1 ) ;
21905: LD_ADDR_EXP 44
21909: PUSH
21910: LD_STRING GladstoneLoc
21912: PPUSH
21913: LD_INT 1
21915: NEG
21916: PPUSH
21917: CALL_OW 30
21921: ST_TO_ADDR
// case gladloc of 2 :
21922: LD_EXP 44
21926: PUSH
21927: LD_INT 2
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 21957
21935: POP
// gamma2vip = gamma2vip ^ [ glad ] ; 3 :
21936: LD_ADDR_LOC 92
21940: PUSH
21941: LD_LOC 92
21945: PUSH
21946: LD_EXP 34
21950: PUSH
21951: EMPTY
21952: LIST
21953: ADD
21954: ST_TO_ADDR
21955: GO 22073
21957: LD_INT 3
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 21987
21965: POP
// gamma3vip = gamma3vip ^ [ glad ] ; 4 :
21966: LD_ADDR_LOC 93
21970: PUSH
21971: LD_LOC 93
21975: PUSH
21976: LD_EXP 34
21980: PUSH
21981: EMPTY
21982: LIST
21983: ADD
21984: ST_TO_ADDR
21985: GO 22073
21987: LD_INT 4
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22017
21995: POP
// withjmmvip = withjmmvip ^ [ glad ] ; 5 :
21996: LD_ADDR_LOC 94
22000: PUSH
22001: LD_LOC 94
22005: PUSH
22006: LD_EXP 34
22010: PUSH
22011: EMPTY
22012: LIST
22013: ADD
22014: ST_TO_ADDR
22015: GO 22073
22017: LD_INT 5
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22047
22025: POP
// withjmmlatevip = withjmmlatevip ^ [ glad ] ; - 1 :
22026: LD_ADDR_LOC 95
22030: PUSH
22031: LD_LOC 95
22035: PUSH
22036: LD_EXP 34
22040: PUSH
22041: EMPTY
22042: LIST
22043: ADD
22044: ST_TO_ADDR
22045: GO 22073
22047: LD_INT 1
22049: NEG
22050: DOUBLE
22051: EQUAL
22052: IFTRUE 22056
22054: GO 22072
22056: POP
// buildquery ( neny GladstoneLoc , [ OK ] ) ; end ;
22057: LD_STRING neny GladstoneLoc
22059: PPUSH
22060: LD_STRING OK
22062: PUSH
22063: EMPTY
22064: LIST
22065: PPUSH
22066: CALL_OW 99
22070: GO 22073
22072: POP
// end ; if not testcharacters ( Cyrus ) or not checkcharacterset ( Cyrus ) then
22073: LD_STRING Cyrus
22075: PPUSH
22076: CALL_OW 28
22080: NOT
22081: PUSH
22082: LD_STRING Cyrus
22084: PPUSH
22085: CALL_OW 29
22089: NOT
22090: OR
22091: IFFALSE 22103
// cyrus = 0 else
22093: LD_ADDR_EXP 21
22097: PUSH
22098: LD_INT 0
22100: ST_TO_ADDR
22101: GO 22284
// begin cyrus = createcharacter ( Cyrus ) ;
22103: LD_ADDR_EXP 21
22107: PUSH
22108: LD_STRING Cyrus
22110: PPUSH
22111: CALL_OW 34
22115: ST_TO_ADDR
// cyrusloc = loadvariable ( CyrusLoc , - 1 ) ;
22116: LD_ADDR_EXP 38
22120: PUSH
22121: LD_STRING CyrusLoc
22123: PPUSH
22124: LD_INT 1
22126: NEG
22127: PPUSH
22128: CALL_OW 30
22132: ST_TO_ADDR
// case cyrusloc of 2 :
22133: LD_EXP 38
22137: PUSH
22138: LD_INT 2
22140: DOUBLE
22141: EQUAL
22142: IFTRUE 22146
22144: GO 22168
22146: POP
// gamma2vip = gamma2vip ^ [ cyrus ] ; 3 :
22147: LD_ADDR_LOC 92
22151: PUSH
22152: LD_LOC 92
22156: PUSH
22157: LD_EXP 21
22161: PUSH
22162: EMPTY
22163: LIST
22164: ADD
22165: ST_TO_ADDR
22166: GO 22284
22168: LD_INT 3
22170: DOUBLE
22171: EQUAL
22172: IFTRUE 22176
22174: GO 22198
22176: POP
// gamma3vip = gamma3vip ^ [ cyrus ] ; 4 :
22177: LD_ADDR_LOC 93
22181: PUSH
22182: LD_LOC 93
22186: PUSH
22187: LD_EXP 21
22191: PUSH
22192: EMPTY
22193: LIST
22194: ADD
22195: ST_TO_ADDR
22196: GO 22284
22198: LD_INT 4
22200: DOUBLE
22201: EQUAL
22202: IFTRUE 22206
22204: GO 22228
22206: POP
// withjmmvip = withjmmvip ^ [ cyrus ] ; 5 :
22207: LD_ADDR_LOC 94
22211: PUSH
22212: LD_LOC 94
22216: PUSH
22217: LD_EXP 21
22221: PUSH
22222: EMPTY
22223: LIST
22224: ADD
22225: ST_TO_ADDR
22226: GO 22284
22228: LD_INT 5
22230: DOUBLE
22231: EQUAL
22232: IFTRUE 22236
22234: GO 22258
22236: POP
// withjmmlatevip = withjmmlatevip ^ [ cyrus ] ; - 1 :
22237: LD_ADDR_LOC 95
22241: PUSH
22242: LD_LOC 95
22246: PUSH
22247: LD_EXP 21
22251: PUSH
22252: EMPTY
22253: LIST
22254: ADD
22255: ST_TO_ADDR
22256: GO 22284
22258: LD_INT 1
22260: NEG
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22283
22267: POP
// buildquery ( neny CyrusLoc , [ OK ] ) ; end ;
22268: LD_STRING neny CyrusLoc
22270: PPUSH
22271: LD_STRING OK
22273: PUSH
22274: EMPTY
22275: LIST
22276: PPUSH
22277: CALL_OW 99
22281: GO 22284
22283: POP
// end ; if not testcharacters ( Bobby ) or not checkcharacterset ( Bobby ) then
22284: LD_STRING Bobby
22286: PPUSH
22287: CALL_OW 28
22291: NOT
22292: PUSH
22293: LD_STRING Bobby
22295: PPUSH
22296: CALL_OW 29
22300: NOT
22301: OR
22302: IFFALSE 22314
// bobby = 0 else
22304: LD_ADDR_EXP 22
22308: PUSH
22309: LD_INT 0
22311: ST_TO_ADDR
22312: GO 22495
// begin bobby = createcharacter ( Bobby ) ;
22314: LD_ADDR_EXP 22
22318: PUSH
22319: LD_STRING Bobby
22321: PPUSH
22322: CALL_OW 34
22326: ST_TO_ADDR
// bobbyloc = loadvariable ( BobbyLoc , - 1 ) ;
22327: LD_ADDR_EXP 39
22331: PUSH
22332: LD_STRING BobbyLoc
22334: PPUSH
22335: LD_INT 1
22337: NEG
22338: PPUSH
22339: CALL_OW 30
22343: ST_TO_ADDR
// case bobbyloc of 2 :
22344: LD_EXP 39
22348: PUSH
22349: LD_INT 2
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22357
22355: GO 22379
22357: POP
// gamma2vip = gamma2vip ^ [ bobby ] ; 3 :
22358: LD_ADDR_LOC 92
22362: PUSH
22363: LD_LOC 92
22367: PUSH
22368: LD_EXP 22
22372: PUSH
22373: EMPTY
22374: LIST
22375: ADD
22376: ST_TO_ADDR
22377: GO 22495
22379: LD_INT 3
22381: DOUBLE
22382: EQUAL
22383: IFTRUE 22387
22385: GO 22409
22387: POP
// gamma3vip = gamma3vip ^ [ bobby ] ; 4 :
22388: LD_ADDR_LOC 93
22392: PUSH
22393: LD_LOC 93
22397: PUSH
22398: LD_EXP 22
22402: PUSH
22403: EMPTY
22404: LIST
22405: ADD
22406: ST_TO_ADDR
22407: GO 22495
22409: LD_INT 4
22411: DOUBLE
22412: EQUAL
22413: IFTRUE 22417
22415: GO 22439
22417: POP
// withjmmvip = withjmmvip ^ [ bobby ] ; 5 :
22418: LD_ADDR_LOC 94
22422: PUSH
22423: LD_LOC 94
22427: PUSH
22428: LD_EXP 22
22432: PUSH
22433: EMPTY
22434: LIST
22435: ADD
22436: ST_TO_ADDR
22437: GO 22495
22439: LD_INT 5
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22469
22447: POP
// withjmmlatevip = withjmmlatevip ^ [ bobby ] ; - 1 :
22448: LD_ADDR_LOC 95
22452: PUSH
22453: LD_LOC 95
22457: PUSH
22458: LD_EXP 22
22462: PUSH
22463: EMPTY
22464: LIST
22465: ADD
22466: ST_TO_ADDR
22467: GO 22495
22469: LD_INT 1
22471: NEG
22472: DOUBLE
22473: EQUAL
22474: IFTRUE 22478
22476: GO 22494
22478: POP
// buildquery ( neny BobbyLoc , [ OK ] ) ; end ;
22479: LD_STRING neny BobbyLoc
22481: PPUSH
22482: LD_STRING OK
22484: PUSH
22485: EMPTY
22486: LIST
22487: PPUSH
22488: CALL_OW 99
22492: GO 22495
22494: POP
// end ; if not testcharacters ( Denis ) or not checkcharacterset ( Denis ) then
22495: LD_STRING Denis
22497: PPUSH
22498: CALL_OW 28
22502: NOT
22503: PUSH
22504: LD_STRING Denis
22506: PPUSH
22507: CALL_OW 29
22511: NOT
22512: OR
22513: IFFALSE 22525
// denis = 0 else
22515: LD_ADDR_EXP 23
22519: PUSH
22520: LD_INT 0
22522: ST_TO_ADDR
22523: GO 22706
// begin denis = createcharacter ( Denis ) ;
22525: LD_ADDR_EXP 23
22529: PUSH
22530: LD_STRING Denis
22532: PPUSH
22533: CALL_OW 34
22537: ST_TO_ADDR
// denisloc = loadvariable ( DenisLoc , - 1 ) ;
22538: LD_ADDR_EXP 40
22542: PUSH
22543: LD_STRING DenisLoc
22545: PPUSH
22546: LD_INT 1
22548: NEG
22549: PPUSH
22550: CALL_OW 30
22554: ST_TO_ADDR
// case denisloc of 2 :
22555: LD_EXP 40
22559: PUSH
22560: LD_INT 2
22562: DOUBLE
22563: EQUAL
22564: IFTRUE 22568
22566: GO 22590
22568: POP
// gamma2vip = gamma2vip ^ [ denis ] ; 3 :
22569: LD_ADDR_LOC 92
22573: PUSH
22574: LD_LOC 92
22578: PUSH
22579: LD_EXP 23
22583: PUSH
22584: EMPTY
22585: LIST
22586: ADD
22587: ST_TO_ADDR
22588: GO 22706
22590: LD_INT 3
22592: DOUBLE
22593: EQUAL
22594: IFTRUE 22598
22596: GO 22620
22598: POP
// gamma3vip = gamma3vip ^ [ denis ] ; 4 :
22599: LD_ADDR_LOC 93
22603: PUSH
22604: LD_LOC 93
22608: PUSH
22609: LD_EXP 23
22613: PUSH
22614: EMPTY
22615: LIST
22616: ADD
22617: ST_TO_ADDR
22618: GO 22706
22620: LD_INT 4
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22650
22628: POP
// withjmmvip = withjmmvip ^ [ denis ] ; 5 :
22629: LD_ADDR_LOC 94
22633: PUSH
22634: LD_LOC 94
22638: PUSH
22639: LD_EXP 23
22643: PUSH
22644: EMPTY
22645: LIST
22646: ADD
22647: ST_TO_ADDR
22648: GO 22706
22650: LD_INT 5
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22680
22658: POP
// withjmmlatevip = withjmmlatevip ^ [ denis ] ; - 1 :
22659: LD_ADDR_LOC 95
22663: PUSH
22664: LD_LOC 95
22668: PUSH
22669: LD_EXP 23
22673: PUSH
22674: EMPTY
22675: LIST
22676: ADD
22677: ST_TO_ADDR
22678: GO 22706
22680: LD_INT 1
22682: NEG
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22705
22689: POP
// buildquery ( neny DenisLoc , [ OK ] ) ; end ;
22690: LD_STRING neny DenisLoc
22692: PPUSH
22693: LD_STRING OK
22695: PUSH
22696: EMPTY
22697: LIST
22698: PPUSH
22699: CALL_OW 99
22703: GO 22706
22705: POP
// end ; yamoko = 0 ;
22706: LD_ADDR_EXP 24
22710: PUSH
22711: LD_INT 0
22713: ST_TO_ADDR
// if not frank then
22714: LD_EXP 19
22718: NOT
22719: IFFALSE 22932
// if not testcharacters ( Yamoko ) or not checkcharacterset ( Yamoko ) then
22721: LD_STRING Yamoko
22723: PPUSH
22724: CALL_OW 28
22728: NOT
22729: PUSH
22730: LD_STRING Yamoko
22732: PPUSH
22733: CALL_OW 29
22737: NOT
22738: OR
22739: IFFALSE 22751
// yamoko = 0 else
22741: LD_ADDR_EXP 24
22745: PUSH
22746: LD_INT 0
22748: ST_TO_ADDR
22749: GO 22932
// begin yamoko = createcharacter ( Yamoko ) ;
22751: LD_ADDR_EXP 24
22755: PUSH
22756: LD_STRING Yamoko
22758: PPUSH
22759: CALL_OW 34
22763: ST_TO_ADDR
// yamokoloc = loadvariable ( YamokoLoc , - 1 ) ;
22764: LD_ADDR_EXP 41
22768: PUSH
22769: LD_STRING YamokoLoc
22771: PPUSH
22772: LD_INT 1
22774: NEG
22775: PPUSH
22776: CALL_OW 30
22780: ST_TO_ADDR
// case yamokoloc of 2 :
22781: LD_EXP 41
22785: PUSH
22786: LD_INT 2
22788: DOUBLE
22789: EQUAL
22790: IFTRUE 22794
22792: GO 22816
22794: POP
// gamma2vip = gamma2vip ^ [ yamoko ] ; 3 :
22795: LD_ADDR_LOC 92
22799: PUSH
22800: LD_LOC 92
22804: PUSH
22805: LD_EXP 24
22809: PUSH
22810: EMPTY
22811: LIST
22812: ADD
22813: ST_TO_ADDR
22814: GO 22932
22816: LD_INT 3
22818: DOUBLE
22819: EQUAL
22820: IFTRUE 22824
22822: GO 22846
22824: POP
// gamma3vip = gamma3vip ^ [ yamoko ] ; 4 :
22825: LD_ADDR_LOC 93
22829: PUSH
22830: LD_LOC 93
22834: PUSH
22835: LD_EXP 24
22839: PUSH
22840: EMPTY
22841: LIST
22842: ADD
22843: ST_TO_ADDR
22844: GO 22932
22846: LD_INT 4
22848: DOUBLE
22849: EQUAL
22850: IFTRUE 22854
22852: GO 22876
22854: POP
// withjmmvip = withjmmvip ^ [ yamoko ] ; 5 :
22855: LD_ADDR_LOC 94
22859: PUSH
22860: LD_LOC 94
22864: PUSH
22865: LD_EXP 24
22869: PUSH
22870: EMPTY
22871: LIST
22872: ADD
22873: ST_TO_ADDR
22874: GO 22932
22876: LD_INT 5
22878: DOUBLE
22879: EQUAL
22880: IFTRUE 22884
22882: GO 22906
22884: POP
// withjmmlatevip = withjmmlatevip ^ [ yamoko ] ; - 1 :
22885: LD_ADDR_LOC 95
22889: PUSH
22890: LD_LOC 95
22894: PUSH
22895: LD_EXP 24
22899: PUSH
22900: EMPTY
22901: LIST
22902: ADD
22903: ST_TO_ADDR
22904: GO 22932
22906: LD_INT 1
22908: NEG
22909: DOUBLE
22910: EQUAL
22911: IFTRUE 22915
22913: GO 22931
22915: POP
// buildquery ( neny YamokoLoc , [ OK ] ) ; end ;
22916: LD_STRING neny YamokoLoc
22918: PPUSH
22919: LD_STRING OK
22921: PUSH
22922: EMPTY
22923: LIST
22924: PPUSH
22925: CALL_OW 99
22929: GO 22932
22931: POP
// end ; posilya = [ ] ;
22932: LD_ADDR_EXP 27
22936: PUSH
22937: EMPTY
22938: ST_TO_ADDR
// if gamma3vip >= 2 then
22939: LD_LOC 93
22943: PUSH
22944: LD_INT 2
22946: GREATEREQUAL
22947: IFFALSE 22978
// posilya = [ gamma3vip [ 1 ] , gamma3vip [ 2 ] ] else
22949: LD_ADDR_EXP 27
22953: PUSH
22954: LD_LOC 93
22958: PUSH
22959: LD_INT 1
22961: ARRAY
22962: PUSH
22963: LD_LOC 93
22967: PUSH
22968: LD_INT 2
22970: ARRAY
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: ST_TO_ADDR
22976: GO 23196
// begin tmp = 0 + gamma3vip + othergamma3 ;
22978: LD_ADDR_VAR 0 2
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: LD_LOC 93
22990: PLUS
22991: PUSH
22992: LD_LOC 88
22996: PLUS
22997: ST_TO_ADDR
// if tmp < 2 then
22998: LD_VAR 0 2
23002: PUSH
23003: LD_INT 2
23005: LESS
23006: IFFALSE 23131
// begin posilya = gamma3vip ^ othergamma3 ;
23008: LD_ADDR_EXP 27
23012: PUSH
23013: LD_LOC 93
23017: PUSH
23018: LD_LOC 88
23022: ADD
23023: ST_TO_ADDR
// if ( not glad ) or ( glad and gladloc <> 3 ) then
23024: LD_EXP 34
23028: NOT
23029: PUSH
23030: LD_EXP 34
23034: PUSH
23035: LD_EXP 44
23039: PUSH
23040: LD_INT 3
23042: NONEQUAL
23043: AND
23044: OR
23045: IFFALSE 23090
// begin preparescientist ( sex_male , 2 ) ;
23047: LD_INT 1
23049: PPUSH
23050: LD_INT 2
23052: PPUSH
23053: CALL_OW 384
// posilya = posilya ^ [ createhuman ] ;
23057: LD_ADDR_EXP 27
23061: PUSH
23062: LD_EXP 27
23066: PUSH
23067: CALL_OW 44
23071: PUSH
23072: EMPTY
23073: LIST
23074: ADD
23075: ST_TO_ADDR
// tmp = tmp + 1 ;
23076: LD_ADDR_VAR 0 2
23080: PUSH
23081: LD_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PLUS
23089: ST_TO_ADDR
// end ; if tmp = 1 then
23090: LD_VAR 0 2
23094: PUSH
23095: LD_INT 1
23097: EQUAL
23098: IFFALSE 23129
// begin preparesoldier ( sex_male , 2 ) ;
23100: LD_INT 1
23102: PPUSH
23103: LD_INT 2
23105: PPUSH
23106: CALL_OW 381
// posilya = posilya ^ [ createhuman ] ;
23110: LD_ADDR_EXP 27
23114: PUSH
23115: LD_EXP 27
23119: PUSH
23120: CALL_OW 44
23124: PUSH
23125: EMPTY
23126: LIST
23127: ADD
23128: ST_TO_ADDR
// end ; end else
23129: GO 23196
// begin tmp1 = [ ] ;
23131: LD_ADDR_VAR 0 3
23135: PUSH
23136: EMPTY
23137: ST_TO_ADDR
// tmp1 = gamma3vip ^ othergamma3 ;
23138: LD_ADDR_VAR 0 3
23142: PUSH
23143: LD_LOC 93
23147: PUSH
23148: LD_LOC 88
23152: ADD
23153: ST_TO_ADDR
// for tmp = 1 to 2 do
23154: LD_ADDR_VAR 0 2
23158: PUSH
23159: DOUBLE
23160: LD_INT 1
23162: DEC
23163: ST_TO_ADDR
23164: LD_INT 2
23166: PUSH
23167: FOR_TO
23168: IFFALSE 23194
// posilya = posilya ^ tmp1 [ tmp ] ;
23170: LD_ADDR_EXP 27
23174: PUSH
23175: LD_EXP 27
23179: PUSH
23180: LD_VAR 0 3
23184: PUSH
23185: LD_VAR 0 2
23189: ARRAY
23190: ADD
23191: ST_TO_ADDR
23192: GO 23167
23194: POP
23195: POP
// end ; end ; posilyb = [ john_ ] ;
23196: LD_ADDR_EXP 28
23200: PUSH
23201: LD_EXP 20
23205: PUSH
23206: EMPTY
23207: LIST
23208: ST_TO_ADDR
// if withjmmvip >= 4 then
23209: LD_LOC 94
23213: PUSH
23214: LD_INT 4
23216: GREATEREQUAL
23217: IFFALSE 23274
// posilyb = [ john_ , withjmmvip [ 1 ] , withjmmvip [ 2 ] , withjmmvip [ 3 ] , withjmmvip [ 4 ] ] else
23219: LD_ADDR_EXP 28
23223: PUSH
23224: LD_EXP 20
23228: PUSH
23229: LD_LOC 94
23233: PUSH
23234: LD_INT 1
23236: ARRAY
23237: PUSH
23238: LD_LOC 94
23242: PUSH
23243: LD_INT 2
23245: ARRAY
23246: PUSH
23247: LD_LOC 94
23251: PUSH
23252: LD_INT 3
23254: ARRAY
23255: PUSH
23256: LD_LOC 94
23260: PUSH
23261: LD_INT 4
23263: ARRAY
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 23542
// begin tmp = 0 + withjmmvip + otherjmm ;
23274: LD_ADDR_VAR 0 2
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_LOC 94
23286: PLUS
23287: PUSH
23288: LD_LOC 90
23292: PLUS
23293: ST_TO_ADDR
// if tmp < 4 then
23294: LD_VAR 0 2
23298: PUSH
23299: LD_INT 4
23301: LESS
23302: IFFALSE 23477
// begin posilyb = [ john_ ] ^ withjmmvip ^ otherjmm ;
23304: LD_ADDR_EXP 28
23308: PUSH
23309: LD_EXP 20
23313: PUSH
23314: EMPTY
23315: LIST
23316: PUSH
23317: LD_LOC 94
23321: ADD
23322: PUSH
23323: LD_LOC 90
23327: ADD
23328: ST_TO_ADDR
// if tmp = 0 then
23329: LD_VAR 0 2
23333: PUSH
23334: LD_INT 0
23336: EQUAL
23337: IFFALSE 23368
// begin preparemechanic ( sex_male , 3 ) ;
23339: LD_INT 1
23341: PPUSH
23342: LD_INT 3
23344: PPUSH
23345: CALL_OW 383
// posilyb = posilyb ^ [ createhuman ] ;
23349: LD_ADDR_EXP 28
23353: PUSH
23354: LD_EXP 28
23358: PUSH
23359: CALL_OW 44
23363: PUSH
23364: EMPTY
23365: LIST
23366: ADD
23367: ST_TO_ADDR
// end ; if tmp <= 1 then
23368: LD_VAR 0 2
23372: PUSH
23373: LD_INT 1
23375: LESSEQUAL
23376: IFFALSE 23407
// begin preparesoldier ( sex_female , 3 ) ;
23378: LD_INT 2
23380: PPUSH
23381: LD_INT 3
23383: PPUSH
23384: CALL_OW 381
// posilyb = posilyb ^ [ createhuman ] ;
23388: LD_ADDR_EXP 28
23392: PUSH
23393: LD_EXP 28
23397: PUSH
23398: CALL_OW 44
23402: PUSH
23403: EMPTY
23404: LIST
23405: ADD
23406: ST_TO_ADDR
// end ; if tmp <= 2 then
23407: LD_VAR 0 2
23411: PUSH
23412: LD_INT 2
23414: LESSEQUAL
23415: IFFALSE 23446
// begin preparesoldier ( sex_male , 3 ) ;
23417: LD_INT 1
23419: PPUSH
23420: LD_INT 3
23422: PPUSH
23423: CALL_OW 381
// posilyb = posilyb ^ [ createhuman ] ;
23427: LD_ADDR_EXP 28
23431: PUSH
23432: LD_EXP 28
23436: PUSH
23437: CALL_OW 44
23441: PUSH
23442: EMPTY
23443: LIST
23444: ADD
23445: ST_TO_ADDR
// end ; preparesoldier ( sex_male , 3 ) ;
23446: LD_INT 1
23448: PPUSH
23449: LD_INT 3
23451: PPUSH
23452: CALL_OW 381
// posilyb = posilyb ^ [ createhuman ] ;
23456: LD_ADDR_EXP 28
23460: PUSH
23461: LD_EXP 28
23465: PUSH
23466: CALL_OW 44
23470: PUSH
23471: EMPTY
23472: LIST
23473: ADD
23474: ST_TO_ADDR
// end else
23475: GO 23542
// begin tmp1 = [ ] ;
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: EMPTY
23483: ST_TO_ADDR
// tmp1 = withjmmvip ^ otherjmm ;
23484: LD_ADDR_VAR 0 3
23488: PUSH
23489: LD_LOC 94
23493: PUSH
23494: LD_LOC 90
23498: ADD
23499: ST_TO_ADDR
// for tmp = 1 to 4 do
23500: LD_ADDR_VAR 0 2
23504: PUSH
23505: DOUBLE
23506: LD_INT 1
23508: DEC
23509: ST_TO_ADDR
23510: LD_INT 4
23512: PUSH
23513: FOR_TO
23514: IFFALSE 23540
// posilyb = posilyb ^ tmp1 [ tmp ] ;
23516: LD_ADDR_EXP 28
23520: PUSH
23521: LD_EXP 28
23525: PUSH
23526: LD_VAR 0 3
23530: PUSH
23531: LD_VAR 0 2
23535: ARRAY
23536: ADD
23537: ST_TO_ADDR
23538: GO 23513
23540: POP
23541: POP
// end ; end ; if not placeunitxyr ( amhsold0 , 44 , 8 , 3 , false ) then
23542: LD_EXP 25
23546: PPUSH
23547: LD_INT 44
23549: PPUSH
23550: LD_INT 8
23552: PPUSH
23553: LD_INT 3
23555: PPUSH
23556: LD_INT 0
23558: PPUSH
23559: CALL_OW 50
23563: NOT
23564: IFFALSE 23581
// placeunitarea ( amhsold0 , ambase , false ) ;
23566: LD_EXP 25
23570: PPUSH
23571: LD_INT 8
23573: PPUSH
23574: LD_INT 0
23576: PPUSH
23577: CALL_OW 49
// tmz = gamma2vip union othergamma2 union otherunplaced ;
23581: LD_ADDR_VAR 0 4
23585: PUSH
23586: LD_LOC 92
23590: PUSH
23591: LD_LOC 87
23595: UNION
23596: PUSH
23597: LD_LOC 89
23601: UNION
23602: ST_TO_ADDR
// tmz_ = tmz ;
23603: LD_ADDR_VAR 0 5
23607: PUSH
23608: LD_VAR 0 4
23612: ST_TO_ADDR
// tm_c = unitfilter ( tmz , [ [ f_class , class_soldier ] ] ) ;
23613: LD_ADDR_VAR 0 6
23617: PUSH
23618: LD_VAR 0 4
23622: PPUSH
23623: LD_INT 25
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: PPUSH
23636: CALL_OW 72
23640: ST_TO_ADDR
// tm_e = unitfilter ( tmz , [ [ f_class , class_engineer ] ] ) ;
23641: LD_ADDR_VAR 0 7
23645: PUSH
23646: LD_VAR 0 4
23650: PPUSH
23651: LD_INT 25
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: EMPTY
23662: LIST
23663: PPUSH
23664: CALL_OW 72
23668: ST_TO_ADDR
// tm_m = unitfilter ( tmz , [ [ f_class , class_mechanic ] ] ) ;
23669: LD_ADDR_VAR 0 8
23673: PUSH
23674: LD_VAR 0 4
23678: PPUSH
23679: LD_INT 25
23681: PUSH
23682: LD_INT 3
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: PPUSH
23692: CALL_OW 72
23696: ST_TO_ADDR
// tm_s = unitfilter ( tmz , [ [ f_class , class_scientistic ] ] ) ;
23697: LD_ADDR_VAR 0 9
23701: PUSH
23702: LD_VAR 0 4
23706: PPUSH
23707: LD_INT 25
23709: PUSH
23710: LD_INT 4
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: PPUSH
23720: CALL_OW 72
23724: ST_TO_ADDR
// if tmz >= 6 then
23725: LD_VAR 0 4
23729: PUSH
23730: LD_INT 6
23732: GREATEREQUAL
23733: IFFALSE 24392
// begin tmp_c = 0 + tm_c ;
23735: LD_ADDR_VAR 0 10
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_VAR 0 6
23747: PLUS
23748: ST_TO_ADDR
// if tmp_c > 3 then
23749: LD_VAR 0 10
23753: PUSH
23754: LD_INT 3
23756: GREATER
23757: IFFALSE 23767
// tmp_c = 2 ;
23759: LD_ADDR_VAR 0 10
23763: PUSH
23764: LD_INT 2
23766: ST_TO_ADDR
// for tmp1 = 1 to tmp_c do
23767: LD_ADDR_VAR 0 3
23771: PUSH
23772: DOUBLE
23773: LD_INT 1
23775: DEC
23776: ST_TO_ADDR
23777: LD_VAR 0 10
23781: PUSH
23782: FOR_TO
23783: IFFALSE 23863
// begin if not placeunitxyr ( tm_c [ tmp1 ] , 52 , 36 , 3 , false ) then
23785: LD_VAR 0 6
23789: PUSH
23790: LD_VAR 0 3
23794: ARRAY
23795: PPUSH
23796: LD_INT 52
23798: PPUSH
23799: LD_INT 36
23801: PPUSH
23802: LD_INT 3
23804: PPUSH
23805: LD_INT 0
23807: PPUSH
23808: CALL_OW 50
23812: NOT
23813: IFFALSE 23836
// placeunitarea ( tm_c [ tmp1 ] , ambase , false ) ;
23815: LD_VAR 0 6
23819: PUSH
23820: LD_VAR 0 3
23824: ARRAY
23825: PPUSH
23826: LD_INT 8
23828: PPUSH
23829: LD_INT 0
23831: PPUSH
23832: CALL_OW 49
// tmz = tmz diff [ tm_c [ tmp1 ] ] ;
23836: LD_ADDR_VAR 0 4
23840: PUSH
23841: LD_VAR 0 4
23845: PUSH
23846: LD_VAR 0 6
23850: PUSH
23851: LD_VAR 0 3
23855: ARRAY
23856: PUSH
23857: EMPTY
23858: LIST
23859: DIFF
23860: ST_TO_ADDR
// end ;
23861: GO 23782
23863: POP
23864: POP
// tot = tmp_c ;
23865: LD_ADDR_VAR 0 14
23869: PUSH
23870: LD_VAR 0 10
23874: ST_TO_ADDR
// tmp_m = 0 + tm_m ;
23875: LD_ADDR_VAR 0 12
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_VAR 0 8
23887: PLUS
23888: ST_TO_ADDR
// if tmp_m > 3 then
23889: LD_VAR 0 12
23893: PUSH
23894: LD_INT 3
23896: GREATER
23897: IFFALSE 23907
// tmp_m = 2 ;
23899: LD_ADDR_VAR 0 12
23903: PUSH
23904: LD_INT 2
23906: ST_TO_ADDR
// for tmp1 = 1 to tmp_m do
23907: LD_ADDR_VAR 0 3
23911: PUSH
23912: DOUBLE
23913: LD_INT 1
23915: DEC
23916: ST_TO_ADDR
23917: LD_VAR 0 12
23921: PUSH
23922: FOR_TO
23923: IFFALSE 24003
// begin if not placeunitxyr ( tm_m [ tmp1 ] , 45 , 16 , 3 , false ) then
23925: LD_VAR 0 8
23929: PUSH
23930: LD_VAR 0 3
23934: ARRAY
23935: PPUSH
23936: LD_INT 45
23938: PPUSH
23939: LD_INT 16
23941: PPUSH
23942: LD_INT 3
23944: PPUSH
23945: LD_INT 0
23947: PPUSH
23948: CALL_OW 50
23952: NOT
23953: IFFALSE 23976
// placeunitarea ( tm_m [ tmp1 ] , ambase , false ) ;
23955: LD_VAR 0 8
23959: PUSH
23960: LD_VAR 0 3
23964: ARRAY
23965: PPUSH
23966: LD_INT 8
23968: PPUSH
23969: LD_INT 0
23971: PPUSH
23972: CALL_OW 49
// tmz = tmz diff [ tm_m [ tmp1 ] ] ;
23976: LD_ADDR_VAR 0 4
23980: PUSH
23981: LD_VAR 0 4
23985: PUSH
23986: LD_VAR 0 8
23990: PUSH
23991: LD_VAR 0 3
23995: ARRAY
23996: PUSH
23997: EMPTY
23998: LIST
23999: DIFF
24000: ST_TO_ADDR
// end ;
24001: GO 23922
24003: POP
24004: POP
// tot = tot + tmp_m ;
24005: LD_ADDR_VAR 0 14
24009: PUSH
24010: LD_VAR 0 14
24014: PUSH
24015: LD_VAR 0 12
24019: PLUS
24020: ST_TO_ADDR
// tmp_e = 0 + tm_e ;
24021: LD_ADDR_VAR 0 11
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: LD_VAR 0 7
24033: PLUS
24034: ST_TO_ADDR
// if tmp_e > 2 then
24035: LD_VAR 0 11
24039: PUSH
24040: LD_INT 2
24042: GREATER
24043: IFFALSE 24053
// tmp_e = 1 ;
24045: LD_ADDR_VAR 0 11
24049: PUSH
24050: LD_INT 1
24052: ST_TO_ADDR
// for tmp1 = 1 to tmp_e do
24053: LD_ADDR_VAR 0 3
24057: PUSH
24058: DOUBLE
24059: LD_INT 1
24061: DEC
24062: ST_TO_ADDR
24063: LD_VAR 0 11
24067: PUSH
24068: FOR_TO
24069: IFFALSE 24149
// begin if not placeunitxyr ( tm_e [ tmp1 ] , 52 , 16 , 3 , false ) then
24071: LD_VAR 0 7
24075: PUSH
24076: LD_VAR 0 3
24080: ARRAY
24081: PPUSH
24082: LD_INT 52
24084: PPUSH
24085: LD_INT 16
24087: PPUSH
24088: LD_INT 3
24090: PPUSH
24091: LD_INT 0
24093: PPUSH
24094: CALL_OW 50
24098: NOT
24099: IFFALSE 24122
// placeunitarea ( tm_e [ tmp1 ] , ambase , false ) ;
24101: LD_VAR 0 7
24105: PUSH
24106: LD_VAR 0 3
24110: ARRAY
24111: PPUSH
24112: LD_INT 8
24114: PPUSH
24115: LD_INT 0
24117: PPUSH
24118: CALL_OW 49
// tmz = tmz diff [ tm_e [ tmp1 ] ] ;
24122: LD_ADDR_VAR 0 4
24126: PUSH
24127: LD_VAR 0 4
24131: PUSH
24132: LD_VAR 0 7
24136: PUSH
24137: LD_VAR 0 3
24141: ARRAY
24142: PUSH
24143: EMPTY
24144: LIST
24145: DIFF
24146: ST_TO_ADDR
// end ;
24147: GO 24068
24149: POP
24150: POP
// tot = tot + tmp_e ;
24151: LD_ADDR_VAR 0 14
24155: PUSH
24156: LD_VAR 0 14
24160: PUSH
24161: LD_VAR 0 11
24165: PLUS
24166: ST_TO_ADDR
// tmp_s = 0 + tm_s ;
24167: LD_ADDR_VAR 0 13
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: LD_VAR 0 9
24179: PLUS
24180: ST_TO_ADDR
// if tmp_s > 2 then
24181: LD_VAR 0 13
24185: PUSH
24186: LD_INT 2
24188: GREATER
24189: IFFALSE 24199
// tmp_s = 1 ;
24191: LD_ADDR_VAR 0 13
24195: PUSH
24196: LD_INT 1
24198: ST_TO_ADDR
// for tmp1 = 1 to tmp_s do
24199: LD_ADDR_VAR 0 3
24203: PUSH
24204: DOUBLE
24205: LD_INT 1
24207: DEC
24208: ST_TO_ADDR
24209: LD_VAR 0 13
24213: PUSH
24214: FOR_TO
24215: IFFALSE 24295
// begin if not placeunitxyr ( tm_s [ tmp1 ] , 60 , 18 , 3 , false ) then
24217: LD_VAR 0 9
24221: PUSH
24222: LD_VAR 0 3
24226: ARRAY
24227: PPUSH
24228: LD_INT 60
24230: PPUSH
24231: LD_INT 18
24233: PPUSH
24234: LD_INT 3
24236: PPUSH
24237: LD_INT 0
24239: PPUSH
24240: CALL_OW 50
24244: NOT
24245: IFFALSE 24268
// placeunitarea ( tm_s [ tmp1 ] , ambase , false ) ;
24247: LD_VAR 0 9
24251: PUSH
24252: LD_VAR 0 3
24256: ARRAY
24257: PPUSH
24258: LD_INT 8
24260: PPUSH
24261: LD_INT 0
24263: PPUSH
24264: CALL_OW 49
// tmz = tmz diff [ tm_s [ tmp1 ] ] ;
24268: LD_ADDR_VAR 0 4
24272: PUSH
24273: LD_VAR 0 4
24277: PUSH
24278: LD_VAR 0 9
24282: PUSH
24283: LD_VAR 0 3
24287: ARRAY
24288: PUSH
24289: EMPTY
24290: LIST
24291: DIFF
24292: ST_TO_ADDR
// end ;
24293: GO 24214
24295: POP
24296: POP
// tot = tot + tmp_s ;
24297: LD_ADDR_VAR 0 14
24301: PUSH
24302: LD_VAR 0 14
24306: PUSH
24307: LD_VAR 0 13
24311: PLUS
24312: ST_TO_ADDR
// for tmp1 = 1 to ( 6 - tot ) do
24313: LD_ADDR_VAR 0 3
24317: PUSH
24318: DOUBLE
24319: LD_INT 1
24321: DEC
24322: ST_TO_ADDR
24323: LD_INT 6
24325: PUSH
24326: LD_VAR 0 14
24330: MINUS
24331: PUSH
24332: FOR_TO
24333: IFFALSE 24388
// if not placeunitxyr ( tmz [ tmp1 ] , 45 , 8 , 5 , false ) then
24335: LD_VAR 0 4
24339: PUSH
24340: LD_VAR 0 3
24344: ARRAY
24345: PPUSH
24346: LD_INT 45
24348: PPUSH
24349: LD_INT 8
24351: PPUSH
24352: LD_INT 5
24354: PPUSH
24355: LD_INT 0
24357: PPUSH
24358: CALL_OW 50
24362: NOT
24363: IFFALSE 24386
// placeunitarea ( tmz [ tmp1 ] , ambase , false ) ;
24365: LD_VAR 0 4
24369: PUSH
24370: LD_VAR 0 3
24374: ARRAY
24375: PPUSH
24376: LD_INT 8
24378: PPUSH
24379: LD_INT 0
24381: PPUSH
24382: CALL_OW 49
24386: GO 24332
24388: POP
24389: POP
// end else
24390: GO 25384
// begin tmp_c = 0 + tm_c ;
24392: LD_ADDR_VAR 0 10
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_VAR 0 6
24404: PLUS
24405: ST_TO_ADDR
// if tmp_c > 3 then
24406: LD_VAR 0 10
24410: PUSH
24411: LD_INT 3
24413: GREATER
24414: IFFALSE 24424
// tmp_c = 2 ;
24416: LD_ADDR_VAR 0 10
24420: PUSH
24421: LD_INT 2
24423: ST_TO_ADDR
// for tmp1 = 1 to tmp_c do
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: DOUBLE
24430: LD_INT 1
24432: DEC
24433: ST_TO_ADDR
24434: LD_VAR 0 10
24438: PUSH
24439: FOR_TO
24440: IFFALSE 24520
// begin if not placeunitxyr ( tm_c [ tmp1 ] , 52 , 36 , 3 , false ) then
24442: LD_VAR 0 6
24446: PUSH
24447: LD_VAR 0 3
24451: ARRAY
24452: PPUSH
24453: LD_INT 52
24455: PPUSH
24456: LD_INT 36
24458: PPUSH
24459: LD_INT 3
24461: PPUSH
24462: LD_INT 0
24464: PPUSH
24465: CALL_OW 50
24469: NOT
24470: IFFALSE 24493
// placeunitarea ( tm_c [ tmp1 ] , ambase , false ) ;
24472: LD_VAR 0 6
24476: PUSH
24477: LD_VAR 0 3
24481: ARRAY
24482: PPUSH
24483: LD_INT 8
24485: PPUSH
24486: LD_INT 0
24488: PPUSH
24489: CALL_OW 49
// tmz = tmz diff [ tm_c [ tmp1 ] ] ;
24493: LD_ADDR_VAR 0 4
24497: PUSH
24498: LD_VAR 0 4
24502: PUSH
24503: LD_VAR 0 6
24507: PUSH
24508: LD_VAR 0 3
24512: ARRAY
24513: PUSH
24514: EMPTY
24515: LIST
24516: DIFF
24517: ST_TO_ADDR
// end ;
24518: GO 24439
24520: POP
24521: POP
// tot = tmp_c ;
24522: LD_ADDR_VAR 0 14
24526: PUSH
24527: LD_VAR 0 10
24531: ST_TO_ADDR
// if tmp_c = 0 then
24532: LD_VAR 0 10
24536: PUSH
24537: LD_INT 0
24539: EQUAL
24540: IFFALSE 24601
// begin preparesoldier ( sex_male , 3 ) ;
24542: LD_INT 1
24544: PPUSH
24545: LD_INT 3
24547: PPUSH
24548: CALL_OW 381
// tmp = createhuman ;
24552: LD_ADDR_VAR 0 2
24556: PUSH
24557: CALL_OW 44
24561: ST_TO_ADDR
// if not placeunitxyr ( tmp , 52 , 36 , 3 , false ) then
24562: LD_VAR 0 2
24566: PPUSH
24567: LD_INT 52
24569: PPUSH
24570: LD_INT 36
24572: PPUSH
24573: LD_INT 3
24575: PPUSH
24576: LD_INT 0
24578: PPUSH
24579: CALL_OW 50
24583: NOT
24584: IFFALSE 24601
// placeunitarea ( tmp , ambase , false ) ;
24586: LD_VAR 0 2
24590: PPUSH
24591: LD_INT 8
24593: PPUSH
24594: LD_INT 0
24596: PPUSH
24597: CALL_OW 49
// end ; if tmp_c <= 1 then
24601: LD_VAR 0 10
24605: PUSH
24606: LD_INT 1
24608: LESSEQUAL
24609: IFFALSE 24670
// begin preparesoldier ( sex_male , 3 ) ;
24611: LD_INT 1
24613: PPUSH
24614: LD_INT 3
24616: PPUSH
24617: CALL_OW 381
// tmp = createhuman ;
24621: LD_ADDR_VAR 0 2
24625: PUSH
24626: CALL_OW 44
24630: ST_TO_ADDR
// if not placeunitxyr ( tmp , 52 , 36 , 3 , false ) then
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 52
24638: PPUSH
24639: LD_INT 36
24641: PPUSH
24642: LD_INT 3
24644: PPUSH
24645: LD_INT 0
24647: PPUSH
24648: CALL_OW 50
24652: NOT
24653: IFFALSE 24670
// placeunitarea ( tmp , ambase , false ) ;
24655: LD_VAR 0 2
24659: PPUSH
24660: LD_INT 8
24662: PPUSH
24663: LD_INT 0
24665: PPUSH
24666: CALL_OW 49
// end ; tmp_m = 0 + tm_m ;
24670: LD_ADDR_VAR 0 12
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_VAR 0 8
24682: PLUS
24683: ST_TO_ADDR
// if tmp_m > 3 then
24684: LD_VAR 0 12
24688: PUSH
24689: LD_INT 3
24691: GREATER
24692: IFFALSE 24702
// tmp_m = 2 ;
24694: LD_ADDR_VAR 0 12
24698: PUSH
24699: LD_INT 2
24701: ST_TO_ADDR
// for tmp1 = 1 to tmp_m do
24702: LD_ADDR_VAR 0 3
24706: PUSH
24707: DOUBLE
24708: LD_INT 1
24710: DEC
24711: ST_TO_ADDR
24712: LD_VAR 0 12
24716: PUSH
24717: FOR_TO
24718: IFFALSE 24798
// begin if not placeunitxyr ( tm_m [ tmp1 ] , 45 , 16 , 3 , false ) then
24720: LD_VAR 0 8
24724: PUSH
24725: LD_VAR 0 3
24729: ARRAY
24730: PPUSH
24731: LD_INT 45
24733: PPUSH
24734: LD_INT 16
24736: PPUSH
24737: LD_INT 3
24739: PPUSH
24740: LD_INT 0
24742: PPUSH
24743: CALL_OW 50
24747: NOT
24748: IFFALSE 24771
// placeunitarea ( tm_m [ tmp1 ] , ambase , false ) ;
24750: LD_VAR 0 8
24754: PUSH
24755: LD_VAR 0 3
24759: ARRAY
24760: PPUSH
24761: LD_INT 8
24763: PPUSH
24764: LD_INT 0
24766: PPUSH
24767: CALL_OW 49
// tmz = tmz diff [ tm_m [ tmp1 ] ] ;
24771: LD_ADDR_VAR 0 4
24775: PUSH
24776: LD_VAR 0 4
24780: PUSH
24781: LD_VAR 0 8
24785: PUSH
24786: LD_VAR 0 3
24790: ARRAY
24791: PUSH
24792: EMPTY
24793: LIST
24794: DIFF
24795: ST_TO_ADDR
// end ;
24796: GO 24717
24798: POP
24799: POP
// tot = tot + tmp_m ;
24800: LD_ADDR_VAR 0 14
24804: PUSH
24805: LD_VAR 0 14
24809: PUSH
24810: LD_VAR 0 12
24814: PLUS
24815: ST_TO_ADDR
// if tmp_m = 0 then
24816: LD_VAR 0 12
24820: PUSH
24821: LD_INT 0
24823: EQUAL
24824: IFFALSE 24885
// begin preparemechanic ( sex_male , 3 ) ;
24826: LD_INT 1
24828: PPUSH
24829: LD_INT 3
24831: PPUSH
24832: CALL_OW 383
// tmp = createhuman ;
24836: LD_ADDR_VAR 0 2
24840: PUSH
24841: CALL_OW 44
24845: ST_TO_ADDR
// if not placeunitxyr ( tmp , 45 , 16 , 3 , false ) then
24846: LD_VAR 0 2
24850: PPUSH
24851: LD_INT 45
24853: PPUSH
24854: LD_INT 16
24856: PPUSH
24857: LD_INT 3
24859: PPUSH
24860: LD_INT 0
24862: PPUSH
24863: CALL_OW 50
24867: NOT
24868: IFFALSE 24885
// placeunitarea ( tmp , ambase , false ) ;
24870: LD_VAR 0 2
24874: PPUSH
24875: LD_INT 8
24877: PPUSH
24878: LD_INT 0
24880: PPUSH
24881: CALL_OW 49
// end ; if tmp_m <= 1 then
24885: LD_VAR 0 12
24889: PUSH
24890: LD_INT 1
24892: LESSEQUAL
24893: IFFALSE 24954
// begin preparemechanic ( sex_male , 3 ) ;
24895: LD_INT 1
24897: PPUSH
24898: LD_INT 3
24900: PPUSH
24901: CALL_OW 383
// tmp = createhuman ;
24905: LD_ADDR_VAR 0 2
24909: PUSH
24910: CALL_OW 44
24914: ST_TO_ADDR
// if not placeunitxyr ( tmp , 45 , 16 , 3 , false ) then
24915: LD_VAR 0 2
24919: PPUSH
24920: LD_INT 45
24922: PPUSH
24923: LD_INT 16
24925: PPUSH
24926: LD_INT 3
24928: PPUSH
24929: LD_INT 0
24931: PPUSH
24932: CALL_OW 50
24936: NOT
24937: IFFALSE 24954
// placeunitarea ( tmp , ambase , false ) ;
24939: LD_VAR 0 2
24943: PPUSH
24944: LD_INT 8
24946: PPUSH
24947: LD_INT 0
24949: PPUSH
24950: CALL_OW 49
// end ; tmp_e = 0 + tm_e ;
24954: LD_ADDR_VAR 0 11
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: LD_VAR 0 7
24966: PLUS
24967: ST_TO_ADDR
// if tmp_e > 2 then
24968: LD_VAR 0 11
24972: PUSH
24973: LD_INT 2
24975: GREATER
24976: IFFALSE 24986
// tmp_e = 1 ;
24978: LD_ADDR_VAR 0 11
24982: PUSH
24983: LD_INT 1
24985: ST_TO_ADDR
// for tmp1 = 1 to tmp_e do
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: DOUBLE
24992: LD_INT 1
24994: DEC
24995: ST_TO_ADDR
24996: LD_VAR 0 11
25000: PUSH
25001: FOR_TO
25002: IFFALSE 25082
// begin if not placeunitxyr ( tm_e [ tmp1 ] , 52 , 16 , 3 , false ) then
25004: LD_VAR 0 7
25008: PUSH
25009: LD_VAR 0 3
25013: ARRAY
25014: PPUSH
25015: LD_INT 52
25017: PPUSH
25018: LD_INT 16
25020: PPUSH
25021: LD_INT 3
25023: PPUSH
25024: LD_INT 0
25026: PPUSH
25027: CALL_OW 50
25031: NOT
25032: IFFALSE 25055
// placeunitarea ( tm_e [ tmp1 ] , ambase , false ) ;
25034: LD_VAR 0 7
25038: PUSH
25039: LD_VAR 0 3
25043: ARRAY
25044: PPUSH
25045: LD_INT 8
25047: PPUSH
25048: LD_INT 0
25050: PPUSH
25051: CALL_OW 49
// tmz = tmz diff [ tm_e [ tmp1 ] ] ;
25055: LD_ADDR_VAR 0 4
25059: PUSH
25060: LD_VAR 0 4
25064: PUSH
25065: LD_VAR 0 7
25069: PUSH
25070: LD_VAR 0 3
25074: ARRAY
25075: PUSH
25076: EMPTY
25077: LIST
25078: DIFF
25079: ST_TO_ADDR
// end ;
25080: GO 25001
25082: POP
25083: POP
// tot = tot + tmp_e ;
25084: LD_ADDR_VAR 0 14
25088: PUSH
25089: LD_VAR 0 14
25093: PUSH
25094: LD_VAR 0 11
25098: PLUS
25099: ST_TO_ADDR
// if tmp_e = 0 then
25100: LD_VAR 0 11
25104: PUSH
25105: LD_INT 0
25107: EQUAL
25108: IFFALSE 25169
// begin prepareengineer ( sex_female , 3 ) ;
25110: LD_INT 2
25112: PPUSH
25113: LD_INT 3
25115: PPUSH
25116: CALL_OW 382
// tmp = createhuman ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: CALL_OW 44
25129: ST_TO_ADDR
// if not placeunitxyr ( tmp , 52 , 16 , 3 , false ) then
25130: LD_VAR 0 2
25134: PPUSH
25135: LD_INT 52
25137: PPUSH
25138: LD_INT 16
25140: PPUSH
25141: LD_INT 3
25143: PPUSH
25144: LD_INT 0
25146: PPUSH
25147: CALL_OW 50
25151: NOT
25152: IFFALSE 25169
// placeunitarea ( tmp , ambase , false ) ;
25154: LD_VAR 0 2
25158: PPUSH
25159: LD_INT 8
25161: PPUSH
25162: LD_INT 0
25164: PPUSH
25165: CALL_OW 49
// end ; tmp_s = 0 + tm_s ;
25169: LD_ADDR_VAR 0 13
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_VAR 0 9
25181: PLUS
25182: ST_TO_ADDR
// if tmp_s > 2 then
25183: LD_VAR 0 13
25187: PUSH
25188: LD_INT 2
25190: GREATER
25191: IFFALSE 25201
// tmp_s = 1 ;
25193: LD_ADDR_VAR 0 13
25197: PUSH
25198: LD_INT 1
25200: ST_TO_ADDR
// for tmp1 = 1 to tmp_s do
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: DOUBLE
25207: LD_INT 1
25209: DEC
25210: ST_TO_ADDR
25211: LD_VAR 0 13
25215: PUSH
25216: FOR_TO
25217: IFFALSE 25297
// begin if not placeunitxyr ( tm_s [ tmp1 ] , 60 , 18 , 3 , false ) then
25219: LD_VAR 0 9
25223: PUSH
25224: LD_VAR 0 3
25228: ARRAY
25229: PPUSH
25230: LD_INT 60
25232: PPUSH
25233: LD_INT 18
25235: PPUSH
25236: LD_INT 3
25238: PPUSH
25239: LD_INT 0
25241: PPUSH
25242: CALL_OW 50
25246: NOT
25247: IFFALSE 25270
// placeunitarea ( tm_s [ tmp1 ] , ambase , false ) ;
25249: LD_VAR 0 9
25253: PUSH
25254: LD_VAR 0 3
25258: ARRAY
25259: PPUSH
25260: LD_INT 8
25262: PPUSH
25263: LD_INT 0
25265: PPUSH
25266: CALL_OW 49
// tmz = tmz diff [ tm_s [ tmp1 ] ] ;
25270: LD_ADDR_VAR 0 4
25274: PUSH
25275: LD_VAR 0 4
25279: PUSH
25280: LD_VAR 0 9
25284: PUSH
25285: LD_VAR 0 3
25289: ARRAY
25290: PUSH
25291: EMPTY
25292: LIST
25293: DIFF
25294: ST_TO_ADDR
// end ;
25295: GO 25216
25297: POP
25298: POP
// tot = tot + tmp_s ;
25299: LD_ADDR_VAR 0 14
25303: PUSH
25304: LD_VAR 0 14
25308: PUSH
25309: LD_VAR 0 13
25313: PLUS
25314: ST_TO_ADDR
// if tmp_s = 0 then
25315: LD_VAR 0 13
25319: PUSH
25320: LD_INT 0
25322: EQUAL
25323: IFFALSE 25384
// begin preparescientist ( sex_female , 2 ) ;
25325: LD_INT 2
25327: PPUSH
25328: LD_INT 2
25330: PPUSH
25331: CALL_OW 384
// tmp = createhuman ;
25335: LD_ADDR_VAR 0 2
25339: PUSH
25340: CALL_OW 44
25344: ST_TO_ADDR
// if not placeunitxyr ( tmp , 60 , 18 , 3 , false ) then
25345: LD_VAR 0 2
25349: PPUSH
25350: LD_INT 60
25352: PPUSH
25353: LD_INT 18
25355: PPUSH
25356: LD_INT 3
25358: PPUSH
25359: LD_INT 0
25361: PPUSH
25362: CALL_OW 50
25366: NOT
25367: IFFALSE 25384
// placeunitarea ( tmp , ambase , false ) ;
25369: LD_VAR 0 2
25373: PPUSH
25374: LD_INT 8
25376: PPUSH
25377: LD_INT 0
25379: PPUSH
25380: CALL_OW 49
// end ; end ; if joan then
25384: LD_EXP 35
25388: IFFALSE 25411
// placeunitxyr ( joan , 52 , 15 , 2 , false ) ;
25390: LD_EXP 35
25394: PPUSH
25395: LD_INT 52
25397: PPUSH
25398: LD_INT 15
25400: PPUSH
25401: LD_INT 2
25403: PPUSH
25404: LD_INT 0
25406: PPUSH
25407: CALL_OW 50
// smejdi = tmz_ diff tmz ;
25411: LD_ADDR_LOC 98
25415: PUSH
25416: LD_VAR 0 5
25420: PUSH
25421: LD_VAR 0 4
25425: DIFF
25426: ST_TO_ADDR
// zbytci = tmz ;
25427: LD_ADDR_LOC 99
25431: PUSH
25432: LD_VAR 0 4
25436: ST_TO_ADDR
// uc_nation = nation_nature ;
25437: LD_ADDR_OWVAR 21
25441: PUSH
25442: LD_INT 0
25444: ST_TO_ADDR
// preparehuman ( sex_male , class_apeman_engineer , 0 ) ;
25445: LD_INT 1
25447: PPUSH
25448: LD_INT 16
25450: PPUSH
25451: LD_INT 0
25453: PPUSH
25454: CALL_OW 380
// placeunitarea ( createhuman , ambase , false ) ;
25458: CALL_OW 44
25462: PPUSH
25463: LD_INT 8
25465: PPUSH
25466: LD_INT 0
25468: PPUSH
25469: CALL_OW 49
// preparehuman ( sex_male , class_apeman_engineer , 0 ) ;
25473: LD_INT 1
25475: PPUSH
25476: LD_INT 16
25478: PPUSH
25479: LD_INT 0
25481: PPUSH
25482: CALL_OW 380
// placeunitarea ( createhuman , ambase , false ) ;
25486: CALL_OW 44
25490: PPUSH
25491: LD_INT 8
25493: PPUSH
25494: LD_INT 0
25496: PPUSH
25497: CALL_OW 49
// preparehuman ( sex_male , class_apeman_engineer , 0 ) ;
25501: LD_INT 1
25503: PPUSH
25504: LD_INT 16
25506: PPUSH
25507: LD_INT 0
25509: PPUSH
25510: CALL_OW 380
// placeunitarea ( createhuman , ambase , false ) ;
25514: CALL_OW 44
25518: PPUSH
25519: LD_INT 8
25521: PPUSH
25522: LD_INT 0
25524: PPUSH
25525: CALL_OW 49
// uc_nation = nation_american ;
25529: LD_ADDR_OWVAR 21
25533: PUSH
25534: LD_INT 1
25536: ST_TO_ADDR
// hc_name =  ;
25537: LD_ADDR_OWVAR 26
25541: PUSH
25542: LD_STRING 
25544: ST_TO_ADDR
// end ; end_of_file
25545: LD_VAR 0 1
25549: RET
// every 0 0$2 + 0 0$0.1 do
25550: GO 25552
25552: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
25553: LD_INT 22
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 25
25568: PUSH
25569: LD_INT 12
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 25
25578: PUSH
25579: LD_INT 16
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 25
25588: PUSH
25589: LD_INT 15
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 25
25598: PUSH
25599: LD_INT 17
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PPUSH
25617: CALL_OW 69
25621: PUSH
25622: LD_INT 22
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 21
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 3
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: LD_INT 25
25650: PUSH
25651: LD_INT 12
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 25
25660: PUSH
25661: LD_INT 16
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 25
25670: PUSH
25671: LD_INT 15
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 25
25680: PUSH
25681: LD_INT 17
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: PPUSH
25704: CALL_OW 69
25708: GREATER
25709: IFFALSE 25720
// begin SetAchievement ( ACH_POTA ) ;
25711: LD_STRING ACH_POTA
25713: PPUSH
25714: CALL_OW 543
// exit ;
25718: GO 25721
// end ; enable ;
25720: ENABLE
// end ; end_of_file
25721: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
25722: LD_INT 0
25724: PPUSH
25725: PPUSH
// if not missionNumber then
25726: LD_VAR 0 2
25730: NOT
25731: IFFALSE 25735
// exit ;
25733: GO 25836
// achiv := false ;
25735: LD_ADDR_VAR 0 7
25739: PUSH
25740: LD_INT 0
25742: ST_TO_ADDR
// case campaignNumber of 1 :
25743: LD_VAR 0 1
25747: PUSH
25748: LD_INT 1
25750: DOUBLE
25751: EQUAL
25752: IFTRUE 25756
25754: GO 25767
25756: POP
// achiv := ACH_GOTA ; 2 :
25757: LD_ADDR_VAR 0 7
25761: PUSH
25762: LD_STRING ACH_GOTA
25764: ST_TO_ADDR
25765: GO 25798
25767: LD_INT 2
25769: DOUBLE
25770: EQUAL
25771: IFTRUE 25775
25773: GO 25778
25775: POP
// ; 3 :
25776: GO 25798
25778: LD_INT 3
25780: DOUBLE
25781: EQUAL
25782: IFTRUE 25786
25784: GO 25797
25786: POP
// achiv := ACH_MOTRF ; end ;
25787: LD_ADDR_VAR 0 7
25791: PUSH
25792: LD_STRING ACH_MOTRF
25794: ST_TO_ADDR
25795: GO 25798
25797: POP
// if achiv and medal1 and medal2 and medal3 then
25798: LD_VAR 0 7
25802: PUSH
25803: LD_VAR 0 3
25807: AND
25808: PUSH
25809: LD_VAR 0 4
25813: AND
25814: PUSH
25815: LD_VAR 0 5
25819: AND
25820: IFFALSE 25836
// SetAchievementEX ( achiv , missionNumber ) ;
25822: LD_VAR 0 7
25826: PPUSH
25827: LD_VAR 0 2
25831: PPUSH
25832: CALL_OW 564
// end ;
25836: LD_VAR 0 6
25840: RET
