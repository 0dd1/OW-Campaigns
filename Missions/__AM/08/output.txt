// export rus , amer , amer_reinf ; export dying ; var ruboilm0 , ruboilp0 , ruboilp1 , rubwrks0 , rubfact0 , rubbrid0 , rubbunk0 , rubbunk1 , rubarmr0 ; var rubdepo0 ; var ruv0 , ruhmech1 , ruv1 , ruhmech2 , ruv2 , ruhmech3 ; var rusove ; var amv0 , amv1 ; function prepare_units ; var tmp ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// amer = 1 ;
   4: LD_ADDR_EXP 2
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// amer_reinf = 4 ;
  12: LD_ADDR_EXP 3
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// rus = 3 ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 3
  27: ST_TO_ADDR
// dying = [ ] ;
  28: LD_ADDR_EXP 4
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// inituc ;
  35: CALL_OW 18
// inithc ;
  39: CALL_OW 19
// initvc ;
  43: CALL_OW 20
// initbc ;
  47: CALL_OW 21
// from_prev_mis ;
  51: CALL 18093 0 0
// case difficulty of 3 :
  55: LD_OWVAR 67
  59: PUSH
  60: LD_INT 3
  62: DOUBLE
  63: EQUAL
  64: IFTRUE 68
  66: GO 87
  68: POP
// begin vc_chassis = us_light_wheeled ;
  69: LD_ADDR_OWVAR 37
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// vc_weapon = us_light_gun ;
  77: LD_ADDR_OWVAR 40
  81: PUSH
  82: LD_INT 3
  84: ST_TO_ADDR
// end ; 2 :
  85: GO 142
  87: LD_INT 2
  89: DOUBLE
  90: EQUAL
  91: IFTRUE 95
  93: GO 114
  95: POP
// begin vc_chassis = us_medium_wheeled ;
  96: LD_ADDR_OWVAR 37
 100: PUSH
 101: LD_INT 2
 103: ST_TO_ADDR
// vc_weapon = us_double_gun ;
 104: LD_ADDR_OWVAR 40
 108: PUSH
 109: LD_INT 5
 111: ST_TO_ADDR
// end ; 1 :
 112: GO 142
 114: LD_INT 1
 116: DOUBLE
 117: EQUAL
 118: IFTRUE 122
 120: GO 141
 122: POP
// begin vc_chassis = us_medium_tracked ;
 123: LD_ADDR_OWVAR 37
 127: PUSH
 128: LD_INT 3
 130: ST_TO_ADDR
// vc_weapon = us_double_gun ;
 131: LD_ADDR_OWVAR 40
 135: PUSH
 136: LD_INT 5
 138: ST_TO_ADDR
// end ; end ;
 139: GO 142
 141: POP
// vc_control = control_remote ;
 142: LD_ADDR_OWVAR 38
 146: PUSH
 147: LD_INT 2
 149: ST_TO_ADDR
// vc_engine = engine_combustion ;
 150: LD_ADDR_OWVAR 39
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// amv0 = createvehicle ;
 158: LD_ADDR_LOC 18
 162: PUSH
 163: CALL_OW 45
 167: ST_TO_ADDR
// setdir ( amv0 , 3 ) ;
 168: LD_LOC 18
 172: PPUSH
 173: LD_INT 3
 175: PPUSH
 176: CALL_OW 233
// placeunitxyr ( amv0 , 50 , 23 , 3 , false ) ;
 180: LD_LOC 18
 184: PPUSH
 185: LD_INT 50
 187: PPUSH
 188: LD_INT 23
 190: PPUSH
 191: LD_INT 3
 193: PPUSH
 194: LD_INT 0
 196: PPUSH
 197: CALL_OW 50
// case difficulty of 3 :
 201: LD_OWVAR 67
 205: PUSH
 206: LD_INT 3
 208: DOUBLE
 209: EQUAL
 210: IFTRUE 214
 212: GO 233
 214: POP
// begin vc_chassis = us_medium_wheeled ;
 215: LD_ADDR_OWVAR 37
 219: PUSH
 220: LD_INT 2
 222: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 223: LD_ADDR_OWVAR 40
 227: PUSH
 228: LD_INT 4
 230: ST_TO_ADDR
// end ; 2 :
 231: GO 288
 233: LD_INT 2
 235: DOUBLE
 236: EQUAL
 237: IFTRUE 241
 239: GO 260
 241: POP
// begin vc_chassis = us_medium_tracked ;
 242: LD_ADDR_OWVAR 37
 246: PUSH
 247: LD_INT 3
 249: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 250: LD_ADDR_OWVAR 40
 254: PUSH
 255: LD_INT 4
 257: ST_TO_ADDR
// end ; 1 :
 258: GO 288
 260: LD_INT 1
 262: DOUBLE
 263: EQUAL
 264: IFTRUE 268
 266: GO 287
 268: POP
// begin vc_chassis = us_heavy_tracked ;
 269: LD_ADDR_OWVAR 37
 273: PUSH
 274: LD_INT 4
 276: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
 277: LD_ADDR_OWVAR 40
 281: PUSH
 282: LD_INT 4
 284: ST_TO_ADDR
// end ; end ;
 285: GO 288
 287: POP
// vc_control = control_remote ;
 288: LD_ADDR_OWVAR 38
 292: PUSH
 293: LD_INT 2
 295: ST_TO_ADDR
// vc_engine = engine_combustion ;
 296: LD_ADDR_OWVAR 39
 300: PUSH
 301: LD_INT 1
 303: ST_TO_ADDR
// amv1 = createvehicle ;
 304: LD_ADDR_LOC 19
 308: PUSH
 309: CALL_OW 45
 313: ST_TO_ADDR
// setdir ( amv1 , 2 ) ;
 314: LD_LOC 19
 318: PPUSH
 319: LD_INT 2
 321: PPUSH
 322: CALL_OW 233
// placeunitxyr ( amv1 , 56 , 24 , 3 , false ) ;
 326: LD_LOC 19
 330: PPUSH
 331: LD_INT 56
 333: PPUSH
 334: LD_INT 24
 336: PPUSH
 337: LD_INT 3
 339: PPUSH
 340: LD_INT 0
 342: PPUSH
 343: CALL_OW 50
// preparesoldier ( sex_male , 3 ) ;
 347: LD_INT 1
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL_OW 381
// tmp = createhuman ;
 357: LD_ADDR_VAR 0 2
 361: PUSH
 362: CALL_OW 44
 366: ST_TO_ADDR
// setlives ( tmp , 250 ) ;
 367: LD_VAR 0 2
 371: PPUSH
 372: LD_INT 250
 374: PPUSH
 375: CALL_OW 234
// setdir ( tmp , 3 ) ;
 379: LD_VAR 0 2
 383: PPUSH
 384: LD_INT 3
 386: PPUSH
 387: CALL_OW 233
// placeunitxy ( tmp , 50 , 43 , false ) ;
 391: LD_VAR 0 2
 395: PPUSH
 396: LD_INT 50
 398: PPUSH
 399: LD_INT 43
 401: PPUSH
 402: LD_INT 0
 404: PPUSH
 405: CALL_OW 48
// uc_side = 0 ;
 409: LD_ADDR_OWVAR 20
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// preparesoldier ( sex_male , 3 ) ;
 417: LD_INT 1
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: CALL_OW 381
// tmp = createhuman ;
 427: LD_ADDR_VAR 0 2
 431: PUSH
 432: CALL_OW 44
 436: ST_TO_ADDR
// setlives ( tmp , 10 ) ;
 437: LD_VAR 0 2
 441: PPUSH
 442: LD_INT 10
 444: PPUSH
 445: CALL_OW 234
// setdir ( tmp , 5 ) ;
 449: LD_VAR 0 2
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: CALL_OW 233
// placeunitxy ( tmp , 62 , 28 , false ) ;
 461: LD_VAR 0 2
 465: PPUSH
 466: LD_INT 62
 468: PPUSH
 469: LD_INT 28
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// preparesoldier ( sex_male , 3 ) ;
 479: LD_INT 1
 481: PPUSH
 482: LD_INT 3
 484: PPUSH
 485: CALL_OW 381
// tmp = createhuman ;
 489: LD_ADDR_VAR 0 2
 493: PUSH
 494: CALL_OW 44
 498: ST_TO_ADDR
// setlives ( tmp , 10 ) ;
 499: LD_VAR 0 2
 503: PPUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 234
// setdir ( tmp , 5 ) ;
 511: LD_VAR 0 2
 515: PPUSH
 516: LD_INT 5
 518: PPUSH
 519: CALL_OW 233
// placeunitxy ( tmp , 58 , 28 , false ) ;
 523: LD_VAR 0 2
 527: PPUSH
 528: LD_INT 58
 530: PPUSH
 531: LD_INT 28
 533: PPUSH
 534: LD_INT 0
 536: PPUSH
 537: CALL_OW 48
// setlives ( ambbrwr2 , hranice_umirani ) ;
 541: LD_INT 20
 543: PPUSH
 544: LD_INT 250
 546: PPUSH
 547: CALL_OW 234
// setlives ( ambbrwr0 , hranice_zraneni ) ;
 551: LD_INT 21
 553: PPUSH
 554: LD_INT 500
 556: PPUSH
 557: CALL_OW 234
// setlives ( ambbunk3 , hranice_umirani + 1 ) ;
 561: LD_INT 4
 563: PPUSH
 564: LD_INT 250
 566: PUSH
 567: LD_INT 1
 569: PLUS
 570: PPUSH
 571: CALL_OW 234
// uc_side = 1 ;
 575: LD_ADDR_OWVAR 20
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// vc_control = control_manual ;
 583: LD_ADDR_OWVAR 38
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// tmp = createvehicle ;
 591: LD_ADDR_VAR 0 2
 595: PUSH
 596: CALL_OW 45
 600: ST_TO_ADDR
// setdir ( tmp , 2 ) ;
 601: LD_VAR 0 2
 605: PPUSH
 606: LD_INT 2
 608: PPUSH
 609: CALL_OW 233
// setlives ( tmp , 49 ) ;
 613: LD_VAR 0 2
 617: PPUSH
 618: LD_INT 49
 620: PPUSH
 621: CALL_OW 234
// placeunitxy ( tmp , 45 , 39 , false ) ;
 625: LD_VAR 0 2
 629: PPUSH
 630: LD_INT 45
 632: PPUSH
 633: LD_INT 39
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL_OW 48
// uc_nation = nation_russian ;
 643: LD_ADDR_OWVAR 21
 647: PUSH
 648: LD_INT 3
 650: ST_TO_ADDR
// uc_side = rus ;
 651: LD_ADDR_OWVAR 20
 655: PUSH
 656: LD_EXP 1
 660: ST_TO_ADDR
// bc_type = b_depot ;
 661: LD_ADDR_OWVAR 42
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// bc_level = 4 ;
 669: LD_ADDR_OWVAR 43
 673: PUSH
 674: LD_INT 4
 676: ST_TO_ADDR
// rubdepo0 = createandplacebuildingxyd ( 90 , 85 , 3 ) ;
 677: LD_ADDR_LOC 10
 681: PUSH
 682: LD_INT 90
 684: PPUSH
 685: LD_INT 85
 687: PPUSH
 688: LD_INT 3
 690: PPUSH
 691: CALL_OW 47
 695: ST_TO_ADDR
// setresourcetype ( getbase ( rubdepo0 ) , mat_cans , 500 ) ;
 696: LD_LOC 10
 700: PPUSH
 701: CALL_OW 274
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_INT 500
 711: PPUSH
 712: CALL_OW 277
// setresourcetype ( getbase ( rubdepo0 ) , mat_oil , 20 ) ;
 716: LD_LOC 10
 720: PPUSH
 721: CALL_OW 274
 725: PPUSH
 726: LD_INT 2
 728: PPUSH
 729: LD_INT 20
 731: PPUSH
 732: CALL_OW 277
// commovexy ( ruhscie0 , 87 , 94 ) ;
 736: LD_INT 22
 738: PPUSH
 739: LD_INT 87
 741: PPUSH
 742: LD_INT 94
 744: PPUSH
 745: CALL_OW 111
// ruboilm0 = combuild ( ruhengi1 , b_oil_mine , 106 , 97 , 0 ) ;
 749: LD_ADDR_LOC 1
 753: PUSH
 754: LD_INT 6
 756: PPUSH
 757: LD_INT 29
 759: PPUSH
 760: LD_INT 106
 762: PPUSH
 763: LD_INT 97
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 145
 773: ST_TO_ADDR
// ruboilp0 = combuild ( ruhengi0 , b_oil_power , 99 , 97 , 0 ) ;
 774: LD_ADDR_LOC 2
 778: PUSH
 779: LD_INT 5
 781: PPUSH
 782: LD_INT 26
 784: PPUSH
 785: LD_INT 99
 787: PPUSH
 788: LD_INT 97
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 145
 798: ST_TO_ADDR
// rubbunk0 = combuild ( ruhengi2 , b_bunker , 75 , 74 , 2 ) ;
 799: LD_ADDR_LOC 7
 803: PUSH
 804: LD_INT 8
 806: PPUSH
 807: LD_INT 32
 809: PPUSH
 810: LD_INT 75
 812: PPUSH
 813: LD_INT 74
 815: PPUSH
 816: LD_INT 2
 818: PPUSH
 819: CALL_OW 145
 823: ST_TO_ADDR
// preparemechanic ( sex_male , 5 ) ;
 824: LD_INT 1
 826: PPUSH
 827: LD_INT 5
 829: PPUSH
 830: CALL_OW 383
// ruhmech1 = createhuman ;
 834: LD_ADDR_LOC 12
 838: PUSH
 839: CALL_OW 44
 843: ST_TO_ADDR
// case difficulty of 1 :
 844: LD_OWVAR 67
 848: PUSH
 849: LD_INT 1
 851: DOUBLE
 852: EQUAL
 853: IFTRUE 857
 855: GO 876
 857: POP
// begin vc_chassis = ru_medium_tracked ;
 858: LD_ADDR_OWVAR 37
 862: PUSH
 863: LD_INT 22
 865: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
 866: LD_ADDR_OWVAR 40
 870: PUSH
 871: LD_INT 43
 873: ST_TO_ADDR
// end ; 2 :
 874: GO 931
 876: LD_INT 2
 878: DOUBLE
 879: EQUAL
 880: IFTRUE 884
 882: GO 903
 884: POP
// begin vc_chassis = ru_medium_tracked ;
 885: LD_ADDR_OWVAR 37
 889: PUSH
 890: LD_INT 22
 892: ST_TO_ADDR
// vc_weapon = ru_gun ;
 893: LD_ADDR_OWVAR 40
 897: PUSH
 898: LD_INT 44
 900: ST_TO_ADDR
// end ; 3 :
 901: GO 931
 903: LD_INT 3
 905: DOUBLE
 906: EQUAL
 907: IFTRUE 911
 909: GO 930
 911: POP
// begin vc_chassis = ru_heavy_tracked ;
 912: LD_ADDR_OWVAR 37
 916: PUSH
 917: LD_INT 24
 919: ST_TO_ADDR
// vc_weapon = ru_gun ;
 920: LD_ADDR_OWVAR 40
 924: PUSH
 925: LD_INT 44
 927: ST_TO_ADDR
// end ; end ;
 928: GO 931
 930: POP
// vc_control = control_manual ;
 931: LD_ADDR_OWVAR 38
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
// vc_engine = engine_combustion ;
 939: LD_ADDR_OWVAR 39
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// ruv0 = createvehicle ;
 947: LD_ADDR_LOC 11
 951: PUSH
 952: CALL_OW 45
 956: ST_TO_ADDR
// setdir ( ruv0 , 5 ) ;
 957: LD_LOC 11
 961: PPUSH
 962: LD_INT 5
 964: PPUSH
 965: CALL_OW 233
// placeunitxy ( ruv0 , 66 , 83 , false ) ;
 969: LD_LOC 11
 973: PPUSH
 974: LD_INT 66
 976: PPUSH
 977: LD_INT 83
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 48
// placehumaninunit ( ruhmech1 , ruv0 ) ;
 987: LD_LOC 12
 991: PPUSH
 992: LD_LOC 11
 996: PPUSH
 997: CALL_OW 52
// preparemechanic ( sex_male , 4 ) ;
1001: LD_INT 1
1003: PPUSH
1004: LD_INT 4
1006: PPUSH
1007: CALL_OW 383
// ruhmech2 = createhuman ;
1011: LD_ADDR_LOC 14
1015: PUSH
1016: CALL_OW 44
1020: ST_TO_ADDR
// case difficulty of 1 :
1021: LD_OWVAR 67
1025: PUSH
1026: LD_INT 1
1028: DOUBLE
1029: EQUAL
1030: IFTRUE 1034
1032: GO 1053
1034: POP
// begin vc_chassis = ru_medium_wheeled ;
1035: LD_ADDR_OWVAR 37
1039: PUSH
1040: LD_INT 21
1042: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1043: LD_ADDR_OWVAR 40
1047: PUSH
1048: LD_INT 42
1050: ST_TO_ADDR
// end ; 2 :
1051: GO 1108
1053: LD_INT 2
1055: DOUBLE
1056: EQUAL
1057: IFTRUE 1061
1059: GO 1080
1061: POP
// begin vc_chassis = ru_medium_wheeled ;
1062: LD_ADDR_OWVAR 37
1066: PUSH
1067: LD_INT 21
1069: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1070: LD_ADDR_OWVAR 40
1074: PUSH
1075: LD_INT 43
1077: ST_TO_ADDR
// end ; 3 :
1078: GO 1108
1080: LD_INT 3
1082: DOUBLE
1083: EQUAL
1084: IFTRUE 1088
1086: GO 1107
1088: POP
// begin vc_chassis = ru_medium_wheeled ;
1089: LD_ADDR_OWVAR 37
1093: PUSH
1094: LD_INT 21
1096: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1097: LD_ADDR_OWVAR 40
1101: PUSH
1102: LD_INT 43
1104: ST_TO_ADDR
// end ; end ;
1105: GO 1108
1107: POP
// vc_control = control_manual ;
1108: LD_ADDR_OWVAR 38
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_engine = engine_combustion ;
1116: LD_ADDR_OWVAR 39
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// ruv1 = createvehicle ;
1124: LD_ADDR_LOC 13
1128: PUSH
1129: CALL_OW 45
1133: ST_TO_ADDR
// setdir ( ruv1 , 5 ) ;
1134: LD_LOC 13
1138: PPUSH
1139: LD_INT 5
1141: PPUSH
1142: CALL_OW 233
// placeunitxy ( ruv1 , 82 , 77 , false ) ;
1146: LD_LOC 13
1150: PPUSH
1151: LD_INT 82
1153: PPUSH
1154: LD_INT 77
1156: PPUSH
1157: LD_INT 0
1159: PPUSH
1160: CALL_OW 48
// placehumaninunit ( ruhmech2 , ruv1 ) ;
1164: LD_LOC 14
1168: PPUSH
1169: LD_LOC 13
1173: PPUSH
1174: CALL_OW 52
// case difficulty of 1 :
1178: LD_OWVAR 67
1182: PUSH
1183: LD_INT 1
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1220
1191: POP
// begin vc_chassis = ru_medium_wheeled ;
1192: LD_ADDR_OWVAR 37
1196: PUSH
1197: LD_INT 21
1199: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1200: LD_ADDR_OWVAR 40
1204: PUSH
1205: LD_INT 42
1207: ST_TO_ADDR
// preparemechanic ( sex_female , 2 ) ;
1208: LD_INT 2
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 383
// end ; 2 :
1218: GO 1295
1220: LD_INT 2
1222: DOUBLE
1223: EQUAL
1224: IFTRUE 1228
1226: GO 1257
1228: POP
// begin vc_chassis = ru_medium_wheeled ;
1229: LD_ADDR_OWVAR 37
1233: PUSH
1234: LD_INT 21
1236: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1237: LD_ADDR_OWVAR 40
1241: PUSH
1242: LD_INT 43
1244: ST_TO_ADDR
// preparemechanic ( sex_female , 3 ) ;
1245: LD_INT 2
1247: PPUSH
1248: LD_INT 3
1250: PPUSH
1251: CALL_OW 383
// end ; 3 :
1255: GO 1295
1257: LD_INT 3
1259: DOUBLE
1260: EQUAL
1261: IFTRUE 1265
1263: GO 1294
1265: POP
// begin vc_chassis = ru_medium_wheeled ;
1266: LD_ADDR_OWVAR 37
1270: PUSH
1271: LD_INT 21
1273: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
1274: LD_ADDR_OWVAR 40
1278: PUSH
1279: LD_INT 43
1281: ST_TO_ADDR
// preparemechanic ( sex_female , 4 ) ;
1282: LD_INT 2
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: CALL_OW 383
// end ; end ;
1292: GO 1295
1294: POP
// ruhmech3 = createhuman ;
1295: LD_ADDR_LOC 16
1299: PUSH
1300: CALL_OW 44
1304: ST_TO_ADDR
// vc_control = control_manual ;
1305: LD_ADDR_OWVAR 38
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// vc_engine = engine_combustion ;
1313: LD_ADDR_OWVAR 39
1317: PUSH
1318: LD_INT 1
1320: ST_TO_ADDR
// ruv2 = createvehicle ;
1321: LD_ADDR_LOC 15
1325: PUSH
1326: CALL_OW 45
1330: ST_TO_ADDR
// setdir ( ruv2 , 0 ) ;
1331: LD_LOC 15
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 233
// placeunitxy ( ruv2 , 66 , 68 , false ) ;
1343: LD_LOC 15
1347: PPUSH
1348: LD_INT 66
1350: PPUSH
1351: LD_INT 68
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 48
// placehumaninunit ( ruhmech3 , ruv2 ) ;
1361: LD_LOC 16
1365: PPUSH
1366: LD_LOC 15
1370: PPUSH
1371: CALL_OW 52
// case difficulty of 1 :
1375: LD_OWVAR 67
1379: PUSH
1380: LD_INT 1
1382: DOUBLE
1383: EQUAL
1384: IFTRUE 1388
1386: GO 1451
1388: POP
// begin setskill ( [ ruhsold1 , ruhsold2 , ruhsold4 ] , skill_combat , 3 ) ;
1389: LD_INT 11
1391: PUSH
1392: LD_INT 12
1394: PUSH
1395: LD_INT 14
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL_OW 237
// setskill ( [ ruhsold3 , ruhsold5 ] , skill_combat , 3 ) ;
1413: LD_INT 13
1415: PUSH
1416: LD_INT 15
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL_OW 237
// setskill ( [ ruhsold0 ] , skill_combat , 3 ) ;
1433: LD_INT 10
1435: PUSH
1436: EMPTY
1437: LIST
1438: PPUSH
1439: LD_INT 1
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL_OW 237
// end ; 2 :
1449: GO 1594
1451: LD_INT 2
1453: DOUBLE
1454: EQUAL
1455: IFTRUE 1459
1457: GO 1522
1459: POP
// begin setskill ( [ ruhsold1 , ruhsold2 , ruhsold4 ] , skill_combat , 5 ) ;
1460: LD_INT 11
1462: PUSH
1463: LD_INT 12
1465: PUSH
1466: LD_INT 14
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 237
// setskill ( [ ruhsold3 , ruhsold5 ] , skill_combat , 4 ) ;
1484: LD_INT 13
1486: PUSH
1487: LD_INT 15
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 4
1499: PPUSH
1500: CALL_OW 237
// setskill ( [ ruhsold0 ] , skill_combat , 5 ) ;
1504: LD_INT 10
1506: PUSH
1507: EMPTY
1508: LIST
1509: PPUSH
1510: LD_INT 1
1512: PPUSH
1513: LD_INT 5
1515: PPUSH
1516: CALL_OW 237
// end ; 3 :
1520: GO 1594
1522: LD_INT 3
1524: DOUBLE
1525: EQUAL
1526: IFTRUE 1530
1528: GO 1593
1530: POP
// begin setskill ( [ ruhsold1 , ruhsold2 , ruhsold4 ] , skill_combat , 7 ) ;
1531: LD_INT 11
1533: PUSH
1534: LD_INT 12
1536: PUSH
1537: LD_INT 14
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PPUSH
1545: LD_INT 1
1547: PPUSH
1548: LD_INT 7
1550: PPUSH
1551: CALL_OW 237
// setskill ( [ ruhsold3 , ruhsold5 ] , skill_combat , 6 ) ;
1555: LD_INT 13
1557: PUSH
1558: LD_INT 15
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: LD_INT 6
1570: PPUSH
1571: CALL_OW 237
// setskill ( [ ruhsold0 ] , skill_combat , 7 ) ;
1575: LD_INT 10
1577: PUSH
1578: EMPTY
1579: LIST
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: LD_INT 7
1586: PPUSH
1587: CALL_OW 237
// end ; end ;
1591: GO 1594
1593: POP
// rusove = [ ruhsold0 , ruhsold1 , ruhsold2 , ruhsold3 , ruhsold4 , ruhsold5 , ruv0 , ruv1 , ruv2 ] ;
1594: LD_ADDR_LOC 17
1598: PUSH
1599: LD_INT 10
1601: PUSH
1602: LD_INT 11
1604: PUSH
1605: LD_INT 12
1607: PUSH
1608: LD_INT 13
1610: PUSH
1611: LD_INT 14
1613: PUSH
1614: LD_INT 15
1616: PUSH
1617: LD_LOC 11
1621: PUSH
1622: LD_LOC 13
1626: PUSH
1627: LD_LOC 15
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// comremember ( rusove ) ;
1643: LD_LOC 17
1647: PPUSH
1648: CALL_OW 143
// tmp = createvehicle ;
1652: LD_ADDR_VAR 0 2
1656: PUSH
1657: CALL_OW 45
1661: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
1662: LD_VAR 0 2
1666: PPUSH
1667: LD_INT 5
1669: PPUSH
1670: CALL_OW 233
// setlives ( tmp , 87 ) ;
1674: LD_VAR 0 2
1678: PPUSH
1679: LD_INT 87
1681: PPUSH
1682: CALL_OW 234
// placeunitxy ( tmp , 53 , 49 , false ) ;
1686: LD_VAR 0 2
1690: PPUSH
1691: LD_INT 53
1693: PPUSH
1694: LD_INT 49
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL_OW 48
// end ;
1704: LD_VAR 0 1
1708: RET
// function selektnuta_budova ; var tmp ; begin
1709: LD_INT 0
1711: PPUSH
1712: PPUSH
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_building ] ] ) ;
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_EXP 2
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 21
1732: PUSH
1733: LD_INT 3
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PPUSH
1744: CALL_OW 69
1748: ST_TO_ADDR
// if isselected ( tmp ) then
1749: LD_VAR 0 2
1753: PPUSH
1754: CALL_OW 306
1758: IFFALSE 1770
// result = true else
1760: LD_ADDR_VAR 0 1
1764: PUSH
1765: LD_INT 1
1767: ST_TO_ADDR
1768: GO 1778
// result = false ;
1770: LD_ADDR_VAR 0 1
1774: PUSH
1775: LD_INT 0
1777: ST_TO_ADDR
// end ;
1778: LD_VAR 0 1
1782: RET
// every 0 0$0.3 trigger selektnuta_budova do
1783: CALL 1709 0 0
1787: IFFALSE 1799
1789: GO 1791
1791: DISABLE
// hint ( BuildingLevel ) ;
1792: LD_STRING BuildingLevel
1794: PPUSH
1795: CALL_OW 339
1799: END
// function dialog1 ; begin
1800: LD_INT 0
1802: PPUSH
// ingameon ;
1803: CALL_OW 8
// centernowonxy ( 44 , 40 ) ;
1807: LD_INT 44
1809: PPUSH
1810: LD_INT 40
1812: PPUSH
1813: CALL_OW 86
// dwait ( 0 0$1 ) ;
1817: LD_INT 35
1819: PPUSH
1820: CALL_OW 68
// case gamma2commander of 1 :
1824: LD_EXP 46
1828: PUSH
1829: LD_INT 1
1831: DOUBLE
1832: EQUAL
1833: IFTRUE 1837
1835: GO 1852
1837: POP
// say ( lucy , D1-Don-1 ) ; 2 :
1838: LD_EXP 31
1842: PPUSH
1843: LD_STRING D1-Don-1
1845: PPUSH
1846: CALL_OW 88
1850: GO 1899
1852: LD_INT 2
1854: DOUBLE
1855: EQUAL
1856: IFTRUE 1860
1858: GO 1875
1860: POP
// say ( brown , D1-Brown-1 ) ; 3 :
1861: LD_EXP 32
1865: PPUSH
1866: LD_STRING D1-Brown-1
1868: PPUSH
1869: CALL_OW 88
1873: GO 1899
1875: LD_INT 3
1877: DOUBLE
1878: EQUAL
1879: IFTRUE 1883
1881: GO 1898
1883: POP
// say ( vanh , D1-VanH-1 ) ; end ;
1884: LD_EXP 33
1888: PPUSH
1889: LD_STRING D1-VanH-1
1891: PPUSH
1892: CALL_OW 88
1896: GO 1899
1898: POP
// sayradio ( rh , D1-Har-1 ) ;
1899: LD_EXP 15
1903: PPUSH
1904: LD_STRING D1-Har-1
1906: PPUSH
1907: CALL_OW 94
// case gamma2commander of 1 :
1911: LD_EXP 46
1915: PUSH
1916: LD_INT 1
1918: DOUBLE
1919: EQUAL
1920: IFTRUE 1924
1922: GO 1939
1924: POP
// say ( lucy , D1-Don-2 ) ; 2 :
1925: LD_EXP 31
1929: PPUSH
1930: LD_STRING D1-Don-2
1932: PPUSH
1933: CALL_OW 88
1937: GO 1986
1939: LD_INT 2
1941: DOUBLE
1942: EQUAL
1943: IFTRUE 1947
1945: GO 1962
1947: POP
// say ( brown , D1-Brown-2 ) ; 3 :
1948: LD_EXP 32
1952: PPUSH
1953: LD_STRING D1-Brown-2
1955: PPUSH
1956: CALL_OW 88
1960: GO 1986
1962: LD_INT 3
1964: DOUBLE
1965: EQUAL
1966: IFTRUE 1970
1968: GO 1985
1970: POP
// say ( vanh , D1-VanH-2 ) ; end ;
1971: LD_EXP 33
1975: PPUSH
1976: LD_STRING D1-VanH-2
1978: PPUSH
1979: CALL_OW 88
1983: GO 1986
1985: POP
// sayradio ( rh , D1-Har-2 ) ;
1986: LD_EXP 15
1990: PPUSH
1991: LD_STRING D1-Har-2
1993: PPUSH
1994: CALL_OW 94
// ingameoff ;
1998: CALL_OW 9
// SaveForQuickRestart ;
2002: CALL_OW 22
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
2013: LD_STRING M1
2015: PPUSH
2016: CALL_OW 337
// music_class = music_auto ;
2020: LD_ADDR_OWVAR 72
2024: PUSH
2025: LD_INT 0
2027: ST_TO_ADDR
// end ;
2028: LD_VAR 0 1
2032: RET
// var supply ; var first_time ; export retreat ; export poskoz , pacienti ; var pocet_lidi , chciplo ; var t2rest ; export hr_lidi , hr_auta ; export mpora ; export prebytek ; export healeri ; var aiv_met , dialcb_delayed , sikishere , cperiode ; export debug ; var maxsikjmmdist , revealed ; var bunk0_lev , bunk1_lev ; starting begin music_class = music_combat ;
2033: LD_ADDR_OWVAR 72
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// revealed = 0 ;
2041: LD_ADDR_LOC 30
2045: PUSH
2046: LD_INT 0
2048: ST_TO_ADDR
// rubfact0 = 0 ;
2049: LD_ADDR_LOC 5
2053: PUSH
2054: LD_INT 0
2056: ST_TO_ADDR
// healeri = [ ruhscie0 , ruhscie1 ] ;
2057: LD_ADDR_EXP 12
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_INT 23
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// disable ( 03 ) ;
2072: LD_INT 3
2074: DISABLE_MARKED
// disable ( 27 ) ;
2075: LD_INT 27
2077: DISABLE_MARKED
// countdist = 0 ;
2078: LD_ADDR_LOC 75
2082: PUSH
2083: LD_INT 0
2085: ST_TO_ADDR
// totalatt = 0 ;
2086: LD_ADDR_LOC 76
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// setbname ( amware0 , gamma ) ;
2094: LD_INT 25
2096: PPUSH
2097: LD_STRING gamma
2099: PPUSH
2100: CALL_OW 500
// bunk0_lev = [ 2 , 5 , 7 ] [ difficulty ] ;
2104: LD_ADDR_LOC 31
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 5
2114: PUSH
2115: LD_INT 7
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_OWVAR 67
2127: ARRAY
2128: ST_TO_ADDR
// bunk1_lev = [ 2 , 5 , 7 ] [ difficulty ] ;
2129: LD_ADDR_LOC 32
2133: PUSH
2134: LD_INT 2
2136: PUSH
2137: LD_INT 5
2139: PUSH
2140: LD_INT 7
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_OWVAR 67
2152: ARRAY
2153: ST_TO_ADDR
// debug = false ;
2154: LD_ADDR_EXP 13
2158: PUSH
2159: LD_INT 0
2161: ST_TO_ADDR
// if debug then
2162: LD_EXP 13
2166: IFFALSE 2175
// msg ( Bacha debug je ON! ) ;
2168: LD_STRING Bacha debug je ON!
2170: PPUSH
2171: CALL_OW 100
// case difficulty of 1 :
2175: LD_OWVAR 67
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2239
2188: POP
// begin hr_lidi = 450 ;
2189: LD_ADDR_EXP 8
2193: PUSH
2194: LD_INT 450
2196: ST_TO_ADDR
// hr_auta = 430 ;
2197: LD_ADDR_EXP 9
2201: PUSH
2202: LD_INT 430
2204: ST_TO_ADDR
// mpora = 2 ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 2
2212: ST_TO_ADDR
// t2rest = 2 2$0 ;
2213: LD_ADDR_LOC 24
2217: PUSH
2218: LD_INT 4200
2220: ST_TO_ADDR
// cperiode = 2 2$0 ;
2221: LD_ADDR_LOC 28
2225: PUSH
2226: LD_INT 4200
2228: ST_TO_ADDR
// supply = 23 ;
2229: LD_ADDR_LOC 20
2233: PUSH
2234: LD_INT 23
2236: ST_TO_ADDR
// end ; 2 :
2237: GO 2358
2239: LD_INT 2
2241: DOUBLE
2242: EQUAL
2243: IFTRUE 2247
2245: GO 2298
2247: POP
// begin hr_lidi = 490 ;
2248: LD_ADDR_EXP 8
2252: PUSH
2253: LD_INT 490
2255: ST_TO_ADDR
// hr_auta = 500 ;
2256: LD_ADDR_EXP 9
2260: PUSH
2261: LD_INT 500
2263: ST_TO_ADDR
// mpora = 3 ;
2264: LD_ADDR_EXP 10
2268: PUSH
2269: LD_INT 3
2271: ST_TO_ADDR
// t2rest = 1 1$10 ;
2272: LD_ADDR_LOC 24
2276: PUSH
2277: LD_INT 2450
2279: ST_TO_ADDR
// cperiode = 2 2$15 ;
2280: LD_ADDR_LOC 28
2284: PUSH
2285: LD_INT 4725
2287: ST_TO_ADDR
// supply = 19 ;
2288: LD_ADDR_LOC 20
2292: PUSH
2293: LD_INT 19
2295: ST_TO_ADDR
// end ; 3 :
2296: GO 2358
2298: LD_INT 3
2300: DOUBLE
2301: EQUAL
2302: IFTRUE 2306
2304: GO 2357
2306: POP
// begin hr_lidi = 550 ;
2307: LD_ADDR_EXP 8
2311: PUSH
2312: LD_INT 550
2314: ST_TO_ADDR
// hr_auta = 570 ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_INT 570
2322: ST_TO_ADDR
// mpora = 4 ;
2323: LD_ADDR_EXP 10
2327: PUSH
2328: LD_INT 4
2330: ST_TO_ADDR
// t2rest = 0 ;
2331: LD_ADDR_LOC 24
2335: PUSH
2336: LD_INT 0
2338: ST_TO_ADDR
// cperiode = 2 2$30 ;
2339: LD_ADDR_LOC 28
2343: PUSH
2344: LD_INT 5250
2346: ST_TO_ADDR
// supply = 17 ;
2347: LD_ADDR_LOC 20
2351: PUSH
2352: LD_INT 17
2354: ST_TO_ADDR
// end ; end ;
2355: GO 2358
2357: POP
// maxsikjmmdist = 13 ;
2358: LD_ADDR_LOC 29
2362: PUSH
2363: LD_INT 13
2365: ST_TO_ADDR
// jmm_zbabelec = false ;
2366: LD_ADDR_LOC 74
2370: PUSH
2371: LD_INT 0
2373: ST_TO_ADDR
// aiv_met = [ ] ;
2374: LD_ADDR_LOC 25
2378: PUSH
2379: EMPTY
2380: ST_TO_ADDR
// dialcb_delayed = false ;
2381: LD_ADDR_LOC 26
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// sikishere = false ;
2389: LD_ADDR_LOC 27
2393: PUSH
2394: LD_INT 0
2396: ST_TO_ADDR
// retreat = - 1 ;
2397: LD_ADDR_EXP 5
2401: PUSH
2402: LD_INT 1
2404: NEG
2405: ST_TO_ADDR
// poskoz = [ ] ;
2406: LD_ADDR_EXP 6
2410: PUSH
2411: EMPTY
2412: ST_TO_ADDR
// rusove0 = [ ] ;
2413: LD_ADDR_EXP 14
2417: PUSH
2418: EMPTY
2419: ST_TO_ADDR
// prebytek = [ ] ;
2420: LD_ADDR_EXP 11
2424: PUSH
2425: EMPTY
2426: ST_TO_ADDR
// pacienti = [ ] ;
2427: LD_ADDR_EXP 7
2431: PUSH
2432: EMPTY
2433: ST_TO_ADDR
// first_time = true ;
2434: LD_ADDR_LOC 21
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// gunext_ready = false ;
2442: LD_ADDR_LOC 35
2446: PUSH
2447: LD_INT 0
2449: ST_TO_ADDR
// randomize ;
2450: CALL_OW 10
// amer = 1 ;
2454: LD_ADDR_EXP 2
2458: PUSH
2459: LD_INT 1
2461: ST_TO_ADDR
// RevealFogArea ( amer , celamapa ) ;
2462: LD_EXP 2
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 332
// prepare_units ;
2474: CALL 0 0 0
// pocet_lidi = 7 ;
2478: LD_ADDR_LOC 22
2482: PUSH
2483: LD_INT 7
2485: ST_TO_ADDR
// chciplo = 0 ;
2486: LD_ADDR_LOC 23
2490: PUSH
2491: LD_INT 0
2493: ST_TO_ADDR
// dialog1 ;
2494: CALL 1800 0 0
// end ;
2498: END
// every 0 0$15 do
2499: GO 2501
2501: DISABLE
// begin cper = cperiode ;
2502: LD_ADDR_LOC 33
2506: PUSH
2507: LD_LOC 28
2511: ST_TO_ADDR
// createcratesarea ( rand ( 4 , 5 ) , dropzone , true ) ;
2512: LD_INT 4
2514: PPUSH
2515: LD_INT 5
2517: PPUSH
2518: CALL_OW 12
2522: PPUSH
2523: LD_INT 6
2525: PPUSH
2526: LD_INT 1
2528: PPUSH
2529: CALL_OW 55
// end ;
2533: END
// every 1 1$10 do
2534: GO 2536
2536: DISABLE
// createcratesarea ( rand ( 4 , 5 ) , dropzone , true ) ;
2537: LD_INT 4
2539: PPUSH
2540: LD_INT 5
2542: PPUSH
2543: CALL_OW 12
2547: PPUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 55
2558: END
// var cper ; every 0 0$15 + 1 1$45 do
2559: GO 2561
2561: DISABLE
// begin cper = cper - 0 0$15 ;
2562: LD_ADDR_LOC 33
2566: PUSH
2567: LD_LOC 33
2571: PUSH
2572: LD_INT 525
2574: MINUS
2575: ST_TO_ADDR
// if cper = 0 then
2576: LD_LOC 33
2580: PUSH
2581: LD_INT 0
2583: EQUAL
2584: IFFALSE 2649
// begin if createcratesarea ( rand ( 4 , 5 ) , dropzone , true ) then
2586: LD_INT 4
2588: PPUSH
2589: LD_INT 5
2591: PPUSH
2592: CALL_OW 12
2596: PPUSH
2597: LD_INT 6
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: CALL_OW 55
2607: IFFALSE 2646
// begin if ( supply > 1 ) then
2609: LD_LOC 20
2613: PUSH
2614: LD_INT 1
2616: GREATER
2617: IFFALSE 2634
// begin supply = supply - 1 ;
2619: LD_ADDR_LOC 20
2623: PUSH
2624: LD_LOC 20
2628: PUSH
2629: LD_INT 1
2631: MINUS
2632: ST_TO_ADDR
// enable ;
2633: ENABLE
// end ; cper = cperiode ;
2634: LD_ADDR_LOC 33
2638: PUSH
2639: LD_LOC 28
2643: ST_TO_ADDR
// end else
2644: GO 2647
// enable ;
2646: ENABLE
// end else
2647: GO 2650
// enable ;
2649: ENABLE
// end ;
2650: END
// every 0 0$7 do
2651: GO 2653
2653: DISABLE
// begin randomize ;
2654: CALL_OW 10
// enable ;
2658: ENABLE
// end ;
2659: END
// on humandestroyed ( manik , side , nation , x , y , direction , sex , class ) do if ( side = amer ) and ( class in [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_bazooker ] ) then
2660: LD_VAR 0 2
2664: PUSH
2665: LD_EXP 2
2669: EQUAL
2670: PUSH
2671: LD_VAR 0 8
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: LD_INT 2
2681: PUSH
2682: LD_INT 3
2684: PUSH
2685: LD_INT 4
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: LD_INT 9
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: IN
2702: AND
2703: IFFALSE 2719
// chciplo = chciplo + 1 ;
2705: LD_ADDR_LOC 23
2709: PUSH
2710: LD_LOC 23
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ST_TO_ADDR
2719: PPOPN 8
2721: END
// every 0 0$1 + 0 0$1 trigger isok ( ruboilp0 ) and not isconstructed ( ruboilp0 ) do
2722: LD_LOC 2
2726: PPUSH
2727: CALL_OW 302
2731: PUSH
2732: LD_LOC 2
2736: PPUSH
2737: CALL_OW 304
2741: NOT
2742: AND
2743: IFFALSE 2773
2745: GO 2747
2747: DISABLE
// begin rubwrks0 = combuild ( ruhengi0 , b_workshop , 76 , 93 , 1 ) ;
2748: LD_ADDR_LOC 4
2752: PUSH
2753: LD_INT 5
2755: PPUSH
2756: LD_INT 2
2758: PPUSH
2759: LD_INT 76
2761: PPUSH
2762: LD_INT 93
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 145
2772: ST_TO_ADDR
// end ;
2773: END
// every 0 0$1 + 0 0$1 trigger isok ( ruboilm0 ) and not isconstructed ( ruboilm0 ) do
2774: LD_LOC 1
2778: PPUSH
2779: CALL_OW 302
2783: PUSH
2784: LD_LOC 1
2788: PPUSH
2789: CALL_OW 304
2793: NOT
2794: AND
2795: IFFALSE 2825
2797: GO 2799
2799: DISABLE
// begin rubbrid0 = combuild ( ruhengi1 , b_lab , 73 , 79 , 2 ) ;
2800: LD_ADDR_LOC 6
2804: PUSH
2805: LD_INT 6
2807: PPUSH
2808: LD_INT 6
2810: PPUSH
2811: LD_INT 73
2813: PPUSH
2814: LD_INT 79
2816: PPUSH
2817: LD_INT 2
2819: PPUSH
2820: CALL_OW 145
2824: ST_TO_ADDR
// end ;
2825: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbunk0 ) and not isconstructed ( rubbunk0 ) do
2826: LD_LOC 7
2830: PPUSH
2831: CALL_OW 302
2835: PUSH
2836: LD_LOC 7
2840: PPUSH
2841: CALL_OW 304
2845: NOT
2846: AND
2847: IFFALSE 2877
2849: GO 2851
2851: DISABLE
// begin rubarmr0 = combuild ( ruhengi2 , b_armoury , 99 , 88 , 3 ) ;
2852: LD_ADDR_LOC 9
2856: PUSH
2857: LD_INT 8
2859: PPUSH
2860: LD_INT 4
2862: PPUSH
2863: LD_INT 99
2865: PPUSH
2866: LD_INT 88
2868: PPUSH
2869: LD_INT 3
2871: PPUSH
2872: CALL_OW 145
2876: ST_TO_ADDR
// end ;
2877: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbrid0 ) and not isconstructed ( rubbrid0 ) do
2878: LD_LOC 6
2882: PPUSH
2883: CALL_OW 302
2887: PUSH
2888: LD_LOC 6
2892: PPUSH
2893: CALL_OW 304
2897: NOT
2898: AND
2899: IFFALSE 2950
2901: GO 2903
2903: DISABLE
// begin comupgrade ( rubdepo0 ) ;
2904: LD_LOC 10
2908: PPUSH
2909: CALL_OW 146
// comupgradelab ( rubbrid0 , b_lab_weapon ) ;
2913: LD_LOC 6
2917: PPUSH
2918: LD_INT 10
2920: PPUSH
2921: CALL_OW 147
// rubbunk1 = combuild ( ruhengi1 , b_bunker , 72 , 84 , 2 ) ;
2925: LD_ADDR_LOC 8
2929: PUSH
2930: LD_INT 6
2932: PPUSH
2933: LD_INT 32
2935: PPUSH
2936: LD_INT 72
2938: PPUSH
2939: LD_INT 84
2941: PPUSH
2942: LD_INT 2
2944: PPUSH
2945: CALL_OW 145
2949: ST_TO_ADDR
// end ;
2950: END
// every 0 0$1 + 0 0$1 trigger isok ( rubarmr0 ) and not isconstructed ( rubarmr0 ) do
2951: LD_LOC 9
2955: PPUSH
2956: CALL_OW 302
2960: PUSH
2961: LD_LOC 9
2965: PPUSH
2966: CALL_OW 304
2970: NOT
2971: AND
2972: IFFALSE 3011
2974: GO 2976
2976: DISABLE
// begin comupgrade ( rubarmr0 ) ;
2977: LD_LOC 9
2981: PPUSH
2982: CALL_OW 146
// ruboilp1 = combuild ( ruhengi2 , b_oil_power , 95 , 97 , 0 ) ;
2986: LD_ADDR_LOC 3
2990: PUSH
2991: LD_INT 8
2993: PPUSH
2994: LD_INT 26
2996: PPUSH
2997: LD_INT 95
2999: PPUSH
3000: LD_INT 97
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 145
3010: ST_TO_ADDR
// end ;
3011: END
// every 0 0$1 + 0 0$1 trigger isok ( rubwrks0 ) and not isconstructed ( rubwrks0 ) do
3012: LD_LOC 4
3016: PPUSH
3017: CALL_OW 302
3021: PUSH
3022: LD_LOC 4
3026: PPUSH
3027: CALL_OW 304
3031: NOT
3032: AND
3033: IFFALSE 3083
3035: GO 3037
3037: DISABLE
// begin wait ( 0 0$2 ) ;
3038: LD_INT 70
3040: PPUSH
3041: CALL_OW 67
// commoveunit ( ruhmech0 , rubwrks0 ) ;
3045: LD_INT 9
3047: PPUSH
3048: LD_LOC 4
3052: PPUSH
3053: CALL_OW 112
// wait ( 0 0$3 ) ;
3057: LD_INT 105
3059: PPUSH
3060: CALL_OW 67
// comupgrade ( rubwrks0 ) ;
3064: LD_LOC 4
3068: PPUSH
3069: CALL_OW 146
// rubfact0 = rubwrks0 ;
3073: LD_ADDR_LOC 5
3077: PUSH
3078: LD_LOC 4
3082: ST_TO_ADDR
// end ;
3083: END
// on upgradecomplete ( un ) do if un = rubfact0 then
3084: LD_VAR 0 1
3088: PUSH
3089: LD_LOC 5
3093: EQUAL
3094: IFFALSE 3108
// commoveunit ( ruhmech0 , un ) ;
3096: LD_INT 9
3098: PPUSH
3099: LD_VAR 0 1
3103: PPUSH
3104: CALL_OW 112
3108: PPOPN 1
3110: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbunk1 ) and not isconstructed ( rubbunk1 ) and isok ( rubfact0 ) and not isconstructed ( rubfact0 ) and isinunit ( ruhmech0 ) = rubfact0 and gunext_ready do
3111: LD_LOC 8
3115: PPUSH
3116: CALL_OW 302
3120: PUSH
3121: LD_LOC 8
3125: PPUSH
3126: CALL_OW 304
3130: NOT
3131: AND
3132: PUSH
3133: LD_LOC 5
3137: PPUSH
3138: CALL_OW 302
3142: AND
3143: PUSH
3144: LD_LOC 5
3148: PPUSH
3149: CALL_OW 304
3153: NOT
3154: AND
3155: PUSH
3156: LD_INT 9
3158: PPUSH
3159: CALL_OW 310
3163: PUSH
3164: LD_LOC 5
3168: EQUAL
3169: AND
3170: PUSH
3171: LD_LOC 35
3175: AND
3176: IFFALSE 3299
3178: GO 3180
3180: DISABLE
// begin setblevel ( rubbunk1 , bunk1_lev ) ;
3181: LD_LOC 8
3185: PPUSH
3186: LD_LOC 32
3190: PPUSH
3191: CALL_OW 241
// case difficulty of 1 :
3195: LD_OWVAR 67
3199: PUSH
3200: LD_INT 1
3202: DOUBLE
3203: EQUAL
3204: IFTRUE 3208
3206: GO 3223
3208: POP
// complaceweapon ( rubbunk1 , ru_heavy_machine_gun ) ; 2 :
3209: LD_LOC 8
3213: PPUSH
3214: LD_INT 42
3216: PPUSH
3217: CALL_OW 148
3221: GO 3270
3223: LD_INT 2
3225: DOUBLE
3226: EQUAL
3227: IFTRUE 3231
3229: GO 3246
3231: POP
// complaceweapon ( rubbunk1 , ru_gatling_gun ) ; 3 :
3232: LD_LOC 8
3236: PPUSH
3237: LD_INT 43
3239: PPUSH
3240: CALL_OW 148
3244: GO 3270
3246: LD_INT 3
3248: DOUBLE
3249: EQUAL
3250: IFTRUE 3254
3252: GO 3269
3254: POP
// complaceweapon ( rubbunk1 , ru_gatling_gun ) ; end ;
3255: LD_LOC 8
3259: PPUSH
3260: LD_INT 43
3262: PPUSH
3263: CALL_OW 148
3267: GO 3270
3269: POP
// rusove = rusove diff [ ruhsold1 ] ;
3270: LD_ADDR_LOC 17
3274: PUSH
3275: LD_LOC 17
3279: PUSH
3280: LD_INT 11
3282: PUSH
3283: EMPTY
3284: LIST
3285: DIFF
3286: ST_TO_ADDR
// commoveunit ( ruhsold1 , rubbunk1 ) ;
3287: LD_INT 11
3289: PPUSH
3290: LD_LOC 8
3294: PPUSH
3295: CALL_OW 112
// end ;
3299: END
// every 0 0$1 + 0 0$1 trigger isok ( rubbunk0 ) and not isconstructed ( rubbunk0 ) and isok ( rubfact0 ) and not isconstructed ( rubfact0 ) and isinunit ( ruhmech0 ) = rubfact0 and gunext_ready do
3300: LD_LOC 7
3304: PPUSH
3305: CALL_OW 302
3309: PUSH
3310: LD_LOC 7
3314: PPUSH
3315: CALL_OW 304
3319: NOT
3320: AND
3321: PUSH
3322: LD_LOC 5
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: PUSH
3333: LD_LOC 5
3337: PPUSH
3338: CALL_OW 304
3342: NOT
3343: AND
3344: PUSH
3345: LD_INT 9
3347: PPUSH
3348: CALL_OW 310
3352: PUSH
3353: LD_LOC 5
3357: EQUAL
3358: AND
3359: PUSH
3360: LD_LOC 35
3364: AND
3365: IFFALSE 3488
3367: GO 3369
3369: DISABLE
// begin setblevel ( rubbunk0 , bunk0_lev ) ;
3370: LD_LOC 7
3374: PPUSH
3375: LD_LOC 31
3379: PPUSH
3380: CALL_OW 241
// case difficulty of 1 :
3384: LD_OWVAR 67
3388: PUSH
3389: LD_INT 1
3391: DOUBLE
3392: EQUAL
3393: IFTRUE 3397
3395: GO 3412
3397: POP
// complaceweapon ( rubbunk0 , ru_gun ) ; 2 :
3398: LD_LOC 7
3402: PPUSH
3403: LD_INT 44
3405: PPUSH
3406: CALL_OW 148
3410: GO 3459
3412: LD_INT 2
3414: DOUBLE
3415: EQUAL
3416: IFTRUE 3420
3418: GO 3435
3420: POP
// complaceweapon ( rubbunk0 , ru_gun ) ; 3 :
3421: LD_LOC 7
3425: PPUSH
3426: LD_INT 44
3428: PPUSH
3429: CALL_OW 148
3433: GO 3459
3435: LD_INT 3
3437: DOUBLE
3438: EQUAL
3439: IFTRUE 3443
3441: GO 3458
3443: POP
// complaceweapon ( rubbunk0 , ru_heavy_gun ) ; end ;
3444: LD_LOC 7
3448: PPUSH
3449: LD_INT 46
3451: PPUSH
3452: CALL_OW 148
3456: GO 3459
3458: POP
// rusove = rusove diff [ ruhsold0 ] ;
3459: LD_ADDR_LOC 17
3463: PUSH
3464: LD_LOC 17
3468: PUSH
3469: LD_INT 10
3471: PUSH
3472: EMPTY
3473: LIST
3474: DIFF
3475: ST_TO_ADDR
// commoveunit ( ruhsold0 , rubbunk0 ) ;
3476: LD_INT 10
3478: PPUSH
3479: LD_LOC 7
3483: PPUSH
3484: CALL_OW 112
// end ;
3488: END
// var b_ext_tr ; every 0 0$1 + 2 2$0 trigger isok ( rubfact0 ) and not isconstructed ( rubfact0 ) do
3489: LD_LOC 5
3493: PPUSH
3494: CALL_OW 302
3498: PUSH
3499: LD_LOC 5
3503: PPUSH
3504: CALL_OW 304
3508: NOT
3509: AND
3510: IFFALSE 3553
3512: GO 3514
3514: DISABLE
// begin combuild ( ruhengi0 , b_ext_gun , 73 , 90 , 2 ) ;
3515: LD_INT 5
3517: PPUSH
3518: LD_INT 17
3520: PPUSH
3521: LD_INT 73
3523: PPUSH
3524: LD_INT 90
3526: PPUSH
3527: LD_INT 2
3529: PPUSH
3530: CALL_OW 145
// combuild ( ruhengi1 , b_ext_track , 76 , 95 , 0 ) ;
3534: LD_INT 6
3536: PPUSH
3537: LD_INT 16
3539: PPUSH
3540: LD_INT 76
3542: PPUSH
3543: LD_INT 95
3545: PPUSH
3546: LD_INT 0
3548: PPUSH
3549: CALL_OW 145
// end ;
3553: END
// var gunext_ready ; on buildingcomplete ( rub ) do if getside ( rub ) = rus then
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL_OW 255
3563: PUSH
3564: LD_EXP 1
3568: EQUAL
3569: IFFALSE 3677
// if unitfilter ( rub , [ [ f_btype , b_ext_track ] ] ) then
3571: LD_VAR 0 1
3575: PPUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 16
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: PPUSH
3589: CALL_OW 72
3593: IFFALSE 3616
// combuild ( ruhengi1 , b_turret , 103 , 89 , 3 ) else
3595: LD_INT 6
3597: PPUSH
3598: LD_INT 33
3600: PPUSH
3601: LD_INT 103
3603: PPUSH
3604: LD_INT 89
3606: PPUSH
3607: LD_INT 3
3609: PPUSH
3610: CALL_OW 145
3614: GO 3677
// if unitfilter ( rub , [ [ f_btype , b_turret ] ] ) then
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_INT 30
3623: PUSH
3624: LD_INT 33
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PUSH
3631: EMPTY
3632: LIST
3633: PPUSH
3634: CALL_OW 72
3638: IFFALSE 3654
// complaceweapon ( rub , ru_gatling_gun ) else
3640: LD_VAR 0 1
3644: PPUSH
3645: LD_INT 43
3647: PPUSH
3648: CALL_OW 148
3652: GO 3677
// if getbtype ( rub ) = b_ext_gun then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 266
3663: PUSH
3664: LD_INT 17
3666: EQUAL
3667: IFFALSE 3677
// gunext_ready = true ;
3669: LD_ADDR_LOC 35
3673: PUSH
3674: LD_INT 1
3676: ST_TO_ADDR
3677: PPOPN 1
3679: END
// every 2 2$30 do
3680: GO 3682
3682: DISABLE
// begin com_queue = true ;
3683: LD_ADDR_OWVAR 49
3687: PUSH
3688: LD_INT 1
3690: ST_TO_ADDR
// commoveunit ( ruhengi0 , rubdepo0 ) ;
3691: LD_INT 5
3693: PPUSH
3694: LD_LOC 10
3698: PPUSH
3699: CALL_OW 112
// commoveunit ( ruhengi0 , rubdepo0 ) ;
3703: LD_INT 5
3705: PPUSH
3706: LD_LOC 10
3710: PPUSH
3711: CALL_OW 112
// com_queue = false ;
3715: LD_ADDR_OWVAR 49
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// end ;
3723: END
// var rusove_mimo ; var pom_rumi ; function rusove_mimo_bazi ; begin
3724: LD_INT 0
3726: PPUSH
// pom_rumi = rusove diff filterunitsinarea ( rubase , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
3727: LD_ADDR_LOC 37
3731: PUSH
3732: LD_LOC 17
3736: PUSH
3737: LD_INT 1
3739: PPUSH
3740: LD_INT 21
3742: PUSH
3743: LD_INT 1
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 50
3752: PUSH
3753: EMPTY
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 70
3764: DIFF
3765: ST_TO_ADDR
// rusove_mimo = pom_rumi diff filterunitsinarea ( rubase , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
3766: LD_ADDR_LOC 36
3770: PUSH
3771: LD_LOC 37
3775: PUSH
3776: LD_INT 1
3778: PPUSH
3779: LD_INT 21
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 50
3791: PUSH
3792: EMPTY
3793: LIST
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PPUSH
3799: CALL_OW 70
3803: DIFF
3804: ST_TO_ADDR
// result = rusove_mimo ;
3805: LD_ADDR_VAR 0 1
3809: PUSH
3810: LD_LOC 36
3814: ST_TO_ADDR
// end ;
3815: LD_VAR 0 1
3819: RET
// every 0 0$1 trigger rusove_mimo_bazi do
3820: CALL 3724 0 0
3824: IFFALSE 3851
3826: GO 3828
3828: DISABLE
// begin if retreat >= 0 then
3829: LD_EXP 5
3833: PUSH
3834: LD_INT 0
3836: GREATEREQUAL
3837: IFFALSE 3841
// exit ;
3839: GO 3851
// comreturn ( rusove_mimo ) ;
3841: LD_LOC 36
3845: PPUSH
3846: CALL_OW 144
// enable ;
3850: ENABLE
// end ;
3851: END
// function manage_prebytek ( zaklad ) ; var bz , bzz ; begin
3852: LD_INT 0
3854: PPUSH
3855: PPUSH
3856: PPUSH
// bzz = [ ] ;
3857: LD_ADDR_VAR 0 4
3861: PUSH
3862: EMPTY
3863: ST_TO_ADDR
// for bz in rusove0 do
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_EXP 14
3873: PUSH
3874: FOR_IN
3875: IFFALSE 3932
// if gettype ( bz ) = unit_vehicle then
3877: LD_VAR 0 3
3881: PPUSH
3882: CALL_OW 247
3886: PUSH
3887: LD_INT 2
3889: EQUAL
3890: IFFALSE 3930
// begin rusove0 = rusove0 diff [ bz ] ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PUSH
3902: LD_VAR 0 3
3906: PUSH
3907: EMPTY
3908: LIST
3909: DIFF
3910: ST_TO_ADDR
// bzz = bzz ^ [ bz ] ;
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: LD_VAR 0 4
3920: PUSH
3921: LD_VAR 0 3
3925: PUSH
3926: EMPTY
3927: LIST
3928: ADD
3929: ST_TO_ADDR
// end ;
3930: GO 3874
3932: POP
3933: POP
// for bz = 1 to ( 0 + bzz ) do
3934: LD_ADDR_VAR 0 3
3938: PUSH
3939: DOUBLE
3940: LD_INT 1
3942: DEC
3943: ST_TO_ADDR
3944: LD_INT 0
3946: PUSH
3947: LD_VAR 0 4
3951: PLUS
3952: PUSH
3953: FOR_TO
3954: IFFALSE 4028
// if bz <= ( mpora - zaklad ) then
3956: LD_VAR 0 3
3960: PUSH
3961: LD_EXP 10
3965: PUSH
3966: LD_VAR 0 1
3970: MINUS
3971: LESSEQUAL
3972: IFFALSE 4001
// rusove0 = rusove0 ^ [ bzz [ bz ] ] else
3974: LD_ADDR_EXP 14
3978: PUSH
3979: LD_EXP 14
3983: PUSH
3984: LD_VAR 0 4
3988: PUSH
3989: LD_VAR 0 3
3993: ARRAY
3994: PUSH
3995: EMPTY
3996: LIST
3997: ADD
3998: ST_TO_ADDR
3999: GO 4026
// prebytek = prebytek ^ [ bzz [ bz ] ] ;
4001: LD_ADDR_EXP 11
4005: PUSH
4006: LD_EXP 11
4010: PUSH
4011: LD_VAR 0 4
4015: PUSH
4016: LD_VAR 0 3
4020: ARRAY
4021: PUSH
4022: EMPTY
4023: LIST
4024: ADD
4025: ST_TO_ADDR
4026: GO 3953
4028: POP
4029: POP
// end ;
4030: LD_VAR 0 2
4034: RET
// export rusove0 ; every 0 0$2 + 1 1$18 do
4035: GO 4037
4037: DISABLE
// begin if t2rest > 0 then
4038: LD_LOC 24
4042: PUSH
4043: LD_INT 0
4045: GREATER
4046: IFFALSE 4065
// begin t2rest = t2rest - 0 0$2 ;
4048: LD_ADDR_LOC 24
4052: PUSH
4053: LD_LOC 24
4057: PUSH
4058: LD_INT 70
4060: MINUS
4061: ST_TO_ADDR
// enable ;
4062: ENABLE
// end else
4063: GO 4137
// begin if debug then
4065: LD_EXP 13
4069: IFFALSE 4078
// msg ( utok 1 v 1:30 ) ;
4071: LD_STRING utok 1 v 1:30
4073: PPUSH
4074: CALL_OW 100
// manage_prebytek ( 1 ) ;
4078: LD_INT 1
4080: PPUSH
4081: CALL 3852 0 1
// rusove0 = [ ruhsold2 , ruhsold3 , ruv2 ] ;
4085: LD_ADDR_EXP 14
4089: PUSH
4090: LD_INT 12
4092: PUSH
4093: LD_INT 13
4095: PUSH
4096: LD_LOC 15
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: ST_TO_ADDR
// rusove = rusove diff rusove0 ;
4106: LD_ADDR_LOC 17
4110: PUSH
4111: LD_LOC 17
4115: PUSH
4116: LD_EXP 14
4120: DIFF
4121: ST_TO_ADDR
// comagressivemove ( rusove0 , 53 , 46 ) ;
4122: LD_EXP 14
4126: PPUSH
4127: LD_INT 53
4129: PPUSH
4130: LD_INT 46
4132: PPUSH
4133: CALL_OW 114
// end ; end ;
4137: END
// every 0 0$1 + 2 2$0 trigger ( t2rest <= 0 ) and ( not isok ( ambbunk0 ) ) and ( not isok ( ambbunk1 ) ) do
4138: LD_LOC 24
4142: PUSH
4143: LD_INT 0
4145: LESSEQUAL
4146: PUSH
4147: LD_INT 18
4149: PPUSH
4150: CALL_OW 302
4154: NOT
4155: AND
4156: PUSH
4157: LD_INT 24
4159: PPUSH
4160: CALL_OW 302
4164: NOT
4165: AND
4166: IFFALSE 4186
4168: GO 4170
4170: DISABLE
// begin comagressivemove ( rusove0 , 63 , 43 ) ;
4171: LD_EXP 14
4175: PPUSH
4176: LD_INT 63
4178: PPUSH
4179: LD_INT 43
4181: PPUSH
4182: CALL_OW 114
// end ;
4186: END
// every 0 0$1 + 2 2$30 trigger ( t2rest <= 0 ) and ( not isok ( ambbunk0 ) ) and ( not isok ( ambbunk1 ) ) and ( not isok ( ambbrwr0 ) ) do
4187: LD_LOC 24
4191: PUSH
4192: LD_INT 0
4194: LESSEQUAL
4195: PUSH
4196: LD_INT 18
4198: PPUSH
4199: CALL_OW 302
4203: NOT
4204: AND
4205: PUSH
4206: LD_INT 24
4208: PPUSH
4209: CALL_OW 302
4213: NOT
4214: AND
4215: PUSH
4216: LD_INT 21
4218: PPUSH
4219: CALL_OW 302
4223: NOT
4224: AND
4225: IFFALSE 4245
4227: GO 4229
4229: DISABLE
// begin comagressivemove ( rusove0 , 49 , 33 ) ;
4230: LD_EXP 14
4234: PPUSH
4235: LD_INT 49
4237: PPUSH
4238: LD_INT 33
4240: PPUSH
4241: CALL_OW 114
// end ;
4245: END
// every 6 6$0 do
4246: GO 4248
4248: DISABLE
// begin case difficulty of 1 :
4249: LD_OWVAR 67
4253: PUSH
4254: LD_INT 1
4256: DOUBLE
4257: EQUAL
4258: IFTRUE 4262
4260: GO 4273
4262: POP
// t2rest = 2 2$0 ; 2 :
4263: LD_ADDR_LOC 24
4267: PUSH
4268: LD_INT 4200
4270: ST_TO_ADDR
4271: GO 4312
4273: LD_INT 2
4275: DOUBLE
4276: EQUAL
4277: IFTRUE 4281
4279: GO 4292
4281: POP
// t2rest = 1 1$0 ; 3 :
4282: LD_ADDR_LOC 24
4286: PUSH
4287: LD_INT 2100
4289: ST_TO_ADDR
4290: GO 4312
4292: LD_INT 3
4294: DOUBLE
4295: EQUAL
4296: IFTRUE 4300
4298: GO 4311
4300: POP
// t2rest = 0 ; end ;
4301: LD_ADDR_LOC 24
4305: PUSH
4306: LD_INT 0
4308: ST_TO_ADDR
4309: GO 4312
4311: POP
// end ;
4312: END
// var ruhsold6 , ruhsold7 ; var ruv3 , ruhmech4 , ruv4 , ruhmech5 ; every 0 0$2 + 6 6$28 do
4313: GO 4315
4315: DISABLE
// begin if t2rest > 0 then
4316: LD_LOC 24
4320: PUSH
4321: LD_INT 0
4323: GREATER
4324: IFFALSE 4343
// begin t2rest = t2rest - 0 0$2 ;
4326: LD_ADDR_LOC 24
4330: PUSH
4331: LD_LOC 24
4335: PUSH
4336: LD_INT 70
4338: MINUS
4339: ST_TO_ADDR
// enable ;
4340: ENABLE
// end else
4341: GO 4962
// begin if retreat >= 0 then
4343: LD_EXP 5
4347: PUSH
4348: LD_INT 0
4350: GREATEREQUAL
4351: IFFALSE 4355
// exit ;
4353: GO 4962
// if debug then
4355: LD_EXP 13
4359: IFFALSE 4368
// msg ( utok 2 v 6:30 ) ;
4361: LD_STRING utok 2 v 6:30
4363: PPUSH
4364: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
4368: LD_ADDR_EXP 14
4372: PUSH
4373: LD_EXP 14
4377: PPUSH
4378: LD_INT 50
4380: PUSH
4381: EMPTY
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: PPUSH
4387: CALL_OW 72
4391: ST_TO_ADDR
// uc_nation = nation_russian ;
4392: LD_ADDR_OWVAR 21
4396: PUSH
4397: LD_INT 3
4399: ST_TO_ADDR
// uc_side = rus ;
4400: LD_ADDR_OWVAR 20
4404: PUSH
4405: LD_EXP 1
4409: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
4410: LD_INT 1
4412: PPUSH
4413: LD_INT 5
4415: PPUSH
4416: CALL_OW 381
// hc_sex = sex_male ;
4420: LD_ADDR_OWVAR 27
4424: PUSH
4425: LD_INT 1
4427: ST_TO_ADDR
// ruhsold6 = createhuman ;
4428: LD_ADDR_LOC 38
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
4438: LD_INT 1
4440: PPUSH
4441: LD_INT 5
4443: PPUSH
4444: CALL_OW 381
// ruhsold7 = createhuman ;
4448: LD_ADDR_LOC 39
4452: PUSH
4453: CALL_OW 44
4457: ST_TO_ADDR
// case difficulty of 1 :
4458: LD_OWVAR 67
4462: PUSH
4463: LD_INT 1
4465: DOUBLE
4466: EQUAL
4467: IFTRUE 4471
4469: GO 4484
4471: POP
// preparemechanic ( sex_female , 3 ) ; 2 :
4472: LD_INT 2
4474: PPUSH
4475: LD_INT 3
4477: PPUSH
4478: CALL_OW 383
4482: GO 4527
4484: LD_INT 2
4486: DOUBLE
4487: EQUAL
4488: IFTRUE 4492
4490: GO 4505
4492: POP
// preparemechanic ( sex_female , 3 ) ; 3 :
4493: LD_INT 2
4495: PPUSH
4496: LD_INT 3
4498: PPUSH
4499: CALL_OW 383
4503: GO 4527
4505: LD_INT 3
4507: DOUBLE
4508: EQUAL
4509: IFTRUE 4513
4511: GO 4526
4513: POP
// preparemechanic ( sex_female , 4 ) ; end ;
4514: LD_INT 2
4516: PPUSH
4517: LD_INT 4
4519: PPUSH
4520: CALL_OW 383
4524: GO 4527
4526: POP
// ruhmech5 = createhuman ;
4527: LD_ADDR_LOC 43
4531: PUSH
4532: CALL_OW 44
4536: ST_TO_ADDR
// case difficulty of 1 :
4537: LD_OWVAR 67
4541: PUSH
4542: LD_INT 1
4544: DOUBLE
4545: EQUAL
4546: IFTRUE 4550
4548: GO 4569
4550: POP
// begin vc_chassis = ru_medium_wheeled ;
4551: LD_ADDR_OWVAR 37
4555: PUSH
4556: LD_INT 21
4558: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
4559: LD_ADDR_OWVAR 40
4563: PUSH
4564: LD_INT 42
4566: ST_TO_ADDR
// end ; 2 :
4567: GO 4624
4569: LD_INT 2
4571: DOUBLE
4572: EQUAL
4573: IFTRUE 4577
4575: GO 4596
4577: POP
// begin vc_chassis = ru_medium_wheeled ;
4578: LD_ADDR_OWVAR 37
4582: PUSH
4583: LD_INT 21
4585: ST_TO_ADDR
// vc_weapon = ru_gun ;
4586: LD_ADDR_OWVAR 40
4590: PUSH
4591: LD_INT 44
4593: ST_TO_ADDR
// end ; 3 :
4594: GO 4624
4596: LD_INT 3
4598: DOUBLE
4599: EQUAL
4600: IFTRUE 4604
4602: GO 4623
4604: POP
// begin vc_chassis = ru_heavy_wheeled ;
4605: LD_ADDR_OWVAR 37
4609: PUSH
4610: LD_INT 23
4612: ST_TO_ADDR
// vc_weapon = ru_gun ;
4613: LD_ADDR_OWVAR 40
4617: PUSH
4618: LD_INT 44
4620: ST_TO_ADDR
// end ; end ;
4621: GO 4624
4623: POP
// vc_control = control_computer ;
4624: LD_ADDR_OWVAR 38
4628: PUSH
4629: LD_INT 3
4631: ST_TO_ADDR
// vc_engine = engine_combustion ;
4632: LD_ADDR_OWVAR 39
4636: PUSH
4637: LD_INT 1
4639: ST_TO_ADDR
// ruv3 = createvehicle ;
4640: LD_ADDR_LOC 40
4644: PUSH
4645: CALL_OW 45
4649: ST_TO_ADDR
// setdir ( ruv3 , 5 ) ;
4650: LD_LOC 40
4654: PPUSH
4655: LD_INT 5
4657: PPUSH
4658: CALL_OW 233
// placeunitxy ( ruv3 , 119 , 91 , false ) ;
4662: LD_LOC 40
4666: PPUSH
4667: LD_INT 119
4669: PPUSH
4670: LD_INT 91
4672: PPUSH
4673: LD_INT 0
4675: PPUSH
4676: CALL_OW 48
// case difficulty of 1 :
4680: LD_OWVAR 67
4684: PUSH
4685: LD_INT 1
4687: DOUBLE
4688: EQUAL
4689: IFTRUE 4693
4691: GO 4712
4693: POP
// begin vc_chassis = ru_medium_wheeled ;
4694: LD_ADDR_OWVAR 37
4698: PUSH
4699: LD_INT 21
4701: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
4702: LD_ADDR_OWVAR 40
4706: PUSH
4707: LD_INT 42
4709: ST_TO_ADDR
// end ; 2 :
4710: GO 4767
4712: LD_INT 2
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4739
4720: POP
// begin vc_chassis = ru_medium_wheeled ;
4721: LD_ADDR_OWVAR 37
4725: PUSH
4726: LD_INT 21
4728: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
4729: LD_ADDR_OWVAR 40
4733: PUSH
4734: LD_INT 43
4736: ST_TO_ADDR
// end ; 3 :
4737: GO 4767
4739: LD_INT 3
4741: DOUBLE
4742: EQUAL
4743: IFTRUE 4747
4745: GO 4766
4747: POP
// begin vc_chassis = ru_medium_wheeled ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 21
4755: ST_TO_ADDR
// vc_weapon = ru_gun ;
4756: LD_ADDR_OWVAR 40
4760: PUSH
4761: LD_INT 44
4763: ST_TO_ADDR
// end ; end ;
4764: GO 4767
4766: POP
// vc_control = control_manual ;
4767: LD_ADDR_OWVAR 38
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// vc_engine = engine_combustion ;
4775: LD_ADDR_OWVAR 39
4779: PUSH
4780: LD_INT 1
4782: ST_TO_ADDR
// ruv4 = createvehicle ;
4783: LD_ADDR_LOC 42
4787: PUSH
4788: CALL_OW 45
4792: ST_TO_ADDR
// setdir ( ruv4 , 5 ) ;
4793: LD_LOC 42
4797: PPUSH
4798: LD_INT 5
4800: PPUSH
4801: CALL_OW 233
// placeunitxy ( ruv4 , 123 , 94 , false ) ;
4805: LD_LOC 42
4809: PPUSH
4810: LD_INT 123
4812: PPUSH
4813: LD_INT 94
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 48
// placehumaninunit ( ruhmech5 , ruv4 ) ;
4823: LD_LOC 43
4827: PPUSH
4828: LD_LOC 42
4832: PPUSH
4833: CALL_OW 52
// setdir ( ruhsold6 , 5 ) ;
4837: LD_LOC 38
4841: PPUSH
4842: LD_INT 5
4844: PPUSH
4845: CALL_OW 233
// setdir ( ruhsold7 , 5 ) ;
4849: LD_LOC 39
4853: PPUSH
4854: LD_INT 5
4856: PPUSH
4857: CALL_OW 233
// placeunitxyr ( ruhsold6 , 121 , 93 , 3 , false ) ;
4861: LD_LOC 38
4865: PPUSH
4866: LD_INT 121
4868: PPUSH
4869: LD_INT 93
4871: PPUSH
4872: LD_INT 3
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 50
// placeunitxyr ( ruhsold7 , 121 , 93 , 3 , false ) ;
4882: LD_LOC 39
4886: PPUSH
4887: LD_INT 121
4889: PPUSH
4890: LD_INT 93
4892: PPUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 0
4898: PPUSH
4899: CALL_OW 50
// manage_prebytek ( 2 ) ;
4903: LD_INT 2
4905: PPUSH
4906: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsold6 , ruhsold7 , ruv3 , ruv4 ] ;
4910: LD_ADDR_EXP 14
4914: PUSH
4915: LD_EXP 14
4919: PUSH
4920: LD_LOC 38
4924: PUSH
4925: LD_LOC 39
4929: PUSH
4930: LD_LOC 40
4934: PUSH
4935: LD_LOC 42
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: UNION
4946: ST_TO_ADDR
// comagressivemove ( rusove0 , 74 , 67 ) ;
4947: LD_EXP 14
4951: PPUSH
4952: LD_INT 74
4954: PPUSH
4955: LD_INT 67
4957: PPUSH
4958: CALL_OW 114
// end ; end ;
4962: END
// every 0 0$1 + 6 6$55 trigger ( t2rest <= 0 ) and ( not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea1 , [ [ f_side , rus ] ] ) ) ) do
4963: LD_LOC 24
4967: PUSH
4968: LD_INT 0
4970: LESSEQUAL
4971: PUSH
4972: LD_EXP 14
4976: PPUSH
4977: LD_INT 50
4979: PUSH
4980: EMPTY
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: PPUSH
4986: CALL_OW 72
4990: PUSH
4991: LD_INT 3
4993: PPUSH
4994: LD_INT 22
4996: PUSH
4997: LD_EXP 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: PPUSH
5009: CALL_OW 70
5013: DIFF
5014: NOT
5015: AND
5016: IFFALSE 5190
5018: GO 5020
5020: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
5021: LD_EXP 14
5025: PPUSH
5026: LD_INT 57
5028: PPUSH
5029: LD_INT 41
5031: PPUSH
5032: CALL_OW 114
// wait ( 0 0$20 ) ;
5036: LD_INT 700
5038: PPUSH
5039: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
5043: LD_EXP 14
5047: PPUSH
5048: LD_INT 47
5050: PPUSH
5051: LD_INT 38
5053: PPUSH
5054: CALL_OW 114
// wait ( 0 0$10 ) ;
5058: LD_INT 350
5060: PPUSH
5061: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
5065: LD_EXP 14
5069: PPUSH
5070: LD_INT 64
5072: PPUSH
5073: LD_INT 38
5075: PPUSH
5076: CALL_OW 114
// wait ( 0 0$10 ) ;
5080: LD_INT 350
5082: PPUSH
5083: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
5087: LD_EXP 14
5091: PPUSH
5092: LD_INT 45
5094: PPUSH
5095: LD_INT 29
5097: PPUSH
5098: CALL_OW 114
// wait ( 0 0$7 ) ;
5102: LD_INT 245
5104: PPUSH
5105: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
5109: LD_EXP 14
5113: PPUSH
5114: LD_INT 45
5116: PPUSH
5117: LD_INT 20
5119: PPUSH
5120: CALL_OW 114
// wait ( 0 0$10 ) ;
5124: LD_INT 350
5126: PPUSH
5127: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
5131: LD_EXP 14
5135: PPUSH
5136: LD_INT 56
5138: PPUSH
5139: LD_INT 20
5141: PPUSH
5142: CALL_OW 114
// wait ( 0 0$7 ) ;
5146: LD_INT 245
5148: PPUSH
5149: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
5153: LD_EXP 14
5157: PPUSH
5158: LD_INT 48
5160: PPUSH
5161: LD_INT 15
5163: PPUSH
5164: CALL_OW 114
// wait ( 0 0$10 ) ;
5168: LD_INT 350
5170: PPUSH
5171: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
5175: LD_EXP 14
5179: PPUSH
5180: LD_INT 52
5182: PPUSH
5183: LD_INT 9
5185: PPUSH
5186: CALL_OW 114
// end ;
5190: END
// var ruhsold8 , ruhsold9 ; var ruv5 , ruhmech6 , ruv6 , ruhmech7 ; every 11 11$30 do
5191: GO 5193
5193: DISABLE
// begin if retreat >= 0 then
5194: LD_EXP 5
5198: PUSH
5199: LD_INT 0
5201: GREATEREQUAL
5202: IFFALSE 5206
// exit ;
5204: GO 5811
// if debug then
5206: LD_EXP 13
5210: IFFALSE 5219
// msg ( utok 3 v 11:30 ) ;
5212: LD_STRING utok 3 v 11:30
5214: PPUSH
5215: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
5219: LD_ADDR_EXP 14
5223: PUSH
5224: LD_EXP 14
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 72
5242: ST_TO_ADDR
// uc_nation = nation_russian ;
5243: LD_ADDR_OWVAR 21
5247: PUSH
5248: LD_INT 3
5250: ST_TO_ADDR
// uc_side = rus ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_EXP 1
5260: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
5261: LD_INT 1
5263: PPUSH
5264: LD_INT 5
5266: PPUSH
5267: CALL_OW 381
// ruhsold8 = createhuman ;
5271: LD_ADDR_LOC 44
5275: PUSH
5276: CALL_OW 44
5280: ST_TO_ADDR
// preparesoldier ( sex_female , 6 ) ;
5281: LD_INT 2
5283: PPUSH
5284: LD_INT 6
5286: PPUSH
5287: CALL_OW 381
// ruhsold9 = createhuman ;
5291: LD_ADDR_LOC 45
5295: PUSH
5296: CALL_OW 44
5300: ST_TO_ADDR
// case difficulty of 1 :
5301: LD_OWVAR 67
5305: PUSH
5306: LD_INT 1
5308: DOUBLE
5309: EQUAL
5310: IFTRUE 5314
5312: GO 5327
5314: POP
// preparemechanic ( sex_male , 3 ) ; 2 :
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 3
5320: PPUSH
5321: CALL_OW 383
5325: GO 5370
5327: LD_INT 2
5329: DOUBLE
5330: EQUAL
5331: IFTRUE 5335
5333: GO 5348
5335: POP
// preparemechanic ( sex_male , 4 ) ; 3 :
5336: LD_INT 1
5338: PPUSH
5339: LD_INT 4
5341: PPUSH
5342: CALL_OW 383
5346: GO 5370
5348: LD_INT 3
5350: DOUBLE
5351: EQUAL
5352: IFTRUE 5356
5354: GO 5369
5356: POP
// preparemechanic ( sex_male , 5 ) ; end ;
5357: LD_INT 1
5359: PPUSH
5360: LD_INT 5
5362: PPUSH
5363: CALL_OW 383
5367: GO 5370
5369: POP
// ruhmech7 = createhuman ;
5370: LD_ADDR_LOC 49
5374: PUSH
5375: CALL_OW 44
5379: ST_TO_ADDR
// case difficulty of 1 :
5380: LD_OWVAR 67
5384: PUSH
5385: LD_INT 1
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5393
5391: GO 5412
5393: POP
// begin vc_chassis = ru_medium_wheeled ;
5394: LD_ADDR_OWVAR 37
5398: PUSH
5399: LD_INT 21
5401: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
5402: LD_ADDR_OWVAR 40
5406: PUSH
5407: LD_INT 42
5409: ST_TO_ADDR
// end ; 2 :
5410: GO 5467
5412: LD_INT 2
5414: DOUBLE
5415: EQUAL
5416: IFTRUE 5420
5418: GO 5439
5420: POP
// begin vc_chassis = ru_medium_wheeled ;
5421: LD_ADDR_OWVAR 37
5425: PUSH
5426: LD_INT 21
5428: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
5429: LD_ADDR_OWVAR 40
5433: PUSH
5434: LD_INT 43
5436: ST_TO_ADDR
// end ; 3 :
5437: GO 5467
5439: LD_INT 3
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5466
5447: POP
// begin vc_chassis = ru_heavy_wheeled ;
5448: LD_ADDR_OWVAR 37
5452: PUSH
5453: LD_INT 23
5455: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
5456: LD_ADDR_OWVAR 40
5460: PUSH
5461: LD_INT 43
5463: ST_TO_ADDR
// end ; end ;
5464: GO 5467
5466: POP
// vc_control = control_computer ;
5467: LD_ADDR_OWVAR 38
5471: PUSH
5472: LD_INT 3
5474: ST_TO_ADDR
// vc_engine = engine_combustion ;
5475: LD_ADDR_OWVAR 39
5479: PUSH
5480: LD_INT 1
5482: ST_TO_ADDR
// ruv5 = createvehicle ;
5483: LD_ADDR_LOC 46
5487: PUSH
5488: CALL_OW 45
5492: ST_TO_ADDR
// setdir ( ruv5 , 5 ) ;
5493: LD_LOC 46
5497: PPUSH
5498: LD_INT 5
5500: PPUSH
5501: CALL_OW 233
// placeunitxyr ( ruv5 , 119 , 91 , 5 , false ) ;
5505: LD_LOC 46
5509: PPUSH
5510: LD_INT 119
5512: PPUSH
5513: LD_INT 91
5515: PPUSH
5516: LD_INT 5
5518: PPUSH
5519: LD_INT 0
5521: PPUSH
5522: CALL_OW 50
// case difficulty of 1 :
5526: LD_OWVAR 67
5530: PUSH
5531: LD_INT 1
5533: DOUBLE
5534: EQUAL
5535: IFTRUE 5539
5537: GO 5558
5539: POP
// begin vc_chassis = ru_medium_wheeled ;
5540: LD_ADDR_OWVAR 37
5544: PUSH
5545: LD_INT 21
5547: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
5548: LD_ADDR_OWVAR 40
5552: PUSH
5553: LD_INT 43
5555: ST_TO_ADDR
// end ; 2 :
5556: GO 5613
5558: LD_INT 2
5560: DOUBLE
5561: EQUAL
5562: IFTRUE 5566
5564: GO 5585
5566: POP
// begin vc_chassis = ru_medium_wheeled ;
5567: LD_ADDR_OWVAR 37
5571: PUSH
5572: LD_INT 21
5574: ST_TO_ADDR
// vc_weapon = ru_gun ;
5575: LD_ADDR_OWVAR 40
5579: PUSH
5580: LD_INT 44
5582: ST_TO_ADDR
// end ; 3 :
5583: GO 5613
5585: LD_INT 3
5587: DOUBLE
5588: EQUAL
5589: IFTRUE 5593
5591: GO 5612
5593: POP
// begin vc_chassis = ru_heavy_wheeled ;
5594: LD_ADDR_OWVAR 37
5598: PUSH
5599: LD_INT 23
5601: ST_TO_ADDR
// vc_weapon = ru_heavy_gun ;
5602: LD_ADDR_OWVAR 40
5606: PUSH
5607: LD_INT 46
5609: ST_TO_ADDR
// end ; end ;
5610: GO 5613
5612: POP
// vc_control = control_manual ;
5613: LD_ADDR_OWVAR 38
5617: PUSH
5618: LD_INT 1
5620: ST_TO_ADDR
// vc_engine = engine_combustion ;
5621: LD_ADDR_OWVAR 39
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// ruv6 = createvehicle ;
5629: LD_ADDR_LOC 48
5633: PUSH
5634: CALL_OW 45
5638: ST_TO_ADDR
// setdir ( ruv6 , 5 ) ;
5639: LD_LOC 48
5643: PPUSH
5644: LD_INT 5
5646: PPUSH
5647: CALL_OW 233
// placeunitxyr ( ruv6 , 123 , 94 , 5 , false ) ;
5651: LD_LOC 48
5655: PPUSH
5656: LD_INT 123
5658: PPUSH
5659: LD_INT 94
5661: PPUSH
5662: LD_INT 5
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 50
// placehumaninunit ( ruhmech7 , ruv6 ) ;
5672: LD_LOC 49
5676: PPUSH
5677: LD_LOC 48
5681: PPUSH
5682: CALL_OW 52
// setdir ( ruhsold8 , 5 ) ;
5686: LD_LOC 44
5690: PPUSH
5691: LD_INT 5
5693: PPUSH
5694: CALL_OW 233
// setdir ( ruhsold9 , 5 ) ;
5698: LD_LOC 45
5702: PPUSH
5703: LD_INT 5
5705: PPUSH
5706: CALL_OW 233
// placeunitxyr ( ruhsold8 , 121 , 93 , 3 , false ) ;
5710: LD_LOC 44
5714: PPUSH
5715: LD_INT 121
5717: PPUSH
5718: LD_INT 93
5720: PPUSH
5721: LD_INT 3
5723: PPUSH
5724: LD_INT 0
5726: PPUSH
5727: CALL_OW 50
// placeunitxyr ( ruhsold9 , 121 , 93 , 3 , false ) ;
5731: LD_LOC 45
5735: PPUSH
5736: LD_INT 121
5738: PPUSH
5739: LD_INT 93
5741: PPUSH
5742: LD_INT 3
5744: PPUSH
5745: LD_INT 0
5747: PPUSH
5748: CALL_OW 50
// manage_prebytek ( 2 ) ;
5752: LD_INT 2
5754: PPUSH
5755: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsold8 , ruhsold9 , ruv5 , ruv6 ] ;
5759: LD_ADDR_EXP 14
5763: PUSH
5764: LD_EXP 14
5768: PUSH
5769: LD_LOC 44
5773: PUSH
5774: LD_LOC 45
5778: PUSH
5779: LD_LOC 46
5783: PUSH
5784: LD_LOC 48
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: UNION
5795: ST_TO_ADDR
// comagressivemove ( rusove0 , 71 , 63 ) ;
5796: LD_EXP 14
5800: PPUSH
5801: LD_INT 71
5803: PPUSH
5804: LD_INT 63
5806: PPUSH
5807: CALL_OW 114
// end ;
5811: END
// every 0 0$1 + 11 11$55 trigger not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea1 , [ [ f_side , rus ] ] ) ) do
5812: LD_EXP 14
5816: PPUSH
5817: LD_INT 50
5819: PUSH
5820: EMPTY
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: PPUSH
5826: CALL_OW 72
5830: PUSH
5831: LD_INT 3
5833: PPUSH
5834: LD_INT 22
5836: PUSH
5837: LD_EXP 1
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: PPUSH
5849: CALL_OW 70
5853: DIFF
5854: NOT
5855: IFFALSE 6029
5857: GO 5859
5859: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
5860: LD_EXP 14
5864: PPUSH
5865: LD_INT 57
5867: PPUSH
5868: LD_INT 41
5870: PPUSH
5871: CALL_OW 114
// wait ( 0 0$10 ) ;
5875: LD_INT 350
5877: PPUSH
5878: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
5882: LD_EXP 14
5886: PPUSH
5887: LD_INT 47
5889: PPUSH
5890: LD_INT 38
5892: PPUSH
5893: CALL_OW 114
// wait ( 0 0$5 ) ;
5897: LD_INT 175
5899: PPUSH
5900: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
5904: LD_EXP 14
5908: PPUSH
5909: LD_INT 64
5911: PPUSH
5912: LD_INT 38
5914: PPUSH
5915: CALL_OW 114
// wait ( 0 0$10 ) ;
5919: LD_INT 350
5921: PPUSH
5922: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
5926: LD_EXP 14
5930: PPUSH
5931: LD_INT 45
5933: PPUSH
5934: LD_INT 29
5936: PPUSH
5937: CALL_OW 114
// wait ( 0 0$5 ) ;
5941: LD_INT 175
5943: PPUSH
5944: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
5948: LD_EXP 14
5952: PPUSH
5953: LD_INT 45
5955: PPUSH
5956: LD_INT 20
5958: PPUSH
5959: CALL_OW 114
// wait ( 0 0$10 ) ;
5963: LD_INT 350
5965: PPUSH
5966: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
5970: LD_EXP 14
5974: PPUSH
5975: LD_INT 56
5977: PPUSH
5978: LD_INT 20
5980: PPUSH
5981: CALL_OW 114
// wait ( 0 0$5 ) ;
5985: LD_INT 175
5987: PPUSH
5988: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
5992: LD_EXP 14
5996: PPUSH
5997: LD_INT 48
5999: PPUSH
6000: LD_INT 15
6002: PPUSH
6003: CALL_OW 114
// wait ( 0 0$10 ) ;
6007: LD_INT 350
6009: PPUSH
6010: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
6014: LD_EXP 14
6018: PPUSH
6019: LD_INT 52
6021: PPUSH
6022: LD_INT 9
6024: PPUSH
6025: CALL_OW 114
// end ;
6029: END
// var ruhsolda , ruhsoldb ; var ruv7 , ruhmech8 , ruv8 ; every 15 15$0 do
6030: GO 6032
6032: DISABLE
// begin if retreat >= 0 then
6033: LD_EXP 5
6037: PUSH
6038: LD_INT 0
6040: GREATEREQUAL
6041: IFFALSE 6045
// exit ;
6043: GO 6674
// if debug then
6045: LD_EXP 13
6049: IFFALSE 6058
// msg ( utok 4 v 15:00 ) ;
6051: LD_STRING utok 4 v 15:00
6053: PPUSH
6054: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
6058: LD_ADDR_EXP 14
6062: PUSH
6063: LD_EXP 14
6067: PPUSH
6068: LD_INT 50
6070: PUSH
6071: EMPTY
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: PPUSH
6077: CALL_OW 72
6081: ST_TO_ADDR
// uc_nation = nation_russian ;
6082: LD_ADDR_OWVAR 21
6086: PUSH
6087: LD_INT 3
6089: ST_TO_ADDR
// uc_side = rus ;
6090: LD_ADDR_OWVAR 20
6094: PUSH
6095: LD_EXP 1
6099: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 5
6105: PPUSH
6106: CALL_OW 381
// hc_name =  ;
6110: LD_ADDR_OWVAR 26
6114: PUSH
6115: LD_STRING 
6117: ST_TO_ADDR
// ruhsolda = createhuman ;
6118: LD_ADDR_LOC 50
6122: PUSH
6123: CALL_OW 44
6127: ST_TO_ADDR
// preparesoldier ( sex_female , 6 ) ;
6128: LD_INT 2
6130: PPUSH
6131: LD_INT 6
6133: PPUSH
6134: CALL_OW 381
// hc_name =  ;
6138: LD_ADDR_OWVAR 26
6142: PUSH
6143: LD_STRING 
6145: ST_TO_ADDR
// ruhsoldb = createhuman ;
6146: LD_ADDR_LOC 51
6150: PUSH
6151: CALL_OW 44
6155: ST_TO_ADDR
// case difficulty of 1 :
6156: LD_OWVAR 67
6160: PUSH
6161: LD_INT 1
6163: DOUBLE
6164: EQUAL
6165: IFTRUE 6169
6167: GO 6182
6169: POP
// preparemechanic ( sex_male , 3 ) ; 2 :
6170: LD_INT 1
6172: PPUSH
6173: LD_INT 3
6175: PPUSH
6176: CALL_OW 383
6180: GO 6225
6182: LD_INT 2
6184: DOUBLE
6185: EQUAL
6186: IFTRUE 6190
6188: GO 6203
6190: POP
// preparemechanic ( sex_male , 4 ) ; 3 :
6191: LD_INT 1
6193: PPUSH
6194: LD_INT 4
6196: PPUSH
6197: CALL_OW 383
6201: GO 6225
6203: LD_INT 3
6205: DOUBLE
6206: EQUAL
6207: IFTRUE 6211
6209: GO 6224
6211: POP
// preparemechanic ( sex_male , 5 ) ; end ;
6212: LD_INT 1
6214: PPUSH
6215: LD_INT 5
6217: PPUSH
6218: CALL_OW 383
6222: GO 6225
6224: POP
// hc_name =  ;
6225: LD_ADDR_OWVAR 26
6229: PUSH
6230: LD_STRING 
6232: ST_TO_ADDR
// ruhmech8 = createhuman ;
6233: LD_ADDR_LOC 53
6237: PUSH
6238: CALL_OW 44
6242: ST_TO_ADDR
// case difficulty of 1 :
6243: LD_OWVAR 67
6247: PUSH
6248: LD_INT 1
6250: DOUBLE
6251: EQUAL
6252: IFTRUE 6256
6254: GO 6275
6256: POP
// begin vc_chassis = ru_medium_wheeled ;
6257: LD_ADDR_OWVAR 37
6261: PUSH
6262: LD_INT 21
6264: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
6265: LD_ADDR_OWVAR 40
6269: PUSH
6270: LD_INT 42
6272: ST_TO_ADDR
// end ; 2 :
6273: GO 6330
6275: LD_INT 2
6277: DOUBLE
6278: EQUAL
6279: IFTRUE 6283
6281: GO 6302
6283: POP
// begin vc_chassis = ru_medium_wheeled ;
6284: LD_ADDR_OWVAR 37
6288: PUSH
6289: LD_INT 21
6291: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6292: LD_ADDR_OWVAR 40
6296: PUSH
6297: LD_INT 43
6299: ST_TO_ADDR
// end ; 3 :
6300: GO 6330
6302: LD_INT 3
6304: DOUBLE
6305: EQUAL
6306: IFTRUE 6310
6308: GO 6329
6310: POP
// begin vc_chassis = ru_heavy_wheeled ;
6311: LD_ADDR_OWVAR 37
6315: PUSH
6316: LD_INT 23
6318: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6319: LD_ADDR_OWVAR 40
6323: PUSH
6324: LD_INT 43
6326: ST_TO_ADDR
// end ; end ;
6327: GO 6330
6329: POP
// vc_control = control_manual ;
6330: LD_ADDR_OWVAR 38
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// vc_engine = engine_combustion ;
6338: LD_ADDR_OWVAR 39
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// ruv8 = createvehicle ;
6346: LD_ADDR_LOC 54
6350: PUSH
6351: CALL_OW 45
6355: ST_TO_ADDR
// setdir ( ruv8 , 5 ) ;
6356: LD_LOC 54
6360: PPUSH
6361: LD_INT 5
6363: PPUSH
6364: CALL_OW 233
// placeunitxyr ( ruv8 , 119 , 91 , 5 , false ) ;
6368: LD_LOC 54
6372: PPUSH
6373: LD_INT 119
6375: PPUSH
6376: LD_INT 91
6378: PPUSH
6379: LD_INT 5
6381: PPUSH
6382: LD_INT 0
6384: PPUSH
6385: CALL_OW 50
// placehumaninunit ( ruhmech8 , ruv8 ) ;
6389: LD_LOC 53
6393: PPUSH
6394: LD_LOC 54
6398: PPUSH
6399: CALL_OW 52
// case difficulty of 1 :
6403: LD_OWVAR 67
6407: PUSH
6408: LD_INT 1
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6435
6416: POP
// begin vc_chassis = ru_medium_wheeled ;
6417: LD_ADDR_OWVAR 37
6421: PUSH
6422: LD_INT 21
6424: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6425: LD_ADDR_OWVAR 40
6429: PUSH
6430: LD_INT 43
6432: ST_TO_ADDR
// end ; 2 :
6433: GO 6490
6435: LD_INT 2
6437: DOUBLE
6438: EQUAL
6439: IFTRUE 6443
6441: GO 6462
6443: POP
// begin vc_chassis = ru_medium_wheeled ;
6444: LD_ADDR_OWVAR 37
6448: PUSH
6449: LD_INT 21
6451: ST_TO_ADDR
// vc_weapon = ru_gun ;
6452: LD_ADDR_OWVAR 40
6456: PUSH
6457: LD_INT 44
6459: ST_TO_ADDR
// end ; 3 :
6460: GO 6490
6462: LD_INT 3
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6489
6470: POP
// begin vc_chassis = ru_heavy_wheeled ;
6471: LD_ADDR_OWVAR 37
6475: PUSH
6476: LD_INT 23
6478: ST_TO_ADDR
// vc_weapon = ru_heavy_gun ;
6479: LD_ADDR_OWVAR 40
6483: PUSH
6484: LD_INT 46
6486: ST_TO_ADDR
// end ; end ;
6487: GO 6490
6489: POP
// vc_control = control_computer ;
6490: LD_ADDR_OWVAR 38
6494: PUSH
6495: LD_INT 3
6497: ST_TO_ADDR
// vc_engine = engine_combustion ;
6498: LD_ADDR_OWVAR 39
6502: PUSH
6503: LD_INT 1
6505: ST_TO_ADDR
// ruv7 = createvehicle ;
6506: LD_ADDR_LOC 52
6510: PUSH
6511: CALL_OW 45
6515: ST_TO_ADDR
// setdir ( ruv7 , 5 ) ;
6516: LD_LOC 52
6520: PPUSH
6521: LD_INT 5
6523: PPUSH
6524: CALL_OW 233
// placeunitxyr ( ruv7 , 123 , 94 , 5 , false ) ;
6528: LD_LOC 52
6532: PPUSH
6533: LD_INT 123
6535: PPUSH
6536: LD_INT 94
6538: PPUSH
6539: LD_INT 5
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 50
// setdir ( ruhsolda , 5 ) ;
6549: LD_LOC 50
6553: PPUSH
6554: LD_INT 5
6556: PPUSH
6557: CALL_OW 233
// setdir ( ruhsoldb , 5 ) ;
6561: LD_LOC 51
6565: PPUSH
6566: LD_INT 5
6568: PPUSH
6569: CALL_OW 233
// placeunitxyr ( ruhsolda , 121 , 93 , 3 , false ) ;
6573: LD_LOC 50
6577: PPUSH
6578: LD_INT 121
6580: PPUSH
6581: LD_INT 93
6583: PPUSH
6584: LD_INT 3
6586: PPUSH
6587: LD_INT 0
6589: PPUSH
6590: CALL_OW 50
// placeunitxyr ( ruhsoldb , 121 , 93 , 3 , false ) ;
6594: LD_LOC 51
6598: PPUSH
6599: LD_INT 121
6601: PPUSH
6602: LD_INT 93
6604: PPUSH
6605: LD_INT 3
6607: PPUSH
6608: LD_INT 0
6610: PPUSH
6611: CALL_OW 50
// manage_prebytek ( 2 ) ;
6615: LD_INT 2
6617: PPUSH
6618: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsolda , ruhsoldb , ruv7 , ruv8 ] ;
6622: LD_ADDR_EXP 14
6626: PUSH
6627: LD_EXP 14
6631: PUSH
6632: LD_LOC 50
6636: PUSH
6637: LD_LOC 51
6641: PUSH
6642: LD_LOC 52
6646: PUSH
6647: LD_LOC 54
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: UNION
6658: ST_TO_ADDR
// comagressivemove ( rusove0 , 57 , 67 ) ;
6659: LD_EXP 14
6663: PPUSH
6664: LD_INT 57
6666: PPUSH
6667: LD_INT 67
6669: PPUSH
6670: CALL_OW 114
// end ;
6674: END
// every 0 0$1 + 15 15$25 trigger not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea2 , [ [ f_side , rus ] ] ) ) do
6675: LD_EXP 14
6679: PPUSH
6680: LD_INT 50
6682: PUSH
6683: EMPTY
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: PPUSH
6689: CALL_OW 72
6693: PUSH
6694: LD_INT 9
6696: PPUSH
6697: LD_INT 22
6699: PUSH
6700: LD_EXP 1
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: EMPTY
6710: LIST
6711: PPUSH
6712: CALL_OW 70
6716: DIFF
6717: NOT
6718: IFFALSE 6892
6720: GO 6722
6722: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
6723: LD_EXP 14
6727: PPUSH
6728: LD_INT 57
6730: PPUSH
6731: LD_INT 41
6733: PPUSH
6734: CALL_OW 114
// wait ( 0 0$10 ) ;
6738: LD_INT 350
6740: PPUSH
6741: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
6745: LD_EXP 14
6749: PPUSH
6750: LD_INT 47
6752: PPUSH
6753: LD_INT 38
6755: PPUSH
6756: CALL_OW 114
// wait ( 0 0$5 ) ;
6760: LD_INT 175
6762: PPUSH
6763: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
6767: LD_EXP 14
6771: PPUSH
6772: LD_INT 64
6774: PPUSH
6775: LD_INT 38
6777: PPUSH
6778: CALL_OW 114
// wait ( 0 0$10 ) ;
6782: LD_INT 350
6784: PPUSH
6785: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
6789: LD_EXP 14
6793: PPUSH
6794: LD_INT 45
6796: PPUSH
6797: LD_INT 29
6799: PPUSH
6800: CALL_OW 114
// wait ( 0 0$5 ) ;
6804: LD_INT 175
6806: PPUSH
6807: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
6811: LD_EXP 14
6815: PPUSH
6816: LD_INT 45
6818: PPUSH
6819: LD_INT 20
6821: PPUSH
6822: CALL_OW 114
// wait ( 0 0$10 ) ;
6826: LD_INT 350
6828: PPUSH
6829: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
6833: LD_EXP 14
6837: PPUSH
6838: LD_INT 56
6840: PPUSH
6841: LD_INT 20
6843: PPUSH
6844: CALL_OW 114
// wait ( 0 0$5 ) ;
6848: LD_INT 175
6850: PPUSH
6851: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
6855: LD_EXP 14
6859: PPUSH
6860: LD_INT 48
6862: PPUSH
6863: LD_INT 15
6865: PPUSH
6866: CALL_OW 114
// wait ( 0 0$10 ) ;
6870: LD_INT 350
6872: PPUSH
6873: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
6877: LD_EXP 14
6881: PPUSH
6882: LD_INT 52
6884: PPUSH
6885: LD_INT 9
6887: PPUSH
6888: CALL_OW 114
// end ;
6892: END
// var ruhsoldc , ruhsoldd ; var ruv9 , ruhmech9 , ruhmecha , ruva , ruvb ; every 21 21$0 do
6893: GO 6895
6895: DISABLE
// begin if retreat >= 0 then
6896: LD_EXP 5
6900: PUSH
6901: LD_INT 0
6903: GREATEREQUAL
6904: IFFALSE 6908
// exit ;
6906: GO 7808
// if debug then
6908: LD_EXP 13
6912: IFFALSE 6921
// msg ( utok 5 v 21:00 ) ;
6914: LD_STRING utok 5 v 21:00
6916: PPUSH
6917: CALL_OW 100
// rusove0 = unitfilter ( rusove0 , [ [ f_ok ] ] ) ;
6921: LD_ADDR_EXP 14
6925: PUSH
6926: LD_EXP 14
6930: PPUSH
6931: LD_INT 50
6933: PUSH
6934: EMPTY
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: PPUSH
6940: CALL_OW 72
6944: ST_TO_ADDR
// uc_nation = nation_russian ;
6945: LD_ADDR_OWVAR 21
6949: PUSH
6950: LD_INT 3
6952: ST_TO_ADDR
// uc_side = rus ;
6953: LD_ADDR_OWVAR 20
6957: PUSH
6958: LD_EXP 1
6962: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
6963: LD_INT 1
6965: PPUSH
6966: LD_INT 5
6968: PPUSH
6969: CALL_OW 381
// hc_name =  ;
6973: LD_ADDR_OWVAR 26
6977: PUSH
6978: LD_STRING 
6980: ST_TO_ADDR
// ruhsoldc = createhuman ;
6981: LD_ADDR_LOC 55
6985: PUSH
6986: CALL_OW 44
6990: ST_TO_ADDR
// preparesoldier ( sex_female , 6 ) ;
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 6
6996: PPUSH
6997: CALL_OW 381
// hc_name =  ;
7001: LD_ADDR_OWVAR 26
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// ruhsoldd = createhuman ;
7009: LD_ADDR_LOC 56
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// case difficulty of 1 :
7019: LD_OWVAR 67
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7045
7032: POP
// preparemechanic ( sex_male , 3 ) ; 2 :
7033: LD_INT 1
7035: PPUSH
7036: LD_INT 3
7038: PPUSH
7039: CALL_OW 383
7043: GO 7088
7045: LD_INT 2
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7066
7053: POP
// preparemechanic ( sex_male , 4 ) ; 3 :
7054: LD_INT 1
7056: PPUSH
7057: LD_INT 4
7059: PPUSH
7060: CALL_OW 383
7064: GO 7088
7066: LD_INT 3
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7087
7074: POP
// preparemechanic ( sex_male , 5 ) ; end ;
7075: LD_INT 1
7077: PPUSH
7078: LD_INT 5
7080: PPUSH
7081: CALL_OW 383
7085: GO 7088
7087: POP
// hc_name =  ;
7088: LD_ADDR_OWVAR 26
7092: PUSH
7093: LD_STRING 
7095: ST_TO_ADDR
// ruhmech9 = createhuman ;
7096: LD_ADDR_LOC 58
7100: PUSH
7101: CALL_OW 44
7105: ST_TO_ADDR
// case difficulty of 2 :
7106: LD_OWVAR 67
7110: PUSH
7111: LD_INT 2
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7132
7119: POP
// preparemechanic ( sex_female , 3 ) ; 3 :
7120: LD_INT 2
7122: PPUSH
7123: LD_INT 3
7125: PPUSH
7126: CALL_OW 383
7130: GO 7154
7132: LD_INT 3
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7140
7138: GO 7153
7140: POP
// preparemechanic ( sex_female , 5 ) ; end ;
7141: LD_INT 2
7143: PPUSH
7144: LD_INT 5
7146: PPUSH
7147: CALL_OW 383
7151: GO 7154
7153: POP
// hc_name =  ;
7154: LD_ADDR_OWVAR 26
7158: PUSH
7159: LD_STRING 
7161: ST_TO_ADDR
// if difficulty > 1 then
7162: LD_OWVAR 67
7166: PUSH
7167: LD_INT 1
7169: GREATER
7170: IFFALSE 7184
// ruhmecha = createhuman else
7172: LD_ADDR_LOC 59
7176: PUSH
7177: CALL_OW 44
7181: ST_TO_ADDR
7182: GO 7192
// ruhmecha = 0 ;
7184: LD_ADDR_LOC 59
7188: PUSH
7189: LD_INT 0
7191: ST_TO_ADDR
// case difficulty of 1 :
7192: LD_OWVAR 67
7196: PUSH
7197: LD_INT 1
7199: DOUBLE
7200: EQUAL
7201: IFTRUE 7205
7203: GO 7224
7205: POP
// begin vc_chassis = ru_medium_wheeled ;
7206: LD_ADDR_OWVAR 37
7210: PUSH
7211: LD_INT 21
7213: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
7214: LD_ADDR_OWVAR 40
7218: PUSH
7219: LD_INT 42
7221: ST_TO_ADDR
// end ; 2 :
7222: GO 7279
7224: LD_INT 2
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7251
7232: POP
// begin vc_chassis = ru_medium_wheeled ;
7233: LD_ADDR_OWVAR 37
7237: PUSH
7238: LD_INT 21
7240: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7241: LD_ADDR_OWVAR 40
7245: PUSH
7246: LD_INT 43
7248: ST_TO_ADDR
// end ; 3 :
7249: GO 7279
7251: LD_INT 3
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7278
7259: POP
// begin vc_chassis = ru_medium_wheeled ;
7260: LD_ADDR_OWVAR 37
7264: PUSH
7265: LD_INT 21
7267: ST_TO_ADDR
// vc_weapon = ru_gun ;
7268: LD_ADDR_OWVAR 40
7272: PUSH
7273: LD_INT 44
7275: ST_TO_ADDR
// end ; end ;
7276: GO 7279
7278: POP
// vc_control = control_manual ;
7279: LD_ADDR_OWVAR 38
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// vc_engine = engine_combustion ;
7287: LD_ADDR_OWVAR 39
7291: PUSH
7292: LD_INT 1
7294: ST_TO_ADDR
// ruv9 = createvehicle ;
7295: LD_ADDR_LOC 57
7299: PUSH
7300: CALL_OW 45
7304: ST_TO_ADDR
// setdir ( ruv9 , 5 ) ;
7305: LD_LOC 57
7309: PPUSH
7310: LD_INT 5
7312: PPUSH
7313: CALL_OW 233
// placeunitxyr ( ruv9 , 119 , 91 , 5 , false ) ;
7317: LD_LOC 57
7321: PPUSH
7322: LD_INT 119
7324: PPUSH
7325: LD_INT 91
7327: PPUSH
7328: LD_INT 5
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: CALL_OW 50
// placehumaninunit ( ruhmech9 , ruv9 ) ;
7338: LD_LOC 58
7342: PPUSH
7343: LD_LOC 57
7347: PPUSH
7348: CALL_OW 52
// case difficulty of 2 :
7352: LD_OWVAR 67
7356: PUSH
7357: LD_INT 2
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7384
7365: POP
// begin vc_chassis = ru_medium_wheeled ;
7366: LD_ADDR_OWVAR 37
7370: PUSH
7371: LD_INT 21
7373: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7374: LD_ADDR_OWVAR 40
7378: PUSH
7379: LD_INT 43
7381: ST_TO_ADDR
// end ; 3 :
7382: GO 7412
7384: LD_INT 3
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7411
7392: POP
// begin vc_chassis = ru_heavy_wheeled ;
7393: LD_ADDR_OWVAR 37
7397: PUSH
7398: LD_INT 23
7400: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7401: LD_ADDR_OWVAR 40
7405: PUSH
7406: LD_INT 43
7408: ST_TO_ADDR
// end ; end ;
7409: GO 7412
7411: POP
// vc_control = control_manual ;
7412: LD_ADDR_OWVAR 38
7416: PUSH
7417: LD_INT 1
7419: ST_TO_ADDR
// vc_engine = engine_combustion ;
7420: LD_ADDR_OWVAR 39
7424: PUSH
7425: LD_INT 1
7427: ST_TO_ADDR
// if difficulty > 1 then
7428: LD_OWVAR 67
7432: PUSH
7433: LD_INT 1
7435: GREATER
7436: IFFALSE 7450
// ruva = createvehicle else
7438: LD_ADDR_LOC 60
7442: PUSH
7443: CALL_OW 45
7447: ST_TO_ADDR
7448: GO 7458
// ruva = 0 ;
7450: LD_ADDR_LOC 60
7454: PUSH
7455: LD_INT 0
7457: ST_TO_ADDR
// setdir ( ruva , 5 ) ;
7458: LD_LOC 60
7462: PPUSH
7463: LD_INT 5
7465: PPUSH
7466: CALL_OW 233
// placeunitxyr ( ruva , 119 , 91 , 5 , false ) ;
7470: LD_LOC 60
7474: PPUSH
7475: LD_INT 119
7477: PPUSH
7478: LD_INT 91
7480: PPUSH
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 50
// placehumaninunit ( ruhmecha , ruva ) ;
7491: LD_LOC 59
7495: PPUSH
7496: LD_LOC 60
7500: PPUSH
7501: CALL_OW 52
// case difficulty of 1 :
7505: LD_OWVAR 67
7509: PUSH
7510: LD_INT 1
7512: DOUBLE
7513: EQUAL
7514: IFTRUE 7518
7516: GO 7537
7518: POP
// begin vc_chassis = ru_medium_wheeled ;
7519: LD_ADDR_OWVAR 37
7523: PUSH
7524: LD_INT 21
7526: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
7527: LD_ADDR_OWVAR 40
7531: PUSH
7532: LD_INT 43
7534: ST_TO_ADDR
// end ; 2 :
7535: GO 7592
7537: LD_INT 2
7539: DOUBLE
7540: EQUAL
7541: IFTRUE 7545
7543: GO 7564
7545: POP
// begin vc_chassis = ru_medium_wheeled ;
7546: LD_ADDR_OWVAR 37
7550: PUSH
7551: LD_INT 21
7553: ST_TO_ADDR
// vc_weapon = ru_gun ;
7554: LD_ADDR_OWVAR 40
7558: PUSH
7559: LD_INT 44
7561: ST_TO_ADDR
// end ; 3 :
7562: GO 7592
7564: LD_INT 3
7566: DOUBLE
7567: EQUAL
7568: IFTRUE 7572
7570: GO 7591
7572: POP
// begin vc_chassis = ru_heavy_wheeled ;
7573: LD_ADDR_OWVAR 37
7577: PUSH
7578: LD_INT 23
7580: ST_TO_ADDR
// vc_weapon = ru_heavy_gun ;
7581: LD_ADDR_OWVAR 40
7585: PUSH
7586: LD_INT 46
7588: ST_TO_ADDR
// end ; end ;
7589: GO 7592
7591: POP
// vc_control = control_computer ;
7592: LD_ADDR_OWVAR 38
7596: PUSH
7597: LD_INT 3
7599: ST_TO_ADDR
// vc_engine = engine_combustion ;
7600: LD_ADDR_OWVAR 39
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// ruvb = createvehicle ;
7608: LD_ADDR_LOC 61
7612: PUSH
7613: CALL_OW 45
7617: ST_TO_ADDR
// setdir ( ruvb , 5 ) ;
7618: LD_LOC 61
7622: PPUSH
7623: LD_INT 5
7625: PPUSH
7626: CALL_OW 233
// placeunitxyr ( ruvb , 123 , 94 , 5 , false ) ;
7630: LD_LOC 61
7634: PPUSH
7635: LD_INT 123
7637: PPUSH
7638: LD_INT 94
7640: PPUSH
7641: LD_INT 5
7643: PPUSH
7644: LD_INT 0
7646: PPUSH
7647: CALL_OW 50
// setdir ( ruhsoldc , 5 ) ;
7651: LD_LOC 55
7655: PPUSH
7656: LD_INT 5
7658: PPUSH
7659: CALL_OW 233
// setdir ( ruhsoldd , 5 ) ;
7663: LD_LOC 56
7667: PPUSH
7668: LD_INT 5
7670: PPUSH
7671: CALL_OW 233
// placeunitxyr ( ruhsoldc , 121 , 93 , 3 , false ) ;
7675: LD_LOC 55
7679: PPUSH
7680: LD_INT 121
7682: PPUSH
7683: LD_INT 93
7685: PPUSH
7686: LD_INT 3
7688: PPUSH
7689: LD_INT 0
7691: PPUSH
7692: CALL_OW 50
// placeunitxyr ( ruhsoldd , 121 , 93 , 3 , false ) ;
7696: LD_LOC 56
7700: PPUSH
7701: LD_INT 121
7703: PPUSH
7704: LD_INT 93
7706: PPUSH
7707: LD_INT 3
7709: PPUSH
7710: LD_INT 0
7712: PPUSH
7713: CALL_OW 50
// if difficulty > 1 then
7717: LD_OWVAR 67
7721: PUSH
7722: LD_INT 1
7724: GREATER
7725: IFFALSE 7736
// manage_prebytek ( 3 ) else
7727: LD_INT 3
7729: PPUSH
7730: CALL 3852 0 1
7734: GO 7743
// manage_prebytek ( 2 ) ;
7736: LD_INT 2
7738: PPUSH
7739: CALL 3852 0 1
// rusove0 = rusove0 union [ ruhsoldc , ruhsoldd , ruv9 , ruva , ruvb ] diff [ 0 ] ;
7743: LD_ADDR_EXP 14
7747: PUSH
7748: LD_EXP 14
7752: PUSH
7753: LD_LOC 55
7757: PUSH
7758: LD_LOC 56
7762: PUSH
7763: LD_LOC 57
7767: PUSH
7768: LD_LOC 60
7772: PUSH
7773: LD_LOC 61
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: UNION
7785: PUSH
7786: LD_INT 0
7788: PUSH
7789: EMPTY
7790: LIST
7791: DIFF
7792: ST_TO_ADDR
// comagressivemove ( rusove0 , 57 , 67 ) ;
7793: LD_EXP 14
7797: PPUSH
7798: LD_INT 57
7800: PPUSH
7801: LD_INT 67
7803: PPUSH
7804: CALL_OW 114
// end ;
7808: END
// every 0 0$1 + 21 21$25 trigger not ( unitfilter ( rusove0 , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea2 , [ [ f_side , rus ] ] ) ) do
7809: LD_EXP 14
7813: PPUSH
7814: LD_INT 50
7816: PUSH
7817: EMPTY
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: PUSH
7828: LD_INT 9
7830: PPUSH
7831: LD_INT 22
7833: PUSH
7834: LD_EXP 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: PPUSH
7846: CALL_OW 70
7850: DIFF
7851: NOT
7852: IFFALSE 8026
7854: GO 7856
7856: DISABLE
// begin comagressivemove ( rusove0 , 57 , 41 ) ;
7857: LD_EXP 14
7861: PPUSH
7862: LD_INT 57
7864: PPUSH
7865: LD_INT 41
7867: PPUSH
7868: CALL_OW 114
// wait ( 0 0$10 ) ;
7872: LD_INT 350
7874: PPUSH
7875: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 38 ) ;
7879: LD_EXP 14
7883: PPUSH
7884: LD_INT 47
7886: PPUSH
7887: LD_INT 38
7889: PPUSH
7890: CALL_OW 114
// wait ( 0 0$5 ) ;
7894: LD_INT 175
7896: PPUSH
7897: CALL_OW 67
// comagressivemove ( rusove0 , 64 , 38 ) ;
7901: LD_EXP 14
7905: PPUSH
7906: LD_INT 64
7908: PPUSH
7909: LD_INT 38
7911: PPUSH
7912: CALL_OW 114
// wait ( 0 0$10 ) ;
7916: LD_INT 350
7918: PPUSH
7919: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 29 ) ;
7923: LD_EXP 14
7927: PPUSH
7928: LD_INT 45
7930: PPUSH
7931: LD_INT 29
7933: PPUSH
7934: CALL_OW 114
// wait ( 0 0$5 ) ;
7938: LD_INT 175
7940: PPUSH
7941: CALL_OW 67
// comagressivemove ( rusove0 , 45 , 20 ) ;
7945: LD_EXP 14
7949: PPUSH
7950: LD_INT 45
7952: PPUSH
7953: LD_INT 20
7955: PPUSH
7956: CALL_OW 114
// wait ( 0 0$10 ) ;
7960: LD_INT 350
7962: PPUSH
7963: CALL_OW 67
// comagressivemove ( rusove0 , 56 , 20 ) ;
7967: LD_EXP 14
7971: PPUSH
7972: LD_INT 56
7974: PPUSH
7975: LD_INT 20
7977: PPUSH
7978: CALL_OW 114
// wait ( 0 0$5 ) ;
7982: LD_INT 175
7984: PPUSH
7985: CALL_OW 67
// comagressivemove ( rusove0 , 48 , 15 ) ;
7989: LD_EXP 14
7993: PPUSH
7994: LD_INT 48
7996: PPUSH
7997: LD_INT 15
7999: PPUSH
8000: CALL_OW 114
// wait ( 0 0$10 ) ;
8004: LD_INT 350
8006: PPUSH
8007: CALL_OW 67
// comagressivemove ( rusove0 , 52 , 9 ) ;
8011: LD_EXP 14
8015: PPUSH
8016: LD_INT 52
8018: PPUSH
8019: LD_INT 9
8021: PPUSH
8022: CALL_OW 114
// end ;
8026: END
// every 0 0$30 do
8027: GO 8029
8029: DISABLE
// begin placeunitxyr ( posilya [ 1 ] , 79 , 3 , 3 , false ) ;
8030: LD_EXP 27
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: LD_INT 79
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 3
8047: PPUSH
8048: LD_INT 0
8050: PPUSH
8051: CALL_OW 50
// placeunitxyr ( posilya [ 2 ] , 80 , 2 , 3 , false ) ;
8055: LD_EXP 27
8059: PUSH
8060: LD_INT 2
8062: ARRAY
8063: PPUSH
8064: LD_INT 80
8066: PPUSH
8067: LD_INT 2
8069: PPUSH
8070: LD_INT 3
8072: PPUSH
8073: LD_INT 0
8075: PPUSH
8076: CALL_OW 50
// pocet_lidi = pocet_lidi + 2 ;
8080: LD_ADDR_LOC 22
8084: PUSH
8085: LD_LOC 22
8089: PUSH
8090: LD_INT 2
8092: PLUS
8093: ST_TO_ADDR
// commovexy ( posilya , 77 , 16 ) ;
8094: LD_EXP 27
8098: PPUSH
8099: LD_INT 77
8101: PPUSH
8102: LD_INT 16
8104: PPUSH
8105: CALL_OW 111
// wait ( 0 0$7 ) ;
8109: LD_INT 245
8111: PPUSH
8112: CALL_OW 67
// commovexy ( posilya , 68 , 21 ) ;
8116: LD_EXP 27
8120: PPUSH
8121: LD_INT 68
8123: PPUSH
8124: LD_INT 21
8126: PPUSH
8127: CALL_OW 111
// wait ( 0 0$7 ) ;
8131: LD_INT 245
8133: PPUSH
8134: CALL_OW 67
// commovexy ( posilya , 55 , 15 ) ;
8138: LD_EXP 27
8142: PPUSH
8143: LD_INT 55
8145: PPUSH
8146: LD_INT 15
8148: PPUSH
8149: CALL_OW 111
// wait ( 0 0$7 ) ;
8153: LD_INT 245
8155: PPUSH
8156: CALL_OW 67
// centeronunits ( posilya ) ;
8160: LD_EXP 27
8164: PPUSH
8165: CALL_OW 85
// dialogueon ;
8169: CALL_OW 6
// if glad and ( gladloc = 3 ) then
8173: LD_EXP 34
8177: PUSH
8178: LD_EXP 44
8182: PUSH
8183: LD_INT 3
8185: EQUAL
8186: AND
8187: IFFALSE 8203
// say ( glad , D2-Glad-1 ) else
8189: LD_EXP 34
8193: PPUSH
8194: LD_STRING D2-Glad-1
8196: PPUSH
8197: CALL_OW 88
8201: GO 8256
// if getsex ( posilya [ 2 ] ) = sex_male then
8203: LD_EXP 27
8207: PUSH
8208: LD_INT 2
8210: ARRAY
8211: PPUSH
8212: CALL_OW 258
8216: PUSH
8217: LD_INT 1
8219: EQUAL
8220: IFFALSE 8240
// say ( posilya [ 2 ] , D2-Sol1-1 ) else
8222: LD_EXP 27
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: LD_STRING D2-Sol1-1
8233: PPUSH
8234: CALL_OW 88
8238: GO 8256
// say ( posilya [ 2 ] , D2-FSol1-1 ) ;
8240: LD_EXP 27
8244: PUSH
8245: LD_INT 2
8247: ARRAY
8248: PPUSH
8249: LD_STRING D2-FSol1-1
8251: PPUSH
8252: CALL_OW 88
// case gamma2commander of 1 :
8256: LD_EXP 46
8260: PUSH
8261: LD_INT 1
8263: DOUBLE
8264: EQUAL
8265: IFTRUE 8269
8267: GO 8284
8269: POP
// say ( lucy , D2-Don-1 ) ; 2 :
8270: LD_EXP 31
8274: PPUSH
8275: LD_STRING D2-Don-1
8277: PPUSH
8278: CALL_OW 88
8282: GO 8331
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8307
8292: POP
// say ( brown , D2-Brown-1 ) ; 3 :
8293: LD_EXP 32
8297: PPUSH
8298: LD_STRING D2-Brown-1
8300: PPUSH
8301: CALL_OW 88
8305: GO 8331
8307: LD_INT 3
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8330
8315: POP
// say ( vanh , D2-VanH-1 ) ; end ;
8316: LD_EXP 33
8320: PPUSH
8321: LD_STRING D2-VanH-1
8323: PPUSH
8324: CALL_OW 88
8328: GO 8331
8330: POP
// dialogueoff ;
8331: CALL_OW 7
// end ;
8335: END
// every 0 0$5 do var tmp , tmpch ;
8336: GO 8338
8338: DISABLE
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
// begin return_time = return_time - 0 0$5 ;
8343: LD_ADDR_EXP 29
8347: PUSH
8348: LD_EXP 29
8352: PUSH
8353: LD_INT 175
8355: MINUS
8356: ST_TO_ADDR
// if return_time <= 0 then
8357: LD_EXP 29
8361: PUSH
8362: LD_INT 0
8364: LESSEQUAL
8365: IFFALSE 10089
// begin john = john_ ;
8367: LD_ADDR_EXP 17
8371: PUSH
8372: LD_EXP 20
8376: ST_TO_ADDR
// placeunitxyr ( posilyb [ 1 ] , 77 , 4 , 3 , false ) ;
8377: LD_EXP 28
8381: PUSH
8382: LD_INT 1
8384: ARRAY
8385: PPUSH
8386: LD_INT 77
8388: PPUSH
8389: LD_INT 4
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 50
// placeunitxyr ( posilyb [ 2 ] , 77 , 4 , 3 , false ) ;
8402: LD_EXP 28
8406: PUSH
8407: LD_INT 2
8409: ARRAY
8410: PPUSH
8411: LD_INT 77
8413: PPUSH
8414: LD_INT 4
8416: PPUSH
8417: LD_INT 3
8419: PPUSH
8420: LD_INT 0
8422: PPUSH
8423: CALL_OW 50
// placeunitxyr ( posilyb [ 3 ] , 77 , 4 , 3 , false ) ;
8427: LD_EXP 28
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PPUSH
8436: LD_INT 77
8438: PPUSH
8439: LD_INT 4
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: LD_INT 0
8447: PPUSH
8448: CALL_OW 50
// placeunitxyr ( posilyb [ 4 ] , 77 , 4 , 3 , false ) ;
8452: LD_EXP 28
8456: PUSH
8457: LD_INT 4
8459: ARRAY
8460: PPUSH
8461: LD_INT 77
8463: PPUSH
8464: LD_INT 4
8466: PPUSH
8467: LD_INT 3
8469: PPUSH
8470: LD_INT 0
8472: PPUSH
8473: CALL_OW 50
// placeunitxyr ( posilyb [ 5 ] , 77 , 4 , 3 , false ) ;
8477: LD_EXP 28
8481: PUSH
8482: LD_INT 5
8484: ARRAY
8485: PPUSH
8486: LD_INT 77
8488: PPUSH
8489: LD_INT 4
8491: PPUSH
8492: LD_INT 3
8494: PPUSH
8495: LD_INT 0
8497: PPUSH
8498: CALL_OW 50
// pocet_lidi = pocet_lidi + 5 ;
8502: LD_ADDR_LOC 22
8506: PUSH
8507: LD_LOC 22
8511: PUSH
8512: LD_INT 5
8514: PLUS
8515: ST_TO_ADDR
// commovexy ( posilyb , 77 , 16 ) ;
8516: LD_EXP 28
8520: PPUSH
8521: LD_INT 77
8523: PPUSH
8524: LD_INT 16
8526: PPUSH
8527: CALL_OW 111
// wait ( 0 0$7 ) ;
8531: LD_INT 245
8533: PPUSH
8534: CALL_OW 67
// commovexy ( posilyb , 69 , 20 ) ;
8538: LD_EXP 28
8542: PPUSH
8543: LD_INT 69
8545: PPUSH
8546: LD_INT 20
8548: PPUSH
8549: CALL_OW 111
// wait ( 0 0$7 ) ;
8553: LD_INT 245
8555: PPUSH
8556: CALL_OW 67
// centeronunits ( posilyb ) ;
8560: LD_EXP 28
8564: PPUSH
8565: CALL_OW 85
// dialogueon ;
8569: CALL_OW 6
// say ( john , D3-JMM-1 ) ;
8573: LD_EXP 17
8577: PPUSH
8578: LD_STRING D3-JMM-1
8580: PPUSH
8581: CALL_OW 88
// tmpch = 0 ;
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// case gamma2commander of 1 :
8593: LD_EXP 46
8597: PUSH
8598: LD_INT 1
8600: DOUBLE
8601: EQUAL
8602: IFTRUE 8606
8604: GO 8642
8606: POP
// if islive ( lucy ) then
8607: LD_EXP 31
8611: PPUSH
8612: CALL_OW 300
8616: IFFALSE 8632
// say ( lucy , D3-Don-1 ) else
8618: LD_EXP 31
8622: PPUSH
8623: LD_STRING D3-Don-1
8625: PPUSH
8626: CALL_OW 88
8630: GO 8640
// tmpch = 1 ; 2 :
8632: LD_ADDR_VAR 0 2
8636: PUSH
8637: LD_INT 1
8639: ST_TO_ADDR
8640: GO 8731
8642: LD_INT 2
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8686
8650: POP
// if islive ( brown ) then
8651: LD_EXP 32
8655: PPUSH
8656: CALL_OW 300
8660: IFFALSE 8676
// say ( brown , D3-Brown-1 ) else
8662: LD_EXP 32
8666: PPUSH
8667: LD_STRING D3-Brown-1
8669: PPUSH
8670: CALL_OW 88
8674: GO 8684
// tmpch = 1 ; 3 :
8676: LD_ADDR_VAR 0 2
8680: PUSH
8681: LD_INT 1
8683: ST_TO_ADDR
8684: GO 8731
8686: LD_INT 3
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8694
8692: GO 8730
8694: POP
// if islive ( vanh ) then
8695: LD_EXP 33
8699: PPUSH
8700: CALL_OW 300
8704: IFFALSE 8720
// say ( vanh , D3-VanH-1 ) else
8706: LD_EXP 33
8710: PPUSH
8711: LD_STRING D3-VanH-1
8713: PPUSH
8714: CALL_OW 88
8718: GO 8728
// tmpch = 1 ; end ;
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
8728: GO 8731
8730: POP
// if tmpch then
8731: LD_VAR 0 2
8735: IFFALSE 9277
// case gamma2commander of 1 :
8737: LD_EXP 46
8741: PUSH
8742: LD_INT 1
8744: DOUBLE
8745: EQUAL
8746: IFTRUE 8750
8748: GO 8872
8750: POP
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) ;
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_INT 22
8758: PUSH
8759: LD_EXP 2
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 21
8770: PUSH
8771: LD_INT 1
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 52
8780: PUSH
8781: EMPTY
8782: LIST
8783: PUSH
8784: LD_INT 26
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 3
8796: PUSH
8797: LD_INT 23
8799: PUSH
8800: LD_INT 0
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: PPUSH
8815: CALL_OW 69
8819: ST_TO_ADDR
// if tmp then
8820: LD_VAR 0 1
8824: IFFALSE 8870
// begin say ( tmp [ 1 ] , D3-Sol1-1 ) ;
8826: LD_VAR 0 1
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: LD_STRING D3-Sol1-1
8837: PPUSH
8838: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
8842: LD_VAR 0 1
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PPUSH
8851: LD_STRING D3-Sol1-1c
8853: PPUSH
8854: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
8858: LD_EXP 17
8862: PPUSH
8863: LD_STRING D3-JMM-2
8865: PPUSH
8866: CALL_OW 88
// end ; end ; 2 :
8870: GO 9277
8872: LD_INT 2
8874: DOUBLE
8875: EQUAL
8876: IFTRUE 8880
8878: GO 9002
8880: POP
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) ;
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: LD_INT 22
8888: PUSH
8889: LD_EXP 2
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 21
8900: PUSH
8901: LD_INT 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 52
8910: PUSH
8911: EMPTY
8912: LIST
8913: PUSH
8914: LD_INT 26
8916: PUSH
8917: LD_INT 1
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 3
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 0
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 69
8949: ST_TO_ADDR
// if tmp then
8950: LD_VAR 0 1
8954: IFFALSE 9000
// begin say ( tmp [ 1 ] , D3-Sol1-1a ) ;
8956: LD_VAR 0 1
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: LD_STRING D3-Sol1-1a
8967: PPUSH
8968: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
8972: LD_VAR 0 1
8976: PUSH
8977: LD_INT 1
8979: ARRAY
8980: PPUSH
8981: LD_STRING D3-Sol1-1c
8983: PPUSH
8984: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
8988: LD_EXP 17
8992: PPUSH
8993: LD_STRING D3-JMM-2
8995: PPUSH
8996: CALL_OW 88
// end ; end ; 3 :
9000: GO 9277
9002: LD_INT 3
9004: DOUBLE
9005: EQUAL
9006: IFTRUE 9010
9008: GO 9276
9010: POP
// begin tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9011: LD_ADDR_VAR 0 1
9015: PUSH
9016: LD_INT 8
9018: PPUSH
9019: LD_INT 22
9021: PUSH
9022: LD_EXP 2
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 21
9033: PUSH
9034: LD_INT 1
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 52
9043: PUSH
9044: EMPTY
9045: LIST
9046: PUSH
9047: LD_INT 26
9049: PUSH
9050: LD_INT 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 3
9059: PUSH
9060: LD_INT 23
9062: PUSH
9063: LD_INT 0
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: PPUSH
9078: CALL_OW 70
9082: PUSH
9083: LD_EXP 17
9087: DIFF
9088: ST_TO_ADDR
// if tmp > 0 then
9089: LD_VAR 0 1
9093: PUSH
9094: LD_INT 0
9096: GREATER
9097: IFFALSE 9145
// begin say ( tmp [ 1 ] , D3-Sol1-1b ) ;
9099: LD_VAR 0 1
9103: PUSH
9104: LD_INT 1
9106: ARRAY
9107: PPUSH
9108: LD_STRING D3-Sol1-1b
9110: PPUSH
9111: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
9115: LD_VAR 0 1
9119: PUSH
9120: LD_INT 1
9122: ARRAY
9123: PPUSH
9124: LD_STRING D3-Sol1-1c
9126: PPUSH
9127: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
9131: LD_EXP 17
9135: PPUSH
9136: LD_STRING D3-JMM-2
9138: PPUSH
9139: CALL_OW 88
// end else
9143: GO 9274
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_INT 22
9152: PUSH
9153: LD_EXP 2
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 21
9164: PUSH
9165: LD_INT 1
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 52
9174: PUSH
9175: EMPTY
9176: LIST
9177: PUSH
9178: LD_INT 26
9180: PUSH
9181: LD_INT 1
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 3
9190: PUSH
9191: LD_INT 23
9193: PUSH
9194: LD_INT 0
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PPUSH
9209: CALL_OW 69
9213: PUSH
9214: LD_EXP 17
9218: DIFF
9219: ST_TO_ADDR
// if tmp > 0 then
9220: LD_VAR 0 1
9224: PUSH
9225: LD_INT 0
9227: GREATER
9228: IFFALSE 9274
// begin say ( tmp [ 1 ] , D3-Sol1-1b ) ;
9230: LD_VAR 0 1
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_STRING D3-Sol1-1b
9241: PPUSH
9242: CALL_OW 88
// say ( tmp [ 1 ] , D3-Sol1-1c ) ;
9246: LD_VAR 0 1
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: LD_STRING D3-Sol1-1c
9257: PPUSH
9258: CALL_OW 88
// say ( john , D3-JMM-2 ) ;
9262: LD_EXP 17
9266: PPUSH
9267: LD_STRING D3-JMM-2
9269: PPUSH
9270: CALL_OW 88
// end ; end ; end ; end ;
9274: GO 9277
9276: POP
// wait ( 0 0$1 ) ;
9277: LD_INT 35
9279: PPUSH
9280: CALL_OW 67
// if joan > 0 then
9284: LD_EXP 35
9288: PUSH
9289: LD_INT 0
9291: GREATER
9292: IFFALSE 9783
// begin if islive ( joan ) then
9294: LD_EXP 35
9298: PPUSH
9299: CALL_OW 300
9303: IFFALSE 9331
// begin say ( joan , D3a-Joan-1 ) ;
9305: LD_EXP 35
9309: PPUSH
9310: LD_STRING D3a-Joan-1
9312: PPUSH
9313: CALL_OW 88
// say ( john , D3a-JMM-1 ) ;
9317: LD_EXP 17
9321: PPUSH
9322: LD_STRING D3a-JMM-1
9324: PPUSH
9325: CALL_OW 88
// end else
9329: GO 9783
// if islive ( lucy ) then
9331: LD_EXP 31
9335: PPUSH
9336: CALL_OW 300
9340: IFFALSE 9403
// begin say ( john , D3b-JMM-1 ) ;
9342: LD_EXP 17
9346: PPUSH
9347: LD_STRING D3b-JMM-1
9349: PPUSH
9350: CALL_OW 88
// say ( lucy , D3b-Don-1 ) ;
9354: LD_EXP 31
9358: PPUSH
9359: LD_STRING D3b-Don-1
9361: PPUSH
9362: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9366: LD_EXP 17
9370: PPUSH
9371: LD_STRING D3b-JMM-2
9373: PPUSH
9374: CALL_OW 88
// if isok ( lisa ) then
9378: LD_EXP 18
9382: PPUSH
9383: CALL_OW 302
9387: IFFALSE 9401
// say ( lisa , D3b-Lisa-2 ) ;
9389: LD_EXP 18
9393: PPUSH
9394: LD_STRING D3b-Lisa-2
9396: PPUSH
9397: CALL_OW 88
// end else
9401: GO 9783
// if islive ( brown ) then
9403: LD_EXP 32
9407: PPUSH
9408: CALL_OW 300
9412: IFFALSE 9475
// begin say ( john , D3b-JMM-1 ) ;
9414: LD_EXP 17
9418: PPUSH
9419: LD_STRING D3b-JMM-1
9421: PPUSH
9422: CALL_OW 88
// say ( brown , D3b-Brown-1 ) ;
9426: LD_EXP 32
9430: PPUSH
9431: LD_STRING D3b-Brown-1
9433: PPUSH
9434: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9438: LD_EXP 17
9442: PPUSH
9443: LD_STRING D3b-JMM-2
9445: PPUSH
9446: CALL_OW 88
// if isok ( lisa ) then
9450: LD_EXP 18
9454: PPUSH
9455: CALL_OW 302
9459: IFFALSE 9473
// say ( lisa , D3b-Lisa-2 ) ;
9461: LD_EXP 18
9465: PPUSH
9466: LD_STRING D3b-Lisa-2
9468: PPUSH
9469: CALL_OW 88
// end else
9473: GO 9783
// if islive ( vanh ) then
9475: LD_EXP 33
9479: PPUSH
9480: CALL_OW 300
9484: IFFALSE 9547
// begin say ( john , D3b-JMM-1 ) ;
9486: LD_EXP 17
9490: PPUSH
9491: LD_STRING D3b-JMM-1
9493: PPUSH
9494: CALL_OW 88
// say ( vanh , D3b-VanH-1 ) ;
9498: LD_EXP 33
9502: PPUSH
9503: LD_STRING D3b-VanH-1
9505: PPUSH
9506: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9510: LD_EXP 17
9514: PPUSH
9515: LD_STRING D3b-JMM-2
9517: PPUSH
9518: CALL_OW 88
// if isok ( lisa ) then
9522: LD_EXP 18
9526: PPUSH
9527: CALL_OW 302
9531: IFFALSE 9545
// say ( lisa , D3b-Lisa-2 ) ;
9533: LD_EXP 18
9537: PPUSH
9538: LD_STRING D3b-Lisa-2
9540: PPUSH
9541: CALL_OW 88
// end else
9545: GO 9783
// begin tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9547: LD_ADDR_VAR 0 1
9551: PUSH
9552: LD_INT 8
9554: PPUSH
9555: LD_INT 22
9557: PUSH
9558: LD_EXP 2
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 52
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: LD_INT 26
9585: PUSH
9586: LD_INT 1
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 3
9595: PUSH
9596: LD_INT 23
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 70
9618: PUSH
9619: LD_EXP 17
9623: DIFF
9624: ST_TO_ADDR
// if tmp = 0 then
9625: LD_VAR 0 1
9629: PUSH
9630: LD_INT 0
9632: EQUAL
9633: IFFALSE 9710
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_EXP 2
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 21
9654: PUSH
9655: LD_INT 1
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: LD_INT 52
9664: PUSH
9665: EMPTY
9666: LIST
9667: PUSH
9668: LD_INT 26
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 3
9680: PUSH
9681: LD_INT 23
9683: PUSH
9684: LD_INT 0
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 69
9703: PUSH
9704: LD_EXP 17
9708: DIFF
9709: ST_TO_ADDR
// if tmp > 0 then
9710: LD_VAR 0 1
9714: PUSH
9715: LD_INT 0
9717: GREATER
9718: IFFALSE 9783
// begin say ( john , D3b-JMM-1 ) ;
9720: LD_EXP 17
9724: PPUSH
9725: LD_STRING D3b-JMM-1
9727: PPUSH
9728: CALL_OW 88
// say ( tmp [ 1 ] , D3b-Sol1-1 ) ;
9732: LD_VAR 0 1
9736: PUSH
9737: LD_INT 1
9739: ARRAY
9740: PPUSH
9741: LD_STRING D3b-Sol1-1
9743: PPUSH
9744: CALL_OW 88
// say ( john , D3b-JMM-2 ) ;
9748: LD_EXP 17
9752: PPUSH
9753: LD_STRING D3b-JMM-2
9755: PPUSH
9756: CALL_OW 88
// if isok ( lisa ) then
9760: LD_EXP 18
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// say ( lisa , D3b-Lisa-2 ) ;
9771: LD_EXP 18
9775: PPUSH
9776: LD_STRING D3b-Lisa-2
9778: PPUSH
9779: CALL_OW 88
// end ; end ; end ; if dialcb_delayed then
9783: LD_LOC 26
9787: IFFALSE 10083
// begin tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9789: LD_ADDR_VAR 0 1
9793: PUSH
9794: LD_INT 8
9796: PPUSH
9797: LD_INT 22
9799: PUSH
9800: LD_EXP 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: LD_INT 21
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 52
9821: PUSH
9822: EMPTY
9823: LIST
9824: PUSH
9825: LD_INT 26
9827: PUSH
9828: LD_INT 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 3
9837: PUSH
9838: LD_INT 23
9840: PUSH
9841: LD_INT 0
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 70
9860: PUSH
9861: LD_EXP 17
9865: DIFF
9866: ST_TO_ADDR
// if tmp > 0 then
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 0
9874: GREATER
9875: IFFALSE 9935
// begin say ( tmp [ 1 ] , DCa-Sol1-1 ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_INT 1
9884: ARRAY
9885: PPUSH
9886: LD_STRING DCa-Sol1-1
9888: PPUSH
9889: CALL_OW 88
// say ( john , DCb-JMM-1 ) ;
9893: LD_EXP 17
9897: PPUSH
9898: LD_STRING DCb-JMM-1
9900: PPUSH
9901: CALL_OW 88
// say ( tmp [ 1 ] , DCb-Sol1-1 ) ;
9905: LD_VAR 0 1
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: LD_STRING DCb-Sol1-1
9916: PPUSH
9917: CALL_OW 88
// say ( john , DCb-JMM-2 ) ;
9921: LD_EXP 17
9925: PPUSH
9926: LD_STRING DCb-JMM-2
9928: PPUSH
9929: CALL_OW 88
// end else
9933: GO 10076
// begin tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_placed ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
9935: LD_ADDR_VAR 0 1
9939: PUSH
9940: LD_INT 22
9942: PUSH
9943: LD_EXP 2
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 21
9954: PUSH
9955: LD_INT 1
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 52
9964: PUSH
9965: EMPTY
9966: LIST
9967: PUSH
9968: LD_INT 26
9970: PUSH
9971: LD_INT 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 23
9983: PUSH
9984: LD_INT 0
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: PPUSH
9999: CALL_OW 69
10003: PUSH
10004: LD_EXP 17
10008: DIFF
10009: ST_TO_ADDR
// if tmp > 0 then
10010: LD_VAR 0 1
10014: PUSH
10015: LD_INT 0
10017: GREATER
10018: IFFALSE 10076
// begin say ( tmp [ 1 ] , DCa-Sol1-1 ) ;
10020: LD_VAR 0 1
10024: PUSH
10025: LD_INT 1
10027: ARRAY
10028: PPUSH
10029: LD_STRING DCa-Sol1-1
10031: PPUSH
10032: CALL_OW 88
// say ( john , DCb-JMM-1 ) ;
10036: LD_EXP 17
10040: PPUSH
10041: LD_STRING DCb-JMM-1
10043: PPUSH
10044: CALL_OW 88
// say ( tmp [ 1 ] , DCb-Sol1-1 ) ;
10048: LD_VAR 0 1
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_STRING DCb-Sol1-1
10059: PPUSH
10060: CALL_OW 88
// say ( john , DCb-JMM-2 ) ;
10064: LD_EXP 17
10068: PPUSH
10069: LD_STRING DCb-JMM-2
10071: PPUSH
10072: CALL_OW 88
// end ; end ; hint ( ComputerCapturing ) ;
10076: LD_STRING ComputerCapturing
10078: PPUSH
10079: CALL_OW 339
// end ; dialogueoff ;
10083: CALL_OW 7
// end else
10087: GO 10090
// enable ;
10089: ENABLE
// end ;
10090: PPOPN 2
10092: END
// every 0 0$1 + 16 16$0 do
10093: GO 10095
10095: DISABLE
// begin dialogueon ;
10096: CALL_OW 6
// sayradio ( powel , D4-Pow-1 ) ;
10100: LD_EXP 16
10104: PPUSH
10105: LD_STRING D4-Pow-1
10107: PPUSH
10108: CALL_OW 94
// say ( john , D4-JMM-1 ) ;
10112: LD_EXP 17
10116: PPUSH
10117: LD_STRING D4-JMM-1
10119: PPUSH
10120: CALL_OW 88
// sayradio ( powel , D4-Pow-2 ) ;
10124: LD_EXP 16
10128: PPUSH
10129: LD_STRING D4-Pow-2
10131: PPUSH
10132: CALL_OW 94
// say ( john , D4-JMM-2 ) ;
10136: LD_EXP 17
10140: PPUSH
10141: LD_STRING D4-JMM-2
10143: PPUSH
10144: CALL_OW 88
// sayradio ( powel , D4-Pow-3 ) ;
10148: LD_EXP 16
10152: PPUSH
10153: LD_STRING D4-Pow-3
10155: PPUSH
10156: CALL_OW 94
// dialogueoff ;
10160: CALL_OW 7
// end ;
10164: END
// every 0 0$1 + 17 17$0 do
10165: GO 10167
10167: DISABLE
// begin dialogueon ;
10168: CALL_OW 6
// sayradio ( powel , D4a-Pow-1 ) ;
10172: LD_EXP 16
10176: PPUSH
10177: LD_STRING D4a-Pow-1
10179: PPUSH
10180: CALL_OW 94
// dialogueoff ;
10184: CALL_OW 7
// end ;
10188: END
// var amhsoldb , amhsoldd , amhmecha , amhmechb , amhmechc , amva , amvb , amvc , amvd ; var reinf_us ; every 0 0$1 + 25 25$0 do
10189: GO 10191
10191: DISABLE
// begin changesidefog ( amer_reinf , amer ) ;
10192: LD_EXP 3
10196: PPUSH
10197: LD_EXP 2
10201: PPUSH
10202: CALL_OW 343
// uc_nation = nation_american ;
10206: LD_ADDR_OWVAR 21
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// uc_side = amer_reinf ;
10214: LD_ADDR_OWVAR 20
10218: PUSH
10219: LD_EXP 3
10223: ST_TO_ADDR
// hc_class = class_soldier ;
10224: LD_ADDR_OWVAR 28
10228: PUSH
10229: LD_INT 1
10231: ST_TO_ADDR
// case difficulty of 3 :
10232: LD_OWVAR 67
10236: PUSH
10237: LD_INT 3
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10264
10245: POP
// begin vc_chassis = us_medium_wheeled ;
10246: LD_ADDR_OWVAR 37
10250: PUSH
10251: LD_INT 2
10253: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
10254: LD_ADDR_OWVAR 40
10258: PUSH
10259: LD_INT 2
10261: ST_TO_ADDR
// end ; 2 :
10262: GO 10319
10264: LD_INT 2
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10291
10272: POP
// begin vc_chassis = us_medium_tracked ;
10273: LD_ADDR_OWVAR 37
10277: PUSH
10278: LD_INT 3
10280: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10281: LD_ADDR_OWVAR 40
10285: PUSH
10286: LD_INT 4
10288: ST_TO_ADDR
// end ; 1 :
10289: GO 10319
10291: LD_INT 1
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10318
10299: POP
// begin vc_chassis = us_heavy_tracked ;
10300: LD_ADDR_OWVAR 37
10304: PUSH
10305: LD_INT 4
10307: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10308: LD_ADDR_OWVAR 40
10312: PUSH
10313: LD_INT 4
10315: ST_TO_ADDR
// end ; end ;
10316: GO 10319
10318: POP
// vc_control = control_manual ;
10319: LD_ADDR_OWVAR 38
10323: PUSH
10324: LD_INT 1
10326: ST_TO_ADDR
// vc_engine = engine_combustion ;
10327: LD_ADDR_OWVAR 39
10331: PUSH
10332: LD_INT 1
10334: ST_TO_ADDR
// amvd = createvehicle ;
10335: LD_ADDR_LOC 70
10339: PUSH
10340: CALL_OW 45
10344: ST_TO_ADDR
// setdir ( amvd , 2 ) ;
10345: LD_LOC 70
10349: PPUSH
10350: LD_INT 2
10352: PPUSH
10353: CALL_OW 233
// placeunitxyr ( amvd , 15 , 2 , 7 , false ) ;
10357: LD_LOC 70
10361: PPUSH
10362: LD_INT 15
10364: PPUSH
10365: LD_INT 2
10367: PPUSH
10368: LD_INT 7
10370: PPUSH
10371: LD_INT 0
10373: PPUSH
10374: CALL_OW 50
// placehumaninunit ( amhsolda , amvd ) ;
10378: LD_EXP 26
10382: PPUSH
10383: LD_LOC 70
10387: PPUSH
10388: CALL_OW 52
// preparesoldier ( sex_male , 4 ) ;
10392: LD_INT 1
10394: PPUSH
10395: LD_INT 4
10397: PPUSH
10398: CALL_OW 381
// amhsoldb = createhuman ;
10402: LD_ADDR_LOC 62
10406: PUSH
10407: CALL_OW 44
10411: ST_TO_ADDR
// placeunitxyr ( amhsoldb , 15 , 2 , 7 , false ) ;
10412: LD_LOC 62
10416: PPUSH
10417: LD_INT 15
10419: PPUSH
10420: LD_INT 2
10422: PPUSH
10423: LD_INT 7
10425: PPUSH
10426: LD_INT 0
10428: PPUSH
10429: CALL_OW 50
// case difficulty of 1 :
10433: LD_OWVAR 67
10437: PUSH
10438: LD_INT 1
10440: DOUBLE
10441: EQUAL
10442: IFTRUE 10446
10444: GO 10459
10446: POP
// preparemechanic ( sex_female , 5 ) ; 2 :
10447: LD_INT 2
10449: PPUSH
10450: LD_INT 5
10452: PPUSH
10453: CALL_OW 383
10457: GO 10502
10459: LD_INT 2
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10480
10467: POP
// preparemechanic ( sex_female , 4 ) ; 3 :
10468: LD_INT 2
10470: PPUSH
10471: LD_INT 4
10473: PPUSH
10474: CALL_OW 383
10478: GO 10502
10480: LD_INT 3
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 10501
10488: POP
// preparemechanic ( sex_female , 3 ) ; end ;
10489: LD_INT 2
10491: PPUSH
10492: LD_INT 3
10494: PPUSH
10495: CALL_OW 383
10499: GO 10502
10501: POP
// amhmecha = createhuman ;
10502: LD_ADDR_LOC 64
10506: PUSH
10507: CALL_OW 44
10511: ST_TO_ADDR
// case difficulty of 1 :
10512: LD_OWVAR 67
10516: PUSH
10517: LD_INT 1
10519: DOUBLE
10520: EQUAL
10521: IFTRUE 10525
10523: GO 10538
10525: POP
// preparemechanic ( sex_female , 4 ) ; 2 :
10526: LD_INT 2
10528: PPUSH
10529: LD_INT 4
10531: PPUSH
10532: CALL_OW 383
10536: GO 10581
10538: LD_INT 2
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10559
10546: POP
// preparemechanic ( sex_female , 4 ) ; 3 :
10547: LD_INT 2
10549: PPUSH
10550: LD_INT 4
10552: PPUSH
10553: CALL_OW 383
10557: GO 10581
10559: LD_INT 3
10561: DOUBLE
10562: EQUAL
10563: IFTRUE 10567
10565: GO 10580
10567: POP
// preparemechanic ( sex_female , 3 ) ; end ;
10568: LD_INT 2
10570: PPUSH
10571: LD_INT 3
10573: PPUSH
10574: CALL_OW 383
10578: GO 10581
10580: POP
// amhmechc = createhuman ;
10581: LD_ADDR_LOC 66
10585: PUSH
10586: CALL_OW 44
10590: ST_TO_ADDR
// preparemechanic ( sex_male , 5 ) ;
10591: LD_INT 1
10593: PPUSH
10594: LD_INT 5
10596: PPUSH
10597: CALL_OW 383
// amhmechb = createhuman ;
10601: LD_ADDR_LOC 65
10605: PUSH
10606: CALL_OW 44
10610: ST_TO_ADDR
// preparesoldier ( sex_male , 5 ) ;
10611: LD_INT 1
10613: PPUSH
10614: LD_INT 5
10616: PPUSH
10617: CALL_OW 381
// amhsoldd = createhuman ;
10621: LD_ADDR_LOC 63
10625: PUSH
10626: CALL_OW 44
10630: ST_TO_ADDR
// placeunitxyr ( amhsoldd , 15 , 2 , 7 , false ) ;
10631: LD_LOC 63
10635: PPUSH
10636: LD_INT 15
10638: PPUSH
10639: LD_INT 2
10641: PPUSH
10642: LD_INT 7
10644: PPUSH
10645: LD_INT 0
10647: PPUSH
10648: CALL_OW 50
// case difficulty of 3 :
10652: LD_OWVAR 67
10656: PUSH
10657: LD_INT 3
10659: DOUBLE
10660: EQUAL
10661: IFTRUE 10665
10663: GO 10684
10665: POP
// begin vc_chassis = us_medium_wheeled ;
10666: LD_ADDR_OWVAR 37
10670: PUSH
10671: LD_INT 2
10673: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
10674: LD_ADDR_OWVAR 40
10678: PUSH
10679: LD_INT 2
10681: ST_TO_ADDR
// end ; 2 :
10682: GO 10739
10684: LD_INT 2
10686: DOUBLE
10687: EQUAL
10688: IFTRUE 10692
10690: GO 10711
10692: POP
// begin vc_chassis = us_medium_tracked ;
10693: LD_ADDR_OWVAR 37
10697: PUSH
10698: LD_INT 3
10700: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10701: LD_ADDR_OWVAR 40
10705: PUSH
10706: LD_INT 4
10708: ST_TO_ADDR
// end ; 1 :
10709: GO 10739
10711: LD_INT 1
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10738
10719: POP
// begin vc_chassis = us_heavy_tracked ;
10720: LD_ADDR_OWVAR 37
10724: PUSH
10725: LD_INT 4
10727: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10728: LD_ADDR_OWVAR 40
10732: PUSH
10733: LD_INT 4
10735: ST_TO_ADDR
// end ; end ;
10736: GO 10739
10738: POP
// vc_control = control_manual ;
10739: LD_ADDR_OWVAR 38
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// vc_engine = engine_combustion ;
10747: LD_ADDR_OWVAR 39
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// amva = createvehicle ;
10755: LD_ADDR_LOC 67
10759: PUSH
10760: CALL_OW 45
10764: ST_TO_ADDR
// setdir ( amva , 2 ) ;
10765: LD_LOC 67
10769: PPUSH
10770: LD_INT 2
10772: PPUSH
10773: CALL_OW 233
// placeunitxyr ( amva , 15 , 2 , 7 , false ) ;
10777: LD_LOC 67
10781: PPUSH
10782: LD_INT 15
10784: PPUSH
10785: LD_INT 2
10787: PPUSH
10788: LD_INT 7
10790: PPUSH
10791: LD_INT 0
10793: PPUSH
10794: CALL_OW 50
// placehumaninunit ( amhmecha , amva ) ;
10798: LD_LOC 64
10802: PPUSH
10803: LD_LOC 67
10807: PPUSH
10808: CALL_OW 52
// case difficulty of 3 :
10812: LD_OWVAR 67
10816: PUSH
10817: LD_INT 3
10819: DOUBLE
10820: EQUAL
10821: IFTRUE 10825
10823: GO 10844
10825: POP
// begin vc_chassis = us_medium_wheeled ;
10826: LD_ADDR_OWVAR 37
10830: PUSH
10831: LD_INT 2
10833: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10834: LD_ADDR_OWVAR 40
10838: PUSH
10839: LD_INT 3
10841: ST_TO_ADDR
// end ; 2 :
10842: GO 10899
10844: LD_INT 2
10846: DOUBLE
10847: EQUAL
10848: IFTRUE 10852
10850: GO 10871
10852: POP
// begin vc_chassis = us_medium_wheeled ;
10853: LD_ADDR_OWVAR 37
10857: PUSH
10858: LD_INT 2
10860: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10861: LD_ADDR_OWVAR 40
10865: PUSH
10866: LD_INT 3
10868: ST_TO_ADDR
// end ; 1 :
10869: GO 10899
10871: LD_INT 1
10873: DOUBLE
10874: EQUAL
10875: IFTRUE 10879
10877: GO 10898
10879: POP
// begin vc_chassis = us_medium_tracked ;
10880: LD_ADDR_OWVAR 37
10884: PUSH
10885: LD_INT 3
10887: ST_TO_ADDR
// vc_weapon = us_double_gun ;
10888: LD_ADDR_OWVAR 40
10892: PUSH
10893: LD_INT 5
10895: ST_TO_ADDR
// end ; end ;
10896: GO 10899
10898: POP
// vc_control = control_manual ;
10899: LD_ADDR_OWVAR 38
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// vc_engine = engine_combustion ;
10907: LD_ADDR_OWVAR 39
10911: PUSH
10912: LD_INT 1
10914: ST_TO_ADDR
// amvb = createvehicle ;
10915: LD_ADDR_LOC 68
10919: PUSH
10920: CALL_OW 45
10924: ST_TO_ADDR
// setdir ( amvb , 2 ) ;
10925: LD_LOC 68
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 233
// placeunitxyr ( amvb , 15 , 2 , 7 , false ) ;
10937: LD_LOC 68
10941: PPUSH
10942: LD_INT 15
10944: PPUSH
10945: LD_INT 2
10947: PPUSH
10948: LD_INT 7
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 50
// placehumaninunit ( amhmechb , amvb ) ;
10958: LD_LOC 65
10962: PPUSH
10963: LD_LOC 68
10967: PPUSH
10968: CALL_OW 52
// case difficulty of 3 :
10972: LD_OWVAR 67
10976: PUSH
10977: LD_INT 3
10979: DOUBLE
10980: EQUAL
10981: IFTRUE 10985
10983: GO 11004
10985: POP
// begin vc_chassis = us_medium_wheeled ;
10986: LD_ADDR_OWVAR 37
10990: PUSH
10991: LD_INT 2
10993: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
10994: LD_ADDR_OWVAR 40
10998: PUSH
10999: LD_INT 4
11001: ST_TO_ADDR
// end ; 2 :
11002: GO 11059
11004: LD_INT 2
11006: DOUBLE
11007: EQUAL
11008: IFTRUE 11012
11010: GO 11031
11012: POP
// begin vc_chassis = us_heavy_tracked ;
11013: LD_ADDR_OWVAR 37
11017: PUSH
11018: LD_INT 4
11020: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
11021: LD_ADDR_OWVAR 40
11025: PUSH
11026: LD_INT 4
11028: ST_TO_ADDR
// end ; 1 :
11029: GO 11059
11031: LD_INT 1
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 11058
11039: POP
// begin vc_chassis = us_heavy_tracked ;
11040: LD_ADDR_OWVAR 37
11044: PUSH
11045: LD_INT 4
11047: ST_TO_ADDR
// vc_weapon = us_double_gun ;
11048: LD_ADDR_OWVAR 40
11052: PUSH
11053: LD_INT 5
11055: ST_TO_ADDR
// end ; end ;
11056: GO 11059
11058: POP
// vc_control = control_manual ;
11059: LD_ADDR_OWVAR 38
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// vc_engine = engine_combustion ;
11067: LD_ADDR_OWVAR 39
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// amvc = createvehicle ;
11075: LD_ADDR_LOC 69
11079: PUSH
11080: CALL_OW 45
11084: ST_TO_ADDR
// setdir ( amvc , 2 ) ;
11085: LD_LOC 69
11089: PPUSH
11090: LD_INT 2
11092: PPUSH
11093: CALL_OW 233
// placeunitxyr ( amvc , 15 , 2 , 7 , false ) ;
11097: LD_LOC 69
11101: PPUSH
11102: LD_INT 15
11104: PPUSH
11105: LD_INT 2
11107: PPUSH
11108: LD_INT 7
11110: PPUSH
11111: LD_INT 0
11113: PPUSH
11114: CALL_OW 50
// placehumaninunit ( amhmechc , amvc ) ;
11118: LD_LOC 66
11122: PPUSH
11123: LD_LOC 69
11127: PPUSH
11128: CALL_OW 52
// reinf_us = [ amhsoldb , amhsoldd , amva , amvb , amvc , amvd ] ;
11132: LD_ADDR_LOC 71
11136: PUSH
11137: LD_LOC 62
11141: PUSH
11142: LD_LOC 63
11146: PUSH
11147: LD_LOC 67
11151: PUSH
11152: LD_LOC 68
11156: PUSH
11157: LD_LOC 69
11161: PUSH
11162: LD_LOC 70
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: ST_TO_ADDR
// sikishere = true ;
11175: LD_ADDR_LOC 27
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// comagressivemove ( reinf_us , 36 , 30 ) ;
11183: LD_LOC 71
11187: PPUSH
11188: LD_INT 36
11190: PPUSH
11191: LD_INT 30
11193: PPUSH
11194: CALL_OW 114
// end ;
11198: END
// var time2go ; every 0 0$1 + 25 25$20 trigger not ( unitfilter ( reinf_us , [ [ f_ok ] ] ) diff filterunitsinarea ( wayarea0 , [ [ f_side , amer_reinf ] , [ f_ok ] ] ) ) do var tmp ;
11199: LD_LOC 71
11203: PPUSH
11204: LD_INT 50
11206: PUSH
11207: EMPTY
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: PPUSH
11213: CALL_OW 72
11217: PUSH
11218: LD_INT 2
11220: PPUSH
11221: LD_INT 22
11223: PUSH
11224: LD_EXP 3
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 50
11235: PUSH
11236: EMPTY
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 70
11247: DIFF
11248: NOT
11249: IFFALSE 11521
11251: GO 11253
11253: DISABLE
11254: LD_INT 0
11256: PPUSH
// begin commovexy ( reinf_us , 53 , 24 ) ;
11257: LD_LOC 71
11261: PPUSH
11262: LD_INT 53
11264: PPUSH
11265: LD_INT 24
11267: PPUSH
11268: CALL_OW 111
// wait ( 0 0$11 ) ;
11272: LD_INT 385
11274: PPUSH
11275: CALL_OW 67
// tmp = tick ;
11279: LD_ADDR_VAR 0 1
11283: PUSH
11284: LD_OWVAR 1
11288: ST_TO_ADDR
// dialogueon ;
11289: CALL_OW 6
// say ( amhsolda , D5-Sik-1 ) ;
11293: LD_EXP 26
11297: PPUSH
11298: LD_STRING D5-Sik-1
11300: PPUSH
11301: CALL_OW 88
// if chciplo <= 3 then
11305: LD_LOC 23
11309: PUSH
11310: LD_INT 3
11312: LESSEQUAL
11313: IFFALSE 11329
// say ( john , D5-JMM-1a ) else
11315: LD_EXP 17
11319: PPUSH
11320: LD_STRING D5-JMM-1a
11322: PPUSH
11323: CALL_OW 88
11327: GO 11341
// say ( john , D5-JMM-1b ) ;
11329: LD_EXP 17
11333: PPUSH
11334: LD_STRING D5-JMM-1b
11336: PPUSH
11337: CALL_OW 88
// say ( amhsolda , D5-Sik-2 ) ;
11341: LD_EXP 26
11345: PPUSH
11346: LD_STRING D5-Sik-2
11348: PPUSH
11349: CALL_OW 88
// case query ( QSikorski ) of 1 :
11353: LD_STRING QSikorski
11355: PPUSH
11356: CALL_OW 97
11360: PUSH
11361: LD_INT 1
11363: DOUBLE
11364: EQUAL
11365: IFTRUE 11369
11367: GO 11398
11369: POP
// begin time2go = tmp + 1 1$0 ;
11370: LD_ADDR_LOC 72
11374: PUSH
11375: LD_VAR 0 1
11379: PUSH
11380: LD_INT 2100
11382: PLUS
11383: ST_TO_ADDR
// say ( amhsolda , D5a-Sik-1 ) ;
11384: LD_EXP 26
11388: PPUSH
11389: LD_STRING D5a-Sik-1
11391: PPUSH
11392: CALL_OW 88
// end ; 2 :
11396: GO 11497
11398: LD_INT 2
11400: DOUBLE
11401: EQUAL
11402: IFTRUE 11406
11404: GO 11435
11406: POP
// begin time2go = tmp + 5 5$0 ;
11407: LD_ADDR_LOC 72
11411: PUSH
11412: LD_VAR 0 1
11416: PUSH
11417: LD_INT 10500
11419: PLUS
11420: ST_TO_ADDR
// say ( amhsolda , D5b-Sik-1 ) ;
11421: LD_EXP 26
11425: PPUSH
11426: LD_STRING D5b-Sik-1
11428: PPUSH
11429: CALL_OW 88
// end ; 3 :
11433: GO 11497
11435: LD_INT 3
11437: DOUBLE
11438: EQUAL
11439: IFTRUE 11443
11441: GO 11496
11443: POP
// begin time2go = tmp + 5 5$0 ;
11444: LD_ADDR_LOC 72
11448: PUSH
11449: LD_VAR 0 1
11453: PUSH
11454: LD_INT 10500
11456: PLUS
11457: ST_TO_ADDR
// say ( amhsolda , D5c-Sik-1 ) ;
11458: LD_EXP 26
11462: PPUSH
11463: LD_STRING D5c-Sik-1
11465: PPUSH
11466: CALL_OW 88
// say ( john , D5c-JMM-1 ) ;
11470: LD_EXP 17
11474: PPUSH
11475: LD_STRING D5c-JMM-1
11477: PPUSH
11478: CALL_OW 88
// say ( amhsolda , D5c-Sik-2 ) ;
11482: LD_EXP 26
11486: PPUSH
11487: LD_STRING D5c-Sik-2
11489: PPUSH
11490: CALL_OW 88
// end ; end ;
11494: GO 11497
11496: POP
// dialogueoff ;
11497: CALL_OW 7
// display_strings = [ #Am08-1 , time2go ] ;
11501: LD_ADDR_OWVAR 47
11505: PUSH
11506: LD_STRING #Am08-1
11508: PUSH
11509: LD_LOC 72
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: ST_TO_ADDR
// enable ( 37 ) ;
11518: LD_INT 37
11520: ENABLE_MARKED
// end ;
11521: PPOPN 1
11523: END
// every 0 0$1 marked 37 do var tmp ;
11524: GO 11526
11526: DISABLE
11527: LD_INT 0
11529: PPUSH
// begin tmp = time2go - tick ;
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_LOC 72
11539: PUSH
11540: LD_OWVAR 1
11544: MINUS
11545: ST_TO_ADDR
// if tmp < 0 then
11546: LD_VAR 0 1
11550: PUSH
11551: LD_INT 0
11553: LESS
11554: IFFALSE 11564
// tmp = 0 ;
11556: LD_ADDR_VAR 0 1
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// display_strings = [ #Am08-1 , tmp ] ;
11564: LD_ADDR_OWVAR 47
11568: PUSH
11569: LD_STRING #Am08-1
11571: PUSH
11572: LD_VAR 0 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: ST_TO_ADDR
// if tmp > 0 then
11581: LD_VAR 0 1
11585: PUSH
11586: LD_INT 0
11588: GREATER
11589: IFFALSE 11594
// enable else
11591: ENABLE
11592: GO 11601
// display_strings = [ ] ;
11594: LD_ADDR_OWVAR 47
11598: PUSH
11599: EMPTY
11600: ST_TO_ADDR
// end ;
11601: PPOPN 1
11603: END
// var combat_started ; every 0 0$1 + 26 26$20 trigger tick >= time2go do var ntmp ;
11604: LD_OWVAR 1
11608: PUSH
11609: LD_LOC 72
11613: GREATEREQUAL
11614: IFFALSE 11721
11616: GO 11618
11618: DISABLE
11619: LD_INT 0
11621: PPUSH
// begin manage_prebytek ( 1 ) ;
11622: LD_INT 1
11624: PPUSH
11625: CALL 3852 0 1
// commovetoarea ( prebytek , ar_exit_ ) ;
11629: LD_EXP 11
11633: PPUSH
11634: LD_INT 17
11636: PPUSH
11637: CALL_OW 113
// enable ( 27 ) ;
11641: LD_INT 27
11643: ENABLE_MARKED
// dialogueon ;
11644: CALL_OW 6
// say ( amhsolda , D6-Sik-1 ) ;
11648: LD_EXP 26
11652: PPUSH
11653: LD_STRING D6-Sik-1
11655: PPUSH
11656: CALL_OW 88
// changemissionobjectives ( M2 ) ;
11660: LD_STRING M2
11662: PPUSH
11663: CALL_OW 337
// dialogueoff ;
11667: CALL_OW 7
// combat_started = tick + 0 0$13 ;
11671: LD_ADDR_LOC 73
11675: PUSH
11676: LD_OWVAR 1
11680: PUSH
11681: LD_INT 455
11683: PLUS
11684: ST_TO_ADDR
// comagressivemove ( reinf_us , 63 , 63 ) ;
11685: LD_LOC 71
11689: PPUSH
11690: LD_INT 63
11692: PPUSH
11693: LD_INT 63
11695: PPUSH
11696: CALL_OW 114
// wait ( 0 0$11 ) ;
11700: LD_INT 385
11702: PPUSH
11703: CALL_OW 67
// comattackunit ( reinf_us , rubbunk0 ) ;
11707: LD_LOC 71
11711: PPUSH
11712: LD_LOC 7
11716: PPUSH
11717: CALL_OW 115
// end ;
11721: PPOPN 1
11723: END
// every 0 0$1 marked 27 do var tmp , tmp_ ;
11724: GO 11726
11726: DISABLE
11727: LD_INT 0
11729: PPUSH
11730: PPUSH
// begin tmp = filterunitsinarea ( ar_exit_ , [ [ f_side , rus ] ] ) ;
11731: LD_ADDR_VAR 0 1
11735: PUSH
11736: LD_INT 17
11738: PPUSH
11739: LD_INT 22
11741: PUSH
11742: LD_EXP 1
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: PPUSH
11754: CALL_OW 70
11758: ST_TO_ADDR
// for tmp_ in tmp do
11759: LD_ADDR_VAR 0 2
11763: PUSH
11764: LD_VAR 0 1
11768: PUSH
11769: FOR_IN
11770: IFFALSE 11783
// destroyunit ( tmp_ ) ;
11772: LD_VAR 0 2
11776: PPUSH
11777: CALL_OW 65
11781: GO 11769
11783: POP
11784: POP
// prebytek = prebytek diff tmp ;
11785: LD_ADDR_EXP 11
11789: PUSH
11790: LD_EXP 11
11794: PUSH
11795: LD_VAR 0 1
11799: DIFF
11800: ST_TO_ADDR
// if prebytek then
11801: LD_EXP 11
11805: IFFALSE 11820
// begin enable ;
11807: ENABLE
// commovetoarea ( prebytek , ar_exit_ ) ;
11808: LD_EXP 11
11812: PPUSH
11813: LD_INT 17
11815: PPUSH
11816: CALL_OW 113
// end ; end ;
11820: PPOPN 2
11822: END
// function utoci ( un ) ; var tmp , tmp_ , tmp__ ; begin
11823: LD_INT 0
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
// tmp = 0 ;
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_INT 0
11836: ST_TO_ADDR
// if isinunit ( un ) then
11837: LD_VAR 0 1
11841: PPUSH
11842: CALL_OW 310
11846: IFFALSE 11900
// if gettype ( isinunit ( un ) ) = unit_vehicle then
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 310
11857: PPUSH
11858: CALL_OW 247
11862: PUSH
11863: LD_INT 2
11865: EQUAL
11866: IFFALSE 11890
// tmp = wantstoattack ( isinunit ( un ) ) else
11868: LD_ADDR_VAR 0 3
11872: PUSH
11873: LD_VAR 0 1
11877: PPUSH
11878: CALL_OW 310
11882: PPUSH
11883: CALL_OW 319
11887: ST_TO_ADDR
11888: GO 11898
// tmp = 0 else
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
11898: GO 11915
// tmp = wantstoattack ( un ) ;
11900: LD_ADDR_VAR 0 3
11904: PUSH
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 319
11914: ST_TO_ADDR
// if tmp then
11915: LD_VAR 0 3
11919: IFFALSE 11931
// result = 1 else
11921: LD_ADDR_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ST_TO_ADDR
11929: GO 11939
// result = 0 ;
11931: LD_ADDR_VAR 0 2
11935: PUSH
11936: LD_INT 0
11938: ST_TO_ADDR
// end ;
11939: LD_VAR 0 2
11943: RET
// var jmm_zbabelec ; every 0 0$1 + 26 26$21 trigger tick >= time2go and ( tick >= combat_started ) and filterunitsinarea ( rubaserng , [ [ f_side , amer_reinf ] ] ) do var tmp ;
11944: LD_OWVAR 1
11948: PUSH
11949: LD_LOC 72
11953: GREATEREQUAL
11954: PUSH
11955: LD_OWVAR 1
11959: PUSH
11960: LD_LOC 73
11964: GREATEREQUAL
11965: AND
11966: PUSH
11967: LD_INT 7
11969: PPUSH
11970: LD_INT 22
11972: PUSH
11973: LD_EXP 3
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: PPUSH
11985: CALL_OW 70
11989: AND
11990: IFFALSE 12196
11992: GO 11994
11994: DISABLE
11995: LD_INT 0
11997: PPUSH
// begin dialogueon ;
11998: CALL_OW 6
// say ( amhsolda , D7-Sik-1 ) ;
12002: LD_EXP 26
12006: PPUSH
12007: LD_STRING D7-Sik-1
12009: PPUSH
12010: CALL_OW 88
// jmm_zbabelec = false ;
12014: LD_ADDR_LOC 74
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
// tmp = nearestunittounit ( filterallunits ( [ [ f_side , rus ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , john ) ;
12022: LD_ADDR_VAR 0 1
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_EXP 1
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 2
12041: PUSH
12042: LD_INT 21
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 21
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: PPUSH
12076: LD_EXP 17
12080: PPUSH
12081: CALL_OW 74
12085: ST_TO_ADDR
// if ( getdistunits ( john , amhsolda ) <= maxsikjmmdist ) or utoci ( john ) or ( getdistunits ( john , tmp ) <= maxsikjmmdist ) or isinarea ( john , rubaserng ) then
12086: LD_EXP 17
12090: PPUSH
12091: LD_EXP 26
12095: PPUSH
12096: CALL_OW 296
12100: PUSH
12101: LD_LOC 29
12105: LESSEQUAL
12106: PUSH
12107: LD_EXP 17
12111: PPUSH
12112: CALL 11823 0 1
12116: OR
12117: PUSH
12118: LD_EXP 17
12122: PPUSH
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 296
12132: PUSH
12133: LD_LOC 29
12137: LESSEQUAL
12138: OR
12139: PUSH
12140: LD_EXP 17
12144: PPUSH
12145: LD_INT 7
12147: PPUSH
12148: CALL_OW 308
12152: OR
12153: IFFALSE 12169
// say ( amhsolda , D7a-Sik-1 ) else
12155: LD_EXP 26
12159: PPUSH
12160: LD_STRING D7a-Sik-1
12162: PPUSH
12163: CALL_OW 88
12167: GO 12189
// begin say ( amhsolda , D7b-Sik-1 ) ;
12169: LD_EXP 26
12173: PPUSH
12174: LD_STRING D7b-Sik-1
12176: PPUSH
12177: CALL_OW 88
// jmm_zbabelec = true ;
12181: LD_ADDR_LOC 74
12185: PUSH
12186: LD_INT 1
12188: ST_TO_ADDR
// end ; dialogueoff ;
12189: CALL_OW 7
// enable ( 03 ) ;
12193: LD_INT 3
12195: ENABLE_MARKED
// end ;
12196: PPOPN 1
12198: END
// var countdist , totalatt ; every 0 0$0.3 marked 03 do var tmp ;
12199: GO 12201
12201: DISABLE
12202: LD_INT 0
12204: PPUSH
// begin if debug then
12205: LD_EXP 13
12209: IFFALSE 12230
// debug_strings = [ totalatt , countdist ] ;
12211: LD_ADDR_OWVAR 48
12215: PUSH
12216: LD_LOC 76
12220: PUSH
12221: LD_LOC 75
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: ST_TO_ADDR
// if retreat >= 0 then
12230: LD_EXP 5
12234: PUSH
12235: LD_INT 0
12237: GREATEREQUAL
12238: IFFALSE 12242
// exit ;
12240: GO 12400
// tmp = nearestunittounit ( filterallunits ( [ [ f_side , rus ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , john ) ;
12242: LD_ADDR_VAR 0 1
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_EXP 1
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 2
12261: PUSH
12262: LD_INT 21
12264: PUSH
12265: LD_INT 1
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 21
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: PPUSH
12296: LD_EXP 17
12300: PPUSH
12301: CALL_OW 74
12305: ST_TO_ADDR
// totalatt = totalatt + ( ( getdistunits ( john , amhsolda ) <= maxsikjmmdist ) or utoci ( john ) or ( getdistunits ( john , tmp ) <= maxsikjmmdist ) or isinarea ( john , rubaserng ) ) ;
12306: LD_ADDR_LOC 76
12310: PUSH
12311: LD_LOC 76
12315: PUSH
12316: LD_EXP 17
12320: PPUSH
12321: LD_EXP 26
12325: PPUSH
12326: CALL_OW 296
12330: PUSH
12331: LD_LOC 29
12335: LESSEQUAL
12336: PUSH
12337: LD_EXP 17
12341: PPUSH
12342: CALL 11823 0 1
12346: OR
12347: PUSH
12348: LD_EXP 17
12352: PPUSH
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL_OW 296
12362: PUSH
12363: LD_LOC 29
12367: LESSEQUAL
12368: OR
12369: PUSH
12370: LD_EXP 17
12374: PPUSH
12375: LD_INT 7
12377: PPUSH
12378: CALL_OW 308
12382: OR
12383: PLUS
12384: ST_TO_ADDR
// countdist = countdist + 1 ;
12385: LD_ADDR_LOC 75
12389: PUSH
12390: LD_LOC 75
12394: PUSH
12395: LD_INT 1
12397: PLUS
12398: ST_TO_ADDR
// enable ;
12399: ENABLE
// end ;
12400: PPOPN 1
12402: END
// on unitgoestored ( un ) do begin if ( getside ( un ) = rus ) and ( gettype ( un ) = unit_vehicle ) and ( getcontrol ( un ) = control_computer ) then
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 255
12412: PUSH
12413: LD_EXP 1
12417: EQUAL
12418: PUSH
12419: LD_VAR 0 1
12423: PPUSH
12424: CALL_OW 247
12428: PUSH
12429: LD_INT 2
12431: EQUAL
12432: AND
12433: PUSH
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 263
12443: PUSH
12444: LD_INT 3
12446: EQUAL
12447: AND
12448: IFFALSE 12479
// aiv_met = [ getx ( un ) , gety ( un ) ] ;
12450: LD_ADDR_LOC 25
12454: PUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 250
12464: PUSH
12465: LD_VAR 0 1
12469: PPUSH
12470: CALL_OW 251
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: ST_TO_ADDR
// end ;
12479: PPOPN 1
12481: END
// every 0 0$0.7 trigger aiv_met do var tmp1 , dc_time , tmp2 , sizes ;
12482: LD_LOC 25
12486: IFFALSE 13908
12488: GO 12490
12490: DISABLE
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// begin sizes = [ 5 , 7 , 10 , 14 , 20 , 50 ] ;
12497: LD_ADDR_VAR 0 4
12501: PUSH
12502: LD_INT 5
12504: PUSH
12505: LD_INT 7
12507: PUSH
12508: LD_INT 10
12510: PUSH
12511: LD_INT 14
12513: PUSH
12514: LD_INT 20
12516: PUSH
12517: LD_INT 50
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: ST_TO_ADDR
// dc_time = tick ;
12528: LD_ADDR_VAR 0 2
12532: PUSH
12533: LD_OWVAR 1
12537: ST_TO_ADDR
// if debug then
12538: LD_EXP 13
12542: IFFALSE 12553
// msg ( aiv_met ) ;
12544: LD_LOC 25
12548: PPUSH
12549: CALL_OW 100
// tmp2 = 1 ;
12553: LD_ADDR_VAR 0 3
12557: PUSH
12558: LD_INT 1
12560: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12561: LD_ADDR_VAR 0 1
12565: PUSH
12566: LD_INT 22
12568: PUSH
12569: LD_EXP 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 92
12580: PUSH
12581: LD_LOC 25
12585: PUSH
12586: LD_INT 1
12588: ARRAY
12589: PUSH
12590: LD_LOC 25
12594: PUSH
12595: LD_INT 2
12597: ARRAY
12598: PUSH
12599: LD_VAR 0 4
12603: PUSH
12604: LD_VAR 0 3
12608: ARRAY
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 23
12621: PUSH
12622: LD_INT 0
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 3
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: ST_TO_ADDR
// if not tmp1 then
12655: LD_VAR 0 1
12659: NOT
12660: IFFALSE 12764
// begin tmp2 = 2 ;
12662: LD_ADDR_VAR 0 3
12666: PUSH
12667: LD_INT 2
12669: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12670: LD_ADDR_VAR 0 1
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_EXP 2
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 92
12689: PUSH
12690: LD_LOC 25
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PUSH
12699: LD_LOC 25
12703: PUSH
12704: LD_INT 2
12706: ARRAY
12707: PUSH
12708: LD_VAR 0 4
12712: PUSH
12713: LD_VAR 0 3
12717: ARRAY
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 3
12727: PUSH
12728: LD_INT 23
12730: PUSH
12731: LD_INT 0
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 3
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 69
12763: ST_TO_ADDR
// end ; if not tmp1 then
12764: LD_VAR 0 1
12768: NOT
12769: IFFALSE 12873
// begin tmp2 = 3 ;
12771: LD_ADDR_VAR 0 3
12775: PUSH
12776: LD_INT 3
12778: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_EXP 2
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 92
12798: PUSH
12799: LD_LOC 25
12803: PUSH
12804: LD_INT 1
12806: ARRAY
12807: PUSH
12808: LD_LOC 25
12812: PUSH
12813: LD_INT 2
12815: ARRAY
12816: PUSH
12817: LD_VAR 0 4
12821: PUSH
12822: LD_VAR 0 3
12826: ARRAY
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 3
12836: PUSH
12837: LD_INT 23
12839: PUSH
12840: LD_INT 0
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 3
12849: PUSH
12850: LD_INT 21
12852: PUSH
12853: LD_INT 3
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: ST_TO_ADDR
// end ; if not tmp1 then
12873: LD_VAR 0 1
12877: NOT
12878: IFFALSE 12982
// begin tmp2 = 4 ;
12880: LD_ADDR_VAR 0 3
12884: PUSH
12885: LD_INT 4
12887: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12888: LD_ADDR_VAR 0 1
12892: PUSH
12893: LD_INT 22
12895: PUSH
12896: LD_EXP 2
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 92
12907: PUSH
12908: LD_LOC 25
12912: PUSH
12913: LD_INT 1
12915: ARRAY
12916: PUSH
12917: LD_LOC 25
12921: PUSH
12922: LD_INT 2
12924: ARRAY
12925: PUSH
12926: LD_VAR 0 4
12930: PUSH
12931: LD_VAR 0 3
12935: ARRAY
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 3
12945: PUSH
12946: LD_INT 23
12948: PUSH
12949: LD_INT 0
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 3
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 3
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// end ; if not tmp1 then
12982: LD_VAR 0 1
12986: NOT
12987: IFFALSE 13091
// begin tmp2 = 5 ;
12989: LD_ADDR_VAR 0 3
12993: PUSH
12994: LD_INT 5
12996: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
12997: LD_ADDR_VAR 0 1
13001: PUSH
13002: LD_INT 22
13004: PUSH
13005: LD_EXP 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 92
13016: PUSH
13017: LD_LOC 25
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PUSH
13026: LD_LOC 25
13030: PUSH
13031: LD_INT 2
13033: ARRAY
13034: PUSH
13035: LD_VAR 0 4
13039: PUSH
13040: LD_VAR 0 3
13044: ARRAY
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 3
13054: PUSH
13055: LD_INT 23
13057: PUSH
13058: LD_INT 0
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 3
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PPUSH
13086: CALL_OW 69
13090: ST_TO_ADDR
// end ; if not tmp1 then
13091: LD_VAR 0 1
13095: NOT
13096: IFFALSE 13200
// begin tmp2 = 6 ;
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_INT 6
13105: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_EXP 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 92
13125: PUSH
13126: LD_LOC 25
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PUSH
13135: LD_LOC 25
13139: PUSH
13140: LD_INT 2
13142: ARRAY
13143: PUSH
13144: LD_VAR 0 4
13148: PUSH
13149: LD_VAR 0 3
13153: ARRAY
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: LD_INT 23
13166: PUSH
13167: LD_INT 0
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 3
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 3
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: PPUSH
13195: CALL_OW 69
13199: ST_TO_ADDR
// end ; if not tmp1 then
13200: LD_VAR 0 1
13204: NOT
13205: IFFALSE 13270
// begin tmp2 = 7 ;
13207: LD_ADDR_VAR 0 3
13211: PUSH
13212: LD_INT 7
13214: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , f_not , [ f_nation , nation_nature ] , f_not , [ f_type , unit_building ] ] ) ;
13215: LD_ADDR_VAR 0 1
13219: PUSH
13220: LD_INT 22
13222: PUSH
13223: LD_EXP 2
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_INT 23
13237: PUSH
13238: LD_INT 0
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 3
13247: PUSH
13248: LD_INT 21
13250: PUSH
13251: LD_INT 3
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// end ; if tmp1 then
13270: LD_VAR 0 1
13274: IFFALSE 13908
// begin tmp1 = tmp1 [ 1 ] ;
13276: LD_ADDR_VAR 0 1
13280: PUSH
13281: LD_VAR 0 1
13285: PUSH
13286: LD_INT 1
13288: ARRAY
13289: ST_TO_ADDR
// case gettype ( tmp1 ) of unit_human :
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 247
13299: PUSH
13300: LD_INT 1
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13308
13306: GO 13321
13308: POP
// tmp1 = tmp1 ; unit_vehicle :
13309: LD_ADDR_VAR 0 1
13313: PUSH
13314: LD_VAR 0 1
13318: ST_TO_ADDR
13319: GO 13400
13321: LD_INT 2
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13397
13329: POP
// begin case getcontrol ( tmp1 ) of control_manual :
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 263
13339: PUSH
13340: LD_INT 1
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13366
13348: POP
// tmp1 = isdrivenby ( tmp1 ) ; control_remote :
13349: LD_ADDR_VAR 0 1
13353: PUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 311
13363: ST_TO_ADDR
13364: GO 13395
13366: LD_INT 2
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13392
13374: POP
// tmp1 = iscontroledby ( tmp1 ) ; else
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: LD_VAR 0 1
13384: PPUSH
13385: CALL_OW 312
13389: ST_TO_ADDR
13390: GO 13395
13392: POP
// exit ; end ;
13393: GO 13908
// end ; else
13395: GO 13400
13397: POP
// exit ; end ;
13398: GO 13908
// centernowonxy ( aiv_met [ 1 ] , aiv_met [ 2 ] ) ;
13400: LD_LOC 25
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PPUSH
13409: LD_LOC 25
13413: PUSH
13414: LD_INT 2
13416: ARRAY
13417: PPUSH
13418: CALL_OW 86
// wait ( 0 0$1 ) ;
13422: LD_INT 35
13424: PPUSH
13425: CALL_OW 67
// dialogueon ;
13429: CALL_OW 6
// if getsex ( tmp1 ) = sex_male then
13433: LD_VAR 0 1
13437: PPUSH
13438: CALL_OW 258
13442: PUSH
13443: LD_INT 1
13445: EQUAL
13446: IFFALSE 13462
// say ( tmp1 , DC-Sol1-1 ) else
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_STRING DC-Sol1-1
13455: PPUSH
13456: CALL_OW 88
13460: GO 13474
// say ( tmp1 , DC-FSol1-1 ) ;
13462: LD_VAR 0 1
13466: PPUSH
13467: LD_STRING DC-FSol1-1
13469: PPUSH
13470: CALL_OW 88
// if dc_time < ( return_time + 0 0$5 ) then
13474: LD_VAR 0 2
13478: PUSH
13479: LD_EXP 29
13483: PUSH
13484: LD_INT 175
13486: PLUS
13487: LESS
13488: IFFALSE 13504
// begin dialcb_delayed = true ;
13490: LD_ADDR_LOC 26
13494: PUSH
13495: LD_INT 1
13497: ST_TO_ADDR
// dialogueoff ;
13498: CALL_OW 7
// end else
13502: GO 13908
// begin if getsex ( tmp1 ) = sex_female then
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 258
13513: PUSH
13514: LD_INT 2
13516: EQUAL
13517: IFFALSE 13854
// begin if tmp2 <= 6 then
13519: LD_VAR 0 3
13523: PUSH
13524: LD_INT 6
13526: LESSEQUAL
13527: IFFALSE 13630
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_sex , sex_male ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john ] else
13529: LD_ADDR_VAR 0 1
13533: PUSH
13534: LD_INT 22
13536: PUSH
13537: LD_EXP 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 26
13548: PUSH
13549: LD_INT 1
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 92
13558: PUSH
13559: LD_LOC 25
13563: PUSH
13564: LD_INT 1
13566: ARRAY
13567: PUSH
13568: LD_LOC 25
13572: PUSH
13573: LD_INT 2
13575: ARRAY
13576: PUSH
13577: LD_VAR 0 4
13581: PUSH
13582: LD_VAR 0 3
13586: ARRAY
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: LD_INT 23
13599: PUSH
13600: LD_INT 0
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: PUSH
13619: LD_EXP 17
13623: PUSH
13624: EMPTY
13625: LIST
13626: DIFF
13627: ST_TO_ADDR
13628: GO 13690
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_sex , sex_male ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john ] ;
13630: LD_ADDR_VAR 0 1
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_EXP 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 26
13649: PUSH
13650: LD_INT 1
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 3
13659: PUSH
13660: LD_INT 23
13662: PUSH
13663: LD_INT 0
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 69
13680: PUSH
13681: LD_EXP 17
13685: PUSH
13686: EMPTY
13687: LIST
13688: DIFF
13689: ST_TO_ADDR
// while not tmp1 and ( tmp2 < 6 ) do
13690: LD_VAR 0 1
13694: NOT
13695: PUSH
13696: LD_VAR 0 3
13700: PUSH
13701: LD_INT 6
13703: LESS
13704: AND
13705: IFFALSE 13822
// begin tmp2 = tmp2 + 1 ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_VAR 0 3
13716: PUSH
13717: LD_INT 1
13719: PLUS
13720: ST_TO_ADDR
// tmp1 = filterallunits ( [ [ f_side , amer ] , [ f_sex , sex_male ] , [ f_distxy , aiv_met [ 1 ] , aiv_met [ 2 ] , sizes [ tmp2 ] ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john ] ;
13721: LD_ADDR_VAR 0 1
13725: PUSH
13726: LD_INT 22
13728: PUSH
13729: LD_EXP 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 26
13740: PUSH
13741: LD_INT 1
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 92
13750: PUSH
13751: LD_LOC 25
13755: PUSH
13756: LD_INT 1
13758: ARRAY
13759: PUSH
13760: LD_LOC 25
13764: PUSH
13765: LD_INT 2
13767: ARRAY
13768: PUSH
13769: LD_VAR 0 4
13773: PUSH
13774: LD_VAR 0 3
13778: ARRAY
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 3
13788: PUSH
13789: LD_INT 23
13791: PUSH
13792: LD_INT 0
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: LD_EXP 17
13815: PUSH
13816: EMPTY
13817: LIST
13818: DIFF
13819: ST_TO_ADDR
// end ;
13820: GO 13690
// if tmp1 then
13822: LD_VAR 0 1
13826: IFFALSE 13844
// tmp1 = tmp1 [ 1 ] else
13828: LD_ADDR_VAR 0 1
13832: PUSH
13833: LD_VAR 0 1
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: ST_TO_ADDR
13842: GO 13854
// tmp1 = john ;
13844: LD_ADDR_VAR 0 1
13848: PUSH
13849: LD_EXP 17
13853: ST_TO_ADDR
// end ; say ( john , DCb-JMM-1 ) ;
13854: LD_EXP 17
13858: PPUSH
13859: LD_STRING DCb-JMM-1
13861: PPUSH
13862: CALL_OW 88
// say ( tmp1 , DCb-Sol1-1 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_STRING DCb-Sol1-1
13873: PPUSH
13874: CALL_OW 88
// say ( john , DCb-JMM-2 ) ;
13878: LD_EXP 17
13882: PPUSH
13883: LD_STRING DCb-JMM-2
13885: PPUSH
13886: CALL_OW 88
// dialogueoff ;
13890: CALL_OW 7
// wait ( 0 0$0.5 ) ;
13894: LD_INT 18
13896: PPUSH
13897: CALL_OW 67
// hint ( ComputerCapturing ) ;
13901: LD_STRING ComputerCapturing
13903: PPUSH
13904: CALL_OW 339
// end ; end ; end ;
13908: PPOPN 4
13910: END
// every 0 0$1 trigger unitfilter ( filterallunits ( [ [ f_side , rus ] , [ f_ok ] ] ) , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) <= 7 do
13911: LD_INT 22
13913: PUSH
13914: LD_EXP 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 50
13925: PUSH
13926: EMPTY
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PPUSH
13933: CALL_OW 69
13937: PPUSH
13938: LD_INT 2
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 21
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 72
13970: PUSH
13971: LD_INT 7
13973: LESSEQUAL
13974: IFFALSE 14169
13976: GO 13978
13978: DISABLE
// begin retreat = 5 ;
13979: LD_ADDR_EXP 5
13983: PUSH
13984: LD_INT 5
13986: ST_TO_ADDR
// disable ( 17 ) ;
13987: LD_INT 17
13989: DISABLE_MARKED
// commovetoarea ( filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , ar_exit ) ;
13990: LD_INT 22
13992: PUSH
13993: LD_EXP 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 50
14004: PUSH
14005: EMPTY
14006: LIST
14007: PUSH
14008: LD_INT 2
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 1
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 21
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: PPUSH
14046: LD_INT 16
14048: PPUSH
14049: CALL_OW 113
// changesidefog ( rus , amer ) ;
14053: LD_EXP 1
14057: PPUSH
14058: LD_EXP 2
14062: PPUSH
14063: CALL_OW 343
// setattitude ( rus , amer , att_friend , false ) ;
14067: LD_EXP 1
14071: PPUSH
14072: LD_EXP 2
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: LD_INT 0
14082: PPUSH
14083: CALL_OW 80
// commovetoarea ( filterunitsexceptarea ( dropzone , [ [ f_or , [ f_side , amer ] , [ f_side , amer_reinf ] ] , [ f_ok ] ] ) , ar_exit_AM ) ;
14087: LD_INT 6
14089: PPUSH
14090: LD_INT 2
14092: PUSH
14093: LD_INT 22
14095: PUSH
14096: LD_EXP 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 22
14107: PUSH
14108: LD_EXP 3
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 50
14124: PUSH
14125: EMPTY
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 71
14136: PPUSH
14137: LD_INT 18
14139: PPUSH
14140: CALL_OW 113
// ingame_video = true ;
14144: LD_ADDR_OWVAR 52
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// interface_hidden = true ;
14152: LD_ADDR_OWVAR 54
14156: PUSH
14157: LD_INT 1
14159: ST_TO_ADDR
// centeronunits ( zbytek ) ;
14160: LD_LOC 77
14164: PPUSH
14165: CALL_OW 85
// end ;
14169: END
// var zbytek ; var i , pompoc ; every 0 0$0.7 do var zbytek2 ;
14170: GO 14172
14172: DISABLE
14173: LD_INT 0
14175: PPUSH
// begin case retreat of - 1 :
14176: LD_EXP 5
14180: PUSH
14181: LD_INT 1
14183: NEG
14184: DOUBLE
14185: EQUAL
14186: IFTRUE 14190
14188: GO 14194
14190: POP
// begin enable ;
14191: ENABLE
// end ; 4 :
14192: GO 14538
14194: LD_INT 4
14196: DOUBLE
14197: EQUAL
14198: IFTRUE 14202
14200: GO 14450
14202: POP
// begin pompoc = pompoc + 1 ;
14203: LD_ADDR_LOC 79
14207: PUSH
14208: LD_LOC 79
14212: PUSH
14213: LD_INT 1
14215: PLUS
14216: ST_TO_ADDR
// zbytek = filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) ;
14217: LD_ADDR_LOC 77
14221: PUSH
14222: LD_INT 22
14224: PUSH
14225: LD_EXP 1
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 50
14236: PUSH
14237: EMPTY
14238: LIST
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 2
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 59
14268: PUSH
14269: EMPTY
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: ST_TO_ADDR
// zbytek2 = filterunitsinarea ( ar_exit , [ [ f_side , rus ] , [ f_ok ] ] ) ;
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 16
14299: PPUSH
14300: LD_INT 22
14302: PUSH
14303: LD_EXP 1
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 50
14314: PUSH
14315: EMPTY
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 70
14326: ST_TO_ADDR
// zbytek = zbytek diff zbytek2 ;
14327: LD_ADDR_LOC 77
14331: PUSH
14332: LD_LOC 77
14336: PUSH
14337: LD_VAR 0 1
14341: DIFF
14342: ST_TO_ADDR
// for i in zbytek2 do
14343: LD_ADDR_LOC 78
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: FOR_IN
14354: IFFALSE 14367
// destroyunit ( i ) ;
14356: LD_LOC 78
14360: PPUSH
14361: CALL_OW 65
14365: GO 14353
14367: POP
14368: POP
// if zbytek then
14369: LD_LOC 77
14373: IFFALSE 14432
// begin centeronunits ( zbytek ) ;
14375: LD_LOC 77
14379: PPUSH
14380: CALL_OW 85
// enable ;
14384: ENABLE
// if pompoc = 3 then
14385: LD_LOC 79
14389: PUSH
14390: LD_INT 3
14392: EQUAL
14393: IFFALSE 14430
// begin commovetoarea ( zbytek , ar_exit ) ;
14395: LD_LOC 77
14399: PPUSH
14400: LD_INT 16
14402: PPUSH
14403: CALL_OW 113
// addcommovexy ( zbytek , 126 , 98 ) ;
14407: LD_LOC 77
14411: PPUSH
14412: LD_INT 126
14414: PPUSH
14415: LD_INT 98
14417: PPUSH
14418: CALL_OW 171
// pompoc = 0 ;
14422: LD_ADDR_LOC 79
14426: PUSH
14427: LD_INT 0
14429: ST_TO_ADDR
// end end else
14430: GO 14448
// begin ingame_video = false ;
14432: LD_ADDR_OWVAR 52
14436: PUSH
14437: LD_INT 0
14439: ST_TO_ADDR
// interface_hidden = false ;
14440: LD_ADDR_OWVAR 54
14444: PUSH
14445: LD_INT 0
14447: ST_TO_ADDR
// end ; end ; else
14448: GO 14538
14450: POP
// begin disable ( 17 ) ;
14451: LD_INT 17
14453: DISABLE_MARKED
// zbytek = filterunitsinarea ( ar_exit , [ [ f_side , rus ] , [ f_ok ] ] ) ;
14454: LD_ADDR_LOC 77
14458: PUSH
14459: LD_INT 16
14461: PPUSH
14462: LD_INT 22
14464: PUSH
14465: LD_EXP 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 50
14476: PUSH
14477: EMPTY
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PPUSH
14484: CALL_OW 70
14488: ST_TO_ADDR
// for i in zbytek do
14489: LD_ADDR_LOC 78
14493: PUSH
14494: LD_LOC 77
14498: PUSH
14499: FOR_IN
14500: IFFALSE 14513
// destroyunit ( i ) ;
14502: LD_LOC 78
14506: PPUSH
14507: CALL_OW 65
14511: GO 14499
14513: POP
14514: POP
// retreat = retreat - 1 ;
14515: LD_ADDR_EXP 5
14519: PUSH
14520: LD_EXP 5
14524: PUSH
14525: LD_INT 1
14527: MINUS
14528: ST_TO_ADDR
// pompoc = 0 ;
14529: LD_ADDR_LOC 79
14533: PUSH
14534: LD_INT 0
14536: ST_TO_ADDR
// enable ;
14537: ENABLE
// end ; end ; end ;
14538: PPOPN 1
14540: END
// every 0 0$1 + 1 1$0 trigger not filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
14541: LD_INT 22
14543: PUSH
14544: LD_EXP 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 50
14555: PUSH
14556: EMPTY
14557: LIST
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: PPUSH
14574: CALL_OW 69
14578: NOT
14579: IFFALSE 14823
14581: GO 14583
14583: DISABLE
// begin exclusiveon ;
14584: CALL_OW 4
// stop_action = true ;
14588: LD_ADDR_OWVAR 55
14592: PUSH
14593: LD_INT 1
14595: ST_TO_ADDR
// if ( totalatt * 5 ) < countdist then
14596: LD_LOC 76
14600: PUSH
14601: LD_INT 5
14603: MUL
14604: PUSH
14605: LD_LOC 75
14609: LESS
14610: IFFALSE 14651
// if islive ( amhsolda ) then
14612: LD_EXP 26
14616: PPUSH
14617: CALL_OW 300
14621: IFFALSE 14637
// sayradio ( powel , D8b-Pow-1 ) else
14623: LD_EXP 16
14627: PPUSH
14628: LD_STRING D8b-Pow-1
14630: PPUSH
14631: CALL_OW 94
14635: GO 14649
// sayradio ( powel , D8a-Pow-1 ) else
14637: LD_EXP 16
14641: PPUSH
14642: LD_STRING D8a-Pow-1
14644: PPUSH
14645: CALL_OW 94
14649: GO 14674
// if islive ( amhsolda ) then
14651: LD_EXP 26
14655: PPUSH
14656: CALL_OW 300
14660: IFFALSE 14674
// say ( amhsolda , D9-Sik-1 ) ;
14662: LD_EXP 26
14666: PPUSH
14667: LD_STRING D9-Sik-1
14669: PPUSH
14670: CALL_OW 88
// stop_action = false ;
14674: LD_ADDR_OWVAR 55
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// exclusiveoff ;
14682: CALL_OW 5
// wait ( 0 0$0.5 ) ;
14686: LD_INT 18
14688: PPUSH
14689: CALL_OW 67
// if ( totalatt * 5 ) < countdist then
14693: LD_LOC 76
14697: PUSH
14698: LD_INT 5
14700: MUL
14701: PUSH
14702: LD_LOC 75
14706: LESS
14707: IFFALSE 14718
// youlost ( Dismissed ) else
14709: LD_STRING Dismissed
14711: PPUSH
14712: CALL_OW 104
14716: GO 14823
// begin addmedal ( nothing1 , 1 ) ;
14718: LD_STRING nothing1
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 101
// addmedal ( nothing2 , 1 ) ;
14728: LD_STRING nothing2
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: CALL_OW 101
// addmedal ( perfect , 1 ) ;
14738: LD_STRING perfect
14740: PPUSH
14741: LD_INT 1
14743: PPUSH
14744: CALL_OW 101
// givemedals ( Main ) ;
14748: LD_STRING Main
14750: PPUSH
14751: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , amer ] , [ f_type , unit_human ] , [ f_not , [ f_nation , nation_nature ] ] ] ) ) ;
14755: LD_INT 51
14757: PUSH
14758: EMPTY
14759: LIST
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_EXP 2
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 21
14775: PUSH
14776: LD_INT 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 0
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: PPUSH
14811: CALL_OW 43
// saveitall ;
14815: CALL 16460 0 0
// youwin ;
14819: CALL_OW 103
// end ; end ;
14823: END
// every 0 0$1 trigger john and not islive ( john ) do
14824: LD_EXP 17
14828: PUSH
14829: LD_EXP 17
14833: PPUSH
14834: CALL_OW 300
14838: NOT
14839: AND
14840: IFFALSE 14859
14842: GO 14844
14844: DISABLE
// begin wait ( 0 0$1 ) ;
14845: LD_INT 35
14847: PPUSH
14848: CALL_OW 67
// youlost ( JMM ) ;
14852: LD_STRING JMM
14854: PPUSH
14855: CALL_OW 104
// end ;
14859: END
// every 0 0$1 + 3 trigger not filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] , f_not , [ f_nation , nation_nature ] ] ) do
14860: LD_INT 22
14862: PUSH
14863: LD_EXP 2
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 50
14884: PUSH
14885: EMPTY
14886: LIST
14887: PUSH
14888: LD_INT 3
14890: PUSH
14891: LD_INT 23
14893: PUSH
14894: LD_INT 0
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: NOT
14913: IFFALSE 14925
14915: GO 14917
14917: DISABLE
// youlost ( Destroyed ) ;
14918: LD_STRING Destroyed
14920: PPUSH
14921: CALL_OW 104
14925: END
// every 0 0$3 + 30 30$1 trigger sikishere and ( tick > combat_started ) do var tmp , tmq ;
14926: LD_LOC 27
14930: PUSH
14931: LD_OWVAR 1
14935: PUSH
14936: LD_LOC 73
14940: GREATER
14941: AND
14942: IFFALSE 15045
14944: GO 14946
14946: DISABLE
14947: LD_INT 0
14949: PPUSH
14950: PPUSH
// begin tmq = true ;
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: LD_INT 1
14958: ST_TO_ADDR
// for tmp in reinf_us do
14959: LD_ADDR_VAR 0 1
14963: PUSH
14964: LD_LOC 71
14968: PUSH
14969: FOR_IN
14970: IFFALSE 15007
// tmq = tmq and ( not islive ( tmp ) or isdying ( tmp ) ) ;
14972: LD_ADDR_VAR 0 2
14976: PUSH
14977: LD_VAR 0 2
14981: PUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 300
14991: NOT
14992: PUSH
14993: LD_VAR 0 1
14997: PPUSH
14998: CALL_OW 303
15002: OR
15003: AND
15004: ST_TO_ADDR
15005: GO 14969
15007: POP
15008: POP
// if tmq then
15009: LD_VAR 0 2
15013: IFFALSE 15044
// begin dialogueon ;
15015: CALL_OW 6
// sayradio ( powel , D8c-Pow-1 ) ;
15019: LD_EXP 16
15023: PPUSH
15024: LD_STRING D8c-Pow-1
15026: PPUSH
15027: CALL_OW 94
// dialogueoff ;
15031: CALL_OW 7
// youlost ( Dismissed ) ;
15035: LD_STRING Dismissed
15037: PPUSH
15038: CALL_OW 104
// end else
15042: GO 15045
// enable ;
15044: ENABLE
// end ;
15045: PPOPN 2
15047: END
// every 0 0$1 trigger not filterallunits ( [ [ f_side , amer ] , [ f_type , unit_building ] ] ) do
15048: LD_INT 22
15050: PUSH
15051: LD_EXP 2
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 3
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: NOT
15079: IFFALSE 15098
15081: GO 15083
15083: DISABLE
// begin wait ( 0 0$3 ) ;
15084: LD_INT 105
15086: PPUSH
15087: CALL_OW 67
// youlost ( Destroyed ) ;
15091: LD_STRING Destroyed
15093: PPUSH
15094: CALL_OW 104
// end ;
15098: END
// on Command ( com ) do var i , j , temp , x , y , typeTask ;
15099: LD_INT 0
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , amer ] , [ f_type , unit_human ] ] ) do
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: LD_INT 22
15114: PUSH
15115: LD_EXP 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 21
15126: PUSH
15127: LD_INT 1
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PPUSH
15138: CALL_OW 69
15142: PUSH
15143: FOR_IN
15144: IFFALSE 15350
// if GetTaskList ( i ) > 0 then
15146: LD_VAR 0 2
15150: PPUSH
15151: CALL_OW 437
15155: PUSH
15156: LD_INT 0
15158: GREATER
15159: IFFALSE 15348
// for j = 1 to GetTaskList ( i ) do
15161: LD_ADDR_VAR 0 3
15165: PUSH
15166: DOUBLE
15167: LD_INT 1
15169: DEC
15170: ST_TO_ADDR
15171: LD_VAR 0 2
15175: PPUSH
15176: CALL_OW 437
15180: PUSH
15181: FOR_TO
15182: IFFALSE 15346
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
15184: LD_ADDR_VAR 0 4
15188: PUSH
15189: LD_VAR 0 2
15193: PPUSH
15194: CALL_OW 437
15198: PUSH
15199: LD_VAR 0 3
15203: ARRAY
15204: PUSH
15205: LD_INT 4
15207: ARRAY
15208: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
15209: LD_ADDR_VAR 0 5
15213: PUSH
15214: LD_VAR 0 2
15218: PPUSH
15219: CALL_OW 437
15223: PUSH
15224: LD_VAR 0 3
15228: ARRAY
15229: PUSH
15230: LD_INT 2
15232: ARRAY
15233: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
15234: LD_ADDR_VAR 0 6
15238: PUSH
15239: LD_VAR 0 2
15243: PPUSH
15244: CALL_OW 437
15248: PUSH
15249: LD_VAR 0 3
15253: ARRAY
15254: PUSH
15255: LD_INT 3
15257: ARRAY
15258: ST_TO_ADDR
// typeTask = GetTaskList ( i ) [ j ] [ 1 ] ;
15259: LD_ADDR_VAR 0 7
15263: PUSH
15264: LD_VAR 0 2
15268: PPUSH
15269: CALL_OW 437
15273: PUSH
15274: LD_VAR 0 3
15278: ARRAY
15279: PUSH
15280: LD_INT 1
15282: ARRAY
15283: ST_TO_ADDR
// if x > 0 and y > 0 and typeTask = B and InArea ( x , y , BlockBuildArea ) then
15284: LD_VAR 0 5
15288: PUSH
15289: LD_INT 0
15291: GREATER
15292: PUSH
15293: LD_VAR 0 6
15297: PUSH
15298: LD_INT 0
15300: GREATER
15301: AND
15302: PUSH
15303: LD_VAR 0 7
15307: PUSH
15308: LD_STRING B
15310: EQUAL
15311: AND
15312: PUSH
15313: LD_VAR 0 5
15317: PPUSH
15318: LD_VAR 0 6
15322: PPUSH
15323: LD_INT 19
15325: PPUSH
15326: CALL_OW 309
15330: AND
15331: IFFALSE 15344
// SetTaskList ( i , [ ] ) ;
15333: LD_VAR 0 2
15337: PPUSH
15338: EMPTY
15339: PPUSH
15340: CALL_OW 446
// end ;
15344: GO 15181
15346: POP
15347: POP
15348: GO 15143
15350: POP
15351: POP
// end ;
15352: PPOPN 7
15354: END
// function return_am ; var pom ; begin
15355: LD_INT 0
15357: PPUSH
15358: PPUSH
// pom = FilterUnitsInArea ( ar_exit , [ [ f_side , amer ] ] ) ;
15359: LD_ADDR_VAR 0 2
15363: PUSH
15364: LD_INT 16
15366: PPUSH
15367: LD_INT 22
15369: PUSH
15370: LD_EXP 2
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: EMPTY
15380: LIST
15381: PPUSH
15382: CALL_OW 70
15386: ST_TO_ADDR
// ComMoveToArea ( pom , ar_exit_AM ) ;
15387: LD_VAR 0 2
15391: PPUSH
15392: LD_INT 18
15394: PPUSH
15395: CALL_OW 113
// end ;
15399: LD_VAR 0 1
15403: RET
// every 0 0$1 do var pom ;
15404: GO 15406
15406: DISABLE
15407: LD_INT 0
15409: PPUSH
// begin pom = FilterUnitsInArea ( ar_exit , [ [ f_side , amer ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
15410: LD_ADDR_VAR 0 1
15414: PUSH
15415: LD_INT 16
15417: PPUSH
15418: LD_INT 22
15420: PUSH
15421: LD_EXP 2
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 2
15432: PUSH
15433: LD_INT 21
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 70
15466: ST_TO_ADDR
// if pom > 0 then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 0
15474: GREATER
15475: IFFALSE 15481
// begin return_am ;
15477: CALL 15355 0 0
// end ; enable ;
15481: ENABLE
// end ; end_of_file
15482: PPOPN 1
15484: END
// var healeri_mimo ; function healeri_mimo_rb ; begin
15485: LD_INT 0
15487: PPUSH
// healeri_mimo = healeri diff filterunitsinarea ( repairbay , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
15488: LD_ADDR_LOC 80
15492: PUSH
15493: LD_EXP 12
15497: PUSH
15498: LD_INT 5
15500: PPUSH
15501: LD_INT 21
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 50
15513: PUSH
15514: EMPTY
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 70
15525: DIFF
15526: ST_TO_ADDR
// result = healeri_mimo ;
15527: LD_ADDR_VAR 0 1
15531: PUSH
15532: LD_LOC 80
15536: ST_TO_ADDR
// end ;
15537: LD_VAR 0 1
15541: RET
// every 0 0$0.9 trigger healeri_mimo_rb marked 17 do
15542: CALL 15485 0 0
15546: IFFALSE 15579
15548: GO 15550
15550: DISABLE
// begin if retreat >= 0 then
15551: LD_EXP 5
15555: PUSH
15556: LD_INT 0
15558: GREATEREQUAL
15559: IFFALSE 15563
// exit ;
15561: GO 15579
// commovexy ( healeri_mimo , 84 , 90 ) ;
15563: LD_LOC 80
15567: PPUSH
15568: LD_INT 84
15570: PPUSH
15571: LD_INT 90
15573: PPUSH
15574: CALL_OW 111
// enable ;
15578: ENABLE
// end ;
15579: END
// var poskoz_ ; var kn_ ; every 0 0$0.7 do
15580: GO 15582
15582: DISABLE
// begin if retreat >= 0 then
15583: LD_EXP 5
15587: PUSH
15588: LD_INT 0
15590: GREATEREQUAL
15591: IFFALSE 15595
// exit ;
15593: GO 15805
// poskoz_ = unitfilter ( rusove0 , [ [ f_type , unit_vehicle ] ] ) ;
15595: LD_ADDR_LOC 81
15599: PUSH
15600: LD_EXP 14
15604: PPUSH
15605: LD_INT 21
15607: PUSH
15608: LD_INT 2
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: EMPTY
15616: LIST
15617: PPUSH
15618: CALL_OW 72
15622: ST_TO_ADDR
// for kn_ in poskoz_ do
15623: LD_ADDR_LOC 82
15627: PUSH
15628: LD_LOC 81
15632: PUSH
15633: FOR_IN
15634: IFFALSE 15690
// begin if getlives ( kn_ ) <= hr_auta then
15636: LD_LOC 82
15640: PPUSH
15641: CALL_OW 256
15645: PUSH
15646: LD_EXP 9
15650: LESSEQUAL
15651: IFFALSE 15688
// begin rusove0 = rusove0 diff kn_ ;
15653: LD_ADDR_EXP 14
15657: PUSH
15658: LD_EXP 14
15662: PUSH
15663: LD_LOC 82
15667: DIFF
15668: ST_TO_ADDR
// poskoz = poskoz ^ [ kn_ ] ;
15669: LD_ADDR_EXP 6
15673: PUSH
15674: LD_EXP 6
15678: PUSH
15679: LD_LOC 82
15683: PUSH
15684: EMPTY
15685: LIST
15686: ADD
15687: ST_TO_ADDR
// end ; end ;
15688: GO 15633
15690: POP
15691: POP
// poskoz_ = unitfilter ( rusove0 , [ [ f_type , unit_human ] ] ) ;
15692: LD_ADDR_LOC 81
15696: PUSH
15697: LD_EXP 14
15701: PPUSH
15702: LD_INT 21
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: PPUSH
15715: CALL_OW 72
15719: ST_TO_ADDR
// for kn_ in poskoz_ do
15720: LD_ADDR_LOC 82
15724: PUSH
15725: LD_LOC 81
15729: PUSH
15730: FOR_IN
15731: IFFALSE 15787
// begin if getlives ( kn_ ) <= hr_lidi then
15733: LD_LOC 82
15737: PPUSH
15738: CALL_OW 256
15742: PUSH
15743: LD_EXP 8
15747: LESSEQUAL
15748: IFFALSE 15785
// begin rusove0 = rusove0 diff kn_ ;
15750: LD_ADDR_EXP 14
15754: PUSH
15755: LD_EXP 14
15759: PUSH
15760: LD_LOC 82
15764: DIFF
15765: ST_TO_ADDR
// poskoz = poskoz ^ [ kn_ ] ;
15766: LD_ADDR_EXP 6
15770: PUSH
15771: LD_EXP 6
15775: PUSH
15776: LD_LOC 82
15780: PUSH
15781: EMPTY
15782: LIST
15783: ADD
15784: ST_TO_ADDR
// end ; end ;
15785: GO 15730
15787: POP
15788: POP
// commovexy ( poskoz , 86 , 92 ) ;
15789: LD_EXP 6
15793: PPUSH
15794: LD_INT 86
15796: PPUSH
15797: LD_INT 92
15799: PPUSH
15800: CALL_OW 111
// enable ;
15804: ENABLE
// end ;
15805: END
// var pom_rupo ; var driver ; var kn__ ; every 0 0$1.5 do var poskpom , p95 ;
15806: GO 15808
15808: DISABLE
15809: LD_INT 0
15811: PPUSH
15812: PPUSH
// begin if retreat >= 0 then
15813: LD_EXP 5
15817: PUSH
15818: LD_INT 0
15820: GREATEREQUAL
15821: IFFALSE 15825
// exit ;
15823: GO 16356
// poskpom = poskoz ;
15825: LD_ADDR_VAR 0 1
15829: PUSH
15830: LD_EXP 6
15834: ST_TO_ADDR
// poskoz = [ ] ;
15835: LD_ADDR_EXP 6
15839: PUSH
15840: EMPTY
15841: ST_TO_ADDR
// for p95 in poskpom do
15842: LD_ADDR_VAR 0 2
15846: PUSH
15847: LD_VAR 0 1
15851: PUSH
15852: FOR_IN
15853: IFFALSE 15887
// if islive ( p95 ) then
15855: LD_VAR 0 2
15859: PPUSH
15860: CALL_OW 300
15864: IFFALSE 15885
// poskoz = poskoz ^ [ p95 ] ;
15866: LD_ADDR_EXP 6
15870: PUSH
15871: LD_EXP 6
15875: PUSH
15876: LD_VAR 0 2
15880: PUSH
15881: EMPTY
15882: LIST
15883: ADD
15884: ST_TO_ADDR
15885: GO 15852
15887: POP
15888: POP
// pom_rupo = filterunitsinarea ( repairbay , [ [ f_side , rus ] , [ f_type , unit_vehicle ] ] ) isect poskoz ;
15889: LD_ADDR_LOC 83
15893: PUSH
15894: LD_INT 5
15896: PPUSH
15897: LD_INT 22
15899: PUSH
15900: LD_EXP 1
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 21
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 70
15927: PUSH
15928: LD_EXP 6
15932: ISECT
15933: ST_TO_ADDR
// for kn__ in pom_rupo do
15934: LD_ADDR_LOC 85
15938: PUSH
15939: LD_LOC 83
15943: PUSH
15944: FOR_IN
15945: IFFALSE 16155
// begin driver = isdrivenby ( kn__ ) ;
15947: LD_ADDR_LOC 84
15951: PUSH
15952: LD_LOC 85
15956: PPUSH
15957: CALL_OW 311
15961: ST_TO_ADDR
// if driver then
15962: LD_LOC 84
15966: IFFALSE 16088
// begin comhold ( driver ) ;
15968: LD_LOC 84
15972: PPUSH
15973: CALL_OW 140
// setfuel ( kn__ , 100 ) ;
15977: LD_LOC 85
15981: PPUSH
15982: LD_INT 100
15984: PPUSH
15985: CALL_OW 240
// comexitvehicle ( kn__ ) ;
15989: LD_LOC 85
15993: PPUSH
15994: CALL_OW 121
// wait ( 0 0$0.5 ) ;
15998: LD_INT 18
16000: PPUSH
16001: CALL_OW 67
// addcomrepairvehicle ( [ driver ] , kn__ ) ;
16005: LD_LOC 84
16009: PUSH
16010: EMPTY
16011: LIST
16012: PPUSH
16013: LD_LOC 85
16017: PPUSH
16018: CALL_OW 189
// addcommoveunit ( [ driver ] , kn__ ) ;
16022: LD_LOC 84
16026: PUSH
16027: EMPTY
16028: LIST
16029: PPUSH
16030: LD_LOC 85
16034: PPUSH
16035: CALL_OW 172
// addcomfree ( driver ) ;
16039: LD_LOC 84
16043: PPUSH
16044: CALL_OW 199
// poskoz = poskoz diff [ kn__ ] ;
16048: LD_ADDR_EXP 6
16052: PUSH
16053: LD_EXP 6
16057: PUSH
16058: LD_LOC 85
16062: PUSH
16063: EMPTY
16064: LIST
16065: DIFF
16066: ST_TO_ADDR
// rusove0 = rusove0 ^ [ kn__ ] ;
16067: LD_ADDR_EXP 14
16071: PUSH
16072: LD_EXP 14
16076: PUSH
16077: LD_LOC 85
16081: PUSH
16082: EMPTY
16083: LIST
16084: ADD
16085: ST_TO_ADDR
// end else
16086: GO 16153
// if unitfilter ( [ kn__ ] , [ [ f_control , control_computer ] ] ) then
16088: LD_LOC 85
16092: PUSH
16093: EMPTY
16094: LIST
16095: PPUSH
16096: LD_INT 33
16098: PUSH
16099: LD_INT 3
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: PPUSH
16109: CALL_OW 72
16113: IFFALSE 16153
// begin poskoz = poskoz diff [ kn__ ] ;
16115: LD_ADDR_EXP 6
16119: PUSH
16120: LD_EXP 6
16124: PUSH
16125: LD_LOC 85
16129: PUSH
16130: EMPTY
16131: LIST
16132: DIFF
16133: ST_TO_ADDR
// pacienti = pacienti ^ [ kn__ ] ;
16134: LD_ADDR_EXP 7
16138: PUSH
16139: LD_EXP 7
16143: PUSH
16144: LD_LOC 85
16148: PUSH
16149: EMPTY
16150: LIST
16151: ADD
16152: ST_TO_ADDR
// end ; end ;
16153: GO 15944
16155: POP
16156: POP
// pom_rupo = filterunitsinarea ( repairbay , [ [ f_side , rus ] , [ f_type , unit_human ] ] ) isect poskoz ;
16157: LD_ADDR_LOC 83
16161: PUSH
16162: LD_INT 5
16164: PPUSH
16165: LD_INT 22
16167: PUSH
16168: LD_EXP 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 21
16179: PUSH
16180: LD_INT 1
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 70
16195: PUSH
16196: LD_EXP 6
16200: ISECT
16201: ST_TO_ADDR
// for kn__ in pom_rupo do
16202: LD_ADDR_LOC 85
16206: PUSH
16207: LD_LOC 83
16211: PUSH
16212: FOR_IN
16213: IFFALSE 16255
// begin poskoz = poskoz diff [ kn__ ] ;
16215: LD_ADDR_EXP 6
16219: PUSH
16220: LD_EXP 6
16224: PUSH
16225: LD_LOC 85
16229: PUSH
16230: EMPTY
16231: LIST
16232: DIFF
16233: ST_TO_ADDR
// pacienti = pacienti ^ [ kn__ ] ;
16234: LD_ADDR_EXP 7
16238: PUSH
16239: LD_EXP 7
16243: PUSH
16244: LD_LOC 85
16248: PUSH
16249: EMPTY
16250: LIST
16251: ADD
16252: ST_TO_ADDR
// end ;
16253: GO 16212
16255: POP
16256: POP
// for kn__ in pacienti do
16257: LD_ADDR_LOC 85
16261: PUSH
16262: LD_EXP 7
16266: PUSH
16267: FOR_IN
16268: IFFALSE 16325
// begin if getlives ( kn__ ) >= 950 then
16270: LD_LOC 85
16274: PPUSH
16275: CALL_OW 256
16279: PUSH
16280: LD_INT 950
16282: GREATEREQUAL
16283: IFFALSE 16323
// begin pacienti = pacienti diff [ kn__ ] ;
16285: LD_ADDR_EXP 7
16289: PUSH
16290: LD_EXP 7
16294: PUSH
16295: LD_LOC 85
16299: PUSH
16300: EMPTY
16301: LIST
16302: DIFF
16303: ST_TO_ADDR
// rusove0 = rusove0 ^ [ kn__ ] ;
16304: LD_ADDR_EXP 14
16308: PUSH
16309: LD_EXP 14
16313: PUSH
16314: LD_LOC 85
16318: PUSH
16319: EMPTY
16320: LIST
16321: ADD
16322: ST_TO_ADDR
// end ; end ;
16323: GO 16267
16325: POP
16326: POP
// if pacienti >= 1 then
16327: LD_EXP 7
16331: PUSH
16332: LD_INT 1
16334: GREATEREQUAL
16335: IFFALSE 16355
// comheal ( healeri , pacienti [ 1 ] ) ;
16337: LD_EXP 12
16341: PPUSH
16342: LD_EXP 7
16346: PUSH
16347: LD_INT 1
16349: ARRAY
16350: PPUSH
16351: CALL_OW 128
// enable ;
16355: ENABLE
// end ;
16356: PPOPN 2
16358: END
// on vehiclecaptured ( newid , oldid , origside , cptrdby ) do if origside = rus then
16359: LD_VAR 0 3
16363: PUSH
16364: LD_EXP 1
16368: EQUAL
16369: IFFALSE 16409
// begin rusove0 = rusove0 diff [ oldid ] ;
16371: LD_ADDR_EXP 14
16375: PUSH
16376: LD_EXP 14
16380: PUSH
16381: LD_VAR 0 2
16385: PUSH
16386: EMPTY
16387: LIST
16388: DIFF
16389: ST_TO_ADDR
// poskoz = poskoz diff [ oldid ] ;
16390: LD_ADDR_EXP 6
16394: PUSH
16395: LD_EXP 6
16399: PUSH
16400: LD_VAR 0 2
16404: PUSH
16405: EMPTY
16406: LIST
16407: DIFF
16408: ST_TO_ADDR
// end ; end_of_file
16409: PPOPN 4
16411: END
// export rh , powel ; export john ; export lisa , frank , john_ ; export cyrus , bobby , denis , yamoko ; export amhsold0 , amhsolda ; export posilya , posilyb ; export return_time , return_time_ ; export lucy , brown , vanh , glad , joan ; export lisaloc , frankloc , cyrusloc , bobbyloc , denisloc , yamokoloc , lucyloc , brownloc , gladloc , joanloc ; export gamma2commander ; var time ; var othergamma2 , othergamma3 , otherunplaced , otherjmm , otherlatejmm ; var gamma2vip , gamma3vip , withjmmvip , withjmmlatevip ; var gamma2 ; var ambctwr0 ; function pouzit ( un ) ; begin
16412: LD_INT 0
16414: PPUSH
// result = ( un in posilya ) or ( un in posilyb ) or ( un in smejdi ) ;
16415: LD_ADDR_VAR 0 2
16419: PUSH
16420: LD_VAR 0 1
16424: PUSH
16425: LD_EXP 27
16429: IN
16430: PUSH
16431: LD_VAR 0 1
16435: PUSH
16436: LD_EXP 28
16440: IN
16441: OR
16442: PUSH
16443: LD_VAR 0 1
16447: PUSH
16448: LD_LOC 98
16452: IN
16453: OR
16454: ST_TO_ADDR
// end ;
16455: LD_VAR 0 2
16459: RET
// export function saveitall ; var tmz , bz , tmzo ; begin
16460: LD_INT 0
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
// if john then
16466: LD_EXP 17
16470: IFFALSE 16486
// savecharacters ( john , JMM ) else
16472: LD_EXP 17
16476: PPUSH
16477: LD_STRING JMM
16479: PPUSH
16480: CALL_OW 38
16484: GO 16498
// savecharacters ( john_ , JMM ) ;
16486: LD_EXP 20
16490: PPUSH
16491: LD_STRING JMM
16493: PPUSH
16494: CALL_OW 38
// savecharacters ( [ ] , Harisson ) ;
16498: EMPTY
16499: PPUSH
16500: LD_STRING Harisson
16502: PPUSH
16503: CALL_OW 38
// deletecharacters ( Harisson ) ;
16507: LD_STRING Harisson
16509: PPUSH
16510: CALL_OW 40
// if cyrus then
16514: LD_EXP 21
16518: IFFALSE 16588
// begin savecharacters ( cyrus , Cyrus ) ;
16520: LD_EXP 21
16524: PPUSH
16525: LD_STRING Cyrus
16527: PPUSH
16528: CALL_OW 38
// if isdead ( cyrus ) then
16532: LD_EXP 21
16536: PPUSH
16537: CALL_OW 301
16541: IFFALSE 16555
// savevariable ( 0 , CyrusLoc ) else
16543: LD_INT 0
16545: PPUSH
16546: LD_STRING CyrusLoc
16548: PPUSH
16549: CALL_OW 39
16553: GO 16588
// if pouzit ( cyrus ) or ( cyrus in withjmmlatevip ) then
16555: LD_EXP 21
16559: PPUSH
16560: CALL 16412 0 1
16564: PUSH
16565: LD_EXP 21
16569: PUSH
16570: LD_LOC 95
16574: IN
16575: OR
16576: IFFALSE 16588
// savevariable ( 2 , CyrusLoc ) ;
16578: LD_INT 2
16580: PPUSH
16581: LD_STRING CyrusLoc
16583: PPUSH
16584: CALL_OW 39
// end ; if bobby then
16588: LD_EXP 22
16592: IFFALSE 16662
// begin savecharacters ( bobby , Bobby ) ;
16594: LD_EXP 22
16598: PPUSH
16599: LD_STRING Bobby
16601: PPUSH
16602: CALL_OW 38
// if isdead ( bobby ) then
16606: LD_EXP 22
16610: PPUSH
16611: CALL_OW 301
16615: IFFALSE 16629
// savevariable ( 0 , BobbyLoc ) else
16617: LD_INT 0
16619: PPUSH
16620: LD_STRING BobbyLoc
16622: PPUSH
16623: CALL_OW 39
16627: GO 16662
// if pouzit ( bobby ) or ( bobby in withjmmlatevip ) then
16629: LD_EXP 22
16633: PPUSH
16634: CALL 16412 0 1
16638: PUSH
16639: LD_EXP 22
16643: PUSH
16644: LD_LOC 95
16648: IN
16649: OR
16650: IFFALSE 16662
// savevariable ( 2 , BobbyLoc ) ;
16652: LD_INT 2
16654: PPUSH
16655: LD_STRING BobbyLoc
16657: PPUSH
16658: CALL_OW 39
// end ; if lisa then
16662: LD_EXP 18
16666: IFFALSE 16736
// begin savecharacters ( lisa , Lisa ) ;
16668: LD_EXP 18
16672: PPUSH
16673: LD_STRING Lisa
16675: PPUSH
16676: CALL_OW 38
// if isdead ( lisa ) then
16680: LD_EXP 18
16684: PPUSH
16685: CALL_OW 301
16689: IFFALSE 16703
// savevariable ( 0 , LisaLoc ) else
16691: LD_INT 0
16693: PPUSH
16694: LD_STRING LisaLoc
16696: PPUSH
16697: CALL_OW 39
16701: GO 16736
// if pouzit ( lisa ) or ( lisa in withjmmlatevip ) then
16703: LD_EXP 18
16707: PPUSH
16708: CALL 16412 0 1
16712: PUSH
16713: LD_EXP 18
16717: PUSH
16718: LD_LOC 95
16722: IN
16723: OR
16724: IFFALSE 16736
// savevariable ( 2 , LisaLoc ) ;
16726: LD_INT 2
16728: PPUSH
16729: LD_STRING LisaLoc
16731: PPUSH
16732: CALL_OW 39
// end ; if frank then
16736: LD_EXP 19
16740: IFFALSE 16810
// begin savecharacters ( frank , Frank ) ;
16742: LD_EXP 19
16746: PPUSH
16747: LD_STRING Frank
16749: PPUSH
16750: CALL_OW 38
// if isdead ( frank ) then
16754: LD_EXP 19
16758: PPUSH
16759: CALL_OW 301
16763: IFFALSE 16777
// savevariable ( 0 , FrankLoc ) else
16765: LD_INT 0
16767: PPUSH
16768: LD_STRING FrankLoc
16770: PPUSH
16771: CALL_OW 39
16775: GO 16810
// if pouzit ( frank ) or ( frank in withjmmlatevip ) then
16777: LD_EXP 19
16781: PPUSH
16782: CALL 16412 0 1
16786: PUSH
16787: LD_EXP 19
16791: PUSH
16792: LD_LOC 95
16796: IN
16797: OR
16798: IFFALSE 16810
// savevariable ( 2 , FrankLoc ) ;
16800: LD_INT 2
16802: PPUSH
16803: LD_STRING FrankLoc
16805: PPUSH
16806: CALL_OW 39
// end ; if lucy then
16810: LD_EXP 31
16814: IFFALSE 16884
// begin savecharacters ( lucy , Donaldson ) ;
16816: LD_EXP 31
16820: PPUSH
16821: LD_STRING Donaldson
16823: PPUSH
16824: CALL_OW 38
// if isdead ( lucy ) then
16828: LD_EXP 31
16832: PPUSH
16833: CALL_OW 301
16837: IFFALSE 16851
// savevariable ( 0 , DonaldsonLoc ) else
16839: LD_INT 0
16841: PPUSH
16842: LD_STRING DonaldsonLoc
16844: PPUSH
16845: CALL_OW 39
16849: GO 16884
// if pouzit ( lucy ) or ( lucy in withjmmlatevip ) then
16851: LD_EXP 31
16855: PPUSH
16856: CALL 16412 0 1
16860: PUSH
16861: LD_EXP 31
16865: PUSH
16866: LD_LOC 95
16870: IN
16871: OR
16872: IFFALSE 16884
// savevariable ( 2 , DonaldsonLoc ) ;
16874: LD_INT 2
16876: PPUSH
16877: LD_STRING DonaldsonLoc
16879: PPUSH
16880: CALL_OW 39
// end ; if brown then
16884: LD_EXP 32
16888: IFFALSE 16958
// begin savecharacters ( brown , Brown ) ;
16890: LD_EXP 32
16894: PPUSH
16895: LD_STRING Brown
16897: PPUSH
16898: CALL_OW 38
// if isdead ( brown ) then
16902: LD_EXP 32
16906: PPUSH
16907: CALL_OW 301
16911: IFFALSE 16925
// savevariable ( 0 , BrownLoc ) else
16913: LD_INT 0
16915: PPUSH
16916: LD_STRING BrownLoc
16918: PPUSH
16919: CALL_OW 39
16923: GO 16958
// if pouzit ( brown ) or ( brown in withjmmlatevip ) then
16925: LD_EXP 32
16929: PPUSH
16930: CALL 16412 0 1
16934: PUSH
16935: LD_EXP 32
16939: PUSH
16940: LD_LOC 95
16944: IN
16945: OR
16946: IFFALSE 16958
// savevariable ( 2 , BrownLoc ) ;
16948: LD_INT 2
16950: PPUSH
16951: LD_STRING BrownLoc
16953: PPUSH
16954: CALL_OW 39
// end ; if denis then
16958: LD_EXP 23
16962: IFFALSE 17032
// begin savecharacters ( denis , Denis ) ;
16964: LD_EXP 23
16968: PPUSH
16969: LD_STRING Denis
16971: PPUSH
16972: CALL_OW 38
// if isdead ( denis ) then
16976: LD_EXP 23
16980: PPUSH
16981: CALL_OW 301
16985: IFFALSE 16999
// savevariable ( 0 , DenisLoc ) else
16987: LD_INT 0
16989: PPUSH
16990: LD_STRING DenisLoc
16992: PPUSH
16993: CALL_OW 39
16997: GO 17032
// if pouzit ( denis ) or ( denis in withjmmlatevip ) then
16999: LD_EXP 23
17003: PPUSH
17004: CALL 16412 0 1
17008: PUSH
17009: LD_EXP 23
17013: PUSH
17014: LD_LOC 95
17018: IN
17019: OR
17020: IFFALSE 17032
// savevariable ( 2 , DenisLoc ) ;
17022: LD_INT 2
17024: PPUSH
17025: LD_STRING DenisLoc
17027: PPUSH
17028: CALL_OW 39
// end ; if joan then
17032: LD_EXP 35
17036: IFFALSE 17083
// begin savecharacters ( joan , Joan ) ;
17038: LD_EXP 35
17042: PPUSH
17043: LD_STRING Joan
17045: PPUSH
17046: CALL_OW 38
// if isdead ( joan ) then
17050: LD_EXP 35
17054: PPUSH
17055: CALL_OW 301
17059: IFFALSE 17073
// savevariable ( 0 , JoanLoc ) else
17061: LD_INT 0
17063: PPUSH
17064: LD_STRING JoanLoc
17066: PPUSH
17067: CALL_OW 39
17071: GO 17083
// savevariable ( 2 , JoanLoc ) ;
17073: LD_INT 2
17075: PPUSH
17076: LD_STRING JoanLoc
17078: PPUSH
17079: CALL_OW 39
// end ; if glad then
17083: LD_EXP 34
17087: IFFALSE 17157
// begin savecharacters ( glad , Gladstone ) ;
17089: LD_EXP 34
17093: PPUSH
17094: LD_STRING Gladstone
17096: PPUSH
17097: CALL_OW 38
// if isdead ( glad ) then
17101: LD_EXP 34
17105: PPUSH
17106: CALL_OW 301
17110: IFFALSE 17124
// savevariable ( 0 , GladstoneLoc ) else
17112: LD_INT 0
17114: PPUSH
17115: LD_STRING GladstoneLoc
17117: PPUSH
17118: CALL_OW 39
17122: GO 17157
// if pouzit ( glad ) or ( glad in withjmmlatevip ) then
17124: LD_EXP 34
17128: PPUSH
17129: CALL 16412 0 1
17133: PUSH
17134: LD_EXP 34
17138: PUSH
17139: LD_LOC 95
17143: IN
17144: OR
17145: IFFALSE 17157
// savevariable ( 2 , GladstoneLoc ) ;
17147: LD_INT 2
17149: PPUSH
17150: LD_STRING GladstoneLoc
17152: PPUSH
17153: CALL_OW 39
// end ; if not frank then
17157: LD_EXP 19
17161: NOT
17162: IFFALSE 17238
// if yamoko then
17164: LD_EXP 24
17168: IFFALSE 17238
// begin savecharacters ( yamoko , Yamoko ) ;
17170: LD_EXP 24
17174: PPUSH
17175: LD_STRING Yamoko
17177: PPUSH
17178: CALL_OW 38
// if isdead ( yamoko ) then
17182: LD_EXP 24
17186: PPUSH
17187: CALL_OW 301
17191: IFFALSE 17205
// savevariable ( 0 , YamokoLoc ) else
17193: LD_INT 0
17195: PPUSH
17196: LD_STRING YamokoLoc
17198: PPUSH
17199: CALL_OW 39
17203: GO 17238
// if pouzit ( yamoko ) or ( yamoko in withjmmlatevip ) then
17205: LD_EXP 24
17209: PPUSH
17210: CALL 16412 0 1
17214: PUSH
17215: LD_EXP 24
17219: PUSH
17220: LD_LOC 95
17224: IN
17225: OR
17226: IFFALSE 17238
// savevariable ( 2 , YamokoLoc ) ;
17228: LD_INT 2
17230: PPUSH
17231: LD_STRING YamokoLoc
17233: PPUSH
17234: CALL_OW 39
// end ; savecharacters ( amhsolda , Sikorski ) ;
17238: LD_EXP 26
17242: PPUSH
17243: LD_STRING Sikorski
17245: PPUSH
17246: CALL_OW 38
// if isdead ( amhsolda ) then
17250: LD_EXP 26
17254: PPUSH
17255: CALL_OW 301
17259: IFFALSE 17273
// savevariable ( 0 , SikorskiLoc ) else
17261: LD_INT 0
17263: PPUSH
17264: LD_STRING SikorskiLoc
17266: PPUSH
17267: CALL_OW 39
17271: GO 17283
// savevariable ( 2 , SikorskiLoc ) ;
17273: LD_INT 2
17275: PPUSH
17276: LD_STRING SikorskiLoc
17278: PPUSH
17279: CALL_OW 39
// savecharacters ( vanh , VanHouten ) ;
17283: LD_EXP 33
17287: PPUSH
17288: LD_STRING VanHouten
17290: PPUSH
17291: CALL_OW 38
// if gamma2commander = 3 then
17295: LD_EXP 46
17299: PUSH
17300: LD_INT 3
17302: EQUAL
17303: IFFALSE 17340
// if isdead ( vanh ) then
17305: LD_EXP 33
17309: PPUSH
17310: CALL_OW 301
17314: IFFALSE 17328
// savevariable ( 0 , VanHoutenLoc ) else
17316: LD_INT 0
17318: PPUSH
17319: LD_STRING VanHoutenLoc
17321: PPUSH
17322: CALL_OW 39
17326: GO 17338
// savevariable ( 2 , VanHoutenLoc ) else
17328: LD_INT 2
17330: PPUSH
17331: LD_STRING VanHoutenLoc
17333: PPUSH
17334: CALL_OW 39
17338: GO 17350
// savevariable ( 0 , VanHoutenLoc ) ;
17340: LD_INT 0
17342: PPUSH
17343: LD_STRING VanHoutenLoc
17345: PPUSH
17346: CALL_OW 39
// tmz = filterallunits ( [ [ f_alive ] , [ f_side , amer ] , [ f_type , unit_human ] ] ) diff [ john , cyrus , bobby , lisa , frank , lucy , brown , denis , joan , glad , yamoko , amhsolda , vanh ] ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: LD_INT 51
17357: PUSH
17358: EMPTY
17359: LIST
17360: PUSH
17361: LD_INT 22
17363: PUSH
17364: LD_EXP 2
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 21
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: PPUSH
17388: CALL_OW 69
17392: PUSH
17393: LD_EXP 17
17397: PUSH
17398: LD_EXP 21
17402: PUSH
17403: LD_EXP 22
17407: PUSH
17408: LD_EXP 18
17412: PUSH
17413: LD_EXP 19
17417: PUSH
17418: LD_EXP 31
17422: PUSH
17423: LD_EXP 32
17427: PUSH
17428: LD_EXP 23
17432: PUSH
17433: LD_EXP 35
17437: PUSH
17438: LD_EXP 34
17442: PUSH
17443: LD_EXP 24
17447: PUSH
17448: LD_EXP 26
17452: PUSH
17453: LD_EXP 33
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: DIFF
17473: ST_TO_ADDR
// tmz = unitfilter ( tmz , [ f_not , [ f_nation , nation_nature ] ] ) ;
17474: LD_ADDR_VAR 0 2
17478: PUSH
17479: LD_VAR 0 2
17483: PPUSH
17484: LD_INT 3
17486: PUSH
17487: LD_INT 23
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: CALL_OW 72
17505: ST_TO_ADDR
// savecharacters ( tmz union ( othergamma2 ^ othergamma3 ^ otherunplaced ^ otherjmm ^ otherlatejmm ) , otherGamma2 ) ;
17506: LD_VAR 0 2
17510: PUSH
17511: LD_LOC 87
17515: PUSH
17516: LD_LOC 88
17520: ADD
17521: PUSH
17522: LD_LOC 89
17526: ADD
17527: PUSH
17528: LD_LOC 90
17532: ADD
17533: PUSH
17534: LD_LOC 91
17538: ADD
17539: UNION
17540: PPUSH
17541: LD_STRING otherGamma2
17543: PPUSH
17544: CALL_OW 38
// savecharacters ( [ ] , otherDelta ) ;
17548: EMPTY
17549: PPUSH
17550: LD_STRING otherDelta
17552: PPUSH
17553: CALL_OW 38
// savecharacters ( [ ] , otherUnplaced ) ;
17557: EMPTY
17558: PPUSH
17559: LD_STRING otherUnplaced
17561: PPUSH
17562: CALL_OW 38
// savecharacters ( [ ] , otherJMM ) ;
17566: EMPTY
17567: PPUSH
17568: LD_STRING otherJMM
17570: PPUSH
17571: CALL_OW 38
// savecharacters ( [ ] , otherLateJMM ) ;
17575: EMPTY
17576: PPUSH
17577: LD_STRING otherLateJMM
17579: PPUSH
17580: CALL_OW 38
// tmz = filterallunits ( [ [ f_side , amer ] , [ f_nation , nation_american ] , [ f_btype , b_factory ] ] ) ;
17584: LD_ADDR_VAR 0 2
17588: PUSH
17589: LD_INT 22
17591: PUSH
17592: LD_EXP 2
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 23
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 30
17613: PUSH
17614: LD_INT 3
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: LIST
17625: PPUSH
17626: CALL_OW 69
17630: ST_TO_ADDR
// tmz = tmz ^ filterallunits ( [ [ f_side , amer ] , [ f_nation , nation_american ] , [ f_type , unit_building ] , f_not , [ f_btype , b_factory ] ] ) ;
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: LD_VAR 0 2
17640: PUSH
17641: LD_INT 22
17643: PUSH
17644: LD_EXP 2
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 23
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 21
17665: PUSH
17666: LD_INT 3
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 3
17675: PUSH
17676: LD_INT 30
17678: PUSH
17679: LD_INT 3
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: PPUSH
17693: CALL_OW 69
17697: ADD
17698: ST_TO_ADDR
// tmzo = [ ] ;
17699: LD_ADDR_VAR 0 4
17703: PUSH
17704: EMPTY
17705: ST_TO_ADDR
// for bz in tmz do
17706: LD_ADDR_VAR 0 3
17710: PUSH
17711: LD_VAR 0 2
17715: PUSH
17716: FOR_IN
17717: IFFALSE 18074
// case getbtype ( bz ) of b_lab_basic , b_lab_weapon :
17719: LD_VAR 0 3
17723: PPUSH
17724: CALL_OW 266
17728: PUSH
17729: LD_INT 9
17731: DOUBLE
17732: EQUAL
17733: IFTRUE 17743
17735: LD_INT 10
17737: DOUBLE
17738: EQUAL
17739: IFTRUE 17743
17741: GO 17746
17743: POP
// begin end ; b_lab , b_lab_half , b_lab_full :
17744: GO 18072
17746: LD_INT 6
17748: DOUBLE
17749: EQUAL
17750: IFTRUE 17766
17752: LD_INT 7
17754: DOUBLE
17755: EQUAL
17756: IFTRUE 17766
17758: LD_INT 8
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17879
17766: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getlabkind ( bz , 1 ) , getlabkind ( bz , 2 ) ] ] ; b_bunker , b_turret :
17767: LD_ADDR_VAR 0 4
17771: PUSH
17772: LD_VAR 0 4
17776: PUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: CALL_OW 250
17786: PUSH
17787: LD_VAR 0 3
17791: PPUSH
17792: CALL_OW 251
17796: PUSH
17797: LD_VAR 0 3
17801: PPUSH
17802: CALL_OW 254
17806: PUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: CALL_OW 266
17816: PUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: CALL_OW 267
17826: PUSH
17827: LD_VAR 0 3
17831: PPUSH
17832: CALL_OW 248
17836: PUSH
17837: LD_VAR 0 3
17841: PPUSH
17842: LD_INT 1
17844: PPUSH
17845: CALL_OW 268
17849: PUSH
17850: LD_VAR 0 3
17854: PPUSH
17855: LD_INT 2
17857: PPUSH
17858: CALL_OW 268
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: PUSH
17873: EMPTY
17874: LIST
17875: ADD
17876: ST_TO_ADDR
17877: GO 18072
17879: LD_INT 32
17881: DOUBLE
17882: EQUAL
17883: IFTRUE 17893
17885: LD_INT 33
17887: DOUBLE
17888: EQUAL
17889: IFTRUE 17893
17891: GO 17989
17893: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getbweapon ( bz ) ] ] ; else
17894: LD_ADDR_VAR 0 4
17898: PUSH
17899: LD_VAR 0 4
17903: PUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: CALL_OW 250
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: CALL_OW 251
17923: PUSH
17924: LD_VAR 0 3
17928: PPUSH
17929: CALL_OW 254
17933: PUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: CALL_OW 266
17943: PUSH
17944: LD_VAR 0 3
17948: PPUSH
17949: CALL_OW 267
17953: PUSH
17954: LD_VAR 0 3
17958: PPUSH
17959: CALL_OW 248
17963: PUSH
17964: LD_VAR 0 3
17968: PPUSH
17969: CALL_OW 269
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: PUSH
17983: EMPTY
17984: LIST
17985: ADD
17986: ST_TO_ADDR
17987: GO 18072
17989: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) ] ] ; end ;
17990: LD_ADDR_VAR 0 4
17994: PUSH
17995: LD_VAR 0 4
17999: PUSH
18000: LD_VAR 0 3
18004: PPUSH
18005: CALL_OW 250
18009: PUSH
18010: LD_VAR 0 3
18014: PPUSH
18015: CALL_OW 251
18019: PUSH
18020: LD_VAR 0 3
18024: PPUSH
18025: CALL_OW 254
18029: PUSH
18030: LD_VAR 0 3
18034: PPUSH
18035: CALL_OW 266
18039: PUSH
18040: LD_VAR 0 3
18044: PPUSH
18045: CALL_OW 267
18049: PUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: CALL_OW 248
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: PUSH
18068: EMPTY
18069: LIST
18070: ADD
18071: ST_TO_ADDR
18072: GO 17716
18074: POP
18075: POP
// savevariable ( tmzo , Gamma2 ) ;
18076: LD_VAR 0 4
18080: PPUSH
18081: LD_STRING Gamma2
18083: PPUSH
18084: CALL_OW 39
// end ;
18088: LD_VAR 0 1
18092: RET
// var smejdi ; var zbytci ; export function from_prev_mis ; var tmp , tmp1 , tmz , tmz_ , tm_c , tm_e , tm_m , tm_s , tmp_c , tmp_e , tmp_m , tmp_s , tot , lab_done , retry ; var smery ; begin
18093: LD_INT 0
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
18110: PPUSH
18111: PPUSH
// uc_side = amer ;
18112: LD_ADDR_OWVAR 20
18116: PUSH
18117: LD_EXP 2
18121: ST_TO_ADDR
// uc_nation = nation_american ;
18122: LD_ADDR_OWVAR 21
18126: PUSH
18127: LD_INT 1
18129: ST_TO_ADDR
// return_time = 0 0$1 ;
18130: LD_ADDR_EXP 29
18134: PUSH
18135: LD_INT 35
18137: ST_TO_ADDR
// return_time_ = 0 0$1 ;
18138: LD_ADDR_EXP 30
18142: PUSH
18143: LD_INT 35
18145: ST_TO_ADDR
// othergamma2 = [ ] ;
18146: LD_ADDR_LOC 87
18150: PUSH
18151: EMPTY
18152: ST_TO_ADDR
// othergamma3 = [ ] ;
18153: LD_ADDR_LOC 88
18157: PUSH
18158: EMPTY
18159: ST_TO_ADDR
// otherunplaced = [ ] ;
18160: LD_ADDR_LOC 89
18164: PUSH
18165: EMPTY
18166: ST_TO_ADDR
// otherjmm = [ ] ;
18167: LD_ADDR_LOC 90
18171: PUSH
18172: EMPTY
18173: ST_TO_ADDR
// gamma2vip = [ ] ;
18174: LD_ADDR_LOC 92
18178: PUSH
18179: EMPTY
18180: ST_TO_ADDR
// gamma3vip = [ ] ;
18181: LD_ADDR_LOC 93
18185: PUSH
18186: EMPTY
18187: ST_TO_ADDR
// withjmmvip = [ ] ;
18188: LD_ADDR_LOC 94
18192: PUSH
18193: EMPTY
18194: ST_TO_ADDR
// withjmmlatevip = [ ] ;
18195: LD_ADDR_LOC 95
18199: PUSH
18200: EMPTY
18201: ST_TO_ADDR
// time = loadvariable ( Time , - 1 ) ;
18202: LD_ADDR_LOC 86
18206: PUSH
18207: LD_STRING Time
18209: PPUSH
18210: LD_INT 1
18212: NEG
18213: PPUSH
18214: CALL_OW 30
18218: ST_TO_ADDR
// if time = - 1 then
18219: LD_LOC 86
18223: PUSH
18224: LD_INT 1
18226: NEG
18227: EQUAL
18228: IFFALSE 18245
// buildquery ( neny Time , [ OK ] ) else
18230: LD_STRING neny Time
18232: PPUSH
18233: LD_STRING OK
18235: PUSH
18236: EMPTY
18237: LIST
18238: PPUSH
18239: CALL_OW 99
18243: GO 18301
// begin if time > 14 14$50 then
18245: LD_LOC 86
18249: PUSH
18250: LD_INT 31150
18252: GREATER
18253: IFFALSE 18263
// time = 14 14$50 ;
18255: LD_ADDR_LOC 86
18259: PUSH
18260: LD_INT 31150
18262: ST_TO_ADDR
// if time < 0 0$30 then
18263: LD_LOC 86
18267: PUSH
18268: LD_INT 1050
18270: LESS
18271: IFFALSE 18281
// time = 1 1$30 ;
18273: LD_ADDR_LOC 86
18277: PUSH
18278: LD_INT 3150
18280: ST_TO_ADDR
// return_time = time ;
18281: LD_ADDR_EXP 29
18285: PUSH
18286: LD_LOC 86
18290: ST_TO_ADDR
// return_time_ = time ;
18291: LD_ADDR_EXP 30
18295: PUSH
18296: LD_LOC 86
18300: ST_TO_ADDR
// end ; gamma2 = loadvariable ( Gamma2 , [ ] ) ;
18301: LD_ADDR_LOC 96
18305: PUSH
18306: LD_STRING Gamma2
18308: PPUSH
18309: EMPTY
18310: PPUSH
18311: CALL_OW 30
18315: ST_TO_ADDR
// if gamma2 = 0 then
18316: LD_LOC 96
18320: PUSH
18321: LD_INT 0
18323: EQUAL
18324: IFFALSE 18348
// buildquery ( [ neny Gamma2 , Gamma2 ] , [ OK ] ) ;
18326: LD_STRING neny Gamma2
18328: PUSH
18329: LD_LOC 96
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PPUSH
18338: LD_STRING OK
18340: PUSH
18341: EMPTY
18342: LIST
18343: PPUSH
18344: CALL_OW 99
// lab_done = false ;
18348: LD_ADDR_VAR 0 15
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// retry = [ ] ;
18356: LD_ADDR_VAR 0 16
18360: PUSH
18361: EMPTY
18362: ST_TO_ADDR
// for tmp in gamma2 do
18363: LD_ADDR_VAR 0 2
18367: PUSH
18368: LD_LOC 96
18372: PUSH
18373: FOR_IN
18374: IFFALSE 18947
// begin if tmp [ 1 ] = 38 and tmp [ 2 ] = 3 then
18376: LD_VAR 0 2
18380: PUSH
18381: LD_INT 1
18383: ARRAY
18384: PUSH
18385: LD_INT 38
18387: EQUAL
18388: PUSH
18389: LD_VAR 0 2
18393: PUSH
18394: LD_INT 2
18396: ARRAY
18397: PUSH
18398: LD_INT 3
18400: EQUAL
18401: AND
18402: IFFALSE 18406
// else
18404: GO 18945
// if tmp [ 1 ] = 40 and tmp [ 2 ] = 11 then
18406: LD_VAR 0 2
18410: PUSH
18411: LD_INT 1
18413: ARRAY
18414: PUSH
18415: LD_INT 40
18417: EQUAL
18418: PUSH
18419: LD_VAR 0 2
18423: PUSH
18424: LD_INT 2
18426: ARRAY
18427: PUSH
18428: LD_INT 11
18430: EQUAL
18431: AND
18432: IFFALSE 18436
// else
18434: GO 18945
// if tmp [ 1 ] = 52 and tmp [ 2 ] = 12 then
18436: LD_VAR 0 2
18440: PUSH
18441: LD_INT 1
18443: ARRAY
18444: PUSH
18445: LD_INT 52
18447: EQUAL
18448: PUSH
18449: LD_VAR 0 2
18453: PUSH
18454: LD_INT 2
18456: ARRAY
18457: PUSH
18458: LD_INT 12
18460: EQUAL
18461: AND
18462: IFFALSE 18466
// else
18464: GO 18945
// if tmp [ 4 ] = b_breastwork or tmp [ 4 ] = b_bunker or tmp [ 4 ] = b_factory or tmp [ 4 ] = b_workshop or tmp [ 4 ] = b_depot or tmp [ 4 ] = b_warehouse then
18466: LD_VAR 0 2
18470: PUSH
18471: LD_INT 4
18473: ARRAY
18474: PUSH
18475: LD_INT 31
18477: EQUAL
18478: PUSH
18479: LD_VAR 0 2
18483: PUSH
18484: LD_INT 4
18486: ARRAY
18487: PUSH
18488: LD_INT 32
18490: EQUAL
18491: OR
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: LD_INT 4
18500: ARRAY
18501: PUSH
18502: LD_INT 3
18504: EQUAL
18505: OR
18506: PUSH
18507: LD_VAR 0 2
18511: PUSH
18512: LD_INT 4
18514: ARRAY
18515: PUSH
18516: LD_INT 2
18518: EQUAL
18519: OR
18520: PUSH
18521: LD_VAR 0 2
18525: PUSH
18526: LD_INT 4
18528: ARRAY
18529: PUSH
18530: LD_INT 0
18532: EQUAL
18533: OR
18534: PUSH
18535: LD_VAR 0 2
18539: PUSH
18540: LD_INT 4
18542: ARRAY
18543: PUSH
18544: LD_INT 1
18546: EQUAL
18547: OR
18548: IFFALSE 18552
// else
18550: GO 18945
// if ( tmp [ 4 ] = b_lab or tmp [ 4 ] = b_lab_half or tmp [ 4 ] = b_lab_full ) and not lab_done then
18552: LD_VAR 0 2
18556: PUSH
18557: LD_INT 4
18559: ARRAY
18560: PUSH
18561: LD_INT 6
18563: EQUAL
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: LD_INT 4
18572: ARRAY
18573: PUSH
18574: LD_INT 7
18576: EQUAL
18577: OR
18578: PUSH
18579: LD_VAR 0 2
18583: PUSH
18584: LD_INT 4
18586: ARRAY
18587: PUSH
18588: LD_INT 8
18590: EQUAL
18591: OR
18592: PUSH
18593: LD_VAR 0 15
18597: NOT
18598: AND
18599: IFFALSE 18727
// begin uc_direction = tmp [ 3 ] ;
18601: LD_ADDR_OWVAR 24
18605: PUSH
18606: LD_VAR 0 2
18610: PUSH
18611: LD_INT 3
18613: ARRAY
18614: ST_TO_ADDR
// bc_type = b_lab_full ;
18615: LD_ADDR_OWVAR 42
18619: PUSH
18620: LD_INT 8
18622: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
18623: LD_ADDR_OWVAR 43
18627: PUSH
18628: LD_VAR 0 2
18632: PUSH
18633: LD_INT 5
18635: ARRAY
18636: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
18637: LD_ADDR_OWVAR 44
18641: PUSH
18642: LD_INT 10
18644: ST_TO_ADDR
// bc_kind2 = b_lab_opto ;
18645: LD_ADDR_OWVAR 45
18649: PUSH
18650: LD_INT 15
18652: ST_TO_ADDR
// tmp1 = createbuilding ;
18653: LD_ADDR_VAR 0 3
18657: PUSH
18658: CALL_OW 46
18662: ST_TO_ADDR
// if not placeunitxy ( tmp1 , tmp [ 1 ] , tmp [ 2 ] , false ) then
18663: LD_VAR 0 3
18667: PPUSH
18668: LD_VAR 0 2
18672: PUSH
18673: LD_INT 1
18675: ARRAY
18676: PPUSH
18677: LD_VAR 0 2
18681: PUSH
18682: LD_INT 2
18684: ARRAY
18685: PPUSH
18686: LD_INT 0
18688: PPUSH
18689: CALL_OW 48
18693: NOT
18694: IFFALSE 18717
// retry = retry ^ [ tmp ] else
18696: LD_ADDR_VAR 0 16
18700: PUSH
18701: LD_VAR 0 16
18705: PUSH
18706: LD_VAR 0 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: ADD
18714: ST_TO_ADDR
18715: GO 18725
// lab_done = true ;
18717: LD_ADDR_VAR 0 15
18721: PUSH
18722: LD_INT 1
18724: ST_TO_ADDR
// end else
18725: GO 18945
// if tmp [ 4 ] = b_armoury then
18727: LD_VAR 0 2
18731: PUSH
18732: LD_INT 4
18734: ARRAY
18735: PUSH
18736: LD_INT 4
18738: EQUAL
18739: IFFALSE 18841
// begin uc_direction = tmp [ 3 ] ;
18741: LD_ADDR_OWVAR 24
18745: PUSH
18746: LD_VAR 0 2
18750: PUSH
18751: LD_INT 3
18753: ARRAY
18754: ST_TO_ADDR
// bc_type = b_barracks ;
18755: LD_ADDR_OWVAR 42
18759: PUSH
18760: LD_INT 5
18762: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
18763: LD_ADDR_OWVAR 43
18767: PUSH
18768: LD_VAR 0 2
18772: PUSH
18773: LD_INT 5
18775: ARRAY
18776: ST_TO_ADDR
// tmp1 = createbuilding ;
18777: LD_ADDR_VAR 0 3
18781: PUSH
18782: CALL_OW 46
18786: ST_TO_ADDR
// if not placeunitxy ( tmp1 , tmp [ 1 ] , tmp [ 2 ] , false ) then
18787: LD_VAR 0 3
18791: PPUSH
18792: LD_VAR 0 2
18796: PUSH
18797: LD_INT 1
18799: ARRAY
18800: PPUSH
18801: LD_VAR 0 2
18805: PUSH
18806: LD_INT 2
18808: ARRAY
18809: PPUSH
18810: LD_INT 0
18812: PPUSH
18813: CALL_OW 48
18817: NOT
18818: IFFALSE 18839
// retry = retry ^ [ tmp ] ;
18820: LD_ADDR_VAR 0 16
18824: PUSH
18825: LD_VAR 0 16
18829: PUSH
18830: LD_VAR 0 2
18834: PUSH
18835: EMPTY
18836: LIST
18837: ADD
18838: ST_TO_ADDR
// end else
18839: GO 18945
// begin uc_direction = tmp [ 3 ] ;
18841: LD_ADDR_OWVAR 24
18845: PUSH
18846: LD_VAR 0 2
18850: PUSH
18851: LD_INT 3
18853: ARRAY
18854: ST_TO_ADDR
// bc_type = tmp [ 4 ] ;
18855: LD_ADDR_OWVAR 42
18859: PUSH
18860: LD_VAR 0 2
18864: PUSH
18865: LD_INT 4
18867: ARRAY
18868: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
18869: LD_ADDR_OWVAR 43
18873: PUSH
18874: LD_VAR 0 2
18878: PUSH
18879: LD_INT 5
18881: ARRAY
18882: ST_TO_ADDR
// tmp1 = createbuilding ;
18883: LD_ADDR_VAR 0 3
18887: PUSH
18888: CALL_OW 46
18892: ST_TO_ADDR
// if not placeunitxy ( tmp1 , tmp [ 1 ] , tmp [ 2 ] , false ) then
18893: LD_VAR 0 3
18897: PPUSH
18898: LD_VAR 0 2
18902: PUSH
18903: LD_INT 1
18905: ARRAY
18906: PPUSH
18907: LD_VAR 0 2
18911: PUSH
18912: LD_INT 2
18914: ARRAY
18915: PPUSH
18916: LD_INT 0
18918: PPUSH
18919: CALL_OW 48
18923: NOT
18924: IFFALSE 18945
// retry = retry ^ [ tmp ] ;
18926: LD_ADDR_VAR 0 16
18930: PUSH
18931: LD_VAR 0 16
18935: PUSH
18936: LD_VAR 0 2
18940: PUSH
18941: EMPTY
18942: LIST
18943: ADD
18944: ST_TO_ADDR
// end ; end ;
18945: GO 18373
18947: POP
18948: POP
// bc_type = b_control_tower ;
18949: LD_ADDR_OWVAR 42
18953: PUSH
18954: LD_INT 36
18956: ST_TO_ADDR
// bc_level = 4 ;
18957: LD_ADDR_OWVAR 43
18961: PUSH
18962: LD_INT 4
18964: ST_TO_ADDR
// smery = [ [ [ 48 , 16 ] , [ 49 , 16 ] , [ 50 , 16 ] , [ 50 , 15 ] , [ 50 , 14 ] , [ 50 , 13 ] , [ 49 , 12 ] , [ 48 , 11 ] , [ 47 , 11 ] , [ 46 , 11 ] , [ 45 , 11 ] , [ 45 , 12 ] , [ 45 , 13 ] , [ 46 , 14 ] , [ 47 , 15 ] ] , [ [ 48 , 16 ] , [ 49 , 16 ] , [ 50 , 16 ] , [ 51 , 16 ] , [ 51 , 15 ] , [ 51 , 14 ] , [ 50 , 13 ] , [ 49 , 12 ] , [ 48 , 11 ] , [ 47 , 11 ] , [ 46 , 11 ] , [ 46 , 12 ] , [ 46 , 13 ] , [ 46 , 14 ] , [ 47 , 15 ] ] , [ [ 49 , 17 ] , [ 50 , 17 ] , [ 51 , 17 ] , [ 51 , 16 ] , [ 51 , 15 ] , [ 51 , 14 ] , [ 50 , 13 ] , [ 49 , 12 ] , [ 48 , 12 ] , [ 47 , 12 ] , [ 46 , 12 ] , [ 46 , 13 ] , [ 46 , 14 ] , [ 47 , 15 ] , [ 48 , 16 ] ] , [ [ 48 , 17 ] , [ 49 , 17 ] , [ 50 , 17 ] , [ 51 , 17 ] , [ 51 , 16 ] , [ 51 , 15 ] , [ 50 , 14 ] , [ 49 , 13 ] , [ 48 , 12 ] , [ 47 , 12 ] , [ 46 , 12 ] , [ 46 , 13 ] , [ 46 , 14 ] , [ 46 , 15 ] , [ 47 , 16 ] ] , [ [ 48 , 17 ] , [ 49 , 17 ] , [ 50 , 17 ] , [ 50 , 16 ] , [ 50 , 15 ] , [ 50 , 14 ] , [ 49 , 13 ] , [ 48 , 12 ] , [ 47 , 12 ] , [ 46 , 12 ] , [ 45 , 12 ] , [ 45 , 13 ] , [ 45 , 14 ] , [ 46 , 15 ] , [ 47 , 16 ] ] , [ [ 47 , 16 ] , [ 48 , 16 ] , [ 49 , 16 ] , [ 50 , 16 ] , [ 50 , 15 ] , [ 50 , 14 ] , [ 49 , 13 ] , [ 48 , 12 ] , [ 47 , 11 ] , [ 46 , 11 ] , [ 45 , 11 ] , [ 45 , 12 ] , [ 45 , 13 ] , [ 45 , 14 ] , [ 46 , 15 ] ] ] ;
18965: LD_ADDR_VAR 0 17
18969: PUSH
18970: LD_INT 48
18972: PUSH
18973: LD_INT 16
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 49
18982: PUSH
18983: LD_INT 16
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 50
18992: PUSH
18993: LD_INT 16
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 50
19002: PUSH
19003: LD_INT 15
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 50
19012: PUSH
19013: LD_INT 14
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 50
19022: PUSH
19023: LD_INT 13
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 49
19032: PUSH
19033: LD_INT 12
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 48
19042: PUSH
19043: LD_INT 11
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 47
19052: PUSH
19053: LD_INT 11
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 46
19062: PUSH
19063: LD_INT 11
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 45
19072: PUSH
19073: LD_INT 11
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 45
19082: PUSH
19083: LD_INT 12
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 45
19092: PUSH
19093: LD_INT 13
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 46
19102: PUSH
19103: LD_INT 14
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 47
19112: PUSH
19113: LD_INT 15
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 48
19139: PUSH
19140: LD_INT 16
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 49
19149: PUSH
19150: LD_INT 16
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 50
19159: PUSH
19160: LD_INT 16
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 51
19169: PUSH
19170: LD_INT 16
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 51
19179: PUSH
19180: LD_INT 15
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 51
19189: PUSH
19190: LD_INT 14
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 50
19199: PUSH
19200: LD_INT 13
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 49
19209: PUSH
19210: LD_INT 12
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 48
19219: PUSH
19220: LD_INT 11
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 47
19229: PUSH
19230: LD_INT 11
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 46
19239: PUSH
19240: LD_INT 11
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 46
19249: PUSH
19250: LD_INT 12
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 46
19259: PUSH
19260: LD_INT 13
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 46
19269: PUSH
19270: LD_INT 14
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 47
19279: PUSH
19280: LD_INT 15
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 49
19306: PUSH
19307: LD_INT 17
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 50
19316: PUSH
19317: LD_INT 17
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 51
19326: PUSH
19327: LD_INT 17
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 51
19336: PUSH
19337: LD_INT 16
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 51
19346: PUSH
19347: LD_INT 15
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 51
19356: PUSH
19357: LD_INT 14
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 50
19366: PUSH
19367: LD_INT 13
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 49
19376: PUSH
19377: LD_INT 12
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 48
19386: PUSH
19387: LD_INT 12
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 47
19396: PUSH
19397: LD_INT 12
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 46
19406: PUSH
19407: LD_INT 12
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 46
19416: PUSH
19417: LD_INT 13
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 46
19426: PUSH
19427: LD_INT 14
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 47
19436: PUSH
19437: LD_INT 15
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 48
19446: PUSH
19447: LD_INT 16
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 48
19473: PUSH
19474: LD_INT 17
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 49
19483: PUSH
19484: LD_INT 17
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 50
19493: PUSH
19494: LD_INT 17
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 51
19503: PUSH
19504: LD_INT 17
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 51
19513: PUSH
19514: LD_INT 16
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 51
19523: PUSH
19524: LD_INT 15
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 50
19533: PUSH
19534: LD_INT 14
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 49
19543: PUSH
19544: LD_INT 13
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 48
19553: PUSH
19554: LD_INT 12
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 47
19563: PUSH
19564: LD_INT 12
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 46
19573: PUSH
19574: LD_INT 12
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 46
19583: PUSH
19584: LD_INT 13
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 46
19593: PUSH
19594: LD_INT 14
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 46
19603: PUSH
19604: LD_INT 15
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 47
19613: PUSH
19614: LD_INT 16
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 48
19640: PUSH
19641: LD_INT 17
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 49
19650: PUSH
19651: LD_INT 17
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 50
19660: PUSH
19661: LD_INT 17
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 50
19670: PUSH
19671: LD_INT 16
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 50
19680: PUSH
19681: LD_INT 15
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 50
19690: PUSH
19691: LD_INT 14
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 49
19700: PUSH
19701: LD_INT 13
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 48
19710: PUSH
19711: LD_INT 12
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 47
19720: PUSH
19721: LD_INT 12
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 46
19730: PUSH
19731: LD_INT 12
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 45
19740: PUSH
19741: LD_INT 12
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 45
19750: PUSH
19751: LD_INT 13
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 45
19760: PUSH
19761: LD_INT 14
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 46
19770: PUSH
19771: LD_INT 15
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 47
19780: PUSH
19781: LD_INT 16
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 47
19807: PUSH
19808: LD_INT 16
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 48
19817: PUSH
19818: LD_INT 16
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 49
19827: PUSH
19828: LD_INT 16
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 50
19837: PUSH
19838: LD_INT 16
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 50
19847: PUSH
19848: LD_INT 15
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 50
19857: PUSH
19858: LD_INT 14
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 49
19867: PUSH
19868: LD_INT 13
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 48
19877: PUSH
19878: LD_INT 12
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 47
19887: PUSH
19888: LD_INT 11
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 46
19897: PUSH
19898: LD_INT 11
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 45
19907: PUSH
19908: LD_INT 11
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 45
19917: PUSH
19918: LD_INT 12
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 45
19927: PUSH
19928: LD_INT 13
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 45
19937: PUSH
19938: LD_INT 14
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 46
19947: PUSH
19948: LD_INT 15
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: ST_TO_ADDR
// tmp1 = [ ] ;
19980: LD_ADDR_VAR 0 3
19984: PUSH
19985: EMPTY
19986: ST_TO_ADDR
// for tmz = 1 to 6 do
19987: LD_ADDR_VAR 0 4
19991: PUSH
19992: DOUBLE
19993: LD_INT 1
19995: DEC
19996: ST_TO_ADDR
19997: LD_INT 6
19999: PUSH
20000: FOR_TO
20001: IFFALSE 20131
// begin tm_c = false ;
20003: LD_ADDR_VAR 0 6
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// for tmz_ = 1 to 15 do
20011: LD_ADDR_VAR 0 5
20015: PUSH
20016: DOUBLE
20017: LD_INT 1
20019: DEC
20020: ST_TO_ADDR
20021: LD_INT 15
20023: PUSH
20024: FOR_TO
20025: IFFALSE 20087
// if hexinfo ( smery [ tmz ] [ tmz_ ] [ 1 ] , smery [ tmz ] [ tmz_ ] [ 2 ] ) then
20027: LD_VAR 0 17
20031: PUSH
20032: LD_VAR 0 4
20036: ARRAY
20037: PUSH
20038: LD_VAR 0 5
20042: ARRAY
20043: PUSH
20044: LD_INT 1
20046: ARRAY
20047: PPUSH
20048: LD_VAR 0 17
20052: PUSH
20053: LD_VAR 0 4
20057: ARRAY
20058: PUSH
20059: LD_VAR 0 5
20063: ARRAY
20064: PUSH
20065: LD_INT 2
20067: ARRAY
20068: PPUSH
20069: CALL_OW 428
20073: IFFALSE 20085
// begin tm_c = true ;
20075: LD_ADDR_VAR 0 6
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// break ;
20083: GO 20087
// end ;
20085: GO 20024
20087: POP
20088: POP
// if not tm_c then
20089: LD_VAR 0 6
20093: NOT
20094: IFFALSE 20121
// tmp1 = tmp1 ^ [ tmz - 1 ] else
20096: LD_ADDR_VAR 0 3
20100: PUSH
20101: LD_VAR 0 3
20105: PUSH
20106: LD_VAR 0 4
20110: PUSH
20111: LD_INT 1
20113: MINUS
20114: PUSH
20115: EMPTY
20116: LIST
20117: ADD
20118: ST_TO_ADDR
20119: GO 20129
// tm_c = false ;
20121: LD_ADDR_VAR 0 6
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// end ;
20129: GO 20000
20131: POP
20132: POP
// tm_c = false ;
20133: LD_ADDR_VAR 0 6
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// for tmz in tmp1 do
20141: LD_ADDR_VAR 0 4
20145: PUSH
20146: LD_VAR 0 3
20150: PUSH
20151: FOR_IN
20152: IFFALSE 20217
// begin uc_direction = tmz ;
20154: LD_ADDR_OWVAR 24
20158: PUSH
20159: LD_VAR 0 4
20163: ST_TO_ADDR
// ambctwr0 = createbuilding ;
20164: LD_ADDR_LOC 97
20168: PUSH
20169: CALL_OW 46
20173: ST_TO_ADDR
// if placeunitxy ( ambctwr0 , 48 , 14 , false ) then
20174: LD_LOC 97
20178: PPUSH
20179: LD_INT 48
20181: PPUSH
20182: LD_INT 14
20184: PPUSH
20185: LD_INT 0
20187: PPUSH
20188: CALL_OW 48
20192: IFFALSE 20206
// begin tm_c = true ;
20194: LD_ADDR_VAR 0 6
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// break ;
20202: GO 20217
// end else
20204: GO 20215
// destroyunit ( ambctwr0 ) ;
20206: LD_LOC 97
20210: PPUSH
20211: CALL_OW 65
// end ;
20215: GO 20151
20217: POP
20218: POP
// for tmp in retry do
20219: LD_ADDR_VAR 0 2
20223: PUSH
20224: LD_VAR 0 16
20228: PUSH
20229: FOR_IN
20230: IFFALSE 20560
// begin if ( tmp [ 4 ] in [ b_lab , b_lab_half , b_lab_full ] ) and not lab_done then
20232: LD_VAR 0 2
20236: PUSH
20237: LD_INT 4
20239: ARRAY
20240: PUSH
20241: LD_INT 6
20243: PUSH
20244: LD_INT 7
20246: PUSH
20247: LD_INT 8
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: IN
20255: PUSH
20256: LD_VAR 0 15
20260: NOT
20261: AND
20262: IFFALSE 20369
// begin uc_direction = tmp [ 3 ] ;
20264: LD_ADDR_OWVAR 24
20268: PUSH
20269: LD_VAR 0 2
20273: PUSH
20274: LD_INT 3
20276: ARRAY
20277: ST_TO_ADDR
// bc_type = b_lab_full ;
20278: LD_ADDR_OWVAR 42
20282: PUSH
20283: LD_INT 8
20285: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
20286: LD_ADDR_OWVAR 43
20290: PUSH
20291: LD_VAR 0 2
20295: PUSH
20296: LD_INT 5
20298: ARRAY
20299: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
20300: LD_ADDR_OWVAR 44
20304: PUSH
20305: LD_INT 10
20307: ST_TO_ADDR
// bc_kind2 = b_lab_opto ;
20308: LD_ADDR_OWVAR 45
20312: PUSH
20313: LD_INT 15
20315: ST_TO_ADDR
// tmp1 = createbuilding ;
20316: LD_ADDR_VAR 0 3
20320: PUSH
20321: CALL_OW 46
20325: ST_TO_ADDR
// if not placeunitarea ( tmp1 , ambase , false ) then
20326: LD_VAR 0 3
20330: PPUSH
20331: LD_INT 8
20333: PPUSH
20334: LD_INT 0
20336: PPUSH
20337: CALL_OW 49
20341: NOT
20342: IFFALSE 20359
// buildquery ( lab nebude , [ OK ] ) else
20344: LD_STRING lab nebude
20346: PPUSH
20347: LD_STRING OK
20349: PUSH
20350: EMPTY
20351: LIST
20352: PPUSH
20353: CALL_OW 99
20357: GO 20367
// lab_done = true ;
20359: LD_ADDR_VAR 0 15
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// end else
20367: GO 20558
// if tmp [ 4 ] = b_armoury then
20369: LD_VAR 0 2
20373: PUSH
20374: LD_INT 4
20376: ARRAY
20377: PUSH
20378: LD_INT 4
20380: EQUAL
20381: IFFALSE 20462
// begin uc_direction = tmp [ 3 ] ;
20383: LD_ADDR_OWVAR 24
20387: PUSH
20388: LD_VAR 0 2
20392: PUSH
20393: LD_INT 3
20395: ARRAY
20396: ST_TO_ADDR
// bc_type = b_barracks ;
20397: LD_ADDR_OWVAR 42
20401: PUSH
20402: LD_INT 5
20404: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
20405: LD_ADDR_OWVAR 43
20409: PUSH
20410: LD_VAR 0 2
20414: PUSH
20415: LD_INT 5
20417: ARRAY
20418: ST_TO_ADDR
// tmp1 = createbuilding ;
20419: LD_ADDR_VAR 0 3
20423: PUSH
20424: CALL_OW 46
20428: ST_TO_ADDR
// if not placeunitarea ( tmp1 , ambase , false ) then
20429: LD_VAR 0 3
20433: PPUSH
20434: LD_INT 8
20436: PPUSH
20437: LD_INT 0
20439: PPUSH
20440: CALL_OW 49
20444: NOT
20445: IFFALSE 20460
// buildquery ( barracks nebudou , [ OK ] ) ;
20447: LD_STRING barracks nebudou
20449: PPUSH
20450: LD_STRING OK
20452: PUSH
20453: EMPTY
20454: LIST
20455: PPUSH
20456: CALL_OW 99
// end else
20460: GO 20558
// begin uc_direction = tmp [ 3 ] ;
20462: LD_ADDR_OWVAR 24
20466: PUSH
20467: LD_VAR 0 2
20471: PUSH
20472: LD_INT 3
20474: ARRAY
20475: ST_TO_ADDR
// bc_type = tmp [ 4 ] ;
20476: LD_ADDR_OWVAR 42
20480: PUSH
20481: LD_VAR 0 2
20485: PUSH
20486: LD_INT 4
20488: ARRAY
20489: ST_TO_ADDR
// bc_level = tmp [ 5 ] ;
20490: LD_ADDR_OWVAR 43
20494: PUSH
20495: LD_VAR 0 2
20499: PUSH
20500: LD_INT 5
20502: ARRAY
20503: ST_TO_ADDR
// tmp1 = createbuilding ;
20504: LD_ADDR_VAR 0 3
20508: PUSH
20509: CALL_OW 46
20513: ST_TO_ADDR
// if not placeunitarea ( tmp1 , ambase , false ) then
20514: LD_VAR 0 3
20518: PPUSH
20519: LD_INT 8
20521: PPUSH
20522: LD_INT 0
20524: PPUSH
20525: CALL_OW 49
20529: NOT
20530: IFFALSE 20558
// buildquery ( [ tmp [ 4 ] , nebude ] , [ OK ] ) ;
20532: LD_VAR 0 2
20536: PUSH
20537: LD_INT 4
20539: ARRAY
20540: PUSH
20541: LD_STRING nebude
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PPUSH
20548: LD_STRING OK
20550: PUSH
20551: EMPTY
20552: LIST
20553: PPUSH
20554: CALL_OW 99
// end ; end ;
20558: GO 20229
20560: POP
20561: POP
// if not tm_c then
20562: LD_VAR 0 6
20566: NOT
20567: IFFALSE 20600
// if not placeunitarea ( ambctwr0 , ambase , false ) then
20569: LD_LOC 97
20573: PPUSH
20574: LD_INT 8
20576: PPUSH
20577: LD_INT 0
20579: PPUSH
20580: CALL_OW 49
20584: NOT
20585: IFFALSE 20600
// buildquery ( control tower nebude , [ OK ] ) ;
20587: LD_STRING control tower nebude
20589: PPUSH
20590: LD_STRING OK
20592: PUSH
20593: EMPTY
20594: LIST
20595: PPUSH
20596: CALL_OW 99
// if not testcharacters ( otherGamma2 ) or not checkcharacterset ( otherGamma2 ) then
20600: LD_STRING otherGamma2
20602: PPUSH
20603: CALL_OW 28
20607: NOT
20608: PUSH
20609: LD_STRING otherGamma2
20611: PPUSH
20612: CALL_OW 29
20616: NOT
20617: OR
20618: IFFALSE 20622
// else
20620: GO 20635
// othergamma2 = createcharacterset ( otherGamma2 ) ;
20622: LD_ADDR_LOC 87
20626: PUSH
20627: LD_STRING otherGamma2
20629: PPUSH
20630: CALL_OW 31
20634: ST_TO_ADDR
// if not testcharacters ( otherDelta ) or not checkcharacterset ( otherDelta ) then
20635: LD_STRING otherDelta
20637: PPUSH
20638: CALL_OW 28
20642: NOT
20643: PUSH
20644: LD_STRING otherDelta
20646: PPUSH
20647: CALL_OW 29
20651: NOT
20652: OR
20653: IFFALSE 20657
// else
20655: GO 20670
// othergamma3 = createcharacterset ( otherDelta ) ;
20657: LD_ADDR_LOC 88
20661: PUSH
20662: LD_STRING otherDelta
20664: PPUSH
20665: CALL_OW 31
20669: ST_TO_ADDR
// if not testcharacters ( otherUnplaced ) or not checkcharacterset ( otherUnplaced ) then
20670: LD_STRING otherUnplaced
20672: PPUSH
20673: CALL_OW 28
20677: NOT
20678: PUSH
20679: LD_STRING otherUnplaced
20681: PPUSH
20682: CALL_OW 29
20686: NOT
20687: OR
20688: IFFALSE 20692
// else
20690: GO 20705
// otherunplaced = createcharacterset ( otherUnplaced ) ;
20692: LD_ADDR_LOC 89
20696: PUSH
20697: LD_STRING otherUnplaced
20699: PPUSH
20700: CALL_OW 31
20704: ST_TO_ADDR
// if not testcharacters ( otherJMM ) or not checkcharacterset ( otherJMM ) then
20705: LD_STRING otherJMM
20707: PPUSH
20708: CALL_OW 28
20712: NOT
20713: PUSH
20714: LD_STRING otherJMM
20716: PPUSH
20717: CALL_OW 29
20721: NOT
20722: OR
20723: IFFALSE 20727
// else
20725: GO 20740
// otherjmm = createcharacterset ( otherJMM ) ;
20727: LD_ADDR_LOC 90
20731: PUSH
20732: LD_STRING otherJMM
20734: PPUSH
20735: CALL_OW 31
20739: ST_TO_ADDR
// if not testcharacters ( otherLateJMM ) or not checkcharacterset ( otherLateJMM ) then
20740: LD_STRING otherLateJMM
20742: PPUSH
20743: CALL_OW 28
20747: NOT
20748: PUSH
20749: LD_STRING otherLateJMM
20751: PPUSH
20752: CALL_OW 29
20756: NOT
20757: OR
20758: IFFALSE 20762
// else
20760: GO 20775
// otherlatejmm = createcharacterset ( otherLateJMM ) ;
20762: LD_ADDR_LOC 91
20766: PUSH
20767: LD_STRING otherLateJMM
20769: PPUSH
20770: CALL_OW 31
20774: ST_TO_ADDR
// rh = newcharacter ( Harisson ) ;
20775: LD_ADDR_EXP 15
20779: PUSH
20780: LD_STRING Harisson
20782: PPUSH
20783: CALL_OW 25
20787: ST_TO_ADDR
// if not rh then
20788: LD_EXP 15
20792: NOT
20793: IFFALSE 20808
// buildquery ( neny Harisson , [ OK ] ) ;
20795: LD_STRING neny Harisson
20797: PPUSH
20798: LD_STRING OK
20800: PUSH
20801: EMPTY
20802: LIST
20803: PPUSH
20804: CALL_OW 99
// if testcharacters ( JMM ) and checkcharacterset ( JMM ) then
20808: LD_STRING JMM
20810: PPUSH
20811: CALL_OW 28
20815: PUSH
20816: LD_STRING JMM
20818: PPUSH
20819: CALL_OW 29
20823: AND
20824: IFFALSE 20844
// john_ = createcharacterwithclass ( JMM , class_soldier ) else
20826: LD_ADDR_EXP 20
20830: PUSH
20831: LD_STRING JMM
20833: PPUSH
20834: LD_INT 1
20836: PPUSH
20837: CALL_OW 35
20841: ST_TO_ADDR
20842: GO 20857
// buildquery ( neny JMM , [ OK ] ) ;
20844: LD_STRING neny JMM
20846: PPUSH
20847: LD_STRING OK
20849: PUSH
20850: EMPTY
20851: LIST
20852: PPUSH
20853: CALL_OW 99
// powel = newcharacter ( Powell ) ;
20857: LD_ADDR_EXP 16
20861: PUSH
20862: LD_STRING Powell
20864: PPUSH
20865: CALL_OW 25
20869: ST_TO_ADDR
// if not powel then
20870: LD_EXP 16
20874: NOT
20875: IFFALSE 20890
// buildquery ( neny Powell , [ OK ] ) ;
20877: LD_STRING neny Powell
20879: PPUSH
20880: LD_STRING OK
20882: PUSH
20883: EMPTY
20884: LIST
20885: PPUSH
20886: CALL_OW 99
// gamma2commander = loadvariable ( Gamma2Commander , 0 ) ;
20890: LD_ADDR_EXP 46
20894: PUSH
20895: LD_STRING Gamma2Commander
20897: PPUSH
20898: LD_INT 0
20900: PPUSH
20901: CALL_OW 30
20905: ST_TO_ADDR
// if not gamma2commander then
20906: LD_EXP 46
20910: NOT
20911: IFFALSE 20926
// buildquery ( neny Gamma2Commander , [ OK ] ) ;
20913: LD_STRING neny Gamma2Commander
20915: PPUSH
20916: LD_STRING OK
20918: PUSH
20919: EMPTY
20920: LIST
20921: PPUSH
20922: CALL_OW 99
// lucy = 0 ;
20926: LD_ADDR_EXP 31
20930: PUSH
20931: LD_INT 0
20933: ST_TO_ADDR
// brown = 0 ;
20934: LD_ADDR_EXP 32
20938: PUSH
20939: LD_INT 0
20941: ST_TO_ADDR
// vanh = 0 ;
20942: LD_ADDR_EXP 33
20946: PUSH
20947: LD_INT 0
20949: ST_TO_ADDR
// if not testcharacters ( Donaldson ) or not checkcharacterset ( Donaldson ) then
20950: LD_STRING Donaldson
20952: PPUSH
20953: CALL_OW 28
20957: NOT
20958: PUSH
20959: LD_STRING Donaldson
20961: PPUSH
20962: CALL_OW 29
20966: NOT
20967: OR
20968: IFFALSE 20980
// lucy = 0 else
20970: LD_ADDR_EXP 31
20974: PUSH
20975: LD_INT 0
20977: ST_TO_ADDR
20978: GO 21034
// begin lucy = createcharacter ( Donaldson ) ;
20980: LD_ADDR_EXP 31
20984: PUSH
20985: LD_STRING Donaldson
20987: PPUSH
20988: CALL_OW 34
20992: ST_TO_ADDR
// lucyloc = loadvariable ( DonaldsonLoc , - 1 ) ;
20993: LD_ADDR_EXP 42
20997: PUSH
20998: LD_STRING DonaldsonLoc
21000: PPUSH
21001: LD_INT 1
21003: NEG
21004: PPUSH
21005: CALL_OW 30
21009: ST_TO_ADDR
// if lucyloc = - 1 then
21010: LD_EXP 42
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: EQUAL
21019: IFFALSE 21034
// buildquery ( neny DonaldsonLoc , [ OK ] ) ;
21021: LD_STRING neny DonaldsonLoc
21023: PPUSH
21024: LD_STRING OK
21026: PUSH
21027: EMPTY
21028: LIST
21029: PPUSH
21030: CALL_OW 99
// end ; if not testcharacters ( Brown ) or not checkcharacterset ( Brown ) then
21034: LD_STRING Brown
21036: PPUSH
21037: CALL_OW 28
21041: NOT
21042: PUSH
21043: LD_STRING Brown
21045: PPUSH
21046: CALL_OW 29
21050: NOT
21051: OR
21052: IFFALSE 21064
// brown = 0 else
21054: LD_ADDR_EXP 32
21058: PUSH
21059: LD_INT 0
21061: ST_TO_ADDR
21062: GO 21118
// begin brown = createcharacter ( Brown ) ;
21064: LD_ADDR_EXP 32
21068: PUSH
21069: LD_STRING Brown
21071: PPUSH
21072: CALL_OW 34
21076: ST_TO_ADDR
// brownloc = loadvariable ( BrownLoc , - 1 ) ;
21077: LD_ADDR_EXP 43
21081: PUSH
21082: LD_STRING BrownLoc
21084: PPUSH
21085: LD_INT 1
21087: NEG
21088: PPUSH
21089: CALL_OW 30
21093: ST_TO_ADDR
// if brownloc = - 1 then
21094: LD_EXP 43
21098: PUSH
21099: LD_INT 1
21101: NEG
21102: EQUAL
21103: IFFALSE 21118
// buildquery ( neny BrownLoc , [ OK ] ) ;
21105: LD_STRING neny BrownLoc
21107: PPUSH
21108: LD_STRING OK
21110: PUSH
21111: EMPTY
21112: LIST
21113: PPUSH
21114: CALL_OW 99
// end ; vanh = newcharacter ( VanHouten ) ;
21118: LD_ADDR_EXP 33
21122: PUSH
21123: LD_STRING VanHouten
21125: PPUSH
21126: CALL_OW 25
21130: ST_TO_ADDR
// case gamma2commander of 1 :
21131: LD_EXP 46
21135: PUSH
21136: LD_INT 1
21138: DOUBLE
21139: EQUAL
21140: IFTRUE 21144
21142: GO 21179
21144: POP
// if not lucy then
21145: LD_EXP 31
21149: NOT
21150: IFFALSE 21167
// buildquery ( neny Donaldson , [ OK ] ) else
21152: LD_STRING neny Donaldson
21154: PPUSH
21155: LD_STRING OK
21157: PUSH
21158: EMPTY
21159: LIST
21160: PPUSH
21161: CALL_OW 99
21165: GO 21177
// amhsold0 = lucy ; 2 :
21167: LD_ADDR_EXP 25
21171: PUSH
21172: LD_EXP 31
21176: ST_TO_ADDR
21177: GO 21266
21179: LD_INT 2
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21222
21187: POP
// if not brown then
21188: LD_EXP 32
21192: NOT
21193: IFFALSE 21210
// buildquery ( neny Brown , [ OK ] ) else
21195: LD_STRING neny Brown
21197: PPUSH
21198: LD_STRING OK
21200: PUSH
21201: EMPTY
21202: LIST
21203: PPUSH
21204: CALL_OW 99
21208: GO 21220
// amhsold0 = brown ; 3 :
21210: LD_ADDR_EXP 25
21214: PUSH
21215: LD_EXP 32
21219: ST_TO_ADDR
21220: GO 21266
21222: LD_INT 3
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21265
21230: POP
// if not vanh then
21231: LD_EXP 33
21235: NOT
21236: IFFALSE 21253
// buildquery ( neny VanHouten , [ OK ] ) else
21238: LD_STRING neny VanHouten
21240: PPUSH
21241: LD_STRING OK
21243: PUSH
21244: EMPTY
21245: LIST
21246: PPUSH
21247: CALL_OW 99
21251: GO 21263
// amhsold0 = vanh ; end ;
21253: LD_ADDR_EXP 25
21257: PUSH
21258: LD_EXP 33
21262: ST_TO_ADDR
21263: GO 21266
21265: POP
// uc_side = amer_reinf ;
21266: LD_ADDR_OWVAR 20
21270: PUSH
21271: LD_EXP 3
21275: ST_TO_ADDR
// amhsolda = newcharacter ( Sikorski ) ;
21276: LD_ADDR_EXP 26
21280: PUSH
21281: LD_STRING Sikorski
21283: PPUSH
21284: CALL_OW 25
21288: ST_TO_ADDR
// uc_side = amer ;
21289: LD_ADDR_OWVAR 20
21293: PUSH
21294: LD_EXP 2
21298: ST_TO_ADDR
// if not amhsolda then
21299: LD_EXP 26
21303: NOT
21304: IFFALSE 21319
// buildquery ( neny Sikorski , [ OK ] ) ;
21306: LD_STRING neny Sikorski
21308: PPUSH
21309: LD_STRING OK
21311: PUSH
21312: EMPTY
21313: LIST
21314: PPUSH
21315: CALL_OW 99
// if not testcharacters ( Lisa ) or not checkcharacterset ( Lisa ) then
21319: LD_STRING Lisa
21321: PPUSH
21322: CALL_OW 28
21326: NOT
21327: PUSH
21328: LD_STRING Lisa
21330: PPUSH
21331: CALL_OW 29
21335: NOT
21336: OR
21337: IFFALSE 21349
// lisa = 0 else
21339: LD_ADDR_EXP 18
21343: PUSH
21344: LD_INT 0
21346: ST_TO_ADDR
21347: GO 21530
// begin lisa = createcharacter ( Lisa ) ;
21349: LD_ADDR_EXP 18
21353: PUSH
21354: LD_STRING Lisa
21356: PPUSH
21357: CALL_OW 34
21361: ST_TO_ADDR
// lisaloc = loadvariable ( LisaLoc , - 1 ) ;
21362: LD_ADDR_EXP 36
21366: PUSH
21367: LD_STRING LisaLoc
21369: PPUSH
21370: LD_INT 1
21372: NEG
21373: PPUSH
21374: CALL_OW 30
21378: ST_TO_ADDR
// case lisaloc of 2 :
21379: LD_EXP 36
21383: PUSH
21384: LD_INT 2
21386: DOUBLE
21387: EQUAL
21388: IFTRUE 21392
21390: GO 21414
21392: POP
// gamma2vip = gamma2vip ^ [ lisa ] ; 3 :
21393: LD_ADDR_LOC 92
21397: PUSH
21398: LD_LOC 92
21402: PUSH
21403: LD_EXP 18
21407: PUSH
21408: EMPTY
21409: LIST
21410: ADD
21411: ST_TO_ADDR
21412: GO 21530
21414: LD_INT 3
21416: DOUBLE
21417: EQUAL
21418: IFTRUE 21422
21420: GO 21444
21422: POP
// gamma3vip = gamma3vip ^ [ lisa ] ; 4 :
21423: LD_ADDR_LOC 93
21427: PUSH
21428: LD_LOC 93
21432: PUSH
21433: LD_EXP 18
21437: PUSH
21438: EMPTY
21439: LIST
21440: ADD
21441: ST_TO_ADDR
21442: GO 21530
21444: LD_INT 4
21446: DOUBLE
21447: EQUAL
21448: IFTRUE 21452
21450: GO 21474
21452: POP
// withjmmvip = withjmmvip ^ [ lisa ] ; 5 :
21453: LD_ADDR_LOC 94
21457: PUSH
21458: LD_LOC 94
21462: PUSH
21463: LD_EXP 18
21467: PUSH
21468: EMPTY
21469: LIST
21470: ADD
21471: ST_TO_ADDR
21472: GO 21530
21474: LD_INT 5
21476: DOUBLE
21477: EQUAL
21478: IFTRUE 21482
21480: GO 21504
21482: POP
// withjmmlatevip = withjmmlatevip ^ [ lisa ] ; - 1 :
21483: LD_ADDR_LOC 95
21487: PUSH
21488: LD_LOC 95
21492: PUSH
21493: LD_EXP 18
21497: PUSH
21498: EMPTY
21499: LIST
21500: ADD
21501: ST_TO_ADDR
21502: GO 21530
21504: LD_INT 1
21506: NEG
21507: DOUBLE
21508: EQUAL
21509: IFTRUE 21513
21511: GO 21529
21513: POP
// buildquery ( neny LisaLoc , [ OK ] ) ; end ;
21514: LD_STRING neny LisaLoc
21516: PPUSH
21517: LD_STRING OK
21519: PUSH
21520: EMPTY
21521: LIST
21522: PPUSH
21523: CALL_OW 99
21527: GO 21530
21529: POP
// end ; if not testcharacters ( Frank ) or not checkcharacterset ( Frank ) then
21530: LD_STRING Frank
21532: PPUSH
21533: CALL_OW 28
21537: NOT
21538: PUSH
21539: LD_STRING Frank
21541: PPUSH
21542: CALL_OW 29
21546: NOT
21547: OR
21548: IFFALSE 21560
// frank = 0 else
21550: LD_ADDR_EXP 19
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
21558: GO 21741
// begin frank = createcharacter ( Frank ) ;
21560: LD_ADDR_EXP 19
21564: PUSH
21565: LD_STRING Frank
21567: PPUSH
21568: CALL_OW 34
21572: ST_TO_ADDR
// frankloc = loadvariable ( FrankLoc , - 1 ) ;
21573: LD_ADDR_EXP 37
21577: PUSH
21578: LD_STRING FrankLoc
21580: PPUSH
21581: LD_INT 1
21583: NEG
21584: PPUSH
21585: CALL_OW 30
21589: ST_TO_ADDR
// case frankloc of 2 :
21590: LD_EXP 37
21594: PUSH
21595: LD_INT 2
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21625
21603: POP
// gamma2vip = gamma2vip ^ [ frank ] ; 3 :
21604: LD_ADDR_LOC 92
21608: PUSH
21609: LD_LOC 92
21613: PUSH
21614: LD_EXP 19
21618: PUSH
21619: EMPTY
21620: LIST
21621: ADD
21622: ST_TO_ADDR
21623: GO 21741
21625: LD_INT 3
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21655
21633: POP
// gamma3vip = gamma3vip ^ [ frank ] ; 4 :
21634: LD_ADDR_LOC 93
21638: PUSH
21639: LD_LOC 93
21643: PUSH
21644: LD_EXP 19
21648: PUSH
21649: EMPTY
21650: LIST
21651: ADD
21652: ST_TO_ADDR
21653: GO 21741
21655: LD_INT 4
21657: DOUBLE
21658: EQUAL
21659: IFTRUE 21663
21661: GO 21685
21663: POP
// withjmmvip = withjmmvip ^ [ frank ] ; 5 :
21664: LD_ADDR_LOC 94
21668: PUSH
21669: LD_LOC 94
21673: PUSH
21674: LD_EXP 19
21678: PUSH
21679: EMPTY
21680: LIST
21681: ADD
21682: ST_TO_ADDR
21683: GO 21741
21685: LD_INT 5
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21715
21693: POP
// withjmmlatevip = withjmmlatevip ^ [ frank ] ; - 1 :
21694: LD_ADDR_LOC 95
21698: PUSH
21699: LD_LOC 95
21703: PUSH
21704: LD_EXP 19
21708: PUSH
21709: EMPTY
21710: LIST
21711: ADD
21712: ST_TO_ADDR
21713: GO 21741
21715: LD_INT 1
21717: NEG
21718: DOUBLE
21719: EQUAL
21720: IFTRUE 21724
21722: GO 21740
21724: POP
// buildquery ( neny FrankLoc , [ OK ] ) ; end ;
21725: LD_STRING neny FrankLoc
21727: PPUSH
21728: LD_STRING OK
21730: PUSH
21731: EMPTY
21732: LIST
21733: PPUSH
21734: CALL_OW 99
21738: GO 21741
21740: POP
// end ; if not testcharacters ( Joan ) or not checkcharacterset ( Joan ) then
21741: LD_STRING Joan
21743: PPUSH
21744: CALL_OW 28
21748: NOT
21749: PUSH
21750: LD_STRING Joan
21752: PPUSH
21753: CALL_OW 29
21757: NOT
21758: OR
21759: IFFALSE 21771
// joan = 0 else
21761: LD_ADDR_EXP 35
21765: PUSH
21766: LD_INT 0
21768: ST_TO_ADDR
21769: GO 21843
// begin joan = createcharacter ( Joan ) ;
21771: LD_ADDR_EXP 35
21775: PUSH
21776: LD_STRING Joan
21778: PPUSH
21779: CALL_OW 34
21783: ST_TO_ADDR
// joanloc = loadvariable ( JoanLoc , - 1 ) ;
21784: LD_ADDR_EXP 45
21788: PUSH
21789: LD_STRING JoanLoc
21791: PPUSH
21792: LD_INT 1
21794: NEG
21795: PPUSH
21796: CALL_OW 30
21800: ST_TO_ADDR
// case joanloc of 9 :
21801: LD_EXP 45
21805: PUSH
21806: LD_INT 9
21808: DOUBLE
21809: EQUAL
21810: IFTRUE 21814
21812: GO 21817
21814: POP
// ; - 1 :
21815: GO 21843
21817: LD_INT 1
21819: NEG
21820: DOUBLE
21821: EQUAL
21822: IFTRUE 21826
21824: GO 21842
21826: POP
// buildquery ( neny JoanLoc , [ OK ] ) ; end ;
21827: LD_STRING neny JoanLoc
21829: PPUSH
21830: LD_STRING OK
21832: PUSH
21833: EMPTY
21834: LIST
21835: PPUSH
21836: CALL_OW 99
21840: GO 21843
21842: POP
// end ; if not testcharacters ( Gladstone ) or not checkcharacterset ( Gladstone ) then
21843: LD_STRING Gladstone
21845: PPUSH
21846: CALL_OW 28
21850: NOT
21851: PUSH
21852: LD_STRING Gladstone
21854: PPUSH
21855: CALL_OW 29
21859: NOT
21860: OR
21861: IFFALSE 21873
// glad = 0 else
21863: LD_ADDR_EXP 34
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
21871: GO 22054
// begin glad = createcharacter ( Gladstone ) ;
21873: LD_ADDR_EXP 34
21877: PUSH
21878: LD_STRING Gladstone
21880: PPUSH
21881: CALL_OW 34
21885: ST_TO_ADDR
// gladloc = loadvariable ( GladstoneLoc , - 1 ) ;
21886: LD_ADDR_EXP 44
21890: PUSH
21891: LD_STRING GladstoneLoc
21893: PPUSH
21894: LD_INT 1
21896: NEG
21897: PPUSH
21898: CALL_OW 30
21902: ST_TO_ADDR
// case gladloc of 2 :
21903: LD_EXP 44
21907: PUSH
21908: LD_INT 2
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 21938
21916: POP
// gamma2vip = gamma2vip ^ [ glad ] ; 3 :
21917: LD_ADDR_LOC 92
21921: PUSH
21922: LD_LOC 92
21926: PUSH
21927: LD_EXP 34
21931: PUSH
21932: EMPTY
21933: LIST
21934: ADD
21935: ST_TO_ADDR
21936: GO 22054
21938: LD_INT 3
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 21968
21946: POP
// gamma3vip = gamma3vip ^ [ glad ] ; 4 :
21947: LD_ADDR_LOC 93
21951: PUSH
21952: LD_LOC 93
21956: PUSH
21957: LD_EXP 34
21961: PUSH
21962: EMPTY
21963: LIST
21964: ADD
21965: ST_TO_ADDR
21966: GO 22054
21968: LD_INT 4
21970: DOUBLE
21971: EQUAL
21972: IFTRUE 21976
21974: GO 21998
21976: POP
// withjmmvip = withjmmvip ^ [ glad ] ; 5 :
21977: LD_ADDR_LOC 94
21981: PUSH
21982: LD_LOC 94
21986: PUSH
21987: LD_EXP 34
21991: PUSH
21992: EMPTY
21993: LIST
21994: ADD
21995: ST_TO_ADDR
21996: GO 22054
21998: LD_INT 5
22000: DOUBLE
22001: EQUAL
22002: IFTRUE 22006
22004: GO 22028
22006: POP
// withjmmlatevip = withjmmlatevip ^ [ glad ] ; - 1 :
22007: LD_ADDR_LOC 95
22011: PUSH
22012: LD_LOC 95
22016: PUSH
22017: LD_EXP 34
22021: PUSH
22022: EMPTY
22023: LIST
22024: ADD
22025: ST_TO_ADDR
22026: GO 22054
22028: LD_INT 1
22030: NEG
22031: DOUBLE
22032: EQUAL
22033: IFTRUE 22037
22035: GO 22053
22037: POP
// buildquery ( neny GladstoneLoc , [ OK ] ) ; end ;
22038: LD_STRING neny GladstoneLoc
22040: PPUSH
22041: LD_STRING OK
22043: PUSH
22044: EMPTY
22045: LIST
22046: PPUSH
22047: CALL_OW 99
22051: GO 22054
22053: POP
// end ; if not testcharacters ( Cyrus ) or not checkcharacterset ( Cyrus ) then
22054: LD_STRING Cyrus
22056: PPUSH
22057: CALL_OW 28
22061: NOT
22062: PUSH
22063: LD_STRING Cyrus
22065: PPUSH
22066: CALL_OW 29
22070: NOT
22071: OR
22072: IFFALSE 22084
// cyrus = 0 else
22074: LD_ADDR_EXP 21
22078: PUSH
22079: LD_INT 0
22081: ST_TO_ADDR
22082: GO 22265
// begin cyrus = createcharacter ( Cyrus ) ;
22084: LD_ADDR_EXP 21
22088: PUSH
22089: LD_STRING Cyrus
22091: PPUSH
22092: CALL_OW 34
22096: ST_TO_ADDR
// cyrusloc = loadvariable ( CyrusLoc , - 1 ) ;
22097: LD_ADDR_EXP 38
22101: PUSH
22102: LD_STRING CyrusLoc
22104: PPUSH
22105: LD_INT 1
22107: NEG
22108: PPUSH
22109: CALL_OW 30
22113: ST_TO_ADDR
// case cyrusloc of 2 :
22114: LD_EXP 38
22118: PUSH
22119: LD_INT 2
22121: DOUBLE
22122: EQUAL
22123: IFTRUE 22127
22125: GO 22149
22127: POP
// gamma2vip = gamma2vip ^ [ cyrus ] ; 3 :
22128: LD_ADDR_LOC 92
22132: PUSH
22133: LD_LOC 92
22137: PUSH
22138: LD_EXP 21
22142: PUSH
22143: EMPTY
22144: LIST
22145: ADD
22146: ST_TO_ADDR
22147: GO 22265
22149: LD_INT 3
22151: DOUBLE
22152: EQUAL
22153: IFTRUE 22157
22155: GO 22179
22157: POP
// gamma3vip = gamma3vip ^ [ cyrus ] ; 4 :
22158: LD_ADDR_LOC 93
22162: PUSH
22163: LD_LOC 93
22167: PUSH
22168: LD_EXP 21
22172: PUSH
22173: EMPTY
22174: LIST
22175: ADD
22176: ST_TO_ADDR
22177: GO 22265
22179: LD_INT 4
22181: DOUBLE
22182: EQUAL
22183: IFTRUE 22187
22185: GO 22209
22187: POP
// withjmmvip = withjmmvip ^ [ cyrus ] ; 5 :
22188: LD_ADDR_LOC 94
22192: PUSH
22193: LD_LOC 94
22197: PUSH
22198: LD_EXP 21
22202: PUSH
22203: EMPTY
22204: LIST
22205: ADD
22206: ST_TO_ADDR
22207: GO 22265
22209: LD_INT 5
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22239
22217: POP
// withjmmlatevip = withjmmlatevip ^ [ cyrus ] ; - 1 :
22218: LD_ADDR_LOC 95
22222: PUSH
22223: LD_LOC 95
22227: PUSH
22228: LD_EXP 21
22232: PUSH
22233: EMPTY
22234: LIST
22235: ADD
22236: ST_TO_ADDR
22237: GO 22265
22239: LD_INT 1
22241: NEG
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22264
22248: POP
// buildquery ( neny CyrusLoc , [ OK ] ) ; end ;
22249: LD_STRING neny CyrusLoc
22251: PPUSH
22252: LD_STRING OK
22254: PUSH
22255: EMPTY
22256: LIST
22257: PPUSH
22258: CALL_OW 99
22262: GO 22265
22264: POP
// end ; if not testcharacters ( Bobby ) or not checkcharacterset ( Bobby ) then
22265: LD_STRING Bobby
22267: PPUSH
22268: CALL_OW 28
22272: NOT
22273: PUSH
22274: LD_STRING Bobby
22276: PPUSH
22277: CALL_OW 29
22281: NOT
22282: OR
22283: IFFALSE 22295
// bobby = 0 else
22285: LD_ADDR_EXP 22
22289: PUSH
22290: LD_INT 0
22292: ST_TO_ADDR
22293: GO 22476
// begin bobby = createcharacter ( Bobby ) ;
22295: LD_ADDR_EXP 22
22299: PUSH
22300: LD_STRING Bobby
22302: PPUSH
22303: CALL_OW 34
22307: ST_TO_ADDR
// bobbyloc = loadvariable ( BobbyLoc , - 1 ) ;
22308: LD_ADDR_EXP 39
22312: PUSH
22313: LD_STRING BobbyLoc
22315: PPUSH
22316: LD_INT 1
22318: NEG
22319: PPUSH
22320: CALL_OW 30
22324: ST_TO_ADDR
// case bobbyloc of 2 :
22325: LD_EXP 39
22329: PUSH
22330: LD_INT 2
22332: DOUBLE
22333: EQUAL
22334: IFTRUE 22338
22336: GO 22360
22338: POP
// gamma2vip = gamma2vip ^ [ bobby ] ; 3 :
22339: LD_ADDR_LOC 92
22343: PUSH
22344: LD_LOC 92
22348: PUSH
22349: LD_EXP 22
22353: PUSH
22354: EMPTY
22355: LIST
22356: ADD
22357: ST_TO_ADDR
22358: GO 22476
22360: LD_INT 3
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22368
22366: GO 22390
22368: POP
// gamma3vip = gamma3vip ^ [ bobby ] ; 4 :
22369: LD_ADDR_LOC 93
22373: PUSH
22374: LD_LOC 93
22378: PUSH
22379: LD_EXP 22
22383: PUSH
22384: EMPTY
22385: LIST
22386: ADD
22387: ST_TO_ADDR
22388: GO 22476
22390: LD_INT 4
22392: DOUBLE
22393: EQUAL
22394: IFTRUE 22398
22396: GO 22420
22398: POP
// withjmmvip = withjmmvip ^ [ bobby ] ; 5 :
22399: LD_ADDR_LOC 94
22403: PUSH
22404: LD_LOC 94
22408: PUSH
22409: LD_EXP 22
22413: PUSH
22414: EMPTY
22415: LIST
22416: ADD
22417: ST_TO_ADDR
22418: GO 22476
22420: LD_INT 5
22422: DOUBLE
22423: EQUAL
22424: IFTRUE 22428
22426: GO 22450
22428: POP
// withjmmlatevip = withjmmlatevip ^ [ bobby ] ; - 1 :
22429: LD_ADDR_LOC 95
22433: PUSH
22434: LD_LOC 95
22438: PUSH
22439: LD_EXP 22
22443: PUSH
22444: EMPTY
22445: LIST
22446: ADD
22447: ST_TO_ADDR
22448: GO 22476
22450: LD_INT 1
22452: NEG
22453: DOUBLE
22454: EQUAL
22455: IFTRUE 22459
22457: GO 22475
22459: POP
// buildquery ( neny BobbyLoc , [ OK ] ) ; end ;
22460: LD_STRING neny BobbyLoc
22462: PPUSH
22463: LD_STRING OK
22465: PUSH
22466: EMPTY
22467: LIST
22468: PPUSH
22469: CALL_OW 99
22473: GO 22476
22475: POP
// end ; if not testcharacters ( Denis ) or not checkcharacterset ( Denis ) then
22476: LD_STRING Denis
22478: PPUSH
22479: CALL_OW 28
22483: NOT
22484: PUSH
22485: LD_STRING Denis
22487: PPUSH
22488: CALL_OW 29
22492: NOT
22493: OR
22494: IFFALSE 22506
// denis = 0 else
22496: LD_ADDR_EXP 23
22500: PUSH
22501: LD_INT 0
22503: ST_TO_ADDR
22504: GO 22687
// begin denis = createcharacter ( Denis ) ;
22506: LD_ADDR_EXP 23
22510: PUSH
22511: LD_STRING Denis
22513: PPUSH
22514: CALL_OW 34
22518: ST_TO_ADDR
// denisloc = loadvariable ( DenisLoc , - 1 ) ;
22519: LD_ADDR_EXP 40
22523: PUSH
22524: LD_STRING DenisLoc
22526: PPUSH
22527: LD_INT 1
22529: NEG
22530: PPUSH
22531: CALL_OW 30
22535: ST_TO_ADDR
// case denisloc of 2 :
22536: LD_EXP 40
22540: PUSH
22541: LD_INT 2
22543: DOUBLE
22544: EQUAL
22545: IFTRUE 22549
22547: GO 22571
22549: POP
// gamma2vip = gamma2vip ^ [ denis ] ; 3 :
22550: LD_ADDR_LOC 92
22554: PUSH
22555: LD_LOC 92
22559: PUSH
22560: LD_EXP 23
22564: PUSH
22565: EMPTY
22566: LIST
22567: ADD
22568: ST_TO_ADDR
22569: GO 22687
22571: LD_INT 3
22573: DOUBLE
22574: EQUAL
22575: IFTRUE 22579
22577: GO 22601
22579: POP
// gamma3vip = gamma3vip ^ [ denis ] ; 4 :
22580: LD_ADDR_LOC 93
22584: PUSH
22585: LD_LOC 93
22589: PUSH
22590: LD_EXP 23
22594: PUSH
22595: EMPTY
22596: LIST
22597: ADD
22598: ST_TO_ADDR
22599: GO 22687
22601: LD_INT 4
22603: DOUBLE
22604: EQUAL
22605: IFTRUE 22609
22607: GO 22631
22609: POP
// withjmmvip = withjmmvip ^ [ denis ] ; 5 :
22610: LD_ADDR_LOC 94
22614: PUSH
22615: LD_LOC 94
22619: PUSH
22620: LD_EXP 23
22624: PUSH
22625: EMPTY
22626: LIST
22627: ADD
22628: ST_TO_ADDR
22629: GO 22687
22631: LD_INT 5
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22661
22639: POP
// withjmmlatevip = withjmmlatevip ^ [ denis ] ; - 1 :
22640: LD_ADDR_LOC 95
22644: PUSH
22645: LD_LOC 95
22649: PUSH
22650: LD_EXP 23
22654: PUSH
22655: EMPTY
22656: LIST
22657: ADD
22658: ST_TO_ADDR
22659: GO 22687
22661: LD_INT 1
22663: NEG
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22686
22670: POP
// buildquery ( neny DenisLoc , [ OK ] ) ; end ;
22671: LD_STRING neny DenisLoc
22673: PPUSH
22674: LD_STRING OK
22676: PUSH
22677: EMPTY
22678: LIST
22679: PPUSH
22680: CALL_OW 99
22684: GO 22687
22686: POP
// end ; yamoko = 0 ;
22687: LD_ADDR_EXP 24
22691: PUSH
22692: LD_INT 0
22694: ST_TO_ADDR
// if not frank then
22695: LD_EXP 19
22699: NOT
22700: IFFALSE 22913
// if not testcharacters ( Yamoko ) or not checkcharacterset ( Yamoko ) then
22702: LD_STRING Yamoko
22704: PPUSH
22705: CALL_OW 28
22709: NOT
22710: PUSH
22711: LD_STRING Yamoko
22713: PPUSH
22714: CALL_OW 29
22718: NOT
22719: OR
22720: IFFALSE 22732
// yamoko = 0 else
22722: LD_ADDR_EXP 24
22726: PUSH
22727: LD_INT 0
22729: ST_TO_ADDR
22730: GO 22913
// begin yamoko = createcharacter ( Yamoko ) ;
22732: LD_ADDR_EXP 24
22736: PUSH
22737: LD_STRING Yamoko
22739: PPUSH
22740: CALL_OW 34
22744: ST_TO_ADDR
// yamokoloc = loadvariable ( YamokoLoc , - 1 ) ;
22745: LD_ADDR_EXP 41
22749: PUSH
22750: LD_STRING YamokoLoc
22752: PPUSH
22753: LD_INT 1
22755: NEG
22756: PPUSH
22757: CALL_OW 30
22761: ST_TO_ADDR
// case yamokoloc of 2 :
22762: LD_EXP 41
22766: PUSH
22767: LD_INT 2
22769: DOUBLE
22770: EQUAL
22771: IFTRUE 22775
22773: GO 22797
22775: POP
// gamma2vip = gamma2vip ^ [ yamoko ] ; 3 :
22776: LD_ADDR_LOC 92
22780: PUSH
22781: LD_LOC 92
22785: PUSH
22786: LD_EXP 24
22790: PUSH
22791: EMPTY
22792: LIST
22793: ADD
22794: ST_TO_ADDR
22795: GO 22913
22797: LD_INT 3
22799: DOUBLE
22800: EQUAL
22801: IFTRUE 22805
22803: GO 22827
22805: POP
// gamma3vip = gamma3vip ^ [ yamoko ] ; 4 :
22806: LD_ADDR_LOC 93
22810: PUSH
22811: LD_LOC 93
22815: PUSH
22816: LD_EXP 24
22820: PUSH
22821: EMPTY
22822: LIST
22823: ADD
22824: ST_TO_ADDR
22825: GO 22913
22827: LD_INT 4
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22857
22835: POP
// withjmmvip = withjmmvip ^ [ yamoko ] ; 5 :
22836: LD_ADDR_LOC 94
22840: PUSH
22841: LD_LOC 94
22845: PUSH
22846: LD_EXP 24
22850: PUSH
22851: EMPTY
22852: LIST
22853: ADD
22854: ST_TO_ADDR
22855: GO 22913
22857: LD_INT 5
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 22887
22865: POP
// withjmmlatevip = withjmmlatevip ^ [ yamoko ] ; - 1 :
22866: LD_ADDR_LOC 95
22870: PUSH
22871: LD_LOC 95
22875: PUSH
22876: LD_EXP 24
22880: PUSH
22881: EMPTY
22882: LIST
22883: ADD
22884: ST_TO_ADDR
22885: GO 22913
22887: LD_INT 1
22889: NEG
22890: DOUBLE
22891: EQUAL
22892: IFTRUE 22896
22894: GO 22912
22896: POP
// buildquery ( neny YamokoLoc , [ OK ] ) ; end ;
22897: LD_STRING neny YamokoLoc
22899: PPUSH
22900: LD_STRING OK
22902: PUSH
22903: EMPTY
22904: LIST
22905: PPUSH
22906: CALL_OW 99
22910: GO 22913
22912: POP
// end ; posilya = [ ] ;
22913: LD_ADDR_EXP 27
22917: PUSH
22918: EMPTY
22919: ST_TO_ADDR
// if gamma3vip >= 2 then
22920: LD_LOC 93
22924: PUSH
22925: LD_INT 2
22927: GREATEREQUAL
22928: IFFALSE 22959
// posilya = [ gamma3vip [ 1 ] , gamma3vip [ 2 ] ] else
22930: LD_ADDR_EXP 27
22934: PUSH
22935: LD_LOC 93
22939: PUSH
22940: LD_INT 1
22942: ARRAY
22943: PUSH
22944: LD_LOC 93
22948: PUSH
22949: LD_INT 2
22951: ARRAY
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: ST_TO_ADDR
22957: GO 23177
// begin tmp = 0 + gamma3vip + othergamma3 ;
22959: LD_ADDR_VAR 0 2
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: LD_LOC 93
22971: PLUS
22972: PUSH
22973: LD_LOC 88
22977: PLUS
22978: ST_TO_ADDR
// if tmp < 2 then
22979: LD_VAR 0 2
22983: PUSH
22984: LD_INT 2
22986: LESS
22987: IFFALSE 23112
// begin posilya = gamma3vip ^ othergamma3 ;
22989: LD_ADDR_EXP 27
22993: PUSH
22994: LD_LOC 93
22998: PUSH
22999: LD_LOC 88
23003: ADD
23004: ST_TO_ADDR
// if ( not glad ) or ( glad and gladloc <> 3 ) then
23005: LD_EXP 34
23009: NOT
23010: PUSH
23011: LD_EXP 34
23015: PUSH
23016: LD_EXP 44
23020: PUSH
23021: LD_INT 3
23023: NONEQUAL
23024: AND
23025: OR
23026: IFFALSE 23071
// begin preparescientist ( sex_male , 2 ) ;
23028: LD_INT 1
23030: PPUSH
23031: LD_INT 2
23033: PPUSH
23034: CALL_OW 384
// posilya = posilya ^ [ createhuman ] ;
23038: LD_ADDR_EXP 27
23042: PUSH
23043: LD_EXP 27
23047: PUSH
23048: CALL_OW 44
23052: PUSH
23053: EMPTY
23054: LIST
23055: ADD
23056: ST_TO_ADDR
// tmp = tmp + 1 ;
23057: LD_ADDR_VAR 0 2
23061: PUSH
23062: LD_VAR 0 2
23066: PUSH
23067: LD_INT 1
23069: PLUS
23070: ST_TO_ADDR
// end ; if tmp = 1 then
23071: LD_VAR 0 2
23075: PUSH
23076: LD_INT 1
23078: EQUAL
23079: IFFALSE 23110
// begin preparesoldier ( sex_male , 2 ) ;
23081: LD_INT 1
23083: PPUSH
23084: LD_INT 2
23086: PPUSH
23087: CALL_OW 381
// posilya = posilya ^ [ createhuman ] ;
23091: LD_ADDR_EXP 27
23095: PUSH
23096: LD_EXP 27
23100: PUSH
23101: CALL_OW 44
23105: PUSH
23106: EMPTY
23107: LIST
23108: ADD
23109: ST_TO_ADDR
// end ; end else
23110: GO 23177
// begin tmp1 = [ ] ;
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: EMPTY
23118: ST_TO_ADDR
// tmp1 = gamma3vip ^ othergamma3 ;
23119: LD_ADDR_VAR 0 3
23123: PUSH
23124: LD_LOC 93
23128: PUSH
23129: LD_LOC 88
23133: ADD
23134: ST_TO_ADDR
// for tmp = 1 to 2 do
23135: LD_ADDR_VAR 0 2
23139: PUSH
23140: DOUBLE
23141: LD_INT 1
23143: DEC
23144: ST_TO_ADDR
23145: LD_INT 2
23147: PUSH
23148: FOR_TO
23149: IFFALSE 23175
// posilya = posilya ^ tmp1 [ tmp ] ;
23151: LD_ADDR_EXP 27
23155: PUSH
23156: LD_EXP 27
23160: PUSH
23161: LD_VAR 0 3
23165: PUSH
23166: LD_VAR 0 2
23170: ARRAY
23171: ADD
23172: ST_TO_ADDR
23173: GO 23148
23175: POP
23176: POP
// end ; end ; posilyb = [ john_ ] ;
23177: LD_ADDR_EXP 28
23181: PUSH
23182: LD_EXP 20
23186: PUSH
23187: EMPTY
23188: LIST
23189: ST_TO_ADDR
// if withjmmvip >= 4 then
23190: LD_LOC 94
23194: PUSH
23195: LD_INT 4
23197: GREATEREQUAL
23198: IFFALSE 23255
// posilyb = [ john_ , withjmmvip [ 1 ] , withjmmvip [ 2 ] , withjmmvip [ 3 ] , withjmmvip [ 4 ] ] else
23200: LD_ADDR_EXP 28
23204: PUSH
23205: LD_EXP 20
23209: PUSH
23210: LD_LOC 94
23214: PUSH
23215: LD_INT 1
23217: ARRAY
23218: PUSH
23219: LD_LOC 94
23223: PUSH
23224: LD_INT 2
23226: ARRAY
23227: PUSH
23228: LD_LOC 94
23232: PUSH
23233: LD_INT 3
23235: ARRAY
23236: PUSH
23237: LD_LOC 94
23241: PUSH
23242: LD_INT 4
23244: ARRAY
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: ST_TO_ADDR
23253: GO 23523
// begin tmp = 0 + withjmmvip + otherjmm ;
23255: LD_ADDR_VAR 0 2
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: LD_LOC 94
23267: PLUS
23268: PUSH
23269: LD_LOC 90
23273: PLUS
23274: ST_TO_ADDR
// if tmp < 4 then
23275: LD_VAR 0 2
23279: PUSH
23280: LD_INT 4
23282: LESS
23283: IFFALSE 23458
// begin posilyb = [ john_ ] ^ withjmmvip ^ otherjmm ;
23285: LD_ADDR_EXP 28
23289: PUSH
23290: LD_EXP 20
23294: PUSH
23295: EMPTY
23296: LIST
23297: PUSH
23298: LD_LOC 94
23302: ADD
23303: PUSH
23304: LD_LOC 90
23308: ADD
23309: ST_TO_ADDR
// if tmp = 0 then
23310: LD_VAR 0 2
23314: PUSH
23315: LD_INT 0
23317: EQUAL
23318: IFFALSE 23349
// begin preparemechanic ( sex_male , 3 ) ;
23320: LD_INT 1
23322: PPUSH
23323: LD_INT 3
23325: PPUSH
23326: CALL_OW 383
// posilyb = posilyb ^ [ createhuman ] ;
23330: LD_ADDR_EXP 28
23334: PUSH
23335: LD_EXP 28
23339: PUSH
23340: CALL_OW 44
23344: PUSH
23345: EMPTY
23346: LIST
23347: ADD
23348: ST_TO_ADDR
// end ; if tmp <= 1 then
23349: LD_VAR 0 2
23353: PUSH
23354: LD_INT 1
23356: LESSEQUAL
23357: IFFALSE 23388
// begin preparesoldier ( sex_female , 3 ) ;
23359: LD_INT 2
23361: PPUSH
23362: LD_INT 3
23364: PPUSH
23365: CALL_OW 381
// posilyb = posilyb ^ [ createhuman ] ;
23369: LD_ADDR_EXP 28
23373: PUSH
23374: LD_EXP 28
23378: PUSH
23379: CALL_OW 44
23383: PUSH
23384: EMPTY
23385: LIST
23386: ADD
23387: ST_TO_ADDR
// end ; if tmp <= 2 then
23388: LD_VAR 0 2
23392: PUSH
23393: LD_INT 2
23395: LESSEQUAL
23396: IFFALSE 23427
// begin preparesoldier ( sex_male , 3 ) ;
23398: LD_INT 1
23400: PPUSH
23401: LD_INT 3
23403: PPUSH
23404: CALL_OW 381
// posilyb = posilyb ^ [ createhuman ] ;
23408: LD_ADDR_EXP 28
23412: PUSH
23413: LD_EXP 28
23417: PUSH
23418: CALL_OW 44
23422: PUSH
23423: EMPTY
23424: LIST
23425: ADD
23426: ST_TO_ADDR
// end ; preparesoldier ( sex_male , 3 ) ;
23427: LD_INT 1
23429: PPUSH
23430: LD_INT 3
23432: PPUSH
23433: CALL_OW 381
// posilyb = posilyb ^ [ createhuman ] ;
23437: LD_ADDR_EXP 28
23441: PUSH
23442: LD_EXP 28
23446: PUSH
23447: CALL_OW 44
23451: PUSH
23452: EMPTY
23453: LIST
23454: ADD
23455: ST_TO_ADDR
// end else
23456: GO 23523
// begin tmp1 = [ ] ;
23458: LD_ADDR_VAR 0 3
23462: PUSH
23463: EMPTY
23464: ST_TO_ADDR
// tmp1 = withjmmvip ^ otherjmm ;
23465: LD_ADDR_VAR 0 3
23469: PUSH
23470: LD_LOC 94
23474: PUSH
23475: LD_LOC 90
23479: ADD
23480: ST_TO_ADDR
// for tmp = 1 to 4 do
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: DOUBLE
23487: LD_INT 1
23489: DEC
23490: ST_TO_ADDR
23491: LD_INT 4
23493: PUSH
23494: FOR_TO
23495: IFFALSE 23521
// posilyb = posilyb ^ tmp1 [ tmp ] ;
23497: LD_ADDR_EXP 28
23501: PUSH
23502: LD_EXP 28
23506: PUSH
23507: LD_VAR 0 3
23511: PUSH
23512: LD_VAR 0 2
23516: ARRAY
23517: ADD
23518: ST_TO_ADDR
23519: GO 23494
23521: POP
23522: POP
// end ; end ; if not placeunitxyr ( amhsold0 , 44 , 8 , 3 , false ) then
23523: LD_EXP 25
23527: PPUSH
23528: LD_INT 44
23530: PPUSH
23531: LD_INT 8
23533: PPUSH
23534: LD_INT 3
23536: PPUSH
23537: LD_INT 0
23539: PPUSH
23540: CALL_OW 50
23544: NOT
23545: IFFALSE 23562
// placeunitarea ( amhsold0 , ambase , false ) ;
23547: LD_EXP 25
23551: PPUSH
23552: LD_INT 8
23554: PPUSH
23555: LD_INT 0
23557: PPUSH
23558: CALL_OW 49
// tmz = gamma2vip union othergamma2 union otherunplaced ;
23562: LD_ADDR_VAR 0 4
23566: PUSH
23567: LD_LOC 92
23571: PUSH
23572: LD_LOC 87
23576: UNION
23577: PUSH
23578: LD_LOC 89
23582: UNION
23583: ST_TO_ADDR
// tmz_ = tmz ;
23584: LD_ADDR_VAR 0 5
23588: PUSH
23589: LD_VAR 0 4
23593: ST_TO_ADDR
// tm_c = unitfilter ( tmz , [ [ f_class , class_soldier ] ] ) ;
23594: LD_ADDR_VAR 0 6
23598: PUSH
23599: LD_VAR 0 4
23603: PPUSH
23604: LD_INT 25
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: PPUSH
23617: CALL_OW 72
23621: ST_TO_ADDR
// tm_e = unitfilter ( tmz , [ [ f_class , class_engineer ] ] ) ;
23622: LD_ADDR_VAR 0 7
23626: PUSH
23627: LD_VAR 0 4
23631: PPUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: PPUSH
23645: CALL_OW 72
23649: ST_TO_ADDR
// tm_m = unitfilter ( tmz , [ [ f_class , class_mechanic ] ] ) ;
23650: LD_ADDR_VAR 0 8
23654: PUSH
23655: LD_VAR 0 4
23659: PPUSH
23660: LD_INT 25
23662: PUSH
23663: LD_INT 3
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: EMPTY
23671: LIST
23672: PPUSH
23673: CALL_OW 72
23677: ST_TO_ADDR
// tm_s = unitfilter ( tmz , [ [ f_class , class_scientistic ] ] ) ;
23678: LD_ADDR_VAR 0 9
23682: PUSH
23683: LD_VAR 0 4
23687: PPUSH
23688: LD_INT 25
23690: PUSH
23691: LD_INT 4
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: EMPTY
23699: LIST
23700: PPUSH
23701: CALL_OW 72
23705: ST_TO_ADDR
// if tmz >= 6 then
23706: LD_VAR 0 4
23710: PUSH
23711: LD_INT 6
23713: GREATEREQUAL
23714: IFFALSE 24373
// begin tmp_c = 0 + tm_c ;
23716: LD_ADDR_VAR 0 10
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_VAR 0 6
23728: PLUS
23729: ST_TO_ADDR
// if tmp_c > 3 then
23730: LD_VAR 0 10
23734: PUSH
23735: LD_INT 3
23737: GREATER
23738: IFFALSE 23748
// tmp_c = 2 ;
23740: LD_ADDR_VAR 0 10
23744: PUSH
23745: LD_INT 2
23747: ST_TO_ADDR
// for tmp1 = 1 to tmp_c do
23748: LD_ADDR_VAR 0 3
23752: PUSH
23753: DOUBLE
23754: LD_INT 1
23756: DEC
23757: ST_TO_ADDR
23758: LD_VAR 0 10
23762: PUSH
23763: FOR_TO
23764: IFFALSE 23844
// begin if not placeunitxyr ( tm_c [ tmp1 ] , 52 , 36 , 3 , false ) then
23766: LD_VAR 0 6
23770: PUSH
23771: LD_VAR 0 3
23775: ARRAY
23776: PPUSH
23777: LD_INT 52
23779: PPUSH
23780: LD_INT 36
23782: PPUSH
23783: LD_INT 3
23785: PPUSH
23786: LD_INT 0
23788: PPUSH
23789: CALL_OW 50
23793: NOT
23794: IFFALSE 23817
// placeunitarea ( tm_c [ tmp1 ] , ambase , false ) ;
23796: LD_VAR 0 6
23800: PUSH
23801: LD_VAR 0 3
23805: ARRAY
23806: PPUSH
23807: LD_INT 8
23809: PPUSH
23810: LD_INT 0
23812: PPUSH
23813: CALL_OW 49
// tmz = tmz diff [ tm_c [ tmp1 ] ] ;
23817: LD_ADDR_VAR 0 4
23821: PUSH
23822: LD_VAR 0 4
23826: PUSH
23827: LD_VAR 0 6
23831: PUSH
23832: LD_VAR 0 3
23836: ARRAY
23837: PUSH
23838: EMPTY
23839: LIST
23840: DIFF
23841: ST_TO_ADDR
// end ;
23842: GO 23763
23844: POP
23845: POP
// tot = tmp_c ;
23846: LD_ADDR_VAR 0 14
23850: PUSH
23851: LD_VAR 0 10
23855: ST_TO_ADDR
// tmp_m = 0 + tm_m ;
23856: LD_ADDR_VAR 0 12
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: LD_VAR 0 8
23868: PLUS
23869: ST_TO_ADDR
// if tmp_m > 3 then
23870: LD_VAR 0 12
23874: PUSH
23875: LD_INT 3
23877: GREATER
23878: IFFALSE 23888
// tmp_m = 2 ;
23880: LD_ADDR_VAR 0 12
23884: PUSH
23885: LD_INT 2
23887: ST_TO_ADDR
// for tmp1 = 1 to tmp_m do
23888: LD_ADDR_VAR 0 3
23892: PUSH
23893: DOUBLE
23894: LD_INT 1
23896: DEC
23897: ST_TO_ADDR
23898: LD_VAR 0 12
23902: PUSH
23903: FOR_TO
23904: IFFALSE 23984
// begin if not placeunitxyr ( tm_m [ tmp1 ] , 45 , 16 , 3 , false ) then
23906: LD_VAR 0 8
23910: PUSH
23911: LD_VAR 0 3
23915: ARRAY
23916: PPUSH
23917: LD_INT 45
23919: PPUSH
23920: LD_INT 16
23922: PPUSH
23923: LD_INT 3
23925: PPUSH
23926: LD_INT 0
23928: PPUSH
23929: CALL_OW 50
23933: NOT
23934: IFFALSE 23957
// placeunitarea ( tm_m [ tmp1 ] , ambase , false ) ;
23936: LD_VAR 0 8
23940: PUSH
23941: LD_VAR 0 3
23945: ARRAY
23946: PPUSH
23947: LD_INT 8
23949: PPUSH
23950: LD_INT 0
23952: PPUSH
23953: CALL_OW 49
// tmz = tmz diff [ tm_m [ tmp1 ] ] ;
23957: LD_ADDR_VAR 0 4
23961: PUSH
23962: LD_VAR 0 4
23966: PUSH
23967: LD_VAR 0 8
23971: PUSH
23972: LD_VAR 0 3
23976: ARRAY
23977: PUSH
23978: EMPTY
23979: LIST
23980: DIFF
23981: ST_TO_ADDR
// end ;
23982: GO 23903
23984: POP
23985: POP
// tot = tot + tmp_m ;
23986: LD_ADDR_VAR 0 14
23990: PUSH
23991: LD_VAR 0 14
23995: PUSH
23996: LD_VAR 0 12
24000: PLUS
24001: ST_TO_ADDR
// tmp_e = 0 + tm_e ;
24002: LD_ADDR_VAR 0 11
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: LD_VAR 0 7
24014: PLUS
24015: ST_TO_ADDR
// if tmp_e > 2 then
24016: LD_VAR 0 11
24020: PUSH
24021: LD_INT 2
24023: GREATER
24024: IFFALSE 24034
// tmp_e = 1 ;
24026: LD_ADDR_VAR 0 11
24030: PUSH
24031: LD_INT 1
24033: ST_TO_ADDR
// for tmp1 = 1 to tmp_e do
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: DOUBLE
24040: LD_INT 1
24042: DEC
24043: ST_TO_ADDR
24044: LD_VAR 0 11
24048: PUSH
24049: FOR_TO
24050: IFFALSE 24130
// begin if not placeunitxyr ( tm_e [ tmp1 ] , 52 , 16 , 3 , false ) then
24052: LD_VAR 0 7
24056: PUSH
24057: LD_VAR 0 3
24061: ARRAY
24062: PPUSH
24063: LD_INT 52
24065: PPUSH
24066: LD_INT 16
24068: PPUSH
24069: LD_INT 3
24071: PPUSH
24072: LD_INT 0
24074: PPUSH
24075: CALL_OW 50
24079: NOT
24080: IFFALSE 24103
// placeunitarea ( tm_e [ tmp1 ] , ambase , false ) ;
24082: LD_VAR 0 7
24086: PUSH
24087: LD_VAR 0 3
24091: ARRAY
24092: PPUSH
24093: LD_INT 8
24095: PPUSH
24096: LD_INT 0
24098: PPUSH
24099: CALL_OW 49
// tmz = tmz diff [ tm_e [ tmp1 ] ] ;
24103: LD_ADDR_VAR 0 4
24107: PUSH
24108: LD_VAR 0 4
24112: PUSH
24113: LD_VAR 0 7
24117: PUSH
24118: LD_VAR 0 3
24122: ARRAY
24123: PUSH
24124: EMPTY
24125: LIST
24126: DIFF
24127: ST_TO_ADDR
// end ;
24128: GO 24049
24130: POP
24131: POP
// tot = tot + tmp_e ;
24132: LD_ADDR_VAR 0 14
24136: PUSH
24137: LD_VAR 0 14
24141: PUSH
24142: LD_VAR 0 11
24146: PLUS
24147: ST_TO_ADDR
// tmp_s = 0 + tm_s ;
24148: LD_ADDR_VAR 0 13
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: LD_VAR 0 9
24160: PLUS
24161: ST_TO_ADDR
// if tmp_s > 2 then
24162: LD_VAR 0 13
24166: PUSH
24167: LD_INT 2
24169: GREATER
24170: IFFALSE 24180
// tmp_s = 1 ;
24172: LD_ADDR_VAR 0 13
24176: PUSH
24177: LD_INT 1
24179: ST_TO_ADDR
// for tmp1 = 1 to tmp_s do
24180: LD_ADDR_VAR 0 3
24184: PUSH
24185: DOUBLE
24186: LD_INT 1
24188: DEC
24189: ST_TO_ADDR
24190: LD_VAR 0 13
24194: PUSH
24195: FOR_TO
24196: IFFALSE 24276
// begin if not placeunitxyr ( tm_s [ tmp1 ] , 60 , 18 , 3 , false ) then
24198: LD_VAR 0 9
24202: PUSH
24203: LD_VAR 0 3
24207: ARRAY
24208: PPUSH
24209: LD_INT 60
24211: PPUSH
24212: LD_INT 18
24214: PPUSH
24215: LD_INT 3
24217: PPUSH
24218: LD_INT 0
24220: PPUSH
24221: CALL_OW 50
24225: NOT
24226: IFFALSE 24249
// placeunitarea ( tm_s [ tmp1 ] , ambase , false ) ;
24228: LD_VAR 0 9
24232: PUSH
24233: LD_VAR 0 3
24237: ARRAY
24238: PPUSH
24239: LD_INT 8
24241: PPUSH
24242: LD_INT 0
24244: PPUSH
24245: CALL_OW 49
// tmz = tmz diff [ tm_s [ tmp1 ] ] ;
24249: LD_ADDR_VAR 0 4
24253: PUSH
24254: LD_VAR 0 4
24258: PUSH
24259: LD_VAR 0 9
24263: PUSH
24264: LD_VAR 0 3
24268: ARRAY
24269: PUSH
24270: EMPTY
24271: LIST
24272: DIFF
24273: ST_TO_ADDR
// end ;
24274: GO 24195
24276: POP
24277: POP
// tot = tot + tmp_s ;
24278: LD_ADDR_VAR 0 14
24282: PUSH
24283: LD_VAR 0 14
24287: PUSH
24288: LD_VAR 0 13
24292: PLUS
24293: ST_TO_ADDR
// for tmp1 = 1 to ( 6 - tot ) do
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: DOUBLE
24300: LD_INT 1
24302: DEC
24303: ST_TO_ADDR
24304: LD_INT 6
24306: PUSH
24307: LD_VAR 0 14
24311: MINUS
24312: PUSH
24313: FOR_TO
24314: IFFALSE 24369
// if not placeunitxyr ( tmz [ tmp1 ] , 45 , 8 , 5 , false ) then
24316: LD_VAR 0 4
24320: PUSH
24321: LD_VAR 0 3
24325: ARRAY
24326: PPUSH
24327: LD_INT 45
24329: PPUSH
24330: LD_INT 8
24332: PPUSH
24333: LD_INT 5
24335: PPUSH
24336: LD_INT 0
24338: PPUSH
24339: CALL_OW 50
24343: NOT
24344: IFFALSE 24367
// placeunitarea ( tmz [ tmp1 ] , ambase , false ) ;
24346: LD_VAR 0 4
24350: PUSH
24351: LD_VAR 0 3
24355: ARRAY
24356: PPUSH
24357: LD_INT 8
24359: PPUSH
24360: LD_INT 0
24362: PPUSH
24363: CALL_OW 49
24367: GO 24313
24369: POP
24370: POP
// end else
24371: GO 25365
// begin tmp_c = 0 + tm_c ;
24373: LD_ADDR_VAR 0 10
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_VAR 0 6
24385: PLUS
24386: ST_TO_ADDR
// if tmp_c > 3 then
24387: LD_VAR 0 10
24391: PUSH
24392: LD_INT 3
24394: GREATER
24395: IFFALSE 24405
// tmp_c = 2 ;
24397: LD_ADDR_VAR 0 10
24401: PUSH
24402: LD_INT 2
24404: ST_TO_ADDR
// for tmp1 = 1 to tmp_c do
24405: LD_ADDR_VAR 0 3
24409: PUSH
24410: DOUBLE
24411: LD_INT 1
24413: DEC
24414: ST_TO_ADDR
24415: LD_VAR 0 10
24419: PUSH
24420: FOR_TO
24421: IFFALSE 24501
// begin if not placeunitxyr ( tm_c [ tmp1 ] , 52 , 36 , 3 , false ) then
24423: LD_VAR 0 6
24427: PUSH
24428: LD_VAR 0 3
24432: ARRAY
24433: PPUSH
24434: LD_INT 52
24436: PPUSH
24437: LD_INT 36
24439: PPUSH
24440: LD_INT 3
24442: PPUSH
24443: LD_INT 0
24445: PPUSH
24446: CALL_OW 50
24450: NOT
24451: IFFALSE 24474
// placeunitarea ( tm_c [ tmp1 ] , ambase , false ) ;
24453: LD_VAR 0 6
24457: PUSH
24458: LD_VAR 0 3
24462: ARRAY
24463: PPUSH
24464: LD_INT 8
24466: PPUSH
24467: LD_INT 0
24469: PPUSH
24470: CALL_OW 49
// tmz = tmz diff [ tm_c [ tmp1 ] ] ;
24474: LD_ADDR_VAR 0 4
24478: PUSH
24479: LD_VAR 0 4
24483: PUSH
24484: LD_VAR 0 6
24488: PUSH
24489: LD_VAR 0 3
24493: ARRAY
24494: PUSH
24495: EMPTY
24496: LIST
24497: DIFF
24498: ST_TO_ADDR
// end ;
24499: GO 24420
24501: POP
24502: POP
// tot = tmp_c ;
24503: LD_ADDR_VAR 0 14
24507: PUSH
24508: LD_VAR 0 10
24512: ST_TO_ADDR
// if tmp_c = 0 then
24513: LD_VAR 0 10
24517: PUSH
24518: LD_INT 0
24520: EQUAL
24521: IFFALSE 24582
// begin preparesoldier ( sex_male , 3 ) ;
24523: LD_INT 1
24525: PPUSH
24526: LD_INT 3
24528: PPUSH
24529: CALL_OW 381
// tmp = createhuman ;
24533: LD_ADDR_VAR 0 2
24537: PUSH
24538: CALL_OW 44
24542: ST_TO_ADDR
// if not placeunitxyr ( tmp , 52 , 36 , 3 , false ) then
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_INT 52
24550: PPUSH
24551: LD_INT 36
24553: PPUSH
24554: LD_INT 3
24556: PPUSH
24557: LD_INT 0
24559: PPUSH
24560: CALL_OW 50
24564: NOT
24565: IFFALSE 24582
// placeunitarea ( tmp , ambase , false ) ;
24567: LD_VAR 0 2
24571: PPUSH
24572: LD_INT 8
24574: PPUSH
24575: LD_INT 0
24577: PPUSH
24578: CALL_OW 49
// end ; if tmp_c <= 1 then
24582: LD_VAR 0 10
24586: PUSH
24587: LD_INT 1
24589: LESSEQUAL
24590: IFFALSE 24651
// begin preparesoldier ( sex_male , 3 ) ;
24592: LD_INT 1
24594: PPUSH
24595: LD_INT 3
24597: PPUSH
24598: CALL_OW 381
// tmp = createhuman ;
24602: LD_ADDR_VAR 0 2
24606: PUSH
24607: CALL_OW 44
24611: ST_TO_ADDR
// if not placeunitxyr ( tmp , 52 , 36 , 3 , false ) then
24612: LD_VAR 0 2
24616: PPUSH
24617: LD_INT 52
24619: PPUSH
24620: LD_INT 36
24622: PPUSH
24623: LD_INT 3
24625: PPUSH
24626: LD_INT 0
24628: PPUSH
24629: CALL_OW 50
24633: NOT
24634: IFFALSE 24651
// placeunitarea ( tmp , ambase , false ) ;
24636: LD_VAR 0 2
24640: PPUSH
24641: LD_INT 8
24643: PPUSH
24644: LD_INT 0
24646: PPUSH
24647: CALL_OW 49
// end ; tmp_m = 0 + tm_m ;
24651: LD_ADDR_VAR 0 12
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: LD_VAR 0 8
24663: PLUS
24664: ST_TO_ADDR
// if tmp_m > 3 then
24665: LD_VAR 0 12
24669: PUSH
24670: LD_INT 3
24672: GREATER
24673: IFFALSE 24683
// tmp_m = 2 ;
24675: LD_ADDR_VAR 0 12
24679: PUSH
24680: LD_INT 2
24682: ST_TO_ADDR
// for tmp1 = 1 to tmp_m do
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: DOUBLE
24689: LD_INT 1
24691: DEC
24692: ST_TO_ADDR
24693: LD_VAR 0 12
24697: PUSH
24698: FOR_TO
24699: IFFALSE 24779
// begin if not placeunitxyr ( tm_m [ tmp1 ] , 45 , 16 , 3 , false ) then
24701: LD_VAR 0 8
24705: PUSH
24706: LD_VAR 0 3
24710: ARRAY
24711: PPUSH
24712: LD_INT 45
24714: PPUSH
24715: LD_INT 16
24717: PPUSH
24718: LD_INT 3
24720: PPUSH
24721: LD_INT 0
24723: PPUSH
24724: CALL_OW 50
24728: NOT
24729: IFFALSE 24752
// placeunitarea ( tm_m [ tmp1 ] , ambase , false ) ;
24731: LD_VAR 0 8
24735: PUSH
24736: LD_VAR 0 3
24740: ARRAY
24741: PPUSH
24742: LD_INT 8
24744: PPUSH
24745: LD_INT 0
24747: PPUSH
24748: CALL_OW 49
// tmz = tmz diff [ tm_m [ tmp1 ] ] ;
24752: LD_ADDR_VAR 0 4
24756: PUSH
24757: LD_VAR 0 4
24761: PUSH
24762: LD_VAR 0 8
24766: PUSH
24767: LD_VAR 0 3
24771: ARRAY
24772: PUSH
24773: EMPTY
24774: LIST
24775: DIFF
24776: ST_TO_ADDR
// end ;
24777: GO 24698
24779: POP
24780: POP
// tot = tot + tmp_m ;
24781: LD_ADDR_VAR 0 14
24785: PUSH
24786: LD_VAR 0 14
24790: PUSH
24791: LD_VAR 0 12
24795: PLUS
24796: ST_TO_ADDR
// if tmp_m = 0 then
24797: LD_VAR 0 12
24801: PUSH
24802: LD_INT 0
24804: EQUAL
24805: IFFALSE 24866
// begin preparemechanic ( sex_male , 3 ) ;
24807: LD_INT 1
24809: PPUSH
24810: LD_INT 3
24812: PPUSH
24813: CALL_OW 383
// tmp = createhuman ;
24817: LD_ADDR_VAR 0 2
24821: PUSH
24822: CALL_OW 44
24826: ST_TO_ADDR
// if not placeunitxyr ( tmp , 45 , 16 , 3 , false ) then
24827: LD_VAR 0 2
24831: PPUSH
24832: LD_INT 45
24834: PPUSH
24835: LD_INT 16
24837: PPUSH
24838: LD_INT 3
24840: PPUSH
24841: LD_INT 0
24843: PPUSH
24844: CALL_OW 50
24848: NOT
24849: IFFALSE 24866
// placeunitarea ( tmp , ambase , false ) ;
24851: LD_VAR 0 2
24855: PPUSH
24856: LD_INT 8
24858: PPUSH
24859: LD_INT 0
24861: PPUSH
24862: CALL_OW 49
// end ; if tmp_m <= 1 then
24866: LD_VAR 0 12
24870: PUSH
24871: LD_INT 1
24873: LESSEQUAL
24874: IFFALSE 24935
// begin preparemechanic ( sex_male , 3 ) ;
24876: LD_INT 1
24878: PPUSH
24879: LD_INT 3
24881: PPUSH
24882: CALL_OW 383
// tmp = createhuman ;
24886: LD_ADDR_VAR 0 2
24890: PUSH
24891: CALL_OW 44
24895: ST_TO_ADDR
// if not placeunitxyr ( tmp , 45 , 16 , 3 , false ) then
24896: LD_VAR 0 2
24900: PPUSH
24901: LD_INT 45
24903: PPUSH
24904: LD_INT 16
24906: PPUSH
24907: LD_INT 3
24909: PPUSH
24910: LD_INT 0
24912: PPUSH
24913: CALL_OW 50
24917: NOT
24918: IFFALSE 24935
// placeunitarea ( tmp , ambase , false ) ;
24920: LD_VAR 0 2
24924: PPUSH
24925: LD_INT 8
24927: PPUSH
24928: LD_INT 0
24930: PPUSH
24931: CALL_OW 49
// end ; tmp_e = 0 + tm_e ;
24935: LD_ADDR_VAR 0 11
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_VAR 0 7
24947: PLUS
24948: ST_TO_ADDR
// if tmp_e > 2 then
24949: LD_VAR 0 11
24953: PUSH
24954: LD_INT 2
24956: GREATER
24957: IFFALSE 24967
// tmp_e = 1 ;
24959: LD_ADDR_VAR 0 11
24963: PUSH
24964: LD_INT 1
24966: ST_TO_ADDR
// for tmp1 = 1 to tmp_e do
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: DOUBLE
24973: LD_INT 1
24975: DEC
24976: ST_TO_ADDR
24977: LD_VAR 0 11
24981: PUSH
24982: FOR_TO
24983: IFFALSE 25063
// begin if not placeunitxyr ( tm_e [ tmp1 ] , 52 , 16 , 3 , false ) then
24985: LD_VAR 0 7
24989: PUSH
24990: LD_VAR 0 3
24994: ARRAY
24995: PPUSH
24996: LD_INT 52
24998: PPUSH
24999: LD_INT 16
25001: PPUSH
25002: LD_INT 3
25004: PPUSH
25005: LD_INT 0
25007: PPUSH
25008: CALL_OW 50
25012: NOT
25013: IFFALSE 25036
// placeunitarea ( tm_e [ tmp1 ] , ambase , false ) ;
25015: LD_VAR 0 7
25019: PUSH
25020: LD_VAR 0 3
25024: ARRAY
25025: PPUSH
25026: LD_INT 8
25028: PPUSH
25029: LD_INT 0
25031: PPUSH
25032: CALL_OW 49
// tmz = tmz diff [ tm_e [ tmp1 ] ] ;
25036: LD_ADDR_VAR 0 4
25040: PUSH
25041: LD_VAR 0 4
25045: PUSH
25046: LD_VAR 0 7
25050: PUSH
25051: LD_VAR 0 3
25055: ARRAY
25056: PUSH
25057: EMPTY
25058: LIST
25059: DIFF
25060: ST_TO_ADDR
// end ;
25061: GO 24982
25063: POP
25064: POP
// tot = tot + tmp_e ;
25065: LD_ADDR_VAR 0 14
25069: PUSH
25070: LD_VAR 0 14
25074: PUSH
25075: LD_VAR 0 11
25079: PLUS
25080: ST_TO_ADDR
// if tmp_e = 0 then
25081: LD_VAR 0 11
25085: PUSH
25086: LD_INT 0
25088: EQUAL
25089: IFFALSE 25150
// begin prepareengineer ( sex_female , 3 ) ;
25091: LD_INT 2
25093: PPUSH
25094: LD_INT 3
25096: PPUSH
25097: CALL_OW 382
// tmp = createhuman ;
25101: LD_ADDR_VAR 0 2
25105: PUSH
25106: CALL_OW 44
25110: ST_TO_ADDR
// if not placeunitxyr ( tmp , 52 , 16 , 3 , false ) then
25111: LD_VAR 0 2
25115: PPUSH
25116: LD_INT 52
25118: PPUSH
25119: LD_INT 16
25121: PPUSH
25122: LD_INT 3
25124: PPUSH
25125: LD_INT 0
25127: PPUSH
25128: CALL_OW 50
25132: NOT
25133: IFFALSE 25150
// placeunitarea ( tmp , ambase , false ) ;
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_INT 8
25142: PPUSH
25143: LD_INT 0
25145: PPUSH
25146: CALL_OW 49
// end ; tmp_s = 0 + tm_s ;
25150: LD_ADDR_VAR 0 13
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_VAR 0 9
25162: PLUS
25163: ST_TO_ADDR
// if tmp_s > 2 then
25164: LD_VAR 0 13
25168: PUSH
25169: LD_INT 2
25171: GREATER
25172: IFFALSE 25182
// tmp_s = 1 ;
25174: LD_ADDR_VAR 0 13
25178: PUSH
25179: LD_INT 1
25181: ST_TO_ADDR
// for tmp1 = 1 to tmp_s do
25182: LD_ADDR_VAR 0 3
25186: PUSH
25187: DOUBLE
25188: LD_INT 1
25190: DEC
25191: ST_TO_ADDR
25192: LD_VAR 0 13
25196: PUSH
25197: FOR_TO
25198: IFFALSE 25278
// begin if not placeunitxyr ( tm_s [ tmp1 ] , 60 , 18 , 3 , false ) then
25200: LD_VAR 0 9
25204: PUSH
25205: LD_VAR 0 3
25209: ARRAY
25210: PPUSH
25211: LD_INT 60
25213: PPUSH
25214: LD_INT 18
25216: PPUSH
25217: LD_INT 3
25219: PPUSH
25220: LD_INT 0
25222: PPUSH
25223: CALL_OW 50
25227: NOT
25228: IFFALSE 25251
// placeunitarea ( tm_s [ tmp1 ] , ambase , false ) ;
25230: LD_VAR 0 9
25234: PUSH
25235: LD_VAR 0 3
25239: ARRAY
25240: PPUSH
25241: LD_INT 8
25243: PPUSH
25244: LD_INT 0
25246: PPUSH
25247: CALL_OW 49
// tmz = tmz diff [ tm_s [ tmp1 ] ] ;
25251: LD_ADDR_VAR 0 4
25255: PUSH
25256: LD_VAR 0 4
25260: PUSH
25261: LD_VAR 0 9
25265: PUSH
25266: LD_VAR 0 3
25270: ARRAY
25271: PUSH
25272: EMPTY
25273: LIST
25274: DIFF
25275: ST_TO_ADDR
// end ;
25276: GO 25197
25278: POP
25279: POP
// tot = tot + tmp_s ;
25280: LD_ADDR_VAR 0 14
25284: PUSH
25285: LD_VAR 0 14
25289: PUSH
25290: LD_VAR 0 13
25294: PLUS
25295: ST_TO_ADDR
// if tmp_s = 0 then
25296: LD_VAR 0 13
25300: PUSH
25301: LD_INT 0
25303: EQUAL
25304: IFFALSE 25365
// begin preparescientist ( sex_female , 2 ) ;
25306: LD_INT 2
25308: PPUSH
25309: LD_INT 2
25311: PPUSH
25312: CALL_OW 384
// tmp = createhuman ;
25316: LD_ADDR_VAR 0 2
25320: PUSH
25321: CALL_OW 44
25325: ST_TO_ADDR
// if not placeunitxyr ( tmp , 60 , 18 , 3 , false ) then
25326: LD_VAR 0 2
25330: PPUSH
25331: LD_INT 60
25333: PPUSH
25334: LD_INT 18
25336: PPUSH
25337: LD_INT 3
25339: PPUSH
25340: LD_INT 0
25342: PPUSH
25343: CALL_OW 50
25347: NOT
25348: IFFALSE 25365
// placeunitarea ( tmp , ambase , false ) ;
25350: LD_VAR 0 2
25354: PPUSH
25355: LD_INT 8
25357: PPUSH
25358: LD_INT 0
25360: PPUSH
25361: CALL_OW 49
// end ; end ; if joan then
25365: LD_EXP 35
25369: IFFALSE 25392
// placeunitxyr ( joan , 52 , 15 , 2 , false ) ;
25371: LD_EXP 35
25375: PPUSH
25376: LD_INT 52
25378: PPUSH
25379: LD_INT 15
25381: PPUSH
25382: LD_INT 2
25384: PPUSH
25385: LD_INT 0
25387: PPUSH
25388: CALL_OW 50
// smejdi = tmz_ diff tmz ;
25392: LD_ADDR_LOC 98
25396: PUSH
25397: LD_VAR 0 5
25401: PUSH
25402: LD_VAR 0 4
25406: DIFF
25407: ST_TO_ADDR
// zbytci = tmz ;
25408: LD_ADDR_LOC 99
25412: PUSH
25413: LD_VAR 0 4
25417: ST_TO_ADDR
// uc_nation = nation_nature ;
25418: LD_ADDR_OWVAR 21
25422: PUSH
25423: LD_INT 0
25425: ST_TO_ADDR
// preparehuman ( sex_male , class_apeman_engineer , 0 ) ;
25426: LD_INT 1
25428: PPUSH
25429: LD_INT 16
25431: PPUSH
25432: LD_INT 0
25434: PPUSH
25435: CALL_OW 380
// placeunitarea ( createhuman , ambase , false ) ;
25439: CALL_OW 44
25443: PPUSH
25444: LD_INT 8
25446: PPUSH
25447: LD_INT 0
25449: PPUSH
25450: CALL_OW 49
// preparehuman ( sex_male , class_apeman_engineer , 0 ) ;
25454: LD_INT 1
25456: PPUSH
25457: LD_INT 16
25459: PPUSH
25460: LD_INT 0
25462: PPUSH
25463: CALL_OW 380
// placeunitarea ( createhuman , ambase , false ) ;
25467: CALL_OW 44
25471: PPUSH
25472: LD_INT 8
25474: PPUSH
25475: LD_INT 0
25477: PPUSH
25478: CALL_OW 49
// preparehuman ( sex_male , class_apeman_engineer , 0 ) ;
25482: LD_INT 1
25484: PPUSH
25485: LD_INT 16
25487: PPUSH
25488: LD_INT 0
25490: PPUSH
25491: CALL_OW 380
// placeunitarea ( createhuman , ambase , false ) ;
25495: CALL_OW 44
25499: PPUSH
25500: LD_INT 8
25502: PPUSH
25503: LD_INT 0
25505: PPUSH
25506: CALL_OW 49
// uc_nation = nation_american ;
25510: LD_ADDR_OWVAR 21
25514: PUSH
25515: LD_INT 1
25517: ST_TO_ADDR
// hc_name =  ;
25518: LD_ADDR_OWVAR 26
25522: PUSH
25523: LD_STRING 
25525: ST_TO_ADDR
// end ; end_of_file
25526: LD_VAR 0 1
25530: RET
// every 0 0$2 + 0 0$0.1 do
25531: GO 25533
25533: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
25534: LD_INT 22
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 25
25549: PUSH
25550: LD_INT 12
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 25
25559: PUSH
25560: LD_INT 16
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 25
25569: PUSH
25570: LD_INT 15
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 25
25579: PUSH
25580: LD_INT 17
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 69
25602: PUSH
25603: LD_INT 22
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 21
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: LD_INT 25
25631: PUSH
25632: LD_INT 12
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 25
25641: PUSH
25642: LD_INT 16
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 25
25651: PUSH
25652: LD_INT 15
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 25
25661: PUSH
25662: LD_INT 17
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 69
25689: GREATER
25690: IFFALSE 25701
// begin SetAchievement ( ACH_POTA ) ;
25692: LD_STRING ACH_POTA
25694: PPUSH
25695: CALL_OW 543
// exit ;
25699: GO 25702
// end ; enable ;
25701: ENABLE
// end ;
25702: END
